
default-cryptx2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000cbf0  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000ec00  8000ec00  0000f000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007d8  8000ee00  8000ee00  0000f200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         0000023c  00000008  8000f5d8  0000fc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  00000244  8000f814  0000fe44  2**0
                  ALLOC
  8 .bss          00000bc0  00000248  00000248  00000000  2**2
                  ALLOC
  9 .heap         0000e1f8  00000e08  00000e08  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000fe44  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000012d0  00000000  00000000  0000fe78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 000028ef  00000000  00000000  00011148  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000257ec  00000000  00000000  00013a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003446  00000000  00000000  00039223  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007435  00000000  00000000  0003c669  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000039c8  00000000  00000000  00043aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00009ef9  00000000  00000000  00047468  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00005ad5  00000000  00000000  00051361  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 000012a0  00000000  00000000  00056e38  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	bb 3c       	mul	r12,sp

Disassembly of section .text:

80002008 <hmac_sha256_init>:

/* HMAC-SHA-256 functions */

void hmac_sha256_init(hmac_sha256_ctx *ctx, const unsigned char *key,
                      unsigned int key_size)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 fd       	sub	sp,60
80002010:	ef 4c ff cc 	st.w	r7[-52],r12
80002014:	ef 4b ff c8 	st.w	r7[-56],r11
80002018:	ef 4a ff c4 	st.w	r7[-60],r10

    const unsigned char *key_used;
    unsigned char key_temp[SHA256_DIGEST_SIZE];
    int i;

    if (key_size == SHA256_BLOCK_SIZE) {
8000201c:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002020:	e0 48 00 40 	cp.w	r8,64
80002024:	c0 91       	brne	80002036 <hmac_sha256_init+0x2e>
        key_used = key;
80002026:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000202a:	ef 48 ff f8 	st.w	r7[-8],r8
        num = SHA256_BLOCK_SIZE;
8000202e:	34 08       	mov	r8,64
80002030:	ef 48 ff f4 	st.w	r7[-12],r8
80002034:	c4 28       	rjmp	800020b8 <hmac_sha256_init+0xb0>
    } else {
        if (key_size > SHA256_BLOCK_SIZE){
80002036:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000203a:	e0 48 00 40 	cp.w	r8,64
8000203e:	e0 88 00 13 	brls	80002064 <hmac_sha256_init+0x5c>
            num = SHA256_DIGEST_SIZE;
80002042:	32 08       	mov	r8,32
80002044:	ef 48 ff f4 	st.w	r7[-12],r8
            sha256(key, key_size, key_temp);
80002048:	ee c8 00 30 	sub	r8,r7,48
8000204c:	10 9a       	mov	r10,r8
8000204e:	ee fb ff c4 	ld.w	r11,r7[-60]
80002052:	ee fc ff c8 	ld.w	r12,r7[-56]
80002056:	f0 1f 00 54 	mcall	800021a4 <hmac_sha256_init+0x19c>
            key_used = key_temp;
8000205a:	ee c8 00 30 	sub	r8,r7,48
8000205e:	ef 48 ff f8 	st.w	r7[-8],r8
80002062:	c0 98       	rjmp	80002074 <hmac_sha256_init+0x6c>
        } else { /* key_size > SHA256_BLOCK_SIZE */
            key_used = key;
80002064:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002068:	ef 48 ff f8 	st.w	r7[-8],r8
            num = key_size;
8000206c:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002070:	ef 48 ff f4 	st.w	r7[-12],r8
        }
        fill = SHA256_BLOCK_SIZE - num;
80002074:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002078:	f0 08 11 40 	rsub	r8,r8,64
8000207c:	ef 48 ff f0 	st.w	r7[-16],r8

        memset(ctx->block_ipad + num, 0x36, fill);
80002080:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002084:	f0 c9 fd 60 	sub	r9,r8,-672
80002088:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000208c:	f2 08 00 08 	add	r8,r9,r8
80002090:	ee fa ff f0 	ld.w	r10,r7[-16]
80002094:	33 6b       	mov	r11,54
80002096:	10 9c       	mov	r12,r8
80002098:	f0 1f 00 44 	mcall	800021a8 <hmac_sha256_init+0x1a0>
        memset(ctx->block_opad + num, 0x5c, fill);
8000209c:	ee f8 ff cc 	ld.w	r8,r7[-52]
800020a0:	f0 c9 fd 20 	sub	r9,r8,-736
800020a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800020a8:	f2 08 00 08 	add	r8,r9,r8
800020ac:	ee fa ff f0 	ld.w	r10,r7[-16]
800020b0:	35 cb       	mov	r11,92
800020b2:	10 9c       	mov	r12,r8
800020b4:	f0 1f 00 3d 	mcall	800021a8 <hmac_sha256_init+0x1a0>
    }

    for (i = 0; i < (int) num; i++) {
800020b8:	30 08       	mov	r8,0
800020ba:	ef 48 ff fc 	st.w	r7[-4],r8
800020be:	c2 a8       	rjmp	80002112 <hmac_sha256_init+0x10a>
        ctx->block_ipad[i] = key_used[i] ^ 0x36;
800020c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020c8:	ee fa ff f8 	ld.w	r10,r7[-8]
800020cc:	f4 08 00 08 	add	r8,r10,r8
800020d0:	11 88       	ld.ub	r8,r8[0x0]
800020d2:	ec 18 00 36 	eorl	r8,0x36
800020d6:	5c 58       	castu.b	r8
800020d8:	ee fa ff cc 	ld.w	r10,r7[-52]
800020dc:	f4 09 00 09 	add	r9,r10,r9
800020e0:	f3 68 02 a0 	st.b	r9[672],r8
        ctx->block_opad[i] = key_used[i] ^ 0x5c;
800020e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020ec:	ee fa ff f8 	ld.w	r10,r7[-8]
800020f0:	f4 08 00 08 	add	r8,r10,r8
800020f4:	11 88       	ld.ub	r8,r8[0x0]
800020f6:	ec 18 00 5c 	eorl	r8,0x5c
800020fa:	5c 58       	castu.b	r8
800020fc:	ee fa ff cc 	ld.w	r10,r7[-52]
80002100:	f4 09 00 09 	add	r9,r10,r9
80002104:	f3 68 02 e0 	st.b	r9[736],r8

        memset(ctx->block_ipad + num, 0x36, fill);
        memset(ctx->block_opad + num, 0x5c, fill);
    }

    for (i = 0; i < (int) num; i++) {
80002108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000210c:	2f f8       	sub	r8,-1
8000210e:	ef 48 ff fc 	st.w	r7[-4],r8
80002112:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000211a:	10 39       	cp.w	r9,r8
8000211c:	fe 99 ff d2 	brgt	800020c0 <hmac_sha256_init+0xb8>
        ctx->block_ipad[i] = key_used[i] ^ 0x36;
        ctx->block_opad[i] = key_used[i] ^ 0x5c;
    }

    sha256_init(&ctx->ctx_inside);
80002120:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002124:	10 9c       	mov	r12,r8
80002126:	f0 1f 00 22 	mcall	800021ac <hmac_sha256_init+0x1a4>
    sha256_update(&ctx->ctx_inside, ctx->block_ipad, SHA256_BLOCK_SIZE);
8000212a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000212e:	f0 c9 fd 60 	sub	r9,r8,-672
80002132:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002136:	34 0a       	mov	r10,64
80002138:	12 9b       	mov	r11,r9
8000213a:	10 9c       	mov	r12,r8
8000213c:	f0 1f 00 1d 	mcall	800021b0 <hmac_sha256_init+0x1a8>

    sha256_init(&ctx->ctx_outside);
80002140:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002144:	f0 c8 ff 58 	sub	r8,r8,-168
80002148:	10 9c       	mov	r12,r8
8000214a:	f0 1f 00 19 	mcall	800021ac <hmac_sha256_init+0x1a4>
    sha256_update(&ctx->ctx_outside, ctx->block_opad,
8000214e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002152:	f0 c9 fd 20 	sub	r9,r8,-736
80002156:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000215a:	f0 c8 ff 58 	sub	r8,r8,-168
8000215e:	34 0a       	mov	r10,64
80002160:	12 9b       	mov	r11,r9
80002162:	10 9c       	mov	r12,r8
80002164:	f0 1f 00 13 	mcall	800021b0 <hmac_sha256_init+0x1a8>
                  SHA256_BLOCK_SIZE);

    /* for hmac_reinit */
    memcpy(&ctx->ctx_inside_reinit, &ctx->ctx_inside,
80002168:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000216c:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002170:	f0 c8 fe b0 	sub	r8,r8,-336
80002174:	e0 6a 00 a8 	mov	r10,168
80002178:	12 9b       	mov	r11,r9
8000217a:	10 9c       	mov	r12,r8
8000217c:	f0 1f 00 0e 	mcall	800021b4 <hmac_sha256_init+0x1ac>
           sizeof(sha256_ctx));
    memcpy(&ctx->ctx_outside_reinit, &ctx->ctx_outside,
80002180:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002184:	f0 c9 ff 58 	sub	r9,r8,-168
80002188:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000218c:	f0 c8 fe 08 	sub	r8,r8,-504
80002190:	e0 6a 00 a8 	mov	r10,168
80002194:	12 9b       	mov	r11,r9
80002196:	10 9c       	mov	r12,r8
80002198:	f0 1f 00 07 	mcall	800021b4 <hmac_sha256_init+0x1ac>
           sizeof(sha256_ctx));
}
8000219c:	2f 1d       	sub	sp,-60
8000219e:	e3 cd 80 80 	ldm	sp++,r7,pc
800021a2:	00 00       	add	r0,r0
800021a4:	80 00       	ld.sh	r0,r0[0x0]
800021a6:	26 44       	sub	r4,100
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	eb ea 80 00 	sthh.w	r0[r0],r5:b,r10:b
800021ae:	26 98       	sub	r8,105
800021b0:	80 00       	ld.sh	r0,r0[0x0]
800021b2:	26 f4       	sub	r4,111
800021b4:	80 00       	ld.sh	r0,r0[0x0]
800021b6:	ea a2       	*unknown*

800021b8 <hmac_sha256_update>:
           sizeof(sha256_ctx));
}

void hmac_sha256_update(hmac_sha256_ctx *ctx, const unsigned char *message,
                        unsigned int message_len)
{
800021b8:	eb cd 40 80 	pushm	r7,lr
800021bc:	1a 97       	mov	r7,sp
800021be:	20 3d       	sub	sp,12
800021c0:	ef 4c ff fc 	st.w	r7[-4],r12
800021c4:	ef 4b ff f8 	st.w	r7[-8],r11
800021c8:	ef 4a ff f4 	st.w	r7[-12],r10
    sha256_update(&ctx->ctx_inside, message, message_len);
800021cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d0:	ee fa ff f4 	ld.w	r10,r7[-12]
800021d4:	ee fb ff f8 	ld.w	r11,r7[-8]
800021d8:	10 9c       	mov	r12,r8
800021da:	f0 1f 00 03 	mcall	800021e4 <hmac_sha256_update+0x2c>
}
800021de:	2f dd       	sub	sp,-12
800021e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	26 f4       	sub	r4,111

800021e8 <hmac_sha256_final>:

void hmac_sha256_final(hmac_sha256_ctx *ctx, unsigned char *mac,
                       unsigned int mac_size)
{
800021e8:	eb cd 40 80 	pushm	r7,lr
800021ec:	1a 97       	mov	r7,sp
800021ee:	21 3d       	sub	sp,76
800021f0:	ef 4c ff bc 	st.w	r7[-68],r12
800021f4:	ef 4b ff b8 	st.w	r7[-72],r11
800021f8:	ef 4a ff b4 	st.w	r7[-76],r10
    unsigned char digest_inside[SHA256_DIGEST_SIZE];
    unsigned char mac_temp[SHA256_DIGEST_SIZE];

    sha256_final(&ctx->ctx_inside, digest_inside);
800021fc:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002200:	ee c9 00 20 	sub	r9,r7,32
80002204:	12 9b       	mov	r11,r9
80002206:	10 9c       	mov	r12,r8
80002208:	f0 1f 00 12 	mcall	80002250 <hmac_sha256_final+0x68>
    sha256_update(&ctx->ctx_outside, digest_inside, SHA256_DIGEST_SIZE);
8000220c:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002210:	f0 c8 ff 58 	sub	r8,r8,-168
80002214:	ee c9 00 20 	sub	r9,r7,32
80002218:	32 0a       	mov	r10,32
8000221a:	12 9b       	mov	r11,r9
8000221c:	10 9c       	mov	r12,r8
8000221e:	f0 1f 00 0e 	mcall	80002254 <hmac_sha256_final+0x6c>
    sha256_final(&ctx->ctx_outside, mac_temp);
80002222:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002226:	f0 c8 ff 58 	sub	r8,r8,-168
8000222a:	ee c9 00 40 	sub	r9,r7,64
8000222e:	12 9b       	mov	r11,r9
80002230:	10 9c       	mov	r12,r8
80002232:	f0 1f 00 08 	mcall	80002250 <hmac_sha256_final+0x68>
    memcpy(mac, mac_temp, mac_size);
80002236:	ee c8 00 40 	sub	r8,r7,64
8000223a:	ee fa ff b4 	ld.w	r10,r7[-76]
8000223e:	10 9b       	mov	r11,r8
80002240:	ee fc ff b8 	ld.w	r12,r7[-72]
80002244:	f0 1f 00 05 	mcall	80002258 <hmac_sha256_final+0x70>
}
80002248:	2e dd       	sub	sp,-76
8000224a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000224e:	00 00       	add	r0,r0
80002250:	80 00       	ld.sh	r0,r0[0x0]
80002252:	28 1c       	sub	r12,-127
80002254:	80 00       	ld.sh	r0,r0[0x0]
80002256:	26 f4       	sub	r4,111
80002258:	80 00       	ld.sh	r0,r0[0x0]
8000225a:	ea a2       	*unknown*

8000225c <hmac_sha256>:

void hmac_sha256(const unsigned char *key, unsigned int key_size,
          const unsigned char *message, unsigned int message_len,
          unsigned char *mac, unsigned mac_size)
{
8000225c:	eb cd 40 c0 	pushm	r6-r7,lr
80002260:	1a 97       	mov	r7,sp
80002262:	fa cd 03 34 	sub	sp,sp,820
80002266:	ee c6 ff f4 	sub	r6,r7,-12
8000226a:	ef 4c fc dc 	st.w	r7[-804],r12
8000226e:	ef 4b fc d8 	st.w	r7[-808],r11
80002272:	ef 4a fc d4 	st.w	r7[-812],r10
80002276:	ef 49 fc d0 	st.w	r7[-816],r9
8000227a:	ef 48 fc cc 	st.w	r7[-820],r8
    hmac_sha256_ctx ctx;

    hmac_sha256_init(&ctx, key, key_size);
8000227e:	ee c8 03 20 	sub	r8,r7,800
80002282:	ee fa fc d8 	ld.w	r10,r7[-808]
80002286:	ee fb fc dc 	ld.w	r11,r7[-804]
8000228a:	10 9c       	mov	r12,r8
8000228c:	f0 1f 00 0c 	mcall	800022bc <hmac_sha256+0x60>
    hmac_sha256_update(&ctx, message, message_len);
80002290:	ee c8 03 20 	sub	r8,r7,800
80002294:	ee fa fc d0 	ld.w	r10,r7[-816]
80002298:	ee fb fc d4 	ld.w	r11,r7[-812]
8000229c:	10 9c       	mov	r12,r8
8000229e:	f0 1f 00 09 	mcall	800022c0 <hmac_sha256+0x64>
    hmac_sha256_final(&ctx, mac, mac_size);
800022a2:	ee c8 03 20 	sub	r8,r7,800
800022a6:	6c 0a       	ld.w	r10,r6[0x0]
800022a8:	ee fb fc cc 	ld.w	r11,r7[-820]
800022ac:	10 9c       	mov	r12,r8
800022ae:	f0 1f 00 06 	mcall	800022c4 <hmac_sha256+0x68>
}
800022b2:	fe 3d fc cc 	sub	sp,-820
800022b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022ba:	00 00       	add	r0,r0
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	20 08       	sub	r8,0
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	21 b8       	sub	r8,27
800022c4:	80 00       	ld.sh	r0,r0[0x0]
800022c6:	21 e8       	sub	r8,30

800022c8 <sha256_transf>:

/* SHA-256 functions */

void sha256_transf(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int block_nb)
{
800022c8:	eb cd 40 80 	pushm	r7,lr
800022cc:	1a 97       	mov	r7,sp
800022ce:	fa cd 01 40 	sub	sp,sp,320
800022d2:	ef 4c fe c8 	st.w	r7[-312],r12
800022d6:	ef 4b fe c4 	st.w	r7[-316],r11
800022da:	ef 4a fe c0 	st.w	r7[-320],r10

#ifndef UNROLL_LOOPS
    int j;
#endif

    for (i = 0; i < (int) block_nb; i++) {
800022de:	30 08       	mov	r8,0
800022e0:	ef 48 ff f8 	st.w	r7[-8],r8
800022e4:	ca 49       	rjmp	8000262c <sha256_transf+0x364>
        sub_block = message + (i << 6);
800022e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022ea:	a7 68       	lsl	r8,0x6
800022ec:	ee f9 fe c4 	ld.w	r9,r7[-316]
800022f0:	f2 08 00 08 	add	r8,r9,r8
800022f4:	ef 48 ff f4 	st.w	r7[-12],r8

#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
800022f8:	30 08       	mov	r8,0
800022fa:	ef 48 ff fc 	st.w	r7[-4],r8
800022fe:	c3 98       	rjmp	80002370 <sha256_transf+0xa8>
            PACK32(&sub_block[j << 2], &w[j]);
80002300:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002304:	f0 09 15 02 	lsl	r9,r8,0x2
80002308:	ee c8 01 14 	sub	r8,r7,276
8000230c:	12 08       	add	r8,r9
8000230e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002312:	a3 69       	lsl	r9,0x2
80002314:	2f d9       	sub	r9,-3
80002316:	ee fa ff f4 	ld.w	r10,r7[-12]
8000231a:	f4 09 00 09 	add	r9,r10,r9
8000231e:	13 89       	ld.ub	r9,r9[0x0]
80002320:	12 9a       	mov	r10,r9
80002322:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002326:	a3 69       	lsl	r9,0x2
80002328:	2f e9       	sub	r9,-2
8000232a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000232e:	f6 09 00 09 	add	r9,r11,r9
80002332:	13 89       	ld.ub	r9,r9[0x0]
80002334:	a9 69       	lsl	r9,0x8
80002336:	12 4a       	or	r10,r9
80002338:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000233c:	a3 69       	lsl	r9,0x2
8000233e:	2f f9       	sub	r9,-1
80002340:	ee fb ff f4 	ld.w	r11,r7[-12]
80002344:	f6 09 00 09 	add	r9,r11,r9
80002348:	13 89       	ld.ub	r9,r9[0x0]
8000234a:	b1 69       	lsl	r9,0x10
8000234c:	12 4a       	or	r10,r9
8000234e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002352:	a3 69       	lsl	r9,0x2
80002354:	ee fb ff f4 	ld.w	r11,r7[-12]
80002358:	f6 09 00 09 	add	r9,r11,r9
8000235c:	13 89       	ld.ub	r9,r9[0x0]
8000235e:	b9 69       	lsl	r9,0x18
80002360:	f5 e9 10 09 	or	r9,r10,r9
80002364:	91 09       	st.w	r8[0x0],r9

    for (i = 0; i < (int) block_nb; i++) {
        sub_block = message + (i << 6);

#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
80002366:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000236a:	2f f8       	sub	r8,-1
8000236c:	ef 48 ff fc 	st.w	r7[-4],r8
80002370:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002374:	58 f8       	cp.w	r8,15
80002376:	fe 9a ff c5 	brle	80002300 <sha256_transf+0x38>
            PACK32(&sub_block[j << 2], &w[j]);
        }

        for (j = 16; j < 64; j++) {
8000237a:	31 08       	mov	r8,16
8000237c:	ef 48 ff fc 	st.w	r7[-4],r8
80002380:	c6 c8       	rjmp	80002458 <sha256_transf+0x190>
            SHA256_SCR(j);
80002382:	ee fa ff fc 	ld.w	r10,r7[-4]
80002386:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000238a:	20 28       	sub	r8,2
8000238c:	a3 68       	lsl	r8,0x2
8000238e:	ee 08 00 08 	add	r8,r7,r8
80002392:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002396:	f0 0b 16 11 	lsr	r11,r8,0x11
8000239a:	f0 09 15 0f 	lsl	r9,r8,0xf
8000239e:	16 49       	or	r9,r11
800023a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023a4:	20 28       	sub	r8,2
800023a6:	a3 68       	lsl	r8,0x2
800023a8:	ee 08 00 08 	add	r8,r7,r8
800023ac:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023b0:	f0 0b 16 13 	lsr	r11,r8,0x13
800023b4:	ad 78       	lsl	r8,0xd
800023b6:	16 48       	or	r8,r11
800023b8:	10 59       	eor	r9,r8
800023ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023be:	20 28       	sub	r8,2
800023c0:	a3 68       	lsl	r8,0x2
800023c2:	ee 08 00 08 	add	r8,r7,r8
800023c6:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023ca:	ab 88       	lsr	r8,0xa
800023cc:	10 59       	eor	r9,r8
800023ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023d2:	20 78       	sub	r8,7
800023d4:	a3 68       	lsl	r8,0x2
800023d6:	ee 08 00 08 	add	r8,r7,r8
800023da:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023de:	f2 08 00 0b 	add	r11,r9,r8
800023e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023e6:	20 f8       	sub	r8,15
800023e8:	a3 68       	lsl	r8,0x2
800023ea:	ee 08 00 08 	add	r8,r7,r8
800023ee:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023f2:	f0 0c 16 07 	lsr	r12,r8,0x7
800023f6:	f0 09 15 19 	lsl	r9,r8,0x19
800023fa:	18 49       	or	r9,r12
800023fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002400:	20 f8       	sub	r8,15
80002402:	a3 68       	lsl	r8,0x2
80002404:	ee 08 00 08 	add	r8,r7,r8
80002408:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000240c:	f0 0c 16 12 	lsr	r12,r8,0x12
80002410:	af 68       	lsl	r8,0xe
80002412:	18 48       	or	r8,r12
80002414:	10 59       	eor	r9,r8
80002416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000241a:	20 f8       	sub	r8,15
8000241c:	a3 68       	lsl	r8,0x2
8000241e:	ee 08 00 08 	add	r8,r7,r8
80002422:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002426:	a3 98       	lsr	r8,0x3
80002428:	f3 e8 20 08 	eor	r8,r9,r8
8000242c:	f6 08 00 09 	add	r9,r11,r8
80002430:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002434:	21 08       	sub	r8,16
80002436:	a3 68       	lsl	r8,0x2
80002438:	ee 08 00 08 	add	r8,r7,r8
8000243c:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002440:	10 09       	add	r9,r8
80002442:	f4 08 15 02 	lsl	r8,r10,0x2
80002446:	ee 08 00 08 	add	r8,r7,r8
8000244a:	f1 49 fe ec 	st.w	r8[-276],r9
#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
            PACK32(&sub_block[j << 2], &w[j]);
        }

        for (j = 16; j < 64; j++) {
8000244e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002452:	2f f8       	sub	r8,-1
80002454:	ef 48 ff fc 	st.w	r7[-4],r8
80002458:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000245c:	e0 48 00 3f 	cp.w	r8,63
80002460:	fe 9a ff 91 	brle	80002382 <sha256_transf+0xba>
            SHA256_SCR(j);
        }

        for (j = 0; j < 8; j++) {
80002464:	30 08       	mov	r8,0
80002466:	ef 48 ff fc 	st.w	r7[-4],r8
8000246a:	c1 48       	rjmp	80002492 <sha256_transf+0x1ca>
            wv[j] = ctx->h[j];
8000246c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002470:	ee fa ff fc 	ld.w	r10,r7[-4]
80002474:	ee f9 fe c8 	ld.w	r9,r7[-312]
80002478:	2d ea       	sub	r10,-34
8000247a:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000247e:	a3 68       	lsl	r8,0x2
80002480:	ee 08 00 08 	add	r8,r7,r8
80002484:	f1 49 fe cc 	st.w	r8[-308],r9

        for (j = 16; j < 64; j++) {
            SHA256_SCR(j);
        }

        for (j = 0; j < 8; j++) {
80002488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000248c:	2f f8       	sub	r8,-1
8000248e:	ef 48 ff fc 	st.w	r7[-4],r8
80002492:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002496:	58 78       	cp.w	r8,7
80002498:	fe 9a ff ea 	brle	8000246c <sha256_transf+0x1a4>
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
8000249c:	30 08       	mov	r8,0
8000249e:	ef 48 ff fc 	st.w	r7[-4],r8
800024a2:	c9 68       	rjmp	800025ce <sha256_transf+0x306>
            t1 = wv[7] + SHA256_F2(wv[4]) + CH(wv[4], wv[5], wv[6])
800024a4:	ee fa fe e8 	ld.w	r10,r7[-280]
800024a8:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024ac:	f0 0b 16 06 	lsr	r11,r8,0x6
800024b0:	f0 09 15 1a 	lsl	r9,r8,0x1a
800024b4:	16 49       	or	r9,r11
800024b6:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024ba:	f0 0b 16 0b 	lsr	r11,r8,0xb
800024be:	b5 78       	lsl	r8,0x15
800024c0:	16 48       	or	r8,r11
800024c2:	10 59       	eor	r9,r8
800024c4:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024c8:	f0 0b 16 19 	lsr	r11,r8,0x19
800024cc:	a7 78       	lsl	r8,0x7
800024ce:	16 48       	or	r8,r11
800024d0:	f3 e8 20 08 	eor	r8,r9,r8
800024d4:	f4 08 00 09 	add	r9,r10,r8
800024d8:	ee fa fe dc 	ld.w	r10,r7[-292]
800024dc:	ee f8 fe e0 	ld.w	r8,r7[-288]
800024e0:	10 6a       	and	r10,r8
800024e2:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024e6:	f0 0b 11 ff 	rsub	r11,r8,-1
800024ea:	ee f8 fe e4 	ld.w	r8,r7[-284]
800024ee:	f7 e8 00 08 	and	r8,r11,r8
800024f2:	f5 e8 20 08 	eor	r8,r10,r8
                + sha256_k[j] + w[j];
800024f6:	10 09       	add	r9,r8
800024f8:	ee fa ff fc 	ld.w	r10,r7[-4]
800024fc:	4d 18       	lddpc	r8,80002640 <sha256_transf+0x378>
800024fe:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002502:	10 09       	add	r9,r8
80002504:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002508:	a3 68       	lsl	r8,0x2
8000250a:	ee 08 00 08 	add	r8,r7,r8
8000250e:	f0 f8 fe ec 	ld.w	r8,r8[-276]
        for (j = 0; j < 8; j++) {
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
            t1 = wv[7] + SHA256_F2(wv[4]) + CH(wv[4], wv[5], wv[6])
80002512:	f2 08 00 08 	add	r8,r9,r8
80002516:	ef 48 ff ec 	st.w	r7[-20],r8
                + sha256_k[j] + w[j];
            t2 = SHA256_F1(wv[0]) + MAJ(wv[0], wv[1], wv[2]);
8000251a:	ee f8 fe cc 	ld.w	r8,r7[-308]
8000251e:	f0 0a 16 02 	lsr	r10,r8,0x2
80002522:	f0 09 15 1e 	lsl	r9,r8,0x1e
80002526:	14 49       	or	r9,r10
80002528:	ee f8 fe cc 	ld.w	r8,r7[-308]
8000252c:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002530:	b3 78       	lsl	r8,0x13
80002532:	14 48       	or	r8,r10
80002534:	10 59       	eor	r9,r8
80002536:	ee f8 fe cc 	ld.w	r8,r7[-308]
8000253a:	f0 0a 16 16 	lsr	r10,r8,0x16
8000253e:	ab 68       	lsl	r8,0xa
80002540:	14 48       	or	r8,r10
80002542:	10 59       	eor	r9,r8
80002544:	ee fa fe cc 	ld.w	r10,r7[-308]
80002548:	ee f8 fe d0 	ld.w	r8,r7[-304]
8000254c:	10 6a       	and	r10,r8
8000254e:	ee fb fe cc 	ld.w	r11,r7[-308]
80002552:	ee f8 fe d4 	ld.w	r8,r7[-300]
80002556:	f7 e8 00 08 	and	r8,r11,r8
8000255a:	10 5a       	eor	r10,r8
8000255c:	ee fb fe d0 	ld.w	r11,r7[-304]
80002560:	ee f8 fe d4 	ld.w	r8,r7[-300]
80002564:	f7 e8 00 08 	and	r8,r11,r8
80002568:	f5 e8 20 08 	eor	r8,r10,r8
8000256c:	f2 08 00 08 	add	r8,r9,r8
80002570:	ef 48 ff f0 	st.w	r7[-16],r8
            wv[7] = wv[6];
80002574:	ee f8 fe e4 	ld.w	r8,r7[-284]
80002578:	ef 48 fe e8 	st.w	r7[-280],r8
            wv[6] = wv[5];
8000257c:	ee f8 fe e0 	ld.w	r8,r7[-288]
80002580:	ef 48 fe e4 	st.w	r7[-284],r8
            wv[5] = wv[4];
80002584:	ee f8 fe dc 	ld.w	r8,r7[-292]
80002588:	ef 48 fe e0 	st.w	r7[-288],r8
            wv[4] = wv[3] + t1;
8000258c:	ee f9 fe d8 	ld.w	r9,r7[-296]
80002590:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002594:	f2 08 00 08 	add	r8,r9,r8
80002598:	ef 48 fe dc 	st.w	r7[-292],r8
            wv[3] = wv[2];
8000259c:	ee f8 fe d4 	ld.w	r8,r7[-300]
800025a0:	ef 48 fe d8 	st.w	r7[-296],r8
            wv[2] = wv[1];
800025a4:	ee f8 fe d0 	ld.w	r8,r7[-304]
800025a8:	ef 48 fe d4 	st.w	r7[-300],r8
            wv[1] = wv[0];
800025ac:	ee f8 fe cc 	ld.w	r8,r7[-308]
800025b0:	ef 48 fe d0 	st.w	r7[-304],r8
            wv[0] = t1 + t2;
800025b4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800025b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800025bc:	f2 08 00 08 	add	r8,r9,r8
800025c0:	ef 48 fe cc 	st.w	r7[-308],r8

        for (j = 0; j < 8; j++) {
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
800025c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025c8:	2f f8       	sub	r8,-1
800025ca:	ef 48 ff fc 	st.w	r7[-4],r8
800025ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025d2:	e0 48 00 3f 	cp.w	r8,63
800025d6:	fe 9a ff 67 	brle	800024a4 <sha256_transf+0x1dc>
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }

        for (j = 0; j < 8; j++) {
800025da:	30 08       	mov	r8,0
800025dc:	ef 48 ff fc 	st.w	r7[-4],r8
800025e0:	c1 c8       	rjmp	80002618 <sha256_transf+0x350>
            ctx->h[j] += wv[j];
800025e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800025e6:	ee fa ff fc 	ld.w	r10,r7[-4]
800025ea:	ee f8 fe c8 	ld.w	r8,r7[-312]
800025ee:	2d ea       	sub	r10,-34
800025f0:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800025f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025f8:	a3 68       	lsl	r8,0x2
800025fa:	ee 08 00 08 	add	r8,r7,r8
800025fe:	f0 f8 fe cc 	ld.w	r8,r8[-308]
80002602:	10 0a       	add	r10,r8
80002604:	ee f8 fe c8 	ld.w	r8,r7[-312]
80002608:	2d e9       	sub	r9,-34
8000260a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }

        for (j = 0; j < 8; j++) {
8000260e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002612:	2f f8       	sub	r8,-1
80002614:	ef 48 ff fc 	st.w	r7[-4],r8
80002618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000261c:	58 78       	cp.w	r8,7
8000261e:	fe 9a ff e2 	brle	800025e2 <sha256_transf+0x31a>

#ifndef UNROLL_LOOPS
    int j;
#endif

    for (i = 0; i < (int) block_nb; i++) {
80002622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002626:	2f f8       	sub	r8,-1
80002628:	ef 48 ff f8 	st.w	r7[-8],r8
8000262c:	ee f9 fe c0 	ld.w	r9,r7[-320]
80002630:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002634:	10 39       	cp.w	r9,r8
80002636:	fe 99 fe 58 	brgt	800022e6 <sha256_transf+0x1e>
        ctx->h[2] += wv[2]; ctx->h[3] += wv[3];
        ctx->h[4] += wv[4]; ctx->h[5] += wv[5];
        ctx->h[6] += wv[6]; ctx->h[7] += wv[7];
#endif /* !UNROLL_LOOPS */
    }
}
8000263a:	2b 0d       	sub	sp,-320
8000263c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002640:	00 00       	add	r0,r0
80002642:	00 28       	rsub	r8,r0

80002644 <sha256>:

void sha256(const unsigned char *message, unsigned int len, unsigned char *digest)
{
80002644:	eb cd 40 80 	pushm	r7,lr
80002648:	1a 97       	mov	r7,sp
8000264a:	fa cd 00 b4 	sub	sp,sp,180
8000264e:	ef 4c ff 54 	st.w	r7[-172],r12
80002652:	ef 4b ff 50 	st.w	r7[-176],r11
80002656:	ef 4a ff 4c 	st.w	r7[-180],r10
    sha256_ctx ctx;

    sha256_init(&ctx);
8000265a:	ee c8 00 a8 	sub	r8,r7,168
8000265e:	10 9c       	mov	r12,r8
80002660:	f0 1f 00 0b 	mcall	8000268c <sha256+0x48>
    sha256_update(&ctx, message, len);
80002664:	ee c8 00 a8 	sub	r8,r7,168
80002668:	ee fa ff 50 	ld.w	r10,r7[-176]
8000266c:	ee fb ff 54 	ld.w	r11,r7[-172]
80002670:	10 9c       	mov	r12,r8
80002672:	f0 1f 00 08 	mcall	80002690 <sha256+0x4c>
    sha256_final(&ctx, digest);
80002676:	ee c8 00 a8 	sub	r8,r7,168
8000267a:	ee fb ff 4c 	ld.w	r11,r7[-180]
8000267e:	10 9c       	mov	r12,r8
80002680:	f0 1f 00 05 	mcall	80002694 <sha256+0x50>
}
80002684:	2d 3d       	sub	sp,-180
80002686:	e3 cd 80 80 	ldm	sp++,r7,pc
8000268a:	00 00       	add	r0,r0
8000268c:	80 00       	ld.sh	r0,r0[0x0]
8000268e:	26 98       	sub	r8,105
80002690:	80 00       	ld.sh	r0,r0[0x0]
80002692:	26 f4       	sub	r4,111
80002694:	80 00       	ld.sh	r0,r0[0x0]
80002696:	28 1c       	sub	r12,-127

80002698 <sha256_init>:

void sha256_init(sha256_ctx *ctx)
{
80002698:	eb cd 40 80 	pushm	r7,lr
8000269c:	1a 97       	mov	r7,sp
8000269e:	20 2d       	sub	sp,8
800026a0:	ef 4c ff f8 	st.w	r7[-8],r12
#ifndef UNROLL_LOOPS
    int i;
    for (i = 0; i < 8; i++) {
800026a4:	30 08       	mov	r8,0
800026a6:	ef 48 ff fc 	st.w	r7[-4],r8
800026aa:	c1 28       	rjmp	800026ce <sha256_init+0x36>
        ctx->h[i] = sha256_h0[i];
800026ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800026b0:	ee fa ff fc 	ld.w	r10,r7[-4]
800026b4:	48 f8       	lddpc	r8,800026f0 <sha256_init+0x58>
800026b6:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800026ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026be:	2d e9       	sub	r9,-34
800026c0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

void sha256_init(sha256_ctx *ctx)
{
#ifndef UNROLL_LOOPS
    int i;
    for (i = 0; i < 8; i++) {
800026c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026c8:	2f f8       	sub	r8,-1
800026ca:	ef 48 ff fc 	st.w	r7[-4],r8
800026ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026d2:	58 78       	cp.w	r8,7
800026d4:	fe 9a ff ec 	brle	800026ac <sha256_init+0x14>
    ctx->h[2] = sha256_h0[2]; ctx->h[3] = sha256_h0[3];
    ctx->h[4] = sha256_h0[4]; ctx->h[5] = sha256_h0[5];
    ctx->h[6] = sha256_h0[6]; ctx->h[7] = sha256_h0[7];
#endif /* !UNROLL_LOOPS */

    ctx->len = 0;
800026d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026dc:	30 09       	mov	r9,0
800026de:	91 19       	st.w	r8[0x4],r9
    ctx->tot_len = 0;
800026e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026e4:	30 09       	mov	r9,0
800026e6:	91 09       	st.w	r8[0x0],r9
}
800026e8:	2f ed       	sub	sp,-8
800026ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800026ee:	00 00       	add	r0,r0
800026f0:	00 00       	add	r0,r0
800026f2:	00 08       	add	r8,r0

800026f4 <sha256_update>:

void sha256_update(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int len)
{
800026f4:	eb cd 40 80 	pushm	r7,lr
800026f8:	1a 97       	mov	r7,sp
800026fa:	20 8d       	sub	sp,32
800026fc:	ef 4c ff e8 	st.w	r7[-24],r12
80002700:	ef 4b ff e4 	st.w	r7[-28],r11
80002704:	ef 4a ff e0 	st.w	r7[-32],r10
    unsigned int block_nb;
    unsigned int new_len, rem_len, tmp_len;
    const unsigned char *shifted_message;

    tmp_len = SHA256_BLOCK_SIZE - ctx->len;
80002708:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000270c:	70 18       	ld.w	r8,r8[0x4]
8000270e:	f0 08 11 40 	rsub	r8,r8,64
80002712:	ef 48 ff f8 	st.w	r7[-8],r8
    rem_len = len < tmp_len ? len : tmp_len;
80002716:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000271a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000271e:	ee fa ff f8 	ld.w	r10,r7[-8]
80002722:	10 3a       	cp.w	r10,r8
80002724:	f2 08 17 80 	movls	r8,r9
80002728:	ef 48 ff f4 	st.w	r7[-12],r8

    memcpy(&ctx->block[ctx->len], message, rem_len);
8000272c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002730:	f0 c9 ff f8 	sub	r9,r8,-8
80002734:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002738:	70 18       	ld.w	r8,r8[0x4]
8000273a:	f2 08 00 08 	add	r8,r9,r8
8000273e:	ee fa ff f4 	ld.w	r10,r7[-12]
80002742:	ee fb ff e4 	ld.w	r11,r7[-28]
80002746:	10 9c       	mov	r12,r8
80002748:	f0 1f 00 33 	mcall	80002814 <sha256_update+0x120>

    if (ctx->len + len < SHA256_BLOCK_SIZE) {
8000274c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002750:	70 19       	ld.w	r9,r8[0x4]
80002752:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002756:	f2 08 00 08 	add	r8,r9,r8
8000275a:	e0 48 00 3f 	cp.w	r8,63
8000275e:	e0 8b 00 0c 	brhi	80002776 <sha256_update+0x82>
        ctx->len += len;
80002762:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002766:	70 19       	ld.w	r9,r8[0x4]
80002768:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000276c:	10 09       	add	r9,r8
8000276e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002772:	91 19       	st.w	r8[0x4],r9
        return;
80002774:	c4 c8       	rjmp	8000280c <sha256_update+0x118>
    }

    new_len = len - rem_len;
80002776:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000277a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000277e:	f2 08 01 08 	sub	r8,r9,r8
80002782:	ef 48 ff f0 	st.w	r7[-16],r8
    block_nb = new_len / SHA256_BLOCK_SIZE;
80002786:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000278a:	a7 88       	lsr	r8,0x6
8000278c:	ef 48 ff ec 	st.w	r7[-20],r8

    shifted_message = message + rem_len;
80002790:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002794:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002798:	f2 08 00 08 	add	r8,r9,r8
8000279c:	ef 48 ff fc 	st.w	r7[-4],r8

    sha256_transf(ctx, ctx->block, 1);
800027a0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027a4:	2f 88       	sub	r8,-8
800027a6:	30 1a       	mov	r10,1
800027a8:	10 9b       	mov	r11,r8
800027aa:	ee fc ff e8 	ld.w	r12,r7[-24]
800027ae:	f0 1f 00 1b 	mcall	80002818 <sha256_update+0x124>
    sha256_transf(ctx, shifted_message, block_nb);
800027b2:	ee fa ff ec 	ld.w	r10,r7[-20]
800027b6:	ee fb ff fc 	ld.w	r11,r7[-4]
800027ba:	ee fc ff e8 	ld.w	r12,r7[-24]
800027be:	f0 1f 00 17 	mcall	80002818 <sha256_update+0x124>

    rem_len = new_len % SHA256_BLOCK_SIZE;
800027c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027c6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800027ca:	ef 48 ff f4 	st.w	r7[-12],r8

    memcpy(ctx->block, &shifted_message[block_nb << 6],
800027ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800027d2:	a7 68       	lsl	r8,0x6
800027d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027d8:	10 09       	add	r9,r8
800027da:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027de:	2f 88       	sub	r8,-8
800027e0:	ee fa ff f4 	ld.w	r10,r7[-12]
800027e4:	12 9b       	mov	r11,r9
800027e6:	10 9c       	mov	r12,r8
800027e8:	f0 1f 00 0b 	mcall	80002814 <sha256_update+0x120>
           rem_len);

    ctx->len = rem_len;
800027ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800027f4:	91 19       	st.w	r8[0x4],r9
    ctx->tot_len += (block_nb + 1) << 6;
800027f6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027fa:	70 09       	ld.w	r9,r8[0x0]
800027fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002800:	2f f8       	sub	r8,-1
80002802:	a7 68       	lsl	r8,0x6
80002804:	10 09       	add	r9,r8
80002806:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000280a:	91 09       	st.w	r8[0x0],r9
}
8000280c:	2f 8d       	sub	sp,-32
8000280e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002812:	00 00       	add	r0,r0
80002814:	80 00       	ld.sh	r0,r0[0x0]
80002816:	ea a2       	*unknown*
80002818:	80 00       	ld.sh	r0,r0[0x0]
8000281a:	22 c8       	sub	r8,44

8000281c <sha256_final>:

void sha256_final(sha256_ctx *ctx, unsigned char *digest)
{
8000281c:	eb cd 40 80 	pushm	r7,lr
80002820:	1a 97       	mov	r7,sp
80002822:	20 6d       	sub	sp,24
80002824:	ef 4c ff ec 	st.w	r7[-20],r12
80002828:	ef 4b ff e8 	st.w	r7[-24],r11
#ifndef UNROLL_LOOPS
    int i;
#endif

    block_nb = (1 + ((SHA256_BLOCK_SIZE - 9)
                     < (ctx->len % SHA256_BLOCK_SIZE)));
8000282c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002830:	70 18       	ld.w	r8,r8[0x4]
80002832:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6

#ifndef UNROLL_LOOPS
    int i;
#endif

    block_nb = (1 + ((SHA256_BLOCK_SIZE - 9)
80002836:	e0 48 00 37 	cp.w	r8,55
8000283a:	e0 88 00 04 	brls	80002842 <sha256_final+0x26>
8000283e:	30 28       	mov	r8,2
80002840:	c0 28       	rjmp	80002844 <sha256_final+0x28>
80002842:	30 18       	mov	r8,1
80002844:	ef 48 ff f0 	st.w	r7[-16],r8
                     < (ctx->len % SHA256_BLOCK_SIZE)));

    len_b = (ctx->tot_len + ctx->len) << 3;
80002848:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000284c:	70 09       	ld.w	r9,r8[0x0]
8000284e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002852:	70 18       	ld.w	r8,r8[0x4]
80002854:	f2 08 00 08 	add	r8,r9,r8
80002858:	a3 78       	lsl	r8,0x3
8000285a:	ef 48 ff f8 	st.w	r7[-8],r8
    pm_len = block_nb << 6;
8000285e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002862:	a7 68       	lsl	r8,0x6
80002864:	ef 48 ff f4 	st.w	r7[-12],r8

    memset(ctx->block + ctx->len, 0, pm_len - ctx->len);
80002868:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000286c:	70 18       	ld.w	r8,r8[0x4]
8000286e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002872:	10 19       	sub	r9,r8
80002874:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002878:	f0 ca ff f8 	sub	r10,r8,-8
8000287c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002880:	70 18       	ld.w	r8,r8[0x4]
80002882:	f4 08 00 08 	add	r8,r10,r8
80002886:	12 9a       	mov	r10,r9
80002888:	30 0b       	mov	r11,0
8000288a:	10 9c       	mov	r12,r8
8000288c:	f0 1f 00 4e 	mcall	800029c4 <sha256_final+0x1a8>
    ctx->block[ctx->len] = 0x80;
80002890:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002894:	70 18       	ld.w	r8,r8[0x4]
80002896:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000289a:	10 09       	add	r9,r8
8000289c:	38 08       	mov	r8,-128
8000289e:	f3 68 00 08 	st.b	r9[8],r8
    UNPACK32(len_b, ctx->block + pm_len - 4);
800028a2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028a6:	f0 c9 ff f8 	sub	r9,r8,-8
800028aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028ae:	20 18       	sub	r8,1
800028b0:	10 09       	add	r9,r8
800028b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028b6:	5c 58       	castu.b	r8
800028b8:	b2 88       	st.b	r9[0x0],r8
800028ba:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028be:	f0 c9 ff f8 	sub	r9,r8,-8
800028c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028c6:	20 28       	sub	r8,2
800028c8:	10 09       	add	r9,r8
800028ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028ce:	a9 88       	lsr	r8,0x8
800028d0:	5c 58       	castu.b	r8
800028d2:	b2 88       	st.b	r9[0x0],r8
800028d4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028d8:	f0 c9 ff f8 	sub	r9,r8,-8
800028dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028e0:	20 38       	sub	r8,3
800028e2:	10 09       	add	r9,r8
800028e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028e8:	b1 88       	lsr	r8,0x10
800028ea:	5c 58       	castu.b	r8
800028ec:	b2 88       	st.b	r9[0x0],r8
800028ee:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028f2:	f0 c9 ff f8 	sub	r9,r8,-8
800028f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028fa:	20 48       	sub	r8,4
800028fc:	10 09       	add	r9,r8
800028fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002902:	b9 88       	lsr	r8,0x18
80002904:	5c 58       	castu.b	r8
80002906:	b2 88       	st.b	r9[0x0],r8

    sha256_transf(ctx, ctx->block, block_nb);
80002908:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000290c:	2f 88       	sub	r8,-8
8000290e:	ee fa ff f0 	ld.w	r10,r7[-16]
80002912:	10 9b       	mov	r11,r8
80002914:	ee fc ff ec 	ld.w	r12,r7[-20]
80002918:	f0 1f 00 2c 	mcall	800029c8 <sha256_final+0x1ac>

#ifndef UNROLL_LOOPS
    for (i = 0 ; i < 8; i++) {
8000291c:	30 08       	mov	r8,0
8000291e:	ef 48 ff fc 	st.w	r7[-4],r8
80002922:	c4 88       	rjmp	800029b2 <sha256_final+0x196>
        UNPACK32(ctx->h[i], &digest[i << 2]);
80002924:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002928:	a3 68       	lsl	r8,0x2
8000292a:	2f d8       	sub	r8,-3
8000292c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002930:	10 09       	add	r9,r8
80002932:	ee fa ff fc 	ld.w	r10,r7[-4]
80002936:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000293a:	2d ea       	sub	r10,-34
8000293c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002940:	5c 58       	castu.b	r8
80002942:	b2 88       	st.b	r9[0x0],r8
80002944:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002948:	a3 68       	lsl	r8,0x2
8000294a:	2f e8       	sub	r8,-2
8000294c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002950:	10 09       	add	r9,r8
80002952:	ee fa ff fc 	ld.w	r10,r7[-4]
80002956:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000295a:	2d ea       	sub	r10,-34
8000295c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002960:	a9 88       	lsr	r8,0x8
80002962:	5c 58       	castu.b	r8
80002964:	b2 88       	st.b	r9[0x0],r8
80002966:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000296a:	a3 68       	lsl	r8,0x2
8000296c:	2f f8       	sub	r8,-1
8000296e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002972:	10 09       	add	r9,r8
80002974:	ee fa ff fc 	ld.w	r10,r7[-4]
80002978:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000297c:	2d ea       	sub	r10,-34
8000297e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002982:	b1 88       	lsr	r8,0x10
80002984:	5c 58       	castu.b	r8
80002986:	b2 88       	st.b	r9[0x0],r8
80002988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000298c:	a3 68       	lsl	r8,0x2
8000298e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002992:	10 09       	add	r9,r8
80002994:	ee fa ff fc 	ld.w	r10,r7[-4]
80002998:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000299c:	2d ea       	sub	r10,-34
8000299e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800029a2:	b9 88       	lsr	r8,0x18
800029a4:	5c 58       	castu.b	r8
800029a6:	b2 88       	st.b	r9[0x0],r8
    UNPACK32(len_b, ctx->block + pm_len - 4);

    sha256_transf(ctx, ctx->block, block_nb);

#ifndef UNROLL_LOOPS
    for (i = 0 ; i < 8; i++) {
800029a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029ac:	2f f8       	sub	r8,-1
800029ae:	ef 48 ff fc 	st.w	r7[-4],r8
800029b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029b6:	58 78       	cp.w	r8,7
800029b8:	fe 9a ff b6 	brle	80002924 <sha256_final+0x108>
   UNPACK32(ctx->h[4], &digest[16]);
   UNPACK32(ctx->h[5], &digest[20]);
   UNPACK32(ctx->h[6], &digest[24]);
   UNPACK32(ctx->h[7], &digest[28]);
#endif /* !UNROLL_LOOPS */
}
800029bc:	2f ad       	sub	sp,-24
800029be:	e3 cd 80 80 	ldm	sp++,r7,pc
800029c2:	00 00       	add	r0,r0
800029c4:	80 00       	ld.sh	r0,r0[0x0]
800029c6:	eb ea 80 00 	sthh.w	r0[r0],r5:b,r10:b
800029ca:	22 c8       	sub	r8,44

800029cc <pbkdf2_func>:

volatile uint256_t var_Password;


void pbkdf2_func(uint8_t *password, uint8_t *derived_key)
{
800029cc:	eb cd 40 80 	pushm	r7,lr
800029d0:	1a 97       	mov	r7,sp
800029d2:	fa cd 00 98 	sub	sp,sp,152
800029d6:	ef 4c ff 6c 	st.w	r7[-148],r12
800029da:	ef 4b ff 68 	st.w	r7[-152],r11
	unsigned short int iteration_count;
	unsigned char mac[hLen];
	unsigned char Ubuffer[hLen+4] = {0};
800029de:	ee c8 00 50 	sub	r8,r7,80
800029e2:	30 0a       	mov	r10,0
800029e4:	30 0b       	mov	r11,0
800029e6:	f0 eb 00 00 	st.d	r8[0],r10
800029ea:	2f 88       	sub	r8,-8
800029ec:	30 0a       	mov	r10,0
800029ee:	30 0b       	mov	r11,0
800029f0:	f0 eb 00 00 	st.d	r8[0],r10
800029f4:	2f 88       	sub	r8,-8
800029f6:	30 0a       	mov	r10,0
800029f8:	30 0b       	mov	r11,0
800029fa:	f0 eb 00 00 	st.d	r8[0],r10
800029fe:	2f 88       	sub	r8,-8
80002a00:	30 0a       	mov	r10,0
80002a02:	30 0b       	mov	r11,0
80002a04:	f0 eb 00 00 	st.d	r8[0],r10
80002a08:	2f 88       	sub	r8,-8
80002a0a:	30 09       	mov	r9,0
80002a0c:	91 09       	st.w	r8[0x0],r9
80002a0e:	2f c8       	sub	r8,-4
	unsigned char Tbuffer[hLen] = {0};
80002a10:	ee c8 00 70 	sub	r8,r7,112
80002a14:	30 0a       	mov	r10,0
80002a16:	30 0b       	mov	r11,0
80002a18:	f0 eb 00 00 	st.d	r8[0],r10
80002a1c:	2f 88       	sub	r8,-8
80002a1e:	30 0a       	mov	r10,0
80002a20:	30 0b       	mov	r11,0
80002a22:	f0 eb 00 00 	st.d	r8[0],r10
80002a26:	2f 88       	sub	r8,-8
80002a28:	30 0a       	mov	r10,0
80002a2a:	30 0b       	mov	r11,0
80002a2c:	f0 eb 00 00 	st.d	r8[0],r10
80002a30:	2f 88       	sub	r8,-8
80002a32:	30 0a       	mov	r10,0
80002a34:	30 0b       	mov	r11,0
80002a36:	f0 eb 00 00 	st.d	r8[0],r10
80002a3a:	2f 88       	sub	r8,-8
	unsigned char Fbuffer[hLen] = {0};
80002a3c:	ee c8 00 90 	sub	r8,r7,144
80002a40:	30 0a       	mov	r10,0
80002a42:	30 0b       	mov	r11,0
80002a44:	f0 eb 00 00 	st.d	r8[0],r10
80002a48:	2f 88       	sub	r8,-8
80002a4a:	30 0a       	mov	r10,0
80002a4c:	30 0b       	mov	r11,0
80002a4e:	f0 eb 00 00 	st.d	r8[0],r10
80002a52:	2f 88       	sub	r8,-8
80002a54:	30 0a       	mov	r10,0
80002a56:	30 0b       	mov	r11,0
80002a58:	f0 eb 00 00 	st.d	r8[0],r10
80002a5c:	2f 88       	sub	r8,-8
80002a5e:	30 0a       	mov	r10,0
80002a60:	30 0b       	mov	r11,0
80002a62:	f0 eb 00 00 	st.d	r8[0],r10
80002a66:	2f 88       	sub	r8,-8
	unsigned char total_blocks = hLen / hLen, block_num = 1;
80002a68:	30 18       	mov	r8,1
80002a6a:	ef 68 ff f6 	st.b	r7[-10],r8
80002a6e:	30 18       	mov	r8,1
80002a70:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char *Salt = (unsigned char *)var_Salt.index;
80002a74:	4e 58       	lddpc	r8,80002c08 <pbkdf2_func+0x23c>
80002a76:	ef 48 ff f8 	st.w	r7[-8],r8
	
	while (block_num <= total_blocks)
80002a7a:	cb b8       	rjmp	80002bf0 <pbkdf2_func+0x224>
	{
		iteration_count = 0;
80002a7c:	30 08       	mov	r8,0
80002a7e:	ef 58 ff f4 	st.h	r7[-12],r8
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002a82:	c9 a8       	rjmp	80002bb6 <pbkdf2_func+0x1ea>
		{
			unsigned short int i;
			if (iteration_count == 0)
80002a84:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002a88:	30 08       	mov	r8,0
80002a8a:	f0 09 19 00 	cp.h	r9,r8
80002a8e:	c5 e1       	brne	80002b4a <pbkdf2_func+0x17e>
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002a90:	30 08       	mov	r8,0
80002a92:	ef 58 ff fe 	st.h	r7[-2],r8
80002a96:	c1 38       	rjmp	80002abc <pbkdf2_func+0xf0>
				{
					Ubuffer[i] = Salt[i];
80002a98:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002a9c:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002aa0:	ee fa ff f8 	ld.w	r10,r7[-8]
80002aa4:	f4 08 00 08 	add	r8,r10,r8
80002aa8:	11 88       	ld.ub	r8,r8[0x0]
80002aaa:	ee 09 00 09 	add	r9,r7,r9
80002aae:	f3 68 ff b0 	st.b	r9[-80],r8
		{
			unsigned short int i;
			if (iteration_count == 0)
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002ab2:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002ab6:	2f f8       	sub	r8,-1
80002ab8:	ef 58 ff fe 	st.h	r7[-2],r8
80002abc:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80002ac0:	31 f8       	mov	r8,31
80002ac2:	f0 09 19 00 	cp.h	r9,r8
80002ac6:	fe 98 ff e9 	brls	80002a98 <pbkdf2_func+0xcc>
				{
					Ubuffer[i] = Salt[i];
				}
				Ubuffer[i++] = (block_num >> 24) & 0xFF;
80002aca:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002ace:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002ad2:	b9 48       	asr	r8,0x18
80002ad4:	5c 58       	castu.b	r8
80002ad6:	ee 09 00 09 	add	r9,r7,r9
80002ada:	f3 68 ff b0 	st.b	r9[-80],r8
80002ade:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002ae2:	2f f8       	sub	r8,-1
80002ae4:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 16) & 0xFF;
80002ae8:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002aec:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002af0:	b1 48       	asr	r8,0x10
80002af2:	5c 58       	castu.b	r8
80002af4:	ee 09 00 09 	add	r9,r7,r9
80002af8:	f3 68 ff b0 	st.b	r9[-80],r8
80002afc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002b00:	2f f8       	sub	r8,-1
80002b02:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 8) & 0xFF;
80002b06:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002b0a:	ee 08 00 09 	add	r9,r7,r8
80002b0e:	30 08       	mov	r8,0
80002b10:	f3 68 ff b0 	st.b	r9[-80],r8
80002b14:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002b18:	2f f8       	sub	r8,-1
80002b1a:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i] = (block_num >> 0) & 0xFF;
80002b1e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002b22:	ee 08 00 09 	add	r9,r7,r8
80002b26:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002b2a:	f3 68 ff b0 	st.b	r9[-80],r8
				hmac_sha256(password, 32, Ubuffer, 36, mac, 32);
80002b2e:	ee c8 00 2c 	sub	r8,r7,44
80002b32:	ee ca 00 50 	sub	r10,r7,80
80002b36:	32 09       	mov	r9,32
80002b38:	1a d9       	st.w	--sp,r9
80002b3a:	32 49       	mov	r9,36
80002b3c:	32 0b       	mov	r11,32
80002b3e:	ee fc ff 6c 	ld.w	r12,r7[-148]
80002b42:	f0 1f 00 33 	mcall	80002c0c <pbkdf2_func+0x240>
80002b46:	2f fd       	sub	sp,-4
80002b48:	c0 d8       	rjmp	80002b62 <pbkdf2_func+0x196>
			}
			else
			{
				hmac_sha256((const unsigned char *)var_Password.index, 32, Ubuffer, 32, mac, 32);
80002b4a:	4b 2c       	lddpc	r12,80002c10 <pbkdf2_func+0x244>
80002b4c:	ee c8 00 2c 	sub	r8,r7,44
80002b50:	ee ca 00 50 	sub	r10,r7,80
80002b54:	32 09       	mov	r9,32
80002b56:	1a d9       	st.w	--sp,r9
80002b58:	32 09       	mov	r9,32
80002b5a:	32 0b       	mov	r11,32
80002b5c:	f0 1f 00 2c 	mcall	80002c0c <pbkdf2_func+0x240>
80002b60:	2f fd       	sub	sp,-4
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
80002b62:	ee c9 00 2c 	sub	r9,r7,44
80002b66:	ee c8 00 90 	sub	r8,r7,144
80002b6a:	30 8a       	mov	r10,8
80002b6c:	12 9b       	mov	r11,r9
80002b6e:	10 9c       	mov	r12,r8
80002b70:	f0 1f 00 29 	mcall	80002c14 <pbkdf2_func+0x248>
			
			for (i = 0; i < hLen; i++)
80002b74:	30 08       	mov	r8,0
80002b76:	ef 58 ff fc 	st.h	r7[-4],r8
80002b7a:	c1 28       	rjmp	80002b9e <pbkdf2_func+0x1d2>
			{
				Ubuffer[i] = mac[i];
80002b7c:	ef 19 ff fc 	ld.uh	r9,r7[-4]
80002b80:	ef 18 ff fc 	ld.uh	r8,r7[-4]
80002b84:	ee 08 00 08 	add	r8,r7,r8
80002b88:	f1 38 ff d4 	ld.ub	r8,r8[-44]
80002b8c:	ee 09 00 09 	add	r9,r7,r9
80002b90:	f3 68 ff b0 	st.b	r9[-80],r8
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
			
			for (i = 0; i < hLen; i++)
80002b94:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80002b98:	2f f8       	sub	r8,-1
80002b9a:	ef 58 ff fc 	st.h	r7[-4],r8
80002b9e:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80002ba2:	31 f8       	mov	r8,31
80002ba4:	f0 09 19 00 	cp.h	r9,r8
80002ba8:	fe 98 ff ea 	brls	80002b7c <pbkdf2_func+0x1b0>
			{
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
80002bac:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80002bb0:	2f f8       	sub	r8,-1
80002bb2:	ef 58 ff f4 	st.h	r7[-12],r8
	unsigned char *Salt = (unsigned char *)var_Salt.index;
	
	while (block_num <= total_blocks)
	{
		iteration_count = 0;
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002bb6:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002bba:	e0 68 01 f3 	mov	r8,499
80002bbe:	f0 09 19 00 	cp.h	r9,r8
80002bc2:	fe 98 ff 61 	brls	80002a84 <pbkdf2_func+0xb8>
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
80002bc6:	ee c9 00 90 	sub	r9,r7,144
80002bca:	ee f8 ff 68 	ld.w	r8,r7[-152]
80002bce:	30 8a       	mov	r10,8
80002bd0:	12 9b       	mov	r11,r9
80002bd2:	10 9c       	mov	r12,r8
80002bd4:	f0 1f 00 10 	mcall	80002c14 <pbkdf2_func+0x248>
		memset(Fbuffer, 0, 32);		
80002bd8:	ee c8 00 90 	sub	r8,r7,144
80002bdc:	32 0a       	mov	r10,32
80002bde:	30 0b       	mov	r11,0
80002be0:	10 9c       	mov	r12,r8
80002be2:	f0 1f 00 0e 	mcall	80002c18 <pbkdf2_func+0x24c>
		block_num++;
80002be6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002bea:	2f f8       	sub	r8,-1
80002bec:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char Tbuffer[hLen] = {0};
	unsigned char Fbuffer[hLen] = {0};
	unsigned char total_blocks = hLen / hLen, block_num = 1;
	unsigned char *Salt = (unsigned char *)var_Salt.index;
	
	while (block_num <= total_blocks)
80002bf0:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80002bf4:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80002bf8:	f0 09 18 00 	cp.b	r9,r8
80002bfc:	fe 98 ff 40 	brls	80002a7c <pbkdf2_func+0xb0>
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
		memset(Fbuffer, 0, 32);		
		block_num++;
	}
80002c00:	2d ad       	sub	sp,-152
80002c02:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c06:	00 00       	add	r0,r0
80002c08:	00 00       	add	r0,r0
80002c0a:	09 84       	ld.ub	r4,r4[0x0]
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	22 5c       	sub	r12,37
80002c10:	00 00       	add	r0,r0
80002c12:	09 04       	ld.w	r4,r4++
80002c14:	80 00       	ld.sh	r0,r0[0x0]
80002c16:	2d ac       	sub	r12,-38
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	eb ea eb cd 	sthh.w	sp[0x2f0],r5:t,r10:b

80002c1c <encrypt_password>:
volatile uint32_t var_W_ticks = 0;
volatile uint256_t var_Salt;


uint32_t * encrypt_password(uint32_t *password)
{
80002c1c:	eb cd 40 80 	pushm	r7,lr
80002c20:	1a 97       	mov	r7,sp
80002c22:	21 1d       	sub	sp,68
80002c24:	ef 4c ff bc 	st.w	r7[-68],r12
	uint8_t temp_dk[32] = {0}, temp_dk_digest[32] = {0};
80002c28:	ee c8 00 20 	sub	r8,r7,32
80002c2c:	30 0a       	mov	r10,0
80002c2e:	30 0b       	mov	r11,0
80002c30:	f0 eb 00 00 	st.d	r8[0],r10
80002c34:	2f 88       	sub	r8,-8
80002c36:	30 0a       	mov	r10,0
80002c38:	30 0b       	mov	r11,0
80002c3a:	f0 eb 00 00 	st.d	r8[0],r10
80002c3e:	2f 88       	sub	r8,-8
80002c40:	30 0a       	mov	r10,0
80002c42:	30 0b       	mov	r11,0
80002c44:	f0 eb 00 00 	st.d	r8[0],r10
80002c48:	2f 88       	sub	r8,-8
80002c4a:	30 0a       	mov	r10,0
80002c4c:	30 0b       	mov	r11,0
80002c4e:	f0 eb 00 00 	st.d	r8[0],r10
80002c52:	2f 88       	sub	r8,-8
80002c54:	ee c8 00 40 	sub	r8,r7,64
80002c58:	30 0a       	mov	r10,0
80002c5a:	30 0b       	mov	r11,0
80002c5c:	f0 eb 00 00 	st.d	r8[0],r10
80002c60:	2f 88       	sub	r8,-8
80002c62:	30 0a       	mov	r10,0
80002c64:	30 0b       	mov	r11,0
80002c66:	f0 eb 00 00 	st.d	r8[0],r10
80002c6a:	2f 88       	sub	r8,-8
80002c6c:	30 0a       	mov	r10,0
80002c6e:	30 0b       	mov	r11,0
80002c70:	f0 eb 00 00 	st.d	r8[0],r10
80002c74:	2f 88       	sub	r8,-8
80002c76:	30 0a       	mov	r10,0
80002c78:	30 0b       	mov	r11,0
80002c7a:	f0 eb 00 00 	st.d	r8[0],r10
80002c7e:	2f 88       	sub	r8,-8
	pbkdf2_func((uint8_t *)password, temp_dk);
80002c80:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002c84:	ee c9 00 20 	sub	r9,r7,32
80002c88:	12 9b       	mov	r11,r9
80002c8a:	10 9c       	mov	r12,r8
80002c8c:	f0 1f 00 0d 	mcall	80002cc0 <encrypt_password+0xa4>
	sha256(temp_dk, 32, temp_dk_digest);
80002c90:	ee c9 00 40 	sub	r9,r7,64
80002c94:	ee c8 00 20 	sub	r8,r7,32
80002c98:	12 9a       	mov	r10,r9
80002c9a:	32 0b       	mov	r11,32
80002c9c:	10 9c       	mov	r12,r8
80002c9e:	f0 1f 00 0a 	mcall	80002cc4 <encrypt_password+0xa8>
	apply_aes_encryption(&AVR32_AES, (uint32_t *)temp_dk_digest, 32, 0x00000000);
80002ca2:	ee c8 00 40 	sub	r8,r7,64
80002ca6:	30 09       	mov	r9,0
80002ca8:	32 0a       	mov	r10,32
80002caa:	10 9b       	mov	r11,r8
80002cac:	fc 7c 00 00 	mov	r12,-196608
80002cb0:	f0 1f 00 06 	mcall	80002cc8 <encrypt_password+0xac>
	return (uint32_t *)temp_dk_digest;	
80002cb4:	ee c8 00 40 	sub	r8,r7,64
}
80002cb8:	10 9c       	mov	r12,r8
80002cba:	2e fd       	sub	sp,-68
80002cbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cc0:	80 00       	ld.sh	r0,r0[0x0]
80002cc2:	29 cc       	sub	r12,-100
80002cc4:	80 00       	ld.sh	r0,r0[0x0]
80002cc6:	26 44       	sub	r4,100
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	3f f8       	mov	r8,-1

80002ccc <random_lcg>:


uint32_t random_lcg (void)
{
80002ccc:	eb cd 40 80 	pushm	r7,lr
80002cd0:	1a 97       	mov	r7,sp
	rseed = (rseed * 1103515245 + 12345) & RAND_MAX;
80002cd2:	48 a8       	lddpc	r8,80002cf8 <random_lcg+0x2c>
80002cd4:	70 09       	ld.w	r9,r8[0x0]
80002cd6:	e0 68 4e 6d 	mov	r8,20077
80002cda:	ea 18 41 c6 	orh	r8,0x41c6
80002cde:	f2 08 02 48 	mul	r8,r9,r8
80002ce2:	f0 c8 cf c7 	sub	r8,r8,-12345
80002ce6:	f3 d8 c0 1f 	bfextu	r9,r8,0x0,0x1f
80002cea:	48 48       	lddpc	r8,80002cf8 <random_lcg+0x2c>
80002cec:	91 09       	st.w	r8[0x0],r9
	return rseed;
80002cee:	48 38       	lddpc	r8,80002cf8 <random_lcg+0x2c>
80002cf0:	70 08       	ld.w	r8,r8[0x0]
}
80002cf2:	10 9c       	mov	r12,r8
80002cf4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cf8:	00 00       	add	r0,r0
80002cfa:	03 2c       	ld.uh	r12,r1++

80002cfc <calculate_salt>:

//void random_256 ()

void calculate_salt(void)
{
80002cfc:	eb cd 40 80 	pushm	r7,lr
80002d00:	1a 97       	mov	r7,sp
80002d02:	20 1d       	sub	sp,4
	uint32_t random_value = 0;
80002d04:	30 08       	mov	r8,0
80002d06:	ef 48 ff fc 	st.w	r7[-4],r8
	calculate_hash(pass_code, 8, var_Hkey.index); // Calculates sha256 of the keys pressed in var_W*10 msec interval and stores it in var_Hkey
80002d0a:	49 e9       	lddpc	r9,80002d80 <calculate_salt+0x84>
80002d0c:	49 e8       	lddpc	r8,80002d84 <calculate_salt+0x88>
80002d0e:	70 08       	ld.w	r8,r8[0x0]
80002d10:	12 9a       	mov	r10,r9
80002d12:	30 8b       	mov	r11,8
80002d14:	10 9c       	mov	r12,r8
80002d16:	f0 1f 00 1d 	mcall	80002d88 <calculate_salt+0x8c>
 	
	random_value = random_lcg();	
80002d1a:	f0 1f 00 1d 	mcall	80002d8c <calculate_salt+0x90>
80002d1e:	18 98       	mov	r8,r12
80002d20:	ef 48 ff fc 	st.w	r7[-4],r8
	
	calculate_hash(&random_value, 1, var_R.index);
80002d24:	49 b9       	lddpc	r9,80002d90 <calculate_salt+0x94>
80002d26:	ee c8 00 04 	sub	r8,r7,4
80002d2a:	12 9a       	mov	r10,r9
80002d2c:	30 1b       	mov	r11,1
80002d2e:	10 9c       	mov	r12,r8
80002d30:	f0 1f 00 16 	mcall	80002d88 <calculate_salt+0x8c>
	
	xor_func(var_R.index, var_Hkey.index, 8);
80002d34:	49 39       	lddpc	r9,80002d80 <calculate_salt+0x84>
80002d36:	49 78       	lddpc	r8,80002d90 <calculate_salt+0x94>
80002d38:	30 8a       	mov	r10,8
80002d3a:	12 9b       	mov	r11,r9
80002d3c:	10 9c       	mov	r12,r8
80002d3e:	f0 1f 00 16 	mcall	80002d94 <calculate_salt+0x98>
	
	calculate_hash(var_R.index, 8, var_T.index);
80002d42:	49 69       	lddpc	r9,80002d98 <calculate_salt+0x9c>
80002d44:	49 38       	lddpc	r8,80002d90 <calculate_salt+0x94>
80002d46:	12 9a       	mov	r10,r9
80002d48:	30 8b       	mov	r11,8
80002d4a:	10 9c       	mov	r12,r8
80002d4c:	f0 1f 00 0f 	mcall	80002d88 <calculate_salt+0x8c>
 	
	xor_func(var_Salt.index, var_T.index, 8);
80002d50:	49 29       	lddpc	r9,80002d98 <calculate_salt+0x9c>
80002d52:	49 38       	lddpc	r8,80002d9c <calculate_salt+0xa0>
80002d54:	30 8a       	mov	r10,8
80002d56:	12 9b       	mov	r11,r9
80002d58:	10 9c       	mov	r12,r8
80002d5a:	f0 1f 00 0f 	mcall	80002d94 <calculate_salt+0x98>
	
	if (enter_button_status == PASSCODE_FOR_SALT_ENTERED)
80002d5e:	49 18       	lddpc	r8,80002da0 <calculate_salt+0xa4>
80002d60:	11 88       	ld.ub	r8,r8[0x0]
80002d62:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002d66:	30 68       	mov	r8,6
80002d68:	f0 09 18 00 	cp.b	r9,r8
80002d6c:	c0 41       	brne	80002d74 <calculate_salt+0x78>
	{
		save_salt_to_mcu();
80002d6e:	f0 1f 00 0e 	mcall	80002da4 <calculate_salt+0xa8>
80002d72:	c0 38       	rjmp	80002d78 <calculate_salt+0x7c>
	}
	else
	{
		Start_W_timer();	
80002d74:	f0 1f 00 0d 	mcall	80002da8 <calculate_salt+0xac>
	}
	
}
80002d78:	2f fd       	sub	sp,-4
80002d7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d7e:	00 00       	add	r0,r0
80002d80:	00 00       	add	r0,r0
80002d82:	09 24       	ld.uh	r4,r4++
80002d84:	00 00       	add	r0,r0
80002d86:	09 a4       	ld.ub	r4,r4[0x2]
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	2e bc       	sub	r12,-21
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	2c cc       	sub	r12,-52
80002d90:	00 00       	add	r0,r0
80002d92:	09 64       	ld.uh	r4,--r4
80002d94:	80 00       	ld.sh	r0,r0[0x0]
80002d96:	2d ac       	sub	r12,-38
80002d98:	00 00       	add	r0,r0
80002d9a:	09 44       	ld.w	r4,--r4
80002d9c:	00 00       	add	r0,r0
80002d9e:	09 84       	ld.ub	r4,r4[0x0]
80002da0:	00 00       	add	r0,r0
80002da2:	04 7a       	tst	r10,r2
80002da4:	80 00       	ld.sh	r0,r0[0x0]
80002da6:	2e 18       	sub	r8,-31
80002da8:	80 00       	ld.sh	r0,r0[0x0]
80002daa:	2e 78       	sub	r8,-25

80002dac <xor_func>:

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
80002dac:	eb cd 40 80 	pushm	r7,lr
80002db0:	1a 97       	mov	r7,sp
80002db2:	20 4d       	sub	sp,16
80002db4:	ef 4c ff f8 	st.w	r7[-8],r12
80002db8:	ef 4b ff f4 	st.w	r7[-12],r11
80002dbc:	14 98       	mov	r8,r10
80002dbe:	ef 68 ff f0 	st.b	r7[-16],r8
	unsigned char i = 0;
80002dc2:	30 08       	mov	r8,0
80002dc4:	ef 68 ff ff 	st.b	r7[-1],r8
	while (i++ < len)
80002dc8:	c1 58       	rjmp	80002df2 <xor_func+0x46>
	{
		*value1 = *value1 ^ *value2;
80002dca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dce:	70 09       	ld.w	r9,r8[0x0]
80002dd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002dd4:	70 08       	ld.w	r8,r8[0x0]
80002dd6:	10 59       	eor	r9,r8
80002dd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ddc:	91 09       	st.w	r8[0x0],r9
		value1++;	value2++;
80002dde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002de2:	2f c8       	sub	r8,-4
80002de4:	ef 48 ff f8 	st.w	r7[-8],r8
80002de8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002dec:	2f c8       	sub	r8,-4
80002dee:	ef 48 ff f4 	st.w	r7[-12],r8
}

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
	unsigned char i = 0;
	while (i++ < len)
80002df2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002df6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002dfa:	f0 09 18 00 	cp.b	r9,r8
80002dfe:	5f 38       	srlo	r8
80002e00:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002e04:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e08:	2f f8       	sub	r8,-1
80002e0a:	ef 68 ff ff 	st.b	r7[-1],r8
80002e0e:	58 09       	cp.w	r9,0
80002e10:	cd d1       	brne	80002dca <xor_func+0x1e>
	{
		*value1 = *value1 ^ *value2;
		value1++;	value2++;
	}
}
80002e12:	2f cd       	sub	sp,-16
80002e14:	e3 cd 80 80 	ldm	sp++,r7,pc

80002e18 <save_salt_to_mcu>:

void save_salt_to_mcu(void)
{
80002e18:	eb cd 40 80 	pushm	r7,lr
80002e1c:	1a 97       	mov	r7,sp
80002e1e:	20 2d       	sub	sp,8
	//volatile salt_t *salt = &SALT_STRUCT;
	uint32_t *temp_encypted_password;
	uint8_t i;
	
	temp_encypted_password = encrypt_password(temp_password1);
80002e20:	49 0c       	lddpc	r12,80002e60 <save_salt_to_mcu+0x48>
80002e22:	f0 1f 00 11 	mcall	80002e64 <save_salt_to_mcu+0x4c>
80002e26:	18 98       	mov	r8,r12
80002e28:	ef 48 ff f8 	st.w	r7[-8],r8
	memcpy((uint8_t *)Stored_values.unlock_password, (const uint8_t *)temp_encypted_password, 32);
80002e2c:	32 0a       	mov	r10,32
80002e2e:	ee fb ff f8 	ld.w	r11,r7[-8]
80002e32:	48 ec       	lddpc	r12,80002e68 <save_salt_to_mcu+0x50>
80002e34:	f0 1f 00 0e 	mcall	80002e6c <save_salt_to_mcu+0x54>
	memcpy((uint8_t *)Stored_values.salt, (const uint8_t *)var_Salt.index, 32);
80002e38:	48 c8       	lddpc	r8,80002e68 <save_salt_to_mcu+0x50>
80002e3a:	28 08       	sub	r8,-128
80002e3c:	32 0a       	mov	r10,32
80002e3e:	48 db       	lddpc	r11,80002e70 <save_salt_to_mcu+0x58>
80002e40:	10 9c       	mov	r12,r8
80002e42:	f0 1f 00 0b 	mcall	80002e6c <save_salt_to_mcu+0x54>
	
	flashc_memset32(&SALT_STRUCT, (uint32_t *)&Stored_values, sizeof(Stored_values), true);
80002e46:	48 98       	lddpc	r8,80002e68 <save_salt_to_mcu+0x50>
80002e48:	30 19       	mov	r9,1
80002e4a:	e0 6a 00 a0 	mov	r10,160
80002e4e:	10 9b       	mov	r11,r8
80002e50:	fc 1c 81 90 	movh	r12,0x8190
80002e54:	f0 1f 00 08 	mcall	80002e74 <save_salt_to_mcu+0x5c>
}
80002e58:	2f ed       	sub	sp,-8
80002e5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e5e:	00 00       	add	r0,r0
80002e60:	00 00       	add	r0,r0
80002e62:	03 08       	ld.w	r8,r1++
80002e64:	80 00       	ld.sh	r0,r0[0x0]
80002e66:	2c 1c       	sub	r12,-63
80002e68:	00 00       	add	r0,r0
80002e6a:	02 48       	or	r8,r1
80002e6c:	80 00       	ld.sh	r0,r0[0x0]
80002e6e:	ea a2       	*unknown*
80002e70:	00 00       	add	r0,r0
80002e72:	09 84       	ld.ub	r4,r4[0x0]
80002e74:	80 00       	ld.sh	r0,r0[0x0]
80002e76:	88 20       	ld.sh	r0,r4[0x4]

80002e78 <Start_W_timer>:

void Start_W_timer(void)
{
80002e78:	eb cd 40 80 	pushm	r7,lr
80002e7c:	1a 97       	mov	r7,sp
	var_W = random_lcg() % 500 + 50;
80002e7e:	f0 1f 00 0d 	mcall	80002eb0 <Start_W_timer+0x38>
80002e82:	18 9a       	mov	r10,r12
80002e84:	e0 68 4d d3 	mov	r8,19923
80002e88:	ea 18 10 62 	orh	r8,0x1062
80002e8c:	f4 08 06 48 	mulu.d	r8,r10,r8
80002e90:	f2 08 16 05 	lsr	r8,r9,0x5
80002e94:	e0 69 01 f4 	mov	r9,500
80002e98:	b3 38       	mul	r8,r9
80002e9a:	f4 08 01 08 	sub	r8,r10,r8
80002e9e:	f0 c9 ff ce 	sub	r9,r8,-50
80002ea2:	48 58       	lddpc	r8,80002eb4 <Start_W_timer+0x3c>
80002ea4:	91 09       	st.w	r8[0x0],r9
	var_W_ticks = 0;	
80002ea6:	48 58       	lddpc	r8,80002eb8 <Start_W_timer+0x40>
80002ea8:	30 09       	mov	r9,0
80002eaa:	91 09       	st.w	r8[0x0],r9
80002eac:	e3 cd 80 80 	ldm	sp++,r7,pc
80002eb0:	80 00       	ld.sh	r0,r0[0x0]
80002eb2:	2c cc       	sub	r12,-52
80002eb4:	00 00       	add	r0,r0
80002eb6:	01 28       	ld.uh	r8,r0++
80002eb8:	00 00       	add	r0,r0
80002eba:	03 30       	ld.ub	r0,r1++

80002ebc <calculate_hash>:
80002ebc:	eb cd 40 c0 	pushm	r6-r7,lr
80002ec0:	1a 97       	mov	r7,sp
80002ec2:	20 ed       	sub	sp,56
80002ec4:	ef 4c ff d0 	st.w	r7[-48],r12
80002ec8:	16 98       	mov	r8,r11
80002eca:	ef 4a ff c8 	st.w	r7[-56],r10
80002ece:	ef 68 ff cc 	st.b	r7[-52],r8
80002ed2:	fe f8 03 8a 	ld.w	r8,pc[906]
80002ed6:	ef 48 ff e0 	st.w	r7[-32],r8
80002eda:	fe f8 03 86 	ld.w	r8,pc[902]
80002ede:	ef 48 ff ec 	st.w	r7[-20],r8
80002ee2:	30 08       	mov	r8,0
80002ee4:	ef 48 ff d4 	st.w	r7[-44],r8
80002ee8:	c1 68       	rjmp	80002f14 <calculate_hash+0x58>
80002eea:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002eee:	a3 68       	lsl	r8,0x2
80002ef0:	ee f9 ff e0 	ld.w	r9,r7[-32]
80002ef4:	f2 08 00 08 	add	r8,r9,r8
80002ef8:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002efc:	a3 69       	lsl	r9,0x2
80002efe:	ee fa ff d0 	ld.w	r10,r7[-48]
80002f02:	f4 09 00 09 	add	r9,r10,r9
80002f06:	72 09       	ld.w	r9,r9[0x0]
80002f08:	91 09       	st.w	r8[0x0],r9
80002f0a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f0e:	2f f8       	sub	r8,-1
80002f10:	ef 48 ff d4 	st.w	r7[-44],r8
80002f14:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80002f18:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f1c:	10 39       	cp.w	r9,r8
80002f1e:	fe 99 ff e6 	brgt	80002eea <calculate_hash+0x2e>
80002f22:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80002f26:	a3 68       	lsl	r8,0x2
80002f28:	5c 58       	castu.b	r8
80002f2a:	10 9c       	mov	r12,r8
80002f2c:	f0 1f 00 ce 	mcall	80003264 <calculate_hash+0x3a8>
80002f30:	fe f8 03 38 	ld.w	r8,pc[824]
80002f34:	ef 48 ff e4 	st.w	r7[-28],r8
80002f38:	fe f8 03 24 	ld.w	r8,pc[804]
80002f3c:	ef 48 ff e8 	st.w	r7[-24],r8
80002f40:	30 08       	mov	r8,0
80002f42:	ef 48 ff d4 	st.w	r7[-44],r8
80002f46:	c1 68       	rjmp	80002f72 <calculate_hash+0xb6>
80002f48:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f4c:	a3 68       	lsl	r8,0x2
80002f4e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002f52:	f2 08 00 08 	add	r8,r9,r8
80002f56:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002f5a:	a3 69       	lsl	r9,0x2
80002f5c:	ee fa ff e8 	ld.w	r10,r7[-24]
80002f60:	f4 09 00 09 	add	r9,r10,r9
80002f64:	72 09       	ld.w	r9,r9[0x0]
80002f66:	91 09       	st.w	r8[0x0],r9
80002f68:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f6c:	2f f8       	sub	r8,-1
80002f6e:	ef 48 ff d4 	st.w	r7[-44],r8
80002f72:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f76:	58 f8       	cp.w	r8,15
80002f78:	fe 9a ff e8 	brle	80002f48 <calculate_hash+0x8c>
80002f7c:	31 08       	mov	r8,16
80002f7e:	ef 48 ff d4 	st.w	r7[-44],r8
80002f82:	c7 58       	rjmp	8000306c <calculate_hash+0x1b0>
80002f84:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f88:	f0 c9 00 0f 	sub	r9,r8,15
80002f8c:	fe f8 02 dc 	ld.w	r8,pc[732]
80002f90:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002f94:	30 7b       	mov	r11,7
80002f96:	10 9c       	mov	r12,r8
80002f98:	f0 1f 00 b5 	mcall	8000326c <calculate_hash+0x3b0>
80002f9c:	18 96       	mov	r6,r12
80002f9e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fa2:	f0 c9 00 0f 	sub	r9,r8,15
80002fa6:	fe f8 02 c2 	ld.w	r8,pc[706]
80002faa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002fae:	31 2b       	mov	r11,18
80002fb0:	10 9c       	mov	r12,r8
80002fb2:	f0 1f 00 af 	mcall	8000326c <calculate_hash+0x3b0>
80002fb6:	18 98       	mov	r8,r12
80002fb8:	ed e8 20 09 	eor	r9,r6,r8
80002fbc:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fc0:	f0 ca 00 0f 	sub	r10,r8,15
80002fc4:	fe f8 02 a4 	ld.w	r8,pc[676]
80002fc8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002fcc:	a3 98       	lsr	r8,0x3
80002fce:	f3 e8 20 08 	eor	r8,r9,r8
80002fd2:	ef 48 ff d8 	st.w	r7[-40],r8
80002fd6:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fda:	f0 c9 00 02 	sub	r9,r8,2
80002fde:	fe f8 02 8a 	ld.w	r8,pc[650]
80002fe2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002fe6:	31 1b       	mov	r11,17
80002fe8:	10 9c       	mov	r12,r8
80002fea:	f0 1f 00 a1 	mcall	8000326c <calculate_hash+0x3b0>
80002fee:	18 96       	mov	r6,r12
80002ff0:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ff4:	f0 c9 00 02 	sub	r9,r8,2
80002ff8:	fe f8 02 70 	ld.w	r8,pc[624]
80002ffc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003000:	31 3b       	mov	r11,19
80003002:	10 9c       	mov	r12,r8
80003004:	f0 1f 00 9a 	mcall	8000326c <calculate_hash+0x3b0>
80003008:	18 98       	mov	r8,r12
8000300a:	ed e8 20 09 	eor	r9,r6,r8
8000300e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003012:	f0 ca 00 02 	sub	r10,r8,2
80003016:	fe f8 02 52 	ld.w	r8,pc[594]
8000301a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000301e:	ab 88       	lsr	r8,0xa
80003020:	f3 e8 20 08 	eor	r8,r9,r8
80003024:	ef 48 ff dc 	st.w	r7[-36],r8
80003028:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000302c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003030:	f0 ca 00 10 	sub	r10,r8,16
80003034:	fe f8 02 34 	ld.w	r8,pc[564]
80003038:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000303c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003040:	10 0a       	add	r10,r8
80003042:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003046:	f0 cb 00 07 	sub	r11,r8,7
8000304a:	fe f8 02 1e 	ld.w	r8,pc[542]
8000304e:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
80003052:	10 0a       	add	r10,r8
80003054:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003058:	10 0a       	add	r10,r8
8000305a:	fe f8 02 0e 	ld.w	r8,pc[526]
8000305e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80003062:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003066:	2f f8       	sub	r8,-1
80003068:	ef 48 ff d4 	st.w	r7[-44],r8
8000306c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003070:	e0 48 00 3f 	cp.w	r8,63
80003074:	fe 9a ff 88 	brle	80002f84 <calculate_hash+0xc8>
80003078:	30 08       	mov	r8,0
8000307a:	ef 48 ff d4 	st.w	r7[-44],r8
8000307e:	c1 38       	rjmp	800030a4 <calculate_hash+0x1e8>
80003080:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003084:	a3 68       	lsl	r8,0x2
80003086:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000308a:	f2 08 00 08 	add	r8,r9,r8
8000308e:	ee fa ff d4 	ld.w	r10,r7[-44]
80003092:	4f 89       	lddpc	r9,80003270 <calculate_hash+0x3b4>
80003094:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80003098:	91 09       	st.w	r8[0x0],r9
8000309a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000309e:	2f f8       	sub	r8,-1
800030a0:	ef 48 ff d4 	st.w	r7[-44],r8
800030a4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030a8:	58 78       	cp.w	r8,7
800030aa:	fe 9a ff eb 	brle	80003080 <calculate_hash+0x1c4>
800030ae:	30 08       	mov	r8,0
800030b0:	ef 48 ff d4 	st.w	r7[-44],r8
800030b4:	ca 68       	rjmp	80003200 <calculate_hash+0x344>
800030b6:	4e b8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800030b8:	70 08       	ld.w	r8,r8[0x0]
800030ba:	30 2b       	mov	r11,2
800030bc:	10 9c       	mov	r12,r8
800030be:	f0 1f 00 6c 	mcall	8000326c <calculate_hash+0x3b0>
800030c2:	18 96       	mov	r6,r12
800030c4:	4e 78       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800030c6:	70 08       	ld.w	r8,r8[0x0]
800030c8:	30 db       	mov	r11,13
800030ca:	10 9c       	mov	r12,r8
800030cc:	f0 1f 00 68 	mcall	8000326c <calculate_hash+0x3b0>
800030d0:	18 98       	mov	r8,r12
800030d2:	10 56       	eor	r6,r8
800030d4:	4e 38       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800030d6:	70 08       	ld.w	r8,r8[0x0]
800030d8:	31 6b       	mov	r11,22
800030da:	10 9c       	mov	r12,r8
800030dc:	f0 1f 00 64 	mcall	8000326c <calculate_hash+0x3b0>
800030e0:	18 98       	mov	r8,r12
800030e2:	ed e8 20 08 	eor	r8,r6,r8
800030e6:	ef 48 ff d8 	st.w	r7[-40],r8
800030ea:	4d e8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800030ec:	70 09       	ld.w	r9,r8[0x0]
800030ee:	4d d8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800030f0:	70 18       	ld.w	r8,r8[0x4]
800030f2:	10 69       	and	r9,r8
800030f4:	4d b8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800030f6:	70 0a       	ld.w	r10,r8[0x0]
800030f8:	4d a8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800030fa:	70 28       	ld.w	r8,r8[0x8]
800030fc:	f5 e8 00 08 	and	r8,r10,r8
80003100:	10 59       	eor	r9,r8
80003102:	4d 88       	lddpc	r8,80003260 <calculate_hash+0x3a4>
80003104:	70 1a       	ld.w	r10,r8[0x4]
80003106:	4d 78       	lddpc	r8,80003260 <calculate_hash+0x3a4>
80003108:	70 28       	ld.w	r8,r8[0x8]
8000310a:	f5 e8 00 08 	and	r8,r10,r8
8000310e:	f3 e8 20 08 	eor	r8,r9,r8
80003112:	ef 48 ff f0 	st.w	r7[-16],r8
80003116:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000311a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000311e:	f2 08 00 08 	add	r8,r9,r8
80003122:	ef 48 ff f4 	st.w	r7[-12],r8
80003126:	4c f8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
80003128:	70 48       	ld.w	r8,r8[0x10]
8000312a:	30 6b       	mov	r11,6
8000312c:	10 9c       	mov	r12,r8
8000312e:	f0 1f 00 50 	mcall	8000326c <calculate_hash+0x3b0>
80003132:	18 96       	mov	r6,r12
80003134:	4c b8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
80003136:	70 48       	ld.w	r8,r8[0x10]
80003138:	30 bb       	mov	r11,11
8000313a:	10 9c       	mov	r12,r8
8000313c:	f0 1f 00 4c 	mcall	8000326c <calculate_hash+0x3b0>
80003140:	18 98       	mov	r8,r12
80003142:	10 56       	eor	r6,r8
80003144:	4c 78       	lddpc	r8,80003260 <calculate_hash+0x3a4>
80003146:	70 48       	ld.w	r8,r8[0x10]
80003148:	31 9b       	mov	r11,25
8000314a:	10 9c       	mov	r12,r8
8000314c:	f0 1f 00 48 	mcall	8000326c <calculate_hash+0x3b0>
80003150:	18 98       	mov	r8,r12
80003152:	ed e8 20 08 	eor	r8,r6,r8
80003156:	ef 48 ff dc 	st.w	r7[-36],r8
8000315a:	4c 28       	lddpc	r8,80003260 <calculate_hash+0x3a4>
8000315c:	70 49       	ld.w	r9,r8[0x10]
8000315e:	4c 18       	lddpc	r8,80003260 <calculate_hash+0x3a4>
80003160:	70 58       	ld.w	r8,r8[0x14]
80003162:	10 69       	and	r9,r8
80003164:	4b f8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
80003166:	70 48       	ld.w	r8,r8[0x10]
80003168:	f0 0a 11 ff 	rsub	r10,r8,-1
8000316c:	4b d8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
8000316e:	70 68       	ld.w	r8,r8[0x18]
80003170:	f5 e8 00 08 	and	r8,r10,r8
80003174:	f3 e8 20 08 	eor	r8,r9,r8
80003178:	ef 48 ff f8 	st.w	r7[-8],r8
8000317c:	4b 98       	lddpc	r8,80003260 <calculate_hash+0x3a4>
8000317e:	70 79       	ld.w	r9,r8[0x1c]
80003180:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003184:	10 09       	add	r9,r8
80003186:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000318a:	10 09       	add	r9,r8
8000318c:	ee fa ff d4 	ld.w	r10,r7[-44]
80003190:	4b 98       	lddpc	r8,80003274 <calculate_hash+0x3b8>
80003192:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003196:	10 09       	add	r9,r8
80003198:	ee fa ff d4 	ld.w	r10,r7[-44]
8000319c:	4b 38       	lddpc	r8,80003268 <calculate_hash+0x3ac>
8000319e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800031a2:	f2 08 00 08 	add	r8,r9,r8
800031a6:	ef 48 ff fc 	st.w	r7[-4],r8
800031aa:	4a e8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031ac:	70 69       	ld.w	r9,r8[0x18]
800031ae:	4a d8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031b0:	91 79       	st.w	r8[0x1c],r9
800031b2:	4a c8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031b4:	70 59       	ld.w	r9,r8[0x14]
800031b6:	4a b8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031b8:	91 69       	st.w	r8[0x18],r9
800031ba:	4a a8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031bc:	70 49       	ld.w	r9,r8[0x10]
800031be:	4a 98       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031c0:	91 59       	st.w	r8[0x14],r9
800031c2:	4a 88       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031c4:	70 39       	ld.w	r9,r8[0xc]
800031c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031ca:	10 09       	add	r9,r8
800031cc:	4a 58       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031ce:	91 49       	st.w	r8[0x10],r9
800031d0:	4a 48       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031d2:	70 29       	ld.w	r9,r8[0x8]
800031d4:	4a 38       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031d6:	91 39       	st.w	r8[0xc],r9
800031d8:	4a 28       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031da:	70 19       	ld.w	r9,r8[0x4]
800031dc:	4a 18       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031de:	91 29       	st.w	r8[0x8],r9
800031e0:	4a 08       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031e2:	70 09       	ld.w	r9,r8[0x0]
800031e4:	49 f8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031e6:	91 19       	st.w	r8[0x4],r9
800031e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800031ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031f0:	10 09       	add	r9,r8
800031f2:	49 c8       	lddpc	r8,80003260 <calculate_hash+0x3a4>
800031f4:	91 09       	st.w	r8[0x0],r9
800031f6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031fa:	2f f8       	sub	r8,-1
800031fc:	ef 48 ff d4 	st.w	r7[-44],r8
80003200:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003204:	e0 48 00 3f 	cp.w	r8,63
80003208:	fe 9a ff 57 	brle	800030b6 <calculate_hash+0x1fa>
8000320c:	30 08       	mov	r8,0
8000320e:	ef 48 ff d4 	st.w	r7[-44],r8
80003212:	c1 d8       	rjmp	8000324c <calculate_hash+0x390>
80003214:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003218:	a3 68       	lsl	r8,0x2
8000321a:	ee f9 ff c8 	ld.w	r9,r7[-56]
8000321e:	f2 08 00 08 	add	r8,r9,r8
80003222:	ee fa ff d4 	ld.w	r10,r7[-44]
80003226:	49 39       	lddpc	r9,80003270 <calculate_hash+0x3b4>
80003228:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000322c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80003230:	a3 69       	lsl	r9,0x2
80003232:	ee fb ff ec 	ld.w	r11,r7[-20]
80003236:	f6 09 00 09 	add	r9,r11,r9
8000323a:	72 09       	ld.w	r9,r9[0x0]
8000323c:	f4 09 00 09 	add	r9,r10,r9
80003240:	91 09       	st.w	r8[0x0],r9
80003242:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003246:	2f f8       	sub	r8,-1
80003248:	ef 48 ff d4 	st.w	r7[-44],r8
8000324c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003250:	58 78       	cp.w	r8,7
80003252:	fe 9a ff e1 	brle	80003214 <calculate_hash+0x358>
80003256:	2f 2d       	sub	sp,-56
80003258:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000325c:	00 00       	add	r0,r0
8000325e:	03 34       	ld.ub	r4,r1++
80003260:	00 00       	add	r0,r0
80003262:	09 a8       	ld.ub	r8,r4[0x2]
80003264:	80 00       	ld.sh	r0,r0[0x0]
80003266:	32 78       	mov	r8,39
80003268:	00 00       	add	r0,r0
8000326a:	03 74       	ld.ub	r4,--r1
8000326c:	80 00       	ld.sh	r0,r0[0x0]
8000326e:	32 f0       	mov	r0,47
80003270:	80 00       	ld.sh	r0,r0[0x0]
80003272:	ee 20 80 00 	sub	r0,950272
80003276:	ee 40 eb cd 	cp.w	r0,977869

80003278 <PadtheMessage>:
80003278:	eb cd 40 80 	pushm	r7,lr
8000327c:	1a 97       	mov	r7,sp
8000327e:	20 3d       	sub	sp,12
80003280:	18 98       	mov	r8,r12
80003282:	ef 68 ff f4 	st.b	r7[-12],r8
80003286:	49 a8       	lddpc	r8,800032ec <PadtheMessage+0x74>
80003288:	ef 48 ff fc 	st.w	r7[-4],r8
8000328c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003290:	a3 78       	lsl	r8,0x3
80003292:	ef 58 ff fa 	st.h	r7[-6],r8
80003296:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000329a:	49 5a       	lddpc	r10,800032ec <PadtheMessage+0x74>
8000329c:	38 08       	mov	r8,-128
8000329e:	f4 09 0b 08 	st.b	r10[r9],r8
800032a2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800032a6:	2f f8       	sub	r8,-1
800032a8:	ef 68 ff f4 	st.b	r7[-12],r8
800032ac:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800032b0:	ef 68 ff f9 	st.b	r7[-7],r8
800032b4:	c0 c8       	rjmp	800032cc <PadtheMessage+0x54>
800032b6:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800032ba:	48 da       	lddpc	r10,800032ec <PadtheMessage+0x74>
800032bc:	30 08       	mov	r8,0
800032be:	f4 09 0b 08 	st.b	r10[r9],r8
800032c2:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800032c6:	2f f8       	sub	r8,-1
800032c8:	ef 68 ff f9 	st.b	r7[-7],r8
800032cc:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800032d0:	33 f8       	mov	r8,63
800032d2:	f0 09 18 00 	cp.b	r9,r8
800032d6:	fe 98 ff f0 	brls	800032b6 <PadtheMessage+0x3e>
800032da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032de:	2c 48       	sub	r8,-60
800032e0:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800032e4:	91 09       	st.w	r8[0x0],r9
800032e6:	2f dd       	sub	sp,-12
800032e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800032ec:	00 00       	add	r0,r0
800032ee:	03 34       	ld.ub	r4,r1++

800032f0 <Rotate_right>:
800032f0:	eb cd 40 80 	pushm	r7,lr
800032f4:	1a 97       	mov	r7,sp
800032f6:	20 3d       	sub	sp,12
800032f8:	ef 4c ff f8 	st.w	r7[-8],r12
800032fc:	ef 4b ff f4 	st.w	r7[-12],r11
80003300:	30 29       	mov	r9,2
80003302:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003306:	f2 08 09 48 	lsl	r8,r9,r8
8000330a:	20 18       	sub	r8,1
8000330c:	ef 48 ff fc 	st.w	r7[-4],r8
80003310:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003314:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003318:	f2 08 0a 49 	lsr	r9,r9,r8
8000331c:	ee fa ff f8 	ld.w	r10,r7[-8]
80003320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003324:	10 6a       	and	r10,r8
80003326:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000332a:	f0 08 11 20 	rsub	r8,r8,32
8000332e:	f4 08 09 48 	lsl	r8,r10,r8
80003332:	f3 e8 10 08 	or	r8,r9,r8
80003336:	10 9c       	mov	r12,r8
80003338:	2f dd       	sub	sp,-12
8000333a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000333e:	d7 03       	nop

80003340 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
80003340:	eb cd 40 80 	pushm	r7,lr
80003344:	1a 97       	mov	r7,sp
80003346:	20 1d       	sub	sp,4
80003348:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000334c:	ee fb ff fc 	ld.w	r11,r7[-4]
80003350:	30 1c       	mov	r12,1
80003352:	f0 1f 00 03 	mcall	8000335c <sysclk_enable_hsb_module+0x1c>
}
80003356:	2f fd       	sub	sp,-4
80003358:	e3 cd 80 80 	ldm	sp++,r7,pc
8000335c:	80 00       	ld.sh	r0,r0[0x0]
8000335e:	c1 fc       	rcall	8000339c <sysclk_enable_peripheral_clock+0x1c>

80003360 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80003360:	eb cd 40 80 	pushm	r7,lr
80003364:	1a 97       	mov	r7,sp
80003366:	20 1d       	sub	sp,4
80003368:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
8000336c:	ee fb ff fc 	ld.w	r11,r7[-4]
80003370:	30 2c       	mov	r12,2
80003372:	f0 1f 00 03 	mcall	8000337c <sysclk_enable_pba_module+0x1c>
}
80003376:	2f fd       	sub	sp,-4
80003378:	e3 cd 80 80 	ldm	sp++,r7,pc
8000337c:	80 00       	ld.sh	r0,r0[0x0]
8000337e:	c1 fc       	rcall	800033bc <sysclk_enable_peripheral_clock+0x3c>

80003380 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
80003380:	eb cd 40 80 	pushm	r7,lr
80003384:	1a 97       	mov	r7,sp
80003386:	20 1d       	sub	sp,4
80003388:	ef 4c ff fc 	st.w	r7[-4],r12
	switch ((uintptr_t)module) {
8000338c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003390:	fe 58 14 00 	cp.w	r8,-60416
80003394:	e0 80 00 a5 	breq	800034de <sysclk_enable_peripheral_clock+0x15e>
80003398:	e0 8b 00 40 	brhi	80003418 <sysclk_enable_peripheral_clock+0x98>
8000339c:	fe 48 24 00 	cp.w	r8,-121856
800033a0:	e0 80 00 d9 	breq	80003552 <sysclk_enable_peripheral_clock+0x1d2>
800033a4:	e0 8b 00 1e 	brhi	800033e0 <sysclk_enable_peripheral_clock+0x60>
800033a8:	fe 48 10 00 	cp.w	r8,-126976
800033ac:	e0 80 00 b9 	breq	8000351e <sysclk_enable_peripheral_clock+0x19e>
800033b0:	e0 8b 00 0b 	brhi	800033c6 <sysclk_enable_peripheral_clock+0x46>
800033b4:	fc 58 00 00 	cp.w	r8,-196608
800033b8:	e0 80 00 e0 	breq	80003578 <sysclk_enable_peripheral_clock+0x1f8>
800033bc:	fe 48 00 00 	cp.w	r8,-131072
800033c0:	e0 80 00 b3 	breq	80003526 <sysclk_enable_peripheral_clock+0x1a6>
		break;
#endif

	default:
		Assert(false);
		return;
800033c4:	cd e8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800033c6:	fe 48 1c 00 	cp.w	r8,-123904
800033ca:	e0 80 00 bc 	breq	80003542 <sysclk_enable_peripheral_clock+0x1c2>
800033ce:	fe 48 20 00 	cp.w	r8,-122880
800033d2:	e0 80 00 bc 	breq	8000354a <sysclk_enable_peripheral_clock+0x1ca>
800033d6:	fe 48 14 00 	cp.w	r8,-125952
800033da:	e0 80 00 ad 	breq	80003534 <sysclk_enable_peripheral_clock+0x1b4>
		break;
#endif

	default:
		Assert(false);
		return;
800033de:	cd 18       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800033e0:	fe 58 00 00 	cp.w	r8,-65536
800033e4:	c5 60       	breq	80003490 <sysclk_enable_peripheral_clock+0x110>
800033e6:	e0 8b 00 0f 	brhi	80003404 <sysclk_enable_peripheral_clock+0x84>
800033ea:	fe 48 40 00 	cp.w	r8,-114688
800033ee:	e0 80 00 b6 	breq	8000355a <sysclk_enable_peripheral_clock+0x1da>
800033f2:	fe 48 80 00 	cp.w	r8,-98304
800033f6:	e0 80 00 bd 	breq	80003570 <sysclk_enable_peripheral_clock+0x1f0>
800033fa:	fe 48 28 00 	cp.w	r8,-120832
800033fe:	e0 80 00 b2 	breq	80003562 <sysclk_enable_peripheral_clock+0x1e2>
		break;
#endif

	default:
		Assert(false);
		return;
80003402:	cb f8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003404:	fe 58 0c 00 	cp.w	r8,-62464
80003408:	c4 b0       	breq	8000349e <sysclk_enable_peripheral_clock+0x11e>
8000340a:	fe 58 10 00 	cp.w	r8,-61440
8000340e:	c3 d0       	breq	80003488 <sysclk_enable_peripheral_clock+0x108>
80003410:	fe 58 08 00 	cp.w	r8,-63488
80003414:	c3 60       	breq	80003480 <sysclk_enable_peripheral_clock+0x100>
		break;
#endif

	default:
		Assert(false);
		return;
80003416:	cb 58       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003418:	fe 58 30 00 	cp.w	r8,-53248
8000341c:	c5 50       	breq	800034c6 <sysclk_enable_peripheral_clock+0x146>
8000341e:	e0 8b 00 18 	brhi	8000344e <sysclk_enable_peripheral_clock+0xce>
80003422:	fe 58 20 00 	cp.w	r8,-57344
80003426:	c6 80       	breq	800034f6 <sysclk_enable_peripheral_clock+0x176>
80003428:	e0 8b 00 09 	brhi	8000343a <sysclk_enable_peripheral_clock+0xba>
8000342c:	fe 58 18 00 	cp.w	r8,-59392
80003430:	c5 b0       	breq	800034e6 <sysclk_enable_peripheral_clock+0x166>
80003432:	fe 58 1c 00 	cp.w	r8,-58368
80003436:	c5 c0       	breq	800034ee <sysclk_enable_peripheral_clock+0x16e>
		break;
#endif

	default:
		Assert(false);
		return;
80003438:	ca 48       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000343a:	fe 58 28 00 	cp.w	r8,-55296
8000343e:	c3 c0       	breq	800034b6 <sysclk_enable_peripheral_clock+0x136>
80003440:	fe 58 2c 00 	cp.w	r8,-54272
80003444:	c3 d0       	breq	800034be <sysclk_enable_peripheral_clock+0x13e>
80003446:	fe 58 24 00 	cp.w	r8,-56320
8000344a:	c3 20       	breq	800034ae <sysclk_enable_peripheral_clock+0x12e>
		break;
#endif

	default:
		Assert(false);
		return;
8000344c:	c9 a8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000344e:	fe 58 40 00 	cp.w	r8,-49152
80003452:	c6 20       	breq	80003516 <sysclk_enable_peripheral_clock+0x196>
80003454:	e0 8b 00 0c 	brhi	8000346c <sysclk_enable_peripheral_clock+0xec>
80003458:	fe 58 38 00 	cp.w	r8,-51200
8000345c:	c5 50       	breq	80003506 <sysclk_enable_peripheral_clock+0x186>
8000345e:	fe 58 3c 00 	cp.w	r8,-50176
80003462:	c2 20       	breq	800034a6 <sysclk_enable_peripheral_clock+0x126>
80003464:	fe 58 34 00 	cp.w	r8,-52224
80003468:	c4 b0       	breq	800034fe <sysclk_enable_peripheral_clock+0x17e>
		break;
#endif

	default:
		Assert(false);
		return;
8000346a:	c8 b8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000346c:	fe 58 50 00 	cp.w	r8,-45056
80003470:	c2 f0       	breq	800034ce <sysclk_enable_peripheral_clock+0x14e>
80003472:	fe 58 54 00 	cp.w	r8,-44032
80003476:	c3 00       	breq	800034d6 <sysclk_enable_peripheral_clock+0x156>
80003478:	fe 58 44 00 	cp.w	r8,-48128
8000347c:	c4 90       	breq	8000350e <sysclk_enable_peripheral_clock+0x18e>
		break;
#endif

	default:
		Assert(false);
		return;
8000347e:	c8 18       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
	case AVR32_INTC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_INTC);
80003480:	30 0c       	mov	r12,0
80003482:	f0 1f 00 42 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
80003486:	c7 d8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_GPIO_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_GPIO);
80003488:	30 1c       	mov	r12,1
8000348a:	f0 1f 00 40 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
8000348e:	c7 98       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PDCA_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
80003490:	30 4c       	mov	r12,4
80003492:	f0 1f 00 3f 	mcall	8000358c <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pba_module(SYSCLK_PDCA_PB);
80003496:	30 2c       	mov	r12,2
80003498:	f0 1f 00 3c 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
8000349c:	c7 28       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PM);
8000349e:	30 3c       	mov	r12,3
800034a0:	f0 1f 00 3a 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
800034a4:	c6 e8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ADC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ADC);
800034a6:	30 4c       	mov	r12,4
800034a8:	f0 1f 00 38 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
800034ac:	c6 a8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI0);
800034ae:	30 5c       	mov	r12,5
800034b0:	f0 1f 00 36 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
800034b4:	c6 68       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
800034b6:	30 6c       	mov	r12,6
800034b8:	f0 1f 00 34 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
800034bc:	c6 28       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
800034be:	30 7c       	mov	r12,7
800034c0:	f0 1f 00 32 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
800034c4:	c5 e8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
800034c6:	30 8c       	mov	r12,8
800034c8:	f0 1f 00 30 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
800034cc:	c5 a8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
800034ce:	30 9c       	mov	r12,9
800034d0:	f0 1f 00 2e 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
800034d4:	c5 68       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
800034d6:	30 ac       	mov	r12,10
800034d8:	f0 1f 00 2c 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
800034dc:	c5 28       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART0);
800034de:	30 bc       	mov	r12,11
800034e0:	f0 1f 00 2a 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
800034e4:	c4 e8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART1);
800034e6:	30 cc       	mov	r12,12
800034e8:	f0 1f 00 28 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
800034ec:	c4 a8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART2_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
800034ee:	30 dc       	mov	r12,13
800034f0:	f0 1f 00 26 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
800034f4:	c4 68       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART3_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART3);
800034f6:	30 ec       	mov	r12,14
800034f8:	f0 1f 00 24 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
800034fc:	c4 28       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SSC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SSC);
800034fe:	30 fc       	mov	r12,15
80003500:	f0 1f 00 22 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
80003504:	c3 e8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC0);
80003506:	31 0c       	mov	r12,16
80003508:	f0 1f 00 20 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
8000350c:	c3 a8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC1);
8000350e:	31 1c       	mov	r12,17
80003510:	f0 1f 00 1e 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
80003514:	c3 68       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ABDAC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DAC);
80003516:	31 2c       	mov	r12,18
80003518:	f0 1f 00 1c 	mcall	80003588 <sysclk_enable_peripheral_clock+0x208>
		break;
8000351c:	c3 28       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_HMATRIX_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
8000351e:	30 0c       	mov	r12,0
80003520:	f0 1f 00 1c 	mcall	80003590 <sysclk_enable_peripheral_clock+0x210>
		break;
80003524:	c2 e8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USBB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
80003526:	30 3c       	mov	r12,3
80003528:	f0 1f 00 19 	mcall	8000358c <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
8000352c:	30 1c       	mov	r12,1
8000352e:	f0 1f 00 19 	mcall	80003590 <sysclk_enable_peripheral_clock+0x210>
		break;
80003532:	c2 78       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_FLASHC_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_FLASHC_DATA);
80003534:	30 0c       	mov	r12,0
80003536:	f0 1f 00 16 	mcall	8000358c <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_FLASHC_REGS);
8000353a:	30 2c       	mov	r12,2
8000353c:	f0 1f 00 15 	mcall	80003590 <sysclk_enable_peripheral_clock+0x210>
		break;
80003540:	c2 08       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SMC_REGS);
80003542:	30 3c       	mov	r12,3
80003544:	f0 1f 00 13 	mcall	80003590 <sysclk_enable_peripheral_clock+0x210>
		break;
80003548:	c1 c8       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SDRAMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SDRAMC_REGS);
8000354a:	30 4c       	mov	r12,4
8000354c:	f0 1f 00 11 	mcall	80003590 <sysclk_enable_peripheral_clock+0x210>
		break;
80003550:	c1 88       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ECCHRS_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_ECC);
80003552:	30 5c       	mov	r12,5
80003554:	f0 1f 00 0f 	mcall	80003590 <sysclk_enable_peripheral_clock+0x210>
		break;
80003558:	c1 48       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MCI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MCI);
8000355a:	30 6c       	mov	r12,6
8000355c:	f0 1f 00 0d 	mcall	80003590 <sysclk_enable_peripheral_clock+0x210>
		break;
80003560:	c1 08       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_BUSMON_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_BUSMON_HSB);
80003562:	30 8c       	mov	r12,8
80003564:	f0 1f 00 0a 	mcall	8000358c <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_BUSMON);
80003568:	30 7c       	mov	r12,7
8000356a:	f0 1f 00 0a 	mcall	80003590 <sysclk_enable_peripheral_clock+0x210>
		break;
8000356e:	c0 98       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MSI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MSI);
80003570:	30 8c       	mov	r12,8
80003572:	f0 1f 00 08 	mcall	80003590 <sysclk_enable_peripheral_clock+0x210>
		break;
80003576:	c0 58       	rjmp	80003580 <sysclk_enable_peripheral_clock+0x200>

#if defined(AVR32_AES_ADDRESS)
	case AVR32_AES_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_AES);
80003578:	30 9c       	mov	r12,9
8000357a:	f0 1f 00 06 	mcall	80003590 <sysclk_enable_peripheral_clock+0x210>
		break;
8000357e:	d7 03       	nop

	default:
		Assert(false);
		return;
	}
}
80003580:	2f fd       	sub	sp,-4
80003582:	e3 cd 80 80 	ldm	sp++,r7,pc
80003586:	00 00       	add	r0,r0
80003588:	80 00       	ld.sh	r0,r0[0x0]
8000358a:	33 60       	mov	r0,54
8000358c:	80 00       	ld.sh	r0,r0[0x0]
8000358e:	33 40       	mov	r0,52
80003590:	80 00       	ld.sh	r0,r0[0x0]
80003592:	c2 70       	breq	800035e0 <tc_irq+0x4c>

80003594 <tc_irq>:
 * The ISR handles RC compare interrupt and sets the update_timer flag to
 * update the timer value.
 */
__attribute__((__interrupt__))
static void tc_irq(void)
{
80003594:	eb cd 40 80 	pushm	r7,lr
80003598:	1a 97       	mov	r7,sp
	// Increment the ms seconds counter
	tc_tick++;
8000359a:	4a 68       	lddpc	r8,80003630 <tc_irq+0x9c>
8000359c:	70 08       	ld.w	r8,r8[0x0]
8000359e:	f0 c9 ff ff 	sub	r9,r8,-1
800035a2:	4a 48       	lddpc	r8,80003630 <tc_irq+0x9c>
800035a4:	91 09       	st.w	r8[0x0],r9
	 * in the Watch Window.
	 */

	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
800035a6:	30 0b       	mov	r11,0
800035a8:	fe 7c 38 00 	mov	r12,-51200
800035ac:	f0 1f 00 22 	mcall	80003634 <tc_irq+0xa0>

	if (entry_mode_status == NO_MODE_SELECTED)
800035b0:	4a 28       	lddpc	r8,80003638 <tc_irq+0xa4>
800035b2:	11 88       	ld.ub	r8,r8[0x0]
800035b4:	5c 58       	castu.b	r8
800035b6:	c1 51       	brne	800035e0 <tc_irq+0x4c>
	{
		if (check_programming_mode_entry_sequence() == true)
800035b8:	f0 1f 00 21 	mcall	8000363c <tc_irq+0xa8>
800035bc:	18 98       	mov	r8,r12
800035be:	58 08       	cp.w	r8,0
800035c0:	c0 50       	breq	800035ca <tc_irq+0x36>
		{
			entry_mode_status = PROGRAMMING_MODE;
800035c2:	49 e9       	lddpc	r9,80003638 <tc_irq+0xa4>
800035c4:	30 18       	mov	r8,1
800035c6:	b2 88       	st.b	r9[0x0],r8
800035c8:	c0 c8       	rjmp	800035e0 <tc_irq+0x4c>
		}
		else if (check_normal_mode_entry_sequence() == true)
800035ca:	f0 1f 00 1e 	mcall	80003640 <tc_irq+0xac>
800035ce:	18 98       	mov	r8,r12
800035d0:	58 08       	cp.w	r8,0
800035d2:	c0 70       	breq	800035e0 <tc_irq+0x4c>
		{
			entry_mode_status = NORMAL_MODE;
800035d4:	49 99       	lddpc	r9,80003638 <tc_irq+0xa4>
800035d6:	30 28       	mov	r8,2
800035d8:	b2 88       	st.b	r9[0x0],r8
			pass_code = temp_password;
800035da:	49 b8       	lddpc	r8,80003644 <tc_irq+0xb0>
800035dc:	49 b9       	lddpc	r9,80003648 <tc_irq+0xb4>
800035de:	91 09       	st.w	r8[0x0],r9
		}
	}
	
	if (entry_mode_status == PROGRAMMING_MODE)
800035e0:	49 68       	lddpc	r8,80003638 <tc_irq+0xa4>
800035e2:	11 88       	ld.ub	r8,r8[0x0]
800035e4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800035e8:	30 18       	mov	r8,1
800035ea:	f0 09 18 00 	cp.b	r9,r8
800035ee:	c0 e1       	brne	8000360a <tc_irq+0x76>
	{
		if (!mode_selected)
800035f0:	49 78       	lddpc	r8,8000364c <tc_irq+0xb8>
800035f2:	11 88       	ld.ub	r8,r8[0x0]
800035f4:	5c 58       	castu.b	r8
800035f6:	ec 18 00 01 	eorl	r8,0x1
800035fa:	5c 58       	castu.b	r8
800035fc:	c0 40       	breq	80003604 <tc_irq+0x70>
		{
			check_for_mode_selected();
800035fe:	f0 1f 00 15 	mcall	80003650 <tc_irq+0xbc>
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
80003602:	c0 e8       	rjmp	8000361e <tc_irq+0x8a>
80003604:	f0 1f 00 14 	mcall	80003654 <tc_irq+0xc0>
80003608:	c0 b8       	rjmp	8000361e <tc_irq+0x8a>
				//save_to_mcu_flash();
			}
		}
	}

	else if (entry_mode_status == NORMAL_MODE)
8000360a:	48 c8       	lddpc	r8,80003638 <tc_irq+0xa4>
8000360c:	11 88       	ld.ub	r8,r8[0x0]
8000360e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003612:	30 28       	mov	r8,2
80003614:	f0 09 18 00 	cp.b	r9,r8
80003618:	c0 31       	brne	8000361e <tc_irq+0x8a>
	{
		read_password();
8000361a:	f0 1f 00 10 	mcall	80003658 <tc_irq+0xc4>
	



	// specify that an interrupt has been raised
	update_timer = true;
8000361e:	49 09       	lddpc	r9,8000365c <tc_irq+0xc8>
80003620:	30 18       	mov	r8,1
80003622:	b2 88       	st.b	r9[0x0],r8
	// Toggle the GPIO line
	gpio_tgl_gpio_pin(EXAMPLE_TOGGLE_PIN);
80003624:	30 3c       	mov	r12,3
80003626:	f0 1f 00 0f 	mcall	80003660 <tc_irq+0xcc>
}
8000362a:	e3 cd 40 80 	ldm	sp++,r7,lr
8000362e:	d6 03       	rete
80003630:	00 00       	add	r0,r0
80003632:	04 74       	tst	r4,r2
80003634:	80 00       	ld.sh	r0,r0[0x0]
80003636:	9b ae       	st.w	sp[0x28],lr
80003638:	00 00       	add	r0,r0
8000363a:	04 7c       	tst	r12,r2
8000363c:	80 00       	ld.sh	r0,r0[0x0]
8000363e:	3a 64       	mov	r4,-90
80003640:	80 00       	ld.sh	r0,r0[0x0]
80003642:	3a f0       	mov	r0,-81
80003644:	00 00       	add	r0,r0
80003646:	09 a4       	ld.ub	r4,r4[0x2]
80003648:	00 00       	add	r0,r0
8000364a:	02 e8       	st.h	--r1,r8
8000364c:	00 00       	add	r0,r0
8000364e:	04 78       	tst	r8,r2
80003650:	80 00       	ld.sh	r0,r0[0x0]
80003652:	3c 0c       	mov	r12,-64
80003654:	80 00       	ld.sh	r0,r0[0x0]
80003656:	3c 20       	mov	r0,-62
80003658:	80 00       	ld.sh	r0,r0[0x0]
8000365a:	3d 70       	mov	r0,-41
8000365c:	00 00       	add	r0,r0
8000365e:	01 2c       	ld.uh	r12,r0++
80003660:	80 00       	ld.sh	r0,r0[0x0]
80003662:	91 6a       	st.w	r8[0x18],r10

80003664 <is_button_released>:

bool is_button_released(void)
{
80003664:	eb cd 40 80 	pushm	r7,lr
80003668:	1a 97       	mov	r7,sp
	if ((check_all_buttons_high() == true) && (button_released == false))
8000366a:	f0 1f 00 0b 	mcall	80003694 <is_button_released+0x30>
8000366e:	18 98       	mov	r8,r12
80003670:	58 08       	cp.w	r8,0
80003672:	c0 b0       	breq	80003688 <is_button_released+0x24>
80003674:	48 98       	lddpc	r8,80003698 <is_button_released+0x34>
80003676:	11 88       	ld.ub	r8,r8[0x0]
80003678:	5c 58       	castu.b	r8
8000367a:	ec 18 00 01 	eorl	r8,0x1
8000367e:	5c 58       	castu.b	r8
80003680:	c0 40       	breq	80003688 <is_button_released+0x24>
	{
		button_released = true;
80003682:	48 69       	lddpc	r9,80003698 <is_button_released+0x34>
80003684:	30 18       	mov	r8,1
80003686:	b2 88       	st.b	r9[0x0],r8
	}
	return button_released;
80003688:	48 48       	lddpc	r8,80003698 <is_button_released+0x34>
8000368a:	11 88       	ld.ub	r8,r8[0x0]
8000368c:	5c 58       	castu.b	r8
}
8000368e:	10 9c       	mov	r12,r8
80003690:	e3 cd 80 80 	ldm	sp++,r7,pc
80003694:	80 00       	ld.sh	r0,r0[0x0]
80003696:	38 a4       	mov	r4,-118
80003698:	00 00       	add	r0,r0
8000369a:	01 2d       	ld.uh	sp,r0++

8000369c <Read_button>:

void Read_button(void)
{
8000369c:	eb cd 40 80 	pushm	r7,lr
800036a0:	1a 97       	mov	r7,sp
800036a2:	20 1d       	sub	sp,4
	uint8_t button_value = 0;
800036a4:	30 08       	mov	r8,0
800036a6:	ef 68 ff ff 	st.b	r7[-1],r8
	
	button_value = button_pressed();
800036aa:	f0 1f 00 3f 	mcall	800037a4 <Read_button+0x108>
800036ae:	18 98       	mov	r8,r12
800036b0:	ef 68 ff ff 	st.b	r7[-1],r8
	switch (button_value)
800036b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036b8:	58 48       	cp.w	r8,4
800036ba:	c0 50       	breq	800036c4 <Read_button+0x28>
800036bc:	e0 48 00 ff 	cp.w	r8,255
800036c0:	c5 10       	breq	80003762 <Read_button+0xc6>
800036c2:	c2 88       	rjmp	80003712 <Read_button+0x76>
	{
		case ENTER_BUTTON:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
800036c4:	4b 98       	lddpc	r8,800037a8 <Read_button+0x10c>
800036c6:	11 88       	ld.ub	r8,r8[0x0]
800036c8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800036cc:	30 18       	mov	r8,1
800036ce:	f0 09 18 00 	cp.b	r9,r8
800036d2:	c0 d1       	brne	800036ec <Read_button+0x50>
			{
				if (mode_selected)
800036d4:	4b 68       	lddpc	r8,800037ac <Read_button+0x110>
800036d6:	11 88       	ld.ub	r8,r8[0x0]
800036d8:	5c 58       	castu.b	r8
800036da:	c4 60       	breq	80003766 <Read_button+0xca>
				{
					enter_button_status++;
800036dc:	4b 58       	lddpc	r8,800037b0 <Read_button+0x114>
800036de:	11 88       	ld.ub	r8,r8[0x0]
800036e0:	5c 58       	castu.b	r8
800036e2:	2f f8       	sub	r8,-1
800036e4:	5c 58       	castu.b	r8
800036e6:	4b 39       	lddpc	r9,800037b0 <Read_button+0x114>
800036e8:	b2 88       	st.b	r9[0x0],r8
			{
				normal_mode_password_entered = true;
			}

			
			break;
800036ea:	c4 38       	rjmp	80003770 <Read_button+0xd4>
				//else
				//{
					//mode_selected = true;
				//}
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
800036ec:	4a f8       	lddpc	r8,800037a8 <Read_button+0x10c>
800036ee:	11 88       	ld.ub	r8,r8[0x0]
800036f0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800036f4:	30 28       	mov	r8,2
800036f6:	f0 09 18 00 	cp.b	r9,r8
800036fa:	c3 81       	brne	8000376a <Read_button+0xce>
800036fc:	4a e8       	lddpc	r8,800037b4 <Read_button+0x118>
800036fe:	11 88       	ld.ub	r8,r8[0x0]
80003700:	5c 58       	castu.b	r8
80003702:	ec 18 00 01 	eorl	r8,0x1
80003706:	5c 58       	castu.b	r8
80003708:	c3 30       	breq	8000376e <Read_button+0xd2>
			{
				normal_mode_password_entered = true;
8000370a:	4a b9       	lddpc	r9,800037b4 <Read_button+0x118>
8000370c:	30 18       	mov	r8,1
8000370e:	b2 88       	st.b	r9[0x0],r8
			}

			
			break;
80003710:	c3 08       	rjmp	80003770 <Read_button+0xd4>
		case NO_BUTTON:
		break;
		
		default:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
80003712:	4a 68       	lddpc	r8,800037a8 <Read_button+0x10c>
80003714:	11 88       	ld.ub	r8,r8[0x0]
80003716:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000371a:	30 18       	mov	r8,1
8000371c:	f0 09 18 00 	cp.b	r9,r8
80003720:	c1 31       	brne	80003746 <Read_button+0xaa>
			{
				if (mode_selected)
80003722:	4a 38       	lddpc	r8,800037ac <Read_button+0x110>
80003724:	11 88       	ld.ub	r8,r8[0x0]
80003726:	5c 58       	castu.b	r8
80003728:	c0 70       	breq	80003736 <Read_button+0x9a>
				{
					store_passcode((uint32_t)button_value);
8000372a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000372e:	10 9c       	mov	r12,r8
80003730:	f0 1f 00 22 	mcall	800037b8 <Read_button+0x11c>
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003734:	c1 e8       	rjmp	80003770 <Read_button+0xd4>
				{
					store_passcode((uint32_t)button_value);
				}
				else
				{
					mode_chosen = button_value;
80003736:	4a 29       	lddpc	r9,800037bc <Read_button+0x120>
80003738:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000373c:	b2 88       	st.b	r9[0x0],r8
					mode_selected = true;
8000373e:	49 c9       	lddpc	r9,800037ac <Read_button+0x110>
80003740:	30 18       	mov	r8,1
80003742:	b2 88       	st.b	r9[0x0],r8
80003744:	c1 68       	rjmp	80003770 <Read_button+0xd4>
				}
			}
			else if (entry_mode_status == NORMAL_MODE)
80003746:	49 98       	lddpc	r8,800037a8 <Read_button+0x10c>
80003748:	11 88       	ld.ub	r8,r8[0x0]
8000374a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000374e:	30 28       	mov	r8,2
80003750:	f0 09 18 00 	cp.b	r9,r8
80003754:	c0 e1       	brne	80003770 <Read_button+0xd4>
			{
				store_passcode((uint32_t)button_value);
80003756:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000375a:	10 9c       	mov	r12,r8
8000375c:	f0 1f 00 17 	mcall	800037b8 <Read_button+0x11c>
80003760:	c0 88       	rjmp	80003770 <Read_button+0xd4>

			
			break;
		}
		case NO_BUTTON:
		break;
80003762:	d7 03       	nop
80003764:	c0 68       	rjmp	80003770 <Read_button+0xd4>
			{
				normal_mode_password_entered = true;
			}

			
			break;
80003766:	d7 03       	nop
80003768:	c0 48       	rjmp	80003770 <Read_button+0xd4>
8000376a:	d7 03       	nop
8000376c:	c0 28       	rjmp	80003770 <Read_button+0xd4>
8000376e:	d7 03       	nop
			}

		}
	}	

	if (enter_button_status == WAITING_FOR_PASSCODE_SALT_ENTRY)
80003770:	49 08       	lddpc	r8,800037b0 <Read_button+0x114>
80003772:	11 88       	ld.ub	r8,r8[0x0]
80003774:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003778:	30 58       	mov	r8,5
8000377a:	f0 09 18 00 	cp.b	r9,r8
8000377e:	c1 01       	brne	8000379e <Read_button+0x102>
	{
		if (var_W_ticks++ > var_W)
80003780:	49 08       	lddpc	r8,800037c0 <Read_button+0x124>
80003782:	70 08       	ld.w	r8,r8[0x0]
80003784:	49 09       	lddpc	r9,800037c4 <Read_button+0x128>
80003786:	72 09       	ld.w	r9,r9[0x0]
80003788:	12 38       	cp.w	r8,r9
8000378a:	5f b9       	srhi	r9
8000378c:	5c 59       	castu.b	r9
8000378e:	f0 ca ff ff 	sub	r10,r8,-1
80003792:	48 c8       	lddpc	r8,800037c0 <Read_button+0x124>
80003794:	91 0a       	st.w	r8[0x0],r10
80003796:	58 09       	cp.w	r9,0
80003798:	c0 30       	breq	8000379e <Read_button+0x102>
		{
			calculate_salt();
8000379a:	f0 1f 00 0c 	mcall	800037c8 <Read_button+0x12c>
		}
	}	
}
8000379e:	2f fd       	sub	sp,-4
800037a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800037a4:	80 00       	ld.sh	r0,r0[0x0]
800037a6:	37 cc       	mov	r12,124
800037a8:	00 00       	add	r0,r0
800037aa:	04 7c       	tst	r12,r2
800037ac:	00 00       	add	r0,r0
800037ae:	04 78       	tst	r8,r2
800037b0:	00 00       	add	r0,r0
800037b2:	04 7a       	tst	r10,r2
800037b4:	00 00       	add	r0,r0
800037b6:	04 79       	tst	r9,r2
800037b8:	80 00       	ld.sh	r0,r0[0x0]
800037ba:	39 dc       	mov	r12,-99
800037bc:	00 00       	add	r0,r0
800037be:	01 2e       	ld.uh	lr,r0++
800037c0:	00 00       	add	r0,r0
800037c2:	03 30       	ld.ub	r0,r1++
800037c4:	00 00       	add	r0,r0
800037c6:	01 28       	ld.uh	r8,r0++
800037c8:	80 00       	ld.sh	r0,r0[0x0]
800037ca:	2c fc       	sub	r12,-49

800037cc <button_pressed>:

uint8_t button_pressed (void)
{
800037cc:	eb cd 40 80 	pushm	r7,lr
800037d0:	1a 97       	mov	r7,sp
	
	is_button_released();
800037d2:	f0 1f 00 2a 	mcall	80003878 <button_pressed+0xac>

	if (button_released)
800037d6:	4a a8       	lddpc	r8,8000387c <button_pressed+0xb0>
800037d8:	11 88       	ld.ub	r8,r8[0x0]
800037da:	5c 58       	castu.b	r8
800037dc:	c4 90       	breq	8000386e <button_pressed+0xa2>
	{		
		if (read_push_button(PB1, (uint8_t *)&PB1_Counter))
800037de:	4a 9b       	lddpc	r11,80003880 <button_pressed+0xb4>
800037e0:	30 ac       	mov	r12,10
800037e2:	f0 1f 00 29 	mcall	80003884 <button_pressed+0xb8>
800037e6:	18 98       	mov	r8,r12
800037e8:	58 08       	cp.w	r8,0
800037ea:	c0 90       	breq	800037fc <button_pressed+0x30>
		{
			LED_On(LED0);
800037ec:	30 1c       	mov	r12,1
800037ee:	f0 1f 00 27 	mcall	80003888 <button_pressed+0xbc>
			LED_Off(LED1 | LED2 | LED3);
800037f2:	30 ec       	mov	r12,14
800037f4:	f0 1f 00 26 	mcall	8000388c <button_pressed+0xc0>
			//store_passcode(0L);
			return PUSH_BUTTON1;
800037f8:	30 08       	mov	r8,0
800037fa:	c3 c8       	rjmp	80003872 <button_pressed+0xa6>
		}
		else if (read_push_button(PB2, (uint8_t *)&PB2_Counter))
800037fc:	4a 5b       	lddpc	r11,80003890 <button_pressed+0xc4>
800037fe:	30 bc       	mov	r12,11
80003800:	f0 1f 00 21 	mcall	80003884 <button_pressed+0xb8>
80003804:	18 98       	mov	r8,r12
80003806:	58 08       	cp.w	r8,0
80003808:	c0 90       	breq	8000381a <button_pressed+0x4e>
		{
			LED_On(LED1);
8000380a:	30 2c       	mov	r12,2
8000380c:	f0 1f 00 1f 	mcall	80003888 <button_pressed+0xbc>
			LED_Off(LED0 | LED2 | LED3);
80003810:	30 dc       	mov	r12,13
80003812:	f0 1f 00 1f 	mcall	8000388c <button_pressed+0xc0>
			//store_passcode(1L);
			return PUSH_BUTTON2;
80003816:	30 18       	mov	r8,1
80003818:	c2 d8       	rjmp	80003872 <button_pressed+0xa6>
		}
		else if (read_push_button(PB3, (uint8_t *)&PB3_Counter))
8000381a:	49 fb       	lddpc	r11,80003894 <button_pressed+0xc8>
8000381c:	30 cc       	mov	r12,12
8000381e:	f0 1f 00 1a 	mcall	80003884 <button_pressed+0xb8>
80003822:	18 98       	mov	r8,r12
80003824:	58 08       	cp.w	r8,0
80003826:	c0 90       	breq	80003838 <button_pressed+0x6c>
		{
			LED_On(LED2);
80003828:	30 4c       	mov	r12,4
8000382a:	f0 1f 00 18 	mcall	80003888 <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED3);
8000382e:	30 bc       	mov	r12,11
80003830:	f0 1f 00 17 	mcall	8000388c <button_pressed+0xc0>
			//store_passcode(2L);
			return PUSH_BUTTON3;
80003834:	30 28       	mov	r8,2
80003836:	c1 e8       	rjmp	80003872 <button_pressed+0xa6>
		}
		else if (read_push_button(PB4, (uint8_t *)&PB4_Counter))
80003838:	49 8b       	lddpc	r11,80003898 <button_pressed+0xcc>
8000383a:	30 dc       	mov	r12,13
8000383c:	f0 1f 00 12 	mcall	80003884 <button_pressed+0xb8>
80003840:	18 98       	mov	r8,r12
80003842:	58 08       	cp.w	r8,0
80003844:	c0 90       	breq	80003856 <button_pressed+0x8a>
		{
			LED_On(LED3);
80003846:	30 8c       	mov	r12,8
80003848:	f0 1f 00 10 	mcall	80003888 <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED2);
8000384c:	30 7c       	mov	r12,7
8000384e:	f0 1f 00 10 	mcall	8000388c <button_pressed+0xc0>
			//store_passcode(3L);
			return PUSH_BUTTON4;
80003852:	30 38       	mov	r8,3
80003854:	c0 f8       	rjmp	80003872 <button_pressed+0xa6>
		}
		else if (read_push_button(PB_ENTER, (uint8_t *)&PB5_Counter))
80003856:	49 2b       	lddpc	r11,8000389c <button_pressed+0xd0>
80003858:	32 ac       	mov	r12,42
8000385a:	f0 1f 00 0b 	mcall	80003884 <button_pressed+0xb8>
8000385e:	18 98       	mov	r8,r12
80003860:	58 08       	cp.w	r8,0
80003862:	c0 60       	breq	8000386e <button_pressed+0xa2>
		{
			device_unlocked = true;
80003864:	48 f9       	lddpc	r9,800038a0 <button_pressed+0xd4>
80003866:	30 18       	mov	r8,1
80003868:	b2 88       	st.b	r9[0x0],r8
			return ENTER_BUTTON;
8000386a:	30 48       	mov	r8,4
8000386c:	c0 38       	rjmp	80003872 <button_pressed+0xa6>
		}
	}
	return NO_BUTTON;
8000386e:	e0 68 00 ff 	mov	r8,255
}
80003872:	10 9c       	mov	r12,r8
80003874:	e3 cd 80 80 	ldm	sp++,r7,pc
80003878:	80 00       	ld.sh	r0,r0[0x0]
8000387a:	36 64       	mov	r4,102
8000387c:	00 00       	add	r0,r0
8000387e:	01 2d       	ld.uh	sp,r0++
80003880:	00 00       	add	r0,r0
80003882:	04 a0       	st.w	r2++,r0
80003884:	80 00       	ld.sh	r0,r0[0x0]
80003886:	39 24       	mov	r4,-110
80003888:	80 00       	ld.sh	r0,r0[0x0]
8000388a:	43 3c       	lddsp	r12,sp[0xcc]
8000388c:	80 00       	ld.sh	r0,r0[0x0]
8000388e:	42 84       	lddsp	r4,sp[0xa0]
80003890:	00 00       	add	r0,r0
80003892:	04 a1       	st.w	r2++,r1
80003894:	00 00       	add	r0,r0
80003896:	04 a2       	st.w	r2++,r2
80003898:	00 00       	add	r0,r0
8000389a:	04 a3       	st.w	r2++,r3
8000389c:	00 00       	add	r0,r0
8000389e:	04 a4       	st.w	r2++,r4
800038a0:	00 00       	add	r0,r0
800038a2:	03 28       	ld.uh	r8,r1++

800038a4 <check_all_buttons_high>:

bool check_all_buttons_high(void)
{
800038a4:	eb cd 40 80 	pushm	r7,lr
800038a8:	1a 97       	mov	r7,sp
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
800038aa:	30 ac       	mov	r12,10
800038ac:	f0 1f 00 1c 	mcall	8000391c <check_all_buttons_high+0x78>
800038b0:	18 98       	mov	r8,r12
800038b2:	58 18       	cp.w	r8,1
800038b4:	c2 b1       	brne	8000390a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
800038b6:	30 bc       	mov	r12,11
800038b8:	f0 1f 00 19 	mcall	8000391c <check_all_buttons_high+0x78>
800038bc:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
800038be:	58 18       	cp.w	r8,1
800038c0:	c2 51       	brne	8000390a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
800038c2:	30 cc       	mov	r12,12
800038c4:	f0 1f 00 16 	mcall	8000391c <check_all_buttons_high+0x78>
800038c8:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
800038ca:	58 18       	cp.w	r8,1
800038cc:	c1 f1       	brne	8000390a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
800038ce:	30 dc       	mov	r12,13
800038d0:	f0 1f 00 13 	mcall	8000391c <check_all_buttons_high+0x78>
800038d4:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
800038d6:	58 18       	cp.w	r8,1
800038d8:	c1 91       	brne	8000390a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
		&& (gpio_get_pin_value(ENTER_BUTTON) == 1))
800038da:	30 4c       	mov	r12,4
800038dc:	f0 1f 00 10 	mcall	8000391c <check_all_buttons_high+0x78>
800038e0:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
800038e2:	58 18       	cp.w	r8,1
800038e4:	c1 31       	brne	8000390a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
		&& (gpio_get_pin_value(ENTER_BUTTON) == 1))
	{
		if (button_released_iteration++ > 4)
800038e6:	48 f8       	lddpc	r8,80003920 <check_all_buttons_high+0x7c>
800038e8:	11 88       	ld.ub	r8,r8[0x0]
800038ea:	30 49       	mov	r9,4
800038ec:	f2 08 18 00 	cp.b	r8,r9
800038f0:	5f b9       	srhi	r9
800038f2:	5c 59       	castu.b	r9
800038f4:	2f f8       	sub	r8,-1
800038f6:	5c 58       	castu.b	r8
800038f8:	48 aa       	lddpc	r10,80003920 <check_all_buttons_high+0x7c>
800038fa:	b4 88       	st.b	r10[0x0],r8
800038fc:	58 09       	cp.w	r9,0
800038fe:	c0 a0       	breq	80003912 <check_all_buttons_high+0x6e>
		{
			button_released_iteration = 0;
80003900:	48 89       	lddpc	r9,80003920 <check_all_buttons_high+0x7c>
80003902:	30 08       	mov	r8,0
80003904:	b2 88       	st.b	r9[0x0],r8
			return true;
80003906:	30 18       	mov	r8,1
80003908:	c0 78       	rjmp	80003916 <check_all_buttons_high+0x72>
		}
	}
	else
	{
		button_released_iteration = 0;
8000390a:	48 69       	lddpc	r9,80003920 <check_all_buttons_high+0x7c>
8000390c:	30 08       	mov	r8,0
8000390e:	b2 88       	st.b	r9[0x0],r8
80003910:	c0 28       	rjmp	80003914 <check_all_buttons_high+0x70>

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003912:	d7 03       	nop
	else
	{
		button_released_iteration = 0;
	}

	return false;
80003914:	30 08       	mov	r8,0
}
80003916:	10 9c       	mov	r12,r8
80003918:	e3 cd 80 80 	ldm	sp++,r7,pc
8000391c:	80 00       	ld.sh	r0,r0[0x0]
8000391e:	90 60       	ld.sh	r0,r8[0xc]
80003920:	00 00       	add	r0,r0
80003922:	04 aa       	st.w	r2++,r10

80003924 <read_push_button>:

bool read_push_button(uint32_t pin, uint8_t *counter)
{
80003924:	eb cd 40 80 	pushm	r7,lr
80003928:	1a 97       	mov	r7,sp
8000392a:	20 3d       	sub	sp,12
8000392c:	ef 4c ff f8 	st.w	r7[-8],r12
80003930:	ef 4b ff f4 	st.w	r7[-12],r11
	bool button_status = false;
80003934:	30 08       	mov	r8,0
80003936:	ef 68 ff ff 	st.b	r7[-1],r8

	if (gpio_get_pin_value(pin) == 0)
8000393a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000393e:	f0 1f 00 18 	mcall	8000399c <read_push_button+0x78>
80003942:	18 98       	mov	r8,r12
80003944:	58 08       	cp.w	r8,0
80003946:	c1 c1       	brne	8000397e <read_push_button+0x5a>
	{
		(*counter)++;
80003948:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000394c:	11 88       	ld.ub	r8,r8[0x0]
8000394e:	2f f8       	sub	r8,-1
80003950:	5c 58       	castu.b	r8
80003952:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003956:	b2 88       	st.b	r9[0x0],r8
		if (*counter >= 3)
80003958:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000395c:	11 89       	ld.ub	r9,r8[0x0]
8000395e:	30 28       	mov	r8,2
80003960:	f0 09 18 00 	cp.b	r9,r8
80003964:	e0 88 00 15 	brls	8000398e <read_push_button+0x6a>
		{
			button_status = true;
80003968:	30 18       	mov	r8,1
8000396a:	ef 68 ff ff 	st.b	r7[-1],r8
			//if (enter_pressed)
			//{
				//enter_pressed = false;	
				//Start_W_timer();
			//}
			*counter = 0;
8000396e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003972:	30 08       	mov	r8,0
80003974:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003976:	48 b9       	lddpc	r9,800039a0 <read_push_button+0x7c>
80003978:	30 08       	mov	r8,0
8000397a:	b2 88       	st.b	r9[0x0],r8
8000397c:	c0 a8       	rjmp	80003990 <read_push_button+0x6c>
		}
	}
	else
	{
		button_status = false;
8000397e:	30 08       	mov	r8,0
80003980:	ef 68 ff ff 	st.b	r7[-1],r8
		*counter = 0;
80003984:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003988:	30 08       	mov	r8,0
8000398a:	b2 88       	st.b	r9[0x0],r8
8000398c:	c0 28       	rjmp	80003990 <read_push_button+0x6c>
			//{
				//enter_pressed = false;	
				//Start_W_timer();
			//}
			*counter = 0;
			button_released = false;
8000398e:	d7 03       	nop
	else
	{
		button_status = false;
		*counter = 0;
	}
	return button_status;	
80003990:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80003994:	10 9c       	mov	r12,r8
80003996:	2f dd       	sub	sp,-12
80003998:	e3 cd 80 80 	ldm	sp++,r7,pc
8000399c:	80 00       	ld.sh	r0,r0[0x0]
8000399e:	90 60       	ld.sh	r0,r8[0xc]
800039a0:	00 00       	add	r0,r0
800039a2:	01 2d       	ld.uh	sp,r0++

800039a4 <push_buttons_init>:

void push_buttons_init(void)
{
800039a4:	eb cd 40 80 	pushm	r7,lr
800039a8:	1a 97       	mov	r7,sp
	gpio_configure_pin(PB1,GPIO_DIR_INPUT);
800039aa:	30 0b       	mov	r11,0
800039ac:	30 ac       	mov	r12,10
800039ae:	f0 1f 00 0b 	mcall	800039d8 <push_buttons_init+0x34>
	gpio_configure_pin(PB2,GPIO_DIR_INPUT);
800039b2:	30 0b       	mov	r11,0
800039b4:	30 bc       	mov	r12,11
800039b6:	f0 1f 00 09 	mcall	800039d8 <push_buttons_init+0x34>
	gpio_configure_pin(PB3,GPIO_DIR_INPUT);
800039ba:	30 0b       	mov	r11,0
800039bc:	30 cc       	mov	r12,12
800039be:	f0 1f 00 07 	mcall	800039d8 <push_buttons_init+0x34>
	gpio_configure_pin(PB4,GPIO_DIR_INPUT);
800039c2:	30 0b       	mov	r11,0
800039c4:	30 dc       	mov	r12,13
800039c6:	f0 1f 00 05 	mcall	800039d8 <push_buttons_init+0x34>
	gpio_configure_pin(PB_ENTER,GPIO_DIR_INPUT);
800039ca:	30 0b       	mov	r11,0
800039cc:	32 ac       	mov	r12,42
800039ce:	f0 1f 00 03 	mcall	800039d8 <push_buttons_init+0x34>
}
800039d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800039d6:	00 00       	add	r0,r0
800039d8:	80 00       	ld.sh	r0,r0[0x0]
800039da:	8e b2       	ld.uh	r2,r7[0x6]

800039dc <store_passcode>:

void store_passcode(uint32_t value)
{
800039dc:	eb cd 40 80 	pushm	r7,lr
800039e0:	1a 97       	mov	r7,sp
800039e2:	20 2d       	sub	sp,8
800039e4:	ef 4c ff f8 	st.w	r7[-8],r12
	unsigned char index = 0;
800039e8:	30 08       	mov	r8,0
800039ea:	ef 68 ff ff 	st.b	r7[-1],r8
	index = passcode_byte_index >> 4;
800039ee:	49 c8       	lddpc	r8,80003a5c <store_passcode+0x80>
800039f0:	11 88       	ld.ub	r8,r8[0x0]
800039f2:	5c 58       	castu.b	r8
800039f4:	a5 88       	lsr	r8,0x4
800039f6:	ef 68 ff ff 	st.b	r7[-1],r8
	pass_code[index] = pass_code[index] | (value << ((passcode_byte_index & 0x0000000F) << 1));
800039fa:	49 a8       	lddpc	r8,80003a60 <store_passcode+0x84>
800039fc:	70 09       	ld.w	r9,r8[0x0]
800039fe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a02:	a3 68       	lsl	r8,0x2
80003a04:	10 09       	add	r9,r8
80003a06:	49 78       	lddpc	r8,80003a60 <store_passcode+0x84>
80003a08:	70 0a       	ld.w	r10,r8[0x0]
80003a0a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a0e:	a3 68       	lsl	r8,0x2
80003a10:	f4 08 00 08 	add	r8,r10,r8
80003a14:	70 0a       	ld.w	r10,r8[0x0]
80003a16:	49 28       	lddpc	r8,80003a5c <store_passcode+0x80>
80003a18:	11 88       	ld.ub	r8,r8[0x0]
80003a1a:	5c 58       	castu.b	r8
80003a1c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003a20:	a1 78       	lsl	r8,0x1
80003a22:	ee fb ff f8 	ld.w	r11,r7[-8]
80003a26:	f6 08 09 48 	lsl	r8,r11,r8
80003a2a:	f5 e8 10 08 	or	r8,r10,r8
80003a2e:	93 08       	st.w	r9[0x0],r8
	if (++passcode_byte_index >= 128)
80003a30:	48 b8       	lddpc	r8,80003a5c <store_passcode+0x80>
80003a32:	11 88       	ld.ub	r8,r8[0x0]
80003a34:	5c 58       	castu.b	r8
80003a36:	2f f8       	sub	r8,-1
80003a38:	5c 58       	castu.b	r8
80003a3a:	48 99       	lddpc	r9,80003a5c <store_passcode+0x80>
80003a3c:	b2 88       	st.b	r9[0x0],r8
80003a3e:	48 88       	lddpc	r8,80003a5c <store_passcode+0x80>
80003a40:	11 88       	ld.ub	r8,r8[0x0]
80003a42:	5c 58       	castu.b	r8
80003a44:	10 99       	mov	r9,r8
80003a46:	30 08       	mov	r8,0
80003a48:	f0 09 18 00 	cp.b	r9,r8
80003a4c:	c0 44       	brge	80003a54 <store_passcode+0x78>
	{
		passcode_byte_index = 0;
80003a4e:	48 49       	lddpc	r9,80003a5c <store_passcode+0x80>
80003a50:	30 08       	mov	r8,0
80003a52:	b2 88       	st.b	r9[0x0],r8
	}
	//inter_key_delay = ENABLED;
}
80003a54:	2f ed       	sub	sp,-8
80003a56:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a5a:	00 00       	add	r0,r0
80003a5c:	00 00       	add	r0,r0
80003a5e:	03 29       	ld.uh	r9,r1++
80003a60:	00 00       	add	r0,r0
80003a62:	09 a4       	ld.ub	r4,r4[0x2]

80003a64 <check_programming_mode_entry_sequence>:

bool check_programming_mode_entry_sequence(void)
{
80003a64:	eb cd 40 80 	pushm	r7,lr
80003a68:	1a 97       	mov	r7,sp
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
		&& gpio_get_pin_value(PB3) == 0
80003a6a:	30 ac       	mov	r12,10
80003a6c:	f0 1f 00 1e 	mcall	80003ae4 <check_programming_mode_entry_sequence+0x80>
80003a70:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003a72:	58 08       	cp.w	r8,0
80003a74:	c2 e1       	brne	80003ad0 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
80003a76:	30 cc       	mov	r12,12
80003a78:	f0 1f 00 1b 	mcall	80003ae4 <check_programming_mode_entry_sequence+0x80>
80003a7c:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003a7e:	58 08       	cp.w	r8,0
80003a80:	c2 81       	brne	80003ad0 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
80003a82:	30 dc       	mov	r12,13
80003a84:	f0 1f 00 18 	mcall	80003ae4 <check_programming_mode_entry_sequence+0x80>
80003a88:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003a8a:	58 08       	cp.w	r8,0
80003a8c:	c2 21       	brne	80003ad0 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003a8e:	30 bc       	mov	r12,11
80003a90:	f0 1f 00 15 	mcall	80003ae4 <check_programming_mode_entry_sequence+0x80>
80003a94:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003a96:	58 18       	cp.w	r8,1
80003a98:	c1 c1       	brne	80003ad0 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003a9a:	30 4c       	mov	r12,4
80003a9c:	f0 1f 00 12 	mcall	80003ae4 <check_programming_mode_entry_sequence+0x80>
80003aa0:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003aa2:	58 18       	cp.w	r8,1
80003aa4:	c1 61       	brne	80003ad0 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
	{
		if (programming_mode_sequence_counter++ >= 100)
80003aa6:	49 18       	lddpc	r8,80003ae8 <check_programming_mode_entry_sequence+0x84>
80003aa8:	90 08       	ld.sh	r8,r8[0x0]
80003aaa:	36 39       	mov	r9,99
80003aac:	f2 08 19 00 	cp.h	r8,r9
80003ab0:	5f b9       	srhi	r9
80003ab2:	5c 59       	castu.b	r9
80003ab4:	2f f8       	sub	r8,-1
80003ab6:	5c 88       	casts.h	r8
80003ab8:	48 ca       	lddpc	r10,80003ae8 <check_programming_mode_entry_sequence+0x84>
80003aba:	b4 08       	st.h	r10[0x0],r8
80003abc:	58 09       	cp.w	r9,0
80003abe:	c0 d0       	breq	80003ad8 <check_programming_mode_entry_sequence+0x74>
		{
			programming_mode_sequence_counter = 0;
80003ac0:	48 a9       	lddpc	r9,80003ae8 <check_programming_mode_entry_sequence+0x84>
80003ac2:	30 08       	mov	r8,0
80003ac4:	b2 08       	st.h	r9[0x0],r8
			button_released = false;
80003ac6:	48 a9       	lddpc	r9,80003aec <check_programming_mode_entry_sequence+0x88>
80003ac8:	30 08       	mov	r8,0
80003aca:	b2 88       	st.b	r9[0x0],r8
			return true;
80003acc:	30 18       	mov	r8,1
80003ace:	c0 78       	rjmp	80003adc <check_programming_mode_entry_sequence+0x78>
		}
	}
	else
	{
		programming_mode_sequence_counter = 0;
80003ad0:	48 69       	lddpc	r9,80003ae8 <check_programming_mode_entry_sequence+0x84>
80003ad2:	30 08       	mov	r8,0
80003ad4:	b2 08       	st.h	r9[0x0],r8
80003ad6:	c0 28       	rjmp	80003ada <check_programming_mode_entry_sequence+0x76>
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003ad8:	d7 03       	nop
	}
	else
	{
		programming_mode_sequence_counter = 0;
	}
	return false;
80003ada:	30 08       	mov	r8,0
}
80003adc:	10 9c       	mov	r12,r8
80003ade:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ae2:	00 00       	add	r0,r0
80003ae4:	80 00       	ld.sh	r0,r0[0x0]
80003ae6:	90 60       	ld.sh	r0,r8[0xc]
80003ae8:	00 00       	add	r0,r0
80003aea:	04 a8       	st.w	r2++,r8
80003aec:	00 00       	add	r0,r0
80003aee:	01 2d       	ld.uh	sp,r0++

80003af0 <check_normal_mode_entry_sequence>:

bool check_normal_mode_entry_sequence(void)
{
80003af0:	eb cd 40 80 	pushm	r7,lr
80003af4:	1a 97       	mov	r7,sp
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
		&& gpio_get_pin_value(PB4) == 0
80003af6:	30 4c       	mov	r12,4
80003af8:	f0 1f 00 40 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003afc:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003afe:	58 08       	cp.w	r8,0
80003b00:	c3 41       	brne	80003b68 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
80003b02:	30 dc       	mov	r12,13
80003b04:	f0 1f 00 3d 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b08:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b0a:	58 08       	cp.w	r8,0
80003b0c:	c2 e1       	brne	80003b68 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
80003b0e:	30 ac       	mov	r12,10
80003b10:	f0 1f 00 3a 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b14:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b16:	58 18       	cp.w	r8,1
80003b18:	c2 81       	brne	80003b68 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003b1a:	30 bc       	mov	r12,11
80003b1c:	f0 1f 00 37 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b20:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b22:	58 18       	cp.w	r8,1
80003b24:	c2 21       	brne	80003b68 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003b26:	30 cc       	mov	r12,12
80003b28:	f0 1f 00 34 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b2c:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b2e:	58 18       	cp.w	r8,1
80003b30:	c1 c1       	brne	80003b68 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
	{
		normal_mode_unlock_device_sequence_counter = 0;
80003b32:	4b 39       	lddpc	r9,80003bfc <check_normal_mode_entry_sequence+0x10c>
80003b34:	30 08       	mov	r8,0
80003b36:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_device_id_sequence_counter++ >= 200)
80003b38:	4b 28       	lddpc	r8,80003c00 <check_normal_mode_entry_sequence+0x110>
80003b3a:	11 88       	ld.ub	r8,r8[0x0]
80003b3c:	3c 79       	mov	r9,-57
80003b3e:	f2 08 18 00 	cp.b	r8,r9
80003b42:	5f b9       	srhi	r9
80003b44:	5c 59       	castu.b	r9
80003b46:	2f f8       	sub	r8,-1
80003b48:	5c 58       	castu.b	r8
80003b4a:	4a ea       	lddpc	r10,80003c00 <check_normal_mode_entry_sequence+0x110>
80003b4c:	b4 88       	st.b	r10[0x0],r8
80003b4e:	58 09       	cp.w	r9,0
80003b50:	c4 c0       	breq	80003be8 <check_normal_mode_entry_sequence+0xf8>
		{
			normal_mode_device_id_sequence_counter = 0;
80003b52:	4a c9       	lddpc	r9,80003c00 <check_normal_mode_entry_sequence+0x110>
80003b54:	30 08       	mov	r8,0
80003b56:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003b58:	4a b9       	lddpc	r9,80003c04 <check_normal_mode_entry_sequence+0x114>
80003b5a:	30 08       	mov	r8,0
80003b5c:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = DEVICE_ID;
80003b5e:	4a b9       	lddpc	r9,80003c08 <check_normal_mode_entry_sequence+0x118>
80003b60:	30 38       	mov	r8,3
80003b62:	b2 88       	st.b	r9[0x0],r8
			return true;
80003b64:	30 18       	mov	r8,1
80003b66:	c4 58       	rjmp	80003bf0 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
			&& gpio_get_pin_value(PB2) == 0
80003b68:	30 4c       	mov	r12,4
80003b6a:	f0 1f 00 24 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b6e:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003b70:	58 08       	cp.w	r8,0
80003b72:	c3 41       	brne	80003bda <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
80003b74:	30 bc       	mov	r12,11
80003b76:	f0 1f 00 21 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b7a:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003b7c:	58 08       	cp.w	r8,0
80003b7e:	c2 e1       	brne	80003bda <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
80003b80:	30 ac       	mov	r12,10
80003b82:	f0 1f 00 1e 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b86:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003b88:	58 18       	cp.w	r8,1
80003b8a:	c2 81       	brne	80003bda <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003b8c:	30 cc       	mov	r12,12
80003b8e:	f0 1f 00 1b 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b92:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003b94:	58 18       	cp.w	r8,1
80003b96:	c2 21       	brne	80003bda <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003b98:	30 dc       	mov	r12,13
80003b9a:	f0 1f 00 18 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b9e:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003ba0:	58 18       	cp.w	r8,1
80003ba2:	c1 c1       	brne	80003bda <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
	{
		normal_mode_device_id_sequence_counter = 0;
80003ba4:	49 79       	lddpc	r9,80003c00 <check_normal_mode_entry_sequence+0x110>
80003ba6:	30 08       	mov	r8,0
80003ba8:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_unlock_device_sequence_counter++ >= 200)
80003baa:	49 58       	lddpc	r8,80003bfc <check_normal_mode_entry_sequence+0x10c>
80003bac:	11 88       	ld.ub	r8,r8[0x0]
80003bae:	3c 79       	mov	r9,-57
80003bb0:	f2 08 18 00 	cp.b	r8,r9
80003bb4:	5f b9       	srhi	r9
80003bb6:	5c 59       	castu.b	r9
80003bb8:	2f f8       	sub	r8,-1
80003bba:	5c 58       	castu.b	r8
80003bbc:	49 0a       	lddpc	r10,80003bfc <check_normal_mode_entry_sequence+0x10c>
80003bbe:	b4 88       	st.b	r10[0x0],r8
80003bc0:	58 09       	cp.w	r9,0
80003bc2:	c1 50       	breq	80003bec <check_normal_mode_entry_sequence+0xfc>
		{
			normal_mode_unlock_device_sequence_counter = 0;
80003bc4:	48 e9       	lddpc	r9,80003bfc <check_normal_mode_entry_sequence+0x10c>
80003bc6:	30 08       	mov	r8,0
80003bc8:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003bca:	48 f9       	lddpc	r9,80003c04 <check_normal_mode_entry_sequence+0x114>
80003bcc:	30 08       	mov	r8,0
80003bce:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = UNLOCK_CRYPTX2;
80003bd0:	48 e9       	lddpc	r9,80003c08 <check_normal_mode_entry_sequence+0x118>
80003bd2:	30 48       	mov	r8,4
80003bd4:	b2 88       	st.b	r9[0x0],r8
			return true;
80003bd6:	30 18       	mov	r8,1
80003bd8:	c0 c8       	rjmp	80003bf0 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else
	{
		normal_mode_device_id_sequence_counter = 0;
80003bda:	48 a9       	lddpc	r9,80003c00 <check_normal_mode_entry_sequence+0x110>
80003bdc:	30 08       	mov	r8,0
80003bde:	b2 88       	st.b	r9[0x0],r8
		normal_mode_unlock_device_sequence_counter = 0;
80003be0:	48 79       	lddpc	r9,80003bfc <check_normal_mode_entry_sequence+0x10c>
80003be2:	30 08       	mov	r8,0
80003be4:	b2 88       	st.b	r9[0x0],r8
80003be6:	c0 48       	rjmp	80003bee <check_normal_mode_entry_sequence+0xfe>
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003be8:	d7 03       	nop
80003bea:	c0 28       	rjmp	80003bee <check_normal_mode_entry_sequence+0xfe>
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003bec:	d7 03       	nop
	else
	{
		normal_mode_device_id_sequence_counter = 0;
		normal_mode_unlock_device_sequence_counter = 0;
	}
	return false;
80003bee:	30 08       	mov	r8,0
}
80003bf0:	10 9c       	mov	r12,r8
80003bf2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bf6:	00 00       	add	r0,r0
80003bf8:	80 00       	ld.sh	r0,r0[0x0]
80003bfa:	90 60       	ld.sh	r0,r8[0xc]
80003bfc:	00 00       	add	r0,r0
80003bfe:	04 a5       	st.w	r2++,r5
80003c00:	00 00       	add	r0,r0
80003c02:	04 a6       	st.w	r2++,r6
80003c04:	00 00       	add	r0,r0
80003c06:	01 2d       	ld.uh	sp,r0++
80003c08:	00 00       	add	r0,r0
80003c0a:	04 7b       	tst	r11,r2

80003c0c <check_for_mode_selected>:

void check_for_mode_selected(void)
{
80003c0c:	eb cd 40 80 	pushm	r7,lr
80003c10:	1a 97       	mov	r7,sp
	Read_button();
80003c12:	f0 1f 00 03 	mcall	80003c1c <check_for_mode_selected+0x10>
}
80003c16:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c1a:	00 00       	add	r0,r0
80003c1c:	80 00       	ld.sh	r0,r0[0x0]
80003c1e:	36 9c       	mov	r12,105

80003c20 <process_selected_mode>:

uint8_t process_selected_mode(void)
{
80003c20:	eb cd 40 80 	pushm	r7,lr
80003c24:	1a 97       	mov	r7,sp
80003c26:	20 1d       	sub	sp,4
	uint8_t return_value = FAILED;
80003c28:	30 08       	mov	r8,0
80003c2a:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (enter_button_status == READY_TO_TRIGGER)
80003c2e:	4b 08       	lddpc	r8,80003cec <process_selected_mode+0xcc>
80003c30:	11 88       	ld.ub	r8,r8[0x0]
80003c32:	5c 58       	castu.b	r8
80003c34:	c0 b1       	brne	80003c4a <process_selected_mode+0x2a>
	{
		pass_code = temp_password;
80003c36:	4a f8       	lddpc	r8,80003cf0 <process_selected_mode+0xd0>
80003c38:	4a f9       	lddpc	r9,80003cf4 <process_selected_mode+0xd4>
80003c3a:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
80003c3c:	4a f9       	lddpc	r9,80003cf8 <process_selected_mode+0xd8>
80003c3e:	30 08       	mov	r8,0
80003c40:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_FIRST_PRESS;
80003c42:	4a b9       	lddpc	r9,80003cec <process_selected_mode+0xcc>
80003c44:	30 18       	mov	r8,1
80003c46:	b2 88       	st.b	r9[0x0],r8
80003c48:	c4 98       	rjmp	80003cda <process_selected_mode+0xba>
	}
	else if (enter_button_status == FIRST_TIME_PRESSED)
80003c4a:	4a 98       	lddpc	r8,80003cec <process_selected_mode+0xcc>
80003c4c:	11 88       	ld.ub	r8,r8[0x0]
80003c4e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003c52:	30 28       	mov	r8,2
80003c54:	f0 09 18 00 	cp.b	r9,r8
80003c58:	c0 e1       	brne	80003c74 <process_selected_mode+0x54>
	{
		store_passcode(3L);
80003c5a:	30 3c       	mov	r12,3
80003c5c:	f0 1f 00 28 	mcall	80003cfc <process_selected_mode+0xdc>
		pass_code = temp_password1;
80003c60:	4a 48       	lddpc	r8,80003cf0 <process_selected_mode+0xd0>
80003c62:	4a 89       	lddpc	r9,80003d00 <process_selected_mode+0xe0>
80003c64:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
80003c66:	4a 59       	lddpc	r9,80003cf8 <process_selected_mode+0xd8>
80003c68:	30 08       	mov	r8,0
80003c6a:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_SECOND_PRESS;
80003c6c:	4a 09       	lddpc	r9,80003cec <process_selected_mode+0xcc>
80003c6e:	30 38       	mov	r8,3
80003c70:	b2 88       	st.b	r9[0x0],r8
80003c72:	c3 48       	rjmp	80003cda <process_selected_mode+0xba>
	}
	else if (enter_button_status == SECOND_TIME_PRESSED)
80003c74:	49 e8       	lddpc	r8,80003cec <process_selected_mode+0xcc>
80003c76:	11 88       	ld.ub	r8,r8[0x0]
80003c78:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003c7c:	30 48       	mov	r8,4
80003c7e:	f0 09 18 00 	cp.b	r9,r8
80003c82:	c1 a1       	brne	80003cb6 <process_selected_mode+0x96>
	{
		store_passcode(3L);
80003c84:	30 3c       	mov	r12,3
80003c86:	f0 1f 00 1e 	mcall	80003cfc <process_selected_mode+0xdc>
		if (compare_entered_passwords() == true)
80003c8a:	f0 1f 00 1f 	mcall	80003d04 <process_selected_mode+0xe4>
80003c8e:	18 98       	mov	r8,r12
80003c90:	58 08       	cp.w	r8,0
80003c92:	c2 30       	breq	80003cd8 <process_selected_mode+0xb8>
		{
			memset((uint8_t *)temp_password, 0, 32);
80003c94:	32 0a       	mov	r10,32
80003c96:	30 0b       	mov	r11,0
80003c98:	49 7c       	lddpc	r12,80003cf4 <process_selected_mode+0xd4>
80003c9a:	f0 1f 00 1c 	mcall	80003d08 <process_selected_mode+0xe8>
			pass_code = temp_password;
80003c9e:	49 58       	lddpc	r8,80003cf0 <process_selected_mode+0xd0>
80003ca0:	49 59       	lddpc	r9,80003cf4 <process_selected_mode+0xd4>
80003ca2:	91 09       	st.w	r8[0x0],r9
			passcode_byte_index = 0;
80003ca4:	49 59       	lddpc	r9,80003cf8 <process_selected_mode+0xd8>
80003ca6:	30 08       	mov	r8,0
80003ca8:	b2 88       	st.b	r9[0x0],r8
			enter_button_status = WAITING_FOR_PASSCODE_SALT_ENTRY;
80003caa:	49 19       	lddpc	r9,80003cec <process_selected_mode+0xcc>
80003cac:	30 58       	mov	r8,5
80003cae:	b2 88       	st.b	r9[0x0],r8
			Start_W_timer();
80003cb0:	f0 1f 00 17 	mcall	80003d0c <process_selected_mode+0xec>
80003cb4:	c1 38       	rjmp	80003cda <process_selected_mode+0xba>
		}
	}
	else if (enter_button_status == PASSCODE_FOR_SALT_ENTERED)
80003cb6:	48 e8       	lddpc	r8,80003cec <process_selected_mode+0xcc>
80003cb8:	11 88       	ld.ub	r8,r8[0x0]
80003cba:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003cbe:	30 68       	mov	r8,6
80003cc0:	f0 09 18 00 	cp.b	r9,r8
80003cc4:	c0 b1       	brne	80003cda <process_selected_mode+0xba>
	{
		store_passcode(3L);
80003cc6:	30 3c       	mov	r12,3
80003cc8:	f0 1f 00 0d 	mcall	80003cfc <process_selected_mode+0xdc>
		calculate_salt();
80003ccc:	f0 1f 00 11 	mcall	80003d10 <process_selected_mode+0xf0>
		return_value = SUCCESSFUL;
80003cd0:	30 18       	mov	r8,1
80003cd2:	ef 68 ff ff 	st.b	r7[-1],r8
80003cd6:	c0 28       	rjmp	80003cda <process_selected_mode+0xba>
		{
			memset((uint8_t *)temp_password, 0, 32);
			pass_code = temp_password;
			passcode_byte_index = 0;
			enter_button_status = WAITING_FOR_PASSCODE_SALT_ENTRY;
			Start_W_timer();
80003cd8:	d7 03       	nop
		store_passcode(3L);
		calculate_salt();
		return_value = SUCCESSFUL;
	}

	Read_button();
80003cda:	f0 1f 00 0f 	mcall	80003d14 <process_selected_mode+0xf4>
	return return_value;
80003cde:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80003ce2:	10 9c       	mov	r12,r8
80003ce4:	2f fd       	sub	sp,-4
80003ce6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cea:	00 00       	add	r0,r0
80003cec:	00 00       	add	r0,r0
80003cee:	04 7a       	tst	r10,r2
80003cf0:	00 00       	add	r0,r0
80003cf2:	09 a4       	ld.ub	r4,r4[0x2]
80003cf4:	00 00       	add	r0,r0
80003cf6:	02 e8       	st.h	--r1,r8
80003cf8:	00 00       	add	r0,r0
80003cfa:	03 29       	ld.uh	r9,r1++
80003cfc:	80 00       	ld.sh	r0,r0[0x0]
80003cfe:	39 dc       	mov	r12,-99
80003d00:	00 00       	add	r0,r0
80003d02:	03 08       	ld.w	r8,r1++
80003d04:	80 00       	ld.sh	r0,r0[0x0]
80003d06:	3d 18       	mov	r8,-47
80003d08:	80 00       	ld.sh	r0,r0[0x0]
80003d0a:	eb ea 80 00 	sthh.w	r0[r0],r5:b,r10:b
80003d0e:	2e 78       	sub	r8,-25
80003d10:	80 00       	ld.sh	r0,r0[0x0]
80003d12:	2c fc       	sub	r12,-49
80003d14:	80 00       	ld.sh	r0,r0[0x0]
80003d16:	36 9c       	mov	r12,105

80003d18 <compare_entered_passwords>:

bool compare_entered_passwords(void)
{
80003d18:	eb cd 40 80 	pushm	r7,lr
80003d1c:	1a 97       	mov	r7,sp
80003d1e:	20 1d       	sub	sp,4
	uint8_t i = 0;
80003d20:	30 08       	mov	r8,0
80003d22:	ef 68 ff ff 	st.b	r7[-1],r8
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
80003d26:	c1 48       	rjmp	80003d4e <compare_entered_passwords+0x36>
	{
		if (temp_password[i] != temp_password1[i])
80003d28:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003d2c:	48 f8       	lddpc	r8,80003d68 <compare_entered_passwords+0x50>
80003d2e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003d32:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003d36:	48 e8       	lddpc	r8,80003d6c <compare_entered_passwords+0x54>
80003d38:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003d3c:	10 39       	cp.w	r9,r8
80003d3e:	c0 30       	breq	80003d44 <compare_entered_passwords+0x2c>
		{
			return false;
80003d40:	30 08       	mov	r8,0
80003d42:	c0 e8       	rjmp	80003d5e <compare_entered_passwords+0x46>
		}
		i++;
80003d44:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003d48:	2f f8       	sub	r8,-1
80003d4a:	ef 68 ff ff 	st.b	r7[-1],r8

bool compare_entered_passwords(void)
{
	uint8_t i = 0;
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
80003d4e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003d52:	30 78       	mov	r8,7
80003d54:	f0 09 18 00 	cp.b	r9,r8
80003d58:	fe 98 ff e8 	brls	80003d28 <compare_entered_passwords+0x10>
		{
			return false;
		}
		i++;
	}
	return true;
80003d5c:	30 18       	mov	r8,1
}
80003d5e:	10 9c       	mov	r12,r8
80003d60:	2f fd       	sub	sp,-4
80003d62:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d66:	00 00       	add	r0,r0
80003d68:	00 00       	add	r0,r0
80003d6a:	02 e8       	st.h	--r1,r8
80003d6c:	00 00       	add	r0,r0
80003d6e:	03 08       	ld.w	r8,r1++

80003d70 <read_password>:

void read_password(void)
{
80003d70:	eb cd 40 80 	pushm	r7,lr
80003d74:	1a 97       	mov	r7,sp
	Read_button();
80003d76:	f0 1f 00 06 	mcall	80003d8c <read_password+0x1c>
	if (normal_mode_password_entered == true)
80003d7a:	48 68       	lddpc	r8,80003d90 <read_password+0x20>
80003d7c:	11 88       	ld.ub	r8,r8[0x0]
80003d7e:	5c 58       	castu.b	r8
80003d80:	c0 30       	breq	80003d86 <read_password+0x16>
	{
		compare_with_saved_password();
80003d82:	f0 1f 00 05 	mcall	80003d94 <read_password+0x24>
	}
}
80003d86:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d8a:	00 00       	add	r0,r0
80003d8c:	80 00       	ld.sh	r0,r0[0x0]
80003d8e:	36 9c       	mov	r12,105
80003d90:	00 00       	add	r0,r0
80003d92:	04 79       	tst	r9,r2
80003d94:	80 00       	ld.sh	r0,r0[0x0]
80003d96:	3d 98       	mov	r8,-39

80003d98 <compare_with_saved_password>:

bool compare_with_saved_password(void)
{
80003d98:	eb cd 40 80 	pushm	r7,lr
80003d9c:	1a 97       	mov	r7,sp
80003d9e:	20 2d       	sub	sp,8
	uint8_t i = 0; 
80003da0:	30 08       	mov	r8,0
80003da2:	ef 68 ff fb 	st.b	r7[-5],r8
	uint32_t *temp_stored_password;

	temp_stored_password = encrypt_password(temp_password);
80003da6:	4b 0c       	lddpc	r12,80003e64 <compare_with_saved_password+0xcc>
80003da8:	f0 1f 00 30 	mcall	80003e68 <compare_with_saved_password+0xd0>
80003dac:	18 98       	mov	r8,r12
80003dae:	ef 48 ff fc 	st.w	r7[-4],r8

	while (i < 8)
80003db2:	c1 38       	rjmp	80003dd8 <compare_with_saved_password+0x40>
	{
		temp_password[i] = temp_stored_password[i];
80003db4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003db8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003dbc:	a3 68       	lsl	r8,0x2
80003dbe:	ee fa ff fc 	ld.w	r10,r7[-4]
80003dc2:	f4 08 00 08 	add	r8,r10,r8
80003dc6:	70 0a       	ld.w	r10,r8[0x0]
80003dc8:	4a 78       	lddpc	r8,80003e64 <compare_with_saved_password+0xcc>
80003dca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		i++;
80003dce:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003dd2:	2f f8       	sub	r8,-1
80003dd4:	ef 68 ff fb 	st.b	r7[-5],r8
	uint8_t i = 0; 
	uint32_t *temp_stored_password;

	temp_stored_password = encrypt_password(temp_password);

	while (i < 8)
80003dd8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003ddc:	30 78       	mov	r8,7
80003dde:	f0 09 18 00 	cp.b	r9,r8
80003de2:	fe 98 ff e9 	brls	80003db4 <compare_with_saved_password+0x1c>
	{
		temp_password[i] = temp_stored_password[i];
		i++;
	}
	if (normal_mode_chosen == DEVICE_ID)
80003de6:	4a 28       	lddpc	r8,80003e6c <compare_with_saved_password+0xd4>
80003de8:	11 88       	ld.ub	r8,r8[0x0]
80003dea:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003dee:	30 38       	mov	r8,3
80003df0:	f0 09 18 00 	cp.b	r9,r8
80003df4:	c0 61       	brne	80003e00 <compare_with_saved_password+0x68>
	{
		temp_stored_password = Stored_values.device_id_confirm;
80003df6:	49 f8       	lddpc	r8,80003e70 <compare_with_saved_password+0xd8>
80003df8:	2a 08       	sub	r8,-96
80003dfa:	ef 48 ff fc 	st.w	r7[-4],r8
80003dfe:	c0 c8       	rjmp	80003e16 <compare_with_saved_password+0x7e>
	}
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
80003e00:	49 b8       	lddpc	r8,80003e6c <compare_with_saved_password+0xd4>
80003e02:	11 88       	ld.ub	r8,r8[0x0]
80003e04:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003e08:	30 48       	mov	r8,4
80003e0a:	f0 09 18 00 	cp.b	r9,r8
80003e0e:	c0 41       	brne	80003e16 <compare_with_saved_password+0x7e>
	{
		temp_stored_password = Stored_values.unlock_password;
80003e10:	49 88       	lddpc	r8,80003e70 <compare_with_saved_password+0xd8>
80003e12:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	i = 0;
80003e16:	30 08       	mov	r8,0
80003e18:	ef 68 ff fb 	st.b	r7[-5],r8
	while (i < 8)
80003e1c:	c1 78       	rjmp	80003e4a <compare_with_saved_password+0xb2>
	{
		if (temp_stored_password[i] != temp_password[i])
80003e1e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003e22:	a3 68       	lsl	r8,0x2
80003e24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003e28:	f2 08 00 08 	add	r8,r9,r8
80003e2c:	70 09       	ld.w	r9,r8[0x0]
80003e2e:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80003e32:	48 d8       	lddpc	r8,80003e64 <compare_with_saved_password+0xcc>
80003e34:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003e38:	10 39       	cp.w	r9,r8
80003e3a:	c0 30       	breq	80003e40 <compare_with_saved_password+0xa8>
		{
			return false;
80003e3c:	30 08       	mov	r8,0
80003e3e:	c0 e8       	rjmp	80003e5a <compare_with_saved_password+0xc2>
		}
		i++;
80003e40:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003e44:	2f f8       	sub	r8,-1
80003e46:	ef 68 ff fb 	st.b	r7[-5],r8
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
	{
		temp_stored_password = Stored_values.unlock_password;
	}
	i = 0;
	while (i < 8)
80003e4a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003e4e:	30 78       	mov	r8,7
80003e50:	f0 09 18 00 	cp.b	r9,r8
80003e54:	fe 98 ff e5 	brls	80003e1e <compare_with_saved_password+0x86>
		{
			return false;
		}
		i++;
	}
	return true;
80003e58:	30 18       	mov	r8,1
}
80003e5a:	10 9c       	mov	r12,r8
80003e5c:	2f ed       	sub	sp,-8
80003e5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e62:	00 00       	add	r0,r0
80003e64:	00 00       	add	r0,r0
80003e66:	02 e8       	st.h	--r1,r8
80003e68:	80 00       	ld.sh	r0,r0[0x0]
80003e6a:	2c 1c       	sub	r12,-63
80003e6c:	00 00       	add	r0,r0
80003e6e:	04 7b       	tst	r11,r2
80003e70:	00 00       	add	r0,r0
80003e72:	02 48       	or	r8,r1

80003e74 <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
static void tc_init(volatile avr32_tc_t *tc)
{
80003e74:	eb cd 40 80 	pushm	r7,lr
80003e78:	1a 97       	mov	r7,sp
80003e7a:	20 2d       	sub	sp,8
80003e7c:	ef 4c ff f8 	st.w	r7[-8],r12
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80003e80:	49 0b       	lddpc	r11,80003ec0 <tc_init+0x4c>
80003e82:	ee fc ff f8 	ld.w	r12,r7[-8]
80003e86:	f0 1f 00 10 	mcall	80003ec4 <tc_init+0x50>
	 * Set the compare triggers.
	 * We configure it to count every 10 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 10 ms, hence RC = (fPBA / 8) / 100
	 * to get an interrupt every 10 ms.
	 */
	temp_value = tc_write_rc(tc, EXAMPLE_TC_CHANNEL, 20625 /*(sysclk_get_pba_hz() / 8 / 100)*/);
80003e8a:	e0 6a 50 91 	mov	r10,20625
80003e8e:	30 0b       	mov	r11,0
80003e90:	ee fc ff f8 	ld.w	r12,r7[-8]
80003e94:	f0 1f 00 0d 	mcall	80003ec8 <tc_init+0x54>
80003e98:	18 98       	mov	r8,r12
80003e9a:	5c 88       	casts.h	r8
80003e9c:	5c 78       	castu.h	r8
80003e9e:	ef 48 ff fc 	st.w	r7[-4],r8
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80003ea2:	48 ba       	lddpc	r10,80003ecc <tc_init+0x58>
80003ea4:	30 0b       	mov	r11,0
80003ea6:	ee fc ff f8 	ld.w	r12,r7[-8]
80003eaa:	f0 1f 00 0a 	mcall	80003ed0 <tc_init+0x5c>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80003eae:	30 0b       	mov	r11,0
80003eb0:	ee fc ff f8 	ld.w	r12,r7[-8]
80003eb4:	f0 1f 00 08 	mcall	80003ed4 <tc_init+0x60>
}
80003eb8:	2f ed       	sub	sp,-8
80003eba:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ebe:	00 00       	add	r0,r0
80003ec0:	80 00       	ld.sh	r0,r0[0x0]
80003ec2:	ef 40 80 00 	st.w	r7[-32768],r0
80003ec6:	9a 20       	ld.sh	r0,sp[0x4]
80003ec8:	80 00       	ld.sh	r0,r0[0x0]
80003eca:	9b e8       	st.w	sp[0x38],r8
80003ecc:	80 00       	ld.sh	r0,r0[0x0]
80003ece:	ef 48 80 00 	st.w	r7[-32768],r8
80003ed2:	98 38       	ld.sh	r8,r12[0x6]
80003ed4:	80 00       	ld.sh	r0,r0[0x0]
80003ed6:	9b 74       	st.w	sp[0x1c],r4

80003ed8 <tc_task>:
 * - Register the TC interrupt
 * - Configure, enable the CPCS (RC compare match) interrupt,
 * - and start a TC channel in waveform mode
 */
void tc_task (void)
{
80003ed8:	eb cd 40 80 	pushm	r7,lr
80003edc:	1a 97       	mov	r7,sp
80003ede:	20 2d       	sub	sp,8
	volatile avr32_tc_t *tc = EXAMPLE_TC;
80003ee0:	fe 78 38 00 	mov	r8,-51200
80003ee4:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t timer = 0;
80003ee8:	30 08       	mov	r8,0
80003eea:	ef 48 ff fc 	st.w	r7[-4],r8
	 * peripheral clocks, except for the peripheral clocks explicitly
	 * enabled in conf_clock.h.
	 */
	//sysclk_init();
	// Enable the clock to the selected example Timer/counter peripheral module.
	sysclk_enable_peripheral_clock(EXAMPLE_TC);
80003eee:	fe 7c 38 00 	mov	r12,-51200
80003ef2:	f0 1f 00 0d 	mcall	80003f24 <tc_task+0x4c>
	// Disable the interrupts
	cpu_irq_disable();
80003ef6:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	//INTC_init_interrupts();
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80003ef8:	30 0a       	mov	r10,0
80003efa:	e0 6b 01 c0 	mov	r11,448
80003efe:	48 bc       	lddpc	r12,80003f28 <tc_task+0x50>
80003f00:	f0 1f 00 0b 	mcall	80003f2c <tc_task+0x54>
	// Enable the interrupts
	cpu_irq_enable();
80003f04:	d5 03       	csrf	0x10
	// Initialize the timer module
	tc_init(tc);
80003f06:	ee fc ff f8 	ld.w	r12,r7[-8]
80003f0a:	f0 1f 00 0a 	mcall	80003f30 <tc_task+0x58>
	// Initialize push buttons
	push_buttons_init();
80003f0e:	f0 1f 00 0a 	mcall	80003f34 <tc_task+0x5c>

    calculate_hash(CipherKey256, 8, CipherKey256_hash);
80003f12:	48 aa       	lddpc	r10,80003f38 <tc_task+0x60>
80003f14:	30 8b       	mov	r11,8
80003f16:	48 ac       	lddpc	r12,80003f3c <tc_task+0x64>
80003f18:	f0 1f 00 0a 	mcall	80003f40 <tc_task+0x68>
			 //*/
			 //// Reset the timer update flag to wait till next timer interrupt
			//update_timer = false;
		//}
	//}
}
80003f1c:	2f ed       	sub	sp,-8
80003f1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f22:	00 00       	add	r0,r0
80003f24:	80 00       	ld.sh	r0,r0[0x0]
80003f26:	33 80       	mov	r0,56
80003f28:	80 00       	ld.sh	r0,r0[0x0]
80003f2a:	35 94       	mov	r4,89
80003f2c:	80 00       	ld.sh	r0,r0[0x0]
80003f2e:	92 f8       	ld.uh	r8,r9[0xe]
80003f30:	80 00       	ld.sh	r0,r0[0x0]
80003f32:	3e 74       	mov	r4,-25
80003f34:	80 00       	ld.sh	r0,r0[0x0]
80003f36:	39 a4       	mov	r4,-102
80003f38:	00 00       	add	r0,r0
80003f3a:	04 80       	andn	r0,r2
80003f3c:	80 00       	ld.sh	r0,r0[0x0]
80003f3e:	ee 00       	*unknown*
80003f40:	80 00       	ld.sh	r0,r0[0x0]
80003f42:	2e bc       	sub	r12,-21

80003f44 <init_hmatrix>:


/*! \brief Initializes the HSB bus matrix.
 */
static void init_hmatrix(void)
{
80003f44:	eb cd 40 80 	pushm	r7,lr
80003f48:	1a 97       	mov	r7,sp
80003f4a:	20 1d       	sub	sp,4
  // Set flashc master type to last default to save one cycle for
  // each branch.
  avr32_hmatrix_scfg_t scfg;

  scfg = AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH];
80003f4c:	fe 68 10 00 	mov	r8,-126976
80003f50:	71 08       	ld.w	r8,r8[0x40]
80003f52:	ef 48 ff fc 	st.w	r7[-4],r8
  scfg.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
80003f56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f5a:	30 19       	mov	r9,1
80003f5c:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
80003f60:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH] = scfg;
80003f64:	fe 68 10 00 	mov	r8,-126976
80003f68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003f6c:	f1 49 00 40 	st.w	r8[64],r9
}
80003f70:	2f fd       	sub	sp,-4
80003f72:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f76:	d7 03       	nop

80003f78 <aes_task>:
 * 8N1.
 * Then it sets up the interrupt handler and waits for a USART interrupt to
 * trigger.
 */
void aes_task (void)
{
80003f78:	eb cd 40 80 	pushm	r7,lr
80003f7c:	1a 97       	mov	r7,sp
  init_hmatrix();
80003f7e:	f0 1f 00 03 	mcall	80003f88 <aes_task+0x10>
}
80003f82:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f86:	00 00       	add	r0,r0
80003f88:	80 00       	ld.sh	r0,r0[0x0]
80003f8a:	3f 44       	mov	r4,-12

80003f8c <aes_init>:
	0x5A43D875,	// AES-CTR IV (BYTE2)
	0x00000001	// COUNTER
};

void aes_init (unsigned char Processing_Mode)
{
80003f8c:	eb cd 40 80 	pushm	r7,lr
80003f90:	1a 97       	mov	r7,sp
80003f92:	20 3d       	sub	sp,12
80003f94:	18 98       	mov	r8,r12
80003f96:	ef 68 ff f4 	st.b	r7[-12],r8
	  aes_config_t    AesConf;        // AES config structure
	  // Configure the AES.
	  AesConf.ProcessingMode = Processing_Mode;   // Cipher
80003f9a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003f9e:	ef 68 ff f8 	st.b	r7[-8],r8
	  AesConf.ProcessingDelay = 0;                // No delay: best performance
80003fa2:	30 08       	mov	r8,0
80003fa4:	ef 68 ff f9 	st.b	r7[-7],r8
	  AesConf.StartMode = AES_START_MODE_AUTO;    // Manual mode
80003fa8:	30 18       	mov	r8,1
80003faa:	ef 68 ff fa 	st.b	r7[-6],r8
	  AesConf.KeySize = AES_KEY_SIZE_256;         // 256bit cryptographic key
80003fae:	30 28       	mov	r8,2
80003fb0:	ef 68 ff fb 	st.b	r7[-5],r8
	  AesConf.OpMode = AES_CBC_MODE;              // CTR cipher mode
80003fb4:	30 18       	mov	r8,1
80003fb6:	ef 68 ff fc 	st.b	r7[-4],r8
	  AesConf.LodMode = 0;                        // LODMODE == 0 : the DATRDY flag
80003fba:	30 08       	mov	r8,0
80003fbc:	ef 68 ff fd 	st.b	r7[-3],r8
	  // is cleared when one of the output data registers is read (because we're in
	  // manual mode).
	  AesConf.CFBSize = 0;                        // Don't-care because we're using the CTR mode.
80003fc0:	30 08       	mov	r8,0
80003fc2:	ef 68 ff fe 	st.b	r7[-2],r8
	  AesConf.CounterMeasureMask = 0;             // Disable all counter measures.
80003fc6:	30 08       	mov	r8,0
80003fc8:	ef 68 ff ff 	st.b	r7[-1],r8
	  aes_configure(&AVR32_AES, &AesConf);
80003fcc:	ee c8 00 08 	sub	r8,r7,8
80003fd0:	10 9b       	mov	r11,r8
80003fd2:	fc 7c 00 00 	mov	r12,-196608
80003fd6:	f0 1f 00 06 	mcall	80003fec <aes_init+0x60>
	  aes_set_key(&AVR32_AES, CipherKey256);
80003fda:	48 6b       	lddpc	r11,80003ff0 <aes_init+0x64>
80003fdc:	fc 7c 00 00 	mov	r12,-196608
80003fe0:	f0 1f 00 05 	mcall	80003ff4 <aes_init+0x68>

	  //ccountt0 = Get_system_register(AVR32_COUNT);
	  // Start encryption.
	  //aes_start(&AVR32_AES);

}
80003fe4:	2f dd       	sub	sp,-12
80003fe6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fea:	00 00       	add	r0,r0
80003fec:	80 00       	ld.sh	r0,r0[0x0]
80003fee:	7f 9c       	ld.w	r12,pc[0x64]
80003ff0:	80 00       	ld.sh	r0,r0[0x0]
80003ff2:	ee 00       	*unknown*
80003ff4:	80 00       	ld.sh	r0,r0[0x0]
80003ff6:	80 2c       	ld.sh	r12,r0[0x4]

80003ff8 <apply_aes_encryption>:
uint32_t aes_out_data[128] = {0};

void apply_aes_encryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint16_t len, uint32_t sector_id)
{
80003ff8:	eb cd 40 80 	pushm	r7,lr
80003ffc:	1a 97       	mov	r7,sp
80003ffe:	20 6d       	sub	sp,24
80004000:	ef 4c ff f4 	st.w	r7[-12],r12
80004004:	ef 4b ff f0 	st.w	r7[-16],r11
80004008:	14 98       	mov	r8,r10
8000400a:	ef 49 ff e8 	st.w	r7[-24],r9
8000400e:	ef 58 ff ec 	st.h	r7[-20],r8
	uint8_t i, loop_counter;
	uint32_t temp;
	
	temp = CipherKey256_hash[0];
80004012:	4b 68       	lddpc	r8,800040e8 <apply_aes_encryption+0xf0>
80004014:	70 08       	ld.w	r8,r8[0x0]
80004016:	ef 48 ff fc 	st.w	r7[-4],r8

	CipherKey256_hash[0] = CipherKey256_hash[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
8000401a:	4b 48       	lddpc	r8,800040e8 <apply_aes_encryption+0xf0>
8000401c:	70 09       	ld.w	r9,r8[0x0]
8000401e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004022:	10 59       	eor	r9,r8
80004024:	4b 18       	lddpc	r8,800040e8 <apply_aes_encryption+0xf0>
80004026:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
							 
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);	
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);	
80004028:	4b 0b       	lddpc	r11,800040e8 <apply_aes_encryption+0xf0>
8000402a:	fc 7c 00 00 	mov	r12,-196608
8000402e:	f0 1f 00 30 	mcall	800040ec <apply_aes_encryption+0xf4>
	
	CipherKey256_hash[0] = temp;
80004032:	4a e8       	lddpc	r8,800040e8 <apply_aes_encryption+0xf0>
80004034:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004038:	91 09       	st.w	r8[0x0],r9
	
	loop_counter = len >> 2;
8000403a:	ef 18 ff ec 	ld.uh	r8,r7[-20]
8000403e:	a3 88       	lsr	r8,0x2
80004040:	5c 88       	casts.h	r8
80004042:	ef 68 ff fb 	st.b	r7[-5],r8
		
	for (i = 0; i < loop_counter; i+=4)
80004046:	30 08       	mov	r8,0
80004048:	ef 68 ff fa 	st.b	r7[-6],r8
8000404c:	c2 78       	rjmp	8000409a <apply_aes_encryption+0xa2>
	{
		aes_init(AES_PMODE_CIPHER);
8000404e:	30 1c       	mov	r12,1
80004050:	f0 1f 00 28 	mcall	800040f0 <apply_aes_encryption+0xf8>
			
		aes_write_inputdata(aes, &aes_in_data_t[i]);
80004054:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004058:	a3 68       	lsl	r8,0x2
8000405a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000405e:	f2 08 00 08 	add	r8,r9,r8
80004062:	10 9b       	mov	r11,r8
80004064:	ee fc ff f4 	ld.w	r12,r7[-12]
80004068:	f0 1f 00 23 	mcall	800040f4 <apply_aes_encryption+0xfc>

		while (!(aes->isr & 0x00000001));
8000406c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004070:	70 78       	ld.w	r8,r8[0x1c]
80004072:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004076:	cf b0       	breq	8000406c <apply_aes_encryption+0x74>

		aes_read_outputdata(aes, &aes_out_data[i]);
80004078:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000407c:	f0 09 15 02 	lsl	r9,r8,0x2
80004080:	49 e8       	lddpc	r8,800040f8 <apply_aes_encryption+0x100>
80004082:	f2 08 00 08 	add	r8,r9,r8
80004086:	10 9b       	mov	r11,r8
80004088:	ee fc ff f4 	ld.w	r12,r7[-12]
8000408c:	f0 1f 00 1c 	mcall	800040fc <apply_aes_encryption+0x104>
	
	CipherKey256_hash[0] = temp;
	
	loop_counter = len >> 2;
		
	for (i = 0; i < loop_counter; i+=4)
80004090:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004094:	2f c8       	sub	r8,-4
80004096:	ef 68 ff fa 	st.b	r7[-6],r8
8000409a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000409e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800040a2:	f0 09 18 00 	cp.b	r9,r8
800040a6:	cd 43       	brcs	8000404e <apply_aes_encryption+0x56>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
800040a8:	30 08       	mov	r8,0
800040aa:	ef 68 ff fa 	st.b	r7[-6],r8
800040ae:	c1 38       	rjmp	800040d4 <apply_aes_encryption+0xdc>
	{
		aes_in_data_t[i] = aes_out_data[i];
800040b0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800040b4:	a3 68       	lsl	r8,0x2
800040b6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800040ba:	f2 08 00 08 	add	r8,r9,r8
800040be:	ef 3a ff fa 	ld.ub	r10,r7[-6]
800040c2:	48 e9       	lddpc	r9,800040f8 <apply_aes_encryption+0x100>
800040c4:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800040c8:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
800040ca:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800040ce:	2f f8       	sub	r8,-1
800040d0:	ef 68 ff fa 	st.b	r7[-6],r8
800040d4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800040d8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800040dc:	f0 09 18 00 	cp.b	r9,r8
800040e0:	ce 83       	brcs	800040b0 <apply_aes_encryption+0xb8>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
800040e2:	2f ad       	sub	sp,-24
800040e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800040e8:	00 00       	add	r0,r0
800040ea:	04 80       	andn	r0,r2
800040ec:	80 00       	ld.sh	r0,r0[0x0]
800040ee:	80 ba       	ld.uh	r10,r0[0x6]
800040f0:	80 00       	ld.sh	r0,r0[0x0]
800040f2:	3f 8c       	mov	r12,-8
800040f4:	80 00       	ld.sh	r0,r0[0x0]
800040f6:	81 16       	st.w	r0[0x4],r6
800040f8:	00 00       	add	r0,r0
800040fa:	04 ac       	st.w	r2++,r12
800040fc:	80 00       	ld.sh	r0,r0[0x0]
800040fe:	81 ae       	st.w	r0[0x28],lr

80004100 <apply_aes_decryption>:


void apply_aes_decryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint16_t len, uint32_t sector_id)
{
80004100:	eb cd 40 80 	pushm	r7,lr
80004104:	1a 97       	mov	r7,sp
80004106:	20 6d       	sub	sp,24
80004108:	ef 4c ff f4 	st.w	r7[-12],r12
8000410c:	ef 4b ff f0 	st.w	r7[-16],r11
80004110:	14 98       	mov	r8,r10
80004112:	ef 49 ff e8 	st.w	r7[-24],r9
80004116:	ef 58 ff ec 	st.h	r7[-20],r8
	
	uint8_t i, loop_counter;
	uint32_t temp;

	temp = CipherKey256_hash[0];
8000411a:	4b 68       	lddpc	r8,800041f0 <apply_aes_decryption+0xf0>
8000411c:	70 08       	ld.w	r8,r8[0x0]
8000411e:	ef 48 ff fc 	st.w	r7[-4],r8

	CipherKey256_hash[0] = CipherKey256_hash[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
80004122:	4b 48       	lddpc	r8,800041f0 <apply_aes_decryption+0xf0>
80004124:	70 09       	ld.w	r9,r8[0x0]
80004126:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000412a:	10 59       	eor	r9,r8
8000412c:	4b 18       	lddpc	r8,800041f0 <apply_aes_decryption+0xf0>
8000412e:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
	
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);
80004130:	4b 0b       	lddpc	r11,800041f0 <apply_aes_decryption+0xf0>
80004132:	fc 7c 00 00 	mov	r12,-196608
80004136:	f0 1f 00 30 	mcall	800041f4 <apply_aes_decryption+0xf4>
	
	CipherKey256_hash[0] = temp;
8000413a:	4a e8       	lddpc	r8,800041f0 <apply_aes_decryption+0xf0>
8000413c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004140:	91 09       	st.w	r8[0x0],r9

	loop_counter = len >> 2;
80004142:	ef 18 ff ec 	ld.uh	r8,r7[-20]
80004146:	a3 88       	lsr	r8,0x2
80004148:	5c 88       	casts.h	r8
8000414a:	ef 68 ff fb 	st.b	r7[-5],r8

	for (i = 0; i < loop_counter; i+=4)
8000414e:	30 08       	mov	r8,0
80004150:	ef 68 ff fa 	st.b	r7[-6],r8
80004154:	c2 78       	rjmp	800041a2 <apply_aes_decryption+0xa2>
	{
		aes_init(AES_PMODE_DECIPHER);
80004156:	30 0c       	mov	r12,0
80004158:	f0 1f 00 28 	mcall	800041f8 <apply_aes_decryption+0xf8>

		aes_write_inputdata(aes, &aes_in_data_t[i]);
8000415c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004160:	a3 68       	lsl	r8,0x2
80004162:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004166:	f2 08 00 08 	add	r8,r9,r8
8000416a:	10 9b       	mov	r11,r8
8000416c:	ee fc ff f4 	ld.w	r12,r7[-12]
80004170:	f0 1f 00 23 	mcall	800041fc <apply_aes_decryption+0xfc>

		while (!(aes->isr & 0x00000001));
80004174:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004178:	70 78       	ld.w	r8,r8[0x1c]
8000417a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000417e:	cf b0       	breq	80004174 <apply_aes_decryption+0x74>

		aes_read_outputdata(aes, &aes_out_data[i]);
80004180:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004184:	f0 09 15 02 	lsl	r9,r8,0x2
80004188:	49 e8       	lddpc	r8,80004200 <apply_aes_decryption+0x100>
8000418a:	f2 08 00 08 	add	r8,r9,r8
8000418e:	10 9b       	mov	r11,r8
80004190:	ee fc ff f4 	ld.w	r12,r7[-12]
80004194:	f0 1f 00 1c 	mcall	80004204 <apply_aes_decryption+0x104>
	
	CipherKey256_hash[0] = temp;

	loop_counter = len >> 2;

	for (i = 0; i < loop_counter; i+=4)
80004198:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000419c:	2f c8       	sub	r8,-4
8000419e:	ef 68 ff fa 	st.b	r7[-6],r8
800041a2:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800041a6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800041aa:	f0 09 18 00 	cp.b	r9,r8
800041ae:	cd 43       	brcs	80004156 <apply_aes_decryption+0x56>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < loop_counter; i++)
800041b0:	30 08       	mov	r8,0
800041b2:	ef 68 ff fa 	st.b	r7[-6],r8
800041b6:	c1 38       	rjmp	800041dc <apply_aes_decryption+0xdc>
	{
		aes_in_data_t[i] = aes_out_data[i];
800041b8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800041bc:	a3 68       	lsl	r8,0x2
800041be:	ee f9 ff f0 	ld.w	r9,r7[-16]
800041c2:	f2 08 00 08 	add	r8,r9,r8
800041c6:	ef 3a ff fa 	ld.ub	r10,r7[-6]
800041ca:	48 e9       	lddpc	r9,80004200 <apply_aes_decryption+0x100>
800041cc:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800041d0:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < loop_counter; i++)
800041d2:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800041d6:	2f f8       	sub	r8,-1
800041d8:	ef 68 ff fa 	st.b	r7[-6],r8
800041dc:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800041e0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800041e4:	f0 09 18 00 	cp.b	r9,r8
800041e8:	ce 83       	brcs	800041b8 <apply_aes_decryption+0xb8>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
800041ea:	2f ad       	sub	sp,-24
800041ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800041f0:	00 00       	add	r0,r0
800041f2:	04 80       	andn	r0,r2
800041f4:	80 00       	ld.sh	r0,r0[0x0]
800041f6:	80 ba       	ld.uh	r10,r0[0x6]
800041f8:	80 00       	ld.sh	r0,r0[0x0]
800041fa:	3f 8c       	mov	r12,-8
800041fc:	80 00       	ld.sh	r0,r0[0x0]
800041fe:	81 16       	st.w	r0[0x4],r6
80004200:	00 00       	add	r0,r0
80004202:	04 ac       	st.w	r2++,r12
80004204:	80 00       	ld.sh	r0,r0[0x0]
80004206:	81 ae       	st.w	r0[0x28],lr

80004208 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
# define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80004208:	eb cd 40 80 	pushm	r7,lr
8000420c:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000420e:	30 3b       	mov	r11,3
80004210:	34 3c       	mov	r12,67
80004212:	f0 1f 00 17 	mcall	8000426c <board_init+0x64>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004216:	30 3b       	mov	r11,3
80004218:	36 5c       	mov	r12,101
8000421a:	f0 1f 00 15 	mcall	8000426c <board_init+0x64>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000421e:	30 3b       	mov	r11,3
80004220:	36 9c       	mov	r12,105
80004222:	f0 1f 00 13 	mcall	8000426c <board_init+0x64>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004226:	30 3b       	mov	r11,3
80004228:	36 6c       	mov	r12,102
8000422a:	f0 1f 00 11 	mcall	8000426c <board_init+0x64>

	gpio_configure_pin(GPIO_PUSH_BUTTON_SW2,GPIO_DIR_INPUT);
8000422e:	30 0b       	mov	r11,0
80004230:	32 ac       	mov	r12,42
80004232:	f0 1f 00 0f 	mcall	8000426c <board_init+0x64>
# define AT45DBX_ENABLE_NPCS_PIN(NPCS, unused) \
	{AT45DBX_SPI_NPCS##NPCS##_PIN, AT45DBX_SPI_NPCS##NPCS##_FUNCTION},
	MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
# undef AT45DBX_ENABLE_NPCS_PIN
	};
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
80004236:	30 4b       	mov	r11,4
80004238:	48 ec       	lddpc	r12,80004270 <board_init+0x68>
8000423a:	f0 1f 00 0f 	mcall	80004274 <board_init+0x6c>
		{SD_SLOT_4BITS_DATA1_PIN, SD_SLOT_4BITS_DATA1_FUNCTION},
		{SD_SLOT_4BITS_DATA2_PIN, SD_SLOT_4BITS_DATA2_FUNCTION},
		{SD_SLOT_4BITS_DATA3_PIN, SD_SLOT_4BITS_DATA3_FUNCTION}
	};
	// Configure Slot 0 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP,
8000423e:	30 ab       	mov	r11,10
80004240:	48 ec       	lddpc	r12,80004278 <board_init+0x70>
80004242:	f0 1f 00 0d 	mcall	80004274 <board_init+0x6c>
			sizeof(SD_MMC_MCI_GPIO_MAP) / sizeof(SD_MMC_MCI_GPIO_MAP[0]));
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_CARD_DETECT);
80004246:	32 bc       	mov	r12,43
80004248:	f0 1f 00 0d 	mcall	8000427c <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_WRITE_PROTECT);
8000424c:	36 cc       	mov	r12,108
8000424e:	f0 1f 00 0c 	mcall	8000427c <board_init+0x74>

	// Configure Slot 1 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP_1,
80004252:	30 6b       	mov	r11,6
80004254:	48 bc       	lddpc	r12,80004280 <board_init+0x78>
80004256:	f0 1f 00 08 	mcall	80004274 <board_init+0x6c>
	sizeof(SD_MMC_MCI_GPIO_MAP_1) / sizeof(SD_MMC_MCI_GPIO_MAP_1[0]));
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_CARD_DETECT);
8000425a:	32 8c       	mov	r12,40
8000425c:	f0 1f 00 08 	mcall	8000427c <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_WRITE_PROTECT);
80004260:	32 6c       	mov	r12,38
80004262:	f0 1f 00 07 	mcall	8000427c <board_init+0x74>
		{AVR32_USART3_TXD_0_3_PIN, AVR32_USART3_TXD_0_3_FUNCTION },
	};
	gpio_enable_module(COMPORT3_GPIO_MAP,
			sizeof(COMPORT3_GPIO_MAP) / sizeof(COMPORT3_GPIO_MAP[0]));
#endif
}
80004266:	e3 cd 80 80 	ldm	sp++,r7,pc
8000426a:	00 00       	add	r0,r0
8000426c:	80 00       	ld.sh	r0,r0[0x0]
8000426e:	8e b2       	ld.uh	r2,r7[0x6]
80004270:	80 00       	ld.sh	r0,r0[0x0]
80004272:	ef 4c 80 00 	st.w	r7[-32768],r12
80004276:	8c a4       	ld.uh	r4,r6[0x4]
80004278:	80 00       	ld.sh	r0,r0[0x0]
8000427a:	ef 54 80 00 	st.h	r7[-32768],r4
8000427e:	8e 78       	ld.sh	r8,r7[0xe]
80004280:	80 00       	ld.sh	r0,r0[0x0]
80004282:	ef 68 eb cd 	st.b	r7[-5171],r8

80004284 <LED_Off>:
  return Tst_bits(LED_State, leds);
}


void LED_Off(U32 leds)
{
80004284:	eb cd 40 80 	pushm	r7,lr
80004288:	1a 97       	mov	r7,sp
8000428a:	20 4d       	sub	sp,16
8000428c:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80004290:	4a 98       	lddpc	r8,80004334 <LED_Off+0xb0>
80004292:	21 08       	sub	r8,16
80004294:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80004298:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000429c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800042a0:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
800042a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042a8:	f0 09 11 ff 	rsub	r9,r8,-1
800042ac:	4a 38       	lddpc	r8,80004338 <LED_Off+0xb4>
800042ae:	70 08       	ld.w	r8,r8[0x0]
800042b0:	10 69       	and	r9,r8
800042b2:	4a 28       	lddpc	r8,80004338 <LED_Off+0xb4>
800042b4:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800042b6:	c3 78       	rjmp	80004324 <LED_Off+0xa0>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
800042b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042bc:	5c 98       	brev	r8
800042be:	f0 08 12 00 	clz	r8,r8
800042c2:	5c 58       	castu.b	r8
800042c4:	2f f8       	sub	r8,-1
800042c6:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
800042ca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800042ce:	a5 68       	lsl	r8,0x4
800042d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800042d4:	f2 08 00 08 	add	r8,r9,r8
800042d8:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800042dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042e0:	70 08       	ld.w	r8,r8[0x0]
800042e2:	a9 68       	lsl	r8,0x8
800042e4:	e0 28 f0 00 	sub	r8,61440
800042e8:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800042ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042f0:	70 19       	ld.w	r9,r8[0x4]
800042f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042f6:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800042fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042fe:	70 19       	ld.w	r9,r8[0x4]
80004300:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004304:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80004308:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000430c:	70 19       	ld.w	r9,r8[0x4]
8000430e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004312:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80004314:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004318:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000431c:	f2 08 0a 48 	lsr	r8,r9,r8
80004320:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80004324:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004328:	58 08       	cp.w	r8,0
8000432a:	cc 71       	brne	800042b8 <LED_Off+0x34>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8000432c:	2f cd       	sub	sp,-16
8000432e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004332:	00 00       	add	r0,r0
80004334:	80 00       	ld.sh	r0,r0[0x0]
80004336:	ef 74 00 00 	stcond	r7[0],r4
8000433a:	01 30       	ld.ub	r0,r0++

8000433c <LED_On>:


void LED_On(U32 leds)
{
8000433c:	eb cd 40 80 	pushm	r7,lr
80004340:	1a 97       	mov	r7,sp
80004342:	20 4d       	sub	sp,16
80004344:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80004348:	4a 88       	lddpc	r8,800043e8 <LED_On+0xac>
8000434a:	21 08       	sub	r8,16
8000434c:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80004350:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004354:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004358:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
8000435c:	4a 48       	lddpc	r8,800043ec <LED_On+0xb0>
8000435e:	70 09       	ld.w	r9,r8[0x0]
80004360:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004364:	10 49       	or	r9,r8
80004366:	4a 28       	lddpc	r8,800043ec <LED_On+0xb0>
80004368:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000436a:	c3 78       	rjmp	800043d8 <LED_On+0x9c>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
8000436c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004370:	5c 98       	brev	r8
80004372:	f0 08 12 00 	clz	r8,r8
80004376:	5c 58       	castu.b	r8
80004378:	2f f8       	sub	r8,-1
8000437a:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8000437e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004382:	a5 68       	lsl	r8,0x4
80004384:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004388:	f2 08 00 08 	add	r8,r9,r8
8000438c:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80004390:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004394:	70 08       	ld.w	r8,r8[0x0]
80004396:	a9 68       	lsl	r8,0x8
80004398:	e0 28 f0 00 	sub	r8,61440
8000439c:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800043a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800043a4:	70 19       	ld.w	r9,r8[0x4]
800043a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043aa:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800043ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800043b2:	70 19       	ld.w	r9,r8[0x4]
800043b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043b8:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800043bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800043c0:	70 19       	ld.w	r9,r8[0x4]
800043c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043c6:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
800043c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800043cc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800043d0:	f2 08 0a 48 	lsr	r8,r9,r8
800043d4:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800043d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800043dc:	58 08       	cp.w	r8,0
800043de:	cc 71       	brne	8000436c <LED_On+0x30>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800043e0:	2f cd       	sub	sp,-16
800043e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800043e6:	00 00       	add	r0,r0
800043e8:	80 00       	ld.sh	r0,r0[0x0]
800043ea:	ef 74 00 00 	stcond	r7[0],r4
800043ee:	01 30       	ld.ub	r0,r0++

800043f0 <et024006_Init>:
 *  @param cpu_hz CPU speed in Hz. This is needed for power up timings.
 *  @param hsb_hz HSB bus speed in Hz. This parameter is needed to set up the SMC.
 *  If SPI mode is used then this parameter is ignored.
 */
void et024006_Init( unsigned long cpu_hz, unsigned long hsb_hz )
{
800043f0:	eb cd 40 80 	pushm	r7,lr
800043f4:	1a 97       	mov	r7,sp
800043f6:	20 2d       	sub	sp,8
800043f8:	ef 4c ff fc 	st.w	r7[-4],r12
800043fc:	ef 4b ff f8 	st.w	r7[-8],r11
  tft_data.cpu_hz = cpu_hz;
80004400:	49 08       	lddpc	r8,80004440 <et024006_Init+0x50>
80004402:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004406:	91 09       	st.w	r8[0x0],r9
  tft_data.hsb_hz = hsb_hz;
80004408:	48 e8       	lddpc	r8,80004440 <et024006_Init+0x50>
8000440a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000440e:	91 19       	st.w	r8[0x4],r9

#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_SPI)
  et024006_InitSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
80004410:	48 c8       	lddpc	r8,80004440 <et024006_Init+0x50>
80004412:	70 18       	ld.w	r8,r8[0x4]
80004414:	10 9c       	mov	r12,r8
80004416:	f0 1f 00 0c 	mcall	80004444 <et024006_Init+0x54>
#endif
  et024006_SetupInterface();
8000441a:	f0 1f 00 0c 	mcall	80004448 <et024006_Init+0x58>
  et024006_ResetDisplay();
8000441e:	f0 1f 00 0c 	mcall	8000444c <et024006_Init+0x5c>
  et024006_AdjustGamma();
80004422:	f0 1f 00 0c 	mcall	80004450 <et024006_Init+0x60>
  et024006_GeneralSettings();
80004426:	f0 1f 00 0c 	mcall	80004454 <et024006_Init+0x64>
  et024006_InterfaceSettings();
8000442a:	f0 1f 00 0c 	mcall	80004458 <et024006_Init+0x68>
  et024006_PowerSettings();
8000442e:	f0 1f 00 0c 	mcall	8000445c <et024006_Init+0x6c>
  et024006_PowerUp();
80004432:	f0 1f 00 0c 	mcall	80004460 <et024006_Init+0x70>
  et024006_PowerOn();
80004436:	f0 1f 00 0c 	mcall	80004464 <et024006_Init+0x74>
}
8000443a:	2f ed       	sub	sp,-8
8000443c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004440:	00 00       	add	r0,r0
80004442:	06 ac       	st.w	r3++,r12
80004444:	80 00       	ld.sh	r0,r0[0x0]
80004446:	82 48       	ld.sh	r8,r1[0x8]
80004448:	80 00       	ld.sh	r0,r0[0x0]
8000444a:	4b f4       	lddpc	r4,80004544 <et024006_PrintString+0x54>
8000444c:	80 00       	ld.sh	r0,r0[0x0]
8000444e:	4c 20       	lddpc	r0,80004554 <et024006_PrintString+0x64>
80004450:	80 00       	ld.sh	r0,r0[0x0]
80004452:	4e e0       	lddpc	r0,80004608 <et024006_PrintString+0x118>
80004454:	80 00       	ld.sh	r0,r0[0x0]
80004456:	50 6e       	stdsp	sp[0x18],lr
80004458:	80 00       	ld.sh	r0,r0[0x0]
8000445a:	54 0a       	stdsp	sp[0x100],r10
8000445c:	80 00       	ld.sh	r0,r0[0x0]
8000445e:	52 7c       	stdsp	sp[0x9c],r12
80004460:	80 00       	ld.sh	r0,r0[0x0]
80004462:	54 38       	stdsp	sp[0x10c],r8
80004464:	80 00       	ld.sh	r0,r0[0x0]
80004466:	5b 6c       	cp.w	r12,-10

80004468 <et024006_DrawFilledRect>:
  }
}


void et024006_DrawFilledRect( uint16_t x, uint16_t y, uint16_t width, uint16_t height, et024006_color_t color )
{
80004468:	eb cd 40 80 	pushm	r7,lr
8000446c:	1a 97       	mov	r7,sp
8000446e:	20 7d       	sub	sp,28
80004470:	ef 5c ff f4 	st.h	r7[-12],r12
80004474:	ef 5b ff f0 	st.h	r7[-16],r11
80004478:	ef 5a ff ec 	st.h	r7[-20],r10
8000447c:	ef 59 ff e8 	st.h	r7[-24],r9
80004480:	ef 58 ff e4 	st.h	r7[-28],r8
  Assert( y < ET024006_HEIGHT );
  Assert( width > 0 );
  Assert( height > 0 );

  // Compute bottom right point.
  uint16_t x2 = x + width - 1;
80004484:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80004488:	ef 08 ff ec 	ld.sh	r8,r7[-20]
8000448c:	f2 08 00 08 	add	r8,r9,r8
80004490:	5c 88       	casts.h	r8
80004492:	20 18       	sub	r8,1
80004494:	ef 58 ff f8 	st.h	r7[-8],r8
  uint16_t y2 = y + height - 1;
80004498:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000449c:	ef 08 ff e8 	ld.sh	r8,r7[-24]
800044a0:	f2 08 00 08 	add	r8,r9,r8
800044a4:	5c 88       	casts.h	r8
800044a6:	20 18       	sub	r8,1
800044a8:	ef 58 ff fa 	st.h	r7[-6],r8
  // More sanity check.
  Assert( x2 < ET024006_WIDTH );
  Assert( y2 < ET024006_HEIGHT );

  // Set up draw area and copy pixel color until area is full.
  et024006_SetLimits( x, y, x2, y2 );
800044ac:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800044b0:	ef 1a ff f8 	ld.uh	r10,r7[-8]
800044b4:	ef 1b ff f0 	ld.uh	r11,r7[-16]
800044b8:	ef 18 ff f4 	ld.uh	r8,r7[-12]
800044bc:	10 9c       	mov	r12,r8
800044be:	f0 1f 00 0b 	mcall	800044e8 <et024006_DrawFilledRect+0x80>
  uint32_t count = (uint32_t) width * height;
800044c2:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800044c6:	ef 18 ff e8 	ld.uh	r8,r7[-24]
800044ca:	f2 08 02 48 	mul	r8,r9,r8
800044ce:	ef 48 ff fc 	st.w	r7[-4],r8
  et024006_DuplicatePixel( color, count );
800044d2:	ef 18 ff e4 	ld.uh	r8,r7[-28]
800044d6:	ee fb ff fc 	ld.w	r11,r7[-4]
800044da:	10 9c       	mov	r12,r8
800044dc:	f0 1f 00 04 	mcall	800044ec <et024006_DrawFilledRect+0x84>
}
800044e0:	2f 9d       	sub	sp,-28
800044e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800044e6:	00 00       	add	r0,r0
800044e8:	80 00       	ld.sh	r0,r0[0x0]
800044ea:	48 ee       	lddpc	lr,80004520 <et024006_PrintString+0x30>
800044ec:	80 00       	ld.sh	r0,r0[0x0]
800044ee:	4b 48       	lddpc	r8,800045bc <et024006_PrintString+0xcc>

800044f0 <et024006_PrintString>:
void et024006_PrintString(char *lcd_string, const unsigned char *font_style,
                          uint16_t x,
                          uint16_t y,
                          uint16_t fcolor,
                          int bcolor)
{
800044f0:	eb cd 40 c0 	pushm	r6-r7,lr
800044f4:	1a 97       	mov	r7,sp
800044f6:	20 9d       	sub	sp,36
800044f8:	ee c6 ff f4 	sub	r6,r7,-12
800044fc:	ef 4c ff ec 	st.w	r7[-20],r12
80004500:	ef 4b ff e8 	st.w	r7[-24],r11
80004504:	ef 5a ff e4 	st.h	r7[-28],r10
80004508:	ef 59 ff e0 	st.h	r7[-32],r9
8000450c:	ef 58 ff dc 	st.h	r7[-36],r8
  uint16_t  row, col;
  unsigned char mask = 0, xfont, yfont, font_size;
80004510:	30 08       	mov	r8,0
80004512:	ef 68 ff f4 	st.b	r7[-12],r8
  const unsigned char *data;
  uint16_t saved_x = x;
80004516:	ef 08 ff e4 	ld.sh	r8,r7[-28]
8000451a:	ef 58 ff fc 	st.h	r7[-4],r8

  // if string is empty there is nothing to do
  if( *lcd_string == '\0')
8000451e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004522:	11 88       	ld.ub	r8,r8[0x0]
80004524:	58 08       	cp.w	r8,0
80004526:	e0 80 01 a4 	breq	8000486e <et024006_PrintString+0x37e>
    return;

  data = font_style;  // point to the start of the font table
8000452a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000452e:	ef 48 ff f8 	st.w	r7[-8],r8
  xfont = *data;  // get font x width
80004532:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004536:	11 88       	ld.ub	r8,r8[0x0]
80004538:	ef 68 ff f5 	st.b	r7[-11],r8
  data++;
8000453c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004540:	2f f8       	sub	r8,-1
80004542:	ef 48 ff f8 	st.w	r7[-8],r8
  yfont = *data;  // get font y length
80004546:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000454a:	11 88       	ld.ub	r8,r8[0x0]
8000454c:	ef 68 ff f6 	st.b	r7[-10],r8
  data++;
80004550:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004554:	2f f8       	sub	r8,-1
80004556:	ef 48 ff f8 	st.w	r7[-8],r8
  font_size = *data;  // get data bytes per font
8000455a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000455e:	11 88       	ld.ub	r8,r8[0x0]
80004560:	ef 68 ff f7 	st.b	r7[-9],r8

  // If transparent mode
  if(bcolor == -1)
80004564:	6c 08       	ld.w	r8,r6[0x0]
80004566:	5b f8       	cp.w	r8,-1
80004568:	e0 81 00 c8 	brne	800046f8 <et024006_PrintString+0x208>
  {
    // set window to display size
    et024006_SetLimits( 0, 0, ET024006_WIDTH - 1, ET024006_HEIGHT - 1 );
8000456c:	e0 69 00 ef 	mov	r9,239
80004570:	e0 6a 01 3f 	mov	r10,319
80004574:	30 0b       	mov	r11,0
80004576:	30 0c       	mov	r12,0
80004578:	f0 1f 00 c0 	mcall	80004878 <et024006_PrintString+0x388>

    do
    {
      if(*lcd_string =='\n') {
8000457c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004580:	11 89       	ld.ub	r9,r8[0x0]
80004582:	30 a8       	mov	r8,10
80004584:	f0 09 18 00 	cp.b	r9,r8
80004588:	c1 31       	brne	800045ae <et024006_PrintString+0xbe>
        x = saved_x;
8000458a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000458e:	ef 58 ff e4 	st.h	r7[-28],r8
        y += yfont;
80004592:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004596:	ef 09 ff e0 	ld.sh	r9,r7[-32]
8000459a:	f2 08 00 08 	add	r8,r9,r8
8000459e:	ef 58 ff e0 	st.h	r7[-32],r8
        lcd_string++;  // next character in string
800045a2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045a6:	2f f8       	sub	r8,-1
800045a8:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
800045ac:	c9 f8       	rjmp	800046ea <et024006_PrintString+0x1fa>
      } else if(*lcd_string =='\t') {
800045ae:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045b2:	11 89       	ld.ub	r9,r8[0x0]
800045b4:	30 98       	mov	r8,9
800045b6:	f0 09 18 00 	cp.b	r9,r8
800045ba:	c0 f1       	brne	800045d8 <et024006_PrintString+0xe8>
        x += xfont;
800045bc:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800045c0:	ef 09 ff e4 	ld.sh	r9,r7[-28]
800045c4:	f2 08 00 08 	add	r8,r9,r8
800045c8:	ef 58 ff e4 	st.h	r7[-28],r8
        lcd_string++;  // next character in string
800045cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045d0:	2f f8       	sub	r8,-1
800045d2:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
800045d6:	c8 a8       	rjmp	800046ea <et024006_PrintString+0x1fa>
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
800045d8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045dc:	11 89       	ld.ub	r9,r8[0x0]
800045de:	31 f8       	mov	r8,31
800045e0:	f0 09 18 00 	cp.b	r9,r8
800045e4:	e0 88 00 1d 	brls	8000461e <et024006_PrintString+0x12e>
800045e8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045ec:	11 88       	ld.ub	r8,r8[0x0]
800045ee:	10 99       	mov	r9,r8
800045f0:	30 08       	mov	r8,0
800045f2:	f0 09 18 00 	cp.b	r9,r8
800045f6:	c1 45       	brlt	8000461e <et024006_PrintString+0x12e>
      {
        // point to character data in font table
        data =  (font_style + font_size) +  // header offset
800045f8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
          (font_size * (int)(*lcd_string - 32)); // character select
800045fc:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80004600:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004604:	11 88       	ld.ub	r8,r8[0x0]
80004606:	22 08       	sub	r8,32
80004608:	f4 08 02 48 	mul	r8,r10,r8
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
      {
        // point to character data in font table
        data =  (font_style + font_size) +  // header offset
8000460c:	f2 08 00 08 	add	r8,r9,r8
80004610:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004614:	f2 08 00 08 	add	r8,r9,r8
80004618:	ef 48 ff f8 	st.w	r7[-8],r8
        x += xfont;
        lcd_string++;  // next character in string
        continue;
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
8000461c:	c1 28       	rjmp	80004640 <et024006_PrintString+0x150>
        data =  (font_style + font_size) +  // header offset
          (font_size * (int)(*lcd_string - 32)); // character select
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;
8000461e:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80004622:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80004626:	12 98       	mov	r8,r9
80004628:	a1 78       	lsl	r8,0x1
8000462a:	12 08       	add	r8,r9
8000462c:	a5 78       	lsl	r8,0x5
8000462e:	12 18       	sub	r8,r9
80004630:	f4 08 00 08 	add	r8,r10,r8
80004634:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004638:	f2 08 00 08 	add	r8,r9,r8
8000463c:	ef 48 ff f8 	st.w	r7[-8],r8

      for (row = y; row < (y + yfont); row++)
80004640:	ef 08 ff e0 	ld.sh	r8,r7[-32]
80004644:	ef 58 ff f0 	st.h	r7[-16],r8
80004648:	c3 a8       	rjmp	800046bc <et024006_PrintString+0x1cc>
      {
        mask = 0x80;
8000464a:	38 08       	mov	r8,-128
8000464c:	ef 68 ff f4 	st.b	r7[-12],r8
        for (col = x; col < (x + xfont); col++)
80004650:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80004654:	ef 58 ff f2 	st.h	r7[-14],r8
80004658:	c1 e8       	rjmp	80004694 <et024006_PrintString+0x1a4>
        {
          if (*data & mask) // if pixel data then put dot
8000465a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000465e:	11 89       	ld.ub	r9,r8[0x0]
80004660:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004664:	f3 e8 00 08 	and	r8,r9,r8
80004668:	5c 58       	castu.b	r8
8000466a:	c0 b0       	breq	80004680 <et024006_PrintString+0x190>
          {
            et024006_DrawQuickPixel( col, row, fcolor );
8000466c:	ef 1a ff dc 	ld.uh	r10,r7[-36]
80004670:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80004674:	ef 18 ff f2 	ld.uh	r8,r7[-14]
80004678:	12 9b       	mov	r11,r9
8000467a:	10 9c       	mov	r12,r8
8000467c:	f0 1f 00 80 	mcall	8000487c <et024006_PrintString+0x38c>
          }
          mask >>= 1;
80004680:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004684:	a1 98       	lsr	r8,0x1
80004686:	ef 68 ff f4 	st.b	r7[-12],r8
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
8000468a:	ef 08 ff f2 	ld.sh	r8,r7[-14]
8000468e:	2f f8       	sub	r8,-1
80004690:	ef 58 ff f2 	st.h	r7[-14],r8
80004694:	ef 19 ff f2 	ld.uh	r9,r7[-14]
80004698:	ef 1a ff e4 	ld.uh	r10,r7[-28]
8000469c:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800046a0:	f4 08 00 08 	add	r8,r10,r8
800046a4:	10 39       	cp.w	r9,r8
800046a6:	cd a5       	brlt	8000465a <et024006_PrintString+0x16a>
            et024006_DrawQuickPixel( col, row, fcolor );
          }
          mask >>= 1;
        }
        // Next row data
        data++;
800046a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046ac:	2f f8       	sub	r8,-1
800046ae:	ef 48 ff f8 	st.w	r7[-8],r8
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
800046b2:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800046b6:	2f f8       	sub	r8,-1
800046b8:	ef 58 ff f0 	st.h	r7[-16],r8
800046bc:	ef 19 ff f0 	ld.uh	r9,r7[-16]
800046c0:	ef 1a ff e0 	ld.uh	r10,r7[-32]
800046c4:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800046c8:	f4 08 00 08 	add	r8,r10,r8
800046cc:	10 39       	cp.w	r9,r8
800046ce:	cb e5       	brlt	8000464a <et024006_PrintString+0x15a>
        }
        // Next row data
        data++;
      }
      // move to next character start pixel
      x += xfont;
800046d0:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800046d4:	ef 09 ff e4 	ld.sh	r9,r7[-28]
800046d8:	f2 08 00 08 	add	r8,r9,r8
800046dc:	ef 58 ff e4 	st.h	r7[-28],r8
      lcd_string++;  // next character in string
800046e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800046e4:	2f f8       	sub	r8,-1
800046e6:	ef 48 ff ec 	st.w	r7[-20],r8

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
800046ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
800046ee:	11 88       	ld.ub	r8,r8[0x0]
800046f0:	58 08       	cp.w	r8,0
800046f2:	fe 91 ff 45 	brne	8000457c <et024006_PrintString+0x8c>
800046f6:	cb d8       	rjmp	80004870 <et024006_PrintString+0x380>
  }
  else
  {
    do
    {
      if(*lcd_string =='\n') {
800046f8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800046fc:	11 89       	ld.ub	r9,r8[0x0]
800046fe:	30 a8       	mov	r8,10
80004700:	f0 09 18 00 	cp.b	r9,r8
80004704:	c1 31       	brne	8000472a <et024006_PrintString+0x23a>
        x = saved_x;
80004706:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000470a:	ef 58 ff e4 	st.h	r7[-28],r8
        y += yfont;
8000470e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004712:	ef 09 ff e0 	ld.sh	r9,r7[-32]
80004716:	f2 08 00 08 	add	r8,r9,r8
8000471a:	ef 58 ff e0 	st.h	r7[-32],r8
        lcd_string++;  // next character in string
8000471e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004722:	2f f8       	sub	r8,-1
80004724:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
80004728:	c9 c8       	rjmp	80004860 <et024006_PrintString+0x370>
      } else if(*lcd_string =='\t') {
8000472a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000472e:	11 89       	ld.ub	r9,r8[0x0]
80004730:	30 98       	mov	r8,9
80004732:	f0 09 18 00 	cp.b	r9,r8
80004736:	c0 f1       	brne	80004754 <et024006_PrintString+0x264>
        x += xfont;
80004738:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000473c:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004740:	f2 08 00 08 	add	r8,r9,r8
80004744:	ef 58 ff e4 	st.h	r7[-28],r8
        lcd_string++;  // next character in string
80004748:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000474c:	2f f8       	sub	r8,-1
8000474e:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
80004752:	c8 78       	rjmp	80004860 <et024006_PrintString+0x370>
      }
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
80004754:	ef 39 ff f7 	ld.ub	r9,r7[-9]
        (font_size * (int)(*lcd_string - 32)); // character select
80004758:	ef 3a ff f7 	ld.ub	r10,r7[-9]
8000475c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004760:	11 88       	ld.ub	r8,r8[0x0]
80004762:	22 08       	sub	r8,32
80004764:	f4 08 02 48 	mul	r8,r10,r8
        x += xfont;
        lcd_string++;  // next character in string
        continue;
      }
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
80004768:	f2 08 00 08 	add	r8,r9,r8
8000476c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004770:	f2 08 00 08 	add	r8,r9,r8
80004774:	ef 48 ff f8 	st.w	r7[-8],r8
        (font_size * (int)(*lcd_string - 32)); // character select

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
80004778:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000477c:	ef 09 ff e0 	ld.sh	r9,r7[-32]
80004780:	f2 08 00 08 	add	r8,r9,r8
80004784:	5c 88       	casts.h	r8
80004786:	20 18       	sub	r8,1
80004788:	5c 88       	casts.h	r8
8000478a:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
8000478e:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004792:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004796:	f2 08 00 08 	add	r8,r9,r8
8000479a:	5c 88       	casts.h	r8
8000479c:	20 18       	sub	r8,1
8000479e:	5c 88       	casts.h	r8
800047a0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800047a4:	ef 1b ff e0 	ld.uh	r11,r7[-32]
800047a8:	ef 18 ff e4 	ld.uh	r8,r7[-28]
800047ac:	18 99       	mov	r9,r12
800047ae:	10 9c       	mov	r12,r8
800047b0:	f0 1f 00 32 	mcall	80004878 <et024006_PrintString+0x388>
800047b4:	32 28       	mov	r8,34
800047b6:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800047ba:	fc 19 c0 00 	movh	r9,0xc000
800047be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800047c2:	b2 08       	st.h	r9[0x0],r8

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
800047c4:	30 08       	mov	r8,0
800047c6:	ef 58 ff f0 	st.h	r7[-16],r8
800047ca:	c3 78       	rjmp	80004838 <et024006_PrintString+0x348>
      {
        mask = 0x80;
800047cc:	38 08       	mov	r8,-128
800047ce:	ef 68 ff f4 	st.b	r7[-12],r8
        for (col = 0; col < xfont; col++)
800047d2:	30 08       	mov	r8,0
800047d4:	ef 58 ff f2 	st.h	r7[-14],r8
800047d8:	c1 f8       	rjmp	80004816 <et024006_PrintString+0x326>
        {
          if (*data & mask) // if pixel data then put dot
800047da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047de:	11 89       	ld.ub	r9,r8[0x0]
800047e0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800047e4:	f3 e8 00 08 	and	r8,r9,r8
800047e8:	5c 58       	castu.b	r8
800047ea:	c0 70       	breq	800047f8 <et024006_PrintString+0x308>
          {
            *ET024006_PARAM_ADDR = fcolor;
800047ec:	fc 19 c0 20 	movh	r9,0xc020
800047f0:	ef 08 ff dc 	ld.sh	r8,r7[-36]
800047f4:	b2 08       	st.h	r9[0x0],r8
800047f6:	c0 68       	rjmp	80004802 <et024006_PrintString+0x312>
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
800047f8:	fc 19 c0 20 	movh	r9,0xc020
800047fc:	6c 08       	ld.w	r8,r6[0x0]
800047fe:	5c 88       	casts.h	r8
80004800:	b2 08       	st.h	r9[0x0],r8
          }
          mask >>= 1;
80004802:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004806:	a1 98       	lsr	r8,0x1
80004808:	ef 68 ff f4 	st.b	r7[-12],r8
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
8000480c:	ef 08 ff f2 	ld.sh	r8,r7[-14]
80004810:	2f f8       	sub	r8,-1
80004812:	ef 58 ff f2 	st.h	r7[-14],r8
80004816:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000481a:	ef 09 ff f2 	ld.sh	r9,r7[-14]
8000481e:	f0 09 19 00 	cp.h	r9,r8
80004822:	cd c3       	brcs	800047da <et024006_PrintString+0x2ea>
          }
          mask >>= 1;
        }

        // Next row data
        data++;
80004824:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004828:	2f f8       	sub	r8,-1
8000482a:	ef 48 ff f8 	st.w	r7[-8],r8

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
8000482e:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004832:	2f f8       	sub	r8,-1
80004834:	ef 58 ff f0 	st.h	r7[-16],r8
80004838:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000483c:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80004840:	f0 09 19 00 	cp.h	r9,r8
80004844:	cc 43       	brcs	800047cc <et024006_PrintString+0x2dc>

        // Next row data
        data++;
      }
      // move to next character start pixel
      x += xfont;
80004846:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000484a:	ef 09 ff e4 	ld.sh	r9,r7[-28]
8000484e:	f2 08 00 08 	add	r8,r9,r8
80004852:	ef 58 ff e4 	st.h	r7[-28],r8
      lcd_string++;  // next character in string
80004856:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000485a:	2f f8       	sub	r8,-1
8000485c:	ef 48 ff ec 	st.w	r7[-20],r8

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
80004860:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004864:	11 88       	ld.ub	r8,r8[0x0]
80004866:	58 08       	cp.w	r8,0
80004868:	fe 91 ff 48 	brne	800046f8 <et024006_PrintString+0x208>
8000486c:	c0 28       	rjmp	80004870 <et024006_PrintString+0x380>
  const unsigned char *data;
  uint16_t saved_x = x;

  // if string is empty there is nothing to do
  if( *lcd_string == '\0')
    return;
8000486e:	d7 03       	nop
      x += xfont;
      lcd_string++;  // next character in string

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
  }
}
80004870:	2f 7d       	sub	sp,-36
80004872:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004876:	00 00       	add	r0,r0
80004878:	80 00       	ld.sh	r0,r0[0x0]
8000487a:	48 ee       	lddpc	lr,800048b0 <et024006_SetRegister+0x30>
8000487c:	80 00       	ld.sh	r0,r0[0x0]
8000487e:	4a f8       	lddpc	r8,80004938 <et024006_SetLimits+0x4a>

80004880 <et024006_SetRegister>:
#endif

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
80004880:	eb cd 40 80 	pushm	r7,lr
80004884:	1a 97       	mov	r7,sp
80004886:	20 3d       	sub	sp,12
80004888:	18 99       	mov	r9,r12
8000488a:	16 98       	mov	r8,r11
8000488c:	ef 69 ff f8 	st.b	r7[-8],r9
80004890:	ef 68 ff f4 	st.b	r7[-12],r8
  uint8_t value = et024006_ReadRegister( address );
80004894:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004898:	ef 68 ff fd 	st.b	r7[-3],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ uint8_t et024006_ReadRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000489c:	fc 19 c0 00 	movh	r9,0xc000
800048a0:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800048a4:	b2 08       	st.h	r9[0x0],r8
  return *ET024006_PARAM_ADDR;
800048a6:	fc 18 c0 20 	movh	r8,0xc020
800048aa:	90 08       	ld.sh	r8,r8[0x0]
800048ac:	5c 88       	casts.h	r8
800048ae:	5c 58       	castu.b	r8

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
800048b0:	ef 68 ff fc 	st.b	r7[-4],r8
  value |= bitmask;
800048b4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800048b8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800048bc:	f3 e8 10 08 	or	r8,r9,r8
800048c0:	ef 68 ff fc 	st.b	r7[-4],r8
  et024006_WriteRegister( address, value );
800048c4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800048c8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800048cc:	ef 69 ff ff 	st.b	r7[-1],r9
800048d0:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800048d4:	fc 19 c0 00 	movh	r9,0xc000
800048d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800048dc:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800048de:	fc 19 c0 20 	movh	r9,0xc020
800048e2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800048e6:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
  value |= bitmask;
  et024006_WriteRegister( address, value );
}
800048e8:	2f dd       	sub	sp,-12
800048ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800048ee <et024006_SetLimits>:
/*! \brief Sets the display limits according to the corner coordinates.
 *  Writing to the display will result in writing to the area specified through
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
800048ee:	eb cd 40 80 	pushm	r7,lr
800048f2:	1a 97       	mov	r7,sp
800048f4:	20 8d       	sub	sp,32
800048f6:	12 98       	mov	r8,r9
800048f8:	18 99       	mov	r9,r12
800048fa:	ef 59 ff ec 	st.h	r7[-20],r9
800048fe:	16 99       	mov	r9,r11
80004900:	ef 59 ff e8 	st.h	r7[-24],r9
80004904:	14 99       	mov	r9,r10
80004906:	ef 59 ff e4 	st.h	r7[-28],r9
8000490a:	ef 58 ff e0 	st.h	r7[-32],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
8000490e:	ef 18 ff ec 	ld.uh	r8,r7[-20]
80004912:	a9 88       	lsr	r8,0x8
80004914:	5c 88       	casts.h	r8
80004916:	5c 58       	castu.b	r8
80004918:	30 29       	mov	r9,2
8000491a:	ef 69 ff f1 	st.b	r7[-15],r9
8000491e:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004922:	fc 19 c0 00 	movh	r9,0xc000
80004926:	ef 38 ff f1 	ld.ub	r8,r7[-15]
8000492a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000492c:	fc 19 c0 20 	movh	r9,0xc020
80004930:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80004934:	b2 08       	st.h	r9[0x0],r8
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
80004936:	ef 08 ff ec 	ld.sh	r8,r7[-20]
8000493a:	5c 58       	castu.b	r8
8000493c:	30 39       	mov	r9,3
8000493e:	ef 69 ff f3 	st.b	r7[-13],r9
80004942:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004946:	fc 19 c0 00 	movh	r9,0xc000
8000494a:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000494e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004950:	fc 19 c0 20 	movh	r9,0xc020
80004954:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80004958:	b2 08       	st.h	r9[0x0],r8
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
8000495a:	ef 18 ff e4 	ld.uh	r8,r7[-28]
8000495e:	a9 88       	lsr	r8,0x8
80004960:	5c 88       	casts.h	r8
80004962:	5c 58       	castu.b	r8
80004964:	30 49       	mov	r9,4
80004966:	ef 69 ff f5 	st.b	r7[-11],r9
8000496a:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000496e:	fc 19 c0 00 	movh	r9,0xc000
80004972:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004976:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004978:	fc 19 c0 20 	movh	r9,0xc020
8000497c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004980:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
80004982:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80004986:	5c 58       	castu.b	r8
80004988:	30 59       	mov	r9,5
8000498a:	ef 69 ff f7 	st.b	r7[-9],r9
8000498e:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004992:	fc 19 c0 00 	movh	r9,0xc000
80004996:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000499a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000499c:	fc 19 c0 20 	movh	r9,0xc020
800049a0:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800049a4:	b2 08       	st.h	r9[0x0],r8
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
800049a6:	ef 18 ff e8 	ld.uh	r8,r7[-24]
800049aa:	a9 88       	lsr	r8,0x8
800049ac:	5c 88       	casts.h	r8
800049ae:	5c 58       	castu.b	r8
800049b0:	30 69       	mov	r9,6
800049b2:	ef 69 ff f9 	st.b	r7[-7],r9
800049b6:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800049ba:	fc 19 c0 00 	movh	r9,0xc000
800049be:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800049c2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800049c4:	fc 19 c0 20 	movh	r9,0xc020
800049c8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800049cc:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
800049ce:	ef 08 ff e8 	ld.sh	r8,r7[-24]
800049d2:	5c 58       	castu.b	r8
800049d4:	30 79       	mov	r9,7
800049d6:	ef 69 ff fb 	st.b	r7[-5],r9
800049da:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800049de:	fc 19 c0 00 	movh	r9,0xc000
800049e2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800049e6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800049e8:	fc 19 c0 20 	movh	r9,0xc020
800049ec:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800049f0:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
800049f2:	ef 18 ff e0 	ld.uh	r8,r7[-32]
800049f6:	a9 88       	lsr	r8,0x8
800049f8:	5c 88       	casts.h	r8
800049fa:	5c 58       	castu.b	r8
800049fc:	30 89       	mov	r9,8
800049fe:	ef 69 ff fd 	st.b	r7[-3],r9
80004a02:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a06:	fc 19 c0 00 	movh	r9,0xc000
80004a0a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004a0e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004a10:	fc 19 c0 20 	movh	r9,0xc020
80004a14:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004a18:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
80004a1a:	ef 08 ff e0 	ld.sh	r8,r7[-32]
80004a1e:	5c 58       	castu.b	r8
80004a20:	30 99       	mov	r9,9
80004a22:	ef 69 ff ff 	st.b	r7[-1],r9
80004a26:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a2a:	fc 19 c0 00 	movh	r9,0xc000
80004a2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004a32:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004a34:	fc 19 c0 20 	movh	r9,0xc020
80004a38:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004a3c:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
}
80004a3e:	2f 8d       	sub	sp,-32
80004a40:	e3 cd 80 80 	ldm	sp++,r7,pc

80004a44 <et024006_SetQuickLimits>:

/*! \brief Set the starting point of the next read/write from/to RAM.
 *  This sets only the start point of the RAM window.
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
80004a44:	eb cd 40 80 	pushm	r7,lr
80004a48:	1a 97       	mov	r7,sp
80004a4a:	20 4d       	sub	sp,16
80004a4c:	18 99       	mov	r9,r12
80004a4e:	16 98       	mov	r8,r11
80004a50:	ef 59 ff f4 	st.h	r7[-12],r9
80004a54:	ef 58 ff f0 	st.h	r7[-16],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
80004a58:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80004a5c:	a9 88       	lsr	r8,0x8
80004a5e:	5c 88       	casts.h	r8
80004a60:	5c 58       	castu.b	r8
80004a62:	30 29       	mov	r9,2
80004a64:	ef 69 ff f9 	st.b	r7[-7],r9
80004a68:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a6c:	fc 19 c0 00 	movh	r9,0xc000
80004a70:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004a74:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004a76:	fc 19 c0 20 	movh	r9,0xc020
80004a7a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004a7e:	b2 08       	st.h	r9[0x0],r8
 *  This sets only the start point of the RAM window.
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
80004a80:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80004a84:	5c 58       	castu.b	r8
80004a86:	30 39       	mov	r9,3
80004a88:	ef 69 ff fb 	st.b	r7[-5],r9
80004a8c:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a90:	fc 19 c0 00 	movh	r9,0xc000
80004a94:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004a98:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004a9a:	fc 19 c0 20 	movh	r9,0xc020
80004a9e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004aa2:	b2 08       	st.h	r9[0x0],r8
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
80004aa4:	ef 18 ff f0 	ld.uh	r8,r7[-16]
80004aa8:	a9 88       	lsr	r8,0x8
80004aaa:	5c 88       	casts.h	r8
80004aac:	5c 58       	castu.b	r8
80004aae:	30 69       	mov	r9,6
80004ab0:	ef 69 ff fd 	st.b	r7[-3],r9
80004ab4:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004ab8:	fc 19 c0 00 	movh	r9,0xc000
80004abc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004ac0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004ac2:	fc 19 c0 20 	movh	r9,0xc020
80004ac6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004aca:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y & 0xff) );
80004acc:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004ad0:	5c 58       	castu.b	r8
80004ad2:	30 79       	mov	r9,7
80004ad4:	ef 69 ff ff 	st.b	r7[-1],r9
80004ad8:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004adc:	fc 19 c0 00 	movh	r9,0xc000
80004ae0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004ae4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004ae6:	fc 19 c0 20 	movh	r9,0xc020
80004aea:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004aee:	b2 08       	st.h	r9[0x0],r8
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y & 0xff) );
}
80004af0:	2f cd       	sub	sp,-16
80004af2:	e3 cd 80 80 	ldm	sp++,r7,pc
80004af6:	d7 03       	nop

80004af8 <et024006_DrawQuickPixel>:


static void et024006_DrawQuickPixel( uint16_t x, uint16_t y, et024006_color_t color )
{
80004af8:	eb cd 40 80 	pushm	r7,lr
80004afc:	1a 97       	mov	r7,sp
80004afe:	20 4d       	sub	sp,16
80004b00:	16 99       	mov	r9,r11
80004b02:	14 98       	mov	r8,r10
80004b04:	18 9a       	mov	r10,r12
80004b06:	ef 5a ff f8 	st.h	r7[-8],r10
80004b0a:	ef 59 ff f4 	st.h	r7[-12],r9
80004b0e:	ef 58 ff f0 	st.h	r7[-16],r8
  // Sanity check on parameters.
  Assert( x < ET024006_WIDTH );
  Assert( y < ET024006_HEIGHT );

  // Set up draw area and write the two bytes of pixel data.
  et024006_SetQuickLimits( x, y );
80004b12:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80004b16:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80004b1a:	12 9b       	mov	r11,r9
80004b1c:	10 9c       	mov	r12,r8
80004b1e:	f0 1f 00 0a 	mcall	80004b44 <et024006_DrawQuickPixel+0x4c>
80004b22:	32 28       	mov	r8,34
80004b24:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004b28:	fc 19 c0 00 	movh	r9,0xc000
80004b2c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004b30:	b2 08       	st.h	r9[0x0],r8
  et024006_SendSPI( color & 0xff );
  et024006_SendSPI( color >> 8 );
  et024006_DeselectSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  *ET024006_PARAM_ADDR = color;
80004b32:	fc 19 c0 20 	movh	r9,0xc020
80004b36:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004b3a:	b2 08       	st.h	r9[0x0],r8
#endif

}
80004b3c:	2f cd       	sub	sp,-16
80004b3e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b42:	00 00       	add	r0,r0
80004b44:	80 00       	ld.sh	r0,r0[0x0]
80004b46:	4a 44       	lddpc	r4,80004bd4 <et024006_DuplicatePixel+0x8c>

80004b48 <et024006_DuplicatePixel>:


/* --- Pixel block operations --- */

static void et024006_DuplicatePixel( et024006_color_t color, uint32_t count )
{
80004b48:	eb cd 40 80 	pushm	r7,lr
80004b4c:	1a 97       	mov	r7,sp
80004b4e:	20 3d       	sub	sp,12
80004b50:	18 98       	mov	r8,r12
80004b52:	ef 4b ff f4 	st.w	r7[-12],r11
80004b56:	ef 58 ff f8 	st.h	r7[-8],r8
80004b5a:	32 28       	mov	r8,34
80004b5c:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004b60:	fc 19 c0 00 	movh	r9,0xc000
80004b64:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004b68:	b2 08       	st.h	r9[0x0],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80004b6a:	c2 e8       	rjmp	80004bc6 <et024006_DuplicatePixel+0x7e>
    *ET024006_PARAM_ADDR = color;
80004b6c:	fc 19 c0 20 	movh	r9,0xc020
80004b70:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b74:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004b76:	fc 19 c0 20 	movh	r9,0xc020
80004b7a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b7e:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004b80:	fc 19 c0 20 	movh	r9,0xc020
80004b84:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b88:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004b8a:	fc 19 c0 20 	movh	r9,0xc020
80004b8e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b92:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004b94:	fc 19 c0 20 	movh	r9,0xc020
80004b98:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b9c:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004b9e:	fc 19 c0 20 	movh	r9,0xc020
80004ba2:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004ba6:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004ba8:	fc 19 c0 20 	movh	r9,0xc020
80004bac:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bb0:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004bb2:	fc 19 c0 20 	movh	r9,0xc020
80004bb6:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bba:	b2 08       	st.h	r9[0x0],r8
    count-=8;
80004bbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bc0:	20 88       	sub	r8,8
80004bc2:	ef 48 ff f4 	st.w	r7[-12],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80004bc6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bca:	58 78       	cp.w	r8,7
80004bcc:	fe 9b ff d0 	brhi	80004b6c <et024006_DuplicatePixel+0x24>
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80004bd0:	c0 b8       	rjmp	80004be6 <et024006_DuplicatePixel+0x9e>
    *ET024006_PARAM_ADDR = color;
80004bd2:	fc 19 c0 20 	movh	r9,0xc020
80004bd6:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bda:	b2 08       	st.h	r9[0x0],r8
    --count;
80004bdc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004be0:	20 18       	sub	r8,1
80004be2:	ef 48 ff f4 	st.w	r7[-12],r8
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80004be6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bea:	58 08       	cp.w	r8,0
80004bec:	cf 31       	brne	80004bd2 <et024006_DuplicatePixel+0x8a>
    }
  }

  et024006_DeselectSPI();
#endif
}
80004bee:	2f dd       	sub	sp,-12
80004bf0:	e3 cd 80 80 	ldm	sp++,r7,pc

80004bf4 <et024006_SetupInterface>:
                SPI_MASTER_bm);          // in master mode
}
#endif

static void et024006_SetupInterface( void )
{
80004bf4:	eb cd 40 80 	pushm	r7,lr
80004bf8:	1a 97       	mov	r7,sp

  // et024006_TE (tearing sync) signal from display is input
  // without any pull resistors
  gpio_enable_gpio_pin(ET024006DHU_TE_PIN);
80004bfa:	30 0c       	mov	r12,0
80004bfc:	f0 1f 00 06 	mcall	80004c14 <et024006_SetupInterface+0x20>

  // Backlight pin (PWM) for display is output
  gpio_enable_module_pin(ET024006DHU_BL_PIN, ET024006DHU_BL_FUNCTION);
80004c00:	30 2b       	mov	r11,2
80004c02:	30 9c       	mov	r12,9
80004c04:	f0 1f 00 05 	mcall	80004c18 <et024006_SetupInterface+0x24>
  // Turns backlight ON
  /*TODO Add backlight driver */

  // Reset pin for display is output
  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80004c08:	34 2c       	mov	r12,66
80004c0a:	f0 1f 00 05 	mcall	80004c1c <et024006_SetupInterface+0x28>
}
80004c0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c12:	00 00       	add	r0,r0
80004c14:	80 00       	ld.sh	r0,r0[0x0]
80004c16:	8e 28       	ld.sh	r8,r7[0x4]
80004c18:	80 00       	ld.sh	r0,r0[0x0]
80004c1a:	8d 18       	st.w	r6[0x4],r8
80004c1c:	80 00       	ld.sh	r0,r0[0x0]
80004c1e:	90 9a       	ld.uh	r10,r8[0x2]

80004c20 <et024006_ResetDisplay>:

/*! \brief Does a hard reset of the display.
 */
static void et024006_ResetDisplay( void )
{
80004c20:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80004c24:	1a 97       	mov	r7,sp
80004c26:	21 ad       	sub	sp,104
  // clear reset line
  gpio_clr_gpio_pin(ET024006DHU_RESET_PIN);
80004c28:	34 2c       	mov	r12,66
80004c2a:	f0 1f 00 aa 	mcall	80004ed0 <et024006_ResetDisplay+0x2b0>
  // 50us delay
  cpu_delay_us( 50, tft_data.cpu_hz );
80004c2e:	fe f8 02 a6 	ld.w	r8,pc[678]
80004c32:	70 08       	ld.w	r8,r8[0x0]
80004c34:	33 29       	mov	r9,50
80004c36:	ef 49 ff c4 	st.w	r7[-60],r9
80004c3a:	ef 48 ff c0 	st.w	r7[-64],r8
80004c3e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80004c42:	ef 48 ff cc 	st.w	r7[-52],r8
80004c46:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004c4a:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80004c4e:	ee fc ff cc 	ld.w	r12,r7[-52]
80004c52:	ef 4c ff a4 	st.w	r7[-92],r12
80004c56:	30 0b       	mov	r11,0
80004c58:	ef 4b ff a0 	st.w	r7[-96],r11
80004c5c:	ee f9 ff c8 	ld.w	r9,r7[-56]
80004c60:	ef 49 ff 9c 	st.w	r7[-100],r9
80004c64:	30 08       	mov	r8,0
80004c66:	ef 48 ff 98 	st.w	r7[-104],r8
80004c6a:	ee fa ff a0 	ld.w	r10,r7[-96]
80004c6e:	ee fc ff 9c 	ld.w	r12,r7[-100]
80004c72:	b9 3a       	mul	r10,r12
80004c74:	ee f8 ff 98 	ld.w	r8,r7[-104]
80004c78:	ee fb ff a4 	ld.w	r11,r7[-92]
80004c7c:	b7 38       	mul	r8,r11
80004c7e:	10 0a       	add	r10,r8
80004c80:	ee fc ff a4 	ld.w	r12,r7[-92]
80004c84:	ee fb ff 9c 	ld.w	r11,r7[-100]
80004c88:	f8 0b 06 48 	mulu.d	r8,r12,r11
80004c8c:	12 0a       	add	r10,r9
80004c8e:	14 99       	mov	r9,r10
80004c90:	ee 7a 42 3f 	mov	r10,999999
80004c94:	30 0b       	mov	r11,0
80004c96:	f0 0a 00 0a 	add	r10,r8,r10
80004c9a:	f2 0b 00 4b 	adc	r11,r9,r11
80004c9e:	ee 78 42 40 	mov	r8,1000000
80004ca2:	30 09       	mov	r9,0
80004ca4:	f0 1f 00 8d 	mcall	80004ed8 <et024006_ResetDisplay+0x2b8>
80004ca8:	14 98       	mov	r8,r10
80004caa:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80004cac:	ef 48 ff d4 	st.w	r7[-44],r8
80004cb0:	ee c8 00 58 	sub	r8,r7,88
80004cb4:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004cb8:	e1 b8 00 42 	mfsr	r8,0x108
80004cbc:	10 99       	mov	r9,r8
80004cbe:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004cc2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004cc4:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004cc8:	70 09       	ld.w	r9,r8[0x0]
80004cca:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004cce:	10 09       	add	r9,r8
80004cd0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004cd4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004cd6:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004cda:	30 08       	mov	r8,0
80004cdc:	f3 68 00 08 	st.b	r9[8],r8
80004ce0:	ee c8 00 58 	sub	r8,r7,88
80004ce4:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004ce8:	e1 b8 00 42 	mfsr	r8,0x108
80004cec:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004cf0:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004cf4:	f1 39 00 08 	ld.ub	r9,r8[8]
80004cf8:	30 28       	mov	r8,2
80004cfa:	f0 09 18 00 	cp.b	r9,r8
80004cfe:	c0 31       	brne	80004d04 <et024006_ResetDisplay+0xe4>
    return false;
80004d00:	30 08       	mov	r8,0
80004d02:	c4 38       	rjmp	80004d88 <et024006_ResetDisplay+0x168>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004d04:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d08:	f1 39 00 08 	ld.ub	r9,r8[8]
80004d0c:	30 18       	mov	r8,1
80004d0e:	f0 09 18 00 	cp.b	r9,r8
80004d12:	c0 31       	brne	80004d18 <et024006_ResetDisplay+0xf8>
    return true;
80004d14:	30 18       	mov	r8,1
80004d16:	c3 98       	rjmp	80004d88 <et024006_ResetDisplay+0x168>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004d18:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d1c:	70 09       	ld.w	r9,r8[0x0]
80004d1e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d22:	70 18       	ld.w	r8,r8[0x4]
80004d24:	10 39       	cp.w	r9,r8
80004d26:	e0 88 00 1a 	brls	80004d5a <et024006_ResetDisplay+0x13a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004d2a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d2e:	70 08       	ld.w	r8,r8[0x0]
80004d30:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004d34:	10 39       	cp.w	r9,r8
80004d36:	c1 02       	brcc	80004d56 <et024006_ResetDisplay+0x136>
80004d38:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d3c:	70 18       	ld.w	r8,r8[0x4]
80004d3e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004d42:	10 39       	cp.w	r9,r8
80004d44:	e0 88 00 09 	brls	80004d56 <et024006_ResetDisplay+0x136>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004d48:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004d4c:	30 18       	mov	r8,1
80004d4e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004d52:	30 18       	mov	r8,1
80004d54:	c1 a8       	rjmp	80004d88 <et024006_ResetDisplay+0x168>
    }
    return false;
80004d56:	30 08       	mov	r8,0
80004d58:	c1 88       	rjmp	80004d88 <et024006_ResetDisplay+0x168>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004d5a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d5e:	70 08       	ld.w	r8,r8[0x0]
80004d60:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004d64:	10 39       	cp.w	r9,r8
80004d66:	c0 93       	brcs	80004d78 <et024006_ResetDisplay+0x158>
80004d68:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d6c:	70 18       	ld.w	r8,r8[0x4]
80004d6e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004d72:	10 39       	cp.w	r9,r8
80004d74:	e0 88 00 09 	brls	80004d86 <et024006_ResetDisplay+0x166>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004d78:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004d7c:	30 18       	mov	r8,1
80004d7e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004d82:	30 18       	mov	r8,1
80004d84:	c0 28       	rjmp	80004d88 <et024006_ResetDisplay+0x168>
    }
    return false;
80004d86:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004d88:	58 08       	cp.w	r8,0
80004d8a:	ca b0       	breq	80004ce0 <et024006_ResetDisplay+0xc0>

  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80004d8c:	34 2c       	mov	r12,66
80004d8e:	f0 1f 00 54 	mcall	80004edc <et024006_ResetDisplay+0x2bc>
  // 5ms delay
  cpu_delay_ms( 5, tft_data.cpu_hz );
80004d92:	4d 18       	lddpc	r8,80004ed4 <et024006_ResetDisplay+0x2b4>
80004d94:	70 08       	ld.w	r8,r8[0x0]
80004d96:	30 59       	mov	r9,5
80004d98:	ef 49 ff e4 	st.w	r7[-28],r9
80004d9c:	ef 48 ff e0 	st.w	r7[-32],r8
80004da0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004da4:	ef 48 ff ec 	st.w	r7[-20],r8
80004da8:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004dac:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004db0:	ee f0 ff ec 	ld.w	r0,r7[-20]
80004db4:	30 01       	mov	r1,0
80004db6:	ee f2 ff e8 	ld.w	r2,r7[-24]
80004dba:	30 03       	mov	r3,0
80004dbc:	e2 02 02 4a 	mul	r10,r1,r2
80004dc0:	e6 00 02 48 	mul	r8,r3,r0
80004dc4:	10 0a       	add	r10,r8
80004dc6:	e0 02 06 48 	mulu.d	r8,r0,r2
80004dca:	12 0a       	add	r10,r9
80004dcc:	14 99       	mov	r9,r10
80004dce:	e0 6a 03 e7 	mov	r10,999
80004dd2:	30 0b       	mov	r11,0
80004dd4:	f0 0a 00 0a 	add	r10,r8,r10
80004dd8:	f2 0b 00 4b 	adc	r11,r9,r11
80004ddc:	e0 68 03 e8 	mov	r8,1000
80004de0:	30 09       	mov	r9,0
80004de2:	f0 1f 00 3e 	mcall	80004ed8 <et024006_ResetDisplay+0x2b8>
80004de6:	14 98       	mov	r8,r10
80004de8:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004dea:	ef 48 ff f4 	st.w	r7[-12],r8
80004dee:	ee c8 00 4c 	sub	r8,r7,76
80004df2:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004df6:	e1 b8 00 42 	mfsr	r8,0x108
80004dfa:	10 99       	mov	r9,r8
80004dfc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004e00:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004e02:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004e06:	70 09       	ld.w	r9,r8[0x0]
80004e08:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e0c:	10 09       	add	r9,r8
80004e0e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004e12:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004e14:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004e18:	30 08       	mov	r8,0
80004e1a:	f3 68 00 08 	st.b	r9[8],r8
80004e1e:	ee c8 00 4c 	sub	r8,r7,76
80004e22:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004e26:	e1 b8 00 42 	mfsr	r8,0x108
80004e2a:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004e2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e32:	f1 39 00 08 	ld.ub	r9,r8[8]
80004e36:	30 28       	mov	r8,2
80004e38:	f0 09 18 00 	cp.b	r9,r8
80004e3c:	c0 31       	brne	80004e42 <et024006_ResetDisplay+0x222>
    return false;
80004e3e:	30 08       	mov	r8,0
80004e40:	c4 38       	rjmp	80004ec6 <et024006_ResetDisplay+0x2a6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004e42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e46:	f1 39 00 08 	ld.ub	r9,r8[8]
80004e4a:	30 18       	mov	r8,1
80004e4c:	f0 09 18 00 	cp.b	r9,r8
80004e50:	c0 31       	brne	80004e56 <et024006_ResetDisplay+0x236>
    return true;
80004e52:	30 18       	mov	r8,1
80004e54:	c3 98       	rjmp	80004ec6 <et024006_ResetDisplay+0x2a6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004e56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e5a:	70 09       	ld.w	r9,r8[0x0]
80004e5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e60:	70 18       	ld.w	r8,r8[0x4]
80004e62:	10 39       	cp.w	r9,r8
80004e64:	e0 88 00 1a 	brls	80004e98 <et024006_ResetDisplay+0x278>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004e68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e6c:	70 08       	ld.w	r8,r8[0x0]
80004e6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004e72:	10 39       	cp.w	r9,r8
80004e74:	c1 02       	brcc	80004e94 <et024006_ResetDisplay+0x274>
80004e76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e7a:	70 18       	ld.w	r8,r8[0x4]
80004e7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004e80:	10 39       	cp.w	r9,r8
80004e82:	e0 88 00 09 	brls	80004e94 <et024006_ResetDisplay+0x274>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004e86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004e8a:	30 18       	mov	r8,1
80004e8c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004e90:	30 18       	mov	r8,1
80004e92:	c1 a8       	rjmp	80004ec6 <et024006_ResetDisplay+0x2a6>
    }
    return false;
80004e94:	30 08       	mov	r8,0
80004e96:	c1 88       	rjmp	80004ec6 <et024006_ResetDisplay+0x2a6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004e98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e9c:	70 08       	ld.w	r8,r8[0x0]
80004e9e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004ea2:	10 39       	cp.w	r9,r8
80004ea4:	c0 93       	brcs	80004eb6 <et024006_ResetDisplay+0x296>
80004ea6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004eaa:	70 18       	ld.w	r8,r8[0x4]
80004eac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004eb0:	10 39       	cp.w	r9,r8
80004eb2:	e0 88 00 09 	brls	80004ec4 <et024006_ResetDisplay+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004eb6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004eba:	30 18       	mov	r8,1
80004ebc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004ec0:	30 18       	mov	r8,1
80004ec2:	c0 28       	rjmp	80004ec6 <et024006_ResetDisplay+0x2a6>
    }
    return false;
80004ec4:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004ec6:	58 08       	cp.w	r8,0
80004ec8:	ca b0       	breq	80004e1e <et024006_ResetDisplay+0x1fe>
}
80004eca:	2e 6d       	sub	sp,-104
80004ecc:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80004ed0:	80 00       	ld.sh	r0,r0[0x0]
80004ed2:	91 02       	st.w	r8[0x0],r2
80004ed4:	00 00       	add	r0,r0
80004ed6:	06 ac       	st.w	r3++,r12
80004ed8:	80 00       	ld.sh	r0,r0[0x0]
80004eda:	e8 10 80 00 	orl	r0,0x8000
80004ede:	90 9a       	ld.uh	r10,r8[0x2]

80004ee0 <et024006_AdjustGamma>:
/*! \brief Display gamma setup.
 *
 * Parameters are provided by EDT for the display.
 */
static void et024006_AdjustGamma( void )
{
80004ee0:	eb cd 40 80 	pushm	r7,lr
80004ee4:	1a 97       	mov	r7,sp
80004ee6:	20 6d       	sub	sp,24
80004ee8:	34 68       	mov	r8,70
80004eea:	ef 68 ff e9 	st.b	r7[-23],r8
80004eee:	39 48       	mov	r8,-108
80004ef0:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004ef4:	fc 19 c0 00 	movh	r9,0xc000
80004ef8:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80004efc:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004efe:	fc 19 c0 20 	movh	r9,0xc020
80004f02:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80004f06:	b2 08       	st.h	r9[0x0],r8
80004f08:	34 78       	mov	r8,71
80004f0a:	ef 68 ff eb 	st.b	r7[-21],r8
80004f0e:	34 18       	mov	r8,65
80004f10:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f14:	fc 19 c0 00 	movh	r9,0xc000
80004f18:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80004f1c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004f1e:	fc 19 c0 20 	movh	r9,0xc020
80004f22:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80004f26:	b2 08       	st.h	r9[0x0],r8
80004f28:	34 88       	mov	r8,72
80004f2a:	ef 68 ff ed 	st.b	r7[-19],r8
80004f2e:	30 08       	mov	r8,0
80004f30:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f34:	fc 19 c0 00 	movh	r9,0xc000
80004f38:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004f3c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004f3e:	fc 19 c0 20 	movh	r9,0xc020
80004f42:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80004f46:	b2 08       	st.h	r9[0x0],r8
80004f48:	34 98       	mov	r8,73
80004f4a:	ef 68 ff ef 	st.b	r7[-17],r8
80004f4e:	33 38       	mov	r8,51
80004f50:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f54:	fc 19 c0 00 	movh	r9,0xc000
80004f58:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80004f5c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004f5e:	fc 19 c0 20 	movh	r9,0xc020
80004f62:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004f66:	b2 08       	st.h	r9[0x0],r8
80004f68:	34 a8       	mov	r8,74
80004f6a:	ef 68 ff f1 	st.b	r7[-15],r8
80004f6e:	32 58       	mov	r8,37
80004f70:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f74:	fc 19 c0 00 	movh	r9,0xc000
80004f78:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80004f7c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004f7e:	fc 19 c0 20 	movh	r9,0xc020
80004f82:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80004f86:	b2 08       	st.h	r9[0x0],r8
80004f88:	34 b8       	mov	r8,75
80004f8a:	ef 68 ff f3 	st.b	r7[-13],r8
80004f8e:	34 58       	mov	r8,69
80004f90:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f94:	fc 19 c0 00 	movh	r9,0xc000
80004f98:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80004f9c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004f9e:	fc 19 c0 20 	movh	r9,0xc020
80004fa2:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80004fa6:	b2 08       	st.h	r9[0x0],r8
80004fa8:	34 c8       	mov	r8,76
80004faa:	ef 68 ff f5 	st.b	r7[-11],r8
80004fae:	34 48       	mov	r8,68
80004fb0:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004fb4:	fc 19 c0 00 	movh	r9,0xc000
80004fb8:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004fbc:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004fbe:	fc 19 c0 20 	movh	r9,0xc020
80004fc2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004fc6:	b2 08       	st.h	r9[0x0],r8
80004fc8:	34 d8       	mov	r8,77
80004fca:	ef 68 ff f7 	st.b	r7[-9],r8
80004fce:	37 78       	mov	r8,119
80004fd0:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004fd4:	fc 19 c0 00 	movh	r9,0xc000
80004fd8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004fdc:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004fde:	fc 19 c0 20 	movh	r9,0xc020
80004fe2:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004fe6:	b2 08       	st.h	r9[0x0],r8
80004fe8:	34 e8       	mov	r8,78
80004fea:	ef 68 ff f9 	st.b	r7[-7],r8
80004fee:	31 28       	mov	r8,18
80004ff0:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004ff4:	fc 19 c0 00 	movh	r9,0xc000
80004ff8:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004ffc:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004ffe:	fc 19 c0 20 	movh	r9,0xc020
80005002:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005006:	b2 08       	st.h	r9[0x0],r8
80005008:	34 f8       	mov	r8,79
8000500a:	ef 68 ff fb 	st.b	r7[-5],r8
8000500e:	3c c8       	mov	r8,-52
80005010:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005014:	fc 19 c0 00 	movh	r9,0xc000
80005018:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000501c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000501e:	fc 19 c0 20 	movh	r9,0xc020
80005022:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80005026:	b2 08       	st.h	r9[0x0],r8
80005028:	35 08       	mov	r8,80
8000502a:	ef 68 ff fd 	st.b	r7[-3],r8
8000502e:	34 68       	mov	r8,70
80005030:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005034:	fc 19 c0 00 	movh	r9,0xc000
80005038:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000503c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000503e:	fc 19 c0 20 	movh	r9,0xc020
80005042:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005046:	b2 08       	st.h	r9[0x0],r8
80005048:	35 18       	mov	r8,81
8000504a:	ef 68 ff ff 	st.b	r7[-1],r8
8000504e:	38 28       	mov	r8,-126
80005050:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005054:	fc 19 c0 00 	movh	r9,0xc000
80005058:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000505c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000505e:	fc 19 c0 20 	movh	r9,0xc020
80005062:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005066:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_GAMMACTRL8, 0x77 );
  et024006_WriteRegister( HIMAX_GAMMACTRL9, 0x12 );
  et024006_WriteRegister( HIMAX_GAMMACTRL10, 0xCC );
  et024006_WriteRegister( HIMAX_GAMMACTRL11, 0x46 );
  et024006_WriteRegister( HIMAX_GAMMACTRL12, 0x82 );
}
80005068:	2f ad       	sub	sp,-24
8000506a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000506e <et024006_GeneralSettings>:
/*! \brief General display settings.
 *
 * This are settings provided by EDT and are optimised for the display.
 */
static void et024006_GeneralSettings(void)
{
8000506e:	eb cd 40 80 	pushm	r7,lr
80005072:	1a 97       	mov	r7,sp
80005074:	20 8d       	sub	sp,32
80005076:	30 18       	mov	r8,1
80005078:	ef 68 ff e1 	st.b	r7[-31],r8
8000507c:	30 68       	mov	r8,6
8000507e:	ef 68 ff e0 	st.b	r7[-32],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005082:	fc 19 c0 00 	movh	r9,0xc000
80005086:	ef 38 ff e1 	ld.ub	r8,r7[-31]
8000508a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000508c:	fc 19 c0 20 	movh	r9,0xc020
80005090:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80005094:	b2 08       	st.h	r9[0x0],r8
80005096:	33 a8       	mov	r8,58
80005098:	ef 68 ff e3 	st.b	r7[-29],r8
8000509c:	30 18       	mov	r8,1
8000509e:	ef 68 ff e2 	st.b	r7[-30],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800050a2:	fc 19 c0 00 	movh	r9,0xc000
800050a6:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800050aa:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800050ac:	fc 19 c0 20 	movh	r9,0xc020
800050b0:	ef 38 ff e2 	ld.ub	r8,r7[-30]
800050b4:	b2 08       	st.h	r9[0x0],r8
800050b6:	33 b8       	mov	r8,59
800050b8:	ef 68 ff e5 	st.b	r7[-27],r8
800050bc:	30 18       	mov	r8,1
800050be:	ef 68 ff e4 	st.b	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800050c2:	fc 19 c0 00 	movh	r9,0xc000
800050c6:	ef 38 ff e5 	ld.ub	r8,r7[-27]
800050ca:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800050cc:	fc 19 c0 20 	movh	r9,0xc020
800050d0:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800050d4:	b2 08       	st.h	r9[0x0],r8
800050d6:	33 c8       	mov	r8,60
800050d8:	ef 68 ff e7 	st.b	r7[-25],r8
800050dc:	3f 08       	mov	r8,-16
800050de:	ef 68 ff e6 	st.b	r7[-26],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800050e2:	fc 19 c0 00 	movh	r9,0xc000
800050e6:	ef 38 ff e7 	ld.ub	r8,r7[-25]
800050ea:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800050ec:	fc 19 c0 20 	movh	r9,0xc020
800050f0:	ef 38 ff e6 	ld.ub	r8,r7[-26]
800050f4:	b2 08       	st.h	r9[0x0],r8
800050f6:	33 d8       	mov	r8,61
800050f8:	ef 68 ff e9 	st.b	r7[-23],r8
800050fc:	30 08       	mov	r8,0
800050fe:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005102:	fc 19 c0 00 	movh	r9,0xc000
80005106:	ef 38 ff e9 	ld.ub	r8,r7[-23]
8000510a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000510c:	fc 19 c0 20 	movh	r9,0xc020
80005110:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80005114:	b2 08       	st.h	r9[0x0],r8
80005116:	33 e8       	mov	r8,62
80005118:	ef 68 ff eb 	st.b	r7[-21],r8
8000511c:	33 88       	mov	r8,56
8000511e:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005122:	fc 19 c0 00 	movh	r9,0xc000
80005126:	ef 38 ff eb 	ld.ub	r8,r7[-21]
8000512a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000512c:	fc 19 c0 20 	movh	r9,0xc020
80005130:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80005134:	b2 08       	st.h	r9[0x0],r8
80005136:	34 08       	mov	r8,64
80005138:	ef 68 ff ed 	st.b	r7[-19],r8
8000513c:	30 f8       	mov	r8,15
8000513e:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005142:	fc 19 c0 00 	movh	r9,0xc000
80005146:	ef 38 ff ed 	ld.ub	r8,r7[-19]
8000514a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000514c:	fc 19 c0 20 	movh	r9,0xc020
80005150:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005154:	b2 08       	st.h	r9[0x0],r8
80005156:	34 18       	mov	r8,65
80005158:	ef 68 ff ef 	st.b	r7[-17],r8
8000515c:	3f 08       	mov	r8,-16
8000515e:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005162:	fc 19 c0 00 	movh	r9,0xc000
80005166:	ef 38 ff ef 	ld.ub	r8,r7[-17]
8000516a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000516c:	fc 19 c0 20 	movh	r9,0xc020
80005170:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80005174:	b2 08       	st.h	r9[0x0],r8
80005176:	32 78       	mov	r8,39
80005178:	ef 68 ff f1 	st.b	r7[-15],r8
8000517c:	30 28       	mov	r8,2
8000517e:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005182:	fc 19 c0 00 	movh	r9,0xc000
80005186:	ef 38 ff f1 	ld.ub	r8,r7[-15]
8000518a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000518c:	fc 19 c0 20 	movh	r9,0xc020
80005190:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005194:	b2 08       	st.h	r9[0x0],r8
80005196:	32 88       	mov	r8,40
80005198:	ef 68 ff f3 	st.b	r7[-13],r8
8000519c:	30 28       	mov	r8,2
8000519e:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051a2:	fc 19 c0 00 	movh	r9,0xc000
800051a6:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800051aa:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051ac:	fc 19 c0 20 	movh	r9,0xc020
800051b0:	ef 38 ff f2 	ld.ub	r8,r7[-14]
800051b4:	b2 08       	st.h	r9[0x0],r8
800051b6:	32 98       	mov	r8,41
800051b8:	ef 68 ff f5 	st.b	r7[-11],r8
800051bc:	30 28       	mov	r8,2
800051be:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051c2:	fc 19 c0 00 	movh	r9,0xc000
800051c6:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800051ca:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051cc:	fc 19 c0 20 	movh	r9,0xc020
800051d0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800051d4:	b2 08       	st.h	r9[0x0],r8
800051d6:	32 a8       	mov	r8,42
800051d8:	ef 68 ff f7 	st.b	r7[-9],r8
800051dc:	30 28       	mov	r8,2
800051de:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051e2:	fc 19 c0 00 	movh	r9,0xc000
800051e6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800051ea:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051ec:	fc 19 c0 20 	movh	r9,0xc020
800051f0:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800051f4:	b2 08       	st.h	r9[0x0],r8
800051f6:	32 c8       	mov	r8,44
800051f8:	ef 68 ff f9 	st.b	r7[-7],r8
800051fc:	30 28       	mov	r8,2
800051fe:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005202:	fc 19 c0 00 	movh	r9,0xc000
80005206:	ef 38 ff f9 	ld.ub	r8,r7[-7]
8000520a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000520c:	fc 19 c0 20 	movh	r9,0xc020
80005210:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005214:	b2 08       	st.h	r9[0x0],r8
80005216:	32 d8       	mov	r8,45
80005218:	ef 68 ff fb 	st.b	r7[-5],r8
8000521c:	30 28       	mov	r8,2
8000521e:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005222:	fc 19 c0 00 	movh	r9,0xc000
80005226:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000522a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000522c:	fc 19 c0 20 	movh	r9,0xc020
80005230:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80005234:	b2 08       	st.h	r9[0x0],r8
80005236:	31 98       	mov	r8,25
80005238:	ef 68 ff fd 	st.b	r7[-3],r8
8000523c:	34 98       	mov	r8,73
8000523e:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005242:	fc 19 c0 00 	movh	r9,0xc000
80005246:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000524a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000524c:	fc 19 c0 20 	movh	r9,0xc020
80005250:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005254:	b2 08       	st.h	r9[0x0],r8
80005256:	39 38       	mov	r8,-109
80005258:	ef 68 ff ff 	st.b	r7[-1],r8
8000525c:	30 88       	mov	r8,8
8000525e:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005262:	fc 19 c0 00 	movh	r9,0xc000
80005266:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000526a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000526c:	fc 19 c0 20 	movh	r9,0xc020
80005270:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005274:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL6, 0x02 );
  et024006_WriteRegister( HIMAX_DISPCTRL7, 0x02 );

  et024006_WriteRegister( HIMAX_OSCCTRL1, 0x49 );
  et024006_WriteRegister( HIMAX_OSCCTRL3, 0x08 );
}
80005276:	2f 8d       	sub	sp,-32
80005278:	e3 cd 80 80 	ldm	sp++,r7,pc

8000527c <et024006_PowerSettings>:
/*! \brief Power setup.
 *
 * Sets basic DC/DC and VCOM parameters.
 */
static void et024006_PowerSettings(void)
{
8000527c:	eb cd 40 80 	pushm	r7,lr
80005280:	1a 97       	mov	r7,sp
80005282:	20 6d       	sub	sp,24
80005284:	32 38       	mov	r8,35
80005286:	ef 68 ff e9 	st.b	r7[-23],r8
8000528a:	39 58       	mov	r8,-107
8000528c:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005290:	fc 19 c0 00 	movh	r9,0xc000
80005294:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80005298:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000529a:	fc 19 c0 20 	movh	r9,0xc020
8000529e:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800052a2:	b2 08       	st.h	r9[0x0],r8
800052a4:	32 48       	mov	r8,36
800052a6:	ef 68 ff eb 	st.b	r7[-21],r8
800052aa:	39 58       	mov	r8,-107
800052ac:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052b0:	fc 19 c0 00 	movh	r9,0xc000
800052b4:	ef 38 ff eb 	ld.ub	r8,r7[-21]
800052b8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052ba:	fc 19 c0 20 	movh	r9,0xc020
800052be:	ef 38 ff ea 	ld.ub	r8,r7[-22]
800052c2:	b2 08       	st.h	r9[0x0],r8
800052c4:	32 58       	mov	r8,37
800052c6:	ef 68 ff ed 	st.b	r7[-19],r8
800052ca:	3f f8       	mov	r8,-1
800052cc:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052d0:	fc 19 c0 00 	movh	r9,0xc000
800052d4:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800052d8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052da:	fc 19 c0 20 	movh	r9,0xc020
800052de:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800052e2:	b2 08       	st.h	r9[0x0],r8
800052e4:	39 08       	mov	r8,-112
800052e6:	ef 68 ff ef 	st.b	r7[-17],r8
800052ea:	37 f8       	mov	r8,127
800052ec:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052f0:	fc 19 c0 00 	movh	r9,0xc000
800052f4:	ef 38 ff ef 	ld.ub	r8,r7[-17]
800052f8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052fa:	fc 19 c0 20 	movh	r9,0xc020
800052fe:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80005302:	b2 08       	st.h	r9[0x0],r8
80005304:	33 58       	mov	r8,53
80005306:	ef 68 ff f1 	st.b	r7[-15],r8
8000530a:	33 88       	mov	r8,56
8000530c:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005310:	fc 19 c0 00 	movh	r9,0xc000
80005314:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80005318:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000531a:	fc 19 c0 20 	movh	r9,0xc020
8000531e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005322:	b2 08       	st.h	r9[0x0],r8
80005324:	33 68       	mov	r8,54
80005326:	ef 68 ff f3 	st.b	r7[-13],r8
8000532a:	37 88       	mov	r8,120
8000532c:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005330:	fc 19 c0 00 	movh	r9,0xc000
80005334:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80005338:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000533a:	fc 19 c0 20 	movh	r9,0xc020
8000533e:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80005342:	b2 08       	st.h	r9[0x0],r8
80005344:	31 d8       	mov	r8,29
80005346:	ef 68 ff f5 	st.b	r7[-11],r8
8000534a:	30 78       	mov	r8,7
8000534c:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005350:	fc 19 c0 00 	movh	r9,0xc000
80005354:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005358:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000535a:	fc 19 c0 20 	movh	r9,0xc020
8000535e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005362:	b2 08       	st.h	r9[0x0],r8
80005364:	31 e8       	mov	r8,30
80005366:	ef 68 ff f7 	st.b	r7[-9],r8
8000536a:	30 08       	mov	r8,0
8000536c:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005370:	fc 19 c0 00 	movh	r9,0xc000
80005374:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005378:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000537a:	fc 19 c0 20 	movh	r9,0xc020
8000537e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80005382:	b2 08       	st.h	r9[0x0],r8
80005384:	31 f8       	mov	r8,31
80005386:	ef 68 ff f9 	st.b	r7[-7],r8
8000538a:	30 48       	mov	r8,4
8000538c:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005390:	fc 19 c0 00 	movh	r9,0xc000
80005394:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80005398:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000539a:	fc 19 c0 20 	movh	r9,0xc020
8000539e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800053a2:	b2 08       	st.h	r9[0x0],r8
800053a4:	32 08       	mov	r8,32
800053a6:	ef 68 ff fb 	st.b	r7[-5],r8
800053aa:	34 08       	mov	r8,64
800053ac:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053b0:	fc 19 c0 00 	movh	r9,0xc000
800053b4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800053b8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053ba:	fc 19 c0 20 	movh	r9,0xc020
800053be:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800053c2:	b2 08       	st.h	r9[0x0],r8
800053c4:	34 48       	mov	r8,68
800053c6:	ef 68 ff fd 	st.b	r7[-3],r8
800053ca:	33 88       	mov	r8,56
800053cc:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053d0:	fc 19 c0 00 	movh	r9,0xc000
800053d4:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800053d8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053da:	fc 19 c0 20 	movh	r9,0xc020
800053de:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800053e2:	b2 08       	st.h	r9[0x0],r8
800053e4:	34 58       	mov	r8,69
800053e6:	ef 68 ff ff 	st.b	r7[-1],r8
800053ea:	31 28       	mov	r8,18
800053ec:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053f0:	fc 19 c0 00 	movh	r9,0xc000
800053f4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800053f8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053fa:	fc 19 c0 20 	movh	r9,0xc020
800053fe:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005402:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL4, 0x00 );
  et024006_WriteRegister( HIMAX_POWERCTRL5, 0x04 );
  et024006_WriteRegister( HIMAX_POWERCTRL6, 0x40 );
  et024006_WriteRegister( HIMAX_VCOMCTRL2, 0x38 );
  et024006_WriteRegister( HIMAX_VCOMCTRL3, 0x12 );
}
80005404:	2f ad       	sub	sp,-24
80005406:	e3 cd 80 80 	ldm	sp++,r7,pc

8000540a <et024006_InterfaceSettings>:
/*! \brief Sets display interface.
 *
 * Configures screen orientation and color mode.
 */
static void et024006_InterfaceSettings(void)
{
8000540a:	eb cd 40 80 	pushm	r7,lr
8000540e:	1a 97       	mov	r7,sp
80005410:	20 1d       	sub	sp,4
80005412:	31 68       	mov	r8,22
80005414:	ef 68 ff ff 	st.b	r7[-1],r8
80005418:	36 88       	mov	r8,104
8000541a:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000541e:	fc 19 c0 00 	movh	r9,0xc000
80005422:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005426:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005428:	fc 19 c0 20 	movh	r9,0xc020
8000542c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005430:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_MEMACCESSCTRL,
    (1 << HIMAX_MX)
    | (1 << HIMAX_MV)
    | (1 << HIMAX_BGR) );

}
80005432:	2f fd       	sub	sp,-4
80005434:	e3 cd 80 80 	ldm	sp++,r7,pc

80005438 <et024006_PowerUp>:
/*! \brief Power up display.
 *
 * Turns on DC/DC converters.
 */
static void et024006_PowerUp(void)
{
80005438:	eb cd 40 8f 	pushm	r0-r3,r7,lr
8000543c:	1a 97       	mov	r7,sp
8000543e:	fa cd 01 24 	sub	sp,sp,292
  cpu_delay_ms( 10, tft_data.cpu_hz );
80005442:	fe f8 07 22 	ld.w	r8,pc[1826]
80005446:	70 09       	ld.w	r9,r8[0x0]
80005448:	30 a8       	mov	r8,10
8000544a:	ef 48 ff 54 	st.w	r7[-172],r8
8000544e:	ef 49 ff 50 	st.w	r7[-176],r9
80005452:	ee f8 ff 54 	ld.w	r8,r7[-172]
80005456:	ef 48 ff 5c 	st.w	r7[-164],r8
8000545a:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000545e:	ef 48 ff 58 	st.w	r7[-168],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005462:	ee f2 ff 5c 	ld.w	r2,r7[-164]
80005466:	30 03       	mov	r3,0
80005468:	ee fa ff 58 	ld.w	r10,r7[-168]
8000546c:	30 0b       	mov	r11,0
8000546e:	e6 0a 02 49 	mul	r9,r3,r10
80005472:	f6 02 02 48 	mul	r8,r11,r2
80005476:	10 09       	add	r9,r8
80005478:	e4 0a 06 4a 	mulu.d	r10,r2,r10
8000547c:	16 09       	add	r9,r11
8000547e:	12 9b       	mov	r11,r9
80005480:	e0 68 03 e7 	mov	r8,999
80005484:	30 09       	mov	r9,0
80005486:	10 0a       	add	r10,r8
80005488:	f6 09 00 4b 	adc	r11,r11,r9
8000548c:	e0 68 03 e8 	mov	r8,1000
80005490:	30 09       	mov	r9,0
80005492:	f0 1f 01 b6 	mcall	80005b68 <et024006_PowerUp+0x730>
80005496:	14 98       	mov	r8,r10
80005498:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000549a:	ef 48 ff 64 	st.w	r7[-156],r8
8000549e:	ee c8 00 ec 	sub	r8,r7,236
800054a2:	ef 48 ff 60 	st.w	r7[-160],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800054a6:	e1 b8 00 42 	mfsr	r8,0x108
800054aa:	10 99       	mov	r9,r8
800054ac:	ee f8 ff 60 	ld.w	r8,r7[-160]
800054b0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800054b2:	ee f8 ff 60 	ld.w	r8,r7[-160]
800054b6:	70 09       	ld.w	r9,r8[0x0]
800054b8:	ee f8 ff 64 	ld.w	r8,r7[-156]
800054bc:	10 09       	add	r9,r8
800054be:	ee f8 ff 60 	ld.w	r8,r7[-160]
800054c2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800054c4:	ee f9 ff 60 	ld.w	r9,r7[-160]
800054c8:	30 08       	mov	r8,0
800054ca:	f3 68 00 08 	st.b	r9[8],r8
800054ce:	ee c8 00 ec 	sub	r8,r7,236
800054d2:	ef 48 ff 68 	st.w	r7[-152],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800054d6:	e1 b8 00 42 	mfsr	r8,0x108
800054da:	ef 48 ff 6c 	st.w	r7[-148],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800054de:	ee f8 ff 68 	ld.w	r8,r7[-152]
800054e2:	f1 39 00 08 	ld.ub	r9,r8[8]
800054e6:	30 28       	mov	r8,2
800054e8:	f0 09 18 00 	cp.b	r9,r8
800054ec:	c0 31       	brne	800054f2 <et024006_PowerUp+0xba>
    return false;
800054ee:	30 08       	mov	r8,0
800054f0:	c4 38       	rjmp	80005576 <et024006_PowerUp+0x13e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800054f2:	ee f8 ff 68 	ld.w	r8,r7[-152]
800054f6:	f1 39 00 08 	ld.ub	r9,r8[8]
800054fa:	30 18       	mov	r8,1
800054fc:	f0 09 18 00 	cp.b	r9,r8
80005500:	c0 31       	brne	80005506 <et024006_PowerUp+0xce>
    return true;
80005502:	30 18       	mov	r8,1
80005504:	c3 98       	rjmp	80005576 <et024006_PowerUp+0x13e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005506:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000550a:	70 09       	ld.w	r9,r8[0x0]
8000550c:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005510:	70 18       	ld.w	r8,r8[0x4]
80005512:	10 39       	cp.w	r9,r8
80005514:	e0 88 00 1a 	brls	80005548 <et024006_PowerUp+0x110>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005518:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000551c:	70 09       	ld.w	r9,r8[0x0]
8000551e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80005522:	12 38       	cp.w	r8,r9
80005524:	c1 02       	brcc	80005544 <et024006_PowerUp+0x10c>
80005526:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000552a:	70 19       	ld.w	r9,r8[0x4]
8000552c:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80005530:	12 38       	cp.w	r8,r9
80005532:	e0 88 00 09 	brls	80005544 <et024006_PowerUp+0x10c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005536:	ee f9 ff 68 	ld.w	r9,r7[-152]
8000553a:	30 18       	mov	r8,1
8000553c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005540:	30 18       	mov	r8,1
80005542:	c1 a8       	rjmp	80005576 <et024006_PowerUp+0x13e>
    }
    return false;
80005544:	30 08       	mov	r8,0
80005546:	c1 88       	rjmp	80005576 <et024006_PowerUp+0x13e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005548:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000554c:	70 09       	ld.w	r9,r8[0x0]
8000554e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80005552:	12 38       	cp.w	r8,r9
80005554:	c0 93       	brcs	80005566 <et024006_PowerUp+0x12e>
80005556:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000555a:	70 19       	ld.w	r9,r8[0x4]
8000555c:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80005560:	12 38       	cp.w	r8,r9
80005562:	e0 88 00 09 	brls	80005574 <et024006_PowerUp+0x13c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005566:	ee f9 ff 68 	ld.w	r9,r7[-152]
8000556a:	30 18       	mov	r8,1
8000556c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005570:	30 18       	mov	r8,1
80005572:	c0 28       	rjmp	80005576 <et024006_PowerUp+0x13e>
    }
    return false;
80005574:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005576:	58 08       	cp.w	r8,0
80005578:	ca b0       	breq	800054ce <et024006_PowerUp+0x96>
8000557a:	31 c8       	mov	r8,28
8000557c:	ef 68 ff 73 	st.b	r7[-141],r8
80005580:	30 48       	mov	r8,4
80005582:	ef 68 ff 72 	st.b	r7[-142],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005586:	fc 19 c0 00 	movh	r9,0xc000
8000558a:	ef 38 ff 73 	ld.ub	r8,r7[-141]
8000558e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005590:	fc 19 c0 20 	movh	r9,0xc020
80005594:	ef 38 ff 72 	ld.ub	r8,r7[-142]
80005598:	b2 08       	st.h	r9[0x0],r8
static void et024006_PowerUp(void)
{
  cpu_delay_ms( 10, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
8000559a:	fe f8 05 ca 	ld.w	r8,pc[1482]
8000559e:	70 09       	ld.w	r9,r8[0x0]
800055a0:	31 48       	mov	r8,20
800055a2:	ef 48 ff 78 	st.w	r7[-136],r8
800055a6:	ef 49 ff 74 	st.w	r7[-140],r9
800055aa:	ee f8 ff 78 	ld.w	r8,r7[-136]
800055ae:	ef 48 ff 80 	st.w	r7[-128],r8
800055b2:	ee f8 ff 74 	ld.w	r8,r7[-140]
800055b6:	ef 48 ff 7c 	st.w	r7[-132],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800055ba:	ee fc ff 80 	ld.w	r12,r7[-128]
800055be:	ef 4c fe e0 	st.w	r7[-288],r12
800055c2:	30 0b       	mov	r11,0
800055c4:	ef 4b fe dc 	st.w	r7[-292],r11
800055c8:	ee f0 ff 7c 	ld.w	r0,r7[-132]
800055cc:	30 01       	mov	r1,0
800055ce:	ee f9 fe dc 	ld.w	r9,r7[-292]
800055d2:	a1 39       	mul	r9,r0
800055d4:	ee fa fe e0 	ld.w	r10,r7[-288]
800055d8:	e2 0a 02 48 	mul	r8,r1,r10
800055dc:	10 09       	add	r9,r8
800055de:	ee f8 fe e0 	ld.w	r8,r7[-288]
800055e2:	f0 00 06 4a 	mulu.d	r10,r8,r0
800055e6:	16 09       	add	r9,r11
800055e8:	12 9b       	mov	r11,r9
800055ea:	e0 68 03 e7 	mov	r8,999
800055ee:	30 09       	mov	r9,0
800055f0:	10 0a       	add	r10,r8
800055f2:	f6 09 00 4b 	adc	r11,r11,r9
800055f6:	e0 68 03 e8 	mov	r8,1000
800055fa:	30 09       	mov	r9,0
800055fc:	f0 1f 01 5b 	mcall	80005b68 <et024006_PowerUp+0x730>
80005600:	14 98       	mov	r8,r10
80005602:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005604:	ef 48 ff 88 	st.w	r7[-120],r8
80005608:	ee c8 00 e0 	sub	r8,r7,224
8000560c:	ef 48 ff 84 	st.w	r7[-124],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005610:	e1 b8 00 42 	mfsr	r8,0x108
80005614:	10 99       	mov	r9,r8
80005616:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000561a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000561c:	ee f8 ff 84 	ld.w	r8,r7[-124]
80005620:	70 09       	ld.w	r9,r8[0x0]
80005622:	ee f8 ff 88 	ld.w	r8,r7[-120]
80005626:	10 09       	add	r9,r8
80005628:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000562c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000562e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80005632:	30 08       	mov	r8,0
80005634:	f3 68 00 08 	st.b	r9[8],r8
80005638:	ee c8 00 e0 	sub	r8,r7,224
8000563c:	ef 48 ff 8c 	st.w	r7[-116],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005640:	e1 b8 00 42 	mfsr	r8,0x108
80005644:	ef 48 ff 90 	st.w	r7[-112],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005648:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000564c:	f1 39 00 08 	ld.ub	r9,r8[8]
80005650:	30 28       	mov	r8,2
80005652:	f0 09 18 00 	cp.b	r9,r8
80005656:	c0 31       	brne	8000565c <et024006_PowerUp+0x224>
    return false;
80005658:	30 08       	mov	r8,0
8000565a:	c4 38       	rjmp	800056e0 <et024006_PowerUp+0x2a8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000565c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005660:	f1 39 00 08 	ld.ub	r9,r8[8]
80005664:	30 18       	mov	r8,1
80005666:	f0 09 18 00 	cp.b	r9,r8
8000566a:	c0 31       	brne	80005670 <et024006_PowerUp+0x238>
    return true;
8000566c:	30 18       	mov	r8,1
8000566e:	c3 98       	rjmp	800056e0 <et024006_PowerUp+0x2a8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005670:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005674:	70 09       	ld.w	r9,r8[0x0]
80005676:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000567a:	70 18       	ld.w	r8,r8[0x4]
8000567c:	10 39       	cp.w	r9,r8
8000567e:	e0 88 00 1a 	brls	800056b2 <et024006_PowerUp+0x27a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005682:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005686:	70 08       	ld.w	r8,r8[0x0]
80005688:	ee f9 ff 90 	ld.w	r9,r7[-112]
8000568c:	10 39       	cp.w	r9,r8
8000568e:	c1 02       	brcc	800056ae <et024006_PowerUp+0x276>
80005690:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005694:	70 18       	ld.w	r8,r8[0x4]
80005696:	ee f9 ff 90 	ld.w	r9,r7[-112]
8000569a:	10 39       	cp.w	r9,r8
8000569c:	e0 88 00 09 	brls	800056ae <et024006_PowerUp+0x276>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800056a0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800056a4:	30 18       	mov	r8,1
800056a6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800056aa:	30 18       	mov	r8,1
800056ac:	c1 a8       	rjmp	800056e0 <et024006_PowerUp+0x2a8>
    }
    return false;
800056ae:	30 08       	mov	r8,0
800056b0:	c1 88       	rjmp	800056e0 <et024006_PowerUp+0x2a8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800056b2:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800056b6:	70 08       	ld.w	r8,r8[0x0]
800056b8:	ee f9 ff 90 	ld.w	r9,r7[-112]
800056bc:	10 39       	cp.w	r9,r8
800056be:	c0 93       	brcs	800056d0 <et024006_PowerUp+0x298>
800056c0:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800056c4:	70 18       	ld.w	r8,r8[0x4]
800056c6:	ee f9 ff 90 	ld.w	r9,r7[-112]
800056ca:	10 39       	cp.w	r9,r8
800056cc:	e0 88 00 09 	brls	800056de <et024006_PowerUp+0x2a6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800056d0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800056d4:	30 18       	mov	r8,1
800056d6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800056da:	30 18       	mov	r8,1
800056dc:	c0 28       	rjmp	800056e0 <et024006_PowerUp+0x2a8>
    }
    return false;
800056de:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800056e0:	58 08       	cp.w	r8,0
800056e2:	ca b0       	breq	80005638 <et024006_PowerUp+0x200>
800056e4:	34 38       	mov	r8,67
800056e6:	ef 68 ff 97 	st.b	r7[-105],r8
800056ea:	38 08       	mov	r8,-128
800056ec:	ef 68 ff 96 	st.b	r7[-106],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800056f0:	fc 19 c0 00 	movh	r9,0xc000
800056f4:	ef 38 ff 97 	ld.ub	r8,r7[-105]
800056f8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800056fa:	fc 19 c0 20 	movh	r9,0xc020
800056fe:	ef 38 ff 96 	ld.ub	r8,r7[-106]
80005702:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
80005704:	fe f8 04 60 	ld.w	r8,pc[1120]
80005708:	70 08       	ld.w	r8,r8[0x0]
8000570a:	30 59       	mov	r9,5
8000570c:	ef 49 ff 9c 	st.w	r7[-100],r9
80005710:	ef 48 ff 98 	st.w	r7[-104],r8
80005714:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80005718:	ef 48 ff a4 	st.w	r7[-92],r8
8000571c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80005720:	ef 48 ff a0 	st.w	r7[-96],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005724:	ee fc ff a4 	ld.w	r12,r7[-92]
80005728:	ef 4c fe f0 	st.w	r7[-272],r12
8000572c:	30 0b       	mov	r11,0
8000572e:	ef 4b fe ec 	st.w	r7[-276],r11
80005732:	ee fa ff a0 	ld.w	r10,r7[-96]
80005736:	ef 4a fe e8 	st.w	r7[-280],r10
8000573a:	30 09       	mov	r9,0
8000573c:	ef 49 fe e4 	st.w	r7[-284],r9
80005740:	ee fa fe ec 	ld.w	r10,r7[-276]
80005744:	ee f8 fe e8 	ld.w	r8,r7[-280]
80005748:	b1 3a       	mul	r10,r8
8000574a:	ee f8 fe e4 	ld.w	r8,r7[-284]
8000574e:	ee fc fe f0 	ld.w	r12,r7[-272]
80005752:	b9 38       	mul	r8,r12
80005754:	10 0a       	add	r10,r8
80005756:	ee fb fe f0 	ld.w	r11,r7[-272]
8000575a:	ee fc fe e8 	ld.w	r12,r7[-280]
8000575e:	f6 0c 06 48 	mulu.d	r8,r11,r12
80005762:	12 0a       	add	r10,r9
80005764:	14 99       	mov	r9,r10
80005766:	e0 6a 03 e7 	mov	r10,999
8000576a:	30 0b       	mov	r11,0
8000576c:	f0 0a 00 0a 	add	r10,r8,r10
80005770:	f2 0b 00 4b 	adc	r11,r9,r11
80005774:	e0 68 03 e8 	mov	r8,1000
80005778:	30 09       	mov	r9,0
8000577a:	f0 1f 00 fc 	mcall	80005b68 <et024006_PowerUp+0x730>
8000577e:	14 98       	mov	r8,r10
80005780:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005782:	ef 48 ff ac 	st.w	r7[-84],r8
80005786:	ee c8 00 d4 	sub	r8,r7,212
8000578a:	ef 48 ff a8 	st.w	r7[-88],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000578e:	e1 b8 00 42 	mfsr	r8,0x108
80005792:	10 99       	mov	r9,r8
80005794:	ee f8 ff a8 	ld.w	r8,r7[-88]
80005798:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000579a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000579e:	70 09       	ld.w	r9,r8[0x0]
800057a0:	ee f8 ff ac 	ld.w	r8,r7[-84]
800057a4:	10 09       	add	r9,r8
800057a6:	ee f8 ff a8 	ld.w	r8,r7[-88]
800057aa:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800057ac:	ee f9 ff a8 	ld.w	r9,r7[-88]
800057b0:	30 08       	mov	r8,0
800057b2:	f3 68 00 08 	st.b	r9[8],r8
800057b6:	ee c8 00 d4 	sub	r8,r7,212
800057ba:	ef 48 ff b0 	st.w	r7[-80],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800057be:	e1 b8 00 42 	mfsr	r8,0x108
800057c2:	ef 48 ff b4 	st.w	r7[-76],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800057c6:	ee f8 ff b0 	ld.w	r8,r7[-80]
800057ca:	f1 39 00 08 	ld.ub	r9,r8[8]
800057ce:	30 28       	mov	r8,2
800057d0:	f0 09 18 00 	cp.b	r9,r8
800057d4:	c0 31       	brne	800057da <et024006_PowerUp+0x3a2>
    return false;
800057d6:	30 08       	mov	r8,0
800057d8:	c4 38       	rjmp	8000585e <et024006_PowerUp+0x426>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800057da:	ee f8 ff b0 	ld.w	r8,r7[-80]
800057de:	f1 39 00 08 	ld.ub	r9,r8[8]
800057e2:	30 18       	mov	r8,1
800057e4:	f0 09 18 00 	cp.b	r9,r8
800057e8:	c0 31       	brne	800057ee <et024006_PowerUp+0x3b6>
    return true;
800057ea:	30 18       	mov	r8,1
800057ec:	c3 98       	rjmp	8000585e <et024006_PowerUp+0x426>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800057ee:	ee f8 ff b0 	ld.w	r8,r7[-80]
800057f2:	70 09       	ld.w	r9,r8[0x0]
800057f4:	ee f8 ff b0 	ld.w	r8,r7[-80]
800057f8:	70 18       	ld.w	r8,r8[0x4]
800057fa:	10 39       	cp.w	r9,r8
800057fc:	e0 88 00 1a 	brls	80005830 <et024006_PowerUp+0x3f8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005800:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005804:	70 08       	ld.w	r8,r8[0x0]
80005806:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000580a:	10 39       	cp.w	r9,r8
8000580c:	c1 02       	brcc	8000582c <et024006_PowerUp+0x3f4>
8000580e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005812:	70 18       	ld.w	r8,r8[0x4]
80005814:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005818:	10 39       	cp.w	r9,r8
8000581a:	e0 88 00 09 	brls	8000582c <et024006_PowerUp+0x3f4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000581e:	ee f9 ff b0 	ld.w	r9,r7[-80]
80005822:	30 18       	mov	r8,1
80005824:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005828:	30 18       	mov	r8,1
8000582a:	c1 a8       	rjmp	8000585e <et024006_PowerUp+0x426>
    }
    return false;
8000582c:	30 08       	mov	r8,0
8000582e:	c1 88       	rjmp	8000585e <et024006_PowerUp+0x426>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005830:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005834:	70 08       	ld.w	r8,r8[0x0]
80005836:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000583a:	10 39       	cp.w	r9,r8
8000583c:	c0 93       	brcs	8000584e <et024006_PowerUp+0x416>
8000583e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005842:	70 18       	ld.w	r8,r8[0x4]
80005844:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005848:	10 39       	cp.w	r9,r8
8000584a:	e0 88 00 09 	brls	8000585c <et024006_PowerUp+0x424>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000584e:	ee f9 ff b0 	ld.w	r9,r7[-80]
80005852:	30 18       	mov	r8,1
80005854:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005858:	30 18       	mov	r8,1
8000585a:	c0 28       	rjmp	8000585e <et024006_PowerUp+0x426>
    }
    return false;
8000585c:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000585e:	58 08       	cp.w	r8,0
80005860:	ca b0       	breq	800057b6 <et024006_PowerUp+0x37e>
80005862:	31 b8       	mov	r8,27
80005864:	ef 68 ff bb 	st.b	r7[-69],r8
80005868:	30 88       	mov	r8,8
8000586a:	ef 68 ff ba 	st.b	r7[-70],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000586e:	fc 19 c0 00 	movh	r9,0xc000
80005872:	ef 38 ff bb 	ld.ub	r8,r7[-69]
80005876:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005878:	fc 19 c0 20 	movh	r9,0xc020
8000587c:	ef 38 ff ba 	ld.ub	r8,r7[-70]
80005880:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_DK) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
80005882:	fe f8 02 e2 	ld.w	r8,pc[738]
80005886:	70 08       	ld.w	r8,r8[0x0]
80005888:	32 89       	mov	r9,40
8000588a:	ef 49 ff c0 	st.w	r7[-64],r9
8000588e:	ef 48 ff bc 	st.w	r7[-68],r8
80005892:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005896:	ef 48 ff c8 	st.w	r7[-56],r8
8000589a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000589e:	ef 48 ff c4 	st.w	r7[-60],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800058a2:	ee fb ff c8 	ld.w	r11,r7[-56]
800058a6:	ef 4b ff 00 	st.w	r7[-256],r11
800058aa:	30 0a       	mov	r10,0
800058ac:	ef 4a fe fc 	st.w	r7[-260],r10
800058b0:	ee f9 ff c4 	ld.w	r9,r7[-60]
800058b4:	ef 49 fe f8 	st.w	r7[-264],r9
800058b8:	30 08       	mov	r8,0
800058ba:	ef 48 fe f4 	st.w	r7[-268],r8
800058be:	ee fa fe fc 	ld.w	r10,r7[-260]
800058c2:	ee fc fe f8 	ld.w	r12,r7[-264]
800058c6:	b9 3a       	mul	r10,r12
800058c8:	ee f8 fe f4 	ld.w	r8,r7[-268]
800058cc:	ee fb ff 00 	ld.w	r11,r7[-256]
800058d0:	b7 38       	mul	r8,r11
800058d2:	10 0a       	add	r10,r8
800058d4:	ee fc ff 00 	ld.w	r12,r7[-256]
800058d8:	ee fb fe f8 	ld.w	r11,r7[-264]
800058dc:	f8 0b 06 48 	mulu.d	r8,r12,r11
800058e0:	12 0a       	add	r10,r9
800058e2:	14 99       	mov	r9,r10
800058e4:	e0 6a 03 e7 	mov	r10,999
800058e8:	30 0b       	mov	r11,0
800058ea:	f0 0a 00 0a 	add	r10,r8,r10
800058ee:	f2 0b 00 4b 	adc	r11,r9,r11
800058f2:	e0 68 03 e8 	mov	r8,1000
800058f6:	30 09       	mov	r9,0
800058f8:	f0 1f 00 9c 	mcall	80005b68 <et024006_PowerUp+0x730>
800058fc:	14 98       	mov	r8,r10
800058fe:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005900:	ef 48 ff d0 	st.w	r7[-48],r8
80005904:	ee c8 00 c8 	sub	r8,r7,200
80005908:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000590c:	e1 b8 00 42 	mfsr	r8,0x108
80005910:	10 99       	mov	r9,r8
80005912:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005916:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005918:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000591c:	70 09       	ld.w	r9,r8[0x0]
8000591e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005922:	10 09       	add	r9,r8
80005924:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005928:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000592a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000592e:	30 08       	mov	r8,0
80005930:	f3 68 00 08 	st.b	r9[8],r8
80005934:	ee c8 00 c8 	sub	r8,r7,200
80005938:	ef 48 ff d4 	st.w	r7[-44],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000593c:	e1 b8 00 42 	mfsr	r8,0x108
80005940:	ef 48 ff d8 	st.w	r7[-40],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005944:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005948:	f1 39 00 08 	ld.ub	r9,r8[8]
8000594c:	30 28       	mov	r8,2
8000594e:	f0 09 18 00 	cp.b	r9,r8
80005952:	c0 31       	brne	80005958 <et024006_PowerUp+0x520>
    return false;
80005954:	30 08       	mov	r8,0
80005956:	c4 38       	rjmp	800059dc <et024006_PowerUp+0x5a4>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005958:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000595c:	f1 39 00 08 	ld.ub	r9,r8[8]
80005960:	30 18       	mov	r8,1
80005962:	f0 09 18 00 	cp.b	r9,r8
80005966:	c0 31       	brne	8000596c <et024006_PowerUp+0x534>
    return true;
80005968:	30 18       	mov	r8,1
8000596a:	c3 98       	rjmp	800059dc <et024006_PowerUp+0x5a4>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000596c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005970:	70 09       	ld.w	r9,r8[0x0]
80005972:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005976:	70 18       	ld.w	r8,r8[0x4]
80005978:	10 39       	cp.w	r9,r8
8000597a:	e0 88 00 1a 	brls	800059ae <et024006_PowerUp+0x576>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000597e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005982:	70 08       	ld.w	r8,r8[0x0]
80005984:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005988:	10 39       	cp.w	r9,r8
8000598a:	c1 02       	brcc	800059aa <et024006_PowerUp+0x572>
8000598c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005990:	70 18       	ld.w	r8,r8[0x4]
80005992:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005996:	10 39       	cp.w	r9,r8
80005998:	e0 88 00 09 	brls	800059aa <et024006_PowerUp+0x572>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000599c:	ee f9 ff d4 	ld.w	r9,r7[-44]
800059a0:	30 18       	mov	r8,1
800059a2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800059a6:	30 18       	mov	r8,1
800059a8:	c1 a8       	rjmp	800059dc <et024006_PowerUp+0x5a4>
    }
    return false;
800059aa:	30 08       	mov	r8,0
800059ac:	c1 88       	rjmp	800059dc <et024006_PowerUp+0x5a4>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800059ae:	ee f8 ff d4 	ld.w	r8,r7[-44]
800059b2:	70 08       	ld.w	r8,r8[0x0]
800059b4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800059b8:	10 39       	cp.w	r9,r8
800059ba:	c0 93       	brcs	800059cc <et024006_PowerUp+0x594>
800059bc:	ee f8 ff d4 	ld.w	r8,r7[-44]
800059c0:	70 18       	ld.w	r8,r8[0x4]
800059c2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800059c6:	10 39       	cp.w	r9,r8
800059c8:	e0 88 00 09 	brls	800059da <et024006_PowerUp+0x5a2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800059cc:	ee f9 ff d4 	ld.w	r9,r7[-44]
800059d0:	30 18       	mov	r8,1
800059d2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800059d6:	30 18       	mov	r8,1
800059d8:	c0 28       	rjmp	800059dc <et024006_PowerUp+0x5a4>
    }
    return false;
800059da:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800059dc:	58 08       	cp.w	r8,0
800059de:	ca b0       	breq	80005934 <et024006_PowerUp+0x4fc>
800059e0:	31 b8       	mov	r8,27
800059e2:	ef 68 ff df 	st.b	r7[-33],r8
800059e6:	31 08       	mov	r8,16
800059e8:	ef 68 ff de 	st.b	r7[-34],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800059ec:	fc 19 c0 00 	movh	r9,0xc000
800059f0:	ef 38 ff df 	ld.ub	r8,r7[-33]
800059f4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800059f6:	fc 19 c0 20 	movh	r9,0xc020
800059fa:	ef 38 ff de 	ld.ub	r8,r7[-34]
800059fe:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_PON) );

  // In case the et024006_DisplayOn function is called right after
  cpu_delay_ms( 40, tft_data.cpu_hz );
80005a00:	4d 98       	lddpc	r8,80005b64 <et024006_PowerUp+0x72c>
80005a02:	70 08       	ld.w	r8,r8[0x0]
80005a04:	32 89       	mov	r9,40
80005a06:	ef 49 ff e4 	st.w	r7[-28],r9
80005a0a:	ef 48 ff e0 	st.w	r7[-32],r8
80005a0e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005a12:	ef 48 ff ec 	st.w	r7[-20],r8
80005a16:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005a1a:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005a1e:	ee fa ff ec 	ld.w	r10,r7[-20]
80005a22:	ef 4a ff 10 	st.w	r7[-240],r10
80005a26:	30 09       	mov	r9,0
80005a28:	ef 49 ff 0c 	st.w	r7[-244],r9
80005a2c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005a30:	ef 48 ff 08 	st.w	r7[-248],r8
80005a34:	30 0c       	mov	r12,0
80005a36:	ef 4c ff 04 	st.w	r7[-252],r12
80005a3a:	ee fa ff 0c 	ld.w	r10,r7[-244]
80005a3e:	ee fb ff 08 	ld.w	r11,r7[-248]
80005a42:	b7 3a       	mul	r10,r11
80005a44:	ee f8 ff 04 	ld.w	r8,r7[-252]
80005a48:	ee f9 ff 10 	ld.w	r9,r7[-240]
80005a4c:	b3 38       	mul	r8,r9
80005a4e:	10 0a       	add	r10,r8
80005a50:	ee fc ff 10 	ld.w	r12,r7[-240]
80005a54:	ee fb ff 08 	ld.w	r11,r7[-248]
80005a58:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005a5c:	12 0a       	add	r10,r9
80005a5e:	14 99       	mov	r9,r10
80005a60:	e0 6a 03 e7 	mov	r10,999
80005a64:	30 0b       	mov	r11,0
80005a66:	f0 0a 00 0a 	add	r10,r8,r10
80005a6a:	f2 0b 00 4b 	adc	r11,r9,r11
80005a6e:	e0 68 03 e8 	mov	r8,1000
80005a72:	30 09       	mov	r9,0
80005a74:	f0 1f 00 3d 	mcall	80005b68 <et024006_PowerUp+0x730>
80005a78:	14 98       	mov	r8,r10
80005a7a:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005a7c:	ef 48 ff f4 	st.w	r7[-12],r8
80005a80:	ee c8 00 bc 	sub	r8,r7,188
80005a84:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005a88:	e1 b8 00 42 	mfsr	r8,0x108
80005a8c:	10 99       	mov	r9,r8
80005a8e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005a92:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005a94:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005a98:	70 09       	ld.w	r9,r8[0x0]
80005a9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005a9e:	10 09       	add	r9,r8
80005aa0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005aa4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005aa6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005aaa:	30 08       	mov	r8,0
80005aac:	f3 68 00 08 	st.b	r9[8],r8
80005ab0:	ee c8 00 bc 	sub	r8,r7,188
80005ab4:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005ab8:	e1 b8 00 42 	mfsr	r8,0x108
80005abc:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005ac0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ac4:	f1 39 00 08 	ld.ub	r9,r8[8]
80005ac8:	30 28       	mov	r8,2
80005aca:	f0 09 18 00 	cp.b	r9,r8
80005ace:	c0 31       	brne	80005ad4 <et024006_PowerUp+0x69c>
    return false;
80005ad0:	30 08       	mov	r8,0
80005ad2:	c4 38       	rjmp	80005b58 <et024006_PowerUp+0x720>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005ad4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ad8:	f1 39 00 08 	ld.ub	r9,r8[8]
80005adc:	30 18       	mov	r8,1
80005ade:	f0 09 18 00 	cp.b	r9,r8
80005ae2:	c0 31       	brne	80005ae8 <et024006_PowerUp+0x6b0>
    return true;
80005ae4:	30 18       	mov	r8,1
80005ae6:	c3 98       	rjmp	80005b58 <et024006_PowerUp+0x720>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005ae8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005aec:	70 09       	ld.w	r9,r8[0x0]
80005aee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005af2:	70 18       	ld.w	r8,r8[0x4]
80005af4:	10 39       	cp.w	r9,r8
80005af6:	e0 88 00 1a 	brls	80005b2a <et024006_PowerUp+0x6f2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005afa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005afe:	70 08       	ld.w	r8,r8[0x0]
80005b00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b04:	10 39       	cp.w	r9,r8
80005b06:	c1 02       	brcc	80005b26 <et024006_PowerUp+0x6ee>
80005b08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b0c:	70 18       	ld.w	r8,r8[0x4]
80005b0e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b12:	10 39       	cp.w	r9,r8
80005b14:	e0 88 00 09 	brls	80005b26 <et024006_PowerUp+0x6ee>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005b18:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b1c:	30 18       	mov	r8,1
80005b1e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005b22:	30 18       	mov	r8,1
80005b24:	c1 a8       	rjmp	80005b58 <et024006_PowerUp+0x720>
    }
    return false;
80005b26:	30 08       	mov	r8,0
80005b28:	c1 88       	rjmp	80005b58 <et024006_PowerUp+0x720>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005b2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b2e:	70 08       	ld.w	r8,r8[0x0]
80005b30:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b34:	10 39       	cp.w	r9,r8
80005b36:	c0 93       	brcs	80005b48 <et024006_PowerUp+0x710>
80005b38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b3c:	70 18       	ld.w	r8,r8[0x4]
80005b3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b42:	10 39       	cp.w	r9,r8
80005b44:	e0 88 00 09 	brls	80005b56 <et024006_PowerUp+0x71e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005b48:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b4c:	30 18       	mov	r8,1
80005b4e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005b52:	30 18       	mov	r8,1
80005b54:	c0 28       	rjmp	80005b58 <et024006_PowerUp+0x720>
    }
    return false;
80005b56:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005b58:	58 08       	cp.w	r8,0
80005b5a:	ca b0       	breq	80005ab0 <et024006_PowerUp+0x678>
}
80005b5c:	2b 7d       	sub	sp,-292
80005b5e:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005b62:	00 00       	add	r0,r0
80005b64:	00 00       	add	r0,r0
80005b66:	06 ac       	st.w	r3++,r12
80005b68:	80 00       	ld.sh	r0,r0[0x0]
80005b6a:	e8 10 eb cd 	orl	r0,0xebcd

80005b6c <et024006_PowerOn>:


/*! \brief Turns the display on.
 */
static void et024006_PowerOn( void )
{
80005b6c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005b70:	1a 97       	mov	r7,sp
80005b72:	21 9d       	sub	sp,100
80005b74:	32 6c       	mov	r12,38
80005b76:	ef 6c ff b7 	st.b	r7[-73],r12
80005b7a:	30 4c       	mov	r12,4
80005b7c:	ef 6c ff b6 	st.b	r7[-74],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005b80:	fc 1e c0 00 	movh	lr,0xc000
80005b84:	ef 3c ff b7 	ld.ub	r12,r7[-73]
80005b88:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005b8a:	fc 1e c0 20 	movh	lr,0xc020
80005b8e:	ef 3c ff b6 	ld.ub	r12,r7[-74]
80005b92:	bc 0c       	st.h	lr[0x0],r12
 */
static void et024006_PowerOn( void )
{
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_D0) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
80005b94:	fe fc 02 e0 	ld.w	r12,pc[736]
80005b98:	78 0c       	ld.w	r12,r12[0x0]
80005b9a:	32 8e       	mov	lr,40
80005b9c:	ef 4e ff bc 	st.w	r7[-68],lr
80005ba0:	ef 4c ff b8 	st.w	r7[-72],r12
80005ba4:	ee fc ff bc 	ld.w	r12,r7[-68]
80005ba8:	ef 4c ff c4 	st.w	r7[-60],r12
80005bac:	ee fc ff b8 	ld.w	r12,r7[-72]
80005bb0:	ef 4c ff c0 	st.w	r7[-64],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005bb4:	ee fa ff c4 	ld.w	r10,r7[-60]
80005bb8:	30 0b       	mov	r11,0
80005bba:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005bbe:	30 09       	mov	r9,0
80005bc0:	f6 08 02 4c 	mul	r12,r11,r8
80005bc4:	f2 0a 02 4e 	mul	lr,r9,r10
80005bc8:	1c 0c       	add	r12,lr
80005bca:	f4 08 06 48 	mulu.d	r8,r10,r8
80005bce:	12 0c       	add	r12,r9
80005bd0:	18 99       	mov	r9,r12
80005bd2:	e0 6a 03 e7 	mov	r10,999
80005bd6:	30 0b       	mov	r11,0
80005bd8:	f0 0a 00 0a 	add	r10,r8,r10
80005bdc:	f2 0b 00 4b 	adc	r11,r9,r11
80005be0:	e0 68 03 e8 	mov	r8,1000
80005be4:	30 09       	mov	r9,0
80005be6:	f0 1f 00 a5 	mcall	80005e78 <et024006_PowerOn+0x30c>
80005bea:	14 98       	mov	r8,r10
80005bec:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005bee:	ef 48 ff cc 	st.w	r7[-52],r8
80005bf2:	ee c8 00 64 	sub	r8,r7,100
80005bf6:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005bfa:	e1 b8 00 42 	mfsr	r8,0x108
80005bfe:	10 99       	mov	r9,r8
80005c00:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005c04:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005c06:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005c0a:	70 09       	ld.w	r9,r8[0x0]
80005c0c:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005c10:	10 09       	add	r9,r8
80005c12:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005c16:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005c18:	ee f9 ff c8 	ld.w	r9,r7[-56]
80005c1c:	30 08       	mov	r8,0
80005c1e:	f3 68 00 08 	st.b	r9[8],r8
80005c22:	ee c8 00 64 	sub	r8,r7,100
80005c26:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005c2a:	e1 b8 00 42 	mfsr	r8,0x108
80005c2e:	ef 48 ff d4 	st.w	r7[-44],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005c32:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c36:	f1 39 00 08 	ld.ub	r9,r8[8]
80005c3a:	30 28       	mov	r8,2
80005c3c:	f0 09 18 00 	cp.b	r9,r8
80005c40:	c0 31       	brne	80005c46 <et024006_PowerOn+0xda>
    return false;
80005c42:	30 08       	mov	r8,0
80005c44:	c4 38       	rjmp	80005cca <et024006_PowerOn+0x15e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005c46:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c4a:	f1 39 00 08 	ld.ub	r9,r8[8]
80005c4e:	30 18       	mov	r8,1
80005c50:	f0 09 18 00 	cp.b	r9,r8
80005c54:	c0 31       	brne	80005c5a <et024006_PowerOn+0xee>
    return true;
80005c56:	30 18       	mov	r8,1
80005c58:	c3 98       	rjmp	80005cca <et024006_PowerOn+0x15e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005c5a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c5e:	70 09       	ld.w	r9,r8[0x0]
80005c60:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c64:	70 18       	ld.w	r8,r8[0x4]
80005c66:	10 39       	cp.w	r9,r8
80005c68:	e0 88 00 1a 	brls	80005c9c <et024006_PowerOn+0x130>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005c6c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c70:	70 08       	ld.w	r8,r8[0x0]
80005c72:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005c76:	10 39       	cp.w	r9,r8
80005c78:	c1 02       	brcc	80005c98 <et024006_PowerOn+0x12c>
80005c7a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c7e:	70 18       	ld.w	r8,r8[0x4]
80005c80:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005c84:	10 39       	cp.w	r9,r8
80005c86:	e0 88 00 09 	brls	80005c98 <et024006_PowerOn+0x12c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005c8a:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005c8e:	30 18       	mov	r8,1
80005c90:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005c94:	30 18       	mov	r8,1
80005c96:	c1 a8       	rjmp	80005cca <et024006_PowerOn+0x15e>
    }
    return false;
80005c98:	30 08       	mov	r8,0
80005c9a:	c1 88       	rjmp	80005cca <et024006_PowerOn+0x15e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005c9c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005ca0:	70 08       	ld.w	r8,r8[0x0]
80005ca2:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005ca6:	10 39       	cp.w	r9,r8
80005ca8:	c0 93       	brcs	80005cba <et024006_PowerOn+0x14e>
80005caa:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005cae:	70 18       	ld.w	r8,r8[0x4]
80005cb0:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005cb4:	10 39       	cp.w	r9,r8
80005cb6:	e0 88 00 09 	brls	80005cc8 <et024006_PowerOn+0x15c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005cba:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005cbe:	30 18       	mov	r8,1
80005cc0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005cc4:	30 18       	mov	r8,1
80005cc6:	c0 28       	rjmp	80005cca <et024006_PowerOn+0x15e>
    }
    return false;
80005cc8:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005cca:	58 08       	cp.w	r8,0
80005ccc:	ca b0       	breq	80005c22 <et024006_PowerOn+0xb6>
80005cce:	32 68       	mov	r8,38
80005cd0:	ef 68 ff d9 	st.b	r7[-39],r8
80005cd4:	32 48       	mov	r8,36
80005cd6:	ef 68 ff d8 	st.b	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005cda:	fc 19 c0 00 	movh	r9,0xc000
80005cde:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80005ce2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005ce4:	fc 19 c0 20 	movh	r9,0xc020
80005ce8:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80005cec:	b2 08       	st.h	r9[0x0],r8
80005cee:	32 68       	mov	r8,38
80005cf0:	ef 68 ff db 	st.b	r7[-37],r8
80005cf4:	32 c8       	mov	r8,44
80005cf6:	ef 68 ff da 	st.b	r7[-38],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005cfa:	fc 19 c0 00 	movh	r9,0xc000
80005cfe:	ef 38 ff db 	ld.ub	r8,r7[-37]
80005d02:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005d04:	fc 19 c0 20 	movh	r9,0xc020
80005d08:	ef 38 ff da 	ld.ub	r8,r7[-38]
80005d0c:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D0) );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  cpu_delay_ms( 40, tft_data.cpu_hz );
80005d0e:	4d a8       	lddpc	r8,80005e74 <et024006_PowerOn+0x308>
80005d10:	70 08       	ld.w	r8,r8[0x0]
80005d12:	32 89       	mov	r9,40
80005d14:	ef 49 ff e0 	st.w	r7[-32],r9
80005d18:	ef 48 ff dc 	st.w	r7[-36],r8
80005d1c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005d20:	ef 48 ff e8 	st.w	r7[-24],r8
80005d24:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005d28:	ef 48 ff e4 	st.w	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005d2c:	ee f0 ff e8 	ld.w	r0,r7[-24]
80005d30:	30 01       	mov	r1,0
80005d32:	ee f2 ff e4 	ld.w	r2,r7[-28]
80005d36:	30 03       	mov	r3,0
80005d38:	e2 02 02 4a 	mul	r10,r1,r2
80005d3c:	e6 00 02 48 	mul	r8,r3,r0
80005d40:	10 0a       	add	r10,r8
80005d42:	e0 02 06 48 	mulu.d	r8,r0,r2
80005d46:	12 0a       	add	r10,r9
80005d48:	14 99       	mov	r9,r10
80005d4a:	e0 6a 03 e7 	mov	r10,999
80005d4e:	30 0b       	mov	r11,0
80005d50:	f0 0a 00 0a 	add	r10,r8,r10
80005d54:	f2 0b 00 4b 	adc	r11,r9,r11
80005d58:	e0 68 03 e8 	mov	r8,1000
80005d5c:	30 09       	mov	r9,0
80005d5e:	f0 1f 00 47 	mcall	80005e78 <et024006_PowerOn+0x30c>
80005d62:	14 98       	mov	r8,r10
80005d64:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005d66:	ef 48 ff f0 	st.w	r7[-16],r8
80005d6a:	ee c8 00 58 	sub	r8,r7,88
80005d6e:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005d72:	e1 b8 00 42 	mfsr	r8,0x108
80005d76:	10 99       	mov	r9,r8
80005d78:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005d7c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005d7e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005d82:	70 09       	ld.w	r9,r8[0x0]
80005d84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005d88:	10 09       	add	r9,r8
80005d8a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005d8e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005d90:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005d94:	30 08       	mov	r8,0
80005d96:	f3 68 00 08 	st.b	r9[8],r8
80005d9a:	ee c8 00 58 	sub	r8,r7,88
80005d9e:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005da2:	e1 b8 00 42 	mfsr	r8,0x108
80005da6:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005daa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005dae:	f1 39 00 08 	ld.ub	r9,r8[8]
80005db2:	30 28       	mov	r8,2
80005db4:	f0 09 18 00 	cp.b	r9,r8
80005db8:	c0 31       	brne	80005dbe <et024006_PowerOn+0x252>
    return false;
80005dba:	30 08       	mov	r8,0
80005dbc:	c4 38       	rjmp	80005e42 <et024006_PowerOn+0x2d6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005dbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005dc2:	f1 39 00 08 	ld.ub	r9,r8[8]
80005dc6:	30 18       	mov	r8,1
80005dc8:	f0 09 18 00 	cp.b	r9,r8
80005dcc:	c0 31       	brne	80005dd2 <et024006_PowerOn+0x266>
    return true;
80005dce:	30 18       	mov	r8,1
80005dd0:	c3 98       	rjmp	80005e42 <et024006_PowerOn+0x2d6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005dd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005dd6:	70 09       	ld.w	r9,r8[0x0]
80005dd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005ddc:	70 18       	ld.w	r8,r8[0x4]
80005dde:	10 39       	cp.w	r9,r8
80005de0:	e0 88 00 1a 	brls	80005e14 <et024006_PowerOn+0x2a8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005de4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005de8:	70 08       	ld.w	r8,r8[0x0]
80005dea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005dee:	10 39       	cp.w	r9,r8
80005df0:	c1 02       	brcc	80005e10 <et024006_PowerOn+0x2a4>
80005df2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005df6:	70 18       	ld.w	r8,r8[0x4]
80005df8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005dfc:	10 39       	cp.w	r9,r8
80005dfe:	e0 88 00 09 	brls	80005e10 <et024006_PowerOn+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005e02:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005e06:	30 18       	mov	r8,1
80005e08:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005e0c:	30 18       	mov	r8,1
80005e0e:	c1 a8       	rjmp	80005e42 <et024006_PowerOn+0x2d6>
    }
    return false;
80005e10:	30 08       	mov	r8,0
80005e12:	c1 88       	rjmp	80005e42 <et024006_PowerOn+0x2d6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005e14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e18:	70 08       	ld.w	r8,r8[0x0]
80005e1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e1e:	10 39       	cp.w	r9,r8
80005e20:	c0 93       	brcs	80005e32 <et024006_PowerOn+0x2c6>
80005e22:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e26:	70 18       	ld.w	r8,r8[0x4]
80005e28:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e2c:	10 39       	cp.w	r9,r8
80005e2e:	e0 88 00 09 	brls	80005e40 <et024006_PowerOn+0x2d4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005e32:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005e36:	30 18       	mov	r8,1
80005e38:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005e3c:	30 18       	mov	r8,1
80005e3e:	c0 28       	rjmp	80005e42 <et024006_PowerOn+0x2d6>
    }
    return false;
80005e40:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005e42:	58 08       	cp.w	r8,0
80005e44:	ca b0       	breq	80005d9a <et024006_PowerOn+0x22e>
80005e46:	32 68       	mov	r8,38
80005e48:	ef 68 ff ff 	st.b	r7[-1],r8
80005e4c:	33 c8       	mov	r8,60
80005e4e:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005e52:	fc 19 c0 00 	movh	r9,0xc000
80005e56:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005e5a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005e5c:	fc 19 c0 20 	movh	r9,0xc020
80005e60:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005e64:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON)| (1 << HIMAX_DTE) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  et024006_SetRegister( HIMAX_INTERNAL28, (1 << HIMAX_TEON) );
80005e66:	30 8b       	mov	r11,8
80005e68:	37 0c       	mov	r12,112
80005e6a:	f0 1f 00 05 	mcall	80005e7c <et024006_PowerOn+0x310>
}
80005e6e:	2e 7d       	sub	sp,-100
80005e70:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005e74:	00 00       	add	r0,r0
80005e76:	06 ac       	st.w	r3++,r12
80005e78:	80 00       	ld.sh	r0,r0[0x0]
80005e7a:	e8 10 80 00 	orl	r0,0x8000
80005e7e:	48 80       	lddpc	r0,80005e9c <et024006_PowerOn+0x330>
80005e80:	20 44       	sub	r4,4
80005e82:	65 63       	ld.w	r3,r2[0x58]
80005e84:	69 70       	ld.w	r0,r4[0x5c]
80005e86:	68 65       	ld.w	r5,r4[0x18]
80005e88:	72 65       	ld.w	r5,r9[0x18]
80005e8a:	64 20       	ld.w	r0,r2[0x8]
80005e8c:	00 00       	add	r0,r0
80005e8e:	00 00       	add	r0,r0
80005e90:	20 73       	sub	r3,7
80005e92:	65 63       	ld.w	r3,r2[0x58]
80005e94:	74 6f       	ld.w	pc,r10[0x18]
80005e96:	72 73       	ld.w	r3,r9[0x1c]
80005e98:	00 00       	add	r0,r0
80005e9a:	00 00       	add	r0,r0
80005e9c:	20 45       	sub	r5,4
80005e9e:	6e 63       	ld.w	r3,r7[0x18]
80005ea0:	69 70       	ld.w	r0,r4[0x5c]
80005ea2:	68 65       	ld.w	r5,r4[0x18]
80005ea4:	72 65       	ld.w	r5,r9[0x18]
80005ea6:	64 20       	ld.w	r0,r2[0x8]
80005ea8:	00 00       	add	r0,r0
	...

80005eac <is_sd_mmc_mci_card_present>:


//_____ D E F I N I T I O N S ______________________________________________

bool is_sd_mmc_mci_card_present(uint8_t slot)
{
80005eac:	eb cd 40 80 	pushm	r7,lr
80005eb0:	1a 97       	mov	r7,sp
80005eb2:	20 1d       	sub	sp,4
80005eb4:	18 98       	mov	r8,r12
80005eb6:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80005eba:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80005ebe:	30 18       	mov	r8,1
80005ec0:	f0 09 18 00 	cp.b	r9,r8
80005ec4:	e0 88 00 04 	brls	80005ecc <is_sd_mmc_mci_card_present+0x20>
    return false;
80005ec8:	30 08       	mov	r8,0
80005eca:	c1 88       	rjmp	80005efa <is_sd_mmc_mci_card_present+0x4e>

  switch(slot)
80005ecc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005ed0:	58 08       	cp.w	r8,0
80005ed2:	c0 b0       	breq	80005ee8 <is_sd_mmc_mci_card_present+0x3c>
80005ed4:	58 18       	cp.w	r8,1
80005ed6:	c1 11       	brne	80005ef8 <is_sd_mmc_mci_card_present+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_CARD_DETECT)==SD_SLOT_4BITS_CARD_DETECT_VALUE);
80005ed8:	32 8c       	mov	r12,40
80005eda:	f0 1f 00 0b 	mcall	80005f04 <is_sd_mmc_mci_card_present+0x58>
80005ede:	18 98       	mov	r8,r12
80005ee0:	58 08       	cp.w	r8,0
80005ee2:	5f 08       	sreq	r8
80005ee4:	5c 58       	castu.b	r8
80005ee6:	c0 a8       	rjmp	80005efa <is_sd_mmc_mci_card_present+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_CARD_DETECT)==SD_SLOT_8BITS_CARD_DETECT_VALUE);
80005ee8:	32 bc       	mov	r12,43
80005eea:	f0 1f 00 07 	mcall	80005f04 <is_sd_mmc_mci_card_present+0x58>
80005eee:	18 98       	mov	r8,r12
80005ef0:	58 08       	cp.w	r8,0
80005ef2:	5f 08       	sreq	r8
80005ef4:	5c 58       	castu.b	r8
80005ef6:	c0 28       	rjmp	80005efa <is_sd_mmc_mci_card_present+0x4e>
  }

  return false;
80005ef8:	30 08       	mov	r8,0
}
80005efa:	10 9c       	mov	r12,r8
80005efc:	2f fd       	sub	sp,-4
80005efe:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f02:	00 00       	add	r0,r0
80005f04:	80 00       	ld.sh	r0,r0[0x0]
80005f06:	90 60       	ld.sh	r0,r8[0xc]

80005f08 <is_sd_mmc_mci_card_protected>:

bool is_sd_mmc_mci_card_protected(uint8_t slot)
{
80005f08:	eb cd 40 80 	pushm	r7,lr
80005f0c:	1a 97       	mov	r7,sp
80005f0e:	20 1d       	sub	sp,4
80005f10:	18 98       	mov	r8,r12
80005f12:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80005f16:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80005f1a:	30 18       	mov	r8,1
80005f1c:	f0 09 18 00 	cp.b	r9,r8
80005f20:	e0 88 00 04 	brls	80005f28 <is_sd_mmc_mci_card_protected+0x20>
    return false;
80005f24:	30 08       	mov	r8,0
80005f26:	c1 88       	rjmp	80005f56 <is_sd_mmc_mci_card_protected+0x4e>

  switch(slot)
80005f28:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005f2c:	58 08       	cp.w	r8,0
80005f2e:	c0 b0       	breq	80005f44 <is_sd_mmc_mci_card_protected+0x3c>
80005f30:	58 18       	cp.w	r8,1
80005f32:	c1 11       	brne	80005f54 <is_sd_mmc_mci_card_protected+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_WRITE_PROTECT)==SD_SLOT_4BITS_WRITE_PROTECT_VALUE);
80005f34:	32 6c       	mov	r12,38
80005f36:	f0 1f 00 0b 	mcall	80005f60 <is_sd_mmc_mci_card_protected+0x58>
80005f3a:	18 98       	mov	r8,r12
80005f3c:	58 18       	cp.w	r8,1
80005f3e:	5f 08       	sreq	r8
80005f40:	5c 58       	castu.b	r8
80005f42:	c0 a8       	rjmp	80005f56 <is_sd_mmc_mci_card_protected+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_WRITE_PROTECT)==SD_SLOT_8BITS_WRITE_PROTECT_VALUE);
80005f44:	36 cc       	mov	r12,108
80005f46:	f0 1f 00 07 	mcall	80005f60 <is_sd_mmc_mci_card_protected+0x58>
80005f4a:	18 98       	mov	r8,r12
80005f4c:	58 18       	cp.w	r8,1
80005f4e:	5f 08       	sreq	r8
80005f50:	5c 58       	castu.b	r8
80005f52:	c0 28       	rjmp	80005f56 <is_sd_mmc_mci_card_protected+0x4e>
  }

  return false;
80005f54:	30 08       	mov	r8,0
}
80005f56:	10 9c       	mov	r12,r8
80005f58:	2f fd       	sub	sp,-4
80005f5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f5e:	00 00       	add	r0,r0
80005f60:	80 00       	ld.sh	r0,r0[0x0]
80005f62:	90 60       	ld.sh	r0,r8[0xc]

80005f64 <sd_mmc_mci_get_csd>:

static bool  sd_mmc_mci_get_csd(uint8_t slot)
{
80005f64:	eb cd 40 80 	pushm	r7,lr
80005f68:	1a 97       	mov	r7,sp
80005f6a:	20 fd       	sub	sp,60
80005f6c:	18 98       	mov	r8,r12
80005f6e:	ef 68 ff c4 	st.b	r7[-60],r8

  uint32_t max_Read_DataBlock_Length;
  uint32_t mult;
  uint32_t blocknr;
  uint8_t tmp;
  const uint16_t freq_unit[4] = {10, 100, 1000, 10000};
80005f72:	fe f9 02 b2 	ld.w	r9,pc[690]
80005f76:	ee c8 00 28 	sub	r8,r7,40
80005f7a:	30 8a       	mov	r10,8
80005f7c:	12 9b       	mov	r11,r9
80005f7e:	10 9c       	mov	r12,r8
80005f80:	f0 1f 00 aa 	mcall	80006228 <sd_mmc_mci_get_csd+0x2c4>
  const uint8_t mult_fact[16] = {0, 10, 12, 13, 15, 20, 26, 30, 35, 40, 45, 52, 55, 60, 70, 80}; // MMC tabs...
80005f84:	fe f8 02 a8 	ld.w	r8,pc[680]
80005f88:	ee ca 00 38 	sub	r10,r7,56
80005f8c:	10 9b       	mov	r11,r8
80005f8e:	f6 e8 00 00 	ld.d	r8,r11[0]
80005f92:	f4 e9 00 00 	st.d	r10[0],r8
80005f96:	f6 e8 00 08 	ld.d	r8,r11[8]
80005f9a:	f4 e9 00 08 	st.d	r10[8],r8

  if (slot > MCI_LAST_SLOTS)
80005f9e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80005fa2:	30 18       	mov	r8,1
80005fa4:	f0 09 18 00 	cp.b	r9,r8
80005fa8:	e0 88 00 04 	brls	80005fb0 <sd_mmc_mci_get_csd+0x4c>
    return false;
80005fac:	30 08       	mov	r8,0
80005fae:	c3 69       	rjmp	8000621a <sd_mmc_mci_get_csd+0x2b6>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80005fb0:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80005fb4:	fe f9 02 7c 	ld.w	r9,pc[636]
80005fb8:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005fbc:	10 9a       	mov	r10,r8
80005fbe:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80005fc2:	fe f8 02 72 	ld.w	r8,pc[626]
80005fc6:	70 08       	ld.w	r8,r8[0x0]
80005fc8:	12 9b       	mov	r11,r9
80005fca:	10 9c       	mov	r12,r8
80005fcc:	f0 1f 00 9b 	mcall	80006238 <sd_mmc_mci_get_csd+0x2d4>

  //-- (CMD9)
  if (mci_send_cmd(mci, SD_MMC_SEND_CSD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80005fd0:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80005fd4:	fe f8 02 68 	ld.w	r8,pc[616]
80005fd8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005fdc:	fe f8 02 58 	ld.w	r8,pc[600]
80005fe0:	70 08       	ld.w	r8,r8[0x0]
80005fe2:	12 9a       	mov	r10,r9
80005fe4:	e0 6b 10 89 	mov	r11,4233
80005fe8:	10 9c       	mov	r12,r8
80005fea:	f0 1f 00 96 	mcall	80006240 <sd_mmc_mci_get_csd+0x2dc>
80005fee:	18 98       	mov	r8,r12
80005ff0:	58 08       	cp.w	r8,0
80005ff2:	c0 30       	breq	80005ff8 <sd_mmc_mci_get_csd+0x94>
    return false;
80005ff4:	30 08       	mov	r8,0
80005ff6:	c1 29       	rjmp	8000621a <sd_mmc_mci_get_csd+0x2b6>


  csd.csd[0] = mci_read_response(mci);
80005ff8:	fe f8 02 3c 	ld.w	r8,pc[572]
80005ffc:	70 08       	ld.w	r8,r8[0x0]
80005ffe:	10 9c       	mov	r12,r8
80006000:	f0 1f 00 91 	mcall	80006244 <sd_mmc_mci_get_csd+0x2e0>
80006004:	18 98       	mov	r8,r12
80006006:	ef 48 ff e0 	st.w	r7[-32],r8
  csd.csd[1] = mci_read_response(mci);
8000600a:	fe f8 02 2a 	ld.w	r8,pc[554]
8000600e:	70 08       	ld.w	r8,r8[0x0]
80006010:	10 9c       	mov	r12,r8
80006012:	f0 1f 00 8d 	mcall	80006244 <sd_mmc_mci_get_csd+0x2e0>
80006016:	18 98       	mov	r8,r12
80006018:	ef 48 ff e4 	st.w	r7[-28],r8
  csd.csd[2] = mci_read_response(mci);
8000601c:	fe f8 02 18 	ld.w	r8,pc[536]
80006020:	70 08       	ld.w	r8,r8[0x0]
80006022:	10 9c       	mov	r12,r8
80006024:	f0 1f 00 88 	mcall	80006244 <sd_mmc_mci_get_csd+0x2e0>
80006028:	18 98       	mov	r8,r12
8000602a:	ef 48 ff e8 	st.w	r7[-24],r8
  csd.csd[3] = mci_read_response(mci);
8000602e:	fe f8 02 06 	ld.w	r8,pc[518]
80006032:	70 08       	ld.w	r8,r8[0x0]
80006034:	10 9c       	mov	r12,r8
80006036:	f0 1f 00 84 	mcall	80006244 <sd_mmc_mci_get_csd+0x2e0>
8000603a:	18 98       	mov	r8,r12
8000603c:	ef 48 ff ec 	st.w	r7[-20],r8

  //-- Read "System specification version", only available on MMC card
  // field: SPEC_VERS (only on MMC)
  if (MMC_CARD & g_card_type[slot]) // TO BE ADDED
80006040:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006044:	fe f9 02 04 	ld.w	r9,pc[516]
80006048:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000604c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006050:	5c 58       	castu.b	r8
80006052:	c1 40       	breq	8000607a <sd_mmc_mci_get_csd+0x116>
  {
    if (CSD_SPEC_VER_4_0 == (MSB0(csd.csd[0]) & CSD_MSK_SPEC_VER))
80006054:	ee c8 00 20 	sub	r8,r7,32
80006058:	11 88       	ld.ub	r8,r8[0x0]
8000605a:	e2 18 00 3c 	andl	r8,0x3c,COH
8000605e:	59 08       	cp.w	r8,16
80006060:	c0 d1       	brne	8000607a <sd_mmc_mci_get_csd+0x116>
    {
      g_card_type[slot] |= MMC_CARD_V4;
80006062:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006066:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8000606a:	4f 8a       	lddpc	r10,80006248 <sd_mmc_mci_get_csd+0x2e4>
8000606c:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006070:	a3 a8       	sbr	r8,0x2
80006072:	5c 58       	castu.b	r8
80006074:	4f 5a       	lddpc	r10,80006248 <sd_mmc_mci_get_csd+0x2e4>
80006076:	f4 09 0b 08 	st.b	r10[r9],r8
    }
  }

  //-- Compute MMC/SD speed
  // field: TRAN_SPEED (CSD V1 & V2 are the same)
  g_card_freq[slot]  = mult_fact[csd.csd_v1.tranSpeed >> 3]; // Get Multiplier factor
8000607a:	ef 3a ff c4 	ld.ub	r10,r7[-60]
8000607e:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80006082:	a3 98       	lsr	r8,0x3
80006084:	5c 58       	castu.b	r8
80006086:	ee 08 00 08 	add	r8,r7,r8
8000608a:	f1 38 ff c8 	ld.ub	r8,r8[-56]
8000608e:	4f 09       	lddpc	r9,8000624c <sd_mmc_mci_get_csd+0x2e8>
80006090:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  if (SD_CARD & g_card_type[slot])
80006094:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006098:	4e c9       	lddpc	r9,80006248 <sd_mmc_mci_get_csd+0x2e4>
8000609a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000609e:	e2 18 00 02 	andl	r8,0x2,COH
800060a2:	c2 00       	breq	800060e2 <sd_mmc_mci_get_csd+0x17e>
  {
    // SD card don't have same frequency that MMC card
    if( 26 == g_card_freq[slot] )
800060a4:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800060a8:	4e 98       	lddpc	r8,8000624c <sd_mmc_mci_get_csd+0x2e8>
800060aa:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800060ae:	31 a8       	mov	r8,26
800060b0:	f0 09 19 00 	cp.h	r9,r8
800060b4:	c0 81       	brne	800060c4 <sd_mmc_mci_get_csd+0x160>
    {
      g_card_freq[slot] = 25;
800060b6:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800060ba:	4e 59       	lddpc	r9,8000624c <sd_mmc_mci_get_csd+0x2e8>
800060bc:	31 98       	mov	r8,25
800060be:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
800060c2:	c1 08       	rjmp	800060e2 <sd_mmc_mci_get_csd+0x17e>
    }
    else if( 52 == g_card_freq[slot] )
800060c4:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800060c8:	4e 18       	lddpc	r8,8000624c <sd_mmc_mci_get_csd+0x2e8>
800060ca:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800060ce:	33 48       	mov	r8,52
800060d0:	f0 09 19 00 	cp.h	r9,r8
800060d4:	c0 71       	brne	800060e2 <sd_mmc_mci_get_csd+0x17e>
    {
      g_card_freq[slot] = 50;
800060d6:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800060da:	4d d9       	lddpc	r9,8000624c <sd_mmc_mci_get_csd+0x2e8>
800060dc:	33 28       	mov	r8,50
800060de:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
    }
  }
  g_card_freq[slot] *= freq_unit[ csd.csd_v1.tranSpeed&0x07 ]; // Get transfer rate unit
800060e2:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800060e6:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800060ea:	4d 98       	lddpc	r8,8000624c <sd_mmc_mci_get_csd+0x2e8>
800060ec:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800060f0:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800060f4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800060f8:	a1 78       	lsl	r8,0x1
800060fa:	ee 08 00 08 	add	r8,r7,r8
800060fe:	f1 08 ff d8 	ld.sh	r8,r8[-40]
80006102:	f2 08 02 48 	mul	r8,r9,r8
80006106:	5c 88       	casts.h	r8
80006108:	4d 19       	lddpc	r9,8000624c <sd_mmc_mci_get_csd+0x2e8>
8000610a:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

  //-- Compute card size in number of block
  // field: WRITE_BL_LEN, READ_BL_LEN, C_SIZE (CSD V1 & V2 are not the same)
  if (SD_CARD_HC & g_card_type[slot])
8000610e:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006112:	4c e9       	lddpc	r9,80006248 <sd_mmc_mci_get_csd+0x2e4>
80006114:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006118:	e2 18 00 10 	andl	r8,0x10,COH
8000611c:	c2 10       	breq	8000615e <sd_mmc_mci_get_csd+0x1fa>
  {
    g_card_size[slot] = (csd.csd_v2.deviceSizeH<<16)+(csd.csd_v2.deviceSizeL&0xFFff);
8000611e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006122:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006126:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000612a:	5c 58       	castu.b	r8
8000612c:	f0 0a 15 10 	lsl	r10,r8,0x10
80006130:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80006134:	5c 78       	castu.h	r8
80006136:	f4 08 00 08 	add	r8,r10,r8
8000613a:	10 9a       	mov	r10,r8
8000613c:	4c 58       	lddpc	r8,80006250 <sd_mmc_mci_get_csd+0x2ec>
8000613e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

    // memory capacity = (C_SIZE+1) * 1K sector
    g_card_size[slot] = (g_card_size[slot] + 1) << 10;  // unit 512B
80006142:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006146:	ef 3a ff c4 	ld.ub	r10,r7[-60]
8000614a:	4c 28       	lddpc	r8,80006250 <sd_mmc_mci_get_csd+0x2ec>
8000614c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80006150:	2f f8       	sub	r8,-1
80006152:	f0 0a 15 0a 	lsl	r10,r8,0xa
80006156:	4b f8       	lddpc	r8,80006250 <sd_mmc_mci_get_csd+0x2ec>
80006158:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000615c:	c5 e8       	rjmp	80006218 <sd_mmc_mci_get_csd+0x2b4>
  }
  else
  {
    // Check block size
    tmp = csd.csd_v1.writeBlLen; // WRITE_BL_LEN
8000615e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006162:	f1 d8 c2 c4 	bfextu	r8,r8,0x16,0x4
80006166:	5c 58       	castu.b	r8
80006168:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
8000616c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006170:	30 88       	mov	r8,8
80006172:	f0 09 18 00 	cp.b	r9,r8
80006176:	e0 8b 00 04 	brhi	8000617e <sd_mmc_mci_get_csd+0x21a>
      return false;  // block size < 512B not supported by firmware
8000617a:	30 08       	mov	r8,0
8000617c:	c4 f8       	rjmp	8000621a <sd_mmc_mci_get_csd+0x2b6>

    tmp = csd.csd_v1.readBlLen; // READ_BL_LEN
8000617e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006182:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
80006186:	5c 58       	castu.b	r8
80006188:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
8000618c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006190:	30 88       	mov	r8,8
80006192:	f0 09 18 00 	cp.b	r9,r8
80006196:	e0 8b 00 04 	brhi	8000619e <sd_mmc_mci_get_csd+0x23a>
      return false;  // block size < 512B not supported by firmware
8000619a:	30 08       	mov	r8,0
8000619c:	c3 f8       	rjmp	8000621a <sd_mmc_mci_get_csd+0x2b6>

    //// Compute Memory Capacity
    // compute MULT
    mult = 1 << (csd.csd_v1.cSizeMult + 2);
8000619e:	ee f8 ff e8 	ld.w	r8,r7[-24]
800061a2:	f1 d8 c1 e3 	bfextu	r8,r8,0xf,0x3
800061a6:	5c 58       	castu.b	r8
800061a8:	2f e8       	sub	r8,-2
800061aa:	30 19       	mov	r9,1
800061ac:	f2 08 09 48 	lsl	r8,r9,r8
800061b0:	ef 48 ff f4 	st.w	r7[-12],r8
    max_Read_DataBlock_Length = 1<<csd.csd_v1.readBlLen;
800061b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800061b8:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
800061bc:	5c 58       	castu.b	r8
800061be:	30 19       	mov	r9,1
800061c0:	f2 08 09 48 	lsl	r8,r9,r8
800061c4:	ef 48 ff f0 	st.w	r7[-16],r8
    // compute MSB of C_SIZE
    blocknr = csd.csd_v1.deviceSizeH << 2;
800061c8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800061cc:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
800061d0:	5c 88       	casts.h	r8
800061d2:	5c 78       	castu.h	r8
800061d4:	a3 68       	lsl	r8,0x2
800061d6:	ef 48 ff f8 	st.w	r7[-8],r8
    // compute MULT * (LSB of C-SIZE + MSB already computed + 1) = BLOCKNR
    blocknr = mult * ( blocknr + csd.csd_v1.deviceSizeL + 1 );
800061da:	ee f8 ff e8 	ld.w	r8,r7[-24]
800061de:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
800061e2:	5c 58       	castu.b	r8
800061e4:	10 99       	mov	r9,r8
800061e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061ea:	f2 08 00 08 	add	r8,r9,r8
800061ee:	f0 c9 ff ff 	sub	r9,r8,-1
800061f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061f6:	f2 08 02 48 	mul	r8,r9,r8
800061fa:	ef 48 ff f8 	st.w	r7[-8],r8
    g_card_size[slot] = ((max_Read_DataBlock_Length * blocknr)/512);
800061fe:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006202:	ee fa ff f0 	ld.w	r10,r7[-16]
80006206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000620a:	f4 08 02 48 	mul	r8,r10,r8
8000620e:	f0 0a 16 09 	lsr	r10,r8,0x9
80006212:	49 08       	lddpc	r8,80006250 <sd_mmc_mci_get_csd+0x2ec>
80006214:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  }

  return true;
80006218:	30 18       	mov	r8,1
}
8000621a:	10 9c       	mov	r12,r8
8000621c:	2f 1d       	sub	sp,-60
8000621e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006222:	00 00       	add	r0,r0
80006224:	80 00       	ld.sh	r0,r0[0x0]
80006226:	f2 bc       	*unknown*
80006228:	80 00       	ld.sh	r0,r0[0x0]
8000622a:	ea a2       	*unknown*
8000622c:	80 00       	ld.sh	r0,r0[0x0]
8000622e:	f2 c4 00 00 	sub	r4,r9,0
80006232:	0b d8       	ld.ub	r8,r5[0x5]
80006234:	00 00       	add	r0,r0
80006236:	01 34       	ld.ub	r4,r0++
80006238:	80 00       	ld.sh	r0,r0[0x0]
8000623a:	97 cc       	st.w	r11[0x30],r12
8000623c:	00 00       	add	r0,r0
8000623e:	09 c8       	ld.ub	r8,r4[0x4]
80006240:	80 00       	ld.sh	r0,r0[0x0]
80006242:	96 34       	ld.sh	r4,r11[0x6]
80006244:	80 00       	ld.sh	r0,r0[0x0]
80006246:	97 6c       	st.w	r11[0x18],r12
80006248:	00 00       	add	r0,r0
8000624a:	0d e0       	ld.ub	r0,r6[0x6]
8000624c:	00 00       	add	r0,r0
8000624e:	0b da       	ld.ub	r10,r5[0x5]
80006250:	00 00       	add	r0,r0
80006252:	09 d0       	ld.ub	r0,r4[0x5]

80006254 <sd_mmc_get_ext_csd>:

static bool  sd_mmc_get_ext_csd( uint8_t slot )
{
80006254:	eb cd 40 80 	pushm	r7,lr
80006258:	1a 97       	mov	r7,sp
8000625a:	20 ad       	sub	sp,40
8000625c:	18 98       	mov	r8,r12
8000625e:	ef 68 ff d8 	st.b	r7[-40],r8
  uint8_t  i;
  uint32_t val;

  if (slot > MCI_LAST_SLOTS)
80006262:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006266:	30 18       	mov	r8,1
80006268:	f0 09 18 00 	cp.b	r9,r8
8000626c:	e0 88 00 04 	brls	80006274 <sd_mmc_get_ext_csd+0x20>
    return false;
80006270:	30 08       	mov	r8,0
80006272:	cb e8       	rjmp	800063ee <sd_mmc_get_ext_csd+0x19a>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006274:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80006278:	4e 09       	lddpc	r9,800063f8 <sd_mmc_get_ext_csd+0x1a4>
8000627a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000627e:	10 9a       	mov	r10,r8
80006280:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006284:	4d e8       	lddpc	r8,800063fc <sd_mmc_get_ext_csd+0x1a8>
80006286:	70 08       	ld.w	r8,r8[0x0]
80006288:	12 9b       	mov	r11,r9
8000628a:	10 9c       	mov	r12,r8
8000628c:	f0 1f 00 5d 	mcall	80006400 <sd_mmc_get_ext_csd+0x1ac>

  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE); // Ext CSD = 512B size
80006290:	4d b8       	lddpc	r8,800063fc <sd_mmc_get_ext_csd+0x1a8>
80006292:	70 08       	ld.w	r8,r8[0x0]
80006294:	e0 6b 02 00 	mov	r11,512
80006298:	10 9c       	mov	r12,r8
8000629a:	f0 1f 00 5b 	mcall	80006404 <sd_mmc_get_ext_csd+0x1b0>
  mci_set_block_count(mci, 1);
8000629e:	4d 88       	lddpc	r8,800063fc <sd_mmc_get_ext_csd+0x1a8>
800062a0:	70 08       	ld.w	r8,r8[0x0]
800062a2:	30 1b       	mov	r11,1
800062a4:	10 9c       	mov	r12,r8
800062a6:	f0 1f 00 59 	mcall	80006408 <sd_mmc_get_ext_csd+0x1b4>

  //** (CMD8)
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
800062aa:	4d 58       	lddpc	r8,800063fc <sd_mmc_get_ext_csd+0x1a8>
800062ac:	70 08       	ld.w	r8,r8[0x0]
800062ae:	30 0a       	mov	r10,0
800062b0:	e4 7b 10 48 	mov	r11,331848
800062b4:	10 9c       	mov	r12,r8
800062b6:	f0 1f 00 56 	mcall	8000640c <sd_mmc_get_ext_csd+0x1b8>
800062ba:	18 98       	mov	r8,r12
800062bc:	58 08       	cp.w	r8,0
800062be:	c0 30       	breq	800062c4 <sd_mmc_get_ext_csd+0x70>
    return false;
800062c0:	30 08       	mov	r8,0
800062c2:	c9 68       	rjmp	800063ee <sd_mmc_get_ext_csd+0x19a>

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
800062c4:	34 08       	mov	r8,64
800062c6:	ef 68 ff e3 	st.b	r7[-29],r8
800062ca:	c8 a8       	rjmp	800063de <sd_mmc_get_ext_csd+0x18a>
  {
    while(!(mci_rx_ready(mci)));
800062cc:	4c c8       	lddpc	r8,800063fc <sd_mmc_get_ext_csd+0x1a8>
800062ce:	70 08       	ld.w	r8,r8[0x0]
800062d0:	ef 48 ff e4 	st.w	r7[-28],r8
800062d4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800062d8:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800062dc:	4c d8       	lddpc	r8,80006410 <sd_mmc_get_ext_csd+0x1bc>
800062de:	70 08       	ld.w	r8,r8[0x0]
800062e0:	10 99       	mov	r9,r8
800062e2:	e6 19 01 e0 	andh	r9,0x1e0,COH
800062e6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800062ea:	71 08       	ld.w	r8,r8[0x40]
800062ec:	f3 e8 10 08 	or	r8,r9,r8
800062f0:	10 99       	mov	r9,r8
800062f2:	4c 88       	lddpc	r8,80006410 <sd_mmc_get_ext_csd+0x1bc>
800062f4:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800062f6:	4c 78       	lddpc	r8,80006410 <sd_mmc_get_ext_csd+0x1bc>
800062f8:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
800062fa:	e2 18 00 02 	andl	r8,0x2,COH
800062fe:	5f 18       	srne	r8
80006300:	58 08       	cp.w	r8,0
80006302:	ce 50       	breq	800062cc <sd_mmc_get_ext_csd+0x78>
    mci_rd_data(mci);
80006304:	4b e8       	lddpc	r8,800063fc <sd_mmc_get_ext_csd+0x1a8>
80006306:	70 08       	ld.w	r8,r8[0x0]
80006308:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
8000630c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006310:	70 c8       	ld.w	r8,r8[0x30]
    while(!(mci_rx_ready(mci)));
80006312:	4b b8       	lddpc	r8,800063fc <sd_mmc_get_ext_csd+0x1a8>
80006314:	70 08       	ld.w	r8,r8[0x0]
80006316:	ef 48 ff f0 	st.w	r7[-16],r8
8000631a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000631e:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006322:	4b c8       	lddpc	r8,80006410 <sd_mmc_get_ext_csd+0x1bc>
80006324:	70 08       	ld.w	r8,r8[0x0]
80006326:	10 99       	mov	r9,r8
80006328:	e6 19 01 e0 	andh	r9,0x1e0,COH
8000632c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006330:	71 08       	ld.w	r8,r8[0x40]
80006332:	f3 e8 10 08 	or	r8,r9,r8
80006336:	10 99       	mov	r9,r8
80006338:	4b 68       	lddpc	r8,80006410 <sd_mmc_get_ext_csd+0x1bc>
8000633a:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
8000633c:	4b 58       	lddpc	r8,80006410 <sd_mmc_get_ext_csd+0x1bc>
8000633e:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006340:	e2 18 00 02 	andl	r8,0x2,COH
80006344:	5f 18       	srne	r8
80006346:	58 08       	cp.w	r8,0
80006348:	ce 50       	breq	80006312 <sd_mmc_get_ext_csd+0xbe>
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
8000634a:	ef 39 ff e3 	ld.ub	r9,r7[-29]
8000634e:	32 68       	mov	r8,38
80006350:	f0 09 18 00 	cp.b	r9,r8
80006354:	c1 c1       	brne	8000638c <sd_mmc_get_ext_csd+0x138>
80006356:	ef 38 ff d8 	ld.ub	r8,r7[-40]
8000635a:	4a f9       	lddpc	r9,80006414 <sd_mmc_get_ext_csd+0x1c0>
8000635c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006360:	e2 18 00 20 	andl	r8,0x20,COH
80006364:	c1 40       	breq	8000638c <sd_mmc_get_ext_csd+0x138>
    {
      // If MMC HC then read Sector Count. Byte 212 is LSB, Byte 215 is MSB.
      val = mci_rd_data(mci);
80006366:	4a 68       	lddpc	r8,800063fc <sd_mmc_get_ext_csd+0x1a8>
80006368:	70 08       	ld.w	r8,r8[0x0]
8000636a:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
8000636e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006372:	70 c8       	ld.w	r8,r8[0x30]
80006374:	ef 48 ff dc 	st.w	r7[-36],r8
      g_card_size[slot] = swap32(val);
80006378:	ef 39 ff d8 	ld.ub	r9,r7[-40]
8000637c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006380:	5c b8       	swap.b	r8
80006382:	10 9a       	mov	r10,r8
80006384:	4a 58       	lddpc	r8,80006418 <sd_mmc_get_ext_csd+0x1c4>
80006386:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  for (i = (512L/8); i!=0; i--)
  {
    while(!(mci_rx_ready(mci)));
    mci_rd_data(mci);
    while(!(mci_rx_ready(mci)));
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
8000638a:	c2 58       	rjmp	800063d4 <sd_mmc_get_ext_csd+0x180>
      val = mci_rd_data(mci);
      g_card_size[slot] = swap32(val);
    }
    else
    {
      val = mci_rd_data(mci);
8000638c:	49 c8       	lddpc	r8,800063fc <sd_mmc_get_ext_csd+0x1a8>
8000638e:	70 08       	ld.w	r8,r8[0x0]
80006390:	ef 48 ff fc 	st.w	r7[-4],r8
80006394:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006398:	70 c8       	ld.w	r8,r8[0x30]
8000639a:	ef 48 ff dc 	st.w	r7[-36],r8
      if( (64-24) == i )
8000639e:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800063a2:	32 88       	mov	r8,40
800063a4:	f0 09 18 00 	cp.b	r9,r8
800063a8:	c1 61       	brne	800063d4 <sd_mmc_get_ext_csd+0x180>
      {  // Read byte at offset 196
        if( MSB0(val) & 0x02 )
800063aa:	ee c8 00 24 	sub	r8,r7,36
800063ae:	11 88       	ld.ub	r8,r8[0x0]
800063b0:	e2 18 00 02 	andl	r8,0x2,COH
800063b4:	c0 90       	breq	800063c6 <sd_mmc_get_ext_csd+0x172>
          g_card_freq[slot] = 52*1000;
800063b6:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800063ba:	49 99       	lddpc	r9,8000641c <sd_mmc_get_ext_csd+0x1c8>
800063bc:	fe 78 cb 20 	mov	r8,-13536
800063c0:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
800063c4:	c0 88       	rjmp	800063d4 <sd_mmc_get_ext_csd+0x180>
        else
          g_card_freq[slot] = 26*1000;
800063c6:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800063ca:	49 59       	lddpc	r9,8000641c <sd_mmc_get_ext_csd+0x1c8>
800063cc:	e0 68 65 90 	mov	r8,26000
800063d0:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
    return false;

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
800063d4:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800063d8:	20 18       	sub	r8,1
800063da:	ef 68 ff e3 	st.b	r7[-29],r8
800063de:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800063e2:	30 08       	mov	r8,0
800063e4:	f0 09 18 00 	cp.b	r9,r8
800063e8:	fe 91 ff 72 	brne	800062cc <sd_mmc_get_ext_csd+0x78>
          g_card_freq[slot] = 26*1000;
      }
    }
  }

   return true;
800063ec:	30 18       	mov	r8,1
}
800063ee:	10 9c       	mov	r12,r8
800063f0:	2f 6d       	sub	sp,-40
800063f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800063f6:	00 00       	add	r0,r0
800063f8:	00 00       	add	r0,r0
800063fa:	0b d8       	ld.ub	r8,r5[0x5]
800063fc:	00 00       	add	r0,r0
800063fe:	01 34       	ld.ub	r4,r0++
80006400:	80 00       	ld.sh	r0,r0[0x0]
80006402:	97 cc       	st.w	r11[0x30],r12
80006404:	80 00       	ld.sh	r0,r0[0x0]
80006406:	95 b4       	st.w	r10[0x2c],r4
80006408:	80 00       	ld.sh	r0,r0[0x0]
8000640a:	95 fe       	st.w	r10[0x3c],lr
8000640c:	80 00       	ld.sh	r0,r0[0x0]
8000640e:	96 34       	ld.sh	r4,r11[0x6]
80006410:	00 00       	add	r0,r0
80006412:	08 50       	eor	r0,r4
80006414:	00 00       	add	r0,r0
80006416:	0d e0       	ld.ub	r0,r6[0x6]
80006418:	00 00       	add	r0,r0
8000641a:	09 d0       	ld.ub	r0,r4[0x5]
8000641c:	00 00       	add	r0,r0
8000641e:	0b da       	ld.ub	r10,r5[0x5]

80006420 <sd_mmc_set_block_len>:

static bool  sd_mmc_set_block_len(uint8_t slot, uint16_t length )
{
80006420:	eb cd 40 80 	pushm	r7,lr
80006424:	1a 97       	mov	r7,sp
80006426:	20 2d       	sub	sp,8
80006428:	18 99       	mov	r9,r12
8000642a:	16 98       	mov	r8,r11
8000642c:	ef 69 ff fc 	st.b	r7[-4],r9
80006430:	ef 58 ff f8 	st.h	r7[-8],r8
  if (slot > MCI_LAST_SLOTS)
80006434:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006438:	30 18       	mov	r8,1
8000643a:	f0 09 18 00 	cp.b	r9,r8
8000643e:	e0 88 00 04 	brls	80006446 <sd_mmc_set_block_len+0x26>
    return false;
80006442:	30 08       	mov	r8,0
80006444:	c3 c8       	rjmp	800064bc <sd_mmc_set_block_len+0x9c>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006446:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000644a:	49 f9       	lddpc	r9,800064c4 <sd_mmc_set_block_len+0xa4>
8000644c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006450:	10 9a       	mov	r10,r8
80006452:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006456:	49 d8       	lddpc	r8,800064c8 <sd_mmc_set_block_len+0xa8>
80006458:	70 08       	ld.w	r8,r8[0x0]
8000645a:	12 9b       	mov	r11,r9
8000645c:	10 9c       	mov	r12,r8
8000645e:	f0 1f 00 1c 	mcall	800064cc <sd_mmc_set_block_len+0xac>

  if(mci_send_cmd(mci, SD_MMC_SET_BLOCKLEN_CMD, length)!=MCI_SUCCESS)
80006462:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80006466:	49 98       	lddpc	r8,800064c8 <sd_mmc_set_block_len+0xa8>
80006468:	70 08       	ld.w	r8,r8[0x0]
8000646a:	12 9a       	mov	r10,r9
8000646c:	e0 6b 10 50 	mov	r11,4176
80006470:	10 9c       	mov	r12,r8
80006472:	f0 1f 00 18 	mcall	800064d0 <sd_mmc_set_block_len+0xb0>
80006476:	18 98       	mov	r8,r12
80006478:	58 08       	cp.w	r8,0
8000647a:	c0 30       	breq	80006480 <sd_mmc_set_block_len+0x60>
    return false;
8000647c:	30 08       	mov	r8,0
8000647e:	c1 f8       	rjmp	800064bc <sd_mmc_set_block_len+0x9c>

  // check response, card must be in TRAN state
  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
80006480:	49 28       	lddpc	r8,800064c8 <sd_mmc_set_block_len+0xa8>
80006482:	70 08       	ld.w	r8,r8[0x0]
80006484:	10 9c       	mov	r12,r8
80006486:	f0 1f 00 14 	mcall	800064d4 <sd_mmc_set_block_len+0xb4>
8000648a:	18 98       	mov	r8,r12
8000648c:	e4 18 e0 02 	andh	r8,0xe002
80006490:	e0 18 0e 00 	andl	r8,0xe00
80006494:	e0 48 08 00 	cp.w	r8,2048
80006498:	c0 30       	breq	8000649e <sd_mmc_set_block_len+0x7e>
    return false;
8000649a:	30 08       	mov	r8,0
8000649c:	c1 08       	rjmp	800064bc <sd_mmc_set_block_len+0x9c>

  mci_set_block_size(mci, length);
8000649e:	ef 19 ff f8 	ld.uh	r9,r7[-8]
800064a2:	48 a8       	lddpc	r8,800064c8 <sd_mmc_set_block_len+0xa8>
800064a4:	70 08       	ld.w	r8,r8[0x0]
800064a6:	12 9b       	mov	r11,r9
800064a8:	10 9c       	mov	r12,r8
800064aa:	f0 1f 00 0c 	mcall	800064d8 <sd_mmc_set_block_len+0xb8>
  mci_set_block_count(mci, 1);
800064ae:	48 78       	lddpc	r8,800064c8 <sd_mmc_set_block_len+0xa8>
800064b0:	70 08       	ld.w	r8,r8[0x0]
800064b2:	30 1b       	mov	r11,1
800064b4:	10 9c       	mov	r12,r8
800064b6:	f0 1f 00 0a 	mcall	800064dc <sd_mmc_set_block_len+0xbc>
  return true;
800064ba:	30 18       	mov	r8,1
}
800064bc:	10 9c       	mov	r12,r8
800064be:	2f ed       	sub	sp,-8
800064c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800064c4:	00 00       	add	r0,r0
800064c6:	0b d8       	ld.ub	r8,r5[0x5]
800064c8:	00 00       	add	r0,r0
800064ca:	01 34       	ld.ub	r4,r0++
800064cc:	80 00       	ld.sh	r0,r0[0x0]
800064ce:	97 cc       	st.w	r11[0x30],r12
800064d0:	80 00       	ld.sh	r0,r0[0x0]
800064d2:	96 34       	ld.sh	r4,r11[0x6]
800064d4:	80 00       	ld.sh	r0,r0[0x0]
800064d6:	97 6c       	st.w	r11[0x18],r12
800064d8:	80 00       	ld.sh	r0,r0[0x0]
800064da:	95 b4       	st.w	r10[0x2c],r4
800064dc:	80 00       	ld.sh	r0,r0[0x0]
800064de:	95 fe       	st.w	r10[0x3c],lr

800064e0 <sd_mmc_mci_init>:

bool sd_mmc_mci_init(unsigned char card_slot, long pbb_hz, long cpu_hz)
{
800064e0:	eb cd 40 80 	pushm	r7,lr
800064e4:	1a 97       	mov	r7,sp
800064e6:	20 5d       	sub	sp,20
800064e8:	18 98       	mov	r8,r12
800064ea:	ef 4b ff f0 	st.w	r7[-16],r11
800064ee:	ef 4a ff ec 	st.w	r7[-20],r10
800064f2:	ef 68 ff f4 	st.b	r7[-12],r8
    unsigned long                 scfg;
    avr32_hmatrix_scfg_t          SCFG;
  } u_avr32_hmatrix_scfg;

  // For the USBB DMA HMATRIX master, use infinite length burst.
  u_avr32_hmatrix_mcfg.mcfg = AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
800064f6:	fe 68 10 00 	mov	r8,-126976
800064fa:	70 68       	ld.w	r8,r8[0x18]
800064fc:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_hmatrix_mcfg.MCFG.ulbt = AVR32_HMATRIX_ULBT_INFINITE;
80006500:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006504:	30 09       	mov	r9,0
80006506:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000650a:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] = u_avr32_hmatrix_mcfg.mcfg;
8000650e:	fe 68 10 00 	mov	r8,-126976
80006512:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006516:	91 69       	st.w	r8[0x18],r9

  // For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
  u_avr32_hmatrix_scfg.scfg = AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
80006518:	fe 68 10 00 	mov	r8,-126976
8000651c:	71 58       	ld.w	r8,r8[0x54]
8000651e:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.fixed_defmstr = AVR32_HMATRIX_MASTER_USBB_DMA;
80006522:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006526:	30 69       	mov	r9,6
80006528:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
8000652c:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
80006530:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006534:	30 29       	mov	r9,2
80006536:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000653a:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] = u_avr32_hmatrix_scfg.scfg;
8000653e:	fe 68 10 00 	mov	r8,-126976
80006542:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006546:	f1 49 00 54 	st.w	r8[84],r9

  g_pbb_hz = pbb_hz;
8000654a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000654e:	49 08       	lddpc	r8,8000658c <sd_mmc_mci_init+0xac>
80006550:	91 09       	st.w	r8[0x0],r9
  g_cpu_hz = cpu_hz;
80006552:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006556:	48 f8       	lddpc	r8,80006590 <sd_mmc_mci_init+0xb0>
80006558:	91 09       	st.w	r8[0x0],r9

  // Init MCI controller
  if (mci_init(mci, card_slot, pbb_hz)!=MCI_SUCCESS)
8000655a:	ee fa ff f0 	ld.w	r10,r7[-16]
8000655e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006562:	48 d8       	lddpc	r8,80006594 <sd_mmc_mci_init+0xb4>
80006564:	70 08       	ld.w	r8,r8[0x0]
80006566:	12 9b       	mov	r11,r9
80006568:	10 9c       	mov	r12,r8
8000656a:	f0 1f 00 0c 	mcall	80006598 <sd_mmc_mci_init+0xb8>
8000656e:	18 98       	mov	r8,r12
80006570:	58 08       	cp.w	r8,0
80006572:	c0 30       	breq	80006578 <sd_mmc_mci_init+0x98>
    return false;
80006574:	30 08       	mov	r8,0
80006576:	c0 78       	rjmp	80006584 <sd_mmc_mci_init+0xa4>

  // Default card initialization. This can be removed since the card init will
  // automatically be done when needed.
  sd_mmc_mci_card_init(card_slot);
80006578:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000657c:	10 9c       	mov	r12,r8
8000657e:	f0 1f 00 08 	mcall	8000659c <sd_mmc_mci_init+0xbc>
  return true;
80006582:	30 18       	mov	r8,1
}
80006584:	10 9c       	mov	r12,r8
80006586:	2f bd       	sub	sp,-20
80006588:	e3 cd 80 80 	ldm	sp++,r7,pc
8000658c:	00 00       	add	r0,r0
8000658e:	06 b8       	st.h	r3++,r8
80006590:	00 00       	add	r0,r0
80006592:	06 bc       	st.h	r3++,r12
80006594:	00 00       	add	r0,r0
80006596:	01 34       	ld.ub	r4,r0++
80006598:	80 00       	ld.sh	r0,r0[0x0]
8000659a:	95 00       	st.w	r10[0x0],r0
8000659c:	80 00       	ld.sh	r0,r0[0x0]
8000659e:	65 a0       	ld.w	r0,r2[0x68]

800065a0 <sd_mmc_mci_card_init>:

bool sd_mmc_mci_card_init(unsigned char slot)
{
800065a0:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
800065a4:	1a 97       	mov	r7,sp
800065a6:	21 7d       	sub	sp,92
800065a8:	18 98       	mov	r8,r12
800065aa:	ef 68 ff a4 	st.b	r7[-92],r8
  uint32_t response;

  if (true == sd_mmc_mci_init_done[slot])
800065ae:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800065b2:	fe f9 08 7a 	ld.w	r9,pc[2170]
800065b6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800065ba:	58 08       	cp.w	r8,0
800065bc:	c0 40       	breq	800065c4 <sd_mmc_mci_card_init+0x24>
    return true;
800065be:	30 18       	mov	r8,1
800065c0:	e0 8f 04 31 	bral	80006e22 <sd_mmc_mci_card_init+0x882>

  // Default card is not known.
  g_card_type[slot] = UNKNOWN_CARD;
800065c4:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800065c8:	fe fa 08 68 	ld.w	r10,pc[2152]
800065cc:	30 08       	mov	r8,0
800065ce:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default bus size is 1 bit.
  g_card_bus_width[slot] = MCI_BUS_SIZE_1_BIT;
800065d2:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800065d6:	fe fa 08 5e 	ld.w	r10,pc[2142]
800065da:	30 08       	mov	r8,0
800065dc:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default card speed and disable High Speed mode.
  mci_init(mci, slot, g_pbb_hz);
800065e0:	fe f8 08 58 	ld.w	r8,pc[2136]
800065e4:	70 0a       	ld.w	r10,r8[0x0]
800065e6:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800065ea:	fe f8 08 52 	ld.w	r8,pc[2130]
800065ee:	70 08       	ld.w	r8,r8[0x0]
800065f0:	12 9b       	mov	r11,r9
800065f2:	10 9c       	mov	r12,r8
800065f4:	f0 1f 02 13 	mcall	80006e40 <sd_mmc_mci_card_init+0x8a0>

  // Wait for 1ms, then wait for 74 more clock cycles (see MMC norms)
  if (mci_send_cmd(mci, SD_MMC_INIT_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800065f8:	fe f8 08 44 	ld.w	r8,pc[2116]
800065fc:	70 08       	ld.w	r8,r8[0x0]
800065fe:	3f fa       	mov	r10,-1
80006600:	e0 6b 01 00 	mov	r11,256
80006604:	10 9c       	mov	r12,r8
80006606:	f0 1f 02 10 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
8000660a:	18 98       	mov	r8,r12
8000660c:	58 08       	cp.w	r8,0
8000660e:	c0 40       	breq	80006616 <sd_mmc_mci_card_init+0x76>
    return false;
80006610:	30 08       	mov	r8,0
80006612:	e0 8f 04 08 	bral	80006e22 <sd_mmc_mci_card_init+0x882>

  //-- (CMD0)
  // Set card in idle state
  if (mci_send_cmd(mci, SD_MMC_GO_IDLE_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
80006616:	fe f8 08 26 	ld.w	r8,pc[2086]
8000661a:	70 08       	ld.w	r8,r8[0x0]
8000661c:	3f fa       	mov	r10,-1
8000661e:	30 0b       	mov	r11,0
80006620:	10 9c       	mov	r12,r8
80006622:	f0 1f 02 09 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
80006626:	18 98       	mov	r8,r12
80006628:	58 08       	cp.w	r8,0
8000662a:	c0 50       	breq	80006634 <sd_mmc_mci_card_init+0x94>
    return false;
8000662c:	30 08       	mov	r8,0
8000662e:	e0 8f 03 fa 	bral	80006e22 <sd_mmc_mci_card_init+0x882>
    response = mci_read_response(mci);
    if( !(response & OCR_MSK_BUSY) )
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
80006632:	d7 03       	nop
    return false;

sd_mmc_init_step1:
  // (CMD1)
  // To send its Operating Conditions Register contents command only supported by MMC card
  if(mci_send_cmd(mci, SD_MMC_MMC_SEND_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_ALL|OCR_MSK_HC)==MCI_SUCCESS)
80006634:	fe f8 08 08 	ld.w	r8,pc[2056]
80006638:	70 08       	ld.w	r8,r8[0x0]
8000663a:	e0 6a 80 00 	mov	r10,32768
8000663e:	ea 1a c0 ff 	orh	r10,0xc0ff
80006642:	e0 6b 08 41 	mov	r11,2113
80006646:	10 9c       	mov	r12,r8
80006648:	f0 1f 01 ff 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
8000664c:	18 98       	mov	r8,r12
8000664e:	58 08       	cp.w	r8,0
80006650:	c2 a1       	brne	800066a4 <sd_mmc_mci_card_init+0x104>
  {
    // MMC cards always respond to MMC_SEND_OP_COND
    g_card_type[slot] = MMC_CARD;
80006652:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006656:	fe fa 07 da 	ld.w	r10,pc[2010]
8000665a:	30 18       	mov	r8,1
8000665c:	f4 09 0b 08 	st.b	r10[r9],r8
    response = mci_read_response(mci);
80006660:	fe f8 07 dc 	ld.w	r8,pc[2012]
80006664:	70 08       	ld.w	r8,r8[0x0]
80006666:	10 9c       	mov	r12,r8
80006668:	f0 1f 01 f8 	mcall	80006e48 <sd_mmc_mci_card_init+0x8a8>
8000666c:	18 98       	mov	r8,r12
8000666e:	ef 48 ff c0 	st.w	r7[-64],r8
    if( !(response & OCR_MSK_BUSY) )
80006672:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006676:	58 08       	cp.w	r8,0
80006678:	cd d4       	brge	80006632 <sd_mmc_mci_card_init+0x92>
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
8000667a:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000667e:	e6 18 40 00 	andh	r8,0x4000,COH
80006682:	e0 80 00 97 	breq	800067b0 <sd_mmc_mci_card_init+0x210>
    {
      g_card_type[slot] |= MMC_CARD_HC;
80006686:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000668a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000668e:	fe fa 07 a2 	ld.w	r10,pc[1954]
80006692:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006696:	a5 b8       	sbr	r8,0x5
80006698:	5c 58       	castu.b	r8
8000669a:	fe fa 07 96 	ld.w	r10,pc[1942]
8000669e:	f4 09 0b 08 	st.b	r10[r9],r8
800066a2:	c8 88       	rjmp	800067b2 <sd_mmc_mci_card_init+0x212>
    }
  }
  else
  {
    // SD cards do not respond to MMC_SEND_OP_COND
    g_card_type[slot] = SD_CARD;
800066a4:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800066a8:	fe fa 07 88 	ld.w	r10,pc[1928]
800066ac:	30 28       	mov	r8,2
800066ae:	f4 09 0b 08 	st.b	r10[r9],r8

    //-- (CMD8)
    // enables to expand new functionality to some existing commands supported only by SD HC card
    if (mci_send_cmd(mci, SD_MMC_SD_SEND_IF_COND_CMD, 0x000001AA)==MCI_SUCCESS)
800066b2:	fe f8 07 8a 	ld.w	r8,pc[1930]
800066b6:	70 08       	ld.w	r8,r8[0x0]
800066b8:	e0 6a 01 aa 	mov	r10,426
800066bc:	e0 6b 10 48 	mov	r11,4168
800066c0:	10 9c       	mov	r12,r8
800066c2:	f0 1f 01 e1 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
800066c6:	18 98       	mov	r8,r12
800066c8:	58 08       	cp.w	r8,0
800066ca:	c1 b1       	brne	80006700 <sd_mmc_mci_card_init+0x160>
    {
      // It is a SD HC
      if( 0x000001AA == mci_read_response(mci))
800066cc:	fe f8 07 70 	ld.w	r8,pc[1904]
800066d0:	70 08       	ld.w	r8,r8[0x0]
800066d2:	10 9c       	mov	r12,r8
800066d4:	f0 1f 01 dd 	mcall	80006e48 <sd_mmc_mci_card_init+0x8a8>
800066d8:	18 98       	mov	r8,r12
800066da:	e0 48 01 aa 	cp.w	r8,426
800066de:	c1 11       	brne	80006700 <sd_mmc_mci_card_init+0x160>
      {
        g_card_type[slot] |= SD_CARD_V2;
800066e0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800066e4:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800066e8:	fe fa 07 48 	ld.w	r10,pc[1864]
800066ec:	f4 08 07 08 	ld.ub	r8,r10[r8]
800066f0:	a3 b8       	sbr	r8,0x3
800066f2:	5c 58       	castu.b	r8
800066f4:	fe fa 07 3c 	ld.w	r10,pc[1852]
800066f8:	f4 09 0b 08 	st.b	r10[r9],r8
800066fc:	c0 28       	rjmp	80006700 <sd_mmc_mci_card_init+0x160>
    response = mci_read_response(mci);

    if( !(response & OCR_MSK_BUSY) )
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
800066fe:	d7 03       	nop

sd_mmc_init_step2:
    //-- (CMD55)
    // Indicates to the card that the next command is an application specific command rather than a standard command
    // CMD55 shall always precede ACMD41
    if (mci_send_cmd(mci, SD_MMC_APP_CMD, 0)!=MCI_SUCCESS)
80006700:	fe f8 07 3c 	ld.w	r8,pc[1852]
80006704:	70 08       	ld.w	r8,r8[0x0]
80006706:	30 0a       	mov	r10,0
80006708:	e0 6b 10 77 	mov	r11,4215
8000670c:	10 9c       	mov	r12,r8
8000670e:	f0 1f 01 ce 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
80006712:	18 98       	mov	r8,r12
80006714:	58 08       	cp.w	r8,0
80006716:	c0 40       	breq	8000671e <sd_mmc_mci_card_init+0x17e>
      return false;
80006718:	30 08       	mov	r8,0
8000671a:	e0 8f 03 84 	bral	80006e22 <sd_mmc_mci_card_init+0x882>

    //-- (ACMD41)
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
8000671e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006722:	fe f9 07 0e 	ld.w	r9,pc[1806]
80006726:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000672a:	e2 18 00 08 	andl	r8,0x8,COH
8000672e:	c1 00       	breq	8000674e <sd_mmc_mci_card_init+0x1ae>
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
80006730:	fe f8 07 0c 	ld.w	r8,pc[1804]
80006734:	70 08       	ld.w	r8,r8[0x0]
80006736:	fc 1a c0 10 	movh	r10,0xc010
8000673a:	36 9b       	mov	r11,105
8000673c:	10 9c       	mov	r12,r8
8000673e:	f0 1f 01 c2 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
80006742:	18 98       	mov	r8,r12
80006744:	58 08       	cp.w	r8,0
80006746:	c1 30       	breq	8000676c <sd_mmc_mci_card_init+0x1cc>
        return false;
80006748:	30 08       	mov	r8,0
8000674a:	e0 8f 03 6c 	bral	80006e22 <sd_mmc_mci_card_init+0x882>
    }
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
8000674e:	fe f8 06 ee 	ld.w	r8,pc[1774]
80006752:	70 08       	ld.w	r8,r8[0x0]
80006754:	fc 1a 80 10 	movh	r10,0x8010
80006758:	36 9b       	mov	r11,105
8000675a:	10 9c       	mov	r12,r8
8000675c:	f0 1f 01 ba 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
80006760:	18 98       	mov	r8,r12
80006762:	58 08       	cp.w	r8,0
80006764:	c0 50       	breq	8000676e <sd_mmc_mci_card_init+0x1ce>
        return false;
80006766:	30 08       	mov	r8,0
80006768:	e0 8f 03 5d 	bral	80006e22 <sd_mmc_mci_card_init+0x882>
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
        return false;
8000676c:	d7 03       	nop
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
        return false;
    }
    response = mci_read_response(mci);
8000676e:	fe f8 06 ce 	ld.w	r8,pc[1742]
80006772:	70 08       	ld.w	r8,r8[0x0]
80006774:	10 9c       	mov	r12,r8
80006776:	f0 1f 01 b5 	mcall	80006e48 <sd_mmc_mci_card_init+0x8a8>
8000677a:	18 98       	mov	r8,r12
8000677c:	ef 48 ff c0 	st.w	r7[-64],r8

    if( !(response & OCR_MSK_BUSY) )
80006780:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006784:	58 08       	cp.w	r8,0
80006786:	cb c4       	brge	800066fe <sd_mmc_mci_card_init+0x15e>
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
    }
    // Card read then check HC type
    if (response & OCR_MSK_HC)
80006788:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000678c:	e6 18 40 00 	andh	r8,0x4000,COH
80006790:	c1 10       	breq	800067b2 <sd_mmc_mci_card_init+0x212>
    {
      g_card_type[slot] |= SD_CARD_HC;  // Card SD High Capacity
80006792:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006796:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000679a:	fe fa 06 96 	ld.w	r10,pc[1686]
8000679e:	f4 08 07 08 	ld.ub	r8,r10[r8]
800067a2:	a5 a8       	sbr	r8,0x4
800067a4:	5c 58       	castu.b	r8
800067a6:	fe fa 06 8a 	ld.w	r10,pc[1674]
800067aa:	f4 09 0b 08 	st.b	r10[r9],r8
800067ae:	c0 28       	rjmp	800067b2 <sd_mmc_mci_card_init+0x212>
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
    {
      g_card_type[slot] |= MMC_CARD_HC;
800067b0:	d7 03       	nop

  // Here card ready and type (MMC <V4, MMC V4, MMC HC, SD V1, SD V2 HC) detected

  //-- (CMD2)
  // Send CID
  if (mci_send_cmd(mci, SD_MMC_ALL_SEND_CID_CMD, 0)!=MCI_SUCCESS)
800067b2:	fe f8 06 8a 	ld.w	r8,pc[1674]
800067b6:	70 08       	ld.w	r8,r8[0x0]
800067b8:	30 0a       	mov	r10,0
800067ba:	e0 6b 00 82 	mov	r11,130
800067be:	10 9c       	mov	r12,r8
800067c0:	f0 1f 01 a1 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
800067c4:	18 98       	mov	r8,r12
800067c6:	58 08       	cp.w	r8,0
800067c8:	c0 40       	breq	800067d0 <sd_mmc_mci_card_init+0x230>
    return false;
800067ca:	30 08       	mov	r8,0
800067cc:	e0 8f 03 2b 	bral	80006e22 <sd_mmc_mci_card_init+0x882>

  //-- (CMD3)
  // Set relative address
  if(MMC_CARD & g_card_type[slot])
800067d0:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800067d4:	fe f9 06 5c 	ld.w	r9,pc[1628]
800067d8:	f2 08 07 08 	ld.ub	r8,r9[r8]
800067dc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800067e0:	5c 58       	castu.b	r8
800067e2:	c1 90       	breq	80006814 <sd_mmc_mci_card_init+0x274>
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
800067e4:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800067e8:	fe f8 06 64 	ld.w	r8,pc[1636]
800067ec:	e0 7a ff ff 	mov	r10,131071
800067f0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
800067f4:	fe f8 06 48 	ld.w	r8,pc[1608]
800067f8:	70 08       	ld.w	r8,r8[0x0]
800067fa:	e0 7a ff ff 	mov	r10,131071
800067fe:	e0 6b 10 43 	mov	r11,4163
80006802:	10 9c       	mov	r12,r8
80006804:	f0 1f 01 90 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
80006808:	18 98       	mov	r8,r12
8000680a:	58 08       	cp.w	r8,0
8000680c:	c1 30       	breq	80006832 <sd_mmc_mci_card_init+0x292>
      return false;
8000680e:	30 08       	mov	r8,0
80006810:	e0 8f 03 09 	bral	80006e22 <sd_mmc_mci_card_init+0x882>
  }
  else
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
80006814:	fe f8 06 28 	ld.w	r8,pc[1576]
80006818:	70 08       	ld.w	r8,r8[0x0]
8000681a:	30 0a       	mov	r10,0
8000681c:	e0 6b 10 43 	mov	r11,4163
80006820:	10 9c       	mov	r12,r8
80006822:	f0 1f 01 89 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
80006826:	18 98       	mov	r8,r12
80006828:	58 08       	cp.w	r8,0
8000682a:	c0 50       	breq	80006834 <sd_mmc_mci_card_init+0x294>
      return false;
8000682c:	30 08       	mov	r8,0
8000682e:	e0 8f 02 fa 	bral	80006e22 <sd_mmc_mci_card_init+0x882>
  if(MMC_CARD & g_card_type[slot])
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
      return false;
80006832:	d7 03       	nop
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
      return false;
  }
  if (SD_CARD & g_card_type[slot])
80006834:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006838:	fe f9 05 f8 	ld.w	r9,pc[1528]
8000683c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006840:	e2 18 00 02 	andl	r8,0x2,COH
80006844:	c1 10       	breq	80006866 <sd_mmc_mci_card_init+0x2c6>
  {
    // For SD  card, you receive address of card
    g_card_rca[slot] = mci_read_response(mci) & RCA_MSK_ADR ;
80006846:	ef 36 ff a4 	ld.ub	r6,r7[-92]
8000684a:	fe f8 05 f2 	ld.w	r8,pc[1522]
8000684e:	70 08       	ld.w	r8,r8[0x0]
80006850:	10 9c       	mov	r12,r8
80006852:	f0 1f 01 7e 	mcall	80006e48 <sd_mmc_mci_card_init+0x8a8>
80006856:	18 98       	mov	r8,r12
80006858:	10 99       	mov	r9,r8
8000685a:	e0 19 00 00 	andl	r9,0x0
8000685e:	fe f8 05 ee 	ld.w	r8,pc[1518]
80006862:	f0 06 09 29 	st.w	r8[r6<<0x2],r9
  }


  //-- (CMD9)
  // Read & analyze CSD register
  if (sd_mmc_mci_get_csd(slot)!=true)
80006866:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000686a:	10 9c       	mov	r12,r8
8000686c:	f0 1f 01 79 	mcall	80006e50 <sd_mmc_mci_card_init+0x8b0>
80006870:	18 98       	mov	r8,r12
80006872:	ec 18 00 01 	eorl	r8,0x1
80006876:	5c 58       	castu.b	r8
80006878:	c0 40       	breq	80006880 <sd_mmc_mci_card_init+0x2e0>
    return false;
8000687a:	30 08       	mov	r8,0
8000687c:	e0 8f 02 d3 	bral	80006e22 <sd_mmc_mci_card_init+0x882>


  //-- (CMD7)-R1b
  // select card
  if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006880:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006884:	fe f8 05 c8 	ld.w	r8,pc[1480]
80006888:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000688c:	fe f8 05 b0 	ld.w	r8,pc[1456]
80006890:	70 08       	ld.w	r8,r8[0x0]
80006892:	12 9a       	mov	r10,r9
80006894:	e0 6b 10 c7 	mov	r11,4295
80006898:	10 9c       	mov	r12,r8
8000689a:	f0 1f 01 6b 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
8000689e:	18 98       	mov	r8,r12
800068a0:	58 08       	cp.w	r8,0
800068a2:	c0 40       	breq	800068aa <sd_mmc_mci_card_init+0x30a>
    return false;
800068a4:	30 08       	mov	r8,0
800068a6:	e0 8f 02 be 	bral	80006e22 <sd_mmc_mci_card_init+0x882>

  // Wait end of busy
  mci_wait_busy_signal(mci);// read busy state on DAT0
800068aa:	fe f8 05 92 	ld.w	r8,pc[1426]
800068ae:	70 08       	ld.w	r8,r8[0x0]
800068b0:	10 9c       	mov	r12,r8
800068b2:	f0 1f 01 69 	mcall	80006e54 <sd_mmc_mci_card_init+0x8b4>

  // Get clock by checking the extended CSD register
  if (MMC_CARD_V4 & g_card_type[slot])
800068b6:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800068ba:	fe f9 05 76 	ld.w	r9,pc[1398]
800068be:	f2 08 07 08 	ld.ub	r8,r9[r8]
800068c2:	e2 18 00 04 	andl	r8,0x4,COH
800068c6:	c0 e0       	breq	800068e2 <sd_mmc_mci_card_init+0x342>
  {
    // Get clock (MMC V4) and size (MMC V4 HC) by checking the extended CSD register
      //-- (CMD8)
    if (sd_mmc_get_ext_csd(slot)!=true)
800068c8:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800068cc:	10 9c       	mov	r12,r8
800068ce:	f0 1f 01 63 	mcall	80006e58 <sd_mmc_mci_card_init+0x8b8>
800068d2:	18 98       	mov	r8,r12
800068d4:	ec 18 00 01 	eorl	r8,0x1
800068d8:	5c 58       	castu.b	r8
800068da:	c0 40       	breq	800068e2 <sd_mmc_mci_card_init+0x342>
         return false;
800068dc:	30 08       	mov	r8,0
800068de:	e0 8f 02 a2 	bral	80006e22 <sd_mmc_mci_card_init+0x882>
  }


#if (SD_4_BIT == ENABLE)
  // set bus size
  if (SD_CARD & g_card_type[slot])
800068e2:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800068e6:	fe f9 05 4a 	ld.w	r9,pc[1354]
800068ea:	f2 08 07 08 	ld.ub	r8,r9[r8]
800068ee:	e2 18 00 02 	andl	r8,0x2,COH
800068f2:	c4 00       	breq	80006972 <sd_mmc_mci_card_init+0x3d2>
  {
    // set 4-bit bus for SD Card
    //-- (CMD55)
    if(mci_send_cmd(mci, SD_MMC_APP_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800068f4:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800068f8:	fe f8 05 54 	ld.w	r8,pc[1364]
800068fc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006900:	fe f8 05 3c 	ld.w	r8,pc[1340]
80006904:	70 08       	ld.w	r8,r8[0x0]
80006906:	12 9a       	mov	r10,r9
80006908:	e0 6b 10 77 	mov	r11,4215
8000690c:	10 9c       	mov	r12,r8
8000690e:	f0 1f 01 4e 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
80006912:	18 98       	mov	r8,r12
80006914:	58 08       	cp.w	r8,0
80006916:	c0 40       	breq	8000691e <sd_mmc_mci_card_init+0x37e>
      return false;
80006918:	30 08       	mov	r8,0
8000691a:	e0 8f 02 84 	bral	80006e22 <sd_mmc_mci_card_init+0x882>

    //-- (CMD6)
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
8000691e:	fe f8 05 1e 	ld.w	r8,pc[1310]
80006922:	70 08       	ld.w	r8,r8[0x0]
80006924:	30 2a       	mov	r10,2
80006926:	e0 6b 10 46 	mov	r11,4166
8000692a:	10 9c       	mov	r12,r8
8000692c:	f0 1f 01 46 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
80006930:	18 98       	mov	r8,r12
80006932:	58 08       	cp.w	r8,0
80006934:	c0 40       	breq	8000693c <sd_mmc_mci_card_init+0x39c>
      return false;
80006936:	30 08       	mov	r8,0
80006938:	e0 8f 02 75 	bral	80006e22 <sd_mmc_mci_card_init+0x882>

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
8000693c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006940:	fe fa 04 f4 	ld.w	r10,pc[1268]
80006944:	30 28       	mov	r8,2
80006946:	f4 09 0b 08 	st.b	r10[r9],r8
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
8000694a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000694e:	fe f9 04 e6 	ld.w	r9,pc[1254]
80006952:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006956:	10 99       	mov	r9,r8
80006958:	fe f8 04 e4 	ld.w	r8,pc[1252]
8000695c:	70 08       	ld.w	r8,r8[0x0]
8000695e:	12 9b       	mov	r11,r9
80006960:	10 9c       	mov	r12,r8
80006962:	f0 1f 01 3f 	mcall	80006e5c <sd_mmc_mci_card_init+0x8bc>
80006966:	18 98       	mov	r8,r12
80006968:	58 08       	cp.w	r8,0
8000696a:	c4 00       	breq	800069ea <sd_mmc_mci_card_init+0x44a>
      return false;
8000696c:	30 08       	mov	r8,0
8000696e:	e0 8f 02 5a 	bral	80006e22 <sd_mmc_mci_card_init+0x882>
  }
  else // MMC bus width management
  {
    // set 8-bit bus for MMC Card
    if (MMC_CARD_V4 & g_card_type[slot])
80006972:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006976:	fe f9 04 ba 	ld.w	r9,pc[1210]
8000697a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000697e:	e2 18 00 04 	andl	r8,0x4,COH
80006982:	c3 50       	breq	800069ec <sd_mmc_mci_card_init+0x44c>
    {
      //-- (CMD6)-R1b
      // set 8-bit bus width (appeared from V4.0 specification)
      if (mci_send_cmd( mci,
80006984:	fe f8 04 b8 	ld.w	r8,pc[1208]
80006988:	70 08       	ld.w	r8,r8[0x0]
8000698a:	e0 6a 02 03 	mov	r10,515
8000698e:	ea 1a 03 b7 	orh	r10,0x3b7
80006992:	e0 6b 10 c6 	mov	r11,4294
80006996:	10 9c       	mov	r12,r8
80006998:	f0 1f 01 2b 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
8000699c:	18 98       	mov	r8,r12
8000699e:	58 08       	cp.w	r8,0
800069a0:	c0 40       	breq	800069a8 <sd_mmc_mci_card_init+0x408>
                        ( (uint32_t)MMC_SWITCH_WRITE     <<24)|
                          ((uint32_t)MMC_SWITCH_BUS_WIDTH<<16)|
                          ((uint32_t)MMC_SWITCH_VAL_8BIT << 8)|
                          ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
800069a2:	30 08       	mov	r8,0
800069a4:	e0 8f 02 3f 	bral	80006e22 <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
800069a8:	fe f8 04 94 	ld.w	r8,pc[1172]
800069ac:	70 08       	ld.w	r8,r8[0x0]
800069ae:	10 9c       	mov	r12,r8
800069b0:	f0 1f 01 29 	mcall	80006e54 <sd_mmc_mci_card_init+0x8b4>
      g_card_bus_width[slot] = MCI_BUS_SIZE_8_BIT;
800069b4:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800069b8:	fe fa 04 7c 	ld.w	r10,pc[1148]
800069bc:	30 38       	mov	r8,3
800069be:	f4 09 0b 08 	st.b	r10[r9],r8
      if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
800069c2:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800069c6:	fe f9 04 6e 	ld.w	r9,pc[1134]
800069ca:	f2 08 07 08 	ld.ub	r8,r9[r8]
800069ce:	10 99       	mov	r9,r8
800069d0:	fe f8 04 6c 	ld.w	r8,pc[1132]
800069d4:	70 08       	ld.w	r8,r8[0x0]
800069d6:	12 9b       	mov	r11,r9
800069d8:	10 9c       	mov	r12,r8
800069da:	f0 1f 01 21 	mcall	80006e5c <sd_mmc_mci_card_init+0x8bc>
800069de:	18 98       	mov	r8,r12
800069e0:	58 08       	cp.w	r8,0
800069e2:	c0 50       	breq	800069ec <sd_mmc_mci_card_init+0x44c>
       return false;
800069e4:	30 08       	mov	r8,0
800069e6:	e0 8f 02 1e 	bral	80006e22 <sd_mmc_mci_card_init+0x882>
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
      return false;

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
      return false;
800069ea:	d7 03       	nop
       return false;
    }
  }
#endif

   if (MMC_CARD_V4 & g_card_type[slot])
800069ec:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800069f0:	fe f9 04 40 	ld.w	r9,pc[1088]
800069f4:	f2 08 07 08 	ld.ub	r8,r9[r8]
800069f8:	e2 18 00 04 	andl	r8,0x4,COH
800069fc:	c1 90       	breq	80006a2e <sd_mmc_mci_card_init+0x48e>
   {
      //-- (CMD6)-R1b
      // set high speed interface timing
      if (mci_send_cmd( mci,
800069fe:	fe f8 04 3e 	ld.w	r8,pc[1086]
80006a02:	70 08       	ld.w	r8,r8[0x0]
80006a04:	e0 6a 01 03 	mov	r10,259
80006a08:	ea 1a 03 b9 	orh	r10,0x3b9
80006a0c:	e0 6b 10 c6 	mov	r11,4294
80006a10:	10 9c       	mov	r12,r8
80006a12:	f0 1f 01 0d 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
80006a16:	18 98       	mov	r8,r12
80006a18:	58 08       	cp.w	r8,0
80006a1a:	c0 40       	breq	80006a22 <sd_mmc_mci_card_init+0x482>
                        ((uint32_t)MMC_SWITCH_WRITE     <<24)|
                        ((uint32_t)MMC_SWITCH_HIGH_SPEED<<16)|
                        ((uint32_t)MMC_SWITCH_VAL_HS    << 8)|
                        ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
80006a1c:	30 08       	mov	r8,0
80006a1e:	e0 8f 02 02 	bral	80006e22 <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);
80006a22:	fe f8 04 1a 	ld.w	r8,pc[1050]
80006a26:	70 08       	ld.w	r8,r8[0x0]
80006a28:	10 9c       	mov	r12,r8
80006a2a:	f0 1f 01 0b 	mcall	80006e54 <sd_mmc_mci_card_init+0x8b4>
   }


   if( SD_CARD_V2 & g_card_type[slot] )
80006a2e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a32:	fe f9 03 fe 	ld.w	r9,pc[1022]
80006a36:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006a3a:	e2 18 00 08 	andl	r8,0x8,COH
80006a3e:	e0 80 01 ae 	breq	80006d9a <sd_mmc_mci_card_init+0x7fa>
#define SDMMC_SWITCH_FUNC_G3_KEEP     (0xf << 8)  /**< Group 3 No influence */
#define SDMMC_SWITCH_FUNC_G4_KEEP     (0xf << 12) /**< Group 4 No influence */
#define SDMMC_SWITCH_FUNC_G5_KEEP     (0xf << 16) /**< Group 5 No influence */
#define SDMMC_SWITCH_FUNC_G6_KEEP     (0xf << 20) /**< Group 6 No influence */

      mci_set_block_size(mci, 512/8); // CMD6 512 bits status
80006a42:	fe f8 03 fa 	ld.w	r8,pc[1018]
80006a46:	70 08       	ld.w	r8,r8[0x0]
80006a48:	34 0b       	mov	r11,64
80006a4a:	10 9c       	mov	r12,r8
80006a4c:	f0 1f 01 05 	mcall	80006e60 <sd_mmc_mci_card_init+0x8c0>
      mci_set_block_count(mci, 1);
80006a50:	fe f8 03 ec 	ld.w	r8,pc[1004]
80006a54:	70 08       	ld.w	r8,r8[0x0]
80006a56:	30 1b       	mov	r11,1
80006a58:	10 9c       	mov	r12,r8
80006a5a:	f0 1f 01 03 	mcall	80006e64 <sd_mmc_mci_card_init+0x8c4>

      //-- (CMD6)
      // Check if we can enter into the High Speed mode.
      if (mci_send_cmd( mci
80006a5e:	fe f8 03 de 	ld.w	r8,pc[990]
80006a62:	70 08       	ld.w	r8,r8[0x0]
80006a64:	30 1a       	mov	r10,1
80006a66:	e4 7b 10 46 	mov	r11,331846
80006a6a:	10 9c       	mov	r12,r8
80006a6c:	f0 1f 00 f6 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
80006a70:	18 98       	mov	r8,r12
80006a72:	58 08       	cp.w	r8,0
80006a74:	c0 40       	breq	80006a7c <sd_mmc_mci_card_init+0x4dc>
                      , SD_SWITCH_FUNC
                      , SDMMC_SWITCH_FUNC_MODE_CHECK | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006a76:	30 08       	mov	r8,0
80006a78:	e0 8f 01 d5 	bral	80006e22 <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006a7c:	fe f8 03 c0 	ld.w	r8,pc[960]
80006a80:	70 08       	ld.w	r8,r8[0x0]
80006a82:	10 9c       	mov	r12,r8
80006a84:	f0 1f 00 f4 	mcall	80006e54 <sd_mmc_mci_card_init+0x8b4>

      bool b_hs_supported=false;
80006a88:	30 08       	mov	r8,0
80006a8a:	ef 68 ff c5 	st.b	r7[-59],r8
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006a8e:	30 08       	mov	r8,0
80006a90:	ef 68 ff c6 	st.b	r7[-58],r8
80006a94:	c4 18       	rjmp	80006b16 <sd_mmc_mci_card_init+0x576>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006a96:	fe f8 03 a6 	ld.w	r8,pc[934]
80006a9a:	70 08       	ld.w	r8,r8[0x0]
80006a9c:	ef 48 ff c8 	st.w	r7[-56],r8
80006aa0:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006aa4:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006aa8:	fe f8 03 c0 	ld.w	r8,pc[960]
80006aac:	70 08       	ld.w	r8,r8[0x0]
80006aae:	10 99       	mov	r9,r8
80006ab0:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006ab4:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006ab8:	71 08       	ld.w	r8,r8[0x40]
80006aba:	f3 e8 10 08 	or	r8,r9,r8
80006abe:	10 99       	mov	r9,r8
80006ac0:	fe f8 03 a8 	ld.w	r8,pc[936]
80006ac4:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006ac6:	fe f8 03 a2 	ld.w	r8,pc[930]
80006aca:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006acc:	e2 18 00 02 	andl	r8,0x2,COH
80006ad0:	5f 18       	srne	r8
80006ad2:	58 08       	cp.w	r8,0
80006ad4:	ce 10       	breq	80006a96 <sd_mmc_mci_card_init+0x4f6>
          data = mci_rd_data(mci);
80006ad6:	fe f8 03 66 	ld.w	r8,pc[870]
80006ada:	70 08       	ld.w	r8,r8[0x0]
80006adc:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006ae0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006ae4:	70 c8       	ld.w	r8,r8[0x30]
80006ae6:	ef 48 ff ac 	st.w	r7[-84],r8
          if(i==16)
80006aea:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006aee:	31 08       	mov	r8,16
80006af0:	f0 09 18 00 	cp.b	r9,r8
80006af4:	c0 c1       	brne	80006b0c <sd_mmc_mci_card_init+0x56c>
          {
            if(((data>>24)&0xf)==1)
80006af6:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006afa:	b9 88       	lsr	r8,0x18
80006afc:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006b00:	58 18       	cp.w	r8,1
80006b02:	c1 21       	brne	80006b26 <sd_mmc_mci_card_init+0x586>
              b_hs_supported = true;
80006b04:	30 18       	mov	r8,1
80006b06:	ef 68 ff c5 	st.b	r7[-59],r8
            break;
80006b0a:	c0 f8       	rjmp	80006b28 <sd_mmc_mci_card_init+0x588>
      mci_wait_busy_signal(mci);// read busy state on DAT0

      bool b_hs_supported=false;
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006b0c:	ef 38 ff c6 	ld.ub	r8,r7[-58]
80006b10:	2f c8       	sub	r8,-4
80006b12:	ef 68 ff c6 	st.b	r7[-58],r8
80006b16:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006b1a:	33 f8       	mov	r8,63
80006b1c:	f0 09 18 00 	cp.b	r9,r8
80006b20:	fe 98 ff bb 	brls	80006a96 <sd_mmc_mci_card_init+0x4f6>
80006b24:	c0 28       	rjmp	80006b28 <sd_mmc_mci_card_init+0x588>
          data = mci_rd_data(mci);
          if(i==16)
          {
            if(((data>>24)&0xf)==1)
              b_hs_supported = true;
            break;
80006b26:	d7 03       	nop
          }
        }
      }

      if (b_hs_supported==false )
80006b28:	ef 38 ff c5 	ld.ub	r8,r7[-59]
80006b2c:	ec 18 00 01 	eorl	r8,0x1
80006b30:	5c 58       	castu.b	r8
80006b32:	e0 81 01 33 	brne	80006d98 <sd_mmc_mci_card_init+0x7f8>
        goto sd_mmc_init_step3;

      if (mci_send_cmd( mci
80006b36:	fe f8 03 06 	ld.w	r8,pc[774]
80006b3a:	70 08       	ld.w	r8,r8[0x0]
80006b3c:	e0 6a ff f1 	mov	r10,65521
80006b40:	ea 1a 80 ff 	orh	r10,0x80ff
80006b44:	e4 7b 10 46 	mov	r11,331846
80006b48:	10 9c       	mov	r12,r8
80006b4a:	f0 1f 00 bf 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
80006b4e:	18 98       	mov	r8,r12
80006b50:	58 08       	cp.w	r8,0
80006b52:	c0 40       	breq	80006b5a <sd_mmc_mci_card_init+0x5ba>
                      | SDMMC_SWITCH_FUNC_G3_KEEP
                      | SDMMC_SWITCH_FUNC_G2_KEEP
                      | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006b54:	30 08       	mov	r8,0
80006b56:	e0 8f 01 66 	bral	80006e22 <sd_mmc_mci_card_init+0x882>
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006b5a:	30 08       	mov	r8,0
80006b5c:	ef 68 ff c7 	st.b	r7[-57],r8
80006b60:	c3 08       	rjmp	80006bc0 <sd_mmc_mci_card_init+0x620>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006b62:	fe f8 02 da 	ld.w	r8,pc[730]
80006b66:	70 08       	ld.w	r8,r8[0x0]
80006b68:	ef 48 ff d4 	st.w	r7[-44],r8
80006b6c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006b70:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006b74:	fe f8 02 f4 	ld.w	r8,pc[756]
80006b78:	70 08       	ld.w	r8,r8[0x0]
80006b7a:	10 99       	mov	r9,r8
80006b7c:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006b80:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006b84:	71 08       	ld.w	r8,r8[0x40]
80006b86:	f3 e8 10 08 	or	r8,r9,r8
80006b8a:	10 99       	mov	r9,r8
80006b8c:	fe f8 02 dc 	ld.w	r8,pc[732]
80006b90:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006b92:	fe f8 02 d6 	ld.w	r8,pc[726]
80006b96:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006b98:	e2 18 00 02 	andl	r8,0x2,COH
80006b9c:	5f 18       	srne	r8
80006b9e:	58 08       	cp.w	r8,0
80006ba0:	ce 10       	breq	80006b62 <sd_mmc_mci_card_init+0x5c2>
          data = mci_rd_data(mci);
80006ba2:	fe f8 02 9a 	ld.w	r8,pc[666]
80006ba6:	70 08       	ld.w	r8,r8[0x0]
80006ba8:	ef 48 ff dc 	st.w	r7[-36],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006bac:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006bb0:	70 c8       	ld.w	r8,r8[0x30]
80006bb2:	ef 48 ff a8 	st.w	r7[-88],r8
      {
        return false;
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006bb6:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006bba:	2f c8       	sub	r8,-4
80006bbc:	ef 68 ff c7 	st.b	r7[-57],r8
80006bc0:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006bc4:	33 f8       	mov	r8,63
80006bc6:	f0 09 18 00 	cp.b	r9,r8
80006bca:	fe 98 ff cc 	brls	80006b62 <sd_mmc_mci_card_init+0x5c2>

      /* A 8 cycle delay is required after switch command
       * @ 200KHz clock this should be 40 uS, but we use
       * 80 to handle imprecise clock setting.
       */
      cpu_delay_us(80, g_cpu_hz);
80006bce:	fe f8 02 9e 	ld.w	r8,pc[670]
80006bd2:	70 08       	ld.w	r8,r8[0x0]
80006bd4:	35 09       	mov	r9,80
80006bd6:	ef 49 ff e4 	st.w	r7[-28],r9
80006bda:	ef 48 ff e0 	st.w	r7[-32],r8
80006bde:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006be2:	ef 48 ff ec 	st.w	r7[-20],r8
80006be6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006bea:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80006bee:	ee f0 ff ec 	ld.w	r0,r7[-20]
80006bf2:	30 01       	mov	r1,0
80006bf4:	ee f2 ff e8 	ld.w	r2,r7[-24]
80006bf8:	30 03       	mov	r3,0
80006bfa:	e2 02 02 4a 	mul	r10,r1,r2
80006bfe:	e6 00 02 48 	mul	r8,r3,r0
80006c02:	10 0a       	add	r10,r8
80006c04:	e0 02 06 48 	mulu.d	r8,r0,r2
80006c08:	12 0a       	add	r10,r9
80006c0a:	14 99       	mov	r9,r10
80006c0c:	ee 7a 42 3f 	mov	r10,999999
80006c10:	30 0b       	mov	r11,0
80006c12:	f0 0a 00 0a 	add	r10,r8,r10
80006c16:	f2 0b 00 4b 	adc	r11,r9,r11
80006c1a:	ee 78 42 40 	mov	r8,1000000
80006c1e:	30 09       	mov	r9,0
80006c20:	f0 1f 00 94 	mcall	80006e70 <sd_mmc_mci_card_init+0x8d0>
80006c24:	14 98       	mov	r8,r10
80006c26:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80006c28:	ef 48 ff f4 	st.w	r7[-12],r8
80006c2c:	ee c8 00 50 	sub	r8,r7,80
80006c30:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006c34:	e1 b8 00 42 	mfsr	r8,0x108
80006c38:	10 99       	mov	r9,r8
80006c3a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006c3e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006c40:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006c44:	70 09       	ld.w	r9,r8[0x0]
80006c46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006c4a:	10 09       	add	r9,r8
80006c4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006c50:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006c52:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006c56:	30 08       	mov	r8,0
80006c58:	f3 68 00 08 	st.b	r9[8],r8
80006c5c:	ee c8 00 50 	sub	r8,r7,80
80006c60:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006c64:	e1 b8 00 42 	mfsr	r8,0x108
80006c68:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006c6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c70:	f1 39 00 08 	ld.ub	r9,r8[8]
80006c74:	30 28       	mov	r8,2
80006c76:	f0 09 18 00 	cp.b	r9,r8
80006c7a:	c0 31       	brne	80006c80 <sd_mmc_mci_card_init+0x6e0>
    return false;
80006c7c:	30 08       	mov	r8,0
80006c7e:	c4 38       	rjmp	80006d04 <sd_mmc_mci_card_init+0x764>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006c80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c84:	f1 39 00 08 	ld.ub	r9,r8[8]
80006c88:	30 18       	mov	r8,1
80006c8a:	f0 09 18 00 	cp.b	r9,r8
80006c8e:	c0 31       	brne	80006c94 <sd_mmc_mci_card_init+0x6f4>
    return true;
80006c90:	30 18       	mov	r8,1
80006c92:	c3 98       	rjmp	80006d04 <sd_mmc_mci_card_init+0x764>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006c94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c98:	70 09       	ld.w	r9,r8[0x0]
80006c9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c9e:	70 18       	ld.w	r8,r8[0x4]
80006ca0:	10 39       	cp.w	r9,r8
80006ca2:	e0 88 00 1a 	brls	80006cd6 <sd_mmc_mci_card_init+0x736>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006ca6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006caa:	70 08       	ld.w	r8,r8[0x0]
80006cac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006cb0:	10 39       	cp.w	r9,r8
80006cb2:	c1 02       	brcc	80006cd2 <sd_mmc_mci_card_init+0x732>
80006cb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006cb8:	70 18       	ld.w	r8,r8[0x4]
80006cba:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006cbe:	10 39       	cp.w	r9,r8
80006cc0:	e0 88 00 09 	brls	80006cd2 <sd_mmc_mci_card_init+0x732>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006cc4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006cc8:	30 18       	mov	r8,1
80006cca:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006cce:	30 18       	mov	r8,1
80006cd0:	c1 a8       	rjmp	80006d04 <sd_mmc_mci_card_init+0x764>
    }
    return false;
80006cd2:	30 08       	mov	r8,0
80006cd4:	c1 88       	rjmp	80006d04 <sd_mmc_mci_card_init+0x764>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006cd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006cda:	70 08       	ld.w	r8,r8[0x0]
80006cdc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006ce0:	10 39       	cp.w	r9,r8
80006ce2:	c0 93       	brcs	80006cf4 <sd_mmc_mci_card_init+0x754>
80006ce4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ce8:	70 18       	ld.w	r8,r8[0x4]
80006cea:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006cee:	10 39       	cp.w	r9,r8
80006cf0:	e0 88 00 09 	brls	80006d02 <sd_mmc_mci_card_init+0x762>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006cf4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006cf8:	30 18       	mov	r8,1
80006cfa:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006cfe:	30 18       	mov	r8,1
80006d00:	c0 28       	rjmp	80006d04 <sd_mmc_mci_card_init+0x764>
    }
    return false;
80006d02:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006d04:	58 08       	cp.w	r8,0
80006d06:	ca b0       	breq	80006c5c <sd_mmc_mci_card_init+0x6bc>
      union u_cfg{
        unsigned long     cfg;
        avr32_mci_cfg_t   CFG;
      };
      union u_cfg val;
      val.cfg = mci->cfg;
80006d08:	4c d8       	lddpc	r8,80006e3c <sd_mmc_mci_card_init+0x89c>
80006d0a:	70 08       	ld.w	r8,r8[0x0]
80006d0c:	71 58       	ld.w	r8,r8[0x54]
80006d0e:	ef 48 ff bc 	st.w	r7[-68],r8
      val.CFG.hsmode = 1;
80006d12:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006d16:	30 19       	mov	r9,1
80006d18:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80006d1c:	ef 48 ff bc 	st.w	r7[-68],r8
      mci->cfg = val.cfg;
80006d20:	4c 78       	lddpc	r8,80006e3c <sd_mmc_mci_card_init+0x89c>
80006d22:	70 08       	ld.w	r8,r8[0x0]
80006d24:	ee f9 ff bc 	ld.w	r9,r7[-68]
80006d28:	f1 49 00 54 	st.w	r8[84],r9

      // deselect card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, 0)!=MCI_SUCCESS)
80006d2c:	4c 48       	lddpc	r8,80006e3c <sd_mmc_mci_card_init+0x89c>
80006d2e:	70 08       	ld.w	r8,r8[0x0]
80006d30:	30 0a       	mov	r10,0
80006d32:	e0 6b 10 c7 	mov	r11,4295
80006d36:	10 9c       	mov	r12,r8
80006d38:	f0 1f 00 43 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
80006d3c:	18 98       	mov	r8,r12
80006d3e:	58 08       	cp.w	r8,0
80006d40:	c0 30       	breq	80006d46 <sd_mmc_mci_card_init+0x7a6>
        return false;
80006d42:	30 08       	mov	r8,0
80006d44:	c6 f8       	rjmp	80006e22 <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006d46:	4b e8       	lddpc	r8,80006e3c <sd_mmc_mci_card_init+0x89c>
80006d48:	70 08       	ld.w	r8,r8[0x0]
80006d4a:	10 9c       	mov	r12,r8
80006d4c:	f0 1f 00 42 	mcall	80006e54 <sd_mmc_mci_card_init+0x8b4>

      //-- (CMD9)
      // Read & analyze CSD register
      if (sd_mmc_mci_get_csd(slot)!=true)
80006d50:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006d54:	10 9c       	mov	r12,r8
80006d56:	f0 1f 00 3f 	mcall	80006e50 <sd_mmc_mci_card_init+0x8b0>
80006d5a:	18 98       	mov	r8,r12
80006d5c:	ec 18 00 01 	eorl	r8,0x1
80006d60:	5c 58       	castu.b	r8
80006d62:	c0 30       	breq	80006d68 <sd_mmc_mci_card_init+0x7c8>
        return false;
80006d64:	30 08       	mov	r8,0
80006d66:	c5 e8       	rjmp	80006e22 <sd_mmc_mci_card_init+0x882>

      // select card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006d68:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006d6c:	4b 88       	lddpc	r8,80006e4c <sd_mmc_mci_card_init+0x8ac>
80006d6e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006d72:	4b 38       	lddpc	r8,80006e3c <sd_mmc_mci_card_init+0x89c>
80006d74:	70 08       	ld.w	r8,r8[0x0]
80006d76:	12 9a       	mov	r10,r9
80006d78:	e0 6b 10 c7 	mov	r11,4295
80006d7c:	10 9c       	mov	r12,r8
80006d7e:	f0 1f 00 32 	mcall	80006e44 <sd_mmc_mci_card_init+0x8a4>
80006d82:	18 98       	mov	r8,r12
80006d84:	58 08       	cp.w	r8,0
80006d86:	c0 30       	breq	80006d8c <sd_mmc_mci_card_init+0x7ec>
        return false;
80006d88:	30 08       	mov	r8,0
80006d8a:	c4 c8       	rjmp	80006e22 <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006d8c:	4a c8       	lddpc	r8,80006e3c <sd_mmc_mci_card_init+0x89c>
80006d8e:	70 08       	ld.w	r8,r8[0x0]
80006d90:	10 9c       	mov	r12,r8
80006d92:	f0 1f 00 31 	mcall	80006e54 <sd_mmc_mci_card_init+0x8b4>
80006d96:	c0 28       	rjmp	80006d9a <sd_mmc_mci_card_init+0x7fa>
          }
        }
      }

      if (b_hs_supported==false )
        goto sd_mmc_init_step3;
80006d98:	d7 03       	nop
      mci_wait_busy_signal(mci);// read busy state on DAT0
  }

sd_mmc_init_step3:
  // Set clock
  mci_set_speed(mci, g_pbb_hz, g_card_freq[slot]*1000);
80006d9a:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006d9e:	4b 68       	lddpc	r8,80006e74 <sd_mmc_mci_card_init+0x8d4>
80006da0:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006da4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80006da8:	e0 68 03 e8 	mov	r8,1000
80006dac:	f2 08 02 48 	mul	r8,r9,r8
80006db0:	10 9a       	mov	r10,r8
80006db2:	4a 28       	lddpc	r8,80006e38 <sd_mmc_mci_card_init+0x898>
80006db4:	70 09       	ld.w	r9,r8[0x0]
80006db6:	4a 28       	lddpc	r8,80006e3c <sd_mmc_mci_card_init+0x89c>
80006db8:	70 08       	ld.w	r8,r8[0x0]
80006dba:	12 9b       	mov	r11,r9
80006dbc:	10 9c       	mov	r12,r8
80006dbe:	f0 1f 00 2f 	mcall	80006e78 <sd_mmc_mci_card_init+0x8d8>

  //-- (CMD13)
  // Check if card is ready, the card must be in TRAN state
  if(sd_mmc_mci_cmd_send_status(slot)!=true)
80006dc2:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006dc6:	10 9c       	mov	r12,r8
80006dc8:	f0 1f 00 2d 	mcall	80006e7c <sd_mmc_mci_card_init+0x8dc>
80006dcc:	18 98       	mov	r8,r12
80006dce:	ec 18 00 01 	eorl	r8,0x1
80006dd2:	5c 58       	castu.b	r8
80006dd4:	c0 30       	breq	80006dda <sd_mmc_mci_card_init+0x83a>
    return false;
80006dd6:	30 08       	mov	r8,0
80006dd8:	c2 58       	rjmp	80006e22 <sd_mmc_mci_card_init+0x882>

  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
80006dda:	49 98       	lddpc	r8,80006e3c <sd_mmc_mci_card_init+0x89c>
80006ddc:	70 08       	ld.w	r8,r8[0x0]
80006dde:	10 9c       	mov	r12,r8
80006de0:	f0 1f 00 1a 	mcall	80006e48 <sd_mmc_mci_card_init+0x8a8>
80006de4:	18 98       	mov	r8,r12
80006de6:	e4 18 e0 02 	andh	r8,0xe002
80006dea:	e0 18 0e 00 	andl	r8,0xe00
80006dee:	e0 48 08 00 	cp.w	r8,2048
80006df2:	c0 30       	breq	80006df8 <sd_mmc_mci_card_init+0x858>
    return false;
80006df4:	30 08       	mov	r8,0
80006df6:	c1 68       	rjmp	80006e22 <sd_mmc_mci_card_init+0x882>

  //-- (CMD16)
  // Set the card block length to 512B
  if (sd_mmc_set_block_len (slot, SD_MMC_SECTOR_SIZE)!=true)
80006df8:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006dfc:	e0 6b 02 00 	mov	r11,512
80006e00:	10 9c       	mov	r12,r8
80006e02:	f0 1f 00 20 	mcall	80006e80 <sd_mmc_mci_card_init+0x8e0>
80006e06:	18 98       	mov	r8,r12
80006e08:	ec 18 00 01 	eorl	r8,0x1
80006e0c:	5c 58       	castu.b	r8
80006e0e:	c0 30       	breq	80006e14 <sd_mmc_mci_card_init+0x874>
    return false;
80006e10:	30 08       	mov	r8,0
80006e12:	c0 88       	rjmp	80006e22 <sd_mmc_mci_card_init+0x882>

  // USB Test Unit Attention requires a state "busy" between "not present" and "ready" state
  // otherwise never report card change
  sd_mmc_mci_init_done[slot] = true;
80006e14:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006e18:	48 5a       	lddpc	r10,80006e2c <sd_mmc_mci_card_init+0x88c>
80006e1a:	30 18       	mov	r8,1
80006e1c:	f4 09 0b 08 	st.b	r10[r9],r8

  return true;
80006e20:	30 18       	mov	r8,1
}
80006e22:	10 9c       	mov	r12,r8
80006e24:	2e 9d       	sub	sp,-92
80006e26:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80006e2a:	00 00       	add	r0,r0
80006e2c:	00 00       	add	r0,r0
80006e2e:	06 b4       	st.h	r3++,r4
80006e30:	00 00       	add	r0,r0
80006e32:	0d e0       	ld.ub	r0,r6[0x6]
80006e34:	00 00       	add	r0,r0
80006e36:	0b d8       	ld.ub	r8,r5[0x5]
80006e38:	00 00       	add	r0,r0
80006e3a:	06 b8       	st.h	r3++,r8
80006e3c:	00 00       	add	r0,r0
80006e3e:	01 34       	ld.ub	r4,r0++
80006e40:	80 00       	ld.sh	r0,r0[0x0]
80006e42:	95 00       	st.w	r10[0x0],r0
80006e44:	80 00       	ld.sh	r0,r0[0x0]
80006e46:	96 34       	ld.sh	r4,r11[0x6]
80006e48:	80 00       	ld.sh	r0,r0[0x0]
80006e4a:	97 6c       	st.w	r11[0x18],r12
80006e4c:	00 00       	add	r0,r0
80006e4e:	09 c8       	ld.ub	r8,r4[0x4]
80006e50:	80 00       	ld.sh	r0,r0[0x0]
80006e52:	5f 64       	srmi	r4
80006e54:	80 00       	ld.sh	r0,r0[0x0]
80006e56:	97 88       	st.w	r11[0x20],r8
80006e58:	80 00       	ld.sh	r0,r0[0x0]
80006e5a:	62 54       	ld.w	r4,r1[0x14]
80006e5c:	80 00       	ld.sh	r0,r0[0x0]
80006e5e:	97 0c       	st.w	r11[0x0],r12
80006e60:	80 00       	ld.sh	r0,r0[0x0]
80006e62:	95 b4       	st.w	r10[0x2c],r4
80006e64:	80 00       	ld.sh	r0,r0[0x0]
80006e66:	95 fe       	st.w	r10[0x3c],lr
80006e68:	00 00       	add	r0,r0
80006e6a:	08 50       	eor	r0,r4
80006e6c:	00 00       	add	r0,r0
80006e6e:	06 bc       	st.h	r3++,r12
80006e70:	80 00       	ld.sh	r0,r0[0x0]
80006e72:	e8 10 00 00 	orl	r0,0x0
80006e76:	0b da       	ld.ub	r10,r5[0x5]
80006e78:	80 00       	ld.sh	r0,r0[0x0]
80006e7a:	94 1c       	ld.sh	r12,r10[0x2]
80006e7c:	80 00       	ld.sh	r0,r0[0x0]
80006e7e:	7a d8       	ld.w	r8,sp[0x34]
80006e80:	80 00       	ld.sh	r0,r0[0x0]
80006e82:	64 20       	ld.w	r0,r2[0x8]

80006e84 <dma_mci_2_ram>:
    return true;
}
#endif

static void dma_mci_2_ram(void *ram, size_t size)
{
80006e84:	eb cd 40 80 	pushm	r7,lr
80006e88:	1a 97       	mov	r7,sp
80006e8a:	20 3d       	sub	sp,12
80006e8c:	ef 4c ff f8 	st.w	r7[-8],r12
80006e90:	ef 4b ff f4 	st.w	r7[-12],r11
  int *pRam = ram;
80006e94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e98:	ef 48 ff fc 	st.w	r7[-4],r8

  // Src Address: the MCI registers.
  AVR32_DMACA.sar1 = (uint32_t)&AVR32_MCI.fifo;
80006e9c:	fc 18 ff 10 	movh	r8,0xff10
80006ea0:	fe 69 42 00 	mov	r9,-114176
80006ea4:	f1 49 00 58 	st.w	r8[88],r9

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;
80006ea8:	fc 18 ff 10 	movh	r8,0xff10
80006eac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006eb0:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80006eb4:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
80006eb8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006ebc:	a3 89       	lsr	r9,0x2

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80006ebe:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80006ec2:	fc 18 ff 10 	movh	r8,0xff10
80006ec6:	e0 69 02 02 	mov	r9,514
80006eca:	f1 49 03 a0 	st.w	r8[928],r9
}
80006ece:	2f dd       	sub	sp,-12
80006ed0:	e3 cd 80 80 	ldm	sp++,r7,pc

80006ed4 <is_dma_mci_2_ram_complete>:

static bool is_dma_mci_2_ram_complete( void )
{
80006ed4:	eb cd 40 80 	pushm	r7,lr
80006ed8:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
80006eda:	fc 18 ff 10 	movh	r8,0xff10
80006ede:	f0 f8 03 a0 	ld.w	r8,r8[928]
80006ee2:	e2 18 00 02 	andl	r8,0x2,COH
80006ee6:	c0 30       	breq	80006eec <is_dma_mci_2_ram_complete+0x18>
    return false;
80006ee8:	30 08       	mov	r8,0
80006eea:	c0 28       	rjmp	80006eee <is_dma_mci_2_ram_complete+0x1a>

  return true;
80006eec:	30 18       	mov	r8,1
}
80006eee:	10 9c       	mov	r12,r8
80006ef0:	e3 cd 80 80 	ldm	sp++,r7,pc

80006ef4 <dma_ram_2_mci>:
    return true;
}
#endif

static void dma_ram_2_mci(const void *ram, size_t size)
{
80006ef4:	eb cd 40 80 	pushm	r7,lr
80006ef8:	1a 97       	mov	r7,sp
80006efa:	20 3d       	sub	sp,12
80006efc:	ef 4c ff f8 	st.w	r7[-8],r12
80006f00:	ef 4b ff f4 	st.w	r7[-12],r11
  const unsigned int *pRam = ram;
80006f04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006f08:	ef 48 ff fc 	st.w	r7[-4],r8

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.sar1 = (unsigned long)pRam;
80006f0c:	fc 18 ff 10 	movh	r8,0xff10
80006f10:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006f14:	f1 49 00 58 	st.w	r8[88],r9

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;
80006f18:	fc 18 ff 10 	movh	r8,0xff10
80006f1c:	fe 69 42 00 	mov	r9,-114176
80006f20:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80006f24:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
80006f28:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006f2c:	a3 89       	lsr	r9,0x2

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80006f2e:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80006f32:	fc 18 ff 10 	movh	r8,0xff10
80006f36:	e0 69 02 02 	mov	r9,514
80006f3a:	f1 49 03 a0 	st.w	r8[928],r9
}
80006f3e:	2f dd       	sub	sp,-12
80006f40:	e3 cd 80 80 	ldm	sp++,r7,pc

80006f44 <is_dma_ram_2_mci_complete>:

static bool is_dma_ram_2_mci_complete( void )
{
80006f44:	eb cd 40 80 	pushm	r7,lr
80006f48:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
80006f4a:	fc 18 ff 10 	movh	r8,0xff10
80006f4e:	f0 f8 03 a0 	ld.w	r8,r8[928]
80006f52:	e2 18 00 02 	andl	r8,0x2,COH
80006f56:	c0 30       	breq	80006f5c <is_dma_ram_2_mci_complete+0x18>
    return false;
80006f58:	30 08       	mov	r8,0
80006f5a:	c0 28       	rjmp	80006f5e <is_dma_ram_2_mci_complete+0x1a>

  return true;
80006f5c:	30 18       	mov	r8,1
}
80006f5e:	10 9c       	mov	r12,r8
80006f60:	e3 cd 80 80 	ldm	sp++,r7,pc

80006f64 <sd_mmc_mci_mem_check>:

  return true;
}

bool sd_mmc_mci_mem_check(uint8_t slot)
{
80006f64:	eb cd 40 80 	pushm	r7,lr
80006f68:	1a 97       	mov	r7,sp
80006f6a:	20 2d       	sub	sp,8
80006f6c:	18 98       	mov	r8,r12
80006f6e:	ef 68 ff f8 	st.b	r7[-8],r8
  uint8_t timeout_init = 0;
80006f72:	30 08       	mov	r8,0
80006f74:	ef 68 ff ff 	st.b	r7[-1],r8

  if (slot > MCI_LAST_SLOTS)
80006f78:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006f7c:	30 18       	mov	r8,1
80006f7e:	f0 09 18 00 	cp.b	r9,r8
80006f82:	e0 88 00 04 	brls	80006f8a <sd_mmc_mci_mem_check+0x26>
    return false;
80006f86:	30 08       	mov	r8,0
80006f88:	c4 d8       	rjmp	80007022 <sd_mmc_mci_mem_check+0xbe>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006f8a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006f8e:	4a 89       	lddpc	r9,8000702c <sd_mmc_mci_mem_check+0xc8>
80006f90:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006f94:	10 9a       	mov	r10,r8
80006f96:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006f9a:	4a 68       	lddpc	r8,80007030 <sd_mmc_mci_mem_check+0xcc>
80006f9c:	70 08       	ld.w	r8,r8[0x0]
80006f9e:	12 9b       	mov	r11,r9
80006fa0:	10 9c       	mov	r12,r8
80006fa2:	f0 1f 00 25 	mcall	80007034 <sd_mmc_mci_mem_check+0xd0>

  // Check card presence
  if (is_sd_mmc_mci_card_present(slot) == false)
80006fa6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006faa:	10 9c       	mov	r12,r8
80006fac:	f0 1f 00 23 	mcall	80007038 <sd_mmc_mci_mem_check+0xd4>
80006fb0:	18 98       	mov	r8,r12
80006fb2:	ec 18 00 01 	eorl	r8,0x1
80006fb6:	5c 58       	castu.b	r8
80006fb8:	c0 90       	breq	80006fca <sd_mmc_mci_mem_check+0x66>
  {
    sd_mmc_mci_init_done[slot] = false;
80006fba:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006fbe:	4a 0a       	lddpc	r10,8000703c <sd_mmc_mci_mem_check+0xd8>
80006fc0:	30 08       	mov	r8,0
80006fc2:	f4 09 0b 08 	st.b	r10[r9],r8
    return false;
80006fc6:	30 08       	mov	r8,0
80006fc8:	c2 d8       	rjmp	80007022 <sd_mmc_mci_mem_check+0xbe>
  }

  if (sd_mmc_mci_init_done[slot] == false)
80006fca:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006fce:	49 c9       	lddpc	r9,8000703c <sd_mmc_mci_mem_check+0xd8>
80006fd0:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006fd4:	ec 18 00 01 	eorl	r8,0x1
80006fd8:	5c 58       	castu.b	r8
80006fda:	c1 a0       	breq	8000700e <sd_mmc_mci_mem_check+0xaa>
  {
    while (sd_mmc_mci_card_init(slot)!=true)
80006fdc:	c0 f8       	rjmp	80006ffa <sd_mmc_mci_mem_check+0x96>
    {
      timeout_init++;
80006fde:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006fe2:	2f f8       	sub	r8,-1
80006fe4:	ef 68 ff ff 	st.b	r7[-1],r8
      if (timeout_init>10) return false;
80006fe8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006fec:	30 a8       	mov	r8,10
80006fee:	f0 09 18 00 	cp.b	r9,r8
80006ff2:	e0 88 00 04 	brls	80006ffa <sd_mmc_mci_mem_check+0x96>
80006ff6:	30 08       	mov	r8,0
80006ff8:	c1 58       	rjmp	80007022 <sd_mmc_mci_mem_check+0xbe>
    return false;
  }

  if (sd_mmc_mci_init_done[slot] == false)
  {
    while (sd_mmc_mci_card_init(slot)!=true)
80006ffa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006ffe:	10 9c       	mov	r12,r8
80007000:	f0 1f 00 10 	mcall	80007040 <sd_mmc_mci_mem_check+0xdc>
80007004:	18 98       	mov	r8,r12
80007006:	ec 18 00 01 	eorl	r8,0x1
8000700a:	5c 58       	castu.b	r8
8000700c:	ce 91       	brne	80006fde <sd_mmc_mci_mem_check+0x7a>
    {
      timeout_init++;
      if (timeout_init>10) return false;
    }
  }
  if (sd_mmc_mci_init_done[slot] == true)
8000700e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007012:	48 b9       	lddpc	r9,8000703c <sd_mmc_mci_mem_check+0xd8>
80007014:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007018:	58 08       	cp.w	r8,0
8000701a:	c0 30       	breq	80007020 <sd_mmc_mci_mem_check+0xbc>
    return true;
8000701c:	30 18       	mov	r8,1
8000701e:	c0 28       	rjmp	80007022 <sd_mmc_mci_mem_check+0xbe>
  else
    return false;
80007020:	30 08       	mov	r8,0
}
80007022:	10 9c       	mov	r12,r8
80007024:	2f ed       	sub	sp,-8
80007026:	e3 cd 80 80 	ldm	sp++,r7,pc
8000702a:	00 00       	add	r0,r0
8000702c:	00 00       	add	r0,r0
8000702e:	0b d8       	ld.ub	r8,r5[0x5]
80007030:	00 00       	add	r0,r0
80007032:	01 34       	ld.ub	r4,r0++
80007034:	80 00       	ld.sh	r0,r0[0x0]
80007036:	97 cc       	st.w	r11[0x30],r12
80007038:	80 00       	ld.sh	r0,r0[0x0]
8000703a:	5e ac       	retle	r12
8000703c:	00 00       	add	r0,r0
8000703e:	06 b4       	st.h	r3++,r4
80007040:	80 00       	ld.sh	r0,r0[0x0]
80007042:	65 a0       	ld.w	r0,r2[0x68]

80007044 <sd_mmc_mci_dma_read_open>:

  return true;
}

bool sd_mmc_mci_dma_read_open(uint8_t slot, uint32_t pos, void* ram, uint16_t nb_sector)
{
80007044:	eb cd 40 80 	pushm	r7,lr
80007048:	1a 97       	mov	r7,sp
8000704a:	20 5d       	sub	sp,20
8000704c:	ef 4b ff f4 	st.w	r7[-12],r11
80007050:	ef 4a ff f0 	st.w	r7[-16],r10
80007054:	12 98       	mov	r8,r9
80007056:	18 99       	mov	r9,r12
80007058:	ef 69 ff f8 	st.b	r7[-8],r9
8000705c:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
80007060:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007064:	30 18       	mov	r8,1
80007066:	f0 09 18 00 	cp.b	r9,r8
8000706a:	e0 88 00 04 	brls	80007072 <sd_mmc_mci_dma_read_open+0x2e>
    return false;
8000706e:	30 08       	mov	r8,0
80007070:	c9 a8       	rjmp	800071a4 <sd_mmc_mci_dma_read_open+0x160>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80007072:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007076:	4c e9       	lddpc	r9,800071ac <sd_mmc_mci_dma_read_open+0x168>
80007078:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000707c:	10 9a       	mov	r10,r8
8000707e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007082:	4c c8       	lddpc	r8,800071b0 <sd_mmc_mci_dma_read_open+0x16c>
80007084:	70 08       	ld.w	r8,r8[0x0]
80007086:	12 9b       	mov	r11,r9
80007088:	10 9c       	mov	r12,r8
8000708a:	f0 1f 00 4b 	mcall	800071b4 <sd_mmc_mci_dma_read_open+0x170>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
8000708e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007092:	4c a8       	lddpc	r8,800071b8 <sd_mmc_mci_dma_read_open+0x174>
80007094:	ee fa ff f4 	ld.w	r10,r7[-12]
80007098:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
8000709c:	4c 58       	lddpc	r8,800071b0 <sd_mmc_mci_dma_read_open+0x16c>
8000709e:	70 08       	ld.w	r8,r8[0x0]
800070a0:	10 9c       	mov	r12,r8
800070a2:	f0 1f 00 47 	mcall	800071bc <sd_mmc_mci_dma_read_open+0x178>

  addr =  gl_ptr_mem[slot];
800070a6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800070aa:	4c 48       	lddpc	r8,800071b8 <sd_mmc_mci_dma_read_open+0x174>
800070ac:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800070b0:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800070b4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800070b8:	4c 29       	lddpc	r9,800071c0 <sd_mmc_mci_dma_read_open+0x17c>
800070ba:	f2 08 07 08 	ld.ub	r8,r9[r8]
800070be:	e2 18 00 10 	andl	r8,0x10,COH
800070c2:	c0 e1       	brne	800070de <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
800070c4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800070c8:	4b e9       	lddpc	r9,800071c0 <sd_mmc_mci_dma_read_open+0x17c>
800070ca:	f2 08 07 08 	ld.ub	r8,r9[r8]
800070ce:	e2 18 00 20 	andl	r8,0x20,COH
  // wait for MMC not busy
  mci_wait_busy_signal(mci);

  addr =  gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800070d2:	c0 61       	brne	800070de <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
800070d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800070d8:	a9 78       	lsl	r8,0x9
800070da:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  //** (CMD13)
  // Necessary to clear flag error "ADDRESS_OUT_OF_RANGE" (ID LABO = MMC15)
  if(mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800070de:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800070e2:	4b 98       	lddpc	r8,800071c4 <sd_mmc_mci_dma_read_open+0x180>
800070e4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800070e8:	4b 28       	lddpc	r8,800071b0 <sd_mmc_mci_dma_read_open+0x16c>
800070ea:	70 08       	ld.w	r8,r8[0x0]
800070ec:	12 9a       	mov	r10,r9
800070ee:	e0 6b 10 4d 	mov	r11,4173
800070f2:	10 9c       	mov	r12,r8
800070f4:	f0 1f 00 35 	mcall	800071c8 <sd_mmc_mci_dma_read_open+0x184>
800070f8:	18 98       	mov	r8,r12
800070fa:	58 08       	cp.w	r8,0
800070fc:	c0 30       	breq	80007102 <sd_mmc_mci_dma_read_open+0xbe>
  {
    return false;
800070fe:	30 08       	mov	r8,0
80007100:	c5 28       	rjmp	800071a4 <sd_mmc_mci_dma_read_open+0x160>
  }

  // Request Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
80007102:	4a c8       	lddpc	r8,800071b0 <sd_mmc_mci_dma_read_open+0x16c>
80007104:	70 08       	ld.w	r8,r8[0x0]
80007106:	e0 6b 02 00 	mov	r11,512
8000710a:	10 9c       	mov	r12,r8
8000710c:	f0 1f 00 30 	mcall	800071cc <sd_mmc_mci_dma_read_open+0x188>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
80007110:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80007114:	4a 78       	lddpc	r8,800071b0 <sd_mmc_mci_dma_read_open+0x16c>
80007116:	70 08       	ld.w	r8,r8[0x0]
80007118:	12 9b       	mov	r11,r9
8000711a:	10 9c       	mov	r12,r8
8000711c:	f0 1f 00 2d 	mcall	800071d0 <sd_mmc_mci_dma_read_open+0x18c>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
80007120:	fc 18 ff 10 	movh	r8,0xff10
80007124:	30 19       	mov	r9,1
80007126:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
8000712a:	fe 68 40 00 	mov	r8,-114688
8000712e:	30 09       	mov	r9,0
80007130:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
80007134:	fc 18 ff 10 	movh	r8,0xff10
80007138:	30 09       	mov	r9,0
8000713a:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
8000713e:	fc 18 ff 10 	movh	r8,0xff10
80007142:	e0 69 d8 24 	mov	r9,55332
80007146:	ea 19 00 a0 	orh	r9,0xa0
8000714a:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
8000714e:	fc 18 ff 10 	movh	r8,0xff10
80007152:	30 09       	mov	r9,0
80007154:	f1 49 00 98 	st.w	r8[152],r9
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: ignored because the dst is memory.
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: hw handshaking
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80007158:	fc 18 ff 10 	movh	r8,0xff10
8000715c:	e0 69 01 00 	mov	r9,256
80007160:	f1 49 00 9c 	st.w	r8[156],r9
    (0                      << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf: ignored because the dst is memory.
    (AVR32_DMACA_CH_MMCI_RX << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf:
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
80007164:	fe 68 40 00 	mov	r8,-114688
80007168:	e0 69 01 30 	mov	r9,304
8000716c:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD17)
  if(mci_send_cmd(mci, SD_MMC_READ_MULTIPLE_BLOCK_CMD, addr)!=MCI_SUCCESS)
80007170:	49 08       	lddpc	r8,800071b0 <sd_mmc_mci_dma_read_open+0x16c>
80007172:	70 08       	ld.w	r8,r8[0x0]
80007174:	ee fa ff fc 	ld.w	r10,r7[-4]
80007178:	ec 7b 10 52 	mov	r11,856146
8000717c:	10 9c       	mov	r12,r8
8000717e:	f0 1f 00 13 	mcall	800071c8 <sd_mmc_mci_dma_read_open+0x184>
80007182:	18 98       	mov	r8,r12
80007184:	58 08       	cp.w	r8,0
80007186:	c0 30       	breq	8000718c <sd_mmc_mci_dma_read_open+0x148>
  {
    return false;
80007188:	30 08       	mov	r8,0
8000718a:	c0 d8       	rjmp	800071a4 <sd_mmc_mci_dma_read_open+0x160>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
8000718c:	48 98       	lddpc	r8,800071b0 <sd_mmc_mci_dma_read_open+0x16c>
8000718e:	70 08       	ld.w	r8,r8[0x0]
80007190:	10 9c       	mov	r12,r8
80007192:	f0 1f 00 11 	mcall	800071d4 <sd_mmc_mci_dma_read_open+0x190>
80007196:	18 98       	mov	r8,r12
80007198:	e6 18 f0 50 	andh	r8,0xf050,COH
8000719c:	c0 30       	breq	800071a2 <sd_mmc_mci_dma_read_open+0x15e>
  {
    return false;
8000719e:	30 08       	mov	r8,0
800071a0:	c0 28       	rjmp	800071a4 <sd_mmc_mci_dma_read_open+0x160>
  }

  return true;
800071a2:	30 18       	mov	r8,1
}
800071a4:	10 9c       	mov	r12,r8
800071a6:	2f bd       	sub	sp,-20
800071a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800071ac:	00 00       	add	r0,r0
800071ae:	0b d8       	ld.ub	r8,r5[0x5]
800071b0:	00 00       	add	r0,r0
800071b2:	01 34       	ld.ub	r4,r0++
800071b4:	80 00       	ld.sh	r0,r0[0x0]
800071b6:	97 cc       	st.w	r11[0x30],r12
800071b8:	00 00       	add	r0,r0
800071ba:	06 c0       	st.b	r3++,r0
800071bc:	80 00       	ld.sh	r0,r0[0x0]
800071be:	97 88       	st.w	r11[0x20],r8
800071c0:	00 00       	add	r0,r0
800071c2:	0d e0       	ld.ub	r0,r6[0x6]
800071c4:	00 00       	add	r0,r0
800071c6:	09 c8       	ld.ub	r8,r4[0x4]
800071c8:	80 00       	ld.sh	r0,r0[0x0]
800071ca:	96 34       	ld.sh	r4,r11[0x6]
800071cc:	80 00       	ld.sh	r0,r0[0x0]
800071ce:	95 b4       	st.w	r10[0x2c],r4
800071d0:	80 00       	ld.sh	r0,r0[0x0]
800071d2:	95 fe       	st.w	r10[0x3c],lr
800071d4:	80 00       	ld.sh	r0,r0[0x0]
800071d6:	97 6c       	st.w	r11[0x18],r12

800071d8 <sd_mmc_mci_read_close>:

bool sd_mmc_mci_read_close (uint8_t slot)
{
800071d8:	eb cd 40 80 	pushm	r7,lr
800071dc:	1a 97       	mov	r7,sp
800071de:	20 3d       	sub	sp,12
800071e0:	18 98       	mov	r8,r12
800071e2:	ef 68 ff f4 	st.b	r7[-12],r8
  if( (mci_crc_error(mci)) )
800071e6:	4a 08       	lddpc	r8,80007264 <sd_mmc_mci_read_close+0x8c>
800071e8:	70 08       	ld.w	r8,r8[0x0]
800071ea:	ef 48 ff f8 	st.w	r7[-8],r8
800071ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800071f2:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800071f6:	49 d8       	lddpc	r8,80007268 <sd_mmc_mci_read_close+0x90>
800071f8:	70 08       	ld.w	r8,r8[0x0]
800071fa:	10 99       	mov	r9,r8
800071fc:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007200:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007204:	71 08       	ld.w	r8,r8[0x40]
80007206:	f3 e8 10 08 	or	r8,r9,r8
8000720a:	10 99       	mov	r9,r8
8000720c:	49 78       	lddpc	r8,80007268 <sd_mmc_mci_read_close+0x90>
8000720e:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007210:	49 68       	lddpc	r8,80007268 <sd_mmc_mci_read_close+0x90>
80007212:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
80007214:	e6 18 00 20 	andh	r8,0x20,COH
80007218:	c0 90       	breq	8000722a <sd_mmc_mci_read_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
8000721a:	49 48       	lddpc	r8,80007268 <sd_mmc_mci_read_close+0x90>
8000721c:	70 08       	ld.w	r8,r8[0x0]
8000721e:	10 99       	mov	r9,r8
80007220:	b5 d9       	cbr	r9,0x15
80007222:	49 28       	lddpc	r8,80007268 <sd_mmc_mci_read_close+0x90>
80007224:	91 09       	st.w	r8[0x0],r9
    return true;
80007226:	30 18       	mov	r8,1
80007228:	c0 28       	rjmp	8000722c <sd_mmc_mci_read_close+0x54>
  }
  else
    return false;
8000722a:	30 08       	mov	r8,0
8000722c:	58 08       	cp.w	r8,0
8000722e:	c0 30       	breq	80007234 <sd_mmc_mci_read_close+0x5c>
  {
    return false;  // An CRC error has been seen
80007230:	30 08       	mov	r8,0
80007232:	c1 48       	rjmp	8000725a <sd_mmc_mci_read_close+0x82>
  }

  mci_wait_busy_signal(mci);
80007234:	48 c8       	lddpc	r8,80007264 <sd_mmc_mci_read_close+0x8c>
80007236:	70 08       	ld.w	r8,r8[0x0]
80007238:	10 9c       	mov	r12,r8
8000723a:	f0 1f 00 0d 	mcall	8000726c <sd_mmc_mci_read_close+0x94>

  if( mci_send_cmd( mci, SD_MMC_STOP_READ_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
8000723e:	48 a8       	lddpc	r8,80007264 <sd_mmc_mci_read_close+0x8c>
80007240:	70 08       	ld.w	r8,r8[0x0]
80007242:	3f fa       	mov	r10,-1
80007244:	e2 6b 10 4c 	mov	r11,135244
80007248:	10 9c       	mov	r12,r8
8000724a:	f0 1f 00 0a 	mcall	80007270 <sd_mmc_mci_read_close+0x98>
8000724e:	18 98       	mov	r8,r12
80007250:	58 08       	cp.w	r8,0
80007252:	c0 30       	breq	80007258 <sd_mmc_mci_read_close+0x80>
    return false;
80007254:	30 08       	mov	r8,0
80007256:	c0 28       	rjmp	8000725a <sd_mmc_mci_read_close+0x82>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  return true;
80007258:	30 18       	mov	r8,1
}
8000725a:	10 9c       	mov	r12,r8
8000725c:	2f dd       	sub	sp,-12
8000725e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007262:	00 00       	add	r0,r0
80007264:	00 00       	add	r0,r0
80007266:	01 34       	ld.ub	r4,r0++
80007268:	00 00       	add	r0,r0
8000726a:	08 50       	eor	r0,r4
8000726c:	80 00       	ld.sh	r0,r0[0x0]
8000726e:	97 88       	st.w	r11[0x20],r8
80007270:	80 00       	ld.sh	r0,r0[0x0]
80007272:	96 34       	ld.sh	r4,r11[0x6]

80007274 <sd_mmc_mci_dma_write_open>:

  return true;
}

bool sd_mmc_mci_dma_write_open (uint8_t slot, uint32_t pos, const void* ram, uint16_t nb_sector)
{
80007274:	eb cd 40 80 	pushm	r7,lr
80007278:	1a 97       	mov	r7,sp
8000727a:	20 5d       	sub	sp,20
8000727c:	ef 4b ff f4 	st.w	r7[-12],r11
80007280:	ef 4a ff f0 	st.w	r7[-16],r10
80007284:	12 98       	mov	r8,r9
80007286:	18 99       	mov	r9,r12
80007288:	ef 69 ff f8 	st.b	r7[-8],r9
8000728c:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
80007290:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007294:	30 18       	mov	r8,1
80007296:	f0 09 18 00 	cp.b	r9,r8
8000729a:	e0 88 00 04 	brls	800072a2 <sd_mmc_mci_dma_write_open+0x2e>
    return false;
8000729e:	30 08       	mov	r8,0
800072a0:	c8 88       	rjmp	800073b0 <sd_mmc_mci_dma_write_open+0x13c>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
800072a2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800072a6:	4c 59       	lddpc	r9,800073b8 <sd_mmc_mci_dma_write_open+0x144>
800072a8:	f2 08 07 08 	ld.ub	r8,r9[r8]
800072ac:	10 9a       	mov	r10,r8
800072ae:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800072b2:	4c 38       	lddpc	r8,800073bc <sd_mmc_mci_dma_write_open+0x148>
800072b4:	70 08       	ld.w	r8,r8[0x0]
800072b6:	12 9b       	mov	r11,r9
800072b8:	10 9c       	mov	r12,r8
800072ba:	f0 1f 00 42 	mcall	800073c0 <sd_mmc_mci_dma_write_open+0x14c>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
800072be:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800072c2:	4c 18       	lddpc	r8,800073c4 <sd_mmc_mci_dma_write_open+0x150>
800072c4:	ee fa ff f4 	ld.w	r10,r7[-12]
800072c8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
800072cc:	4b c8       	lddpc	r8,800073bc <sd_mmc_mci_dma_write_open+0x148>
800072ce:	70 08       	ld.w	r8,r8[0x0]
800072d0:	10 9c       	mov	r12,r8
800072d2:	f0 1f 00 3e 	mcall	800073c8 <sd_mmc_mci_dma_write_open+0x154>
      return false;
   }
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
800072d6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800072da:	4b b8       	lddpc	r8,800073c4 <sd_mmc_mci_dma_write_open+0x150>
800072dc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800072e0:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800072e4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800072e8:	4b 99       	lddpc	r9,800073cc <sd_mmc_mci_dma_write_open+0x158>
800072ea:	f2 08 07 08 	ld.ub	r8,r9[r8]
800072ee:	e2 18 00 10 	andl	r8,0x10,COH
800072f2:	c0 e1       	brne	8000730e <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
800072f4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800072f8:	4b 59       	lddpc	r9,800073cc <sd_mmc_mci_dma_write_open+0x158>
800072fa:	f2 08 07 08 	ld.ub	r8,r9[r8]
800072fe:	e2 18 00 20 	andl	r8,0x20,COH
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
80007302:	c0 61       	brne	8000730e <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
80007304:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007308:	a9 78       	lsl	r8,0x9
8000730a:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  // Set Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
8000730e:	4a c8       	lddpc	r8,800073bc <sd_mmc_mci_dma_write_open+0x148>
80007310:	70 08       	ld.w	r8,r8[0x0]
80007312:	e0 6b 02 00 	mov	r11,512
80007316:	10 9c       	mov	r12,r8
80007318:	f0 1f 00 2e 	mcall	800073d0 <sd_mmc_mci_dma_write_open+0x15c>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
8000731c:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80007320:	4a 78       	lddpc	r8,800073bc <sd_mmc_mci_dma_write_open+0x148>
80007322:	70 08       	ld.w	r8,r8[0x0]
80007324:	12 9b       	mov	r11,r9
80007326:	10 9c       	mov	r12,r8
80007328:	f0 1f 00 2b 	mcall	800073d4 <sd_mmc_mci_dma_write_open+0x160>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
8000732c:	fc 18 ff 10 	movh	r8,0xff10
80007330:	30 19       	mov	r9,1
80007332:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
80007336:	fe 68 40 00 	mov	r8,-114688
8000733a:	30 09       	mov	r9,0
8000733c:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
80007340:	fc 18 ff 10 	movh	r8,0xff10
80007344:	30 09       	mov	r9,0
80007346:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
8000734a:	fc 18 ff 10 	movh	r8,0xff10
8000734e:	e0 69 d8 24 	mov	r9,55332
80007352:	ea 19 02 10 	orh	r9,0x210
80007356:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
8000735a:	fc 18 ff 10 	movh	r8,0xff10
8000735e:	30 09       	mov	r9,0
80007360:	f1 49 00 98 	st.w	r8[152],r9
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: hw handshaking
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80007364:	fc 18 ff 10 	movh	r8,0xff10
80007368:	e0 69 18 00 	mov	r9,6144
8000736c:	f1 49 00 9c 	st.w	r8[156],r9
    (AVR32_DMACA_CH_MMCI_TX << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf:
    (0                      << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
80007370:	fe 68 40 00 	mov	r8,-114688
80007374:	e0 69 01 30 	mov	r9,304
80007378:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD24)
  if(mci_send_cmd(mci, SD_MMC_WRITE_MULTIPLE_BLOCK_CMD, addr )!=MCI_SUCCESS)
8000737c:	49 08       	lddpc	r8,800073bc <sd_mmc_mci_dma_write_open+0x148>
8000737e:	70 08       	ld.w	r8,r8[0x0]
80007380:	ee fa ff fc 	ld.w	r10,r7[-4]
80007384:	e8 7b 10 59 	mov	r11,594009
80007388:	10 9c       	mov	r12,r8
8000738a:	f0 1f 00 14 	mcall	800073d8 <sd_mmc_mci_dma_write_open+0x164>
8000738e:	18 98       	mov	r8,r12
80007390:	58 08       	cp.w	r8,0
80007392:	c0 30       	breq	80007398 <sd_mmc_mci_dma_write_open+0x124>
  {
    return false;
80007394:	30 08       	mov	r8,0
80007396:	c0 d8       	rjmp	800073b0 <sd_mmc_mci_dma_write_open+0x13c>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
80007398:	48 98       	lddpc	r8,800073bc <sd_mmc_mci_dma_write_open+0x148>
8000739a:	70 08       	ld.w	r8,r8[0x0]
8000739c:	10 9c       	mov	r12,r8
8000739e:	f0 1f 00 10 	mcall	800073dc <sd_mmc_mci_dma_write_open+0x168>
800073a2:	18 98       	mov	r8,r12
800073a4:	e6 18 f0 50 	andh	r8,0xf050,COH
800073a8:	c0 30       	breq	800073ae <sd_mmc_mci_dma_write_open+0x13a>
  {
    return false;
800073aa:	30 08       	mov	r8,0
800073ac:	c0 28       	rjmp	800073b0 <sd_mmc_mci_dma_write_open+0x13c>
  }

  return true;
800073ae:	30 18       	mov	r8,1
}
800073b0:	10 9c       	mov	r12,r8
800073b2:	2f bd       	sub	sp,-20
800073b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800073b8:	00 00       	add	r0,r0
800073ba:	0b d8       	ld.ub	r8,r5[0x5]
800073bc:	00 00       	add	r0,r0
800073be:	01 34       	ld.ub	r4,r0++
800073c0:	80 00       	ld.sh	r0,r0[0x0]
800073c2:	97 cc       	st.w	r11[0x30],r12
800073c4:	00 00       	add	r0,r0
800073c6:	06 c0       	st.b	r3++,r0
800073c8:	80 00       	ld.sh	r0,r0[0x0]
800073ca:	97 88       	st.w	r11[0x20],r8
800073cc:	00 00       	add	r0,r0
800073ce:	0d e0       	ld.ub	r0,r6[0x6]
800073d0:	80 00       	ld.sh	r0,r0[0x0]
800073d2:	95 b4       	st.w	r10[0x2c],r4
800073d4:	80 00       	ld.sh	r0,r0[0x0]
800073d6:	95 fe       	st.w	r10[0x3c],lr
800073d8:	80 00       	ld.sh	r0,r0[0x0]
800073da:	96 34       	ld.sh	r4,r11[0x6]
800073dc:	80 00       	ld.sh	r0,r0[0x0]
800073de:	97 6c       	st.w	r11[0x18],r12

800073e0 <sd_mmc_mci_write_close>:

bool sd_mmc_mci_write_close (uint8_t slot)
{
800073e0:	eb cd 40 80 	pushm	r7,lr
800073e4:	1a 97       	mov	r7,sp
800073e6:	20 5d       	sub	sp,20
800073e8:	18 98       	mov	r8,r12
800073ea:	ef 68 ff ec 	st.b	r7[-20],r8
  if( (mci_crc_error(mci)) )
800073ee:	4b 58       	lddpc	r8,800074c0 <sd_mmc_mci_write_close+0xe0>
800073f0:	70 08       	ld.w	r8,r8[0x0]
800073f2:	ef 48 ff f0 	st.w	r7[-16],r8
800073f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800073fa:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800073fe:	4b 28       	lddpc	r8,800074c4 <sd_mmc_mci_write_close+0xe4>
80007400:	70 08       	ld.w	r8,r8[0x0]
80007402:	10 99       	mov	r9,r8
80007404:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007408:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000740c:	71 08       	ld.w	r8,r8[0x40]
8000740e:	f3 e8 10 08 	or	r8,r9,r8
80007412:	10 99       	mov	r9,r8
80007414:	4a c8       	lddpc	r8,800074c4 <sd_mmc_mci_write_close+0xe4>
80007416:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007418:	4a b8       	lddpc	r8,800074c4 <sd_mmc_mci_write_close+0xe4>
8000741a:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
8000741c:	e6 18 00 20 	andh	r8,0x20,COH
80007420:	c0 90       	breq	80007432 <sd_mmc_mci_write_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
80007422:	4a 98       	lddpc	r8,800074c4 <sd_mmc_mci_write_close+0xe4>
80007424:	70 08       	ld.w	r8,r8[0x0]
80007426:	10 99       	mov	r9,r8
80007428:	b5 d9       	cbr	r9,0x15
8000742a:	4a 78       	lddpc	r8,800074c4 <sd_mmc_mci_write_close+0xe4>
8000742c:	91 09       	st.w	r8[0x0],r9
    return true;
8000742e:	30 18       	mov	r8,1
80007430:	c0 28       	rjmp	80007434 <sd_mmc_mci_write_close+0x54>
  }
  else
    return false;
80007432:	30 08       	mov	r8,0
80007434:	58 08       	cp.w	r8,0
80007436:	c0 30       	breq	8000743c <sd_mmc_mci_write_close+0x5c>
  {
    return false;  // An CRC error has been seen
80007438:	30 08       	mov	r8,0
8000743a:	c3 e8       	rjmp	800074b6 <sd_mmc_mci_write_close+0xd6>
  }

  while(!(mci_data_block_ended(mci)));
8000743c:	4a 18       	lddpc	r8,800074c0 <sd_mmc_mci_write_close+0xe0>
8000743e:	70 08       	ld.w	r8,r8[0x0]
80007440:	ef 48 ff f8 	st.w	r7[-8],r8
80007444:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007448:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
8000744c:	49 e8       	lddpc	r8,800074c4 <sd_mmc_mci_write_close+0xe4>
8000744e:	70 08       	ld.w	r8,r8[0x0]
80007450:	10 99       	mov	r9,r8
80007452:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007456:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000745a:	71 08       	ld.w	r8,r8[0x40]
8000745c:	f3 e8 10 08 	or	r8,r9,r8
80007460:	10 99       	mov	r9,r8
80007462:	49 98       	lddpc	r8,800074c4 <sd_mmc_mci_write_close+0xe4>
80007464:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007466:	49 88       	lddpc	r8,800074c4 <sd_mmc_mci_write_close+0xe4>
80007468:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_data_block_ended(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_XFRDONE_MASK) != 0;
8000746a:	e6 18 08 00 	andh	r8,0x800,COH
8000746e:	5f 18       	srne	r8
80007470:	58 08       	cp.w	r8,0
80007472:	ce 50       	breq	8000743c <sd_mmc_mci_write_close+0x5c>

  if( mci_send_cmd( mci, SD_MMC_STOP_WRITE_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
80007474:	49 38       	lddpc	r8,800074c0 <sd_mmc_mci_write_close+0xe0>
80007476:	70 08       	ld.w	r8,r8[0x0]
80007478:	3f fa       	mov	r10,-1
8000747a:	e2 6b 10 cc 	mov	r11,135372
8000747e:	10 9c       	mov	r12,r8
80007480:	f0 1f 00 12 	mcall	800074c8 <sd_mmc_mci_write_close+0xe8>
80007484:	18 98       	mov	r8,r12
80007486:	58 08       	cp.w	r8,0
80007488:	c0 30       	breq	8000748e <sd_mmc_mci_write_close+0xae>
  {
    return false;
8000748a:	30 08       	mov	r8,0
8000748c:	c1 58       	rjmp	800074b6 <sd_mmc_mci_write_close+0xd6>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  if( slot==SD_SLOT_4BITS )
8000748e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80007492:	30 18       	mov	r8,1
80007494:	f0 09 18 00 	cp.b	r9,r8
80007498:	c0 81       	brne	800074a8 <sd_mmc_mci_write_close+0xc8>
  {
    while(!(gpio_get_pin_value(SD_SLOT_4BITS_DATA0_PIN)));                             // Wait until the card is ready.
8000749a:	31 3c       	mov	r12,19
8000749c:	f0 1f 00 0c 	mcall	800074cc <sd_mmc_mci_write_close+0xec>
800074a0:	18 98       	mov	r8,r12
800074a2:	58 08       	cp.w	r8,0
800074a4:	cf b0       	breq	8000749a <sd_mmc_mci_write_close+0xba>
800074a6:	c0 78       	rjmp	800074b4 <sd_mmc_mci_write_close+0xd4>
  }
  else
  {
    while(!(gpio_get_pin_value(SD_SLOT_8BITS_DATA0_PIN)));                             // Wait until the card is ready.
800074a8:	31 dc       	mov	r12,29
800074aa:	f0 1f 00 09 	mcall	800074cc <sd_mmc_mci_write_close+0xec>
800074ae:	18 98       	mov	r8,r12
800074b0:	58 08       	cp.w	r8,0
800074b2:	cf b0       	breq	800074a8 <sd_mmc_mci_write_close+0xc8>
  }
  return true;
800074b4:	30 18       	mov	r8,1
}
800074b6:	10 9c       	mov	r12,r8
800074b8:	2f bd       	sub	sp,-20
800074ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800074be:	00 00       	add	r0,r0
800074c0:	00 00       	add	r0,r0
800074c2:	01 34       	ld.ub	r4,r0++
800074c4:	00 00       	add	r0,r0
800074c6:	08 50       	eor	r0,r4
800074c8:	80 00       	ld.sh	r0,r0[0x0]
800074ca:	96 34       	ld.sh	r4,r11[0x6]
800074cc:	80 00       	ld.sh	r0,r0[0x0]
800074ce:	90 60       	ld.sh	r0,r8[0xc]

800074d0 <int2alpha>:

char Statement[MSG_LENGTH] = {0};
uint16_t enciphered_blocks = 0, deciphered_blocks = 0, aes_step = 0;
//MESSAGE_STRING_t Lcd_Message;
void int2alpha (uint16_t value, char * dest)
{
800074d0:	eb cd 40 80 	pushm	r7,lr
800074d4:	1a 97       	mov	r7,sp
800074d6:	20 5d       	sub	sp,20
800074d8:	18 98       	mov	r8,r12
800074da:	ef 4b ff ec 	st.w	r7[-20],r11
800074de:	ef 58 ff f0 	st.h	r7[-16],r8
	uint8_t i = 0, value_len = 0, temp[10];
800074e2:	30 08       	mov	r8,0
800074e4:	ef 68 ff fe 	st.b	r7[-2],r8
800074e8:	30 08       	mov	r8,0
800074ea:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (value == 0)
800074ee:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800074f2:	30 08       	mov	r8,0
800074f4:	f0 09 19 00 	cp.h	r9,r8
800074f8:	c2 c1       	brne	80007550 <int2alpha+0x80>
	{
		return;
800074fa:	c5 68       	rjmp	800075a6 <int2alpha+0xd6>
	}
	while (value != 0)
	{
		temp[i++] = value % 10 + '0';
800074fc:	ef 3b ff fe 	ld.ub	r11,r7[-2]
80007500:	ef 1a ff f0 	ld.uh	r10,r7[-16]
80007504:	e0 68 cc cd 	mov	r8,52429
80007508:	ea 18 cc cc 	orh	r8,0xcccc
8000750c:	f4 08 06 48 	mulu.d	r8,r10,r8
80007510:	a3 99       	lsr	r9,0x3
80007512:	12 98       	mov	r8,r9
80007514:	a3 68       	lsl	r8,0x2
80007516:	12 08       	add	r8,r9
80007518:	a1 78       	lsl	r8,0x1
8000751a:	f4 08 01 08 	sub	r8,r10,r8
8000751e:	5c 88       	casts.h	r8
80007520:	5c 58       	castu.b	r8
80007522:	2d 08       	sub	r8,-48
80007524:	5c 58       	castu.b	r8
80007526:	ee 0b 00 09 	add	r9,r7,r11
8000752a:	f3 68 ff f4 	st.b	r9[-12],r8
8000752e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007532:	2f f8       	sub	r8,-1
80007534:	ef 68 ff fe 	st.b	r7[-2],r8
		value /= 10;
80007538:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000753c:	e0 68 cc cd 	mov	r8,52429
80007540:	ea 18 cc cc 	orh	r8,0xcccc
80007544:	f2 08 06 48 	mulu.d	r8,r9,r8
80007548:	f2 08 16 03 	lsr	r8,r9,0x3
8000754c:	ef 58 ff f0 	st.h	r7[-16],r8
	
	if (value == 0)
	{
		return;
	}
	while (value != 0)
80007550:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007554:	30 08       	mov	r8,0
80007556:	f0 09 19 00 	cp.h	r9,r8
8000755a:	cd 11       	brne	800074fc <int2alpha+0x2c>
	{
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
8000755c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007560:	ef 68 ff ff 	st.b	r7[-1],r8
	i  = 0;
80007564:	30 08       	mov	r8,0
80007566:	ef 68 ff fe 	st.b	r7[-2],r8
	while (i < value_len)
8000756a:	c1 78       	rjmp	80007598 <int2alpha+0xc8>
	{
		dest[i] = temp[value_len - i - 1];
8000756c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007570:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007574:	10 09       	add	r9,r8
80007576:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000757a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000757e:	f4 08 01 08 	sub	r8,r10,r8
80007582:	20 18       	sub	r8,1
80007584:	ee 08 00 08 	add	r8,r7,r8
80007588:	f1 38 ff f4 	ld.ub	r8,r8[-12]
8000758c:	b2 88       	st.b	r9[0x0],r8
		i++;
8000758e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007592:	2f f8       	sub	r8,-1
80007594:	ef 68 ff fe 	st.b	r7[-2],r8
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
	i  = 0;
	while (i < value_len)
80007598:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000759c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800075a0:	f0 09 18 00 	cp.b	r9,r8
800075a4:	ce 43       	brcs	8000756c <int2alpha+0x9c>
	{
		dest[i] = temp[value_len - i - 1];
		i++;
	}
}
800075a6:	2f bd       	sub	sp,-20
800075a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800075ac <string_len>:

uint8_t string_len(char * source_str)
{
800075ac:	eb cd 40 80 	pushm	r7,lr
800075b0:	1a 97       	mov	r7,sp
800075b2:	20 2d       	sub	sp,8
800075b4:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t i = 0;
800075b8:	30 08       	mov	r8,0
800075ba:	ef 68 ff ff 	st.b	r7[-1],r8
	
	while (*source_str++ != '\0')
800075be:	c0 68       	rjmp	800075ca <string_len+0x1e>
	{
		i++;
800075c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800075c4:	2f f8       	sub	r8,-1
800075c6:	ef 68 ff ff 	st.b	r7[-1],r8

uint8_t string_len(char * source_str)
{
	uint8_t i = 0;
	
	while (*source_str++ != '\0')
800075ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800075ce:	11 89       	ld.ub	r9,r8[0x0]
800075d0:	30 08       	mov	r8,0
800075d2:	f0 09 18 00 	cp.b	r9,r8
800075d6:	5f 18       	srne	r8
800075d8:	5c 58       	castu.b	r8
800075da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800075de:	2f f9       	sub	r9,-1
800075e0:	ef 49 ff f8 	st.w	r7[-8],r9
800075e4:	58 08       	cp.w	r8,0
800075e6:	ce d1       	brne	800075c0 <string_len+0x14>
	{
		i++;
	}
	return i;
800075e8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800075ec:	10 9c       	mov	r12,r8
800075ee:	2f ed       	sub	sp,-8
800075f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800075f4 <string_cat>:

void string_cat(const char * source, char * dest)
{
800075f4:	eb cd 40 80 	pushm	r7,lr
800075f8:	1a 97       	mov	r7,sp
800075fa:	20 2d       	sub	sp,8
800075fc:	ef 4c ff fc 	st.w	r7[-4],r12
80007600:	ef 4b ff f8 	st.w	r7[-8],r11
	while (*source != '\0')
80007604:	c1 18       	rjmp	80007626 <string_cat+0x32>
	{
		*dest++ = *source++;
80007606:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000760a:	11 88       	ld.ub	r8,r8[0x0]
8000760c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007610:	b2 88       	st.b	r9[0x0],r8
80007612:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007616:	2f f8       	sub	r8,-1
80007618:	ef 48 ff f8 	st.w	r7[-8],r8
8000761c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007620:	2f f8       	sub	r8,-1
80007622:	ef 48 ff fc 	st.w	r7[-4],r8
	return i;
}

void string_cat(const char * source, char * dest)
{
	while (*source != '\0')
80007626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000762a:	11 88       	ld.ub	r8,r8[0x0]
8000762c:	58 08       	cp.w	r8,0
8000762e:	ce c1       	brne	80007606 <string_cat+0x12>
	{
		*dest++ = *source++;
	}
}
80007630:	2f ed       	sub	sp,-8
80007632:	e3 cd 80 80 	ldm	sp++,r7,pc
80007636:	d7 03       	nop

80007638 <sd_mmc_mci_read_multiple_sector>:

bool sd_mmc_mci_read_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
80007638:	eb cd 40 80 	pushm	r7,lr
8000763c:	1a 97       	mov	r7,sp
8000763e:	20 5d       	sub	sp,20
80007640:	18 99       	mov	r9,r12
80007642:	16 98       	mov	r8,r11
80007644:	ef 4a ff ec 	st.w	r7[-20],r10
80007648:	ef 69 ff f4 	st.b	r7[-12],r9
8000764c:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
80007650:	30 18       	mov	r8,1
80007652:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
80007656:	30 08       	mov	r8,0
80007658:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
8000765c:	30 08       	mov	r8,0
8000765e:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
80007662:	30 08       	mov	r8,0
80007664:	ef 68 ff ff 	st.b	r7[-1],r8
80007668:	c0 c8       	rjmp	80007680 <sd_mmc_mci_read_multiple_sector+0x48>
  {
	  Statement[i] = 0;
8000766a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000766e:	4f 6a       	lddpc	r10,80007844 <sd_mmc_mci_read_multiple_sector+0x20c>
80007670:	30 08       	mov	r8,0
80007672:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
80007676:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000767a:	2f f8       	sub	r8,-1
8000767c:	ef 68 ff ff 	st.b	r7[-1],r8
80007680:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007684:	36 38       	mov	r8,99
80007686:	f0 09 18 00 	cp.b	r9,r8
8000768a:	fe 98 ff f0 	brls	8000766a <sd_mmc_mci_read_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
8000768e:	4e f8       	lddpc	r8,80007848 <sd_mmc_mci_read_multiple_sector+0x210>
80007690:	90 08       	ld.sh	r8,r8[0x0]
80007692:	2f f8       	sub	r8,-1
80007694:	5c 88       	casts.h	r8
80007696:	4e d9       	lddpc	r9,80007848 <sd_mmc_mci_read_multiple_sector+0x210>
80007698:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks = 0;
8000769a:	4e d9       	lddpc	r9,8000784c <sd_mmc_mci_read_multiple_sector+0x214>
8000769c:	30 08       	mov	r8,0
8000769e:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks += nb_sector;
800076a0:	4e c8       	lddpc	r8,80007850 <sd_mmc_mci_read_multiple_sector+0x218>
800076a2:	90 08       	ld.sh	r8,r8[0x0]
800076a4:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800076a8:	f2 08 00 08 	add	r8,r9,r8
800076ac:	5c 88       	casts.h	r8
800076ae:	4e 99       	lddpc	r9,80007850 <sd_mmc_mci_read_multiple_sector+0x218>
800076b0:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
800076b2:	4e 68       	lddpc	r8,80007848 <sd_mmc_mci_read_multiple_sector+0x210>
800076b4:	90 08       	ld.sh	r8,r8[0x0]
800076b6:	5c 78       	castu.h	r8
800076b8:	4e 3b       	lddpc	r11,80007844 <sd_mmc_mci_read_multiple_sector+0x20c>
800076ba:	10 9c       	mov	r12,r8
800076bc:	f0 1f 00 66 	mcall	80007854 <sd_mmc_mci_read_multiple_sector+0x21c>
  string_cat(" Deciphered ", &Statement[string_len(Statement)]);
800076c0:	4e 1c       	lddpc	r12,80007844 <sd_mmc_mci_read_multiple_sector+0x20c>
800076c2:	f0 1f 00 66 	mcall	80007858 <sd_mmc_mci_read_multiple_sector+0x220>
800076c6:	18 98       	mov	r8,r12
800076c8:	10 99       	mov	r9,r8
800076ca:	4d f8       	lddpc	r8,80007844 <sd_mmc_mci_read_multiple_sector+0x20c>
800076cc:	f2 08 00 08 	add	r8,r9,r8
800076d0:	10 9b       	mov	r11,r8
800076d2:	4e 3c       	lddpc	r12,8000785c <sd_mmc_mci_read_multiple_sector+0x224>
800076d4:	f0 1f 00 63 	mcall	80007860 <sd_mmc_mci_read_multiple_sector+0x228>
  int2alpha(deciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
800076d8:	4d bc       	lddpc	r12,80007844 <sd_mmc_mci_read_multiple_sector+0x20c>
800076da:	f0 1f 00 60 	mcall	80007858 <sd_mmc_mci_read_multiple_sector+0x220>
800076de:	18 98       	mov	r8,r12
800076e0:	10 99       	mov	r9,r8
800076e2:	4d 98       	lddpc	r8,80007844 <sd_mmc_mci_read_multiple_sector+0x20c>
800076e4:	10 09       	add	r9,r8
800076e6:	4d b8       	lddpc	r8,80007850 <sd_mmc_mci_read_multiple_sector+0x218>
800076e8:	90 08       	ld.sh	r8,r8[0x0]
800076ea:	5c 78       	castu.h	r8
800076ec:	12 9b       	mov	r11,r9
800076ee:	10 9c       	mov	r12,r8
800076f0:	f0 1f 00 59 	mcall	80007854 <sd_mmc_mci_read_multiple_sector+0x21c>
  string_cat(" sectors", &Statement[string_len(Statement)]);
800076f4:	4d 4c       	lddpc	r12,80007844 <sd_mmc_mci_read_multiple_sector+0x20c>
800076f6:	f0 1f 00 59 	mcall	80007858 <sd_mmc_mci_read_multiple_sector+0x220>
800076fa:	18 98       	mov	r8,r12
800076fc:	10 99       	mov	r9,r8
800076fe:	4d 28       	lddpc	r8,80007844 <sd_mmc_mci_read_multiple_sector+0x20c>
80007700:	f2 08 00 08 	add	r8,r9,r8
80007704:	10 9b       	mov	r11,r8
80007706:	4d 8c       	lddpc	r12,80007864 <sd_mmc_mci_read_multiple_sector+0x22c>
80007708:	f0 1f 00 56 	mcall	80007860 <sd_mmc_mci_read_multiple_sector+0x228>
  
  //et024006_DrawFilledRect(10, 3 * 10, ET024006_WIDTH, 10, WHITE);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 3 * 10, WHITE, BLACK);
8000770c:	4d 7b       	lddpc	r11,80007868 <sd_mmc_mci_read_multiple_sector+0x230>
8000770e:	30 08       	mov	r8,0
80007710:	1a d8       	st.w	--sp,r8
80007712:	e0 68 ff ff 	mov	r8,65535
80007716:	31 e9       	mov	r9,30
80007718:	30 aa       	mov	r10,10
8000771a:	4c bc       	lddpc	r12,80007844 <sd_mmc_mci_read_multiple_sector+0x20c>
8000771c:	f0 1f 00 54 	mcall	8000786c <sd_mmc_mci_read_multiple_sector+0x234>
80007720:	2f fd       	sub	sp,-4
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
80007722:	c5 48       	rjmp	800077ca <sd_mmc_mci_read_multiple_sector+0x192>
  {
    // (re)load first stage.
    dma_mci_2_ram((0==(buffer_id++%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80007724:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007728:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000772c:	5f 08       	sreq	r8
8000772e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007732:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007736:	2f f8       	sub	r8,-1
80007738:	ef 68 ff fb 	st.b	r7[-5],r8
8000773c:	58 09       	cp.w	r9,0
8000773e:	c0 30       	breq	80007744 <sd_mmc_mci_read_multiple_sector+0x10c>
80007740:	4c c8       	lddpc	r8,80007870 <sd_mmc_mci_read_multiple_sector+0x238>
80007742:	c0 28       	rjmp	80007746 <sd_mmc_mci_read_multiple_sector+0x10e>
80007744:	4c c8       	lddpc	r8,80007874 <sd_mmc_mci_read_multiple_sector+0x23c>
80007746:	e0 6b 02 00 	mov	r11,512
8000774a:	10 9c       	mov	r12,r8
8000774c:	f0 1f 00 4b 	mcall	80007878 <sd_mmc_mci_read_multiple_sector+0x240>

    // (re)load second stage.
    if( !b_first_step )
80007750:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007754:	ec 18 00 01 	eorl	r8,0x1
80007758:	5c 58       	castu.b	r8
8000775a:	c2 e0       	breq	800077b6 <sd_mmc_mci_read_multiple_sector+0x17e>
	{
      apply_aes_decryption(&AVR32_AES, (0==(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
8000775c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007760:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007764:	c0 31       	brne	8000776a <sd_mmc_mci_read_multiple_sector+0x132>
80007766:	4c 38       	lddpc	r8,80007870 <sd_mmc_mci_read_multiple_sector+0x238>
80007768:	c0 28       	rjmp	8000776c <sd_mmc_mci_read_multiple_sector+0x134>
8000776a:	4c 38       	lddpc	r8,80007874 <sd_mmc_mci_read_multiple_sector+0x23c>
8000776c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007770:	e0 6a 02 00 	mov	r10,512
80007774:	10 9b       	mov	r11,r8
80007776:	fc 7c 00 00 	mov	r12,-196608
8000777a:	f0 1f 00 41 	mcall	8000787c <sd_mmc_mci_read_multiple_sector+0x244>
	  addr = addr + 512L; //sector_index++;
8000777e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007782:	f0 c8 fe 00 	sub	r8,r8,-512
80007786:	ef 48 ff ec 	st.w	r7[-20],r8
	  if (!udi_msc_trans_block(true, (0==(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
8000778a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000778e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007792:	c0 31       	brne	80007798 <sd_mmc_mci_read_multiple_sector+0x160>
80007794:	4b 78       	lddpc	r8,80007870 <sd_mmc_mci_read_multiple_sector+0x238>
80007796:	c0 28       	rjmp	8000779a <sd_mmc_mci_read_multiple_sector+0x162>
80007798:	4b 78       	lddpc	r8,80007874 <sd_mmc_mci_read_multiple_sector+0x23c>
8000779a:	30 09       	mov	r9,0
8000779c:	e0 6a 02 00 	mov	r10,512
800077a0:	10 9b       	mov	r11,r8
800077a2:	30 1c       	mov	r12,1
800077a4:	f0 1f 00 37 	mcall	80007880 <sd_mmc_mci_read_multiple_sector+0x248>
800077a8:	18 98       	mov	r8,r12
800077aa:	ec 18 00 01 	eorl	r8,0x1
800077ae:	5c 58       	castu.b	r8
800077b0:	c0 30       	breq	800077b6 <sd_mmc_mci_read_multiple_sector+0x17e>
	  {
    	    return false;
800077b2:	30 08       	mov	r8,0
800077b4:	c4 48       	rjmp	8000783c <sd_mmc_mci_read_multiple_sector+0x204>
      }

    }
    b_first_step = false;
800077b6:	30 08       	mov	r8,0
800077b8:	ef 68 ff fa 	st.b	r7[-6],r8
    // Wait completion of DMACA stage.
    while( !is_dma_mci_2_ram_complete() );
800077bc:	f0 1f 00 32 	mcall	80007884 <sd_mmc_mci_read_multiple_sector+0x24c>
800077c0:	18 98       	mov	r8,r12
800077c2:	ec 18 00 01 	eorl	r8,0x1
800077c6:	5c 58       	castu.b	r8
800077c8:	cf a1       	brne	800077bc <sd_mmc_mci_read_multiple_sector+0x184>
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
800077ca:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800077ce:	30 08       	mov	r8,0
800077d0:	f0 09 19 00 	cp.h	r9,r8
800077d4:	5f 18       	srne	r8
800077d6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800077da:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800077de:	20 18       	sub	r8,1
800077e0:	ef 58 ff f0 	st.h	r7[-16],r8
800077e4:	58 09       	cp.w	r9,0
800077e6:	c9 f1       	brne	80007724 <sd_mmc_mci_read_multiple_sector+0xec>
    while( !is_dma_mci_2_ram_complete() );

  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_decryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
800077e8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800077ec:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800077f0:	5c 58       	castu.b	r8
800077f2:	c0 30       	breq	800077f8 <sd_mmc_mci_read_multiple_sector+0x1c0>
800077f4:	49 f8       	lddpc	r8,80007870 <sd_mmc_mci_read_multiple_sector+0x238>
800077f6:	c0 28       	rjmp	800077fa <sd_mmc_mci_read_multiple_sector+0x1c2>
800077f8:	49 f8       	lddpc	r8,80007874 <sd_mmc_mci_read_multiple_sector+0x23c>
800077fa:	ee f9 ff ec 	ld.w	r9,r7[-20]
800077fe:	e0 6a 02 00 	mov	r10,512
80007802:	10 9b       	mov	r11,r8
80007804:	fc 7c 00 00 	mov	r12,-196608
80007808:	f0 1f 00 1d 	mcall	8000787c <sd_mmc_mci_read_multiple_sector+0x244>
  if (!udi_msc_trans_block(true, (0!=(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
8000780c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007810:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007814:	5c 58       	castu.b	r8
80007816:	c0 30       	breq	8000781c <sd_mmc_mci_read_multiple_sector+0x1e4>
80007818:	49 68       	lddpc	r8,80007870 <sd_mmc_mci_read_multiple_sector+0x238>
8000781a:	c0 28       	rjmp	8000781e <sd_mmc_mci_read_multiple_sector+0x1e6>
8000781c:	49 68       	lddpc	r8,80007874 <sd_mmc_mci_read_multiple_sector+0x23c>
8000781e:	30 09       	mov	r9,0
80007820:	e0 6a 02 00 	mov	r10,512
80007824:	10 9b       	mov	r11,r8
80007826:	30 1c       	mov	r12,1
80007828:	f0 1f 00 16 	mcall	80007880 <sd_mmc_mci_read_multiple_sector+0x248>
8000782c:	18 98       	mov	r8,r12
8000782e:	ec 18 00 01 	eorl	r8,0x1
80007832:	5c 58       	castu.b	r8
80007834:	c0 30       	breq	8000783a <sd_mmc_mci_read_multiple_sector+0x202>
    return false;
80007836:	30 08       	mov	r8,0
80007838:	c0 28       	rjmp	8000783c <sd_mmc_mci_read_multiple_sector+0x204>

  return true;
8000783a:	30 18       	mov	r8,1
}
8000783c:	10 9c       	mov	r12,r8
8000783e:	2f bd       	sub	sp,-20
80007840:	e3 cd 80 80 	ldm	sp++,r7,pc
80007844:	00 00       	add	r0,r0
80007846:	06 c8       	st.b	r3++,r8
80007848:	00 00       	add	r0,r0
8000784a:	07 30       	ld.ub	r0,r3++
8000784c:	00 00       	add	r0,r0
8000784e:	07 2c       	ld.uh	r12,r3++
80007850:	00 00       	add	r0,r0
80007852:	07 2e       	ld.uh	lr,r3++
80007854:	80 00       	ld.sh	r0,r0[0x0]
80007856:	74 d0       	ld.w	r0,r10[0x34]
80007858:	80 00       	ld.sh	r0,r0[0x0]
8000785a:	75 ac       	ld.w	r12,r10[0x68]
8000785c:	80 00       	ld.sh	r0,r0[0x0]
8000785e:	5e 80       	retls	r0
80007860:	80 00       	ld.sh	r0,r0[0x0]
80007862:	75 f4       	ld.w	r4,r10[0x7c]
80007864:	80 00       	ld.sh	r0,r0[0x0]
80007866:	5e 90       	retgt	r0
80007868:	80 00       	ld.sh	r0,r0[0x0]
8000786a:	ef b4       	*unknown*
8000786c:	80 00       	ld.sh	r0,r0[0x0]
8000786e:	44 f0       	lddsp	r0,sp[0x13c]
80007870:	00 00       	add	r0,r0
80007872:	0b e0       	ld.ub	r0,r5[0x6]
80007874:	00 00       	add	r0,r0
80007876:	09 d8       	ld.ub	r8,r4[0x5]
80007878:	80 00       	ld.sh	r0,r0[0x0]
8000787a:	6e 84       	ld.w	r4,r7[0x20]
8000787c:	80 00       	ld.sh	r0,r0[0x0]
8000787e:	41 00       	lddsp	r0,sp[0x40]
80007880:	80 00       	ld.sh	r0,r0[0x0]
80007882:	d3 24       	*unknown*
80007884:	80 00       	ld.sh	r0,r0[0x0]
80007886:	6e d4       	ld.w	r4,r7[0x34]

80007888 <sd_mmc_mci_write_multiple_sector>:



bool sd_mmc_mci_write_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
80007888:	eb cd 40 80 	pushm	r7,lr
8000788c:	1a 97       	mov	r7,sp
8000788e:	20 5d       	sub	sp,20
80007890:	18 99       	mov	r9,r12
80007892:	16 98       	mov	r8,r11
80007894:	ef 4a ff ec 	st.w	r7[-20],r10
80007898:	ef 69 ff f4 	st.b	r7[-12],r9
8000789c:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
800078a0:	30 18       	mov	r8,1
800078a2:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
800078a6:	30 08       	mov	r8,0
800078a8:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
800078ac:	30 08       	mov	r8,0
800078ae:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
800078b2:	30 08       	mov	r8,0
800078b4:	ef 68 ff ff 	st.b	r7[-1],r8
800078b8:	c0 c8       	rjmp	800078d0 <sd_mmc_mci_write_multiple_sector+0x48>
  {
	  Statement[i] = 0;
800078ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800078be:	4f 6a       	lddpc	r10,80007a94 <sd_mmc_mci_write_multiple_sector+0x20c>
800078c0:	30 08       	mov	r8,0
800078c2:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
800078c6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800078ca:	2f f8       	sub	r8,-1
800078cc:	ef 68 ff ff 	st.b	r7[-1],r8
800078d0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800078d4:	36 38       	mov	r8,99
800078d6:	f0 09 18 00 	cp.b	r9,r8
800078da:	fe 98 ff f0 	brls	800078ba <sd_mmc_mci_write_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
800078de:	4e f8       	lddpc	r8,80007a98 <sd_mmc_mci_write_multiple_sector+0x210>
800078e0:	90 08       	ld.sh	r8,r8[0x0]
800078e2:	2f f8       	sub	r8,-1
800078e4:	5c 88       	casts.h	r8
800078e6:	4e d9       	lddpc	r9,80007a98 <sd_mmc_mci_write_multiple_sector+0x210>
800078e8:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks = 0;
800078ea:	4e d9       	lddpc	r9,80007a9c <sd_mmc_mci_write_multiple_sector+0x214>
800078ec:	30 08       	mov	r8,0
800078ee:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks += nb_sector;
800078f0:	4e c8       	lddpc	r8,80007aa0 <sd_mmc_mci_write_multiple_sector+0x218>
800078f2:	90 08       	ld.sh	r8,r8[0x0]
800078f4:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800078f8:	f2 08 00 08 	add	r8,r9,r8
800078fc:	5c 88       	casts.h	r8
800078fe:	4e 99       	lddpc	r9,80007aa0 <sd_mmc_mci_write_multiple_sector+0x218>
80007900:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
80007902:	4e 68       	lddpc	r8,80007a98 <sd_mmc_mci_write_multiple_sector+0x210>
80007904:	90 08       	ld.sh	r8,r8[0x0]
80007906:	5c 78       	castu.h	r8
80007908:	4e 3b       	lddpc	r11,80007a94 <sd_mmc_mci_write_multiple_sector+0x20c>
8000790a:	10 9c       	mov	r12,r8
8000790c:	f0 1f 00 66 	mcall	80007aa4 <sd_mmc_mci_write_multiple_sector+0x21c>
  string_cat(" Enciphered ", &Statement[string_len(Statement)]);
80007910:	4e 1c       	lddpc	r12,80007a94 <sd_mmc_mci_write_multiple_sector+0x20c>
80007912:	f0 1f 00 66 	mcall	80007aa8 <sd_mmc_mci_write_multiple_sector+0x220>
80007916:	18 98       	mov	r8,r12
80007918:	10 99       	mov	r9,r8
8000791a:	4d f8       	lddpc	r8,80007a94 <sd_mmc_mci_write_multiple_sector+0x20c>
8000791c:	f2 08 00 08 	add	r8,r9,r8
80007920:	10 9b       	mov	r11,r8
80007922:	4e 3c       	lddpc	r12,80007aac <sd_mmc_mci_write_multiple_sector+0x224>
80007924:	f0 1f 00 63 	mcall	80007ab0 <sd_mmc_mci_write_multiple_sector+0x228>
  int2alpha(enciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
80007928:	4d bc       	lddpc	r12,80007a94 <sd_mmc_mci_write_multiple_sector+0x20c>
8000792a:	f0 1f 00 60 	mcall	80007aa8 <sd_mmc_mci_write_multiple_sector+0x220>
8000792e:	18 98       	mov	r8,r12
80007930:	10 99       	mov	r9,r8
80007932:	4d 98       	lddpc	r8,80007a94 <sd_mmc_mci_write_multiple_sector+0x20c>
80007934:	10 09       	add	r9,r8
80007936:	4d b8       	lddpc	r8,80007aa0 <sd_mmc_mci_write_multiple_sector+0x218>
80007938:	90 08       	ld.sh	r8,r8[0x0]
8000793a:	5c 78       	castu.h	r8
8000793c:	12 9b       	mov	r11,r9
8000793e:	10 9c       	mov	r12,r8
80007940:	f0 1f 00 59 	mcall	80007aa4 <sd_mmc_mci_write_multiple_sector+0x21c>
  string_cat(" sectors", &Statement[string_len(Statement)]);
80007944:	4d 4c       	lddpc	r12,80007a94 <sd_mmc_mci_write_multiple_sector+0x20c>
80007946:	f0 1f 00 59 	mcall	80007aa8 <sd_mmc_mci_write_multiple_sector+0x220>
8000794a:	18 98       	mov	r8,r12
8000794c:	10 99       	mov	r9,r8
8000794e:	4d 28       	lddpc	r8,80007a94 <sd_mmc_mci_write_multiple_sector+0x20c>
80007950:	f2 08 00 08 	add	r8,r9,r8
80007954:	10 9b       	mov	r11,r8
80007956:	4d 8c       	lddpc	r12,80007ab4 <sd_mmc_mci_write_multiple_sector+0x22c>
80007958:	f0 1f 00 56 	mcall	80007ab0 <sd_mmc_mci_write_multiple_sector+0x228>
  
  //et024006_DrawFilledRect(10, 5 * 10, ET024006_WIDTH, 10, BLACK);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 5 * 10, WHITE, BLACK);  //et024006_PrintConsole(Statement, BLACK, -1);
8000795c:	4d 7b       	lddpc	r11,80007ab8 <sd_mmc_mci_write_multiple_sector+0x230>
8000795e:	30 08       	mov	r8,0
80007960:	1a d8       	st.w	--sp,r8
80007962:	e0 68 ff ff 	mov	r8,65535
80007966:	33 29       	mov	r9,50
80007968:	30 aa       	mov	r10,10
8000796a:	4c bc       	lddpc	r12,80007a94 <sd_mmc_mci_write_multiple_sector+0x20c>
8000796c:	f0 1f 00 54 	mcall	80007abc <sd_mmc_mci_write_multiple_sector+0x234>
80007970:	2f fd       	sub	sp,-4
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
80007972:	c5 58       	rjmp	80007a1c <sd_mmc_mci_write_multiple_sector+0x194>

    // (re)load second stage.
    if( !b_first_step )
80007974:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007978:	ec 18 00 01 	eorl	r8,0x1
8000797c:	5c 58       	castu.b	r8
8000797e:	c2 70       	breq	800079cc <sd_mmc_mci_write_multiple_sector+0x144>
	{
	  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
80007980:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007984:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007988:	5c 58       	castu.b	r8
8000798a:	c0 30       	breq	80007990 <sd_mmc_mci_write_multiple_sector+0x108>
8000798c:	4c d8       	lddpc	r8,80007ac0 <sd_mmc_mci_write_multiple_sector+0x238>
8000798e:	c0 28       	rjmp	80007992 <sd_mmc_mci_write_multiple_sector+0x10a>
80007990:	4c d8       	lddpc	r8,80007ac4 <sd_mmc_mci_write_multiple_sector+0x23c>
80007992:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007996:	e0 6a 02 00 	mov	r10,512
8000799a:	10 9b       	mov	r11,r8
8000799c:	fc 7c 00 00 	mov	r12,-196608
800079a0:	f0 1f 00 4a 	mcall	80007ac8 <sd_mmc_mci_write_multiple_sector+0x240>
	  addr = addr + 512L; //sector_index++;
800079a4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800079a8:	f0 c8 fe 00 	sub	r8,r8,-512
800079ac:	ef 48 ff ec 	st.w	r7[-20],r8
      dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
800079b0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800079b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079b8:	5c 58       	castu.b	r8
800079ba:	c0 30       	breq	800079c0 <sd_mmc_mci_write_multiple_sector+0x138>
800079bc:	4c 18       	lddpc	r8,80007ac0 <sd_mmc_mci_write_multiple_sector+0x238>
800079be:	c0 28       	rjmp	800079c2 <sd_mmc_mci_write_multiple_sector+0x13a>
800079c0:	4c 18       	lddpc	r8,80007ac4 <sd_mmc_mci_write_multiple_sector+0x23c>
800079c2:	e0 6b 02 00 	mov	r11,512
800079c6:	10 9c       	mov	r12,r8
800079c8:	f0 1f 00 41 	mcall	80007acc <sd_mmc_mci_write_multiple_sector+0x244>
    }
    udi_msc_trans_block(false, (0==(buffer_id++%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL);
800079cc:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800079d0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079d4:	5f 08       	sreq	r8
800079d6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800079da:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800079de:	2f f8       	sub	r8,-1
800079e0:	ef 68 ff fb 	st.b	r7[-5],r8
800079e4:	58 09       	cp.w	r9,0
800079e6:	c0 30       	breq	800079ec <sd_mmc_mci_write_multiple_sector+0x164>
800079e8:	4b 68       	lddpc	r8,80007ac0 <sd_mmc_mci_write_multiple_sector+0x238>
800079ea:	c0 28       	rjmp	800079ee <sd_mmc_mci_write_multiple_sector+0x166>
800079ec:	4b 68       	lddpc	r8,80007ac4 <sd_mmc_mci_write_multiple_sector+0x23c>
800079ee:	30 09       	mov	r9,0
800079f0:	e0 6a 02 00 	mov	r10,512
800079f4:	10 9b       	mov	r11,r8
800079f6:	30 0c       	mov	r12,0
800079f8:	f0 1f 00 36 	mcall	80007ad0 <sd_mmc_mci_write_multiple_sector+0x248>
    if( !b_first_step ) {
800079fc:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007a00:	ec 18 00 01 	eorl	r8,0x1
80007a04:	5c 58       	castu.b	r8
80007a06:	c0 80       	breq	80007a16 <sd_mmc_mci_write_multiple_sector+0x18e>
      // Wait completion of DMACA stage.
      while( !is_dma_ram_2_mci_complete() );
80007a08:	f0 1f 00 33 	mcall	80007ad4 <sd_mmc_mci_write_multiple_sector+0x24c>
80007a0c:	18 98       	mov	r8,r12
80007a0e:	ec 18 00 01 	eorl	r8,0x1
80007a12:	5c 58       	castu.b	r8
80007a14:	cf a1       	brne	80007a08 <sd_mmc_mci_write_multiple_sector+0x180>
    }
    b_first_step=false;
80007a16:	30 08       	mov	r8,0
80007a18:	ef 68 ff fa 	st.b	r7[-6],r8
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
80007a1c:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007a20:	30 08       	mov	r8,0
80007a22:	f0 09 19 00 	cp.h	r9,r8
80007a26:	5f 18       	srne	r8
80007a28:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007a2c:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80007a30:	20 18       	sub	r8,1
80007a32:	ef 58 ff f0 	st.h	r7[-16],r8
80007a36:	58 09       	cp.w	r9,0
80007a38:	c9 e1       	brne	80007974 <sd_mmc_mci_write_multiple_sector+0xec>
    }
    b_first_step=false;
  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
80007a3a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007a3e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007a42:	5c 58       	castu.b	r8
80007a44:	c0 30       	breq	80007a4a <sd_mmc_mci_write_multiple_sector+0x1c2>
80007a46:	49 f8       	lddpc	r8,80007ac0 <sd_mmc_mci_write_multiple_sector+0x238>
80007a48:	c0 28       	rjmp	80007a4c <sd_mmc_mci_write_multiple_sector+0x1c4>
80007a4a:	49 f8       	lddpc	r8,80007ac4 <sd_mmc_mci_write_multiple_sector+0x23c>
80007a4c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007a50:	e0 6a 02 00 	mov	r10,512
80007a54:	10 9b       	mov	r11,r8
80007a56:	fc 7c 00 00 	mov	r12,-196608
80007a5a:	f0 1f 00 1c 	mcall	80007ac8 <sd_mmc_mci_write_multiple_sector+0x240>
  dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80007a5e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007a62:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007a66:	5c 58       	castu.b	r8
80007a68:	c0 30       	breq	80007a6e <sd_mmc_mci_write_multiple_sector+0x1e6>
80007a6a:	49 68       	lddpc	r8,80007ac0 <sd_mmc_mci_write_multiple_sector+0x238>
80007a6c:	c0 28       	rjmp	80007a70 <sd_mmc_mci_write_multiple_sector+0x1e8>
80007a6e:	49 68       	lddpc	r8,80007ac4 <sd_mmc_mci_write_multiple_sector+0x23c>
80007a70:	e0 6b 02 00 	mov	r11,512
80007a74:	10 9c       	mov	r12,r8
80007a76:	f0 1f 00 16 	mcall	80007acc <sd_mmc_mci_write_multiple_sector+0x244>
  while( !is_dma_ram_2_mci_complete() );
80007a7a:	f0 1f 00 17 	mcall	80007ad4 <sd_mmc_mci_write_multiple_sector+0x24c>
80007a7e:	18 98       	mov	r8,r12
80007a80:	ec 18 00 01 	eorl	r8,0x1
80007a84:	5c 58       	castu.b	r8
80007a86:	cf a1       	brne	80007a7a <sd_mmc_mci_write_multiple_sector+0x1f2>
  return true;
80007a88:	30 18       	mov	r8,1
}
80007a8a:	10 9c       	mov	r12,r8
80007a8c:	2f bd       	sub	sp,-20
80007a8e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007a92:	00 00       	add	r0,r0
80007a94:	00 00       	add	r0,r0
80007a96:	06 c8       	st.b	r3++,r8
80007a98:	00 00       	add	r0,r0
80007a9a:	07 30       	ld.ub	r0,r3++
80007a9c:	00 00       	add	r0,r0
80007a9e:	07 2e       	ld.uh	lr,r3++
80007aa0:	00 00       	add	r0,r0
80007aa2:	07 2c       	ld.uh	r12,r3++
80007aa4:	80 00       	ld.sh	r0,r0[0x0]
80007aa6:	74 d0       	ld.w	r0,r10[0x34]
80007aa8:	80 00       	ld.sh	r0,r0[0x0]
80007aaa:	75 ac       	ld.w	r12,r10[0x68]
80007aac:	80 00       	ld.sh	r0,r0[0x0]
80007aae:	5e 9c       	retgt	r12
80007ab0:	80 00       	ld.sh	r0,r0[0x0]
80007ab2:	75 f4       	ld.w	r4,r10[0x7c]
80007ab4:	80 00       	ld.sh	r0,r0[0x0]
80007ab6:	5e 90       	retgt	r0
80007ab8:	80 00       	ld.sh	r0,r0[0x0]
80007aba:	ef b4       	*unknown*
80007abc:	80 00       	ld.sh	r0,r0[0x0]
80007abe:	44 f0       	lddsp	r0,sp[0x13c]
80007ac0:	00 00       	add	r0,r0
80007ac2:	0b e0       	ld.ub	r0,r5[0x6]
80007ac4:	00 00       	add	r0,r0
80007ac6:	09 d8       	ld.ub	r8,r4[0x5]
80007ac8:	80 00       	ld.sh	r0,r0[0x0]
80007aca:	3f f8       	mov	r8,-1
80007acc:	80 00       	ld.sh	r0,r0[0x0]
80007ace:	6e f4       	ld.w	r4,r7[0x3c]
80007ad0:	80 00       	ld.sh	r0,r0[0x0]
80007ad2:	d3 24       	*unknown*
80007ad4:	80 00       	ld.sh	r0,r0[0x0]
80007ad6:	6f 44       	ld.w	r4,r7[0x50]

80007ad8 <sd_mmc_mci_cmd_send_status>:
   return true;
}
#endif      // end FUNC_MMC_CARD_SECU

bool  sd_mmc_mci_cmd_send_status(uint8_t slot)
{
80007ad8:	eb cd 40 80 	pushm	r7,lr
80007adc:	1a 97       	mov	r7,sp
80007ade:	20 1d       	sub	sp,4
80007ae0:	18 98       	mov	r8,r12
80007ae2:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80007ae6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007aea:	30 18       	mov	r8,1
80007aec:	f0 09 18 00 	cp.b	r9,r8
80007af0:	e0 88 00 04 	brls	80007af8 <sd_mmc_mci_cmd_send_status+0x20>
    return false;
80007af4:	30 08       	mov	r8,0
80007af6:	c2 28       	rjmp	80007b3a <sd_mmc_mci_cmd_send_status+0x62>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80007af8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007afc:	49 29       	lddpc	r9,80007b44 <sd_mmc_mci_cmd_send_status+0x6c>
80007afe:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007b02:	10 9a       	mov	r10,r8
80007b04:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b08:	49 08       	lddpc	r8,80007b48 <sd_mmc_mci_cmd_send_status+0x70>
80007b0a:	70 08       	ld.w	r8,r8[0x0]
80007b0c:	12 9b       	mov	r11,r9
80007b0e:	10 9c       	mov	r12,r8
80007b10:	f0 1f 00 0f 	mcall	80007b4c <sd_mmc_mci_cmd_send_status+0x74>

  if (mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80007b14:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b18:	48 e8       	lddpc	r8,80007b50 <sd_mmc_mci_cmd_send_status+0x78>
80007b1a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80007b1e:	48 b8       	lddpc	r8,80007b48 <sd_mmc_mci_cmd_send_status+0x70>
80007b20:	70 08       	ld.w	r8,r8[0x0]
80007b22:	12 9a       	mov	r10,r9
80007b24:	e0 6b 10 4d 	mov	r11,4173
80007b28:	10 9c       	mov	r12,r8
80007b2a:	f0 1f 00 0b 	mcall	80007b54 <sd_mmc_mci_cmd_send_status+0x7c>
80007b2e:	18 98       	mov	r8,r12
80007b30:	58 08       	cp.w	r8,0
80007b32:	c0 30       	breq	80007b38 <sd_mmc_mci_cmd_send_status+0x60>
    return false;
80007b34:	30 08       	mov	r8,0
80007b36:	c0 28       	rjmp	80007b3a <sd_mmc_mci_cmd_send_status+0x62>

  return true;
80007b38:	30 18       	mov	r8,1
}
80007b3a:	10 9c       	mov	r12,r8
80007b3c:	2f fd       	sub	sp,-4
80007b3e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b42:	00 00       	add	r0,r0
80007b44:	00 00       	add	r0,r0
80007b46:	0b d8       	ld.ub	r8,r5[0x5]
80007b48:	00 00       	add	r0,r0
80007b4a:	01 34       	ld.ub	r4,r0++
80007b4c:	80 00       	ld.sh	r0,r0[0x0]
80007b4e:	97 cc       	st.w	r11[0x30],r12
80007b50:	00 00       	add	r0,r0
80007b52:	09 c8       	ld.ub	r8,r4[0x4]
80007b54:	80 00       	ld.sh	r0,r0[0x0]
80007b56:	96 34       	ld.sh	r4,r11[0x6]

80007b58 <sd_mmc_mci_test_unit_ready>:
80007b58:	eb cd 40 80 	pushm	r7,lr
80007b5c:	1a 97       	mov	r7,sp
80007b5e:	20 1d       	sub	sp,4
80007b60:	18 98       	mov	r8,r12
80007b62:	ef 68 ff fc 	st.b	r7[-4],r8
80007b66:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b6a:	30 18       	mov	r8,1
80007b6c:	f0 09 18 00 	cp.b	r9,r8
80007b70:	e0 88 00 04 	brls	80007b78 <sd_mmc_mci_test_unit_ready+0x20>
80007b74:	30 18       	mov	r8,1
80007b76:	c4 d8       	rjmp	80007c10 <sd_mmc_mci_test_unit_ready+0xb8>
80007b78:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007b7c:	4a 79       	lddpc	r9,80007c18 <sd_mmc_mci_test_unit_ready+0xc0>
80007b7e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007b82:	58 18       	cp.w	r8,1
80007b84:	c1 d0       	breq	80007bbe <sd_mmc_mci_test_unit_ready+0x66>
80007b86:	58 28       	cp.w	r8,2
80007b88:	c3 50       	breq	80007bf2 <sd_mmc_mci_test_unit_ready+0x9a>
80007b8a:	58 08       	cp.w	r8,0
80007b8c:	c3 b1       	brne	80007c02 <sd_mmc_mci_test_unit_ready+0xaa>
80007b8e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b92:	4a 3a       	lddpc	r10,80007c1c <sd_mmc_mci_test_unit_ready+0xc4>
80007b94:	30 08       	mov	r8,0
80007b96:	f4 09 0b 08 	st.b	r10[r9],r8
80007b9a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007b9e:	10 9c       	mov	r12,r8
80007ba0:	f0 1f 00 20 	mcall	80007c20 <sd_mmc_mci_test_unit_ready+0xc8>
80007ba4:	18 98       	mov	r8,r12
80007ba6:	58 08       	cp.w	r8,0
80007ba8:	c0 90       	breq	80007bba <sd_mmc_mci_test_unit_ready+0x62>
80007baa:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007bae:	49 ba       	lddpc	r10,80007c18 <sd_mmc_mci_test_unit_ready+0xc0>
80007bb0:	30 18       	mov	r8,1
80007bb2:	f4 09 0b 08 	st.b	r10[r9],r8
80007bb6:	30 38       	mov	r8,3
80007bb8:	c2 c8       	rjmp	80007c10 <sd_mmc_mci_test_unit_ready+0xb8>
80007bba:	30 28       	mov	r8,2
80007bbc:	c2 a8       	rjmp	80007c10 <sd_mmc_mci_test_unit_ready+0xb8>
80007bbe:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007bc2:	10 9c       	mov	r12,r8
80007bc4:	f0 1f 00 17 	mcall	80007c20 <sd_mmc_mci_test_unit_ready+0xc8>
80007bc8:	18 98       	mov	r8,r12
80007bca:	ec 18 00 01 	eorl	r8,0x1
80007bce:	5c 58       	castu.b	r8
80007bd0:	c0 f0       	breq	80007bee <sd_mmc_mci_test_unit_ready+0x96>
80007bd2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007bd6:	49 1a       	lddpc	r10,80007c18 <sd_mmc_mci_test_unit_ready+0xc0>
80007bd8:	30 28       	mov	r8,2
80007bda:	f4 09 0b 08 	st.b	r10[r9],r8
80007bde:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007be2:	48 fa       	lddpc	r10,80007c1c <sd_mmc_mci_test_unit_ready+0xc4>
80007be4:	30 08       	mov	r8,0
80007be6:	f4 09 0b 08 	st.b	r10[r9],r8
80007bea:	30 38       	mov	r8,3
80007bec:	c1 28       	rjmp	80007c10 <sd_mmc_mci_test_unit_ready+0xb8>
80007bee:	30 08       	mov	r8,0
80007bf0:	c1 08       	rjmp	80007c10 <sd_mmc_mci_test_unit_ready+0xb8>
80007bf2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007bf6:	48 9a       	lddpc	r10,80007c18 <sd_mmc_mci_test_unit_ready+0xc0>
80007bf8:	30 08       	mov	r8,0
80007bfa:	f4 09 0b 08 	st.b	r10[r9],r8
80007bfe:	30 28       	mov	r8,2
80007c00:	c0 88       	rjmp	80007c10 <sd_mmc_mci_test_unit_ready+0xb8>
80007c02:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c06:	48 5a       	lddpc	r10,80007c18 <sd_mmc_mci_test_unit_ready+0xc0>
80007c08:	30 08       	mov	r8,0
80007c0a:	f4 09 0b 08 	st.b	r10[r9],r8
80007c0e:	30 38       	mov	r8,3
80007c10:	10 9c       	mov	r12,r8
80007c12:	2f fd       	sub	sp,-4
80007c14:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c18:	00 00       	add	r0,r0
80007c1a:	01 38       	ld.ub	r8,r0++
80007c1c:	00 00       	add	r0,r0
80007c1e:	06 b4       	st.h	r3++,r4
80007c20:	80 00       	ld.sh	r0,r0[0x0]
80007c22:	6f 64       	ld.w	r4,r7[0x58]

80007c24 <sd_mmc_mci_test_unit_ready_0>:
80007c24:	eb cd 40 80 	pushm	r7,lr
80007c28:	1a 97       	mov	r7,sp
80007c2a:	30 0c       	mov	r12,0
80007c2c:	f0 1f 00 03 	mcall	80007c38 <sd_mmc_mci_test_unit_ready_0+0x14>
80007c30:	18 98       	mov	r8,r12
80007c32:	10 9c       	mov	r12,r8
80007c34:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c38:	80 00       	ld.sh	r0,r0[0x0]
80007c3a:	7b 58       	ld.w	r8,sp[0x54]

80007c3c <sd_mmc_mci_test_unit_ready_1>:
80007c3c:	eb cd 40 80 	pushm	r7,lr
80007c40:	1a 97       	mov	r7,sp
80007c42:	30 1c       	mov	r12,1
80007c44:	f0 1f 00 03 	mcall	80007c50 <sd_mmc_mci_test_unit_ready_1+0x14>
80007c48:	18 98       	mov	r8,r12
80007c4a:	10 9c       	mov	r12,r8
80007c4c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c50:	80 00       	ld.sh	r0,r0[0x0]
80007c52:	7b 58       	ld.w	r8,sp[0x54]

80007c54 <sd_mmc_mci_read_capacity>:
80007c54:	eb cd 40 80 	pushm	r7,lr
80007c58:	1a 97       	mov	r7,sp
80007c5a:	20 2d       	sub	sp,8
80007c5c:	18 98       	mov	r8,r12
80007c5e:	ef 4b ff f8 	st.w	r7[-8],r11
80007c62:	ef 68 ff fc 	st.b	r7[-4],r8
80007c66:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007c6a:	10 9c       	mov	r12,r8
80007c6c:	f0 1f 00 0c 	mcall	80007c9c <sd_mmc_mci_read_capacity+0x48>
80007c70:	18 98       	mov	r8,r12
80007c72:	ec 18 00 01 	eorl	r8,0x1
80007c76:	5c 58       	castu.b	r8
80007c78:	c0 30       	breq	80007c7e <sd_mmc_mci_read_capacity+0x2a>
80007c7a:	30 28       	mov	r8,2
80007c7c:	c0 c8       	rjmp	80007c94 <sd_mmc_mci_read_capacity+0x40>
80007c7e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c82:	48 88       	lddpc	r8,80007ca0 <sd_mmc_mci_read_capacity+0x4c>
80007c84:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007c88:	f0 c9 00 01 	sub	r9,r8,1
80007c8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007c90:	91 09       	st.w	r8[0x0],r9
80007c92:	30 08       	mov	r8,0
80007c94:	10 9c       	mov	r12,r8
80007c96:	2f ed       	sub	sp,-8
80007c98:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c9c:	80 00       	ld.sh	r0,r0[0x0]
80007c9e:	6f 64       	ld.w	r4,r7[0x58]
80007ca0:	00 00       	add	r0,r0
80007ca2:	09 d0       	ld.ub	r0,r4[0x5]

80007ca4 <sd_mmc_mci_read_capacity_0>:
80007ca4:	eb cd 40 80 	pushm	r7,lr
80007ca8:	1a 97       	mov	r7,sp
80007caa:	20 1d       	sub	sp,4
80007cac:	ef 4c ff fc 	st.w	r7[-4],r12
80007cb0:	ee fb ff fc 	ld.w	r11,r7[-4]
80007cb4:	30 0c       	mov	r12,0
80007cb6:	f0 1f 00 04 	mcall	80007cc4 <sd_mmc_mci_read_capacity_0+0x20>
80007cba:	18 98       	mov	r8,r12
80007cbc:	10 9c       	mov	r12,r8
80007cbe:	2f fd       	sub	sp,-4
80007cc0:	e3 cd 80 80 	ldm	sp++,r7,pc
80007cc4:	80 00       	ld.sh	r0,r0[0x0]
80007cc6:	7c 54       	ld.w	r4,lr[0x14]

80007cc8 <sd_mmc_mci_read_capacity_1>:
80007cc8:	eb cd 40 80 	pushm	r7,lr
80007ccc:	1a 97       	mov	r7,sp
80007cce:	20 1d       	sub	sp,4
80007cd0:	ef 4c ff fc 	st.w	r7[-4],r12
80007cd4:	ee fb ff fc 	ld.w	r11,r7[-4]
80007cd8:	30 1c       	mov	r12,1
80007cda:	f0 1f 00 04 	mcall	80007ce8 <sd_mmc_mci_read_capacity_1+0x20>
80007cde:	18 98       	mov	r8,r12
80007ce0:	10 9c       	mov	r12,r8
80007ce2:	2f fd       	sub	sp,-4
80007ce4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ce8:	80 00       	ld.sh	r0,r0[0x0]
80007cea:	7c 54       	ld.w	r4,lr[0x14]

80007cec <sd_mmc_mci_wr_protect>:
80007cec:	eb cd 40 80 	pushm	r7,lr
80007cf0:	1a 97       	mov	r7,sp
80007cf2:	20 1d       	sub	sp,4
80007cf4:	18 98       	mov	r8,r12
80007cf6:	ef 68 ff fc 	st.b	r7[-4],r8
80007cfa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007cfe:	10 9c       	mov	r12,r8
80007d00:	f0 1f 00 04 	mcall	80007d10 <sd_mmc_mci_wr_protect+0x24>
80007d04:	18 98       	mov	r8,r12
80007d06:	10 9c       	mov	r12,r8
80007d08:	2f fd       	sub	sp,-4
80007d0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d0e:	00 00       	add	r0,r0
80007d10:	80 00       	ld.sh	r0,r0[0x0]
80007d12:	5f 08       	sreq	r8

80007d14 <sd_mmc_mci_wr_protect_0>:
80007d14:	eb cd 40 80 	pushm	r7,lr
80007d18:	1a 97       	mov	r7,sp
80007d1a:	30 0c       	mov	r12,0
80007d1c:	f0 1f 00 03 	mcall	80007d28 <sd_mmc_mci_wr_protect_0+0x14>
80007d20:	18 98       	mov	r8,r12
80007d22:	10 9c       	mov	r12,r8
80007d24:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d28:	80 00       	ld.sh	r0,r0[0x0]
80007d2a:	7c ec       	ld.w	r12,lr[0x38]

80007d2c <sd_mmc_mci_wr_protect_1>:
80007d2c:	eb cd 40 80 	pushm	r7,lr
80007d30:	1a 97       	mov	r7,sp
80007d32:	30 1c       	mov	r12,1
80007d34:	f0 1f 00 03 	mcall	80007d40 <sd_mmc_mci_wr_protect_1+0x14>
80007d38:	18 98       	mov	r8,r12
80007d3a:	10 9c       	mov	r12,r8
80007d3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d40:	80 00       	ld.sh	r0,r0[0x0]
80007d42:	7c ec       	ld.w	r12,lr[0x38]

80007d44 <sd_mmc_mci_removal>:
80007d44:	eb cd 40 80 	pushm	r7,lr
80007d48:	1a 97       	mov	r7,sp
80007d4a:	20 1d       	sub	sp,4
80007d4c:	18 98       	mov	r8,r12
80007d4e:	ef 68 ff fc 	st.b	r7[-4],r8
80007d52:	30 08       	mov	r8,0
80007d54:	10 9c       	mov	r12,r8
80007d56:	2f fd       	sub	sp,-4
80007d58:	e3 cd 80 80 	ldm	sp++,r7,pc

80007d5c <sd_mmc_mci_removal_0>:
80007d5c:	eb cd 40 80 	pushm	r7,lr
80007d60:	1a 97       	mov	r7,sp
80007d62:	30 0c       	mov	r12,0
80007d64:	f0 1f 00 03 	mcall	80007d70 <sd_mmc_mci_removal_0+0x14>
80007d68:	18 98       	mov	r8,r12
80007d6a:	10 9c       	mov	r12,r8
80007d6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d70:	80 00       	ld.sh	r0,r0[0x0]
80007d72:	7d 44       	ld.w	r4,lr[0x50]

80007d74 <sd_mmc_mci_removal_1>:
80007d74:	eb cd 40 80 	pushm	r7,lr
80007d78:	1a 97       	mov	r7,sp
80007d7a:	30 1c       	mov	r12,1
80007d7c:	f0 1f 00 03 	mcall	80007d88 <sd_mmc_mci_removal_1+0x14>
80007d80:	18 98       	mov	r8,r12
80007d82:	10 9c       	mov	r12,r8
80007d84:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d88:	80 00       	ld.sh	r0,r0[0x0]
80007d8a:	7d 44       	ld.w	r4,lr[0x50]

80007d8c <sd_mmc_mci_usb_read_10>:
80007d8c:	eb cd 40 80 	pushm	r7,lr
80007d90:	1a 97       	mov	r7,sp
80007d92:	20 3d       	sub	sp,12
80007d94:	18 99       	mov	r9,r12
80007d96:	ef 4b ff f8 	st.w	r7[-8],r11
80007d9a:	14 98       	mov	r8,r10
80007d9c:	ef 69 ff fc 	st.b	r7[-4],r9
80007da0:	ef 58 ff f4 	st.h	r7[-12],r8
80007da4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007da8:	10 9c       	mov	r12,r8
80007daa:	f0 1f 00 1f 	mcall	80007e24 <sd_mmc_mci_usb_read_10+0x98>
80007dae:	18 98       	mov	r8,r12
80007db0:	ec 18 00 01 	eorl	r8,0x1
80007db4:	5c 58       	castu.b	r8
80007db6:	c0 30       	breq	80007dbc <sd_mmc_mci_usb_read_10+0x30>
80007db8:	30 28       	mov	r8,2
80007dba:	c3 08       	rjmp	80007e1a <sd_mmc_mci_usb_read_10+0x8e>
80007dbc:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007dc0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007dc4:	30 0a       	mov	r10,0
80007dc6:	ee fb ff f8 	ld.w	r11,r7[-8]
80007dca:	10 9c       	mov	r12,r8
80007dcc:	f0 1f 00 17 	mcall	80007e28 <sd_mmc_mci_usb_read_10+0x9c>
80007dd0:	18 98       	mov	r8,r12
80007dd2:	ec 18 00 01 	eorl	r8,0x1
80007dd6:	5c 58       	castu.b	r8
80007dd8:	c0 30       	breq	80007dde <sd_mmc_mci_usb_read_10+0x52>
80007dda:	30 18       	mov	r8,1
80007ddc:	c1 f8       	rjmp	80007e1a <sd_mmc_mci_usb_read_10+0x8e>
80007dde:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007de2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007de6:	ee fa ff f8 	ld.w	r10,r7[-8]
80007dea:	12 9b       	mov	r11,r9
80007dec:	10 9c       	mov	r12,r8
80007dee:	f0 1f 00 10 	mcall	80007e2c <sd_mmc_mci_usb_read_10+0xa0>
80007df2:	18 98       	mov	r8,r12
80007df4:	ec 18 00 01 	eorl	r8,0x1
80007df8:	5c 58       	castu.b	r8
80007dfa:	c0 30       	breq	80007e00 <sd_mmc_mci_usb_read_10+0x74>
80007dfc:	30 18       	mov	r8,1
80007dfe:	c0 e8       	rjmp	80007e1a <sd_mmc_mci_usb_read_10+0x8e>
80007e00:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007e04:	10 9c       	mov	r12,r8
80007e06:	f0 1f 00 0b 	mcall	80007e30 <sd_mmc_mci_usb_read_10+0xa4>
80007e0a:	18 98       	mov	r8,r12
80007e0c:	ec 18 00 01 	eorl	r8,0x1
80007e10:	5c 58       	castu.b	r8
80007e12:	c0 30       	breq	80007e18 <sd_mmc_mci_usb_read_10+0x8c>
80007e14:	30 18       	mov	r8,1
80007e16:	c0 28       	rjmp	80007e1a <sd_mmc_mci_usb_read_10+0x8e>
80007e18:	30 08       	mov	r8,0
80007e1a:	10 9c       	mov	r12,r8
80007e1c:	2f dd       	sub	sp,-12
80007e1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e22:	00 00       	add	r0,r0
80007e24:	80 00       	ld.sh	r0,r0[0x0]
80007e26:	6f 64       	ld.w	r4,r7[0x58]
80007e28:	80 00       	ld.sh	r0,r0[0x0]
80007e2a:	70 44       	ld.w	r4,r8[0x10]
80007e2c:	80 00       	ld.sh	r0,r0[0x0]
80007e2e:	76 38       	ld.w	r8,r11[0xc]
80007e30:	80 00       	ld.sh	r0,r0[0x0]
80007e32:	71 d8       	ld.w	r8,r8[0x74]

80007e34 <sd_mmc_mci_usb_read_10_0>:
80007e34:	eb cd 40 80 	pushm	r7,lr
80007e38:	1a 97       	mov	r7,sp
80007e3a:	20 2d       	sub	sp,8
80007e3c:	ef 4c ff fc 	st.w	r7[-4],r12
80007e40:	16 98       	mov	r8,r11
80007e42:	ef 58 ff f8 	st.h	r7[-8],r8
80007e46:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007e4a:	10 9a       	mov	r10,r8
80007e4c:	ee fb ff fc 	ld.w	r11,r7[-4]
80007e50:	30 0c       	mov	r12,0
80007e52:	f0 1f 00 04 	mcall	80007e60 <sd_mmc_mci_usb_read_10_0+0x2c>
80007e56:	18 98       	mov	r8,r12
80007e58:	10 9c       	mov	r12,r8
80007e5a:	2f ed       	sub	sp,-8
80007e5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e60:	80 00       	ld.sh	r0,r0[0x0]
80007e62:	7d 8c       	ld.w	r12,lr[0x60]

80007e64 <sd_mmc_mci_usb_read_10_1>:
80007e64:	eb cd 40 80 	pushm	r7,lr
80007e68:	1a 97       	mov	r7,sp
80007e6a:	20 2d       	sub	sp,8
80007e6c:	ef 4c ff fc 	st.w	r7[-4],r12
80007e70:	16 98       	mov	r8,r11
80007e72:	ef 58 ff f8 	st.h	r7[-8],r8
80007e76:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007e7a:	10 9a       	mov	r10,r8
80007e7c:	ee fb ff fc 	ld.w	r11,r7[-4]
80007e80:	30 1c       	mov	r12,1
80007e82:	f0 1f 00 04 	mcall	80007e90 <sd_mmc_mci_usb_read_10_1+0x2c>
80007e86:	18 98       	mov	r8,r12
80007e88:	10 9c       	mov	r12,r8
80007e8a:	2f ed       	sub	sp,-8
80007e8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e90:	80 00       	ld.sh	r0,r0[0x0]
80007e92:	7d 8c       	ld.w	r12,lr[0x60]

80007e94 <sd_mmc_mci_usb_write_10>:
80007e94:	eb cd 40 80 	pushm	r7,lr
80007e98:	1a 97       	mov	r7,sp
80007e9a:	20 3d       	sub	sp,12
80007e9c:	18 99       	mov	r9,r12
80007e9e:	ef 4b ff f8 	st.w	r7[-8],r11
80007ea2:	14 98       	mov	r8,r10
80007ea4:	ef 69 ff fc 	st.b	r7[-4],r9
80007ea8:	ef 58 ff f4 	st.h	r7[-12],r8
80007eac:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007eb0:	10 9c       	mov	r12,r8
80007eb2:	f0 1f 00 1f 	mcall	80007f2c <sd_mmc_mci_usb_write_10+0x98>
80007eb6:	18 98       	mov	r8,r12
80007eb8:	ec 18 00 01 	eorl	r8,0x1
80007ebc:	5c 58       	castu.b	r8
80007ebe:	c0 30       	breq	80007ec4 <sd_mmc_mci_usb_write_10+0x30>
80007ec0:	30 28       	mov	r8,2
80007ec2:	c3 08       	rjmp	80007f22 <sd_mmc_mci_usb_write_10+0x8e>
80007ec4:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007ec8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007ecc:	30 0a       	mov	r10,0
80007ece:	ee fb ff f8 	ld.w	r11,r7[-8]
80007ed2:	10 9c       	mov	r12,r8
80007ed4:	f0 1f 00 17 	mcall	80007f30 <sd_mmc_mci_usb_write_10+0x9c>
80007ed8:	18 98       	mov	r8,r12
80007eda:	ec 18 00 01 	eorl	r8,0x1
80007ede:	5c 58       	castu.b	r8
80007ee0:	c0 30       	breq	80007ee6 <sd_mmc_mci_usb_write_10+0x52>
80007ee2:	30 18       	mov	r8,1
80007ee4:	c1 f8       	rjmp	80007f22 <sd_mmc_mci_usb_write_10+0x8e>
80007ee6:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007eea:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007eee:	ee fa ff f8 	ld.w	r10,r7[-8]
80007ef2:	12 9b       	mov	r11,r9
80007ef4:	10 9c       	mov	r12,r8
80007ef6:	f0 1f 00 10 	mcall	80007f34 <sd_mmc_mci_usb_write_10+0xa0>
80007efa:	18 98       	mov	r8,r12
80007efc:	ec 18 00 01 	eorl	r8,0x1
80007f00:	5c 58       	castu.b	r8
80007f02:	c0 30       	breq	80007f08 <sd_mmc_mci_usb_write_10+0x74>
80007f04:	30 18       	mov	r8,1
80007f06:	c0 e8       	rjmp	80007f22 <sd_mmc_mci_usb_write_10+0x8e>
80007f08:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007f0c:	10 9c       	mov	r12,r8
80007f0e:	f0 1f 00 0b 	mcall	80007f38 <sd_mmc_mci_usb_write_10+0xa4>
80007f12:	18 98       	mov	r8,r12
80007f14:	ec 18 00 01 	eorl	r8,0x1
80007f18:	5c 58       	castu.b	r8
80007f1a:	c0 30       	breq	80007f20 <sd_mmc_mci_usb_write_10+0x8c>
80007f1c:	30 18       	mov	r8,1
80007f1e:	c0 28       	rjmp	80007f22 <sd_mmc_mci_usb_write_10+0x8e>
80007f20:	30 08       	mov	r8,0
80007f22:	10 9c       	mov	r12,r8
80007f24:	2f dd       	sub	sp,-12
80007f26:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f2a:	00 00       	add	r0,r0
80007f2c:	80 00       	ld.sh	r0,r0[0x0]
80007f2e:	6f 64       	ld.w	r4,r7[0x58]
80007f30:	80 00       	ld.sh	r0,r0[0x0]
80007f32:	72 74       	ld.w	r4,r9[0x1c]
80007f34:	80 00       	ld.sh	r0,r0[0x0]
80007f36:	78 88       	ld.w	r8,r12[0x20]
80007f38:	80 00       	ld.sh	r0,r0[0x0]
80007f3a:	73 e0       	ld.w	r0,r9[0x78]

80007f3c <sd_mmc_mci_usb_write_10_0>:
80007f3c:	eb cd 40 80 	pushm	r7,lr
80007f40:	1a 97       	mov	r7,sp
80007f42:	20 2d       	sub	sp,8
80007f44:	ef 4c ff fc 	st.w	r7[-4],r12
80007f48:	16 98       	mov	r8,r11
80007f4a:	ef 58 ff f8 	st.h	r7[-8],r8
80007f4e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007f52:	10 9a       	mov	r10,r8
80007f54:	ee fb ff fc 	ld.w	r11,r7[-4]
80007f58:	30 0c       	mov	r12,0
80007f5a:	f0 1f 00 04 	mcall	80007f68 <sd_mmc_mci_usb_write_10_0+0x2c>
80007f5e:	18 98       	mov	r8,r12
80007f60:	10 9c       	mov	r12,r8
80007f62:	2f ed       	sub	sp,-8
80007f64:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f68:	80 00       	ld.sh	r0,r0[0x0]
80007f6a:	7e 94       	ld.w	r4,pc[0x24]

80007f6c <sd_mmc_mci_usb_write_10_1>:
80007f6c:	eb cd 40 80 	pushm	r7,lr
80007f70:	1a 97       	mov	r7,sp
80007f72:	20 2d       	sub	sp,8
80007f74:	ef 4c ff fc 	st.w	r7[-4],r12
80007f78:	16 98       	mov	r8,r11
80007f7a:	ef 58 ff f8 	st.h	r7[-8],r8
80007f7e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007f82:	10 9a       	mov	r10,r8
80007f84:	ee fb ff fc 	ld.w	r11,r7[-4]
80007f88:	30 1c       	mov	r12,1
80007f8a:	f0 1f 00 04 	mcall	80007f98 <sd_mmc_mci_usb_write_10_1+0x2c>
80007f8e:	18 98       	mov	r8,r12
80007f90:	10 9c       	mov	r12,r8
80007f92:	2f ed       	sub	sp,-8
80007f94:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f98:	80 00       	ld.sh	r0,r0[0x0]
80007f9a:	7e 94       	ld.w	r4,pc[0x24]

80007f9c <aes_configure>:
80007f9c:	eb cd 40 80 	pushm	r7,lr
80007fa0:	1a 97       	mov	r7,sp
80007fa2:	20 2d       	sub	sp,8
80007fa4:	ef 4c ff fc 	st.w	r7[-4],r12
80007fa8:	ef 4b ff f8 	st.w	r7[-8],r11
80007fac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fb0:	11 88       	ld.ub	r8,r8[0x0]
80007fb2:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80007fb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fba:	11 98       	ld.ub	r8,r8[0x1]
80007fbc:	a5 68       	lsl	r8,0x4
80007fbe:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80007fc2:	10 49       	or	r9,r8
80007fc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fc8:	11 a8       	ld.ub	r8,r8[0x2]
80007fca:	a9 68       	lsl	r8,0x8
80007fcc:	e2 18 03 00 	andl	r8,0x300,COH
80007fd0:	10 49       	or	r9,r8
80007fd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fd6:	11 b8       	ld.ub	r8,r8[0x3]
80007fd8:	ab 68       	lsl	r8,0xa
80007fda:	e2 18 0c 00 	andl	r8,0xc00,COH
80007fde:	10 49       	or	r9,r8
80007fe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fe4:	11 c8       	ld.ub	r8,r8[0x4]
80007fe6:	ad 68       	lsl	r8,0xc
80007fe8:	e2 18 70 00 	andl	r8,0x7000,COH
80007fec:	10 49       	or	r9,r8
80007fee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ff2:	11 d8       	ld.ub	r8,r8[0x5]
80007ff4:	af 78       	lsl	r8,0xf
80007ff6:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80007ffa:	10 49       	or	r9,r8
80007ffc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008000:	11 e8       	ld.ub	r8,r8[0x6]
80008002:	b1 68       	lsl	r8,0x10
80008004:	e6 18 00 07 	andh	r8,0x7,COH
80008008:	10 49       	or	r9,r8
8000800a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000800e:	11 f8       	ld.ub	r8,r8[0x7]
80008010:	b9 68       	lsl	r8,0x18
80008012:	e6 18 1f 00 	andh	r8,0x1f00,COH
80008016:	f3 e8 10 08 	or	r8,r9,r8
8000801a:	ea 18 00 e0 	orh	r8,0xe0
8000801e:	10 99       	mov	r9,r8
80008020:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008024:	91 19       	st.w	r8[0x4],r9
80008026:	2f ed       	sub	sp,-8
80008028:	e3 cd 80 80 	ldm	sp++,r7,pc

8000802c <aes_set_key>:
8000802c:	eb cd 40 80 	pushm	r7,lr
80008030:	1a 97       	mov	r7,sp
80008032:	20 4d       	sub	sp,16
80008034:	ef 4c ff f4 	st.w	r7[-12],r12
80008038:	ef 4b ff f0 	st.w	r7[-16],r11
8000803c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008040:	2e 08       	sub	r8,-32
80008042:	ef 48 ff f8 	st.w	r7[-8],r8
80008046:	30 08       	mov	r8,0
80008048:	ef 68 ff ff 	st.b	r7[-1],r8
8000804c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008050:	70 18       	ld.w	r8,r8[0x4]
80008052:	e2 18 0c 00 	andl	r8,0xc00,COH
80008056:	ab 88       	lsr	r8,0xa
80008058:	58 18       	cp.w	r8,1
8000805a:	c0 90       	breq	8000806c <aes_set_key+0x40>
8000805c:	c0 43       	brcs	80008064 <aes_set_key+0x38>
8000805e:	58 28       	cp.w	r8,2
80008060:	c0 a0       	breq	80008074 <aes_set_key+0x48>
80008062:	c2 38       	rjmp	800080a8 <aes_set_key+0x7c>
80008064:	30 48       	mov	r8,4
80008066:	ef 68 ff ff 	st.b	r7[-1],r8
8000806a:	c0 98       	rjmp	8000807c <aes_set_key+0x50>
8000806c:	30 68       	mov	r8,6
8000806e:	ef 68 ff ff 	st.b	r7[-1],r8
80008072:	c0 58       	rjmp	8000807c <aes_set_key+0x50>
80008074:	30 88       	mov	r8,8
80008076:	ef 68 ff ff 	st.b	r7[-1],r8
8000807a:	c1 78       	rjmp	800080a8 <aes_set_key+0x7c>
8000807c:	c1 68       	rjmp	800080a8 <aes_set_key+0x7c>
8000807e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008082:	70 09       	ld.w	r9,r8[0x0]
80008084:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008088:	91 09       	st.w	r8[0x0],r9
8000808a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000808e:	2f c8       	sub	r8,-4
80008090:	ef 48 ff f8 	st.w	r7[-8],r8
80008094:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008098:	2f c8       	sub	r8,-4
8000809a:	ef 48 ff f0 	st.w	r7[-16],r8
8000809e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800080a2:	20 18       	sub	r8,1
800080a4:	ef 68 ff ff 	st.b	r7[-1],r8
800080a8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800080ac:	30 08       	mov	r8,0
800080ae:	f0 09 18 00 	cp.b	r9,r8
800080b2:	ce 61       	brne	8000807e <aes_set_key+0x52>
800080b4:	2f cd       	sub	sp,-16
800080b6:	e3 cd 80 80 	ldm	sp++,r7,pc

800080ba <aes_set_initvector>:
800080ba:	eb cd 40 80 	pushm	r7,lr
800080be:	1a 97       	mov	r7,sp
800080c0:	20 4d       	sub	sp,16
800080c2:	ef 4c ff f4 	st.w	r7[-12],r12
800080c6:	ef 4b ff f0 	st.w	r7[-16],r11
800080ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800080ce:	2a 08       	sub	r8,-96
800080d0:	ef 48 ff f8 	st.w	r7[-8],r8
800080d4:	30 08       	mov	r8,0
800080d6:	ef 48 ff fc 	st.w	r7[-4],r8
800080da:	c1 68       	rjmp	80008106 <aes_set_initvector+0x4c>
800080dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800080e0:	70 09       	ld.w	r9,r8[0x0]
800080e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080e6:	91 09       	st.w	r8[0x0],r9
800080e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080ec:	2f c8       	sub	r8,-4
800080ee:	ef 48 ff f8 	st.w	r7[-8],r8
800080f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800080f6:	2f c8       	sub	r8,-4
800080f8:	ef 48 ff f0 	st.w	r7[-16],r8
800080fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008100:	2f f8       	sub	r8,-1
80008102:	ef 48 ff fc 	st.w	r7[-4],r8
80008106:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000810a:	58 38       	cp.w	r8,3
8000810c:	fe 9a ff e8 	brle	800080dc <aes_set_initvector+0x22>
80008110:	2f cd       	sub	sp,-16
80008112:	e3 cd 80 80 	ldm	sp++,r7,pc

80008116 <aes_write_inputdata>:
80008116:	eb cd 40 80 	pushm	r7,lr
8000811a:	1a 97       	mov	r7,sp
8000811c:	20 4d       	sub	sp,16
8000811e:	ef 4c ff f4 	st.w	r7[-12],r12
80008122:	ef 4b ff f0 	st.w	r7[-16],r11
80008126:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000812a:	2c 08       	sub	r8,-64
8000812c:	ef 48 ff f8 	st.w	r7[-8],r8
80008130:	30 48       	mov	r8,4
80008132:	ef 68 ff ff 	st.b	r7[-1],r8
80008136:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000813a:	70 18       	ld.w	r8,r8[0x4]
8000813c:	e2 18 70 00 	andl	r8,0x7000,COH
80008140:	ad 88       	lsr	r8,0xc
80008142:	58 38       	cp.w	r8,3
80008144:	c2 c1       	brne	8000819c <aes_write_inputdata+0x86>
80008146:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000814a:	70 18       	ld.w	r8,r8[0x4]
8000814c:	e6 18 00 07 	andh	r8,0x7,COH
80008150:	b1 88       	lsr	r8,0x10
80008152:	58 18       	cp.w	r8,1
80008154:	c0 60       	breq	80008160 <aes_write_inputdata+0x4a>
80008156:	c2 33       	brcs	8000819c <aes_write_inputdata+0x86>
80008158:	58 48       	cp.w	r8,4
8000815a:	e0 8b 00 21 	brhi	8000819c <aes_write_inputdata+0x86>
8000815e:	c0 68       	rjmp	8000816a <aes_write_inputdata+0x54>
80008160:	30 28       	mov	r8,2
80008162:	ef 68 ff ff 	st.b	r7[-1],r8
80008166:	d7 03       	nop
80008168:	c1 a8       	rjmp	8000819c <aes_write_inputdata+0x86>
8000816a:	30 18       	mov	r8,1
8000816c:	ef 68 ff ff 	st.b	r7[-1],r8
80008170:	c1 68       	rjmp	8000819c <aes_write_inputdata+0x86>
80008172:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008176:	70 09       	ld.w	r9,r8[0x0]
80008178:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000817c:	91 09       	st.w	r8[0x0],r9
8000817e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008182:	2f c8       	sub	r8,-4
80008184:	ef 48 ff f8 	st.w	r7[-8],r8
80008188:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000818c:	2f c8       	sub	r8,-4
8000818e:	ef 48 ff f0 	st.w	r7[-16],r8
80008192:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008196:	20 18       	sub	r8,1
80008198:	ef 68 ff ff 	st.b	r7[-1],r8
8000819c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800081a0:	30 08       	mov	r8,0
800081a2:	f0 09 18 00 	cp.b	r9,r8
800081a6:	ce 61       	brne	80008172 <aes_write_inputdata+0x5c>
800081a8:	2f cd       	sub	sp,-16
800081aa:	e3 cd 80 80 	ldm	sp++,r7,pc

800081ae <aes_read_outputdata>:
800081ae:	eb cd 40 80 	pushm	r7,lr
800081b2:	1a 97       	mov	r7,sp
800081b4:	20 4d       	sub	sp,16
800081b6:	ef 4c ff f4 	st.w	r7[-12],r12
800081ba:	ef 4b ff f0 	st.w	r7[-16],r11
800081be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800081c2:	2b 08       	sub	r8,-80
800081c4:	ef 48 ff f8 	st.w	r7[-8],r8
800081c8:	30 48       	mov	r8,4
800081ca:	ef 68 ff ff 	st.b	r7[-1],r8
800081ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
800081d2:	70 18       	ld.w	r8,r8[0x4]
800081d4:	e2 18 70 00 	andl	r8,0x7000,COH
800081d8:	ad 88       	lsr	r8,0xc
800081da:	58 38       	cp.w	r8,3
800081dc:	c2 c1       	brne	80008234 <aes_read_outputdata+0x86>
800081de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800081e2:	70 18       	ld.w	r8,r8[0x4]
800081e4:	e6 18 00 07 	andh	r8,0x7,COH
800081e8:	b1 88       	lsr	r8,0x10
800081ea:	58 18       	cp.w	r8,1
800081ec:	c0 60       	breq	800081f8 <aes_read_outputdata+0x4a>
800081ee:	c2 33       	brcs	80008234 <aes_read_outputdata+0x86>
800081f0:	58 48       	cp.w	r8,4
800081f2:	e0 8b 00 21 	brhi	80008234 <aes_read_outputdata+0x86>
800081f6:	c0 68       	rjmp	80008202 <aes_read_outputdata+0x54>
800081f8:	30 28       	mov	r8,2
800081fa:	ef 68 ff ff 	st.b	r7[-1],r8
800081fe:	d7 03       	nop
80008200:	c1 a8       	rjmp	80008234 <aes_read_outputdata+0x86>
80008202:	30 18       	mov	r8,1
80008204:	ef 68 ff ff 	st.b	r7[-1],r8
80008208:	c1 68       	rjmp	80008234 <aes_read_outputdata+0x86>
8000820a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000820e:	70 09       	ld.w	r9,r8[0x0]
80008210:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008214:	91 09       	st.w	r8[0x0],r9
80008216:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000821a:	2f c8       	sub	r8,-4
8000821c:	ef 48 ff f0 	st.w	r7[-16],r8
80008220:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008224:	2f c8       	sub	r8,-4
80008226:	ef 48 ff f8 	st.w	r7[-8],r8
8000822a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000822e:	20 18       	sub	r8,1
80008230:	ef 68 ff ff 	st.b	r7[-1],r8
80008234:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008238:	30 08       	mov	r8,0
8000823a:	f0 09 18 00 	cp.b	r9,r8
8000823e:	ce 61       	brne	8000820a <aes_read_outputdata+0x5c>
80008240:	2f cd       	sub	sp,-16
80008242:	e3 cd 80 80 	ldm	sp++,r7,pc
80008246:	d7 03       	nop

80008248 <smc_init>:
80008248:	eb cd 40 80 	pushm	r7,lr
8000824c:	1a 97       	mov	r7,sp
8000824e:	20 cd       	sub	sp,48
80008250:	ef 4c ff d0 	st.w	r7[-48],r12
80008254:	ee f8 ff d0 	ld.w	r8,r7[-48]
80008258:	ee 7a 42 3f 	mov	r10,999999
8000825c:	f0 0a 00 09 	add	r9,r8,r10
80008260:	e0 68 de 83 	mov	r8,56963
80008264:	ea 18 43 1b 	orh	r8,0x431b
80008268:	f2 08 06 48 	mulu.d	r8,r9,r8
8000826c:	f2 08 16 12 	lsr	r8,r9,0x12
80008270:	ef 48 ff d4 	st.w	r7[-44],r8
80008274:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008278:	12 98       	mov	r8,r9
8000827a:	a3 68       	lsl	r8,0x2
8000827c:	12 08       	add	r8,r9
8000827e:	a3 68       	lsl	r8,0x2
80008280:	f0 c9 fc 19 	sub	r9,r8,-999
80008284:	e0 68 4d d3 	mov	r8,19923
80008288:	ea 18 10 62 	orh	r8,0x1062
8000828c:	f2 08 06 48 	mulu.d	r8,r9,r8
80008290:	f2 08 16 06 	lsr	r8,r9,0x6
80008294:	ef 48 ff d8 	st.w	r7[-40],r8
80008298:	30 08       	mov	r8,0
8000829a:	ef 48 ff dc 	st.w	r7[-36],r8
8000829e:	ee f9 ff d4 	ld.w	r9,r7[-44]
800082a2:	12 98       	mov	r8,r9
800082a4:	a5 68       	lsl	r8,0x4
800082a6:	12 18       	sub	r8,r9
800082a8:	a1 78       	lsl	r8,0x1
800082aa:	f0 c9 fc 19 	sub	r9,r8,-999
800082ae:	e0 68 4d d3 	mov	r8,19923
800082b2:	ea 18 10 62 	orh	r8,0x1062
800082b6:	f2 08 06 48 	mulu.d	r8,r9,r8
800082ba:	f2 08 16 06 	lsr	r8,r9,0x6
800082be:	ef 48 ff e0 	st.w	r7[-32],r8
800082c2:	30 08       	mov	r8,0
800082c4:	ef 48 ff e4 	st.w	r7[-28],r8
800082c8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800082cc:	12 98       	mov	r8,r9
800082ce:	a5 68       	lsl	r8,0x4
800082d0:	12 18       	sub	r8,r9
800082d2:	a3 68       	lsl	r8,0x2
800082d4:	f0 c9 fc 19 	sub	r9,r8,-999
800082d8:	e0 68 4d d3 	mov	r8,19923
800082dc:	ea 18 10 62 	orh	r8,0x1062
800082e0:	f2 08 06 48 	mulu.d	r8,r9,r8
800082e4:	f2 08 16 06 	lsr	r8,r9,0x6
800082e8:	ef 48 ff e8 	st.w	r7[-24],r8
800082ec:	ee f8 ff d4 	ld.w	r8,r7[-44]
800082f0:	f0 08 10 5a 	mul	r8,r8,90
800082f4:	f0 c9 fc 19 	sub	r9,r8,-999
800082f8:	e0 68 4d d3 	mov	r8,19923
800082fc:	ea 18 10 62 	orh	r8,0x1062
80008300:	f2 08 06 48 	mulu.d	r8,r9,r8
80008304:	f2 08 16 06 	lsr	r8,r9,0x6
80008308:	ef 48 ff ec 	st.w	r7[-20],r8
8000830c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008310:	e0 68 00 d2 	mov	r8,210
80008314:	f2 08 02 48 	mul	r8,r9,r8
80008318:	f0 c9 fc 19 	sub	r9,r8,-999
8000831c:	e0 68 4d d3 	mov	r8,19923
80008320:	ea 18 10 62 	orh	r8,0x1062
80008324:	f2 08 06 48 	mulu.d	r8,r9,r8
80008328:	f2 08 16 06 	lsr	r8,r9,0x6
8000832c:	ef 48 ff f0 	st.w	r7[-16],r8
80008330:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008334:	12 98       	mov	r8,r9
80008336:	a5 68       	lsl	r8,0x4
80008338:	12 18       	sub	r8,r9
8000833a:	a5 68       	lsl	r8,0x4
8000833c:	f0 c9 fc 19 	sub	r9,r8,-999
80008340:	e0 68 4d d3 	mov	r8,19923
80008344:	ea 18 10 62 	orh	r8,0x1062
80008348:	f2 08 06 48 	mulu.d	r8,r9,r8
8000834c:	f2 08 16 06 	lsr	r8,r9,0x6
80008350:	ef 48 ff f4 	st.w	r7[-12],r8
80008354:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008358:	f0 08 10 64 	mul	r8,r8,100
8000835c:	f0 c9 fc 19 	sub	r9,r8,-999
80008360:	e0 68 4d d3 	mov	r8,19923
80008364:	ea 18 10 62 	orh	r8,0x1062
80008368:	f2 08 06 48 	mulu.d	r8,r9,r8
8000836c:	f2 08 16 06 	lsr	r8,r9,0x6
80008370:	ef 48 ff f8 	st.w	r7[-8],r8
80008374:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008378:	e0 68 01 0e 	mov	r8,270
8000837c:	f2 08 02 48 	mul	r8,r9,r8
80008380:	f0 c9 fc 19 	sub	r9,r8,-999
80008384:	e0 68 4d d3 	mov	r8,19923
80008388:	ea 18 10 62 	orh	r8,0x1062
8000838c:	f2 08 06 48 	mulu.d	r8,r9,r8
80008390:	f2 08 16 06 	lsr	r8,r9,0x6
80008394:	ef 48 ff fc 	st.w	r7[-4],r8
80008398:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000839c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800083a0:	10 09       	add	r9,r8
800083a2:	ee fa ff e0 	ld.w	r10,r7[-32]
800083a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800083aa:	f4 08 00 08 	add	r8,r10,r8
800083ae:	10 39       	cp.w	r9,r8
800083b0:	c0 c2       	brcc	800083c8 <smc_init+0x180>
800083b2:	ee f9 ff e0 	ld.w	r9,r7[-32]
800083b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800083ba:	10 09       	add	r9,r8
800083bc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800083c0:	f2 08 01 08 	sub	r8,r9,r8
800083c4:	ef 48 ff f4 	st.w	r7[-12],r8
800083c8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800083cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800083d0:	10 09       	add	r9,r8
800083d2:	ee fa ff d8 	ld.w	r10,r7[-40]
800083d6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800083da:	f4 08 00 08 	add	r8,r10,r8
800083de:	10 39       	cp.w	r9,r8
800083e0:	c0 c2       	brcc	800083f8 <smc_init+0x1b0>
800083e2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800083e6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800083ea:	10 09       	add	r9,r8
800083ec:	ee f8 ff dc 	ld.w	r8,r7[-36]
800083f0:	f2 08 01 08 	sub	r8,r9,r8
800083f4:	ef 48 ff ec 	st.w	r7[-20],r8
800083f8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800083fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008400:	10 09       	add	r9,r8
80008402:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008406:	10 39       	cp.w	r9,r8
80008408:	e0 88 00 0a 	brls	8000841c <smc_init+0x1d4>
8000840c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008410:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008414:	f2 08 00 08 	add	r8,r9,r8
80008418:	ef 48 ff f8 	st.w	r7[-8],r8
8000841c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80008420:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008424:	10 09       	add	r9,r8
80008426:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000842a:	10 39       	cp.w	r9,r8
8000842c:	e0 88 00 0a 	brls	80008440 <smc_init+0x1f8>
80008430:	ee f9 ff d8 	ld.w	r9,r7[-40]
80008434:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008438:	f2 08 00 08 	add	r8,r9,r8
8000843c:	ef 48 ff f8 	st.w	r7[-8],r8
80008440:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008444:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008448:	10 09       	add	r9,r8
8000844a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000844e:	10 39       	cp.w	r9,r8
80008450:	e0 88 00 0a 	brls	80008464 <smc_init+0x21c>
80008454:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008458:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000845c:	f2 08 00 08 	add	r8,r9,r8
80008460:	ef 48 ff fc 	st.w	r7[-4],r8
80008464:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008468:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000846c:	10 09       	add	r9,r8
8000846e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008472:	10 39       	cp.w	r9,r8
80008474:	e0 88 00 0a 	brls	80008488 <smc_init+0x240>
80008478:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000847c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008480:	f2 08 00 08 	add	r8,r9,r8
80008484:	ef 48 ff fc 	st.w	r7[-4],r8
80008488:	fe 68 1c 00 	mov	r8,-123904
8000848c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008490:	f2 0a 15 08 	lsl	r10,r9,0x8
80008494:	ee f9 ff d8 	ld.w	r9,r7[-40]
80008498:	12 4a       	or	r10,r9
8000849a:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000849e:	b1 69       	lsl	r9,0x10
800084a0:	12 4a       	or	r10,r9
800084a2:	ee f9 ff e4 	ld.w	r9,r7[-28]
800084a6:	b9 69       	lsl	r9,0x18
800084a8:	f5 e9 10 09 	or	r9,r10,r9
800084ac:	91 09       	st.w	r8[0x0],r9
800084ae:	fe 68 1c 00 	mov	r8,-123904
800084b2:	ee f9 ff ec 	ld.w	r9,r7[-20]
800084b6:	f2 0a 15 08 	lsl	r10,r9,0x8
800084ba:	ee f9 ff e8 	ld.w	r9,r7[-24]
800084be:	12 4a       	or	r10,r9
800084c0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800084c4:	b1 69       	lsl	r9,0x10
800084c6:	12 4a       	or	r10,r9
800084c8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800084cc:	b9 69       	lsl	r9,0x18
800084ce:	f5 e9 10 09 	or	r9,r10,r9
800084d2:	91 19       	st.w	r8[0x4],r9
800084d4:	fe 68 1c 00 	mov	r8,-123904
800084d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800084dc:	f2 0a 15 10 	lsl	r10,r9,0x10
800084e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800084e4:	f5 e9 10 09 	or	r9,r10,r9
800084e8:	91 29       	st.w	r8[0x8],r9
800084ea:	fe 68 1c 00 	mov	r8,-123904
800084ee:	e0 69 10 03 	mov	r9,4099
800084f2:	91 39       	st.w	r8[0xc],r9
800084f4:	48 49       	lddpc	r9,80008504 <smc_init+0x2bc>
800084f6:	30 18       	mov	r8,1
800084f8:	b2 88       	st.b	r9[0x0],r8
800084fa:	f0 1f 00 04 	mcall	80008508 <smc_init+0x2c0>
800084fe:	2f 4d       	sub	sp,-48
80008500:	e3 cd 80 80 	ldm	sp++,r7,pc
80008504:	00 00       	add	r0,r0
80008506:	07 34       	ld.ub	r4,r3++
80008508:	80 00       	ld.sh	r0,r0[0x0]
8000850a:	85 0c       	st.w	r2[0x0],r12

8000850c <smc_enable_muxed_pins>:
8000850c:	eb cd 40 80 	pushm	r7,lr
80008510:	1a 97       	mov	r7,sp
80008512:	31 4b       	mov	r11,20
80008514:	48 3c       	lddpc	r12,80008520 <smc_enable_muxed_pins+0x14>
80008516:	f0 1f 00 04 	mcall	80008524 <smc_enable_muxed_pins+0x18>
8000851a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000851e:	00 00       	add	r0,r0
80008520:	80 00       	ld.sh	r0,r0[0x0]
80008522:	f2 d4 80 00 	satsub.w	r4,r9,-32768
80008526:	8c a4       	ld.uh	r4,r6[0x4]

80008528 <flashc_get_flash_size>:
80008528:	eb cd 40 80 	pushm	r7,lr
8000852c:	1a 97       	mov	r7,sp
8000852e:	20 4d       	sub	sp,16
80008530:	48 d9       	lddpc	r9,80008564 <flashc_get_flash_size+0x3c>
80008532:	ee c8 00 10 	sub	r8,r7,16
80008536:	31 0a       	mov	r10,16
80008538:	12 9b       	mov	r11,r9
8000853a:	10 9c       	mov	r12,r8
8000853c:	f0 1f 00 0b 	mcall	80008568 <flashc_get_flash_size+0x40>
80008540:	fe 68 14 00 	mov	r8,-125952
80008544:	70 28       	ld.w	r8,r8[0x8]
80008546:	e2 18 e0 00 	andl	r8,0xe000,COH
8000854a:	ad 98       	lsr	r8,0xd
8000854c:	a1 78       	lsl	r8,0x1
8000854e:	ee 08 00 08 	add	r8,r7,r8
80008552:	f1 08 ff f0 	ld.sh	r8,r8[-16]
80008556:	5c 78       	castu.h	r8
80008558:	ab 68       	lsl	r8,0xa
8000855a:	10 9c       	mov	r12,r8
8000855c:	2f cd       	sub	sp,-16
8000855e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008562:	00 00       	add	r0,r0
80008564:	80 00       	ld.sh	r0,r0[0x0]
80008566:	f2 fc 80 00 	ld.w	r12,r9[-32768]
8000856a:	ea a2       	*unknown*

8000856c <flashc_set_wait_state>:
8000856c:	eb cd 40 80 	pushm	r7,lr
80008570:	1a 97       	mov	r7,sp
80008572:	20 2d       	sub	sp,8
80008574:	ef 4c ff f8 	st.w	r7[-8],r12
80008578:	fe 68 14 00 	mov	r8,-125952
8000857c:	70 08       	ld.w	r8,r8[0x0]
8000857e:	30 09       	mov	r9,0
80008580:	ef 49 ff fc 	st.w	r7[-4],r9
80008584:	ef 48 ff fc 	st.w	r7[-4],r8
80008588:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000858c:	5c 58       	castu.b	r8
8000858e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008592:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80008596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000859a:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
8000859e:	ef 48 ff fc 	st.w	r7[-4],r8
800085a2:	fe 68 14 00 	mov	r8,-125952
800085a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800085aa:	91 09       	st.w	r8[0x0],r9
800085ac:	2f ed       	sub	sp,-8
800085ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800085b2:	d7 03       	nop

800085b4 <flashc_set_bus_freq>:
800085b4:	eb cd 40 80 	pushm	r7,lr
800085b8:	1a 97       	mov	r7,sp
800085ba:	20 1d       	sub	sp,4
800085bc:	ef 4c ff fc 	st.w	r7[-4],r12
800085c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085c4:	e0 69 50 ff 	mov	r9,20735
800085c8:	ea 19 02 25 	orh	r9,0x225
800085cc:	12 38       	cp.w	r8,r9
800085ce:	e0 88 00 06 	brls	800085da <flashc_set_bus_freq+0x26>
800085d2:	30 1c       	mov	r12,1
800085d4:	f0 1f 00 05 	mcall	800085e8 <flashc_set_bus_freq+0x34>
800085d8:	c0 48       	rjmp	800085e0 <flashc_set_bus_freq+0x2c>
800085da:	30 0c       	mov	r12,0
800085dc:	f0 1f 00 03 	mcall	800085e8 <flashc_set_bus_freq+0x34>
800085e0:	2f fd       	sub	sp,-4
800085e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800085e6:	00 00       	add	r0,r0
800085e8:	80 00       	ld.sh	r0,r0[0x0]
800085ea:	85 6c       	st.w	r2[0x18],r12

800085ec <flashc_is_ready>:
800085ec:	eb cd 40 80 	pushm	r7,lr
800085f0:	1a 97       	mov	r7,sp
800085f2:	fe 68 14 00 	mov	r8,-125952
800085f6:	70 28       	ld.w	r8,r8[0x8]
800085f8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800085fc:	5c 58       	castu.b	r8
800085fe:	10 9c       	mov	r12,r8
80008600:	e3 cd 80 80 	ldm	sp++,r7,pc

80008604 <flashc_default_wait_until_ready>:
80008604:	eb cd 40 80 	pushm	r7,lr
80008608:	1a 97       	mov	r7,sp
8000860a:	f0 1f 00 05 	mcall	8000861c <flashc_default_wait_until_ready+0x18>
8000860e:	18 98       	mov	r8,r12
80008610:	ec 18 00 01 	eorl	r8,0x1
80008614:	5c 58       	castu.b	r8
80008616:	cf a1       	brne	8000860a <flashc_default_wait_until_ready+0x6>
80008618:	e3 cd 80 80 	ldm	sp++,r7,pc
8000861c:	80 00       	ld.sh	r0,r0[0x0]
8000861e:	85 ec       	st.w	r2[0x38],r12

80008620 <flashc_get_error_status>:
80008620:	eb cd 40 80 	pushm	r7,lr
80008624:	1a 97       	mov	r7,sp
80008626:	fe 68 14 00 	mov	r8,-125952
8000862a:	70 28       	ld.w	r8,r8[0x8]
8000862c:	e2 18 00 0c 	andl	r8,0xc,COH
80008630:	10 9c       	mov	r12,r8
80008632:	e3 cd 80 80 	ldm	sp++,r7,pc
80008636:	d7 03       	nop

80008638 <flashc_issue_command>:
80008638:	eb cd 40 80 	pushm	r7,lr
8000863c:	1a 97       	mov	r7,sp
8000863e:	20 3d       	sub	sp,12
80008640:	ef 4c ff f8 	st.w	r7[-8],r12
80008644:	ef 4b ff f4 	st.w	r7[-12],r11
80008648:	49 b8       	lddpc	r8,800086b4 <flashc_issue_command+0x7c>
8000864a:	70 08       	ld.w	r8,r8[0x0]
8000864c:	5d 18       	icall	r8
8000864e:	fe 68 14 00 	mov	r8,-125952
80008652:	70 18       	ld.w	r8,r8[0x4]
80008654:	ef 48 ff fc 	st.w	r7[-4],r8
80008658:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000865c:	5c 58       	castu.b	r8
8000865e:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80008662:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80008666:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000866a:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
8000866e:	ef 48 ff fc 	st.w	r7[-4],r8
80008672:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008676:	58 08       	cp.w	r8,0
80008678:	c0 b5       	brlt	8000868e <flashc_issue_command+0x56>
8000867a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000867e:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80008682:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008686:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
8000868a:	ef 48 ff fc 	st.w	r7[-4],r8
8000868e:	3a 58       	mov	r8,-91
80008690:	ef 68 ff fc 	st.b	r7[-4],r8
80008694:	fe 68 14 00 	mov	r8,-125952
80008698:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000869c:	91 19       	st.w	r8[0x4],r9
8000869e:	f0 1f 00 07 	mcall	800086b8 <flashc_issue_command+0x80>
800086a2:	18 99       	mov	r9,r12
800086a4:	48 68       	lddpc	r8,800086bc <flashc_issue_command+0x84>
800086a6:	91 09       	st.w	r8[0x0],r9
800086a8:	48 38       	lddpc	r8,800086b4 <flashc_issue_command+0x7c>
800086aa:	70 08       	ld.w	r8,r8[0x0]
800086ac:	5d 18       	icall	r8
800086ae:	2f dd       	sub	sp,-12
800086b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800086b4:	00 00       	add	r0,r0
800086b6:	01 3c       	ld.ub	r12,r0++
800086b8:	80 00       	ld.sh	r0,r0[0x0]
800086ba:	86 20       	ld.sh	r0,r3[0x4]
800086bc:	00 00       	add	r0,r0
800086be:	07 3c       	ld.ub	r12,r3++

800086c0 <flashc_clear_page_buffer>:
800086c0:	eb cd 40 80 	pushm	r7,lr
800086c4:	1a 97       	mov	r7,sp
800086c6:	3f fb       	mov	r11,-1
800086c8:	30 3c       	mov	r12,3
800086ca:	f0 1f 00 03 	mcall	800086d4 <flashc_clear_page_buffer+0x14>
800086ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800086d2:	00 00       	add	r0,r0
800086d4:	80 00       	ld.sh	r0,r0[0x0]
800086d6:	86 38       	ld.sh	r8,r3[0x6]

800086d8 <flashc_is_page_erased>:
800086d8:	eb cd 40 80 	pushm	r7,lr
800086dc:	1a 97       	mov	r7,sp
800086de:	fe 68 14 00 	mov	r8,-125952
800086e2:	70 28       	ld.w	r8,r8[0x8]
800086e4:	e2 18 00 20 	andl	r8,0x20,COH
800086e8:	5f 18       	srne	r8
800086ea:	5c 58       	castu.b	r8
800086ec:	10 9c       	mov	r12,r8
800086ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800086f2:	d7 03       	nop

800086f4 <flashc_quick_page_read>:
800086f4:	eb cd 40 80 	pushm	r7,lr
800086f8:	1a 97       	mov	r7,sp
800086fa:	20 1d       	sub	sp,4
800086fc:	ef 4c ff fc 	st.w	r7[-4],r12
80008700:	ee fb ff fc 	ld.w	r11,r7[-4]
80008704:	30 cc       	mov	r12,12
80008706:	f0 1f 00 05 	mcall	80008718 <flashc_quick_page_read+0x24>
8000870a:	f0 1f 00 05 	mcall	8000871c <flashc_quick_page_read+0x28>
8000870e:	18 98       	mov	r8,r12
80008710:	10 9c       	mov	r12,r8
80008712:	2f fd       	sub	sp,-4
80008714:	e3 cd 80 80 	ldm	sp++,r7,pc
80008718:	80 00       	ld.sh	r0,r0[0x0]
8000871a:	86 38       	ld.sh	r8,r3[0x6]
8000871c:	80 00       	ld.sh	r0,r0[0x0]
8000871e:	86 d8       	ld.uh	r8,r3[0xa]

80008720 <flashc_erase_page>:
80008720:	eb cd 40 80 	pushm	r7,lr
80008724:	1a 97       	mov	r7,sp
80008726:	20 4d       	sub	sp,16
80008728:	ef 4c ff f4 	st.w	r7[-12],r12
8000872c:	16 98       	mov	r8,r11
8000872e:	ef 68 ff f0 	st.b	r7[-16],r8
80008732:	30 18       	mov	r8,1
80008734:	ef 68 ff fb 	st.b	r7[-5],r8
80008738:	ee fb ff f4 	ld.w	r11,r7[-12]
8000873c:	30 2c       	mov	r12,2
8000873e:	f0 1f 00 10 	mcall	8000877c <flashc_erase_page+0x5c>
80008742:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80008746:	30 08       	mov	r8,0
80008748:	f0 09 18 00 	cp.b	r9,r8
8000874c:	c1 20       	breq	80008770 <flashc_erase_page+0x50>
8000874e:	48 d8       	lddpc	r8,80008780 <flashc_erase_page+0x60>
80008750:	70 08       	ld.w	r8,r8[0x0]
80008752:	ef 48 ff fc 	st.w	r7[-4],r8
80008756:	3f fc       	mov	r12,-1
80008758:	f0 1f 00 0b 	mcall	80008784 <flashc_erase_page+0x64>
8000875c:	18 98       	mov	r8,r12
8000875e:	ef 68 ff fb 	st.b	r7[-5],r8
80008762:	48 88       	lddpc	r8,80008780 <flashc_erase_page+0x60>
80008764:	70 09       	ld.w	r9,r8[0x0]
80008766:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000876a:	10 49       	or	r9,r8
8000876c:	48 58       	lddpc	r8,80008780 <flashc_erase_page+0x60>
8000876e:	91 09       	st.w	r8[0x0],r9
80008770:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008774:	10 9c       	mov	r12,r8
80008776:	2f cd       	sub	sp,-16
80008778:	e3 cd 80 80 	ldm	sp++,r7,pc
8000877c:	80 00       	ld.sh	r0,r0[0x0]
8000877e:	86 38       	ld.sh	r8,r3[0x6]
80008780:	00 00       	add	r0,r0
80008782:	07 3c       	ld.ub	r12,r3++
80008784:	80 00       	ld.sh	r0,r0[0x0]
80008786:	86 f4       	ld.uh	r4,r3[0xe]

80008788 <flashc_write_page>:
80008788:	eb cd 40 80 	pushm	r7,lr
8000878c:	1a 97       	mov	r7,sp
8000878e:	20 1d       	sub	sp,4
80008790:	ef 4c ff fc 	st.w	r7[-4],r12
80008794:	ee fb ff fc 	ld.w	r11,r7[-4]
80008798:	30 1c       	mov	r12,1
8000879a:	f0 1f 00 03 	mcall	800087a4 <flashc_write_page+0x1c>
8000879e:	2f fd       	sub	sp,-4
800087a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800087a4:	80 00       	ld.sh	r0,r0[0x0]
800087a6:	86 38       	ld.sh	r8,r3[0x6]

800087a8 <flashc_quick_user_page_read>:
800087a8:	eb cd 40 80 	pushm	r7,lr
800087ac:	1a 97       	mov	r7,sp
800087ae:	3f fb       	mov	r11,-1
800087b0:	30 fc       	mov	r12,15
800087b2:	f0 1f 00 05 	mcall	800087c4 <flashc_quick_user_page_read+0x1c>
800087b6:	f0 1f 00 05 	mcall	800087c8 <flashc_quick_user_page_read+0x20>
800087ba:	18 98       	mov	r8,r12
800087bc:	10 9c       	mov	r12,r8
800087be:	e3 cd 80 80 	ldm	sp++,r7,pc
800087c2:	00 00       	add	r0,r0
800087c4:	80 00       	ld.sh	r0,r0[0x0]
800087c6:	86 38       	ld.sh	r8,r3[0x6]
800087c8:	80 00       	ld.sh	r0,r0[0x0]
800087ca:	86 d8       	ld.uh	r8,r3[0xa]

800087cc <flashc_erase_user_page>:
800087cc:	eb cd 40 80 	pushm	r7,lr
800087d0:	1a 97       	mov	r7,sp
800087d2:	20 1d       	sub	sp,4
800087d4:	18 98       	mov	r8,r12
800087d6:	ef 68 ff fc 	st.b	r7[-4],r8
800087da:	3f fb       	mov	r11,-1
800087dc:	30 ec       	mov	r12,14
800087de:	f0 1f 00 09 	mcall	80008800 <flashc_erase_user_page+0x34>
800087e2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800087e6:	30 08       	mov	r8,0
800087e8:	f0 09 18 00 	cp.b	r9,r8
800087ec:	c0 50       	breq	800087f6 <flashc_erase_user_page+0x2a>
800087ee:	f0 1f 00 06 	mcall	80008804 <flashc_erase_user_page+0x38>
800087f2:	18 98       	mov	r8,r12
800087f4:	c0 28       	rjmp	800087f8 <flashc_erase_user_page+0x2c>
800087f6:	30 18       	mov	r8,1
800087f8:	10 9c       	mov	r12,r8
800087fa:	2f fd       	sub	sp,-4
800087fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80008800:	80 00       	ld.sh	r0,r0[0x0]
80008802:	86 38       	ld.sh	r8,r3[0x6]
80008804:	80 00       	ld.sh	r0,r0[0x0]
80008806:	87 a8       	st.w	r3[0x28],r8

80008808 <flashc_write_user_page>:
80008808:	eb cd 40 80 	pushm	r7,lr
8000880c:	1a 97       	mov	r7,sp
8000880e:	3f fb       	mov	r11,-1
80008810:	30 dc       	mov	r12,13
80008812:	f0 1f 00 03 	mcall	8000881c <flashc_write_user_page+0x14>
80008816:	e3 cd 80 80 	ldm	sp++,r7,pc
8000881a:	00 00       	add	r0,r0
8000881c:	80 00       	ld.sh	r0,r0[0x0]
8000881e:	86 38       	ld.sh	r8,r3[0x6]

80008820 <flashc_memset32>:
80008820:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80008824:	1a 97       	mov	r7,sp
80008826:	20 6d       	sub	sp,24
80008828:	ef 4c ff fc 	st.w	r7[-4],r12
8000882c:	ef 4b ff f8 	st.w	r7[-8],r11
80008830:	ef 4a ff f4 	st.w	r7[-12],r10
80008834:	12 98       	mov	r8,r9
80008836:	ef 68 ff f0 	st.b	r7[-16],r8
8000883a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000883e:	ee f0 ff f8 	ld.w	r0,r7[-8]
80008842:	30 01       	mov	r1,0
80008844:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008848:	ef 49 ff ec 	st.w	r7[-20],r9
8000884c:	30 09       	mov	r9,0
8000884e:	ef 49 ff e8 	st.w	r7[-24],r9
80008852:	ee f3 ff ec 	ld.w	r3,r7[-20]
80008856:	a1 63       	lsl	r3,0x0
80008858:	30 02       	mov	r2,0
8000885a:	e1 e2 10 0a 	or	r10,r0,r2
8000885e:	e3 e3 10 0b 	or	r11,r1,r3
80008862:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008866:	ee fc ff fc 	ld.w	r12,r7[-4]
8000886a:	f0 1f 00 04 	mcall	80008878 <flashc_memset32+0x58>
8000886e:	18 98       	mov	r8,r12
80008870:	10 9c       	mov	r12,r8
80008872:	2f ad       	sub	sp,-24
80008874:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80008878:	80 00       	ld.sh	r0,r0[0x0]
8000887a:	88 7c       	ld.sh	r12,r4[0xe]

8000887c <flashc_memset64>:
8000887c:	eb cd 40 80 	pushm	r7,lr
80008880:	1a 97       	mov	r7,sp
80008882:	21 bd       	sub	sp,108
80008884:	ef 4c ff a4 	st.w	r7[-92],r12
80008888:	ee eb ff 9c 	st.d	r7[-100],r10
8000888c:	ef 49 ff 98 	st.w	r7[-104],r9
80008890:	ef 68 ff 94 	st.b	r7[-108],r8
80008894:	30 08       	mov	r8,0
80008896:	30 09       	mov	r9,0
80008898:	ee e9 ff d8 	st.d	r7[-40],r8
8000889c:	30 08       	mov	r8,0
8000889e:	ef 48 ff ec 	st.w	r7[-20],r8
800088a2:	f0 1f 00 fa 	mcall	80008c88 <flashc_memset64+0x40c>
800088a6:	18 99       	mov	r9,r12
800088a8:	fc 18 80 00 	movh	r8,0x8000
800088ac:	f2 08 00 08 	add	r8,r9,r8
800088b0:	ef 48 ff e4 	st.w	r7[-28],r8
800088b4:	ee f8 ff a4 	ld.w	r8,r7[-92]
800088b8:	ef 48 ff e0 	st.w	r7[-32],r8
800088bc:	ee f8 ff e0 	ld.w	r8,r7[-32]
800088c0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800088c4:	20 18       	sub	r8,1
800088c6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800088ca:	ef 48 ff f0 	st.w	r7[-16],r8
800088ce:	c1 f8       	rjmp	8000890c <flashc_memset64+0x90>
800088d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800088d4:	ef 38 ff a3 	ld.ub	r8,r7[-93]
800088d8:	ee 09 00 09 	add	r9,r7,r9
800088dc:	f3 68 ff d8 	st.b	r9[-40],r8
800088e0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800088e4:	b9 68       	lsl	r8,0x18
800088e6:	ee f9 ff a0 	ld.w	r9,r7[-96]
800088ea:	a9 89       	lsr	r9,0x8
800088ec:	f3 e8 10 08 	or	r8,r9,r8
800088f0:	ef 48 ff a0 	st.w	r7[-96],r8
800088f4:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800088f8:	a9 88       	lsr	r8,0x8
800088fa:	ef 48 ff 9c 	st.w	r7[-100],r8
800088fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008902:	20 18       	sub	r8,1
80008904:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80008908:	ef 48 ff f0 	st.w	r7[-16],r8
8000890c:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80008910:	58 08       	cp.w	r8,0
80008912:	5c 29       	cpc	r9
80008914:	cd e1       	brne	800088d0 <flashc_memset64+0x54>
80008916:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000891a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000891e:	f2 08 00 08 	add	r8,r9,r8
80008922:	ef 48 ff d4 	st.w	r7[-44],r8
80008926:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000892a:	e0 69 ff ff 	mov	r9,65535
8000892e:	ea 19 7f ff 	orh	r9,0x7fff
80008932:	12 38       	cp.w	r8,r9
80008934:	e0 8b 00 07 	brhi	80008942 <flashc_memset64+0xc6>
80008938:	fc 18 80 00 	movh	r8,0x8000
8000893c:	ef 48 ff e0 	st.w	r7[-32],r8
80008940:	c1 58       	rjmp	8000896a <flashc_memset64+0xee>
80008942:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008946:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000894a:	10 39       	cp.w	r9,r8
8000894c:	e0 8b 00 0f 	brhi	8000896a <flashc_memset64+0xee>
80008950:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008954:	e0 69 ff ff 	mov	r9,65535
80008958:	ea 19 80 7f 	orh	r9,0x807f
8000895c:	12 38       	cp.w	r8,r9
8000895e:	e0 8b 00 06 	brhi	8000896a <flashc_memset64+0xee>
80008962:	fc 18 80 80 	movh	r8,0x8080
80008966:	ef 48 ff e0 	st.w	r7[-32],r8
8000896a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000896e:	e0 69 02 00 	mov	r9,512
80008972:	ea 19 80 80 	orh	r9,0x8080
80008976:	12 38       	cp.w	r8,r9
80008978:	e0 88 00 09 	brls	8000898a <flashc_memset64+0x10e>
8000897c:	e0 68 02 00 	mov	r8,512
80008980:	ea 18 80 80 	orh	r8,0x8080
80008984:	ef 48 ff d4 	st.w	r7[-44],r8
80008988:	c1 38       	rjmp	800089ae <flashc_memset64+0x132>
8000898a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000898e:	fc 19 80 80 	movh	r9,0x8080
80008992:	12 38       	cp.w	r8,r9
80008994:	e0 8b 00 0d 	brhi	800089ae <flashc_memset64+0x132>
80008998:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000899c:	ee f8 ff e4 	ld.w	r8,r7[-28]
800089a0:	10 39       	cp.w	r9,r8
800089a2:	e0 88 00 06 	brls	800089ae <flashc_memset64+0x132>
800089a6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800089aa:	ef 48 ff d4 	st.w	r7[-44],r8
800089ae:	ee f8 ff d4 	ld.w	r8,r7[-44]
800089b2:	a1 c8       	cbr	r8,0x0
800089b4:	ef 48 ff cc 	st.w	r7[-52],r8
800089b8:	ee f8 ff cc 	ld.w	r8,r7[-52]
800089bc:	e0 18 ff fc 	andl	r8,0xfffc
800089c0:	ef 48 ff c4 	st.w	r7[-60],r8
800089c4:	ee f8 ff c4 	ld.w	r8,r7[-60]
800089c8:	e0 18 ff f8 	andl	r8,0xfff8
800089cc:	ef 48 ff bc 	st.w	r7[-68],r8
800089d0:	c4 a9       	rjmp	80008c64 <flashc_memset64+0x3e8>
800089d2:	f0 1f 00 af 	mcall	80008c8c <flashc_memset64+0x410>
800089d6:	fe f8 02 ba 	ld.w	r8,pc[698]
800089da:	70 08       	ld.w	r8,r8[0x0]
800089dc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800089e0:	f3 e8 10 08 	or	r8,r9,r8
800089e4:	ef 48 ff ec 	st.w	r7[-20],r8
800089e8:	ee f8 ff bc 	ld.w	r8,r7[-68]
800089ec:	ef 48 ff f8 	st.w	r7[-8],r8
800089f0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800089f4:	e0 18 fe 00 	andl	r8,0xfe00
800089f8:	f0 c8 fe 00 	sub	r8,r8,-512
800089fc:	ef 48 ff fc 	st.w	r7[-4],r8
80008a00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a04:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008a08:	f0 09 0d 48 	min	r8,r8,r9
80008a0c:	ef 48 ff f4 	st.w	r7[-12],r8
80008a10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008a14:	ef 48 ff b4 	st.w	r7[-76],r8
80008a18:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008a1c:	10 99       	mov	r9,r8
80008a1e:	e0 19 fe 00 	andl	r9,0xfe00
80008a22:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008a26:	e0 18 fe 00 	andl	r8,0xfe00
80008a2a:	10 39       	cp.w	r9,r8
80008a2c:	5f 28       	srhs	r8
80008a2e:	ef 68 ff eb 	st.b	r7[-21],r8
80008a32:	ee e8 ff d8 	ld.d	r8,r7[-40]
80008a36:	ee e9 ff ac 	st.d	r7[-84],r8
80008a3a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008a3e:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80008a42:	c5 b0       	breq	80008af8 <flashc_memset64+0x27c>
80008a44:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008a48:	e0 18 fe 00 	andl	r8,0xfe00
80008a4c:	ef 48 ff a8 	st.w	r7[-88],r8
80008a50:	c0 e8       	rjmp	80008a6c <flashc_memset64+0x1f0>
80008a52:	ee fa ff a8 	ld.w	r10,r7[-88]
80008a56:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008a5a:	f0 e8 00 00 	ld.d	r8,r8[0]
80008a5e:	f4 e9 00 00 	st.d	r10[0],r8
80008a62:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008a66:	2f 88       	sub	r8,-8
80008a68:	ef 48 ff a8 	st.w	r7[-88],r8
80008a6c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80008a70:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008a74:	e0 18 ff f8 	andl	r8,0xfff8
80008a78:	10 39       	cp.w	r9,r8
80008a7a:	ce c3       	brcs	80008a52 <flashc_memset64+0x1d6>
80008a7c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008a80:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80008a84:	c3 a0       	breq	80008af8 <flashc_memset64+0x27c>
80008a86:	30 08       	mov	r8,0
80008a88:	ef 48 ff f0 	st.w	r7[-16],r8
80008a8c:	c1 38       	rjmp	80008ab2 <flashc_memset64+0x236>
80008a8e:	ee fa ff f0 	ld.w	r10,r7[-16]
80008a92:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008a96:	11 89       	ld.ub	r9,r8[0x0]
80008a98:	5c 59       	castu.b	r9
80008a9a:	ee 0a 00 0a 	add	r10,r7,r10
80008a9e:	f5 69 ff ac 	st.b	r10[-84],r9
80008aa2:	2f f8       	sub	r8,-1
80008aa4:	ef 48 ff a8 	st.w	r7[-88],r8
80008aa8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008aac:	2f f8       	sub	r8,-1
80008aae:	ef 48 ff f0 	st.w	r7[-16],r8
80008ab2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008ab6:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80008aba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008abe:	10 39       	cp.w	r9,r8
80008ac0:	fe 9b ff e7 	brhi	80008a8e <flashc_memset64+0x212>
80008ac4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008ac8:	e0 18 ff f8 	andl	r8,0xfff8
80008acc:	ef 48 ff e0 	st.w	r7[-32],r8
80008ad0:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008ad4:	ee f8 ff bc 	ld.w	r8,r7[-68]
80008ad8:	10 39       	cp.w	r9,r8
80008ada:	c0 f2       	brcc	80008af8 <flashc_memset64+0x27c>
80008adc:	ee fa ff e0 	ld.w	r10,r7[-32]
80008ae0:	ee e8 ff ac 	ld.d	r8,r7[-84]
80008ae4:	f4 e9 00 00 	st.d	r10[0],r8
80008ae8:	f4 c8 ff f8 	sub	r8,r10,-8
80008aec:	ef 48 ff e0 	st.w	r7[-32],r8
80008af0:	ee e8 ff d8 	ld.d	r8,r7[-40]
80008af4:	ee e9 ff ac 	st.d	r7[-84],r8
80008af8:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008afc:	10 99       	mov	r9,r8
80008afe:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008b02:	f2 08 01 08 	sub	r8,r9,r8
80008b06:	a3 58       	asr	r8,0x3
80008b08:	ef 48 ff f0 	st.w	r7[-16],r8
80008b0c:	c1 08       	rjmp	80008b2c <flashc_memset64+0x2b0>
80008b0e:	ee fa ff e0 	ld.w	r10,r7[-32]
80008b12:	ee e8 ff d8 	ld.d	r8,r7[-40]
80008b16:	f4 e9 00 00 	st.d	r10[0],r8
80008b1a:	f4 c8 ff f8 	sub	r8,r10,-8
80008b1e:	ef 48 ff e0 	st.w	r7[-32],r8
80008b22:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008b26:	20 18       	sub	r8,1
80008b28:	ef 48 ff f0 	st.w	r7[-16],r8
80008b2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008b30:	58 08       	cp.w	r8,0
80008b32:	ce e1       	brne	80008b0e <flashc_memset64+0x292>
80008b34:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80008b38:	30 08       	mov	r8,0
80008b3a:	f0 09 18 00 	cp.b	r9,r8
80008b3e:	c4 70       	breq	80008bcc <flashc_memset64+0x350>
80008b40:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008b44:	ef 48 ff a8 	st.w	r7[-88],r8
80008b48:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008b4c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80008b50:	c3 80       	breq	80008bc0 <flashc_memset64+0x344>
80008b52:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008b56:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80008b5a:	ef 48 ff f0 	st.w	r7[-16],r8
80008b5e:	c1 38       	rjmp	80008b84 <flashc_memset64+0x308>
80008b60:	ee fa ff f0 	ld.w	r10,r7[-16]
80008b64:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008b68:	11 89       	ld.ub	r9,r8[0x0]
80008b6a:	5c 59       	castu.b	r9
80008b6c:	ee 0a 00 0a 	add	r10,r7,r10
80008b70:	f5 69 ff ac 	st.b	r10[-84],r9
80008b74:	2f f8       	sub	r8,-1
80008b76:	ef 48 ff a8 	st.w	r7[-88],r8
80008b7a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008b7e:	2f f8       	sub	r8,-1
80008b80:	ef 48 ff f0 	st.w	r7[-16],r8
80008b84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008b88:	58 78       	cp.w	r8,7
80008b8a:	fe 98 ff eb 	brls	80008b60 <flashc_memset64+0x2e4>
80008b8e:	ee fa ff e0 	ld.w	r10,r7[-32]
80008b92:	ee e8 ff ac 	ld.d	r8,r7[-84]
80008b96:	f4 e9 00 00 	st.d	r10[0],r8
80008b9a:	f4 c8 ff f8 	sub	r8,r10,-8
80008b9e:	ef 48 ff e0 	st.w	r7[-32],r8
80008ba2:	c1 08       	rjmp	80008bc2 <flashc_memset64+0x346>
80008ba4:	ee fa ff a8 	ld.w	r10,r7[-88]
80008ba8:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008bac:	f0 e8 00 00 	ld.d	r8,r8[0]
80008bb0:	f4 e9 00 00 	st.d	r10[0],r8
80008bb4:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008bb8:	2f 88       	sub	r8,-8
80008bba:	ef 48 ff a8 	st.w	r7[-88],r8
80008bbe:	c0 28       	rjmp	80008bc2 <flashc_memset64+0x346>
80008bc0:	d7 03       	nop
80008bc2:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008bc6:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80008bca:	ce d1       	brne	80008ba4 <flashc_memset64+0x328>
80008bcc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008bd0:	fc 19 80 80 	movh	r9,0x8080
80008bd4:	12 38       	cp.w	r8,r9
80008bd6:	e0 8b 00 2a 	brhi	80008c2a <flashc_memset64+0x3ae>
80008bda:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80008bde:	30 08       	mov	r8,0
80008be0:	f0 09 18 00 	cp.b	r9,r8
80008be4:	c0 d0       	breq	80008bfe <flashc_memset64+0x382>
80008be6:	30 0b       	mov	r11,0
80008be8:	3f fc       	mov	r12,-1
80008bea:	f0 1f 00 2b 	mcall	80008c94 <flashc_memset64+0x418>
80008bee:	4a 98       	lddpc	r8,80008c90 <flashc_memset64+0x414>
80008bf0:	70 08       	ld.w	r8,r8[0x0]
80008bf2:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008bf6:	f3 e8 10 08 	or	r8,r9,r8
80008bfa:	ef 48 ff ec 	st.w	r7[-20],r8
80008bfe:	3f fc       	mov	r12,-1
80008c00:	f0 1f 00 26 	mcall	80008c98 <flashc_memset64+0x41c>
80008c04:	4a 38       	lddpc	r8,80008c90 <flashc_memset64+0x414>
80008c06:	70 08       	ld.w	r8,r8[0x0]
80008c08:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008c0c:	f3 e8 10 08 	or	r8,r9,r8
80008c10:	ef 48 ff ec 	st.w	r7[-20],r8
80008c14:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008c18:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008c1c:	10 39       	cp.w	r9,r8
80008c1e:	c2 23       	brcs	80008c62 <flashc_memset64+0x3e6>
80008c20:	fc 18 80 80 	movh	r8,0x8080
80008c24:	ef 48 ff e0 	st.w	r7[-32],r8
80008c28:	c1 e8       	rjmp	80008c64 <flashc_memset64+0x3e8>
80008c2a:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80008c2e:	30 08       	mov	r8,0
80008c30:	f0 09 18 00 	cp.b	r9,r8
80008c34:	c0 c0       	breq	80008c4c <flashc_memset64+0x3d0>
80008c36:	30 0c       	mov	r12,0
80008c38:	f0 1f 00 19 	mcall	80008c9c <flashc_memset64+0x420>
80008c3c:	49 58       	lddpc	r8,80008c90 <flashc_memset64+0x414>
80008c3e:	70 08       	ld.w	r8,r8[0x0]
80008c40:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008c44:	f3 e8 10 08 	or	r8,r9,r8
80008c48:	ef 48 ff ec 	st.w	r7[-20],r8
80008c4c:	f0 1f 00 15 	mcall	80008ca0 <flashc_memset64+0x424>
80008c50:	49 08       	lddpc	r8,80008c90 <flashc_memset64+0x414>
80008c52:	70 08       	ld.w	r8,r8[0x0]
80008c54:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008c58:	f3 e8 10 08 	or	r8,r9,r8
80008c5c:	ef 48 ff ec 	st.w	r7[-20],r8
80008c60:	c0 28       	rjmp	80008c64 <flashc_memset64+0x3e8>
80008c62:	d7 03       	nop
80008c64:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008c68:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008c6c:	10 39       	cp.w	r9,r8
80008c6e:	fe 93 fe b2 	brlo	800089d2 <flashc_memset64+0x156>
80008c72:	48 88       	lddpc	r8,80008c90 <flashc_memset64+0x414>
80008c74:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008c78:	91 09       	st.w	r8[0x0],r9
80008c7a:	ee f8 ff a4 	ld.w	r8,r7[-92]
80008c7e:	10 9c       	mov	r12,r8
80008c80:	2e 5d       	sub	sp,-108
80008c82:	e3 cd 80 80 	ldm	sp++,r7,pc
80008c86:	00 00       	add	r0,r0
80008c88:	80 00       	ld.sh	r0,r0[0x0]
80008c8a:	85 28       	st.w	r2[0x8],r8
80008c8c:	80 00       	ld.sh	r0,r0[0x0]
80008c8e:	86 c0       	ld.uh	r0,r3[0x8]
80008c90:	00 00       	add	r0,r0
80008c92:	07 3c       	ld.ub	r12,r3++
80008c94:	80 00       	ld.sh	r0,r0[0x0]
80008c96:	87 20       	st.w	r3[0x8],r0
80008c98:	80 00       	ld.sh	r0,r0[0x0]
80008c9a:	87 88       	st.w	r3[0x20],r8
80008c9c:	80 00       	ld.sh	r0,r0[0x0]
80008c9e:	87 cc       	st.w	r3[0x30],r12
80008ca0:	80 00       	ld.sh	r0,r0[0x0]
80008ca2:	88 08       	ld.sh	r8,r4[0x0]

80008ca4 <gpio_enable_module>:
80008ca4:	eb cd 40 80 	pushm	r7,lr
80008ca8:	1a 97       	mov	r7,sp
80008caa:	20 4d       	sub	sp,16
80008cac:	ef 4c ff f4 	st.w	r7[-12],r12
80008cb0:	ef 4b ff f0 	st.w	r7[-16],r11
80008cb4:	30 08       	mov	r8,0
80008cb6:	ef 48 ff f8 	st.w	r7[-8],r8
80008cba:	30 08       	mov	r8,0
80008cbc:	ef 48 ff fc 	st.w	r7[-4],r8
80008cc0:	c1 d8       	rjmp	80008cfa <gpio_enable_module+0x56>
80008cc2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008cc6:	11 98       	ld.ub	r8,r8[0x1]
80008cc8:	10 99       	mov	r9,r8
80008cca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008cce:	11 88       	ld.ub	r8,r8[0x0]
80008cd0:	12 9b       	mov	r11,r9
80008cd2:	10 9c       	mov	r12,r8
80008cd4:	f0 1f 00 10 	mcall	80008d14 <gpio_enable_module+0x70>
80008cd8:	18 98       	mov	r8,r12
80008cda:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008cde:	f3 e8 10 08 	or	r8,r9,r8
80008ce2:	ef 48 ff f8 	st.w	r7[-8],r8
80008ce6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008cea:	2f e8       	sub	r8,-2
80008cec:	ef 48 ff f4 	st.w	r7[-12],r8
80008cf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cf4:	2f f8       	sub	r8,-1
80008cf6:	ef 48 ff fc 	st.w	r7[-4],r8
80008cfa:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008cfe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008d02:	10 39       	cp.w	r9,r8
80008d04:	cd f3       	brcs	80008cc2 <gpio_enable_module+0x1e>
80008d06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d0a:	10 9c       	mov	r12,r8
80008d0c:	2f cd       	sub	sp,-16
80008d0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008d12:	00 00       	add	r0,r0
80008d14:	80 00       	ld.sh	r0,r0[0x0]
80008d16:	8d 18       	st.w	r6[0x4],r8

80008d18 <gpio_enable_module_pin>:
80008d18:	eb cd 40 80 	pushm	r7,lr
80008d1c:	1a 97       	mov	r7,sp
80008d1e:	20 3d       	sub	sp,12
80008d20:	ef 4c ff f8 	st.w	r7[-8],r12
80008d24:	ef 4b ff f4 	st.w	r7[-12],r11
80008d28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d2c:	a5 98       	lsr	r8,0x5
80008d2e:	a9 68       	lsl	r8,0x8
80008d30:	e0 28 f0 00 	sub	r8,61440
80008d34:	ef 48 ff fc 	st.w	r7[-4],r8
80008d38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008d3c:	58 18       	cp.w	r8,1
80008d3e:	c1 e0       	breq	80008d7a <gpio_enable_module_pin+0x62>
80008d40:	c0 63       	brcs	80008d4c <gpio_enable_module_pin+0x34>
80008d42:	58 28       	cp.w	r8,2
80008d44:	c3 20       	breq	80008da8 <gpio_enable_module_pin+0x90>
80008d46:	58 38       	cp.w	r8,3
80008d48:	c4 70       	breq	80008dd6 <gpio_enable_module_pin+0xbe>
80008d4a:	c5 d8       	rjmp	80008e04 <gpio_enable_module_pin+0xec>
80008d4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d50:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d54:	30 19       	mov	r9,1
80008d56:	f2 08 09 48 	lsl	r8,r9,r8
80008d5a:	10 99       	mov	r9,r8
80008d5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d60:	91 69       	st.w	r8[0x18],r9
80008d62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d66:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d6a:	30 19       	mov	r9,1
80008d6c:	f2 08 09 48 	lsl	r8,r9,r8
80008d70:	10 99       	mov	r9,r8
80008d72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d76:	91 a9       	st.w	r8[0x28],r9
80008d78:	c4 88       	rjmp	80008e08 <gpio_enable_module_pin+0xf0>
80008d7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d7e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d82:	30 19       	mov	r9,1
80008d84:	f2 08 09 48 	lsl	r8,r9,r8
80008d88:	10 99       	mov	r9,r8
80008d8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d8e:	91 59       	st.w	r8[0x14],r9
80008d90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d94:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d98:	30 19       	mov	r9,1
80008d9a:	f2 08 09 48 	lsl	r8,r9,r8
80008d9e:	10 99       	mov	r9,r8
80008da0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008da4:	91 a9       	st.w	r8[0x28],r9
80008da6:	c3 18       	rjmp	80008e08 <gpio_enable_module_pin+0xf0>
80008da8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008dac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008db0:	30 19       	mov	r9,1
80008db2:	f2 08 09 48 	lsl	r8,r9,r8
80008db6:	10 99       	mov	r9,r8
80008db8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dbc:	91 69       	st.w	r8[0x18],r9
80008dbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008dc2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008dc6:	30 19       	mov	r9,1
80008dc8:	f2 08 09 48 	lsl	r8,r9,r8
80008dcc:	10 99       	mov	r9,r8
80008dce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dd2:	91 99       	st.w	r8[0x24],r9
80008dd4:	c1 a8       	rjmp	80008e08 <gpio_enable_module_pin+0xf0>
80008dd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008dda:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008dde:	30 19       	mov	r9,1
80008de0:	f2 08 09 48 	lsl	r8,r9,r8
80008de4:	10 99       	mov	r9,r8
80008de6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dea:	91 59       	st.w	r8[0x14],r9
80008dec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008df0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008df4:	30 19       	mov	r9,1
80008df6:	f2 08 09 48 	lsl	r8,r9,r8
80008dfa:	10 99       	mov	r9,r8
80008dfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e00:	91 99       	st.w	r8[0x24],r9
80008e02:	c0 38       	rjmp	80008e08 <gpio_enable_module_pin+0xf0>
80008e04:	30 18       	mov	r8,1
80008e06:	c0 d8       	rjmp	80008e20 <gpio_enable_module_pin+0x108>
80008e08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e0c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e10:	30 19       	mov	r9,1
80008e12:	f2 08 09 48 	lsl	r8,r9,r8
80008e16:	10 99       	mov	r9,r8
80008e18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e1c:	91 29       	st.w	r8[0x8],r9
80008e1e:	30 08       	mov	r8,0
80008e20:	10 9c       	mov	r12,r8
80008e22:	2f dd       	sub	sp,-12
80008e24:	e3 cd 80 80 	ldm	sp++,r7,pc

80008e28 <gpio_enable_gpio_pin>:
80008e28:	eb cd 40 80 	pushm	r7,lr
80008e2c:	1a 97       	mov	r7,sp
80008e2e:	20 2d       	sub	sp,8
80008e30:	ef 4c ff f8 	st.w	r7[-8],r12
80008e34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e38:	a5 98       	lsr	r8,0x5
80008e3a:	a9 68       	lsl	r8,0x8
80008e3c:	e0 28 f0 00 	sub	r8,61440
80008e40:	ef 48 ff fc 	st.w	r7[-4],r8
80008e44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e48:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e4c:	30 19       	mov	r9,1
80008e4e:	f2 08 09 48 	lsl	r8,r9,r8
80008e52:	10 99       	mov	r9,r8
80008e54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e58:	f1 49 00 48 	st.w	r8[72],r9
80008e5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e60:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e64:	30 19       	mov	r9,1
80008e66:	f2 08 09 48 	lsl	r8,r9,r8
80008e6a:	10 99       	mov	r9,r8
80008e6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e70:	91 19       	st.w	r8[0x4],r9
80008e72:	2f ed       	sub	sp,-8
80008e74:	e3 cd 80 80 	ldm	sp++,r7,pc

80008e78 <gpio_enable_pin_pull_up>:
80008e78:	eb cd 40 80 	pushm	r7,lr
80008e7c:	1a 97       	mov	r7,sp
80008e7e:	20 2d       	sub	sp,8
80008e80:	ef 4c ff f8 	st.w	r7[-8],r12
80008e84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e88:	a5 98       	lsr	r8,0x5
80008e8a:	a9 68       	lsl	r8,0x8
80008e8c:	e0 28 f0 00 	sub	r8,61440
80008e90:	ef 48 ff fc 	st.w	r7[-4],r8
80008e94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e98:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e9c:	30 19       	mov	r9,1
80008e9e:	f2 08 09 48 	lsl	r8,r9,r8
80008ea2:	10 99       	mov	r9,r8
80008ea4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ea8:	f1 49 00 74 	st.w	r8[116],r9
80008eac:	2f ed       	sub	sp,-8
80008eae:	e3 cd 80 80 	ldm	sp++,r7,pc

80008eb2 <gpio_configure_pin>:
80008eb2:	eb cd 40 80 	pushm	r7,lr
80008eb6:	1a 97       	mov	r7,sp
80008eb8:	20 3d       	sub	sp,12
80008eba:	ef 4c ff f8 	st.w	r7[-8],r12
80008ebe:	ef 4b ff f4 	st.w	r7[-12],r11
80008ec2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ec6:	a5 98       	lsr	r8,0x5
80008ec8:	a9 68       	lsl	r8,0x8
80008eca:	e0 28 f0 00 	sub	r8,61440
80008ece:	ef 48 ff fc 	st.w	r7[-4],r8
80008ed2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008ed6:	e2 18 00 04 	andl	r8,0x4,COH
80008eda:	c0 e0       	breq	80008ef6 <gpio_configure_pin+0x44>
80008edc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ee0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ee4:	30 19       	mov	r9,1
80008ee6:	f2 08 09 48 	lsl	r8,r9,r8
80008eea:	10 99       	mov	r9,r8
80008eec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ef0:	f1 49 00 74 	st.w	r8[116],r9
80008ef4:	c0 d8       	rjmp	80008f0e <gpio_configure_pin+0x5c>
80008ef6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008efa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008efe:	30 19       	mov	r9,1
80008f00:	f2 08 09 48 	lsl	r8,r9,r8
80008f04:	10 99       	mov	r9,r8
80008f06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f0a:	f1 49 00 78 	st.w	r8[120],r9
80008f0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008f12:	e2 18 00 80 	andl	r8,0x80,COH
80008f16:	c5 a0       	breq	80008fca <gpio_configure_pin+0x118>
80008f18:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008f1c:	e2 18 01 80 	andl	r8,0x180,COH
80008f20:	c1 a0       	breq	80008f54 <gpio_configure_pin+0xa2>
80008f22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f26:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f2a:	30 19       	mov	r9,1
80008f2c:	f2 08 09 48 	lsl	r8,r9,r8
80008f30:	10 99       	mov	r9,r8
80008f32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f36:	f1 49 00 a8 	st.w	r8[168],r9
80008f3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f3e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f42:	30 19       	mov	r9,1
80008f44:	f2 08 09 48 	lsl	r8,r9,r8
80008f48:	10 99       	mov	r9,r8
80008f4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f4e:	f1 49 00 b8 	st.w	r8[184],r9
80008f52:	c3 c8       	rjmp	80008fca <gpio_configure_pin+0x118>
80008f54:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008f58:	e2 18 02 80 	andl	r8,0x280,COH
80008f5c:	c1 a0       	breq	80008f90 <gpio_configure_pin+0xde>
80008f5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f62:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f66:	30 19       	mov	r9,1
80008f68:	f2 08 09 48 	lsl	r8,r9,r8
80008f6c:	10 99       	mov	r9,r8
80008f6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f72:	f1 49 00 a4 	st.w	r8[164],r9
80008f76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f7a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f7e:	30 19       	mov	r9,1
80008f80:	f2 08 09 48 	lsl	r8,r9,r8
80008f84:	10 99       	mov	r9,r8
80008f86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f8a:	f1 49 00 b8 	st.w	r8[184],r9
80008f8e:	c1 e8       	rjmp	80008fca <gpio_configure_pin+0x118>
80008f90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008f94:	e2 18 03 80 	andl	r8,0x380,COH
80008f98:	c1 90       	breq	80008fca <gpio_configure_pin+0x118>
80008f9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f9e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008fa2:	30 19       	mov	r9,1
80008fa4:	f2 08 09 48 	lsl	r8,r9,r8
80008fa8:	10 99       	mov	r9,r8
80008faa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fae:	f1 49 00 a8 	st.w	r8[168],r9
80008fb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fb6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008fba:	30 19       	mov	r9,1
80008fbc:	f2 08 09 48 	lsl	r8,r9,r8
80008fc0:	10 99       	mov	r9,r8
80008fc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fc6:	f1 49 00 b4 	st.w	r8[180],r9
80008fca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008fce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008fd2:	5c 58       	castu.b	r8
80008fd4:	c2 c0       	breq	8000902c <gpio_configure_pin+0x17a>
80008fd6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008fda:	e2 18 00 02 	andl	r8,0x2,COH
80008fde:	c0 e0       	breq	80008ffa <gpio_configure_pin+0x148>
80008fe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fe4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008fe8:	30 19       	mov	r9,1
80008fea:	f2 08 09 48 	lsl	r8,r9,r8
80008fee:	10 99       	mov	r9,r8
80008ff0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ff4:	f1 49 00 54 	st.w	r8[84],r9
80008ff8:	c0 d8       	rjmp	80009012 <gpio_configure_pin+0x160>
80008ffa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ffe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80009002:	30 19       	mov	r9,1
80009004:	f2 08 09 48 	lsl	r8,r9,r8
80009008:	10 99       	mov	r9,r8
8000900a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000900e:	f1 49 00 58 	st.w	r8[88],r9
80009012:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009016:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000901a:	30 19       	mov	r9,1
8000901c:	f2 08 09 48 	lsl	r8,r9,r8
80009020:	10 99       	mov	r9,r8
80009022:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009026:	f1 49 00 44 	st.w	r8[68],r9
8000902a:	c0 d8       	rjmp	80009044 <gpio_configure_pin+0x192>
8000902c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009030:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80009034:	30 19       	mov	r9,1
80009036:	f2 08 09 48 	lsl	r8,r9,r8
8000903a:	10 99       	mov	r9,r8
8000903c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009040:	f1 49 00 48 	st.w	r8[72],r9
80009044:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009048:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000904c:	30 19       	mov	r9,1
8000904e:	f2 08 09 48 	lsl	r8,r9,r8
80009052:	10 99       	mov	r9,r8
80009054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009058:	91 19       	st.w	r8[0x4],r9
8000905a:	2f dd       	sub	sp,-12
8000905c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009060 <gpio_get_pin_value>:
80009060:	eb cd 40 80 	pushm	r7,lr
80009064:	1a 97       	mov	r7,sp
80009066:	20 2d       	sub	sp,8
80009068:	ef 4c ff f8 	st.w	r7[-8],r12
8000906c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009070:	a5 98       	lsr	r8,0x5
80009072:	a9 68       	lsl	r8,0x8
80009074:	e0 28 f0 00 	sub	r8,61440
80009078:	ef 48 ff fc 	st.w	r7[-4],r8
8000907c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009080:	71 89       	ld.w	r9,r8[0x60]
80009082:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009086:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000908a:	f2 08 0a 48 	lsr	r8,r9,r8
8000908e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009092:	10 9c       	mov	r12,r8
80009094:	2f ed       	sub	sp,-8
80009096:	e3 cd 80 80 	ldm	sp++,r7,pc

8000909a <gpio_set_gpio_pin>:
8000909a:	eb cd 40 80 	pushm	r7,lr
8000909e:	1a 97       	mov	r7,sp
800090a0:	20 2d       	sub	sp,8
800090a2:	ef 4c ff f8 	st.w	r7[-8],r12
800090a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800090aa:	a5 98       	lsr	r8,0x5
800090ac:	a9 68       	lsl	r8,0x8
800090ae:	e0 28 f0 00 	sub	r8,61440
800090b2:	ef 48 ff fc 	st.w	r7[-4],r8
800090b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800090ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800090be:	30 19       	mov	r9,1
800090c0:	f2 08 09 48 	lsl	r8,r9,r8
800090c4:	10 99       	mov	r9,r8
800090c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090ca:	f1 49 00 54 	st.w	r8[84],r9
800090ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800090d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800090d6:	30 19       	mov	r9,1
800090d8:	f2 08 09 48 	lsl	r8,r9,r8
800090dc:	10 99       	mov	r9,r8
800090de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090e2:	f1 49 00 44 	st.w	r8[68],r9
800090e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800090ea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800090ee:	30 19       	mov	r9,1
800090f0:	f2 08 09 48 	lsl	r8,r9,r8
800090f4:	10 99       	mov	r9,r8
800090f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090fa:	91 19       	st.w	r8[0x4],r9
800090fc:	2f ed       	sub	sp,-8
800090fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80009102 <gpio_clr_gpio_pin>:
80009102:	eb cd 40 80 	pushm	r7,lr
80009106:	1a 97       	mov	r7,sp
80009108:	20 2d       	sub	sp,8
8000910a:	ef 4c ff f8 	st.w	r7[-8],r12
8000910e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009112:	a5 98       	lsr	r8,0x5
80009114:	a9 68       	lsl	r8,0x8
80009116:	e0 28 f0 00 	sub	r8,61440
8000911a:	ef 48 ff fc 	st.w	r7[-4],r8
8000911e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009122:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80009126:	30 19       	mov	r9,1
80009128:	f2 08 09 48 	lsl	r8,r9,r8
8000912c:	10 99       	mov	r9,r8
8000912e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009132:	f1 49 00 58 	st.w	r8[88],r9
80009136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000913a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000913e:	30 19       	mov	r9,1
80009140:	f2 08 09 48 	lsl	r8,r9,r8
80009144:	10 99       	mov	r9,r8
80009146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000914a:	f1 49 00 44 	st.w	r8[68],r9
8000914e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009152:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80009156:	30 19       	mov	r9,1
80009158:	f2 08 09 48 	lsl	r8,r9,r8
8000915c:	10 99       	mov	r9,r8
8000915e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009162:	91 19       	st.w	r8[0x4],r9
80009164:	2f ed       	sub	sp,-8
80009166:	e3 cd 80 80 	ldm	sp++,r7,pc

8000916a <gpio_tgl_gpio_pin>:
8000916a:	eb cd 40 80 	pushm	r7,lr
8000916e:	1a 97       	mov	r7,sp
80009170:	20 2d       	sub	sp,8
80009172:	ef 4c ff f8 	st.w	r7[-8],r12
80009176:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000917a:	a5 98       	lsr	r8,0x5
8000917c:	a9 68       	lsl	r8,0x8
8000917e:	e0 28 f0 00 	sub	r8,61440
80009182:	ef 48 ff fc 	st.w	r7[-4],r8
80009186:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000918a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000918e:	30 19       	mov	r9,1
80009190:	f2 08 09 48 	lsl	r8,r9,r8
80009194:	10 99       	mov	r9,r8
80009196:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000919a:	f1 49 00 5c 	st.w	r8[92],r9
8000919e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800091a6:	30 19       	mov	r9,1
800091a8:	f2 08 09 48 	lsl	r8,r9,r8
800091ac:	10 99       	mov	r9,r8
800091ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800091b2:	f1 49 00 44 	st.w	r8[68],r9
800091b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800091be:	30 19       	mov	r9,1
800091c0:	f2 08 09 48 	lsl	r8,r9,r8
800091c4:	10 99       	mov	r9,r8
800091c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800091ca:	91 19       	st.w	r8[0x4],r9
800091cc:	2f ed       	sub	sp,-8
800091ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800091d2 <_unhandled_interrupt>:
800091d2:	eb cd 40 80 	pushm	r7,lr
800091d6:	1a 97       	mov	r7,sp
800091d8:	c0 08       	rjmp	800091d8 <_unhandled_interrupt+0x6>
800091da:	d7 03       	nop

800091dc <_get_interrupt_handler>:
800091dc:	eb cd 40 80 	pushm	r7,lr
800091e0:	1a 97       	mov	r7,sp
800091e2:	20 3d       	sub	sp,12
800091e4:	ef 4c ff f4 	st.w	r7[-12],r12
800091e8:	fe 78 08 00 	mov	r8,-63488
800091ec:	ee f9 ff f4 	ld.w	r9,r7[-12]
800091f0:	f2 09 11 03 	rsub	r9,r9,3
800091f4:	28 09       	sub	r9,-128
800091f6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800091fa:	ef 48 ff f8 	st.w	r7[-8],r8
800091fe:	fe 78 08 00 	mov	r8,-63488
80009202:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009206:	2c 09       	sub	r9,-64
80009208:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000920c:	ef 48 ff fc 	st.w	r7[-4],r8
80009210:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009214:	58 08       	cp.w	r8,0
80009216:	c1 30       	breq	8000923c <_get_interrupt_handler+0x60>
80009218:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000921c:	48 b8       	lddpc	r8,80009248 <_get_interrupt_handler+0x6c>
8000921e:	a1 79       	lsl	r9,0x1
80009220:	2f f9       	sub	r9,-1
80009222:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80009226:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000922a:	f0 08 12 00 	clz	r8,r8
8000922e:	f0 08 11 1f 	rsub	r8,r8,31
80009232:	a3 68       	lsl	r8,0x2
80009234:	f2 08 00 08 	add	r8,r9,r8
80009238:	70 08       	ld.w	r8,r8[0x0]
8000923a:	c0 28       	rjmp	8000923e <_get_interrupt_handler+0x62>
8000923c:	30 08       	mov	r8,0
8000923e:	10 9c       	mov	r12,r8
80009240:	2f dd       	sub	sp,-12
80009242:	e3 cd 80 80 	ldm	sp++,r7,pc
80009246:	00 00       	add	r0,r0
80009248:	80 00       	ld.sh	r0,r0[0x0]
8000924a:	f3 0c eb cd 	ld.sh	r12,r9[-5171]

8000924c <INTC_init_evba>:
8000924c:	eb cd 40 80 	pushm	r7,lr
80009250:	1a 97       	mov	r7,sp
80009252:	48 38       	lddpc	r8,8000925c <INTC_init_evba+0x10>
80009254:	e3 b8 00 01 	mtsr	0x4,r8
80009258:	e3 cd 80 80 	ldm	sp++,r7,pc
8000925c:	80 00       	ld.sh	r0,r0[0x0]
8000925e:	ec 00       	*unknown*

80009260 <INTC_init_interrupts>:
80009260:	eb cd 40 80 	pushm	r7,lr
80009264:	1a 97       	mov	r7,sp
80009266:	20 2d       	sub	sp,8
80009268:	f0 1f 00 1f 	mcall	800092e4 <INTC_init_interrupts+0x84>
8000926c:	30 08       	mov	r8,0
8000926e:	ef 48 ff f8 	st.w	r7[-8],r8
80009272:	c3 18       	rjmp	800092d4 <INTC_init_interrupts+0x74>
80009274:	30 08       	mov	r8,0
80009276:	ef 48 ff fc 	st.w	r7[-4],r8
8000927a:	c1 48       	rjmp	800092a2 <INTC_init_interrupts+0x42>
8000927c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009280:	49 a8       	lddpc	r8,800092e8 <INTC_init_interrupts+0x88>
80009282:	a1 79       	lsl	r9,0x1
80009284:	2f f9       	sub	r9,-1
80009286:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000928a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000928e:	a3 68       	lsl	r8,0x2
80009290:	f2 08 00 08 	add	r8,r9,r8
80009294:	49 69       	lddpc	r9,800092ec <INTC_init_interrupts+0x8c>
80009296:	91 09       	st.w	r8[0x0],r9
80009298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000929c:	2f f8       	sub	r8,-1
8000929e:	ef 48 ff fc 	st.w	r7[-4],r8
800092a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800092a6:	49 18       	lddpc	r8,800092e8 <INTC_init_interrupts+0x88>
800092a8:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
800092ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800092b0:	10 39       	cp.w	r9,r8
800092b2:	fe 9b ff e5 	brhi	8000927c <INTC_init_interrupts+0x1c>
800092b6:	fe 78 08 00 	mov	r8,-63488
800092ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800092be:	48 db       	lddpc	r11,800092f0 <INTC_init_interrupts+0x90>
800092c0:	48 da       	lddpc	r10,800092f4 <INTC_init_interrupts+0x94>
800092c2:	f6 0a 01 0a 	sub	r10,r11,r10
800092c6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800092ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092ce:	2f f8       	sub	r8,-1
800092d0:	ef 48 ff f8 	st.w	r7[-8],r8
800092d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092d8:	59 d8       	cp.w	r8,29
800092da:	fe 98 ff cd 	brls	80009274 <INTC_init_interrupts+0x14>
800092de:	2f ed       	sub	sp,-8
800092e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800092e4:	80 00       	ld.sh	r0,r0[0x0]
800092e6:	92 4c       	ld.sh	r12,r9[0x8]
800092e8:	80 00       	ld.sh	r0,r0[0x0]
800092ea:	f3 0c 80 00 	ld.sh	r12,r9[-32768]
800092ee:	91 d2       	st.w	r8[0x34],r2
800092f0:	80 00       	ld.sh	r0,r0[0x0]
800092f2:	ed 04 80 00 	ld.sh	r4,r6[-32768]
800092f6:	ec 00       	*unknown*

800092f8 <INTC_register_interrupt>:
800092f8:	eb cd 40 80 	pushm	r7,lr
800092fc:	1a 97       	mov	r7,sp
800092fe:	20 4d       	sub	sp,16
80009300:	ef 4c ff f8 	st.w	r7[-8],r12
80009304:	ef 4b ff f4 	st.w	r7[-12],r11
80009308:	ef 4a ff f0 	st.w	r7[-16],r10
8000930c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009310:	a5 98       	lsr	r8,0x5
80009312:	ef 48 ff fc 	st.w	r7[-4],r8
80009316:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000931a:	4a 78       	lddpc	r8,800093b4 <INTC_register_interrupt+0xbc>
8000931c:	a1 79       	lsl	r9,0x1
8000931e:	2f f9       	sub	r9,-1
80009320:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80009324:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009328:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000932c:	a3 68       	lsl	r8,0x2
8000932e:	f2 08 00 08 	add	r8,r9,r8
80009332:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009336:	91 09       	st.w	r8[0x0],r9
80009338:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000933c:	58 08       	cp.w	r8,0
8000933e:	c0 c1       	brne	80009356 <INTC_register_interrupt+0x5e>
80009340:	fe 78 08 00 	mov	r8,-63488
80009344:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009348:	49 cb       	lddpc	r11,800093b8 <INTC_register_interrupt+0xc0>
8000934a:	49 da       	lddpc	r10,800093bc <INTC_register_interrupt+0xc4>
8000934c:	f6 0a 01 0a 	sub	r10,r11,r10
80009350:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80009354:	c2 d8       	rjmp	800093ae <INTC_register_interrupt+0xb6>
80009356:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000935a:	58 18       	cp.w	r8,1
8000935c:	c0 d1       	brne	80009376 <INTC_register_interrupt+0x7e>
8000935e:	fe 78 08 00 	mov	r8,-63488
80009362:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009366:	49 7b       	lddpc	r11,800093c0 <INTC_register_interrupt+0xc8>
80009368:	49 5a       	lddpc	r10,800093bc <INTC_register_interrupt+0xc4>
8000936a:	f6 0a 01 0a 	sub	r10,r11,r10
8000936e:	bf aa       	sbr	r10,0x1e
80009370:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80009374:	c1 d8       	rjmp	800093ae <INTC_register_interrupt+0xb6>
80009376:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000937a:	58 28       	cp.w	r8,2
8000937c:	c0 d1       	brne	80009396 <INTC_register_interrupt+0x9e>
8000937e:	fe 78 08 00 	mov	r8,-63488
80009382:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009386:	49 0b       	lddpc	r11,800093c4 <INTC_register_interrupt+0xcc>
80009388:	48 da       	lddpc	r10,800093bc <INTC_register_interrupt+0xc4>
8000938a:	f6 0a 01 0a 	sub	r10,r11,r10
8000938e:	bf ba       	sbr	r10,0x1f
80009390:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80009394:	c0 d8       	rjmp	800093ae <INTC_register_interrupt+0xb6>
80009396:	fe 78 08 00 	mov	r8,-63488
8000939a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000939e:	48 bb       	lddpc	r11,800093c8 <INTC_register_interrupt+0xd0>
800093a0:	48 7a       	lddpc	r10,800093bc <INTC_register_interrupt+0xc4>
800093a2:	f6 0a 01 0a 	sub	r10,r11,r10
800093a6:	ea 1a c0 00 	orh	r10,0xc000
800093aa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800093ae:	2f cd       	sub	sp,-16
800093b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800093b4:	80 00       	ld.sh	r0,r0[0x0]
800093b6:	f3 0c 80 00 	ld.sh	r12,r9[-32768]
800093ba:	ed 04 80 00 	ld.sh	r4,r6[-32768]
800093be:	ec 00       	*unknown*
800093c0:	80 00       	ld.sh	r0,r0[0x0]
800093c2:	ed 12 80 00 	ld.uh	r2,r6[-32768]
800093c6:	ed 20 80 00 	ld.sb	r0,r6[-32768]
800093ca:	ed 2e eb cd 	ld.sb	lr,r6[-5171]

800093cc <mci_reset>:
800093cc:	eb cd 40 80 	pushm	r7,lr
800093d0:	1a 97       	mov	r7,sp
800093d2:	20 1d       	sub	sp,4
800093d4:	ef 4c ff fc 	st.w	r7[-4],r12
800093d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093dc:	e0 69 00 80 	mov	r9,128
800093e0:	91 09       	st.w	r8[0x0],r9
800093e2:	2f fd       	sub	sp,-4
800093e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800093e8 <mci_disable>:
800093e8:	eb cd 40 80 	pushm	r7,lr
800093ec:	1a 97       	mov	r7,sp
800093ee:	20 1d       	sub	sp,4
800093f0:	ef 4c ff fc 	st.w	r7[-4],r12
800093f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093f8:	30 a9       	mov	r9,10
800093fa:	91 09       	st.w	r8[0x0],r9
800093fc:	2f fd       	sub	sp,-4
800093fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80009402 <mci_enable>:
80009402:	eb cd 40 80 	pushm	r7,lr
80009406:	1a 97       	mov	r7,sp
80009408:	20 1d       	sub	sp,4
8000940a:	ef 4c ff fc 	st.w	r7[-4],r12
8000940e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009412:	30 59       	mov	r9,5
80009414:	91 09       	st.w	r8[0x0],r9
80009416:	2f fd       	sub	sp,-4
80009418:	e3 cd 80 80 	ldm	sp++,r7,pc

8000941c <mci_set_speed>:
8000941c:	eb cd 40 80 	pushm	r7,lr
80009420:	1a 97       	mov	r7,sp
80009422:	20 7d       	sub	sp,28
80009424:	ef 4c ff ec 	st.w	r7[-20],r12
80009428:	ef 4b ff e8 	st.w	r7[-24],r11
8000942c:	ef 4a ff e4 	st.w	r7[-28],r10
80009430:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009434:	70 18       	ld.w	r8,r8[0x4]
80009436:	ef 48 ff f4 	st.w	r7[-12],r8
8000943a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000943e:	e0 69 78 40 	mov	r9,30784
80009442:	ea 19 01 7d 	orh	r9,0x17d
80009446:	12 38       	cp.w	r8,r9
80009448:	e0 88 00 14 	brls	80009470 <mci_set_speed+0x54>
8000944c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009450:	71 58       	ld.w	r8,r8[0x54]
80009452:	ef 48 ff f0 	st.w	r7[-16],r8
80009456:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000945a:	30 19       	mov	r9,1
8000945c:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80009460:	ef 48 ff f0 	st.w	r7[-16],r8
80009464:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009468:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000946c:	f1 49 00 54 	st.w	r8[84],r9
80009470:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009474:	58 08       	cp.w	r8,0
80009476:	c2 90       	breq	800094c8 <mci_set_speed+0xac>
80009478:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000947c:	f0 09 15 01 	lsl	r9,r8,0x1
80009480:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009484:	f0 09 0d 08 	divu	r8,r8,r9
80009488:	ef 48 ff f8 	st.w	r7[-8],r8
8000948c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009490:	f0 09 15 01 	lsl	r9,r8,0x1
80009494:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009498:	f0 09 0d 08 	divu	r8,r8,r9
8000949c:	12 98       	mov	r8,r9
8000949e:	ef 48 ff fc 	st.w	r7[-4],r8
800094a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800094a6:	58 08       	cp.w	r8,0
800094a8:	c0 60       	breq	800094b4 <mci_set_speed+0x98>
800094aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800094ae:	2f f8       	sub	r8,-1
800094b0:	ef 48 ff f8 	st.w	r7[-8],r8
800094b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800094b8:	58 08       	cp.w	r8,0
800094ba:	c0 b0       	breq	800094d0 <mci_set_speed+0xb4>
800094bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800094c0:	20 18       	sub	r8,1
800094c2:	ef 48 ff f8 	st.w	r7[-8],r8
800094c6:	c0 68       	rjmp	800094d2 <mci_set_speed+0xb6>
800094c8:	30 08       	mov	r8,0
800094ca:	ef 48 ff f8 	st.w	r7[-8],r8
800094ce:	c0 28       	rjmp	800094d2 <mci_set_speed+0xb6>
800094d0:	d7 03       	nop
800094d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800094d6:	e0 18 ff 00 	andl	r8,0xff00
800094da:	ef 48 ff f4 	st.w	r7[-12],r8
800094de:	ee f9 ff f4 	ld.w	r9,r7[-12]
800094e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800094e6:	f3 e8 10 08 	or	r8,r9,r8
800094ea:	ef 48 ff f4 	st.w	r7[-12],r8
800094ee:	ee f8 ff ec 	ld.w	r8,r7[-20]
800094f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800094f6:	91 19       	st.w	r8[0x4],r9
800094f8:	2f 9d       	sub	sp,-28
800094fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800094fe:	d7 03       	nop

80009500 <mci_init>:
80009500:	eb cd 40 80 	pushm	r7,lr
80009504:	1a 97       	mov	r7,sp
80009506:	20 3d       	sub	sp,12
80009508:	ef 4c ff fc 	st.w	r7[-4],r12
8000950c:	16 98       	mov	r8,r11
8000950e:	ef 4a ff f4 	st.w	r7[-12],r10
80009512:	ef 68 ff f8 	st.b	r7[-8],r8
80009516:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000951a:	30 18       	mov	r8,1
8000951c:	f0 09 18 00 	cp.b	r9,r8
80009520:	e0 88 00 04 	brls	80009528 <mci_init+0x28>
80009524:	30 18       	mov	r8,1
80009526:	c3 98       	rjmp	80009598 <mci_init+0x98>
80009528:	49 e8       	lddpc	r8,800095a0 <mci_init+0xa0>
8000952a:	30 09       	mov	r9,0
8000952c:	91 09       	st.w	r8[0x0],r9
8000952e:	ee fc ff fc 	ld.w	r12,r7[-4]
80009532:	f0 1f 00 1d 	mcall	800095a4 <mci_init+0xa4>
80009536:	ee fc ff fc 	ld.w	r12,r7[-4]
8000953a:	f0 1f 00 1c 	mcall	800095a8 <mci_init+0xa8>
8000953e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009542:	3f f9       	mov	r9,-1
80009544:	f1 49 00 48 	st.w	r8[72],r9
80009548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000954c:	30 09       	mov	r9,0
8000954e:	f1 49 00 54 	st.w	r8[84],r9
80009552:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009556:	30 09       	mov	r9,0
80009558:	91 19       	st.w	r8[0x4],r9
8000955a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000955e:	37 29       	mov	r9,114
80009560:	91 29       	st.w	r8[0x8],r9
80009562:	e2 7a 0d 40 	mov	r10,200000
80009566:	ee fb ff f4 	ld.w	r11,r7[-12]
8000956a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000956e:	f0 1f 00 10 	mcall	800095ac <mci_init+0xac>
80009572:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009576:	70 18       	ld.w	r8,r8[0x4]
80009578:	10 99       	mov	r9,r8
8000957a:	e8 19 1f 00 	orl	r9,0x1f00
8000957e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009582:	91 19       	st.w	r8[0x4],r9
80009584:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009588:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000958c:	91 39       	st.w	r8[0xc],r9
8000958e:	ee fc ff fc 	ld.w	r12,r7[-4]
80009592:	f0 1f 00 08 	mcall	800095b0 <mci_init+0xb0>
80009596:	30 08       	mov	r8,0
80009598:	10 9c       	mov	r12,r8
8000959a:	2f dd       	sub	sp,-12
8000959c:	e3 cd 80 80 	ldm	sp++,r7,pc
800095a0:	00 00       	add	r0,r0
800095a2:	08 50       	eor	r0,r4
800095a4:	80 00       	ld.sh	r0,r0[0x0]
800095a6:	93 cc       	st.w	r9[0x30],r12
800095a8:	80 00       	ld.sh	r0,r0[0x0]
800095aa:	93 e8       	st.w	r9[0x38],r8
800095ac:	80 00       	ld.sh	r0,r0[0x0]
800095ae:	94 1c       	ld.sh	r12,r10[0x2]
800095b0:	80 00       	ld.sh	r0,r0[0x0]
800095b2:	94 02       	ld.sh	r2,r10[0x0]

800095b4 <mci_set_block_size>:
800095b4:	eb cd 40 80 	pushm	r7,lr
800095b8:	1a 97       	mov	r7,sp
800095ba:	20 3d       	sub	sp,12
800095bc:	ef 4c ff f8 	st.w	r7[-8],r12
800095c0:	16 98       	mov	r8,r11
800095c2:	ef 58 ff f4 	st.h	r7[-12],r8
800095c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095ca:	70 18       	ld.w	r8,r8[0x4]
800095cc:	ef 48 ff fc 	st.w	r7[-4],r8
800095d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800095d4:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800095d8:	ef 48 ff fc 	st.w	r7[-4],r8
800095dc:	ef 18 ff f4 	ld.uh	r8,r7[-12]
800095e0:	b1 68       	lsl	r8,0x10
800095e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800095e6:	f3 e8 10 08 	or	r8,r9,r8
800095ea:	ef 48 ff fc 	st.w	r7[-4],r8
800095ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800095f6:	91 19       	st.w	r8[0x4],r9
800095f8:	2f dd       	sub	sp,-12
800095fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800095fe <mci_set_block_count>:
800095fe:	eb cd 40 80 	pushm	r7,lr
80009602:	1a 97       	mov	r7,sp
80009604:	20 3d       	sub	sp,12
80009606:	ef 4c ff f8 	st.w	r7[-8],r12
8000960a:	16 98       	mov	r8,r11
8000960c:	ef 58 ff f4 	st.h	r7[-12],r8
80009610:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009614:	70 68       	ld.w	r8,r8[0x18]
80009616:	ef 48 ff fc 	st.w	r7[-4],r8
8000961a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000961e:	ef 58 ff fe 	st.h	r7[-2],r8
80009622:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009626:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000962a:	91 69       	st.w	r8[0x18],r9
8000962c:	2f dd       	sub	sp,-12
8000962e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009632:	d7 03       	nop

80009634 <mci_send_cmd>:
80009634:	eb cd 40 80 	pushm	r7,lr
80009638:	1a 97       	mov	r7,sp
8000963a:	20 7d       	sub	sp,28
8000963c:	ef 4c ff ec 	st.w	r7[-20],r12
80009640:	ef 4b ff e8 	st.w	r7[-24],r11
80009644:	ef 4a ff e4 	st.w	r7[-28],r10
80009648:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000964c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80009650:	91 49       	st.w	r8[0x10],r9
80009652:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009656:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000965a:	91 59       	st.w	r8[0x14],r9
8000965c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009660:	ef 48 ff f4 	st.w	r7[-12],r8
80009664:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009668:	ef 48 ff f8 	st.w	r7[-8],r8
8000966c:	4a 78       	lddpc	r8,80009708 <mci_send_cmd+0xd4>
8000966e:	70 08       	ld.w	r8,r8[0x0]
80009670:	10 99       	mov	r9,r8
80009672:	e6 19 01 e0 	andh	r9,0x1e0,COH
80009676:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000967a:	71 08       	ld.w	r8,r8[0x40]
8000967c:	f3 e8 10 08 	or	r8,r9,r8
80009680:	10 99       	mov	r9,r8
80009682:	4a 28       	lddpc	r8,80009708 <mci_send_cmd+0xd4>
80009684:	91 09       	st.w	r8[0x0],r9
80009686:	4a 18       	lddpc	r8,80009708 <mci_send_cmd+0xd4>
80009688:	70 08       	ld.w	r8,r8[0x0]
8000968a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000968e:	ce 70       	breq	8000965c <mci_send_cmd+0x28>
80009690:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009694:	ef 48 ff fc 	st.w	r7[-4],r8
80009698:	49 c8       	lddpc	r8,80009708 <mci_send_cmd+0xd4>
8000969a:	70 08       	ld.w	r8,r8[0x0]
8000969c:	10 99       	mov	r9,r8
8000969e:	e6 19 01 e0 	andh	r9,0x1e0,COH
800096a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800096a6:	71 08       	ld.w	r8,r8[0x40]
800096a8:	f3 e8 10 08 	or	r8,r9,r8
800096ac:	10 99       	mov	r9,r8
800096ae:	49 78       	lddpc	r8,80009708 <mci_send_cmd+0xd4>
800096b0:	91 09       	st.w	r8[0x0],r9
800096b2:	49 68       	lddpc	r8,80009708 <mci_send_cmd+0xd4>
800096b4:	70 08       	ld.w	r8,r8[0x0]
800096b6:	e6 18 c0 7f 	andh	r8,0xc07f,COH
800096ba:	ef 48 ff f0 	st.w	r7[-16],r8
800096be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096c2:	58 08       	cp.w	r8,0
800096c4:	c1 d0       	breq	800096fe <mci_send_cmd+0xca>
800096c6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800096ca:	e0 48 00 69 	cp.w	r8,105
800096ce:	c0 f0       	breq	800096ec <mci_send_cmd+0xb8>
800096d0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800096d4:	e0 48 08 41 	cp.w	r8,2113
800096d8:	c0 a0       	breq	800096ec <mci_send_cmd+0xb8>
800096da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096de:	fc 19 00 10 	movh	r9,0x10
800096e2:	12 38       	cp.w	r8,r9
800096e4:	c0 c0       	breq	800096fc <mci_send_cmd+0xc8>
800096e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096ea:	c0 b8       	rjmp	80009700 <mci_send_cmd+0xcc>
800096ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096f0:	e4 48 00 00 	cp.w	r8,262144
800096f4:	c0 50       	breq	800096fe <mci_send_cmd+0xca>
800096f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096fa:	c0 38       	rjmp	80009700 <mci_send_cmd+0xcc>
800096fc:	d7 03       	nop
800096fe:	30 08       	mov	r8,0
80009700:	10 9c       	mov	r12,r8
80009702:	2f 9d       	sub	sp,-28
80009704:	e3 cd 80 80 	ldm	sp++,r7,pc
80009708:	00 00       	add	r0,r0
8000970a:	08 50       	eor	r0,r4

8000970c <mci_set_bus_size>:
8000970c:	eb cd 40 80 	pushm	r7,lr
80009710:	1a 97       	mov	r7,sp
80009712:	20 3d       	sub	sp,12
80009714:	ef 4c ff f8 	st.w	r7[-8],r12
80009718:	16 98       	mov	r8,r11
8000971a:	ef 68 ff f4 	st.b	r7[-12],r8
8000971e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009722:	30 38       	mov	r8,3
80009724:	f0 09 18 00 	cp.b	r9,r8
80009728:	e0 88 00 04 	brls	80009730 <mci_set_bus_size+0x24>
8000972c:	30 18       	mov	r8,1
8000972e:	c1 b8       	rjmp	80009764 <mci_set_bus_size+0x58>
80009730:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009734:	70 38       	ld.w	r8,r8[0xc]
80009736:	ef 48 ff fc 	st.w	r7[-4],r8
8000973a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000973e:	e0 18 ff 3f 	andl	r8,0xff3f
80009742:	ef 48 ff fc 	st.w	r7[-4],r8
80009746:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000974a:	a7 68       	lsl	r8,0x6
8000974c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009750:	f3 e8 10 08 	or	r8,r9,r8
80009754:	ef 48 ff fc 	st.w	r7[-4],r8
80009758:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000975c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009760:	91 39       	st.w	r8[0xc],r9
80009762:	30 08       	mov	r8,0
80009764:	10 9c       	mov	r12,r8
80009766:	2f dd       	sub	sp,-12
80009768:	e3 cd 80 80 	ldm	sp++,r7,pc

8000976c <mci_read_response>:
8000976c:	eb cd 40 80 	pushm	r7,lr
80009770:	1a 97       	mov	r7,sp
80009772:	20 1d       	sub	sp,4
80009774:	ef 4c ff fc 	st.w	r7[-4],r12
80009778:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000977c:	70 88       	ld.w	r8,r8[0x20]
8000977e:	10 9c       	mov	r12,r8
80009780:	2f fd       	sub	sp,-4
80009782:	e3 cd 80 80 	ldm	sp++,r7,pc
80009786:	d7 03       	nop

80009788 <mci_wait_busy_signal>:
80009788:	eb cd 40 80 	pushm	r7,lr
8000978c:	1a 97       	mov	r7,sp
8000978e:	20 2d       	sub	sp,8
80009790:	ef 4c ff f8 	st.w	r7[-8],r12
80009794:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009798:	ef 48 ff fc 	st.w	r7[-4],r8
8000979c:	48 b8       	lddpc	r8,800097c8 <mci_wait_busy_signal+0x40>
8000979e:	70 08       	ld.w	r8,r8[0x0]
800097a0:	10 99       	mov	r9,r8
800097a2:	e6 19 01 e0 	andh	r9,0x1e0,COH
800097a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800097aa:	71 08       	ld.w	r8,r8[0x40]
800097ac:	f3 e8 10 08 	or	r8,r9,r8
800097b0:	10 99       	mov	r9,r8
800097b2:	48 68       	lddpc	r8,800097c8 <mci_wait_busy_signal+0x40>
800097b4:	91 09       	st.w	r8[0x0],r9
800097b6:	48 58       	lddpc	r8,800097c8 <mci_wait_busy_signal+0x40>
800097b8:	70 08       	ld.w	r8,r8[0x0]
800097ba:	e2 18 00 20 	andl	r8,0x20,COH
800097be:	ce b0       	breq	80009794 <mci_wait_busy_signal+0xc>
800097c0:	2f ed       	sub	sp,-8
800097c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800097c6:	00 00       	add	r0,r0
800097c8:	00 00       	add	r0,r0
800097ca:	08 50       	eor	r0,r4

800097cc <mci_select_card>:
800097cc:	eb cd 40 80 	pushm	r7,lr
800097d0:	1a 97       	mov	r7,sp
800097d2:	20 3d       	sub	sp,12
800097d4:	ef 4c ff fc 	st.w	r7[-4],r12
800097d8:	16 99       	mov	r9,r11
800097da:	14 98       	mov	r8,r10
800097dc:	ef 69 ff f8 	st.b	r7[-8],r9
800097e0:	ef 68 ff f4 	st.b	r7[-12],r8
800097e4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800097e8:	30 18       	mov	r8,1
800097ea:	f0 09 18 00 	cp.b	r9,r8
800097ee:	e0 88 00 04 	brls	800097f6 <mci_select_card+0x2a>
800097f2:	30 18       	mov	r8,1
800097f4:	c0 e8       	rjmp	80009810 <mci_select_card+0x44>
800097f6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800097fa:	f0 09 15 06 	lsl	r9,r8,0x6
800097fe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009802:	f3 e8 10 08 	or	r8,r9,r8
80009806:	10 99       	mov	r9,r8
80009808:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000980c:	91 39       	st.w	r8[0xc],r9
8000980e:	30 08       	mov	r8,0
80009810:	10 9c       	mov	r12,r8
80009812:	2f dd       	sub	sp,-12
80009814:	e3 cd 80 80 	ldm	sp++,r7,pc

80009818 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80009818:	eb cd 40 80 	pushm	r7,lr
8000981c:	1a 97       	mov	r7,sp
8000981e:	20 1d       	sub	sp,4
80009820:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80009824:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009828:	e6 18 00 01 	andh	r8,0x1,COH
8000982c:	5f 08       	sreq	r8
8000982e:	5c 58       	castu.b	r8
}
80009830:	10 9c       	mov	r12,r8
80009832:	2f fd       	sub	sp,-4
80009834:	e3 cd 80 80 	ldm	sp++,r7,pc

80009838 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80009838:	eb cd 40 80 	pushm	r7,lr
8000983c:	1a 97       	mov	r7,sp
8000983e:	20 4d       	sub	sp,16
80009840:	ef 4c ff f8 	st.w	r7[-8],r12
80009844:	ef 4b ff f4 	st.w	r7[-12],r11
80009848:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000984c:	e1 b8 00 00 	mfsr	r8,0x0
80009850:	10 9c       	mov	r12,r8
80009852:	f0 1f 00 73 	mcall	80009a1c <tc_configure_interrupts+0x1e4>
80009856:	18 98       	mov	r8,r12
80009858:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000985c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009860:	58 28       	cp.w	r8,2
80009862:	e0 88 00 04 	brls	8000986a <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
80009866:	3f f8       	mov	r8,-1
80009868:	cd 68       	rjmp	80009a14 <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
8000986a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000986e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009872:	70 08       	ld.w	r8,r8[0x0]
80009874:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80009878:	5c 58       	castu.b	r8
8000987a:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
8000987e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009882:	70 08       	ld.w	r8,r8[0x0]
80009884:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80009888:	5c 58       	castu.b	r8
8000988a:	a7 68       	lsl	r8,0x6
8000988c:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
8000988e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009892:	70 08       	ld.w	r8,r8[0x0]
80009894:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80009898:	5c 58       	castu.b	r8
8000989a:	a5 78       	lsl	r8,0x5
8000989c:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
8000989e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800098a2:	70 08       	ld.w	r8,r8[0x0]
800098a4:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
800098a8:	5c 58       	castu.b	r8
800098aa:	a5 68       	lsl	r8,0x4
800098ac:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
800098ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800098b2:	70 08       	ld.w	r8,r8[0x0]
800098b4:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800098b8:	5c 58       	castu.b	r8
800098ba:	a3 78       	lsl	r8,0x3
800098bc:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
800098be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800098c2:	70 08       	ld.w	r8,r8[0x0]
800098c4:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800098c8:	5c 58       	castu.b	r8
800098ca:	a3 68       	lsl	r8,0x2
800098cc:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
800098ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800098d2:	70 08       	ld.w	r8,r8[0x0]
800098d4:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800098d8:	5c 58       	castu.b	r8
800098da:	a1 78       	lsl	r8,0x1
800098dc:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
800098de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800098e2:	70 08       	ld.w	r8,r8[0x0]
800098e4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800098e8:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
800098ea:	f3 e8 10 08 	or	r8,r9,r8
800098ee:	10 99       	mov	r9,r8
800098f0:	ee fa ff f8 	ld.w	r10,r7[-8]
800098f4:	f6 08 15 06 	lsl	r8,r11,0x6
800098f8:	f4 08 00 08 	add	r8,r10,r8
800098fc:	2d c8       	sub	r8,-36
800098fe:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80009900:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009904:	30 08       	mov	r8,0
80009906:	f0 09 18 00 	cp.b	r9,r8
8000990a:	c0 20       	breq	8000990e <tc_configure_interrupts+0xd6>
8000990c:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000990e:	ee fb ff f4 	ld.w	r11,r7[-12]
80009912:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009916:	70 08       	ld.w	r8,r8[0x0]
80009918:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
8000991c:	5c 58       	castu.b	r8
8000991e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009922:	c0 41       	brne	8000992a <tc_configure_interrupts+0xf2>
80009924:	e0 69 00 80 	mov	r9,128
80009928:	c0 28       	rjmp	8000992c <tc_configure_interrupts+0xf4>
8000992a:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
8000992c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009930:	70 08       	ld.w	r8,r8[0x0]
80009932:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80009936:	5c 58       	castu.b	r8
80009938:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000993c:	c0 31       	brne	80009942 <tc_configure_interrupts+0x10a>
8000993e:	34 08       	mov	r8,64
80009940:	c0 28       	rjmp	80009944 <tc_configure_interrupts+0x10c>
80009942:	30 08       	mov	r8,0
80009944:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80009946:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000994a:	70 08       	ld.w	r8,r8[0x0]
8000994c:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80009950:	5c 58       	castu.b	r8
80009952:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009956:	c0 31       	brne	8000995c <tc_configure_interrupts+0x124>
80009958:	32 08       	mov	r8,32
8000995a:	c0 28       	rjmp	8000995e <tc_configure_interrupts+0x126>
8000995c:	30 08       	mov	r8,0
8000995e:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80009960:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009964:	70 08       	ld.w	r8,r8[0x0]
80009966:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
8000996a:	5c 58       	castu.b	r8
8000996c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009970:	c0 31       	brne	80009976 <tc_configure_interrupts+0x13e>
80009972:	31 08       	mov	r8,16
80009974:	c0 28       	rjmp	80009978 <tc_configure_interrupts+0x140>
80009976:	30 08       	mov	r8,0
80009978:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
8000997a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000997e:	70 08       	ld.w	r8,r8[0x0]
80009980:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80009984:	5c 58       	castu.b	r8
80009986:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000998a:	c0 31       	brne	80009990 <tc_configure_interrupts+0x158>
8000998c:	30 88       	mov	r8,8
8000998e:	c0 28       	rjmp	80009992 <tc_configure_interrupts+0x15a>
80009990:	30 08       	mov	r8,0
80009992:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80009994:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009998:	70 08       	ld.w	r8,r8[0x0]
8000999a:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
8000999e:	5c 58       	castu.b	r8
800099a0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800099a4:	c0 31       	brne	800099aa <tc_configure_interrupts+0x172>
800099a6:	30 48       	mov	r8,4
800099a8:	c0 28       	rjmp	800099ac <tc_configure_interrupts+0x174>
800099aa:	30 08       	mov	r8,0
800099ac:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
800099ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800099b2:	70 08       	ld.w	r8,r8[0x0]
800099b4:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800099b8:	5c 58       	castu.b	r8
800099ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800099be:	c0 31       	brne	800099c4 <tc_configure_interrupts+0x18c>
800099c0:	30 28       	mov	r8,2
800099c2:	c0 28       	rjmp	800099c6 <tc_configure_interrupts+0x18e>
800099c4:	30 08       	mov	r8,0
800099c6:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
800099c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800099cc:	70 08       	ld.w	r8,r8[0x0]
800099ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800099d2:	5c 58       	castu.b	r8
800099d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800099d8:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800099da:	f3 e8 10 08 	or	r8,r9,r8
800099de:	10 99       	mov	r9,r8
800099e0:	ee fa ff f8 	ld.w	r10,r7[-8]
800099e4:	f6 08 15 06 	lsl	r8,r11,0x6
800099e8:	f4 08 00 08 	add	r8,r10,r8
800099ec:	2d 88       	sub	r8,-40
800099ee:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800099f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800099f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800099f8:	a1 78       	lsl	r8,0x1
800099fa:	2f f8       	sub	r8,-1
800099fc:	a5 78       	lsl	r8,0x5
800099fe:	f2 08 00 08 	add	r8,r9,r8
80009a02:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80009a04:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009a08:	30 08       	mov	r8,0
80009a0a:	f0 09 18 00 	cp.b	r9,r8
80009a0e:	c0 20       	breq	80009a12 <tc_configure_interrupts+0x1da>
80009a10:	d5 03       	csrf	0x10

  return 0;
80009a12:	30 08       	mov	r8,0
}
80009a14:	10 9c       	mov	r12,r8
80009a16:	2f cd       	sub	sp,-16
80009a18:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a1c:	80 00       	ld.sh	r0,r0[0x0]
80009a1e:	98 18       	ld.sh	r8,r12[0x2]

80009a20 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80009a20:	eb cd 40 80 	pushm	r7,lr
80009a24:	1a 97       	mov	r7,sp
80009a26:	20 2d       	sub	sp,8
80009a28:	ef 4c ff fc 	st.w	r7[-4],r12
80009a2c:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80009a30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a34:	70 08       	ld.w	r8,r8[0x0]
80009a36:	58 28       	cp.w	r8,2
80009a38:	e0 88 00 04 	brls	80009a40 <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
80009a3c:	3f f8       	mov	r8,-1
80009a3e:	c9 78       	rjmp	80009b6c <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80009a40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a44:	70 09       	ld.w	r9,r8[0x0]
80009a46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a4a:	70 18       	ld.w	r8,r8[0x4]
80009a4c:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
80009a50:	5c 58       	castu.b	r8
80009a52:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
80009a56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a5a:	70 18       	ld.w	r8,r8[0x4]
80009a5c:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
80009a60:	5c 58       	castu.b	r8
80009a62:	bd 68       	lsl	r8,0x1c
80009a64:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
80009a66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a6a:	70 18       	ld.w	r8,r8[0x4]
80009a6c:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
80009a70:	5c 58       	castu.b	r8
80009a72:	bb 68       	lsl	r8,0x1a
80009a74:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
80009a76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a7a:	70 18       	ld.w	r8,r8[0x4]
80009a7c:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
80009a80:	5c 58       	castu.b	r8
80009a82:	b9 68       	lsl	r8,0x18
80009a84:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
80009a86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a8a:	70 18       	ld.w	r8,r8[0x4]
80009a8c:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
80009a90:	5c 58       	castu.b	r8
80009a92:	b7 68       	lsl	r8,0x16
80009a94:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
80009a96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a9a:	70 18       	ld.w	r8,r8[0x4]
80009a9c:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
80009aa0:	5c 58       	castu.b	r8
80009aa2:	b5 68       	lsl	r8,0x14
80009aa4:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
80009aa6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009aaa:	70 18       	ld.w	r8,r8[0x4]
80009aac:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
80009ab0:	5c 58       	castu.b	r8
80009ab2:	b3 68       	lsl	r8,0x12
80009ab4:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
80009ab6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009aba:	70 18       	ld.w	r8,r8[0x4]
80009abc:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80009ac0:	5c 58       	castu.b	r8
80009ac2:	b1 68       	lsl	r8,0x10
80009ac4:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
80009ac8:	10 9a       	mov	r10,r8
80009aca:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
80009acc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009ad0:	70 18       	ld.w	r8,r8[0x4]
80009ad2:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
80009ad6:	5c 58       	castu.b	r8
80009ad8:	ad 78       	lsl	r8,0xd
80009ada:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
80009adc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009ae0:	70 18       	ld.w	r8,r8[0x4]
80009ae2:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
80009ae6:	5c 58       	castu.b	r8
80009ae8:	ad 68       	lsl	r8,0xc
80009aea:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
80009aec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009af0:	70 18       	ld.w	r8,r8[0x4]
80009af2:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
80009af6:	5c 58       	castu.b	r8
80009af8:	ab 68       	lsl	r8,0xa
80009afa:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
80009afc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b00:	70 18       	ld.w	r8,r8[0x4]
80009b02:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
80009b06:	5c 58       	castu.b	r8
80009b08:	a9 68       	lsl	r8,0x8
80009b0a:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
80009b0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b10:	70 18       	ld.w	r8,r8[0x4]
80009b12:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80009b16:	5c 58       	castu.b	r8
80009b18:	a7 78       	lsl	r8,0x7
80009b1a:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
80009b1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b20:	70 18       	ld.w	r8,r8[0x4]
80009b22:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80009b26:	5c 58       	castu.b	r8
80009b28:	a7 68       	lsl	r8,0x6
80009b2a:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
80009b2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b30:	70 18       	ld.w	r8,r8[0x4]
80009b32:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
80009b36:	5c 58       	castu.b	r8
80009b38:	a5 68       	lsl	r8,0x4
80009b3a:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
80009b3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b40:	70 18       	ld.w	r8,r8[0x4]
80009b42:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80009b46:	5c 58       	castu.b	r8
80009b48:	a3 78       	lsl	r8,0x3
80009b4a:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
80009b4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b50:	70 18       	ld.w	r8,r8[0x4]
80009b52:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80009b56:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80009b58:	f5 e8 10 08 	or	r8,r10,r8
80009b5c:	10 9a       	mov	r10,r8
80009b5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009b62:	a5 69       	lsl	r9,0x4
80009b64:	2f f9       	sub	r9,-1
80009b66:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
80009b6a:	30 08       	mov	r8,0
}
80009b6c:	10 9c       	mov	r12,r8
80009b6e:	2f ed       	sub	sp,-8
80009b70:	e3 cd 80 80 	ldm	sp++,r7,pc

80009b74 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80009b74:	eb cd 40 80 	pushm	r7,lr
80009b78:	1a 97       	mov	r7,sp
80009b7a:	20 2d       	sub	sp,8
80009b7c:	ef 4c ff fc 	st.w	r7[-4],r12
80009b80:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80009b84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b88:	58 28       	cp.w	r8,2
80009b8a:	e0 88 00 04 	brls	80009b92 <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
80009b8e:	3f f8       	mov	r8,-1
80009b90:	c0 b8       	rjmp	80009ba6 <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80009b92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b96:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009b9a:	a7 68       	lsl	r8,0x6
80009b9c:	f2 08 00 08 	add	r8,r9,r8
80009ba0:	30 59       	mov	r9,5
80009ba2:	91 09       	st.w	r8[0x0],r9

  return 0;
80009ba4:	30 08       	mov	r8,0
}
80009ba6:	10 9c       	mov	r12,r8
80009ba8:	2f ed       	sub	sp,-8
80009baa:	e3 cd 80 80 	ldm	sp++,r7,pc

80009bae <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
80009bae:	eb cd 40 80 	pushm	r7,lr
80009bb2:	1a 97       	mov	r7,sp
80009bb4:	20 2d       	sub	sp,8
80009bb6:	ef 4c ff fc 	st.w	r7[-4],r12
80009bba:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80009bbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009bc2:	58 28       	cp.w	r8,2
80009bc4:	e0 88 00 04 	brls	80009bcc <tc_read_sr+0x1e>
    return TC_INVALID_ARGUMENT;
80009bc8:	3f f8       	mov	r8,-1
80009bca:	c0 b8       	rjmp	80009be0 <tc_read_sr+0x32>

  return tc->channel[channel].sr;
80009bcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009bd0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009bd4:	a1 78       	lsl	r8,0x1
80009bd6:	2f f8       	sub	r8,-1
80009bd8:	a5 78       	lsl	r8,0x5
80009bda:	f2 08 00 08 	add	r8,r9,r8
80009bde:	70 08       	ld.w	r8,r8[0x0]
}
80009be0:	10 9c       	mov	r12,r8
80009be2:	2f ed       	sub	sp,-8
80009be4:	e3 cd 80 80 	ldm	sp++,r7,pc

80009be8 <tc_write_rc>:
  return value;
}


uint16_t tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, uint16_t value)
{
80009be8:	eb cd 40 80 	pushm	r7,lr
80009bec:	1a 97       	mov	r7,sp
80009bee:	20 3d       	sub	sp,12
80009bf0:	ef 4c ff fc 	st.w	r7[-4],r12
80009bf4:	ef 4b ff f8 	st.w	r7[-8],r11
80009bf8:	14 98       	mov	r8,r10
80009bfa:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80009bfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009c02:	58 28       	cp.w	r8,2
80009c04:	e0 88 00 04 	brls	80009c0c <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
80009c08:	3f f8       	mov	r8,-1
80009c0a:	c2 78       	rjmp	80009c58 <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80009c0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009c10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009c14:	a5 69       	lsl	r9,0x4
80009c16:	2f f9       	sub	r9,-1
80009c18:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80009c1c:	e2 18 80 00 	andl	r8,0x8000,COH
80009c20:	c1 a0       	breq	80009c54 <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80009c22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009c26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009c2a:	ee fa ff fc 	ld.w	r10,r7[-4]
80009c2e:	a7 69       	lsl	r9,0x6
80009c30:	f4 09 00 09 	add	r9,r10,r9
80009c34:	2e 49       	sub	r9,-28
80009c36:	72 09       	ld.w	r9,r9[0x0]
80009c38:	12 9a       	mov	r10,r9
80009c3a:	e0 1a 00 00 	andl	r10,0x0
80009c3e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80009c42:	f5 e9 10 09 	or	r9,r10,r9
80009c46:	ee fa ff fc 	ld.w	r10,r7[-4]
80009c4a:	a7 68       	lsl	r8,0x6
80009c4c:	f4 08 00 08 	add	r8,r10,r8
80009c50:	2e 48       	sub	r8,-28
80009c52:	91 09       	st.w	r8[0x0],r9

  return value;
80009c54:	ef 08 ff f4 	ld.sh	r8,r7[-12]
}
80009c58:	10 9c       	mov	r12,r8
80009c5a:	2f dd       	sub	sp,-12
80009c5c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009c60 <cpu_irq_save>:
80009c60:	eb cd 40 80 	pushm	r7,lr
80009c64:	1a 97       	mov	r7,sp
80009c66:	20 1d       	sub	sp,4
80009c68:	e1 b8 00 00 	mfsr	r8,0x0
80009c6c:	ef 48 ff fc 	st.w	r7[-4],r8
80009c70:	d3 03       	ssrf	0x10
80009c72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009c76:	10 9c       	mov	r12,r8
80009c78:	2f fd       	sub	sp,-4
80009c7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80009c7e <cpu_irq_restore>:
80009c7e:	eb cd 40 80 	pushm	r7,lr
80009c82:	1a 97       	mov	r7,sp
80009c84:	20 1d       	sub	sp,4
80009c86:	ef 4c ff fc 	st.w	r7[-4],r12
80009c8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009c8e:	e3 b8 00 00 	mtsr	0x0,r8
80009c92:	2f fd       	sub	sp,-4
80009c94:	e3 cd 80 80 	ldm	sp++,r7,pc

80009c98 <sleepmgr_lock_mode>:
80009c98:	eb cd 40 80 	pushm	r7,lr
80009c9c:	1a 97       	mov	r7,sp
80009c9e:	20 2d       	sub	sp,8
80009ca0:	ef 4c ff f8 	st.w	r7[-8],r12
80009ca4:	f0 1f 00 0b 	mcall	80009cd0 <sleepmgr_lock_mode+0x38>
80009ca8:	18 98       	mov	r8,r12
80009caa:	ef 48 ff fc 	st.w	r7[-4],r8
80009cae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009cb2:	48 99       	lddpc	r9,80009cd4 <sleepmgr_lock_mode+0x3c>
80009cb4:	f2 08 07 09 	ld.ub	r9,r9[r8]
80009cb8:	2f f9       	sub	r9,-1
80009cba:	5c 59       	castu.b	r9
80009cbc:	48 6a       	lddpc	r10,80009cd4 <sleepmgr_lock_mode+0x3c>
80009cbe:	f4 08 0b 09 	st.b	r10[r8],r9
80009cc2:	ee fc ff fc 	ld.w	r12,r7[-4]
80009cc6:	f0 1f 00 05 	mcall	80009cd8 <sleepmgr_lock_mode+0x40>
80009cca:	2f ed       	sub	sp,-8
80009ccc:	e3 cd 80 80 	ldm	sp++,r7,pc
80009cd0:	80 00       	ld.sh	r0,r0[0x0]
80009cd2:	9c 60       	ld.sh	r0,lr[0xc]
80009cd4:	00 00       	add	r0,r0
80009cd6:	0d fc       	ld.ub	r12,r6[0x7]
80009cd8:	80 00       	ld.sh	r0,r0[0x0]
80009cda:	9c 7e       	ld.sh	lr,lr[0xe]

80009cdc <sleepmgr_unlock_mode>:
80009cdc:	eb cd 40 80 	pushm	r7,lr
80009ce0:	1a 97       	mov	r7,sp
80009ce2:	20 2d       	sub	sp,8
80009ce4:	ef 4c ff f8 	st.w	r7[-8],r12
80009ce8:	f0 1f 00 0b 	mcall	80009d14 <sleepmgr_unlock_mode+0x38>
80009cec:	18 98       	mov	r8,r12
80009cee:	ef 48 ff fc 	st.w	r7[-4],r8
80009cf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009cf6:	48 99       	lddpc	r9,80009d18 <sleepmgr_unlock_mode+0x3c>
80009cf8:	f2 08 07 09 	ld.ub	r9,r9[r8]
80009cfc:	20 19       	sub	r9,1
80009cfe:	5c 59       	castu.b	r9
80009d00:	48 6a       	lddpc	r10,80009d18 <sleepmgr_unlock_mode+0x3c>
80009d02:	f4 08 0b 09 	st.b	r10[r8],r9
80009d06:	ee fc ff fc 	ld.w	r12,r7[-4]
80009d0a:	f0 1f 00 05 	mcall	80009d1c <sleepmgr_unlock_mode+0x40>
80009d0e:	2f ed       	sub	sp,-8
80009d10:	e3 cd 80 80 	ldm	sp++,r7,pc
80009d14:	80 00       	ld.sh	r0,r0[0x0]
80009d16:	9c 60       	ld.sh	r0,lr[0xc]
80009d18:	00 00       	add	r0,r0
80009d1a:	0d fc       	ld.ub	r12,r6[0x7]
80009d1c:	80 00       	ld.sh	r0,r0[0x0]
80009d1e:	9c 7e       	ld.sh	lr,lr[0xe]

80009d20 <udd_sleep_mode>:
80009d20:	eb cd 40 80 	pushm	r7,lr
80009d24:	1a 97       	mov	r7,sp
80009d26:	20 1d       	sub	sp,4
80009d28:	18 98       	mov	r8,r12
80009d2a:	ef 68 ff fc 	st.b	r7[-4],r8
80009d2e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009d32:	ec 18 00 01 	eorl	r8,0x1
80009d36:	5c 58       	castu.b	r8
80009d38:	c0 80       	breq	80009d48 <udd_sleep_mode+0x28>
80009d3a:	48 f8       	lddpc	r8,80009d74 <udd_sleep_mode+0x54>
80009d3c:	11 88       	ld.ub	r8,r8[0x0]
80009d3e:	58 08       	cp.w	r8,0
80009d40:	c0 40       	breq	80009d48 <udd_sleep_mode+0x28>
80009d42:	30 1c       	mov	r12,1
80009d44:	f0 1f 00 0d 	mcall	80009d78 <udd_sleep_mode+0x58>
80009d48:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009d4c:	30 08       	mov	r8,0
80009d4e:	f0 09 18 00 	cp.b	r9,r8
80009d52:	c0 a0       	breq	80009d66 <udd_sleep_mode+0x46>
80009d54:	48 88       	lddpc	r8,80009d74 <udd_sleep_mode+0x54>
80009d56:	11 88       	ld.ub	r8,r8[0x0]
80009d58:	ec 18 00 01 	eorl	r8,0x1
80009d5c:	5c 58       	castu.b	r8
80009d5e:	c0 40       	breq	80009d66 <udd_sleep_mode+0x46>
80009d60:	30 1c       	mov	r12,1
80009d62:	f0 1f 00 07 	mcall	80009d7c <udd_sleep_mode+0x5c>
80009d66:	48 49       	lddpc	r9,80009d74 <udd_sleep_mode+0x54>
80009d68:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009d6c:	b2 88       	st.b	r9[0x0],r8
80009d6e:	2f fd       	sub	sp,-4
80009d70:	e3 cd 80 80 	ldm	sp++,r7,pc
80009d74:	00 00       	add	r0,r0
80009d76:	08 54       	eor	r4,r4
80009d78:	80 00       	ld.sh	r0,r0[0x0]
80009d7a:	9c dc       	ld.uh	r12,lr[0xa]
80009d7c:	80 00       	ld.sh	r0,r0[0x0]
80009d7e:	9c 98       	ld.uh	r8,lr[0x2]

80009d80 <udd_interrupt>:
80009d80:	eb cd 40 80 	pushm	r7,lr
80009d84:	1a 97       	mov	r7,sp
80009d86:	fe 68 00 04 	mov	r8,-131068
80009d8a:	70 08       	ld.w	r8,r8[0x0]
80009d8c:	e2 18 00 04 	andl	r8,0x4,COH
80009d90:	c1 10       	breq	80009db2 <udd_interrupt+0x32>
80009d92:	fe 68 00 08 	mov	r8,-131064
80009d96:	30 49       	mov	r9,4
80009d98:	91 09       	st.w	r8[0x0],r9
80009d9a:	fe 68 08 04 	mov	r8,-129020
80009d9e:	70 08       	ld.w	r8,r8[0x0]
80009da0:	e2 18 30 00 	andl	r8,0x3000,COH
80009da4:	ad 88       	lsr	r8,0xc
80009da6:	c0 31       	brne	80009dac <udd_interrupt+0x2c>
80009da8:	f0 1f 00 54 	mcall	80009ef8 <udd_interrupt+0x178>
80009dac:	f0 1f 00 54 	mcall	80009efc <udd_interrupt+0x17c>
80009db0:	c9 d8       	rjmp	80009eea <udd_interrupt+0x16a>
80009db2:	fe 68 00 04 	mov	r8,-131068
80009db6:	70 08       	ld.w	r8,r8[0x0]
80009db8:	e2 18 00 02 	andl	r8,0x2,COH
80009dbc:	c0 80       	breq	80009dcc <udd_interrupt+0x4c>
80009dbe:	fe 68 00 08 	mov	r8,-131064
80009dc2:	30 29       	mov	r9,2
80009dc4:	91 09       	st.w	r8[0x0],r9
80009dc6:	f0 1f 00 4d 	mcall	80009ef8 <udd_interrupt+0x178>
80009dca:	c9 08       	rjmp	80009eea <udd_interrupt+0x16a>
80009dcc:	f0 1f 00 4d 	mcall	80009f00 <udd_interrupt+0x180>
80009dd0:	18 98       	mov	r8,r12
80009dd2:	58 08       	cp.w	r8,0
80009dd4:	e0 81 00 88 	brne	80009ee4 <udd_interrupt+0x164>
80009dd8:	f0 1f 00 4b 	mcall	80009f04 <udd_interrupt+0x184>
80009ddc:	18 98       	mov	r8,r12
80009dde:	58 08       	cp.w	r8,0
80009de0:	e0 81 00 84 	brne	80009ee8 <udd_interrupt+0x168>
80009de4:	fe 68 00 04 	mov	r8,-131068
80009de8:	70 08       	ld.w	r8,r8[0x0]
80009dea:	e2 18 00 08 	andl	r8,0x8,COH
80009dee:	c0 e0       	breq	80009e0a <udd_interrupt+0x8a>
80009df0:	fe 68 00 08 	mov	r8,-131064
80009df4:	30 89       	mov	r9,8
80009df6:	91 09       	st.w	r8[0x0],r9
80009df8:	f0 1f 00 44 	mcall	80009f08 <udd_interrupt+0x188>
80009dfc:	f0 1f 00 44 	mcall	80009f0c <udd_interrupt+0x18c>
80009e00:	f0 1f 00 44 	mcall	80009f10 <udd_interrupt+0x190>
80009e04:	f0 1f 00 44 	mcall	80009f14 <udd_interrupt+0x194>
80009e08:	c7 18       	rjmp	80009eea <udd_interrupt+0x16a>
80009e0a:	fe 68 00 10 	mov	r8,-131056
80009e0e:	70 08       	ld.w	r8,r8[0x0]
80009e10:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009e14:	5c 58       	castu.b	r8
80009e16:	c2 40       	breq	80009e5e <udd_interrupt+0xde>
80009e18:	fe 68 00 04 	mov	r8,-131068
80009e1c:	70 08       	ld.w	r8,r8[0x0]
80009e1e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009e22:	5c 58       	castu.b	r8
80009e24:	c1 d0       	breq	80009e5e <udd_interrupt+0xde>
80009e26:	fe 68 08 00 	mov	r8,-129024
80009e2a:	fe 69 08 00 	mov	r9,-129024
80009e2e:	72 09       	ld.w	r9,r9[0x0]
80009e30:	af c9       	cbr	r9,0xe
80009e32:	91 09       	st.w	r8[0x0],r9
80009e34:	fe 68 00 14 	mov	r8,-131052
80009e38:	30 19       	mov	r9,1
80009e3a:	91 09       	st.w	r8[0x0],r9
80009e3c:	fe 68 00 18 	mov	r8,-131048
80009e40:	31 09       	mov	r9,16
80009e42:	91 09       	st.w	r8[0x0],r9
80009e44:	fe 68 08 00 	mov	r8,-129024
80009e48:	fe 69 08 00 	mov	r9,-129024
80009e4c:	72 09       	ld.w	r9,r9[0x0]
80009e4e:	af a9       	sbr	r9,0xe
80009e50:	91 09       	st.w	r8[0x0],r9
80009e52:	30 0c       	mov	r12,0
80009e54:	f0 1f 00 31 	mcall	80009f18 <udd_interrupt+0x198>
80009e58:	f0 1f 00 31 	mcall	80009f1c <udd_interrupt+0x19c>
80009e5c:	c4 78       	rjmp	80009eea <udd_interrupt+0x16a>
80009e5e:	fe 68 00 10 	mov	r8,-131056
80009e62:	70 08       	ld.w	r8,r8[0x0]
80009e64:	e2 18 00 10 	andl	r8,0x10,COH
80009e68:	c1 c0       	breq	80009ea0 <udd_interrupt+0x120>
80009e6a:	fe 68 00 04 	mov	r8,-131068
80009e6e:	70 08       	ld.w	r8,r8[0x0]
80009e70:	e2 18 00 10 	andl	r8,0x10,COH
80009e74:	c1 60       	breq	80009ea0 <udd_interrupt+0x120>
80009e76:	fe 68 08 00 	mov	r8,-129024
80009e7a:	fe 69 08 00 	mov	r9,-129024
80009e7e:	72 09       	ld.w	r9,r9[0x0]
80009e80:	af c9       	cbr	r9,0xe
80009e82:	91 09       	st.w	r8[0x0],r9
80009e84:	fe 68 00 14 	mov	r8,-131052
80009e88:	31 09       	mov	r9,16
80009e8a:	91 09       	st.w	r8[0x0],r9
80009e8c:	fe 68 00 18 	mov	r8,-131048
80009e90:	30 19       	mov	r9,1
80009e92:	91 09       	st.w	r8[0x0],r9
80009e94:	30 1c       	mov	r12,1
80009e96:	f0 1f 00 21 	mcall	80009f18 <udd_interrupt+0x198>
80009e9a:	f0 1f 00 22 	mcall	80009f20 <udd_interrupt+0x1a0>
80009e9e:	c2 68       	rjmp	80009eea <udd_interrupt+0x16a>
80009ea0:	fe 68 08 04 	mov	r8,-129020
80009ea4:	70 08       	ld.w	r8,r8[0x0]
80009ea6:	e2 18 00 02 	andl	r8,0x2,COH
80009eaa:	c2 00       	breq	80009eea <udd_interrupt+0x16a>
80009eac:	fe 68 08 00 	mov	r8,-129024
80009eb0:	fe 69 08 00 	mov	r9,-129024
80009eb4:	72 09       	ld.w	r9,r9[0x0]
80009eb6:	af c9       	cbr	r9,0xe
80009eb8:	91 09       	st.w	r8[0x0],r9
80009eba:	fe 68 08 08 	mov	r8,-129016
80009ebe:	30 29       	mov	r9,2
80009ec0:	91 09       	st.w	r8[0x0],r9
80009ec2:	fe 68 08 00 	mov	r8,-129024
80009ec6:	fe 69 08 00 	mov	r9,-129024
80009eca:	72 09       	ld.w	r9,r9[0x0]
80009ecc:	af a9       	sbr	r9,0xe
80009ece:	91 09       	st.w	r8[0x0],r9
80009ed0:	fe 68 08 04 	mov	r8,-129020
80009ed4:	70 08       	ld.w	r8,r8[0x0]
80009ed6:	e2 18 08 00 	andl	r8,0x800,COH
80009eda:	5f 18       	srne	r8
80009edc:	10 9c       	mov	r12,r8
80009ede:	f0 1f 00 12 	mcall	80009f24 <udd_interrupt+0x1a4>
80009ee2:	c0 48       	rjmp	80009eea <udd_interrupt+0x16a>
80009ee4:	d7 03       	nop
80009ee6:	c0 28       	rjmp	80009eea <udd_interrupt+0x16a>
80009ee8:	d7 03       	nop
80009eea:	fe 68 00 00 	mov	r8,-131072
80009eee:	f0 f8 08 18 	ld.w	r8,r8[2072]
80009ef2:	e3 cd 40 80 	ldm	sp++,r7,lr
80009ef6:	d6 03       	rete
80009ef8:	80 00       	ld.sh	r0,r0[0x0]
80009efa:	d7 9c       	*unknown*
80009efc:	80 00       	ld.sh	r0,r0[0x0]
80009efe:	e5 d0 80 00 	ldswp.w	r0,r2[0]
80009f02:	b4 74       	st.h	r10[0xe],r4
80009f04:	80 00       	ld.sh	r0,r0[0x0]
80009f06:	b9 28       	st.d	r12++,r8
80009f08:	80 00       	ld.sh	r0,r0[0x0]
80009f0a:	b5 a8       	sbr	r8,0x14
80009f0c:	80 00       	ld.sh	r0,r0[0x0]
80009f0e:	d7 38       	*unknown*
80009f10:	80 00       	ld.sh	r0,r0[0x0]
80009f12:	ac f4       	st.b	r6[0x7],r4
80009f14:	80 00       	ld.sh	r0,r0[0x0]
80009f16:	ad d8       	cbr	r8,0xd
80009f18:	80 00       	ld.sh	r0,r0[0x0]
80009f1a:	9d 20       	st.w	lr[0x8],r0
80009f1c:	80 00       	ld.sh	r0,r0[0x0]
80009f1e:	e5 a8 80 00 	cop	cp4,cr0,cr0,cr0,0x50
80009f22:	e5 bc       	*unknown*
80009f24:	80 00       	ld.sh	r0,r0[0x0]
80009f26:	e5 74 eb cd 	stcond	r2[-5171],r4

80009f28 <udd_include_vbus_monitoring>:
80009f28:	eb cd 40 80 	pushm	r7,lr
80009f2c:	1a 97       	mov	r7,sp
80009f2e:	30 18       	mov	r8,1
80009f30:	10 9c       	mov	r12,r8
80009f32:	e3 cd 80 80 	ldm	sp++,r7,pc
80009f36:	d7 03       	nop

80009f38 <udd_enable>:
80009f38:	eb cd 40 80 	pushm	r7,lr
80009f3c:	1a 97       	mov	r7,sp
80009f3e:	20 2d       	sub	sp,8
80009f40:	f0 1f 00 3e 	mcall	8000a038 <udd_enable+0x100>
80009f44:	18 98       	mov	r8,r12
80009f46:	ef 48 ff f8 	st.w	r7[-8],r8
80009f4a:	f0 1f 00 3d 	mcall	8000a03c <udd_enable+0x104>
80009f4e:	30 0a       	mov	r10,0
80009f50:	e0 6b 02 20 	mov	r11,544
80009f54:	4b bc       	lddpc	r12,8000a040 <udd_enable+0x108>
80009f56:	f0 1f 00 3c 	mcall	8000a044 <udd_enable+0x10c>
80009f5a:	30 18       	mov	r8,1
80009f5c:	ef 48 ff fc 	st.w	r7[-4],r8
80009f60:	fe 78 0c 00 	mov	r8,-62464
80009f64:	fe 79 0c 00 	mov	r9,-62464
80009f68:	f2 fa 01 44 	ld.w	r10,r9[324]
80009f6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009f70:	f5 e9 10 09 	or	r9,r10,r9
80009f74:	f1 49 01 44 	st.w	r8[324],r9
80009f78:	fe 68 08 00 	mov	r8,-129024
80009f7c:	fe 69 08 00 	mov	r9,-129024
80009f80:	72 09       	ld.w	r9,r9[0x0]
80009f82:	b9 c9       	cbr	r9,0x18
80009f84:	91 09       	st.w	r8[0x0],r9
80009f86:	fe 68 08 00 	mov	r8,-129024
80009f8a:	fe 69 08 00 	mov	r9,-129024
80009f8e:	72 09       	ld.w	r9,r9[0x0]
80009f90:	b9 b9       	sbr	r9,0x19
80009f92:	91 09       	st.w	r8[0x0],r9
80009f94:	fe 68 08 00 	mov	r8,-129024
80009f98:	fe 69 08 00 	mov	r9,-129024
80009f9c:	72 09       	ld.w	r9,r9[0x0]
80009f9e:	ad a9       	sbr	r9,0xc
80009fa0:	91 09       	st.w	r8[0x0],r9
80009fa2:	fe 68 08 00 	mov	r8,-129024
80009fa6:	fe 69 08 00 	mov	r9,-129024
80009faa:	72 09       	ld.w	r9,r9[0x0]
80009fac:	af b9       	sbr	r9,0xf
80009fae:	91 09       	st.w	r8[0x0],r9
80009fb0:	fe 68 08 00 	mov	r8,-129024
80009fb4:	fe 69 08 00 	mov	r9,-129024
80009fb8:	72 09       	ld.w	r9,r9[0x0]
80009fba:	af c9       	cbr	r9,0xe
80009fbc:	91 09       	st.w	r8[0x0],r9
80009fbe:	fe 68 08 00 	mov	r8,-129024
80009fc2:	70 08       	ld.w	r8,r8[0x0]
80009fc4:	f0 1f 00 21 	mcall	8000a048 <udd_enable+0x110>
80009fc8:	fe 68 00 00 	mov	r8,-131072
80009fcc:	fe 69 00 00 	mov	r9,-131072
80009fd0:	72 09       	ld.w	r9,r9[0x0]
80009fd2:	ad c9       	cbr	r9,0xc
80009fd4:	91 09       	st.w	r8[0x0],r9
80009fd6:	fe 68 00 00 	mov	r8,-131072
80009fda:	fe 69 00 00 	mov	r9,-131072
80009fde:	72 09       	ld.w	r9,r9[0x0]
80009fe0:	e0 19 f3 ff 	andl	r9,0xf3ff
80009fe4:	91 09       	st.w	r8[0x0],r9
80009fe6:	fe 68 08 08 	mov	r8,-129016
80009fea:	30 29       	mov	r9,2
80009fec:	91 09       	st.w	r8[0x0],r9
80009fee:	fe 68 08 04 	mov	r8,-129020
80009ff2:	70 08       	ld.w	r8,r8[0x0]
80009ff4:	e2 18 08 00 	andl	r8,0x800,COH
80009ff8:	c0 50       	breq	8000a002 <udd_enable+0xca>
80009ffa:	fe 68 08 0c 	mov	r8,-129012
80009ffe:	30 29       	mov	r9,2
8000a000:	91 09       	st.w	r8[0x0],r9
8000a002:	fe 68 08 00 	mov	r8,-129024
8000a006:	fe 69 08 00 	mov	r9,-129024
8000a00a:	72 09       	ld.w	r9,r9[0x0]
8000a00c:	a1 b9       	sbr	r9,0x1
8000a00e:	91 09       	st.w	r8[0x0],r9
8000a010:	fe 68 08 00 	mov	r8,-129024
8000a014:	fe 69 08 00 	mov	r9,-129024
8000a018:	72 09       	ld.w	r9,r9[0x0]
8000a01a:	af a9       	sbr	r9,0xe
8000a01c:	91 09       	st.w	r8[0x0],r9
8000a01e:	48 c9       	lddpc	r9,8000a04c <udd_enable+0x114>
8000a020:	30 08       	mov	r8,0
8000a022:	b2 88       	st.b	r9[0x0],r8
8000a024:	30 3c       	mov	r12,3
8000a026:	f0 1f 00 0b 	mcall	8000a050 <udd_enable+0x118>
8000a02a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a02e:	f0 1f 00 0a 	mcall	8000a054 <udd_enable+0x11c>
8000a032:	2f ed       	sub	sp,-8
8000a034:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a038:	80 00       	ld.sh	r0,r0[0x0]
8000a03a:	9c 60       	ld.sh	r0,lr[0xc]
8000a03c:	80 00       	ld.sh	r0,r0[0x0]
8000a03e:	c2 f8       	rjmp	8000a09c <udd_attach+0x44>
8000a040:	80 00       	ld.sh	r0,r0[0x0]
8000a042:	9d 80       	st.w	lr[0x20],r0
8000a044:	80 00       	ld.sh	r0,r0[0x0]
8000a046:	92 f8       	ld.uh	r8,r9[0xe]
8000a048:	80 00       	ld.sh	r0,r0[0x0]
8000a04a:	b5 3c       	mul	r12,r10
8000a04c:	00 00       	add	r0,r0
8000a04e:	08 54       	eor	r4,r4
8000a050:	80 00       	ld.sh	r0,r0[0x0]
8000a052:	9c 98       	ld.uh	r8,lr[0x2]
8000a054:	80 00       	ld.sh	r0,r0[0x0]
8000a056:	9c 7e       	ld.sh	lr,lr[0xe]

8000a058 <udd_attach>:
8000a058:	eb cd 40 80 	pushm	r7,lr
8000a05c:	1a 97       	mov	r7,sp
8000a05e:	20 1d       	sub	sp,4
8000a060:	f0 1f 00 26 	mcall	8000a0f8 <udd_attach+0xa0>
8000a064:	18 98       	mov	r8,r12
8000a066:	ef 48 ff fc 	st.w	r7[-4],r8
8000a06a:	30 1c       	mov	r12,1
8000a06c:	f0 1f 00 24 	mcall	8000a0fc <udd_attach+0xa4>
8000a070:	fe 68 08 00 	mov	r8,-129024
8000a074:	fe 69 08 00 	mov	r9,-129024
8000a078:	72 09       	ld.w	r9,r9[0x0]
8000a07a:	af c9       	cbr	r9,0xe
8000a07c:	91 09       	st.w	r8[0x0],r9
8000a07e:	fe 68 00 00 	mov	r8,-131072
8000a082:	fe 69 00 00 	mov	r9,-131072
8000a086:	72 09       	ld.w	r9,r9[0x0]
8000a088:	a9 c9       	cbr	r9,0x8
8000a08a:	91 09       	st.w	r8[0x0],r9
8000a08c:	fe 68 00 18 	mov	r8,-131048
8000a090:	30 89       	mov	r9,8
8000a092:	91 09       	st.w	r8[0x0],r9
8000a094:	fe 68 00 18 	mov	r8,-131048
8000a098:	30 19       	mov	r9,1
8000a09a:	91 09       	st.w	r8[0x0],r9
8000a09c:	fe 68 00 18 	mov	r8,-131048
8000a0a0:	31 09       	mov	r9,16
8000a0a2:	91 09       	st.w	r8[0x0],r9
8000a0a4:	fe 68 00 18 	mov	r8,-131048
8000a0a8:	30 49       	mov	r9,4
8000a0aa:	91 09       	st.w	r8[0x0],r9
8000a0ac:	fe 68 00 18 	mov	r8,-131048
8000a0b0:	30 29       	mov	r9,2
8000a0b2:	91 09       	st.w	r8[0x0],r9
8000a0b4:	fe 68 00 08 	mov	r8,-131064
8000a0b8:	30 89       	mov	r9,8
8000a0ba:	91 09       	st.w	r8[0x0],r9
8000a0bc:	fe 68 00 08 	mov	r8,-131064
8000a0c0:	30 49       	mov	r9,4
8000a0c2:	91 09       	st.w	r8[0x0],r9
8000a0c4:	fe 68 00 08 	mov	r8,-131064
8000a0c8:	30 29       	mov	r9,2
8000a0ca:	91 09       	st.w	r8[0x0],r9
8000a0cc:	fe 68 00 08 	mov	r8,-131064
8000a0d0:	30 19       	mov	r9,1
8000a0d2:	91 09       	st.w	r8[0x0],r9
8000a0d4:	fe 68 00 08 	mov	r8,-131064
8000a0d8:	31 09       	mov	r9,16
8000a0da:	91 09       	st.w	r8[0x0],r9
8000a0dc:	fe 68 08 00 	mov	r8,-129024
8000a0e0:	fe 69 08 00 	mov	r9,-129024
8000a0e4:	72 09       	ld.w	r9,r9[0x0]
8000a0e6:	af a9       	sbr	r9,0xe
8000a0e8:	91 09       	st.w	r8[0x0],r9
8000a0ea:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a0ee:	f0 1f 00 05 	mcall	8000a100 <udd_attach+0xa8>
8000a0f2:	2f fd       	sub	sp,-4
8000a0f4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a0f8:	80 00       	ld.sh	r0,r0[0x0]
8000a0fa:	9c 60       	ld.sh	r0,lr[0xc]
8000a0fc:	80 00       	ld.sh	r0,r0[0x0]
8000a0fe:	9d 20       	st.w	lr[0x8],r0
8000a100:	80 00       	ld.sh	r0,r0[0x0]
8000a102:	9c 7e       	ld.sh	lr,lr[0xe]

8000a104 <udd_detach>:
8000a104:	eb cd 40 80 	pushm	r7,lr
8000a108:	1a 97       	mov	r7,sp
8000a10a:	fe 68 08 00 	mov	r8,-129024
8000a10e:	fe 69 08 00 	mov	r9,-129024
8000a112:	72 09       	ld.w	r9,r9[0x0]
8000a114:	af c9       	cbr	r9,0xe
8000a116:	91 09       	st.w	r8[0x0],r9
8000a118:	fe 68 00 00 	mov	r8,-131072
8000a11c:	fe 69 00 00 	mov	r9,-131072
8000a120:	72 09       	ld.w	r9,r9[0x0]
8000a122:	a9 a9       	sbr	r9,0x8
8000a124:	91 09       	st.w	r8[0x0],r9
8000a126:	fe 68 08 00 	mov	r8,-129024
8000a12a:	fe 69 08 00 	mov	r9,-129024
8000a12e:	72 09       	ld.w	r9,r9[0x0]
8000a130:	af a9       	sbr	r9,0xe
8000a132:	91 09       	st.w	r8[0x0],r9
8000a134:	30 0c       	mov	r12,0
8000a136:	f0 1f 00 03 	mcall	8000a140 <udd_detach+0x3c>
8000a13a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a13e:	00 00       	add	r0,r0
8000a140:	80 00       	ld.sh	r0,r0[0x0]
8000a142:	9d 20       	st.w	lr[0x8],r0

8000a144 <udd_is_high_speed>:
8000a144:	eb cd 40 80 	pushm	r7,lr
8000a148:	1a 97       	mov	r7,sp
8000a14a:	fe 68 08 04 	mov	r8,-129020
8000a14e:	70 08       	ld.w	r8,r8[0x0]
8000a150:	e2 18 30 00 	andl	r8,0x3000,COH
8000a154:	ad 88       	lsr	r8,0xc
8000a156:	5f 18       	srne	r8
8000a158:	5c 58       	castu.b	r8
8000a15a:	10 9c       	mov	r12,r8
8000a15c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a160 <udd_set_address>:
8000a160:	eb cd 40 80 	pushm	r7,lr
8000a164:	1a 97       	mov	r7,sp
8000a166:	20 1d       	sub	sp,4
8000a168:	18 98       	mov	r8,r12
8000a16a:	ef 68 ff fc 	st.b	r7[-4],r8
8000a16e:	fe 68 00 00 	mov	r8,-131072
8000a172:	fe 69 00 00 	mov	r9,-131072
8000a176:	72 09       	ld.w	r9,r9[0x0]
8000a178:	a7 d9       	cbr	r9,0x7
8000a17a:	91 09       	st.w	r8[0x0],r9
8000a17c:	fe 68 00 00 	mov	r8,-131072
8000a180:	fe 69 00 00 	mov	r9,-131072
8000a184:	72 09       	ld.w	r9,r9[0x0]
8000a186:	12 9a       	mov	r10,r9
8000a188:	e0 1a ff 80 	andl	r10,0xff80
8000a18c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000a190:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
8000a194:	f5 e9 10 09 	or	r9,r10,r9
8000a198:	91 09       	st.w	r8[0x0],r9
8000a19a:	fe 68 00 00 	mov	r8,-131072
8000a19e:	fe 69 00 00 	mov	r9,-131072
8000a1a2:	72 09       	ld.w	r9,r9[0x0]
8000a1a4:	a7 b9       	sbr	r9,0x7
8000a1a6:	91 09       	st.w	r8[0x0],r9
8000a1a8:	2f fd       	sub	sp,-4
8000a1aa:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a1ae <udd_getaddress>:
8000a1ae:	eb cd 40 80 	pushm	r7,lr
8000a1b2:	1a 97       	mov	r7,sp
8000a1b4:	fe 68 00 00 	mov	r8,-131072
8000a1b8:	70 08       	ld.w	r8,r8[0x0]
8000a1ba:	5c 58       	castu.b	r8
8000a1bc:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000a1c0:	10 9c       	mov	r12,r8
8000a1c2:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a1c6 <udd_get_frame_number>:
8000a1c6:	eb cd 40 80 	pushm	r7,lr
8000a1ca:	1a 97       	mov	r7,sp
8000a1cc:	fe 68 00 20 	mov	r8,-131040
8000a1d0:	70 08       	ld.w	r8,r8[0x0]
8000a1d2:	e2 18 3f f8 	andl	r8,0x3ff8,COH
8000a1d6:	a3 98       	lsr	r8,0x3
8000a1d8:	5c 88       	casts.h	r8
8000a1da:	10 9c       	mov	r12,r8
8000a1dc:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a1e0 <udd_set_setup_payload>:
8000a1e0:	eb cd 40 80 	pushm	r7,lr
8000a1e4:	1a 97       	mov	r7,sp
8000a1e6:	20 2d       	sub	sp,8
8000a1e8:	ef 4c ff fc 	st.w	r7[-4],r12
8000a1ec:	16 98       	mov	r8,r11
8000a1ee:	ef 58 ff f8 	st.h	r7[-8],r8
8000a1f2:	48 68       	lddpc	r8,8000a208 <udd_set_setup_payload+0x28>
8000a1f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a1f8:	91 29       	st.w	r8[0x8],r9
8000a1fa:	48 49       	lddpc	r9,8000a208 <udd_set_setup_payload+0x28>
8000a1fc:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000a200:	b2 68       	st.h	r9[0xc],r8
8000a202:	2f ed       	sub	sp,-8
8000a204:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a208:	00 00       	add	r0,r0
8000a20a:	0d e4       	ld.ub	r4,r6[0x6]

8000a20c <udd_ep_alloc>:
8000a20c:	eb cd 40 80 	pushm	r7,lr
8000a210:	1a 97       	mov	r7,sp
8000a212:	20 dd       	sub	sp,52
8000a214:	16 99       	mov	r9,r11
8000a216:	14 98       	mov	r8,r10
8000a218:	18 9a       	mov	r10,r12
8000a21a:	ef 6a ff d4 	st.b	r7[-44],r10
8000a21e:	ef 69 ff d0 	st.b	r7[-48],r9
8000a222:	ef 58 ff cc 	st.h	r7[-52],r8
8000a226:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a22a:	a7 98       	lsr	r8,0x7
8000a22c:	ef 68 ff db 	st.b	r7[-37],r8
8000a230:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a234:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a238:	ef 68 ff d4 	st.b	r7[-44],r8
8000a23c:	ef 39 ff d4 	ld.ub	r9,r7[-44]
8000a240:	30 28       	mov	r8,2
8000a242:	f0 09 18 00 	cp.b	r9,r8
8000a246:	e0 88 00 04 	brls	8000a24e <udd_ep_alloc+0x42>
8000a24a:	30 08       	mov	r8,0
8000a24c:	c7 f9       	rjmp	8000a54a <udd_ep_alloc+0x33e>
8000a24e:	fe 68 00 00 	mov	r8,-131072
8000a252:	70 79       	ld.w	r9,r8[0x1c]
8000a254:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a258:	30 1a       	mov	r10,1
8000a25a:	f4 08 09 48 	lsl	r8,r10,r8
8000a25e:	f3 e8 00 08 	and	r8,r9,r8
8000a262:	c0 30       	breq	8000a268 <udd_ep_alloc+0x5c>
8000a264:	30 08       	mov	r8,0
8000a266:	c7 29       	rjmp	8000a54a <udd_ep_alloc+0x33e>
8000a268:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8000a26c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000a270:	58 28       	cp.w	r8,2
8000a272:	c0 d0       	breq	8000a28c <udd_ep_alloc+0x80>
8000a274:	58 38       	cp.w	r8,3
8000a276:	c0 70       	breq	8000a284 <udd_ep_alloc+0x78>
8000a278:	58 18       	cp.w	r8,1
8000a27a:	c0 d1       	brne	8000a294 <udd_ep_alloc+0x88>
8000a27c:	30 28       	mov	r8,2
8000a27e:	ef 68 ff de 	st.b	r7[-34],r8
8000a282:	c0 b8       	rjmp	8000a298 <udd_ep_alloc+0x8c>
8000a284:	30 18       	mov	r8,1
8000a286:	ef 68 ff de 	st.b	r7[-34],r8
8000a28a:	c0 78       	rjmp	8000a298 <udd_ep_alloc+0x8c>
8000a28c:	30 28       	mov	r8,2
8000a28e:	ef 68 ff de 	st.b	r7[-34],r8
8000a292:	c0 38       	rjmp	8000a298 <udd_ep_alloc+0x8c>
8000a294:	30 08       	mov	r8,0
8000a296:	c5 a9       	rjmp	8000a54a <udd_ep_alloc+0x33e>
8000a298:	ef 38 ff de 	ld.ub	r8,r7[-34]
8000a29c:	58 28       	cp.w	r8,2
8000a29e:	c0 90       	breq	8000a2b0 <udd_ep_alloc+0xa4>
8000a2a0:	58 38       	cp.w	r8,3
8000a2a2:	c0 b0       	breq	8000a2b8 <udd_ep_alloc+0xac>
8000a2a4:	58 18       	cp.w	r8,1
8000a2a6:	c0 d1       	brne	8000a2c0 <udd_ep_alloc+0xb4>
8000a2a8:	30 08       	mov	r8,0
8000a2aa:	ef 68 ff de 	st.b	r7[-34],r8
8000a2ae:	c0 b8       	rjmp	8000a2c4 <udd_ep_alloc+0xb8>
8000a2b0:	30 18       	mov	r8,1
8000a2b2:	ef 68 ff de 	st.b	r7[-34],r8
8000a2b6:	c0 78       	rjmp	8000a2c4 <udd_ep_alloc+0xb8>
8000a2b8:	30 28       	mov	r8,2
8000a2ba:	ef 68 ff de 	st.b	r7[-34],r8
8000a2be:	c0 38       	rjmp	8000a2c4 <udd_ep_alloc+0xb8>
8000a2c0:	30 08       	mov	r8,0
8000a2c2:	c4 49       	rjmp	8000a54a <udd_ep_alloc+0x33e>
8000a2c4:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a2c8:	a3 68       	lsl	r8,0x2
8000a2ca:	e0 38 ff 00 	sub	r8,130816
8000a2ce:	ef 39 ff d4 	ld.ub	r9,r7[-44]
8000a2d2:	a3 69       	lsl	r9,0x2
8000a2d4:	e0 39 ff 00 	sub	r9,130816
8000a2d8:	72 09       	ld.w	r9,r9[0x0]
8000a2da:	12 9a       	mov	r10,r9
8000a2dc:	e0 1a e6 83 	andl	r10,0xe683
8000a2e0:	ef 39 ff d0 	ld.ub	r9,r7[-48]
8000a2e4:	ab 79       	lsl	r9,0xb
8000a2e6:	12 9b       	mov	r11,r9
8000a2e8:	e2 1b 18 00 	andl	r11,0x1800,COH
8000a2ec:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000a2f0:	a9 69       	lsl	r9,0x8
8000a2f2:	e2 19 01 00 	andl	r9,0x100,COH
8000a2f6:	12 4b       	or	r11,r9
8000a2f8:	ef 19 ff cc 	ld.uh	r9,r7[-52]
8000a2fc:	ef 49 ff f0 	st.w	r7[-16],r9
8000a300:	30 89       	mov	r9,8
8000a302:	ef 49 ff f4 	st.w	r7[-12],r9
8000a306:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a30a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000a30e:	f2 0c 0c 49 	max	r9,r9,r12
8000a312:	ef 49 ff ec 	st.w	r7[-20],r9
8000a316:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a31a:	ef 49 ff e4 	st.w	r7[-28],r9
8000a31e:	e0 69 04 00 	mov	r9,1024
8000a322:	ef 49 ff e8 	st.w	r7[-24],r9
8000a326:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a32a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000a32e:	f2 0c 0d 49 	min	r9,r9,r12
8000a332:	ef 49 ff e0 	st.w	r7[-32],r9
8000a336:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000a33a:	a1 79       	lsl	r9,0x1
8000a33c:	20 19       	sub	r9,1
8000a33e:	f2 09 12 00 	clz	r9,r9
8000a342:	f2 09 11 1c 	rsub	r9,r9,28
8000a346:	a5 69       	lsl	r9,0x4
8000a348:	12 4b       	or	r11,r9
8000a34a:	ef 39 ff de 	ld.ub	r9,r7[-34]
8000a34e:	a3 69       	lsl	r9,0x2
8000a350:	e2 19 00 0c 	andl	r9,0xc,COH
8000a354:	f7 e9 10 09 	or	r9,r11,r9
8000a358:	e2 19 19 7c 	andl	r9,0x197c,COH
8000a35c:	f5 e9 10 09 	or	r9,r10,r9
8000a360:	91 09       	st.w	r8[0x0],r9
8000a362:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a366:	30 19       	mov	r9,1
8000a368:	f2 08 09 48 	lsl	r8,r9,r8
8000a36c:	ef 58 ff dc 	st.h	r7[-36],r8
8000a370:	30 28       	mov	r8,2
8000a372:	ef 68 ff df 	st.b	r7[-33],r8
8000a376:	c3 a8       	rjmp	8000a3ea <udd_ep_alloc+0x1de>
8000a378:	fe 68 00 00 	mov	r8,-131072
8000a37c:	70 79       	ld.w	r9,r8[0x1c]
8000a37e:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a382:	30 1a       	mov	r10,1
8000a384:	f4 08 09 48 	lsl	r8,r10,r8
8000a388:	f3 e8 00 08 	and	r8,r9,r8
8000a38c:	c2 a0       	breq	8000a3e0 <udd_ep_alloc+0x1d4>
8000a38e:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a392:	30 19       	mov	r9,1
8000a394:	f2 08 09 48 	lsl	r8,r9,r8
8000a398:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000a39c:	ef 08 ff dc 	ld.sh	r8,r7[-36]
8000a3a0:	f3 e8 10 08 	or	r8,r9,r8
8000a3a4:	5c 88       	casts.h	r8
8000a3a6:	ef 58 ff dc 	st.h	r7[-36],r8
8000a3aa:	fe 68 00 00 	mov	r8,-131072
8000a3ae:	fe 69 00 00 	mov	r9,-131072
8000a3b2:	72 7a       	ld.w	r10,r9[0x1c]
8000a3b4:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a3b8:	30 1b       	mov	r11,1
8000a3ba:	f6 09 09 49 	lsl	r9,r11,r9
8000a3be:	5c d9       	com	r9
8000a3c0:	f5 e9 00 09 	and	r9,r10,r9
8000a3c4:	91 79       	st.w	r8[0x1c],r9
8000a3c6:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a3ca:	a3 68       	lsl	r8,0x2
8000a3cc:	e0 38 ff 00 	sub	r8,130816
8000a3d0:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a3d4:	a3 69       	lsl	r9,0x2
8000a3d6:	e0 39 ff 00 	sub	r9,130816
8000a3da:	72 09       	ld.w	r9,r9[0x0]
8000a3dc:	a1 d9       	cbr	r9,0x1
8000a3de:	91 09       	st.w	r8[0x0],r9
8000a3e0:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a3e4:	20 18       	sub	r8,1
8000a3e6:	ef 68 ff df 	st.b	r7[-33],r8
8000a3ea:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a3ee:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a3f2:	f0 09 18 00 	cp.b	r9,r8
8000a3f6:	fe 9b ff c1 	brhi	8000a378 <udd_ep_alloc+0x16c>
8000a3fa:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a3fe:	ef 68 ff df 	st.b	r7[-33],r8
8000a402:	c9 c8       	rjmp	8000a53a <udd_ep_alloc+0x32e>
8000a404:	ef 19 ff dc 	ld.uh	r9,r7[-36]
8000a408:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a40c:	f2 08 08 48 	asr	r8,r9,r8
8000a410:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a414:	5c 58       	castu.b	r8
8000a416:	e0 80 00 8d 	breq	8000a530 <udd_ep_alloc+0x324>
8000a41a:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a41e:	f0 c9 00 01 	sub	r9,r8,1
8000a422:	12 98       	mov	r8,r9
8000a424:	a3 68       	lsl	r8,0x2
8000a426:	12 08       	add	r8,r9
8000a428:	a3 68       	lsl	r8,0x2
8000a42a:	10 99       	mov	r9,r8
8000a42c:	4c a8       	lddpc	r8,8000a554 <udd_ep_alloc+0x348>
8000a42e:	f2 08 00 08 	add	r8,r9,r8
8000a432:	ef 48 ff f8 	st.w	r7[-8],r8
8000a436:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a43a:	70 08       	ld.w	r8,r8[0x0]
8000a43c:	e6 18 80 00 	andh	r8,0x8000,COH
8000a440:	5f 18       	srne	r8
8000a442:	ef 68 ff ff 	st.b	r7[-1],r8
8000a446:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a44a:	72 08       	ld.w	r8,r9[0x0]
8000a44c:	30 0a       	mov	r10,0
8000a44e:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a452:	93 08       	st.w	r9[0x0],r8
8000a454:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a458:	a3 68       	lsl	r8,0x2
8000a45a:	e0 38 ff 00 	sub	r8,130816
8000a45e:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a462:	a3 69       	lsl	r9,0x2
8000a464:	e0 39 ff 00 	sub	r9,130816
8000a468:	72 09       	ld.w	r9,r9[0x0]
8000a46a:	a1 b9       	sbr	r9,0x1
8000a46c:	91 09       	st.w	r8[0x0],r9
8000a46e:	fe 68 00 00 	mov	r8,-131072
8000a472:	fe 69 00 00 	mov	r9,-131072
8000a476:	72 7a       	ld.w	r10,r9[0x1c]
8000a478:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a47c:	30 1b       	mov	r11,1
8000a47e:	f6 09 09 49 	lsl	r9,r11,r9
8000a482:	f5 e9 10 09 	or	r9,r10,r9
8000a486:	91 79       	st.w	r8[0x1c],r9
8000a488:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a48c:	a3 68       	lsl	r8,0x2
8000a48e:	e0 38 fe d0 	sub	r8,130768
8000a492:	70 08       	ld.w	r8,r8[0x0]
8000a494:	e6 18 00 04 	andh	r8,0x4,COH
8000a498:	c2 61       	brne	8000a4e4 <udd_ep_alloc+0x2d8>
8000a49a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a49e:	70 48       	ld.w	r8,r8[0x10]
8000a4a0:	58 08       	cp.w	r8,0
8000a4a2:	c0 31       	brne	8000a4a8 <udd_ep_alloc+0x29c>
8000a4a4:	30 08       	mov	r8,0
8000a4a6:	c5 28       	rjmp	8000a54a <udd_ep_alloc+0x33e>
8000a4a8:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a4ac:	a3 68       	lsl	r8,0x2
8000a4ae:	e0 38 ff 00 	sub	r8,130816
8000a4b2:	70 08       	ld.w	r8,r8[0x0]
8000a4b4:	e2 18 01 00 	andl	r8,0x100,COH
8000a4b8:	c0 90       	breq	8000a4ca <udd_ep_alloc+0x2be>
8000a4ba:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a4be:	ea 18 ff ff 	orh	r8,0xffff
8000a4c2:	e8 18 ff 80 	orl	r8,0xff80
8000a4c6:	ef 68 ff df 	st.b	r7[-33],r8
8000a4ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4ce:	70 48       	ld.w	r8,r8[0x10]
8000a4d0:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000a4d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a4d8:	72 29       	ld.w	r9,r9[0x8]
8000a4da:	12 9b       	mov	r11,r9
8000a4dc:	30 1c       	mov	r12,1
8000a4de:	5d 18       	icall	r8
8000a4e0:	30 08       	mov	r8,0
8000a4e2:	c3 48       	rjmp	8000a54a <udd_ep_alloc+0x33e>
8000a4e4:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a4e8:	a3 68       	lsl	r8,0x2
8000a4ea:	e0 38 ff 00 	sub	r8,130816
8000a4ee:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a4f2:	a3 69       	lsl	r9,0x2
8000a4f4:	e0 39 ff 00 	sub	r9,130816
8000a4f8:	72 09       	ld.w	r9,r9[0x0]
8000a4fa:	a9 b9       	sbr	r9,0x9
8000a4fc:	91 09       	st.w	r8[0x0],r9
8000a4fe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a502:	30 08       	mov	r8,0
8000a504:	f0 09 18 00 	cp.b	r9,r8
8000a508:	c1 40       	breq	8000a530 <udd_ep_alloc+0x324>
8000a50a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a50e:	70 48       	ld.w	r8,r8[0x10]
8000a510:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a514:	72 29       	ld.w	r9,r9[0x8]
8000a516:	ee fa ff f8 	ld.w	r10,r7[-8]
8000a51a:	74 1a       	ld.w	r10,r10[0x4]
8000a51c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a520:	76 0b       	ld.w	r11,r11[0x0]
8000a522:	e6 1b 40 00 	andh	r11,0x4000,COH
8000a526:	5f 1b       	srne	r11
8000a528:	ef 3c ff df 	ld.ub	r12,r7[-33]
8000a52c:	f0 1f 00 0b 	mcall	8000a558 <udd_ep_alloc+0x34c>
8000a530:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a534:	2f f8       	sub	r8,-1
8000a536:	ef 68 ff df 	st.b	r7[-33],r8
8000a53a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a53e:	30 28       	mov	r8,2
8000a540:	f0 09 18 00 	cp.b	r9,r8
8000a544:	fe 98 ff 60 	brls	8000a404 <udd_ep_alloc+0x1f8>
8000a548:	30 18       	mov	r8,1
8000a54a:	10 9c       	mov	r12,r8
8000a54c:	2f 3d       	sub	sp,-52
8000a54e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a552:	00 00       	add	r0,r0
8000a554:	00 00       	add	r0,r0
8000a556:	08 60       	and	r0,r4
8000a558:	80 00       	ld.sh	r0,r0[0x0]
8000a55a:	a8 7c       	st.h	r4[0xe],r12

8000a55c <udd_ep_free>:
8000a55c:	eb cd 40 80 	pushm	r7,lr
8000a560:	1a 97       	mov	r7,sp
8000a562:	20 2d       	sub	sp,8
8000a564:	18 98       	mov	r8,r12
8000a566:	ef 68 ff f8 	st.b	r7[-8],r8
8000a56a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a56e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a572:	ef 68 ff ff 	st.b	r7[-1],r8
8000a576:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a57a:	30 28       	mov	r8,2
8000a57c:	f0 09 18 00 	cp.b	r9,r8
8000a580:	e0 8b 00 33 	brhi	8000a5e6 <udd_ep_free+0x8a>
8000a584:	fe 68 00 00 	mov	r8,-131072
8000a588:	fe 69 00 00 	mov	r9,-131072
8000a58c:	72 7a       	ld.w	r10,r9[0x1c]
8000a58e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a592:	30 1b       	mov	r11,1
8000a594:	f6 09 09 49 	lsl	r9,r11,r9
8000a598:	5c d9       	com	r9
8000a59a:	f5 e9 00 09 	and	r9,r10,r9
8000a59e:	91 79       	st.w	r8[0x1c],r9
8000a5a0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a5a4:	a3 68       	lsl	r8,0x2
8000a5a6:	e0 38 ff 00 	sub	r8,130816
8000a5aa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a5ae:	a3 69       	lsl	r9,0x2
8000a5b0:	e0 39 ff 00 	sub	r9,130816
8000a5b4:	72 09       	ld.w	r9,r9[0x0]
8000a5b6:	a1 d9       	cbr	r9,0x1
8000a5b8:	91 09       	st.w	r8[0x0],r9
8000a5ba:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a5be:	10 9c       	mov	r12,r8
8000a5c0:	f0 1f 00 0c 	mcall	8000a5f0 <udd_ep_free+0x94>
8000a5c4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a5c8:	f0 c9 00 01 	sub	r9,r8,1
8000a5cc:	48 aa       	lddpc	r10,8000a5f4 <udd_ep_free+0x98>
8000a5ce:	12 98       	mov	r8,r9
8000a5d0:	a3 68       	lsl	r8,0x2
8000a5d2:	12 08       	add	r8,r9
8000a5d4:	a3 68       	lsl	r8,0x2
8000a5d6:	f4 08 00 09 	add	r9,r10,r8
8000a5da:	72 08       	ld.w	r8,r9[0x0]
8000a5dc:	30 0a       	mov	r10,0
8000a5de:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a5e2:	93 08       	st.w	r9[0x0],r8
8000a5e4:	c0 28       	rjmp	8000a5e8 <udd_ep_free+0x8c>
8000a5e6:	d7 03       	nop
8000a5e8:	2f ed       	sub	sp,-8
8000a5ea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a5ee:	00 00       	add	r0,r0
8000a5f0:	80 00       	ld.sh	r0,r0[0x0]
8000a5f2:	b6 04       	st.h	r11[0x0],r4
8000a5f4:	00 00       	add	r0,r0
8000a5f6:	08 60       	and	r0,r4

8000a5f8 <udd_ep_is_halted>:
8000a5f8:	eb cd 40 80 	pushm	r7,lr
8000a5fc:	1a 97       	mov	r7,sp
8000a5fe:	20 1d       	sub	sp,4
8000a600:	18 98       	mov	r8,r12
8000a602:	ef 68 ff fc 	st.b	r7[-4],r8
8000a606:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a60a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a60e:	a3 68       	lsl	r8,0x2
8000a610:	e0 38 fe 40 	sub	r8,130624
8000a614:	70 08       	ld.w	r8,r8[0x0]
8000a616:	e6 18 00 08 	andh	r8,0x8,COH
8000a61a:	5f 18       	srne	r8
8000a61c:	5c 58       	castu.b	r8
8000a61e:	10 9c       	mov	r12,r8
8000a620:	2f fd       	sub	sp,-4
8000a622:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a626:	d7 03       	nop

8000a628 <udd_ep_set_halt>:
8000a628:	eb cd 40 80 	pushm	r7,lr
8000a62c:	1a 97       	mov	r7,sp
8000a62e:	20 3d       	sub	sp,12
8000a630:	18 98       	mov	r8,r12
8000a632:	ef 68 ff f4 	st.b	r7[-12],r8
8000a636:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a63a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a63e:	ef 68 ff ff 	st.b	r7[-1],r8
8000a642:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a646:	30 28       	mov	r8,2
8000a648:	f0 09 18 00 	cp.b	r9,r8
8000a64c:	e0 88 00 04 	brls	8000a654 <udd_ep_set_halt+0x2c>
8000a650:	30 08       	mov	r8,0
8000a652:	c6 f8       	rjmp	8000a730 <udd_ep_set_halt+0x108>
8000a654:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a658:	f0 c9 00 01 	sub	r9,r8,1
8000a65c:	12 98       	mov	r8,r9
8000a65e:	a3 68       	lsl	r8,0x2
8000a660:	12 08       	add	r8,r9
8000a662:	a3 68       	lsl	r8,0x2
8000a664:	10 99       	mov	r9,r8
8000a666:	4b 58       	lddpc	r8,8000a738 <udd_ep_set_halt+0x110>
8000a668:	f2 08 00 08 	add	r8,r9,r8
8000a66c:	ef 48 ff f8 	st.w	r7[-8],r8
8000a670:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a674:	a3 68       	lsl	r8,0x2
8000a676:	e0 38 fe 40 	sub	r8,130624
8000a67a:	70 08       	ld.w	r8,r8[0x0]
8000a67c:	e6 18 00 08 	andh	r8,0x8,COH
8000a680:	c0 71       	brne	8000a68e <udd_ep_set_halt+0x66>
8000a682:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a686:	70 08       	ld.w	r8,r8[0x0]
8000a688:	e6 18 20 00 	andh	r8,0x2000,COH
8000a68c:	c0 30       	breq	8000a692 <udd_ep_set_halt+0x6a>
8000a68e:	30 18       	mov	r8,1
8000a690:	c5 08       	rjmp	8000a730 <udd_ep_set_halt+0x108>
8000a692:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a696:	70 08       	ld.w	r8,r8[0x0]
8000a698:	e6 18 80 00 	andh	r8,0x8000,COH
8000a69c:	c0 30       	breq	8000a6a2 <udd_ep_set_halt+0x7a>
8000a69e:	30 08       	mov	r8,0
8000a6a0:	c4 88       	rjmp	8000a730 <udd_ep_set_halt+0x108>
8000a6a2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a6a6:	30 08       	mov	r8,0
8000a6a8:	f0 09 18 00 	cp.b	r9,r8
8000a6ac:	c2 54       	brge	8000a6f6 <udd_ep_set_halt+0xce>
8000a6ae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a6b2:	a3 68       	lsl	r8,0x2
8000a6b4:	e0 38 fe d0 	sub	r8,130768
8000a6b8:	70 08       	ld.w	r8,r8[0x0]
8000a6ba:	e2 18 30 00 	andl	r8,0x3000,COH
8000a6be:	ad 88       	lsr	r8,0xc
8000a6c0:	c1 b0       	breq	8000a6f6 <udd_ep_set_halt+0xce>
8000a6c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a6c6:	72 08       	ld.w	r8,r9[0x0]
8000a6c8:	30 1a       	mov	r10,1
8000a6ca:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a6ce:	93 08       	st.w	r9[0x0],r8
8000a6d0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a6d4:	a3 68       	lsl	r8,0x2
8000a6d6:	e0 38 fe 10 	sub	r8,130576
8000a6da:	e0 69 10 00 	mov	r9,4096
8000a6de:	91 09       	st.w	r8[0x0],r9
8000a6e0:	fe 68 00 00 	mov	r8,-131072
8000a6e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a6e8:	e0 6a 10 00 	mov	r10,4096
8000a6ec:	f4 09 09 49 	lsl	r9,r10,r9
8000a6f0:	91 69       	st.w	r8[0x18],r9
8000a6f2:	30 18       	mov	r8,1
8000a6f4:	c1 e8       	rjmp	8000a730 <udd_ep_set_halt+0x108>
8000a6f6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a6fa:	a3 68       	lsl	r8,0x2
8000a6fc:	e0 38 ff 00 	sub	r8,130816
8000a700:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a704:	a3 69       	lsl	r9,0x2
8000a706:	e0 39 ff 00 	sub	r9,130816
8000a70a:	72 09       	ld.w	r9,r9[0x0]
8000a70c:	a9 d9       	cbr	r9,0x9
8000a70e:	91 09       	st.w	r8[0x0],r9
8000a710:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a714:	a3 68       	lsl	r8,0x2
8000a716:	e0 38 fe a0 	sub	r8,130720
8000a71a:	34 09       	mov	r9,64
8000a71c:	91 09       	st.w	r8[0x0],r9
8000a71e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a722:	a3 68       	lsl	r8,0x2
8000a724:	e0 38 fe 10 	sub	r8,130576
8000a728:	e8 69 00 00 	mov	r9,524288
8000a72c:	91 09       	st.w	r8[0x0],r9
8000a72e:	30 18       	mov	r8,1
8000a730:	10 9c       	mov	r12,r8
8000a732:	2f dd       	sub	sp,-12
8000a734:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a738:	00 00       	add	r0,r0
8000a73a:	08 60       	and	r0,r4

8000a73c <udd_ep_clear_halt>:
8000a73c:	eb cd 40 80 	pushm	r7,lr
8000a740:	1a 97       	mov	r7,sp
8000a742:	20 3d       	sub	sp,12
8000a744:	18 98       	mov	r8,r12
8000a746:	ef 68 ff f4 	st.b	r7[-12],r8
8000a74a:	30 08       	mov	r8,0
8000a74c:	ef 68 ff fb 	st.b	r7[-5],r8
8000a750:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a754:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a758:	ef 68 ff f4 	st.b	r7[-12],r8
8000a75c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a760:	30 28       	mov	r8,2
8000a762:	f0 09 18 00 	cp.b	r9,r8
8000a766:	e0 88 00 04 	brls	8000a76e <udd_ep_clear_halt+0x32>
8000a76a:	30 08       	mov	r8,0
8000a76c:	c8 18       	rjmp	8000a86e <udd_ep_clear_halt+0x132>
8000a76e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a772:	f0 c9 00 01 	sub	r9,r8,1
8000a776:	12 98       	mov	r8,r9
8000a778:	a3 68       	lsl	r8,0x2
8000a77a:	12 08       	add	r8,r9
8000a77c:	a3 68       	lsl	r8,0x2
8000a77e:	10 99       	mov	r9,r8
8000a780:	4b e8       	lddpc	r8,8000a878 <udd_ep_clear_halt+0x13c>
8000a782:	f2 08 00 08 	add	r8,r9,r8
8000a786:	ef 48 ff fc 	st.w	r7[-4],r8
8000a78a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a78e:	70 08       	ld.w	r8,r8[0x0]
8000a790:	e6 18 20 00 	andh	r8,0x2000,COH
8000a794:	c1 c0       	breq	8000a7cc <udd_ep_clear_halt+0x90>
8000a796:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a79a:	72 08       	ld.w	r8,r9[0x0]
8000a79c:	30 0a       	mov	r10,0
8000a79e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a7a2:	93 08       	st.w	r9[0x0],r8
8000a7a4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a7a8:	a3 68       	lsl	r8,0x2
8000a7aa:	e0 38 fd e0 	sub	r8,130528
8000a7ae:	e0 69 10 00 	mov	r9,4096
8000a7b2:	91 09       	st.w	r8[0x0],r9
8000a7b4:	fe 68 00 00 	mov	r8,-131072
8000a7b8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a7bc:	e0 6a 10 00 	mov	r10,4096
8000a7c0:	f4 09 09 49 	lsl	r9,r10,r9
8000a7c4:	91 59       	st.w	r8[0x14],r9
8000a7c6:	30 18       	mov	r8,1
8000a7c8:	ef 68 ff fb 	st.b	r7[-5],r8
8000a7cc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a7d0:	a3 68       	lsl	r8,0x2
8000a7d2:	e0 38 fe 40 	sub	r8,130624
8000a7d6:	70 08       	ld.w	r8,r8[0x0]
8000a7d8:	e6 18 00 08 	andh	r8,0x8,COH
8000a7dc:	c3 10       	breq	8000a83e <udd_ep_clear_halt+0x102>
8000a7de:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a7e2:	a3 68       	lsl	r8,0x2
8000a7e4:	e0 38 fe d0 	sub	r8,130768
8000a7e8:	70 08       	ld.w	r8,r8[0x0]
8000a7ea:	e2 18 00 40 	andl	r8,0x40,COH
8000a7ee:	c1 00       	breq	8000a80e <udd_ep_clear_halt+0xd2>
8000a7f0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a7f4:	a3 68       	lsl	r8,0x2
8000a7f6:	e0 38 fe a0 	sub	r8,130720
8000a7fa:	34 09       	mov	r9,64
8000a7fc:	91 09       	st.w	r8[0x0],r9
8000a7fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a802:	a3 68       	lsl	r8,0x2
8000a804:	e0 38 fe 10 	sub	r8,130576
8000a808:	e4 69 00 00 	mov	r9,262144
8000a80c:	91 09       	st.w	r8[0x0],r9
8000a80e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a812:	a3 68       	lsl	r8,0x2
8000a814:	e0 38 fd e0 	sub	r8,130528
8000a818:	e8 69 00 00 	mov	r9,524288
8000a81c:	91 09       	st.w	r8[0x0],r9
8000a81e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a822:	a3 68       	lsl	r8,0x2
8000a824:	e0 38 ff 00 	sub	r8,130816
8000a828:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a82c:	a3 69       	lsl	r9,0x2
8000a82e:	e0 39 ff 00 	sub	r9,130816
8000a832:	72 09       	ld.w	r9,r9[0x0]
8000a834:	a9 b9       	sbr	r9,0x9
8000a836:	91 09       	st.w	r8[0x0],r9
8000a838:	30 18       	mov	r8,1
8000a83a:	ef 68 ff fb 	st.b	r7[-5],r8
8000a83e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000a842:	30 08       	mov	r8,0
8000a844:	f0 09 18 00 	cp.b	r9,r8
8000a848:	c1 20       	breq	8000a86c <udd_ep_clear_halt+0x130>
8000a84a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a84e:	70 08       	ld.w	r8,r8[0x0]
8000a850:	e6 18 80 00 	andh	r8,0x8000,COH
8000a854:	c0 c0       	breq	8000a86c <udd_ep_clear_halt+0x130>
8000a856:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a85a:	72 08       	ld.w	r8,r9[0x0]
8000a85c:	30 0a       	mov	r10,0
8000a85e:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a862:	93 08       	st.w	r9[0x0],r8
8000a864:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a868:	70 48       	ld.w	r8,r8[0x10]
8000a86a:	5d 18       	icall	r8
8000a86c:	30 18       	mov	r8,1
8000a86e:	10 9c       	mov	r12,r8
8000a870:	2f dd       	sub	sp,-12
8000a872:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a876:	00 00       	add	r0,r0
8000a878:	00 00       	add	r0,r0
8000a87a:	08 60       	and	r0,r4

8000a87c <udd_ep_run>:
8000a87c:	eb cd 40 80 	pushm	r7,lr
8000a880:	1a 97       	mov	r7,sp
8000a882:	20 7d       	sub	sp,28
8000a884:	ef 4a ff ec 	st.w	r7[-20],r10
8000a888:	ef 49 ff e8 	st.w	r7[-24],r9
8000a88c:	ef 48 ff e4 	st.w	r7[-28],r8
8000a890:	18 98       	mov	r8,r12
8000a892:	ef 68 ff f4 	st.b	r7[-12],r8
8000a896:	16 98       	mov	r8,r11
8000a898:	ef 68 ff f0 	st.b	r7[-16],r8
8000a89c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a8a0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a8a4:	ef 68 ff f4 	st.b	r7[-12],r8
8000a8a8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a8ac:	30 28       	mov	r8,2
8000a8ae:	f0 09 18 00 	cp.b	r9,r8
8000a8b2:	e0 88 00 04 	brls	8000a8ba <udd_ep_run+0x3e>
8000a8b6:	30 08       	mov	r8,0
8000a8b8:	c6 88       	rjmp	8000a988 <udd_ep_run+0x10c>
8000a8ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a8be:	f0 c9 00 01 	sub	r9,r8,1
8000a8c2:	12 98       	mov	r8,r9
8000a8c4:	a3 68       	lsl	r8,0x2
8000a8c6:	12 08       	add	r8,r9
8000a8c8:	a3 68       	lsl	r8,0x2
8000a8ca:	10 99       	mov	r9,r8
8000a8cc:	4b 18       	lddpc	r8,8000a990 <udd_ep_run+0x114>
8000a8ce:	f2 08 00 08 	add	r8,r9,r8
8000a8d2:	ef 48 ff f8 	st.w	r7[-8],r8
8000a8d6:	fe 68 00 00 	mov	r8,-131072
8000a8da:	70 79       	ld.w	r9,r8[0x1c]
8000a8dc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a8e0:	30 1a       	mov	r10,1
8000a8e2:	f4 08 09 48 	lsl	r8,r10,r8
8000a8e6:	f3 e8 00 08 	and	r8,r9,r8
8000a8ea:	c1 00       	breq	8000a90a <udd_ep_run+0x8e>
8000a8ec:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a8f0:	a3 68       	lsl	r8,0x2
8000a8f2:	e0 38 fe 40 	sub	r8,130624
8000a8f6:	70 08       	ld.w	r8,r8[0x0]
8000a8f8:	e6 18 00 08 	andh	r8,0x8,COH
8000a8fc:	c0 71       	brne	8000a90a <udd_ep_run+0x8e>
8000a8fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a902:	70 08       	ld.w	r8,r8[0x0]
8000a904:	e6 18 20 00 	andh	r8,0x2000,COH
8000a908:	c0 30       	breq	8000a90e <udd_ep_run+0x92>
8000a90a:	30 08       	mov	r8,0
8000a90c:	c3 e8       	rjmp	8000a988 <udd_ep_run+0x10c>
8000a90e:	f0 1f 00 22 	mcall	8000a994 <udd_ep_run+0x118>
8000a912:	18 98       	mov	r8,r12
8000a914:	ef 48 ff fc 	st.w	r7[-4],r8
8000a918:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a91c:	70 08       	ld.w	r8,r8[0x0]
8000a91e:	e6 18 80 00 	andh	r8,0x8000,COH
8000a922:	c0 70       	breq	8000a930 <udd_ep_run+0xb4>
8000a924:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a928:	f0 1f 00 1c 	mcall	8000a998 <udd_ep_run+0x11c>
8000a92c:	30 08       	mov	r8,0
8000a92e:	c2 d8       	rjmp	8000a988 <udd_ep_run+0x10c>
8000a930:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a934:	72 08       	ld.w	r8,r9[0x0]
8000a936:	30 1a       	mov	r10,1
8000a938:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a93c:	93 08       	st.w	r9[0x0],r8
8000a93e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a942:	f0 1f 00 16 	mcall	8000a998 <udd_ep_run+0x11c>
8000a946:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a94a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a94e:	91 19       	st.w	r8[0x4],r9
8000a950:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a954:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a958:	91 29       	st.w	r8[0x8],r9
8000a95a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a95e:	30 09       	mov	r9,0
8000a960:	91 39       	st.w	r8[0xc],r9
8000a962:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a966:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a96a:	91 49       	st.w	r8[0x10],r9
8000a96c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a970:	72 08       	ld.w	r8,r9[0x0]
8000a972:	ef 3a ff f0 	ld.ub	r10,r7[-16]
8000a976:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000a97a:	93 08       	st.w	r9[0x0],r8
8000a97c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a980:	10 9c       	mov	r12,r8
8000a982:	f0 1f 00 07 	mcall	8000a99c <udd_ep_run+0x120>
8000a986:	30 18       	mov	r8,1
8000a988:	10 9c       	mov	r12,r8
8000a98a:	2f 9d       	sub	sp,-28
8000a98c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a990:	00 00       	add	r0,r0
8000a992:	08 60       	and	r0,r4
8000a994:	80 00       	ld.sh	r0,r0[0x0]
8000a996:	9c 60       	ld.sh	r0,lr[0xc]
8000a998:	80 00       	ld.sh	r0,r0[0x0]
8000a99a:	9c 7e       	ld.sh	lr,lr[0xe]
8000a99c:	80 00       	ld.sh	r0,r0[0x0]
8000a99e:	b6 d4       	st.b	r11[0x5],r4

8000a9a0 <udd_ep_abort>:
8000a9a0:	eb cd 40 80 	pushm	r7,lr
8000a9a4:	1a 97       	mov	r7,sp
8000a9a6:	20 2d       	sub	sp,8
8000a9a8:	18 98       	mov	r8,r12
8000a9aa:	ef 68 ff f8 	st.b	r7[-8],r8
8000a9ae:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a9b2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a9b6:	ef 68 ff ff 	st.b	r7[-1],r8
8000a9ba:	fe 68 00 00 	mov	r8,-131072
8000a9be:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a9c2:	20 19       	sub	r9,1
8000a9c4:	fc 1a 02 00 	movh	r10,0x200
8000a9c8:	f4 09 09 49 	lsl	r9,r10,r9
8000a9cc:	91 59       	st.w	r8[0x14],r9
8000a9ce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a9d2:	a5 68       	lsl	r8,0x4
8000a9d4:	e0 38 fd 00 	sub	r8,130304
8000a9d8:	30 09       	mov	r9,0
8000a9da:	91 29       	st.w	r8[0x8],r9
8000a9dc:	fe 68 00 00 	mov	r8,-131072
8000a9e0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a9e4:	e0 6a 10 00 	mov	r10,4096
8000a9e8:	f4 09 09 49 	lsl	r9,r10,r9
8000a9ec:	91 59       	st.w	r8[0x14],r9
8000a9ee:	c1 28       	rjmp	8000aa12 <udd_ep_abort+0x72>
8000a9f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a9f4:	a3 68       	lsl	r8,0x2
8000a9f6:	e0 38 fe 10 	sub	r8,130576
8000a9fa:	e0 69 20 00 	mov	r9,8192
8000a9fe:	91 09       	st.w	r8[0x0],r9
8000aa00:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aa04:	a3 68       	lsl	r8,0x2
8000aa06:	e0 38 fe 40 	sub	r8,130624
8000aa0a:	70 08       	ld.w	r8,r8[0x0]
8000aa0c:	e2 18 20 00 	andl	r8,0x2000,COH
8000aa10:	cf 81       	brne	8000aa00 <udd_ep_abort+0x60>
8000aa12:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aa16:	a3 68       	lsl	r8,0x2
8000aa18:	e0 38 fe d0 	sub	r8,130768
8000aa1c:	70 08       	ld.w	r8,r8[0x0]
8000aa1e:	e2 18 30 00 	andl	r8,0x3000,COH
8000aa22:	ad 88       	lsr	r8,0xc
8000aa24:	ce 61       	brne	8000a9f0 <udd_ep_abort+0x50>
8000aa26:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000aa2a:	10 9c       	mov	r12,r8
8000aa2c:	f0 1f 00 03 	mcall	8000aa38 <udd_ep_abort+0x98>
8000aa30:	2f ed       	sub	sp,-8
8000aa32:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa36:	00 00       	add	r0,r0
8000aa38:	80 00       	ld.sh	r0,r0[0x0]
8000aa3a:	b6 04       	st.h	r11[0x0],r4

8000aa3c <udd_ep_wait_stall_clear>:
8000aa3c:	eb cd 40 80 	pushm	r7,lr
8000aa40:	1a 97       	mov	r7,sp
8000aa42:	20 3d       	sub	sp,12
8000aa44:	18 98       	mov	r8,r12
8000aa46:	ef 4b ff f4 	st.w	r7[-12],r11
8000aa4a:	ef 68 ff f8 	st.b	r7[-8],r8
8000aa4e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000aa52:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000aa56:	ef 68 ff f8 	st.b	r7[-8],r8
8000aa5a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aa5e:	30 28       	mov	r8,2
8000aa60:	f0 09 18 00 	cp.b	r9,r8
8000aa64:	e0 88 00 04 	brls	8000aa6c <udd_ep_wait_stall_clear+0x30>
8000aa68:	30 08       	mov	r8,0
8000aa6a:	c4 48       	rjmp	8000aaf2 <udd_ep_wait_stall_clear+0xb6>
8000aa6c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000aa70:	f0 c9 00 01 	sub	r9,r8,1
8000aa74:	12 98       	mov	r8,r9
8000aa76:	a3 68       	lsl	r8,0x2
8000aa78:	12 08       	add	r8,r9
8000aa7a:	a3 68       	lsl	r8,0x2
8000aa7c:	10 99       	mov	r9,r8
8000aa7e:	4a 08       	lddpc	r8,8000aafc <udd_ep_wait_stall_clear+0xc0>
8000aa80:	f2 08 00 08 	add	r8,r9,r8
8000aa84:	ef 48 ff fc 	st.w	r7[-4],r8
8000aa88:	fe 68 00 00 	mov	r8,-131072
8000aa8c:	70 79       	ld.w	r9,r8[0x1c]
8000aa8e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000aa92:	30 1a       	mov	r10,1
8000aa94:	f4 08 09 48 	lsl	r8,r10,r8
8000aa98:	f3 e8 00 08 	and	r8,r9,r8
8000aa9c:	c0 31       	brne	8000aaa2 <udd_ep_wait_stall_clear+0x66>
8000aa9e:	30 08       	mov	r8,0
8000aaa0:	c2 98       	rjmp	8000aaf2 <udd_ep_wait_stall_clear+0xb6>
8000aaa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aaa6:	70 08       	ld.w	r8,r8[0x0]
8000aaa8:	e6 18 80 00 	andh	r8,0x8000,COH
8000aaac:	c0 30       	breq	8000aab2 <udd_ep_wait_stall_clear+0x76>
8000aaae:	30 08       	mov	r8,0
8000aab0:	c2 18       	rjmp	8000aaf2 <udd_ep_wait_stall_clear+0xb6>
8000aab2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000aab6:	a3 68       	lsl	r8,0x2
8000aab8:	e0 38 fe 40 	sub	r8,130624
8000aabc:	70 08       	ld.w	r8,r8[0x0]
8000aabe:	e6 18 00 08 	andh	r8,0x8,COH
8000aac2:	c0 71       	brne	8000aad0 <udd_ep_wait_stall_clear+0x94>
8000aac4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aac8:	70 08       	ld.w	r8,r8[0x0]
8000aaca:	e6 18 20 00 	andh	r8,0x2000,COH
8000aace:	c0 e0       	breq	8000aaea <udd_ep_wait_stall_clear+0xae>
8000aad0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aad4:	72 08       	ld.w	r8,r9[0x0]
8000aad6:	30 1a       	mov	r10,1
8000aad8:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000aadc:	93 08       	st.w	r9[0x0],r8
8000aade:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aae2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000aae6:	91 49       	st.w	r8[0x10],r9
8000aae8:	c0 48       	rjmp	8000aaf0 <udd_ep_wait_stall_clear+0xb4>
8000aaea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aaee:	5d 18       	icall	r8
8000aaf0:	30 18       	mov	r8,1
8000aaf2:	10 9c       	mov	r12,r8
8000aaf4:	2f dd       	sub	sp,-12
8000aaf6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aafa:	00 00       	add	r0,r0
8000aafc:	00 00       	add	r0,r0
8000aafe:	08 60       	and	r0,r4

8000ab00 <udd_test_mode_j>:
8000ab00:	eb cd 40 80 	pushm	r7,lr
8000ab04:	1a 97       	mov	r7,sp
8000ab06:	fe 68 00 00 	mov	r8,-131072
8000ab0a:	fe 69 00 00 	mov	r9,-131072
8000ab0e:	72 09       	ld.w	r9,r9[0x0]
8000ab10:	e0 19 f3 ff 	andl	r9,0xf3ff
8000ab14:	ab b9       	sbr	r9,0xb
8000ab16:	91 09       	st.w	r8[0x0],r9
8000ab18:	fe 68 00 00 	mov	r8,-131072
8000ab1c:	fe 69 00 00 	mov	r9,-131072
8000ab20:	72 09       	ld.w	r9,r9[0x0]
8000ab22:	ad b9       	sbr	r9,0xd
8000ab24:	91 09       	st.w	r8[0x0],r9
8000ab26:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ab2a <udd_test_mode_k>:
8000ab2a:	eb cd 40 80 	pushm	r7,lr
8000ab2e:	1a 97       	mov	r7,sp
8000ab30:	fe 68 00 00 	mov	r8,-131072
8000ab34:	fe 69 00 00 	mov	r9,-131072
8000ab38:	72 09       	ld.w	r9,r9[0x0]
8000ab3a:	e0 19 f3 ff 	andl	r9,0xf3ff
8000ab3e:	ab b9       	sbr	r9,0xb
8000ab40:	91 09       	st.w	r8[0x0],r9
8000ab42:	fe 68 00 00 	mov	r8,-131072
8000ab46:	fe 69 00 00 	mov	r9,-131072
8000ab4a:	72 09       	ld.w	r9,r9[0x0]
8000ab4c:	af a9       	sbr	r9,0xe
8000ab4e:	91 09       	st.w	r8[0x0],r9
8000ab50:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ab54 <udd_test_mode_se0_nak>:
8000ab54:	eb cd 40 80 	pushm	r7,lr
8000ab58:	1a 97       	mov	r7,sp
8000ab5a:	fe 68 00 00 	mov	r8,-131072
8000ab5e:	fe 69 00 00 	mov	r9,-131072
8000ab62:	72 09       	ld.w	r9,r9[0x0]
8000ab64:	e0 19 f3 ff 	andl	r9,0xf3ff
8000ab68:	ab b9       	sbr	r9,0xb
8000ab6a:	91 09       	st.w	r8[0x0],r9
8000ab6c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ab70 <udd_test_mode_packet>:
8000ab70:	eb cd 40 80 	pushm	r7,lr
8000ab74:	1a 97       	mov	r7,sp
8000ab76:	21 7d       	sub	sp,92
8000ab78:	4d c9       	lddpc	r9,8000ace8 <udd_test_mode_packet+0x178>
8000ab7a:	ee c8 00 5c 	sub	r8,r7,92
8000ab7e:	f2 ea 00 00 	ld.d	r10,r9[0]
8000ab82:	f0 eb 00 00 	st.d	r8[0],r10
8000ab86:	f2 ea 00 08 	ld.d	r10,r9[8]
8000ab8a:	f0 eb 00 08 	st.d	r8[8],r10
8000ab8e:	f2 ea 00 10 	ld.d	r10,r9[16]
8000ab92:	f0 eb 00 10 	st.d	r8[16],r10
8000ab96:	f2 ea 00 18 	ld.d	r10,r9[24]
8000ab9a:	f0 eb 00 18 	st.d	r8[24],r10
8000ab9e:	f2 ea 00 20 	ld.d	r10,r9[32]
8000aba2:	f0 eb 00 20 	st.d	r8[32],r10
8000aba6:	f2 ea 00 28 	ld.d	r10,r9[40]
8000abaa:	f0 eb 00 28 	st.d	r8[40],r10
8000abae:	72 ca       	ld.w	r10,r9[0x30]
8000abb0:	91 ca       	st.w	r8[0x30],r10
8000abb2:	f3 39 00 34 	ld.ub	r9,r9[52]
8000abb6:	f1 69 00 34 	st.b	r8[52],r9
8000abba:	fe 68 00 00 	mov	r8,-131072
8000abbe:	fe 69 00 00 	mov	r9,-131072
8000abc2:	72 79       	ld.w	r9,r9[0x1c]
8000abc4:	a1 c9       	cbr	r9,0x0
8000abc6:	91 79       	st.w	r8[0x1c],r9
8000abc8:	fe 68 01 00 	mov	r8,-130816
8000abcc:	fe 69 01 00 	mov	r9,-130816
8000abd0:	72 09       	ld.w	r9,r9[0x0]
8000abd2:	12 9a       	mov	r10,r9
8000abd4:	e0 1a e6 83 	andl	r10,0xe683
8000abd8:	34 09       	mov	r9,64
8000abda:	ef 49 ff f8 	st.w	r7[-8],r9
8000abde:	30 89       	mov	r9,8
8000abe0:	ef 49 ff fc 	st.w	r7[-4],r9
8000abe4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000abe8:	ee fb ff fc 	ld.w	r11,r7[-4]
8000abec:	f2 0b 0c 49 	max	r9,r9,r11
8000abf0:	ef 49 ff f4 	st.w	r7[-12],r9
8000abf4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000abf8:	ef 49 ff ec 	st.w	r7[-20],r9
8000abfc:	e0 69 04 00 	mov	r9,1024
8000ac00:	ef 49 ff f0 	st.w	r7[-16],r9
8000ac04:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000ac08:	ee fb ff f0 	ld.w	r11,r7[-16]
8000ac0c:	f2 0b 0d 49 	min	r9,r9,r11
8000ac10:	ef 49 ff e8 	st.w	r7[-24],r9
8000ac14:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000ac18:	a1 79       	lsl	r9,0x1
8000ac1a:	20 19       	sub	r9,1
8000ac1c:	f2 09 12 00 	clz	r9,r9
8000ac20:	f2 09 11 1c 	rsub	r9,r9,28
8000ac24:	a5 69       	lsl	r9,0x4
8000ac26:	e2 19 08 7c 	andl	r9,0x87c,COH
8000ac2a:	f5 e9 10 09 	or	r9,r10,r9
8000ac2e:	e8 19 11 00 	orl	r9,0x1100
8000ac32:	91 09       	st.w	r8[0x0],r9
8000ac34:	fe 68 01 00 	mov	r8,-130816
8000ac38:	fe 69 01 00 	mov	r9,-130816
8000ac3c:	72 09       	ld.w	r9,r9[0x0]
8000ac3e:	a1 b9       	sbr	r9,0x1
8000ac40:	91 09       	st.w	r8[0x0],r9
8000ac42:	fe 68 00 00 	mov	r8,-131072
8000ac46:	fe 69 00 00 	mov	r9,-131072
8000ac4a:	72 79       	ld.w	r9,r9[0x1c]
8000ac4c:	a1 a9       	sbr	r9,0x0
8000ac4e:	91 79       	st.w	r8[0x1c],r9
8000ac50:	fe 68 00 00 	mov	r8,-131072
8000ac54:	fe 69 00 00 	mov	r9,-131072
8000ac58:	72 09       	ld.w	r9,r9[0x0]
8000ac5a:	e0 19 f3 ff 	andl	r9,0xf3ff
8000ac5e:	ab b9       	sbr	r9,0xb
8000ac60:	91 09       	st.w	r8[0x0],r9
8000ac62:	fe 68 00 00 	mov	r8,-131072
8000ac66:	fe 69 00 00 	mov	r9,-131072
8000ac6a:	72 09       	ld.w	r9,r9[0x0]
8000ac6c:	af b9       	sbr	r9,0xf
8000ac6e:	91 09       	st.w	r8[0x0],r9
8000ac70:	fc 18 e0 00 	movh	r8,0xe000
8000ac74:	ef 48 ff dc 	st.w	r7[-36],r8
8000ac78:	ee c8 00 5c 	sub	r8,r7,92
8000ac7c:	ef 48 ff e0 	st.w	r7[-32],r8
8000ac80:	30 08       	mov	r8,0
8000ac82:	ef 68 ff db 	st.b	r7[-37],r8
8000ac86:	c1 68       	rjmp	8000acb2 <udd_test_mode_packet+0x142>
8000ac88:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000ac8c:	11 88       	ld.ub	r8,r8[0x0]
8000ac8e:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000ac92:	b2 88       	st.b	r9[0x0],r8
8000ac94:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000ac98:	2f f8       	sub	r8,-1
8000ac9a:	ef 48 ff dc 	st.w	r7[-36],r8
8000ac9e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000aca2:	2f f8       	sub	r8,-1
8000aca4:	ef 48 ff e0 	st.w	r7[-32],r8
8000aca8:	ef 38 ff db 	ld.ub	r8,r7[-37]
8000acac:	2f f8       	sub	r8,-1
8000acae:	ef 68 ff db 	st.b	r7[-37],r8
8000acb2:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000acb6:	33 48       	mov	r8,52
8000acb8:	f0 09 18 00 	cp.b	r9,r8
8000acbc:	fe 98 ff e6 	brls	8000ac88 <udd_test_mode_packet+0x118>
8000acc0:	f0 1f 00 0b 	mcall	8000acec <udd_test_mode_packet+0x17c>
8000acc4:	18 98       	mov	r8,r12
8000acc6:	ef 48 ff e4 	st.w	r7[-28],r8
8000acca:	fe 68 01 f0 	mov	r8,-130576
8000acce:	30 19       	mov	r9,1
8000acd0:	91 09       	st.w	r8[0x0],r9
8000acd2:	ee fc ff e4 	ld.w	r12,r7[-28]
8000acd6:	f0 1f 00 07 	mcall	8000acf0 <udd_test_mode_packet+0x180>
8000acda:	fe 68 01 60 	mov	r8,-130720
8000acde:	30 19       	mov	r9,1
8000ace0:	91 09       	st.w	r8[0x0],r9
8000ace2:	2e 9d       	sub	sp,-92
8000ace4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ace8:	80 00       	ld.sh	r0,r0[0x0]
8000acea:	f3 fc 80 00 	ld.wls	r12,r9[0x0]
8000acee:	9c 60       	ld.sh	r0,lr[0xc]
8000acf0:	80 00       	ld.sh	r0,r0[0x0]
8000acf2:	9c 7e       	ld.sh	lr,lr[0xe]

8000acf4 <udd_reset_ep_ctrl>:
8000acf4:	eb cd 40 80 	pushm	r7,lr
8000acf8:	1a 97       	mov	r7,sp
8000acfa:	20 7d       	sub	sp,28
8000acfc:	fe 68 00 00 	mov	r8,-131072
8000ad00:	fe 69 00 00 	mov	r9,-131072
8000ad04:	72 09       	ld.w	r9,r9[0x0]
8000ad06:	e0 19 ff 80 	andl	r9,0xff80
8000ad0a:	91 09       	st.w	r8[0x0],r9
8000ad0c:	fe 68 00 00 	mov	r8,-131072
8000ad10:	fe 69 00 00 	mov	r9,-131072
8000ad14:	72 09       	ld.w	r9,r9[0x0]
8000ad16:	a7 b9       	sbr	r9,0x7
8000ad18:	91 09       	st.w	r8[0x0],r9
8000ad1a:	fe 68 01 00 	mov	r8,-130816
8000ad1e:	fe 69 01 00 	mov	r9,-130816
8000ad22:	72 09       	ld.w	r9,r9[0x0]
8000ad24:	12 9a       	mov	r10,r9
8000ad26:	e0 1a e6 83 	andl	r10,0xe683
8000ad2a:	34 09       	mov	r9,64
8000ad2c:	ef 49 ff f8 	st.w	r7[-8],r9
8000ad30:	30 89       	mov	r9,8
8000ad32:	ef 49 ff fc 	st.w	r7[-4],r9
8000ad36:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ad3a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ad3e:	f2 0b 0c 49 	max	r9,r9,r11
8000ad42:	ef 49 ff f4 	st.w	r7[-12],r9
8000ad46:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ad4a:	ef 49 ff ec 	st.w	r7[-20],r9
8000ad4e:	e0 69 04 00 	mov	r9,1024
8000ad52:	ef 49 ff f0 	st.w	r7[-16],r9
8000ad56:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000ad5a:	ee fb ff f0 	ld.w	r11,r7[-16]
8000ad5e:	f2 0b 0d 49 	min	r9,r9,r11
8000ad62:	ef 49 ff e8 	st.w	r7[-24],r9
8000ad66:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000ad6a:	a1 79       	lsl	r9,0x1
8000ad6c:	20 19       	sub	r9,1
8000ad6e:	f2 09 12 00 	clz	r9,r9
8000ad72:	f2 09 11 1c 	rsub	r9,r9,28
8000ad76:	a5 69       	lsl	r9,0x4
8000ad78:	e2 19 19 7c 	andl	r9,0x197c,COH
8000ad7c:	f5 e9 10 09 	or	r9,r10,r9
8000ad80:	91 09       	st.w	r8[0x0],r9
8000ad82:	fe 68 01 00 	mov	r8,-130816
8000ad86:	fe 69 01 00 	mov	r9,-130816
8000ad8a:	72 09       	ld.w	r9,r9[0x0]
8000ad8c:	a1 b9       	sbr	r9,0x1
8000ad8e:	91 09       	st.w	r8[0x0],r9
8000ad90:	fe 68 00 00 	mov	r8,-131072
8000ad94:	fe 69 00 00 	mov	r9,-131072
8000ad98:	72 79       	ld.w	r9,r9[0x1c]
8000ad9a:	a1 a9       	sbr	r9,0x0
8000ad9c:	91 79       	st.w	r8[0x1c],r9
8000ad9e:	f0 1f 00 0d 	mcall	8000add0 <udd_reset_ep_ctrl+0xdc>
8000ada2:	18 98       	mov	r8,r12
8000ada4:	ef 48 ff e4 	st.w	r7[-28],r8
8000ada8:	fe 68 01 f0 	mov	r8,-130576
8000adac:	30 49       	mov	r9,4
8000adae:	91 09       	st.w	r8[0x0],r9
8000adb0:	fe 68 01 f0 	mov	r8,-130576
8000adb4:	30 29       	mov	r9,2
8000adb6:	91 09       	st.w	r8[0x0],r9
8000adb8:	fe 68 00 00 	mov	r8,-131072
8000adbc:	e0 69 10 00 	mov	r9,4096
8000adc0:	91 69       	st.w	r8[0x18],r9
8000adc2:	ee fc ff e4 	ld.w	r12,r7[-28]
8000adc6:	f0 1f 00 04 	mcall	8000add4 <udd_reset_ep_ctrl+0xe0>
8000adca:	2f 9d       	sub	sp,-28
8000adcc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000add0:	80 00       	ld.sh	r0,r0[0x0]
8000add2:	9c 60       	ld.sh	r0,lr[0xc]
8000add4:	80 00       	ld.sh	r0,r0[0x0]
8000add6:	9c 7e       	ld.sh	lr,lr[0xe]

8000add8 <udd_ctrl_init>:
8000add8:	eb cd 40 80 	pushm	r7,lr
8000addc:	1a 97       	mov	r7,sp
8000adde:	20 1d       	sub	sp,4
8000ade0:	f0 1f 00 10 	mcall	8000ae20 <udd_ctrl_init+0x48>
8000ade4:	18 98       	mov	r8,r12
8000ade6:	ef 48 ff fc 	st.w	r7[-4],r8
8000adea:	fe 68 02 20 	mov	r8,-130528
8000adee:	30 19       	mov	r9,1
8000adf0:	91 09       	st.w	r8[0x0],r9
8000adf2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000adf6:	f0 1f 00 0c 	mcall	8000ae24 <udd_ctrl_init+0x4c>
8000adfa:	fe 68 01 60 	mov	r8,-130720
8000adfe:	30 29       	mov	r9,2
8000ae00:	91 09       	st.w	r8[0x0],r9
8000ae02:	48 a8       	lddpc	r8,8000ae28 <udd_ctrl_init+0x50>
8000ae04:	30 09       	mov	r9,0
8000ae06:	91 49       	st.w	r8[0x10],r9
8000ae08:	48 88       	lddpc	r8,8000ae28 <udd_ctrl_init+0x50>
8000ae0a:	30 09       	mov	r9,0
8000ae0c:	91 59       	st.w	r8[0x14],r9
8000ae0e:	48 79       	lddpc	r9,8000ae28 <udd_ctrl_init+0x50>
8000ae10:	30 08       	mov	r8,0
8000ae12:	b2 68       	st.h	r9[0xc],r8
8000ae14:	48 68       	lddpc	r8,8000ae2c <udd_ctrl_init+0x54>
8000ae16:	30 09       	mov	r9,0
8000ae18:	91 09       	st.w	r8[0x0],r9
8000ae1a:	2f fd       	sub	sp,-4
8000ae1c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ae20:	80 00       	ld.sh	r0,r0[0x0]
8000ae22:	9c 60       	ld.sh	r0,lr[0xc]
8000ae24:	80 00       	ld.sh	r0,r0[0x0]
8000ae26:	9c 7e       	ld.sh	lr,lr[0xe]
8000ae28:	00 00       	add	r0,r0
8000ae2a:	0d e4       	ld.ub	r4,r6[0x6]
8000ae2c:	00 00       	add	r0,r0
8000ae2e:	08 58       	eor	r8,r4

8000ae30 <udd_ctrl_setup_received>:
8000ae30:	eb cd 40 80 	pushm	r7,lr
8000ae34:	1a 97       	mov	r7,sp
8000ae36:	20 3d       	sub	sp,12
8000ae38:	4c b8       	lddpc	r8,8000af64 <udd_ctrl_setup_received+0x134>
8000ae3a:	70 08       	ld.w	r8,r8[0x0]
8000ae3c:	58 08       	cp.w	r8,0
8000ae3e:	c0 50       	breq	8000ae48 <udd_ctrl_setup_received+0x18>
8000ae40:	f0 1f 00 4a 	mcall	8000af68 <udd_ctrl_setup_received+0x138>
8000ae44:	f0 1f 00 4a 	mcall	8000af6c <udd_ctrl_setup_received+0x13c>
8000ae48:	fe 68 01 30 	mov	r8,-130768
8000ae4c:	70 08       	ld.w	r8,r8[0x0]
8000ae4e:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000ae52:	b5 88       	lsr	r8,0x14
8000ae54:	58 88       	cp.w	r8,8
8000ae56:	c0 80       	breq	8000ae66 <udd_ctrl_setup_received+0x36>
8000ae58:	f0 1f 00 46 	mcall	8000af70 <udd_ctrl_setup_received+0x140>
8000ae5c:	fe 68 01 60 	mov	r8,-130720
8000ae60:	30 49       	mov	r9,4
8000ae62:	91 09       	st.w	r8[0x0],r9
8000ae64:	c7 d8       	rjmp	8000af5e <udd_ctrl_setup_received+0x12e>
8000ae66:	fc 18 e0 00 	movh	r8,0xe000
8000ae6a:	ef 48 ff fc 	st.w	r7[-4],r8
8000ae6e:	30 08       	mov	r8,0
8000ae70:	ef 68 ff fb 	st.b	r7[-5],r8
8000ae74:	c1 38       	rjmp	8000ae9a <udd_ctrl_setup_received+0x6a>
8000ae76:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000ae7a:	4b f8       	lddpc	r8,8000af74 <udd_ctrl_setup_received+0x144>
8000ae7c:	10 09       	add	r9,r8
8000ae7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ae82:	11 88       	ld.ub	r8,r8[0x0]
8000ae84:	b2 88       	st.b	r9[0x0],r8
8000ae86:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ae8a:	2f f8       	sub	r8,-1
8000ae8c:	ef 48 ff fc 	st.w	r7[-4],r8
8000ae90:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000ae94:	2f f8       	sub	r8,-1
8000ae96:	ef 68 ff fb 	st.b	r7[-5],r8
8000ae9a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000ae9e:	30 78       	mov	r8,7
8000aea0:	f0 09 18 00 	cp.b	r9,r8
8000aea4:	fe 98 ff e9 	brls	8000ae76 <udd_ctrl_setup_received+0x46>
8000aea8:	4b 38       	lddpc	r8,8000af74 <udd_ctrl_setup_received+0x144>
8000aeaa:	90 18       	ld.sh	r8,r8[0x2]
8000aeac:	5c 88       	casts.h	r8
8000aeae:	5c c8       	swap.bh	r8
8000aeb0:	5c 88       	casts.h	r8
8000aeb2:	4b 19       	lddpc	r9,8000af74 <udd_ctrl_setup_received+0x144>
8000aeb4:	b2 18       	st.h	r9[0x2],r8
8000aeb6:	4b 08       	lddpc	r8,8000af74 <udd_ctrl_setup_received+0x144>
8000aeb8:	90 28       	ld.sh	r8,r8[0x4]
8000aeba:	5c 88       	casts.h	r8
8000aebc:	5c c8       	swap.bh	r8
8000aebe:	5c 88       	casts.h	r8
8000aec0:	4a d9       	lddpc	r9,8000af74 <udd_ctrl_setup_received+0x144>
8000aec2:	b2 28       	st.h	r9[0x4],r8
8000aec4:	4a c8       	lddpc	r8,8000af74 <udd_ctrl_setup_received+0x144>
8000aec6:	90 38       	ld.sh	r8,r8[0x6]
8000aec8:	5c 88       	casts.h	r8
8000aeca:	5c c8       	swap.bh	r8
8000aecc:	5c 88       	casts.h	r8
8000aece:	4a a9       	lddpc	r9,8000af74 <udd_ctrl_setup_received+0x144>
8000aed0:	b2 38       	st.h	r9[0x6],r8
8000aed2:	f0 1f 00 2a 	mcall	8000af78 <udd_ctrl_setup_received+0x148>
8000aed6:	18 98       	mov	r8,r12
8000aed8:	ec 18 00 01 	eorl	r8,0x1
8000aedc:	5c 58       	castu.b	r8
8000aede:	c0 80       	breq	8000aeee <udd_ctrl_setup_received+0xbe>
8000aee0:	f0 1f 00 24 	mcall	8000af70 <udd_ctrl_setup_received+0x140>
8000aee4:	fe 68 01 60 	mov	r8,-130720
8000aee8:	30 49       	mov	r9,4
8000aeea:	91 09       	st.w	r8[0x0],r9
8000aeec:	c3 98       	rjmp	8000af5e <udd_ctrl_setup_received+0x12e>
8000aeee:	fe 68 01 60 	mov	r8,-130720
8000aef2:	30 49       	mov	r9,4
8000aef4:	91 09       	st.w	r8[0x0],r9
8000aef6:	4a 08       	lddpc	r8,8000af74 <udd_ctrl_setup_received+0x144>
8000aef8:	11 88       	ld.ub	r8,r8[0x0]
8000aefa:	10 99       	mov	r9,r8
8000aefc:	30 08       	mov	r8,0
8000aefe:	f0 09 18 00 	cp.b	r9,r8
8000af02:	c0 d4       	brge	8000af1c <udd_ctrl_setup_received+0xec>
8000af04:	49 e9       	lddpc	r9,8000af7c <udd_ctrl_setup_received+0x14c>
8000af06:	30 08       	mov	r8,0
8000af08:	b2 08       	st.h	r9[0x0],r8
8000af0a:	49 e9       	lddpc	r9,8000af80 <udd_ctrl_setup_received+0x150>
8000af0c:	30 08       	mov	r8,0
8000af0e:	b2 08       	st.h	r9[0x0],r8
8000af10:	49 58       	lddpc	r8,8000af64 <udd_ctrl_setup_received+0x134>
8000af12:	30 29       	mov	r9,2
8000af14:	91 09       	st.w	r8[0x0],r9
8000af16:	f0 1f 00 1c 	mcall	8000af84 <udd_ctrl_setup_received+0x154>
8000af1a:	c2 28       	rjmp	8000af5e <udd_ctrl_setup_received+0x12e>
8000af1c:	49 68       	lddpc	r8,8000af74 <udd_ctrl_setup_received+0x144>
8000af1e:	90 38       	ld.sh	r8,r8[0x6]
8000af20:	58 08       	cp.w	r8,0
8000af22:	c0 41       	brne	8000af2a <udd_ctrl_setup_received+0xfa>
8000af24:	f0 1f 00 19 	mcall	8000af88 <udd_ctrl_setup_received+0x158>
8000af28:	c1 b8       	rjmp	8000af5e <udd_ctrl_setup_received+0x12e>
8000af2a:	49 59       	lddpc	r9,8000af7c <udd_ctrl_setup_received+0x14c>
8000af2c:	30 08       	mov	r8,0
8000af2e:	b2 08       	st.h	r9[0x0],r8
8000af30:	49 49       	lddpc	r9,8000af80 <udd_ctrl_setup_received+0x150>
8000af32:	30 08       	mov	r8,0
8000af34:	b2 08       	st.h	r9[0x0],r8
8000af36:	48 c8       	lddpc	r8,8000af64 <udd_ctrl_setup_received+0x134>
8000af38:	30 19       	mov	r9,1
8000af3a:	91 09       	st.w	r8[0x0],r9
8000af3c:	fe 68 01 60 	mov	r8,-130720
8000af40:	31 09       	mov	r9,16
8000af42:	91 09       	st.w	r8[0x0],r9
8000af44:	f0 1f 00 12 	mcall	8000af8c <udd_ctrl_setup_received+0x15c>
8000af48:	18 98       	mov	r8,r12
8000af4a:	ef 48 ff f4 	st.w	r7[-12],r8
8000af4e:	fe 68 01 f0 	mov	r8,-130576
8000af52:	31 09       	mov	r9,16
8000af54:	91 09       	st.w	r8[0x0],r9
8000af56:	ee fc ff f4 	ld.w	r12,r7[-12]
8000af5a:	f0 1f 00 0e 	mcall	8000af90 <udd_ctrl_setup_received+0x160>
8000af5e:	2f dd       	sub	sp,-12
8000af60:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af64:	00 00       	add	r0,r0
8000af66:	08 58       	eor	r8,r4
8000af68:	80 00       	ld.sh	r0,r0[0x0]
8000af6a:	b4 58       	st.h	r10[0xa],r8
8000af6c:	80 00       	ld.sh	r0,r0[0x0]
8000af6e:	ad d8       	cbr	r8,0xd
8000af70:	80 00       	ld.sh	r0,r0[0x0]
8000af72:	b3 a0       	sbr	r0,0x12
8000af74:	00 00       	add	r0,r0
8000af76:	0d e4       	ld.ub	r4,r6[0x6]
8000af78:	80 00       	ld.sh	r0,r0[0x0]
8000af7a:	e2 30 00 00 	sub	r0,196608
8000af7e:	08 5c       	eor	r12,r4
8000af80:	00 00       	add	r0,r0
8000af82:	08 5e       	eor	lr,r4
8000af84:	80 00       	ld.sh	r0,r0[0x0]
8000af86:	af 94       	lsr	r4,0xf
8000af88:	80 00       	ld.sh	r0,r0[0x0]
8000af8a:	b3 c0       	cbr	r0,0x12
8000af8c:	80 00       	ld.sh	r0,r0[0x0]
8000af8e:	9c 60       	ld.sh	r0,lr[0xc]
8000af90:	80 00       	ld.sh	r0,r0[0x0]
8000af92:	9c 7e       	ld.sh	lr,lr[0xe]

8000af94 <udd_ctrl_in_sent>:
8000af94:	eb cd 40 80 	pushm	r7,lr
8000af98:	1a 97       	mov	r7,sp
8000af9a:	20 4d       	sub	sp,16
8000af9c:	f0 1f 00 5c 	mcall	8000b10c <udd_ctrl_in_sent+0x178>
8000afa0:	18 98       	mov	r8,r12
8000afa2:	ef 48 ff fc 	st.w	r7[-4],r8
8000afa6:	fe 68 02 20 	mov	r8,-130528
8000afaa:	30 19       	mov	r9,1
8000afac:	91 09       	st.w	r8[0x0],r9
8000afae:	ee fc ff fc 	ld.w	r12,r7[-4]
8000afb2:	f0 1f 00 58 	mcall	8000b110 <udd_ctrl_in_sent+0x17c>
8000afb6:	4d 88       	lddpc	r8,8000b114 <udd_ctrl_in_sent+0x180>
8000afb8:	70 08       	ld.w	r8,r8[0x0]
8000afba:	58 38       	cp.w	r8,3
8000afbc:	c0 61       	brne	8000afc8 <udd_ctrl_in_sent+0x34>
8000afbe:	f0 1f 00 57 	mcall	8000b118 <udd_ctrl_in_sent+0x184>
8000afc2:	f0 1f 00 57 	mcall	8000b11c <udd_ctrl_in_sent+0x188>
8000afc6:	c9 f8       	rjmp	8000b104 <udd_ctrl_in_sent+0x170>
8000afc8:	4d 68       	lddpc	r8,8000b120 <udd_ctrl_in_sent+0x18c>
8000afca:	90 69       	ld.sh	r9,r8[0xc]
8000afcc:	4d 68       	lddpc	r8,8000b124 <udd_ctrl_in_sent+0x190>
8000afce:	90 08       	ld.sh	r8,r8[0x0]
8000afd0:	10 19       	sub	r9,r8
8000afd2:	ef 59 ff f0 	st.h	r7[-16],r9
8000afd6:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000afda:	30 08       	mov	r8,0
8000afdc:	f0 09 19 00 	cp.h	r9,r8
8000afe0:	c2 b1       	brne	8000b036 <udd_ctrl_in_sent+0xa2>
8000afe2:	4d 28       	lddpc	r8,8000b128 <udd_ctrl_in_sent+0x194>
8000afe4:	90 09       	ld.sh	r9,r8[0x0]
8000afe6:	4d 08       	lddpc	r8,8000b124 <udd_ctrl_in_sent+0x190>
8000afe8:	90 08       	ld.sh	r8,r8[0x0]
8000afea:	f2 08 00 08 	add	r8,r9,r8
8000afee:	5c 88       	casts.h	r8
8000aff0:	4c e9       	lddpc	r9,8000b128 <udd_ctrl_in_sent+0x194>
8000aff2:	b2 08       	st.h	r9[0x0],r8
8000aff4:	4c b8       	lddpc	r8,8000b120 <udd_ctrl_in_sent+0x18c>
8000aff6:	90 39       	ld.sh	r9,r8[0x6]
8000aff8:	4c c8       	lddpc	r8,8000b128 <udd_ctrl_in_sent+0x194>
8000affa:	90 08       	ld.sh	r8,r8[0x0]
8000affc:	f0 09 19 00 	cp.h	r9,r8
8000b000:	c0 50       	breq	8000b00a <udd_ctrl_in_sent+0x76>
8000b002:	4c b8       	lddpc	r8,8000b12c <udd_ctrl_in_sent+0x198>
8000b004:	11 88       	ld.ub	r8,r8[0x0]
8000b006:	58 08       	cp.w	r8,0
8000b008:	c0 40       	breq	8000b010 <udd_ctrl_in_sent+0x7c>
8000b00a:	f0 1f 00 4a 	mcall	8000b130 <udd_ctrl_in_sent+0x19c>
8000b00e:	c7 b8       	rjmp	8000b104 <udd_ctrl_in_sent+0x170>
8000b010:	4c 48       	lddpc	r8,8000b120 <udd_ctrl_in_sent+0x18c>
8000b012:	70 58       	ld.w	r8,r8[0x14]
8000b014:	58 08       	cp.w	r8,0
8000b016:	c1 00       	breq	8000b036 <udd_ctrl_in_sent+0xa2>
8000b018:	4c 28       	lddpc	r8,8000b120 <udd_ctrl_in_sent+0x18c>
8000b01a:	70 58       	ld.w	r8,r8[0x14]
8000b01c:	5d 18       	icall	r8
8000b01e:	18 98       	mov	r8,r12
8000b020:	ec 18 00 01 	eorl	r8,0x1
8000b024:	5c 58       	castu.b	r8
8000b026:	c0 81       	brne	8000b036 <udd_ctrl_in_sent+0xa2>
8000b028:	4b f9       	lddpc	r9,8000b124 <udd_ctrl_in_sent+0x190>
8000b02a:	30 08       	mov	r8,0
8000b02c:	b2 08       	st.h	r9[0x0],r8
8000b02e:	4b d8       	lddpc	r8,8000b120 <udd_ctrl_in_sent+0x18c>
8000b030:	90 68       	ld.sh	r8,r8[0xc]
8000b032:	ef 58 ff f0 	st.h	r7[-16],r8
8000b036:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000b03a:	33 f8       	mov	r8,63
8000b03c:	f0 09 19 00 	cp.h	r9,r8
8000b040:	e0 88 00 09 	brls	8000b052 <udd_ctrl_in_sent+0xbe>
8000b044:	34 08       	mov	r8,64
8000b046:	ef 58 ff f0 	st.h	r7[-16],r8
8000b04a:	4b 99       	lddpc	r9,8000b12c <udd_ctrl_in_sent+0x198>
8000b04c:	30 08       	mov	r8,0
8000b04e:	b2 88       	st.b	r9[0x0],r8
8000b050:	c0 48       	rjmp	8000b058 <udd_ctrl_in_sent+0xc4>
8000b052:	4b 79       	lddpc	r9,8000b12c <udd_ctrl_in_sent+0x198>
8000b054:	30 18       	mov	r8,1
8000b056:	b2 88       	st.b	r9[0x0],r8
8000b058:	fc 18 e0 00 	movh	r8,0xe000
8000b05c:	ef 48 ff f4 	st.w	r7[-12],r8
8000b060:	4b 08       	lddpc	r8,8000b120 <udd_ctrl_in_sent+0x18c>
8000b062:	70 29       	ld.w	r9,r8[0x8]
8000b064:	4b 08       	lddpc	r8,8000b124 <udd_ctrl_in_sent+0x190>
8000b066:	90 08       	ld.sh	r8,r8[0x0]
8000b068:	5c 78       	castu.h	r8
8000b06a:	f2 08 00 08 	add	r8,r9,r8
8000b06e:	ef 48 ff f8 	st.w	r7[-8],r8
8000b072:	f0 1f 00 27 	mcall	8000b10c <udd_ctrl_in_sent+0x178>
8000b076:	18 98       	mov	r8,r12
8000b078:	ef 48 ff fc 	st.w	r7[-4],r8
8000b07c:	fe 68 01 30 	mov	r8,-130768
8000b080:	70 08       	ld.w	r8,r8[0x0]
8000b082:	e2 18 00 02 	andl	r8,0x2,COH
8000b086:	c0 90       	breq	8000b098 <udd_ctrl_in_sent+0x104>
8000b088:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b08c:	f0 1f 00 21 	mcall	8000b110 <udd_ctrl_in_sent+0x17c>
8000b090:	4a 18       	lddpc	r8,8000b114 <udd_ctrl_in_sent+0x180>
8000b092:	30 49       	mov	r9,4
8000b094:	91 09       	st.w	r8[0x0],r9
8000b096:	c3 78       	rjmp	8000b104 <udd_ctrl_in_sent+0x170>
8000b098:	30 08       	mov	r8,0
8000b09a:	ef 68 ff f3 	st.b	r7[-13],r8
8000b09e:	c1 68       	rjmp	8000b0ca <udd_ctrl_in_sent+0x136>
8000b0a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0a4:	11 88       	ld.ub	r8,r8[0x0]
8000b0a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b0aa:	b2 88       	st.b	r9[0x0],r8
8000b0ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b0b0:	2f f8       	sub	r8,-1
8000b0b2:	ef 48 ff f4 	st.w	r7[-12],r8
8000b0b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0ba:	2f f8       	sub	r8,-1
8000b0bc:	ef 48 ff f8 	st.w	r7[-8],r8
8000b0c0:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000b0c4:	2f f8       	sub	r8,-1
8000b0c6:	ef 68 ff f3 	st.b	r7[-13],r8
8000b0ca:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000b0ce:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000b0d2:	f0 09 19 00 	cp.h	r9,r8
8000b0d6:	fe 9b ff e5 	brhi	8000b0a0 <udd_ctrl_in_sent+0x10c>
8000b0da:	49 38       	lddpc	r8,8000b124 <udd_ctrl_in_sent+0x190>
8000b0dc:	90 08       	ld.sh	r8,r8[0x0]
8000b0de:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000b0e2:	f2 08 00 08 	add	r8,r9,r8
8000b0e6:	5c 88       	casts.h	r8
8000b0e8:	48 f9       	lddpc	r9,8000b124 <udd_ctrl_in_sent+0x190>
8000b0ea:	b2 08       	st.h	r9[0x0],r8
8000b0ec:	fe 68 01 60 	mov	r8,-130720
8000b0f0:	30 19       	mov	r9,1
8000b0f2:	91 09       	st.w	r8[0x0],r9
8000b0f4:	fe 68 01 f0 	mov	r8,-130576
8000b0f8:	30 19       	mov	r9,1
8000b0fa:	91 09       	st.w	r8[0x0],r9
8000b0fc:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b100:	f0 1f 00 04 	mcall	8000b110 <udd_ctrl_in_sent+0x17c>
8000b104:	2f cd       	sub	sp,-16
8000b106:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b10a:	00 00       	add	r0,r0
8000b10c:	80 00       	ld.sh	r0,r0[0x0]
8000b10e:	9c 60       	ld.sh	r0,lr[0xc]
8000b110:	80 00       	ld.sh	r0,r0[0x0]
8000b112:	9c 7e       	ld.sh	lr,lr[0xe]
8000b114:	00 00       	add	r0,r0
8000b116:	08 58       	eor	r8,r4
8000b118:	80 00       	ld.sh	r0,r0[0x0]
8000b11a:	b4 58       	st.h	r10[0xa],r8
8000b11c:	80 00       	ld.sh	r0,r0[0x0]
8000b11e:	ad d8       	cbr	r8,0xd
8000b120:	00 00       	add	r0,r0
8000b122:	0d e4       	ld.ub	r4,r6[0x6]
8000b124:	00 00       	add	r0,r0
8000b126:	08 5e       	eor	lr,r4
8000b128:	00 00       	add	r0,r0
8000b12a:	08 5c       	eor	r12,r4
8000b12c:	00 00       	add	r0,r0
8000b12e:	08 88       	andn	r8,r4
8000b130:	80 00       	ld.sh	r0,r0[0x0]
8000b132:	b4 14       	st.h	r10[0x2],r4

8000b134 <udd_ctrl_out_received>:
8000b134:	eb cd 40 80 	pushm	r7,lr
8000b138:	1a 97       	mov	r7,sp
8000b13a:	20 4d       	sub	sp,16
8000b13c:	4f 18       	lddpc	r8,8000b300 <udd_ctrl_out_received+0x1cc>
8000b13e:	70 08       	ld.w	r8,r8[0x0]
8000b140:	58 18       	cp.w	r8,1
8000b142:	c1 10       	breq	8000b164 <udd_ctrl_out_received+0x30>
8000b144:	4e f8       	lddpc	r8,8000b300 <udd_ctrl_out_received+0x1cc>
8000b146:	70 08       	ld.w	r8,r8[0x0]
8000b148:	58 28       	cp.w	r8,2
8000b14a:	c0 50       	breq	8000b154 <udd_ctrl_out_received+0x20>
8000b14c:	4e d8       	lddpc	r8,8000b300 <udd_ctrl_out_received+0x1cc>
8000b14e:	70 08       	ld.w	r8,r8[0x0]
8000b150:	58 48       	cp.w	r8,4
8000b152:	c0 41       	brne	8000b15a <udd_ctrl_out_received+0x26>
8000b154:	f0 1f 00 6c 	mcall	8000b304 <udd_ctrl_out_received+0x1d0>
8000b158:	c0 38       	rjmp	8000b15e <udd_ctrl_out_received+0x2a>
8000b15a:	f0 1f 00 6c 	mcall	8000b308 <udd_ctrl_out_received+0x1d4>
8000b15e:	f0 1f 00 6c 	mcall	8000b30c <udd_ctrl_out_received+0x1d8>
8000b162:	cc b8       	rjmp	8000b2f8 <udd_ctrl_out_received+0x1c4>
8000b164:	fe 68 01 30 	mov	r8,-130768
8000b168:	70 08       	ld.w	r8,r8[0x0]
8000b16a:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000b16e:	b5 88       	lsr	r8,0x14
8000b170:	ef 58 ff f6 	st.h	r7[-10],r8
8000b174:	4e 78       	lddpc	r8,8000b310 <udd_ctrl_out_received+0x1dc>
8000b176:	90 68       	ld.sh	r8,r8[0xc]
8000b178:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b17c:	4e 68       	lddpc	r8,8000b314 <udd_ctrl_out_received+0x1e0>
8000b17e:	90 08       	ld.sh	r8,r8[0x0]
8000b180:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b184:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000b188:	f4 08 00 08 	add	r8,r10,r8
8000b18c:	10 39       	cp.w	r9,r8
8000b18e:	c0 84       	brge	8000b19e <udd_ctrl_out_received+0x6a>
8000b190:	4e 08       	lddpc	r8,8000b310 <udd_ctrl_out_received+0x1dc>
8000b192:	90 69       	ld.sh	r9,r8[0xc]
8000b194:	4e 08       	lddpc	r8,8000b314 <udd_ctrl_out_received+0x1e0>
8000b196:	90 08       	ld.sh	r8,r8[0x0]
8000b198:	10 19       	sub	r9,r8
8000b19a:	ef 59 ff f6 	st.h	r7[-10],r9
8000b19e:	fc 18 e0 00 	movh	r8,0xe000
8000b1a2:	ef 48 ff f8 	st.w	r7[-8],r8
8000b1a6:	4d b8       	lddpc	r8,8000b310 <udd_ctrl_out_received+0x1dc>
8000b1a8:	70 29       	ld.w	r9,r8[0x8]
8000b1aa:	4d b8       	lddpc	r8,8000b314 <udd_ctrl_out_received+0x1e0>
8000b1ac:	90 08       	ld.sh	r8,r8[0x0]
8000b1ae:	5c 78       	castu.h	r8
8000b1b0:	f2 08 00 08 	add	r8,r9,r8
8000b1b4:	ef 48 ff fc 	st.w	r7[-4],r8
8000b1b8:	30 08       	mov	r8,0
8000b1ba:	ef 68 ff f5 	st.b	r7[-11],r8
8000b1be:	c1 68       	rjmp	8000b1ea <udd_ctrl_out_received+0xb6>
8000b1c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1c4:	11 88       	ld.ub	r8,r8[0x0]
8000b1c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b1ca:	b2 88       	st.b	r9[0x0],r8
8000b1cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b1d0:	2f f8       	sub	r8,-1
8000b1d2:	ef 48 ff fc 	st.w	r7[-4],r8
8000b1d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1da:	2f f8       	sub	r8,-1
8000b1dc:	ef 48 ff f8 	st.w	r7[-8],r8
8000b1e0:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000b1e4:	2f f8       	sub	r8,-1
8000b1e6:	ef 68 ff f5 	st.b	r7[-11],r8
8000b1ea:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000b1ee:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000b1f2:	f0 09 19 00 	cp.h	r9,r8
8000b1f6:	fe 9b ff e5 	brhi	8000b1c0 <udd_ctrl_out_received+0x8c>
8000b1fa:	4c 78       	lddpc	r8,8000b314 <udd_ctrl_out_received+0x1e0>
8000b1fc:	90 08       	ld.sh	r8,r8[0x0]
8000b1fe:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000b202:	f2 08 00 08 	add	r8,r9,r8
8000b206:	5c 88       	casts.h	r8
8000b208:	4c 39       	lddpc	r9,8000b314 <udd_ctrl_out_received+0x1e0>
8000b20a:	b2 08       	st.h	r9[0x0],r8
8000b20c:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000b210:	34 08       	mov	r8,64
8000b212:	f0 09 19 00 	cp.h	r9,r8
8000b216:	c1 11       	brne	8000b238 <udd_ctrl_out_received+0x104>
8000b218:	4b e8       	lddpc	r8,8000b310 <udd_ctrl_out_received+0x1dc>
8000b21a:	90 38       	ld.sh	r8,r8[0x6]
8000b21c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b220:	4b e8       	lddpc	r8,8000b318 <udd_ctrl_out_received+0x1e4>
8000b222:	90 08       	ld.sh	r8,r8[0x0]
8000b224:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b228:	4b b8       	lddpc	r8,8000b314 <udd_ctrl_out_received+0x1e0>
8000b22a:	90 08       	ld.sh	r8,r8[0x0]
8000b22c:	5c 78       	castu.h	r8
8000b22e:	f4 08 00 08 	add	r8,r10,r8
8000b232:	10 39       	cp.w	r9,r8
8000b234:	e0 89 00 20 	brgt	8000b274 <udd_ctrl_out_received+0x140>
8000b238:	4b 78       	lddpc	r8,8000b314 <udd_ctrl_out_received+0x1e0>
8000b23a:	90 08       	ld.sh	r8,r8[0x0]
8000b23c:	4b 59       	lddpc	r9,8000b310 <udd_ctrl_out_received+0x1dc>
8000b23e:	b2 68       	st.h	r9[0xc],r8
8000b240:	4b 48       	lddpc	r8,8000b310 <udd_ctrl_out_received+0x1dc>
8000b242:	70 58       	ld.w	r8,r8[0x14]
8000b244:	58 08       	cp.w	r8,0
8000b246:	c1 00       	breq	8000b266 <udd_ctrl_out_received+0x132>
8000b248:	4b 28       	lddpc	r8,8000b310 <udd_ctrl_out_received+0x1dc>
8000b24a:	70 58       	ld.w	r8,r8[0x14]
8000b24c:	5d 18       	icall	r8
8000b24e:	18 98       	mov	r8,r12
8000b250:	ec 18 00 01 	eorl	r8,0x1
8000b254:	5c 58       	castu.b	r8
8000b256:	c0 80       	breq	8000b266 <udd_ctrl_out_received+0x132>
8000b258:	f0 1f 00 2c 	mcall	8000b308 <udd_ctrl_out_received+0x1d4>
8000b25c:	fe 68 01 60 	mov	r8,-130720
8000b260:	30 29       	mov	r9,2
8000b262:	91 09       	st.w	r8[0x0],r9
8000b264:	c4 a8       	rjmp	8000b2f8 <udd_ctrl_out_received+0x1c4>
8000b266:	fe 68 01 60 	mov	r8,-130720
8000b26a:	30 29       	mov	r9,2
8000b26c:	91 09       	st.w	r8[0x0],r9
8000b26e:	f0 1f 00 2c 	mcall	8000b31c <udd_ctrl_out_received+0x1e8>
8000b272:	c4 38       	rjmp	8000b2f8 <udd_ctrl_out_received+0x1c4>
8000b274:	4a 78       	lddpc	r8,8000b310 <udd_ctrl_out_received+0x1dc>
8000b276:	90 69       	ld.sh	r9,r8[0xc]
8000b278:	4a 78       	lddpc	r8,8000b314 <udd_ctrl_out_received+0x1e0>
8000b27a:	90 08       	ld.sh	r8,r8[0x0]
8000b27c:	f0 09 19 00 	cp.h	r9,r8
8000b280:	c2 71       	brne	8000b2ce <udd_ctrl_out_received+0x19a>
8000b282:	4a 48       	lddpc	r8,8000b310 <udd_ctrl_out_received+0x1dc>
8000b284:	70 58       	ld.w	r8,r8[0x14]
8000b286:	58 08       	cp.w	r8,0
8000b288:	c0 81       	brne	8000b298 <udd_ctrl_out_received+0x164>
8000b28a:	f0 1f 00 20 	mcall	8000b308 <udd_ctrl_out_received+0x1d4>
8000b28e:	fe 68 01 60 	mov	r8,-130720
8000b292:	30 29       	mov	r9,2
8000b294:	91 09       	st.w	r8[0x0],r9
8000b296:	c3 18       	rjmp	8000b2f8 <udd_ctrl_out_received+0x1c4>
8000b298:	49 e8       	lddpc	r8,8000b310 <udd_ctrl_out_received+0x1dc>
8000b29a:	70 58       	ld.w	r8,r8[0x14]
8000b29c:	5d 18       	icall	r8
8000b29e:	18 98       	mov	r8,r12
8000b2a0:	ec 18 00 01 	eorl	r8,0x1
8000b2a4:	5c 58       	castu.b	r8
8000b2a6:	c0 80       	breq	8000b2b6 <udd_ctrl_out_received+0x182>
8000b2a8:	f0 1f 00 18 	mcall	8000b308 <udd_ctrl_out_received+0x1d4>
8000b2ac:	fe 68 01 60 	mov	r8,-130720
8000b2b0:	30 29       	mov	r9,2
8000b2b2:	91 09       	st.w	r8[0x0],r9
8000b2b4:	c2 28       	rjmp	8000b2f8 <udd_ctrl_out_received+0x1c4>
8000b2b6:	49 98       	lddpc	r8,8000b318 <udd_ctrl_out_received+0x1e4>
8000b2b8:	90 09       	ld.sh	r9,r8[0x0]
8000b2ba:	49 78       	lddpc	r8,8000b314 <udd_ctrl_out_received+0x1e0>
8000b2bc:	90 08       	ld.sh	r8,r8[0x0]
8000b2be:	f2 08 00 08 	add	r8,r9,r8
8000b2c2:	5c 88       	casts.h	r8
8000b2c4:	49 59       	lddpc	r9,8000b318 <udd_ctrl_out_received+0x1e4>
8000b2c6:	b2 08       	st.h	r9[0x0],r8
8000b2c8:	49 39       	lddpc	r9,8000b314 <udd_ctrl_out_received+0x1e0>
8000b2ca:	30 08       	mov	r8,0
8000b2cc:	b2 08       	st.h	r9[0x0],r8
8000b2ce:	fe 68 01 60 	mov	r8,-130720
8000b2d2:	30 29       	mov	r9,2
8000b2d4:	91 09       	st.w	r8[0x0],r9
8000b2d6:	fe 68 01 60 	mov	r8,-130720
8000b2da:	31 09       	mov	r9,16
8000b2dc:	91 09       	st.w	r8[0x0],r9
8000b2de:	f0 1f 00 11 	mcall	8000b320 <udd_ctrl_out_received+0x1ec>
8000b2e2:	18 98       	mov	r8,r12
8000b2e4:	ef 48 ff f0 	st.w	r7[-16],r8
8000b2e8:	fe 68 01 f0 	mov	r8,-130576
8000b2ec:	31 09       	mov	r9,16
8000b2ee:	91 09       	st.w	r8[0x0],r9
8000b2f0:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b2f4:	f0 1f 00 0c 	mcall	8000b324 <udd_ctrl_out_received+0x1f0>
8000b2f8:	2f cd       	sub	sp,-16
8000b2fa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b2fe:	00 00       	add	r0,r0
8000b300:	00 00       	add	r0,r0
8000b302:	08 58       	eor	r8,r4
8000b304:	80 00       	ld.sh	r0,r0[0x0]
8000b306:	b4 58       	st.h	r10[0xa],r8
8000b308:	80 00       	ld.sh	r0,r0[0x0]
8000b30a:	b3 a0       	sbr	r0,0x12
8000b30c:	80 00       	ld.sh	r0,r0[0x0]
8000b30e:	ad d8       	cbr	r8,0xd
8000b310:	00 00       	add	r0,r0
8000b312:	0d e4       	ld.ub	r4,r6[0x6]
8000b314:	00 00       	add	r0,r0
8000b316:	08 5e       	eor	lr,r4
8000b318:	00 00       	add	r0,r0
8000b31a:	08 5c       	eor	r12,r4
8000b31c:	80 00       	ld.sh	r0,r0[0x0]
8000b31e:	b3 c0       	cbr	r0,0x12
8000b320:	80 00       	ld.sh	r0,r0[0x0]
8000b322:	9c 60       	ld.sh	r0,lr[0xc]
8000b324:	80 00       	ld.sh	r0,r0[0x0]
8000b326:	9c 7e       	ld.sh	lr,lr[0xe]

8000b328 <udd_ctrl_underflow>:
8000b328:	eb cd 40 80 	pushm	r7,lr
8000b32c:	1a 97       	mov	r7,sp
8000b32e:	fe 68 01 30 	mov	r8,-130768
8000b332:	70 08       	ld.w	r8,r8[0x0]
8000b334:	e2 18 00 02 	andl	r8,0x2,COH
8000b338:	c1 21       	brne	8000b35c <udd_ctrl_underflow+0x34>
8000b33a:	48 b8       	lddpc	r8,8000b364 <udd_ctrl_underflow+0x3c>
8000b33c:	70 08       	ld.w	r8,r8[0x0]
8000b33e:	58 18       	cp.w	r8,1
8000b340:	c0 41       	brne	8000b348 <udd_ctrl_underflow+0x20>
8000b342:	f0 1f 00 0a 	mcall	8000b368 <udd_ctrl_underflow+0x40>
8000b346:	c0 c8       	rjmp	8000b35e <udd_ctrl_underflow+0x36>
8000b348:	48 78       	lddpc	r8,8000b364 <udd_ctrl_underflow+0x3c>
8000b34a:	70 08       	ld.w	r8,r8[0x0]
8000b34c:	58 48       	cp.w	r8,4
8000b34e:	c0 81       	brne	8000b35e <udd_ctrl_underflow+0x36>
8000b350:	fe 68 01 f0 	mov	r8,-130576
8000b354:	e8 69 00 00 	mov	r9,524288
8000b358:	91 09       	st.w	r8[0x0],r9
8000b35a:	c0 28       	rjmp	8000b35e <udd_ctrl_underflow+0x36>
8000b35c:	d7 03       	nop
8000b35e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b362:	00 00       	add	r0,r0
8000b364:	00 00       	add	r0,r0
8000b366:	08 58       	eor	r8,r4
8000b368:	80 00       	ld.sh	r0,r0[0x0]
8000b36a:	b3 c0       	cbr	r0,0x12

8000b36c <udd_ctrl_overflow>:
8000b36c:	eb cd 40 80 	pushm	r7,lr
8000b370:	1a 97       	mov	r7,sp
8000b372:	fe 68 01 30 	mov	r8,-130768
8000b376:	70 08       	ld.w	r8,r8[0x0]
8000b378:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b37c:	5c 58       	castu.b	r8
8000b37e:	c0 b1       	brne	8000b394 <udd_ctrl_overflow+0x28>
8000b380:	48 78       	lddpc	r8,8000b39c <udd_ctrl_overflow+0x30>
8000b382:	70 08       	ld.w	r8,r8[0x0]
8000b384:	58 38       	cp.w	r8,3
8000b386:	c0 81       	brne	8000b396 <udd_ctrl_overflow+0x2a>
8000b388:	fe 68 01 f0 	mov	r8,-130576
8000b38c:	e8 69 00 00 	mov	r9,524288
8000b390:	91 09       	st.w	r8[0x0],r9
8000b392:	c0 28       	rjmp	8000b396 <udd_ctrl_overflow+0x2a>
8000b394:	d7 03       	nop
8000b396:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b39a:	00 00       	add	r0,r0
8000b39c:	00 00       	add	r0,r0
8000b39e:	08 58       	eor	r8,r4

8000b3a0 <udd_ctrl_stall_data>:
8000b3a0:	eb cd 40 80 	pushm	r7,lr
8000b3a4:	1a 97       	mov	r7,sp
8000b3a6:	48 68       	lddpc	r8,8000b3bc <udd_ctrl_stall_data+0x1c>
8000b3a8:	30 59       	mov	r9,5
8000b3aa:	91 09       	st.w	r8[0x0],r9
8000b3ac:	fe 68 01 f0 	mov	r8,-130576
8000b3b0:	e8 69 00 00 	mov	r9,524288
8000b3b4:	91 09       	st.w	r8[0x0],r9
8000b3b6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b3ba:	00 00       	add	r0,r0
8000b3bc:	00 00       	add	r0,r0
8000b3be:	08 58       	eor	r8,r4

8000b3c0 <udd_ctrl_send_zlp_in>:
8000b3c0:	eb cd 40 80 	pushm	r7,lr
8000b3c4:	1a 97       	mov	r7,sp
8000b3c6:	20 1d       	sub	sp,4
8000b3c8:	49 08       	lddpc	r8,8000b408 <udd_ctrl_send_zlp_in+0x48>
8000b3ca:	30 39       	mov	r9,3
8000b3cc:	91 09       	st.w	r8[0x0],r9
8000b3ce:	f0 1f 00 10 	mcall	8000b40c <udd_ctrl_send_zlp_in+0x4c>
8000b3d2:	18 98       	mov	r8,r12
8000b3d4:	ef 48 ff fc 	st.w	r7[-4],r8
8000b3d8:	fe 68 01 60 	mov	r8,-130720
8000b3dc:	30 19       	mov	r9,1
8000b3de:	91 09       	st.w	r8[0x0],r9
8000b3e0:	fe 68 01 f0 	mov	r8,-130576
8000b3e4:	30 19       	mov	r9,1
8000b3e6:	91 09       	st.w	r8[0x0],r9
8000b3e8:	fe 68 01 60 	mov	r8,-130720
8000b3ec:	30 89       	mov	r9,8
8000b3ee:	91 09       	st.w	r8[0x0],r9
8000b3f0:	fe 68 01 f0 	mov	r8,-130576
8000b3f4:	30 89       	mov	r9,8
8000b3f6:	91 09       	st.w	r8[0x0],r9
8000b3f8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b3fc:	f0 1f 00 05 	mcall	8000b410 <udd_ctrl_send_zlp_in+0x50>
8000b400:	2f fd       	sub	sp,-4
8000b402:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b406:	00 00       	add	r0,r0
8000b408:	00 00       	add	r0,r0
8000b40a:	08 58       	eor	r8,r4
8000b40c:	80 00       	ld.sh	r0,r0[0x0]
8000b40e:	9c 60       	ld.sh	r0,lr[0xc]
8000b410:	80 00       	ld.sh	r0,r0[0x0]
8000b412:	9c 7e       	ld.sh	lr,lr[0xe]

8000b414 <udd_ctrl_send_zlp_out>:
8000b414:	eb cd 40 80 	pushm	r7,lr
8000b418:	1a 97       	mov	r7,sp
8000b41a:	20 1d       	sub	sp,4
8000b41c:	48 c8       	lddpc	r8,8000b44c <udd_ctrl_send_zlp_out+0x38>
8000b41e:	30 49       	mov	r9,4
8000b420:	91 09       	st.w	r8[0x0],r9
8000b422:	f0 1f 00 0c 	mcall	8000b450 <udd_ctrl_send_zlp_out+0x3c>
8000b426:	18 98       	mov	r8,r12
8000b428:	ef 48 ff fc 	st.w	r7[-4],r8
8000b42c:	fe 68 01 60 	mov	r8,-130720
8000b430:	31 09       	mov	r9,16
8000b432:	91 09       	st.w	r8[0x0],r9
8000b434:	fe 68 01 f0 	mov	r8,-130576
8000b438:	31 09       	mov	r9,16
8000b43a:	91 09       	st.w	r8[0x0],r9
8000b43c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b440:	f0 1f 00 05 	mcall	8000b454 <udd_ctrl_send_zlp_out+0x40>
8000b444:	2f fd       	sub	sp,-4
8000b446:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b44a:	00 00       	add	r0,r0
8000b44c:	00 00       	add	r0,r0
8000b44e:	08 58       	eor	r8,r4
8000b450:	80 00       	ld.sh	r0,r0[0x0]
8000b452:	9c 60       	ld.sh	r0,lr[0xc]
8000b454:	80 00       	ld.sh	r0,r0[0x0]
8000b456:	9c 7e       	ld.sh	lr,lr[0xe]

8000b458 <udd_ctrl_endofrequest>:
8000b458:	eb cd 40 80 	pushm	r7,lr
8000b45c:	1a 97       	mov	r7,sp
8000b45e:	48 58       	lddpc	r8,8000b470 <udd_ctrl_endofrequest+0x18>
8000b460:	70 48       	ld.w	r8,r8[0x10]
8000b462:	58 08       	cp.w	r8,0
8000b464:	c0 40       	breq	8000b46c <udd_ctrl_endofrequest+0x14>
8000b466:	48 38       	lddpc	r8,8000b470 <udd_ctrl_endofrequest+0x18>
8000b468:	70 48       	ld.w	r8,r8[0x10]
8000b46a:	5d 18       	icall	r8
8000b46c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b470:	00 00       	add	r0,r0
8000b472:	0d e4       	ld.ub	r4,r6[0x6]

8000b474 <udd_ctrl_interrupt>:
8000b474:	eb cd 40 80 	pushm	r7,lr
8000b478:	1a 97       	mov	r7,sp
8000b47a:	fe 68 00 00 	mov	r8,-131072
8000b47e:	70 18       	ld.w	r8,r8[0x4]
8000b480:	e2 18 10 00 	andl	r8,0x1000,COH
8000b484:	c0 31       	brne	8000b48a <udd_ctrl_interrupt+0x16>
8000b486:	30 08       	mov	r8,0
8000b488:	c4 c8       	rjmp	8000b520 <udd_ctrl_interrupt+0xac>
8000b48a:	fe 68 02 20 	mov	r8,-130528
8000b48e:	31 09       	mov	r9,16
8000b490:	91 09       	st.w	r8[0x0],r9
8000b492:	fe 68 02 20 	mov	r8,-130528
8000b496:	30 89       	mov	r9,8
8000b498:	91 09       	st.w	r8[0x0],r9
8000b49a:	fe 68 01 30 	mov	r8,-130768
8000b49e:	70 08       	ld.w	r8,r8[0x0]
8000b4a0:	e2 18 00 04 	andl	r8,0x4,COH
8000b4a4:	c0 50       	breq	8000b4ae <udd_ctrl_interrupt+0x3a>
8000b4a6:	f0 1f 00 21 	mcall	8000b528 <udd_ctrl_interrupt+0xb4>
8000b4aa:	30 18       	mov	r8,1
8000b4ac:	c3 a8       	rjmp	8000b520 <udd_ctrl_interrupt+0xac>
8000b4ae:	fe 68 01 30 	mov	r8,-130768
8000b4b2:	70 08       	ld.w	r8,r8[0x0]
8000b4b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b4b8:	5c 58       	castu.b	r8
8000b4ba:	c0 c0       	breq	8000b4d2 <udd_ctrl_interrupt+0x5e>
8000b4bc:	fe 68 01 c0 	mov	r8,-130624
8000b4c0:	70 08       	ld.w	r8,r8[0x0]
8000b4c2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b4c6:	5c 58       	castu.b	r8
8000b4c8:	c0 50       	breq	8000b4d2 <udd_ctrl_interrupt+0x5e>
8000b4ca:	f0 1f 00 19 	mcall	8000b52c <udd_ctrl_interrupt+0xb8>
8000b4ce:	30 18       	mov	r8,1
8000b4d0:	c2 88       	rjmp	8000b520 <udd_ctrl_interrupt+0xac>
8000b4d2:	fe 68 01 30 	mov	r8,-130768
8000b4d6:	70 08       	ld.w	r8,r8[0x0]
8000b4d8:	e2 18 00 02 	andl	r8,0x2,COH
8000b4dc:	c0 50       	breq	8000b4e6 <udd_ctrl_interrupt+0x72>
8000b4de:	f0 1f 00 15 	mcall	8000b530 <udd_ctrl_interrupt+0xbc>
8000b4e2:	30 18       	mov	r8,1
8000b4e4:	c1 e8       	rjmp	8000b520 <udd_ctrl_interrupt+0xac>
8000b4e6:	fe 68 01 30 	mov	r8,-130768
8000b4ea:	70 08       	ld.w	r8,r8[0x0]
8000b4ec:	e2 18 00 08 	andl	r8,0x8,COH
8000b4f0:	c0 90       	breq	8000b502 <udd_ctrl_interrupt+0x8e>
8000b4f2:	fe 68 01 60 	mov	r8,-130720
8000b4f6:	30 89       	mov	r9,8
8000b4f8:	91 09       	st.w	r8[0x0],r9
8000b4fa:	f0 1f 00 0f 	mcall	8000b534 <udd_ctrl_interrupt+0xc0>
8000b4fe:	30 18       	mov	r8,1
8000b500:	c1 08       	rjmp	8000b520 <udd_ctrl_interrupt+0xac>
8000b502:	fe 68 01 30 	mov	r8,-130768
8000b506:	70 08       	ld.w	r8,r8[0x0]
8000b508:	e2 18 00 10 	andl	r8,0x10,COH
8000b50c:	c0 90       	breq	8000b51e <udd_ctrl_interrupt+0xaa>
8000b50e:	fe 68 01 60 	mov	r8,-130720
8000b512:	31 09       	mov	r9,16
8000b514:	91 09       	st.w	r8[0x0],r9
8000b516:	f0 1f 00 09 	mcall	8000b538 <udd_ctrl_interrupt+0xc4>
8000b51a:	30 18       	mov	r8,1
8000b51c:	c0 28       	rjmp	8000b520 <udd_ctrl_interrupt+0xac>
8000b51e:	30 08       	mov	r8,0
8000b520:	10 9c       	mov	r12,r8
8000b522:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b526:	00 00       	add	r0,r0
8000b528:	80 00       	ld.sh	r0,r0[0x0]
8000b52a:	ae 30       	st.h	r7[0x6],r0
8000b52c:	80 00       	ld.sh	r0,r0[0x0]
8000b52e:	af 94       	lsr	r4,0xf
8000b530:	80 00       	ld.sh	r0,r0[0x0]
8000b532:	b1 34       	mul	r4,r8
8000b534:	80 00       	ld.sh	r0,r0[0x0]
8000b536:	b3 6c       	lsl	r12,0x12
8000b538:	80 00       	ld.sh	r0,r0[0x0]
8000b53a:	b3 28       	st.d	r9++,r8

8000b53c <udd_ep_job_table_reset>:
8000b53c:	eb cd 40 80 	pushm	r7,lr
8000b540:	1a 97       	mov	r7,sp
8000b542:	20 1d       	sub	sp,4
8000b544:	30 08       	mov	r8,0
8000b546:	ef 68 ff ff 	st.b	r7[-1],r8
8000b54a:	c2 28       	rjmp	8000b58e <udd_ep_job_table_reset+0x52>
8000b54c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b550:	49 5a       	lddpc	r10,8000b5a4 <udd_ep_job_table_reset+0x68>
8000b552:	12 98       	mov	r8,r9
8000b554:	a3 68       	lsl	r8,0x2
8000b556:	12 08       	add	r8,r9
8000b558:	a3 68       	lsl	r8,0x2
8000b55a:	f4 08 00 09 	add	r9,r10,r8
8000b55e:	72 08       	ld.w	r8,r9[0x0]
8000b560:	30 0a       	mov	r10,0
8000b562:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b566:	93 08       	st.w	r9[0x0],r8
8000b568:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b56c:	48 ea       	lddpc	r10,8000b5a4 <udd_ep_job_table_reset+0x68>
8000b56e:	12 98       	mov	r8,r9
8000b570:	a3 68       	lsl	r8,0x2
8000b572:	12 08       	add	r8,r9
8000b574:	a3 68       	lsl	r8,0x2
8000b576:	f4 08 00 09 	add	r9,r10,r8
8000b57a:	72 08       	ld.w	r8,r9[0x0]
8000b57c:	30 0a       	mov	r10,0
8000b57e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000b582:	93 08       	st.w	r9[0x0],r8
8000b584:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b588:	2f f8       	sub	r8,-1
8000b58a:	ef 68 ff ff 	st.b	r7[-1],r8
8000b58e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b592:	30 18       	mov	r8,1
8000b594:	f0 09 18 00 	cp.b	r9,r8
8000b598:	fe 98 ff da 	brls	8000b54c <udd_ep_job_table_reset+0x10>
8000b59c:	2f fd       	sub	sp,-4
8000b59e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b5a2:	00 00       	add	r0,r0
8000b5a4:	00 00       	add	r0,r0
8000b5a6:	08 60       	and	r0,r4

8000b5a8 <udd_ep_job_table_kill>:
8000b5a8:	eb cd 40 80 	pushm	r7,lr
8000b5ac:	1a 97       	mov	r7,sp
8000b5ae:	20 1d       	sub	sp,4
8000b5b0:	30 08       	mov	r8,0
8000b5b2:	ef 68 ff ff 	st.b	r7[-1],r8
8000b5b6:	c1 98       	rjmp	8000b5e8 <udd_ep_job_table_kill+0x40>
8000b5b8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b5bc:	2f f8       	sub	r8,-1
8000b5be:	5c 58       	castu.b	r8
8000b5c0:	10 9a       	mov	r10,r8
8000b5c2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b5c6:	12 98       	mov	r8,r9
8000b5c8:	a3 68       	lsl	r8,0x2
8000b5ca:	12 08       	add	r8,r9
8000b5cc:	a3 68       	lsl	r8,0x2
8000b5ce:	10 99       	mov	r9,r8
8000b5d0:	48 b8       	lddpc	r8,8000b5fc <udd_ep_job_table_kill+0x54>
8000b5d2:	f2 08 00 08 	add	r8,r9,r8
8000b5d6:	30 1b       	mov	r11,1
8000b5d8:	10 9c       	mov	r12,r8
8000b5da:	f0 1f 00 0a 	mcall	8000b600 <udd_ep_job_table_kill+0x58>
8000b5de:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b5e2:	2f f8       	sub	r8,-1
8000b5e4:	ef 68 ff ff 	st.b	r7[-1],r8
8000b5e8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b5ec:	30 18       	mov	r8,1
8000b5ee:	f0 09 18 00 	cp.b	r9,r8
8000b5f2:	fe 98 ff e3 	brls	8000b5b8 <udd_ep_job_table_kill+0x10>
8000b5f6:	2f fd       	sub	sp,-4
8000b5f8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b5fc:	00 00       	add	r0,r0
8000b5fe:	08 60       	and	r0,r4
8000b600:	80 00       	ld.sh	r0,r0[0x0]
8000b602:	b6 50       	st.h	r11[0xa],r0

8000b604 <udd_ep_abort_job>:
8000b604:	eb cd 40 80 	pushm	r7,lr
8000b608:	1a 97       	mov	r7,sp
8000b60a:	20 1d       	sub	sp,4
8000b60c:	18 98       	mov	r8,r12
8000b60e:	ef 68 ff fc 	st.b	r7[-4],r8
8000b612:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b616:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000b61a:	ef 68 ff fc 	st.b	r7[-4],r8
8000b61e:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000b622:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b626:	f0 c9 00 01 	sub	r9,r8,1
8000b62a:	12 98       	mov	r8,r9
8000b62c:	a3 68       	lsl	r8,0x2
8000b62e:	12 08       	add	r8,r9
8000b630:	a3 68       	lsl	r8,0x2
8000b632:	10 99       	mov	r9,r8
8000b634:	48 58       	lddpc	r8,8000b648 <udd_ep_abort_job+0x44>
8000b636:	f2 08 00 08 	add	r8,r9,r8
8000b63a:	30 1b       	mov	r11,1
8000b63c:	10 9c       	mov	r12,r8
8000b63e:	f0 1f 00 04 	mcall	8000b64c <udd_ep_abort_job+0x48>
8000b642:	2f fd       	sub	sp,-4
8000b644:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b648:	00 00       	add	r0,r0
8000b64a:	08 60       	and	r0,r4
8000b64c:	80 00       	ld.sh	r0,r0[0x0]
8000b64e:	b6 50       	st.h	r11[0xa],r0

8000b650 <udd_ep_finish_job>:
8000b650:	eb cd 40 80 	pushm	r7,lr
8000b654:	1a 97       	mov	r7,sp
8000b656:	20 3d       	sub	sp,12
8000b658:	ef 4c ff fc 	st.w	r7[-4],r12
8000b65c:	16 99       	mov	r9,r11
8000b65e:	14 98       	mov	r8,r10
8000b660:	ef 69 ff f8 	st.b	r7[-8],r9
8000b664:	ef 68 ff f4 	st.b	r7[-12],r8
8000b668:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b66c:	70 08       	ld.w	r8,r8[0x0]
8000b66e:	e6 18 80 00 	andh	r8,0x8000,COH
8000b672:	c2 b0       	breq	8000b6c8 <udd_ep_finish_job+0x78>
8000b674:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b678:	72 08       	ld.w	r8,r9[0x0]
8000b67a:	30 0a       	mov	r10,0
8000b67c:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b680:	93 08       	st.w	r9[0x0],r8
8000b682:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b686:	70 48       	ld.w	r8,r8[0x10]
8000b688:	58 08       	cp.w	r8,0
8000b68a:	c2 10       	breq	8000b6cc <udd_ep_finish_job+0x7c>
8000b68c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b690:	a3 68       	lsl	r8,0x2
8000b692:	e0 38 ff 00 	sub	r8,130816
8000b696:	70 08       	ld.w	r8,r8[0x0]
8000b698:	e2 18 01 00 	andl	r8,0x100,COH
8000b69c:	c0 90       	breq	8000b6ae <udd_ep_finish_job+0x5e>
8000b69e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b6a2:	ea 18 ff ff 	orh	r8,0xffff
8000b6a6:	e8 18 ff 80 	orl	r8,0xff80
8000b6aa:	ef 68 ff f4 	st.b	r7[-12],r8
8000b6ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b6b2:	70 48       	ld.w	r8,r8[0x10]
8000b6b4:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b6b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b6bc:	72 2b       	ld.w	r11,r9[0x8]
8000b6be:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000b6c2:	12 9c       	mov	r12,r9
8000b6c4:	5d 18       	icall	r8
8000b6c6:	c0 48       	rjmp	8000b6ce <udd_ep_finish_job+0x7e>
8000b6c8:	d7 03       	nop
8000b6ca:	c0 28       	rjmp	8000b6ce <udd_ep_finish_job+0x7e>
8000b6cc:	d7 03       	nop
8000b6ce:	2f dd       	sub	sp,-12
8000b6d0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b6d4 <udd_ep_trans_done>:
8000b6d4:	eb cd 40 80 	pushm	r7,lr
8000b6d8:	1a 97       	mov	r7,sp
8000b6da:	20 5d       	sub	sp,20
8000b6dc:	18 98       	mov	r8,r12
8000b6de:	ef 68 ff ec 	st.b	r7[-20],r8
8000b6e2:	30 08       	mov	r8,0
8000b6e4:	ef 48 ff f0 	st.w	r7[-16],r8
8000b6e8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b6ec:	f0 c9 00 01 	sub	r9,r8,1
8000b6f0:	12 98       	mov	r8,r9
8000b6f2:	a3 68       	lsl	r8,0x2
8000b6f4:	12 08       	add	r8,r9
8000b6f6:	a3 68       	lsl	r8,0x2
8000b6f8:	10 99       	mov	r9,r8
8000b6fa:	fe f8 02 1e 	ld.w	r8,pc[542]
8000b6fe:	f2 08 00 08 	add	r8,r9,r8
8000b702:	ef 48 ff f4 	st.w	r7[-12],r8
8000b706:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b70a:	70 08       	ld.w	r8,r8[0x0]
8000b70c:	e6 18 80 00 	andh	r8,0x8000,COH
8000b710:	e0 80 01 00 	breq	8000b910 <udd_ep_trans_done+0x23c>
8000b714:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b718:	70 39       	ld.w	r9,r8[0xc]
8000b71a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b71e:	70 28       	ld.w	r8,r8[0x8]
8000b720:	10 39       	cp.w	r9,r8
8000b722:	e0 80 00 b7 	breq	8000b890 <udd_ep_trans_done+0x1bc>
8000b726:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b72a:	70 29       	ld.w	r9,r8[0x8]
8000b72c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b730:	70 38       	ld.w	r8,r8[0xc]
8000b732:	10 19       	sub	r9,r8
8000b734:	ef 49 ff f8 	st.w	r7[-8],r9
8000b738:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b73c:	e0 58 00 00 	cp.w	r8,65536
8000b740:	e0 88 00 0a 	brls	8000b754 <udd_ep_trans_done+0x80>
8000b744:	e0 78 00 00 	mov	r8,65536
8000b748:	ef 48 ff f8 	st.w	r7[-8],r8
8000b74c:	30 08       	mov	r8,0
8000b74e:	ef 48 ff f0 	st.w	r7[-16],r8
8000b752:	c0 68       	rjmp	8000b75e <udd_ep_trans_done+0x8a>
8000b754:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b758:	b1 68       	lsl	r8,0x10
8000b75a:	ef 48 ff f0 	st.w	r7[-16],r8
8000b75e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b762:	a3 68       	lsl	r8,0x2
8000b764:	e0 38 ff 00 	sub	r8,130816
8000b768:	70 08       	ld.w	r8,r8[0x0]
8000b76a:	e2 18 01 00 	andl	r8,0x100,COH
8000b76e:	c2 10       	breq	8000b7b0 <udd_ep_trans_done+0xdc>
8000b770:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b774:	a3 68       	lsl	r8,0x2
8000b776:	e0 38 ff 00 	sub	r8,130816
8000b77a:	70 08       	ld.w	r8,r8[0x0]
8000b77c:	e2 18 00 70 	andl	r8,0x70,COH
8000b780:	a5 88       	lsr	r8,0x4
8000b782:	30 89       	mov	r9,8
8000b784:	f2 08 09 48 	lsl	r8,r9,r8
8000b788:	20 18       	sub	r8,1
8000b78a:	10 99       	mov	r9,r8
8000b78c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b790:	f3 e8 00 08 	and	r8,r9,r8
8000b794:	c3 10       	breq	8000b7f6 <udd_ep_trans_done+0x122>
8000b796:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b79a:	a3 b8       	sbr	r8,0x3
8000b79c:	ef 48 ff f0 	st.w	r7[-16],r8
8000b7a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b7a4:	72 08       	ld.w	r8,r9[0x0]
8000b7a6:	30 0a       	mov	r10,0
8000b7a8:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000b7ac:	93 08       	st.w	r9[0x0],r8
8000b7ae:	c2 58       	rjmp	8000b7f8 <udd_ep_trans_done+0x124>
8000b7b0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b7b4:	a3 68       	lsl	r8,0x2
8000b7b6:	e0 38 ff 00 	sub	r8,130816
8000b7ba:	70 08       	ld.w	r8,r8[0x0]
8000b7bc:	e2 18 18 00 	andl	r8,0x1800,COH
8000b7c0:	ab 98       	lsr	r8,0xb
8000b7c2:	58 18       	cp.w	r8,1
8000b7c4:	c1 21       	brne	8000b7e8 <udd_ep_trans_done+0x114>
8000b7c6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b7ca:	a3 68       	lsl	r8,0x2
8000b7cc:	e0 38 ff 00 	sub	r8,130816
8000b7d0:	70 08       	ld.w	r8,r8[0x0]
8000b7d2:	e2 18 00 70 	andl	r8,0x70,COH
8000b7d6:	a5 88       	lsr	r8,0x4
8000b7d8:	30 89       	mov	r9,8
8000b7da:	f2 08 09 48 	lsl	r8,r9,r8
8000b7de:	10 99       	mov	r9,r8
8000b7e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b7e4:	10 39       	cp.w	r9,r8
8000b7e6:	c0 93       	brcs	8000b7f8 <udd_ep_trans_done+0x124>
8000b7e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b7ec:	e8 18 00 14 	orl	r8,0x14
8000b7f0:	ef 48 ff f0 	st.w	r7[-16],r8
8000b7f4:	c0 28       	rjmp	8000b7f8 <udd_ep_trans_done+0x124>
8000b7f6:	d7 03       	nop
8000b7f8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b7fc:	a5 68       	lsl	r8,0x4
8000b7fe:	e0 38 fd 00 	sub	r8,130304
8000b802:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b806:	72 1a       	ld.w	r10,r9[0x4]
8000b808:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b80c:	72 39       	ld.w	r9,r9[0xc]
8000b80e:	f4 09 00 09 	add	r9,r10,r9
8000b812:	91 19       	st.w	r8[0x4],r9
8000b814:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b818:	e8 18 00 21 	orl	r8,0x21
8000b81c:	ef 48 ff f0 	st.w	r7[-16],r8
8000b820:	f0 1f 00 3f 	mcall	8000b91c <udd_ep_trans_done+0x248>
8000b824:	18 98       	mov	r8,r12
8000b826:	ef 48 ff fc 	st.w	r7[-4],r8
8000b82a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b82e:	a5 68       	lsl	r8,0x4
8000b830:	e0 38 fd 00 	sub	r8,130304
8000b834:	70 38       	ld.w	r8,r8[0xc]
8000b836:	e2 18 00 10 	andl	r8,0x10,COH
8000b83a:	c2 11       	brne	8000b87c <udd_ep_trans_done+0x1a8>
8000b83c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b840:	a5 68       	lsl	r8,0x4
8000b842:	e0 38 fd 00 	sub	r8,130304
8000b846:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000b84a:	91 29       	st.w	r8[0x8],r9
8000b84c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b850:	70 39       	ld.w	r9,r8[0xc]
8000b852:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b856:	10 09       	add	r9,r8
8000b858:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b85c:	91 39       	st.w	r8[0xc],r9
8000b85e:	fe 68 00 00 	mov	r8,-131072
8000b862:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b866:	20 19       	sub	r9,1
8000b868:	fc 1a 02 00 	movh	r10,0x200
8000b86c:	f4 09 09 49 	lsl	r9,r10,r9
8000b870:	91 69       	st.w	r8[0x18],r9
8000b872:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b876:	f0 1f 00 2b 	mcall	8000b920 <udd_ep_trans_done+0x24c>
8000b87a:	c4 c8       	rjmp	8000b912 <udd_ep_trans_done+0x23e>
8000b87c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b880:	f0 1f 00 28 	mcall	8000b920 <udd_ep_trans_done+0x24c>
8000b884:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b888:	70 39       	ld.w	r9,r8[0xc]
8000b88a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b88e:	91 29       	st.w	r8[0x8],r9
8000b890:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b894:	a3 68       	lsl	r8,0x2
8000b896:	e0 38 ff 00 	sub	r8,130816
8000b89a:	70 08       	ld.w	r8,r8[0x0]
8000b89c:	e2 18 01 00 	andl	r8,0x100,COH
8000b8a0:	c2 f0       	breq	8000b8fe <udd_ep_trans_done+0x22a>
8000b8a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b8a6:	70 08       	ld.w	r8,r8[0x0]
8000b8a8:	e6 18 40 00 	andh	r8,0x4000,COH
8000b8ac:	c2 90       	breq	8000b8fe <udd_ep_trans_done+0x22a>
8000b8ae:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b8b2:	a3 68       	lsl	r8,0x2
8000b8b4:	e0 38 fe a0 	sub	r8,130720
8000b8b8:	30 19       	mov	r9,1
8000b8ba:	91 09       	st.w	r8[0x0],r9
8000b8bc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b8c0:	a3 68       	lsl	r8,0x2
8000b8c2:	e0 38 fe d0 	sub	r8,130768
8000b8c6:	70 08       	ld.w	r8,r8[0x0]
8000b8c8:	e6 18 00 01 	andh	r8,0x1,COH
8000b8cc:	c0 80       	breq	8000b8dc <udd_ep_trans_done+0x208>
8000b8ce:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b8d2:	a3 68       	lsl	r8,0x2
8000b8d4:	e0 38 fe 70 	sub	r8,130672
8000b8d8:	30 19       	mov	r9,1
8000b8da:	91 09       	st.w	r8[0x0],r9
8000b8dc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b8e0:	a3 68       	lsl	r8,0x2
8000b8e2:	e0 38 fe 10 	sub	r8,130576
8000b8e6:	30 19       	mov	r9,1
8000b8e8:	91 09       	st.w	r8[0x0],r9
8000b8ea:	fe 68 00 00 	mov	r8,-131072
8000b8ee:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b8f2:	e0 6a 10 00 	mov	r10,4096
8000b8f6:	f4 09 09 49 	lsl	r9,r10,r9
8000b8fa:	91 69       	st.w	r8[0x18],r9
8000b8fc:	c0 b8       	rjmp	8000b912 <udd_ep_trans_done+0x23e>
8000b8fe:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b902:	10 9a       	mov	r10,r8
8000b904:	30 0b       	mov	r11,0
8000b906:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b90a:	f0 1f 00 07 	mcall	8000b924 <udd_ep_trans_done+0x250>
8000b90e:	c0 28       	rjmp	8000b912 <udd_ep_trans_done+0x23e>
8000b910:	d7 03       	nop
8000b912:	2f bd       	sub	sp,-20
8000b914:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b918:	00 00       	add	r0,r0
8000b91a:	08 60       	and	r0,r4
8000b91c:	80 00       	ld.sh	r0,r0[0x0]
8000b91e:	9c 60       	ld.sh	r0,lr[0xc]
8000b920:	80 00       	ld.sh	r0,r0[0x0]
8000b922:	9c 7e       	ld.sh	lr,lr[0xe]
8000b924:	80 00       	ld.sh	r0,r0[0x0]
8000b926:	b6 50       	st.h	r11[0xa],r0

8000b928 <udd_ep_interrupt>:
8000b928:	eb cd 40 80 	pushm	r7,lr
8000b92c:	1a 97       	mov	r7,sp
8000b92e:	20 3d       	sub	sp,12
8000b930:	30 18       	mov	r8,1
8000b932:	ef 68 ff f7 	st.b	r7[-9],r8
8000b936:	cf 18       	rjmp	8000bb18 <udd_ep_interrupt+0x1f0>
8000b938:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b93c:	f0 c9 00 01 	sub	r9,r8,1
8000b940:	12 98       	mov	r8,r9
8000b942:	a3 68       	lsl	r8,0x2
8000b944:	12 08       	add	r8,r9
8000b946:	a3 68       	lsl	r8,0x2
8000b948:	10 99       	mov	r9,r8
8000b94a:	4f a8       	lddpc	r8,8000bb30 <udd_ep_interrupt+0x208>
8000b94c:	f2 08 00 08 	add	r8,r9,r8
8000b950:	ef 48 ff f8 	st.w	r7[-8],r8
8000b954:	fe 68 00 00 	mov	r8,-131072
8000b958:	70 49       	ld.w	r9,r8[0x10]
8000b95a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b95e:	20 18       	sub	r8,1
8000b960:	fc 1a 02 00 	movh	r10,0x200
8000b964:	f4 08 09 48 	lsl	r8,r10,r8
8000b968:	f3 e8 00 08 	and	r8,r9,r8
8000b96c:	c4 70       	breq	8000b9fa <udd_ep_interrupt+0xd2>
8000b96e:	fe 68 00 00 	mov	r8,-131072
8000b972:	70 19       	ld.w	r9,r8[0x4]
8000b974:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b978:	20 18       	sub	r8,1
8000b97a:	fc 1a 02 00 	movh	r10,0x200
8000b97e:	f4 08 09 48 	lsl	r8,r10,r8
8000b982:	f3 e8 00 08 	and	r8,r9,r8
8000b986:	c3 a0       	breq	8000b9fa <udd_ep_interrupt+0xd2>
8000b988:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b98c:	a5 68       	lsl	r8,0x4
8000b98e:	e0 38 fd 00 	sub	r8,130304
8000b992:	70 38       	ld.w	r8,r8[0xc]
8000b994:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b998:	5c 58       	castu.b	r8
8000b99a:	c0 30       	breq	8000b9a0 <udd_ep_interrupt+0x78>
8000b99c:	30 18       	mov	r8,1
8000b99e:	cc 58       	rjmp	8000bb28 <udd_ep_interrupt+0x200>
8000b9a0:	fe 68 00 00 	mov	r8,-131072
8000b9a4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b9a8:	20 19       	sub	r9,1
8000b9aa:	fc 1a 02 00 	movh	r10,0x200
8000b9ae:	f4 09 09 49 	lsl	r9,r10,r9
8000b9b2:	91 59       	st.w	r8[0x14],r9
8000b9b4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b9b8:	a5 68       	lsl	r8,0x4
8000b9ba:	e0 38 fd 00 	sub	r8,130304
8000b9be:	70 38       	ld.w	r8,r8[0xc]
8000b9c0:	b1 88       	lsr	r8,0x10
8000b9c2:	ef 48 ff fc 	st.w	r7[-4],r8
8000b9c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b9ca:	58 08       	cp.w	r8,0
8000b9cc:	c1 00       	breq	8000b9ec <udd_ep_interrupt+0xc4>
8000b9ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b9d2:	70 39       	ld.w	r9,r8[0xc]
8000b9d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b9d8:	10 19       	sub	r9,r8
8000b9da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b9de:	91 39       	st.w	r8[0xc],r9
8000b9e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b9e4:	70 39       	ld.w	r9,r8[0xc]
8000b9e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b9ea:	91 29       	st.w	r8[0x8],r9
8000b9ec:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b9f0:	10 9c       	mov	r12,r8
8000b9f2:	f0 1f 00 51 	mcall	8000bb34 <udd_ep_interrupt+0x20c>
8000b9f6:	30 18       	mov	r8,1
8000b9f8:	c9 88       	rjmp	8000bb28 <udd_ep_interrupt+0x200>
8000b9fa:	fe 68 00 00 	mov	r8,-131072
8000b9fe:	70 49       	ld.w	r9,r8[0x10]
8000ba00:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba04:	e0 6a 10 00 	mov	r10,4096
8000ba08:	f4 08 09 48 	lsl	r8,r10,r8
8000ba0c:	f3 e8 00 08 	and	r8,r9,r8
8000ba10:	c7 f0       	breq	8000bb0e <udd_ep_interrupt+0x1e6>
8000ba12:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba16:	a3 68       	lsl	r8,0x2
8000ba18:	e0 38 fe 40 	sub	r8,130624
8000ba1c:	70 08       	ld.w	r8,r8[0x0]
8000ba1e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000ba22:	5c 58       	castu.b	r8
8000ba24:	c2 b0       	breq	8000ba7a <udd_ep_interrupt+0x152>
8000ba26:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba2a:	a3 68       	lsl	r8,0x2
8000ba2c:	e0 38 fe d0 	sub	r8,130768
8000ba30:	70 08       	ld.w	r8,r8[0x0]
8000ba32:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000ba36:	5c 58       	castu.b	r8
8000ba38:	c2 10       	breq	8000ba7a <udd_ep_interrupt+0x152>
8000ba3a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba3e:	a3 68       	lsl	r8,0x2
8000ba40:	e0 38 fd e0 	sub	r8,130528
8000ba44:	30 19       	mov	r9,1
8000ba46:	91 09       	st.w	r8[0x0],r9
8000ba48:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba4c:	a3 68       	lsl	r8,0x2
8000ba4e:	e0 38 fe a0 	sub	r8,130720
8000ba52:	30 19       	mov	r9,1
8000ba54:	91 09       	st.w	r8[0x0],r9
8000ba56:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba5a:	a3 68       	lsl	r8,0x2
8000ba5c:	e0 38 fd e0 	sub	r8,130528
8000ba60:	e0 69 40 00 	mov	r9,16384
8000ba64:	91 09       	st.w	r8[0x0],r9
8000ba66:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba6a:	10 9a       	mov	r10,r8
8000ba6c:	30 0b       	mov	r11,0
8000ba6e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000ba72:	f0 1f 00 32 	mcall	8000bb38 <udd_ep_interrupt+0x210>
8000ba76:	30 18       	mov	r8,1
8000ba78:	c5 88       	rjmp	8000bb28 <udd_ep_interrupt+0x200>
8000ba7a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba7e:	a3 68       	lsl	r8,0x2
8000ba80:	e0 38 fe 40 	sub	r8,130624
8000ba84:	70 08       	ld.w	r8,r8[0x0]
8000ba86:	e2 18 10 00 	andl	r8,0x1000,COH
8000ba8a:	c4 20       	breq	8000bb0e <udd_ep_interrupt+0x1e6>
8000ba8c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba90:	a3 68       	lsl	r8,0x2
8000ba92:	e0 38 fe d0 	sub	r8,130768
8000ba96:	70 08       	ld.w	r8,r8[0x0]
8000ba98:	e2 18 30 00 	andl	r8,0x3000,COH
8000ba9c:	ad 88       	lsr	r8,0xc
8000ba9e:	c3 81       	brne	8000bb0e <udd_ep_interrupt+0x1e6>
8000baa0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000baa4:	a3 68       	lsl	r8,0x2
8000baa6:	e0 38 fd e0 	sub	r8,130528
8000baaa:	e0 69 10 00 	mov	r9,4096
8000baae:	91 09       	st.w	r8[0x0],r9
8000bab0:	fe 68 00 00 	mov	r8,-131072
8000bab4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000bab8:	e0 6a 10 00 	mov	r10,4096
8000babc:	f4 09 09 49 	lsl	r9,r10,r9
8000bac0:	91 59       	st.w	r8[0x14],r9
8000bac2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bac6:	72 08       	ld.w	r8,r9[0x0]
8000bac8:	30 0a       	mov	r10,0
8000baca:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000bace:	93 08       	st.w	r9[0x0],r8
8000bad0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000bad4:	a3 68       	lsl	r8,0x2
8000bad6:	e0 38 ff 00 	sub	r8,130816
8000bada:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000bade:	a3 69       	lsl	r9,0x2
8000bae0:	e0 39 ff 00 	sub	r9,130816
8000bae4:	72 09       	ld.w	r9,r9[0x0]
8000bae6:	a9 d9       	cbr	r9,0x9
8000bae8:	91 09       	st.w	r8[0x0],r9
8000baea:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000baee:	a3 68       	lsl	r8,0x2
8000baf0:	e0 38 fe 10 	sub	r8,130576
8000baf4:	e8 69 00 00 	mov	r9,524288
8000baf8:	91 09       	st.w	r8[0x0],r9
8000bafa:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000bafe:	a3 68       	lsl	r8,0x2
8000bb00:	e0 38 fe 10 	sub	r8,130576
8000bb04:	e4 69 00 00 	mov	r9,262144
8000bb08:	91 09       	st.w	r8[0x0],r9
8000bb0a:	30 18       	mov	r8,1
8000bb0c:	c0 e8       	rjmp	8000bb28 <udd_ep_interrupt+0x200>
8000bb0e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000bb12:	2f f8       	sub	r8,-1
8000bb14:	ef 68 ff f7 	st.b	r7[-9],r8
8000bb18:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000bb1c:	30 28       	mov	r8,2
8000bb1e:	f0 09 18 00 	cp.b	r9,r8
8000bb22:	fe 98 ff 0b 	brls	8000b938 <udd_ep_interrupt+0x10>
8000bb26:	30 08       	mov	r8,0
8000bb28:	10 9c       	mov	r12,r8
8000bb2a:	2f dd       	sub	sp,-12
8000bb2c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb30:	00 00       	add	r0,r0
8000bb32:	08 60       	and	r0,r4
8000bb34:	80 00       	ld.sh	r0,r0[0x0]
8000bb36:	b6 d4       	st.b	r11[0x5],r4
8000bb38:	80 00       	ld.sh	r0,r0[0x0]
8000bb3a:	b6 50       	st.h	r11[0xa],r0

8000bb3c <_stext>:
8000bb3c:	e0 7d 00 00 	mov	sp,65536
8000bb40:	fe c0 cf 40 	sub	r0,pc,-12480
8000bb44:	e3 b0 00 01 	mtsr	0x4,r0
8000bb48:	d5 53       	csrf	0x15
8000bb4a:	30 80       	mov	r0,8
8000bb4c:	e0 61 02 48 	mov	r1,584
8000bb50:	02 30       	cp.w	r0,r1
8000bb52:	c0 72       	brcc	8000bb60 <idata_load_loop_end>
8000bb54:	fe c2 c5 7c 	sub	r2,pc,-14980

8000bb58 <idata_load_loop>:
8000bb58:	a5 05       	ld.d	r4,r2++
8000bb5a:	a1 24       	st.d	r0++,r4
8000bb5c:	02 30       	cp.w	r0,r1
8000bb5e:	cf d3       	brcs	8000bb58 <idata_load_loop>

8000bb60 <idata_load_loop_end>:
8000bb60:	e0 60 02 48 	mov	r0,584
8000bb64:	e0 61 0e 08 	mov	r1,3592
8000bb68:	02 30       	cp.w	r0,r1
8000bb6a:	c0 62       	brcc	8000bb76 <udata_clear_loop_end>
8000bb6c:	30 02       	mov	r2,0
8000bb6e:	30 03       	mov	r3,0

8000bb70 <udata_clear_loop>:
8000bb70:	a1 22       	st.d	r0++,r2
8000bb72:	02 30       	cp.w	r0,r1
8000bb74:	cf e3       	brcs	8000bb70 <udata_clear_loop>

8000bb76 <udata_clear_loop_end>:
8000bb76:	fe cf d6 fe 	sub	pc,pc,-10498
8000bb7a:	d7 03       	nop

8000bb7c <cpu_irq_save>:
8000bb7c:	eb cd 40 80 	pushm	r7,lr
8000bb80:	1a 97       	mov	r7,sp
8000bb82:	20 1d       	sub	sp,4
8000bb84:	e1 b8 00 00 	mfsr	r8,0x0
8000bb88:	ef 48 ff fc 	st.w	r7[-4],r8
8000bb8c:	d3 03       	ssrf	0x10
8000bb8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb92:	10 9c       	mov	r12,r8
8000bb94:	2f fd       	sub	sp,-4
8000bb96:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bb9a <cpu_irq_restore>:
8000bb9a:	eb cd 40 80 	pushm	r7,lr
8000bb9e:	1a 97       	mov	r7,sp
8000bba0:	20 1d       	sub	sp,4
8000bba2:	ef 4c ff fc 	st.w	r7[-4],r12
8000bba6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbaa:	e3 b8 00 00 	mtsr	0x0,r8
8000bbae:	2f fd       	sub	sp,-4
8000bbb0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bbb4 <osc_enable>:
8000bbb4:	eb cd 40 80 	pushm	r7,lr
8000bbb8:	1a 97       	mov	r7,sp
8000bbba:	20 3d       	sub	sp,12
8000bbbc:	18 98       	mov	r8,r12
8000bbbe:	ef 68 ff f4 	st.b	r7[-12],r8
8000bbc2:	f0 1f 00 2b 	mcall	8000bc6c <osc_enable+0xb8>
8000bbc6:	18 98       	mov	r8,r12
8000bbc8:	ef 48 ff f8 	st.w	r7[-8],r8
8000bbcc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000bbd0:	58 18       	cp.w	r8,1
8000bbd2:	c1 c0       	breq	8000bc0a <osc_enable+0x56>
8000bbd4:	58 28       	cp.w	r8,2
8000bbd6:	c3 10       	breq	8000bc38 <osc_enable+0x84>
8000bbd8:	58 08       	cp.w	r8,0
8000bbda:	c4 21       	brne	8000bc5e <osc_enable+0xaa>
8000bbdc:	e0 68 03 00 	mov	r8,768
8000bbe0:	ef 48 ff fc 	st.w	r7[-4],r8
8000bbe4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbe8:	e8 18 00 07 	orl	r8,0x7
8000bbec:	ef 48 ff fc 	st.w	r7[-4],r8
8000bbf0:	fe 78 0c 00 	mov	r8,-62464
8000bbf4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bbf8:	91 a9       	st.w	r8[0x28],r9
8000bbfa:	fe 78 0c 00 	mov	r8,-62464
8000bbfe:	fe 79 0c 00 	mov	r9,-62464
8000bc02:	72 09       	ld.w	r9,r9[0x0]
8000bc04:	a3 a9       	sbr	r9,0x2
8000bc06:	91 09       	st.w	r8[0x0],r9
8000bc08:	c2 b8       	rjmp	8000bc5e <osc_enable+0xaa>
8000bc0a:	e0 68 03 00 	mov	r8,768
8000bc0e:	ef 48 ff fc 	st.w	r7[-4],r8
8000bc12:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc16:	e8 18 00 07 	orl	r8,0x7
8000bc1a:	ef 48 ff fc 	st.w	r7[-4],r8
8000bc1e:	fe 78 0c 00 	mov	r8,-62464
8000bc22:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bc26:	91 b9       	st.w	r8[0x2c],r9
8000bc28:	fe 78 0c 00 	mov	r8,-62464
8000bc2c:	fe 79 0c 00 	mov	r9,-62464
8000bc30:	72 09       	ld.w	r9,r9[0x0]
8000bc32:	a3 b9       	sbr	r9,0x3
8000bc34:	91 09       	st.w	r8[0x0],r9
8000bc36:	c1 48       	rjmp	8000bc5e <osc_enable+0xaa>
8000bc38:	e2 68 00 00 	mov	r8,131072
8000bc3c:	ef 48 ff fc 	st.w	r7[-4],r8
8000bc40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc44:	a9 a8       	sbr	r8,0x8
8000bc46:	ef 48 ff fc 	st.w	r7[-4],r8
8000bc4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc4e:	a1 a8       	sbr	r8,0x0
8000bc50:	ef 48 ff fc 	st.w	r7[-4],r8
8000bc54:	fe 78 0c 00 	mov	r8,-62464
8000bc58:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bc5c:	91 c9       	st.w	r8[0x30],r9
8000bc5e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bc62:	f0 1f 00 04 	mcall	8000bc70 <osc_enable+0xbc>
8000bc66:	2f dd       	sub	sp,-12
8000bc68:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc6c:	80 00       	ld.sh	r0,r0[0x0]
8000bc6e:	bb 7c       	lsl	r12,0x1b
8000bc70:	80 00       	ld.sh	r0,r0[0x0]
8000bc72:	bb 9a       	lsr	r10,0x1b

8000bc74 <osc_is_ready>:
8000bc74:	eb cd 40 80 	pushm	r7,lr
8000bc78:	1a 97       	mov	r7,sp
8000bc7a:	20 1d       	sub	sp,4
8000bc7c:	18 98       	mov	r8,r12
8000bc7e:	ef 68 ff fc 	st.b	r7[-4],r8
8000bc82:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bc86:	58 18       	cp.w	r8,1
8000bc88:	c0 d0       	breq	8000bca2 <osc_is_ready+0x2e>
8000bc8a:	58 28       	cp.w	r8,2
8000bc8c:	c1 30       	breq	8000bcb2 <osc_is_ready+0x3e>
8000bc8e:	58 08       	cp.w	r8,0
8000bc90:	c1 91       	brne	8000bcc2 <osc_is_ready+0x4e>
8000bc92:	fe 78 0c 00 	mov	r8,-62464
8000bc96:	71 58       	ld.w	r8,r8[0x54]
8000bc98:	e2 18 00 80 	andl	r8,0x80,COH
8000bc9c:	5f 18       	srne	r8
8000bc9e:	5c 58       	castu.b	r8
8000bca0:	c1 28       	rjmp	8000bcc4 <osc_is_ready+0x50>
8000bca2:	fe 78 0c 00 	mov	r8,-62464
8000bca6:	71 58       	ld.w	r8,r8[0x54]
8000bca8:	e2 18 01 00 	andl	r8,0x100,COH
8000bcac:	5f 18       	srne	r8
8000bcae:	5c 58       	castu.b	r8
8000bcb0:	c0 a8       	rjmp	8000bcc4 <osc_is_ready+0x50>
8000bcb2:	fe 78 0c 00 	mov	r8,-62464
8000bcb6:	71 58       	ld.w	r8,r8[0x54]
8000bcb8:	e2 18 02 00 	andl	r8,0x200,COH
8000bcbc:	5f 18       	srne	r8
8000bcbe:	5c 58       	castu.b	r8
8000bcc0:	c0 28       	rjmp	8000bcc4 <osc_is_ready+0x50>
8000bcc2:	30 08       	mov	r8,0
8000bcc4:	10 9c       	mov	r12,r8
8000bcc6:	2f fd       	sub	sp,-4
8000bcc8:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bccc <osc_get_rate>:
8000bccc:	eb cd 40 80 	pushm	r7,lr
8000bcd0:	1a 97       	mov	r7,sp
8000bcd2:	20 1d       	sub	sp,4
8000bcd4:	18 98       	mov	r8,r12
8000bcd6:	ef 68 ff fc 	st.b	r7[-4],r8
8000bcda:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bcde:	58 18       	cp.w	r8,1
8000bce0:	c0 a0       	breq	8000bcf4 <osc_get_rate+0x28>
8000bce2:	58 28       	cp.w	r8,2
8000bce4:	c0 d0       	breq	8000bcfe <osc_get_rate+0x32>
8000bce6:	58 08       	cp.w	r8,0
8000bce8:	c0 e1       	brne	8000bd04 <osc_get_rate+0x38>
8000bcea:	e0 68 1b 00 	mov	r8,6912
8000bcee:	ea 18 00 b7 	orh	r8,0xb7
8000bcf2:	c0 a8       	rjmp	8000bd06 <osc_get_rate+0x3a>
8000bcf4:	e0 68 44 00 	mov	r8,17408
8000bcf8:	ea 18 00 ac 	orh	r8,0xac
8000bcfc:	c0 58       	rjmp	8000bd06 <osc_get_rate+0x3a>
8000bcfe:	e0 68 80 00 	mov	r8,32768
8000bd02:	c0 28       	rjmp	8000bd06 <osc_get_rate+0x3a>
8000bd04:	30 08       	mov	r8,0
8000bd06:	10 9c       	mov	r12,r8
8000bd08:	2f fd       	sub	sp,-4
8000bd0a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd0e:	d7 03       	nop

8000bd10 <osc_wait_ready>:
8000bd10:	eb cd 40 80 	pushm	r7,lr
8000bd14:	1a 97       	mov	r7,sp
8000bd16:	20 1d       	sub	sp,4
8000bd18:	18 98       	mov	r8,r12
8000bd1a:	ef 68 ff fc 	st.b	r7[-4],r8
8000bd1e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bd22:	10 9c       	mov	r12,r8
8000bd24:	f0 1f 00 05 	mcall	8000bd38 <osc_wait_ready+0x28>
8000bd28:	18 98       	mov	r8,r12
8000bd2a:	ec 18 00 01 	eorl	r8,0x1
8000bd2e:	5c 58       	castu.b	r8
8000bd30:	cf 71       	brne	8000bd1e <osc_wait_ready+0xe>
8000bd32:	2f fd       	sub	sp,-4
8000bd34:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd38:	80 00       	ld.sh	r0,r0[0x0]
8000bd3a:	bc 74       	st.h	lr[0xe],r4

8000bd3c <pll_config_set_option>:
8000bd3c:	eb cd 40 80 	pushm	r7,lr
8000bd40:	1a 97       	mov	r7,sp
8000bd42:	20 2d       	sub	sp,8
8000bd44:	ef 4c ff fc 	st.w	r7[-4],r12
8000bd48:	ef 4b ff f8 	st.w	r7[-8],r11
8000bd4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd50:	70 09       	ld.w	r9,r8[0x0]
8000bd52:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bd56:	2f e8       	sub	r8,-2
8000bd58:	30 1a       	mov	r10,1
8000bd5a:	f4 08 09 48 	lsl	r8,r10,r8
8000bd5e:	10 49       	or	r9,r8
8000bd60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd64:	91 09       	st.w	r8[0x0],r9
8000bd66:	2f ed       	sub	sp,-8
8000bd68:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bd6c <pll_config_init>:
8000bd6c:	eb cd 40 80 	pushm	r7,lr
8000bd70:	1a 97       	mov	r7,sp
8000bd72:	20 5d       	sub	sp,20
8000bd74:	ef 4c ff f8 	st.w	r7[-8],r12
8000bd78:	ef 4b ff f4 	st.w	r7[-12],r11
8000bd7c:	ef 4a ff f0 	st.w	r7[-16],r10
8000bd80:	ef 49 ff ec 	st.w	r7[-20],r9
8000bd84:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd88:	5c 58       	castu.b	r8
8000bd8a:	10 9c       	mov	r12,r8
8000bd8c:	f0 1f 00 2e 	mcall	8000be44 <pll_config_init+0xd8>
8000bd90:	18 99       	mov	r9,r12
8000bd92:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bd96:	f2 08 02 48 	mul	r8,r9,r8
8000bd9a:	ef 48 ff fc 	st.w	r7[-4],r8
8000bd9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bda2:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000bda6:	f0 09 0d 08 	divu	r8,r8,r9
8000bdaa:	ef 48 ff fc 	st.w	r7[-4],r8
8000bdae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bdb2:	30 09       	mov	r9,0
8000bdb4:	91 09       	st.w	r8[0x0],r9
8000bdb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bdba:	e0 69 b3 ff 	mov	r9,46079
8000bdbe:	ea 19 04 c4 	orh	r9,0x4c4
8000bdc2:	12 38       	cp.w	r8,r9
8000bdc4:	e0 8b 00 16 	brhi	8000bdf0 <pll_config_init+0x84>
8000bdc8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bdcc:	58 88       	cp.w	r8,8
8000bdce:	e0 8b 00 11 	brhi	8000bdf0 <pll_config_init+0x84>
8000bdd2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bdd6:	a1 78       	lsl	r8,0x1
8000bdd8:	ef 48 ff ec 	st.w	r7[-20],r8
8000bddc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bde0:	a1 78       	lsl	r8,0x1
8000bde2:	ef 48 ff fc 	st.w	r7[-4],r8
8000bde6:	30 1b       	mov	r11,1
8000bde8:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bdec:	f0 1f 00 17 	mcall	8000be48 <pll_config_init+0xdc>
8000bdf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bdf4:	e0 69 fe 7f 	mov	r9,65151
8000bdf8:	ea 19 0a 21 	orh	r9,0xa21
8000bdfc:	12 38       	cp.w	r8,r9
8000bdfe:	e0 8b 00 07 	brhi	8000be0c <pll_config_init+0xa0>
8000be02:	30 0b       	mov	r11,0
8000be04:	ee fc ff f8 	ld.w	r12,r7[-8]
8000be08:	f0 1f 00 10 	mcall	8000be48 <pll_config_init+0xdc>
8000be0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be10:	70 09       	ld.w	r9,r8[0x0]
8000be12:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000be16:	20 18       	sub	r8,1
8000be18:	f0 0a 15 10 	lsl	r10,r8,0x10
8000be1c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000be20:	a9 68       	lsl	r8,0x8
8000be22:	10 4a       	or	r10,r8
8000be24:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000be28:	a1 78       	lsl	r8,0x1
8000be2a:	f5 e8 10 08 	or	r8,r10,r8
8000be2e:	f3 e8 10 08 	or	r8,r9,r8
8000be32:	10 99       	mov	r9,r8
8000be34:	ea 19 3f 00 	orh	r9,0x3f00
8000be38:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be3c:	91 09       	st.w	r8[0x0],r9
8000be3e:	2f bd       	sub	sp,-20
8000be40:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be44:	80 00       	ld.sh	r0,r0[0x0]
8000be46:	bc cc       	st.b	lr[0x4],r12
8000be48:	80 00       	ld.sh	r0,r0[0x0]
8000be4a:	bd 3c       	mul	r12,lr

8000be4c <pll_enable>:
8000be4c:	eb cd 40 80 	pushm	r7,lr
8000be50:	1a 97       	mov	r7,sp
8000be52:	20 2d       	sub	sp,8
8000be54:	ef 4c ff fc 	st.w	r7[-4],r12
8000be58:	ef 4b ff f8 	st.w	r7[-8],r11
8000be5c:	fe 78 0c 00 	mov	r8,-62464
8000be60:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000be64:	ee fa ff fc 	ld.w	r10,r7[-4]
8000be68:	74 0a       	ld.w	r10,r10[0x0]
8000be6a:	a1 aa       	sbr	r10,0x0
8000be6c:	2f 89       	sub	r9,-8
8000be6e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000be72:	2f ed       	sub	sp,-8
8000be74:	e3 cd 80 80 	ldm	sp++,r7,pc

8000be78 <pll_is_locked>:
8000be78:	eb cd 40 80 	pushm	r7,lr
8000be7c:	1a 97       	mov	r7,sp
8000be7e:	20 1d       	sub	sp,4
8000be80:	ef 4c ff fc 	st.w	r7[-4],r12
8000be84:	fe 78 0c 00 	mov	r8,-62464
8000be88:	71 59       	ld.w	r9,r8[0x54]
8000be8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be8e:	30 1a       	mov	r10,1
8000be90:	f4 08 09 48 	lsl	r8,r10,r8
8000be94:	f3 e8 00 08 	and	r8,r9,r8
8000be98:	5f 18       	srne	r8
8000be9a:	5c 58       	castu.b	r8
8000be9c:	10 9c       	mov	r12,r8
8000be9e:	2f fd       	sub	sp,-4
8000bea0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bea4 <pll_enable_source>:
8000bea4:	eb cd 40 80 	pushm	r7,lr
8000bea8:	1a 97       	mov	r7,sp
8000beaa:	20 1d       	sub	sp,4
8000beac:	ef 4c ff fc 	st.w	r7[-4],r12
8000beb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000beb4:	58 08       	cp.w	r8,0
8000beb6:	c0 40       	breq	8000bebe <pll_enable_source+0x1a>
8000beb8:	58 18       	cp.w	r8,1
8000beba:	c1 10       	breq	8000bedc <pll_enable_source+0x38>
8000bebc:	c2 08       	rjmp	8000befc <pll_enable_source+0x58>
8000bebe:	30 0c       	mov	r12,0
8000bec0:	f0 1f 00 11 	mcall	8000bf04 <pll_enable_source+0x60>
8000bec4:	18 98       	mov	r8,r12
8000bec6:	ec 18 00 01 	eorl	r8,0x1
8000beca:	5c 58       	castu.b	r8
8000becc:	c1 70       	breq	8000befa <pll_enable_source+0x56>
8000bece:	30 0c       	mov	r12,0
8000bed0:	f0 1f 00 0e 	mcall	8000bf08 <pll_enable_source+0x64>
8000bed4:	30 0c       	mov	r12,0
8000bed6:	f0 1f 00 0e 	mcall	8000bf0c <pll_enable_source+0x68>
8000beda:	c1 18       	rjmp	8000befc <pll_enable_source+0x58>
8000bedc:	30 1c       	mov	r12,1
8000bede:	f0 1f 00 0a 	mcall	8000bf04 <pll_enable_source+0x60>
8000bee2:	18 98       	mov	r8,r12
8000bee4:	ec 18 00 01 	eorl	r8,0x1
8000bee8:	5c 58       	castu.b	r8
8000beea:	c0 90       	breq	8000befc <pll_enable_source+0x58>
8000beec:	30 1c       	mov	r12,1
8000beee:	f0 1f 00 07 	mcall	8000bf08 <pll_enable_source+0x64>
8000bef2:	30 1c       	mov	r12,1
8000bef4:	f0 1f 00 06 	mcall	8000bf0c <pll_enable_source+0x68>
8000bef8:	c0 28       	rjmp	8000befc <pll_enable_source+0x58>
8000befa:	d7 03       	nop
8000befc:	2f fd       	sub	sp,-4
8000befe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf02:	00 00       	add	r0,r0
8000bf04:	80 00       	ld.sh	r0,r0[0x0]
8000bf06:	bc 74       	st.h	lr[0xe],r4
8000bf08:	80 00       	ld.sh	r0,r0[0x0]
8000bf0a:	bb b4       	sbr	r4,0x1b
8000bf0c:	80 00       	ld.sh	r0,r0[0x0]
8000bf0e:	bd 10       	ld.d	r0,--lr

8000bf10 <pll_enable_config_defaults>:
8000bf10:	eb cd 40 80 	pushm	r7,lr
8000bf14:	1a 97       	mov	r7,sp
8000bf16:	20 2d       	sub	sp,8
8000bf18:	ef 4c ff f8 	st.w	r7[-8],r12
8000bf1c:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bf20:	f0 1f 00 15 	mcall	8000bf74 <pll_enable_config_defaults+0x64>
8000bf24:	18 98       	mov	r8,r12
8000bf26:	58 08       	cp.w	r8,0
8000bf28:	c2 11       	brne	8000bf6a <pll_enable_config_defaults+0x5a>
8000bf2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bf2e:	58 08       	cp.w	r8,0
8000bf30:	c0 c1       	brne	8000bf48 <pll_enable_config_defaults+0x38>
8000bf32:	30 0c       	mov	r12,0
8000bf34:	f0 1f 00 11 	mcall	8000bf78 <pll_enable_config_defaults+0x68>
8000bf38:	ee c8 00 04 	sub	r8,r7,4
8000bf3c:	30 b9       	mov	r9,11
8000bf3e:	30 2a       	mov	r10,2
8000bf40:	30 0b       	mov	r11,0
8000bf42:	10 9c       	mov	r12,r8
8000bf44:	f0 1f 00 0e 	mcall	8000bf7c <pll_enable_config_defaults+0x6c>
8000bf48:	ee c8 00 04 	sub	r8,r7,4
8000bf4c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bf50:	10 9c       	mov	r12,r8
8000bf52:	f0 1f 00 0c 	mcall	8000bf80 <pll_enable_config_defaults+0x70>
8000bf56:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bf5a:	f0 1f 00 07 	mcall	8000bf74 <pll_enable_config_defaults+0x64>
8000bf5e:	18 98       	mov	r8,r12
8000bf60:	ec 18 00 01 	eorl	r8,0x1
8000bf64:	5c 58       	castu.b	r8
8000bf66:	cf 81       	brne	8000bf56 <pll_enable_config_defaults+0x46>
8000bf68:	c0 28       	rjmp	8000bf6c <pll_enable_config_defaults+0x5c>
8000bf6a:	d7 03       	nop
8000bf6c:	2f ed       	sub	sp,-8
8000bf6e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf72:	00 00       	add	r0,r0
8000bf74:	80 00       	ld.sh	r0,r0[0x0]
8000bf76:	be 78       	st.h	pc[0xe],r8
8000bf78:	80 00       	ld.sh	r0,r0[0x0]
8000bf7a:	be a4       	st.b	pc[0x2],r4
8000bf7c:	80 00       	ld.sh	r0,r0[0x0]
8000bf7e:	bd 6c       	lsl	r12,0x1c
8000bf80:	80 00       	ld.sh	r0,r0[0x0]
8000bf82:	be 4c       	st.h	pc[0x8],r12

8000bf84 <genclk_config_defaults>:
8000bf84:	eb cd 40 80 	pushm	r7,lr
8000bf88:	1a 97       	mov	r7,sp
8000bf8a:	20 2d       	sub	sp,8
8000bf8c:	ef 4c ff fc 	st.w	r7[-4],r12
8000bf90:	ef 4b ff f8 	st.w	r7[-8],r11
8000bf94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bf98:	30 09       	mov	r9,0
8000bf9a:	91 09       	st.w	r8[0x0],r9
8000bf9c:	2f ed       	sub	sp,-8
8000bf9e:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bfa2 <genclk_config_set_source>:
8000bfa2:	eb cd 40 80 	pushm	r7,lr
8000bfa6:	1a 97       	mov	r7,sp
8000bfa8:	20 3d       	sub	sp,12
8000bfaa:	ef 4c ff f8 	st.w	r7[-8],r12
8000bfae:	ef 4b ff f4 	st.w	r7[-12],r11
8000bfb2:	30 38       	mov	r8,3
8000bfb4:	ef 48 ff fc 	st.w	r7[-4],r8
8000bfb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bfbc:	70 09       	ld.w	r9,r8[0x0]
8000bfbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bfc2:	5c d8       	com	r8
8000bfc4:	10 69       	and	r9,r8
8000bfc6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bfca:	10 49       	or	r9,r8
8000bfcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bfd0:	91 09       	st.w	r8[0x0],r9
8000bfd2:	2f dd       	sub	sp,-12
8000bfd4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bfd8 <genclk_config_set_divider>:
8000bfd8:	eb cd 40 80 	pushm	r7,lr
8000bfdc:	1a 97       	mov	r7,sp
8000bfde:	20 2d       	sub	sp,8
8000bfe0:	ef 4c ff fc 	st.w	r7[-4],r12
8000bfe4:	ef 4b ff f8 	st.w	r7[-8],r11
8000bfe8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bfec:	70 08       	ld.w	r8,r8[0x0]
8000bfee:	10 99       	mov	r9,r8
8000bff0:	e0 19 00 ef 	andl	r9,0xef
8000bff4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bff8:	91 09       	st.w	r8[0x0],r9
8000bffa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bffe:	58 18       	cp.w	r8,1
8000c000:	e0 88 00 17 	brls	8000c02e <genclk_config_set_divider+0x56>
8000c004:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c008:	70 08       	ld.w	r8,r8[0x0]
8000c00a:	10 99       	mov	r9,r8
8000c00c:	a5 a9       	sbr	r9,0x4
8000c00e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c012:	91 09       	st.w	r8[0x0],r9
8000c014:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c018:	70 09       	ld.w	r9,r8[0x0]
8000c01a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c01e:	2f f8       	sub	r8,-1
8000c020:	a1 98       	lsr	r8,0x1
8000c022:	20 18       	sub	r8,1
8000c024:	a9 68       	lsl	r8,0x8
8000c026:	10 49       	or	r9,r8
8000c028:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c02c:	91 09       	st.w	r8[0x0],r9
8000c02e:	2f ed       	sub	sp,-8
8000c030:	e3 cd 80 80 	ldm	sp++,r7,pc

8000c034 <genclk_enable>:
8000c034:	eb cd 40 80 	pushm	r7,lr
8000c038:	1a 97       	mov	r7,sp
8000c03a:	20 2d       	sub	sp,8
8000c03c:	ef 4c ff fc 	st.w	r7[-4],r12
8000c040:	ef 4b ff f8 	st.w	r7[-8],r11
8000c044:	fe 78 0c 00 	mov	r8,-62464
8000c048:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000c04c:	ee fa ff fc 	ld.w	r10,r7[-4]
8000c050:	74 0a       	ld.w	r10,r10[0x0]
8000c052:	a3 aa       	sbr	r10,0x2
8000c054:	2e 89       	sub	r9,-24
8000c056:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000c05a:	2f ed       	sub	sp,-8
8000c05c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000c060 <genclk_enable_source>:
8000c060:	eb cd 40 80 	pushm	r7,lr
8000c064:	1a 97       	mov	r7,sp
8000c066:	20 1d       	sub	sp,4
8000c068:	ef 4c ff fc 	st.w	r7[-4],r12
8000c06c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c070:	58 18       	cp.w	r8,1
8000c072:	c1 40       	breq	8000c09a <genclk_enable_source+0x3a>
8000c074:	c0 43       	brcs	8000c07c <genclk_enable_source+0x1c>
8000c076:	58 28       	cp.w	r8,2
8000c078:	c2 00       	breq	8000c0b8 <genclk_enable_source+0x58>
8000c07a:	c2 68       	rjmp	8000c0c6 <genclk_enable_source+0x66>
8000c07c:	30 0c       	mov	r12,0
8000c07e:	f0 1f 00 14 	mcall	8000c0cc <genclk_enable_source+0x6c>
8000c082:	18 98       	mov	r8,r12
8000c084:	ec 18 00 01 	eorl	r8,0x1
8000c088:	5c 58       	castu.b	r8
8000c08a:	c1 b0       	breq	8000c0c0 <genclk_enable_source+0x60>
8000c08c:	30 0c       	mov	r12,0
8000c08e:	f0 1f 00 11 	mcall	8000c0d0 <genclk_enable_source+0x70>
8000c092:	30 0c       	mov	r12,0
8000c094:	f0 1f 00 10 	mcall	8000c0d4 <genclk_enable_source+0x74>
8000c098:	c1 78       	rjmp	8000c0c6 <genclk_enable_source+0x66>
8000c09a:	30 1c       	mov	r12,1
8000c09c:	f0 1f 00 0c 	mcall	8000c0cc <genclk_enable_source+0x6c>
8000c0a0:	18 98       	mov	r8,r12
8000c0a2:	ec 18 00 01 	eorl	r8,0x1
8000c0a6:	5c 58       	castu.b	r8
8000c0a8:	c0 e0       	breq	8000c0c4 <genclk_enable_source+0x64>
8000c0aa:	30 1c       	mov	r12,1
8000c0ac:	f0 1f 00 09 	mcall	8000c0d0 <genclk_enable_source+0x70>
8000c0b0:	30 1c       	mov	r12,1
8000c0b2:	f0 1f 00 09 	mcall	8000c0d4 <genclk_enable_source+0x74>
8000c0b6:	c0 88       	rjmp	8000c0c6 <genclk_enable_source+0x66>
8000c0b8:	30 0c       	mov	r12,0
8000c0ba:	f0 1f 00 08 	mcall	8000c0d8 <genclk_enable_source+0x78>
8000c0be:	c0 48       	rjmp	8000c0c6 <genclk_enable_source+0x66>
8000c0c0:	d7 03       	nop
8000c0c2:	c0 28       	rjmp	8000c0c6 <genclk_enable_source+0x66>
8000c0c4:	d7 03       	nop
8000c0c6:	2f fd       	sub	sp,-4
8000c0c8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0cc:	80 00       	ld.sh	r0,r0[0x0]
8000c0ce:	bc 74       	st.h	lr[0xe],r4
8000c0d0:	80 00       	ld.sh	r0,r0[0x0]
8000c0d2:	bb b4       	sbr	r4,0x1b
8000c0d4:	80 00       	ld.sh	r0,r0[0x0]
8000c0d6:	bd 10       	ld.d	r0,--lr
8000c0d8:	80 00       	ld.sh	r0,r0[0x0]
8000c0da:	bf 10       	ld.d	r0,--pc

8000c0dc <genclk_enable_config>:
8000c0dc:	eb cd 40 80 	pushm	r7,lr
8000c0e0:	1a 97       	mov	r7,sp
8000c0e2:	20 4d       	sub	sp,16
8000c0e4:	ef 4c ff f8 	st.w	r7[-8],r12
8000c0e8:	ef 4b ff f4 	st.w	r7[-12],r11
8000c0ec:	ef 4a ff f0 	st.w	r7[-16],r10
8000c0f0:	ee c8 00 04 	sub	r8,r7,4
8000c0f4:	ee fb ff f8 	ld.w	r11,r7[-8]
8000c0f8:	10 9c       	mov	r12,r8
8000c0fa:	f0 1f 00 10 	mcall	8000c138 <genclk_enable_config+0x5c>
8000c0fe:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c102:	f0 1f 00 0f 	mcall	8000c13c <genclk_enable_config+0x60>
8000c106:	ee c8 00 04 	sub	r8,r7,4
8000c10a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c10e:	10 9c       	mov	r12,r8
8000c110:	f0 1f 00 0c 	mcall	8000c140 <genclk_enable_config+0x64>
8000c114:	ee c8 00 04 	sub	r8,r7,4
8000c118:	ee fb ff f0 	ld.w	r11,r7[-16]
8000c11c:	10 9c       	mov	r12,r8
8000c11e:	f0 1f 00 0a 	mcall	8000c144 <genclk_enable_config+0x68>
8000c122:	ee c8 00 04 	sub	r8,r7,4
8000c126:	ee fb ff f8 	ld.w	r11,r7[-8]
8000c12a:	10 9c       	mov	r12,r8
8000c12c:	f0 1f 00 07 	mcall	8000c148 <genclk_enable_config+0x6c>
8000c130:	2f cd       	sub	sp,-16
8000c132:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c136:	00 00       	add	r0,r0
8000c138:	80 00       	ld.sh	r0,r0[0x0]
8000c13a:	bf 84       	lsr	r4,0x1e
8000c13c:	80 00       	ld.sh	r0,r0[0x0]
8000c13e:	c0 60       	breq	8000c14a <genclk_enable_config+0x6e>
8000c140:	80 00       	ld.sh	r0,r0[0x0]
8000c142:	bf a2       	sbr	r2,0x1e
8000c144:	80 00       	ld.sh	r0,r0[0x0]
8000c146:	bf d8       	cbr	r8,0x1f
8000c148:	80 00       	ld.sh	r0,r0[0x0]
8000c14a:	c0 34       	brge	8000c150 <sysclk_get_main_hz+0x4>

8000c14c <sysclk_get_main_hz>:
8000c14c:	eb cd 40 80 	pushm	r7,lr
8000c150:	1a 97       	mov	r7,sp
8000c152:	30 0c       	mov	r12,0
8000c154:	f0 1f 00 06 	mcall	8000c16c <sysclk_get_main_hz+0x20>
8000c158:	18 99       	mov	r9,r12
8000c15a:	12 98       	mov	r8,r9
8000c15c:	a3 68       	lsl	r8,0x2
8000c15e:	12 08       	add	r8,r9
8000c160:	a1 78       	lsl	r8,0x1
8000c162:	12 08       	add	r8,r9
8000c164:	a1 98       	lsr	r8,0x1
8000c166:	10 9c       	mov	r12,r8
8000c168:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c16c:	80 00       	ld.sh	r0,r0[0x0]
8000c16e:	bc cc       	st.b	lr[0x4],r12

8000c170 <sysclk_get_cpu_hz>:
8000c170:	eb cd 40 80 	pushm	r7,lr
8000c174:	1a 97       	mov	r7,sp
8000c176:	f0 1f 00 04 	mcall	8000c184 <sysclk_get_cpu_hz+0x14>
8000c17a:	18 98       	mov	r8,r12
8000c17c:	10 9c       	mov	r12,r8
8000c17e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c182:	00 00       	add	r0,r0
8000c184:	80 00       	ld.sh	r0,r0[0x0]
8000c186:	c1 4c       	rcall	8000c1ae <sysclk_set_source+0x6>

8000c188 <sysclk_enable_hsb_module>:
8000c188:	eb cd 40 80 	pushm	r7,lr
8000c18c:	1a 97       	mov	r7,sp
8000c18e:	20 1d       	sub	sp,4
8000c190:	ef 4c ff fc 	st.w	r7[-4],r12
8000c194:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c198:	30 1c       	mov	r12,1
8000c19a:	f0 1f 00 03 	mcall	8000c1a4 <sysclk_enable_hsb_module+0x1c>
8000c19e:	2f fd       	sub	sp,-4
8000c1a0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1a4:	80 00       	ld.sh	r0,r0[0x0]
8000c1a6:	c1 fc       	rcall	8000c1e4 <sysclk_set_source+0x3c>

8000c1a8 <sysclk_set_source>:
8000c1a8:	eb cd 40 80 	pushm	r7,lr
8000c1ac:	1a 97       	mov	r7,sp
8000c1ae:	20 3d       	sub	sp,12
8000c1b0:	ef 4c ff f4 	st.w	r7[-12],r12
8000c1b4:	f0 1f 00 10 	mcall	8000c1f4 <sysclk_set_source+0x4c>
8000c1b8:	18 98       	mov	r8,r12
8000c1ba:	ef 48 ff f8 	st.w	r7[-8],r8
8000c1be:	fe 78 0c 00 	mov	r8,-62464
8000c1c2:	70 08       	ld.w	r8,r8[0x0]
8000c1c4:	e0 18 ff fc 	andl	r8,0xfffc
8000c1c8:	ef 48 ff fc 	st.w	r7[-4],r8
8000c1cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c1d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c1d4:	f3 e8 10 08 	or	r8,r9,r8
8000c1d8:	ef 48 ff fc 	st.w	r7[-4],r8
8000c1dc:	fe 78 0c 00 	mov	r8,-62464
8000c1e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c1e4:	91 09       	st.w	r8[0x0],r9
8000c1e6:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c1ea:	f0 1f 00 04 	mcall	8000c1f8 <sysclk_set_source+0x50>
8000c1ee:	2f dd       	sub	sp,-12
8000c1f0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1f4:	80 00       	ld.sh	r0,r0[0x0]
8000c1f6:	bb 7c       	lsl	r12,0x1b
8000c1f8:	80 00       	ld.sh	r0,r0[0x0]
8000c1fa:	bb 9a       	lsr	r10,0x1b

8000c1fc <sysclk_priv_enable_module>:
8000c1fc:	eb cd 40 80 	pushm	r7,lr
8000c200:	1a 97       	mov	r7,sp
8000c202:	20 4d       	sub	sp,16
8000c204:	ef 4c ff f4 	st.w	r7[-12],r12
8000c208:	ef 4b ff f0 	st.w	r7[-16],r11
8000c20c:	f0 1f 00 17 	mcall	8000c268 <sysclk_priv_enable_module+0x6c>
8000c210:	18 98       	mov	r8,r12
8000c212:	ef 48 ff f8 	st.w	r7[-8],r8
8000c216:	fe 78 0c 00 	mov	r8,-62464
8000c21a:	71 58       	ld.w	r8,r8[0x54]
8000c21c:	e2 18 00 40 	andl	r8,0x40,COH
8000c220:	cf b0       	breq	8000c216 <sysclk_priv_enable_module+0x1a>
8000c222:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c226:	a3 68       	lsl	r8,0x2
8000c228:	e0 28 f3 f8 	sub	r8,62456
8000c22c:	70 08       	ld.w	r8,r8[0x0]
8000c22e:	ef 48 ff fc 	st.w	r7[-4],r8
8000c232:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000c236:	30 19       	mov	r9,1
8000c238:	f2 08 09 48 	lsl	r8,r9,r8
8000c23c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c240:	f3 e8 10 08 	or	r8,r9,r8
8000c244:	ef 48 ff fc 	st.w	r7[-4],r8
8000c248:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c24c:	a3 68       	lsl	r8,0x2
8000c24e:	e0 28 f3 f8 	sub	r8,62456
8000c252:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c256:	91 09       	st.w	r8[0x0],r9
8000c258:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c25c:	f0 1f 00 04 	mcall	8000c26c <sysclk_priv_enable_module+0x70>
8000c260:	2f cd       	sub	sp,-16
8000c262:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c266:	00 00       	add	r0,r0
8000c268:	80 00       	ld.sh	r0,r0[0x0]
8000c26a:	bb 7c       	lsl	r12,0x1b
8000c26c:	80 00       	ld.sh	r0,r0[0x0]
8000c26e:	bb 9a       	lsr	r10,0x1b

8000c270 <sysclk_enable_pbb_module>:
8000c270:	eb cd 40 80 	pushm	r7,lr
8000c274:	1a 97       	mov	r7,sp
8000c276:	20 3d       	sub	sp,12
8000c278:	ef 4c ff f4 	st.w	r7[-12],r12
8000c27c:	30 08       	mov	r8,0
8000c27e:	ef 48 ff f8 	st.w	r7[-8],r8
8000c282:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c286:	58 98       	cp.w	r8,9
8000c288:	c0 41       	brne	8000c290 <sysclk_enable_pbb_module+0x20>
8000c28a:	30 18       	mov	r8,1
8000c28c:	ef 48 ff f8 	st.w	r7[-8],r8
8000c290:	f0 1f 00 15 	mcall	8000c2e4 <sysclk_enable_pbb_module+0x74>
8000c294:	18 98       	mov	r8,r12
8000c296:	ef 48 ff fc 	st.w	r7[-4],r8
8000c29a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c29e:	49 39       	lddpc	r9,8000c2e8 <sysclk_enable_pbb_module+0x78>
8000c2a0:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000c2a4:	58 08       	cp.w	r8,0
8000c2a6:	c0 91       	brne	8000c2b8 <sysclk_enable_pbb_module+0x48>
8000c2a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c2ac:	a1 78       	lsl	r8,0x1
8000c2ae:	2f f8       	sub	r8,-1
8000c2b0:	a1 78       	lsl	r8,0x1
8000c2b2:	10 9c       	mov	r12,r8
8000c2b4:	f0 1f 00 0e 	mcall	8000c2ec <sysclk_enable_pbb_module+0x7c>
8000c2b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c2bc:	48 b9       	lddpc	r9,8000c2e8 <sysclk_enable_pbb_module+0x78>
8000c2be:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000c2c2:	2f f9       	sub	r9,-1
8000c2c4:	5c 59       	castu.b	r9
8000c2c6:	48 9a       	lddpc	r10,8000c2e8 <sysclk_enable_pbb_module+0x78>
8000c2c8:	f4 08 0b 09 	st.b	r10[r8],r9
8000c2cc:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c2d0:	f0 1f 00 08 	mcall	8000c2f0 <sysclk_enable_pbb_module+0x80>
8000c2d4:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c2d8:	30 3c       	mov	r12,3
8000c2da:	f0 1f 00 07 	mcall	8000c2f4 <sysclk_enable_pbb_module+0x84>
8000c2de:	2f dd       	sub	sp,-12
8000c2e0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2e4:	80 00       	ld.sh	r0,r0[0x0]
8000c2e6:	bb 7c       	lsl	r12,0x1b
8000c2e8:	00 00       	add	r0,r0
8000c2ea:	08 8c       	andn	r12,r4
8000c2ec:	80 00       	ld.sh	r0,r0[0x0]
8000c2ee:	c1 88       	rjmp	8000c31e <sysclk_enable_usb+0x26>
8000c2f0:	80 00       	ld.sh	r0,r0[0x0]
8000c2f2:	bb 9a       	lsr	r10,0x1b
8000c2f4:	80 00       	ld.sh	r0,r0[0x0]
8000c2f6:	c1 fc       	rcall	8000c334 <sysclk_init+0x10>

8000c2f8 <sysclk_enable_usb>:
8000c2f8:	eb cd 40 80 	pushm	r7,lr
8000c2fc:	1a 97       	mov	r7,sp
8000c2fe:	30 1c       	mov	r12,1
8000c300:	f0 1f 00 06 	mcall	8000c318 <sysclk_enable_usb+0x20>
8000c304:	30 3c       	mov	r12,3
8000c306:	f0 1f 00 06 	mcall	8000c31c <sysclk_enable_usb+0x24>
8000c30a:	30 1a       	mov	r10,1
8000c30c:	30 0b       	mov	r11,0
8000c30e:	30 4c       	mov	r12,4
8000c310:	f0 1f 00 04 	mcall	8000c320 <sysclk_enable_usb+0x28>
8000c314:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c318:	80 00       	ld.sh	r0,r0[0x0]
8000c31a:	c2 70       	breq	8000c368 <sysclk_init+0x44>
8000c31c:	80 00       	ld.sh	r0,r0[0x0]
8000c31e:	c1 88       	rjmp	8000c34e <sysclk_init+0x2a>
8000c320:	80 00       	ld.sh	r0,r0[0x0]
8000c322:	c0 dc       	rcall	8000c33c <sysclk_init+0x18>

8000c324 <sysclk_init>:
8000c324:	eb cd 40 80 	pushm	r7,lr
8000c328:	1a 97       	mov	r7,sp
8000c32a:	30 0c       	mov	r12,0
8000c32c:	f0 1f 00 07 	mcall	8000c348 <sysclk_init+0x24>
8000c330:	f0 1f 00 07 	mcall	8000c34c <sysclk_init+0x28>
8000c334:	18 98       	mov	r8,r12
8000c336:	10 9c       	mov	r12,r8
8000c338:	f0 1f 00 06 	mcall	8000c350 <sysclk_init+0x2c>
8000c33c:	30 2c       	mov	r12,2
8000c33e:	f0 1f 00 06 	mcall	8000c354 <sysclk_init+0x30>
8000c342:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c346:	00 00       	add	r0,r0
8000c348:	80 00       	ld.sh	r0,r0[0x0]
8000c34a:	bf 10       	ld.d	r0,--pc
8000c34c:	80 00       	ld.sh	r0,r0[0x0]
8000c34e:	c1 70       	breq	8000c37c <sysclk_init+0x58>
8000c350:	80 00       	ld.sh	r0,r0[0x0]
8000c352:	85 b4       	st.w	r2[0x2c],r4
8000c354:	80 00       	ld.sh	r0,r0[0x0]
8000c356:	c1 a8       	rjmp	8000c38a <get_nb_lun+0xa>
8000c358:	22 53       	sub	r3,37
8000c35a:	44 20       	lddsp	r0,sp[0x108]
8000c35c:	43 61       	lddsp	r1,sp[0xd8]
8000c35e:	72 64       	ld.w	r4,r9[0x18]
8000c360:	20 53       	sub	r3,5
8000c362:	6c 6f       	ld.w	pc,r6[0x18]
8000c364:	74 20       	ld.w	r0,r10[0x8]
8000c366:	30 22       	mov	r2,2
8000c368:	00 00       	add	r0,r0
8000c36a:	00 00       	add	r0,r0
8000c36c:	22 53       	sub	r3,37
8000c36e:	44 20       	lddsp	r0,sp[0x108]
8000c370:	43 61       	lddsp	r1,sp[0xd8]
8000c372:	72 64       	ld.w	r4,r9[0x18]
8000c374:	20 53       	sub	r3,5
8000c376:	6c 6f       	ld.w	pc,r6[0x18]
8000c378:	74 20       	ld.w	r0,r10[0x8]
8000c37a:	31 22       	mov	r2,18
8000c37c:	00 00       	add	r0,r0
	...

8000c380 <get_nb_lun>:
8000c380:	eb cd 40 80 	pushm	r7,lr
8000c384:	1a 97       	mov	r7,sp
8000c386:	30 28       	mov	r8,2
8000c388:	10 9c       	mov	r12,r8
8000c38a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c38e:	d7 03       	nop

8000c390 <mem_test_unit_ready>:
8000c390:	eb cd 40 80 	pushm	r7,lr
8000c394:	1a 97       	mov	r7,sp
8000c396:	20 2d       	sub	sp,8
8000c398:	18 98       	mov	r8,r12
8000c39a:	ef 68 ff f8 	st.b	r7[-8],r8
8000c39e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c3a2:	30 18       	mov	r8,1
8000c3a4:	f0 09 18 00 	cp.b	r9,r8
8000c3a8:	e0 8b 00 0f 	brhi	8000c3c6 <mem_test_unit_ready+0x36>
8000c3ac:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c3b0:	48 aa       	lddpc	r10,8000c3d8 <mem_test_unit_ready+0x48>
8000c3b2:	12 98       	mov	r8,r9
8000c3b4:	a3 78       	lsl	r8,0x3
8000c3b6:	12 18       	sub	r8,r9
8000c3b8:	a3 68       	lsl	r8,0x2
8000c3ba:	f4 08 00 08 	add	r8,r10,r8
8000c3be:	70 08       	ld.w	r8,r8[0x0]
8000c3c0:	5d 18       	icall	r8
8000c3c2:	18 98       	mov	r8,r12
8000c3c4:	c0 28       	rjmp	8000c3c8 <mem_test_unit_ready+0x38>
8000c3c6:	30 18       	mov	r8,1
8000c3c8:	ef 48 ff fc 	st.w	r7[-4],r8
8000c3cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c3d0:	10 9c       	mov	r12,r8
8000c3d2:	2f ed       	sub	sp,-8
8000c3d4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3d8:	80 00       	ld.sh	r0,r0[0x0]
8000c3da:	f4 34 eb cd 	sub	r4,-660531

8000c3dc <mem_read_capacity>:
8000c3dc:	eb cd 40 80 	pushm	r7,lr
8000c3e0:	1a 97       	mov	r7,sp
8000c3e2:	20 3d       	sub	sp,12
8000c3e4:	18 98       	mov	r8,r12
8000c3e6:	ef 4b ff f4 	st.w	r7[-12],r11
8000c3ea:	ef 68 ff f8 	st.b	r7[-8],r8
8000c3ee:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c3f2:	30 18       	mov	r8,1
8000c3f4:	f0 09 18 00 	cp.b	r9,r8
8000c3f8:	e0 8b 00 10 	brhi	8000c418 <mem_read_capacity+0x3c>
8000c3fc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c400:	48 ba       	lddpc	r10,8000c42c <mem_read_capacity+0x50>
8000c402:	12 98       	mov	r8,r9
8000c404:	a3 78       	lsl	r8,0x3
8000c406:	12 18       	sub	r8,r9
8000c408:	2f f8       	sub	r8,-1
8000c40a:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
8000c40e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c412:	5d 18       	icall	r8
8000c414:	18 98       	mov	r8,r12
8000c416:	c0 28       	rjmp	8000c41a <mem_read_capacity+0x3e>
8000c418:	30 18       	mov	r8,1
8000c41a:	ef 48 ff fc 	st.w	r7[-4],r8
8000c41e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c422:	10 9c       	mov	r12,r8
8000c424:	2f dd       	sub	sp,-12
8000c426:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c42a:	00 00       	add	r0,r0
8000c42c:	80 00       	ld.sh	r0,r0[0x0]
8000c42e:	f4 34 eb cd 	sub	r4,-660531

8000c430 <mem_wr_protect>:
8000c430:	eb cd 40 80 	pushm	r7,lr
8000c434:	1a 97       	mov	r7,sp
8000c436:	20 2d       	sub	sp,8
8000c438:	18 98       	mov	r8,r12
8000c43a:	ef 68 ff f8 	st.b	r7[-8],r8
8000c43e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c442:	30 18       	mov	r8,1
8000c444:	f0 09 18 00 	cp.b	r9,r8
8000c448:	e0 8b 00 10 	brhi	8000c468 <mem_wr_protect+0x38>
8000c44c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c450:	48 ba       	lddpc	r10,8000c47c <mem_wr_protect+0x4c>
8000c452:	12 98       	mov	r8,r9
8000c454:	a3 78       	lsl	r8,0x3
8000c456:	12 18       	sub	r8,r9
8000c458:	a3 68       	lsl	r8,0x2
8000c45a:	f4 08 00 08 	add	r8,r10,r8
8000c45e:	2f 88       	sub	r8,-8
8000c460:	70 08       	ld.w	r8,r8[0x0]
8000c462:	5d 18       	icall	r8
8000c464:	18 98       	mov	r8,r12
8000c466:	c0 28       	rjmp	8000c46a <mem_wr_protect+0x3a>
8000c468:	30 18       	mov	r8,1
8000c46a:	ef 68 ff ff 	st.b	r7[-1],r8
8000c46e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c472:	10 9c       	mov	r12,r8
8000c474:	2f ed       	sub	sp,-8
8000c476:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c47a:	00 00       	add	r0,r0
8000c47c:	80 00       	ld.sh	r0,r0[0x0]
8000c47e:	f4 34 eb cd 	sub	r4,-660531

8000c480 <mem_name>:
8000c480:	eb cd 40 80 	pushm	r7,lr
8000c484:	1a 97       	mov	r7,sp
8000c486:	20 1d       	sub	sp,4
8000c488:	18 98       	mov	r8,r12
8000c48a:	ef 68 ff fc 	st.b	r7[-4],r8
8000c48e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c492:	30 18       	mov	r8,1
8000c494:	f0 09 18 00 	cp.b	r9,r8
8000c498:	e0 8b 00 0e 	brhi	8000c4b4 <mem_name+0x34>
8000c49c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c4a0:	48 8a       	lddpc	r10,8000c4c0 <mem_name+0x40>
8000c4a2:	12 98       	mov	r8,r9
8000c4a4:	a3 78       	lsl	r8,0x3
8000c4a6:	12 18       	sub	r8,r9
8000c4a8:	a3 68       	lsl	r8,0x2
8000c4aa:	f4 08 00 08 	add	r8,r10,r8
8000c4ae:	2e 88       	sub	r8,-24
8000c4b0:	70 08       	ld.w	r8,r8[0x0]
8000c4b2:	c0 28       	rjmp	8000c4b6 <mem_name+0x36>
8000c4b4:	30 08       	mov	r8,0
8000c4b6:	10 9c       	mov	r12,r8
8000c4b8:	2f fd       	sub	sp,-4
8000c4ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c4be:	00 00       	add	r0,r0
8000c4c0:	80 00       	ld.sh	r0,r0[0x0]
8000c4c2:	f4 34 eb cd 	sub	r4,-660531

8000c4c4 <memory_2_usb>:
8000c4c4:	eb cd 40 80 	pushm	r7,lr
8000c4c8:	1a 97       	mov	r7,sp
8000c4ca:	20 4d       	sub	sp,16
8000c4cc:	18 99       	mov	r9,r12
8000c4ce:	ef 4b ff f4 	st.w	r7[-12],r11
8000c4d2:	14 98       	mov	r8,r10
8000c4d4:	ef 69 ff f8 	st.b	r7[-8],r9
8000c4d8:	ef 58 ff f0 	st.h	r7[-16],r8
8000c4dc:	f0 1f 00 14 	mcall	8000c52c <memory_2_usb+0x68>
8000c4e0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c4e4:	30 18       	mov	r8,1
8000c4e6:	f0 09 18 00 	cp.b	r9,r8
8000c4ea:	e0 8b 00 15 	brhi	8000c514 <memory_2_usb+0x50>
8000c4ee:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c4f2:	49 0a       	lddpc	r10,8000c530 <memory_2_usb+0x6c>
8000c4f4:	12 98       	mov	r8,r9
8000c4f6:	a3 78       	lsl	r8,0x3
8000c4f8:	12 18       	sub	r8,r9
8000c4fa:	a3 68       	lsl	r8,0x2
8000c4fc:	f4 08 00 08 	add	r8,r10,r8
8000c500:	2f 08       	sub	r8,-16
8000c502:	70 08       	ld.w	r8,r8[0x0]
8000c504:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c508:	12 9b       	mov	r11,r9
8000c50a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c50e:	5d 18       	icall	r8
8000c510:	18 98       	mov	r8,r12
8000c512:	c0 28       	rjmp	8000c516 <memory_2_usb+0x52>
8000c514:	30 18       	mov	r8,1
8000c516:	ef 48 ff fc 	st.w	r7[-4],r8
8000c51a:	f0 1f 00 07 	mcall	8000c534 <memory_2_usb+0x70>
8000c51e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c522:	10 9c       	mov	r12,r8
8000c524:	2f cd       	sub	sp,-16
8000c526:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c52a:	00 00       	add	r0,r0
8000c52c:	80 00       	ld.sh	r0,r0[0x0]
8000c52e:	c5 fc       	rcall	8000c5ec <ui_wakeup+0x4>
8000c530:	80 00       	ld.sh	r0,r0[0x0]
8000c532:	f4 34 80 00 	sub	r4,-688128
8000c536:	c6 10       	breq	8000c5f8 <ui_wakeup+0x10>

8000c538 <usb_2_memory>:
8000c538:	eb cd 40 80 	pushm	r7,lr
8000c53c:	1a 97       	mov	r7,sp
8000c53e:	20 4d       	sub	sp,16
8000c540:	18 99       	mov	r9,r12
8000c542:	ef 4b ff f4 	st.w	r7[-12],r11
8000c546:	14 98       	mov	r8,r10
8000c548:	ef 69 ff f8 	st.b	r7[-8],r9
8000c54c:	ef 58 ff f0 	st.h	r7[-16],r8
8000c550:	f0 1f 00 14 	mcall	8000c5a0 <usb_2_memory+0x68>
8000c554:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c558:	30 18       	mov	r8,1
8000c55a:	f0 09 18 00 	cp.b	r9,r8
8000c55e:	e0 8b 00 15 	brhi	8000c588 <usb_2_memory+0x50>
8000c562:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c566:	49 0a       	lddpc	r10,8000c5a4 <usb_2_memory+0x6c>
8000c568:	12 98       	mov	r8,r9
8000c56a:	a3 78       	lsl	r8,0x3
8000c56c:	12 18       	sub	r8,r9
8000c56e:	a3 68       	lsl	r8,0x2
8000c570:	f4 08 00 08 	add	r8,r10,r8
8000c574:	2e c8       	sub	r8,-20
8000c576:	70 08       	ld.w	r8,r8[0x0]
8000c578:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c57c:	12 9b       	mov	r11,r9
8000c57e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c582:	5d 18       	icall	r8
8000c584:	18 98       	mov	r8,r12
8000c586:	c0 28       	rjmp	8000c58a <usb_2_memory+0x52>
8000c588:	30 18       	mov	r8,1
8000c58a:	ef 48 ff fc 	st.w	r7[-4],r8
8000c58e:	f0 1f 00 07 	mcall	8000c5a8 <usb_2_memory+0x70>
8000c592:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c596:	10 9c       	mov	r12,r8
8000c598:	2f cd       	sub	sp,-16
8000c59a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c59e:	00 00       	add	r0,r0
8000c5a0:	80 00       	ld.sh	r0,r0[0x0]
8000c5a2:	c6 24       	brge	8000c666 <ui_process+0x1a>
8000c5a4:	80 00       	ld.sh	r0,r0[0x0]
8000c5a6:	f4 34 80 00 	sub	r4,-688128
8000c5aa:	c6 38       	rjmp	8000c670 <ui_process+0x24>

8000c5ac <ui_init>:
8000c5ac:	eb cd 40 80 	pushm	r7,lr
8000c5b0:	1a 97       	mov	r7,sp
8000c5b2:	30 1c       	mov	r12,1
8000c5b4:	f0 1f 00 04 	mcall	8000c5c4 <ui_init+0x18>
8000c5b8:	30 2c       	mov	r12,2
8000c5ba:	f0 1f 00 04 	mcall	8000c5c8 <ui_init+0x1c>
8000c5be:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5c2:	00 00       	add	r0,r0
8000c5c4:	80 00       	ld.sh	r0,r0[0x0]
8000c5c6:	43 3c       	lddsp	r12,sp[0xcc]
8000c5c8:	80 00       	ld.sh	r0,r0[0x0]
8000c5ca:	42 84       	lddsp	r4,sp[0xa0]

8000c5cc <ui_powerdown>:
8000c5cc:	eb cd 40 80 	pushm	r7,lr
8000c5d0:	1a 97       	mov	r7,sp
8000c5d2:	30 1c       	mov	r12,1
8000c5d4:	f0 1f 00 04 	mcall	8000c5e4 <ui_powerdown+0x18>
8000c5d8:	30 2c       	mov	r12,2
8000c5da:	f0 1f 00 03 	mcall	8000c5e4 <ui_powerdown+0x18>
8000c5de:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5e2:	00 00       	add	r0,r0
8000c5e4:	80 00       	ld.sh	r0,r0[0x0]
8000c5e6:	42 84       	lddsp	r4,sp[0xa0]

8000c5e8 <ui_wakeup>:
8000c5e8:	eb cd 40 80 	pushm	r7,lr
8000c5ec:	1a 97       	mov	r7,sp
8000c5ee:	30 1c       	mov	r12,1
8000c5f0:	f0 1f 00 02 	mcall	8000c5f8 <ui_wakeup+0x10>
8000c5f4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5f8:	80 00       	ld.sh	r0,r0[0x0]
8000c5fa:	43 3c       	lddsp	r12,sp[0xcc]

8000c5fc <ui_start_read>:
8000c5fc:	eb cd 40 80 	pushm	r7,lr
8000c600:	1a 97       	mov	r7,sp
8000c602:	30 4c       	mov	r12,4
8000c604:	f0 1f 00 02 	mcall	8000c60c <ui_start_read+0x10>
8000c608:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c60c:	80 00       	ld.sh	r0,r0[0x0]
8000c60e:	43 3c       	lddsp	r12,sp[0xcc]

8000c610 <ui_stop_read>:
8000c610:	eb cd 40 80 	pushm	r7,lr
8000c614:	1a 97       	mov	r7,sp
8000c616:	30 4c       	mov	r12,4
8000c618:	f0 1f 00 02 	mcall	8000c620 <ui_stop_read+0x10>
8000c61c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c620:	80 00       	ld.sh	r0,r0[0x0]
8000c622:	42 84       	lddsp	r4,sp[0xa0]

8000c624 <ui_start_write>:
8000c624:	eb cd 40 80 	pushm	r7,lr
8000c628:	1a 97       	mov	r7,sp
8000c62a:	30 8c       	mov	r12,8
8000c62c:	f0 1f 00 02 	mcall	8000c634 <ui_start_write+0x10>
8000c630:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c634:	80 00       	ld.sh	r0,r0[0x0]
8000c636:	43 3c       	lddsp	r12,sp[0xcc]

8000c638 <ui_stop_write>:
8000c638:	eb cd 40 80 	pushm	r7,lr
8000c63c:	1a 97       	mov	r7,sp
8000c63e:	30 8c       	mov	r12,8
8000c640:	f0 1f 00 02 	mcall	8000c648 <ui_stop_write+0x10>
8000c644:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c648:	80 00       	ld.sh	r0,r0[0x0]
8000c64a:	42 84       	lddsp	r4,sp[0xa0]

8000c64c <ui_process>:
8000c64c:	eb cd 40 80 	pushm	r7,lr
8000c650:	1a 97       	mov	r7,sp
8000c652:	20 1d       	sub	sp,4
8000c654:	18 98       	mov	r8,r12
8000c656:	ef 58 ff fc 	st.h	r7[-4],r8
8000c65a:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c65e:	e0 68 4d d3 	mov	r8,19923
8000c662:	ea 18 10 62 	orh	r8,0x1062
8000c666:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c66a:	a7 89       	lsr	r9,0x6
8000c66c:	e0 68 03 e8 	mov	r8,1000
8000c670:	f2 08 02 48 	mul	r8,r9,r8
8000c674:	f4 08 01 08 	sub	r8,r10,r8
8000c678:	5c 88       	casts.h	r8
8000c67a:	c0 41       	brne	8000c682 <ui_process+0x36>
8000c67c:	30 2c       	mov	r12,2
8000c67e:	f0 1f 00 10 	mcall	8000c6bc <ui_process+0x70>
8000c682:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c686:	e0 68 4d d3 	mov	r8,19923
8000c68a:	ea 18 10 62 	orh	r8,0x1062
8000c68e:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c692:	a7 89       	lsr	r9,0x6
8000c694:	e0 68 03 e8 	mov	r8,1000
8000c698:	f2 08 02 48 	mul	r8,r9,r8
8000c69c:	f4 08 01 08 	sub	r8,r10,r8
8000c6a0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000c6a4:	e0 68 01 f4 	mov	r8,500
8000c6a8:	f0 09 19 00 	cp.h	r9,r8
8000c6ac:	c0 41       	brne	8000c6b4 <ui_process+0x68>
8000c6ae:	30 2c       	mov	r12,2
8000c6b0:	f0 1f 00 04 	mcall	8000c6c0 <ui_process+0x74>
8000c6b4:	2f fd       	sub	sp,-4
8000c6b6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c6ba:	00 00       	add	r0,r0
8000c6bc:	80 00       	ld.sh	r0,r0[0x0]
8000c6be:	43 3c       	lddsp	r12,sp[0xcc]
8000c6c0:	80 00       	ld.sh	r0,r0[0x0]
8000c6c2:	42 84       	lddsp	r4,sp[0xa0]

8000c6c4 <udi_msc_enable>:
8000c6c4:	eb cd 40 80 	pushm	r7,lr
8000c6c8:	1a 97       	mov	r7,sp
8000c6ca:	49 49       	lddpc	r9,8000c718 <udi_msc_enable+0x54>
8000c6cc:	30 08       	mov	r8,0
8000c6ce:	b2 88       	st.b	r9[0x0],r8
8000c6d0:	49 39       	lddpc	r9,8000c71c <udi_msc_enable+0x58>
8000c6d2:	30 08       	mov	r8,0
8000c6d4:	b2 88       	st.b	r9[0x0],r8
8000c6d6:	f0 1f 00 13 	mcall	8000c720 <udi_msc_enable+0x5c>
8000c6da:	18 98       	mov	r8,r12
8000c6dc:	49 29       	lddpc	r9,8000c724 <udi_msc_enable+0x60>
8000c6de:	b2 88       	st.b	r9[0x0],r8
8000c6e0:	49 18       	lddpc	r8,8000c724 <udi_msc_enable+0x60>
8000c6e2:	11 88       	ld.ub	r8,r8[0x0]
8000c6e4:	58 08       	cp.w	r8,0
8000c6e6:	c0 31       	brne	8000c6ec <udi_msc_enable+0x28>
8000c6e8:	30 08       	mov	r8,0
8000c6ea:	c1 38       	rjmp	8000c710 <udi_msc_enable+0x4c>
8000c6ec:	48 e8       	lddpc	r8,8000c724 <udi_msc_enable+0x60>
8000c6ee:	11 88       	ld.ub	r8,r8[0x0]
8000c6f0:	20 18       	sub	r8,1
8000c6f2:	5c 58       	castu.b	r8
8000c6f4:	48 c9       	lddpc	r9,8000c724 <udi_msc_enable+0x60>
8000c6f6:	b2 88       	st.b	r9[0x0],r8
8000c6f8:	f0 1f 00 0c 	mcall	8000c728 <udi_msc_enable+0x64>
8000c6fc:	18 98       	mov	r8,r12
8000c6fe:	ec 18 00 01 	eorl	r8,0x1
8000c702:	5c 58       	castu.b	r8
8000c704:	c0 30       	breq	8000c70a <udi_msc_enable+0x46>
8000c706:	30 08       	mov	r8,0
8000c708:	c0 48       	rjmp	8000c710 <udi_msc_enable+0x4c>
8000c70a:	f0 1f 00 09 	mcall	8000c72c <udi_msc_enable+0x68>
8000c70e:	30 18       	mov	r8,1
8000c710:	10 9c       	mov	r12,r8
8000c712:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c716:	00 00       	add	r0,r0
8000c718:	00 00       	add	r0,r0
8000c71a:	08 c9       	st.b	r4++,r9
8000c71c:	00 00       	add	r0,r0
8000c71e:	08 c8       	st.b	r4++,r8
8000c720:	80 00       	ld.sh	r0,r0[0x0]
8000c722:	c3 80       	breq	8000c792 <udi_msc_setup+0x46>
8000c724:	00 00       	add	r0,r0
8000c726:	08 b0       	st.h	r4++,r0
8000c728:	80 00       	ld.sh	r0,r0[0x0]
8000c72a:	e6 08       	*unknown*
8000c72c:	80 00       	ld.sh	r0,r0[0x0]
8000c72e:	c8 a8       	rjmp	8000c842 <udi_msc_cbw_invalid+0xe>

8000c730 <udi_msc_disable>:
8000c730:	eb cd 40 80 	pushm	r7,lr
8000c734:	1a 97       	mov	r7,sp
8000c736:	48 49       	lddpc	r9,8000c744 <udi_msc_disable+0x14>
8000c738:	30 08       	mov	r8,0
8000c73a:	b2 88       	st.b	r9[0x0],r8
8000c73c:	f0 1f 00 03 	mcall	8000c748 <udi_msc_disable+0x18>
8000c740:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c744:	00 00       	add	r0,r0
8000c746:	08 c9       	st.b	r4++,r9
8000c748:	80 00       	ld.sh	r0,r0[0x0]
8000c74a:	e6 20 eb cd 	sub	r0,453581

8000c74c <udi_msc_setup>:
8000c74c:	eb cd 40 80 	pushm	r7,lr
8000c750:	1a 97       	mov	r7,sp
8000c752:	4a f8       	lddpc	r8,8000c80c <udi_msc_setup+0xc0>
8000c754:	11 88       	ld.ub	r8,r8[0x0]
8000c756:	10 99       	mov	r9,r8
8000c758:	30 08       	mov	r8,0
8000c75a:	f0 09 18 00 	cp.b	r9,r8
8000c75e:	c2 34       	brge	8000c7a4 <udi_msc_setup+0x58>
8000c760:	4a b8       	lddpc	r8,8000c80c <udi_msc_setup+0xc0>
8000c762:	11 88       	ld.ub	r8,r8[0x0]
8000c764:	e2 18 00 60 	andl	r8,0x60,COH
8000c768:	e0 48 00 20 	cp.w	r8,32
8000c76c:	c1 c1       	brne	8000c7a4 <udi_msc_setup+0x58>
8000c76e:	4a 88       	lddpc	r8,8000c80c <udi_msc_setup+0xc0>
8000c770:	11 98       	ld.ub	r8,r8[0x1]
8000c772:	e0 48 00 fe 	cp.w	r8,254
8000c776:	c1 71       	brne	8000c7a4 <udi_msc_setup+0x58>
8000c778:	4a 58       	lddpc	r8,8000c80c <udi_msc_setup+0xc0>
8000c77a:	90 39       	ld.sh	r9,r8[0x6]
8000c77c:	30 18       	mov	r8,1
8000c77e:	f0 09 19 00 	cp.h	r9,r8
8000c782:	c0 30       	breq	8000c788 <udi_msc_setup+0x3c>
8000c784:	30 08       	mov	r8,0
8000c786:	c4 08       	rjmp	8000c806 <udi_msc_setup+0xba>
8000c788:	4a 18       	lddpc	r8,8000c80c <udi_msc_setup+0xc0>
8000c78a:	90 18       	ld.sh	r8,r8[0x2]
8000c78c:	58 08       	cp.w	r8,0
8000c78e:	c0 30       	breq	8000c794 <udi_msc_setup+0x48>
8000c790:	30 08       	mov	r8,0
8000c792:	c3 a8       	rjmp	8000c806 <udi_msc_setup+0xba>
8000c794:	49 e8       	lddpc	r8,8000c80c <udi_msc_setup+0xc0>
8000c796:	49 f9       	lddpc	r9,8000c810 <udi_msc_setup+0xc4>
8000c798:	91 29       	st.w	r8[0x8],r9
8000c79a:	49 d9       	lddpc	r9,8000c80c <udi_msc_setup+0xc0>
8000c79c:	30 18       	mov	r8,1
8000c79e:	b2 68       	st.h	r9[0xc],r8
8000c7a0:	30 18       	mov	r8,1
8000c7a2:	c3 28       	rjmp	8000c806 <udi_msc_setup+0xba>
8000c7a4:	49 a8       	lddpc	r8,8000c80c <udi_msc_setup+0xc0>
8000c7a6:	11 88       	ld.ub	r8,r8[0x0]
8000c7a8:	10 99       	mov	r9,r8
8000c7aa:	30 08       	mov	r8,0
8000c7ac:	f0 09 18 00 	cp.b	r9,r8
8000c7b0:	c2 a5       	brlt	8000c804 <udi_msc_setup+0xb8>
8000c7b2:	49 78       	lddpc	r8,8000c80c <udi_msc_setup+0xc0>
8000c7b4:	11 88       	ld.ub	r8,r8[0x0]
8000c7b6:	e2 18 00 60 	andl	r8,0x60,COH
8000c7ba:	e0 48 00 20 	cp.w	r8,32
8000c7be:	c2 31       	brne	8000c804 <udi_msc_setup+0xb8>
8000c7c0:	49 38       	lddpc	r8,8000c80c <udi_msc_setup+0xc0>
8000c7c2:	11 98       	ld.ub	r8,r8[0x1]
8000c7c4:	e0 48 00 ff 	cp.w	r8,255
8000c7c8:	c1 e1       	brne	8000c804 <udi_msc_setup+0xb8>
8000c7ca:	49 18       	lddpc	r8,8000c80c <udi_msc_setup+0xc0>
8000c7cc:	90 38       	ld.sh	r8,r8[0x6]
8000c7ce:	58 08       	cp.w	r8,0
8000c7d0:	c0 30       	breq	8000c7d6 <udi_msc_setup+0x8a>
8000c7d2:	30 08       	mov	r8,0
8000c7d4:	c1 98       	rjmp	8000c806 <udi_msc_setup+0xba>
8000c7d6:	48 e8       	lddpc	r8,8000c80c <udi_msc_setup+0xc0>
8000c7d8:	90 18       	ld.sh	r8,r8[0x2]
8000c7da:	58 08       	cp.w	r8,0
8000c7dc:	c0 30       	breq	8000c7e2 <udi_msc_setup+0x96>
8000c7de:	30 08       	mov	r8,0
8000c7e0:	c1 38       	rjmp	8000c806 <udi_msc_setup+0xba>
8000c7e2:	48 d9       	lddpc	r9,8000c814 <udi_msc_setup+0xc8>
8000c7e4:	30 08       	mov	r8,0
8000c7e6:	b2 88       	st.b	r9[0x0],r8
8000c7e8:	48 c9       	lddpc	r9,8000c818 <udi_msc_setup+0xcc>
8000c7ea:	30 08       	mov	r8,0
8000c7ec:	b2 88       	st.b	r9[0x0],r8
8000c7ee:	30 2c       	mov	r12,2
8000c7f0:	f0 1f 00 0b 	mcall	8000c81c <udi_msc_setup+0xd0>
8000c7f4:	e0 6c 00 81 	mov	r12,129
8000c7f8:	f0 1f 00 09 	mcall	8000c81c <udi_msc_setup+0xd0>
8000c7fc:	f0 1f 00 09 	mcall	8000c820 <udi_msc_setup+0xd4>
8000c800:	30 18       	mov	r8,1
8000c802:	c0 28       	rjmp	8000c806 <udi_msc_setup+0xba>
8000c804:	30 08       	mov	r8,0
8000c806:	10 9c       	mov	r12,r8
8000c808:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c80c:	00 00       	add	r0,r0
8000c80e:	0d e4       	ld.ub	r4,r6[0x6]
8000c810:	00 00       	add	r0,r0
8000c812:	08 b0       	st.h	r4++,r0
8000c814:	00 00       	add	r0,r0
8000c816:	08 c8       	st.b	r4++,r8
8000c818:	00 00       	add	r0,r0
8000c81a:	08 c9       	st.b	r4++,r9
8000c81c:	80 00       	ld.sh	r0,r0[0x0]
8000c81e:	a9 a0       	sbr	r0,0x8
8000c820:	80 00       	ld.sh	r0,r0[0x0]
8000c822:	c8 a8       	rjmp	8000c936 <udi_msc_cbw_received+0x52>

8000c824 <udi_msc_getsetting>:
8000c824:	eb cd 40 80 	pushm	r7,lr
8000c828:	1a 97       	mov	r7,sp
8000c82a:	30 08       	mov	r8,0
8000c82c:	10 9c       	mov	r12,r8
8000c82e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c832:	d7 03       	nop

8000c834 <udi_msc_cbw_invalid>:
8000c834:	eb cd 40 80 	pushm	r7,lr
8000c838:	1a 97       	mov	r7,sp
8000c83a:	48 a8       	lddpc	r8,8000c860 <udi_msc_cbw_invalid+0x2c>
8000c83c:	11 88       	ld.ub	r8,r8[0x0]
8000c83e:	ec 18 00 01 	eorl	r8,0x1
8000c842:	5c 58       	castu.b	r8
8000c844:	c0 a1       	brne	8000c858 <udi_msc_cbw_invalid+0x24>
8000c846:	30 2c       	mov	r12,2
8000c848:	f0 1f 00 07 	mcall	8000c864 <udi_msc_cbw_invalid+0x30>
8000c84c:	fe cb 00 18 	sub	r11,pc,24
8000c850:	30 2c       	mov	r12,2
8000c852:	f0 1f 00 06 	mcall	8000c868 <udi_msc_cbw_invalid+0x34>
8000c856:	c0 28       	rjmp	8000c85a <udi_msc_cbw_invalid+0x26>
8000c858:	d7 03       	nop
8000c85a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c85e:	00 00       	add	r0,r0
8000c860:	00 00       	add	r0,r0
8000c862:	08 c8       	st.b	r4++,r8
8000c864:	80 00       	ld.sh	r0,r0[0x0]
8000c866:	a6 28       	st.h	r3[0x4],r8
8000c868:	80 00       	ld.sh	r0,r0[0x0]
8000c86a:	aa 3c       	st.h	r5[0x6],r12

8000c86c <udi_msc_csw_invalid>:
8000c86c:	eb cd 40 80 	pushm	r7,lr
8000c870:	1a 97       	mov	r7,sp
8000c872:	48 b8       	lddpc	r8,8000c89c <udi_msc_csw_invalid+0x30>
8000c874:	11 88       	ld.ub	r8,r8[0x0]
8000c876:	ec 18 00 01 	eorl	r8,0x1
8000c87a:	5c 58       	castu.b	r8
8000c87c:	c0 c1       	brne	8000c894 <udi_msc_csw_invalid+0x28>
8000c87e:	e0 6c 00 81 	mov	r12,129
8000c882:	f0 1f 00 08 	mcall	8000c8a0 <udi_msc_csw_invalid+0x34>
8000c886:	fe cb 00 1a 	sub	r11,pc,26
8000c88a:	e0 6c 00 81 	mov	r12,129
8000c88e:	f0 1f 00 06 	mcall	8000c8a4 <udi_msc_csw_invalid+0x38>
8000c892:	c0 28       	rjmp	8000c896 <udi_msc_csw_invalid+0x2a>
8000c894:	d7 03       	nop
8000c896:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c89a:	00 00       	add	r0,r0
8000c89c:	00 00       	add	r0,r0
8000c89e:	08 c8       	st.b	r4++,r8
8000c8a0:	80 00       	ld.sh	r0,r0[0x0]
8000c8a2:	a6 28       	st.h	r3[0x4],r8
8000c8a4:	80 00       	ld.sh	r0,r0[0x0]
8000c8a6:	aa 3c       	st.h	r5[0x6],r12

8000c8a8 <udi_msc_cbw_wait>:
8000c8a8:	eb cd 40 80 	pushm	r7,lr
8000c8ac:	1a 97       	mov	r7,sp
8000c8ae:	48 aa       	lddpc	r10,8000c8d4 <udi_msc_cbw_wait+0x2c>
8000c8b0:	48 a8       	lddpc	r8,8000c8d8 <udi_msc_cbw_wait+0x30>
8000c8b2:	31 f9       	mov	r9,31
8000c8b4:	30 1b       	mov	r11,1
8000c8b6:	30 2c       	mov	r12,2
8000c8b8:	f0 1f 00 09 	mcall	8000c8dc <udi_msc_cbw_wait+0x34>
8000c8bc:	18 98       	mov	r8,r12
8000c8be:	ec 18 00 01 	eorl	r8,0x1
8000c8c2:	5c 58       	castu.b	r8
8000c8c4:	c0 60       	breq	8000c8d0 <udi_msc_cbw_wait+0x28>
8000c8c6:	fe cb 00 1e 	sub	r11,pc,30
8000c8ca:	30 2c       	mov	r12,2
8000c8cc:	f0 1f 00 05 	mcall	8000c8e0 <udi_msc_cbw_wait+0x38>
8000c8d0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8d4:	00 00       	add	r0,r0
8000c8d6:	08 90       	mov	r0,r4
8000c8d8:	80 00       	ld.sh	r0,r0[0x0]
8000c8da:	c8 e4       	brge	8000c7f6 <udi_msc_setup+0xaa>
8000c8dc:	80 00       	ld.sh	r0,r0[0x0]
8000c8de:	a8 7c       	st.h	r4[0xe],r12
8000c8e0:	80 00       	ld.sh	r0,r0[0x0]
8000c8e2:	aa 3c       	st.h	r5[0x6],r12

8000c8e4 <udi_msc_cbw_received>:
8000c8e4:	eb cd 40 80 	pushm	r7,lr
8000c8e8:	1a 97       	mov	r7,sp
8000c8ea:	20 3d       	sub	sp,12
8000c8ec:	ef 4c ff fc 	st.w	r7[-4],r12
8000c8f0:	ef 4b ff f8 	st.w	r7[-8],r11
8000c8f4:	14 98       	mov	r8,r10
8000c8f6:	ef 68 ff f4 	st.b	r7[-12],r8
8000c8fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c8fe:	58 08       	cp.w	r8,0
8000c900:	c6 11       	brne	8000c9c2 <udi_msc_cbw_received+0xde>
8000c902:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c906:	59 f8       	cp.w	r8,31
8000c908:	c0 91       	brne	8000c91a <udi_msc_cbw_received+0x36>
8000c90a:	4b 18       	lddpc	r8,8000c9cc <udi_msc_cbw_received+0xe8>
8000c90c:	70 08       	ld.w	r8,r8[0x0]
8000c90e:	e0 69 42 43 	mov	r9,16963
8000c912:	ea 19 55 53 	orh	r9,0x5553
8000c916:	12 38       	cp.w	r8,r9
8000c918:	c0 90       	breq	8000c92a <udi_msc_cbw_received+0x46>
8000c91a:	4a e9       	lddpc	r9,8000c9d0 <udi_msc_cbw_received+0xec>
8000c91c:	30 18       	mov	r8,1
8000c91e:	b2 88       	st.b	r9[0x0],r8
8000c920:	f0 1f 00 2d 	mcall	8000c9d4 <udi_msc_cbw_received+0xf0>
8000c924:	f0 1f 00 2d 	mcall	8000c9d8 <udi_msc_cbw_received+0xf4>
8000c928:	c4 e8       	rjmp	8000c9c4 <udi_msc_cbw_received+0xe0>
8000c92a:	4a 98       	lddpc	r8,8000c9cc <udi_msc_cbw_received+0xe8>
8000c92c:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000c930:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000c934:	4a 69       	lddpc	r9,8000c9cc <udi_msc_cbw_received+0xe8>
8000c936:	f3 68 00 0d 	st.b	r9[13],r8
8000c93a:	4a 58       	lddpc	r8,8000c9cc <udi_msc_cbw_received+0xe8>
8000c93c:	f1 39 00 0d 	ld.ub	r9,r8[13]
8000c940:	4a 78       	lddpc	r8,8000c9dc <udi_msc_cbw_received+0xf8>
8000c942:	11 88       	ld.ub	r8,r8[0x0]
8000c944:	f0 09 18 00 	cp.b	r9,r8
8000c948:	e0 88 00 07 	brls	8000c956 <udi_msc_cbw_received+0x72>
8000c94c:	f0 1f 00 25 	mcall	8000c9e0 <udi_msc_cbw_received+0xfc>
8000c950:	f0 1f 00 25 	mcall	8000c9e4 <udi_msc_cbw_received+0x100>
8000c954:	c3 88       	rjmp	8000c9c4 <udi_msc_cbw_received+0xe0>
8000c956:	49 e8       	lddpc	r8,8000c9cc <udi_msc_cbw_received+0xe8>
8000c958:	70 28       	ld.w	r8,r8[0x8]
8000c95a:	5c b8       	swap.b	r8
8000c95c:	10 99       	mov	r9,r8
8000c95e:	4a 38       	lddpc	r8,8000c9e8 <udi_msc_cbw_received+0x104>
8000c960:	91 29       	st.w	r8[0x8],r9
8000c962:	49 b8       	lddpc	r8,8000c9cc <udi_msc_cbw_received+0xe8>
8000c964:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000c968:	e0 48 00 5a 	cp.w	r8,90
8000c96c:	e0 8b 00 26 	brhi	8000c9b8 <udi_msc_cbw_received+0xd4>
8000c970:	49 f9       	lddpc	r9,8000c9ec <udi_msc_cbw_received+0x108>
8000c972:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
8000c976:	f0 1f 00 1f 	mcall	8000c9f0 <udi_msc_cbw_received+0x10c>
8000c97a:	c2 58       	rjmp	8000c9c4 <udi_msc_cbw_received+0xe0>
8000c97c:	f0 1f 00 1e 	mcall	8000c9f4 <udi_msc_cbw_received+0x110>
8000c980:	c2 28       	rjmp	8000c9c4 <udi_msc_cbw_received+0xe0>
8000c982:	30 0c       	mov	r12,0
8000c984:	f0 1f 00 1d 	mcall	8000c9f8 <udi_msc_cbw_received+0x114>
8000c988:	c1 e8       	rjmp	8000c9c4 <udi_msc_cbw_received+0xe0>
8000c98a:	30 1c       	mov	r12,1
8000c98c:	f0 1f 00 1b 	mcall	8000c9f8 <udi_msc_cbw_received+0x114>
8000c990:	c1 a8       	rjmp	8000c9c4 <udi_msc_cbw_received+0xe0>
8000c992:	f0 1f 00 1b 	mcall	8000c9fc <udi_msc_cbw_received+0x118>
8000c996:	c1 78       	rjmp	8000c9c4 <udi_msc_cbw_received+0xe0>
8000c998:	f0 1f 00 1a 	mcall	8000ca00 <udi_msc_cbw_received+0x11c>
8000c99c:	c1 48       	rjmp	8000c9c4 <udi_msc_cbw_received+0xe0>
8000c99e:	f0 1f 00 1a 	mcall	8000ca04 <udi_msc_cbw_received+0x120>
8000c9a2:	f0 1f 00 11 	mcall	8000c9e4 <udi_msc_cbw_received+0x100>
8000c9a6:	c0 f8       	rjmp	8000c9c4 <udi_msc_cbw_received+0xe0>
8000c9a8:	30 1c       	mov	r12,1
8000c9aa:	f0 1f 00 18 	mcall	8000ca08 <udi_msc_cbw_received+0x124>
8000c9ae:	c0 b8       	rjmp	8000c9c4 <udi_msc_cbw_received+0xe0>
8000c9b0:	30 0c       	mov	r12,0
8000c9b2:	f0 1f 00 16 	mcall	8000ca08 <udi_msc_cbw_received+0x124>
8000c9b6:	c0 78       	rjmp	8000c9c4 <udi_msc_cbw_received+0xe0>
8000c9b8:	f0 1f 00 15 	mcall	8000ca0c <udi_msc_cbw_received+0x128>
8000c9bc:	f0 1f 00 0a 	mcall	8000c9e4 <udi_msc_cbw_received+0x100>
8000c9c0:	c0 28       	rjmp	8000c9c4 <udi_msc_cbw_received+0xe0>
8000c9c2:	d7 03       	nop
8000c9c4:	2f dd       	sub	sp,-12
8000c9c6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9ca:	00 00       	add	r0,r0
8000c9cc:	00 00       	add	r0,r0
8000c9ce:	08 90       	mov	r0,r4
8000c9d0:	00 00       	add	r0,r0
8000c9d2:	08 c8       	st.b	r4++,r8
8000c9d4:	80 00       	ld.sh	r0,r0[0x0]
8000c9d6:	c8 34       	brge	8000c8dc <udi_msc_cbw_wait+0x34>
8000c9d8:	80 00       	ld.sh	r0,r0[0x0]
8000c9da:	c8 6c       	rcall	8000cae6 <udi_msc_data_sent+0x26>
8000c9dc:	00 00       	add	r0,r0
8000c9de:	08 b0       	st.h	r4++,r0
8000c9e0:	80 00       	ld.sh	r0,r0[0x0]
8000c9e2:	cd 0c       	rcall	8000cb82 <udi_msc_csw_send+0x1a>
8000c9e4:	80 00       	ld.sh	r0,r0[0x0]
8000c9e6:	cb 0c       	rcall	8000cb46 <udi_msc_csw_process+0x3a>
8000c9e8:	00 00       	add	r0,r0
8000c9ea:	01 54       	ld.sh	r4,--r0
8000c9ec:	80 00       	ld.sh	r0,r0[0x0]
8000c9ee:	f4 6c 80 00 	mov	r12,-753664
8000c9f2:	cd 44       	brge	8000c99a <udi_msc_cbw_received+0xb6>
8000c9f4:	80 00       	ld.sh	r0,r0[0x0]
8000c9f6:	cd a8       	rjmp	8000cbaa <udi_msc_csw_send+0x42>
8000c9f8:	80 00       	ld.sh	r0,r0[0x0]
8000c9fa:	cf 40       	breq	8000c9e2 <udi_msc_cbw_received+0xfe>
8000c9fc:	80 00       	ld.sh	r0,r0[0x0]
8000c9fe:	cf 18       	rjmp	8000cbe0 <udi_msc_clear_sense+0x10>
8000ca00:	80 00       	ld.sh	r0,r0[0x0]
8000ca02:	d0 90       	acall	0x24
8000ca04:	80 00       	ld.sh	r0,r0[0x0]
8000ca06:	cc 80       	breq	8000c996 <udi_msc_cbw_received+0xb2>
8000ca08:	80 00       	ld.sh	r0,r0[0x0]
8000ca0a:	d1 2c       	*unknown*
8000ca0c:	80 00       	ld.sh	r0,r0[0x0]
8000ca0e:	cd 28       	rjmp	8000cbb2 <udi_msc_csw_sent+0x6>

8000ca10 <udi_msc_cbw_validate>:
8000ca10:	eb cd 40 80 	pushm	r7,lr
8000ca14:	1a 97       	mov	r7,sp
8000ca16:	20 2d       	sub	sp,8
8000ca18:	ef 4c ff fc 	st.w	r7[-4],r12
8000ca1c:	16 98       	mov	r8,r11
8000ca1e:	ef 68 ff f8 	st.b	r7[-8],r8
8000ca22:	49 08       	lddpc	r8,8000ca60 <udi_msc_cbw_validate+0x50>
8000ca24:	f1 39 00 0c 	ld.ub	r9,r8[12]
8000ca28:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ca2c:	f3 e8 20 08 	eor	r8,r9,r8
8000ca30:	5c 58       	castu.b	r8
8000ca32:	10 99       	mov	r9,r8
8000ca34:	30 08       	mov	r8,0
8000ca36:	f0 09 18 00 	cp.b	r9,r8
8000ca3a:	c0 75       	brlt	8000ca48 <udi_msc_cbw_validate+0x38>
8000ca3c:	48 a8       	lddpc	r8,8000ca64 <udi_msc_cbw_validate+0x54>
8000ca3e:	70 29       	ld.w	r9,r8[0x8]
8000ca40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ca44:	10 39       	cp.w	r9,r8
8000ca46:	c0 72       	brcc	8000ca54 <udi_msc_cbw_validate+0x44>
8000ca48:	f0 1f 00 08 	mcall	8000ca68 <udi_msc_cbw_validate+0x58>
8000ca4c:	f0 1f 00 08 	mcall	8000ca6c <udi_msc_cbw_validate+0x5c>
8000ca50:	30 08       	mov	r8,0
8000ca52:	c0 28       	rjmp	8000ca56 <udi_msc_cbw_validate+0x46>
8000ca54:	30 18       	mov	r8,1
8000ca56:	10 9c       	mov	r12,r8
8000ca58:	2f ed       	sub	sp,-8
8000ca5a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca5e:	00 00       	add	r0,r0
8000ca60:	00 00       	add	r0,r0
8000ca62:	08 90       	mov	r0,r4
8000ca64:	00 00       	add	r0,r0
8000ca66:	01 54       	ld.sh	r4,--r0
8000ca68:	80 00       	ld.sh	r0,r0[0x0]
8000ca6a:	cd 0c       	rcall	8000cc0a <udi_msc_sense_fail+0x12>
8000ca6c:	80 00       	ld.sh	r0,r0[0x0]
8000ca6e:	cb 0c       	rcall	8000cbce <udi_msc_csw_sent+0x22>

8000ca70 <udi_msc_data_send>:
8000ca70:	eb cd 40 80 	pushm	r7,lr
8000ca74:	1a 97       	mov	r7,sp
8000ca76:	20 2d       	sub	sp,8
8000ca78:	ef 4c ff fc 	st.w	r7[-4],r12
8000ca7c:	16 98       	mov	r8,r11
8000ca7e:	ef 68 ff f8 	st.b	r7[-8],r8
8000ca82:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ca86:	48 b8       	lddpc	r8,8000cab0 <udi_msc_data_send+0x40>
8000ca88:	ee fa ff fc 	ld.w	r10,r7[-4]
8000ca8c:	30 1b       	mov	r11,1
8000ca8e:	e0 6c 00 81 	mov	r12,129
8000ca92:	f0 1f 00 09 	mcall	8000cab4 <udi_msc_data_send+0x44>
8000ca96:	18 98       	mov	r8,r12
8000ca98:	ec 18 00 01 	eorl	r8,0x1
8000ca9c:	5c 58       	castu.b	r8
8000ca9e:	c0 50       	breq	8000caa8 <udi_msc_data_send+0x38>
8000caa0:	f0 1f 00 06 	mcall	8000cab8 <udi_msc_data_send+0x48>
8000caa4:	f0 1f 00 06 	mcall	8000cabc <udi_msc_data_send+0x4c>
8000caa8:	2f ed       	sub	sp,-8
8000caaa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000caae:	00 00       	add	r0,r0
8000cab0:	80 00       	ld.sh	r0,r0[0x0]
8000cab2:	ca c0       	breq	8000ca0a <udi_msc_cbw_received+0x126>
8000cab4:	80 00       	ld.sh	r0,r0[0x0]
8000cab6:	a8 7c       	st.h	r4[0xe],r12
8000cab8:	80 00       	ld.sh	r0,r0[0x0]
8000caba:	cc d8       	rjmp	8000cc54 <udi_msc_sense_fail+0x5c>
8000cabc:	80 00       	ld.sh	r0,r0[0x0]
8000cabe:	cb 0c       	rcall	8000cc1e <udi_msc_sense_fail+0x26>

8000cac0 <udi_msc_data_sent>:
8000cac0:	eb cd 40 80 	pushm	r7,lr
8000cac4:	1a 97       	mov	r7,sp
8000cac6:	20 3d       	sub	sp,12
8000cac8:	ef 4c ff fc 	st.w	r7[-4],r12
8000cacc:	ef 4b ff f8 	st.w	r7[-8],r11
8000cad0:	14 98       	mov	r8,r10
8000cad2:	ef 68 ff f4 	st.b	r7[-12],r8
8000cad6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cada:	58 08       	cp.w	r8,0
8000cadc:	c0 d1       	brne	8000caf6 <udi_msc_data_sent+0x36>
8000cade:	f0 1f 00 09 	mcall	8000cb00 <udi_msc_data_sent+0x40>
8000cae2:	48 98       	lddpc	r8,8000cb04 <udi_msc_data_sent+0x44>
8000cae4:	70 29       	ld.w	r9,r8[0x8]
8000cae6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000caea:	10 19       	sub	r9,r8
8000caec:	48 68       	lddpc	r8,8000cb04 <udi_msc_data_sent+0x44>
8000caee:	91 29       	st.w	r8[0x8],r9
8000caf0:	f0 1f 00 06 	mcall	8000cb08 <udi_msc_data_sent+0x48>
8000caf4:	c0 28       	rjmp	8000caf8 <udi_msc_data_sent+0x38>
8000caf6:	d7 03       	nop
8000caf8:	2f dd       	sub	sp,-12
8000cafa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cafe:	00 00       	add	r0,r0
8000cb00:	80 00       	ld.sh	r0,r0[0x0]
8000cb02:	cc 80       	breq	8000ca92 <udi_msc_data_send+0x22>
8000cb04:	00 00       	add	r0,r0
8000cb06:	01 54       	ld.sh	r4,--r0
8000cb08:	80 00       	ld.sh	r0,r0[0x0]
8000cb0a:	cb 0c       	rcall	8000cc6a <udi_msc_sense_fail+0x72>

8000cb0c <udi_msc_csw_process>:
8000cb0c:	eb cd 40 80 	pushm	r7,lr
8000cb10:	1a 97       	mov	r7,sp
8000cb12:	49 28       	lddpc	r8,8000cb58 <udi_msc_csw_process+0x4c>
8000cb14:	70 28       	ld.w	r8,r8[0x8]
8000cb16:	58 08       	cp.w	r8,0
8000cb18:	c1 10       	breq	8000cb3a <udi_msc_csw_process+0x2e>
8000cb1a:	49 18       	lddpc	r8,8000cb5c <udi_msc_csw_process+0x50>
8000cb1c:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000cb20:	10 99       	mov	r9,r8
8000cb22:	30 08       	mov	r8,0
8000cb24:	f0 09 18 00 	cp.b	r9,r8
8000cb28:	c0 64       	brge	8000cb34 <udi_msc_csw_process+0x28>
8000cb2a:	e0 6c 00 81 	mov	r12,129
8000cb2e:	f0 1f 00 0d 	mcall	8000cb60 <udi_msc_csw_process+0x54>
8000cb32:	c0 48       	rjmp	8000cb3a <udi_msc_csw_process+0x2e>
8000cb34:	30 2c       	mov	r12,2
8000cb36:	f0 1f 00 0b 	mcall	8000cb60 <udi_msc_csw_process+0x54>
8000cb3a:	48 98       	lddpc	r8,8000cb5c <udi_msc_csw_process+0x50>
8000cb3c:	70 19       	ld.w	r9,r8[0x4]
8000cb3e:	48 78       	lddpc	r8,8000cb58 <udi_msc_csw_process+0x4c>
8000cb40:	91 19       	st.w	r8[0x4],r9
8000cb42:	48 68       	lddpc	r8,8000cb58 <udi_msc_csw_process+0x4c>
8000cb44:	70 28       	ld.w	r8,r8[0x8]
8000cb46:	5c b8       	swap.b	r8
8000cb48:	10 99       	mov	r9,r8
8000cb4a:	48 48       	lddpc	r8,8000cb58 <udi_msc_csw_process+0x4c>
8000cb4c:	91 29       	st.w	r8[0x8],r9
8000cb4e:	f0 1f 00 06 	mcall	8000cb64 <udi_msc_csw_process+0x58>
8000cb52:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb56:	00 00       	add	r0,r0
8000cb58:	00 00       	add	r0,r0
8000cb5a:	01 54       	ld.sh	r4,--r0
8000cb5c:	00 00       	add	r0,r0
8000cb5e:	08 90       	mov	r0,r4
8000cb60:	80 00       	ld.sh	r0,r0[0x0]
8000cb62:	a6 28       	st.h	r3[0x4],r8
8000cb64:	80 00       	ld.sh	r0,r0[0x0]
8000cb66:	cb 68       	rjmp	8000ccd2 <udi_msc_sense_fail_busy_or_change+0x16>

8000cb68 <udi_msc_csw_send>:
8000cb68:	eb cd 40 80 	pushm	r7,lr
8000cb6c:	1a 97       	mov	r7,sp
8000cb6e:	48 ba       	lddpc	r10,8000cb98 <udi_msc_csw_send+0x30>
8000cb70:	48 b8       	lddpc	r8,8000cb9c <udi_msc_csw_send+0x34>
8000cb72:	30 d9       	mov	r9,13
8000cb74:	30 0b       	mov	r11,0
8000cb76:	e0 6c 00 81 	mov	r12,129
8000cb7a:	f0 1f 00 0a 	mcall	8000cba0 <udi_msc_csw_send+0x38>
8000cb7e:	18 98       	mov	r8,r12
8000cb80:	ec 18 00 01 	eorl	r8,0x1
8000cb84:	5c 58       	castu.b	r8
8000cb86:	c0 60       	breq	8000cb92 <udi_msc_csw_send+0x2a>
8000cb88:	48 7b       	lddpc	r11,8000cba4 <udi_msc_csw_send+0x3c>
8000cb8a:	e0 6c 00 81 	mov	r12,129
8000cb8e:	f0 1f 00 07 	mcall	8000cba8 <udi_msc_csw_send+0x40>
8000cb92:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb96:	00 00       	add	r0,r0
8000cb98:	00 00       	add	r0,r0
8000cb9a:	01 54       	ld.sh	r4,--r0
8000cb9c:	80 00       	ld.sh	r0,r0[0x0]
8000cb9e:	cb ac       	rcall	8000cd12 <udi_msc_sense_fail_cdb_invalid+0x6>
8000cba0:	80 00       	ld.sh	r0,r0[0x0]
8000cba2:	a8 7c       	st.h	r4[0xe],r12
8000cba4:	80 00       	ld.sh	r0,r0[0x0]
8000cba6:	cb 68       	rjmp	8000cd12 <udi_msc_sense_fail_cdb_invalid+0x6>
8000cba8:	80 00       	ld.sh	r0,r0[0x0]
8000cbaa:	aa 3c       	st.h	r5[0x6],r12

8000cbac <udi_msc_csw_sent>:
8000cbac:	eb cd 40 80 	pushm	r7,lr
8000cbb0:	1a 97       	mov	r7,sp
8000cbb2:	20 3d       	sub	sp,12
8000cbb4:	ef 4c ff fc 	st.w	r7[-4],r12
8000cbb8:	ef 4b ff f8 	st.w	r7[-8],r11
8000cbbc:	14 98       	mov	r8,r10
8000cbbe:	ef 68 ff f4 	st.b	r7[-12],r8
8000cbc2:	f0 1f 00 03 	mcall	8000cbcc <udi_msc_csw_sent+0x20>
8000cbc6:	2f dd       	sub	sp,-12
8000cbc8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cbcc:	80 00       	ld.sh	r0,r0[0x0]
8000cbce:	c8 a8       	rjmp	8000cce2 <udi_msc_sense_fail_hardware+0xa>

8000cbd0 <udi_msc_clear_sense>:
8000cbd0:	eb cd 40 80 	pushm	r7,lr
8000cbd4:	1a 97       	mov	r7,sp
8000cbd6:	31 2a       	mov	r10,18
8000cbd8:	30 0b       	mov	r11,0
8000cbda:	48 6c       	lddpc	r12,8000cbf0 <udi_msc_clear_sense+0x20>
8000cbdc:	f0 1f 00 06 	mcall	8000cbf4 <udi_msc_clear_sense+0x24>
8000cbe0:	48 49       	lddpc	r9,8000cbf0 <udi_msc_clear_sense+0x20>
8000cbe2:	3f 08       	mov	r8,-16
8000cbe4:	b2 88       	st.b	r9[0x0],r8
8000cbe6:	48 39       	lddpc	r9,8000cbf0 <udi_msc_clear_sense+0x20>
8000cbe8:	30 a8       	mov	r8,10
8000cbea:	b2 f8       	st.b	r9[0x7],r8
8000cbec:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cbf0:	00 00       	add	r0,r0
8000cbf2:	08 b4       	st.h	r4++,r4
8000cbf4:	80 00       	ld.sh	r0,r0[0x0]
8000cbf6:	eb ea eb cd 	sthh.w	sp[0x2f0],r5:t,r10:b

8000cbf8 <udi_msc_sense_fail>:
8000cbf8:	eb cd 40 80 	pushm	r7,lr
8000cbfc:	1a 97       	mov	r7,sp
8000cbfe:	20 3d       	sub	sp,12
8000cc00:	18 99       	mov	r9,r12
8000cc02:	16 98       	mov	r8,r11
8000cc04:	ef 4a ff f4 	st.w	r7[-12],r10
8000cc08:	ef 69 ff fc 	st.b	r7[-4],r9
8000cc0c:	ef 58 ff f8 	st.h	r7[-8],r8
8000cc10:	f0 1f 00 19 	mcall	8000cc74 <udi_msc_sense_fail+0x7c>
8000cc14:	49 99       	lddpc	r9,8000cc78 <udi_msc_sense_fail+0x80>
8000cc16:	30 18       	mov	r8,1
8000cc18:	f3 68 00 0c 	st.b	r9[12],r8
8000cc1c:	49 89       	lddpc	r9,8000cc7c <udi_msc_sense_fail+0x84>
8000cc1e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000cc22:	b2 a8       	st.b	r9[0x2],r8
8000cc24:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cc28:	b9 88       	lsr	r8,0x18
8000cc2a:	5c 58       	castu.b	r8
8000cc2c:	49 49       	lddpc	r9,8000cc7c <udi_msc_sense_fail+0x84>
8000cc2e:	b2 b8       	st.b	r9[0x3],r8
8000cc30:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cc34:	b1 88       	lsr	r8,0x10
8000cc36:	5c 58       	castu.b	r8
8000cc38:	49 19       	lddpc	r9,8000cc7c <udi_msc_sense_fail+0x84>
8000cc3a:	b2 c8       	st.b	r9[0x4],r8
8000cc3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cc40:	a9 88       	lsr	r8,0x8
8000cc42:	5c 58       	castu.b	r8
8000cc44:	48 e9       	lddpc	r9,8000cc7c <udi_msc_sense_fail+0x84>
8000cc46:	b2 d8       	st.b	r9[0x5],r8
8000cc48:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cc4c:	5c 58       	castu.b	r8
8000cc4e:	48 c9       	lddpc	r9,8000cc7c <udi_msc_sense_fail+0x84>
8000cc50:	b2 e8       	st.b	r9[0x6],r8
8000cc52:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000cc56:	a9 88       	lsr	r8,0x8
8000cc58:	5c 88       	casts.h	r8
8000cc5a:	5c 58       	castu.b	r8
8000cc5c:	48 89       	lddpc	r9,8000cc7c <udi_msc_sense_fail+0x84>
8000cc5e:	f3 68 00 0c 	st.b	r9[12],r8
8000cc62:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000cc66:	5c 58       	castu.b	r8
8000cc68:	48 59       	lddpc	r9,8000cc7c <udi_msc_sense_fail+0x84>
8000cc6a:	f3 68 00 0d 	st.b	r9[13],r8
8000cc6e:	2f dd       	sub	sp,-12
8000cc70:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc74:	80 00       	ld.sh	r0,r0[0x0]
8000cc76:	cb d0       	breq	8000cbf0 <udi_msc_clear_sense+0x20>
8000cc78:	00 00       	add	r0,r0
8000cc7a:	01 54       	ld.sh	r4,--r0
8000cc7c:	00 00       	add	r0,r0
8000cc7e:	08 b4       	st.h	r4++,r4

8000cc80 <udi_msc_sense_pass>:
8000cc80:	eb cd 40 80 	pushm	r7,lr
8000cc84:	1a 97       	mov	r7,sp
8000cc86:	f0 1f 00 05 	mcall	8000cc98 <udi_msc_sense_pass+0x18>
8000cc8a:	48 59       	lddpc	r9,8000cc9c <udi_msc_sense_pass+0x1c>
8000cc8c:	30 08       	mov	r8,0
8000cc8e:	f3 68 00 0c 	st.b	r9[12],r8
8000cc92:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc96:	00 00       	add	r0,r0
8000cc98:	80 00       	ld.sh	r0,r0[0x0]
8000cc9a:	cb d0       	breq	8000cc14 <udi_msc_sense_fail+0x1c>
8000cc9c:	00 00       	add	r0,r0
8000cc9e:	01 54       	ld.sh	r4,--r0

8000cca0 <udi_msc_sense_fail_not_present>:
8000cca0:	eb cd 40 80 	pushm	r7,lr
8000cca4:	1a 97       	mov	r7,sp
8000cca6:	30 0a       	mov	r10,0
8000cca8:	e0 6b 3a 00 	mov	r11,14848
8000ccac:	30 2c       	mov	r12,2
8000ccae:	f0 1f 00 03 	mcall	8000ccb8 <udi_msc_sense_fail_not_present+0x18>
8000ccb2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccb6:	00 00       	add	r0,r0
8000ccb8:	80 00       	ld.sh	r0,r0[0x0]
8000ccba:	cb f8       	rjmp	8000ce38 <udi_msc_spc_inquiry+0x90>

8000ccbc <udi_msc_sense_fail_busy_or_change>:
8000ccbc:	eb cd 40 80 	pushm	r7,lr
8000ccc0:	1a 97       	mov	r7,sp
8000ccc2:	30 0a       	mov	r10,0
8000ccc4:	e0 6b 28 00 	mov	r11,10240
8000ccc8:	30 6c       	mov	r12,6
8000ccca:	f0 1f 00 03 	mcall	8000ccd4 <udi_msc_sense_fail_busy_or_change+0x18>
8000ccce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccd2:	00 00       	add	r0,r0
8000ccd4:	80 00       	ld.sh	r0,r0[0x0]
8000ccd6:	cb f8       	rjmp	8000ce54 <udi_msc_spc_inquiry+0xac>

8000ccd8 <udi_msc_sense_fail_hardware>:
8000ccd8:	eb cd 40 80 	pushm	r7,lr
8000ccdc:	1a 97       	mov	r7,sp
8000ccde:	30 0a       	mov	r10,0
8000cce0:	30 0b       	mov	r11,0
8000cce2:	30 4c       	mov	r12,4
8000cce4:	f0 1f 00 02 	mcall	8000ccec <udi_msc_sense_fail_hardware+0x14>
8000cce8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccec:	80 00       	ld.sh	r0,r0[0x0]
8000ccee:	cb f8       	rjmp	8000ce6c <udi_msc_spc_inquiry+0xc4>

8000ccf0 <udi_msc_sense_fail_protected>:
8000ccf0:	eb cd 40 80 	pushm	r7,lr
8000ccf4:	1a 97       	mov	r7,sp
8000ccf6:	30 0a       	mov	r10,0
8000ccf8:	e0 6b 27 00 	mov	r11,9984
8000ccfc:	30 7c       	mov	r12,7
8000ccfe:	f0 1f 00 03 	mcall	8000cd08 <udi_msc_sense_fail_protected+0x18>
8000cd02:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd06:	00 00       	add	r0,r0
8000cd08:	80 00       	ld.sh	r0,r0[0x0]
8000cd0a:	cb f8       	rjmp	8000ce88 <udi_msc_spc_inquiry+0xe0>

8000cd0c <udi_msc_sense_fail_cdb_invalid>:
8000cd0c:	eb cd 40 80 	pushm	r7,lr
8000cd10:	1a 97       	mov	r7,sp
8000cd12:	30 0a       	mov	r10,0
8000cd14:	e0 6b 24 00 	mov	r11,9216
8000cd18:	30 5c       	mov	r12,5
8000cd1a:	f0 1f 00 03 	mcall	8000cd24 <udi_msc_sense_fail_cdb_invalid+0x18>
8000cd1e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd22:	00 00       	add	r0,r0
8000cd24:	80 00       	ld.sh	r0,r0[0x0]
8000cd26:	cb f8       	rjmp	8000cea4 <udi_msc_spc_inquiry+0xfc>

8000cd28 <udi_msc_sense_command_invalid>:
8000cd28:	eb cd 40 80 	pushm	r7,lr
8000cd2c:	1a 97       	mov	r7,sp
8000cd2e:	30 0a       	mov	r10,0
8000cd30:	e0 6b 20 00 	mov	r11,8192
8000cd34:	30 5c       	mov	r12,5
8000cd36:	f0 1f 00 03 	mcall	8000cd40 <udi_msc_sense_command_invalid+0x18>
8000cd3a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd3e:	00 00       	add	r0,r0
8000cd40:	80 00       	ld.sh	r0,r0[0x0]
8000cd42:	cb f8       	rjmp	8000cec0 <udi_msc_spc_inquiry+0x118>

8000cd44 <udi_msc_spc_requestsense>:
8000cd44:	eb cd 40 80 	pushm	r7,lr
8000cd48:	1a 97       	mov	r7,sp
8000cd4a:	20 1d       	sub	sp,4
8000cd4c:	49 38       	lddpc	r8,8000cd98 <udi_msc_spc_requestsense+0x54>
8000cd4e:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cd52:	ef 68 ff ff 	st.b	r7[-1],r8
8000cd56:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000cd5a:	31 28       	mov	r8,18
8000cd5c:	f0 09 18 00 	cp.b	r9,r8
8000cd60:	e0 88 00 05 	brls	8000cd6a <udi_msc_spc_requestsense+0x26>
8000cd64:	31 28       	mov	r8,18
8000cd66:	ef 68 ff ff 	st.b	r7[-1],r8
8000cd6a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cd6e:	e0 6b 00 80 	mov	r11,128
8000cd72:	10 9c       	mov	r12,r8
8000cd74:	f0 1f 00 0a 	mcall	8000cd9c <udi_msc_spc_requestsense+0x58>
8000cd78:	18 98       	mov	r8,r12
8000cd7a:	ec 18 00 01 	eorl	r8,0x1
8000cd7e:	5c 58       	castu.b	r8
8000cd80:	c0 81       	brne	8000cd90 <udi_msc_spc_requestsense+0x4c>
8000cd82:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cd86:	10 9b       	mov	r11,r8
8000cd88:	48 6c       	lddpc	r12,8000cda0 <udi_msc_spc_requestsense+0x5c>
8000cd8a:	f0 1f 00 07 	mcall	8000cda4 <udi_msc_spc_requestsense+0x60>
8000cd8e:	c0 28       	rjmp	8000cd92 <udi_msc_spc_requestsense+0x4e>
8000cd90:	d7 03       	nop
8000cd92:	2f fd       	sub	sp,-4
8000cd94:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd98:	00 00       	add	r0,r0
8000cd9a:	08 90       	mov	r0,r4
8000cd9c:	80 00       	ld.sh	r0,r0[0x0]
8000cd9e:	ca 10       	breq	8000cce0 <udi_msc_sense_fail_hardware+0x8>
8000cda0:	00 00       	add	r0,r0
8000cda2:	08 b4       	st.h	r4++,r4
8000cda4:	80 00       	ld.sh	r0,r0[0x0]
8000cda6:	ca 70       	breq	8000ccf4 <udi_msc_sense_fail_protected+0x4>

8000cda8 <udi_msc_spc_inquiry>:
8000cda8:	eb cd 40 80 	pushm	r7,lr
8000cdac:	1a 97       	mov	r7,sp
8000cdae:	20 1d       	sub	sp,4
8000cdb0:	4b e8       	lddpc	r8,8000cea8 <udi_msc_spc_inquiry+0x100>
8000cdb2:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cdb6:	ef 68 ff fe 	st.b	r7[-2],r8
8000cdba:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000cdbe:	32 48       	mov	r8,36
8000cdc0:	f0 09 18 00 	cp.b	r9,r8
8000cdc4:	e0 88 00 05 	brls	8000cdce <udi_msc_spc_inquiry+0x26>
8000cdc8:	32 48       	mov	r8,36
8000cdca:	ef 68 ff fe 	st.b	r7[-2],r8
8000cdce:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000cdd2:	e0 6b 00 80 	mov	r11,128
8000cdd6:	10 9c       	mov	r12,r8
8000cdd8:	f0 1f 00 35 	mcall	8000ceac <udi_msc_spc_inquiry+0x104>
8000cddc:	18 98       	mov	r8,r12
8000cdde:	ec 18 00 01 	eorl	r8,0x1
8000cde2:	5c 58       	castu.b	r8
8000cde4:	c5 e1       	brne	8000cea0 <udi_msc_spc_inquiry+0xf8>
8000cde6:	4b 18       	lddpc	r8,8000cea8 <udi_msc_spc_inquiry+0x100>
8000cde8:	f1 38 00 10 	ld.ub	r8,r8[16]
8000cdec:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000cdf0:	c0 61       	brne	8000cdfc <udi_msc_spc_inquiry+0x54>
8000cdf2:	4a e8       	lddpc	r8,8000cea8 <udi_msc_spc_inquiry+0x100>
8000cdf4:	f1 38 00 11 	ld.ub	r8,r8[17]
8000cdf8:	58 08       	cp.w	r8,0
8000cdfa:	c0 60       	breq	8000ce06 <udi_msc_spc_inquiry+0x5e>
8000cdfc:	f0 1f 00 2d 	mcall	8000ceb0 <udi_msc_spc_inquiry+0x108>
8000ce00:	f0 1f 00 2d 	mcall	8000ceb4 <udi_msc_spc_inquiry+0x10c>
8000ce04:	c4 f8       	rjmp	8000cea2 <udi_msc_spc_inquiry+0xfa>
8000ce06:	4a 98       	lddpc	r8,8000cea8 <udi_msc_spc_inquiry+0x100>
8000ce08:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ce0c:	10 9c       	mov	r12,r8
8000ce0e:	f0 1f 00 2b 	mcall	8000ceb8 <udi_msc_spc_inquiry+0x110>
8000ce12:	18 98       	mov	r8,r12
8000ce14:	f0 c9 ff ff 	sub	r9,r8,-1
8000ce18:	4a 98       	lddpc	r8,8000cebc <udi_msc_spc_inquiry+0x114>
8000ce1a:	2f 08       	sub	r8,-16
8000ce1c:	31 0a       	mov	r10,16
8000ce1e:	12 9b       	mov	r11,r9
8000ce20:	10 9c       	mov	r12,r8
8000ce22:	f0 1f 00 28 	mcall	8000cec0 <udi_msc_spc_inquiry+0x118>
8000ce26:	30 08       	mov	r8,0
8000ce28:	ef 68 ff ff 	st.b	r7[-1],r8
8000ce2c:	c1 a8       	rjmp	8000ce60 <udi_msc_spc_inquiry+0xb8>
8000ce2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ce32:	4a 39       	lddpc	r9,8000cebc <udi_msc_spc_inquiry+0x114>
8000ce34:	f2 08 00 08 	add	r8,r9,r8
8000ce38:	f1 38 00 10 	ld.ub	r8,r8[16]
8000ce3c:	58 08       	cp.w	r8,0
8000ce3e:	c2 40       	breq	8000ce86 <udi_msc_spc_inquiry+0xde>
8000ce40:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ce44:	49 e9       	lddpc	r9,8000cebc <udi_msc_spc_inquiry+0x114>
8000ce46:	f2 08 00 08 	add	r8,r9,r8
8000ce4a:	f1 39 00 10 	ld.ub	r9,r8[16]
8000ce4e:	32 28       	mov	r8,34
8000ce50:	f0 09 18 00 	cp.b	r9,r8
8000ce54:	c1 90       	breq	8000ce86 <udi_msc_spc_inquiry+0xde>
8000ce56:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ce5a:	2f f8       	sub	r8,-1
8000ce5c:	ef 68 ff ff 	st.b	r7[-1],r8
8000ce60:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ce64:	31 08       	mov	r8,16
8000ce66:	f0 09 18 00 	cp.b	r9,r8
8000ce6a:	ce 21       	brne	8000ce2e <udi_msc_spc_inquiry+0x86>
8000ce6c:	c0 d8       	rjmp	8000ce86 <udi_msc_spc_inquiry+0xde>
8000ce6e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ce72:	49 39       	lddpc	r9,8000cebc <udi_msc_spc_inquiry+0x114>
8000ce74:	10 09       	add	r9,r8
8000ce76:	32 08       	mov	r8,32
8000ce78:	f3 68 00 10 	st.b	r9[16],r8
8000ce7c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ce80:	2f f8       	sub	r8,-1
8000ce82:	ef 68 ff ff 	st.b	r7[-1],r8
8000ce86:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ce8a:	31 08       	mov	r8,16
8000ce8c:	f0 09 18 00 	cp.b	r9,r8
8000ce90:	ce f1       	brne	8000ce6e <udi_msc_spc_inquiry+0xc6>
8000ce92:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000ce96:	10 9b       	mov	r11,r8
8000ce98:	48 9c       	lddpc	r12,8000cebc <udi_msc_spc_inquiry+0x114>
8000ce9a:	f0 1f 00 0b 	mcall	8000cec4 <udi_msc_spc_inquiry+0x11c>
8000ce9e:	c0 28       	rjmp	8000cea2 <udi_msc_spc_inquiry+0xfa>
8000cea0:	d7 03       	nop
8000cea2:	2f fd       	sub	sp,-4
8000cea4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cea8:	00 00       	add	r0,r0
8000ceaa:	08 90       	mov	r0,r4
8000ceac:	80 00       	ld.sh	r0,r0[0x0]
8000ceae:	ca 10       	breq	8000cdf0 <udi_msc_spc_inquiry+0x48>
8000ceb0:	80 00       	ld.sh	r0,r0[0x0]
8000ceb2:	cd 0c       	rcall	8000d052 <udi_msc_spc_mode_sense+0x112>
8000ceb4:	80 00       	ld.sh	r0,r0[0x0]
8000ceb6:	cb 0c       	rcall	8000d016 <udi_msc_spc_mode_sense+0xd6>
8000ceb8:	80 00       	ld.sh	r0,r0[0x0]
8000ceba:	c4 80       	breq	8000cf4a <udi_msc_spc_mode_sense+0xa>
8000cebc:	00 00       	add	r0,r0
8000cebe:	01 68       	ld.uh	r8,--r0
8000cec0:	80 00       	ld.sh	r0,r0[0x0]
8000cec2:	ea a2       	*unknown*
8000cec4:	80 00       	ld.sh	r0,r0[0x0]
8000cec6:	ca 70       	breq	8000ce14 <udi_msc_spc_inquiry+0x6c>

8000cec8 <udi_msc_spc_testunitready_global>:
8000cec8:	eb cd 40 80 	pushm	r7,lr
8000cecc:	1a 97       	mov	r7,sp
8000cece:	48 e8       	lddpc	r8,8000cf04 <udi_msc_spc_testunitready_global+0x3c>
8000ced0:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ced4:	10 9c       	mov	r12,r8
8000ced6:	f0 1f 00 0d 	mcall	8000cf08 <udi_msc_spc_testunitready_global+0x40>
8000ceda:	18 98       	mov	r8,r12
8000cedc:	58 28       	cp.w	r8,2
8000cede:	c0 a0       	breq	8000cef2 <udi_msc_spc_testunitready_global+0x2a>
8000cee0:	58 38       	cp.w	r8,3
8000cee2:	c0 50       	breq	8000ceec <udi_msc_spc_testunitready_global+0x24>
8000cee4:	58 08       	cp.w	r8,0
8000cee6:	c0 91       	brne	8000cef8 <udi_msc_spc_testunitready_global+0x30>
8000cee8:	30 18       	mov	r8,1
8000ceea:	c0 a8       	rjmp	8000cefe <udi_msc_spc_testunitready_global+0x36>
8000ceec:	f0 1f 00 08 	mcall	8000cf0c <udi_msc_spc_testunitready_global+0x44>
8000cef0:	c0 68       	rjmp	8000cefc <udi_msc_spc_testunitready_global+0x34>
8000cef2:	f0 1f 00 08 	mcall	8000cf10 <udi_msc_spc_testunitready_global+0x48>
8000cef6:	c0 38       	rjmp	8000cefc <udi_msc_spc_testunitready_global+0x34>
8000cef8:	f0 1f 00 07 	mcall	8000cf14 <udi_msc_spc_testunitready_global+0x4c>
8000cefc:	30 08       	mov	r8,0
8000cefe:	10 9c       	mov	r12,r8
8000cf00:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cf04:	00 00       	add	r0,r0
8000cf06:	08 90       	mov	r0,r4
8000cf08:	80 00       	ld.sh	r0,r0[0x0]
8000cf0a:	c3 90       	breq	8000cf7c <udi_msc_spc_mode_sense+0x3c>
8000cf0c:	80 00       	ld.sh	r0,r0[0x0]
8000cf0e:	cc bc       	rcall	8000d0a4 <udi_msc_sbc_read_capacity+0x14>
8000cf10:	80 00       	ld.sh	r0,r0[0x0]
8000cf12:	cc a0       	breq	8000cea6 <udi_msc_spc_inquiry+0xfe>
8000cf14:	80 00       	ld.sh	r0,r0[0x0]
8000cf16:	cc d8       	rjmp	8000d0b0 <udi_msc_sbc_read_capacity+0x20>

8000cf18 <udi_msc_spc_testunitready>:
8000cf18:	eb cd 40 80 	pushm	r7,lr
8000cf1c:	1a 97       	mov	r7,sp
8000cf1e:	f0 1f 00 06 	mcall	8000cf34 <udi_msc_spc_testunitready+0x1c>
8000cf22:	18 98       	mov	r8,r12
8000cf24:	58 08       	cp.w	r8,0
8000cf26:	c0 30       	breq	8000cf2c <udi_msc_spc_testunitready+0x14>
8000cf28:	f0 1f 00 04 	mcall	8000cf38 <udi_msc_spc_testunitready+0x20>
8000cf2c:	f0 1f 00 04 	mcall	8000cf3c <udi_msc_spc_testunitready+0x24>
8000cf30:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cf34:	80 00       	ld.sh	r0,r0[0x0]
8000cf36:	ce c8       	rjmp	8000d10e <udi_msc_sbc_read_capacity+0x7e>
8000cf38:	80 00       	ld.sh	r0,r0[0x0]
8000cf3a:	cc 80       	breq	8000ceca <udi_msc_spc_testunitready_global+0x2>
8000cf3c:	80 00       	ld.sh	r0,r0[0x0]
8000cf3e:	cb 0c       	rcall	8000d09e <udi_msc_sbc_read_capacity+0xe>

8000cf40 <udi_msc_spc_mode_sense>:
8000cf40:	eb cd 40 80 	pushm	r7,lr
8000cf44:	1a 97       	mov	r7,sp
8000cf46:	20 3d       	sub	sp,12
8000cf48:	18 98       	mov	r8,r12
8000cf4a:	ef 68 ff f4 	st.b	r7[-12],r8
8000cf4e:	31 4a       	mov	r10,20
8000cf50:	30 0b       	mov	r11,0
8000cf52:	4c ac       	lddpc	r12,8000d078 <udi_msc_spc_mode_sense+0x138>
8000cf54:	f0 1f 00 4a 	mcall	8000d07c <udi_msc_spc_mode_sense+0x13c>
8000cf58:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cf5c:	30 08       	mov	r8,0
8000cf5e:	f0 09 18 00 	cp.b	r9,r8
8000cf62:	c0 e0       	breq	8000cf7e <udi_msc_spc_mode_sense+0x3e>
8000cf64:	4c 78       	lddpc	r8,8000d080 <udi_msc_spc_mode_sense+0x140>
8000cf66:	f1 38 00 17 	ld.ub	r8,r8[23]
8000cf6a:	ef 68 ff fa 	st.b	r7[-6],r8
8000cf6e:	4c 38       	lddpc	r8,8000d078 <udi_msc_spc_mode_sense+0x138>
8000cf70:	2f 88       	sub	r8,-8
8000cf72:	ef 48 ff fc 	st.w	r7[-4],r8
8000cf76:	30 88       	mov	r8,8
8000cf78:	ef 68 ff f8 	st.b	r7[-8],r8
8000cf7c:	c0 d8       	rjmp	8000cf96 <udi_msc_spc_mode_sense+0x56>
8000cf7e:	4c 18       	lddpc	r8,8000d080 <udi_msc_spc_mode_sense+0x140>
8000cf80:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cf84:	ef 68 ff fa 	st.b	r7[-6],r8
8000cf88:	4b c8       	lddpc	r8,8000d078 <udi_msc_spc_mode_sense+0x138>
8000cf8a:	2f c8       	sub	r8,-4
8000cf8c:	ef 48 ff fc 	st.w	r7[-4],r8
8000cf90:	30 48       	mov	r8,4
8000cf92:	ef 68 ff f8 	st.b	r7[-8],r8
8000cf96:	4b b8       	lddpc	r8,8000d080 <udi_msc_spc_mode_sense+0x140>
8000cf98:	f1 38 00 11 	ld.ub	r8,r8[17]
8000cf9c:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000cfa0:	ef 68 ff f9 	st.b	r7[-7],r8
8000cfa4:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000cfa8:	31 c8       	mov	r8,28
8000cfaa:	f0 09 18 00 	cp.b	r9,r8
8000cfae:	c0 70       	breq	8000cfbc <udi_msc_spc_mode_sense+0x7c>
8000cfb0:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000cfb4:	33 f8       	mov	r8,63
8000cfb6:	f0 09 18 00 	cp.b	r9,r8
8000cfba:	c1 21       	brne	8000cfde <udi_msc_spc_mode_sense+0x9e>
8000cfbc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cfc0:	31 c8       	mov	r8,28
8000cfc2:	b2 88       	st.b	r9[0x0],r8
8000cfc4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cfc8:	30 a8       	mov	r8,10
8000cfca:	b2 98       	st.b	r9[0x1],r8
8000cfcc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cfd0:	30 58       	mov	r8,5
8000cfd2:	b2 b8       	st.b	r9[0x3],r8
8000cfd4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cfd8:	2f 48       	sub	r8,-12
8000cfda:	ef 68 ff f8 	st.b	r7[-8],r8
8000cfde:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000cfe2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cfe6:	f0 09 18 00 	cp.b	r9,r8
8000cfea:	e0 88 00 06 	brls	8000cff6 <udi_msc_spc_mode_sense+0xb6>
8000cfee:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cff2:	ef 68 ff fa 	st.b	r7[-6],r8
8000cff6:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000cffa:	e0 6b 00 80 	mov	r11,128
8000cffe:	10 9c       	mov	r12,r8
8000d000:	f0 1f 00 21 	mcall	8000d084 <udi_msc_spc_mode_sense+0x144>
8000d004:	18 98       	mov	r8,r12
8000d006:	ec 18 00 01 	eorl	r8,0x1
8000d00a:	5c 58       	castu.b	r8
8000d00c:	c3 21       	brne	8000d070 <udi_msc_spc_mode_sense+0x130>
8000d00e:	49 d8       	lddpc	r8,8000d080 <udi_msc_spc_mode_sense+0x140>
8000d010:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000d014:	10 9c       	mov	r12,r8
8000d016:	f0 1f 00 1d 	mcall	8000d088 <udi_msc_spc_mode_sense+0x148>
8000d01a:	18 98       	mov	r8,r12
8000d01c:	58 08       	cp.w	r8,0
8000d01e:	c0 40       	breq	8000d026 <udi_msc_spc_mode_sense+0xe6>
8000d020:	e0 68 00 80 	mov	r8,128
8000d024:	c0 28       	rjmp	8000d028 <udi_msc_spc_mode_sense+0xe8>
8000d026:	30 08       	mov	r8,0
8000d028:	ef 68 ff fb 	st.b	r7[-5],r8
8000d02c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d030:	30 08       	mov	r8,0
8000d032:	f0 09 18 00 	cp.b	r9,r8
8000d036:	c0 c0       	breq	8000d04e <udi_msc_spc_mode_sense+0x10e>
8000d038:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d03c:	20 28       	sub	r8,2
8000d03e:	5c 88       	casts.h	r8
8000d040:	48 e9       	lddpc	r9,8000d078 <udi_msc_spc_mode_sense+0x138>
8000d042:	b2 08       	st.h	r9[0x0],r8
8000d044:	48 d9       	lddpc	r9,8000d078 <udi_msc_spc_mode_sense+0x138>
8000d046:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000d04a:	b2 b8       	st.b	r9[0x3],r8
8000d04c:	c0 b8       	rjmp	8000d062 <udi_msc_spc_mode_sense+0x122>
8000d04e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d052:	20 18       	sub	r8,1
8000d054:	5c 58       	castu.b	r8
8000d056:	48 99       	lddpc	r9,8000d078 <udi_msc_spc_mode_sense+0x138>
8000d058:	b2 88       	st.b	r9[0x0],r8
8000d05a:	48 89       	lddpc	r9,8000d078 <udi_msc_spc_mode_sense+0x138>
8000d05c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000d060:	b2 a8       	st.b	r9[0x2],r8
8000d062:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000d066:	10 9b       	mov	r11,r8
8000d068:	48 4c       	lddpc	r12,8000d078 <udi_msc_spc_mode_sense+0x138>
8000d06a:	f0 1f 00 09 	mcall	8000d08c <udi_msc_spc_mode_sense+0x14c>
8000d06e:	c0 28       	rjmp	8000d072 <udi_msc_spc_mode_sense+0x132>
8000d070:	d7 03       	nop
8000d072:	2f dd       	sub	sp,-12
8000d074:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d078:	00 00       	add	r0,r0
8000d07a:	08 dc       	st.w	--r4,r12
8000d07c:	80 00       	ld.sh	r0,r0[0x0]
8000d07e:	eb ea 00 00 	and	r0,r5,r10
8000d082:	08 90       	mov	r0,r4
8000d084:	80 00       	ld.sh	r0,r0[0x0]
8000d086:	ca 10       	breq	8000cfc8 <udi_msc_spc_mode_sense+0x88>
8000d088:	80 00       	ld.sh	r0,r0[0x0]
8000d08a:	c4 30       	breq	8000d110 <udi_msc_sbc_read_capacity+0x80>
8000d08c:	80 00       	ld.sh	r0,r0[0x0]
8000d08e:	ca 70       	breq	8000cfdc <udi_msc_spc_mode_sense+0x9c>

8000d090 <udi_msc_sbc_read_capacity>:
8000d090:	eb cd 40 80 	pushm	r7,lr
8000d094:	1a 97       	mov	r7,sp
8000d096:	e0 6b 00 80 	mov	r11,128
8000d09a:	30 8c       	mov	r12,8
8000d09c:	f0 1f 00 1b 	mcall	8000d108 <udi_msc_sbc_read_capacity+0x78>
8000d0a0:	18 98       	mov	r8,r12
8000d0a2:	ec 18 00 01 	eorl	r8,0x1
8000d0a6:	5c 58       	castu.b	r8
8000d0a8:	c2 d1       	brne	8000d102 <udi_msc_sbc_read_capacity+0x72>
8000d0aa:	49 98       	lddpc	r8,8000d10c <udi_msc_sbc_read_capacity+0x7c>
8000d0ac:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000d0b0:	49 8b       	lddpc	r11,8000d110 <udi_msc_sbc_read_capacity+0x80>
8000d0b2:	10 9c       	mov	r12,r8
8000d0b4:	f0 1f 00 18 	mcall	8000d114 <udi_msc_sbc_read_capacity+0x84>
8000d0b8:	18 98       	mov	r8,r12
8000d0ba:	58 28       	cp.w	r8,2
8000d0bc:	c1 80       	breq	8000d0ec <udi_msc_sbc_read_capacity+0x5c>
8000d0be:	58 38       	cp.w	r8,3
8000d0c0:	c1 10       	breq	8000d0e2 <udi_msc_sbc_read_capacity+0x52>
8000d0c2:	58 08       	cp.w	r8,0
8000d0c4:	c1 91       	brne	8000d0f6 <udi_msc_sbc_read_capacity+0x66>
8000d0c6:	49 38       	lddpc	r8,8000d110 <udi_msc_sbc_read_capacity+0x80>
8000d0c8:	e0 69 02 00 	mov	r9,512
8000d0cc:	91 19       	st.w	r8[0x4],r9
8000d0ce:	49 18       	lddpc	r8,8000d110 <udi_msc_sbc_read_capacity+0x80>
8000d0d0:	70 09       	ld.w	r9,r8[0x0]
8000d0d2:	49 08       	lddpc	r8,8000d110 <udi_msc_sbc_read_capacity+0x80>
8000d0d4:	91 09       	st.w	r8[0x0],r9
8000d0d6:	48 f8       	lddpc	r8,8000d110 <udi_msc_sbc_read_capacity+0x80>
8000d0d8:	30 8b       	mov	r11,8
8000d0da:	10 9c       	mov	r12,r8
8000d0dc:	f0 1f 00 0f 	mcall	8000d118 <udi_msc_sbc_read_capacity+0x88>
8000d0e0:	c1 28       	rjmp	8000d104 <udi_msc_sbc_read_capacity+0x74>
8000d0e2:	f0 1f 00 0f 	mcall	8000d11c <udi_msc_sbc_read_capacity+0x8c>
8000d0e6:	f0 1f 00 0f 	mcall	8000d120 <udi_msc_sbc_read_capacity+0x90>
8000d0ea:	c0 d8       	rjmp	8000d104 <udi_msc_sbc_read_capacity+0x74>
8000d0ec:	f0 1f 00 0e 	mcall	8000d124 <udi_msc_sbc_read_capacity+0x94>
8000d0f0:	f0 1f 00 0c 	mcall	8000d120 <udi_msc_sbc_read_capacity+0x90>
8000d0f4:	c0 88       	rjmp	8000d104 <udi_msc_sbc_read_capacity+0x74>
8000d0f6:	f0 1f 00 0d 	mcall	8000d128 <udi_msc_sbc_read_capacity+0x98>
8000d0fa:	f0 1f 00 0a 	mcall	8000d120 <udi_msc_sbc_read_capacity+0x90>
8000d0fe:	d7 03       	nop
8000d100:	c0 28       	rjmp	8000d104 <udi_msc_sbc_read_capacity+0x74>
8000d102:	d7 03       	nop
8000d104:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d108:	80 00       	ld.sh	r0,r0[0x0]
8000d10a:	ca 10       	breq	8000d04c <udi_msc_spc_mode_sense+0x10c>
8000d10c:	00 00       	add	r0,r0
8000d10e:	08 90       	mov	r0,r4
8000d110:	00 00       	add	r0,r0
8000d112:	08 d4       	st.w	--r4,r4
8000d114:	80 00       	ld.sh	r0,r0[0x0]
8000d116:	c3 dc       	rcall	8000d190 <udi_msc_sbc_trans+0x64>
8000d118:	80 00       	ld.sh	r0,r0[0x0]
8000d11a:	ca 70       	breq	8000d068 <udi_msc_spc_mode_sense+0x128>
8000d11c:	80 00       	ld.sh	r0,r0[0x0]
8000d11e:	cc bc       	rcall	8000d2b4 <udi_msc_process_trans+0x94>
8000d120:	80 00       	ld.sh	r0,r0[0x0]
8000d122:	cb 0c       	rcall	8000d282 <udi_msc_process_trans+0x62>
8000d124:	80 00       	ld.sh	r0,r0[0x0]
8000d126:	cc a0       	breq	8000d0ba <udi_msc_sbc_read_capacity+0x2a>
8000d128:	80 00       	ld.sh	r0,r0[0x0]
8000d12a:	cc d8       	rjmp	8000d2c4 <udi_msc_process_trans+0xa4>

8000d12c <udi_msc_sbc_trans>:
8000d12c:	eb cd 40 80 	pushm	r7,lr
8000d130:	1a 97       	mov	r7,sp
8000d132:	20 2d       	sub	sp,8
8000d134:	18 98       	mov	r8,r12
8000d136:	ef 68 ff f8 	st.b	r7[-8],r8
8000d13a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d13e:	ec 18 00 01 	eorl	r8,0x1
8000d142:	5c 58       	castu.b	r8
8000d144:	c0 f0       	breq	8000d162 <udi_msc_sbc_trans+0x36>
8000d146:	4a e8       	lddpc	r8,8000d1fc <udi_msc_sbc_trans+0xd0>
8000d148:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000d14c:	10 9c       	mov	r12,r8
8000d14e:	f0 1f 00 2d 	mcall	8000d200 <udi_msc_sbc_trans+0xd4>
8000d152:	18 98       	mov	r8,r12
8000d154:	58 08       	cp.w	r8,0
8000d156:	c0 60       	breq	8000d162 <udi_msc_sbc_trans+0x36>
8000d158:	f0 1f 00 2b 	mcall	8000d204 <udi_msc_sbc_trans+0xd8>
8000d15c:	f0 1f 00 2b 	mcall	8000d208 <udi_msc_sbc_trans+0xdc>
8000d160:	c4 a8       	rjmp	8000d1f4 <udi_msc_sbc_trans+0xc8>
8000d162:	4a b9       	lddpc	r9,8000d20c <udi_msc_sbc_trans+0xe0>
8000d164:	4a 68       	lddpc	r8,8000d1fc <udi_msc_sbc_trans+0xd0>
8000d166:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d16a:	b2 88       	st.b	r9[0x0],r8
8000d16c:	4a 88       	lddpc	r8,8000d20c <udi_msc_sbc_trans+0xe0>
8000d16e:	f0 c9 ff ff 	sub	r9,r8,-1
8000d172:	4a 38       	lddpc	r8,8000d1fc <udi_msc_sbc_trans+0xd0>
8000d174:	f1 38 00 12 	ld.ub	r8,r8[18]
8000d178:	b2 88       	st.b	r9[0x0],r8
8000d17a:	4a 58       	lddpc	r8,8000d20c <udi_msc_sbc_trans+0xe0>
8000d17c:	f0 c9 ff fe 	sub	r9,r8,-2
8000d180:	49 f8       	lddpc	r8,8000d1fc <udi_msc_sbc_trans+0xd0>
8000d182:	f1 38 00 13 	ld.ub	r8,r8[19]
8000d186:	b2 88       	st.b	r9[0x0],r8
8000d188:	4a 18       	lddpc	r8,8000d20c <udi_msc_sbc_trans+0xe0>
8000d18a:	f0 c9 ff fd 	sub	r9,r8,-3
8000d18e:	49 c8       	lddpc	r8,8000d1fc <udi_msc_sbc_trans+0xd0>
8000d190:	f1 38 00 14 	ld.ub	r8,r8[20]
8000d194:	b2 88       	st.b	r9[0x0],r8
8000d196:	49 f9       	lddpc	r9,8000d210 <udi_msc_sbc_trans+0xe4>
8000d198:	49 98       	lddpc	r8,8000d1fc <udi_msc_sbc_trans+0xd0>
8000d19a:	f1 38 00 16 	ld.ub	r8,r8[22]
8000d19e:	b2 88       	st.b	r9[0x0],r8
8000d1a0:	49 c8       	lddpc	r8,8000d210 <udi_msc_sbc_trans+0xe4>
8000d1a2:	f0 c9 ff ff 	sub	r9,r8,-1
8000d1a6:	49 68       	lddpc	r8,8000d1fc <udi_msc_sbc_trans+0xd0>
8000d1a8:	f1 38 00 17 	ld.ub	r8,r8[23]
8000d1ac:	b2 88       	st.b	r9[0x0],r8
8000d1ae:	49 98       	lddpc	r8,8000d210 <udi_msc_sbc_trans+0xe4>
8000d1b0:	90 08       	ld.sh	r8,r8[0x0]
8000d1b2:	5c 78       	castu.h	r8
8000d1b4:	a9 78       	lsl	r8,0x9
8000d1b6:	ef 48 ff fc 	st.w	r7[-4],r8
8000d1ba:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d1be:	30 08       	mov	r8,0
8000d1c0:	f0 09 18 00 	cp.b	r9,r8
8000d1c4:	c0 40       	breq	8000d1cc <udi_msc_sbc_trans+0xa0>
8000d1c6:	e0 68 00 80 	mov	r8,128
8000d1ca:	c0 28       	rjmp	8000d1ce <udi_msc_sbc_trans+0xa2>
8000d1cc:	30 08       	mov	r8,0
8000d1ce:	10 9b       	mov	r11,r8
8000d1d0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d1d4:	f0 1f 00 10 	mcall	8000d214 <udi_msc_sbc_trans+0xe8>
8000d1d8:	18 98       	mov	r8,r12
8000d1da:	ec 18 00 01 	eorl	r8,0x1
8000d1de:	5c 58       	castu.b	r8
8000d1e0:	c0 91       	brne	8000d1f2 <udi_msc_sbc_trans+0xc6>
8000d1e2:	48 e9       	lddpc	r9,8000d218 <udi_msc_sbc_trans+0xec>
8000d1e4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d1e8:	b2 88       	st.b	r9[0x0],r8
8000d1ea:	48 d9       	lddpc	r9,8000d21c <udi_msc_sbc_trans+0xf0>
8000d1ec:	30 18       	mov	r8,1
8000d1ee:	b2 88       	st.b	r9[0x0],r8
8000d1f0:	c0 28       	rjmp	8000d1f4 <udi_msc_sbc_trans+0xc8>
8000d1f2:	d7 03       	nop
8000d1f4:	2f ed       	sub	sp,-8
8000d1f6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d1fa:	00 00       	add	r0,r0
8000d1fc:	00 00       	add	r0,r0
8000d1fe:	08 90       	mov	r0,r4
8000d200:	80 00       	ld.sh	r0,r0[0x0]
8000d202:	c4 30       	breq	8000d288 <udi_msc_process_trans+0x68>
8000d204:	80 00       	ld.sh	r0,r0[0x0]
8000d206:	cc f0       	breq	8000d1a4 <udi_msc_sbc_trans+0x78>
8000d208:	80 00       	ld.sh	r0,r0[0x0]
8000d20a:	cb 0c       	rcall	8000d36a <udi_msc_trans_block+0x46>
8000d20c:	00 00       	add	r0,r0
8000d20e:	08 cc       	st.b	r4++,r12
8000d210:	00 00       	add	r0,r0
8000d212:	08 d0       	st.w	--r4,r0
8000d214:	80 00       	ld.sh	r0,r0[0x0]
8000d216:	ca 10       	breq	8000d158 <udi_msc_sbc_trans+0x2c>
8000d218:	00 00       	add	r0,r0
8000d21a:	08 ca       	st.b	r4++,r10
8000d21c:	00 00       	add	r0,r0
8000d21e:	08 c9       	st.b	r4++,r9

8000d220 <udi_msc_process_trans>:
8000d220:	eb cd 40 80 	pushm	r7,lr
8000d224:	1a 97       	mov	r7,sp
8000d226:	20 1d       	sub	sp,4
8000d228:	4a 58       	lddpc	r8,8000d2bc <udi_msc_process_trans+0x9c>
8000d22a:	11 88       	ld.ub	r8,r8[0x0]
8000d22c:	ec 18 00 01 	eorl	r8,0x1
8000d230:	5c 58       	castu.b	r8
8000d232:	c0 30       	breq	8000d238 <udi_msc_process_trans+0x18>
8000d234:	30 08       	mov	r8,0
8000d236:	c3 f8       	rjmp	8000d2b4 <udi_msc_process_trans+0x94>
8000d238:	4a 19       	lddpc	r9,8000d2bc <udi_msc_process_trans+0x9c>
8000d23a:	30 08       	mov	r8,0
8000d23c:	b2 88       	st.b	r9[0x0],r8
8000d23e:	4a 18       	lddpc	r8,8000d2c0 <udi_msc_process_trans+0xa0>
8000d240:	11 88       	ld.ub	r8,r8[0x0]
8000d242:	58 08       	cp.w	r8,0
8000d244:	c1 20       	breq	8000d268 <udi_msc_process_trans+0x48>
8000d246:	4a 08       	lddpc	r8,8000d2c4 <udi_msc_process_trans+0xa4>
8000d248:	90 08       	ld.sh	r8,r8[0x0]
8000d24a:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000d24e:	49 f8       	lddpc	r8,8000d2c8 <udi_msc_process_trans+0xa8>
8000d250:	70 09       	ld.w	r9,r8[0x0]
8000d252:	49 f8       	lddpc	r8,8000d2cc <udi_msc_process_trans+0xac>
8000d254:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000d258:	12 9b       	mov	r11,r9
8000d25a:	10 9c       	mov	r12,r8
8000d25c:	f0 1f 00 1d 	mcall	8000d2d0 <udi_msc_process_trans+0xb0>
8000d260:	18 98       	mov	r8,r12
8000d262:	ef 48 ff fc 	st.w	r7[-4],r8
8000d266:	c1 18       	rjmp	8000d288 <udi_msc_process_trans+0x68>
8000d268:	49 78       	lddpc	r8,8000d2c4 <udi_msc_process_trans+0xa4>
8000d26a:	90 08       	ld.sh	r8,r8[0x0]
8000d26c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000d270:	49 68       	lddpc	r8,8000d2c8 <udi_msc_process_trans+0xa8>
8000d272:	70 09       	ld.w	r9,r8[0x0]
8000d274:	49 68       	lddpc	r8,8000d2cc <udi_msc_process_trans+0xac>
8000d276:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000d27a:	12 9b       	mov	r11,r9
8000d27c:	10 9c       	mov	r12,r8
8000d27e:	f0 1f 00 16 	mcall	8000d2d4 <udi_msc_process_trans+0xb4>
8000d282:	18 98       	mov	r8,r12
8000d284:	ef 48 ff fc 	st.w	r7[-4],r8
8000d288:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d28c:	58 28       	cp.w	r8,2
8000d28e:	c0 b0       	breq	8000d2a4 <udi_msc_process_trans+0x84>
8000d290:	58 38       	cp.w	r8,3
8000d292:	c0 60       	breq	8000d29e <udi_msc_process_trans+0x7e>
8000d294:	58 08       	cp.w	r8,0
8000d296:	c0 a1       	brne	8000d2aa <udi_msc_process_trans+0x8a>
8000d298:	f0 1f 00 10 	mcall	8000d2d8 <udi_msc_process_trans+0xb8>
8000d29c:	c0 98       	rjmp	8000d2ae <udi_msc_process_trans+0x8e>
8000d29e:	f0 1f 00 10 	mcall	8000d2dc <udi_msc_process_trans+0xbc>
8000d2a2:	c0 68       	rjmp	8000d2ae <udi_msc_process_trans+0x8e>
8000d2a4:	f0 1f 00 0f 	mcall	8000d2e0 <udi_msc_process_trans+0xc0>
8000d2a8:	c0 38       	rjmp	8000d2ae <udi_msc_process_trans+0x8e>
8000d2aa:	f0 1f 00 0f 	mcall	8000d2e4 <udi_msc_process_trans+0xc4>
8000d2ae:	f0 1f 00 0f 	mcall	8000d2e8 <udi_msc_process_trans+0xc8>
8000d2b2:	30 18       	mov	r8,1
8000d2b4:	10 9c       	mov	r12,r8
8000d2b6:	2f fd       	sub	sp,-4
8000d2b8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d2bc:	00 00       	add	r0,r0
8000d2be:	08 c9       	st.b	r4++,r9
8000d2c0:	00 00       	add	r0,r0
8000d2c2:	08 ca       	st.b	r4++,r10
8000d2c4:	00 00       	add	r0,r0
8000d2c6:	08 d0       	st.w	--r4,r0
8000d2c8:	00 00       	add	r0,r0
8000d2ca:	08 cc       	st.b	r4++,r12
8000d2cc:	00 00       	add	r0,r0
8000d2ce:	08 90       	mov	r0,r4
8000d2d0:	80 00       	ld.sh	r0,r0[0x0]
8000d2d2:	c4 c4       	brge	8000d36a <udi_msc_trans_block+0x46>
8000d2d4:	80 00       	ld.sh	r0,r0[0x0]
8000d2d6:	c5 38       	rjmp	8000d37c <udi_msc_trans_block+0x58>
8000d2d8:	80 00       	ld.sh	r0,r0[0x0]
8000d2da:	cc 80       	breq	8000d26a <udi_msc_process_trans+0x4a>
8000d2dc:	80 00       	ld.sh	r0,r0[0x0]
8000d2de:	cc bc       	rcall	8000d474 <udc_next_desc_in_iface+0x14>
8000d2e0:	80 00       	ld.sh	r0,r0[0x0]
8000d2e2:	cc a0       	breq	8000d276 <udi_msc_process_trans+0x56>
8000d2e4:	80 00       	ld.sh	r0,r0[0x0]
8000d2e6:	cc d8       	rjmp	8000d480 <udc_next_desc_in_iface+0x20>
8000d2e8:	80 00       	ld.sh	r0,r0[0x0]
8000d2ea:	cb 0c       	rcall	8000d44a <udc_get_eof_conf+0x1e>

8000d2ec <udi_msc_trans_ack>:
8000d2ec:	eb cd 40 80 	pushm	r7,lr
8000d2f0:	1a 97       	mov	r7,sp
8000d2f2:	20 3d       	sub	sp,12
8000d2f4:	ef 4c ff fc 	st.w	r7[-4],r12
8000d2f8:	ef 4b ff f8 	st.w	r7[-8],r11
8000d2fc:	14 98       	mov	r8,r10
8000d2fe:	ef 68 ff f4 	st.b	r7[-12],r8
8000d302:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d306:	58 08       	cp.w	r8,0
8000d308:	5f 18       	srne	r8
8000d30a:	5c 58       	castu.b	r8
8000d30c:	48 49       	lddpc	r9,8000d31c <udi_msc_trans_ack+0x30>
8000d30e:	b2 88       	st.b	r9[0x0],r8
8000d310:	48 49       	lddpc	r9,8000d320 <udi_msc_trans_ack+0x34>
8000d312:	30 18       	mov	r8,1
8000d314:	b2 88       	st.b	r9[0x0],r8
8000d316:	2f dd       	sub	sp,-12
8000d318:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d31c:	00 00       	add	r0,r0
8000d31e:	0e 03       	add	r3,r7
8000d320:	00 00       	add	r0,r0
8000d322:	01 64       	ld.uh	r4,--r0

8000d324 <udi_msc_trans_block>:
8000d324:	eb cd 40 80 	pushm	r7,lr
8000d328:	1a 97       	mov	r7,sp
8000d32a:	20 4d       	sub	sp,16
8000d32c:	18 98       	mov	r8,r12
8000d32e:	ef 4b ff f8 	st.w	r7[-8],r11
8000d332:	ef 4a ff f4 	st.w	r7[-12],r10
8000d336:	ef 49 ff f0 	st.w	r7[-16],r9
8000d33a:	ef 68 ff fc 	st.b	r7[-4],r8
8000d33e:	4a e8       	lddpc	r8,8000d3f4 <udi_msc_trans_block+0xd0>
8000d340:	11 88       	ld.ub	r8,r8[0x0]
8000d342:	5c 58       	castu.b	r8
8000d344:	ec 18 00 01 	eorl	r8,0x1
8000d348:	5c 58       	castu.b	r8
8000d34a:	c0 30       	breq	8000d350 <udi_msc_trans_block+0x2c>
8000d34c:	30 08       	mov	r8,0
8000d34e:	c4 f8       	rjmp	8000d3ec <udi_msc_trans_block+0xc8>
8000d350:	4a 99       	lddpc	r9,8000d3f4 <udi_msc_trans_block+0xd0>
8000d352:	30 08       	mov	r8,0
8000d354:	b2 88       	st.b	r9[0x0],r8
8000d356:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d35a:	58 08       	cp.w	r8,0
8000d35c:	c0 40       	breq	8000d364 <udi_msc_trans_block+0x40>
8000d35e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d362:	c0 28       	rjmp	8000d366 <udi_msc_trans_block+0x42>
8000d364:	4a 58       	lddpc	r8,8000d3f8 <udi_msc_trans_block+0xd4>
8000d366:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000d36a:	30 09       	mov	r9,0
8000d36c:	f2 0a 18 00 	cp.b	r10,r9
8000d370:	c0 40       	breq	8000d378 <udi_msc_trans_block+0x54>
8000d372:	e0 6c 00 81 	mov	r12,129
8000d376:	c0 28       	rjmp	8000d37a <udi_msc_trans_block+0x56>
8000d378:	30 2c       	mov	r12,2
8000d37a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d37e:	ee fa ff f8 	ld.w	r10,r7[-8]
8000d382:	30 0b       	mov	r11,0
8000d384:	f0 1f 00 1e 	mcall	8000d3fc <udi_msc_trans_block+0xd8>
8000d388:	18 98       	mov	r8,r12
8000d38a:	ec 18 00 01 	eorl	r8,0x1
8000d38e:	5c 58       	castu.b	r8
8000d390:	c0 60       	breq	8000d39c <udi_msc_trans_block+0x78>
8000d392:	49 99       	lddpc	r9,8000d3f4 <udi_msc_trans_block+0xd0>
8000d394:	30 18       	mov	r8,1
8000d396:	b2 88       	st.b	r9[0x0],r8
8000d398:	30 08       	mov	r8,0
8000d39a:	c2 98       	rjmp	8000d3ec <udi_msc_trans_block+0xc8>
8000d39c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d3a0:	58 08       	cp.w	r8,0
8000d3a2:	c1 d1       	brne	8000d3dc <udi_msc_trans_block+0xb8>
8000d3a4:	49 48       	lddpc	r8,8000d3f4 <udi_msc_trans_block+0xd0>
8000d3a6:	11 88       	ld.ub	r8,r8[0x0]
8000d3a8:	5c 58       	castu.b	r8
8000d3aa:	ec 18 00 01 	eorl	r8,0x1
8000d3ae:	5c 58       	castu.b	r8
8000d3b0:	cf a1       	brne	8000d3a4 <udi_msc_trans_block+0x80>
8000d3b2:	49 48       	lddpc	r8,8000d400 <udi_msc_trans_block+0xdc>
8000d3b4:	11 88       	ld.ub	r8,r8[0x0]
8000d3b6:	5c 58       	castu.b	r8
8000d3b8:	c0 30       	breq	8000d3be <udi_msc_trans_block+0x9a>
8000d3ba:	30 08       	mov	r8,0
8000d3bc:	c1 88       	rjmp	8000d3ec <udi_msc_trans_block+0xc8>
8000d3be:	49 28       	lddpc	r8,8000d404 <udi_msc_trans_block+0xe0>
8000d3c0:	70 29       	ld.w	r9,r8[0x8]
8000d3c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d3c6:	10 19       	sub	r9,r8
8000d3c8:	48 f8       	lddpc	r8,8000d404 <udi_msc_trans_block+0xe0>
8000d3ca:	91 29       	st.w	r8[0x8],r9
8000d3cc:	48 d8       	lddpc	r8,8000d400 <udi_msc_trans_block+0xdc>
8000d3ce:	11 88       	ld.ub	r8,r8[0x0]
8000d3d0:	5c 58       	castu.b	r8
8000d3d2:	ec 18 00 01 	eorl	r8,0x1
8000d3d6:	5c 58       	castu.b	r8
8000d3d8:	5c 58       	castu.b	r8
8000d3da:	c0 98       	rjmp	8000d3ec <udi_msc_trans_block+0xc8>
8000d3dc:	48 a8       	lddpc	r8,8000d404 <udi_msc_trans_block+0xe0>
8000d3de:	70 29       	ld.w	r9,r8[0x8]
8000d3e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d3e4:	10 19       	sub	r9,r8
8000d3e6:	48 88       	lddpc	r8,8000d404 <udi_msc_trans_block+0xe0>
8000d3e8:	91 29       	st.w	r8[0x8],r9
8000d3ea:	30 18       	mov	r8,1
8000d3ec:	10 9c       	mov	r12,r8
8000d3ee:	2f cd       	sub	sp,-16
8000d3f0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d3f4:	00 00       	add	r0,r0
8000d3f6:	01 64       	ld.uh	r4,--r0
8000d3f8:	80 00       	ld.sh	r0,r0[0x0]
8000d3fa:	d2 ec       	*unknown*
8000d3fc:	80 00       	ld.sh	r0,r0[0x0]
8000d3fe:	a8 7c       	st.h	r4[0xe],r12
8000d400:	00 00       	add	r0,r0
8000d402:	0e 03       	add	r3,r7
8000d404:	00 00       	add	r0,r0
8000d406:	01 54       	ld.sh	r4,--r0
8000d408:	36 39       	mov	r9,99
8000d40a:	36 39       	mov	r9,99
8000d40c:	36 39       	mov	r9,99
8000d40e:	36 39       	mov	r9,99
8000d410:	36 39       	mov	r9,99
8000d412:	36 39       	mov	r9,99
8000d414:	00 00       	add	r0,r0
	...

8000d418 <udc_get_string_serial_name>:
8000d418:	eb cd 40 80 	pushm	r7,lr
8000d41c:	1a 97       	mov	r7,sp
8000d41e:	48 38       	lddpc	r8,8000d428 <udc_get_string_serial_name+0x10>
8000d420:	10 9c       	mov	r12,r8
8000d422:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d426:	00 00       	add	r0,r0
8000d428:	80 00       	ld.sh	r0,r0[0x0]
8000d42a:	d4 08       	*unknown*

8000d42c <udc_get_eof_conf>:
8000d42c:	eb cd 40 80 	pushm	r7,lr
8000d430:	1a 97       	mov	r7,sp
8000d432:	48 b8       	lddpc	r8,8000d45c <udc_get_eof_conf+0x30>
8000d434:	70 08       	ld.w	r8,r8[0x0]
8000d436:	70 09       	ld.w	r9,r8[0x0]
8000d438:	48 98       	lddpc	r8,8000d45c <udc_get_eof_conf+0x30>
8000d43a:	70 08       	ld.w	r8,r8[0x0]
8000d43c:	70 08       	ld.w	r8,r8[0x0]
8000d43e:	11 aa       	ld.ub	r10,r8[0x2]
8000d440:	a9 6a       	lsl	r10,0x8
8000d442:	11 b8       	ld.ub	r8,r8[0x3]
8000d444:	14 48       	or	r8,r10
8000d446:	5c 88       	casts.h	r8
8000d448:	5c 88       	casts.h	r8
8000d44a:	5c c8       	swap.bh	r8
8000d44c:	5c 88       	casts.h	r8
8000d44e:	5c 78       	castu.h	r8
8000d450:	f2 08 00 08 	add	r8,r9,r8
8000d454:	10 9c       	mov	r12,r8
8000d456:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d45a:	00 00       	add	r0,r0
8000d45c:	00 00       	add	r0,r0
8000d45e:	08 f4       	st.b	--r4,r4

8000d460 <udc_next_desc_in_iface>:
8000d460:	eb cd 40 80 	pushm	r7,lr
8000d464:	1a 97       	mov	r7,sp
8000d466:	20 3d       	sub	sp,12
8000d468:	ef 4c ff f8 	st.w	r7[-8],r12
8000d46c:	16 98       	mov	r8,r11
8000d46e:	ef 68 ff f4 	st.b	r7[-12],r8
8000d472:	f0 1f 00 1d 	mcall	8000d4e4 <udc_next_desc_in_iface+0x84>
8000d476:	18 98       	mov	r8,r12
8000d478:	ef 48 ff fc 	st.w	r7[-4],r8
8000d47c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d480:	11 88       	ld.ub	r8,r8[0x0]
8000d482:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d486:	f2 08 00 08 	add	r8,r9,r8
8000d48a:	ef 48 ff f8 	st.w	r7[-8],r8
8000d48e:	c1 c8       	rjmp	8000d4c6 <udc_next_desc_in_iface+0x66>
8000d490:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d494:	11 99       	ld.ub	r9,r8[0x1]
8000d496:	30 48       	mov	r8,4
8000d498:	f0 09 18 00 	cp.b	r9,r8
8000d49c:	c1 d0       	breq	8000d4d6 <udc_next_desc_in_iface+0x76>
8000d49e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4a2:	11 98       	ld.ub	r8,r8[0x1]
8000d4a4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d4a8:	f0 09 18 00 	cp.b	r9,r8
8000d4ac:	c0 41       	brne	8000d4b4 <udc_next_desc_in_iface+0x54>
8000d4ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4b2:	c1 48       	rjmp	8000d4da <udc_next_desc_in_iface+0x7a>
8000d4b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4b8:	11 88       	ld.ub	r8,r8[0x0]
8000d4ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d4be:	f2 08 00 08 	add	r8,r9,r8
8000d4c2:	ef 48 ff f8 	st.w	r7[-8],r8
8000d4c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d4ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4ce:	10 39       	cp.w	r9,r8
8000d4d0:	fe 9b ff e0 	brhi	8000d490 <udc_next_desc_in_iface+0x30>
8000d4d4:	c0 28       	rjmp	8000d4d8 <udc_next_desc_in_iface+0x78>
8000d4d6:	d7 03       	nop
8000d4d8:	30 08       	mov	r8,0
8000d4da:	10 9c       	mov	r12,r8
8000d4dc:	2f dd       	sub	sp,-12
8000d4de:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d4e2:	00 00       	add	r0,r0
8000d4e4:	80 00       	ld.sh	r0,r0[0x0]
8000d4e6:	d4 2c       	*unknown*

8000d4e8 <udc_update_iface_desc>:
8000d4e8:	eb cd 40 80 	pushm	r7,lr
8000d4ec:	1a 97       	mov	r7,sp
8000d4ee:	20 3d       	sub	sp,12
8000d4f0:	18 99       	mov	r9,r12
8000d4f2:	16 98       	mov	r8,r11
8000d4f4:	ef 69 ff f8 	st.b	r7[-8],r9
8000d4f8:	ef 68 ff f4 	st.b	r7[-12],r8
8000d4fc:	4a 58       	lddpc	r8,8000d590 <udc_update_iface_desc+0xa8>
8000d4fe:	11 88       	ld.ub	r8,r8[0x0]
8000d500:	58 08       	cp.w	r8,0
8000d502:	c0 31       	brne	8000d508 <udc_update_iface_desc+0x20>
8000d504:	30 08       	mov	r8,0
8000d506:	c4 18       	rjmp	8000d588 <udc_update_iface_desc+0xa0>
8000d508:	4a 38       	lddpc	r8,8000d594 <udc_update_iface_desc+0xac>
8000d50a:	70 08       	ld.w	r8,r8[0x0]
8000d50c:	70 08       	ld.w	r8,r8[0x0]
8000d50e:	11 c8       	ld.ub	r8,r8[0x4]
8000d510:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d514:	f0 09 18 00 	cp.b	r9,r8
8000d518:	c0 33       	brcs	8000d51e <udc_update_iface_desc+0x36>
8000d51a:	30 08       	mov	r8,0
8000d51c:	c3 68       	rjmp	8000d588 <udc_update_iface_desc+0xa0>
8000d51e:	49 e8       	lddpc	r8,8000d594 <udc_update_iface_desc+0xac>
8000d520:	70 08       	ld.w	r8,r8[0x0]
8000d522:	70 08       	ld.w	r8,r8[0x0]
8000d524:	10 99       	mov	r9,r8
8000d526:	49 d8       	lddpc	r8,8000d598 <udc_update_iface_desc+0xb0>
8000d528:	91 09       	st.w	r8[0x0],r9
8000d52a:	f0 1f 00 1d 	mcall	8000d59c <udc_update_iface_desc+0xb4>
8000d52e:	18 98       	mov	r8,r12
8000d530:	ef 48 ff fc 	st.w	r7[-4],r8
8000d534:	c2 28       	rjmp	8000d578 <udc_update_iface_desc+0x90>
8000d536:	49 98       	lddpc	r8,8000d598 <udc_update_iface_desc+0xb0>
8000d538:	70 08       	ld.w	r8,r8[0x0]
8000d53a:	11 99       	ld.ub	r9,r8[0x1]
8000d53c:	30 48       	mov	r8,4
8000d53e:	f0 09 18 00 	cp.b	r9,r8
8000d542:	c1 31       	brne	8000d568 <udc_update_iface_desc+0x80>
8000d544:	49 58       	lddpc	r8,8000d598 <udc_update_iface_desc+0xb0>
8000d546:	70 08       	ld.w	r8,r8[0x0]
8000d548:	11 a8       	ld.ub	r8,r8[0x2]
8000d54a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d54e:	f0 09 18 00 	cp.b	r9,r8
8000d552:	c0 b1       	brne	8000d568 <udc_update_iface_desc+0x80>
8000d554:	49 18       	lddpc	r8,8000d598 <udc_update_iface_desc+0xb0>
8000d556:	70 08       	ld.w	r8,r8[0x0]
8000d558:	11 b8       	ld.ub	r8,r8[0x3]
8000d55a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d55e:	f0 09 18 00 	cp.b	r9,r8
8000d562:	c0 31       	brne	8000d568 <udc_update_iface_desc+0x80>
8000d564:	30 18       	mov	r8,1
8000d566:	c1 18       	rjmp	8000d588 <udc_update_iface_desc+0xa0>
8000d568:	48 c8       	lddpc	r8,8000d598 <udc_update_iface_desc+0xb0>
8000d56a:	70 09       	ld.w	r9,r8[0x0]
8000d56c:	48 b8       	lddpc	r8,8000d598 <udc_update_iface_desc+0xb0>
8000d56e:	70 08       	ld.w	r8,r8[0x0]
8000d570:	11 88       	ld.ub	r8,r8[0x0]
8000d572:	10 09       	add	r9,r8
8000d574:	48 98       	lddpc	r8,8000d598 <udc_update_iface_desc+0xb0>
8000d576:	91 09       	st.w	r8[0x0],r9
8000d578:	48 88       	lddpc	r8,8000d598 <udc_update_iface_desc+0xb0>
8000d57a:	70 08       	ld.w	r8,r8[0x0]
8000d57c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d580:	10 39       	cp.w	r9,r8
8000d582:	fe 9b ff da 	brhi	8000d536 <udc_update_iface_desc+0x4e>
8000d586:	30 08       	mov	r8,0
8000d588:	10 9c       	mov	r12,r8
8000d58a:	2f dd       	sub	sp,-12
8000d58c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d590:	00 00       	add	r0,r0
8000d592:	08 f2       	st.b	--r4,r2
8000d594:	00 00       	add	r0,r0
8000d596:	08 f4       	st.b	--r4,r4
8000d598:	00 00       	add	r0,r0
8000d59a:	08 f8       	st.b	--r4,r8
8000d59c:	80 00       	ld.sh	r0,r0[0x0]
8000d59e:	d4 2c       	*unknown*

8000d5a0 <udc_iface_disable>:
8000d5a0:	eb cd 40 80 	pushm	r7,lr
8000d5a4:	1a 97       	mov	r7,sp
8000d5a6:	20 3d       	sub	sp,12
8000d5a8:	18 98       	mov	r8,r12
8000d5aa:	ef 68 ff f4 	st.b	r7[-12],r8
8000d5ae:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d5b2:	30 0b       	mov	r11,0
8000d5b4:	10 9c       	mov	r12,r8
8000d5b6:	f0 1f 00 25 	mcall	8000d648 <udc_iface_disable+0xa8>
8000d5ba:	18 98       	mov	r8,r12
8000d5bc:	ec 18 00 01 	eorl	r8,0x1
8000d5c0:	5c 58       	castu.b	r8
8000d5c2:	c0 30       	breq	8000d5c8 <udc_iface_disable+0x28>
8000d5c4:	30 08       	mov	r8,0
8000d5c6:	c3 d8       	rjmp	8000d640 <udc_iface_disable+0xa0>
8000d5c8:	4a 18       	lddpc	r8,8000d64c <udc_iface_disable+0xac>
8000d5ca:	70 08       	ld.w	r8,r8[0x0]
8000d5cc:	70 19       	ld.w	r9,r8[0x4]
8000d5ce:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d5d2:	a3 68       	lsl	r8,0x2
8000d5d4:	f2 08 00 08 	add	r8,r9,r8
8000d5d8:	70 08       	ld.w	r8,r8[0x0]
8000d5da:	ef 48 ff f8 	st.w	r7[-8],r8
8000d5de:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d5e2:	70 38       	ld.w	r8,r8[0xc]
8000d5e4:	5d 18       	icall	r8
8000d5e6:	18 98       	mov	r8,r12
8000d5e8:	10 99       	mov	r9,r8
8000d5ea:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d5ee:	12 9b       	mov	r11,r9
8000d5f0:	10 9c       	mov	r12,r8
8000d5f2:	f0 1f 00 16 	mcall	8000d648 <udc_iface_disable+0xa8>
8000d5f6:	18 98       	mov	r8,r12
8000d5f8:	ec 18 00 01 	eorl	r8,0x1
8000d5fc:	5c 58       	castu.b	r8
8000d5fe:	c0 30       	breq	8000d604 <udc_iface_disable+0x64>
8000d600:	30 08       	mov	r8,0
8000d602:	c1 f8       	rjmp	8000d640 <udc_iface_disable+0xa0>
8000d604:	49 38       	lddpc	r8,8000d650 <udc_iface_disable+0xb0>
8000d606:	70 08       	ld.w	r8,r8[0x0]
8000d608:	ef 48 ff fc 	st.w	r7[-4],r8
8000d60c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d610:	30 5b       	mov	r11,5
8000d612:	10 9c       	mov	r12,r8
8000d614:	f0 1f 00 10 	mcall	8000d654 <udc_iface_disable+0xb4>
8000d618:	18 98       	mov	r8,r12
8000d61a:	ef 48 ff fc 	st.w	r7[-4],r8
8000d61e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d622:	58 08       	cp.w	r8,0
8000d624:	c0 71       	brne	8000d632 <udc_iface_disable+0x92>
8000d626:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d62a:	70 18       	ld.w	r8,r8[0x4]
8000d62c:	5d 18       	icall	r8
8000d62e:	30 18       	mov	r8,1
8000d630:	c0 88       	rjmp	8000d640 <udc_iface_disable+0xa0>
8000d632:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d636:	11 a8       	ld.ub	r8,r8[0x2]
8000d638:	10 9c       	mov	r12,r8
8000d63a:	f0 1f 00 08 	mcall	8000d658 <udc_iface_disable+0xb8>
8000d63e:	ce 7b       	rjmp	8000d60c <udc_iface_disable+0x6c>
8000d640:	10 9c       	mov	r12,r8
8000d642:	2f dd       	sub	sp,-12
8000d644:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d648:	80 00       	ld.sh	r0,r0[0x0]
8000d64a:	d4 e8       	*unknown*
8000d64c:	00 00       	add	r0,r0
8000d64e:	08 f4       	st.b	--r4,r4
8000d650:	00 00       	add	r0,r0
8000d652:	08 f8       	st.b	--r4,r8
8000d654:	80 00       	ld.sh	r0,r0[0x0]
8000d656:	d4 60       	acall	0x118
8000d658:	80 00       	ld.sh	r0,r0[0x0]
8000d65a:	a5 5c       	asr	r12,0x5

8000d65c <udc_iface_enable>:
8000d65c:	eb cd 40 80 	pushm	r7,lr
8000d660:	1a 97       	mov	r7,sp
8000d662:	20 3d       	sub	sp,12
8000d664:	18 99       	mov	r9,r12
8000d666:	16 98       	mov	r8,r11
8000d668:	ef 69 ff f8 	st.b	r7[-8],r9
8000d66c:	ef 68 ff f4 	st.b	r7[-12],r8
8000d670:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d674:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d678:	12 9b       	mov	r11,r9
8000d67a:	10 9c       	mov	r12,r8
8000d67c:	f0 1f 00 25 	mcall	8000d710 <udc_iface_enable+0xb4>
8000d680:	18 98       	mov	r8,r12
8000d682:	ec 18 00 01 	eorl	r8,0x1
8000d686:	5c 58       	castu.b	r8
8000d688:	c0 30       	breq	8000d68e <udc_iface_enable+0x32>
8000d68a:	30 08       	mov	r8,0
8000d68c:	c3 e8       	rjmp	8000d708 <udc_iface_enable+0xac>
8000d68e:	4a 28       	lddpc	r8,8000d714 <udc_iface_enable+0xb8>
8000d690:	70 08       	ld.w	r8,r8[0x0]
8000d692:	ef 48 ff fc 	st.w	r7[-4],r8
8000d696:	c0 28       	rjmp	8000d69a <udc_iface_enable+0x3e>
8000d698:	d7 03       	nop
8000d69a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d69e:	30 5b       	mov	r11,5
8000d6a0:	10 9c       	mov	r12,r8
8000d6a2:	f0 1f 00 1e 	mcall	8000d718 <udc_iface_enable+0xbc>
8000d6a6:	18 98       	mov	r8,r12
8000d6a8:	ef 48 ff fc 	st.w	r7[-4],r8
8000d6ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d6b0:	58 08       	cp.w	r8,0
8000d6b2:	c0 e1       	brne	8000d6ce <udc_iface_enable+0x72>
8000d6b4:	49 a8       	lddpc	r8,8000d71c <udc_iface_enable+0xc0>
8000d6b6:	70 08       	ld.w	r8,r8[0x0]
8000d6b8:	70 19       	ld.w	r9,r8[0x4]
8000d6ba:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d6be:	a3 68       	lsl	r8,0x2
8000d6c0:	f2 08 00 08 	add	r8,r9,r8
8000d6c4:	70 08       	ld.w	r8,r8[0x0]
8000d6c6:	70 08       	ld.w	r8,r8[0x0]
8000d6c8:	5d 18       	icall	r8
8000d6ca:	18 98       	mov	r8,r12
8000d6cc:	c1 e8       	rjmp	8000d708 <udc_iface_enable+0xac>
8000d6ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d6d2:	11 c9       	ld.ub	r9,r8[0x4]
8000d6d4:	a9 69       	lsl	r9,0x8
8000d6d6:	11 d8       	ld.ub	r8,r8[0x5]
8000d6d8:	12 48       	or	r8,r9
8000d6da:	5c 88       	casts.h	r8
8000d6dc:	5c 88       	casts.h	r8
8000d6de:	5c c8       	swap.bh	r8
8000d6e0:	5c 88       	casts.h	r8
8000d6e2:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000d6e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d6ea:	11 b8       	ld.ub	r8,r8[0x3]
8000d6ec:	10 99       	mov	r9,r8
8000d6ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d6f2:	11 a8       	ld.ub	r8,r8[0x2]
8000d6f4:	12 9b       	mov	r11,r9
8000d6f6:	10 9c       	mov	r12,r8
8000d6f8:	f0 1f 00 0a 	mcall	8000d720 <udc_iface_enable+0xc4>
8000d6fc:	18 98       	mov	r8,r12
8000d6fe:	ec 18 00 01 	eorl	r8,0x1
8000d702:	5c 58       	castu.b	r8
8000d704:	cc a0       	breq	8000d698 <udc_iface_enable+0x3c>
8000d706:	30 08       	mov	r8,0
8000d708:	10 9c       	mov	r12,r8
8000d70a:	2f dd       	sub	sp,-12
8000d70c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d710:	80 00       	ld.sh	r0,r0[0x0]
8000d712:	d4 e8       	*unknown*
8000d714:	00 00       	add	r0,r0
8000d716:	08 f8       	st.b	--r4,r8
8000d718:	80 00       	ld.sh	r0,r0[0x0]
8000d71a:	d4 60       	acall	0x118
8000d71c:	00 00       	add	r0,r0
8000d71e:	08 f4       	st.b	--r4,r4
8000d720:	80 00       	ld.sh	r0,r0[0x0]
8000d722:	a2 0c       	st.h	r1[0x0],r12

8000d724 <udc_start>:
8000d724:	eb cd 40 80 	pushm	r7,lr
8000d728:	1a 97       	mov	r7,sp
8000d72a:	f0 1f 00 03 	mcall	8000d734 <udc_start+0x10>
8000d72e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d732:	00 00       	add	r0,r0
8000d734:	80 00       	ld.sh	r0,r0[0x0]
8000d736:	9f 38       	st.w	pc[0xc],r8

8000d738 <udc_reset>:
8000d738:	eb cd 40 80 	pushm	r7,lr
8000d73c:	1a 97       	mov	r7,sp
8000d73e:	20 1d       	sub	sp,4
8000d740:	49 38       	lddpc	r8,8000d78c <udc_reset+0x54>
8000d742:	11 88       	ld.ub	r8,r8[0x0]
8000d744:	58 08       	cp.w	r8,0
8000d746:	c1 80       	breq	8000d776 <udc_reset+0x3e>
8000d748:	30 08       	mov	r8,0
8000d74a:	ef 68 ff ff 	st.b	r7[-1],r8
8000d74e:	c0 b8       	rjmp	8000d764 <udc_reset+0x2c>
8000d750:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d754:	10 9c       	mov	r12,r8
8000d756:	f0 1f 00 0f 	mcall	8000d790 <udc_reset+0x58>
8000d75a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d75e:	2f f8       	sub	r8,-1
8000d760:	ef 68 ff ff 	st.b	r7[-1],r8
8000d764:	48 c8       	lddpc	r8,8000d794 <udc_reset+0x5c>
8000d766:	70 08       	ld.w	r8,r8[0x0]
8000d768:	70 08       	ld.w	r8,r8[0x0]
8000d76a:	11 c8       	ld.ub	r8,r8[0x4]
8000d76c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d770:	f0 09 18 00 	cp.b	r9,r8
8000d774:	ce e3       	brcs	8000d750 <udc_reset+0x18>
8000d776:	48 69       	lddpc	r9,8000d78c <udc_reset+0x54>
8000d778:	30 08       	mov	r8,0
8000d77a:	b2 88       	st.b	r9[0x0],r8
8000d77c:	48 79       	lddpc	r9,8000d798 <udc_reset+0x60>
8000d77e:	e0 68 01 00 	mov	r8,256
8000d782:	b2 08       	st.h	r9[0x0],r8
8000d784:	2f fd       	sub	sp,-4
8000d786:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d78a:	00 00       	add	r0,r0
8000d78c:	00 00       	add	r0,r0
8000d78e:	08 f2       	st.b	--r4,r2
8000d790:	80 00       	ld.sh	r0,r0[0x0]
8000d792:	d5 a0       	acall	0x168
8000d794:	00 00       	add	r0,r0
8000d796:	08 f4       	st.b	--r4,r4
8000d798:	00 00       	add	r0,r0
8000d79a:	08 f0       	st.b	--r4,r0

8000d79c <udc_sof_notify>:
8000d79c:	eb cd 40 80 	pushm	r7,lr
8000d7a0:	1a 97       	mov	r7,sp
8000d7a2:	20 1d       	sub	sp,4
8000d7a4:	49 88       	lddpc	r8,8000d804 <udc_sof_notify+0x68>
8000d7a6:	11 88       	ld.ub	r8,r8[0x0]
8000d7a8:	58 08       	cp.w	r8,0
8000d7aa:	c2 a0       	breq	8000d7fe <udc_sof_notify+0x62>
8000d7ac:	30 08       	mov	r8,0
8000d7ae:	ef 68 ff ff 	st.b	r7[-1],r8
8000d7b2:	c1 d8       	rjmp	8000d7ec <udc_sof_notify+0x50>
8000d7b4:	49 58       	lddpc	r8,8000d808 <udc_sof_notify+0x6c>
8000d7b6:	70 08       	ld.w	r8,r8[0x0]
8000d7b8:	70 19       	ld.w	r9,r8[0x4]
8000d7ba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d7be:	a3 68       	lsl	r8,0x2
8000d7c0:	f2 08 00 08 	add	r8,r9,r8
8000d7c4:	70 08       	ld.w	r8,r8[0x0]
8000d7c6:	70 48       	ld.w	r8,r8[0x10]
8000d7c8:	58 08       	cp.w	r8,0
8000d7ca:	c0 c0       	breq	8000d7e2 <udc_sof_notify+0x46>
8000d7cc:	48 f8       	lddpc	r8,8000d808 <udc_sof_notify+0x6c>
8000d7ce:	70 08       	ld.w	r8,r8[0x0]
8000d7d0:	70 19       	ld.w	r9,r8[0x4]
8000d7d2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d7d6:	a3 68       	lsl	r8,0x2
8000d7d8:	f2 08 00 08 	add	r8,r9,r8
8000d7dc:	70 08       	ld.w	r8,r8[0x0]
8000d7de:	70 48       	ld.w	r8,r8[0x10]
8000d7e0:	5d 18       	icall	r8
8000d7e2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d7e6:	2f f8       	sub	r8,-1
8000d7e8:	ef 68 ff ff 	st.b	r7[-1],r8
8000d7ec:	48 78       	lddpc	r8,8000d808 <udc_sof_notify+0x6c>
8000d7ee:	70 08       	ld.w	r8,r8[0x0]
8000d7f0:	70 08       	ld.w	r8,r8[0x0]
8000d7f2:	11 c8       	ld.ub	r8,r8[0x4]
8000d7f4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d7f8:	f0 09 18 00 	cp.b	r9,r8
8000d7fc:	cd c3       	brcs	8000d7b4 <udc_sof_notify+0x18>
8000d7fe:	2f fd       	sub	sp,-4
8000d800:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d804:	00 00       	add	r0,r0
8000d806:	08 f2       	st.b	--r4,r2
8000d808:	00 00       	add	r0,r0
8000d80a:	08 f4       	st.b	--r4,r4

8000d80c <udc_req_std_dev_get_status>:
8000d80c:	eb cd 40 80 	pushm	r7,lr
8000d810:	1a 97       	mov	r7,sp
8000d812:	48 98       	lddpc	r8,8000d834 <udc_req_std_dev_get_status+0x28>
8000d814:	90 39       	ld.sh	r9,r8[0x6]
8000d816:	30 28       	mov	r8,2
8000d818:	f0 09 19 00 	cp.h	r9,r8
8000d81c:	c0 30       	breq	8000d822 <udc_req_std_dev_get_status+0x16>
8000d81e:	30 08       	mov	r8,0
8000d820:	c0 78       	rjmp	8000d82e <udc_req_std_dev_get_status+0x22>
8000d822:	48 68       	lddpc	r8,8000d838 <udc_req_std_dev_get_status+0x2c>
8000d824:	30 2b       	mov	r11,2
8000d826:	10 9c       	mov	r12,r8
8000d828:	f0 1f 00 05 	mcall	8000d83c <udc_req_std_dev_get_status+0x30>
8000d82c:	30 18       	mov	r8,1
8000d82e:	10 9c       	mov	r12,r8
8000d830:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d834:	00 00       	add	r0,r0
8000d836:	0d e4       	ld.ub	r4,r6[0x6]
8000d838:	00 00       	add	r0,r0
8000d83a:	08 f0       	st.b	--r4,r0
8000d83c:	80 00       	ld.sh	r0,r0[0x0]
8000d83e:	a1 e0       	*unknown*

8000d840 <udc_req_std_ep_get_status>:
8000d840:	eb cd 40 80 	pushm	r7,lr
8000d844:	1a 97       	mov	r7,sp
8000d846:	49 18       	lddpc	r8,8000d888 <udc_req_std_ep_get_status+0x48>
8000d848:	90 39       	ld.sh	r9,r8[0x6]
8000d84a:	30 28       	mov	r8,2
8000d84c:	f0 09 19 00 	cp.h	r9,r8
8000d850:	c0 30       	breq	8000d856 <udc_req_std_ep_get_status+0x16>
8000d852:	30 08       	mov	r8,0
8000d854:	c1 68       	rjmp	8000d880 <udc_req_std_ep_get_status+0x40>
8000d856:	48 d8       	lddpc	r8,8000d888 <udc_req_std_ep_get_status+0x48>
8000d858:	90 28       	ld.sh	r8,r8[0x4]
8000d85a:	5c 58       	castu.b	r8
8000d85c:	10 9c       	mov	r12,r8
8000d85e:	f0 1f 00 0c 	mcall	8000d88c <udc_req_std_ep_get_status+0x4c>
8000d862:	18 98       	mov	r8,r12
8000d864:	58 08       	cp.w	r8,0
8000d866:	c0 40       	breq	8000d86e <udc_req_std_ep_get_status+0x2e>
8000d868:	e0 68 01 00 	mov	r8,256
8000d86c:	c0 28       	rjmp	8000d870 <udc_req_std_ep_get_status+0x30>
8000d86e:	30 08       	mov	r8,0
8000d870:	48 89       	lddpc	r9,8000d890 <udc_req_std_ep_get_status+0x50>
8000d872:	b2 08       	st.h	r9[0x0],r8
8000d874:	48 78       	lddpc	r8,8000d890 <udc_req_std_ep_get_status+0x50>
8000d876:	30 2b       	mov	r11,2
8000d878:	10 9c       	mov	r12,r8
8000d87a:	f0 1f 00 07 	mcall	8000d894 <udc_req_std_ep_get_status+0x54>
8000d87e:	30 18       	mov	r8,1
8000d880:	10 9c       	mov	r12,r8
8000d882:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d886:	00 00       	add	r0,r0
8000d888:	00 00       	add	r0,r0
8000d88a:	0d e4       	ld.ub	r4,r6[0x6]
8000d88c:	80 00       	ld.sh	r0,r0[0x0]
8000d88e:	a5 f8       	*unknown*
8000d890:	00 00       	add	r0,r0
8000d892:	08 fe       	st.b	--r4,lr
8000d894:	80 00       	ld.sh	r0,r0[0x0]
8000d896:	a1 e0       	*unknown*

8000d898 <udc_req_std_dev_clear_feature>:
8000d898:	eb cd 40 80 	pushm	r7,lr
8000d89c:	1a 97       	mov	r7,sp
8000d89e:	48 d8       	lddpc	r8,8000d8d0 <udc_req_std_dev_clear_feature+0x38>
8000d8a0:	90 38       	ld.sh	r8,r8[0x6]
8000d8a2:	58 08       	cp.w	r8,0
8000d8a4:	c0 30       	breq	8000d8aa <udc_req_std_dev_clear_feature+0x12>
8000d8a6:	30 08       	mov	r8,0
8000d8a8:	c1 08       	rjmp	8000d8c8 <udc_req_std_dev_clear_feature+0x30>
8000d8aa:	48 a8       	lddpc	r8,8000d8d0 <udc_req_std_dev_clear_feature+0x38>
8000d8ac:	90 19       	ld.sh	r9,r8[0x2]
8000d8ae:	30 18       	mov	r8,1
8000d8b0:	f0 09 19 00 	cp.h	r9,r8
8000d8b4:	c0 91       	brne	8000d8c6 <udc_req_std_dev_clear_feature+0x2e>
8000d8b6:	48 88       	lddpc	r8,8000d8d4 <udc_req_std_dev_clear_feature+0x3c>
8000d8b8:	90 08       	ld.sh	r8,r8[0x0]
8000d8ba:	a9 d8       	cbr	r8,0x9
8000d8bc:	5c 88       	casts.h	r8
8000d8be:	48 69       	lddpc	r9,8000d8d4 <udc_req_std_dev_clear_feature+0x3c>
8000d8c0:	b2 08       	st.h	r9[0x0],r8
8000d8c2:	30 18       	mov	r8,1
8000d8c4:	c0 28       	rjmp	8000d8c8 <udc_req_std_dev_clear_feature+0x30>
8000d8c6:	30 08       	mov	r8,0
8000d8c8:	10 9c       	mov	r12,r8
8000d8ca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d8ce:	00 00       	add	r0,r0
8000d8d0:	00 00       	add	r0,r0
8000d8d2:	0d e4       	ld.ub	r4,r6[0x6]
8000d8d4:	00 00       	add	r0,r0
8000d8d6:	08 f0       	st.b	--r4,r0

8000d8d8 <udc_req_std_ep_clear_feature>:
8000d8d8:	eb cd 40 80 	pushm	r7,lr
8000d8dc:	1a 97       	mov	r7,sp
8000d8de:	48 c8       	lddpc	r8,8000d90c <udc_req_std_ep_clear_feature+0x34>
8000d8e0:	90 38       	ld.sh	r8,r8[0x6]
8000d8e2:	58 08       	cp.w	r8,0
8000d8e4:	c0 30       	breq	8000d8ea <udc_req_std_ep_clear_feature+0x12>
8000d8e6:	30 08       	mov	r8,0
8000d8e8:	c0 e8       	rjmp	8000d904 <udc_req_std_ep_clear_feature+0x2c>
8000d8ea:	48 98       	lddpc	r8,8000d90c <udc_req_std_ep_clear_feature+0x34>
8000d8ec:	90 18       	ld.sh	r8,r8[0x2]
8000d8ee:	58 08       	cp.w	r8,0
8000d8f0:	c0 91       	brne	8000d902 <udc_req_std_ep_clear_feature+0x2a>
8000d8f2:	48 78       	lddpc	r8,8000d90c <udc_req_std_ep_clear_feature+0x34>
8000d8f4:	90 28       	ld.sh	r8,r8[0x4]
8000d8f6:	5c 58       	castu.b	r8
8000d8f8:	10 9c       	mov	r12,r8
8000d8fa:	f0 1f 00 06 	mcall	8000d910 <udc_req_std_ep_clear_feature+0x38>
8000d8fe:	18 98       	mov	r8,r12
8000d900:	c0 28       	rjmp	8000d904 <udc_req_std_ep_clear_feature+0x2c>
8000d902:	30 08       	mov	r8,0
8000d904:	10 9c       	mov	r12,r8
8000d906:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d90a:	00 00       	add	r0,r0
8000d90c:	00 00       	add	r0,r0
8000d90e:	0d e4       	ld.ub	r4,r6[0x6]
8000d910:	80 00       	ld.sh	r0,r0[0x0]
8000d912:	a7 3c       	mul	r12,r3

8000d914 <udc_req_std_dev_set_feature>:
8000d914:	eb cd 40 80 	pushm	r7,lr
8000d918:	1a 97       	mov	r7,sp
8000d91a:	4a 78       	lddpc	r8,8000d9b4 <udc_req_std_dev_set_feature+0xa0>
8000d91c:	90 38       	ld.sh	r8,r8[0x6]
8000d91e:	58 08       	cp.w	r8,0
8000d920:	c0 30       	breq	8000d926 <udc_req_std_dev_set_feature+0x12>
8000d922:	30 08       	mov	r8,0
8000d924:	c4 48       	rjmp	8000d9ac <udc_req_std_dev_set_feature+0x98>
8000d926:	4a 48       	lddpc	r8,8000d9b4 <udc_req_std_dev_set_feature+0xa0>
8000d928:	90 18       	ld.sh	r8,r8[0x2]
8000d92a:	5c 78       	castu.h	r8
8000d92c:	58 18       	cp.w	r8,1
8000d92e:	c0 40       	breq	8000d936 <udc_req_std_dev_set_feature+0x22>
8000d930:	58 28       	cp.w	r8,2
8000d932:	c0 40       	breq	8000d93a <udc_req_std_dev_set_feature+0x26>
8000d934:	c3 b8       	rjmp	8000d9aa <udc_req_std_dev_set_feature+0x96>
8000d936:	30 08       	mov	r8,0
8000d938:	c3 a8       	rjmp	8000d9ac <udc_req_std_dev_set_feature+0x98>
8000d93a:	f0 1f 00 20 	mcall	8000d9b8 <udc_req_std_dev_set_feature+0xa4>
8000d93e:	18 98       	mov	r8,r12
8000d940:	ec 18 00 01 	eorl	r8,0x1
8000d944:	5c 58       	castu.b	r8
8000d946:	c2 f1       	brne	8000d9a4 <udc_req_std_dev_set_feature+0x90>
8000d948:	49 b8       	lddpc	r8,8000d9b4 <udc_req_std_dev_set_feature+0xa0>
8000d94a:	90 28       	ld.sh	r8,r8[0x4]
8000d94c:	5c 78       	castu.h	r8
8000d94e:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d952:	c2 b1       	brne	8000d9a8 <udc_req_std_dev_set_feature+0x94>
8000d954:	f0 1f 00 1a 	mcall	8000d9bc <udc_req_std_dev_set_feature+0xa8>
8000d958:	49 78       	lddpc	r8,8000d9b4 <udc_req_std_dev_set_feature+0xa0>
8000d95a:	90 28       	ld.sh	r8,r8[0x4]
8000d95c:	5c 78       	castu.h	r8
8000d95e:	a9 88       	lsr	r8,0x8
8000d960:	5c 88       	casts.h	r8
8000d962:	5c 78       	castu.h	r8
8000d964:	58 28       	cp.w	r8,2
8000d966:	c1 00       	breq	8000d986 <udc_req_std_dev_set_feature+0x72>
8000d968:	e0 89 00 05 	brgt	8000d972 <udc_req_std_dev_set_feature+0x5e>
8000d96c:	58 18       	cp.w	r8,1
8000d96e:	c0 70       	breq	8000d97c <udc_req_std_dev_set_feature+0x68>
8000d970:	c1 d8       	rjmp	8000d9aa <udc_req_std_dev_set_feature+0x96>
8000d972:	58 38       	cp.w	r8,3
8000d974:	c0 e0       	breq	8000d990 <udc_req_std_dev_set_feature+0x7c>
8000d976:	58 48       	cp.w	r8,4
8000d978:	c1 10       	breq	8000d99a <udc_req_std_dev_set_feature+0x86>
8000d97a:	c1 88       	rjmp	8000d9aa <udc_req_std_dev_set_feature+0x96>
8000d97c:	48 e8       	lddpc	r8,8000d9b4 <udc_req_std_dev_set_feature+0xa0>
8000d97e:	49 19       	lddpc	r9,8000d9c0 <udc_req_std_dev_set_feature+0xac>
8000d980:	91 49       	st.w	r8[0x10],r9
8000d982:	30 18       	mov	r8,1
8000d984:	c1 48       	rjmp	8000d9ac <udc_req_std_dev_set_feature+0x98>
8000d986:	48 c8       	lddpc	r8,8000d9b4 <udc_req_std_dev_set_feature+0xa0>
8000d988:	48 f9       	lddpc	r9,8000d9c4 <udc_req_std_dev_set_feature+0xb0>
8000d98a:	91 49       	st.w	r8[0x10],r9
8000d98c:	30 18       	mov	r8,1
8000d98e:	c0 f8       	rjmp	8000d9ac <udc_req_std_dev_set_feature+0x98>
8000d990:	48 98       	lddpc	r8,8000d9b4 <udc_req_std_dev_set_feature+0xa0>
8000d992:	48 e9       	lddpc	r9,8000d9c8 <udc_req_std_dev_set_feature+0xb4>
8000d994:	91 49       	st.w	r8[0x10],r9
8000d996:	30 18       	mov	r8,1
8000d998:	c0 a8       	rjmp	8000d9ac <udc_req_std_dev_set_feature+0x98>
8000d99a:	48 78       	lddpc	r8,8000d9b4 <udc_req_std_dev_set_feature+0xa0>
8000d99c:	48 c9       	lddpc	r9,8000d9cc <udc_req_std_dev_set_feature+0xb8>
8000d99e:	91 49       	st.w	r8[0x10],r9
8000d9a0:	30 18       	mov	r8,1
8000d9a2:	c0 58       	rjmp	8000d9ac <udc_req_std_dev_set_feature+0x98>
8000d9a4:	d7 03       	nop
8000d9a6:	c0 28       	rjmp	8000d9aa <udc_req_std_dev_set_feature+0x96>
8000d9a8:	d7 03       	nop
8000d9aa:	30 08       	mov	r8,0
8000d9ac:	10 9c       	mov	r12,r8
8000d9ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d9b2:	00 00       	add	r0,r0
8000d9b4:	00 00       	add	r0,r0
8000d9b6:	0d e4       	ld.ub	r4,r6[0x6]
8000d9b8:	80 00       	ld.sh	r0,r0[0x0]
8000d9ba:	a1 44       	asr	r4,0x0
8000d9bc:	80 00       	ld.sh	r0,r0[0x0]
8000d9be:	d7 38       	*unknown*
8000d9c0:	80 00       	ld.sh	r0,r0[0x0]
8000d9c2:	ab 00       	ld.d	r0,r5
8000d9c4:	80 00       	ld.sh	r0,r0[0x0]
8000d9c6:	ab 2a       	st.d	r5++,r10
8000d9c8:	80 00       	ld.sh	r0,r0[0x0]
8000d9ca:	ab 54       	asr	r4,0xb
8000d9cc:	80 00       	ld.sh	r0,r0[0x0]
8000d9ce:	ab 70       	lsl	r0,0xb

8000d9d0 <udc_req_std_ep_set_feature>:
8000d9d0:	eb cd 40 80 	pushm	r7,lr
8000d9d4:	1a 97       	mov	r7,sp
8000d9d6:	48 f8       	lddpc	r8,8000da10 <udc_req_std_ep_set_feature+0x40>
8000d9d8:	90 38       	ld.sh	r8,r8[0x6]
8000d9da:	58 08       	cp.w	r8,0
8000d9dc:	c0 30       	breq	8000d9e2 <udc_req_std_ep_set_feature+0x12>
8000d9de:	30 08       	mov	r8,0
8000d9e0:	c1 48       	rjmp	8000da08 <udc_req_std_ep_set_feature+0x38>
8000d9e2:	48 c8       	lddpc	r8,8000da10 <udc_req_std_ep_set_feature+0x40>
8000d9e4:	90 18       	ld.sh	r8,r8[0x2]
8000d9e6:	58 08       	cp.w	r8,0
8000d9e8:	c0 f1       	brne	8000da06 <udc_req_std_ep_set_feature+0x36>
8000d9ea:	48 a8       	lddpc	r8,8000da10 <udc_req_std_ep_set_feature+0x40>
8000d9ec:	90 28       	ld.sh	r8,r8[0x4]
8000d9ee:	5c 58       	castu.b	r8
8000d9f0:	10 9c       	mov	r12,r8
8000d9f2:	f0 1f 00 09 	mcall	8000da14 <udc_req_std_ep_set_feature+0x44>
8000d9f6:	48 78       	lddpc	r8,8000da10 <udc_req_std_ep_set_feature+0x40>
8000d9f8:	90 28       	ld.sh	r8,r8[0x4]
8000d9fa:	5c 58       	castu.b	r8
8000d9fc:	10 9c       	mov	r12,r8
8000d9fe:	f0 1f 00 07 	mcall	8000da18 <udc_req_std_ep_set_feature+0x48>
8000da02:	18 98       	mov	r8,r12
8000da04:	c0 28       	rjmp	8000da08 <udc_req_std_ep_set_feature+0x38>
8000da06:	30 08       	mov	r8,0
8000da08:	10 9c       	mov	r12,r8
8000da0a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000da0e:	00 00       	add	r0,r0
8000da10:	00 00       	add	r0,r0
8000da12:	0d e4       	ld.ub	r4,r6[0x6]
8000da14:	80 00       	ld.sh	r0,r0[0x0]
8000da16:	a9 a0       	sbr	r0,0x8
8000da18:	80 00       	ld.sh	r0,r0[0x0]
8000da1a:	a6 28       	st.h	r3[0x4],r8

8000da1c <udc_valid_address>:
8000da1c:	eb cd 40 80 	pushm	r7,lr
8000da20:	1a 97       	mov	r7,sp
8000da22:	48 68       	lddpc	r8,8000da38 <udc_valid_address+0x1c>
8000da24:	90 18       	ld.sh	r8,r8[0x2]
8000da26:	5c 58       	castu.b	r8
8000da28:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000da2c:	10 9c       	mov	r12,r8
8000da2e:	f0 1f 00 04 	mcall	8000da3c <udc_valid_address+0x20>
8000da32:	e3 cd 80 80 	ldm	sp++,r7,pc
8000da36:	00 00       	add	r0,r0
8000da38:	00 00       	add	r0,r0
8000da3a:	0d e4       	ld.ub	r4,r6[0x6]
8000da3c:	80 00       	ld.sh	r0,r0[0x0]
8000da3e:	a1 60       	lsl	r0,0x0

8000da40 <udc_req_std_dev_set_address>:
8000da40:	eb cd 40 80 	pushm	r7,lr
8000da44:	1a 97       	mov	r7,sp
8000da46:	48 78       	lddpc	r8,8000da60 <udc_req_std_dev_set_address+0x20>
8000da48:	90 38       	ld.sh	r8,r8[0x6]
8000da4a:	58 08       	cp.w	r8,0
8000da4c:	c0 30       	breq	8000da52 <udc_req_std_dev_set_address+0x12>
8000da4e:	30 08       	mov	r8,0
8000da50:	c0 58       	rjmp	8000da5a <udc_req_std_dev_set_address+0x1a>
8000da52:	48 48       	lddpc	r8,8000da60 <udc_req_std_dev_set_address+0x20>
8000da54:	48 49       	lddpc	r9,8000da64 <udc_req_std_dev_set_address+0x24>
8000da56:	91 49       	st.w	r8[0x10],r9
8000da58:	30 18       	mov	r8,1
8000da5a:	10 9c       	mov	r12,r8
8000da5c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000da60:	00 00       	add	r0,r0
8000da62:	0d e4       	ld.ub	r4,r6[0x6]
8000da64:	80 00       	ld.sh	r0,r0[0x0]
8000da66:	da 1c       	*unknown*

8000da68 <udc_req_std_dev_get_str_desc>:
8000da68:	eb cd 40 80 	pushm	r7,lr
8000da6c:	1a 97       	mov	r7,sp
8000da6e:	20 3d       	sub	sp,12
8000da70:	30 08       	mov	r8,0
8000da72:	ef 68 ff ff 	st.b	r7[-1],r8
8000da76:	4b 68       	lddpc	r8,8000db4c <udc_req_std_dev_get_str_desc+0xe4>
8000da78:	90 18       	ld.sh	r8,r8[0x2]
8000da7a:	5c 78       	castu.h	r8
8000da7c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000da80:	58 18       	cp.w	r8,1
8000da82:	c1 00       	breq	8000daa2 <udc_req_std_dev_get_str_desc+0x3a>
8000da84:	e0 89 00 05 	brgt	8000da8e <udc_req_std_dev_get_str_desc+0x26>
8000da88:	58 08       	cp.w	r8,0
8000da8a:	c0 70       	breq	8000da98 <udc_req_std_dev_get_str_desc+0x30>
8000da8c:	c2 28       	rjmp	8000dad0 <udc_req_std_dev_get_str_desc+0x68>
8000da8e:	58 28       	cp.w	r8,2
8000da90:	c1 00       	breq	8000dab0 <udc_req_std_dev_get_str_desc+0x48>
8000da92:	58 38       	cp.w	r8,3
8000da94:	c1 50       	breq	8000dabe <udc_req_std_dev_get_str_desc+0x56>
8000da96:	c1 d8       	rjmp	8000dad0 <udc_req_std_dev_get_str_desc+0x68>
8000da98:	30 4b       	mov	r11,4
8000da9a:	4a ec       	lddpc	r12,8000db50 <udc_req_std_dev_get_str_desc+0xe8>
8000da9c:	f0 1f 00 2e 	mcall	8000db54 <udc_req_std_dev_get_str_desc+0xec>
8000daa0:	c1 a8       	rjmp	8000dad4 <udc_req_std_dev_get_str_desc+0x6c>
8000daa2:	30 78       	mov	r8,7
8000daa4:	ef 68 ff ff 	st.b	r7[-1],r8
8000daa8:	4a c8       	lddpc	r8,8000db58 <udc_req_std_dev_get_str_desc+0xf0>
8000daaa:	ef 48 ff f8 	st.w	r7[-8],r8
8000daae:	c1 38       	rjmp	8000dad4 <udc_req_std_dev_get_str_desc+0x6c>
8000dab0:	30 78       	mov	r8,7
8000dab2:	ef 68 ff ff 	st.b	r7[-1],r8
8000dab6:	4a a8       	lddpc	r8,8000db5c <udc_req_std_dev_get_str_desc+0xf4>
8000dab8:	ef 48 ff f8 	st.w	r7[-8],r8
8000dabc:	c0 c8       	rjmp	8000dad4 <udc_req_std_dev_get_str_desc+0x6c>
8000dabe:	30 c8       	mov	r8,12
8000dac0:	ef 68 ff ff 	st.b	r7[-1],r8
8000dac4:	f0 1f 00 27 	mcall	8000db60 <udc_req_std_dev_get_str_desc+0xf8>
8000dac8:	18 98       	mov	r8,r12
8000daca:	ef 48 ff f8 	st.w	r7[-8],r8
8000dace:	c0 38       	rjmp	8000dad4 <udc_req_std_dev_get_str_desc+0x6c>
8000dad0:	30 08       	mov	r8,0
8000dad2:	c3 88       	rjmp	8000db42 <udc_req_std_dev_get_str_desc+0xda>
8000dad4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dad8:	30 08       	mov	r8,0
8000dada:	f0 09 18 00 	cp.b	r9,r8
8000dade:	c3 10       	breq	8000db40 <udc_req_std_dev_get_str_desc+0xd8>
8000dae0:	30 08       	mov	r8,0
8000dae2:	ef 68 ff f7 	st.b	r7[-9],r8
8000dae6:	c1 88       	rjmp	8000db16 <udc_req_std_dev_get_str_desc+0xae>
8000dae8:	ef 3b ff f7 	ld.ub	r11,r7[-9]
8000daec:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000daf0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000daf4:	f2 08 00 08 	add	r8,r9,r8
8000daf8:	11 88       	ld.ub	r8,r8[0x0]
8000dafa:	5c c8       	swap.bh	r8
8000dafc:	5c 88       	casts.h	r8
8000dafe:	10 99       	mov	r9,r8
8000db00:	49 9a       	lddpc	r10,8000db64 <udc_req_std_dev_get_str_desc+0xfc>
8000db02:	f6 08 15 01 	lsl	r8,r11,0x1
8000db06:	f4 08 00 08 	add	r8,r10,r8
8000db0a:	b0 19       	st.h	r8[0x2],r9
8000db0c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000db10:	2f f8       	sub	r8,-1
8000db12:	ef 68 ff f7 	st.b	r7[-9],r8
8000db16:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000db1a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000db1e:	f0 09 18 00 	cp.b	r9,r8
8000db22:	ce 33       	brcs	8000dae8 <udc_req_std_dev_get_str_desc+0x80>
8000db24:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000db28:	2f f8       	sub	r8,-1
8000db2a:	5c 58       	castu.b	r8
8000db2c:	a1 78       	lsl	r8,0x1
8000db2e:	5c 58       	castu.b	r8
8000db30:	48 d9       	lddpc	r9,8000db64 <udc_req_std_dev_get_str_desc+0xfc>
8000db32:	b2 88       	st.b	r9[0x0],r8
8000db34:	48 c8       	lddpc	r8,8000db64 <udc_req_std_dev_get_str_desc+0xfc>
8000db36:	11 88       	ld.ub	r8,r8[0x0]
8000db38:	10 9b       	mov	r11,r8
8000db3a:	48 bc       	lddpc	r12,8000db64 <udc_req_std_dev_get_str_desc+0xfc>
8000db3c:	f0 1f 00 06 	mcall	8000db54 <udc_req_std_dev_get_str_desc+0xec>
8000db40:	30 18       	mov	r8,1
8000db42:	10 9c       	mov	r12,r8
8000db44:	2f dd       	sub	sp,-12
8000db46:	e3 cd 80 80 	ldm	sp++,r7,pc
8000db4a:	00 00       	add	r0,r0
8000db4c:	00 00       	add	r0,r0
8000db4e:	0d e4       	ld.ub	r4,r6[0x6]
8000db50:	00 00       	add	r0,r0
8000db52:	02 14       	sub	r4,r1
8000db54:	80 00       	ld.sh	r0,r0[0x0]
8000db56:	a1 e0       	*unknown*
8000db58:	00 00       	add	r0,r0
8000db5a:	02 18       	sub	r8,r1
8000db5c:	00 00       	add	r0,r0
8000db5e:	02 20       	rsub	r0,r1
8000db60:	80 00       	ld.sh	r0,r0[0x0]
8000db62:	d4 18       	*unknown*
8000db64:	00 00       	add	r0,r0
8000db66:	02 28       	rsub	r8,r1

8000db68 <udc_req_std_dev_get_descriptor>:
8000db68:	eb cd 40 80 	pushm	r7,lr
8000db6c:	1a 97       	mov	r7,sp
8000db6e:	20 1d       	sub	sp,4
8000db70:	fe f8 02 40 	ld.w	r8,pc[576]
8000db74:	90 18       	ld.sh	r8,r8[0x2]
8000db76:	ef 68 ff ff 	st.b	r7[-1],r8
8000db7a:	fe f8 02 36 	ld.w	r8,pc[566]
8000db7e:	90 18       	ld.sh	r8,r8[0x2]
8000db80:	5c 78       	castu.h	r8
8000db82:	a9 88       	lsr	r8,0x8
8000db84:	5c 88       	casts.h	r8
8000db86:	5c 58       	castu.b	r8
8000db88:	58 38       	cp.w	r8,3
8000db8a:	e0 80 00 f7 	breq	8000dd78 <udc_req_std_dev_get_descriptor+0x210>
8000db8e:	e0 89 00 07 	brgt	8000db9c <udc_req_std_dev_get_descriptor+0x34>
8000db92:	58 18       	cp.w	r8,1
8000db94:	c0 b0       	breq	8000dbaa <udc_req_std_dev_get_descriptor+0x42>
8000db96:	58 28       	cp.w	r8,2
8000db98:	c2 70       	breq	8000dbe6 <udc_req_std_dev_get_descriptor+0x7e>
8000db9a:	cf 88       	rjmp	8000dd8a <udc_req_std_dev_get_descriptor+0x222>
8000db9c:	58 68       	cp.w	r8,6
8000db9e:	e0 80 00 82 	breq	8000dca2 <udc_req_std_dev_get_descriptor+0x13a>
8000dba2:	58 78       	cp.w	r8,7
8000dba4:	e0 80 00 8a 	breq	8000dcb8 <udc_req_std_dev_get_descriptor+0x150>
8000dba8:	cf 18       	rjmp	8000dd8a <udc_req_std_dev_get_descriptor+0x222>
8000dbaa:	f0 1f 00 83 	mcall	8000ddb4 <udc_req_std_dev_get_descriptor+0x24c>
8000dbae:	18 98       	mov	r8,r12
8000dbb0:	ec 18 00 01 	eorl	r8,0x1
8000dbb4:	5c 58       	castu.b	r8
8000dbb6:	c0 d0       	breq	8000dbd0 <udc_req_std_dev_get_descriptor+0x68>
8000dbb8:	fe f8 02 00 	ld.w	r8,pc[512]
8000dbbc:	70 28       	ld.w	r8,r8[0x8]
8000dbbe:	11 88       	ld.ub	r8,r8[0x0]
8000dbc0:	10 99       	mov	r9,r8
8000dbc2:	4f e8       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dbc4:	70 28       	ld.w	r8,r8[0x8]
8000dbc6:	12 9b       	mov	r11,r9
8000dbc8:	10 9c       	mov	r12,r8
8000dbca:	f0 1f 00 7d 	mcall	8000ddbc <udc_req_std_dev_get_descriptor+0x254>
8000dbce:	ce 18       	rjmp	8000dd90 <udc_req_std_dev_get_descriptor+0x228>
8000dbd0:	4f a8       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dbd2:	70 08       	ld.w	r8,r8[0x0]
8000dbd4:	11 88       	ld.ub	r8,r8[0x0]
8000dbd6:	10 99       	mov	r9,r8
8000dbd8:	4f 88       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dbda:	70 08       	ld.w	r8,r8[0x0]
8000dbdc:	12 9b       	mov	r11,r9
8000dbde:	10 9c       	mov	r12,r8
8000dbe0:	f0 1f 00 77 	mcall	8000ddbc <udc_req_std_dev_get_descriptor+0x254>
8000dbe4:	cd 68       	rjmp	8000dd90 <udc_req_std_dev_get_descriptor+0x228>
8000dbe6:	f0 1f 00 74 	mcall	8000ddb4 <udc_req_std_dev_get_descriptor+0x24c>
8000dbea:	18 98       	mov	r8,r12
8000dbec:	58 08       	cp.w	r8,0
8000dbee:	c2 b0       	breq	8000dc44 <udc_req_std_dev_get_descriptor+0xdc>
8000dbf0:	4f 28       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dbf2:	70 28       	ld.w	r8,r8[0x8]
8000dbf4:	f1 38 00 11 	ld.ub	r8,r8[17]
8000dbf8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dbfc:	f0 09 18 00 	cp.b	r9,r8
8000dc00:	c0 33       	brcs	8000dc06 <udc_req_std_dev_get_descriptor+0x9e>
8000dc02:	30 08       	mov	r8,0
8000dc04:	cd 28       	rjmp	8000dda8 <udc_req_std_dev_get_descriptor+0x240>
8000dc06:	4e d8       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dc08:	70 49       	ld.w	r9,r8[0x10]
8000dc0a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dc0e:	a3 78       	lsl	r8,0x3
8000dc10:	f2 08 00 08 	add	r8,r9,r8
8000dc14:	70 08       	ld.w	r8,r8[0x0]
8000dc16:	11 a9       	ld.ub	r9,r8[0x2]
8000dc18:	a9 69       	lsl	r9,0x8
8000dc1a:	11 b8       	ld.ub	r8,r8[0x3]
8000dc1c:	12 48       	or	r8,r9
8000dc1e:	5c 88       	casts.h	r8
8000dc20:	5c 88       	casts.h	r8
8000dc22:	5c c8       	swap.bh	r8
8000dc24:	5c 88       	casts.h	r8
8000dc26:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000dc2a:	4e 48       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dc2c:	70 4a       	ld.w	r10,r8[0x10]
8000dc2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dc32:	a3 78       	lsl	r8,0x3
8000dc34:	f4 08 00 08 	add	r8,r10,r8
8000dc38:	70 08       	ld.w	r8,r8[0x0]
8000dc3a:	12 9b       	mov	r11,r9
8000dc3c:	10 9c       	mov	r12,r8
8000dc3e:	f0 1f 00 60 	mcall	8000ddbc <udc_req_std_dev_get_descriptor+0x254>
8000dc42:	c2 a8       	rjmp	8000dc96 <udc_req_std_dev_get_descriptor+0x12e>
8000dc44:	4d d8       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dc46:	70 08       	ld.w	r8,r8[0x0]
8000dc48:	f1 38 00 11 	ld.ub	r8,r8[17]
8000dc4c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dc50:	f0 09 18 00 	cp.b	r9,r8
8000dc54:	c0 33       	brcs	8000dc5a <udc_req_std_dev_get_descriptor+0xf2>
8000dc56:	30 08       	mov	r8,0
8000dc58:	ca 88       	rjmp	8000dda8 <udc_req_std_dev_get_descriptor+0x240>
8000dc5a:	4d 88       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dc5c:	70 19       	ld.w	r9,r8[0x4]
8000dc5e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dc62:	a3 78       	lsl	r8,0x3
8000dc64:	f2 08 00 08 	add	r8,r9,r8
8000dc68:	70 08       	ld.w	r8,r8[0x0]
8000dc6a:	11 a9       	ld.ub	r9,r8[0x2]
8000dc6c:	a9 69       	lsl	r9,0x8
8000dc6e:	11 b8       	ld.ub	r8,r8[0x3]
8000dc70:	12 48       	or	r8,r9
8000dc72:	5c 88       	casts.h	r8
8000dc74:	5c 88       	casts.h	r8
8000dc76:	5c c8       	swap.bh	r8
8000dc78:	5c 88       	casts.h	r8
8000dc7a:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000dc7e:	4c f8       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dc80:	70 1a       	ld.w	r10,r8[0x4]
8000dc82:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dc86:	a3 78       	lsl	r8,0x3
8000dc88:	f4 08 00 08 	add	r8,r10,r8
8000dc8c:	70 08       	ld.w	r8,r8[0x0]
8000dc8e:	12 9b       	mov	r11,r9
8000dc90:	10 9c       	mov	r12,r8
8000dc92:	f0 1f 00 4b 	mcall	8000ddbc <udc_req_std_dev_get_descriptor+0x254>
8000dc96:	4c 78       	lddpc	r8,8000ddb0 <udc_req_std_dev_get_descriptor+0x248>
8000dc98:	70 28       	ld.w	r8,r8[0x8]
8000dc9a:	10 99       	mov	r9,r8
8000dc9c:	30 28       	mov	r8,2
8000dc9e:	b2 98       	st.b	r9[0x1],r8
8000dca0:	c7 88       	rjmp	8000dd90 <udc_req_std_dev_get_descriptor+0x228>
8000dca2:	4c 68       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dca4:	70 38       	ld.w	r8,r8[0xc]
8000dca6:	11 88       	ld.ub	r8,r8[0x0]
8000dca8:	10 99       	mov	r9,r8
8000dcaa:	4c 48       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dcac:	70 38       	ld.w	r8,r8[0xc]
8000dcae:	12 9b       	mov	r11,r9
8000dcb0:	10 9c       	mov	r12,r8
8000dcb2:	f0 1f 00 43 	mcall	8000ddbc <udc_req_std_dev_get_descriptor+0x254>
8000dcb6:	c6 d8       	rjmp	8000dd90 <udc_req_std_dev_get_descriptor+0x228>
8000dcb8:	f0 1f 00 3f 	mcall	8000ddb4 <udc_req_std_dev_get_descriptor+0x24c>
8000dcbc:	18 98       	mov	r8,r12
8000dcbe:	ec 18 00 01 	eorl	r8,0x1
8000dcc2:	5c 58       	castu.b	r8
8000dcc4:	c2 b0       	breq	8000dd1a <udc_req_std_dev_get_descriptor+0x1b2>
8000dcc6:	4b d8       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dcc8:	70 28       	ld.w	r8,r8[0x8]
8000dcca:	f1 38 00 11 	ld.ub	r8,r8[17]
8000dcce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dcd2:	f0 09 18 00 	cp.b	r9,r8
8000dcd6:	c0 33       	brcs	8000dcdc <udc_req_std_dev_get_descriptor+0x174>
8000dcd8:	30 08       	mov	r8,0
8000dcda:	c6 78       	rjmp	8000dda8 <udc_req_std_dev_get_descriptor+0x240>
8000dcdc:	4b 78       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dcde:	70 49       	ld.w	r9,r8[0x10]
8000dce0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dce4:	a3 78       	lsl	r8,0x3
8000dce6:	f2 08 00 08 	add	r8,r9,r8
8000dcea:	70 08       	ld.w	r8,r8[0x0]
8000dcec:	11 a9       	ld.ub	r9,r8[0x2]
8000dcee:	a9 69       	lsl	r9,0x8
8000dcf0:	11 b8       	ld.ub	r8,r8[0x3]
8000dcf2:	12 48       	or	r8,r9
8000dcf4:	5c 88       	casts.h	r8
8000dcf6:	5c 88       	casts.h	r8
8000dcf8:	5c c8       	swap.bh	r8
8000dcfa:	5c 88       	casts.h	r8
8000dcfc:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000dd00:	4a e8       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dd02:	70 4a       	ld.w	r10,r8[0x10]
8000dd04:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dd08:	a3 78       	lsl	r8,0x3
8000dd0a:	f4 08 00 08 	add	r8,r10,r8
8000dd0e:	70 08       	ld.w	r8,r8[0x0]
8000dd10:	12 9b       	mov	r11,r9
8000dd12:	10 9c       	mov	r12,r8
8000dd14:	f0 1f 00 2a 	mcall	8000ddbc <udc_req_std_dev_get_descriptor+0x254>
8000dd18:	c2 a8       	rjmp	8000dd6c <udc_req_std_dev_get_descriptor+0x204>
8000dd1a:	4a 88       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dd1c:	70 08       	ld.w	r8,r8[0x0]
8000dd1e:	f1 38 00 11 	ld.ub	r8,r8[17]
8000dd22:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dd26:	f0 09 18 00 	cp.b	r9,r8
8000dd2a:	c0 33       	brcs	8000dd30 <udc_req_std_dev_get_descriptor+0x1c8>
8000dd2c:	30 08       	mov	r8,0
8000dd2e:	c3 d8       	rjmp	8000dda8 <udc_req_std_dev_get_descriptor+0x240>
8000dd30:	4a 28       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dd32:	70 19       	ld.w	r9,r8[0x4]
8000dd34:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dd38:	a3 78       	lsl	r8,0x3
8000dd3a:	f2 08 00 08 	add	r8,r9,r8
8000dd3e:	70 08       	ld.w	r8,r8[0x0]
8000dd40:	11 a9       	ld.ub	r9,r8[0x2]
8000dd42:	a9 69       	lsl	r9,0x8
8000dd44:	11 b8       	ld.ub	r8,r8[0x3]
8000dd46:	12 48       	or	r8,r9
8000dd48:	5c 88       	casts.h	r8
8000dd4a:	5c 88       	casts.h	r8
8000dd4c:	5c c8       	swap.bh	r8
8000dd4e:	5c 88       	casts.h	r8
8000dd50:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000dd54:	49 98       	lddpc	r8,8000ddb8 <udc_req_std_dev_get_descriptor+0x250>
8000dd56:	70 1a       	ld.w	r10,r8[0x4]
8000dd58:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dd5c:	a3 78       	lsl	r8,0x3
8000dd5e:	f4 08 00 08 	add	r8,r10,r8
8000dd62:	70 08       	ld.w	r8,r8[0x0]
8000dd64:	12 9b       	mov	r11,r9
8000dd66:	10 9c       	mov	r12,r8
8000dd68:	f0 1f 00 15 	mcall	8000ddbc <udc_req_std_dev_get_descriptor+0x254>
8000dd6c:	49 18       	lddpc	r8,8000ddb0 <udc_req_std_dev_get_descriptor+0x248>
8000dd6e:	70 28       	ld.w	r8,r8[0x8]
8000dd70:	10 99       	mov	r9,r8
8000dd72:	30 78       	mov	r8,7
8000dd74:	b2 98       	st.b	r9[0x1],r8
8000dd76:	c0 d8       	rjmp	8000dd90 <udc_req_std_dev_get_descriptor+0x228>
8000dd78:	f0 1f 00 12 	mcall	8000ddc0 <udc_req_std_dev_get_descriptor+0x258>
8000dd7c:	18 98       	mov	r8,r12
8000dd7e:	ec 18 00 01 	eorl	r8,0x1
8000dd82:	5c 58       	castu.b	r8
8000dd84:	c0 50       	breq	8000dd8e <udc_req_std_dev_get_descriptor+0x226>
8000dd86:	30 08       	mov	r8,0
8000dd88:	c1 08       	rjmp	8000dda8 <udc_req_std_dev_get_descriptor+0x240>
8000dd8a:	30 08       	mov	r8,0
8000dd8c:	c0 e8       	rjmp	8000dda8 <udc_req_std_dev_get_descriptor+0x240>
8000dd8e:	d7 03       	nop
8000dd90:	48 88       	lddpc	r8,8000ddb0 <udc_req_std_dev_get_descriptor+0x248>
8000dd92:	90 39       	ld.sh	r9,r8[0x6]
8000dd94:	48 78       	lddpc	r8,8000ddb0 <udc_req_std_dev_get_descriptor+0x248>
8000dd96:	90 68       	ld.sh	r8,r8[0xc]
8000dd98:	f0 09 19 00 	cp.h	r9,r8
8000dd9c:	c0 52       	brcc	8000dda6 <udc_req_std_dev_get_descriptor+0x23e>
8000dd9e:	48 58       	lddpc	r8,8000ddb0 <udc_req_std_dev_get_descriptor+0x248>
8000dda0:	90 38       	ld.sh	r8,r8[0x6]
8000dda2:	48 49       	lddpc	r9,8000ddb0 <udc_req_std_dev_get_descriptor+0x248>
8000dda4:	b2 68       	st.h	r9[0xc],r8
8000dda6:	30 18       	mov	r8,1
8000dda8:	10 9c       	mov	r12,r8
8000ddaa:	2f fd       	sub	sp,-4
8000ddac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ddb0:	00 00       	add	r0,r0
8000ddb2:	0d e4       	ld.ub	r4,r6[0x6]
8000ddb4:	80 00       	ld.sh	r0,r0[0x0]
8000ddb6:	a1 44       	asr	r4,0x0
8000ddb8:	00 00       	add	r0,r0
8000ddba:	02 00       	add	r0,r1
8000ddbc:	80 00       	ld.sh	r0,r0[0x0]
8000ddbe:	a1 e0       	*unknown*
8000ddc0:	80 00       	ld.sh	r0,r0[0x0]
8000ddc2:	da 68       	*unknown*

8000ddc4 <udc_req_std_dev_get_configuration>:
8000ddc4:	eb cd 40 80 	pushm	r7,lr
8000ddc8:	1a 97       	mov	r7,sp
8000ddca:	48 98       	lddpc	r8,8000ddec <udc_req_std_dev_get_configuration+0x28>
8000ddcc:	90 39       	ld.sh	r9,r8[0x6]
8000ddce:	30 18       	mov	r8,1
8000ddd0:	f0 09 19 00 	cp.h	r9,r8
8000ddd4:	c0 30       	breq	8000ddda <udc_req_std_dev_get_configuration+0x16>
8000ddd6:	30 08       	mov	r8,0
8000ddd8:	c0 68       	rjmp	8000dde4 <udc_req_std_dev_get_configuration+0x20>
8000ddda:	30 1b       	mov	r11,1
8000dddc:	48 5c       	lddpc	r12,8000ddf0 <udc_req_std_dev_get_configuration+0x2c>
8000ddde:	f0 1f 00 06 	mcall	8000ddf4 <udc_req_std_dev_get_configuration+0x30>
8000dde2:	30 18       	mov	r8,1
8000dde4:	10 9c       	mov	r12,r8
8000dde6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ddea:	00 00       	add	r0,r0
8000ddec:	00 00       	add	r0,r0
8000ddee:	0d e4       	ld.ub	r4,r6[0x6]
8000ddf0:	00 00       	add	r0,r0
8000ddf2:	08 f2       	st.b	--r4,r2
8000ddf4:	80 00       	ld.sh	r0,r0[0x0]
8000ddf6:	a1 e0       	*unknown*

8000ddf8 <udc_req_std_dev_set_configuration>:
8000ddf8:	eb cd 40 80 	pushm	r7,lr
8000ddfc:	1a 97       	mov	r7,sp
8000ddfe:	20 1d       	sub	sp,4
8000de00:	4b c8       	lddpc	r8,8000def0 <udc_req_std_dev_set_configuration+0xf8>
8000de02:	90 38       	ld.sh	r8,r8[0x6]
8000de04:	58 08       	cp.w	r8,0
8000de06:	c0 30       	breq	8000de0c <udc_req_std_dev_set_configuration+0x14>
8000de08:	30 08       	mov	r8,0
8000de0a:	c6 f8       	rjmp	8000dee8 <udc_req_std_dev_set_configuration+0xf0>
8000de0c:	f0 1f 00 3a 	mcall	8000def4 <udc_req_std_dev_set_configuration+0xfc>
8000de10:	18 98       	mov	r8,r12
8000de12:	58 08       	cp.w	r8,0
8000de14:	c0 31       	brne	8000de1a <udc_req_std_dev_set_configuration+0x22>
8000de16:	30 08       	mov	r8,0
8000de18:	c6 88       	rjmp	8000dee8 <udc_req_std_dev_set_configuration+0xf0>
8000de1a:	f0 1f 00 38 	mcall	8000def8 <udc_req_std_dev_set_configuration+0x100>
8000de1e:	18 98       	mov	r8,r12
8000de20:	58 08       	cp.w	r8,0
8000de22:	c0 f0       	breq	8000de40 <udc_req_std_dev_set_configuration+0x48>
8000de24:	4b 38       	lddpc	r8,8000def0 <udc_req_std_dev_set_configuration+0xf8>
8000de26:	90 18       	ld.sh	r8,r8[0x2]
8000de28:	5c 78       	castu.h	r8
8000de2a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000de2e:	4b 48       	lddpc	r8,8000defc <udc_req_std_dev_set_configuration+0x104>
8000de30:	70 28       	ld.w	r8,r8[0x8]
8000de32:	f1 38 00 11 	ld.ub	r8,r8[17]
8000de36:	10 39       	cp.w	r9,r8
8000de38:	e0 8a 00 12 	brle	8000de5c <udc_req_std_dev_set_configuration+0x64>
8000de3c:	30 08       	mov	r8,0
8000de3e:	c5 58       	rjmp	8000dee8 <udc_req_std_dev_set_configuration+0xf0>
8000de40:	4a c8       	lddpc	r8,8000def0 <udc_req_std_dev_set_configuration+0xf8>
8000de42:	90 18       	ld.sh	r8,r8[0x2]
8000de44:	5c 78       	castu.h	r8
8000de46:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000de4a:	4a d8       	lddpc	r8,8000defc <udc_req_std_dev_set_configuration+0x104>
8000de4c:	70 08       	ld.w	r8,r8[0x0]
8000de4e:	f1 38 00 11 	ld.ub	r8,r8[17]
8000de52:	10 39       	cp.w	r9,r8
8000de54:	e0 8a 00 05 	brle	8000de5e <udc_req_std_dev_set_configuration+0x66>
8000de58:	30 08       	mov	r8,0
8000de5a:	c4 78       	rjmp	8000dee8 <udc_req_std_dev_set_configuration+0xf0>
8000de5c:	d7 03       	nop
8000de5e:	f0 1f 00 29 	mcall	8000df00 <udc_req_std_dev_set_configuration+0x108>
8000de62:	4a 48       	lddpc	r8,8000def0 <udc_req_std_dev_set_configuration+0xf8>
8000de64:	90 18       	ld.sh	r8,r8[0x2]
8000de66:	5c 58       	castu.b	r8
8000de68:	4a 79       	lddpc	r9,8000df04 <udc_req_std_dev_set_configuration+0x10c>
8000de6a:	b2 88       	st.b	r9[0x0],r8
8000de6c:	4a 68       	lddpc	r8,8000df04 <udc_req_std_dev_set_configuration+0x10c>
8000de6e:	11 88       	ld.ub	r8,r8[0x0]
8000de70:	58 08       	cp.w	r8,0
8000de72:	c0 31       	brne	8000de78 <udc_req_std_dev_set_configuration+0x80>
8000de74:	30 18       	mov	r8,1
8000de76:	c3 98       	rjmp	8000dee8 <udc_req_std_dev_set_configuration+0xf0>
8000de78:	f0 1f 00 20 	mcall	8000def8 <udc_req_std_dev_set_configuration+0x100>
8000de7c:	18 98       	mov	r8,r12
8000de7e:	58 08       	cp.w	r8,0
8000de80:	c0 b0       	breq	8000de96 <udc_req_std_dev_set_configuration+0x9e>
8000de82:	49 f8       	lddpc	r8,8000defc <udc_req_std_dev_set_configuration+0x104>
8000de84:	70 49       	ld.w	r9,r8[0x10]
8000de86:	4a 08       	lddpc	r8,8000df04 <udc_req_std_dev_set_configuration+0x10c>
8000de88:	11 88       	ld.ub	r8,r8[0x0]
8000de8a:	20 18       	sub	r8,1
8000de8c:	a3 78       	lsl	r8,0x3
8000de8e:	10 09       	add	r9,r8
8000de90:	49 e8       	lddpc	r8,8000df08 <udc_req_std_dev_set_configuration+0x110>
8000de92:	91 09       	st.w	r8[0x0],r9
8000de94:	c0 a8       	rjmp	8000dea8 <udc_req_std_dev_set_configuration+0xb0>
8000de96:	49 a8       	lddpc	r8,8000defc <udc_req_std_dev_set_configuration+0x104>
8000de98:	70 19       	ld.w	r9,r8[0x4]
8000de9a:	49 b8       	lddpc	r8,8000df04 <udc_req_std_dev_set_configuration+0x10c>
8000de9c:	11 88       	ld.ub	r8,r8[0x0]
8000de9e:	20 18       	sub	r8,1
8000dea0:	a3 78       	lsl	r8,0x3
8000dea2:	10 09       	add	r9,r8
8000dea4:	49 98       	lddpc	r8,8000df08 <udc_req_std_dev_set_configuration+0x110>
8000dea6:	91 09       	st.w	r8[0x0],r9
8000dea8:	30 08       	mov	r8,0
8000deaa:	ef 68 ff ff 	st.b	r7[-1],r8
8000deae:	c1 38       	rjmp	8000ded4 <udc_req_std_dev_set_configuration+0xdc>
8000deb0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000deb4:	30 0b       	mov	r11,0
8000deb6:	10 9c       	mov	r12,r8
8000deb8:	f0 1f 00 15 	mcall	8000df0c <udc_req_std_dev_set_configuration+0x114>
8000debc:	18 98       	mov	r8,r12
8000debe:	ec 18 00 01 	eorl	r8,0x1
8000dec2:	5c 58       	castu.b	r8
8000dec4:	c0 30       	breq	8000deca <udc_req_std_dev_set_configuration+0xd2>
8000dec6:	30 08       	mov	r8,0
8000dec8:	c1 08       	rjmp	8000dee8 <udc_req_std_dev_set_configuration+0xf0>
8000deca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dece:	2f f8       	sub	r8,-1
8000ded0:	ef 68 ff ff 	st.b	r7[-1],r8
8000ded4:	48 d8       	lddpc	r8,8000df08 <udc_req_std_dev_set_configuration+0x110>
8000ded6:	70 08       	ld.w	r8,r8[0x0]
8000ded8:	70 08       	ld.w	r8,r8[0x0]
8000deda:	11 c8       	ld.ub	r8,r8[0x4]
8000dedc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dee0:	f0 09 18 00 	cp.b	r9,r8
8000dee4:	ce 63       	brcs	8000deb0 <udc_req_std_dev_set_configuration+0xb8>
8000dee6:	30 18       	mov	r8,1
8000dee8:	10 9c       	mov	r12,r8
8000deea:	2f fd       	sub	sp,-4
8000deec:	e3 cd 80 80 	ldm	sp++,r7,pc
8000def0:	00 00       	add	r0,r0
8000def2:	0d e4       	ld.ub	r4,r6[0x6]
8000def4:	80 00       	ld.sh	r0,r0[0x0]
8000def6:	a1 ae       	sbr	lr,0x0
8000def8:	80 00       	ld.sh	r0,r0[0x0]
8000defa:	a1 44       	asr	r4,0x0
8000defc:	00 00       	add	r0,r0
8000defe:	02 00       	add	r0,r1
8000df00:	80 00       	ld.sh	r0,r0[0x0]
8000df02:	d7 38       	*unknown*
8000df04:	00 00       	add	r0,r0
8000df06:	08 f2       	st.b	--r4,r2
8000df08:	00 00       	add	r0,r0
8000df0a:	08 f4       	st.b	--r4,r4
8000df0c:	80 00       	ld.sh	r0,r0[0x0]
8000df0e:	d6 5c       	*unknown*

8000df10 <udc_req_std_iface_get_setting>:
8000df10:	eb cd 40 80 	pushm	r7,lr
8000df14:	1a 97       	mov	r7,sp
8000df16:	20 2d       	sub	sp,8
8000df18:	4a 38       	lddpc	r8,8000dfa4 <udc_req_std_iface_get_setting+0x94>
8000df1a:	90 39       	ld.sh	r9,r8[0x6]
8000df1c:	30 18       	mov	r8,1
8000df1e:	f0 09 19 00 	cp.h	r9,r8
8000df22:	c0 30       	breq	8000df28 <udc_req_std_iface_get_setting+0x18>
8000df24:	30 08       	mov	r8,0
8000df26:	c3 a8       	rjmp	8000df9a <udc_req_std_iface_get_setting+0x8a>
8000df28:	4a 08       	lddpc	r8,8000dfa8 <udc_req_std_iface_get_setting+0x98>
8000df2a:	11 88       	ld.ub	r8,r8[0x0]
8000df2c:	58 08       	cp.w	r8,0
8000df2e:	c0 31       	brne	8000df34 <udc_req_std_iface_get_setting+0x24>
8000df30:	30 08       	mov	r8,0
8000df32:	c3 48       	rjmp	8000df9a <udc_req_std_iface_get_setting+0x8a>
8000df34:	49 c8       	lddpc	r8,8000dfa4 <udc_req_std_iface_get_setting+0x94>
8000df36:	90 28       	ld.sh	r8,r8[0x4]
8000df38:	ef 68 ff fb 	st.b	r7[-5],r8
8000df3c:	49 c8       	lddpc	r8,8000dfac <udc_req_std_iface_get_setting+0x9c>
8000df3e:	70 08       	ld.w	r8,r8[0x0]
8000df40:	70 08       	ld.w	r8,r8[0x0]
8000df42:	11 c8       	ld.ub	r8,r8[0x4]
8000df44:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000df48:	f0 09 18 00 	cp.b	r9,r8
8000df4c:	c0 33       	brcs	8000df52 <udc_req_std_iface_get_setting+0x42>
8000df4e:	30 08       	mov	r8,0
8000df50:	c2 58       	rjmp	8000df9a <udc_req_std_iface_get_setting+0x8a>
8000df52:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000df56:	30 0b       	mov	r11,0
8000df58:	10 9c       	mov	r12,r8
8000df5a:	f0 1f 00 16 	mcall	8000dfb0 <udc_req_std_iface_get_setting+0xa0>
8000df5e:	18 98       	mov	r8,r12
8000df60:	ec 18 00 01 	eorl	r8,0x1
8000df64:	5c 58       	castu.b	r8
8000df66:	c0 30       	breq	8000df6c <udc_req_std_iface_get_setting+0x5c>
8000df68:	30 08       	mov	r8,0
8000df6a:	c1 88       	rjmp	8000df9a <udc_req_std_iface_get_setting+0x8a>
8000df6c:	49 08       	lddpc	r8,8000dfac <udc_req_std_iface_get_setting+0x9c>
8000df6e:	70 08       	ld.w	r8,r8[0x0]
8000df70:	70 19       	ld.w	r9,r8[0x4]
8000df72:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000df76:	a3 68       	lsl	r8,0x2
8000df78:	f2 08 00 08 	add	r8,r9,r8
8000df7c:	70 08       	ld.w	r8,r8[0x0]
8000df7e:	ef 48 ff fc 	st.w	r7[-4],r8
8000df82:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df86:	70 38       	ld.w	r8,r8[0xc]
8000df88:	5d 18       	icall	r8
8000df8a:	18 98       	mov	r8,r12
8000df8c:	48 a9       	lddpc	r9,8000dfb4 <udc_req_std_iface_get_setting+0xa4>
8000df8e:	b2 88       	st.b	r9[0x0],r8
8000df90:	30 1b       	mov	r11,1
8000df92:	48 9c       	lddpc	r12,8000dfb4 <udc_req_std_iface_get_setting+0xa4>
8000df94:	f0 1f 00 09 	mcall	8000dfb8 <udc_req_std_iface_get_setting+0xa8>
8000df98:	30 18       	mov	r8,1
8000df9a:	10 9c       	mov	r12,r8
8000df9c:	2f ed       	sub	sp,-8
8000df9e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dfa2:	00 00       	add	r0,r0
8000dfa4:	00 00       	add	r0,r0
8000dfa6:	0d e4       	ld.ub	r4,r6[0x6]
8000dfa8:	00 00       	add	r0,r0
8000dfaa:	08 f2       	st.b	--r4,r2
8000dfac:	00 00       	add	r0,r0
8000dfae:	08 f4       	st.b	--r4,r4
8000dfb0:	80 00       	ld.sh	r0,r0[0x0]
8000dfb2:	d4 e8       	*unknown*
8000dfb4:	00 00       	add	r0,r0
8000dfb6:	08 fc       	st.b	--r4,r12
8000dfb8:	80 00       	ld.sh	r0,r0[0x0]
8000dfba:	a1 e0       	*unknown*

8000dfbc <udc_req_std_iface_set_setting>:
8000dfbc:	eb cd 40 80 	pushm	r7,lr
8000dfc0:	1a 97       	mov	r7,sp
8000dfc2:	20 1d       	sub	sp,4
8000dfc4:	49 78       	lddpc	r8,8000e020 <udc_req_std_iface_set_setting+0x64>
8000dfc6:	90 38       	ld.sh	r8,r8[0x6]
8000dfc8:	58 08       	cp.w	r8,0
8000dfca:	c0 30       	breq	8000dfd0 <udc_req_std_iface_set_setting+0x14>
8000dfcc:	30 08       	mov	r8,0
8000dfce:	c2 48       	rjmp	8000e016 <udc_req_std_iface_set_setting+0x5a>
8000dfd0:	49 58       	lddpc	r8,8000e024 <udc_req_std_iface_set_setting+0x68>
8000dfd2:	11 88       	ld.ub	r8,r8[0x0]
8000dfd4:	58 08       	cp.w	r8,0
8000dfd6:	c0 31       	brne	8000dfdc <udc_req_std_iface_set_setting+0x20>
8000dfd8:	30 08       	mov	r8,0
8000dfda:	c1 e8       	rjmp	8000e016 <udc_req_std_iface_set_setting+0x5a>
8000dfdc:	49 18       	lddpc	r8,8000e020 <udc_req_std_iface_set_setting+0x64>
8000dfde:	90 28       	ld.sh	r8,r8[0x4]
8000dfe0:	ef 68 ff fe 	st.b	r7[-2],r8
8000dfe4:	48 f8       	lddpc	r8,8000e020 <udc_req_std_iface_set_setting+0x64>
8000dfe6:	90 18       	ld.sh	r8,r8[0x2]
8000dfe8:	ef 68 ff ff 	st.b	r7[-1],r8
8000dfec:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000dff0:	10 9c       	mov	r12,r8
8000dff2:	f0 1f 00 0e 	mcall	8000e028 <udc_req_std_iface_set_setting+0x6c>
8000dff6:	18 98       	mov	r8,r12
8000dff8:	ec 18 00 01 	eorl	r8,0x1
8000dffc:	5c 58       	castu.b	r8
8000dffe:	c0 30       	breq	8000e004 <udc_req_std_iface_set_setting+0x48>
8000e000:	30 08       	mov	r8,0
8000e002:	c0 a8       	rjmp	8000e016 <udc_req_std_iface_set_setting+0x5a>
8000e004:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000e008:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e00c:	12 9b       	mov	r11,r9
8000e00e:	10 9c       	mov	r12,r8
8000e010:	f0 1f 00 07 	mcall	8000e02c <udc_req_std_iface_set_setting+0x70>
8000e014:	18 98       	mov	r8,r12
8000e016:	10 9c       	mov	r12,r8
8000e018:	2f fd       	sub	sp,-4
8000e01a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e01e:	00 00       	add	r0,r0
8000e020:	00 00       	add	r0,r0
8000e022:	0d e4       	ld.ub	r4,r6[0x6]
8000e024:	00 00       	add	r0,r0
8000e026:	08 f2       	st.b	--r4,r2
8000e028:	80 00       	ld.sh	r0,r0[0x0]
8000e02a:	d5 a0       	acall	0x168
8000e02c:	80 00       	ld.sh	r0,r0[0x0]
8000e02e:	d6 5c       	*unknown*

8000e030 <udc_reqstd>:
8000e030:	eb cd 40 80 	pushm	r7,lr
8000e034:	1a 97       	mov	r7,sp
8000e036:	4c 78       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e038:	11 88       	ld.ub	r8,r8[0x0]
8000e03a:	10 99       	mov	r9,r8
8000e03c:	30 08       	mov	r8,0
8000e03e:	f0 09 18 00 	cp.b	r9,r8
8000e042:	c3 c4       	brge	8000e0ba <udc_reqstd+0x8a>
8000e044:	4c 38       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e046:	90 38       	ld.sh	r8,r8[0x6]
8000e048:	58 08       	cp.w	r8,0
8000e04a:	c0 31       	brne	8000e050 <udc_reqstd+0x20>
8000e04c:	30 08       	mov	r8,0
8000e04e:	c7 e8       	rjmp	8000e14a <udc_reqstd+0x11a>
8000e050:	4c 08       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e052:	11 88       	ld.ub	r8,r8[0x0]
8000e054:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e058:	c1 51       	brne	8000e082 <udc_reqstd+0x52>
8000e05a:	4b e8       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e05c:	11 98       	ld.ub	r8,r8[0x1]
8000e05e:	58 68       	cp.w	r8,6
8000e060:	c0 90       	breq	8000e072 <udc_reqstd+0x42>
8000e062:	58 88       	cp.w	r8,8
8000e064:	c0 b0       	breq	8000e07a <udc_reqstd+0x4a>
8000e066:	58 08       	cp.w	r8,0
8000e068:	c0 d1       	brne	8000e082 <udc_reqstd+0x52>
8000e06a:	f0 1f 00 3b 	mcall	8000e154 <udc_reqstd+0x124>
8000e06e:	18 98       	mov	r8,r12
8000e070:	c6 d8       	rjmp	8000e14a <udc_reqstd+0x11a>
8000e072:	f0 1f 00 3a 	mcall	8000e158 <udc_reqstd+0x128>
8000e076:	18 98       	mov	r8,r12
8000e078:	c6 98       	rjmp	8000e14a <udc_reqstd+0x11a>
8000e07a:	f0 1f 00 39 	mcall	8000e15c <udc_reqstd+0x12c>
8000e07e:	18 98       	mov	r8,r12
8000e080:	c6 58       	rjmp	8000e14a <udc_reqstd+0x11a>
8000e082:	4b 48       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e084:	11 88       	ld.ub	r8,r8[0x0]
8000e086:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e08a:	58 18       	cp.w	r8,1
8000e08c:	c0 91       	brne	8000e09e <udc_reqstd+0x6e>
8000e08e:	4b 18       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e090:	11 98       	ld.ub	r8,r8[0x1]
8000e092:	58 a8       	cp.w	r8,10
8000e094:	c0 51       	brne	8000e09e <udc_reqstd+0x6e>
8000e096:	f0 1f 00 33 	mcall	8000e160 <udc_reqstd+0x130>
8000e09a:	18 98       	mov	r8,r12
8000e09c:	c5 78       	rjmp	8000e14a <udc_reqstd+0x11a>
8000e09e:	4a d8       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e0a0:	11 88       	ld.ub	r8,r8[0x0]
8000e0a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e0a6:	58 28       	cp.w	r8,2
8000e0a8:	c4 f1       	brne	8000e146 <udc_reqstd+0x116>
8000e0aa:	4a a8       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e0ac:	11 98       	ld.ub	r8,r8[0x1]
8000e0ae:	58 08       	cp.w	r8,0
8000e0b0:	c4 c1       	brne	8000e148 <udc_reqstd+0x118>
8000e0b2:	f0 1f 00 2d 	mcall	8000e164 <udc_reqstd+0x134>
8000e0b6:	18 98       	mov	r8,r12
8000e0b8:	c4 98       	rjmp	8000e14a <udc_reqstd+0x11a>
8000e0ba:	4a 68       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e0bc:	11 88       	ld.ub	r8,r8[0x0]
8000e0be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e0c2:	c1 f1       	brne	8000e100 <udc_reqstd+0xd0>
8000e0c4:	4a 38       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e0c6:	11 98       	ld.ub	r8,r8[0x1]
8000e0c8:	58 38       	cp.w	r8,3
8000e0ca:	c1 30       	breq	8000e0f0 <udc_reqstd+0xc0>
8000e0cc:	e0 89 00 05 	brgt	8000e0d6 <udc_reqstd+0xa6>
8000e0d0:	58 18       	cp.w	r8,1
8000e0d2:	c0 b0       	breq	8000e0e8 <udc_reqstd+0xb8>
8000e0d4:	c1 68       	rjmp	8000e100 <udc_reqstd+0xd0>
8000e0d6:	58 58       	cp.w	r8,5
8000e0d8:	c0 40       	breq	8000e0e0 <udc_reqstd+0xb0>
8000e0da:	58 98       	cp.w	r8,9
8000e0dc:	c0 e0       	breq	8000e0f8 <udc_reqstd+0xc8>
8000e0de:	c1 18       	rjmp	8000e100 <udc_reqstd+0xd0>
8000e0e0:	f0 1f 00 22 	mcall	8000e168 <udc_reqstd+0x138>
8000e0e4:	18 98       	mov	r8,r12
8000e0e6:	c3 28       	rjmp	8000e14a <udc_reqstd+0x11a>
8000e0e8:	f0 1f 00 21 	mcall	8000e16c <udc_reqstd+0x13c>
8000e0ec:	18 98       	mov	r8,r12
8000e0ee:	c2 e8       	rjmp	8000e14a <udc_reqstd+0x11a>
8000e0f0:	f0 1f 00 20 	mcall	8000e170 <udc_reqstd+0x140>
8000e0f4:	18 98       	mov	r8,r12
8000e0f6:	c2 a8       	rjmp	8000e14a <udc_reqstd+0x11a>
8000e0f8:	f0 1f 00 1f 	mcall	8000e174 <udc_reqstd+0x144>
8000e0fc:	18 98       	mov	r8,r12
8000e0fe:	c2 68       	rjmp	8000e14a <udc_reqstd+0x11a>
8000e100:	49 48       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e102:	11 88       	ld.ub	r8,r8[0x0]
8000e104:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e108:	58 18       	cp.w	r8,1
8000e10a:	c0 91       	brne	8000e11c <udc_reqstd+0xec>
8000e10c:	49 18       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e10e:	11 98       	ld.ub	r8,r8[0x1]
8000e110:	58 b8       	cp.w	r8,11
8000e112:	c0 51       	brne	8000e11c <udc_reqstd+0xec>
8000e114:	f0 1f 00 19 	mcall	8000e178 <udc_reqstd+0x148>
8000e118:	18 98       	mov	r8,r12
8000e11a:	c1 88       	rjmp	8000e14a <udc_reqstd+0x11a>
8000e11c:	48 d8       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e11e:	11 88       	ld.ub	r8,r8[0x0]
8000e120:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e124:	58 28       	cp.w	r8,2
8000e126:	c1 11       	brne	8000e148 <udc_reqstd+0x118>
8000e128:	48 a8       	lddpc	r8,8000e150 <udc_reqstd+0x120>
8000e12a:	11 98       	ld.ub	r8,r8[0x1]
8000e12c:	58 18       	cp.w	r8,1
8000e12e:	c0 40       	breq	8000e136 <udc_reqstd+0x106>
8000e130:	58 38       	cp.w	r8,3
8000e132:	c0 60       	breq	8000e13e <udc_reqstd+0x10e>
8000e134:	c0 a8       	rjmp	8000e148 <udc_reqstd+0x118>
8000e136:	f0 1f 00 12 	mcall	8000e17c <udc_reqstd+0x14c>
8000e13a:	18 98       	mov	r8,r12
8000e13c:	c0 78       	rjmp	8000e14a <udc_reqstd+0x11a>
8000e13e:	f0 1f 00 11 	mcall	8000e180 <udc_reqstd+0x150>
8000e142:	18 98       	mov	r8,r12
8000e144:	c0 38       	rjmp	8000e14a <udc_reqstd+0x11a>
8000e146:	d7 03       	nop
8000e148:	30 08       	mov	r8,0
8000e14a:	10 9c       	mov	r12,r8
8000e14c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e150:	00 00       	add	r0,r0
8000e152:	0d e4       	ld.ub	r4,r6[0x6]
8000e154:	80 00       	ld.sh	r0,r0[0x0]
8000e156:	d8 0c       	*unknown*
8000e158:	80 00       	ld.sh	r0,r0[0x0]
8000e15a:	db 68       	*unknown*
8000e15c:	80 00       	ld.sh	r0,r0[0x0]
8000e15e:	dd c4       	*unknown*
8000e160:	80 00       	ld.sh	r0,r0[0x0]
8000e162:	df 10       	acall	0x3c4
8000e164:	80 00       	ld.sh	r0,r0[0x0]
8000e166:	d8 40       	acall	0x210
8000e168:	80 00       	ld.sh	r0,r0[0x0]
8000e16a:	da 40       	acall	0x290
8000e16c:	80 00       	ld.sh	r0,r0[0x0]
8000e16e:	d8 98       	*unknown*
8000e170:	80 00       	ld.sh	r0,r0[0x0]
8000e172:	d9 14       	*unknown*
8000e174:	80 00       	ld.sh	r0,r0[0x0]
8000e176:	dd f8       	*unknown*
8000e178:	80 00       	ld.sh	r0,r0[0x0]
8000e17a:	df bc       	*unknown*
8000e17c:	80 00       	ld.sh	r0,r0[0x0]
8000e17e:	d8 d8       	*unknown*
8000e180:	80 00       	ld.sh	r0,r0[0x0]
8000e182:	d9 d0       	acall	0x274

8000e184 <udc_req_iface>:
8000e184:	eb cd 40 80 	pushm	r7,lr
8000e188:	1a 97       	mov	r7,sp
8000e18a:	20 2d       	sub	sp,8
8000e18c:	4a 58       	lddpc	r8,8000e220 <udc_req_iface+0x9c>
8000e18e:	11 88       	ld.ub	r8,r8[0x0]
8000e190:	58 08       	cp.w	r8,0
8000e192:	c0 31       	brne	8000e198 <udc_req_iface+0x14>
8000e194:	30 08       	mov	r8,0
8000e196:	c4 08       	rjmp	8000e216 <udc_req_iface+0x92>
8000e198:	4a 38       	lddpc	r8,8000e224 <udc_req_iface+0xa0>
8000e19a:	90 28       	ld.sh	r8,r8[0x4]
8000e19c:	ef 68 ff fb 	st.b	r7[-5],r8
8000e1a0:	4a 28       	lddpc	r8,8000e228 <udc_req_iface+0xa4>
8000e1a2:	70 08       	ld.w	r8,r8[0x0]
8000e1a4:	70 08       	ld.w	r8,r8[0x0]
8000e1a6:	11 c8       	ld.ub	r8,r8[0x4]
8000e1a8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000e1ac:	f0 09 18 00 	cp.b	r9,r8
8000e1b0:	c0 33       	brcs	8000e1b6 <udc_req_iface+0x32>
8000e1b2:	30 08       	mov	r8,0
8000e1b4:	c3 18       	rjmp	8000e216 <udc_req_iface+0x92>
8000e1b6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000e1ba:	30 0b       	mov	r11,0
8000e1bc:	10 9c       	mov	r12,r8
8000e1be:	f0 1f 00 1c 	mcall	8000e22c <udc_req_iface+0xa8>
8000e1c2:	18 98       	mov	r8,r12
8000e1c4:	ec 18 00 01 	eorl	r8,0x1
8000e1c8:	5c 58       	castu.b	r8
8000e1ca:	c0 30       	breq	8000e1d0 <udc_req_iface+0x4c>
8000e1cc:	30 08       	mov	r8,0
8000e1ce:	c2 48       	rjmp	8000e216 <udc_req_iface+0x92>
8000e1d0:	49 68       	lddpc	r8,8000e228 <udc_req_iface+0xa4>
8000e1d2:	70 08       	ld.w	r8,r8[0x0]
8000e1d4:	70 19       	ld.w	r9,r8[0x4]
8000e1d6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000e1da:	a3 68       	lsl	r8,0x2
8000e1dc:	f2 08 00 08 	add	r8,r9,r8
8000e1e0:	70 08       	ld.w	r8,r8[0x0]
8000e1e2:	ef 48 ff fc 	st.w	r7[-4],r8
8000e1e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e1ea:	70 38       	ld.w	r8,r8[0xc]
8000e1ec:	5d 18       	icall	r8
8000e1ee:	18 98       	mov	r8,r12
8000e1f0:	10 99       	mov	r9,r8
8000e1f2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000e1f6:	12 9b       	mov	r11,r9
8000e1f8:	10 9c       	mov	r12,r8
8000e1fa:	f0 1f 00 0d 	mcall	8000e22c <udc_req_iface+0xa8>
8000e1fe:	18 98       	mov	r8,r12
8000e200:	ec 18 00 01 	eorl	r8,0x1
8000e204:	5c 58       	castu.b	r8
8000e206:	c0 30       	breq	8000e20c <udc_req_iface+0x88>
8000e208:	30 08       	mov	r8,0
8000e20a:	c0 68       	rjmp	8000e216 <udc_req_iface+0x92>
8000e20c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e210:	70 28       	ld.w	r8,r8[0x8]
8000e212:	5d 18       	icall	r8
8000e214:	18 98       	mov	r8,r12
8000e216:	10 9c       	mov	r12,r8
8000e218:	2f ed       	sub	sp,-8
8000e21a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e21e:	00 00       	add	r0,r0
8000e220:	00 00       	add	r0,r0
8000e222:	08 f2       	st.b	--r4,r2
8000e224:	00 00       	add	r0,r0
8000e226:	0d e4       	ld.ub	r4,r6[0x6]
8000e228:	00 00       	add	r0,r0
8000e22a:	08 f4       	st.b	--r4,r4
8000e22c:	80 00       	ld.sh	r0,r0[0x0]
8000e22e:	d4 e8       	*unknown*

8000e230 <udc_process_setup>:
8000e230:	eb cd 40 80 	pushm	r7,lr
8000e234:	1a 97       	mov	r7,sp
8000e236:	49 a9       	lddpc	r9,8000e29c <udc_process_setup+0x6c>
8000e238:	30 08       	mov	r8,0
8000e23a:	b2 68       	st.h	r9[0xc],r8
8000e23c:	49 88       	lddpc	r8,8000e29c <udc_process_setup+0x6c>
8000e23e:	30 09       	mov	r9,0
8000e240:	91 49       	st.w	r8[0x10],r9
8000e242:	49 78       	lddpc	r8,8000e29c <udc_process_setup+0x6c>
8000e244:	30 09       	mov	r9,0
8000e246:	91 59       	st.w	r8[0x14],r9
8000e248:	49 58       	lddpc	r8,8000e29c <udc_process_setup+0x6c>
8000e24a:	11 88       	ld.ub	r8,r8[0x0]
8000e24c:	10 99       	mov	r9,r8
8000e24e:	30 08       	mov	r8,0
8000e250:	f0 09 18 00 	cp.b	r9,r8
8000e254:	c0 74       	brge	8000e262 <udc_process_setup+0x32>
8000e256:	49 28       	lddpc	r8,8000e29c <udc_process_setup+0x6c>
8000e258:	90 38       	ld.sh	r8,r8[0x6]
8000e25a:	58 08       	cp.w	r8,0
8000e25c:	c0 31       	brne	8000e262 <udc_process_setup+0x32>
8000e25e:	30 08       	mov	r8,0
8000e260:	c1 b8       	rjmp	8000e296 <udc_process_setup+0x66>
8000e262:	48 f8       	lddpc	r8,8000e29c <udc_process_setup+0x6c>
8000e264:	11 88       	ld.ub	r8,r8[0x0]
8000e266:	e2 18 00 60 	andl	r8,0x60,COH
8000e26a:	c0 81       	brne	8000e27a <udc_process_setup+0x4a>
8000e26c:	f0 1f 00 0d 	mcall	8000e2a0 <udc_process_setup+0x70>
8000e270:	18 98       	mov	r8,r12
8000e272:	58 08       	cp.w	r8,0
8000e274:	c0 30       	breq	8000e27a <udc_process_setup+0x4a>
8000e276:	30 18       	mov	r8,1
8000e278:	c0 f8       	rjmp	8000e296 <udc_process_setup+0x66>
8000e27a:	48 98       	lddpc	r8,8000e29c <udc_process_setup+0x6c>
8000e27c:	11 88       	ld.ub	r8,r8[0x0]
8000e27e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e282:	58 18       	cp.w	r8,1
8000e284:	c0 81       	brne	8000e294 <udc_process_setup+0x64>
8000e286:	f0 1f 00 08 	mcall	8000e2a4 <udc_process_setup+0x74>
8000e28a:	18 98       	mov	r8,r12
8000e28c:	58 08       	cp.w	r8,0
8000e28e:	c0 30       	breq	8000e294 <udc_process_setup+0x64>
8000e290:	30 18       	mov	r8,1
8000e292:	c0 28       	rjmp	8000e296 <udc_process_setup+0x66>
8000e294:	30 08       	mov	r8,0
8000e296:	10 9c       	mov	r12,r8
8000e298:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e29c:	00 00       	add	r0,r0
8000e29e:	0d e4       	ld.ub	r4,r6[0x6]
8000e2a0:	80 00       	ld.sh	r0,r0[0x0]
8000e2a2:	e0 30 80 00 	sub	r0,98304
8000e2a6:	e1 84       	*unknown*

8000e2a8 <pm_sleep>:
#else
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
8000e2a8:	eb cd 40 80 	pushm	r7,lr
8000e2ac:	1a 97       	mov	r7,sp
8000e2ae:	20 1d       	sub	sp,4
8000e2b0:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (sleep_mode) {
8000e2b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e2b8:	58 58       	cp.w	r8,5
8000e2ba:	c4 30       	breq	8000e340 <pm_sleep+0x98>
8000e2bc:	e0 89 00 10 	brgt	8000e2dc <pm_sleep+0x34>
8000e2c0:	58 28       	cp.w	r8,2
8000e2c2:	c2 d0       	breq	8000e31c <pm_sleep+0x74>
8000e2c4:	e0 89 00 07 	brgt	8000e2d2 <pm_sleep+0x2a>
8000e2c8:	58 08       	cp.w	r8,0
8000e2ca:	c1 d0       	breq	8000e304 <pm_sleep+0x5c>
8000e2cc:	58 18       	cp.w	r8,1
8000e2ce:	c2 10       	breq	8000e310 <pm_sleep+0x68>
8000e2d0:	c3 d8       	rjmp	8000e34a <pm_sleep+0xa2>
8000e2d2:	58 38       	cp.w	r8,3
8000e2d4:	c2 a0       	breq	8000e328 <pm_sleep+0x80>
8000e2d6:	58 48       	cp.w	r8,4
8000e2d8:	c2 e0       	breq	8000e334 <pm_sleep+0x8c>
8000e2da:	c3 88       	rjmp	8000e34a <pm_sleep+0xa2>
8000e2dc:	e0 48 00 82 	cp.w	r8,130
8000e2e0:	c2 10       	breq	8000e322 <pm_sleep+0x7a>
8000e2e2:	e0 89 00 09 	brgt	8000e2f4 <pm_sleep+0x4c>
8000e2e6:	e0 48 00 80 	cp.w	r8,128
8000e2ea:	c1 00       	breq	8000e30a <pm_sleep+0x62>
8000e2ec:	e0 48 00 81 	cp.w	r8,129
8000e2f0:	c1 30       	breq	8000e316 <pm_sleep+0x6e>
8000e2f2:	c2 c8       	rjmp	8000e34a <pm_sleep+0xa2>
8000e2f4:	e0 48 00 84 	cp.w	r8,132
8000e2f8:	c2 10       	breq	8000e33a <pm_sleep+0x92>
8000e2fa:	c1 a5       	brlt	8000e32e <pm_sleep+0x86>
8000e2fc:	e0 48 00 85 	cp.w	r8,133
8000e300:	c2 30       	breq	8000e346 <pm_sleep+0x9e>
8000e302:	c2 48       	rjmp	8000e34a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
8000e304:	e9 b0 00 00 	sleep	0x0
		break;
8000e308:	c2 18       	rjmp	8000e34a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
8000e30a:	e9 b0 00 80 	sleep	0x80
		break;
8000e30e:	c1 e8       	rjmp	8000e34a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
8000e310:	e9 b0 00 01 	sleep	0x1
		break;
8000e314:	c1 b8       	rjmp	8000e34a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
8000e316:	e9 b0 00 81 	sleep	0x81
		break;
8000e31a:	c1 88       	rjmp	8000e34a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
8000e31c:	e9 b0 00 02 	sleep	0x2
		break;
8000e320:	c1 58       	rjmp	8000e34a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
8000e322:	e9 b0 00 82 	sleep	0x82
		break;
8000e326:	c1 28       	rjmp	8000e34a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
8000e328:	e9 b0 00 03 	sleep	0x3
		break;
8000e32c:	c0 f8       	rjmp	8000e34a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
8000e32e:	e9 b0 00 83 	sleep	0x83
		break;
8000e332:	c0 c8       	rjmp	8000e34a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
8000e334:	e9 b0 00 04 	sleep	0x4
		break;
8000e338:	c0 98       	rjmp	8000e34a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000e33a:	e9 b0 00 84 	sleep	0x84
		break;
8000e33e:	c0 68       	rjmp	8000e34a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
8000e340:	e9 b0 00 05 	sleep	0x5
		break;
8000e344:	c0 38       	rjmp	8000e34a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
8000e346:	e9 b0 00 85 	sleep	0x85
		break;
#endif
	default:
		break;
	}
}
8000e34a:	2f fd       	sub	sp,-4
8000e34c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e350 <sleepmgr_sleep>:
//! @}



static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
8000e350:	eb cd 40 80 	pushm	r7,lr
8000e354:	1a 97       	mov	r7,sp
8000e356:	20 1d       	sub	sp,4
8000e358:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
8000e35c:	d3 03       	ssrf	0x10

	// Atomically enable the global interrupts and enter the sleep mode.
	pm_sleep(AVR32_PM_SMODE_GMCLEAR_MASK | (sleep_mode-1));
8000e35e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e362:	20 18       	sub	r8,1
8000e364:	a7 b8       	sbr	r8,0x7
8000e366:	10 9c       	mov	r12,r8
8000e368:	f0 1f 00 03 	mcall	8000e374 <sleepmgr_sleep+0x24>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
8000e36c:	2f fd       	sub	sp,-4
8000e36e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e372:	00 00       	add	r0,r0
8000e374:	80 00       	ld.sh	r0,r0[0x0]
8000e376:	e2 a8       	*unknown*

8000e378 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8000e378:	eb cd 40 80 	pushm	r7,lr
8000e37c:	1a 97       	mov	r7,sp
8000e37e:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000e380:	30 08       	mov	r8,0
8000e382:	ef 68 ff ff 	st.b	r7[-1],r8
8000e386:	c0 c8       	rjmp	8000e39e <sleepmgr_init+0x26>
		sleepmgr_locks[i] = 0;
8000e388:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000e38c:	48 ba       	lddpc	r10,8000e3b8 <sleepmgr_init+0x40>
8000e38e:	30 08       	mov	r8,0
8000e390:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000e394:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e398:	2f f8       	sub	r8,-1
8000e39a:	ef 68 ff ff 	st.b	r7[-1],r8
8000e39e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000e3a2:	30 58       	mov	r8,5
8000e3a4:	f0 09 18 00 	cp.b	r9,r8
8000e3a8:	fe 98 ff f0 	brls	8000e388 <sleepmgr_init+0x10>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8000e3ac:	48 39       	lddpc	r9,8000e3b8 <sleepmgr_init+0x40>
8000e3ae:	30 18       	mov	r8,1
8000e3b0:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000e3b2:	2f fd       	sub	sp,-4
8000e3b4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e3b8:	00 00       	add	r0,r0
8000e3ba:	0d fc       	ld.ub	r12,r6[0x7]

8000e3bc <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
8000e3bc:	eb cd 40 80 	pushm	r7,lr
8000e3c0:	1a 97       	mov	r7,sp
8000e3c2:	20 2d       	sub	sp,8
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
8000e3c4:	30 08       	mov	r8,0
8000e3c6:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
8000e3ca:	48 d8       	lddpc	r8,8000e3fc <sleepmgr_get_sleep_mode+0x40>
8000e3cc:	ef 48 ff fc 	st.w	r7[-4],r8

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000e3d0:	c0 b8       	rjmp	8000e3e6 <sleepmgr_get_sleep_mode+0x2a>
		lock_ptr++;
8000e3d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e3d6:	2f f8       	sub	r8,-1
8000e3d8:	ef 48 ff fc 	st.w	r7[-4],r8
		sleep_mode++;
8000e3dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e3e0:	2f f8       	sub	r8,-1
8000e3e2:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000e3e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e3ea:	11 88       	ld.ub	r8,r8[0x0]
8000e3ec:	58 08       	cp.w	r8,0
8000e3ee:	cf 20       	breq	8000e3d2 <sleepmgr_get_sleep_mode+0x16>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
8000e3f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000e3f4:	10 9c       	mov	r12,r8
8000e3f6:	2f ed       	sub	sp,-8
8000e3f8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e3fc:	00 00       	add	r0,r0
8000e3fe:	0d fc       	ld.ub	r12,r6[0x7]

8000e400 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
8000e400:	eb cd 40 80 	pushm	r7,lr
8000e404:	1a 97       	mov	r7,sp
8000e406:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
8000e408:	d3 03       	ssrf	0x10

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
8000e40a:	f0 1f 00 0a 	mcall	8000e430 <sleepmgr_enter_sleep+0x30>
8000e40e:	18 98       	mov	r8,r12
8000e410:	ef 48 ff fc 	st.w	r7[-4],r8
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
8000e414:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e418:	58 08       	cp.w	r8,0
8000e41a:	c0 31       	brne	8000e420 <sleepmgr_enter_sleep+0x20>
		cpu_irq_enable();
8000e41c:	d5 03       	csrf	0x10
		return;
8000e41e:	c0 58       	rjmp	8000e428 <sleepmgr_enter_sleep+0x28>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
8000e420:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e424:	f0 1f 00 04 	mcall	8000e434 <sleepmgr_enter_sleep+0x34>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000e428:	2f fd       	sub	sp,-4
8000e42a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e42e:	00 00       	add	r0,r0
8000e430:	80 00       	ld.sh	r0,r0[0x0]
8000e432:	e3 bc       	*unknown*
8000e434:	80 00       	ld.sh	r0,r0[0x0]
8000e436:	e3 50 eb cd 	st.h	r1[-5171],r0

8000e438 <udc_include_vbus_monitoring>:
 *        // Start USB \n
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
8000e438:	eb cd 40 80 	pushm	r7,lr
8000e43c:	1a 97       	mov	r7,sp
	return udd_include_vbus_monitoring();
8000e43e:	f0 1f 00 04 	mcall	8000e44c <udc_include_vbus_monitoring+0x14>
8000e442:	18 98       	mov	r8,r12
}
8000e444:	10 9c       	mov	r12,r8
8000e446:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e44a:	00 00       	add	r0,r0
8000e44c:	80 00       	ld.sh	r0,r0[0x0]
8000e44e:	9f 28       	st.w	pc[0x8],r8

8000e450 <udc_attach>:
 * \warning If a VBus control is included in driver,
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
8000e450:	eb cd 40 80 	pushm	r7,lr
8000e454:	1a 97       	mov	r7,sp
	udd_attach();
8000e456:	f0 1f 00 03 	mcall	8000e460 <udc_attach+0x10>
}
8000e45a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e45e:	00 00       	add	r0,r0
8000e460:	80 00       	ld.sh	r0,r0[0x0]
8000e462:	a0 58       	st.h	r0[0xa],r8

8000e464 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
8000e464:	eb cd 40 80 	pushm	r7,lr
8000e468:	1a 97       	mov	r7,sp
	udd_detach();
8000e46a:	f0 1f 00 03 	mcall	8000e474 <udc_detach+0x10>
}
8000e46e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e472:	00 00       	add	r0,r0
8000e474:	80 00       	ld.sh	r0,r0[0x0]
8000e476:	a1 04       	ld.d	r4,r0

8000e478 <main>:
static bool main_b_msc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
8000e478:	eb cd 40 80 	pushm	r7,lr
8000e47c:	1a 97       	mov	r7,sp
8000e47e:	20 1d       	sub	sp,4
	uint8_t i = 0;
8000e480:	30 08       	mov	r8,0
8000e482:	ef 68 ff ff 	st.b	r7[-1],r8
	irq_initialize_vectors();
8000e486:	f0 1f 00 28 	mcall	8000e524 <main+0xac>
	cpu_irq_enable();
8000e48a:	d5 03       	csrf	0x10

	// Initialize the sleep manager
	sleepmgr_init();
8000e48c:	f0 1f 00 27 	mcall	8000e528 <main+0xb0>

	sysclk_init();
8000e490:	f0 1f 00 27 	mcall	8000e52c <main+0xb4>
	board_init();
8000e494:	f0 1f 00 27 	mcall	8000e530 <main+0xb8>

	ui_init();
8000e498:	f0 1f 00 27 	mcall	8000e534 <main+0xbc>
	ui_powerdown();
8000e49c:	f0 1f 00 27 	mcall	8000e538 <main+0xc0>

	memories_initialization();
8000e4a0:	f0 1f 00 27 	mcall	8000e53c <main+0xc4>

	// Initialize LCD
	et024006_Init( FOSC0, FOSC0 );
8000e4a4:	e0 6b 1b 00 	mov	r11,6912
8000e4a8:	ea 1b 00 b7 	orh	r11,0xb7
8000e4ac:	e0 6c 1b 00 	mov	r12,6912
8000e4b0:	ea 1c 00 b7 	orh	r12,0xb7
8000e4b4:	f0 1f 00 23 	mcall	8000e540 <main+0xc8>
	gpio_set_gpio_pin(ET024006DHU_BL_PIN);
8000e4b8:	30 9c       	mov	r12,9
8000e4ba:	f0 1f 00 23 	mcall	8000e544 <main+0xcc>
	
	//et024006_PrintConsole("Welcome Eric", BLACK, -1);
	//clear_lcd
	et024006_DrawFilledRect(1, 1, ET024006_WIDTH, ET024006_HEIGHT, BLACK);
8000e4be:	30 08       	mov	r8,0
8000e4c0:	e0 69 00 f0 	mov	r9,240
8000e4c4:	e0 6a 01 40 	mov	r10,320
8000e4c8:	30 1b       	mov	r11,1
8000e4ca:	30 1c       	mov	r12,1
8000e4cc:	f0 1f 00 1f 	mcall	8000e548 <main+0xd0>
	
	// Initialize AES module
	aes_task();
8000e4d0:	f0 1f 00 1f 	mcall	8000e54c <main+0xd4>

	// Start TC
	tc_task();
8000e4d4:	f0 1f 00 1f 	mcall	8000e550 <main+0xd8>

	// Read the stored values from the flash
	memcpy((uint8_t *)&Stored_values, (const uint8_t *)&SALT_STRUCT, sizeof(Stored_values));
8000e4d8:	e0 6a 00 a0 	mov	r10,160
8000e4dc:	fc 1b 81 90 	movh	r11,0x8190
8000e4e0:	49 dc       	lddpc	r12,8000e554 <main+0xdc>
8000e4e2:	f0 1f 00 1e 	mcall	8000e558 <main+0xe0>
	// Start USB stack to authorize VBus monitoring
	udc_start();
8000e4e6:	f0 1f 00 1e 	mcall	8000e55c <main+0xe4>

	if (!udc_include_vbus_monitoring()) {
8000e4ea:	f0 1f 00 1e 	mcall	8000e560 <main+0xe8>
8000e4ee:	18 98       	mov	r8,r12
8000e4f0:	ec 18 00 01 	eorl	r8,0x1
8000e4f4:	5c 58       	castu.b	r8
8000e4f6:	c0 60       	breq	8000e502 <main+0x8a>
		// VBUS monitoring is not available on this product
		// thereby VBUS has to be considered as present
		main_vbus_action(true);
8000e4f8:	30 1c       	mov	r12,1
8000e4fa:	f0 1f 00 1b 	mcall	8000e564 <main+0xec>
8000e4fe:	c0 28       	rjmp	8000e502 <main+0x8a>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e500:	d7 03       	nop

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true)
	{
		if (main_b_msc_enable)
8000e502:	49 a8       	lddpc	r8,8000e568 <main+0xf0>
8000e504:	11 88       	ld.ub	r8,r8[0x0]
8000e506:	58 08       	cp.w	r8,0
8000e508:	c0 b0       	breq	8000e51e <main+0xa6>
		{
			if (!udi_msc_process_trans())
8000e50a:	f0 1f 00 19 	mcall	8000e56c <main+0xf4>
8000e50e:	18 98       	mov	r8,r12
8000e510:	ec 18 00 01 	eorl	r8,0x1
8000e514:	5c 58       	castu.b	r8
8000e516:	cf 50       	breq	8000e500 <main+0x88>
			{
				sleepmgr_enter_sleep();
8000e518:	f0 1f 00 16 	mcall	8000e570 <main+0xf8>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e51c:	cf 3b       	rjmp	8000e502 <main+0x8a>
				sleepmgr_enter_sleep();
			}
		}
		else
		{
			sleepmgr_enter_sleep();
8000e51e:	f0 1f 00 15 	mcall	8000e570 <main+0xf8>
		}
		//main_process_mode();
	}
8000e522:	cf 0b       	rjmp	8000e502 <main+0x8a>
8000e524:	80 00       	ld.sh	r0,r0[0x0]
8000e526:	92 60       	ld.sh	r0,r9[0xc]
8000e528:	80 00       	ld.sh	r0,r0[0x0]
8000e52a:	e3 78 80 00 	stcond	r1[-32768],r8
8000e52e:	c3 24       	brge	8000e592 <main_vbus_action+0x1e>
8000e530:	80 00       	ld.sh	r0,r0[0x0]
8000e532:	42 08       	lddsp	r8,sp[0x80]
8000e534:	80 00       	ld.sh	r0,r0[0x0]
8000e536:	c5 ac       	rcall	8000e5ea <main_sof_action+0x1a>
8000e538:	80 00       	ld.sh	r0,r0[0x0]
8000e53a:	c5 cc       	rcall	8000e5f2 <main_sof_action+0x22>
8000e53c:	80 00       	ld.sh	r0,r0[0x0]
8000e53e:	e6 ec 80 00 	ld.d	r12,r3[-32768]
8000e542:	43 f0       	lddsp	r0,sp[0xfc]
8000e544:	80 00       	ld.sh	r0,r0[0x0]
8000e546:	90 9a       	ld.uh	r10,r8[0x2]
8000e548:	80 00       	ld.sh	r0,r0[0x0]
8000e54a:	44 68       	lddsp	r8,sp[0x118]
8000e54c:	80 00       	ld.sh	r0,r0[0x0]
8000e54e:	3f 78       	mov	r8,-9
8000e550:	80 00       	ld.sh	r0,r0[0x0]
8000e552:	3e d8       	mov	r8,-19
8000e554:	00 00       	add	r0,r0
8000e556:	02 48       	or	r8,r1
8000e558:	80 00       	ld.sh	r0,r0[0x0]
8000e55a:	ea a2       	*unknown*
8000e55c:	80 00       	ld.sh	r0,r0[0x0]
8000e55e:	d7 24       	*unknown*
8000e560:	80 00       	ld.sh	r0,r0[0x0]
8000e562:	e4 38 80 00 	sub	r8,360448
8000e566:	e5 74 00 00 	stcond	r2[0],r4
8000e56a:	09 00       	ld.w	r0,r4++
8000e56c:	80 00       	ld.sh	r0,r0[0x0]
8000e56e:	d2 20       	acall	0x88
8000e570:	80 00       	ld.sh	r0,r0[0x0]
8000e572:	e4 00       	*unknown*

8000e574 <main_vbus_action>:
}

void main_vbus_action(bool b_high)
{
8000e574:	eb cd 40 80 	pushm	r7,lr
8000e578:	1a 97       	mov	r7,sp
8000e57a:	20 1d       	sub	sp,4
8000e57c:	18 98       	mov	r8,r12
8000e57e:	ef 68 ff fc 	st.b	r7[-4],r8
	if (b_high) {
8000e582:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000e586:	30 08       	mov	r8,0
8000e588:	f0 09 18 00 	cp.b	r9,r8
8000e58c:	c0 40       	breq	8000e594 <main_vbus_action+0x20>
		// Attach USB Device
		udc_attach();
8000e58e:	f0 1f 00 05 	mcall	8000e5a0 <main_vbus_action+0x2c>
8000e592:	c0 38       	rjmp	8000e598 <main_vbus_action+0x24>
	} else {
		// VBUS not present
		udc_detach();
8000e594:	f0 1f 00 04 	mcall	8000e5a4 <main_vbus_action+0x30>
	}
}
8000e598:	2f fd       	sub	sp,-4
8000e59a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e59e:	00 00       	add	r0,r0
8000e5a0:	80 00       	ld.sh	r0,r0[0x0]
8000e5a2:	e4 50 80 00 	cp.w	r0,360448
8000e5a6:	e4 64 eb cd 	mov	r4,322509

8000e5a8 <main_suspend_action>:

void main_suspend_action(void)
{
8000e5a8:	eb cd 40 80 	pushm	r7,lr
8000e5ac:	1a 97       	mov	r7,sp
	ui_powerdown();
8000e5ae:	f0 1f 00 03 	mcall	8000e5b8 <main_suspend_action+0x10>
}
8000e5b2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e5b6:	00 00       	add	r0,r0
8000e5b8:	80 00       	ld.sh	r0,r0[0x0]
8000e5ba:	c5 cc       	rcall	8000e672 <osc_get_rate+0x3e>

8000e5bc <main_resume_action>:

void main_resume_action(void)
{
8000e5bc:	eb cd 40 80 	pushm	r7,lr
8000e5c0:	1a 97       	mov	r7,sp
	ui_wakeup();
8000e5c2:	f0 1f 00 03 	mcall	8000e5cc <main_resume_action+0x10>
}
8000e5c6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e5ca:	00 00       	add	r0,r0
8000e5cc:	80 00       	ld.sh	r0,r0[0x0]
8000e5ce:	c5 e8       	rjmp	8000e68a <sysclk_get_main_hz+0x12>

8000e5d0 <main_sof_action>:

void main_sof_action(void)
{
8000e5d0:	eb cd 40 80 	pushm	r7,lr
8000e5d4:	1a 97       	mov	r7,sp
	if (!main_b_msc_enable)
8000e5d6:	48 a8       	lddpc	r8,8000e5fc <main_sof_action+0x2c>
8000e5d8:	11 88       	ld.ub	r8,r8[0x0]
8000e5da:	ec 18 00 01 	eorl	r8,0x1
8000e5de:	5c 58       	castu.b	r8
8000e5e0:	c0 a1       	brne	8000e5f4 <main_sof_action+0x24>
		return;
	ui_process(udd_get_frame_number());
8000e5e2:	f0 1f 00 08 	mcall	8000e600 <main_sof_action+0x30>
8000e5e6:	18 98       	mov	r8,r12
8000e5e8:	5c 88       	casts.h	r8
8000e5ea:	5c 78       	castu.h	r8
8000e5ec:	10 9c       	mov	r12,r8
8000e5ee:	f0 1f 00 06 	mcall	8000e604 <main_sof_action+0x34>
8000e5f2:	c0 28       	rjmp	8000e5f6 <main_sof_action+0x26>
}

void main_sof_action(void)
{
	if (!main_b_msc_enable)
		return;
8000e5f4:	d7 03       	nop
	ui_process(udd_get_frame_number());
}
8000e5f6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e5fa:	00 00       	add	r0,r0
8000e5fc:	00 00       	add	r0,r0
8000e5fe:	09 00       	ld.w	r0,r4++
8000e600:	80 00       	ld.sh	r0,r0[0x0]
8000e602:	a1 c6       	cbr	r6,0x0
8000e604:	80 00       	ld.sh	r0,r0[0x0]
8000e606:	c6 4c       	rcall	8000e6ce <sysclk_enable_hsb_module+0x2>

8000e608 <main_msc_enable>:

bool main_msc_enable(void)
{
8000e608:	eb cd 40 80 	pushm	r7,lr
8000e60c:	1a 97       	mov	r7,sp
	main_b_msc_enable = true;
8000e60e:	48 49       	lddpc	r9,8000e61c <main_msc_enable+0x14>
8000e610:	30 18       	mov	r8,1
8000e612:	b2 88       	st.b	r9[0x0],r8
	return true;
8000e614:	30 18       	mov	r8,1
}
8000e616:	10 9c       	mov	r12,r8
8000e618:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e61c:	00 00       	add	r0,r0
8000e61e:	09 00       	ld.w	r0,r4++

8000e620 <main_msc_disable>:

void main_msc_disable(void)
{
8000e620:	eb cd 40 80 	pushm	r7,lr
8000e624:	1a 97       	mov	r7,sp
	main_b_msc_enable = false;
8000e626:	48 39       	lddpc	r9,8000e630 <main_msc_disable+0x10>
8000e628:	30 08       	mov	r8,0
8000e62a:	b2 88       	st.b	r9[0x0],r8
}
8000e62c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e630:	00 00       	add	r0,r0
8000e632:	09 00       	ld.w	r0,r4++

8000e634 <osc_get_rate>:
8000e634:	eb cd 40 80 	pushm	r7,lr
8000e638:	1a 97       	mov	r7,sp
8000e63a:	20 1d       	sub	sp,4
8000e63c:	18 98       	mov	r8,r12
8000e63e:	ef 68 ff fc 	st.b	r7[-4],r8
8000e642:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000e646:	58 18       	cp.w	r8,1
8000e648:	c0 a0       	breq	8000e65c <osc_get_rate+0x28>
8000e64a:	58 28       	cp.w	r8,2
8000e64c:	c0 d0       	breq	8000e666 <osc_get_rate+0x32>
8000e64e:	58 08       	cp.w	r8,0
8000e650:	c0 e1       	brne	8000e66c <osc_get_rate+0x38>
8000e652:	e0 68 1b 00 	mov	r8,6912
8000e656:	ea 18 00 b7 	orh	r8,0xb7
8000e65a:	c0 a8       	rjmp	8000e66e <osc_get_rate+0x3a>
8000e65c:	e0 68 44 00 	mov	r8,17408
8000e660:	ea 18 00 ac 	orh	r8,0xac
8000e664:	c0 58       	rjmp	8000e66e <osc_get_rate+0x3a>
8000e666:	e0 68 80 00 	mov	r8,32768
8000e66a:	c0 28       	rjmp	8000e66e <osc_get_rate+0x3a>
8000e66c:	30 08       	mov	r8,0
8000e66e:	10 9c       	mov	r12,r8
8000e670:	2f fd       	sub	sp,-4
8000e672:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e676:	d7 03       	nop

8000e678 <sysclk_get_main_hz>:
8000e678:	eb cd 40 80 	pushm	r7,lr
8000e67c:	1a 97       	mov	r7,sp
8000e67e:	30 0c       	mov	r12,0
8000e680:	f0 1f 00 06 	mcall	8000e698 <sysclk_get_main_hz+0x20>
8000e684:	18 99       	mov	r9,r12
8000e686:	12 98       	mov	r8,r9
8000e688:	a3 68       	lsl	r8,0x2
8000e68a:	12 08       	add	r8,r9
8000e68c:	a1 78       	lsl	r8,0x1
8000e68e:	12 08       	add	r8,r9
8000e690:	a1 98       	lsr	r8,0x1
8000e692:	10 9c       	mov	r12,r8
8000e694:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e698:	80 00       	ld.sh	r0,r0[0x0]
8000e69a:	e6 34 eb cd 	sub	r4,519117

8000e69c <sysclk_get_cpu_hz>:
8000e69c:	eb cd 40 80 	pushm	r7,lr
8000e6a0:	1a 97       	mov	r7,sp
8000e6a2:	f0 1f 00 04 	mcall	8000e6b0 <sysclk_get_cpu_hz+0x14>
8000e6a6:	18 98       	mov	r8,r12
8000e6a8:	10 9c       	mov	r12,r8
8000e6aa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e6ae:	00 00       	add	r0,r0
8000e6b0:	80 00       	ld.sh	r0,r0[0x0]
8000e6b2:	e6 78 eb cd 	mov	r8,519117

8000e6b4 <sysclk_get_pbb_hz>:
8000e6b4:	eb cd 40 80 	pushm	r7,lr
8000e6b8:	1a 97       	mov	r7,sp
8000e6ba:	f0 1f 00 04 	mcall	8000e6c8 <sysclk_get_pbb_hz+0x14>
8000e6be:	18 98       	mov	r8,r12
8000e6c0:	10 9c       	mov	r12,r8
8000e6c2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e6c6:	00 00       	add	r0,r0
8000e6c8:	80 00       	ld.sh	r0,r0[0x0]
8000e6ca:	e6 78 eb cd 	mov	r8,519117

8000e6cc <sysclk_enable_hsb_module>:
8000e6cc:	eb cd 40 80 	pushm	r7,lr
8000e6d0:	1a 97       	mov	r7,sp
8000e6d2:	20 1d       	sub	sp,4
8000e6d4:	ef 4c ff fc 	st.w	r7[-4],r12
8000e6d8:	ee fb ff fc 	ld.w	r11,r7[-4]
8000e6dc:	30 1c       	mov	r12,1
8000e6de:	f0 1f 00 03 	mcall	8000e6e8 <sysclk_enable_hsb_module+0x1c>
8000e6e2:	2f fd       	sub	sp,-4
8000e6e4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e6e8:	80 00       	ld.sh	r0,r0[0x0]
8000e6ea:	c1 fc       	rcall	8000e728 <memories_initialization+0x3c>

8000e6ec <memories_initialization>:
8000e6ec:	eb cd 40 c0 	pushm	r6-r7,lr
8000e6f0:	1a 97       	mov	r7,sp
8000e6f2:	20 2d       	sub	sp,8
8000e6f4:	30 0c       	mov	r12,0
8000e6f6:	f0 1f 00 42 	mcall	8000e7fc <memories_initialization+0x110>
8000e6fa:	fe 68 10 00 	mov	r8,-126976
8000e6fe:	71 08       	ld.w	r8,r8[0x40]
8000e700:	ef 48 ff fc 	st.w	r7[-4],r8
8000e704:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e708:	30 19       	mov	r9,1
8000e70a:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e70e:	ef 48 ff fc 	st.w	r7[-4],r8
8000e712:	fe 68 10 00 	mov	r8,-126976
8000e716:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e71a:	f1 49 00 40 	st.w	r8[64],r9
8000e71e:	fe 68 10 00 	mov	r8,-126976
8000e722:	71 48       	ld.w	r8,r8[0x50]
8000e724:	ef 48 ff fc 	st.w	r7[-4],r8
8000e728:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e72c:	30 19       	mov	r9,1
8000e72e:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e732:	ef 48 ff fc 	st.w	r7[-4],r8
8000e736:	fe 68 10 00 	mov	r8,-126976
8000e73a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e73e:	f1 49 00 50 	st.w	r8[80],r9
8000e742:	fe 68 10 00 	mov	r8,-126976
8000e746:	71 68       	ld.w	r8,r8[0x58]
8000e748:	ef 48 ff fc 	st.w	r7[-4],r8
8000e74c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e750:	30 19       	mov	r9,1
8000e752:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e756:	ef 48 ff fc 	st.w	r7[-4],r8
8000e75a:	fe 68 10 00 	mov	r8,-126976
8000e75e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e762:	f1 49 00 58 	st.w	r8[88],r9
8000e766:	fe 68 10 00 	mov	r8,-126976
8000e76a:	70 68       	ld.w	r8,r8[0x18]
8000e76c:	ef 48 ff f8 	st.w	r7[-8],r8
8000e770:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e774:	30 09       	mov	r9,0
8000e776:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000e77a:	ef 48 ff f8 	st.w	r7[-8],r8
8000e77e:	fe 68 10 00 	mov	r8,-126976
8000e782:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e786:	91 69       	st.w	r8[0x18],r9
8000e788:	fe 68 10 00 	mov	r8,-126976
8000e78c:	71 58       	ld.w	r8,r8[0x54]
8000e78e:	ef 48 ff fc 	st.w	r7[-4],r8
8000e792:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e796:	30 69       	mov	r9,6
8000e798:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
8000e79c:	ef 48 ff fc 	st.w	r7[-4],r8
8000e7a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e7a4:	30 29       	mov	r9,2
8000e7a6:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e7aa:	ef 48 ff fc 	st.w	r7[-4],r8
8000e7ae:	fe 68 10 00 	mov	r8,-126976
8000e7b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e7b6:	f1 49 00 54 	st.w	r8[84],r9
8000e7ba:	30 6c       	mov	r12,6
8000e7bc:	f0 1f 00 10 	mcall	8000e7fc <memories_initialization+0x110>
8000e7c0:	30 7c       	mov	r12,7
8000e7c2:	f0 1f 00 10 	mcall	8000e800 <memories_initialization+0x114>
8000e7c6:	f0 1f 00 10 	mcall	8000e804 <memories_initialization+0x118>
8000e7ca:	18 98       	mov	r8,r12
8000e7cc:	10 96       	mov	r6,r8
8000e7ce:	f0 1f 00 0f 	mcall	8000e808 <memories_initialization+0x11c>
8000e7d2:	18 98       	mov	r8,r12
8000e7d4:	0c 9a       	mov	r10,r6
8000e7d6:	10 9b       	mov	r11,r8
8000e7d8:	30 0c       	mov	r12,0
8000e7da:	f0 1f 00 0d 	mcall	8000e80c <memories_initialization+0x120>
8000e7de:	f0 1f 00 0a 	mcall	8000e804 <memories_initialization+0x118>
8000e7e2:	18 98       	mov	r8,r12
8000e7e4:	10 96       	mov	r6,r8
8000e7e6:	f0 1f 00 09 	mcall	8000e808 <memories_initialization+0x11c>
8000e7ea:	18 98       	mov	r8,r12
8000e7ec:	0c 9a       	mov	r10,r6
8000e7ee:	10 9b       	mov	r11,r8
8000e7f0:	30 1c       	mov	r12,1
8000e7f2:	f0 1f 00 07 	mcall	8000e80c <memories_initialization+0x120>
8000e7f6:	2f ed       	sub	sp,-8
8000e7f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e7fc:	80 00       	ld.sh	r0,r0[0x0]
8000e7fe:	c2 70       	breq	8000e84c <__avr32_udiv64+0x3c>
8000e800:	80 00       	ld.sh	r0,r0[0x0]
8000e802:	e6 cc 80 00 	sub	r12,r3,-32768
8000e806:	e6 9c 80 00 	brvs	800fe806 <_data_lma+0xef22e>
8000e80a:	e6 b4       	*unknown*
8000e80c:	80 00       	ld.sh	r0,r0[0x0]
8000e80e:	64 e0       	ld.w	r0,r2[0x38]

8000e810 <__avr32_udiv64>:
8000e810:	d4 31       	pushm	r0-r7,lr
8000e812:	1a 97       	mov	r7,sp
8000e814:	20 2d       	sub	sp,8
8000e816:	10 9e       	mov	lr,r8
8000e818:	12 95       	mov	r5,r9
8000e81a:	14 96       	mov	r6,r10
8000e81c:	58 09       	cp.w	r9,0
8000e81e:	c4 91       	brne	8000e8b0 <__avr32_udiv64+0xa0>
8000e820:	16 38       	cp.w	r8,r11
8000e822:	e0 88 00 57 	brls	8000e8d0 <__avr32_udiv64+0xc0>
8000e826:	f0 08 12 00 	clz	r8,r8
8000e82a:	c0 d0       	breq	8000e844 <__avr32_udiv64+0x34>
8000e82c:	f6 08 09 4b 	lsl	r11,r11,r8
8000e830:	f0 09 11 20 	rsub	r9,r8,32
8000e834:	fc 08 09 4e 	lsl	lr,lr,r8
8000e838:	f4 09 0a 49 	lsr	r9,r10,r9
8000e83c:	f4 08 09 46 	lsl	r6,r10,r8
8000e840:	f3 eb 10 0b 	or	r11,r9,r11
8000e844:	fc 05 16 10 	lsr	r5,lr,0x10
8000e848:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
8000e84c:	f6 05 0d 0a 	divu	r10,r11,r5
8000e850:	ec 08 16 10 	lsr	r8,r6,0x10
8000e854:	14 99       	mov	r9,r10
8000e856:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e85a:	b9 3a       	mul	r10,r12
8000e85c:	10 3a       	cp.w	r10,r8
8000e85e:	e0 88 00 0c 	brls	8000e876 <__avr32_udiv64+0x66>
8000e862:	20 19       	sub	r9,1
8000e864:	1c 08       	add	r8,lr
8000e866:	10 3e       	cp.w	lr,r8
8000e868:	e0 8b 00 07 	brhi	8000e876 <__avr32_udiv64+0x66>
8000e86c:	10 3a       	cp.w	r10,r8
8000e86e:	f7 b9 0b 01 	subhi	r9,1
8000e872:	f1 de eb 08 	addhi	r8,r8,lr
8000e876:	f0 0a 01 0b 	sub	r11,r8,r10
8000e87a:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e87e:	f6 05 0d 0a 	divu	r10,r11,r5
8000e882:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000e886:	14 98       	mov	r8,r10
8000e888:	f4 0c 02 4c 	mul	r12,r10,r12
8000e88c:	0c 3c       	cp.w	r12,r6
8000e88e:	e0 88 00 0a 	brls	8000e8a2 <__avr32_udiv64+0x92>
8000e892:	20 18       	sub	r8,1
8000e894:	1c 06       	add	r6,lr
8000e896:	0c 3e       	cp.w	lr,r6
8000e898:	e0 8b 00 05 	brhi	8000e8a2 <__avr32_udiv64+0x92>
8000e89c:	0c 3c       	cp.w	r12,r6
8000e89e:	f7 b8 0b 01 	subhi	r8,1
8000e8a2:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000e8a6:	30 0c       	mov	r12,0
8000e8a8:	16 9a       	mov	r10,r11
8000e8aa:	18 9b       	mov	r11,r12
8000e8ac:	2f ed       	sub	sp,-8
8000e8ae:	d8 32       	popm	r0-r7,pc
8000e8b0:	16 39       	cp.w	r9,r11
8000e8b2:	e0 8b 00 51 	brhi	8000e954 <__avr32_udiv64+0x144>
8000e8b6:	f2 0c 12 00 	clz	r12,r9
8000e8ba:	c5 31       	brne	8000e960 <__avr32_udiv64+0x150>
8000e8bc:	14 38       	cp.w	r8,r10
8000e8be:	5f 89       	srls	r9
8000e8c0:	16 35       	cp.w	r5,r11
8000e8c2:	5f 38       	srlo	r8
8000e8c4:	10 49       	or	r9,r8
8000e8c6:	f8 09 18 00 	cp.b	r9,r12
8000e8ca:	c4 50       	breq	8000e954 <__avr32_udiv64+0x144>
8000e8cc:	30 1b       	mov	r11,1
8000e8ce:	c4 58       	rjmp	8000e958 <__avr32_udiv64+0x148>
8000e8d0:	58 08       	cp.w	r8,0
8000e8d2:	c0 51       	brne	8000e8dc <__avr32_udiv64+0xcc>
8000e8d4:	30 19       	mov	r9,1
8000e8d6:	f2 08 0d 08 	divu	r8,r9,r8
8000e8da:	10 9e       	mov	lr,r8
8000e8dc:	fc 08 12 00 	clz	r8,lr
8000e8e0:	e0 81 00 91 	brne	8000ea02 <__avr32_udiv64+0x1f2>
8000e8e4:	1c 1b       	sub	r11,lr
8000e8e6:	fc 05 16 10 	lsr	r5,lr,0x10
8000e8ea:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e8ee:	30 1c       	mov	r12,1
8000e8f0:	f6 05 0d 0a 	divu	r10,r11,r5
8000e8f4:	ec 08 16 10 	lsr	r8,r6,0x10
8000e8f8:	f4 09 02 43 	mul	r3,r10,r9
8000e8fc:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e900:	14 9b       	mov	r11,r10
8000e902:	10 33       	cp.w	r3,r8
8000e904:	e0 88 00 0c 	brls	8000e91c <__avr32_udiv64+0x10c>
8000e908:	20 1b       	sub	r11,1
8000e90a:	1c 08       	add	r8,lr
8000e90c:	10 3e       	cp.w	lr,r8
8000e90e:	e0 8b 00 07 	brhi	8000e91c <__avr32_udiv64+0x10c>
8000e912:	10 33       	cp.w	r3,r8
8000e914:	f7 bb 0b 01 	subhi	r11,1
8000e918:	f1 de eb 08 	addhi	r8,r8,lr
8000e91c:	f0 03 01 03 	sub	r3,r8,r3
8000e920:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e924:	e6 05 0d 02 	divu	r2,r3,r5
8000e928:	ed e3 11 06 	or	r6,r6,r3<<0x10
8000e92c:	04 98       	mov	r8,r2
8000e92e:	e4 09 02 49 	mul	r9,r2,r9
8000e932:	0c 39       	cp.w	r9,r6
8000e934:	e0 88 00 0a 	brls	8000e948 <__avr32_udiv64+0x138>
8000e938:	20 18       	sub	r8,1
8000e93a:	1c 06       	add	r6,lr
8000e93c:	0c 3e       	cp.w	lr,r6
8000e93e:	e0 8b 00 05 	brhi	8000e948 <__avr32_udiv64+0x138>
8000e942:	0c 39       	cp.w	r9,r6
8000e944:	f7 b8 0b 01 	subhi	r8,1
8000e948:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000e94c:	16 9a       	mov	r10,r11
8000e94e:	18 9b       	mov	r11,r12
8000e950:	2f ed       	sub	sp,-8
8000e952:	d8 32       	popm	r0-r7,pc
8000e954:	30 0b       	mov	r11,0
8000e956:	16 9c       	mov	r12,r11
8000e958:	16 9a       	mov	r10,r11
8000e95a:	18 9b       	mov	r11,r12
8000e95c:	2f ed       	sub	sp,-8
8000e95e:	d8 32       	popm	r0-r7,pc
8000e960:	f2 0c 09 45 	lsl	r5,r9,r12
8000e964:	f8 0e 11 20 	rsub	lr,r12,32
8000e968:	f0 0c 09 43 	lsl	r3,r8,r12
8000e96c:	f4 0e 0a 46 	lsr	r6,r10,lr
8000e970:	f0 0e 0a 48 	lsr	r8,r8,lr
8000e974:	f6 0e 0a 4e 	lsr	lr,r11,lr
8000e978:	0a 48       	or	r8,r5
8000e97a:	f0 01 16 10 	lsr	r1,r8,0x10
8000e97e:	fc 01 0d 04 	divu	r4,lr,r1
8000e982:	ee e5 ff f8 	st.d	r7[-8],r4
8000e986:	f6 0c 09 49 	lsl	r9,r11,r12
8000e98a:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000e98e:	ed e9 10 09 	or	r9,r6,r9
8000e992:	08 96       	mov	r6,r4
8000e994:	f2 0e 16 10 	lsr	lr,r9,0x10
8000e998:	ee f4 ff f8 	ld.w	r4,r7[-8]
8000e99c:	ec 05 02 4b 	mul	r11,r6,r5
8000e9a0:	fd e4 11 0e 	or	lr,lr,r4<<0x10
8000e9a4:	1c 3b       	cp.w	r11,lr
8000e9a6:	e0 88 00 07 	brls	8000e9b4 <__avr32_udiv64+0x1a4>
8000e9aa:	20 16       	sub	r6,1
8000e9ac:	10 0e       	add	lr,r8
8000e9ae:	1c 38       	cp.w	r8,lr
8000e9b0:	e0 88 00 6d 	brls	8000ea8a <__avr32_udiv64+0x27a>
8000e9b4:	16 1e       	sub	lr,r11
8000e9b6:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000e9ba:	fc 01 0d 00 	divu	r0,lr,r1
8000e9be:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000e9c2:	00 9b       	mov	r11,r0
8000e9c4:	e0 05 02 4e 	mul	lr,r0,r5
8000e9c8:	12 3e       	cp.w	lr,r9
8000e9ca:	e0 88 00 07 	brls	8000e9d8 <__avr32_udiv64+0x1c8>
8000e9ce:	20 1b       	sub	r11,1
8000e9d0:	10 09       	add	r9,r8
8000e9d2:	12 38       	cp.w	r8,r9
8000e9d4:	e0 88 00 55 	brls	8000ea7e <__avr32_udiv64+0x26e>
8000e9d8:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
8000e9dc:	1c 19       	sub	r9,lr
8000e9de:	f6 03 06 42 	mulu.d	r2,r11,r3
8000e9e2:	06 39       	cp.w	r9,r3
8000e9e4:	c0 93       	brcs	8000e9f6 <__avr32_udiv64+0x1e6>
8000e9e6:	5f 09       	sreq	r9
8000e9e8:	f4 0c 09 4c 	lsl	r12,r10,r12
8000e9ec:	04 3c       	cp.w	r12,r2
8000e9ee:	5f 38       	srlo	r8
8000e9f0:	f3 e8 00 08 	and	r8,r9,r8
8000e9f4:	c0 20       	breq	8000e9f8 <__avr32_udiv64+0x1e8>
8000e9f6:	20 1b       	sub	r11,1
8000e9f8:	30 0c       	mov	r12,0
8000e9fa:	16 9a       	mov	r10,r11
8000e9fc:	18 9b       	mov	r11,r12
8000e9fe:	2f ed       	sub	sp,-8
8000ea00:	d8 32       	popm	r0-r7,pc
8000ea02:	f6 08 09 49 	lsl	r9,r11,r8
8000ea06:	fc 08 09 4e 	lsl	lr,lr,r8
8000ea0a:	f0 01 11 20 	rsub	r1,r8,32
8000ea0e:	fc 05 16 10 	lsr	r5,lr,0x10
8000ea12:	f4 01 0a 42 	lsr	r2,r10,r1
8000ea16:	f6 01 0a 41 	lsr	r1,r11,r1
8000ea1a:	12 42       	or	r2,r9
8000ea1c:	e2 05 0d 00 	divu	r0,r1,r5
8000ea20:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000ea24:	e4 06 16 10 	lsr	r6,r2,0x10
8000ea28:	00 93       	mov	r3,r0
8000ea2a:	ed e1 11 06 	or	r6,r6,r1<<0x10
8000ea2e:	e0 09 02 4c 	mul	r12,r0,r9
8000ea32:	0c 3c       	cp.w	r12,r6
8000ea34:	e0 88 00 07 	brls	8000ea42 <__avr32_udiv64+0x232>
8000ea38:	20 13       	sub	r3,1
8000ea3a:	1c 06       	add	r6,lr
8000ea3c:	0c 3e       	cp.w	lr,r6
8000ea3e:	e0 88 00 2c 	brls	8000ea96 <__avr32_udiv64+0x286>
8000ea42:	ec 0c 01 01 	sub	r1,r6,r12
8000ea46:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000ea4a:	e2 05 0d 00 	divu	r0,r1,r5
8000ea4e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000ea52:	00 9c       	mov	r12,r0
8000ea54:	e0 09 02 41 	mul	r1,r0,r9
8000ea58:	16 31       	cp.w	r1,r11
8000ea5a:	e0 88 00 0c 	brls	8000ea72 <__avr32_udiv64+0x262>
8000ea5e:	20 1c       	sub	r12,1
8000ea60:	1c 0b       	add	r11,lr
8000ea62:	16 3e       	cp.w	lr,r11
8000ea64:	e0 8b 00 07 	brhi	8000ea72 <__avr32_udiv64+0x262>
8000ea68:	16 31       	cp.w	r1,r11
8000ea6a:	f7 bc 0b 01 	subhi	r12,1
8000ea6e:	f7 de eb 0b 	addhi	r11,r11,lr
8000ea72:	f4 08 09 46 	lsl	r6,r10,r8
8000ea76:	02 1b       	sub	r11,r1
8000ea78:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
8000ea7c:	c3 ab       	rjmp	8000e8f0 <__avr32_udiv64+0xe0>
8000ea7e:	12 3e       	cp.w	lr,r9
8000ea80:	f3 d8 eb 09 	addhi	r9,r9,r8
8000ea84:	f7 bb 0b 01 	subhi	r11,1
8000ea88:	ca 8b       	rjmp	8000e9d8 <__avr32_udiv64+0x1c8>
8000ea8a:	1c 3b       	cp.w	r11,lr
8000ea8c:	f7 b6 0b 01 	subhi	r6,1
8000ea90:	fd d8 eb 0e 	addhi	lr,lr,r8
8000ea94:	c9 0b       	rjmp	8000e9b4 <__avr32_udiv64+0x1a4>
8000ea96:	0c 3c       	cp.w	r12,r6
8000ea98:	f7 b3 0b 01 	subhi	r3,1
8000ea9c:	ed de eb 06 	addhi	r6,r6,lr
8000eaa0:	cd 1b       	rjmp	8000ea42 <__avr32_udiv64+0x232>

8000eaa2 <memcpy>:
8000eaa2:	58 8a       	cp.w	r10,8
8000eaa4:	c2 f5       	brlt	8000eb02 <memcpy+0x60>
8000eaa6:	f9 eb 10 09 	or	r9,r12,r11
8000eaaa:	e2 19 00 03 	andl	r9,0x3,COH
8000eaae:	e0 81 00 97 	brne	8000ebdc <memcpy+0x13a>
8000eab2:	e0 4a 00 20 	cp.w	r10,32
8000eab6:	c3 b4       	brge	8000eb2c <memcpy+0x8a>
8000eab8:	f4 08 14 02 	asr	r8,r10,0x2
8000eabc:	f0 09 11 08 	rsub	r9,r8,8
8000eac0:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000eac4:	76 69       	ld.w	r9,r11[0x18]
8000eac6:	99 69       	st.w	r12[0x18],r9
8000eac8:	76 59       	ld.w	r9,r11[0x14]
8000eaca:	99 59       	st.w	r12[0x14],r9
8000eacc:	76 49       	ld.w	r9,r11[0x10]
8000eace:	99 49       	st.w	r12[0x10],r9
8000ead0:	76 39       	ld.w	r9,r11[0xc]
8000ead2:	99 39       	st.w	r12[0xc],r9
8000ead4:	76 29       	ld.w	r9,r11[0x8]
8000ead6:	99 29       	st.w	r12[0x8],r9
8000ead8:	76 19       	ld.w	r9,r11[0x4]
8000eada:	99 19       	st.w	r12[0x4],r9
8000eadc:	76 09       	ld.w	r9,r11[0x0]
8000eade:	99 09       	st.w	r12[0x0],r9
8000eae0:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000eae4:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000eae8:	e0 1a 00 03 	andl	r10,0x3
8000eaec:	f4 0a 11 04 	rsub	r10,r10,4
8000eaf0:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000eaf4:	17 a9       	ld.ub	r9,r11[0x2]
8000eaf6:	b0 a9       	st.b	r8[0x2],r9
8000eaf8:	17 99       	ld.ub	r9,r11[0x1]
8000eafa:	b0 99       	st.b	r8[0x1],r9
8000eafc:	17 89       	ld.ub	r9,r11[0x0]
8000eafe:	b0 89       	st.b	r8[0x0],r9
8000eb00:	5e fc       	retal	r12
8000eb02:	f4 0a 11 09 	rsub	r10,r10,9
8000eb06:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000eb0a:	17 f9       	ld.ub	r9,r11[0x7]
8000eb0c:	b8 f9       	st.b	r12[0x7],r9
8000eb0e:	17 e9       	ld.ub	r9,r11[0x6]
8000eb10:	b8 e9       	st.b	r12[0x6],r9
8000eb12:	17 d9       	ld.ub	r9,r11[0x5]
8000eb14:	b8 d9       	st.b	r12[0x5],r9
8000eb16:	17 c9       	ld.ub	r9,r11[0x4]
8000eb18:	b8 c9       	st.b	r12[0x4],r9
8000eb1a:	17 b9       	ld.ub	r9,r11[0x3]
8000eb1c:	b8 b9       	st.b	r12[0x3],r9
8000eb1e:	17 a9       	ld.ub	r9,r11[0x2]
8000eb20:	b8 a9       	st.b	r12[0x2],r9
8000eb22:	17 99       	ld.ub	r9,r11[0x1]
8000eb24:	b8 99       	st.b	r12[0x1],r9
8000eb26:	17 89       	ld.ub	r9,r11[0x0]
8000eb28:	b8 89       	st.b	r12[0x0],r9
8000eb2a:	5e fc       	retal	r12
8000eb2c:	eb cd 40 c0 	pushm	r6-r7,lr
8000eb30:	18 99       	mov	r9,r12
8000eb32:	22 0a       	sub	r10,32
8000eb34:	b7 07       	ld.d	r6,r11++
8000eb36:	b3 26       	st.d	r9++,r6
8000eb38:	b7 07       	ld.d	r6,r11++
8000eb3a:	b3 26       	st.d	r9++,r6
8000eb3c:	b7 07       	ld.d	r6,r11++
8000eb3e:	b3 26       	st.d	r9++,r6
8000eb40:	b7 07       	ld.d	r6,r11++
8000eb42:	b3 26       	st.d	r9++,r6
8000eb44:	22 0a       	sub	r10,32
8000eb46:	cf 74       	brge	8000eb34 <memcpy+0x92>
8000eb48:	2f 0a       	sub	r10,-16
8000eb4a:	c0 65       	brlt	8000eb56 <memcpy+0xb4>
8000eb4c:	b7 07       	ld.d	r6,r11++
8000eb4e:	b3 26       	st.d	r9++,r6
8000eb50:	b7 07       	ld.d	r6,r11++
8000eb52:	b3 26       	st.d	r9++,r6
8000eb54:	21 0a       	sub	r10,16
8000eb56:	5c 3a       	neg	r10
8000eb58:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000eb5c:	d7 03       	nop
8000eb5e:	d7 03       	nop
8000eb60:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000eb64:	f3 66 00 0e 	st.b	r9[14],r6
8000eb68:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000eb6c:	f3 66 00 0d 	st.b	r9[13],r6
8000eb70:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000eb74:	f3 66 00 0c 	st.b	r9[12],r6
8000eb78:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000eb7c:	f3 66 00 0b 	st.b	r9[11],r6
8000eb80:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000eb84:	f3 66 00 0a 	st.b	r9[10],r6
8000eb88:	f7 36 00 09 	ld.ub	r6,r11[9]
8000eb8c:	f3 66 00 09 	st.b	r9[9],r6
8000eb90:	f7 36 00 08 	ld.ub	r6,r11[8]
8000eb94:	f3 66 00 08 	st.b	r9[8],r6
8000eb98:	f7 36 00 07 	ld.ub	r6,r11[7]
8000eb9c:	f3 66 00 07 	st.b	r9[7],r6
8000eba0:	f7 36 00 06 	ld.ub	r6,r11[6]
8000eba4:	f3 66 00 06 	st.b	r9[6],r6
8000eba8:	f7 36 00 05 	ld.ub	r6,r11[5]
8000ebac:	f3 66 00 05 	st.b	r9[5],r6
8000ebb0:	f7 36 00 04 	ld.ub	r6,r11[4]
8000ebb4:	f3 66 00 04 	st.b	r9[4],r6
8000ebb8:	f7 36 00 03 	ld.ub	r6,r11[3]
8000ebbc:	f3 66 00 03 	st.b	r9[3],r6
8000ebc0:	f7 36 00 02 	ld.ub	r6,r11[2]
8000ebc4:	f3 66 00 02 	st.b	r9[2],r6
8000ebc8:	f7 36 00 01 	ld.ub	r6,r11[1]
8000ebcc:	f3 66 00 01 	st.b	r9[1],r6
8000ebd0:	f7 36 00 00 	ld.ub	r6,r11[0]
8000ebd4:	f3 66 00 00 	st.b	r9[0],r6
8000ebd8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ebdc:	20 1a       	sub	r10,1
8000ebde:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000ebe2:	f8 0a 0b 09 	st.b	r12[r10],r9
8000ebe6:	cf b1       	brne	8000ebdc <memcpy+0x13a>
8000ebe8:	5e fc       	retal	r12

8000ebea <memset>:
8000ebea:	18 98       	mov	r8,r12
8000ebec:	c0 38       	rjmp	8000ebf2 <memset+0x8>
8000ebee:	10 cb       	st.b	r8++,r11
8000ebf0:	20 1a       	sub	r10,1
8000ebf2:	58 0a       	cp.w	r10,0
8000ebf4:	cf d1       	brne	8000ebee <memset+0x4>
8000ebf6:	5e fc       	retal	r12

Disassembly of section .exception:

8000ec00 <_evba>:
8000ec00:	c0 08       	rjmp	8000ec00 <_evba>
	...

8000ec04 <_handle_TLB_Multiple_Hit>:
8000ec04:	c0 08       	rjmp	8000ec04 <_handle_TLB_Multiple_Hit>
	...

8000ec08 <_handle_Bus_Error_Data_Fetch>:
8000ec08:	c0 08       	rjmp	8000ec08 <_handle_Bus_Error_Data_Fetch>
	...

8000ec0c <_handle_Bus_Error_Instruction_Fetch>:
8000ec0c:	c0 08       	rjmp	8000ec0c <_handle_Bus_Error_Instruction_Fetch>
	...

8000ec10 <_handle_NMI>:
8000ec10:	c0 08       	rjmp	8000ec10 <_handle_NMI>
	...

8000ec14 <_handle_Instruction_Address>:
8000ec14:	c0 08       	rjmp	8000ec14 <_handle_Instruction_Address>
	...

8000ec18 <_handle_ITLB_Protection>:
8000ec18:	c0 08       	rjmp	8000ec18 <_handle_ITLB_Protection>
	...

8000ec1c <_handle_Breakpoint>:
8000ec1c:	c0 08       	rjmp	8000ec1c <_handle_Breakpoint>
	...

8000ec20 <_handle_Illegal_Opcode>:
8000ec20:	c0 08       	rjmp	8000ec20 <_handle_Illegal_Opcode>
	...

8000ec24 <_handle_Unimplemented_Instruction>:
8000ec24:	c0 08       	rjmp	8000ec24 <_handle_Unimplemented_Instruction>
	...

8000ec28 <_handle_Privilege_Violation>:
8000ec28:	c0 08       	rjmp	8000ec28 <_handle_Privilege_Violation>
	...

8000ec2c <_handle_Floating_Point>:
8000ec2c:	c0 08       	rjmp	8000ec2c <_handle_Floating_Point>
	...

8000ec30 <_handle_Coprocessor_Absent>:
8000ec30:	c0 08       	rjmp	8000ec30 <_handle_Coprocessor_Absent>
	...

8000ec34 <_handle_Data_Address_Read>:
8000ec34:	c0 08       	rjmp	8000ec34 <_handle_Data_Address_Read>
	...

8000ec38 <_handle_Data_Address_Write>:
8000ec38:	c0 08       	rjmp	8000ec38 <_handle_Data_Address_Write>
	...

8000ec3c <_handle_DTLB_Protection_Read>:
8000ec3c:	c0 08       	rjmp	8000ec3c <_handle_DTLB_Protection_Read>
	...

8000ec40 <_handle_DTLB_Protection_Write>:
8000ec40:	c0 08       	rjmp	8000ec40 <_handle_DTLB_Protection_Write>
	...

8000ec44 <_handle_DTLB_Modified>:
8000ec44:	c0 08       	rjmp	8000ec44 <_handle_DTLB_Modified>
	...

8000ec50 <_handle_ITLB_Miss>:
8000ec50:	c0 08       	rjmp	8000ec50 <_handle_ITLB_Miss>
	...

8000ec60 <_handle_DTLB_Miss_Read>:
8000ec60:	c0 08       	rjmp	8000ec60 <_handle_DTLB_Miss_Read>
	...

8000ec70 <_handle_DTLB_Miss_Write>:
8000ec70:	c0 08       	rjmp	8000ec70 <_handle_DTLB_Miss_Write>
	...

8000ed00 <_handle_Supervisor_Call>:
8000ed00:	c0 08       	rjmp	8000ed00 <_handle_Supervisor_Call>
8000ed02:	d7 03       	nop

8000ed04 <_int0>:
8000ed04:	30 0c       	mov	r12,0
8000ed06:	fe b0 d2 6b 	rcall	800091dc <_get_interrupt_handler>
8000ed0a:	58 0c       	cp.w	r12,0
8000ed0c:	f8 0f 17 10 	movne	pc,r12
8000ed10:	d6 03       	rete

8000ed12 <_int1>:
8000ed12:	30 1c       	mov	r12,1
8000ed14:	fe b0 d2 64 	rcall	800091dc <_get_interrupt_handler>
8000ed18:	58 0c       	cp.w	r12,0
8000ed1a:	f8 0f 17 10 	movne	pc,r12
8000ed1e:	d6 03       	rete

8000ed20 <_int2>:
8000ed20:	30 2c       	mov	r12,2
8000ed22:	fe b0 d2 5d 	rcall	800091dc <_get_interrupt_handler>
8000ed26:	58 0c       	cp.w	r12,0
8000ed28:	f8 0f 17 10 	movne	pc,r12
8000ed2c:	d6 03       	rete

8000ed2e <_int3>:
8000ed2e:	30 3c       	mov	r12,3
8000ed30:	fe b0 d2 56 	rcall	800091dc <_get_interrupt_handler>
8000ed34:	58 0c       	cp.w	r12,0
8000ed36:	f8 0f 17 10 	movne	pc,r12
8000ed3a:	d6 03       	rete
8000ed3c:	d7 03       	nop
8000ed3e:	d7 03       	nop
8000ed40:	d7 03       	nop
8000ed42:	d7 03       	nop
8000ed44:	d7 03       	nop
8000ed46:	d7 03       	nop
8000ed48:	d7 03       	nop
8000ed4a:	d7 03       	nop
8000ed4c:	d7 03       	nop
8000ed4e:	d7 03       	nop
8000ed50:	d7 03       	nop
8000ed52:	d7 03       	nop
8000ed54:	d7 03       	nop
8000ed56:	d7 03       	nop
8000ed58:	d7 03       	nop
8000ed5a:	d7 03       	nop
8000ed5c:	d7 03       	nop
8000ed5e:	d7 03       	nop
8000ed60:	d7 03       	nop
8000ed62:	d7 03       	nop
8000ed64:	d7 03       	nop
8000ed66:	d7 03       	nop
8000ed68:	d7 03       	nop
8000ed6a:	d7 03       	nop
8000ed6c:	d7 03       	nop
8000ed6e:	d7 03       	nop
8000ed70:	d7 03       	nop
8000ed72:	d7 03       	nop
8000ed74:	d7 03       	nop
8000ed76:	d7 03       	nop
8000ed78:	d7 03       	nop
8000ed7a:	d7 03       	nop
8000ed7c:	d7 03       	nop
8000ed7e:	d7 03       	nop
8000ed80:	d7 03       	nop
8000ed82:	d7 03       	nop
8000ed84:	d7 03       	nop
8000ed86:	d7 03       	nop
8000ed88:	d7 03       	nop
8000ed8a:	d7 03       	nop
8000ed8c:	d7 03       	nop
8000ed8e:	d7 03       	nop
8000ed90:	d7 03       	nop
8000ed92:	d7 03       	nop
8000ed94:	d7 03       	nop
8000ed96:	d7 03       	nop
8000ed98:	d7 03       	nop
8000ed9a:	d7 03       	nop
8000ed9c:	d7 03       	nop
8000ed9e:	d7 03       	nop
8000eda0:	d7 03       	nop
8000eda2:	d7 03       	nop
8000eda4:	d7 03       	nop
8000eda6:	d7 03       	nop
8000eda8:	d7 03       	nop
8000edaa:	d7 03       	nop
8000edac:	d7 03       	nop
8000edae:	d7 03       	nop
8000edb0:	d7 03       	nop
8000edb2:	d7 03       	nop
8000edb4:	d7 03       	nop
8000edb6:	d7 03       	nop
8000edb8:	d7 03       	nop
8000edba:	d7 03       	nop
8000edbc:	d7 03       	nop
8000edbe:	d7 03       	nop
8000edc0:	d7 03       	nop
8000edc2:	d7 03       	nop
8000edc4:	d7 03       	nop
8000edc6:	d7 03       	nop
8000edc8:	d7 03       	nop
8000edca:	d7 03       	nop
8000edcc:	d7 03       	nop
8000edce:	d7 03       	nop
8000edd0:	d7 03       	nop
8000edd2:	d7 03       	nop
8000edd4:	d7 03       	nop
8000edd6:	d7 03       	nop
8000edd8:	d7 03       	nop
8000edda:	d7 03       	nop
8000eddc:	d7 03       	nop
8000edde:	d7 03       	nop
8000ede0:	d7 03       	nop
8000ede2:	d7 03       	nop
8000ede4:	d7 03       	nop
8000ede6:	d7 03       	nop
8000ede8:	d7 03       	nop
8000edea:	d7 03       	nop
8000edec:	d7 03       	nop
8000edee:	d7 03       	nop
8000edf0:	d7 03       	nop
8000edf2:	d7 03       	nop
8000edf4:	d7 03       	nop
8000edf6:	d7 03       	nop
8000edf8:	d7 03       	nop
8000edfa:	d7 03       	nop
8000edfc:	d7 03       	nop
8000edfe:	d7 03       	nop
