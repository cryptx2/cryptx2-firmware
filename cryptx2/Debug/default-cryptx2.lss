
default-cryptx2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000cc24  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000ee00  8000ee00  0000f200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007c8  8000f000  8000f000  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         0000023c  00000008  8000f7c8  0000fc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  00000244  8000fa04  0000fe44  2**0
                  ALLOC
  8 .bss          00000de8  00000248  00000248  00000000  2**2
                  ALLOC
  9 .heap         0000dfd0  00001030  00001030  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000fe44  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001338  00000000  00000000  0000fe78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 000029d2  00000000  00000000  000111b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000254f2  00000000  00000000  00013b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003515  00000000  00000000  00039074  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000075a2  00000000  00000000  0003c589  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003af0  00000000  00000000  00043b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a02f  00000000  00000000  0004761c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00005c83  00000000  00000000  0005164b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .flash_nvram  000000c4  8003fe00  8000fa04  00010200  2**2
                  ALLOC
 21 .debug_ranges 00001300  00000000  00000000  000572d0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	bb 5c       	asr	r12,0x1b

Disassembly of section .text:

80002008 <crcInit>:
 * Returns:		None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 3d       	sub	sp,12


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
80002010:	30 08       	mov	r8,0
80002012:	ef 48 ff f8 	st.w	r7[-8],r8
80002016:	c3 78       	rjmp	80002084 <crcInit+0x7c>
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
80002018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000201c:	5c 88       	casts.h	r8
8000201e:	a9 68       	lsl	r8,0x8
80002020:	ef 58 ff f6 	st.h	r7[-10],r8

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
80002024:	30 88       	mov	r8,8
80002026:	ef 68 ff ff 	st.b	r7[-1],r8
8000202a:	c1 b8       	rjmp	80002060 <crcInit+0x58>
        {
            /*
             * Try to divide the current data bit.
             */			
            if (remainder & TOPBIT)
8000202c:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80002030:	30 08       	mov	r8,0
80002032:	f0 09 19 00 	cp.h	r9,r8
80002036:	c0 b4       	brge	8000204c <crcInit+0x44>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
80002038:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000203c:	a1 78       	lsl	r8,0x1
8000203e:	5c 88       	casts.h	r8
80002040:	ec 18 10 21 	eorl	r8,0x1021
80002044:	5c 88       	casts.h	r8
80002046:	ef 58 ff f6 	st.h	r7[-10],r8
8000204a:	c0 68       	rjmp	80002056 <crcInit+0x4e>
            }
            else
            {
                remainder = (remainder << 1);
8000204c:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002050:	a1 78       	lsl	r8,0x1
80002052:	ef 58 ff f6 	st.h	r7[-10],r8
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
80002056:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000205a:	20 18       	sub	r8,1
8000205c:	ef 68 ff ff 	st.b	r7[-1],r8
80002060:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002064:	30 08       	mov	r8,0
80002066:	f0 09 18 00 	cp.b	r9,r8
8000206a:	ce 11       	brne	8000202c <crcInit+0x24>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
8000206c:	ee fa ff f8 	ld.w	r10,r7[-8]
80002070:	48 a9       	lddpc	r9,80002098 <crcInit+0x90>
80002072:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002076:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
8000207a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000207e:	2f f8       	sub	r8,-1
80002080:	ef 48 ff f8 	st.w	r7[-8],r8
80002084:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002088:	e0 48 00 ff 	cp.w	r8,255
8000208c:	fe 9a ff c6 	brle	80002018 <crcInit+0x10>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
80002090:	2f dd       	sub	sp,-12
80002092:	e3 cd 80 80 	ldm	sp++,r7,pc
80002096:	00 00       	add	r0,r0
80002098:	00 00       	add	r0,r0
8000209a:	08 66       	and	r6,r4

8000209c <crcFast>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
8000209c:	eb cd 40 80 	pushm	r7,lr
800020a0:	1a 97       	mov	r7,sp
800020a2:	20 4d       	sub	sp,16
800020a4:	ef 4c ff f4 	st.w	r7[-12],r12
800020a8:	ef 4b ff f0 	st.w	r7[-16],r11
    crc	           remainder = INITIAL_REMAINDER;
800020ac:	3f f8       	mov	r8,-1
800020ae:	ef 58 ff f8 	st.h	r7[-8],r8


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
800020b2:	30 08       	mov	r8,0
800020b4:	ef 48 ff fc 	st.w	r7[-4],r8
800020b8:	c2 68       	rjmp	80002104 <crcFast+0x68>
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
800020ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800020c2:	f2 08 00 08 	add	r8,r9,r8
800020c6:	11 89       	ld.ub	r9,r8[0x0]
800020c8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800020cc:	a9 88       	lsr	r8,0x8
800020ce:	5c 88       	casts.h	r8
800020d0:	5c 58       	castu.b	r8
800020d2:	f3 e8 20 08 	eor	r8,r9,r8
800020d6:	ef 68 ff fb 	st.b	r7[-5],r8
  		remainder = crcTable[data] ^ (remainder << 8);
800020da:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800020de:	49 08       	lddpc	r8,8000211c <crcFast+0x80>
800020e0:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800020e4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800020e8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800020ec:	a9 68       	lsl	r8,0x8
800020ee:	5c 88       	casts.h	r8
800020f0:	f3 e8 20 08 	eor	r8,r9,r8
800020f4:	5c 88       	casts.h	r8
800020f6:	ef 58 ff f8 	st.h	r7[-8],r8


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
800020fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020fe:	2f f8       	sub	r8,-1
80002100:	ef 48 ff fc 	st.w	r7[-4],r8
80002104:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002108:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000210c:	10 39       	cp.w	r9,r8
8000210e:	cd 65       	brlt	800020ba <crcFast+0x1e>
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
80002110:	ef 08 ff f8 	ld.sh	r8,r7[-8]

}   /* crcFast() */
80002114:	10 9c       	mov	r12,r8
80002116:	2f cd       	sub	sp,-16
80002118:	e3 cd 80 80 	ldm	sp++,r7,pc
8000211c:	00 00       	add	r0,r0
8000211e:	08 66       	and	r6,r4

80002120 <hmac_sha256_init>:
80002120:	eb cd 40 80 	pushm	r7,lr
80002124:	1a 97       	mov	r7,sp
80002126:	20 fd       	sub	sp,60
80002128:	ef 4c ff cc 	st.w	r7[-52],r12
8000212c:	ef 4b ff c8 	st.w	r7[-56],r11
80002130:	ef 4a ff c4 	st.w	r7[-60],r10
80002134:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002138:	e0 48 00 40 	cp.w	r8,64
8000213c:	c0 91       	brne	8000214e <hmac_sha256_init+0x2e>
8000213e:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002142:	ef 48 ff f8 	st.w	r7[-8],r8
80002146:	34 08       	mov	r8,64
80002148:	ef 48 ff f4 	st.w	r7[-12],r8
8000214c:	c4 28       	rjmp	800021d0 <hmac_sha256_init+0xb0>
8000214e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002152:	e0 48 00 40 	cp.w	r8,64
80002156:	e0 88 00 13 	brls	8000217c <hmac_sha256_init+0x5c>
8000215a:	32 08       	mov	r8,32
8000215c:	ef 48 ff f4 	st.w	r7[-12],r8
80002160:	ee c8 00 30 	sub	r8,r7,48
80002164:	10 9a       	mov	r10,r8
80002166:	ee fb ff c4 	ld.w	r11,r7[-60]
8000216a:	ee fc ff c8 	ld.w	r12,r7[-56]
8000216e:	f0 1f 00 54 	mcall	800022bc <hmac_sha256_init+0x19c>
80002172:	ee c8 00 30 	sub	r8,r7,48
80002176:	ef 48 ff f8 	st.w	r7[-8],r8
8000217a:	c0 98       	rjmp	8000218c <hmac_sha256_init+0x6c>
8000217c:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002180:	ef 48 ff f8 	st.w	r7[-8],r8
80002184:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002188:	ef 48 ff f4 	st.w	r7[-12],r8
8000218c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002190:	f0 08 11 40 	rsub	r8,r8,64
80002194:	ef 48 ff f0 	st.w	r7[-16],r8
80002198:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000219c:	f0 c9 fd 60 	sub	r9,r8,-672
800021a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021a4:	f2 08 00 08 	add	r8,r9,r8
800021a8:	ee fa ff f0 	ld.w	r10,r7[-16]
800021ac:	33 6b       	mov	r11,54
800021ae:	10 9c       	mov	r12,r8
800021b0:	f0 1f 00 44 	mcall	800022c0 <hmac_sha256_init+0x1a0>
800021b4:	ee f8 ff cc 	ld.w	r8,r7[-52]
800021b8:	f0 c9 fd 20 	sub	r9,r8,-736
800021bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021c0:	f2 08 00 08 	add	r8,r9,r8
800021c4:	ee fa ff f0 	ld.w	r10,r7[-16]
800021c8:	35 cb       	mov	r11,92
800021ca:	10 9c       	mov	r12,r8
800021cc:	f0 1f 00 3d 	mcall	800022c0 <hmac_sha256_init+0x1a0>
800021d0:	30 08       	mov	r8,0
800021d2:	ef 48 ff fc 	st.w	r7[-4],r8
800021d6:	c2 a8       	rjmp	8000222a <hmac_sha256_init+0x10a>
800021d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800021dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021e0:	ee fa ff f8 	ld.w	r10,r7[-8]
800021e4:	f4 08 00 08 	add	r8,r10,r8
800021e8:	11 88       	ld.ub	r8,r8[0x0]
800021ea:	ec 18 00 36 	eorl	r8,0x36
800021ee:	5c 58       	castu.b	r8
800021f0:	ee fa ff cc 	ld.w	r10,r7[-52]
800021f4:	f4 09 00 09 	add	r9,r10,r9
800021f8:	f3 68 02 a0 	st.b	r9[672],r8
800021fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002200:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002204:	ee fa ff f8 	ld.w	r10,r7[-8]
80002208:	f4 08 00 08 	add	r8,r10,r8
8000220c:	11 88       	ld.ub	r8,r8[0x0]
8000220e:	ec 18 00 5c 	eorl	r8,0x5c
80002212:	5c 58       	castu.b	r8
80002214:	ee fa ff cc 	ld.w	r10,r7[-52]
80002218:	f4 09 00 09 	add	r9,r10,r9
8000221c:	f3 68 02 e0 	st.b	r9[736],r8
80002220:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002224:	2f f8       	sub	r8,-1
80002226:	ef 48 ff fc 	st.w	r7[-4],r8
8000222a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000222e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002232:	10 39       	cp.w	r9,r8
80002234:	fe 99 ff d2 	brgt	800021d8 <hmac_sha256_init+0xb8>
80002238:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000223c:	10 9c       	mov	r12,r8
8000223e:	f0 1f 00 22 	mcall	800022c4 <hmac_sha256_init+0x1a4>
80002242:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002246:	f0 c9 fd 60 	sub	r9,r8,-672
8000224a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000224e:	34 0a       	mov	r10,64
80002250:	12 9b       	mov	r11,r9
80002252:	10 9c       	mov	r12,r8
80002254:	f0 1f 00 1d 	mcall	800022c8 <hmac_sha256_init+0x1a8>
80002258:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000225c:	f0 c8 ff 58 	sub	r8,r8,-168
80002260:	10 9c       	mov	r12,r8
80002262:	f0 1f 00 19 	mcall	800022c4 <hmac_sha256_init+0x1a4>
80002266:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000226a:	f0 c9 fd 20 	sub	r9,r8,-736
8000226e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002272:	f0 c8 ff 58 	sub	r8,r8,-168
80002276:	34 0a       	mov	r10,64
80002278:	12 9b       	mov	r11,r9
8000227a:	10 9c       	mov	r12,r8
8000227c:	f0 1f 00 13 	mcall	800022c8 <hmac_sha256_init+0x1a8>
80002280:	ee f9 ff cc 	ld.w	r9,r7[-52]
80002284:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002288:	f0 c8 fe b0 	sub	r8,r8,-336
8000228c:	e0 6a 00 a8 	mov	r10,168
80002290:	12 9b       	mov	r11,r9
80002292:	10 9c       	mov	r12,r8
80002294:	f0 1f 00 0e 	mcall	800022cc <hmac_sha256_init+0x1ac>
80002298:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000229c:	f0 c9 ff 58 	sub	r9,r8,-168
800022a0:	ee f8 ff cc 	ld.w	r8,r7[-52]
800022a4:	f0 c8 fe 08 	sub	r8,r8,-504
800022a8:	e0 6a 00 a8 	mov	r10,168
800022ac:	12 9b       	mov	r11,r9
800022ae:	10 9c       	mov	r12,r8
800022b0:	f0 1f 00 07 	mcall	800022cc <hmac_sha256_init+0x1ac>
800022b4:	2f 1d       	sub	sp,-60
800022b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800022ba:	00 00       	add	r0,r0
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	27 5c       	sub	r12,117
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	ec 1e 80 00 	eorl	lr,0x8000
800022c6:	27 b0       	sub	r0,123
800022c8:	80 00       	ld.sh	r0,r0[0x0]
800022ca:	28 0c       	sub	r12,-128
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	ea d6 eb cd 	satsub.w	r6,r5,-5171

800022d0 <hmac_sha256_update>:
800022d0:	eb cd 40 80 	pushm	r7,lr
800022d4:	1a 97       	mov	r7,sp
800022d6:	20 3d       	sub	sp,12
800022d8:	ef 4c ff fc 	st.w	r7[-4],r12
800022dc:	ef 4b ff f8 	st.w	r7[-8],r11
800022e0:	ef 4a ff f4 	st.w	r7[-12],r10
800022e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022e8:	ee fa ff f4 	ld.w	r10,r7[-12]
800022ec:	ee fb ff f8 	ld.w	r11,r7[-8]
800022f0:	10 9c       	mov	r12,r8
800022f2:	f0 1f 00 03 	mcall	800022fc <hmac_sha256_update+0x2c>
800022f6:	2f dd       	sub	sp,-12
800022f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800022fc:	80 00       	ld.sh	r0,r0[0x0]
800022fe:	28 0c       	sub	r12,-128

80002300 <hmac_sha256_final>:
80002300:	eb cd 40 80 	pushm	r7,lr
80002304:	1a 97       	mov	r7,sp
80002306:	21 3d       	sub	sp,76
80002308:	ef 4c ff bc 	st.w	r7[-68],r12
8000230c:	ef 4b ff b8 	st.w	r7[-72],r11
80002310:	ef 4a ff b4 	st.w	r7[-76],r10
80002314:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002318:	ee c9 00 20 	sub	r9,r7,32
8000231c:	12 9b       	mov	r11,r9
8000231e:	10 9c       	mov	r12,r8
80002320:	f0 1f 00 12 	mcall	80002368 <hmac_sha256_final+0x68>
80002324:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002328:	f0 c8 ff 58 	sub	r8,r8,-168
8000232c:	ee c9 00 20 	sub	r9,r7,32
80002330:	32 0a       	mov	r10,32
80002332:	12 9b       	mov	r11,r9
80002334:	10 9c       	mov	r12,r8
80002336:	f0 1f 00 0e 	mcall	8000236c <hmac_sha256_final+0x6c>
8000233a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000233e:	f0 c8 ff 58 	sub	r8,r8,-168
80002342:	ee c9 00 40 	sub	r9,r7,64
80002346:	12 9b       	mov	r11,r9
80002348:	10 9c       	mov	r12,r8
8000234a:	f0 1f 00 08 	mcall	80002368 <hmac_sha256_final+0x68>
8000234e:	ee c8 00 40 	sub	r8,r7,64
80002352:	ee fa ff b4 	ld.w	r10,r7[-76]
80002356:	10 9b       	mov	r11,r8
80002358:	ee fc ff b8 	ld.w	r12,r7[-72]
8000235c:	f0 1f 00 05 	mcall	80002370 <hmac_sha256_final+0x70>
80002360:	2e dd       	sub	sp,-76
80002362:	e3 cd 80 80 	ldm	sp++,r7,pc
80002366:	00 00       	add	r0,r0
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	29 34       	sub	r4,-109
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	28 0c       	sub	r12,-128
80002370:	80 00       	ld.sh	r0,r0[0x0]
80002372:	ea d6 eb cd 	satsub.w	r6,r5,-5171

80002374 <hmac_sha256>:
80002374:	eb cd 40 c0 	pushm	r6-r7,lr
80002378:	1a 97       	mov	r7,sp
8000237a:	fa cd 03 34 	sub	sp,sp,820
8000237e:	ee c6 ff f4 	sub	r6,r7,-12
80002382:	ef 4c fc dc 	st.w	r7[-804],r12
80002386:	ef 4b fc d8 	st.w	r7[-808],r11
8000238a:	ef 4a fc d4 	st.w	r7[-812],r10
8000238e:	ef 49 fc d0 	st.w	r7[-816],r9
80002392:	ef 48 fc cc 	st.w	r7[-820],r8
80002396:	ee c8 03 20 	sub	r8,r7,800
8000239a:	ee fa fc d8 	ld.w	r10,r7[-808]
8000239e:	ee fb fc dc 	ld.w	r11,r7[-804]
800023a2:	10 9c       	mov	r12,r8
800023a4:	f0 1f 00 0c 	mcall	800023d4 <hmac_sha256+0x60>
800023a8:	ee c8 03 20 	sub	r8,r7,800
800023ac:	ee fa fc d0 	ld.w	r10,r7[-816]
800023b0:	ee fb fc d4 	ld.w	r11,r7[-812]
800023b4:	10 9c       	mov	r12,r8
800023b6:	f0 1f 00 09 	mcall	800023d8 <hmac_sha256+0x64>
800023ba:	ee c8 03 20 	sub	r8,r7,800
800023be:	6c 0a       	ld.w	r10,r6[0x0]
800023c0:	ee fb fc cc 	ld.w	r11,r7[-820]
800023c4:	10 9c       	mov	r12,r8
800023c6:	f0 1f 00 06 	mcall	800023dc <hmac_sha256+0x68>
800023ca:	fe 3d fc cc 	sub	sp,-820
800023ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023d2:	00 00       	add	r0,r0
800023d4:	80 00       	ld.sh	r0,r0[0x0]
800023d6:	21 20       	sub	r0,18
800023d8:	80 00       	ld.sh	r0,r0[0x0]
800023da:	22 d0       	sub	r0,45
800023dc:	80 00       	ld.sh	r0,r0[0x0]
800023de:	23 00       	sub	r0,48

800023e0 <sha256_transf>:
800023e0:	eb cd 40 80 	pushm	r7,lr
800023e4:	1a 97       	mov	r7,sp
800023e6:	fa cd 01 40 	sub	sp,sp,320
800023ea:	ef 4c fe c8 	st.w	r7[-312],r12
800023ee:	ef 4b fe c4 	st.w	r7[-316],r11
800023f2:	ef 4a fe c0 	st.w	r7[-320],r10
800023f6:	30 08       	mov	r8,0
800023f8:	ef 48 ff f8 	st.w	r7[-8],r8
800023fc:	ca 49       	rjmp	80002744 <sha256_transf+0x364>
800023fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002402:	a7 68       	lsl	r8,0x6
80002404:	ee f9 fe c4 	ld.w	r9,r7[-316]
80002408:	f2 08 00 08 	add	r8,r9,r8
8000240c:	ef 48 ff f4 	st.w	r7[-12],r8
80002410:	30 08       	mov	r8,0
80002412:	ef 48 ff fc 	st.w	r7[-4],r8
80002416:	c3 98       	rjmp	80002488 <sha256_transf+0xa8>
80002418:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000241c:	f0 09 15 02 	lsl	r9,r8,0x2
80002420:	ee c8 01 14 	sub	r8,r7,276
80002424:	12 08       	add	r8,r9
80002426:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000242a:	a3 69       	lsl	r9,0x2
8000242c:	2f d9       	sub	r9,-3
8000242e:	ee fa ff f4 	ld.w	r10,r7[-12]
80002432:	f4 09 00 09 	add	r9,r10,r9
80002436:	13 89       	ld.ub	r9,r9[0x0]
80002438:	12 9a       	mov	r10,r9
8000243a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000243e:	a3 69       	lsl	r9,0x2
80002440:	2f e9       	sub	r9,-2
80002442:	ee fb ff f4 	ld.w	r11,r7[-12]
80002446:	f6 09 00 09 	add	r9,r11,r9
8000244a:	13 89       	ld.ub	r9,r9[0x0]
8000244c:	a9 69       	lsl	r9,0x8
8000244e:	12 4a       	or	r10,r9
80002450:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002454:	a3 69       	lsl	r9,0x2
80002456:	2f f9       	sub	r9,-1
80002458:	ee fb ff f4 	ld.w	r11,r7[-12]
8000245c:	f6 09 00 09 	add	r9,r11,r9
80002460:	13 89       	ld.ub	r9,r9[0x0]
80002462:	b1 69       	lsl	r9,0x10
80002464:	12 4a       	or	r10,r9
80002466:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000246a:	a3 69       	lsl	r9,0x2
8000246c:	ee fb ff f4 	ld.w	r11,r7[-12]
80002470:	f6 09 00 09 	add	r9,r11,r9
80002474:	13 89       	ld.ub	r9,r9[0x0]
80002476:	b9 69       	lsl	r9,0x18
80002478:	f5 e9 10 09 	or	r9,r10,r9
8000247c:	91 09       	st.w	r8[0x0],r9
8000247e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002482:	2f f8       	sub	r8,-1
80002484:	ef 48 ff fc 	st.w	r7[-4],r8
80002488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000248c:	58 f8       	cp.w	r8,15
8000248e:	fe 9a ff c5 	brle	80002418 <sha256_transf+0x38>
80002492:	31 08       	mov	r8,16
80002494:	ef 48 ff fc 	st.w	r7[-4],r8
80002498:	c6 c8       	rjmp	80002570 <sha256_transf+0x190>
8000249a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000249e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024a2:	20 28       	sub	r8,2
800024a4:	a3 68       	lsl	r8,0x2
800024a6:	ee 08 00 08 	add	r8,r7,r8
800024aa:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024ae:	f0 0b 16 11 	lsr	r11,r8,0x11
800024b2:	f0 09 15 0f 	lsl	r9,r8,0xf
800024b6:	16 49       	or	r9,r11
800024b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024bc:	20 28       	sub	r8,2
800024be:	a3 68       	lsl	r8,0x2
800024c0:	ee 08 00 08 	add	r8,r7,r8
800024c4:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024c8:	f0 0b 16 13 	lsr	r11,r8,0x13
800024cc:	ad 78       	lsl	r8,0xd
800024ce:	16 48       	or	r8,r11
800024d0:	10 59       	eor	r9,r8
800024d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024d6:	20 28       	sub	r8,2
800024d8:	a3 68       	lsl	r8,0x2
800024da:	ee 08 00 08 	add	r8,r7,r8
800024de:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024e2:	ab 88       	lsr	r8,0xa
800024e4:	10 59       	eor	r9,r8
800024e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024ea:	20 78       	sub	r8,7
800024ec:	a3 68       	lsl	r8,0x2
800024ee:	ee 08 00 08 	add	r8,r7,r8
800024f2:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024f6:	f2 08 00 0b 	add	r11,r9,r8
800024fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024fe:	20 f8       	sub	r8,15
80002500:	a3 68       	lsl	r8,0x2
80002502:	ee 08 00 08 	add	r8,r7,r8
80002506:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000250a:	f0 0c 16 07 	lsr	r12,r8,0x7
8000250e:	f0 09 15 19 	lsl	r9,r8,0x19
80002512:	18 49       	or	r9,r12
80002514:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002518:	20 f8       	sub	r8,15
8000251a:	a3 68       	lsl	r8,0x2
8000251c:	ee 08 00 08 	add	r8,r7,r8
80002520:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002524:	f0 0c 16 12 	lsr	r12,r8,0x12
80002528:	af 68       	lsl	r8,0xe
8000252a:	18 48       	or	r8,r12
8000252c:	10 59       	eor	r9,r8
8000252e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002532:	20 f8       	sub	r8,15
80002534:	a3 68       	lsl	r8,0x2
80002536:	ee 08 00 08 	add	r8,r7,r8
8000253a:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000253e:	a3 98       	lsr	r8,0x3
80002540:	f3 e8 20 08 	eor	r8,r9,r8
80002544:	f6 08 00 09 	add	r9,r11,r8
80002548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000254c:	21 08       	sub	r8,16
8000254e:	a3 68       	lsl	r8,0x2
80002550:	ee 08 00 08 	add	r8,r7,r8
80002554:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002558:	10 09       	add	r9,r8
8000255a:	f4 08 15 02 	lsl	r8,r10,0x2
8000255e:	ee 08 00 08 	add	r8,r7,r8
80002562:	f1 49 fe ec 	st.w	r8[-276],r9
80002566:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000256a:	2f f8       	sub	r8,-1
8000256c:	ef 48 ff fc 	st.w	r7[-4],r8
80002570:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002574:	e0 48 00 3f 	cp.w	r8,63
80002578:	fe 9a ff 91 	brle	8000249a <sha256_transf+0xba>
8000257c:	30 08       	mov	r8,0
8000257e:	ef 48 ff fc 	st.w	r7[-4],r8
80002582:	c1 48       	rjmp	800025aa <sha256_transf+0x1ca>
80002584:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002588:	ee fa ff fc 	ld.w	r10,r7[-4]
8000258c:	ee f9 fe c8 	ld.w	r9,r7[-312]
80002590:	2d ea       	sub	r10,-34
80002592:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80002596:	a3 68       	lsl	r8,0x2
80002598:	ee 08 00 08 	add	r8,r7,r8
8000259c:	f1 49 fe cc 	st.w	r8[-308],r9
800025a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025a4:	2f f8       	sub	r8,-1
800025a6:	ef 48 ff fc 	st.w	r7[-4],r8
800025aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025ae:	58 78       	cp.w	r8,7
800025b0:	fe 9a ff ea 	brle	80002584 <sha256_transf+0x1a4>
800025b4:	30 08       	mov	r8,0
800025b6:	ef 48 ff fc 	st.w	r7[-4],r8
800025ba:	c9 68       	rjmp	800026e6 <sha256_transf+0x306>
800025bc:	ee fa fe e8 	ld.w	r10,r7[-280]
800025c0:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025c4:	f0 0b 16 06 	lsr	r11,r8,0x6
800025c8:	f0 09 15 1a 	lsl	r9,r8,0x1a
800025cc:	16 49       	or	r9,r11
800025ce:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025d2:	f0 0b 16 0b 	lsr	r11,r8,0xb
800025d6:	b5 78       	lsl	r8,0x15
800025d8:	16 48       	or	r8,r11
800025da:	10 59       	eor	r9,r8
800025dc:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025e0:	f0 0b 16 19 	lsr	r11,r8,0x19
800025e4:	a7 78       	lsl	r8,0x7
800025e6:	16 48       	or	r8,r11
800025e8:	f3 e8 20 08 	eor	r8,r9,r8
800025ec:	f4 08 00 09 	add	r9,r10,r8
800025f0:	ee fa fe dc 	ld.w	r10,r7[-292]
800025f4:	ee f8 fe e0 	ld.w	r8,r7[-288]
800025f8:	10 6a       	and	r10,r8
800025fa:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025fe:	f0 0b 11 ff 	rsub	r11,r8,-1
80002602:	ee f8 fe e4 	ld.w	r8,r7[-284]
80002606:	f7 e8 00 08 	and	r8,r11,r8
8000260a:	f5 e8 20 08 	eor	r8,r10,r8
8000260e:	10 09       	add	r9,r8
80002610:	ee fa ff fc 	ld.w	r10,r7[-4]
80002614:	4d 18       	lddpc	r8,80002758 <sha256_transf+0x378>
80002616:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000261a:	10 09       	add	r9,r8
8000261c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002620:	a3 68       	lsl	r8,0x2
80002622:	ee 08 00 08 	add	r8,r7,r8
80002626:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000262a:	f2 08 00 08 	add	r8,r9,r8
8000262e:	ef 48 ff ec 	st.w	r7[-20],r8
80002632:	ee f8 fe cc 	ld.w	r8,r7[-308]
80002636:	f0 0a 16 02 	lsr	r10,r8,0x2
8000263a:	f0 09 15 1e 	lsl	r9,r8,0x1e
8000263e:	14 49       	or	r9,r10
80002640:	ee f8 fe cc 	ld.w	r8,r7[-308]
80002644:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002648:	b3 78       	lsl	r8,0x13
8000264a:	14 48       	or	r8,r10
8000264c:	10 59       	eor	r9,r8
8000264e:	ee f8 fe cc 	ld.w	r8,r7[-308]
80002652:	f0 0a 16 16 	lsr	r10,r8,0x16
80002656:	ab 68       	lsl	r8,0xa
80002658:	14 48       	or	r8,r10
8000265a:	10 59       	eor	r9,r8
8000265c:	ee fa fe cc 	ld.w	r10,r7[-308]
80002660:	ee f8 fe d0 	ld.w	r8,r7[-304]
80002664:	10 6a       	and	r10,r8
80002666:	ee fb fe cc 	ld.w	r11,r7[-308]
8000266a:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000266e:	f7 e8 00 08 	and	r8,r11,r8
80002672:	10 5a       	eor	r10,r8
80002674:	ee fb fe d0 	ld.w	r11,r7[-304]
80002678:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000267c:	f7 e8 00 08 	and	r8,r11,r8
80002680:	f5 e8 20 08 	eor	r8,r10,r8
80002684:	f2 08 00 08 	add	r8,r9,r8
80002688:	ef 48 ff f0 	st.w	r7[-16],r8
8000268c:	ee f8 fe e4 	ld.w	r8,r7[-284]
80002690:	ef 48 fe e8 	st.w	r7[-280],r8
80002694:	ee f8 fe e0 	ld.w	r8,r7[-288]
80002698:	ef 48 fe e4 	st.w	r7[-284],r8
8000269c:	ee f8 fe dc 	ld.w	r8,r7[-292]
800026a0:	ef 48 fe e0 	st.w	r7[-288],r8
800026a4:	ee f9 fe d8 	ld.w	r9,r7[-296]
800026a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800026ac:	f2 08 00 08 	add	r8,r9,r8
800026b0:	ef 48 fe dc 	st.w	r7[-292],r8
800026b4:	ee f8 fe d4 	ld.w	r8,r7[-300]
800026b8:	ef 48 fe d8 	st.w	r7[-296],r8
800026bc:	ee f8 fe d0 	ld.w	r8,r7[-304]
800026c0:	ef 48 fe d4 	st.w	r7[-300],r8
800026c4:	ee f8 fe cc 	ld.w	r8,r7[-308]
800026c8:	ef 48 fe d0 	st.w	r7[-304],r8
800026cc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800026d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800026d4:	f2 08 00 08 	add	r8,r9,r8
800026d8:	ef 48 fe cc 	st.w	r7[-308],r8
800026dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026e0:	2f f8       	sub	r8,-1
800026e2:	ef 48 ff fc 	st.w	r7[-4],r8
800026e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026ea:	e0 48 00 3f 	cp.w	r8,63
800026ee:	fe 9a ff 67 	brle	800025bc <sha256_transf+0x1dc>
800026f2:	30 08       	mov	r8,0
800026f4:	ef 48 ff fc 	st.w	r7[-4],r8
800026f8:	c1 c8       	rjmp	80002730 <sha256_transf+0x350>
800026fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800026fe:	ee fa ff fc 	ld.w	r10,r7[-4]
80002702:	ee f8 fe c8 	ld.w	r8,r7[-312]
80002706:	2d ea       	sub	r10,-34
80002708:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000270c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002710:	a3 68       	lsl	r8,0x2
80002712:	ee 08 00 08 	add	r8,r7,r8
80002716:	f0 f8 fe cc 	ld.w	r8,r8[-308]
8000271a:	10 0a       	add	r10,r8
8000271c:	ee f8 fe c8 	ld.w	r8,r7[-312]
80002720:	2d e9       	sub	r9,-34
80002722:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80002726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000272a:	2f f8       	sub	r8,-1
8000272c:	ef 48 ff fc 	st.w	r7[-4],r8
80002730:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002734:	58 78       	cp.w	r8,7
80002736:	fe 9a ff e2 	brle	800026fa <sha256_transf+0x31a>
8000273a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000273e:	2f f8       	sub	r8,-1
80002740:	ef 48 ff f8 	st.w	r7[-8],r8
80002744:	ee f9 fe c0 	ld.w	r9,r7[-320]
80002748:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000274c:	10 39       	cp.w	r9,r8
8000274e:	fe 99 fe 58 	brgt	800023fe <sha256_transf+0x1e>
80002752:	2b 0d       	sub	sp,-320
80002754:	e3 cd 80 80 	ldm	sp++,r7,pc
80002758:	00 00       	add	r0,r0
8000275a:	00 28       	rsub	r8,r0

8000275c <sha256>:
8000275c:	eb cd 40 80 	pushm	r7,lr
80002760:	1a 97       	mov	r7,sp
80002762:	fa cd 00 b4 	sub	sp,sp,180
80002766:	ef 4c ff 54 	st.w	r7[-172],r12
8000276a:	ef 4b ff 50 	st.w	r7[-176],r11
8000276e:	ef 4a ff 4c 	st.w	r7[-180],r10
80002772:	ee c8 00 a8 	sub	r8,r7,168
80002776:	10 9c       	mov	r12,r8
80002778:	f0 1f 00 0b 	mcall	800027a4 <sha256+0x48>
8000277c:	ee c8 00 a8 	sub	r8,r7,168
80002780:	ee fa ff 50 	ld.w	r10,r7[-176]
80002784:	ee fb ff 54 	ld.w	r11,r7[-172]
80002788:	10 9c       	mov	r12,r8
8000278a:	f0 1f 00 08 	mcall	800027a8 <sha256+0x4c>
8000278e:	ee c8 00 a8 	sub	r8,r7,168
80002792:	ee fb ff 4c 	ld.w	r11,r7[-180]
80002796:	10 9c       	mov	r12,r8
80002798:	f0 1f 00 05 	mcall	800027ac <sha256+0x50>
8000279c:	2d 3d       	sub	sp,-180
8000279e:	e3 cd 80 80 	ldm	sp++,r7,pc
800027a2:	00 00       	add	r0,r0
800027a4:	80 00       	ld.sh	r0,r0[0x0]
800027a6:	27 b0       	sub	r0,123
800027a8:	80 00       	ld.sh	r0,r0[0x0]
800027aa:	28 0c       	sub	r12,-128
800027ac:	80 00       	ld.sh	r0,r0[0x0]
800027ae:	29 34       	sub	r4,-109

800027b0 <sha256_init>:
800027b0:	eb cd 40 80 	pushm	r7,lr
800027b4:	1a 97       	mov	r7,sp
800027b6:	20 2d       	sub	sp,8
800027b8:	ef 4c ff f8 	st.w	r7[-8],r12
800027bc:	30 08       	mov	r8,0
800027be:	ef 48 ff fc 	st.w	r7[-4],r8
800027c2:	c1 28       	rjmp	800027e6 <sha256_init+0x36>
800027c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027c8:	ee fa ff fc 	ld.w	r10,r7[-4]
800027cc:	48 f8       	lddpc	r8,80002808 <sha256_init+0x58>
800027ce:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800027d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027d6:	2d e9       	sub	r9,-34
800027d8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800027dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800027e0:	2f f8       	sub	r8,-1
800027e2:	ef 48 ff fc 	st.w	r7[-4],r8
800027e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800027ea:	58 78       	cp.w	r8,7
800027ec:	fe 9a ff ec 	brle	800027c4 <sha256_init+0x14>
800027f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027f4:	30 09       	mov	r9,0
800027f6:	91 19       	st.w	r8[0x4],r9
800027f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027fc:	30 09       	mov	r9,0
800027fe:	91 09       	st.w	r8[0x0],r9
80002800:	2f ed       	sub	sp,-8
80002802:	e3 cd 80 80 	ldm	sp++,r7,pc
80002806:	00 00       	add	r0,r0
80002808:	00 00       	add	r0,r0
8000280a:	00 08       	add	r8,r0

8000280c <sha256_update>:
8000280c:	eb cd 40 80 	pushm	r7,lr
80002810:	1a 97       	mov	r7,sp
80002812:	20 8d       	sub	sp,32
80002814:	ef 4c ff e8 	st.w	r7[-24],r12
80002818:	ef 4b ff e4 	st.w	r7[-28],r11
8000281c:	ef 4a ff e0 	st.w	r7[-32],r10
80002820:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002824:	70 18       	ld.w	r8,r8[0x4]
80002826:	f0 08 11 40 	rsub	r8,r8,64
8000282a:	ef 48 ff f8 	st.w	r7[-8],r8
8000282e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002832:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002836:	ee fa ff f8 	ld.w	r10,r7[-8]
8000283a:	10 3a       	cp.w	r10,r8
8000283c:	f2 08 17 80 	movls	r8,r9
80002840:	ef 48 ff f4 	st.w	r7[-12],r8
80002844:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002848:	f0 c9 ff f8 	sub	r9,r8,-8
8000284c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002850:	70 18       	ld.w	r8,r8[0x4]
80002852:	f2 08 00 08 	add	r8,r9,r8
80002856:	ee fa ff f4 	ld.w	r10,r7[-12]
8000285a:	ee fb ff e4 	ld.w	r11,r7[-28]
8000285e:	10 9c       	mov	r12,r8
80002860:	f0 1f 00 33 	mcall	8000292c <sha256_update+0x120>
80002864:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002868:	70 19       	ld.w	r9,r8[0x4]
8000286a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000286e:	f2 08 00 08 	add	r8,r9,r8
80002872:	e0 48 00 3f 	cp.w	r8,63
80002876:	e0 8b 00 0c 	brhi	8000288e <sha256_update+0x82>
8000287a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000287e:	70 19       	ld.w	r9,r8[0x4]
80002880:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002884:	10 09       	add	r9,r8
80002886:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000288a:	91 19       	st.w	r8[0x4],r9
8000288c:	c4 c8       	rjmp	80002924 <sha256_update+0x118>
8000288e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80002892:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002896:	f2 08 01 08 	sub	r8,r9,r8
8000289a:	ef 48 ff f0 	st.w	r7[-16],r8
8000289e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028a2:	a7 88       	lsr	r8,0x6
800028a4:	ef 48 ff ec 	st.w	r7[-20],r8
800028a8:	ee f9 ff e4 	ld.w	r9,r7[-28]
800028ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028b0:	f2 08 00 08 	add	r8,r9,r8
800028b4:	ef 48 ff fc 	st.w	r7[-4],r8
800028b8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800028bc:	2f 88       	sub	r8,-8
800028be:	30 1a       	mov	r10,1
800028c0:	10 9b       	mov	r11,r8
800028c2:	ee fc ff e8 	ld.w	r12,r7[-24]
800028c6:	f0 1f 00 1b 	mcall	80002930 <sha256_update+0x124>
800028ca:	ee fa ff ec 	ld.w	r10,r7[-20]
800028ce:	ee fb ff fc 	ld.w	r11,r7[-4]
800028d2:	ee fc ff e8 	ld.w	r12,r7[-24]
800028d6:	f0 1f 00 17 	mcall	80002930 <sha256_update+0x124>
800028da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028de:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800028e2:	ef 48 ff f4 	st.w	r7[-12],r8
800028e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028ea:	a7 68       	lsl	r8,0x6
800028ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800028f0:	10 09       	add	r9,r8
800028f2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800028f6:	2f 88       	sub	r8,-8
800028f8:	ee fa ff f4 	ld.w	r10,r7[-12]
800028fc:	12 9b       	mov	r11,r9
800028fe:	10 9c       	mov	r12,r8
80002900:	f0 1f 00 0b 	mcall	8000292c <sha256_update+0x120>
80002904:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002908:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000290c:	91 19       	st.w	r8[0x4],r9
8000290e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002912:	70 09       	ld.w	r9,r8[0x0]
80002914:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002918:	2f f8       	sub	r8,-1
8000291a:	a7 68       	lsl	r8,0x6
8000291c:	10 09       	add	r9,r8
8000291e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002922:	91 09       	st.w	r8[0x0],r9
80002924:	2f 8d       	sub	sp,-32
80002926:	e3 cd 80 80 	ldm	sp++,r7,pc
8000292a:	00 00       	add	r0,r0
8000292c:	80 00       	ld.sh	r0,r0[0x0]
8000292e:	ea d6 80 00 	satsub.w	r6,r5,-32768
80002932:	23 e0       	sub	r0,62

80002934 <sha256_final>:
80002934:	eb cd 40 80 	pushm	r7,lr
80002938:	1a 97       	mov	r7,sp
8000293a:	20 6d       	sub	sp,24
8000293c:	ef 4c ff ec 	st.w	r7[-20],r12
80002940:	ef 4b ff e8 	st.w	r7[-24],r11
80002944:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002948:	70 18       	ld.w	r8,r8[0x4]
8000294a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000294e:	e0 48 00 37 	cp.w	r8,55
80002952:	e0 88 00 04 	brls	8000295a <sha256_final+0x26>
80002956:	30 28       	mov	r8,2
80002958:	c0 28       	rjmp	8000295c <sha256_final+0x28>
8000295a:	30 18       	mov	r8,1
8000295c:	ef 48 ff f0 	st.w	r7[-16],r8
80002960:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002964:	70 09       	ld.w	r9,r8[0x0]
80002966:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000296a:	70 18       	ld.w	r8,r8[0x4]
8000296c:	f2 08 00 08 	add	r8,r9,r8
80002970:	a3 78       	lsl	r8,0x3
80002972:	ef 48 ff f8 	st.w	r7[-8],r8
80002976:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000297a:	a7 68       	lsl	r8,0x6
8000297c:	ef 48 ff f4 	st.w	r7[-12],r8
80002980:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002984:	70 18       	ld.w	r8,r8[0x4]
80002986:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000298a:	10 19       	sub	r9,r8
8000298c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002990:	f0 ca ff f8 	sub	r10,r8,-8
80002994:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002998:	70 18       	ld.w	r8,r8[0x4]
8000299a:	f4 08 00 08 	add	r8,r10,r8
8000299e:	12 9a       	mov	r10,r9
800029a0:	30 0b       	mov	r11,0
800029a2:	10 9c       	mov	r12,r8
800029a4:	f0 1f 00 4e 	mcall	80002adc <sha256_final+0x1a8>
800029a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029ac:	70 18       	ld.w	r8,r8[0x4]
800029ae:	ee f9 ff ec 	ld.w	r9,r7[-20]
800029b2:	10 09       	add	r9,r8
800029b4:	38 08       	mov	r8,-128
800029b6:	f3 68 00 08 	st.b	r9[8],r8
800029ba:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029be:	f0 c9 ff f8 	sub	r9,r8,-8
800029c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029c6:	20 18       	sub	r8,1
800029c8:	10 09       	add	r9,r8
800029ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029ce:	5c 58       	castu.b	r8
800029d0:	b2 88       	st.b	r9[0x0],r8
800029d2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029d6:	f0 c9 ff f8 	sub	r9,r8,-8
800029da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029de:	20 28       	sub	r8,2
800029e0:	10 09       	add	r9,r8
800029e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029e6:	a9 88       	lsr	r8,0x8
800029e8:	5c 58       	castu.b	r8
800029ea:	b2 88       	st.b	r9[0x0],r8
800029ec:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029f0:	f0 c9 ff f8 	sub	r9,r8,-8
800029f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029f8:	20 38       	sub	r8,3
800029fa:	10 09       	add	r9,r8
800029fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a00:	b1 88       	lsr	r8,0x10
80002a02:	5c 58       	castu.b	r8
80002a04:	b2 88       	st.b	r9[0x0],r8
80002a06:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a0a:	f0 c9 ff f8 	sub	r9,r8,-8
80002a0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002a12:	20 48       	sub	r8,4
80002a14:	10 09       	add	r9,r8
80002a16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a1a:	b9 88       	lsr	r8,0x18
80002a1c:	5c 58       	castu.b	r8
80002a1e:	b2 88       	st.b	r9[0x0],r8
80002a20:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a24:	2f 88       	sub	r8,-8
80002a26:	ee fa ff f0 	ld.w	r10,r7[-16]
80002a2a:	10 9b       	mov	r11,r8
80002a2c:	ee fc ff ec 	ld.w	r12,r7[-20]
80002a30:	f0 1f 00 2c 	mcall	80002ae0 <sha256_final+0x1ac>
80002a34:	30 08       	mov	r8,0
80002a36:	ef 48 ff fc 	st.w	r7[-4],r8
80002a3a:	c4 88       	rjmp	80002aca <sha256_final+0x196>
80002a3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a40:	a3 68       	lsl	r8,0x2
80002a42:	2f d8       	sub	r8,-3
80002a44:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002a48:	10 09       	add	r9,r8
80002a4a:	ee fa ff fc 	ld.w	r10,r7[-4]
80002a4e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a52:	2d ea       	sub	r10,-34
80002a54:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002a58:	5c 58       	castu.b	r8
80002a5a:	b2 88       	st.b	r9[0x0],r8
80002a5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a60:	a3 68       	lsl	r8,0x2
80002a62:	2f e8       	sub	r8,-2
80002a64:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002a68:	10 09       	add	r9,r8
80002a6a:	ee fa ff fc 	ld.w	r10,r7[-4]
80002a6e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a72:	2d ea       	sub	r10,-34
80002a74:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002a78:	a9 88       	lsr	r8,0x8
80002a7a:	5c 58       	castu.b	r8
80002a7c:	b2 88       	st.b	r9[0x0],r8
80002a7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a82:	a3 68       	lsl	r8,0x2
80002a84:	2f f8       	sub	r8,-1
80002a86:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002a8a:	10 09       	add	r9,r8
80002a8c:	ee fa ff fc 	ld.w	r10,r7[-4]
80002a90:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a94:	2d ea       	sub	r10,-34
80002a96:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002a9a:	b1 88       	lsr	r8,0x10
80002a9c:	5c 58       	castu.b	r8
80002a9e:	b2 88       	st.b	r9[0x0],r8
80002aa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002aa4:	a3 68       	lsl	r8,0x2
80002aa6:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002aaa:	10 09       	add	r9,r8
80002aac:	ee fa ff fc 	ld.w	r10,r7[-4]
80002ab0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002ab4:	2d ea       	sub	r10,-34
80002ab6:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002aba:	b9 88       	lsr	r8,0x18
80002abc:	5c 58       	castu.b	r8
80002abe:	b2 88       	st.b	r9[0x0],r8
80002ac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ac4:	2f f8       	sub	r8,-1
80002ac6:	ef 48 ff fc 	st.w	r7[-4],r8
80002aca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ace:	58 78       	cp.w	r8,7
80002ad0:	fe 9a ff b6 	brle	80002a3c <sha256_final+0x108>
80002ad4:	2f ad       	sub	sp,-24
80002ad6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ada:	00 00       	add	r0,r0
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	ec 1e 80 00 	eorl	lr,0x8000
80002ae2:	23 e0       	sub	r0,62

80002ae4 <pbkdf2_func>:

volatile uint256_t var_Password;


void pbkdf2_func(uint8_t *password, uint8_t *derived_key)
{
80002ae4:	eb cd 40 80 	pushm	r7,lr
80002ae8:	1a 97       	mov	r7,sp
80002aea:	fa cd 00 98 	sub	sp,sp,152
80002aee:	ef 4c ff 6c 	st.w	r7[-148],r12
80002af2:	ef 4b ff 68 	st.w	r7[-152],r11
	unsigned short int iteration_count;
	unsigned char mac[hLen];
	unsigned char Ubuffer[hLen+4] = {0};
80002af6:	ee c8 00 50 	sub	r8,r7,80
80002afa:	30 0a       	mov	r10,0
80002afc:	30 0b       	mov	r11,0
80002afe:	f0 eb 00 00 	st.d	r8[0],r10
80002b02:	2f 88       	sub	r8,-8
80002b04:	30 0a       	mov	r10,0
80002b06:	30 0b       	mov	r11,0
80002b08:	f0 eb 00 00 	st.d	r8[0],r10
80002b0c:	2f 88       	sub	r8,-8
80002b0e:	30 0a       	mov	r10,0
80002b10:	30 0b       	mov	r11,0
80002b12:	f0 eb 00 00 	st.d	r8[0],r10
80002b16:	2f 88       	sub	r8,-8
80002b18:	30 0a       	mov	r10,0
80002b1a:	30 0b       	mov	r11,0
80002b1c:	f0 eb 00 00 	st.d	r8[0],r10
80002b20:	2f 88       	sub	r8,-8
80002b22:	30 09       	mov	r9,0
80002b24:	91 09       	st.w	r8[0x0],r9
80002b26:	2f c8       	sub	r8,-4
	unsigned char Tbuffer[hLen] = {0};
80002b28:	ee c8 00 70 	sub	r8,r7,112
80002b2c:	30 0a       	mov	r10,0
80002b2e:	30 0b       	mov	r11,0
80002b30:	f0 eb 00 00 	st.d	r8[0],r10
80002b34:	2f 88       	sub	r8,-8
80002b36:	30 0a       	mov	r10,0
80002b38:	30 0b       	mov	r11,0
80002b3a:	f0 eb 00 00 	st.d	r8[0],r10
80002b3e:	2f 88       	sub	r8,-8
80002b40:	30 0a       	mov	r10,0
80002b42:	30 0b       	mov	r11,0
80002b44:	f0 eb 00 00 	st.d	r8[0],r10
80002b48:	2f 88       	sub	r8,-8
80002b4a:	30 0a       	mov	r10,0
80002b4c:	30 0b       	mov	r11,0
80002b4e:	f0 eb 00 00 	st.d	r8[0],r10
80002b52:	2f 88       	sub	r8,-8
	unsigned char Fbuffer[hLen] = {0};
80002b54:	ee c8 00 90 	sub	r8,r7,144
80002b58:	30 0a       	mov	r10,0
80002b5a:	30 0b       	mov	r11,0
80002b5c:	f0 eb 00 00 	st.d	r8[0],r10
80002b60:	2f 88       	sub	r8,-8
80002b62:	30 0a       	mov	r10,0
80002b64:	30 0b       	mov	r11,0
80002b66:	f0 eb 00 00 	st.d	r8[0],r10
80002b6a:	2f 88       	sub	r8,-8
80002b6c:	30 0a       	mov	r10,0
80002b6e:	30 0b       	mov	r11,0
80002b70:	f0 eb 00 00 	st.d	r8[0],r10
80002b74:	2f 88       	sub	r8,-8
80002b76:	30 0a       	mov	r10,0
80002b78:	30 0b       	mov	r11,0
80002b7a:	f0 eb 00 00 	st.d	r8[0],r10
80002b7e:	2f 88       	sub	r8,-8
	unsigned char total_blocks = hLen / hLen, block_num = 1;
80002b80:	30 18       	mov	r8,1
80002b82:	ef 68 ff f6 	st.b	r7[-10],r8
80002b86:	30 18       	mov	r8,1
80002b88:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char *Salt = (unsigned char *)var_Salt.index;
80002b8c:	4e 58       	lddpc	r8,80002d20 <pbkdf2_func+0x23c>
80002b8e:	ef 48 ff f8 	st.w	r7[-8],r8
	
	while (block_num <= total_blocks)
80002b92:	cb b8       	rjmp	80002d08 <pbkdf2_func+0x224>
	{
		iteration_count = 0;
80002b94:	30 08       	mov	r8,0
80002b96:	ef 58 ff f4 	st.h	r7[-12],r8
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002b9a:	c9 a8       	rjmp	80002cce <pbkdf2_func+0x1ea>
		{
			unsigned short int i;
			if (iteration_count == 0)
80002b9c:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002ba0:	30 08       	mov	r8,0
80002ba2:	f0 09 19 00 	cp.h	r9,r8
80002ba6:	c5 e1       	brne	80002c62 <pbkdf2_func+0x17e>
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002ba8:	30 08       	mov	r8,0
80002baa:	ef 58 ff fe 	st.h	r7[-2],r8
80002bae:	c1 38       	rjmp	80002bd4 <pbkdf2_func+0xf0>
				{
					Ubuffer[i] = Salt[i];
80002bb0:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002bb4:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002bb8:	ee fa ff f8 	ld.w	r10,r7[-8]
80002bbc:	f4 08 00 08 	add	r8,r10,r8
80002bc0:	11 88       	ld.ub	r8,r8[0x0]
80002bc2:	ee 09 00 09 	add	r9,r7,r9
80002bc6:	f3 68 ff b0 	st.b	r9[-80],r8
		{
			unsigned short int i;
			if (iteration_count == 0)
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002bca:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002bce:	2f f8       	sub	r8,-1
80002bd0:	ef 58 ff fe 	st.h	r7[-2],r8
80002bd4:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80002bd8:	31 f8       	mov	r8,31
80002bda:	f0 09 19 00 	cp.h	r9,r8
80002bde:	fe 98 ff e9 	brls	80002bb0 <pbkdf2_func+0xcc>
				{
					Ubuffer[i] = Salt[i];
				}
				Ubuffer[i++] = (block_num >> 24) & 0xFF;
80002be2:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002be6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002bea:	b9 48       	asr	r8,0x18
80002bec:	5c 58       	castu.b	r8
80002bee:	ee 09 00 09 	add	r9,r7,r9
80002bf2:	f3 68 ff b0 	st.b	r9[-80],r8
80002bf6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002bfa:	2f f8       	sub	r8,-1
80002bfc:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 16) & 0xFF;
80002c00:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002c04:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002c08:	b1 48       	asr	r8,0x10
80002c0a:	5c 58       	castu.b	r8
80002c0c:	ee 09 00 09 	add	r9,r7,r9
80002c10:	f3 68 ff b0 	st.b	r9[-80],r8
80002c14:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002c18:	2f f8       	sub	r8,-1
80002c1a:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 8) & 0xFF;
80002c1e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002c22:	ee 08 00 09 	add	r9,r7,r8
80002c26:	30 08       	mov	r8,0
80002c28:	f3 68 ff b0 	st.b	r9[-80],r8
80002c2c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002c30:	2f f8       	sub	r8,-1
80002c32:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i] = (block_num >> 0) & 0xFF;
80002c36:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002c3a:	ee 08 00 09 	add	r9,r7,r8
80002c3e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002c42:	f3 68 ff b0 	st.b	r9[-80],r8
				hmac_sha256(password, 32, Ubuffer, 36, mac, 32);
80002c46:	ee c8 00 2c 	sub	r8,r7,44
80002c4a:	ee ca 00 50 	sub	r10,r7,80
80002c4e:	32 09       	mov	r9,32
80002c50:	1a d9       	st.w	--sp,r9
80002c52:	32 49       	mov	r9,36
80002c54:	32 0b       	mov	r11,32
80002c56:	ee fc ff 6c 	ld.w	r12,r7[-148]
80002c5a:	f0 1f 00 33 	mcall	80002d24 <pbkdf2_func+0x240>
80002c5e:	2f fd       	sub	sp,-4
80002c60:	c0 d8       	rjmp	80002c7a <pbkdf2_func+0x196>
			}
			else
			{
				hmac_sha256((const unsigned char *)var_Password.index, 32, Ubuffer, 32, mac, 32);
80002c62:	4b 2c       	lddpc	r12,80002d28 <pbkdf2_func+0x244>
80002c64:	ee c8 00 2c 	sub	r8,r7,44
80002c68:	ee ca 00 50 	sub	r10,r7,80
80002c6c:	32 09       	mov	r9,32
80002c6e:	1a d9       	st.w	--sp,r9
80002c70:	32 09       	mov	r9,32
80002c72:	32 0b       	mov	r11,32
80002c74:	f0 1f 00 2c 	mcall	80002d24 <pbkdf2_func+0x240>
80002c78:	2f fd       	sub	sp,-4
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
80002c7a:	ee c9 00 2c 	sub	r9,r7,44
80002c7e:	ee c8 00 90 	sub	r8,r7,144
80002c82:	30 8a       	mov	r10,8
80002c84:	12 9b       	mov	r11,r9
80002c86:	10 9c       	mov	r12,r8
80002c88:	f0 1f 00 29 	mcall	80002d2c <pbkdf2_func+0x248>
			
			for (i = 0; i < hLen; i++)
80002c8c:	30 08       	mov	r8,0
80002c8e:	ef 58 ff fc 	st.h	r7[-4],r8
80002c92:	c1 28       	rjmp	80002cb6 <pbkdf2_func+0x1d2>
			{
				Ubuffer[i] = mac[i];
80002c94:	ef 19 ff fc 	ld.uh	r9,r7[-4]
80002c98:	ef 18 ff fc 	ld.uh	r8,r7[-4]
80002c9c:	ee 08 00 08 	add	r8,r7,r8
80002ca0:	f1 38 ff d4 	ld.ub	r8,r8[-44]
80002ca4:	ee 09 00 09 	add	r9,r7,r9
80002ca8:	f3 68 ff b0 	st.b	r9[-80],r8
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
			
			for (i = 0; i < hLen; i++)
80002cac:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80002cb0:	2f f8       	sub	r8,-1
80002cb2:	ef 58 ff fc 	st.h	r7[-4],r8
80002cb6:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80002cba:	31 f8       	mov	r8,31
80002cbc:	f0 09 19 00 	cp.h	r9,r8
80002cc0:	fe 98 ff ea 	brls	80002c94 <pbkdf2_func+0x1b0>
			{
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
80002cc4:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80002cc8:	2f f8       	sub	r8,-1
80002cca:	ef 58 ff f4 	st.h	r7[-12],r8
	unsigned char *Salt = (unsigned char *)var_Salt.index;
	
	while (block_num <= total_blocks)
	{
		iteration_count = 0;
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002cce:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002cd2:	e0 68 01 f3 	mov	r8,499
80002cd6:	f0 09 19 00 	cp.h	r9,r8
80002cda:	fe 98 ff 61 	brls	80002b9c <pbkdf2_func+0xb8>
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
80002cde:	ee c9 00 90 	sub	r9,r7,144
80002ce2:	ee f8 ff 68 	ld.w	r8,r7[-152]
80002ce6:	30 8a       	mov	r10,8
80002ce8:	12 9b       	mov	r11,r9
80002cea:	10 9c       	mov	r12,r8
80002cec:	f0 1f 00 10 	mcall	80002d2c <pbkdf2_func+0x248>
		memset(Fbuffer, 0, 32);		
80002cf0:	ee c8 00 90 	sub	r8,r7,144
80002cf4:	32 0a       	mov	r10,32
80002cf6:	30 0b       	mov	r11,0
80002cf8:	10 9c       	mov	r12,r8
80002cfa:	f0 1f 00 0e 	mcall	80002d30 <pbkdf2_func+0x24c>
		block_num++;
80002cfe:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002d02:	2f f8       	sub	r8,-1
80002d04:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char Tbuffer[hLen] = {0};
	unsigned char Fbuffer[hLen] = {0};
	unsigned char total_blocks = hLen / hLen, block_num = 1;
	unsigned char *Salt = (unsigned char *)var_Salt.index;
	
	while (block_num <= total_blocks)
80002d08:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80002d0c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80002d10:	f0 09 18 00 	cp.b	r9,r8
80002d14:	fe 98 ff 40 	brls	80002b94 <pbkdf2_func+0xb0>
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
		memset(Fbuffer, 0, 32);		
		block_num++;
	}
80002d18:	2d ad       	sub	sp,-152
80002d1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d1e:	00 00       	add	r0,r0
80002d20:	00 00       	add	r0,r0
80002d22:	0b ac       	ld.ub	r12,r5[0x2]
80002d24:	80 00       	ld.sh	r0,r0[0x0]
80002d26:	23 74       	sub	r4,55
80002d28:	00 00       	add	r0,r0
80002d2a:	0a 68       	and	r8,r5
80002d2c:	80 00       	ld.sh	r0,r0[0x0]
80002d2e:	2e c8       	sub	r8,-20
80002d30:	80 00       	ld.sh	r0,r0[0x0]
80002d32:	ec 1e eb cd 	eorl	lr,0xebcd

80002d34 <encrypt_password>:
volatile uint32_t var_W_ticks = 0;
volatile uint256_t var_Salt;


uint32_t * encrypt_password(uint32_t *password)
{
80002d34:	eb cd 40 80 	pushm	r7,lr
80002d38:	1a 97       	mov	r7,sp
80002d3a:	21 1d       	sub	sp,68
80002d3c:	ef 4c ff bc 	st.w	r7[-68],r12
	uint8_t temp_dk[32] = {0}, temp_dk_digest[32] = {0};
80002d40:	ee c8 00 20 	sub	r8,r7,32
80002d44:	30 0a       	mov	r10,0
80002d46:	30 0b       	mov	r11,0
80002d48:	f0 eb 00 00 	st.d	r8[0],r10
80002d4c:	2f 88       	sub	r8,-8
80002d4e:	30 0a       	mov	r10,0
80002d50:	30 0b       	mov	r11,0
80002d52:	f0 eb 00 00 	st.d	r8[0],r10
80002d56:	2f 88       	sub	r8,-8
80002d58:	30 0a       	mov	r10,0
80002d5a:	30 0b       	mov	r11,0
80002d5c:	f0 eb 00 00 	st.d	r8[0],r10
80002d60:	2f 88       	sub	r8,-8
80002d62:	30 0a       	mov	r10,0
80002d64:	30 0b       	mov	r11,0
80002d66:	f0 eb 00 00 	st.d	r8[0],r10
80002d6a:	2f 88       	sub	r8,-8
80002d6c:	ee c8 00 40 	sub	r8,r7,64
80002d70:	30 0a       	mov	r10,0
80002d72:	30 0b       	mov	r11,0
80002d74:	f0 eb 00 00 	st.d	r8[0],r10
80002d78:	2f 88       	sub	r8,-8
80002d7a:	30 0a       	mov	r10,0
80002d7c:	30 0b       	mov	r11,0
80002d7e:	f0 eb 00 00 	st.d	r8[0],r10
80002d82:	2f 88       	sub	r8,-8
80002d84:	30 0a       	mov	r10,0
80002d86:	30 0b       	mov	r11,0
80002d88:	f0 eb 00 00 	st.d	r8[0],r10
80002d8c:	2f 88       	sub	r8,-8
80002d8e:	30 0a       	mov	r10,0
80002d90:	30 0b       	mov	r11,0
80002d92:	f0 eb 00 00 	st.d	r8[0],r10
80002d96:	2f 88       	sub	r8,-8
	pbkdf2_func((uint8_t *)password, temp_dk);
80002d98:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002d9c:	ee c9 00 20 	sub	r9,r7,32
80002da0:	12 9b       	mov	r11,r9
80002da2:	10 9c       	mov	r12,r8
80002da4:	f0 1f 00 0e 	mcall	80002ddc <encrypt_password+0xa8>
	sha256(temp_dk, 32, temp_dk_digest);
80002da8:	ee c9 00 40 	sub	r9,r7,64
80002dac:	ee c8 00 20 	sub	r8,r7,32
80002db0:	12 9a       	mov	r10,r9
80002db2:	32 0b       	mov	r11,32
80002db4:	10 9c       	mov	r12,r8
80002db6:	f0 1f 00 0b 	mcall	80002de0 <encrypt_password+0xac>
	apply_aes_encryption(&AVR32_AES, (uint32_t *)temp_dk_digest, (uint32_t *)temp_dk, 32, 0x00000000);
80002dba:	ee ca 00 20 	sub	r10,r7,32
80002dbe:	ee cb 00 40 	sub	r11,r7,64
80002dc2:	30 08       	mov	r8,0
80002dc4:	32 09       	mov	r9,32
80002dc6:	fc 7c 00 00 	mov	r12,-196608
80002dca:	f0 1f 00 07 	mcall	80002de4 <encrypt_password+0xb0>
	return (uint32_t *)temp_dk_digest;	
80002dce:	ee c8 00 40 	sub	r8,r7,64
}
80002dd2:	10 9c       	mov	r12,r8
80002dd4:	2e fd       	sub	sp,-68
80002dd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dda:	00 00       	add	r0,r0
80002ddc:	80 00       	ld.sh	r0,r0[0x0]
80002dde:	2a e4       	sub	r4,-82
80002de0:	80 00       	ld.sh	r0,r0[0x0]
80002de2:	27 5c       	sub	r12,117
80002de4:	80 00       	ld.sh	r0,r0[0x0]
80002de6:	44 c0       	lddsp	r0,sp[0x130]

80002de8 <random_lcg>:


uint32_t random_lcg (void)
{
80002de8:	eb cd 40 80 	pushm	r7,lr
80002dec:	1a 97       	mov	r7,sp
	rseed = (rseed * 1103515245 + 12345) & RAND_MAX;
80002dee:	48 a8       	lddpc	r8,80002e14 <random_lcg+0x2c>
80002df0:	70 09       	ld.w	r9,r8[0x0]
80002df2:	e0 68 4e 6d 	mov	r8,20077
80002df6:	ea 18 41 c6 	orh	r8,0x41c6
80002dfa:	f2 08 02 48 	mul	r8,r9,r8
80002dfe:	f0 c8 cf c7 	sub	r8,r8,-12345
80002e02:	f3 d8 c0 1f 	bfextu	r9,r8,0x0,0x1f
80002e06:	48 48       	lddpc	r8,80002e14 <random_lcg+0x2c>
80002e08:	91 09       	st.w	r8[0x0],r9
	return rseed;
80002e0a:	48 38       	lddpc	r8,80002e14 <random_lcg+0x2c>
80002e0c:	70 08       	ld.w	r8,r8[0x0]
}
80002e0e:	10 9c       	mov	r12,r8
80002e10:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e14:	00 00       	add	r0,r0
80002e16:	02 8c       	andn	r12,r1

80002e18 <calculate_salt>:

//void random_256 ()

void calculate_salt(void)
{
80002e18:	eb cd 40 80 	pushm	r7,lr
80002e1c:	1a 97       	mov	r7,sp
80002e1e:	20 1d       	sub	sp,4
	uint32_t random_value = 0;
80002e20:	30 08       	mov	r8,0
80002e22:	ef 48 ff fc 	st.w	r7[-4],r8
	calculate_hash(pass_code, 8, var_Hkey.index); // Calculates sha256 of the keys pressed in var_W*10 msec interval and stores it in var_Hkey
80002e26:	49 e9       	lddpc	r9,80002e9c <calculate_salt+0x84>
80002e28:	49 e8       	lddpc	r8,80002ea0 <calculate_salt+0x88>
80002e2a:	70 08       	ld.w	r8,r8[0x0]
80002e2c:	12 9a       	mov	r10,r9
80002e2e:	30 8b       	mov	r11,8
80002e30:	10 9c       	mov	r12,r8
80002e32:	f0 1f 00 1d 	mcall	80002ea4 <calculate_salt+0x8c>
 	
	random_value = random_lcg();	
80002e36:	f0 1f 00 1d 	mcall	80002ea8 <calculate_salt+0x90>
80002e3a:	18 98       	mov	r8,r12
80002e3c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	calculate_hash(&random_value, 1, var_R.index);
80002e40:	49 b9       	lddpc	r9,80002eac <calculate_salt+0x94>
80002e42:	ee c8 00 04 	sub	r8,r7,4
80002e46:	12 9a       	mov	r10,r9
80002e48:	30 1b       	mov	r11,1
80002e4a:	10 9c       	mov	r12,r8
80002e4c:	f0 1f 00 16 	mcall	80002ea4 <calculate_salt+0x8c>
	
	xor_func(var_R.index, var_Hkey.index, 8);
80002e50:	49 39       	lddpc	r9,80002e9c <calculate_salt+0x84>
80002e52:	49 78       	lddpc	r8,80002eac <calculate_salt+0x94>
80002e54:	30 8a       	mov	r10,8
80002e56:	12 9b       	mov	r11,r9
80002e58:	10 9c       	mov	r12,r8
80002e5a:	f0 1f 00 16 	mcall	80002eb0 <calculate_salt+0x98>
	
	calculate_hash(var_R.index, 8, var_T.index);
80002e5e:	49 69       	lddpc	r9,80002eb4 <calculate_salt+0x9c>
80002e60:	49 38       	lddpc	r8,80002eac <calculate_salt+0x94>
80002e62:	12 9a       	mov	r10,r9
80002e64:	30 8b       	mov	r11,8
80002e66:	10 9c       	mov	r12,r8
80002e68:	f0 1f 00 0f 	mcall	80002ea4 <calculate_salt+0x8c>
 	
	xor_func(var_Salt.index, var_T.index, 8);
80002e6c:	49 29       	lddpc	r9,80002eb4 <calculate_salt+0x9c>
80002e6e:	49 38       	lddpc	r8,80002eb8 <calculate_salt+0xa0>
80002e70:	30 8a       	mov	r10,8
80002e72:	12 9b       	mov	r11,r9
80002e74:	10 9c       	mov	r12,r8
80002e76:	f0 1f 00 0f 	mcall	80002eb0 <calculate_salt+0x98>
	
	if (enter_button_status == THIRD_TIME_PRESSED)
80002e7a:	49 18       	lddpc	r8,80002ebc <calculate_salt+0xa4>
80002e7c:	11 88       	ld.ub	r8,r8[0x0]
80002e7e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002e82:	30 68       	mov	r8,6
80002e84:	f0 09 18 00 	cp.b	r9,r8
80002e88:	c0 41       	brne	80002e90 <calculate_salt+0x78>
	{
		save_salt_to_mcu();
80002e8a:	f0 1f 00 0e 	mcall	80002ec0 <calculate_salt+0xa8>
80002e8e:	c0 38       	rjmp	80002e94 <calculate_salt+0x7c>
	}
	else
	{
		Start_W_timer();	
80002e90:	f0 1f 00 0d 	mcall	80002ec4 <calculate_salt+0xac>
	}
	
}
80002e94:	2f fd       	sub	sp,-4
80002e96:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e9a:	00 00       	add	r0,r0
80002e9c:	00 00       	add	r0,r0
80002e9e:	0b 4c       	ld.w	r12,--r5
80002ea0:	00 00       	add	r0,r0
80002ea2:	0b cc       	ld.ub	r12,r5[0x4]
80002ea4:	80 00       	ld.sh	r0,r0[0x0]
80002ea6:	30 78       	mov	r8,7
80002ea8:	80 00       	ld.sh	r0,r0[0x0]
80002eaa:	2d e8       	sub	r8,-34
80002eac:	00 00       	add	r0,r0
80002eae:	0b 8c       	ld.ub	r12,r5[0x0]
80002eb0:	80 00       	ld.sh	r0,r0[0x0]
80002eb2:	2e c8       	sub	r8,-20
80002eb4:	00 00       	add	r0,r0
80002eb6:	0b 6c       	ld.uh	r12,--r5
80002eb8:	00 00       	add	r0,r0
80002eba:	0b ac       	ld.ub	r12,r5[0x2]
80002ebc:	00 00       	add	r0,r0
80002ebe:	03 da       	ld.ub	r10,r1[0x5]
80002ec0:	80 00       	ld.sh	r0,r0[0x0]
80002ec2:	2f 34       	sub	r4,-13
80002ec4:	80 00       	ld.sh	r0,r0[0x0]
80002ec6:	30 0c       	mov	r12,0

80002ec8 <xor_func>:

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
80002ec8:	eb cd 40 80 	pushm	r7,lr
80002ecc:	1a 97       	mov	r7,sp
80002ece:	20 4d       	sub	sp,16
80002ed0:	ef 4c ff f8 	st.w	r7[-8],r12
80002ed4:	ef 4b ff f4 	st.w	r7[-12],r11
80002ed8:	14 98       	mov	r8,r10
80002eda:	ef 68 ff f0 	st.b	r7[-16],r8
	unsigned char i = 0;
80002ede:	30 08       	mov	r8,0
80002ee0:	ef 68 ff ff 	st.b	r7[-1],r8
	while (i++ < len)
80002ee4:	c1 58       	rjmp	80002f0e <xor_func+0x46>
	{
		*value1 = *value1 ^ *value2;
80002ee6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002eea:	70 09       	ld.w	r9,r8[0x0]
80002eec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002ef0:	70 08       	ld.w	r8,r8[0x0]
80002ef2:	10 59       	eor	r9,r8
80002ef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ef8:	91 09       	st.w	r8[0x0],r9
		value1++;	value2++;
80002efa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002efe:	2f c8       	sub	r8,-4
80002f00:	ef 48 ff f8 	st.w	r7[-8],r8
80002f04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002f08:	2f c8       	sub	r8,-4
80002f0a:	ef 48 ff f4 	st.w	r7[-12],r8
}

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
	unsigned char i = 0;
	while (i++ < len)
80002f0e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002f12:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002f16:	f0 09 18 00 	cp.b	r9,r8
80002f1a:	5f 38       	srlo	r8
80002f1c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002f20:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002f24:	2f f8       	sub	r8,-1
80002f26:	ef 68 ff ff 	st.b	r7[-1],r8
80002f2a:	58 09       	cp.w	r9,0
80002f2c:	cd d1       	brne	80002ee6 <xor_func+0x1e>
	{
		*value1 = *value1 ^ *value2;
		value1++;	value2++;
	}
}
80002f2e:	2f cd       	sub	sp,-16
80002f30:	e3 cd 80 80 	ldm	sp++,r7,pc

80002f34 <save_salt_to_mcu>:

void save_salt_to_mcu(void)
{
80002f34:	eb cd 40 80 	pushm	r7,lr
80002f38:	1a 97       	mov	r7,sp
80002f3a:	20 2d       	sub	sp,8
	//volatile salt_t *salt = &SALT_STRUCT;
	uint32_t *temp_encypted_password;
	uint8_t i;
	
	temp_encypted_password = encrypt_password(temp_password1);
80002f3c:	48 ec       	lddpc	r12,80002f74 <save_salt_to_mcu+0x40>
80002f3e:	f0 1f 00 0f 	mcall	80002f78 <save_salt_to_mcu+0x44>
80002f42:	18 98       	mov	r8,r12
80002f44:	ef 48 ff f8 	st.w	r7[-8],r8
	memcpy((uint8_t *)Stored_values_ram.unlock_password, (const uint8_t *)temp_encypted_password, 32);
80002f48:	32 0a       	mov	r10,32
80002f4a:	ee fb ff f8 	ld.w	r11,r7[-8]
80002f4e:	48 cc       	lddpc	r12,80002f7c <save_salt_to_mcu+0x48>
80002f50:	f0 1f 00 0c 	mcall	80002f80 <save_salt_to_mcu+0x4c>
	memcpy((uint8_t *)Stored_values_ram.salt, (const uint8_t *)var_Salt.index, 32);
80002f54:	48 a8       	lddpc	r8,80002f7c <save_salt_to_mcu+0x48>
80002f56:	f0 c8 ff 60 	sub	r8,r8,-160
80002f5a:	32 0a       	mov	r10,32
80002f5c:	48 ab       	lddpc	r11,80002f84 <save_salt_to_mcu+0x50>
80002f5e:	10 9c       	mov	r12,r8
80002f60:	f0 1f 00 08 	mcall	80002f80 <save_salt_to_mcu+0x4c>
	Calculate_block_crc();
80002f64:	f0 1f 00 09 	mcall	80002f88 <save_salt_to_mcu+0x54>
	Update_stored_values();
80002f68:	f0 1f 00 09 	mcall	80002f8c <save_salt_to_mcu+0x58>
	
}
80002f6c:	2f ed       	sub	sp,-8
80002f6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f72:	00 00       	add	r0,r0
80002f74:	00 00       	add	r0,r0
80002f76:	02 68       	and	r8,r1
80002f78:	80 00       	ld.sh	r0,r0[0x0]
80002f7a:	2d 34       	sub	r4,-45
80002f7c:	00 00       	add	r0,r0
80002f7e:	0a 88       	andn	r8,r5
80002f80:	80 00       	ld.sh	r0,r0[0x0]
80002f82:	ea d6 00 00 	satsub.w	r6,r5,0
80002f86:	0b ac       	ld.ub	r12,r5[0x2]
80002f88:	80 00       	ld.sh	r0,r0[0x0]
80002f8a:	30 50       	mov	r0,5
80002f8c:	80 00       	ld.sh	r0,r0[0x0]
80002f8e:	2f c4       	sub	r4,-4

80002f90 <save_sequence_to_mcu>:

void save_sequence_to_mcu(void)
{
80002f90:	eb cd 40 80 	pushm	r7,lr
80002f94:	1a 97       	mov	r7,sp
	memcpy_ram2ram((uint8_t *)Stored_values_ram.device_id_confirm, (const uint8_t *)temp_password1, 32);
80002f96:	48 78       	lddpc	r8,80002fb0 <save_sequence_to_mcu+0x20>
80002f98:	2a 08       	sub	r8,-96
80002f9a:	32 0a       	mov	r10,32
80002f9c:	48 6b       	lddpc	r11,80002fb4 <save_sequence_to_mcu+0x24>
80002f9e:	10 9c       	mov	r12,r8
80002fa0:	f0 1f 00 06 	mcall	80002fb8 <save_sequence_to_mcu+0x28>
	Calculate_block_crc();
80002fa4:	f0 1f 00 06 	mcall	80002fbc <save_sequence_to_mcu+0x2c>
	Update_stored_values();
80002fa8:	f0 1f 00 06 	mcall	80002fc0 <save_sequence_to_mcu+0x30>
}
80002fac:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fb0:	00 00       	add	r0,r0
80002fb2:	0a 88       	andn	r8,r5
80002fb4:	00 00       	add	r0,r0
80002fb6:	02 68       	and	r8,r1
80002fb8:	80 00       	ld.sh	r0,r0[0x0]
80002fba:	ea d6 80 00 	satsub.w	r6,r5,-32768
80002fbe:	30 50       	mov	r0,5
80002fc0:	80 00       	ld.sh	r0,r0[0x0]
80002fc2:	2f c4       	sub	r4,-4

80002fc4 <Update_stored_values>:

void Update_stored_values(void)
{
80002fc4:	eb cd 40 80 	pushm	r7,lr
80002fc8:	1a 97       	mov	r7,sp
	flashc_memcpy((void *)&Stored_values_flash, (void *)&Stored_values_ram, sizeof(Stored_values_ram), true);
80002fca:	30 19       	mov	r9,1
80002fcc:	e0 6a 00 c4 	mov	r10,196
80002fd0:	48 3b       	lddpc	r11,80002fdc <Update_stored_values+0x18>
80002fd2:	48 4c       	lddpc	r12,80002fe0 <Update_stored_values+0x1c>
80002fd4:	f0 1f 00 04 	mcall	80002fe4 <Update_stored_values+0x20>
}
80002fd8:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fdc:	00 00       	add	r0,r0
80002fde:	0a 88       	andn	r8,r5
80002fe0:	80 03       	ld.sh	r3,r0[0x0]
80002fe2:	fe 00       	*unknown*
80002fe4:	80 00       	ld.sh	r0,r0[0x0]
80002fe6:	8b 14       	st.w	r5[0x4],r4

80002fe8 <Load_stored_values>:

void Load_stored_values(void)
{
80002fe8:	eb cd 40 80 	pushm	r7,lr
80002fec:	1a 97       	mov	r7,sp
	memcpy_code2ram((void *)&Stored_values_ram, (uint8_t *)&Stored_values_flash, sizeof(Stored_values_ram));
80002fee:	e0 6a 00 c4 	mov	r10,196
80002ff2:	48 4b       	lddpc	r11,80003000 <Load_stored_values+0x18>
80002ff4:	48 4c       	lddpc	r12,80003004 <Load_stored_values+0x1c>
80002ff6:	f0 1f 00 05 	mcall	80003008 <Load_stored_values+0x20>
}
80002ffa:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ffe:	00 00       	add	r0,r0
80003000:	80 03       	ld.sh	r3,r0[0x0]
80003002:	fe 00 00 00 	add	r0,pc,r0
80003006:	0a 88       	andn	r8,r5
80003008:	80 00       	ld.sh	r0,r0[0x0]
8000300a:	ea d6 eb cd 	satsub.w	r6,r5,-5171

8000300c <Start_W_timer>:

void Start_W_timer(void)
{
8000300c:	eb cd 40 80 	pushm	r7,lr
80003010:	1a 97       	mov	r7,sp
	var_W = random_lcg() % 500 + 50;
80003012:	f0 1f 00 0d 	mcall	80003044 <Start_W_timer+0x38>
80003016:	18 9a       	mov	r10,r12
80003018:	e0 68 4d d3 	mov	r8,19923
8000301c:	ea 18 10 62 	orh	r8,0x1062
80003020:	f4 08 06 48 	mulu.d	r8,r10,r8
80003024:	f2 08 16 05 	lsr	r8,r9,0x5
80003028:	e0 69 01 f4 	mov	r9,500
8000302c:	b3 38       	mul	r8,r9
8000302e:	f4 08 01 08 	sub	r8,r10,r8
80003032:	f0 c9 ff ce 	sub	r9,r8,-50
80003036:	48 58       	lddpc	r8,80003048 <Start_W_timer+0x3c>
80003038:	91 09       	st.w	r8[0x0],r9
	var_W_ticks = 0;	
8000303a:	48 58       	lddpc	r8,8000304c <Start_W_timer+0x40>
8000303c:	30 09       	mov	r9,0
8000303e:	91 09       	st.w	r8[0x0],r9
}
80003040:	e3 cd 80 80 	ldm	sp++,r7,pc
80003044:	80 00       	ld.sh	r0,r0[0x0]
80003046:	2d e8       	sub	r8,-34
80003048:	00 00       	add	r0,r0
8000304a:	01 28       	ld.uh	r8,r0++
8000304c:	00 00       	add	r0,r0
8000304e:	02 90       	mov	r0,r1

80003050 <Calculate_block_crc>:

void Calculate_block_crc(void)
{
80003050:	eb cd 40 80 	pushm	r7,lr
80003054:	1a 97       	mov	r7,sp
	Stored_values_ram.block_crc = crcFast((const uint8_t *)&Stored_values_ram, sizeof(Stored_values_ram) - 2);
80003056:	48 78       	lddpc	r8,80003070 <Calculate_block_crc+0x20>
80003058:	e0 6b 00 c2 	mov	r11,194
8000305c:	10 9c       	mov	r12,r8
8000305e:	f0 1f 00 06 	mcall	80003074 <Calculate_block_crc+0x24>
80003062:	18 98       	mov	r8,r12
80003064:	5c 88       	casts.h	r8
80003066:	48 39       	lddpc	r9,80003070 <Calculate_block_crc+0x20>
80003068:	f3 58 00 c0 	st.h	r9[192],r8
8000306c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003070:	00 00       	add	r0,r0
80003072:	0a 88       	andn	r8,r5
80003074:	80 00       	ld.sh	r0,r0[0x0]
80003076:	20 9c       	sub	r12,9

80003078 <calculate_hash>:
unsigned long Rotate_right (unsigned long number, int bits);



 void calculate_hash (uint32_t *input_array, uint8_t length, uint32_t *output_array)
 {
80003078:	eb cd 40 c0 	pushm	r6-r7,lr
8000307c:	1a 97       	mov	r7,sp
8000307e:	20 ed       	sub	sp,56
80003080:	ef 4c ff d0 	st.w	r7[-48],r12
80003084:	16 98       	mov	r8,r11
80003086:	ef 4a ff c8 	st.w	r7[-56],r10
8000308a:	ef 68 ff cc 	st.b	r7[-52],r8
	 int i;
	 unsigned long int S0, S1;
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
8000308e:	fe f8 03 8a 	ld.w	r8,pc[906]
80003092:	ef 48 ff e0 	st.w	r7[-32],r8
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
80003096:	fe f8 03 86 	ld.w	r8,pc[902]
8000309a:	ef 48 ff ec 	st.w	r7[-20],r8
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
8000309e:	30 08       	mov	r8,0
800030a0:	ef 48 ff d4 	st.w	r7[-44],r8
800030a4:	c1 68       	rjmp	800030d0 <calculate_hash+0x58>
	 {
		 Key_ptr[i] = input_array[i];
800030a6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030aa:	a3 68       	lsl	r8,0x2
800030ac:	ee f9 ff e0 	ld.w	r9,r7[-32]
800030b0:	f2 08 00 08 	add	r8,r9,r8
800030b4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800030b8:	a3 69       	lsl	r9,0x2
800030ba:	ee fa ff d0 	ld.w	r10,r7[-48]
800030be:	f4 09 00 09 	add	r9,r10,r9
800030c2:	72 09       	ld.w	r9,r9[0x0]
800030c4:	91 09       	st.w	r8[0x0],r9
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
800030c6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030ca:	2f f8       	sub	r8,-1
800030cc:	ef 48 ff d4 	st.w	r7[-44],r8
800030d0:	ef 39 ff cc 	ld.ub	r9,r7[-52]
800030d4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030d8:	10 39       	cp.w	r9,r8
800030da:	fe 99 ff e6 	brgt	800030a6 <calculate_hash+0x2e>
	 {
		 Key_ptr[i] = input_array[i];
	 }
	 
	 PadtheMessage(length << 2);
800030de:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800030e2:	a3 68       	lsl	r8,0x2
800030e4:	5c 58       	castu.b	r8
800030e6:	10 9c       	mov	r12,r8
800030e8:	f0 1f 00 ce 	mcall	80003420 <calculate_hash+0x3a8>
	 
	 
	 W = Message_Schedule_W;
800030ec:	fe f8 03 38 	ld.w	r8,pc[824]
800030f0:	ef 48 ff e4 	st.w	r7[-28],r8
	 M = (unsigned long int *)Padded_Message;
800030f4:	fe f8 03 24 	ld.w	r8,pc[804]
800030f8:	ef 48 ff e8 	st.w	r7[-24],r8
	 for (i = 0; i < 16; i++)
800030fc:	30 08       	mov	r8,0
800030fe:	ef 48 ff d4 	st.w	r7[-44],r8
80003102:	c1 68       	rjmp	8000312e <calculate_hash+0xb6>
	 {
		W[i] = M[i];
80003104:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003108:	a3 68       	lsl	r8,0x2
8000310a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000310e:	f2 08 00 08 	add	r8,r9,r8
80003112:	ee f9 ff d4 	ld.w	r9,r7[-44]
80003116:	a3 69       	lsl	r9,0x2
80003118:	ee fa ff e8 	ld.w	r10,r7[-24]
8000311c:	f4 09 00 09 	add	r9,r10,r9
80003120:	72 09       	ld.w	r9,r9[0x0]
80003122:	91 09       	st.w	r8[0x0],r9
	 PadtheMessage(length << 2);
	 
	 
	 W = Message_Schedule_W;
	 M = (unsigned long int *)Padded_Message;
	 for (i = 0; i < 16; i++)
80003124:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003128:	2f f8       	sub	r8,-1
8000312a:	ef 48 ff d4 	st.w	r7[-44],r8
8000312e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003132:	58 f8       	cp.w	r8,15
80003134:	fe 9a ff e8 	brle	80003104 <calculate_hash+0x8c>
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
80003138:	31 08       	mov	r8,16
8000313a:	ef 48 ff d4 	st.w	r7[-44],r8
8000313e:	c7 58       	rjmp	80003228 <calculate_hash+0x1b0>
	 {
		 S0 = Rotate_right(Message_Schedule_W[i - 15], 7) XOR Rotate_right(Message_Schedule_W[i - 15], 18) XOR (Message_Schedule_W[i - 15] >> 3);
80003140:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003144:	f0 c9 00 0f 	sub	r9,r8,15
80003148:	fe f8 02 dc 	ld.w	r8,pc[732]
8000314c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003150:	30 7b       	mov	r11,7
80003152:	10 9c       	mov	r12,r8
80003154:	f0 1f 00 b5 	mcall	80003428 <calculate_hash+0x3b0>
80003158:	18 96       	mov	r6,r12
8000315a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000315e:	f0 c9 00 0f 	sub	r9,r8,15
80003162:	fe f8 02 c2 	ld.w	r8,pc[706]
80003166:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000316a:	31 2b       	mov	r11,18
8000316c:	10 9c       	mov	r12,r8
8000316e:	f0 1f 00 af 	mcall	80003428 <calculate_hash+0x3b0>
80003172:	18 98       	mov	r8,r12
80003174:	ed e8 20 09 	eor	r9,r6,r8
80003178:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000317c:	f0 ca 00 0f 	sub	r10,r8,15
80003180:	fe f8 02 a4 	ld.w	r8,pc[676]
80003184:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003188:	a3 98       	lsr	r8,0x3
8000318a:	f3 e8 20 08 	eor	r8,r9,r8
8000318e:	ef 48 ff d8 	st.w	r7[-40],r8
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
80003192:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003196:	f0 c9 00 02 	sub	r9,r8,2
8000319a:	fe f8 02 8a 	ld.w	r8,pc[650]
8000319e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800031a2:	31 1b       	mov	r11,17
800031a4:	10 9c       	mov	r12,r8
800031a6:	f0 1f 00 a1 	mcall	80003428 <calculate_hash+0x3b0>
800031aa:	18 96       	mov	r6,r12
800031ac:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031b0:	f0 c9 00 02 	sub	r9,r8,2
800031b4:	fe f8 02 70 	ld.w	r8,pc[624]
800031b8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800031bc:	31 3b       	mov	r11,19
800031be:	10 9c       	mov	r12,r8
800031c0:	f0 1f 00 9a 	mcall	80003428 <calculate_hash+0x3b0>
800031c4:	18 98       	mov	r8,r12
800031c6:	ed e8 20 09 	eor	r9,r6,r8
800031ca:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031ce:	f0 ca 00 02 	sub	r10,r8,2
800031d2:	fe f8 02 52 	ld.w	r8,pc[594]
800031d6:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800031da:	ab 88       	lsr	r8,0xa
800031dc:	f3 e8 20 08 	eor	r8,r9,r8
800031e0:	ef 48 ff dc 	st.w	r7[-36],r8
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
800031e4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800031e8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031ec:	f0 ca 00 10 	sub	r10,r8,16
800031f0:	fe f8 02 34 	ld.w	r8,pc[564]
800031f4:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800031f8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800031fc:	10 0a       	add	r10,r8
800031fe:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003202:	f0 cb 00 07 	sub	r11,r8,7
80003206:	fe f8 02 1e 	ld.w	r8,pc[542]
8000320a:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000320e:	10 0a       	add	r10,r8
80003210:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003214:	10 0a       	add	r10,r8
80003216:	fe f8 02 0e 	ld.w	r8,pc[526]
8000321a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
8000321e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003222:	2f f8       	sub	r8,-1
80003224:	ef 48 ff d4 	st.w	r7[-44],r8
80003228:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000322c:	e0 48 00 3f 	cp.w	r8,63
80003230:	fe 9a ff 88 	brle	80003140 <calculate_hash+0xc8>
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
80003234:	30 08       	mov	r8,0
80003236:	ef 48 ff d4 	st.w	r7[-44],r8
8000323a:	c1 38       	rjmp	80003260 <calculate_hash+0x1e8>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
8000323c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003240:	a3 68       	lsl	r8,0x2
80003242:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003246:	f2 08 00 08 	add	r8,r9,r8
8000324a:	ee fa ff d4 	ld.w	r10,r7[-44]
8000324e:	4f 89       	lddpc	r9,8000342c <calculate_hash+0x3b4>
80003250:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80003254:	91 09       	st.w	r8[0x0],r9
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
80003256:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000325a:	2f f8       	sub	r8,-1
8000325c:	ef 48 ff d4 	st.w	r7[-44],r8
80003260:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003264:	58 78       	cp.w	r8,7
80003266:	fe 9a ff eb 	brle	8000323c <calculate_hash+0x1c4>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
8000326a:	30 08       	mov	r8,0
8000326c:	ef 48 ff d4 	st.w	r7[-44],r8
80003270:	ca 68       	rjmp	800033bc <calculate_hash+0x344>
	 {
		 unsigned long int maj, t2, ch, t1;
		 S0 = Rotate_right(chunk.a, 2) XOR Rotate_right(chunk.a, 13) XOR Rotate_right(chunk.a, 22);
80003272:	4e b8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
80003274:	70 08       	ld.w	r8,r8[0x0]
80003276:	30 2b       	mov	r11,2
80003278:	10 9c       	mov	r12,r8
8000327a:	f0 1f 00 6c 	mcall	80003428 <calculate_hash+0x3b0>
8000327e:	18 96       	mov	r6,r12
80003280:	4e 78       	lddpc	r8,8000341c <calculate_hash+0x3a4>
80003282:	70 08       	ld.w	r8,r8[0x0]
80003284:	30 db       	mov	r11,13
80003286:	10 9c       	mov	r12,r8
80003288:	f0 1f 00 68 	mcall	80003428 <calculate_hash+0x3b0>
8000328c:	18 98       	mov	r8,r12
8000328e:	10 56       	eor	r6,r8
80003290:	4e 38       	lddpc	r8,8000341c <calculate_hash+0x3a4>
80003292:	70 08       	ld.w	r8,r8[0x0]
80003294:	31 6b       	mov	r11,22
80003296:	10 9c       	mov	r12,r8
80003298:	f0 1f 00 64 	mcall	80003428 <calculate_hash+0x3b0>
8000329c:	18 98       	mov	r8,r12
8000329e:	ed e8 20 08 	eor	r8,r6,r8
800032a2:	ef 48 ff d8 	st.w	r7[-40],r8
		 maj = (chunk.a & chunk.b) XOR (chunk.a & chunk.c) XOR (chunk.b & chunk.c);
800032a6:	4d e8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
800032a8:	70 09       	ld.w	r9,r8[0x0]
800032aa:	4d d8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
800032ac:	70 18       	ld.w	r8,r8[0x4]
800032ae:	10 69       	and	r9,r8
800032b0:	4d b8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
800032b2:	70 0a       	ld.w	r10,r8[0x0]
800032b4:	4d a8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
800032b6:	70 28       	ld.w	r8,r8[0x8]
800032b8:	f5 e8 00 08 	and	r8,r10,r8
800032bc:	10 59       	eor	r9,r8
800032be:	4d 88       	lddpc	r8,8000341c <calculate_hash+0x3a4>
800032c0:	70 1a       	ld.w	r10,r8[0x4]
800032c2:	4d 78       	lddpc	r8,8000341c <calculate_hash+0x3a4>
800032c4:	70 28       	ld.w	r8,r8[0x8]
800032c6:	f5 e8 00 08 	and	r8,r10,r8
800032ca:	f3 e8 20 08 	eor	r8,r9,r8
800032ce:	ef 48 ff f0 	st.w	r7[-16],r8
		 t2 = S0 + maj;
800032d2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800032d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800032da:	f2 08 00 08 	add	r8,r9,r8
800032de:	ef 48 ff f4 	st.w	r7[-12],r8
		 S1 = Rotate_right(chunk.e, 6) XOR Rotate_right(chunk.e, 11) XOR Rotate_right(chunk.e, 25);
800032e2:	4c f8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
800032e4:	70 48       	ld.w	r8,r8[0x10]
800032e6:	30 6b       	mov	r11,6
800032e8:	10 9c       	mov	r12,r8
800032ea:	f0 1f 00 50 	mcall	80003428 <calculate_hash+0x3b0>
800032ee:	18 96       	mov	r6,r12
800032f0:	4c b8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
800032f2:	70 48       	ld.w	r8,r8[0x10]
800032f4:	30 bb       	mov	r11,11
800032f6:	10 9c       	mov	r12,r8
800032f8:	f0 1f 00 4c 	mcall	80003428 <calculate_hash+0x3b0>
800032fc:	18 98       	mov	r8,r12
800032fe:	10 56       	eor	r6,r8
80003300:	4c 78       	lddpc	r8,8000341c <calculate_hash+0x3a4>
80003302:	70 48       	ld.w	r8,r8[0x10]
80003304:	31 9b       	mov	r11,25
80003306:	10 9c       	mov	r12,r8
80003308:	f0 1f 00 48 	mcall	80003428 <calculate_hash+0x3b0>
8000330c:	18 98       	mov	r8,r12
8000330e:	ed e8 20 08 	eor	r8,r6,r8
80003312:	ef 48 ff dc 	st.w	r7[-36],r8
		 ch = (chunk.e & chunk.f) XOR ((~chunk.e) & chunk.g);
80003316:	4c 28       	lddpc	r8,8000341c <calculate_hash+0x3a4>
80003318:	70 49       	ld.w	r9,r8[0x10]
8000331a:	4c 18       	lddpc	r8,8000341c <calculate_hash+0x3a4>
8000331c:	70 58       	ld.w	r8,r8[0x14]
8000331e:	10 69       	and	r9,r8
80003320:	4b f8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
80003322:	70 48       	ld.w	r8,r8[0x10]
80003324:	f0 0a 11 ff 	rsub	r10,r8,-1
80003328:	4b d8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
8000332a:	70 68       	ld.w	r8,r8[0x18]
8000332c:	f5 e8 00 08 	and	r8,r10,r8
80003330:	f3 e8 20 08 	eor	r8,r9,r8
80003334:	ef 48 ff f8 	st.w	r7[-8],r8
		 t1 = chunk.h + S1 + ch + Hash_Constant[i] + Message_Schedule_W[i];
80003338:	4b 98       	lddpc	r8,8000341c <calculate_hash+0x3a4>
8000333a:	70 79       	ld.w	r9,r8[0x1c]
8000333c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003340:	10 09       	add	r9,r8
80003342:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003346:	10 09       	add	r9,r8
80003348:	ee fa ff d4 	ld.w	r10,r7[-44]
8000334c:	4b 98       	lddpc	r8,80003430 <calculate_hash+0x3b8>
8000334e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003352:	10 09       	add	r9,r8
80003354:	ee fa ff d4 	ld.w	r10,r7[-44]
80003358:	4b 38       	lddpc	r8,80003424 <calculate_hash+0x3ac>
8000335a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000335e:	f2 08 00 08 	add	r8,r9,r8
80003362:	ef 48 ff fc 	st.w	r7[-4],r8
		 
		 chunk.h = chunk.g;
80003366:	4a e8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
80003368:	70 69       	ld.w	r9,r8[0x18]
8000336a:	4a d8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
8000336c:	91 79       	st.w	r8[0x1c],r9
		 chunk.g = chunk.f;
8000336e:	4a c8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
80003370:	70 59       	ld.w	r9,r8[0x14]
80003372:	4a b8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
80003374:	91 69       	st.w	r8[0x18],r9
		 chunk.f = chunk.e;
80003376:	4a a8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
80003378:	70 49       	ld.w	r9,r8[0x10]
8000337a:	4a 98       	lddpc	r8,8000341c <calculate_hash+0x3a4>
8000337c:	91 59       	st.w	r8[0x14],r9
		 chunk.e = chunk.d + t1;
8000337e:	4a 88       	lddpc	r8,8000341c <calculate_hash+0x3a4>
80003380:	70 39       	ld.w	r9,r8[0xc]
80003382:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003386:	10 09       	add	r9,r8
80003388:	4a 58       	lddpc	r8,8000341c <calculate_hash+0x3a4>
8000338a:	91 49       	st.w	r8[0x10],r9
		 chunk.d = chunk.c;
8000338c:	4a 48       	lddpc	r8,8000341c <calculate_hash+0x3a4>
8000338e:	70 29       	ld.w	r9,r8[0x8]
80003390:	4a 38       	lddpc	r8,8000341c <calculate_hash+0x3a4>
80003392:	91 39       	st.w	r8[0xc],r9
		 chunk.c = chunk.b;
80003394:	4a 28       	lddpc	r8,8000341c <calculate_hash+0x3a4>
80003396:	70 19       	ld.w	r9,r8[0x4]
80003398:	4a 18       	lddpc	r8,8000341c <calculate_hash+0x3a4>
8000339a:	91 29       	st.w	r8[0x8],r9
		 chunk.b = chunk.a;
8000339c:	4a 08       	lddpc	r8,8000341c <calculate_hash+0x3a4>
8000339e:	70 09       	ld.w	r9,r8[0x0]
800033a0:	49 f8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
800033a2:	91 19       	st.w	r8[0x4],r9
		 chunk.a = t1 + t2;
800033a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800033a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800033ac:	10 09       	add	r9,r8
800033ae:	49 c8       	lddpc	r8,8000341c <calculate_hash+0x3a4>
800033b0:	91 09       	st.w	r8[0x0],r9
	 for (i = 0; i < 8; i++)
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
800033b2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800033b6:	2f f8       	sub	r8,-1
800033b8:	ef 48 ff d4 	st.w	r7[-44],r8
800033bc:	ee f8 ff d4 	ld.w	r8,r7[-44]
800033c0:	e0 48 00 3f 	cp.w	r8,63
800033c4:	fe 9a ff 57 	brle	80003272 <calculate_hash+0x1fa>
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
800033c8:	30 08       	mov	r8,0
800033ca:	ef 48 ff d4 	st.w	r7[-44],r8
800033ce:	c1 d8       	rjmp	80003408 <calculate_hash+0x390>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
800033d0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800033d4:	a3 68       	lsl	r8,0x2
800033d6:	ee f9 ff c8 	ld.w	r9,r7[-56]
800033da:	f2 08 00 08 	add	r8,r9,r8
800033de:	ee fa ff d4 	ld.w	r10,r7[-44]
800033e2:	49 39       	lddpc	r9,8000342c <calculate_hash+0x3b4>
800033e4:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
800033e8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800033ec:	a3 69       	lsl	r9,0x2
800033ee:	ee fb ff ec 	ld.w	r11,r7[-20]
800033f2:	f6 09 00 09 	add	r9,r11,r9
800033f6:	72 09       	ld.w	r9,r9[0x0]
800033f8:	f4 09 00 09 	add	r9,r10,r9
800033fc:	91 09       	st.w	r8[0x0],r9
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
800033fe:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003402:	2f f8       	sub	r8,-1
80003404:	ef 48 ff d4 	st.w	r7[-44],r8
80003408:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000340c:	58 78       	cp.w	r8,7
8000340e:	fe 9a ff e1 	brle	800033d0 <calculate_hash+0x358>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
	 }
 }
80003412:	2f 2d       	sub	sp,-56
80003414:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003418:	00 00       	add	r0,r0
8000341a:	02 94       	mov	r4,r1
8000341c:	00 00       	add	r0,r0
8000341e:	0b d0       	ld.ub	r0,r5[0x5]
80003420:	80 00       	ld.sh	r0,r0[0x0]
80003422:	34 34       	mov	r4,67
80003424:	00 00       	add	r0,r0
80003426:	02 d4       	st.w	--r1,r4
80003428:	80 00       	ld.sh	r0,r0[0x0]
8000342a:	34 ac       	mov	r12,74
8000342c:	80 00       	ld.sh	r0,r0[0x0]
8000342e:	f0 20 80 00 	sub	r0,-1015808
80003432:	f0 40 eb cd 	cp.w	r0,-988211

80003434 <PadtheMessage>:


 void PadtheMessage(uint8_t message_length)
 {
80003434:	eb cd 40 80 	pushm	r7,lr
80003438:	1a 97       	mov	r7,sp
8000343a:	20 3d       	sub	sp,12
8000343c:	18 98       	mov	r8,r12
8000343e:	ef 68 ff f4 	st.b	r7[-12],r8
	 unsigned char i;
	 unsigned short int message_length_bits;
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];
80003442:	49 a8       	lddpc	r8,800034a8 <PadtheMessage+0x74>
80003444:	ef 48 ff fc 	st.w	r7[-4],r8

	 message_length_bits = message_length << 3;
80003448:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000344c:	a3 78       	lsl	r8,0x3
8000344e:	ef 58 ff fa 	st.h	r7[-6],r8
	 Padded_Message[message_length++] = 0x80;
80003452:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003456:	49 5a       	lddpc	r10,800034a8 <PadtheMessage+0x74>
80003458:	38 08       	mov	r8,-128
8000345a:	f4 09 0b 08 	st.b	r10[r9],r8
8000345e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003462:	2f f8       	sub	r8,-1
80003464:	ef 68 ff f4 	st.b	r7[-12],r8

	 for (i = message_length; i < 64; i++)
80003468:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000346c:	ef 68 ff f9 	st.b	r7[-7],r8
80003470:	c0 c8       	rjmp	80003488 <PadtheMessage+0x54>
	 {
		Padded_Message[i] = 0x00;
80003472:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80003476:	48 da       	lddpc	r10,800034a8 <PadtheMessage+0x74>
80003478:	30 08       	mov	r8,0
8000347a:	f4 09 0b 08 	st.b	r10[r9],r8
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];

	 message_length_bits = message_length << 3;
	 Padded_Message[message_length++] = 0x80;

	 for (i = message_length; i < 64; i++)
8000347e:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003482:	2f f8       	sub	r8,-1
80003484:	ef 68 ff f9 	st.b	r7[-7],r8
80003488:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000348c:	33 f8       	mov	r8,63
8000348e:	f0 09 18 00 	cp.b	r9,r8
80003492:	fe 98 ff f0 	brls	80003472 <PadtheMessage+0x3e>
	 {
		Padded_Message[i] = 0x00;
	 }

	 //ptrPadded_Message = (unsigned long int *)&Padded_Message[60];
	 ptrPadded_Message[15] = (unsigned long int)message_length_bits;
80003496:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000349a:	2c 48       	sub	r8,-60
8000349c:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800034a0:	91 09       	st.w	r8[0x0],r9
	 //Padded_Message[62] = *((unsigned char *)&message_length_bits);
	 //Padded_Message[63] = *((unsigned char *)&message_length_bits + 1);
 }
800034a2:	2f dd       	sub	sp,-12
800034a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800034a8:	00 00       	add	r0,r0
800034aa:	02 94       	mov	r4,r1

800034ac <Rotate_right>:

 unsigned long int Rotate_right (unsigned long int number, int bits)
 {
800034ac:	eb cd 40 80 	pushm	r7,lr
800034b0:	1a 97       	mov	r7,sp
800034b2:	20 3d       	sub	sp,12
800034b4:	ef 4c ff f8 	st.w	r7[-8],r12
800034b8:	ef 4b ff f4 	st.w	r7[-12],r11
	 unsigned long int bit_mask = ((unsigned long int)2 << bits) - 1;
800034bc:	30 29       	mov	r9,2
800034be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034c2:	f2 08 09 48 	lsl	r8,r9,r8
800034c6:	20 18       	sub	r8,1
800034c8:	ef 48 ff fc 	st.w	r7[-4],r8
	 return ((number >> bits) | ((number & bit_mask) << (32 - bits)));
800034cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034d4:	f2 08 0a 49 	lsr	r9,r9,r8
800034d8:	ee fa ff f8 	ld.w	r10,r7[-8]
800034dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034e0:	10 6a       	and	r10,r8
800034e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034e6:	f0 08 11 20 	rsub	r8,r8,32
800034ea:	f4 08 09 48 	lsl	r8,r10,r8
800034ee:	f3 e8 10 08 	or	r8,r9,r8
 }
800034f2:	10 9c       	mov	r12,r8
800034f4:	2f dd       	sub	sp,-12
800034f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800034fa:	d7 03       	nop

800034fc <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
800034fc:	eb cd 40 80 	pushm	r7,lr
80003500:	1a 97       	mov	r7,sp
80003502:	20 1d       	sub	sp,4
80003504:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003508:	ee fb ff fc 	ld.w	r11,r7[-4]
8000350c:	30 1c       	mov	r12,1
8000350e:	f0 1f 00 03 	mcall	80003518 <sysclk_enable_hsb_module+0x1c>
}
80003512:	2f fd       	sub	sp,-4
80003514:	e3 cd 80 80 	ldm	sp++,r7,pc
80003518:	80 00       	ld.sh	r0,r0[0x0]
8000351a:	c2 1c       	rcall	8000355c <sysclk_enable_peripheral_clock+0x20>

8000351c <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
8000351c:	eb cd 40 80 	pushm	r7,lr
80003520:	1a 97       	mov	r7,sp
80003522:	20 1d       	sub	sp,4
80003524:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003528:	ee fb ff fc 	ld.w	r11,r7[-4]
8000352c:	30 2c       	mov	r12,2
8000352e:	f0 1f 00 03 	mcall	80003538 <sysclk_enable_pba_module+0x1c>
}
80003532:	2f fd       	sub	sp,-4
80003534:	e3 cd 80 80 	ldm	sp++,r7,pc
80003538:	80 00       	ld.sh	r0,r0[0x0]
8000353a:	c2 1c       	rcall	8000357c <sysclk_enable_peripheral_clock+0x40>

8000353c <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
8000353c:	eb cd 40 80 	pushm	r7,lr
80003540:	1a 97       	mov	r7,sp
80003542:	20 1d       	sub	sp,4
80003544:	ef 4c ff fc 	st.w	r7[-4],r12
	switch ((uintptr_t)module) {
80003548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000354c:	fe 58 14 00 	cp.w	r8,-60416
80003550:	e0 80 00 a5 	breq	8000369a <sysclk_enable_peripheral_clock+0x15e>
80003554:	e0 8b 00 40 	brhi	800035d4 <sysclk_enable_peripheral_clock+0x98>
80003558:	fe 48 24 00 	cp.w	r8,-121856
8000355c:	e0 80 00 d9 	breq	8000370e <sysclk_enable_peripheral_clock+0x1d2>
80003560:	e0 8b 00 1e 	brhi	8000359c <sysclk_enable_peripheral_clock+0x60>
80003564:	fe 48 10 00 	cp.w	r8,-126976
80003568:	e0 80 00 b9 	breq	800036da <sysclk_enable_peripheral_clock+0x19e>
8000356c:	e0 8b 00 0b 	brhi	80003582 <sysclk_enable_peripheral_clock+0x46>
80003570:	fc 58 00 00 	cp.w	r8,-196608
80003574:	e0 80 00 e0 	breq	80003734 <sysclk_enable_peripheral_clock+0x1f8>
80003578:	fe 48 00 00 	cp.w	r8,-131072
8000357c:	e0 80 00 b3 	breq	800036e2 <sysclk_enable_peripheral_clock+0x1a6>
		break;
#endif

	default:
		Assert(false);
		return;
80003580:	cd e8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003582:	fe 48 1c 00 	cp.w	r8,-123904
80003586:	e0 80 00 bc 	breq	800036fe <sysclk_enable_peripheral_clock+0x1c2>
8000358a:	fe 48 20 00 	cp.w	r8,-122880
8000358e:	e0 80 00 bc 	breq	80003706 <sysclk_enable_peripheral_clock+0x1ca>
80003592:	fe 48 14 00 	cp.w	r8,-125952
80003596:	e0 80 00 ad 	breq	800036f0 <sysclk_enable_peripheral_clock+0x1b4>
		break;
#endif

	default:
		Assert(false);
		return;
8000359a:	cd 18       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000359c:	fe 58 00 00 	cp.w	r8,-65536
800035a0:	c5 60       	breq	8000364c <sysclk_enable_peripheral_clock+0x110>
800035a2:	e0 8b 00 0f 	brhi	800035c0 <sysclk_enable_peripheral_clock+0x84>
800035a6:	fe 48 40 00 	cp.w	r8,-114688
800035aa:	e0 80 00 b6 	breq	80003716 <sysclk_enable_peripheral_clock+0x1da>
800035ae:	fe 48 80 00 	cp.w	r8,-98304
800035b2:	e0 80 00 bd 	breq	8000372c <sysclk_enable_peripheral_clock+0x1f0>
800035b6:	fe 48 28 00 	cp.w	r8,-120832
800035ba:	e0 80 00 b2 	breq	8000371e <sysclk_enable_peripheral_clock+0x1e2>
		break;
#endif

	default:
		Assert(false);
		return;
800035be:	cb f8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800035c0:	fe 58 0c 00 	cp.w	r8,-62464
800035c4:	c4 b0       	breq	8000365a <sysclk_enable_peripheral_clock+0x11e>
800035c6:	fe 58 10 00 	cp.w	r8,-61440
800035ca:	c3 d0       	breq	80003644 <sysclk_enable_peripheral_clock+0x108>
800035cc:	fe 58 08 00 	cp.w	r8,-63488
800035d0:	c3 60       	breq	8000363c <sysclk_enable_peripheral_clock+0x100>
		break;
#endif

	default:
		Assert(false);
		return;
800035d2:	cb 58       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800035d4:	fe 58 30 00 	cp.w	r8,-53248
800035d8:	c5 50       	breq	80003682 <sysclk_enable_peripheral_clock+0x146>
800035da:	e0 8b 00 18 	brhi	8000360a <sysclk_enable_peripheral_clock+0xce>
800035de:	fe 58 20 00 	cp.w	r8,-57344
800035e2:	c6 80       	breq	800036b2 <sysclk_enable_peripheral_clock+0x176>
800035e4:	e0 8b 00 09 	brhi	800035f6 <sysclk_enable_peripheral_clock+0xba>
800035e8:	fe 58 18 00 	cp.w	r8,-59392
800035ec:	c5 b0       	breq	800036a2 <sysclk_enable_peripheral_clock+0x166>
800035ee:	fe 58 1c 00 	cp.w	r8,-58368
800035f2:	c5 c0       	breq	800036aa <sysclk_enable_peripheral_clock+0x16e>
		break;
#endif

	default:
		Assert(false);
		return;
800035f4:	ca 48       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800035f6:	fe 58 28 00 	cp.w	r8,-55296
800035fa:	c3 c0       	breq	80003672 <sysclk_enable_peripheral_clock+0x136>
800035fc:	fe 58 2c 00 	cp.w	r8,-54272
80003600:	c3 d0       	breq	8000367a <sysclk_enable_peripheral_clock+0x13e>
80003602:	fe 58 24 00 	cp.w	r8,-56320
80003606:	c3 20       	breq	8000366a <sysclk_enable_peripheral_clock+0x12e>
		break;
#endif

	default:
		Assert(false);
		return;
80003608:	c9 a8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000360a:	fe 58 40 00 	cp.w	r8,-49152
8000360e:	c6 20       	breq	800036d2 <sysclk_enable_peripheral_clock+0x196>
80003610:	e0 8b 00 0c 	brhi	80003628 <sysclk_enable_peripheral_clock+0xec>
80003614:	fe 58 38 00 	cp.w	r8,-51200
80003618:	c5 50       	breq	800036c2 <sysclk_enable_peripheral_clock+0x186>
8000361a:	fe 58 3c 00 	cp.w	r8,-50176
8000361e:	c2 20       	breq	80003662 <sysclk_enable_peripheral_clock+0x126>
80003620:	fe 58 34 00 	cp.w	r8,-52224
80003624:	c4 b0       	breq	800036ba <sysclk_enable_peripheral_clock+0x17e>
		break;
#endif

	default:
		Assert(false);
		return;
80003626:	c8 b8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003628:	fe 58 50 00 	cp.w	r8,-45056
8000362c:	c2 f0       	breq	8000368a <sysclk_enable_peripheral_clock+0x14e>
8000362e:	fe 58 54 00 	cp.w	r8,-44032
80003632:	c3 00       	breq	80003692 <sysclk_enable_peripheral_clock+0x156>
80003634:	fe 58 44 00 	cp.w	r8,-48128
80003638:	c4 90       	breq	800036ca <sysclk_enable_peripheral_clock+0x18e>
		break;
#endif

	default:
		Assert(false);
		return;
8000363a:	c8 18       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
	case AVR32_INTC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_INTC);
8000363c:	30 0c       	mov	r12,0
8000363e:	f0 1f 00 42 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
80003642:	c7 d8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_GPIO_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_GPIO);
80003644:	30 1c       	mov	r12,1
80003646:	f0 1f 00 40 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
8000364a:	c7 98       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PDCA_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
8000364c:	30 4c       	mov	r12,4
8000364e:	f0 1f 00 3f 	mcall	80003748 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pba_module(SYSCLK_PDCA_PB);
80003652:	30 2c       	mov	r12,2
80003654:	f0 1f 00 3c 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
80003658:	c7 28       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PM);
8000365a:	30 3c       	mov	r12,3
8000365c:	f0 1f 00 3a 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
80003660:	c6 e8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ADC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ADC);
80003662:	30 4c       	mov	r12,4
80003664:	f0 1f 00 38 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
80003668:	c6 a8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI0);
8000366a:	30 5c       	mov	r12,5
8000366c:	f0 1f 00 36 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
80003670:	c6 68       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
80003672:	30 6c       	mov	r12,6
80003674:	f0 1f 00 34 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
80003678:	c6 28       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
8000367a:	30 7c       	mov	r12,7
8000367c:	f0 1f 00 32 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
80003680:	c5 e8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
80003682:	30 8c       	mov	r12,8
80003684:	f0 1f 00 30 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
80003688:	c5 a8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
8000368a:	30 9c       	mov	r12,9
8000368c:	f0 1f 00 2e 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
80003690:	c5 68       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
80003692:	30 ac       	mov	r12,10
80003694:	f0 1f 00 2c 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
80003698:	c5 28       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART0);
8000369a:	30 bc       	mov	r12,11
8000369c:	f0 1f 00 2a 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
800036a0:	c4 e8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART1);
800036a2:	30 cc       	mov	r12,12
800036a4:	f0 1f 00 28 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
800036a8:	c4 a8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART2_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
800036aa:	30 dc       	mov	r12,13
800036ac:	f0 1f 00 26 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
800036b0:	c4 68       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART3_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART3);
800036b2:	30 ec       	mov	r12,14
800036b4:	f0 1f 00 24 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
800036b8:	c4 28       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SSC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SSC);
800036ba:	30 fc       	mov	r12,15
800036bc:	f0 1f 00 22 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
800036c0:	c3 e8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC0);
800036c2:	31 0c       	mov	r12,16
800036c4:	f0 1f 00 20 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
800036c8:	c3 a8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC1);
800036ca:	31 1c       	mov	r12,17
800036cc:	f0 1f 00 1e 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
800036d0:	c3 68       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ABDAC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DAC);
800036d2:	31 2c       	mov	r12,18
800036d4:	f0 1f 00 1c 	mcall	80003744 <sysclk_enable_peripheral_clock+0x208>
		break;
800036d8:	c3 28       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_HMATRIX_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
800036da:	30 0c       	mov	r12,0
800036dc:	f0 1f 00 1c 	mcall	8000374c <sysclk_enable_peripheral_clock+0x210>
		break;
800036e0:	c2 e8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USBB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
800036e2:	30 3c       	mov	r12,3
800036e4:	f0 1f 00 19 	mcall	80003748 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
800036e8:	30 1c       	mov	r12,1
800036ea:	f0 1f 00 19 	mcall	8000374c <sysclk_enable_peripheral_clock+0x210>
		break;
800036ee:	c2 78       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_FLASHC_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_FLASHC_DATA);
800036f0:	30 0c       	mov	r12,0
800036f2:	f0 1f 00 16 	mcall	80003748 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_FLASHC_REGS);
800036f6:	30 2c       	mov	r12,2
800036f8:	f0 1f 00 15 	mcall	8000374c <sysclk_enable_peripheral_clock+0x210>
		break;
800036fc:	c2 08       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SMC_REGS);
800036fe:	30 3c       	mov	r12,3
80003700:	f0 1f 00 13 	mcall	8000374c <sysclk_enable_peripheral_clock+0x210>
		break;
80003704:	c1 c8       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SDRAMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SDRAMC_REGS);
80003706:	30 4c       	mov	r12,4
80003708:	f0 1f 00 11 	mcall	8000374c <sysclk_enable_peripheral_clock+0x210>
		break;
8000370c:	c1 88       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ECCHRS_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_ECC);
8000370e:	30 5c       	mov	r12,5
80003710:	f0 1f 00 0f 	mcall	8000374c <sysclk_enable_peripheral_clock+0x210>
		break;
80003714:	c1 48       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MCI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MCI);
80003716:	30 6c       	mov	r12,6
80003718:	f0 1f 00 0d 	mcall	8000374c <sysclk_enable_peripheral_clock+0x210>
		break;
8000371c:	c1 08       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_BUSMON_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_BUSMON_HSB);
8000371e:	30 8c       	mov	r12,8
80003720:	f0 1f 00 0a 	mcall	80003748 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_BUSMON);
80003724:	30 7c       	mov	r12,7
80003726:	f0 1f 00 0a 	mcall	8000374c <sysclk_enable_peripheral_clock+0x210>
		break;
8000372a:	c0 98       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MSI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MSI);
8000372c:	30 8c       	mov	r12,8
8000372e:	f0 1f 00 08 	mcall	8000374c <sysclk_enable_peripheral_clock+0x210>
		break;
80003732:	c0 58       	rjmp	8000373c <sysclk_enable_peripheral_clock+0x200>

#if defined(AVR32_AES_ADDRESS)
	case AVR32_AES_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_AES);
80003734:	30 9c       	mov	r12,9
80003736:	f0 1f 00 06 	mcall	8000374c <sysclk_enable_peripheral_clock+0x210>
		break;
8000373a:	d7 03       	nop

	default:
		Assert(false);
		return;
	}
}
8000373c:	2f fd       	sub	sp,-4
8000373e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003742:	00 00       	add	r0,r0
80003744:	80 00       	ld.sh	r0,r0[0x0]
80003746:	35 1c       	mov	r12,81
80003748:	80 00       	ld.sh	r0,r0[0x0]
8000374a:	34 fc       	mov	r12,79
8000374c:	80 00       	ld.sh	r0,r0[0x0]
8000374e:	c2 90       	breq	800037a0 <tc_irq+0x50>

80003750 <tc_irq>:
 * The ISR handles RC compare interrupt and sets the update_timer flag to
 * update the timer value.
 */
__attribute__((__interrupt__))
static void tc_irq(void)
{
80003750:	eb cd 40 80 	pushm	r7,lr
80003754:	1a 97       	mov	r7,sp
	// Increment the ms seconds counter
	tc_tick++;
80003756:	4a d8       	lddpc	r8,80003808 <tc_irq+0xb8>
80003758:	70 08       	ld.w	r8,r8[0x0]
8000375a:	f0 c9 ff ff 	sub	r9,r8,-1
8000375e:	4a b8       	lddpc	r8,80003808 <tc_irq+0xb8>
80003760:	91 09       	st.w	r8[0x0],r9
	 * in the Watch Window.
	 */

	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
80003762:	30 0b       	mov	r11,0
80003764:	fe 7c 38 00 	mov	r12,-51200
80003768:	f0 1f 00 29 	mcall	8000380c <tc_irq+0xbc>

	if (entry_mode_status == NO_MODE_SELECTED)
8000376c:	4a 98       	lddpc	r8,80003810 <tc_irq+0xc0>
8000376e:	11 88       	ld.ub	r8,r8[0x0]
80003770:	5c 58       	castu.b	r8
80003772:	c1 51       	brne	8000379c <tc_irq+0x4c>
	{
		if (check_programming_mode_entry_sequence() == true)
80003774:	f0 1f 00 28 	mcall	80003814 <tc_irq+0xc4>
80003778:	18 98       	mov	r8,r12
8000377a:	58 08       	cp.w	r8,0
8000377c:	c0 50       	breq	80003786 <tc_irq+0x36>
		{
			entry_mode_status = PROGRAMMING_MODE;
8000377e:	4a 59       	lddpc	r9,80003810 <tc_irq+0xc0>
80003780:	30 18       	mov	r8,1
80003782:	b2 88       	st.b	r9[0x0],r8
80003784:	c0 c8       	rjmp	8000379c <tc_irq+0x4c>
		}
		else if (check_normal_mode_entry_sequence() == true)
80003786:	f0 1f 00 25 	mcall	80003818 <tc_irq+0xc8>
8000378a:	18 98       	mov	r8,r12
8000378c:	58 08       	cp.w	r8,0
8000378e:	c0 70       	breq	8000379c <tc_irq+0x4c>
		{
			entry_mode_status = NORMAL_MODE;
80003790:	4a 09       	lddpc	r9,80003810 <tc_irq+0xc0>
80003792:	30 28       	mov	r8,2
80003794:	b2 88       	st.b	r9[0x0],r8
			pass_code = temp_password;
80003796:	4a 28       	lddpc	r8,8000381c <tc_irq+0xcc>
80003798:	4a 29       	lddpc	r9,80003820 <tc_irq+0xd0>
8000379a:	91 09       	st.w	r8[0x0],r9
		}
	}
	
	if (entry_mode_status == PROGRAMMING_MODE)
8000379c:	49 d8       	lddpc	r8,80003810 <tc_irq+0xc0>
8000379e:	11 88       	ld.ub	r8,r8[0x0]
800037a0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800037a4:	30 18       	mov	r8,1
800037a6:	f0 09 18 00 	cp.b	r9,r8
800037aa:	c1 71       	brne	800037d8 <tc_irq+0x88>
	{
		if (!mode_selected)
800037ac:	49 e8       	lddpc	r8,80003824 <tc_irq+0xd4>
800037ae:	11 88       	ld.ub	r8,r8[0x0]
800037b0:	5c 58       	castu.b	r8
800037b2:	ec 18 00 01 	eorl	r8,0x1
800037b6:	5c 58       	castu.b	r8
800037b8:	c0 40       	breq	800037c0 <tc_irq+0x70>
		{
			check_for_mode_selected();
800037ba:	f0 1f 00 1c 	mcall	80003828 <tc_irq+0xd8>
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
			{
				entry_mode_status = NO_MODE_SELECTED;
800037be:	c1 98       	rjmp	800037f0 <tc_irq+0xa0>
		{
			check_for_mode_selected();
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
800037c0:	f0 1f 00 1b 	mcall	8000382c <tc_irq+0xdc>
800037c4:	18 98       	mov	r8,r12
800037c6:	10 99       	mov	r9,r8
800037c8:	30 18       	mov	r8,1
800037ca:	f0 09 18 00 	cp.b	r9,r8
800037ce:	c1 01       	brne	800037ee <tc_irq+0x9e>
			{
				entry_mode_status = NO_MODE_SELECTED;
800037d0:	49 09       	lddpc	r9,80003810 <tc_irq+0xc0>
800037d2:	30 08       	mov	r8,0
800037d4:	b2 88       	st.b	r9[0x0],r8
800037d6:	c0 d8       	rjmp	800037f0 <tc_irq+0xa0>
			}
		}
	}

	else if (entry_mode_status == NORMAL_MODE)
800037d8:	48 e8       	lddpc	r8,80003810 <tc_irq+0xc0>
800037da:	11 88       	ld.ub	r8,r8[0x0]
800037dc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800037e0:	30 28       	mov	r8,2
800037e2:	f0 09 18 00 	cp.b	r9,r8
800037e6:	c0 51       	brne	800037f0 <tc_irq+0xa0>
	{
		read_password();
800037e8:	f0 1f 00 12 	mcall	80003830 <tc_irq+0xe0>
800037ec:	c0 28       	rjmp	800037f0 <tc_irq+0xa0>
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
			{
				entry_mode_status = NO_MODE_SELECTED;
800037ee:	d7 03       	nop
	//if (is_button_released() == true)
	//{
		//Read_button();	
	//}

	update_leds();
800037f0:	f0 1f 00 11 	mcall	80003834 <tc_irq+0xe4>



	// specify that an interrupt has been raised
	update_timer = true;
800037f4:	49 19       	lddpc	r9,80003838 <tc_irq+0xe8>
800037f6:	30 18       	mov	r8,1
800037f8:	b2 88       	st.b	r9[0x0],r8
	// Toggle the GPIO line
	gpio_tgl_gpio_pin(EXAMPLE_TOGGLE_PIN);
800037fa:	30 3c       	mov	r12,3
800037fc:	f0 1f 00 10 	mcall	8000383c <tc_irq+0xec>
}
80003800:	e3 cd 40 80 	ldm	sp++,r7,lr
80003804:	d6 03       	rete
80003806:	00 00       	add	r0,r0
80003808:	00 00       	add	r0,r0
8000380a:	03 d4       	ld.ub	r4,r1[0x5]
8000380c:	80 00       	ld.sh	r0,r0[0x0]
8000380e:	9b ce       	st.w	sp[0x30],lr
80003810:	00 00       	add	r0,r0
80003812:	03 dc       	ld.ub	r12,r1[0x5]
80003814:	80 00       	ld.sh	r0,r0[0x0]
80003816:	3d 70       	mov	r0,-41
80003818:	80 00       	ld.sh	r0,r0[0x0]
8000381a:	3d fc       	mov	r12,-33
8000381c:	00 00       	add	r0,r0
8000381e:	0b cc       	ld.ub	r12,r5[0x4]
80003820:	00 00       	add	r0,r0
80003822:	02 48       	or	r8,r1
80003824:	00 00       	add	r0,r0
80003826:	03 d8       	ld.ub	r8,r1[0x5]
80003828:	80 00       	ld.sh	r0,r0[0x0]
8000382a:	3f 18       	mov	r8,-15
8000382c:	80 00       	ld.sh	r0,r0[0x0]
8000382e:	3f 2c       	mov	r12,-14
80003830:	80 00       	ld.sh	r0,r0[0x0]
80003832:	40 bc       	lddsp	r12,sp[0x2c]
80003834:	80 00       	ld.sh	r0,r0[0x0]
80003836:	41 c0       	lddsp	r0,sp[0x70]
80003838:	00 00       	add	r0,r0
8000383a:	01 2c       	ld.uh	r12,r0++
8000383c:	80 00       	ld.sh	r0,r0[0x0]
8000383e:	91 8a       	st.w	r8[0x20],r10

80003840 <is_button_released>:

bool is_button_released(void)
{
80003840:	eb cd 40 80 	pushm	r7,lr
80003844:	1a 97       	mov	r7,sp
	if ((check_all_buttons_high() == true) && (button_released == false))
80003846:	f0 1f 00 0b 	mcall	80003870 <is_button_released+0x30>
8000384a:	18 98       	mov	r8,r12
8000384c:	58 08       	cp.w	r8,0
8000384e:	c0 b0       	breq	80003864 <is_button_released+0x24>
80003850:	48 98       	lddpc	r8,80003874 <is_button_released+0x34>
80003852:	11 88       	ld.ub	r8,r8[0x0]
80003854:	5c 58       	castu.b	r8
80003856:	ec 18 00 01 	eorl	r8,0x1
8000385a:	5c 58       	castu.b	r8
8000385c:	c0 40       	breq	80003864 <is_button_released+0x24>
	{
		button_released = true;
8000385e:	48 69       	lddpc	r9,80003874 <is_button_released+0x34>
80003860:	30 18       	mov	r8,1
80003862:	b2 88       	st.b	r9[0x0],r8
	}
	return button_released;
80003864:	48 48       	lddpc	r8,80003874 <is_button_released+0x34>
80003866:	11 88       	ld.ub	r8,r8[0x0]
80003868:	5c 58       	castu.b	r8
}
8000386a:	10 9c       	mov	r12,r8
8000386c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003870:	80 00       	ld.sh	r0,r0[0x0]
80003872:	3a c4       	mov	r4,-84
80003874:	00 00       	add	r0,r0
80003876:	01 2d       	ld.uh	sp,r0++

80003878 <Read_button>:

void Read_button(void)
{
80003878:	eb cd 40 80 	pushm	r7,lr
8000387c:	1a 97       	mov	r7,sp
8000387e:	20 1d       	sub	sp,4
	uint8_t button_value = 0;
80003880:	30 08       	mov	r8,0
80003882:	ef 68 ff ff 	st.b	r7[-1],r8
	
	button_value = button_pressed();
80003886:	f0 1f 00 4f 	mcall	800039c0 <Read_button+0x148>
8000388a:	18 98       	mov	r8,r12
8000388c:	ef 68 ff ff 	st.b	r7[-1],r8
	switch (button_value)
80003890:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003894:	58 48       	cp.w	r8,4
80003896:	c0 50       	breq	800038a0 <Read_button+0x28>
80003898:	e0 48 00 ff 	cp.w	r8,255
8000389c:	c6 d0       	breq	80003976 <Read_button+0xfe>
8000389e:	c2 88       	rjmp	800038ee <Read_button+0x76>
	{
		case ENTER_BUTTON:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
800038a0:	4c 98       	lddpc	r8,800039c4 <Read_button+0x14c>
800038a2:	11 88       	ld.ub	r8,r8[0x0]
800038a4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800038a8:	30 18       	mov	r8,1
800038aa:	f0 09 18 00 	cp.b	r9,r8
800038ae:	c0 d1       	brne	800038c8 <Read_button+0x50>
			{
				if (mode_selected)
800038b0:	4c 68       	lddpc	r8,800039c8 <Read_button+0x150>
800038b2:	11 88       	ld.ub	r8,r8[0x0]
800038b4:	5c 58       	castu.b	r8
800038b6:	c6 20       	breq	8000397a <Read_button+0x102>
				{
					enter_button_status++;
800038b8:	4c 58       	lddpc	r8,800039cc <Read_button+0x154>
800038ba:	11 88       	ld.ub	r8,r8[0x0]
800038bc:	5c 58       	castu.b	r8
800038be:	2f f8       	sub	r8,-1
800038c0:	5c 58       	castu.b	r8
800038c2:	4c 39       	lddpc	r9,800039cc <Read_button+0x154>
800038c4:	b2 88       	st.b	r9[0x0],r8
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
			{
				normal_mode_password_entered = true;
			}
			break;
800038c6:	c5 f8       	rjmp	80003984 <Read_button+0x10c>
				if (mode_selected)
				{
					enter_button_status++;
				}
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
800038c8:	4b f8       	lddpc	r8,800039c4 <Read_button+0x14c>
800038ca:	11 88       	ld.ub	r8,r8[0x0]
800038cc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800038d0:	30 28       	mov	r8,2
800038d2:	f0 09 18 00 	cp.b	r9,r8
800038d6:	c5 41       	brne	8000397e <Read_button+0x106>
800038d8:	4b e8       	lddpc	r8,800039d0 <Read_button+0x158>
800038da:	11 88       	ld.ub	r8,r8[0x0]
800038dc:	5c 58       	castu.b	r8
800038de:	ec 18 00 01 	eorl	r8,0x1
800038e2:	5c 58       	castu.b	r8
800038e4:	c4 f0       	breq	80003982 <Read_button+0x10a>
			{
				normal_mode_password_entered = true;
800038e6:	4b b9       	lddpc	r9,800039d0 <Read_button+0x158>
800038e8:	30 18       	mov	r8,1
800038ea:	b2 88       	st.b	r9[0x0],r8
			}
			break;
800038ec:	c4 c8       	rjmp	80003984 <Read_button+0x10c>
		case NO_BUTTON:
		break;
		
		default:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
800038ee:	4b 68       	lddpc	r8,800039c4 <Read_button+0x14c>
800038f0:	11 88       	ld.ub	r8,r8[0x0]
800038f2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800038f6:	30 18       	mov	r8,1
800038f8:	f0 09 18 00 	cp.b	r9,r8
800038fc:	c2 f1       	brne	8000395a <Read_button+0xe2>
			{
				if (mode_selected)
800038fe:	4b 38       	lddpc	r8,800039c8 <Read_button+0x150>
80003900:	11 88       	ld.ub	r8,r8[0x0]
80003902:	5c 58       	castu.b	r8
80003904:	c2 30       	breq	8000394a <Read_button+0xd2>
				{
					switch (mode_chosen)
80003906:	4b 48       	lddpc	r8,800039d4 <Read_button+0x15c>
80003908:	11 88       	ld.ub	r8,r8[0x0]
8000390a:	5c 58       	castu.b	r8
8000390c:	c0 40       	breq	80003914 <Read_button+0x9c>
8000390e:	58 38       	cp.w	r8,3
80003910:	c0 90       	breq	80003922 <Read_button+0xaa>
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003912:	c3 98       	rjmp	80003984 <Read_button+0x10c>
				if (mode_selected)
				{
					switch (mode_chosen)
					{
					case _UNLOCK_PASSWORD:
						store_passcode((uint32_t)button_value);
80003914:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003918:	10 9c       	mov	r12,r8
8000391a:	f0 1f 00 30 	mcall	800039d8 <Read_button+0x160>
						break;
8000391e:	d7 03       	nop
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003920:	c3 28       	rjmp	80003984 <Read_button+0x10c>
					{
					case _UNLOCK_PASSWORD:
						store_passcode((uint32_t)button_value);
						break;
					case _DEVICE_ID_CONFIRM:
						if (enter_button_status == WAITING_FOR_USER_INPUT)
80003922:	4a b8       	lddpc	r8,800039cc <Read_button+0x154>
80003924:	11 88       	ld.ub	r8,r8[0x0]
80003926:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000392a:	30 58       	mov	r8,5
8000392c:	f0 09 18 00 	cp.b	r9,r8
80003930:	c0 71       	brne	8000393e <Read_button+0xc6>
						{
							store_sequence(button_value);
80003932:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003936:	10 9c       	mov	r12,r8
80003938:	f0 1f 00 29 	mcall	800039dc <Read_button+0x164>
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
8000393c:	c2 48       	rjmp	80003984 <Read_button+0x10c>
						{
							store_sequence(button_value);
						}
						else
						{
							store_passcode((uint32_t)button_value);
8000393e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003942:	10 9c       	mov	r12,r8
80003944:	f0 1f 00 25 	mcall	800039d8 <Read_button+0x160>
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003948:	c1 e8       	rjmp	80003984 <Read_button+0x10c>
					}
					
				}
				else
				{
					mode_chosen = button_value;
8000394a:	4a 39       	lddpc	r9,800039d4 <Read_button+0x15c>
8000394c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003950:	b2 88       	st.b	r9[0x0],r8
					mode_selected = true;
80003952:	49 e9       	lddpc	r9,800039c8 <Read_button+0x150>
80003954:	30 18       	mov	r8,1
80003956:	b2 88       	st.b	r9[0x0],r8
80003958:	c1 68       	rjmp	80003984 <Read_button+0x10c>
				}
			}
			else if (entry_mode_status == NORMAL_MODE)
8000395a:	49 b8       	lddpc	r8,800039c4 <Read_button+0x14c>
8000395c:	11 88       	ld.ub	r8,r8[0x0]
8000395e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003962:	30 28       	mov	r8,2
80003964:	f0 09 18 00 	cp.b	r9,r8
80003968:	c0 e1       	brne	80003984 <Read_button+0x10c>
			{
				store_passcode((uint32_t)button_value);
8000396a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000396e:	10 9c       	mov	r12,r8
80003970:	f0 1f 00 1a 	mcall	800039d8 <Read_button+0x160>
80003974:	c0 88       	rjmp	80003984 <Read_button+0x10c>
				normal_mode_password_entered = true;
			}
			break;
		}
		case NO_BUTTON:
		break;
80003976:	d7 03       	nop
80003978:	c0 68       	rjmp	80003984 <Read_button+0x10c>
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
			{
				normal_mode_password_entered = true;
			}
			break;
8000397a:	d7 03       	nop
8000397c:	c0 48       	rjmp	80003984 <Read_button+0x10c>
8000397e:	d7 03       	nop
80003980:	c0 28       	rjmp	80003984 <Read_button+0x10c>
80003982:	d7 03       	nop
			}

		}
	}	

	if (mode_chosen == _UNLOCK_PASSWORD && enter_button_status == WAITING_FOR_USER_INPUT)
80003984:	49 48       	lddpc	r8,800039d4 <Read_button+0x15c>
80003986:	11 88       	ld.ub	r8,r8[0x0]
80003988:	5c 58       	castu.b	r8
8000398a:	c1 81       	brne	800039ba <Read_button+0x142>
8000398c:	49 08       	lddpc	r8,800039cc <Read_button+0x154>
8000398e:	11 88       	ld.ub	r8,r8[0x0]
80003990:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003994:	30 58       	mov	r8,5
80003996:	f0 09 18 00 	cp.b	r9,r8
8000399a:	c1 01       	brne	800039ba <Read_button+0x142>
	{
		if (var_W_ticks++ > var_W)
8000399c:	49 18       	lddpc	r8,800039e0 <Read_button+0x168>
8000399e:	70 08       	ld.w	r8,r8[0x0]
800039a0:	49 19       	lddpc	r9,800039e4 <Read_button+0x16c>
800039a2:	72 09       	ld.w	r9,r9[0x0]
800039a4:	12 38       	cp.w	r8,r9
800039a6:	5f b9       	srhi	r9
800039a8:	5c 59       	castu.b	r9
800039aa:	f0 ca ff ff 	sub	r10,r8,-1
800039ae:	48 d8       	lddpc	r8,800039e0 <Read_button+0x168>
800039b0:	91 0a       	st.w	r8[0x0],r10
800039b2:	58 09       	cp.w	r9,0
800039b4:	c0 30       	breq	800039ba <Read_button+0x142>
		{
			calculate_salt();
800039b6:	f0 1f 00 0d 	mcall	800039e8 <Read_button+0x170>
		}
	}	
}
800039ba:	2f fd       	sub	sp,-4
800039bc:	e3 cd 80 80 	ldm	sp++,r7,pc
800039c0:	80 00       	ld.sh	r0,r0[0x0]
800039c2:	39 ec       	mov	r12,-98
800039c4:	00 00       	add	r0,r0
800039c6:	03 dc       	ld.ub	r12,r1[0x5]
800039c8:	00 00       	add	r0,r0
800039ca:	03 d8       	ld.ub	r8,r1[0x5]
800039cc:	00 00       	add	r0,r0
800039ce:	03 da       	ld.ub	r10,r1[0x5]
800039d0:	00 00       	add	r0,r0
800039d2:	03 d9       	ld.ub	r9,r1[0x5]
800039d4:	00 00       	add	r0,r0
800039d6:	01 2e       	ld.uh	lr,r0++
800039d8:	80 00       	ld.sh	r0,r0[0x0]
800039da:	3b fc       	mov	r12,-65
800039dc:	80 00       	ld.sh	r0,r0[0x0]
800039de:	3c 84       	mov	r4,-56
800039e0:	00 00       	add	r0,r0
800039e2:	02 90       	mov	r0,r1
800039e4:	00 00       	add	r0,r0
800039e6:	01 28       	ld.uh	r8,r0++
800039e8:	80 00       	ld.sh	r0,r0[0x0]
800039ea:	2e 18       	sub	r8,-31

800039ec <button_pressed>:

uint8_t button_pressed (void)
{
800039ec:	eb cd 40 80 	pushm	r7,lr
800039f0:	1a 97       	mov	r7,sp
	
	is_button_released();
800039f2:	f0 1f 00 2a 	mcall	80003a98 <button_pressed+0xac>

	if (button_released)
800039f6:	4a a8       	lddpc	r8,80003a9c <button_pressed+0xb0>
800039f8:	11 88       	ld.ub	r8,r8[0x0]
800039fa:	5c 58       	castu.b	r8
800039fc:	c4 90       	breq	80003a8e <button_pressed+0xa2>
	{		
		if (read_push_button(PB1, (uint8_t *)&PB1_Counter))
800039fe:	4a 9b       	lddpc	r11,80003aa0 <button_pressed+0xb4>
80003a00:	30 ac       	mov	r12,10
80003a02:	f0 1f 00 29 	mcall	80003aa4 <button_pressed+0xb8>
80003a06:	18 98       	mov	r8,r12
80003a08:	58 08       	cp.w	r8,0
80003a0a:	c0 90       	breq	80003a1c <button_pressed+0x30>
		{
			LED_On(LED0);
80003a0c:	30 1c       	mov	r12,1
80003a0e:	f0 1f 00 27 	mcall	80003aa8 <button_pressed+0xbc>
			LED_Off(LED1 | LED2 | LED3);
80003a12:	30 ec       	mov	r12,14
80003a14:	f0 1f 00 26 	mcall	80003aac <button_pressed+0xc0>
			//store_passcode(0L);
			return PUSH_BUTTON1;
80003a18:	30 08       	mov	r8,0
80003a1a:	c3 c8       	rjmp	80003a92 <button_pressed+0xa6>
		}
		else if (read_push_button(PB2, (uint8_t *)&PB2_Counter))
80003a1c:	4a 5b       	lddpc	r11,80003ab0 <button_pressed+0xc4>
80003a1e:	30 bc       	mov	r12,11
80003a20:	f0 1f 00 21 	mcall	80003aa4 <button_pressed+0xb8>
80003a24:	18 98       	mov	r8,r12
80003a26:	58 08       	cp.w	r8,0
80003a28:	c0 90       	breq	80003a3a <button_pressed+0x4e>
		{
			LED_On(LED1);
80003a2a:	30 2c       	mov	r12,2
80003a2c:	f0 1f 00 1f 	mcall	80003aa8 <button_pressed+0xbc>
			LED_Off(LED0 | LED2 | LED3);
80003a30:	30 dc       	mov	r12,13
80003a32:	f0 1f 00 1f 	mcall	80003aac <button_pressed+0xc0>
			//store_passcode(1L);
			return PUSH_BUTTON2;
80003a36:	30 18       	mov	r8,1
80003a38:	c2 d8       	rjmp	80003a92 <button_pressed+0xa6>
		}
		else if (read_push_button(PB3, (uint8_t *)&PB3_Counter))
80003a3a:	49 fb       	lddpc	r11,80003ab4 <button_pressed+0xc8>
80003a3c:	30 cc       	mov	r12,12
80003a3e:	f0 1f 00 1a 	mcall	80003aa4 <button_pressed+0xb8>
80003a42:	18 98       	mov	r8,r12
80003a44:	58 08       	cp.w	r8,0
80003a46:	c0 90       	breq	80003a58 <button_pressed+0x6c>
		{
			LED_On(LED2);
80003a48:	30 4c       	mov	r12,4
80003a4a:	f0 1f 00 18 	mcall	80003aa8 <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED3);
80003a4e:	30 bc       	mov	r12,11
80003a50:	f0 1f 00 17 	mcall	80003aac <button_pressed+0xc0>
			//store_passcode(2L);
			return PUSH_BUTTON3;
80003a54:	30 28       	mov	r8,2
80003a56:	c1 e8       	rjmp	80003a92 <button_pressed+0xa6>
		}
		else if (read_push_button(PB4, (uint8_t *)&PB4_Counter))
80003a58:	49 8b       	lddpc	r11,80003ab8 <button_pressed+0xcc>
80003a5a:	30 dc       	mov	r12,13
80003a5c:	f0 1f 00 12 	mcall	80003aa4 <button_pressed+0xb8>
80003a60:	18 98       	mov	r8,r12
80003a62:	58 08       	cp.w	r8,0
80003a64:	c0 90       	breq	80003a76 <button_pressed+0x8a>
		{
			LED_On(LED3);
80003a66:	30 8c       	mov	r12,8
80003a68:	f0 1f 00 10 	mcall	80003aa8 <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED2);
80003a6c:	30 7c       	mov	r12,7
80003a6e:	f0 1f 00 10 	mcall	80003aac <button_pressed+0xc0>
			//store_passcode(3L);
			return PUSH_BUTTON4;
80003a72:	30 38       	mov	r8,3
80003a74:	c0 f8       	rjmp	80003a92 <button_pressed+0xa6>
		}
		else if (read_push_button(PB_ENTER, (uint8_t *)&PB5_Counter))
80003a76:	49 2b       	lddpc	r11,80003abc <button_pressed+0xd0>
80003a78:	32 ac       	mov	r12,42
80003a7a:	f0 1f 00 0b 	mcall	80003aa4 <button_pressed+0xb8>
80003a7e:	18 98       	mov	r8,r12
80003a80:	58 08       	cp.w	r8,0
80003a82:	c0 60       	breq	80003a8e <button_pressed+0xa2>
		{
			device_unlocked = true;
80003a84:	48 f9       	lddpc	r9,80003ac0 <button_pressed+0xd4>
80003a86:	30 18       	mov	r8,1
80003a88:	b2 88       	st.b	r9[0x0],r8
			return ENTER_BUTTON;
80003a8a:	30 48       	mov	r8,4
80003a8c:	c0 38       	rjmp	80003a92 <button_pressed+0xa6>
		}
	}
	return NO_BUTTON;
80003a8e:	e0 68 00 ff 	mov	r8,255
}
80003a92:	10 9c       	mov	r12,r8
80003a94:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a98:	80 00       	ld.sh	r0,r0[0x0]
80003a9a:	38 40       	mov	r0,-124
80003a9c:	00 00       	add	r0,r0
80003a9e:	01 2d       	ld.uh	sp,r0++
80003aa0:	00 00       	add	r0,r0
80003aa2:	04 00       	add	r0,r2
80003aa4:	80 00       	ld.sh	r0,r0[0x0]
80003aa6:	3b 44       	mov	r4,-76
80003aa8:	80 00       	ld.sh	r0,r0[0x0]
80003aaa:	47 08       	lddsp	r8,sp[0x1c0]
80003aac:	80 00       	ld.sh	r0,r0[0x0]
80003aae:	46 50       	lddsp	r0,sp[0x194]
80003ab0:	00 00       	add	r0,r0
80003ab2:	04 01       	add	r1,r2
80003ab4:	00 00       	add	r0,r0
80003ab6:	04 02       	add	r2,r2
80003ab8:	00 00       	add	r0,r0
80003aba:	04 03       	add	r3,r2
80003abc:	00 00       	add	r0,r0
80003abe:	04 04       	add	r4,r2
80003ac0:	00 00       	add	r0,r0
80003ac2:	02 88       	andn	r8,r1

80003ac4 <check_all_buttons_high>:

bool check_all_buttons_high(void)
{
80003ac4:	eb cd 40 80 	pushm	r7,lr
80003ac8:	1a 97       	mov	r7,sp
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003aca:	30 ac       	mov	r12,10
80003acc:	f0 1f 00 1c 	mcall	80003b3c <check_all_buttons_high+0x78>
80003ad0:	18 98       	mov	r8,r12
80003ad2:	58 18       	cp.w	r8,1
80003ad4:	c2 b1       	brne	80003b2a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
80003ad6:	30 bc       	mov	r12,11
80003ad8:	f0 1f 00 19 	mcall	80003b3c <check_all_buttons_high+0x78>
80003adc:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003ade:	58 18       	cp.w	r8,1
80003ae0:	c2 51       	brne	80003b2a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
80003ae2:	30 cc       	mov	r12,12
80003ae4:	f0 1f 00 16 	mcall	80003b3c <check_all_buttons_high+0x78>
80003ae8:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003aea:	58 18       	cp.w	r8,1
80003aec:	c1 f1       	brne	80003b2a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
80003aee:	30 dc       	mov	r12,13
80003af0:	f0 1f 00 13 	mcall	80003b3c <check_all_buttons_high+0x78>
80003af4:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003af6:	58 18       	cp.w	r8,1
80003af8:	c1 91       	brne	80003b2a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
		&& (gpio_get_pin_value(ENTER_BUTTON) == 1))
80003afa:	30 4c       	mov	r12,4
80003afc:	f0 1f 00 10 	mcall	80003b3c <check_all_buttons_high+0x78>
80003b00:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003b02:	58 18       	cp.w	r8,1
80003b04:	c1 31       	brne	80003b2a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
		&& (gpio_get_pin_value(ENTER_BUTTON) == 1))
	{
		if (button_released_iteration++ > 4)
80003b06:	48 f8       	lddpc	r8,80003b40 <check_all_buttons_high+0x7c>
80003b08:	11 88       	ld.ub	r8,r8[0x0]
80003b0a:	30 49       	mov	r9,4
80003b0c:	f2 08 18 00 	cp.b	r8,r9
80003b10:	5f b9       	srhi	r9
80003b12:	5c 59       	castu.b	r9
80003b14:	2f f8       	sub	r8,-1
80003b16:	5c 58       	castu.b	r8
80003b18:	48 aa       	lddpc	r10,80003b40 <check_all_buttons_high+0x7c>
80003b1a:	b4 88       	st.b	r10[0x0],r8
80003b1c:	58 09       	cp.w	r9,0
80003b1e:	c0 a0       	breq	80003b32 <check_all_buttons_high+0x6e>
		{
			button_released_iteration = 0;
80003b20:	48 89       	lddpc	r9,80003b40 <check_all_buttons_high+0x7c>
80003b22:	30 08       	mov	r8,0
80003b24:	b2 88       	st.b	r9[0x0],r8
			return true;
80003b26:	30 18       	mov	r8,1
80003b28:	c0 78       	rjmp	80003b36 <check_all_buttons_high+0x72>
		}
	}
	else
	{
		button_released_iteration = 0;
80003b2a:	48 69       	lddpc	r9,80003b40 <check_all_buttons_high+0x7c>
80003b2c:	30 08       	mov	r8,0
80003b2e:	b2 88       	st.b	r9[0x0],r8
80003b30:	c0 28       	rjmp	80003b34 <check_all_buttons_high+0x70>

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003b32:	d7 03       	nop
	else
	{
		button_released_iteration = 0;
	}

	return false;
80003b34:	30 08       	mov	r8,0
}
80003b36:	10 9c       	mov	r12,r8
80003b38:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b3c:	80 00       	ld.sh	r0,r0[0x0]
80003b3e:	90 80       	ld.uh	r0,r8[0x0]
80003b40:	00 00       	add	r0,r0
80003b42:	04 0f       	add	pc,r2

80003b44 <read_push_button>:

bool read_push_button(uint32_t pin, uint8_t *counter)
{
80003b44:	eb cd 40 80 	pushm	r7,lr
80003b48:	1a 97       	mov	r7,sp
80003b4a:	20 3d       	sub	sp,12
80003b4c:	ef 4c ff f8 	st.w	r7[-8],r12
80003b50:	ef 4b ff f4 	st.w	r7[-12],r11
	bool button_status = false;
80003b54:	30 08       	mov	r8,0
80003b56:	ef 68 ff ff 	st.b	r7[-1],r8

	if (gpio_get_pin_value(pin) == 0)
80003b5a:	ee fc ff f8 	ld.w	r12,r7[-8]
80003b5e:	f0 1f 00 18 	mcall	80003bbc <read_push_button+0x78>
80003b62:	18 98       	mov	r8,r12
80003b64:	58 08       	cp.w	r8,0
80003b66:	c1 c1       	brne	80003b9e <read_push_button+0x5a>
	{
		(*counter)++;
80003b68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003b6c:	11 88       	ld.ub	r8,r8[0x0]
80003b6e:	2f f8       	sub	r8,-1
80003b70:	5c 58       	castu.b	r8
80003b72:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003b76:	b2 88       	st.b	r9[0x0],r8
		if (*counter >= 3)
80003b78:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003b7c:	11 89       	ld.ub	r9,r8[0x0]
80003b7e:	30 28       	mov	r8,2
80003b80:	f0 09 18 00 	cp.b	r9,r8
80003b84:	e0 88 00 15 	brls	80003bae <read_push_button+0x6a>
		{
			button_status = true;
80003b88:	30 18       	mov	r8,1
80003b8a:	ef 68 ff ff 	st.b	r7[-1],r8
			//if (enter_pressed)
			//{
				//enter_pressed = false;	
				//Start_W_timer();
			//}
			*counter = 0;
80003b8e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003b92:	30 08       	mov	r8,0
80003b94:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003b96:	48 b9       	lddpc	r9,80003bc0 <read_push_button+0x7c>
80003b98:	30 08       	mov	r8,0
80003b9a:	b2 88       	st.b	r9[0x0],r8
80003b9c:	c0 a8       	rjmp	80003bb0 <read_push_button+0x6c>
		}
	}
	else
	{
		button_status = false;
80003b9e:	30 08       	mov	r8,0
80003ba0:	ef 68 ff ff 	st.b	r7[-1],r8
		*counter = 0;
80003ba4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003ba8:	30 08       	mov	r8,0
80003baa:	b2 88       	st.b	r9[0x0],r8
80003bac:	c0 28       	rjmp	80003bb0 <read_push_button+0x6c>
			//{
				//enter_pressed = false;	
				//Start_W_timer();
			//}
			*counter = 0;
			button_released = false;
80003bae:	d7 03       	nop
	else
	{
		button_status = false;
		*counter = 0;
	}
	return button_status;	
80003bb0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80003bb4:	10 9c       	mov	r12,r8
80003bb6:	2f dd       	sub	sp,-12
80003bb8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bbc:	80 00       	ld.sh	r0,r0[0x0]
80003bbe:	90 80       	ld.uh	r0,r8[0x0]
80003bc0:	00 00       	add	r0,r0
80003bc2:	01 2d       	ld.uh	sp,r0++

80003bc4 <push_buttons_init>:

void push_buttons_init(void)
{
80003bc4:	eb cd 40 80 	pushm	r7,lr
80003bc8:	1a 97       	mov	r7,sp
	gpio_configure_pin(PB1,GPIO_DIR_INPUT);
80003bca:	30 0b       	mov	r11,0
80003bcc:	30 ac       	mov	r12,10
80003bce:	f0 1f 00 0b 	mcall	80003bf8 <push_buttons_init+0x34>
	gpio_configure_pin(PB2,GPIO_DIR_INPUT);
80003bd2:	30 0b       	mov	r11,0
80003bd4:	30 bc       	mov	r12,11
80003bd6:	f0 1f 00 09 	mcall	80003bf8 <push_buttons_init+0x34>
	gpio_configure_pin(PB3,GPIO_DIR_INPUT);
80003bda:	30 0b       	mov	r11,0
80003bdc:	30 cc       	mov	r12,12
80003bde:	f0 1f 00 07 	mcall	80003bf8 <push_buttons_init+0x34>
	gpio_configure_pin(PB4,GPIO_DIR_INPUT);
80003be2:	30 0b       	mov	r11,0
80003be4:	30 dc       	mov	r12,13
80003be6:	f0 1f 00 05 	mcall	80003bf8 <push_buttons_init+0x34>
	gpio_configure_pin(PB_ENTER,GPIO_DIR_INPUT);
80003bea:	30 0b       	mov	r11,0
80003bec:	32 ac       	mov	r12,42
80003bee:	f0 1f 00 03 	mcall	80003bf8 <push_buttons_init+0x34>
}
80003bf2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bf6:	00 00       	add	r0,r0
80003bf8:	80 00       	ld.sh	r0,r0[0x0]
80003bfa:	8e d2       	ld.uh	r2,r7[0xa]

80003bfc <store_passcode>:

void store_passcode(uint32_t value)
{
80003bfc:	eb cd 40 80 	pushm	r7,lr
80003c00:	1a 97       	mov	r7,sp
80003c02:	20 2d       	sub	sp,8
80003c04:	ef 4c ff f8 	st.w	r7[-8],r12
	unsigned char index = 0;
80003c08:	30 08       	mov	r8,0
80003c0a:	ef 68 ff ff 	st.b	r7[-1],r8
	index = passcode_byte_index >> 4;
80003c0e:	49 c8       	lddpc	r8,80003c7c <store_passcode+0x80>
80003c10:	11 88       	ld.ub	r8,r8[0x0]
80003c12:	5c 58       	castu.b	r8
80003c14:	a5 88       	lsr	r8,0x4
80003c16:	ef 68 ff ff 	st.b	r7[-1],r8
	pass_code[index] = pass_code[index] | (value << ((passcode_byte_index & 0x0000000F) << 1));
80003c1a:	49 a8       	lddpc	r8,80003c80 <store_passcode+0x84>
80003c1c:	70 09       	ld.w	r9,r8[0x0]
80003c1e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003c22:	a3 68       	lsl	r8,0x2
80003c24:	10 09       	add	r9,r8
80003c26:	49 78       	lddpc	r8,80003c80 <store_passcode+0x84>
80003c28:	70 0a       	ld.w	r10,r8[0x0]
80003c2a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003c2e:	a3 68       	lsl	r8,0x2
80003c30:	f4 08 00 08 	add	r8,r10,r8
80003c34:	70 0a       	ld.w	r10,r8[0x0]
80003c36:	49 28       	lddpc	r8,80003c7c <store_passcode+0x80>
80003c38:	11 88       	ld.ub	r8,r8[0x0]
80003c3a:	5c 58       	castu.b	r8
80003c3c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003c40:	a1 78       	lsl	r8,0x1
80003c42:	ee fb ff f8 	ld.w	r11,r7[-8]
80003c46:	f6 08 09 48 	lsl	r8,r11,r8
80003c4a:	f5 e8 10 08 	or	r8,r10,r8
80003c4e:	93 08       	st.w	r9[0x0],r8
	if (++passcode_byte_index >= 128)
80003c50:	48 b8       	lddpc	r8,80003c7c <store_passcode+0x80>
80003c52:	11 88       	ld.ub	r8,r8[0x0]
80003c54:	5c 58       	castu.b	r8
80003c56:	2f f8       	sub	r8,-1
80003c58:	5c 58       	castu.b	r8
80003c5a:	48 99       	lddpc	r9,80003c7c <store_passcode+0x80>
80003c5c:	b2 88       	st.b	r9[0x0],r8
80003c5e:	48 88       	lddpc	r8,80003c7c <store_passcode+0x80>
80003c60:	11 88       	ld.ub	r8,r8[0x0]
80003c62:	5c 58       	castu.b	r8
80003c64:	10 99       	mov	r9,r8
80003c66:	30 08       	mov	r8,0
80003c68:	f0 09 18 00 	cp.b	r9,r8
80003c6c:	c0 44       	brge	80003c74 <store_passcode+0x78>
	{
		passcode_byte_index = 0;
80003c6e:	48 49       	lddpc	r9,80003c7c <store_passcode+0x80>
80003c70:	30 08       	mov	r8,0
80003c72:	b2 88       	st.b	r9[0x0],r8
	}
	//inter_key_delay = ENABLED;
}
80003c74:	2f ed       	sub	sp,-8
80003c76:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c7a:	00 00       	add	r0,r0
80003c7c:	00 00       	add	r0,r0
80003c7e:	02 89       	andn	r9,r1
80003c80:	00 00       	add	r0,r0
80003c82:	0b cc       	ld.ub	r12,r5[0x4]

80003c84 <store_sequence>:

void store_sequence(uint8_t value)
{
80003c84:	eb cd 40 80 	pushm	r7,lr
80003c88:	1a 97       	mov	r7,sp
80003c8a:	20 2d       	sub	sp,8
80003c8c:	18 98       	mov	r8,r12
80003c8e:	ef 68 ff f8 	st.b	r7[-8],r8
	static uint8_t frame_number = 0;
	uint8_t button_bit_mask = 0x03 << (value * 2);
80003c92:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003c96:	a1 78       	lsl	r8,0x1
80003c98:	30 39       	mov	r9,3
80003c9a:	f2 08 09 48 	lsl	r8,r9,r8
80003c9e:	ef 68 ff fe 	st.b	r7[-2],r8
	uint8_t increment_bit_mask = 0x01 << (value * 2);
80003ca2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003ca6:	a1 78       	lsl	r8,0x1
80003ca8:	30 19       	mov	r9,1
80003caa:	f2 08 09 48 	lsl	r8,r9,r8
80003cae:	ef 68 ff ff 	st.b	r7[-1],r8
	
	switch (value)
80003cb2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003cb6:	58 08       	cp.w	r8,0
80003cb8:	c5 55       	brlt	80003d62 <store_sequence+0xde>
80003cba:	58 28       	cp.w	r8,2
80003cbc:	e0 8a 00 05 	brle	80003cc6 <store_sequence+0x42>
80003cc0:	58 38       	cp.w	r8,3
80003cc2:	c3 80       	breq	80003d32 <store_sequence+0xae>
80003cc4:	c4 f8       	rjmp	80003d62 <store_sequence+0xde>
	{
	case 0:
	case 1:
	case 2:
		Stored_values_ram.device_id_sequence[frame_number] = (((Stored_values_ram.device_id_sequence[frame_number] & button_bit_mask) + increment_bit_mask) & button_bit_mask) | ~(Stored_values_ram.device_id_sequence[frame_number] & button_bit_mask);
80003cc6:	4a 98       	lddpc	r8,80003d68 <store_sequence+0xe4>
80003cc8:	11 88       	ld.ub	r8,r8[0x0]
80003cca:	10 9a       	mov	r10,r8
80003ccc:	4a 78       	lddpc	r8,80003d68 <store_sequence+0xe4>
80003cce:	11 88       	ld.ub	r8,r8[0x0]
80003cd0:	4a 79       	lddpc	r9,80003d6c <store_sequence+0xe8>
80003cd2:	f2 08 00 08 	add	r8,r9,r8
80003cd6:	f1 38 00 80 	ld.ub	r8,r8[128]
80003cda:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003cde:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80003ce2:	f3 e8 00 08 	and	r8,r9,r8
80003ce6:	5c 58       	castu.b	r8
80003ce8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003cec:	f2 08 00 08 	add	r8,r9,r8
80003cf0:	5c 58       	castu.b	r8
80003cf2:	10 99       	mov	r9,r8
80003cf4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80003cf8:	f3 e8 00 08 	and	r8,r9,r8
80003cfc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003d00:	49 a8       	lddpc	r8,80003d68 <store_sequence+0xe4>
80003d02:	11 88       	ld.ub	r8,r8[0x0]
80003d04:	49 ab       	lddpc	r11,80003d6c <store_sequence+0xe8>
80003d06:	f6 08 00 08 	add	r8,r11,r8
80003d0a:	f1 38 00 80 	ld.ub	r8,r8[128]
80003d0e:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80003d12:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80003d16:	f7 e8 00 08 	and	r8,r11,r8
80003d1a:	5c 58       	castu.b	r8
80003d1c:	5c d8       	com	r8
80003d1e:	5c 58       	castu.b	r8
80003d20:	f3 e8 10 08 	or	r8,r9,r8
80003d24:	5c 58       	castu.b	r8
80003d26:	5c 58       	castu.b	r8
80003d28:	49 19       	lddpc	r9,80003d6c <store_sequence+0xe8>
80003d2a:	14 09       	add	r9,r10
80003d2c:	f3 68 00 80 	st.b	r9[128],r8
		break;
80003d30:	c1 98       	rjmp	80003d62 <store_sequence+0xde>
	case 3:
		Stored_values_ram.device_id_sequence[frame_number++] |= 0xC0;
80003d32:	48 e8       	lddpc	r8,80003d68 <store_sequence+0xe4>
80003d34:	11 88       	ld.ub	r8,r8[0x0]
80003d36:	10 99       	mov	r9,r8
80003d38:	12 9a       	mov	r10,r9
80003d3a:	48 db       	lddpc	r11,80003d6c <store_sequence+0xe8>
80003d3c:	f6 09 00 09 	add	r9,r11,r9
80003d40:	f3 39 00 80 	ld.ub	r9,r9[128]
80003d44:	5c 59       	castu.b	r9
80003d46:	ea 19 ff ff 	orh	r9,0xffff
80003d4a:	e8 19 ff c0 	orl	r9,0xffc0
80003d4e:	5c 59       	castu.b	r9
80003d50:	48 7b       	lddpc	r11,80003d6c <store_sequence+0xe8>
80003d52:	f6 0a 00 0a 	add	r10,r11,r10
80003d56:	f5 69 00 80 	st.b	r10[128],r9
80003d5a:	2f f8       	sub	r8,-1
80003d5c:	5c 58       	castu.b	r8
80003d5e:	48 39       	lddpc	r9,80003d68 <store_sequence+0xe4>
80003d60:	b2 88       	st.b	r9[0x0],r8
		break;
	}	
}
80003d62:	2f ed       	sub	sp,-8
80003d64:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d68:	00 00       	add	r0,r0
80003d6a:	04 0e       	add	lr,r2
80003d6c:	00 00       	add	r0,r0
80003d6e:	0a 88       	andn	r8,r5

80003d70 <check_programming_mode_entry_sequence>:

bool check_programming_mode_entry_sequence(void)
{
80003d70:	eb cd 40 80 	pushm	r7,lr
80003d74:	1a 97       	mov	r7,sp
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
		&& gpio_get_pin_value(PB3) == 0
80003d76:	30 ac       	mov	r12,10
80003d78:	f0 1f 00 1e 	mcall	80003df0 <check_programming_mode_entry_sequence+0x80>
80003d7c:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003d7e:	58 08       	cp.w	r8,0
80003d80:	c2 e1       	brne	80003ddc <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
80003d82:	30 cc       	mov	r12,12
80003d84:	f0 1f 00 1b 	mcall	80003df0 <check_programming_mode_entry_sequence+0x80>
80003d88:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003d8a:	58 08       	cp.w	r8,0
80003d8c:	c2 81       	brne	80003ddc <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
80003d8e:	30 dc       	mov	r12,13
80003d90:	f0 1f 00 18 	mcall	80003df0 <check_programming_mode_entry_sequence+0x80>
80003d94:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003d96:	58 08       	cp.w	r8,0
80003d98:	c2 21       	brne	80003ddc <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003d9a:	30 bc       	mov	r12,11
80003d9c:	f0 1f 00 15 	mcall	80003df0 <check_programming_mode_entry_sequence+0x80>
80003da0:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003da2:	58 18       	cp.w	r8,1
80003da4:	c1 c1       	brne	80003ddc <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003da6:	30 4c       	mov	r12,4
80003da8:	f0 1f 00 12 	mcall	80003df0 <check_programming_mode_entry_sequence+0x80>
80003dac:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003dae:	58 18       	cp.w	r8,1
80003db0:	c1 61       	brne	80003ddc <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
	{
		if (programming_mode_sequence_counter++ >= 100)
80003db2:	49 18       	lddpc	r8,80003df4 <check_programming_mode_entry_sequence+0x84>
80003db4:	90 08       	ld.sh	r8,r8[0x0]
80003db6:	36 39       	mov	r9,99
80003db8:	f2 08 19 00 	cp.h	r8,r9
80003dbc:	5f b9       	srhi	r9
80003dbe:	5c 59       	castu.b	r9
80003dc0:	2f f8       	sub	r8,-1
80003dc2:	5c 88       	casts.h	r8
80003dc4:	48 ca       	lddpc	r10,80003df4 <check_programming_mode_entry_sequence+0x84>
80003dc6:	b4 08       	st.h	r10[0x0],r8
80003dc8:	58 09       	cp.w	r9,0
80003dca:	c0 d0       	breq	80003de4 <check_programming_mode_entry_sequence+0x74>
		{
			programming_mode_sequence_counter = 0;
80003dcc:	48 a9       	lddpc	r9,80003df4 <check_programming_mode_entry_sequence+0x84>
80003dce:	30 08       	mov	r8,0
80003dd0:	b2 08       	st.h	r9[0x0],r8
			button_released = false;
80003dd2:	48 a9       	lddpc	r9,80003df8 <check_programming_mode_entry_sequence+0x88>
80003dd4:	30 08       	mov	r8,0
80003dd6:	b2 88       	st.b	r9[0x0],r8
			return true;
80003dd8:	30 18       	mov	r8,1
80003dda:	c0 78       	rjmp	80003de8 <check_programming_mode_entry_sequence+0x78>
		}
	}
	else
	{
		programming_mode_sequence_counter = 0;
80003ddc:	48 69       	lddpc	r9,80003df4 <check_programming_mode_entry_sequence+0x84>
80003dde:	30 08       	mov	r8,0
80003de0:	b2 08       	st.h	r9[0x0],r8
80003de2:	c0 28       	rjmp	80003de6 <check_programming_mode_entry_sequence+0x76>
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003de4:	d7 03       	nop
	}
	else
	{
		programming_mode_sequence_counter = 0;
	}
	return false;
80003de6:	30 08       	mov	r8,0
}
80003de8:	10 9c       	mov	r12,r8
80003dea:	e3 cd 80 80 	ldm	sp++,r7,pc
80003dee:	00 00       	add	r0,r0
80003df0:	80 00       	ld.sh	r0,r0[0x0]
80003df2:	90 80       	ld.uh	r0,r8[0x0]
80003df4:	00 00       	add	r0,r0
80003df6:	04 0c       	add	r12,r2
80003df8:	00 00       	add	r0,r0
80003dfa:	01 2d       	ld.uh	sp,r0++

80003dfc <check_normal_mode_entry_sequence>:

bool check_normal_mode_entry_sequence(void)
{
80003dfc:	eb cd 40 80 	pushm	r7,lr
80003e00:	1a 97       	mov	r7,sp
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
		&& gpio_get_pin_value(PB4) == 0
80003e02:	30 4c       	mov	r12,4
80003e04:	f0 1f 00 40 	mcall	80003f04 <check_normal_mode_entry_sequence+0x108>
80003e08:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003e0a:	58 08       	cp.w	r8,0
80003e0c:	c3 41       	brne	80003e74 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
80003e0e:	30 dc       	mov	r12,13
80003e10:	f0 1f 00 3d 	mcall	80003f04 <check_normal_mode_entry_sequence+0x108>
80003e14:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003e16:	58 08       	cp.w	r8,0
80003e18:	c2 e1       	brne	80003e74 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
80003e1a:	30 ac       	mov	r12,10
80003e1c:	f0 1f 00 3a 	mcall	80003f04 <check_normal_mode_entry_sequence+0x108>
80003e20:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003e22:	58 18       	cp.w	r8,1
80003e24:	c2 81       	brne	80003e74 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003e26:	30 bc       	mov	r12,11
80003e28:	f0 1f 00 37 	mcall	80003f04 <check_normal_mode_entry_sequence+0x108>
80003e2c:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003e2e:	58 18       	cp.w	r8,1
80003e30:	c2 21       	brne	80003e74 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003e32:	30 cc       	mov	r12,12
80003e34:	f0 1f 00 34 	mcall	80003f04 <check_normal_mode_entry_sequence+0x108>
80003e38:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003e3a:	58 18       	cp.w	r8,1
80003e3c:	c1 c1       	brne	80003e74 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
	{
		normal_mode_unlock_device_sequence_counter = 0;
80003e3e:	4b 39       	lddpc	r9,80003f08 <check_normal_mode_entry_sequence+0x10c>
80003e40:	30 08       	mov	r8,0
80003e42:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_device_id_sequence_counter++ >= 200)
80003e44:	4b 28       	lddpc	r8,80003f0c <check_normal_mode_entry_sequence+0x110>
80003e46:	11 88       	ld.ub	r8,r8[0x0]
80003e48:	3c 79       	mov	r9,-57
80003e4a:	f2 08 18 00 	cp.b	r8,r9
80003e4e:	5f b9       	srhi	r9
80003e50:	5c 59       	castu.b	r9
80003e52:	2f f8       	sub	r8,-1
80003e54:	5c 58       	castu.b	r8
80003e56:	4a ea       	lddpc	r10,80003f0c <check_normal_mode_entry_sequence+0x110>
80003e58:	b4 88       	st.b	r10[0x0],r8
80003e5a:	58 09       	cp.w	r9,0
80003e5c:	c4 c0       	breq	80003ef4 <check_normal_mode_entry_sequence+0xf8>
		{
			normal_mode_device_id_sequence_counter = 0;
80003e5e:	4a c9       	lddpc	r9,80003f0c <check_normal_mode_entry_sequence+0x110>
80003e60:	30 08       	mov	r8,0
80003e62:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003e64:	4a b9       	lddpc	r9,80003f10 <check_normal_mode_entry_sequence+0x114>
80003e66:	30 08       	mov	r8,0
80003e68:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = DEVICE_ID;
80003e6a:	4a b9       	lddpc	r9,80003f14 <check_normal_mode_entry_sequence+0x118>
80003e6c:	30 38       	mov	r8,3
80003e6e:	b2 88       	st.b	r9[0x0],r8
			return true;
80003e70:	30 18       	mov	r8,1
80003e72:	c4 58       	rjmp	80003efc <check_normal_mode_entry_sequence+0x100>
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
			&& gpio_get_pin_value(PB2) == 0
80003e74:	30 4c       	mov	r12,4
80003e76:	f0 1f 00 24 	mcall	80003f04 <check_normal_mode_entry_sequence+0x108>
80003e7a:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003e7c:	58 08       	cp.w	r8,0
80003e7e:	c3 41       	brne	80003ee6 <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
80003e80:	30 bc       	mov	r12,11
80003e82:	f0 1f 00 21 	mcall	80003f04 <check_normal_mode_entry_sequence+0x108>
80003e86:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003e88:	58 08       	cp.w	r8,0
80003e8a:	c2 e1       	brne	80003ee6 <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
80003e8c:	30 ac       	mov	r12,10
80003e8e:	f0 1f 00 1e 	mcall	80003f04 <check_normal_mode_entry_sequence+0x108>
80003e92:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003e94:	58 18       	cp.w	r8,1
80003e96:	c2 81       	brne	80003ee6 <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003e98:	30 cc       	mov	r12,12
80003e9a:	f0 1f 00 1b 	mcall	80003f04 <check_normal_mode_entry_sequence+0x108>
80003e9e:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003ea0:	58 18       	cp.w	r8,1
80003ea2:	c2 21       	brne	80003ee6 <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003ea4:	30 dc       	mov	r12,13
80003ea6:	f0 1f 00 18 	mcall	80003f04 <check_normal_mode_entry_sequence+0x108>
80003eaa:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003eac:	58 18       	cp.w	r8,1
80003eae:	c1 c1       	brne	80003ee6 <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
	{
		normal_mode_device_id_sequence_counter = 0;
80003eb0:	49 79       	lddpc	r9,80003f0c <check_normal_mode_entry_sequence+0x110>
80003eb2:	30 08       	mov	r8,0
80003eb4:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_unlock_device_sequence_counter++ >= 200)
80003eb6:	49 58       	lddpc	r8,80003f08 <check_normal_mode_entry_sequence+0x10c>
80003eb8:	11 88       	ld.ub	r8,r8[0x0]
80003eba:	3c 79       	mov	r9,-57
80003ebc:	f2 08 18 00 	cp.b	r8,r9
80003ec0:	5f b9       	srhi	r9
80003ec2:	5c 59       	castu.b	r9
80003ec4:	2f f8       	sub	r8,-1
80003ec6:	5c 58       	castu.b	r8
80003ec8:	49 0a       	lddpc	r10,80003f08 <check_normal_mode_entry_sequence+0x10c>
80003eca:	b4 88       	st.b	r10[0x0],r8
80003ecc:	58 09       	cp.w	r9,0
80003ece:	c1 50       	breq	80003ef8 <check_normal_mode_entry_sequence+0xfc>
		{
			normal_mode_unlock_device_sequence_counter = 0;
80003ed0:	48 e9       	lddpc	r9,80003f08 <check_normal_mode_entry_sequence+0x10c>
80003ed2:	30 08       	mov	r8,0
80003ed4:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003ed6:	48 f9       	lddpc	r9,80003f10 <check_normal_mode_entry_sequence+0x114>
80003ed8:	30 08       	mov	r8,0
80003eda:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = UNLOCK_CRYPTX2;
80003edc:	48 e9       	lddpc	r9,80003f14 <check_normal_mode_entry_sequence+0x118>
80003ede:	30 48       	mov	r8,4
80003ee0:	b2 88       	st.b	r9[0x0],r8
			return true;
80003ee2:	30 18       	mov	r8,1
80003ee4:	c0 c8       	rjmp	80003efc <check_normal_mode_entry_sequence+0x100>
		}
	}
	else
	{
		normal_mode_device_id_sequence_counter = 0;
80003ee6:	48 a9       	lddpc	r9,80003f0c <check_normal_mode_entry_sequence+0x110>
80003ee8:	30 08       	mov	r8,0
80003eea:	b2 88       	st.b	r9[0x0],r8
		normal_mode_unlock_device_sequence_counter = 0;
80003eec:	48 79       	lddpc	r9,80003f08 <check_normal_mode_entry_sequence+0x10c>
80003eee:	30 08       	mov	r8,0
80003ef0:	b2 88       	st.b	r9[0x0],r8
80003ef2:	c0 48       	rjmp	80003efa <check_normal_mode_entry_sequence+0xfe>
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003ef4:	d7 03       	nop
80003ef6:	c0 28       	rjmp	80003efa <check_normal_mode_entry_sequence+0xfe>
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003ef8:	d7 03       	nop
	else
	{
		normal_mode_device_id_sequence_counter = 0;
		normal_mode_unlock_device_sequence_counter = 0;
	}
	return false;
80003efa:	30 08       	mov	r8,0
}
80003efc:	10 9c       	mov	r12,r8
80003efe:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f02:	00 00       	add	r0,r0
80003f04:	80 00       	ld.sh	r0,r0[0x0]
80003f06:	90 80       	ld.uh	r0,r8[0x0]
80003f08:	00 00       	add	r0,r0
80003f0a:	04 0a       	add	r10,r2
80003f0c:	00 00       	add	r0,r0
80003f0e:	04 0b       	add	r11,r2
80003f10:	00 00       	add	r0,r0
80003f12:	01 2d       	ld.uh	sp,r0++
80003f14:	00 00       	add	r0,r0
80003f16:	03 db       	ld.ub	r11,r1[0x5]

80003f18 <check_for_mode_selected>:

void check_for_mode_selected(void)
{
80003f18:	eb cd 40 80 	pushm	r7,lr
80003f1c:	1a 97       	mov	r7,sp
	Read_button();
80003f1e:	f0 1f 00 03 	mcall	80003f28 <check_for_mode_selected+0x10>
}
80003f22:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f26:	00 00       	add	r0,r0
80003f28:	80 00       	ld.sh	r0,r0[0x0]
80003f2a:	38 78       	mov	r8,-121

80003f2c <process_selected_mode>:

uint8_t process_selected_mode(void)
{
80003f2c:	eb cd 40 80 	pushm	r7,lr
80003f30:	1a 97       	mov	r7,sp
80003f32:	20 1d       	sub	sp,4
	uint8_t return_value = FAILED;
80003f34:	30 08       	mov	r8,0
80003f36:	ef 68 ff ff 	st.b	r7[-1],r8
	
	Read_button();
80003f3a:	f0 1f 00 3e 	mcall	80004030 <process_selected_mode+0x104>
	
	if (enter_button_status == READY_TO_TRIGGER)
80003f3e:	4b e8       	lddpc	r8,80004034 <process_selected_mode+0x108>
80003f40:	11 88       	ld.ub	r8,r8[0x0]
80003f42:	5c 58       	castu.b	r8
80003f44:	c0 b1       	brne	80003f5a <process_selected_mode+0x2e>
	{
		pass_code = temp_password;
80003f46:	4b d8       	lddpc	r8,80004038 <process_selected_mode+0x10c>
80003f48:	4b d9       	lddpc	r9,8000403c <process_selected_mode+0x110>
80003f4a:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
80003f4c:	4b d9       	lddpc	r9,80004040 <process_selected_mode+0x114>
80003f4e:	30 08       	mov	r8,0
80003f50:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_FIRST_PRESS;
80003f52:	4b 99       	lddpc	r9,80004034 <process_selected_mode+0x108>
80003f54:	30 18       	mov	r8,1
80003f56:	b2 88       	st.b	r9[0x0],r8
80003f58:	c6 58       	rjmp	80004022 <process_selected_mode+0xf6>
	}
	else if (enter_button_status == FIRST_TIME_PRESSED)
80003f5a:	4b 78       	lddpc	r8,80004034 <process_selected_mode+0x108>
80003f5c:	11 88       	ld.ub	r8,r8[0x0]
80003f5e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003f62:	30 28       	mov	r8,2
80003f64:	f0 09 18 00 	cp.b	r9,r8
80003f68:	c0 e1       	brne	80003f84 <process_selected_mode+0x58>
	{
		store_passcode(3L);
80003f6a:	30 3c       	mov	r12,3
80003f6c:	f0 1f 00 36 	mcall	80004044 <process_selected_mode+0x118>
		pass_code = temp_password1;
80003f70:	4b 28       	lddpc	r8,80004038 <process_selected_mode+0x10c>
80003f72:	4b 69       	lddpc	r9,80004048 <process_selected_mode+0x11c>
80003f74:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
80003f76:	4b 39       	lddpc	r9,80004040 <process_selected_mode+0x114>
80003f78:	30 08       	mov	r8,0
80003f7a:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_SECOND_PRESS;
80003f7c:	4a e9       	lddpc	r9,80004034 <process_selected_mode+0x108>
80003f7e:	30 38       	mov	r8,3
80003f80:	b2 88       	st.b	r9[0x0],r8
80003f82:	c5 08       	rjmp	80004022 <process_selected_mode+0xf6>
	}
	else if (enter_button_status == SECOND_TIME_PRESSED)
80003f84:	4a c8       	lddpc	r8,80004034 <process_selected_mode+0x108>
80003f86:	11 88       	ld.ub	r8,r8[0x0]
80003f88:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003f8c:	30 48       	mov	r8,4
80003f8e:	f0 09 18 00 	cp.b	r9,r8
80003f92:	c1 e1       	brne	80003fce <process_selected_mode+0xa2>
	{
		store_passcode(3L);
80003f94:	30 3c       	mov	r12,3
80003f96:	f0 1f 00 2c 	mcall	80004044 <process_selected_mode+0x118>
		if (compare_entered_passwords() == true)
80003f9a:	f0 1f 00 2d 	mcall	8000404c <process_selected_mode+0x120>
80003f9e:	18 98       	mov	r8,r12
80003fa0:	58 08       	cp.w	r8,0
80003fa2:	c3 d0       	breq	8000401c <process_selected_mode+0xf0>
		{
			memset((uint8_t *)temp_password, 0, 32);
80003fa4:	32 0a       	mov	r10,32
80003fa6:	30 0b       	mov	r11,0
80003fa8:	4a 5c       	lddpc	r12,8000403c <process_selected_mode+0x110>
80003faa:	f0 1f 00 2a 	mcall	80004050 <process_selected_mode+0x124>
			pass_code = temp_password;
80003fae:	4a 38       	lddpc	r8,80004038 <process_selected_mode+0x10c>
80003fb0:	4a 39       	lddpc	r9,8000403c <process_selected_mode+0x110>
80003fb2:	91 09       	st.w	r8[0x0],r9
			passcode_byte_index = 0;
80003fb4:	4a 39       	lddpc	r9,80004040 <process_selected_mode+0x114>
80003fb6:	30 08       	mov	r8,0
80003fb8:	b2 88       	st.b	r9[0x0],r8
			enter_button_status = WAITING_FOR_USER_INPUT;
80003fba:	49 f9       	lddpc	r9,80004034 <process_selected_mode+0x108>
80003fbc:	30 58       	mov	r8,5
80003fbe:	b2 88       	st.b	r9[0x0],r8
			switch (mode_chosen)
80003fc0:	4a 58       	lddpc	r8,80004054 <process_selected_mode+0x128>
80003fc2:	11 88       	ld.ub	r8,r8[0x0]
80003fc4:	5c 58       	castu.b	r8
80003fc6:	c2 d1       	brne	80004020 <process_selected_mode+0xf4>
			{
			case _UNLOCK_PASSWORD:
				Start_W_timer();			
80003fc8:	f0 1f 00 24 	mcall	80004058 <process_selected_mode+0x12c>
80003fcc:	c2 b8       	rjmp	80004022 <process_selected_mode+0xf6>
				break;	
			}

		}
	}
	else if (enter_button_status == THIRD_TIME_PRESSED)
80003fce:	49 a8       	lddpc	r8,80004034 <process_selected_mode+0x108>
80003fd0:	11 88       	ld.ub	r8,r8[0x0]
80003fd2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003fd6:	30 68       	mov	r8,6
80003fd8:	f0 09 18 00 	cp.b	r9,r8
80003fdc:	c2 31       	brne	80004022 <process_selected_mode+0xf6>
	{
		
		switch (mode_chosen)
80003fde:	49 e8       	lddpc	r8,80004054 <process_selected_mode+0x128>
80003fe0:	11 88       	ld.ub	r8,r8[0x0]
80003fe2:	5c 58       	castu.b	r8
80003fe4:	58 18       	cp.w	r8,1
80003fe6:	c1 40       	breq	8000400e <process_selected_mode+0xe2>
80003fe8:	e0 89 00 05 	brgt	80003ff2 <process_selected_mode+0xc6>
80003fec:	58 08       	cp.w	r8,0
80003fee:	c0 70       	breq	80003ffc <process_selected_mode+0xd0>
80003ff0:	c1 28       	rjmp	80004014 <process_selected_mode+0xe8>
80003ff2:	58 28       	cp.w	r8,2
80003ff4:	c0 f0       	breq	80004012 <process_selected_mode+0xe6>
80003ff6:	58 38       	cp.w	r8,3
80003ff8:	c0 80       	breq	80004008 <process_selected_mode+0xdc>
80003ffa:	c0 d8       	rjmp	80004014 <process_selected_mode+0xe8>
		{
		case _UNLOCK_PASSWORD:
			store_passcode(3L);
80003ffc:	30 3c       	mov	r12,3
80003ffe:	f0 1f 00 12 	mcall	80004044 <process_selected_mode+0x118>
			calculate_salt();
80004002:	f0 1f 00 17 	mcall	8000405c <process_selected_mode+0x130>
			break;
80004006:	c0 78       	rjmp	80004014 <process_selected_mode+0xe8>
		case _HIDDEN_DATA_UNLOCK_PASSWORD:
			break;
		case _PANIC_MODE:
			break;
		case _DEVICE_ID_CONFIRM:
			save_sequence_to_mcu();
80004008:	f0 1f 00 16 	mcall	80004060 <process_selected_mode+0x134>
8000400c:	c0 48       	rjmp	80004014 <process_selected_mode+0xe8>
		case _UNLOCK_PASSWORD:
			store_passcode(3L);
			calculate_salt();
			break;
		case _HIDDEN_DATA_UNLOCK_PASSWORD:
			break;
8000400e:	d7 03       	nop
80004010:	c0 28       	rjmp	80004014 <process_selected_mode+0xe8>
		case _PANIC_MODE:
			break;
80004012:	d7 03       	nop
		case _DEVICE_ID_CONFIRM:
			save_sequence_to_mcu();
			break;
		}
		
		return_value = SUCCESSFUL;
80004014:	30 18       	mov	r8,1
80004016:	ef 68 ff ff 	st.b	r7[-1],r8
8000401a:	c0 48       	rjmp	80004022 <process_selected_mode+0xf6>
			passcode_byte_index = 0;
			enter_button_status = WAITING_FOR_USER_INPUT;
			switch (mode_chosen)
			{
			case _UNLOCK_PASSWORD:
				Start_W_timer();			
8000401c:	d7 03       	nop
8000401e:	c0 28       	rjmp	80004022 <process_selected_mode+0xf6>
80004020:	d7 03       	nop
		
		return_value = SUCCESSFUL;
	}

	
	return return_value;
80004022:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80004026:	10 9c       	mov	r12,r8
80004028:	2f fd       	sub	sp,-4
8000402a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000402e:	00 00       	add	r0,r0
80004030:	80 00       	ld.sh	r0,r0[0x0]
80004032:	38 78       	mov	r8,-121
80004034:	00 00       	add	r0,r0
80004036:	03 da       	ld.ub	r10,r1[0x5]
80004038:	00 00       	add	r0,r0
8000403a:	0b cc       	ld.ub	r12,r5[0x4]
8000403c:	00 00       	add	r0,r0
8000403e:	02 48       	or	r8,r1
80004040:	00 00       	add	r0,r0
80004042:	02 89       	andn	r9,r1
80004044:	80 00       	ld.sh	r0,r0[0x0]
80004046:	3b fc       	mov	r12,-65
80004048:	00 00       	add	r0,r0
8000404a:	02 68       	and	r8,r1
8000404c:	80 00       	ld.sh	r0,r0[0x0]
8000404e:	40 64       	lddsp	r4,sp[0x18]
80004050:	80 00       	ld.sh	r0,r0[0x0]
80004052:	ec 1e 00 00 	eorl	lr,0x0
80004056:	01 2e       	ld.uh	lr,r0++
80004058:	80 00       	ld.sh	r0,r0[0x0]
8000405a:	30 0c       	mov	r12,0
8000405c:	80 00       	ld.sh	r0,r0[0x0]
8000405e:	2e 18       	sub	r8,-31
80004060:	80 00       	ld.sh	r0,r0[0x0]
80004062:	2f 90       	sub	r0,-7

80004064 <compare_entered_passwords>:

bool compare_entered_passwords(void)
{
80004064:	eb cd 40 80 	pushm	r7,lr
80004068:	1a 97       	mov	r7,sp
8000406a:	20 1d       	sub	sp,4
	uint8_t i = 0;
8000406c:	30 08       	mov	r8,0
8000406e:	ef 68 ff ff 	st.b	r7[-1],r8
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
80004072:	c1 48       	rjmp	8000409a <compare_entered_passwords+0x36>
	{
		if (temp_password[i] != temp_password1[i])
80004074:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004078:	48 f8       	lddpc	r8,800040b4 <compare_entered_passwords+0x50>
8000407a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000407e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80004082:	48 e8       	lddpc	r8,800040b8 <compare_entered_passwords+0x54>
80004084:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80004088:	10 39       	cp.w	r9,r8
8000408a:	c0 30       	breq	80004090 <compare_entered_passwords+0x2c>
		{
			return false;
8000408c:	30 08       	mov	r8,0
8000408e:	c0 e8       	rjmp	800040aa <compare_entered_passwords+0x46>
		}
		i++;
80004090:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004094:	2f f8       	sub	r8,-1
80004096:	ef 68 ff ff 	st.b	r7[-1],r8

bool compare_entered_passwords(void)
{
	uint8_t i = 0;
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
8000409a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000409e:	30 78       	mov	r8,7
800040a0:	f0 09 18 00 	cp.b	r9,r8
800040a4:	fe 98 ff e8 	brls	80004074 <compare_entered_passwords+0x10>
		{
			return false;
		}
		i++;
	}
	return true;
800040a8:	30 18       	mov	r8,1
}
800040aa:	10 9c       	mov	r12,r8
800040ac:	2f fd       	sub	sp,-4
800040ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800040b2:	00 00       	add	r0,r0
800040b4:	00 00       	add	r0,r0
800040b6:	02 48       	or	r8,r1
800040b8:	00 00       	add	r0,r0
800040ba:	02 68       	and	r8,r1

800040bc <read_password>:

void read_password(void)
{
800040bc:	eb cd 40 80 	pushm	r7,lr
800040c0:	1a 97       	mov	r7,sp
	Read_button();
800040c2:	f0 1f 00 06 	mcall	800040d8 <read_password+0x1c>
	if (normal_mode_password_entered == true)
800040c6:	48 68       	lddpc	r8,800040dc <read_password+0x20>
800040c8:	11 88       	ld.ub	r8,r8[0x0]
800040ca:	5c 58       	castu.b	r8
800040cc:	c0 30       	breq	800040d2 <read_password+0x16>
	{
		compare_with_saved_password();
800040ce:	f0 1f 00 05 	mcall	800040e0 <read_password+0x24>
	}
}
800040d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800040d6:	00 00       	add	r0,r0
800040d8:	80 00       	ld.sh	r0,r0[0x0]
800040da:	38 78       	mov	r8,-121
800040dc:	00 00       	add	r0,r0
800040de:	03 d9       	ld.ub	r9,r1[0x5]
800040e0:	80 00       	ld.sh	r0,r0[0x0]
800040e2:	40 e4       	lddsp	r4,sp[0x38]

800040e4 <compare_with_saved_password>:

bool compare_with_saved_password(void)
{
800040e4:	eb cd 40 80 	pushm	r7,lr
800040e8:	1a 97       	mov	r7,sp
800040ea:	20 2d       	sub	sp,8
	uint8_t i = 0; 
800040ec:	30 08       	mov	r8,0
800040ee:	ef 68 ff fb 	st.b	r7[-5],r8
	uint32_t *temp_stored_password;

	temp_stored_password = encrypt_password((uint32_t *)temp_password);
800040f2:	4b 0c       	lddpc	r12,800041b0 <compare_with_saved_password+0xcc>
800040f4:	f0 1f 00 30 	mcall	800041b4 <compare_with_saved_password+0xd0>
800040f8:	18 98       	mov	r8,r12
800040fa:	ef 48 ff fc 	st.w	r7[-4],r8

	while (i < 8)
800040fe:	c1 38       	rjmp	80004124 <compare_with_saved_password+0x40>
	{
		temp_password[i] = temp_stored_password[i];
80004100:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80004104:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004108:	a3 68       	lsl	r8,0x2
8000410a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000410e:	f4 08 00 08 	add	r8,r10,r8
80004112:	70 0a       	ld.w	r10,r8[0x0]
80004114:	4a 78       	lddpc	r8,800041b0 <compare_with_saved_password+0xcc>
80004116:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		i++;
8000411a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000411e:	2f f8       	sub	r8,-1
80004120:	ef 68 ff fb 	st.b	r7[-5],r8
	uint8_t i = 0; 
	uint32_t *temp_stored_password;

	temp_stored_password = encrypt_password((uint32_t *)temp_password);

	while (i < 8)
80004124:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80004128:	30 78       	mov	r8,7
8000412a:	f0 09 18 00 	cp.b	r9,r8
8000412e:	fe 98 ff e9 	brls	80004100 <compare_with_saved_password+0x1c>
	{
		temp_password[i] = temp_stored_password[i];
		i++;
	}
	if (normal_mode_chosen == DEVICE_ID)
80004132:	4a 28       	lddpc	r8,800041b8 <compare_with_saved_password+0xd4>
80004134:	11 88       	ld.ub	r8,r8[0x0]
80004136:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000413a:	30 38       	mov	r8,3
8000413c:	f0 09 18 00 	cp.b	r9,r8
80004140:	c0 61       	brne	8000414c <compare_with_saved_password+0x68>
	{
		temp_stored_password = (uint32_t *)Stored_values_ram.device_id_confirm;
80004142:	49 f8       	lddpc	r8,800041bc <compare_with_saved_password+0xd8>
80004144:	2a 08       	sub	r8,-96
80004146:	ef 48 ff fc 	st.w	r7[-4],r8
8000414a:	c0 c8       	rjmp	80004162 <compare_with_saved_password+0x7e>
	}
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
8000414c:	49 b8       	lddpc	r8,800041b8 <compare_with_saved_password+0xd4>
8000414e:	11 88       	ld.ub	r8,r8[0x0]
80004150:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80004154:	30 48       	mov	r8,4
80004156:	f0 09 18 00 	cp.b	r9,r8
8000415a:	c0 41       	brne	80004162 <compare_with_saved_password+0x7e>
	{
		temp_stored_password = (uint32_t *)Stored_values_ram.unlock_password;
8000415c:	49 88       	lddpc	r8,800041bc <compare_with_saved_password+0xd8>
8000415e:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	i = 0;
80004162:	30 08       	mov	r8,0
80004164:	ef 68 ff fb 	st.b	r7[-5],r8
	while (i < 8)
80004168:	c1 78       	rjmp	80004196 <compare_with_saved_password+0xb2>
	{
		if (temp_stored_password[i] != temp_password[i])
8000416a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000416e:	a3 68       	lsl	r8,0x2
80004170:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004174:	f2 08 00 08 	add	r8,r9,r8
80004178:	70 09       	ld.w	r9,r8[0x0]
8000417a:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8000417e:	48 d8       	lddpc	r8,800041b0 <compare_with_saved_password+0xcc>
80004180:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80004184:	10 39       	cp.w	r9,r8
80004186:	c0 30       	breq	8000418c <compare_with_saved_password+0xa8>
		{
			return false;
80004188:	30 08       	mov	r8,0
8000418a:	c0 e8       	rjmp	800041a6 <compare_with_saved_password+0xc2>
		}
		i++;
8000418c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004190:	2f f8       	sub	r8,-1
80004192:	ef 68 ff fb 	st.b	r7[-5],r8
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
	{
		temp_stored_password = (uint32_t *)Stored_values_ram.unlock_password;
	}
	i = 0;
	while (i < 8)
80004196:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000419a:	30 78       	mov	r8,7
8000419c:	f0 09 18 00 	cp.b	r9,r8
800041a0:	fe 98 ff e5 	brls	8000416a <compare_with_saved_password+0x86>
		{
			return false;
		}
		i++;
	}
	return true;
800041a4:	30 18       	mov	r8,1
}
800041a6:	10 9c       	mov	r12,r8
800041a8:	2f ed       	sub	sp,-8
800041aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800041ae:	00 00       	add	r0,r0
800041b0:	00 00       	add	r0,r0
800041b2:	02 48       	or	r8,r1
800041b4:	80 00       	ld.sh	r0,r0[0x0]
800041b6:	2d 34       	sub	r4,-45
800041b8:	00 00       	add	r0,r0
800041ba:	03 db       	ld.ub	r11,r1[0x5]
800041bc:	00 00       	add	r0,r0
800041be:	0a 88       	andn	r8,r5

800041c0 <update_leds>:
#define		SD1				0
#define		MODE			1
#define		SD2				2

void update_leds(void)
{
800041c0:	eb cd 40 80 	pushm	r7,lr
800041c4:	1a 97       	mov	r7,sp
	static uint8_t led_bit_mask = 0;
	static uint8_t current_bit_mask = 3;
	static uint8_t device_id_byte = 0;
	static uint8_t device_id_byte_index = 0;
	
	if (led_on_time && led_off_time)
800041c6:	4d 78       	lddpc	r8,80004320 <update_leds+0x160>
800041c8:	11 88       	ld.ub	r8,r8[0x0]
800041ca:	58 08       	cp.w	r8,0
800041cc:	c1 10       	breq	800041ee <update_leds+0x2e>
800041ce:	4d 68       	lddpc	r8,80004324 <update_leds+0x164>
800041d0:	11 88       	ld.ub	r8,r8[0x0]
800041d2:	58 08       	cp.w	r8,0
800041d4:	c0 d0       	breq	800041ee <update_leds+0x2e>
	{
		LED_On(led_bit_mask);
800041d6:	4d 58       	lddpc	r8,80004328 <update_leds+0x168>
800041d8:	11 88       	ld.ub	r8,r8[0x0]
800041da:	10 9c       	mov	r12,r8
800041dc:	f0 1f 00 54 	mcall	8000432c <update_leds+0x16c>
		led_on_time--;
800041e0:	4d 08       	lddpc	r8,80004320 <update_leds+0x160>
800041e2:	11 88       	ld.ub	r8,r8[0x0]
800041e4:	20 18       	sub	r8,1
800041e6:	5c 58       	castu.b	r8
800041e8:	4c e9       	lddpc	r9,80004320 <update_leds+0x160>
800041ea:	b2 88       	st.b	r9[0x0],r8
	static uint8_t led_bit_mask = 0;
	static uint8_t current_bit_mask = 3;
	static uint8_t device_id_byte = 0;
	static uint8_t device_id_byte_index = 0;
	
	if (led_on_time && led_off_time)
800041ec:	c9 88       	rjmp	8000431c <update_leds+0x15c>
	{
		LED_On(led_bit_mask);
		led_on_time--;
	}
	else if (led_on_time == 0 && led_off_time)
800041ee:	4c d8       	lddpc	r8,80004320 <update_leds+0x160>
800041f0:	11 88       	ld.ub	r8,r8[0x0]
800041f2:	58 08       	cp.w	r8,0
800041f4:	c1 11       	brne	80004216 <update_leds+0x56>
800041f6:	4c c8       	lddpc	r8,80004324 <update_leds+0x164>
800041f8:	11 88       	ld.ub	r8,r8[0x0]
800041fa:	58 08       	cp.w	r8,0
800041fc:	c0 d0       	breq	80004216 <update_leds+0x56>
	{
		LED_Off(led_bit_mask);
800041fe:	4c b8       	lddpc	r8,80004328 <update_leds+0x168>
80004200:	11 88       	ld.ub	r8,r8[0x0]
80004202:	10 9c       	mov	r12,r8
80004204:	f0 1f 00 4b 	mcall	80004330 <update_leds+0x170>
		led_off_time--;
80004208:	4c 78       	lddpc	r8,80004324 <update_leds+0x164>
8000420a:	11 88       	ld.ub	r8,r8[0x0]
8000420c:	20 18       	sub	r8,1
8000420e:	5c 58       	castu.b	r8
80004210:	4c 59       	lddpc	r9,80004324 <update_leds+0x164>
80004212:	b2 88       	st.b	r9[0x0],r8
	if (led_on_time && led_off_time)
	{
		LED_On(led_bit_mask);
		led_on_time--;
	}
	else if (led_on_time == 0 && led_off_time)
80004214:	c8 48       	rjmp	8000431c <update_leds+0x15c>
		LED_Off(led_bit_mask);
		led_off_time--;
	}
	else
	{
		led_bit_mask = 0;
80004216:	4c 59       	lddpc	r9,80004328 <update_leds+0x168>
80004218:	30 08       	mov	r8,0
8000421a:	b2 88       	st.b	r9[0x0],r8
		switch (current_bit_mask)
8000421c:	4c 68       	lddpc	r8,80004334 <update_leds+0x174>
8000421e:	11 88       	ld.ub	r8,r8[0x0]
80004220:	58 18       	cp.w	r8,1
80004222:	c2 10       	breq	80004264 <update_leds+0xa4>
80004224:	58 28       	cp.w	r8,2
80004226:	c4 20       	breq	800042aa <update_leds+0xea>
80004228:	58 08       	cp.w	r8,0
8000422a:	c6 31       	brne	800042f0 <update_leds+0x130>
		{
			case SD1:
				if (device_id_byte & 0x03)
8000422c:	4c 38       	lddpc	r8,80004338 <update_leds+0x178>
8000422e:	11 88       	ld.ub	r8,r8[0x0]
80004230:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004234:	c1 10       	breq	80004256 <update_leds+0x96>
				{
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 0);
80004236:	4c 18       	lddpc	r8,80004338 <update_leds+0x178>
80004238:	11 88       	ld.ub	r8,r8[0x0]
8000423a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000423e:	30 19       	mov	r9,1
80004240:	f2 08 09 48 	lsl	r8,r9,r8
80004244:	5c 58       	castu.b	r8
80004246:	4b 99       	lddpc	r9,80004328 <update_leds+0x168>
80004248:	b2 88       	st.b	r9[0x0],r8
					led_on_time = 50;
8000424a:	4b 69       	lddpc	r9,80004320 <update_leds+0x160>
8000424c:	33 28       	mov	r8,50
8000424e:	b2 88       	st.b	r9[0x0],r8
					led_off_time = 10;		
80004250:	4b 59       	lddpc	r9,80004324 <update_leds+0x164>
80004252:	30 a8       	mov	r8,10
80004254:	b2 88       	st.b	r9[0x0],r8
				}
				current_bit_mask++;			
80004256:	4b 88       	lddpc	r8,80004334 <update_leds+0x174>
80004258:	11 88       	ld.ub	r8,r8[0x0]
8000425a:	2f f8       	sub	r8,-1
8000425c:	5c 58       	castu.b	r8
8000425e:	4b 69       	lddpc	r9,80004334 <update_leds+0x174>
80004260:	b2 88       	st.b	r9[0x0],r8
				break;
80004262:	c5 d8       	rjmp	8000431c <update_leds+0x15c>
			case MODE:
				device_id_byte >>= 2;
80004264:	4b 58       	lddpc	r8,80004338 <update_leds+0x178>
80004266:	11 88       	ld.ub	r8,r8[0x0]
80004268:	a3 88       	lsr	r8,0x2
8000426a:	5c 58       	castu.b	r8
8000426c:	4b 39       	lddpc	r9,80004338 <update_leds+0x178>
8000426e:	b2 88       	st.b	r9[0x0],r8
				if (device_id_byte & 0x03)
80004270:	4b 28       	lddpc	r8,80004338 <update_leds+0x178>
80004272:	11 88       	ld.ub	r8,r8[0x0]
80004274:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004278:	c4 f0       	breq	80004316 <update_leds+0x156>
				{
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 3);
8000427a:	4b 08       	lddpc	r8,80004338 <update_leds+0x178>
8000427c:	11 88       	ld.ub	r8,r8[0x0]
8000427e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004282:	2f d8       	sub	r8,-3
80004284:	30 19       	mov	r9,1
80004286:	f2 08 09 48 	lsl	r8,r9,r8
8000428a:	5c 58       	castu.b	r8
8000428c:	4a 79       	lddpc	r9,80004328 <update_leds+0x168>
8000428e:	b2 88       	st.b	r9[0x0],r8
					led_on_time = 50;
80004290:	4a 49       	lddpc	r9,80004320 <update_leds+0x160>
80004292:	33 28       	mov	r8,50
80004294:	b2 88       	st.b	r9[0x0],r8
					led_off_time = 10;
80004296:	4a 49       	lddpc	r9,80004324 <update_leds+0x164>
80004298:	30 a8       	mov	r8,10
8000429a:	b2 88       	st.b	r9[0x0],r8
					current_bit_mask++;
8000429c:	4a 68       	lddpc	r8,80004334 <update_leds+0x174>
8000429e:	11 88       	ld.ub	r8,r8[0x0]
800042a0:	2f f8       	sub	r8,-1
800042a2:	5c 58       	castu.b	r8
800042a4:	4a 49       	lddpc	r9,80004334 <update_leds+0x174>
800042a6:	b2 88       	st.b	r9[0x0],r8
				}				
				break;
800042a8:	c3 a8       	rjmp	8000431c <update_leds+0x15c>
			case SD2:
				device_id_byte >>= 4;
800042aa:	4a 48       	lddpc	r8,80004338 <update_leds+0x178>
800042ac:	11 88       	ld.ub	r8,r8[0x0]
800042ae:	a5 88       	lsr	r8,0x4
800042b0:	5c 58       	castu.b	r8
800042b2:	4a 29       	lddpc	r9,80004338 <update_leds+0x178>
800042b4:	b2 88       	st.b	r9[0x0],r8
				if (device_id_byte & 0x03)
800042b6:	4a 18       	lddpc	r8,80004338 <update_leds+0x178>
800042b8:	11 88       	ld.ub	r8,r8[0x0]
800042ba:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800042be:	c2 e0       	breq	8000431a <update_leds+0x15a>
				{
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 6);
800042c0:	49 e8       	lddpc	r8,80004338 <update_leds+0x178>
800042c2:	11 88       	ld.ub	r8,r8[0x0]
800042c4:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800042c8:	2f a8       	sub	r8,-6
800042ca:	30 19       	mov	r9,1
800042cc:	f2 08 09 48 	lsl	r8,r9,r8
800042d0:	5c 58       	castu.b	r8
800042d2:	49 69       	lddpc	r9,80004328 <update_leds+0x168>
800042d4:	b2 88       	st.b	r9[0x0],r8
					led_on_time = 50;
800042d6:	49 39       	lddpc	r9,80004320 <update_leds+0x160>
800042d8:	33 28       	mov	r8,50
800042da:	b2 88       	st.b	r9[0x0],r8
					led_off_time = 10;					
800042dc:	49 29       	lddpc	r9,80004324 <update_leds+0x164>
800042de:	30 a8       	mov	r8,10
800042e0:	b2 88       	st.b	r9[0x0],r8
					current_bit_mask++;
800042e2:	49 58       	lddpc	r8,80004334 <update_leds+0x174>
800042e4:	11 88       	ld.ub	r8,r8[0x0]
800042e6:	2f f8       	sub	r8,-1
800042e8:	5c 58       	castu.b	r8
800042ea:	49 39       	lddpc	r9,80004334 <update_leds+0x174>
800042ec:	b2 88       	st.b	r9[0x0],r8
				}
				break;
800042ee:	c1 78       	rjmp	8000431c <update_leds+0x15c>
			default:
			{
				device_id_byte = Stored_values_ram.device_id_sequence[device_id_byte_index++];
800042f0:	49 38       	lddpc	r8,8000433c <update_leds+0x17c>
800042f2:	11 88       	ld.ub	r8,r8[0x0]
800042f4:	10 99       	mov	r9,r8
800042f6:	49 3a       	lddpc	r10,80004340 <update_leds+0x180>
800042f8:	f4 09 00 09 	add	r9,r10,r9
800042fc:	f3 39 00 80 	ld.ub	r9,r9[128]
80004300:	5c 59       	castu.b	r9
80004302:	48 ea       	lddpc	r10,80004338 <update_leds+0x178>
80004304:	b4 89       	st.b	r10[0x0],r9
80004306:	2f f8       	sub	r8,-1
80004308:	5c 58       	castu.b	r8
8000430a:	48 d9       	lddpc	r9,8000433c <update_leds+0x17c>
8000430c:	b2 88       	st.b	r9[0x0],r8
				current_bit_mask = SD1;
8000430e:	48 a9       	lddpc	r9,80004334 <update_leds+0x174>
80004310:	30 08       	mov	r8,0
80004312:	b2 88       	st.b	r9[0x0],r8
80004314:	c0 48       	rjmp	8000431c <update_leds+0x15c>
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 3);
					led_on_time = 50;
					led_off_time = 10;
					current_bit_mask++;
				}				
				break;
80004316:	d7 03       	nop
80004318:	c0 28       	rjmp	8000431c <update_leds+0x15c>
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 6);
					led_on_time = 50;
					led_off_time = 10;					
					current_bit_mask++;
				}
				break;
8000431a:	d7 03       	nop
				device_id_byte = Stored_values_ram.device_id_sequence[device_id_byte_index++];
				current_bit_mask = SD1;
			}
		}
	}
}
8000431c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004320:	00 00       	add	r0,r0
80004322:	04 05       	add	r5,r2
80004324:	00 00       	add	r0,r0
80004326:	04 06       	add	r6,r2
80004328:	00 00       	add	r0,r0
8000432a:	04 07       	add	r7,r2
8000432c:	80 00       	ld.sh	r0,r0[0x0]
8000432e:	47 08       	lddsp	r8,sp[0x1c0]
80004330:	80 00       	ld.sh	r0,r0[0x0]
80004332:	46 50       	lddsp	r0,sp[0x194]
80004334:	00 00       	add	r0,r0
80004336:	01 2f       	ld.uh	pc,r0++
80004338:	00 00       	add	r0,r0
8000433a:	04 08       	add	r8,r2
8000433c:	00 00       	add	r0,r0
8000433e:	04 09       	add	r9,r2
80004340:	00 00       	add	r0,r0
80004342:	0a 88       	andn	r8,r5

80004344 <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
static void tc_init(volatile avr32_tc_t *tc)
{
80004344:	eb cd 40 80 	pushm	r7,lr
80004348:	1a 97       	mov	r7,sp
8000434a:	20 2d       	sub	sp,8
8000434c:	ef 4c ff f8 	st.w	r7[-8],r12
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80004350:	49 0b       	lddpc	r11,80004390 <tc_init+0x4c>
80004352:	ee fc ff f8 	ld.w	r12,r7[-8]
80004356:	f0 1f 00 10 	mcall	80004394 <tc_init+0x50>
	 * Set the compare triggers.
	 * We configure it to count every 10 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 10 ms, hence RC = (fPBA / 8) / 100
	 * to get an interrupt every 10 ms.
	 */
	temp_value = tc_write_rc(tc, EXAMPLE_TC_CHANNEL, 20625 /*(sysclk_get_pba_hz() / 8 / 100)*/);
8000435a:	e0 6a 50 91 	mov	r10,20625
8000435e:	30 0b       	mov	r11,0
80004360:	ee fc ff f8 	ld.w	r12,r7[-8]
80004364:	f0 1f 00 0d 	mcall	80004398 <tc_init+0x54>
80004368:	18 98       	mov	r8,r12
8000436a:	5c 88       	casts.h	r8
8000436c:	5c 78       	castu.h	r8
8000436e:	ef 48 ff fc 	st.w	r7[-4],r8
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80004372:	48 ba       	lddpc	r10,8000439c <tc_init+0x58>
80004374:	30 0b       	mov	r11,0
80004376:	ee fc ff f8 	ld.w	r12,r7[-8]
8000437a:	f0 1f 00 0a 	mcall	800043a0 <tc_init+0x5c>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
8000437e:	30 0b       	mov	r11,0
80004380:	ee fc ff f8 	ld.w	r12,r7[-8]
80004384:	f0 1f 00 08 	mcall	800043a4 <tc_init+0x60>
}
80004388:	2f ed       	sub	sp,-8
8000438a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000438e:	00 00       	add	r0,r0
80004390:	80 00       	ld.sh	r0,r0[0x0]
80004392:	f1 40 80 00 	st.w	r8[-32768],r0
80004396:	9a 40       	ld.sh	r0,sp[0x8]
80004398:	80 00       	ld.sh	r0,r0[0x0]
8000439a:	9c 08       	ld.sh	r8,lr[0x0]
8000439c:	80 00       	ld.sh	r0,r0[0x0]
8000439e:	f1 48 80 00 	st.w	r8[-32768],r8
800043a2:	98 58       	ld.sh	r8,r12[0xa]
800043a4:	80 00       	ld.sh	r0,r0[0x0]
800043a6:	9b 94       	st.w	sp[0x24],r4

800043a8 <tc_task>:
 * - Register the TC interrupt
 * - Configure, enable the CPCS (RC compare match) interrupt,
 * - and start a TC channel in waveform mode
 */
void tc_task (void)
{
800043a8:	eb cd 40 80 	pushm	r7,lr
800043ac:	1a 97       	mov	r7,sp
800043ae:	20 1d       	sub	sp,4
	volatile avr32_tc_t *tc = EXAMPLE_TC;
800043b0:	fe 78 38 00 	mov	r8,-51200
800043b4:	ef 48 ff fc 	st.w	r7[-4],r8
	 * peripheral clocks, except for the peripheral clocks explicitly
	 * enabled in conf_clock.h.
	 */
	//sysclk_init();
	// Enable the clock to the selected example Timer/counter peripheral module.
	sysclk_enable_peripheral_clock(EXAMPLE_TC);
800043b8:	fe 7c 38 00 	mov	r12,-51200
800043bc:	f0 1f 00 0c 	mcall	800043ec <tc_task+0x44>
	// Disable the interrupts
	cpu_irq_disable();
800043c0:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	//INTC_init_interrupts();
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
800043c2:	30 0a       	mov	r10,0
800043c4:	e0 6b 01 c0 	mov	r11,448
800043c8:	48 ac       	lddpc	r12,800043f0 <tc_task+0x48>
800043ca:	f0 1f 00 0b 	mcall	800043f4 <tc_task+0x4c>
	// Enable the interrupts
	cpu_irq_enable();
800043ce:	d5 03       	csrf	0x10
	// Initialize the timer module
	tc_init(tc);
800043d0:	ee fc ff fc 	ld.w	r12,r7[-4]
800043d4:	f0 1f 00 09 	mcall	800043f8 <tc_task+0x50>
	// Initialize push buttons
	push_buttons_init();
800043d8:	f0 1f 00 09 	mcall	800043fc <tc_task+0x54>

    calculate_hash((uint32_t *)CipherKey256, 8, CipherKey256_hash);
800043dc:	48 9a       	lddpc	r10,80004400 <tc_task+0x58>
800043de:	30 8b       	mov	r11,8
800043e0:	48 9c       	lddpc	r12,80004404 <tc_task+0x5c>
800043e2:	f0 1f 00 0a 	mcall	80004408 <tc_task+0x60>
			 //*/
			 //// Reset the timer update flag to wait till next timer interrupt
			//update_timer = false;
		//}
	//}
}
800043e6:	2f fd       	sub	sp,-4
800043e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800043ec:	80 00       	ld.sh	r0,r0[0x0]
800043ee:	35 3c       	mov	r12,83
800043f0:	80 00       	ld.sh	r0,r0[0x0]
800043f2:	37 50       	mov	r0,117
800043f4:	80 00       	ld.sh	r0,r0[0x0]
800043f6:	93 18       	st.w	r9[0x4],r8
800043f8:	80 00       	ld.sh	r0,r0[0x0]
800043fa:	43 44       	lddsp	r4,sp[0xd0]
800043fc:	80 00       	ld.sh	r0,r0[0x0]
800043fe:	3b c4       	mov	r4,-68
80004400:	00 00       	add	r0,r0
80004402:	03 e0       	ld.ub	r0,r1[0x6]
80004404:	80 00       	ld.sh	r0,r0[0x0]
80004406:	f0 00       	*unknown*
80004408:	80 00       	ld.sh	r0,r0[0x0]
8000440a:	30 78       	mov	r8,7

8000440c <init_hmatrix>:


/*! \brief Initializes the HSB bus matrix.
 */
static void init_hmatrix(void)
{
8000440c:	eb cd 40 80 	pushm	r7,lr
80004410:	1a 97       	mov	r7,sp
80004412:	20 1d       	sub	sp,4
  // Set flashc master type to last default to save one cycle for
  // each branch.
  avr32_hmatrix_scfg_t scfg;

  scfg = AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH];
80004414:	fe 68 10 00 	mov	r8,-126976
80004418:	71 08       	ld.w	r8,r8[0x40]
8000441a:	ef 48 ff fc 	st.w	r7[-4],r8
  scfg.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
8000441e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004422:	30 19       	mov	r9,1
80004424:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
80004428:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH] = scfg;
8000442c:	fe 68 10 00 	mov	r8,-126976
80004430:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004434:	f1 49 00 40 	st.w	r8[64],r9
}
80004438:	2f fd       	sub	sp,-4
8000443a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000443e:	d7 03       	nop

80004440 <aes_task>:
 * 8N1.
 * Then it sets up the interrupt handler and waits for a USART interrupt to
 * trigger.
 */
void aes_task (void)
{
80004440:	eb cd 40 80 	pushm	r7,lr
80004444:	1a 97       	mov	r7,sp
  init_hmatrix();
80004446:	f0 1f 00 03 	mcall	80004450 <aes_task+0x10>
}
8000444a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000444e:	00 00       	add	r0,r0
80004450:	80 00       	ld.sh	r0,r0[0x0]
80004452:	44 0c       	lddsp	r12,sp[0x100]

80004454 <aes_init>:
	0x5A43D875,	// AES-CTR IV (BYTE2)
	0x00000001	// COUNTER
};

void aes_init (unsigned char Processing_Mode)
{
80004454:	eb cd 40 80 	pushm	r7,lr
80004458:	1a 97       	mov	r7,sp
8000445a:	20 3d       	sub	sp,12
8000445c:	18 98       	mov	r8,r12
8000445e:	ef 68 ff f4 	st.b	r7[-12],r8
	  aes_config_t    AesConf;        // AES config structure
	  // Configure the AES.
	  AesConf.ProcessingMode = Processing_Mode;   // Cipher
80004462:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004466:	ef 68 ff f8 	st.b	r7[-8],r8
	  AesConf.ProcessingDelay = 0;                // No delay: best performance
8000446a:	30 08       	mov	r8,0
8000446c:	ef 68 ff f9 	st.b	r7[-7],r8
	  AesConf.StartMode = AES_START_MODE_AUTO;    // Manual mode
80004470:	30 18       	mov	r8,1
80004472:	ef 68 ff fa 	st.b	r7[-6],r8
	  AesConf.KeySize = AES_KEY_SIZE_256;         // 256bit cryptographic key
80004476:	30 28       	mov	r8,2
80004478:	ef 68 ff fb 	st.b	r7[-5],r8
	  AesConf.OpMode = AES_CBC_MODE;              // CTR cipher mode
8000447c:	30 18       	mov	r8,1
8000447e:	ef 68 ff fc 	st.b	r7[-4],r8
	  AesConf.LodMode = 0;                        // LODMODE == 0 : the DATRDY flag
80004482:	30 08       	mov	r8,0
80004484:	ef 68 ff fd 	st.b	r7[-3],r8
	  // is cleared when one of the output data registers is read (because we're in
	  // manual mode).
	  AesConf.CFBSize = 0;                        // Don't-care because we're using the CTR mode.
80004488:	30 08       	mov	r8,0
8000448a:	ef 68 ff fe 	st.b	r7[-2],r8
	  AesConf.CounterMeasureMask = 0;             // Disable all counter measures.
8000448e:	30 08       	mov	r8,0
80004490:	ef 68 ff ff 	st.b	r7[-1],r8
	  aes_configure(&AVR32_AES, &AesConf);
80004494:	ee c8 00 08 	sub	r8,r7,8
80004498:	10 9b       	mov	r11,r8
8000449a:	fc 7c 00 00 	mov	r12,-196608
8000449e:	f0 1f 00 06 	mcall	800044b4 <aes_init+0x60>
	  aes_set_key(&AVR32_AES, CipherKey256);
800044a2:	48 6b       	lddpc	r11,800044b8 <aes_init+0x64>
800044a4:	fc 7c 00 00 	mov	r12,-196608
800044a8:	f0 1f 00 05 	mcall	800044bc <aes_init+0x68>

	  //ccountt0 = Get_system_register(AVR32_COUNT);
	  // Start encryption.
	  //aes_start(&AVR32_AES);

}
800044ac:	2f dd       	sub	sp,-12
800044ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800044b2:	00 00       	add	r0,r0
800044b4:	80 00       	ld.sh	r0,r0[0x0]
800044b6:	82 d4       	ld.uh	r4,r1[0xa]
800044b8:	80 00       	ld.sh	r0,r0[0x0]
800044ba:	f0 00       	*unknown*
800044bc:	80 00       	ld.sh	r0,r0[0x0]
800044be:	83 64       	st.w	r1[0x18],r4

800044c0 <apply_aes_encryption>:
uint32_t aes_out_data[128] = {0};

void apply_aes_encryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint32_t *aes_key, uint16_t len, uint32_t sector_id)
{
800044c0:	eb cd 40 80 	pushm	r7,lr
800044c4:	1a 97       	mov	r7,sp
800044c6:	20 7d       	sub	sp,28
800044c8:	ef 4c ff f4 	st.w	r7[-12],r12
800044cc:	ef 4b ff f0 	st.w	r7[-16],r11
800044d0:	ef 4a ff ec 	st.w	r7[-20],r10
800044d4:	ef 48 ff e4 	st.w	r7[-28],r8
800044d8:	12 98       	mov	r8,r9
800044da:	ef 58 ff e8 	st.h	r7[-24],r8
	uint8_t i, loop_counter;
	uint32_t temp;
	
	temp = aes_key[0];
800044de:	ee f8 ff ec 	ld.w	r8,r7[-20]
800044e2:	70 08       	ld.w	r8,r8[0x0]
800044e4:	ef 48 ff fc 	st.w	r7[-4],r8

	aes_key[0] = aes_key[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
800044e8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800044ec:	70 09       	ld.w	r9,r8[0x0]
800044ee:	ee f8 ff e4 	ld.w	r8,r7[-28]
800044f2:	10 59       	eor	r9,r8
800044f4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800044f8:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
							 
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);	
	aes_set_initvector(&AVR32_AES, (unsigned long int *)aes_key);	
800044fa:	ee fb ff ec 	ld.w	r11,r7[-20]
800044fe:	fc 7c 00 00 	mov	r12,-196608
80004502:	f0 1f 00 30 	mcall	800045c0 <apply_aes_encryption+0x100>
	
	aes_key[0] = temp;
80004506:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000450a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000450e:	91 09       	st.w	r8[0x0],r9
	
	loop_counter = len >> 2;
80004510:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80004514:	a3 88       	lsr	r8,0x2
80004516:	5c 88       	casts.h	r8
80004518:	ef 68 ff fb 	st.b	r7[-5],r8
		
	for (i = 0; i < loop_counter; i+=4)
8000451c:	30 08       	mov	r8,0
8000451e:	ef 68 ff fa 	st.b	r7[-6],r8
80004522:	c2 78       	rjmp	80004570 <apply_aes_encryption+0xb0>
	{
		aes_init(AES_PMODE_CIPHER);
80004524:	30 1c       	mov	r12,1
80004526:	f0 1f 00 28 	mcall	800045c4 <apply_aes_encryption+0x104>
			
		aes_write_inputdata(aes, &aes_in_data_t[i]);
8000452a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000452e:	a3 68       	lsl	r8,0x2
80004530:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004534:	f2 08 00 08 	add	r8,r9,r8
80004538:	10 9b       	mov	r11,r8
8000453a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000453e:	f0 1f 00 23 	mcall	800045c8 <apply_aes_encryption+0x108>

		while (!(aes->isr & 0x00000001));
80004542:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004546:	70 78       	ld.w	r8,r8[0x1c]
80004548:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000454c:	cf b0       	breq	80004542 <apply_aes_encryption+0x82>

		aes_read_outputdata(aes, &aes_out_data[i]);
8000454e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004552:	f0 09 15 02 	lsl	r9,r8,0x2
80004556:	49 e8       	lddpc	r8,800045cc <apply_aes_encryption+0x10c>
80004558:	f2 08 00 08 	add	r8,r9,r8
8000455c:	10 9b       	mov	r11,r8
8000455e:	ee fc ff f4 	ld.w	r12,r7[-12]
80004562:	f0 1f 00 1c 	mcall	800045d0 <apply_aes_encryption+0x110>
	
	aes_key[0] = temp;
	
	loop_counter = len >> 2;
		
	for (i = 0; i < loop_counter; i+=4)
80004566:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000456a:	2f c8       	sub	r8,-4
8000456c:	ef 68 ff fa 	st.b	r7[-6],r8
80004570:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80004574:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004578:	f0 09 18 00 	cp.b	r9,r8
8000457c:	cd 43       	brcs	80004524 <apply_aes_encryption+0x64>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
8000457e:	30 08       	mov	r8,0
80004580:	ef 68 ff fa 	st.b	r7[-6],r8
80004584:	c1 38       	rjmp	800045aa <apply_aes_encryption+0xea>
	{
		aes_in_data_t[i] = aes_out_data[i];
80004586:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000458a:	a3 68       	lsl	r8,0x2
8000458c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004590:	f2 08 00 08 	add	r8,r9,r8
80004594:	ef 3a ff fa 	ld.ub	r10,r7[-6]
80004598:	48 d9       	lddpc	r9,800045cc <apply_aes_encryption+0x10c>
8000459a:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000459e:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
800045a0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800045a4:	2f f8       	sub	r8,-1
800045a6:	ef 68 ff fa 	st.b	r7[-6],r8
800045aa:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800045ae:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800045b2:	f0 09 18 00 	cp.b	r9,r8
800045b6:	ce 83       	brcs	80004586 <apply_aes_encryption+0xc6>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
800045b8:	2f 9d       	sub	sp,-28
800045ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800045be:	00 00       	add	r0,r0
800045c0:	80 00       	ld.sh	r0,r0[0x0]
800045c2:	83 f2       	st.w	r1[0x3c],r2
800045c4:	80 00       	ld.sh	r0,r0[0x0]
800045c6:	44 54       	lddsp	r4,sp[0x114]
800045c8:	80 00       	ld.sh	r0,r0[0x0]
800045ca:	84 4e       	ld.sh	lr,r2[0x8]
800045cc:	00 00       	add	r0,r0
800045ce:	04 10       	sub	r0,r2
800045d0:	80 00       	ld.sh	r0,r0[0x0]
800045d2:	84 e6       	ld.uh	r6,r2[0xc]

800045d4 <board_init>:
800045d4:	eb cd 40 80 	pushm	r7,lr
800045d8:	1a 97       	mov	r7,sp
800045da:	30 3b       	mov	r11,3
800045dc:	34 3c       	mov	r12,67
800045de:	f0 1f 00 17 	mcall	80004638 <board_init+0x64>
800045e2:	30 3b       	mov	r11,3
800045e4:	36 5c       	mov	r12,101
800045e6:	f0 1f 00 15 	mcall	80004638 <board_init+0x64>
800045ea:	30 3b       	mov	r11,3
800045ec:	36 9c       	mov	r12,105
800045ee:	f0 1f 00 13 	mcall	80004638 <board_init+0x64>
800045f2:	30 3b       	mov	r11,3
800045f4:	36 6c       	mov	r12,102
800045f6:	f0 1f 00 11 	mcall	80004638 <board_init+0x64>
800045fa:	30 0b       	mov	r11,0
800045fc:	32 ac       	mov	r12,42
800045fe:	f0 1f 00 0f 	mcall	80004638 <board_init+0x64>
80004602:	30 4b       	mov	r11,4
80004604:	48 ec       	lddpc	r12,8000463c <board_init+0x68>
80004606:	f0 1f 00 0f 	mcall	80004640 <board_init+0x6c>
8000460a:	30 ab       	mov	r11,10
8000460c:	48 ec       	lddpc	r12,80004644 <board_init+0x70>
8000460e:	f0 1f 00 0d 	mcall	80004640 <board_init+0x6c>
80004612:	32 bc       	mov	r12,43
80004614:	f0 1f 00 0d 	mcall	80004648 <board_init+0x74>
80004618:	36 cc       	mov	r12,108
8000461a:	f0 1f 00 0c 	mcall	80004648 <board_init+0x74>
8000461e:	30 6b       	mov	r11,6
80004620:	48 bc       	lddpc	r12,8000464c <board_init+0x78>
80004622:	f0 1f 00 08 	mcall	80004640 <board_init+0x6c>
80004626:	32 8c       	mov	r12,40
80004628:	f0 1f 00 08 	mcall	80004648 <board_init+0x74>
8000462c:	32 6c       	mov	r12,38
8000462e:	f0 1f 00 07 	mcall	80004648 <board_init+0x74>
80004632:	e3 cd 80 80 	ldm	sp++,r7,pc
80004636:	00 00       	add	r0,r0
80004638:	80 00       	ld.sh	r0,r0[0x0]
8000463a:	8e d2       	ld.uh	r2,r7[0xa]
8000463c:	80 00       	ld.sh	r0,r0[0x0]
8000463e:	f1 4c 80 00 	st.w	r8[-32768],r12
80004642:	8c c4       	ld.uh	r4,r6[0x8]
80004644:	80 00       	ld.sh	r0,r0[0x0]
80004646:	f1 54 80 00 	st.h	r8[-32768],r4
8000464a:	8e 98       	ld.uh	r8,r7[0x2]
8000464c:	80 00       	ld.sh	r0,r0[0x0]
8000464e:	f1 68 eb cd 	st.b	r8[-5171],r8

80004650 <LED_Off>:
80004650:	eb cd 40 80 	pushm	r7,lr
80004654:	1a 97       	mov	r7,sp
80004656:	20 4d       	sub	sp,16
80004658:	ef 4c ff f0 	st.w	r7[-16],r12
8000465c:	4a 98       	lddpc	r8,80004700 <LED_Off+0xb0>
8000465e:	21 08       	sub	r8,16
80004660:	ef 48 ff f4 	st.w	r7[-12],r8
80004664:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004668:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000466c:	ef 48 ff f0 	st.w	r7[-16],r8
80004670:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004674:	f0 09 11 ff 	rsub	r9,r8,-1
80004678:	4a 38       	lddpc	r8,80004704 <LED_Off+0xb4>
8000467a:	70 08       	ld.w	r8,r8[0x0]
8000467c:	10 69       	and	r9,r8
8000467e:	4a 28       	lddpc	r8,80004704 <LED_Off+0xb4>
80004680:	91 09       	st.w	r8[0x0],r9
80004682:	c3 78       	rjmp	800046f0 <LED_Off+0xa0>
80004684:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004688:	5c 98       	brev	r8
8000468a:	f0 08 12 00 	clz	r8,r8
8000468e:	5c 58       	castu.b	r8
80004690:	2f f8       	sub	r8,-1
80004692:	ef 68 ff ff 	st.b	r7[-1],r8
80004696:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000469a:	a5 68       	lsl	r8,0x4
8000469c:	ee f9 ff f4 	ld.w	r9,r7[-12]
800046a0:	f2 08 00 08 	add	r8,r9,r8
800046a4:	ef 48 ff f4 	st.w	r7[-12],r8
800046a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046ac:	70 08       	ld.w	r8,r8[0x0]
800046ae:	a9 68       	lsl	r8,0x8
800046b0:	e0 28 f0 00 	sub	r8,61440
800046b4:	ef 48 ff f8 	st.w	r7[-8],r8
800046b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046bc:	70 19       	ld.w	r9,r8[0x4]
800046be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046c2:	f1 49 00 54 	st.w	r8[84],r9
800046c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046ca:	70 19       	ld.w	r9,r8[0x4]
800046cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046d0:	f1 49 00 44 	st.w	r8[68],r9
800046d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046d8:	70 19       	ld.w	r9,r8[0x4]
800046da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046de:	91 19       	st.w	r8[0x4],r9
800046e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800046e4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800046e8:	f2 08 0a 48 	lsr	r8,r9,r8
800046ec:	ef 48 ff f0 	st.w	r7[-16],r8
800046f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800046f4:	58 08       	cp.w	r8,0
800046f6:	cc 71       	brne	80004684 <LED_Off+0x34>
800046f8:	2f cd       	sub	sp,-16
800046fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800046fe:	00 00       	add	r0,r0
80004700:	80 00       	ld.sh	r0,r0[0x0]
80004702:	f1 74 00 00 	stcond	r8[0],r4
80004706:	01 30       	ld.ub	r0,r0++

80004708 <LED_On>:
80004708:	eb cd 40 80 	pushm	r7,lr
8000470c:	1a 97       	mov	r7,sp
8000470e:	20 4d       	sub	sp,16
80004710:	ef 4c ff f0 	st.w	r7[-16],r12
80004714:	4a 88       	lddpc	r8,800047b4 <LED_On+0xac>
80004716:	21 08       	sub	r8,16
80004718:	ef 48 ff f4 	st.w	r7[-12],r8
8000471c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004720:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004724:	ef 48 ff f0 	st.w	r7[-16],r8
80004728:	4a 48       	lddpc	r8,800047b8 <LED_On+0xb0>
8000472a:	70 09       	ld.w	r9,r8[0x0]
8000472c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004730:	10 49       	or	r9,r8
80004732:	4a 28       	lddpc	r8,800047b8 <LED_On+0xb0>
80004734:	91 09       	st.w	r8[0x0],r9
80004736:	c3 78       	rjmp	800047a4 <LED_On+0x9c>
80004738:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000473c:	5c 98       	brev	r8
8000473e:	f0 08 12 00 	clz	r8,r8
80004742:	5c 58       	castu.b	r8
80004744:	2f f8       	sub	r8,-1
80004746:	ef 68 ff ff 	st.b	r7[-1],r8
8000474a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000474e:	a5 68       	lsl	r8,0x4
80004750:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004754:	f2 08 00 08 	add	r8,r9,r8
80004758:	ef 48 ff f4 	st.w	r7[-12],r8
8000475c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004760:	70 08       	ld.w	r8,r8[0x0]
80004762:	a9 68       	lsl	r8,0x8
80004764:	e0 28 f0 00 	sub	r8,61440
80004768:	ef 48 ff f8 	st.w	r7[-8],r8
8000476c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004770:	70 19       	ld.w	r9,r8[0x4]
80004772:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004776:	f1 49 00 58 	st.w	r8[88],r9
8000477a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000477e:	70 19       	ld.w	r9,r8[0x4]
80004780:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004784:	f1 49 00 44 	st.w	r8[68],r9
80004788:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000478c:	70 19       	ld.w	r9,r8[0x4]
8000478e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004792:	91 19       	st.w	r8[0x4],r9
80004794:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004798:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000479c:	f2 08 0a 48 	lsr	r8,r9,r8
800047a0:	ef 48 ff f0 	st.w	r7[-16],r8
800047a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800047a8:	58 08       	cp.w	r8,0
800047aa:	cc 71       	brne	80004738 <LED_On+0x30>
800047ac:	2f cd       	sub	sp,-16
800047ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800047b2:	00 00       	add	r0,r0
800047b4:	80 00       	ld.sh	r0,r0[0x0]
800047b6:	f1 74 00 00 	stcond	r8[0],r4
800047ba:	01 30       	ld.ub	r0,r0++

800047bc <et024006_Init>:
800047bc:	eb cd 40 80 	pushm	r7,lr
800047c0:	1a 97       	mov	r7,sp
800047c2:	20 2d       	sub	sp,8
800047c4:	ef 4c ff fc 	st.w	r7[-4],r12
800047c8:	ef 4b ff f8 	st.w	r7[-8],r11
800047cc:	49 08       	lddpc	r8,8000480c <et024006_Init+0x50>
800047ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800047d2:	91 09       	st.w	r8[0x0],r9
800047d4:	48 e8       	lddpc	r8,8000480c <et024006_Init+0x50>
800047d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800047da:	91 19       	st.w	r8[0x4],r9
800047dc:	48 c8       	lddpc	r8,8000480c <et024006_Init+0x50>
800047de:	70 18       	ld.w	r8,r8[0x4]
800047e0:	10 9c       	mov	r12,r8
800047e2:	f0 1f 00 0c 	mcall	80004810 <et024006_Init+0x54>
800047e6:	f0 1f 00 0c 	mcall	80004814 <et024006_Init+0x58>
800047ea:	f0 1f 00 0c 	mcall	80004818 <et024006_Init+0x5c>
800047ee:	f0 1f 00 0c 	mcall	8000481c <et024006_Init+0x60>
800047f2:	f0 1f 00 0c 	mcall	80004820 <et024006_Init+0x64>
800047f6:	f0 1f 00 0c 	mcall	80004824 <et024006_Init+0x68>
800047fa:	f0 1f 00 0c 	mcall	80004828 <et024006_Init+0x6c>
800047fe:	f0 1f 00 0c 	mcall	8000482c <et024006_Init+0x70>
80004802:	f0 1f 00 0c 	mcall	80004830 <et024006_Init+0x74>
80004806:	2f ed       	sub	sp,-8
80004808:	e3 cd 80 80 	ldm	sp++,r7,pc
8000480c:	00 00       	add	r0,r0
8000480e:	06 10       	sub	r0,r3
80004810:	80 00       	ld.sh	r0,r0[0x0]
80004812:	85 80       	st.w	r2[0x20],r0
80004814:	80 00       	ld.sh	r0,r0[0x0]
80004816:	4f c0       	lddpc	r0,80004a04 <et024006_PrintString+0x148>
80004818:	80 00       	ld.sh	r0,r0[0x0]
8000481a:	4f ec       	lddpc	r12,80004a10 <et024006_PrintString+0x154>
8000481c:	80 00       	ld.sh	r0,r0[0x0]
8000481e:	52 ac       	stdsp	sp[0xa8],r12
80004820:	80 00       	ld.sh	r0,r0[0x0]
80004822:	54 3a       	stdsp	sp[0x10c],r10
80004824:	80 00       	ld.sh	r0,r0[0x0]
80004826:	57 d6       	stdsp	sp[0x1f4],r6
80004828:	80 00       	ld.sh	r0,r0[0x0]
8000482a:	56 48       	stdsp	sp[0x190],r8
8000482c:	80 00       	ld.sh	r0,r0[0x0]
8000482e:	58 04       	cp.w	r4,0
80004830:	80 00       	ld.sh	r0,r0[0x0]
80004832:	5f 38       	srlo	r8

80004834 <et024006_DrawFilledRect>:
80004834:	eb cd 40 80 	pushm	r7,lr
80004838:	1a 97       	mov	r7,sp
8000483a:	20 7d       	sub	sp,28
8000483c:	ef 5c ff f4 	st.h	r7[-12],r12
80004840:	ef 5b ff f0 	st.h	r7[-16],r11
80004844:	ef 5a ff ec 	st.h	r7[-20],r10
80004848:	ef 59 ff e8 	st.h	r7[-24],r9
8000484c:	ef 58 ff e4 	st.h	r7[-28],r8
80004850:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80004854:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80004858:	f2 08 00 08 	add	r8,r9,r8
8000485c:	5c 88       	casts.h	r8
8000485e:	20 18       	sub	r8,1
80004860:	ef 58 ff f8 	st.h	r7[-8],r8
80004864:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80004868:	ef 08 ff e8 	ld.sh	r8,r7[-24]
8000486c:	f2 08 00 08 	add	r8,r9,r8
80004870:	5c 88       	casts.h	r8
80004872:	20 18       	sub	r8,1
80004874:	ef 58 ff fa 	st.h	r7[-6],r8
80004878:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8000487c:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80004880:	ef 1b ff f0 	ld.uh	r11,r7[-16]
80004884:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80004888:	10 9c       	mov	r12,r8
8000488a:	f0 1f 00 0b 	mcall	800048b4 <et024006_DrawFilledRect+0x80>
8000488e:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80004892:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80004896:	f2 08 02 48 	mul	r8,r9,r8
8000489a:	ef 48 ff fc 	st.w	r7[-4],r8
8000489e:	ef 18 ff e4 	ld.uh	r8,r7[-28]
800048a2:	ee fb ff fc 	ld.w	r11,r7[-4]
800048a6:	10 9c       	mov	r12,r8
800048a8:	f0 1f 00 04 	mcall	800048b8 <et024006_DrawFilledRect+0x84>
800048ac:	2f 9d       	sub	sp,-28
800048ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800048b2:	00 00       	add	r0,r0
800048b4:	80 00       	ld.sh	r0,r0[0x0]
800048b6:	4c ba       	lddpc	r10,800049e0 <et024006_PrintString+0x124>
800048b8:	80 00       	ld.sh	r0,r0[0x0]
800048ba:	4f 14       	lddpc	r4,80004a7c <et024006_PrintString+0x1c0>

800048bc <et024006_PrintString>:
800048bc:	eb cd 40 c0 	pushm	r6-r7,lr
800048c0:	1a 97       	mov	r7,sp
800048c2:	20 9d       	sub	sp,36
800048c4:	ee c6 ff f4 	sub	r6,r7,-12
800048c8:	ef 4c ff ec 	st.w	r7[-20],r12
800048cc:	ef 4b ff e8 	st.w	r7[-24],r11
800048d0:	ef 5a ff e4 	st.h	r7[-28],r10
800048d4:	ef 59 ff e0 	st.h	r7[-32],r9
800048d8:	ef 58 ff dc 	st.h	r7[-36],r8
800048dc:	30 08       	mov	r8,0
800048de:	ef 68 ff f4 	st.b	r7[-12],r8
800048e2:	ef 08 ff e4 	ld.sh	r8,r7[-28]
800048e6:	ef 58 ff fc 	st.h	r7[-4],r8
800048ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
800048ee:	11 88       	ld.ub	r8,r8[0x0]
800048f0:	58 08       	cp.w	r8,0
800048f2:	e0 80 01 a4 	breq	80004c3a <et024006_PrintString+0x37e>
800048f6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800048fa:	ef 48 ff f8 	st.w	r7[-8],r8
800048fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004902:	11 88       	ld.ub	r8,r8[0x0]
80004904:	ef 68 ff f5 	st.b	r7[-11],r8
80004908:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000490c:	2f f8       	sub	r8,-1
8000490e:	ef 48 ff f8 	st.w	r7[-8],r8
80004912:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004916:	11 88       	ld.ub	r8,r8[0x0]
80004918:	ef 68 ff f6 	st.b	r7[-10],r8
8000491c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004920:	2f f8       	sub	r8,-1
80004922:	ef 48 ff f8 	st.w	r7[-8],r8
80004926:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000492a:	11 88       	ld.ub	r8,r8[0x0]
8000492c:	ef 68 ff f7 	st.b	r7[-9],r8
80004930:	6c 08       	ld.w	r8,r6[0x0]
80004932:	5b f8       	cp.w	r8,-1
80004934:	e0 81 00 c8 	brne	80004ac4 <et024006_PrintString+0x208>
80004938:	e0 69 00 ef 	mov	r9,239
8000493c:	e0 6a 01 3f 	mov	r10,319
80004940:	30 0b       	mov	r11,0
80004942:	30 0c       	mov	r12,0
80004944:	f0 1f 00 c0 	mcall	80004c44 <et024006_PrintString+0x388>
80004948:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000494c:	11 89       	ld.ub	r9,r8[0x0]
8000494e:	30 a8       	mov	r8,10
80004950:	f0 09 18 00 	cp.b	r9,r8
80004954:	c1 31       	brne	8000497a <et024006_PrintString+0xbe>
80004956:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000495a:	ef 58 ff e4 	st.h	r7[-28],r8
8000495e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004962:	ef 09 ff e0 	ld.sh	r9,r7[-32]
80004966:	f2 08 00 08 	add	r8,r9,r8
8000496a:	ef 58 ff e0 	st.h	r7[-32],r8
8000496e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004972:	2f f8       	sub	r8,-1
80004974:	ef 48 ff ec 	st.w	r7[-20],r8
80004978:	c9 f8       	rjmp	80004ab6 <et024006_PrintString+0x1fa>
8000497a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000497e:	11 89       	ld.ub	r9,r8[0x0]
80004980:	30 98       	mov	r8,9
80004982:	f0 09 18 00 	cp.b	r9,r8
80004986:	c0 f1       	brne	800049a4 <et024006_PrintString+0xe8>
80004988:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000498c:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004990:	f2 08 00 08 	add	r8,r9,r8
80004994:	ef 58 ff e4 	st.h	r7[-28],r8
80004998:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000499c:	2f f8       	sub	r8,-1
8000499e:	ef 48 ff ec 	st.w	r7[-20],r8
800049a2:	c8 a8       	rjmp	80004ab6 <et024006_PrintString+0x1fa>
800049a4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800049a8:	11 89       	ld.ub	r9,r8[0x0]
800049aa:	31 f8       	mov	r8,31
800049ac:	f0 09 18 00 	cp.b	r9,r8
800049b0:	e0 88 00 1d 	brls	800049ea <et024006_PrintString+0x12e>
800049b4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800049b8:	11 88       	ld.ub	r8,r8[0x0]
800049ba:	10 99       	mov	r9,r8
800049bc:	30 08       	mov	r8,0
800049be:	f0 09 18 00 	cp.b	r9,r8
800049c2:	c1 45       	brlt	800049ea <et024006_PrintString+0x12e>
800049c4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800049c8:	ef 3a ff f7 	ld.ub	r10,r7[-9]
800049cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800049d0:	11 88       	ld.ub	r8,r8[0x0]
800049d2:	22 08       	sub	r8,32
800049d4:	f4 08 02 48 	mul	r8,r10,r8
800049d8:	f2 08 00 08 	add	r8,r9,r8
800049dc:	ee f9 ff e8 	ld.w	r9,r7[-24]
800049e0:	f2 08 00 08 	add	r8,r9,r8
800049e4:	ef 48 ff f8 	st.w	r7[-8],r8
800049e8:	c1 28       	rjmp	80004a0c <et024006_PrintString+0x150>
800049ea:	ef 3a ff f7 	ld.ub	r10,r7[-9]
800049ee:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800049f2:	12 98       	mov	r8,r9
800049f4:	a1 78       	lsl	r8,0x1
800049f6:	12 08       	add	r8,r9
800049f8:	a5 78       	lsl	r8,0x5
800049fa:	12 18       	sub	r8,r9
800049fc:	f4 08 00 08 	add	r8,r10,r8
80004a00:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004a04:	f2 08 00 08 	add	r8,r9,r8
80004a08:	ef 48 ff f8 	st.w	r7[-8],r8
80004a0c:	ef 08 ff e0 	ld.sh	r8,r7[-32]
80004a10:	ef 58 ff f0 	st.h	r7[-16],r8
80004a14:	c3 a8       	rjmp	80004a88 <et024006_PrintString+0x1cc>
80004a16:	38 08       	mov	r8,-128
80004a18:	ef 68 ff f4 	st.b	r7[-12],r8
80004a1c:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80004a20:	ef 58 ff f2 	st.h	r7[-14],r8
80004a24:	c1 e8       	rjmp	80004a60 <et024006_PrintString+0x1a4>
80004a26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a2a:	11 89       	ld.ub	r9,r8[0x0]
80004a2c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004a30:	f3 e8 00 08 	and	r8,r9,r8
80004a34:	5c 58       	castu.b	r8
80004a36:	c0 b0       	breq	80004a4c <et024006_PrintString+0x190>
80004a38:	ef 1a ff dc 	ld.uh	r10,r7[-36]
80004a3c:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80004a40:	ef 18 ff f2 	ld.uh	r8,r7[-14]
80004a44:	12 9b       	mov	r11,r9
80004a46:	10 9c       	mov	r12,r8
80004a48:	f0 1f 00 80 	mcall	80004c48 <et024006_PrintString+0x38c>
80004a4c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004a50:	a1 98       	lsr	r8,0x1
80004a52:	ef 68 ff f4 	st.b	r7[-12],r8
80004a56:	ef 08 ff f2 	ld.sh	r8,r7[-14]
80004a5a:	2f f8       	sub	r8,-1
80004a5c:	ef 58 ff f2 	st.h	r7[-14],r8
80004a60:	ef 19 ff f2 	ld.uh	r9,r7[-14]
80004a64:	ef 1a ff e4 	ld.uh	r10,r7[-28]
80004a68:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004a6c:	f4 08 00 08 	add	r8,r10,r8
80004a70:	10 39       	cp.w	r9,r8
80004a72:	cd a5       	brlt	80004a26 <et024006_PrintString+0x16a>
80004a74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a78:	2f f8       	sub	r8,-1
80004a7a:	ef 48 ff f8 	st.w	r7[-8],r8
80004a7e:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004a82:	2f f8       	sub	r8,-1
80004a84:	ef 58 ff f0 	st.h	r7[-16],r8
80004a88:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80004a8c:	ef 1a ff e0 	ld.uh	r10,r7[-32]
80004a90:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004a94:	f4 08 00 08 	add	r8,r10,r8
80004a98:	10 39       	cp.w	r9,r8
80004a9a:	cb e5       	brlt	80004a16 <et024006_PrintString+0x15a>
80004a9c:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004aa0:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004aa4:	f2 08 00 08 	add	r8,r9,r8
80004aa8:	ef 58 ff e4 	st.h	r7[-28],r8
80004aac:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004ab0:	2f f8       	sub	r8,-1
80004ab2:	ef 48 ff ec 	st.w	r7[-20],r8
80004ab6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004aba:	11 88       	ld.ub	r8,r8[0x0]
80004abc:	58 08       	cp.w	r8,0
80004abe:	fe 91 ff 45 	brne	80004948 <et024006_PrintString+0x8c>
80004ac2:	cb d8       	rjmp	80004c3c <et024006_PrintString+0x380>
80004ac4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004ac8:	11 89       	ld.ub	r9,r8[0x0]
80004aca:	30 a8       	mov	r8,10
80004acc:	f0 09 18 00 	cp.b	r9,r8
80004ad0:	c1 31       	brne	80004af6 <et024006_PrintString+0x23a>
80004ad2:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80004ad6:	ef 58 ff e4 	st.h	r7[-28],r8
80004ada:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004ade:	ef 09 ff e0 	ld.sh	r9,r7[-32]
80004ae2:	f2 08 00 08 	add	r8,r9,r8
80004ae6:	ef 58 ff e0 	st.h	r7[-32],r8
80004aea:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004aee:	2f f8       	sub	r8,-1
80004af0:	ef 48 ff ec 	st.w	r7[-20],r8
80004af4:	c9 c8       	rjmp	80004c2c <et024006_PrintString+0x370>
80004af6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004afa:	11 89       	ld.ub	r9,r8[0x0]
80004afc:	30 98       	mov	r8,9
80004afe:	f0 09 18 00 	cp.b	r9,r8
80004b02:	c0 f1       	brne	80004b20 <et024006_PrintString+0x264>
80004b04:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004b08:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004b0c:	f2 08 00 08 	add	r8,r9,r8
80004b10:	ef 58 ff e4 	st.h	r7[-28],r8
80004b14:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004b18:	2f f8       	sub	r8,-1
80004b1a:	ef 48 ff ec 	st.w	r7[-20],r8
80004b1e:	c8 78       	rjmp	80004c2c <et024006_PrintString+0x370>
80004b20:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80004b24:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80004b28:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004b2c:	11 88       	ld.ub	r8,r8[0x0]
80004b2e:	22 08       	sub	r8,32
80004b30:	f4 08 02 48 	mul	r8,r10,r8
80004b34:	f2 08 00 08 	add	r8,r9,r8
80004b38:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004b3c:	f2 08 00 08 	add	r8,r9,r8
80004b40:	ef 48 ff f8 	st.w	r7[-8],r8
80004b44:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004b48:	ef 09 ff e0 	ld.sh	r9,r7[-32]
80004b4c:	f2 08 00 08 	add	r8,r9,r8
80004b50:	5c 88       	casts.h	r8
80004b52:	20 18       	sub	r8,1
80004b54:	5c 88       	casts.h	r8
80004b56:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
80004b5a:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004b5e:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004b62:	f2 08 00 08 	add	r8,r9,r8
80004b66:	5c 88       	casts.h	r8
80004b68:	20 18       	sub	r8,1
80004b6a:	5c 88       	casts.h	r8
80004b6c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80004b70:	ef 1b ff e0 	ld.uh	r11,r7[-32]
80004b74:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80004b78:	18 99       	mov	r9,r12
80004b7a:	10 9c       	mov	r12,r8
80004b7c:	f0 1f 00 32 	mcall	80004c44 <et024006_PrintString+0x388>
80004b80:	32 28       	mov	r8,34
80004b82:	ef 68 ff ff 	st.b	r7[-1],r8
80004b86:	fc 19 c0 00 	movh	r9,0xc000
80004b8a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004b8e:	b2 08       	st.h	r9[0x0],r8
80004b90:	30 08       	mov	r8,0
80004b92:	ef 58 ff f0 	st.h	r7[-16],r8
80004b96:	c3 78       	rjmp	80004c04 <et024006_PrintString+0x348>
80004b98:	38 08       	mov	r8,-128
80004b9a:	ef 68 ff f4 	st.b	r7[-12],r8
80004b9e:	30 08       	mov	r8,0
80004ba0:	ef 58 ff f2 	st.h	r7[-14],r8
80004ba4:	c1 f8       	rjmp	80004be2 <et024006_PrintString+0x326>
80004ba6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004baa:	11 89       	ld.ub	r9,r8[0x0]
80004bac:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004bb0:	f3 e8 00 08 	and	r8,r9,r8
80004bb4:	5c 58       	castu.b	r8
80004bb6:	c0 70       	breq	80004bc4 <et024006_PrintString+0x308>
80004bb8:	fc 19 c0 20 	movh	r9,0xc020
80004bbc:	ef 08 ff dc 	ld.sh	r8,r7[-36]
80004bc0:	b2 08       	st.h	r9[0x0],r8
80004bc2:	c0 68       	rjmp	80004bce <et024006_PrintString+0x312>
80004bc4:	fc 19 c0 20 	movh	r9,0xc020
80004bc8:	6c 08       	ld.w	r8,r6[0x0]
80004bca:	5c 88       	casts.h	r8
80004bcc:	b2 08       	st.h	r9[0x0],r8
80004bce:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004bd2:	a1 98       	lsr	r8,0x1
80004bd4:	ef 68 ff f4 	st.b	r7[-12],r8
80004bd8:	ef 08 ff f2 	ld.sh	r8,r7[-14]
80004bdc:	2f f8       	sub	r8,-1
80004bde:	ef 58 ff f2 	st.h	r7[-14],r8
80004be2:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004be6:	ef 09 ff f2 	ld.sh	r9,r7[-14]
80004bea:	f0 09 19 00 	cp.h	r9,r8
80004bee:	cd c3       	brcs	80004ba6 <et024006_PrintString+0x2ea>
80004bf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004bf4:	2f f8       	sub	r8,-1
80004bf6:	ef 48 ff f8 	st.w	r7[-8],r8
80004bfa:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004bfe:	2f f8       	sub	r8,-1
80004c00:	ef 58 ff f0 	st.h	r7[-16],r8
80004c04:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004c08:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80004c0c:	f0 09 19 00 	cp.h	r9,r8
80004c10:	cc 43       	brcs	80004b98 <et024006_PrintString+0x2dc>
80004c12:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004c16:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004c1a:	f2 08 00 08 	add	r8,r9,r8
80004c1e:	ef 58 ff e4 	st.h	r7[-28],r8
80004c22:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004c26:	2f f8       	sub	r8,-1
80004c28:	ef 48 ff ec 	st.w	r7[-20],r8
80004c2c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004c30:	11 88       	ld.ub	r8,r8[0x0]
80004c32:	58 08       	cp.w	r8,0
80004c34:	fe 91 ff 48 	brne	80004ac4 <et024006_PrintString+0x208>
80004c38:	c0 28       	rjmp	80004c3c <et024006_PrintString+0x380>
80004c3a:	d7 03       	nop
80004c3c:	2f 7d       	sub	sp,-36
80004c3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004c42:	00 00       	add	r0,r0
80004c44:	80 00       	ld.sh	r0,r0[0x0]
80004c46:	4c ba       	lddpc	r10,80004d70 <et024006_SetLimits+0xb6>
80004c48:	80 00       	ld.sh	r0,r0[0x0]
80004c4a:	4e c4       	lddpc	r4,80004df8 <et024006_SetLimits+0x13e>

80004c4c <et024006_SetRegister>:
80004c4c:	eb cd 40 80 	pushm	r7,lr
80004c50:	1a 97       	mov	r7,sp
80004c52:	20 3d       	sub	sp,12
80004c54:	18 99       	mov	r9,r12
80004c56:	16 98       	mov	r8,r11
80004c58:	ef 69 ff f8 	st.b	r7[-8],r9
80004c5c:	ef 68 ff f4 	st.b	r7[-12],r8
80004c60:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004c64:	ef 68 ff fd 	st.b	r7[-3],r8
80004c68:	fc 19 c0 00 	movh	r9,0xc000
80004c6c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004c70:	b2 08       	st.h	r9[0x0],r8
80004c72:	fc 18 c0 20 	movh	r8,0xc020
80004c76:	90 08       	ld.sh	r8,r8[0x0]
80004c78:	5c 88       	casts.h	r8
80004c7a:	5c 58       	castu.b	r8
80004c7c:	ef 68 ff fc 	st.b	r7[-4],r8
80004c80:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004c84:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004c88:	f3 e8 10 08 	or	r8,r9,r8
80004c8c:	ef 68 ff fc 	st.b	r7[-4],r8
80004c90:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004c94:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80004c98:	ef 69 ff ff 	st.b	r7[-1],r9
80004c9c:	ef 68 ff fe 	st.b	r7[-2],r8
80004ca0:	fc 19 c0 00 	movh	r9,0xc000
80004ca4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004ca8:	b2 08       	st.h	r9[0x0],r8
80004caa:	fc 19 c0 20 	movh	r9,0xc020
80004cae:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004cb2:	b2 08       	st.h	r9[0x0],r8
80004cb4:	2f dd       	sub	sp,-12
80004cb6:	e3 cd 80 80 	ldm	sp++,r7,pc

80004cba <et024006_SetLimits>:
80004cba:	eb cd 40 80 	pushm	r7,lr
80004cbe:	1a 97       	mov	r7,sp
80004cc0:	20 8d       	sub	sp,32
80004cc2:	12 98       	mov	r8,r9
80004cc4:	18 99       	mov	r9,r12
80004cc6:	ef 59 ff ec 	st.h	r7[-20],r9
80004cca:	16 99       	mov	r9,r11
80004ccc:	ef 59 ff e8 	st.h	r7[-24],r9
80004cd0:	14 99       	mov	r9,r10
80004cd2:	ef 59 ff e4 	st.h	r7[-28],r9
80004cd6:	ef 58 ff e0 	st.h	r7[-32],r8
80004cda:	ef 18 ff ec 	ld.uh	r8,r7[-20]
80004cde:	a9 88       	lsr	r8,0x8
80004ce0:	5c 88       	casts.h	r8
80004ce2:	5c 58       	castu.b	r8
80004ce4:	30 29       	mov	r9,2
80004ce6:	ef 69 ff f1 	st.b	r7[-15],r9
80004cea:	ef 68 ff f0 	st.b	r7[-16],r8
80004cee:	fc 19 c0 00 	movh	r9,0xc000
80004cf2:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80004cf6:	b2 08       	st.h	r9[0x0],r8
80004cf8:	fc 19 c0 20 	movh	r9,0xc020
80004cfc:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80004d00:	b2 08       	st.h	r9[0x0],r8
80004d02:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80004d06:	5c 58       	castu.b	r8
80004d08:	30 39       	mov	r9,3
80004d0a:	ef 69 ff f3 	st.b	r7[-13],r9
80004d0e:	ef 68 ff f2 	st.b	r7[-14],r8
80004d12:	fc 19 c0 00 	movh	r9,0xc000
80004d16:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80004d1a:	b2 08       	st.h	r9[0x0],r8
80004d1c:	fc 19 c0 20 	movh	r9,0xc020
80004d20:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80004d24:	b2 08       	st.h	r9[0x0],r8
80004d26:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80004d2a:	a9 88       	lsr	r8,0x8
80004d2c:	5c 88       	casts.h	r8
80004d2e:	5c 58       	castu.b	r8
80004d30:	30 49       	mov	r9,4
80004d32:	ef 69 ff f5 	st.b	r7[-11],r9
80004d36:	ef 68 ff f4 	st.b	r7[-12],r8
80004d3a:	fc 19 c0 00 	movh	r9,0xc000
80004d3e:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004d42:	b2 08       	st.h	r9[0x0],r8
80004d44:	fc 19 c0 20 	movh	r9,0xc020
80004d48:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004d4c:	b2 08       	st.h	r9[0x0],r8
80004d4e:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80004d52:	5c 58       	castu.b	r8
80004d54:	30 59       	mov	r9,5
80004d56:	ef 69 ff f7 	st.b	r7[-9],r9
80004d5a:	ef 68 ff f6 	st.b	r7[-10],r8
80004d5e:	fc 19 c0 00 	movh	r9,0xc000
80004d62:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004d66:	b2 08       	st.h	r9[0x0],r8
80004d68:	fc 19 c0 20 	movh	r9,0xc020
80004d6c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004d70:	b2 08       	st.h	r9[0x0],r8
80004d72:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80004d76:	a9 88       	lsr	r8,0x8
80004d78:	5c 88       	casts.h	r8
80004d7a:	5c 58       	castu.b	r8
80004d7c:	30 69       	mov	r9,6
80004d7e:	ef 69 ff f9 	st.b	r7[-7],r9
80004d82:	ef 68 ff f8 	st.b	r7[-8],r8
80004d86:	fc 19 c0 00 	movh	r9,0xc000
80004d8a:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004d8e:	b2 08       	st.h	r9[0x0],r8
80004d90:	fc 19 c0 20 	movh	r9,0xc020
80004d94:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004d98:	b2 08       	st.h	r9[0x0],r8
80004d9a:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80004d9e:	5c 58       	castu.b	r8
80004da0:	30 79       	mov	r9,7
80004da2:	ef 69 ff fb 	st.b	r7[-5],r9
80004da6:	ef 68 ff fa 	st.b	r7[-6],r8
80004daa:	fc 19 c0 00 	movh	r9,0xc000
80004dae:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004db2:	b2 08       	st.h	r9[0x0],r8
80004db4:	fc 19 c0 20 	movh	r9,0xc020
80004db8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004dbc:	b2 08       	st.h	r9[0x0],r8
80004dbe:	ef 18 ff e0 	ld.uh	r8,r7[-32]
80004dc2:	a9 88       	lsr	r8,0x8
80004dc4:	5c 88       	casts.h	r8
80004dc6:	5c 58       	castu.b	r8
80004dc8:	30 89       	mov	r9,8
80004dca:	ef 69 ff fd 	st.b	r7[-3],r9
80004dce:	ef 68 ff fc 	st.b	r7[-4],r8
80004dd2:	fc 19 c0 00 	movh	r9,0xc000
80004dd6:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004dda:	b2 08       	st.h	r9[0x0],r8
80004ddc:	fc 19 c0 20 	movh	r9,0xc020
80004de0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004de4:	b2 08       	st.h	r9[0x0],r8
80004de6:	ef 08 ff e0 	ld.sh	r8,r7[-32]
80004dea:	5c 58       	castu.b	r8
80004dec:	30 99       	mov	r9,9
80004dee:	ef 69 ff ff 	st.b	r7[-1],r9
80004df2:	ef 68 ff fe 	st.b	r7[-2],r8
80004df6:	fc 19 c0 00 	movh	r9,0xc000
80004dfa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004dfe:	b2 08       	st.h	r9[0x0],r8
80004e00:	fc 19 c0 20 	movh	r9,0xc020
80004e04:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004e08:	b2 08       	st.h	r9[0x0],r8
80004e0a:	2f 8d       	sub	sp,-32
80004e0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004e10 <et024006_SetQuickLimits>:
80004e10:	eb cd 40 80 	pushm	r7,lr
80004e14:	1a 97       	mov	r7,sp
80004e16:	20 4d       	sub	sp,16
80004e18:	18 99       	mov	r9,r12
80004e1a:	16 98       	mov	r8,r11
80004e1c:	ef 59 ff f4 	st.h	r7[-12],r9
80004e20:	ef 58 ff f0 	st.h	r7[-16],r8
80004e24:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80004e28:	a9 88       	lsr	r8,0x8
80004e2a:	5c 88       	casts.h	r8
80004e2c:	5c 58       	castu.b	r8
80004e2e:	30 29       	mov	r9,2
80004e30:	ef 69 ff f9 	st.b	r7[-7],r9
80004e34:	ef 68 ff f8 	st.b	r7[-8],r8
80004e38:	fc 19 c0 00 	movh	r9,0xc000
80004e3c:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004e40:	b2 08       	st.h	r9[0x0],r8
80004e42:	fc 19 c0 20 	movh	r9,0xc020
80004e46:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004e4a:	b2 08       	st.h	r9[0x0],r8
80004e4c:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80004e50:	5c 58       	castu.b	r8
80004e52:	30 39       	mov	r9,3
80004e54:	ef 69 ff fb 	st.b	r7[-5],r9
80004e58:	ef 68 ff fa 	st.b	r7[-6],r8
80004e5c:	fc 19 c0 00 	movh	r9,0xc000
80004e60:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004e64:	b2 08       	st.h	r9[0x0],r8
80004e66:	fc 19 c0 20 	movh	r9,0xc020
80004e6a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004e6e:	b2 08       	st.h	r9[0x0],r8
80004e70:	ef 18 ff f0 	ld.uh	r8,r7[-16]
80004e74:	a9 88       	lsr	r8,0x8
80004e76:	5c 88       	casts.h	r8
80004e78:	5c 58       	castu.b	r8
80004e7a:	30 69       	mov	r9,6
80004e7c:	ef 69 ff fd 	st.b	r7[-3],r9
80004e80:	ef 68 ff fc 	st.b	r7[-4],r8
80004e84:	fc 19 c0 00 	movh	r9,0xc000
80004e88:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004e8c:	b2 08       	st.h	r9[0x0],r8
80004e8e:	fc 19 c0 20 	movh	r9,0xc020
80004e92:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004e96:	b2 08       	st.h	r9[0x0],r8
80004e98:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004e9c:	5c 58       	castu.b	r8
80004e9e:	30 79       	mov	r9,7
80004ea0:	ef 69 ff ff 	st.b	r7[-1],r9
80004ea4:	ef 68 ff fe 	st.b	r7[-2],r8
80004ea8:	fc 19 c0 00 	movh	r9,0xc000
80004eac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004eb0:	b2 08       	st.h	r9[0x0],r8
80004eb2:	fc 19 c0 20 	movh	r9,0xc020
80004eb6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004eba:	b2 08       	st.h	r9[0x0],r8
80004ebc:	2f cd       	sub	sp,-16
80004ebe:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ec2:	d7 03       	nop

80004ec4 <et024006_DrawQuickPixel>:
80004ec4:	eb cd 40 80 	pushm	r7,lr
80004ec8:	1a 97       	mov	r7,sp
80004eca:	20 4d       	sub	sp,16
80004ecc:	16 99       	mov	r9,r11
80004ece:	14 98       	mov	r8,r10
80004ed0:	18 9a       	mov	r10,r12
80004ed2:	ef 5a ff f8 	st.h	r7[-8],r10
80004ed6:	ef 59 ff f4 	st.h	r7[-12],r9
80004eda:	ef 58 ff f0 	st.h	r7[-16],r8
80004ede:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80004ee2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80004ee6:	12 9b       	mov	r11,r9
80004ee8:	10 9c       	mov	r12,r8
80004eea:	f0 1f 00 0a 	mcall	80004f10 <et024006_DrawQuickPixel+0x4c>
80004eee:	32 28       	mov	r8,34
80004ef0:	ef 68 ff ff 	st.b	r7[-1],r8
80004ef4:	fc 19 c0 00 	movh	r9,0xc000
80004ef8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004efc:	b2 08       	st.h	r9[0x0],r8
80004efe:	fc 19 c0 20 	movh	r9,0xc020
80004f02:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004f06:	b2 08       	st.h	r9[0x0],r8
80004f08:	2f cd       	sub	sp,-16
80004f0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f0e:	00 00       	add	r0,r0
80004f10:	80 00       	ld.sh	r0,r0[0x0]
80004f12:	4e 10       	lddpc	r0,80005094 <et024006_ResetDisplay+0xa8>

80004f14 <et024006_DuplicatePixel>:
80004f14:	eb cd 40 80 	pushm	r7,lr
80004f18:	1a 97       	mov	r7,sp
80004f1a:	20 3d       	sub	sp,12
80004f1c:	18 98       	mov	r8,r12
80004f1e:	ef 4b ff f4 	st.w	r7[-12],r11
80004f22:	ef 58 ff f8 	st.h	r7[-8],r8
80004f26:	32 28       	mov	r8,34
80004f28:	ef 68 ff ff 	st.b	r7[-1],r8
80004f2c:	fc 19 c0 00 	movh	r9,0xc000
80004f30:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004f34:	b2 08       	st.h	r9[0x0],r8
80004f36:	c2 e8       	rjmp	80004f92 <et024006_DuplicatePixel+0x7e>
80004f38:	fc 19 c0 20 	movh	r9,0xc020
80004f3c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004f40:	b2 08       	st.h	r9[0x0],r8
80004f42:	fc 19 c0 20 	movh	r9,0xc020
80004f46:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004f4a:	b2 08       	st.h	r9[0x0],r8
80004f4c:	fc 19 c0 20 	movh	r9,0xc020
80004f50:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004f54:	b2 08       	st.h	r9[0x0],r8
80004f56:	fc 19 c0 20 	movh	r9,0xc020
80004f5a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004f5e:	b2 08       	st.h	r9[0x0],r8
80004f60:	fc 19 c0 20 	movh	r9,0xc020
80004f64:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004f68:	b2 08       	st.h	r9[0x0],r8
80004f6a:	fc 19 c0 20 	movh	r9,0xc020
80004f6e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004f72:	b2 08       	st.h	r9[0x0],r8
80004f74:	fc 19 c0 20 	movh	r9,0xc020
80004f78:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004f7c:	b2 08       	st.h	r9[0x0],r8
80004f7e:	fc 19 c0 20 	movh	r9,0xc020
80004f82:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004f86:	b2 08       	st.h	r9[0x0],r8
80004f88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004f8c:	20 88       	sub	r8,8
80004f8e:	ef 48 ff f4 	st.w	r7[-12],r8
80004f92:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004f96:	58 78       	cp.w	r8,7
80004f98:	fe 9b ff d0 	brhi	80004f38 <et024006_DuplicatePixel+0x24>
80004f9c:	c0 b8       	rjmp	80004fb2 <et024006_DuplicatePixel+0x9e>
80004f9e:	fc 19 c0 20 	movh	r9,0xc020
80004fa2:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004fa6:	b2 08       	st.h	r9[0x0],r8
80004fa8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004fac:	20 18       	sub	r8,1
80004fae:	ef 48 ff f4 	st.w	r7[-12],r8
80004fb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004fb6:	58 08       	cp.w	r8,0
80004fb8:	cf 31       	brne	80004f9e <et024006_DuplicatePixel+0x8a>
80004fba:	2f dd       	sub	sp,-12
80004fbc:	e3 cd 80 80 	ldm	sp++,r7,pc

80004fc0 <et024006_SetupInterface>:
80004fc0:	eb cd 40 80 	pushm	r7,lr
80004fc4:	1a 97       	mov	r7,sp
80004fc6:	30 0c       	mov	r12,0
80004fc8:	f0 1f 00 06 	mcall	80004fe0 <et024006_SetupInterface+0x20>
80004fcc:	30 2b       	mov	r11,2
80004fce:	30 9c       	mov	r12,9
80004fd0:	f0 1f 00 05 	mcall	80004fe4 <et024006_SetupInterface+0x24>
80004fd4:	34 2c       	mov	r12,66
80004fd6:	f0 1f 00 05 	mcall	80004fe8 <et024006_SetupInterface+0x28>
80004fda:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fde:	00 00       	add	r0,r0
80004fe0:	80 00       	ld.sh	r0,r0[0x0]
80004fe2:	8e 48       	ld.sh	r8,r7[0x8]
80004fe4:	80 00       	ld.sh	r0,r0[0x0]
80004fe6:	8d 38       	st.w	r6[0xc],r8
80004fe8:	80 00       	ld.sh	r0,r0[0x0]
80004fea:	90 ba       	ld.uh	r10,r8[0x6]

80004fec <et024006_ResetDisplay>:
80004fec:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80004ff0:	1a 97       	mov	r7,sp
80004ff2:	21 ad       	sub	sp,104
80004ff4:	34 2c       	mov	r12,66
80004ff6:	f0 1f 00 aa 	mcall	8000529c <et024006_ResetDisplay+0x2b0>
80004ffa:	fe f8 02 a6 	ld.w	r8,pc[678]
80004ffe:	70 08       	ld.w	r8,r8[0x0]
80005000:	33 29       	mov	r9,50
80005002:	ef 49 ff c4 	st.w	r7[-60],r9
80005006:	ef 48 ff c0 	st.w	r7[-64],r8
8000500a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000500e:	ef 48 ff cc 	st.w	r7[-52],r8
80005012:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005016:	ef 48 ff c8 	st.w	r7[-56],r8
8000501a:	ee fc ff cc 	ld.w	r12,r7[-52]
8000501e:	ef 4c ff a4 	st.w	r7[-92],r12
80005022:	30 0b       	mov	r11,0
80005024:	ef 4b ff a0 	st.w	r7[-96],r11
80005028:	ee f9 ff c8 	ld.w	r9,r7[-56]
8000502c:	ef 49 ff 9c 	st.w	r7[-100],r9
80005030:	30 08       	mov	r8,0
80005032:	ef 48 ff 98 	st.w	r7[-104],r8
80005036:	ee fa ff a0 	ld.w	r10,r7[-96]
8000503a:	ee fc ff 9c 	ld.w	r12,r7[-100]
8000503e:	b9 3a       	mul	r10,r12
80005040:	ee f8 ff 98 	ld.w	r8,r7[-104]
80005044:	ee fb ff a4 	ld.w	r11,r7[-92]
80005048:	b7 38       	mul	r8,r11
8000504a:	10 0a       	add	r10,r8
8000504c:	ee fc ff a4 	ld.w	r12,r7[-92]
80005050:	ee fb ff 9c 	ld.w	r11,r7[-100]
80005054:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005058:	12 0a       	add	r10,r9
8000505a:	14 99       	mov	r9,r10
8000505c:	ee 7a 42 3f 	mov	r10,999999
80005060:	30 0b       	mov	r11,0
80005062:	f0 0a 00 0a 	add	r10,r8,r10
80005066:	f2 0b 00 4b 	adc	r11,r9,r11
8000506a:	ee 78 42 40 	mov	r8,1000000
8000506e:	30 09       	mov	r9,0
80005070:	f0 1f 00 8d 	mcall	800052a4 <et024006_ResetDisplay+0x2b8>
80005074:	14 98       	mov	r8,r10
80005076:	16 99       	mov	r9,r11
80005078:	ef 48 ff d4 	st.w	r7[-44],r8
8000507c:	ee c8 00 58 	sub	r8,r7,88
80005080:	ef 48 ff d0 	st.w	r7[-48],r8
80005084:	e1 b8 00 42 	mfsr	r8,0x108
80005088:	10 99       	mov	r9,r8
8000508a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000508e:	91 09       	st.w	r8[0x0],r9
80005090:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005094:	70 09       	ld.w	r9,r8[0x0]
80005096:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000509a:	10 09       	add	r9,r8
8000509c:	ee f8 ff d0 	ld.w	r8,r7[-48]
800050a0:	91 19       	st.w	r8[0x4],r9
800050a2:	ee f9 ff d0 	ld.w	r9,r7[-48]
800050a6:	30 08       	mov	r8,0
800050a8:	f3 68 00 08 	st.b	r9[8],r8
800050ac:	ee c8 00 58 	sub	r8,r7,88
800050b0:	ef 48 ff d8 	st.w	r7[-40],r8
800050b4:	e1 b8 00 42 	mfsr	r8,0x108
800050b8:	ef 48 ff dc 	st.w	r7[-36],r8
800050bc:	ee f8 ff d8 	ld.w	r8,r7[-40]
800050c0:	f1 39 00 08 	ld.ub	r9,r8[8]
800050c4:	30 28       	mov	r8,2
800050c6:	f0 09 18 00 	cp.b	r9,r8
800050ca:	c0 31       	brne	800050d0 <et024006_ResetDisplay+0xe4>
800050cc:	30 08       	mov	r8,0
800050ce:	c4 38       	rjmp	80005154 <et024006_ResetDisplay+0x168>
800050d0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800050d4:	f1 39 00 08 	ld.ub	r9,r8[8]
800050d8:	30 18       	mov	r8,1
800050da:	f0 09 18 00 	cp.b	r9,r8
800050de:	c0 31       	brne	800050e4 <et024006_ResetDisplay+0xf8>
800050e0:	30 18       	mov	r8,1
800050e2:	c3 98       	rjmp	80005154 <et024006_ResetDisplay+0x168>
800050e4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800050e8:	70 09       	ld.w	r9,r8[0x0]
800050ea:	ee f8 ff d8 	ld.w	r8,r7[-40]
800050ee:	70 18       	ld.w	r8,r8[0x4]
800050f0:	10 39       	cp.w	r9,r8
800050f2:	e0 88 00 1a 	brls	80005126 <et024006_ResetDisplay+0x13a>
800050f6:	ee f8 ff d8 	ld.w	r8,r7[-40]
800050fa:	70 08       	ld.w	r8,r8[0x0]
800050fc:	ee f9 ff dc 	ld.w	r9,r7[-36]
80005100:	10 39       	cp.w	r9,r8
80005102:	c1 02       	brcc	80005122 <et024006_ResetDisplay+0x136>
80005104:	ee f8 ff d8 	ld.w	r8,r7[-40]
80005108:	70 18       	ld.w	r8,r8[0x4]
8000510a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000510e:	10 39       	cp.w	r9,r8
80005110:	e0 88 00 09 	brls	80005122 <et024006_ResetDisplay+0x136>
80005114:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005118:	30 18       	mov	r8,1
8000511a:	f3 68 00 08 	st.b	r9[8],r8
8000511e:	30 18       	mov	r8,1
80005120:	c1 a8       	rjmp	80005154 <et024006_ResetDisplay+0x168>
80005122:	30 08       	mov	r8,0
80005124:	c1 88       	rjmp	80005154 <et024006_ResetDisplay+0x168>
80005126:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000512a:	70 08       	ld.w	r8,r8[0x0]
8000512c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80005130:	10 39       	cp.w	r9,r8
80005132:	c0 93       	brcs	80005144 <et024006_ResetDisplay+0x158>
80005134:	ee f8 ff d8 	ld.w	r8,r7[-40]
80005138:	70 18       	ld.w	r8,r8[0x4]
8000513a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000513e:	10 39       	cp.w	r9,r8
80005140:	e0 88 00 09 	brls	80005152 <et024006_ResetDisplay+0x166>
80005144:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005148:	30 18       	mov	r8,1
8000514a:	f3 68 00 08 	st.b	r9[8],r8
8000514e:	30 18       	mov	r8,1
80005150:	c0 28       	rjmp	80005154 <et024006_ResetDisplay+0x168>
80005152:	30 08       	mov	r8,0
80005154:	58 08       	cp.w	r8,0
80005156:	ca b0       	breq	800050ac <et024006_ResetDisplay+0xc0>
80005158:	34 2c       	mov	r12,66
8000515a:	f0 1f 00 54 	mcall	800052a8 <et024006_ResetDisplay+0x2bc>
8000515e:	4d 18       	lddpc	r8,800052a0 <et024006_ResetDisplay+0x2b4>
80005160:	70 08       	ld.w	r8,r8[0x0]
80005162:	30 59       	mov	r9,5
80005164:	ef 49 ff e4 	st.w	r7[-28],r9
80005168:	ef 48 ff e0 	st.w	r7[-32],r8
8000516c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005170:	ef 48 ff ec 	st.w	r7[-20],r8
80005174:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005178:	ef 48 ff e8 	st.w	r7[-24],r8
8000517c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80005180:	30 01       	mov	r1,0
80005182:	ee f2 ff e8 	ld.w	r2,r7[-24]
80005186:	30 03       	mov	r3,0
80005188:	e2 02 02 4a 	mul	r10,r1,r2
8000518c:	e6 00 02 48 	mul	r8,r3,r0
80005190:	10 0a       	add	r10,r8
80005192:	e0 02 06 48 	mulu.d	r8,r0,r2
80005196:	12 0a       	add	r10,r9
80005198:	14 99       	mov	r9,r10
8000519a:	e0 6a 03 e7 	mov	r10,999
8000519e:	30 0b       	mov	r11,0
800051a0:	f0 0a 00 0a 	add	r10,r8,r10
800051a4:	f2 0b 00 4b 	adc	r11,r9,r11
800051a8:	e0 68 03 e8 	mov	r8,1000
800051ac:	30 09       	mov	r9,0
800051ae:	f0 1f 00 3e 	mcall	800052a4 <et024006_ResetDisplay+0x2b8>
800051b2:	14 98       	mov	r8,r10
800051b4:	16 99       	mov	r9,r11
800051b6:	ef 48 ff f4 	st.w	r7[-12],r8
800051ba:	ee c8 00 4c 	sub	r8,r7,76
800051be:	ef 48 ff f0 	st.w	r7[-16],r8
800051c2:	e1 b8 00 42 	mfsr	r8,0x108
800051c6:	10 99       	mov	r9,r8
800051c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051cc:	91 09       	st.w	r8[0x0],r9
800051ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051d2:	70 09       	ld.w	r9,r8[0x0]
800051d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800051d8:	10 09       	add	r9,r8
800051da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051de:	91 19       	st.w	r8[0x4],r9
800051e0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800051e4:	30 08       	mov	r8,0
800051e6:	f3 68 00 08 	st.b	r9[8],r8
800051ea:	ee c8 00 4c 	sub	r8,r7,76
800051ee:	ef 48 ff f8 	st.w	r7[-8],r8
800051f2:	e1 b8 00 42 	mfsr	r8,0x108
800051f6:	ef 48 ff fc 	st.w	r7[-4],r8
800051fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051fe:	f1 39 00 08 	ld.ub	r9,r8[8]
80005202:	30 28       	mov	r8,2
80005204:	f0 09 18 00 	cp.b	r9,r8
80005208:	c0 31       	brne	8000520e <et024006_ResetDisplay+0x222>
8000520a:	30 08       	mov	r8,0
8000520c:	c4 38       	rjmp	80005292 <et024006_ResetDisplay+0x2a6>
8000520e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005212:	f1 39 00 08 	ld.ub	r9,r8[8]
80005216:	30 18       	mov	r8,1
80005218:	f0 09 18 00 	cp.b	r9,r8
8000521c:	c0 31       	brne	80005222 <et024006_ResetDisplay+0x236>
8000521e:	30 18       	mov	r8,1
80005220:	c3 98       	rjmp	80005292 <et024006_ResetDisplay+0x2a6>
80005222:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005226:	70 09       	ld.w	r9,r8[0x0]
80005228:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000522c:	70 18       	ld.w	r8,r8[0x4]
8000522e:	10 39       	cp.w	r9,r8
80005230:	e0 88 00 1a 	brls	80005264 <et024006_ResetDisplay+0x278>
80005234:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005238:	70 08       	ld.w	r8,r8[0x0]
8000523a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000523e:	10 39       	cp.w	r9,r8
80005240:	c1 02       	brcc	80005260 <et024006_ResetDisplay+0x274>
80005242:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005246:	70 18       	ld.w	r8,r8[0x4]
80005248:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000524c:	10 39       	cp.w	r9,r8
8000524e:	e0 88 00 09 	brls	80005260 <et024006_ResetDisplay+0x274>
80005252:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005256:	30 18       	mov	r8,1
80005258:	f3 68 00 08 	st.b	r9[8],r8
8000525c:	30 18       	mov	r8,1
8000525e:	c1 a8       	rjmp	80005292 <et024006_ResetDisplay+0x2a6>
80005260:	30 08       	mov	r8,0
80005262:	c1 88       	rjmp	80005292 <et024006_ResetDisplay+0x2a6>
80005264:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005268:	70 08       	ld.w	r8,r8[0x0]
8000526a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000526e:	10 39       	cp.w	r9,r8
80005270:	c0 93       	brcs	80005282 <et024006_ResetDisplay+0x296>
80005272:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005276:	70 18       	ld.w	r8,r8[0x4]
80005278:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000527c:	10 39       	cp.w	r9,r8
8000527e:	e0 88 00 09 	brls	80005290 <et024006_ResetDisplay+0x2a4>
80005282:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005286:	30 18       	mov	r8,1
80005288:	f3 68 00 08 	st.b	r9[8],r8
8000528c:	30 18       	mov	r8,1
8000528e:	c0 28       	rjmp	80005292 <et024006_ResetDisplay+0x2a6>
80005290:	30 08       	mov	r8,0
80005292:	58 08       	cp.w	r8,0
80005294:	ca b0       	breq	800051ea <et024006_ResetDisplay+0x1fe>
80005296:	2e 6d       	sub	sp,-104
80005298:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
8000529c:	80 00       	ld.sh	r0,r0[0x0]
8000529e:	91 22       	st.w	r8[0x8],r2
800052a0:	00 00       	add	r0,r0
800052a2:	06 10       	sub	r0,r3
800052a4:	80 00       	ld.sh	r0,r0[0x0]
800052a6:	e8 44 80 00 	cp.w	r4,557056
800052aa:	90 ba       	ld.uh	r10,r8[0x6]

800052ac <et024006_AdjustGamma>:
800052ac:	eb cd 40 80 	pushm	r7,lr
800052b0:	1a 97       	mov	r7,sp
800052b2:	20 6d       	sub	sp,24
800052b4:	34 68       	mov	r8,70
800052b6:	ef 68 ff e9 	st.b	r7[-23],r8
800052ba:	39 48       	mov	r8,-108
800052bc:	ef 68 ff e8 	st.b	r7[-24],r8
800052c0:	fc 19 c0 00 	movh	r9,0xc000
800052c4:	ef 38 ff e9 	ld.ub	r8,r7[-23]
800052c8:	b2 08       	st.h	r9[0x0],r8
800052ca:	fc 19 c0 20 	movh	r9,0xc020
800052ce:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800052d2:	b2 08       	st.h	r9[0x0],r8
800052d4:	34 78       	mov	r8,71
800052d6:	ef 68 ff eb 	st.b	r7[-21],r8
800052da:	34 18       	mov	r8,65
800052dc:	ef 68 ff ea 	st.b	r7[-22],r8
800052e0:	fc 19 c0 00 	movh	r9,0xc000
800052e4:	ef 38 ff eb 	ld.ub	r8,r7[-21]
800052e8:	b2 08       	st.h	r9[0x0],r8
800052ea:	fc 19 c0 20 	movh	r9,0xc020
800052ee:	ef 38 ff ea 	ld.ub	r8,r7[-22]
800052f2:	b2 08       	st.h	r9[0x0],r8
800052f4:	34 88       	mov	r8,72
800052f6:	ef 68 ff ed 	st.b	r7[-19],r8
800052fa:	30 08       	mov	r8,0
800052fc:	ef 68 ff ec 	st.b	r7[-20],r8
80005300:	fc 19 c0 00 	movh	r9,0xc000
80005304:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005308:	b2 08       	st.h	r9[0x0],r8
8000530a:	fc 19 c0 20 	movh	r9,0xc020
8000530e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005312:	b2 08       	st.h	r9[0x0],r8
80005314:	34 98       	mov	r8,73
80005316:	ef 68 ff ef 	st.b	r7[-17],r8
8000531a:	33 38       	mov	r8,51
8000531c:	ef 68 ff ee 	st.b	r7[-18],r8
80005320:	fc 19 c0 00 	movh	r9,0xc000
80005324:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80005328:	b2 08       	st.h	r9[0x0],r8
8000532a:	fc 19 c0 20 	movh	r9,0xc020
8000532e:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80005332:	b2 08       	st.h	r9[0x0],r8
80005334:	34 a8       	mov	r8,74
80005336:	ef 68 ff f1 	st.b	r7[-15],r8
8000533a:	32 58       	mov	r8,37
8000533c:	ef 68 ff f0 	st.b	r7[-16],r8
80005340:	fc 19 c0 00 	movh	r9,0xc000
80005344:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80005348:	b2 08       	st.h	r9[0x0],r8
8000534a:	fc 19 c0 20 	movh	r9,0xc020
8000534e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005352:	b2 08       	st.h	r9[0x0],r8
80005354:	34 b8       	mov	r8,75
80005356:	ef 68 ff f3 	st.b	r7[-13],r8
8000535a:	34 58       	mov	r8,69
8000535c:	ef 68 ff f2 	st.b	r7[-14],r8
80005360:	fc 19 c0 00 	movh	r9,0xc000
80005364:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80005368:	b2 08       	st.h	r9[0x0],r8
8000536a:	fc 19 c0 20 	movh	r9,0xc020
8000536e:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80005372:	b2 08       	st.h	r9[0x0],r8
80005374:	34 c8       	mov	r8,76
80005376:	ef 68 ff f5 	st.b	r7[-11],r8
8000537a:	34 48       	mov	r8,68
8000537c:	ef 68 ff f4 	st.b	r7[-12],r8
80005380:	fc 19 c0 00 	movh	r9,0xc000
80005384:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005388:	b2 08       	st.h	r9[0x0],r8
8000538a:	fc 19 c0 20 	movh	r9,0xc020
8000538e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005392:	b2 08       	st.h	r9[0x0],r8
80005394:	34 d8       	mov	r8,77
80005396:	ef 68 ff f7 	st.b	r7[-9],r8
8000539a:	37 78       	mov	r8,119
8000539c:	ef 68 ff f6 	st.b	r7[-10],r8
800053a0:	fc 19 c0 00 	movh	r9,0xc000
800053a4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800053a8:	b2 08       	st.h	r9[0x0],r8
800053aa:	fc 19 c0 20 	movh	r9,0xc020
800053ae:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800053b2:	b2 08       	st.h	r9[0x0],r8
800053b4:	34 e8       	mov	r8,78
800053b6:	ef 68 ff f9 	st.b	r7[-7],r8
800053ba:	31 28       	mov	r8,18
800053bc:	ef 68 ff f8 	st.b	r7[-8],r8
800053c0:	fc 19 c0 00 	movh	r9,0xc000
800053c4:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800053c8:	b2 08       	st.h	r9[0x0],r8
800053ca:	fc 19 c0 20 	movh	r9,0xc020
800053ce:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800053d2:	b2 08       	st.h	r9[0x0],r8
800053d4:	34 f8       	mov	r8,79
800053d6:	ef 68 ff fb 	st.b	r7[-5],r8
800053da:	3c c8       	mov	r8,-52
800053dc:	ef 68 ff fa 	st.b	r7[-6],r8
800053e0:	fc 19 c0 00 	movh	r9,0xc000
800053e4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800053e8:	b2 08       	st.h	r9[0x0],r8
800053ea:	fc 19 c0 20 	movh	r9,0xc020
800053ee:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800053f2:	b2 08       	st.h	r9[0x0],r8
800053f4:	35 08       	mov	r8,80
800053f6:	ef 68 ff fd 	st.b	r7[-3],r8
800053fa:	34 68       	mov	r8,70
800053fc:	ef 68 ff fc 	st.b	r7[-4],r8
80005400:	fc 19 c0 00 	movh	r9,0xc000
80005404:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005408:	b2 08       	st.h	r9[0x0],r8
8000540a:	fc 19 c0 20 	movh	r9,0xc020
8000540e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005412:	b2 08       	st.h	r9[0x0],r8
80005414:	35 18       	mov	r8,81
80005416:	ef 68 ff ff 	st.b	r7[-1],r8
8000541a:	38 28       	mov	r8,-126
8000541c:	ef 68 ff fe 	st.b	r7[-2],r8
80005420:	fc 19 c0 00 	movh	r9,0xc000
80005424:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005428:	b2 08       	st.h	r9[0x0],r8
8000542a:	fc 19 c0 20 	movh	r9,0xc020
8000542e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005432:	b2 08       	st.h	r9[0x0],r8
80005434:	2f ad       	sub	sp,-24
80005436:	e3 cd 80 80 	ldm	sp++,r7,pc

8000543a <et024006_GeneralSettings>:
8000543a:	eb cd 40 80 	pushm	r7,lr
8000543e:	1a 97       	mov	r7,sp
80005440:	20 8d       	sub	sp,32
80005442:	30 18       	mov	r8,1
80005444:	ef 68 ff e1 	st.b	r7[-31],r8
80005448:	30 68       	mov	r8,6
8000544a:	ef 68 ff e0 	st.b	r7[-32],r8
8000544e:	fc 19 c0 00 	movh	r9,0xc000
80005452:	ef 38 ff e1 	ld.ub	r8,r7[-31]
80005456:	b2 08       	st.h	r9[0x0],r8
80005458:	fc 19 c0 20 	movh	r9,0xc020
8000545c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80005460:	b2 08       	st.h	r9[0x0],r8
80005462:	33 a8       	mov	r8,58
80005464:	ef 68 ff e3 	st.b	r7[-29],r8
80005468:	30 18       	mov	r8,1
8000546a:	ef 68 ff e2 	st.b	r7[-30],r8
8000546e:	fc 19 c0 00 	movh	r9,0xc000
80005472:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80005476:	b2 08       	st.h	r9[0x0],r8
80005478:	fc 19 c0 20 	movh	r9,0xc020
8000547c:	ef 38 ff e2 	ld.ub	r8,r7[-30]
80005480:	b2 08       	st.h	r9[0x0],r8
80005482:	33 b8       	mov	r8,59
80005484:	ef 68 ff e5 	st.b	r7[-27],r8
80005488:	30 18       	mov	r8,1
8000548a:	ef 68 ff e4 	st.b	r7[-28],r8
8000548e:	fc 19 c0 00 	movh	r9,0xc000
80005492:	ef 38 ff e5 	ld.ub	r8,r7[-27]
80005496:	b2 08       	st.h	r9[0x0],r8
80005498:	fc 19 c0 20 	movh	r9,0xc020
8000549c:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800054a0:	b2 08       	st.h	r9[0x0],r8
800054a2:	33 c8       	mov	r8,60
800054a4:	ef 68 ff e7 	st.b	r7[-25],r8
800054a8:	3f 08       	mov	r8,-16
800054aa:	ef 68 ff e6 	st.b	r7[-26],r8
800054ae:	fc 19 c0 00 	movh	r9,0xc000
800054b2:	ef 38 ff e7 	ld.ub	r8,r7[-25]
800054b6:	b2 08       	st.h	r9[0x0],r8
800054b8:	fc 19 c0 20 	movh	r9,0xc020
800054bc:	ef 38 ff e6 	ld.ub	r8,r7[-26]
800054c0:	b2 08       	st.h	r9[0x0],r8
800054c2:	33 d8       	mov	r8,61
800054c4:	ef 68 ff e9 	st.b	r7[-23],r8
800054c8:	30 08       	mov	r8,0
800054ca:	ef 68 ff e8 	st.b	r7[-24],r8
800054ce:	fc 19 c0 00 	movh	r9,0xc000
800054d2:	ef 38 ff e9 	ld.ub	r8,r7[-23]
800054d6:	b2 08       	st.h	r9[0x0],r8
800054d8:	fc 19 c0 20 	movh	r9,0xc020
800054dc:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800054e0:	b2 08       	st.h	r9[0x0],r8
800054e2:	33 e8       	mov	r8,62
800054e4:	ef 68 ff eb 	st.b	r7[-21],r8
800054e8:	33 88       	mov	r8,56
800054ea:	ef 68 ff ea 	st.b	r7[-22],r8
800054ee:	fc 19 c0 00 	movh	r9,0xc000
800054f2:	ef 38 ff eb 	ld.ub	r8,r7[-21]
800054f6:	b2 08       	st.h	r9[0x0],r8
800054f8:	fc 19 c0 20 	movh	r9,0xc020
800054fc:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80005500:	b2 08       	st.h	r9[0x0],r8
80005502:	34 08       	mov	r8,64
80005504:	ef 68 ff ed 	st.b	r7[-19],r8
80005508:	30 f8       	mov	r8,15
8000550a:	ef 68 ff ec 	st.b	r7[-20],r8
8000550e:	fc 19 c0 00 	movh	r9,0xc000
80005512:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005516:	b2 08       	st.h	r9[0x0],r8
80005518:	fc 19 c0 20 	movh	r9,0xc020
8000551c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005520:	b2 08       	st.h	r9[0x0],r8
80005522:	34 18       	mov	r8,65
80005524:	ef 68 ff ef 	st.b	r7[-17],r8
80005528:	3f 08       	mov	r8,-16
8000552a:	ef 68 ff ee 	st.b	r7[-18],r8
8000552e:	fc 19 c0 00 	movh	r9,0xc000
80005532:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80005536:	b2 08       	st.h	r9[0x0],r8
80005538:	fc 19 c0 20 	movh	r9,0xc020
8000553c:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80005540:	b2 08       	st.h	r9[0x0],r8
80005542:	32 78       	mov	r8,39
80005544:	ef 68 ff f1 	st.b	r7[-15],r8
80005548:	30 28       	mov	r8,2
8000554a:	ef 68 ff f0 	st.b	r7[-16],r8
8000554e:	fc 19 c0 00 	movh	r9,0xc000
80005552:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80005556:	b2 08       	st.h	r9[0x0],r8
80005558:	fc 19 c0 20 	movh	r9,0xc020
8000555c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005560:	b2 08       	st.h	r9[0x0],r8
80005562:	32 88       	mov	r8,40
80005564:	ef 68 ff f3 	st.b	r7[-13],r8
80005568:	30 28       	mov	r8,2
8000556a:	ef 68 ff f2 	st.b	r7[-14],r8
8000556e:	fc 19 c0 00 	movh	r9,0xc000
80005572:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80005576:	b2 08       	st.h	r9[0x0],r8
80005578:	fc 19 c0 20 	movh	r9,0xc020
8000557c:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80005580:	b2 08       	st.h	r9[0x0],r8
80005582:	32 98       	mov	r8,41
80005584:	ef 68 ff f5 	st.b	r7[-11],r8
80005588:	30 28       	mov	r8,2
8000558a:	ef 68 ff f4 	st.b	r7[-12],r8
8000558e:	fc 19 c0 00 	movh	r9,0xc000
80005592:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005596:	b2 08       	st.h	r9[0x0],r8
80005598:	fc 19 c0 20 	movh	r9,0xc020
8000559c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800055a0:	b2 08       	st.h	r9[0x0],r8
800055a2:	32 a8       	mov	r8,42
800055a4:	ef 68 ff f7 	st.b	r7[-9],r8
800055a8:	30 28       	mov	r8,2
800055aa:	ef 68 ff f6 	st.b	r7[-10],r8
800055ae:	fc 19 c0 00 	movh	r9,0xc000
800055b2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800055b6:	b2 08       	st.h	r9[0x0],r8
800055b8:	fc 19 c0 20 	movh	r9,0xc020
800055bc:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800055c0:	b2 08       	st.h	r9[0x0],r8
800055c2:	32 c8       	mov	r8,44
800055c4:	ef 68 ff f9 	st.b	r7[-7],r8
800055c8:	30 28       	mov	r8,2
800055ca:	ef 68 ff f8 	st.b	r7[-8],r8
800055ce:	fc 19 c0 00 	movh	r9,0xc000
800055d2:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800055d6:	b2 08       	st.h	r9[0x0],r8
800055d8:	fc 19 c0 20 	movh	r9,0xc020
800055dc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800055e0:	b2 08       	st.h	r9[0x0],r8
800055e2:	32 d8       	mov	r8,45
800055e4:	ef 68 ff fb 	st.b	r7[-5],r8
800055e8:	30 28       	mov	r8,2
800055ea:	ef 68 ff fa 	st.b	r7[-6],r8
800055ee:	fc 19 c0 00 	movh	r9,0xc000
800055f2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800055f6:	b2 08       	st.h	r9[0x0],r8
800055f8:	fc 19 c0 20 	movh	r9,0xc020
800055fc:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80005600:	b2 08       	st.h	r9[0x0],r8
80005602:	31 98       	mov	r8,25
80005604:	ef 68 ff fd 	st.b	r7[-3],r8
80005608:	34 98       	mov	r8,73
8000560a:	ef 68 ff fc 	st.b	r7[-4],r8
8000560e:	fc 19 c0 00 	movh	r9,0xc000
80005612:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005616:	b2 08       	st.h	r9[0x0],r8
80005618:	fc 19 c0 20 	movh	r9,0xc020
8000561c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005620:	b2 08       	st.h	r9[0x0],r8
80005622:	39 38       	mov	r8,-109
80005624:	ef 68 ff ff 	st.b	r7[-1],r8
80005628:	30 88       	mov	r8,8
8000562a:	ef 68 ff fe 	st.b	r7[-2],r8
8000562e:	fc 19 c0 00 	movh	r9,0xc000
80005632:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005636:	b2 08       	st.h	r9[0x0],r8
80005638:	fc 19 c0 20 	movh	r9,0xc020
8000563c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005640:	b2 08       	st.h	r9[0x0],r8
80005642:	2f 8d       	sub	sp,-32
80005644:	e3 cd 80 80 	ldm	sp++,r7,pc

80005648 <et024006_PowerSettings>:
80005648:	eb cd 40 80 	pushm	r7,lr
8000564c:	1a 97       	mov	r7,sp
8000564e:	20 6d       	sub	sp,24
80005650:	32 38       	mov	r8,35
80005652:	ef 68 ff e9 	st.b	r7[-23],r8
80005656:	39 58       	mov	r8,-107
80005658:	ef 68 ff e8 	st.b	r7[-24],r8
8000565c:	fc 19 c0 00 	movh	r9,0xc000
80005660:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80005664:	b2 08       	st.h	r9[0x0],r8
80005666:	fc 19 c0 20 	movh	r9,0xc020
8000566a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000566e:	b2 08       	st.h	r9[0x0],r8
80005670:	32 48       	mov	r8,36
80005672:	ef 68 ff eb 	st.b	r7[-21],r8
80005676:	39 58       	mov	r8,-107
80005678:	ef 68 ff ea 	st.b	r7[-22],r8
8000567c:	fc 19 c0 00 	movh	r9,0xc000
80005680:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80005684:	b2 08       	st.h	r9[0x0],r8
80005686:	fc 19 c0 20 	movh	r9,0xc020
8000568a:	ef 38 ff ea 	ld.ub	r8,r7[-22]
8000568e:	b2 08       	st.h	r9[0x0],r8
80005690:	32 58       	mov	r8,37
80005692:	ef 68 ff ed 	st.b	r7[-19],r8
80005696:	3f f8       	mov	r8,-1
80005698:	ef 68 ff ec 	st.b	r7[-20],r8
8000569c:	fc 19 c0 00 	movh	r9,0xc000
800056a0:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800056a4:	b2 08       	st.h	r9[0x0],r8
800056a6:	fc 19 c0 20 	movh	r9,0xc020
800056aa:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800056ae:	b2 08       	st.h	r9[0x0],r8
800056b0:	39 08       	mov	r8,-112
800056b2:	ef 68 ff ef 	st.b	r7[-17],r8
800056b6:	37 f8       	mov	r8,127
800056b8:	ef 68 ff ee 	st.b	r7[-18],r8
800056bc:	fc 19 c0 00 	movh	r9,0xc000
800056c0:	ef 38 ff ef 	ld.ub	r8,r7[-17]
800056c4:	b2 08       	st.h	r9[0x0],r8
800056c6:	fc 19 c0 20 	movh	r9,0xc020
800056ca:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800056ce:	b2 08       	st.h	r9[0x0],r8
800056d0:	33 58       	mov	r8,53
800056d2:	ef 68 ff f1 	st.b	r7[-15],r8
800056d6:	33 88       	mov	r8,56
800056d8:	ef 68 ff f0 	st.b	r7[-16],r8
800056dc:	fc 19 c0 00 	movh	r9,0xc000
800056e0:	ef 38 ff f1 	ld.ub	r8,r7[-15]
800056e4:	b2 08       	st.h	r9[0x0],r8
800056e6:	fc 19 c0 20 	movh	r9,0xc020
800056ea:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800056ee:	b2 08       	st.h	r9[0x0],r8
800056f0:	33 68       	mov	r8,54
800056f2:	ef 68 ff f3 	st.b	r7[-13],r8
800056f6:	37 88       	mov	r8,120
800056f8:	ef 68 ff f2 	st.b	r7[-14],r8
800056fc:	fc 19 c0 00 	movh	r9,0xc000
80005700:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80005704:	b2 08       	st.h	r9[0x0],r8
80005706:	fc 19 c0 20 	movh	r9,0xc020
8000570a:	ef 38 ff f2 	ld.ub	r8,r7[-14]
8000570e:	b2 08       	st.h	r9[0x0],r8
80005710:	31 d8       	mov	r8,29
80005712:	ef 68 ff f5 	st.b	r7[-11],r8
80005716:	30 78       	mov	r8,7
80005718:	ef 68 ff f4 	st.b	r7[-12],r8
8000571c:	fc 19 c0 00 	movh	r9,0xc000
80005720:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005724:	b2 08       	st.h	r9[0x0],r8
80005726:	fc 19 c0 20 	movh	r9,0xc020
8000572a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000572e:	b2 08       	st.h	r9[0x0],r8
80005730:	31 e8       	mov	r8,30
80005732:	ef 68 ff f7 	st.b	r7[-9],r8
80005736:	30 08       	mov	r8,0
80005738:	ef 68 ff f6 	st.b	r7[-10],r8
8000573c:	fc 19 c0 00 	movh	r9,0xc000
80005740:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005744:	b2 08       	st.h	r9[0x0],r8
80005746:	fc 19 c0 20 	movh	r9,0xc020
8000574a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000574e:	b2 08       	st.h	r9[0x0],r8
80005750:	31 f8       	mov	r8,31
80005752:	ef 68 ff f9 	st.b	r7[-7],r8
80005756:	30 48       	mov	r8,4
80005758:	ef 68 ff f8 	st.b	r7[-8],r8
8000575c:	fc 19 c0 00 	movh	r9,0xc000
80005760:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80005764:	b2 08       	st.h	r9[0x0],r8
80005766:	fc 19 c0 20 	movh	r9,0xc020
8000576a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000576e:	b2 08       	st.h	r9[0x0],r8
80005770:	32 08       	mov	r8,32
80005772:	ef 68 ff fb 	st.b	r7[-5],r8
80005776:	34 08       	mov	r8,64
80005778:	ef 68 ff fa 	st.b	r7[-6],r8
8000577c:	fc 19 c0 00 	movh	r9,0xc000
80005780:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005784:	b2 08       	st.h	r9[0x0],r8
80005786:	fc 19 c0 20 	movh	r9,0xc020
8000578a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000578e:	b2 08       	st.h	r9[0x0],r8
80005790:	34 48       	mov	r8,68
80005792:	ef 68 ff fd 	st.b	r7[-3],r8
80005796:	33 88       	mov	r8,56
80005798:	ef 68 ff fc 	st.b	r7[-4],r8
8000579c:	fc 19 c0 00 	movh	r9,0xc000
800057a0:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800057a4:	b2 08       	st.h	r9[0x0],r8
800057a6:	fc 19 c0 20 	movh	r9,0xc020
800057aa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800057ae:	b2 08       	st.h	r9[0x0],r8
800057b0:	34 58       	mov	r8,69
800057b2:	ef 68 ff ff 	st.b	r7[-1],r8
800057b6:	31 28       	mov	r8,18
800057b8:	ef 68 ff fe 	st.b	r7[-2],r8
800057bc:	fc 19 c0 00 	movh	r9,0xc000
800057c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800057c4:	b2 08       	st.h	r9[0x0],r8
800057c6:	fc 19 c0 20 	movh	r9,0xc020
800057ca:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800057ce:	b2 08       	st.h	r9[0x0],r8
800057d0:	2f ad       	sub	sp,-24
800057d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800057d6 <et024006_InterfaceSettings>:
800057d6:	eb cd 40 80 	pushm	r7,lr
800057da:	1a 97       	mov	r7,sp
800057dc:	20 1d       	sub	sp,4
800057de:	31 68       	mov	r8,22
800057e0:	ef 68 ff ff 	st.b	r7[-1],r8
800057e4:	36 88       	mov	r8,104
800057e6:	ef 68 ff fe 	st.b	r7[-2],r8
800057ea:	fc 19 c0 00 	movh	r9,0xc000
800057ee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800057f2:	b2 08       	st.h	r9[0x0],r8
800057f4:	fc 19 c0 20 	movh	r9,0xc020
800057f8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800057fc:	b2 08       	st.h	r9[0x0],r8
800057fe:	2f fd       	sub	sp,-4
80005800:	e3 cd 80 80 	ldm	sp++,r7,pc

80005804 <et024006_PowerUp>:
80005804:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005808:	1a 97       	mov	r7,sp
8000580a:	fa cd 01 24 	sub	sp,sp,292
8000580e:	fe f8 07 22 	ld.w	r8,pc[1826]
80005812:	70 09       	ld.w	r9,r8[0x0]
80005814:	30 a8       	mov	r8,10
80005816:	ef 48 ff 54 	st.w	r7[-172],r8
8000581a:	ef 49 ff 50 	st.w	r7[-176],r9
8000581e:	ee f8 ff 54 	ld.w	r8,r7[-172]
80005822:	ef 48 ff 5c 	st.w	r7[-164],r8
80005826:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000582a:	ef 48 ff 58 	st.w	r7[-168],r8
8000582e:	ee f2 ff 5c 	ld.w	r2,r7[-164]
80005832:	30 03       	mov	r3,0
80005834:	ee fa ff 58 	ld.w	r10,r7[-168]
80005838:	30 0b       	mov	r11,0
8000583a:	e6 0a 02 49 	mul	r9,r3,r10
8000583e:	f6 02 02 48 	mul	r8,r11,r2
80005842:	10 09       	add	r9,r8
80005844:	e4 0a 06 4a 	mulu.d	r10,r2,r10
80005848:	16 09       	add	r9,r11
8000584a:	12 9b       	mov	r11,r9
8000584c:	e0 68 03 e7 	mov	r8,999
80005850:	30 09       	mov	r9,0
80005852:	10 0a       	add	r10,r8
80005854:	f6 09 00 4b 	adc	r11,r11,r9
80005858:	e0 68 03 e8 	mov	r8,1000
8000585c:	30 09       	mov	r9,0
8000585e:	f0 1f 01 b6 	mcall	80005f34 <et024006_PowerUp+0x730>
80005862:	14 98       	mov	r8,r10
80005864:	16 99       	mov	r9,r11
80005866:	ef 48 ff 64 	st.w	r7[-156],r8
8000586a:	ee c8 00 ec 	sub	r8,r7,236
8000586e:	ef 48 ff 60 	st.w	r7[-160],r8
80005872:	e1 b8 00 42 	mfsr	r8,0x108
80005876:	10 99       	mov	r9,r8
80005878:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000587c:	91 09       	st.w	r8[0x0],r9
8000587e:	ee f8 ff 60 	ld.w	r8,r7[-160]
80005882:	70 09       	ld.w	r9,r8[0x0]
80005884:	ee f8 ff 64 	ld.w	r8,r7[-156]
80005888:	10 09       	add	r9,r8
8000588a:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000588e:	91 19       	st.w	r8[0x4],r9
80005890:	ee f9 ff 60 	ld.w	r9,r7[-160]
80005894:	30 08       	mov	r8,0
80005896:	f3 68 00 08 	st.b	r9[8],r8
8000589a:	ee c8 00 ec 	sub	r8,r7,236
8000589e:	ef 48 ff 68 	st.w	r7[-152],r8
800058a2:	e1 b8 00 42 	mfsr	r8,0x108
800058a6:	ef 48 ff 6c 	st.w	r7[-148],r8
800058aa:	ee f8 ff 68 	ld.w	r8,r7[-152]
800058ae:	f1 39 00 08 	ld.ub	r9,r8[8]
800058b2:	30 28       	mov	r8,2
800058b4:	f0 09 18 00 	cp.b	r9,r8
800058b8:	c0 31       	brne	800058be <et024006_PowerUp+0xba>
800058ba:	30 08       	mov	r8,0
800058bc:	c4 38       	rjmp	80005942 <et024006_PowerUp+0x13e>
800058be:	ee f8 ff 68 	ld.w	r8,r7[-152]
800058c2:	f1 39 00 08 	ld.ub	r9,r8[8]
800058c6:	30 18       	mov	r8,1
800058c8:	f0 09 18 00 	cp.b	r9,r8
800058cc:	c0 31       	brne	800058d2 <et024006_PowerUp+0xce>
800058ce:	30 18       	mov	r8,1
800058d0:	c3 98       	rjmp	80005942 <et024006_PowerUp+0x13e>
800058d2:	ee f8 ff 68 	ld.w	r8,r7[-152]
800058d6:	70 09       	ld.w	r9,r8[0x0]
800058d8:	ee f8 ff 68 	ld.w	r8,r7[-152]
800058dc:	70 18       	ld.w	r8,r8[0x4]
800058de:	10 39       	cp.w	r9,r8
800058e0:	e0 88 00 1a 	brls	80005914 <et024006_PowerUp+0x110>
800058e4:	ee f8 ff 68 	ld.w	r8,r7[-152]
800058e8:	70 09       	ld.w	r9,r8[0x0]
800058ea:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800058ee:	12 38       	cp.w	r8,r9
800058f0:	c1 02       	brcc	80005910 <et024006_PowerUp+0x10c>
800058f2:	ee f8 ff 68 	ld.w	r8,r7[-152]
800058f6:	70 19       	ld.w	r9,r8[0x4]
800058f8:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800058fc:	12 38       	cp.w	r8,r9
800058fe:	e0 88 00 09 	brls	80005910 <et024006_PowerUp+0x10c>
80005902:	ee f9 ff 68 	ld.w	r9,r7[-152]
80005906:	30 18       	mov	r8,1
80005908:	f3 68 00 08 	st.b	r9[8],r8
8000590c:	30 18       	mov	r8,1
8000590e:	c1 a8       	rjmp	80005942 <et024006_PowerUp+0x13e>
80005910:	30 08       	mov	r8,0
80005912:	c1 88       	rjmp	80005942 <et024006_PowerUp+0x13e>
80005914:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005918:	70 09       	ld.w	r9,r8[0x0]
8000591a:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000591e:	12 38       	cp.w	r8,r9
80005920:	c0 93       	brcs	80005932 <et024006_PowerUp+0x12e>
80005922:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005926:	70 19       	ld.w	r9,r8[0x4]
80005928:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000592c:	12 38       	cp.w	r8,r9
8000592e:	e0 88 00 09 	brls	80005940 <et024006_PowerUp+0x13c>
80005932:	ee f9 ff 68 	ld.w	r9,r7[-152]
80005936:	30 18       	mov	r8,1
80005938:	f3 68 00 08 	st.b	r9[8],r8
8000593c:	30 18       	mov	r8,1
8000593e:	c0 28       	rjmp	80005942 <et024006_PowerUp+0x13e>
80005940:	30 08       	mov	r8,0
80005942:	58 08       	cp.w	r8,0
80005944:	ca b0       	breq	8000589a <et024006_PowerUp+0x96>
80005946:	31 c8       	mov	r8,28
80005948:	ef 68 ff 73 	st.b	r7[-141],r8
8000594c:	30 48       	mov	r8,4
8000594e:	ef 68 ff 72 	st.b	r7[-142],r8
80005952:	fc 19 c0 00 	movh	r9,0xc000
80005956:	ef 38 ff 73 	ld.ub	r8,r7[-141]
8000595a:	b2 08       	st.h	r9[0x0],r8
8000595c:	fc 19 c0 20 	movh	r9,0xc020
80005960:	ef 38 ff 72 	ld.ub	r8,r7[-142]
80005964:	b2 08       	st.h	r9[0x0],r8
80005966:	fe f8 05 ca 	ld.w	r8,pc[1482]
8000596a:	70 09       	ld.w	r9,r8[0x0]
8000596c:	31 48       	mov	r8,20
8000596e:	ef 48 ff 78 	st.w	r7[-136],r8
80005972:	ef 49 ff 74 	st.w	r7[-140],r9
80005976:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000597a:	ef 48 ff 80 	st.w	r7[-128],r8
8000597e:	ee f8 ff 74 	ld.w	r8,r7[-140]
80005982:	ef 48 ff 7c 	st.w	r7[-132],r8
80005986:	ee fc ff 80 	ld.w	r12,r7[-128]
8000598a:	ef 4c fe e0 	st.w	r7[-288],r12
8000598e:	30 0b       	mov	r11,0
80005990:	ef 4b fe dc 	st.w	r7[-292],r11
80005994:	ee f0 ff 7c 	ld.w	r0,r7[-132]
80005998:	30 01       	mov	r1,0
8000599a:	ee f9 fe dc 	ld.w	r9,r7[-292]
8000599e:	a1 39       	mul	r9,r0
800059a0:	ee fa fe e0 	ld.w	r10,r7[-288]
800059a4:	e2 0a 02 48 	mul	r8,r1,r10
800059a8:	10 09       	add	r9,r8
800059aa:	ee f8 fe e0 	ld.w	r8,r7[-288]
800059ae:	f0 00 06 4a 	mulu.d	r10,r8,r0
800059b2:	16 09       	add	r9,r11
800059b4:	12 9b       	mov	r11,r9
800059b6:	e0 68 03 e7 	mov	r8,999
800059ba:	30 09       	mov	r9,0
800059bc:	10 0a       	add	r10,r8
800059be:	f6 09 00 4b 	adc	r11,r11,r9
800059c2:	e0 68 03 e8 	mov	r8,1000
800059c6:	30 09       	mov	r9,0
800059c8:	f0 1f 01 5b 	mcall	80005f34 <et024006_PowerUp+0x730>
800059cc:	14 98       	mov	r8,r10
800059ce:	16 99       	mov	r9,r11
800059d0:	ef 48 ff 88 	st.w	r7[-120],r8
800059d4:	ee c8 00 e0 	sub	r8,r7,224
800059d8:	ef 48 ff 84 	st.w	r7[-124],r8
800059dc:	e1 b8 00 42 	mfsr	r8,0x108
800059e0:	10 99       	mov	r9,r8
800059e2:	ee f8 ff 84 	ld.w	r8,r7[-124]
800059e6:	91 09       	st.w	r8[0x0],r9
800059e8:	ee f8 ff 84 	ld.w	r8,r7[-124]
800059ec:	70 09       	ld.w	r9,r8[0x0]
800059ee:	ee f8 ff 88 	ld.w	r8,r7[-120]
800059f2:	10 09       	add	r9,r8
800059f4:	ee f8 ff 84 	ld.w	r8,r7[-124]
800059f8:	91 19       	st.w	r8[0x4],r9
800059fa:	ee f9 ff 84 	ld.w	r9,r7[-124]
800059fe:	30 08       	mov	r8,0
80005a00:	f3 68 00 08 	st.b	r9[8],r8
80005a04:	ee c8 00 e0 	sub	r8,r7,224
80005a08:	ef 48 ff 8c 	st.w	r7[-116],r8
80005a0c:	e1 b8 00 42 	mfsr	r8,0x108
80005a10:	ef 48 ff 90 	st.w	r7[-112],r8
80005a14:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005a18:	f1 39 00 08 	ld.ub	r9,r8[8]
80005a1c:	30 28       	mov	r8,2
80005a1e:	f0 09 18 00 	cp.b	r9,r8
80005a22:	c0 31       	brne	80005a28 <et024006_PowerUp+0x224>
80005a24:	30 08       	mov	r8,0
80005a26:	c4 38       	rjmp	80005aac <et024006_PowerUp+0x2a8>
80005a28:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005a2c:	f1 39 00 08 	ld.ub	r9,r8[8]
80005a30:	30 18       	mov	r8,1
80005a32:	f0 09 18 00 	cp.b	r9,r8
80005a36:	c0 31       	brne	80005a3c <et024006_PowerUp+0x238>
80005a38:	30 18       	mov	r8,1
80005a3a:	c3 98       	rjmp	80005aac <et024006_PowerUp+0x2a8>
80005a3c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005a40:	70 09       	ld.w	r9,r8[0x0]
80005a42:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005a46:	70 18       	ld.w	r8,r8[0x4]
80005a48:	10 39       	cp.w	r9,r8
80005a4a:	e0 88 00 1a 	brls	80005a7e <et024006_PowerUp+0x27a>
80005a4e:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005a52:	70 08       	ld.w	r8,r8[0x0]
80005a54:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005a58:	10 39       	cp.w	r9,r8
80005a5a:	c1 02       	brcc	80005a7a <et024006_PowerUp+0x276>
80005a5c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005a60:	70 18       	ld.w	r8,r8[0x4]
80005a62:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005a66:	10 39       	cp.w	r9,r8
80005a68:	e0 88 00 09 	brls	80005a7a <et024006_PowerUp+0x276>
80005a6c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80005a70:	30 18       	mov	r8,1
80005a72:	f3 68 00 08 	st.b	r9[8],r8
80005a76:	30 18       	mov	r8,1
80005a78:	c1 a8       	rjmp	80005aac <et024006_PowerUp+0x2a8>
80005a7a:	30 08       	mov	r8,0
80005a7c:	c1 88       	rjmp	80005aac <et024006_PowerUp+0x2a8>
80005a7e:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005a82:	70 08       	ld.w	r8,r8[0x0]
80005a84:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005a88:	10 39       	cp.w	r9,r8
80005a8a:	c0 93       	brcs	80005a9c <et024006_PowerUp+0x298>
80005a8c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005a90:	70 18       	ld.w	r8,r8[0x4]
80005a92:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005a96:	10 39       	cp.w	r9,r8
80005a98:	e0 88 00 09 	brls	80005aaa <et024006_PowerUp+0x2a6>
80005a9c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80005aa0:	30 18       	mov	r8,1
80005aa2:	f3 68 00 08 	st.b	r9[8],r8
80005aa6:	30 18       	mov	r8,1
80005aa8:	c0 28       	rjmp	80005aac <et024006_PowerUp+0x2a8>
80005aaa:	30 08       	mov	r8,0
80005aac:	58 08       	cp.w	r8,0
80005aae:	ca b0       	breq	80005a04 <et024006_PowerUp+0x200>
80005ab0:	34 38       	mov	r8,67
80005ab2:	ef 68 ff 97 	st.b	r7[-105],r8
80005ab6:	38 08       	mov	r8,-128
80005ab8:	ef 68 ff 96 	st.b	r7[-106],r8
80005abc:	fc 19 c0 00 	movh	r9,0xc000
80005ac0:	ef 38 ff 97 	ld.ub	r8,r7[-105]
80005ac4:	b2 08       	st.h	r9[0x0],r8
80005ac6:	fc 19 c0 20 	movh	r9,0xc020
80005aca:	ef 38 ff 96 	ld.ub	r8,r7[-106]
80005ace:	b2 08       	st.h	r9[0x0],r8
80005ad0:	fe f8 04 60 	ld.w	r8,pc[1120]
80005ad4:	70 08       	ld.w	r8,r8[0x0]
80005ad6:	30 59       	mov	r9,5
80005ad8:	ef 49 ff 9c 	st.w	r7[-100],r9
80005adc:	ef 48 ff 98 	st.w	r7[-104],r8
80005ae0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80005ae4:	ef 48 ff a4 	st.w	r7[-92],r8
80005ae8:	ee f8 ff 98 	ld.w	r8,r7[-104]
80005aec:	ef 48 ff a0 	st.w	r7[-96],r8
80005af0:	ee fc ff a4 	ld.w	r12,r7[-92]
80005af4:	ef 4c fe f0 	st.w	r7[-272],r12
80005af8:	30 0b       	mov	r11,0
80005afa:	ef 4b fe ec 	st.w	r7[-276],r11
80005afe:	ee fa ff a0 	ld.w	r10,r7[-96]
80005b02:	ef 4a fe e8 	st.w	r7[-280],r10
80005b06:	30 09       	mov	r9,0
80005b08:	ef 49 fe e4 	st.w	r7[-284],r9
80005b0c:	ee fa fe ec 	ld.w	r10,r7[-276]
80005b10:	ee f8 fe e8 	ld.w	r8,r7[-280]
80005b14:	b1 3a       	mul	r10,r8
80005b16:	ee f8 fe e4 	ld.w	r8,r7[-284]
80005b1a:	ee fc fe f0 	ld.w	r12,r7[-272]
80005b1e:	b9 38       	mul	r8,r12
80005b20:	10 0a       	add	r10,r8
80005b22:	ee fb fe f0 	ld.w	r11,r7[-272]
80005b26:	ee fc fe e8 	ld.w	r12,r7[-280]
80005b2a:	f6 0c 06 48 	mulu.d	r8,r11,r12
80005b2e:	12 0a       	add	r10,r9
80005b30:	14 99       	mov	r9,r10
80005b32:	e0 6a 03 e7 	mov	r10,999
80005b36:	30 0b       	mov	r11,0
80005b38:	f0 0a 00 0a 	add	r10,r8,r10
80005b3c:	f2 0b 00 4b 	adc	r11,r9,r11
80005b40:	e0 68 03 e8 	mov	r8,1000
80005b44:	30 09       	mov	r9,0
80005b46:	f0 1f 00 fc 	mcall	80005f34 <et024006_PowerUp+0x730>
80005b4a:	14 98       	mov	r8,r10
80005b4c:	16 99       	mov	r9,r11
80005b4e:	ef 48 ff ac 	st.w	r7[-84],r8
80005b52:	ee c8 00 d4 	sub	r8,r7,212
80005b56:	ef 48 ff a8 	st.w	r7[-88],r8
80005b5a:	e1 b8 00 42 	mfsr	r8,0x108
80005b5e:	10 99       	mov	r9,r8
80005b60:	ee f8 ff a8 	ld.w	r8,r7[-88]
80005b64:	91 09       	st.w	r8[0x0],r9
80005b66:	ee f8 ff a8 	ld.w	r8,r7[-88]
80005b6a:	70 09       	ld.w	r9,r8[0x0]
80005b6c:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005b70:	10 09       	add	r9,r8
80005b72:	ee f8 ff a8 	ld.w	r8,r7[-88]
80005b76:	91 19       	st.w	r8[0x4],r9
80005b78:	ee f9 ff a8 	ld.w	r9,r7[-88]
80005b7c:	30 08       	mov	r8,0
80005b7e:	f3 68 00 08 	st.b	r9[8],r8
80005b82:	ee c8 00 d4 	sub	r8,r7,212
80005b86:	ef 48 ff b0 	st.w	r7[-80],r8
80005b8a:	e1 b8 00 42 	mfsr	r8,0x108
80005b8e:	ef 48 ff b4 	st.w	r7[-76],r8
80005b92:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005b96:	f1 39 00 08 	ld.ub	r9,r8[8]
80005b9a:	30 28       	mov	r8,2
80005b9c:	f0 09 18 00 	cp.b	r9,r8
80005ba0:	c0 31       	brne	80005ba6 <et024006_PowerUp+0x3a2>
80005ba2:	30 08       	mov	r8,0
80005ba4:	c4 38       	rjmp	80005c2a <et024006_PowerUp+0x426>
80005ba6:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005baa:	f1 39 00 08 	ld.ub	r9,r8[8]
80005bae:	30 18       	mov	r8,1
80005bb0:	f0 09 18 00 	cp.b	r9,r8
80005bb4:	c0 31       	brne	80005bba <et024006_PowerUp+0x3b6>
80005bb6:	30 18       	mov	r8,1
80005bb8:	c3 98       	rjmp	80005c2a <et024006_PowerUp+0x426>
80005bba:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005bbe:	70 09       	ld.w	r9,r8[0x0]
80005bc0:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005bc4:	70 18       	ld.w	r8,r8[0x4]
80005bc6:	10 39       	cp.w	r9,r8
80005bc8:	e0 88 00 1a 	brls	80005bfc <et024006_PowerUp+0x3f8>
80005bcc:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005bd0:	70 08       	ld.w	r8,r8[0x0]
80005bd2:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005bd6:	10 39       	cp.w	r9,r8
80005bd8:	c1 02       	brcc	80005bf8 <et024006_PowerUp+0x3f4>
80005bda:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005bde:	70 18       	ld.w	r8,r8[0x4]
80005be0:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005be4:	10 39       	cp.w	r9,r8
80005be6:	e0 88 00 09 	brls	80005bf8 <et024006_PowerUp+0x3f4>
80005bea:	ee f9 ff b0 	ld.w	r9,r7[-80]
80005bee:	30 18       	mov	r8,1
80005bf0:	f3 68 00 08 	st.b	r9[8],r8
80005bf4:	30 18       	mov	r8,1
80005bf6:	c1 a8       	rjmp	80005c2a <et024006_PowerUp+0x426>
80005bf8:	30 08       	mov	r8,0
80005bfa:	c1 88       	rjmp	80005c2a <et024006_PowerUp+0x426>
80005bfc:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005c00:	70 08       	ld.w	r8,r8[0x0]
80005c02:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005c06:	10 39       	cp.w	r9,r8
80005c08:	c0 93       	brcs	80005c1a <et024006_PowerUp+0x416>
80005c0a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005c0e:	70 18       	ld.w	r8,r8[0x4]
80005c10:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005c14:	10 39       	cp.w	r9,r8
80005c16:	e0 88 00 09 	brls	80005c28 <et024006_PowerUp+0x424>
80005c1a:	ee f9 ff b0 	ld.w	r9,r7[-80]
80005c1e:	30 18       	mov	r8,1
80005c20:	f3 68 00 08 	st.b	r9[8],r8
80005c24:	30 18       	mov	r8,1
80005c26:	c0 28       	rjmp	80005c2a <et024006_PowerUp+0x426>
80005c28:	30 08       	mov	r8,0
80005c2a:	58 08       	cp.w	r8,0
80005c2c:	ca b0       	breq	80005b82 <et024006_PowerUp+0x37e>
80005c2e:	31 b8       	mov	r8,27
80005c30:	ef 68 ff bb 	st.b	r7[-69],r8
80005c34:	30 88       	mov	r8,8
80005c36:	ef 68 ff ba 	st.b	r7[-70],r8
80005c3a:	fc 19 c0 00 	movh	r9,0xc000
80005c3e:	ef 38 ff bb 	ld.ub	r8,r7[-69]
80005c42:	b2 08       	st.h	r9[0x0],r8
80005c44:	fc 19 c0 20 	movh	r9,0xc020
80005c48:	ef 38 ff ba 	ld.ub	r8,r7[-70]
80005c4c:	b2 08       	st.h	r9[0x0],r8
80005c4e:	fe f8 02 e2 	ld.w	r8,pc[738]
80005c52:	70 08       	ld.w	r8,r8[0x0]
80005c54:	32 89       	mov	r9,40
80005c56:	ef 49 ff c0 	st.w	r7[-64],r9
80005c5a:	ef 48 ff bc 	st.w	r7[-68],r8
80005c5e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005c62:	ef 48 ff c8 	st.w	r7[-56],r8
80005c66:	ee f8 ff bc 	ld.w	r8,r7[-68]
80005c6a:	ef 48 ff c4 	st.w	r7[-60],r8
80005c6e:	ee fb ff c8 	ld.w	r11,r7[-56]
80005c72:	ef 4b ff 00 	st.w	r7[-256],r11
80005c76:	30 0a       	mov	r10,0
80005c78:	ef 4a fe fc 	st.w	r7[-260],r10
80005c7c:	ee f9 ff c4 	ld.w	r9,r7[-60]
80005c80:	ef 49 fe f8 	st.w	r7[-264],r9
80005c84:	30 08       	mov	r8,0
80005c86:	ef 48 fe f4 	st.w	r7[-268],r8
80005c8a:	ee fa fe fc 	ld.w	r10,r7[-260]
80005c8e:	ee fc fe f8 	ld.w	r12,r7[-264]
80005c92:	b9 3a       	mul	r10,r12
80005c94:	ee f8 fe f4 	ld.w	r8,r7[-268]
80005c98:	ee fb ff 00 	ld.w	r11,r7[-256]
80005c9c:	b7 38       	mul	r8,r11
80005c9e:	10 0a       	add	r10,r8
80005ca0:	ee fc ff 00 	ld.w	r12,r7[-256]
80005ca4:	ee fb fe f8 	ld.w	r11,r7[-264]
80005ca8:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005cac:	12 0a       	add	r10,r9
80005cae:	14 99       	mov	r9,r10
80005cb0:	e0 6a 03 e7 	mov	r10,999
80005cb4:	30 0b       	mov	r11,0
80005cb6:	f0 0a 00 0a 	add	r10,r8,r10
80005cba:	f2 0b 00 4b 	adc	r11,r9,r11
80005cbe:	e0 68 03 e8 	mov	r8,1000
80005cc2:	30 09       	mov	r9,0
80005cc4:	f0 1f 00 9c 	mcall	80005f34 <et024006_PowerUp+0x730>
80005cc8:	14 98       	mov	r8,r10
80005cca:	16 99       	mov	r9,r11
80005ccc:	ef 48 ff d0 	st.w	r7[-48],r8
80005cd0:	ee c8 00 c8 	sub	r8,r7,200
80005cd4:	ef 48 ff cc 	st.w	r7[-52],r8
80005cd8:	e1 b8 00 42 	mfsr	r8,0x108
80005cdc:	10 99       	mov	r9,r8
80005cde:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005ce2:	91 09       	st.w	r8[0x0],r9
80005ce4:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005ce8:	70 09       	ld.w	r9,r8[0x0]
80005cea:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005cee:	10 09       	add	r9,r8
80005cf0:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005cf4:	91 19       	st.w	r8[0x4],r9
80005cf6:	ee f9 ff cc 	ld.w	r9,r7[-52]
80005cfa:	30 08       	mov	r8,0
80005cfc:	f3 68 00 08 	st.b	r9[8],r8
80005d00:	ee c8 00 c8 	sub	r8,r7,200
80005d04:	ef 48 ff d4 	st.w	r7[-44],r8
80005d08:	e1 b8 00 42 	mfsr	r8,0x108
80005d0c:	ef 48 ff d8 	st.w	r7[-40],r8
80005d10:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005d14:	f1 39 00 08 	ld.ub	r9,r8[8]
80005d18:	30 28       	mov	r8,2
80005d1a:	f0 09 18 00 	cp.b	r9,r8
80005d1e:	c0 31       	brne	80005d24 <et024006_PowerUp+0x520>
80005d20:	30 08       	mov	r8,0
80005d22:	c4 38       	rjmp	80005da8 <et024006_PowerUp+0x5a4>
80005d24:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005d28:	f1 39 00 08 	ld.ub	r9,r8[8]
80005d2c:	30 18       	mov	r8,1
80005d2e:	f0 09 18 00 	cp.b	r9,r8
80005d32:	c0 31       	brne	80005d38 <et024006_PowerUp+0x534>
80005d34:	30 18       	mov	r8,1
80005d36:	c3 98       	rjmp	80005da8 <et024006_PowerUp+0x5a4>
80005d38:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005d3c:	70 09       	ld.w	r9,r8[0x0]
80005d3e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005d42:	70 18       	ld.w	r8,r8[0x4]
80005d44:	10 39       	cp.w	r9,r8
80005d46:	e0 88 00 1a 	brls	80005d7a <et024006_PowerUp+0x576>
80005d4a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005d4e:	70 08       	ld.w	r8,r8[0x0]
80005d50:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005d54:	10 39       	cp.w	r9,r8
80005d56:	c1 02       	brcc	80005d76 <et024006_PowerUp+0x572>
80005d58:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005d5c:	70 18       	ld.w	r8,r8[0x4]
80005d5e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005d62:	10 39       	cp.w	r9,r8
80005d64:	e0 88 00 09 	brls	80005d76 <et024006_PowerUp+0x572>
80005d68:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005d6c:	30 18       	mov	r8,1
80005d6e:	f3 68 00 08 	st.b	r9[8],r8
80005d72:	30 18       	mov	r8,1
80005d74:	c1 a8       	rjmp	80005da8 <et024006_PowerUp+0x5a4>
80005d76:	30 08       	mov	r8,0
80005d78:	c1 88       	rjmp	80005da8 <et024006_PowerUp+0x5a4>
80005d7a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005d7e:	70 08       	ld.w	r8,r8[0x0]
80005d80:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005d84:	10 39       	cp.w	r9,r8
80005d86:	c0 93       	brcs	80005d98 <et024006_PowerUp+0x594>
80005d88:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005d8c:	70 18       	ld.w	r8,r8[0x4]
80005d8e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005d92:	10 39       	cp.w	r9,r8
80005d94:	e0 88 00 09 	brls	80005da6 <et024006_PowerUp+0x5a2>
80005d98:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005d9c:	30 18       	mov	r8,1
80005d9e:	f3 68 00 08 	st.b	r9[8],r8
80005da2:	30 18       	mov	r8,1
80005da4:	c0 28       	rjmp	80005da8 <et024006_PowerUp+0x5a4>
80005da6:	30 08       	mov	r8,0
80005da8:	58 08       	cp.w	r8,0
80005daa:	ca b0       	breq	80005d00 <et024006_PowerUp+0x4fc>
80005dac:	31 b8       	mov	r8,27
80005dae:	ef 68 ff df 	st.b	r7[-33],r8
80005db2:	31 08       	mov	r8,16
80005db4:	ef 68 ff de 	st.b	r7[-34],r8
80005db8:	fc 19 c0 00 	movh	r9,0xc000
80005dbc:	ef 38 ff df 	ld.ub	r8,r7[-33]
80005dc0:	b2 08       	st.h	r9[0x0],r8
80005dc2:	fc 19 c0 20 	movh	r9,0xc020
80005dc6:	ef 38 ff de 	ld.ub	r8,r7[-34]
80005dca:	b2 08       	st.h	r9[0x0],r8
80005dcc:	4d 98       	lddpc	r8,80005f30 <et024006_PowerUp+0x72c>
80005dce:	70 08       	ld.w	r8,r8[0x0]
80005dd0:	32 89       	mov	r9,40
80005dd2:	ef 49 ff e4 	st.w	r7[-28],r9
80005dd6:	ef 48 ff e0 	st.w	r7[-32],r8
80005dda:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005dde:	ef 48 ff ec 	st.w	r7[-20],r8
80005de2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005de6:	ef 48 ff e8 	st.w	r7[-24],r8
80005dea:	ee fa ff ec 	ld.w	r10,r7[-20]
80005dee:	ef 4a ff 10 	st.w	r7[-240],r10
80005df2:	30 09       	mov	r9,0
80005df4:	ef 49 ff 0c 	st.w	r7[-244],r9
80005df8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005dfc:	ef 48 ff 08 	st.w	r7[-248],r8
80005e00:	30 0c       	mov	r12,0
80005e02:	ef 4c ff 04 	st.w	r7[-252],r12
80005e06:	ee fa ff 0c 	ld.w	r10,r7[-244]
80005e0a:	ee fb ff 08 	ld.w	r11,r7[-248]
80005e0e:	b7 3a       	mul	r10,r11
80005e10:	ee f8 ff 04 	ld.w	r8,r7[-252]
80005e14:	ee f9 ff 10 	ld.w	r9,r7[-240]
80005e18:	b3 38       	mul	r8,r9
80005e1a:	10 0a       	add	r10,r8
80005e1c:	ee fc ff 10 	ld.w	r12,r7[-240]
80005e20:	ee fb ff 08 	ld.w	r11,r7[-248]
80005e24:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005e28:	12 0a       	add	r10,r9
80005e2a:	14 99       	mov	r9,r10
80005e2c:	e0 6a 03 e7 	mov	r10,999
80005e30:	30 0b       	mov	r11,0
80005e32:	f0 0a 00 0a 	add	r10,r8,r10
80005e36:	f2 0b 00 4b 	adc	r11,r9,r11
80005e3a:	e0 68 03 e8 	mov	r8,1000
80005e3e:	30 09       	mov	r9,0
80005e40:	f0 1f 00 3d 	mcall	80005f34 <et024006_PowerUp+0x730>
80005e44:	14 98       	mov	r8,r10
80005e46:	16 99       	mov	r9,r11
80005e48:	ef 48 ff f4 	st.w	r7[-12],r8
80005e4c:	ee c8 00 bc 	sub	r8,r7,188
80005e50:	ef 48 ff f0 	st.w	r7[-16],r8
80005e54:	e1 b8 00 42 	mfsr	r8,0x108
80005e58:	10 99       	mov	r9,r8
80005e5a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005e5e:	91 09       	st.w	r8[0x0],r9
80005e60:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005e64:	70 09       	ld.w	r9,r8[0x0]
80005e66:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e6a:	10 09       	add	r9,r8
80005e6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005e70:	91 19       	st.w	r8[0x4],r9
80005e72:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005e76:	30 08       	mov	r8,0
80005e78:	f3 68 00 08 	st.b	r9[8],r8
80005e7c:	ee c8 00 bc 	sub	r8,r7,188
80005e80:	ef 48 ff f8 	st.w	r7[-8],r8
80005e84:	e1 b8 00 42 	mfsr	r8,0x108
80005e88:	ef 48 ff fc 	st.w	r7[-4],r8
80005e8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e90:	f1 39 00 08 	ld.ub	r9,r8[8]
80005e94:	30 28       	mov	r8,2
80005e96:	f0 09 18 00 	cp.b	r9,r8
80005e9a:	c0 31       	brne	80005ea0 <et024006_PowerUp+0x69c>
80005e9c:	30 08       	mov	r8,0
80005e9e:	c4 38       	rjmp	80005f24 <et024006_PowerUp+0x720>
80005ea0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ea4:	f1 39 00 08 	ld.ub	r9,r8[8]
80005ea8:	30 18       	mov	r8,1
80005eaa:	f0 09 18 00 	cp.b	r9,r8
80005eae:	c0 31       	brne	80005eb4 <et024006_PowerUp+0x6b0>
80005eb0:	30 18       	mov	r8,1
80005eb2:	c3 98       	rjmp	80005f24 <et024006_PowerUp+0x720>
80005eb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005eb8:	70 09       	ld.w	r9,r8[0x0]
80005eba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ebe:	70 18       	ld.w	r8,r8[0x4]
80005ec0:	10 39       	cp.w	r9,r8
80005ec2:	e0 88 00 1a 	brls	80005ef6 <et024006_PowerUp+0x6f2>
80005ec6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005eca:	70 08       	ld.w	r8,r8[0x0]
80005ecc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005ed0:	10 39       	cp.w	r9,r8
80005ed2:	c1 02       	brcc	80005ef2 <et024006_PowerUp+0x6ee>
80005ed4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ed8:	70 18       	ld.w	r8,r8[0x4]
80005eda:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005ede:	10 39       	cp.w	r9,r8
80005ee0:	e0 88 00 09 	brls	80005ef2 <et024006_PowerUp+0x6ee>
80005ee4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005ee8:	30 18       	mov	r8,1
80005eea:	f3 68 00 08 	st.b	r9[8],r8
80005eee:	30 18       	mov	r8,1
80005ef0:	c1 a8       	rjmp	80005f24 <et024006_PowerUp+0x720>
80005ef2:	30 08       	mov	r8,0
80005ef4:	c1 88       	rjmp	80005f24 <et024006_PowerUp+0x720>
80005ef6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005efa:	70 08       	ld.w	r8,r8[0x0]
80005efc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005f00:	10 39       	cp.w	r9,r8
80005f02:	c0 93       	brcs	80005f14 <et024006_PowerUp+0x710>
80005f04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f08:	70 18       	ld.w	r8,r8[0x4]
80005f0a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005f0e:	10 39       	cp.w	r9,r8
80005f10:	e0 88 00 09 	brls	80005f22 <et024006_PowerUp+0x71e>
80005f14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005f18:	30 18       	mov	r8,1
80005f1a:	f3 68 00 08 	st.b	r9[8],r8
80005f1e:	30 18       	mov	r8,1
80005f20:	c0 28       	rjmp	80005f24 <et024006_PowerUp+0x720>
80005f22:	30 08       	mov	r8,0
80005f24:	58 08       	cp.w	r8,0
80005f26:	ca b0       	breq	80005e7c <et024006_PowerUp+0x678>
80005f28:	2b 7d       	sub	sp,-292
80005f2a:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005f2e:	00 00       	add	r0,r0
80005f30:	00 00       	add	r0,r0
80005f32:	06 10       	sub	r0,r3
80005f34:	80 00       	ld.sh	r0,r0[0x0]
80005f36:	e8 44 eb cd 	cp.w	r4,584653

80005f38 <et024006_PowerOn>:
80005f38:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005f3c:	1a 97       	mov	r7,sp
80005f3e:	21 9d       	sub	sp,100
80005f40:	32 6c       	mov	r12,38
80005f42:	ef 6c ff b7 	st.b	r7[-73],r12
80005f46:	30 4c       	mov	r12,4
80005f48:	ef 6c ff b6 	st.b	r7[-74],r12
80005f4c:	fc 1e c0 00 	movh	lr,0xc000
80005f50:	ef 3c ff b7 	ld.ub	r12,r7[-73]
80005f54:	bc 0c       	st.h	lr[0x0],r12
80005f56:	fc 1e c0 20 	movh	lr,0xc020
80005f5a:	ef 3c ff b6 	ld.ub	r12,r7[-74]
80005f5e:	bc 0c       	st.h	lr[0x0],r12
80005f60:	fe fc 02 e0 	ld.w	r12,pc[736]
80005f64:	78 0c       	ld.w	r12,r12[0x0]
80005f66:	32 8e       	mov	lr,40
80005f68:	ef 4e ff bc 	st.w	r7[-68],lr
80005f6c:	ef 4c ff b8 	st.w	r7[-72],r12
80005f70:	ee fc ff bc 	ld.w	r12,r7[-68]
80005f74:	ef 4c ff c4 	st.w	r7[-60],r12
80005f78:	ee fc ff b8 	ld.w	r12,r7[-72]
80005f7c:	ef 4c ff c0 	st.w	r7[-64],r12
80005f80:	ee fa ff c4 	ld.w	r10,r7[-60]
80005f84:	30 0b       	mov	r11,0
80005f86:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005f8a:	30 09       	mov	r9,0
80005f8c:	f6 08 02 4c 	mul	r12,r11,r8
80005f90:	f2 0a 02 4e 	mul	lr,r9,r10
80005f94:	1c 0c       	add	r12,lr
80005f96:	f4 08 06 48 	mulu.d	r8,r10,r8
80005f9a:	12 0c       	add	r12,r9
80005f9c:	18 99       	mov	r9,r12
80005f9e:	e0 6a 03 e7 	mov	r10,999
80005fa2:	30 0b       	mov	r11,0
80005fa4:	f0 0a 00 0a 	add	r10,r8,r10
80005fa8:	f2 0b 00 4b 	adc	r11,r9,r11
80005fac:	e0 68 03 e8 	mov	r8,1000
80005fb0:	30 09       	mov	r9,0
80005fb2:	f0 1f 00 a5 	mcall	80006244 <et024006_PowerOn+0x30c>
80005fb6:	14 98       	mov	r8,r10
80005fb8:	16 99       	mov	r9,r11
80005fba:	ef 48 ff cc 	st.w	r7[-52],r8
80005fbe:	ee c8 00 64 	sub	r8,r7,100
80005fc2:	ef 48 ff c8 	st.w	r7[-56],r8
80005fc6:	e1 b8 00 42 	mfsr	r8,0x108
80005fca:	10 99       	mov	r9,r8
80005fcc:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005fd0:	91 09       	st.w	r8[0x0],r9
80005fd2:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005fd6:	70 09       	ld.w	r9,r8[0x0]
80005fd8:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005fdc:	10 09       	add	r9,r8
80005fde:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005fe2:	91 19       	st.w	r8[0x4],r9
80005fe4:	ee f9 ff c8 	ld.w	r9,r7[-56]
80005fe8:	30 08       	mov	r8,0
80005fea:	f3 68 00 08 	st.b	r9[8],r8
80005fee:	ee c8 00 64 	sub	r8,r7,100
80005ff2:	ef 48 ff d0 	st.w	r7[-48],r8
80005ff6:	e1 b8 00 42 	mfsr	r8,0x108
80005ffa:	ef 48 ff d4 	st.w	r7[-44],r8
80005ffe:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006002:	f1 39 00 08 	ld.ub	r9,r8[8]
80006006:	30 28       	mov	r8,2
80006008:	f0 09 18 00 	cp.b	r9,r8
8000600c:	c0 31       	brne	80006012 <et024006_PowerOn+0xda>
8000600e:	30 08       	mov	r8,0
80006010:	c4 38       	rjmp	80006096 <et024006_PowerOn+0x15e>
80006012:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006016:	f1 39 00 08 	ld.ub	r9,r8[8]
8000601a:	30 18       	mov	r8,1
8000601c:	f0 09 18 00 	cp.b	r9,r8
80006020:	c0 31       	brne	80006026 <et024006_PowerOn+0xee>
80006022:	30 18       	mov	r8,1
80006024:	c3 98       	rjmp	80006096 <et024006_PowerOn+0x15e>
80006026:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000602a:	70 09       	ld.w	r9,r8[0x0]
8000602c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006030:	70 18       	ld.w	r8,r8[0x4]
80006032:	10 39       	cp.w	r9,r8
80006034:	e0 88 00 1a 	brls	80006068 <et024006_PowerOn+0x130>
80006038:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000603c:	70 08       	ld.w	r8,r8[0x0]
8000603e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80006042:	10 39       	cp.w	r9,r8
80006044:	c1 02       	brcc	80006064 <et024006_PowerOn+0x12c>
80006046:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000604a:	70 18       	ld.w	r8,r8[0x4]
8000604c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80006050:	10 39       	cp.w	r9,r8
80006052:	e0 88 00 09 	brls	80006064 <et024006_PowerOn+0x12c>
80006056:	ee f9 ff d0 	ld.w	r9,r7[-48]
8000605a:	30 18       	mov	r8,1
8000605c:	f3 68 00 08 	st.b	r9[8],r8
80006060:	30 18       	mov	r8,1
80006062:	c1 a8       	rjmp	80006096 <et024006_PowerOn+0x15e>
80006064:	30 08       	mov	r8,0
80006066:	c1 88       	rjmp	80006096 <et024006_PowerOn+0x15e>
80006068:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000606c:	70 08       	ld.w	r8,r8[0x0]
8000606e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80006072:	10 39       	cp.w	r9,r8
80006074:	c0 93       	brcs	80006086 <et024006_PowerOn+0x14e>
80006076:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000607a:	70 18       	ld.w	r8,r8[0x4]
8000607c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80006080:	10 39       	cp.w	r9,r8
80006082:	e0 88 00 09 	brls	80006094 <et024006_PowerOn+0x15c>
80006086:	ee f9 ff d0 	ld.w	r9,r7[-48]
8000608a:	30 18       	mov	r8,1
8000608c:	f3 68 00 08 	st.b	r9[8],r8
80006090:	30 18       	mov	r8,1
80006092:	c0 28       	rjmp	80006096 <et024006_PowerOn+0x15e>
80006094:	30 08       	mov	r8,0
80006096:	58 08       	cp.w	r8,0
80006098:	ca b0       	breq	80005fee <et024006_PowerOn+0xb6>
8000609a:	32 68       	mov	r8,38
8000609c:	ef 68 ff d9 	st.b	r7[-39],r8
800060a0:	32 48       	mov	r8,36
800060a2:	ef 68 ff d8 	st.b	r7[-40],r8
800060a6:	fc 19 c0 00 	movh	r9,0xc000
800060aa:	ef 38 ff d9 	ld.ub	r8,r7[-39]
800060ae:	b2 08       	st.h	r9[0x0],r8
800060b0:	fc 19 c0 20 	movh	r9,0xc020
800060b4:	ef 38 ff d8 	ld.ub	r8,r7[-40]
800060b8:	b2 08       	st.h	r9[0x0],r8
800060ba:	32 68       	mov	r8,38
800060bc:	ef 68 ff db 	st.b	r7[-37],r8
800060c0:	32 c8       	mov	r8,44
800060c2:	ef 68 ff da 	st.b	r7[-38],r8
800060c6:	fc 19 c0 00 	movh	r9,0xc000
800060ca:	ef 38 ff db 	ld.ub	r8,r7[-37]
800060ce:	b2 08       	st.h	r9[0x0],r8
800060d0:	fc 19 c0 20 	movh	r9,0xc020
800060d4:	ef 38 ff da 	ld.ub	r8,r7[-38]
800060d8:	b2 08       	st.h	r9[0x0],r8
800060da:	4d a8       	lddpc	r8,80006240 <et024006_PowerOn+0x308>
800060dc:	70 08       	ld.w	r8,r8[0x0]
800060de:	32 89       	mov	r9,40
800060e0:	ef 49 ff e0 	st.w	r7[-32],r9
800060e4:	ef 48 ff dc 	st.w	r7[-36],r8
800060e8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800060ec:	ef 48 ff e8 	st.w	r7[-24],r8
800060f0:	ee f8 ff dc 	ld.w	r8,r7[-36]
800060f4:	ef 48 ff e4 	st.w	r7[-28],r8
800060f8:	ee f0 ff e8 	ld.w	r0,r7[-24]
800060fc:	30 01       	mov	r1,0
800060fe:	ee f2 ff e4 	ld.w	r2,r7[-28]
80006102:	30 03       	mov	r3,0
80006104:	e2 02 02 4a 	mul	r10,r1,r2
80006108:	e6 00 02 48 	mul	r8,r3,r0
8000610c:	10 0a       	add	r10,r8
8000610e:	e0 02 06 48 	mulu.d	r8,r0,r2
80006112:	12 0a       	add	r10,r9
80006114:	14 99       	mov	r9,r10
80006116:	e0 6a 03 e7 	mov	r10,999
8000611a:	30 0b       	mov	r11,0
8000611c:	f0 0a 00 0a 	add	r10,r8,r10
80006120:	f2 0b 00 4b 	adc	r11,r9,r11
80006124:	e0 68 03 e8 	mov	r8,1000
80006128:	30 09       	mov	r9,0
8000612a:	f0 1f 00 47 	mcall	80006244 <et024006_PowerOn+0x30c>
8000612e:	14 98       	mov	r8,r10
80006130:	16 99       	mov	r9,r11
80006132:	ef 48 ff f0 	st.w	r7[-16],r8
80006136:	ee c8 00 58 	sub	r8,r7,88
8000613a:	ef 48 ff ec 	st.w	r7[-20],r8
8000613e:	e1 b8 00 42 	mfsr	r8,0x108
80006142:	10 99       	mov	r9,r8
80006144:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006148:	91 09       	st.w	r8[0x0],r9
8000614a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000614e:	70 09       	ld.w	r9,r8[0x0]
80006150:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006154:	10 09       	add	r9,r8
80006156:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000615a:	91 19       	st.w	r8[0x4],r9
8000615c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006160:	30 08       	mov	r8,0
80006162:	f3 68 00 08 	st.b	r9[8],r8
80006166:	ee c8 00 58 	sub	r8,r7,88
8000616a:	ef 48 ff f4 	st.w	r7[-12],r8
8000616e:	e1 b8 00 42 	mfsr	r8,0x108
80006172:	ef 48 ff f8 	st.w	r7[-8],r8
80006176:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000617a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000617e:	30 28       	mov	r8,2
80006180:	f0 09 18 00 	cp.b	r9,r8
80006184:	c0 31       	brne	8000618a <et024006_PowerOn+0x252>
80006186:	30 08       	mov	r8,0
80006188:	c4 38       	rjmp	8000620e <et024006_PowerOn+0x2d6>
8000618a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000618e:	f1 39 00 08 	ld.ub	r9,r8[8]
80006192:	30 18       	mov	r8,1
80006194:	f0 09 18 00 	cp.b	r9,r8
80006198:	c0 31       	brne	8000619e <et024006_PowerOn+0x266>
8000619a:	30 18       	mov	r8,1
8000619c:	c3 98       	rjmp	8000620e <et024006_PowerOn+0x2d6>
8000619e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061a2:	70 09       	ld.w	r9,r8[0x0]
800061a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061a8:	70 18       	ld.w	r8,r8[0x4]
800061aa:	10 39       	cp.w	r9,r8
800061ac:	e0 88 00 1a 	brls	800061e0 <et024006_PowerOn+0x2a8>
800061b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061b4:	70 08       	ld.w	r8,r8[0x0]
800061b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800061ba:	10 39       	cp.w	r9,r8
800061bc:	c1 02       	brcc	800061dc <et024006_PowerOn+0x2a4>
800061be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061c2:	70 18       	ld.w	r8,r8[0x4]
800061c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800061c8:	10 39       	cp.w	r9,r8
800061ca:	e0 88 00 09 	brls	800061dc <et024006_PowerOn+0x2a4>
800061ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
800061d2:	30 18       	mov	r8,1
800061d4:	f3 68 00 08 	st.b	r9[8],r8
800061d8:	30 18       	mov	r8,1
800061da:	c1 a8       	rjmp	8000620e <et024006_PowerOn+0x2d6>
800061dc:	30 08       	mov	r8,0
800061de:	c1 88       	rjmp	8000620e <et024006_PowerOn+0x2d6>
800061e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061e4:	70 08       	ld.w	r8,r8[0x0]
800061e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800061ea:	10 39       	cp.w	r9,r8
800061ec:	c0 93       	brcs	800061fe <et024006_PowerOn+0x2c6>
800061ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061f2:	70 18       	ld.w	r8,r8[0x4]
800061f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800061f8:	10 39       	cp.w	r9,r8
800061fa:	e0 88 00 09 	brls	8000620c <et024006_PowerOn+0x2d4>
800061fe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006202:	30 18       	mov	r8,1
80006204:	f3 68 00 08 	st.b	r9[8],r8
80006208:	30 18       	mov	r8,1
8000620a:	c0 28       	rjmp	8000620e <et024006_PowerOn+0x2d6>
8000620c:	30 08       	mov	r8,0
8000620e:	58 08       	cp.w	r8,0
80006210:	ca b0       	breq	80006166 <et024006_PowerOn+0x22e>
80006212:	32 68       	mov	r8,38
80006214:	ef 68 ff ff 	st.b	r7[-1],r8
80006218:	33 c8       	mov	r8,60
8000621a:	ef 68 ff fe 	st.b	r7[-2],r8
8000621e:	fc 19 c0 00 	movh	r9,0xc000
80006222:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006226:	b2 08       	st.h	r9[0x0],r8
80006228:	fc 19 c0 20 	movh	r9,0xc020
8000622c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006230:	b2 08       	st.h	r9[0x0],r8
80006232:	30 8b       	mov	r11,8
80006234:	37 0c       	mov	r12,112
80006236:	f0 1f 00 05 	mcall	80006248 <et024006_PowerOn+0x310>
8000623a:	2e 7d       	sub	sp,-100
8000623c:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80006240:	00 00       	add	r0,r0
80006242:	06 10       	sub	r0,r3
80006244:	80 00       	ld.sh	r0,r0[0x0]
80006246:	e8 44 80 00 	cp.w	r4,557056
8000624a:	4c 4c       	lddpc	r12,80006358 <sd_mmc_mci_get_csd+0x28>
8000624c:	20 44       	sub	r4,4
8000624e:	65 63       	ld.w	r3,r2[0x58]
80006250:	69 70       	ld.w	r0,r4[0x5c]
80006252:	68 65       	ld.w	r5,r4[0x18]
80006254:	72 65       	ld.w	r5,r9[0x18]
80006256:	64 20       	ld.w	r0,r2[0x8]
80006258:	00 00       	add	r0,r0
8000625a:	00 00       	add	r0,r0
8000625c:	20 73       	sub	r3,7
8000625e:	65 63       	ld.w	r3,r2[0x58]
80006260:	74 6f       	ld.w	pc,r10[0x18]
80006262:	72 73       	ld.w	r3,r9[0x1c]
80006264:	00 00       	add	r0,r0
80006266:	00 00       	add	r0,r0
80006268:	20 45       	sub	r5,4
8000626a:	6e 63       	ld.w	r3,r7[0x18]
8000626c:	69 70       	ld.w	r0,r4[0x5c]
8000626e:	68 65       	ld.w	r5,r4[0x18]
80006270:	72 65       	ld.w	r5,r9[0x18]
80006272:	64 20       	ld.w	r0,r2[0x8]
80006274:	00 00       	add	r0,r0
	...

80006278 <is_sd_mmc_mci_card_present>:


//_____ D E F I N I T I O N S ______________________________________________

bool is_sd_mmc_mci_card_present(uint8_t slot)
{
80006278:	eb cd 40 80 	pushm	r7,lr
8000627c:	1a 97       	mov	r7,sp
8000627e:	20 1d       	sub	sp,4
80006280:	18 98       	mov	r8,r12
80006282:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80006286:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000628a:	30 18       	mov	r8,1
8000628c:	f0 09 18 00 	cp.b	r9,r8
80006290:	e0 88 00 04 	brls	80006298 <is_sd_mmc_mci_card_present+0x20>
    return false;
80006294:	30 08       	mov	r8,0
80006296:	c1 88       	rjmp	800062c6 <is_sd_mmc_mci_card_present+0x4e>

  switch(slot)
80006298:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000629c:	58 08       	cp.w	r8,0
8000629e:	c0 b0       	breq	800062b4 <is_sd_mmc_mci_card_present+0x3c>
800062a0:	58 18       	cp.w	r8,1
800062a2:	c1 11       	brne	800062c4 <is_sd_mmc_mci_card_present+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_CARD_DETECT)==SD_SLOT_4BITS_CARD_DETECT_VALUE);
800062a4:	32 8c       	mov	r12,40
800062a6:	f0 1f 00 0b 	mcall	800062d0 <is_sd_mmc_mci_card_present+0x58>
800062aa:	18 98       	mov	r8,r12
800062ac:	58 08       	cp.w	r8,0
800062ae:	5f 08       	sreq	r8
800062b0:	5c 58       	castu.b	r8
800062b2:	c0 a8       	rjmp	800062c6 <is_sd_mmc_mci_card_present+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_CARD_DETECT)==SD_SLOT_8BITS_CARD_DETECT_VALUE);
800062b4:	32 bc       	mov	r12,43
800062b6:	f0 1f 00 07 	mcall	800062d0 <is_sd_mmc_mci_card_present+0x58>
800062ba:	18 98       	mov	r8,r12
800062bc:	58 08       	cp.w	r8,0
800062be:	5f 08       	sreq	r8
800062c0:	5c 58       	castu.b	r8
800062c2:	c0 28       	rjmp	800062c6 <is_sd_mmc_mci_card_present+0x4e>
  }

  return false;
800062c4:	30 08       	mov	r8,0
}
800062c6:	10 9c       	mov	r12,r8
800062c8:	2f fd       	sub	sp,-4
800062ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800062ce:	00 00       	add	r0,r0
800062d0:	80 00       	ld.sh	r0,r0[0x0]
800062d2:	90 80       	ld.uh	r0,r8[0x0]

800062d4 <is_sd_mmc_mci_card_protected>:

bool is_sd_mmc_mci_card_protected(uint8_t slot)
{
800062d4:	eb cd 40 80 	pushm	r7,lr
800062d8:	1a 97       	mov	r7,sp
800062da:	20 1d       	sub	sp,4
800062dc:	18 98       	mov	r8,r12
800062de:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
800062e2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800062e6:	30 18       	mov	r8,1
800062e8:	f0 09 18 00 	cp.b	r9,r8
800062ec:	e0 88 00 04 	brls	800062f4 <is_sd_mmc_mci_card_protected+0x20>
    return false;
800062f0:	30 08       	mov	r8,0
800062f2:	c1 88       	rjmp	80006322 <is_sd_mmc_mci_card_protected+0x4e>

  switch(slot)
800062f4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800062f8:	58 08       	cp.w	r8,0
800062fa:	c0 b0       	breq	80006310 <is_sd_mmc_mci_card_protected+0x3c>
800062fc:	58 18       	cp.w	r8,1
800062fe:	c1 11       	brne	80006320 <is_sd_mmc_mci_card_protected+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_WRITE_PROTECT)==SD_SLOT_4BITS_WRITE_PROTECT_VALUE);
80006300:	32 6c       	mov	r12,38
80006302:	f0 1f 00 0b 	mcall	8000632c <is_sd_mmc_mci_card_protected+0x58>
80006306:	18 98       	mov	r8,r12
80006308:	58 18       	cp.w	r8,1
8000630a:	5f 08       	sreq	r8
8000630c:	5c 58       	castu.b	r8
8000630e:	c0 a8       	rjmp	80006322 <is_sd_mmc_mci_card_protected+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_WRITE_PROTECT)==SD_SLOT_8BITS_WRITE_PROTECT_VALUE);
80006310:	36 cc       	mov	r12,108
80006312:	f0 1f 00 07 	mcall	8000632c <is_sd_mmc_mci_card_protected+0x58>
80006316:	18 98       	mov	r8,r12
80006318:	58 18       	cp.w	r8,1
8000631a:	5f 08       	sreq	r8
8000631c:	5c 58       	castu.b	r8
8000631e:	c0 28       	rjmp	80006322 <is_sd_mmc_mci_card_protected+0x4e>
  }

  return false;
80006320:	30 08       	mov	r8,0
}
80006322:	10 9c       	mov	r12,r8
80006324:	2f fd       	sub	sp,-4
80006326:	e3 cd 80 80 	ldm	sp++,r7,pc
8000632a:	00 00       	add	r0,r0
8000632c:	80 00       	ld.sh	r0,r0[0x0]
8000632e:	90 80       	ld.uh	r0,r8[0x0]

80006330 <sd_mmc_mci_get_csd>:

static bool  sd_mmc_mci_get_csd(uint8_t slot)
{
80006330:	eb cd 40 80 	pushm	r7,lr
80006334:	1a 97       	mov	r7,sp
80006336:	20 fd       	sub	sp,60
80006338:	18 98       	mov	r8,r12
8000633a:	ef 68 ff c4 	st.b	r7[-60],r8

  uint32_t max_Read_DataBlock_Length;
  uint32_t mult;
  uint32_t blocknr;
  uint8_t tmp;
  const uint16_t freq_unit[4] = {10, 100, 1000, 10000};
8000633e:	fe f9 02 b2 	ld.w	r9,pc[690]
80006342:	ee c8 00 28 	sub	r8,r7,40
80006346:	30 8a       	mov	r10,8
80006348:	12 9b       	mov	r11,r9
8000634a:	10 9c       	mov	r12,r8
8000634c:	f0 1f 00 aa 	mcall	800065f4 <sd_mmc_mci_get_csd+0x2c4>
  const uint8_t mult_fact[16] = {0, 10, 12, 13, 15, 20, 26, 30, 35, 40, 45, 52, 55, 60, 70, 80}; // MMC tabs...
80006350:	fe f8 02 a8 	ld.w	r8,pc[680]
80006354:	ee ca 00 38 	sub	r10,r7,56
80006358:	10 9b       	mov	r11,r8
8000635a:	f6 e8 00 00 	ld.d	r8,r11[0]
8000635e:	f4 e9 00 00 	st.d	r10[0],r8
80006362:	f6 e8 00 08 	ld.d	r8,r11[8]
80006366:	f4 e9 00 08 	st.d	r10[8],r8

  if (slot > MCI_LAST_SLOTS)
8000636a:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000636e:	30 18       	mov	r8,1
80006370:	f0 09 18 00 	cp.b	r9,r8
80006374:	e0 88 00 04 	brls	8000637c <sd_mmc_mci_get_csd+0x4c>
    return false;
80006378:	30 08       	mov	r8,0
8000637a:	c3 69       	rjmp	800065e6 <sd_mmc_mci_get_csd+0x2b6>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000637c:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006380:	fe f9 02 7c 	ld.w	r9,pc[636]
80006384:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006388:	10 9a       	mov	r10,r8
8000638a:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000638e:	fe f8 02 72 	ld.w	r8,pc[626]
80006392:	70 08       	ld.w	r8,r8[0x0]
80006394:	12 9b       	mov	r11,r9
80006396:	10 9c       	mov	r12,r8
80006398:	f0 1f 00 9b 	mcall	80006604 <sd_mmc_mci_get_csd+0x2d4>

  //-- (CMD9)
  if (mci_send_cmd(mci, SD_MMC_SEND_CSD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
8000639c:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800063a0:	fe f8 02 68 	ld.w	r8,pc[616]
800063a4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800063a8:	fe f8 02 58 	ld.w	r8,pc[600]
800063ac:	70 08       	ld.w	r8,r8[0x0]
800063ae:	12 9a       	mov	r10,r9
800063b0:	e0 6b 10 89 	mov	r11,4233
800063b4:	10 9c       	mov	r12,r8
800063b6:	f0 1f 00 96 	mcall	8000660c <sd_mmc_mci_get_csd+0x2dc>
800063ba:	18 98       	mov	r8,r12
800063bc:	58 08       	cp.w	r8,0
800063be:	c0 30       	breq	800063c4 <sd_mmc_mci_get_csd+0x94>
    return false;
800063c0:	30 08       	mov	r8,0
800063c2:	c1 29       	rjmp	800065e6 <sd_mmc_mci_get_csd+0x2b6>


  csd.csd[0] = mci_read_response(mci);
800063c4:	fe f8 02 3c 	ld.w	r8,pc[572]
800063c8:	70 08       	ld.w	r8,r8[0x0]
800063ca:	10 9c       	mov	r12,r8
800063cc:	f0 1f 00 91 	mcall	80006610 <sd_mmc_mci_get_csd+0x2e0>
800063d0:	18 98       	mov	r8,r12
800063d2:	ef 48 ff e0 	st.w	r7[-32],r8
  csd.csd[1] = mci_read_response(mci);
800063d6:	fe f8 02 2a 	ld.w	r8,pc[554]
800063da:	70 08       	ld.w	r8,r8[0x0]
800063dc:	10 9c       	mov	r12,r8
800063de:	f0 1f 00 8d 	mcall	80006610 <sd_mmc_mci_get_csd+0x2e0>
800063e2:	18 98       	mov	r8,r12
800063e4:	ef 48 ff e4 	st.w	r7[-28],r8
  csd.csd[2] = mci_read_response(mci);
800063e8:	fe f8 02 18 	ld.w	r8,pc[536]
800063ec:	70 08       	ld.w	r8,r8[0x0]
800063ee:	10 9c       	mov	r12,r8
800063f0:	f0 1f 00 88 	mcall	80006610 <sd_mmc_mci_get_csd+0x2e0>
800063f4:	18 98       	mov	r8,r12
800063f6:	ef 48 ff e8 	st.w	r7[-24],r8
  csd.csd[3] = mci_read_response(mci);
800063fa:	fe f8 02 06 	ld.w	r8,pc[518]
800063fe:	70 08       	ld.w	r8,r8[0x0]
80006400:	10 9c       	mov	r12,r8
80006402:	f0 1f 00 84 	mcall	80006610 <sd_mmc_mci_get_csd+0x2e0>
80006406:	18 98       	mov	r8,r12
80006408:	ef 48 ff ec 	st.w	r7[-20],r8

  //-- Read "System specification version", only available on MMC card
  // field: SPEC_VERS (only on MMC)
  if (MMC_CARD & g_card_type[slot]) // TO BE ADDED
8000640c:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006410:	fe f9 02 04 	ld.w	r9,pc[516]
80006414:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006418:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000641c:	5c 58       	castu.b	r8
8000641e:	c1 40       	breq	80006446 <sd_mmc_mci_get_csd+0x116>
  {
    if (CSD_SPEC_VER_4_0 == (MSB0(csd.csd[0]) & CSD_MSK_SPEC_VER))
80006420:	ee c8 00 20 	sub	r8,r7,32
80006424:	11 88       	ld.ub	r8,r8[0x0]
80006426:	e2 18 00 3c 	andl	r8,0x3c,COH
8000642a:	59 08       	cp.w	r8,16
8000642c:	c0 d1       	brne	80006446 <sd_mmc_mci_get_csd+0x116>
    {
      g_card_type[slot] |= MMC_CARD_V4;
8000642e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006432:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006436:	4f 8a       	lddpc	r10,80006614 <sd_mmc_mci_get_csd+0x2e4>
80006438:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000643c:	a3 a8       	sbr	r8,0x2
8000643e:	5c 58       	castu.b	r8
80006440:	4f 5a       	lddpc	r10,80006614 <sd_mmc_mci_get_csd+0x2e4>
80006442:	f4 09 0b 08 	st.b	r10[r9],r8
    }
  }

  //-- Compute MMC/SD speed
  // field: TRAN_SPEED (CSD V1 & V2 are the same)
  g_card_freq[slot]  = mult_fact[csd.csd_v1.tranSpeed >> 3]; // Get Multiplier factor
80006446:	ef 3a ff c4 	ld.ub	r10,r7[-60]
8000644a:	ef 38 ff e3 	ld.ub	r8,r7[-29]
8000644e:	a3 98       	lsr	r8,0x3
80006450:	5c 58       	castu.b	r8
80006452:	ee 08 00 08 	add	r8,r7,r8
80006456:	f1 38 ff c8 	ld.ub	r8,r8[-56]
8000645a:	4f 09       	lddpc	r9,80006618 <sd_mmc_mci_get_csd+0x2e8>
8000645c:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  if (SD_CARD & g_card_type[slot])
80006460:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006464:	4e c9       	lddpc	r9,80006614 <sd_mmc_mci_get_csd+0x2e4>
80006466:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000646a:	e2 18 00 02 	andl	r8,0x2,COH
8000646e:	c2 00       	breq	800064ae <sd_mmc_mci_get_csd+0x17e>
  {
    // SD card don't have same frequency that MMC card
    if( 26 == g_card_freq[slot] )
80006470:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006474:	4e 98       	lddpc	r8,80006618 <sd_mmc_mci_get_csd+0x2e8>
80006476:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
8000647a:	31 a8       	mov	r8,26
8000647c:	f0 09 19 00 	cp.h	r9,r8
80006480:	c0 81       	brne	80006490 <sd_mmc_mci_get_csd+0x160>
    {
      g_card_freq[slot] = 25;
80006482:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80006486:	4e 59       	lddpc	r9,80006618 <sd_mmc_mci_get_csd+0x2e8>
80006488:	31 98       	mov	r8,25
8000648a:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
8000648e:	c1 08       	rjmp	800064ae <sd_mmc_mci_get_csd+0x17e>
    }
    else if( 52 == g_card_freq[slot] )
80006490:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006494:	4e 18       	lddpc	r8,80006618 <sd_mmc_mci_get_csd+0x2e8>
80006496:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
8000649a:	33 48       	mov	r8,52
8000649c:	f0 09 19 00 	cp.h	r9,r8
800064a0:	c0 71       	brne	800064ae <sd_mmc_mci_get_csd+0x17e>
    {
      g_card_freq[slot] = 50;
800064a2:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800064a6:	4d d9       	lddpc	r9,80006618 <sd_mmc_mci_get_csd+0x2e8>
800064a8:	33 28       	mov	r8,50
800064aa:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
    }
  }
  g_card_freq[slot] *= freq_unit[ csd.csd_v1.tranSpeed&0x07 ]; // Get transfer rate unit
800064ae:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800064b2:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800064b6:	4d 98       	lddpc	r8,80006618 <sd_mmc_mci_get_csd+0x2e8>
800064b8:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800064bc:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800064c0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800064c4:	a1 78       	lsl	r8,0x1
800064c6:	ee 08 00 08 	add	r8,r7,r8
800064ca:	f1 08 ff d8 	ld.sh	r8,r8[-40]
800064ce:	f2 08 02 48 	mul	r8,r9,r8
800064d2:	5c 88       	casts.h	r8
800064d4:	4d 19       	lddpc	r9,80006618 <sd_mmc_mci_get_csd+0x2e8>
800064d6:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

  //-- Compute card size in number of block
  // field: WRITE_BL_LEN, READ_BL_LEN, C_SIZE (CSD V1 & V2 are not the same)
  if (SD_CARD_HC & g_card_type[slot])
800064da:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800064de:	4c e9       	lddpc	r9,80006614 <sd_mmc_mci_get_csd+0x2e4>
800064e0:	f2 08 07 08 	ld.ub	r8,r9[r8]
800064e4:	e2 18 00 10 	andl	r8,0x10,COH
800064e8:	c2 10       	breq	8000652a <sd_mmc_mci_get_csd+0x1fa>
  {
    g_card_size[slot] = (csd.csd_v2.deviceSizeH<<16)+(csd.csd_v2.deviceSizeL&0xFFff);
800064ea:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800064ee:	ee f8 ff e4 	ld.w	r8,r7[-28]
800064f2:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800064f6:	5c 58       	castu.b	r8
800064f8:	f0 0a 15 10 	lsl	r10,r8,0x10
800064fc:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80006500:	5c 78       	castu.h	r8
80006502:	f4 08 00 08 	add	r8,r10,r8
80006506:	10 9a       	mov	r10,r8
80006508:	4c 58       	lddpc	r8,8000661c <sd_mmc_mci_get_csd+0x2ec>
8000650a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

    // memory capacity = (C_SIZE+1) * 1K sector
    g_card_size[slot] = (g_card_size[slot] + 1) << 10;  // unit 512B
8000650e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006512:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80006516:	4c 28       	lddpc	r8,8000661c <sd_mmc_mci_get_csd+0x2ec>
80006518:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000651c:	2f f8       	sub	r8,-1
8000651e:	f0 0a 15 0a 	lsl	r10,r8,0xa
80006522:	4b f8       	lddpc	r8,8000661c <sd_mmc_mci_get_csd+0x2ec>
80006524:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80006528:	c5 e8       	rjmp	800065e4 <sd_mmc_mci_get_csd+0x2b4>
  }
  else
  {
    // Check block size
    tmp = csd.csd_v1.writeBlLen; // WRITE_BL_LEN
8000652a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000652e:	f1 d8 c2 c4 	bfextu	r8,r8,0x16,0x4
80006532:	5c 58       	castu.b	r8
80006534:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
80006538:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000653c:	30 88       	mov	r8,8
8000653e:	f0 09 18 00 	cp.b	r9,r8
80006542:	e0 8b 00 04 	brhi	8000654a <sd_mmc_mci_get_csd+0x21a>
      return false;  // block size < 512B not supported by firmware
80006546:	30 08       	mov	r8,0
80006548:	c4 f8       	rjmp	800065e6 <sd_mmc_mci_get_csd+0x2b6>

    tmp = csd.csd_v1.readBlLen; // READ_BL_LEN
8000654a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000654e:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
80006552:	5c 58       	castu.b	r8
80006554:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
80006558:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000655c:	30 88       	mov	r8,8
8000655e:	f0 09 18 00 	cp.b	r9,r8
80006562:	e0 8b 00 04 	brhi	8000656a <sd_mmc_mci_get_csd+0x23a>
      return false;  // block size < 512B not supported by firmware
80006566:	30 08       	mov	r8,0
80006568:	c3 f8       	rjmp	800065e6 <sd_mmc_mci_get_csd+0x2b6>

    //// Compute Memory Capacity
    // compute MULT
    mult = 1 << (csd.csd_v1.cSizeMult + 2);
8000656a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000656e:	f1 d8 c1 e3 	bfextu	r8,r8,0xf,0x3
80006572:	5c 58       	castu.b	r8
80006574:	2f e8       	sub	r8,-2
80006576:	30 19       	mov	r9,1
80006578:	f2 08 09 48 	lsl	r8,r9,r8
8000657c:	ef 48 ff f4 	st.w	r7[-12],r8
    max_Read_DataBlock_Length = 1<<csd.csd_v1.readBlLen;
80006580:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006584:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
80006588:	5c 58       	castu.b	r8
8000658a:	30 19       	mov	r9,1
8000658c:	f2 08 09 48 	lsl	r8,r9,r8
80006590:	ef 48 ff f0 	st.w	r7[-16],r8
    // compute MSB of C_SIZE
    blocknr = csd.csd_v1.deviceSizeH << 2;
80006594:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006598:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
8000659c:	5c 88       	casts.h	r8
8000659e:	5c 78       	castu.h	r8
800065a0:	a3 68       	lsl	r8,0x2
800065a2:	ef 48 ff f8 	st.w	r7[-8],r8
    // compute MULT * (LSB of C-SIZE + MSB already computed + 1) = BLOCKNR
    blocknr = mult * ( blocknr + csd.csd_v1.deviceSizeL + 1 );
800065a6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800065aa:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
800065ae:	5c 58       	castu.b	r8
800065b0:	10 99       	mov	r9,r8
800065b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800065b6:	f2 08 00 08 	add	r8,r9,r8
800065ba:	f0 c9 ff ff 	sub	r9,r8,-1
800065be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800065c2:	f2 08 02 48 	mul	r8,r9,r8
800065c6:	ef 48 ff f8 	st.w	r7[-8],r8
    g_card_size[slot] = ((max_Read_DataBlock_Length * blocknr)/512);
800065ca:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800065ce:	ee fa ff f0 	ld.w	r10,r7[-16]
800065d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800065d6:	f4 08 02 48 	mul	r8,r10,r8
800065da:	f0 0a 16 09 	lsr	r10,r8,0x9
800065de:	49 08       	lddpc	r8,8000661c <sd_mmc_mci_get_csd+0x2ec>
800065e0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  }

  return true;
800065e4:	30 18       	mov	r8,1
}
800065e6:	10 9c       	mov	r12,r8
800065e8:	2f 1d       	sub	sp,-60
800065ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800065ee:	00 00       	add	r0,r0
800065f0:	80 00       	ld.sh	r0,r0[0x0]
800065f2:	f4 bc       	*unknown*
800065f4:	80 00       	ld.sh	r0,r0[0x0]
800065f6:	ea d6 80 00 	satsub.w	r6,r5,-32768
800065fa:	f4 c4 00 00 	sub	r4,r10,0
800065fe:	0e 00       	add	r0,r7
80006600:	00 00       	add	r0,r0
80006602:	01 34       	ld.ub	r4,r0++
80006604:	80 00       	ld.sh	r0,r0[0x0]
80006606:	97 ec       	st.w	r11[0x38],r12
80006608:	00 00       	add	r0,r0
8000660a:	0b f0       	ld.ub	r0,r5[0x7]
8000660c:	80 00       	ld.sh	r0,r0[0x0]
8000660e:	96 54       	ld.sh	r4,r11[0xa]
80006610:	80 00       	ld.sh	r0,r0[0x0]
80006612:	97 8c       	st.w	r11[0x20],r12
80006614:	00 00       	add	r0,r0
80006616:	10 08       	add	r8,r8
80006618:	00 00       	add	r0,r0
8000661a:	0e 02       	add	r2,r7
8000661c:	00 00       	add	r0,r0
8000661e:	0b f8       	ld.ub	r8,r5[0x7]

80006620 <sd_mmc_get_ext_csd>:

static bool  sd_mmc_get_ext_csd( uint8_t slot )
{
80006620:	eb cd 40 80 	pushm	r7,lr
80006624:	1a 97       	mov	r7,sp
80006626:	20 ad       	sub	sp,40
80006628:	18 98       	mov	r8,r12
8000662a:	ef 68 ff d8 	st.b	r7[-40],r8
  uint8_t  i;
  uint32_t val;

  if (slot > MCI_LAST_SLOTS)
8000662e:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006632:	30 18       	mov	r8,1
80006634:	f0 09 18 00 	cp.b	r9,r8
80006638:	e0 88 00 04 	brls	80006640 <sd_mmc_get_ext_csd+0x20>
    return false;
8000663c:	30 08       	mov	r8,0
8000663e:	cb e8       	rjmp	800067ba <sd_mmc_get_ext_csd+0x19a>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006640:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80006644:	4e 09       	lddpc	r9,800067c4 <sd_mmc_get_ext_csd+0x1a4>
80006646:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000664a:	10 9a       	mov	r10,r8
8000664c:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006650:	4d e8       	lddpc	r8,800067c8 <sd_mmc_get_ext_csd+0x1a8>
80006652:	70 08       	ld.w	r8,r8[0x0]
80006654:	12 9b       	mov	r11,r9
80006656:	10 9c       	mov	r12,r8
80006658:	f0 1f 00 5d 	mcall	800067cc <sd_mmc_get_ext_csd+0x1ac>

  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE); // Ext CSD = 512B size
8000665c:	4d b8       	lddpc	r8,800067c8 <sd_mmc_get_ext_csd+0x1a8>
8000665e:	70 08       	ld.w	r8,r8[0x0]
80006660:	e0 6b 02 00 	mov	r11,512
80006664:	10 9c       	mov	r12,r8
80006666:	f0 1f 00 5b 	mcall	800067d0 <sd_mmc_get_ext_csd+0x1b0>
  mci_set_block_count(mci, 1);
8000666a:	4d 88       	lddpc	r8,800067c8 <sd_mmc_get_ext_csd+0x1a8>
8000666c:	70 08       	ld.w	r8,r8[0x0]
8000666e:	30 1b       	mov	r11,1
80006670:	10 9c       	mov	r12,r8
80006672:	f0 1f 00 59 	mcall	800067d4 <sd_mmc_get_ext_csd+0x1b4>

  //** (CMD8)
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
80006676:	4d 58       	lddpc	r8,800067c8 <sd_mmc_get_ext_csd+0x1a8>
80006678:	70 08       	ld.w	r8,r8[0x0]
8000667a:	30 0a       	mov	r10,0
8000667c:	e4 7b 10 48 	mov	r11,331848
80006680:	10 9c       	mov	r12,r8
80006682:	f0 1f 00 56 	mcall	800067d8 <sd_mmc_get_ext_csd+0x1b8>
80006686:	18 98       	mov	r8,r12
80006688:	58 08       	cp.w	r8,0
8000668a:	c0 30       	breq	80006690 <sd_mmc_get_ext_csd+0x70>
    return false;
8000668c:	30 08       	mov	r8,0
8000668e:	c9 68       	rjmp	800067ba <sd_mmc_get_ext_csd+0x19a>

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
80006690:	34 08       	mov	r8,64
80006692:	ef 68 ff e3 	st.b	r7[-29],r8
80006696:	c8 a8       	rjmp	800067aa <sd_mmc_get_ext_csd+0x18a>
  {
    while(!(mci_rx_ready(mci)));
80006698:	4c c8       	lddpc	r8,800067c8 <sd_mmc_get_ext_csd+0x1a8>
8000669a:	70 08       	ld.w	r8,r8[0x0]
8000669c:	ef 48 ff e4 	st.w	r7[-28],r8
800066a0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800066a4:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800066a8:	4c d8       	lddpc	r8,800067dc <sd_mmc_get_ext_csd+0x1bc>
800066aa:	70 08       	ld.w	r8,r8[0x0]
800066ac:	10 99       	mov	r9,r8
800066ae:	e6 19 01 e0 	andh	r9,0x1e0,COH
800066b2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800066b6:	71 08       	ld.w	r8,r8[0x40]
800066b8:	f3 e8 10 08 	or	r8,r9,r8
800066bc:	10 99       	mov	r9,r8
800066be:	4c 88       	lddpc	r8,800067dc <sd_mmc_get_ext_csd+0x1bc>
800066c0:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800066c2:	4c 78       	lddpc	r8,800067dc <sd_mmc_get_ext_csd+0x1bc>
800066c4:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
800066c6:	e2 18 00 02 	andl	r8,0x2,COH
800066ca:	5f 18       	srne	r8
800066cc:	58 08       	cp.w	r8,0
800066ce:	ce 50       	breq	80006698 <sd_mmc_get_ext_csd+0x78>
    mci_rd_data(mci);
800066d0:	4b e8       	lddpc	r8,800067c8 <sd_mmc_get_ext_csd+0x1a8>
800066d2:	70 08       	ld.w	r8,r8[0x0]
800066d4:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
800066d8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800066dc:	70 c8       	ld.w	r8,r8[0x30]
    while(!(mci_rx_ready(mci)));
800066de:	4b b8       	lddpc	r8,800067c8 <sd_mmc_get_ext_csd+0x1a8>
800066e0:	70 08       	ld.w	r8,r8[0x0]
800066e2:	ef 48 ff f0 	st.w	r7[-16],r8
800066e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800066ea:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800066ee:	4b c8       	lddpc	r8,800067dc <sd_mmc_get_ext_csd+0x1bc>
800066f0:	70 08       	ld.w	r8,r8[0x0]
800066f2:	10 99       	mov	r9,r8
800066f4:	e6 19 01 e0 	andh	r9,0x1e0,COH
800066f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800066fc:	71 08       	ld.w	r8,r8[0x40]
800066fe:	f3 e8 10 08 	or	r8,r9,r8
80006702:	10 99       	mov	r9,r8
80006704:	4b 68       	lddpc	r8,800067dc <sd_mmc_get_ext_csd+0x1bc>
80006706:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006708:	4b 58       	lddpc	r8,800067dc <sd_mmc_get_ext_csd+0x1bc>
8000670a:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
8000670c:	e2 18 00 02 	andl	r8,0x2,COH
80006710:	5f 18       	srne	r8
80006712:	58 08       	cp.w	r8,0
80006714:	ce 50       	breq	800066de <sd_mmc_get_ext_csd+0xbe>
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
80006716:	ef 39 ff e3 	ld.ub	r9,r7[-29]
8000671a:	32 68       	mov	r8,38
8000671c:	f0 09 18 00 	cp.b	r9,r8
80006720:	c1 c1       	brne	80006758 <sd_mmc_get_ext_csd+0x138>
80006722:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80006726:	4a f9       	lddpc	r9,800067e0 <sd_mmc_get_ext_csd+0x1c0>
80006728:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000672c:	e2 18 00 20 	andl	r8,0x20,COH
80006730:	c1 40       	breq	80006758 <sd_mmc_get_ext_csd+0x138>
    {
      // If MMC HC then read Sector Count. Byte 212 is LSB, Byte 215 is MSB.
      val = mci_rd_data(mci);
80006732:	4a 68       	lddpc	r8,800067c8 <sd_mmc_get_ext_csd+0x1a8>
80006734:	70 08       	ld.w	r8,r8[0x0]
80006736:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
8000673a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000673e:	70 c8       	ld.w	r8,r8[0x30]
80006740:	ef 48 ff dc 	st.w	r7[-36],r8
      g_card_size[slot] = swap32(val);
80006744:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006748:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000674c:	5c b8       	swap.b	r8
8000674e:	10 9a       	mov	r10,r8
80006750:	4a 58       	lddpc	r8,800067e4 <sd_mmc_get_ext_csd+0x1c4>
80006752:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  for (i = (512L/8); i!=0; i--)
  {
    while(!(mci_rx_ready(mci)));
    mci_rd_data(mci);
    while(!(mci_rx_ready(mci)));
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
80006756:	c2 58       	rjmp	800067a0 <sd_mmc_get_ext_csd+0x180>
      val = mci_rd_data(mci);
      g_card_size[slot] = swap32(val);
    }
    else
    {
      val = mci_rd_data(mci);
80006758:	49 c8       	lddpc	r8,800067c8 <sd_mmc_get_ext_csd+0x1a8>
8000675a:	70 08       	ld.w	r8,r8[0x0]
8000675c:	ef 48 ff fc 	st.w	r7[-4],r8
80006760:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006764:	70 c8       	ld.w	r8,r8[0x30]
80006766:	ef 48 ff dc 	st.w	r7[-36],r8
      if( (64-24) == i )
8000676a:	ef 39 ff e3 	ld.ub	r9,r7[-29]
8000676e:	32 88       	mov	r8,40
80006770:	f0 09 18 00 	cp.b	r9,r8
80006774:	c1 61       	brne	800067a0 <sd_mmc_get_ext_csd+0x180>
      {  // Read byte at offset 196
        if( MSB0(val) & 0x02 )
80006776:	ee c8 00 24 	sub	r8,r7,36
8000677a:	11 88       	ld.ub	r8,r8[0x0]
8000677c:	e2 18 00 02 	andl	r8,0x2,COH
80006780:	c0 90       	breq	80006792 <sd_mmc_get_ext_csd+0x172>
          g_card_freq[slot] = 52*1000;
80006782:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80006786:	49 99       	lddpc	r9,800067e8 <sd_mmc_get_ext_csd+0x1c8>
80006788:	fe 78 cb 20 	mov	r8,-13536
8000678c:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
80006790:	c0 88       	rjmp	800067a0 <sd_mmc_get_ext_csd+0x180>
        else
          g_card_freq[slot] = 26*1000;
80006792:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80006796:	49 59       	lddpc	r9,800067e8 <sd_mmc_get_ext_csd+0x1c8>
80006798:	e0 68 65 90 	mov	r8,26000
8000679c:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
    return false;

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
800067a0:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800067a4:	20 18       	sub	r8,1
800067a6:	ef 68 ff e3 	st.b	r7[-29],r8
800067aa:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800067ae:	30 08       	mov	r8,0
800067b0:	f0 09 18 00 	cp.b	r9,r8
800067b4:	fe 91 ff 72 	brne	80006698 <sd_mmc_get_ext_csd+0x78>
          g_card_freq[slot] = 26*1000;
      }
    }
  }

   return true;
800067b8:	30 18       	mov	r8,1
}
800067ba:	10 9c       	mov	r12,r8
800067bc:	2f 6d       	sub	sp,-40
800067be:	e3 cd 80 80 	ldm	sp++,r7,pc
800067c2:	00 00       	add	r0,r0
800067c4:	00 00       	add	r0,r0
800067c6:	0e 00       	add	r0,r7
800067c8:	00 00       	add	r0,r0
800067ca:	01 34       	ld.ub	r4,r0++
800067cc:	80 00       	ld.sh	r0,r0[0x0]
800067ce:	97 ec       	st.w	r11[0x38],r12
800067d0:	80 00       	ld.sh	r0,r0[0x0]
800067d2:	95 d4       	st.w	r10[0x34],r4
800067d4:	80 00       	ld.sh	r0,r0[0x0]
800067d6:	96 1e       	ld.sh	lr,r11[0x2]
800067d8:	80 00       	ld.sh	r0,r0[0x0]
800067da:	96 54       	ld.sh	r4,r11[0xa]
800067dc:	00 00       	add	r0,r0
800067de:	07 b4       	ld.ub	r4,r3[0x3]
800067e0:	00 00       	add	r0,r0
800067e2:	10 08       	add	r8,r8
800067e4:	00 00       	add	r0,r0
800067e6:	0b f8       	ld.ub	r8,r5[0x7]
800067e8:	00 00       	add	r0,r0
800067ea:	0e 02       	add	r2,r7

800067ec <sd_mmc_set_block_len>:

static bool  sd_mmc_set_block_len(uint8_t slot, uint16_t length )
{
800067ec:	eb cd 40 80 	pushm	r7,lr
800067f0:	1a 97       	mov	r7,sp
800067f2:	20 2d       	sub	sp,8
800067f4:	18 99       	mov	r9,r12
800067f6:	16 98       	mov	r8,r11
800067f8:	ef 69 ff fc 	st.b	r7[-4],r9
800067fc:	ef 58 ff f8 	st.h	r7[-8],r8
  if (slot > MCI_LAST_SLOTS)
80006800:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006804:	30 18       	mov	r8,1
80006806:	f0 09 18 00 	cp.b	r9,r8
8000680a:	e0 88 00 04 	brls	80006812 <sd_mmc_set_block_len+0x26>
    return false;
8000680e:	30 08       	mov	r8,0
80006810:	c3 c8       	rjmp	80006888 <sd_mmc_set_block_len+0x9c>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006812:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006816:	49 f9       	lddpc	r9,80006890 <sd_mmc_set_block_len+0xa4>
80006818:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000681c:	10 9a       	mov	r10,r8
8000681e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006822:	49 d8       	lddpc	r8,80006894 <sd_mmc_set_block_len+0xa8>
80006824:	70 08       	ld.w	r8,r8[0x0]
80006826:	12 9b       	mov	r11,r9
80006828:	10 9c       	mov	r12,r8
8000682a:	f0 1f 00 1c 	mcall	80006898 <sd_mmc_set_block_len+0xac>

  if(mci_send_cmd(mci, SD_MMC_SET_BLOCKLEN_CMD, length)!=MCI_SUCCESS)
8000682e:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80006832:	49 98       	lddpc	r8,80006894 <sd_mmc_set_block_len+0xa8>
80006834:	70 08       	ld.w	r8,r8[0x0]
80006836:	12 9a       	mov	r10,r9
80006838:	e0 6b 10 50 	mov	r11,4176
8000683c:	10 9c       	mov	r12,r8
8000683e:	f0 1f 00 18 	mcall	8000689c <sd_mmc_set_block_len+0xb0>
80006842:	18 98       	mov	r8,r12
80006844:	58 08       	cp.w	r8,0
80006846:	c0 30       	breq	8000684c <sd_mmc_set_block_len+0x60>
    return false;
80006848:	30 08       	mov	r8,0
8000684a:	c1 f8       	rjmp	80006888 <sd_mmc_set_block_len+0x9c>

  // check response, card must be in TRAN state
  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
8000684c:	49 28       	lddpc	r8,80006894 <sd_mmc_set_block_len+0xa8>
8000684e:	70 08       	ld.w	r8,r8[0x0]
80006850:	10 9c       	mov	r12,r8
80006852:	f0 1f 00 14 	mcall	800068a0 <sd_mmc_set_block_len+0xb4>
80006856:	18 98       	mov	r8,r12
80006858:	e4 18 e0 02 	andh	r8,0xe002
8000685c:	e0 18 0e 00 	andl	r8,0xe00
80006860:	e0 48 08 00 	cp.w	r8,2048
80006864:	c0 30       	breq	8000686a <sd_mmc_set_block_len+0x7e>
    return false;
80006866:	30 08       	mov	r8,0
80006868:	c1 08       	rjmp	80006888 <sd_mmc_set_block_len+0x9c>

  mci_set_block_size(mci, length);
8000686a:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8000686e:	48 a8       	lddpc	r8,80006894 <sd_mmc_set_block_len+0xa8>
80006870:	70 08       	ld.w	r8,r8[0x0]
80006872:	12 9b       	mov	r11,r9
80006874:	10 9c       	mov	r12,r8
80006876:	f0 1f 00 0c 	mcall	800068a4 <sd_mmc_set_block_len+0xb8>
  mci_set_block_count(mci, 1);
8000687a:	48 78       	lddpc	r8,80006894 <sd_mmc_set_block_len+0xa8>
8000687c:	70 08       	ld.w	r8,r8[0x0]
8000687e:	30 1b       	mov	r11,1
80006880:	10 9c       	mov	r12,r8
80006882:	f0 1f 00 0a 	mcall	800068a8 <sd_mmc_set_block_len+0xbc>
  return true;
80006886:	30 18       	mov	r8,1
}
80006888:	10 9c       	mov	r12,r8
8000688a:	2f ed       	sub	sp,-8
8000688c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006890:	00 00       	add	r0,r0
80006892:	0e 00       	add	r0,r7
80006894:	00 00       	add	r0,r0
80006896:	01 34       	ld.ub	r4,r0++
80006898:	80 00       	ld.sh	r0,r0[0x0]
8000689a:	97 ec       	st.w	r11[0x38],r12
8000689c:	80 00       	ld.sh	r0,r0[0x0]
8000689e:	96 54       	ld.sh	r4,r11[0xa]
800068a0:	80 00       	ld.sh	r0,r0[0x0]
800068a2:	97 8c       	st.w	r11[0x20],r12
800068a4:	80 00       	ld.sh	r0,r0[0x0]
800068a6:	95 d4       	st.w	r10[0x34],r4
800068a8:	80 00       	ld.sh	r0,r0[0x0]
800068aa:	96 1e       	ld.sh	lr,r11[0x2]

800068ac <sd_mmc_mci_init>:

bool sd_mmc_mci_init(unsigned char card_slot, long pbb_hz, long cpu_hz)
{
800068ac:	eb cd 40 80 	pushm	r7,lr
800068b0:	1a 97       	mov	r7,sp
800068b2:	20 5d       	sub	sp,20
800068b4:	18 98       	mov	r8,r12
800068b6:	ef 4b ff f0 	st.w	r7[-16],r11
800068ba:	ef 4a ff ec 	st.w	r7[-20],r10
800068be:	ef 68 ff f4 	st.b	r7[-12],r8
    unsigned long                 scfg;
    avr32_hmatrix_scfg_t          SCFG;
  } u_avr32_hmatrix_scfg;

  // For the USBB DMA HMATRIX master, use infinite length burst.
  u_avr32_hmatrix_mcfg.mcfg = AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
800068c2:	fe 68 10 00 	mov	r8,-126976
800068c6:	70 68       	ld.w	r8,r8[0x18]
800068c8:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_hmatrix_mcfg.MCFG.ulbt = AVR32_HMATRIX_ULBT_INFINITE;
800068cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800068d0:	30 09       	mov	r9,0
800068d2:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800068d6:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] = u_avr32_hmatrix_mcfg.mcfg;
800068da:	fe 68 10 00 	mov	r8,-126976
800068de:	ee f9 ff fc 	ld.w	r9,r7[-4]
800068e2:	91 69       	st.w	r8[0x18],r9

  // For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
  u_avr32_hmatrix_scfg.scfg = AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
800068e4:	fe 68 10 00 	mov	r8,-126976
800068e8:	71 58       	ld.w	r8,r8[0x54]
800068ea:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.fixed_defmstr = AVR32_HMATRIX_MASTER_USBB_DMA;
800068ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800068f2:	30 69       	mov	r9,6
800068f4:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
800068f8:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
800068fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006900:	30 29       	mov	r9,2
80006902:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
80006906:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] = u_avr32_hmatrix_scfg.scfg;
8000690a:	fe 68 10 00 	mov	r8,-126976
8000690e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006912:	f1 49 00 54 	st.w	r8[84],r9

  g_pbb_hz = pbb_hz;
80006916:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000691a:	49 08       	lddpc	r8,80006958 <sd_mmc_mci_init+0xac>
8000691c:	91 09       	st.w	r8[0x0],r9
  g_cpu_hz = cpu_hz;
8000691e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006922:	48 f8       	lddpc	r8,8000695c <sd_mmc_mci_init+0xb0>
80006924:	91 09       	st.w	r8[0x0],r9

  // Init MCI controller
  if (mci_init(mci, card_slot, pbb_hz)!=MCI_SUCCESS)
80006926:	ee fa ff f0 	ld.w	r10,r7[-16]
8000692a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000692e:	48 d8       	lddpc	r8,80006960 <sd_mmc_mci_init+0xb4>
80006930:	70 08       	ld.w	r8,r8[0x0]
80006932:	12 9b       	mov	r11,r9
80006934:	10 9c       	mov	r12,r8
80006936:	f0 1f 00 0c 	mcall	80006964 <sd_mmc_mci_init+0xb8>
8000693a:	18 98       	mov	r8,r12
8000693c:	58 08       	cp.w	r8,0
8000693e:	c0 30       	breq	80006944 <sd_mmc_mci_init+0x98>
    return false;
80006940:	30 08       	mov	r8,0
80006942:	c0 78       	rjmp	80006950 <sd_mmc_mci_init+0xa4>

  // Default card initialization. This can be removed since the card init will
  // automatically be done when needed.
  sd_mmc_mci_card_init(card_slot);
80006944:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006948:	10 9c       	mov	r12,r8
8000694a:	f0 1f 00 08 	mcall	80006968 <sd_mmc_mci_init+0xbc>
  return true;
8000694e:	30 18       	mov	r8,1
}
80006950:	10 9c       	mov	r12,r8
80006952:	2f bd       	sub	sp,-20
80006954:	e3 cd 80 80 	ldm	sp++,r7,pc
80006958:	00 00       	add	r0,r0
8000695a:	06 1c       	sub	r12,r3
8000695c:	00 00       	add	r0,r0
8000695e:	06 20       	rsub	r0,r3
80006960:	00 00       	add	r0,r0
80006962:	01 34       	ld.ub	r4,r0++
80006964:	80 00       	ld.sh	r0,r0[0x0]
80006966:	95 20       	st.w	r10[0x8],r0
80006968:	80 00       	ld.sh	r0,r0[0x0]
8000696a:	69 6c       	ld.w	r12,r4[0x58]

8000696c <sd_mmc_mci_card_init>:

bool sd_mmc_mci_card_init(unsigned char slot)
{
8000696c:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
80006970:	1a 97       	mov	r7,sp
80006972:	21 7d       	sub	sp,92
80006974:	18 98       	mov	r8,r12
80006976:	ef 68 ff a4 	st.b	r7[-92],r8
  uint32_t response;

  if (true == sd_mmc_mci_init_done[slot])
8000697a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000697e:	fe f9 08 7a 	ld.w	r9,pc[2170]
80006982:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006986:	58 08       	cp.w	r8,0
80006988:	c0 40       	breq	80006990 <sd_mmc_mci_card_init+0x24>
    return true;
8000698a:	30 18       	mov	r8,1
8000698c:	e0 8f 04 31 	bral	800071ee <sd_mmc_mci_card_init+0x882>

  // Default card is not known.
  g_card_type[slot] = UNKNOWN_CARD;
80006990:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006994:	fe fa 08 68 	ld.w	r10,pc[2152]
80006998:	30 08       	mov	r8,0
8000699a:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default bus size is 1 bit.
  g_card_bus_width[slot] = MCI_BUS_SIZE_1_BIT;
8000699e:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800069a2:	fe fa 08 5e 	ld.w	r10,pc[2142]
800069a6:	30 08       	mov	r8,0
800069a8:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default card speed and disable High Speed mode.
  mci_init(mci, slot, g_pbb_hz);
800069ac:	fe f8 08 58 	ld.w	r8,pc[2136]
800069b0:	70 0a       	ld.w	r10,r8[0x0]
800069b2:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800069b6:	fe f8 08 52 	ld.w	r8,pc[2130]
800069ba:	70 08       	ld.w	r8,r8[0x0]
800069bc:	12 9b       	mov	r11,r9
800069be:	10 9c       	mov	r12,r8
800069c0:	f0 1f 02 13 	mcall	8000720c <sd_mmc_mci_card_init+0x8a0>

  // Wait for 1ms, then wait for 74 more clock cycles (see MMC norms)
  if (mci_send_cmd(mci, SD_MMC_INIT_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800069c4:	fe f8 08 44 	ld.w	r8,pc[2116]
800069c8:	70 08       	ld.w	r8,r8[0x0]
800069ca:	3f fa       	mov	r10,-1
800069cc:	e0 6b 01 00 	mov	r11,256
800069d0:	10 9c       	mov	r12,r8
800069d2:	f0 1f 02 10 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
800069d6:	18 98       	mov	r8,r12
800069d8:	58 08       	cp.w	r8,0
800069da:	c0 40       	breq	800069e2 <sd_mmc_mci_card_init+0x76>
    return false;
800069dc:	30 08       	mov	r8,0
800069de:	e0 8f 04 08 	bral	800071ee <sd_mmc_mci_card_init+0x882>

  //-- (CMD0)
  // Set card in idle state
  if (mci_send_cmd(mci, SD_MMC_GO_IDLE_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800069e2:	fe f8 08 26 	ld.w	r8,pc[2086]
800069e6:	70 08       	ld.w	r8,r8[0x0]
800069e8:	3f fa       	mov	r10,-1
800069ea:	30 0b       	mov	r11,0
800069ec:	10 9c       	mov	r12,r8
800069ee:	f0 1f 02 09 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
800069f2:	18 98       	mov	r8,r12
800069f4:	58 08       	cp.w	r8,0
800069f6:	c0 50       	breq	80006a00 <sd_mmc_mci_card_init+0x94>
    return false;
800069f8:	30 08       	mov	r8,0
800069fa:	e0 8f 03 fa 	bral	800071ee <sd_mmc_mci_card_init+0x882>
    response = mci_read_response(mci);
    if( !(response & OCR_MSK_BUSY) )
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
800069fe:	d7 03       	nop
    return false;

sd_mmc_init_step1:
  // (CMD1)
  // To send its Operating Conditions Register contents command only supported by MMC card
  if(mci_send_cmd(mci, SD_MMC_MMC_SEND_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_ALL|OCR_MSK_HC)==MCI_SUCCESS)
80006a00:	fe f8 08 08 	ld.w	r8,pc[2056]
80006a04:	70 08       	ld.w	r8,r8[0x0]
80006a06:	e0 6a 80 00 	mov	r10,32768
80006a0a:	ea 1a c0 ff 	orh	r10,0xc0ff
80006a0e:	e0 6b 08 41 	mov	r11,2113
80006a12:	10 9c       	mov	r12,r8
80006a14:	f0 1f 01 ff 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006a18:	18 98       	mov	r8,r12
80006a1a:	58 08       	cp.w	r8,0
80006a1c:	c2 a1       	brne	80006a70 <sd_mmc_mci_card_init+0x104>
  {
    // MMC cards always respond to MMC_SEND_OP_COND
    g_card_type[slot] = MMC_CARD;
80006a1e:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006a22:	fe fa 07 da 	ld.w	r10,pc[2010]
80006a26:	30 18       	mov	r8,1
80006a28:	f4 09 0b 08 	st.b	r10[r9],r8
    response = mci_read_response(mci);
80006a2c:	fe f8 07 dc 	ld.w	r8,pc[2012]
80006a30:	70 08       	ld.w	r8,r8[0x0]
80006a32:	10 9c       	mov	r12,r8
80006a34:	f0 1f 01 f8 	mcall	80007214 <sd_mmc_mci_card_init+0x8a8>
80006a38:	18 98       	mov	r8,r12
80006a3a:	ef 48 ff c0 	st.w	r7[-64],r8
    if( !(response & OCR_MSK_BUSY) )
80006a3e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006a42:	58 08       	cp.w	r8,0
80006a44:	cd d4       	brge	800069fe <sd_mmc_mci_card_init+0x92>
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
80006a46:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006a4a:	e6 18 40 00 	andh	r8,0x4000,COH
80006a4e:	e0 80 00 97 	breq	80006b7c <sd_mmc_mci_card_init+0x210>
    {
      g_card_type[slot] |= MMC_CARD_HC;
80006a52:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006a56:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a5a:	fe fa 07 a2 	ld.w	r10,pc[1954]
80006a5e:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006a62:	a5 b8       	sbr	r8,0x5
80006a64:	5c 58       	castu.b	r8
80006a66:	fe fa 07 96 	ld.w	r10,pc[1942]
80006a6a:	f4 09 0b 08 	st.b	r10[r9],r8
80006a6e:	c8 88       	rjmp	80006b7e <sd_mmc_mci_card_init+0x212>
    }
  }
  else
  {
    // SD cards do not respond to MMC_SEND_OP_COND
    g_card_type[slot] = SD_CARD;
80006a70:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006a74:	fe fa 07 88 	ld.w	r10,pc[1928]
80006a78:	30 28       	mov	r8,2
80006a7a:	f4 09 0b 08 	st.b	r10[r9],r8

    //-- (CMD8)
    // enables to expand new functionality to some existing commands supported only by SD HC card
    if (mci_send_cmd(mci, SD_MMC_SD_SEND_IF_COND_CMD, 0x000001AA)==MCI_SUCCESS)
80006a7e:	fe f8 07 8a 	ld.w	r8,pc[1930]
80006a82:	70 08       	ld.w	r8,r8[0x0]
80006a84:	e0 6a 01 aa 	mov	r10,426
80006a88:	e0 6b 10 48 	mov	r11,4168
80006a8c:	10 9c       	mov	r12,r8
80006a8e:	f0 1f 01 e1 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006a92:	18 98       	mov	r8,r12
80006a94:	58 08       	cp.w	r8,0
80006a96:	c1 b1       	brne	80006acc <sd_mmc_mci_card_init+0x160>
    {
      // It is a SD HC
      if( 0x000001AA == mci_read_response(mci))
80006a98:	fe f8 07 70 	ld.w	r8,pc[1904]
80006a9c:	70 08       	ld.w	r8,r8[0x0]
80006a9e:	10 9c       	mov	r12,r8
80006aa0:	f0 1f 01 dd 	mcall	80007214 <sd_mmc_mci_card_init+0x8a8>
80006aa4:	18 98       	mov	r8,r12
80006aa6:	e0 48 01 aa 	cp.w	r8,426
80006aaa:	c1 11       	brne	80006acc <sd_mmc_mci_card_init+0x160>
      {
        g_card_type[slot] |= SD_CARD_V2;
80006aac:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006ab0:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006ab4:	fe fa 07 48 	ld.w	r10,pc[1864]
80006ab8:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006abc:	a3 b8       	sbr	r8,0x3
80006abe:	5c 58       	castu.b	r8
80006ac0:	fe fa 07 3c 	ld.w	r10,pc[1852]
80006ac4:	f4 09 0b 08 	st.b	r10[r9],r8
80006ac8:	c0 28       	rjmp	80006acc <sd_mmc_mci_card_init+0x160>
    response = mci_read_response(mci);

    if( !(response & OCR_MSK_BUSY) )
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
80006aca:	d7 03       	nop

sd_mmc_init_step2:
    //-- (CMD55)
    // Indicates to the card that the next command is an application specific command rather than a standard command
    // CMD55 shall always precede ACMD41
    if (mci_send_cmd(mci, SD_MMC_APP_CMD, 0)!=MCI_SUCCESS)
80006acc:	fe f8 07 3c 	ld.w	r8,pc[1852]
80006ad0:	70 08       	ld.w	r8,r8[0x0]
80006ad2:	30 0a       	mov	r10,0
80006ad4:	e0 6b 10 77 	mov	r11,4215
80006ad8:	10 9c       	mov	r12,r8
80006ada:	f0 1f 01 ce 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006ade:	18 98       	mov	r8,r12
80006ae0:	58 08       	cp.w	r8,0
80006ae2:	c0 40       	breq	80006aea <sd_mmc_mci_card_init+0x17e>
      return false;
80006ae4:	30 08       	mov	r8,0
80006ae6:	e0 8f 03 84 	bral	800071ee <sd_mmc_mci_card_init+0x882>

    //-- (ACMD41)
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
80006aea:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006aee:	fe f9 07 0e 	ld.w	r9,pc[1806]
80006af2:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006af6:	e2 18 00 08 	andl	r8,0x8,COH
80006afa:	c1 00       	breq	80006b1a <sd_mmc_mci_card_init+0x1ae>
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
80006afc:	fe f8 07 0c 	ld.w	r8,pc[1804]
80006b00:	70 08       	ld.w	r8,r8[0x0]
80006b02:	fc 1a c0 10 	movh	r10,0xc010
80006b06:	36 9b       	mov	r11,105
80006b08:	10 9c       	mov	r12,r8
80006b0a:	f0 1f 01 c2 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006b0e:	18 98       	mov	r8,r12
80006b10:	58 08       	cp.w	r8,0
80006b12:	c1 30       	breq	80006b38 <sd_mmc_mci_card_init+0x1cc>
        return false;
80006b14:	30 08       	mov	r8,0
80006b16:	e0 8f 03 6c 	bral	800071ee <sd_mmc_mci_card_init+0x882>
    }
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
80006b1a:	fe f8 06 ee 	ld.w	r8,pc[1774]
80006b1e:	70 08       	ld.w	r8,r8[0x0]
80006b20:	fc 1a 80 10 	movh	r10,0x8010
80006b24:	36 9b       	mov	r11,105
80006b26:	10 9c       	mov	r12,r8
80006b28:	f0 1f 01 ba 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006b2c:	18 98       	mov	r8,r12
80006b2e:	58 08       	cp.w	r8,0
80006b30:	c0 50       	breq	80006b3a <sd_mmc_mci_card_init+0x1ce>
        return false;
80006b32:	30 08       	mov	r8,0
80006b34:	e0 8f 03 5d 	bral	800071ee <sd_mmc_mci_card_init+0x882>
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
        return false;
80006b38:	d7 03       	nop
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
        return false;
    }
    response = mci_read_response(mci);
80006b3a:	fe f8 06 ce 	ld.w	r8,pc[1742]
80006b3e:	70 08       	ld.w	r8,r8[0x0]
80006b40:	10 9c       	mov	r12,r8
80006b42:	f0 1f 01 b5 	mcall	80007214 <sd_mmc_mci_card_init+0x8a8>
80006b46:	18 98       	mov	r8,r12
80006b48:	ef 48 ff c0 	st.w	r7[-64],r8

    if( !(response & OCR_MSK_BUSY) )
80006b4c:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006b50:	58 08       	cp.w	r8,0
80006b52:	cb c4       	brge	80006aca <sd_mmc_mci_card_init+0x15e>
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
    }
    // Card read then check HC type
    if (response & OCR_MSK_HC)
80006b54:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006b58:	e6 18 40 00 	andh	r8,0x4000,COH
80006b5c:	c1 10       	breq	80006b7e <sd_mmc_mci_card_init+0x212>
    {
      g_card_type[slot] |= SD_CARD_HC;  // Card SD High Capacity
80006b5e:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006b62:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006b66:	fe fa 06 96 	ld.w	r10,pc[1686]
80006b6a:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006b6e:	a5 a8       	sbr	r8,0x4
80006b70:	5c 58       	castu.b	r8
80006b72:	fe fa 06 8a 	ld.w	r10,pc[1674]
80006b76:	f4 09 0b 08 	st.b	r10[r9],r8
80006b7a:	c0 28       	rjmp	80006b7e <sd_mmc_mci_card_init+0x212>
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
    {
      g_card_type[slot] |= MMC_CARD_HC;
80006b7c:	d7 03       	nop

  // Here card ready and type (MMC <V4, MMC V4, MMC HC, SD V1, SD V2 HC) detected

  //-- (CMD2)
  // Send CID
  if (mci_send_cmd(mci, SD_MMC_ALL_SEND_CID_CMD, 0)!=MCI_SUCCESS)
80006b7e:	fe f8 06 8a 	ld.w	r8,pc[1674]
80006b82:	70 08       	ld.w	r8,r8[0x0]
80006b84:	30 0a       	mov	r10,0
80006b86:	e0 6b 00 82 	mov	r11,130
80006b8a:	10 9c       	mov	r12,r8
80006b8c:	f0 1f 01 a1 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006b90:	18 98       	mov	r8,r12
80006b92:	58 08       	cp.w	r8,0
80006b94:	c0 40       	breq	80006b9c <sd_mmc_mci_card_init+0x230>
    return false;
80006b96:	30 08       	mov	r8,0
80006b98:	e0 8f 03 2b 	bral	800071ee <sd_mmc_mci_card_init+0x882>

  //-- (CMD3)
  // Set relative address
  if(MMC_CARD & g_card_type[slot])
80006b9c:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006ba0:	fe f9 06 5c 	ld.w	r9,pc[1628]
80006ba4:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006ba8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006bac:	5c 58       	castu.b	r8
80006bae:	c1 90       	breq	80006be0 <sd_mmc_mci_card_init+0x274>
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
80006bb0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006bb4:	fe f8 06 64 	ld.w	r8,pc[1636]
80006bb8:	e0 7a ff ff 	mov	r10,131071
80006bbc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
80006bc0:	fe f8 06 48 	ld.w	r8,pc[1608]
80006bc4:	70 08       	ld.w	r8,r8[0x0]
80006bc6:	e0 7a ff ff 	mov	r10,131071
80006bca:	e0 6b 10 43 	mov	r11,4163
80006bce:	10 9c       	mov	r12,r8
80006bd0:	f0 1f 01 90 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006bd4:	18 98       	mov	r8,r12
80006bd6:	58 08       	cp.w	r8,0
80006bd8:	c1 30       	breq	80006bfe <sd_mmc_mci_card_init+0x292>
      return false;
80006bda:	30 08       	mov	r8,0
80006bdc:	e0 8f 03 09 	bral	800071ee <sd_mmc_mci_card_init+0x882>
  }
  else
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
80006be0:	fe f8 06 28 	ld.w	r8,pc[1576]
80006be4:	70 08       	ld.w	r8,r8[0x0]
80006be6:	30 0a       	mov	r10,0
80006be8:	e0 6b 10 43 	mov	r11,4163
80006bec:	10 9c       	mov	r12,r8
80006bee:	f0 1f 01 89 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006bf2:	18 98       	mov	r8,r12
80006bf4:	58 08       	cp.w	r8,0
80006bf6:	c0 50       	breq	80006c00 <sd_mmc_mci_card_init+0x294>
      return false;
80006bf8:	30 08       	mov	r8,0
80006bfa:	e0 8f 02 fa 	bral	800071ee <sd_mmc_mci_card_init+0x882>
  if(MMC_CARD & g_card_type[slot])
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
      return false;
80006bfe:	d7 03       	nop
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
      return false;
  }
  if (SD_CARD & g_card_type[slot])
80006c00:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006c04:	fe f9 05 f8 	ld.w	r9,pc[1528]
80006c08:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006c0c:	e2 18 00 02 	andl	r8,0x2,COH
80006c10:	c1 10       	breq	80006c32 <sd_mmc_mci_card_init+0x2c6>
  {
    // For SD  card, you receive address of card
    g_card_rca[slot] = mci_read_response(mci) & RCA_MSK_ADR ;
80006c12:	ef 36 ff a4 	ld.ub	r6,r7[-92]
80006c16:	fe f8 05 f2 	ld.w	r8,pc[1522]
80006c1a:	70 08       	ld.w	r8,r8[0x0]
80006c1c:	10 9c       	mov	r12,r8
80006c1e:	f0 1f 01 7e 	mcall	80007214 <sd_mmc_mci_card_init+0x8a8>
80006c22:	18 98       	mov	r8,r12
80006c24:	10 99       	mov	r9,r8
80006c26:	e0 19 00 00 	andl	r9,0x0
80006c2a:	fe f8 05 ee 	ld.w	r8,pc[1518]
80006c2e:	f0 06 09 29 	st.w	r8[r6<<0x2],r9
  }


  //-- (CMD9)
  // Read & analyze CSD register
  if (sd_mmc_mci_get_csd(slot)!=true)
80006c32:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006c36:	10 9c       	mov	r12,r8
80006c38:	f0 1f 01 79 	mcall	8000721c <sd_mmc_mci_card_init+0x8b0>
80006c3c:	18 98       	mov	r8,r12
80006c3e:	ec 18 00 01 	eorl	r8,0x1
80006c42:	5c 58       	castu.b	r8
80006c44:	c0 40       	breq	80006c4c <sd_mmc_mci_card_init+0x2e0>
    return false;
80006c46:	30 08       	mov	r8,0
80006c48:	e0 8f 02 d3 	bral	800071ee <sd_mmc_mci_card_init+0x882>


  //-- (CMD7)-R1b
  // select card
  if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006c4c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006c50:	fe f8 05 c8 	ld.w	r8,pc[1480]
80006c54:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006c58:	fe f8 05 b0 	ld.w	r8,pc[1456]
80006c5c:	70 08       	ld.w	r8,r8[0x0]
80006c5e:	12 9a       	mov	r10,r9
80006c60:	e0 6b 10 c7 	mov	r11,4295
80006c64:	10 9c       	mov	r12,r8
80006c66:	f0 1f 01 6b 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006c6a:	18 98       	mov	r8,r12
80006c6c:	58 08       	cp.w	r8,0
80006c6e:	c0 40       	breq	80006c76 <sd_mmc_mci_card_init+0x30a>
    return false;
80006c70:	30 08       	mov	r8,0
80006c72:	e0 8f 02 be 	bral	800071ee <sd_mmc_mci_card_init+0x882>

  // Wait end of busy
  mci_wait_busy_signal(mci);// read busy state on DAT0
80006c76:	fe f8 05 92 	ld.w	r8,pc[1426]
80006c7a:	70 08       	ld.w	r8,r8[0x0]
80006c7c:	10 9c       	mov	r12,r8
80006c7e:	f0 1f 01 69 	mcall	80007220 <sd_mmc_mci_card_init+0x8b4>

  // Get clock by checking the extended CSD register
  if (MMC_CARD_V4 & g_card_type[slot])
80006c82:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006c86:	fe f9 05 76 	ld.w	r9,pc[1398]
80006c8a:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006c8e:	e2 18 00 04 	andl	r8,0x4,COH
80006c92:	c0 e0       	breq	80006cae <sd_mmc_mci_card_init+0x342>
  {
    // Get clock (MMC V4) and size (MMC V4 HC) by checking the extended CSD register
      //-- (CMD8)
    if (sd_mmc_get_ext_csd(slot)!=true)
80006c94:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006c98:	10 9c       	mov	r12,r8
80006c9a:	f0 1f 01 63 	mcall	80007224 <sd_mmc_mci_card_init+0x8b8>
80006c9e:	18 98       	mov	r8,r12
80006ca0:	ec 18 00 01 	eorl	r8,0x1
80006ca4:	5c 58       	castu.b	r8
80006ca6:	c0 40       	breq	80006cae <sd_mmc_mci_card_init+0x342>
         return false;
80006ca8:	30 08       	mov	r8,0
80006caa:	e0 8f 02 a2 	bral	800071ee <sd_mmc_mci_card_init+0x882>
  }


#if (SD_4_BIT == ENABLE)
  // set bus size
  if (SD_CARD & g_card_type[slot])
80006cae:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006cb2:	fe f9 05 4a 	ld.w	r9,pc[1354]
80006cb6:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006cba:	e2 18 00 02 	andl	r8,0x2,COH
80006cbe:	c4 00       	breq	80006d3e <sd_mmc_mci_card_init+0x3d2>
  {
    // set 4-bit bus for SD Card
    //-- (CMD55)
    if(mci_send_cmd(mci, SD_MMC_APP_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006cc0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006cc4:	fe f8 05 54 	ld.w	r8,pc[1364]
80006cc8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006ccc:	fe f8 05 3c 	ld.w	r8,pc[1340]
80006cd0:	70 08       	ld.w	r8,r8[0x0]
80006cd2:	12 9a       	mov	r10,r9
80006cd4:	e0 6b 10 77 	mov	r11,4215
80006cd8:	10 9c       	mov	r12,r8
80006cda:	f0 1f 01 4e 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006cde:	18 98       	mov	r8,r12
80006ce0:	58 08       	cp.w	r8,0
80006ce2:	c0 40       	breq	80006cea <sd_mmc_mci_card_init+0x37e>
      return false;
80006ce4:	30 08       	mov	r8,0
80006ce6:	e0 8f 02 84 	bral	800071ee <sd_mmc_mci_card_init+0x882>

    //-- (CMD6)
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
80006cea:	fe f8 05 1e 	ld.w	r8,pc[1310]
80006cee:	70 08       	ld.w	r8,r8[0x0]
80006cf0:	30 2a       	mov	r10,2
80006cf2:	e0 6b 10 46 	mov	r11,4166
80006cf6:	10 9c       	mov	r12,r8
80006cf8:	f0 1f 01 46 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006cfc:	18 98       	mov	r8,r12
80006cfe:	58 08       	cp.w	r8,0
80006d00:	c0 40       	breq	80006d08 <sd_mmc_mci_card_init+0x39c>
      return false;
80006d02:	30 08       	mov	r8,0
80006d04:	e0 8f 02 75 	bral	800071ee <sd_mmc_mci_card_init+0x882>

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
80006d08:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006d0c:	fe fa 04 f4 	ld.w	r10,pc[1268]
80006d10:	30 28       	mov	r8,2
80006d12:	f4 09 0b 08 	st.b	r10[r9],r8
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
80006d16:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006d1a:	fe f9 04 e6 	ld.w	r9,pc[1254]
80006d1e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006d22:	10 99       	mov	r9,r8
80006d24:	fe f8 04 e4 	ld.w	r8,pc[1252]
80006d28:	70 08       	ld.w	r8,r8[0x0]
80006d2a:	12 9b       	mov	r11,r9
80006d2c:	10 9c       	mov	r12,r8
80006d2e:	f0 1f 01 3f 	mcall	80007228 <sd_mmc_mci_card_init+0x8bc>
80006d32:	18 98       	mov	r8,r12
80006d34:	58 08       	cp.w	r8,0
80006d36:	c4 00       	breq	80006db6 <sd_mmc_mci_card_init+0x44a>
      return false;
80006d38:	30 08       	mov	r8,0
80006d3a:	e0 8f 02 5a 	bral	800071ee <sd_mmc_mci_card_init+0x882>
  }
  else // MMC bus width management
  {
    // set 8-bit bus for MMC Card
    if (MMC_CARD_V4 & g_card_type[slot])
80006d3e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006d42:	fe f9 04 ba 	ld.w	r9,pc[1210]
80006d46:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006d4a:	e2 18 00 04 	andl	r8,0x4,COH
80006d4e:	c3 50       	breq	80006db8 <sd_mmc_mci_card_init+0x44c>
    {
      //-- (CMD6)-R1b
      // set 8-bit bus width (appeared from V4.0 specification)
      if (mci_send_cmd( mci,
80006d50:	fe f8 04 b8 	ld.w	r8,pc[1208]
80006d54:	70 08       	ld.w	r8,r8[0x0]
80006d56:	e0 6a 02 03 	mov	r10,515
80006d5a:	ea 1a 03 b7 	orh	r10,0x3b7
80006d5e:	e0 6b 10 c6 	mov	r11,4294
80006d62:	10 9c       	mov	r12,r8
80006d64:	f0 1f 01 2b 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006d68:	18 98       	mov	r8,r12
80006d6a:	58 08       	cp.w	r8,0
80006d6c:	c0 40       	breq	80006d74 <sd_mmc_mci_card_init+0x408>
                        ( (uint32_t)MMC_SWITCH_WRITE     <<24)|
                          ((uint32_t)MMC_SWITCH_BUS_WIDTH<<16)|
                          ((uint32_t)MMC_SWITCH_VAL_8BIT << 8)|
                          ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
80006d6e:	30 08       	mov	r8,0
80006d70:	e0 8f 02 3f 	bral	800071ee <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006d74:	fe f8 04 94 	ld.w	r8,pc[1172]
80006d78:	70 08       	ld.w	r8,r8[0x0]
80006d7a:	10 9c       	mov	r12,r8
80006d7c:	f0 1f 01 29 	mcall	80007220 <sd_mmc_mci_card_init+0x8b4>
      g_card_bus_width[slot] = MCI_BUS_SIZE_8_BIT;
80006d80:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006d84:	fe fa 04 7c 	ld.w	r10,pc[1148]
80006d88:	30 38       	mov	r8,3
80006d8a:	f4 09 0b 08 	st.b	r10[r9],r8
      if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
80006d8e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006d92:	fe f9 04 6e 	ld.w	r9,pc[1134]
80006d96:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006d9a:	10 99       	mov	r9,r8
80006d9c:	fe f8 04 6c 	ld.w	r8,pc[1132]
80006da0:	70 08       	ld.w	r8,r8[0x0]
80006da2:	12 9b       	mov	r11,r9
80006da4:	10 9c       	mov	r12,r8
80006da6:	f0 1f 01 21 	mcall	80007228 <sd_mmc_mci_card_init+0x8bc>
80006daa:	18 98       	mov	r8,r12
80006dac:	58 08       	cp.w	r8,0
80006dae:	c0 50       	breq	80006db8 <sd_mmc_mci_card_init+0x44c>
       return false;
80006db0:	30 08       	mov	r8,0
80006db2:	e0 8f 02 1e 	bral	800071ee <sd_mmc_mci_card_init+0x882>
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
      return false;

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
      return false;
80006db6:	d7 03       	nop
       return false;
    }
  }
#endif

   if (MMC_CARD_V4 & g_card_type[slot])
80006db8:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006dbc:	fe f9 04 40 	ld.w	r9,pc[1088]
80006dc0:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006dc4:	e2 18 00 04 	andl	r8,0x4,COH
80006dc8:	c1 90       	breq	80006dfa <sd_mmc_mci_card_init+0x48e>
   {
      //-- (CMD6)-R1b
      // set high speed interface timing
      if (mci_send_cmd( mci,
80006dca:	fe f8 04 3e 	ld.w	r8,pc[1086]
80006dce:	70 08       	ld.w	r8,r8[0x0]
80006dd0:	e0 6a 01 03 	mov	r10,259
80006dd4:	ea 1a 03 b9 	orh	r10,0x3b9
80006dd8:	e0 6b 10 c6 	mov	r11,4294
80006ddc:	10 9c       	mov	r12,r8
80006dde:	f0 1f 01 0d 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006de2:	18 98       	mov	r8,r12
80006de4:	58 08       	cp.w	r8,0
80006de6:	c0 40       	breq	80006dee <sd_mmc_mci_card_init+0x482>
                        ((uint32_t)MMC_SWITCH_WRITE     <<24)|
                        ((uint32_t)MMC_SWITCH_HIGH_SPEED<<16)|
                        ((uint32_t)MMC_SWITCH_VAL_HS    << 8)|
                        ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
80006de8:	30 08       	mov	r8,0
80006dea:	e0 8f 02 02 	bral	800071ee <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);
80006dee:	fe f8 04 1a 	ld.w	r8,pc[1050]
80006df2:	70 08       	ld.w	r8,r8[0x0]
80006df4:	10 9c       	mov	r12,r8
80006df6:	f0 1f 01 0b 	mcall	80007220 <sd_mmc_mci_card_init+0x8b4>
   }


   if( SD_CARD_V2 & g_card_type[slot] )
80006dfa:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006dfe:	fe f9 03 fe 	ld.w	r9,pc[1022]
80006e02:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006e06:	e2 18 00 08 	andl	r8,0x8,COH
80006e0a:	e0 80 01 ae 	breq	80007166 <sd_mmc_mci_card_init+0x7fa>
#define SDMMC_SWITCH_FUNC_G3_KEEP     (0xf << 8)  /**< Group 3 No influence */
#define SDMMC_SWITCH_FUNC_G4_KEEP     (0xf << 12) /**< Group 4 No influence */
#define SDMMC_SWITCH_FUNC_G5_KEEP     (0xf << 16) /**< Group 5 No influence */
#define SDMMC_SWITCH_FUNC_G6_KEEP     (0xf << 20) /**< Group 6 No influence */

      mci_set_block_size(mci, 512/8); // CMD6 512 bits status
80006e0e:	fe f8 03 fa 	ld.w	r8,pc[1018]
80006e12:	70 08       	ld.w	r8,r8[0x0]
80006e14:	34 0b       	mov	r11,64
80006e16:	10 9c       	mov	r12,r8
80006e18:	f0 1f 01 05 	mcall	8000722c <sd_mmc_mci_card_init+0x8c0>
      mci_set_block_count(mci, 1);
80006e1c:	fe f8 03 ec 	ld.w	r8,pc[1004]
80006e20:	70 08       	ld.w	r8,r8[0x0]
80006e22:	30 1b       	mov	r11,1
80006e24:	10 9c       	mov	r12,r8
80006e26:	f0 1f 01 03 	mcall	80007230 <sd_mmc_mci_card_init+0x8c4>

      //-- (CMD6)
      // Check if we can enter into the High Speed mode.
      if (mci_send_cmd( mci
80006e2a:	fe f8 03 de 	ld.w	r8,pc[990]
80006e2e:	70 08       	ld.w	r8,r8[0x0]
80006e30:	30 1a       	mov	r10,1
80006e32:	e4 7b 10 46 	mov	r11,331846
80006e36:	10 9c       	mov	r12,r8
80006e38:	f0 1f 00 f6 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006e3c:	18 98       	mov	r8,r12
80006e3e:	58 08       	cp.w	r8,0
80006e40:	c0 40       	breq	80006e48 <sd_mmc_mci_card_init+0x4dc>
                      , SD_SWITCH_FUNC
                      , SDMMC_SWITCH_FUNC_MODE_CHECK | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006e42:	30 08       	mov	r8,0
80006e44:	e0 8f 01 d5 	bral	800071ee <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006e48:	fe f8 03 c0 	ld.w	r8,pc[960]
80006e4c:	70 08       	ld.w	r8,r8[0x0]
80006e4e:	10 9c       	mov	r12,r8
80006e50:	f0 1f 00 f4 	mcall	80007220 <sd_mmc_mci_card_init+0x8b4>

      bool b_hs_supported=false;
80006e54:	30 08       	mov	r8,0
80006e56:	ef 68 ff c5 	st.b	r7[-59],r8
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006e5a:	30 08       	mov	r8,0
80006e5c:	ef 68 ff c6 	st.b	r7[-58],r8
80006e60:	c4 18       	rjmp	80006ee2 <sd_mmc_mci_card_init+0x576>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006e62:	fe f8 03 a6 	ld.w	r8,pc[934]
80006e66:	70 08       	ld.w	r8,r8[0x0]
80006e68:	ef 48 ff c8 	st.w	r7[-56],r8
80006e6c:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006e70:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006e74:	fe f8 03 c0 	ld.w	r8,pc[960]
80006e78:	70 08       	ld.w	r8,r8[0x0]
80006e7a:	10 99       	mov	r9,r8
80006e7c:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006e80:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006e84:	71 08       	ld.w	r8,r8[0x40]
80006e86:	f3 e8 10 08 	or	r8,r9,r8
80006e8a:	10 99       	mov	r9,r8
80006e8c:	fe f8 03 a8 	ld.w	r8,pc[936]
80006e90:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006e92:	fe f8 03 a2 	ld.w	r8,pc[930]
80006e96:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006e98:	e2 18 00 02 	andl	r8,0x2,COH
80006e9c:	5f 18       	srne	r8
80006e9e:	58 08       	cp.w	r8,0
80006ea0:	ce 10       	breq	80006e62 <sd_mmc_mci_card_init+0x4f6>
          data = mci_rd_data(mci);
80006ea2:	fe f8 03 66 	ld.w	r8,pc[870]
80006ea6:	70 08       	ld.w	r8,r8[0x0]
80006ea8:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006eac:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006eb0:	70 c8       	ld.w	r8,r8[0x30]
80006eb2:	ef 48 ff ac 	st.w	r7[-84],r8
          if(i==16)
80006eb6:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006eba:	31 08       	mov	r8,16
80006ebc:	f0 09 18 00 	cp.b	r9,r8
80006ec0:	c0 c1       	brne	80006ed8 <sd_mmc_mci_card_init+0x56c>
          {
            if(((data>>24)&0xf)==1)
80006ec2:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006ec6:	b9 88       	lsr	r8,0x18
80006ec8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006ecc:	58 18       	cp.w	r8,1
80006ece:	c1 21       	brne	80006ef2 <sd_mmc_mci_card_init+0x586>
              b_hs_supported = true;
80006ed0:	30 18       	mov	r8,1
80006ed2:	ef 68 ff c5 	st.b	r7[-59],r8
            break;
80006ed6:	c0 f8       	rjmp	80006ef4 <sd_mmc_mci_card_init+0x588>
      mci_wait_busy_signal(mci);// read busy state on DAT0

      bool b_hs_supported=false;
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006ed8:	ef 38 ff c6 	ld.ub	r8,r7[-58]
80006edc:	2f c8       	sub	r8,-4
80006ede:	ef 68 ff c6 	st.b	r7[-58],r8
80006ee2:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006ee6:	33 f8       	mov	r8,63
80006ee8:	f0 09 18 00 	cp.b	r9,r8
80006eec:	fe 98 ff bb 	brls	80006e62 <sd_mmc_mci_card_init+0x4f6>
80006ef0:	c0 28       	rjmp	80006ef4 <sd_mmc_mci_card_init+0x588>
          data = mci_rd_data(mci);
          if(i==16)
          {
            if(((data>>24)&0xf)==1)
              b_hs_supported = true;
            break;
80006ef2:	d7 03       	nop
          }
        }
      }

      if (b_hs_supported==false )
80006ef4:	ef 38 ff c5 	ld.ub	r8,r7[-59]
80006ef8:	ec 18 00 01 	eorl	r8,0x1
80006efc:	5c 58       	castu.b	r8
80006efe:	e0 81 01 33 	brne	80007164 <sd_mmc_mci_card_init+0x7f8>
        goto sd_mmc_init_step3;

      if (mci_send_cmd( mci
80006f02:	fe f8 03 06 	ld.w	r8,pc[774]
80006f06:	70 08       	ld.w	r8,r8[0x0]
80006f08:	e0 6a ff f1 	mov	r10,65521
80006f0c:	ea 1a 80 ff 	orh	r10,0x80ff
80006f10:	e4 7b 10 46 	mov	r11,331846
80006f14:	10 9c       	mov	r12,r8
80006f16:	f0 1f 00 bf 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80006f1a:	18 98       	mov	r8,r12
80006f1c:	58 08       	cp.w	r8,0
80006f1e:	c0 40       	breq	80006f26 <sd_mmc_mci_card_init+0x5ba>
                      | SDMMC_SWITCH_FUNC_G3_KEEP
                      | SDMMC_SWITCH_FUNC_G2_KEEP
                      | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006f20:	30 08       	mov	r8,0
80006f22:	e0 8f 01 66 	bral	800071ee <sd_mmc_mci_card_init+0x882>
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006f26:	30 08       	mov	r8,0
80006f28:	ef 68 ff c7 	st.b	r7[-57],r8
80006f2c:	c3 08       	rjmp	80006f8c <sd_mmc_mci_card_init+0x620>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006f2e:	fe f8 02 da 	ld.w	r8,pc[730]
80006f32:	70 08       	ld.w	r8,r8[0x0]
80006f34:	ef 48 ff d4 	st.w	r7[-44],r8
80006f38:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006f3c:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006f40:	fe f8 02 f4 	ld.w	r8,pc[756]
80006f44:	70 08       	ld.w	r8,r8[0x0]
80006f46:	10 99       	mov	r9,r8
80006f48:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006f4c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006f50:	71 08       	ld.w	r8,r8[0x40]
80006f52:	f3 e8 10 08 	or	r8,r9,r8
80006f56:	10 99       	mov	r9,r8
80006f58:	fe f8 02 dc 	ld.w	r8,pc[732]
80006f5c:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006f5e:	fe f8 02 d6 	ld.w	r8,pc[726]
80006f62:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006f64:	e2 18 00 02 	andl	r8,0x2,COH
80006f68:	5f 18       	srne	r8
80006f6a:	58 08       	cp.w	r8,0
80006f6c:	ce 10       	breq	80006f2e <sd_mmc_mci_card_init+0x5c2>
          data = mci_rd_data(mci);
80006f6e:	fe f8 02 9a 	ld.w	r8,pc[666]
80006f72:	70 08       	ld.w	r8,r8[0x0]
80006f74:	ef 48 ff dc 	st.w	r7[-36],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006f78:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006f7c:	70 c8       	ld.w	r8,r8[0x30]
80006f7e:	ef 48 ff a8 	st.w	r7[-88],r8
      {
        return false;
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006f82:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006f86:	2f c8       	sub	r8,-4
80006f88:	ef 68 ff c7 	st.b	r7[-57],r8
80006f8c:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006f90:	33 f8       	mov	r8,63
80006f92:	f0 09 18 00 	cp.b	r9,r8
80006f96:	fe 98 ff cc 	brls	80006f2e <sd_mmc_mci_card_init+0x5c2>

      /* A 8 cycle delay is required after switch command
       * @ 200KHz clock this should be 40 uS, but we use
       * 80 to handle imprecise clock setting.
       */
      cpu_delay_us(80, g_cpu_hz);
80006f9a:	fe f8 02 9e 	ld.w	r8,pc[670]
80006f9e:	70 08       	ld.w	r8,r8[0x0]
80006fa0:	35 09       	mov	r9,80
80006fa2:	ef 49 ff e4 	st.w	r7[-28],r9
80006fa6:	ef 48 ff e0 	st.w	r7[-32],r8
80006faa:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006fae:	ef 48 ff ec 	st.w	r7[-20],r8
80006fb2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006fb6:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80006fba:	ee f0 ff ec 	ld.w	r0,r7[-20]
80006fbe:	30 01       	mov	r1,0
80006fc0:	ee f2 ff e8 	ld.w	r2,r7[-24]
80006fc4:	30 03       	mov	r3,0
80006fc6:	e2 02 02 4a 	mul	r10,r1,r2
80006fca:	e6 00 02 48 	mul	r8,r3,r0
80006fce:	10 0a       	add	r10,r8
80006fd0:	e0 02 06 48 	mulu.d	r8,r0,r2
80006fd4:	12 0a       	add	r10,r9
80006fd6:	14 99       	mov	r9,r10
80006fd8:	ee 7a 42 3f 	mov	r10,999999
80006fdc:	30 0b       	mov	r11,0
80006fde:	f0 0a 00 0a 	add	r10,r8,r10
80006fe2:	f2 0b 00 4b 	adc	r11,r9,r11
80006fe6:	ee 78 42 40 	mov	r8,1000000
80006fea:	30 09       	mov	r9,0
80006fec:	f0 1f 00 94 	mcall	8000723c <sd_mmc_mci_card_init+0x8d0>
80006ff0:	14 98       	mov	r8,r10
80006ff2:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80006ff4:	ef 48 ff f4 	st.w	r7[-12],r8
80006ff8:	ee c8 00 50 	sub	r8,r7,80
80006ffc:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007000:	e1 b8 00 42 	mfsr	r8,0x108
80007004:	10 99       	mov	r9,r8
80007006:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000700a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000700c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007010:	70 09       	ld.w	r9,r8[0x0]
80007012:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007016:	10 09       	add	r9,r8
80007018:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000701c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000701e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007022:	30 08       	mov	r8,0
80007024:	f3 68 00 08 	st.b	r9[8],r8
80007028:	ee c8 00 50 	sub	r8,r7,80
8000702c:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007030:	e1 b8 00 42 	mfsr	r8,0x108
80007034:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80007038:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000703c:	f1 39 00 08 	ld.ub	r9,r8[8]
80007040:	30 28       	mov	r8,2
80007042:	f0 09 18 00 	cp.b	r9,r8
80007046:	c0 31       	brne	8000704c <sd_mmc_mci_card_init+0x6e0>
    return false;
80007048:	30 08       	mov	r8,0
8000704a:	c4 38       	rjmp	800070d0 <sd_mmc_mci_card_init+0x764>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000704c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007050:	f1 39 00 08 	ld.ub	r9,r8[8]
80007054:	30 18       	mov	r8,1
80007056:	f0 09 18 00 	cp.b	r9,r8
8000705a:	c0 31       	brne	80007060 <sd_mmc_mci_card_init+0x6f4>
    return true;
8000705c:	30 18       	mov	r8,1
8000705e:	c3 98       	rjmp	800070d0 <sd_mmc_mci_card_init+0x764>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007060:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007064:	70 09       	ld.w	r9,r8[0x0]
80007066:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000706a:	70 18       	ld.w	r8,r8[0x4]
8000706c:	10 39       	cp.w	r9,r8
8000706e:	e0 88 00 1a 	brls	800070a2 <sd_mmc_mci_card_init+0x736>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007072:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007076:	70 08       	ld.w	r8,r8[0x0]
80007078:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000707c:	10 39       	cp.w	r9,r8
8000707e:	c1 02       	brcc	8000709e <sd_mmc_mci_card_init+0x732>
80007080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007084:	70 18       	ld.w	r8,r8[0x4]
80007086:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000708a:	10 39       	cp.w	r9,r8
8000708c:	e0 88 00 09 	brls	8000709e <sd_mmc_mci_card_init+0x732>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80007090:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007094:	30 18       	mov	r8,1
80007096:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000709a:	30 18       	mov	r8,1
8000709c:	c1 a8       	rjmp	800070d0 <sd_mmc_mci_card_init+0x764>
    }
    return false;
8000709e:	30 08       	mov	r8,0
800070a0:	c1 88       	rjmp	800070d0 <sd_mmc_mci_card_init+0x764>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800070a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070a6:	70 08       	ld.w	r8,r8[0x0]
800070a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800070ac:	10 39       	cp.w	r9,r8
800070ae:	c0 93       	brcs	800070c0 <sd_mmc_mci_card_init+0x754>
800070b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070b4:	70 18       	ld.w	r8,r8[0x4]
800070b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800070ba:	10 39       	cp.w	r9,r8
800070bc:	e0 88 00 09 	brls	800070ce <sd_mmc_mci_card_init+0x762>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800070c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800070c4:	30 18       	mov	r8,1
800070c6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800070ca:	30 18       	mov	r8,1
800070cc:	c0 28       	rjmp	800070d0 <sd_mmc_mci_card_init+0x764>
    }
    return false;
800070ce:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800070d0:	58 08       	cp.w	r8,0
800070d2:	ca b0       	breq	80007028 <sd_mmc_mci_card_init+0x6bc>
      union u_cfg{
        unsigned long     cfg;
        avr32_mci_cfg_t   CFG;
      };
      union u_cfg val;
      val.cfg = mci->cfg;
800070d4:	4c d8       	lddpc	r8,80007208 <sd_mmc_mci_card_init+0x89c>
800070d6:	70 08       	ld.w	r8,r8[0x0]
800070d8:	71 58       	ld.w	r8,r8[0x54]
800070da:	ef 48 ff bc 	st.w	r7[-68],r8
      val.CFG.hsmode = 1;
800070de:	ee f8 ff bc 	ld.w	r8,r7[-68]
800070e2:	30 19       	mov	r9,1
800070e4:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
800070e8:	ef 48 ff bc 	st.w	r7[-68],r8
      mci->cfg = val.cfg;
800070ec:	4c 78       	lddpc	r8,80007208 <sd_mmc_mci_card_init+0x89c>
800070ee:	70 08       	ld.w	r8,r8[0x0]
800070f0:	ee f9 ff bc 	ld.w	r9,r7[-68]
800070f4:	f1 49 00 54 	st.w	r8[84],r9

      // deselect card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, 0)!=MCI_SUCCESS)
800070f8:	4c 48       	lddpc	r8,80007208 <sd_mmc_mci_card_init+0x89c>
800070fa:	70 08       	ld.w	r8,r8[0x0]
800070fc:	30 0a       	mov	r10,0
800070fe:	e0 6b 10 c7 	mov	r11,4295
80007102:	10 9c       	mov	r12,r8
80007104:	f0 1f 00 43 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
80007108:	18 98       	mov	r8,r12
8000710a:	58 08       	cp.w	r8,0
8000710c:	c0 30       	breq	80007112 <sd_mmc_mci_card_init+0x7a6>
        return false;
8000710e:	30 08       	mov	r8,0
80007110:	c6 f8       	rjmp	800071ee <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80007112:	4b e8       	lddpc	r8,80007208 <sd_mmc_mci_card_init+0x89c>
80007114:	70 08       	ld.w	r8,r8[0x0]
80007116:	10 9c       	mov	r12,r8
80007118:	f0 1f 00 42 	mcall	80007220 <sd_mmc_mci_card_init+0x8b4>

      //-- (CMD9)
      // Read & analyze CSD register
      if (sd_mmc_mci_get_csd(slot)!=true)
8000711c:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80007120:	10 9c       	mov	r12,r8
80007122:	f0 1f 00 3f 	mcall	8000721c <sd_mmc_mci_card_init+0x8b0>
80007126:	18 98       	mov	r8,r12
80007128:	ec 18 00 01 	eorl	r8,0x1
8000712c:	5c 58       	castu.b	r8
8000712e:	c0 30       	breq	80007134 <sd_mmc_mci_card_init+0x7c8>
        return false;
80007130:	30 08       	mov	r8,0
80007132:	c5 e8       	rjmp	800071ee <sd_mmc_mci_card_init+0x882>

      // select card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80007134:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80007138:	4b 88       	lddpc	r8,80007218 <sd_mmc_mci_card_init+0x8ac>
8000713a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000713e:	4b 38       	lddpc	r8,80007208 <sd_mmc_mci_card_init+0x89c>
80007140:	70 08       	ld.w	r8,r8[0x0]
80007142:	12 9a       	mov	r10,r9
80007144:	e0 6b 10 c7 	mov	r11,4295
80007148:	10 9c       	mov	r12,r8
8000714a:	f0 1f 00 32 	mcall	80007210 <sd_mmc_mci_card_init+0x8a4>
8000714e:	18 98       	mov	r8,r12
80007150:	58 08       	cp.w	r8,0
80007152:	c0 30       	breq	80007158 <sd_mmc_mci_card_init+0x7ec>
        return false;
80007154:	30 08       	mov	r8,0
80007156:	c4 c8       	rjmp	800071ee <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80007158:	4a c8       	lddpc	r8,80007208 <sd_mmc_mci_card_init+0x89c>
8000715a:	70 08       	ld.w	r8,r8[0x0]
8000715c:	10 9c       	mov	r12,r8
8000715e:	f0 1f 00 31 	mcall	80007220 <sd_mmc_mci_card_init+0x8b4>
80007162:	c0 28       	rjmp	80007166 <sd_mmc_mci_card_init+0x7fa>
          }
        }
      }

      if (b_hs_supported==false )
        goto sd_mmc_init_step3;
80007164:	d7 03       	nop
      mci_wait_busy_signal(mci);// read busy state on DAT0
  }

sd_mmc_init_step3:
  // Set clock
  mci_set_speed(mci, g_pbb_hz, g_card_freq[slot]*1000);
80007166:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000716a:	4b 68       	lddpc	r8,80007240 <sd_mmc_mci_card_init+0x8d4>
8000716c:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80007170:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80007174:	e0 68 03 e8 	mov	r8,1000
80007178:	f2 08 02 48 	mul	r8,r9,r8
8000717c:	10 9a       	mov	r10,r8
8000717e:	4a 28       	lddpc	r8,80007204 <sd_mmc_mci_card_init+0x898>
80007180:	70 09       	ld.w	r9,r8[0x0]
80007182:	4a 28       	lddpc	r8,80007208 <sd_mmc_mci_card_init+0x89c>
80007184:	70 08       	ld.w	r8,r8[0x0]
80007186:	12 9b       	mov	r11,r9
80007188:	10 9c       	mov	r12,r8
8000718a:	f0 1f 00 2f 	mcall	80007244 <sd_mmc_mci_card_init+0x8d8>

  //-- (CMD13)
  // Check if card is ready, the card must be in TRAN state
  if(sd_mmc_mci_cmd_send_status(slot)!=true)
8000718e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80007192:	10 9c       	mov	r12,r8
80007194:	f0 1f 00 2d 	mcall	80007248 <sd_mmc_mci_card_init+0x8dc>
80007198:	18 98       	mov	r8,r12
8000719a:	ec 18 00 01 	eorl	r8,0x1
8000719e:	5c 58       	castu.b	r8
800071a0:	c0 30       	breq	800071a6 <sd_mmc_mci_card_init+0x83a>
    return false;
800071a2:	30 08       	mov	r8,0
800071a4:	c2 58       	rjmp	800071ee <sd_mmc_mci_card_init+0x882>

  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
800071a6:	49 98       	lddpc	r8,80007208 <sd_mmc_mci_card_init+0x89c>
800071a8:	70 08       	ld.w	r8,r8[0x0]
800071aa:	10 9c       	mov	r12,r8
800071ac:	f0 1f 00 1a 	mcall	80007214 <sd_mmc_mci_card_init+0x8a8>
800071b0:	18 98       	mov	r8,r12
800071b2:	e4 18 e0 02 	andh	r8,0xe002
800071b6:	e0 18 0e 00 	andl	r8,0xe00
800071ba:	e0 48 08 00 	cp.w	r8,2048
800071be:	c0 30       	breq	800071c4 <sd_mmc_mci_card_init+0x858>
    return false;
800071c0:	30 08       	mov	r8,0
800071c2:	c1 68       	rjmp	800071ee <sd_mmc_mci_card_init+0x882>

  //-- (CMD16)
  // Set the card block length to 512B
  if (sd_mmc_set_block_len (slot, SD_MMC_SECTOR_SIZE)!=true)
800071c4:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800071c8:	e0 6b 02 00 	mov	r11,512
800071cc:	10 9c       	mov	r12,r8
800071ce:	f0 1f 00 20 	mcall	8000724c <sd_mmc_mci_card_init+0x8e0>
800071d2:	18 98       	mov	r8,r12
800071d4:	ec 18 00 01 	eorl	r8,0x1
800071d8:	5c 58       	castu.b	r8
800071da:	c0 30       	breq	800071e0 <sd_mmc_mci_card_init+0x874>
    return false;
800071dc:	30 08       	mov	r8,0
800071de:	c0 88       	rjmp	800071ee <sd_mmc_mci_card_init+0x882>

  // USB Test Unit Attention requires a state "busy" between "not present" and "ready" state
  // otherwise never report card change
  sd_mmc_mci_init_done[slot] = true;
800071e0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800071e4:	48 5a       	lddpc	r10,800071f8 <sd_mmc_mci_card_init+0x88c>
800071e6:	30 18       	mov	r8,1
800071e8:	f4 09 0b 08 	st.b	r10[r9],r8

  return true;
800071ec:	30 18       	mov	r8,1
}
800071ee:	10 9c       	mov	r12,r8
800071f0:	2e 9d       	sub	sp,-92
800071f2:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
800071f6:	00 00       	add	r0,r0
800071f8:	00 00       	add	r0,r0
800071fa:	06 18       	sub	r8,r3
800071fc:	00 00       	add	r0,r0
800071fe:	10 08       	add	r8,r8
80007200:	00 00       	add	r0,r0
80007202:	0e 00       	add	r0,r7
80007204:	00 00       	add	r0,r0
80007206:	06 1c       	sub	r12,r3
80007208:	00 00       	add	r0,r0
8000720a:	01 34       	ld.ub	r4,r0++
8000720c:	80 00       	ld.sh	r0,r0[0x0]
8000720e:	95 20       	st.w	r10[0x8],r0
80007210:	80 00       	ld.sh	r0,r0[0x0]
80007212:	96 54       	ld.sh	r4,r11[0xa]
80007214:	80 00       	ld.sh	r0,r0[0x0]
80007216:	97 8c       	st.w	r11[0x20],r12
80007218:	00 00       	add	r0,r0
8000721a:	0b f0       	ld.ub	r0,r5[0x7]
8000721c:	80 00       	ld.sh	r0,r0[0x0]
8000721e:	63 30       	ld.w	r0,r1[0x4c]
80007220:	80 00       	ld.sh	r0,r0[0x0]
80007222:	97 a8       	st.w	r11[0x28],r8
80007224:	80 00       	ld.sh	r0,r0[0x0]
80007226:	66 20       	ld.w	r0,r3[0x8]
80007228:	80 00       	ld.sh	r0,r0[0x0]
8000722a:	97 2c       	st.w	r11[0x8],r12
8000722c:	80 00       	ld.sh	r0,r0[0x0]
8000722e:	95 d4       	st.w	r10[0x34],r4
80007230:	80 00       	ld.sh	r0,r0[0x0]
80007232:	96 1e       	ld.sh	lr,r11[0x2]
80007234:	00 00       	add	r0,r0
80007236:	07 b4       	ld.ub	r4,r3[0x3]
80007238:	00 00       	add	r0,r0
8000723a:	06 20       	rsub	r0,r3
8000723c:	80 00       	ld.sh	r0,r0[0x0]
8000723e:	e8 44 00 00 	cp.w	r4,524288
80007242:	0e 02       	add	r2,r7
80007244:	80 00       	ld.sh	r0,r0[0x0]
80007246:	94 3c       	ld.sh	r12,r10[0x6]
80007248:	80 00       	ld.sh	r0,r0[0x0]
8000724a:	7e 10       	ld.w	r0,pc[0x4]
8000724c:	80 00       	ld.sh	r0,r0[0x0]
8000724e:	67 ec       	ld.w	r12,r3[0x78]

80007250 <dma_mci_2_ram>:
    return true;
}
#endif

static void dma_mci_2_ram(void *ram, size_t size)
{
80007250:	eb cd 40 80 	pushm	r7,lr
80007254:	1a 97       	mov	r7,sp
80007256:	20 3d       	sub	sp,12
80007258:	ef 4c ff f8 	st.w	r7[-8],r12
8000725c:	ef 4b ff f4 	st.w	r7[-12],r11
  int *pRam = ram;
80007260:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007264:	ef 48 ff fc 	st.w	r7[-4],r8

  // Src Address: the MCI registers.
  AVR32_DMACA.sar1 = (uint32_t)&AVR32_MCI.fifo;
80007268:	fc 18 ff 10 	movh	r8,0xff10
8000726c:	fe 69 42 00 	mov	r9,-114176
80007270:	f1 49 00 58 	st.w	r8[88],r9

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;
80007274:	fc 18 ff 10 	movh	r8,0xff10
80007278:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000727c:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80007280:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
80007284:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007288:	a3 89       	lsr	r9,0x2

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
8000728a:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
8000728e:	fc 18 ff 10 	movh	r8,0xff10
80007292:	e0 69 02 02 	mov	r9,514
80007296:	f1 49 03 a0 	st.w	r8[928],r9
}
8000729a:	2f dd       	sub	sp,-12
8000729c:	e3 cd 80 80 	ldm	sp++,r7,pc

800072a0 <is_dma_mci_2_ram_complete>:

static bool is_dma_mci_2_ram_complete( void )
{
800072a0:	eb cd 40 80 	pushm	r7,lr
800072a4:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
800072a6:	fc 18 ff 10 	movh	r8,0xff10
800072aa:	f0 f8 03 a0 	ld.w	r8,r8[928]
800072ae:	e2 18 00 02 	andl	r8,0x2,COH
800072b2:	c0 30       	breq	800072b8 <is_dma_mci_2_ram_complete+0x18>
    return false;
800072b4:	30 08       	mov	r8,0
800072b6:	c0 28       	rjmp	800072ba <is_dma_mci_2_ram_complete+0x1a>

  return true;
800072b8:	30 18       	mov	r8,1
}
800072ba:	10 9c       	mov	r12,r8
800072bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800072c0 <dma_ram_2_mci>:
    return true;
}
#endif

static void dma_ram_2_mci(const void *ram, size_t size)
{
800072c0:	eb cd 40 80 	pushm	r7,lr
800072c4:	1a 97       	mov	r7,sp
800072c6:	20 3d       	sub	sp,12
800072c8:	ef 4c ff f8 	st.w	r7[-8],r12
800072cc:	ef 4b ff f4 	st.w	r7[-12],r11
  const unsigned int *pRam = ram;
800072d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800072d4:	ef 48 ff fc 	st.w	r7[-4],r8

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.sar1 = (unsigned long)pRam;
800072d8:	fc 18 ff 10 	movh	r8,0xff10
800072dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800072e0:	f1 49 00 58 	st.w	r8[88],r9

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;
800072e4:	fc 18 ff 10 	movh	r8,0xff10
800072e8:	fe 69 42 00 	mov	r9,-114176
800072ec:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
800072f0:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
800072f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800072f8:	a3 89       	lsr	r9,0x2

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
800072fa:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
800072fe:	fc 18 ff 10 	movh	r8,0xff10
80007302:	e0 69 02 02 	mov	r9,514
80007306:	f1 49 03 a0 	st.w	r8[928],r9
}
8000730a:	2f dd       	sub	sp,-12
8000730c:	e3 cd 80 80 	ldm	sp++,r7,pc

80007310 <is_dma_ram_2_mci_complete>:

static bool is_dma_ram_2_mci_complete( void )
{
80007310:	eb cd 40 80 	pushm	r7,lr
80007314:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
80007316:	fc 18 ff 10 	movh	r8,0xff10
8000731a:	f0 f8 03 a0 	ld.w	r8,r8[928]
8000731e:	e2 18 00 02 	andl	r8,0x2,COH
80007322:	c0 30       	breq	80007328 <is_dma_ram_2_mci_complete+0x18>
    return false;
80007324:	30 08       	mov	r8,0
80007326:	c0 28       	rjmp	8000732a <is_dma_ram_2_mci_complete+0x1a>

  return true;
80007328:	30 18       	mov	r8,1
}
8000732a:	10 9c       	mov	r12,r8
8000732c:	e3 cd 80 80 	ldm	sp++,r7,pc

80007330 <sd_mmc_mci_mem_check>:

  return true;
}

bool sd_mmc_mci_mem_check(uint8_t slot)
{
80007330:	eb cd 40 80 	pushm	r7,lr
80007334:	1a 97       	mov	r7,sp
80007336:	20 2d       	sub	sp,8
80007338:	18 98       	mov	r8,r12
8000733a:	ef 68 ff f8 	st.b	r7[-8],r8
  uint8_t timeout_init = 0;
8000733e:	30 08       	mov	r8,0
80007340:	ef 68 ff ff 	st.b	r7[-1],r8

  if (slot > MCI_LAST_SLOTS)
80007344:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007348:	30 18       	mov	r8,1
8000734a:	f0 09 18 00 	cp.b	r9,r8
8000734e:	e0 88 00 04 	brls	80007356 <sd_mmc_mci_mem_check+0x26>
    return false;
80007352:	30 08       	mov	r8,0
80007354:	c4 d8       	rjmp	800073ee <sd_mmc_mci_mem_check+0xbe>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80007356:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000735a:	4a 89       	lddpc	r9,800073f8 <sd_mmc_mci_mem_check+0xc8>
8000735c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007360:	10 9a       	mov	r10,r8
80007362:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007366:	4a 68       	lddpc	r8,800073fc <sd_mmc_mci_mem_check+0xcc>
80007368:	70 08       	ld.w	r8,r8[0x0]
8000736a:	12 9b       	mov	r11,r9
8000736c:	10 9c       	mov	r12,r8
8000736e:	f0 1f 00 25 	mcall	80007400 <sd_mmc_mci_mem_check+0xd0>

  // Check card presence
  if (is_sd_mmc_mci_card_present(slot) == false)
80007372:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007376:	10 9c       	mov	r12,r8
80007378:	f0 1f 00 23 	mcall	80007404 <sd_mmc_mci_mem_check+0xd4>
8000737c:	18 98       	mov	r8,r12
8000737e:	ec 18 00 01 	eorl	r8,0x1
80007382:	5c 58       	castu.b	r8
80007384:	c0 90       	breq	80007396 <sd_mmc_mci_mem_check+0x66>
  {
    sd_mmc_mci_init_done[slot] = false;
80007386:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000738a:	4a 0a       	lddpc	r10,80007408 <sd_mmc_mci_mem_check+0xd8>
8000738c:	30 08       	mov	r8,0
8000738e:	f4 09 0b 08 	st.b	r10[r9],r8
    return false;
80007392:	30 08       	mov	r8,0
80007394:	c2 d8       	rjmp	800073ee <sd_mmc_mci_mem_check+0xbe>
  }

  if (sd_mmc_mci_init_done[slot] == false)
80007396:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000739a:	49 c9       	lddpc	r9,80007408 <sd_mmc_mci_mem_check+0xd8>
8000739c:	f2 08 07 08 	ld.ub	r8,r9[r8]
800073a0:	ec 18 00 01 	eorl	r8,0x1
800073a4:	5c 58       	castu.b	r8
800073a6:	c1 a0       	breq	800073da <sd_mmc_mci_mem_check+0xaa>
  {
    while (sd_mmc_mci_card_init(slot)!=true)
800073a8:	c0 f8       	rjmp	800073c6 <sd_mmc_mci_mem_check+0x96>
    {
      timeout_init++;
800073aa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800073ae:	2f f8       	sub	r8,-1
800073b0:	ef 68 ff ff 	st.b	r7[-1],r8
      if (timeout_init>10) return false;
800073b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800073b8:	30 a8       	mov	r8,10
800073ba:	f0 09 18 00 	cp.b	r9,r8
800073be:	e0 88 00 04 	brls	800073c6 <sd_mmc_mci_mem_check+0x96>
800073c2:	30 08       	mov	r8,0
800073c4:	c1 58       	rjmp	800073ee <sd_mmc_mci_mem_check+0xbe>
    return false;
  }

  if (sd_mmc_mci_init_done[slot] == false)
  {
    while (sd_mmc_mci_card_init(slot)!=true)
800073c6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800073ca:	10 9c       	mov	r12,r8
800073cc:	f0 1f 00 10 	mcall	8000740c <sd_mmc_mci_mem_check+0xdc>
800073d0:	18 98       	mov	r8,r12
800073d2:	ec 18 00 01 	eorl	r8,0x1
800073d6:	5c 58       	castu.b	r8
800073d8:	ce 91       	brne	800073aa <sd_mmc_mci_mem_check+0x7a>
    {
      timeout_init++;
      if (timeout_init>10) return false;
    }
  }
  if (sd_mmc_mci_init_done[slot] == true)
800073da:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800073de:	48 b9       	lddpc	r9,80007408 <sd_mmc_mci_mem_check+0xd8>
800073e0:	f2 08 07 08 	ld.ub	r8,r9[r8]
800073e4:	58 08       	cp.w	r8,0
800073e6:	c0 30       	breq	800073ec <sd_mmc_mci_mem_check+0xbc>
    return true;
800073e8:	30 18       	mov	r8,1
800073ea:	c0 28       	rjmp	800073ee <sd_mmc_mci_mem_check+0xbe>
  else
    return false;
800073ec:	30 08       	mov	r8,0
}
800073ee:	10 9c       	mov	r12,r8
800073f0:	2f ed       	sub	sp,-8
800073f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800073f6:	00 00       	add	r0,r0
800073f8:	00 00       	add	r0,r0
800073fa:	0e 00       	add	r0,r7
800073fc:	00 00       	add	r0,r0
800073fe:	01 34       	ld.ub	r4,r0++
80007400:	80 00       	ld.sh	r0,r0[0x0]
80007402:	97 ec       	st.w	r11[0x38],r12
80007404:	80 00       	ld.sh	r0,r0[0x0]
80007406:	62 78       	ld.w	r8,r1[0x1c]
80007408:	00 00       	add	r0,r0
8000740a:	06 18       	sub	r8,r3
8000740c:	80 00       	ld.sh	r0,r0[0x0]
8000740e:	69 6c       	ld.w	r12,r4[0x58]

80007410 <sd_mmc_mci_dma_read_open>:

  return true;
}

bool sd_mmc_mci_dma_read_open(uint8_t slot, uint32_t pos, void* ram, uint16_t nb_sector)
{
80007410:	eb cd 40 80 	pushm	r7,lr
80007414:	1a 97       	mov	r7,sp
80007416:	20 5d       	sub	sp,20
80007418:	ef 4b ff f4 	st.w	r7[-12],r11
8000741c:	ef 4a ff f0 	st.w	r7[-16],r10
80007420:	12 98       	mov	r8,r9
80007422:	18 99       	mov	r9,r12
80007424:	ef 69 ff f8 	st.b	r7[-8],r9
80007428:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
8000742c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007430:	30 18       	mov	r8,1
80007432:	f0 09 18 00 	cp.b	r9,r8
80007436:	e0 88 00 04 	brls	8000743e <sd_mmc_mci_dma_read_open+0x2e>
    return false;
8000743a:	30 08       	mov	r8,0
8000743c:	c9 a8       	rjmp	80007570 <sd_mmc_mci_dma_read_open+0x160>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000743e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007442:	4c e9       	lddpc	r9,80007578 <sd_mmc_mci_dma_read_open+0x168>
80007444:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007448:	10 9a       	mov	r10,r8
8000744a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000744e:	4c c8       	lddpc	r8,8000757c <sd_mmc_mci_dma_read_open+0x16c>
80007450:	70 08       	ld.w	r8,r8[0x0]
80007452:	12 9b       	mov	r11,r9
80007454:	10 9c       	mov	r12,r8
80007456:	f0 1f 00 4b 	mcall	80007580 <sd_mmc_mci_dma_read_open+0x170>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
8000745a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000745e:	4c a8       	lddpc	r8,80007584 <sd_mmc_mci_dma_read_open+0x174>
80007460:	ee fa ff f4 	ld.w	r10,r7[-12]
80007464:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
80007468:	4c 58       	lddpc	r8,8000757c <sd_mmc_mci_dma_read_open+0x16c>
8000746a:	70 08       	ld.w	r8,r8[0x0]
8000746c:	10 9c       	mov	r12,r8
8000746e:	f0 1f 00 47 	mcall	80007588 <sd_mmc_mci_dma_read_open+0x178>

  addr =  gl_ptr_mem[slot];
80007472:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007476:	4c 48       	lddpc	r8,80007584 <sd_mmc_mci_dma_read_open+0x174>
80007478:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000747c:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
80007480:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007484:	4c 29       	lddpc	r9,8000758c <sd_mmc_mci_dma_read_open+0x17c>
80007486:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000748a:	e2 18 00 10 	andl	r8,0x10,COH
8000748e:	c0 e1       	brne	800074aa <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
80007490:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007494:	4b e9       	lddpc	r9,8000758c <sd_mmc_mci_dma_read_open+0x17c>
80007496:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000749a:	e2 18 00 20 	andl	r8,0x20,COH
  // wait for MMC not busy
  mci_wait_busy_signal(mci);

  addr =  gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
8000749e:	c0 61       	brne	800074aa <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
800074a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800074a4:	a9 78       	lsl	r8,0x9
800074a6:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  //** (CMD13)
  // Necessary to clear flag error "ADDRESS_OUT_OF_RANGE" (ID LABO = MMC15)
  if(mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800074aa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800074ae:	4b 98       	lddpc	r8,80007590 <sd_mmc_mci_dma_read_open+0x180>
800074b0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800074b4:	4b 28       	lddpc	r8,8000757c <sd_mmc_mci_dma_read_open+0x16c>
800074b6:	70 08       	ld.w	r8,r8[0x0]
800074b8:	12 9a       	mov	r10,r9
800074ba:	e0 6b 10 4d 	mov	r11,4173
800074be:	10 9c       	mov	r12,r8
800074c0:	f0 1f 00 35 	mcall	80007594 <sd_mmc_mci_dma_read_open+0x184>
800074c4:	18 98       	mov	r8,r12
800074c6:	58 08       	cp.w	r8,0
800074c8:	c0 30       	breq	800074ce <sd_mmc_mci_dma_read_open+0xbe>
  {
    return false;
800074ca:	30 08       	mov	r8,0
800074cc:	c5 28       	rjmp	80007570 <sd_mmc_mci_dma_read_open+0x160>
  }

  // Request Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
800074ce:	4a c8       	lddpc	r8,8000757c <sd_mmc_mci_dma_read_open+0x16c>
800074d0:	70 08       	ld.w	r8,r8[0x0]
800074d2:	e0 6b 02 00 	mov	r11,512
800074d6:	10 9c       	mov	r12,r8
800074d8:	f0 1f 00 30 	mcall	80007598 <sd_mmc_mci_dma_read_open+0x188>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
800074dc:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800074e0:	4a 78       	lddpc	r8,8000757c <sd_mmc_mci_dma_read_open+0x16c>
800074e2:	70 08       	ld.w	r8,r8[0x0]
800074e4:	12 9b       	mov	r11,r9
800074e6:	10 9c       	mov	r12,r8
800074e8:	f0 1f 00 2d 	mcall	8000759c <sd_mmc_mci_dma_read_open+0x18c>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
800074ec:	fc 18 ff 10 	movh	r8,0xff10
800074f0:	30 19       	mov	r9,1
800074f2:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
800074f6:	fe 68 40 00 	mov	r8,-114688
800074fa:	30 09       	mov	r9,0
800074fc:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
80007500:	fc 18 ff 10 	movh	r8,0xff10
80007504:	30 09       	mov	r9,0
80007506:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
8000750a:	fc 18 ff 10 	movh	r8,0xff10
8000750e:	e0 69 d8 24 	mov	r9,55332
80007512:	ea 19 00 a0 	orh	r9,0xa0
80007516:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
8000751a:	fc 18 ff 10 	movh	r8,0xff10
8000751e:	30 09       	mov	r9,0
80007520:	f1 49 00 98 	st.w	r8[152],r9
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: ignored because the dst is memory.
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: hw handshaking
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80007524:	fc 18 ff 10 	movh	r8,0xff10
80007528:	e0 69 01 00 	mov	r9,256
8000752c:	f1 49 00 9c 	st.w	r8[156],r9
    (0                      << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf: ignored because the dst is memory.
    (AVR32_DMACA_CH_MMCI_RX << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf:
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
80007530:	fe 68 40 00 	mov	r8,-114688
80007534:	e0 69 01 30 	mov	r9,304
80007538:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD17)
  if(mci_send_cmd(mci, SD_MMC_READ_MULTIPLE_BLOCK_CMD, addr)!=MCI_SUCCESS)
8000753c:	49 08       	lddpc	r8,8000757c <sd_mmc_mci_dma_read_open+0x16c>
8000753e:	70 08       	ld.w	r8,r8[0x0]
80007540:	ee fa ff fc 	ld.w	r10,r7[-4]
80007544:	ec 7b 10 52 	mov	r11,856146
80007548:	10 9c       	mov	r12,r8
8000754a:	f0 1f 00 13 	mcall	80007594 <sd_mmc_mci_dma_read_open+0x184>
8000754e:	18 98       	mov	r8,r12
80007550:	58 08       	cp.w	r8,0
80007552:	c0 30       	breq	80007558 <sd_mmc_mci_dma_read_open+0x148>
  {
    return false;
80007554:	30 08       	mov	r8,0
80007556:	c0 d8       	rjmp	80007570 <sd_mmc_mci_dma_read_open+0x160>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
80007558:	48 98       	lddpc	r8,8000757c <sd_mmc_mci_dma_read_open+0x16c>
8000755a:	70 08       	ld.w	r8,r8[0x0]
8000755c:	10 9c       	mov	r12,r8
8000755e:	f0 1f 00 11 	mcall	800075a0 <sd_mmc_mci_dma_read_open+0x190>
80007562:	18 98       	mov	r8,r12
80007564:	e6 18 f0 50 	andh	r8,0xf050,COH
80007568:	c0 30       	breq	8000756e <sd_mmc_mci_dma_read_open+0x15e>
  {
    return false;
8000756a:	30 08       	mov	r8,0
8000756c:	c0 28       	rjmp	80007570 <sd_mmc_mci_dma_read_open+0x160>
  }

  return true;
8000756e:	30 18       	mov	r8,1
}
80007570:	10 9c       	mov	r12,r8
80007572:	2f bd       	sub	sp,-20
80007574:	e3 cd 80 80 	ldm	sp++,r7,pc
80007578:	00 00       	add	r0,r0
8000757a:	0e 00       	add	r0,r7
8000757c:	00 00       	add	r0,r0
8000757e:	01 34       	ld.ub	r4,r0++
80007580:	80 00       	ld.sh	r0,r0[0x0]
80007582:	97 ec       	st.w	r11[0x38],r12
80007584:	00 00       	add	r0,r0
80007586:	06 24       	rsub	r4,r3
80007588:	80 00       	ld.sh	r0,r0[0x0]
8000758a:	97 a8       	st.w	r11[0x28],r8
8000758c:	00 00       	add	r0,r0
8000758e:	10 08       	add	r8,r8
80007590:	00 00       	add	r0,r0
80007592:	0b f0       	ld.ub	r0,r5[0x7]
80007594:	80 00       	ld.sh	r0,r0[0x0]
80007596:	96 54       	ld.sh	r4,r11[0xa]
80007598:	80 00       	ld.sh	r0,r0[0x0]
8000759a:	95 d4       	st.w	r10[0x34],r4
8000759c:	80 00       	ld.sh	r0,r0[0x0]
8000759e:	96 1e       	ld.sh	lr,r11[0x2]
800075a0:	80 00       	ld.sh	r0,r0[0x0]
800075a2:	97 8c       	st.w	r11[0x20],r12

800075a4 <sd_mmc_mci_read_close>:

bool sd_mmc_mci_read_close (uint8_t slot)
{
800075a4:	eb cd 40 80 	pushm	r7,lr
800075a8:	1a 97       	mov	r7,sp
800075aa:	20 3d       	sub	sp,12
800075ac:	18 98       	mov	r8,r12
800075ae:	ef 68 ff f4 	st.b	r7[-12],r8
  if( (mci_crc_error(mci)) )
800075b2:	4a 08       	lddpc	r8,80007630 <sd_mmc_mci_read_close+0x8c>
800075b4:	70 08       	ld.w	r8,r8[0x0]
800075b6:	ef 48 ff f8 	st.w	r7[-8],r8
800075ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800075be:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800075c2:	49 d8       	lddpc	r8,80007634 <sd_mmc_mci_read_close+0x90>
800075c4:	70 08       	ld.w	r8,r8[0x0]
800075c6:	10 99       	mov	r9,r8
800075c8:	e6 19 01 e0 	andh	r9,0x1e0,COH
800075cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800075d0:	71 08       	ld.w	r8,r8[0x40]
800075d2:	f3 e8 10 08 	or	r8,r9,r8
800075d6:	10 99       	mov	r9,r8
800075d8:	49 78       	lddpc	r8,80007634 <sd_mmc_mci_read_close+0x90>
800075da:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800075dc:	49 68       	lddpc	r8,80007634 <sd_mmc_mci_read_close+0x90>
800075de:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
800075e0:	e6 18 00 20 	andh	r8,0x20,COH
800075e4:	c0 90       	breq	800075f6 <sd_mmc_mci_read_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
800075e6:	49 48       	lddpc	r8,80007634 <sd_mmc_mci_read_close+0x90>
800075e8:	70 08       	ld.w	r8,r8[0x0]
800075ea:	10 99       	mov	r9,r8
800075ec:	b5 d9       	cbr	r9,0x15
800075ee:	49 28       	lddpc	r8,80007634 <sd_mmc_mci_read_close+0x90>
800075f0:	91 09       	st.w	r8[0x0],r9
    return true;
800075f2:	30 18       	mov	r8,1
800075f4:	c0 28       	rjmp	800075f8 <sd_mmc_mci_read_close+0x54>
  }
  else
    return false;
800075f6:	30 08       	mov	r8,0
800075f8:	58 08       	cp.w	r8,0
800075fa:	c0 30       	breq	80007600 <sd_mmc_mci_read_close+0x5c>
  {
    return false;  // An CRC error has been seen
800075fc:	30 08       	mov	r8,0
800075fe:	c1 48       	rjmp	80007626 <sd_mmc_mci_read_close+0x82>
  }

  mci_wait_busy_signal(mci);
80007600:	48 c8       	lddpc	r8,80007630 <sd_mmc_mci_read_close+0x8c>
80007602:	70 08       	ld.w	r8,r8[0x0]
80007604:	10 9c       	mov	r12,r8
80007606:	f0 1f 00 0d 	mcall	80007638 <sd_mmc_mci_read_close+0x94>

  if( mci_send_cmd( mci, SD_MMC_STOP_READ_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
8000760a:	48 a8       	lddpc	r8,80007630 <sd_mmc_mci_read_close+0x8c>
8000760c:	70 08       	ld.w	r8,r8[0x0]
8000760e:	3f fa       	mov	r10,-1
80007610:	e2 6b 10 4c 	mov	r11,135244
80007614:	10 9c       	mov	r12,r8
80007616:	f0 1f 00 0a 	mcall	8000763c <sd_mmc_mci_read_close+0x98>
8000761a:	18 98       	mov	r8,r12
8000761c:	58 08       	cp.w	r8,0
8000761e:	c0 30       	breq	80007624 <sd_mmc_mci_read_close+0x80>
    return false;
80007620:	30 08       	mov	r8,0
80007622:	c0 28       	rjmp	80007626 <sd_mmc_mci_read_close+0x82>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  return true;
80007624:	30 18       	mov	r8,1
}
80007626:	10 9c       	mov	r12,r8
80007628:	2f dd       	sub	sp,-12
8000762a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000762e:	00 00       	add	r0,r0
80007630:	00 00       	add	r0,r0
80007632:	01 34       	ld.ub	r4,r0++
80007634:	00 00       	add	r0,r0
80007636:	07 b4       	ld.ub	r4,r3[0x3]
80007638:	80 00       	ld.sh	r0,r0[0x0]
8000763a:	97 a8       	st.w	r11[0x28],r8
8000763c:	80 00       	ld.sh	r0,r0[0x0]
8000763e:	96 54       	ld.sh	r4,r11[0xa]

80007640 <sd_mmc_mci_dma_write_open>:

  return true;
}

bool sd_mmc_mci_dma_write_open (uint8_t slot, uint32_t pos, const void* ram, uint16_t nb_sector)
{
80007640:	eb cd 40 80 	pushm	r7,lr
80007644:	1a 97       	mov	r7,sp
80007646:	20 5d       	sub	sp,20
80007648:	ef 4b ff f4 	st.w	r7[-12],r11
8000764c:	ef 4a ff f0 	st.w	r7[-16],r10
80007650:	12 98       	mov	r8,r9
80007652:	18 99       	mov	r9,r12
80007654:	ef 69 ff f8 	st.b	r7[-8],r9
80007658:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
8000765c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007660:	30 18       	mov	r8,1
80007662:	f0 09 18 00 	cp.b	r9,r8
80007666:	e0 88 00 04 	brls	8000766e <sd_mmc_mci_dma_write_open+0x2e>
    return false;
8000766a:	30 08       	mov	r8,0
8000766c:	c8 88       	rjmp	8000777c <sd_mmc_mci_dma_write_open+0x13c>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000766e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007672:	4c 59       	lddpc	r9,80007784 <sd_mmc_mci_dma_write_open+0x144>
80007674:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007678:	10 9a       	mov	r10,r8
8000767a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000767e:	4c 38       	lddpc	r8,80007788 <sd_mmc_mci_dma_write_open+0x148>
80007680:	70 08       	ld.w	r8,r8[0x0]
80007682:	12 9b       	mov	r11,r9
80007684:	10 9c       	mov	r12,r8
80007686:	f0 1f 00 42 	mcall	8000778c <sd_mmc_mci_dma_write_open+0x14c>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
8000768a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000768e:	4c 18       	lddpc	r8,80007790 <sd_mmc_mci_dma_write_open+0x150>
80007690:	ee fa ff f4 	ld.w	r10,r7[-12]
80007694:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
80007698:	4b c8       	lddpc	r8,80007788 <sd_mmc_mci_dma_write_open+0x148>
8000769a:	70 08       	ld.w	r8,r8[0x0]
8000769c:	10 9c       	mov	r12,r8
8000769e:	f0 1f 00 3e 	mcall	80007794 <sd_mmc_mci_dma_write_open+0x154>
      return false;
   }
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
800076a2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800076a6:	4b b8       	lddpc	r8,80007790 <sd_mmc_mci_dma_write_open+0x150>
800076a8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800076ac:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800076b0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800076b4:	4b 99       	lddpc	r9,80007798 <sd_mmc_mci_dma_write_open+0x158>
800076b6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800076ba:	e2 18 00 10 	andl	r8,0x10,COH
800076be:	c0 e1       	brne	800076da <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
800076c0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800076c4:	4b 59       	lddpc	r9,80007798 <sd_mmc_mci_dma_write_open+0x158>
800076c6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800076ca:	e2 18 00 20 	andl	r8,0x20,COH
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800076ce:	c0 61       	brne	800076da <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
800076d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800076d4:	a9 78       	lsl	r8,0x9
800076d6:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  // Set Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
800076da:	4a c8       	lddpc	r8,80007788 <sd_mmc_mci_dma_write_open+0x148>
800076dc:	70 08       	ld.w	r8,r8[0x0]
800076de:	e0 6b 02 00 	mov	r11,512
800076e2:	10 9c       	mov	r12,r8
800076e4:	f0 1f 00 2e 	mcall	8000779c <sd_mmc_mci_dma_write_open+0x15c>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
800076e8:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800076ec:	4a 78       	lddpc	r8,80007788 <sd_mmc_mci_dma_write_open+0x148>
800076ee:	70 08       	ld.w	r8,r8[0x0]
800076f0:	12 9b       	mov	r11,r9
800076f2:	10 9c       	mov	r12,r8
800076f4:	f0 1f 00 2b 	mcall	800077a0 <sd_mmc_mci_dma_write_open+0x160>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
800076f8:	fc 18 ff 10 	movh	r8,0xff10
800076fc:	30 19       	mov	r9,1
800076fe:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
80007702:	fe 68 40 00 	mov	r8,-114688
80007706:	30 09       	mov	r9,0
80007708:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
8000770c:	fc 18 ff 10 	movh	r8,0xff10
80007710:	30 09       	mov	r9,0
80007712:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
80007716:	fc 18 ff 10 	movh	r8,0xff10
8000771a:	e0 69 d8 24 	mov	r9,55332
8000771e:	ea 19 02 10 	orh	r9,0x210
80007722:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
80007726:	fc 18 ff 10 	movh	r8,0xff10
8000772a:	30 09       	mov	r9,0
8000772c:	f1 49 00 98 	st.w	r8[152],r9
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: hw handshaking
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80007730:	fc 18 ff 10 	movh	r8,0xff10
80007734:	e0 69 18 00 	mov	r9,6144
80007738:	f1 49 00 9c 	st.w	r8[156],r9
    (AVR32_DMACA_CH_MMCI_TX << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf:
    (0                      << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
8000773c:	fe 68 40 00 	mov	r8,-114688
80007740:	e0 69 01 30 	mov	r9,304
80007744:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD24)
  if(mci_send_cmd(mci, SD_MMC_WRITE_MULTIPLE_BLOCK_CMD, addr )!=MCI_SUCCESS)
80007748:	49 08       	lddpc	r8,80007788 <sd_mmc_mci_dma_write_open+0x148>
8000774a:	70 08       	ld.w	r8,r8[0x0]
8000774c:	ee fa ff fc 	ld.w	r10,r7[-4]
80007750:	e8 7b 10 59 	mov	r11,594009
80007754:	10 9c       	mov	r12,r8
80007756:	f0 1f 00 14 	mcall	800077a4 <sd_mmc_mci_dma_write_open+0x164>
8000775a:	18 98       	mov	r8,r12
8000775c:	58 08       	cp.w	r8,0
8000775e:	c0 30       	breq	80007764 <sd_mmc_mci_dma_write_open+0x124>
  {
    return false;
80007760:	30 08       	mov	r8,0
80007762:	c0 d8       	rjmp	8000777c <sd_mmc_mci_dma_write_open+0x13c>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
80007764:	48 98       	lddpc	r8,80007788 <sd_mmc_mci_dma_write_open+0x148>
80007766:	70 08       	ld.w	r8,r8[0x0]
80007768:	10 9c       	mov	r12,r8
8000776a:	f0 1f 00 10 	mcall	800077a8 <sd_mmc_mci_dma_write_open+0x168>
8000776e:	18 98       	mov	r8,r12
80007770:	e6 18 f0 50 	andh	r8,0xf050,COH
80007774:	c0 30       	breq	8000777a <sd_mmc_mci_dma_write_open+0x13a>
  {
    return false;
80007776:	30 08       	mov	r8,0
80007778:	c0 28       	rjmp	8000777c <sd_mmc_mci_dma_write_open+0x13c>
  }

  return true;
8000777a:	30 18       	mov	r8,1
}
8000777c:	10 9c       	mov	r12,r8
8000777e:	2f bd       	sub	sp,-20
80007780:	e3 cd 80 80 	ldm	sp++,r7,pc
80007784:	00 00       	add	r0,r0
80007786:	0e 00       	add	r0,r7
80007788:	00 00       	add	r0,r0
8000778a:	01 34       	ld.ub	r4,r0++
8000778c:	80 00       	ld.sh	r0,r0[0x0]
8000778e:	97 ec       	st.w	r11[0x38],r12
80007790:	00 00       	add	r0,r0
80007792:	06 24       	rsub	r4,r3
80007794:	80 00       	ld.sh	r0,r0[0x0]
80007796:	97 a8       	st.w	r11[0x28],r8
80007798:	00 00       	add	r0,r0
8000779a:	10 08       	add	r8,r8
8000779c:	80 00       	ld.sh	r0,r0[0x0]
8000779e:	95 d4       	st.w	r10[0x34],r4
800077a0:	80 00       	ld.sh	r0,r0[0x0]
800077a2:	96 1e       	ld.sh	lr,r11[0x2]
800077a4:	80 00       	ld.sh	r0,r0[0x0]
800077a6:	96 54       	ld.sh	r4,r11[0xa]
800077a8:	80 00       	ld.sh	r0,r0[0x0]
800077aa:	97 8c       	st.w	r11[0x20],r12

800077ac <sd_mmc_mci_write_close>:

bool sd_mmc_mci_write_close (uint8_t slot)
{
800077ac:	eb cd 40 80 	pushm	r7,lr
800077b0:	1a 97       	mov	r7,sp
800077b2:	20 5d       	sub	sp,20
800077b4:	18 98       	mov	r8,r12
800077b6:	ef 68 ff ec 	st.b	r7[-20],r8
  if( (mci_crc_error(mci)) )
800077ba:	4b 58       	lddpc	r8,8000788c <sd_mmc_mci_write_close+0xe0>
800077bc:	70 08       	ld.w	r8,r8[0x0]
800077be:	ef 48 ff f0 	st.w	r7[-16],r8
800077c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800077c6:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800077ca:	4b 28       	lddpc	r8,80007890 <sd_mmc_mci_write_close+0xe4>
800077cc:	70 08       	ld.w	r8,r8[0x0]
800077ce:	10 99       	mov	r9,r8
800077d0:	e6 19 01 e0 	andh	r9,0x1e0,COH
800077d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800077d8:	71 08       	ld.w	r8,r8[0x40]
800077da:	f3 e8 10 08 	or	r8,r9,r8
800077de:	10 99       	mov	r9,r8
800077e0:	4a c8       	lddpc	r8,80007890 <sd_mmc_mci_write_close+0xe4>
800077e2:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800077e4:	4a b8       	lddpc	r8,80007890 <sd_mmc_mci_write_close+0xe4>
800077e6:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
800077e8:	e6 18 00 20 	andh	r8,0x20,COH
800077ec:	c0 90       	breq	800077fe <sd_mmc_mci_write_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
800077ee:	4a 98       	lddpc	r8,80007890 <sd_mmc_mci_write_close+0xe4>
800077f0:	70 08       	ld.w	r8,r8[0x0]
800077f2:	10 99       	mov	r9,r8
800077f4:	b5 d9       	cbr	r9,0x15
800077f6:	4a 78       	lddpc	r8,80007890 <sd_mmc_mci_write_close+0xe4>
800077f8:	91 09       	st.w	r8[0x0],r9
    return true;
800077fa:	30 18       	mov	r8,1
800077fc:	c0 28       	rjmp	80007800 <sd_mmc_mci_write_close+0x54>
  }
  else
    return false;
800077fe:	30 08       	mov	r8,0
80007800:	58 08       	cp.w	r8,0
80007802:	c0 30       	breq	80007808 <sd_mmc_mci_write_close+0x5c>
  {
    return false;  // An CRC error has been seen
80007804:	30 08       	mov	r8,0
80007806:	c3 e8       	rjmp	80007882 <sd_mmc_mci_write_close+0xd6>
  }

  while(!(mci_data_block_ended(mci)));
80007808:	4a 18       	lddpc	r8,8000788c <sd_mmc_mci_write_close+0xe0>
8000780a:	70 08       	ld.w	r8,r8[0x0]
8000780c:	ef 48 ff f8 	st.w	r7[-8],r8
80007810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007814:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80007818:	49 e8       	lddpc	r8,80007890 <sd_mmc_mci_write_close+0xe4>
8000781a:	70 08       	ld.w	r8,r8[0x0]
8000781c:	10 99       	mov	r9,r8
8000781e:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007822:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007826:	71 08       	ld.w	r8,r8[0x40]
80007828:	f3 e8 10 08 	or	r8,r9,r8
8000782c:	10 99       	mov	r9,r8
8000782e:	49 98       	lddpc	r8,80007890 <sd_mmc_mci_write_close+0xe4>
80007830:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007832:	49 88       	lddpc	r8,80007890 <sd_mmc_mci_write_close+0xe4>
80007834:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_data_block_ended(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_XFRDONE_MASK) != 0;
80007836:	e6 18 08 00 	andh	r8,0x800,COH
8000783a:	5f 18       	srne	r8
8000783c:	58 08       	cp.w	r8,0
8000783e:	ce 50       	breq	80007808 <sd_mmc_mci_write_close+0x5c>

  if( mci_send_cmd( mci, SD_MMC_STOP_WRITE_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
80007840:	49 38       	lddpc	r8,8000788c <sd_mmc_mci_write_close+0xe0>
80007842:	70 08       	ld.w	r8,r8[0x0]
80007844:	3f fa       	mov	r10,-1
80007846:	e2 6b 10 cc 	mov	r11,135372
8000784a:	10 9c       	mov	r12,r8
8000784c:	f0 1f 00 12 	mcall	80007894 <sd_mmc_mci_write_close+0xe8>
80007850:	18 98       	mov	r8,r12
80007852:	58 08       	cp.w	r8,0
80007854:	c0 30       	breq	8000785a <sd_mmc_mci_write_close+0xae>
  {
    return false;
80007856:	30 08       	mov	r8,0
80007858:	c1 58       	rjmp	80007882 <sd_mmc_mci_write_close+0xd6>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  if( slot==SD_SLOT_4BITS )
8000785a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000785e:	30 18       	mov	r8,1
80007860:	f0 09 18 00 	cp.b	r9,r8
80007864:	c0 81       	brne	80007874 <sd_mmc_mci_write_close+0xc8>
  {
    while(!(gpio_get_pin_value(SD_SLOT_4BITS_DATA0_PIN)));                             // Wait until the card is ready.
80007866:	31 3c       	mov	r12,19
80007868:	f0 1f 00 0c 	mcall	80007898 <sd_mmc_mci_write_close+0xec>
8000786c:	18 98       	mov	r8,r12
8000786e:	58 08       	cp.w	r8,0
80007870:	cf b0       	breq	80007866 <sd_mmc_mci_write_close+0xba>
80007872:	c0 78       	rjmp	80007880 <sd_mmc_mci_write_close+0xd4>
  }
  else
  {
    while(!(gpio_get_pin_value(SD_SLOT_8BITS_DATA0_PIN)));                             // Wait until the card is ready.
80007874:	31 dc       	mov	r12,29
80007876:	f0 1f 00 09 	mcall	80007898 <sd_mmc_mci_write_close+0xec>
8000787a:	18 98       	mov	r8,r12
8000787c:	58 08       	cp.w	r8,0
8000787e:	cf b0       	breq	80007874 <sd_mmc_mci_write_close+0xc8>
  }
  return true;
80007880:	30 18       	mov	r8,1
}
80007882:	10 9c       	mov	r12,r8
80007884:	2f bd       	sub	sp,-20
80007886:	e3 cd 80 80 	ldm	sp++,r7,pc
8000788a:	00 00       	add	r0,r0
8000788c:	00 00       	add	r0,r0
8000788e:	01 34       	ld.ub	r4,r0++
80007890:	00 00       	add	r0,r0
80007892:	07 b4       	ld.ub	r4,r3[0x3]
80007894:	80 00       	ld.sh	r0,r0[0x0]
80007896:	96 54       	ld.sh	r4,r11[0xa]
80007898:	80 00       	ld.sh	r0,r0[0x0]
8000789a:	90 80       	ld.uh	r0,r8[0x0]

8000789c <int2alpha>:

char Statement[MSG_LENGTH] = {0};
uint16_t enciphered_blocks = 0, deciphered_blocks = 0, aes_step = 0;
//MESSAGE_STRING_t Lcd_Message;
void int2alpha (uint16_t value, char * dest)
{
8000789c:	eb cd 40 80 	pushm	r7,lr
800078a0:	1a 97       	mov	r7,sp
800078a2:	20 5d       	sub	sp,20
800078a4:	18 98       	mov	r8,r12
800078a6:	ef 4b ff ec 	st.w	r7[-20],r11
800078aa:	ef 58 ff f0 	st.h	r7[-16],r8
	uint8_t i = 0, value_len = 0, temp[10];
800078ae:	30 08       	mov	r8,0
800078b0:	ef 68 ff fe 	st.b	r7[-2],r8
800078b4:	30 08       	mov	r8,0
800078b6:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (value == 0)
800078ba:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800078be:	30 08       	mov	r8,0
800078c0:	f0 09 19 00 	cp.h	r9,r8
800078c4:	c2 c1       	brne	8000791c <int2alpha+0x80>
	{
		return;
800078c6:	c5 68       	rjmp	80007972 <int2alpha+0xd6>
	}
	while (value != 0)
	{
		temp[i++] = value % 10 + '0';
800078c8:	ef 3b ff fe 	ld.ub	r11,r7[-2]
800078cc:	ef 1a ff f0 	ld.uh	r10,r7[-16]
800078d0:	e0 68 cc cd 	mov	r8,52429
800078d4:	ea 18 cc cc 	orh	r8,0xcccc
800078d8:	f4 08 06 48 	mulu.d	r8,r10,r8
800078dc:	a3 99       	lsr	r9,0x3
800078de:	12 98       	mov	r8,r9
800078e0:	a3 68       	lsl	r8,0x2
800078e2:	12 08       	add	r8,r9
800078e4:	a1 78       	lsl	r8,0x1
800078e6:	f4 08 01 08 	sub	r8,r10,r8
800078ea:	5c 88       	casts.h	r8
800078ec:	5c 58       	castu.b	r8
800078ee:	2d 08       	sub	r8,-48
800078f0:	5c 58       	castu.b	r8
800078f2:	ee 0b 00 09 	add	r9,r7,r11
800078f6:	f3 68 ff f4 	st.b	r9[-12],r8
800078fa:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800078fe:	2f f8       	sub	r8,-1
80007900:	ef 68 ff fe 	st.b	r7[-2],r8
		value /= 10;
80007904:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80007908:	e0 68 cc cd 	mov	r8,52429
8000790c:	ea 18 cc cc 	orh	r8,0xcccc
80007910:	f2 08 06 48 	mulu.d	r8,r9,r8
80007914:	f2 08 16 03 	lsr	r8,r9,0x3
80007918:	ef 58 ff f0 	st.h	r7[-16],r8
	
	if (value == 0)
	{
		return;
	}
	while (value != 0)
8000791c:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007920:	30 08       	mov	r8,0
80007922:	f0 09 19 00 	cp.h	r9,r8
80007926:	cd 11       	brne	800078c8 <int2alpha+0x2c>
	{
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
80007928:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000792c:	ef 68 ff ff 	st.b	r7[-1],r8
	i  = 0;
80007930:	30 08       	mov	r8,0
80007932:	ef 68 ff fe 	st.b	r7[-2],r8
	while (i < value_len)
80007936:	c1 78       	rjmp	80007964 <int2alpha+0xc8>
	{
		dest[i] = temp[value_len - i - 1];
80007938:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000793c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007940:	10 09       	add	r9,r8
80007942:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80007946:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000794a:	f4 08 01 08 	sub	r8,r10,r8
8000794e:	20 18       	sub	r8,1
80007950:	ee 08 00 08 	add	r8,r7,r8
80007954:	f1 38 ff f4 	ld.ub	r8,r8[-12]
80007958:	b2 88       	st.b	r9[0x0],r8
		i++;
8000795a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000795e:	2f f8       	sub	r8,-1
80007960:	ef 68 ff fe 	st.b	r7[-2],r8
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
	i  = 0;
	while (i < value_len)
80007964:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007968:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000796c:	f0 09 18 00 	cp.b	r9,r8
80007970:	ce 43       	brcs	80007938 <int2alpha+0x9c>
	{
		dest[i] = temp[value_len - i - 1];
		i++;
	}
}
80007972:	2f bd       	sub	sp,-20
80007974:	e3 cd 80 80 	ldm	sp++,r7,pc

80007978 <string_len>:

uint8_t string_len(char * source_str)
{
80007978:	eb cd 40 80 	pushm	r7,lr
8000797c:	1a 97       	mov	r7,sp
8000797e:	20 2d       	sub	sp,8
80007980:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t i = 0;
80007984:	30 08       	mov	r8,0
80007986:	ef 68 ff ff 	st.b	r7[-1],r8
	
	while (*source_str++ != '\0')
8000798a:	c0 68       	rjmp	80007996 <string_len+0x1e>
	{
		i++;
8000798c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007990:	2f f8       	sub	r8,-1
80007992:	ef 68 ff ff 	st.b	r7[-1],r8

uint8_t string_len(char * source_str)
{
	uint8_t i = 0;
	
	while (*source_str++ != '\0')
80007996:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000799a:	11 89       	ld.ub	r9,r8[0x0]
8000799c:	30 08       	mov	r8,0
8000799e:	f0 09 18 00 	cp.b	r9,r8
800079a2:	5f 18       	srne	r8
800079a4:	5c 58       	castu.b	r8
800079a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800079aa:	2f f9       	sub	r9,-1
800079ac:	ef 49 ff f8 	st.w	r7[-8],r9
800079b0:	58 08       	cp.w	r8,0
800079b2:	ce d1       	brne	8000798c <string_len+0x14>
	{
		i++;
	}
	return i;
800079b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800079b8:	10 9c       	mov	r12,r8
800079ba:	2f ed       	sub	sp,-8
800079bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800079c0 <string_cat>:

void string_cat(const char * source, char * dest)
{
800079c0:	eb cd 40 80 	pushm	r7,lr
800079c4:	1a 97       	mov	r7,sp
800079c6:	20 2d       	sub	sp,8
800079c8:	ef 4c ff fc 	st.w	r7[-4],r12
800079cc:	ef 4b ff f8 	st.w	r7[-8],r11
	while (*source != '\0')
800079d0:	c1 18       	rjmp	800079f2 <string_cat+0x32>
	{
		*dest++ = *source++;
800079d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800079d6:	11 88       	ld.ub	r8,r8[0x0]
800079d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800079dc:	b2 88       	st.b	r9[0x0],r8
800079de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800079e2:	2f f8       	sub	r8,-1
800079e4:	ef 48 ff f8 	st.w	r7[-8],r8
800079e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800079ec:	2f f8       	sub	r8,-1
800079ee:	ef 48 ff fc 	st.w	r7[-4],r8
	return i;
}

void string_cat(const char * source, char * dest)
{
	while (*source != '\0')
800079f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800079f6:	11 88       	ld.ub	r8,r8[0x0]
800079f8:	58 08       	cp.w	r8,0
800079fa:	ce c1       	brne	800079d2 <string_cat+0x12>
	{
		*dest++ = *source++;
	}
}
800079fc:	2f ed       	sub	sp,-8
800079fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80007a02:	d7 03       	nop

80007a04 <sd_mmc_mci_read_multiple_sector>:

bool sd_mmc_mci_read_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
80007a04:	eb cd 40 80 	pushm	r7,lr
80007a08:	1a 97       	mov	r7,sp
80007a0a:	20 5d       	sub	sp,20
80007a0c:	18 99       	mov	r9,r12
80007a0e:	16 98       	mov	r8,r11
80007a10:	ef 4a ff ec 	st.w	r7[-20],r10
80007a14:	ef 69 ff f4 	st.b	r7[-12],r9
80007a18:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
80007a1c:	30 18       	mov	r8,1
80007a1e:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
80007a22:	30 08       	mov	r8,0
80007a24:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
80007a28:	30 08       	mov	r8,0
80007a2a:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
80007a2e:	30 08       	mov	r8,0
80007a30:	ef 68 ff ff 	st.b	r7[-1],r8
80007a34:	c0 c8       	rjmp	80007a4c <sd_mmc_mci_read_multiple_sector+0x48>
  {
	  Statement[i] = 0;
80007a36:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007a3a:	4e 5a       	lddpc	r10,80007bcc <sd_mmc_mci_read_multiple_sector+0x1c8>
80007a3c:	30 08       	mov	r8,0
80007a3e:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
80007a42:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007a46:	2f f8       	sub	r8,-1
80007a48:	ef 68 ff ff 	st.b	r7[-1],r8
80007a4c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007a50:	36 38       	mov	r8,99
80007a52:	f0 09 18 00 	cp.b	r9,r8
80007a56:	fe 98 ff f0 	brls	80007a36 <sd_mmc_mci_read_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
80007a5a:	4d e8       	lddpc	r8,80007bd0 <sd_mmc_mci_read_multiple_sector+0x1cc>
80007a5c:	90 08       	ld.sh	r8,r8[0x0]
80007a5e:	2f f8       	sub	r8,-1
80007a60:	5c 88       	casts.h	r8
80007a62:	4d c9       	lddpc	r9,80007bd0 <sd_mmc_mci_read_multiple_sector+0x1cc>
80007a64:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks = 0;
80007a66:	4d c9       	lddpc	r9,80007bd4 <sd_mmc_mci_read_multiple_sector+0x1d0>
80007a68:	30 08       	mov	r8,0
80007a6a:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks += nb_sector;
80007a6c:	4d b8       	lddpc	r8,80007bd8 <sd_mmc_mci_read_multiple_sector+0x1d4>
80007a6e:	90 08       	ld.sh	r8,r8[0x0]
80007a70:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007a74:	f2 08 00 08 	add	r8,r9,r8
80007a78:	5c 88       	casts.h	r8
80007a7a:	4d 89       	lddpc	r9,80007bd8 <sd_mmc_mci_read_multiple_sector+0x1d4>
80007a7c:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
80007a7e:	4d 58       	lddpc	r8,80007bd0 <sd_mmc_mci_read_multiple_sector+0x1cc>
80007a80:	90 08       	ld.sh	r8,r8[0x0]
80007a82:	5c 78       	castu.h	r8
80007a84:	4d 2b       	lddpc	r11,80007bcc <sd_mmc_mci_read_multiple_sector+0x1c8>
80007a86:	10 9c       	mov	r12,r8
80007a88:	f0 1f 00 55 	mcall	80007bdc <sd_mmc_mci_read_multiple_sector+0x1d8>
  string_cat(" Deciphered ", &Statement[string_len(Statement)]);
80007a8c:	4d 0c       	lddpc	r12,80007bcc <sd_mmc_mci_read_multiple_sector+0x1c8>
80007a8e:	f0 1f 00 55 	mcall	80007be0 <sd_mmc_mci_read_multiple_sector+0x1dc>
80007a92:	18 98       	mov	r8,r12
80007a94:	10 99       	mov	r9,r8
80007a96:	4c e8       	lddpc	r8,80007bcc <sd_mmc_mci_read_multiple_sector+0x1c8>
80007a98:	f2 08 00 08 	add	r8,r9,r8
80007a9c:	10 9b       	mov	r11,r8
80007a9e:	4d 2c       	lddpc	r12,80007be4 <sd_mmc_mci_read_multiple_sector+0x1e0>
80007aa0:	f0 1f 00 52 	mcall	80007be8 <sd_mmc_mci_read_multiple_sector+0x1e4>
  int2alpha(deciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
80007aa4:	4c ac       	lddpc	r12,80007bcc <sd_mmc_mci_read_multiple_sector+0x1c8>
80007aa6:	f0 1f 00 4f 	mcall	80007be0 <sd_mmc_mci_read_multiple_sector+0x1dc>
80007aaa:	18 98       	mov	r8,r12
80007aac:	10 99       	mov	r9,r8
80007aae:	4c 88       	lddpc	r8,80007bcc <sd_mmc_mci_read_multiple_sector+0x1c8>
80007ab0:	10 09       	add	r9,r8
80007ab2:	4c a8       	lddpc	r8,80007bd8 <sd_mmc_mci_read_multiple_sector+0x1d4>
80007ab4:	90 08       	ld.sh	r8,r8[0x0]
80007ab6:	5c 78       	castu.h	r8
80007ab8:	12 9b       	mov	r11,r9
80007aba:	10 9c       	mov	r12,r8
80007abc:	f0 1f 00 48 	mcall	80007bdc <sd_mmc_mci_read_multiple_sector+0x1d8>
  string_cat(" sectors", &Statement[string_len(Statement)]);
80007ac0:	4c 3c       	lddpc	r12,80007bcc <sd_mmc_mci_read_multiple_sector+0x1c8>
80007ac2:	f0 1f 00 48 	mcall	80007be0 <sd_mmc_mci_read_multiple_sector+0x1dc>
80007ac6:	18 98       	mov	r8,r12
80007ac8:	10 99       	mov	r9,r8
80007aca:	4c 18       	lddpc	r8,80007bcc <sd_mmc_mci_read_multiple_sector+0x1c8>
80007acc:	f2 08 00 08 	add	r8,r9,r8
80007ad0:	10 9b       	mov	r11,r8
80007ad2:	4c 7c       	lddpc	r12,80007bec <sd_mmc_mci_read_multiple_sector+0x1e8>
80007ad4:	f0 1f 00 45 	mcall	80007be8 <sd_mmc_mci_read_multiple_sector+0x1e4>
  
  //et024006_DrawFilledRect(10, 3 * 10, ET024006_WIDTH, 10, WHITE);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 3 * 10, WHITE, BLACK);
80007ad8:	4c 6b       	lddpc	r11,80007bf0 <sd_mmc_mci_read_multiple_sector+0x1ec>
80007ada:	30 08       	mov	r8,0
80007adc:	1a d8       	st.w	--sp,r8
80007ade:	e0 68 ff ff 	mov	r8,65535
80007ae2:	31 e9       	mov	r9,30
80007ae4:	30 aa       	mov	r10,10
80007ae6:	4b ac       	lddpc	r12,80007bcc <sd_mmc_mci_read_multiple_sector+0x1c8>
80007ae8:	f0 1f 00 43 	mcall	80007bf4 <sd_mmc_mci_read_multiple_sector+0x1f0>
80007aec:	2f fd       	sub	sp,-4
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
80007aee:	c4 38       	rjmp	80007b74 <sd_mmc_mci_read_multiple_sector+0x170>
  {
    // (re)load first stage.
    dma_mci_2_ram((0==(buffer_id++%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80007af0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007af4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007af8:	5f 08       	sreq	r8
80007afa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007afe:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007b02:	2f f8       	sub	r8,-1
80007b04:	ef 68 ff fb 	st.b	r7[-5],r8
80007b08:	58 09       	cp.w	r9,0
80007b0a:	c0 30       	breq	80007b10 <sd_mmc_mci_read_multiple_sector+0x10c>
80007b0c:	4b b8       	lddpc	r8,80007bf8 <sd_mmc_mci_read_multiple_sector+0x1f4>
80007b0e:	c0 28       	rjmp	80007b12 <sd_mmc_mci_read_multiple_sector+0x10e>
80007b10:	4b b8       	lddpc	r8,80007bfc <sd_mmc_mci_read_multiple_sector+0x1f8>
80007b12:	e0 6b 02 00 	mov	r11,512
80007b16:	10 9c       	mov	r12,r8
80007b18:	f0 1f 00 3a 	mcall	80007c00 <sd_mmc_mci_read_multiple_sector+0x1fc>

    // (re)load second stage.
    if( !b_first_step )
80007b1c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007b20:	ec 18 00 01 	eorl	r8,0x1
80007b24:	5c 58       	castu.b	r8
80007b26:	c1 d0       	breq	80007b60 <sd_mmc_mci_read_multiple_sector+0x15c>
	{
      //apply_aes_decryption(&AVR32_AES, (0==(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
	  addr = addr + 512L; //sector_index++;
80007b28:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007b2c:	f0 c8 fe 00 	sub	r8,r8,-512
80007b30:	ef 48 ff ec 	st.w	r7[-20],r8
	  if (!udi_msc_trans_block(true, (0==(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
80007b34:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007b38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007b3c:	c0 31       	brne	80007b42 <sd_mmc_mci_read_multiple_sector+0x13e>
80007b3e:	4a f8       	lddpc	r8,80007bf8 <sd_mmc_mci_read_multiple_sector+0x1f4>
80007b40:	c0 28       	rjmp	80007b44 <sd_mmc_mci_read_multiple_sector+0x140>
80007b42:	4a f8       	lddpc	r8,80007bfc <sd_mmc_mci_read_multiple_sector+0x1f8>
80007b44:	30 09       	mov	r9,0
80007b46:	e0 6a 02 00 	mov	r10,512
80007b4a:	10 9b       	mov	r11,r8
80007b4c:	30 1c       	mov	r12,1
80007b4e:	f0 1f 00 2e 	mcall	80007c04 <sd_mmc_mci_read_multiple_sector+0x200>
80007b52:	18 98       	mov	r8,r12
80007b54:	ec 18 00 01 	eorl	r8,0x1
80007b58:	5c 58       	castu.b	r8
80007b5a:	c0 30       	breq	80007b60 <sd_mmc_mci_read_multiple_sector+0x15c>
	  {
    	    return false;
80007b5c:	30 08       	mov	r8,0
80007b5e:	c3 28       	rjmp	80007bc2 <sd_mmc_mci_read_multiple_sector+0x1be>
      }

    }
    b_first_step = false;
80007b60:	30 08       	mov	r8,0
80007b62:	ef 68 ff fa 	st.b	r7[-6],r8
    // Wait completion of DMACA stage.
    while( !is_dma_mci_2_ram_complete() );
80007b66:	f0 1f 00 29 	mcall	80007c08 <sd_mmc_mci_read_multiple_sector+0x204>
80007b6a:	18 98       	mov	r8,r12
80007b6c:	ec 18 00 01 	eorl	r8,0x1
80007b70:	5c 58       	castu.b	r8
80007b72:	cf a1       	brne	80007b66 <sd_mmc_mci_read_multiple_sector+0x162>
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
80007b74:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007b78:	30 08       	mov	r8,0
80007b7a:	f0 09 19 00 	cp.h	r9,r8
80007b7e:	5f 18       	srne	r8
80007b80:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007b84:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80007b88:	20 18       	sub	r8,1
80007b8a:	ef 58 ff f0 	st.h	r7[-16],r8
80007b8e:	58 09       	cp.w	r9,0
80007b90:	cb 01       	brne	80007af0 <sd_mmc_mci_read_multiple_sector+0xec>

  }

  // Complete execution of the last transfer (which is in the pipe).
  //apply_aes_decryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
  if (!udi_msc_trans_block(true, (0!=(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
80007b92:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007b96:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007b9a:	5c 58       	castu.b	r8
80007b9c:	c0 30       	breq	80007ba2 <sd_mmc_mci_read_multiple_sector+0x19e>
80007b9e:	49 78       	lddpc	r8,80007bf8 <sd_mmc_mci_read_multiple_sector+0x1f4>
80007ba0:	c0 28       	rjmp	80007ba4 <sd_mmc_mci_read_multiple_sector+0x1a0>
80007ba2:	49 78       	lddpc	r8,80007bfc <sd_mmc_mci_read_multiple_sector+0x1f8>
80007ba4:	30 09       	mov	r9,0
80007ba6:	e0 6a 02 00 	mov	r10,512
80007baa:	10 9b       	mov	r11,r8
80007bac:	30 1c       	mov	r12,1
80007bae:	f0 1f 00 16 	mcall	80007c04 <sd_mmc_mci_read_multiple_sector+0x200>
80007bb2:	18 98       	mov	r8,r12
80007bb4:	ec 18 00 01 	eorl	r8,0x1
80007bb8:	5c 58       	castu.b	r8
80007bba:	c0 30       	breq	80007bc0 <sd_mmc_mci_read_multiple_sector+0x1bc>
    return false;
80007bbc:	30 08       	mov	r8,0
80007bbe:	c0 28       	rjmp	80007bc2 <sd_mmc_mci_read_multiple_sector+0x1be>

  return true;
80007bc0:	30 18       	mov	r8,1
}
80007bc2:	10 9c       	mov	r12,r8
80007bc4:	2f bd       	sub	sp,-20
80007bc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80007bca:	00 00       	add	r0,r0
80007bcc:	00 00       	add	r0,r0
80007bce:	06 2c       	rsub	r12,r3
80007bd0:	00 00       	add	r0,r0
80007bd2:	06 94       	mov	r4,r3
80007bd4:	00 00       	add	r0,r0
80007bd6:	06 90       	mov	r0,r3
80007bd8:	00 00       	add	r0,r0
80007bda:	06 92       	mov	r2,r3
80007bdc:	80 00       	ld.sh	r0,r0[0x0]
80007bde:	78 9c       	ld.w	r12,r12[0x24]
80007be0:	80 00       	ld.sh	r0,r0[0x0]
80007be2:	79 78       	ld.w	r8,r12[0x5c]
80007be4:	80 00       	ld.sh	r0,r0[0x0]
80007be6:	62 4c       	ld.w	r12,r1[0x10]
80007be8:	80 00       	ld.sh	r0,r0[0x0]
80007bea:	79 c0       	ld.w	r0,r12[0x70]
80007bec:	80 00       	ld.sh	r0,r0[0x0]
80007bee:	62 5c       	ld.w	r12,r1[0x14]
80007bf0:	80 00       	ld.sh	r0,r0[0x0]
80007bf2:	f1 b4       	*unknown*
80007bf4:	80 00       	ld.sh	r0,r0[0x0]
80007bf6:	48 bc       	lddpc	r12,80007c20 <sd_mmc_mci_write_multiple_sector+0x14>
80007bf8:	00 00       	add	r0,r0
80007bfa:	0e 08       	add	r8,r7
80007bfc:	00 00       	add	r0,r0
80007bfe:	0c 00       	add	r0,r6
80007c00:	80 00       	ld.sh	r0,r0[0x0]
80007c02:	72 50       	ld.w	r0,r9[0x14]
80007c04:	80 00       	ld.sh	r0,r0[0x0]
80007c06:	d3 44       	*unknown*
80007c08:	80 00       	ld.sh	r0,r0[0x0]
80007c0a:	72 a0       	ld.w	r0,r9[0x28]

80007c0c <sd_mmc_mci_write_multiple_sector>:



bool sd_mmc_mci_write_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
80007c0c:	eb cd 40 80 	pushm	r7,lr
80007c10:	1a 97       	mov	r7,sp
80007c12:	20 5d       	sub	sp,20
80007c14:	18 99       	mov	r9,r12
80007c16:	16 98       	mov	r8,r11
80007c18:	ef 4a ff ec 	st.w	r7[-20],r10
80007c1c:	ef 69 ff f4 	st.b	r7[-12],r9
80007c20:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
80007c24:	30 18       	mov	r8,1
80007c26:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
80007c2a:	30 08       	mov	r8,0
80007c2c:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
80007c30:	30 08       	mov	r8,0
80007c32:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
80007c36:	30 08       	mov	r8,0
80007c38:	ef 68 ff ff 	st.b	r7[-1],r8
80007c3c:	c0 c8       	rjmp	80007c54 <sd_mmc_mci_write_multiple_sector+0x48>
  {
	  Statement[i] = 0;
80007c3e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007c42:	4e 4a       	lddpc	r10,80007dd0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007c44:	30 08       	mov	r8,0
80007c46:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
80007c4a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007c4e:	2f f8       	sub	r8,-1
80007c50:	ef 68 ff ff 	st.b	r7[-1],r8
80007c54:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007c58:	36 38       	mov	r8,99
80007c5a:	f0 09 18 00 	cp.b	r9,r8
80007c5e:	fe 98 ff f0 	brls	80007c3e <sd_mmc_mci_write_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
80007c62:	4d d8       	lddpc	r8,80007dd4 <sd_mmc_mci_write_multiple_sector+0x1c8>
80007c64:	90 08       	ld.sh	r8,r8[0x0]
80007c66:	2f f8       	sub	r8,-1
80007c68:	5c 88       	casts.h	r8
80007c6a:	4d b9       	lddpc	r9,80007dd4 <sd_mmc_mci_write_multiple_sector+0x1c8>
80007c6c:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks = 0;
80007c6e:	4d b9       	lddpc	r9,80007dd8 <sd_mmc_mci_write_multiple_sector+0x1cc>
80007c70:	30 08       	mov	r8,0
80007c72:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks += nb_sector;
80007c74:	4d a8       	lddpc	r8,80007ddc <sd_mmc_mci_write_multiple_sector+0x1d0>
80007c76:	90 08       	ld.sh	r8,r8[0x0]
80007c78:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007c7c:	f2 08 00 08 	add	r8,r9,r8
80007c80:	5c 88       	casts.h	r8
80007c82:	4d 79       	lddpc	r9,80007ddc <sd_mmc_mci_write_multiple_sector+0x1d0>
80007c84:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
80007c86:	4d 48       	lddpc	r8,80007dd4 <sd_mmc_mci_write_multiple_sector+0x1c8>
80007c88:	90 08       	ld.sh	r8,r8[0x0]
80007c8a:	5c 78       	castu.h	r8
80007c8c:	4d 1b       	lddpc	r11,80007dd0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007c8e:	10 9c       	mov	r12,r8
80007c90:	f0 1f 00 54 	mcall	80007de0 <sd_mmc_mci_write_multiple_sector+0x1d4>
  string_cat(" Enciphered ", &Statement[string_len(Statement)]);
80007c94:	4c fc       	lddpc	r12,80007dd0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007c96:	f0 1f 00 54 	mcall	80007de4 <sd_mmc_mci_write_multiple_sector+0x1d8>
80007c9a:	18 98       	mov	r8,r12
80007c9c:	10 99       	mov	r9,r8
80007c9e:	4c d8       	lddpc	r8,80007dd0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007ca0:	f2 08 00 08 	add	r8,r9,r8
80007ca4:	10 9b       	mov	r11,r8
80007ca6:	4d 1c       	lddpc	r12,80007de8 <sd_mmc_mci_write_multiple_sector+0x1dc>
80007ca8:	f0 1f 00 51 	mcall	80007dec <sd_mmc_mci_write_multiple_sector+0x1e0>
  int2alpha(enciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
80007cac:	4c 9c       	lddpc	r12,80007dd0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007cae:	f0 1f 00 4e 	mcall	80007de4 <sd_mmc_mci_write_multiple_sector+0x1d8>
80007cb2:	18 98       	mov	r8,r12
80007cb4:	10 99       	mov	r9,r8
80007cb6:	4c 78       	lddpc	r8,80007dd0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007cb8:	10 09       	add	r9,r8
80007cba:	4c 98       	lddpc	r8,80007ddc <sd_mmc_mci_write_multiple_sector+0x1d0>
80007cbc:	90 08       	ld.sh	r8,r8[0x0]
80007cbe:	5c 78       	castu.h	r8
80007cc0:	12 9b       	mov	r11,r9
80007cc2:	10 9c       	mov	r12,r8
80007cc4:	f0 1f 00 47 	mcall	80007de0 <sd_mmc_mci_write_multiple_sector+0x1d4>
  string_cat(" sectors", &Statement[string_len(Statement)]);
80007cc8:	4c 2c       	lddpc	r12,80007dd0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007cca:	f0 1f 00 47 	mcall	80007de4 <sd_mmc_mci_write_multiple_sector+0x1d8>
80007cce:	18 98       	mov	r8,r12
80007cd0:	10 99       	mov	r9,r8
80007cd2:	4c 08       	lddpc	r8,80007dd0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007cd4:	f2 08 00 08 	add	r8,r9,r8
80007cd8:	10 9b       	mov	r11,r8
80007cda:	4c 6c       	lddpc	r12,80007df0 <sd_mmc_mci_write_multiple_sector+0x1e4>
80007cdc:	f0 1f 00 44 	mcall	80007dec <sd_mmc_mci_write_multiple_sector+0x1e0>
  
  //et024006_DrawFilledRect(10, 5 * 10, ET024006_WIDTH, 10, BLACK);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 5 * 10, WHITE, BLACK);  //et024006_PrintConsole(Statement, BLACK, -1);
80007ce0:	4c 5b       	lddpc	r11,80007df4 <sd_mmc_mci_write_multiple_sector+0x1e8>
80007ce2:	30 08       	mov	r8,0
80007ce4:	1a d8       	st.w	--sp,r8
80007ce6:	e0 68 ff ff 	mov	r8,65535
80007cea:	33 29       	mov	r9,50
80007cec:	30 aa       	mov	r10,10
80007cee:	4b 9c       	lddpc	r12,80007dd0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007cf0:	f0 1f 00 42 	mcall	80007df8 <sd_mmc_mci_write_multiple_sector+0x1ec>
80007cf4:	2f fd       	sub	sp,-4
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
80007cf6:	c4 38       	rjmp	80007d7c <sd_mmc_mci_write_multiple_sector+0x170>

    // (re)load second stage.
    if( !b_first_step )
80007cf8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007cfc:	ec 18 00 01 	eorl	r8,0x1
80007d00:	5c 58       	castu.b	r8
80007d02:	c1 50       	breq	80007d2c <sd_mmc_mci_write_multiple_sector+0x120>
	{
	  //apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
	  addr = addr + 512L; //sector_index++;
80007d04:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007d08:	f0 c8 fe 00 	sub	r8,r8,-512
80007d0c:	ef 48 ff ec 	st.w	r7[-20],r8
      dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80007d10:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007d14:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007d18:	5c 58       	castu.b	r8
80007d1a:	c0 30       	breq	80007d20 <sd_mmc_mci_write_multiple_sector+0x114>
80007d1c:	4b 88       	lddpc	r8,80007dfc <sd_mmc_mci_write_multiple_sector+0x1f0>
80007d1e:	c0 28       	rjmp	80007d22 <sd_mmc_mci_write_multiple_sector+0x116>
80007d20:	4b 88       	lddpc	r8,80007e00 <sd_mmc_mci_write_multiple_sector+0x1f4>
80007d22:	e0 6b 02 00 	mov	r11,512
80007d26:	10 9c       	mov	r12,r8
80007d28:	f0 1f 00 37 	mcall	80007e04 <sd_mmc_mci_write_multiple_sector+0x1f8>
    }
    udi_msc_trans_block(false, (0==(buffer_id++%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL);
80007d2c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007d30:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007d34:	5f 08       	sreq	r8
80007d36:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007d3a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007d3e:	2f f8       	sub	r8,-1
80007d40:	ef 68 ff fb 	st.b	r7[-5],r8
80007d44:	58 09       	cp.w	r9,0
80007d46:	c0 30       	breq	80007d4c <sd_mmc_mci_write_multiple_sector+0x140>
80007d48:	4a d8       	lddpc	r8,80007dfc <sd_mmc_mci_write_multiple_sector+0x1f0>
80007d4a:	c0 28       	rjmp	80007d4e <sd_mmc_mci_write_multiple_sector+0x142>
80007d4c:	4a d8       	lddpc	r8,80007e00 <sd_mmc_mci_write_multiple_sector+0x1f4>
80007d4e:	30 09       	mov	r9,0
80007d50:	e0 6a 02 00 	mov	r10,512
80007d54:	10 9b       	mov	r11,r8
80007d56:	30 0c       	mov	r12,0
80007d58:	f0 1f 00 2c 	mcall	80007e08 <sd_mmc_mci_write_multiple_sector+0x1fc>
    if( !b_first_step ) {
80007d5c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007d60:	ec 18 00 01 	eorl	r8,0x1
80007d64:	5c 58       	castu.b	r8
80007d66:	c0 80       	breq	80007d76 <sd_mmc_mci_write_multiple_sector+0x16a>
      // Wait completion of DMACA stage.
      while( !is_dma_ram_2_mci_complete() );
80007d68:	f0 1f 00 29 	mcall	80007e0c <sd_mmc_mci_write_multiple_sector+0x200>
80007d6c:	18 98       	mov	r8,r12
80007d6e:	ec 18 00 01 	eorl	r8,0x1
80007d72:	5c 58       	castu.b	r8
80007d74:	cf a1       	brne	80007d68 <sd_mmc_mci_write_multiple_sector+0x15c>
    }
    b_first_step=false;
80007d76:	30 08       	mov	r8,0
80007d78:	ef 68 ff fa 	st.b	r7[-6],r8
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
80007d7c:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007d80:	30 08       	mov	r8,0
80007d82:	f0 09 19 00 	cp.h	r9,r8
80007d86:	5f 18       	srne	r8
80007d88:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007d8c:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80007d90:	20 18       	sub	r8,1
80007d92:	ef 58 ff f0 	st.h	r7[-16],r8
80007d96:	58 09       	cp.w	r9,0
80007d98:	cb 01       	brne	80007cf8 <sd_mmc_mci_write_multiple_sector+0xec>
    b_first_step=false;
  }

  // Complete execution of the last transfer (which is in the pipe).
  //apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
  dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80007d9a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007d9e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007da2:	5c 58       	castu.b	r8
80007da4:	c0 30       	breq	80007daa <sd_mmc_mci_write_multiple_sector+0x19e>
80007da6:	49 68       	lddpc	r8,80007dfc <sd_mmc_mci_write_multiple_sector+0x1f0>
80007da8:	c0 28       	rjmp	80007dac <sd_mmc_mci_write_multiple_sector+0x1a0>
80007daa:	49 68       	lddpc	r8,80007e00 <sd_mmc_mci_write_multiple_sector+0x1f4>
80007dac:	e0 6b 02 00 	mov	r11,512
80007db0:	10 9c       	mov	r12,r8
80007db2:	f0 1f 00 15 	mcall	80007e04 <sd_mmc_mci_write_multiple_sector+0x1f8>
  while( !is_dma_ram_2_mci_complete() );
80007db6:	f0 1f 00 16 	mcall	80007e0c <sd_mmc_mci_write_multiple_sector+0x200>
80007dba:	18 98       	mov	r8,r12
80007dbc:	ec 18 00 01 	eorl	r8,0x1
80007dc0:	5c 58       	castu.b	r8
80007dc2:	cf a1       	brne	80007db6 <sd_mmc_mci_write_multiple_sector+0x1aa>
  return true;
80007dc4:	30 18       	mov	r8,1
}
80007dc6:	10 9c       	mov	r12,r8
80007dc8:	2f bd       	sub	sp,-20
80007dca:	e3 cd 80 80 	ldm	sp++,r7,pc
80007dce:	00 00       	add	r0,r0
80007dd0:	00 00       	add	r0,r0
80007dd2:	06 2c       	rsub	r12,r3
80007dd4:	00 00       	add	r0,r0
80007dd6:	06 94       	mov	r4,r3
80007dd8:	00 00       	add	r0,r0
80007dda:	06 92       	mov	r2,r3
80007ddc:	00 00       	add	r0,r0
80007dde:	06 90       	mov	r0,r3
80007de0:	80 00       	ld.sh	r0,r0[0x0]
80007de2:	78 9c       	ld.w	r12,r12[0x24]
80007de4:	80 00       	ld.sh	r0,r0[0x0]
80007de6:	79 78       	ld.w	r8,r12[0x5c]
80007de8:	80 00       	ld.sh	r0,r0[0x0]
80007dea:	62 68       	ld.w	r8,r1[0x18]
80007dec:	80 00       	ld.sh	r0,r0[0x0]
80007dee:	79 c0       	ld.w	r0,r12[0x70]
80007df0:	80 00       	ld.sh	r0,r0[0x0]
80007df2:	62 5c       	ld.w	r12,r1[0x14]
80007df4:	80 00       	ld.sh	r0,r0[0x0]
80007df6:	f1 b4       	*unknown*
80007df8:	80 00       	ld.sh	r0,r0[0x0]
80007dfa:	48 bc       	lddpc	r12,80007e24 <sd_mmc_mci_cmd_send_status+0x14>
80007dfc:	00 00       	add	r0,r0
80007dfe:	0e 08       	add	r8,r7
80007e00:	00 00       	add	r0,r0
80007e02:	0c 00       	add	r0,r6
80007e04:	80 00       	ld.sh	r0,r0[0x0]
80007e06:	72 c0       	ld.w	r0,r9[0x30]
80007e08:	80 00       	ld.sh	r0,r0[0x0]
80007e0a:	d3 44       	*unknown*
80007e0c:	80 00       	ld.sh	r0,r0[0x0]
80007e0e:	73 10       	ld.w	r0,r9[0x44]

80007e10 <sd_mmc_mci_cmd_send_status>:
   return true;
}
#endif      // end FUNC_MMC_CARD_SECU

bool  sd_mmc_mci_cmd_send_status(uint8_t slot)
{
80007e10:	eb cd 40 80 	pushm	r7,lr
80007e14:	1a 97       	mov	r7,sp
80007e16:	20 1d       	sub	sp,4
80007e18:	18 98       	mov	r8,r12
80007e1a:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80007e1e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007e22:	30 18       	mov	r8,1
80007e24:	f0 09 18 00 	cp.b	r9,r8
80007e28:	e0 88 00 04 	brls	80007e30 <sd_mmc_mci_cmd_send_status+0x20>
    return false;
80007e2c:	30 08       	mov	r8,0
80007e2e:	c2 28       	rjmp	80007e72 <sd_mmc_mci_cmd_send_status+0x62>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80007e30:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007e34:	49 29       	lddpc	r9,80007e7c <sd_mmc_mci_cmd_send_status+0x6c>
80007e36:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007e3a:	10 9a       	mov	r10,r8
80007e3c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007e40:	49 08       	lddpc	r8,80007e80 <sd_mmc_mci_cmd_send_status+0x70>
80007e42:	70 08       	ld.w	r8,r8[0x0]
80007e44:	12 9b       	mov	r11,r9
80007e46:	10 9c       	mov	r12,r8
80007e48:	f0 1f 00 0f 	mcall	80007e84 <sd_mmc_mci_cmd_send_status+0x74>

  if (mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80007e4c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007e50:	48 e8       	lddpc	r8,80007e88 <sd_mmc_mci_cmd_send_status+0x78>
80007e52:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80007e56:	48 b8       	lddpc	r8,80007e80 <sd_mmc_mci_cmd_send_status+0x70>
80007e58:	70 08       	ld.w	r8,r8[0x0]
80007e5a:	12 9a       	mov	r10,r9
80007e5c:	e0 6b 10 4d 	mov	r11,4173
80007e60:	10 9c       	mov	r12,r8
80007e62:	f0 1f 00 0b 	mcall	80007e8c <sd_mmc_mci_cmd_send_status+0x7c>
80007e66:	18 98       	mov	r8,r12
80007e68:	58 08       	cp.w	r8,0
80007e6a:	c0 30       	breq	80007e70 <sd_mmc_mci_cmd_send_status+0x60>
    return false;
80007e6c:	30 08       	mov	r8,0
80007e6e:	c0 28       	rjmp	80007e72 <sd_mmc_mci_cmd_send_status+0x62>

  return true;
80007e70:	30 18       	mov	r8,1
}
80007e72:	10 9c       	mov	r12,r8
80007e74:	2f fd       	sub	sp,-4
80007e76:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e7a:	00 00       	add	r0,r0
80007e7c:	00 00       	add	r0,r0
80007e7e:	0e 00       	add	r0,r7
80007e80:	00 00       	add	r0,r0
80007e82:	01 34       	ld.ub	r4,r0++
80007e84:	80 00       	ld.sh	r0,r0[0x0]
80007e86:	97 ec       	st.w	r11[0x38],r12
80007e88:	00 00       	add	r0,r0
80007e8a:	0b f0       	ld.ub	r0,r5[0x7]
80007e8c:	80 00       	ld.sh	r0,r0[0x0]
80007e8e:	96 54       	ld.sh	r4,r11[0xa]

80007e90 <sd_mmc_mci_test_unit_ready>:
 */
//! @{


Ctrl_status sd_mmc_mci_test_unit_ready(uint8_t slot)
{
80007e90:	eb cd 40 80 	pushm	r7,lr
80007e94:	1a 97       	mov	r7,sp
80007e96:	20 1d       	sub	sp,4
80007e98:	18 98       	mov	r8,r12
80007e9a:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS) return CTRL_FAIL;
80007e9e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007ea2:	30 18       	mov	r8,1
80007ea4:	f0 09 18 00 	cp.b	r9,r8
80007ea8:	e0 88 00 04 	brls	80007eb0 <sd_mmc_mci_test_unit_ready+0x20>
80007eac:	30 18       	mov	r8,1
80007eae:	c4 d8       	rjmp	80007f48 <sd_mmc_mci_test_unit_ready+0xb8>

  Sd_mmc_mci_access_signal_on();
  switch (sd_mmc_mci_presence_status[slot])
80007eb0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007eb4:	4a 79       	lddpc	r9,80007f50 <sd_mmc_mci_test_unit_ready+0xc0>
80007eb6:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007eba:	58 18       	cp.w	r8,1
80007ebc:	c1 d0       	breq	80007ef6 <sd_mmc_mci_test_unit_ready+0x66>
80007ebe:	58 28       	cp.w	r8,2
80007ec0:	c3 50       	breq	80007f2a <sd_mmc_mci_test_unit_ready+0x9a>
80007ec2:	58 08       	cp.w	r8,0
80007ec4:	c3 b1       	brne	80007f3a <sd_mmc_mci_test_unit_ready+0xaa>
  {
    case SD_MMC_REMOVED:
      sd_mmc_mci_init_done[slot] = false;
80007ec6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007eca:	4a 3a       	lddpc	r10,80007f54 <sd_mmc_mci_test_unit_ready+0xc4>
80007ecc:	30 08       	mov	r8,0
80007ece:	f4 09 0b 08 	st.b	r10[r9],r8
      if (sd_mmc_mci_mem_check(slot))
80007ed2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007ed6:	10 9c       	mov	r12,r8
80007ed8:	f0 1f 00 20 	mcall	80007f58 <sd_mmc_mci_test_unit_ready+0xc8>
80007edc:	18 98       	mov	r8,r12
80007ede:	58 08       	cp.w	r8,0
80007ee0:	c0 90       	breq	80007ef2 <sd_mmc_mci_test_unit_ready+0x62>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_INSERTED;
80007ee2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007ee6:	49 ba       	lddpc	r10,80007f50 <sd_mmc_mci_test_unit_ready+0xc0>
80007ee8:	30 18       	mov	r8,1
80007eea:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
80007eee:	30 38       	mov	r8,3
80007ef0:	c2 c8       	rjmp	80007f48 <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
80007ef2:	30 28       	mov	r8,2
80007ef4:	c2 a8       	rjmp	80007f48 <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_INSERTED:
      if (!sd_mmc_mci_mem_check(slot))
80007ef6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007efa:	10 9c       	mov	r12,r8
80007efc:	f0 1f 00 17 	mcall	80007f58 <sd_mmc_mci_test_unit_ready+0xc8>
80007f00:	18 98       	mov	r8,r12
80007f02:	ec 18 00 01 	eorl	r8,0x1
80007f06:	5c 58       	castu.b	r8
80007f08:	c0 f0       	breq	80007f26 <sd_mmc_mci_test_unit_ready+0x96>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVING;
80007f0a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007f0e:	49 1a       	lddpc	r10,80007f50 <sd_mmc_mci_test_unit_ready+0xc0>
80007f10:	30 28       	mov	r8,2
80007f12:	f4 09 0b 08 	st.b	r10[r9],r8
        sd_mmc_mci_init_done[slot] = false;
80007f16:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007f1a:	48 fa       	lddpc	r10,80007f54 <sd_mmc_mci_test_unit_ready+0xc4>
80007f1c:	30 08       	mov	r8,0
80007f1e:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
80007f22:	30 38       	mov	r8,3
80007f24:	c1 28       	rjmp	80007f48 <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_GOOD;
80007f26:	30 08       	mov	r8,0
80007f28:	c1 08       	rjmp	80007f48 <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_REMOVING:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
80007f2a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007f2e:	48 9a       	lddpc	r10,80007f50 <sd_mmc_mci_test_unit_ready+0xc0>
80007f30:	30 08       	mov	r8,0
80007f32:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
80007f36:	30 28       	mov	r8,2
80007f38:	c0 88       	rjmp	80007f48 <sd_mmc_mci_test_unit_ready+0xb8>

    default:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
80007f3a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007f3e:	48 5a       	lddpc	r10,80007f50 <sd_mmc_mci_test_unit_ready+0xc0>
80007f40:	30 08       	mov	r8,0
80007f42:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_BUSY;
80007f46:	30 38       	mov	r8,3
  }
}
80007f48:	10 9c       	mov	r12,r8
80007f4a:	2f fd       	sub	sp,-4
80007f4c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f50:	00 00       	add	r0,r0
80007f52:	01 38       	ld.ub	r8,r0++
80007f54:	00 00       	add	r0,r0
80007f56:	06 18       	sub	r8,r3
80007f58:	80 00       	ld.sh	r0,r0[0x0]
80007f5a:	73 30       	ld.w	r0,r9[0x4c]

80007f5c <sd_mmc_mci_test_unit_ready_0>:


Ctrl_status sd_mmc_mci_test_unit_ready_0(void)
{
80007f5c:	eb cd 40 80 	pushm	r7,lr
80007f60:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(0);
80007f62:	30 0c       	mov	r12,0
80007f64:	f0 1f 00 03 	mcall	80007f70 <sd_mmc_mci_test_unit_ready_0+0x14>
80007f68:	18 98       	mov	r8,r12
}
80007f6a:	10 9c       	mov	r12,r8
80007f6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f70:	80 00       	ld.sh	r0,r0[0x0]
80007f72:	7e 90       	ld.w	r0,pc[0x24]

80007f74 <sd_mmc_mci_test_unit_ready_1>:


Ctrl_status sd_mmc_mci_test_unit_ready_1(void)
{
80007f74:	eb cd 40 80 	pushm	r7,lr
80007f78:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(1);
80007f7a:	30 1c       	mov	r12,1
80007f7c:	f0 1f 00 03 	mcall	80007f88 <sd_mmc_mci_test_unit_ready_1+0x14>
80007f80:	18 98       	mov	r8,r12
}
80007f82:	10 9c       	mov	r12,r8
80007f84:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f88:	80 00       	ld.sh	r0,r0[0x0]
80007f8a:	7e 90       	ld.w	r0,pc[0x24]

80007f8c <sd_mmc_mci_read_capacity>:


Ctrl_status sd_mmc_mci_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
80007f8c:	eb cd 40 80 	pushm	r7,lr
80007f90:	1a 97       	mov	r7,sp
80007f92:	20 2d       	sub	sp,8
80007f94:	18 98       	mov	r8,r12
80007f96:	ef 4b ff f8 	st.w	r7[-8],r11
80007f9a:	ef 68 ff fc 	st.b	r7[-4],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80007f9e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007fa2:	10 9c       	mov	r12,r8
80007fa4:	f0 1f 00 0c 	mcall	80007fd4 <sd_mmc_mci_read_capacity+0x48>
80007fa8:	18 98       	mov	r8,r12
80007faa:	ec 18 00 01 	eorl	r8,0x1
80007fae:	5c 58       	castu.b	r8
80007fb0:	c0 30       	breq	80007fb6 <sd_mmc_mci_read_capacity+0x2a>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80007fb2:	30 28       	mov	r8,2
80007fb4:	c0 c8       	rjmp	80007fcc <sd_mmc_mci_read_capacity+0x40>
   }
   *nb_sector = g_card_size[slot]-1;
80007fb6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007fba:	48 88       	lddpc	r8,80007fd8 <sd_mmc_mci_read_capacity+0x4c>
80007fbc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007fc0:	f0 c9 00 01 	sub	r9,r8,1
80007fc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fc8:	91 09       	st.w	r8[0x0],r9
   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80007fca:	30 08       	mov	r8,0
}
80007fcc:	10 9c       	mov	r12,r8
80007fce:	2f ed       	sub	sp,-8
80007fd0:	e3 cd 80 80 	ldm	sp++,r7,pc
80007fd4:	80 00       	ld.sh	r0,r0[0x0]
80007fd6:	73 30       	ld.w	r0,r9[0x4c]
80007fd8:	00 00       	add	r0,r0
80007fda:	0b f8       	ld.ub	r8,r5[0x7]

80007fdc <sd_mmc_mci_read_capacity_0>:


Ctrl_status sd_mmc_mci_read_capacity_0(uint32_t *nb_sector)
{
80007fdc:	eb cd 40 80 	pushm	r7,lr
80007fe0:	1a 97       	mov	r7,sp
80007fe2:	20 1d       	sub	sp,4
80007fe4:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(0, nb_sector);
80007fe8:	ee fb ff fc 	ld.w	r11,r7[-4]
80007fec:	30 0c       	mov	r12,0
80007fee:	f0 1f 00 04 	mcall	80007ffc <sd_mmc_mci_read_capacity_0+0x20>
80007ff2:	18 98       	mov	r8,r12
}
80007ff4:	10 9c       	mov	r12,r8
80007ff6:	2f fd       	sub	sp,-4
80007ff8:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ffc:	80 00       	ld.sh	r0,r0[0x0]
80007ffe:	7f 8c       	ld.w	r12,pc[0x60]

80008000 <sd_mmc_mci_read_capacity_1>:


Ctrl_status sd_mmc_mci_read_capacity_1(uint32_t *nb_sector)
{
80008000:	eb cd 40 80 	pushm	r7,lr
80008004:	1a 97       	mov	r7,sp
80008006:	20 1d       	sub	sp,4
80008008:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(1, nb_sector);
8000800c:	ee fb ff fc 	ld.w	r11,r7[-4]
80008010:	30 1c       	mov	r12,1
80008012:	f0 1f 00 04 	mcall	80008020 <sd_mmc_mci_read_capacity_1+0x20>
80008016:	18 98       	mov	r8,r12
}
80008018:	10 9c       	mov	r12,r8
8000801a:	2f fd       	sub	sp,-4
8000801c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008020:	80 00       	ld.sh	r0,r0[0x0]
80008022:	7f 8c       	ld.w	r12,pc[0x60]

80008024 <sd_mmc_mci_wr_protect>:


bool sd_mmc_mci_wr_protect(uint8_t slot)
{
80008024:	eb cd 40 80 	pushm	r7,lr
80008028:	1a 97       	mov	r7,sp
8000802a:	20 1d       	sub	sp,4
8000802c:	18 98       	mov	r8,r12
8000802e:	ef 68 ff fc 	st.b	r7[-4],r8
  return is_sd_mmc_mci_card_protected(slot);
80008032:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008036:	10 9c       	mov	r12,r8
80008038:	f0 1f 00 04 	mcall	80008048 <sd_mmc_mci_wr_protect+0x24>
8000803c:	18 98       	mov	r8,r12
}
8000803e:	10 9c       	mov	r12,r8
80008040:	2f fd       	sub	sp,-4
80008042:	e3 cd 80 80 	ldm	sp++,r7,pc
80008046:	00 00       	add	r0,r0
80008048:	80 00       	ld.sh	r0,r0[0x0]
8000804a:	62 d4       	ld.w	r4,r1[0x34]

8000804c <sd_mmc_mci_wr_protect_0>:


bool sd_mmc_mci_wr_protect_0(void)
{
8000804c:	eb cd 40 80 	pushm	r7,lr
80008050:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(0);
80008052:	30 0c       	mov	r12,0
80008054:	f0 1f 00 03 	mcall	80008060 <sd_mmc_mci_wr_protect_0+0x14>
80008058:	18 98       	mov	r8,r12
}
8000805a:	10 9c       	mov	r12,r8
8000805c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008060:	80 00       	ld.sh	r0,r0[0x0]
80008062:	80 24       	ld.sh	r4,r0[0x4]

80008064 <sd_mmc_mci_wr_protect_1>:


bool sd_mmc_mci_wr_protect_1(void)
{
80008064:	eb cd 40 80 	pushm	r7,lr
80008068:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(1);
8000806a:	30 1c       	mov	r12,1
8000806c:	f0 1f 00 03 	mcall	80008078 <sd_mmc_mci_wr_protect_1+0x14>
80008070:	18 98       	mov	r8,r12
}
80008072:	10 9c       	mov	r12,r8
80008074:	e3 cd 80 80 	ldm	sp++,r7,pc
80008078:	80 00       	ld.sh	r0,r0[0x0]
8000807a:	80 24       	ld.sh	r4,r0[0x4]

8000807c <sd_mmc_mci_removal>:


bool sd_mmc_mci_removal(uint8_t slot)
{
8000807c:	eb cd 40 80 	pushm	r7,lr
80008080:	1a 97       	mov	r7,sp
80008082:	20 1d       	sub	sp,4
80008084:	18 98       	mov	r8,r12
80008086:	ef 68 ff fc 	st.b	r7[-4],r8
  return false;
8000808a:	30 08       	mov	r8,0
}
8000808c:	10 9c       	mov	r12,r8
8000808e:	2f fd       	sub	sp,-4
80008090:	e3 cd 80 80 	ldm	sp++,r7,pc

80008094 <sd_mmc_mci_removal_0>:


bool sd_mmc_mci_removal_0(void)
{
80008094:	eb cd 40 80 	pushm	r7,lr
80008098:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(0);
8000809a:	30 0c       	mov	r12,0
8000809c:	f0 1f 00 03 	mcall	800080a8 <sd_mmc_mci_removal_0+0x14>
800080a0:	18 98       	mov	r8,r12
}
800080a2:	10 9c       	mov	r12,r8
800080a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800080a8:	80 00       	ld.sh	r0,r0[0x0]
800080aa:	80 7c       	ld.sh	r12,r0[0xe]

800080ac <sd_mmc_mci_removal_1>:


bool sd_mmc_mci_removal_1(void)
{
800080ac:	eb cd 40 80 	pushm	r7,lr
800080b0:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(1);
800080b2:	30 1c       	mov	r12,1
800080b4:	f0 1f 00 03 	mcall	800080c0 <sd_mmc_mci_removal_1+0x14>
800080b8:	18 98       	mov	r8,r12
}
800080ba:	10 9c       	mov	r12,r8
800080bc:	e3 cd 80 80 	ldm	sp++,r7,pc
800080c0:	80 00       	ld.sh	r0,r0[0x0]
800080c2:	80 7c       	ld.sh	r12,r0[0xe]

800080c4 <sd_mmc_mci_usb_read_10>:
 */
//! @{


Ctrl_status sd_mmc_mci_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
800080c4:	eb cd 40 80 	pushm	r7,lr
800080c8:	1a 97       	mov	r7,sp
800080ca:	20 3d       	sub	sp,12
800080cc:	18 99       	mov	r9,r12
800080ce:	ef 4b ff f8 	st.w	r7[-8],r11
800080d2:	14 98       	mov	r8,r10
800080d4:	ef 69 ff fc 	st.b	r7[-4],r9
800080d8:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
800080dc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800080e0:	10 9c       	mov	r12,r8
800080e2:	f0 1f 00 1f 	mcall	8000815c <sd_mmc_mci_usb_read_10+0x98>
800080e6:	18 98       	mov	r8,r12
800080e8:	ec 18 00 01 	eorl	r8,0x1
800080ec:	5c 58       	castu.b	r8
800080ee:	c0 30       	breq	800080f4 <sd_mmc_mci_usb_read_10+0x30>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
800080f0:	30 28       	mov	r8,2
800080f2:	c3 08       	rjmp	80008152 <sd_mmc_mci_usb_read_10+0x8e>
   }

   if( !sd_mmc_mci_dma_read_open(slot, addr, NULL, nb_sector) )
800080f4:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800080f8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800080fc:	30 0a       	mov	r10,0
800080fe:	ee fb ff f8 	ld.w	r11,r7[-8]
80008102:	10 9c       	mov	r12,r8
80008104:	f0 1f 00 17 	mcall	80008160 <sd_mmc_mci_usb_read_10+0x9c>
80008108:	18 98       	mov	r8,r12
8000810a:	ec 18 00 01 	eorl	r8,0x1
8000810e:	5c 58       	castu.b	r8
80008110:	c0 30       	breq	80008116 <sd_mmc_mci_usb_read_10+0x52>
     return CTRL_FAIL;
80008112:	30 18       	mov	r8,1
80008114:	c1 f8       	rjmp	80008152 <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_multiple_sector(slot, nb_sector, addr) )
80008116:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8000811a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000811e:	ee fa ff f8 	ld.w	r10,r7[-8]
80008122:	12 9b       	mov	r11,r9
80008124:	10 9c       	mov	r12,r8
80008126:	f0 1f 00 10 	mcall	80008164 <sd_mmc_mci_usb_read_10+0xa0>
8000812a:	18 98       	mov	r8,r12
8000812c:	ec 18 00 01 	eorl	r8,0x1
80008130:	5c 58       	castu.b	r8
80008132:	c0 30       	breq	80008138 <sd_mmc_mci_usb_read_10+0x74>
     return CTRL_FAIL;
80008134:	30 18       	mov	r8,1
80008136:	c0 e8       	rjmp	80008152 <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_close(slot) )
80008138:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000813c:	10 9c       	mov	r12,r8
8000813e:	f0 1f 00 0b 	mcall	80008168 <sd_mmc_mci_usb_read_10+0xa4>
80008142:	18 98       	mov	r8,r12
80008144:	ec 18 00 01 	eorl	r8,0x1
80008148:	5c 58       	castu.b	r8
8000814a:	c0 30       	breq	80008150 <sd_mmc_mci_usb_read_10+0x8c>
     return CTRL_FAIL;
8000814c:	30 18       	mov	r8,1
8000814e:	c0 28       	rjmp	80008152 <sd_mmc_mci_usb_read_10+0x8e>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80008150:	30 08       	mov	r8,0
}
80008152:	10 9c       	mov	r12,r8
80008154:	2f dd       	sub	sp,-12
80008156:	e3 cd 80 80 	ldm	sp++,r7,pc
8000815a:	00 00       	add	r0,r0
8000815c:	80 00       	ld.sh	r0,r0[0x0]
8000815e:	73 30       	ld.w	r0,r9[0x4c]
80008160:	80 00       	ld.sh	r0,r0[0x0]
80008162:	74 10       	ld.w	r0,r10[0x4]
80008164:	80 00       	ld.sh	r0,r0[0x0]
80008166:	7a 04       	ld.w	r4,sp[0x0]
80008168:	80 00       	ld.sh	r0,r0[0x0]
8000816a:	75 a4       	ld.w	r4,r10[0x68]

8000816c <sd_mmc_mci_usb_read_10_0>:


Ctrl_status sd_mmc_mci_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
8000816c:	eb cd 40 80 	pushm	r7,lr
80008170:	1a 97       	mov	r7,sp
80008172:	20 2d       	sub	sp,8
80008174:	ef 4c ff fc 	st.w	r7[-4],r12
80008178:	16 98       	mov	r8,r11
8000817a:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(0, addr, nb_sector);
8000817e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80008182:	10 9a       	mov	r10,r8
80008184:	ee fb ff fc 	ld.w	r11,r7[-4]
80008188:	30 0c       	mov	r12,0
8000818a:	f0 1f 00 04 	mcall	80008198 <sd_mmc_mci_usb_read_10_0+0x2c>
8000818e:	18 98       	mov	r8,r12
}
80008190:	10 9c       	mov	r12,r8
80008192:	2f ed       	sub	sp,-8
80008194:	e3 cd 80 80 	ldm	sp++,r7,pc
80008198:	80 00       	ld.sh	r0,r0[0x0]
8000819a:	80 c4       	ld.uh	r4,r0[0x8]

8000819c <sd_mmc_mci_usb_read_10_1>:


Ctrl_status sd_mmc_mci_usb_read_10_1(uint32_t addr, uint16_t nb_sector)
{
8000819c:	eb cd 40 80 	pushm	r7,lr
800081a0:	1a 97       	mov	r7,sp
800081a2:	20 2d       	sub	sp,8
800081a4:	ef 4c ff fc 	st.w	r7[-4],r12
800081a8:	16 98       	mov	r8,r11
800081aa:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(1, addr, nb_sector);
800081ae:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800081b2:	10 9a       	mov	r10,r8
800081b4:	ee fb ff fc 	ld.w	r11,r7[-4]
800081b8:	30 1c       	mov	r12,1
800081ba:	f0 1f 00 04 	mcall	800081c8 <sd_mmc_mci_usb_read_10_1+0x2c>
800081be:	18 98       	mov	r8,r12
}
800081c0:	10 9c       	mov	r12,r8
800081c2:	2f ed       	sub	sp,-8
800081c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800081c8:	80 00       	ld.sh	r0,r0[0x0]
800081ca:	80 c4       	ld.uh	r4,r0[0x8]

800081cc <sd_mmc_mci_usb_write_10>:
#endif
}


Ctrl_status sd_mmc_mci_usb_write_10(uint8_t slot,uint32_t addr, uint16_t nb_sector)
{
800081cc:	eb cd 40 80 	pushm	r7,lr
800081d0:	1a 97       	mov	r7,sp
800081d2:	20 3d       	sub	sp,12
800081d4:	18 99       	mov	r9,r12
800081d6:	ef 4b ff f8 	st.w	r7[-8],r11
800081da:	14 98       	mov	r8,r10
800081dc:	ef 69 ff fc 	st.b	r7[-4],r9
800081e0:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
800081e4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800081e8:	10 9c       	mov	r12,r8
800081ea:	f0 1f 00 1f 	mcall	80008264 <sd_mmc_mci_usb_write_10+0x98>
800081ee:	18 98       	mov	r8,r12
800081f0:	ec 18 00 01 	eorl	r8,0x1
800081f4:	5c 58       	castu.b	r8
800081f6:	c0 30       	breq	800081fc <sd_mmc_mci_usb_write_10+0x30>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
800081f8:	30 28       	mov	r8,2
800081fa:	c3 08       	rjmp	8000825a <sd_mmc_mci_usb_write_10+0x8e>
   }

   if( !sd_mmc_mci_dma_write_open(slot, addr, NULL, nb_sector) )
800081fc:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80008200:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008204:	30 0a       	mov	r10,0
80008206:	ee fb ff f8 	ld.w	r11,r7[-8]
8000820a:	10 9c       	mov	r12,r8
8000820c:	f0 1f 00 17 	mcall	80008268 <sd_mmc_mci_usb_write_10+0x9c>
80008210:	18 98       	mov	r8,r12
80008212:	ec 18 00 01 	eorl	r8,0x1
80008216:	5c 58       	castu.b	r8
80008218:	c0 30       	breq	8000821e <sd_mmc_mci_usb_write_10+0x52>
     return CTRL_FAIL;
8000821a:	30 18       	mov	r8,1
8000821c:	c1 f8       	rjmp	8000825a <sd_mmc_mci_usb_write_10+0x8e>

   if( !sd_mmc_mci_write_multiple_sector(slot, nb_sector, addr) )
8000821e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80008222:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008226:	ee fa ff f8 	ld.w	r10,r7[-8]
8000822a:	12 9b       	mov	r11,r9
8000822c:	10 9c       	mov	r12,r8
8000822e:	f0 1f 00 10 	mcall	8000826c <sd_mmc_mci_usb_write_10+0xa0>
80008232:	18 98       	mov	r8,r12
80008234:	ec 18 00 01 	eorl	r8,0x1
80008238:	5c 58       	castu.b	r8
8000823a:	c0 30       	breq	80008240 <sd_mmc_mci_usb_write_10+0x74>
     return CTRL_FAIL;
8000823c:	30 18       	mov	r8,1
8000823e:	c0 e8       	rjmp	8000825a <sd_mmc_mci_usb_write_10+0x8e>

   if( !sd_mmc_mci_write_close(slot) )
80008240:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008244:	10 9c       	mov	r12,r8
80008246:	f0 1f 00 0b 	mcall	80008270 <sd_mmc_mci_usb_write_10+0xa4>
8000824a:	18 98       	mov	r8,r12
8000824c:	ec 18 00 01 	eorl	r8,0x1
80008250:	5c 58       	castu.b	r8
80008252:	c0 30       	breq	80008258 <sd_mmc_mci_usb_write_10+0x8c>
     return CTRL_FAIL;
80008254:	30 18       	mov	r8,1
80008256:	c0 28       	rjmp	8000825a <sd_mmc_mci_usb_write_10+0x8e>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80008258:	30 08       	mov	r8,0

}
8000825a:	10 9c       	mov	r12,r8
8000825c:	2f dd       	sub	sp,-12
8000825e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008262:	00 00       	add	r0,r0
80008264:	80 00       	ld.sh	r0,r0[0x0]
80008266:	73 30       	ld.w	r0,r9[0x4c]
80008268:	80 00       	ld.sh	r0,r0[0x0]
8000826a:	76 40       	ld.w	r0,r11[0x10]
8000826c:	80 00       	ld.sh	r0,r0[0x0]
8000826e:	7c 0c       	ld.w	r12,lr[0x0]
80008270:	80 00       	ld.sh	r0,r0[0x0]
80008272:	77 ac       	ld.w	r12,r11[0x68]

80008274 <sd_mmc_mci_usb_write_10_0>:


Ctrl_status sd_mmc_mci_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
80008274:	eb cd 40 80 	pushm	r7,lr
80008278:	1a 97       	mov	r7,sp
8000827a:	20 2d       	sub	sp,8
8000827c:	ef 4c ff fc 	st.w	r7[-4],r12
80008280:	16 98       	mov	r8,r11
80008282:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_write_10(0, addr, nb_sector);
80008286:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000828a:	10 9a       	mov	r10,r8
8000828c:	ee fb ff fc 	ld.w	r11,r7[-4]
80008290:	30 0c       	mov	r12,0
80008292:	f0 1f 00 04 	mcall	800082a0 <sd_mmc_mci_usb_write_10_0+0x2c>
80008296:	18 98       	mov	r8,r12
}
80008298:	10 9c       	mov	r12,r8
8000829a:	2f ed       	sub	sp,-8
8000829c:	e3 cd 80 80 	ldm	sp++,r7,pc
800082a0:	80 00       	ld.sh	r0,r0[0x0]
800082a2:	81 cc       	st.w	r0[0x30],r12

800082a4 <sd_mmc_mci_usb_write_10_1>:


Ctrl_status sd_mmc_mci_usb_write_10_1(uint32_t addr, uint16_t nb_sector)
{
800082a4:	eb cd 40 80 	pushm	r7,lr
800082a8:	1a 97       	mov	r7,sp
800082aa:	20 2d       	sub	sp,8
800082ac:	ef 4c ff fc 	st.w	r7[-4],r12
800082b0:	16 98       	mov	r8,r11
800082b2:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_write_10(1, addr, nb_sector);
800082b6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800082ba:	10 9a       	mov	r10,r8
800082bc:	ee fb ff fc 	ld.w	r11,r7[-4]
800082c0:	30 1c       	mov	r12,1
800082c2:	f0 1f 00 04 	mcall	800082d0 <sd_mmc_mci_usb_write_10_1+0x2c>
800082c6:	18 98       	mov	r8,r12
}
800082c8:	10 9c       	mov	r12,r8
800082ca:	2f ed       	sub	sp,-8
800082cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800082d0:	80 00       	ld.sh	r0,r0[0x0]
800082d2:	81 cc       	st.w	r0[0x30],r12

800082d4 <aes_configure>:




void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
800082d4:	eb cd 40 80 	pushm	r7,lr
800082d8:	1a 97       	mov	r7,sp
800082da:	20 2d       	sub	sp,8
800082dc:	ef 4c ff fc 	st.w	r7[-4],r12
800082e0:	ef 4b ff f8 	st.w	r7[-8],r11
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
800082e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082e8:	11 88       	ld.ub	r8,r8[0x0]
800082ea:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
            ((pAesConfig->ProcessingDelay << AVR32_AES_MR_PROCDLY_OFFSET) & AVR32_AES_MR_PROCDLY_MASK) |
800082ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082f2:	11 98       	ld.ub	r8,r8[0x1]
800082f4:	a5 68       	lsl	r8,0x4
800082f6:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800082fa:	10 49       	or	r9,r8
            ((pAesConfig->StartMode << AVR32_AES_MR_SMOD_OFFSET) & AVR32_AES_MR_SMOD_MASK) |
800082fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008300:	11 a8       	ld.ub	r8,r8[0x2]
80008302:	a9 68       	lsl	r8,0x8
80008304:	e2 18 03 00 	andl	r8,0x300,COH
80008308:	10 49       	or	r9,r8
            ((pAesConfig->KeySize << AVR32_AES_MR_KEYSIZE_OFFSET) & AVR32_AES_MR_KEYSIZE_MASK) |
8000830a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000830e:	11 b8       	ld.ub	r8,r8[0x3]
80008310:	ab 68       	lsl	r8,0xa
80008312:	e2 18 0c 00 	andl	r8,0xc00,COH
80008316:	10 49       	or	r9,r8
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
80008318:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000831c:	11 c8       	ld.ub	r8,r8[0x4]
8000831e:	ad 68       	lsl	r8,0xc
80008320:	e2 18 70 00 	andl	r8,0x7000,COH
80008324:	10 49       	or	r9,r8
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
80008326:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000832a:	11 d8       	ld.ub	r8,r8[0x5]
8000832c:	af 78       	lsl	r8,0xf
8000832e:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008332:	10 49       	or	r9,r8
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
80008334:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008338:	11 e8       	ld.ub	r8,r8[0x6]
8000833a:	b1 68       	lsl	r8,0x10
8000833c:	e6 18 00 07 	andh	r8,0x7,COH
80008340:	10 49       	or	r9,r8
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
80008342:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008346:	11 f8       	ld.ub	r8,r8[0x7]
80008348:	b9 68       	lsl	r8,0x18
8000834a:	e6 18 1f 00 	andh	r8,0x1f00,COH
8000834e:	f3 e8 10 08 	or	r8,r9,r8



void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
80008352:	ea 18 00 e0 	orh	r8,0xe0
80008356:	10 99       	mov	r9,r8
80008358:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000835c:	91 19       	st.w	r8[0x4],r9
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
            ((AES_CKEY << AVR32_AES_MR_CKEY_OFFSET) & AVR32_AES_MR_CKEY_MASK);
}
8000835e:	2f ed       	sub	sp,-8
80008360:	e3 cd 80 80 	ldm	sp++,r7,pc

80008364 <aes_set_key>:
  return(aes->isr);
}


void aes_set_key( volatile avr32_aes_t *aes, const unsigned long int *pKey)
{
80008364:	eb cd 40 80 	pushm	r7,lr
80008368:	1a 97       	mov	r7,sp
8000836a:	20 4d       	sub	sp,16
8000836c:	ef 4c ff f4 	st.w	r7[-12],r12
80008370:	ef 4b ff f0 	st.w	r7[-16],r11
  unsigned long int volatile *pTempo = &(aes->keyw1r);
80008374:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008378:	2e 08       	sub	r8,-32
8000837a:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char       keylen = 0;
8000837e:	30 08       	mov	r8,0
80008380:	ef 68 ff ff 	st.b	r7[-1],r8


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
80008384:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008388:	70 18       	ld.w	r8,r8[0x4]
8000838a:	e2 18 0c 00 	andl	r8,0xc00,COH
8000838e:	ab 88       	lsr	r8,0xa
80008390:	58 18       	cp.w	r8,1
80008392:	c0 90       	breq	800083a4 <aes_set_key+0x40>
80008394:	c0 43       	brcs	8000839c <aes_set_key+0x38>
80008396:	58 28       	cp.w	r8,2
80008398:	c0 a0       	breq	800083ac <aes_set_key+0x48>
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
8000839a:	c2 38       	rjmp	800083e0 <aes_set_key+0x7c>


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
  {
    case 0: // 128bit cryptographic key
      keylen = 4;
8000839c:	30 48       	mov	r8,4
8000839e:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
800083a2:	c0 98       	rjmp	800083b4 <aes_set_key+0x50>
    case 1: // 192bit cryptographic key
      keylen = 6;
800083a4:	30 68       	mov	r8,6
800083a6:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
800083aa:	c0 58       	rjmp	800083b4 <aes_set_key+0x50>
    case 2: // 256bit cryptographic key
      keylen = 8;
800083ac:	30 88       	mov	r8,8
800083ae:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
800083b2:	c1 78       	rjmp	800083e0 <aes_set_key+0x7c>
800083b4:	c1 68       	rjmp	800083e0 <aes_set_key+0x7c>
    *pTempo++ = *pKey++;
800083b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800083ba:	70 09       	ld.w	r9,r8[0x0]
800083bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800083c0:	91 09       	st.w	r8[0x0],r9
800083c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800083c6:	2f c8       	sub	r8,-4
800083c8:	ef 48 ff f8 	st.w	r7[-8],r8
800083cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800083d0:	2f c8       	sub	r8,-4
800083d2:	ef 48 ff f0 	st.w	r7[-16],r8
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
800083d6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800083da:	20 18       	sub	r8,1
800083dc:	ef 68 ff ff 	st.b	r7[-1],r8
800083e0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800083e4:	30 08       	mov	r8,0
800083e6:	f0 09 18 00 	cp.b	r9,r8
800083ea:	ce 61       	brne	800083b6 <aes_set_key+0x52>
    *pTempo++ = *pKey++;
}
800083ec:	2f cd       	sub	sp,-16
800083ee:	e3 cd 80 80 	ldm	sp++,r7,pc

800083f2 <aes_set_initvector>:


void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
800083f2:	eb cd 40 80 	pushm	r7,lr
800083f6:	1a 97       	mov	r7,sp
800083f8:	20 4d       	sub	sp,16
800083fa:	ef 4c ff f4 	st.w	r7[-12],r12
800083fe:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->iv1r);
80008402:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008406:	2a 08       	sub	r8,-96
80008408:	ef 48 ff f8 	st.w	r7[-8],r8
  int i;

  for(i=0; i<4; i++)
8000840c:	30 08       	mov	r8,0
8000840e:	ef 48 ff fc 	st.w	r7[-4],r8
80008412:	c1 68       	rjmp	8000843e <aes_set_initvector+0x4c>
    *pTempo++ = *pVector++;
80008414:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008418:	70 09       	ld.w	r9,r8[0x0]
8000841a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000841e:	91 09       	st.w	r8[0x0],r9
80008420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008424:	2f c8       	sub	r8,-4
80008426:	ef 48 ff f8 	st.w	r7[-8],r8
8000842a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000842e:	2f c8       	sub	r8,-4
80008430:	ef 48 ff f0 	st.w	r7[-16],r8
void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
  volatile uint32_t *pTempo = &(aes->iv1r);
  int i;

  for(i=0; i<4; i++)
80008434:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008438:	2f f8       	sub	r8,-1
8000843a:	ef 48 ff fc 	st.w	r7[-4],r8
8000843e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008442:	58 38       	cp.w	r8,3
80008444:	fe 9a ff e8 	brle	80008414 <aes_set_initvector+0x22>
    *pTempo++ = *pVector++;
}
80008448:	2f cd       	sub	sp,-16
8000844a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000844e <aes_write_inputdata>:


void aes_write_inputdata( volatile avr32_aes_t *aes, uint32_t *pIn)
{
8000844e:	eb cd 40 80 	pushm	r7,lr
80008452:	1a 97       	mov	r7,sp
80008454:	20 4d       	sub	sp,16
80008456:	ef 4c ff f4 	st.w	r7[-12],r12
8000845a:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->idata1r);
8000845e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008462:	2c 08       	sub	r8,-64
80008464:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char inlen = 4;
80008468:	30 48       	mov	r8,4
8000846a:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
8000846e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008472:	70 18       	ld.w	r8,r8[0x4]
80008474:	e2 18 70 00 	andl	r8,0x7000,COH
80008478:	ad 88       	lsr	r8,0xc
8000847a:	58 38       	cp.w	r8,3
8000847c:	c2 c1       	brne	800084d4 <aes_write_inputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
8000847e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008482:	70 18       	ld.w	r8,r8[0x4]
80008484:	e6 18 00 07 	andh	r8,0x7,COH
80008488:	b1 88       	lsr	r8,0x10
8000848a:	58 18       	cp.w	r8,1
8000848c:	c0 60       	breq	80008498 <aes_write_inputdata+0x4a>
8000848e:	c2 33       	brcs	800084d4 <aes_write_inputdata+0x86>
80008490:	58 48       	cp.w	r8,4
80008492:	e0 8b 00 21 	brhi	800084d4 <aes_write_inputdata+0x86>
80008496:	c0 68       	rjmp	800084a2 <aes_write_inputdata+0x54>
    {
      case 1: // 64bit CFB data size
        inlen = 2;
80008498:	30 28       	mov	r8,2
8000849a:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
8000849e:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
800084a0:	c1 a8       	rjmp	800084d4 <aes_write_inputdata+0x86>
        inlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        inlen = 1;
800084a2:	30 18       	mov	r8,1
800084a4:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
800084a8:	c1 68       	rjmp	800084d4 <aes_write_inputdata+0x86>
    *pTempo++ = *pIn++;
800084aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800084ae:	70 09       	ld.w	r9,r8[0x0]
800084b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800084b4:	91 09       	st.w	r8[0x0],r9
800084b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800084ba:	2f c8       	sub	r8,-4
800084bc:	ef 48 ff f8 	st.w	r7[-8],r8
800084c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800084c4:	2f c8       	sub	r8,-4
800084c6:	ef 48 ff f0 	st.w	r7[-16],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
800084ca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800084ce:	20 18       	sub	r8,1
800084d0:	ef 68 ff ff 	st.b	r7[-1],r8
800084d4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800084d8:	30 08       	mov	r8,0
800084da:	f0 09 18 00 	cp.b	r9,r8
800084de:	ce 61       	brne	800084aa <aes_write_inputdata+0x5c>
    *pTempo++ = *pIn++;
}
800084e0:	2f cd       	sub	sp,-16
800084e2:	e3 cd 80 80 	ldm	sp++,r7,pc

800084e6 <aes_read_outputdata>:


void aes_read_outputdata( volatile avr32_aes_t *aes, uint32_t *pOut)
{
800084e6:	eb cd 40 80 	pushm	r7,lr
800084ea:	1a 97       	mov	r7,sp
800084ec:	20 4d       	sub	sp,16
800084ee:	ef 4c ff f4 	st.w	r7[-12],r12
800084f2:	ef 4b ff f0 	st.w	r7[-16],r11
  const volatile uint32_t *pTempo = &(aes->odata1r);
800084f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084fa:	2b 08       	sub	r8,-80
800084fc:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char outlen = 4;
80008500:	30 48       	mov	r8,4
80008502:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
80008506:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000850a:	70 18       	ld.w	r8,r8[0x4]
8000850c:	e2 18 70 00 	andl	r8,0x7000,COH
80008510:	ad 88       	lsr	r8,0xc
80008512:	58 38       	cp.w	r8,3
80008514:	c2 c1       	brne	8000856c <aes_read_outputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
80008516:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000851a:	70 18       	ld.w	r8,r8[0x4]
8000851c:	e6 18 00 07 	andh	r8,0x7,COH
80008520:	b1 88       	lsr	r8,0x10
80008522:	58 18       	cp.w	r8,1
80008524:	c0 60       	breq	80008530 <aes_read_outputdata+0x4a>
80008526:	c2 33       	brcs	8000856c <aes_read_outputdata+0x86>
80008528:	58 48       	cp.w	r8,4
8000852a:	e0 8b 00 21 	brhi	8000856c <aes_read_outputdata+0x86>
8000852e:	c0 68       	rjmp	8000853a <aes_read_outputdata+0x54>
    {
      case 1: // 64bit CFB data size
        outlen = 2;
80008530:	30 28       	mov	r8,2
80008532:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
80008536:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80008538:	c1 a8       	rjmp	8000856c <aes_read_outputdata+0x86>
        outlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        outlen = 1;
8000853a:	30 18       	mov	r8,1
8000853c:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80008540:	c1 68       	rjmp	8000856c <aes_read_outputdata+0x86>
    *pOut++ = *pTempo++;
80008542:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008546:	70 09       	ld.w	r9,r8[0x0]
80008548:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000854c:	91 09       	st.w	r8[0x0],r9
8000854e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008552:	2f c8       	sub	r8,-4
80008554:	ef 48 ff f0 	st.w	r7[-16],r8
80008558:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000855c:	2f c8       	sub	r8,-4
8000855e:	ef 48 ff f8 	st.w	r7[-8],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80008562:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008566:	20 18       	sub	r8,1
80008568:	ef 68 ff ff 	st.b	r7[-1],r8
8000856c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008570:	30 08       	mov	r8,0
80008572:	f0 09 18 00 	cp.b	r9,r8
80008576:	ce 61       	brne	80008542 <aes_read_outputdata+0x5c>
    *pOut++ = *pTempo++;
}
80008578:	2f cd       	sub	sp,-16
8000857a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000857e:	d7 03       	nop

80008580 <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
80008580:	eb cd 40 80 	pushm	r7,lr
80008584:	1a 97       	mov	r7,sp
80008586:	20 cd       	sub	sp,48
80008588:	ef 4c ff d0 	st.w	r7[-48],r12
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
8000858c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80008590:	ee 7a 42 3f 	mov	r10,999999
80008594:	f0 0a 00 09 	add	r9,r8,r10
80008598:	e0 68 de 83 	mov	r8,56963
8000859c:	ea 18 43 1b 	orh	r8,0x431b
800085a0:	f2 08 06 48 	mulu.d	r8,r9,r8
800085a4:	f2 08 16 12 	lsr	r8,r9,0x12
800085a8:	ef 48 ff d4 	st.w	r7[-44],r8
//! Whether to use the NCS0 pin
#ifdef SMC_USE_NCS0
  #include SMC_COMPONENT_CS0

  // Setup SMC for NCS0
  SMC_CS_SETUP(0)
800085ac:	ee f9 ff d4 	ld.w	r9,r7[-44]
800085b0:	12 98       	mov	r8,r9
800085b2:	a3 68       	lsl	r8,0x2
800085b4:	12 08       	add	r8,r9
800085b6:	a3 68       	lsl	r8,0x2
800085b8:	f0 c9 fc 19 	sub	r9,r8,-999
800085bc:	e0 68 4d d3 	mov	r8,19923
800085c0:	ea 18 10 62 	orh	r8,0x1062
800085c4:	f2 08 06 48 	mulu.d	r8,r9,r8
800085c8:	f2 08 16 06 	lsr	r8,r9,0x6
800085cc:	ef 48 ff d8 	st.w	r7[-40],r8
800085d0:	30 08       	mov	r8,0
800085d2:	ef 48 ff dc 	st.w	r7[-36],r8
800085d6:	ee f9 ff d4 	ld.w	r9,r7[-44]
800085da:	12 98       	mov	r8,r9
800085dc:	a5 68       	lsl	r8,0x4
800085de:	12 18       	sub	r8,r9
800085e0:	a1 78       	lsl	r8,0x1
800085e2:	f0 c9 fc 19 	sub	r9,r8,-999
800085e6:	e0 68 4d d3 	mov	r8,19923
800085ea:	ea 18 10 62 	orh	r8,0x1062
800085ee:	f2 08 06 48 	mulu.d	r8,r9,r8
800085f2:	f2 08 16 06 	lsr	r8,r9,0x6
800085f6:	ef 48 ff e0 	st.w	r7[-32],r8
800085fa:	30 08       	mov	r8,0
800085fc:	ef 48 ff e4 	st.w	r7[-28],r8
80008600:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008604:	12 98       	mov	r8,r9
80008606:	a5 68       	lsl	r8,0x4
80008608:	12 18       	sub	r8,r9
8000860a:	a3 68       	lsl	r8,0x2
8000860c:	f0 c9 fc 19 	sub	r9,r8,-999
80008610:	e0 68 4d d3 	mov	r8,19923
80008614:	ea 18 10 62 	orh	r8,0x1062
80008618:	f2 08 06 48 	mulu.d	r8,r9,r8
8000861c:	f2 08 16 06 	lsr	r8,r9,0x6
80008620:	ef 48 ff e8 	st.w	r7[-24],r8
80008624:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008628:	f0 08 10 5a 	mul	r8,r8,90
8000862c:	f0 c9 fc 19 	sub	r9,r8,-999
80008630:	e0 68 4d d3 	mov	r8,19923
80008634:	ea 18 10 62 	orh	r8,0x1062
80008638:	f2 08 06 48 	mulu.d	r8,r9,r8
8000863c:	f2 08 16 06 	lsr	r8,r9,0x6
80008640:	ef 48 ff ec 	st.w	r7[-20],r8
80008644:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008648:	e0 68 00 d2 	mov	r8,210
8000864c:	f2 08 02 48 	mul	r8,r9,r8
80008650:	f0 c9 fc 19 	sub	r9,r8,-999
80008654:	e0 68 4d d3 	mov	r8,19923
80008658:	ea 18 10 62 	orh	r8,0x1062
8000865c:	f2 08 06 48 	mulu.d	r8,r9,r8
80008660:	f2 08 16 06 	lsr	r8,r9,0x6
80008664:	ef 48 ff f0 	st.w	r7[-16],r8
80008668:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000866c:	12 98       	mov	r8,r9
8000866e:	a5 68       	lsl	r8,0x4
80008670:	12 18       	sub	r8,r9
80008672:	a5 68       	lsl	r8,0x4
80008674:	f0 c9 fc 19 	sub	r9,r8,-999
80008678:	e0 68 4d d3 	mov	r8,19923
8000867c:	ea 18 10 62 	orh	r8,0x1062
80008680:	f2 08 06 48 	mulu.d	r8,r9,r8
80008684:	f2 08 16 06 	lsr	r8,r9,0x6
80008688:	ef 48 ff f4 	st.w	r7[-12],r8
8000868c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008690:	f0 08 10 64 	mul	r8,r8,100
80008694:	f0 c9 fc 19 	sub	r9,r8,-999
80008698:	e0 68 4d d3 	mov	r8,19923
8000869c:	ea 18 10 62 	orh	r8,0x1062
800086a0:	f2 08 06 48 	mulu.d	r8,r9,r8
800086a4:	f2 08 16 06 	lsr	r8,r9,0x6
800086a8:	ef 48 ff f8 	st.w	r7[-8],r8
800086ac:	ee f9 ff d4 	ld.w	r9,r7[-44]
800086b0:	e0 68 01 0e 	mov	r8,270
800086b4:	f2 08 02 48 	mul	r8,r9,r8
800086b8:	f0 c9 fc 19 	sub	r9,r8,-999
800086bc:	e0 68 4d d3 	mov	r8,19923
800086c0:	ea 18 10 62 	orh	r8,0x1062
800086c4:	f2 08 06 48 	mulu.d	r8,r9,r8
800086c8:	f2 08 16 06 	lsr	r8,r9,0x6
800086cc:	ef 48 ff fc 	st.w	r7[-4],r8
800086d0:	ee f9 ff e4 	ld.w	r9,r7[-28]
800086d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800086d8:	10 09       	add	r9,r8
800086da:	ee fa ff e0 	ld.w	r10,r7[-32]
800086de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800086e2:	f4 08 00 08 	add	r8,r10,r8
800086e6:	10 39       	cp.w	r9,r8
800086e8:	c0 c2       	brcc	80008700 <smc_init+0x180>
800086ea:	ee f9 ff e0 	ld.w	r9,r7[-32]
800086ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800086f2:	10 09       	add	r9,r8
800086f4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800086f8:	f2 08 01 08 	sub	r8,r9,r8
800086fc:	ef 48 ff f4 	st.w	r7[-12],r8
80008700:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008704:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008708:	10 09       	add	r9,r8
8000870a:	ee fa ff d8 	ld.w	r10,r7[-40]
8000870e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008712:	f4 08 00 08 	add	r8,r10,r8
80008716:	10 39       	cp.w	r9,r8
80008718:	c0 c2       	brcc	80008730 <smc_init+0x1b0>
8000871a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000871e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008722:	10 09       	add	r9,r8
80008724:	ee f8 ff dc 	ld.w	r8,r7[-36]
80008728:	f2 08 01 08 	sub	r8,r9,r8
8000872c:	ef 48 ff ec 	st.w	r7[-20],r8
80008730:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008734:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008738:	10 09       	add	r9,r8
8000873a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000873e:	10 39       	cp.w	r9,r8
80008740:	e0 88 00 0a 	brls	80008754 <smc_init+0x1d4>
80008744:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008748:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000874c:	f2 08 00 08 	add	r8,r9,r8
80008750:	ef 48 ff f8 	st.w	r7[-8],r8
80008754:	ee f9 ff d8 	ld.w	r9,r7[-40]
80008758:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000875c:	10 09       	add	r9,r8
8000875e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008762:	10 39       	cp.w	r9,r8
80008764:	e0 88 00 0a 	brls	80008778 <smc_init+0x1f8>
80008768:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000876c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008770:	f2 08 00 08 	add	r8,r9,r8
80008774:	ef 48 ff f8 	st.w	r7[-8],r8
80008778:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000877c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008780:	10 09       	add	r9,r8
80008782:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008786:	10 39       	cp.w	r9,r8
80008788:	e0 88 00 0a 	brls	8000879c <smc_init+0x21c>
8000878c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008790:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008794:	f2 08 00 08 	add	r8,r9,r8
80008798:	ef 48 ff fc 	st.w	r7[-4],r8
8000879c:	ee f9 ff e0 	ld.w	r9,r7[-32]
800087a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800087a4:	10 09       	add	r9,r8
800087a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800087aa:	10 39       	cp.w	r9,r8
800087ac:	e0 88 00 0a 	brls	800087c0 <smc_init+0x240>
800087b0:	ee f9 ff e0 	ld.w	r9,r7[-32]
800087b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800087b8:	f2 08 00 08 	add	r8,r9,r8
800087bc:	ef 48 ff fc 	st.w	r7[-4],r8
800087c0:	fe 68 1c 00 	mov	r8,-123904
800087c4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800087c8:	f2 0a 15 08 	lsl	r10,r9,0x8
800087cc:	ee f9 ff d8 	ld.w	r9,r7[-40]
800087d0:	12 4a       	or	r10,r9
800087d2:	ee f9 ff e0 	ld.w	r9,r7[-32]
800087d6:	b1 69       	lsl	r9,0x10
800087d8:	12 4a       	or	r10,r9
800087da:	ee f9 ff e4 	ld.w	r9,r7[-28]
800087de:	b9 69       	lsl	r9,0x18
800087e0:	f5 e9 10 09 	or	r9,r10,r9
800087e4:	91 09       	st.w	r8[0x0],r9
800087e6:	fe 68 1c 00 	mov	r8,-123904
800087ea:	ee f9 ff ec 	ld.w	r9,r7[-20]
800087ee:	f2 0a 15 08 	lsl	r10,r9,0x8
800087f2:	ee f9 ff e8 	ld.w	r9,r7[-24]
800087f6:	12 4a       	or	r10,r9
800087f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800087fc:	b1 69       	lsl	r9,0x10
800087fe:	12 4a       	or	r10,r9
80008800:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008804:	b9 69       	lsl	r9,0x18
80008806:	f5 e9 10 09 	or	r9,r10,r9
8000880a:	91 19       	st.w	r8[0x4],r9
8000880c:	fe 68 1c 00 	mov	r8,-123904
80008810:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008814:	f2 0a 15 10 	lsl	r10,r9,0x10
80008818:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000881c:	f5 e9 10 09 	or	r9,r10,r9
80008820:	91 29       	st.w	r8[0x8],r9
80008822:	fe 68 1c 00 	mov	r8,-123904
80008826:	e0 69 10 03 	mov	r9,4099
8000882a:	91 39       	st.w	r8[0xc],r9
8000882c:	48 49       	lddpc	r9,8000883c <smc_init+0x2bc>
8000882e:	30 18       	mov	r8,1
80008830:	b2 88       	st.b	r9[0x0],r8
  #undef NCS_CONTROLLED_READ
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
80008832:	f0 1f 00 04 	mcall	80008840 <smc_init+0x2c0>
}
80008836:	2f 4d       	sub	sp,-48
80008838:	e3 cd 80 80 	ldm	sp++,r7,pc
8000883c:	00 00       	add	r0,r0
8000883e:	06 98       	mov	r8,r3
80008840:	80 00       	ld.sh	r0,r0[0x0]
80008842:	88 44       	ld.sh	r4,r4[0x8]

80008844 <smc_enable_muxed_pins>:

/*! \brief Puts the multiplexed MCU pins used for the SMC
 *
 */
static void smc_enable_muxed_pins(void)
{
80008844:	eb cd 40 80 	pushm	r7,lr
80008848:	1a 97       	mov	r7,sp
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
8000884a:	31 4b       	mov	r11,20
8000884c:	48 3c       	lddpc	r12,80008858 <smc_enable_muxed_pins+0x14>
8000884e:	f0 1f 00 04 	mcall	8000885c <smc_enable_muxed_pins+0x18>
}
80008852:	e3 cd 80 80 	ldm	sp++,r7,pc
80008856:	00 00       	add	r0,r0
80008858:	80 00       	ld.sh	r0,r0[0x0]
8000885a:	f4 d4 80 00 	satsub.w	r4,r10,-32768
8000885e:	8c c4       	ld.uh	r4,r6[0x8]

80008860 <flashc_set_wait_state>:
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
80008860:	eb cd 40 80 	pushm	r7,lr
80008864:	1a 97       	mov	r7,sp
80008866:	20 2d       	sub	sp,8
80008868:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000886c:	fe 68 14 00 	mov	r8,-125952
80008870:	70 08       	ld.w	r8,r8[0x0]
80008872:	30 09       	mov	r9,0
80008874:	ef 49 ff fc 	st.w	r7[-4],r9
80008878:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000887c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008880:	5c 58       	castu.b	r8
80008882:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008886:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000888a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000888e:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80008892:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80008896:	fe 68 14 00 	mov	r8,-125952
8000889a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000889e:	91 09       	st.w	r8[0x0],r9
}
800088a0:	2f ed       	sub	sp,-8
800088a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800088a6:	d7 03       	nop

800088a8 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
800088a8:	eb cd 40 80 	pushm	r7,lr
800088ac:	1a 97       	mov	r7,sp
800088ae:	20 1d       	sub	sp,4
800088b0:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
800088b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800088b8:	e0 69 50 ff 	mov	r9,20735
800088bc:	ea 19 02 25 	orh	r9,0x225
800088c0:	12 38       	cp.w	r8,r9
800088c2:	e0 88 00 06 	brls	800088ce <flashc_set_bus_freq+0x26>
		// Set 1 WS.
		flashc_set_wait_state(1);
800088c6:	30 1c       	mov	r12,1
800088c8:	f0 1f 00 05 	mcall	800088dc <flashc_set_bus_freq+0x34>
800088cc:	c0 48       	rjmp	800088d4 <flashc_set_bus_freq+0x2c>
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
800088ce:	30 0c       	mov	r12,0
800088d0:	f0 1f 00 03 	mcall	800088dc <flashc_set_bus_freq+0x34>
	}
}
800088d4:	2f fd       	sub	sp,-4
800088d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800088da:	00 00       	add	r0,r0
800088dc:	80 00       	ld.sh	r0,r0[0x0]
800088de:	88 60       	ld.sh	r0,r4[0xc]

800088e0 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
800088e0:	eb cd 40 80 	pushm	r7,lr
800088e4:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
800088e6:	fe 68 14 00 	mov	r8,-125952
800088ea:	70 28       	ld.w	r8,r8[0x8]
800088ec:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800088f0:	5c 58       	castu.b	r8
}
800088f2:	10 9c       	mov	r12,r8
800088f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800088f8 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
800088f8:	eb cd 40 80 	pushm	r7,lr
800088fc:	1a 97       	mov	r7,sp
	while (!flashc_is_ready());
800088fe:	f0 1f 00 05 	mcall	80008910 <flashc_default_wait_until_ready+0x18>
80008902:	18 98       	mov	r8,r12
80008904:	ec 18 00 01 	eorl	r8,0x1
80008908:	5c 58       	castu.b	r8
8000890a:	cf a1       	brne	800088fe <flashc_default_wait_until_ready+0x6>
}
8000890c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008910:	80 00       	ld.sh	r0,r0[0x0]
80008912:	88 e0       	ld.uh	r0,r4[0xc]

80008914 <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80008914:	eb cd 40 80 	pushm	r7,lr
80008918:	1a 97       	mov	r7,sp
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
8000891a:	fe 68 14 00 	mov	r8,-125952
8000891e:	70 28       	ld.w	r8,r8[0x8]
80008920:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHC_FSR_PROGE_MASK);
}
80008924:	10 9c       	mov	r12,r8
80008926:	e3 cd 80 80 	ldm	sp++,r7,pc
8000892a:	d7 03       	nop

8000892c <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
8000892c:	eb cd 40 80 	pushm	r7,lr
80008930:	1a 97       	mov	r7,sp
80008932:	20 3d       	sub	sp,12
80008934:	ef 4c ff f8 	st.w	r7[-8],r12
80008938:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
8000893c:	49 b8       	lddpc	r8,800089a8 <flashc_issue_command+0x7c>
8000893e:	70 08       	ld.w	r8,r8[0x0]
80008940:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80008942:	fe 68 14 00 	mov	r8,-125952
80008946:	70 18       	ld.w	r8,r8[0x4]
80008948:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcmd.FCMD.cmd = command;
8000894c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008950:	5c 58       	castu.b	r8
80008952:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80008956:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000895a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000895e:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80008962:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
80008966:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000896a:	58 08       	cp.w	r8,0
8000896c:	c0 b5       	brlt	80008982 <flashc_issue_command+0x56>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
8000896e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008972:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80008976:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000897a:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
8000897e:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80008982:	3a 58       	mov	r8,-91
80008984:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80008988:	fe 68 14 00 	mov	r8,-125952
8000898c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008990:	91 19       	st.w	r8[0x4],r9
	flashc_error_status = flashc_get_error_status();
80008992:	f0 1f 00 07 	mcall	800089ac <flashc_issue_command+0x80>
80008996:	18 99       	mov	r9,r12
80008998:	48 68       	lddpc	r8,800089b0 <flashc_issue_command+0x84>
8000899a:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
8000899c:	48 38       	lddpc	r8,800089a8 <flashc_issue_command+0x7c>
8000899e:	70 08       	ld.w	r8,r8[0x0]
800089a0:	5d 18       	icall	r8
}
800089a2:	2f dd       	sub	sp,-12
800089a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800089a8:	00 00       	add	r0,r0
800089aa:	01 3c       	ld.ub	r12,r0++
800089ac:	80 00       	ld.sh	r0,r0[0x0]
800089ae:	89 14       	st.w	r4[0x4],r4
800089b0:	00 00       	add	r0,r0
800089b2:	06 a0       	st.w	r3++,r0

800089b4 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
800089b4:	eb cd 40 80 	pushm	r7,lr
800089b8:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
800089ba:	3f fb       	mov	r11,-1
800089bc:	30 3c       	mov	r12,3
800089be:	f0 1f 00 03 	mcall	800089c8 <flashc_clear_page_buffer+0x14>
}
800089c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800089c6:	00 00       	add	r0,r0
800089c8:	80 00       	ld.sh	r0,r0[0x0]
800089ca:	89 2c       	st.w	r4[0x8],r12

800089cc <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
800089cc:	eb cd 40 80 	pushm	r7,lr
800089d0:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
800089d2:	fe 68 14 00 	mov	r8,-125952
800089d6:	70 28       	ld.w	r8,r8[0x8]
800089d8:	e2 18 00 20 	andl	r8,0x20,COH
800089dc:	5f 18       	srne	r8
800089de:	5c 58       	castu.b	r8
}
800089e0:	10 9c       	mov	r12,r8
800089e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800089e6:	d7 03       	nop

800089e8 <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
800089e8:	eb cd 40 80 	pushm	r7,lr
800089ec:	1a 97       	mov	r7,sp
800089ee:	20 1d       	sub	sp,4
800089f0:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
800089f4:	ee fb ff fc 	ld.w	r11,r7[-4]
800089f8:	30 cc       	mov	r12,12
800089fa:	f0 1f 00 05 	mcall	80008a0c <flashc_quick_page_read+0x24>
	return flashc_is_page_erased();
800089fe:	f0 1f 00 05 	mcall	80008a10 <flashc_quick_page_read+0x28>
80008a02:	18 98       	mov	r8,r12
}
80008a04:	10 9c       	mov	r12,r8
80008a06:	2f fd       	sub	sp,-4
80008a08:	e3 cd 80 80 	ldm	sp++,r7,pc
80008a0c:	80 00       	ld.sh	r0,r0[0x0]
80008a0e:	89 2c       	st.w	r4[0x8],r12
80008a10:	80 00       	ld.sh	r0,r0[0x0]
80008a12:	89 cc       	st.w	r4[0x30],r12

80008a14 <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
80008a14:	eb cd 40 80 	pushm	r7,lr
80008a18:	1a 97       	mov	r7,sp
80008a1a:	20 4d       	sub	sp,16
80008a1c:	ef 4c ff f4 	st.w	r7[-12],r12
80008a20:	16 98       	mov	r8,r11
80008a22:	ef 68 ff f0 	st.b	r7[-16],r8
	bool page_erased = true;
80008a26:	30 18       	mov	r8,1
80008a28:	ef 68 ff fb 	st.b	r7[-5],r8

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80008a2c:	ee fb ff f4 	ld.w	r11,r7[-12]
80008a30:	30 2c       	mov	r12,2
80008a32:	f0 1f 00 10 	mcall	80008a70 <flashc_erase_page+0x5c>
	if (check) {
80008a36:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80008a3a:	30 08       	mov	r8,0
80008a3c:	f0 09 18 00 	cp.b	r9,r8
80008a40:	c1 20       	breq	80008a64 <flashc_erase_page+0x50>
		unsigned int error_status = flashc_error_status;
80008a42:	48 d8       	lddpc	r8,80008a74 <flashc_erase_page+0x60>
80008a44:	70 08       	ld.w	r8,r8[0x0]
80008a46:	ef 48 ff fc 	st.w	r7[-4],r8
		page_erased = flashc_quick_page_read(-1);
80008a4a:	3f fc       	mov	r12,-1
80008a4c:	f0 1f 00 0b 	mcall	80008a78 <flashc_erase_page+0x64>
80008a50:	18 98       	mov	r8,r12
80008a52:	ef 68 ff fb 	st.b	r7[-5],r8
		flashc_error_status |= error_status;
80008a56:	48 88       	lddpc	r8,80008a74 <flashc_erase_page+0x60>
80008a58:	70 09       	ld.w	r9,r8[0x0]
80008a5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a5e:	10 49       	or	r9,r8
80008a60:	48 58       	lddpc	r8,80008a74 <flashc_erase_page+0x60>
80008a62:	91 09       	st.w	r8[0x0],r9
	}
	return page_erased;
80008a64:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80008a68:	10 9c       	mov	r12,r8
80008a6a:	2f cd       	sub	sp,-16
80008a6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008a70:	80 00       	ld.sh	r0,r0[0x0]
80008a72:	89 2c       	st.w	r4[0x8],r12
80008a74:	00 00       	add	r0,r0
80008a76:	06 a0       	st.w	r3++,r0
80008a78:	80 00       	ld.sh	r0,r0[0x0]
80008a7a:	89 e8       	st.w	r4[0x38],r8

80008a7c <flashc_write_page>:
	return all_pages_erased;
}


void flashc_write_page(int page_number)
{
80008a7c:	eb cd 40 80 	pushm	r7,lr
80008a80:	1a 97       	mov	r7,sp
80008a82:	20 1d       	sub	sp,4
80008a84:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80008a88:	ee fb ff fc 	ld.w	r11,r7[-4]
80008a8c:	30 1c       	mov	r12,1
80008a8e:	f0 1f 00 03 	mcall	80008a98 <flashc_write_page+0x1c>
}
80008a92:	2f fd       	sub	sp,-4
80008a94:	e3 cd 80 80 	ldm	sp++,r7,pc
80008a98:	80 00       	ld.sh	r0,r0[0x0]
80008a9a:	89 2c       	st.w	r4[0x8],r12

80008a9c <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80008a9c:	eb cd 40 80 	pushm	r7,lr
80008aa0:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80008aa2:	3f fb       	mov	r11,-1
80008aa4:	30 fc       	mov	r12,15
80008aa6:	f0 1f 00 05 	mcall	80008ab8 <flashc_quick_user_page_read+0x1c>
	return flashc_is_page_erased();
80008aaa:	f0 1f 00 05 	mcall	80008abc <flashc_quick_user_page_read+0x20>
80008aae:	18 98       	mov	r8,r12
}
80008ab0:	10 9c       	mov	r12,r8
80008ab2:	e3 cd 80 80 	ldm	sp++,r7,pc
80008ab6:	00 00       	add	r0,r0
80008ab8:	80 00       	ld.sh	r0,r0[0x0]
80008aba:	89 2c       	st.w	r4[0x8],r12
80008abc:	80 00       	ld.sh	r0,r0[0x0]
80008abe:	89 cc       	st.w	r4[0x30],r12

80008ac0 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80008ac0:	eb cd 40 80 	pushm	r7,lr
80008ac4:	1a 97       	mov	r7,sp
80008ac6:	20 1d       	sub	sp,4
80008ac8:	18 98       	mov	r8,r12
80008aca:	ef 68 ff fc 	st.b	r7[-4],r8
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80008ace:	3f fb       	mov	r11,-1
80008ad0:	30 ec       	mov	r12,14
80008ad2:	f0 1f 00 09 	mcall	80008af4 <flashc_erase_user_page+0x34>
	return (check) ? flashc_quick_user_page_read() : true;
80008ad6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80008ada:	30 08       	mov	r8,0
80008adc:	f0 09 18 00 	cp.b	r9,r8
80008ae0:	c0 50       	breq	80008aea <flashc_erase_user_page+0x2a>
80008ae2:	f0 1f 00 06 	mcall	80008af8 <flashc_erase_user_page+0x38>
80008ae6:	18 98       	mov	r8,r12
80008ae8:	c0 28       	rjmp	80008aec <flashc_erase_user_page+0x2c>
80008aea:	30 18       	mov	r8,1
}
80008aec:	10 9c       	mov	r12,r8
80008aee:	2f fd       	sub	sp,-4
80008af0:	e3 cd 80 80 	ldm	sp++,r7,pc
80008af4:	80 00       	ld.sh	r0,r0[0x0]
80008af6:	89 2c       	st.w	r4[0x8],r12
80008af8:	80 00       	ld.sh	r0,r0[0x0]
80008afa:	8a 9c       	ld.uh	r12,r5[0x2]

80008afc <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80008afc:	eb cd 40 80 	pushm	r7,lr
80008b00:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80008b02:	3f fb       	mov	r11,-1
80008b04:	30 dc       	mov	r12,13
80008b06:	f0 1f 00 03 	mcall	80008b10 <flashc_write_user_page+0x14>
}
80008b0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80008b0e:	00 00       	add	r0,r0
80008b10:	80 00       	ld.sh	r0,r0[0x0]
80008b12:	89 2c       	st.w	r4[0x8],r12

80008b14 <flashc_memcpy>:
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80008b14:	eb cd 40 80 	pushm	r7,lr
80008b18:	1a 97       	mov	r7,sp
80008b1a:	20 bd       	sub	sp,44
80008b1c:	ef 4c ff e0 	st.w	r7[-32],r12
80008b20:	ef 4b ff dc 	st.w	r7[-36],r11
80008b24:	ef 4a ff d8 	st.w	r7[-40],r10
80008b28:	12 98       	mov	r8,r9
80008b2a:	ef 68 ff d4 	st.b	r7[-44],r8
	uint16_t page_pos;
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
80008b2e:	30 08       	mov	r8,0
80008b30:	ef 48 ff f0 	st.w	r7[-16],r8
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
80008b34:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008b38:	ef 48 ff f8 	st.w	r7[-8],r8
	const uint8_t* src_buf=(const uint8_t*)src;
80008b3c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80008b40:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
80008b44:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008b48:	e0 69 ff ff 	mov	r9,65535
80008b4c:	ea 19 80 7f 	orh	r9,0x807f
80008b50:	12 38       	cp.w	r8,r9
80008b52:	5f b8       	srhi	r8
80008b54:	ef 68 ff ef 	st.b	r7[-17],r8

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
80008b58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008b5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b60:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80008b64:	f2 08 01 08 	sub	r8,r9,r8
80008b68:	ef 48 ff f4 	st.w	r7[-12],r8

	while (nbytes) {
80008b6c:	c9 18       	rjmp	80008c8e <flashc_memcpy+0x17a>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
80008b6e:	f0 1f 00 50 	mcall	80008cac <flashc_memcpy+0x198>
		error_status |= flashc_error_status;
80008b72:	4d 08       	lddpc	r8,80008cb0 <flashc_memcpy+0x19c>
80008b74:	70 08       	ld.w	r8,r8[0x0]
80008b76:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008b7a:	f3 e8 10 08 	or	r8,r9,r8
80008b7e:	ef 48 ff f0 	st.w	r7[-16],r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
80008b82:	30 08       	mov	r8,0
80008b84:	ef 58 ff ec 	st.h	r7[-20],r8
80008b88:	c4 b8       	rjmp	80008c1e <flashc_memcpy+0x10a>
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
80008b8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008b8e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008b92:	ee e9 ff e4 	st.d	r7[-28],r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80008b96:	30 08       	mov	r8,0
80008b98:	ef 68 ff ee 	st.b	r7[-18],r8
80008b9c:	c2 d8       	rjmp	80008bf6 <flashc_memcpy+0xe2>
				if (nbytes && (flash_add == dest_add)) {
80008b9e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008ba2:	58 08       	cp.w	r8,0
80008ba4:	c1 f0       	breq	80008be2 <flashc_memcpy+0xce>
80008ba6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008baa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bae:	10 39       	cp.w	r9,r8
80008bb0:	c1 91       	brne	80008be2 <flashc_memcpy+0xce>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80008bb2:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008bb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bba:	11 88       	ld.ub	r8,r8[0x0]
80008bbc:	ee 09 00 09 	add	r9,r7,r9
80008bc0:	f3 68 ff e4 	st.b	r9[-28],r8
80008bc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bc8:	2f f8       	sub	r8,-1
80008bca:	ef 48 ff fc 	st.w	r7[-4],r8
					dest_add++;
80008bce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bd2:	2f f8       	sub	r8,-1
80008bd4:	ef 48 ff f8 	st.w	r7[-8],r8
					nbytes--;
80008bd8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008bdc:	20 18       	sub	r8,1
80008bde:	ef 48 ff d8 	st.w	r7[-40],r8
				}
				flash_add++;
80008be2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008be6:	2f f8       	sub	r8,-1
80008be8:	ef 48 ff f4 	st.w	r7[-12],r8
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80008bec:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80008bf0:	2f f8       	sub	r8,-1
80008bf2:	ef 68 ff ee 	st.b	r7[-18],r8
80008bf6:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008bfa:	30 78       	mov	r8,7
80008bfc:	f0 09 18 00 	cp.b	r9,r8
80008c00:	fe 98 ff cf 	brls	80008b9e <flashc_memcpy+0x8a>
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
80008c04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008c08:	20 88       	sub	r8,8
80008c0a:	10 9a       	mov	r10,r8
80008c0c:	ee e8 ff e4 	ld.d	r8,r7[-28]
80008c10:	f4 e9 00 00 	st.d	r10[0],r8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
80008c14:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80008c18:	2f 88       	sub	r8,-8
80008c1a:	ef 58 ff ec 	st.h	r7[-20],r8
80008c1e:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80008c22:	e0 68 01 ff 	mov	r8,511
80008c26:	f0 09 19 00 	cp.h	r9,r8
80008c2a:	fe 98 ff b0 	brls	80008b8a <flashc_memcpy+0x76>
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
80008c2e:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80008c32:	30 08       	mov	r8,0
80008c34:	f0 09 18 00 	cp.b	r9,r8
80008c38:	c1 70       	breq	80008c66 <flashc_memcpy+0x152>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
80008c3a:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80008c3e:	30 08       	mov	r8,0
80008c40:	f0 09 18 00 	cp.b	r9,r8
80008c44:	c0 50       	breq	80008c4e <flashc_memcpy+0x13a>
80008c46:	30 0c       	mov	r12,0
80008c48:	f0 1f 00 1b 	mcall	80008cb4 <flashc_memcpy+0x1a0>
80008c4c:	c0 58       	rjmp	80008c56 <flashc_memcpy+0x142>
80008c4e:	30 0b       	mov	r11,0
80008c50:	3f fc       	mov	r12,-1
80008c52:	f0 1f 00 1a 	mcall	80008cb8 <flashc_memcpy+0x1a4>
			error_status |= flashc_error_status;
80008c56:	49 78       	lddpc	r8,80008cb0 <flashc_memcpy+0x19c>
80008c58:	70 08       	ld.w	r8,r8[0x0]
80008c5a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008c5e:	f3 e8 10 08 	or	r8,r9,r8
80008c62:	ef 48 ff f0 	st.w	r7[-16],r8
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
80008c66:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80008c6a:	30 08       	mov	r8,0
80008c6c:	f0 09 18 00 	cp.b	r9,r8
80008c70:	c0 40       	breq	80008c78 <flashc_memcpy+0x164>
80008c72:	f0 1f 00 13 	mcall	80008cbc <flashc_memcpy+0x1a8>
80008c76:	c0 48       	rjmp	80008c7e <flashc_memcpy+0x16a>
80008c78:	3f fc       	mov	r12,-1
80008c7a:	f0 1f 00 12 	mcall	80008cc0 <flashc_memcpy+0x1ac>
		error_status |= flashc_error_status;
80008c7e:	48 d8       	lddpc	r8,80008cb0 <flashc_memcpy+0x19c>
80008c80:	70 08       	ld.w	r8,r8[0x0]
80008c82:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008c86:	f3 e8 10 08 	or	r8,r9,r8
80008c8a:	ef 48 ff f0 	st.w	r7[-16],r8

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80008c8e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008c92:	58 08       	cp.w	r8,0
80008c94:	fe 91 ff 6d 	brne	80008b6e <flashc_memcpy+0x5a>
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
80008c98:	48 68       	lddpc	r8,80008cb0 <flashc_memcpy+0x19c>
80008c9a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008c9e:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
80008ca0:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
80008ca4:	10 9c       	mov	r12,r8
80008ca6:	2f 5d       	sub	sp,-44
80008ca8:	e3 cd 80 80 	ldm	sp++,r7,pc
80008cac:	80 00       	ld.sh	r0,r0[0x0]
80008cae:	89 b4       	st.w	r4[0x2c],r4
80008cb0:	00 00       	add	r0,r0
80008cb2:	06 a0       	st.w	r3++,r0
80008cb4:	80 00       	ld.sh	r0,r0[0x0]
80008cb6:	8a c0       	ld.uh	r0,r5[0x8]
80008cb8:	80 00       	ld.sh	r0,r0[0x0]
80008cba:	8a 14       	ld.sh	r4,r5[0x2]
80008cbc:	80 00       	ld.sh	r0,r0[0x0]
80008cbe:	8a fc       	ld.uh	r12,r5[0xe]
80008cc0:	80 00       	ld.sh	r0,r0[0x0]
80008cc2:	8a 7c       	ld.sh	r12,r5[0xe]

80008cc4 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80008cc4:	eb cd 40 80 	pushm	r7,lr
80008cc8:	1a 97       	mov	r7,sp
80008cca:	20 4d       	sub	sp,16
80008ccc:	ef 4c ff f4 	st.w	r7[-12],r12
80008cd0:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
80008cd4:	30 08       	mov	r8,0
80008cd6:	ef 48 ff f8 	st.w	r7[-8],r8
  uint32_t i;

  for (i = 0; i < size; i++)
80008cda:	30 08       	mov	r8,0
80008cdc:	ef 48 ff fc 	st.w	r7[-4],r8
80008ce0:	c1 d8       	rjmp	80008d1a <gpio_enable_module+0x56>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80008ce2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008ce6:	11 98       	ld.ub	r8,r8[0x1]
80008ce8:	10 99       	mov	r9,r8
80008cea:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008cee:	11 88       	ld.ub	r8,r8[0x0]
80008cf0:	12 9b       	mov	r11,r9
80008cf2:	10 9c       	mov	r12,r8
80008cf4:	f0 1f 00 10 	mcall	80008d34 <gpio_enable_module+0x70>
80008cf8:	18 98       	mov	r8,r12
80008cfa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008cfe:	f3 e8 10 08 	or	r8,r9,r8
80008d02:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
80008d06:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008d0a:	2f e8       	sub	r8,-2
80008d0c:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80008d10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d14:	2f f8       	sub	r8,-1
80008d16:	ef 48 ff fc 	st.w	r7[-4],r8
80008d1a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008d1e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008d22:	10 39       	cp.w	r9,r8
80008d24:	cd f3       	brcs	80008ce2 <gpio_enable_module+0x1e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
80008d26:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80008d2a:	10 9c       	mov	r12,r8
80008d2c:	2f cd       	sub	sp,-16
80008d2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008d32:	00 00       	add	r0,r0
80008d34:	80 00       	ld.sh	r0,r0[0x0]
80008d36:	8d 38       	st.w	r6[0xc],r8

80008d38 <gpio_enable_module_pin>:


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80008d38:	eb cd 40 80 	pushm	r7,lr
80008d3c:	1a 97       	mov	r7,sp
80008d3e:	20 3d       	sub	sp,12
80008d40:	ef 4c ff f8 	st.w	r7[-8],r12
80008d44:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008d48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d4c:	a5 98       	lsr	r8,0x5
80008d4e:	a9 68       	lsl	r8,0x8
80008d50:	e0 28 f0 00 	sub	r8,61440
80008d54:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
80008d58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008d5c:	58 18       	cp.w	r8,1
80008d5e:	c1 e0       	breq	80008d9a <gpio_enable_module_pin+0x62>
80008d60:	c0 63       	brcs	80008d6c <gpio_enable_module_pin+0x34>
80008d62:	58 28       	cp.w	r8,2
80008d64:	c3 20       	breq	80008dc8 <gpio_enable_module_pin+0x90>
80008d66:	58 38       	cp.w	r8,3
80008d68:	c4 70       	breq	80008df6 <gpio_enable_module_pin+0xbe>
80008d6a:	c5 d8       	rjmp	80008e24 <gpio_enable_module_pin+0xec>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80008d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d70:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d74:	30 19       	mov	r9,1
80008d76:	f2 08 09 48 	lsl	r8,r9,r8
80008d7a:	10 99       	mov	r9,r8
80008d7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d80:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80008d82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d86:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d8a:	30 19       	mov	r9,1
80008d8c:	f2 08 09 48 	lsl	r8,r9,r8
80008d90:	10 99       	mov	r9,r8
80008d92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d96:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008d98:	c4 88       	rjmp	80008e28 <gpio_enable_module_pin+0xf0>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80008d9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d9e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008da2:	30 19       	mov	r9,1
80008da4:	f2 08 09 48 	lsl	r8,r9,r8
80008da8:	10 99       	mov	r9,r8
80008daa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dae:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80008db0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008db4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008db8:	30 19       	mov	r9,1
80008dba:	f2 08 09 48 	lsl	r8,r9,r8
80008dbe:	10 99       	mov	r9,r8
80008dc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dc4:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008dc6:	c3 18       	rjmp	80008e28 <gpio_enable_module_pin+0xf0>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80008dc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008dcc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008dd0:	30 19       	mov	r9,1
80008dd2:	f2 08 09 48 	lsl	r8,r9,r8
80008dd6:	10 99       	mov	r9,r8
80008dd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ddc:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80008dde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008de2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008de6:	30 19       	mov	r9,1
80008de8:	f2 08 09 48 	lsl	r8,r9,r8
80008dec:	10 99       	mov	r9,r8
80008dee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008df2:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008df4:	c1 a8       	rjmp	80008e28 <gpio_enable_module_pin+0xf0>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80008df6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008dfa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008dfe:	30 19       	mov	r9,1
80008e00:	f2 08 09 48 	lsl	r8,r9,r8
80008e04:	10 99       	mov	r9,r8
80008e06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e0a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80008e0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e10:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e14:	30 19       	mov	r9,1
80008e16:	f2 08 09 48 	lsl	r8,r9,r8
80008e1a:	10 99       	mov	r9,r8
80008e1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e20:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008e22:	c0 38       	rjmp	80008e28 <gpio_enable_module_pin+0xf0>
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
80008e24:	30 18       	mov	r8,1
80008e26:	c0 d8       	rjmp	80008e40 <gpio_enable_module_pin+0x108>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80008e28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e2c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e30:	30 19       	mov	r9,1
80008e32:	f2 08 09 48 	lsl	r8,r9,r8
80008e36:	10 99       	mov	r9,r8
80008e38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e3c:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
80008e3e:	30 08       	mov	r8,0
}
80008e40:	10 9c       	mov	r12,r8
80008e42:	2f dd       	sub	sp,-12
80008e44:	e3 cd 80 80 	ldm	sp++,r7,pc

80008e48 <gpio_enable_gpio_pin>:
  }
}


void gpio_enable_gpio_pin(uint32_t pin)
{
80008e48:	eb cd 40 80 	pushm	r7,lr
80008e4c:	1a 97       	mov	r7,sp
80008e4e:	20 2d       	sub	sp,8
80008e50:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008e54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e58:	a5 98       	lsr	r8,0x5
80008e5a:	a9 68       	lsl	r8,0x8
80008e5c:	e0 28 f0 00 	sub	r8,61440
80008e60:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
80008e64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e68:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e6c:	30 19       	mov	r9,1
80008e6e:	f2 08 09 48 	lsl	r8,r9,r8
80008e72:	10 99       	mov	r9,r8
80008e74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e78:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
80008e7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e80:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e84:	30 19       	mov	r9,1
80008e86:	f2 08 09 48 	lsl	r8,r9,r8
80008e8a:	10 99       	mov	r9,r8
80008e8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e90:	91 19       	st.w	r8[0x4],r9
}
80008e92:	2f ed       	sub	sp,-8
80008e94:	e3 cd 80 80 	ldm	sp++,r7,pc

80008e98 <gpio_enable_pin_pull_up>:

#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
80008e98:	eb cd 40 80 	pushm	r7,lr
80008e9c:	1a 97       	mov	r7,sp
80008e9e:	20 2d       	sub	sp,8
80008ea0:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008ea4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ea8:	a5 98       	lsr	r8,0x5
80008eaa:	a9 68       	lsl	r8,0x8
80008eac:	e0 28 f0 00 	sub	r8,61440
80008eb0:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80008eb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008eb8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ebc:	30 19       	mov	r9,1
80008ebe:	f2 08 09 48 	lsl	r8,r9,r8
80008ec2:	10 99       	mov	r9,r8
80008ec4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ec8:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80008ecc:	2f ed       	sub	sp,-8
80008ece:	e3 cd 80 80 	ldm	sp++,r7,pc

80008ed2 <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80008ed2:	eb cd 40 80 	pushm	r7,lr
80008ed6:	1a 97       	mov	r7,sp
80008ed8:	20 3d       	sub	sp,12
80008eda:	ef 4c ff f8 	st.w	r7[-8],r12
80008ede:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008ee2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ee6:	a5 98       	lsr	r8,0x5
80008ee8:	a9 68       	lsl	r8,0x8
80008eea:	e0 28 f0 00 	sub	r8,61440
80008eee:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
80008ef2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008ef6:	e2 18 00 04 	andl	r8,0x4,COH
80008efa:	c0 e0       	breq	80008f16 <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
80008efc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f00:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f04:	30 19       	mov	r9,1
80008f06:	f2 08 09 48 	lsl	r8,r9,r8
80008f0a:	10 99       	mov	r9,r8
80008f0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f10:	f1 49 00 74 	st.w	r8[116],r9
80008f14:	c0 d8       	rjmp	80008f2e <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80008f16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f1a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f1e:	30 19       	mov	r9,1
80008f20:	f2 08 09 48 	lsl	r8,r9,r8
80008f24:	10 99       	mov	r9,r8
80008f26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f2a:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80008f2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008f32:	e2 18 00 80 	andl	r8,0x80,COH
80008f36:	c5 a0       	breq	80008fea <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
80008f38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008f3c:	e2 18 01 80 	andl	r8,0x180,COH
80008f40:	c1 a0       	breq	80008f74 <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80008f42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f46:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f4a:	30 19       	mov	r9,1
80008f4c:	f2 08 09 48 	lsl	r8,r9,r8
80008f50:	10 99       	mov	r9,r8
80008f52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f56:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80008f5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f5e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f62:	30 19       	mov	r9,1
80008f64:	f2 08 09 48 	lsl	r8,r9,r8
80008f68:	10 99       	mov	r9,r8
80008f6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f6e:	f1 49 00 b8 	st.w	r8[184],r9
80008f72:	c3 c8       	rjmp	80008fea <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
80008f74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008f78:	e2 18 02 80 	andl	r8,0x280,COH
80008f7c:	c1 a0       	breq	80008fb0 <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80008f7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f86:	30 19       	mov	r9,1
80008f88:	f2 08 09 48 	lsl	r8,r9,r8
80008f8c:	10 99       	mov	r9,r8
80008f8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f92:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80008f96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f9a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f9e:	30 19       	mov	r9,1
80008fa0:	f2 08 09 48 	lsl	r8,r9,r8
80008fa4:	10 99       	mov	r9,r8
80008fa6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008faa:	f1 49 00 b8 	st.w	r8[184],r9
80008fae:	c1 e8       	rjmp	80008fea <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
80008fb0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008fb4:	e2 18 03 80 	andl	r8,0x380,COH
80008fb8:	c1 90       	breq	80008fea <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80008fba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fbe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008fc2:	30 19       	mov	r9,1
80008fc4:	f2 08 09 48 	lsl	r8,r9,r8
80008fc8:	10 99       	mov	r9,r8
80008fca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fce:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80008fd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fd6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008fda:	30 19       	mov	r9,1
80008fdc:	f2 08 09 48 	lsl	r8,r9,r8
80008fe0:	10 99       	mov	r9,r8
80008fe2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fe6:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80008fea:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008fee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008ff2:	5c 58       	castu.b	r8
80008ff4:	c2 c0       	breq	8000904c <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
80008ff6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008ffa:	e2 18 00 02 	andl	r8,0x2,COH
80008ffe:	c0 e0       	breq	8000901a <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80009000:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009004:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80009008:	30 19       	mov	r9,1
8000900a:	f2 08 09 48 	lsl	r8,r9,r8
8000900e:	10 99       	mov	r9,r8
80009010:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009014:	f1 49 00 54 	st.w	r8[84],r9
80009018:	c0 d8       	rjmp	80009032 <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
8000901a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000901e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80009022:	30 19       	mov	r9,1
80009024:	f2 08 09 48 	lsl	r8,r9,r8
80009028:	10 99       	mov	r9,r8
8000902a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000902e:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80009032:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009036:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000903a:	30 19       	mov	r9,1
8000903c:	f2 08 09 48 	lsl	r8,r9,r8
80009040:	10 99       	mov	r9,r8
80009042:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009046:	f1 49 00 44 	st.w	r8[68],r9
8000904a:	c0 d8       	rjmp	80009064 <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
8000904c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009050:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80009054:	30 19       	mov	r9,1
80009056:	f2 08 09 48 	lsl	r8,r9,r8
8000905a:	10 99       	mov	r9,r8
8000905c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009060:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80009064:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009068:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000906c:	30 19       	mov	r9,1
8000906e:	f2 08 09 48 	lsl	r8,r9,r8
80009072:	10 99       	mov	r9,r8
80009074:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009078:	91 19       	st.w	r8[0x4],r9
}
8000907a:	2f dd       	sub	sp,-12
8000907c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009080 <gpio_get_pin_value>:
    /* Enable GPIO */
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
80009080:	eb cd 40 80 	pushm	r7,lr
80009084:	1a 97       	mov	r7,sp
80009086:	20 2d       	sub	sp,8
80009088:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000908c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009090:	a5 98       	lsr	r8,0x5
80009092:	a9 68       	lsl	r8,0x8
80009094:	e0 28 f0 00 	sub	r8,61440
80009098:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8000909c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090a0:	71 89       	ld.w	r9,r8[0x60]
800090a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800090a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800090aa:	f2 08 0a 48 	lsr	r8,r9,r8
800090ae:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
800090b2:	10 9c       	mov	r12,r8
800090b4:	2f ed       	sub	sp,-8
800090b6:	e3 cd 80 80 	ldm	sp++,r7,pc

800090ba <gpio_set_gpio_pin>:
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
}


void gpio_set_gpio_pin(uint32_t pin)
{
800090ba:	eb cd 40 80 	pushm	r7,lr
800090be:	1a 97       	mov	r7,sp
800090c0:	20 2d       	sub	sp,8
800090c2:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800090c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800090ca:	a5 98       	lsr	r8,0x5
800090cc:	a9 68       	lsl	r8,0x8
800090ce:	e0 28 f0 00 	sub	r8,61440
800090d2:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
800090d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800090da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800090de:	30 19       	mov	r9,1
800090e0:	f2 08 09 48 	lsl	r8,r9,r8
800090e4:	10 99       	mov	r9,r8
800090e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090ea:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800090ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800090f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800090f6:	30 19       	mov	r9,1
800090f8:	f2 08 09 48 	lsl	r8,r9,r8
800090fc:	10 99       	mov	r9,r8
800090fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009102:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80009106:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000910a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000910e:	30 19       	mov	r9,1
80009110:	f2 08 09 48 	lsl	r8,r9,r8
80009114:	10 99       	mov	r9,r8
80009116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000911a:	91 19       	st.w	r8[0x4],r9
}
8000911c:	2f ed       	sub	sp,-8
8000911e:	e3 cd 80 80 	ldm	sp++,r7,pc

80009122 <gpio_clr_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
80009122:	eb cd 40 80 	pushm	r7,lr
80009126:	1a 97       	mov	r7,sp
80009128:	20 2d       	sub	sp,8
8000912a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000912e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009132:	a5 98       	lsr	r8,0x5
80009134:	a9 68       	lsl	r8,0x8
80009136:	e0 28 f0 00 	sub	r8,61440
8000913a:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
8000913e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009142:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80009146:	30 19       	mov	r9,1
80009148:	f2 08 09 48 	lsl	r8,r9,r8
8000914c:	10 99       	mov	r9,r8
8000914e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009152:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80009156:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000915a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000915e:	30 19       	mov	r9,1
80009160:	f2 08 09 48 	lsl	r8,r9,r8
80009164:	10 99       	mov	r9,r8
80009166:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000916a:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8000916e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009172:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80009176:	30 19       	mov	r9,1
80009178:	f2 08 09 48 	lsl	r8,r9,r8
8000917c:	10 99       	mov	r9,r8
8000917e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009182:	91 19       	st.w	r8[0x4],r9
}
80009184:	2f ed       	sub	sp,-8
80009186:	e3 cd 80 80 	ldm	sp++,r7,pc

8000918a <gpio_tgl_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
8000918a:	eb cd 40 80 	pushm	r7,lr
8000918e:	1a 97       	mov	r7,sp
80009190:	20 2d       	sub	sp,8
80009192:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80009196:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000919a:	a5 98       	lsr	r8,0x5
8000919c:	a9 68       	lsl	r8,0x8
8000919e:	e0 28 f0 00 	sub	r8,61440
800091a2:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
800091a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800091ae:	30 19       	mov	r9,1
800091b0:	f2 08 09 48 	lsl	r8,r9,r8
800091b4:	10 99       	mov	r9,r8
800091b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800091ba:	f1 49 00 5c 	st.w	r8[92],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800091be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800091c6:	30 19       	mov	r9,1
800091c8:	f2 08 09 48 	lsl	r8,r9,r8
800091cc:	10 99       	mov	r9,r8
800091ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800091d2:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800091d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800091de:	30 19       	mov	r9,1
800091e0:	f2 08 09 48 	lsl	r8,r9,r8
800091e4:	10 99       	mov	r9,r8
800091e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800091ea:	91 19       	st.w	r8[0x4],r9
}
800091ec:	2f ed       	sub	sp,-8
800091ee:	e3 cd 80 80 	ldm	sp++,r7,pc

800091f2 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800091f2:	eb cd 40 80 	pushm	r7,lr
800091f6:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
800091f8:	c0 08       	rjmp	800091f8 <_unhandled_interrupt+0x6>
800091fa:	d7 03       	nop

800091fc <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
800091fc:	eb cd 40 80 	pushm	r7,lr
80009200:	1a 97       	mov	r7,sp
80009202:	20 3d       	sub	sp,12
80009204:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80009208:	fe 78 08 00 	mov	r8,-63488
8000920c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009210:	f2 09 11 03 	rsub	r9,r9,3
80009214:	28 09       	sub	r9,-128
80009216:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000921a:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000921e:	fe 78 08 00 	mov	r8,-63488
80009222:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009226:	2c 09       	sub	r9,-64
80009228:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000922c:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80009230:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009234:	58 08       	cp.w	r8,0
80009236:	c1 30       	breq	8000925c <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80009238:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000923c:	48 b8       	lddpc	r8,80009268 <_get_interrupt_handler+0x6c>
8000923e:	a1 79       	lsl	r9,0x1
80009240:	2f f9       	sub	r9,-1
80009242:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80009246:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000924a:	f0 08 12 00 	clz	r8,r8
8000924e:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80009252:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80009254:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80009258:	70 08       	ld.w	r8,r8[0x0]
8000925a:	c0 28       	rjmp	8000925e <_get_interrupt_handler+0x62>
8000925c:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000925e:	10 9c       	mov	r12,r8
80009260:	2f dd       	sub	sp,-12
80009262:	e3 cd 80 80 	ldm	sp++,r7,pc
80009266:	00 00       	add	r0,r0
80009268:	80 00       	ld.sh	r0,r0[0x0]
8000926a:	f4 fc eb cd 	ld.w	r12,r10[-5171]

8000926c <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
8000926c:	eb cd 40 80 	pushm	r7,lr
80009270:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80009272:	48 38       	lddpc	r8,8000927c <INTC_init_evba+0x10>
80009274:	e3 b8 00 01 	mtsr	0x4,r8
}
80009278:	e3 cd 80 80 	ldm	sp++,r7,pc
8000927c:	80 00       	ld.sh	r0,r0[0x0]
8000927e:	ee 00       	*unknown*

80009280 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80009280:	eb cd 40 80 	pushm	r7,lr
80009284:	1a 97       	mov	r7,sp
80009286:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80009288:	f0 1f 00 1f 	mcall	80009304 <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000928c:	30 08       	mov	r8,0
8000928e:	ef 48 ff f8 	st.w	r7[-8],r8
80009292:	c3 18       	rjmp	800092f4 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80009294:	30 08       	mov	r8,0
80009296:	ef 48 ff fc 	st.w	r7[-4],r8
8000929a:	c1 48       	rjmp	800092c2 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
8000929c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800092a0:	49 a8       	lddpc	r8,80009308 <INTC_init_interrupts+0x88>
800092a2:	a1 79       	lsl	r9,0x1
800092a4:	2f f9       	sub	r9,-1
800092a6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800092aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800092ae:	a3 68       	lsl	r8,0x2
800092b0:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800092b4:	49 69       	lddpc	r9,8000930c <INTC_init_interrupts+0x8c>
800092b6:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800092b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800092bc:	2f f8       	sub	r8,-1
800092be:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
800092c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800092c6:	49 18       	lddpc	r8,80009308 <INTC_init_interrupts+0x88>
800092c8:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800092cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800092d0:	10 39       	cp.w	r9,r8
800092d2:	fe 9b ff e5 	brhi	8000929c <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800092d6:	fe 78 08 00 	mov	r8,-63488
800092da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800092de:	48 db       	lddpc	r11,80009310 <INTC_init_interrupts+0x90>
800092e0:	48 da       	lddpc	r10,80009314 <INTC_init_interrupts+0x94>
800092e2:	f6 0a 01 0a 	sub	r10,r11,r10
800092e6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800092ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092ee:	2f f8       	sub	r8,-1
800092f0:	ef 48 ff f8 	st.w	r7[-8],r8
800092f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092f8:	59 d8       	cp.w	r8,29
800092fa:	fe 98 ff cd 	brls	80009294 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
800092fe:	2f ed       	sub	sp,-8
80009300:	e3 cd 80 80 	ldm	sp++,r7,pc
80009304:	80 00       	ld.sh	r0,r0[0x0]
80009306:	92 6c       	ld.sh	r12,r9[0xc]
80009308:	80 00       	ld.sh	r0,r0[0x0]
8000930a:	f4 fc 80 00 	ld.w	r12,r10[-32768]
8000930e:	91 f2       	st.w	r8[0x3c],r2
80009310:	80 00       	ld.sh	r0,r0[0x0]
80009312:	ef 04 80 00 	ld.sh	r4,r7[-32768]
80009316:	ee 00       	*unknown*

80009318 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80009318:	eb cd 40 80 	pushm	r7,lr
8000931c:	1a 97       	mov	r7,sp
8000931e:	20 4d       	sub	sp,16
80009320:	ef 4c ff f8 	st.w	r7[-8],r12
80009324:	ef 4b ff f4 	st.w	r7[-12],r11
80009328:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000932c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009330:	a5 98       	lsr	r8,0x5
80009332:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80009336:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000933a:	4a 78       	lddpc	r8,800093d4 <INTC_register_interrupt+0xbc>
8000933c:	a1 79       	lsl	r9,0x1
8000933e:	2f f9       	sub	r9,-1
80009340:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80009344:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009348:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000934c:	a3 68       	lsl	r8,0x2
8000934e:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80009352:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009356:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80009358:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000935c:	58 08       	cp.w	r8,0
8000935e:	c0 c1       	brne	80009376 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80009360:	fe 78 08 00 	mov	r8,-63488
80009364:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009368:	49 cb       	lddpc	r11,800093d8 <INTC_register_interrupt+0xc0>
8000936a:	49 da       	lddpc	r10,800093dc <INTC_register_interrupt+0xc4>
8000936c:	f6 0a 01 0a 	sub	r10,r11,r10
80009370:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80009374:	c2 d8       	rjmp	800093ce <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80009376:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000937a:	58 18       	cp.w	r8,1
8000937c:	c0 d1       	brne	80009396 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
8000937e:	fe 78 08 00 	mov	r8,-63488
80009382:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009386:	49 7b       	lddpc	r11,800093e0 <INTC_register_interrupt+0xc8>
80009388:	49 5a       	lddpc	r10,800093dc <INTC_register_interrupt+0xc4>
8000938a:	f6 0a 01 0a 	sub	r10,r11,r10
8000938e:	bf aa       	sbr	r10,0x1e
80009390:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80009394:	c1 d8       	rjmp	800093ce <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80009396:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000939a:	58 28       	cp.w	r8,2
8000939c:	c0 d1       	brne	800093b6 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000939e:	fe 78 08 00 	mov	r8,-63488
800093a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800093a6:	49 0b       	lddpc	r11,800093e4 <INTC_register_interrupt+0xcc>
800093a8:	48 da       	lddpc	r10,800093dc <INTC_register_interrupt+0xc4>
800093aa:	f6 0a 01 0a 	sub	r10,r11,r10
800093ae:	bf ba       	sbr	r10,0x1f
800093b0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800093b4:	c0 d8       	rjmp	800093ce <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800093b6:	fe 78 08 00 	mov	r8,-63488
800093ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800093be:	48 bb       	lddpc	r11,800093e8 <INTC_register_interrupt+0xd0>
800093c0:	48 7a       	lddpc	r10,800093dc <INTC_register_interrupt+0xc4>
800093c2:	f6 0a 01 0a 	sub	r10,r11,r10
800093c6:	ea 1a c0 00 	orh	r10,0xc000
800093ca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
800093ce:	2f cd       	sub	sp,-16
800093d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800093d4:	80 00       	ld.sh	r0,r0[0x0]
800093d6:	f4 fc 80 00 	ld.w	r12,r10[-32768]
800093da:	ef 04 80 00 	ld.sh	r4,r7[-32768]
800093de:	ee 00       	*unknown*
800093e0:	80 00       	ld.sh	r0,r0[0x0]
800093e2:	ef 12 80 00 	ld.uh	r2,r7[-32768]
800093e6:	ef 20 80 00 	ld.sb	r0,r7[-32768]
800093ea:	ef 2e eb cd 	ld.sb	lr,r7[-5171]

800093ec <mci_reset>:


int shadow_sr=0;

void mci_reset(volatile avr32_mci_t *mci)
{
800093ec:	eb cd 40 80 	pushm	r7,lr
800093f0:	1a 97       	mov	r7,sp
800093f2:	20 1d       	sub	sp,4
800093f4:	ef 4c ff fc 	st.w	r7[-4],r12
  mci->cr = (1<<AVR32_MCI_CR_SWRST);
800093f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093fc:	e0 69 00 80 	mov	r9,128
80009400:	91 09       	st.w	r8[0x0],r9
}
80009402:	2f fd       	sub	sp,-4
80009404:	e3 cd 80 80 	ldm	sp++,r7,pc

80009408 <mci_disable>:

void mci_disable(volatile avr32_mci_t *mci)
{
80009408:	eb cd 40 80 	pushm	r7,lr
8000940c:	1a 97       	mov	r7,sp
8000940e:	20 1d       	sub	sp,4
80009410:	ef 4c ff fc 	st.w	r7[-4],r12
  // Disable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIDIS) | (1<<AVR32_MCI_CR_PWSDIS);
80009414:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009418:	30 a9       	mov	r9,10
8000941a:	91 09       	st.w	r8[0x0],r9
}
8000941c:	2f fd       	sub	sp,-4
8000941e:	e3 cd 80 80 	ldm	sp++,r7,pc

80009422 <mci_enable>:

void mci_enable(volatile avr32_mci_t *mci)
{
80009422:	eb cd 40 80 	pushm	r7,lr
80009426:	1a 97       	mov	r7,sp
80009428:	20 1d       	sub	sp,4
8000942a:	ef 4c ff fc 	st.w	r7[-4],r12
  // Enable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIEN) | (1<<AVR32_MCI_CR_PWSEN);
8000942e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009432:	30 59       	mov	r9,5
80009434:	91 09       	st.w	r8[0x0],r9
}
80009436:	2f fd       	sub	sp,-4
80009438:	e3 cd 80 80 	ldm	sp++,r7,pc

8000943c <mci_set_speed>:
}

void mci_set_speed(volatile avr32_mci_t *mci,
                   uint32_t pbb_hz,
                   uint32_t card_speed)
{
8000943c:	eb cd 40 80 	pushm	r7,lr
80009440:	1a 97       	mov	r7,sp
80009442:	20 7d       	sub	sp,28
80009444:	ef 4c ff ec 	st.w	r7[-20],r12
80009448:	ef 4b ff e8 	st.w	r7[-24],r11
8000944c:	ef 4a ff e4 	st.w	r7[-28],r10
    avr32_mci_cfg_t   CFG;
  };
  union u_cfg val;

  // Get the Mode Register
  mci_mode_register = mci->mr;
80009450:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009454:	70 18       	ld.w	r8,r8[0x4]
80009456:	ef 48 ff f4 	st.w	r7[-12],r8

  if (card_speed > AVR32_MCI_HSDIS_MAX_FREQ)
8000945a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000945e:	e0 69 78 40 	mov	r9,30784
80009462:	ea 19 01 7d 	orh	r9,0x17d
80009466:	12 38       	cp.w	r8,r9
80009468:	e0 88 00 14 	brls	80009490 <mci_set_speed+0x54>
  { // Use of the High Speed mode of the MCI macro.
    val.cfg = mci->cfg;
8000946c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009470:	71 58       	ld.w	r8,r8[0x54]
80009472:	ef 48 ff f0 	st.w	r7[-16],r8
    val.CFG.hsmode = 1;
80009476:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000947a:	30 19       	mov	r9,1
8000947c:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80009480:	ef 48 ff f0 	st.w	r7[-16],r8
    mci->cfg = val.cfg;
80009484:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009488:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000948c:	f1 49 00 54 	st.w	r8[84],r9
  }

  // Multimedia Card Interface clock (MCCK or MCI_CK) is Master Clock (MCK)
  // divided by (2*(CLKDIV+1))
  if (card_speed > 0)
80009490:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009494:	58 08       	cp.w	r8,0
80009496:	c2 90       	breq	800094e8 <mci_set_speed+0xac>
  {
    clkdiv = pbb_hz / (card_speed * 2);
80009498:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000949c:	f0 09 15 01 	lsl	r9,r8,0x1
800094a0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800094a4:	f0 09 0d 08 	divu	r8,r8,r9
800094a8:	ef 48 ff f8 	st.w	r7[-8],r8
    rest   = pbb_hz % (card_speed * 2);
800094ac:	ee f8 ff e4 	ld.w	r8,r7[-28]
800094b0:	f0 09 15 01 	lsl	r9,r8,0x1
800094b4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800094b8:	f0 09 0d 08 	divu	r8,r8,r9
800094bc:	12 98       	mov	r8,r9
800094be:	ef 48 ff fc 	st.w	r7[-4],r8
    if (rest)
800094c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800094c6:	58 08       	cp.w	r8,0
800094c8:	c0 60       	breq	800094d4 <mci_set_speed+0x98>
    { // Ensure that the card_speed can not be higher than expected.
      clkdiv += 1;
800094ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800094ce:	2f f8       	sub	r8,-1
800094d0:	ef 48 ff f8 	st.w	r7[-8],r8
    }

    if (clkdiv > 0)
800094d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800094d8:	58 08       	cp.w	r8,0
800094da:	c0 b0       	breq	800094f0 <mci_set_speed+0xb4>
    {
      clkdiv -= 1;
800094dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800094e0:	20 18       	sub	r8,1
800094e2:	ef 48 ff f8 	st.w	r7[-8],r8
800094e6:	c0 68       	rjmp	800094f2 <mci_set_speed+0xb6>
    }
  }
  else
  {
    clkdiv = 0;
800094e8:	30 08       	mov	r8,0
800094ea:	ef 48 ff f8 	st.w	r7[-8],r8
800094ee:	c0 28       	rjmp	800094f2 <mci_set_speed+0xb6>
      clkdiv += 1;
    }

    if (clkdiv > 0)
    {
      clkdiv -= 1;
800094f0:	d7 03       	nop
  {
    clkdiv = 0;
  }

  // Write new configuration
  mci_mode_register &= ~AVR32_MCI_MR_CLKDIV_MASK; // Clear previous value
800094f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800094f6:	e0 18 ff 00 	andl	r8,0xff00
800094fa:	ef 48 ff f4 	st.w	r7[-12],r8
  mci_mode_register |= clkdiv; // Set the new one
800094fe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009502:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009506:	f3 e8 10 08 	or	r8,r9,r8
8000950a:	ef 48 ff f4 	st.w	r7[-12],r8
  mci->mr = mci_mode_register;
8000950e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009512:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009516:	91 19       	st.w	r8[0x4],r9
}
80009518:	2f 9d       	sub	sp,-28
8000951a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000951e:	d7 03       	nop

80009520 <mci_init>:

int mci_init(volatile avr32_mci_t *mci,
              uint8_t card_slot,
              uint32_t pbb_hz)
{
80009520:	eb cd 40 80 	pushm	r7,lr
80009524:	1a 97       	mov	r7,sp
80009526:	20 3d       	sub	sp,12
80009528:	ef 4c ff fc 	st.w	r7[-4],r12
8000952c:	16 98       	mov	r8,r11
8000952e:	ef 4a ff f4 	st.w	r7[-12],r10
80009532:	ef 68 ff f8 	st.b	r7[-8],r8
  if (card_slot>MCI_LAST_SLOTS)
80009536:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000953a:	30 18       	mov	r8,1
8000953c:	f0 09 18 00 	cp.b	r9,r8
80009540:	e0 88 00 04 	brls	80009548 <mci_init+0x28>
    return MCI_INVALID_INPUT;
80009544:	30 18       	mov	r8,1
80009546:	c3 98       	rjmp	800095b8 <mci_init+0x98>

  // Initialize all bits of the shadow status register.
  shadow_sr=0;
80009548:	49 e8       	lddpc	r8,800095c0 <mci_init+0xa0>
8000954a:	30 09       	mov	r9,0
8000954c:	91 09       	st.w	r8[0x0],r9

  // Reset the MCI
  mci_reset(mci);
8000954e:	ee fc ff fc 	ld.w	r12,r7[-4]
80009552:	f0 1f 00 1d 	mcall	800095c4 <mci_init+0xa4>

  // Disable the MCI
  mci_disable(mci);
80009556:	ee fc ff fc 	ld.w	r12,r7[-4]
8000955a:	f0 1f 00 1c 	mcall	800095c8 <mci_init+0xa8>

  // Disable all the interrupts
  mci->idr = 0xffffffff;
8000955e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009562:	3f f9       	mov	r9,-1
80009564:	f1 49 00 48 	st.w	r8[72],r9

  // Setup configuration register
  mci->cfg = 0;
80009568:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000956c:	30 09       	mov	r9,0
8000956e:	f1 49 00 54 	st.w	r8[84],r9

  // Clear Mode register
  mci->mr = 0;
80009572:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009576:	30 09       	mov	r9,0
80009578:	91 19       	st.w	r8[0x4],r9

  // Set the Data Timeout Register to 1 Mega Cycles
  mci->dtor = (MCI_DEFAULT_DTOREG);
8000957a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000957e:	37 29       	mov	r9,114
80009580:	91 29       	st.w	r8[0x8],r9

  // Set the Mode Register
  mci_set_speed(mci, pbb_hz, MCI_DEFAULT_SPEED_HZ);
80009582:	e2 7a 0d 40 	mov	r10,200000
80009586:	ee fb ff f4 	ld.w	r11,r7[-12]
8000958a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000958e:	f0 1f 00 10 	mcall	800095cc <mci_init+0xac>
  mci->mr |= ((MCI_DEFAULT_PWSDIV<<AVR32_MCI_MR_PWSDIV) | AVR32_MCI_MR_RDPROOF_MASK | AVR32_MCI_MR_WRPROOF_MASK);
80009592:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009596:	70 18       	ld.w	r8,r8[0x4]
80009598:	10 99       	mov	r9,r8
8000959a:	e8 19 1f 00 	orl	r9,0x1f00
8000959e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800095a2:	91 19       	st.w	r8[0x4],r9

  // Set the SD/MMC Card Register
  mci->sdcr = (MCI_BUS_SIZE_1_BIT>>AVR32_MCI_SDCR_SDCBUS_OFFSET)|(card_slot>>AVR32_MCI_SDCR_SDCSEL_OFFSET);
800095a4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800095a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800095ac:	91 39       	st.w	r8[0xc],r9

  // Enable the MCI and the Power Saving
  mci_enable(mci);
800095ae:	ee fc ff fc 	ld.w	r12,r7[-4]
800095b2:	f0 1f 00 08 	mcall	800095d0 <mci_init+0xb0>

  return MCI_SUCCESS;
800095b6:	30 08       	mov	r8,0
}
800095b8:	10 9c       	mov	r12,r8
800095ba:	2f dd       	sub	sp,-12
800095bc:	e3 cd 80 80 	ldm	sp++,r7,pc
800095c0:	00 00       	add	r0,r0
800095c2:	07 b4       	ld.ub	r4,r3[0x3]
800095c4:	80 00       	ld.sh	r0,r0[0x0]
800095c6:	93 ec       	st.w	r9[0x38],r12
800095c8:	80 00       	ld.sh	r0,r0[0x0]
800095ca:	94 08       	ld.sh	r8,r10[0x0]
800095cc:	80 00       	ld.sh	r0,r0[0x0]
800095ce:	94 3c       	ld.sh	r12,r10[0x6]
800095d0:	80 00       	ld.sh	r0,r0[0x0]
800095d2:	94 22       	ld.sh	r2,r10[0x4]

800095d4 <mci_set_block_size>:

void mci_set_block_size(volatile avr32_mci_t *mci,
                        uint16_t length)
{
800095d4:	eb cd 40 80 	pushm	r7,lr
800095d8:	1a 97       	mov	r7,sp
800095da:	20 3d       	sub	sp,12
800095dc:	ef 4c ff f8 	st.w	r7[-8],r12
800095e0:	16 98       	mov	r8,r11
800095e2:	ef 58 ff f4 	st.h	r7[-12],r8
  uint32_t mci_mode_register;

  mci_mode_register = mci->mr;
800095e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095ea:	70 18       	ld.w	r8,r8[0x4]
800095ec:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register &= ~AVR32_MCI_MR_BLKLEN_MASK; // Clear previous BLKLEN
800095f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800095f4:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800095f8:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register |= (length<<AVR32_MCI_MR_BLKLEN_OFFSET); // Set the new value
800095fc:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80009600:	b1 68       	lsl	r8,0x10
80009602:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009606:	f3 e8 10 08 	or	r8,r9,r8
8000960a:	ef 48 ff fc 	st.w	r7[-4],r8

  mci->mr = mci_mode_register;
8000960e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009612:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009616:	91 19       	st.w	r8[0x4],r9
}
80009618:	2f dd       	sub	sp,-12
8000961a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000961e <mci_set_block_count>:

void mci_set_block_count(volatile avr32_mci_t *mci,
                         uint16_t cnt)
{
8000961e:	eb cd 40 80 	pushm	r7,lr
80009622:	1a 97       	mov	r7,sp
80009624:	20 3d       	sub	sp,12
80009626:	ef 4c ff f8 	st.w	r7[-8],r12
8000962a:	16 98       	mov	r8,r11
8000962c:	ef 58 ff f4 	st.h	r7[-12],r8
    uint32_t          blkr;
    avr32_mci_blkr_t  BLKR;
  };
  union u_blkr val;

  val.blkr = mci->blkr;
80009630:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009634:	70 68       	ld.w	r8,r8[0x18]
80009636:	ef 48 ff fc 	st.w	r7[-4],r8
  val.BLKR.bcnt = cnt;
8000963a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000963e:	ef 58 ff fe 	st.h	r7[-2],r8
  mci->blkr = val.blkr;
80009642:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009646:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000964a:	91 69       	st.w	r8[0x18],r9
}
8000964c:	2f dd       	sub	sp,-12
8000964e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009652:	d7 03       	nop

80009654 <mci_send_cmd>:

int mci_send_cmd(volatile avr32_mci_t *mci,
                 unsigned int cmd,
                 unsigned int arg)
{
80009654:	eb cd 40 80 	pushm	r7,lr
80009658:	1a 97       	mov	r7,sp
8000965a:	20 7d       	sub	sp,28
8000965c:	ef 4c ff ec 	st.w	r7[-20],r12
80009660:	ef 4b ff e8 	st.w	r7[-24],r11
80009664:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int	error;

  // Send the command
  mci->argr = arg;
80009668:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000966c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80009670:	91 49       	st.w	r8[0x10],r9
  mci->cmdr = cmd;
80009672:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009676:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000967a:	91 59       	st.w	r8[0x14],r9
8000967c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009680:	ef 48 ff f4 	st.w	r7[-12],r8
80009684:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009688:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
8000968c:	4a 78       	lddpc	r8,80009728 <mci_send_cmd+0xd4>
8000968e:	70 08       	ld.w	r8,r8[0x0]
80009690:	10 99       	mov	r9,r8
80009692:	e6 19 01 e0 	andh	r9,0x1e0,COH
80009696:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000969a:	71 08       	ld.w	r8,r8[0x40]
8000969c:	f3 e8 10 08 	or	r8,r9,r8
800096a0:	10 99       	mov	r9,r8
800096a2:	4a 28       	lddpc	r8,80009728 <mci_send_cmd+0xd4>
800096a4:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800096a6:	4a 18       	lddpc	r8,80009728 <mci_send_cmd+0xd4>
800096a8:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_cmd_ready(volatile avr32_mci_t *mci)
{
  return ((mci_get_sr(mci)&AVR32_MCI_SR_CMDRDY_MASK) != 0);
800096aa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // wait for CMDRDY Status flag to read the response
  while( !(mci_cmd_ready(mci)) );
800096ae:	ce 70       	breq	8000967c <mci_send_cmd+0x28>
800096b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800096b4:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800096b8:	49 c8       	lddpc	r8,80009728 <mci_send_cmd+0xd4>
800096ba:	70 08       	ld.w	r8,r8[0x0]
800096bc:	10 99       	mov	r9,r8
800096be:	e6 19 01 e0 	andh	r9,0x1e0,COH
800096c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800096c6:	71 08       	ld.w	r8,r8[0x40]
800096c8:	f3 e8 10 08 	or	r8,r9,r8
800096cc:	10 99       	mov	r9,r8
800096ce:	49 78       	lddpc	r8,80009728 <mci_send_cmd+0xd4>
800096d0:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800096d2:	49 68       	lddpc	r8,80009728 <mci_send_cmd+0xd4>
800096d4:	70 08       	ld.w	r8,r8[0x0]

  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
800096d6:	e6 18 c0 7f 	andh	r8,0xc07f,COH
800096da:	ef 48 ff f0 	st.w	r7[-16],r8
  if(error != 0 )
800096de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096e2:	58 08       	cp.w	r8,0
800096e4:	c1 d0       	breq	8000971e <mci_send_cmd+0xca>
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
800096e6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800096ea:	e0 48 00 69 	cp.w	r8,105
800096ee:	c0 f0       	breq	8000970c <mci_send_cmd+0xb8>
800096f0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800096f4:	e0 48 08 41 	cp.w	r8,2113
800096f8:	c0 a0       	breq	8000970c <mci_send_cmd+0xb8>
    {
      if( error != AVR32_MCI_SR_RTOE_MASK )
800096fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096fe:	fc 19 00 10 	movh	r9,0x10
80009702:	12 38       	cp.w	r8,r9
80009704:	c0 c0       	breq	8000971c <mci_send_cmd+0xc8>
        // filter RTOE error which happens when using the HS mode
        return error;
80009706:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000970a:	c0 b8       	rjmp	80009720 <mci_send_cmd+0xcc>
    }
    else
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
8000970c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009710:	e4 48 00 00 	cp.w	r8,262144
80009714:	c0 50       	breq	8000971e <mci_send_cmd+0xca>
        return error;
80009716:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000971a:	c0 38       	rjmp	80009720 <mci_send_cmd+0xcc>
  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
  if(error != 0 )
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
8000971c:	d7 03       	nop
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
        return error;
    }
  }
  return MCI_SUCCESS;
8000971e:	30 08       	mov	r8,0

}
80009720:	10 9c       	mov	r12,r8
80009722:	2f 9d       	sub	sp,-28
80009724:	e3 cd 80 80 	ldm	sp++,r7,pc
80009728:	00 00       	add	r0,r0
8000972a:	07 b4       	ld.ub	r4,r3[0x3]

8000972c <mci_set_bus_size>:

int mci_set_bus_size(volatile avr32_mci_t *mci,
                     uint8_t busWidth)
{
8000972c:	eb cd 40 80 	pushm	r7,lr
80009730:	1a 97       	mov	r7,sp
80009732:	20 3d       	sub	sp,12
80009734:	ef 4c ff f8 	st.w	r7[-8],r12
80009738:	16 98       	mov	r8,r11
8000973a:	ef 68 ff f4 	st.b	r7[-12],r8
  uint32_t mci_sdcr_register;

  if (busWidth > MCI_BUS_SIZE_8_BIT)
8000973e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009742:	30 38       	mov	r8,3
80009744:	f0 09 18 00 	cp.b	r9,r8
80009748:	e0 88 00 04 	brls	80009750 <mci_set_bus_size+0x24>
    return MCI_INVALID_INPUT;
8000974c:	30 18       	mov	r8,1
8000974e:	c1 b8       	rjmp	80009784 <mci_set_bus_size+0x58>

  mci_sdcr_register = mci->sdcr;
80009750:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009754:	70 38       	ld.w	r8,r8[0xc]
80009756:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register &= ~AVR32_MCI_SDCR_SDCBUS_MASK; // Clear previous buswidth
8000975a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000975e:	e0 18 ff 3f 	andl	r8,0xff3f
80009762:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register |= (busWidth<<AVR32_MCI_SDCR_SDCBUS_OFFSET);
80009766:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000976a:	a7 68       	lsl	r8,0x6
8000976c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009770:	f3 e8 10 08 	or	r8,r9,r8
80009774:	ef 48 ff fc 	st.w	r7[-4],r8
  mci->sdcr = mci_sdcr_register;
80009778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000977c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009780:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
80009782:	30 08       	mov	r8,0
}
80009784:	10 9c       	mov	r12,r8
80009786:	2f dd       	sub	sp,-12
80009788:	e3 cd 80 80 	ldm	sp++,r7,pc

8000978c <mci_read_response>:


unsigned int mci_read_response(volatile avr32_mci_t *mci)
{
8000978c:	eb cd 40 80 	pushm	r7,lr
80009790:	1a 97       	mov	r7,sp
80009792:	20 1d       	sub	sp,4
80009794:	ef 4c ff fc 	st.w	r7[-4],r12
  return mci->rspr0;
80009798:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000979c:	70 88       	ld.w	r8,r8[0x20]
}
8000979e:	10 9c       	mov	r12,r8
800097a0:	2f fd       	sub	sp,-4
800097a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800097a6:	d7 03       	nop

800097a8 <mci_wait_busy_signal>:

void mci_wait_busy_signal(volatile avr32_mci_t *mci)
{
800097a8:	eb cd 40 80 	pushm	r7,lr
800097ac:	1a 97       	mov	r7,sp
800097ae:	20 2d       	sub	sp,8
800097b0:	ef 4c ff f8 	st.w	r7[-8],r12
800097b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097b8:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800097bc:	48 b8       	lddpc	r8,800097e8 <mci_wait_busy_signal+0x40>
800097be:	70 08       	ld.w	r8,r8[0x0]
800097c0:	10 99       	mov	r9,r8
800097c2:	e6 19 01 e0 	andh	r9,0x1e0,COH
800097c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800097ca:	71 08       	ld.w	r8,r8[0x40]
800097cc:	f3 e8 10 08 	or	r8,r9,r8
800097d0:	10 99       	mov	r9,r8
800097d2:	48 68       	lddpc	r8,800097e8 <mci_wait_busy_signal+0x40>
800097d4:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800097d6:	48 58       	lddpc	r8,800097e8 <mci_wait_busy_signal+0x40>
800097d8:	70 08       	ld.w	r8,r8[0x0]
  while(!(mci_get_sr(mci)&AVR32_MCI_SR_NOTBUSY_MASK));
800097da:	e2 18 00 20 	andl	r8,0x20,COH
800097de:	ce b0       	breq	800097b4 <mci_wait_busy_signal+0xc>
}
800097e0:	2f ed       	sub	sp,-8
800097e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800097e6:	00 00       	add	r0,r0
800097e8:	00 00       	add	r0,r0
800097ea:	07 b4       	ld.ub	r4,r3[0x3]

800097ec <mci_select_card>:

int mci_select_card(volatile avr32_mci_t *mci,
                    uint8_t card_slot,
                    uint8_t bus_width)
{
800097ec:	eb cd 40 80 	pushm	r7,lr
800097f0:	1a 97       	mov	r7,sp
800097f2:	20 3d       	sub	sp,12
800097f4:	ef 4c ff fc 	st.w	r7[-4],r12
800097f8:	16 99       	mov	r9,r11
800097fa:	14 98       	mov	r8,r10
800097fc:	ef 69 ff f8 	st.b	r7[-8],r9
80009800:	ef 68 ff f4 	st.b	r7[-12],r8
  if (card_slot > MCI_LAST_SLOTS)
80009804:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009808:	30 18       	mov	r8,1
8000980a:	f0 09 18 00 	cp.b	r9,r8
8000980e:	e0 88 00 04 	brls	80009816 <mci_select_card+0x2a>
    return MCI_INVALID_INPUT;
80009812:	30 18       	mov	r8,1
80009814:	c0 e8       	rjmp	80009830 <mci_select_card+0x44>

  // Select the card slot and bus width
  mci->sdcr = (bus_width<<AVR32_MCI_SDCR_SDCBUS_OFFSET) | (card_slot<<AVR32_MCI_SDCR_SDCSEL_OFFSET);
80009816:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000981a:	f0 09 15 06 	lsl	r9,r8,0x6
8000981e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009822:	f3 e8 10 08 	or	r8,r9,r8
80009826:	10 99       	mov	r9,r8
80009828:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000982c:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
8000982e:	30 08       	mov	r8,0
}
80009830:	10 9c       	mov	r12,r8
80009832:	2f dd       	sub	sp,-12
80009834:	e3 cd 80 80 	ldm	sp++,r7,pc

80009838 <cpu_irq_is_enabled_flags>:
80009838:	eb cd 40 80 	pushm	r7,lr
8000983c:	1a 97       	mov	r7,sp
8000983e:	20 1d       	sub	sp,4
80009840:	ef 4c ff fc 	st.w	r7[-4],r12
80009844:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009848:	e6 18 00 01 	andh	r8,0x1,COH
8000984c:	5f 08       	sreq	r8
8000984e:	5c 58       	castu.b	r8
80009850:	10 9c       	mov	r12,r8
80009852:	2f fd       	sub	sp,-4
80009854:	e3 cd 80 80 	ldm	sp++,r7,pc

80009858 <tc_configure_interrupts>:
80009858:	eb cd 40 80 	pushm	r7,lr
8000985c:	1a 97       	mov	r7,sp
8000985e:	20 4d       	sub	sp,16
80009860:	ef 4c ff f8 	st.w	r7[-8],r12
80009864:	ef 4b ff f4 	st.w	r7[-12],r11
80009868:	ef 4a ff f0 	st.w	r7[-16],r10
8000986c:	e1 b8 00 00 	mfsr	r8,0x0
80009870:	10 9c       	mov	r12,r8
80009872:	f0 1f 00 73 	mcall	80009a3c <tc_configure_interrupts+0x1e4>
80009876:	18 98       	mov	r8,r12
80009878:	ef 68 ff ff 	st.b	r7[-1],r8
8000987c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009880:	58 28       	cp.w	r8,2
80009882:	e0 88 00 04 	brls	8000988a <tc_configure_interrupts+0x32>
80009886:	3f f8       	mov	r8,-1
80009888:	cd 68       	rjmp	80009a34 <tc_configure_interrupts+0x1dc>
8000988a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000988e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009892:	70 08       	ld.w	r8,r8[0x0]
80009894:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80009898:	5c 58       	castu.b	r8
8000989a:	f0 09 15 07 	lsl	r9,r8,0x7
8000989e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800098a2:	70 08       	ld.w	r8,r8[0x0]
800098a4:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800098a8:	5c 58       	castu.b	r8
800098aa:	a7 68       	lsl	r8,0x6
800098ac:	10 49       	or	r9,r8
800098ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800098b2:	70 08       	ld.w	r8,r8[0x0]
800098b4:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800098b8:	5c 58       	castu.b	r8
800098ba:	a5 78       	lsl	r8,0x5
800098bc:	10 49       	or	r9,r8
800098be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800098c2:	70 08       	ld.w	r8,r8[0x0]
800098c4:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
800098c8:	5c 58       	castu.b	r8
800098ca:	a5 68       	lsl	r8,0x4
800098cc:	10 49       	or	r9,r8
800098ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800098d2:	70 08       	ld.w	r8,r8[0x0]
800098d4:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800098d8:	5c 58       	castu.b	r8
800098da:	a3 78       	lsl	r8,0x3
800098dc:	10 49       	or	r9,r8
800098de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800098e2:	70 08       	ld.w	r8,r8[0x0]
800098e4:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800098e8:	5c 58       	castu.b	r8
800098ea:	a3 68       	lsl	r8,0x2
800098ec:	10 49       	or	r9,r8
800098ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800098f2:	70 08       	ld.w	r8,r8[0x0]
800098f4:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800098f8:	5c 58       	castu.b	r8
800098fa:	a1 78       	lsl	r8,0x1
800098fc:	10 49       	or	r9,r8
800098fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009902:	70 08       	ld.w	r8,r8[0x0]
80009904:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009908:	5c 58       	castu.b	r8
8000990a:	f3 e8 10 08 	or	r8,r9,r8
8000990e:	10 99       	mov	r9,r8
80009910:	ee fa ff f8 	ld.w	r10,r7[-8]
80009914:	f6 08 15 06 	lsl	r8,r11,0x6
80009918:	f4 08 00 08 	add	r8,r10,r8
8000991c:	2d c8       	sub	r8,-36
8000991e:	91 09       	st.w	r8[0x0],r9
80009920:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009924:	30 08       	mov	r8,0
80009926:	f0 09 18 00 	cp.b	r9,r8
8000992a:	c0 20       	breq	8000992e <tc_configure_interrupts+0xd6>
8000992c:	d3 03       	ssrf	0x10
8000992e:	ee fb ff f4 	ld.w	r11,r7[-12]
80009932:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009936:	70 08       	ld.w	r8,r8[0x0]
80009938:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
8000993c:	5c 58       	castu.b	r8
8000993e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009942:	c0 41       	brne	8000994a <tc_configure_interrupts+0xf2>
80009944:	e0 69 00 80 	mov	r9,128
80009948:	c0 28       	rjmp	8000994c <tc_configure_interrupts+0xf4>
8000994a:	30 09       	mov	r9,0
8000994c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009950:	70 08       	ld.w	r8,r8[0x0]
80009952:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80009956:	5c 58       	castu.b	r8
80009958:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000995c:	c0 31       	brne	80009962 <tc_configure_interrupts+0x10a>
8000995e:	34 08       	mov	r8,64
80009960:	c0 28       	rjmp	80009964 <tc_configure_interrupts+0x10c>
80009962:	30 08       	mov	r8,0
80009964:	10 49       	or	r9,r8
80009966:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000996a:	70 08       	ld.w	r8,r8[0x0]
8000996c:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80009970:	5c 58       	castu.b	r8
80009972:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009976:	c0 31       	brne	8000997c <tc_configure_interrupts+0x124>
80009978:	32 08       	mov	r8,32
8000997a:	c0 28       	rjmp	8000997e <tc_configure_interrupts+0x126>
8000997c:	30 08       	mov	r8,0
8000997e:	10 49       	or	r9,r8
80009980:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009984:	70 08       	ld.w	r8,r8[0x0]
80009986:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
8000998a:	5c 58       	castu.b	r8
8000998c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009990:	c0 31       	brne	80009996 <tc_configure_interrupts+0x13e>
80009992:	31 08       	mov	r8,16
80009994:	c0 28       	rjmp	80009998 <tc_configure_interrupts+0x140>
80009996:	30 08       	mov	r8,0
80009998:	10 49       	or	r9,r8
8000999a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000999e:	70 08       	ld.w	r8,r8[0x0]
800099a0:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800099a4:	5c 58       	castu.b	r8
800099a6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800099aa:	c0 31       	brne	800099b0 <tc_configure_interrupts+0x158>
800099ac:	30 88       	mov	r8,8
800099ae:	c0 28       	rjmp	800099b2 <tc_configure_interrupts+0x15a>
800099b0:	30 08       	mov	r8,0
800099b2:	10 49       	or	r9,r8
800099b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800099b8:	70 08       	ld.w	r8,r8[0x0]
800099ba:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800099be:	5c 58       	castu.b	r8
800099c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800099c4:	c0 31       	brne	800099ca <tc_configure_interrupts+0x172>
800099c6:	30 48       	mov	r8,4
800099c8:	c0 28       	rjmp	800099cc <tc_configure_interrupts+0x174>
800099ca:	30 08       	mov	r8,0
800099cc:	10 49       	or	r9,r8
800099ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800099d2:	70 08       	ld.w	r8,r8[0x0]
800099d4:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800099d8:	5c 58       	castu.b	r8
800099da:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800099de:	c0 31       	brne	800099e4 <tc_configure_interrupts+0x18c>
800099e0:	30 28       	mov	r8,2
800099e2:	c0 28       	rjmp	800099e6 <tc_configure_interrupts+0x18e>
800099e4:	30 08       	mov	r8,0
800099e6:	10 49       	or	r9,r8
800099e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800099ec:	70 08       	ld.w	r8,r8[0x0]
800099ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800099f2:	5c 58       	castu.b	r8
800099f4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800099f8:	5f 08       	sreq	r8
800099fa:	f3 e8 10 08 	or	r8,r9,r8
800099fe:	10 99       	mov	r9,r8
80009a00:	ee fa ff f8 	ld.w	r10,r7[-8]
80009a04:	f6 08 15 06 	lsl	r8,r11,0x6
80009a08:	f4 08 00 08 	add	r8,r10,r8
80009a0c:	2d 88       	sub	r8,-40
80009a0e:	91 09       	st.w	r8[0x0],r9
80009a10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009a14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009a18:	a1 78       	lsl	r8,0x1
80009a1a:	2f f8       	sub	r8,-1
80009a1c:	a5 78       	lsl	r8,0x5
80009a1e:	f2 08 00 08 	add	r8,r9,r8
80009a22:	70 08       	ld.w	r8,r8[0x0]
80009a24:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009a28:	30 08       	mov	r8,0
80009a2a:	f0 09 18 00 	cp.b	r9,r8
80009a2e:	c0 20       	breq	80009a32 <tc_configure_interrupts+0x1da>
80009a30:	d5 03       	csrf	0x10
80009a32:	30 08       	mov	r8,0
80009a34:	10 9c       	mov	r12,r8
80009a36:	2f cd       	sub	sp,-16
80009a38:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a3c:	80 00       	ld.sh	r0,r0[0x0]
80009a3e:	98 38       	ld.sh	r8,r12[0x6]

80009a40 <tc_init_waveform>:
80009a40:	eb cd 40 80 	pushm	r7,lr
80009a44:	1a 97       	mov	r7,sp
80009a46:	20 2d       	sub	sp,8
80009a48:	ef 4c ff fc 	st.w	r7[-4],r12
80009a4c:	ef 4b ff f8 	st.w	r7[-8],r11
80009a50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a54:	70 08       	ld.w	r8,r8[0x0]
80009a56:	58 28       	cp.w	r8,2
80009a58:	e0 88 00 04 	brls	80009a60 <tc_init_waveform+0x20>
80009a5c:	3f f8       	mov	r8,-1
80009a5e:	c9 78       	rjmp	80009b8c <tc_init_waveform+0x14c>
80009a60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a64:	70 09       	ld.w	r9,r8[0x0]
80009a66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a6a:	70 18       	ld.w	r8,r8[0x4]
80009a6c:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
80009a70:	5c 58       	castu.b	r8
80009a72:	f0 0a 15 1e 	lsl	r10,r8,0x1e
80009a76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a7a:	70 18       	ld.w	r8,r8[0x4]
80009a7c:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
80009a80:	5c 58       	castu.b	r8
80009a82:	bd 68       	lsl	r8,0x1c
80009a84:	10 4a       	or	r10,r8
80009a86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a8a:	70 18       	ld.w	r8,r8[0x4]
80009a8c:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
80009a90:	5c 58       	castu.b	r8
80009a92:	bb 68       	lsl	r8,0x1a
80009a94:	10 4a       	or	r10,r8
80009a96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a9a:	70 18       	ld.w	r8,r8[0x4]
80009a9c:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
80009aa0:	5c 58       	castu.b	r8
80009aa2:	b9 68       	lsl	r8,0x18
80009aa4:	10 4a       	or	r10,r8
80009aa6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009aaa:	70 18       	ld.w	r8,r8[0x4]
80009aac:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
80009ab0:	5c 58       	castu.b	r8
80009ab2:	b7 68       	lsl	r8,0x16
80009ab4:	10 4a       	or	r10,r8
80009ab6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009aba:	70 18       	ld.w	r8,r8[0x4]
80009abc:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
80009ac0:	5c 58       	castu.b	r8
80009ac2:	b5 68       	lsl	r8,0x14
80009ac4:	10 4a       	or	r10,r8
80009ac6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009aca:	70 18       	ld.w	r8,r8[0x4]
80009acc:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
80009ad0:	5c 58       	castu.b	r8
80009ad2:	b3 68       	lsl	r8,0x12
80009ad4:	10 4a       	or	r10,r8
80009ad6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009ada:	70 18       	ld.w	r8,r8[0x4]
80009adc:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80009ae0:	5c 58       	castu.b	r8
80009ae2:	b1 68       	lsl	r8,0x10
80009ae4:	f5 e8 10 08 	or	r8,r10,r8
80009ae8:	10 9a       	mov	r10,r8
80009aea:	af ba       	sbr	r10,0xf
80009aec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009af0:	70 18       	ld.w	r8,r8[0x4]
80009af2:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
80009af6:	5c 58       	castu.b	r8
80009af8:	ad 78       	lsl	r8,0xd
80009afa:	10 4a       	or	r10,r8
80009afc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b00:	70 18       	ld.w	r8,r8[0x4]
80009b02:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
80009b06:	5c 58       	castu.b	r8
80009b08:	ad 68       	lsl	r8,0xc
80009b0a:	10 4a       	or	r10,r8
80009b0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b10:	70 18       	ld.w	r8,r8[0x4]
80009b12:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
80009b16:	5c 58       	castu.b	r8
80009b18:	ab 68       	lsl	r8,0xa
80009b1a:	10 4a       	or	r10,r8
80009b1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b20:	70 18       	ld.w	r8,r8[0x4]
80009b22:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
80009b26:	5c 58       	castu.b	r8
80009b28:	a9 68       	lsl	r8,0x8
80009b2a:	10 4a       	or	r10,r8
80009b2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b30:	70 18       	ld.w	r8,r8[0x4]
80009b32:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80009b36:	5c 58       	castu.b	r8
80009b38:	a7 78       	lsl	r8,0x7
80009b3a:	10 4a       	or	r10,r8
80009b3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b40:	70 18       	ld.w	r8,r8[0x4]
80009b42:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80009b46:	5c 58       	castu.b	r8
80009b48:	a7 68       	lsl	r8,0x6
80009b4a:	10 4a       	or	r10,r8
80009b4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b50:	70 18       	ld.w	r8,r8[0x4]
80009b52:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
80009b56:	5c 58       	castu.b	r8
80009b58:	a5 68       	lsl	r8,0x4
80009b5a:	10 4a       	or	r10,r8
80009b5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b60:	70 18       	ld.w	r8,r8[0x4]
80009b62:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80009b66:	5c 58       	castu.b	r8
80009b68:	a3 78       	lsl	r8,0x3
80009b6a:	10 4a       	or	r10,r8
80009b6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b70:	70 18       	ld.w	r8,r8[0x4]
80009b72:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80009b76:	5c 58       	castu.b	r8
80009b78:	f5 e8 10 08 	or	r8,r10,r8
80009b7c:	10 9a       	mov	r10,r8
80009b7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009b82:	a5 69       	lsl	r9,0x4
80009b84:	2f f9       	sub	r9,-1
80009b86:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80009b8a:	30 08       	mov	r8,0
80009b8c:	10 9c       	mov	r12,r8
80009b8e:	2f ed       	sub	sp,-8
80009b90:	e3 cd 80 80 	ldm	sp++,r7,pc

80009b94 <tc_start>:
80009b94:	eb cd 40 80 	pushm	r7,lr
80009b98:	1a 97       	mov	r7,sp
80009b9a:	20 2d       	sub	sp,8
80009b9c:	ef 4c ff fc 	st.w	r7[-4],r12
80009ba0:	ef 4b ff f8 	st.w	r7[-8],r11
80009ba4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009ba8:	58 28       	cp.w	r8,2
80009baa:	e0 88 00 04 	brls	80009bb2 <tc_start+0x1e>
80009bae:	3f f8       	mov	r8,-1
80009bb0:	c0 b8       	rjmp	80009bc6 <tc_start+0x32>
80009bb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009bb6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009bba:	a7 68       	lsl	r8,0x6
80009bbc:	f2 08 00 08 	add	r8,r9,r8
80009bc0:	30 59       	mov	r9,5
80009bc2:	91 09       	st.w	r8[0x0],r9
80009bc4:	30 08       	mov	r8,0
80009bc6:	10 9c       	mov	r12,r8
80009bc8:	2f ed       	sub	sp,-8
80009bca:	e3 cd 80 80 	ldm	sp++,r7,pc

80009bce <tc_read_sr>:
80009bce:	eb cd 40 80 	pushm	r7,lr
80009bd2:	1a 97       	mov	r7,sp
80009bd4:	20 2d       	sub	sp,8
80009bd6:	ef 4c ff fc 	st.w	r7[-4],r12
80009bda:	ef 4b ff f8 	st.w	r7[-8],r11
80009bde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009be2:	58 28       	cp.w	r8,2
80009be4:	e0 88 00 04 	brls	80009bec <tc_read_sr+0x1e>
80009be8:	3f f8       	mov	r8,-1
80009bea:	c0 b8       	rjmp	80009c00 <tc_read_sr+0x32>
80009bec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009bf0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009bf4:	a1 78       	lsl	r8,0x1
80009bf6:	2f f8       	sub	r8,-1
80009bf8:	a5 78       	lsl	r8,0x5
80009bfa:	f2 08 00 08 	add	r8,r9,r8
80009bfe:	70 08       	ld.w	r8,r8[0x0]
80009c00:	10 9c       	mov	r12,r8
80009c02:	2f ed       	sub	sp,-8
80009c04:	e3 cd 80 80 	ldm	sp++,r7,pc

80009c08 <tc_write_rc>:
80009c08:	eb cd 40 80 	pushm	r7,lr
80009c0c:	1a 97       	mov	r7,sp
80009c0e:	20 3d       	sub	sp,12
80009c10:	ef 4c ff fc 	st.w	r7[-4],r12
80009c14:	ef 4b ff f8 	st.w	r7[-8],r11
80009c18:	14 98       	mov	r8,r10
80009c1a:	ef 58 ff f4 	st.h	r7[-12],r8
80009c1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009c22:	58 28       	cp.w	r8,2
80009c24:	e0 88 00 04 	brls	80009c2c <tc_write_rc+0x24>
80009c28:	3f f8       	mov	r8,-1
80009c2a:	c2 78       	rjmp	80009c78 <tc_write_rc+0x70>
80009c2c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009c30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009c34:	a5 69       	lsl	r9,0x4
80009c36:	2f f9       	sub	r9,-1
80009c38:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80009c3c:	e2 18 80 00 	andl	r8,0x8000,COH
80009c40:	c1 a0       	breq	80009c74 <tc_write_rc+0x6c>
80009c42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009c46:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009c4a:	ee fa ff fc 	ld.w	r10,r7[-4]
80009c4e:	a7 69       	lsl	r9,0x6
80009c50:	f4 09 00 09 	add	r9,r10,r9
80009c54:	2e 49       	sub	r9,-28
80009c56:	72 09       	ld.w	r9,r9[0x0]
80009c58:	12 9a       	mov	r10,r9
80009c5a:	e0 1a 00 00 	andl	r10,0x0
80009c5e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80009c62:	f5 e9 10 09 	or	r9,r10,r9
80009c66:	ee fa ff fc 	ld.w	r10,r7[-4]
80009c6a:	a7 68       	lsl	r8,0x6
80009c6c:	f4 08 00 08 	add	r8,r10,r8
80009c70:	2e 48       	sub	r8,-28
80009c72:	91 09       	st.w	r8[0x0],r9
80009c74:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80009c78:	10 9c       	mov	r12,r8
80009c7a:	2f dd       	sub	sp,-12
80009c7c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009c80 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80009c80:	eb cd 40 80 	pushm	r7,lr
80009c84:	1a 97       	mov	r7,sp
80009c86:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80009c88:	e1 b8 00 00 	mfsr	r8,0x0
80009c8c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80009c90:	d3 03       	ssrf	0x10

	return flags;
80009c92:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80009c96:	10 9c       	mov	r12,r8
80009c98:	2f fd       	sub	sp,-4
80009c9a:	e3 cd 80 80 	ldm	sp++,r7,pc

80009c9e <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
80009c9e:	eb cd 40 80 	pushm	r7,lr
80009ca2:	1a 97       	mov	r7,sp
80009ca4:	20 1d       	sub	sp,4
80009ca6:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80009caa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009cae:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80009cb2:	2f fd       	sub	sp,-4
80009cb4:	e3 cd 80 80 	ldm	sp++,r7,pc

80009cb8 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
80009cb8:	eb cd 40 80 	pushm	r7,lr
80009cbc:	1a 97       	mov	r7,sp
80009cbe:	20 2d       	sub	sp,8
80009cc0:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
80009cc4:	f0 1f 00 0b 	mcall	80009cf0 <sleepmgr_lock_mode+0x38>
80009cc8:	18 98       	mov	r8,r12
80009cca:	ef 48 ff fc 	st.w	r7[-4],r8

	++sleepmgr_locks[mode];
80009cce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009cd2:	48 99       	lddpc	r9,80009cf4 <sleepmgr_lock_mode+0x3c>
80009cd4:	f2 08 07 09 	ld.ub	r9,r9[r8]
80009cd8:	2f f9       	sub	r9,-1
80009cda:	5c 59       	castu.b	r9
80009cdc:	48 6a       	lddpc	r10,80009cf4 <sleepmgr_lock_mode+0x3c>
80009cde:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
80009ce2:	ee fc ff fc 	ld.w	r12,r7[-4]
80009ce6:	f0 1f 00 05 	mcall	80009cf8 <sleepmgr_lock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
80009cea:	2f ed       	sub	sp,-8
80009cec:	e3 cd 80 80 	ldm	sp++,r7,pc
80009cf0:	80 00       	ld.sh	r0,r0[0x0]
80009cf2:	9c 80       	ld.uh	r0,lr[0x0]
80009cf4:	00 00       	add	r0,r0
80009cf6:	10 24       	rsub	r4,r8
80009cf8:	80 00       	ld.sh	r0,r0[0x0]
80009cfa:	9c 9e       	ld.uh	lr,lr[0x2]

80009cfc <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
80009cfc:	eb cd 40 80 	pushm	r7,lr
80009d00:	1a 97       	mov	r7,sp
80009d02:	20 2d       	sub	sp,8
80009d04:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();
80009d08:	f0 1f 00 0b 	mcall	80009d34 <sleepmgr_unlock_mode+0x38>
80009d0c:	18 98       	mov	r8,r12
80009d0e:	ef 48 ff fc 	st.w	r7[-4],r8

	--sleepmgr_locks[mode];
80009d12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009d16:	48 99       	lddpc	r9,80009d38 <sleepmgr_unlock_mode+0x3c>
80009d18:	f2 08 07 09 	ld.ub	r9,r9[r8]
80009d1c:	20 19       	sub	r9,1
80009d1e:	5c 59       	castu.b	r9
80009d20:	48 6a       	lddpc	r10,80009d38 <sleepmgr_unlock_mode+0x3c>
80009d22:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
80009d26:	ee fc ff fc 	ld.w	r12,r7[-4]
80009d2a:	f0 1f 00 05 	mcall	80009d3c <sleepmgr_unlock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
80009d2e:	2f ed       	sub	sp,-8
80009d30:	e3 cd 80 80 	ldm	sp++,r7,pc
80009d34:	80 00       	ld.sh	r0,r0[0x0]
80009d36:	9c 80       	ld.uh	r0,lr[0x0]
80009d38:	00 00       	add	r0,r0
80009d3a:	10 24       	rsub	r4,r8
80009d3c:	80 00       	ld.sh	r0,r0[0x0]
80009d3e:	9c 9e       	ld.uh	lr,lr[0x2]

80009d40 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
80009d40:	eb cd 40 80 	pushm	r7,lr
80009d44:	1a 97       	mov	r7,sp
80009d46:	20 1d       	sub	sp,4
80009d48:	18 98       	mov	r8,r12
80009d4a:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!b_idle && udd_b_idle) {
80009d4e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009d52:	ec 18 00 01 	eorl	r8,0x1
80009d56:	5c 58       	castu.b	r8
80009d58:	c0 80       	breq	80009d68 <udd_sleep_mode+0x28>
80009d5a:	48 f8       	lddpc	r8,80009d94 <udd_sleep_mode+0x54>
80009d5c:	11 88       	ld.ub	r8,r8[0x0]
80009d5e:	58 08       	cp.w	r8,0
80009d60:	c0 40       	breq	80009d68 <udd_sleep_mode+0x28>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
80009d62:	30 1c       	mov	r12,1
80009d64:	f0 1f 00 0d 	mcall	80009d98 <udd_sleep_mode+0x58>
	}
	if (b_idle && !udd_b_idle) {
80009d68:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009d6c:	30 08       	mov	r8,0
80009d6e:	f0 09 18 00 	cp.b	r9,r8
80009d72:	c0 a0       	breq	80009d86 <udd_sleep_mode+0x46>
80009d74:	48 88       	lddpc	r8,80009d94 <udd_sleep_mode+0x54>
80009d76:	11 88       	ld.ub	r8,r8[0x0]
80009d78:	ec 18 00 01 	eorl	r8,0x1
80009d7c:	5c 58       	castu.b	r8
80009d7e:	c0 40       	breq	80009d86 <udd_sleep_mode+0x46>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
80009d80:	30 1c       	mov	r12,1
80009d82:	f0 1f 00 07 	mcall	80009d9c <udd_sleep_mode+0x5c>
	}
	udd_b_idle = b_idle;
80009d86:	48 49       	lddpc	r9,80009d94 <udd_sleep_mode+0x54>
80009d88:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009d8c:	b2 88       	st.b	r9[0x0],r8
}
80009d8e:	2f fd       	sub	sp,-4
80009d90:	e3 cd 80 80 	ldm	sp++,r7,pc
80009d94:	00 00       	add	r0,r0
80009d96:	07 b8       	ld.ub	r8,r3[0x3]
80009d98:	80 00       	ld.sh	r0,r0[0x0]
80009d9a:	9c fc       	ld.uh	r12,lr[0xe]
80009d9c:	80 00       	ld.sh	r0,r0[0x0]
80009d9e:	9c b8       	ld.uh	r8,lr[0x6]

80009da0 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
80009da0:	eb cd 40 80 	pushm	r7,lr
80009da4:	1a 97       	mov	r7,sp
	if (Is_udd_sof()) {
80009da6:	fe 68 00 04 	mov	r8,-131068
80009daa:	70 08       	ld.w	r8,r8[0x0]
80009dac:	e2 18 00 04 	andl	r8,0x4,COH
80009db0:	c1 10       	breq	80009dd2 <udd_interrupt+0x32>
		udd_ack_sof();
80009db2:	fe 68 00 08 	mov	r8,-131064
80009db6:	30 49       	mov	r9,4
80009db8:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
80009dba:	fe 68 08 04 	mov	r8,-129020
80009dbe:	70 08       	ld.w	r8,r8[0x0]
80009dc0:	e2 18 30 00 	andl	r8,0x3000,COH
80009dc4:	ad 88       	lsr	r8,0xc
80009dc6:	c0 31       	brne	80009dcc <udd_interrupt+0x2c>
			udc_sof_notify();
80009dc8:	f0 1f 00 54 	mcall	80009f18 <udd_interrupt+0x178>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
80009dcc:	f0 1f 00 54 	mcall	80009f1c <udd_interrupt+0x17c>
#endif
		goto udd_interrupt_end;
80009dd0:	c9 d8       	rjmp	80009f0a <udd_interrupt+0x16a>
	}
	if (Is_udd_msof()) {
80009dd2:	fe 68 00 04 	mov	r8,-131068
80009dd6:	70 08       	ld.w	r8,r8[0x0]
80009dd8:	e2 18 00 02 	andl	r8,0x2,COH
80009ddc:	c0 80       	breq	80009dec <udd_interrupt+0x4c>
		udd_ack_msof();
80009dde:	fe 68 00 08 	mov	r8,-131064
80009de2:	30 29       	mov	r9,2
80009de4:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80009de6:	f0 1f 00 4d 	mcall	80009f18 <udd_interrupt+0x178>
		goto udd_interrupt_end;
80009dea:	c9 08       	rjmp	80009f0a <udd_interrupt+0x16a>
	}

	if (udd_ctrl_interrupt())
80009dec:	f0 1f 00 4d 	mcall	80009f20 <udd_interrupt+0x180>
80009df0:	18 98       	mov	r8,r12
80009df2:	58 08       	cp.w	r8,0
80009df4:	e0 81 00 88 	brne	80009f04 <udd_interrupt+0x164>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
80009df8:	f0 1f 00 4b 	mcall	80009f24 <udd_interrupt+0x184>
80009dfc:	18 98       	mov	r8,r12
80009dfe:	58 08       	cp.w	r8,0
80009e00:	e0 81 00 84 	brne	80009f08 <udd_interrupt+0x168>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80009e04:	fe 68 00 04 	mov	r8,-131068
80009e08:	70 08       	ld.w	r8,r8[0x0]
80009e0a:	e2 18 00 08 	andl	r8,0x8,COH
80009e0e:	c0 e0       	breq	80009e2a <udd_interrupt+0x8a>
		udd_ack_reset();
80009e10:	fe 68 00 08 	mov	r8,-131064
80009e14:	30 89       	mov	r9,8
80009e16:	91 09       	st.w	r8[0x0],r9
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
80009e18:	f0 1f 00 44 	mcall	80009f28 <udd_interrupt+0x188>
#endif
		// Reset USB Device Stack Core
		udc_reset();
80009e1c:	f0 1f 00 44 	mcall	80009f2c <udd_interrupt+0x18c>
		// Reset endpoint control
		udd_reset_ep_ctrl();
80009e20:	f0 1f 00 44 	mcall	80009f30 <udd_interrupt+0x190>
		// Reset endpoint control management
		udd_ctrl_init();
80009e24:	f0 1f 00 44 	mcall	80009f34 <udd_interrupt+0x194>
		goto udd_interrupt_end;
80009e28:	c7 18       	rjmp	80009f0a <udd_interrupt+0x16a>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80009e2a:	fe 68 00 10 	mov	r8,-131056
80009e2e:	70 08       	ld.w	r8,r8[0x0]
80009e30:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009e34:	5c 58       	castu.b	r8
80009e36:	c2 40       	breq	80009e7e <udd_interrupt+0xde>
80009e38:	fe 68 00 04 	mov	r8,-131068
80009e3c:	70 08       	ld.w	r8,r8[0x0]
80009e3e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009e42:	5c 58       	castu.b	r8
80009e44:	c1 d0       	breq	80009e7e <udd_interrupt+0xde>
		otg_unfreeze_clock();
80009e46:	fe 68 08 00 	mov	r8,-129024
80009e4a:	fe 69 08 00 	mov	r9,-129024
80009e4e:	72 09       	ld.w	r9,r9[0x0]
80009e50:	af c9       	cbr	r9,0xe
80009e52:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80009e54:	fe 68 00 14 	mov	r8,-131052
80009e58:	30 19       	mov	r9,1
80009e5a:	91 09       	st.w	r8[0x0],r9
		udd_enable_wake_up_interrupt();
80009e5c:	fe 68 00 18 	mov	r8,-131048
80009e60:	31 09       	mov	r9,16
80009e62:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
80009e64:	fe 68 08 00 	mov	r8,-129024
80009e68:	fe 69 08 00 	mov	r9,-129024
80009e6c:	72 09       	ld.w	r9,r9[0x0]
80009e6e:	af a9       	sbr	r9,0xe
80009e70:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80009e72:	30 0c       	mov	r12,0
80009e74:	f0 1f 00 31 	mcall	80009f38 <udd_interrupt+0x198>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
80009e78:	f0 1f 00 31 	mcall	80009f3c <udd_interrupt+0x19c>
#endif
		goto udd_interrupt_end;
80009e7c:	c4 78       	rjmp	80009f0a <udd_interrupt+0x16a>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80009e7e:	fe 68 00 10 	mov	r8,-131056
80009e82:	70 08       	ld.w	r8,r8[0x0]
80009e84:	e2 18 00 10 	andl	r8,0x10,COH
80009e88:	c1 c0       	breq	80009ec0 <udd_interrupt+0x120>
80009e8a:	fe 68 00 04 	mov	r8,-131068
80009e8e:	70 08       	ld.w	r8,r8[0x0]
80009e90:	e2 18 00 10 	andl	r8,0x10,COH
80009e94:	c1 60       	breq	80009ec0 <udd_interrupt+0x120>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80009e96:	fe 68 08 00 	mov	r8,-129024
80009e9a:	fe 69 08 00 	mov	r9,-129024
80009e9e:	72 09       	ld.w	r9,r9[0x0]
80009ea0:	af c9       	cbr	r9,0xe
80009ea2:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80009ea4:	fe 68 00 14 	mov	r8,-131052
80009ea8:	31 09       	mov	r9,16
80009eaa:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
80009eac:	fe 68 00 18 	mov	r8,-131048
80009eb0:	30 19       	mov	r9,1
80009eb2:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(true); // Enter in IDLE mode
80009eb4:	30 1c       	mov	r12,1
80009eb6:	f0 1f 00 21 	mcall	80009f38 <udd_interrupt+0x198>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
80009eba:	f0 1f 00 22 	mcall	80009f40 <udd_interrupt+0x1a0>
#endif
		goto udd_interrupt_end;
80009ebe:	c2 68       	rjmp	80009f0a <udd_interrupt+0x16a>
	}

	if (Is_otg_vbus_transition()) {
80009ec0:	fe 68 08 04 	mov	r8,-129020
80009ec4:	70 08       	ld.w	r8,r8[0x0]
80009ec6:	e2 18 00 02 	andl	r8,0x2,COH
80009eca:	c2 00       	breq	80009f0a <udd_interrupt+0x16a>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
80009ecc:	fe 68 08 00 	mov	r8,-129024
80009ed0:	fe 69 08 00 	mov	r9,-129024
80009ed4:	72 09       	ld.w	r9,r9[0x0]
80009ed6:	af c9       	cbr	r9,0xe
80009ed8:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80009eda:	fe 68 08 08 	mov	r8,-129016
80009ede:	30 29       	mov	r9,2
80009ee0:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock();
80009ee2:	fe 68 08 00 	mov	r8,-129024
80009ee6:	fe 69 08 00 	mov	r9,-129024
80009eea:	72 09       	ld.w	r9,r9[0x0]
80009eec:	af a9       	sbr	r9,0xe
80009eee:	91 09       	st.w	r8[0x0],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
80009ef0:	fe 68 08 04 	mov	r8,-129020
80009ef4:	70 08       	ld.w	r8,r8[0x0]
80009ef6:	e2 18 08 00 	andl	r8,0x800,COH
80009efa:	5f 18       	srne	r8
80009efc:	10 9c       	mov	r12,r8
80009efe:	f0 1f 00 12 	mcall	80009f44 <udd_interrupt+0x1a4>
80009f02:	c0 48       	rjmp	80009f0a <udd_interrupt+0x16a>
		udc_sof_notify();
		goto udd_interrupt_end;
	}

	if (udd_ctrl_interrupt())
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
80009f04:	d7 03       	nop
80009f06:	c0 28       	rjmp	80009f0a <udd_interrupt+0x16a>

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
80009f08:	d7 03       	nop
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80009f0a:	fe 68 00 00 	mov	r8,-131072
80009f0e:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80009f12:	e3 cd 40 80 	ldm	sp++,r7,lr
80009f16:	d6 03       	rete
80009f18:	80 00       	ld.sh	r0,r0[0x0]
80009f1a:	d7 bc       	*unknown*
80009f1c:	80 00       	ld.sh	r0,r0[0x0]
80009f1e:	e6 04       	*unknown*
80009f20:	80 00       	ld.sh	r0,r0[0x0]
80009f22:	b4 94       	st.b	r10[0x1],r4
80009f24:	80 00       	ld.sh	r0,r0[0x0]
80009f26:	b9 48       	asr	r8,0x18
80009f28:	80 00       	ld.sh	r0,r0[0x0]
80009f2a:	b5 c8       	cbr	r8,0x14
80009f2c:	80 00       	ld.sh	r0,r0[0x0]
80009f2e:	d7 58       	*unknown*
80009f30:	80 00       	ld.sh	r0,r0[0x0]
80009f32:	ad 14       	ld.d	r4,--r6
80009f34:	80 00       	ld.sh	r0,r0[0x0]
80009f36:	ad f8       	*unknown*
80009f38:	80 00       	ld.sh	r0,r0[0x0]
80009f3a:	9d 40       	st.w	lr[0x10],r0
80009f3c:	80 00       	ld.sh	r0,r0[0x0]
80009f3e:	e5 dc 80 00 	ldswp.w	r12,r2[0]
80009f42:	e5 f0 80 00 	ld.wls	r0,r2[0x0]
80009f46:	e5 a8 eb cd 	cop	cp7,cr11,cr12,cr13,0x50

80009f48 <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
80009f48:	eb cd 40 80 	pushm	r7,lr
80009f4c:	1a 97       	mov	r7,sp
	return true;
80009f4e:	30 18       	mov	r8,1
}
80009f50:	10 9c       	mov	r12,r8
80009f52:	e3 cd 80 80 	ldm	sp++,r7,pc
80009f56:	d7 03       	nop

80009f58 <udd_enable>:


void udd_enable(void)
{
80009f58:	eb cd 40 80 	pushm	r7,lr
80009f5c:	1a 97       	mov	r7,sp
80009f5e:	20 2d       	sub	sp,8
	irqflags_t flags;

	flags = cpu_irq_save();
80009f60:	f0 1f 00 3e 	mcall	8000a058 <udd_enable+0x100>
80009f64:	18 98       	mov	r8,r12
80009f66:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
80009f6a:	f0 1f 00 3d 	mcall	8000a05c <udd_enable+0x104>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
80009f6e:	30 0a       	mov	r10,0
80009f70:	e0 6b 02 20 	mov	r11,544
80009f74:	4b bc       	lddpc	r12,8000a060 <udd_enable+0x108>
80009f76:	f0 1f 00 3c 	mcall	8000a064 <udd_enable+0x10c>
80009f7a:	30 18       	mov	r8,1
80009f7c:	ef 48 ff fc 	st.w	r7[-4],r8
#if defined (__GNUC__)
__attribute__((__always_inline__))
#endif
static inline void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80009f80:	fe 78 0c 00 	mov	r8,-62464
80009f84:	fe 79 0c 00 	mov	r9,-62464
80009f88:	f2 fa 01 44 	ld.w	r10,r9[324]
80009f8c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009f90:	f5 e9 10 09 	or	r9,r10,r9
80009f94:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
80009f98:	fe 68 08 00 	mov	r8,-129024
80009f9c:	fe 69 08 00 	mov	r9,-129024
80009fa0:	72 09       	ld.w	r9,r9[0x0]
80009fa2:	b9 c9       	cbr	r9,0x18
80009fa4:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
80009fa6:	fe 68 08 00 	mov	r8,-129024
80009faa:	fe 69 08 00 	mov	r9,-129024
80009fae:	72 09       	ld.w	r9,r9[0x0]
80009fb0:	b9 b9       	sbr	r9,0x19
80009fb2:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80009fb4:	fe 68 08 00 	mov	r8,-129024
80009fb8:	fe 69 08 00 	mov	r9,-129024
80009fbc:	72 09       	ld.w	r9,r9[0x0]
80009fbe:	ad a9       	sbr	r9,0xc
80009fc0:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80009fc2:	fe 68 08 00 	mov	r8,-129024
80009fc6:	fe 69 08 00 	mov	r9,-129024
80009fca:	72 09       	ld.w	r9,r9[0x0]
80009fcc:	af b9       	sbr	r9,0xf
80009fce:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80009fd0:	fe 68 08 00 	mov	r8,-129024
80009fd4:	fe 69 08 00 	mov	r9,-129024
80009fd8:	72 09       	ld.w	r9,r9[0x0]
80009fda:	af c9       	cbr	r9,0xe
80009fdc:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
80009fde:	fe 68 08 00 	mov	r8,-129024
80009fe2:	70 08       	ld.w	r8,r8[0x0]

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
80009fe4:	f0 1f 00 21 	mcall	8000a068 <udd_enable+0x110>

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80009fe8:	fe 68 00 00 	mov	r8,-131072
80009fec:	fe 69 00 00 	mov	r9,-131072
80009ff0:	72 09       	ld.w	r9,r9[0x0]
80009ff2:	ad c9       	cbr	r9,0xc
80009ff4:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
80009ff6:	fe 68 00 00 	mov	r8,-131072
80009ffa:	fe 69 00 00 	mov	r9,-131072
80009ffe:	72 09       	ld.w	r9,r9[0x0]
8000a000:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a004:	91 09       	st.w	r8[0x0],r9
#  else
	udd_high_speed_disable();
#  endif
#endif
	otg_ack_vbus_transition();
8000a006:	fe 68 08 08 	mov	r8,-129016
8000a00a:	30 29       	mov	r9,2
8000a00c:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
8000a00e:	fe 68 08 04 	mov	r8,-129020
8000a012:	70 08       	ld.w	r8,r8[0x0]
8000a014:	e2 18 08 00 	andl	r8,0x800,COH
8000a018:	c0 50       	breq	8000a022 <udd_enable+0xca>
		otg_raise_vbus_transition();
8000a01a:	fe 68 08 0c 	mov	r8,-129012
8000a01e:	30 29       	mov	r9,2
8000a020:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
8000a022:	fe 68 08 00 	mov	r8,-129024
8000a026:	fe 69 08 00 	mov	r9,-129024
8000a02a:	72 09       	ld.w	r9,r9[0x0]
8000a02c:	a1 b9       	sbr	r9,0x1
8000a02e:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
8000a030:	fe 68 08 00 	mov	r8,-129024
8000a034:	fe 69 08 00 	mov	r9,-129024
8000a038:	72 09       	ld.w	r9,r9[0x0]
8000a03a:	af a9       	sbr	r9,0xe
8000a03c:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
8000a03e:	48 c9       	lddpc	r9,8000a06c <udd_enable+0x114>
8000a040:	30 08       	mov	r8,0
8000a042:	b2 88       	st.b	r9[0x0],r8
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
8000a044:	30 3c       	mov	r12,3
8000a046:	f0 1f 00 0b 	mcall	8000a070 <udd_enable+0x118>
#endif

	cpu_irq_restore(flags);
8000a04a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a04e:	f0 1f 00 0a 	mcall	8000a074 <udd_enable+0x11c>
}
8000a052:	2f ed       	sub	sp,-8
8000a054:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a058:	80 00       	ld.sh	r0,r0[0x0]
8000a05a:	9c 80       	ld.uh	r0,lr[0x0]
8000a05c:	80 00       	ld.sh	r0,r0[0x0]
8000a05e:	c3 18       	rjmp	8000a0c0 <udd_attach+0x48>
8000a060:	80 00       	ld.sh	r0,r0[0x0]
8000a062:	9d a0       	st.w	lr[0x28],r0
8000a064:	80 00       	ld.sh	r0,r0[0x0]
8000a066:	93 18       	st.w	r9[0x4],r8
8000a068:	80 00       	ld.sh	r0,r0[0x0]
8000a06a:	b5 5c       	asr	r12,0x15
8000a06c:	00 00       	add	r0,r0
8000a06e:	07 b8       	ld.ub	r8,r3[0x3]
8000a070:	80 00       	ld.sh	r0,r0[0x0]
8000a072:	9c b8       	ld.uh	r8,lr[0x6]
8000a074:	80 00       	ld.sh	r0,r0[0x0]
8000a076:	9c 9e       	ld.uh	lr,lr[0x2]

8000a078 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
8000a078:	eb cd 40 80 	pushm	r7,lr
8000a07c:	1a 97       	mov	r7,sp
8000a07e:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
8000a080:	f0 1f 00 26 	mcall	8000a118 <udd_attach+0xa0>
8000a084:	18 98       	mov	r8,r12
8000a086:	ef 48 ff fc 	st.w	r7[-4],r8

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
8000a08a:	30 1c       	mov	r12,1
8000a08c:	f0 1f 00 24 	mcall	8000a11c <udd_attach+0xa4>
	otg_unfreeze_clock();
8000a090:	fe 68 08 00 	mov	r8,-129024
8000a094:	fe 69 08 00 	mov	r9,-129024
8000a098:	72 09       	ld.w	r9,r9[0x0]
8000a09a:	af c9       	cbr	r9,0xe
8000a09c:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );

	// Authorize attach if Vbus is present
	udd_attach_device();
8000a09e:	fe 68 00 00 	mov	r8,-131072
8000a0a2:	fe 69 00 00 	mov	r9,-131072
8000a0a6:	72 09       	ld.w	r9,r9[0x0]
8000a0a8:	a9 c9       	cbr	r9,0x8
8000a0aa:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
8000a0ac:	fe 68 00 18 	mov	r8,-131048
8000a0b0:	30 89       	mov	r9,8
8000a0b2:	91 09       	st.w	r8[0x0],r9
	udd_enable_suspend_interrupt();
8000a0b4:	fe 68 00 18 	mov	r8,-131048
8000a0b8:	30 19       	mov	r9,1
8000a0ba:	91 09       	st.w	r8[0x0],r9
	udd_enable_wake_up_interrupt();
8000a0bc:	fe 68 00 18 	mov	r8,-131048
8000a0c0:	31 09       	mov	r9,16
8000a0c2:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
8000a0c4:	fe 68 00 18 	mov	r8,-131048
8000a0c8:	30 49       	mov	r9,4
8000a0ca:	91 09       	st.w	r8[0x0],r9
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
8000a0cc:	fe 68 00 18 	mov	r8,-131048
8000a0d0:	30 29       	mov	r9,2
8000a0d2:	91 09       	st.w	r8[0x0],r9
#endif
	// Reset following interrupts flag
	udd_ack_reset();
8000a0d4:	fe 68 00 08 	mov	r8,-131064
8000a0d8:	30 89       	mov	r9,8
8000a0da:	91 09       	st.w	r8[0x0],r9
	udd_ack_sof();
8000a0dc:	fe 68 00 08 	mov	r8,-131064
8000a0e0:	30 49       	mov	r9,4
8000a0e2:	91 09       	st.w	r8[0x0],r9
	udd_ack_msof();
8000a0e4:	fe 68 00 08 	mov	r8,-131064
8000a0e8:	30 29       	mov	r9,2
8000a0ea:	91 09       	st.w	r8[0x0],r9

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
8000a0ec:	fe 68 00 08 	mov	r8,-131064
8000a0f0:	30 19       	mov	r9,1
8000a0f2:	91 09       	st.w	r8[0x0],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
8000a0f4:	fe 68 00 08 	mov	r8,-131064
8000a0f8:	31 09       	mov	r9,16
8000a0fa:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
8000a0fc:	fe 68 08 00 	mov	r8,-129024
8000a100:	fe 69 08 00 	mov	r9,-129024
8000a104:	72 09       	ld.w	r9,r9[0x0]
8000a106:	af a9       	sbr	r9,0xe
8000a108:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000a10a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a10e:	f0 1f 00 05 	mcall	8000a120 <udd_attach+0xa8>
}
8000a112:	2f fd       	sub	sp,-4
8000a114:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a118:	80 00       	ld.sh	r0,r0[0x0]
8000a11a:	9c 80       	ld.uh	r0,lr[0x0]
8000a11c:	80 00       	ld.sh	r0,r0[0x0]
8000a11e:	9d 40       	st.w	lr[0x10],r0
8000a120:	80 00       	ld.sh	r0,r0[0x0]
8000a122:	9c 9e       	ld.uh	lr,lr[0x2]

8000a124 <udd_detach>:


void udd_detach(void)
{
8000a124:	eb cd 40 80 	pushm	r7,lr
8000a128:	1a 97       	mov	r7,sp
	otg_unfreeze_clock();
8000a12a:	fe 68 08 00 	mov	r8,-129024
8000a12e:	fe 69 08 00 	mov	r9,-129024
8000a132:	72 09       	ld.w	r9,r9[0x0]
8000a134:	af c9       	cbr	r9,0xe
8000a136:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
8000a138:	fe 68 00 00 	mov	r8,-131072
8000a13c:	fe 69 00 00 	mov	r9,-131072
8000a140:	72 09       	ld.w	r9,r9[0x0]
8000a142:	a9 a9       	sbr	r9,0x8
8000a144:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
8000a146:	fe 68 08 00 	mov	r8,-129024
8000a14a:	fe 69 08 00 	mov	r9,-129024
8000a14e:	72 09       	ld.w	r9,r9[0x0]
8000a150:	af a9       	sbr	r9,0xe
8000a152:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
8000a154:	30 0c       	mov	r12,0
8000a156:	f0 1f 00 03 	mcall	8000a160 <udd_detach+0x3c>
}
8000a15a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a15e:	00 00       	add	r0,r0
8000a160:	80 00       	ld.sh	r0,r0[0x0]
8000a162:	9d 40       	st.w	lr[0x10],r0

8000a164 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
8000a164:	eb cd 40 80 	pushm	r7,lr
8000a168:	1a 97       	mov	r7,sp
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
8000a16a:	fe 68 08 04 	mov	r8,-129020
8000a16e:	70 08       	ld.w	r8,r8[0x0]
8000a170:	e2 18 30 00 	andl	r8,0x3000,COH
8000a174:	ad 88       	lsr	r8,0xc
8000a176:	5f 18       	srne	r8
8000a178:	5c 58       	castu.b	r8
#else
	return false;
#endif
}
8000a17a:	10 9c       	mov	r12,r8
8000a17c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a180 <udd_set_address>:


void udd_set_address(uint8_t address)
{
8000a180:	eb cd 40 80 	pushm	r7,lr
8000a184:	1a 97       	mov	r7,sp
8000a186:	20 1d       	sub	sp,4
8000a188:	18 98       	mov	r8,r12
8000a18a:	ef 68 ff fc 	st.b	r7[-4],r8
	udd_disable_address();
8000a18e:	fe 68 00 00 	mov	r8,-131072
8000a192:	fe 69 00 00 	mov	r9,-131072
8000a196:	72 09       	ld.w	r9,r9[0x0]
8000a198:	a7 d9       	cbr	r9,0x7
8000a19a:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
8000a19c:	fe 68 00 00 	mov	r8,-131072
8000a1a0:	fe 69 00 00 	mov	r9,-131072
8000a1a4:	72 09       	ld.w	r9,r9[0x0]
8000a1a6:	12 9a       	mov	r10,r9
8000a1a8:	e0 1a ff 80 	andl	r10,0xff80
8000a1ac:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000a1b0:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
8000a1b4:	f5 e9 10 09 	or	r9,r10,r9
8000a1b8:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000a1ba:	fe 68 00 00 	mov	r8,-131072
8000a1be:	fe 69 00 00 	mov	r9,-131072
8000a1c2:	72 09       	ld.w	r9,r9[0x0]
8000a1c4:	a7 b9       	sbr	r9,0x7
8000a1c6:	91 09       	st.w	r8[0x0],r9
}
8000a1c8:	2f fd       	sub	sp,-4
8000a1ca:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a1ce <udd_getaddress>:


uint8_t udd_getaddress(void)
{
8000a1ce:	eb cd 40 80 	pushm	r7,lr
8000a1d2:	1a 97       	mov	r7,sp
	return udd_get_configured_address();
8000a1d4:	fe 68 00 00 	mov	r8,-131072
8000a1d8:	70 08       	ld.w	r8,r8[0x0]
8000a1da:	5c 58       	castu.b	r8
8000a1dc:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
}
8000a1e0:	10 9c       	mov	r12,r8
8000a1e2:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a1e6 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
8000a1e6:	eb cd 40 80 	pushm	r7,lr
8000a1ea:	1a 97       	mov	r7,sp
	return udd_frame_number();
8000a1ec:	fe 68 00 20 	mov	r8,-131040
8000a1f0:	70 08       	ld.w	r8,r8[0x0]
8000a1f2:	e2 18 3f f8 	andl	r8,0x3ff8,COH
8000a1f6:	a3 98       	lsr	r8,0x3
8000a1f8:	5c 88       	casts.h	r8
}
8000a1fa:	10 9c       	mov	r12,r8
8000a1fc:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a200 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
8000a200:	eb cd 40 80 	pushm	r7,lr
8000a204:	1a 97       	mov	r7,sp
8000a206:	20 2d       	sub	sp,8
8000a208:	ef 4c ff fc 	st.w	r7[-4],r12
8000a20c:	16 98       	mov	r8,r11
8000a20e:	ef 58 ff f8 	st.h	r7[-8],r8
	udd_g_ctrlreq.payload = payload;
8000a212:	48 68       	lddpc	r8,8000a228 <udd_set_setup_payload+0x28>
8000a214:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a218:	91 29       	st.w	r8[0x8],r9
	udd_g_ctrlreq.payload_size = payload_size;
8000a21a:	48 49       	lddpc	r9,8000a228 <udd_set_setup_payload+0x28>
8000a21c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000a220:	b2 68       	st.h	r9[0xc],r8
}
8000a222:	2f ed       	sub	sp,-8
8000a224:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a228:	00 00       	add	r0,r0
8000a22a:	10 0c       	add	r12,r8

8000a22c <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
8000a22c:	eb cd 40 80 	pushm	r7,lr
8000a230:	1a 97       	mov	r7,sp
8000a232:	20 dd       	sub	sp,52
8000a234:	16 99       	mov	r9,r11
8000a236:	14 98       	mov	r8,r10
8000a238:	18 9a       	mov	r10,r12
8000a23a:	ef 6a ff d4 	st.b	r7[-44],r10
8000a23e:	ef 69 ff d0 	st.b	r7[-48],r9
8000a242:	ef 58 ff cc 	st.h	r7[-52],r8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
8000a246:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a24a:	a7 98       	lsr	r8,0x7
8000a24c:	ef 68 ff db 	st.b	r7[-37],r8
	ep = ep & USB_EP_ADDR_MASK;
8000a250:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a254:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a258:	ef 68 ff d4 	st.b	r7[-44],r8

	if (ep > USB_DEVICE_MAX_EP) {
8000a25c:	ef 39 ff d4 	ld.ub	r9,r7[-44]
8000a260:	30 28       	mov	r8,2
8000a262:	f0 09 18 00 	cp.b	r9,r8
8000a266:	e0 88 00 04 	brls	8000a26e <udd_ep_alloc+0x42>
		return false;
8000a26a:	30 08       	mov	r8,0
8000a26c:	c7 f9       	rjmp	8000a56a <udd_ep_alloc+0x33e>
	}
	if (Is_udd_endpoint_enabled(ep)) {
8000a26e:	fe 68 00 00 	mov	r8,-131072
8000a272:	70 79       	ld.w	r9,r8[0x1c]
8000a274:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a278:	30 1a       	mov	r10,1
8000a27a:	f4 08 09 48 	lsl	r8,r10,r8
8000a27e:	f3 e8 00 08 	and	r8,r9,r8
8000a282:	c0 30       	breq	8000a288 <udd_ep_alloc+0x5c>
		return false;
8000a284:	30 08       	mov	r8,0
8000a286:	c7 29       	rjmp	8000a56a <udd_ep_alloc+0x33e>
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
8000a288:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8000a28c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000a290:	58 28       	cp.w	r8,2
8000a292:	c0 d0       	breq	8000a2ac <udd_ep_alloc+0x80>
8000a294:	58 38       	cp.w	r8,3
8000a296:	c0 70       	breq	8000a2a4 <udd_ep_alloc+0x78>
8000a298:	58 18       	cp.w	r8,1
8000a29a:	c0 d1       	brne	8000a2b4 <udd_ep_alloc+0x88>
	case USB_EP_TYPE_ISOCHRONOUS:
		bank = UDD_ISOCHRONOUS_NB_BANK(ep);
8000a29c:	30 28       	mov	r8,2
8000a29e:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000a2a2:	c0 b8       	rjmp	8000a2b8 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_INTERRUPT:
		bank = UDD_INTERRUPT_NB_BANK(ep);
8000a2a4:	30 18       	mov	r8,1
8000a2a6:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000a2aa:	c0 78       	rjmp	8000a2b8 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_BULK:
		bank = UDD_BULK_NB_BANK(ep);
8000a2ac:	30 28       	mov	r8,2
8000a2ae:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000a2b2:	c0 38       	rjmp	8000a2b8 <udd_ep_alloc+0x8c>
	default:
		Assert(false);
		return false;
8000a2b4:	30 08       	mov	r8,0
8000a2b6:	c5 a9       	rjmp	8000a56a <udd_ep_alloc+0x33e>
	}
	switch(bank) {
8000a2b8:	ef 38 ff de 	ld.ub	r8,r7[-34]
8000a2bc:	58 28       	cp.w	r8,2
8000a2be:	c0 90       	breq	8000a2d0 <udd_ep_alloc+0xa4>
8000a2c0:	58 38       	cp.w	r8,3
8000a2c2:	c0 b0       	breq	8000a2d8 <udd_ep_alloc+0xac>
8000a2c4:	58 18       	cp.w	r8,1
8000a2c6:	c0 d1       	brne	8000a2e0 <udd_ep_alloc+0xb4>
	case 1:
		bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
8000a2c8:	30 08       	mov	r8,0
8000a2ca:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000a2ce:	c0 b8       	rjmp	8000a2e4 <udd_ep_alloc+0xb8>
	case 2:
		bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
8000a2d0:	30 18       	mov	r8,1
8000a2d2:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000a2d6:	c0 78       	rjmp	8000a2e4 <udd_ep_alloc+0xb8>
	case 3:
		bank = AVR32_USBB_UECFG0_EPBK_TRIPLE;
8000a2d8:	30 28       	mov	r8,2
8000a2da:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000a2de:	c0 38       	rjmp	8000a2e4 <udd_ep_alloc+0xb8>
	default:
		Assert(false);
		return false;
8000a2e0:	30 08       	mov	r8,0
8000a2e2:	c4 49       	rjmp	8000a56a <udd_ep_alloc+0x33e>
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
8000a2e4:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a2e8:	a3 68       	lsl	r8,0x2
8000a2ea:	e0 38 ff 00 	sub	r8,130816
8000a2ee:	ef 39 ff d4 	ld.ub	r9,r7[-44]
8000a2f2:	a3 69       	lsl	r9,0x2
8000a2f4:	e0 39 ff 00 	sub	r9,130816
8000a2f8:	72 09       	ld.w	r9,r9[0x0]
8000a2fa:	12 9a       	mov	r10,r9
8000a2fc:	e0 1a e6 83 	andl	r10,0xe683
8000a300:	ef 39 ff d0 	ld.ub	r9,r7[-48]
8000a304:	ab 79       	lsl	r9,0xb
8000a306:	12 9b       	mov	r11,r9
8000a308:	e2 1b 18 00 	andl	r11,0x1800,COH
8000a30c:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000a310:	a9 69       	lsl	r9,0x8
8000a312:	e2 19 01 00 	andl	r9,0x100,COH
8000a316:	12 4b       	or	r11,r9
8000a318:	ef 19 ff cc 	ld.uh	r9,r7[-52]
8000a31c:	ef 49 ff f0 	st.w	r7[-16],r9
8000a320:	30 89       	mov	r9,8
8000a322:	ef 49 ff f4 	st.w	r7[-12],r9
8000a326:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a32a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000a32e:	f2 0c 0c 49 	max	r9,r9,r12
8000a332:	ef 49 ff ec 	st.w	r7[-20],r9
8000a336:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a33a:	ef 49 ff e4 	st.w	r7[-28],r9
8000a33e:	e0 69 04 00 	mov	r9,1024
8000a342:	ef 49 ff e8 	st.w	r7[-24],r9
8000a346:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a34a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000a34e:	f2 0c 0d 49 	min	r9,r9,r12
8000a352:	ef 49 ff e0 	st.w	r7[-32],r9
8000a356:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000a35a:	a1 79       	lsl	r9,0x1
8000a35c:	20 19       	sub	r9,1
8000a35e:	f2 09 12 00 	clz	r9,r9
8000a362:	f2 09 11 1c 	rsub	r9,r9,28
8000a366:	a5 69       	lsl	r9,0x4
8000a368:	12 4b       	or	r11,r9
8000a36a:	ef 39 ff de 	ld.ub	r9,r7[-34]
8000a36e:	a3 69       	lsl	r9,0x2
8000a370:	e2 19 00 0c 	andl	r9,0xc,COH
8000a374:	f7 e9 10 09 	or	r9,r11,r9
8000a378:	e2 19 19 7c 	andl	r9,0x197c,COH
8000a37c:	f5 e9 10 09 	or	r9,r10,r9
8000a380:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
8000a382:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a386:	30 19       	mov	r9,1
8000a388:	f2 08 09 48 	lsl	r8,r9,r8
8000a38c:	ef 58 ff dc 	st.h	r7[-36],r8

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
8000a390:	30 28       	mov	r8,2
8000a392:	ef 68 ff df 	st.b	r7[-33],r8
8000a396:	c3 a8       	rjmp	8000a40a <udd_ep_alloc+0x1de>
		if (Is_udd_endpoint_enabled(i)) {
8000a398:	fe 68 00 00 	mov	r8,-131072
8000a39c:	70 79       	ld.w	r9,r8[0x1c]
8000a39e:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a3a2:	30 1a       	mov	r10,1
8000a3a4:	f4 08 09 48 	lsl	r8,r10,r8
8000a3a8:	f3 e8 00 08 	and	r8,r9,r8
8000a3ac:	c2 a0       	breq	8000a400 <udd_ep_alloc+0x1d4>
			ep_allocated |= 1 << i;
8000a3ae:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a3b2:	30 19       	mov	r9,1
8000a3b4:	f2 08 09 48 	lsl	r8,r9,r8
8000a3b8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000a3bc:	ef 08 ff dc 	ld.sh	r8,r7[-36]
8000a3c0:	f3 e8 10 08 	or	r8,r9,r8
8000a3c4:	5c 88       	casts.h	r8
8000a3c6:	ef 58 ff dc 	st.h	r7[-36],r8
			udd_disable_endpoint(i);
8000a3ca:	fe 68 00 00 	mov	r8,-131072
8000a3ce:	fe 69 00 00 	mov	r9,-131072
8000a3d2:	72 7a       	ld.w	r10,r9[0x1c]
8000a3d4:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a3d8:	30 1b       	mov	r11,1
8000a3da:	f6 09 09 49 	lsl	r9,r11,r9
8000a3de:	5c d9       	com	r9
8000a3e0:	f5 e9 00 09 	and	r9,r10,r9
8000a3e4:	91 79       	st.w	r8[0x1c],r9
			udd_unallocate_memory(i);
8000a3e6:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a3ea:	a3 68       	lsl	r8,0x2
8000a3ec:	e0 38 ff 00 	sub	r8,130816
8000a3f0:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a3f4:	a3 69       	lsl	r9,0x2
8000a3f6:	e0 39 ff 00 	sub	r9,130816
8000a3fa:	72 09       	ld.w	r9,r9[0x0]
8000a3fc:	a1 d9       	cbr	r9,0x1
8000a3fe:	91 09       	st.w	r8[0x0],r9
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
8000a400:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a404:	20 18       	sub	r8,1
8000a406:	ef 68 ff df 	st.b	r7[-33],r8
8000a40a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a40e:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a412:	f0 09 18 00 	cp.b	r9,r8
8000a416:	fe 9b ff c1 	brhi	8000a398 <udd_ep_alloc+0x16c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000a41a:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a41e:	ef 68 ff df 	st.b	r7[-33],r8
8000a422:	c9 c8       	rjmp	8000a55a <udd_ep_alloc+0x32e>
		if (ep_allocated & (1 << i)) {
8000a424:	ef 19 ff dc 	ld.uh	r9,r7[-36]
8000a428:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a42c:	f2 08 08 48 	asr	r8,r9,r8
8000a430:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a434:	5c 58       	castu.b	r8
8000a436:	e0 80 00 8d 	breq	8000a550 <udd_ep_alloc+0x324>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
8000a43a:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a43e:	f0 c9 00 01 	sub	r9,r8,1
8000a442:	12 98       	mov	r8,r9
8000a444:	a3 68       	lsl	r8,0x2
8000a446:	12 08       	add	r8,r9
8000a448:	a3 68       	lsl	r8,0x2
8000a44a:	10 99       	mov	r9,r8
8000a44c:	4c a8       	lddpc	r8,8000a574 <udd_ep_alloc+0x348>
8000a44e:	f2 08 00 08 	add	r8,r9,r8
8000a452:	ef 48 ff f8 	st.w	r7[-8],r8
			bool b_restart = ptr_job->busy;
8000a456:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a45a:	70 08       	ld.w	r8,r8[0x0]
8000a45c:	e6 18 80 00 	andh	r8,0x8000,COH
8000a460:	5f 18       	srne	r8
8000a462:	ef 68 ff ff 	st.b	r7[-1],r8
			ptr_job->busy = false;
8000a466:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a46a:	72 08       	ld.w	r8,r9[0x0]
8000a46c:	30 0a       	mov	r10,0
8000a46e:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a472:	93 08       	st.w	r9[0x0],r8

			udd_allocate_memory(i);
8000a474:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a478:	a3 68       	lsl	r8,0x2
8000a47a:	e0 38 ff 00 	sub	r8,130816
8000a47e:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a482:	a3 69       	lsl	r9,0x2
8000a484:	e0 39 ff 00 	sub	r9,130816
8000a488:	72 09       	ld.w	r9,r9[0x0]
8000a48a:	a1 b9       	sbr	r9,0x1
8000a48c:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint(i);
8000a48e:	fe 68 00 00 	mov	r8,-131072
8000a492:	fe 69 00 00 	mov	r9,-131072
8000a496:	72 7a       	ld.w	r10,r9[0x1c]
8000a498:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a49c:	30 1b       	mov	r11,1
8000a49e:	f6 09 09 49 	lsl	r9,r11,r9
8000a4a2:	f5 e9 10 09 	or	r9,r10,r9
8000a4a6:	91 79       	st.w	r8[0x1c],r9
			if (!Is_udd_endpoint_configured(i)) {
8000a4a8:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a4ac:	a3 68       	lsl	r8,0x2
8000a4ae:	e0 38 fe d0 	sub	r8,130768
8000a4b2:	70 08       	ld.w	r8,r8[0x0]
8000a4b4:	e6 18 00 04 	andh	r8,0x4,COH
8000a4b8:	c2 61       	brne	8000a504 <udd_ep_alloc+0x2d8>
				if (NULL == ptr_job->call_trans) {
8000a4ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4be:	70 48       	ld.w	r8,r8[0x10]
8000a4c0:	58 08       	cp.w	r8,0
8000a4c2:	c0 31       	brne	8000a4c8 <udd_ep_alloc+0x29c>
					return false;
8000a4c4:	30 08       	mov	r8,0
8000a4c6:	c5 28       	rjmp	8000a56a <udd_ep_alloc+0x33e>
				}
				if (Is_udd_endpoint_in(i)) {
8000a4c8:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a4cc:	a3 68       	lsl	r8,0x2
8000a4ce:	e0 38 ff 00 	sub	r8,130816
8000a4d2:	70 08       	ld.w	r8,r8[0x0]
8000a4d4:	e2 18 01 00 	andl	r8,0x100,COH
8000a4d8:	c0 90       	breq	8000a4ea <udd_ep_alloc+0x2be>
					i |= USB_EP_DIR_IN;
8000a4da:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a4de:	ea 18 ff ff 	orh	r8,0xffff
8000a4e2:	e8 18 ff 80 	orl	r8,0xff80
8000a4e6:	ef 68 ff df 	st.b	r7[-33],r8
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
8000a4ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4ee:	70 48       	ld.w	r8,r8[0x10]
8000a4f0:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000a4f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a4f8:	72 29       	ld.w	r9,r9[0x8]
8000a4fa:	12 9b       	mov	r11,r9
8000a4fc:	30 1c       	mov	r12,1
8000a4fe:	5d 18       	icall	r8
						ptr_job->buf_size, i);
				return false;
8000a500:	30 08       	mov	r8,0
8000a502:	c3 48       	rjmp	8000a56a <udd_ep_alloc+0x33e>
			}
			udd_enable_endpoint_bank_autoswitch(i);
8000a504:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a508:	a3 68       	lsl	r8,0x2
8000a50a:	e0 38 ff 00 	sub	r8,130816
8000a50e:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a512:	a3 69       	lsl	r9,0x2
8000a514:	e0 39 ff 00 	sub	r9,130816
8000a518:	72 09       	ld.w	r9,r9[0x0]
8000a51a:	a9 b9       	sbr	r9,0x9
8000a51c:	91 09       	st.w	r8[0x0],r9
			if (b_restart) {
8000a51e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a522:	30 08       	mov	r8,0
8000a524:	f0 09 18 00 	cp.b	r9,r8
8000a528:	c1 40       	breq	8000a550 <udd_ep_alloc+0x324>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
8000a52a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a52e:	70 48       	ld.w	r8,r8[0x10]
8000a530:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a534:	72 29       	ld.w	r9,r9[0x8]
8000a536:	ee fa ff f8 	ld.w	r10,r7[-8]
8000a53a:	74 1a       	ld.w	r10,r10[0x4]
8000a53c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a540:	76 0b       	ld.w	r11,r11[0x0]
8000a542:	e6 1b 40 00 	andh	r11,0x4000,COH
8000a546:	5f 1b       	srne	r11
8000a548:	ef 3c ff df 	ld.ub	r12,r7[-33]
8000a54c:	f0 1f 00 0b 	mcall	8000a578 <udd_ep_alloc+0x34c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000a550:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a554:	2f f8       	sub	r8,-1
8000a556:	ef 68 ff df 	st.b	r7[-33],r8
8000a55a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a55e:	30 28       	mov	r8,2
8000a560:	f0 09 18 00 	cp.b	r9,r8
8000a564:	fe 98 ff 60 	brls	8000a424 <udd_ep_alloc+0x1f8>
						ptr_job->buf_size,
						ptr_job->call_trans);
			}
		}
	}
	return true;
8000a568:	30 18       	mov	r8,1
}
8000a56a:	10 9c       	mov	r12,r8
8000a56c:	2f 3d       	sub	sp,-52
8000a56e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a572:	00 00       	add	r0,r0
8000a574:	00 00       	add	r0,r0
8000a576:	07 c4       	ld.ub	r4,r3[0x4]
8000a578:	80 00       	ld.sh	r0,r0[0x0]
8000a57a:	a8 9c       	st.b	r4[0x1],r12

8000a57c <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
8000a57c:	eb cd 40 80 	pushm	r7,lr
8000a580:	1a 97       	mov	r7,sp
8000a582:	20 2d       	sub	sp,8
8000a584:	18 98       	mov	r8,r12
8000a586:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a58a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a58e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a592:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
8000a596:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a59a:	30 28       	mov	r8,2
8000a59c:	f0 09 18 00 	cp.b	r9,r8
8000a5a0:	e0 8b 00 33 	brhi	8000a606 <udd_ep_free+0x8a>
		return;
	}
	udd_disable_endpoint(index);
8000a5a4:	fe 68 00 00 	mov	r8,-131072
8000a5a8:	fe 69 00 00 	mov	r9,-131072
8000a5ac:	72 7a       	ld.w	r10,r9[0x1c]
8000a5ae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a5b2:	30 1b       	mov	r11,1
8000a5b4:	f6 09 09 49 	lsl	r9,r11,r9
8000a5b8:	5c d9       	com	r9
8000a5ba:	f5 e9 00 09 	and	r9,r10,r9
8000a5be:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
8000a5c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a5c4:	a3 68       	lsl	r8,0x2
8000a5c6:	e0 38 ff 00 	sub	r8,130816
8000a5ca:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a5ce:	a3 69       	lsl	r9,0x2
8000a5d0:	e0 39 ff 00 	sub	r9,130816
8000a5d4:	72 09       	ld.w	r9,r9[0x0]
8000a5d6:	a1 d9       	cbr	r9,0x1
8000a5d8:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
8000a5da:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a5de:	10 9c       	mov	r12,r8
8000a5e0:	f0 1f 00 0c 	mcall	8000a610 <udd_ep_free+0x94>
	udd_ep_job[index - 1].stall_requested = false;
8000a5e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a5e8:	f0 c9 00 01 	sub	r9,r8,1
8000a5ec:	48 aa       	lddpc	r10,8000a614 <udd_ep_free+0x98>
8000a5ee:	12 98       	mov	r8,r9
8000a5f0:	a3 68       	lsl	r8,0x2
8000a5f2:	12 08       	add	r8,r9
8000a5f4:	a3 68       	lsl	r8,0x2
8000a5f6:	f4 08 00 09 	add	r9,r10,r8
8000a5fa:	72 08       	ld.w	r8,r9[0x0]
8000a5fc:	30 0a       	mov	r10,0
8000a5fe:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a602:	93 08       	st.w	r9[0x0],r8
8000a604:	c0 28       	rjmp	8000a608 <udd_ep_free+0x8c>
void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index) {
		return;
8000a606:	d7 03       	nop
	}
	udd_disable_endpoint(index);
	udd_unallocate_memory(index);
	udd_ep_abort_job(ep);
	udd_ep_job[index - 1].stall_requested = false;
}
8000a608:	2f ed       	sub	sp,-8
8000a60a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a60e:	00 00       	add	r0,r0
8000a610:	80 00       	ld.sh	r0,r0[0x0]
8000a612:	b6 24       	st.h	r11[0x4],r4
8000a614:	00 00       	add	r0,r0
8000a616:	07 c4       	ld.ub	r4,r3[0x4]

8000a618 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
8000a618:	eb cd 40 80 	pushm	r7,lr
8000a61c:	1a 97       	mov	r7,sp
8000a61e:	20 1d       	sub	sp,4
8000a620:	18 98       	mov	r8,r12
8000a622:	ef 68 ff fc 	st.b	r7[-4],r8
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
8000a626:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a62a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a62e:	a3 68       	lsl	r8,0x2
8000a630:	e0 38 fe 40 	sub	r8,130624
8000a634:	70 08       	ld.w	r8,r8[0x0]
8000a636:	e6 18 00 08 	andh	r8,0x8,COH
8000a63a:	5f 18       	srne	r8
8000a63c:	5c 58       	castu.b	r8
}
8000a63e:	10 9c       	mov	r12,r8
8000a640:	2f fd       	sub	sp,-4
8000a642:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a646:	d7 03       	nop

8000a648 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
8000a648:	eb cd 40 80 	pushm	r7,lr
8000a64c:	1a 97       	mov	r7,sp
8000a64e:	20 3d       	sub	sp,12
8000a650:	18 98       	mov	r8,r12
8000a652:	ef 68 ff f4 	st.b	r7[-12],r8
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a656:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a65a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a65e:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
8000a662:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a666:	30 28       	mov	r8,2
8000a668:	f0 09 18 00 	cp.b	r9,r8
8000a66c:	e0 88 00 04 	brls	8000a674 <udd_ep_set_halt+0x2c>
		return false;
8000a670:	30 08       	mov	r8,0
8000a672:	c6 f8       	rjmp	8000a750 <udd_ep_set_halt+0x108>
	}

	ptr_job = &udd_ep_job[index - 1];
8000a674:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a678:	f0 c9 00 01 	sub	r9,r8,1
8000a67c:	12 98       	mov	r8,r9
8000a67e:	a3 68       	lsl	r8,0x2
8000a680:	12 08       	add	r8,r9
8000a682:	a3 68       	lsl	r8,0x2
8000a684:	10 99       	mov	r9,r8
8000a686:	4b 58       	lddpc	r8,8000a758 <udd_ep_set_halt+0x110>
8000a688:	f2 08 00 08 	add	r8,r9,r8
8000a68c:	ef 48 ff f8 	st.w	r7[-8],r8

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
8000a690:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a694:	a3 68       	lsl	r8,0x2
8000a696:	e0 38 fe 40 	sub	r8,130624
8000a69a:	70 08       	ld.w	r8,r8[0x0]
8000a69c:	e6 18 00 08 	andh	r8,0x8,COH
8000a6a0:	c0 71       	brne	8000a6ae <udd_ep_set_halt+0x66>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
8000a6a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a6a6:	70 08       	ld.w	r8,r8[0x0]
8000a6a8:	e6 18 20 00 	andh	r8,0x2000,COH
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
8000a6ac:	c0 30       	breq	8000a6b2 <udd_ep_set_halt+0x6a>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
8000a6ae:	30 18       	mov	r8,1
8000a6b0:	c5 08       	rjmp	8000a750 <udd_ep_set_halt+0x108>
	}

	if (ptr_job->busy == true) {
8000a6b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a6b6:	70 08       	ld.w	r8,r8[0x0]
8000a6b8:	e6 18 80 00 	andh	r8,0x8000,COH
8000a6bc:	c0 30       	breq	8000a6c2 <udd_ep_set_halt+0x7a>
		return false; // Job on going, stall impossible
8000a6be:	30 08       	mov	r8,0
8000a6c0:	c4 88       	rjmp	8000a750 <udd_ep_set_halt+0x108>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
8000a6c2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a6c6:	30 08       	mov	r8,0
8000a6c8:	f0 09 18 00 	cp.b	r9,r8
8000a6cc:	c2 54       	brge	8000a716 <udd_ep_set_halt+0xce>
8000a6ce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a6d2:	a3 68       	lsl	r8,0x2
8000a6d4:	e0 38 fe d0 	sub	r8,130768
8000a6d8:	70 08       	ld.w	r8,r8[0x0]
8000a6da:	e2 18 30 00 	andl	r8,0x3000,COH
8000a6de:	ad 88       	lsr	r8,0xc
8000a6e0:	c1 b0       	breq	8000a716 <udd_ep_set_halt+0xce>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
8000a6e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a6e6:	72 08       	ld.w	r8,r9[0x0]
8000a6e8:	30 1a       	mov	r10,1
8000a6ea:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a6ee:	93 08       	st.w	r9[0x0],r8
			udd_enable_bank_interrupt(index);
8000a6f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a6f4:	a3 68       	lsl	r8,0x2
8000a6f6:	e0 38 fe 10 	sub	r8,130576
8000a6fa:	e0 69 10 00 	mov	r9,4096
8000a6fe:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(index);
8000a700:	fe 68 00 00 	mov	r8,-131072
8000a704:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a708:	e0 6a 10 00 	mov	r10,4096
8000a70c:	f4 09 09 49 	lsl	r9,r10,r9
8000a710:	91 69       	st.w	r8[0x18],r9
			return true;
8000a712:	30 18       	mov	r8,1
8000a714:	c1 e8       	rjmp	8000a750 <udd_ep_set_halt+0x108>
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
8000a716:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a71a:	a3 68       	lsl	r8,0x2
8000a71c:	e0 38 ff 00 	sub	r8,130816
8000a720:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a724:	a3 69       	lsl	r9,0x2
8000a726:	e0 39 ff 00 	sub	r9,130816
8000a72a:	72 09       	ld.w	r9,r9[0x0]
8000a72c:	a9 d9       	cbr	r9,0x9
8000a72e:	91 09       	st.w	r8[0x0],r9
	udd_ack_stall(index);
8000a730:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a734:	a3 68       	lsl	r8,0x2
8000a736:	e0 38 fe a0 	sub	r8,130720
8000a73a:	34 09       	mov	r9,64
8000a73c:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(index);
8000a73e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a742:	a3 68       	lsl	r8,0x2
8000a744:	e0 38 fe 10 	sub	r8,130576
8000a748:	e8 69 00 00 	mov	r9,524288
8000a74c:	91 09       	st.w	r8[0x0],r9
	return true;
8000a74e:	30 18       	mov	r8,1
}
8000a750:	10 9c       	mov	r12,r8
8000a752:	2f dd       	sub	sp,-12
8000a754:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a758:	00 00       	add	r0,r0
8000a75a:	07 c4       	ld.ub	r4,r3[0x4]

8000a75c <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
8000a75c:	eb cd 40 80 	pushm	r7,lr
8000a760:	1a 97       	mov	r7,sp
8000a762:	20 3d       	sub	sp,12
8000a764:	18 98       	mov	r8,r12
8000a766:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_stall_cleared = false;
8000a76a:	30 08       	mov	r8,0
8000a76c:	ef 68 ff fb 	st.b	r7[-5],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000a770:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a774:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a778:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep)
8000a77c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a780:	30 28       	mov	r8,2
8000a782:	f0 09 18 00 	cp.b	r9,r8
8000a786:	e0 88 00 04 	brls	8000a78e <udd_ep_clear_halt+0x32>
		return false;
8000a78a:	30 08       	mov	r8,0
8000a78c:	c8 18       	rjmp	8000a88e <udd_ep_clear_halt+0x132>
	ptr_job = &udd_ep_job[ep - 1];
8000a78e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a792:	f0 c9 00 01 	sub	r9,r8,1
8000a796:	12 98       	mov	r8,r9
8000a798:	a3 68       	lsl	r8,0x2
8000a79a:	12 08       	add	r8,r9
8000a79c:	a3 68       	lsl	r8,0x2
8000a79e:	10 99       	mov	r9,r8
8000a7a0:	4b e8       	lddpc	r8,8000a898 <udd_ep_clear_halt+0x13c>
8000a7a2:	f2 08 00 08 	add	r8,r9,r8
8000a7a6:	ef 48 ff fc 	st.w	r7[-4],r8

	if (ptr_job->stall_requested) {
8000a7aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a7ae:	70 08       	ld.w	r8,r8[0x0]
8000a7b0:	e6 18 20 00 	andh	r8,0x2000,COH
8000a7b4:	c1 c0       	breq	8000a7ec <udd_ep_clear_halt+0x90>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
8000a7b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a7ba:	72 08       	ld.w	r8,r9[0x0]
8000a7bc:	30 0a       	mov	r10,0
8000a7be:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a7c2:	93 08       	st.w	r9[0x0],r8
		udd_disable_bank_interrupt(ep);
8000a7c4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a7c8:	a3 68       	lsl	r8,0x2
8000a7ca:	e0 38 fd e0 	sub	r8,130528
8000a7ce:	e0 69 10 00 	mov	r9,4096
8000a7d2:	91 09       	st.w	r8[0x0],r9
		udd_disable_endpoint_interrupt(ep);
8000a7d4:	fe 68 00 00 	mov	r8,-131072
8000a7d8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a7dc:	e0 6a 10 00 	mov	r10,4096
8000a7e0:	f4 09 09 49 	lsl	r9,r10,r9
8000a7e4:	91 59       	st.w	r8[0x14],r9
		b_stall_cleared = true;
8000a7e6:	30 18       	mov	r8,1
8000a7e8:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
8000a7ec:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a7f0:	a3 68       	lsl	r8,0x2
8000a7f2:	e0 38 fe 40 	sub	r8,130624
8000a7f6:	70 08       	ld.w	r8,r8[0x0]
8000a7f8:	e6 18 00 08 	andh	r8,0x8,COH
8000a7fc:	c3 10       	breq	8000a85e <udd_ep_clear_halt+0x102>
		if (Is_udd_stall(ep)) {
8000a7fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a802:	a3 68       	lsl	r8,0x2
8000a804:	e0 38 fe d0 	sub	r8,130768
8000a808:	70 08       	ld.w	r8,r8[0x0]
8000a80a:	e2 18 00 40 	andl	r8,0x40,COH
8000a80e:	c1 00       	breq	8000a82e <udd_ep_clear_halt+0xd2>
			udd_ack_stall(ep);
8000a810:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a814:	a3 68       	lsl	r8,0x2
8000a816:	e0 38 fe a0 	sub	r8,130720
8000a81a:	34 09       	mov	r9,64
8000a81c:	91 09       	st.w	r8[0x0],r9
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
8000a81e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a822:	a3 68       	lsl	r8,0x2
8000a824:	e0 38 fe 10 	sub	r8,130576
8000a828:	e4 69 00 00 	mov	r9,262144
8000a82c:	91 09       	st.w	r8[0x0],r9
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
8000a82e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a832:	a3 68       	lsl	r8,0x2
8000a834:	e0 38 fd e0 	sub	r8,130528
8000a838:	e8 69 00 00 	mov	r9,524288
8000a83c:	91 09       	st.w	r8[0x0],r9
		udd_enable_endpoint_bank_autoswitch(ep);
8000a83e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a842:	a3 68       	lsl	r8,0x2
8000a844:	e0 38 ff 00 	sub	r8,130816
8000a848:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a84c:	a3 69       	lsl	r9,0x2
8000a84e:	e0 39 ff 00 	sub	r9,130816
8000a852:	72 09       	ld.w	r9,r9[0x0]
8000a854:	a9 b9       	sbr	r9,0x9
8000a856:	91 09       	st.w	r8[0x0],r9
		b_stall_cleared = true;
8000a858:	30 18       	mov	r8,1
8000a85a:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (b_stall_cleared) {
8000a85e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000a862:	30 08       	mov	r8,0
8000a864:	f0 09 18 00 	cp.b	r9,r8
8000a868:	c1 20       	breq	8000a88c <udd_ep_clear_halt+0x130>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
8000a86a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a86e:	70 08       	ld.w	r8,r8[0x0]
8000a870:	e6 18 80 00 	andh	r8,0x8000,COH
8000a874:	c0 c0       	breq	8000a88c <udd_ep_clear_halt+0x130>
			ptr_job->busy = false;
8000a876:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a87a:	72 08       	ld.w	r8,r9[0x0]
8000a87c:	30 0a       	mov	r10,0
8000a87e:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a882:	93 08       	st.w	r9[0x0],r8
			ptr_job->call_nohalt();
8000a884:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a888:	70 48       	ld.w	r8,r8[0x10]
8000a88a:	5d 18       	icall	r8
		}
	}
	return true;
8000a88c:	30 18       	mov	r8,1
}
8000a88e:	10 9c       	mov	r12,r8
8000a890:	2f dd       	sub	sp,-12
8000a892:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a896:	00 00       	add	r0,r0
8000a898:	00 00       	add	r0,r0
8000a89a:	07 c4       	ld.ub	r4,r3[0x4]

8000a89c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
8000a89c:	eb cd 40 80 	pushm	r7,lr
8000a8a0:	1a 97       	mov	r7,sp
8000a8a2:	20 7d       	sub	sp,28
8000a8a4:	ef 4a ff ec 	st.w	r7[-20],r10
8000a8a8:	ef 49 ff e8 	st.w	r7[-24],r9
8000a8ac:	ef 48 ff e4 	st.w	r7[-28],r8
8000a8b0:	18 98       	mov	r8,r12
8000a8b2:	ef 68 ff f4 	st.b	r7[-12],r8
8000a8b6:	16 98       	mov	r8,r11
8000a8b8:	ef 68 ff f0 	st.b	r7[-16],r8
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
8000a8bc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a8c0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a8c4:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep) {
8000a8c8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a8cc:	30 28       	mov	r8,2
8000a8ce:	f0 09 18 00 	cp.b	r9,r8
8000a8d2:	e0 88 00 04 	brls	8000a8da <udd_ep_run+0x3e>
		return false;
8000a8d6:	30 08       	mov	r8,0
8000a8d8:	c6 88       	rjmp	8000a9a8 <udd_ep_run+0x10c>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000a8da:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a8de:	f0 c9 00 01 	sub	r9,r8,1
8000a8e2:	12 98       	mov	r8,r9
8000a8e4:	a3 68       	lsl	r8,0x2
8000a8e6:	12 08       	add	r8,r9
8000a8e8:	a3 68       	lsl	r8,0x2
8000a8ea:	10 99       	mov	r9,r8
8000a8ec:	4b 18       	lddpc	r8,8000a9b0 <udd_ep_run+0x114>
8000a8ee:	f2 08 00 08 	add	r8,r9,r8
8000a8f2:	ef 48 ff f8 	st.w	r7[-8],r8

	if ((!Is_udd_endpoint_enabled(ep))
8000a8f6:	fe 68 00 00 	mov	r8,-131072
8000a8fa:	70 79       	ld.w	r9,r8[0x1c]
8000a8fc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a900:	30 1a       	mov	r10,1
8000a902:	f4 08 09 48 	lsl	r8,r10,r8
8000a906:	f3 e8 00 08 	and	r8,r9,r8
8000a90a:	c1 00       	breq	8000a92a <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
8000a90c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a910:	a3 68       	lsl	r8,0x2
8000a912:	e0 38 fe 40 	sub	r8,130624
8000a916:	70 08       	ld.w	r8,r8[0x0]
8000a918:	e6 18 00 08 	andh	r8,0x8,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000a91c:	c0 71       	brne	8000a92a <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
8000a91e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a922:	70 08       	ld.w	r8,r8[0x0]
8000a924:	e6 18 20 00 	andh	r8,0x2000,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000a928:	c0 30       	breq	8000a92e <udd_ep_run+0x92>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
8000a92a:	30 08       	mov	r8,0
8000a92c:	c3 e8       	rjmp	8000a9a8 <udd_ep_run+0x10c>
	}

	flags = cpu_irq_save();
8000a92e:	f0 1f 00 22 	mcall	8000a9b4 <udd_ep_run+0x118>
8000a932:	18 98       	mov	r8,r12
8000a934:	ef 48 ff fc 	st.w	r7[-4],r8
	if (ptr_job->busy == true) {
8000a938:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a93c:	70 08       	ld.w	r8,r8[0x0]
8000a93e:	e6 18 80 00 	andh	r8,0x8000,COH
8000a942:	c0 70       	breq	8000a950 <udd_ep_run+0xb4>
		cpu_irq_restore(flags);
8000a944:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a948:	f0 1f 00 1c 	mcall	8000a9b8 <udd_ep_run+0x11c>
		return false; // Job already on going
8000a94c:	30 08       	mov	r8,0
8000a94e:	c2 d8       	rjmp	8000a9a8 <udd_ep_run+0x10c>
	}
	ptr_job->busy = true;
8000a950:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a954:	72 08       	ld.w	r8,r9[0x0]
8000a956:	30 1a       	mov	r10,1
8000a958:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a95c:	93 08       	st.w	r9[0x0],r8
	cpu_irq_restore(flags);
8000a95e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a962:	f0 1f 00 16 	mcall	8000a9b8 <udd_ep_run+0x11c>

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
8000a966:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a96a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a96e:	91 19       	st.w	r8[0x4],r9
	ptr_job->buf_size = buf_size;
8000a970:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a974:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a978:	91 29       	st.w	r8[0x8],r9
	ptr_job->nb_trans = 0;
8000a97a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a97e:	30 09       	mov	r9,0
8000a980:	91 39       	st.w	r8[0xc],r9
	ptr_job->call_trans = callback;
8000a982:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a986:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a98a:	91 49       	st.w	r8[0x10],r9
	ptr_job->b_shortpacket = b_shortpacket;
8000a98c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a990:	72 08       	ld.w	r8,r9[0x0]
8000a992:	ef 3a ff f0 	ld.ub	r10,r7[-16]
8000a996:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000a99a:	93 08       	st.w	r9[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
8000a99c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a9a0:	10 9c       	mov	r12,r8
8000a9a2:	f0 1f 00 07 	mcall	8000a9bc <udd_ep_run+0x120>
	return true;
8000a9a6:	30 18       	mov	r8,1
}
8000a9a8:	10 9c       	mov	r12,r8
8000a9aa:	2f 9d       	sub	sp,-28
8000a9ac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9b0:	00 00       	add	r0,r0
8000a9b2:	07 c4       	ld.ub	r4,r3[0x4]
8000a9b4:	80 00       	ld.sh	r0,r0[0x0]
8000a9b6:	9c 80       	ld.uh	r0,lr[0x0]
8000a9b8:	80 00       	ld.sh	r0,r0[0x0]
8000a9ba:	9c 9e       	ld.uh	lr,lr[0x2]
8000a9bc:	80 00       	ld.sh	r0,r0[0x0]
8000a9be:	b6 f4       	st.b	r11[0x7],r4

8000a9c0 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
8000a9c0:	eb cd 40 80 	pushm	r7,lr
8000a9c4:	1a 97       	mov	r7,sp
8000a9c6:	20 2d       	sub	sp,8
8000a9c8:	18 98       	mov	r8,r12
8000a9ca:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a9ce:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a9d2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a9d6:	ef 68 ff ff 	st.b	r7[-1],r8

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
8000a9da:	fe 68 00 00 	mov	r8,-131072
8000a9de:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a9e2:	20 19       	sub	r9,1
8000a9e4:	fc 1a 02 00 	movh	r10,0x200
8000a9e8:	f4 09 09 49 	lsl	r9,r10,r9
8000a9ec:	91 59       	st.w	r8[0x14],r9
	udd_endpoint_dma_set_control(index, 0);
8000a9ee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a9f2:	a5 68       	lsl	r8,0x4
8000a9f4:	e0 38 fd 00 	sub	r8,130304
8000a9f8:	30 09       	mov	r9,0
8000a9fa:	91 29       	st.w	r8[0x8],r9
	// Kill banks
	udd_disable_endpoint_interrupt(index);
8000a9fc:	fe 68 00 00 	mov	r8,-131072
8000aa00:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000aa04:	e0 6a 10 00 	mov	r10,4096
8000aa08:	f4 09 09 49 	lsl	r9,r10,r9
8000aa0c:	91 59       	st.w	r8[0x14],r9
	while (udd_nb_busy_bank(index)) {
8000aa0e:	c1 28       	rjmp	8000aa32 <udd_ep_abort+0x72>
		udd_kill_last_in_bank(index);
8000aa10:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aa14:	a3 68       	lsl	r8,0x2
8000aa16:	e0 38 fe 10 	sub	r8,130576
8000aa1a:	e0 69 20 00 	mov	r9,8192
8000aa1e:	91 09       	st.w	r8[0x0],r9
		while(Is_udd_killing_last_in_bank(index));
8000aa20:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aa24:	a3 68       	lsl	r8,0x2
8000aa26:	e0 38 fe 40 	sub	r8,130624
8000aa2a:	70 08       	ld.w	r8,r8[0x0]
8000aa2c:	e2 18 20 00 	andl	r8,0x2000,COH
8000aa30:	cf 81       	brne	8000aa20 <udd_ep_abort+0x60>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
8000aa32:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aa36:	a3 68       	lsl	r8,0x2
8000aa38:	e0 38 fe d0 	sub	r8,130768
8000aa3c:	70 08       	ld.w	r8,r8[0x0]
8000aa3e:	e2 18 30 00 	andl	r8,0x3000,COH
8000aa42:	ad 88       	lsr	r8,0xc
8000aa44:	ce 61       	brne	8000aa10 <udd_ep_abort+0x50>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
8000aa46:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000aa4a:	10 9c       	mov	r12,r8
8000aa4c:	f0 1f 00 03 	mcall	8000aa58 <udd_ep_abort+0x98>
}
8000aa50:	2f ed       	sub	sp,-8
8000aa52:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa56:	00 00       	add	r0,r0
8000aa58:	80 00       	ld.sh	r0,r0[0x0]
8000aa5a:	b6 24       	st.h	r11[0x4],r4

8000aa5c <udd_ep_wait_stall_clear>:


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
8000aa5c:	eb cd 40 80 	pushm	r7,lr
8000aa60:	1a 97       	mov	r7,sp
8000aa62:	20 3d       	sub	sp,12
8000aa64:	18 98       	mov	r8,r12
8000aa66:	ef 4b ff f4 	st.w	r7[-12],r11
8000aa6a:	ef 68 ff f8 	st.b	r7[-8],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000aa6e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000aa72:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000aa76:	ef 68 ff f8 	st.b	r7[-8],r8
	if (USB_DEVICE_MAX_EP < ep) {
8000aa7a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aa7e:	30 28       	mov	r8,2
8000aa80:	f0 09 18 00 	cp.b	r9,r8
8000aa84:	e0 88 00 04 	brls	8000aa8c <udd_ep_wait_stall_clear+0x30>
		return false;
8000aa88:	30 08       	mov	r8,0
8000aa8a:	c4 48       	rjmp	8000ab12 <udd_ep_wait_stall_clear+0xb6>
	}

	ptr_job = &udd_ep_job[ep - 1];
8000aa8c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000aa90:	f0 c9 00 01 	sub	r9,r8,1
8000aa94:	12 98       	mov	r8,r9
8000aa96:	a3 68       	lsl	r8,0x2
8000aa98:	12 08       	add	r8,r9
8000aa9a:	a3 68       	lsl	r8,0x2
8000aa9c:	10 99       	mov	r9,r8
8000aa9e:	4a 08       	lddpc	r8,8000ab1c <udd_ep_wait_stall_clear+0xc0>
8000aaa0:	f2 08 00 08 	add	r8,r9,r8
8000aaa4:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!Is_udd_endpoint_enabled(ep)) {
8000aaa8:	fe 68 00 00 	mov	r8,-131072
8000aaac:	70 79       	ld.w	r9,r8[0x1c]
8000aaae:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000aab2:	30 1a       	mov	r10,1
8000aab4:	f4 08 09 48 	lsl	r8,r10,r8
8000aab8:	f3 e8 00 08 	and	r8,r9,r8
8000aabc:	c0 31       	brne	8000aac2 <udd_ep_wait_stall_clear+0x66>
		return false; // Endpoint not enabled
8000aabe:	30 08       	mov	r8,0
8000aac0:	c2 98       	rjmp	8000ab12 <udd_ep_wait_stall_clear+0xb6>
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
8000aac2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aac6:	70 08       	ld.w	r8,r8[0x0]
8000aac8:	e6 18 80 00 	andh	r8,0x8000,COH
8000aacc:	c0 30       	breq	8000aad2 <udd_ep_wait_stall_clear+0x76>
		return false; // Job already on going
8000aace:	30 08       	mov	r8,0
8000aad0:	c2 18       	rjmp	8000ab12 <udd_ep_wait_stall_clear+0xb6>
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000aad2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000aad6:	a3 68       	lsl	r8,0x2
8000aad8:	e0 38 fe 40 	sub	r8,130624
8000aadc:	70 08       	ld.w	r8,r8[0x0]
8000aade:	e6 18 00 08 	andh	r8,0x8,COH
8000aae2:	c0 71       	brne	8000aaf0 <udd_ep_wait_stall_clear+0x94>
			|| ptr_job->stall_requested) {
8000aae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aae8:	70 08       	ld.w	r8,r8[0x0]
8000aaea:	e6 18 20 00 	andh	r8,0x2000,COH
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000aaee:	c0 e0       	breq	8000ab0a <udd_ep_wait_stall_clear+0xae>
			|| ptr_job->stall_requested) {
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
8000aaf0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aaf4:	72 08       	ld.w	r8,r9[0x0]
8000aaf6:	30 1a       	mov	r10,1
8000aaf8:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000aafc:	93 08       	st.w	r9[0x0],r8
		ptr_job->call_nohalt = callback;
8000aafe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab02:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ab06:	91 49       	st.w	r8[0x10],r9
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000ab08:	c0 48       	rjmp	8000ab10 <udd_ep_wait_stall_clear+0xb4>
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
8000ab0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ab0e:	5d 18       	icall	r8
	}
	return true;
8000ab10:	30 18       	mov	r8,1
}
8000ab12:	10 9c       	mov	r12,r8
8000ab14:	2f dd       	sub	sp,-12
8000ab16:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab1a:	00 00       	add	r0,r0
8000ab1c:	00 00       	add	r0,r0
8000ab1e:	07 c4       	ld.ub	r4,r3[0x4]

8000ab20 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
8000ab20:	eb cd 40 80 	pushm	r7,lr
8000ab24:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000ab26:	fe 68 00 00 	mov	r8,-131072
8000ab2a:	fe 69 00 00 	mov	r9,-131072
8000ab2e:	72 09       	ld.w	r9,r9[0x0]
8000ab30:	e0 19 f3 ff 	andl	r9,0xf3ff
8000ab34:	ab b9       	sbr	r9,0xb
8000ab36:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_j();
8000ab38:	fe 68 00 00 	mov	r8,-131072
8000ab3c:	fe 69 00 00 	mov	r9,-131072
8000ab40:	72 09       	ld.w	r9,r9[0x0]
8000ab42:	ad b9       	sbr	r9,0xd
8000ab44:	91 09       	st.w	r8[0x0],r9
}
8000ab46:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ab4a <udd_test_mode_k>:


void udd_test_mode_k(void)
{
8000ab4a:	eb cd 40 80 	pushm	r7,lr
8000ab4e:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000ab50:	fe 68 00 00 	mov	r8,-131072
8000ab54:	fe 69 00 00 	mov	r9,-131072
8000ab58:	72 09       	ld.w	r9,r9[0x0]
8000ab5a:	e0 19 f3 ff 	andl	r9,0xf3ff
8000ab5e:	ab b9       	sbr	r9,0xb
8000ab60:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_k();
8000ab62:	fe 68 00 00 	mov	r8,-131072
8000ab66:	fe 69 00 00 	mov	r9,-131072
8000ab6a:	72 09       	ld.w	r9,r9[0x0]
8000ab6c:	af a9       	sbr	r9,0xe
8000ab6e:	91 09       	st.w	r8[0x0],r9
}
8000ab70:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ab74 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
8000ab74:	eb cd 40 80 	pushm	r7,lr
8000ab78:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000ab7a:	fe 68 00 00 	mov	r8,-131072
8000ab7e:	fe 69 00 00 	mov	r9,-131072
8000ab82:	72 09       	ld.w	r9,r9[0x0]
8000ab84:	e0 19 f3 ff 	andl	r9,0xf3ff
8000ab88:	ab b9       	sbr	r9,0xb
8000ab8a:	91 09       	st.w	r8[0x0],r9
}
8000ab8c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ab90 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
8000ab90:	eb cd 40 80 	pushm	r7,lr
8000ab94:	1a 97       	mov	r7,sp
8000ab96:	21 7d       	sub	sp,92
				0xFF, 0xFF,
		// S, 111111S, {0111111S * 7}
		0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD,
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};
8000ab98:	4d c9       	lddpc	r9,8000ad08 <udd_test_mode_packet+0x178>
8000ab9a:	ee c8 00 5c 	sub	r8,r7,92
8000ab9e:	f2 ea 00 00 	ld.d	r10,r9[0]
8000aba2:	f0 eb 00 00 	st.d	r8[0],r10
8000aba6:	f2 ea 00 08 	ld.d	r10,r9[8]
8000abaa:	f0 eb 00 08 	st.d	r8[8],r10
8000abae:	f2 ea 00 10 	ld.d	r10,r9[16]
8000abb2:	f0 eb 00 10 	st.d	r8[16],r10
8000abb6:	f2 ea 00 18 	ld.d	r10,r9[24]
8000abba:	f0 eb 00 18 	st.d	r8[24],r10
8000abbe:	f2 ea 00 20 	ld.d	r10,r9[32]
8000abc2:	f0 eb 00 20 	st.d	r8[32],r10
8000abc6:	f2 ea 00 28 	ld.d	r10,r9[40]
8000abca:	f0 eb 00 28 	st.d	r8[40],r10
8000abce:	72 ca       	ld.w	r10,r9[0x30]
8000abd0:	91 ca       	st.w	r8[0x30],r10
8000abd2:	f3 39 00 34 	ld.ub	r9,r9[52]
8000abd6:	f1 69 00 34 	st.b	r8[52],r9

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
8000abda:	fe 68 00 00 	mov	r8,-131072
8000abde:	fe 69 00 00 	mov	r9,-131072
8000abe2:	72 79       	ld.w	r9,r9[0x1c]
8000abe4:	a1 c9       	cbr	r9,0x0
8000abe6:	91 79       	st.w	r8[0x1c],r9
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
8000abe8:	fe 68 01 00 	mov	r8,-130816
8000abec:	fe 69 01 00 	mov	r9,-130816
8000abf0:	72 09       	ld.w	r9,r9[0x0]
8000abf2:	12 9a       	mov	r10,r9
8000abf4:	e0 1a e6 83 	andl	r10,0xe683
8000abf8:	34 09       	mov	r9,64
8000abfa:	ef 49 ff f8 	st.w	r7[-8],r9
8000abfe:	30 89       	mov	r9,8
8000ac00:	ef 49 ff fc 	st.w	r7[-4],r9
8000ac04:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ac08:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ac0c:	f2 0b 0c 49 	max	r9,r9,r11
8000ac10:	ef 49 ff f4 	st.w	r7[-12],r9
8000ac14:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ac18:	ef 49 ff ec 	st.w	r7[-20],r9
8000ac1c:	e0 69 04 00 	mov	r9,1024
8000ac20:	ef 49 ff f0 	st.w	r7[-16],r9
8000ac24:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000ac28:	ee fb ff f0 	ld.w	r11,r7[-16]
8000ac2c:	f2 0b 0d 49 	min	r9,r9,r11
8000ac30:	ef 49 ff e8 	st.w	r7[-24],r9
8000ac34:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000ac38:	a1 79       	lsl	r9,0x1
8000ac3a:	20 19       	sub	r9,1
8000ac3c:	f2 09 12 00 	clz	r9,r9
8000ac40:	f2 09 11 1c 	rsub	r9,r9,28
8000ac44:	a5 69       	lsl	r9,0x4
8000ac46:	e2 19 08 7c 	andl	r9,0x87c,COH
8000ac4a:	f5 e9 10 09 	or	r9,r10,r9
8000ac4e:	e8 19 11 00 	orl	r9,0x1100
8000ac52:	91 09       	st.w	r8[0x0],r9
			64, AVR32_USBB_UECFG0_EPBK_SINGLE);
	udd_allocate_memory(0);
8000ac54:	fe 68 01 00 	mov	r8,-130816
8000ac58:	fe 69 01 00 	mov	r9,-130816
8000ac5c:	72 09       	ld.w	r9,r9[0x0]
8000ac5e:	a1 b9       	sbr	r9,0x1
8000ac60:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
8000ac62:	fe 68 00 00 	mov	r8,-131072
8000ac66:	fe 69 00 00 	mov	r9,-131072
8000ac6a:	72 79       	ld.w	r9,r9[0x1c]
8000ac6c:	a1 a9       	sbr	r9,0x0
8000ac6e:	91 79       	st.w	r8[0x1c],r9

	udd_enable_hs_test_mode();
8000ac70:	fe 68 00 00 	mov	r8,-131072
8000ac74:	fe 69 00 00 	mov	r9,-131072
8000ac78:	72 09       	ld.w	r9,r9[0x0]
8000ac7a:	e0 19 f3 ff 	andl	r9,0xf3ff
8000ac7e:	ab b9       	sbr	r9,0xb
8000ac80:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_packet();
8000ac82:	fe 68 00 00 	mov	r8,-131072
8000ac86:	fe 69 00 00 	mov	r9,-131072
8000ac8a:	72 09       	ld.w	r9,r9[0x0]
8000ac8c:	af b9       	sbr	r9,0xf
8000ac8e:	91 09       	st.w	r8[0x0],r9

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000ac90:	fc 18 e0 00 	movh	r8,0xe000
8000ac94:	ef 48 ff dc 	st.w	r7[-36],r8
	ptr_src = test_packet;
8000ac98:	ee c8 00 5c 	sub	r8,r7,92
8000ac9c:	ef 48 ff e0 	st.w	r7[-32],r8

	for (i = 0; i < sizeof(test_packet); i++) {
8000aca0:	30 08       	mov	r8,0
8000aca2:	ef 68 ff db 	st.b	r7[-37],r8
8000aca6:	c1 68       	rjmp	8000acd2 <udd_test_mode_packet+0x142>
		*ptr_dest++ = *ptr_src++;
8000aca8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000acac:	11 88       	ld.ub	r8,r8[0x0]
8000acae:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000acb2:	b2 88       	st.b	r9[0x0],r8
8000acb4:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000acb8:	2f f8       	sub	r8,-1
8000acba:	ef 48 ff dc 	st.w	r7[-36],r8
8000acbe:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000acc2:	2f f8       	sub	r8,-1
8000acc4:	ef 48 ff e0 	st.w	r7[-32],r8

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
8000acc8:	ef 38 ff db 	ld.ub	r8,r7[-37]
8000accc:	2f f8       	sub	r8,-1
8000acce:	ef 68 ff db 	st.b	r7[-37],r8
8000acd2:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000acd6:	33 48       	mov	r8,52
8000acd8:	f0 09 18 00 	cp.b	r9,r8
8000acdc:	fe 98 ff e6 	brls	8000aca8 <udd_test_mode_packet+0x118>
		*ptr_dest++ = *ptr_src++;
	}
	flags = cpu_irq_save();
8000ace0:	f0 1f 00 0b 	mcall	8000ad0c <udd_test_mode_packet+0x17c>
8000ace4:	18 98       	mov	r8,r12
8000ace6:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_in_send_interrupt(0);
8000acea:	fe 68 01 f0 	mov	r8,-130576
8000acee:	30 19       	mov	r9,1
8000acf0:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000acf2:	ee fc ff e4 	ld.w	r12,r7[-28]
8000acf6:	f0 1f 00 07 	mcall	8000ad10 <udd_test_mode_packet+0x180>

	udd_ack_in_send(0);
8000acfa:	fe 68 01 60 	mov	r8,-130720
8000acfe:	30 19       	mov	r9,1
8000ad00:	91 09       	st.w	r8[0x0],r9
}
8000ad02:	2e 9d       	sub	sp,-92
8000ad04:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ad08:	80 00       	ld.sh	r0,r0[0x0]
8000ad0a:	f5 ec 80 00 	sthh.w	r0[r0],r10:b,r12:b
8000ad0e:	9c 80       	ld.uh	r0,lr[0x0]
8000ad10:	80 00       	ld.sh	r0,r0[0x0]
8000ad12:	9c 9e       	ld.uh	lr,lr[0x2]

8000ad14 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
8000ad14:	eb cd 40 80 	pushm	r7,lr
8000ad18:	1a 97       	mov	r7,sp
8000ad1a:	20 7d       	sub	sp,28
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
8000ad1c:	fe 68 00 00 	mov	r8,-131072
8000ad20:	fe 69 00 00 	mov	r9,-131072
8000ad24:	72 09       	ld.w	r9,r9[0x0]
8000ad26:	e0 19 ff 80 	andl	r9,0xff80
8000ad2a:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000ad2c:	fe 68 00 00 	mov	r8,-131072
8000ad30:	fe 69 00 00 	mov	r9,-131072
8000ad34:	72 09       	ld.w	r9,r9[0x0]
8000ad36:	a7 b9       	sbr	r9,0x7
8000ad38:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
8000ad3a:	fe 68 01 00 	mov	r8,-130816
8000ad3e:	fe 69 01 00 	mov	r9,-130816
8000ad42:	72 09       	ld.w	r9,r9[0x0]
8000ad44:	12 9a       	mov	r10,r9
8000ad46:	e0 1a e6 83 	andl	r10,0xe683
8000ad4a:	34 09       	mov	r9,64
8000ad4c:	ef 49 ff f8 	st.w	r7[-8],r9
8000ad50:	30 89       	mov	r9,8
8000ad52:	ef 49 ff fc 	st.w	r7[-4],r9
8000ad56:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ad5a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ad5e:	f2 0b 0c 49 	max	r9,r9,r11
8000ad62:	ef 49 ff f4 	st.w	r7[-12],r9
8000ad66:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ad6a:	ef 49 ff ec 	st.w	r7[-20],r9
8000ad6e:	e0 69 04 00 	mov	r9,1024
8000ad72:	ef 49 ff f0 	st.w	r7[-16],r9
8000ad76:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000ad7a:	ee fb ff f0 	ld.w	r11,r7[-16]
8000ad7e:	f2 0b 0d 49 	min	r9,r9,r11
8000ad82:	ef 49 ff e8 	st.w	r7[-24],r9
8000ad86:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000ad8a:	a1 79       	lsl	r9,0x1
8000ad8c:	20 19       	sub	r9,1
8000ad8e:	f2 09 12 00 	clz	r9,r9
8000ad92:	f2 09 11 1c 	rsub	r9,r9,28
8000ad96:	a5 69       	lsl	r9,0x4
8000ad98:	e2 19 19 7c 	andl	r9,0x197c,COH
8000ad9c:	f5 e9 10 09 	or	r9,r10,r9
8000ada0:	91 09       	st.w	r8[0x0],r9
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
8000ada2:	fe 68 01 00 	mov	r8,-130816
8000ada6:	fe 69 01 00 	mov	r9,-130816
8000adaa:	72 09       	ld.w	r9,r9[0x0]
8000adac:	a1 b9       	sbr	r9,0x1
8000adae:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
8000adb0:	fe 68 00 00 	mov	r8,-131072
8000adb4:	fe 69 00 00 	mov	r9,-131072
8000adb8:	72 79       	ld.w	r9,r9[0x1c]
8000adba:	a1 a9       	sbr	r9,0x0
8000adbc:	91 79       	st.w	r8[0x1c],r9
	flags = cpu_irq_save();
8000adbe:	f0 1f 00 0d 	mcall	8000adf0 <udd_reset_ep_ctrl+0xdc>
8000adc2:	18 98       	mov	r8,r12
8000adc4:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_setup_received_interrupt(0);
8000adc8:	fe 68 01 f0 	mov	r8,-130576
8000adcc:	30 49       	mov	r9,4
8000adce:	91 09       	st.w	r8[0x0],r9
	udd_enable_out_received_interrupt(0);
8000add0:	fe 68 01 f0 	mov	r8,-130576
8000add4:	30 29       	mov	r9,2
8000add6:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint_interrupt(0);
8000add8:	fe 68 00 00 	mov	r8,-131072
8000addc:	e0 69 10 00 	mov	r9,4096
8000ade0:	91 69       	st.w	r8[0x18],r9
	cpu_irq_restore(flags);
8000ade2:	ee fc ff e4 	ld.w	r12,r7[-28]
8000ade6:	f0 1f 00 04 	mcall	8000adf4 <udd_reset_ep_ctrl+0xe0>
}
8000adea:	2f 9d       	sub	sp,-28
8000adec:	e3 cd 80 80 	ldm	sp++,r7,pc
8000adf0:	80 00       	ld.sh	r0,r0[0x0]
8000adf2:	9c 80       	ld.uh	r0,lr[0x0]
8000adf4:	80 00       	ld.sh	r0,r0[0x0]
8000adf6:	9c 9e       	ld.uh	lr,lr[0x2]

8000adf8 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
8000adf8:	eb cd 40 80 	pushm	r7,lr
8000adfc:	1a 97       	mov	r7,sp
8000adfe:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
8000ae00:	f0 1f 00 10 	mcall	8000ae40 <udd_ctrl_init+0x48>
8000ae04:	18 98       	mov	r8,r12
8000ae06:	ef 48 ff fc 	st.w	r7[-4],r8
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
8000ae0a:	fe 68 02 20 	mov	r8,-130528
8000ae0e:	30 19       	mov	r9,1
8000ae10:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000ae12:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ae16:	f0 1f 00 0c 	mcall	8000ae44 <udd_ctrl_init+0x4c>

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
8000ae1a:	fe 68 01 60 	mov	r8,-130720
8000ae1e:	30 29       	mov	r9,2
8000ae20:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
8000ae22:	48 a8       	lddpc	r8,8000ae48 <udd_ctrl_init+0x50>
8000ae24:	30 09       	mov	r9,0
8000ae26:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000ae28:	48 88       	lddpc	r8,8000ae48 <udd_ctrl_init+0x50>
8000ae2a:	30 09       	mov	r9,0
8000ae2c:	91 59       	st.w	r8[0x14],r9
	udd_g_ctrlreq.payload_size = 0;
8000ae2e:	48 79       	lddpc	r9,8000ae48 <udd_ctrl_init+0x50>
8000ae30:	30 08       	mov	r8,0
8000ae32:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
8000ae34:	48 68       	lddpc	r8,8000ae4c <udd_ctrl_init+0x54>
8000ae36:	30 09       	mov	r9,0
8000ae38:	91 09       	st.w	r8[0x0],r9
}
8000ae3a:	2f fd       	sub	sp,-4
8000ae3c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ae40:	80 00       	ld.sh	r0,r0[0x0]
8000ae42:	9c 80       	ld.uh	r0,lr[0x0]
8000ae44:	80 00       	ld.sh	r0,r0[0x0]
8000ae46:	9c 9e       	ld.uh	lr,lr[0x2]
8000ae48:	00 00       	add	r0,r0
8000ae4a:	10 0c       	add	r12,r8
8000ae4c:	00 00       	add	r0,r0
8000ae4e:	07 bc       	ld.ub	r12,r3[0x3]

8000ae50 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
8000ae50:	eb cd 40 80 	pushm	r7,lr
8000ae54:	1a 97       	mov	r7,sp
8000ae56:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
8000ae58:	4c b8       	lddpc	r8,8000af84 <udd_ctrl_setup_received+0x134>
8000ae5a:	70 08       	ld.w	r8,r8[0x0]
8000ae5c:	58 08       	cp.w	r8,0
8000ae5e:	c0 50       	breq	8000ae68 <udd_ctrl_setup_received+0x18>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
8000ae60:	f0 1f 00 4a 	mcall	8000af88 <udd_ctrl_setup_received+0x138>

		// Reinitializes control endpoint management
		udd_ctrl_init();
8000ae64:	f0 1f 00 4a 	mcall	8000af8c <udd_ctrl_setup_received+0x13c>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
8000ae68:	fe 68 01 30 	mov	r8,-130768
8000ae6c:	70 08       	ld.w	r8,r8[0x0]
8000ae6e:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000ae72:	b5 88       	lsr	r8,0x14
8000ae74:	58 88       	cp.w	r8,8
8000ae76:	c0 80       	breq	8000ae86 <udd_ctrl_setup_received+0x36>
		udd_ctrl_stall_data();
8000ae78:	f0 1f 00 46 	mcall	8000af90 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
8000ae7c:	fe 68 01 60 	mov	r8,-130720
8000ae80:	30 49       	mov	r9,4
8000ae82:	91 09       	st.w	r8[0x0],r9
		return; // Error data number doesn't correspond to SETUP packet
8000ae84:	c7 d8       	rjmp	8000af7e <udd_ctrl_setup_received+0x12e>
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
8000ae86:	fc 18 e0 00 	movh	r8,0xe000
8000ae8a:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < 8; i++) {
8000ae8e:	30 08       	mov	r8,0
8000ae90:	ef 68 ff fb 	st.b	r7[-5],r8
8000ae94:	c1 38       	rjmp	8000aeba <udd_ctrl_setup_received+0x6a>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
8000ae96:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000ae9a:	4b f8       	lddpc	r8,8000af94 <udd_ctrl_setup_received+0x144>
8000ae9c:	10 09       	add	r9,r8
8000ae9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aea2:	11 88       	ld.ub	r8,r8[0x0]
8000aea4:	b2 88       	st.b	r9[0x0],r8
8000aea6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aeaa:	2f f8       	sub	r8,-1
8000aeac:	ef 48 ff fc 	st.w	r7[-4],r8
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
8000aeb0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000aeb4:	2f f8       	sub	r8,-1
8000aeb6:	ef 68 ff fb 	st.b	r7[-5],r8
8000aeba:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000aebe:	30 78       	mov	r8,7
8000aec0:	f0 09 18 00 	cp.b	r9,r8
8000aec4:	fe 98 ff e9 	brls	8000ae96 <udd_ctrl_setup_received+0x46>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
8000aec8:	4b 38       	lddpc	r8,8000af94 <udd_ctrl_setup_received+0x144>
8000aeca:	90 18       	ld.sh	r8,r8[0x2]
8000aecc:	5c 88       	casts.h	r8
8000aece:	5c c8       	swap.bh	r8
8000aed0:	5c 88       	casts.h	r8
8000aed2:	4b 19       	lddpc	r9,8000af94 <udd_ctrl_setup_received+0x144>
8000aed4:	b2 18       	st.h	r9[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
8000aed6:	4b 08       	lddpc	r8,8000af94 <udd_ctrl_setup_received+0x144>
8000aed8:	90 28       	ld.sh	r8,r8[0x4]
8000aeda:	5c 88       	casts.h	r8
8000aedc:	5c c8       	swap.bh	r8
8000aede:	5c 88       	casts.h	r8
8000aee0:	4a d9       	lddpc	r9,8000af94 <udd_ctrl_setup_received+0x144>
8000aee2:	b2 28       	st.h	r9[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
8000aee4:	4a c8       	lddpc	r8,8000af94 <udd_ctrl_setup_received+0x144>
8000aee6:	90 38       	ld.sh	r8,r8[0x6]
8000aee8:	5c 88       	casts.h	r8
8000aeea:	5c c8       	swap.bh	r8
8000aeec:	5c 88       	casts.h	r8
8000aeee:	4a a9       	lddpc	r9,8000af94 <udd_ctrl_setup_received+0x144>
8000aef0:	b2 38       	st.h	r9[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
8000aef2:	f0 1f 00 2a 	mcall	8000af98 <udd_ctrl_setup_received+0x148>
8000aef6:	18 98       	mov	r8,r12
8000aef8:	ec 18 00 01 	eorl	r8,0x1
8000aefc:	5c 58       	castu.b	r8
8000aefe:	c0 80       	breq	8000af0e <udd_ctrl_setup_received+0xbe>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
8000af00:	f0 1f 00 24 	mcall	8000af90 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
8000af04:	fe 68 01 60 	mov	r8,-130720
8000af08:	30 49       	mov	r9,4
8000af0a:	91 09       	st.w	r8[0x0],r9
		return;
8000af0c:	c3 98       	rjmp	8000af7e <udd_ctrl_setup_received+0x12e>
	}
	udd_ack_setup_received(0);
8000af0e:	fe 68 01 60 	mov	r8,-130720
8000af12:	30 49       	mov	r9,4
8000af14:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
8000af16:	4a 08       	lddpc	r8,8000af94 <udd_ctrl_setup_received+0x144>
8000af18:	11 88       	ld.ub	r8,r8[0x0]
8000af1a:	10 99       	mov	r9,r8
8000af1c:	30 08       	mov	r8,0
8000af1e:	f0 09 18 00 	cp.b	r9,r8
8000af22:	c0 d4       	brge	8000af3c <udd_ctrl_setup_received+0xec>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
8000af24:	49 e9       	lddpc	r9,8000af9c <udd_ctrl_setup_received+0x14c>
8000af26:	30 08       	mov	r8,0
8000af28:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000af2a:	49 e9       	lddpc	r9,8000afa0 <udd_ctrl_setup_received+0x150>
8000af2c:	30 08       	mov	r8,0
8000af2e:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
8000af30:	49 58       	lddpc	r8,8000af84 <udd_ctrl_setup_received+0x134>
8000af32:	30 29       	mov	r9,2
8000af34:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
8000af36:	f0 1f 00 1c 	mcall	8000afa4 <udd_ctrl_setup_received+0x154>
8000af3a:	c2 28       	rjmp	8000af7e <udd_ctrl_setup_received+0x12e>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
8000af3c:	49 68       	lddpc	r8,8000af94 <udd_ctrl_setup_received+0x144>
8000af3e:	90 38       	ld.sh	r8,r8[0x6]
8000af40:	58 08       	cp.w	r8,0
8000af42:	c0 41       	brne	8000af4a <udd_ctrl_setup_received+0xfa>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
8000af44:	f0 1f 00 19 	mcall	8000afa8 <udd_ctrl_setup_received+0x158>
			return;
8000af48:	c1 b8       	rjmp	8000af7e <udd_ctrl_setup_received+0x12e>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
8000af4a:	49 59       	lddpc	r9,8000af9c <udd_ctrl_setup_received+0x14c>
8000af4c:	30 08       	mov	r8,0
8000af4e:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000af50:	49 49       	lddpc	r9,8000afa0 <udd_ctrl_setup_received+0x150>
8000af52:	30 08       	mov	r8,0
8000af54:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
8000af56:	48 c8       	lddpc	r8,8000af84 <udd_ctrl_setup_received+0x134>
8000af58:	30 19       	mov	r9,1
8000af5a:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
8000af5c:	fe 68 01 60 	mov	r8,-130720
8000af60:	31 09       	mov	r9,16
8000af62:	91 09       	st.w	r8[0x0],r9
		flags = cpu_irq_save();
8000af64:	f0 1f 00 12 	mcall	8000afac <udd_ctrl_setup_received+0x15c>
8000af68:	18 98       	mov	r8,r12
8000af6a:	ef 48 ff f4 	st.w	r7[-12],r8
		udd_enable_nak_in_interrupt(0);
8000af6e:	fe 68 01 f0 	mov	r8,-130576
8000af72:	31 09       	mov	r9,16
8000af74:	91 09       	st.w	r8[0x0],r9
		cpu_irq_restore(flags);
8000af76:	ee fc ff f4 	ld.w	r12,r7[-12]
8000af7a:	f0 1f 00 0e 	mcall	8000afb0 <udd_ctrl_setup_received+0x160>
	}
}
8000af7e:	2f dd       	sub	sp,-12
8000af80:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af84:	00 00       	add	r0,r0
8000af86:	07 bc       	ld.ub	r12,r3[0x3]
8000af88:	80 00       	ld.sh	r0,r0[0x0]
8000af8a:	b4 78       	st.h	r10[0xe],r8
8000af8c:	80 00       	ld.sh	r0,r0[0x0]
8000af8e:	ad f8       	*unknown*
8000af90:	80 00       	ld.sh	r0,r0[0x0]
8000af92:	b3 c0       	cbr	r0,0x12
8000af94:	00 00       	add	r0,r0
8000af96:	10 0c       	add	r12,r8
8000af98:	80 00       	ld.sh	r0,r0[0x0]
8000af9a:	e2 50 00 00 	cp.w	r0,196608
8000af9e:	07 c0       	ld.ub	r0,r3[0x4]
8000afa0:	00 00       	add	r0,r0
8000afa2:	07 c2       	ld.ub	r2,r3[0x4]
8000afa4:	80 00       	ld.sh	r0,r0[0x0]
8000afa6:	af b4       	sbr	r4,0xf
8000afa8:	80 00       	ld.sh	r0,r0[0x0]
8000afaa:	b3 e0       	*unknown*
8000afac:	80 00       	ld.sh	r0,r0[0x0]
8000afae:	9c 80       	ld.uh	r0,lr[0x0]
8000afb0:	80 00       	ld.sh	r0,r0[0x0]
8000afb2:	9c 9e       	ld.uh	lr,lr[0x2]

8000afb4 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
8000afb4:	eb cd 40 80 	pushm	r7,lr
8000afb8:	1a 97       	mov	r7,sp
8000afba:	20 4d       	sub	sp,16
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
8000afbc:	f0 1f 00 5c 	mcall	8000b12c <udd_ctrl_in_sent+0x178>
8000afc0:	18 98       	mov	r8,r12
8000afc2:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_disable_in_send_interrupt(0);
8000afc6:	fe 68 02 20 	mov	r8,-130528
8000afca:	30 19       	mov	r9,1
8000afcc:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000afce:	ee fc ff fc 	ld.w	r12,r7[-4]
8000afd2:	f0 1f 00 58 	mcall	8000b130 <udd_ctrl_in_sent+0x17c>

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000afd6:	4d 88       	lddpc	r8,8000b134 <udd_ctrl_in_sent+0x180>
8000afd8:	70 08       	ld.w	r8,r8[0x0]
8000afda:	58 38       	cp.w	r8,3
8000afdc:	c0 61       	brne	8000afe8 <udd_ctrl_in_sent+0x34>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
8000afde:	f0 1f 00 57 	mcall	8000b138 <udd_ctrl_in_sent+0x184>
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000afe2:	f0 1f 00 57 	mcall	8000b13c <udd_ctrl_in_sent+0x188>
		return;
8000afe6:	c9 f8       	rjmp	8000b124 <udd_ctrl_in_sent+0x170>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000afe8:	4d 68       	lddpc	r8,8000b140 <udd_ctrl_in_sent+0x18c>
8000afea:	90 69       	ld.sh	r9,r8[0xc]
8000afec:	4d 68       	lddpc	r8,8000b144 <udd_ctrl_in_sent+0x190>
8000afee:	90 08       	ld.sh	r8,r8[0x0]
8000aff0:	10 19       	sub	r9,r8
8000aff2:	ef 59 ff f0 	st.h	r7[-16],r9
	if (0 == nb_remain) {
8000aff6:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000affa:	30 08       	mov	r8,0
8000affc:	f0 09 19 00 	cp.h	r9,r8
8000b000:	c2 b1       	brne	8000b056 <udd_ctrl_in_sent+0xa2>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000b002:	4d 28       	lddpc	r8,8000b148 <udd_ctrl_in_sent+0x194>
8000b004:	90 09       	ld.sh	r9,r8[0x0]
8000b006:	4d 08       	lddpc	r8,8000b144 <udd_ctrl_in_sent+0x190>
8000b008:	90 08       	ld.sh	r8,r8[0x0]
8000b00a:	f2 08 00 08 	add	r8,r9,r8
8000b00e:	5c 88       	casts.h	r8
8000b010:	4c e9       	lddpc	r9,8000b148 <udd_ctrl_in_sent+0x194>
8000b012:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
8000b014:	4c b8       	lddpc	r8,8000b140 <udd_ctrl_in_sent+0x18c>
8000b016:	90 39       	ld.sh	r9,r8[0x6]
8000b018:	4c c8       	lddpc	r8,8000b148 <udd_ctrl_in_sent+0x194>
8000b01a:	90 08       	ld.sh	r8,r8[0x0]
8000b01c:	f0 09 19 00 	cp.h	r9,r8
8000b020:	c0 50       	breq	8000b02a <udd_ctrl_in_sent+0x76>
8000b022:	4c b8       	lddpc	r8,8000b14c <udd_ctrl_in_sent+0x198>
8000b024:	11 88       	ld.ub	r8,r8[0x0]
8000b026:	58 08       	cp.w	r8,0
8000b028:	c0 40       	breq	8000b030 <udd_ctrl_in_sent+0x7c>
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
8000b02a:	f0 1f 00 4a 	mcall	8000b150 <udd_ctrl_in_sent+0x19c>
			return;
8000b02e:	c7 b8       	rjmp	8000b124 <udd_ctrl_in_sent+0x170>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
8000b030:	4c 48       	lddpc	r8,8000b140 <udd_ctrl_in_sent+0x18c>
8000b032:	70 58       	ld.w	r8,r8[0x14]
8000b034:	58 08       	cp.w	r8,0
8000b036:	c1 00       	breq	8000b056 <udd_ctrl_in_sent+0xa2>
8000b038:	4c 28       	lddpc	r8,8000b140 <udd_ctrl_in_sent+0x18c>
8000b03a:	70 58       	ld.w	r8,r8[0x14]
8000b03c:	5d 18       	icall	r8
8000b03e:	18 98       	mov	r8,r12
8000b040:	ec 18 00 01 	eorl	r8,0x1
8000b044:	5c 58       	castu.b	r8
8000b046:	c0 81       	brne	8000b056 <udd_ctrl_in_sent+0xa2>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
8000b048:	4b f9       	lddpc	r9,8000b144 <udd_ctrl_in_sent+0x190>
8000b04a:	30 08       	mov	r8,0
8000b04c:	b2 08       	st.h	r9[0x0],r8
			nb_remain = udd_g_ctrlreq.payload_size;
8000b04e:	4b d8       	lddpc	r8,8000b140 <udd_ctrl_in_sent+0x18c>
8000b050:	90 68       	ld.sh	r8,r8[0xc]
8000b052:	ef 58 ff f0 	st.h	r7[-16],r8
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
8000b056:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000b05a:	33 f8       	mov	r8,63
8000b05c:	f0 09 19 00 	cp.h	r9,r8
8000b060:	e0 88 00 09 	brls	8000b072 <udd_ctrl_in_sent+0xbe>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
8000b064:	34 08       	mov	r8,64
8000b066:	ef 58 ff f0 	st.h	r7[-16],r8
		b_shortpacket = false;
8000b06a:	4b 99       	lddpc	r9,8000b14c <udd_ctrl_in_sent+0x198>
8000b06c:	30 08       	mov	r8,0
8000b06e:	b2 88       	st.b	r9[0x0],r8
8000b070:	c0 48       	rjmp	8000b078 <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
8000b072:	4b 79       	lddpc	r9,8000b14c <udd_ctrl_in_sent+0x198>
8000b074:	30 18       	mov	r8,1
8000b076:	b2 88       	st.b	r9[0x0],r8
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000b078:	fc 18 e0 00 	movh	r8,0xe000
8000b07c:	ef 48 ff f4 	st.w	r7[-12],r8
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000b080:	4b 08       	lddpc	r8,8000b140 <udd_ctrl_in_sent+0x18c>
8000b082:	70 29       	ld.w	r9,r8[0x8]
8000b084:	4b 08       	lddpc	r8,8000b144 <udd_ctrl_in_sent+0x190>
8000b086:	90 08       	ld.sh	r8,r8[0x0]
8000b088:	5c 78       	castu.h	r8
8000b08a:	f2 08 00 08 	add	r8,r9,r8
8000b08e:	ef 48 ff f8 	st.w	r7[-8],r8
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
8000b092:	f0 1f 00 27 	mcall	8000b12c <udd_ctrl_in_sent+0x178>
8000b096:	18 98       	mov	r8,r12
8000b098:	ef 48 ff fc 	st.w	r7[-4],r8
	if (Is_udd_out_received(0)) {
8000b09c:	fe 68 01 30 	mov	r8,-130768
8000b0a0:	70 08       	ld.w	r8,r8[0x0]
8000b0a2:	e2 18 00 02 	andl	r8,0x2,COH
8000b0a6:	c0 90       	breq	8000b0b8 <udd_ctrl_in_sent+0x104>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
8000b0a8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b0ac:	f0 1f 00 21 	mcall	8000b130 <udd_ctrl_in_sent+0x17c>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000b0b0:	4a 18       	lddpc	r8,8000b134 <udd_ctrl_in_sent+0x180>
8000b0b2:	30 49       	mov	r9,4
8000b0b4:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
8000b0b6:	c3 78       	rjmp	8000b124 <udd_ctrl_in_sent+0x170>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000b0b8:	30 08       	mov	r8,0
8000b0ba:	ef 68 ff f3 	st.b	r7[-13],r8
8000b0be:	c1 68       	rjmp	8000b0ea <udd_ctrl_in_sent+0x136>
		*ptr_dest++ = *ptr_src++;
8000b0c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0c4:	11 88       	ld.ub	r8,r8[0x0]
8000b0c6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b0ca:	b2 88       	st.b	r9[0x0],r8
8000b0cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b0d0:	2f f8       	sub	r8,-1
8000b0d2:	ef 48 ff f4 	st.w	r7[-12],r8
8000b0d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0da:	2f f8       	sub	r8,-1
8000b0dc:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000b0e0:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000b0e4:	2f f8       	sub	r8,-1
8000b0e6:	ef 68 ff f3 	st.b	r7[-13],r8
8000b0ea:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000b0ee:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000b0f2:	f0 09 19 00 	cp.h	r9,r8
8000b0f6:	fe 9b ff e5 	brhi	8000b0c0 <udd_ctrl_in_sent+0x10c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
8000b0fa:	49 38       	lddpc	r8,8000b144 <udd_ctrl_in_sent+0x190>
8000b0fc:	90 08       	ld.sh	r8,r8[0x0]
8000b0fe:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000b102:	f2 08 00 08 	add	r8,r9,r8
8000b106:	5c 88       	casts.h	r8
8000b108:	48 f9       	lddpc	r9,8000b144 <udd_ctrl_in_sent+0x190>
8000b10a:	b2 08       	st.h	r9[0x0],r8

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
8000b10c:	fe 68 01 60 	mov	r8,-130720
8000b110:	30 19       	mov	r9,1
8000b112:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
8000b114:	fe 68 01 f0 	mov	r8,-130576
8000b118:	30 19       	mov	r9,1
8000b11a:	91 09       	st.w	r8[0x0],r9
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
8000b11c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b120:	f0 1f 00 04 	mcall	8000b130 <udd_ctrl_in_sent+0x17c>
}
8000b124:	2f cd       	sub	sp,-16
8000b126:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b12a:	00 00       	add	r0,r0
8000b12c:	80 00       	ld.sh	r0,r0[0x0]
8000b12e:	9c 80       	ld.uh	r0,lr[0x0]
8000b130:	80 00       	ld.sh	r0,r0[0x0]
8000b132:	9c 9e       	ld.uh	lr,lr[0x2]
8000b134:	00 00       	add	r0,r0
8000b136:	07 bc       	ld.ub	r12,r3[0x3]
8000b138:	80 00       	ld.sh	r0,r0[0x0]
8000b13a:	b4 78       	st.h	r10[0xe],r8
8000b13c:	80 00       	ld.sh	r0,r0[0x0]
8000b13e:	ad f8       	*unknown*
8000b140:	00 00       	add	r0,r0
8000b142:	10 0c       	add	r12,r8
8000b144:	00 00       	add	r0,r0
8000b146:	07 c2       	ld.ub	r2,r3[0x4]
8000b148:	00 00       	add	r0,r0
8000b14a:	07 c0       	ld.ub	r0,r3[0x4]
8000b14c:	00 00       	add	r0,r0
8000b14e:	07 ec       	ld.ub	r12,r3[0x6]
8000b150:	80 00       	ld.sh	r0,r0[0x0]
8000b152:	b4 34       	st.h	r10[0x6],r4

8000b154 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
8000b154:	eb cd 40 80 	pushm	r7,lr
8000b158:	1a 97       	mov	r7,sp
8000b15a:	20 4d       	sub	sp,16
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
8000b15c:	4f 18       	lddpc	r8,8000b320 <udd_ctrl_out_received+0x1cc>
8000b15e:	70 08       	ld.w	r8,r8[0x0]
8000b160:	58 18       	cp.w	r8,1
8000b162:	c1 10       	breq	8000b184 <udd_ctrl_out_received+0x30>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000b164:	4e f8       	lddpc	r8,8000b320 <udd_ctrl_out_received+0x1cc>
8000b166:	70 08       	ld.w	r8,r8[0x0]
8000b168:	58 28       	cp.w	r8,2
8000b16a:	c0 50       	breq	8000b174 <udd_ctrl_out_received+0x20>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
8000b16c:	4e d8       	lddpc	r8,8000b320 <udd_ctrl_out_received+0x1cc>
8000b16e:	70 08       	ld.w	r8,r8[0x0]
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000b170:	58 48       	cp.w	r8,4
8000b172:	c0 41       	brne	8000b17a <udd_ctrl_out_received+0x26>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
8000b174:	f0 1f 00 6c 	mcall	8000b324 <udd_ctrl_out_received+0x1d0>
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000b178:	c0 38       	rjmp	8000b17e <udd_ctrl_out_received+0x2a>
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
8000b17a:	f0 1f 00 6c 	mcall	8000b328 <udd_ctrl_out_received+0x1d4>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000b17e:	f0 1f 00 6c 	mcall	8000b32c <udd_ctrl_out_received+0x1d8>
		return;
8000b182:	cc b8       	rjmp	8000b318 <udd_ctrl_out_received+0x1c4>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
8000b184:	fe 68 01 30 	mov	r8,-130768
8000b188:	70 08       	ld.w	r8,r8[0x0]
8000b18a:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000b18e:	b5 88       	lsr	r8,0x14
8000b190:	ef 58 ff f6 	st.h	r7[-10],r8
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
8000b194:	4e 78       	lddpc	r8,8000b330 <udd_ctrl_out_received+0x1dc>
8000b196:	90 68       	ld.sh	r8,r8[0xc]
8000b198:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b19c:	4e 68       	lddpc	r8,8000b334 <udd_ctrl_out_received+0x1e0>
8000b19e:	90 08       	ld.sh	r8,r8[0x0]
8000b1a0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b1a4:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000b1a8:	f4 08 00 08 	add	r8,r10,r8
8000b1ac:	10 39       	cp.w	r9,r8
8000b1ae:	c0 84       	brge	8000b1be <udd_ctrl_out_received+0x6a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
8000b1b0:	4e 08       	lddpc	r8,8000b330 <udd_ctrl_out_received+0x1dc>
8000b1b2:	90 69       	ld.sh	r9,r8[0xc]
8000b1b4:	4e 08       	lddpc	r8,8000b334 <udd_ctrl_out_received+0x1e0>
8000b1b6:	90 08       	ld.sh	r8,r8[0x0]
8000b1b8:	10 19       	sub	r9,r8
8000b1ba:	ef 59 ff f6 	st.h	r7[-10],r9
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000b1be:	fc 18 e0 00 	movh	r8,0xe000
8000b1c2:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000b1c6:	4d b8       	lddpc	r8,8000b330 <udd_ctrl_out_received+0x1dc>
8000b1c8:	70 29       	ld.w	r9,r8[0x8]
8000b1ca:	4d b8       	lddpc	r8,8000b334 <udd_ctrl_out_received+0x1e0>
8000b1cc:	90 08       	ld.sh	r8,r8[0x0]
8000b1ce:	5c 78       	castu.h	r8
8000b1d0:	f2 08 00 08 	add	r8,r9,r8
8000b1d4:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < nb_data; i++) {
8000b1d8:	30 08       	mov	r8,0
8000b1da:	ef 68 ff f5 	st.b	r7[-11],r8
8000b1de:	c1 68       	rjmp	8000b20a <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = *ptr_src++;
8000b1e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1e4:	11 88       	ld.ub	r8,r8[0x0]
8000b1e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b1ea:	b2 88       	st.b	r9[0x0],r8
8000b1ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b1f0:	2f f8       	sub	r8,-1
8000b1f2:	ef 48 ff fc 	st.w	r7[-4],r8
8000b1f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1fa:	2f f8       	sub	r8,-1
8000b1fc:	ef 48 ff f8 	st.w	r7[-8],r8
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
8000b200:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000b204:	2f f8       	sub	r8,-1
8000b206:	ef 68 ff f5 	st.b	r7[-11],r8
8000b20a:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000b20e:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000b212:	f0 09 19 00 	cp.h	r9,r8
8000b216:	fe 9b ff e5 	brhi	8000b1e0 <udd_ctrl_out_received+0x8c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
8000b21a:	4c 78       	lddpc	r8,8000b334 <udd_ctrl_out_received+0x1e0>
8000b21c:	90 08       	ld.sh	r8,r8[0x0]
8000b21e:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000b222:	f2 08 00 08 	add	r8,r9,r8
8000b226:	5c 88       	casts.h	r8
8000b228:	4c 39       	lddpc	r9,8000b334 <udd_ctrl_out_received+0x1e0>
8000b22a:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000b22c:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000b230:	34 08       	mov	r8,64
8000b232:	f0 09 19 00 	cp.h	r9,r8
8000b236:	c1 11       	brne	8000b258 <udd_ctrl_out_received+0x104>
			|| (udd_g_ctrlreq.req.wLength <=
8000b238:	4b e8       	lddpc	r8,8000b330 <udd_ctrl_out_received+0x1dc>
8000b23a:	90 38       	ld.sh	r8,r8[0x6]
8000b23c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
					(udd_ctrl_prev_payload_nb_trans +
8000b240:	4b e8       	lddpc	r8,8000b338 <udd_ctrl_out_received+0x1e4>
8000b242:	90 08       	ld.sh	r8,r8[0x0]
8000b244:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b248:	4b b8       	lddpc	r8,8000b334 <udd_ctrl_out_received+0x1e0>
8000b24a:	90 08       	ld.sh	r8,r8[0x0]
8000b24c:	5c 78       	castu.h	r8
8000b24e:	f4 08 00 08 	add	r8,r10,r8
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000b252:	10 39       	cp.w	r9,r8
8000b254:	e0 89 00 20 	brgt	8000b294 <udd_ctrl_out_received+0x140>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
8000b258:	4b 78       	lddpc	r8,8000b334 <udd_ctrl_out_received+0x1e0>
8000b25a:	90 08       	ld.sh	r8,r8[0x0]
8000b25c:	4b 59       	lddpc	r9,8000b330 <udd_ctrl_out_received+0x1dc>
8000b25e:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
8000b260:	4b 48       	lddpc	r8,8000b330 <udd_ctrl_out_received+0x1dc>
8000b262:	70 58       	ld.w	r8,r8[0x14]
8000b264:	58 08       	cp.w	r8,0
8000b266:	c1 00       	breq	8000b286 <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
8000b268:	4b 28       	lddpc	r8,8000b330 <udd_ctrl_out_received+0x1dc>
8000b26a:	70 58       	ld.w	r8,r8[0x14]
8000b26c:	5d 18       	icall	r8
8000b26e:	18 98       	mov	r8,r12
8000b270:	ec 18 00 01 	eorl	r8,0x1
8000b274:	5c 58       	castu.b	r8
8000b276:	c0 80       	breq	8000b286 <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
8000b278:	f0 1f 00 2c 	mcall	8000b328 <udd_ctrl_out_received+0x1d4>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
8000b27c:	fe 68 01 60 	mov	r8,-130720
8000b280:	30 29       	mov	r9,2
8000b282:	91 09       	st.w	r8[0x0],r9
				return;
8000b284:	c4 a8       	rjmp	8000b318 <udd_ctrl_out_received+0x1c4>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
8000b286:	fe 68 01 60 	mov	r8,-130720
8000b28a:	30 29       	mov	r9,2
8000b28c:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
8000b28e:	f0 1f 00 2c 	mcall	8000b33c <udd_ctrl_out_received+0x1e8>
		return;
8000b292:	c4 38       	rjmp	8000b318 <udd_ctrl_out_received+0x1c4>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
8000b294:	4a 78       	lddpc	r8,8000b330 <udd_ctrl_out_received+0x1dc>
8000b296:	90 69       	ld.sh	r9,r8[0xc]
8000b298:	4a 78       	lddpc	r8,8000b334 <udd_ctrl_out_received+0x1e0>
8000b29a:	90 08       	ld.sh	r8,r8[0x0]
8000b29c:	f0 09 19 00 	cp.h	r9,r8
8000b2a0:	c2 71       	brne	8000b2ee <udd_ctrl_out_received+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
8000b2a2:	4a 48       	lddpc	r8,8000b330 <udd_ctrl_out_received+0x1dc>
8000b2a4:	70 58       	ld.w	r8,r8[0x14]
8000b2a6:	58 08       	cp.w	r8,0
8000b2a8:	c0 81       	brne	8000b2b8 <udd_ctrl_out_received+0x164>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
8000b2aa:	f0 1f 00 20 	mcall	8000b328 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000b2ae:	fe 68 01 60 	mov	r8,-130720
8000b2b2:	30 29       	mov	r9,2
8000b2b4:	91 09       	st.w	r8[0x0],r9
			return;
8000b2b6:	c3 18       	rjmp	8000b318 <udd_ctrl_out_received+0x1c4>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
8000b2b8:	49 e8       	lddpc	r8,8000b330 <udd_ctrl_out_received+0x1dc>
8000b2ba:	70 58       	ld.w	r8,r8[0x14]
8000b2bc:	5d 18       	icall	r8
8000b2be:	18 98       	mov	r8,r12
8000b2c0:	ec 18 00 01 	eorl	r8,0x1
8000b2c4:	5c 58       	castu.b	r8
8000b2c6:	c0 80       	breq	8000b2d6 <udd_ctrl_out_received+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
8000b2c8:	f0 1f 00 18 	mcall	8000b328 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000b2cc:	fe 68 01 60 	mov	r8,-130720
8000b2d0:	30 29       	mov	r9,2
8000b2d2:	91 09       	st.w	r8[0x0],r9
			return;
8000b2d4:	c2 28       	rjmp	8000b318 <udd_ctrl_out_received+0x1c4>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000b2d6:	49 98       	lddpc	r8,8000b338 <udd_ctrl_out_received+0x1e4>
8000b2d8:	90 09       	ld.sh	r9,r8[0x0]
8000b2da:	49 78       	lddpc	r8,8000b334 <udd_ctrl_out_received+0x1e0>
8000b2dc:	90 08       	ld.sh	r8,r8[0x0]
8000b2de:	f2 08 00 08 	add	r8,r9,r8
8000b2e2:	5c 88       	casts.h	r8
8000b2e4:	49 59       	lddpc	r9,8000b338 <udd_ctrl_out_received+0x1e4>
8000b2e6:	b2 08       	st.h	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
8000b2e8:	49 39       	lddpc	r9,8000b334 <udd_ctrl_out_received+0x1e0>
8000b2ea:	30 08       	mov	r8,0
8000b2ec:	b2 08       	st.h	r9[0x0],r8
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
8000b2ee:	fe 68 01 60 	mov	r8,-130720
8000b2f2:	30 29       	mov	r9,2
8000b2f4:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
8000b2f6:	fe 68 01 60 	mov	r8,-130720
8000b2fa:	31 09       	mov	r9,16
8000b2fc:	91 09       	st.w	r8[0x0],r9
	flags = cpu_irq_save();
8000b2fe:	f0 1f 00 11 	mcall	8000b340 <udd_ctrl_out_received+0x1ec>
8000b302:	18 98       	mov	r8,r12
8000b304:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_enable_nak_in_interrupt(0);
8000b308:	fe 68 01 f0 	mov	r8,-130576
8000b30c:	31 09       	mov	r9,16
8000b30e:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000b310:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b314:	f0 1f 00 0c 	mcall	8000b344 <udd_ctrl_out_received+0x1f0>
}
8000b318:	2f cd       	sub	sp,-16
8000b31a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b31e:	00 00       	add	r0,r0
8000b320:	00 00       	add	r0,r0
8000b322:	07 bc       	ld.ub	r12,r3[0x3]
8000b324:	80 00       	ld.sh	r0,r0[0x0]
8000b326:	b4 78       	st.h	r10[0xe],r8
8000b328:	80 00       	ld.sh	r0,r0[0x0]
8000b32a:	b3 c0       	cbr	r0,0x12
8000b32c:	80 00       	ld.sh	r0,r0[0x0]
8000b32e:	ad f8       	*unknown*
8000b330:	00 00       	add	r0,r0
8000b332:	10 0c       	add	r12,r8
8000b334:	00 00       	add	r0,r0
8000b336:	07 c2       	ld.ub	r2,r3[0x4]
8000b338:	00 00       	add	r0,r0
8000b33a:	07 c0       	ld.ub	r0,r3[0x4]
8000b33c:	80 00       	ld.sh	r0,r0[0x0]
8000b33e:	b3 e0       	*unknown*
8000b340:	80 00       	ld.sh	r0,r0[0x0]
8000b342:	9c 80       	ld.uh	r0,lr[0x0]
8000b344:	80 00       	ld.sh	r0,r0[0x0]
8000b346:	9c 9e       	ld.uh	lr,lr[0x2]

8000b348 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
8000b348:	eb cd 40 80 	pushm	r7,lr
8000b34c:	1a 97       	mov	r7,sp
	if (Is_udd_out_received(0))
8000b34e:	fe 68 01 30 	mov	r8,-130768
8000b352:	70 08       	ld.w	r8,r8[0x0]
8000b354:	e2 18 00 02 	andl	r8,0x2,COH
8000b358:	c1 21       	brne	8000b37c <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
8000b35a:	48 b8       	lddpc	r8,8000b384 <udd_ctrl_underflow+0x3c>
8000b35c:	70 08       	ld.w	r8,r8[0x0]
8000b35e:	58 18       	cp.w	r8,1
8000b360:	c0 41       	brne	8000b368 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
8000b362:	f0 1f 00 0a 	mcall	8000b388 <udd_ctrl_underflow+0x40>
8000b366:	c0 c8       	rjmp	8000b37e <udd_ctrl_underflow+0x36>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
8000b368:	48 78       	lddpc	r8,8000b384 <udd_ctrl_underflow+0x3c>
8000b36a:	70 08       	ld.w	r8,r8[0x0]
8000b36c:	58 48       	cp.w	r8,4
8000b36e:	c0 81       	brne	8000b37e <udd_ctrl_underflow+0x36>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
8000b370:	fe 68 01 f0 	mov	r8,-130576
8000b374:	e8 69 00 00 	mov	r9,524288
8000b378:	91 09       	st.w	r8[0x0],r9
8000b37a:	c0 28       	rjmp	8000b37e <udd_ctrl_underflow+0x36>


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
		return; // underflow ignored if OUT data is received
8000b37c:	d7 03       	nop
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
	}
}
8000b37e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b382:	00 00       	add	r0,r0
8000b384:	00 00       	add	r0,r0
8000b386:	07 bc       	ld.ub	r12,r3[0x3]
8000b388:	80 00       	ld.sh	r0,r0[0x0]
8000b38a:	b3 e0       	*unknown*

8000b38c <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
8000b38c:	eb cd 40 80 	pushm	r7,lr
8000b390:	1a 97       	mov	r7,sp
	if (Is_udd_in_send(0))
8000b392:	fe 68 01 30 	mov	r8,-130768
8000b396:	70 08       	ld.w	r8,r8[0x0]
8000b398:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b39c:	5c 58       	castu.b	r8
8000b39e:	c0 b1       	brne	8000b3b4 <udd_ctrl_overflow+0x28>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000b3a0:	48 78       	lddpc	r8,8000b3bc <udd_ctrl_overflow+0x30>
8000b3a2:	70 08       	ld.w	r8,r8[0x0]
8000b3a4:	58 38       	cp.w	r8,3
8000b3a6:	c0 81       	brne	8000b3b6 <udd_ctrl_overflow+0x2a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
8000b3a8:	fe 68 01 f0 	mov	r8,-130576
8000b3ac:	e8 69 00 00 	mov	r9,524288
8000b3b0:	91 09       	st.w	r8[0x0],r9
8000b3b2:	c0 28       	rjmp	8000b3b6 <udd_ctrl_overflow+0x2a>


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
		return; // overflow ignored if IN data is received
8000b3b4:	d7 03       	nop
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
8000b3b6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b3ba:	00 00       	add	r0,r0
8000b3bc:	00 00       	add	r0,r0
8000b3be:	07 bc       	ld.ub	r12,r3[0x3]

8000b3c0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
8000b3c0:	eb cd 40 80 	pushm	r7,lr
8000b3c4:	1a 97       	mov	r7,sp
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
8000b3c6:	48 68       	lddpc	r8,8000b3dc <udd_ctrl_stall_data+0x1c>
8000b3c8:	30 59       	mov	r9,5
8000b3ca:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
8000b3cc:	fe 68 01 f0 	mov	r8,-130576
8000b3d0:	e8 69 00 00 	mov	r9,524288
8000b3d4:	91 09       	st.w	r8[0x0],r9
}
8000b3d6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b3da:	00 00       	add	r0,r0
8000b3dc:	00 00       	add	r0,r0
8000b3de:	07 bc       	ld.ub	r12,r3[0x3]

8000b3e0 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
8000b3e0:	eb cd 40 80 	pushm	r7,lr
8000b3e4:	1a 97       	mov	r7,sp
8000b3e6:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
8000b3e8:	49 08       	lddpc	r8,8000b428 <udd_ctrl_send_zlp_in+0x48>
8000b3ea:	30 39       	mov	r9,3
8000b3ec:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
8000b3ee:	f0 1f 00 10 	mcall	8000b42c <udd_ctrl_send_zlp_in+0x4c>
8000b3f2:	18 98       	mov	r8,r12
8000b3f4:	ef 48 ff fc 	st.w	r7[-4],r8
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
8000b3f8:	fe 68 01 60 	mov	r8,-130720
8000b3fc:	30 19       	mov	r9,1
8000b3fe:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
8000b400:	fe 68 01 f0 	mov	r8,-130576
8000b404:	30 19       	mov	r9,1
8000b406:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
8000b408:	fe 68 01 60 	mov	r8,-130720
8000b40c:	30 89       	mov	r9,8
8000b40e:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_out_interrupt(0);
8000b410:	fe 68 01 f0 	mov	r8,-130576
8000b414:	30 89       	mov	r9,8
8000b416:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000b418:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b41c:	f0 1f 00 05 	mcall	8000b430 <udd_ctrl_send_zlp_in+0x50>
}
8000b420:	2f fd       	sub	sp,-4
8000b422:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b426:	00 00       	add	r0,r0
8000b428:	00 00       	add	r0,r0
8000b42a:	07 bc       	ld.ub	r12,r3[0x3]
8000b42c:	80 00       	ld.sh	r0,r0[0x0]
8000b42e:	9c 80       	ld.uh	r0,lr[0x0]
8000b430:	80 00       	ld.sh	r0,r0[0x0]
8000b432:	9c 9e       	ld.uh	lr,lr[0x2]

8000b434 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
8000b434:	eb cd 40 80 	pushm	r7,lr
8000b438:	1a 97       	mov	r7,sp
8000b43a:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000b43c:	48 c8       	lddpc	r8,8000b46c <udd_ctrl_send_zlp_out+0x38>
8000b43e:	30 49       	mov	r9,4
8000b440:	91 09       	st.w	r8[0x0],r9
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
8000b442:	f0 1f 00 0c 	mcall	8000b470 <udd_ctrl_send_zlp_out+0x3c>
8000b446:	18 98       	mov	r8,r12
8000b448:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_ack_nak_in(0);
8000b44c:	fe 68 01 60 	mov	r8,-130720
8000b450:	31 09       	mov	r9,16
8000b452:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_in_interrupt(0);
8000b454:	fe 68 01 f0 	mov	r8,-130576
8000b458:	31 09       	mov	r9,16
8000b45a:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000b45c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b460:	f0 1f 00 05 	mcall	8000b474 <udd_ctrl_send_zlp_out+0x40>
}
8000b464:	2f fd       	sub	sp,-4
8000b466:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b46a:	00 00       	add	r0,r0
8000b46c:	00 00       	add	r0,r0
8000b46e:	07 bc       	ld.ub	r12,r3[0x3]
8000b470:	80 00       	ld.sh	r0,r0[0x0]
8000b472:	9c 80       	ld.uh	r0,lr[0x0]
8000b474:	80 00       	ld.sh	r0,r0[0x0]
8000b476:	9c 9e       	ld.uh	lr,lr[0x2]

8000b478 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
8000b478:	eb cd 40 80 	pushm	r7,lr
8000b47c:	1a 97       	mov	r7,sp
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000b47e:	48 58       	lddpc	r8,8000b490 <udd_ctrl_endofrequest+0x18>
8000b480:	70 48       	ld.w	r8,r8[0x10]
8000b482:	58 08       	cp.w	r8,0
8000b484:	c0 40       	breq	8000b48c <udd_ctrl_endofrequest+0x14>
		udd_g_ctrlreq.callback();
8000b486:	48 38       	lddpc	r8,8000b490 <udd_ctrl_endofrequest+0x18>
8000b488:	70 48       	ld.w	r8,r8[0x10]
8000b48a:	5d 18       	icall	r8
	}
}
8000b48c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b490:	00 00       	add	r0,r0
8000b492:	10 0c       	add	r12,r8

8000b494 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
8000b494:	eb cd 40 80 	pushm	r7,lr
8000b498:	1a 97       	mov	r7,sp

	if (!Is_udd_endpoint_interrupt(0))
8000b49a:	fe 68 00 00 	mov	r8,-131072
8000b49e:	70 18       	ld.w	r8,r8[0x4]
8000b4a0:	e2 18 10 00 	andl	r8,0x1000,COH
8000b4a4:	c0 31       	brne	8000b4aa <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
8000b4a6:	30 08       	mov	r8,0
8000b4a8:	c4 c8       	rjmp	8000b540 <udd_ctrl_interrupt+0xac>

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
8000b4aa:	fe 68 02 20 	mov	r8,-130528
8000b4ae:	31 09       	mov	r9,16
8000b4b0:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
8000b4b2:	fe 68 02 20 	mov	r8,-130528
8000b4b6:	30 89       	mov	r9,8
8000b4b8:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
8000b4ba:	fe 68 01 30 	mov	r8,-130768
8000b4be:	70 08       	ld.w	r8,r8[0x0]
8000b4c0:	e2 18 00 04 	andl	r8,0x4,COH
8000b4c4:	c0 50       	breq	8000b4ce <udd_ctrl_interrupt+0x3a>
		// SETUP packet received
		udd_ctrl_setup_received();
8000b4c6:	f0 1f 00 21 	mcall	8000b548 <udd_ctrl_interrupt+0xb4>
		return true;
8000b4ca:	30 18       	mov	r8,1
8000b4cc:	c3 a8       	rjmp	8000b540 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
8000b4ce:	fe 68 01 30 	mov	r8,-130768
8000b4d2:	70 08       	ld.w	r8,r8[0x0]
8000b4d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b4d8:	5c 58       	castu.b	r8
8000b4da:	c0 c0       	breq	8000b4f2 <udd_ctrl_interrupt+0x5e>
8000b4dc:	fe 68 01 c0 	mov	r8,-130624
8000b4e0:	70 08       	ld.w	r8,r8[0x0]
8000b4e2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b4e6:	5c 58       	castu.b	r8
8000b4e8:	c0 50       	breq	8000b4f2 <udd_ctrl_interrupt+0x5e>
		// IN packet sent
		udd_ctrl_in_sent();
8000b4ea:	f0 1f 00 19 	mcall	8000b54c <udd_ctrl_interrupt+0xb8>
		return true;
8000b4ee:	30 18       	mov	r8,1
8000b4f0:	c2 88       	rjmp	8000b540 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_out_received(0)) {
8000b4f2:	fe 68 01 30 	mov	r8,-130768
8000b4f6:	70 08       	ld.w	r8,r8[0x0]
8000b4f8:	e2 18 00 02 	andl	r8,0x2,COH
8000b4fc:	c0 50       	breq	8000b506 <udd_ctrl_interrupt+0x72>
		// OUT packet received
		udd_ctrl_out_received();
8000b4fe:	f0 1f 00 15 	mcall	8000b550 <udd_ctrl_interrupt+0xbc>
		return true;
8000b502:	30 18       	mov	r8,1
8000b504:	c1 e8       	rjmp	8000b540 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_out(0)) {
8000b506:	fe 68 01 30 	mov	r8,-130768
8000b50a:	70 08       	ld.w	r8,r8[0x0]
8000b50c:	e2 18 00 08 	andl	r8,0x8,COH
8000b510:	c0 90       	breq	8000b522 <udd_ctrl_interrupt+0x8e>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
8000b512:	fe 68 01 60 	mov	r8,-130720
8000b516:	30 89       	mov	r9,8
8000b518:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_overflow();
8000b51a:	f0 1f 00 0f 	mcall	8000b554 <udd_ctrl_interrupt+0xc0>
		return true;
8000b51e:	30 18       	mov	r8,1
8000b520:	c1 08       	rjmp	8000b540 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_in(0)) {
8000b522:	fe 68 01 30 	mov	r8,-130768
8000b526:	70 08       	ld.w	r8,r8[0x0]
8000b528:	e2 18 00 10 	andl	r8,0x10,COH
8000b52c:	c0 90       	breq	8000b53e <udd_ctrl_interrupt+0xaa>
		// Underflow on IN packet
		udd_ack_nak_in(0);
8000b52e:	fe 68 01 60 	mov	r8,-130720
8000b532:	31 09       	mov	r9,16
8000b534:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_underflow();
8000b536:	f0 1f 00 09 	mcall	8000b558 <udd_ctrl_interrupt+0xc4>
		return true;
8000b53a:	30 18       	mov	r8,1
8000b53c:	c0 28       	rjmp	8000b540 <udd_ctrl_interrupt+0xac>
	}
	return false;
8000b53e:	30 08       	mov	r8,0
}
8000b540:	10 9c       	mov	r12,r8
8000b542:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b546:	00 00       	add	r0,r0
8000b548:	80 00       	ld.sh	r0,r0[0x0]
8000b54a:	ae 50       	st.h	r7[0xa],r0
8000b54c:	80 00       	ld.sh	r0,r0[0x0]
8000b54e:	af b4       	sbr	r4,0xf
8000b550:	80 00       	ld.sh	r0,r0[0x0]
8000b552:	b1 54       	asr	r4,0x11
8000b554:	80 00       	ld.sh	r0,r0[0x0]
8000b556:	b3 8c       	lsr	r12,0x12
8000b558:	80 00       	ld.sh	r0,r0[0x0]
8000b55a:	b3 48       	asr	r8,0x12

8000b55c <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
8000b55c:	eb cd 40 80 	pushm	r7,lr
8000b560:	1a 97       	mov	r7,sp
8000b562:	20 1d       	sub	sp,4
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b564:	30 08       	mov	r8,0
8000b566:	ef 68 ff ff 	st.b	r7[-1],r8
8000b56a:	c2 28       	rjmp	8000b5ae <udd_ep_job_table_reset+0x52>
		udd_ep_job[i].busy = false;
8000b56c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b570:	49 5a       	lddpc	r10,8000b5c4 <udd_ep_job_table_reset+0x68>
8000b572:	12 98       	mov	r8,r9
8000b574:	a3 68       	lsl	r8,0x2
8000b576:	12 08       	add	r8,r9
8000b578:	a3 68       	lsl	r8,0x2
8000b57a:	f4 08 00 09 	add	r9,r10,r8
8000b57e:	72 08       	ld.w	r8,r9[0x0]
8000b580:	30 0a       	mov	r10,0
8000b582:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b586:	93 08       	st.w	r9[0x0],r8
		udd_ep_job[i].stall_requested = false;
8000b588:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b58c:	48 ea       	lddpc	r10,8000b5c4 <udd_ep_job_table_reset+0x68>
8000b58e:	12 98       	mov	r8,r9
8000b590:	a3 68       	lsl	r8,0x2
8000b592:	12 08       	add	r8,r9
8000b594:	a3 68       	lsl	r8,0x2
8000b596:	f4 08 00 09 	add	r9,r10,r8
8000b59a:	72 08       	ld.w	r8,r9[0x0]
8000b59c:	30 0a       	mov	r10,0
8000b59e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000b5a2:	93 08       	st.w	r9[0x0],r8
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b5a4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b5a8:	2f f8       	sub	r8,-1
8000b5aa:	ef 68 ff ff 	st.b	r7[-1],r8
8000b5ae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b5b2:	30 18       	mov	r8,1
8000b5b4:	f0 09 18 00 	cp.b	r9,r8
8000b5b8:	fe 98 ff da 	brls	8000b56c <udd_ep_job_table_reset+0x10>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].stall_requested = false;
	}
}
8000b5bc:	2f fd       	sub	sp,-4
8000b5be:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b5c2:	00 00       	add	r0,r0
8000b5c4:	00 00       	add	r0,r0
8000b5c6:	07 c4       	ld.ub	r4,r3[0x4]

8000b5c8 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
8000b5c8:	eb cd 40 80 	pushm	r7,lr
8000b5cc:	1a 97       	mov	r7,sp
8000b5ce:	20 1d       	sub	sp,4
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b5d0:	30 08       	mov	r8,0
8000b5d2:	ef 68 ff ff 	st.b	r7[-1],r8
8000b5d6:	c1 98       	rjmp	8000b608 <udd_ep_job_table_kill+0x40>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
8000b5d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b5dc:	2f f8       	sub	r8,-1
8000b5de:	5c 58       	castu.b	r8
8000b5e0:	10 9a       	mov	r10,r8
8000b5e2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b5e6:	12 98       	mov	r8,r9
8000b5e8:	a3 68       	lsl	r8,0x2
8000b5ea:	12 08       	add	r8,r9
8000b5ec:	a3 68       	lsl	r8,0x2
8000b5ee:	10 99       	mov	r9,r8
8000b5f0:	48 b8       	lddpc	r8,8000b61c <udd_ep_job_table_kill+0x54>
8000b5f2:	f2 08 00 08 	add	r8,r9,r8
8000b5f6:	30 1b       	mov	r11,1
8000b5f8:	10 9c       	mov	r12,r8
8000b5fa:	f0 1f 00 0a 	mcall	8000b620 <udd_ep_job_table_kill+0x58>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b5fe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b602:	2f f8       	sub	r8,-1
8000b604:	ef 68 ff ff 	st.b	r7[-1],r8
8000b608:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b60c:	30 18       	mov	r8,1
8000b60e:	f0 09 18 00 	cp.b	r9,r8
8000b612:	fe 98 ff e3 	brls	8000b5d8 <udd_ep_job_table_kill+0x10>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
	}
}
8000b616:	2f fd       	sub	sp,-4
8000b618:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b61c:	00 00       	add	r0,r0
8000b61e:	07 c4       	ld.ub	r4,r3[0x4]
8000b620:	80 00       	ld.sh	r0,r0[0x0]
8000b622:	b6 70       	st.h	r11[0xe],r0

8000b624 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
8000b624:	eb cd 40 80 	pushm	r7,lr
8000b628:	1a 97       	mov	r7,sp
8000b62a:	20 1d       	sub	sp,4
8000b62c:	18 98       	mov	r8,r12
8000b62e:	ef 68 ff fc 	st.b	r7[-4],r8
	ep &= USB_EP_ADDR_MASK;
8000b632:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b636:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000b63a:	ef 68 ff fc 	st.b	r7[-4],r8

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
8000b63e:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000b642:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b646:	f0 c9 00 01 	sub	r9,r8,1
8000b64a:	12 98       	mov	r8,r9
8000b64c:	a3 68       	lsl	r8,0x2
8000b64e:	12 08       	add	r8,r9
8000b650:	a3 68       	lsl	r8,0x2
8000b652:	10 99       	mov	r9,r8
8000b654:	48 58       	lddpc	r8,8000b668 <udd_ep_abort_job+0x44>
8000b656:	f2 08 00 08 	add	r8,r9,r8
8000b65a:	30 1b       	mov	r11,1
8000b65c:	10 9c       	mov	r12,r8
8000b65e:	f0 1f 00 04 	mcall	8000b66c <udd_ep_abort_job+0x48>
}
8000b662:	2f fd       	sub	sp,-4
8000b664:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b668:	00 00       	add	r0,r0
8000b66a:	07 c4       	ld.ub	r4,r3[0x4]
8000b66c:	80 00       	ld.sh	r0,r0[0x0]
8000b66e:	b6 70       	st.h	r11[0xe],r0

8000b670 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
8000b670:	eb cd 40 80 	pushm	r7,lr
8000b674:	1a 97       	mov	r7,sp
8000b676:	20 3d       	sub	sp,12
8000b678:	ef 4c ff fc 	st.w	r7[-4],r12
8000b67c:	16 99       	mov	r9,r11
8000b67e:	14 98       	mov	r8,r10
8000b680:	ef 69 ff f8 	st.b	r7[-8],r9
8000b684:	ef 68 ff f4 	st.b	r7[-12],r8
	if (ptr_job->busy == false) {
8000b688:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b68c:	70 08       	ld.w	r8,r8[0x0]
8000b68e:	e6 18 80 00 	andh	r8,0x8000,COH
8000b692:	c2 b0       	breq	8000b6e8 <udd_ep_finish_job+0x78>
		return; // No on-going job
	}
	ptr_job->busy = false;
8000b694:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b698:	72 08       	ld.w	r8,r9[0x0]
8000b69a:	30 0a       	mov	r10,0
8000b69c:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b6a0:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans) {
8000b6a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b6a6:	70 48       	ld.w	r8,r8[0x10]
8000b6a8:	58 08       	cp.w	r8,0
8000b6aa:	c2 10       	breq	8000b6ec <udd_ep_finish_job+0x7c>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
8000b6ac:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b6b0:	a3 68       	lsl	r8,0x2
8000b6b2:	e0 38 ff 00 	sub	r8,130816
8000b6b6:	70 08       	ld.w	r8,r8[0x0]
8000b6b8:	e2 18 01 00 	andl	r8,0x100,COH
8000b6bc:	c0 90       	breq	8000b6ce <udd_ep_finish_job+0x5e>
		ep_num |= USB_EP_DIR_IN;
8000b6be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b6c2:	ea 18 ff ff 	orh	r8,0xffff
8000b6c6:	e8 18 ff 80 	orl	r8,0xff80
8000b6ca:	ef 68 ff f4 	st.b	r7[-12],r8
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
8000b6ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b6d2:	70 48       	ld.w	r8,r8[0x10]
8000b6d4:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b6d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b6dc:	72 2b       	ld.w	r11,r9[0x8]
8000b6de:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000b6e2:	12 9c       	mov	r12,r9
8000b6e4:	5d 18       	icall	r8
8000b6e6:	c0 48       	rjmp	8000b6ee <udd_ep_finish_job+0x7e>


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
		return; // No on-going job
8000b6e8:	d7 03       	nop
8000b6ea:	c0 28       	rjmp	8000b6ee <udd_ep_finish_job+0x7e>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
		return; // No callback linked to job
8000b6ec:	d7 03       	nop
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
8000b6ee:	2f dd       	sub	sp,-12
8000b6f0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b6f4 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
8000b6f4:	eb cd 40 80 	pushm	r7,lr
8000b6f8:	1a 97       	mov	r7,sp
8000b6fa:	20 5d       	sub	sp,20
8000b6fc:	18 98       	mov	r8,r12
8000b6fe:	ef 68 ff ec 	st.b	r7[-20],r8
	uint32_t udd_dma_ctrl = 0;
8000b702:	30 08       	mov	r8,0
8000b704:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000b708:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b70c:	f0 c9 00 01 	sub	r9,r8,1
8000b710:	12 98       	mov	r8,r9
8000b712:	a3 68       	lsl	r8,0x2
8000b714:	12 08       	add	r8,r9
8000b716:	a3 68       	lsl	r8,0x2
8000b718:	10 99       	mov	r9,r8
8000b71a:	fe f8 02 1e 	ld.w	r8,pc[542]
8000b71e:	f2 08 00 08 	add	r8,r9,r8
8000b722:	ef 48 ff f4 	st.w	r7[-12],r8

	if (!ptr_job->busy) {
8000b726:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b72a:	70 08       	ld.w	r8,r8[0x0]
8000b72c:	e6 18 80 00 	andh	r8,0x8000,COH
8000b730:	e0 80 01 00 	breq	8000b930 <udd_ep_trans_done+0x23c>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
8000b734:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b738:	70 39       	ld.w	r9,r8[0xc]
8000b73a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b73e:	70 28       	ld.w	r8,r8[0x8]
8000b740:	10 39       	cp.w	r9,r8
8000b742:	e0 80 00 b7 	breq	8000b8b0 <udd_ep_trans_done+0x1bc>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
8000b746:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b74a:	70 29       	ld.w	r9,r8[0x8]
8000b74c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b750:	70 38       	ld.w	r8,r8[0xc]
8000b752:	10 19       	sub	r9,r8
8000b754:	ef 49 ff f8 	st.w	r7[-8],r9

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
8000b758:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b75c:	e0 58 00 00 	cp.w	r8,65536
8000b760:	e0 88 00 0a 	brls	8000b774 <udd_ep_trans_done+0x80>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
8000b764:	e0 78 00 00 	mov	r8,65536
8000b768:	ef 48 ff f8 	st.w	r7[-8],r8

			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
8000b76c:	30 08       	mov	r8,0
8000b76e:	ef 48 ff f0 	st.w	r7[-16],r8
8000b772:	c0 68       	rjmp	8000b77e <udd_ep_trans_done+0x8a>
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
8000b774:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b778:	b1 68       	lsl	r8,0x10
8000b77a:	ef 48 ff f0 	st.w	r7[-16],r8
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
8000b77e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b782:	a3 68       	lsl	r8,0x2
8000b784:	e0 38 ff 00 	sub	r8,130816
8000b788:	70 08       	ld.w	r8,r8[0x0]
8000b78a:	e2 18 01 00 	andl	r8,0x100,COH
8000b78e:	c2 10       	breq	8000b7d0 <udd_ep_trans_done+0xdc>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
8000b790:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b794:	a3 68       	lsl	r8,0x2
8000b796:	e0 38 ff 00 	sub	r8,130816
8000b79a:	70 08       	ld.w	r8,r8[0x0]
8000b79c:	e2 18 00 70 	andl	r8,0x70,COH
8000b7a0:	a5 88       	lsr	r8,0x4
8000b7a2:	30 89       	mov	r9,8
8000b7a4:	f2 08 09 48 	lsl	r8,r9,r8
8000b7a8:	20 18       	sub	r8,1
8000b7aa:	10 99       	mov	r9,r8
8000b7ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b7b0:	f3 e8 00 08 	and	r8,r9,r8
8000b7b4:	c3 10       	breq	8000b816 <udd_ep_trans_done+0x122>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
8000b7b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b7ba:	a3 b8       	sbr	r8,0x3
8000b7bc:	ef 48 ff f0 	st.w	r7[-16],r8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
8000b7c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b7c4:	72 08       	ld.w	r8,r9[0x0]
8000b7c6:	30 0a       	mov	r10,0
8000b7c8:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000b7cc:	93 08       	st.w	r9[0x0],r8
8000b7ce:	c2 58       	rjmp	8000b818 <udd_ep_trans_done+0x124>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000b7d0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b7d4:	a3 68       	lsl	r8,0x2
8000b7d6:	e0 38 ff 00 	sub	r8,130816
8000b7da:	70 08       	ld.w	r8,r8[0x0]
8000b7dc:	e2 18 18 00 	andl	r8,0x1800,COH
8000b7e0:	ab 98       	lsr	r8,0xb
8000b7e2:	58 18       	cp.w	r8,1
8000b7e4:	c1 21       	brne	8000b808 <udd_ep_trans_done+0x114>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
8000b7e6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b7ea:	a3 68       	lsl	r8,0x2
8000b7ec:	e0 38 ff 00 	sub	r8,130816
8000b7f0:	70 08       	ld.w	r8,r8[0x0]
8000b7f2:	e2 18 00 70 	andl	r8,0x70,COH
8000b7f6:	a5 88       	lsr	r8,0x4
8000b7f8:	30 89       	mov	r9,8
8000b7fa:	f2 08 09 48 	lsl	r8,r9,r8
8000b7fe:	10 99       	mov	r9,r8
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000b800:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b804:	10 39       	cp.w	r9,r8
8000b806:	c0 93       	brcs	8000b818 <udd_ep_trans_done+0x124>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
8000b808:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b80c:	e8 18 00 14 	orl	r8,0x14
8000b810:	ef 48 ff f0 	st.w	r7[-16],r8
8000b814:	c0 28       	rjmp	8000b818 <udd_ep_trans_done+0x124>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
8000b816:	d7 03       	nop
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
8000b818:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b81c:	a5 68       	lsl	r8,0x4
8000b81e:	e0 38 fd 00 	sub	r8,130304
8000b822:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b826:	72 1a       	ld.w	r10,r9[0x4]
8000b828:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b82c:	72 39       	ld.w	r9,r9[0xc]
8000b82e:	f4 09 00 09 	add	r9,r10,r9
8000b832:	91 19       	st.w	r8[0x4],r9
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
8000b834:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b838:	e8 18 00 21 	orl	r8,0x21
8000b83c:	ef 48 ff f0 	st.w	r7[-16],r8
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
8000b840:	f0 1f 00 3f 	mcall	8000b93c <udd_ep_trans_done+0x248>
8000b844:	18 98       	mov	r8,r12
8000b846:	ef 48 ff fc 	st.w	r7[-4],r8
		if ( !(udd_endpoint_dma_get_status(ep)
8000b84a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b84e:	a5 68       	lsl	r8,0x4
8000b850:	e0 38 fd 00 	sub	r8,130304
8000b854:	70 38       	ld.w	r8,r8[0xc]
8000b856:	e2 18 00 10 	andl	r8,0x10,COH
8000b85a:	c2 11       	brne	8000b89c <udd_ep_trans_done+0x1a8>
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
8000b85c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b860:	a5 68       	lsl	r8,0x4
8000b862:	e0 38 fd 00 	sub	r8,130304
8000b866:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000b86a:	91 29       	st.w	r8[0x8],r9
			ptr_job->nb_trans += next_trans;
8000b86c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b870:	70 39       	ld.w	r9,r8[0xc]
8000b872:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b876:	10 09       	add	r9,r8
8000b878:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b87c:	91 39       	st.w	r8[0xc],r9
			udd_enable_endpoint_dma_interrupt(ep);
8000b87e:	fe 68 00 00 	mov	r8,-131072
8000b882:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b886:	20 19       	sub	r9,1
8000b888:	fc 1a 02 00 	movh	r10,0x200
8000b88c:	f4 09 09 49 	lsl	r9,r10,r9
8000b890:	91 69       	st.w	r8[0x18],r9
			cpu_irq_restore(flags);
8000b892:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b896:	f0 1f 00 2b 	mcall	8000b940 <udd_ep_trans_done+0x24c>
			return;
8000b89a:	c4 c8       	rjmp	8000b932 <udd_ep_trans_done+0x23e>
		}
		cpu_irq_restore(flags);
8000b89c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b8a0:	f0 1f 00 28 	mcall	8000b940 <udd_ep_trans_done+0x24c>

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
8000b8a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b8a8:	70 39       	ld.w	r9,r8[0xc]
8000b8aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b8ae:	91 29       	st.w	r8[0x8],r9
	}
	if (Is_udd_endpoint_in(ep)) {
8000b8b0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b8b4:	a3 68       	lsl	r8,0x2
8000b8b6:	e0 38 ff 00 	sub	r8,130816
8000b8ba:	70 08       	ld.w	r8,r8[0x0]
8000b8bc:	e2 18 01 00 	andl	r8,0x100,COH
8000b8c0:	c2 f0       	breq	8000b91e <udd_ep_trans_done+0x22a>
		if (ptr_job->b_shortpacket) {
8000b8c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b8c6:	70 08       	ld.w	r8,r8[0x0]
8000b8c8:	e6 18 40 00 	andh	r8,0x4000,COH
8000b8cc:	c2 90       	breq	8000b91e <udd_ep_trans_done+0x22a>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
8000b8ce:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b8d2:	a3 68       	lsl	r8,0x2
8000b8d4:	e0 38 fe a0 	sub	r8,130720
8000b8d8:	30 19       	mov	r9,1
8000b8da:	91 09       	st.w	r8[0x0],r9
			if (Is_udd_write_enabled(ep)) {
8000b8dc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b8e0:	a3 68       	lsl	r8,0x2
8000b8e2:	e0 38 fe d0 	sub	r8,130768
8000b8e6:	70 08       	ld.w	r8,r8[0x0]
8000b8e8:	e6 18 00 01 	andh	r8,0x1,COH
8000b8ec:	c0 80       	breq	8000b8fc <udd_ep_trans_done+0x208>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
8000b8ee:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b8f2:	a3 68       	lsl	r8,0x2
8000b8f4:	e0 38 fe 70 	sub	r8,130672
8000b8f8:	30 19       	mov	r9,1
8000b8fa:	91 09       	st.w	r8[0x0],r9
			}
			udd_enable_in_send_interrupt(ep);
8000b8fc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b900:	a3 68       	lsl	r8,0x2
8000b902:	e0 38 fe 10 	sub	r8,130576
8000b906:	30 19       	mov	r9,1
8000b908:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(ep);
8000b90a:	fe 68 00 00 	mov	r8,-131072
8000b90e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b912:	e0 6a 10 00 	mov	r10,4096
8000b916:	f4 09 09 49 	lsl	r9,r10,r9
8000b91a:	91 69       	st.w	r8[0x18],r9
			return;
8000b91c:	c0 b8       	rjmp	8000b932 <udd_ep_trans_done+0x23e>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
8000b91e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b922:	10 9a       	mov	r10,r8
8000b924:	30 0b       	mov	r11,0
8000b926:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b92a:	f0 1f 00 07 	mcall	8000b944 <udd_ep_trans_done+0x250>
8000b92e:	c0 28       	rjmp	8000b932 <udd_ep_trans_done+0x23e>

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
8000b930:	d7 03       	nop
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
8000b932:	2f bd       	sub	sp,-20
8000b934:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b938:	00 00       	add	r0,r0
8000b93a:	07 c4       	ld.ub	r4,r3[0x4]
8000b93c:	80 00       	ld.sh	r0,r0[0x0]
8000b93e:	9c 80       	ld.uh	r0,lr[0x0]
8000b940:	80 00       	ld.sh	r0,r0[0x0]
8000b942:	9c 9e       	ld.uh	lr,lr[0x2]
8000b944:	80 00       	ld.sh	r0,r0[0x0]
8000b946:	b6 70       	st.h	r11[0xe],r0

8000b948 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
8000b948:	eb cd 40 80 	pushm	r7,lr
8000b94c:	1a 97       	mov	r7,sp
8000b94e:	20 3d       	sub	sp,12
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000b950:	30 18       	mov	r8,1
8000b952:	ef 68 ff f7 	st.b	r7[-9],r8
8000b956:	cf 18       	rjmp	8000bb38 <udd_ep_interrupt+0x1f0>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
8000b958:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b95c:	f0 c9 00 01 	sub	r9,r8,1
8000b960:	12 98       	mov	r8,r9
8000b962:	a3 68       	lsl	r8,0x2
8000b964:	12 08       	add	r8,r9
8000b966:	a3 68       	lsl	r8,0x2
8000b968:	10 99       	mov	r9,r8
8000b96a:	4f a8       	lddpc	r8,8000bb50 <udd_ep_interrupt+0x208>
8000b96c:	f2 08 00 08 	add	r8,r9,r8
8000b970:	ef 48 ff f8 	st.w	r7[-8],r8

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000b974:	fe 68 00 00 	mov	r8,-131072
8000b978:	70 49       	ld.w	r9,r8[0x10]
8000b97a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b97e:	20 18       	sub	r8,1
8000b980:	fc 1a 02 00 	movh	r10,0x200
8000b984:	f4 08 09 48 	lsl	r8,r10,r8
8000b988:	f3 e8 00 08 	and	r8,r9,r8
8000b98c:	c4 70       	breq	8000ba1a <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
8000b98e:	fe 68 00 00 	mov	r8,-131072
8000b992:	70 19       	ld.w	r9,r8[0x4]
8000b994:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b998:	20 18       	sub	r8,1
8000b99a:	fc 1a 02 00 	movh	r10,0x200
8000b99e:	f4 08 09 48 	lsl	r8,r10,r8
8000b9a2:	f3 e8 00 08 	and	r8,r9,r8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000b9a6:	c3 a0       	breq	8000ba1a <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
8000b9a8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b9ac:	a5 68       	lsl	r8,0x4
8000b9ae:	e0 38 fd 00 	sub	r8,130304
8000b9b2:	70 38       	ld.w	r8,r8[0xc]
8000b9b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b9b8:	5c 58       	castu.b	r8
8000b9ba:	c0 30       	breq	8000b9c0 <udd_ep_interrupt+0x78>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
8000b9bc:	30 18       	mov	r8,1
8000b9be:	cc 58       	rjmp	8000bb48 <udd_ep_interrupt+0x200>
			}
			udd_disable_endpoint_dma_interrupt(ep);
8000b9c0:	fe 68 00 00 	mov	r8,-131072
8000b9c4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b9c8:	20 19       	sub	r9,1
8000b9ca:	fc 1a 02 00 	movh	r10,0x200
8000b9ce:	f4 09 09 49 	lsl	r9,r10,r9
8000b9d2:	91 59       	st.w	r8[0x14],r9
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
8000b9d4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b9d8:	a5 68       	lsl	r8,0x4
8000b9da:	e0 38 fd 00 	sub	r8,130304
8000b9de:	70 38       	ld.w	r8,r8[0xc]
8000b9e0:	b1 88       	lsr	r8,0x10
8000b9e2:	ef 48 ff fc 	st.w	r7[-4],r8
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
8000b9e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b9ea:	58 08       	cp.w	r8,0
8000b9ec:	c1 00       	breq	8000ba0c <udd_ep_interrupt+0xc4>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
8000b9ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b9f2:	70 39       	ld.w	r9,r8[0xc]
8000b9f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b9f8:	10 19       	sub	r9,r8
8000b9fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b9fe:	91 39       	st.w	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
8000ba00:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ba04:	70 39       	ld.w	r9,r8[0xc]
8000ba06:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ba0a:	91 29       	st.w	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
8000ba0c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba10:	10 9c       	mov	r12,r8
8000ba12:	f0 1f 00 51 	mcall	8000bb54 <udd_ep_interrupt+0x20c>
			return true;
8000ba16:	30 18       	mov	r8,1
8000ba18:	c9 88       	rjmp	8000bb48 <udd_ep_interrupt+0x200>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
8000ba1a:	fe 68 00 00 	mov	r8,-131072
8000ba1e:	70 49       	ld.w	r9,r8[0x10]
8000ba20:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba24:	e0 6a 10 00 	mov	r10,4096
8000ba28:	f4 08 09 48 	lsl	r8,r10,r8
8000ba2c:	f3 e8 00 08 	and	r8,r9,r8
8000ba30:	c7 f0       	breq	8000bb2e <udd_ep_interrupt+0x1e6>
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
8000ba32:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba36:	a3 68       	lsl	r8,0x2
8000ba38:	e0 38 fe 40 	sub	r8,130624
8000ba3c:	70 08       	ld.w	r8,r8[0x0]
8000ba3e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000ba42:	5c 58       	castu.b	r8
8000ba44:	c2 b0       	breq	8000ba9a <udd_ep_interrupt+0x152>
8000ba46:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba4a:	a3 68       	lsl	r8,0x2
8000ba4c:	e0 38 fe d0 	sub	r8,130768
8000ba50:	70 08       	ld.w	r8,r8[0x0]
8000ba52:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000ba56:	5c 58       	castu.b	r8
8000ba58:	c2 10       	breq	8000ba9a <udd_ep_interrupt+0x152>
				udd_disable_in_send_interrupt(ep);
8000ba5a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba5e:	a3 68       	lsl	r8,0x2
8000ba60:	e0 38 fd e0 	sub	r8,130528
8000ba64:	30 19       	mov	r9,1
8000ba66:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000ba68:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba6c:	a3 68       	lsl	r8,0x2
8000ba6e:	e0 38 fe a0 	sub	r8,130720
8000ba72:	30 19       	mov	r9,1
8000ba74:	91 09       	st.w	r8[0x0],r9
				udd_ack_fifocon(ep);
8000ba76:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba7a:	a3 68       	lsl	r8,0x2
8000ba7c:	e0 38 fd e0 	sub	r8,130528
8000ba80:	e0 69 40 00 	mov	r9,16384
8000ba84:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false, ep);
8000ba86:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba8a:	10 9a       	mov	r10,r8
8000ba8c:	30 0b       	mov	r11,0
8000ba8e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000ba92:	f0 1f 00 32 	mcall	8000bb58 <udd_ep_interrupt+0x210>
				return true;
8000ba96:	30 18       	mov	r8,1
8000ba98:	c5 88       	rjmp	8000bb48 <udd_ep_interrupt+0x200>
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
8000ba9a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000ba9e:	a3 68       	lsl	r8,0x2
8000baa0:	e0 38 fe 40 	sub	r8,130624
8000baa4:	70 08       	ld.w	r8,r8[0x0]
8000baa6:	e2 18 10 00 	andl	r8,0x1000,COH
8000baaa:	c4 20       	breq	8000bb2e <udd_ep_interrupt+0x1e6>
8000baac:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000bab0:	a3 68       	lsl	r8,0x2
8000bab2:	e0 38 fe d0 	sub	r8,130768
8000bab6:	70 08       	ld.w	r8,r8[0x0]
8000bab8:	e2 18 30 00 	andl	r8,0x3000,COH
8000babc:	ad 88       	lsr	r8,0xc
8000babe:	c3 81       	brne	8000bb2e <udd_ep_interrupt+0x1e6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
8000bac0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000bac4:	a3 68       	lsl	r8,0x2
8000bac6:	e0 38 fd e0 	sub	r8,130528
8000baca:	e0 69 10 00 	mov	r9,4096
8000bace:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
8000bad0:	fe 68 00 00 	mov	r8,-131072
8000bad4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000bad8:	e0 6a 10 00 	mov	r10,4096
8000badc:	f4 09 09 49 	lsl	r9,r10,r9
8000bae0:	91 59       	st.w	r8[0x14],r9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
8000bae2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bae6:	72 08       	ld.w	r8,r9[0x0]
8000bae8:	30 0a       	mov	r10,0
8000baea:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000baee:	93 08       	st.w	r9[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
8000baf0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000baf4:	a3 68       	lsl	r8,0x2
8000baf6:	e0 38 ff 00 	sub	r8,130816
8000bafa:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000bafe:	a3 69       	lsl	r9,0x2
8000bb00:	e0 39 ff 00 	sub	r9,130816
8000bb04:	72 09       	ld.w	r9,r9[0x0]
8000bb06:	a9 d9       	cbr	r9,0x9
8000bb08:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
8000bb0a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000bb0e:	a3 68       	lsl	r8,0x2
8000bb10:	e0 38 fe 10 	sub	r8,130576
8000bb14:	e8 69 00 00 	mov	r9,524288
8000bb18:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
8000bb1a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000bb1e:	a3 68       	lsl	r8,0x2
8000bb20:	e0 38 fe 10 	sub	r8,130576
8000bb24:	e4 69 00 00 	mov	r9,262144
8000bb28:	91 09       	st.w	r8[0x0],r9
				return true;
8000bb2a:	30 18       	mov	r8,1
8000bb2c:	c0 e8       	rjmp	8000bb48 <udd_ep_interrupt+0x200>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000bb2e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000bb32:	2f f8       	sub	r8,-1
8000bb34:	ef 68 ff f7 	st.b	r7[-9],r8
8000bb38:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000bb3c:	30 28       	mov	r8,2
8000bb3e:	f0 09 18 00 	cp.b	r9,r8
8000bb42:	fe 98 ff 0b 	brls	8000b958 <udd_ep_interrupt+0x10>
				udd_reset_data_toggle(ep);
				return true;
			}
		}
	}
	return false;
8000bb46:	30 08       	mov	r8,0
}
8000bb48:	10 9c       	mov	r12,r8
8000bb4a:	2f dd       	sub	sp,-12
8000bb4c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb50:	00 00       	add	r0,r0
8000bb52:	07 c4       	ld.ub	r4,r3[0x4]
8000bb54:	80 00       	ld.sh	r0,r0[0x0]
8000bb56:	b6 f4       	st.b	r11[0x7],r4
8000bb58:	80 00       	ld.sh	r0,r0[0x0]
8000bb5a:	b6 70       	st.h	r11[0xe],r0

8000bb5c <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000bb5c:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000bb60:	fe c0 cd 60 	sub	r0,pc,-12960

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
8000bb64:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000bb68:	d5 53       	csrf	0x15
  cp      r0, r1
8000bb6a:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
8000bb6c:	e0 61 02 48 	mov	r1,584
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
8000bb70:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000bb72:	c0 72       	brcc	8000bb80 <idata_load_loop_end>
  cp      r0, r1
8000bb74:	fe c2 c3 ac 	sub	r2,pc,-15444

8000bb78 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000bb78:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
8000bb7a:	a1 24       	st.d	r0++,r4
  cp      r0, r1
8000bb7c:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000bb7e:	cf d3       	brcs	8000bb78 <idata_load_loop>

8000bb80 <idata_load_loop_end>:
  mov     r2, 0
8000bb80:	e0 60 02 48 	mov	r0,584
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000bb84:	e0 61 10 30 	mov	r1,4144
  cp      r0, r1
  brlo    udata_clear_loop
8000bb88:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000bb8a:	c0 62       	brcc	8000bb96 <udata_clear_loop_end>
8000bb8c:	30 02       	mov	r2,0
8000bb8e:	30 03       	mov	r3,0

8000bb90 <udata_clear_loop>:
8000bb90:	a1 22       	st.d	r0++,r2
8000bb92:	02 30       	cp.w	r0,r1
8000bb94:	cf e3       	brcs	8000bb90 <udata_clear_loop>

8000bb96 <udata_clear_loop_end>:
8000bb96:	fe cf d6 fe 	sub	pc,pc,-10498
8000bb9a:	d7 03       	nop

8000bb9c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8000bb9c:	eb cd 40 80 	pushm	r7,lr
8000bba0:	1a 97       	mov	r7,sp
8000bba2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000bba4:	e1 b8 00 00 	mfsr	r8,0x0
8000bba8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8000bbac:	d3 03       	ssrf	0x10

	return flags;
8000bbae:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000bbb2:	10 9c       	mov	r12,r8
8000bbb4:	2f fd       	sub	sp,-4
8000bbb6:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bbba <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8000bbba:	eb cd 40 80 	pushm	r7,lr
8000bbbe:	1a 97       	mov	r7,sp
8000bbc0:	20 1d       	sub	sp,4
8000bbc2:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000bbc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbca:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8000bbce:	2f fd       	sub	sp,-4
8000bbd0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bbd4 <osc_enable>:
#include <stdbool.h>
#include <stdint.h>
#include <avr32/io.h>

static inline void osc_enable(uint8_t id)
{
8000bbd4:	eb cd 40 80 	pushm	r7,lr
8000bbd8:	1a 97       	mov	r7,sp
8000bbda:	20 3d       	sub	sp,12
8000bbdc:	18 98       	mov	r8,r12
8000bbde:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();
8000bbe2:	f0 1f 00 2b 	mcall	8000bc8c <osc_enable+0xb8>
8000bbe6:	18 98       	mov	r8,r12
8000bbe8:	ef 48 ff f8 	st.w	r7[-8],r8

	switch (id) {
8000bbec:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000bbf0:	58 18       	cp.w	r8,1
8000bbf2:	c1 c0       	breq	8000bc2a <osc_enable+0x56>
8000bbf4:	58 28       	cp.w	r8,2
8000bbf6:	c3 10       	breq	8000bc58 <osc_enable+0x84>
8000bbf8:	58 08       	cp.w	r8,0
8000bbfa:	c4 21       	brne	8000bc7e <osc_enable+0xaa>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
8000bbfc:	e0 68 03 00 	mov	r8,768
8000bc00:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
8000bc04:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc08:	e8 18 00 07 	orl	r8,0x7
8000bc0c:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl0 = oscctrl;
8000bc10:	fe 78 0c 00 	mov	r8,-62464
8000bc14:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bc18:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
8000bc1a:	fe 78 0c 00 	mov	r8,-62464
8000bc1e:	fe 79 0c 00 	mov	r9,-62464
8000bc22:	72 09       	ld.w	r9,r9[0x0]
8000bc24:	a3 a9       	sbr	r9,0x2
8000bc26:	91 09       	st.w	r8[0x0],r9
		break;
8000bc28:	c2 b8       	rjmp	8000bc7e <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		oscctrl = OSC1_STARTUP_VALUE <<
8000bc2a:	e0 68 03 00 	mov	r8,768
8000bc2e:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL1_STARTUP_OFFSET;
		oscctrl |= OSC1_MODE_VALUE << AVR32_PM_OSCCTRL1_MODE_OFFSET;
8000bc32:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc36:	e8 18 00 07 	orl	r8,0x7
8000bc3a:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl1 = oscctrl;
8000bc3e:	fe 78 0c 00 	mov	r8,-62464
8000bc42:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bc46:	91 b9       	st.w	r8[0x2c],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC1EN;
8000bc48:	fe 78 0c 00 	mov	r8,-62464
8000bc4c:	fe 79 0c 00 	mov	r9,-62464
8000bc50:	72 09       	ld.w	r9,r9[0x0]
8000bc52:	a3 b9       	sbr	r9,0x3
8000bc54:	91 09       	st.w	r8[0x0],r9
		break;
8000bc56:	c1 48       	rjmp	8000bc7e <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
8000bc58:	e2 68 00 00 	mov	r8,131072
8000bc5c:	ef 48 ff fc 	st.w	r7[-4],r8
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
8000bc60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc64:	a9 a8       	sbr	r8,0x8
8000bc66:	ef 48 ff fc 	st.w	r7[-4],r8
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
8000bc6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc6e:	a1 a8       	sbr	r8,0x0
8000bc70:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl32 = oscctrl;
8000bc74:	fe 78 0c 00 	mov	r8,-62464
8000bc78:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bc7c:	91 c9       	st.w	r8[0x30],r9
	default:
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
8000bc7e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bc82:	f0 1f 00 04 	mcall	8000bc90 <osc_enable+0xbc>
}
8000bc86:	2f dd       	sub	sp,-12
8000bc88:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc8c:	80 00       	ld.sh	r0,r0[0x0]
8000bc8e:	bb 9c       	lsr	r12,0x1b
8000bc90:	80 00       	ld.sh	r0,r0[0x0]
8000bc92:	bb ba       	sbr	r10,0x1b

8000bc94 <osc_is_ready>:
	}
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
8000bc94:	eb cd 40 80 	pushm	r7,lr
8000bc98:	1a 97       	mov	r7,sp
8000bc9a:	20 1d       	sub	sp,4
8000bc9c:	18 98       	mov	r8,r12
8000bc9e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000bca2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bca6:	58 18       	cp.w	r8,1
8000bca8:	c0 d0       	breq	8000bcc2 <osc_is_ready+0x2e>
8000bcaa:	58 28       	cp.w	r8,2
8000bcac:	c1 30       	breq	8000bcd2 <osc_is_ready+0x3e>
8000bcae:	58 08       	cp.w	r8,0
8000bcb0:	c1 91       	brne	8000bce2 <osc_is_ready+0x4e>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
8000bcb2:	fe 78 0c 00 	mov	r8,-62464
8000bcb6:	71 58       	ld.w	r8,r8[0x54]
8000bcb8:	e2 18 00 80 	andl	r8,0x80,COH
8000bcbc:	5f 18       	srne	r8
8000bcbe:	5c 58       	castu.b	r8
8000bcc0:	c1 28       	rjmp	8000bce4 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC1RDY));
8000bcc2:	fe 78 0c 00 	mov	r8,-62464
8000bcc6:	71 58       	ld.w	r8,r8[0x54]
8000bcc8:	e2 18 01 00 	andl	r8,0x100,COH
8000bccc:	5f 18       	srne	r8
8000bcce:	5c 58       	castu.b	r8
8000bcd0:	c0 a8       	rjmp	8000bce4 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC32RDY));
8000bcd2:	fe 78 0c 00 	mov	r8,-62464
8000bcd6:	71 58       	ld.w	r8,r8[0x54]
8000bcd8:	e2 18 02 00 	andl	r8,0x200,COH
8000bcdc:	5f 18       	srne	r8
8000bcde:	5c 58       	castu.b	r8
8000bce0:	c0 28       	rjmp	8000bce4 <osc_is_ready+0x50>
#endif

	default:
		/* unhandled_case(id); */
		return false;
8000bce2:	30 08       	mov	r8,0
	}
}
8000bce4:	10 9c       	mov	r12,r8
8000bce6:	2f fd       	sub	sp,-4
8000bce8:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bcec <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
8000bcec:	eb cd 40 80 	pushm	r7,lr
8000bcf0:	1a 97       	mov	r7,sp
8000bcf2:	20 1d       	sub	sp,4
8000bcf4:	18 98       	mov	r8,r12
8000bcf6:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000bcfa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bcfe:	58 18       	cp.w	r8,1
8000bd00:	c0 a0       	breq	8000bd14 <osc_get_rate+0x28>
8000bd02:	58 28       	cp.w	r8,2
8000bd04:	c0 d0       	breq	8000bd1e <osc_get_rate+0x32>
8000bd06:	58 08       	cp.w	r8,0
8000bd08:	c0 e1       	brne	8000bd24 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000bd0a:	e0 68 1b 00 	mov	r8,6912
8000bd0e:	ea 18 00 b7 	orh	r8,0xb7
8000bd12:	c0 a8       	rjmp	8000bd26 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000bd14:	e0 68 44 00 	mov	r8,17408
8000bd18:	ea 18 00 ac 	orh	r8,0xac
8000bd1c:	c0 58       	rjmp	8000bd26 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000bd1e:	e0 68 80 00 	mov	r8,32768
8000bd22:	c0 28       	rjmp	8000bd26 <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000bd24:	30 08       	mov	r8,0
	}
}
8000bd26:	10 9c       	mov	r12,r8
8000bd28:	2f fd       	sub	sp,-4
8000bd2a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd2e:	d7 03       	nop

8000bd30 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8000bd30:	eb cd 40 80 	pushm	r7,lr
8000bd34:	1a 97       	mov	r7,sp
8000bd36:	20 1d       	sub	sp,4
8000bd38:	18 98       	mov	r8,r12
8000bd3a:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8000bd3e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bd42:	10 9c       	mov	r12,r8
8000bd44:	f0 1f 00 05 	mcall	8000bd58 <osc_wait_ready+0x28>
8000bd48:	18 98       	mov	r8,r12
8000bd4a:	ec 18 00 01 	eorl	r8,0x1
8000bd4e:	5c 58       	castu.b	r8
8000bd50:	cf 71       	brne	8000bd3e <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
8000bd52:	2f fd       	sub	sp,-4
8000bd54:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd58:	80 00       	ld.sh	r0,r0[0x0]
8000bd5a:	bc 94       	st.b	lr[0x1],r4

8000bd5c <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8000bd5c:	eb cd 40 80 	pushm	r7,lr
8000bd60:	1a 97       	mov	r7,sp
8000bd62:	20 2d       	sub	sp,8
8000bd64:	ef 4c ff fc 	st.w	r7[-4],r12
8000bd68:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
8000bd6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd70:	70 09       	ld.w	r9,r8[0x0]
8000bd72:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bd76:	2f e8       	sub	r8,-2
8000bd78:	30 1a       	mov	r10,1
8000bd7a:	f4 08 09 48 	lsl	r8,r10,r8
8000bd7e:	10 49       	or	r9,r8
8000bd80:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd84:	91 09       	st.w	r8[0x0],r9
}
8000bd86:	2f ed       	sub	sp,-8
8000bd88:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bd8c <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8000bd8c:	eb cd 40 80 	pushm	r7,lr
8000bd90:	1a 97       	mov	r7,sp
8000bd92:	20 5d       	sub	sp,20
8000bd94:	ef 4c ff f8 	st.w	r7[-8],r12
8000bd98:	ef 4b ff f4 	st.w	r7[-12],r11
8000bd9c:	ef 4a ff f0 	st.w	r7[-16],r10
8000bda0:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8000bda4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bda8:	5c 58       	castu.b	r8
8000bdaa:	10 9c       	mov	r12,r8
8000bdac:	f0 1f 00 2e 	mcall	8000be64 <pll_config_init+0xd8>
8000bdb0:	18 99       	mov	r9,r12
8000bdb2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bdb6:	f2 08 02 48 	mul	r8,r9,r8
8000bdba:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8000bdbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bdc2:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000bdc6:	f0 09 0d 08 	divu	r8,r8,r9
8000bdca:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8000bdce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bdd2:	30 09       	mov	r9,0
8000bdd4:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8000bdd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bdda:	e0 69 b3 ff 	mov	r9,46079
8000bdde:	ea 19 04 c4 	orh	r9,0x4c4
8000bde2:	12 38       	cp.w	r8,r9
8000bde4:	e0 8b 00 16 	brhi	8000be10 <pll_config_init+0x84>
8000bde8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bdec:	58 88       	cp.w	r8,8
8000bdee:	e0 8b 00 11 	brhi	8000be10 <pll_config_init+0x84>
		mul *= 2;
8000bdf2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bdf6:	a1 78       	lsl	r8,0x1
8000bdf8:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8000bdfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be00:	a1 78       	lsl	r8,0x1
8000be02:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8000be06:	30 1b       	mov	r11,1
8000be08:	ee fc ff f8 	ld.w	r12,r7[-8]
8000be0c:	f0 1f 00 17 	mcall	8000be68 <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8000be10:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be14:	e0 69 fe 7f 	mov	r9,65151
8000be18:	ea 19 0a 21 	orh	r9,0xa21
8000be1c:	12 38       	cp.w	r8,r9
8000be1e:	e0 8b 00 07 	brhi	8000be2c <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8000be22:	30 0b       	mov	r11,0
8000be24:	ee fc ff f8 	ld.w	r12,r7[-8]
8000be28:	f0 1f 00 10 	mcall	8000be68 <pll_config_init+0xdc>

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000be2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be30:	70 09       	ld.w	r9,r8[0x0]
8000be32:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000be36:	20 18       	sub	r8,1
8000be38:	f0 0a 15 10 	lsl	r10,r8,0x10
			| (div << AVR32_PM_PLL0_PLLDIV)
8000be3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000be40:	a9 68       	lsl	r8,0x8
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
8000be42:	10 4a       	or	r10,r8
			| (src << AVR32_PM_PLL0_PLLOSC);
8000be44:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000be48:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000be4a:	f5 e8 10 08 	or	r8,r10,r8
8000be4e:	f3 e8 10 08 	or	r8,r9,r8
8000be52:	10 99       	mov	r9,r8
8000be54:	ea 19 3f 00 	orh	r9,0x3f00
8000be58:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be5c:	91 09       	st.w	r8[0x0],r9
			| (div << AVR32_PM_PLL0_PLLDIV)
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
			| (src << AVR32_PM_PLL0_PLLOSC);
}
8000be5e:	2f bd       	sub	sp,-20
8000be60:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be64:	80 00       	ld.sh	r0,r0[0x0]
8000be66:	bc ec       	st.b	lr[0x6],r12
8000be68:	80 00       	ld.sh	r0,r0[0x0]
8000be6a:	bd 5c       	asr	r12,0x1d

8000be6c <pll_enable>:
	AVR32_PM.pll[pll_id] = cfg->ctrl;
}

static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
8000be6c:	eb cd 40 80 	pushm	r7,lr
8000be70:	1a 97       	mov	r7,sp
8000be72:	20 2d       	sub	sp,8
8000be74:	ef 4c ff fc 	st.w	r7[-4],r12
8000be78:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
8000be7c:	fe 78 0c 00 	mov	r8,-62464
8000be80:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000be84:	ee fa ff fc 	ld.w	r10,r7[-4]
8000be88:	74 0a       	ld.w	r10,r10[0x0]
8000be8a:	a1 aa       	sbr	r10,0x0
8000be8c:	2f 89       	sub	r9,-8
8000be8e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000be92:	2f ed       	sub	sp,-8
8000be94:	e3 cd 80 80 	ldm	sp++,r7,pc

8000be98 <pll_is_locked>:

	AVR32_PM.pll[pll_id] = 0;
}

static inline bool pll_is_locked(unsigned int pll_id)
{
8000be98:	eb cd 40 80 	pushm	r7,lr
8000be9c:	1a 97       	mov	r7,sp
8000be9e:	20 1d       	sub	sp,4
8000bea0:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
8000bea4:	fe 78 0c 00 	mov	r8,-62464
8000bea8:	71 59       	ld.w	r9,r8[0x54]
8000beaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000beae:	30 1a       	mov	r10,1
8000beb0:	f4 08 09 48 	lsl	r8,r10,r8
8000beb4:	f3 e8 00 08 	and	r8,r9,r8
8000beb8:	5f 18       	srne	r8
8000beba:	5c 58       	castu.b	r8
}
8000bebc:	10 9c       	mov	r12,r8
8000bebe:	2f fd       	sub	sp,-4
8000bec0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bec4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
8000bec4:	eb cd 40 80 	pushm	r7,lr
8000bec8:	1a 97       	mov	r7,sp
8000beca:	20 1d       	sub	sp,4
8000becc:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000bed0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bed4:	58 08       	cp.w	r8,0
8000bed6:	c0 40       	breq	8000bede <pll_enable_source+0x1a>
8000bed8:	58 18       	cp.w	r8,1
8000beda:	c1 10       	breq	8000befc <pll_enable_source+0x38>
8000bedc:	c2 08       	rjmp	8000bf1c <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000bede:	30 0c       	mov	r12,0
8000bee0:	f0 1f 00 11 	mcall	8000bf24 <pll_enable_source+0x60>
8000bee4:	18 98       	mov	r8,r12
8000bee6:	ec 18 00 01 	eorl	r8,0x1
8000beea:	5c 58       	castu.b	r8
8000beec:	c1 70       	breq	8000bf1a <pll_enable_source+0x56>
			osc_enable(OSC_ID_OSC0);
8000beee:	30 0c       	mov	r12,0
8000bef0:	f0 1f 00 0e 	mcall	8000bf28 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC0);
8000bef4:	30 0c       	mov	r12,0
8000bef6:	f0 1f 00 0e 	mcall	8000bf2c <pll_enable_source+0x68>
		}
		break;
8000befa:	c1 18       	rjmp	8000bf1c <pll_enable_source+0x58>

	case PLL_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000befc:	30 1c       	mov	r12,1
8000befe:	f0 1f 00 0a 	mcall	8000bf24 <pll_enable_source+0x60>
8000bf02:	18 98       	mov	r8,r12
8000bf04:	ec 18 00 01 	eorl	r8,0x1
8000bf08:	5c 58       	castu.b	r8
8000bf0a:	c0 90       	breq	8000bf1c <pll_enable_source+0x58>
			osc_enable(OSC_ID_OSC1);
8000bf0c:	30 1c       	mov	r12,1
8000bf0e:	f0 1f 00 07 	mcall	8000bf28 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC1);
8000bf12:	30 1c       	mov	r12,1
8000bf14:	f0 1f 00 06 	mcall	8000bf2c <pll_enable_source+0x68>
8000bf18:	c0 28       	rjmp	8000bf1c <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000bf1a:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000bf1c:	2f fd       	sub	sp,-4
8000bf1e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf22:	00 00       	add	r0,r0
8000bf24:	80 00       	ld.sh	r0,r0[0x0]
8000bf26:	bc 94       	st.b	lr[0x1],r4
8000bf28:	80 00       	ld.sh	r0,r0[0x0]
8000bf2a:	bb d4       	cbr	r4,0x1b
8000bf2c:	80 00       	ld.sh	r0,r0[0x0]
8000bf2e:	bd 30       	mul	r0,lr

8000bf30 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
8000bf30:	eb cd 40 80 	pushm	r7,lr
8000bf34:	1a 97       	mov	r7,sp
8000bf36:	20 2d       	sub	sp,8
8000bf38:	ef 4c ff f8 	st.w	r7[-8],r12
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
8000bf3c:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bf40:	f0 1f 00 15 	mcall	8000bf94 <pll_enable_config_defaults+0x64>
8000bf44:	18 98       	mov	r8,r12
8000bf46:	58 08       	cp.w	r8,0
8000bf48:	c2 11       	brne	8000bf8a <pll_enable_config_defaults+0x5a>
		return; // Pll already running
	}
	switch (pll_id) {
8000bf4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bf4e:	58 08       	cp.w	r8,0
8000bf50:	c0 c1       	brne	8000bf68 <pll_enable_config_defaults+0x38>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
8000bf52:	30 0c       	mov	r12,0
8000bf54:	f0 1f 00 11 	mcall	8000bf98 <pll_enable_config_defaults+0x68>
		pll_config_init(&pllcfg,
8000bf58:	ee c8 00 04 	sub	r8,r7,4
8000bf5c:	30 b9       	mov	r9,11
8000bf5e:	30 2a       	mov	r10,2
8000bf60:	30 0b       	mov	r11,0
8000bf62:	10 9c       	mov	r12,r8
8000bf64:	f0 1f 00 0e 	mcall	8000bf9c <pll_enable_config_defaults+0x6c>
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
8000bf68:	ee c8 00 04 	sub	r8,r7,4
8000bf6c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bf70:	10 9c       	mov	r12,r8
8000bf72:	f0 1f 00 0c 	mcall	8000bfa0 <pll_enable_config_defaults+0x70>
	while (!pll_is_locked(pll_id));
8000bf76:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bf7a:	f0 1f 00 07 	mcall	8000bf94 <pll_enable_config_defaults+0x64>
8000bf7e:	18 98       	mov	r8,r12
8000bf80:	ec 18 00 01 	eorl	r8,0x1
8000bf84:	5c 58       	castu.b	r8
8000bf86:	cf 81       	brne	8000bf76 <pll_enable_config_defaults+0x46>
8000bf88:	c0 28       	rjmp	8000bf8c <pll_enable_config_defaults+0x5c>
static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
		return; // Pll already running
8000bf8a:	d7 03       	nop
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
}
8000bf8c:	2f ed       	sub	sp,-8
8000bf8e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf92:	00 00       	add	r0,r0
8000bf94:	80 00       	ld.sh	r0,r0[0x0]
8000bf96:	be 98       	st.b	pc[0x1],r8
8000bf98:	80 00       	ld.sh	r0,r0[0x0]
8000bf9a:	be c4       	st.b	pc[0x4],r4
8000bf9c:	80 00       	ld.sh	r0,r0[0x0]
8000bf9e:	bd 8c       	lsr	r12,0x1c
8000bfa0:	80 00       	ld.sh	r0,r0[0x0]
8000bfa2:	be 6c       	st.h	pc[0xc],r12

8000bfa4 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8000bfa4:	eb cd 40 80 	pushm	r7,lr
8000bfa8:	1a 97       	mov	r7,sp
8000bfaa:	20 2d       	sub	sp,8
8000bfac:	ef 4c ff fc 	st.w	r7[-4],r12
8000bfb0:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8000bfb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bfb8:	30 09       	mov	r9,0
8000bfba:	91 09       	st.w	r8[0x0],r9
}
8000bfbc:	2f ed       	sub	sp,-8
8000bfbe:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bfc2 <genclk_config_set_source>:
	AVR32_PM.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8000bfc2:	eb cd 40 80 	pushm	r7,lr
8000bfc6:	1a 97       	mov	r7,sp
8000bfc8:	20 3d       	sub	sp,12
8000bfca:	ef 4c ff f8 	st.w	r7[-8],r12
8000bfce:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t mask;

	mask = AVR32_PM_GCCTRL_OSCSEL_MASK | AVR32_PM_GCCTRL_PLLSEL_MASK;
8000bfd2:	30 38       	mov	r8,3
8000bfd4:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(!(src & ~mask));

	cfg->ctrl = (cfg->ctrl & ~mask) | (src << AVR32_PM_GCCTRL_OSCSEL);
8000bfd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bfdc:	70 09       	ld.w	r9,r8[0x0]
8000bfde:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bfe2:	5c d8       	com	r8
8000bfe4:	10 69       	and	r9,r8
8000bfe6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bfea:	10 49       	or	r9,r8
8000bfec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bff0:	91 09       	st.w	r8[0x0],r9
}
8000bff2:	2f dd       	sub	sp,-12
8000bff4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bff8 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8000bff8:	eb cd 40 80 	pushm	r7,lr
8000bffc:	1a 97       	mov	r7,sp
8000bffe:	20 2d       	sub	sp,8
8000c000:	ef 4c ff fc 	st.w	r7[-4],r12
8000c004:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert((divider > 0) && (divider <= GENCLK_DIV_MAX));

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_PM_GCCTRL_DIVEN_MASK | AVR32_PM_GCCTRL_DIV_MASK);
8000c008:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c00c:	70 08       	ld.w	r8,r8[0x0]
8000c00e:	10 99       	mov	r9,r8
8000c010:	e0 19 00 ef 	andl	r9,0xef
8000c014:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c018:	91 09       	st.w	r8[0x0],r9

	if (divider > 1) {
8000c01a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c01e:	58 18       	cp.w	r8,1
8000c020:	e0 88 00 17 	brls	8000c04e <genclk_config_set_divider+0x56>
		cfg->ctrl |= 1U << AVR32_PM_GCCTRL_DIVEN;
8000c024:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c028:	70 08       	ld.w	r8,r8[0x0]
8000c02a:	10 99       	mov	r9,r8
8000c02c:	a5 a9       	sbr	r9,0x4
8000c02e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c032:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_PM_GCCTRL_DIV;
8000c034:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c038:	70 09       	ld.w	r9,r8[0x0]
8000c03a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c03e:	2f f8       	sub	r8,-1
8000c040:	a1 98       	lsr	r8,0x1
8000c042:	20 18       	sub	r8,1
8000c044:	a9 68       	lsl	r8,0x8
8000c046:	10 49       	or	r9,r8
8000c048:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c04c:	91 09       	st.w	r8[0x0],r9
	}
}
8000c04e:	2f ed       	sub	sp,-8
8000c050:	e3 cd 80 80 	ldm	sp++,r7,pc

8000c054 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8000c054:	eb cd 40 80 	pushm	r7,lr
8000c058:	1a 97       	mov	r7,sp
8000c05a:	20 2d       	sub	sp,8
8000c05c:	ef 4c ff fc 	st.w	r7[-4],r12
8000c060:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
8000c064:	fe 78 0c 00 	mov	r8,-62464
8000c068:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000c06c:	ee fa ff fc 	ld.w	r10,r7[-4]
8000c070:	74 0a       	ld.w	r10,r10[0x0]
8000c072:	a3 aa       	sbr	r10,0x2
8000c074:	2e 89       	sub	r9,-24
8000c076:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000c07a:	2f ed       	sub	sp,-8
8000c07c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000c080 <genclk_enable_source>:
{
	AVR32_PM.gcctrl[id] = 0;
}

static inline void genclk_enable_source(enum genclk_source src)
{
8000c080:	eb cd 40 80 	pushm	r7,lr
8000c084:	1a 97       	mov	r7,sp
8000c086:	20 1d       	sub	sp,4
8000c088:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000c08c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c090:	58 18       	cp.w	r8,1
8000c092:	c1 40       	breq	8000c0ba <genclk_enable_source+0x3a>
8000c094:	c0 43       	brcs	8000c09c <genclk_enable_source+0x1c>
8000c096:	58 28       	cp.w	r8,2
8000c098:	c2 00       	breq	8000c0d8 <genclk_enable_source+0x58>
8000c09a:	c2 68       	rjmp	8000c0e6 <genclk_enable_source+0x66>
#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000c09c:	30 0c       	mov	r12,0
8000c09e:	f0 1f 00 14 	mcall	8000c0ec <genclk_enable_source+0x6c>
8000c0a2:	18 98       	mov	r8,r12
8000c0a4:	ec 18 00 01 	eorl	r8,0x1
8000c0a8:	5c 58       	castu.b	r8
8000c0aa:	c1 b0       	breq	8000c0e0 <genclk_enable_source+0x60>
			osc_enable(OSC_ID_OSC0);
8000c0ac:	30 0c       	mov	r12,0
8000c0ae:	f0 1f 00 11 	mcall	8000c0f0 <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC0);
8000c0b2:	30 0c       	mov	r12,0
8000c0b4:	f0 1f 00 10 	mcall	8000c0f4 <genclk_enable_source+0x74>
		}
		break;
8000c0b8:	c1 78       	rjmp	8000c0e6 <genclk_enable_source+0x66>
#endif

#ifdef BOARD_OSC1_HZ
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000c0ba:	30 1c       	mov	r12,1
8000c0bc:	f0 1f 00 0c 	mcall	8000c0ec <genclk_enable_source+0x6c>
8000c0c0:	18 98       	mov	r8,r12
8000c0c2:	ec 18 00 01 	eorl	r8,0x1
8000c0c6:	5c 58       	castu.b	r8
8000c0c8:	c0 e0       	breq	8000c0e4 <genclk_enable_source+0x64>
			osc_enable(OSC_ID_OSC1);
8000c0ca:	30 1c       	mov	r12,1
8000c0cc:	f0 1f 00 09 	mcall	8000c0f0 <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC1);
8000c0d0:	30 1c       	mov	r12,1
8000c0d2:	f0 1f 00 09 	mcall	8000c0f4 <genclk_enable_source+0x74>
		}
		break;
8000c0d6:	c0 88       	rjmp	8000c0e6 <genclk_enable_source+0x66>
#endif

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000c0d8:	30 0c       	mov	r12,0
8000c0da:	f0 1f 00 08 	mcall	8000c0f8 <genclk_enable_source+0x78>
8000c0de:	c0 48       	rjmp	8000c0e6 <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000c0e0:	d7 03       	nop
8000c0e2:	c0 28       	rjmp	8000c0e6 <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
			osc_enable(OSC_ID_OSC1);
			osc_wait_ready(OSC_ID_OSC1);
		}
		break;
8000c0e4:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000c0e6:	2f fd       	sub	sp,-4
8000c0e8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0ec:	80 00       	ld.sh	r0,r0[0x0]
8000c0ee:	bc 94       	st.b	lr[0x1],r4
8000c0f0:	80 00       	ld.sh	r0,r0[0x0]
8000c0f2:	bb d4       	cbr	r4,0x1b
8000c0f4:	80 00       	ld.sh	r0,r0[0x0]
8000c0f6:	bd 30       	mul	r0,lr
8000c0f8:	80 00       	ld.sh	r0,r0[0x0]
8000c0fa:	bf 30       	mul	r0,pc

8000c0fc <genclk_enable_config>:
 * \param id      The ID of the generic clock.
 * \param src     The source clock of the generic clock.
 * \param divider The divider used to generate the generic clock.
 */
static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
8000c0fc:	eb cd 40 80 	pushm	r7,lr
8000c100:	1a 97       	mov	r7,sp
8000c102:	20 4d       	sub	sp,16
8000c104:	ef 4c ff f8 	st.w	r7[-8],r12
8000c108:	ef 4b ff f4 	st.w	r7[-12],r11
8000c10c:	ef 4a ff f0 	st.w	r7[-16],r10
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, id);
8000c110:	ee c8 00 04 	sub	r8,r7,4
8000c114:	ee fb ff f8 	ld.w	r11,r7[-8]
8000c118:	10 9c       	mov	r12,r8
8000c11a:	f0 1f 00 10 	mcall	8000c158 <genclk_enable_config+0x5c>
	genclk_enable_source(src);
8000c11e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c122:	f0 1f 00 0f 	mcall	8000c15c <genclk_enable_config+0x60>
	genclk_config_set_source(&gcfg, src);
8000c126:	ee c8 00 04 	sub	r8,r7,4
8000c12a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c12e:	10 9c       	mov	r12,r8
8000c130:	f0 1f 00 0c 	mcall	8000c160 <genclk_enable_config+0x64>
	genclk_config_set_divider(&gcfg, divider);
8000c134:	ee c8 00 04 	sub	r8,r7,4
8000c138:	ee fb ff f0 	ld.w	r11,r7[-16]
8000c13c:	10 9c       	mov	r12,r8
8000c13e:	f0 1f 00 0a 	mcall	8000c164 <genclk_enable_config+0x68>
	genclk_enable(&gcfg, id);
8000c142:	ee c8 00 04 	sub	r8,r7,4
8000c146:	ee fb ff f8 	ld.w	r11,r7[-8]
8000c14a:	10 9c       	mov	r12,r8
8000c14c:	f0 1f 00 07 	mcall	8000c168 <genclk_enable_config+0x6c>
}
8000c150:	2f cd       	sub	sp,-16
8000c152:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c156:	00 00       	add	r0,r0
8000c158:	80 00       	ld.sh	r0,r0[0x0]
8000c15a:	bf a4       	sbr	r4,0x1e
8000c15c:	80 00       	ld.sh	r0,r0[0x0]
8000c15e:	c0 80       	breq	8000c16e <sysclk_get_main_hz+0x2>
8000c160:	80 00       	ld.sh	r0,r0[0x0]
8000c162:	bf c2       	cbr	r2,0x1e
8000c164:	80 00       	ld.sh	r0,r0[0x0]
8000c166:	bf f8       	*unknown*
8000c168:	80 00       	ld.sh	r0,r0[0x0]
8000c16a:	c0 54       	brge	8000c174 <sysclk_get_main_hz+0x8>

8000c16c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000c16c:	eb cd 40 80 	pushm	r7,lr
8000c170:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000c172:	30 0c       	mov	r12,0
8000c174:	f0 1f 00 06 	mcall	8000c18c <sysclk_get_main_hz+0x20>
8000c178:	18 99       	mov	r9,r12
8000c17a:	12 98       	mov	r8,r9
8000c17c:	a3 68       	lsl	r8,0x2
8000c17e:	12 08       	add	r8,r9
8000c180:	a1 78       	lsl	r8,0x1
8000c182:	12 08       	add	r8,r9
8000c184:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000c186:	10 9c       	mov	r12,r8
8000c188:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c18c:	80 00       	ld.sh	r0,r0[0x0]
8000c18e:	bc ec       	st.b	lr[0x6],r12

8000c190 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000c190:	eb cd 40 80 	pushm	r7,lr
8000c194:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000c196:	f0 1f 00 04 	mcall	8000c1a4 <sysclk_get_cpu_hz+0x14>
8000c19a:	18 98       	mov	r8,r12
}
8000c19c:	10 9c       	mov	r12,r8
8000c19e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1a2:	00 00       	add	r0,r0
8000c1a4:	80 00       	ld.sh	r0,r0[0x0]
8000c1a6:	c1 6c       	rcall	8000c1d2 <sysclk_set_source+0xa>

8000c1a8 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000c1a8:	eb cd 40 80 	pushm	r7,lr
8000c1ac:	1a 97       	mov	r7,sp
8000c1ae:	20 1d       	sub	sp,4
8000c1b0:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000c1b4:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c1b8:	30 1c       	mov	r12,1
8000c1ba:	f0 1f 00 03 	mcall	8000c1c4 <sysclk_enable_hsb_module+0x1c>
}
8000c1be:	2f fd       	sub	sp,-4
8000c1c0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1c4:	80 00       	ld.sh	r0,r0[0x0]
8000c1c6:	c2 1c       	rcall	8000c208 <sysclk_set_source+0x40>

8000c1c8 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint_fast8_t src)
{
8000c1c8:	eb cd 40 80 	pushm	r7,lr
8000c1cc:	1a 97       	mov	r7,sp
8000c1ce:	20 3d       	sub	sp,12
8000c1d0:	ef 4c ff f4 	st.w	r7[-12],r12
	irqflags_t flags;
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
8000c1d4:	f0 1f 00 10 	mcall	8000c214 <sysclk_set_source+0x4c>
8000c1d8:	18 98       	mov	r8,r12
8000c1da:	ef 48 ff f8 	st.w	r7[-8],r8
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
8000c1de:	fe 78 0c 00 	mov	r8,-62464
8000c1e2:	70 08       	ld.w	r8,r8[0x0]
8000c1e4:	e0 18 ff fc 	andl	r8,0xfffc
8000c1e8:	ef 48 ff fc 	st.w	r7[-4],r8
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
8000c1ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c1f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c1f4:	f3 e8 10 08 	or	r8,r9,r8
8000c1f8:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.mcctrl = mcctrl;
8000c1fc:	fe 78 0c 00 	mov	r8,-62464
8000c200:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c204:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000c206:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c20a:	f0 1f 00 04 	mcall	8000c218 <sysclk_set_source+0x50>
}
8000c20e:	2f dd       	sub	sp,-12
8000c210:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c214:	80 00       	ld.sh	r0,r0[0x0]
8000c216:	bb 9c       	lsr	r12,0x1b
8000c218:	80 00       	ld.sh	r0,r0[0x0]
8000c21a:	bb ba       	sbr	r10,0x1b

8000c21c <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8000c21c:	eb cd 40 80 	pushm	r7,lr
8000c220:	1a 97       	mov	r7,sp
8000c222:	20 4d       	sub	sp,16
8000c224:	ef 4c ff f4 	st.w	r7[-12],r12
8000c228:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8000c22c:	f0 1f 00 17 	mcall	8000c288 <sysclk_priv_enable_module+0x6c>
8000c230:	18 98       	mov	r8,r12
8000c232:	ef 48 ff f8 	st.w	r7[-8],r8

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000c236:	fe 78 0c 00 	mov	r8,-62464
8000c23a:	71 58       	ld.w	r8,r8[0x54]
8000c23c:	e2 18 00 40 	andl	r8,0x40,COH
8000c240:	cf b0       	breq	8000c236 <sysclk_priv_enable_module+0x1a>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000c242:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c246:	a3 68       	lsl	r8,0x2
8000c248:	e0 28 f3 f8 	sub	r8,62456
8000c24c:	70 08       	ld.w	r8,r8[0x0]
8000c24e:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8000c252:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000c256:	30 19       	mov	r9,1
8000c258:	f2 08 09 48 	lsl	r8,r9,r8
8000c25c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c260:	f3 e8 10 08 	or	r8,r9,r8
8000c264:	ef 48 ff fc 	st.w	r7[-4],r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000c268:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c26c:	a3 68       	lsl	r8,0x2
8000c26e:	e0 28 f3 f8 	sub	r8,62456
8000c272:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c276:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8000c278:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c27c:	f0 1f 00 04 	mcall	8000c28c <sysclk_priv_enable_module+0x70>
}
8000c280:	2f cd       	sub	sp,-16
8000c282:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c286:	00 00       	add	r0,r0
8000c288:	80 00       	ld.sh	r0,r0[0x0]
8000c28a:	bb 9c       	lsr	r12,0x1b
8000c28c:	80 00       	ld.sh	r0,r0[0x0]
8000c28e:	bb ba       	sbr	r10,0x1b

8000c290 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
8000c290:	eb cd 40 80 	pushm	r7,lr
8000c294:	1a 97       	mov	r7,sp
8000c296:	20 3d       	sub	sp,12
8000c298:	ef 4c ff f4 	st.w	r7[-12],r12
	unsigned int pbus_id = 0;
8000c29c:	30 08       	mov	r8,0
8000c29e:	ef 48 ff f8 	st.w	r7[-8],r8
	irqflags_t   flags;

	/* The AES module is on PBC, others are on PBB */
	if (index == SYSCLK_AES)
8000c2a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c2a6:	58 98       	cp.w	r8,9
8000c2a8:	c0 41       	brne	8000c2b0 <sysclk_enable_pbb_module+0x20>
		pbus_id = 1;
8000c2aa:	30 18       	mov	r8,1
8000c2ac:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
8000c2b0:	f0 1f 00 15 	mcall	8000c304 <sysclk_enable_pbb_module+0x74>
8000c2b4:	18 98       	mov	r8,r12
8000c2b6:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!sysclk_bus_refcount[pbus_id])
8000c2ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c2be:	49 39       	lddpc	r9,8000c308 <sysclk_enable_pbb_module+0x78>
8000c2c0:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000c2c4:	58 08       	cp.w	r8,0
8000c2c6:	c0 91       	brne	8000c2d8 <sysclk_enable_pbb_module+0x48>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
8000c2c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c2cc:	a1 78       	lsl	r8,0x1
8000c2ce:	2f f8       	sub	r8,-1
8000c2d0:	a1 78       	lsl	r8,0x1
8000c2d2:	10 9c       	mov	r12,r8
8000c2d4:	f0 1f 00 0e 	mcall	8000c30c <sysclk_enable_pbb_module+0x7c>
	sysclk_bus_refcount[pbus_id]++;
8000c2d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c2dc:	48 b9       	lddpc	r9,8000c308 <sysclk_enable_pbb_module+0x78>
8000c2de:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000c2e2:	2f f9       	sub	r9,-1
8000c2e4:	5c 59       	castu.b	r9
8000c2e6:	48 9a       	lddpc	r10,8000c308 <sysclk_enable_pbb_module+0x78>
8000c2e8:	f4 08 0b 09 	st.b	r10[r8],r9

	cpu_irq_restore(flags);
8000c2ec:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c2f0:	f0 1f 00 08 	mcall	8000c310 <sysclk_enable_pbb_module+0x80>

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
8000c2f4:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c2f8:	30 3c       	mov	r12,3
8000c2fa:	f0 1f 00 07 	mcall	8000c314 <sysclk_enable_pbb_module+0x84>
}
8000c2fe:	2f dd       	sub	sp,-12
8000c300:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c304:	80 00       	ld.sh	r0,r0[0x0]
8000c306:	bb 9c       	lsr	r12,0x1b
8000c308:	00 00       	add	r0,r0
8000c30a:	07 f0       	ld.ub	r0,r3[0x7]
8000c30c:	80 00       	ld.sh	r0,r0[0x0]
8000c30e:	c1 a8       	rjmp	8000c342 <sysclk_enable_usb+0x2a>
8000c310:	80 00       	ld.sh	r0,r0[0x0]
8000c312:	bb ba       	sbr	r10,0x1b
8000c314:	80 00       	ld.sh	r0,r0[0x0]
8000c316:	c2 1c       	rcall	8000c358 <sysclk_init+0x14>

8000c318 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8000c318:	eb cd 40 80 	pushm	r7,lr
8000c31c:	1a 97       	mov	r7,sp
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
8000c31e:	30 1c       	mov	r12,1
8000c320:	f0 1f 00 06 	mcall	8000c338 <sysclk_enable_usb+0x20>
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000c324:	30 3c       	mov	r12,3
8000c326:	f0 1f 00 06 	mcall	8000c33c <sysclk_enable_usb+0x24>
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
8000c32a:	30 1a       	mov	r10,1
8000c32c:	30 0b       	mov	r11,0
8000c32e:	30 4c       	mov	r12,4
8000c330:	f0 1f 00 04 	mcall	8000c340 <sysclk_enable_usb+0x28>
}
8000c334:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c338:	80 00       	ld.sh	r0,r0[0x0]
8000c33a:	c2 90       	breq	8000c38c <sysclk_init+0x48>
8000c33c:	80 00       	ld.sh	r0,r0[0x0]
8000c33e:	c1 a8       	rjmp	8000c372 <sysclk_init+0x2e>
8000c340:	80 00       	ld.sh	r0,r0[0x0]
8000c342:	c0 fc       	rcall	8000c360 <sysclk_init+0x1c>

8000c344 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8000c344:	eb cd 40 80 	pushm	r7,lr
8000c348:	1a 97       	mov	r7,sp
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000c34a:	30 0c       	mov	r12,0
8000c34c:	f0 1f 00 07 	mcall	8000c368 <sysclk_init+0x24>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
8000c350:	f0 1f 00 07 	mcall	8000c36c <sysclk_init+0x28>
8000c354:	18 98       	mov	r8,r12
8000c356:	10 9c       	mov	r12,r8
8000c358:	f0 1f 00 06 	mcall	8000c370 <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_PLL0);
8000c35c:	30 2c       	mov	r12,2
8000c35e:	f0 1f 00 06 	mcall	8000c374 <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000c362:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c366:	00 00       	add	r0,r0
8000c368:	80 00       	ld.sh	r0,r0[0x0]
8000c36a:	bf 30       	mul	r0,pc
8000c36c:	80 00       	ld.sh	r0,r0[0x0]
8000c36e:	c1 90       	breq	8000c3a0 <get_nb_lun>
8000c370:	80 00       	ld.sh	r0,r0[0x0]
8000c372:	88 a8       	ld.uh	r8,r4[0x4]
8000c374:	80 00       	ld.sh	r0,r0[0x0]
8000c376:	c1 c8       	rjmp	8000c3ae <get_nb_lun+0xe>
8000c378:	22 53       	sub	r3,37
8000c37a:	44 20       	lddsp	r0,sp[0x108]
8000c37c:	43 61       	lddsp	r1,sp[0xd8]
8000c37e:	72 64       	ld.w	r4,r9[0x18]
8000c380:	20 53       	sub	r3,5
8000c382:	6c 6f       	ld.w	pc,r6[0x18]
8000c384:	74 20       	ld.w	r0,r10[0x8]
8000c386:	30 22       	mov	r2,2
8000c388:	00 00       	add	r0,r0
8000c38a:	00 00       	add	r0,r0
8000c38c:	22 53       	sub	r3,37
8000c38e:	44 20       	lddsp	r0,sp[0x108]
8000c390:	43 61       	lddsp	r1,sp[0xd8]
8000c392:	72 64       	ld.w	r4,r9[0x18]
8000c394:	20 53       	sub	r3,5
8000c396:	6c 6f       	ld.w	pc,r6[0x18]
8000c398:	74 20       	ld.w	r0,r10[0x8]
8000c39a:	31 22       	mov	r2,18
8000c39c:	00 00       	add	r0,r0
	...

8000c3a0 <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
8000c3a0:	eb cd 40 80 	pushm	r7,lr
8000c3a4:	1a 97       	mov	r7,sp

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
8000c3a6:	30 28       	mov	r8,2
#endif
}
8000c3a8:	10 9c       	mov	r12,r8
8000c3aa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3ae:	d7 03       	nop

8000c3b0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
8000c3b0:	eb cd 40 80 	pushm	r7,lr
8000c3b4:	1a 97       	mov	r7,sp
8000c3b6:	20 2d       	sub	sp,8
8000c3b8:	18 98       	mov	r8,r12
8000c3ba:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000c3be:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c3c2:	30 18       	mov	r8,1
8000c3c4:	f0 09 18 00 	cp.b	r9,r8
8000c3c8:	e0 8b 00 0f 	brhi	8000c3e6 <mem_test_unit_ready+0x36>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
8000c3cc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c3d0:	48 aa       	lddpc	r10,8000c3f8 <mem_test_unit_ready+0x48>
8000c3d2:	12 98       	mov	r8,r9
8000c3d4:	a3 78       	lsl	r8,0x3
8000c3d6:	12 18       	sub	r8,r9
8000c3d8:	a3 68       	lsl	r8,0x2
8000c3da:	f4 08 00 08 	add	r8,r10,r8
8000c3de:	70 08       	ld.w	r8,r8[0x0]
8000c3e0:	5d 18       	icall	r8
8000c3e2:	18 98       	mov	r8,r12
8000c3e4:	c0 28       	rjmp	8000c3e8 <mem_test_unit_ready+0x38>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000c3e6:	30 18       	mov	r8,1
8000c3e8:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000c3ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c3f0:	10 9c       	mov	r12,r8
8000c3f2:	2f ed       	sub	sp,-8
8000c3f4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3f8:	80 00       	ld.sh	r0,r0[0x0]
8000c3fa:	f6 24 eb cd 	sub	r4,-594995

8000c3fc <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
8000c3fc:	eb cd 40 80 	pushm	r7,lr
8000c400:	1a 97       	mov	r7,sp
8000c402:	20 3d       	sub	sp,12
8000c404:	18 98       	mov	r8,r12
8000c406:	ef 4b ff f4 	st.w	r7[-12],r11
8000c40a:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000c40e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c412:	30 18       	mov	r8,1
8000c414:	f0 09 18 00 	cp.b	r9,r8
8000c418:	e0 8b 00 10 	brhi	8000c438 <mem_read_capacity+0x3c>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
8000c41c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c420:	48 ba       	lddpc	r10,8000c44c <mem_read_capacity+0x50>
8000c422:	12 98       	mov	r8,r9
8000c424:	a3 78       	lsl	r8,0x3
8000c426:	12 18       	sub	r8,r9
8000c428:	2f f8       	sub	r8,-1
8000c42a:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
8000c42e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c432:	5d 18       	icall	r8
8000c434:	18 98       	mov	r8,r12
8000c436:	c0 28       	rjmp	8000c43a <mem_read_capacity+0x3e>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000c438:	30 18       	mov	r8,1
8000c43a:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000c43e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c442:	10 9c       	mov	r12,r8
8000c444:	2f dd       	sub	sp,-12
8000c446:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c44a:	00 00       	add	r0,r0
8000c44c:	80 00       	ld.sh	r0,r0[0x0]
8000c44e:	f6 24 eb cd 	sub	r4,-594995

8000c450 <mem_wr_protect>:
  return sector_size;
}


bool mem_wr_protect(U8 lun)
{
8000c450:	eb cd 40 80 	pushm	r7,lr
8000c454:	1a 97       	mov	r7,sp
8000c456:	20 2d       	sub	sp,8
8000c458:	18 98       	mov	r8,r12
8000c45a:	ef 68 ff f8 	st.b	r7[-8],r8
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000c45e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c462:	30 18       	mov	r8,1
8000c464:	f0 09 18 00 	cp.b	r9,r8
8000c468:	e0 8b 00 10 	brhi	8000c488 <mem_wr_protect+0x38>
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
8000c46c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c470:	48 ba       	lddpc	r10,8000c49c <mem_wr_protect+0x4c>
8000c472:	12 98       	mov	r8,r9
8000c474:	a3 78       	lsl	r8,0x3
8000c476:	12 18       	sub	r8,r9
8000c478:	a3 68       	lsl	r8,0x2
8000c47a:	f4 08 00 08 	add	r8,r10,r8
8000c47e:	2f 88       	sub	r8,-8
8000c480:	70 08       	ld.w	r8,r8[0x0]
8000c482:	5d 18       	icall	r8
8000c484:	18 98       	mov	r8,r12
8000c486:	c0 28       	rjmp	8000c48a <mem_wr_protect+0x3a>
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000c488:	30 18       	mov	r8,1
8000c48a:	ef 68 ff ff 	st.b	r7[-1],r8
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
8000c48e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000c492:	10 9c       	mov	r12,r8
8000c494:	2f ed       	sub	sp,-8
8000c496:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c49a:	00 00       	add	r0,r0
8000c49c:	80 00       	ld.sh	r0,r0[0x0]
8000c49e:	f6 24 eb cd 	sub	r4,-594995

8000c4a0 <mem_name>:
  return removal;
}


const char *mem_name(U8 lun)
{
8000c4a0:	eb cd 40 80 	pushm	r7,lr
8000c4a4:	1a 97       	mov	r7,sp
8000c4a6:	20 1d       	sub	sp,4
8000c4a8:	18 98       	mov	r8,r12
8000c4aa:	ef 68 ff fc 	st.b	r7[-4],r8
  return
8000c4ae:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c4b2:	30 18       	mov	r8,1
8000c4b4:	f0 09 18 00 	cp.b	r9,r8
8000c4b8:	e0 8b 00 0e 	brhi	8000c4d4 <mem_name+0x34>
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
8000c4bc:	ef 39 ff fc 	ld.ub	r9,r7[-4]
}


const char *mem_name(U8 lun)
{
  return
8000c4c0:	48 8a       	lddpc	r10,8000c4e0 <mem_name+0x40>
8000c4c2:	12 98       	mov	r8,r9
8000c4c4:	a3 78       	lsl	r8,0x3
8000c4c6:	12 18       	sub	r8,r9
8000c4c8:	a3 68       	lsl	r8,0x2
8000c4ca:	f4 08 00 08 	add	r8,r10,r8
8000c4ce:	2e 88       	sub	r8,-24
8000c4d0:	70 08       	ld.w	r8,r8[0x0]
8000c4d2:	c0 28       	rjmp	8000c4d6 <mem_name+0x36>
8000c4d4:	30 08       	mov	r8,0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
8000c4d6:	10 9c       	mov	r12,r8
8000c4d8:	2f fd       	sub	sp,-4
8000c4da:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c4de:	00 00       	add	r0,r0
8000c4e0:	80 00       	ld.sh	r0,r0[0x0]
8000c4e2:	f6 24 eb cd 	sub	r4,-594995

8000c4e4 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
8000c4e4:	eb cd 40 80 	pushm	r7,lr
8000c4e8:	1a 97       	mov	r7,sp
8000c4ea:	20 4d       	sub	sp,16
8000c4ec:	18 99       	mov	r9,r12
8000c4ee:	ef 4b ff f4 	st.w	r7[-12],r11
8000c4f2:	14 98       	mov	r8,r10
8000c4f4:	ef 69 ff f8 	st.b	r7[-8],r9
8000c4f8:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
8000c4fc:	f0 1f 00 14 	mcall	8000c54c <memory_2_usb+0x68>
  status =
8000c500:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c504:	30 18       	mov	r8,1
8000c506:	f0 09 18 00 	cp.b	r9,r8
8000c50a:	e0 8b 00 15 	brhi	8000c534 <memory_2_usb+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
8000c50e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c512:	49 0a       	lddpc	r10,8000c550 <memory_2_usb+0x6c>
8000c514:	12 98       	mov	r8,r9
8000c516:	a3 78       	lsl	r8,0x3
8000c518:	12 18       	sub	r8,r9
8000c51a:	a3 68       	lsl	r8,0x2
8000c51c:	f4 08 00 08 	add	r8,r10,r8
8000c520:	2f 08       	sub	r8,-16
8000c522:	70 08       	ld.w	r8,r8[0x0]
8000c524:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c528:	12 9b       	mov	r11,r9
8000c52a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c52e:	5d 18       	icall	r8
8000c530:	18 98       	mov	r8,r12
8000c532:	c0 28       	rjmp	8000c536 <memory_2_usb+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
8000c534:	30 18       	mov	r8,1
8000c536:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
8000c53a:	f0 1f 00 07 	mcall	8000c554 <memory_2_usb+0x70>

  Ctrl_access_unlock();

  return status;
8000c53e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c542:	10 9c       	mov	r12,r8
8000c544:	2f cd       	sub	sp,-16
8000c546:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c54a:	00 00       	add	r0,r0
8000c54c:	80 00       	ld.sh	r0,r0[0x0]
8000c54e:	c6 1c       	rcall	8000c610 <ui_wakeup+0x8>
8000c550:	80 00       	ld.sh	r0,r0[0x0]
8000c552:	f6 24 80 00 	sub	r4,-622592
8000c556:	c6 30       	breq	8000c61c <ui_start_read>

8000c558 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
8000c558:	eb cd 40 80 	pushm	r7,lr
8000c55c:	1a 97       	mov	r7,sp
8000c55e:	20 4d       	sub	sp,16
8000c560:	18 99       	mov	r9,r12
8000c562:	ef 4b ff f4 	st.w	r7[-12],r11
8000c566:	14 98       	mov	r8,r10
8000c568:	ef 69 ff f8 	st.b	r7[-8],r9
8000c56c:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
8000c570:	f0 1f 00 14 	mcall	8000c5c0 <usb_2_memory+0x68>
  status =
8000c574:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c578:	30 18       	mov	r8,1
8000c57a:	f0 09 18 00 	cp.b	r9,r8
8000c57e:	e0 8b 00 15 	brhi	8000c5a8 <usb_2_memory+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
8000c582:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c586:	49 0a       	lddpc	r10,8000c5c4 <usb_2_memory+0x6c>
8000c588:	12 98       	mov	r8,r9
8000c58a:	a3 78       	lsl	r8,0x3
8000c58c:	12 18       	sub	r8,r9
8000c58e:	a3 68       	lsl	r8,0x2
8000c590:	f4 08 00 08 	add	r8,r10,r8
8000c594:	2e c8       	sub	r8,-20
8000c596:	70 08       	ld.w	r8,r8[0x0]
8000c598:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c59c:	12 9b       	mov	r11,r9
8000c59e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c5a2:	5d 18       	icall	r8
8000c5a4:	18 98       	mov	r8,r12
8000c5a6:	c0 28       	rjmp	8000c5aa <usb_2_memory+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
8000c5a8:	30 18       	mov	r8,1
8000c5aa:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
8000c5ae:	f0 1f 00 07 	mcall	8000c5c8 <usb_2_memory+0x70>

  Ctrl_access_unlock();

  return status;
8000c5b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c5b6:	10 9c       	mov	r12,r8
8000c5b8:	2f cd       	sub	sp,-16
8000c5ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5be:	00 00       	add	r0,r0
8000c5c0:	80 00       	ld.sh	r0,r0[0x0]
8000c5c2:	c6 44       	brge	8000c68a <ui_process+0x1e>
8000c5c4:	80 00       	ld.sh	r0,r0[0x0]
8000c5c6:	f6 24 80 00 	sub	r4,-622592
8000c5ca:	c6 58       	rjmp	8000c694 <ui_process+0x28>

8000c5cc <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
8000c5cc:	eb cd 40 80 	pushm	r7,lr
8000c5d0:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000c5d2:	30 1c       	mov	r12,1
8000c5d4:	f0 1f 00 04 	mcall	8000c5e4 <ui_init+0x18>
	LED_Off(LED1);
8000c5d8:	30 2c       	mov	r12,2
8000c5da:	f0 1f 00 04 	mcall	8000c5e8 <ui_init+0x1c>
}
8000c5de:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5e2:	00 00       	add	r0,r0
8000c5e4:	80 00       	ld.sh	r0,r0[0x0]
8000c5e6:	47 08       	lddsp	r8,sp[0x1c0]
8000c5e8:	80 00       	ld.sh	r0,r0[0x0]
8000c5ea:	46 50       	lddsp	r0,sp[0x194]

8000c5ec <ui_powerdown>:

void ui_powerdown(void)
{
8000c5ec:	eb cd 40 80 	pushm	r7,lr
8000c5f0:	1a 97       	mov	r7,sp
	LED_Off(LED0);
8000c5f2:	30 1c       	mov	r12,1
8000c5f4:	f0 1f 00 04 	mcall	8000c604 <ui_powerdown+0x18>
	LED_Off(LED1);
8000c5f8:	30 2c       	mov	r12,2
8000c5fa:	f0 1f 00 03 	mcall	8000c604 <ui_powerdown+0x18>
}
8000c5fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c602:	00 00       	add	r0,r0
8000c604:	80 00       	ld.sh	r0,r0[0x0]
8000c606:	46 50       	lddsp	r0,sp[0x194]

8000c608 <ui_wakeup>:

void ui_wakeup(void)
{
8000c608:	eb cd 40 80 	pushm	r7,lr
8000c60c:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000c60e:	30 1c       	mov	r12,1
8000c610:	f0 1f 00 02 	mcall	8000c618 <ui_wakeup+0x10>
}
8000c614:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c618:	80 00       	ld.sh	r0,r0[0x0]
8000c61a:	47 08       	lddsp	r8,sp[0x1c0]

8000c61c <ui_start_read>:

void ui_start_read(void)
{
8000c61c:	eb cd 40 80 	pushm	r7,lr
8000c620:	1a 97       	mov	r7,sp
	LED_On(LED2);
8000c622:	30 4c       	mov	r12,4
8000c624:	f0 1f 00 02 	mcall	8000c62c <ui_start_read+0x10>
}
8000c628:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c62c:	80 00       	ld.sh	r0,r0[0x0]
8000c62e:	47 08       	lddsp	r8,sp[0x1c0]

8000c630 <ui_stop_read>:

void ui_stop_read(void)
{
8000c630:	eb cd 40 80 	pushm	r7,lr
8000c634:	1a 97       	mov	r7,sp
	LED_Off(LED2);
8000c636:	30 4c       	mov	r12,4
8000c638:	f0 1f 00 02 	mcall	8000c640 <ui_stop_read+0x10>
}
8000c63c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c640:	80 00       	ld.sh	r0,r0[0x0]
8000c642:	46 50       	lddsp	r0,sp[0x194]

8000c644 <ui_start_write>:

void ui_start_write(void)
{
8000c644:	eb cd 40 80 	pushm	r7,lr
8000c648:	1a 97       	mov	r7,sp
	LED_On(LED3);
8000c64a:	30 8c       	mov	r12,8
8000c64c:	f0 1f 00 02 	mcall	8000c654 <ui_start_write+0x10>
}
8000c650:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c654:	80 00       	ld.sh	r0,r0[0x0]
8000c656:	47 08       	lddsp	r8,sp[0x1c0]

8000c658 <ui_stop_write>:

void ui_stop_write(void)
{
8000c658:	eb cd 40 80 	pushm	r7,lr
8000c65c:	1a 97       	mov	r7,sp
	LED_Off(LED3);
8000c65e:	30 8c       	mov	r12,8
8000c660:	f0 1f 00 02 	mcall	8000c668 <ui_stop_write+0x10>
}
8000c664:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c668:	80 00       	ld.sh	r0,r0[0x0]
8000c66a:	46 50       	lddsp	r0,sp[0x194]

8000c66c <ui_process>:

void ui_process(uint16_t framenumber)
{
8000c66c:	eb cd 40 80 	pushm	r7,lr
8000c670:	1a 97       	mov	r7,sp
8000c672:	20 1d       	sub	sp,4
8000c674:	18 98       	mov	r8,r12
8000c676:	ef 58 ff fc 	st.h	r7[-4],r8
	if ((framenumber % 1000) == 0) {
8000c67a:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c67e:	e0 68 4d d3 	mov	r8,19923
8000c682:	ea 18 10 62 	orh	r8,0x1062
8000c686:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c68a:	a7 89       	lsr	r9,0x6
8000c68c:	e0 68 03 e8 	mov	r8,1000
8000c690:	f2 08 02 48 	mul	r8,r9,r8
8000c694:	f4 08 01 08 	sub	r8,r10,r8
8000c698:	5c 88       	casts.h	r8
8000c69a:	c0 41       	brne	8000c6a2 <ui_process+0x36>
		LED_On(LED1);
8000c69c:	30 2c       	mov	r12,2
8000c69e:	f0 1f 00 10 	mcall	8000c6dc <ui_process+0x70>
	}
	if ((framenumber % 1000) == 500) {
8000c6a2:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c6a6:	e0 68 4d d3 	mov	r8,19923
8000c6aa:	ea 18 10 62 	orh	r8,0x1062
8000c6ae:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c6b2:	a7 89       	lsr	r9,0x6
8000c6b4:	e0 68 03 e8 	mov	r8,1000
8000c6b8:	f2 08 02 48 	mul	r8,r9,r8
8000c6bc:	f4 08 01 08 	sub	r8,r10,r8
8000c6c0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000c6c4:	e0 68 01 f4 	mov	r8,500
8000c6c8:	f0 09 19 00 	cp.h	r9,r8
8000c6cc:	c0 41       	brne	8000c6d4 <ui_process+0x68>
		LED_Off(LED1);
8000c6ce:	30 2c       	mov	r12,2
8000c6d0:	f0 1f 00 04 	mcall	8000c6e0 <ui_process+0x74>
	}
}
8000c6d4:	2f fd       	sub	sp,-4
8000c6d6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c6da:	00 00       	add	r0,r0
8000c6dc:	80 00       	ld.sh	r0,r0[0x0]
8000c6de:	47 08       	lddsp	r8,sp[0x1c0]
8000c6e0:	80 00       	ld.sh	r0,r0[0x0]
8000c6e2:	46 50       	lddsp	r0,sp[0x194]

8000c6e4 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
8000c6e4:	eb cd 40 80 	pushm	r7,lr
8000c6e8:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000c6ea:	49 49       	lddpc	r9,8000c738 <udi_msc_enable+0x54>
8000c6ec:	30 08       	mov	r8,0
8000c6ee:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_cbw_invalid = false;
8000c6f0:	49 39       	lddpc	r9,8000c73c <udi_msc_enable+0x58>
8000c6f2:	30 08       	mov	r8,0
8000c6f4:	b2 88       	st.b	r9[0x0],r8
	udi_msc_nb_lun = get_nb_lun();
8000c6f6:	f0 1f 00 13 	mcall	8000c740 <udi_msc_enable+0x5c>
8000c6fa:	18 98       	mov	r8,r12
8000c6fc:	49 29       	lddpc	r9,8000c744 <udi_msc_enable+0x60>
8000c6fe:	b2 88       	st.b	r9[0x0],r8
	if (0 == udi_msc_nb_lun)
8000c700:	49 18       	lddpc	r8,8000c744 <udi_msc_enable+0x60>
8000c702:	11 88       	ld.ub	r8,r8[0x0]
8000c704:	58 08       	cp.w	r8,0
8000c706:	c0 31       	brne	8000c70c <udi_msc_enable+0x28>
		return false;	// No lun available, then not authorize to enable interface
8000c708:	30 08       	mov	r8,0
8000c70a:	c1 38       	rjmp	8000c730 <udi_msc_enable+0x4c>
	udi_msc_nb_lun--;
8000c70c:	48 e8       	lddpc	r8,8000c744 <udi_msc_enable+0x60>
8000c70e:	11 88       	ld.ub	r8,r8[0x0]
8000c710:	20 18       	sub	r8,1
8000c712:	5c 58       	castu.b	r8
8000c714:	48 c9       	lddpc	r9,8000c744 <udi_msc_enable+0x60>
8000c716:	b2 88       	st.b	r9[0x0],r8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
8000c718:	f0 1f 00 0c 	mcall	8000c748 <udi_msc_enable+0x64>
8000c71c:	18 98       	mov	r8,r12
8000c71e:	ec 18 00 01 	eorl	r8,0x1
8000c722:	5c 58       	castu.b	r8
8000c724:	c0 30       	breq	8000c72a <udi_msc_enable+0x46>
		return false;
8000c726:	30 08       	mov	r8,0
8000c728:	c0 48       	rjmp	8000c730 <udi_msc_enable+0x4c>
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
8000c72a:	f0 1f 00 09 	mcall	8000c74c <udi_msc_enable+0x68>
	return true;
8000c72e:	30 18       	mov	r8,1
}
8000c730:	10 9c       	mov	r12,r8
8000c732:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c736:	00 00       	add	r0,r0
8000c738:	00 00       	add	r0,r0
8000c73a:	08 2d       	rsub	sp,r4
8000c73c:	00 00       	add	r0,r0
8000c73e:	08 2c       	rsub	r12,r4
8000c740:	80 00       	ld.sh	r0,r0[0x0]
8000c742:	c3 a0       	breq	8000c7b6 <udi_msc_setup+0x4a>
8000c744:	00 00       	add	r0,r0
8000c746:	08 14       	sub	r4,r4
8000c748:	80 00       	ld.sh	r0,r0[0x0]
8000c74a:	e6 3c 80 00 	sub	r12,491520
8000c74e:	c8 c8       	rjmp	8000c866 <udi_msc_cbw_invalid+0x12>

8000c750 <udi_msc_disable>:


void udi_msc_disable(void)
{
8000c750:	eb cd 40 80 	pushm	r7,lr
8000c754:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000c756:	48 49       	lddpc	r9,8000c764 <udi_msc_disable+0x14>
8000c758:	30 08       	mov	r8,0
8000c75a:	b2 88       	st.b	r9[0x0],r8
	UDI_MSC_DISABLE_EXT();
8000c75c:	f0 1f 00 03 	mcall	8000c768 <udi_msc_disable+0x18>
}
8000c760:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c764:	00 00       	add	r0,r0
8000c766:	08 2d       	rsub	sp,r4
8000c768:	80 00       	ld.sh	r0,r0[0x0]
8000c76a:	e6 54 eb cd 	cp.w	r4,519117

8000c76c <udi_msc_setup>:


bool udi_msc_setup(void)
{
8000c76c:	eb cd 40 80 	pushm	r7,lr
8000c770:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000c772:	4a f8       	lddpc	r8,8000c82c <udi_msc_setup+0xc0>
8000c774:	11 88       	ld.ub	r8,r8[0x0]
8000c776:	10 99       	mov	r9,r8
8000c778:	30 08       	mov	r8,0
8000c77a:	f0 09 18 00 	cp.b	r9,r8
8000c77e:	c2 34       	brge	8000c7c4 <udi_msc_setup+0x58>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000c780:	4a b8       	lddpc	r8,8000c82c <udi_msc_setup+0xc0>
8000c782:	11 88       	ld.ub	r8,r8[0x0]
8000c784:	e2 18 00 60 	andl	r8,0x60,COH
8000c788:	e0 48 00 20 	cp.w	r8,32
8000c78c:	c1 c1       	brne	8000c7c4 <udi_msc_setup+0x58>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000c78e:	4a 88       	lddpc	r8,8000c82c <udi_msc_setup+0xc0>
8000c790:	11 98       	ld.ub	r8,r8[0x1]
8000c792:	e0 48 00 fe 	cp.w	r8,254
8000c796:	c1 71       	brne	8000c7c4 <udi_msc_setup+0x58>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
8000c798:	4a 58       	lddpc	r8,8000c82c <udi_msc_setup+0xc0>
8000c79a:	90 39       	ld.sh	r9,r8[0x6]
8000c79c:	30 18       	mov	r8,1
8000c79e:	f0 09 19 00 	cp.h	r9,r8
8000c7a2:	c0 30       	breq	8000c7a8 <udi_msc_setup+0x3c>
					return false;	// Error for USB host
8000c7a4:	30 08       	mov	r8,0
8000c7a6:	c4 08       	rjmp	8000c826 <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000c7a8:	4a 18       	lddpc	r8,8000c82c <udi_msc_setup+0xc0>
8000c7aa:	90 18       	ld.sh	r8,r8[0x2]
8000c7ac:	58 08       	cp.w	r8,0
8000c7ae:	c0 30       	breq	8000c7b4 <udi_msc_setup+0x48>
					return false;
8000c7b0:	30 08       	mov	r8,0
8000c7b2:	c3 a8       	rjmp	8000c826 <udi_msc_setup+0xba>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
8000c7b4:	49 e8       	lddpc	r8,8000c82c <udi_msc_setup+0xc0>
8000c7b6:	49 f9       	lddpc	r9,8000c830 <udi_msc_setup+0xc4>
8000c7b8:	91 29       	st.w	r8[0x8],r9
				udd_g_ctrlreq.payload_size = 1;
8000c7ba:	49 d9       	lddpc	r9,8000c82c <udi_msc_setup+0xc0>
8000c7bc:	30 18       	mov	r8,1
8000c7be:	b2 68       	st.h	r9[0xc],r8
				return true;
8000c7c0:	30 18       	mov	r8,1
8000c7c2:	c3 28       	rjmp	8000c826 <udi_msc_setup+0xba>
			}
		}
	}
	if (Udd_setup_is_out()) {
8000c7c4:	49 a8       	lddpc	r8,8000c82c <udi_msc_setup+0xc0>
8000c7c6:	11 88       	ld.ub	r8,r8[0x0]
8000c7c8:	10 99       	mov	r9,r8
8000c7ca:	30 08       	mov	r8,0
8000c7cc:	f0 09 18 00 	cp.b	r9,r8
8000c7d0:	c2 a5       	brlt	8000c824 <udi_msc_setup+0xb8>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000c7d2:	49 78       	lddpc	r8,8000c82c <udi_msc_setup+0xc0>
8000c7d4:	11 88       	ld.ub	r8,r8[0x0]
8000c7d6:	e2 18 00 60 	andl	r8,0x60,COH
8000c7da:	e0 48 00 20 	cp.w	r8,32
8000c7de:	c2 31       	brne	8000c824 <udi_msc_setup+0xb8>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000c7e0:	49 38       	lddpc	r8,8000c82c <udi_msc_setup+0xc0>
8000c7e2:	11 98       	ld.ub	r8,r8[0x1]
8000c7e4:	e0 48 00 ff 	cp.w	r8,255
8000c7e8:	c1 e1       	brne	8000c824 <udi_msc_setup+0xb8>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
8000c7ea:	49 18       	lddpc	r8,8000c82c <udi_msc_setup+0xc0>
8000c7ec:	90 38       	ld.sh	r8,r8[0x6]
8000c7ee:	58 08       	cp.w	r8,0
8000c7f0:	c0 30       	breq	8000c7f6 <udi_msc_setup+0x8a>
					return false;
8000c7f2:	30 08       	mov	r8,0
8000c7f4:	c1 98       	rjmp	8000c826 <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000c7f6:	48 e8       	lddpc	r8,8000c82c <udi_msc_setup+0xc0>
8000c7f8:	90 18       	ld.sh	r8,r8[0x2]
8000c7fa:	58 08       	cp.w	r8,0
8000c7fc:	c0 30       	breq	8000c802 <udi_msc_setup+0x96>
					return false;
8000c7fe:	30 08       	mov	r8,0
8000c800:	c1 38       	rjmp	8000c826 <udi_msc_setup+0xba>
				udi_msc_b_cbw_invalid = false;
8000c802:	48 d9       	lddpc	r9,8000c834 <udi_msc_setup+0xc8>
8000c804:	30 08       	mov	r8,0
8000c806:	b2 88       	st.b	r9[0x0],r8
				udi_msc_b_trans_req = false;
8000c808:	48 c9       	lddpc	r9,8000c838 <udi_msc_setup+0xcc>
8000c80a:	30 08       	mov	r8,0
8000c80c:	b2 88       	st.b	r9[0x0],r8
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
8000c80e:	30 2c       	mov	r12,2
8000c810:	f0 1f 00 0b 	mcall	8000c83c <udi_msc_setup+0xd0>
				udd_ep_abort(UDI_MSC_EP_IN);
8000c814:	e0 6c 00 81 	mov	r12,129
8000c818:	f0 1f 00 09 	mcall	8000c83c <udi_msc_setup+0xd0>
				// Restart by CBW wait
				udi_msc_cbw_wait();
8000c81c:	f0 1f 00 09 	mcall	8000c840 <udi_msc_setup+0xd4>
				return true;
8000c820:	30 18       	mov	r8,1
8000c822:	c0 28       	rjmp	8000c826 <udi_msc_setup+0xba>
			}
		}
	}
	return false;	// Not supported request
8000c824:	30 08       	mov	r8,0
}
8000c826:	10 9c       	mov	r12,r8
8000c828:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c82c:	00 00       	add	r0,r0
8000c82e:	10 0c       	add	r12,r8
8000c830:	00 00       	add	r0,r0
8000c832:	08 14       	sub	r4,r4
8000c834:	00 00       	add	r0,r0
8000c836:	08 2c       	rsub	r12,r4
8000c838:	00 00       	add	r0,r0
8000c83a:	08 2d       	rsub	sp,r4
8000c83c:	80 00       	ld.sh	r0,r0[0x0]
8000c83e:	a9 c0       	cbr	r0,0x8
8000c840:	80 00       	ld.sh	r0,r0[0x0]
8000c842:	c8 c8       	rjmp	8000c95a <udi_msc_cbw_received+0x56>

8000c844 <udi_msc_getsetting>:

uint8_t udi_msc_getsetting(void)
{
8000c844:	eb cd 40 80 	pushm	r7,lr
8000c848:	1a 97       	mov	r7,sp
	return 0;	// MSC don't have multiple alternate setting
8000c84a:	30 08       	mov	r8,0
}
8000c84c:	10 9c       	mov	r12,r8
8000c84e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c852:	d7 03       	nop

8000c854 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
8000c854:	eb cd 40 80 	pushm	r7,lr
8000c858:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000c85a:	48 a8       	lddpc	r8,8000c880 <udi_msc_cbw_invalid+0x2c>
8000c85c:	11 88       	ld.ub	r8,r8[0x0]
8000c85e:	ec 18 00 01 	eorl	r8,0x1
8000c862:	5c 58       	castu.b	r8
8000c864:	c0 a1       	brne	8000c878 <udi_msc_cbw_invalid+0x24>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
8000c866:	30 2c       	mov	r12,2
8000c868:	f0 1f 00 07 	mcall	8000c884 <udi_msc_cbw_invalid+0x30>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
8000c86c:	fe cb 00 18 	sub	r11,pc,24
8000c870:	30 2c       	mov	r12,2
8000c872:	f0 1f 00 06 	mcall	8000c888 <udi_msc_cbw_invalid+0x34>
8000c876:	c0 28       	rjmp	8000c87a <udi_msc_cbw_invalid+0x26>
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000c878:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_OUT);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
}
8000c87a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c87e:	00 00       	add	r0,r0
8000c880:	00 00       	add	r0,r0
8000c882:	08 2c       	rsub	r12,r4
8000c884:	80 00       	ld.sh	r0,r0[0x0]
8000c886:	a6 48       	st.h	r3[0x8],r8
8000c888:	80 00       	ld.sh	r0,r0[0x0]
8000c88a:	aa 5c       	st.h	r5[0xa],r12

8000c88c <udi_msc_csw_invalid>:

static void udi_msc_csw_invalid(void)
{
8000c88c:	eb cd 40 80 	pushm	r7,lr
8000c890:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000c892:	48 b8       	lddpc	r8,8000c8bc <udi_msc_csw_invalid+0x30>
8000c894:	11 88       	ld.ub	r8,r8[0x0]
8000c896:	ec 18 00 01 	eorl	r8,0x1
8000c89a:	5c 58       	castu.b	r8
8000c89c:	c0 c1       	brne	8000c8b4 <udi_msc_csw_invalid+0x28>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
8000c89e:	e0 6c 00 81 	mov	r12,129
8000c8a2:	f0 1f 00 08 	mcall	8000c8c0 <udi_msc_csw_invalid+0x34>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
8000c8a6:	fe cb 00 1a 	sub	r11,pc,26
8000c8aa:	e0 6c 00 81 	mov	r12,129
8000c8ae:	f0 1f 00 06 	mcall	8000c8c4 <udi_msc_csw_invalid+0x38>
8000c8b2:	c0 28       	rjmp	8000c8b6 <udi_msc_csw_invalid+0x2a>
}

static void udi_msc_csw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000c8b4:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_IN);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}
8000c8b6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8ba:	00 00       	add	r0,r0
8000c8bc:	00 00       	add	r0,r0
8000c8be:	08 2c       	rsub	r12,r4
8000c8c0:	80 00       	ld.sh	r0,r0[0x0]
8000c8c2:	a6 48       	st.h	r3[0x8],r8
8000c8c4:	80 00       	ld.sh	r0,r0[0x0]
8000c8c6:	aa 5c       	st.h	r5[0xa],r12

8000c8c8 <udi_msc_cbw_wait>:

static void udi_msc_cbw_wait(void)
{
8000c8c8:	eb cd 40 80 	pushm	r7,lr
8000c8cc:	1a 97       	mov	r7,sp
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
8000c8ce:	48 aa       	lddpc	r10,8000c8f4 <udi_msc_cbw_wait+0x2c>
8000c8d0:	48 a8       	lddpc	r8,8000c8f8 <udi_msc_cbw_wait+0x30>
8000c8d2:	31 f9       	mov	r9,31
8000c8d4:	30 1b       	mov	r11,1
8000c8d6:	30 2c       	mov	r12,2
8000c8d8:	f0 1f 00 09 	mcall	8000c8fc <udi_msc_cbw_wait+0x34>
8000c8dc:	18 98       	mov	r8,r12
8000c8de:	ec 18 00 01 	eorl	r8,0x1
8000c8e2:	5c 58       	castu.b	r8
8000c8e4:	c0 60       	breq	8000c8f0 <udi_msc_cbw_wait+0x28>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
8000c8e6:	fe cb 00 1e 	sub	r11,pc,30
8000c8ea:	30 2c       	mov	r12,2
8000c8ec:	f0 1f 00 05 	mcall	8000c900 <udi_msc_cbw_wait+0x38>
	}
}
8000c8f0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8f4:	00 00       	add	r0,r0
8000c8f6:	07 f4       	ld.ub	r4,r3[0x7]
8000c8f8:	80 00       	ld.sh	r0,r0[0x0]
8000c8fa:	c9 04       	brge	8000c81a <udi_msc_setup+0xae>
8000c8fc:	80 00       	ld.sh	r0,r0[0x0]
8000c8fe:	a8 9c       	st.b	r4[0x1],r12
8000c900:	80 00       	ld.sh	r0,r0[0x0]
8000c902:	aa 5c       	st.h	r5[0xa],r12

8000c904 <udi_msc_cbw_received>:


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
8000c904:	eb cd 40 80 	pushm	r7,lr
8000c908:	1a 97       	mov	r7,sp
8000c90a:	20 3d       	sub	sp,12
8000c90c:	ef 4c ff fc 	st.w	r7[-4],r12
8000c910:	ef 4b ff f8 	st.w	r7[-8],r11
8000c914:	14 98       	mov	r8,r10
8000c916:	ef 68 ff f4 	st.b	r7[-12],r8
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
8000c91a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c91e:	58 08       	cp.w	r8,0
8000c920:	c6 11       	brne	8000c9e2 <udi_msc_cbw_received+0xde>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000c922:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c926:	59 f8       	cp.w	r8,31
8000c928:	c0 91       	brne	8000c93a <udi_msc_cbw_received+0x36>
			|| (udi_msc_cbw.dCBWSignature !=
8000c92a:	4b 18       	lddpc	r8,8000c9ec <udi_msc_cbw_received+0xe8>
8000c92c:	70 08       	ld.w	r8,r8[0x0]
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000c92e:	e0 69 42 43 	mov	r9,16963
8000c932:	ea 19 55 53 	orh	r9,0x5553
8000c936:	12 38       	cp.w	r8,r9
8000c938:	c0 90       	breq	8000c94a <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
8000c93a:	4a e9       	lddpc	r9,8000c9f0 <udi_msc_cbw_received+0xec>
8000c93c:	30 18       	mov	r8,1
8000c93e:	b2 88       	st.b	r9[0x0],r8
		udi_msc_cbw_invalid();
8000c940:	f0 1f 00 2d 	mcall	8000c9f4 <udi_msc_cbw_received+0xf0>
		udi_msc_csw_invalid();
8000c944:	f0 1f 00 2d 	mcall	8000c9f8 <udi_msc_cbw_received+0xf4>
		return;
8000c948:	c4 e8       	rjmp	8000c9e4 <udi_msc_cbw_received+0xe0>
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
8000c94a:	4a 98       	lddpc	r8,8000c9ec <udi_msc_cbw_received+0xe8>
8000c94c:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000c950:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000c954:	4a 69       	lddpc	r9,8000c9ec <udi_msc_cbw_received+0xe8>
8000c956:	f3 68 00 0d 	st.b	r9[13],r8
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
8000c95a:	4a 58       	lddpc	r8,8000c9ec <udi_msc_cbw_received+0xe8>
8000c95c:	f1 39 00 0d 	ld.ub	r9,r8[13]
8000c960:	4a 78       	lddpc	r8,8000c9fc <udi_msc_cbw_received+0xf8>
8000c962:	11 88       	ld.ub	r8,r8[0x0]
8000c964:	f0 09 18 00 	cp.b	r9,r8
8000c968:	e0 88 00 07 	brls	8000c976 <udi_msc_cbw_received+0x72>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
8000c96c:	f0 1f 00 25 	mcall	8000ca00 <udi_msc_cbw_received+0xfc>
		udi_msc_csw_process();
8000c970:	f0 1f 00 25 	mcall	8000ca04 <udi_msc_cbw_received+0x100>
		return;
8000c974:	c3 88       	rjmp	8000c9e4 <udi_msc_cbw_received+0xe0>
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
8000c976:	49 e8       	lddpc	r8,8000c9ec <udi_msc_cbw_received+0xe8>
8000c978:	70 28       	ld.w	r8,r8[0x8]
8000c97a:	5c b8       	swap.b	r8
8000c97c:	10 99       	mov	r9,r8
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
8000c97e:	4a 38       	lddpc	r8,8000ca08 <udi_msc_cbw_received+0x104>
8000c980:	91 29       	st.w	r8[0x8],r9
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
8000c982:	49 b8       	lddpc	r8,8000c9ec <udi_msc_cbw_received+0xe8>
8000c984:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000c988:	e0 48 00 5a 	cp.w	r8,90
8000c98c:	e0 8b 00 26 	brhi	8000c9d8 <udi_msc_cbw_received+0xd4>
8000c990:	49 f9       	lddpc	r9,8000ca0c <udi_msc_cbw_received+0x108>
8000c992:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case SPC_REQUEST_SENSE:
		udi_msc_spc_requestsense();
8000c996:	f0 1f 00 1f 	mcall	8000ca10 <udi_msc_cbw_received+0x10c>
		break;
8000c99a:	c2 58       	rjmp	8000c9e4 <udi_msc_cbw_received+0xe0>

	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
8000c99c:	f0 1f 00 1e 	mcall	8000ca14 <udi_msc_cbw_received+0x110>
		break;
8000c9a0:	c2 28       	rjmp	8000c9e4 <udi_msc_cbw_received+0xe0>

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
8000c9a2:	30 0c       	mov	r12,0
8000c9a4:	f0 1f 00 1d 	mcall	8000ca18 <udi_msc_cbw_received+0x114>
		break;
8000c9a8:	c1 e8       	rjmp	8000c9e4 <udi_msc_cbw_received+0xe0>
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
8000c9aa:	30 1c       	mov	r12,1
8000c9ac:	f0 1f 00 1b 	mcall	8000ca18 <udi_msc_cbw_received+0x114>
		break;
8000c9b0:	c1 a8       	rjmp	8000c9e4 <udi_msc_cbw_received+0xe0>

	case SPC_TEST_UNIT_READY:
		udi_msc_spc_testunitready();
8000c9b2:	f0 1f 00 1b 	mcall	8000ca1c <udi_msc_cbw_received+0x118>
		break;
8000c9b6:	c1 78       	rjmp	8000c9e4 <udi_msc_cbw_received+0xe0>

	case SBC_READ_CAPACITY10:
		udi_msc_sbc_read_capacity();
8000c9b8:	f0 1f 00 1a 	mcall	8000ca20 <udi_msc_cbw_received+0x11c>
		break;
8000c9bc:	c1 48       	rjmp	8000c9e4 <udi_msc_cbw_received+0xe0>
	case SBC_START_STOP_UNIT:
		// Accepts request to support plug/plug in case of card reader
	case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
8000c9be:	f0 1f 00 1a 	mcall	8000ca24 <udi_msc_cbw_received+0x120>
		udi_msc_csw_process();
8000c9c2:	f0 1f 00 11 	mcall	8000ca04 <udi_msc_cbw_received+0x100>
		break;
8000c9c6:	c0 f8       	rjmp	8000c9e4 <udi_msc_cbw_received+0xe0>

	case SBC_READ10:
		udi_msc_sbc_trans(true);
8000c9c8:	30 1c       	mov	r12,1
8000c9ca:	f0 1f 00 18 	mcall	8000ca28 <udi_msc_cbw_received+0x124>
		break;
8000c9ce:	c0 b8       	rjmp	8000c9e4 <udi_msc_cbw_received+0xe0>

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
8000c9d0:	30 0c       	mov	r12,0
8000c9d2:	f0 1f 00 16 	mcall	8000ca28 <udi_msc_cbw_received+0x124>
		break;
8000c9d6:	c0 78       	rjmp	8000c9e4 <udi_msc_cbw_received+0xe0>

	default:
		udi_msc_sense_command_invalid();
8000c9d8:	f0 1f 00 15 	mcall	8000ca2c <udi_msc_cbw_received+0x128>
		udi_msc_csw_process();
8000c9dc:	f0 1f 00 0a 	mcall	8000ca04 <udi_msc_cbw_received+0x100>
8000c9e0:	c0 28       	rjmp	8000c9e4 <udi_msc_cbw_received+0xe0>
{
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
		// Transfer aborted
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000c9e2:	d7 03       	nop
	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
		break;
	}
}
8000c9e4:	2f dd       	sub	sp,-12
8000c9e6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9ea:	00 00       	add	r0,r0
8000c9ec:	00 00       	add	r0,r0
8000c9ee:	07 f4       	ld.ub	r4,r3[0x7]
8000c9f0:	00 00       	add	r0,r0
8000c9f2:	08 2c       	rsub	r12,r4
8000c9f4:	80 00       	ld.sh	r0,r0[0x0]
8000c9f6:	c8 54       	brge	8000c900 <udi_msc_cbw_wait+0x38>
8000c9f8:	80 00       	ld.sh	r0,r0[0x0]
8000c9fa:	c8 8c       	rcall	8000cb0a <udi_msc_data_sent+0x2a>
8000c9fc:	00 00       	add	r0,r0
8000c9fe:	08 14       	sub	r4,r4
8000ca00:	80 00       	ld.sh	r0,r0[0x0]
8000ca02:	cd 2c       	rcall	8000cba6 <udi_msc_csw_send+0x1e>
8000ca04:	80 00       	ld.sh	r0,r0[0x0]
8000ca06:	cb 2c       	rcall	8000cb6a <udi_msc_csw_process+0x3e>
8000ca08:	00 00       	add	r0,r0
8000ca0a:	01 54       	ld.sh	r4,--r0
8000ca0c:	80 00       	ld.sh	r0,r0[0x0]
8000ca0e:	f6 5c 80 00 	cp.w	r12,-557056
8000ca12:	cd 64       	brge	8000c9be <udi_msc_cbw_received+0xba>
8000ca14:	80 00       	ld.sh	r0,r0[0x0]
8000ca16:	cd c8       	rjmp	8000cbce <udi_msc_csw_sent+0x2>
8000ca18:	80 00       	ld.sh	r0,r0[0x0]
8000ca1a:	cf 60       	breq	8000ca06 <udi_msc_cbw_received+0x102>
8000ca1c:	80 00       	ld.sh	r0,r0[0x0]
8000ca1e:	cf 38       	rjmp	8000cc04 <udi_msc_clear_sense+0x14>
8000ca20:	80 00       	ld.sh	r0,r0[0x0]
8000ca22:	d0 b0       	acall	0x2c
8000ca24:	80 00       	ld.sh	r0,r0[0x0]
8000ca26:	cc a0       	breq	8000c9ba <udi_msc_cbw_received+0xb6>
8000ca28:	80 00       	ld.sh	r0,r0[0x0]
8000ca2a:	d1 4c       	*unknown*
8000ca2c:	80 00       	ld.sh	r0,r0[0x0]
8000ca2e:	cd 48       	rjmp	8000cbd6 <udi_msc_csw_sent+0xa>

8000ca30 <udi_msc_cbw_validate>:


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
8000ca30:	eb cd 40 80 	pushm	r7,lr
8000ca34:	1a 97       	mov	r7,sp
8000ca36:	20 2d       	sub	sp,8
8000ca38:	ef 4c ff fc 	st.w	r7[-4],r12
8000ca3c:	16 98       	mov	r8,r11
8000ca3e:	ef 68 ff f8 	st.b	r7[-8],r8
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000ca42:	49 08       	lddpc	r8,8000ca80 <udi_msc_cbw_validate+0x50>
8000ca44:	f1 39 00 0c 	ld.ub	r9,r8[12]
8000ca48:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ca4c:	f3 e8 20 08 	eor	r8,r9,r8
8000ca50:	5c 58       	castu.b	r8
8000ca52:	10 99       	mov	r9,r8
8000ca54:	30 08       	mov	r8,0
8000ca56:	f0 09 18 00 	cp.b	r9,r8
8000ca5a:	c0 75       	brlt	8000ca68 <udi_msc_cbw_validate+0x38>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
8000ca5c:	48 a8       	lddpc	r8,8000ca84 <udi_msc_cbw_validate+0x54>
8000ca5e:	70 29       	ld.w	r9,r8[0x8]
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000ca60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ca64:	10 39       	cp.w	r9,r8
8000ca66:	c0 72       	brcc	8000ca74 <udi_msc_cbw_validate+0x44>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
		udi_msc_sense_fail_cdb_invalid();
8000ca68:	f0 1f 00 08 	mcall	8000ca88 <udi_msc_cbw_validate+0x58>
		udi_msc_csw_process();
8000ca6c:	f0 1f 00 08 	mcall	8000ca8c <udi_msc_cbw_validate+0x5c>
		return false;
8000ca70:	30 08       	mov	r8,0
8000ca72:	c0 28       	rjmp	8000ca76 <udi_msc_cbw_validate+0x46>
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
8000ca74:	30 18       	mov	r8,1
}
8000ca76:	10 9c       	mov	r12,r8
8000ca78:	2f ed       	sub	sp,-8
8000ca7a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca7e:	00 00       	add	r0,r0
8000ca80:	00 00       	add	r0,r0
8000ca82:	07 f4       	ld.ub	r4,r3[0x7]
8000ca84:	00 00       	add	r0,r0
8000ca86:	01 54       	ld.sh	r4,--r0
8000ca88:	80 00       	ld.sh	r0,r0[0x0]
8000ca8a:	cd 2c       	rcall	8000cc2e <udi_msc_sense_fail+0x16>
8000ca8c:	80 00       	ld.sh	r0,r0[0x0]
8000ca8e:	cb 2c       	rcall	8000cbf2 <udi_msc_clear_sense+0x2>

8000ca90 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
8000ca90:	eb cd 40 80 	pushm	r7,lr
8000ca94:	1a 97       	mov	r7,sp
8000ca96:	20 2d       	sub	sp,8
8000ca98:	ef 4c ff fc 	st.w	r7[-4],r12
8000ca9c:	16 98       	mov	r8,r11
8000ca9e:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
8000caa2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000caa6:	48 b8       	lddpc	r8,8000cad0 <udi_msc_data_send+0x40>
8000caa8:	ee fa ff fc 	ld.w	r10,r7[-4]
8000caac:	30 1b       	mov	r11,1
8000caae:	e0 6c 00 81 	mov	r12,129
8000cab2:	f0 1f 00 09 	mcall	8000cad4 <udi_msc_data_send+0x44>
8000cab6:	18 98       	mov	r8,r12
8000cab8:	ec 18 00 01 	eorl	r8,0x1
8000cabc:	5c 58       	castu.b	r8
8000cabe:	c0 50       	breq	8000cac8 <udi_msc_data_send+0x38>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
8000cac0:	f0 1f 00 06 	mcall	8000cad8 <udi_msc_data_send+0x48>
		udi_msc_csw_process();
8000cac4:	f0 1f 00 06 	mcall	8000cadc <udi_msc_data_send+0x4c>
	}
}
8000cac8:	2f ed       	sub	sp,-8
8000caca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cace:	00 00       	add	r0,r0
8000cad0:	80 00       	ld.sh	r0,r0[0x0]
8000cad2:	ca e0       	breq	8000ca2e <udi_msc_cbw_received+0x12a>
8000cad4:	80 00       	ld.sh	r0,r0[0x0]
8000cad6:	a8 9c       	st.b	r4[0x1],r12
8000cad8:	80 00       	ld.sh	r0,r0[0x0]
8000cada:	cc f8       	rjmp	8000cc78 <udi_msc_sense_fail+0x60>
8000cadc:	80 00       	ld.sh	r0,r0[0x0]
8000cade:	cb 2c       	rcall	8000cc42 <udi_msc_sense_fail+0x2a>

8000cae0 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000cae0:	eb cd 40 80 	pushm	r7,lr
8000cae4:	1a 97       	mov	r7,sp
8000cae6:	20 3d       	sub	sp,12
8000cae8:	ef 4c ff fc 	st.w	r7[-4],r12
8000caec:	ef 4b ff f8 	st.w	r7[-8],r11
8000caf0:	14 98       	mov	r8,r10
8000caf2:	ef 68 ff f4 	st.b	r7[-12],r8
	if (UDD_EP_TRANSFER_OK != status) {
8000caf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cafa:	58 08       	cp.w	r8,0
8000cafc:	c0 d1       	brne	8000cb16 <udi_msc_data_sent+0x36>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
8000cafe:	f0 1f 00 09 	mcall	8000cb20 <udi_msc_data_sent+0x40>
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
8000cb02:	48 98       	lddpc	r8,8000cb24 <udi_msc_data_sent+0x44>
8000cb04:	70 29       	ld.w	r9,r8[0x8]
8000cb06:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cb0a:	10 19       	sub	r9,r8
8000cb0c:	48 68       	lddpc	r8,8000cb24 <udi_msc_data_sent+0x44>
8000cb0e:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_process();
8000cb10:	f0 1f 00 06 	mcall	8000cb28 <udi_msc_data_sent+0x48>
8000cb14:	c0 28       	rjmp	8000cb18 <udi_msc_data_sent+0x38>
		udd_ep_id_t ep)
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000cb16:	d7 03       	nop
	// Update sense data
	udi_msc_sense_pass();
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
	udi_msc_csw_process();
}
8000cb18:	2f dd       	sub	sp,-12
8000cb1a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb1e:	00 00       	add	r0,r0
8000cb20:	80 00       	ld.sh	r0,r0[0x0]
8000cb22:	cc a0       	breq	8000cab6 <udi_msc_data_send+0x26>
8000cb24:	00 00       	add	r0,r0
8000cb26:	01 54       	ld.sh	r4,--r0
8000cb28:	80 00       	ld.sh	r0,r0[0x0]
8000cb2a:	cb 2c       	rcall	8000cc8e <udi_msc_sense_fail+0x76>

8000cb2c <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
8000cb2c:	eb cd 40 80 	pushm	r7,lr
8000cb30:	1a 97       	mov	r7,sp
	if (0 != udi_msc_csw.dCSWDataResidue) {
8000cb32:	49 28       	lddpc	r8,8000cb78 <udi_msc_csw_process+0x4c>
8000cb34:	70 28       	ld.w	r8,r8[0x8]
8000cb36:	58 08       	cp.w	r8,0
8000cb38:	c1 10       	breq	8000cb5a <udi_msc_csw_process+0x2e>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
8000cb3a:	49 18       	lddpc	r8,8000cb7c <udi_msc_csw_process+0x50>
8000cb3c:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000cb40:	10 99       	mov	r9,r8
8000cb42:	30 08       	mov	r8,0
8000cb44:	f0 09 18 00 	cp.b	r9,r8
8000cb48:	c0 64       	brge	8000cb54 <udi_msc_csw_process+0x28>
			udd_ep_set_halt(UDI_MSC_EP_IN);
8000cb4a:	e0 6c 00 81 	mov	r12,129
8000cb4e:	f0 1f 00 0d 	mcall	8000cb80 <udi_msc_csw_process+0x54>
8000cb52:	c0 48       	rjmp	8000cb5a <udi_msc_csw_process+0x2e>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
8000cb54:	30 2c       	mov	r12,2
8000cb56:	f0 1f 00 0b 	mcall	8000cb80 <udi_msc_csw_process+0x54>
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
8000cb5a:	48 98       	lddpc	r8,8000cb7c <udi_msc_csw_process+0x50>
8000cb5c:	70 19       	ld.w	r9,r8[0x4]
8000cb5e:	48 78       	lddpc	r8,8000cb78 <udi_msc_csw_process+0x4c>
8000cb60:	91 19       	st.w	r8[0x4],r9
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
8000cb62:	48 68       	lddpc	r8,8000cb78 <udi_msc_csw_process+0x4c>
8000cb64:	70 28       	ld.w	r8,r8[0x8]
8000cb66:	5c b8       	swap.b	r8
8000cb68:	10 99       	mov	r9,r8
8000cb6a:	48 48       	lddpc	r8,8000cb78 <udi_msc_csw_process+0x4c>
8000cb6c:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_send();
8000cb6e:	f0 1f 00 06 	mcall	8000cb84 <udi_msc_csw_process+0x58>
}
8000cb72:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb76:	00 00       	add	r0,r0
8000cb78:	00 00       	add	r0,r0
8000cb7a:	01 54       	ld.sh	r4,--r0
8000cb7c:	00 00       	add	r0,r0
8000cb7e:	07 f4       	ld.ub	r4,r3[0x7]
8000cb80:	80 00       	ld.sh	r0,r0[0x0]
8000cb82:	a6 48       	st.h	r3[0x8],r8
8000cb84:	80 00       	ld.sh	r0,r0[0x0]
8000cb86:	cb 88       	rjmp	8000ccf6 <udi_msc_sense_fail_busy_or_change+0x1a>

8000cb88 <udi_msc_csw_send>:


void udi_msc_csw_send(void)
{
8000cb88:	eb cd 40 80 	pushm	r7,lr
8000cb8c:	1a 97       	mov	r7,sp
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
8000cb8e:	48 ba       	lddpc	r10,8000cbb8 <udi_msc_csw_send+0x30>
8000cb90:	48 b8       	lddpc	r8,8000cbbc <udi_msc_csw_send+0x34>
8000cb92:	30 d9       	mov	r9,13
8000cb94:	30 0b       	mov	r11,0
8000cb96:	e0 6c 00 81 	mov	r12,129
8000cb9a:	f0 1f 00 0a 	mcall	8000cbc0 <udi_msc_csw_send+0x38>
8000cb9e:	18 98       	mov	r8,r12
8000cba0:	ec 18 00 01 	eorl	r8,0x1
8000cba4:	5c 58       	castu.b	r8
8000cba6:	c0 60       	breq	8000cbb2 <udi_msc_csw_send+0x2a>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
8000cba8:	48 7b       	lddpc	r11,8000cbc4 <udi_msc_csw_send+0x3c>
8000cbaa:	e0 6c 00 81 	mov	r12,129
8000cbae:	f0 1f 00 07 	mcall	8000cbc8 <udi_msc_csw_send+0x40>
	}
}
8000cbb2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cbb6:	00 00       	add	r0,r0
8000cbb8:	00 00       	add	r0,r0
8000cbba:	01 54       	ld.sh	r4,--r0
8000cbbc:	80 00       	ld.sh	r0,r0[0x0]
8000cbbe:	cb cc       	rcall	8000cd36 <udi_msc_sense_fail_cdb_invalid+0xa>
8000cbc0:	80 00       	ld.sh	r0,r0[0x0]
8000cbc2:	a8 9c       	st.b	r4[0x1],r12
8000cbc4:	80 00       	ld.sh	r0,r0[0x0]
8000cbc6:	cb 88       	rjmp	8000cd36 <udi_msc_sense_fail_cdb_invalid+0xa>
8000cbc8:	80 00       	ld.sh	r0,r0[0x0]
8000cbca:	aa 5c       	st.h	r5[0xa],r12

8000cbcc <udi_msc_csw_sent>:


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000cbcc:	eb cd 40 80 	pushm	r7,lr
8000cbd0:	1a 97       	mov	r7,sp
8000cbd2:	20 3d       	sub	sp,12
8000cbd4:	ef 4c ff fc 	st.w	r7[-4],r12
8000cbd8:	ef 4b ff f8 	st.w	r7[-8],r11
8000cbdc:	14 98       	mov	r8,r10
8000cbde:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
8000cbe2:	f0 1f 00 03 	mcall	8000cbec <udi_msc_csw_sent+0x20>
}
8000cbe6:	2f dd       	sub	sp,-12
8000cbe8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cbec:	80 00       	ld.sh	r0,r0[0x0]
8000cbee:	c8 c8       	rjmp	8000cd06 <udi_msc_sense_fail_hardware+0xe>

8000cbf0 <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
8000cbf0:	eb cd 40 80 	pushm	r7,lr
8000cbf4:	1a 97       	mov	r7,sp
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
8000cbf6:	31 2a       	mov	r10,18
8000cbf8:	30 0b       	mov	r11,0
8000cbfa:	48 6c       	lddpc	r12,8000cc10 <udi_msc_clear_sense+0x20>
8000cbfc:	f0 1f 00 06 	mcall	8000cc14 <udi_msc_clear_sense+0x24>
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
8000cc00:	48 49       	lddpc	r9,8000cc10 <udi_msc_clear_sense+0x20>
8000cc02:	3f 08       	mov	r8,-16
8000cc04:	b2 88       	st.b	r9[0x0],r8
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
8000cc06:	48 39       	lddpc	r9,8000cc10 <udi_msc_clear_sense+0x20>
8000cc08:	30 a8       	mov	r8,10
8000cc0a:	b2 f8       	st.b	r9[0x7],r8
}
8000cc0c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc10:	00 00       	add	r0,r0
8000cc12:	08 18       	sub	r8,r4
8000cc14:	80 00       	ld.sh	r0,r0[0x0]
8000cc16:	ec 1e eb cd 	eorl	lr,0xebcd

8000cc18 <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
8000cc18:	eb cd 40 80 	pushm	r7,lr
8000cc1c:	1a 97       	mov	r7,sp
8000cc1e:	20 3d       	sub	sp,12
8000cc20:	18 99       	mov	r9,r12
8000cc22:	16 98       	mov	r8,r11
8000cc24:	ef 4a ff f4 	st.w	r7[-12],r10
8000cc28:	ef 69 ff fc 	st.b	r7[-4],r9
8000cc2c:	ef 58 ff f8 	st.h	r7[-8],r8
	udi_msc_clear_sense();
8000cc30:	f0 1f 00 19 	mcall	8000cc94 <udi_msc_sense_fail+0x7c>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
8000cc34:	49 99       	lddpc	r9,8000cc98 <udi_msc_sense_fail+0x80>
8000cc36:	30 18       	mov	r8,1
8000cc38:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.sense_flag_key = sense_key;
8000cc3c:	49 89       	lddpc	r9,8000cc9c <udi_msc_sense_fail+0x84>
8000cc3e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000cc42:	b2 a8       	st.b	r9[0x2],r8
	udi_msc_sense.information[0] = lba >> 24;
8000cc44:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cc48:	b9 88       	lsr	r8,0x18
8000cc4a:	5c 58       	castu.b	r8
8000cc4c:	49 49       	lddpc	r9,8000cc9c <udi_msc_sense_fail+0x84>
8000cc4e:	b2 b8       	st.b	r9[0x3],r8
	udi_msc_sense.information[1] = lba >> 16;
8000cc50:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cc54:	b1 88       	lsr	r8,0x10
8000cc56:	5c 58       	castu.b	r8
8000cc58:	49 19       	lddpc	r9,8000cc9c <udi_msc_sense_fail+0x84>
8000cc5a:	b2 c8       	st.b	r9[0x4],r8
	udi_msc_sense.information[2] = lba >> 8;
8000cc5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cc60:	a9 88       	lsr	r8,0x8
8000cc62:	5c 58       	castu.b	r8
8000cc64:	48 e9       	lddpc	r9,8000cc9c <udi_msc_sense_fail+0x84>
8000cc66:	b2 d8       	st.b	r9[0x5],r8
	udi_msc_sense.information[3] = lba;
8000cc68:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cc6c:	5c 58       	castu.b	r8
8000cc6e:	48 c9       	lddpc	r9,8000cc9c <udi_msc_sense_fail+0x84>
8000cc70:	b2 e8       	st.b	r9[0x6],r8
	udi_msc_sense.AddSenseCode = add_sense >> 8;
8000cc72:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000cc76:	a9 88       	lsr	r8,0x8
8000cc78:	5c 88       	casts.h	r8
8000cc7a:	5c 58       	castu.b	r8
8000cc7c:	48 89       	lddpc	r9,8000cc9c <udi_msc_sense_fail+0x84>
8000cc7e:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
8000cc82:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000cc86:	5c 58       	castu.b	r8
8000cc88:	48 59       	lddpc	r9,8000cc9c <udi_msc_sense_fail+0x84>
8000cc8a:	f3 68 00 0d 	st.b	r9[13],r8
}
8000cc8e:	2f dd       	sub	sp,-12
8000cc90:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc94:	80 00       	ld.sh	r0,r0[0x0]
8000cc96:	cb f0       	breq	8000cc14 <udi_msc_clear_sense+0x24>
8000cc98:	00 00       	add	r0,r0
8000cc9a:	01 54       	ld.sh	r4,--r0
8000cc9c:	00 00       	add	r0,r0
8000cc9e:	08 18       	sub	r8,r4

8000cca0 <udi_msc_sense_pass>:

static void udi_msc_sense_pass(void)
{
8000cca0:	eb cd 40 80 	pushm	r7,lr
8000cca4:	1a 97       	mov	r7,sp
	udi_msc_clear_sense();
8000cca6:	f0 1f 00 05 	mcall	8000ccb8 <udi_msc_sense_pass+0x18>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
8000ccaa:	48 59       	lddpc	r9,8000ccbc <udi_msc_sense_pass+0x1c>
8000ccac:	30 08       	mov	r8,0
8000ccae:	f3 68 00 0c 	st.b	r9[12],r8
}
8000ccb2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccb6:	00 00       	add	r0,r0
8000ccb8:	80 00       	ld.sh	r0,r0[0x0]
8000ccba:	cb f0       	breq	8000cc38 <udi_msc_sense_fail+0x20>
8000ccbc:	00 00       	add	r0,r0
8000ccbe:	01 54       	ld.sh	r4,--r0

8000ccc0 <udi_msc_sense_fail_not_present>:


static void udi_msc_sense_fail_not_present(void)
{
8000ccc0:	eb cd 40 80 	pushm	r7,lr
8000ccc4:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
8000ccc6:	30 0a       	mov	r10,0
8000ccc8:	e0 6b 3a 00 	mov	r11,14848
8000cccc:	30 2c       	mov	r12,2
8000ccce:	f0 1f 00 03 	mcall	8000ccd8 <udi_msc_sense_fail_not_present+0x18>
}
8000ccd2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccd6:	00 00       	add	r0,r0
8000ccd8:	80 00       	ld.sh	r0,r0[0x0]
8000ccda:	cc 18       	rjmp	8000ce5c <udi_msc_spc_inquiry+0x94>

8000ccdc <udi_msc_sense_fail_busy_or_change>:

static void udi_msc_sense_fail_busy_or_change(void)
{
8000ccdc:	eb cd 40 80 	pushm	r7,lr
8000cce0:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
8000cce2:	30 0a       	mov	r10,0
8000cce4:	e0 6b 28 00 	mov	r11,10240
8000cce8:	30 6c       	mov	r12,6
8000ccea:	f0 1f 00 03 	mcall	8000ccf4 <udi_msc_sense_fail_busy_or_change+0x18>
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}
8000ccee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccf2:	00 00       	add	r0,r0
8000ccf4:	80 00       	ld.sh	r0,r0[0x0]
8000ccf6:	cc 18       	rjmp	8000ce78 <udi_msc_spc_inquiry+0xb0>

8000ccf8 <udi_msc_sense_fail_hardware>:

static void udi_msc_sense_fail_hardware(void)
{
8000ccf8:	eb cd 40 80 	pushm	r7,lr
8000ccfc:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
8000ccfe:	30 0a       	mov	r10,0
8000cd00:	30 0b       	mov	r11,0
8000cd02:	30 4c       	mov	r12,4
8000cd04:	f0 1f 00 02 	mcall	8000cd0c <udi_msc_sense_fail_hardware+0x14>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}
8000cd08:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd0c:	80 00       	ld.sh	r0,r0[0x0]
8000cd0e:	cc 18       	rjmp	8000ce90 <udi_msc_spc_inquiry+0xc8>

8000cd10 <udi_msc_sense_fail_protected>:

static void udi_msc_sense_fail_protected(void)
{
8000cd10:	eb cd 40 80 	pushm	r7,lr
8000cd14:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
8000cd16:	30 0a       	mov	r10,0
8000cd18:	e0 6b 27 00 	mov	r11,9984
8000cd1c:	30 7c       	mov	r12,7
8000cd1e:	f0 1f 00 03 	mcall	8000cd28 <udi_msc_sense_fail_protected+0x18>
}
8000cd22:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd26:	00 00       	add	r0,r0
8000cd28:	80 00       	ld.sh	r0,r0[0x0]
8000cd2a:	cc 18       	rjmp	8000ceac <udi_msc_spc_inquiry+0xe4>

8000cd2c <udi_msc_sense_fail_cdb_invalid>:

static void udi_msc_sense_fail_cdb_invalid(void)
{
8000cd2c:	eb cd 40 80 	pushm	r7,lr
8000cd30:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000cd32:	30 0a       	mov	r10,0
8000cd34:	e0 6b 24 00 	mov	r11,9216
8000cd38:	30 5c       	mov	r12,5
8000cd3a:	f0 1f 00 03 	mcall	8000cd44 <udi_msc_sense_fail_cdb_invalid+0x18>
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
8000cd3e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd42:	00 00       	add	r0,r0
8000cd44:	80 00       	ld.sh	r0,r0[0x0]
8000cd46:	cc 18       	rjmp	8000cec8 <udi_msc_spc_inquiry+0x100>

8000cd48 <udi_msc_sense_command_invalid>:

static void udi_msc_sense_command_invalid(void)
{
8000cd48:	eb cd 40 80 	pushm	r7,lr
8000cd4c:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000cd4e:	30 0a       	mov	r10,0
8000cd50:	e0 6b 20 00 	mov	r11,8192
8000cd54:	30 5c       	mov	r12,5
8000cd56:	f0 1f 00 03 	mcall	8000cd60 <udi_msc_sense_command_invalid+0x18>
			SCSI_ASC_INVALID_COMMAND_OPERATION_CODE, 0);
}
8000cd5a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd5e:	00 00       	add	r0,r0
8000cd60:	80 00       	ld.sh	r0,r0[0x0]
8000cd62:	cc 18       	rjmp	8000cee4 <udi_msc_spc_inquiry+0x11c>

8000cd64 <udi_msc_spc_requestsense>:

//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
8000cd64:	eb cd 40 80 	pushm	r7,lr
8000cd68:	1a 97       	mov	r7,sp
8000cd6a:	20 1d       	sub	sp,4
	uint8_t length = udi_msc_cbw.CDB[4];
8000cd6c:	49 38       	lddpc	r8,8000cdb8 <udi_msc_spc_requestsense+0x54>
8000cd6e:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cd72:	ef 68 ff ff 	st.b	r7[-1],r8

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
8000cd76:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000cd7a:	31 28       	mov	r8,18
8000cd7c:	f0 09 18 00 	cp.b	r9,r8
8000cd80:	e0 88 00 05 	brls	8000cd8a <udi_msc_spc_requestsense+0x26>
		length = sizeof(udi_msc_sense);
8000cd84:	31 28       	mov	r8,18
8000cd86:	ef 68 ff ff 	st.b	r7[-1],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000cd8a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cd8e:	e0 6b 00 80 	mov	r11,128
8000cd92:	10 9c       	mov	r12,r8
8000cd94:	f0 1f 00 0a 	mcall	8000cdbc <udi_msc_spc_requestsense+0x58>
8000cd98:	18 98       	mov	r8,r12
8000cd9a:	ec 18 00 01 	eorl	r8,0x1
8000cd9e:	5c 58       	castu.b	r8
8000cda0:	c0 81       	brne	8000cdb0 <udi_msc_spc_requestsense+0x4c>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
8000cda2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cda6:	10 9b       	mov	r11,r8
8000cda8:	48 6c       	lddpc	r12,8000cdc0 <udi_msc_spc_requestsense+0x5c>
8000cdaa:	f0 1f 00 07 	mcall	8000cdc4 <udi_msc_spc_requestsense+0x60>
8000cdae:	c0 28       	rjmp	8000cdb2 <udi_msc_spc_requestsense+0x4e>
	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000cdb0:	d7 03       	nop
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
}
8000cdb2:	2f fd       	sub	sp,-4
8000cdb4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cdb8:	00 00       	add	r0,r0
8000cdba:	07 f4       	ld.ub	r4,r3[0x7]
8000cdbc:	80 00       	ld.sh	r0,r0[0x0]
8000cdbe:	ca 30       	breq	8000cd04 <udi_msc_sense_fail_hardware+0xc>
8000cdc0:	00 00       	add	r0,r0
8000cdc2:	08 18       	sub	r8,r4
8000cdc4:	80 00       	ld.sh	r0,r0[0x0]
8000cdc6:	ca 90       	breq	8000cd18 <udi_msc_sense_fail_protected+0x8>

8000cdc8 <udi_msc_spc_inquiry>:


static void udi_msc_spc_inquiry(void)
{
8000cdc8:	eb cd 40 80 	pushm	r7,lr
8000cdcc:	1a 97       	mov	r7,sp
8000cdce:	20 1d       	sub	sp,4
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
8000cdd0:	4b e8       	lddpc	r8,8000cec8 <udi_msc_spc_inquiry+0x100>
8000cdd2:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cdd6:	ef 68 ff fe 	st.b	r7[-2],r8

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
8000cdda:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000cdde:	32 48       	mov	r8,36
8000cde0:	f0 09 18 00 	cp.b	r9,r8
8000cde4:	e0 88 00 05 	brls	8000cdee <udi_msc_spc_inquiry+0x26>
		length = sizeof(udi_msc_inquiry_data);
8000cde8:	32 48       	mov	r8,36
8000cdea:	ef 68 ff fe 	st.b	r7[-2],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000cdee:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000cdf2:	e0 6b 00 80 	mov	r11,128
8000cdf6:	10 9c       	mov	r12,r8
8000cdf8:	f0 1f 00 35 	mcall	8000cecc <udi_msc_spc_inquiry+0x104>
8000cdfc:	18 98       	mov	r8,r12
8000cdfe:	ec 18 00 01 	eorl	r8,0x1
8000ce02:	5c 58       	castu.b	r8
8000ce04:	c5 e1       	brne	8000cec0 <udi_msc_spc_inquiry+0xf8>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000ce06:	4b 18       	lddpc	r8,8000cec8 <udi_msc_spc_inquiry+0x100>
8000ce08:	f1 38 00 10 	ld.ub	r8,r8[16]
8000ce0c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000ce10:	c0 61       	brne	8000ce1c <udi_msc_spc_inquiry+0x54>
			|| (0 != udi_msc_cbw.CDB[2])) {
8000ce12:	4a e8       	lddpc	r8,8000cec8 <udi_msc_spc_inquiry+0x100>
8000ce14:	f1 38 00 11 	ld.ub	r8,r8[17]
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000ce18:	58 08       	cp.w	r8,0
8000ce1a:	c0 60       	breq	8000ce26 <udi_msc_spc_inquiry+0x5e>
			|| (0 != udi_msc_cbw.CDB[2])) {
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
8000ce1c:	f0 1f 00 2d 	mcall	8000ced0 <udi_msc_spc_inquiry+0x108>
		udi_msc_csw_process();
8000ce20:	f0 1f 00 2d 	mcall	8000ced4 <udi_msc_spc_inquiry+0x10c>
		return;
8000ce24:	c4 f8       	rjmp	8000cec2 <udi_msc_spc_inquiry+0xfa>
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
8000ce26:	4a 98       	lddpc	r8,8000cec8 <udi_msc_spc_inquiry+0x100>
8000ce28:	f1 38 00 0d 	ld.ub	r8,r8[13]
		return;
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
8000ce2c:	10 9c       	mov	r12,r8
8000ce2e:	f0 1f 00 2b 	mcall	8000ced8 <udi_msc_spc_inquiry+0x110>
8000ce32:	18 98       	mov	r8,r12
8000ce34:	f0 c9 ff ff 	sub	r9,r8,-1
8000ce38:	4a 98       	lddpc	r8,8000cedc <udi_msc_spc_inquiry+0x114>
8000ce3a:	2f 08       	sub	r8,-16
8000ce3c:	31 0a       	mov	r10,16
8000ce3e:	12 9b       	mov	r11,r9
8000ce40:	10 9c       	mov	r12,r8
8000ce42:	f0 1f 00 28 	mcall	8000cee0 <udi_msc_spc_inquiry+0x118>
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
8000ce46:	30 08       	mov	r8,0
8000ce48:	ef 68 ff ff 	st.b	r7[-1],r8
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000ce4c:	c1 a8       	rjmp	8000ce80 <udi_msc_spc_inquiry+0xb8>
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000ce4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ce52:	4a 39       	lddpc	r9,8000cedc <udi_msc_spc_inquiry+0x114>
8000ce54:	f2 08 00 08 	add	r8,r9,r8
8000ce58:	f1 38 00 10 	ld.ub	r8,r8[16]
8000ce5c:	58 08       	cp.w	r8,0
8000ce5e:	c2 40       	breq	8000cea6 <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
8000ce60:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ce64:	49 e9       	lddpc	r9,8000cedc <udi_msc_spc_inquiry+0x114>
8000ce66:	f2 08 00 08 	add	r8,r9,r8
8000ce6a:	f1 39 00 10 	ld.ub	r9,r8[16]
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000ce6e:	32 28       	mov	r8,34
8000ce70:	f0 09 18 00 	cp.b	r9,r8
8000ce74:	c1 90       	breq	8000cea6 <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
8000ce76:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ce7a:	2f f8       	sub	r8,-1
8000ce7c:	ef 68 ff ff 	st.b	r7[-1],r8
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000ce80:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ce84:	31 08       	mov	r8,16
8000ce86:	f0 09 18 00 	cp.b	r9,r8
8000ce8a:	ce 21       	brne	8000ce4e <udi_msc_spc_inquiry+0x86>
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000ce8c:	c0 d8       	rjmp	8000cea6 <udi_msc_spc_inquiry+0xde>
		udi_msc_inquiry_data.product_id[i] = ' ';
8000ce8e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ce92:	49 39       	lddpc	r9,8000cedc <udi_msc_spc_inquiry+0x114>
8000ce94:	10 09       	add	r9,r8
8000ce96:	32 08       	mov	r8,32
8000ce98:	f3 68 00 10 	st.b	r9[16],r8
		i++;
8000ce9c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cea0:	2f f8       	sub	r8,-1
8000cea2:	ef 68 ff ff 	st.b	r7[-1],r8
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000cea6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ceaa:	31 08       	mov	r8,16
8000ceac:	f0 09 18 00 	cp.b	r9,r8
8000ceb0:	ce f1       	brne	8000ce8e <udi_msc_spc_inquiry+0xc6>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
8000ceb2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000ceb6:	10 9b       	mov	r11,r8
8000ceb8:	48 9c       	lddpc	r12,8000cedc <udi_msc_spc_inquiry+0x114>
8000ceba:	f0 1f 00 0b 	mcall	8000cee4 <udi_msc_spc_inquiry+0x11c>
8000cebe:	c0 28       	rjmp	8000cec2 <udi_msc_spc_inquiry+0xfa>
	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000cec0:	d7 03       	nop
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
}
8000cec2:	2f fd       	sub	sp,-4
8000cec4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cec8:	00 00       	add	r0,r0
8000ceca:	07 f4       	ld.ub	r4,r3[0x7]
8000cecc:	80 00       	ld.sh	r0,r0[0x0]
8000cece:	ca 30       	breq	8000ce14 <udi_msc_spc_inquiry+0x4c>
8000ced0:	80 00       	ld.sh	r0,r0[0x0]
8000ced2:	cd 2c       	rcall	8000d076 <udi_msc_spc_mode_sense+0x116>
8000ced4:	80 00       	ld.sh	r0,r0[0x0]
8000ced6:	cb 2c       	rcall	8000d03a <udi_msc_spc_mode_sense+0xda>
8000ced8:	80 00       	ld.sh	r0,r0[0x0]
8000ceda:	c4 a0       	breq	8000cf6e <udi_msc_spc_mode_sense+0xe>
8000cedc:	00 00       	add	r0,r0
8000cede:	01 68       	ld.uh	r8,--r0
8000cee0:	80 00       	ld.sh	r0,r0[0x0]
8000cee2:	ea d6 80 00 	satsub.w	r6,r5,-32768
8000cee6:	ca 90       	breq	8000ce38 <udi_msc_spc_inquiry+0x70>

8000cee8 <udi_msc_spc_testunitready_global>:


static bool udi_msc_spc_testunitready_global(void)
{
8000cee8:	eb cd 40 80 	pushm	r7,lr
8000ceec:	1a 97       	mov	r7,sp
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
8000ceee:	48 e8       	lddpc	r8,8000cf24 <udi_msc_spc_testunitready_global+0x3c>
8000cef0:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cef4:	10 9c       	mov	r12,r8
8000cef6:	f0 1f 00 0d 	mcall	8000cf28 <udi_msc_spc_testunitready_global+0x40>
8000cefa:	18 98       	mov	r8,r12
8000cefc:	58 28       	cp.w	r8,2
8000cefe:	c0 a0       	breq	8000cf12 <udi_msc_spc_testunitready_global+0x2a>
8000cf00:	58 38       	cp.w	r8,3
8000cf02:	c0 50       	breq	8000cf0c <udi_msc_spc_testunitready_global+0x24>
8000cf04:	58 08       	cp.w	r8,0
8000cf06:	c0 91       	brne	8000cf18 <udi_msc_spc_testunitready_global+0x30>
	case CTRL_GOOD:
		return true;	// Don't change sense data
8000cf08:	30 18       	mov	r8,1
8000cf0a:	c0 a8       	rjmp	8000cf1e <udi_msc_spc_testunitready_global+0x36>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000cf0c:	f0 1f 00 08 	mcall	8000cf2c <udi_msc_spc_testunitready_global+0x44>
		break;
8000cf10:	c0 68       	rjmp	8000cf1c <udi_msc_spc_testunitready_global+0x34>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000cf12:	f0 1f 00 08 	mcall	8000cf30 <udi_msc_spc_testunitready_global+0x48>
		break;
8000cf16:	c0 38       	rjmp	8000cf1c <udi_msc_spc_testunitready_global+0x34>
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
8000cf18:	f0 1f 00 07 	mcall	8000cf34 <udi_msc_spc_testunitready_global+0x4c>
		break;
	}
	return false;
8000cf1c:	30 08       	mov	r8,0
}
8000cf1e:	10 9c       	mov	r12,r8
8000cf20:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cf24:	00 00       	add	r0,r0
8000cf26:	07 f4       	ld.ub	r4,r3[0x7]
8000cf28:	80 00       	ld.sh	r0,r0[0x0]
8000cf2a:	c3 b0       	breq	8000cfa0 <udi_msc_spc_mode_sense+0x40>
8000cf2c:	80 00       	ld.sh	r0,r0[0x0]
8000cf2e:	cc dc       	rcall	8000d0c8 <udi_msc_sbc_read_capacity+0x18>
8000cf30:	80 00       	ld.sh	r0,r0[0x0]
8000cf32:	cc c0       	breq	8000ceca <udi_msc_spc_inquiry+0x102>
8000cf34:	80 00       	ld.sh	r0,r0[0x0]
8000cf36:	cc f8       	rjmp	8000d0d4 <udi_msc_sbc_read_capacity+0x24>

8000cf38 <udi_msc_spc_testunitready>:


static void udi_msc_spc_testunitready(void)
{
8000cf38:	eb cd 40 80 	pushm	r7,lr
8000cf3c:	1a 97       	mov	r7,sp
	if (udi_msc_spc_testunitready_global()) {
8000cf3e:	f0 1f 00 06 	mcall	8000cf54 <udi_msc_spc_testunitready+0x1c>
8000cf42:	18 98       	mov	r8,r12
8000cf44:	58 08       	cp.w	r8,0
8000cf46:	c0 30       	breq	8000cf4c <udi_msc_spc_testunitready+0x14>
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
8000cf48:	f0 1f 00 04 	mcall	8000cf58 <udi_msc_spc_testunitready+0x20>
	}
	// Send status in CSW packet
	udi_msc_csw_process();
8000cf4c:	f0 1f 00 04 	mcall	8000cf5c <udi_msc_spc_testunitready+0x24>
}
8000cf50:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cf54:	80 00       	ld.sh	r0,r0[0x0]
8000cf56:	ce e8       	rjmp	8000d132 <udi_msc_sbc_read_capacity+0x82>
8000cf58:	80 00       	ld.sh	r0,r0[0x0]
8000cf5a:	cc a0       	breq	8000ceee <udi_msc_spc_testunitready_global+0x6>
8000cf5c:	80 00       	ld.sh	r0,r0[0x0]
8000cf5e:	cb 2c       	rcall	8000d0c2 <udi_msc_sbc_read_capacity+0x12>

8000cf60 <udi_msc_spc_mode_sense>:


static void udi_msc_spc_mode_sense(bool b_sense10)
{
8000cf60:	eb cd 40 80 	pushm	r7,lr
8000cf64:	1a 97       	mov	r7,sp
8000cf66:	20 3d       	sub	sp,12
8000cf68:	18 98       	mov	r8,r12
8000cf6a:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
8000cf6e:	31 4a       	mov	r10,20
8000cf70:	30 0b       	mov	r11,0
8000cf72:	4c ac       	lddpc	r12,8000d098 <udi_msc_spc_mode_sense+0x138>
8000cf74:	f0 1f 00 4a 	mcall	8000d09c <udi_msc_spc_mode_sense+0x13c>

	// Initialize process
	if (b_sense10) {
8000cf78:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cf7c:	30 08       	mov	r8,0
8000cf7e:	f0 09 18 00 	cp.b	r9,r8
8000cf82:	c0 e0       	breq	8000cf9e <udi_msc_spc_mode_sense+0x3e>
		request_lgt = udi_msc_cbw.CDB[8];
8000cf84:	4c 78       	lddpc	r8,8000d0a0 <udi_msc_spc_mode_sense+0x140>
8000cf86:	f1 38 00 17 	ld.ub	r8,r8[23]
8000cf8a:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s10.sense_data;
8000cf8e:	4c 38       	lddpc	r8,8000d098 <udi_msc_spc_mode_sense+0x138>
8000cf90:	2f 88       	sub	r8,-8
8000cf92:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
8000cf96:	30 88       	mov	r8,8
8000cf98:	ef 68 ff f8 	st.b	r7[-8],r8
8000cf9c:	c0 d8       	rjmp	8000cfb6 <udi_msc_spc_mode_sense+0x56>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
8000cf9e:	4c 18       	lddpc	r8,8000d0a0 <udi_msc_spc_mode_sense+0x140>
8000cfa0:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cfa4:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s6.sense_data;
8000cfa8:	4b c8       	lddpc	r8,8000d098 <udi_msc_spc_mode_sense+0x138>
8000cfaa:	2f c8       	sub	r8,-4
8000cfac:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
8000cfb0:	30 48       	mov	r8,4
8000cfb2:	ef 68 ff f8 	st.b	r7[-8],r8
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
8000cfb6:	4b b8       	lddpc	r8,8000d0a0 <udi_msc_spc_mode_sense+0x140>
8000cfb8:	f1 38 00 11 	ld.ub	r8,r8[17]
8000cfbc:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000cfc0:	ef 68 ff f9 	st.b	r7[-7],r8
	if ((SCSI_MS_MODE_INFEXP == mode)
8000cfc4:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000cfc8:	31 c8       	mov	r8,28
8000cfca:	f0 09 18 00 	cp.b	r9,r8
8000cfce:	c0 70       	breq	8000cfdc <udi_msc_spc_mode_sense+0x7c>
8000cfd0:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000cfd4:	33 f8       	mov	r8,63
8000cfd6:	f0 09 18 00 	cp.b	r9,r8
8000cfda:	c1 21       	brne	8000cffe <udi_msc_spc_mode_sense+0x9e>
			|| (SCSI_MS_MODE_ALL == mode)) {
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
8000cfdc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cfe0:	31 c8       	mov	r8,28
8000cfe2:	b2 88       	st.b	r9[0x0],r8
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
8000cfe4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cfe8:	30 a8       	mov	r8,10
8000cfea:	b2 98       	st.b	r9[0x1],r8
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
8000cfec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cff0:	30 58       	mov	r8,5
8000cff2:	b2 b8       	st.b	r9[0x3],r8
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
8000cff4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cff8:	2f 48       	sub	r8,-12
8000cffa:	ef 68 ff f8 	st.b	r7[-8],r8
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
8000cffe:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000d002:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d006:	f0 09 18 00 	cp.b	r9,r8
8000d00a:	e0 88 00 06 	brls	8000d016 <udi_msc_spc_mode_sense+0xb6>
		request_lgt = data_sense_lgt;
8000d00e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d012:	ef 68 ff fa 	st.b	r7[-6],r8
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
8000d016:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000d01a:	e0 6b 00 80 	mov	r11,128
8000d01e:	10 9c       	mov	r12,r8
8000d020:	f0 1f 00 21 	mcall	8000d0a4 <udi_msc_spc_mode_sense+0x144>
8000d024:	18 98       	mov	r8,r12
8000d026:	ec 18 00 01 	eorl	r8,0x1
8000d02a:	5c 58       	castu.b	r8
8000d02c:	c3 21       	brne	8000d090 <udi_msc_spc_mode_sense+0x130>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
8000d02e:	49 d8       	lddpc	r8,8000d0a0 <udi_msc_spc_mode_sense+0x140>
8000d030:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000d034:	10 9c       	mov	r12,r8
8000d036:	f0 1f 00 1d 	mcall	8000d0a8 <udi_msc_spc_mode_sense+0x148>
8000d03a:	18 98       	mov	r8,r12
8000d03c:	58 08       	cp.w	r8,0
8000d03e:	c0 40       	breq	8000d046 <udi_msc_spc_mode_sense+0xe6>
8000d040:	e0 68 00 80 	mov	r8,128
8000d044:	c0 28       	rjmp	8000d048 <udi_msc_spc_mode_sense+0xe8>
8000d046:	30 08       	mov	r8,0
8000d048:	ef 68 ff fb 	st.b	r7[-5],r8

	if (b_sense10) {
8000d04c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d050:	30 08       	mov	r8,0
8000d052:	f0 09 18 00 	cp.b	r9,r8
8000d056:	c0 c0       	breq	8000d06e <udi_msc_spc_mode_sense+0x10e>
		sense.s10.header.mode_data_length =
8000d058:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d05c:	20 28       	sub	r8,2
8000d05e:	5c 88       	casts.h	r8
8000d060:	48 e9       	lddpc	r9,8000d098 <udi_msc_spc_mode_sense+0x138>
8000d062:	b2 08       	st.h	r9[0x0],r8
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
8000d064:	48 d9       	lddpc	r9,8000d098 <udi_msc_spc_mode_sense+0x138>
8000d066:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000d06a:	b2 b8       	st.b	r9[0x3],r8
8000d06c:	c0 b8       	rjmp	8000d082 <udi_msc_spc_mode_sense+0x122>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
8000d06e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d072:	20 18       	sub	r8,1
8000d074:	5c 58       	castu.b	r8
8000d076:	48 99       	lddpc	r9,8000d098 <udi_msc_spc_mode_sense+0x138>
8000d078:	b2 88       	st.b	r9[0x0],r8
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
8000d07a:	48 89       	lddpc	r9,8000d098 <udi_msc_spc_mode_sense+0x138>
8000d07c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000d080:	b2 a8       	st.b	r9[0x2],r8
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
8000d082:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000d086:	10 9b       	mov	r11,r8
8000d088:	48 4c       	lddpc	r12,8000d098 <udi_msc_spc_mode_sense+0x138>
8000d08a:	f0 1f 00 09 	mcall	8000d0ac <udi_msc_spc_mode_sense+0x14c>
8000d08e:	c0 28       	rjmp	8000d092 <udi_msc_spc_mode_sense+0x132>
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
		return;
8000d090:	d7 03       	nop
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
}
8000d092:	2f dd       	sub	sp,-12
8000d094:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d098:	00 00       	add	r0,r0
8000d09a:	08 40       	or	r0,r4
8000d09c:	80 00       	ld.sh	r0,r0[0x0]
8000d09e:	ec 1e 00 00 	eorl	lr,0x0
8000d0a2:	07 f4       	ld.ub	r4,r3[0x7]
8000d0a4:	80 00       	ld.sh	r0,r0[0x0]
8000d0a6:	ca 30       	breq	8000cfec <udi_msc_spc_mode_sense+0x8c>
8000d0a8:	80 00       	ld.sh	r0,r0[0x0]
8000d0aa:	c4 50       	breq	8000d134 <udi_msc_sbc_read_capacity+0x84>
8000d0ac:	80 00       	ld.sh	r0,r0[0x0]
8000d0ae:	ca 90       	breq	8000d000 <udi_msc_spc_mode_sense+0xa0>

8000d0b0 <udi_msc_sbc_read_capacity>:


static void udi_msc_sbc_read_capacity(void)
{
8000d0b0:	eb cd 40 80 	pushm	r7,lr
8000d0b4:	1a 97       	mov	r7,sp
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
8000d0b6:	e0 6b 00 80 	mov	r11,128
8000d0ba:	30 8c       	mov	r12,8
8000d0bc:	f0 1f 00 1b 	mcall	8000d128 <udi_msc_sbc_read_capacity+0x78>
8000d0c0:	18 98       	mov	r8,r12
8000d0c2:	ec 18 00 01 	eorl	r8,0x1
8000d0c6:	5c 58       	castu.b	r8
8000d0c8:	c2 d1       	brne	8000d122 <udi_msc_sbc_read_capacity+0x72>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
8000d0ca:	49 98       	lddpc	r8,8000d12c <udi_msc_sbc_read_capacity+0x7c>
8000d0cc:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000d0d0:	49 8b       	lddpc	r11,8000d130 <udi_msc_sbc_read_capacity+0x80>
8000d0d2:	10 9c       	mov	r12,r8
8000d0d4:	f0 1f 00 18 	mcall	8000d134 <udi_msc_sbc_read_capacity+0x84>
8000d0d8:	18 98       	mov	r8,r12
					&udi_msc_capacity.max_lba)) {
8000d0da:	58 28       	cp.w	r8,2
8000d0dc:	c1 80       	breq	8000d10c <udi_msc_sbc_read_capacity+0x5c>
8000d0de:	58 38       	cp.w	r8,3
8000d0e0:	c1 10       	breq	8000d102 <udi_msc_sbc_read_capacity+0x52>
8000d0e2:	58 08       	cp.w	r8,0
8000d0e4:	c1 91       	brne	8000d116 <udi_msc_sbc_read_capacity+0x66>
		udi_msc_csw_process();
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
8000d0e6:	49 38       	lddpc	r8,8000d130 <udi_msc_sbc_read_capacity+0x80>
8000d0e8:	e0 69 02 00 	mov	r9,512
8000d0ec:	91 19       	st.w	r8[0x4],r9
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
8000d0ee:	49 18       	lddpc	r8,8000d130 <udi_msc_sbc_read_capacity+0x80>
8000d0f0:	70 09       	ld.w	r9,r8[0x0]
8000d0f2:	49 08       	lddpc	r8,8000d130 <udi_msc_sbc_read_capacity+0x80>
8000d0f4:	91 09       	st.w	r8[0x0],r9
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
8000d0f6:	48 f8       	lddpc	r8,8000d130 <udi_msc_sbc_read_capacity+0x80>
8000d0f8:	30 8b       	mov	r11,8
8000d0fa:	10 9c       	mov	r12,r8
8000d0fc:	f0 1f 00 0f 	mcall	8000d138 <udi_msc_sbc_read_capacity+0x88>
8000d100:	c1 28       	rjmp	8000d124 <udi_msc_sbc_read_capacity+0x74>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000d102:	f0 1f 00 0f 	mcall	8000d13c <udi_msc_sbc_read_capacity+0x8c>
		udi_msc_csw_process();
8000d106:	f0 1f 00 0f 	mcall	8000d140 <udi_msc_sbc_read_capacity+0x90>
		return;
8000d10a:	c0 d8       	rjmp	8000d124 <udi_msc_sbc_read_capacity+0x74>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000d10c:	f0 1f 00 0e 	mcall	8000d144 <udi_msc_sbc_read_capacity+0x94>
		udi_msc_csw_process();
8000d110:	f0 1f 00 0c 	mcall	8000d140 <udi_msc_sbc_read_capacity+0x90>
		return;
8000d114:	c0 88       	rjmp	8000d124 <udi_msc_sbc_read_capacity+0x74>
	default:
		udi_msc_sense_fail_hardware();
8000d116:	f0 1f 00 0d 	mcall	8000d148 <udi_msc_sbc_read_capacity+0x98>
		udi_msc_csw_process();
8000d11a:	f0 1f 00 0a 	mcall	8000d140 <udi_msc_sbc_read_capacity+0x90>
		return;
8000d11e:	d7 03       	nop
8000d120:	c0 28       	rjmp	8000d124 <udi_msc_sbc_read_capacity+0x74>
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
					USB_CBW_DIRECTION_IN))
		return;
8000d122:	d7 03       	nop
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
			sizeof(udi_msc_capacity));
}
8000d124:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d128:	80 00       	ld.sh	r0,r0[0x0]
8000d12a:	ca 30       	breq	8000d070 <udi_msc_spc_mode_sense+0x110>
8000d12c:	00 00       	add	r0,r0
8000d12e:	07 f4       	ld.ub	r4,r3[0x7]
8000d130:	00 00       	add	r0,r0
8000d132:	08 38       	cp.w	r8,r4
8000d134:	80 00       	ld.sh	r0,r0[0x0]
8000d136:	c3 fc       	rcall	8000d1b4 <udi_msc_sbc_trans+0x68>
8000d138:	80 00       	ld.sh	r0,r0[0x0]
8000d13a:	ca 90       	breq	8000d08c <udi_msc_spc_mode_sense+0x12c>
8000d13c:	80 00       	ld.sh	r0,r0[0x0]
8000d13e:	cc dc       	rcall	8000d2d8 <udi_msc_process_trans+0x98>
8000d140:	80 00       	ld.sh	r0,r0[0x0]
8000d142:	cb 2c       	rcall	8000d2a6 <udi_msc_process_trans+0x66>
8000d144:	80 00       	ld.sh	r0,r0[0x0]
8000d146:	cc c0       	breq	8000d0de <udi_msc_sbc_read_capacity+0x2e>
8000d148:	80 00       	ld.sh	r0,r0[0x0]
8000d14a:	cc f8       	rjmp	8000d2e8 <udi_msc_process_trans+0xa8>

8000d14c <udi_msc_sbc_trans>:


static void udi_msc_sbc_trans(bool b_read)
{
8000d14c:	eb cd 40 80 	pushm	r7,lr
8000d150:	1a 97       	mov	r7,sp
8000d152:	20 2d       	sub	sp,8
8000d154:	18 98       	mov	r8,r12
8000d156:	ef 68 ff f8 	st.b	r7[-8],r8
	uint32_t trans_size;

	if (!b_read) {
8000d15a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d15e:	ec 18 00 01 	eorl	r8,0x1
8000d162:	5c 58       	castu.b	r8
8000d164:	c0 f0       	breq	8000d182 <udi_msc_sbc_trans+0x36>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
8000d166:	4a e8       	lddpc	r8,8000d21c <udi_msc_sbc_trans+0xd0>
8000d168:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000d16c:	10 9c       	mov	r12,r8
8000d16e:	f0 1f 00 2d 	mcall	8000d220 <udi_msc_sbc_trans+0xd4>
8000d172:	18 98       	mov	r8,r12
8000d174:	58 08       	cp.w	r8,0
8000d176:	c0 60       	breq	8000d182 <udi_msc_sbc_trans+0x36>
			// Write not authorized
			udi_msc_sense_fail_protected();
8000d178:	f0 1f 00 2b 	mcall	8000d224 <udi_msc_sbc_trans+0xd8>
			udi_msc_csw_process();
8000d17c:	f0 1f 00 2b 	mcall	8000d228 <udi_msc_sbc_trans+0xdc>
			return;
8000d180:	c4 a8       	rjmp	8000d214 <udi_msc_sbc_trans+0xc8>
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
8000d182:	4a b9       	lddpc	r9,8000d22c <udi_msc_sbc_trans+0xe0>
8000d184:	4a 68       	lddpc	r8,8000d21c <udi_msc_sbc_trans+0xd0>
8000d186:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d18a:	b2 88       	st.b	r9[0x0],r8
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
8000d18c:	4a 88       	lddpc	r8,8000d22c <udi_msc_sbc_trans+0xe0>
8000d18e:	f0 c9 ff ff 	sub	r9,r8,-1
8000d192:	4a 38       	lddpc	r8,8000d21c <udi_msc_sbc_trans+0xd0>
8000d194:	f1 38 00 12 	ld.ub	r8,r8[18]
8000d198:	b2 88       	st.b	r9[0x0],r8
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
8000d19a:	4a 58       	lddpc	r8,8000d22c <udi_msc_sbc_trans+0xe0>
8000d19c:	f0 c9 ff fe 	sub	r9,r8,-2
8000d1a0:	49 f8       	lddpc	r8,8000d21c <udi_msc_sbc_trans+0xd0>
8000d1a2:	f1 38 00 13 	ld.ub	r8,r8[19]
8000d1a6:	b2 88       	st.b	r9[0x0],r8
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
8000d1a8:	4a 18       	lddpc	r8,8000d22c <udi_msc_sbc_trans+0xe0>
8000d1aa:	f0 c9 ff fd 	sub	r9,r8,-3
8000d1ae:	49 c8       	lddpc	r8,8000d21c <udi_msc_sbc_trans+0xd0>
8000d1b0:	f1 38 00 14 	ld.ub	r8,r8[20]
8000d1b4:	b2 88       	st.b	r9[0x0],r8
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
8000d1b6:	49 f9       	lddpc	r9,8000d230 <udi_msc_sbc_trans+0xe4>
8000d1b8:	49 98       	lddpc	r8,8000d21c <udi_msc_sbc_trans+0xd0>
8000d1ba:	f1 38 00 16 	ld.ub	r8,r8[22]
8000d1be:	b2 88       	st.b	r9[0x0],r8
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
8000d1c0:	49 c8       	lddpc	r8,8000d230 <udi_msc_sbc_trans+0xe4>
8000d1c2:	f0 c9 ff ff 	sub	r9,r8,-1
8000d1c6:	49 68       	lddpc	r8,8000d21c <udi_msc_sbc_trans+0xd0>
8000d1c8:	f1 38 00 17 	ld.ub	r8,r8[23]
8000d1cc:	b2 88       	st.b	r9[0x0],r8

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
8000d1ce:	49 98       	lddpc	r8,8000d230 <udi_msc_sbc_trans+0xe4>
8000d1d0:	90 08       	ld.sh	r8,r8[0x0]
8000d1d2:	5c 78       	castu.h	r8
8000d1d4:	a9 78       	lsl	r8,0x9
8000d1d6:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udi_msc_cbw_validate(trans_size,
8000d1da:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d1de:	30 08       	mov	r8,0
8000d1e0:	f0 09 18 00 	cp.b	r9,r8
8000d1e4:	c0 40       	breq	8000d1ec <udi_msc_sbc_trans+0xa0>
8000d1e6:	e0 68 00 80 	mov	r8,128
8000d1ea:	c0 28       	rjmp	8000d1ee <udi_msc_sbc_trans+0xa2>
8000d1ec:	30 08       	mov	r8,0
8000d1ee:	10 9b       	mov	r11,r8
8000d1f0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d1f4:	f0 1f 00 10 	mcall	8000d234 <udi_msc_sbc_trans+0xe8>
8000d1f8:	18 98       	mov	r8,r12
8000d1fa:	ec 18 00 01 	eorl	r8,0x1
8000d1fe:	5c 58       	castu.b	r8
8000d200:	c0 91       	brne	8000d212 <udi_msc_sbc_trans+0xc6>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
8000d202:	48 e9       	lddpc	r9,8000d238 <udi_msc_sbc_trans+0xec>
8000d204:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d208:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_trans_req = true;
8000d20a:	48 d9       	lddpc	r9,8000d23c <udi_msc_sbc_trans+0xf0>
8000d20c:	30 18       	mov	r8,1
8000d20e:	b2 88       	st.b	r9[0x0],r8
8000d210:	c0 28       	rjmp	8000d214 <udi_msc_sbc_trans+0xc8>
	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
	if (!udi_msc_cbw_validate(trans_size,
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;
8000d212:	d7 03       	nop

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
	udi_msc_b_trans_req = true;
	UDI_MSC_NOTIFY_TRANS_EXT();
}
8000d214:	2f ed       	sub	sp,-8
8000d216:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d21a:	00 00       	add	r0,r0
8000d21c:	00 00       	add	r0,r0
8000d21e:	07 f4       	ld.ub	r4,r3[0x7]
8000d220:	80 00       	ld.sh	r0,r0[0x0]
8000d222:	c4 50       	breq	8000d2ac <udi_msc_process_trans+0x6c>
8000d224:	80 00       	ld.sh	r0,r0[0x0]
8000d226:	cd 10       	breq	8000d1c8 <udi_msc_sbc_trans+0x7c>
8000d228:	80 00       	ld.sh	r0,r0[0x0]
8000d22a:	cb 2c       	rcall	8000d38e <udi_msc_trans_block+0x4a>
8000d22c:	00 00       	add	r0,r0
8000d22e:	08 30       	cp.w	r0,r4
8000d230:	00 00       	add	r0,r0
8000d232:	08 34       	cp.w	r4,r4
8000d234:	80 00       	ld.sh	r0,r0[0x0]
8000d236:	ca 30       	breq	8000d17c <udi_msc_sbc_trans+0x30>
8000d238:	00 00       	add	r0,r0
8000d23a:	08 2e       	rsub	lr,r4
8000d23c:	00 00       	add	r0,r0
8000d23e:	08 2d       	rsub	sp,r4

8000d240 <udi_msc_process_trans>:


bool udi_msc_process_trans(void)
{
8000d240:	eb cd 40 80 	pushm	r7,lr
8000d244:	1a 97       	mov	r7,sp
8000d246:	20 1d       	sub	sp,4
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
8000d248:	4a 58       	lddpc	r8,8000d2dc <udi_msc_process_trans+0x9c>
8000d24a:	11 88       	ld.ub	r8,r8[0x0]
8000d24c:	ec 18 00 01 	eorl	r8,0x1
8000d250:	5c 58       	castu.b	r8
8000d252:	c0 30       	breq	8000d258 <udi_msc_process_trans+0x18>
		return false;	// No Transfer request to do
8000d254:	30 08       	mov	r8,0
8000d256:	c3 f8       	rjmp	8000d2d4 <udi_msc_process_trans+0x94>
	udi_msc_b_trans_req = false;
8000d258:	4a 19       	lddpc	r9,8000d2dc <udi_msc_process_trans+0x9c>
8000d25a:	30 08       	mov	r8,0
8000d25c:	b2 88       	st.b	r9[0x0],r8

	// Start transfer
	if (udi_msc_b_read) {
8000d25e:	4a 18       	lddpc	r8,8000d2e0 <udi_msc_process_trans+0xa0>
8000d260:	11 88       	ld.ub	r8,r8[0x0]
8000d262:	58 08       	cp.w	r8,0
8000d264:	c1 20       	breq	8000d288 <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000d266:	4a 08       	lddpc	r8,8000d2e4 <udi_msc_process_trans+0xa4>
8000d268:	90 08       	ld.sh	r8,r8[0x0]
8000d26a:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000d26e:	49 f8       	lddpc	r8,8000d2e8 <udi_msc_process_trans+0xa8>
8000d270:	70 09       	ld.w	r9,r8[0x0]
8000d272:	49 f8       	lddpc	r8,8000d2ec <udi_msc_process_trans+0xac>
8000d274:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000d278:	12 9b       	mov	r11,r9
8000d27a:	10 9c       	mov	r12,r8
8000d27c:	f0 1f 00 1d 	mcall	8000d2f0 <udi_msc_process_trans+0xb0>
8000d280:	18 98       	mov	r8,r12
8000d282:	ef 48 ff fc 	st.w	r7[-4],r8
8000d286:	c1 18       	rjmp	8000d2a8 <udi_msc_process_trans+0x68>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000d288:	49 78       	lddpc	r8,8000d2e4 <udi_msc_process_trans+0xa4>
8000d28a:	90 08       	ld.sh	r8,r8[0x0]
8000d28c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000d290:	49 68       	lddpc	r8,8000d2e8 <udi_msc_process_trans+0xa8>
8000d292:	70 09       	ld.w	r9,r8[0x0]
8000d294:	49 68       	lddpc	r8,8000d2ec <udi_msc_process_trans+0xac>
8000d296:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000d29a:	12 9b       	mov	r11,r9
8000d29c:	10 9c       	mov	r12,r8
8000d29e:	f0 1f 00 16 	mcall	8000d2f4 <udi_msc_process_trans+0xb4>
8000d2a2:	18 98       	mov	r8,r12
8000d2a4:	ef 48 ff fc 	st.w	r7[-4],r8
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
8000d2a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d2ac:	58 28       	cp.w	r8,2
8000d2ae:	c0 b0       	breq	8000d2c4 <udi_msc_process_trans+0x84>
8000d2b0:	58 38       	cp.w	r8,3
8000d2b2:	c0 60       	breq	8000d2be <udi_msc_process_trans+0x7e>
8000d2b4:	58 08       	cp.w	r8,0
8000d2b6:	c0 a1       	brne	8000d2ca <udi_msc_process_trans+0x8a>
	case CTRL_GOOD:
		udi_msc_sense_pass();
8000d2b8:	f0 1f 00 10 	mcall	8000d2f8 <udi_msc_process_trans+0xb8>
		break;
8000d2bc:	c0 98       	rjmp	8000d2ce <udi_msc_process_trans+0x8e>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000d2be:	f0 1f 00 10 	mcall	8000d2fc <udi_msc_process_trans+0xbc>
		break;
8000d2c2:	c0 68       	rjmp	8000d2ce <udi_msc_process_trans+0x8e>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000d2c4:	f0 1f 00 0f 	mcall	8000d300 <udi_msc_process_trans+0xc0>
		break;
8000d2c8:	c0 38       	rjmp	8000d2ce <udi_msc_process_trans+0x8e>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
8000d2ca:	f0 1f 00 0f 	mcall	8000d304 <udi_msc_process_trans+0xc4>
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
8000d2ce:	f0 1f 00 0f 	mcall	8000d308 <udi_msc_process_trans+0xc8>
	return true;
8000d2d2:	30 18       	mov	r8,1
}
8000d2d4:	10 9c       	mov	r12,r8
8000d2d6:	2f fd       	sub	sp,-4
8000d2d8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d2dc:	00 00       	add	r0,r0
8000d2de:	08 2d       	rsub	sp,r4
8000d2e0:	00 00       	add	r0,r0
8000d2e2:	08 2e       	rsub	lr,r4
8000d2e4:	00 00       	add	r0,r0
8000d2e6:	08 34       	cp.w	r4,r4
8000d2e8:	00 00       	add	r0,r0
8000d2ea:	08 30       	cp.w	r0,r4
8000d2ec:	00 00       	add	r0,r0
8000d2ee:	07 f4       	ld.ub	r4,r3[0x7]
8000d2f0:	80 00       	ld.sh	r0,r0[0x0]
8000d2f2:	c4 e4       	brge	8000d38e <udi_msc_trans_block+0x4a>
8000d2f4:	80 00       	ld.sh	r0,r0[0x0]
8000d2f6:	c5 58       	rjmp	8000d3a0 <udi_msc_trans_block+0x5c>
8000d2f8:	80 00       	ld.sh	r0,r0[0x0]
8000d2fa:	cc a0       	breq	8000d28e <udi_msc_process_trans+0x4e>
8000d2fc:	80 00       	ld.sh	r0,r0[0x0]
8000d2fe:	cc dc       	rcall	8000d498 <udc_next_desc_in_iface+0x18>
8000d300:	80 00       	ld.sh	r0,r0[0x0]
8000d302:	cc c0       	breq	8000d29a <udi_msc_process_trans+0x5a>
8000d304:	80 00       	ld.sh	r0,r0[0x0]
8000d306:	cc f8       	rjmp	8000d4a4 <udc_next_desc_in_iface+0x24>
8000d308:	80 00       	ld.sh	r0,r0[0x0]
8000d30a:	cb 2c       	rcall	8000d46e <udc_get_eof_conf+0x22>

8000d30c <udi_msc_trans_ack>:


static void udi_msc_trans_ack(udd_ep_status_t status, iram_size_t n,
		udd_ep_id_t ep)
{
8000d30c:	eb cd 40 80 	pushm	r7,lr
8000d310:	1a 97       	mov	r7,sp
8000d312:	20 3d       	sub	sp,12
8000d314:	ef 4c ff fc 	st.w	r7[-4],r12
8000d318:	ef 4b ff f8 	st.w	r7[-8],r11
8000d31c:	14 98       	mov	r8,r10
8000d31e:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
8000d322:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d326:	58 08       	cp.w	r8,0
8000d328:	5f 18       	srne	r8
8000d32a:	5c 58       	castu.b	r8
8000d32c:	48 49       	lddpc	r9,8000d33c <udi_msc_trans_ack+0x30>
8000d32e:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_ack_trans = true;
8000d330:	48 49       	lddpc	r9,8000d340 <udi_msc_trans_ack+0x34>
8000d332:	30 18       	mov	r8,1
8000d334:	b2 88       	st.b	r9[0x0],r8
}
8000d336:	2f dd       	sub	sp,-12
8000d338:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d33c:	00 00       	add	r0,r0
8000d33e:	10 2b       	rsub	r11,r8
8000d340:	00 00       	add	r0,r0
8000d342:	01 64       	ld.uh	r4,--r0

8000d344 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
8000d344:	eb cd 40 80 	pushm	r7,lr
8000d348:	1a 97       	mov	r7,sp
8000d34a:	20 4d       	sub	sp,16
8000d34c:	18 98       	mov	r8,r12
8000d34e:	ef 4b ff f8 	st.w	r7[-8],r11
8000d352:	ef 4a ff f4 	st.w	r7[-12],r10
8000d356:	ef 49 ff f0 	st.w	r7[-16],r9
8000d35a:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!udi_msc_b_ack_trans)
8000d35e:	4a e8       	lddpc	r8,8000d414 <udi_msc_trans_block+0xd0>
8000d360:	11 88       	ld.ub	r8,r8[0x0]
8000d362:	5c 58       	castu.b	r8
8000d364:	ec 18 00 01 	eorl	r8,0x1
8000d368:	5c 58       	castu.b	r8
8000d36a:	c0 30       	breq	8000d370 <udi_msc_trans_block+0x2c>
		return false;	// No possible, transfer on going
8000d36c:	30 08       	mov	r8,0
8000d36e:	c4 f8       	rjmp	8000d40c <udi_msc_trans_block+0xc8>

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
8000d370:	4a 99       	lddpc	r9,8000d414 <udi_msc_trans_block+0xd0>
8000d372:	30 08       	mov	r8,0
8000d374:	b2 88       	st.b	r9[0x0],r8
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
8000d376:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d37a:	58 08       	cp.w	r8,0
8000d37c:	c0 40       	breq	8000d384 <udi_msc_trans_block+0x40>
8000d37e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d382:	c0 28       	rjmp	8000d386 <udi_msc_trans_block+0x42>
8000d384:	4a 58       	lddpc	r8,8000d418 <udi_msc_trans_block+0xd4>
8000d386:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000d38a:	30 09       	mov	r9,0
8000d38c:	f2 0a 18 00 	cp.b	r10,r9
8000d390:	c0 40       	breq	8000d398 <udi_msc_trans_block+0x54>
8000d392:	e0 6c 00 81 	mov	r12,129
8000d396:	c0 28       	rjmp	8000d39a <udi_msc_trans_block+0x56>
8000d398:	30 2c       	mov	r12,2
8000d39a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d39e:	ee fa ff f8 	ld.w	r10,r7[-8]
8000d3a2:	30 0b       	mov	r11,0
8000d3a4:	f0 1f 00 1e 	mcall	8000d41c <udi_msc_trans_block+0xd8>
8000d3a8:	18 98       	mov	r8,r12
8000d3aa:	ec 18 00 01 	eorl	r8,0x1
8000d3ae:	5c 58       	castu.b	r8
8000d3b0:	c0 60       	breq	8000d3bc <udi_msc_trans_block+0x78>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
8000d3b2:	49 99       	lddpc	r9,8000d414 <udi_msc_trans_block+0xd0>
8000d3b4:	30 18       	mov	r8,1
8000d3b6:	b2 88       	st.b	r9[0x0],r8
		return false;
8000d3b8:	30 08       	mov	r8,0
8000d3ba:	c2 98       	rjmp	8000d40c <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
8000d3bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d3c0:	58 08       	cp.w	r8,0
8000d3c2:	c1 d1       	brne	8000d3fc <udi_msc_trans_block+0xb8>
		while (!udi_msc_b_ack_trans);
8000d3c4:	49 48       	lddpc	r8,8000d414 <udi_msc_trans_block+0xd0>
8000d3c6:	11 88       	ld.ub	r8,r8[0x0]
8000d3c8:	5c 58       	castu.b	r8
8000d3ca:	ec 18 00 01 	eorl	r8,0x1
8000d3ce:	5c 58       	castu.b	r8
8000d3d0:	cf a1       	brne	8000d3c4 <udi_msc_trans_block+0x80>
		if (udi_msc_b_abort_trans) {
8000d3d2:	49 48       	lddpc	r8,8000d420 <udi_msc_trans_block+0xdc>
8000d3d4:	11 88       	ld.ub	r8,r8[0x0]
8000d3d6:	5c 58       	castu.b	r8
8000d3d8:	c0 30       	breq	8000d3de <udi_msc_trans_block+0x9a>
			return false;
8000d3da:	30 08       	mov	r8,0
8000d3dc:	c1 88       	rjmp	8000d40c <udi_msc_trans_block+0xc8>
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
8000d3de:	49 28       	lddpc	r8,8000d424 <udi_msc_trans_block+0xe0>
8000d3e0:	70 29       	ld.w	r9,r8[0x8]
8000d3e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d3e6:	10 19       	sub	r9,r8
8000d3e8:	48 f8       	lddpc	r8,8000d424 <udi_msc_trans_block+0xe0>
8000d3ea:	91 29       	st.w	r8[0x8],r9
		return (!udi_msc_b_abort_trans);
8000d3ec:	48 d8       	lddpc	r8,8000d420 <udi_msc_trans_block+0xdc>
8000d3ee:	11 88       	ld.ub	r8,r8[0x0]
8000d3f0:	5c 58       	castu.b	r8
8000d3f2:	ec 18 00 01 	eorl	r8,0x1
8000d3f6:	5c 58       	castu.b	r8
8000d3f8:	5c 58       	castu.b	r8
8000d3fa:	c0 98       	rjmp	8000d40c <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
8000d3fc:	48 a8       	lddpc	r8,8000d424 <udi_msc_trans_block+0xe0>
8000d3fe:	70 29       	ld.w	r9,r8[0x8]
8000d400:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d404:	10 19       	sub	r9,r8
8000d406:	48 88       	lddpc	r8,8000d424 <udi_msc_trans_block+0xe0>
8000d408:	91 29       	st.w	r8[0x8],r9
	return true;
8000d40a:	30 18       	mov	r8,1
}
8000d40c:	10 9c       	mov	r12,r8
8000d40e:	2f cd       	sub	sp,-16
8000d410:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d414:	00 00       	add	r0,r0
8000d416:	01 64       	ld.uh	r4,--r0
8000d418:	80 00       	ld.sh	r0,r0[0x0]
8000d41a:	d3 0c       	*unknown*
8000d41c:	80 00       	ld.sh	r0,r0[0x0]
8000d41e:	a8 9c       	st.b	r4[0x1],r12
8000d420:	00 00       	add	r0,r0
8000d422:	10 2b       	rsub	r11,r8
8000d424:	00 00       	add	r0,r0
8000d426:	01 54       	ld.sh	r4,--r0
8000d428:	36 39       	mov	r9,99
8000d42a:	36 39       	mov	r9,99
8000d42c:	36 39       	mov	r9,99
8000d42e:	36 39       	mov	r9,99
8000d430:	36 39       	mov	r9,99
8000d432:	36 39       	mov	r9,99
8000d434:	00 00       	add	r0,r0
	...

8000d438 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
8000d438:	eb cd 40 80 	pushm	r7,lr
8000d43c:	1a 97       	mov	r7,sp
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
8000d43e:	48 38       	lddpc	r8,8000d448 <udc_get_string_serial_name+0x10>
	}
8000d440:	10 9c       	mov	r12,r8
8000d442:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d446:	00 00       	add	r0,r0
8000d448:	80 00       	ld.sh	r0,r0[0x0]
8000d44a:	d4 28       	*unknown*

8000d44c <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
8000d44c:	eb cd 40 80 	pushm	r7,lr
8000d450:	1a 97       	mov	r7,sp
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
8000d452:	48 b8       	lddpc	r8,8000d47c <udc_get_eof_conf+0x30>
8000d454:	70 08       	ld.w	r8,r8[0x0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000d456:	70 09       	ld.w	r9,r8[0x0]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000d458:	48 98       	lddpc	r8,8000d47c <udc_get_eof_conf+0x30>
8000d45a:	70 08       	ld.w	r8,r8[0x0]
8000d45c:	70 08       	ld.w	r8,r8[0x0]
8000d45e:	11 aa       	ld.ub	r10,r8[0x2]
8000d460:	a9 6a       	lsl	r10,0x8
8000d462:	11 b8       	ld.ub	r8,r8[0x3]
8000d464:	14 48       	or	r8,r10
8000d466:	5c 88       	casts.h	r8
8000d468:	5c 88       	casts.h	r8
8000d46a:	5c c8       	swap.bh	r8
8000d46c:	5c 88       	casts.h	r8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000d46e:	5c 78       	castu.h	r8
8000d470:	f2 08 00 08 	add	r8,r9,r8
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
8000d474:	10 9c       	mov	r12,r8
8000d476:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d47a:	00 00       	add	r0,r0
8000d47c:	00 00       	add	r0,r0
8000d47e:	08 58       	eor	r8,r4

8000d480 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
8000d480:	eb cd 40 80 	pushm	r7,lr
8000d484:	1a 97       	mov	r7,sp
8000d486:	20 3d       	sub	sp,12
8000d488:	ef 4c ff f8 	st.w	r7[-8],r12
8000d48c:	16 98       	mov	r8,r11
8000d48e:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
8000d492:	f0 1f 00 1d 	mcall	8000d504 <udc_next_desc_in_iface+0x84>
8000d496:	18 98       	mov	r8,r12
8000d498:	ef 48 ff fc 	st.w	r7[-4],r8
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000d49c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4a0:	11 88       	ld.ub	r8,r8[0x0]
8000d4a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d4a6:	f2 08 00 08 	add	r8,r9,r8
8000d4aa:	ef 48 ff f8 	st.w	r7[-8],r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000d4ae:	c1 c8       	rjmp	8000d4e6 <udc_next_desc_in_iface+0x66>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
8000d4b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4b4:	11 99       	ld.ub	r9,r8[0x1]
8000d4b6:	30 48       	mov	r8,4
8000d4b8:	f0 09 18 00 	cp.b	r9,r8
8000d4bc:	c1 d0       	breq	8000d4f6 <udc_next_desc_in_iface+0x76>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
8000d4be:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4c2:	11 98       	ld.ub	r8,r8[0x1]
8000d4c4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d4c8:	f0 09 18 00 	cp.b	r9,r8
8000d4cc:	c0 41       	brne	8000d4d4 <udc_next_desc_in_iface+0x54>
			return desc; // Specific descriptor found
8000d4ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4d2:	c1 48       	rjmp	8000d4fa <udc_next_desc_in_iface+0x7a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000d4d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4d8:	11 88       	ld.ub	r8,r8[0x0]
8000d4da:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d4de:	f2 08 00 08 	add	r8,r9,r8
8000d4e2:	ef 48 ff f8 	st.w	r7[-8],r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000d4e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d4ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4ee:	10 39       	cp.w	r9,r8
8000d4f0:	fe 9b ff e0 	brhi	8000d4b0 <udc_next_desc_in_iface+0x30>
8000d4f4:	c0 28       	rjmp	8000d4f8 <udc_next_desc_in_iface+0x78>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
8000d4f6:	d7 03       	nop
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
8000d4f8:	30 08       	mov	r8,0
}
8000d4fa:	10 9c       	mov	r12,r8
8000d4fc:	2f dd       	sub	sp,-12
8000d4fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d502:	00 00       	add	r0,r0
8000d504:	80 00       	ld.sh	r0,r0[0x0]
8000d506:	d4 4c       	*unknown*

8000d508 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
8000d508:	eb cd 40 80 	pushm	r7,lr
8000d50c:	1a 97       	mov	r7,sp
8000d50e:	20 3d       	sub	sp,12
8000d510:	18 99       	mov	r9,r12
8000d512:	16 98       	mov	r8,r11
8000d514:	ef 69 ff f8 	st.b	r7[-8],r9
8000d518:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
8000d51c:	4a 58       	lddpc	r8,8000d5b0 <udc_update_iface_desc+0xa8>
8000d51e:	11 88       	ld.ub	r8,r8[0x0]
8000d520:	58 08       	cp.w	r8,0
8000d522:	c0 31       	brne	8000d528 <udc_update_iface_desc+0x20>
		return false;
8000d524:	30 08       	mov	r8,0
8000d526:	c4 18       	rjmp	8000d5a8 <udc_update_iface_desc+0xa0>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000d528:	4a 38       	lddpc	r8,8000d5b4 <udc_update_iface_desc+0xac>
8000d52a:	70 08       	ld.w	r8,r8[0x0]
8000d52c:	70 08       	ld.w	r8,r8[0x0]
8000d52e:	11 c8       	ld.ub	r8,r8[0x4]
8000d530:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d534:	f0 09 18 00 	cp.b	r9,r8
8000d538:	c0 33       	brcs	8000d53e <udc_update_iface_desc+0x36>
		return false;
8000d53a:	30 08       	mov	r8,0
8000d53c:	c3 68       	rjmp	8000d5a8 <udc_update_iface_desc+0xa0>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
8000d53e:	49 e8       	lddpc	r8,8000d5b4 <udc_update_iface_desc+0xac>
8000d540:	70 08       	ld.w	r8,r8[0x0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000d542:	70 08       	ld.w	r8,r8[0x0]
8000d544:	10 99       	mov	r9,r8
8000d546:	49 d8       	lddpc	r8,8000d5b8 <udc_update_iface_desc+0xb0>
8000d548:	91 09       	st.w	r8[0x0],r9
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000d54a:	f0 1f 00 1d 	mcall	8000d5bc <udc_update_iface_desc+0xb4>
8000d54e:	18 98       	mov	r8,r12
8000d550:	ef 48 ff fc 	st.w	r7[-4],r8
	while (ptr_end_desc >
8000d554:	c2 28       	rjmp	8000d598 <udc_update_iface_desc+0x90>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000d556:	49 98       	lddpc	r8,8000d5b8 <udc_update_iface_desc+0xb0>
8000d558:	70 08       	ld.w	r8,r8[0x0]
8000d55a:	11 99       	ld.ub	r9,r8[0x1]
8000d55c:	30 48       	mov	r8,4
8000d55e:	f0 09 18 00 	cp.b	r9,r8
8000d562:	c1 31       	brne	8000d588 <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000d564:	49 58       	lddpc	r8,8000d5b8 <udc_update_iface_desc+0xb0>
8000d566:	70 08       	ld.w	r8,r8[0x0]
8000d568:	11 a8       	ld.ub	r8,r8[0x2]
8000d56a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d56e:	f0 09 18 00 	cp.b	r9,r8
8000d572:	c0 b1       	brne	8000d588 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
8000d574:	49 18       	lddpc	r8,8000d5b8 <udc_update_iface_desc+0xb0>
8000d576:	70 08       	ld.w	r8,r8[0x0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
					(setting_num ==
8000d578:	11 b8       	ld.ub	r8,r8[0x3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000d57a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d57e:	f0 09 18 00 	cp.b	r9,r8
8000d582:	c0 31       	brne	8000d588 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
8000d584:	30 18       	mov	r8,1
8000d586:	c1 18       	rjmp	8000d5a8 <udc_update_iface_desc+0xa0>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000d588:	48 c8       	lddpc	r8,8000d5b8 <udc_update_iface_desc+0xb0>
8000d58a:	70 09       	ld.w	r9,r8[0x0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
8000d58c:	48 b8       	lddpc	r8,8000d5b8 <udc_update_iface_desc+0xb0>
8000d58e:	70 08       	ld.w	r8,r8[0x0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000d590:	11 88       	ld.ub	r8,r8[0x0]
8000d592:	10 09       	add	r9,r8
8000d594:	48 98       	lddpc	r8,8000d5b8 <udc_update_iface_desc+0xb0>
8000d596:	91 09       	st.w	r8[0x0],r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000d598:	48 88       	lddpc	r8,8000d5b8 <udc_update_iface_desc+0xb0>
8000d59a:	70 08       	ld.w	r8,r8[0x0]
8000d59c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d5a0:	10 39       	cp.w	r9,r8
8000d5a2:	fe 9b ff da 	brhi	8000d556 <udc_update_iface_desc+0x4e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
8000d5a6:	30 08       	mov	r8,0
}
8000d5a8:	10 9c       	mov	r12,r8
8000d5aa:	2f dd       	sub	sp,-12
8000d5ac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d5b0:	00 00       	add	r0,r0
8000d5b2:	08 56       	eor	r6,r4
8000d5b4:	00 00       	add	r0,r0
8000d5b6:	08 58       	eor	r8,r4
8000d5b8:	00 00       	add	r0,r0
8000d5ba:	08 5c       	eor	r12,r4
8000d5bc:	80 00       	ld.sh	r0,r0[0x0]
8000d5be:	d4 4c       	*unknown*

8000d5c0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
8000d5c0:	eb cd 40 80 	pushm	r7,lr
8000d5c4:	1a 97       	mov	r7,sp
8000d5c6:	20 3d       	sub	sp,12
8000d5c8:	18 98       	mov	r8,r12
8000d5ca:	ef 68 ff f4 	st.b	r7[-12],r8
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000d5ce:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d5d2:	30 0b       	mov	r11,0
8000d5d4:	10 9c       	mov	r12,r8
8000d5d6:	f0 1f 00 25 	mcall	8000d668 <udc_iface_disable+0xa8>
8000d5da:	18 98       	mov	r8,r12
8000d5dc:	ec 18 00 01 	eorl	r8,0x1
8000d5e0:	5c 58       	castu.b	r8
8000d5e2:	c0 30       	breq	8000d5e8 <udc_iface_disable+0x28>
		return false;
8000d5e4:	30 08       	mov	r8,0
8000d5e6:	c3 d8       	rjmp	8000d660 <udc_iface_disable+0xa0>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000d5e8:	4a 18       	lddpc	r8,8000d66c <udc_iface_disable+0xac>
8000d5ea:	70 08       	ld.w	r8,r8[0x0]
8000d5ec:	70 19       	ld.w	r9,r8[0x4]
8000d5ee:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d5f2:	a3 68       	lsl	r8,0x2
8000d5f4:	f2 08 00 08 	add	r8,r9,r8
8000d5f8:	70 08       	ld.w	r8,r8[0x0]
8000d5fa:	ef 48 ff f8 	st.w	r7[-8],r8

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000d5fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d602:	70 38       	ld.w	r8,r8[0xc]
8000d604:	5d 18       	icall	r8
8000d606:	18 98       	mov	r8,r12
8000d608:	10 99       	mov	r9,r8
8000d60a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d60e:	12 9b       	mov	r11,r9
8000d610:	10 9c       	mov	r12,r8
8000d612:	f0 1f 00 16 	mcall	8000d668 <udc_iface_disable+0xa8>
8000d616:	18 98       	mov	r8,r12
8000d618:	ec 18 00 01 	eorl	r8,0x1
8000d61c:	5c 58       	castu.b	r8
8000d61e:	c0 30       	breq	8000d624 <udc_iface_disable+0x64>
		return false;
8000d620:	30 08       	mov	r8,0
8000d622:	c1 f8       	rjmp	8000d660 <udc_iface_disable+0xa0>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000d624:	49 38       	lddpc	r8,8000d670 <udc_iface_disable+0xb0>
8000d626:	70 08       	ld.w	r8,r8[0x0]
8000d628:	ef 48 ff fc 	st.w	r7[-4],r8
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000d62c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d630:	30 5b       	mov	r11,5
8000d632:	10 9c       	mov	r12,r8
8000d634:	f0 1f 00 10 	mcall	8000d674 <udc_iface_disable+0xb4>
8000d638:	18 98       	mov	r8,r12
8000d63a:	ef 48 ff fc 	st.w	r7[-4],r8
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
8000d63e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d642:	58 08       	cp.w	r8,0
8000d644:	c0 71       	brne	8000d652 <udc_iface_disable+0x92>
		}
	}
#endif

	// Disable interface
	udi_api->disable();
8000d646:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d64a:	70 18       	ld.w	r8,r8[0x4]
8000d64c:	5d 18       	icall	r8
	return true;
8000d64e:	30 18       	mov	r8,1
8000d650:	c0 88       	rjmp	8000d660 <udc_iface_disable+0xa0>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000d652:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d656:	11 a8       	ld.ub	r8,r8[0x2]
8000d658:	10 9c       	mov	r12,r8
8000d65a:	f0 1f 00 08 	mcall	8000d678 <udc_iface_disable+0xb8>
		}
8000d65e:	ce 7b       	rjmp	8000d62c <udc_iface_disable+0x6c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
8000d660:	10 9c       	mov	r12,r8
8000d662:	2f dd       	sub	sp,-12
8000d664:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d668:	80 00       	ld.sh	r0,r0[0x0]
8000d66a:	d5 08       	*unknown*
8000d66c:	00 00       	add	r0,r0
8000d66e:	08 58       	eor	r8,r4
8000d670:	00 00       	add	r0,r0
8000d672:	08 5c       	eor	r12,r4
8000d674:	80 00       	ld.sh	r0,r0[0x0]
8000d676:	d4 80       	acall	0x120
8000d678:	80 00       	ld.sh	r0,r0[0x0]
8000d67a:	a5 7c       	lsl	r12,0x5

8000d67c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
8000d67c:	eb cd 40 80 	pushm	r7,lr
8000d680:	1a 97       	mov	r7,sp
8000d682:	20 3d       	sub	sp,12
8000d684:	18 99       	mov	r9,r12
8000d686:	16 98       	mov	r8,r11
8000d688:	ef 69 ff f8 	st.b	r7[-8],r9
8000d68c:	ef 68 ff f4 	st.b	r7[-12],r8
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
8000d690:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d694:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d698:	12 9b       	mov	r11,r9
8000d69a:	10 9c       	mov	r12,r8
8000d69c:	f0 1f 00 25 	mcall	8000d730 <udc_iface_enable+0xb4>
8000d6a0:	18 98       	mov	r8,r12
8000d6a2:	ec 18 00 01 	eorl	r8,0x1
8000d6a6:	5c 58       	castu.b	r8
8000d6a8:	c0 30       	breq	8000d6ae <udc_iface_enable+0x32>
		return false;
8000d6aa:	30 08       	mov	r8,0
8000d6ac:	c3 e8       	rjmp	8000d728 <udc_iface_enable+0xac>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000d6ae:	4a 28       	lddpc	r8,8000d734 <udc_iface_enable+0xb8>
8000d6b0:	70 08       	ld.w	r8,r8[0x0]
8000d6b2:	ef 48 ff fc 	st.w	r7[-4],r8
8000d6b6:	c0 28       	rjmp	8000d6ba <udc_iface_enable+0x3e>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
		}
	}
8000d6b8:	d7 03       	nop

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000d6ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d6be:	30 5b       	mov	r11,5
8000d6c0:	10 9c       	mov	r12,r8
8000d6c2:	f0 1f 00 1e 	mcall	8000d738 <udc_iface_enable+0xbc>
8000d6c6:	18 98       	mov	r8,r12
8000d6c8:	ef 48 ff fc 	st.w	r7[-4],r8
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
8000d6cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d6d0:	58 08       	cp.w	r8,0
8000d6d2:	c0 e1       	brne	8000d6ee <udc_iface_enable+0x72>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000d6d4:	49 a8       	lddpc	r8,8000d73c <udc_iface_enable+0xc0>
8000d6d6:	70 08       	ld.w	r8,r8[0x0]
8000d6d8:	70 19       	ld.w	r9,r8[0x4]
8000d6da:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d6de:	a3 68       	lsl	r8,0x2
8000d6e0:	f2 08 00 08 	add	r8,r9,r8
8000d6e4:	70 08       	ld.w	r8,r8[0x0]
8000d6e6:	70 08       	ld.w	r8,r8[0x0]
8000d6e8:	5d 18       	icall	r8
8000d6ea:	18 98       	mov	r8,r12
8000d6ec:	c1 e8       	rjmp	8000d728 <udc_iface_enable+0xac>
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
8000d6ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d6f2:	11 c9       	ld.ub	r9,r8[0x4]
8000d6f4:	a9 69       	lsl	r9,0x8
8000d6f6:	11 d8       	ld.ub	r8,r8[0x5]
8000d6f8:	12 48       	or	r8,r9
8000d6fa:	5c 88       	casts.h	r8
8000d6fc:	5c 88       	casts.h	r8
8000d6fe:	5c c8       	swap.bh	r8
8000d700:	5c 88       	casts.h	r8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000d702:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
				ep_desc->bmAttributes,
8000d706:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d70a:	11 b8       	ld.ub	r8,r8[0x3]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000d70c:	10 99       	mov	r9,r8
8000d70e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d712:	11 a8       	ld.ub	r8,r8[0x2]
8000d714:	12 9b       	mov	r11,r9
8000d716:	10 9c       	mov	r12,r8
8000d718:	f0 1f 00 0a 	mcall	8000d740 <udc_iface_enable+0xc4>
8000d71c:	18 98       	mov	r8,r12
8000d71e:	ec 18 00 01 	eorl	r8,0x1
8000d722:	5c 58       	castu.b	r8
8000d724:	cc a0       	breq	8000d6b8 <udc_iface_enable+0x3c>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
8000d726:	30 08       	mov	r8,0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
8000d728:	10 9c       	mov	r12,r8
8000d72a:	2f dd       	sub	sp,-12
8000d72c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d730:	80 00       	ld.sh	r0,r0[0x0]
8000d732:	d5 08       	*unknown*
8000d734:	00 00       	add	r0,r0
8000d736:	08 5c       	eor	r12,r4
8000d738:	80 00       	ld.sh	r0,r0[0x0]
8000d73a:	d4 80       	acall	0x120
8000d73c:	00 00       	add	r0,r0
8000d73e:	08 58       	eor	r8,r4
8000d740:	80 00       	ld.sh	r0,r0[0x0]
8000d742:	a2 2c       	st.h	r1[0x4],r12

8000d744 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
8000d744:	eb cd 40 80 	pushm	r7,lr
8000d748:	1a 97       	mov	r7,sp
	udd_enable();
8000d74a:	f0 1f 00 03 	mcall	8000d754 <udc_start+0x10>
}
8000d74e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d752:	00 00       	add	r0,r0
8000d754:	80 00       	ld.sh	r0,r0[0x0]
8000d756:	9f 58       	st.w	pc[0x14],r8

8000d758 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
8000d758:	eb cd 40 80 	pushm	r7,lr
8000d75c:	1a 97       	mov	r7,sp
8000d75e:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000d760:	49 38       	lddpc	r8,8000d7ac <udc_reset+0x54>
8000d762:	11 88       	ld.ub	r8,r8[0x0]
8000d764:	58 08       	cp.w	r8,0
8000d766:	c1 80       	breq	8000d796 <udc_reset+0x3e>
		for (iface_num = 0;
8000d768:	30 08       	mov	r8,0
8000d76a:	ef 68 ff ff 	st.b	r7[-1],r8
8000d76e:	c0 b8       	rjmp	8000d784 <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
8000d770:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d774:	10 9c       	mov	r12,r8
8000d776:	f0 1f 00 0f 	mcall	8000d7b0 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000d77a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d77e:	2f f8       	sub	r8,-1
8000d780:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000d784:	48 c8       	lddpc	r8,8000d7b4 <udc_reset+0x5c>
8000d786:	70 08       	ld.w	r8,r8[0x0]
8000d788:	70 08       	ld.w	r8,r8[0x0]
8000d78a:	11 c8       	ld.ub	r8,r8[0x4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000d78c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d790:	f0 09 18 00 	cp.b	r9,r8
8000d794:	ce e3       	brcs	8000d770 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
8000d796:	48 69       	lddpc	r9,8000d7ac <udc_reset+0x54>
8000d798:	30 08       	mov	r8,0
8000d79a:	b2 88       	st.b	r9[0x0],r8
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
8000d79c:	48 79       	lddpc	r9,8000d7b8 <udc_reset+0x60>
8000d79e:	e0 68 01 00 	mov	r8,256
8000d7a2:	b2 08       	st.h	r9[0x0],r8
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
8000d7a4:	2f fd       	sub	sp,-4
8000d7a6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d7aa:	00 00       	add	r0,r0
8000d7ac:	00 00       	add	r0,r0
8000d7ae:	08 56       	eor	r6,r4
8000d7b0:	80 00       	ld.sh	r0,r0[0x0]
8000d7b2:	d5 c0       	acall	0x170
8000d7b4:	00 00       	add	r0,r0
8000d7b6:	08 58       	eor	r8,r4
8000d7b8:	00 00       	add	r0,r0
8000d7ba:	08 54       	eor	r4,r4

8000d7bc <udc_sof_notify>:

void udc_sof_notify(void)
{
8000d7bc:	eb cd 40 80 	pushm	r7,lr
8000d7c0:	1a 97       	mov	r7,sp
8000d7c2:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000d7c4:	49 88       	lddpc	r8,8000d824 <udc_sof_notify+0x68>
8000d7c6:	11 88       	ld.ub	r8,r8[0x0]
8000d7c8:	58 08       	cp.w	r8,0
8000d7ca:	c2 a0       	breq	8000d81e <udc_sof_notify+0x62>
		for (iface_num = 0;
8000d7cc:	30 08       	mov	r8,0
8000d7ce:	ef 68 ff ff 	st.b	r7[-1],r8
8000d7d2:	c1 d8       	rjmp	8000d80c <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
8000d7d4:	49 58       	lddpc	r8,8000d828 <udc_sof_notify+0x6c>
8000d7d6:	70 08       	ld.w	r8,r8[0x0]
8000d7d8:	70 19       	ld.w	r9,r8[0x4]
8000d7da:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d7de:	a3 68       	lsl	r8,0x2
8000d7e0:	f2 08 00 08 	add	r8,r9,r8
8000d7e4:	70 08       	ld.w	r8,r8[0x0]
8000d7e6:	70 48       	ld.w	r8,r8[0x10]
8000d7e8:	58 08       	cp.w	r8,0
8000d7ea:	c0 c0       	breq	8000d802 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
8000d7ec:	48 f8       	lddpc	r8,8000d828 <udc_sof_notify+0x6c>
8000d7ee:	70 08       	ld.w	r8,r8[0x0]
8000d7f0:	70 19       	ld.w	r9,r8[0x4]
8000d7f2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d7f6:	a3 68       	lsl	r8,0x2
8000d7f8:	f2 08 00 08 	add	r8,r9,r8
8000d7fc:	70 08       	ld.w	r8,r8[0x0]
8000d7fe:	70 48       	ld.w	r8,r8[0x10]
8000d800:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000d802:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d806:	2f f8       	sub	r8,-1
8000d808:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000d80c:	48 78       	lddpc	r8,8000d828 <udc_sof_notify+0x6c>
8000d80e:	70 08       	ld.w	r8,r8[0x0]
8000d810:	70 08       	ld.w	r8,r8[0x0]
8000d812:	11 c8       	ld.ub	r8,r8[0x4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000d814:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d818:	f0 09 18 00 	cp.b	r9,r8
8000d81c:	cd c3       	brcs	8000d7d4 <udc_sof_notify+0x18>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
8000d81e:	2f fd       	sub	sp,-4
8000d820:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d824:	00 00       	add	r0,r0
8000d826:	08 56       	eor	r6,r4
8000d828:	00 00       	add	r0,r0
8000d82a:	08 58       	eor	r8,r4

8000d82c <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
8000d82c:	eb cd 40 80 	pushm	r7,lr
8000d830:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
8000d832:	48 98       	lddpc	r8,8000d854 <udc_req_std_dev_get_status+0x28>
8000d834:	90 39       	ld.sh	r9,r8[0x6]
8000d836:	30 28       	mov	r8,2
8000d838:	f0 09 19 00 	cp.h	r9,r8
8000d83c:	c0 30       	breq	8000d842 <udc_req_std_dev_get_status+0x16>
		return false;
8000d83e:	30 08       	mov	r8,0
8000d840:	c0 78       	rjmp	8000d84e <udc_req_std_dev_get_status+0x22>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
8000d842:	48 68       	lddpc	r8,8000d858 <udc_req_std_dev_get_status+0x2c>
8000d844:	30 2b       	mov	r11,2
8000d846:	10 9c       	mov	r12,r8
8000d848:	f0 1f 00 05 	mcall	8000d85c <udc_req_std_dev_get_status+0x30>
			sizeof(udc_device_status));
	return true;
8000d84c:	30 18       	mov	r8,1
}
8000d84e:	10 9c       	mov	r12,r8
8000d850:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d854:	00 00       	add	r0,r0
8000d856:	10 0c       	add	r12,r8
8000d858:	00 00       	add	r0,r0
8000d85a:	08 54       	eor	r4,r4
8000d85c:	80 00       	ld.sh	r0,r0[0x0]
8000d85e:	a2 00       	st.h	r1[0x0],r0

8000d860 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
8000d860:	eb cd 40 80 	pushm	r7,lr
8000d864:	1a 97       	mov	r7,sp
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
8000d866:	49 18       	lddpc	r8,8000d8a8 <udc_req_std_ep_get_status+0x48>
8000d868:	90 39       	ld.sh	r9,r8[0x6]
8000d86a:	30 28       	mov	r8,2
8000d86c:	f0 09 19 00 	cp.h	r9,r8
8000d870:	c0 30       	breq	8000d876 <udc_req_std_ep_get_status+0x16>
		return false;
8000d872:	30 08       	mov	r8,0
8000d874:	c1 68       	rjmp	8000d8a0 <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000d876:	48 d8       	lddpc	r8,8000d8a8 <udc_req_std_ep_get_status+0x48>
8000d878:	90 28       	ld.sh	r8,r8[0x4]
8000d87a:	5c 58       	castu.b	r8
8000d87c:	10 9c       	mov	r12,r8
8000d87e:	f0 1f 00 0c 	mcall	8000d8ac <udc_req_std_ep_get_status+0x4c>
8000d882:	18 98       	mov	r8,r12
8000d884:	58 08       	cp.w	r8,0
8000d886:	c0 40       	breq	8000d88e <udc_req_std_ep_get_status+0x2e>
8000d888:	e0 68 01 00 	mov	r8,256
8000d88c:	c0 28       	rjmp	8000d890 <udc_req_std_ep_get_status+0x30>
8000d88e:	30 08       	mov	r8,0
8000d890:	48 89       	lddpc	r9,8000d8b0 <udc_req_std_ep_get_status+0x50>
8000d892:	b2 08       	st.h	r9[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
8000d894:	48 78       	lddpc	r8,8000d8b0 <udc_req_std_ep_get_status+0x50>
8000d896:	30 2b       	mov	r11,2
8000d898:	10 9c       	mov	r12,r8
8000d89a:	f0 1f 00 07 	mcall	8000d8b4 <udc_req_std_ep_get_status+0x54>
			sizeof(udc_ep_status));
	return true;
8000d89e:	30 18       	mov	r8,1
}
8000d8a0:	10 9c       	mov	r12,r8
8000d8a2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d8a6:	00 00       	add	r0,r0
8000d8a8:	00 00       	add	r0,r0
8000d8aa:	10 0c       	add	r12,r8
8000d8ac:	80 00       	ld.sh	r0,r0[0x0]
8000d8ae:	a6 18       	st.h	r3[0x2],r8
8000d8b0:	00 00       	add	r0,r0
8000d8b2:	08 62       	and	r2,r4
8000d8b4:	80 00       	ld.sh	r0,r0[0x0]
8000d8b6:	a2 00       	st.h	r1[0x0],r0

8000d8b8 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
8000d8b8:	eb cd 40 80 	pushm	r7,lr
8000d8bc:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d8be:	48 d8       	lddpc	r8,8000d8f0 <udc_req_std_dev_clear_feature+0x38>
8000d8c0:	90 38       	ld.sh	r8,r8[0x6]
8000d8c2:	58 08       	cp.w	r8,0
8000d8c4:	c0 30       	breq	8000d8ca <udc_req_std_dev_clear_feature+0x12>
		return false;
8000d8c6:	30 08       	mov	r8,0
8000d8c8:	c1 08       	rjmp	8000d8e8 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000d8ca:	48 a8       	lddpc	r8,8000d8f0 <udc_req_std_dev_clear_feature+0x38>
8000d8cc:	90 19       	ld.sh	r9,r8[0x2]
8000d8ce:	30 18       	mov	r8,1
8000d8d0:	f0 09 19 00 	cp.h	r9,r8
8000d8d4:	c0 91       	brne	8000d8e6 <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
8000d8d6:	48 88       	lddpc	r8,8000d8f4 <udc_req_std_dev_clear_feature+0x3c>
8000d8d8:	90 08       	ld.sh	r8,r8[0x0]
8000d8da:	a9 d8       	cbr	r8,0x9
8000d8dc:	5c 88       	casts.h	r8
8000d8de:	48 69       	lddpc	r9,8000d8f4 <udc_req_std_dev_clear_feature+0x3c>
8000d8e0:	b2 08       	st.h	r9[0x0],r8
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
8000d8e2:	30 18       	mov	r8,1
8000d8e4:	c0 28       	rjmp	8000d8e8 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
8000d8e6:	30 08       	mov	r8,0
}
8000d8e8:	10 9c       	mov	r12,r8
8000d8ea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d8ee:	00 00       	add	r0,r0
8000d8f0:	00 00       	add	r0,r0
8000d8f2:	10 0c       	add	r12,r8
8000d8f4:	00 00       	add	r0,r0
8000d8f6:	08 54       	eor	r4,r4

8000d8f8 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
8000d8f8:	eb cd 40 80 	pushm	r7,lr
8000d8fc:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d8fe:	48 c8       	lddpc	r8,8000d92c <udc_req_std_ep_clear_feature+0x34>
8000d900:	90 38       	ld.sh	r8,r8[0x6]
8000d902:	58 08       	cp.w	r8,0
8000d904:	c0 30       	breq	8000d90a <udc_req_std_ep_clear_feature+0x12>
		return false;
8000d906:	30 08       	mov	r8,0
8000d908:	c0 e8       	rjmp	8000d924 <udc_req_std_ep_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000d90a:	48 98       	lddpc	r8,8000d92c <udc_req_std_ep_clear_feature+0x34>
8000d90c:	90 18       	ld.sh	r8,r8[0x2]
8000d90e:	58 08       	cp.w	r8,0
8000d910:	c0 91       	brne	8000d922 <udc_req_std_ep_clear_feature+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000d912:	48 78       	lddpc	r8,8000d92c <udc_req_std_ep_clear_feature+0x34>
8000d914:	90 28       	ld.sh	r8,r8[0x4]
8000d916:	5c 58       	castu.b	r8
8000d918:	10 9c       	mov	r12,r8
8000d91a:	f0 1f 00 06 	mcall	8000d930 <udc_req_std_ep_clear_feature+0x38>
8000d91e:	18 98       	mov	r8,r12
8000d920:	c0 28       	rjmp	8000d924 <udc_req_std_ep_clear_feature+0x2c>
	}
	return false;
8000d922:	30 08       	mov	r8,0
}
8000d924:	10 9c       	mov	r12,r8
8000d926:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d92a:	00 00       	add	r0,r0
8000d92c:	00 00       	add	r0,r0
8000d92e:	10 0c       	add	r12,r8
8000d930:	80 00       	ld.sh	r0,r0[0x0]
8000d932:	a7 5c       	asr	r12,0x7

8000d934 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
8000d934:	eb cd 40 80 	pushm	r7,lr
8000d938:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d93a:	4a 78       	lddpc	r8,8000d9d4 <udc_req_std_dev_set_feature+0xa0>
8000d93c:	90 38       	ld.sh	r8,r8[0x6]
8000d93e:	58 08       	cp.w	r8,0
8000d940:	c0 30       	breq	8000d946 <udc_req_std_dev_set_feature+0x12>
		return false;
8000d942:	30 08       	mov	r8,0
8000d944:	c4 48       	rjmp	8000d9cc <udc_req_std_dev_set_feature+0x98>
	}

	switch (udd_g_ctrlreq.req.wValue) {
8000d946:	4a 48       	lddpc	r8,8000d9d4 <udc_req_std_dev_set_feature+0xa0>
8000d948:	90 18       	ld.sh	r8,r8[0x2]
8000d94a:	5c 78       	castu.h	r8
8000d94c:	58 18       	cp.w	r8,1
8000d94e:	c0 40       	breq	8000d956 <udc_req_std_dev_set_feature+0x22>
8000d950:	58 28       	cp.w	r8,2
8000d952:	c0 40       	breq	8000d95a <udc_req_std_dev_set_feature+0x26>
8000d954:	c3 b8       	rjmp	8000d9ca <udc_req_std_dev_set_feature+0x96>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
8000d956:	30 08       	mov	r8,0
8000d958:	c3 a8       	rjmp	8000d9cc <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
8000d95a:	f0 1f 00 20 	mcall	8000d9d8 <udc_req_std_dev_set_feature+0xa4>
8000d95e:	18 98       	mov	r8,r12
8000d960:	ec 18 00 01 	eorl	r8,0x1
8000d964:	5c 58       	castu.b	r8
8000d966:	c2 f1       	brne	8000d9c4 <udc_req_std_dev_set_feature+0x90>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
8000d968:	49 b8       	lddpc	r8,8000d9d4 <udc_req_std_dev_set_feature+0xa0>
8000d96a:	90 28       	ld.sh	r8,r8[0x4]
8000d96c:	5c 78       	castu.h	r8
8000d96e:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d972:	c2 b1       	brne	8000d9c8 <udc_req_std_dev_set_feature+0x94>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
8000d974:	f0 1f 00 1a 	mcall	8000d9dc <udc_req_std_dev_set_feature+0xa8>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
8000d978:	49 78       	lddpc	r8,8000d9d4 <udc_req_std_dev_set_feature+0xa0>
8000d97a:	90 28       	ld.sh	r8,r8[0x4]
8000d97c:	5c 78       	castu.h	r8
8000d97e:	a9 88       	lsr	r8,0x8
8000d980:	5c 88       	casts.h	r8
8000d982:	5c 78       	castu.h	r8
8000d984:	58 28       	cp.w	r8,2
8000d986:	c1 00       	breq	8000d9a6 <udc_req_std_dev_set_feature+0x72>
8000d988:	e0 89 00 05 	brgt	8000d992 <udc_req_std_dev_set_feature+0x5e>
8000d98c:	58 18       	cp.w	r8,1
8000d98e:	c0 70       	breq	8000d99c <udc_req_std_dev_set_feature+0x68>
8000d990:	c1 d8       	rjmp	8000d9ca <udc_req_std_dev_set_feature+0x96>
8000d992:	58 38       	cp.w	r8,3
8000d994:	c0 e0       	breq	8000d9b0 <udc_req_std_dev_set_feature+0x7c>
8000d996:	58 48       	cp.w	r8,4
8000d998:	c1 10       	breq	8000d9ba <udc_req_std_dev_set_feature+0x86>
8000d99a:	c1 88       	rjmp	8000d9ca <udc_req_std_dev_set_feature+0x96>
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
8000d99c:	48 e8       	lddpc	r8,8000d9d4 <udc_req_std_dev_set_feature+0xa0>
8000d99e:	49 19       	lddpc	r9,8000d9e0 <udc_req_std_dev_set_feature+0xac>
8000d9a0:	91 49       	st.w	r8[0x10],r9
			return true;
8000d9a2:	30 18       	mov	r8,1
8000d9a4:	c1 48       	rjmp	8000d9cc <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
8000d9a6:	48 c8       	lddpc	r8,8000d9d4 <udc_req_std_dev_set_feature+0xa0>
8000d9a8:	48 f9       	lddpc	r9,8000d9e4 <udc_req_std_dev_set_feature+0xb0>
8000d9aa:	91 49       	st.w	r8[0x10],r9
			return true;
8000d9ac:	30 18       	mov	r8,1
8000d9ae:	c0 f8       	rjmp	8000d9cc <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
8000d9b0:	48 98       	lddpc	r8,8000d9d4 <udc_req_std_dev_set_feature+0xa0>
8000d9b2:	48 e9       	lddpc	r9,8000d9e8 <udc_req_std_dev_set_feature+0xb4>
8000d9b4:	91 49       	st.w	r8[0x10],r9
			return true;
8000d9b6:	30 18       	mov	r8,1
8000d9b8:	c0 a8       	rjmp	8000d9cc <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
8000d9ba:	48 78       	lddpc	r8,8000d9d4 <udc_req_std_dev_set_feature+0xa0>
8000d9bc:	48 c9       	lddpc	r9,8000d9ec <udc_req_std_dev_set_feature+0xb8>
8000d9be:	91 49       	st.w	r8[0x10],r9
			return true;
8000d9c0:	30 18       	mov	r8,1
8000d9c2:	c0 58       	rjmp	8000d9cc <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
			break;
8000d9c4:	d7 03       	nop
8000d9c6:	c0 28       	rjmp	8000d9ca <udc_req_std_dev_set_feature+0x96>
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
			break;
8000d9c8:	d7 03       	nop
		break;
#endif
	default:
		break;
	}
	return false;
8000d9ca:	30 08       	mov	r8,0
}
8000d9cc:	10 9c       	mov	r12,r8
8000d9ce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d9d2:	00 00       	add	r0,r0
8000d9d4:	00 00       	add	r0,r0
8000d9d6:	10 0c       	add	r12,r8
8000d9d8:	80 00       	ld.sh	r0,r0[0x0]
8000d9da:	a1 64       	lsl	r4,0x0
8000d9dc:	80 00       	ld.sh	r0,r0[0x0]
8000d9de:	d7 58       	*unknown*
8000d9e0:	80 00       	ld.sh	r0,r0[0x0]
8000d9e2:	ab 20       	st.d	r5++,r0
8000d9e4:	80 00       	ld.sh	r0,r0[0x0]
8000d9e6:	ab 4a       	asr	r10,0xa
8000d9e8:	80 00       	ld.sh	r0,r0[0x0]
8000d9ea:	ab 74       	lsl	r4,0xb
8000d9ec:	80 00       	ld.sh	r0,r0[0x0]
8000d9ee:	ab 90       	lsr	r0,0xb

8000d9f0 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
8000d9f0:	eb cd 40 80 	pushm	r7,lr
8000d9f4:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d9f6:	48 f8       	lddpc	r8,8000da30 <udc_req_std_ep_set_feature+0x40>
8000d9f8:	90 38       	ld.sh	r8,r8[0x6]
8000d9fa:	58 08       	cp.w	r8,0
8000d9fc:	c0 30       	breq	8000da02 <udc_req_std_ep_set_feature+0x12>
		return false;
8000d9fe:	30 08       	mov	r8,0
8000da00:	c1 48       	rjmp	8000da28 <udc_req_std_ep_set_feature+0x38>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000da02:	48 c8       	lddpc	r8,8000da30 <udc_req_std_ep_set_feature+0x40>
8000da04:	90 18       	ld.sh	r8,r8[0x2]
8000da06:	58 08       	cp.w	r8,0
8000da08:	c0 f1       	brne	8000da26 <udc_req_std_ep_set_feature+0x36>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
8000da0a:	48 a8       	lddpc	r8,8000da30 <udc_req_std_ep_set_feature+0x40>
8000da0c:	90 28       	ld.sh	r8,r8[0x4]
8000da0e:	5c 58       	castu.b	r8
8000da10:	10 9c       	mov	r12,r8
8000da12:	f0 1f 00 09 	mcall	8000da34 <udc_req_std_ep_set_feature+0x44>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000da16:	48 78       	lddpc	r8,8000da30 <udc_req_std_ep_set_feature+0x40>
8000da18:	90 28       	ld.sh	r8,r8[0x4]
8000da1a:	5c 58       	castu.b	r8
8000da1c:	10 9c       	mov	r12,r8
8000da1e:	f0 1f 00 07 	mcall	8000da38 <udc_req_std_ep_set_feature+0x48>
8000da22:	18 98       	mov	r8,r12
8000da24:	c0 28       	rjmp	8000da28 <udc_req_std_ep_set_feature+0x38>
	}
	return false;
8000da26:	30 08       	mov	r8,0
}
8000da28:	10 9c       	mov	r12,r8
8000da2a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000da2e:	00 00       	add	r0,r0
8000da30:	00 00       	add	r0,r0
8000da32:	10 0c       	add	r12,r8
8000da34:	80 00       	ld.sh	r0,r0[0x0]
8000da36:	a9 c0       	cbr	r0,0x8
8000da38:	80 00       	ld.sh	r0,r0[0x0]
8000da3a:	a6 48       	st.h	r3[0x8],r8

8000da3c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
8000da3c:	eb cd 40 80 	pushm	r7,lr
8000da40:	1a 97       	mov	r7,sp
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
8000da42:	48 68       	lddpc	r8,8000da58 <udc_valid_address+0x1c>
8000da44:	90 18       	ld.sh	r8,r8[0x2]
8000da46:	5c 58       	castu.b	r8
8000da48:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000da4c:	10 9c       	mov	r12,r8
8000da4e:	f0 1f 00 04 	mcall	8000da5c <udc_valid_address+0x20>
}
8000da52:	e3 cd 80 80 	ldm	sp++,r7,pc
8000da56:	00 00       	add	r0,r0
8000da58:	00 00       	add	r0,r0
8000da5a:	10 0c       	add	r12,r8
8000da5c:	80 00       	ld.sh	r0,r0[0x0]
8000da5e:	a1 80       	lsr	r0,0x0

8000da60 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
8000da60:	eb cd 40 80 	pushm	r7,lr
8000da64:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000da66:	48 78       	lddpc	r8,8000da80 <udc_req_std_dev_set_address+0x20>
8000da68:	90 38       	ld.sh	r8,r8[0x6]
8000da6a:	58 08       	cp.w	r8,0
8000da6c:	c0 30       	breq	8000da72 <udc_req_std_dev_set_address+0x12>
		return false;
8000da6e:	30 08       	mov	r8,0
8000da70:	c0 58       	rjmp	8000da7a <udc_req_std_dev_set_address+0x1a>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000da72:	48 48       	lddpc	r8,8000da80 <udc_req_std_dev_set_address+0x20>
8000da74:	48 49       	lddpc	r9,8000da84 <udc_req_std_dev_set_address+0x24>
8000da76:	91 49       	st.w	r8[0x10],r9
	return true;
8000da78:	30 18       	mov	r8,1
}
8000da7a:	10 9c       	mov	r12,r8
8000da7c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000da80:	00 00       	add	r0,r0
8000da82:	10 0c       	add	r12,r8
8000da84:	80 00       	ld.sh	r0,r0[0x0]
8000da86:	da 3c       	*unknown*

8000da88 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
8000da88:	eb cd 40 80 	pushm	r7,lr
8000da8c:	1a 97       	mov	r7,sp
8000da8e:	20 3d       	sub	sp,12
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
8000da90:	30 08       	mov	r8,0
8000da92:	ef 68 ff ff 	st.b	r7[-1],r8

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
8000da96:	4b 68       	lddpc	r8,8000db6c <udc_req_std_dev_get_str_desc+0xe4>
8000da98:	90 18       	ld.sh	r8,r8[0x2]
8000da9a:	5c 78       	castu.h	r8
8000da9c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000daa0:	58 18       	cp.w	r8,1
8000daa2:	c1 00       	breq	8000dac2 <udc_req_std_dev_get_str_desc+0x3a>
8000daa4:	e0 89 00 05 	brgt	8000daae <udc_req_std_dev_get_str_desc+0x26>
8000daa8:	58 08       	cp.w	r8,0
8000daaa:	c0 70       	breq	8000dab8 <udc_req_std_dev_get_str_desc+0x30>
8000daac:	c2 28       	rjmp	8000daf0 <udc_req_std_dev_get_str_desc+0x68>
8000daae:	58 28       	cp.w	r8,2
8000dab0:	c1 00       	breq	8000dad0 <udc_req_std_dev_get_str_desc+0x48>
8000dab2:	58 38       	cp.w	r8,3
8000dab4:	c1 50       	breq	8000dade <udc_req_std_dev_get_str_desc+0x56>
8000dab6:	c1 d8       	rjmp	8000daf0 <udc_req_std_dev_get_str_desc+0x68>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
8000dab8:	30 4b       	mov	r11,4
8000daba:	4a ec       	lddpc	r12,8000db70 <udc_req_std_dev_get_str_desc+0xe8>
8000dabc:	f0 1f 00 2e 	mcall	8000db74 <udc_req_std_dev_get_str_desc+0xec>
				sizeof(udc_string_desc_languageid));
		break;
8000dac0:	c1 a8       	rjmp	8000daf4 <udc_req_std_dev_get_str_desc+0x6c>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
8000dac2:	30 78       	mov	r8,7
8000dac4:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_manufacturer_name;
8000dac8:	4a c8       	lddpc	r8,8000db78 <udc_req_std_dev_get_str_desc+0xf0>
8000daca:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000dace:	c1 38       	rjmp	8000daf4 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
8000dad0:	30 78       	mov	r8,7
8000dad2:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_product_name;
8000dad6:	4a a8       	lddpc	r8,8000db7c <udc_req_std_dev_get_str_desc+0xf4>
8000dad8:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000dadc:	c0 c8       	rjmp	8000daf4 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
8000dade:	30 c8       	mov	r8,12
8000dae0:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_get_string_serial_name();
8000dae4:	f0 1f 00 27 	mcall	8000db80 <udc_req_std_dev_get_str_desc+0xf8>
8000dae8:	18 98       	mov	r8,r12
8000daea:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000daee:	c0 38       	rjmp	8000daf4 <udc_req_std_dev_get_str_desc+0x6c>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
8000daf0:	30 08       	mov	r8,0
8000daf2:	c3 88       	rjmp	8000db62 <udc_req_std_dev_get_str_desc+0xda>
	}

	if (str_length) {
8000daf4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000daf8:	30 08       	mov	r8,0
8000dafa:	f0 09 18 00 	cp.b	r9,r8
8000dafe:	c3 10       	breq	8000db60 <udc_req_std_dev_get_str_desc+0xd8>
		for(i = 0; i < str_length; i++) {
8000db00:	30 08       	mov	r8,0
8000db02:	ef 68 ff f7 	st.b	r7[-9],r8
8000db06:	c1 88       	rjmp	8000db36 <udc_req_std_dev_get_str_desc+0xae>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
8000db08:	ef 3b ff f7 	ld.ub	r11,r7[-9]
8000db0c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000db10:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000db14:	f2 08 00 08 	add	r8,r9,r8
8000db18:	11 88       	ld.ub	r8,r8[0x0]
8000db1a:	5c c8       	swap.bh	r8
8000db1c:	5c 88       	casts.h	r8
8000db1e:	10 99       	mov	r9,r8
8000db20:	49 9a       	lddpc	r10,8000db84 <udc_req_std_dev_get_str_desc+0xfc>
8000db22:	f6 08 15 01 	lsl	r8,r11,0x1
8000db26:	f4 08 00 08 	add	r8,r10,r8
8000db2a:	b0 19       	st.h	r8[0x2],r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
8000db2c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000db30:	2f f8       	sub	r8,-1
8000db32:	ef 68 ff f7 	st.b	r7[-9],r8
8000db36:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000db3a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000db3e:	f0 09 18 00 	cp.b	r9,r8
8000db42:	ce 33       	brcs	8000db08 <udc_req_std_dev_get_str_desc+0x80>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
8000db44:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000db48:	2f f8       	sub	r8,-1
8000db4a:	5c 58       	castu.b	r8
8000db4c:	a1 78       	lsl	r8,0x1
8000db4e:	5c 58       	castu.b	r8
8000db50:	48 d9       	lddpc	r9,8000db84 <udc_req_std_dev_get_str_desc+0xfc>
8000db52:	b2 88       	st.b	r9[0x0],r8
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
8000db54:	48 c8       	lddpc	r8,8000db84 <udc_req_std_dev_get_str_desc+0xfc>
8000db56:	11 88       	ld.ub	r8,r8[0x0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
8000db58:	10 9b       	mov	r11,r8
8000db5a:	48 bc       	lddpc	r12,8000db84 <udc_req_std_dev_get_str_desc+0xfc>
8000db5c:	f0 1f 00 06 	mcall	8000db74 <udc_req_std_dev_get_str_desc+0xec>
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
8000db60:	30 18       	mov	r8,1
}
8000db62:	10 9c       	mov	r12,r8
8000db64:	2f dd       	sub	sp,-12
8000db66:	e3 cd 80 80 	ldm	sp++,r7,pc
8000db6a:	00 00       	add	r0,r0
8000db6c:	00 00       	add	r0,r0
8000db6e:	10 0c       	add	r12,r8
8000db70:	00 00       	add	r0,r0
8000db72:	02 14       	sub	r4,r1
8000db74:	80 00       	ld.sh	r0,r0[0x0]
8000db76:	a2 00       	st.h	r1[0x0],r0
8000db78:	00 00       	add	r0,r0
8000db7a:	02 18       	sub	r8,r1
8000db7c:	00 00       	add	r0,r0
8000db7e:	02 20       	rsub	r0,r1
8000db80:	80 00       	ld.sh	r0,r0[0x0]
8000db82:	d4 38       	*unknown*
8000db84:	00 00       	add	r0,r0
8000db86:	02 28       	rsub	r8,r1

8000db88 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
8000db88:	eb cd 40 80 	pushm	r7,lr
8000db8c:	1a 97       	mov	r7,sp
8000db8e:	20 1d       	sub	sp,4
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000db90:	fe f8 02 40 	ld.w	r8,pc[576]
8000db94:	90 18       	ld.sh	r8,r8[0x2]
8000db96:	ef 68 ff ff 	st.b	r7[-1],r8

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
8000db9a:	fe f8 02 36 	ld.w	r8,pc[566]
8000db9e:	90 18       	ld.sh	r8,r8[0x2]
8000dba0:	5c 78       	castu.h	r8
8000dba2:	a9 88       	lsr	r8,0x8
8000dba4:	5c 88       	casts.h	r8
8000dba6:	5c 58       	castu.b	r8
8000dba8:	58 38       	cp.w	r8,3
8000dbaa:	e0 80 00 f7 	breq	8000dd98 <udc_req_std_dev_get_descriptor+0x210>
8000dbae:	e0 89 00 07 	brgt	8000dbbc <udc_req_std_dev_get_descriptor+0x34>
8000dbb2:	58 18       	cp.w	r8,1
8000dbb4:	c0 b0       	breq	8000dbca <udc_req_std_dev_get_descriptor+0x42>
8000dbb6:	58 28       	cp.w	r8,2
8000dbb8:	c2 70       	breq	8000dc06 <udc_req_std_dev_get_descriptor+0x7e>
8000dbba:	cf 88       	rjmp	8000ddaa <udc_req_std_dev_get_descriptor+0x222>
8000dbbc:	58 68       	cp.w	r8,6
8000dbbe:	e0 80 00 82 	breq	8000dcc2 <udc_req_std_dev_get_descriptor+0x13a>
8000dbc2:	58 78       	cp.w	r8,7
8000dbc4:	e0 80 00 8a 	breq	8000dcd8 <udc_req_std_dev_get_descriptor+0x150>
8000dbc8:	cf 18       	rjmp	8000ddaa <udc_req_std_dev_get_descriptor+0x222>
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
8000dbca:	f0 1f 00 83 	mcall	8000ddd4 <udc_req_std_dev_get_descriptor+0x24c>
8000dbce:	18 98       	mov	r8,r12
8000dbd0:	ec 18 00 01 	eorl	r8,0x1
8000dbd4:	5c 58       	castu.b	r8
8000dbd6:	c0 d0       	breq	8000dbf0 <udc_req_std_dev_get_descriptor+0x68>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
8000dbd8:	fe f8 02 00 	ld.w	r8,pc[512]
8000dbdc:	70 28       	ld.w	r8,r8[0x8]
8000dbde:	11 88       	ld.ub	r8,r8[0x0]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
8000dbe0:	10 99       	mov	r9,r8
8000dbe2:	4f e8       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dbe4:	70 28       	ld.w	r8,r8[0x8]
8000dbe6:	12 9b       	mov	r11,r9
8000dbe8:	10 9c       	mov	r12,r8
8000dbea:	f0 1f 00 7d 	mcall	8000dddc <udc_req_std_dev_get_descriptor+0x254>
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000dbee:	ce 18       	rjmp	8000ddb0 <udc_req_std_dev_get_descriptor+0x228>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
8000dbf0:	4f a8       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dbf2:	70 08       	ld.w	r8,r8[0x0]
8000dbf4:	11 88       	ld.ub	r8,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
8000dbf6:	10 99       	mov	r9,r8
8000dbf8:	4f 88       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dbfa:	70 08       	ld.w	r8,r8[0x0]
8000dbfc:	12 9b       	mov	r11,r9
8000dbfe:	10 9c       	mov	r12,r8
8000dc00:	f0 1f 00 77 	mcall	8000dddc <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000dc04:	cd 68       	rjmp	8000ddb0 <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
8000dc06:	f0 1f 00 74 	mcall	8000ddd4 <udc_req_std_dev_get_descriptor+0x24c>
8000dc0a:	18 98       	mov	r8,r12
8000dc0c:	58 08       	cp.w	r8,0
8000dc0e:	c2 b0       	breq	8000dc64 <udc_req_std_dev_get_descriptor+0xdc>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000dc10:	4f 28       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dc12:	70 28       	ld.w	r8,r8[0x8]
8000dc14:	f1 38 00 11 	ld.ub	r8,r8[17]
8000dc18:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dc1c:	f0 09 18 00 	cp.b	r9,r8
8000dc20:	c0 33       	brcs	8000dc26 <udc_req_std_dev_get_descriptor+0x9e>
					bNumConfigurations) {
				return false;
8000dc22:	30 08       	mov	r8,0
8000dc24:	cd 28       	rjmp	8000ddc8 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000dc26:	4e d8       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dc28:	70 49       	ld.w	r9,r8[0x10]
8000dc2a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dc2e:	a3 78       	lsl	r8,0x3
8000dc30:	f2 08 00 08 	add	r8,r9,r8
8000dc34:	70 08       	ld.w	r8,r8[0x0]
8000dc36:	11 a9       	ld.ub	r9,r8[0x2]
8000dc38:	a9 69       	lsl	r9,0x8
8000dc3a:	11 b8       	ld.ub	r8,r8[0x3]
8000dc3c:	12 48       	or	r8,r9
8000dc3e:	5c 88       	casts.h	r8
8000dc40:	5c 88       	casts.h	r8
8000dc42:	5c c8       	swap.bh	r8
8000dc44:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000dc46:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000dc4a:	4e 48       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dc4c:	70 4a       	ld.w	r10,r8[0x10]
8000dc4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dc52:	a3 78       	lsl	r8,0x3
8000dc54:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000dc58:	70 08       	ld.w	r8,r8[0x0]
8000dc5a:	12 9b       	mov	r11,r9
8000dc5c:	10 9c       	mov	r12,r8
8000dc5e:	f0 1f 00 60 	mcall	8000dddc <udc_req_std_dev_get_descriptor+0x254>
8000dc62:	c2 a8       	rjmp	8000dcb6 <udc_req_std_dev_get_descriptor+0x12e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000dc64:	4d d8       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dc66:	70 08       	ld.w	r8,r8[0x0]
8000dc68:	f1 38 00 11 	ld.ub	r8,r8[17]
8000dc6c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dc70:	f0 09 18 00 	cp.b	r9,r8
8000dc74:	c0 33       	brcs	8000dc7a <udc_req_std_dev_get_descriptor+0xf2>
					bNumConfigurations) {
				return false;
8000dc76:	30 08       	mov	r8,0
8000dc78:	ca 88       	rjmp	8000ddc8 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000dc7a:	4d 88       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dc7c:	70 19       	ld.w	r9,r8[0x4]
8000dc7e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dc82:	a3 78       	lsl	r8,0x3
8000dc84:	f2 08 00 08 	add	r8,r9,r8
8000dc88:	70 08       	ld.w	r8,r8[0x0]
8000dc8a:	11 a9       	ld.ub	r9,r8[0x2]
8000dc8c:	a9 69       	lsl	r9,0x8
8000dc8e:	11 b8       	ld.ub	r8,r8[0x3]
8000dc90:	12 48       	or	r8,r9
8000dc92:	5c 88       	casts.h	r8
8000dc94:	5c 88       	casts.h	r8
8000dc96:	5c c8       	swap.bh	r8
8000dc98:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000dc9a:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000dc9e:	4c f8       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dca0:	70 1a       	ld.w	r10,r8[0x4]
8000dca2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dca6:	a3 78       	lsl	r8,0x3
8000dca8:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000dcac:	70 08       	ld.w	r8,r8[0x0]
8000dcae:	12 9b       	mov	r11,r9
8000dcb0:	10 9c       	mov	r12,r8
8000dcb2:	f0 1f 00 4b 	mcall	8000dddc <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000dcb6:	4c 78       	lddpc	r8,8000ddd0 <udc_req_std_dev_get_descriptor+0x248>
8000dcb8:	70 28       	ld.w	r8,r8[0x8]
8000dcba:	10 99       	mov	r9,r8
8000dcbc:	30 28       	mov	r8,2
8000dcbe:	b2 98       	st.b	r9[0x1],r8
				USB_DT_CONFIGURATION;
		break;
8000dcc0:	c7 88       	rjmp	8000ddb0 <udc_req_std_dev_get_descriptor+0x228>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
8000dcc2:	4c 68       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dcc4:	70 38       	ld.w	r8,r8[0xc]
8000dcc6:	11 88       	ld.ub	r8,r8[0x0]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
8000dcc8:	10 99       	mov	r9,r8
8000dcca:	4c 48       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dccc:	70 38       	ld.w	r8,r8[0xc]
8000dcce:	12 9b       	mov	r11,r9
8000dcd0:	10 9c       	mov	r12,r8
8000dcd2:	f0 1f 00 43 	mcall	8000dddc <udc_req_std_dev_get_descriptor+0x254>
				udc_config.qualifier->bLength);
		break;
8000dcd6:	c6 d8       	rjmp	8000ddb0 <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
8000dcd8:	f0 1f 00 3f 	mcall	8000ddd4 <udc_req_std_dev_get_descriptor+0x24c>
8000dcdc:	18 98       	mov	r8,r12
8000dcde:	ec 18 00 01 	eorl	r8,0x1
8000dce2:	5c 58       	castu.b	r8
8000dce4:	c2 b0       	breq	8000dd3a <udc_req_std_dev_get_descriptor+0x1b2>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000dce6:	4b d8       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dce8:	70 28       	ld.w	r8,r8[0x8]
8000dcea:	f1 38 00 11 	ld.ub	r8,r8[17]
8000dcee:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dcf2:	f0 09 18 00 	cp.b	r9,r8
8000dcf6:	c0 33       	brcs	8000dcfc <udc_req_std_dev_get_descriptor+0x174>
					bNumConfigurations) {
				return false;
8000dcf8:	30 08       	mov	r8,0
8000dcfa:	c6 78       	rjmp	8000ddc8 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000dcfc:	4b 78       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dcfe:	70 49       	ld.w	r9,r8[0x10]
8000dd00:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dd04:	a3 78       	lsl	r8,0x3
8000dd06:	f2 08 00 08 	add	r8,r9,r8
8000dd0a:	70 08       	ld.w	r8,r8[0x0]
8000dd0c:	11 a9       	ld.ub	r9,r8[0x2]
8000dd0e:	a9 69       	lsl	r9,0x8
8000dd10:	11 b8       	ld.ub	r8,r8[0x3]
8000dd12:	12 48       	or	r8,r9
8000dd14:	5c 88       	casts.h	r8
8000dd16:	5c 88       	casts.h	r8
8000dd18:	5c c8       	swap.bh	r8
8000dd1a:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000dd1c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000dd20:	4a e8       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dd22:	70 4a       	ld.w	r10,r8[0x10]
8000dd24:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dd28:	a3 78       	lsl	r8,0x3
8000dd2a:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000dd2e:	70 08       	ld.w	r8,r8[0x0]
8000dd30:	12 9b       	mov	r11,r9
8000dd32:	10 9c       	mov	r12,r8
8000dd34:	f0 1f 00 2a 	mcall	8000dddc <udc_req_std_dev_get_descriptor+0x254>
8000dd38:	c2 a8       	rjmp	8000dd8c <udc_req_std_dev_get_descriptor+0x204>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000dd3a:	4a 88       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dd3c:	70 08       	ld.w	r8,r8[0x0]
8000dd3e:	f1 38 00 11 	ld.ub	r8,r8[17]
8000dd42:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dd46:	f0 09 18 00 	cp.b	r9,r8
8000dd4a:	c0 33       	brcs	8000dd50 <udc_req_std_dev_get_descriptor+0x1c8>
					bNumConfigurations) {
				return false;
8000dd4c:	30 08       	mov	r8,0
8000dd4e:	c3 d8       	rjmp	8000ddc8 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000dd50:	4a 28       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dd52:	70 19       	ld.w	r9,r8[0x4]
8000dd54:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dd58:	a3 78       	lsl	r8,0x3
8000dd5a:	f2 08 00 08 	add	r8,r9,r8
8000dd5e:	70 08       	ld.w	r8,r8[0x0]
8000dd60:	11 a9       	ld.ub	r9,r8[0x2]
8000dd62:	a9 69       	lsl	r9,0x8
8000dd64:	11 b8       	ld.ub	r8,r8[0x3]
8000dd66:	12 48       	or	r8,r9
8000dd68:	5c 88       	casts.h	r8
8000dd6a:	5c 88       	casts.h	r8
8000dd6c:	5c c8       	swap.bh	r8
8000dd6e:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000dd70:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000dd74:	49 98       	lddpc	r8,8000ddd8 <udc_req_std_dev_get_descriptor+0x250>
8000dd76:	70 1a       	ld.w	r10,r8[0x4]
8000dd78:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dd7c:	a3 78       	lsl	r8,0x3
8000dd7e:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000dd82:	70 08       	ld.w	r8,r8[0x0]
8000dd84:	12 9b       	mov	r11,r9
8000dd86:	10 9c       	mov	r12,r8
8000dd88:	f0 1f 00 15 	mcall	8000dddc <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000dd8c:	49 18       	lddpc	r8,8000ddd0 <udc_req_std_dev_get_descriptor+0x248>
8000dd8e:	70 28       	ld.w	r8,r8[0x8]
8000dd90:	10 99       	mov	r9,r8
8000dd92:	30 78       	mov	r8,7
8000dd94:	b2 98       	st.b	r9[0x1],r8
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
8000dd96:	c0 d8       	rjmp	8000ddb0 <udc_req_std_dev_get_descriptor+0x228>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
8000dd98:	f0 1f 00 12 	mcall	8000dde0 <udc_req_std_dev_get_descriptor+0x258>
8000dd9c:	18 98       	mov	r8,r12
8000dd9e:	ec 18 00 01 	eorl	r8,0x1
8000dda2:	5c 58       	castu.b	r8
8000dda4:	c0 50       	breq	8000ddae <udc_req_std_dev_get_descriptor+0x226>
			return false;
8000dda6:	30 08       	mov	r8,0
8000dda8:	c1 08       	rjmp	8000ddc8 <udc_req_std_dev_get_descriptor+0x240>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
8000ddaa:	30 08       	mov	r8,0
8000ddac:	c0 e8       	rjmp	8000ddc8 <udc_req_std_dev_get_descriptor+0x240>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
8000ddae:	d7 03       	nop
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
8000ddb0:	48 88       	lddpc	r8,8000ddd0 <udc_req_std_dev_get_descriptor+0x248>
8000ddb2:	90 39       	ld.sh	r9,r8[0x6]
8000ddb4:	48 78       	lddpc	r8,8000ddd0 <udc_req_std_dev_get_descriptor+0x248>
8000ddb6:	90 68       	ld.sh	r8,r8[0xc]
8000ddb8:	f0 09 19 00 	cp.h	r9,r8
8000ddbc:	c0 52       	brcc	8000ddc6 <udc_req_std_dev_get_descriptor+0x23e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000ddbe:	48 58       	lddpc	r8,8000ddd0 <udc_req_std_dev_get_descriptor+0x248>
8000ddc0:	90 38       	ld.sh	r8,r8[0x6]
8000ddc2:	48 49       	lddpc	r9,8000ddd0 <udc_req_std_dev_get_descriptor+0x248>
8000ddc4:	b2 68       	st.h	r9[0xc],r8
	}
	return true;
8000ddc6:	30 18       	mov	r8,1
}
8000ddc8:	10 9c       	mov	r12,r8
8000ddca:	2f fd       	sub	sp,-4
8000ddcc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ddd0:	00 00       	add	r0,r0
8000ddd2:	10 0c       	add	r12,r8
8000ddd4:	80 00       	ld.sh	r0,r0[0x0]
8000ddd6:	a1 64       	lsl	r4,0x0
8000ddd8:	00 00       	add	r0,r0
8000ddda:	02 00       	add	r0,r1
8000dddc:	80 00       	ld.sh	r0,r0[0x0]
8000ddde:	a2 00       	st.h	r1[0x0],r0
8000dde0:	80 00       	ld.sh	r0,r0[0x0]
8000dde2:	da 88       	*unknown*

8000dde4 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
8000dde4:	eb cd 40 80 	pushm	r7,lr
8000dde8:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != 1) {
8000ddea:	48 98       	lddpc	r8,8000de0c <udc_req_std_dev_get_configuration+0x28>
8000ddec:	90 39       	ld.sh	r9,r8[0x6]
8000ddee:	30 18       	mov	r8,1
8000ddf0:	f0 09 19 00 	cp.h	r9,r8
8000ddf4:	c0 30       	breq	8000ddfa <udc_req_std_dev_get_configuration+0x16>
		return false;
8000ddf6:	30 08       	mov	r8,0
8000ddf8:	c0 68       	rjmp	8000de04 <udc_req_std_dev_get_configuration+0x20>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
8000ddfa:	30 1b       	mov	r11,1
8000ddfc:	48 5c       	lddpc	r12,8000de10 <udc_req_std_dev_get_configuration+0x2c>
8000ddfe:	f0 1f 00 06 	mcall	8000de14 <udc_req_std_dev_get_configuration+0x30>
	return true;
8000de02:	30 18       	mov	r8,1
}
8000de04:	10 9c       	mov	r12,r8
8000de06:	e3 cd 80 80 	ldm	sp++,r7,pc
8000de0a:	00 00       	add	r0,r0
8000de0c:	00 00       	add	r0,r0
8000de0e:	10 0c       	add	r12,r8
8000de10:	00 00       	add	r0,r0
8000de12:	08 56       	eor	r6,r4
8000de14:	80 00       	ld.sh	r0,r0[0x0]
8000de16:	a2 00       	st.h	r1[0x0],r0

8000de18 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
8000de18:	eb cd 40 80 	pushm	r7,lr
8000de1c:	1a 97       	mov	r7,sp
8000de1e:	20 1d       	sub	sp,4
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
8000de20:	4b c8       	lddpc	r8,8000df10 <udc_req_std_dev_set_configuration+0xf8>
8000de22:	90 38       	ld.sh	r8,r8[0x6]
8000de24:	58 08       	cp.w	r8,0
8000de26:	c0 30       	breq	8000de2c <udc_req_std_dev_set_configuration+0x14>
		return false;
8000de28:	30 08       	mov	r8,0
8000de2a:	c6 f8       	rjmp	8000df08 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
8000de2c:	f0 1f 00 3a 	mcall	8000df14 <udc_req_std_dev_set_configuration+0xfc>
8000de30:	18 98       	mov	r8,r12
8000de32:	58 08       	cp.w	r8,0
8000de34:	c0 31       	brne	8000de3a <udc_req_std_dev_set_configuration+0x22>
		return false;
8000de36:	30 08       	mov	r8,0
8000de38:	c6 88       	rjmp	8000df08 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000de3a:	f0 1f 00 38 	mcall	8000df18 <udc_req_std_dev_set_configuration+0x100>
8000de3e:	18 98       	mov	r8,r12
8000de40:	58 08       	cp.w	r8,0
8000de42:	c0 f0       	breq	8000de60 <udc_req_std_dev_set_configuration+0x48>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000de44:	4b 38       	lddpc	r8,8000df10 <udc_req_std_dev_set_configuration+0xf8>
8000de46:	90 18       	ld.sh	r8,r8[0x2]
8000de48:	5c 78       	castu.h	r8
8000de4a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_hs->bNumConfigurations) {
8000de4e:	4b 48       	lddpc	r8,8000df1c <udc_req_std_dev_set_configuration+0x104>
8000de50:	70 28       	ld.w	r8,r8[0x8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000de52:	f1 38 00 11 	ld.ub	r8,r8[17]
8000de56:	10 39       	cp.w	r9,r8
8000de58:	e0 8a 00 12 	brle	8000de7c <udc_req_std_dev_set_configuration+0x64>
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000de5c:	30 08       	mov	r8,0
8000de5e:	c5 58       	rjmp	8000df08 <udc_req_std_dev_set_configuration+0xf0>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000de60:	4a c8       	lddpc	r8,8000df10 <udc_req_std_dev_set_configuration+0xf8>
8000de62:	90 18       	ld.sh	r8,r8[0x2]
8000de64:	5c 78       	castu.h	r8
8000de66:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_lsfs->bNumConfigurations) {
8000de6a:	4a d8       	lddpc	r8,8000df1c <udc_req_std_dev_set_configuration+0x104>
8000de6c:	70 08       	ld.w	r8,r8[0x0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000de6e:	f1 38 00 11 	ld.ub	r8,r8[17]
8000de72:	10 39       	cp.w	r9,r8
8000de74:	e0 8a 00 05 	brle	8000de7e <udc_req_std_dev_set_configuration+0x66>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
8000de78:	30 08       	mov	r8,0
8000de7a:	c4 78       	rjmp	8000df08 <udc_req_std_dev_set_configuration+0xf0>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000de7c:	d7 03       	nop
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
8000de7e:	f0 1f 00 29 	mcall	8000df20 <udc_req_std_dev_set_configuration+0x108>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
8000de82:	4a 48       	lddpc	r8,8000df10 <udc_req_std_dev_set_configuration+0xf8>
8000de84:	90 18       	ld.sh	r8,r8[0x2]
8000de86:	5c 58       	castu.b	r8
8000de88:	4a 79       	lddpc	r9,8000df24 <udc_req_std_dev_set_configuration+0x10c>
8000de8a:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
8000de8c:	4a 68       	lddpc	r8,8000df24 <udc_req_std_dev_set_configuration+0x10c>
8000de8e:	11 88       	ld.ub	r8,r8[0x0]
8000de90:	58 08       	cp.w	r8,0
8000de92:	c0 31       	brne	8000de98 <udc_req_std_dev_set_configuration+0x80>
		return true; // Default empty configuration requested
8000de94:	30 18       	mov	r8,1
8000de96:	c3 98       	rjmp	8000df08 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000de98:	f0 1f 00 20 	mcall	8000df18 <udc_req_std_dev_set_configuration+0x100>
8000de9c:	18 98       	mov	r8,r12
8000de9e:	58 08       	cp.w	r8,0
8000dea0:	c0 b0       	breq	8000deb6 <udc_req_std_dev_set_configuration+0x9e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
8000dea2:	49 f8       	lddpc	r8,8000df1c <udc_req_std_dev_set_configuration+0x104>
8000dea4:	70 49       	ld.w	r9,r8[0x10]
8000dea6:	4a 08       	lddpc	r8,8000df24 <udc_req_std_dev_set_configuration+0x10c>
8000dea8:	11 88       	ld.ub	r8,r8[0x0]
8000deaa:	20 18       	sub	r8,1
8000deac:	a3 78       	lsl	r8,0x3
8000deae:	10 09       	add	r9,r8
8000deb0:	49 e8       	lddpc	r8,8000df28 <udc_req_std_dev_set_configuration+0x110>
8000deb2:	91 09       	st.w	r8[0x0],r9
8000deb4:	c0 a8       	rjmp	8000dec8 <udc_req_std_dev_set_configuration+0xb0>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
8000deb6:	49 a8       	lddpc	r8,8000df1c <udc_req_std_dev_set_configuration+0x104>
8000deb8:	70 19       	ld.w	r9,r8[0x4]
8000deba:	49 b8       	lddpc	r8,8000df24 <udc_req_std_dev_set_configuration+0x10c>
8000debc:	11 88       	ld.ub	r8,r8[0x0]
8000debe:	20 18       	sub	r8,1
8000dec0:	a3 78       	lsl	r8,0x3
8000dec2:	10 09       	add	r9,r8
8000dec4:	49 98       	lddpc	r8,8000df28 <udc_req_std_dev_set_configuration+0x110>
8000dec6:	91 09       	st.w	r8[0x0],r9
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000dec8:	30 08       	mov	r8,0
8000deca:	ef 68 ff ff 	st.b	r7[-1],r8
8000dece:	c1 38       	rjmp	8000def4 <udc_req_std_dev_set_configuration+0xdc>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
8000ded0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ded4:	30 0b       	mov	r11,0
8000ded6:	10 9c       	mov	r12,r8
8000ded8:	f0 1f 00 15 	mcall	8000df2c <udc_req_std_dev_set_configuration+0x114>
8000dedc:	18 98       	mov	r8,r12
8000dede:	ec 18 00 01 	eorl	r8,0x1
8000dee2:	5c 58       	castu.b	r8
8000dee4:	c0 30       	breq	8000deea <udc_req_std_dev_set_configuration+0xd2>
			return false;
8000dee6:	30 08       	mov	r8,0
8000dee8:	c1 08       	rjmp	8000df08 <udc_req_std_dev_set_configuration+0xf0>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000deea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000deee:	2f f8       	sub	r8,-1
8000def0:	ef 68 ff ff 	st.b	r7[-1],r8
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000def4:	48 d8       	lddpc	r8,8000df28 <udc_req_std_dev_set_configuration+0x110>
8000def6:	70 08       	ld.w	r8,r8[0x0]
8000def8:	70 08       	ld.w	r8,r8[0x0]
8000defa:	11 c8       	ld.ub	r8,r8[0x4]
8000defc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000df00:	f0 09 18 00 	cp.b	r9,r8
8000df04:	ce 63       	brcs	8000ded0 <udc_req_std_dev_set_configuration+0xb8>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
8000df06:	30 18       	mov	r8,1
}
8000df08:	10 9c       	mov	r12,r8
8000df0a:	2f fd       	sub	sp,-4
8000df0c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df10:	00 00       	add	r0,r0
8000df12:	10 0c       	add	r12,r8
8000df14:	80 00       	ld.sh	r0,r0[0x0]
8000df16:	a1 ce       	cbr	lr,0x0
8000df18:	80 00       	ld.sh	r0,r0[0x0]
8000df1a:	a1 64       	lsl	r4,0x0
8000df1c:	00 00       	add	r0,r0
8000df1e:	02 00       	add	r0,r1
8000df20:	80 00       	ld.sh	r0,r0[0x0]
8000df22:	d7 58       	*unknown*
8000df24:	00 00       	add	r0,r0
8000df26:	08 56       	eor	r6,r4
8000df28:	00 00       	add	r0,r0
8000df2a:	08 58       	eor	r8,r4
8000df2c:	80 00       	ld.sh	r0,r0[0x0]
8000df2e:	d6 7c       	*unknown*

8000df30 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
8000df30:	eb cd 40 80 	pushm	r7,lr
8000df34:	1a 97       	mov	r7,sp
8000df36:	20 2d       	sub	sp,8
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
8000df38:	4a 38       	lddpc	r8,8000dfc4 <udc_req_std_iface_get_setting+0x94>
8000df3a:	90 39       	ld.sh	r9,r8[0x6]
8000df3c:	30 18       	mov	r8,1
8000df3e:	f0 09 19 00 	cp.h	r9,r8
8000df42:	c0 30       	breq	8000df48 <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
8000df44:	30 08       	mov	r8,0
8000df46:	c3 a8       	rjmp	8000dfba <udc_req_std_iface_get_setting+0x8a>
	}
	if (!udc_num_configuration) {
8000df48:	4a 08       	lddpc	r8,8000dfc8 <udc_req_std_iface_get_setting+0x98>
8000df4a:	11 88       	ld.ub	r8,r8[0x0]
8000df4c:	58 08       	cp.w	r8,0
8000df4e:	c0 31       	brne	8000df54 <udc_req_std_iface_get_setting+0x24>
		return false; // The device is not is configured state yet
8000df50:	30 08       	mov	r8,0
8000df52:	c3 48       	rjmp	8000dfba <udc_req_std_iface_get_setting+0x8a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000df54:	49 c8       	lddpc	r8,8000dfc4 <udc_req_std_iface_get_setting+0x94>
8000df56:	90 28       	ld.sh	r8,r8[0x4]
8000df58:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000df5c:	49 c8       	lddpc	r8,8000dfcc <udc_req_std_iface_get_setting+0x9c>
8000df5e:	70 08       	ld.w	r8,r8[0x0]
8000df60:	70 08       	ld.w	r8,r8[0x0]
8000df62:	11 c8       	ld.ub	r8,r8[0x4]
8000df64:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000df68:	f0 09 18 00 	cp.b	r9,r8
8000df6c:	c0 33       	brcs	8000df72 <udc_req_std_iface_get_setting+0x42>
		return false;
8000df6e:	30 08       	mov	r8,0
8000df70:	c2 58       	rjmp	8000dfba <udc_req_std_iface_get_setting+0x8a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000df72:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000df76:	30 0b       	mov	r11,0
8000df78:	10 9c       	mov	r12,r8
8000df7a:	f0 1f 00 16 	mcall	8000dfd0 <udc_req_std_iface_get_setting+0xa0>
8000df7e:	18 98       	mov	r8,r12
8000df80:	ec 18 00 01 	eorl	r8,0x1
8000df84:	5c 58       	castu.b	r8
8000df86:	c0 30       	breq	8000df8c <udc_req_std_iface_get_setting+0x5c>
		return false;
8000df88:	30 08       	mov	r8,0
8000df8a:	c1 88       	rjmp	8000dfba <udc_req_std_iface_get_setting+0x8a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000df8c:	49 08       	lddpc	r8,8000dfcc <udc_req_std_iface_get_setting+0x9c>
8000df8e:	70 08       	ld.w	r8,r8[0x0]
8000df90:	70 19       	ld.w	r9,r8[0x4]
8000df92:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000df96:	a3 68       	lsl	r8,0x2
8000df98:	f2 08 00 08 	add	r8,r9,r8
8000df9c:	70 08       	ld.w	r8,r8[0x0]
8000df9e:	ef 48 ff fc 	st.w	r7[-4],r8
	udc_iface_setting = udi_api->getsetting();
8000dfa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dfa6:	70 38       	ld.w	r8,r8[0xc]
8000dfa8:	5d 18       	icall	r8
8000dfaa:	18 98       	mov	r8,r12
8000dfac:	48 a9       	lddpc	r9,8000dfd4 <udc_req_std_iface_get_setting+0xa4>
8000dfae:	b2 88       	st.b	r9[0x0],r8

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
8000dfb0:	30 1b       	mov	r11,1
8000dfb2:	48 9c       	lddpc	r12,8000dfd4 <udc_req_std_iface_get_setting+0xa4>
8000dfb4:	f0 1f 00 09 	mcall	8000dfd8 <udc_req_std_iface_get_setting+0xa8>
	return true;
8000dfb8:	30 18       	mov	r8,1
}
8000dfba:	10 9c       	mov	r12,r8
8000dfbc:	2f ed       	sub	sp,-8
8000dfbe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dfc2:	00 00       	add	r0,r0
8000dfc4:	00 00       	add	r0,r0
8000dfc6:	10 0c       	add	r12,r8
8000dfc8:	00 00       	add	r0,r0
8000dfca:	08 56       	eor	r6,r4
8000dfcc:	00 00       	add	r0,r0
8000dfce:	08 58       	eor	r8,r4
8000dfd0:	80 00       	ld.sh	r0,r0[0x0]
8000dfd2:	d5 08       	*unknown*
8000dfd4:	00 00       	add	r0,r0
8000dfd6:	08 60       	and	r0,r4
8000dfd8:	80 00       	ld.sh	r0,r0[0x0]
8000dfda:	a2 00       	st.h	r1[0x0],r0

8000dfdc <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
8000dfdc:	eb cd 40 80 	pushm	r7,lr
8000dfe0:	1a 97       	mov	r7,sp
8000dfe2:	20 1d       	sub	sp,4
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
8000dfe4:	49 78       	lddpc	r8,8000e040 <udc_req_std_iface_set_setting+0x64>
8000dfe6:	90 38       	ld.sh	r8,r8[0x6]
8000dfe8:	58 08       	cp.w	r8,0
8000dfea:	c0 30       	breq	8000dff0 <udc_req_std_iface_set_setting+0x14>
		return false; // Error in request
8000dfec:	30 08       	mov	r8,0
8000dfee:	c2 48       	rjmp	8000e036 <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
8000dff0:	49 58       	lddpc	r8,8000e044 <udc_req_std_iface_set_setting+0x68>
8000dff2:	11 88       	ld.ub	r8,r8[0x0]
8000dff4:	58 08       	cp.w	r8,0
8000dff6:	c0 31       	brne	8000dffc <udc_req_std_iface_set_setting+0x20>
		return false; // The device is not is configured state yet
8000dff8:	30 08       	mov	r8,0
8000dffa:	c1 e8       	rjmp	8000e036 <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000dffc:	49 18       	lddpc	r8,8000e040 <udc_req_std_iface_set_setting+0x64>
8000dffe:	90 28       	ld.sh	r8,r8[0x4]
8000e000:	ef 68 ff fe 	st.b	r7[-2],r8
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
8000e004:	48 f8       	lddpc	r8,8000e040 <udc_req_std_iface_set_setting+0x64>
8000e006:	90 18       	ld.sh	r8,r8[0x2]
8000e008:	ef 68 ff ff 	st.b	r7[-1],r8

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
8000e00c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e010:	10 9c       	mov	r12,r8
8000e012:	f0 1f 00 0e 	mcall	8000e048 <udc_req_std_iface_set_setting+0x6c>
8000e016:	18 98       	mov	r8,r12
8000e018:	ec 18 00 01 	eorl	r8,0x1
8000e01c:	5c 58       	castu.b	r8
8000e01e:	c0 30       	breq	8000e024 <udc_req_std_iface_set_setting+0x48>
		return false;
8000e020:	30 08       	mov	r8,0
8000e022:	c0 a8       	rjmp	8000e036 <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
8000e024:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000e028:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e02c:	12 9b       	mov	r11,r9
8000e02e:	10 9c       	mov	r12,r8
8000e030:	f0 1f 00 07 	mcall	8000e04c <udc_req_std_iface_set_setting+0x70>
8000e034:	18 98       	mov	r8,r12
}
8000e036:	10 9c       	mov	r12,r8
8000e038:	2f fd       	sub	sp,-4
8000e03a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e03e:	00 00       	add	r0,r0
8000e040:	00 00       	add	r0,r0
8000e042:	10 0c       	add	r12,r8
8000e044:	00 00       	add	r0,r0
8000e046:	08 56       	eor	r6,r4
8000e048:	80 00       	ld.sh	r0,r0[0x0]
8000e04a:	d5 c0       	acall	0x170
8000e04c:	80 00       	ld.sh	r0,r0[0x0]
8000e04e:	d6 7c       	*unknown*

8000e050 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
8000e050:	eb cd 40 80 	pushm	r7,lr
8000e054:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000e056:	4c 78       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e058:	11 88       	ld.ub	r8,r8[0x0]
8000e05a:	10 99       	mov	r9,r8
8000e05c:	30 08       	mov	r8,0
8000e05e:	f0 09 18 00 	cp.b	r9,r8
8000e062:	c3 c4       	brge	8000e0da <udc_reqstd+0x8a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
8000e064:	4c 38       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e066:	90 38       	ld.sh	r8,r8[0x6]
8000e068:	58 08       	cp.w	r8,0
8000e06a:	c0 31       	brne	8000e070 <udc_reqstd+0x20>
			return false; // Error for USB host
8000e06c:	30 08       	mov	r8,0
8000e06e:	c7 e8       	rjmp	8000e16a <udc_reqstd+0x11a>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000e070:	4c 08       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e072:	11 88       	ld.ub	r8,r8[0x0]
8000e074:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e078:	c1 51       	brne	8000e0a2 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000e07a:	4b e8       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e07c:	11 98       	ld.ub	r8,r8[0x1]
8000e07e:	58 68       	cp.w	r8,6
8000e080:	c0 90       	breq	8000e092 <udc_reqstd+0x42>
8000e082:	58 88       	cp.w	r8,8
8000e084:	c0 b0       	breq	8000e09a <udc_reqstd+0x4a>
8000e086:	58 08       	cp.w	r8,0
8000e088:	c0 d1       	brne	8000e0a2 <udc_reqstd+0x52>
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
8000e08a:	f0 1f 00 3b 	mcall	8000e174 <udc_reqstd+0x124>
8000e08e:	18 98       	mov	r8,r12
8000e090:	c6 d8       	rjmp	8000e16a <udc_reqstd+0x11a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
8000e092:	f0 1f 00 3a 	mcall	8000e178 <udc_reqstd+0x128>
8000e096:	18 98       	mov	r8,r12
8000e098:	c6 98       	rjmp	8000e16a <udc_reqstd+0x11a>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
8000e09a:	f0 1f 00 39 	mcall	8000e17c <udc_reqstd+0x12c>
8000e09e:	18 98       	mov	r8,r12
8000e0a0:	c6 58       	rjmp	8000e16a <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000e0a2:	4b 48       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e0a4:	11 88       	ld.ub	r8,r8[0x0]
8000e0a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e0aa:	58 18       	cp.w	r8,1
8000e0ac:	c0 91       	brne	8000e0be <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000e0ae:	4b 18       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e0b0:	11 98       	ld.ub	r8,r8[0x1]
8000e0b2:	58 a8       	cp.w	r8,10
8000e0b4:	c0 51       	brne	8000e0be <udc_reqstd+0x6e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
8000e0b6:	f0 1f 00 33 	mcall	8000e180 <udc_reqstd+0x130>
8000e0ba:	18 98       	mov	r8,r12
8000e0bc:	c5 78       	rjmp	8000e16a <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000e0be:	4a d8       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e0c0:	11 88       	ld.ub	r8,r8[0x0]
8000e0c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e0c6:	58 28       	cp.w	r8,2
8000e0c8:	c4 f1       	brne	8000e166 <udc_reqstd+0x116>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000e0ca:	4a a8       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e0cc:	11 98       	ld.ub	r8,r8[0x1]
8000e0ce:	58 08       	cp.w	r8,0
8000e0d0:	c4 c1       	brne	8000e168 <udc_reqstd+0x118>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000e0d2:	f0 1f 00 2d 	mcall	8000e184 <udc_reqstd+0x134>
8000e0d6:	18 98       	mov	r8,r12
8000e0d8:	c4 98       	rjmp	8000e16a <udc_reqstd+0x11a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000e0da:	4a 68       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e0dc:	11 88       	ld.ub	r8,r8[0x0]
8000e0de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e0e2:	c1 f1       	brne	8000e120 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000e0e4:	4a 38       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e0e6:	11 98       	ld.ub	r8,r8[0x1]
8000e0e8:	58 38       	cp.w	r8,3
8000e0ea:	c1 30       	breq	8000e110 <udc_reqstd+0xc0>
8000e0ec:	e0 89 00 05 	brgt	8000e0f6 <udc_reqstd+0xa6>
8000e0f0:	58 18       	cp.w	r8,1
8000e0f2:	c0 b0       	breq	8000e108 <udc_reqstd+0xb8>
8000e0f4:	c1 68       	rjmp	8000e120 <udc_reqstd+0xd0>
8000e0f6:	58 58       	cp.w	r8,5
8000e0f8:	c0 40       	breq	8000e100 <udc_reqstd+0xb0>
8000e0fa:	58 98       	cp.w	r8,9
8000e0fc:	c0 e0       	breq	8000e118 <udc_reqstd+0xc8>
8000e0fe:	c1 18       	rjmp	8000e120 <udc_reqstd+0xd0>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
8000e100:	f0 1f 00 22 	mcall	8000e188 <udc_reqstd+0x138>
8000e104:	18 98       	mov	r8,r12
8000e106:	c3 28       	rjmp	8000e16a <udc_reqstd+0x11a>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
8000e108:	f0 1f 00 21 	mcall	8000e18c <udc_reqstd+0x13c>
8000e10c:	18 98       	mov	r8,r12
8000e10e:	c2 e8       	rjmp	8000e16a <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
8000e110:	f0 1f 00 20 	mcall	8000e190 <udc_reqstd+0x140>
8000e114:	18 98       	mov	r8,r12
8000e116:	c2 a8       	rjmp	8000e16a <udc_reqstd+0x11a>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
8000e118:	f0 1f 00 1f 	mcall	8000e194 <udc_reqstd+0x144>
8000e11c:	18 98       	mov	r8,r12
8000e11e:	c2 68       	rjmp	8000e16a <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000e120:	49 48       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e122:	11 88       	ld.ub	r8,r8[0x0]
8000e124:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e128:	58 18       	cp.w	r8,1
8000e12a:	c0 91       	brne	8000e13c <udc_reqstd+0xec>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000e12c:	49 18       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e12e:	11 98       	ld.ub	r8,r8[0x1]
8000e130:	58 b8       	cp.w	r8,11
8000e132:	c0 51       	brne	8000e13c <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
8000e134:	f0 1f 00 19 	mcall	8000e198 <udc_reqstd+0x148>
8000e138:	18 98       	mov	r8,r12
8000e13a:	c1 88       	rjmp	8000e16a <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000e13c:	48 d8       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e13e:	11 88       	ld.ub	r8,r8[0x0]
8000e140:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e144:	58 28       	cp.w	r8,2
8000e146:	c1 11       	brne	8000e168 <udc_reqstd+0x118>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000e148:	48 a8       	lddpc	r8,8000e170 <udc_reqstd+0x120>
8000e14a:	11 98       	ld.ub	r8,r8[0x1]
8000e14c:	58 18       	cp.w	r8,1
8000e14e:	c0 40       	breq	8000e156 <udc_reqstd+0x106>
8000e150:	58 38       	cp.w	r8,3
8000e152:	c0 60       	breq	8000e15e <udc_reqstd+0x10e>
8000e154:	c0 a8       	rjmp	8000e168 <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
8000e156:	f0 1f 00 12 	mcall	8000e19c <udc_reqstd+0x14c>
8000e15a:	18 98       	mov	r8,r12
8000e15c:	c0 78       	rjmp	8000e16a <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
8000e15e:	f0 1f 00 11 	mcall	8000e1a0 <udc_reqstd+0x150>
8000e162:	18 98       	mov	r8,r12
8000e164:	c0 38       	rjmp	8000e16a <udc_reqstd+0x11a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000e166:	d7 03       	nop
				break;
			}
		}
#endif
	}
	return false;
8000e168:	30 08       	mov	r8,0
}
8000e16a:	10 9c       	mov	r12,r8
8000e16c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e170:	00 00       	add	r0,r0
8000e172:	10 0c       	add	r12,r8
8000e174:	80 00       	ld.sh	r0,r0[0x0]
8000e176:	d8 2c       	*unknown*
8000e178:	80 00       	ld.sh	r0,r0[0x0]
8000e17a:	db 88       	*unknown*
8000e17c:	80 00       	ld.sh	r0,r0[0x0]
8000e17e:	dd e4       	*unknown*
8000e180:	80 00       	ld.sh	r0,r0[0x0]
8000e182:	df 30       	acall	0x3cc
8000e184:	80 00       	ld.sh	r0,r0[0x0]
8000e186:	d8 60       	acall	0x218
8000e188:	80 00       	ld.sh	r0,r0[0x0]
8000e18a:	da 60       	acall	0x298
8000e18c:	80 00       	ld.sh	r0,r0[0x0]
8000e18e:	d8 b8       	*unknown*
8000e190:	80 00       	ld.sh	r0,r0[0x0]
8000e192:	d9 34       	*unknown*
8000e194:	80 00       	ld.sh	r0,r0[0x0]
8000e196:	de 18       	*unknown*
8000e198:	80 00       	ld.sh	r0,r0[0x0]
8000e19a:	df dc       	*unknown*
8000e19c:	80 00       	ld.sh	r0,r0[0x0]
8000e19e:	d8 f8       	*unknown*
8000e1a0:	80 00       	ld.sh	r0,r0[0x0]
8000e1a2:	d9 f0       	acall	0x27c

8000e1a4 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
8000e1a4:	eb cd 40 80 	pushm	r7,lr
8000e1a8:	1a 97       	mov	r7,sp
8000e1aa:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000e1ac:	4a 58       	lddpc	r8,8000e240 <udc_req_iface+0x9c>
8000e1ae:	11 88       	ld.ub	r8,r8[0x0]
8000e1b0:	58 08       	cp.w	r8,0
8000e1b2:	c0 31       	brne	8000e1b8 <udc_req_iface+0x14>
		return false; // The device is not is configured state yet
8000e1b4:	30 08       	mov	r8,0
8000e1b6:	c4 08       	rjmp	8000e236 <udc_req_iface+0x92>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000e1b8:	4a 38       	lddpc	r8,8000e244 <udc_req_iface+0xa0>
8000e1ba:	90 28       	ld.sh	r8,r8[0x4]
8000e1bc:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000e1c0:	4a 28       	lddpc	r8,8000e248 <udc_req_iface+0xa4>
8000e1c2:	70 08       	ld.w	r8,r8[0x0]
8000e1c4:	70 08       	ld.w	r8,r8[0x0]
8000e1c6:	11 c8       	ld.ub	r8,r8[0x4]
8000e1c8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000e1cc:	f0 09 18 00 	cp.b	r9,r8
8000e1d0:	c0 33       	brcs	8000e1d6 <udc_req_iface+0x32>
		return false;
8000e1d2:	30 08       	mov	r8,0
8000e1d4:	c3 18       	rjmp	8000e236 <udc_req_iface+0x92>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000e1d6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000e1da:	30 0b       	mov	r11,0
8000e1dc:	10 9c       	mov	r12,r8
8000e1de:	f0 1f 00 1c 	mcall	8000e24c <udc_req_iface+0xa8>
8000e1e2:	18 98       	mov	r8,r12
8000e1e4:	ec 18 00 01 	eorl	r8,0x1
8000e1e8:	5c 58       	castu.b	r8
8000e1ea:	c0 30       	breq	8000e1f0 <udc_req_iface+0x4c>
		return false;
8000e1ec:	30 08       	mov	r8,0
8000e1ee:	c2 48       	rjmp	8000e236 <udc_req_iface+0x92>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000e1f0:	49 68       	lddpc	r8,8000e248 <udc_req_iface+0xa4>
8000e1f2:	70 08       	ld.w	r8,r8[0x0]
8000e1f4:	70 19       	ld.w	r9,r8[0x4]
8000e1f6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000e1fa:	a3 68       	lsl	r8,0x2
8000e1fc:	f2 08 00 08 	add	r8,r9,r8
8000e200:	70 08       	ld.w	r8,r8[0x0]
8000e202:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000e206:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e20a:	70 38       	ld.w	r8,r8[0xc]
8000e20c:	5d 18       	icall	r8
8000e20e:	18 98       	mov	r8,r12
8000e210:	10 99       	mov	r9,r8
8000e212:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000e216:	12 9b       	mov	r11,r9
8000e218:	10 9c       	mov	r12,r8
8000e21a:	f0 1f 00 0d 	mcall	8000e24c <udc_req_iface+0xa8>
8000e21e:	18 98       	mov	r8,r12
8000e220:	ec 18 00 01 	eorl	r8,0x1
8000e224:	5c 58       	castu.b	r8
8000e226:	c0 30       	breq	8000e22c <udc_req_iface+0x88>
		return false;
8000e228:	30 08       	mov	r8,0
8000e22a:	c0 68       	rjmp	8000e236 <udc_req_iface+0x92>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
8000e22c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e230:	70 28       	ld.w	r8,r8[0x8]
8000e232:	5d 18       	icall	r8
8000e234:	18 98       	mov	r8,r12
}
8000e236:	10 9c       	mov	r12,r8
8000e238:	2f ed       	sub	sp,-8
8000e23a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e23e:	00 00       	add	r0,r0
8000e240:	00 00       	add	r0,r0
8000e242:	08 56       	eor	r6,r4
8000e244:	00 00       	add	r0,r0
8000e246:	10 0c       	add	r12,r8
8000e248:	00 00       	add	r0,r0
8000e24a:	08 58       	eor	r8,r4
8000e24c:	80 00       	ld.sh	r0,r0[0x0]
8000e24e:	d5 08       	*unknown*

8000e250 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
8000e250:	eb cd 40 80 	pushm	r7,lr
8000e254:	1a 97       	mov	r7,sp
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
8000e256:	49 a9       	lddpc	r9,8000e2bc <udc_process_setup+0x6c>
8000e258:	30 08       	mov	r8,0
8000e25a:	b2 68       	st.h	r9[0xc],r8
	udd_g_ctrlreq.callback = NULL;
8000e25c:	49 88       	lddpc	r8,8000e2bc <udc_process_setup+0x6c>
8000e25e:	30 09       	mov	r9,0
8000e260:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000e262:	49 78       	lddpc	r8,8000e2bc <udc_process_setup+0x6c>
8000e264:	30 09       	mov	r9,0
8000e266:	91 59       	st.w	r8[0x14],r9

	if (Udd_setup_is_in()) {
8000e268:	49 58       	lddpc	r8,8000e2bc <udc_process_setup+0x6c>
8000e26a:	11 88       	ld.ub	r8,r8[0x0]
8000e26c:	10 99       	mov	r9,r8
8000e26e:	30 08       	mov	r8,0
8000e270:	f0 09 18 00 	cp.b	r9,r8
8000e274:	c0 74       	brge	8000e282 <udc_process_setup+0x32>
		if (udd_g_ctrlreq.req.wLength == 0) {
8000e276:	49 28       	lddpc	r8,8000e2bc <udc_process_setup+0x6c>
8000e278:	90 38       	ld.sh	r8,r8[0x6]
8000e27a:	58 08       	cp.w	r8,0
8000e27c:	c0 31       	brne	8000e282 <udc_process_setup+0x32>
			return false; // Error from USB host
8000e27e:	30 08       	mov	r8,0
8000e280:	c1 b8       	rjmp	8000e2b6 <udc_process_setup+0x66>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
8000e282:	48 f8       	lddpc	r8,8000e2bc <udc_process_setup+0x6c>
8000e284:	11 88       	ld.ub	r8,r8[0x0]
8000e286:	e2 18 00 60 	andl	r8,0x60,COH
8000e28a:	c0 81       	brne	8000e29a <udc_process_setup+0x4a>
		if (udc_reqstd()) {
8000e28c:	f0 1f 00 0d 	mcall	8000e2c0 <udc_process_setup+0x70>
8000e290:	18 98       	mov	r8,r12
8000e292:	58 08       	cp.w	r8,0
8000e294:	c0 30       	breq	8000e29a <udc_process_setup+0x4a>
			return true;
8000e296:	30 18       	mov	r8,1
8000e298:	c0 f8       	rjmp	8000e2b6 <udc_process_setup+0x66>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
8000e29a:	48 98       	lddpc	r8,8000e2bc <udc_process_setup+0x6c>
8000e29c:	11 88       	ld.ub	r8,r8[0x0]
8000e29e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e2a2:	58 18       	cp.w	r8,1
8000e2a4:	c0 81       	brne	8000e2b4 <udc_process_setup+0x64>
		if (udc_req_iface()) {
8000e2a6:	f0 1f 00 08 	mcall	8000e2c4 <udc_process_setup+0x74>
8000e2aa:	18 98       	mov	r8,r12
8000e2ac:	58 08       	cp.w	r8,0
8000e2ae:	c0 30       	breq	8000e2b4 <udc_process_setup+0x64>
			return true;
8000e2b0:	30 18       	mov	r8,1
8000e2b2:	c0 28       	rjmp	8000e2b6 <udc_process_setup+0x66>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
8000e2b4:	30 08       	mov	r8,0
#endif
}
8000e2b6:	10 9c       	mov	r12,r8
8000e2b8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e2bc:	00 00       	add	r0,r0
8000e2be:	10 0c       	add	r12,r8
8000e2c0:	80 00       	ld.sh	r0,r0[0x0]
8000e2c2:	e0 50 80 00 	cp.w	r0,98304
8000e2c6:	e1 a4 eb cd 	cop	cp7,cr11,cr12,cr13,0x8

8000e2c8 <pm_sleep>:
#else
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
8000e2c8:	eb cd 40 80 	pushm	r7,lr
8000e2cc:	1a 97       	mov	r7,sp
8000e2ce:	20 1d       	sub	sp,4
8000e2d0:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (sleep_mode) {
8000e2d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e2d8:	58 58       	cp.w	r8,5
8000e2da:	c4 30       	breq	8000e360 <pm_sleep+0x98>
8000e2dc:	e0 89 00 10 	brgt	8000e2fc <pm_sleep+0x34>
8000e2e0:	58 28       	cp.w	r8,2
8000e2e2:	c2 d0       	breq	8000e33c <pm_sleep+0x74>
8000e2e4:	e0 89 00 07 	brgt	8000e2f2 <pm_sleep+0x2a>
8000e2e8:	58 08       	cp.w	r8,0
8000e2ea:	c1 d0       	breq	8000e324 <pm_sleep+0x5c>
8000e2ec:	58 18       	cp.w	r8,1
8000e2ee:	c2 10       	breq	8000e330 <pm_sleep+0x68>
8000e2f0:	c3 d8       	rjmp	8000e36a <pm_sleep+0xa2>
8000e2f2:	58 38       	cp.w	r8,3
8000e2f4:	c2 a0       	breq	8000e348 <pm_sleep+0x80>
8000e2f6:	58 48       	cp.w	r8,4
8000e2f8:	c2 e0       	breq	8000e354 <pm_sleep+0x8c>
8000e2fa:	c3 88       	rjmp	8000e36a <pm_sleep+0xa2>
8000e2fc:	e0 48 00 82 	cp.w	r8,130
8000e300:	c2 10       	breq	8000e342 <pm_sleep+0x7a>
8000e302:	e0 89 00 09 	brgt	8000e314 <pm_sleep+0x4c>
8000e306:	e0 48 00 80 	cp.w	r8,128
8000e30a:	c1 00       	breq	8000e32a <pm_sleep+0x62>
8000e30c:	e0 48 00 81 	cp.w	r8,129
8000e310:	c1 30       	breq	8000e336 <pm_sleep+0x6e>
8000e312:	c2 c8       	rjmp	8000e36a <pm_sleep+0xa2>
8000e314:	e0 48 00 84 	cp.w	r8,132
8000e318:	c2 10       	breq	8000e35a <pm_sleep+0x92>
8000e31a:	c1 a5       	brlt	8000e34e <pm_sleep+0x86>
8000e31c:	e0 48 00 85 	cp.w	r8,133
8000e320:	c2 30       	breq	8000e366 <pm_sleep+0x9e>
8000e322:	c2 48       	rjmp	8000e36a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
8000e324:	e9 b0 00 00 	sleep	0x0
		break;
8000e328:	c2 18       	rjmp	8000e36a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
8000e32a:	e9 b0 00 80 	sleep	0x80
		break;
8000e32e:	c1 e8       	rjmp	8000e36a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
8000e330:	e9 b0 00 01 	sleep	0x1
		break;
8000e334:	c1 b8       	rjmp	8000e36a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
8000e336:	e9 b0 00 81 	sleep	0x81
		break;
8000e33a:	c1 88       	rjmp	8000e36a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
8000e33c:	e9 b0 00 02 	sleep	0x2
		break;
8000e340:	c1 58       	rjmp	8000e36a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
8000e342:	e9 b0 00 82 	sleep	0x82
		break;
8000e346:	c1 28       	rjmp	8000e36a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
8000e348:	e9 b0 00 03 	sleep	0x3
		break;
8000e34c:	c0 f8       	rjmp	8000e36a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
8000e34e:	e9 b0 00 83 	sleep	0x83
		break;
8000e352:	c0 c8       	rjmp	8000e36a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
8000e354:	e9 b0 00 04 	sleep	0x4
		break;
8000e358:	c0 98       	rjmp	8000e36a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000e35a:	e9 b0 00 84 	sleep	0x84
		break;
8000e35e:	c0 68       	rjmp	8000e36a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
8000e360:	e9 b0 00 05 	sleep	0x5
		break;
8000e364:	c0 38       	rjmp	8000e36a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
8000e366:	e9 b0 00 85 	sleep	0x85
		break;
#endif
	default:
		break;
	}
}
8000e36a:	2f fd       	sub	sp,-4
8000e36c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e370 <sleepmgr_sleep>:
//! @}



static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
8000e370:	eb cd 40 80 	pushm	r7,lr
8000e374:	1a 97       	mov	r7,sp
8000e376:	20 1d       	sub	sp,4
8000e378:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
8000e37c:	d3 03       	ssrf	0x10

	// Atomically enable the global interrupts and enter the sleep mode.
	pm_sleep(AVR32_PM_SMODE_GMCLEAR_MASK | (sleep_mode-1));
8000e37e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e382:	20 18       	sub	r8,1
8000e384:	a7 b8       	sbr	r8,0x7
8000e386:	10 9c       	mov	r12,r8
8000e388:	f0 1f 00 03 	mcall	8000e394 <sleepmgr_sleep+0x24>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
8000e38c:	2f fd       	sub	sp,-4
8000e38e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e392:	00 00       	add	r0,r0
8000e394:	80 00       	ld.sh	r0,r0[0x0]
8000e396:	e2 c8 eb cd 	sub	r8,r1,-5171

8000e398 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8000e398:	eb cd 40 80 	pushm	r7,lr
8000e39c:	1a 97       	mov	r7,sp
8000e39e:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000e3a0:	30 08       	mov	r8,0
8000e3a2:	ef 68 ff ff 	st.b	r7[-1],r8
8000e3a6:	c0 c8       	rjmp	8000e3be <sleepmgr_init+0x26>
		sleepmgr_locks[i] = 0;
8000e3a8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000e3ac:	48 ba       	lddpc	r10,8000e3d8 <sleepmgr_init+0x40>
8000e3ae:	30 08       	mov	r8,0
8000e3b0:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000e3b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e3b8:	2f f8       	sub	r8,-1
8000e3ba:	ef 68 ff ff 	st.b	r7[-1],r8
8000e3be:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000e3c2:	30 58       	mov	r8,5
8000e3c4:	f0 09 18 00 	cp.b	r9,r8
8000e3c8:	fe 98 ff f0 	brls	8000e3a8 <sleepmgr_init+0x10>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8000e3cc:	48 39       	lddpc	r9,8000e3d8 <sleepmgr_init+0x40>
8000e3ce:	30 18       	mov	r8,1
8000e3d0:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000e3d2:	2f fd       	sub	sp,-4
8000e3d4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e3d8:	00 00       	add	r0,r0
8000e3da:	10 24       	rsub	r4,r8

8000e3dc <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
8000e3dc:	eb cd 40 80 	pushm	r7,lr
8000e3e0:	1a 97       	mov	r7,sp
8000e3e2:	20 2d       	sub	sp,8
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
8000e3e4:	30 08       	mov	r8,0
8000e3e6:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
8000e3ea:	48 d8       	lddpc	r8,8000e41c <sleepmgr_get_sleep_mode+0x40>
8000e3ec:	ef 48 ff fc 	st.w	r7[-4],r8

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000e3f0:	c0 b8       	rjmp	8000e406 <sleepmgr_get_sleep_mode+0x2a>
		lock_ptr++;
8000e3f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e3f6:	2f f8       	sub	r8,-1
8000e3f8:	ef 48 ff fc 	st.w	r7[-4],r8
		sleep_mode++;
8000e3fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e400:	2f f8       	sub	r8,-1
8000e402:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000e406:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e40a:	11 88       	ld.ub	r8,r8[0x0]
8000e40c:	58 08       	cp.w	r8,0
8000e40e:	cf 20       	breq	8000e3f2 <sleepmgr_get_sleep_mode+0x16>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
8000e410:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000e414:	10 9c       	mov	r12,r8
8000e416:	2f ed       	sub	sp,-8
8000e418:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e41c:	00 00       	add	r0,r0
8000e41e:	10 24       	rsub	r4,r8

8000e420 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
8000e420:	eb cd 40 80 	pushm	r7,lr
8000e424:	1a 97       	mov	r7,sp
8000e426:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
8000e428:	d3 03       	ssrf	0x10

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
8000e42a:	f0 1f 00 0a 	mcall	8000e450 <sleepmgr_enter_sleep+0x30>
8000e42e:	18 98       	mov	r8,r12
8000e430:	ef 48 ff fc 	st.w	r7[-4],r8
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
8000e434:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e438:	58 08       	cp.w	r8,0
8000e43a:	c0 31       	brne	8000e440 <sleepmgr_enter_sleep+0x20>
		cpu_irq_enable();
8000e43c:	d5 03       	csrf	0x10
		return;
8000e43e:	c0 58       	rjmp	8000e448 <sleepmgr_enter_sleep+0x28>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
8000e440:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e444:	f0 1f 00 04 	mcall	8000e454 <sleepmgr_enter_sleep+0x34>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000e448:	2f fd       	sub	sp,-4
8000e44a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e44e:	00 00       	add	r0,r0
8000e450:	80 00       	ld.sh	r0,r0[0x0]
8000e452:	e3 dc 80 00 	ldswp.w	r12,r1[0]
8000e456:	e3 70 eb cd 	stcond	r1[-5171],r0

8000e458 <udc_include_vbus_monitoring>:
 *        // Start USB \n
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
8000e458:	eb cd 40 80 	pushm	r7,lr
8000e45c:	1a 97       	mov	r7,sp
	return udd_include_vbus_monitoring();
8000e45e:	f0 1f 00 04 	mcall	8000e46c <udc_include_vbus_monitoring+0x14>
8000e462:	18 98       	mov	r8,r12
}
8000e464:	10 9c       	mov	r12,r8
8000e466:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e46a:	00 00       	add	r0,r0
8000e46c:	80 00       	ld.sh	r0,r0[0x0]
8000e46e:	9f 48       	st.w	pc[0x10],r8

8000e470 <udc_attach>:
 * \warning If a VBus control is included in driver,
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
8000e470:	eb cd 40 80 	pushm	r7,lr
8000e474:	1a 97       	mov	r7,sp
	udd_attach();
8000e476:	f0 1f 00 03 	mcall	8000e480 <udc_attach+0x10>
}
8000e47a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e47e:	00 00       	add	r0,r0
8000e480:	80 00       	ld.sh	r0,r0[0x0]
8000e482:	a0 78       	st.h	r0[0xe],r8

8000e484 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
8000e484:	eb cd 40 80 	pushm	r7,lr
8000e488:	1a 97       	mov	r7,sp
	udd_detach();
8000e48a:	f0 1f 00 03 	mcall	8000e494 <udc_detach+0x10>
}
8000e48e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e492:	00 00       	add	r0,r0
8000e494:	80 00       	ld.sh	r0,r0[0x0]
8000e496:	a1 24       	st.d	r0++,r4

8000e498 <main>:
static bool main_b_msc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
8000e498:	eb cd 40 80 	pushm	r7,lr
8000e49c:	1a 97       	mov	r7,sp
8000e49e:	20 1d       	sub	sp,4
	uint8_t i = 0;
8000e4a0:	30 08       	mov	r8,0
8000e4a2:	ef 68 ff ff 	st.b	r7[-1],r8
	irq_initialize_vectors();
8000e4a6:	f0 1f 00 2b 	mcall	8000e550 <main+0xb8>
	cpu_irq_enable();
8000e4aa:	d5 03       	csrf	0x10

	// Initialize the sleep manager
	sleepmgr_init();
8000e4ac:	f0 1f 00 2a 	mcall	8000e554 <main+0xbc>

	sysclk_init();
8000e4b0:	f0 1f 00 2a 	mcall	8000e558 <main+0xc0>
	board_init();
8000e4b4:	f0 1f 00 2a 	mcall	8000e55c <main+0xc4>

	ui_init();
8000e4b8:	f0 1f 00 2a 	mcall	8000e560 <main+0xc8>
	ui_powerdown();
8000e4bc:	f0 1f 00 2a 	mcall	8000e564 <main+0xcc>

	memories_initialization();
8000e4c0:	f0 1f 00 2a 	mcall	8000e568 <main+0xd0>

	// Initialize LCD
	et024006_Init( FOSC0, FOSC0 );
8000e4c4:	e0 6b 1b 00 	mov	r11,6912
8000e4c8:	ea 1b 00 b7 	orh	r11,0xb7
8000e4cc:	e0 6c 1b 00 	mov	r12,6912
8000e4d0:	ea 1c 00 b7 	orh	r12,0xb7
8000e4d4:	f0 1f 00 26 	mcall	8000e56c <main+0xd4>
	gpio_set_gpio_pin(ET024006DHU_BL_PIN);
8000e4d8:	30 9c       	mov	r12,9
8000e4da:	f0 1f 00 26 	mcall	8000e570 <main+0xd8>
	
	//et024006_PrintConsole("Welcome Eric", BLACK, -1);
	//clear_lcd
	et024006_DrawFilledRect(1, 1, ET024006_WIDTH, ET024006_HEIGHT, BLACK);
8000e4de:	30 08       	mov	r8,0
8000e4e0:	e0 69 00 f0 	mov	r9,240
8000e4e4:	e0 6a 01 40 	mov	r10,320
8000e4e8:	30 1b       	mov	r11,1
8000e4ea:	30 1c       	mov	r12,1
8000e4ec:	f0 1f 00 22 	mcall	8000e574 <main+0xdc>
	
	// Initialize AES module
	aes_task();
8000e4f0:	f0 1f 00 22 	mcall	8000e578 <main+0xe0>

	// Start TC
	tc_task();
8000e4f4:	f0 1f 00 22 	mcall	8000e57c <main+0xe4>

	// Initialize crc for fast calculations
	crcInit();
8000e4f8:	f0 1f 00 22 	mcall	8000e580 <main+0xe8>
		
	// Read the stored values from the flash
	Load_stored_values();
8000e4fc:	f0 1f 00 22 	mcall	8000e584 <main+0xec>
	
	Stored_values_ram.salt[5] = 0x4d68ab23;
8000e500:	4a 28       	lddpc	r8,8000e588 <main+0xf0>
8000e502:	e0 69 ab 23 	mov	r9,43811
8000e506:	ea 19 4d 68 	orh	r9,0x4d68
8000e50a:	f1 49 00 b4 	st.w	r8[180],r9
	
	Update_stored_values();
8000e50e:	f0 1f 00 20 	mcall	8000e58c <main+0xf4>
	// Start USB stack to authorize VBus monitoring
	udc_start();
8000e512:	f0 1f 00 20 	mcall	8000e590 <main+0xf8>

	if (!udc_include_vbus_monitoring()) {
8000e516:	f0 1f 00 20 	mcall	8000e594 <main+0xfc>
8000e51a:	18 98       	mov	r8,r12
8000e51c:	ec 18 00 01 	eorl	r8,0x1
8000e520:	5c 58       	castu.b	r8
8000e522:	c0 60       	breq	8000e52e <main+0x96>
		// VBUS monitoring is not available on this product
		// thereby VBUS has to be considered as present
		main_vbus_action(true);
8000e524:	30 1c       	mov	r12,1
8000e526:	f0 1f 00 1d 	mcall	8000e598 <main+0x100>
8000e52a:	c0 28       	rjmp	8000e52e <main+0x96>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e52c:	d7 03       	nop

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true)
	{
		if (main_b_msc_enable)
8000e52e:	49 c8       	lddpc	r8,8000e59c <main+0x104>
8000e530:	11 88       	ld.ub	r8,r8[0x0]
8000e532:	58 08       	cp.w	r8,0
8000e534:	c0 b0       	breq	8000e54a <main+0xb2>
		{
			if (!udi_msc_process_trans())
8000e536:	f0 1f 00 1b 	mcall	8000e5a0 <main+0x108>
8000e53a:	18 98       	mov	r8,r12
8000e53c:	ec 18 00 01 	eorl	r8,0x1
8000e540:	5c 58       	castu.b	r8
8000e542:	cf 50       	breq	8000e52c <main+0x94>
			{
				sleepmgr_enter_sleep();
8000e544:	f0 1f 00 18 	mcall	8000e5a4 <main+0x10c>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e548:	cf 3b       	rjmp	8000e52e <main+0x96>
				sleepmgr_enter_sleep();
			}
		}
		else
		{
			sleepmgr_enter_sleep();
8000e54a:	f0 1f 00 17 	mcall	8000e5a4 <main+0x10c>
		}
		//main_process_mode();
	}
8000e54e:	cf 0b       	rjmp	8000e52e <main+0x96>
8000e550:	80 00       	ld.sh	r0,r0[0x0]
8000e552:	92 80       	ld.uh	r0,r9[0x0]
8000e554:	80 00       	ld.sh	r0,r0[0x0]
8000e556:	e3 98       	*unknown*
8000e558:	80 00       	ld.sh	r0,r0[0x0]
8000e55a:	c3 44       	brge	8000e5c2 <main_vbus_action+0x1a>
8000e55c:	80 00       	ld.sh	r0,r0[0x0]
8000e55e:	45 d4       	lddsp	r4,sp[0x174]
8000e560:	80 00       	ld.sh	r0,r0[0x0]
8000e562:	c5 cc       	rcall	8000e61a <main_sof_action+0x16>
8000e564:	80 00       	ld.sh	r0,r0[0x0]
8000e566:	c5 ec       	rcall	8000e622 <main_sof_action+0x1e>
8000e568:	80 00       	ld.sh	r0,r0[0x0]
8000e56a:	e7 20 80 00 	ld.sb	r0,r3[-32768]
8000e56e:	47 bc       	lddsp	r12,sp[0x1ec]
8000e570:	80 00       	ld.sh	r0,r0[0x0]
8000e572:	90 ba       	ld.uh	r10,r8[0x6]
8000e574:	80 00       	ld.sh	r0,r0[0x0]
8000e576:	48 34       	lddpc	r4,8000e580 <main+0xe8>
8000e578:	80 00       	ld.sh	r0,r0[0x0]
8000e57a:	44 40       	lddsp	r0,sp[0x110]
8000e57c:	80 00       	ld.sh	r0,r0[0x0]
8000e57e:	43 a8       	lddsp	r8,sp[0xe8]
8000e580:	80 00       	ld.sh	r0,r0[0x0]
8000e582:	20 08       	sub	r8,0
8000e584:	80 00       	ld.sh	r0,r0[0x0]
8000e586:	2f e8       	sub	r8,-2
8000e588:	00 00       	add	r0,r0
8000e58a:	0a 88       	andn	r8,r5
8000e58c:	80 00       	ld.sh	r0,r0[0x0]
8000e58e:	2f c4       	sub	r4,-4
8000e590:	80 00       	ld.sh	r0,r0[0x0]
8000e592:	d7 44       	*unknown*
8000e594:	80 00       	ld.sh	r0,r0[0x0]
8000e596:	e4 58 80 00 	cp.w	r8,360448
8000e59a:	e5 a8 00 00 	cop	cp0,cr0,cr0,cr0,0x50
8000e59e:	08 64       	and	r4,r4
8000e5a0:	80 00       	ld.sh	r0,r0[0x0]
8000e5a2:	d2 40       	acall	0x90
8000e5a4:	80 00       	ld.sh	r0,r0[0x0]
8000e5a6:	e4 20 eb cd 	sub	r0,322509

8000e5a8 <main_vbus_action>:
}

void main_vbus_action(bool b_high)
{
8000e5a8:	eb cd 40 80 	pushm	r7,lr
8000e5ac:	1a 97       	mov	r7,sp
8000e5ae:	20 1d       	sub	sp,4
8000e5b0:	18 98       	mov	r8,r12
8000e5b2:	ef 68 ff fc 	st.b	r7[-4],r8
	if (b_high) {
8000e5b6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000e5ba:	30 08       	mov	r8,0
8000e5bc:	f0 09 18 00 	cp.b	r9,r8
8000e5c0:	c0 40       	breq	8000e5c8 <main_vbus_action+0x20>
		// Attach USB Device
		udc_attach();
8000e5c2:	f0 1f 00 05 	mcall	8000e5d4 <main_vbus_action+0x2c>
8000e5c6:	c0 38       	rjmp	8000e5cc <main_vbus_action+0x24>
	} else {
		// VBUS not present
		udc_detach();
8000e5c8:	f0 1f 00 04 	mcall	8000e5d8 <main_vbus_action+0x30>
	}
}
8000e5cc:	2f fd       	sub	sp,-4
8000e5ce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e5d2:	00 00       	add	r0,r0
8000e5d4:	80 00       	ld.sh	r0,r0[0x0]
8000e5d6:	e4 70 80 00 	mov	r0,360448
8000e5da:	e4 84 eb cd 	brge	800abd74 <Stored_values_flash+0x6bf74>

8000e5dc <main_suspend_action>:

void main_suspend_action(void)
{
8000e5dc:	eb cd 40 80 	pushm	r7,lr
8000e5e0:	1a 97       	mov	r7,sp
	ui_powerdown();
8000e5e2:	f0 1f 00 03 	mcall	8000e5ec <main_suspend_action+0x10>
}
8000e5e6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e5ea:	00 00       	add	r0,r0
8000e5ec:	80 00       	ld.sh	r0,r0[0x0]
8000e5ee:	c5 ec       	rcall	8000e6aa <osc_get_rate+0x42>

8000e5f0 <main_resume_action>:

void main_resume_action(void)
{
8000e5f0:	eb cd 40 80 	pushm	r7,lr
8000e5f4:	1a 97       	mov	r7,sp
	ui_wakeup();
8000e5f6:	f0 1f 00 03 	mcall	8000e600 <main_resume_action+0x10>
}
8000e5fa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e5fe:	00 00       	add	r0,r0
8000e600:	80 00       	ld.sh	r0,r0[0x0]
8000e602:	c6 08       	rjmp	8000e6c2 <sysclk_get_main_hz+0x16>

8000e604 <main_sof_action>:

void main_sof_action(void)
{
8000e604:	eb cd 40 80 	pushm	r7,lr
8000e608:	1a 97       	mov	r7,sp
	if (!main_b_msc_enable)
8000e60a:	48 a8       	lddpc	r8,8000e630 <main_sof_action+0x2c>
8000e60c:	11 88       	ld.ub	r8,r8[0x0]
8000e60e:	ec 18 00 01 	eorl	r8,0x1
8000e612:	5c 58       	castu.b	r8
8000e614:	c0 a1       	brne	8000e628 <main_sof_action+0x24>
		return;
	ui_process(udd_get_frame_number());
8000e616:	f0 1f 00 08 	mcall	8000e634 <main_sof_action+0x30>
8000e61a:	18 98       	mov	r8,r12
8000e61c:	5c 88       	casts.h	r8
8000e61e:	5c 78       	castu.h	r8
8000e620:	10 9c       	mov	r12,r8
8000e622:	f0 1f 00 06 	mcall	8000e638 <main_sof_action+0x34>
8000e626:	c0 28       	rjmp	8000e62a <main_sof_action+0x26>
}

void main_sof_action(void)
{
	if (!main_b_msc_enable)
		return;
8000e628:	d7 03       	nop
	ui_process(udd_get_frame_number());
}
8000e62a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e62e:	00 00       	add	r0,r0
8000e630:	00 00       	add	r0,r0
8000e632:	08 64       	and	r4,r4
8000e634:	80 00       	ld.sh	r0,r0[0x0]
8000e636:	a1 e6       	*unknown*
8000e638:	80 00       	ld.sh	r0,r0[0x0]
8000e63a:	c6 6c       	rcall	8000e706 <sysclk_enable_hsb_module+0x6>

8000e63c <main_msc_enable>:

bool main_msc_enable(void)
{
8000e63c:	eb cd 40 80 	pushm	r7,lr
8000e640:	1a 97       	mov	r7,sp
	main_b_msc_enable = true;
8000e642:	48 49       	lddpc	r9,8000e650 <main_msc_enable+0x14>
8000e644:	30 18       	mov	r8,1
8000e646:	b2 88       	st.b	r9[0x0],r8
	return true;
8000e648:	30 18       	mov	r8,1
}
8000e64a:	10 9c       	mov	r12,r8
8000e64c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e650:	00 00       	add	r0,r0
8000e652:	08 64       	and	r4,r4

8000e654 <main_msc_disable>:

void main_msc_disable(void)
{
8000e654:	eb cd 40 80 	pushm	r7,lr
8000e658:	1a 97       	mov	r7,sp
	main_b_msc_enable = false;
8000e65a:	48 39       	lddpc	r9,8000e664 <main_msc_disable+0x10>
8000e65c:	30 08       	mov	r8,0
8000e65e:	b2 88       	st.b	r9[0x0],r8
}
8000e660:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e664:	00 00       	add	r0,r0
8000e666:	08 64       	and	r4,r4

8000e668 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
8000e668:	eb cd 40 80 	pushm	r7,lr
8000e66c:	1a 97       	mov	r7,sp
8000e66e:	20 1d       	sub	sp,4
8000e670:	18 98       	mov	r8,r12
8000e672:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000e676:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000e67a:	58 18       	cp.w	r8,1
8000e67c:	c0 a0       	breq	8000e690 <osc_get_rate+0x28>
8000e67e:	58 28       	cp.w	r8,2
8000e680:	c0 d0       	breq	8000e69a <osc_get_rate+0x32>
8000e682:	58 08       	cp.w	r8,0
8000e684:	c0 e1       	brne	8000e6a0 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000e686:	e0 68 1b 00 	mov	r8,6912
8000e68a:	ea 18 00 b7 	orh	r8,0xb7
8000e68e:	c0 a8       	rjmp	8000e6a2 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000e690:	e0 68 44 00 	mov	r8,17408
8000e694:	ea 18 00 ac 	orh	r8,0xac
8000e698:	c0 58       	rjmp	8000e6a2 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000e69a:	e0 68 80 00 	mov	r8,32768
8000e69e:	c0 28       	rjmp	8000e6a2 <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000e6a0:	30 08       	mov	r8,0
	}
}
8000e6a2:	10 9c       	mov	r12,r8
8000e6a4:	2f fd       	sub	sp,-4
8000e6a6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e6aa:	d7 03       	nop

8000e6ac <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000e6ac:	eb cd 40 80 	pushm	r7,lr
8000e6b0:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000e6b2:	30 0c       	mov	r12,0
8000e6b4:	f0 1f 00 06 	mcall	8000e6cc <sysclk_get_main_hz+0x20>
8000e6b8:	18 99       	mov	r9,r12
8000e6ba:	12 98       	mov	r8,r9
8000e6bc:	a3 68       	lsl	r8,0x2
8000e6be:	12 08       	add	r8,r9
8000e6c0:	a1 78       	lsl	r8,0x1
8000e6c2:	12 08       	add	r8,r9
8000e6c4:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000e6c6:	10 9c       	mov	r12,r8
8000e6c8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e6cc:	80 00       	ld.sh	r0,r0[0x0]
8000e6ce:	e6 68 eb cd 	mov	r8,453581

8000e6d0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000e6d0:	eb cd 40 80 	pushm	r7,lr
8000e6d4:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000e6d6:	f0 1f 00 04 	mcall	8000e6e4 <sysclk_get_cpu_hz+0x14>
8000e6da:	18 98       	mov	r8,r12
}
8000e6dc:	10 9c       	mov	r12,r8
8000e6de:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e6e2:	00 00       	add	r0,r0
8000e6e4:	80 00       	ld.sh	r0,r0[0x0]
8000e6e6:	e6 ac       	*unknown*

8000e6e8 <sysclk_get_pbb_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus B clock
 *
 * \return Frequency of the Peripheral Bus B clock, in Hz.
 */
static inline uint32_t sysclk_get_pbb_hz(void)
{
8000e6e8:	eb cd 40 80 	pushm	r7,lr
8000e6ec:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBB_DIV;
8000e6ee:	f0 1f 00 04 	mcall	8000e6fc <sysclk_get_pbb_hz+0x14>
8000e6f2:	18 98       	mov	r8,r12
}
8000e6f4:	10 9c       	mov	r12,r8
8000e6f6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e6fa:	00 00       	add	r0,r0
8000e6fc:	80 00       	ld.sh	r0,r0[0x0]
8000e6fe:	e6 ac       	*unknown*

8000e700 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000e700:	eb cd 40 80 	pushm	r7,lr
8000e704:	1a 97       	mov	r7,sp
8000e706:	20 1d       	sub	sp,4
8000e708:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000e70c:	ee fb ff fc 	ld.w	r11,r7[-4]
8000e710:	30 1c       	mov	r12,1
8000e712:	f0 1f 00 03 	mcall	8000e71c <sysclk_enable_hsb_module+0x1c>
}
8000e716:	2f fd       	sub	sp,-4
8000e718:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e71c:	80 00       	ld.sh	r0,r0[0x0]
8000e71e:	c2 1c       	rcall	8000e760 <memories_initialization+0x40>

8000e720 <memories_initialization>:
# include "spi.h"
# include "conf_sd_mmc_spi.h"
#endif

void memories_initialization(void)
{
8000e720:	eb cd 40 c0 	pushm	r6-r7,lr
8000e724:	1a 97       	mov	r7,sp
8000e726:	20 2d       	sub	sp,8
	union {
		unsigned long scfg;
		avr32_hmatrix_scfg_t SCFG;
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);
8000e728:	30 0c       	mov	r12,0
8000e72a:	f0 1f 00 42 	mcall	8000e830 <memories_initialization+0x110>

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
8000e72e:	fe 68 10 00 	mov	r8,-126976
8000e732:	71 08       	ld.w	r8,r8[0x40]
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e734:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e738:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e73c:	30 19       	mov	r9,1
8000e73e:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e742:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000e746:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e74a:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000e74e:	f1 49 00 40 	st.w	r8[64],r9
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
8000e752:	fe 68 10 00 	mov	r8,-126976
8000e756:	71 48       	ld.w	r8,r8[0x50]
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e758:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e75c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e760:	30 19       	mov	r9,1
8000e762:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e766:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000e76a:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e76e:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000e772:	f1 49 00 50 	st.w	r8[80],r9
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
8000e776:	fe 68 10 00 	mov	r8,-126976
8000e77a:	71 68       	ld.w	r8,r8[0x58]
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e77c:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e780:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e784:	30 19       	mov	r9,1
8000e786:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e78a:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000e78e:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e792:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000e796:	f1 49 00 58 	st.w	r8[88],r9
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
8000e79a:	fe 68 10 00 	mov	r8,-126976
8000e79e:	70 68       	ld.w	r8,r8[0x18]
		unsigned long                 mcfg;
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
8000e7a0:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
8000e7a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e7a8:	30 09       	mov	r9,0
8000e7aa:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000e7ae:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000e7b2:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_mcfg.mcfg;
8000e7b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000e7ba:	91 69       	st.w	r8[0x18],r9
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
8000e7bc:	fe 68 10 00 	mov	r8,-126976
8000e7c0:	71 58       	ld.w	r8,r8[0x54]
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
8000e7c2:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
8000e7c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e7ca:	30 69       	mov	r9,6
8000e7cc:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
8000e7d0:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e7d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e7d8:	30 29       	mov	r9,2
8000e7da:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e7de:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000e7e2:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e7e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000e7ea:	f1 49 00 54 	st.w	r8[84],r9
#endif

//#if ((defined SD_MMC_MCI_0_MEM) && (SD_MMC_MCI_0_MEM == ENABLE)) \
	//|| ((defined SD_MMC_MCI_1_MEM) && (SD_MMC_MCI_1_MEM == ENABLE))
#if ((defined (SD_MMC_MCI_0_MEM) || defined(SD_MMC_MCI_1_MEM) ) && (SD_MMC_MCI_0_MEM == ENABLE || SD_MMC_MCI_1_MEM == ENABLE))	
	sysclk_enable_pbb_module(SYSCLK_MCI);
8000e7ee:	30 6c       	mov	r12,6
8000e7f0:	f0 1f 00 10 	mcall	8000e830 <memories_initialization+0x110>
	sysclk_enable_hsb_module(SYSCLK_DMACA);
8000e7f4:	30 7c       	mov	r12,7
8000e7f6:	f0 1f 00 10 	mcall	8000e834 <memories_initialization+0x114>
#if SD_MMC_MCI_0_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_8BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000e7fa:	f0 1f 00 10 	mcall	8000e838 <memories_initialization+0x118>
8000e7fe:	18 98       	mov	r8,r12
8000e800:	10 96       	mov	r6,r8
8000e802:	f0 1f 00 0f 	mcall	8000e83c <memories_initialization+0x11c>
8000e806:	18 98       	mov	r8,r12
8000e808:	0c 9a       	mov	r10,r6
8000e80a:	10 9b       	mov	r11,r8
8000e80c:	30 0c       	mov	r12,0
8000e80e:	f0 1f 00 0d 	mcall	8000e840 <memories_initialization+0x120>
#endif
#if SD_MMC_MCI_1_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_4BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000e812:	f0 1f 00 0a 	mcall	8000e838 <memories_initialization+0x118>
8000e816:	18 98       	mov	r8,r12
8000e818:	10 96       	mov	r6,r8
8000e81a:	f0 1f 00 09 	mcall	8000e83c <memories_initialization+0x11c>
8000e81e:	18 98       	mov	r8,r12
8000e820:	0c 9a       	mov	r10,r6
8000e822:	10 9b       	mov	r11,r8
8000e824:	30 1c       	mov	r12,1
8000e826:	f0 1f 00 07 	mcall	8000e840 <memories_initialization+0x120>

	// Initialize SD/MMC with SPI PB clock.
	sd_mmc_spi_init(spiOptions,sysclk_get_pba_hz());
#endif  // SD_MMC_SPI_MEM == ENABLE

}
8000e82a:	2f ed       	sub	sp,-8
8000e82c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e830:	80 00       	ld.sh	r0,r0[0x0]
8000e832:	c2 90       	breq	8000e884 <__avr32_udiv64+0x40>
8000e834:	80 00       	ld.sh	r0,r0[0x0]
8000e836:	e7 00 80 00 	ld.sh	r0,r3[-32768]
8000e83a:	e6 d0 80 00 	satsub.w	r0,r3,-32768
8000e83e:	e6 e8 80 00 	ld.d	r8,r3[-32768]
8000e842:	68 ac       	ld.w	r12,r4[0x28]

8000e844 <__avr32_udiv64>:
8000e844:	d4 31       	pushm	r0-r7,lr
8000e846:	1a 97       	mov	r7,sp
8000e848:	20 2d       	sub	sp,8
8000e84a:	10 9e       	mov	lr,r8
8000e84c:	12 95       	mov	r5,r9
8000e84e:	14 96       	mov	r6,r10
8000e850:	58 09       	cp.w	r9,0
8000e852:	c4 91       	brne	8000e8e4 <__avr32_udiv64+0xa0>
8000e854:	16 38       	cp.w	r8,r11
8000e856:	e0 88 00 57 	brls	8000e904 <__avr32_udiv64+0xc0>
8000e85a:	f0 08 12 00 	clz	r8,r8
8000e85e:	c0 d0       	breq	8000e878 <__avr32_udiv64+0x34>
8000e860:	f6 08 09 4b 	lsl	r11,r11,r8
8000e864:	f0 09 11 20 	rsub	r9,r8,32
8000e868:	fc 08 09 4e 	lsl	lr,lr,r8
8000e86c:	f4 09 0a 49 	lsr	r9,r10,r9
8000e870:	f4 08 09 46 	lsl	r6,r10,r8
8000e874:	f3 eb 10 0b 	or	r11,r9,r11
8000e878:	fc 05 16 10 	lsr	r5,lr,0x10
8000e87c:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
8000e880:	f6 05 0d 0a 	divu	r10,r11,r5
8000e884:	ec 08 16 10 	lsr	r8,r6,0x10
8000e888:	14 99       	mov	r9,r10
8000e88a:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e88e:	b9 3a       	mul	r10,r12
8000e890:	10 3a       	cp.w	r10,r8
8000e892:	e0 88 00 0c 	brls	8000e8aa <__avr32_udiv64+0x66>
8000e896:	20 19       	sub	r9,1
8000e898:	1c 08       	add	r8,lr
8000e89a:	10 3e       	cp.w	lr,r8
8000e89c:	e0 8b 00 07 	brhi	8000e8aa <__avr32_udiv64+0x66>
8000e8a0:	10 3a       	cp.w	r10,r8
8000e8a2:	f7 b9 0b 01 	subhi	r9,1
8000e8a6:	f1 de eb 08 	addhi	r8,r8,lr
8000e8aa:	f0 0a 01 0b 	sub	r11,r8,r10
8000e8ae:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e8b2:	f6 05 0d 0a 	divu	r10,r11,r5
8000e8b6:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000e8ba:	14 98       	mov	r8,r10
8000e8bc:	f4 0c 02 4c 	mul	r12,r10,r12
8000e8c0:	0c 3c       	cp.w	r12,r6
8000e8c2:	e0 88 00 0a 	brls	8000e8d6 <__avr32_udiv64+0x92>
8000e8c6:	20 18       	sub	r8,1
8000e8c8:	1c 06       	add	r6,lr
8000e8ca:	0c 3e       	cp.w	lr,r6
8000e8cc:	e0 8b 00 05 	brhi	8000e8d6 <__avr32_udiv64+0x92>
8000e8d0:	0c 3c       	cp.w	r12,r6
8000e8d2:	f7 b8 0b 01 	subhi	r8,1
8000e8d6:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000e8da:	30 0c       	mov	r12,0
8000e8dc:	16 9a       	mov	r10,r11
8000e8de:	18 9b       	mov	r11,r12
8000e8e0:	2f ed       	sub	sp,-8
8000e8e2:	d8 32       	popm	r0-r7,pc
8000e8e4:	16 39       	cp.w	r9,r11
8000e8e6:	e0 8b 00 51 	brhi	8000e988 <__avr32_udiv64+0x144>
8000e8ea:	f2 0c 12 00 	clz	r12,r9
8000e8ee:	c5 31       	brne	8000e994 <__avr32_udiv64+0x150>
8000e8f0:	14 38       	cp.w	r8,r10
8000e8f2:	5f 89       	srls	r9
8000e8f4:	16 35       	cp.w	r5,r11
8000e8f6:	5f 38       	srlo	r8
8000e8f8:	10 49       	or	r9,r8
8000e8fa:	f8 09 18 00 	cp.b	r9,r12
8000e8fe:	c4 50       	breq	8000e988 <__avr32_udiv64+0x144>
8000e900:	30 1b       	mov	r11,1
8000e902:	c4 58       	rjmp	8000e98c <__avr32_udiv64+0x148>
8000e904:	58 08       	cp.w	r8,0
8000e906:	c0 51       	brne	8000e910 <__avr32_udiv64+0xcc>
8000e908:	30 19       	mov	r9,1
8000e90a:	f2 08 0d 08 	divu	r8,r9,r8
8000e90e:	10 9e       	mov	lr,r8
8000e910:	fc 08 12 00 	clz	r8,lr
8000e914:	e0 81 00 91 	brne	8000ea36 <__avr32_udiv64+0x1f2>
8000e918:	1c 1b       	sub	r11,lr
8000e91a:	fc 05 16 10 	lsr	r5,lr,0x10
8000e91e:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e922:	30 1c       	mov	r12,1
8000e924:	f6 05 0d 0a 	divu	r10,r11,r5
8000e928:	ec 08 16 10 	lsr	r8,r6,0x10
8000e92c:	f4 09 02 43 	mul	r3,r10,r9
8000e930:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e934:	14 9b       	mov	r11,r10
8000e936:	10 33       	cp.w	r3,r8
8000e938:	e0 88 00 0c 	brls	8000e950 <__avr32_udiv64+0x10c>
8000e93c:	20 1b       	sub	r11,1
8000e93e:	1c 08       	add	r8,lr
8000e940:	10 3e       	cp.w	lr,r8
8000e942:	e0 8b 00 07 	brhi	8000e950 <__avr32_udiv64+0x10c>
8000e946:	10 33       	cp.w	r3,r8
8000e948:	f7 bb 0b 01 	subhi	r11,1
8000e94c:	f1 de eb 08 	addhi	r8,r8,lr
8000e950:	f0 03 01 03 	sub	r3,r8,r3
8000e954:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e958:	e6 05 0d 02 	divu	r2,r3,r5
8000e95c:	ed e3 11 06 	or	r6,r6,r3<<0x10
8000e960:	04 98       	mov	r8,r2
8000e962:	e4 09 02 49 	mul	r9,r2,r9
8000e966:	0c 39       	cp.w	r9,r6
8000e968:	e0 88 00 0a 	brls	8000e97c <__avr32_udiv64+0x138>
8000e96c:	20 18       	sub	r8,1
8000e96e:	1c 06       	add	r6,lr
8000e970:	0c 3e       	cp.w	lr,r6
8000e972:	e0 8b 00 05 	brhi	8000e97c <__avr32_udiv64+0x138>
8000e976:	0c 39       	cp.w	r9,r6
8000e978:	f7 b8 0b 01 	subhi	r8,1
8000e97c:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000e980:	16 9a       	mov	r10,r11
8000e982:	18 9b       	mov	r11,r12
8000e984:	2f ed       	sub	sp,-8
8000e986:	d8 32       	popm	r0-r7,pc
8000e988:	30 0b       	mov	r11,0
8000e98a:	16 9c       	mov	r12,r11
8000e98c:	16 9a       	mov	r10,r11
8000e98e:	18 9b       	mov	r11,r12
8000e990:	2f ed       	sub	sp,-8
8000e992:	d8 32       	popm	r0-r7,pc
8000e994:	f2 0c 09 45 	lsl	r5,r9,r12
8000e998:	f8 0e 11 20 	rsub	lr,r12,32
8000e99c:	f0 0c 09 43 	lsl	r3,r8,r12
8000e9a0:	f4 0e 0a 46 	lsr	r6,r10,lr
8000e9a4:	f0 0e 0a 48 	lsr	r8,r8,lr
8000e9a8:	f6 0e 0a 4e 	lsr	lr,r11,lr
8000e9ac:	0a 48       	or	r8,r5
8000e9ae:	f0 01 16 10 	lsr	r1,r8,0x10
8000e9b2:	fc 01 0d 04 	divu	r4,lr,r1
8000e9b6:	ee e5 ff f8 	st.d	r7[-8],r4
8000e9ba:	f6 0c 09 49 	lsl	r9,r11,r12
8000e9be:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000e9c2:	ed e9 10 09 	or	r9,r6,r9
8000e9c6:	08 96       	mov	r6,r4
8000e9c8:	f2 0e 16 10 	lsr	lr,r9,0x10
8000e9cc:	ee f4 ff f8 	ld.w	r4,r7[-8]
8000e9d0:	ec 05 02 4b 	mul	r11,r6,r5
8000e9d4:	fd e4 11 0e 	or	lr,lr,r4<<0x10
8000e9d8:	1c 3b       	cp.w	r11,lr
8000e9da:	e0 88 00 07 	brls	8000e9e8 <__avr32_udiv64+0x1a4>
8000e9de:	20 16       	sub	r6,1
8000e9e0:	10 0e       	add	lr,r8
8000e9e2:	1c 38       	cp.w	r8,lr
8000e9e4:	e0 88 00 6d 	brls	8000eabe <__avr32_udiv64+0x27a>
8000e9e8:	16 1e       	sub	lr,r11
8000e9ea:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000e9ee:	fc 01 0d 00 	divu	r0,lr,r1
8000e9f2:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000e9f6:	00 9b       	mov	r11,r0
8000e9f8:	e0 05 02 4e 	mul	lr,r0,r5
8000e9fc:	12 3e       	cp.w	lr,r9
8000e9fe:	e0 88 00 07 	brls	8000ea0c <__avr32_udiv64+0x1c8>
8000ea02:	20 1b       	sub	r11,1
8000ea04:	10 09       	add	r9,r8
8000ea06:	12 38       	cp.w	r8,r9
8000ea08:	e0 88 00 55 	brls	8000eab2 <__avr32_udiv64+0x26e>
8000ea0c:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
8000ea10:	1c 19       	sub	r9,lr
8000ea12:	f6 03 06 42 	mulu.d	r2,r11,r3
8000ea16:	06 39       	cp.w	r9,r3
8000ea18:	c0 93       	brcs	8000ea2a <__avr32_udiv64+0x1e6>
8000ea1a:	5f 09       	sreq	r9
8000ea1c:	f4 0c 09 4c 	lsl	r12,r10,r12
8000ea20:	04 3c       	cp.w	r12,r2
8000ea22:	5f 38       	srlo	r8
8000ea24:	f3 e8 00 08 	and	r8,r9,r8
8000ea28:	c0 20       	breq	8000ea2c <__avr32_udiv64+0x1e8>
8000ea2a:	20 1b       	sub	r11,1
8000ea2c:	30 0c       	mov	r12,0
8000ea2e:	16 9a       	mov	r10,r11
8000ea30:	18 9b       	mov	r11,r12
8000ea32:	2f ed       	sub	sp,-8
8000ea34:	d8 32       	popm	r0-r7,pc
8000ea36:	f6 08 09 49 	lsl	r9,r11,r8
8000ea3a:	fc 08 09 4e 	lsl	lr,lr,r8
8000ea3e:	f0 01 11 20 	rsub	r1,r8,32
8000ea42:	fc 05 16 10 	lsr	r5,lr,0x10
8000ea46:	f4 01 0a 42 	lsr	r2,r10,r1
8000ea4a:	f6 01 0a 41 	lsr	r1,r11,r1
8000ea4e:	12 42       	or	r2,r9
8000ea50:	e2 05 0d 00 	divu	r0,r1,r5
8000ea54:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000ea58:	e4 06 16 10 	lsr	r6,r2,0x10
8000ea5c:	00 93       	mov	r3,r0
8000ea5e:	ed e1 11 06 	or	r6,r6,r1<<0x10
8000ea62:	e0 09 02 4c 	mul	r12,r0,r9
8000ea66:	0c 3c       	cp.w	r12,r6
8000ea68:	e0 88 00 07 	brls	8000ea76 <__avr32_udiv64+0x232>
8000ea6c:	20 13       	sub	r3,1
8000ea6e:	1c 06       	add	r6,lr
8000ea70:	0c 3e       	cp.w	lr,r6
8000ea72:	e0 88 00 2c 	brls	8000eaca <__avr32_udiv64+0x286>
8000ea76:	ec 0c 01 01 	sub	r1,r6,r12
8000ea7a:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000ea7e:	e2 05 0d 00 	divu	r0,r1,r5
8000ea82:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000ea86:	00 9c       	mov	r12,r0
8000ea88:	e0 09 02 41 	mul	r1,r0,r9
8000ea8c:	16 31       	cp.w	r1,r11
8000ea8e:	e0 88 00 0c 	brls	8000eaa6 <__avr32_udiv64+0x262>
8000ea92:	20 1c       	sub	r12,1
8000ea94:	1c 0b       	add	r11,lr
8000ea96:	16 3e       	cp.w	lr,r11
8000ea98:	e0 8b 00 07 	brhi	8000eaa6 <__avr32_udiv64+0x262>
8000ea9c:	16 31       	cp.w	r1,r11
8000ea9e:	f7 bc 0b 01 	subhi	r12,1
8000eaa2:	f7 de eb 0b 	addhi	r11,r11,lr
8000eaa6:	f4 08 09 46 	lsl	r6,r10,r8
8000eaaa:	02 1b       	sub	r11,r1
8000eaac:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
8000eab0:	c3 ab       	rjmp	8000e924 <__avr32_udiv64+0xe0>
8000eab2:	12 3e       	cp.w	lr,r9
8000eab4:	f3 d8 eb 09 	addhi	r9,r9,r8
8000eab8:	f7 bb 0b 01 	subhi	r11,1
8000eabc:	ca 8b       	rjmp	8000ea0c <__avr32_udiv64+0x1c8>
8000eabe:	1c 3b       	cp.w	r11,lr
8000eac0:	f7 b6 0b 01 	subhi	r6,1
8000eac4:	fd d8 eb 0e 	addhi	lr,lr,r8
8000eac8:	c9 0b       	rjmp	8000e9e8 <__avr32_udiv64+0x1a4>
8000eaca:	0c 3c       	cp.w	r12,r6
8000eacc:	f7 b3 0b 01 	subhi	r3,1
8000ead0:	ed de eb 06 	addhi	r6,r6,lr
8000ead4:	cd 1b       	rjmp	8000ea76 <__avr32_udiv64+0x232>

8000ead6 <memcpy>:
8000ead6:	58 8a       	cp.w	r10,8
8000ead8:	c2 f5       	brlt	8000eb36 <memcpy+0x60>
8000eada:	f9 eb 10 09 	or	r9,r12,r11
8000eade:	e2 19 00 03 	andl	r9,0x3,COH
8000eae2:	e0 81 00 97 	brne	8000ec10 <memcpy+0x13a>
8000eae6:	e0 4a 00 20 	cp.w	r10,32
8000eaea:	c3 b4       	brge	8000eb60 <memcpy+0x8a>
8000eaec:	f4 08 14 02 	asr	r8,r10,0x2
8000eaf0:	f0 09 11 08 	rsub	r9,r8,8
8000eaf4:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000eaf8:	76 69       	ld.w	r9,r11[0x18]
8000eafa:	99 69       	st.w	r12[0x18],r9
8000eafc:	76 59       	ld.w	r9,r11[0x14]
8000eafe:	99 59       	st.w	r12[0x14],r9
8000eb00:	76 49       	ld.w	r9,r11[0x10]
8000eb02:	99 49       	st.w	r12[0x10],r9
8000eb04:	76 39       	ld.w	r9,r11[0xc]
8000eb06:	99 39       	st.w	r12[0xc],r9
8000eb08:	76 29       	ld.w	r9,r11[0x8]
8000eb0a:	99 29       	st.w	r12[0x8],r9
8000eb0c:	76 19       	ld.w	r9,r11[0x4]
8000eb0e:	99 19       	st.w	r12[0x4],r9
8000eb10:	76 09       	ld.w	r9,r11[0x0]
8000eb12:	99 09       	st.w	r12[0x0],r9
8000eb14:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000eb18:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000eb1c:	e0 1a 00 03 	andl	r10,0x3
8000eb20:	f4 0a 11 04 	rsub	r10,r10,4
8000eb24:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000eb28:	17 a9       	ld.ub	r9,r11[0x2]
8000eb2a:	b0 a9       	st.b	r8[0x2],r9
8000eb2c:	17 99       	ld.ub	r9,r11[0x1]
8000eb2e:	b0 99       	st.b	r8[0x1],r9
8000eb30:	17 89       	ld.ub	r9,r11[0x0]
8000eb32:	b0 89       	st.b	r8[0x0],r9
8000eb34:	5e fc       	retal	r12
8000eb36:	f4 0a 11 09 	rsub	r10,r10,9
8000eb3a:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000eb3e:	17 f9       	ld.ub	r9,r11[0x7]
8000eb40:	b8 f9       	st.b	r12[0x7],r9
8000eb42:	17 e9       	ld.ub	r9,r11[0x6]
8000eb44:	b8 e9       	st.b	r12[0x6],r9
8000eb46:	17 d9       	ld.ub	r9,r11[0x5]
8000eb48:	b8 d9       	st.b	r12[0x5],r9
8000eb4a:	17 c9       	ld.ub	r9,r11[0x4]
8000eb4c:	b8 c9       	st.b	r12[0x4],r9
8000eb4e:	17 b9       	ld.ub	r9,r11[0x3]
8000eb50:	b8 b9       	st.b	r12[0x3],r9
8000eb52:	17 a9       	ld.ub	r9,r11[0x2]
8000eb54:	b8 a9       	st.b	r12[0x2],r9
8000eb56:	17 99       	ld.ub	r9,r11[0x1]
8000eb58:	b8 99       	st.b	r12[0x1],r9
8000eb5a:	17 89       	ld.ub	r9,r11[0x0]
8000eb5c:	b8 89       	st.b	r12[0x0],r9
8000eb5e:	5e fc       	retal	r12
8000eb60:	eb cd 40 c0 	pushm	r6-r7,lr
8000eb64:	18 99       	mov	r9,r12
8000eb66:	22 0a       	sub	r10,32
8000eb68:	b7 07       	ld.d	r6,r11++
8000eb6a:	b3 26       	st.d	r9++,r6
8000eb6c:	b7 07       	ld.d	r6,r11++
8000eb6e:	b3 26       	st.d	r9++,r6
8000eb70:	b7 07       	ld.d	r6,r11++
8000eb72:	b3 26       	st.d	r9++,r6
8000eb74:	b7 07       	ld.d	r6,r11++
8000eb76:	b3 26       	st.d	r9++,r6
8000eb78:	22 0a       	sub	r10,32
8000eb7a:	cf 74       	brge	8000eb68 <memcpy+0x92>
8000eb7c:	2f 0a       	sub	r10,-16
8000eb7e:	c0 65       	brlt	8000eb8a <memcpy+0xb4>
8000eb80:	b7 07       	ld.d	r6,r11++
8000eb82:	b3 26       	st.d	r9++,r6
8000eb84:	b7 07       	ld.d	r6,r11++
8000eb86:	b3 26       	st.d	r9++,r6
8000eb88:	21 0a       	sub	r10,16
8000eb8a:	5c 3a       	neg	r10
8000eb8c:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000eb90:	d7 03       	nop
8000eb92:	d7 03       	nop
8000eb94:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000eb98:	f3 66 00 0e 	st.b	r9[14],r6
8000eb9c:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000eba0:	f3 66 00 0d 	st.b	r9[13],r6
8000eba4:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000eba8:	f3 66 00 0c 	st.b	r9[12],r6
8000ebac:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000ebb0:	f3 66 00 0b 	st.b	r9[11],r6
8000ebb4:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000ebb8:	f3 66 00 0a 	st.b	r9[10],r6
8000ebbc:	f7 36 00 09 	ld.ub	r6,r11[9]
8000ebc0:	f3 66 00 09 	st.b	r9[9],r6
8000ebc4:	f7 36 00 08 	ld.ub	r6,r11[8]
8000ebc8:	f3 66 00 08 	st.b	r9[8],r6
8000ebcc:	f7 36 00 07 	ld.ub	r6,r11[7]
8000ebd0:	f3 66 00 07 	st.b	r9[7],r6
8000ebd4:	f7 36 00 06 	ld.ub	r6,r11[6]
8000ebd8:	f3 66 00 06 	st.b	r9[6],r6
8000ebdc:	f7 36 00 05 	ld.ub	r6,r11[5]
8000ebe0:	f3 66 00 05 	st.b	r9[5],r6
8000ebe4:	f7 36 00 04 	ld.ub	r6,r11[4]
8000ebe8:	f3 66 00 04 	st.b	r9[4],r6
8000ebec:	f7 36 00 03 	ld.ub	r6,r11[3]
8000ebf0:	f3 66 00 03 	st.b	r9[3],r6
8000ebf4:	f7 36 00 02 	ld.ub	r6,r11[2]
8000ebf8:	f3 66 00 02 	st.b	r9[2],r6
8000ebfc:	f7 36 00 01 	ld.ub	r6,r11[1]
8000ec00:	f3 66 00 01 	st.b	r9[1],r6
8000ec04:	f7 36 00 00 	ld.ub	r6,r11[0]
8000ec08:	f3 66 00 00 	st.b	r9[0],r6
8000ec0c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ec10:	20 1a       	sub	r10,1
8000ec12:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000ec16:	f8 0a 0b 09 	st.b	r12[r10],r9
8000ec1a:	cf b1       	brne	8000ec10 <memcpy+0x13a>
8000ec1c:	5e fc       	retal	r12

8000ec1e <memset>:
8000ec1e:	18 98       	mov	r8,r12
8000ec20:	c0 38       	rjmp	8000ec26 <memset+0x8>
8000ec22:	10 cb       	st.b	r8++,r11
8000ec24:	20 1a       	sub	r10,1
8000ec26:	58 0a       	cp.w	r10,0
8000ec28:	cf d1       	brne	8000ec22 <memset+0x4>
8000ec2a:	5e fc       	retal	r12

Disassembly of section .exception:

8000ee00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000ee00:	c0 08       	rjmp	8000ee00 <_evba>
	...

8000ee04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000ee04:	c0 08       	rjmp	8000ee04 <_handle_TLB_Multiple_Hit>
	...

8000ee08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000ee08:	c0 08       	rjmp	8000ee08 <_handle_Bus_Error_Data_Fetch>
	...

8000ee0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000ee0c:	c0 08       	rjmp	8000ee0c <_handle_Bus_Error_Instruction_Fetch>
	...

8000ee10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000ee10:	c0 08       	rjmp	8000ee10 <_handle_NMI>
	...

8000ee14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000ee14:	c0 08       	rjmp	8000ee14 <_handle_Instruction_Address>
	...

8000ee18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000ee18:	c0 08       	rjmp	8000ee18 <_handle_ITLB_Protection>
	...

8000ee1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000ee1c:	c0 08       	rjmp	8000ee1c <_handle_Breakpoint>
	...

8000ee20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000ee20:	c0 08       	rjmp	8000ee20 <_handle_Illegal_Opcode>
	...

8000ee24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000ee24:	c0 08       	rjmp	8000ee24 <_handle_Unimplemented_Instruction>
	...

8000ee28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000ee28:	c0 08       	rjmp	8000ee28 <_handle_Privilege_Violation>
	...

8000ee2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000ee2c:	c0 08       	rjmp	8000ee2c <_handle_Floating_Point>
	...

8000ee30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000ee30:	c0 08       	rjmp	8000ee30 <_handle_Coprocessor_Absent>
	...

8000ee34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000ee34:	c0 08       	rjmp	8000ee34 <_handle_Data_Address_Read>
	...

8000ee38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000ee38:	c0 08       	rjmp	8000ee38 <_handle_Data_Address_Write>
	...

8000ee3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000ee3c:	c0 08       	rjmp	8000ee3c <_handle_DTLB_Protection_Read>
	...

8000ee40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000ee40:	c0 08       	rjmp	8000ee40 <_handle_DTLB_Protection_Write>
	...

8000ee44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000ee44:	c0 08       	rjmp	8000ee44 <_handle_DTLB_Modified>
	...

8000ee50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000ee50:	c0 08       	rjmp	8000ee50 <_handle_ITLB_Miss>
	...

8000ee60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000ee60:	c0 08       	rjmp	8000ee60 <_handle_DTLB_Miss_Read>
	...

8000ee70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000ee70:	c0 08       	rjmp	8000ee70 <_handle_DTLB_Miss_Write>
	...

8000ef00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000ef00:	c0 08       	rjmp	8000ef00 <_handle_Supervisor_Call>
8000ef02:	d7 03       	nop

8000ef04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000ef04:	30 0c       	mov	r12,0
8000ef06:	fe b0 d1 7b 	rcall	800091fc <_get_interrupt_handler>
8000ef0a:	58 0c       	cp.w	r12,0
8000ef0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000ef10:	d6 03       	rete

8000ef12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000ef12:	30 1c       	mov	r12,1
8000ef14:	fe b0 d1 74 	rcall	800091fc <_get_interrupt_handler>
8000ef18:	58 0c       	cp.w	r12,0
8000ef1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000ef1e:	d6 03       	rete

8000ef20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000ef20:	30 2c       	mov	r12,2
8000ef22:	fe b0 d1 6d 	rcall	800091fc <_get_interrupt_handler>
8000ef26:	58 0c       	cp.w	r12,0
8000ef28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000ef2c:	d6 03       	rete

8000ef2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000ef2e:	30 3c       	mov	r12,3
8000ef30:	fe b0 d1 66 	rcall	800091fc <_get_interrupt_handler>
8000ef34:	58 0c       	cp.w	r12,0
8000ef36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000ef3a:	d6 03       	rete
8000ef3c:	d7 03       	nop
8000ef3e:	d7 03       	nop
8000ef40:	d7 03       	nop
8000ef42:	d7 03       	nop
8000ef44:	d7 03       	nop
8000ef46:	d7 03       	nop
8000ef48:	d7 03       	nop
8000ef4a:	d7 03       	nop
8000ef4c:	d7 03       	nop
8000ef4e:	d7 03       	nop
8000ef50:	d7 03       	nop
8000ef52:	d7 03       	nop
8000ef54:	d7 03       	nop
8000ef56:	d7 03       	nop
8000ef58:	d7 03       	nop
8000ef5a:	d7 03       	nop
8000ef5c:	d7 03       	nop
8000ef5e:	d7 03       	nop
8000ef60:	d7 03       	nop
8000ef62:	d7 03       	nop
8000ef64:	d7 03       	nop
8000ef66:	d7 03       	nop
8000ef68:	d7 03       	nop
8000ef6a:	d7 03       	nop
8000ef6c:	d7 03       	nop
8000ef6e:	d7 03       	nop
8000ef70:	d7 03       	nop
8000ef72:	d7 03       	nop
8000ef74:	d7 03       	nop
8000ef76:	d7 03       	nop
8000ef78:	d7 03       	nop
8000ef7a:	d7 03       	nop
8000ef7c:	d7 03       	nop
8000ef7e:	d7 03       	nop
8000ef80:	d7 03       	nop
8000ef82:	d7 03       	nop
8000ef84:	d7 03       	nop
8000ef86:	d7 03       	nop
8000ef88:	d7 03       	nop
8000ef8a:	d7 03       	nop
8000ef8c:	d7 03       	nop
8000ef8e:	d7 03       	nop
8000ef90:	d7 03       	nop
8000ef92:	d7 03       	nop
8000ef94:	d7 03       	nop
8000ef96:	d7 03       	nop
8000ef98:	d7 03       	nop
8000ef9a:	d7 03       	nop
8000ef9c:	d7 03       	nop
8000ef9e:	d7 03       	nop
8000efa0:	d7 03       	nop
8000efa2:	d7 03       	nop
8000efa4:	d7 03       	nop
8000efa6:	d7 03       	nop
8000efa8:	d7 03       	nop
8000efaa:	d7 03       	nop
8000efac:	d7 03       	nop
8000efae:	d7 03       	nop
8000efb0:	d7 03       	nop
8000efb2:	d7 03       	nop
8000efb4:	d7 03       	nop
8000efb6:	d7 03       	nop
8000efb8:	d7 03       	nop
8000efba:	d7 03       	nop
8000efbc:	d7 03       	nop
8000efbe:	d7 03       	nop
8000efc0:	d7 03       	nop
8000efc2:	d7 03       	nop
8000efc4:	d7 03       	nop
8000efc6:	d7 03       	nop
8000efc8:	d7 03       	nop
8000efca:	d7 03       	nop
8000efcc:	d7 03       	nop
8000efce:	d7 03       	nop
8000efd0:	d7 03       	nop
8000efd2:	d7 03       	nop
8000efd4:	d7 03       	nop
8000efd6:	d7 03       	nop
8000efd8:	d7 03       	nop
8000efda:	d7 03       	nop
8000efdc:	d7 03       	nop
8000efde:	d7 03       	nop
8000efe0:	d7 03       	nop
8000efe2:	d7 03       	nop
8000efe4:	d7 03       	nop
8000efe6:	d7 03       	nop
8000efe8:	d7 03       	nop
8000efea:	d7 03       	nop
8000efec:	d7 03       	nop
8000efee:	d7 03       	nop
8000eff0:	d7 03       	nop
8000eff2:	d7 03       	nop
8000eff4:	d7 03       	nop
8000eff6:	d7 03       	nop
8000eff8:	d7 03       	nop
8000effa:	d7 03       	nop
8000effc:	d7 03       	nop
8000effe:	d7 03       	nop
