
default-cryptx2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ca44  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000ec00  8000ec00  0000f000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007c8  8000ee00  8000ee00  0000f200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         0000023c  00000008  8000f5c8  0000fc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  00000244  8000f804  0000fe44  2**0
                  ALLOC
  8 .bss          00000de0  00000248  00000248  00000000  2**2
                  ALLOC
  9 .heap         0000dfd8  00001028  00001028  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000fe44  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001330  00000000  00000000  0000fe78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 000029c2  00000000  00000000  000111a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0002546b  00000000  00000000  00013b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003515  00000000  00000000  00038fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007561  00000000  00000000  0003c4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003ad4  00000000  00000000  00043a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00009fcd  00000000  00000000  00047520  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00005c58  00000000  00000000  000514ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .flash_nvram  000000c4  8003fe00  8000f804  00010200  2**2
                  ALLOC
 21 .debug_ranges 000012f8  00000000  00000000  00057148  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	b9 7c       	lsl	r12,0x19

Disassembly of section .text:

80002008 <crcInit>:
 * Returns:		None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 3d       	sub	sp,12


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
80002010:	30 08       	mov	r8,0
80002012:	ef 48 ff f8 	st.w	r7[-8],r8
80002016:	c3 78       	rjmp	80002084 <crcInit+0x7c>
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
80002018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000201c:	5c 88       	casts.h	r8
8000201e:	a9 68       	lsl	r8,0x8
80002020:	ef 58 ff f6 	st.h	r7[-10],r8

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
80002024:	30 88       	mov	r8,8
80002026:	ef 68 ff ff 	st.b	r7[-1],r8
8000202a:	c1 b8       	rjmp	80002060 <crcInit+0x58>
        {
            /*
             * Try to divide the current data bit.
             */			
            if (remainder & TOPBIT)
8000202c:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80002030:	30 08       	mov	r8,0
80002032:	f0 09 19 00 	cp.h	r9,r8
80002036:	c0 b4       	brge	8000204c <crcInit+0x44>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
80002038:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000203c:	a1 78       	lsl	r8,0x1
8000203e:	5c 88       	casts.h	r8
80002040:	ec 18 10 21 	eorl	r8,0x1021
80002044:	5c 88       	casts.h	r8
80002046:	ef 58 ff f6 	st.h	r7[-10],r8
8000204a:	c0 68       	rjmp	80002056 <crcInit+0x4e>
            }
            else
            {
                remainder = (remainder << 1);
8000204c:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002050:	a1 78       	lsl	r8,0x1
80002052:	ef 58 ff f6 	st.h	r7[-10],r8
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
80002056:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000205a:	20 18       	sub	r8,1
8000205c:	ef 68 ff ff 	st.b	r7[-1],r8
80002060:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002064:	30 08       	mov	r8,0
80002066:	f0 09 18 00 	cp.b	r9,r8
8000206a:	ce 11       	brne	8000202c <crcInit+0x24>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
8000206c:	ee fa ff f8 	ld.w	r10,r7[-8]
80002070:	48 a9       	lddpc	r9,80002098 <crcInit+0x90>
80002072:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002076:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
8000207a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000207e:	2f f8       	sub	r8,-1
80002080:	ef 48 ff f8 	st.w	r7[-8],r8
80002084:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002088:	e0 48 00 ff 	cp.w	r8,255
8000208c:	fe 9a ff c6 	brle	80002018 <crcInit+0x10>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
80002090:	2f dd       	sub	sp,-12
80002092:	e3 cd 80 80 	ldm	sp++,r7,pc
80002096:	00 00       	add	r0,r0
80002098:	00 00       	add	r0,r0
8000209a:	08 62       	and	r2,r4

8000209c <crcFast>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
8000209c:	eb cd 40 80 	pushm	r7,lr
800020a0:	1a 97       	mov	r7,sp
800020a2:	20 4d       	sub	sp,16
800020a4:	ef 4c ff f4 	st.w	r7[-12],r12
800020a8:	ef 4b ff f0 	st.w	r7[-16],r11
    crc	           remainder = INITIAL_REMAINDER;
800020ac:	3f f8       	mov	r8,-1
800020ae:	ef 58 ff f8 	st.h	r7[-8],r8


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
800020b2:	30 08       	mov	r8,0
800020b4:	ef 48 ff fc 	st.w	r7[-4],r8
800020b8:	c2 68       	rjmp	80002104 <crcFast+0x68>
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
800020ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800020c2:	f2 08 00 08 	add	r8,r9,r8
800020c6:	11 89       	ld.ub	r9,r8[0x0]
800020c8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800020cc:	a9 88       	lsr	r8,0x8
800020ce:	5c 88       	casts.h	r8
800020d0:	5c 58       	castu.b	r8
800020d2:	f3 e8 20 08 	eor	r8,r9,r8
800020d6:	ef 68 ff fb 	st.b	r7[-5],r8
  		remainder = crcTable[data] ^ (remainder << 8);
800020da:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800020de:	49 08       	lddpc	r8,8000211c <crcFast+0x80>
800020e0:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800020e4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800020e8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800020ec:	a9 68       	lsl	r8,0x8
800020ee:	5c 88       	casts.h	r8
800020f0:	f3 e8 20 08 	eor	r8,r9,r8
800020f4:	5c 88       	casts.h	r8
800020f6:	ef 58 ff f8 	st.h	r7[-8],r8


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
800020fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020fe:	2f f8       	sub	r8,-1
80002100:	ef 48 ff fc 	st.w	r7[-4],r8
80002104:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002108:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000210c:	10 39       	cp.w	r9,r8
8000210e:	cd 65       	brlt	800020ba <crcFast+0x1e>
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
80002110:	ef 08 ff f8 	ld.sh	r8,r7[-8]

}   /* crcFast() */
80002114:	10 9c       	mov	r12,r8
80002116:	2f cd       	sub	sp,-16
80002118:	e3 cd 80 80 	ldm	sp++,r7,pc
8000211c:	00 00       	add	r0,r0
8000211e:	08 62       	and	r2,r4

80002120 <hmac_sha256_init>:
80002120:	eb cd 40 80 	pushm	r7,lr
80002124:	1a 97       	mov	r7,sp
80002126:	20 fd       	sub	sp,60
80002128:	ef 4c ff cc 	st.w	r7[-52],r12
8000212c:	ef 4b ff c8 	st.w	r7[-56],r11
80002130:	ef 4a ff c4 	st.w	r7[-60],r10
80002134:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002138:	e0 48 00 40 	cp.w	r8,64
8000213c:	c0 91       	brne	8000214e <hmac_sha256_init+0x2e>
8000213e:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002142:	ef 48 ff f8 	st.w	r7[-8],r8
80002146:	34 08       	mov	r8,64
80002148:	ef 48 ff f4 	st.w	r7[-12],r8
8000214c:	c4 28       	rjmp	800021d0 <hmac_sha256_init+0xb0>
8000214e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002152:	e0 48 00 40 	cp.w	r8,64
80002156:	e0 88 00 13 	brls	8000217c <hmac_sha256_init+0x5c>
8000215a:	32 08       	mov	r8,32
8000215c:	ef 48 ff f4 	st.w	r7[-12],r8
80002160:	ee c8 00 30 	sub	r8,r7,48
80002164:	10 9a       	mov	r10,r8
80002166:	ee fb ff c4 	ld.w	r11,r7[-60]
8000216a:	ee fc ff c8 	ld.w	r12,r7[-56]
8000216e:	f0 1f 00 54 	mcall	800022bc <hmac_sha256_init+0x19c>
80002172:	ee c8 00 30 	sub	r8,r7,48
80002176:	ef 48 ff f8 	st.w	r7[-8],r8
8000217a:	c0 98       	rjmp	8000218c <hmac_sha256_init+0x6c>
8000217c:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002180:	ef 48 ff f8 	st.w	r7[-8],r8
80002184:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002188:	ef 48 ff f4 	st.w	r7[-12],r8
8000218c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002190:	f0 08 11 40 	rsub	r8,r8,64
80002194:	ef 48 ff f0 	st.w	r7[-16],r8
80002198:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000219c:	f0 c9 fd 60 	sub	r9,r8,-672
800021a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021a4:	f2 08 00 08 	add	r8,r9,r8
800021a8:	ee fa ff f0 	ld.w	r10,r7[-16]
800021ac:	33 6b       	mov	r11,54
800021ae:	10 9c       	mov	r12,r8
800021b0:	f0 1f 00 44 	mcall	800022c0 <hmac_sha256_init+0x1a0>
800021b4:	ee f8 ff cc 	ld.w	r8,r7[-52]
800021b8:	f0 c9 fd 20 	sub	r9,r8,-736
800021bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021c0:	f2 08 00 08 	add	r8,r9,r8
800021c4:	ee fa ff f0 	ld.w	r10,r7[-16]
800021c8:	35 cb       	mov	r11,92
800021ca:	10 9c       	mov	r12,r8
800021cc:	f0 1f 00 3d 	mcall	800022c0 <hmac_sha256_init+0x1a0>
800021d0:	30 08       	mov	r8,0
800021d2:	ef 48 ff fc 	st.w	r7[-4],r8
800021d6:	c2 a8       	rjmp	8000222a <hmac_sha256_init+0x10a>
800021d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800021dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021e0:	ee fa ff f8 	ld.w	r10,r7[-8]
800021e4:	f4 08 00 08 	add	r8,r10,r8
800021e8:	11 88       	ld.ub	r8,r8[0x0]
800021ea:	ec 18 00 36 	eorl	r8,0x36
800021ee:	5c 58       	castu.b	r8
800021f0:	ee fa ff cc 	ld.w	r10,r7[-52]
800021f4:	f4 09 00 09 	add	r9,r10,r9
800021f8:	f3 68 02 a0 	st.b	r9[672],r8
800021fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002200:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002204:	ee fa ff f8 	ld.w	r10,r7[-8]
80002208:	f4 08 00 08 	add	r8,r10,r8
8000220c:	11 88       	ld.ub	r8,r8[0x0]
8000220e:	ec 18 00 5c 	eorl	r8,0x5c
80002212:	5c 58       	castu.b	r8
80002214:	ee fa ff cc 	ld.w	r10,r7[-52]
80002218:	f4 09 00 09 	add	r9,r10,r9
8000221c:	f3 68 02 e0 	st.b	r9[736],r8
80002220:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002224:	2f f8       	sub	r8,-1
80002226:	ef 48 ff fc 	st.w	r7[-4],r8
8000222a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000222e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002232:	10 39       	cp.w	r9,r8
80002234:	fe 99 ff d2 	brgt	800021d8 <hmac_sha256_init+0xb8>
80002238:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000223c:	10 9c       	mov	r12,r8
8000223e:	f0 1f 00 22 	mcall	800022c4 <hmac_sha256_init+0x1a4>
80002242:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002246:	f0 c9 fd 60 	sub	r9,r8,-672
8000224a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000224e:	34 0a       	mov	r10,64
80002250:	12 9b       	mov	r11,r9
80002252:	10 9c       	mov	r12,r8
80002254:	f0 1f 00 1d 	mcall	800022c8 <hmac_sha256_init+0x1a8>
80002258:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000225c:	f0 c8 ff 58 	sub	r8,r8,-168
80002260:	10 9c       	mov	r12,r8
80002262:	f0 1f 00 19 	mcall	800022c4 <hmac_sha256_init+0x1a4>
80002266:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000226a:	f0 c9 fd 20 	sub	r9,r8,-736
8000226e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002272:	f0 c8 ff 58 	sub	r8,r8,-168
80002276:	34 0a       	mov	r10,64
80002278:	12 9b       	mov	r11,r9
8000227a:	10 9c       	mov	r12,r8
8000227c:	f0 1f 00 13 	mcall	800022c8 <hmac_sha256_init+0x1a8>
80002280:	ee f9 ff cc 	ld.w	r9,r7[-52]
80002284:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002288:	f0 c8 fe b0 	sub	r8,r8,-336
8000228c:	e0 6a 00 a8 	mov	r10,168
80002290:	12 9b       	mov	r11,r9
80002292:	10 9c       	mov	r12,r8
80002294:	f0 1f 00 0e 	mcall	800022cc <hmac_sha256_init+0x1ac>
80002298:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000229c:	f0 c9 ff 58 	sub	r9,r8,-168
800022a0:	ee f8 ff cc 	ld.w	r8,r7[-52]
800022a4:	f0 c8 fe 08 	sub	r8,r8,-504
800022a8:	e0 6a 00 a8 	mov	r10,168
800022ac:	12 9b       	mov	r11,r9
800022ae:	10 9c       	mov	r12,r8
800022b0:	f0 1f 00 07 	mcall	800022cc <hmac_sha256_init+0x1ac>
800022b4:	2f 1d       	sub	sp,-60
800022b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800022ba:	00 00       	add	r0,r0
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	27 5c       	sub	r12,117
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	ea 3e 80 00 	sub	lr,753664
800022c6:	27 b0       	sub	r0,123
800022c8:	80 00       	ld.sh	r0,r0[0x0]
800022ca:	28 0c       	sub	r12,-128
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	e8 f6 eb cd 	ld.w	r6,r4[-5171]

800022d0 <hmac_sha256_update>:
800022d0:	eb cd 40 80 	pushm	r7,lr
800022d4:	1a 97       	mov	r7,sp
800022d6:	20 3d       	sub	sp,12
800022d8:	ef 4c ff fc 	st.w	r7[-4],r12
800022dc:	ef 4b ff f8 	st.w	r7[-8],r11
800022e0:	ef 4a ff f4 	st.w	r7[-12],r10
800022e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022e8:	ee fa ff f4 	ld.w	r10,r7[-12]
800022ec:	ee fb ff f8 	ld.w	r11,r7[-8]
800022f0:	10 9c       	mov	r12,r8
800022f2:	f0 1f 00 03 	mcall	800022fc <hmac_sha256_update+0x2c>
800022f6:	2f dd       	sub	sp,-12
800022f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800022fc:	80 00       	ld.sh	r0,r0[0x0]
800022fe:	28 0c       	sub	r12,-128

80002300 <hmac_sha256_final>:
80002300:	eb cd 40 80 	pushm	r7,lr
80002304:	1a 97       	mov	r7,sp
80002306:	21 3d       	sub	sp,76
80002308:	ef 4c ff bc 	st.w	r7[-68],r12
8000230c:	ef 4b ff b8 	st.w	r7[-72],r11
80002310:	ef 4a ff b4 	st.w	r7[-76],r10
80002314:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002318:	ee c9 00 20 	sub	r9,r7,32
8000231c:	12 9b       	mov	r11,r9
8000231e:	10 9c       	mov	r12,r8
80002320:	f0 1f 00 12 	mcall	80002368 <hmac_sha256_final+0x68>
80002324:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002328:	f0 c8 ff 58 	sub	r8,r8,-168
8000232c:	ee c9 00 20 	sub	r9,r7,32
80002330:	32 0a       	mov	r10,32
80002332:	12 9b       	mov	r11,r9
80002334:	10 9c       	mov	r12,r8
80002336:	f0 1f 00 0e 	mcall	8000236c <hmac_sha256_final+0x6c>
8000233a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000233e:	f0 c8 ff 58 	sub	r8,r8,-168
80002342:	ee c9 00 40 	sub	r9,r7,64
80002346:	12 9b       	mov	r11,r9
80002348:	10 9c       	mov	r12,r8
8000234a:	f0 1f 00 08 	mcall	80002368 <hmac_sha256_final+0x68>
8000234e:	ee c8 00 40 	sub	r8,r7,64
80002352:	ee fa ff b4 	ld.w	r10,r7[-76]
80002356:	10 9b       	mov	r11,r8
80002358:	ee fc ff b8 	ld.w	r12,r7[-72]
8000235c:	f0 1f 00 05 	mcall	80002370 <hmac_sha256_final+0x70>
80002360:	2e dd       	sub	sp,-76
80002362:	e3 cd 80 80 	ldm	sp++,r7,pc
80002366:	00 00       	add	r0,r0
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	29 34       	sub	r4,-109
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	28 0c       	sub	r12,-128
80002370:	80 00       	ld.sh	r0,r0[0x0]
80002372:	e8 f6 eb cd 	ld.w	r6,r4[-5171]

80002374 <hmac_sha256>:
80002374:	eb cd 40 c0 	pushm	r6-r7,lr
80002378:	1a 97       	mov	r7,sp
8000237a:	fa cd 03 34 	sub	sp,sp,820
8000237e:	ee c6 ff f4 	sub	r6,r7,-12
80002382:	ef 4c fc dc 	st.w	r7[-804],r12
80002386:	ef 4b fc d8 	st.w	r7[-808],r11
8000238a:	ef 4a fc d4 	st.w	r7[-812],r10
8000238e:	ef 49 fc d0 	st.w	r7[-816],r9
80002392:	ef 48 fc cc 	st.w	r7[-820],r8
80002396:	ee c8 03 20 	sub	r8,r7,800
8000239a:	ee fa fc d8 	ld.w	r10,r7[-808]
8000239e:	ee fb fc dc 	ld.w	r11,r7[-804]
800023a2:	10 9c       	mov	r12,r8
800023a4:	f0 1f 00 0c 	mcall	800023d4 <hmac_sha256+0x60>
800023a8:	ee c8 03 20 	sub	r8,r7,800
800023ac:	ee fa fc d0 	ld.w	r10,r7[-816]
800023b0:	ee fb fc d4 	ld.w	r11,r7[-812]
800023b4:	10 9c       	mov	r12,r8
800023b6:	f0 1f 00 09 	mcall	800023d8 <hmac_sha256+0x64>
800023ba:	ee c8 03 20 	sub	r8,r7,800
800023be:	6c 0a       	ld.w	r10,r6[0x0]
800023c0:	ee fb fc cc 	ld.w	r11,r7[-820]
800023c4:	10 9c       	mov	r12,r8
800023c6:	f0 1f 00 06 	mcall	800023dc <hmac_sha256+0x68>
800023ca:	fe 3d fc cc 	sub	sp,-820
800023ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023d2:	00 00       	add	r0,r0
800023d4:	80 00       	ld.sh	r0,r0[0x0]
800023d6:	21 20       	sub	r0,18
800023d8:	80 00       	ld.sh	r0,r0[0x0]
800023da:	22 d0       	sub	r0,45
800023dc:	80 00       	ld.sh	r0,r0[0x0]
800023de:	23 00       	sub	r0,48

800023e0 <sha256_transf>:
800023e0:	eb cd 40 80 	pushm	r7,lr
800023e4:	1a 97       	mov	r7,sp
800023e6:	fa cd 01 40 	sub	sp,sp,320
800023ea:	ef 4c fe c8 	st.w	r7[-312],r12
800023ee:	ef 4b fe c4 	st.w	r7[-316],r11
800023f2:	ef 4a fe c0 	st.w	r7[-320],r10
800023f6:	30 08       	mov	r8,0
800023f8:	ef 48 ff f8 	st.w	r7[-8],r8
800023fc:	ca 49       	rjmp	80002744 <sha256_transf+0x364>
800023fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002402:	a7 68       	lsl	r8,0x6
80002404:	ee f9 fe c4 	ld.w	r9,r7[-316]
80002408:	f2 08 00 08 	add	r8,r9,r8
8000240c:	ef 48 ff f4 	st.w	r7[-12],r8
80002410:	30 08       	mov	r8,0
80002412:	ef 48 ff fc 	st.w	r7[-4],r8
80002416:	c3 98       	rjmp	80002488 <sha256_transf+0xa8>
80002418:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000241c:	f0 09 15 02 	lsl	r9,r8,0x2
80002420:	ee c8 01 14 	sub	r8,r7,276
80002424:	12 08       	add	r8,r9
80002426:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000242a:	a3 69       	lsl	r9,0x2
8000242c:	2f d9       	sub	r9,-3
8000242e:	ee fa ff f4 	ld.w	r10,r7[-12]
80002432:	f4 09 00 09 	add	r9,r10,r9
80002436:	13 89       	ld.ub	r9,r9[0x0]
80002438:	12 9a       	mov	r10,r9
8000243a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000243e:	a3 69       	lsl	r9,0x2
80002440:	2f e9       	sub	r9,-2
80002442:	ee fb ff f4 	ld.w	r11,r7[-12]
80002446:	f6 09 00 09 	add	r9,r11,r9
8000244a:	13 89       	ld.ub	r9,r9[0x0]
8000244c:	a9 69       	lsl	r9,0x8
8000244e:	12 4a       	or	r10,r9
80002450:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002454:	a3 69       	lsl	r9,0x2
80002456:	2f f9       	sub	r9,-1
80002458:	ee fb ff f4 	ld.w	r11,r7[-12]
8000245c:	f6 09 00 09 	add	r9,r11,r9
80002460:	13 89       	ld.ub	r9,r9[0x0]
80002462:	b1 69       	lsl	r9,0x10
80002464:	12 4a       	or	r10,r9
80002466:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000246a:	a3 69       	lsl	r9,0x2
8000246c:	ee fb ff f4 	ld.w	r11,r7[-12]
80002470:	f6 09 00 09 	add	r9,r11,r9
80002474:	13 89       	ld.ub	r9,r9[0x0]
80002476:	b9 69       	lsl	r9,0x18
80002478:	f5 e9 10 09 	or	r9,r10,r9
8000247c:	91 09       	st.w	r8[0x0],r9
8000247e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002482:	2f f8       	sub	r8,-1
80002484:	ef 48 ff fc 	st.w	r7[-4],r8
80002488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000248c:	58 f8       	cp.w	r8,15
8000248e:	fe 9a ff c5 	brle	80002418 <sha256_transf+0x38>
80002492:	31 08       	mov	r8,16
80002494:	ef 48 ff fc 	st.w	r7[-4],r8
80002498:	c6 c8       	rjmp	80002570 <sha256_transf+0x190>
8000249a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000249e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024a2:	20 28       	sub	r8,2
800024a4:	a3 68       	lsl	r8,0x2
800024a6:	ee 08 00 08 	add	r8,r7,r8
800024aa:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024ae:	f0 0b 16 11 	lsr	r11,r8,0x11
800024b2:	f0 09 15 0f 	lsl	r9,r8,0xf
800024b6:	16 49       	or	r9,r11
800024b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024bc:	20 28       	sub	r8,2
800024be:	a3 68       	lsl	r8,0x2
800024c0:	ee 08 00 08 	add	r8,r7,r8
800024c4:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024c8:	f0 0b 16 13 	lsr	r11,r8,0x13
800024cc:	ad 78       	lsl	r8,0xd
800024ce:	16 48       	or	r8,r11
800024d0:	10 59       	eor	r9,r8
800024d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024d6:	20 28       	sub	r8,2
800024d8:	a3 68       	lsl	r8,0x2
800024da:	ee 08 00 08 	add	r8,r7,r8
800024de:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024e2:	ab 88       	lsr	r8,0xa
800024e4:	10 59       	eor	r9,r8
800024e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024ea:	20 78       	sub	r8,7
800024ec:	a3 68       	lsl	r8,0x2
800024ee:	ee 08 00 08 	add	r8,r7,r8
800024f2:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024f6:	f2 08 00 0b 	add	r11,r9,r8
800024fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024fe:	20 f8       	sub	r8,15
80002500:	a3 68       	lsl	r8,0x2
80002502:	ee 08 00 08 	add	r8,r7,r8
80002506:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000250a:	f0 0c 16 07 	lsr	r12,r8,0x7
8000250e:	f0 09 15 19 	lsl	r9,r8,0x19
80002512:	18 49       	or	r9,r12
80002514:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002518:	20 f8       	sub	r8,15
8000251a:	a3 68       	lsl	r8,0x2
8000251c:	ee 08 00 08 	add	r8,r7,r8
80002520:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002524:	f0 0c 16 12 	lsr	r12,r8,0x12
80002528:	af 68       	lsl	r8,0xe
8000252a:	18 48       	or	r8,r12
8000252c:	10 59       	eor	r9,r8
8000252e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002532:	20 f8       	sub	r8,15
80002534:	a3 68       	lsl	r8,0x2
80002536:	ee 08 00 08 	add	r8,r7,r8
8000253a:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000253e:	a3 98       	lsr	r8,0x3
80002540:	f3 e8 20 08 	eor	r8,r9,r8
80002544:	f6 08 00 09 	add	r9,r11,r8
80002548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000254c:	21 08       	sub	r8,16
8000254e:	a3 68       	lsl	r8,0x2
80002550:	ee 08 00 08 	add	r8,r7,r8
80002554:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002558:	10 09       	add	r9,r8
8000255a:	f4 08 15 02 	lsl	r8,r10,0x2
8000255e:	ee 08 00 08 	add	r8,r7,r8
80002562:	f1 49 fe ec 	st.w	r8[-276],r9
80002566:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000256a:	2f f8       	sub	r8,-1
8000256c:	ef 48 ff fc 	st.w	r7[-4],r8
80002570:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002574:	e0 48 00 3f 	cp.w	r8,63
80002578:	fe 9a ff 91 	brle	8000249a <sha256_transf+0xba>
8000257c:	30 08       	mov	r8,0
8000257e:	ef 48 ff fc 	st.w	r7[-4],r8
80002582:	c1 48       	rjmp	800025aa <sha256_transf+0x1ca>
80002584:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002588:	ee fa ff fc 	ld.w	r10,r7[-4]
8000258c:	ee f9 fe c8 	ld.w	r9,r7[-312]
80002590:	2d ea       	sub	r10,-34
80002592:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80002596:	a3 68       	lsl	r8,0x2
80002598:	ee 08 00 08 	add	r8,r7,r8
8000259c:	f1 49 fe cc 	st.w	r8[-308],r9
800025a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025a4:	2f f8       	sub	r8,-1
800025a6:	ef 48 ff fc 	st.w	r7[-4],r8
800025aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025ae:	58 78       	cp.w	r8,7
800025b0:	fe 9a ff ea 	brle	80002584 <sha256_transf+0x1a4>
800025b4:	30 08       	mov	r8,0
800025b6:	ef 48 ff fc 	st.w	r7[-4],r8
800025ba:	c9 68       	rjmp	800026e6 <sha256_transf+0x306>
800025bc:	ee fa fe e8 	ld.w	r10,r7[-280]
800025c0:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025c4:	f0 0b 16 06 	lsr	r11,r8,0x6
800025c8:	f0 09 15 1a 	lsl	r9,r8,0x1a
800025cc:	16 49       	or	r9,r11
800025ce:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025d2:	f0 0b 16 0b 	lsr	r11,r8,0xb
800025d6:	b5 78       	lsl	r8,0x15
800025d8:	16 48       	or	r8,r11
800025da:	10 59       	eor	r9,r8
800025dc:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025e0:	f0 0b 16 19 	lsr	r11,r8,0x19
800025e4:	a7 78       	lsl	r8,0x7
800025e6:	16 48       	or	r8,r11
800025e8:	f3 e8 20 08 	eor	r8,r9,r8
800025ec:	f4 08 00 09 	add	r9,r10,r8
800025f0:	ee fa fe dc 	ld.w	r10,r7[-292]
800025f4:	ee f8 fe e0 	ld.w	r8,r7[-288]
800025f8:	10 6a       	and	r10,r8
800025fa:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025fe:	f0 0b 11 ff 	rsub	r11,r8,-1
80002602:	ee f8 fe e4 	ld.w	r8,r7[-284]
80002606:	f7 e8 00 08 	and	r8,r11,r8
8000260a:	f5 e8 20 08 	eor	r8,r10,r8
8000260e:	10 09       	add	r9,r8
80002610:	ee fa ff fc 	ld.w	r10,r7[-4]
80002614:	4d 18       	lddpc	r8,80002758 <sha256_transf+0x378>
80002616:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000261a:	10 09       	add	r9,r8
8000261c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002620:	a3 68       	lsl	r8,0x2
80002622:	ee 08 00 08 	add	r8,r7,r8
80002626:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000262a:	f2 08 00 08 	add	r8,r9,r8
8000262e:	ef 48 ff ec 	st.w	r7[-20],r8
80002632:	ee f8 fe cc 	ld.w	r8,r7[-308]
80002636:	f0 0a 16 02 	lsr	r10,r8,0x2
8000263a:	f0 09 15 1e 	lsl	r9,r8,0x1e
8000263e:	14 49       	or	r9,r10
80002640:	ee f8 fe cc 	ld.w	r8,r7[-308]
80002644:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002648:	b3 78       	lsl	r8,0x13
8000264a:	14 48       	or	r8,r10
8000264c:	10 59       	eor	r9,r8
8000264e:	ee f8 fe cc 	ld.w	r8,r7[-308]
80002652:	f0 0a 16 16 	lsr	r10,r8,0x16
80002656:	ab 68       	lsl	r8,0xa
80002658:	14 48       	or	r8,r10
8000265a:	10 59       	eor	r9,r8
8000265c:	ee fa fe cc 	ld.w	r10,r7[-308]
80002660:	ee f8 fe d0 	ld.w	r8,r7[-304]
80002664:	10 6a       	and	r10,r8
80002666:	ee fb fe cc 	ld.w	r11,r7[-308]
8000266a:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000266e:	f7 e8 00 08 	and	r8,r11,r8
80002672:	10 5a       	eor	r10,r8
80002674:	ee fb fe d0 	ld.w	r11,r7[-304]
80002678:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000267c:	f7 e8 00 08 	and	r8,r11,r8
80002680:	f5 e8 20 08 	eor	r8,r10,r8
80002684:	f2 08 00 08 	add	r8,r9,r8
80002688:	ef 48 ff f0 	st.w	r7[-16],r8
8000268c:	ee f8 fe e4 	ld.w	r8,r7[-284]
80002690:	ef 48 fe e8 	st.w	r7[-280],r8
80002694:	ee f8 fe e0 	ld.w	r8,r7[-288]
80002698:	ef 48 fe e4 	st.w	r7[-284],r8
8000269c:	ee f8 fe dc 	ld.w	r8,r7[-292]
800026a0:	ef 48 fe e0 	st.w	r7[-288],r8
800026a4:	ee f9 fe d8 	ld.w	r9,r7[-296]
800026a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800026ac:	f2 08 00 08 	add	r8,r9,r8
800026b0:	ef 48 fe dc 	st.w	r7[-292],r8
800026b4:	ee f8 fe d4 	ld.w	r8,r7[-300]
800026b8:	ef 48 fe d8 	st.w	r7[-296],r8
800026bc:	ee f8 fe d0 	ld.w	r8,r7[-304]
800026c0:	ef 48 fe d4 	st.w	r7[-300],r8
800026c4:	ee f8 fe cc 	ld.w	r8,r7[-308]
800026c8:	ef 48 fe d0 	st.w	r7[-304],r8
800026cc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800026d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800026d4:	f2 08 00 08 	add	r8,r9,r8
800026d8:	ef 48 fe cc 	st.w	r7[-308],r8
800026dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026e0:	2f f8       	sub	r8,-1
800026e2:	ef 48 ff fc 	st.w	r7[-4],r8
800026e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026ea:	e0 48 00 3f 	cp.w	r8,63
800026ee:	fe 9a ff 67 	brle	800025bc <sha256_transf+0x1dc>
800026f2:	30 08       	mov	r8,0
800026f4:	ef 48 ff fc 	st.w	r7[-4],r8
800026f8:	c1 c8       	rjmp	80002730 <sha256_transf+0x350>
800026fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800026fe:	ee fa ff fc 	ld.w	r10,r7[-4]
80002702:	ee f8 fe c8 	ld.w	r8,r7[-312]
80002706:	2d ea       	sub	r10,-34
80002708:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000270c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002710:	a3 68       	lsl	r8,0x2
80002712:	ee 08 00 08 	add	r8,r7,r8
80002716:	f0 f8 fe cc 	ld.w	r8,r8[-308]
8000271a:	10 0a       	add	r10,r8
8000271c:	ee f8 fe c8 	ld.w	r8,r7[-312]
80002720:	2d e9       	sub	r9,-34
80002722:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80002726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000272a:	2f f8       	sub	r8,-1
8000272c:	ef 48 ff fc 	st.w	r7[-4],r8
80002730:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002734:	58 78       	cp.w	r8,7
80002736:	fe 9a ff e2 	brle	800026fa <sha256_transf+0x31a>
8000273a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000273e:	2f f8       	sub	r8,-1
80002740:	ef 48 ff f8 	st.w	r7[-8],r8
80002744:	ee f9 fe c0 	ld.w	r9,r7[-320]
80002748:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000274c:	10 39       	cp.w	r9,r8
8000274e:	fe 99 fe 58 	brgt	800023fe <sha256_transf+0x1e>
80002752:	2b 0d       	sub	sp,-320
80002754:	e3 cd 80 80 	ldm	sp++,r7,pc
80002758:	00 00       	add	r0,r0
8000275a:	00 28       	rsub	r8,r0

8000275c <sha256>:
8000275c:	eb cd 40 80 	pushm	r7,lr
80002760:	1a 97       	mov	r7,sp
80002762:	fa cd 00 b4 	sub	sp,sp,180
80002766:	ef 4c ff 54 	st.w	r7[-172],r12
8000276a:	ef 4b ff 50 	st.w	r7[-176],r11
8000276e:	ef 4a ff 4c 	st.w	r7[-180],r10
80002772:	ee c8 00 a8 	sub	r8,r7,168
80002776:	10 9c       	mov	r12,r8
80002778:	f0 1f 00 0b 	mcall	800027a4 <sha256+0x48>
8000277c:	ee c8 00 a8 	sub	r8,r7,168
80002780:	ee fa ff 50 	ld.w	r10,r7[-176]
80002784:	ee fb ff 54 	ld.w	r11,r7[-172]
80002788:	10 9c       	mov	r12,r8
8000278a:	f0 1f 00 08 	mcall	800027a8 <sha256+0x4c>
8000278e:	ee c8 00 a8 	sub	r8,r7,168
80002792:	ee fb ff 4c 	ld.w	r11,r7[-180]
80002796:	10 9c       	mov	r12,r8
80002798:	f0 1f 00 05 	mcall	800027ac <sha256+0x50>
8000279c:	2d 3d       	sub	sp,-180
8000279e:	e3 cd 80 80 	ldm	sp++,r7,pc
800027a2:	00 00       	add	r0,r0
800027a4:	80 00       	ld.sh	r0,r0[0x0]
800027a6:	27 b0       	sub	r0,123
800027a8:	80 00       	ld.sh	r0,r0[0x0]
800027aa:	28 0c       	sub	r12,-128
800027ac:	80 00       	ld.sh	r0,r0[0x0]
800027ae:	29 34       	sub	r4,-109

800027b0 <sha256_init>:
800027b0:	eb cd 40 80 	pushm	r7,lr
800027b4:	1a 97       	mov	r7,sp
800027b6:	20 2d       	sub	sp,8
800027b8:	ef 4c ff f8 	st.w	r7[-8],r12
800027bc:	30 08       	mov	r8,0
800027be:	ef 48 ff fc 	st.w	r7[-4],r8
800027c2:	c1 28       	rjmp	800027e6 <sha256_init+0x36>
800027c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027c8:	ee fa ff fc 	ld.w	r10,r7[-4]
800027cc:	48 f8       	lddpc	r8,80002808 <sha256_init+0x58>
800027ce:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800027d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027d6:	2d e9       	sub	r9,-34
800027d8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800027dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800027e0:	2f f8       	sub	r8,-1
800027e2:	ef 48 ff fc 	st.w	r7[-4],r8
800027e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800027ea:	58 78       	cp.w	r8,7
800027ec:	fe 9a ff ec 	brle	800027c4 <sha256_init+0x14>
800027f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027f4:	30 09       	mov	r9,0
800027f6:	91 19       	st.w	r8[0x4],r9
800027f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027fc:	30 09       	mov	r9,0
800027fe:	91 09       	st.w	r8[0x0],r9
80002800:	2f ed       	sub	sp,-8
80002802:	e3 cd 80 80 	ldm	sp++,r7,pc
80002806:	00 00       	add	r0,r0
80002808:	00 00       	add	r0,r0
8000280a:	00 08       	add	r8,r0

8000280c <sha256_update>:
8000280c:	eb cd 40 80 	pushm	r7,lr
80002810:	1a 97       	mov	r7,sp
80002812:	20 8d       	sub	sp,32
80002814:	ef 4c ff e8 	st.w	r7[-24],r12
80002818:	ef 4b ff e4 	st.w	r7[-28],r11
8000281c:	ef 4a ff e0 	st.w	r7[-32],r10
80002820:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002824:	70 18       	ld.w	r8,r8[0x4]
80002826:	f0 08 11 40 	rsub	r8,r8,64
8000282a:	ef 48 ff f8 	st.w	r7[-8],r8
8000282e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002832:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002836:	ee fa ff f8 	ld.w	r10,r7[-8]
8000283a:	10 3a       	cp.w	r10,r8
8000283c:	f2 08 17 80 	movls	r8,r9
80002840:	ef 48 ff f4 	st.w	r7[-12],r8
80002844:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002848:	f0 c9 ff f8 	sub	r9,r8,-8
8000284c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002850:	70 18       	ld.w	r8,r8[0x4]
80002852:	f2 08 00 08 	add	r8,r9,r8
80002856:	ee fa ff f4 	ld.w	r10,r7[-12]
8000285a:	ee fb ff e4 	ld.w	r11,r7[-28]
8000285e:	10 9c       	mov	r12,r8
80002860:	f0 1f 00 33 	mcall	8000292c <sha256_update+0x120>
80002864:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002868:	70 19       	ld.w	r9,r8[0x4]
8000286a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000286e:	f2 08 00 08 	add	r8,r9,r8
80002872:	e0 48 00 3f 	cp.w	r8,63
80002876:	e0 8b 00 0c 	brhi	8000288e <sha256_update+0x82>
8000287a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000287e:	70 19       	ld.w	r9,r8[0x4]
80002880:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002884:	10 09       	add	r9,r8
80002886:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000288a:	91 19       	st.w	r8[0x4],r9
8000288c:	c4 c8       	rjmp	80002924 <sha256_update+0x118>
8000288e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80002892:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002896:	f2 08 01 08 	sub	r8,r9,r8
8000289a:	ef 48 ff f0 	st.w	r7[-16],r8
8000289e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028a2:	a7 88       	lsr	r8,0x6
800028a4:	ef 48 ff ec 	st.w	r7[-20],r8
800028a8:	ee f9 ff e4 	ld.w	r9,r7[-28]
800028ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028b0:	f2 08 00 08 	add	r8,r9,r8
800028b4:	ef 48 ff fc 	st.w	r7[-4],r8
800028b8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800028bc:	2f 88       	sub	r8,-8
800028be:	30 1a       	mov	r10,1
800028c0:	10 9b       	mov	r11,r8
800028c2:	ee fc ff e8 	ld.w	r12,r7[-24]
800028c6:	f0 1f 00 1b 	mcall	80002930 <sha256_update+0x124>
800028ca:	ee fa ff ec 	ld.w	r10,r7[-20]
800028ce:	ee fb ff fc 	ld.w	r11,r7[-4]
800028d2:	ee fc ff e8 	ld.w	r12,r7[-24]
800028d6:	f0 1f 00 17 	mcall	80002930 <sha256_update+0x124>
800028da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028de:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800028e2:	ef 48 ff f4 	st.w	r7[-12],r8
800028e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028ea:	a7 68       	lsl	r8,0x6
800028ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800028f0:	10 09       	add	r9,r8
800028f2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800028f6:	2f 88       	sub	r8,-8
800028f8:	ee fa ff f4 	ld.w	r10,r7[-12]
800028fc:	12 9b       	mov	r11,r9
800028fe:	10 9c       	mov	r12,r8
80002900:	f0 1f 00 0b 	mcall	8000292c <sha256_update+0x120>
80002904:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002908:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000290c:	91 19       	st.w	r8[0x4],r9
8000290e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002912:	70 09       	ld.w	r9,r8[0x0]
80002914:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002918:	2f f8       	sub	r8,-1
8000291a:	a7 68       	lsl	r8,0x6
8000291c:	10 09       	add	r9,r8
8000291e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002922:	91 09       	st.w	r8[0x0],r9
80002924:	2f 8d       	sub	sp,-32
80002926:	e3 cd 80 80 	ldm	sp++,r7,pc
8000292a:	00 00       	add	r0,r0
8000292c:	80 00       	ld.sh	r0,r0[0x0]
8000292e:	e8 f6 80 00 	ld.w	r6,r4[-32768]
80002932:	23 e0       	sub	r0,62

80002934 <sha256_final>:
80002934:	eb cd 40 80 	pushm	r7,lr
80002938:	1a 97       	mov	r7,sp
8000293a:	20 6d       	sub	sp,24
8000293c:	ef 4c ff ec 	st.w	r7[-20],r12
80002940:	ef 4b ff e8 	st.w	r7[-24],r11
80002944:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002948:	70 18       	ld.w	r8,r8[0x4]
8000294a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000294e:	e0 48 00 37 	cp.w	r8,55
80002952:	e0 88 00 04 	brls	8000295a <sha256_final+0x26>
80002956:	30 28       	mov	r8,2
80002958:	c0 28       	rjmp	8000295c <sha256_final+0x28>
8000295a:	30 18       	mov	r8,1
8000295c:	ef 48 ff f0 	st.w	r7[-16],r8
80002960:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002964:	70 09       	ld.w	r9,r8[0x0]
80002966:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000296a:	70 18       	ld.w	r8,r8[0x4]
8000296c:	f2 08 00 08 	add	r8,r9,r8
80002970:	a3 78       	lsl	r8,0x3
80002972:	ef 48 ff f8 	st.w	r7[-8],r8
80002976:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000297a:	a7 68       	lsl	r8,0x6
8000297c:	ef 48 ff f4 	st.w	r7[-12],r8
80002980:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002984:	70 18       	ld.w	r8,r8[0x4]
80002986:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000298a:	10 19       	sub	r9,r8
8000298c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002990:	f0 ca ff f8 	sub	r10,r8,-8
80002994:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002998:	70 18       	ld.w	r8,r8[0x4]
8000299a:	f4 08 00 08 	add	r8,r10,r8
8000299e:	12 9a       	mov	r10,r9
800029a0:	30 0b       	mov	r11,0
800029a2:	10 9c       	mov	r12,r8
800029a4:	f0 1f 00 4e 	mcall	80002adc <sha256_final+0x1a8>
800029a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029ac:	70 18       	ld.w	r8,r8[0x4]
800029ae:	ee f9 ff ec 	ld.w	r9,r7[-20]
800029b2:	10 09       	add	r9,r8
800029b4:	38 08       	mov	r8,-128
800029b6:	f3 68 00 08 	st.b	r9[8],r8
800029ba:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029be:	f0 c9 ff f8 	sub	r9,r8,-8
800029c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029c6:	20 18       	sub	r8,1
800029c8:	10 09       	add	r9,r8
800029ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029ce:	5c 58       	castu.b	r8
800029d0:	b2 88       	st.b	r9[0x0],r8
800029d2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029d6:	f0 c9 ff f8 	sub	r9,r8,-8
800029da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029de:	20 28       	sub	r8,2
800029e0:	10 09       	add	r9,r8
800029e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029e6:	a9 88       	lsr	r8,0x8
800029e8:	5c 58       	castu.b	r8
800029ea:	b2 88       	st.b	r9[0x0],r8
800029ec:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029f0:	f0 c9 ff f8 	sub	r9,r8,-8
800029f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029f8:	20 38       	sub	r8,3
800029fa:	10 09       	add	r9,r8
800029fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a00:	b1 88       	lsr	r8,0x10
80002a02:	5c 58       	castu.b	r8
80002a04:	b2 88       	st.b	r9[0x0],r8
80002a06:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a0a:	f0 c9 ff f8 	sub	r9,r8,-8
80002a0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002a12:	20 48       	sub	r8,4
80002a14:	10 09       	add	r9,r8
80002a16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a1a:	b9 88       	lsr	r8,0x18
80002a1c:	5c 58       	castu.b	r8
80002a1e:	b2 88       	st.b	r9[0x0],r8
80002a20:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a24:	2f 88       	sub	r8,-8
80002a26:	ee fa ff f0 	ld.w	r10,r7[-16]
80002a2a:	10 9b       	mov	r11,r8
80002a2c:	ee fc ff ec 	ld.w	r12,r7[-20]
80002a30:	f0 1f 00 2c 	mcall	80002ae0 <sha256_final+0x1ac>
80002a34:	30 08       	mov	r8,0
80002a36:	ef 48 ff fc 	st.w	r7[-4],r8
80002a3a:	c4 88       	rjmp	80002aca <sha256_final+0x196>
80002a3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a40:	a3 68       	lsl	r8,0x2
80002a42:	2f d8       	sub	r8,-3
80002a44:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002a48:	10 09       	add	r9,r8
80002a4a:	ee fa ff fc 	ld.w	r10,r7[-4]
80002a4e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a52:	2d ea       	sub	r10,-34
80002a54:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002a58:	5c 58       	castu.b	r8
80002a5a:	b2 88       	st.b	r9[0x0],r8
80002a5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a60:	a3 68       	lsl	r8,0x2
80002a62:	2f e8       	sub	r8,-2
80002a64:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002a68:	10 09       	add	r9,r8
80002a6a:	ee fa ff fc 	ld.w	r10,r7[-4]
80002a6e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a72:	2d ea       	sub	r10,-34
80002a74:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002a78:	a9 88       	lsr	r8,0x8
80002a7a:	5c 58       	castu.b	r8
80002a7c:	b2 88       	st.b	r9[0x0],r8
80002a7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a82:	a3 68       	lsl	r8,0x2
80002a84:	2f f8       	sub	r8,-1
80002a86:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002a8a:	10 09       	add	r9,r8
80002a8c:	ee fa ff fc 	ld.w	r10,r7[-4]
80002a90:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a94:	2d ea       	sub	r10,-34
80002a96:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002a9a:	b1 88       	lsr	r8,0x10
80002a9c:	5c 58       	castu.b	r8
80002a9e:	b2 88       	st.b	r9[0x0],r8
80002aa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002aa4:	a3 68       	lsl	r8,0x2
80002aa6:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002aaa:	10 09       	add	r9,r8
80002aac:	ee fa ff fc 	ld.w	r10,r7[-4]
80002ab0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002ab4:	2d ea       	sub	r10,-34
80002ab6:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002aba:	b9 88       	lsr	r8,0x18
80002abc:	5c 58       	castu.b	r8
80002abe:	b2 88       	st.b	r9[0x0],r8
80002ac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ac4:	2f f8       	sub	r8,-1
80002ac6:	ef 48 ff fc 	st.w	r7[-4],r8
80002aca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ace:	58 78       	cp.w	r8,7
80002ad0:	fe 9a ff b6 	brle	80002a3c <sha256_final+0x108>
80002ad4:	2f ad       	sub	sp,-24
80002ad6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ada:	00 00       	add	r0,r0
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	ea 3e 80 00 	sub	lr,753664
80002ae2:	23 e0       	sub	r0,62

80002ae4 <pbkdf2_func>:

volatile uint256_t var_Password;


void pbkdf2_func(uint8_t *password, uint8_t *derived_key)
{
80002ae4:	eb cd 40 80 	pushm	r7,lr
80002ae8:	1a 97       	mov	r7,sp
80002aea:	fa cd 00 98 	sub	sp,sp,152
80002aee:	ef 4c ff 6c 	st.w	r7[-148],r12
80002af2:	ef 4b ff 68 	st.w	r7[-152],r11
	unsigned short int iteration_count;
	unsigned char mac[hLen];
	unsigned char Ubuffer[hLen+4] = {0};
80002af6:	ee c8 00 50 	sub	r8,r7,80
80002afa:	30 0a       	mov	r10,0
80002afc:	30 0b       	mov	r11,0
80002afe:	f0 eb 00 00 	st.d	r8[0],r10
80002b02:	2f 88       	sub	r8,-8
80002b04:	30 0a       	mov	r10,0
80002b06:	30 0b       	mov	r11,0
80002b08:	f0 eb 00 00 	st.d	r8[0],r10
80002b0c:	2f 88       	sub	r8,-8
80002b0e:	30 0a       	mov	r10,0
80002b10:	30 0b       	mov	r11,0
80002b12:	f0 eb 00 00 	st.d	r8[0],r10
80002b16:	2f 88       	sub	r8,-8
80002b18:	30 0a       	mov	r10,0
80002b1a:	30 0b       	mov	r11,0
80002b1c:	f0 eb 00 00 	st.d	r8[0],r10
80002b20:	2f 88       	sub	r8,-8
80002b22:	30 09       	mov	r9,0
80002b24:	91 09       	st.w	r8[0x0],r9
80002b26:	2f c8       	sub	r8,-4
	unsigned char Tbuffer[hLen] = {0};
80002b28:	ee c8 00 70 	sub	r8,r7,112
80002b2c:	30 0a       	mov	r10,0
80002b2e:	30 0b       	mov	r11,0
80002b30:	f0 eb 00 00 	st.d	r8[0],r10
80002b34:	2f 88       	sub	r8,-8
80002b36:	30 0a       	mov	r10,0
80002b38:	30 0b       	mov	r11,0
80002b3a:	f0 eb 00 00 	st.d	r8[0],r10
80002b3e:	2f 88       	sub	r8,-8
80002b40:	30 0a       	mov	r10,0
80002b42:	30 0b       	mov	r11,0
80002b44:	f0 eb 00 00 	st.d	r8[0],r10
80002b48:	2f 88       	sub	r8,-8
80002b4a:	30 0a       	mov	r10,0
80002b4c:	30 0b       	mov	r11,0
80002b4e:	f0 eb 00 00 	st.d	r8[0],r10
80002b52:	2f 88       	sub	r8,-8
	unsigned char Fbuffer[hLen] = {0};
80002b54:	ee c8 00 90 	sub	r8,r7,144
80002b58:	30 0a       	mov	r10,0
80002b5a:	30 0b       	mov	r11,0
80002b5c:	f0 eb 00 00 	st.d	r8[0],r10
80002b60:	2f 88       	sub	r8,-8
80002b62:	30 0a       	mov	r10,0
80002b64:	30 0b       	mov	r11,0
80002b66:	f0 eb 00 00 	st.d	r8[0],r10
80002b6a:	2f 88       	sub	r8,-8
80002b6c:	30 0a       	mov	r10,0
80002b6e:	30 0b       	mov	r11,0
80002b70:	f0 eb 00 00 	st.d	r8[0],r10
80002b74:	2f 88       	sub	r8,-8
80002b76:	30 0a       	mov	r10,0
80002b78:	30 0b       	mov	r11,0
80002b7a:	f0 eb 00 00 	st.d	r8[0],r10
80002b7e:	2f 88       	sub	r8,-8
	unsigned char total_blocks = hLen / hLen, block_num = 1;
80002b80:	30 18       	mov	r8,1
80002b82:	ef 68 ff f6 	st.b	r7[-10],r8
80002b86:	30 18       	mov	r8,1
80002b88:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char *Salt = (unsigned char *)var_Salt.index;
80002b8c:	4e 58       	lddpc	r8,80002d20 <pbkdf2_func+0x23c>
80002b8e:	ef 48 ff f8 	st.w	r7[-8],r8
	
	while (block_num <= total_blocks)
80002b92:	cb b8       	rjmp	80002d08 <pbkdf2_func+0x224>
	{
		iteration_count = 0;
80002b94:	30 08       	mov	r8,0
80002b96:	ef 58 ff f4 	st.h	r7[-12],r8
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002b9a:	c9 a8       	rjmp	80002cce <pbkdf2_func+0x1ea>
		{
			unsigned short int i;
			if (iteration_count == 0)
80002b9c:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002ba0:	30 08       	mov	r8,0
80002ba2:	f0 09 19 00 	cp.h	r9,r8
80002ba6:	c5 e1       	brne	80002c62 <pbkdf2_func+0x17e>
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002ba8:	30 08       	mov	r8,0
80002baa:	ef 58 ff fe 	st.h	r7[-2],r8
80002bae:	c1 38       	rjmp	80002bd4 <pbkdf2_func+0xf0>
				{
					Ubuffer[i] = Salt[i];
80002bb0:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002bb4:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002bb8:	ee fa ff f8 	ld.w	r10,r7[-8]
80002bbc:	f4 08 00 08 	add	r8,r10,r8
80002bc0:	11 88       	ld.ub	r8,r8[0x0]
80002bc2:	ee 09 00 09 	add	r9,r7,r9
80002bc6:	f3 68 ff b0 	st.b	r9[-80],r8
		{
			unsigned short int i;
			if (iteration_count == 0)
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002bca:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002bce:	2f f8       	sub	r8,-1
80002bd0:	ef 58 ff fe 	st.h	r7[-2],r8
80002bd4:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80002bd8:	31 f8       	mov	r8,31
80002bda:	f0 09 19 00 	cp.h	r9,r8
80002bde:	fe 98 ff e9 	brls	80002bb0 <pbkdf2_func+0xcc>
				{
					Ubuffer[i] = Salt[i];
				}
				Ubuffer[i++] = (block_num >> 24) & 0xFF;
80002be2:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002be6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002bea:	b9 48       	asr	r8,0x18
80002bec:	5c 58       	castu.b	r8
80002bee:	ee 09 00 09 	add	r9,r7,r9
80002bf2:	f3 68 ff b0 	st.b	r9[-80],r8
80002bf6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002bfa:	2f f8       	sub	r8,-1
80002bfc:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 16) & 0xFF;
80002c00:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002c04:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002c08:	b1 48       	asr	r8,0x10
80002c0a:	5c 58       	castu.b	r8
80002c0c:	ee 09 00 09 	add	r9,r7,r9
80002c10:	f3 68 ff b0 	st.b	r9[-80],r8
80002c14:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002c18:	2f f8       	sub	r8,-1
80002c1a:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 8) & 0xFF;
80002c1e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002c22:	ee 08 00 09 	add	r9,r7,r8
80002c26:	30 08       	mov	r8,0
80002c28:	f3 68 ff b0 	st.b	r9[-80],r8
80002c2c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002c30:	2f f8       	sub	r8,-1
80002c32:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i] = (block_num >> 0) & 0xFF;
80002c36:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002c3a:	ee 08 00 09 	add	r9,r7,r8
80002c3e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002c42:	f3 68 ff b0 	st.b	r9[-80],r8
				hmac_sha256(password, 32, Ubuffer, 36, mac, 32);
80002c46:	ee c8 00 2c 	sub	r8,r7,44
80002c4a:	ee ca 00 50 	sub	r10,r7,80
80002c4e:	32 09       	mov	r9,32
80002c50:	1a d9       	st.w	--sp,r9
80002c52:	32 49       	mov	r9,36
80002c54:	32 0b       	mov	r11,32
80002c56:	ee fc ff 6c 	ld.w	r12,r7[-148]
80002c5a:	f0 1f 00 33 	mcall	80002d24 <pbkdf2_func+0x240>
80002c5e:	2f fd       	sub	sp,-4
80002c60:	c0 d8       	rjmp	80002c7a <pbkdf2_func+0x196>
			}
			else
			{
				hmac_sha256((const unsigned char *)var_Password.index, 32, Ubuffer, 32, mac, 32);
80002c62:	4b 2c       	lddpc	r12,80002d28 <pbkdf2_func+0x244>
80002c64:	ee c8 00 2c 	sub	r8,r7,44
80002c68:	ee ca 00 50 	sub	r10,r7,80
80002c6c:	32 09       	mov	r9,32
80002c6e:	1a d9       	st.w	--sp,r9
80002c70:	32 09       	mov	r9,32
80002c72:	32 0b       	mov	r11,32
80002c74:	f0 1f 00 2c 	mcall	80002d24 <pbkdf2_func+0x240>
80002c78:	2f fd       	sub	sp,-4
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
80002c7a:	ee c9 00 2c 	sub	r9,r7,44
80002c7e:	ee c8 00 90 	sub	r8,r7,144
80002c82:	30 8a       	mov	r10,8
80002c84:	12 9b       	mov	r11,r9
80002c86:	10 9c       	mov	r12,r8
80002c88:	f0 1f 00 29 	mcall	80002d2c <pbkdf2_func+0x248>
			
			for (i = 0; i < hLen; i++)
80002c8c:	30 08       	mov	r8,0
80002c8e:	ef 58 ff fc 	st.h	r7[-4],r8
80002c92:	c1 28       	rjmp	80002cb6 <pbkdf2_func+0x1d2>
			{
				Ubuffer[i] = mac[i];
80002c94:	ef 19 ff fc 	ld.uh	r9,r7[-4]
80002c98:	ef 18 ff fc 	ld.uh	r8,r7[-4]
80002c9c:	ee 08 00 08 	add	r8,r7,r8
80002ca0:	f1 38 ff d4 	ld.ub	r8,r8[-44]
80002ca4:	ee 09 00 09 	add	r9,r7,r9
80002ca8:	f3 68 ff b0 	st.b	r9[-80],r8
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
			
			for (i = 0; i < hLen; i++)
80002cac:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80002cb0:	2f f8       	sub	r8,-1
80002cb2:	ef 58 ff fc 	st.h	r7[-4],r8
80002cb6:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80002cba:	31 f8       	mov	r8,31
80002cbc:	f0 09 19 00 	cp.h	r9,r8
80002cc0:	fe 98 ff ea 	brls	80002c94 <pbkdf2_func+0x1b0>
			{
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
80002cc4:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80002cc8:	2f f8       	sub	r8,-1
80002cca:	ef 58 ff f4 	st.h	r7[-12],r8
	unsigned char *Salt = (unsigned char *)var_Salt.index;
	
	while (block_num <= total_blocks)
	{
		iteration_count = 0;
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002cce:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002cd2:	e0 68 01 f3 	mov	r8,499
80002cd6:	f0 09 19 00 	cp.h	r9,r8
80002cda:	fe 98 ff 61 	brls	80002b9c <pbkdf2_func+0xb8>
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
80002cde:	ee c9 00 90 	sub	r9,r7,144
80002ce2:	ee f8 ff 68 	ld.w	r8,r7[-152]
80002ce6:	30 8a       	mov	r10,8
80002ce8:	12 9b       	mov	r11,r9
80002cea:	10 9c       	mov	r12,r8
80002cec:	f0 1f 00 10 	mcall	80002d2c <pbkdf2_func+0x248>
		memset(Fbuffer, 0, 32);		
80002cf0:	ee c8 00 90 	sub	r8,r7,144
80002cf4:	32 0a       	mov	r10,32
80002cf6:	30 0b       	mov	r11,0
80002cf8:	10 9c       	mov	r12,r8
80002cfa:	f0 1f 00 0e 	mcall	80002d30 <pbkdf2_func+0x24c>
		block_num++;
80002cfe:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002d02:	2f f8       	sub	r8,-1
80002d04:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char Tbuffer[hLen] = {0};
	unsigned char Fbuffer[hLen] = {0};
	unsigned char total_blocks = hLen / hLen, block_num = 1;
	unsigned char *Salt = (unsigned char *)var_Salt.index;
	
	while (block_num <= total_blocks)
80002d08:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80002d0c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80002d10:	f0 09 18 00 	cp.b	r9,r8
80002d14:	fe 98 ff 40 	brls	80002b94 <pbkdf2_func+0xb0>
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
		memset(Fbuffer, 0, 32);		
		block_num++;
	}
80002d18:	2d ad       	sub	sp,-152
80002d1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d1e:	00 00       	add	r0,r0
80002d20:	00 00       	add	r0,r0
80002d22:	0b a8       	ld.ub	r8,r5[0x2]
80002d24:	80 00       	ld.sh	r0,r0[0x0]
80002d26:	23 74       	sub	r4,55
80002d28:	00 00       	add	r0,r0
80002d2a:	0a 64       	and	r4,r5
80002d2c:	80 00       	ld.sh	r0,r0[0x0]
80002d2e:	2e c8       	sub	r8,-20
80002d30:	80 00       	ld.sh	r0,r0[0x0]
80002d32:	ea 3e eb cd 	sub	lr,781261

80002d34 <encrypt_password>:
volatile uint32_t var_W_ticks = 0;
volatile uint256_t var_Salt;


uint32_t * encrypt_password(uint32_t *password)
{
80002d34:	eb cd 40 80 	pushm	r7,lr
80002d38:	1a 97       	mov	r7,sp
80002d3a:	21 1d       	sub	sp,68
80002d3c:	ef 4c ff bc 	st.w	r7[-68],r12
	uint8_t temp_dk[32] = {0}, temp_dk_digest[32] = {0};
80002d40:	ee c8 00 20 	sub	r8,r7,32
80002d44:	30 0a       	mov	r10,0
80002d46:	30 0b       	mov	r11,0
80002d48:	f0 eb 00 00 	st.d	r8[0],r10
80002d4c:	2f 88       	sub	r8,-8
80002d4e:	30 0a       	mov	r10,0
80002d50:	30 0b       	mov	r11,0
80002d52:	f0 eb 00 00 	st.d	r8[0],r10
80002d56:	2f 88       	sub	r8,-8
80002d58:	30 0a       	mov	r10,0
80002d5a:	30 0b       	mov	r11,0
80002d5c:	f0 eb 00 00 	st.d	r8[0],r10
80002d60:	2f 88       	sub	r8,-8
80002d62:	30 0a       	mov	r10,0
80002d64:	30 0b       	mov	r11,0
80002d66:	f0 eb 00 00 	st.d	r8[0],r10
80002d6a:	2f 88       	sub	r8,-8
80002d6c:	ee c8 00 40 	sub	r8,r7,64
80002d70:	30 0a       	mov	r10,0
80002d72:	30 0b       	mov	r11,0
80002d74:	f0 eb 00 00 	st.d	r8[0],r10
80002d78:	2f 88       	sub	r8,-8
80002d7a:	30 0a       	mov	r10,0
80002d7c:	30 0b       	mov	r11,0
80002d7e:	f0 eb 00 00 	st.d	r8[0],r10
80002d82:	2f 88       	sub	r8,-8
80002d84:	30 0a       	mov	r10,0
80002d86:	30 0b       	mov	r11,0
80002d88:	f0 eb 00 00 	st.d	r8[0],r10
80002d8c:	2f 88       	sub	r8,-8
80002d8e:	30 0a       	mov	r10,0
80002d90:	30 0b       	mov	r11,0
80002d92:	f0 eb 00 00 	st.d	r8[0],r10
80002d96:	2f 88       	sub	r8,-8
	pbkdf2_func((uint8_t *)password, temp_dk);
80002d98:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002d9c:	ee c9 00 20 	sub	r9,r7,32
80002da0:	12 9b       	mov	r11,r9
80002da2:	10 9c       	mov	r12,r8
80002da4:	f0 1f 00 0e 	mcall	80002ddc <encrypt_password+0xa8>
	sha256(temp_dk, 32, temp_dk_digest);
80002da8:	ee c9 00 40 	sub	r9,r7,64
80002dac:	ee c8 00 20 	sub	r8,r7,32
80002db0:	12 9a       	mov	r10,r9
80002db2:	32 0b       	mov	r11,32
80002db4:	10 9c       	mov	r12,r8
80002db6:	f0 1f 00 0b 	mcall	80002de0 <encrypt_password+0xac>
	apply_aes_encryption(&AVR32_AES, (uint32_t *)temp_dk_digest, (uint32_t *)temp_dk, 32, 0x00000000);
80002dba:	ee ca 00 20 	sub	r10,r7,32
80002dbe:	ee cb 00 40 	sub	r11,r7,64
80002dc2:	30 08       	mov	r8,0
80002dc4:	32 09       	mov	r9,32
80002dc6:	fc 7c 00 00 	mov	r12,-196608
80002dca:	f0 1f 00 07 	mcall	80002de4 <encrypt_password+0xb0>
	return (uint32_t *)temp_dk_digest;	
80002dce:	ee c8 00 40 	sub	r8,r7,64
}
80002dd2:	10 9c       	mov	r12,r8
80002dd4:	2e fd       	sub	sp,-68
80002dd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dda:	00 00       	add	r0,r0
80002ddc:	80 00       	ld.sh	r0,r0[0x0]
80002dde:	2a e4       	sub	r4,-82
80002de0:	80 00       	ld.sh	r0,r0[0x0]
80002de2:	27 5c       	sub	r12,117
80002de4:	80 00       	ld.sh	r0,r0[0x0]
80002de6:	42 e0       	lddsp	r0,sp[0xb8]

80002de8 <random_lcg>:


uint32_t random_lcg (void)
{
80002de8:	eb cd 40 80 	pushm	r7,lr
80002dec:	1a 97       	mov	r7,sp
	rseed = (rseed * 1103515245 + 12345) & RAND_MAX;
80002dee:	48 a8       	lddpc	r8,80002e14 <random_lcg+0x2c>
80002df0:	70 09       	ld.w	r9,r8[0x0]
80002df2:	e0 68 4e 6d 	mov	r8,20077
80002df6:	ea 18 41 c6 	orh	r8,0x41c6
80002dfa:	f2 08 02 48 	mul	r8,r9,r8
80002dfe:	f0 c8 cf c7 	sub	r8,r8,-12345
80002e02:	f3 d8 c0 1f 	bfextu	r9,r8,0x0,0x1f
80002e06:	48 48       	lddpc	r8,80002e14 <random_lcg+0x2c>
80002e08:	91 09       	st.w	r8[0x0],r9
	return rseed;
80002e0a:	48 38       	lddpc	r8,80002e14 <random_lcg+0x2c>
80002e0c:	70 08       	ld.w	r8,r8[0x0]
}
80002e0e:	10 9c       	mov	r12,r8
80002e10:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e14:	00 00       	add	r0,r0
80002e16:	02 8c       	andn	r12,r1

80002e18 <calculate_salt>:

//void random_256 ()

void calculate_salt(void)
{
80002e18:	eb cd 40 80 	pushm	r7,lr
80002e1c:	1a 97       	mov	r7,sp
80002e1e:	20 1d       	sub	sp,4
	uint32_t random_value = 0;
80002e20:	30 08       	mov	r8,0
80002e22:	ef 48 ff fc 	st.w	r7[-4],r8
	calculate_hash(pass_code, 8, var_Hkey.index); // Calculates sha256 of the keys pressed in var_W*10 msec interval and stores it in var_Hkey
80002e26:	49 e9       	lddpc	r9,80002e9c <calculate_salt+0x84>
80002e28:	49 e8       	lddpc	r8,80002ea0 <calculate_salt+0x88>
80002e2a:	70 08       	ld.w	r8,r8[0x0]
80002e2c:	12 9a       	mov	r10,r9
80002e2e:	30 8b       	mov	r11,8
80002e30:	10 9c       	mov	r12,r8
80002e32:	f0 1f 00 1d 	mcall	80002ea4 <calculate_salt+0x8c>
 	
	random_value = random_lcg();	
80002e36:	f0 1f 00 1d 	mcall	80002ea8 <calculate_salt+0x90>
80002e3a:	18 98       	mov	r8,r12
80002e3c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	calculate_hash(&random_value, 1, var_R.index);
80002e40:	49 b9       	lddpc	r9,80002eac <calculate_salt+0x94>
80002e42:	ee c8 00 04 	sub	r8,r7,4
80002e46:	12 9a       	mov	r10,r9
80002e48:	30 1b       	mov	r11,1
80002e4a:	10 9c       	mov	r12,r8
80002e4c:	f0 1f 00 16 	mcall	80002ea4 <calculate_salt+0x8c>
	
	xor_func(var_R.index, var_Hkey.index, 8);
80002e50:	49 39       	lddpc	r9,80002e9c <calculate_salt+0x84>
80002e52:	49 78       	lddpc	r8,80002eac <calculate_salt+0x94>
80002e54:	30 8a       	mov	r10,8
80002e56:	12 9b       	mov	r11,r9
80002e58:	10 9c       	mov	r12,r8
80002e5a:	f0 1f 00 16 	mcall	80002eb0 <calculate_salt+0x98>
	
	calculate_hash(var_R.index, 8, var_T.index);
80002e5e:	49 69       	lddpc	r9,80002eb4 <calculate_salt+0x9c>
80002e60:	49 38       	lddpc	r8,80002eac <calculate_salt+0x94>
80002e62:	12 9a       	mov	r10,r9
80002e64:	30 8b       	mov	r11,8
80002e66:	10 9c       	mov	r12,r8
80002e68:	f0 1f 00 0f 	mcall	80002ea4 <calculate_salt+0x8c>
 	
	xor_func(var_Salt.index, var_T.index, 8);
80002e6c:	49 29       	lddpc	r9,80002eb4 <calculate_salt+0x9c>
80002e6e:	49 38       	lddpc	r8,80002eb8 <calculate_salt+0xa0>
80002e70:	30 8a       	mov	r10,8
80002e72:	12 9b       	mov	r11,r9
80002e74:	10 9c       	mov	r12,r8
80002e76:	f0 1f 00 0f 	mcall	80002eb0 <calculate_salt+0x98>
	
	if (enter_button_status == THIRD_TIME_PRESSED)
80002e7a:	49 18       	lddpc	r8,80002ebc <calculate_salt+0xa4>
80002e7c:	11 88       	ld.ub	r8,r8[0x0]
80002e7e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002e82:	30 68       	mov	r8,6
80002e84:	f0 09 18 00 	cp.b	r9,r8
80002e88:	c0 41       	brne	80002e90 <calculate_salt+0x78>
	{
		save_salt_to_mcu();
80002e8a:	f0 1f 00 0e 	mcall	80002ec0 <calculate_salt+0xa8>
80002e8e:	c0 38       	rjmp	80002e94 <calculate_salt+0x7c>
	}
	else
	{
		Start_W_timer();	
80002e90:	f0 1f 00 0d 	mcall	80002ec4 <calculate_salt+0xac>
	}
	
}
80002e94:	2f fd       	sub	sp,-4
80002e96:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e9a:	00 00       	add	r0,r0
80002e9c:	00 00       	add	r0,r0
80002e9e:	0b 48       	ld.w	r8,--r5
80002ea0:	00 00       	add	r0,r0
80002ea2:	0b c8       	ld.ub	r8,r5[0x4]
80002ea4:	80 00       	ld.sh	r0,r0[0x0]
80002ea6:	30 44       	mov	r4,4
80002ea8:	80 00       	ld.sh	r0,r0[0x0]
80002eaa:	2d e8       	sub	r8,-34
80002eac:	00 00       	add	r0,r0
80002eae:	0b 88       	ld.ub	r8,r5[0x0]
80002eb0:	80 00       	ld.sh	r0,r0[0x0]
80002eb2:	2e c8       	sub	r8,-20
80002eb4:	00 00       	add	r0,r0
80002eb6:	0b 68       	ld.uh	r8,--r5
80002eb8:	00 00       	add	r0,r0
80002eba:	0b a8       	ld.ub	r8,r5[0x2]
80002ebc:	00 00       	add	r0,r0
80002ebe:	03 da       	ld.ub	r10,r1[0x5]
80002ec0:	80 00       	ld.sh	r0,r0[0x0]
80002ec2:	2f 34       	sub	r4,-13
80002ec4:	80 00       	ld.sh	r0,r0[0x0]
80002ec6:	2f d8       	sub	r8,-3

80002ec8 <xor_func>:

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
80002ec8:	eb cd 40 80 	pushm	r7,lr
80002ecc:	1a 97       	mov	r7,sp
80002ece:	20 4d       	sub	sp,16
80002ed0:	ef 4c ff f8 	st.w	r7[-8],r12
80002ed4:	ef 4b ff f4 	st.w	r7[-12],r11
80002ed8:	14 98       	mov	r8,r10
80002eda:	ef 68 ff f0 	st.b	r7[-16],r8
	unsigned char i = 0;
80002ede:	30 08       	mov	r8,0
80002ee0:	ef 68 ff ff 	st.b	r7[-1],r8
	while (i++ < len)
80002ee4:	c1 58       	rjmp	80002f0e <xor_func+0x46>
	{
		*value1 = *value1 ^ *value2;
80002ee6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002eea:	70 09       	ld.w	r9,r8[0x0]
80002eec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002ef0:	70 08       	ld.w	r8,r8[0x0]
80002ef2:	10 59       	eor	r9,r8
80002ef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ef8:	91 09       	st.w	r8[0x0],r9
		value1++;	value2++;
80002efa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002efe:	2f c8       	sub	r8,-4
80002f00:	ef 48 ff f8 	st.w	r7[-8],r8
80002f04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002f08:	2f c8       	sub	r8,-4
80002f0a:	ef 48 ff f4 	st.w	r7[-12],r8
}

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
	unsigned char i = 0;
	while (i++ < len)
80002f0e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002f12:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002f16:	f0 09 18 00 	cp.b	r9,r8
80002f1a:	5f 38       	srlo	r8
80002f1c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002f20:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002f24:	2f f8       	sub	r8,-1
80002f26:	ef 68 ff ff 	st.b	r7[-1],r8
80002f2a:	58 09       	cp.w	r9,0
80002f2c:	cd d1       	brne	80002ee6 <xor_func+0x1e>
	{
		*value1 = *value1 ^ *value2;
		value1++;	value2++;
	}
}
80002f2e:	2f cd       	sub	sp,-16
80002f30:	e3 cd 80 80 	ldm	sp++,r7,pc

80002f34 <save_salt_to_mcu>:

void save_salt_to_mcu(void)
{
80002f34:	eb cd 40 80 	pushm	r7,lr
80002f38:	1a 97       	mov	r7,sp
80002f3a:	20 2d       	sub	sp,8
	//volatile salt_t *salt = &SALT_STRUCT;
	uint32_t *temp_encypted_password;
	uint8_t i;
	
	temp_encypted_password = encrypt_password(temp_password1);
80002f3c:	48 ec       	lddpc	r12,80002f74 <save_salt_to_mcu+0x40>
80002f3e:	f0 1f 00 0f 	mcall	80002f78 <save_salt_to_mcu+0x44>
80002f42:	18 98       	mov	r8,r12
80002f44:	ef 48 ff f8 	st.w	r7[-8],r8
	memcpy((uint8_t *)Stored_values_ram.unlock_password, (const uint8_t *)temp_encypted_password, 32);
80002f48:	32 0a       	mov	r10,32
80002f4a:	ee fb ff f8 	ld.w	r11,r7[-8]
80002f4e:	48 cc       	lddpc	r12,80002f7c <save_salt_to_mcu+0x48>
80002f50:	f0 1f 00 0c 	mcall	80002f80 <save_salt_to_mcu+0x4c>
	memcpy((uint8_t *)Stored_values_ram.salt, (const uint8_t *)var_Salt.index, 32);
80002f54:	48 a8       	lddpc	r8,80002f7c <save_salt_to_mcu+0x48>
80002f56:	f0 c8 ff 60 	sub	r8,r8,-160
80002f5a:	32 0a       	mov	r10,32
80002f5c:	48 ab       	lddpc	r11,80002f84 <save_salt_to_mcu+0x50>
80002f5e:	10 9c       	mov	r12,r8
80002f60:	f0 1f 00 08 	mcall	80002f80 <save_salt_to_mcu+0x4c>
	Calculate_block_crc();
80002f64:	f0 1f 00 09 	mcall	80002f88 <save_salt_to_mcu+0x54>
	Update_stored_values();
80002f68:	f0 1f 00 09 	mcall	80002f8c <save_salt_to_mcu+0x58>
	
}
80002f6c:	2f ed       	sub	sp,-8
80002f6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f72:	00 00       	add	r0,r0
80002f74:	00 00       	add	r0,r0
80002f76:	02 68       	and	r8,r1
80002f78:	80 00       	ld.sh	r0,r0[0x0]
80002f7a:	2d 34       	sub	r4,-45
80002f7c:	00 00       	add	r0,r0
80002f7e:	0a 84       	andn	r4,r5
80002f80:	80 00       	ld.sh	r0,r0[0x0]
80002f82:	e8 f6 00 00 	ld.w	r6,r4[0]
80002f86:	0b a8       	ld.ub	r8,r5[0x2]
80002f88:	80 00       	ld.sh	r0,r0[0x0]
80002f8a:	30 1c       	mov	r12,1
80002f8c:	80 00       	ld.sh	r0,r0[0x0]
80002f8e:	2f 90       	sub	r0,-7

80002f90 <Update_stored_values>:
	Calculate_block_crc();
	Update_stored_values();
}

void Update_stored_values(void)
{
80002f90:	eb cd 40 80 	pushm	r7,lr
80002f94:	1a 97       	mov	r7,sp
	flashc_memcpy((void *)&Stored_values_flash, (void *)&Stored_values_ram, sizeof(Stored_values_ram), true);
80002f96:	30 19       	mov	r9,1
80002f98:	e0 6a 00 c4 	mov	r10,196
80002f9c:	48 3b       	lddpc	r11,80002fa8 <Update_stored_values+0x18>
80002f9e:	48 4c       	lddpc	r12,80002fac <Update_stored_values+0x1c>
80002fa0:	f0 1f 00 04 	mcall	80002fb0 <Update_stored_values+0x20>
}
80002fa4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fa8:	00 00       	add	r0,r0
80002faa:	0a 84       	andn	r4,r5
80002fac:	80 03       	ld.sh	r3,r0[0x0]
80002fae:	fe 00       	*unknown*
80002fb0:	80 00       	ld.sh	r0,r0[0x0]
80002fb2:	89 34       	st.w	r4[0xc],r4

80002fb4 <Load_stored_values>:

void Load_stored_values(void)
{
80002fb4:	eb cd 40 80 	pushm	r7,lr
80002fb8:	1a 97       	mov	r7,sp
	memcpy_code2ram((void *)&Stored_values_ram, (uint8_t *)&Stored_values_flash, sizeof(Stored_values_ram));
80002fba:	e0 6a 00 c4 	mov	r10,196
80002fbe:	48 4b       	lddpc	r11,80002fcc <Load_stored_values+0x18>
80002fc0:	48 4c       	lddpc	r12,80002fd0 <Load_stored_values+0x1c>
80002fc2:	f0 1f 00 05 	mcall	80002fd4 <Load_stored_values+0x20>
}
80002fc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fca:	00 00       	add	r0,r0
80002fcc:	80 03       	ld.sh	r3,r0[0x0]
80002fce:	fe 00 00 00 	add	r0,pc,r0
80002fd2:	0a 84       	andn	r4,r5
80002fd4:	80 00       	ld.sh	r0,r0[0x0]
80002fd6:	e8 f6 eb cd 	ld.w	r6,r4[-5171]

80002fd8 <Start_W_timer>:

void Start_W_timer(void)
{
80002fd8:	eb cd 40 80 	pushm	r7,lr
80002fdc:	1a 97       	mov	r7,sp
	var_W = random_lcg() % 500 + 50;
80002fde:	f0 1f 00 0d 	mcall	80003010 <Start_W_timer+0x38>
80002fe2:	18 9a       	mov	r10,r12
80002fe4:	e0 68 4d d3 	mov	r8,19923
80002fe8:	ea 18 10 62 	orh	r8,0x1062
80002fec:	f4 08 06 48 	mulu.d	r8,r10,r8
80002ff0:	f2 08 16 05 	lsr	r8,r9,0x5
80002ff4:	e0 69 01 f4 	mov	r9,500
80002ff8:	b3 38       	mul	r8,r9
80002ffa:	f4 08 01 08 	sub	r8,r10,r8
80002ffe:	f0 c9 ff ce 	sub	r9,r8,-50
80003002:	48 58       	lddpc	r8,80003014 <Start_W_timer+0x3c>
80003004:	91 09       	st.w	r8[0x0],r9
	var_W_ticks = 0;	
80003006:	48 58       	lddpc	r8,80003018 <Start_W_timer+0x40>
80003008:	30 09       	mov	r9,0
8000300a:	91 09       	st.w	r8[0x0],r9
}
8000300c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003010:	80 00       	ld.sh	r0,r0[0x0]
80003012:	2d e8       	sub	r8,-34
80003014:	00 00       	add	r0,r0
80003016:	01 28       	ld.uh	r8,r0++
80003018:	00 00       	add	r0,r0
8000301a:	02 90       	mov	r0,r1

8000301c <Calculate_block_crc>:

void Calculate_block_crc(void)
{
8000301c:	eb cd 40 80 	pushm	r7,lr
80003020:	1a 97       	mov	r7,sp
	Stored_values_ram.block_crc = crcFast((const uint8_t *)&Stored_values_ram, sizeof(Stored_values_ram) - 2);
80003022:	48 78       	lddpc	r8,8000303c <Calculate_block_crc+0x20>
80003024:	e0 6b 00 c2 	mov	r11,194
80003028:	10 9c       	mov	r12,r8
8000302a:	f0 1f 00 06 	mcall	80003040 <Calculate_block_crc+0x24>
8000302e:	18 98       	mov	r8,r12
80003030:	5c 88       	casts.h	r8
80003032:	48 39       	lddpc	r9,8000303c <Calculate_block_crc+0x20>
80003034:	f3 58 00 c0 	st.h	r9[192],r8
80003038:	e3 cd 80 80 	ldm	sp++,r7,pc
8000303c:	00 00       	add	r0,r0
8000303e:	0a 84       	andn	r4,r5
80003040:	80 00       	ld.sh	r0,r0[0x0]
80003042:	20 9c       	sub	r12,9

80003044 <calculate_hash>:
unsigned long Rotate_right (unsigned long number, int bits);



 void calculate_hash (uint32_t *input_array, uint8_t length, uint32_t *output_array)
 {
80003044:	eb cd 40 c0 	pushm	r6-r7,lr
80003048:	1a 97       	mov	r7,sp
8000304a:	20 ed       	sub	sp,56
8000304c:	ef 4c ff d0 	st.w	r7[-48],r12
80003050:	16 98       	mov	r8,r11
80003052:	ef 4a ff c8 	st.w	r7[-56],r10
80003056:	ef 68 ff cc 	st.b	r7[-52],r8
	 int i;
	 unsigned long int S0, S1;
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
8000305a:	fe f8 03 8a 	ld.w	r8,pc[906]
8000305e:	ef 48 ff e0 	st.w	r7[-32],r8
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
80003062:	fe f8 03 86 	ld.w	r8,pc[902]
80003066:	ef 48 ff ec 	st.w	r7[-20],r8
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
8000306a:	30 08       	mov	r8,0
8000306c:	ef 48 ff d4 	st.w	r7[-44],r8
80003070:	c1 68       	rjmp	8000309c <calculate_hash+0x58>
	 {
		 Key_ptr[i] = input_array[i];
80003072:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003076:	a3 68       	lsl	r8,0x2
80003078:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000307c:	f2 08 00 08 	add	r8,r9,r8
80003080:	ee f9 ff d4 	ld.w	r9,r7[-44]
80003084:	a3 69       	lsl	r9,0x2
80003086:	ee fa ff d0 	ld.w	r10,r7[-48]
8000308a:	f4 09 00 09 	add	r9,r10,r9
8000308e:	72 09       	ld.w	r9,r9[0x0]
80003090:	91 09       	st.w	r8[0x0],r9
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
80003092:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003096:	2f f8       	sub	r8,-1
80003098:	ef 48 ff d4 	st.w	r7[-44],r8
8000309c:	ef 39 ff cc 	ld.ub	r9,r7[-52]
800030a0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030a4:	10 39       	cp.w	r9,r8
800030a6:	fe 99 ff e6 	brgt	80003072 <calculate_hash+0x2e>
	 {
		 Key_ptr[i] = input_array[i];
	 }
	 
	 PadtheMessage(length << 2);
800030aa:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800030ae:	a3 68       	lsl	r8,0x2
800030b0:	5c 58       	castu.b	r8
800030b2:	10 9c       	mov	r12,r8
800030b4:	f0 1f 00 ce 	mcall	800033ec <calculate_hash+0x3a8>
	 
	 
	 W = Message_Schedule_W;
800030b8:	fe f8 03 38 	ld.w	r8,pc[824]
800030bc:	ef 48 ff e4 	st.w	r7[-28],r8
	 M = (unsigned long int *)Padded_Message;
800030c0:	fe f8 03 24 	ld.w	r8,pc[804]
800030c4:	ef 48 ff e8 	st.w	r7[-24],r8
	 for (i = 0; i < 16; i++)
800030c8:	30 08       	mov	r8,0
800030ca:	ef 48 ff d4 	st.w	r7[-44],r8
800030ce:	c1 68       	rjmp	800030fa <calculate_hash+0xb6>
	 {
		W[i] = M[i];
800030d0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030d4:	a3 68       	lsl	r8,0x2
800030d6:	ee f9 ff e4 	ld.w	r9,r7[-28]
800030da:	f2 08 00 08 	add	r8,r9,r8
800030de:	ee f9 ff d4 	ld.w	r9,r7[-44]
800030e2:	a3 69       	lsl	r9,0x2
800030e4:	ee fa ff e8 	ld.w	r10,r7[-24]
800030e8:	f4 09 00 09 	add	r9,r10,r9
800030ec:	72 09       	ld.w	r9,r9[0x0]
800030ee:	91 09       	st.w	r8[0x0],r9
	 PadtheMessage(length << 2);
	 
	 
	 W = Message_Schedule_W;
	 M = (unsigned long int *)Padded_Message;
	 for (i = 0; i < 16; i++)
800030f0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030f4:	2f f8       	sub	r8,-1
800030f6:	ef 48 ff d4 	st.w	r7[-44],r8
800030fa:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030fe:	58 f8       	cp.w	r8,15
80003100:	fe 9a ff e8 	brle	800030d0 <calculate_hash+0x8c>
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
80003104:	31 08       	mov	r8,16
80003106:	ef 48 ff d4 	st.w	r7[-44],r8
8000310a:	c7 58       	rjmp	800031f4 <calculate_hash+0x1b0>
	 {
		 S0 = Rotate_right(Message_Schedule_W[i - 15], 7) XOR Rotate_right(Message_Schedule_W[i - 15], 18) XOR (Message_Schedule_W[i - 15] >> 3);
8000310c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003110:	f0 c9 00 0f 	sub	r9,r8,15
80003114:	fe f8 02 dc 	ld.w	r8,pc[732]
80003118:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000311c:	30 7b       	mov	r11,7
8000311e:	10 9c       	mov	r12,r8
80003120:	f0 1f 00 b5 	mcall	800033f4 <calculate_hash+0x3b0>
80003124:	18 96       	mov	r6,r12
80003126:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000312a:	f0 c9 00 0f 	sub	r9,r8,15
8000312e:	fe f8 02 c2 	ld.w	r8,pc[706]
80003132:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003136:	31 2b       	mov	r11,18
80003138:	10 9c       	mov	r12,r8
8000313a:	f0 1f 00 af 	mcall	800033f4 <calculate_hash+0x3b0>
8000313e:	18 98       	mov	r8,r12
80003140:	ed e8 20 09 	eor	r9,r6,r8
80003144:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003148:	f0 ca 00 0f 	sub	r10,r8,15
8000314c:	fe f8 02 a4 	ld.w	r8,pc[676]
80003150:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003154:	a3 98       	lsr	r8,0x3
80003156:	f3 e8 20 08 	eor	r8,r9,r8
8000315a:	ef 48 ff d8 	st.w	r7[-40],r8
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
8000315e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003162:	f0 c9 00 02 	sub	r9,r8,2
80003166:	fe f8 02 8a 	ld.w	r8,pc[650]
8000316a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000316e:	31 1b       	mov	r11,17
80003170:	10 9c       	mov	r12,r8
80003172:	f0 1f 00 a1 	mcall	800033f4 <calculate_hash+0x3b0>
80003176:	18 96       	mov	r6,r12
80003178:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000317c:	f0 c9 00 02 	sub	r9,r8,2
80003180:	fe f8 02 70 	ld.w	r8,pc[624]
80003184:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003188:	31 3b       	mov	r11,19
8000318a:	10 9c       	mov	r12,r8
8000318c:	f0 1f 00 9a 	mcall	800033f4 <calculate_hash+0x3b0>
80003190:	18 98       	mov	r8,r12
80003192:	ed e8 20 09 	eor	r9,r6,r8
80003196:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000319a:	f0 ca 00 02 	sub	r10,r8,2
8000319e:	fe f8 02 52 	ld.w	r8,pc[594]
800031a2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800031a6:	ab 88       	lsr	r8,0xa
800031a8:	f3 e8 20 08 	eor	r8,r9,r8
800031ac:	ef 48 ff dc 	st.w	r7[-36],r8
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
800031b0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800031b4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031b8:	f0 ca 00 10 	sub	r10,r8,16
800031bc:	fe f8 02 34 	ld.w	r8,pc[564]
800031c0:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800031c4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800031c8:	10 0a       	add	r10,r8
800031ca:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031ce:	f0 cb 00 07 	sub	r11,r8,7
800031d2:	fe f8 02 1e 	ld.w	r8,pc[542]
800031d6:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
800031da:	10 0a       	add	r10,r8
800031dc:	ee f8 ff dc 	ld.w	r8,r7[-36]
800031e0:	10 0a       	add	r10,r8
800031e2:	fe f8 02 0e 	ld.w	r8,pc[526]
800031e6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
800031ea:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031ee:	2f f8       	sub	r8,-1
800031f0:	ef 48 ff d4 	st.w	r7[-44],r8
800031f4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031f8:	e0 48 00 3f 	cp.w	r8,63
800031fc:	fe 9a ff 88 	brle	8000310c <calculate_hash+0xc8>
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
80003200:	30 08       	mov	r8,0
80003202:	ef 48 ff d4 	st.w	r7[-44],r8
80003206:	c1 38       	rjmp	8000322c <calculate_hash+0x1e8>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
80003208:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000320c:	a3 68       	lsl	r8,0x2
8000320e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003212:	f2 08 00 08 	add	r8,r9,r8
80003216:	ee fa ff d4 	ld.w	r10,r7[-44]
8000321a:	4f 89       	lddpc	r9,800033f8 <calculate_hash+0x3b4>
8000321c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80003220:	91 09       	st.w	r8[0x0],r9
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
80003222:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003226:	2f f8       	sub	r8,-1
80003228:	ef 48 ff d4 	st.w	r7[-44],r8
8000322c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003230:	58 78       	cp.w	r8,7
80003232:	fe 9a ff eb 	brle	80003208 <calculate_hash+0x1c4>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
80003236:	30 08       	mov	r8,0
80003238:	ef 48 ff d4 	st.w	r7[-44],r8
8000323c:	ca 68       	rjmp	80003388 <calculate_hash+0x344>
	 {
		 unsigned long int maj, t2, ch, t1;
		 S0 = Rotate_right(chunk.a, 2) XOR Rotate_right(chunk.a, 13) XOR Rotate_right(chunk.a, 22);
8000323e:	4e b8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003240:	70 08       	ld.w	r8,r8[0x0]
80003242:	30 2b       	mov	r11,2
80003244:	10 9c       	mov	r12,r8
80003246:	f0 1f 00 6c 	mcall	800033f4 <calculate_hash+0x3b0>
8000324a:	18 96       	mov	r6,r12
8000324c:	4e 78       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
8000324e:	70 08       	ld.w	r8,r8[0x0]
80003250:	30 db       	mov	r11,13
80003252:	10 9c       	mov	r12,r8
80003254:	f0 1f 00 68 	mcall	800033f4 <calculate_hash+0x3b0>
80003258:	18 98       	mov	r8,r12
8000325a:	10 56       	eor	r6,r8
8000325c:	4e 38       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
8000325e:	70 08       	ld.w	r8,r8[0x0]
80003260:	31 6b       	mov	r11,22
80003262:	10 9c       	mov	r12,r8
80003264:	f0 1f 00 64 	mcall	800033f4 <calculate_hash+0x3b0>
80003268:	18 98       	mov	r8,r12
8000326a:	ed e8 20 08 	eor	r8,r6,r8
8000326e:	ef 48 ff d8 	st.w	r7[-40],r8
		 maj = (chunk.a & chunk.b) XOR (chunk.a & chunk.c) XOR (chunk.b & chunk.c);
80003272:	4d e8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003274:	70 09       	ld.w	r9,r8[0x0]
80003276:	4d d8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003278:	70 18       	ld.w	r8,r8[0x4]
8000327a:	10 69       	and	r9,r8
8000327c:	4d b8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
8000327e:	70 0a       	ld.w	r10,r8[0x0]
80003280:	4d a8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003282:	70 28       	ld.w	r8,r8[0x8]
80003284:	f5 e8 00 08 	and	r8,r10,r8
80003288:	10 59       	eor	r9,r8
8000328a:	4d 88       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
8000328c:	70 1a       	ld.w	r10,r8[0x4]
8000328e:	4d 78       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003290:	70 28       	ld.w	r8,r8[0x8]
80003292:	f5 e8 00 08 	and	r8,r10,r8
80003296:	f3 e8 20 08 	eor	r8,r9,r8
8000329a:	ef 48 ff f0 	st.w	r7[-16],r8
		 t2 = S0 + maj;
8000329e:	ee f9 ff d8 	ld.w	r9,r7[-40]
800032a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800032a6:	f2 08 00 08 	add	r8,r9,r8
800032aa:	ef 48 ff f4 	st.w	r7[-12],r8
		 S1 = Rotate_right(chunk.e, 6) XOR Rotate_right(chunk.e, 11) XOR Rotate_right(chunk.e, 25);
800032ae:	4c f8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
800032b0:	70 48       	ld.w	r8,r8[0x10]
800032b2:	30 6b       	mov	r11,6
800032b4:	10 9c       	mov	r12,r8
800032b6:	f0 1f 00 50 	mcall	800033f4 <calculate_hash+0x3b0>
800032ba:	18 96       	mov	r6,r12
800032bc:	4c b8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
800032be:	70 48       	ld.w	r8,r8[0x10]
800032c0:	30 bb       	mov	r11,11
800032c2:	10 9c       	mov	r12,r8
800032c4:	f0 1f 00 4c 	mcall	800033f4 <calculate_hash+0x3b0>
800032c8:	18 98       	mov	r8,r12
800032ca:	10 56       	eor	r6,r8
800032cc:	4c 78       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
800032ce:	70 48       	ld.w	r8,r8[0x10]
800032d0:	31 9b       	mov	r11,25
800032d2:	10 9c       	mov	r12,r8
800032d4:	f0 1f 00 48 	mcall	800033f4 <calculate_hash+0x3b0>
800032d8:	18 98       	mov	r8,r12
800032da:	ed e8 20 08 	eor	r8,r6,r8
800032de:	ef 48 ff dc 	st.w	r7[-36],r8
		 ch = (chunk.e & chunk.f) XOR ((~chunk.e) & chunk.g);
800032e2:	4c 28       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
800032e4:	70 49       	ld.w	r9,r8[0x10]
800032e6:	4c 18       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
800032e8:	70 58       	ld.w	r8,r8[0x14]
800032ea:	10 69       	and	r9,r8
800032ec:	4b f8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
800032ee:	70 48       	ld.w	r8,r8[0x10]
800032f0:	f0 0a 11 ff 	rsub	r10,r8,-1
800032f4:	4b d8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
800032f6:	70 68       	ld.w	r8,r8[0x18]
800032f8:	f5 e8 00 08 	and	r8,r10,r8
800032fc:	f3 e8 20 08 	eor	r8,r9,r8
80003300:	ef 48 ff f8 	st.w	r7[-8],r8
		 t1 = chunk.h + S1 + ch + Hash_Constant[i] + Message_Schedule_W[i];
80003304:	4b 98       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003306:	70 79       	ld.w	r9,r8[0x1c]
80003308:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000330c:	10 09       	add	r9,r8
8000330e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003312:	10 09       	add	r9,r8
80003314:	ee fa ff d4 	ld.w	r10,r7[-44]
80003318:	4b 98       	lddpc	r8,800033fc <calculate_hash+0x3b8>
8000331a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000331e:	10 09       	add	r9,r8
80003320:	ee fa ff d4 	ld.w	r10,r7[-44]
80003324:	4b 38       	lddpc	r8,800033f0 <calculate_hash+0x3ac>
80003326:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000332a:	f2 08 00 08 	add	r8,r9,r8
8000332e:	ef 48 ff fc 	st.w	r7[-4],r8
		 
		 chunk.h = chunk.g;
80003332:	4a e8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003334:	70 69       	ld.w	r9,r8[0x18]
80003336:	4a d8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003338:	91 79       	st.w	r8[0x1c],r9
		 chunk.g = chunk.f;
8000333a:	4a c8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
8000333c:	70 59       	ld.w	r9,r8[0x14]
8000333e:	4a b8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003340:	91 69       	st.w	r8[0x18],r9
		 chunk.f = chunk.e;
80003342:	4a a8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003344:	70 49       	ld.w	r9,r8[0x10]
80003346:	4a 98       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003348:	91 59       	st.w	r8[0x14],r9
		 chunk.e = chunk.d + t1;
8000334a:	4a 88       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
8000334c:	70 39       	ld.w	r9,r8[0xc]
8000334e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003352:	10 09       	add	r9,r8
80003354:	4a 58       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003356:	91 49       	st.w	r8[0x10],r9
		 chunk.d = chunk.c;
80003358:	4a 48       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
8000335a:	70 29       	ld.w	r9,r8[0x8]
8000335c:	4a 38       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
8000335e:	91 39       	st.w	r8[0xc],r9
		 chunk.c = chunk.b;
80003360:	4a 28       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003362:	70 19       	ld.w	r9,r8[0x4]
80003364:	4a 18       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
80003366:	91 29       	st.w	r8[0x8],r9
		 chunk.b = chunk.a;
80003368:	4a 08       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
8000336a:	70 09       	ld.w	r9,r8[0x0]
8000336c:	49 f8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
8000336e:	91 19       	st.w	r8[0x4],r9
		 chunk.a = t1 + t2;
80003370:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003374:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003378:	10 09       	add	r9,r8
8000337a:	49 c8       	lddpc	r8,800033e8 <calculate_hash+0x3a4>
8000337c:	91 09       	st.w	r8[0x0],r9
	 for (i = 0; i < 8; i++)
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
8000337e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003382:	2f f8       	sub	r8,-1
80003384:	ef 48 ff d4 	st.w	r7[-44],r8
80003388:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000338c:	e0 48 00 3f 	cp.w	r8,63
80003390:	fe 9a ff 57 	brle	8000323e <calculate_hash+0x1fa>
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
80003394:	30 08       	mov	r8,0
80003396:	ef 48 ff d4 	st.w	r7[-44],r8
8000339a:	c1 d8       	rjmp	800033d4 <calculate_hash+0x390>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
8000339c:	ee f8 ff d4 	ld.w	r8,r7[-44]
800033a0:	a3 68       	lsl	r8,0x2
800033a2:	ee f9 ff c8 	ld.w	r9,r7[-56]
800033a6:	f2 08 00 08 	add	r8,r9,r8
800033aa:	ee fa ff d4 	ld.w	r10,r7[-44]
800033ae:	49 39       	lddpc	r9,800033f8 <calculate_hash+0x3b4>
800033b0:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
800033b4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800033b8:	a3 69       	lsl	r9,0x2
800033ba:	ee fb ff ec 	ld.w	r11,r7[-20]
800033be:	f6 09 00 09 	add	r9,r11,r9
800033c2:	72 09       	ld.w	r9,r9[0x0]
800033c4:	f4 09 00 09 	add	r9,r10,r9
800033c8:	91 09       	st.w	r8[0x0],r9
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
800033ca:	ee f8 ff d4 	ld.w	r8,r7[-44]
800033ce:	2f f8       	sub	r8,-1
800033d0:	ef 48 ff d4 	st.w	r7[-44],r8
800033d4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800033d8:	58 78       	cp.w	r8,7
800033da:	fe 9a ff e1 	brle	8000339c <calculate_hash+0x358>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
	 }
 }
800033de:	2f 2d       	sub	sp,-56
800033e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800033e4:	00 00       	add	r0,r0
800033e6:	02 94       	mov	r4,r1
800033e8:	00 00       	add	r0,r0
800033ea:	0b cc       	ld.ub	r12,r5[0x4]
800033ec:	80 00       	ld.sh	r0,r0[0x0]
800033ee:	34 00       	mov	r0,64
800033f0:	00 00       	add	r0,r0
800033f2:	02 d4       	st.w	--r1,r4
800033f4:	80 00       	ld.sh	r0,r0[0x0]
800033f6:	34 78       	mov	r8,71
800033f8:	80 00       	ld.sh	r0,r0[0x0]
800033fa:	ee 20 80 00 	sub	r0,950272
800033fe:	ee 40 eb cd 	cp.w	r0,977869

80003400 <PadtheMessage>:


 void PadtheMessage(uint8_t message_length)
 {
80003400:	eb cd 40 80 	pushm	r7,lr
80003404:	1a 97       	mov	r7,sp
80003406:	20 3d       	sub	sp,12
80003408:	18 98       	mov	r8,r12
8000340a:	ef 68 ff f4 	st.b	r7[-12],r8
	 unsigned char i;
	 unsigned short int message_length_bits;
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];
8000340e:	49 a8       	lddpc	r8,80003474 <PadtheMessage+0x74>
80003410:	ef 48 ff fc 	st.w	r7[-4],r8

	 message_length_bits = message_length << 3;
80003414:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003418:	a3 78       	lsl	r8,0x3
8000341a:	ef 58 ff fa 	st.h	r7[-6],r8
	 Padded_Message[message_length++] = 0x80;
8000341e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003422:	49 5a       	lddpc	r10,80003474 <PadtheMessage+0x74>
80003424:	38 08       	mov	r8,-128
80003426:	f4 09 0b 08 	st.b	r10[r9],r8
8000342a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000342e:	2f f8       	sub	r8,-1
80003430:	ef 68 ff f4 	st.b	r7[-12],r8

	 for (i = message_length; i < 64; i++)
80003434:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003438:	ef 68 ff f9 	st.b	r7[-7],r8
8000343c:	c0 c8       	rjmp	80003454 <PadtheMessage+0x54>
	 {
		Padded_Message[i] = 0x00;
8000343e:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80003442:	48 da       	lddpc	r10,80003474 <PadtheMessage+0x74>
80003444:	30 08       	mov	r8,0
80003446:	f4 09 0b 08 	st.b	r10[r9],r8
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];

	 message_length_bits = message_length << 3;
	 Padded_Message[message_length++] = 0x80;

	 for (i = message_length; i < 64; i++)
8000344a:	ef 38 ff f9 	ld.ub	r8,r7[-7]
8000344e:	2f f8       	sub	r8,-1
80003450:	ef 68 ff f9 	st.b	r7[-7],r8
80003454:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80003458:	33 f8       	mov	r8,63
8000345a:	f0 09 18 00 	cp.b	r9,r8
8000345e:	fe 98 ff f0 	brls	8000343e <PadtheMessage+0x3e>
	 {
		Padded_Message[i] = 0x00;
	 }

	 //ptrPadded_Message = (unsigned long int *)&Padded_Message[60];
	 ptrPadded_Message[15] = (unsigned long int)message_length_bits;
80003462:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003466:	2c 48       	sub	r8,-60
80003468:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8000346c:	91 09       	st.w	r8[0x0],r9
	 //Padded_Message[62] = *((unsigned char *)&message_length_bits);
	 //Padded_Message[63] = *((unsigned char *)&message_length_bits + 1);
 }
8000346e:	2f dd       	sub	sp,-12
80003470:	e3 cd 80 80 	ldm	sp++,r7,pc
80003474:	00 00       	add	r0,r0
80003476:	02 94       	mov	r4,r1

80003478 <Rotate_right>:

 unsigned long int Rotate_right (unsigned long int number, int bits)
 {
80003478:	eb cd 40 80 	pushm	r7,lr
8000347c:	1a 97       	mov	r7,sp
8000347e:	20 3d       	sub	sp,12
80003480:	ef 4c ff f8 	st.w	r7[-8],r12
80003484:	ef 4b ff f4 	st.w	r7[-12],r11
	 unsigned long int bit_mask = ((unsigned long int)2 << bits) - 1;
80003488:	30 29       	mov	r9,2
8000348a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000348e:	f2 08 09 48 	lsl	r8,r9,r8
80003492:	20 18       	sub	r8,1
80003494:	ef 48 ff fc 	st.w	r7[-4],r8
	 return ((number >> bits) | ((number & bit_mask) << (32 - bits)));
80003498:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000349c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034a0:	f2 08 0a 49 	lsr	r9,r9,r8
800034a4:	ee fa ff f8 	ld.w	r10,r7[-8]
800034a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034ac:	10 6a       	and	r10,r8
800034ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034b2:	f0 08 11 20 	rsub	r8,r8,32
800034b6:	f4 08 09 48 	lsl	r8,r10,r8
800034ba:	f3 e8 10 08 	or	r8,r9,r8
 }
800034be:	10 9c       	mov	r12,r8
800034c0:	2f dd       	sub	sp,-12
800034c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800034c6:	d7 03       	nop

800034c8 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
800034c8:	eb cd 40 80 	pushm	r7,lr
800034cc:	1a 97       	mov	r7,sp
800034ce:	20 1d       	sub	sp,4
800034d0:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
800034d4:	ee fb ff fc 	ld.w	r11,r7[-4]
800034d8:	30 1c       	mov	r12,1
800034da:	f0 1f 00 03 	mcall	800034e4 <sysclk_enable_hsb_module+0x1c>
}
800034de:	2f fd       	sub	sp,-4
800034e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800034e4:	80 00       	ld.sh	r0,r0[0x0]
800034e6:	c0 3c       	rcall	800034ec <sysclk_enable_pba_module+0x4>

800034e8 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
800034e8:	eb cd 40 80 	pushm	r7,lr
800034ec:	1a 97       	mov	r7,sp
800034ee:	20 1d       	sub	sp,4
800034f0:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800034f4:	ee fb ff fc 	ld.w	r11,r7[-4]
800034f8:	30 2c       	mov	r12,2
800034fa:	f0 1f 00 03 	mcall	80003504 <sysclk_enable_pba_module+0x1c>
}
800034fe:	2f fd       	sub	sp,-4
80003500:	e3 cd 80 80 	ldm	sp++,r7,pc
80003504:	80 00       	ld.sh	r0,r0[0x0]
80003506:	c0 3c       	rcall	8000350c <sysclk_enable_peripheral_clock+0x4>

80003508 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
80003508:	eb cd 40 80 	pushm	r7,lr
8000350c:	1a 97       	mov	r7,sp
8000350e:	20 1d       	sub	sp,4
80003510:	ef 4c ff fc 	st.w	r7[-4],r12
	switch ((uintptr_t)module) {
80003514:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003518:	fe 58 14 00 	cp.w	r8,-60416
8000351c:	e0 80 00 a5 	breq	80003666 <sysclk_enable_peripheral_clock+0x15e>
80003520:	e0 8b 00 40 	brhi	800035a0 <sysclk_enable_peripheral_clock+0x98>
80003524:	fe 48 24 00 	cp.w	r8,-121856
80003528:	e0 80 00 d9 	breq	800036da <sysclk_enable_peripheral_clock+0x1d2>
8000352c:	e0 8b 00 1e 	brhi	80003568 <sysclk_enable_peripheral_clock+0x60>
80003530:	fe 48 10 00 	cp.w	r8,-126976
80003534:	e0 80 00 b9 	breq	800036a6 <sysclk_enable_peripheral_clock+0x19e>
80003538:	e0 8b 00 0b 	brhi	8000354e <sysclk_enable_peripheral_clock+0x46>
8000353c:	fc 58 00 00 	cp.w	r8,-196608
80003540:	e0 80 00 e0 	breq	80003700 <sysclk_enable_peripheral_clock+0x1f8>
80003544:	fe 48 00 00 	cp.w	r8,-131072
80003548:	e0 80 00 b3 	breq	800036ae <sysclk_enable_peripheral_clock+0x1a6>
		break;
#endif

	default:
		Assert(false);
		return;
8000354c:	cd e8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000354e:	fe 48 1c 00 	cp.w	r8,-123904
80003552:	e0 80 00 bc 	breq	800036ca <sysclk_enable_peripheral_clock+0x1c2>
80003556:	fe 48 20 00 	cp.w	r8,-122880
8000355a:	e0 80 00 bc 	breq	800036d2 <sysclk_enable_peripheral_clock+0x1ca>
8000355e:	fe 48 14 00 	cp.w	r8,-125952
80003562:	e0 80 00 ad 	breq	800036bc <sysclk_enable_peripheral_clock+0x1b4>
		break;
#endif

	default:
		Assert(false);
		return;
80003566:	cd 18       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003568:	fe 58 00 00 	cp.w	r8,-65536
8000356c:	c5 60       	breq	80003618 <sysclk_enable_peripheral_clock+0x110>
8000356e:	e0 8b 00 0f 	brhi	8000358c <sysclk_enable_peripheral_clock+0x84>
80003572:	fe 48 40 00 	cp.w	r8,-114688
80003576:	e0 80 00 b6 	breq	800036e2 <sysclk_enable_peripheral_clock+0x1da>
8000357a:	fe 48 80 00 	cp.w	r8,-98304
8000357e:	e0 80 00 bd 	breq	800036f8 <sysclk_enable_peripheral_clock+0x1f0>
80003582:	fe 48 28 00 	cp.w	r8,-120832
80003586:	e0 80 00 b2 	breq	800036ea <sysclk_enable_peripheral_clock+0x1e2>
		break;
#endif

	default:
		Assert(false);
		return;
8000358a:	cb f8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000358c:	fe 58 0c 00 	cp.w	r8,-62464
80003590:	c4 b0       	breq	80003626 <sysclk_enable_peripheral_clock+0x11e>
80003592:	fe 58 10 00 	cp.w	r8,-61440
80003596:	c3 d0       	breq	80003610 <sysclk_enable_peripheral_clock+0x108>
80003598:	fe 58 08 00 	cp.w	r8,-63488
8000359c:	c3 60       	breq	80003608 <sysclk_enable_peripheral_clock+0x100>
		break;
#endif

	default:
		Assert(false);
		return;
8000359e:	cb 58       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800035a0:	fe 58 30 00 	cp.w	r8,-53248
800035a4:	c5 50       	breq	8000364e <sysclk_enable_peripheral_clock+0x146>
800035a6:	e0 8b 00 18 	brhi	800035d6 <sysclk_enable_peripheral_clock+0xce>
800035aa:	fe 58 20 00 	cp.w	r8,-57344
800035ae:	c6 80       	breq	8000367e <sysclk_enable_peripheral_clock+0x176>
800035b0:	e0 8b 00 09 	brhi	800035c2 <sysclk_enable_peripheral_clock+0xba>
800035b4:	fe 58 18 00 	cp.w	r8,-59392
800035b8:	c5 b0       	breq	8000366e <sysclk_enable_peripheral_clock+0x166>
800035ba:	fe 58 1c 00 	cp.w	r8,-58368
800035be:	c5 c0       	breq	80003676 <sysclk_enable_peripheral_clock+0x16e>
		break;
#endif

	default:
		Assert(false);
		return;
800035c0:	ca 48       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800035c2:	fe 58 28 00 	cp.w	r8,-55296
800035c6:	c3 c0       	breq	8000363e <sysclk_enable_peripheral_clock+0x136>
800035c8:	fe 58 2c 00 	cp.w	r8,-54272
800035cc:	c3 d0       	breq	80003646 <sysclk_enable_peripheral_clock+0x13e>
800035ce:	fe 58 24 00 	cp.w	r8,-56320
800035d2:	c3 20       	breq	80003636 <sysclk_enable_peripheral_clock+0x12e>
		break;
#endif

	default:
		Assert(false);
		return;
800035d4:	c9 a8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800035d6:	fe 58 40 00 	cp.w	r8,-49152
800035da:	c6 20       	breq	8000369e <sysclk_enable_peripheral_clock+0x196>
800035dc:	e0 8b 00 0c 	brhi	800035f4 <sysclk_enable_peripheral_clock+0xec>
800035e0:	fe 58 38 00 	cp.w	r8,-51200
800035e4:	c5 50       	breq	8000368e <sysclk_enable_peripheral_clock+0x186>
800035e6:	fe 58 3c 00 	cp.w	r8,-50176
800035ea:	c2 20       	breq	8000362e <sysclk_enable_peripheral_clock+0x126>
800035ec:	fe 58 34 00 	cp.w	r8,-52224
800035f0:	c4 b0       	breq	80003686 <sysclk_enable_peripheral_clock+0x17e>
		break;
#endif

	default:
		Assert(false);
		return;
800035f2:	c8 b8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800035f4:	fe 58 50 00 	cp.w	r8,-45056
800035f8:	c2 f0       	breq	80003656 <sysclk_enable_peripheral_clock+0x14e>
800035fa:	fe 58 54 00 	cp.w	r8,-44032
800035fe:	c3 00       	breq	8000365e <sysclk_enable_peripheral_clock+0x156>
80003600:	fe 58 44 00 	cp.w	r8,-48128
80003604:	c4 90       	breq	80003696 <sysclk_enable_peripheral_clock+0x18e>
		break;
#endif

	default:
		Assert(false);
		return;
80003606:	c8 18       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
	case AVR32_INTC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_INTC);
80003608:	30 0c       	mov	r12,0
8000360a:	f0 1f 00 42 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
8000360e:	c7 d8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_GPIO_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_GPIO);
80003610:	30 1c       	mov	r12,1
80003612:	f0 1f 00 40 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
80003616:	c7 98       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PDCA_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
80003618:	30 4c       	mov	r12,4
8000361a:	f0 1f 00 3f 	mcall	80003714 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pba_module(SYSCLK_PDCA_PB);
8000361e:	30 2c       	mov	r12,2
80003620:	f0 1f 00 3c 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
80003624:	c7 28       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PM);
80003626:	30 3c       	mov	r12,3
80003628:	f0 1f 00 3a 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
8000362c:	c6 e8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ADC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ADC);
8000362e:	30 4c       	mov	r12,4
80003630:	f0 1f 00 38 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
80003634:	c6 a8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI0);
80003636:	30 5c       	mov	r12,5
80003638:	f0 1f 00 36 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
8000363c:	c6 68       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
8000363e:	30 6c       	mov	r12,6
80003640:	f0 1f 00 34 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
80003644:	c6 28       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
80003646:	30 7c       	mov	r12,7
80003648:	f0 1f 00 32 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
8000364c:	c5 e8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
8000364e:	30 8c       	mov	r12,8
80003650:	f0 1f 00 30 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
80003654:	c5 a8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
80003656:	30 9c       	mov	r12,9
80003658:	f0 1f 00 2e 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
8000365c:	c5 68       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
8000365e:	30 ac       	mov	r12,10
80003660:	f0 1f 00 2c 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
80003664:	c5 28       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART0);
80003666:	30 bc       	mov	r12,11
80003668:	f0 1f 00 2a 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
8000366c:	c4 e8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART1);
8000366e:	30 cc       	mov	r12,12
80003670:	f0 1f 00 28 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
80003674:	c4 a8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART2_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
80003676:	30 dc       	mov	r12,13
80003678:	f0 1f 00 26 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
8000367c:	c4 68       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART3_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART3);
8000367e:	30 ec       	mov	r12,14
80003680:	f0 1f 00 24 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
80003684:	c4 28       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SSC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SSC);
80003686:	30 fc       	mov	r12,15
80003688:	f0 1f 00 22 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
8000368c:	c3 e8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC0);
8000368e:	31 0c       	mov	r12,16
80003690:	f0 1f 00 20 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
80003694:	c3 a8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC1);
80003696:	31 1c       	mov	r12,17
80003698:	f0 1f 00 1e 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
8000369c:	c3 68       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ABDAC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DAC);
8000369e:	31 2c       	mov	r12,18
800036a0:	f0 1f 00 1c 	mcall	80003710 <sysclk_enable_peripheral_clock+0x208>
		break;
800036a4:	c3 28       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_HMATRIX_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
800036a6:	30 0c       	mov	r12,0
800036a8:	f0 1f 00 1c 	mcall	80003718 <sysclk_enable_peripheral_clock+0x210>
		break;
800036ac:	c2 e8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USBB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
800036ae:	30 3c       	mov	r12,3
800036b0:	f0 1f 00 19 	mcall	80003714 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
800036b4:	30 1c       	mov	r12,1
800036b6:	f0 1f 00 19 	mcall	80003718 <sysclk_enable_peripheral_clock+0x210>
		break;
800036ba:	c2 78       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_FLASHC_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_FLASHC_DATA);
800036bc:	30 0c       	mov	r12,0
800036be:	f0 1f 00 16 	mcall	80003714 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_FLASHC_REGS);
800036c2:	30 2c       	mov	r12,2
800036c4:	f0 1f 00 15 	mcall	80003718 <sysclk_enable_peripheral_clock+0x210>
		break;
800036c8:	c2 08       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SMC_REGS);
800036ca:	30 3c       	mov	r12,3
800036cc:	f0 1f 00 13 	mcall	80003718 <sysclk_enable_peripheral_clock+0x210>
		break;
800036d0:	c1 c8       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SDRAMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SDRAMC_REGS);
800036d2:	30 4c       	mov	r12,4
800036d4:	f0 1f 00 11 	mcall	80003718 <sysclk_enable_peripheral_clock+0x210>
		break;
800036d8:	c1 88       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ECCHRS_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_ECC);
800036da:	30 5c       	mov	r12,5
800036dc:	f0 1f 00 0f 	mcall	80003718 <sysclk_enable_peripheral_clock+0x210>
		break;
800036e0:	c1 48       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MCI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MCI);
800036e2:	30 6c       	mov	r12,6
800036e4:	f0 1f 00 0d 	mcall	80003718 <sysclk_enable_peripheral_clock+0x210>
		break;
800036e8:	c1 08       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_BUSMON_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_BUSMON_HSB);
800036ea:	30 8c       	mov	r12,8
800036ec:	f0 1f 00 0a 	mcall	80003714 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_BUSMON);
800036f0:	30 7c       	mov	r12,7
800036f2:	f0 1f 00 0a 	mcall	80003718 <sysclk_enable_peripheral_clock+0x210>
		break;
800036f6:	c0 98       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MSI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MSI);
800036f8:	30 8c       	mov	r12,8
800036fa:	f0 1f 00 08 	mcall	80003718 <sysclk_enable_peripheral_clock+0x210>
		break;
800036fe:	c0 58       	rjmp	80003708 <sysclk_enable_peripheral_clock+0x200>

#if defined(AVR32_AES_ADDRESS)
	case AVR32_AES_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_AES);
80003700:	30 9c       	mov	r12,9
80003702:	f0 1f 00 06 	mcall	80003718 <sysclk_enable_peripheral_clock+0x210>
		break;
80003706:	d7 03       	nop

	default:
		Assert(false);
		return;
	}
}
80003708:	2f fd       	sub	sp,-4
8000370a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000370e:	00 00       	add	r0,r0
80003710:	80 00       	ld.sh	r0,r0[0x0]
80003712:	34 e8       	mov	r8,78
80003714:	80 00       	ld.sh	r0,r0[0x0]
80003716:	34 c8       	mov	r8,76
80003718:	80 00       	ld.sh	r0,r0[0x0]
8000371a:	c0 b0       	breq	80003730 <tc_irq+0x14>

8000371c <tc_irq>:
 * The ISR handles RC compare interrupt and sets the update_timer flag to
 * update the timer value.
 */
__attribute__((__interrupt__))
static void tc_irq(void)
{
8000371c:	eb cd 40 80 	pushm	r7,lr
80003720:	1a 97       	mov	r7,sp
	// Increment the ms seconds counter
	tc_tick++;
80003722:	4a c8       	lddpc	r8,800037d0 <tc_irq+0xb4>
80003724:	70 08       	ld.w	r8,r8[0x0]
80003726:	f0 c9 ff ff 	sub	r9,r8,-1
8000372a:	4a a8       	lddpc	r8,800037d0 <tc_irq+0xb4>
8000372c:	91 09       	st.w	r8[0x0],r9
	 * in the Watch Window.
	 */

	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
8000372e:	30 0b       	mov	r11,0
80003730:	fe 7c 38 00 	mov	r12,-51200
80003734:	f0 1f 00 28 	mcall	800037d4 <tc_irq+0xb8>

	if (entry_mode_status == NO_MODE_SELECTED)
80003738:	4a 88       	lddpc	r8,800037d8 <tc_irq+0xbc>
8000373a:	11 88       	ld.ub	r8,r8[0x0]
8000373c:	5c 58       	castu.b	r8
8000373e:	c1 51       	brne	80003768 <tc_irq+0x4c>
	{
		if (check_programming_mode_entry_sequence() == true)
80003740:	f0 1f 00 27 	mcall	800037dc <tc_irq+0xc0>
80003744:	18 98       	mov	r8,r12
80003746:	58 08       	cp.w	r8,0
80003748:	c0 50       	breq	80003752 <tc_irq+0x36>
		{
			entry_mode_status = PROGRAMMING_MODE;
8000374a:	4a 49       	lddpc	r9,800037d8 <tc_irq+0xbc>
8000374c:	30 18       	mov	r8,1
8000374e:	b2 88       	st.b	r9[0x0],r8
80003750:	c0 c8       	rjmp	80003768 <tc_irq+0x4c>
		}
		else if (check_normal_mode_entry_sequence() == true)
80003752:	f0 1f 00 24 	mcall	800037e0 <tc_irq+0xc4>
80003756:	18 98       	mov	r8,r12
80003758:	58 08       	cp.w	r8,0
8000375a:	c0 70       	breq	80003768 <tc_irq+0x4c>
		{
			entry_mode_status = NORMAL_MODE;
8000375c:	49 f9       	lddpc	r9,800037d8 <tc_irq+0xbc>
8000375e:	30 28       	mov	r8,2
80003760:	b2 88       	st.b	r9[0x0],r8
			pass_code = temp_password;
80003762:	4a 18       	lddpc	r8,800037e4 <tc_irq+0xc8>
80003764:	4a 19       	lddpc	r9,800037e8 <tc_irq+0xcc>
80003766:	91 09       	st.w	r8[0x0],r9
		}
	}
	
	if (entry_mode_status == PROGRAMMING_MODE)
80003768:	49 c8       	lddpc	r8,800037d8 <tc_irq+0xbc>
8000376a:	11 88       	ld.ub	r8,r8[0x0]
8000376c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003770:	30 18       	mov	r8,1
80003772:	f0 09 18 00 	cp.b	r9,r8
80003776:	c1 71       	brne	800037a4 <tc_irq+0x88>
	{
		if (!mode_selected)
80003778:	49 d8       	lddpc	r8,800037ec <tc_irq+0xd0>
8000377a:	11 88       	ld.ub	r8,r8[0x0]
8000377c:	5c 58       	castu.b	r8
8000377e:	ec 18 00 01 	eorl	r8,0x1
80003782:	5c 58       	castu.b	r8
80003784:	c0 40       	breq	8000378c <tc_irq+0x70>
		{
			check_for_mode_selected();
80003786:	f0 1f 00 1b 	mcall	800037f0 <tc_irq+0xd4>
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
			{
				entry_mode_status = NO_MODE_SELECTED;
8000378a:	c1 98       	rjmp	800037bc <tc_irq+0xa0>
		{
			check_for_mode_selected();
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
8000378c:	f0 1f 00 1a 	mcall	800037f4 <tc_irq+0xd8>
80003790:	18 98       	mov	r8,r12
80003792:	10 99       	mov	r9,r8
80003794:	30 18       	mov	r8,1
80003796:	f0 09 18 00 	cp.b	r9,r8
8000379a:	c1 01       	brne	800037ba <tc_irq+0x9e>
			{
				entry_mode_status = NO_MODE_SELECTED;
8000379c:	48 f9       	lddpc	r9,800037d8 <tc_irq+0xbc>
8000379e:	30 08       	mov	r8,0
800037a0:	b2 88       	st.b	r9[0x0],r8
800037a2:	c0 d8       	rjmp	800037bc <tc_irq+0xa0>
			}
		}
	}

	else if (entry_mode_status == NORMAL_MODE)
800037a4:	48 d8       	lddpc	r8,800037d8 <tc_irq+0xbc>
800037a6:	11 88       	ld.ub	r8,r8[0x0]
800037a8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800037ac:	30 28       	mov	r8,2
800037ae:	f0 09 18 00 	cp.b	r9,r8
800037b2:	c0 51       	brne	800037bc <tc_irq+0xa0>
	{
		read_password();
800037b4:	f0 1f 00 11 	mcall	800037f8 <tc_irq+0xdc>
800037b8:	c0 28       	rjmp	800037bc <tc_irq+0xa0>
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
			{
				entry_mode_status = NO_MODE_SELECTED;
800037ba:	d7 03       	nop
	



	// specify that an interrupt has been raised
	update_timer = true;
800037bc:	49 09       	lddpc	r9,800037fc <tc_irq+0xe0>
800037be:	30 18       	mov	r8,1
800037c0:	b2 88       	st.b	r9[0x0],r8
	// Toggle the GPIO line
	gpio_tgl_gpio_pin(EXAMPLE_TOGGLE_PIN);
800037c2:	30 3c       	mov	r12,3
800037c4:	f0 1f 00 0f 	mcall	80003800 <tc_irq+0xe4>
}
800037c8:	e3 cd 40 80 	ldm	sp++,r7,lr
800037cc:	d6 03       	rete
800037ce:	00 00       	add	r0,r0
800037d0:	00 00       	add	r0,r0
800037d2:	03 d4       	ld.ub	r4,r1[0x5]
800037d4:	80 00       	ld.sh	r0,r0[0x0]
800037d6:	99 ee       	st.w	r12[0x38],lr
800037d8:	00 00       	add	r0,r0
800037da:	03 dc       	ld.ub	r12,r1[0x5]
800037dc:	80 00       	ld.sh	r0,r0[0x0]
800037de:	3d 34       	mov	r4,-45
800037e0:	80 00       	ld.sh	r0,r0[0x0]
800037e2:	3d c0       	mov	r0,-36
800037e4:	00 00       	add	r0,r0
800037e6:	0b c8       	ld.ub	r8,r5[0x4]
800037e8:	00 00       	add	r0,r0
800037ea:	02 48       	or	r8,r1
800037ec:	00 00       	add	r0,r0
800037ee:	03 d8       	ld.ub	r8,r1[0x5]
800037f0:	80 00       	ld.sh	r0,r0[0x0]
800037f2:	3e dc       	mov	r12,-19
800037f4:	80 00       	ld.sh	r0,r0[0x0]
800037f6:	3e f0       	mov	r0,-17
800037f8:	80 00       	ld.sh	r0,r0[0x0]
800037fa:	40 60       	lddsp	r0,sp[0x18]
800037fc:	00 00       	add	r0,r0
800037fe:	01 2c       	ld.uh	r12,r0++
80003800:	80 00       	ld.sh	r0,r0[0x0]
80003802:	8f aa       	st.w	r7[0x28],r10

80003804 <is_button_released>:

bool is_button_released(void)
{
80003804:	eb cd 40 80 	pushm	r7,lr
80003808:	1a 97       	mov	r7,sp
	if ((check_all_buttons_high() == true) && (button_released == false))
8000380a:	f0 1f 00 0b 	mcall	80003834 <is_button_released+0x30>
8000380e:	18 98       	mov	r8,r12
80003810:	58 08       	cp.w	r8,0
80003812:	c0 b0       	breq	80003828 <is_button_released+0x24>
80003814:	48 98       	lddpc	r8,80003838 <is_button_released+0x34>
80003816:	11 88       	ld.ub	r8,r8[0x0]
80003818:	5c 58       	castu.b	r8
8000381a:	ec 18 00 01 	eorl	r8,0x1
8000381e:	5c 58       	castu.b	r8
80003820:	c0 40       	breq	80003828 <is_button_released+0x24>
	{
		button_released = true;
80003822:	48 69       	lddpc	r9,80003838 <is_button_released+0x34>
80003824:	30 18       	mov	r8,1
80003826:	b2 88       	st.b	r9[0x0],r8
	}
	return button_released;
80003828:	48 48       	lddpc	r8,80003838 <is_button_released+0x34>
8000382a:	11 88       	ld.ub	r8,r8[0x0]
8000382c:	5c 58       	castu.b	r8
}
8000382e:	10 9c       	mov	r12,r8
80003830:	e3 cd 80 80 	ldm	sp++,r7,pc
80003834:	80 00       	ld.sh	r0,r0[0x0]
80003836:	3a 88       	mov	r8,-88
80003838:	00 00       	add	r0,r0
8000383a:	01 2d       	ld.uh	sp,r0++

8000383c <Read_button>:

void Read_button(void)
{
8000383c:	eb cd 40 80 	pushm	r7,lr
80003840:	1a 97       	mov	r7,sp
80003842:	20 1d       	sub	sp,4
	uint8_t button_value = 0;
80003844:	30 08       	mov	r8,0
80003846:	ef 68 ff ff 	st.b	r7[-1],r8
	
	button_value = button_pressed();
8000384a:	f0 1f 00 4f 	mcall	80003984 <Read_button+0x148>
8000384e:	18 98       	mov	r8,r12
80003850:	ef 68 ff ff 	st.b	r7[-1],r8
	switch (button_value)
80003854:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003858:	58 48       	cp.w	r8,4
8000385a:	c0 50       	breq	80003864 <Read_button+0x28>
8000385c:	e0 48 00 ff 	cp.w	r8,255
80003860:	c6 d0       	breq	8000393a <Read_button+0xfe>
80003862:	c2 88       	rjmp	800038b2 <Read_button+0x76>
	{
		case ENTER_BUTTON:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
80003864:	4c 98       	lddpc	r8,80003988 <Read_button+0x14c>
80003866:	11 88       	ld.ub	r8,r8[0x0]
80003868:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000386c:	30 18       	mov	r8,1
8000386e:	f0 09 18 00 	cp.b	r9,r8
80003872:	c0 d1       	brne	8000388c <Read_button+0x50>
			{
				if (mode_selected)
80003874:	4c 68       	lddpc	r8,8000398c <Read_button+0x150>
80003876:	11 88       	ld.ub	r8,r8[0x0]
80003878:	5c 58       	castu.b	r8
8000387a:	c6 20       	breq	8000393e <Read_button+0x102>
				{
					enter_button_status++;
8000387c:	4c 58       	lddpc	r8,80003990 <Read_button+0x154>
8000387e:	11 88       	ld.ub	r8,r8[0x0]
80003880:	5c 58       	castu.b	r8
80003882:	2f f8       	sub	r8,-1
80003884:	5c 58       	castu.b	r8
80003886:	4c 39       	lddpc	r9,80003990 <Read_button+0x154>
80003888:	b2 88       	st.b	r9[0x0],r8
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
			{
				normal_mode_password_entered = true;
			}
			break;
8000388a:	c5 f8       	rjmp	80003948 <Read_button+0x10c>
				if (mode_selected)
				{
					enter_button_status++;
				}
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
8000388c:	4b f8       	lddpc	r8,80003988 <Read_button+0x14c>
8000388e:	11 88       	ld.ub	r8,r8[0x0]
80003890:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003894:	30 28       	mov	r8,2
80003896:	f0 09 18 00 	cp.b	r9,r8
8000389a:	c5 41       	brne	80003942 <Read_button+0x106>
8000389c:	4b e8       	lddpc	r8,80003994 <Read_button+0x158>
8000389e:	11 88       	ld.ub	r8,r8[0x0]
800038a0:	5c 58       	castu.b	r8
800038a2:	ec 18 00 01 	eorl	r8,0x1
800038a6:	5c 58       	castu.b	r8
800038a8:	c4 f0       	breq	80003946 <Read_button+0x10a>
			{
				normal_mode_password_entered = true;
800038aa:	4b b9       	lddpc	r9,80003994 <Read_button+0x158>
800038ac:	30 18       	mov	r8,1
800038ae:	b2 88       	st.b	r9[0x0],r8
			}
			break;
800038b0:	c4 c8       	rjmp	80003948 <Read_button+0x10c>
		case NO_BUTTON:
		break;
		
		default:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
800038b2:	4b 68       	lddpc	r8,80003988 <Read_button+0x14c>
800038b4:	11 88       	ld.ub	r8,r8[0x0]
800038b6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800038ba:	30 18       	mov	r8,1
800038bc:	f0 09 18 00 	cp.b	r9,r8
800038c0:	c2 f1       	brne	8000391e <Read_button+0xe2>
			{
				if (mode_selected)
800038c2:	4b 38       	lddpc	r8,8000398c <Read_button+0x150>
800038c4:	11 88       	ld.ub	r8,r8[0x0]
800038c6:	5c 58       	castu.b	r8
800038c8:	c2 30       	breq	8000390e <Read_button+0xd2>
				{
					switch (mode_chosen)
800038ca:	4b 48       	lddpc	r8,80003998 <Read_button+0x15c>
800038cc:	11 88       	ld.ub	r8,r8[0x0]
800038ce:	5c 58       	castu.b	r8
800038d0:	c0 40       	breq	800038d8 <Read_button+0x9c>
800038d2:	58 38       	cp.w	r8,3
800038d4:	c0 90       	breq	800038e6 <Read_button+0xaa>
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
800038d6:	c3 98       	rjmp	80003948 <Read_button+0x10c>
				if (mode_selected)
				{
					switch (mode_chosen)
					{
					case _UNLOCK_PASSWORD:
						store_passcode((uint32_t)button_value);
800038d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800038dc:	10 9c       	mov	r12,r8
800038de:	f0 1f 00 30 	mcall	8000399c <Read_button+0x160>
						break;
800038e2:	d7 03       	nop
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
800038e4:	c3 28       	rjmp	80003948 <Read_button+0x10c>
					{
					case _UNLOCK_PASSWORD:
						store_passcode((uint32_t)button_value);
						break;
					case _DEVICE_ID_CONFIRM:
						if (enter_button_status == WAITING_FOR_USER_INPUT)
800038e6:	4a b8       	lddpc	r8,80003990 <Read_button+0x154>
800038e8:	11 88       	ld.ub	r8,r8[0x0]
800038ea:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800038ee:	30 58       	mov	r8,5
800038f0:	f0 09 18 00 	cp.b	r9,r8
800038f4:	c0 71       	brne	80003902 <Read_button+0xc6>
						{
							store_sequence(button_value);
800038f6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800038fa:	10 9c       	mov	r12,r8
800038fc:	f0 1f 00 29 	mcall	800039a0 <Read_button+0x164>
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003900:	c2 48       	rjmp	80003948 <Read_button+0x10c>
						{
							store_sequence(button_value);
						}
						else
						{
							store_passcode((uint32_t)button_value);
80003902:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003906:	10 9c       	mov	r12,r8
80003908:	f0 1f 00 25 	mcall	8000399c <Read_button+0x160>
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
8000390c:	c1 e8       	rjmp	80003948 <Read_button+0x10c>
					}
					
				}
				else
				{
					mode_chosen = button_value;
8000390e:	4a 39       	lddpc	r9,80003998 <Read_button+0x15c>
80003910:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003914:	b2 88       	st.b	r9[0x0],r8
					mode_selected = true;
80003916:	49 e9       	lddpc	r9,8000398c <Read_button+0x150>
80003918:	30 18       	mov	r8,1
8000391a:	b2 88       	st.b	r9[0x0],r8
8000391c:	c1 68       	rjmp	80003948 <Read_button+0x10c>
				}
			}
			else if (entry_mode_status == NORMAL_MODE)
8000391e:	49 b8       	lddpc	r8,80003988 <Read_button+0x14c>
80003920:	11 88       	ld.ub	r8,r8[0x0]
80003922:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003926:	30 28       	mov	r8,2
80003928:	f0 09 18 00 	cp.b	r9,r8
8000392c:	c0 e1       	brne	80003948 <Read_button+0x10c>
			{
				store_passcode((uint32_t)button_value);
8000392e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003932:	10 9c       	mov	r12,r8
80003934:	f0 1f 00 1a 	mcall	8000399c <Read_button+0x160>
80003938:	c0 88       	rjmp	80003948 <Read_button+0x10c>
				normal_mode_password_entered = true;
			}
			break;
		}
		case NO_BUTTON:
		break;
8000393a:	d7 03       	nop
8000393c:	c0 68       	rjmp	80003948 <Read_button+0x10c>
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
			{
				normal_mode_password_entered = true;
			}
			break;
8000393e:	d7 03       	nop
80003940:	c0 48       	rjmp	80003948 <Read_button+0x10c>
80003942:	d7 03       	nop
80003944:	c0 28       	rjmp	80003948 <Read_button+0x10c>
80003946:	d7 03       	nop
			}

		}
	}	

	if (mode_chosen == _UNLOCK_PASSWORD && enter_button_status == WAITING_FOR_USER_INPUT)
80003948:	49 48       	lddpc	r8,80003998 <Read_button+0x15c>
8000394a:	11 88       	ld.ub	r8,r8[0x0]
8000394c:	5c 58       	castu.b	r8
8000394e:	c1 81       	brne	8000397e <Read_button+0x142>
80003950:	49 08       	lddpc	r8,80003990 <Read_button+0x154>
80003952:	11 88       	ld.ub	r8,r8[0x0]
80003954:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003958:	30 58       	mov	r8,5
8000395a:	f0 09 18 00 	cp.b	r9,r8
8000395e:	c1 01       	brne	8000397e <Read_button+0x142>
	{
		if (var_W_ticks++ > var_W)
80003960:	49 18       	lddpc	r8,800039a4 <Read_button+0x168>
80003962:	70 08       	ld.w	r8,r8[0x0]
80003964:	49 19       	lddpc	r9,800039a8 <Read_button+0x16c>
80003966:	72 09       	ld.w	r9,r9[0x0]
80003968:	12 38       	cp.w	r8,r9
8000396a:	5f b9       	srhi	r9
8000396c:	5c 59       	castu.b	r9
8000396e:	f0 ca ff ff 	sub	r10,r8,-1
80003972:	48 d8       	lddpc	r8,800039a4 <Read_button+0x168>
80003974:	91 0a       	st.w	r8[0x0],r10
80003976:	58 09       	cp.w	r9,0
80003978:	c0 30       	breq	8000397e <Read_button+0x142>
		{
			calculate_salt();
8000397a:	f0 1f 00 0d 	mcall	800039ac <Read_button+0x170>
		}
	}	
}
8000397e:	2f fd       	sub	sp,-4
80003980:	e3 cd 80 80 	ldm	sp++,r7,pc
80003984:	80 00       	ld.sh	r0,r0[0x0]
80003986:	39 b0       	mov	r0,-101
80003988:	00 00       	add	r0,r0
8000398a:	03 dc       	ld.ub	r12,r1[0x5]
8000398c:	00 00       	add	r0,r0
8000398e:	03 d8       	ld.ub	r8,r1[0x5]
80003990:	00 00       	add	r0,r0
80003992:	03 da       	ld.ub	r10,r1[0x5]
80003994:	00 00       	add	r0,r0
80003996:	03 d9       	ld.ub	r9,r1[0x5]
80003998:	00 00       	add	r0,r0
8000399a:	01 2e       	ld.uh	lr,r0++
8000399c:	80 00       	ld.sh	r0,r0[0x0]
8000399e:	3b c0       	mov	r0,-68
800039a0:	80 00       	ld.sh	r0,r0[0x0]
800039a2:	3c 48       	mov	r8,-60
800039a4:	00 00       	add	r0,r0
800039a6:	02 90       	mov	r0,r1
800039a8:	00 00       	add	r0,r0
800039aa:	01 28       	ld.uh	r8,r0++
800039ac:	80 00       	ld.sh	r0,r0[0x0]
800039ae:	2e 18       	sub	r8,-31

800039b0 <button_pressed>:

uint8_t button_pressed (void)
{
800039b0:	eb cd 40 80 	pushm	r7,lr
800039b4:	1a 97       	mov	r7,sp
	
	is_button_released();
800039b6:	f0 1f 00 2a 	mcall	80003a5c <button_pressed+0xac>

	if (button_released)
800039ba:	4a a8       	lddpc	r8,80003a60 <button_pressed+0xb0>
800039bc:	11 88       	ld.ub	r8,r8[0x0]
800039be:	5c 58       	castu.b	r8
800039c0:	c4 90       	breq	80003a52 <button_pressed+0xa2>
	{		
		if (read_push_button(PB1, (uint8_t *)&PB1_Counter))
800039c2:	4a 9b       	lddpc	r11,80003a64 <button_pressed+0xb4>
800039c4:	30 ac       	mov	r12,10
800039c6:	f0 1f 00 29 	mcall	80003a68 <button_pressed+0xb8>
800039ca:	18 98       	mov	r8,r12
800039cc:	58 08       	cp.w	r8,0
800039ce:	c0 90       	breq	800039e0 <button_pressed+0x30>
		{
			LED_On(LED0);
800039d0:	30 1c       	mov	r12,1
800039d2:	f0 1f 00 27 	mcall	80003a6c <button_pressed+0xbc>
			LED_Off(LED1 | LED2 | LED3);
800039d6:	30 ec       	mov	r12,14
800039d8:	f0 1f 00 26 	mcall	80003a70 <button_pressed+0xc0>
			//store_passcode(0L);
			return PUSH_BUTTON1;
800039dc:	30 08       	mov	r8,0
800039de:	c3 c8       	rjmp	80003a56 <button_pressed+0xa6>
		}
		else if (read_push_button(PB2, (uint8_t *)&PB2_Counter))
800039e0:	4a 5b       	lddpc	r11,80003a74 <button_pressed+0xc4>
800039e2:	30 bc       	mov	r12,11
800039e4:	f0 1f 00 21 	mcall	80003a68 <button_pressed+0xb8>
800039e8:	18 98       	mov	r8,r12
800039ea:	58 08       	cp.w	r8,0
800039ec:	c0 90       	breq	800039fe <button_pressed+0x4e>
		{
			LED_On(LED1);
800039ee:	30 2c       	mov	r12,2
800039f0:	f0 1f 00 1f 	mcall	80003a6c <button_pressed+0xbc>
			LED_Off(LED0 | LED2 | LED3);
800039f4:	30 dc       	mov	r12,13
800039f6:	f0 1f 00 1f 	mcall	80003a70 <button_pressed+0xc0>
			//store_passcode(1L);
			return PUSH_BUTTON2;
800039fa:	30 18       	mov	r8,1
800039fc:	c2 d8       	rjmp	80003a56 <button_pressed+0xa6>
		}
		else if (read_push_button(PB3, (uint8_t *)&PB3_Counter))
800039fe:	49 fb       	lddpc	r11,80003a78 <button_pressed+0xc8>
80003a00:	30 cc       	mov	r12,12
80003a02:	f0 1f 00 1a 	mcall	80003a68 <button_pressed+0xb8>
80003a06:	18 98       	mov	r8,r12
80003a08:	58 08       	cp.w	r8,0
80003a0a:	c0 90       	breq	80003a1c <button_pressed+0x6c>
		{
			LED_On(LED2);
80003a0c:	30 4c       	mov	r12,4
80003a0e:	f0 1f 00 18 	mcall	80003a6c <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED3);
80003a12:	30 bc       	mov	r12,11
80003a14:	f0 1f 00 17 	mcall	80003a70 <button_pressed+0xc0>
			//store_passcode(2L);
			return PUSH_BUTTON3;
80003a18:	30 28       	mov	r8,2
80003a1a:	c1 e8       	rjmp	80003a56 <button_pressed+0xa6>
		}
		else if (read_push_button(PB4, (uint8_t *)&PB4_Counter))
80003a1c:	49 8b       	lddpc	r11,80003a7c <button_pressed+0xcc>
80003a1e:	30 dc       	mov	r12,13
80003a20:	f0 1f 00 12 	mcall	80003a68 <button_pressed+0xb8>
80003a24:	18 98       	mov	r8,r12
80003a26:	58 08       	cp.w	r8,0
80003a28:	c0 90       	breq	80003a3a <button_pressed+0x8a>
		{
			LED_On(LED3);
80003a2a:	30 8c       	mov	r12,8
80003a2c:	f0 1f 00 10 	mcall	80003a6c <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED2);
80003a30:	30 7c       	mov	r12,7
80003a32:	f0 1f 00 10 	mcall	80003a70 <button_pressed+0xc0>
			//store_passcode(3L);
			return PUSH_BUTTON4;
80003a36:	30 38       	mov	r8,3
80003a38:	c0 f8       	rjmp	80003a56 <button_pressed+0xa6>
		}
		else if (read_push_button(PB_ENTER, (uint8_t *)&PB5_Counter))
80003a3a:	49 2b       	lddpc	r11,80003a80 <button_pressed+0xd0>
80003a3c:	32 ac       	mov	r12,42
80003a3e:	f0 1f 00 0b 	mcall	80003a68 <button_pressed+0xb8>
80003a42:	18 98       	mov	r8,r12
80003a44:	58 08       	cp.w	r8,0
80003a46:	c0 60       	breq	80003a52 <button_pressed+0xa2>
		{
			device_unlocked = true;
80003a48:	48 f9       	lddpc	r9,80003a84 <button_pressed+0xd4>
80003a4a:	30 18       	mov	r8,1
80003a4c:	b2 88       	st.b	r9[0x0],r8
			return ENTER_BUTTON;
80003a4e:	30 48       	mov	r8,4
80003a50:	c0 38       	rjmp	80003a56 <button_pressed+0xa6>
		}
	}
	return NO_BUTTON;
80003a52:	e0 68 00 ff 	mov	r8,255
}
80003a56:	10 9c       	mov	r12,r8
80003a58:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a5c:	80 00       	ld.sh	r0,r0[0x0]
80003a5e:	38 04       	mov	r4,-128
80003a60:	00 00       	add	r0,r0
80003a62:	01 2d       	ld.uh	sp,r0++
80003a64:	00 00       	add	r0,r0
80003a66:	04 00       	add	r0,r2
80003a68:	80 00       	ld.sh	r0,r0[0x0]
80003a6a:	3b 08       	mov	r8,-80
80003a6c:	80 00       	ld.sh	r0,r0[0x0]
80003a6e:	45 28       	lddsp	r8,sp[0x148]
80003a70:	80 00       	ld.sh	r0,r0[0x0]
80003a72:	44 70       	lddsp	r0,sp[0x11c]
80003a74:	00 00       	add	r0,r0
80003a76:	04 01       	add	r1,r2
80003a78:	00 00       	add	r0,r0
80003a7a:	04 02       	add	r2,r2
80003a7c:	00 00       	add	r0,r0
80003a7e:	04 03       	add	r3,r2
80003a80:	00 00       	add	r0,r0
80003a82:	04 04       	add	r4,r2
80003a84:	00 00       	add	r0,r0
80003a86:	02 88       	andn	r8,r1

80003a88 <check_all_buttons_high>:

bool check_all_buttons_high(void)
{
80003a88:	eb cd 40 80 	pushm	r7,lr
80003a8c:	1a 97       	mov	r7,sp
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003a8e:	30 ac       	mov	r12,10
80003a90:	f0 1f 00 1c 	mcall	80003b00 <check_all_buttons_high+0x78>
80003a94:	18 98       	mov	r8,r12
80003a96:	58 18       	cp.w	r8,1
80003a98:	c2 b1       	brne	80003aee <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
80003a9a:	30 bc       	mov	r12,11
80003a9c:	f0 1f 00 19 	mcall	80003b00 <check_all_buttons_high+0x78>
80003aa0:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003aa2:	58 18       	cp.w	r8,1
80003aa4:	c2 51       	brne	80003aee <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
80003aa6:	30 cc       	mov	r12,12
80003aa8:	f0 1f 00 16 	mcall	80003b00 <check_all_buttons_high+0x78>
80003aac:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003aae:	58 18       	cp.w	r8,1
80003ab0:	c1 f1       	brne	80003aee <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
80003ab2:	30 dc       	mov	r12,13
80003ab4:	f0 1f 00 13 	mcall	80003b00 <check_all_buttons_high+0x78>
80003ab8:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003aba:	58 18       	cp.w	r8,1
80003abc:	c1 91       	brne	80003aee <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
		&& (gpio_get_pin_value(ENTER_BUTTON) == 1))
80003abe:	30 4c       	mov	r12,4
80003ac0:	f0 1f 00 10 	mcall	80003b00 <check_all_buttons_high+0x78>
80003ac4:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003ac6:	58 18       	cp.w	r8,1
80003ac8:	c1 31       	brne	80003aee <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
		&& (gpio_get_pin_value(ENTER_BUTTON) == 1))
	{
		if (button_released_iteration++ > 4)
80003aca:	48 f8       	lddpc	r8,80003b04 <check_all_buttons_high+0x7c>
80003acc:	11 88       	ld.ub	r8,r8[0x0]
80003ace:	30 49       	mov	r9,4
80003ad0:	f2 08 18 00 	cp.b	r8,r9
80003ad4:	5f b9       	srhi	r9
80003ad6:	5c 59       	castu.b	r9
80003ad8:	2f f8       	sub	r8,-1
80003ada:	5c 58       	castu.b	r8
80003adc:	48 aa       	lddpc	r10,80003b04 <check_all_buttons_high+0x7c>
80003ade:	b4 88       	st.b	r10[0x0],r8
80003ae0:	58 09       	cp.w	r9,0
80003ae2:	c0 a0       	breq	80003af6 <check_all_buttons_high+0x6e>
		{
			button_released_iteration = 0;
80003ae4:	48 89       	lddpc	r9,80003b04 <check_all_buttons_high+0x7c>
80003ae6:	30 08       	mov	r8,0
80003ae8:	b2 88       	st.b	r9[0x0],r8
			return true;
80003aea:	30 18       	mov	r8,1
80003aec:	c0 78       	rjmp	80003afa <check_all_buttons_high+0x72>
		}
	}
	else
	{
		button_released_iteration = 0;
80003aee:	48 69       	lddpc	r9,80003b04 <check_all_buttons_high+0x7c>
80003af0:	30 08       	mov	r8,0
80003af2:	b2 88       	st.b	r9[0x0],r8
80003af4:	c0 28       	rjmp	80003af8 <check_all_buttons_high+0x70>

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003af6:	d7 03       	nop
	else
	{
		button_released_iteration = 0;
	}

	return false;
80003af8:	30 08       	mov	r8,0
}
80003afa:	10 9c       	mov	r12,r8
80003afc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b00:	80 00       	ld.sh	r0,r0[0x0]
80003b02:	8e a0       	ld.uh	r0,r7[0x4]
80003b04:	00 00       	add	r0,r0
80003b06:	04 0b       	add	r11,r2

80003b08 <read_push_button>:

bool read_push_button(uint32_t pin, uint8_t *counter)
{
80003b08:	eb cd 40 80 	pushm	r7,lr
80003b0c:	1a 97       	mov	r7,sp
80003b0e:	20 3d       	sub	sp,12
80003b10:	ef 4c ff f8 	st.w	r7[-8],r12
80003b14:	ef 4b ff f4 	st.w	r7[-12],r11
	bool button_status = false;
80003b18:	30 08       	mov	r8,0
80003b1a:	ef 68 ff ff 	st.b	r7[-1],r8

	if (gpio_get_pin_value(pin) == 0)
80003b1e:	ee fc ff f8 	ld.w	r12,r7[-8]
80003b22:	f0 1f 00 18 	mcall	80003b80 <read_push_button+0x78>
80003b26:	18 98       	mov	r8,r12
80003b28:	58 08       	cp.w	r8,0
80003b2a:	c1 c1       	brne	80003b62 <read_push_button+0x5a>
	{
		(*counter)++;
80003b2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003b30:	11 88       	ld.ub	r8,r8[0x0]
80003b32:	2f f8       	sub	r8,-1
80003b34:	5c 58       	castu.b	r8
80003b36:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003b3a:	b2 88       	st.b	r9[0x0],r8
		if (*counter >= 3)
80003b3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003b40:	11 89       	ld.ub	r9,r8[0x0]
80003b42:	30 28       	mov	r8,2
80003b44:	f0 09 18 00 	cp.b	r9,r8
80003b48:	e0 88 00 15 	brls	80003b72 <read_push_button+0x6a>
		{
			button_status = true;
80003b4c:	30 18       	mov	r8,1
80003b4e:	ef 68 ff ff 	st.b	r7[-1],r8
			//if (enter_pressed)
			//{
				//enter_pressed = false;	
				//Start_W_timer();
			//}
			*counter = 0;
80003b52:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003b56:	30 08       	mov	r8,0
80003b58:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003b5a:	48 b9       	lddpc	r9,80003b84 <read_push_button+0x7c>
80003b5c:	30 08       	mov	r8,0
80003b5e:	b2 88       	st.b	r9[0x0],r8
80003b60:	c0 a8       	rjmp	80003b74 <read_push_button+0x6c>
		}
	}
	else
	{
		button_status = false;
80003b62:	30 08       	mov	r8,0
80003b64:	ef 68 ff ff 	st.b	r7[-1],r8
		*counter = 0;
80003b68:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003b6c:	30 08       	mov	r8,0
80003b6e:	b2 88       	st.b	r9[0x0],r8
80003b70:	c0 28       	rjmp	80003b74 <read_push_button+0x6c>
			//{
				//enter_pressed = false;	
				//Start_W_timer();
			//}
			*counter = 0;
			button_released = false;
80003b72:	d7 03       	nop
	else
	{
		button_status = false;
		*counter = 0;
	}
	return button_status;	
80003b74:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80003b78:	10 9c       	mov	r12,r8
80003b7a:	2f dd       	sub	sp,-12
80003b7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b80:	80 00       	ld.sh	r0,r0[0x0]
80003b82:	8e a0       	ld.uh	r0,r7[0x4]
80003b84:	00 00       	add	r0,r0
80003b86:	01 2d       	ld.uh	sp,r0++

80003b88 <push_buttons_init>:

void push_buttons_init(void)
{
80003b88:	eb cd 40 80 	pushm	r7,lr
80003b8c:	1a 97       	mov	r7,sp
	gpio_configure_pin(PB1,GPIO_DIR_INPUT);
80003b8e:	30 0b       	mov	r11,0
80003b90:	30 ac       	mov	r12,10
80003b92:	f0 1f 00 0b 	mcall	80003bbc <push_buttons_init+0x34>
	gpio_configure_pin(PB2,GPIO_DIR_INPUT);
80003b96:	30 0b       	mov	r11,0
80003b98:	30 bc       	mov	r12,11
80003b9a:	f0 1f 00 09 	mcall	80003bbc <push_buttons_init+0x34>
	gpio_configure_pin(PB3,GPIO_DIR_INPUT);
80003b9e:	30 0b       	mov	r11,0
80003ba0:	30 cc       	mov	r12,12
80003ba2:	f0 1f 00 07 	mcall	80003bbc <push_buttons_init+0x34>
	gpio_configure_pin(PB4,GPIO_DIR_INPUT);
80003ba6:	30 0b       	mov	r11,0
80003ba8:	30 dc       	mov	r12,13
80003baa:	f0 1f 00 05 	mcall	80003bbc <push_buttons_init+0x34>
	gpio_configure_pin(PB_ENTER,GPIO_DIR_INPUT);
80003bae:	30 0b       	mov	r11,0
80003bb0:	32 ac       	mov	r12,42
80003bb2:	f0 1f 00 03 	mcall	80003bbc <push_buttons_init+0x34>
}
80003bb6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bba:	00 00       	add	r0,r0
80003bbc:	80 00       	ld.sh	r0,r0[0x0]
80003bbe:	8c f2       	ld.uh	r2,r6[0xe]

80003bc0 <store_passcode>:

void store_passcode(uint32_t value)
{
80003bc0:	eb cd 40 80 	pushm	r7,lr
80003bc4:	1a 97       	mov	r7,sp
80003bc6:	20 2d       	sub	sp,8
80003bc8:	ef 4c ff f8 	st.w	r7[-8],r12
	unsigned char index = 0;
80003bcc:	30 08       	mov	r8,0
80003bce:	ef 68 ff ff 	st.b	r7[-1],r8
	index = passcode_byte_index >> 4;
80003bd2:	49 c8       	lddpc	r8,80003c40 <store_passcode+0x80>
80003bd4:	11 88       	ld.ub	r8,r8[0x0]
80003bd6:	5c 58       	castu.b	r8
80003bd8:	a5 88       	lsr	r8,0x4
80003bda:	ef 68 ff ff 	st.b	r7[-1],r8
	pass_code[index] = pass_code[index] | (value << ((passcode_byte_index & 0x0000000F) << 1));
80003bde:	49 a8       	lddpc	r8,80003c44 <store_passcode+0x84>
80003be0:	70 09       	ld.w	r9,r8[0x0]
80003be2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003be6:	a3 68       	lsl	r8,0x2
80003be8:	10 09       	add	r9,r8
80003bea:	49 78       	lddpc	r8,80003c44 <store_passcode+0x84>
80003bec:	70 0a       	ld.w	r10,r8[0x0]
80003bee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003bf2:	a3 68       	lsl	r8,0x2
80003bf4:	f4 08 00 08 	add	r8,r10,r8
80003bf8:	70 0a       	ld.w	r10,r8[0x0]
80003bfa:	49 28       	lddpc	r8,80003c40 <store_passcode+0x80>
80003bfc:	11 88       	ld.ub	r8,r8[0x0]
80003bfe:	5c 58       	castu.b	r8
80003c00:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003c04:	a1 78       	lsl	r8,0x1
80003c06:	ee fb ff f8 	ld.w	r11,r7[-8]
80003c0a:	f6 08 09 48 	lsl	r8,r11,r8
80003c0e:	f5 e8 10 08 	or	r8,r10,r8
80003c12:	93 08       	st.w	r9[0x0],r8
	if (++passcode_byte_index >= 128)
80003c14:	48 b8       	lddpc	r8,80003c40 <store_passcode+0x80>
80003c16:	11 88       	ld.ub	r8,r8[0x0]
80003c18:	5c 58       	castu.b	r8
80003c1a:	2f f8       	sub	r8,-1
80003c1c:	5c 58       	castu.b	r8
80003c1e:	48 99       	lddpc	r9,80003c40 <store_passcode+0x80>
80003c20:	b2 88       	st.b	r9[0x0],r8
80003c22:	48 88       	lddpc	r8,80003c40 <store_passcode+0x80>
80003c24:	11 88       	ld.ub	r8,r8[0x0]
80003c26:	5c 58       	castu.b	r8
80003c28:	10 99       	mov	r9,r8
80003c2a:	30 08       	mov	r8,0
80003c2c:	f0 09 18 00 	cp.b	r9,r8
80003c30:	c0 44       	brge	80003c38 <store_passcode+0x78>
	{
		passcode_byte_index = 0;
80003c32:	48 49       	lddpc	r9,80003c40 <store_passcode+0x80>
80003c34:	30 08       	mov	r8,0
80003c36:	b2 88       	st.b	r9[0x0],r8
	}
	//inter_key_delay = ENABLED;
}
80003c38:	2f ed       	sub	sp,-8
80003c3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c3e:	00 00       	add	r0,r0
80003c40:	00 00       	add	r0,r0
80003c42:	02 89       	andn	r9,r1
80003c44:	00 00       	add	r0,r0
80003c46:	0b c8       	ld.ub	r8,r5[0x4]

80003c48 <store_sequence>:

void store_sequence(uint8_t value)
{
80003c48:	eb cd 40 80 	pushm	r7,lr
80003c4c:	1a 97       	mov	r7,sp
80003c4e:	20 2d       	sub	sp,8
80003c50:	18 98       	mov	r8,r12
80003c52:	ef 68 ff f8 	st.b	r7[-8],r8
	static uint8_t frame_number = 0;
	uint8_t button_bit_mask = 0x03 << (value * 2);
80003c56:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003c5a:	a1 78       	lsl	r8,0x1
80003c5c:	30 39       	mov	r9,3
80003c5e:	f2 08 09 48 	lsl	r8,r9,r8
80003c62:	ef 68 ff fe 	st.b	r7[-2],r8
	uint8_t increment_bit_mask = 0x01 << (value * 2);
80003c66:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003c6a:	a1 78       	lsl	r8,0x1
80003c6c:	30 19       	mov	r9,1
80003c6e:	f2 08 09 48 	lsl	r8,r9,r8
80003c72:	ef 68 ff ff 	st.b	r7[-1],r8
	
	switch (value)
80003c76:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003c7a:	58 08       	cp.w	r8,0
80003c7c:	c5 55       	brlt	80003d26 <store_sequence+0xde>
80003c7e:	58 28       	cp.w	r8,2
80003c80:	e0 8a 00 05 	brle	80003c8a <store_sequence+0x42>
80003c84:	58 38       	cp.w	r8,3
80003c86:	c3 80       	breq	80003cf6 <store_sequence+0xae>
80003c88:	c4 f8       	rjmp	80003d26 <store_sequence+0xde>
	{
	case 0:
	case 1:
	case 2:
		Stored_values_ram.device_id_sequence[frame_number] = (((Stored_values_ram.device_id_sequence[frame_number] & button_bit_mask) + increment_bit_mask) & button_bit_mask) | ~(Stored_values_ram.device_id_sequence[frame_number] & button_bit_mask);
80003c8a:	4a 98       	lddpc	r8,80003d2c <store_sequence+0xe4>
80003c8c:	11 88       	ld.ub	r8,r8[0x0]
80003c8e:	10 9a       	mov	r10,r8
80003c90:	4a 78       	lddpc	r8,80003d2c <store_sequence+0xe4>
80003c92:	11 88       	ld.ub	r8,r8[0x0]
80003c94:	4a 79       	lddpc	r9,80003d30 <store_sequence+0xe8>
80003c96:	f2 08 00 08 	add	r8,r9,r8
80003c9a:	f1 38 00 80 	ld.ub	r8,r8[128]
80003c9e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003ca2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80003ca6:	f3 e8 00 08 	and	r8,r9,r8
80003caa:	5c 58       	castu.b	r8
80003cac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003cb0:	f2 08 00 08 	add	r8,r9,r8
80003cb4:	5c 58       	castu.b	r8
80003cb6:	10 99       	mov	r9,r8
80003cb8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80003cbc:	f3 e8 00 08 	and	r8,r9,r8
80003cc0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003cc4:	49 a8       	lddpc	r8,80003d2c <store_sequence+0xe4>
80003cc6:	11 88       	ld.ub	r8,r8[0x0]
80003cc8:	49 ab       	lddpc	r11,80003d30 <store_sequence+0xe8>
80003cca:	f6 08 00 08 	add	r8,r11,r8
80003cce:	f1 38 00 80 	ld.ub	r8,r8[128]
80003cd2:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80003cd6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80003cda:	f7 e8 00 08 	and	r8,r11,r8
80003cde:	5c 58       	castu.b	r8
80003ce0:	5c d8       	com	r8
80003ce2:	5c 58       	castu.b	r8
80003ce4:	f3 e8 10 08 	or	r8,r9,r8
80003ce8:	5c 58       	castu.b	r8
80003cea:	5c 58       	castu.b	r8
80003cec:	49 19       	lddpc	r9,80003d30 <store_sequence+0xe8>
80003cee:	14 09       	add	r9,r10
80003cf0:	f3 68 00 80 	st.b	r9[128],r8
		break;
80003cf4:	c1 98       	rjmp	80003d26 <store_sequence+0xde>
	case 3:
		Stored_values_ram.device_id_sequence[frame_number++] |= 0xC0;
80003cf6:	48 e8       	lddpc	r8,80003d2c <store_sequence+0xe4>
80003cf8:	11 88       	ld.ub	r8,r8[0x0]
80003cfa:	10 99       	mov	r9,r8
80003cfc:	12 9a       	mov	r10,r9
80003cfe:	48 db       	lddpc	r11,80003d30 <store_sequence+0xe8>
80003d00:	f6 09 00 09 	add	r9,r11,r9
80003d04:	f3 39 00 80 	ld.ub	r9,r9[128]
80003d08:	5c 59       	castu.b	r9
80003d0a:	ea 19 ff ff 	orh	r9,0xffff
80003d0e:	e8 19 ff c0 	orl	r9,0xffc0
80003d12:	5c 59       	castu.b	r9
80003d14:	48 7b       	lddpc	r11,80003d30 <store_sequence+0xe8>
80003d16:	f6 0a 00 0a 	add	r10,r11,r10
80003d1a:	f5 69 00 80 	st.b	r10[128],r9
80003d1e:	2f f8       	sub	r8,-1
80003d20:	5c 58       	castu.b	r8
80003d22:	48 39       	lddpc	r9,80003d2c <store_sequence+0xe4>
80003d24:	b2 88       	st.b	r9[0x0],r8
		break;
	}	
}
80003d26:	2f ed       	sub	sp,-8
80003d28:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d2c:	00 00       	add	r0,r0
80003d2e:	04 0a       	add	r10,r2
80003d30:	00 00       	add	r0,r0
80003d32:	0a 84       	andn	r4,r5

80003d34 <check_programming_mode_entry_sequence>:

bool check_programming_mode_entry_sequence(void)
{
80003d34:	eb cd 40 80 	pushm	r7,lr
80003d38:	1a 97       	mov	r7,sp
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
		&& gpio_get_pin_value(PB3) == 0
80003d3a:	30 ac       	mov	r12,10
80003d3c:	f0 1f 00 1e 	mcall	80003db4 <check_programming_mode_entry_sequence+0x80>
80003d40:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003d42:	58 08       	cp.w	r8,0
80003d44:	c2 e1       	brne	80003da0 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
80003d46:	30 cc       	mov	r12,12
80003d48:	f0 1f 00 1b 	mcall	80003db4 <check_programming_mode_entry_sequence+0x80>
80003d4c:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003d4e:	58 08       	cp.w	r8,0
80003d50:	c2 81       	brne	80003da0 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
80003d52:	30 dc       	mov	r12,13
80003d54:	f0 1f 00 18 	mcall	80003db4 <check_programming_mode_entry_sequence+0x80>
80003d58:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003d5a:	58 08       	cp.w	r8,0
80003d5c:	c2 21       	brne	80003da0 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003d5e:	30 bc       	mov	r12,11
80003d60:	f0 1f 00 15 	mcall	80003db4 <check_programming_mode_entry_sequence+0x80>
80003d64:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003d66:	58 18       	cp.w	r8,1
80003d68:	c1 c1       	brne	80003da0 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003d6a:	30 4c       	mov	r12,4
80003d6c:	f0 1f 00 12 	mcall	80003db4 <check_programming_mode_entry_sequence+0x80>
80003d70:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003d72:	58 18       	cp.w	r8,1
80003d74:	c1 61       	brne	80003da0 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
	{
		if (programming_mode_sequence_counter++ >= 100)
80003d76:	49 18       	lddpc	r8,80003db8 <check_programming_mode_entry_sequence+0x84>
80003d78:	90 08       	ld.sh	r8,r8[0x0]
80003d7a:	36 39       	mov	r9,99
80003d7c:	f2 08 19 00 	cp.h	r8,r9
80003d80:	5f b9       	srhi	r9
80003d82:	5c 59       	castu.b	r9
80003d84:	2f f8       	sub	r8,-1
80003d86:	5c 88       	casts.h	r8
80003d88:	48 ca       	lddpc	r10,80003db8 <check_programming_mode_entry_sequence+0x84>
80003d8a:	b4 08       	st.h	r10[0x0],r8
80003d8c:	58 09       	cp.w	r9,0
80003d8e:	c0 d0       	breq	80003da8 <check_programming_mode_entry_sequence+0x74>
		{
			programming_mode_sequence_counter = 0;
80003d90:	48 a9       	lddpc	r9,80003db8 <check_programming_mode_entry_sequence+0x84>
80003d92:	30 08       	mov	r8,0
80003d94:	b2 08       	st.h	r9[0x0],r8
			button_released = false;
80003d96:	48 a9       	lddpc	r9,80003dbc <check_programming_mode_entry_sequence+0x88>
80003d98:	30 08       	mov	r8,0
80003d9a:	b2 88       	st.b	r9[0x0],r8
			return true;
80003d9c:	30 18       	mov	r8,1
80003d9e:	c0 78       	rjmp	80003dac <check_programming_mode_entry_sequence+0x78>
		}
	}
	else
	{
		programming_mode_sequence_counter = 0;
80003da0:	48 69       	lddpc	r9,80003db8 <check_programming_mode_entry_sequence+0x84>
80003da2:	30 08       	mov	r8,0
80003da4:	b2 08       	st.h	r9[0x0],r8
80003da6:	c0 28       	rjmp	80003daa <check_programming_mode_entry_sequence+0x76>
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003da8:	d7 03       	nop
	}
	else
	{
		programming_mode_sequence_counter = 0;
	}
	return false;
80003daa:	30 08       	mov	r8,0
}
80003dac:	10 9c       	mov	r12,r8
80003dae:	e3 cd 80 80 	ldm	sp++,r7,pc
80003db2:	00 00       	add	r0,r0
80003db4:	80 00       	ld.sh	r0,r0[0x0]
80003db6:	8e a0       	ld.uh	r0,r7[0x4]
80003db8:	00 00       	add	r0,r0
80003dba:	04 08       	add	r8,r2
80003dbc:	00 00       	add	r0,r0
80003dbe:	01 2d       	ld.uh	sp,r0++

80003dc0 <check_normal_mode_entry_sequence>:

bool check_normal_mode_entry_sequence(void)
{
80003dc0:	eb cd 40 80 	pushm	r7,lr
80003dc4:	1a 97       	mov	r7,sp
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
		&& gpio_get_pin_value(PB4) == 0
80003dc6:	30 4c       	mov	r12,4
80003dc8:	f0 1f 00 40 	mcall	80003ec8 <check_normal_mode_entry_sequence+0x108>
80003dcc:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003dce:	58 08       	cp.w	r8,0
80003dd0:	c3 41       	brne	80003e38 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
80003dd2:	30 dc       	mov	r12,13
80003dd4:	f0 1f 00 3d 	mcall	80003ec8 <check_normal_mode_entry_sequence+0x108>
80003dd8:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003dda:	58 08       	cp.w	r8,0
80003ddc:	c2 e1       	brne	80003e38 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
80003dde:	30 ac       	mov	r12,10
80003de0:	f0 1f 00 3a 	mcall	80003ec8 <check_normal_mode_entry_sequence+0x108>
80003de4:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003de6:	58 18       	cp.w	r8,1
80003de8:	c2 81       	brne	80003e38 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003dea:	30 bc       	mov	r12,11
80003dec:	f0 1f 00 37 	mcall	80003ec8 <check_normal_mode_entry_sequence+0x108>
80003df0:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003df2:	58 18       	cp.w	r8,1
80003df4:	c2 21       	brne	80003e38 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003df6:	30 cc       	mov	r12,12
80003df8:	f0 1f 00 34 	mcall	80003ec8 <check_normal_mode_entry_sequence+0x108>
80003dfc:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003dfe:	58 18       	cp.w	r8,1
80003e00:	c1 c1       	brne	80003e38 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
	{
		normal_mode_unlock_device_sequence_counter = 0;
80003e02:	4b 39       	lddpc	r9,80003ecc <check_normal_mode_entry_sequence+0x10c>
80003e04:	30 08       	mov	r8,0
80003e06:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_device_id_sequence_counter++ >= 200)
80003e08:	4b 28       	lddpc	r8,80003ed0 <check_normal_mode_entry_sequence+0x110>
80003e0a:	11 88       	ld.ub	r8,r8[0x0]
80003e0c:	3c 79       	mov	r9,-57
80003e0e:	f2 08 18 00 	cp.b	r8,r9
80003e12:	5f b9       	srhi	r9
80003e14:	5c 59       	castu.b	r9
80003e16:	2f f8       	sub	r8,-1
80003e18:	5c 58       	castu.b	r8
80003e1a:	4a ea       	lddpc	r10,80003ed0 <check_normal_mode_entry_sequence+0x110>
80003e1c:	b4 88       	st.b	r10[0x0],r8
80003e1e:	58 09       	cp.w	r9,0
80003e20:	c4 c0       	breq	80003eb8 <check_normal_mode_entry_sequence+0xf8>
		{
			normal_mode_device_id_sequence_counter = 0;
80003e22:	4a c9       	lddpc	r9,80003ed0 <check_normal_mode_entry_sequence+0x110>
80003e24:	30 08       	mov	r8,0
80003e26:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003e28:	4a b9       	lddpc	r9,80003ed4 <check_normal_mode_entry_sequence+0x114>
80003e2a:	30 08       	mov	r8,0
80003e2c:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = DEVICE_ID;
80003e2e:	4a b9       	lddpc	r9,80003ed8 <check_normal_mode_entry_sequence+0x118>
80003e30:	30 38       	mov	r8,3
80003e32:	b2 88       	st.b	r9[0x0],r8
			return true;
80003e34:	30 18       	mov	r8,1
80003e36:	c4 58       	rjmp	80003ec0 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
			&& gpio_get_pin_value(PB2) == 0
80003e38:	30 4c       	mov	r12,4
80003e3a:	f0 1f 00 24 	mcall	80003ec8 <check_normal_mode_entry_sequence+0x108>
80003e3e:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003e40:	58 08       	cp.w	r8,0
80003e42:	c3 41       	brne	80003eaa <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
80003e44:	30 bc       	mov	r12,11
80003e46:	f0 1f 00 21 	mcall	80003ec8 <check_normal_mode_entry_sequence+0x108>
80003e4a:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003e4c:	58 08       	cp.w	r8,0
80003e4e:	c2 e1       	brne	80003eaa <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
80003e50:	30 ac       	mov	r12,10
80003e52:	f0 1f 00 1e 	mcall	80003ec8 <check_normal_mode_entry_sequence+0x108>
80003e56:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003e58:	58 18       	cp.w	r8,1
80003e5a:	c2 81       	brne	80003eaa <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003e5c:	30 cc       	mov	r12,12
80003e5e:	f0 1f 00 1b 	mcall	80003ec8 <check_normal_mode_entry_sequence+0x108>
80003e62:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003e64:	58 18       	cp.w	r8,1
80003e66:	c2 21       	brne	80003eaa <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003e68:	30 dc       	mov	r12,13
80003e6a:	f0 1f 00 18 	mcall	80003ec8 <check_normal_mode_entry_sequence+0x108>
80003e6e:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003e70:	58 18       	cp.w	r8,1
80003e72:	c1 c1       	brne	80003eaa <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
	{
		normal_mode_device_id_sequence_counter = 0;
80003e74:	49 79       	lddpc	r9,80003ed0 <check_normal_mode_entry_sequence+0x110>
80003e76:	30 08       	mov	r8,0
80003e78:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_unlock_device_sequence_counter++ >= 200)
80003e7a:	49 58       	lddpc	r8,80003ecc <check_normal_mode_entry_sequence+0x10c>
80003e7c:	11 88       	ld.ub	r8,r8[0x0]
80003e7e:	3c 79       	mov	r9,-57
80003e80:	f2 08 18 00 	cp.b	r8,r9
80003e84:	5f b9       	srhi	r9
80003e86:	5c 59       	castu.b	r9
80003e88:	2f f8       	sub	r8,-1
80003e8a:	5c 58       	castu.b	r8
80003e8c:	49 0a       	lddpc	r10,80003ecc <check_normal_mode_entry_sequence+0x10c>
80003e8e:	b4 88       	st.b	r10[0x0],r8
80003e90:	58 09       	cp.w	r9,0
80003e92:	c1 50       	breq	80003ebc <check_normal_mode_entry_sequence+0xfc>
		{
			normal_mode_unlock_device_sequence_counter = 0;
80003e94:	48 e9       	lddpc	r9,80003ecc <check_normal_mode_entry_sequence+0x10c>
80003e96:	30 08       	mov	r8,0
80003e98:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003e9a:	48 f9       	lddpc	r9,80003ed4 <check_normal_mode_entry_sequence+0x114>
80003e9c:	30 08       	mov	r8,0
80003e9e:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = UNLOCK_CRYPTX2;
80003ea0:	48 e9       	lddpc	r9,80003ed8 <check_normal_mode_entry_sequence+0x118>
80003ea2:	30 48       	mov	r8,4
80003ea4:	b2 88       	st.b	r9[0x0],r8
			return true;
80003ea6:	30 18       	mov	r8,1
80003ea8:	c0 c8       	rjmp	80003ec0 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else
	{
		normal_mode_device_id_sequence_counter = 0;
80003eaa:	48 a9       	lddpc	r9,80003ed0 <check_normal_mode_entry_sequence+0x110>
80003eac:	30 08       	mov	r8,0
80003eae:	b2 88       	st.b	r9[0x0],r8
		normal_mode_unlock_device_sequence_counter = 0;
80003eb0:	48 79       	lddpc	r9,80003ecc <check_normal_mode_entry_sequence+0x10c>
80003eb2:	30 08       	mov	r8,0
80003eb4:	b2 88       	st.b	r9[0x0],r8
80003eb6:	c0 48       	rjmp	80003ebe <check_normal_mode_entry_sequence+0xfe>
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003eb8:	d7 03       	nop
80003eba:	c0 28       	rjmp	80003ebe <check_normal_mode_entry_sequence+0xfe>
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003ebc:	d7 03       	nop
	else
	{
		normal_mode_device_id_sequence_counter = 0;
		normal_mode_unlock_device_sequence_counter = 0;
	}
	return false;
80003ebe:	30 08       	mov	r8,0
}
80003ec0:	10 9c       	mov	r12,r8
80003ec2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ec6:	00 00       	add	r0,r0
80003ec8:	80 00       	ld.sh	r0,r0[0x0]
80003eca:	8e a0       	ld.uh	r0,r7[0x4]
80003ecc:	00 00       	add	r0,r0
80003ece:	04 05       	add	r5,r2
80003ed0:	00 00       	add	r0,r0
80003ed2:	04 06       	add	r6,r2
80003ed4:	00 00       	add	r0,r0
80003ed6:	01 2d       	ld.uh	sp,r0++
80003ed8:	00 00       	add	r0,r0
80003eda:	03 db       	ld.ub	r11,r1[0x5]

80003edc <check_for_mode_selected>:

void check_for_mode_selected(void)
{
80003edc:	eb cd 40 80 	pushm	r7,lr
80003ee0:	1a 97       	mov	r7,sp
	Read_button();
80003ee2:	f0 1f 00 03 	mcall	80003eec <check_for_mode_selected+0x10>
}
80003ee6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eea:	00 00       	add	r0,r0
80003eec:	80 00       	ld.sh	r0,r0[0x0]
80003eee:	38 3c       	mov	r12,-125

80003ef0 <process_selected_mode>:

uint8_t process_selected_mode(void)
{
80003ef0:	eb cd 40 80 	pushm	r7,lr
80003ef4:	1a 97       	mov	r7,sp
80003ef6:	20 1d       	sub	sp,4
	uint8_t return_value = FAILED;
80003ef8:	30 08       	mov	r8,0
80003efa:	ef 68 ff ff 	st.b	r7[-1],r8
	
	Read_button();
80003efe:	f0 1f 00 37 	mcall	80003fd8 <process_selected_mode+0xe8>
	
	if (enter_button_status == READY_TO_TRIGGER)
80003f02:	4b 78       	lddpc	r8,80003fdc <process_selected_mode+0xec>
80003f04:	11 88       	ld.ub	r8,r8[0x0]
80003f06:	5c 58       	castu.b	r8
80003f08:	c0 b1       	brne	80003f1e <process_selected_mode+0x2e>
	{
		pass_code = temp_password;
80003f0a:	4b 68       	lddpc	r8,80003fe0 <process_selected_mode+0xf0>
80003f0c:	4b 69       	lddpc	r9,80003fe4 <process_selected_mode+0xf4>
80003f0e:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
80003f10:	4b 69       	lddpc	r9,80003fe8 <process_selected_mode+0xf8>
80003f12:	30 08       	mov	r8,0
80003f14:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_FIRST_PRESS;
80003f16:	4b 29       	lddpc	r9,80003fdc <process_selected_mode+0xec>
80003f18:	30 18       	mov	r8,1
80003f1a:	b2 88       	st.b	r9[0x0],r8
80003f1c:	c5 78       	rjmp	80003fca <process_selected_mode+0xda>
	}
	else if (enter_button_status == FIRST_TIME_PRESSED)
80003f1e:	4b 08       	lddpc	r8,80003fdc <process_selected_mode+0xec>
80003f20:	11 88       	ld.ub	r8,r8[0x0]
80003f22:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003f26:	30 28       	mov	r8,2
80003f28:	f0 09 18 00 	cp.b	r9,r8
80003f2c:	c0 e1       	brne	80003f48 <process_selected_mode+0x58>
	{
		store_passcode(3L);
80003f2e:	30 3c       	mov	r12,3
80003f30:	f0 1f 00 2f 	mcall	80003fec <process_selected_mode+0xfc>
		pass_code = temp_password1;
80003f34:	4a b8       	lddpc	r8,80003fe0 <process_selected_mode+0xf0>
80003f36:	4a f9       	lddpc	r9,80003ff0 <process_selected_mode+0x100>
80003f38:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
80003f3a:	4a c9       	lddpc	r9,80003fe8 <process_selected_mode+0xf8>
80003f3c:	30 08       	mov	r8,0
80003f3e:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_SECOND_PRESS;
80003f40:	4a 79       	lddpc	r9,80003fdc <process_selected_mode+0xec>
80003f42:	30 38       	mov	r8,3
80003f44:	b2 88       	st.b	r9[0x0],r8
80003f46:	c4 28       	rjmp	80003fca <process_selected_mode+0xda>
	}
	else if (enter_button_status == SECOND_TIME_PRESSED)
80003f48:	4a 58       	lddpc	r8,80003fdc <process_selected_mode+0xec>
80003f4a:	11 88       	ld.ub	r8,r8[0x0]
80003f4c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003f50:	30 48       	mov	r8,4
80003f52:	f0 09 18 00 	cp.b	r9,r8
80003f56:	c1 f1       	brne	80003f94 <process_selected_mode+0xa4>
	{
		store_passcode(3L);
80003f58:	30 3c       	mov	r12,3
80003f5a:	f0 1f 00 25 	mcall	80003fec <process_selected_mode+0xfc>
		if (compare_entered_passwords() == true)
80003f5e:	f0 1f 00 26 	mcall	80003ff4 <process_selected_mode+0x104>
80003f62:	18 98       	mov	r8,r12
80003f64:	58 08       	cp.w	r8,0
80003f66:	c2 f0       	breq	80003fc4 <process_selected_mode+0xd4>
		{
			memset((uint8_t *)temp_password, 0, 32);
80003f68:	32 0a       	mov	r10,32
80003f6a:	30 0b       	mov	r11,0
80003f6c:	49 ec       	lddpc	r12,80003fe4 <process_selected_mode+0xf4>
80003f6e:	f0 1f 00 23 	mcall	80003ff8 <process_selected_mode+0x108>
			pass_code = temp_password;
80003f72:	49 c8       	lddpc	r8,80003fe0 <process_selected_mode+0xf0>
80003f74:	49 c9       	lddpc	r9,80003fe4 <process_selected_mode+0xf4>
80003f76:	91 09       	st.w	r8[0x0],r9
			passcode_byte_index = 0;
80003f78:	49 c9       	lddpc	r9,80003fe8 <process_selected_mode+0xf8>
80003f7a:	30 08       	mov	r8,0
80003f7c:	b2 88       	st.b	r9[0x0],r8
			enter_button_status = WAITING_FOR_USER_INPUT;
80003f7e:	49 89       	lddpc	r9,80003fdc <process_selected_mode+0xec>
80003f80:	30 58       	mov	r8,5
80003f82:	b2 88       	st.b	r9[0x0],r8
			switch (mode_selected)
80003f84:	49 e8       	lddpc	r8,80003ffc <process_selected_mode+0x10c>
80003f86:	11 88       	ld.ub	r8,r8[0x0]
80003f88:	5c 58       	castu.b	r8
80003f8a:	58 18       	cp.w	r8,1
80003f8c:	c1 e0       	breq	80003fc8 <process_selected_mode+0xd8>
			{
			case _UNLOCK_PASSWORD:
				Start_W_timer();			
80003f8e:	f0 1f 00 1d 	mcall	80004000 <process_selected_mode+0x110>
80003f92:	c1 c8       	rjmp	80003fca <process_selected_mode+0xda>
				break;	
			}

		}
	}
	else if (enter_button_status == THIRD_TIME_PRESSED)
80003f94:	49 28       	lddpc	r8,80003fdc <process_selected_mode+0xec>
80003f96:	11 88       	ld.ub	r8,r8[0x0]
80003f98:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003f9c:	30 68       	mov	r8,6
80003f9e:	f0 09 18 00 	cp.b	r9,r8
80003fa2:	c1 41       	brne	80003fca <process_selected_mode+0xda>
	{
		
		switch (mode_selected)
80003fa4:	49 68       	lddpc	r8,80003ffc <process_selected_mode+0x10c>
80003fa6:	11 88       	ld.ub	r8,r8[0x0]
80003fa8:	5c 58       	castu.b	r8
80003faa:	58 18       	cp.w	r8,1
80003fac:	c0 70       	breq	80003fba <process_selected_mode+0xca>
		{
		case _UNLOCK_PASSWORD:
			store_passcode(3L);
80003fae:	30 3c       	mov	r12,3
80003fb0:	f0 1f 00 0f 	mcall	80003fec <process_selected_mode+0xfc>
			calculate_salt();
80003fb4:	f0 1f 00 14 	mcall	80004004 <process_selected_mode+0x114>
			break;
80003fb8:	c0 28       	rjmp	80003fbc <process_selected_mode+0xcc>
		case _HIDDEN_DATA_UNLOCK_PASSWORD:
			break;
80003fba:	d7 03       	nop
		case _DEVICE_ID_CONFIRM:
			save_sequence_to_mcu();
			break;
		}
		
		return_value = SUCCESSFUL;
80003fbc:	30 18       	mov	r8,1
80003fbe:	ef 68 ff ff 	st.b	r7[-1],r8
80003fc2:	c0 48       	rjmp	80003fca <process_selected_mode+0xda>
			passcode_byte_index = 0;
			enter_button_status = WAITING_FOR_USER_INPUT;
			switch (mode_selected)
			{
			case _UNLOCK_PASSWORD:
				Start_W_timer();			
80003fc4:	d7 03       	nop
80003fc6:	c0 28       	rjmp	80003fca <process_selected_mode+0xda>
80003fc8:	d7 03       	nop
		
		return_value = SUCCESSFUL;
	}

	
	return return_value;
80003fca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80003fce:	10 9c       	mov	r12,r8
80003fd0:	2f fd       	sub	sp,-4
80003fd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fd6:	00 00       	add	r0,r0
80003fd8:	80 00       	ld.sh	r0,r0[0x0]
80003fda:	38 3c       	mov	r12,-125
80003fdc:	00 00       	add	r0,r0
80003fde:	03 da       	ld.ub	r10,r1[0x5]
80003fe0:	00 00       	add	r0,r0
80003fe2:	0b c8       	ld.ub	r8,r5[0x4]
80003fe4:	00 00       	add	r0,r0
80003fe6:	02 48       	or	r8,r1
80003fe8:	00 00       	add	r0,r0
80003fea:	02 89       	andn	r9,r1
80003fec:	80 00       	ld.sh	r0,r0[0x0]
80003fee:	3b c0       	mov	r0,-68
80003ff0:	00 00       	add	r0,r0
80003ff2:	02 68       	and	r8,r1
80003ff4:	80 00       	ld.sh	r0,r0[0x0]
80003ff6:	40 08       	lddsp	r8,sp[0x0]
80003ff8:	80 00       	ld.sh	r0,r0[0x0]
80003ffa:	ea 3e 00 00 	sub	lr,720896
80003ffe:	03 d8       	ld.ub	r8,r1[0x5]
80004000:	80 00       	ld.sh	r0,r0[0x0]
80004002:	2f d8       	sub	r8,-3
80004004:	80 00       	ld.sh	r0,r0[0x0]
80004006:	2e 18       	sub	r8,-31

80004008 <compare_entered_passwords>:

bool compare_entered_passwords(void)
{
80004008:	eb cd 40 80 	pushm	r7,lr
8000400c:	1a 97       	mov	r7,sp
8000400e:	20 1d       	sub	sp,4
	uint8_t i = 0;
80004010:	30 08       	mov	r8,0
80004012:	ef 68 ff ff 	st.b	r7[-1],r8
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
80004016:	c1 48       	rjmp	8000403e <compare_entered_passwords+0x36>
	{
		if (temp_password[i] != temp_password1[i])
80004018:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000401c:	48 f8       	lddpc	r8,80004058 <compare_entered_passwords+0x50>
8000401e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004022:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80004026:	48 e8       	lddpc	r8,8000405c <compare_entered_passwords+0x54>
80004028:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000402c:	10 39       	cp.w	r9,r8
8000402e:	c0 30       	breq	80004034 <compare_entered_passwords+0x2c>
		{
			return false;
80004030:	30 08       	mov	r8,0
80004032:	c0 e8       	rjmp	8000404e <compare_entered_passwords+0x46>
		}
		i++;
80004034:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004038:	2f f8       	sub	r8,-1
8000403a:	ef 68 ff ff 	st.b	r7[-1],r8

bool compare_entered_passwords(void)
{
	uint8_t i = 0;
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
8000403e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004042:	30 78       	mov	r8,7
80004044:	f0 09 18 00 	cp.b	r9,r8
80004048:	fe 98 ff e8 	brls	80004018 <compare_entered_passwords+0x10>
		{
			return false;
		}
		i++;
	}
	return true;
8000404c:	30 18       	mov	r8,1
}
8000404e:	10 9c       	mov	r12,r8
80004050:	2f fd       	sub	sp,-4
80004052:	e3 cd 80 80 	ldm	sp++,r7,pc
80004056:	00 00       	add	r0,r0
80004058:	00 00       	add	r0,r0
8000405a:	02 48       	or	r8,r1
8000405c:	00 00       	add	r0,r0
8000405e:	02 68       	and	r8,r1

80004060 <read_password>:

void read_password(void)
{
80004060:	eb cd 40 80 	pushm	r7,lr
80004064:	1a 97       	mov	r7,sp
	Read_button();
80004066:	f0 1f 00 06 	mcall	8000407c <read_password+0x1c>
	if (normal_mode_password_entered == true)
8000406a:	48 68       	lddpc	r8,80004080 <read_password+0x20>
8000406c:	11 88       	ld.ub	r8,r8[0x0]
8000406e:	5c 58       	castu.b	r8
80004070:	c0 30       	breq	80004076 <read_password+0x16>
	{
		compare_with_saved_password();
80004072:	f0 1f 00 05 	mcall	80004084 <read_password+0x24>
	}
}
80004076:	e3 cd 80 80 	ldm	sp++,r7,pc
8000407a:	00 00       	add	r0,r0
8000407c:	80 00       	ld.sh	r0,r0[0x0]
8000407e:	38 3c       	mov	r12,-125
80004080:	00 00       	add	r0,r0
80004082:	03 d9       	ld.ub	r9,r1[0x5]
80004084:	80 00       	ld.sh	r0,r0[0x0]
80004086:	40 88       	lddsp	r8,sp[0x20]

80004088 <compare_with_saved_password>:

bool compare_with_saved_password(void)
{
80004088:	eb cd 40 80 	pushm	r7,lr
8000408c:	1a 97       	mov	r7,sp
8000408e:	20 2d       	sub	sp,8
	uint8_t i = 0; 
80004090:	30 08       	mov	r8,0
80004092:	ef 68 ff fb 	st.b	r7[-5],r8
	uint32_t *temp_stored_password;

	temp_stored_password = encrypt_password((uint32_t *)temp_password);
80004096:	4b 0c       	lddpc	r12,80004154 <compare_with_saved_password+0xcc>
80004098:	f0 1f 00 30 	mcall	80004158 <compare_with_saved_password+0xd0>
8000409c:	18 98       	mov	r8,r12
8000409e:	ef 48 ff fc 	st.w	r7[-4],r8

	while (i < 8)
800040a2:	c1 38       	rjmp	800040c8 <compare_with_saved_password+0x40>
	{
		temp_password[i] = temp_stored_password[i];
800040a4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800040a8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800040ac:	a3 68       	lsl	r8,0x2
800040ae:	ee fa ff fc 	ld.w	r10,r7[-4]
800040b2:	f4 08 00 08 	add	r8,r10,r8
800040b6:	70 0a       	ld.w	r10,r8[0x0]
800040b8:	4a 78       	lddpc	r8,80004154 <compare_with_saved_password+0xcc>
800040ba:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		i++;
800040be:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800040c2:	2f f8       	sub	r8,-1
800040c4:	ef 68 ff fb 	st.b	r7[-5],r8
	uint8_t i = 0; 
	uint32_t *temp_stored_password;

	temp_stored_password = encrypt_password((uint32_t *)temp_password);

	while (i < 8)
800040c8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800040cc:	30 78       	mov	r8,7
800040ce:	f0 09 18 00 	cp.b	r9,r8
800040d2:	fe 98 ff e9 	brls	800040a4 <compare_with_saved_password+0x1c>
	{
		temp_password[i] = temp_stored_password[i];
		i++;
	}
	if (normal_mode_chosen == DEVICE_ID)
800040d6:	4a 28       	lddpc	r8,8000415c <compare_with_saved_password+0xd4>
800040d8:	11 88       	ld.ub	r8,r8[0x0]
800040da:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800040de:	30 38       	mov	r8,3
800040e0:	f0 09 18 00 	cp.b	r9,r8
800040e4:	c0 61       	brne	800040f0 <compare_with_saved_password+0x68>
	{
		temp_stored_password = (uint32_t *)Stored_values_ram.device_id_confirm;
800040e6:	49 f8       	lddpc	r8,80004160 <compare_with_saved_password+0xd8>
800040e8:	2a 08       	sub	r8,-96
800040ea:	ef 48 ff fc 	st.w	r7[-4],r8
800040ee:	c0 c8       	rjmp	80004106 <compare_with_saved_password+0x7e>
	}
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
800040f0:	49 b8       	lddpc	r8,8000415c <compare_with_saved_password+0xd4>
800040f2:	11 88       	ld.ub	r8,r8[0x0]
800040f4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800040f8:	30 48       	mov	r8,4
800040fa:	f0 09 18 00 	cp.b	r9,r8
800040fe:	c0 41       	brne	80004106 <compare_with_saved_password+0x7e>
	{
		temp_stored_password = (uint32_t *)Stored_values_ram.unlock_password;
80004100:	49 88       	lddpc	r8,80004160 <compare_with_saved_password+0xd8>
80004102:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	i = 0;
80004106:	30 08       	mov	r8,0
80004108:	ef 68 ff fb 	st.b	r7[-5],r8
	while (i < 8)
8000410c:	c1 78       	rjmp	8000413a <compare_with_saved_password+0xb2>
	{
		if (temp_stored_password[i] != temp_password[i])
8000410e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004112:	a3 68       	lsl	r8,0x2
80004114:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004118:	f2 08 00 08 	add	r8,r9,r8
8000411c:	70 09       	ld.w	r9,r8[0x0]
8000411e:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80004122:	48 d8       	lddpc	r8,80004154 <compare_with_saved_password+0xcc>
80004124:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80004128:	10 39       	cp.w	r9,r8
8000412a:	c0 30       	breq	80004130 <compare_with_saved_password+0xa8>
		{
			return false;
8000412c:	30 08       	mov	r8,0
8000412e:	c0 e8       	rjmp	8000414a <compare_with_saved_password+0xc2>
		}
		i++;
80004130:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004134:	2f f8       	sub	r8,-1
80004136:	ef 68 ff fb 	st.b	r7[-5],r8
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
	{
		temp_stored_password = (uint32_t *)Stored_values_ram.unlock_password;
	}
	i = 0;
	while (i < 8)
8000413a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000413e:	30 78       	mov	r8,7
80004140:	f0 09 18 00 	cp.b	r9,r8
80004144:	fe 98 ff e5 	brls	8000410e <compare_with_saved_password+0x86>
		{
			return false;
		}
		i++;
	}
	return true;
80004148:	30 18       	mov	r8,1
}
8000414a:	10 9c       	mov	r12,r8
8000414c:	2f ed       	sub	sp,-8
8000414e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004152:	00 00       	add	r0,r0
80004154:	00 00       	add	r0,r0
80004156:	02 48       	or	r8,r1
80004158:	80 00       	ld.sh	r0,r0[0x0]
8000415a:	2d 34       	sub	r4,-45
8000415c:	00 00       	add	r0,r0
8000415e:	03 db       	ld.ub	r11,r1[0x5]
80004160:	00 00       	add	r0,r0
80004162:	0a 84       	andn	r4,r5

80004164 <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
static void tc_init(volatile avr32_tc_t *tc)
{
80004164:	eb cd 40 80 	pushm	r7,lr
80004168:	1a 97       	mov	r7,sp
8000416a:	20 2d       	sub	sp,8
8000416c:	ef 4c ff f8 	st.w	r7[-8],r12
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80004170:	49 0b       	lddpc	r11,800041b0 <tc_init+0x4c>
80004172:	ee fc ff f8 	ld.w	r12,r7[-8]
80004176:	f0 1f 00 10 	mcall	800041b4 <tc_init+0x50>
	 * Set the compare triggers.
	 * We configure it to count every 10 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 10 ms, hence RC = (fPBA / 8) / 100
	 * to get an interrupt every 10 ms.
	 */
	temp_value = tc_write_rc(tc, EXAMPLE_TC_CHANNEL, 20625 /*(sysclk_get_pba_hz() / 8 / 100)*/);
8000417a:	e0 6a 50 91 	mov	r10,20625
8000417e:	30 0b       	mov	r11,0
80004180:	ee fc ff f8 	ld.w	r12,r7[-8]
80004184:	f0 1f 00 0d 	mcall	800041b8 <tc_init+0x54>
80004188:	18 98       	mov	r8,r12
8000418a:	5c 88       	casts.h	r8
8000418c:	5c 78       	castu.h	r8
8000418e:	ef 48 ff fc 	st.w	r7[-4],r8
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80004192:	48 ba       	lddpc	r10,800041bc <tc_init+0x58>
80004194:	30 0b       	mov	r11,0
80004196:	ee fc ff f8 	ld.w	r12,r7[-8]
8000419a:	f0 1f 00 0a 	mcall	800041c0 <tc_init+0x5c>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
8000419e:	30 0b       	mov	r11,0
800041a0:	ee fc ff f8 	ld.w	r12,r7[-8]
800041a4:	f0 1f 00 08 	mcall	800041c4 <tc_init+0x60>
}
800041a8:	2f ed       	sub	sp,-8
800041aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800041ae:	00 00       	add	r0,r0
800041b0:	80 00       	ld.sh	r0,r0[0x0]
800041b2:	ef 40 80 00 	st.w	r7[-32768],r0
800041b6:	98 60       	ld.sh	r0,r12[0xc]
800041b8:	80 00       	ld.sh	r0,r0[0x0]
800041ba:	9a 28       	ld.sh	r8,sp[0x4]
800041bc:	80 00       	ld.sh	r0,r0[0x0]
800041be:	ef 48 80 00 	st.w	r7[-32768],r8
800041c2:	96 78       	ld.sh	r8,r11[0xe]
800041c4:	80 00       	ld.sh	r0,r0[0x0]
800041c6:	99 b4       	st.w	r12[0x2c],r4

800041c8 <tc_task>:
 * - Register the TC interrupt
 * - Configure, enable the CPCS (RC compare match) interrupt,
 * - and start a TC channel in waveform mode
 */
void tc_task (void)
{
800041c8:	eb cd 40 80 	pushm	r7,lr
800041cc:	1a 97       	mov	r7,sp
800041ce:	20 1d       	sub	sp,4
	volatile avr32_tc_t *tc = EXAMPLE_TC;
800041d0:	fe 78 38 00 	mov	r8,-51200
800041d4:	ef 48 ff fc 	st.w	r7[-4],r8
	 * peripheral clocks, except for the peripheral clocks explicitly
	 * enabled in conf_clock.h.
	 */
	//sysclk_init();
	// Enable the clock to the selected example Timer/counter peripheral module.
	sysclk_enable_peripheral_clock(EXAMPLE_TC);
800041d8:	fe 7c 38 00 	mov	r12,-51200
800041dc:	f0 1f 00 0c 	mcall	8000420c <tc_task+0x44>
	// Disable the interrupts
	cpu_irq_disable();
800041e0:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	//INTC_init_interrupts();
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
800041e2:	30 0a       	mov	r10,0
800041e4:	e0 6b 01 c0 	mov	r11,448
800041e8:	48 ac       	lddpc	r12,80004210 <tc_task+0x48>
800041ea:	f0 1f 00 0b 	mcall	80004214 <tc_task+0x4c>
	// Enable the interrupts
	cpu_irq_enable();
800041ee:	d5 03       	csrf	0x10
	// Initialize the timer module
	tc_init(tc);
800041f0:	ee fc ff fc 	ld.w	r12,r7[-4]
800041f4:	f0 1f 00 09 	mcall	80004218 <tc_task+0x50>
	// Initialize push buttons
	push_buttons_init();
800041f8:	f0 1f 00 09 	mcall	8000421c <tc_task+0x54>

    calculate_hash((uint32_t *)CipherKey256, 8, CipherKey256_hash);
800041fc:	48 9a       	lddpc	r10,80004220 <tc_task+0x58>
800041fe:	30 8b       	mov	r11,8
80004200:	48 9c       	lddpc	r12,80004224 <tc_task+0x5c>
80004202:	f0 1f 00 0a 	mcall	80004228 <tc_task+0x60>
			 //*/
			 //// Reset the timer update flag to wait till next timer interrupt
			//update_timer = false;
		//}
	//}
}
80004206:	2f fd       	sub	sp,-4
80004208:	e3 cd 80 80 	ldm	sp++,r7,pc
8000420c:	80 00       	ld.sh	r0,r0[0x0]
8000420e:	35 08       	mov	r8,80
80004210:	80 00       	ld.sh	r0,r0[0x0]
80004212:	37 1c       	mov	r12,113
80004214:	80 00       	ld.sh	r0,r0[0x0]
80004216:	91 38       	st.w	r8[0xc],r8
80004218:	80 00       	ld.sh	r0,r0[0x0]
8000421a:	41 64       	lddsp	r4,sp[0x58]
8000421c:	80 00       	ld.sh	r0,r0[0x0]
8000421e:	3b 88       	mov	r8,-72
80004220:	00 00       	add	r0,r0
80004222:	03 e0       	ld.ub	r0,r1[0x6]
80004224:	80 00       	ld.sh	r0,r0[0x0]
80004226:	ee 00       	*unknown*
80004228:	80 00       	ld.sh	r0,r0[0x0]
8000422a:	30 44       	mov	r4,4

8000422c <init_hmatrix>:


/*! \brief Initializes the HSB bus matrix.
 */
static void init_hmatrix(void)
{
8000422c:	eb cd 40 80 	pushm	r7,lr
80004230:	1a 97       	mov	r7,sp
80004232:	20 1d       	sub	sp,4
  // Set flashc master type to last default to save one cycle for
  // each branch.
  avr32_hmatrix_scfg_t scfg;

  scfg = AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH];
80004234:	fe 68 10 00 	mov	r8,-126976
80004238:	71 08       	ld.w	r8,r8[0x40]
8000423a:	ef 48 ff fc 	st.w	r7[-4],r8
  scfg.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
8000423e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004242:	30 19       	mov	r9,1
80004244:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
80004248:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH] = scfg;
8000424c:	fe 68 10 00 	mov	r8,-126976
80004250:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004254:	f1 49 00 40 	st.w	r8[64],r9
}
80004258:	2f fd       	sub	sp,-4
8000425a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000425e:	d7 03       	nop

80004260 <aes_task>:
 * 8N1.
 * Then it sets up the interrupt handler and waits for a USART interrupt to
 * trigger.
 */
void aes_task (void)
{
80004260:	eb cd 40 80 	pushm	r7,lr
80004264:	1a 97       	mov	r7,sp
  init_hmatrix();
80004266:	f0 1f 00 03 	mcall	80004270 <aes_task+0x10>
}
8000426a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000426e:	00 00       	add	r0,r0
80004270:	80 00       	ld.sh	r0,r0[0x0]
80004272:	42 2c       	lddsp	r12,sp[0x88]

80004274 <aes_init>:
	0x5A43D875,	// AES-CTR IV (BYTE2)
	0x00000001	// COUNTER
};

void aes_init (unsigned char Processing_Mode)
{
80004274:	eb cd 40 80 	pushm	r7,lr
80004278:	1a 97       	mov	r7,sp
8000427a:	20 3d       	sub	sp,12
8000427c:	18 98       	mov	r8,r12
8000427e:	ef 68 ff f4 	st.b	r7[-12],r8
	  aes_config_t    AesConf;        // AES config structure
	  // Configure the AES.
	  AesConf.ProcessingMode = Processing_Mode;   // Cipher
80004282:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004286:	ef 68 ff f8 	st.b	r7[-8],r8
	  AesConf.ProcessingDelay = 0;                // No delay: best performance
8000428a:	30 08       	mov	r8,0
8000428c:	ef 68 ff f9 	st.b	r7[-7],r8
	  AesConf.StartMode = AES_START_MODE_AUTO;    // Manual mode
80004290:	30 18       	mov	r8,1
80004292:	ef 68 ff fa 	st.b	r7[-6],r8
	  AesConf.KeySize = AES_KEY_SIZE_256;         // 256bit cryptographic key
80004296:	30 28       	mov	r8,2
80004298:	ef 68 ff fb 	st.b	r7[-5],r8
	  AesConf.OpMode = AES_CBC_MODE;              // CTR cipher mode
8000429c:	30 18       	mov	r8,1
8000429e:	ef 68 ff fc 	st.b	r7[-4],r8
	  AesConf.LodMode = 0;                        // LODMODE == 0 : the DATRDY flag
800042a2:	30 08       	mov	r8,0
800042a4:	ef 68 ff fd 	st.b	r7[-3],r8
	  // is cleared when one of the output data registers is read (because we're in
	  // manual mode).
	  AesConf.CFBSize = 0;                        // Don't-care because we're using the CTR mode.
800042a8:	30 08       	mov	r8,0
800042aa:	ef 68 ff fe 	st.b	r7[-2],r8
	  AesConf.CounterMeasureMask = 0;             // Disable all counter measures.
800042ae:	30 08       	mov	r8,0
800042b0:	ef 68 ff ff 	st.b	r7[-1],r8
	  aes_configure(&AVR32_AES, &AesConf);
800042b4:	ee c8 00 08 	sub	r8,r7,8
800042b8:	10 9b       	mov	r11,r8
800042ba:	fc 7c 00 00 	mov	r12,-196608
800042be:	f0 1f 00 06 	mcall	800042d4 <aes_init+0x60>
	  aes_set_key(&AVR32_AES, CipherKey256);
800042c2:	48 6b       	lddpc	r11,800042d8 <aes_init+0x64>
800042c4:	fc 7c 00 00 	mov	r12,-196608
800042c8:	f0 1f 00 05 	mcall	800042dc <aes_init+0x68>

	  //ccountt0 = Get_system_register(AVR32_COUNT);
	  // Start encryption.
	  //aes_start(&AVR32_AES);

}
800042cc:	2f dd       	sub	sp,-12
800042ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800042d2:	00 00       	add	r0,r0
800042d4:	80 00       	ld.sh	r0,r0[0x0]
800042d6:	80 f4       	ld.uh	r4,r0[0xe]
800042d8:	80 00       	ld.sh	r0,r0[0x0]
800042da:	ee 00       	*unknown*
800042dc:	80 00       	ld.sh	r0,r0[0x0]
800042de:	81 84       	st.w	r0[0x20],r4

800042e0 <apply_aes_encryption>:
uint32_t aes_out_data[128] = {0};

void apply_aes_encryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint32_t *aes_key, uint16_t len, uint32_t sector_id)
{
800042e0:	eb cd 40 80 	pushm	r7,lr
800042e4:	1a 97       	mov	r7,sp
800042e6:	20 7d       	sub	sp,28
800042e8:	ef 4c ff f4 	st.w	r7[-12],r12
800042ec:	ef 4b ff f0 	st.w	r7[-16],r11
800042f0:	ef 4a ff ec 	st.w	r7[-20],r10
800042f4:	ef 48 ff e4 	st.w	r7[-28],r8
800042f8:	12 98       	mov	r8,r9
800042fa:	ef 58 ff e8 	st.h	r7[-24],r8
	uint8_t i, loop_counter;
	uint32_t temp;
	
	temp = aes_key[0];
800042fe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004302:	70 08       	ld.w	r8,r8[0x0]
80004304:	ef 48 ff fc 	st.w	r7[-4],r8

	aes_key[0] = aes_key[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
80004308:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000430c:	70 09       	ld.w	r9,r8[0x0]
8000430e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004312:	10 59       	eor	r9,r8
80004314:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004318:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
							 
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);	
	aes_set_initvector(&AVR32_AES, (unsigned long int *)aes_key);	
8000431a:	ee fb ff ec 	ld.w	r11,r7[-20]
8000431e:	fc 7c 00 00 	mov	r12,-196608
80004322:	f0 1f 00 30 	mcall	800043e0 <apply_aes_encryption+0x100>
	
	aes_key[0] = temp;
80004326:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000432a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000432e:	91 09       	st.w	r8[0x0],r9
	
	loop_counter = len >> 2;
80004330:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80004334:	a3 88       	lsr	r8,0x2
80004336:	5c 88       	casts.h	r8
80004338:	ef 68 ff fb 	st.b	r7[-5],r8
		
	for (i = 0; i < loop_counter; i+=4)
8000433c:	30 08       	mov	r8,0
8000433e:	ef 68 ff fa 	st.b	r7[-6],r8
80004342:	c2 78       	rjmp	80004390 <apply_aes_encryption+0xb0>
	{
		aes_init(AES_PMODE_CIPHER);
80004344:	30 1c       	mov	r12,1
80004346:	f0 1f 00 28 	mcall	800043e4 <apply_aes_encryption+0x104>
			
		aes_write_inputdata(aes, &aes_in_data_t[i]);
8000434a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000434e:	a3 68       	lsl	r8,0x2
80004350:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004354:	f2 08 00 08 	add	r8,r9,r8
80004358:	10 9b       	mov	r11,r8
8000435a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000435e:	f0 1f 00 23 	mcall	800043e8 <apply_aes_encryption+0x108>

		while (!(aes->isr & 0x00000001));
80004362:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004366:	70 78       	ld.w	r8,r8[0x1c]
80004368:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000436c:	cf b0       	breq	80004362 <apply_aes_encryption+0x82>

		aes_read_outputdata(aes, &aes_out_data[i]);
8000436e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004372:	f0 09 15 02 	lsl	r9,r8,0x2
80004376:	49 e8       	lddpc	r8,800043ec <apply_aes_encryption+0x10c>
80004378:	f2 08 00 08 	add	r8,r9,r8
8000437c:	10 9b       	mov	r11,r8
8000437e:	ee fc ff f4 	ld.w	r12,r7[-12]
80004382:	f0 1f 00 1c 	mcall	800043f0 <apply_aes_encryption+0x110>
	
	aes_key[0] = temp;
	
	loop_counter = len >> 2;
		
	for (i = 0; i < loop_counter; i+=4)
80004386:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000438a:	2f c8       	sub	r8,-4
8000438c:	ef 68 ff fa 	st.b	r7[-6],r8
80004390:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80004394:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004398:	f0 09 18 00 	cp.b	r9,r8
8000439c:	cd 43       	brcs	80004344 <apply_aes_encryption+0x64>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
8000439e:	30 08       	mov	r8,0
800043a0:	ef 68 ff fa 	st.b	r7[-6],r8
800043a4:	c1 38       	rjmp	800043ca <apply_aes_encryption+0xea>
	{
		aes_in_data_t[i] = aes_out_data[i];
800043a6:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800043aa:	a3 68       	lsl	r8,0x2
800043ac:	ee f9 ff f0 	ld.w	r9,r7[-16]
800043b0:	f2 08 00 08 	add	r8,r9,r8
800043b4:	ef 3a ff fa 	ld.ub	r10,r7[-6]
800043b8:	48 d9       	lddpc	r9,800043ec <apply_aes_encryption+0x10c>
800043ba:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800043be:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
800043c0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800043c4:	2f f8       	sub	r8,-1
800043c6:	ef 68 ff fa 	st.b	r7[-6],r8
800043ca:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800043ce:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800043d2:	f0 09 18 00 	cp.b	r9,r8
800043d6:	ce 83       	brcs	800043a6 <apply_aes_encryption+0xc6>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
800043d8:	2f 9d       	sub	sp,-28
800043da:	e3 cd 80 80 	ldm	sp++,r7,pc
800043de:	00 00       	add	r0,r0
800043e0:	80 00       	ld.sh	r0,r0[0x0]
800043e2:	82 12       	ld.sh	r2,r1[0x2]
800043e4:	80 00       	ld.sh	r0,r0[0x0]
800043e6:	42 74       	lddsp	r4,sp[0x9c]
800043e8:	80 00       	ld.sh	r0,r0[0x0]
800043ea:	82 6e       	ld.sh	lr,r1[0xc]
800043ec:	00 00       	add	r0,r0
800043ee:	04 0c       	add	r12,r2
800043f0:	80 00       	ld.sh	r0,r0[0x0]
800043f2:	83 06       	st.w	r1[0x0],r6

800043f4 <board_init>:
800043f4:	eb cd 40 80 	pushm	r7,lr
800043f8:	1a 97       	mov	r7,sp
800043fa:	30 3b       	mov	r11,3
800043fc:	34 3c       	mov	r12,67
800043fe:	f0 1f 00 17 	mcall	80004458 <board_init+0x64>
80004402:	30 3b       	mov	r11,3
80004404:	36 5c       	mov	r12,101
80004406:	f0 1f 00 15 	mcall	80004458 <board_init+0x64>
8000440a:	30 3b       	mov	r11,3
8000440c:	36 9c       	mov	r12,105
8000440e:	f0 1f 00 13 	mcall	80004458 <board_init+0x64>
80004412:	30 3b       	mov	r11,3
80004414:	36 6c       	mov	r12,102
80004416:	f0 1f 00 11 	mcall	80004458 <board_init+0x64>
8000441a:	30 0b       	mov	r11,0
8000441c:	32 ac       	mov	r12,42
8000441e:	f0 1f 00 0f 	mcall	80004458 <board_init+0x64>
80004422:	30 4b       	mov	r11,4
80004424:	48 ec       	lddpc	r12,8000445c <board_init+0x68>
80004426:	f0 1f 00 0f 	mcall	80004460 <board_init+0x6c>
8000442a:	30 ab       	mov	r11,10
8000442c:	48 ec       	lddpc	r12,80004464 <board_init+0x70>
8000442e:	f0 1f 00 0d 	mcall	80004460 <board_init+0x6c>
80004432:	32 bc       	mov	r12,43
80004434:	f0 1f 00 0d 	mcall	80004468 <board_init+0x74>
80004438:	36 cc       	mov	r12,108
8000443a:	f0 1f 00 0c 	mcall	80004468 <board_init+0x74>
8000443e:	30 6b       	mov	r11,6
80004440:	48 bc       	lddpc	r12,8000446c <board_init+0x78>
80004442:	f0 1f 00 08 	mcall	80004460 <board_init+0x6c>
80004446:	32 8c       	mov	r12,40
80004448:	f0 1f 00 08 	mcall	80004468 <board_init+0x74>
8000444c:	32 6c       	mov	r12,38
8000444e:	f0 1f 00 07 	mcall	80004468 <board_init+0x74>
80004452:	e3 cd 80 80 	ldm	sp++,r7,pc
80004456:	00 00       	add	r0,r0
80004458:	80 00       	ld.sh	r0,r0[0x0]
8000445a:	8c f2       	ld.uh	r2,r6[0xe]
8000445c:	80 00       	ld.sh	r0,r0[0x0]
8000445e:	ef 4c 80 00 	st.w	r7[-32768],r12
80004462:	8a e4       	ld.uh	r4,r5[0xc]
80004464:	80 00       	ld.sh	r0,r0[0x0]
80004466:	ef 54 80 00 	st.h	r7[-32768],r4
8000446a:	8c b8       	ld.uh	r8,r6[0x6]
8000446c:	80 00       	ld.sh	r0,r0[0x0]
8000446e:	ef 68 eb cd 	st.b	r7[-5171],r8

80004470 <LED_Off>:
80004470:	eb cd 40 80 	pushm	r7,lr
80004474:	1a 97       	mov	r7,sp
80004476:	20 4d       	sub	sp,16
80004478:	ef 4c ff f0 	st.w	r7[-16],r12
8000447c:	4a 98       	lddpc	r8,80004520 <LED_Off+0xb0>
8000447e:	21 08       	sub	r8,16
80004480:	ef 48 ff f4 	st.w	r7[-12],r8
80004484:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004488:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000448c:	ef 48 ff f0 	st.w	r7[-16],r8
80004490:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004494:	f0 09 11 ff 	rsub	r9,r8,-1
80004498:	4a 38       	lddpc	r8,80004524 <LED_Off+0xb4>
8000449a:	70 08       	ld.w	r8,r8[0x0]
8000449c:	10 69       	and	r9,r8
8000449e:	4a 28       	lddpc	r8,80004524 <LED_Off+0xb4>
800044a0:	91 09       	st.w	r8[0x0],r9
800044a2:	c3 78       	rjmp	80004510 <LED_Off+0xa0>
800044a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800044a8:	5c 98       	brev	r8
800044aa:	f0 08 12 00 	clz	r8,r8
800044ae:	5c 58       	castu.b	r8
800044b0:	2f f8       	sub	r8,-1
800044b2:	ef 68 ff ff 	st.b	r7[-1],r8
800044b6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800044ba:	a5 68       	lsl	r8,0x4
800044bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800044c0:	f2 08 00 08 	add	r8,r9,r8
800044c4:	ef 48 ff f4 	st.w	r7[-12],r8
800044c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800044cc:	70 08       	ld.w	r8,r8[0x0]
800044ce:	a9 68       	lsl	r8,0x8
800044d0:	e0 28 f0 00 	sub	r8,61440
800044d4:	ef 48 ff f8 	st.w	r7[-8],r8
800044d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800044dc:	70 19       	ld.w	r9,r8[0x4]
800044de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044e2:	f1 49 00 54 	st.w	r8[84],r9
800044e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800044ea:	70 19       	ld.w	r9,r8[0x4]
800044ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044f0:	f1 49 00 44 	st.w	r8[68],r9
800044f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800044f8:	70 19       	ld.w	r9,r8[0x4]
800044fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044fe:	91 19       	st.w	r8[0x4],r9
80004500:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004504:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004508:	f2 08 0a 48 	lsr	r8,r9,r8
8000450c:	ef 48 ff f0 	st.w	r7[-16],r8
80004510:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004514:	58 08       	cp.w	r8,0
80004516:	cc 71       	brne	800044a4 <LED_Off+0x34>
80004518:	2f cd       	sub	sp,-16
8000451a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000451e:	00 00       	add	r0,r0
80004520:	80 00       	ld.sh	r0,r0[0x0]
80004522:	ef 74 00 00 	stcond	r7[0],r4
80004526:	01 30       	ld.ub	r0,r0++

80004528 <LED_On>:
80004528:	eb cd 40 80 	pushm	r7,lr
8000452c:	1a 97       	mov	r7,sp
8000452e:	20 4d       	sub	sp,16
80004530:	ef 4c ff f0 	st.w	r7[-16],r12
80004534:	4a 88       	lddpc	r8,800045d4 <LED_On+0xac>
80004536:	21 08       	sub	r8,16
80004538:	ef 48 ff f4 	st.w	r7[-12],r8
8000453c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004540:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004544:	ef 48 ff f0 	st.w	r7[-16],r8
80004548:	4a 48       	lddpc	r8,800045d8 <LED_On+0xb0>
8000454a:	70 09       	ld.w	r9,r8[0x0]
8000454c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004550:	10 49       	or	r9,r8
80004552:	4a 28       	lddpc	r8,800045d8 <LED_On+0xb0>
80004554:	91 09       	st.w	r8[0x0],r9
80004556:	c3 78       	rjmp	800045c4 <LED_On+0x9c>
80004558:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000455c:	5c 98       	brev	r8
8000455e:	f0 08 12 00 	clz	r8,r8
80004562:	5c 58       	castu.b	r8
80004564:	2f f8       	sub	r8,-1
80004566:	ef 68 ff ff 	st.b	r7[-1],r8
8000456a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000456e:	a5 68       	lsl	r8,0x4
80004570:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004574:	f2 08 00 08 	add	r8,r9,r8
80004578:	ef 48 ff f4 	st.w	r7[-12],r8
8000457c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004580:	70 08       	ld.w	r8,r8[0x0]
80004582:	a9 68       	lsl	r8,0x8
80004584:	e0 28 f0 00 	sub	r8,61440
80004588:	ef 48 ff f8 	st.w	r7[-8],r8
8000458c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004590:	70 19       	ld.w	r9,r8[0x4]
80004592:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004596:	f1 49 00 58 	st.w	r8[88],r9
8000459a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000459e:	70 19       	ld.w	r9,r8[0x4]
800045a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045a4:	f1 49 00 44 	st.w	r8[68],r9
800045a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800045ac:	70 19       	ld.w	r9,r8[0x4]
800045ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045b2:	91 19       	st.w	r8[0x4],r9
800045b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800045b8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800045bc:	f2 08 0a 48 	lsr	r8,r9,r8
800045c0:	ef 48 ff f0 	st.w	r7[-16],r8
800045c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800045c8:	58 08       	cp.w	r8,0
800045ca:	cc 71       	brne	80004558 <LED_On+0x30>
800045cc:	2f cd       	sub	sp,-16
800045ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800045d2:	00 00       	add	r0,r0
800045d4:	80 00       	ld.sh	r0,r0[0x0]
800045d6:	ef 74 00 00 	stcond	r7[0],r4
800045da:	01 30       	ld.ub	r0,r0++

800045dc <et024006_Init>:
800045dc:	eb cd 40 80 	pushm	r7,lr
800045e0:	1a 97       	mov	r7,sp
800045e2:	20 2d       	sub	sp,8
800045e4:	ef 4c ff fc 	st.w	r7[-4],r12
800045e8:	ef 4b ff f8 	st.w	r7[-8],r11
800045ec:	49 08       	lddpc	r8,8000462c <et024006_Init+0x50>
800045ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800045f2:	91 09       	st.w	r8[0x0],r9
800045f4:	48 e8       	lddpc	r8,8000462c <et024006_Init+0x50>
800045f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800045fa:	91 19       	st.w	r8[0x4],r9
800045fc:	48 c8       	lddpc	r8,8000462c <et024006_Init+0x50>
800045fe:	70 18       	ld.w	r8,r8[0x4]
80004600:	10 9c       	mov	r12,r8
80004602:	f0 1f 00 0c 	mcall	80004630 <et024006_Init+0x54>
80004606:	f0 1f 00 0c 	mcall	80004634 <et024006_Init+0x58>
8000460a:	f0 1f 00 0c 	mcall	80004638 <et024006_Init+0x5c>
8000460e:	f0 1f 00 0c 	mcall	8000463c <et024006_Init+0x60>
80004612:	f0 1f 00 0c 	mcall	80004640 <et024006_Init+0x64>
80004616:	f0 1f 00 0c 	mcall	80004644 <et024006_Init+0x68>
8000461a:	f0 1f 00 0c 	mcall	80004648 <et024006_Init+0x6c>
8000461e:	f0 1f 00 0c 	mcall	8000464c <et024006_Init+0x70>
80004622:	f0 1f 00 0c 	mcall	80004650 <et024006_Init+0x74>
80004626:	2f ed       	sub	sp,-8
80004628:	e3 cd 80 80 	ldm	sp++,r7,pc
8000462c:	00 00       	add	r0,r0
8000462e:	06 0c       	add	r12,r3
80004630:	80 00       	ld.sh	r0,r0[0x0]
80004632:	83 a0       	st.w	r1[0x28],r0
80004634:	80 00       	ld.sh	r0,r0[0x0]
80004636:	4d e0       	lddpc	r0,800047ac <et024006_PrintString+0xd0>
80004638:	80 00       	ld.sh	r0,r0[0x0]
8000463a:	4e 0c       	lddpc	r12,800047b8 <et024006_PrintString+0xdc>
8000463c:	80 00       	ld.sh	r0,r0[0x0]
8000463e:	50 cc       	stdsp	sp[0x30],r12
80004640:	80 00       	ld.sh	r0,r0[0x0]
80004642:	52 5a       	stdsp	sp[0x94],r10
80004644:	80 00       	ld.sh	r0,r0[0x0]
80004646:	55 f6       	stdsp	sp[0x17c],r6
80004648:	80 00       	ld.sh	r0,r0[0x0]
8000464a:	54 68       	stdsp	sp[0x118],r8
8000464c:	80 00       	ld.sh	r0,r0[0x0]
8000464e:	56 24       	stdsp	sp[0x188],r4
80004650:	80 00       	ld.sh	r0,r0[0x0]
80004652:	5d 58       	*unknown*

80004654 <et024006_DrawFilledRect>:
80004654:	eb cd 40 80 	pushm	r7,lr
80004658:	1a 97       	mov	r7,sp
8000465a:	20 7d       	sub	sp,28
8000465c:	ef 5c ff f4 	st.h	r7[-12],r12
80004660:	ef 5b ff f0 	st.h	r7[-16],r11
80004664:	ef 5a ff ec 	st.h	r7[-20],r10
80004668:	ef 59 ff e8 	st.h	r7[-24],r9
8000466c:	ef 58 ff e4 	st.h	r7[-28],r8
80004670:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80004674:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80004678:	f2 08 00 08 	add	r8,r9,r8
8000467c:	5c 88       	casts.h	r8
8000467e:	20 18       	sub	r8,1
80004680:	ef 58 ff f8 	st.h	r7[-8],r8
80004684:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80004688:	ef 08 ff e8 	ld.sh	r8,r7[-24]
8000468c:	f2 08 00 08 	add	r8,r9,r8
80004690:	5c 88       	casts.h	r8
80004692:	20 18       	sub	r8,1
80004694:	ef 58 ff fa 	st.h	r7[-6],r8
80004698:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8000469c:	ef 1a ff f8 	ld.uh	r10,r7[-8]
800046a0:	ef 1b ff f0 	ld.uh	r11,r7[-16]
800046a4:	ef 18 ff f4 	ld.uh	r8,r7[-12]
800046a8:	10 9c       	mov	r12,r8
800046aa:	f0 1f 00 0b 	mcall	800046d4 <et024006_DrawFilledRect+0x80>
800046ae:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800046b2:	ef 18 ff e8 	ld.uh	r8,r7[-24]
800046b6:	f2 08 02 48 	mul	r8,r9,r8
800046ba:	ef 48 ff fc 	st.w	r7[-4],r8
800046be:	ef 18 ff e4 	ld.uh	r8,r7[-28]
800046c2:	ee fb ff fc 	ld.w	r11,r7[-4]
800046c6:	10 9c       	mov	r12,r8
800046c8:	f0 1f 00 04 	mcall	800046d8 <et024006_DrawFilledRect+0x84>
800046cc:	2f 9d       	sub	sp,-28
800046ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800046d2:	00 00       	add	r0,r0
800046d4:	80 00       	ld.sh	r0,r0[0x0]
800046d6:	4a da       	lddpc	r10,80004788 <et024006_PrintString+0xac>
800046d8:	80 00       	ld.sh	r0,r0[0x0]
800046da:	4d 34       	lddpc	r4,80004824 <et024006_PrintString+0x148>

800046dc <et024006_PrintString>:
800046dc:	eb cd 40 c0 	pushm	r6-r7,lr
800046e0:	1a 97       	mov	r7,sp
800046e2:	20 9d       	sub	sp,36
800046e4:	ee c6 ff f4 	sub	r6,r7,-12
800046e8:	ef 4c ff ec 	st.w	r7[-20],r12
800046ec:	ef 4b ff e8 	st.w	r7[-24],r11
800046f0:	ef 5a ff e4 	st.h	r7[-28],r10
800046f4:	ef 59 ff e0 	st.h	r7[-32],r9
800046f8:	ef 58 ff dc 	st.h	r7[-36],r8
800046fc:	30 08       	mov	r8,0
800046fe:	ef 68 ff f4 	st.b	r7[-12],r8
80004702:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80004706:	ef 58 ff fc 	st.h	r7[-4],r8
8000470a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000470e:	11 88       	ld.ub	r8,r8[0x0]
80004710:	58 08       	cp.w	r8,0
80004712:	e0 80 01 a4 	breq	80004a5a <et024006_PrintString+0x37e>
80004716:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000471a:	ef 48 ff f8 	st.w	r7[-8],r8
8000471e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004722:	11 88       	ld.ub	r8,r8[0x0]
80004724:	ef 68 ff f5 	st.b	r7[-11],r8
80004728:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000472c:	2f f8       	sub	r8,-1
8000472e:	ef 48 ff f8 	st.w	r7[-8],r8
80004732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004736:	11 88       	ld.ub	r8,r8[0x0]
80004738:	ef 68 ff f6 	st.b	r7[-10],r8
8000473c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004740:	2f f8       	sub	r8,-1
80004742:	ef 48 ff f8 	st.w	r7[-8],r8
80004746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000474a:	11 88       	ld.ub	r8,r8[0x0]
8000474c:	ef 68 ff f7 	st.b	r7[-9],r8
80004750:	6c 08       	ld.w	r8,r6[0x0]
80004752:	5b f8       	cp.w	r8,-1
80004754:	e0 81 00 c8 	brne	800048e4 <et024006_PrintString+0x208>
80004758:	e0 69 00 ef 	mov	r9,239
8000475c:	e0 6a 01 3f 	mov	r10,319
80004760:	30 0b       	mov	r11,0
80004762:	30 0c       	mov	r12,0
80004764:	f0 1f 00 c0 	mcall	80004a64 <et024006_PrintString+0x388>
80004768:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000476c:	11 89       	ld.ub	r9,r8[0x0]
8000476e:	30 a8       	mov	r8,10
80004770:	f0 09 18 00 	cp.b	r9,r8
80004774:	c1 31       	brne	8000479a <et024006_PrintString+0xbe>
80004776:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000477a:	ef 58 ff e4 	st.h	r7[-28],r8
8000477e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004782:	ef 09 ff e0 	ld.sh	r9,r7[-32]
80004786:	f2 08 00 08 	add	r8,r9,r8
8000478a:	ef 58 ff e0 	st.h	r7[-32],r8
8000478e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004792:	2f f8       	sub	r8,-1
80004794:	ef 48 ff ec 	st.w	r7[-20],r8
80004798:	c9 f8       	rjmp	800048d6 <et024006_PrintString+0x1fa>
8000479a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000479e:	11 89       	ld.ub	r9,r8[0x0]
800047a0:	30 98       	mov	r8,9
800047a2:	f0 09 18 00 	cp.b	r9,r8
800047a6:	c0 f1       	brne	800047c4 <et024006_PrintString+0xe8>
800047a8:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800047ac:	ef 09 ff e4 	ld.sh	r9,r7[-28]
800047b0:	f2 08 00 08 	add	r8,r9,r8
800047b4:	ef 58 ff e4 	st.h	r7[-28],r8
800047b8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047bc:	2f f8       	sub	r8,-1
800047be:	ef 48 ff ec 	st.w	r7[-20],r8
800047c2:	c8 a8       	rjmp	800048d6 <et024006_PrintString+0x1fa>
800047c4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047c8:	11 89       	ld.ub	r9,r8[0x0]
800047ca:	31 f8       	mov	r8,31
800047cc:	f0 09 18 00 	cp.b	r9,r8
800047d0:	e0 88 00 1d 	brls	8000480a <et024006_PrintString+0x12e>
800047d4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047d8:	11 88       	ld.ub	r8,r8[0x0]
800047da:	10 99       	mov	r9,r8
800047dc:	30 08       	mov	r8,0
800047de:	f0 09 18 00 	cp.b	r9,r8
800047e2:	c1 45       	brlt	8000480a <et024006_PrintString+0x12e>
800047e4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800047e8:	ef 3a ff f7 	ld.ub	r10,r7[-9]
800047ec:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047f0:	11 88       	ld.ub	r8,r8[0x0]
800047f2:	22 08       	sub	r8,32
800047f4:	f4 08 02 48 	mul	r8,r10,r8
800047f8:	f2 08 00 08 	add	r8,r9,r8
800047fc:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004800:	f2 08 00 08 	add	r8,r9,r8
80004804:	ef 48 ff f8 	st.w	r7[-8],r8
80004808:	c1 28       	rjmp	8000482c <et024006_PrintString+0x150>
8000480a:	ef 3a ff f7 	ld.ub	r10,r7[-9]
8000480e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80004812:	12 98       	mov	r8,r9
80004814:	a1 78       	lsl	r8,0x1
80004816:	12 08       	add	r8,r9
80004818:	a5 78       	lsl	r8,0x5
8000481a:	12 18       	sub	r8,r9
8000481c:	f4 08 00 08 	add	r8,r10,r8
80004820:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004824:	f2 08 00 08 	add	r8,r9,r8
80004828:	ef 48 ff f8 	st.w	r7[-8],r8
8000482c:	ef 08 ff e0 	ld.sh	r8,r7[-32]
80004830:	ef 58 ff f0 	st.h	r7[-16],r8
80004834:	c3 a8       	rjmp	800048a8 <et024006_PrintString+0x1cc>
80004836:	38 08       	mov	r8,-128
80004838:	ef 68 ff f4 	st.b	r7[-12],r8
8000483c:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80004840:	ef 58 ff f2 	st.h	r7[-14],r8
80004844:	c1 e8       	rjmp	80004880 <et024006_PrintString+0x1a4>
80004846:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000484a:	11 89       	ld.ub	r9,r8[0x0]
8000484c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004850:	f3 e8 00 08 	and	r8,r9,r8
80004854:	5c 58       	castu.b	r8
80004856:	c0 b0       	breq	8000486c <et024006_PrintString+0x190>
80004858:	ef 1a ff dc 	ld.uh	r10,r7[-36]
8000485c:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80004860:	ef 18 ff f2 	ld.uh	r8,r7[-14]
80004864:	12 9b       	mov	r11,r9
80004866:	10 9c       	mov	r12,r8
80004868:	f0 1f 00 80 	mcall	80004a68 <et024006_PrintString+0x38c>
8000486c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004870:	a1 98       	lsr	r8,0x1
80004872:	ef 68 ff f4 	st.b	r7[-12],r8
80004876:	ef 08 ff f2 	ld.sh	r8,r7[-14]
8000487a:	2f f8       	sub	r8,-1
8000487c:	ef 58 ff f2 	st.h	r7[-14],r8
80004880:	ef 19 ff f2 	ld.uh	r9,r7[-14]
80004884:	ef 1a ff e4 	ld.uh	r10,r7[-28]
80004888:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000488c:	f4 08 00 08 	add	r8,r10,r8
80004890:	10 39       	cp.w	r9,r8
80004892:	cd a5       	brlt	80004846 <et024006_PrintString+0x16a>
80004894:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004898:	2f f8       	sub	r8,-1
8000489a:	ef 48 ff f8 	st.w	r7[-8],r8
8000489e:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800048a2:	2f f8       	sub	r8,-1
800048a4:	ef 58 ff f0 	st.h	r7[-16],r8
800048a8:	ef 19 ff f0 	ld.uh	r9,r7[-16]
800048ac:	ef 1a ff e0 	ld.uh	r10,r7[-32]
800048b0:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800048b4:	f4 08 00 08 	add	r8,r10,r8
800048b8:	10 39       	cp.w	r9,r8
800048ba:	cb e5       	brlt	80004836 <et024006_PrintString+0x15a>
800048bc:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800048c0:	ef 09 ff e4 	ld.sh	r9,r7[-28]
800048c4:	f2 08 00 08 	add	r8,r9,r8
800048c8:	ef 58 ff e4 	st.h	r7[-28],r8
800048cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800048d0:	2f f8       	sub	r8,-1
800048d2:	ef 48 ff ec 	st.w	r7[-20],r8
800048d6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800048da:	11 88       	ld.ub	r8,r8[0x0]
800048dc:	58 08       	cp.w	r8,0
800048de:	fe 91 ff 45 	brne	80004768 <et024006_PrintString+0x8c>
800048e2:	cb d8       	rjmp	80004a5c <et024006_PrintString+0x380>
800048e4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800048e8:	11 89       	ld.ub	r9,r8[0x0]
800048ea:	30 a8       	mov	r8,10
800048ec:	f0 09 18 00 	cp.b	r9,r8
800048f0:	c1 31       	brne	80004916 <et024006_PrintString+0x23a>
800048f2:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800048f6:	ef 58 ff e4 	st.h	r7[-28],r8
800048fa:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800048fe:	ef 09 ff e0 	ld.sh	r9,r7[-32]
80004902:	f2 08 00 08 	add	r8,r9,r8
80004906:	ef 58 ff e0 	st.h	r7[-32],r8
8000490a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000490e:	2f f8       	sub	r8,-1
80004910:	ef 48 ff ec 	st.w	r7[-20],r8
80004914:	c9 c8       	rjmp	80004a4c <et024006_PrintString+0x370>
80004916:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000491a:	11 89       	ld.ub	r9,r8[0x0]
8000491c:	30 98       	mov	r8,9
8000491e:	f0 09 18 00 	cp.b	r9,r8
80004922:	c0 f1       	brne	80004940 <et024006_PrintString+0x264>
80004924:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004928:	ef 09 ff e4 	ld.sh	r9,r7[-28]
8000492c:	f2 08 00 08 	add	r8,r9,r8
80004930:	ef 58 ff e4 	st.h	r7[-28],r8
80004934:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004938:	2f f8       	sub	r8,-1
8000493a:	ef 48 ff ec 	st.w	r7[-20],r8
8000493e:	c8 78       	rjmp	80004a4c <et024006_PrintString+0x370>
80004940:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80004944:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80004948:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000494c:	11 88       	ld.ub	r8,r8[0x0]
8000494e:	22 08       	sub	r8,32
80004950:	f4 08 02 48 	mul	r8,r10,r8
80004954:	f2 08 00 08 	add	r8,r9,r8
80004958:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000495c:	f2 08 00 08 	add	r8,r9,r8
80004960:	ef 48 ff f8 	st.w	r7[-8],r8
80004964:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004968:	ef 09 ff e0 	ld.sh	r9,r7[-32]
8000496c:	f2 08 00 08 	add	r8,r9,r8
80004970:	5c 88       	casts.h	r8
80004972:	20 18       	sub	r8,1
80004974:	5c 88       	casts.h	r8
80004976:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
8000497a:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000497e:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004982:	f2 08 00 08 	add	r8,r9,r8
80004986:	5c 88       	casts.h	r8
80004988:	20 18       	sub	r8,1
8000498a:	5c 88       	casts.h	r8
8000498c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80004990:	ef 1b ff e0 	ld.uh	r11,r7[-32]
80004994:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80004998:	18 99       	mov	r9,r12
8000499a:	10 9c       	mov	r12,r8
8000499c:	f0 1f 00 32 	mcall	80004a64 <et024006_PrintString+0x388>
800049a0:	32 28       	mov	r8,34
800049a2:	ef 68 ff ff 	st.b	r7[-1],r8
800049a6:	fc 19 c0 00 	movh	r9,0xc000
800049aa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800049ae:	b2 08       	st.h	r9[0x0],r8
800049b0:	30 08       	mov	r8,0
800049b2:	ef 58 ff f0 	st.h	r7[-16],r8
800049b6:	c3 78       	rjmp	80004a24 <et024006_PrintString+0x348>
800049b8:	38 08       	mov	r8,-128
800049ba:	ef 68 ff f4 	st.b	r7[-12],r8
800049be:	30 08       	mov	r8,0
800049c0:	ef 58 ff f2 	st.h	r7[-14],r8
800049c4:	c1 f8       	rjmp	80004a02 <et024006_PrintString+0x326>
800049c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049ca:	11 89       	ld.ub	r9,r8[0x0]
800049cc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800049d0:	f3 e8 00 08 	and	r8,r9,r8
800049d4:	5c 58       	castu.b	r8
800049d6:	c0 70       	breq	800049e4 <et024006_PrintString+0x308>
800049d8:	fc 19 c0 20 	movh	r9,0xc020
800049dc:	ef 08 ff dc 	ld.sh	r8,r7[-36]
800049e0:	b2 08       	st.h	r9[0x0],r8
800049e2:	c0 68       	rjmp	800049ee <et024006_PrintString+0x312>
800049e4:	fc 19 c0 20 	movh	r9,0xc020
800049e8:	6c 08       	ld.w	r8,r6[0x0]
800049ea:	5c 88       	casts.h	r8
800049ec:	b2 08       	st.h	r9[0x0],r8
800049ee:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800049f2:	a1 98       	lsr	r8,0x1
800049f4:	ef 68 ff f4 	st.b	r7[-12],r8
800049f8:	ef 08 ff f2 	ld.sh	r8,r7[-14]
800049fc:	2f f8       	sub	r8,-1
800049fe:	ef 58 ff f2 	st.h	r7[-14],r8
80004a02:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004a06:	ef 09 ff f2 	ld.sh	r9,r7[-14]
80004a0a:	f0 09 19 00 	cp.h	r9,r8
80004a0e:	cd c3       	brcs	800049c6 <et024006_PrintString+0x2ea>
80004a10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a14:	2f f8       	sub	r8,-1
80004a16:	ef 48 ff f8 	st.w	r7[-8],r8
80004a1a:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004a1e:	2f f8       	sub	r8,-1
80004a20:	ef 58 ff f0 	st.h	r7[-16],r8
80004a24:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004a28:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80004a2c:	f0 09 19 00 	cp.h	r9,r8
80004a30:	cc 43       	brcs	800049b8 <et024006_PrintString+0x2dc>
80004a32:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004a36:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004a3a:	f2 08 00 08 	add	r8,r9,r8
80004a3e:	ef 58 ff e4 	st.h	r7[-28],r8
80004a42:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004a46:	2f f8       	sub	r8,-1
80004a48:	ef 48 ff ec 	st.w	r7[-20],r8
80004a4c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004a50:	11 88       	ld.ub	r8,r8[0x0]
80004a52:	58 08       	cp.w	r8,0
80004a54:	fe 91 ff 48 	brne	800048e4 <et024006_PrintString+0x208>
80004a58:	c0 28       	rjmp	80004a5c <et024006_PrintString+0x380>
80004a5a:	d7 03       	nop
80004a5c:	2f 7d       	sub	sp,-36
80004a5e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004a62:	00 00       	add	r0,r0
80004a64:	80 00       	ld.sh	r0,r0[0x0]
80004a66:	4a da       	lddpc	r10,80004b18 <et024006_SetLimits+0x3e>
80004a68:	80 00       	ld.sh	r0,r0[0x0]
80004a6a:	4c e4       	lddpc	r4,80004ba0 <et024006_SetLimits+0xc6>

80004a6c <et024006_SetRegister>:
80004a6c:	eb cd 40 80 	pushm	r7,lr
80004a70:	1a 97       	mov	r7,sp
80004a72:	20 3d       	sub	sp,12
80004a74:	18 99       	mov	r9,r12
80004a76:	16 98       	mov	r8,r11
80004a78:	ef 69 ff f8 	st.b	r7[-8],r9
80004a7c:	ef 68 ff f4 	st.b	r7[-12],r8
80004a80:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004a84:	ef 68 ff fd 	st.b	r7[-3],r8
80004a88:	fc 19 c0 00 	movh	r9,0xc000
80004a8c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004a90:	b2 08       	st.h	r9[0x0],r8
80004a92:	fc 18 c0 20 	movh	r8,0xc020
80004a96:	90 08       	ld.sh	r8,r8[0x0]
80004a98:	5c 88       	casts.h	r8
80004a9a:	5c 58       	castu.b	r8
80004a9c:	ef 68 ff fc 	st.b	r7[-4],r8
80004aa0:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004aa4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004aa8:	f3 e8 10 08 	or	r8,r9,r8
80004aac:	ef 68 ff fc 	st.b	r7[-4],r8
80004ab0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004ab4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80004ab8:	ef 69 ff ff 	st.b	r7[-1],r9
80004abc:	ef 68 ff fe 	st.b	r7[-2],r8
80004ac0:	fc 19 c0 00 	movh	r9,0xc000
80004ac4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004ac8:	b2 08       	st.h	r9[0x0],r8
80004aca:	fc 19 c0 20 	movh	r9,0xc020
80004ace:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004ad2:	b2 08       	st.h	r9[0x0],r8
80004ad4:	2f dd       	sub	sp,-12
80004ad6:	e3 cd 80 80 	ldm	sp++,r7,pc

80004ada <et024006_SetLimits>:
80004ada:	eb cd 40 80 	pushm	r7,lr
80004ade:	1a 97       	mov	r7,sp
80004ae0:	20 8d       	sub	sp,32
80004ae2:	12 98       	mov	r8,r9
80004ae4:	18 99       	mov	r9,r12
80004ae6:	ef 59 ff ec 	st.h	r7[-20],r9
80004aea:	16 99       	mov	r9,r11
80004aec:	ef 59 ff e8 	st.h	r7[-24],r9
80004af0:	14 99       	mov	r9,r10
80004af2:	ef 59 ff e4 	st.h	r7[-28],r9
80004af6:	ef 58 ff e0 	st.h	r7[-32],r8
80004afa:	ef 18 ff ec 	ld.uh	r8,r7[-20]
80004afe:	a9 88       	lsr	r8,0x8
80004b00:	5c 88       	casts.h	r8
80004b02:	5c 58       	castu.b	r8
80004b04:	30 29       	mov	r9,2
80004b06:	ef 69 ff f1 	st.b	r7[-15],r9
80004b0a:	ef 68 ff f0 	st.b	r7[-16],r8
80004b0e:	fc 19 c0 00 	movh	r9,0xc000
80004b12:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80004b16:	b2 08       	st.h	r9[0x0],r8
80004b18:	fc 19 c0 20 	movh	r9,0xc020
80004b1c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80004b20:	b2 08       	st.h	r9[0x0],r8
80004b22:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80004b26:	5c 58       	castu.b	r8
80004b28:	30 39       	mov	r9,3
80004b2a:	ef 69 ff f3 	st.b	r7[-13],r9
80004b2e:	ef 68 ff f2 	st.b	r7[-14],r8
80004b32:	fc 19 c0 00 	movh	r9,0xc000
80004b36:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80004b3a:	b2 08       	st.h	r9[0x0],r8
80004b3c:	fc 19 c0 20 	movh	r9,0xc020
80004b40:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80004b44:	b2 08       	st.h	r9[0x0],r8
80004b46:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80004b4a:	a9 88       	lsr	r8,0x8
80004b4c:	5c 88       	casts.h	r8
80004b4e:	5c 58       	castu.b	r8
80004b50:	30 49       	mov	r9,4
80004b52:	ef 69 ff f5 	st.b	r7[-11],r9
80004b56:	ef 68 ff f4 	st.b	r7[-12],r8
80004b5a:	fc 19 c0 00 	movh	r9,0xc000
80004b5e:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004b62:	b2 08       	st.h	r9[0x0],r8
80004b64:	fc 19 c0 20 	movh	r9,0xc020
80004b68:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004b6c:	b2 08       	st.h	r9[0x0],r8
80004b6e:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80004b72:	5c 58       	castu.b	r8
80004b74:	30 59       	mov	r9,5
80004b76:	ef 69 ff f7 	st.b	r7[-9],r9
80004b7a:	ef 68 ff f6 	st.b	r7[-10],r8
80004b7e:	fc 19 c0 00 	movh	r9,0xc000
80004b82:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004b86:	b2 08       	st.h	r9[0x0],r8
80004b88:	fc 19 c0 20 	movh	r9,0xc020
80004b8c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004b90:	b2 08       	st.h	r9[0x0],r8
80004b92:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80004b96:	a9 88       	lsr	r8,0x8
80004b98:	5c 88       	casts.h	r8
80004b9a:	5c 58       	castu.b	r8
80004b9c:	30 69       	mov	r9,6
80004b9e:	ef 69 ff f9 	st.b	r7[-7],r9
80004ba2:	ef 68 ff f8 	st.b	r7[-8],r8
80004ba6:	fc 19 c0 00 	movh	r9,0xc000
80004baa:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004bae:	b2 08       	st.h	r9[0x0],r8
80004bb0:	fc 19 c0 20 	movh	r9,0xc020
80004bb4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004bb8:	b2 08       	st.h	r9[0x0],r8
80004bba:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80004bbe:	5c 58       	castu.b	r8
80004bc0:	30 79       	mov	r9,7
80004bc2:	ef 69 ff fb 	st.b	r7[-5],r9
80004bc6:	ef 68 ff fa 	st.b	r7[-6],r8
80004bca:	fc 19 c0 00 	movh	r9,0xc000
80004bce:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004bd2:	b2 08       	st.h	r9[0x0],r8
80004bd4:	fc 19 c0 20 	movh	r9,0xc020
80004bd8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004bdc:	b2 08       	st.h	r9[0x0],r8
80004bde:	ef 18 ff e0 	ld.uh	r8,r7[-32]
80004be2:	a9 88       	lsr	r8,0x8
80004be4:	5c 88       	casts.h	r8
80004be6:	5c 58       	castu.b	r8
80004be8:	30 89       	mov	r9,8
80004bea:	ef 69 ff fd 	st.b	r7[-3],r9
80004bee:	ef 68 ff fc 	st.b	r7[-4],r8
80004bf2:	fc 19 c0 00 	movh	r9,0xc000
80004bf6:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004bfa:	b2 08       	st.h	r9[0x0],r8
80004bfc:	fc 19 c0 20 	movh	r9,0xc020
80004c00:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004c04:	b2 08       	st.h	r9[0x0],r8
80004c06:	ef 08 ff e0 	ld.sh	r8,r7[-32]
80004c0a:	5c 58       	castu.b	r8
80004c0c:	30 99       	mov	r9,9
80004c0e:	ef 69 ff ff 	st.b	r7[-1],r9
80004c12:	ef 68 ff fe 	st.b	r7[-2],r8
80004c16:	fc 19 c0 00 	movh	r9,0xc000
80004c1a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004c1e:	b2 08       	st.h	r9[0x0],r8
80004c20:	fc 19 c0 20 	movh	r9,0xc020
80004c24:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004c28:	b2 08       	st.h	r9[0x0],r8
80004c2a:	2f 8d       	sub	sp,-32
80004c2c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004c30 <et024006_SetQuickLimits>:
80004c30:	eb cd 40 80 	pushm	r7,lr
80004c34:	1a 97       	mov	r7,sp
80004c36:	20 4d       	sub	sp,16
80004c38:	18 99       	mov	r9,r12
80004c3a:	16 98       	mov	r8,r11
80004c3c:	ef 59 ff f4 	st.h	r7[-12],r9
80004c40:	ef 58 ff f0 	st.h	r7[-16],r8
80004c44:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80004c48:	a9 88       	lsr	r8,0x8
80004c4a:	5c 88       	casts.h	r8
80004c4c:	5c 58       	castu.b	r8
80004c4e:	30 29       	mov	r9,2
80004c50:	ef 69 ff f9 	st.b	r7[-7],r9
80004c54:	ef 68 ff f8 	st.b	r7[-8],r8
80004c58:	fc 19 c0 00 	movh	r9,0xc000
80004c5c:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004c60:	b2 08       	st.h	r9[0x0],r8
80004c62:	fc 19 c0 20 	movh	r9,0xc020
80004c66:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004c6a:	b2 08       	st.h	r9[0x0],r8
80004c6c:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80004c70:	5c 58       	castu.b	r8
80004c72:	30 39       	mov	r9,3
80004c74:	ef 69 ff fb 	st.b	r7[-5],r9
80004c78:	ef 68 ff fa 	st.b	r7[-6],r8
80004c7c:	fc 19 c0 00 	movh	r9,0xc000
80004c80:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004c84:	b2 08       	st.h	r9[0x0],r8
80004c86:	fc 19 c0 20 	movh	r9,0xc020
80004c8a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004c8e:	b2 08       	st.h	r9[0x0],r8
80004c90:	ef 18 ff f0 	ld.uh	r8,r7[-16]
80004c94:	a9 88       	lsr	r8,0x8
80004c96:	5c 88       	casts.h	r8
80004c98:	5c 58       	castu.b	r8
80004c9a:	30 69       	mov	r9,6
80004c9c:	ef 69 ff fd 	st.b	r7[-3],r9
80004ca0:	ef 68 ff fc 	st.b	r7[-4],r8
80004ca4:	fc 19 c0 00 	movh	r9,0xc000
80004ca8:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004cac:	b2 08       	st.h	r9[0x0],r8
80004cae:	fc 19 c0 20 	movh	r9,0xc020
80004cb2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004cb6:	b2 08       	st.h	r9[0x0],r8
80004cb8:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004cbc:	5c 58       	castu.b	r8
80004cbe:	30 79       	mov	r9,7
80004cc0:	ef 69 ff ff 	st.b	r7[-1],r9
80004cc4:	ef 68 ff fe 	st.b	r7[-2],r8
80004cc8:	fc 19 c0 00 	movh	r9,0xc000
80004ccc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004cd0:	b2 08       	st.h	r9[0x0],r8
80004cd2:	fc 19 c0 20 	movh	r9,0xc020
80004cd6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004cda:	b2 08       	st.h	r9[0x0],r8
80004cdc:	2f cd       	sub	sp,-16
80004cde:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ce2:	d7 03       	nop

80004ce4 <et024006_DrawQuickPixel>:
80004ce4:	eb cd 40 80 	pushm	r7,lr
80004ce8:	1a 97       	mov	r7,sp
80004cea:	20 4d       	sub	sp,16
80004cec:	16 99       	mov	r9,r11
80004cee:	14 98       	mov	r8,r10
80004cf0:	18 9a       	mov	r10,r12
80004cf2:	ef 5a ff f8 	st.h	r7[-8],r10
80004cf6:	ef 59 ff f4 	st.h	r7[-12],r9
80004cfa:	ef 58 ff f0 	st.h	r7[-16],r8
80004cfe:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80004d02:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80004d06:	12 9b       	mov	r11,r9
80004d08:	10 9c       	mov	r12,r8
80004d0a:	f0 1f 00 0a 	mcall	80004d30 <et024006_DrawQuickPixel+0x4c>
80004d0e:	32 28       	mov	r8,34
80004d10:	ef 68 ff ff 	st.b	r7[-1],r8
80004d14:	fc 19 c0 00 	movh	r9,0xc000
80004d18:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004d1c:	b2 08       	st.h	r9[0x0],r8
80004d1e:	fc 19 c0 20 	movh	r9,0xc020
80004d22:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004d26:	b2 08       	st.h	r9[0x0],r8
80004d28:	2f cd       	sub	sp,-16
80004d2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d2e:	00 00       	add	r0,r0
80004d30:	80 00       	ld.sh	r0,r0[0x0]
80004d32:	4c 30       	lddpc	r0,80004e3c <et024006_ResetDisplay+0x30>

80004d34 <et024006_DuplicatePixel>:
80004d34:	eb cd 40 80 	pushm	r7,lr
80004d38:	1a 97       	mov	r7,sp
80004d3a:	20 3d       	sub	sp,12
80004d3c:	18 98       	mov	r8,r12
80004d3e:	ef 4b ff f4 	st.w	r7[-12],r11
80004d42:	ef 58 ff f8 	st.h	r7[-8],r8
80004d46:	32 28       	mov	r8,34
80004d48:	ef 68 ff ff 	st.b	r7[-1],r8
80004d4c:	fc 19 c0 00 	movh	r9,0xc000
80004d50:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004d54:	b2 08       	st.h	r9[0x0],r8
80004d56:	c2 e8       	rjmp	80004db2 <et024006_DuplicatePixel+0x7e>
80004d58:	fc 19 c0 20 	movh	r9,0xc020
80004d5c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d60:	b2 08       	st.h	r9[0x0],r8
80004d62:	fc 19 c0 20 	movh	r9,0xc020
80004d66:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d6a:	b2 08       	st.h	r9[0x0],r8
80004d6c:	fc 19 c0 20 	movh	r9,0xc020
80004d70:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d74:	b2 08       	st.h	r9[0x0],r8
80004d76:	fc 19 c0 20 	movh	r9,0xc020
80004d7a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d7e:	b2 08       	st.h	r9[0x0],r8
80004d80:	fc 19 c0 20 	movh	r9,0xc020
80004d84:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d88:	b2 08       	st.h	r9[0x0],r8
80004d8a:	fc 19 c0 20 	movh	r9,0xc020
80004d8e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d92:	b2 08       	st.h	r9[0x0],r8
80004d94:	fc 19 c0 20 	movh	r9,0xc020
80004d98:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d9c:	b2 08       	st.h	r9[0x0],r8
80004d9e:	fc 19 c0 20 	movh	r9,0xc020
80004da2:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004da6:	b2 08       	st.h	r9[0x0],r8
80004da8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004dac:	20 88       	sub	r8,8
80004dae:	ef 48 ff f4 	st.w	r7[-12],r8
80004db2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004db6:	58 78       	cp.w	r8,7
80004db8:	fe 9b ff d0 	brhi	80004d58 <et024006_DuplicatePixel+0x24>
80004dbc:	c0 b8       	rjmp	80004dd2 <et024006_DuplicatePixel+0x9e>
80004dbe:	fc 19 c0 20 	movh	r9,0xc020
80004dc2:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004dc6:	b2 08       	st.h	r9[0x0],r8
80004dc8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004dcc:	20 18       	sub	r8,1
80004dce:	ef 48 ff f4 	st.w	r7[-12],r8
80004dd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004dd6:	58 08       	cp.w	r8,0
80004dd8:	cf 31       	brne	80004dbe <et024006_DuplicatePixel+0x8a>
80004dda:	2f dd       	sub	sp,-12
80004ddc:	e3 cd 80 80 	ldm	sp++,r7,pc

80004de0 <et024006_SetupInterface>:
80004de0:	eb cd 40 80 	pushm	r7,lr
80004de4:	1a 97       	mov	r7,sp
80004de6:	30 0c       	mov	r12,0
80004de8:	f0 1f 00 06 	mcall	80004e00 <et024006_SetupInterface+0x20>
80004dec:	30 2b       	mov	r11,2
80004dee:	30 9c       	mov	r12,9
80004df0:	f0 1f 00 05 	mcall	80004e04 <et024006_SetupInterface+0x24>
80004df4:	34 2c       	mov	r12,66
80004df6:	f0 1f 00 05 	mcall	80004e08 <et024006_SetupInterface+0x28>
80004dfa:	e3 cd 80 80 	ldm	sp++,r7,pc
80004dfe:	00 00       	add	r0,r0
80004e00:	80 00       	ld.sh	r0,r0[0x0]
80004e02:	8c 68       	ld.sh	r8,r6[0xc]
80004e04:	80 00       	ld.sh	r0,r0[0x0]
80004e06:	8b 58       	st.w	r5[0x14],r8
80004e08:	80 00       	ld.sh	r0,r0[0x0]
80004e0a:	8e da       	ld.uh	r10,r7[0xa]

80004e0c <et024006_ResetDisplay>:
80004e0c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80004e10:	1a 97       	mov	r7,sp
80004e12:	21 ad       	sub	sp,104
80004e14:	34 2c       	mov	r12,66
80004e16:	f0 1f 00 aa 	mcall	800050bc <et024006_ResetDisplay+0x2b0>
80004e1a:	fe f8 02 a6 	ld.w	r8,pc[678]
80004e1e:	70 08       	ld.w	r8,r8[0x0]
80004e20:	33 29       	mov	r9,50
80004e22:	ef 49 ff c4 	st.w	r7[-60],r9
80004e26:	ef 48 ff c0 	st.w	r7[-64],r8
80004e2a:	ee f8 ff c4 	ld.w	r8,r7[-60]
80004e2e:	ef 48 ff cc 	st.w	r7[-52],r8
80004e32:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004e36:	ef 48 ff c8 	st.w	r7[-56],r8
80004e3a:	ee fc ff cc 	ld.w	r12,r7[-52]
80004e3e:	ef 4c ff a4 	st.w	r7[-92],r12
80004e42:	30 0b       	mov	r11,0
80004e44:	ef 4b ff a0 	st.w	r7[-96],r11
80004e48:	ee f9 ff c8 	ld.w	r9,r7[-56]
80004e4c:	ef 49 ff 9c 	st.w	r7[-100],r9
80004e50:	30 08       	mov	r8,0
80004e52:	ef 48 ff 98 	st.w	r7[-104],r8
80004e56:	ee fa ff a0 	ld.w	r10,r7[-96]
80004e5a:	ee fc ff 9c 	ld.w	r12,r7[-100]
80004e5e:	b9 3a       	mul	r10,r12
80004e60:	ee f8 ff 98 	ld.w	r8,r7[-104]
80004e64:	ee fb ff a4 	ld.w	r11,r7[-92]
80004e68:	b7 38       	mul	r8,r11
80004e6a:	10 0a       	add	r10,r8
80004e6c:	ee fc ff a4 	ld.w	r12,r7[-92]
80004e70:	ee fb ff 9c 	ld.w	r11,r7[-100]
80004e74:	f8 0b 06 48 	mulu.d	r8,r12,r11
80004e78:	12 0a       	add	r10,r9
80004e7a:	14 99       	mov	r9,r10
80004e7c:	ee 7a 42 3f 	mov	r10,999999
80004e80:	30 0b       	mov	r11,0
80004e82:	f0 0a 00 0a 	add	r10,r8,r10
80004e86:	f2 0b 00 4b 	adc	r11,r9,r11
80004e8a:	ee 78 42 40 	mov	r8,1000000
80004e8e:	30 09       	mov	r9,0
80004e90:	f0 1f 00 8d 	mcall	800050c4 <et024006_ResetDisplay+0x2b8>
80004e94:	14 98       	mov	r8,r10
80004e96:	16 99       	mov	r9,r11
80004e98:	ef 48 ff d4 	st.w	r7[-44],r8
80004e9c:	ee c8 00 58 	sub	r8,r7,88
80004ea0:	ef 48 ff d0 	st.w	r7[-48],r8
80004ea4:	e1 b8 00 42 	mfsr	r8,0x108
80004ea8:	10 99       	mov	r9,r8
80004eaa:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004eae:	91 09       	st.w	r8[0x0],r9
80004eb0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004eb4:	70 09       	ld.w	r9,r8[0x0]
80004eb6:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004eba:	10 09       	add	r9,r8
80004ebc:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004ec0:	91 19       	st.w	r8[0x4],r9
80004ec2:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004ec6:	30 08       	mov	r8,0
80004ec8:	f3 68 00 08 	st.b	r9[8],r8
80004ecc:	ee c8 00 58 	sub	r8,r7,88
80004ed0:	ef 48 ff d8 	st.w	r7[-40],r8
80004ed4:	e1 b8 00 42 	mfsr	r8,0x108
80004ed8:	ef 48 ff dc 	st.w	r7[-36],r8
80004edc:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004ee0:	f1 39 00 08 	ld.ub	r9,r8[8]
80004ee4:	30 28       	mov	r8,2
80004ee6:	f0 09 18 00 	cp.b	r9,r8
80004eea:	c0 31       	brne	80004ef0 <et024006_ResetDisplay+0xe4>
80004eec:	30 08       	mov	r8,0
80004eee:	c4 38       	rjmp	80004f74 <et024006_ResetDisplay+0x168>
80004ef0:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004ef4:	f1 39 00 08 	ld.ub	r9,r8[8]
80004ef8:	30 18       	mov	r8,1
80004efa:	f0 09 18 00 	cp.b	r9,r8
80004efe:	c0 31       	brne	80004f04 <et024006_ResetDisplay+0xf8>
80004f00:	30 18       	mov	r8,1
80004f02:	c3 98       	rjmp	80004f74 <et024006_ResetDisplay+0x168>
80004f04:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f08:	70 09       	ld.w	r9,r8[0x0]
80004f0a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f0e:	70 18       	ld.w	r8,r8[0x4]
80004f10:	10 39       	cp.w	r9,r8
80004f12:	e0 88 00 1a 	brls	80004f46 <et024006_ResetDisplay+0x13a>
80004f16:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f1a:	70 08       	ld.w	r8,r8[0x0]
80004f1c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004f20:	10 39       	cp.w	r9,r8
80004f22:	c1 02       	brcc	80004f42 <et024006_ResetDisplay+0x136>
80004f24:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f28:	70 18       	ld.w	r8,r8[0x4]
80004f2a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004f2e:	10 39       	cp.w	r9,r8
80004f30:	e0 88 00 09 	brls	80004f42 <et024006_ResetDisplay+0x136>
80004f34:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004f38:	30 18       	mov	r8,1
80004f3a:	f3 68 00 08 	st.b	r9[8],r8
80004f3e:	30 18       	mov	r8,1
80004f40:	c1 a8       	rjmp	80004f74 <et024006_ResetDisplay+0x168>
80004f42:	30 08       	mov	r8,0
80004f44:	c1 88       	rjmp	80004f74 <et024006_ResetDisplay+0x168>
80004f46:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f4a:	70 08       	ld.w	r8,r8[0x0]
80004f4c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004f50:	10 39       	cp.w	r9,r8
80004f52:	c0 93       	brcs	80004f64 <et024006_ResetDisplay+0x158>
80004f54:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f58:	70 18       	ld.w	r8,r8[0x4]
80004f5a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004f5e:	10 39       	cp.w	r9,r8
80004f60:	e0 88 00 09 	brls	80004f72 <et024006_ResetDisplay+0x166>
80004f64:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004f68:	30 18       	mov	r8,1
80004f6a:	f3 68 00 08 	st.b	r9[8],r8
80004f6e:	30 18       	mov	r8,1
80004f70:	c0 28       	rjmp	80004f74 <et024006_ResetDisplay+0x168>
80004f72:	30 08       	mov	r8,0
80004f74:	58 08       	cp.w	r8,0
80004f76:	ca b0       	breq	80004ecc <et024006_ResetDisplay+0xc0>
80004f78:	34 2c       	mov	r12,66
80004f7a:	f0 1f 00 54 	mcall	800050c8 <et024006_ResetDisplay+0x2bc>
80004f7e:	4d 18       	lddpc	r8,800050c0 <et024006_ResetDisplay+0x2b4>
80004f80:	70 08       	ld.w	r8,r8[0x0]
80004f82:	30 59       	mov	r9,5
80004f84:	ef 49 ff e4 	st.w	r7[-28],r9
80004f88:	ef 48 ff e0 	st.w	r7[-32],r8
80004f8c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004f90:	ef 48 ff ec 	st.w	r7[-20],r8
80004f94:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004f98:	ef 48 ff e8 	st.w	r7[-24],r8
80004f9c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80004fa0:	30 01       	mov	r1,0
80004fa2:	ee f2 ff e8 	ld.w	r2,r7[-24]
80004fa6:	30 03       	mov	r3,0
80004fa8:	e2 02 02 4a 	mul	r10,r1,r2
80004fac:	e6 00 02 48 	mul	r8,r3,r0
80004fb0:	10 0a       	add	r10,r8
80004fb2:	e0 02 06 48 	mulu.d	r8,r0,r2
80004fb6:	12 0a       	add	r10,r9
80004fb8:	14 99       	mov	r9,r10
80004fba:	e0 6a 03 e7 	mov	r10,999
80004fbe:	30 0b       	mov	r11,0
80004fc0:	f0 0a 00 0a 	add	r10,r8,r10
80004fc4:	f2 0b 00 4b 	adc	r11,r9,r11
80004fc8:	e0 68 03 e8 	mov	r8,1000
80004fcc:	30 09       	mov	r9,0
80004fce:	f0 1f 00 3e 	mcall	800050c4 <et024006_ResetDisplay+0x2b8>
80004fd2:	14 98       	mov	r8,r10
80004fd4:	16 99       	mov	r9,r11
80004fd6:	ef 48 ff f4 	st.w	r7[-12],r8
80004fda:	ee c8 00 4c 	sub	r8,r7,76
80004fde:	ef 48 ff f0 	st.w	r7[-16],r8
80004fe2:	e1 b8 00 42 	mfsr	r8,0x108
80004fe6:	10 99       	mov	r9,r8
80004fe8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004fec:	91 09       	st.w	r8[0x0],r9
80004fee:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004ff2:	70 09       	ld.w	r9,r8[0x0]
80004ff4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ff8:	10 09       	add	r9,r8
80004ffa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004ffe:	91 19       	st.w	r8[0x4],r9
80005000:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005004:	30 08       	mov	r8,0
80005006:	f3 68 00 08 	st.b	r9[8],r8
8000500a:	ee c8 00 4c 	sub	r8,r7,76
8000500e:	ef 48 ff f8 	st.w	r7[-8],r8
80005012:	e1 b8 00 42 	mfsr	r8,0x108
80005016:	ef 48 ff fc 	st.w	r7[-4],r8
8000501a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000501e:	f1 39 00 08 	ld.ub	r9,r8[8]
80005022:	30 28       	mov	r8,2
80005024:	f0 09 18 00 	cp.b	r9,r8
80005028:	c0 31       	brne	8000502e <et024006_ResetDisplay+0x222>
8000502a:	30 08       	mov	r8,0
8000502c:	c4 38       	rjmp	800050b2 <et024006_ResetDisplay+0x2a6>
8000502e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005032:	f1 39 00 08 	ld.ub	r9,r8[8]
80005036:	30 18       	mov	r8,1
80005038:	f0 09 18 00 	cp.b	r9,r8
8000503c:	c0 31       	brne	80005042 <et024006_ResetDisplay+0x236>
8000503e:	30 18       	mov	r8,1
80005040:	c3 98       	rjmp	800050b2 <et024006_ResetDisplay+0x2a6>
80005042:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005046:	70 09       	ld.w	r9,r8[0x0]
80005048:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000504c:	70 18       	ld.w	r8,r8[0x4]
8000504e:	10 39       	cp.w	r9,r8
80005050:	e0 88 00 1a 	brls	80005084 <et024006_ResetDisplay+0x278>
80005054:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005058:	70 08       	ld.w	r8,r8[0x0]
8000505a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000505e:	10 39       	cp.w	r9,r8
80005060:	c1 02       	brcc	80005080 <et024006_ResetDisplay+0x274>
80005062:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005066:	70 18       	ld.w	r8,r8[0x4]
80005068:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000506c:	10 39       	cp.w	r9,r8
8000506e:	e0 88 00 09 	brls	80005080 <et024006_ResetDisplay+0x274>
80005072:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005076:	30 18       	mov	r8,1
80005078:	f3 68 00 08 	st.b	r9[8],r8
8000507c:	30 18       	mov	r8,1
8000507e:	c1 a8       	rjmp	800050b2 <et024006_ResetDisplay+0x2a6>
80005080:	30 08       	mov	r8,0
80005082:	c1 88       	rjmp	800050b2 <et024006_ResetDisplay+0x2a6>
80005084:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005088:	70 08       	ld.w	r8,r8[0x0]
8000508a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000508e:	10 39       	cp.w	r9,r8
80005090:	c0 93       	brcs	800050a2 <et024006_ResetDisplay+0x296>
80005092:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005096:	70 18       	ld.w	r8,r8[0x4]
80005098:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000509c:	10 39       	cp.w	r9,r8
8000509e:	e0 88 00 09 	brls	800050b0 <et024006_ResetDisplay+0x2a4>
800050a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800050a6:	30 18       	mov	r8,1
800050a8:	f3 68 00 08 	st.b	r9[8],r8
800050ac:	30 18       	mov	r8,1
800050ae:	c0 28       	rjmp	800050b2 <et024006_ResetDisplay+0x2a6>
800050b0:	30 08       	mov	r8,0
800050b2:	58 08       	cp.w	r8,0
800050b4:	ca b0       	breq	8000500a <et024006_ResetDisplay+0x1fe>
800050b6:	2e 6d       	sub	sp,-104
800050b8:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800050bc:	80 00       	ld.sh	r0,r0[0x0]
800050be:	8f 42       	st.w	r7[0x10],r2
800050c0:	00 00       	add	r0,r0
800050c2:	06 0c       	add	r12,r3
800050c4:	80 00       	ld.sh	r0,r0[0x0]
800050c6:	e6 64 80 00 	mov	r4,425984
800050ca:	8e da       	ld.uh	r10,r7[0xa]

800050cc <et024006_AdjustGamma>:
800050cc:	eb cd 40 80 	pushm	r7,lr
800050d0:	1a 97       	mov	r7,sp
800050d2:	20 6d       	sub	sp,24
800050d4:	34 68       	mov	r8,70
800050d6:	ef 68 ff e9 	st.b	r7[-23],r8
800050da:	39 48       	mov	r8,-108
800050dc:	ef 68 ff e8 	st.b	r7[-24],r8
800050e0:	fc 19 c0 00 	movh	r9,0xc000
800050e4:	ef 38 ff e9 	ld.ub	r8,r7[-23]
800050e8:	b2 08       	st.h	r9[0x0],r8
800050ea:	fc 19 c0 20 	movh	r9,0xc020
800050ee:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800050f2:	b2 08       	st.h	r9[0x0],r8
800050f4:	34 78       	mov	r8,71
800050f6:	ef 68 ff eb 	st.b	r7[-21],r8
800050fa:	34 18       	mov	r8,65
800050fc:	ef 68 ff ea 	st.b	r7[-22],r8
80005100:	fc 19 c0 00 	movh	r9,0xc000
80005104:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80005108:	b2 08       	st.h	r9[0x0],r8
8000510a:	fc 19 c0 20 	movh	r9,0xc020
8000510e:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80005112:	b2 08       	st.h	r9[0x0],r8
80005114:	34 88       	mov	r8,72
80005116:	ef 68 ff ed 	st.b	r7[-19],r8
8000511a:	30 08       	mov	r8,0
8000511c:	ef 68 ff ec 	st.b	r7[-20],r8
80005120:	fc 19 c0 00 	movh	r9,0xc000
80005124:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005128:	b2 08       	st.h	r9[0x0],r8
8000512a:	fc 19 c0 20 	movh	r9,0xc020
8000512e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005132:	b2 08       	st.h	r9[0x0],r8
80005134:	34 98       	mov	r8,73
80005136:	ef 68 ff ef 	st.b	r7[-17],r8
8000513a:	33 38       	mov	r8,51
8000513c:	ef 68 ff ee 	st.b	r7[-18],r8
80005140:	fc 19 c0 00 	movh	r9,0xc000
80005144:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80005148:	b2 08       	st.h	r9[0x0],r8
8000514a:	fc 19 c0 20 	movh	r9,0xc020
8000514e:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80005152:	b2 08       	st.h	r9[0x0],r8
80005154:	34 a8       	mov	r8,74
80005156:	ef 68 ff f1 	st.b	r7[-15],r8
8000515a:	32 58       	mov	r8,37
8000515c:	ef 68 ff f0 	st.b	r7[-16],r8
80005160:	fc 19 c0 00 	movh	r9,0xc000
80005164:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80005168:	b2 08       	st.h	r9[0x0],r8
8000516a:	fc 19 c0 20 	movh	r9,0xc020
8000516e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005172:	b2 08       	st.h	r9[0x0],r8
80005174:	34 b8       	mov	r8,75
80005176:	ef 68 ff f3 	st.b	r7[-13],r8
8000517a:	34 58       	mov	r8,69
8000517c:	ef 68 ff f2 	st.b	r7[-14],r8
80005180:	fc 19 c0 00 	movh	r9,0xc000
80005184:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80005188:	b2 08       	st.h	r9[0x0],r8
8000518a:	fc 19 c0 20 	movh	r9,0xc020
8000518e:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80005192:	b2 08       	st.h	r9[0x0],r8
80005194:	34 c8       	mov	r8,76
80005196:	ef 68 ff f5 	st.b	r7[-11],r8
8000519a:	34 48       	mov	r8,68
8000519c:	ef 68 ff f4 	st.b	r7[-12],r8
800051a0:	fc 19 c0 00 	movh	r9,0xc000
800051a4:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800051a8:	b2 08       	st.h	r9[0x0],r8
800051aa:	fc 19 c0 20 	movh	r9,0xc020
800051ae:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800051b2:	b2 08       	st.h	r9[0x0],r8
800051b4:	34 d8       	mov	r8,77
800051b6:	ef 68 ff f7 	st.b	r7[-9],r8
800051ba:	37 78       	mov	r8,119
800051bc:	ef 68 ff f6 	st.b	r7[-10],r8
800051c0:	fc 19 c0 00 	movh	r9,0xc000
800051c4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800051c8:	b2 08       	st.h	r9[0x0],r8
800051ca:	fc 19 c0 20 	movh	r9,0xc020
800051ce:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800051d2:	b2 08       	st.h	r9[0x0],r8
800051d4:	34 e8       	mov	r8,78
800051d6:	ef 68 ff f9 	st.b	r7[-7],r8
800051da:	31 28       	mov	r8,18
800051dc:	ef 68 ff f8 	st.b	r7[-8],r8
800051e0:	fc 19 c0 00 	movh	r9,0xc000
800051e4:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800051e8:	b2 08       	st.h	r9[0x0],r8
800051ea:	fc 19 c0 20 	movh	r9,0xc020
800051ee:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800051f2:	b2 08       	st.h	r9[0x0],r8
800051f4:	34 f8       	mov	r8,79
800051f6:	ef 68 ff fb 	st.b	r7[-5],r8
800051fa:	3c c8       	mov	r8,-52
800051fc:	ef 68 ff fa 	st.b	r7[-6],r8
80005200:	fc 19 c0 00 	movh	r9,0xc000
80005204:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005208:	b2 08       	st.h	r9[0x0],r8
8000520a:	fc 19 c0 20 	movh	r9,0xc020
8000520e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80005212:	b2 08       	st.h	r9[0x0],r8
80005214:	35 08       	mov	r8,80
80005216:	ef 68 ff fd 	st.b	r7[-3],r8
8000521a:	34 68       	mov	r8,70
8000521c:	ef 68 ff fc 	st.b	r7[-4],r8
80005220:	fc 19 c0 00 	movh	r9,0xc000
80005224:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005228:	b2 08       	st.h	r9[0x0],r8
8000522a:	fc 19 c0 20 	movh	r9,0xc020
8000522e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005232:	b2 08       	st.h	r9[0x0],r8
80005234:	35 18       	mov	r8,81
80005236:	ef 68 ff ff 	st.b	r7[-1],r8
8000523a:	38 28       	mov	r8,-126
8000523c:	ef 68 ff fe 	st.b	r7[-2],r8
80005240:	fc 19 c0 00 	movh	r9,0xc000
80005244:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005248:	b2 08       	st.h	r9[0x0],r8
8000524a:	fc 19 c0 20 	movh	r9,0xc020
8000524e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005252:	b2 08       	st.h	r9[0x0],r8
80005254:	2f ad       	sub	sp,-24
80005256:	e3 cd 80 80 	ldm	sp++,r7,pc

8000525a <et024006_GeneralSettings>:
8000525a:	eb cd 40 80 	pushm	r7,lr
8000525e:	1a 97       	mov	r7,sp
80005260:	20 8d       	sub	sp,32
80005262:	30 18       	mov	r8,1
80005264:	ef 68 ff e1 	st.b	r7[-31],r8
80005268:	30 68       	mov	r8,6
8000526a:	ef 68 ff e0 	st.b	r7[-32],r8
8000526e:	fc 19 c0 00 	movh	r9,0xc000
80005272:	ef 38 ff e1 	ld.ub	r8,r7[-31]
80005276:	b2 08       	st.h	r9[0x0],r8
80005278:	fc 19 c0 20 	movh	r9,0xc020
8000527c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80005280:	b2 08       	st.h	r9[0x0],r8
80005282:	33 a8       	mov	r8,58
80005284:	ef 68 ff e3 	st.b	r7[-29],r8
80005288:	30 18       	mov	r8,1
8000528a:	ef 68 ff e2 	st.b	r7[-30],r8
8000528e:	fc 19 c0 00 	movh	r9,0xc000
80005292:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80005296:	b2 08       	st.h	r9[0x0],r8
80005298:	fc 19 c0 20 	movh	r9,0xc020
8000529c:	ef 38 ff e2 	ld.ub	r8,r7[-30]
800052a0:	b2 08       	st.h	r9[0x0],r8
800052a2:	33 b8       	mov	r8,59
800052a4:	ef 68 ff e5 	st.b	r7[-27],r8
800052a8:	30 18       	mov	r8,1
800052aa:	ef 68 ff e4 	st.b	r7[-28],r8
800052ae:	fc 19 c0 00 	movh	r9,0xc000
800052b2:	ef 38 ff e5 	ld.ub	r8,r7[-27]
800052b6:	b2 08       	st.h	r9[0x0],r8
800052b8:	fc 19 c0 20 	movh	r9,0xc020
800052bc:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800052c0:	b2 08       	st.h	r9[0x0],r8
800052c2:	33 c8       	mov	r8,60
800052c4:	ef 68 ff e7 	st.b	r7[-25],r8
800052c8:	3f 08       	mov	r8,-16
800052ca:	ef 68 ff e6 	st.b	r7[-26],r8
800052ce:	fc 19 c0 00 	movh	r9,0xc000
800052d2:	ef 38 ff e7 	ld.ub	r8,r7[-25]
800052d6:	b2 08       	st.h	r9[0x0],r8
800052d8:	fc 19 c0 20 	movh	r9,0xc020
800052dc:	ef 38 ff e6 	ld.ub	r8,r7[-26]
800052e0:	b2 08       	st.h	r9[0x0],r8
800052e2:	33 d8       	mov	r8,61
800052e4:	ef 68 ff e9 	st.b	r7[-23],r8
800052e8:	30 08       	mov	r8,0
800052ea:	ef 68 ff e8 	st.b	r7[-24],r8
800052ee:	fc 19 c0 00 	movh	r9,0xc000
800052f2:	ef 38 ff e9 	ld.ub	r8,r7[-23]
800052f6:	b2 08       	st.h	r9[0x0],r8
800052f8:	fc 19 c0 20 	movh	r9,0xc020
800052fc:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80005300:	b2 08       	st.h	r9[0x0],r8
80005302:	33 e8       	mov	r8,62
80005304:	ef 68 ff eb 	st.b	r7[-21],r8
80005308:	33 88       	mov	r8,56
8000530a:	ef 68 ff ea 	st.b	r7[-22],r8
8000530e:	fc 19 c0 00 	movh	r9,0xc000
80005312:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80005316:	b2 08       	st.h	r9[0x0],r8
80005318:	fc 19 c0 20 	movh	r9,0xc020
8000531c:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80005320:	b2 08       	st.h	r9[0x0],r8
80005322:	34 08       	mov	r8,64
80005324:	ef 68 ff ed 	st.b	r7[-19],r8
80005328:	30 f8       	mov	r8,15
8000532a:	ef 68 ff ec 	st.b	r7[-20],r8
8000532e:	fc 19 c0 00 	movh	r9,0xc000
80005332:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005336:	b2 08       	st.h	r9[0x0],r8
80005338:	fc 19 c0 20 	movh	r9,0xc020
8000533c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005340:	b2 08       	st.h	r9[0x0],r8
80005342:	34 18       	mov	r8,65
80005344:	ef 68 ff ef 	st.b	r7[-17],r8
80005348:	3f 08       	mov	r8,-16
8000534a:	ef 68 ff ee 	st.b	r7[-18],r8
8000534e:	fc 19 c0 00 	movh	r9,0xc000
80005352:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80005356:	b2 08       	st.h	r9[0x0],r8
80005358:	fc 19 c0 20 	movh	r9,0xc020
8000535c:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80005360:	b2 08       	st.h	r9[0x0],r8
80005362:	32 78       	mov	r8,39
80005364:	ef 68 ff f1 	st.b	r7[-15],r8
80005368:	30 28       	mov	r8,2
8000536a:	ef 68 ff f0 	st.b	r7[-16],r8
8000536e:	fc 19 c0 00 	movh	r9,0xc000
80005372:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80005376:	b2 08       	st.h	r9[0x0],r8
80005378:	fc 19 c0 20 	movh	r9,0xc020
8000537c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005380:	b2 08       	st.h	r9[0x0],r8
80005382:	32 88       	mov	r8,40
80005384:	ef 68 ff f3 	st.b	r7[-13],r8
80005388:	30 28       	mov	r8,2
8000538a:	ef 68 ff f2 	st.b	r7[-14],r8
8000538e:	fc 19 c0 00 	movh	r9,0xc000
80005392:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80005396:	b2 08       	st.h	r9[0x0],r8
80005398:	fc 19 c0 20 	movh	r9,0xc020
8000539c:	ef 38 ff f2 	ld.ub	r8,r7[-14]
800053a0:	b2 08       	st.h	r9[0x0],r8
800053a2:	32 98       	mov	r8,41
800053a4:	ef 68 ff f5 	st.b	r7[-11],r8
800053a8:	30 28       	mov	r8,2
800053aa:	ef 68 ff f4 	st.b	r7[-12],r8
800053ae:	fc 19 c0 00 	movh	r9,0xc000
800053b2:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800053b6:	b2 08       	st.h	r9[0x0],r8
800053b8:	fc 19 c0 20 	movh	r9,0xc020
800053bc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800053c0:	b2 08       	st.h	r9[0x0],r8
800053c2:	32 a8       	mov	r8,42
800053c4:	ef 68 ff f7 	st.b	r7[-9],r8
800053c8:	30 28       	mov	r8,2
800053ca:	ef 68 ff f6 	st.b	r7[-10],r8
800053ce:	fc 19 c0 00 	movh	r9,0xc000
800053d2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800053d6:	b2 08       	st.h	r9[0x0],r8
800053d8:	fc 19 c0 20 	movh	r9,0xc020
800053dc:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800053e0:	b2 08       	st.h	r9[0x0],r8
800053e2:	32 c8       	mov	r8,44
800053e4:	ef 68 ff f9 	st.b	r7[-7],r8
800053e8:	30 28       	mov	r8,2
800053ea:	ef 68 ff f8 	st.b	r7[-8],r8
800053ee:	fc 19 c0 00 	movh	r9,0xc000
800053f2:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800053f6:	b2 08       	st.h	r9[0x0],r8
800053f8:	fc 19 c0 20 	movh	r9,0xc020
800053fc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005400:	b2 08       	st.h	r9[0x0],r8
80005402:	32 d8       	mov	r8,45
80005404:	ef 68 ff fb 	st.b	r7[-5],r8
80005408:	30 28       	mov	r8,2
8000540a:	ef 68 ff fa 	st.b	r7[-6],r8
8000540e:	fc 19 c0 00 	movh	r9,0xc000
80005412:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005416:	b2 08       	st.h	r9[0x0],r8
80005418:	fc 19 c0 20 	movh	r9,0xc020
8000541c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80005420:	b2 08       	st.h	r9[0x0],r8
80005422:	31 98       	mov	r8,25
80005424:	ef 68 ff fd 	st.b	r7[-3],r8
80005428:	34 98       	mov	r8,73
8000542a:	ef 68 ff fc 	st.b	r7[-4],r8
8000542e:	fc 19 c0 00 	movh	r9,0xc000
80005432:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005436:	b2 08       	st.h	r9[0x0],r8
80005438:	fc 19 c0 20 	movh	r9,0xc020
8000543c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005440:	b2 08       	st.h	r9[0x0],r8
80005442:	39 38       	mov	r8,-109
80005444:	ef 68 ff ff 	st.b	r7[-1],r8
80005448:	30 88       	mov	r8,8
8000544a:	ef 68 ff fe 	st.b	r7[-2],r8
8000544e:	fc 19 c0 00 	movh	r9,0xc000
80005452:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005456:	b2 08       	st.h	r9[0x0],r8
80005458:	fc 19 c0 20 	movh	r9,0xc020
8000545c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005460:	b2 08       	st.h	r9[0x0],r8
80005462:	2f 8d       	sub	sp,-32
80005464:	e3 cd 80 80 	ldm	sp++,r7,pc

80005468 <et024006_PowerSettings>:
80005468:	eb cd 40 80 	pushm	r7,lr
8000546c:	1a 97       	mov	r7,sp
8000546e:	20 6d       	sub	sp,24
80005470:	32 38       	mov	r8,35
80005472:	ef 68 ff e9 	st.b	r7[-23],r8
80005476:	39 58       	mov	r8,-107
80005478:	ef 68 ff e8 	st.b	r7[-24],r8
8000547c:	fc 19 c0 00 	movh	r9,0xc000
80005480:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80005484:	b2 08       	st.h	r9[0x0],r8
80005486:	fc 19 c0 20 	movh	r9,0xc020
8000548a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000548e:	b2 08       	st.h	r9[0x0],r8
80005490:	32 48       	mov	r8,36
80005492:	ef 68 ff eb 	st.b	r7[-21],r8
80005496:	39 58       	mov	r8,-107
80005498:	ef 68 ff ea 	st.b	r7[-22],r8
8000549c:	fc 19 c0 00 	movh	r9,0xc000
800054a0:	ef 38 ff eb 	ld.ub	r8,r7[-21]
800054a4:	b2 08       	st.h	r9[0x0],r8
800054a6:	fc 19 c0 20 	movh	r9,0xc020
800054aa:	ef 38 ff ea 	ld.ub	r8,r7[-22]
800054ae:	b2 08       	st.h	r9[0x0],r8
800054b0:	32 58       	mov	r8,37
800054b2:	ef 68 ff ed 	st.b	r7[-19],r8
800054b6:	3f f8       	mov	r8,-1
800054b8:	ef 68 ff ec 	st.b	r7[-20],r8
800054bc:	fc 19 c0 00 	movh	r9,0xc000
800054c0:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800054c4:	b2 08       	st.h	r9[0x0],r8
800054c6:	fc 19 c0 20 	movh	r9,0xc020
800054ca:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800054ce:	b2 08       	st.h	r9[0x0],r8
800054d0:	39 08       	mov	r8,-112
800054d2:	ef 68 ff ef 	st.b	r7[-17],r8
800054d6:	37 f8       	mov	r8,127
800054d8:	ef 68 ff ee 	st.b	r7[-18],r8
800054dc:	fc 19 c0 00 	movh	r9,0xc000
800054e0:	ef 38 ff ef 	ld.ub	r8,r7[-17]
800054e4:	b2 08       	st.h	r9[0x0],r8
800054e6:	fc 19 c0 20 	movh	r9,0xc020
800054ea:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800054ee:	b2 08       	st.h	r9[0x0],r8
800054f0:	33 58       	mov	r8,53
800054f2:	ef 68 ff f1 	st.b	r7[-15],r8
800054f6:	33 88       	mov	r8,56
800054f8:	ef 68 ff f0 	st.b	r7[-16],r8
800054fc:	fc 19 c0 00 	movh	r9,0xc000
80005500:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80005504:	b2 08       	st.h	r9[0x0],r8
80005506:	fc 19 c0 20 	movh	r9,0xc020
8000550a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000550e:	b2 08       	st.h	r9[0x0],r8
80005510:	33 68       	mov	r8,54
80005512:	ef 68 ff f3 	st.b	r7[-13],r8
80005516:	37 88       	mov	r8,120
80005518:	ef 68 ff f2 	st.b	r7[-14],r8
8000551c:	fc 19 c0 00 	movh	r9,0xc000
80005520:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80005524:	b2 08       	st.h	r9[0x0],r8
80005526:	fc 19 c0 20 	movh	r9,0xc020
8000552a:	ef 38 ff f2 	ld.ub	r8,r7[-14]
8000552e:	b2 08       	st.h	r9[0x0],r8
80005530:	31 d8       	mov	r8,29
80005532:	ef 68 ff f5 	st.b	r7[-11],r8
80005536:	30 78       	mov	r8,7
80005538:	ef 68 ff f4 	st.b	r7[-12],r8
8000553c:	fc 19 c0 00 	movh	r9,0xc000
80005540:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005544:	b2 08       	st.h	r9[0x0],r8
80005546:	fc 19 c0 20 	movh	r9,0xc020
8000554a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000554e:	b2 08       	st.h	r9[0x0],r8
80005550:	31 e8       	mov	r8,30
80005552:	ef 68 ff f7 	st.b	r7[-9],r8
80005556:	30 08       	mov	r8,0
80005558:	ef 68 ff f6 	st.b	r7[-10],r8
8000555c:	fc 19 c0 00 	movh	r9,0xc000
80005560:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005564:	b2 08       	st.h	r9[0x0],r8
80005566:	fc 19 c0 20 	movh	r9,0xc020
8000556a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000556e:	b2 08       	st.h	r9[0x0],r8
80005570:	31 f8       	mov	r8,31
80005572:	ef 68 ff f9 	st.b	r7[-7],r8
80005576:	30 48       	mov	r8,4
80005578:	ef 68 ff f8 	st.b	r7[-8],r8
8000557c:	fc 19 c0 00 	movh	r9,0xc000
80005580:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80005584:	b2 08       	st.h	r9[0x0],r8
80005586:	fc 19 c0 20 	movh	r9,0xc020
8000558a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000558e:	b2 08       	st.h	r9[0x0],r8
80005590:	32 08       	mov	r8,32
80005592:	ef 68 ff fb 	st.b	r7[-5],r8
80005596:	34 08       	mov	r8,64
80005598:	ef 68 ff fa 	st.b	r7[-6],r8
8000559c:	fc 19 c0 00 	movh	r9,0xc000
800055a0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800055a4:	b2 08       	st.h	r9[0x0],r8
800055a6:	fc 19 c0 20 	movh	r9,0xc020
800055aa:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800055ae:	b2 08       	st.h	r9[0x0],r8
800055b0:	34 48       	mov	r8,68
800055b2:	ef 68 ff fd 	st.b	r7[-3],r8
800055b6:	33 88       	mov	r8,56
800055b8:	ef 68 ff fc 	st.b	r7[-4],r8
800055bc:	fc 19 c0 00 	movh	r9,0xc000
800055c0:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800055c4:	b2 08       	st.h	r9[0x0],r8
800055c6:	fc 19 c0 20 	movh	r9,0xc020
800055ca:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800055ce:	b2 08       	st.h	r9[0x0],r8
800055d0:	34 58       	mov	r8,69
800055d2:	ef 68 ff ff 	st.b	r7[-1],r8
800055d6:	31 28       	mov	r8,18
800055d8:	ef 68 ff fe 	st.b	r7[-2],r8
800055dc:	fc 19 c0 00 	movh	r9,0xc000
800055e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800055e4:	b2 08       	st.h	r9[0x0],r8
800055e6:	fc 19 c0 20 	movh	r9,0xc020
800055ea:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800055ee:	b2 08       	st.h	r9[0x0],r8
800055f0:	2f ad       	sub	sp,-24
800055f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800055f6 <et024006_InterfaceSettings>:
800055f6:	eb cd 40 80 	pushm	r7,lr
800055fa:	1a 97       	mov	r7,sp
800055fc:	20 1d       	sub	sp,4
800055fe:	31 68       	mov	r8,22
80005600:	ef 68 ff ff 	st.b	r7[-1],r8
80005604:	36 88       	mov	r8,104
80005606:	ef 68 ff fe 	st.b	r7[-2],r8
8000560a:	fc 19 c0 00 	movh	r9,0xc000
8000560e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005612:	b2 08       	st.h	r9[0x0],r8
80005614:	fc 19 c0 20 	movh	r9,0xc020
80005618:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000561c:	b2 08       	st.h	r9[0x0],r8
8000561e:	2f fd       	sub	sp,-4
80005620:	e3 cd 80 80 	ldm	sp++,r7,pc

80005624 <et024006_PowerUp>:
80005624:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005628:	1a 97       	mov	r7,sp
8000562a:	fa cd 01 24 	sub	sp,sp,292
8000562e:	fe f8 07 22 	ld.w	r8,pc[1826]
80005632:	70 09       	ld.w	r9,r8[0x0]
80005634:	30 a8       	mov	r8,10
80005636:	ef 48 ff 54 	st.w	r7[-172],r8
8000563a:	ef 49 ff 50 	st.w	r7[-176],r9
8000563e:	ee f8 ff 54 	ld.w	r8,r7[-172]
80005642:	ef 48 ff 5c 	st.w	r7[-164],r8
80005646:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000564a:	ef 48 ff 58 	st.w	r7[-168],r8
8000564e:	ee f2 ff 5c 	ld.w	r2,r7[-164]
80005652:	30 03       	mov	r3,0
80005654:	ee fa ff 58 	ld.w	r10,r7[-168]
80005658:	30 0b       	mov	r11,0
8000565a:	e6 0a 02 49 	mul	r9,r3,r10
8000565e:	f6 02 02 48 	mul	r8,r11,r2
80005662:	10 09       	add	r9,r8
80005664:	e4 0a 06 4a 	mulu.d	r10,r2,r10
80005668:	16 09       	add	r9,r11
8000566a:	12 9b       	mov	r11,r9
8000566c:	e0 68 03 e7 	mov	r8,999
80005670:	30 09       	mov	r9,0
80005672:	10 0a       	add	r10,r8
80005674:	f6 09 00 4b 	adc	r11,r11,r9
80005678:	e0 68 03 e8 	mov	r8,1000
8000567c:	30 09       	mov	r9,0
8000567e:	f0 1f 01 b6 	mcall	80005d54 <et024006_PowerUp+0x730>
80005682:	14 98       	mov	r8,r10
80005684:	16 99       	mov	r9,r11
80005686:	ef 48 ff 64 	st.w	r7[-156],r8
8000568a:	ee c8 00 ec 	sub	r8,r7,236
8000568e:	ef 48 ff 60 	st.w	r7[-160],r8
80005692:	e1 b8 00 42 	mfsr	r8,0x108
80005696:	10 99       	mov	r9,r8
80005698:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000569c:	91 09       	st.w	r8[0x0],r9
8000569e:	ee f8 ff 60 	ld.w	r8,r7[-160]
800056a2:	70 09       	ld.w	r9,r8[0x0]
800056a4:	ee f8 ff 64 	ld.w	r8,r7[-156]
800056a8:	10 09       	add	r9,r8
800056aa:	ee f8 ff 60 	ld.w	r8,r7[-160]
800056ae:	91 19       	st.w	r8[0x4],r9
800056b0:	ee f9 ff 60 	ld.w	r9,r7[-160]
800056b4:	30 08       	mov	r8,0
800056b6:	f3 68 00 08 	st.b	r9[8],r8
800056ba:	ee c8 00 ec 	sub	r8,r7,236
800056be:	ef 48 ff 68 	st.w	r7[-152],r8
800056c2:	e1 b8 00 42 	mfsr	r8,0x108
800056c6:	ef 48 ff 6c 	st.w	r7[-148],r8
800056ca:	ee f8 ff 68 	ld.w	r8,r7[-152]
800056ce:	f1 39 00 08 	ld.ub	r9,r8[8]
800056d2:	30 28       	mov	r8,2
800056d4:	f0 09 18 00 	cp.b	r9,r8
800056d8:	c0 31       	brne	800056de <et024006_PowerUp+0xba>
800056da:	30 08       	mov	r8,0
800056dc:	c4 38       	rjmp	80005762 <et024006_PowerUp+0x13e>
800056de:	ee f8 ff 68 	ld.w	r8,r7[-152]
800056e2:	f1 39 00 08 	ld.ub	r9,r8[8]
800056e6:	30 18       	mov	r8,1
800056e8:	f0 09 18 00 	cp.b	r9,r8
800056ec:	c0 31       	brne	800056f2 <et024006_PowerUp+0xce>
800056ee:	30 18       	mov	r8,1
800056f0:	c3 98       	rjmp	80005762 <et024006_PowerUp+0x13e>
800056f2:	ee f8 ff 68 	ld.w	r8,r7[-152]
800056f6:	70 09       	ld.w	r9,r8[0x0]
800056f8:	ee f8 ff 68 	ld.w	r8,r7[-152]
800056fc:	70 18       	ld.w	r8,r8[0x4]
800056fe:	10 39       	cp.w	r9,r8
80005700:	e0 88 00 1a 	brls	80005734 <et024006_PowerUp+0x110>
80005704:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005708:	70 09       	ld.w	r9,r8[0x0]
8000570a:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000570e:	12 38       	cp.w	r8,r9
80005710:	c1 02       	brcc	80005730 <et024006_PowerUp+0x10c>
80005712:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005716:	70 19       	ld.w	r9,r8[0x4]
80005718:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000571c:	12 38       	cp.w	r8,r9
8000571e:	e0 88 00 09 	brls	80005730 <et024006_PowerUp+0x10c>
80005722:	ee f9 ff 68 	ld.w	r9,r7[-152]
80005726:	30 18       	mov	r8,1
80005728:	f3 68 00 08 	st.b	r9[8],r8
8000572c:	30 18       	mov	r8,1
8000572e:	c1 a8       	rjmp	80005762 <et024006_PowerUp+0x13e>
80005730:	30 08       	mov	r8,0
80005732:	c1 88       	rjmp	80005762 <et024006_PowerUp+0x13e>
80005734:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005738:	70 09       	ld.w	r9,r8[0x0]
8000573a:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000573e:	12 38       	cp.w	r8,r9
80005740:	c0 93       	brcs	80005752 <et024006_PowerUp+0x12e>
80005742:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005746:	70 19       	ld.w	r9,r8[0x4]
80005748:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000574c:	12 38       	cp.w	r8,r9
8000574e:	e0 88 00 09 	brls	80005760 <et024006_PowerUp+0x13c>
80005752:	ee f9 ff 68 	ld.w	r9,r7[-152]
80005756:	30 18       	mov	r8,1
80005758:	f3 68 00 08 	st.b	r9[8],r8
8000575c:	30 18       	mov	r8,1
8000575e:	c0 28       	rjmp	80005762 <et024006_PowerUp+0x13e>
80005760:	30 08       	mov	r8,0
80005762:	58 08       	cp.w	r8,0
80005764:	ca b0       	breq	800056ba <et024006_PowerUp+0x96>
80005766:	31 c8       	mov	r8,28
80005768:	ef 68 ff 73 	st.b	r7[-141],r8
8000576c:	30 48       	mov	r8,4
8000576e:	ef 68 ff 72 	st.b	r7[-142],r8
80005772:	fc 19 c0 00 	movh	r9,0xc000
80005776:	ef 38 ff 73 	ld.ub	r8,r7[-141]
8000577a:	b2 08       	st.h	r9[0x0],r8
8000577c:	fc 19 c0 20 	movh	r9,0xc020
80005780:	ef 38 ff 72 	ld.ub	r8,r7[-142]
80005784:	b2 08       	st.h	r9[0x0],r8
80005786:	fe f8 05 ca 	ld.w	r8,pc[1482]
8000578a:	70 09       	ld.w	r9,r8[0x0]
8000578c:	31 48       	mov	r8,20
8000578e:	ef 48 ff 78 	st.w	r7[-136],r8
80005792:	ef 49 ff 74 	st.w	r7[-140],r9
80005796:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000579a:	ef 48 ff 80 	st.w	r7[-128],r8
8000579e:	ee f8 ff 74 	ld.w	r8,r7[-140]
800057a2:	ef 48 ff 7c 	st.w	r7[-132],r8
800057a6:	ee fc ff 80 	ld.w	r12,r7[-128]
800057aa:	ef 4c fe e0 	st.w	r7[-288],r12
800057ae:	30 0b       	mov	r11,0
800057b0:	ef 4b fe dc 	st.w	r7[-292],r11
800057b4:	ee f0 ff 7c 	ld.w	r0,r7[-132]
800057b8:	30 01       	mov	r1,0
800057ba:	ee f9 fe dc 	ld.w	r9,r7[-292]
800057be:	a1 39       	mul	r9,r0
800057c0:	ee fa fe e0 	ld.w	r10,r7[-288]
800057c4:	e2 0a 02 48 	mul	r8,r1,r10
800057c8:	10 09       	add	r9,r8
800057ca:	ee f8 fe e0 	ld.w	r8,r7[-288]
800057ce:	f0 00 06 4a 	mulu.d	r10,r8,r0
800057d2:	16 09       	add	r9,r11
800057d4:	12 9b       	mov	r11,r9
800057d6:	e0 68 03 e7 	mov	r8,999
800057da:	30 09       	mov	r9,0
800057dc:	10 0a       	add	r10,r8
800057de:	f6 09 00 4b 	adc	r11,r11,r9
800057e2:	e0 68 03 e8 	mov	r8,1000
800057e6:	30 09       	mov	r9,0
800057e8:	f0 1f 01 5b 	mcall	80005d54 <et024006_PowerUp+0x730>
800057ec:	14 98       	mov	r8,r10
800057ee:	16 99       	mov	r9,r11
800057f0:	ef 48 ff 88 	st.w	r7[-120],r8
800057f4:	ee c8 00 e0 	sub	r8,r7,224
800057f8:	ef 48 ff 84 	st.w	r7[-124],r8
800057fc:	e1 b8 00 42 	mfsr	r8,0x108
80005800:	10 99       	mov	r9,r8
80005802:	ee f8 ff 84 	ld.w	r8,r7[-124]
80005806:	91 09       	st.w	r8[0x0],r9
80005808:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000580c:	70 09       	ld.w	r9,r8[0x0]
8000580e:	ee f8 ff 88 	ld.w	r8,r7[-120]
80005812:	10 09       	add	r9,r8
80005814:	ee f8 ff 84 	ld.w	r8,r7[-124]
80005818:	91 19       	st.w	r8[0x4],r9
8000581a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000581e:	30 08       	mov	r8,0
80005820:	f3 68 00 08 	st.b	r9[8],r8
80005824:	ee c8 00 e0 	sub	r8,r7,224
80005828:	ef 48 ff 8c 	st.w	r7[-116],r8
8000582c:	e1 b8 00 42 	mfsr	r8,0x108
80005830:	ef 48 ff 90 	st.w	r7[-112],r8
80005834:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005838:	f1 39 00 08 	ld.ub	r9,r8[8]
8000583c:	30 28       	mov	r8,2
8000583e:	f0 09 18 00 	cp.b	r9,r8
80005842:	c0 31       	brne	80005848 <et024006_PowerUp+0x224>
80005844:	30 08       	mov	r8,0
80005846:	c4 38       	rjmp	800058cc <et024006_PowerUp+0x2a8>
80005848:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000584c:	f1 39 00 08 	ld.ub	r9,r8[8]
80005850:	30 18       	mov	r8,1
80005852:	f0 09 18 00 	cp.b	r9,r8
80005856:	c0 31       	brne	8000585c <et024006_PowerUp+0x238>
80005858:	30 18       	mov	r8,1
8000585a:	c3 98       	rjmp	800058cc <et024006_PowerUp+0x2a8>
8000585c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005860:	70 09       	ld.w	r9,r8[0x0]
80005862:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005866:	70 18       	ld.w	r8,r8[0x4]
80005868:	10 39       	cp.w	r9,r8
8000586a:	e0 88 00 1a 	brls	8000589e <et024006_PowerUp+0x27a>
8000586e:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005872:	70 08       	ld.w	r8,r8[0x0]
80005874:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005878:	10 39       	cp.w	r9,r8
8000587a:	c1 02       	brcc	8000589a <et024006_PowerUp+0x276>
8000587c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005880:	70 18       	ld.w	r8,r8[0x4]
80005882:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005886:	10 39       	cp.w	r9,r8
80005888:	e0 88 00 09 	brls	8000589a <et024006_PowerUp+0x276>
8000588c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80005890:	30 18       	mov	r8,1
80005892:	f3 68 00 08 	st.b	r9[8],r8
80005896:	30 18       	mov	r8,1
80005898:	c1 a8       	rjmp	800058cc <et024006_PowerUp+0x2a8>
8000589a:	30 08       	mov	r8,0
8000589c:	c1 88       	rjmp	800058cc <et024006_PowerUp+0x2a8>
8000589e:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800058a2:	70 08       	ld.w	r8,r8[0x0]
800058a4:	ee f9 ff 90 	ld.w	r9,r7[-112]
800058a8:	10 39       	cp.w	r9,r8
800058aa:	c0 93       	brcs	800058bc <et024006_PowerUp+0x298>
800058ac:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800058b0:	70 18       	ld.w	r8,r8[0x4]
800058b2:	ee f9 ff 90 	ld.w	r9,r7[-112]
800058b6:	10 39       	cp.w	r9,r8
800058b8:	e0 88 00 09 	brls	800058ca <et024006_PowerUp+0x2a6>
800058bc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800058c0:	30 18       	mov	r8,1
800058c2:	f3 68 00 08 	st.b	r9[8],r8
800058c6:	30 18       	mov	r8,1
800058c8:	c0 28       	rjmp	800058cc <et024006_PowerUp+0x2a8>
800058ca:	30 08       	mov	r8,0
800058cc:	58 08       	cp.w	r8,0
800058ce:	ca b0       	breq	80005824 <et024006_PowerUp+0x200>
800058d0:	34 38       	mov	r8,67
800058d2:	ef 68 ff 97 	st.b	r7[-105],r8
800058d6:	38 08       	mov	r8,-128
800058d8:	ef 68 ff 96 	st.b	r7[-106],r8
800058dc:	fc 19 c0 00 	movh	r9,0xc000
800058e0:	ef 38 ff 97 	ld.ub	r8,r7[-105]
800058e4:	b2 08       	st.h	r9[0x0],r8
800058e6:	fc 19 c0 20 	movh	r9,0xc020
800058ea:	ef 38 ff 96 	ld.ub	r8,r7[-106]
800058ee:	b2 08       	st.h	r9[0x0],r8
800058f0:	fe f8 04 60 	ld.w	r8,pc[1120]
800058f4:	70 08       	ld.w	r8,r8[0x0]
800058f6:	30 59       	mov	r9,5
800058f8:	ef 49 ff 9c 	st.w	r7[-100],r9
800058fc:	ef 48 ff 98 	st.w	r7[-104],r8
80005900:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80005904:	ef 48 ff a4 	st.w	r7[-92],r8
80005908:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000590c:	ef 48 ff a0 	st.w	r7[-96],r8
80005910:	ee fc ff a4 	ld.w	r12,r7[-92]
80005914:	ef 4c fe f0 	st.w	r7[-272],r12
80005918:	30 0b       	mov	r11,0
8000591a:	ef 4b fe ec 	st.w	r7[-276],r11
8000591e:	ee fa ff a0 	ld.w	r10,r7[-96]
80005922:	ef 4a fe e8 	st.w	r7[-280],r10
80005926:	30 09       	mov	r9,0
80005928:	ef 49 fe e4 	st.w	r7[-284],r9
8000592c:	ee fa fe ec 	ld.w	r10,r7[-276]
80005930:	ee f8 fe e8 	ld.w	r8,r7[-280]
80005934:	b1 3a       	mul	r10,r8
80005936:	ee f8 fe e4 	ld.w	r8,r7[-284]
8000593a:	ee fc fe f0 	ld.w	r12,r7[-272]
8000593e:	b9 38       	mul	r8,r12
80005940:	10 0a       	add	r10,r8
80005942:	ee fb fe f0 	ld.w	r11,r7[-272]
80005946:	ee fc fe e8 	ld.w	r12,r7[-280]
8000594a:	f6 0c 06 48 	mulu.d	r8,r11,r12
8000594e:	12 0a       	add	r10,r9
80005950:	14 99       	mov	r9,r10
80005952:	e0 6a 03 e7 	mov	r10,999
80005956:	30 0b       	mov	r11,0
80005958:	f0 0a 00 0a 	add	r10,r8,r10
8000595c:	f2 0b 00 4b 	adc	r11,r9,r11
80005960:	e0 68 03 e8 	mov	r8,1000
80005964:	30 09       	mov	r9,0
80005966:	f0 1f 00 fc 	mcall	80005d54 <et024006_PowerUp+0x730>
8000596a:	14 98       	mov	r8,r10
8000596c:	16 99       	mov	r9,r11
8000596e:	ef 48 ff ac 	st.w	r7[-84],r8
80005972:	ee c8 00 d4 	sub	r8,r7,212
80005976:	ef 48 ff a8 	st.w	r7[-88],r8
8000597a:	e1 b8 00 42 	mfsr	r8,0x108
8000597e:	10 99       	mov	r9,r8
80005980:	ee f8 ff a8 	ld.w	r8,r7[-88]
80005984:	91 09       	st.w	r8[0x0],r9
80005986:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000598a:	70 09       	ld.w	r9,r8[0x0]
8000598c:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005990:	10 09       	add	r9,r8
80005992:	ee f8 ff a8 	ld.w	r8,r7[-88]
80005996:	91 19       	st.w	r8[0x4],r9
80005998:	ee f9 ff a8 	ld.w	r9,r7[-88]
8000599c:	30 08       	mov	r8,0
8000599e:	f3 68 00 08 	st.b	r9[8],r8
800059a2:	ee c8 00 d4 	sub	r8,r7,212
800059a6:	ef 48 ff b0 	st.w	r7[-80],r8
800059aa:	e1 b8 00 42 	mfsr	r8,0x108
800059ae:	ef 48 ff b4 	st.w	r7[-76],r8
800059b2:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059b6:	f1 39 00 08 	ld.ub	r9,r8[8]
800059ba:	30 28       	mov	r8,2
800059bc:	f0 09 18 00 	cp.b	r9,r8
800059c0:	c0 31       	brne	800059c6 <et024006_PowerUp+0x3a2>
800059c2:	30 08       	mov	r8,0
800059c4:	c4 38       	rjmp	80005a4a <et024006_PowerUp+0x426>
800059c6:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059ca:	f1 39 00 08 	ld.ub	r9,r8[8]
800059ce:	30 18       	mov	r8,1
800059d0:	f0 09 18 00 	cp.b	r9,r8
800059d4:	c0 31       	brne	800059da <et024006_PowerUp+0x3b6>
800059d6:	30 18       	mov	r8,1
800059d8:	c3 98       	rjmp	80005a4a <et024006_PowerUp+0x426>
800059da:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059de:	70 09       	ld.w	r9,r8[0x0]
800059e0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059e4:	70 18       	ld.w	r8,r8[0x4]
800059e6:	10 39       	cp.w	r9,r8
800059e8:	e0 88 00 1a 	brls	80005a1c <et024006_PowerUp+0x3f8>
800059ec:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059f0:	70 08       	ld.w	r8,r8[0x0]
800059f2:	ee f9 ff b4 	ld.w	r9,r7[-76]
800059f6:	10 39       	cp.w	r9,r8
800059f8:	c1 02       	brcc	80005a18 <et024006_PowerUp+0x3f4>
800059fa:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059fe:	70 18       	ld.w	r8,r8[0x4]
80005a00:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005a04:	10 39       	cp.w	r9,r8
80005a06:	e0 88 00 09 	brls	80005a18 <et024006_PowerUp+0x3f4>
80005a0a:	ee f9 ff b0 	ld.w	r9,r7[-80]
80005a0e:	30 18       	mov	r8,1
80005a10:	f3 68 00 08 	st.b	r9[8],r8
80005a14:	30 18       	mov	r8,1
80005a16:	c1 a8       	rjmp	80005a4a <et024006_PowerUp+0x426>
80005a18:	30 08       	mov	r8,0
80005a1a:	c1 88       	rjmp	80005a4a <et024006_PowerUp+0x426>
80005a1c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a20:	70 08       	ld.w	r8,r8[0x0]
80005a22:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005a26:	10 39       	cp.w	r9,r8
80005a28:	c0 93       	brcs	80005a3a <et024006_PowerUp+0x416>
80005a2a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a2e:	70 18       	ld.w	r8,r8[0x4]
80005a30:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005a34:	10 39       	cp.w	r9,r8
80005a36:	e0 88 00 09 	brls	80005a48 <et024006_PowerUp+0x424>
80005a3a:	ee f9 ff b0 	ld.w	r9,r7[-80]
80005a3e:	30 18       	mov	r8,1
80005a40:	f3 68 00 08 	st.b	r9[8],r8
80005a44:	30 18       	mov	r8,1
80005a46:	c0 28       	rjmp	80005a4a <et024006_PowerUp+0x426>
80005a48:	30 08       	mov	r8,0
80005a4a:	58 08       	cp.w	r8,0
80005a4c:	ca b0       	breq	800059a2 <et024006_PowerUp+0x37e>
80005a4e:	31 b8       	mov	r8,27
80005a50:	ef 68 ff bb 	st.b	r7[-69],r8
80005a54:	30 88       	mov	r8,8
80005a56:	ef 68 ff ba 	st.b	r7[-70],r8
80005a5a:	fc 19 c0 00 	movh	r9,0xc000
80005a5e:	ef 38 ff bb 	ld.ub	r8,r7[-69]
80005a62:	b2 08       	st.h	r9[0x0],r8
80005a64:	fc 19 c0 20 	movh	r9,0xc020
80005a68:	ef 38 ff ba 	ld.ub	r8,r7[-70]
80005a6c:	b2 08       	st.h	r9[0x0],r8
80005a6e:	fe f8 02 e2 	ld.w	r8,pc[738]
80005a72:	70 08       	ld.w	r8,r8[0x0]
80005a74:	32 89       	mov	r9,40
80005a76:	ef 49 ff c0 	st.w	r7[-64],r9
80005a7a:	ef 48 ff bc 	st.w	r7[-68],r8
80005a7e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005a82:	ef 48 ff c8 	st.w	r7[-56],r8
80005a86:	ee f8 ff bc 	ld.w	r8,r7[-68]
80005a8a:	ef 48 ff c4 	st.w	r7[-60],r8
80005a8e:	ee fb ff c8 	ld.w	r11,r7[-56]
80005a92:	ef 4b ff 00 	st.w	r7[-256],r11
80005a96:	30 0a       	mov	r10,0
80005a98:	ef 4a fe fc 	st.w	r7[-260],r10
80005a9c:	ee f9 ff c4 	ld.w	r9,r7[-60]
80005aa0:	ef 49 fe f8 	st.w	r7[-264],r9
80005aa4:	30 08       	mov	r8,0
80005aa6:	ef 48 fe f4 	st.w	r7[-268],r8
80005aaa:	ee fa fe fc 	ld.w	r10,r7[-260]
80005aae:	ee fc fe f8 	ld.w	r12,r7[-264]
80005ab2:	b9 3a       	mul	r10,r12
80005ab4:	ee f8 fe f4 	ld.w	r8,r7[-268]
80005ab8:	ee fb ff 00 	ld.w	r11,r7[-256]
80005abc:	b7 38       	mul	r8,r11
80005abe:	10 0a       	add	r10,r8
80005ac0:	ee fc ff 00 	ld.w	r12,r7[-256]
80005ac4:	ee fb fe f8 	ld.w	r11,r7[-264]
80005ac8:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005acc:	12 0a       	add	r10,r9
80005ace:	14 99       	mov	r9,r10
80005ad0:	e0 6a 03 e7 	mov	r10,999
80005ad4:	30 0b       	mov	r11,0
80005ad6:	f0 0a 00 0a 	add	r10,r8,r10
80005ada:	f2 0b 00 4b 	adc	r11,r9,r11
80005ade:	e0 68 03 e8 	mov	r8,1000
80005ae2:	30 09       	mov	r9,0
80005ae4:	f0 1f 00 9c 	mcall	80005d54 <et024006_PowerUp+0x730>
80005ae8:	14 98       	mov	r8,r10
80005aea:	16 99       	mov	r9,r11
80005aec:	ef 48 ff d0 	st.w	r7[-48],r8
80005af0:	ee c8 00 c8 	sub	r8,r7,200
80005af4:	ef 48 ff cc 	st.w	r7[-52],r8
80005af8:	e1 b8 00 42 	mfsr	r8,0x108
80005afc:	10 99       	mov	r9,r8
80005afe:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005b02:	91 09       	st.w	r8[0x0],r9
80005b04:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005b08:	70 09       	ld.w	r9,r8[0x0]
80005b0a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005b0e:	10 09       	add	r9,r8
80005b10:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005b14:	91 19       	st.w	r8[0x4],r9
80005b16:	ee f9 ff cc 	ld.w	r9,r7[-52]
80005b1a:	30 08       	mov	r8,0
80005b1c:	f3 68 00 08 	st.b	r9[8],r8
80005b20:	ee c8 00 c8 	sub	r8,r7,200
80005b24:	ef 48 ff d4 	st.w	r7[-44],r8
80005b28:	e1 b8 00 42 	mfsr	r8,0x108
80005b2c:	ef 48 ff d8 	st.w	r7[-40],r8
80005b30:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b34:	f1 39 00 08 	ld.ub	r9,r8[8]
80005b38:	30 28       	mov	r8,2
80005b3a:	f0 09 18 00 	cp.b	r9,r8
80005b3e:	c0 31       	brne	80005b44 <et024006_PowerUp+0x520>
80005b40:	30 08       	mov	r8,0
80005b42:	c4 38       	rjmp	80005bc8 <et024006_PowerUp+0x5a4>
80005b44:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b48:	f1 39 00 08 	ld.ub	r9,r8[8]
80005b4c:	30 18       	mov	r8,1
80005b4e:	f0 09 18 00 	cp.b	r9,r8
80005b52:	c0 31       	brne	80005b58 <et024006_PowerUp+0x534>
80005b54:	30 18       	mov	r8,1
80005b56:	c3 98       	rjmp	80005bc8 <et024006_PowerUp+0x5a4>
80005b58:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b5c:	70 09       	ld.w	r9,r8[0x0]
80005b5e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b62:	70 18       	ld.w	r8,r8[0x4]
80005b64:	10 39       	cp.w	r9,r8
80005b66:	e0 88 00 1a 	brls	80005b9a <et024006_PowerUp+0x576>
80005b6a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b6e:	70 08       	ld.w	r8,r8[0x0]
80005b70:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005b74:	10 39       	cp.w	r9,r8
80005b76:	c1 02       	brcc	80005b96 <et024006_PowerUp+0x572>
80005b78:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b7c:	70 18       	ld.w	r8,r8[0x4]
80005b7e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005b82:	10 39       	cp.w	r9,r8
80005b84:	e0 88 00 09 	brls	80005b96 <et024006_PowerUp+0x572>
80005b88:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005b8c:	30 18       	mov	r8,1
80005b8e:	f3 68 00 08 	st.b	r9[8],r8
80005b92:	30 18       	mov	r8,1
80005b94:	c1 a8       	rjmp	80005bc8 <et024006_PowerUp+0x5a4>
80005b96:	30 08       	mov	r8,0
80005b98:	c1 88       	rjmp	80005bc8 <et024006_PowerUp+0x5a4>
80005b9a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b9e:	70 08       	ld.w	r8,r8[0x0]
80005ba0:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005ba4:	10 39       	cp.w	r9,r8
80005ba6:	c0 93       	brcs	80005bb8 <et024006_PowerUp+0x594>
80005ba8:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005bac:	70 18       	ld.w	r8,r8[0x4]
80005bae:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005bb2:	10 39       	cp.w	r9,r8
80005bb4:	e0 88 00 09 	brls	80005bc6 <et024006_PowerUp+0x5a2>
80005bb8:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005bbc:	30 18       	mov	r8,1
80005bbe:	f3 68 00 08 	st.b	r9[8],r8
80005bc2:	30 18       	mov	r8,1
80005bc4:	c0 28       	rjmp	80005bc8 <et024006_PowerUp+0x5a4>
80005bc6:	30 08       	mov	r8,0
80005bc8:	58 08       	cp.w	r8,0
80005bca:	ca b0       	breq	80005b20 <et024006_PowerUp+0x4fc>
80005bcc:	31 b8       	mov	r8,27
80005bce:	ef 68 ff df 	st.b	r7[-33],r8
80005bd2:	31 08       	mov	r8,16
80005bd4:	ef 68 ff de 	st.b	r7[-34],r8
80005bd8:	fc 19 c0 00 	movh	r9,0xc000
80005bdc:	ef 38 ff df 	ld.ub	r8,r7[-33]
80005be0:	b2 08       	st.h	r9[0x0],r8
80005be2:	fc 19 c0 20 	movh	r9,0xc020
80005be6:	ef 38 ff de 	ld.ub	r8,r7[-34]
80005bea:	b2 08       	st.h	r9[0x0],r8
80005bec:	4d 98       	lddpc	r8,80005d50 <et024006_PowerUp+0x72c>
80005bee:	70 08       	ld.w	r8,r8[0x0]
80005bf0:	32 89       	mov	r9,40
80005bf2:	ef 49 ff e4 	st.w	r7[-28],r9
80005bf6:	ef 48 ff e0 	st.w	r7[-32],r8
80005bfa:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005bfe:	ef 48 ff ec 	st.w	r7[-20],r8
80005c02:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005c06:	ef 48 ff e8 	st.w	r7[-24],r8
80005c0a:	ee fa ff ec 	ld.w	r10,r7[-20]
80005c0e:	ef 4a ff 10 	st.w	r7[-240],r10
80005c12:	30 09       	mov	r9,0
80005c14:	ef 49 ff 0c 	st.w	r7[-244],r9
80005c18:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005c1c:	ef 48 ff 08 	st.w	r7[-248],r8
80005c20:	30 0c       	mov	r12,0
80005c22:	ef 4c ff 04 	st.w	r7[-252],r12
80005c26:	ee fa ff 0c 	ld.w	r10,r7[-244]
80005c2a:	ee fb ff 08 	ld.w	r11,r7[-248]
80005c2e:	b7 3a       	mul	r10,r11
80005c30:	ee f8 ff 04 	ld.w	r8,r7[-252]
80005c34:	ee f9 ff 10 	ld.w	r9,r7[-240]
80005c38:	b3 38       	mul	r8,r9
80005c3a:	10 0a       	add	r10,r8
80005c3c:	ee fc ff 10 	ld.w	r12,r7[-240]
80005c40:	ee fb ff 08 	ld.w	r11,r7[-248]
80005c44:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005c48:	12 0a       	add	r10,r9
80005c4a:	14 99       	mov	r9,r10
80005c4c:	e0 6a 03 e7 	mov	r10,999
80005c50:	30 0b       	mov	r11,0
80005c52:	f0 0a 00 0a 	add	r10,r8,r10
80005c56:	f2 0b 00 4b 	adc	r11,r9,r11
80005c5a:	e0 68 03 e8 	mov	r8,1000
80005c5e:	30 09       	mov	r9,0
80005c60:	f0 1f 00 3d 	mcall	80005d54 <et024006_PowerUp+0x730>
80005c64:	14 98       	mov	r8,r10
80005c66:	16 99       	mov	r9,r11
80005c68:	ef 48 ff f4 	st.w	r7[-12],r8
80005c6c:	ee c8 00 bc 	sub	r8,r7,188
80005c70:	ef 48 ff f0 	st.w	r7[-16],r8
80005c74:	e1 b8 00 42 	mfsr	r8,0x108
80005c78:	10 99       	mov	r9,r8
80005c7a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005c7e:	91 09       	st.w	r8[0x0],r9
80005c80:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005c84:	70 09       	ld.w	r9,r8[0x0]
80005c86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005c8a:	10 09       	add	r9,r8
80005c8c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005c90:	91 19       	st.w	r8[0x4],r9
80005c92:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005c96:	30 08       	mov	r8,0
80005c98:	f3 68 00 08 	st.b	r9[8],r8
80005c9c:	ee c8 00 bc 	sub	r8,r7,188
80005ca0:	ef 48 ff f8 	st.w	r7[-8],r8
80005ca4:	e1 b8 00 42 	mfsr	r8,0x108
80005ca8:	ef 48 ff fc 	st.w	r7[-4],r8
80005cac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cb0:	f1 39 00 08 	ld.ub	r9,r8[8]
80005cb4:	30 28       	mov	r8,2
80005cb6:	f0 09 18 00 	cp.b	r9,r8
80005cba:	c0 31       	brne	80005cc0 <et024006_PowerUp+0x69c>
80005cbc:	30 08       	mov	r8,0
80005cbe:	c4 38       	rjmp	80005d44 <et024006_PowerUp+0x720>
80005cc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cc4:	f1 39 00 08 	ld.ub	r9,r8[8]
80005cc8:	30 18       	mov	r8,1
80005cca:	f0 09 18 00 	cp.b	r9,r8
80005cce:	c0 31       	brne	80005cd4 <et024006_PowerUp+0x6b0>
80005cd0:	30 18       	mov	r8,1
80005cd2:	c3 98       	rjmp	80005d44 <et024006_PowerUp+0x720>
80005cd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cd8:	70 09       	ld.w	r9,r8[0x0]
80005cda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cde:	70 18       	ld.w	r8,r8[0x4]
80005ce0:	10 39       	cp.w	r9,r8
80005ce2:	e0 88 00 1a 	brls	80005d16 <et024006_PowerUp+0x6f2>
80005ce6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cea:	70 08       	ld.w	r8,r8[0x0]
80005cec:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005cf0:	10 39       	cp.w	r9,r8
80005cf2:	c1 02       	brcc	80005d12 <et024006_PowerUp+0x6ee>
80005cf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cf8:	70 18       	ld.w	r8,r8[0x4]
80005cfa:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005cfe:	10 39       	cp.w	r9,r8
80005d00:	e0 88 00 09 	brls	80005d12 <et024006_PowerUp+0x6ee>
80005d04:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005d08:	30 18       	mov	r8,1
80005d0a:	f3 68 00 08 	st.b	r9[8],r8
80005d0e:	30 18       	mov	r8,1
80005d10:	c1 a8       	rjmp	80005d44 <et024006_PowerUp+0x720>
80005d12:	30 08       	mov	r8,0
80005d14:	c1 88       	rjmp	80005d44 <et024006_PowerUp+0x720>
80005d16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d1a:	70 08       	ld.w	r8,r8[0x0]
80005d1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d20:	10 39       	cp.w	r9,r8
80005d22:	c0 93       	brcs	80005d34 <et024006_PowerUp+0x710>
80005d24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d28:	70 18       	ld.w	r8,r8[0x4]
80005d2a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d2e:	10 39       	cp.w	r9,r8
80005d30:	e0 88 00 09 	brls	80005d42 <et024006_PowerUp+0x71e>
80005d34:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005d38:	30 18       	mov	r8,1
80005d3a:	f3 68 00 08 	st.b	r9[8],r8
80005d3e:	30 18       	mov	r8,1
80005d40:	c0 28       	rjmp	80005d44 <et024006_PowerUp+0x720>
80005d42:	30 08       	mov	r8,0
80005d44:	58 08       	cp.w	r8,0
80005d46:	ca b0       	breq	80005c9c <et024006_PowerUp+0x678>
80005d48:	2b 7d       	sub	sp,-292
80005d4a:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005d4e:	00 00       	add	r0,r0
80005d50:	00 00       	add	r0,r0
80005d52:	06 0c       	add	r12,r3
80005d54:	80 00       	ld.sh	r0,r0[0x0]
80005d56:	e6 64 eb cd 	mov	r4,453581

80005d58 <et024006_PowerOn>:
80005d58:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005d5c:	1a 97       	mov	r7,sp
80005d5e:	21 9d       	sub	sp,100
80005d60:	32 6c       	mov	r12,38
80005d62:	ef 6c ff b7 	st.b	r7[-73],r12
80005d66:	30 4c       	mov	r12,4
80005d68:	ef 6c ff b6 	st.b	r7[-74],r12
80005d6c:	fc 1e c0 00 	movh	lr,0xc000
80005d70:	ef 3c ff b7 	ld.ub	r12,r7[-73]
80005d74:	bc 0c       	st.h	lr[0x0],r12
80005d76:	fc 1e c0 20 	movh	lr,0xc020
80005d7a:	ef 3c ff b6 	ld.ub	r12,r7[-74]
80005d7e:	bc 0c       	st.h	lr[0x0],r12
80005d80:	fe fc 02 e0 	ld.w	r12,pc[736]
80005d84:	78 0c       	ld.w	r12,r12[0x0]
80005d86:	32 8e       	mov	lr,40
80005d88:	ef 4e ff bc 	st.w	r7[-68],lr
80005d8c:	ef 4c ff b8 	st.w	r7[-72],r12
80005d90:	ee fc ff bc 	ld.w	r12,r7[-68]
80005d94:	ef 4c ff c4 	st.w	r7[-60],r12
80005d98:	ee fc ff b8 	ld.w	r12,r7[-72]
80005d9c:	ef 4c ff c0 	st.w	r7[-64],r12
80005da0:	ee fa ff c4 	ld.w	r10,r7[-60]
80005da4:	30 0b       	mov	r11,0
80005da6:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005daa:	30 09       	mov	r9,0
80005dac:	f6 08 02 4c 	mul	r12,r11,r8
80005db0:	f2 0a 02 4e 	mul	lr,r9,r10
80005db4:	1c 0c       	add	r12,lr
80005db6:	f4 08 06 48 	mulu.d	r8,r10,r8
80005dba:	12 0c       	add	r12,r9
80005dbc:	18 99       	mov	r9,r12
80005dbe:	e0 6a 03 e7 	mov	r10,999
80005dc2:	30 0b       	mov	r11,0
80005dc4:	f0 0a 00 0a 	add	r10,r8,r10
80005dc8:	f2 0b 00 4b 	adc	r11,r9,r11
80005dcc:	e0 68 03 e8 	mov	r8,1000
80005dd0:	30 09       	mov	r9,0
80005dd2:	f0 1f 00 a5 	mcall	80006064 <et024006_PowerOn+0x30c>
80005dd6:	14 98       	mov	r8,r10
80005dd8:	16 99       	mov	r9,r11
80005dda:	ef 48 ff cc 	st.w	r7[-52],r8
80005dde:	ee c8 00 64 	sub	r8,r7,100
80005de2:	ef 48 ff c8 	st.w	r7[-56],r8
80005de6:	e1 b8 00 42 	mfsr	r8,0x108
80005dea:	10 99       	mov	r9,r8
80005dec:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005df0:	91 09       	st.w	r8[0x0],r9
80005df2:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005df6:	70 09       	ld.w	r9,r8[0x0]
80005df8:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005dfc:	10 09       	add	r9,r8
80005dfe:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005e02:	91 19       	st.w	r8[0x4],r9
80005e04:	ee f9 ff c8 	ld.w	r9,r7[-56]
80005e08:	30 08       	mov	r8,0
80005e0a:	f3 68 00 08 	st.b	r9[8],r8
80005e0e:	ee c8 00 64 	sub	r8,r7,100
80005e12:	ef 48 ff d0 	st.w	r7[-48],r8
80005e16:	e1 b8 00 42 	mfsr	r8,0x108
80005e1a:	ef 48 ff d4 	st.w	r7[-44],r8
80005e1e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e22:	f1 39 00 08 	ld.ub	r9,r8[8]
80005e26:	30 28       	mov	r8,2
80005e28:	f0 09 18 00 	cp.b	r9,r8
80005e2c:	c0 31       	brne	80005e32 <et024006_PowerOn+0xda>
80005e2e:	30 08       	mov	r8,0
80005e30:	c4 38       	rjmp	80005eb6 <et024006_PowerOn+0x15e>
80005e32:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e36:	f1 39 00 08 	ld.ub	r9,r8[8]
80005e3a:	30 18       	mov	r8,1
80005e3c:	f0 09 18 00 	cp.b	r9,r8
80005e40:	c0 31       	brne	80005e46 <et024006_PowerOn+0xee>
80005e42:	30 18       	mov	r8,1
80005e44:	c3 98       	rjmp	80005eb6 <et024006_PowerOn+0x15e>
80005e46:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e4a:	70 09       	ld.w	r9,r8[0x0]
80005e4c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e50:	70 18       	ld.w	r8,r8[0x4]
80005e52:	10 39       	cp.w	r9,r8
80005e54:	e0 88 00 1a 	brls	80005e88 <et024006_PowerOn+0x130>
80005e58:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e5c:	70 08       	ld.w	r8,r8[0x0]
80005e5e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005e62:	10 39       	cp.w	r9,r8
80005e64:	c1 02       	brcc	80005e84 <et024006_PowerOn+0x12c>
80005e66:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e6a:	70 18       	ld.w	r8,r8[0x4]
80005e6c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005e70:	10 39       	cp.w	r9,r8
80005e72:	e0 88 00 09 	brls	80005e84 <et024006_PowerOn+0x12c>
80005e76:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005e7a:	30 18       	mov	r8,1
80005e7c:	f3 68 00 08 	st.b	r9[8],r8
80005e80:	30 18       	mov	r8,1
80005e82:	c1 a8       	rjmp	80005eb6 <et024006_PowerOn+0x15e>
80005e84:	30 08       	mov	r8,0
80005e86:	c1 88       	rjmp	80005eb6 <et024006_PowerOn+0x15e>
80005e88:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e8c:	70 08       	ld.w	r8,r8[0x0]
80005e8e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005e92:	10 39       	cp.w	r9,r8
80005e94:	c0 93       	brcs	80005ea6 <et024006_PowerOn+0x14e>
80005e96:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e9a:	70 18       	ld.w	r8,r8[0x4]
80005e9c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005ea0:	10 39       	cp.w	r9,r8
80005ea2:	e0 88 00 09 	brls	80005eb4 <et024006_PowerOn+0x15c>
80005ea6:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005eaa:	30 18       	mov	r8,1
80005eac:	f3 68 00 08 	st.b	r9[8],r8
80005eb0:	30 18       	mov	r8,1
80005eb2:	c0 28       	rjmp	80005eb6 <et024006_PowerOn+0x15e>
80005eb4:	30 08       	mov	r8,0
80005eb6:	58 08       	cp.w	r8,0
80005eb8:	ca b0       	breq	80005e0e <et024006_PowerOn+0xb6>
80005eba:	32 68       	mov	r8,38
80005ebc:	ef 68 ff d9 	st.b	r7[-39],r8
80005ec0:	32 48       	mov	r8,36
80005ec2:	ef 68 ff d8 	st.b	r7[-40],r8
80005ec6:	fc 19 c0 00 	movh	r9,0xc000
80005eca:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80005ece:	b2 08       	st.h	r9[0x0],r8
80005ed0:	fc 19 c0 20 	movh	r9,0xc020
80005ed4:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80005ed8:	b2 08       	st.h	r9[0x0],r8
80005eda:	32 68       	mov	r8,38
80005edc:	ef 68 ff db 	st.b	r7[-37],r8
80005ee0:	32 c8       	mov	r8,44
80005ee2:	ef 68 ff da 	st.b	r7[-38],r8
80005ee6:	fc 19 c0 00 	movh	r9,0xc000
80005eea:	ef 38 ff db 	ld.ub	r8,r7[-37]
80005eee:	b2 08       	st.h	r9[0x0],r8
80005ef0:	fc 19 c0 20 	movh	r9,0xc020
80005ef4:	ef 38 ff da 	ld.ub	r8,r7[-38]
80005ef8:	b2 08       	st.h	r9[0x0],r8
80005efa:	4d a8       	lddpc	r8,80006060 <et024006_PowerOn+0x308>
80005efc:	70 08       	ld.w	r8,r8[0x0]
80005efe:	32 89       	mov	r9,40
80005f00:	ef 49 ff e0 	st.w	r7[-32],r9
80005f04:	ef 48 ff dc 	st.w	r7[-36],r8
80005f08:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005f0c:	ef 48 ff e8 	st.w	r7[-24],r8
80005f10:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005f14:	ef 48 ff e4 	st.w	r7[-28],r8
80005f18:	ee f0 ff e8 	ld.w	r0,r7[-24]
80005f1c:	30 01       	mov	r1,0
80005f1e:	ee f2 ff e4 	ld.w	r2,r7[-28]
80005f22:	30 03       	mov	r3,0
80005f24:	e2 02 02 4a 	mul	r10,r1,r2
80005f28:	e6 00 02 48 	mul	r8,r3,r0
80005f2c:	10 0a       	add	r10,r8
80005f2e:	e0 02 06 48 	mulu.d	r8,r0,r2
80005f32:	12 0a       	add	r10,r9
80005f34:	14 99       	mov	r9,r10
80005f36:	e0 6a 03 e7 	mov	r10,999
80005f3a:	30 0b       	mov	r11,0
80005f3c:	f0 0a 00 0a 	add	r10,r8,r10
80005f40:	f2 0b 00 4b 	adc	r11,r9,r11
80005f44:	e0 68 03 e8 	mov	r8,1000
80005f48:	30 09       	mov	r9,0
80005f4a:	f0 1f 00 47 	mcall	80006064 <et024006_PowerOn+0x30c>
80005f4e:	14 98       	mov	r8,r10
80005f50:	16 99       	mov	r9,r11
80005f52:	ef 48 ff f0 	st.w	r7[-16],r8
80005f56:	ee c8 00 58 	sub	r8,r7,88
80005f5a:	ef 48 ff ec 	st.w	r7[-20],r8
80005f5e:	e1 b8 00 42 	mfsr	r8,0x108
80005f62:	10 99       	mov	r9,r8
80005f64:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005f68:	91 09       	st.w	r8[0x0],r9
80005f6a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005f6e:	70 09       	ld.w	r9,r8[0x0]
80005f70:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f74:	10 09       	add	r9,r8
80005f76:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005f7a:	91 19       	st.w	r8[0x4],r9
80005f7c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005f80:	30 08       	mov	r8,0
80005f82:	f3 68 00 08 	st.b	r9[8],r8
80005f86:	ee c8 00 58 	sub	r8,r7,88
80005f8a:	ef 48 ff f4 	st.w	r7[-12],r8
80005f8e:	e1 b8 00 42 	mfsr	r8,0x108
80005f92:	ef 48 ff f8 	st.w	r7[-8],r8
80005f96:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f9a:	f1 39 00 08 	ld.ub	r9,r8[8]
80005f9e:	30 28       	mov	r8,2
80005fa0:	f0 09 18 00 	cp.b	r9,r8
80005fa4:	c0 31       	brne	80005faa <et024006_PowerOn+0x252>
80005fa6:	30 08       	mov	r8,0
80005fa8:	c4 38       	rjmp	8000602e <et024006_PowerOn+0x2d6>
80005faa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fae:	f1 39 00 08 	ld.ub	r9,r8[8]
80005fb2:	30 18       	mov	r8,1
80005fb4:	f0 09 18 00 	cp.b	r9,r8
80005fb8:	c0 31       	brne	80005fbe <et024006_PowerOn+0x266>
80005fba:	30 18       	mov	r8,1
80005fbc:	c3 98       	rjmp	8000602e <et024006_PowerOn+0x2d6>
80005fbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fc2:	70 09       	ld.w	r9,r8[0x0]
80005fc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fc8:	70 18       	ld.w	r8,r8[0x4]
80005fca:	10 39       	cp.w	r9,r8
80005fcc:	e0 88 00 1a 	brls	80006000 <et024006_PowerOn+0x2a8>
80005fd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fd4:	70 08       	ld.w	r8,r8[0x0]
80005fd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005fda:	10 39       	cp.w	r9,r8
80005fdc:	c1 02       	brcc	80005ffc <et024006_PowerOn+0x2a4>
80005fde:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fe2:	70 18       	ld.w	r8,r8[0x4]
80005fe4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005fe8:	10 39       	cp.w	r9,r8
80005fea:	e0 88 00 09 	brls	80005ffc <et024006_PowerOn+0x2a4>
80005fee:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005ff2:	30 18       	mov	r8,1
80005ff4:	f3 68 00 08 	st.b	r9[8],r8
80005ff8:	30 18       	mov	r8,1
80005ffa:	c1 a8       	rjmp	8000602e <et024006_PowerOn+0x2d6>
80005ffc:	30 08       	mov	r8,0
80005ffe:	c1 88       	rjmp	8000602e <et024006_PowerOn+0x2d6>
80006000:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006004:	70 08       	ld.w	r8,r8[0x0]
80006006:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000600a:	10 39       	cp.w	r9,r8
8000600c:	c0 93       	brcs	8000601e <et024006_PowerOn+0x2c6>
8000600e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006012:	70 18       	ld.w	r8,r8[0x4]
80006014:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006018:	10 39       	cp.w	r9,r8
8000601a:	e0 88 00 09 	brls	8000602c <et024006_PowerOn+0x2d4>
8000601e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006022:	30 18       	mov	r8,1
80006024:	f3 68 00 08 	st.b	r9[8],r8
80006028:	30 18       	mov	r8,1
8000602a:	c0 28       	rjmp	8000602e <et024006_PowerOn+0x2d6>
8000602c:	30 08       	mov	r8,0
8000602e:	58 08       	cp.w	r8,0
80006030:	ca b0       	breq	80005f86 <et024006_PowerOn+0x22e>
80006032:	32 68       	mov	r8,38
80006034:	ef 68 ff ff 	st.b	r7[-1],r8
80006038:	33 c8       	mov	r8,60
8000603a:	ef 68 ff fe 	st.b	r7[-2],r8
8000603e:	fc 19 c0 00 	movh	r9,0xc000
80006042:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006046:	b2 08       	st.h	r9[0x0],r8
80006048:	fc 19 c0 20 	movh	r9,0xc020
8000604c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006050:	b2 08       	st.h	r9[0x0],r8
80006052:	30 8b       	mov	r11,8
80006054:	37 0c       	mov	r12,112
80006056:	f0 1f 00 05 	mcall	80006068 <et024006_PowerOn+0x310>
8000605a:	2e 7d       	sub	sp,-100
8000605c:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80006060:	00 00       	add	r0,r0
80006062:	06 0c       	add	r12,r3
80006064:	80 00       	ld.sh	r0,r0[0x0]
80006066:	e6 64 80 00 	mov	r4,425984
8000606a:	4a 6c       	lddpc	r12,80006100 <is_sd_mmc_mci_card_protected+0xc>
8000606c:	20 44       	sub	r4,4
8000606e:	65 63       	ld.w	r3,r2[0x58]
80006070:	69 70       	ld.w	r0,r4[0x5c]
80006072:	68 65       	ld.w	r5,r4[0x18]
80006074:	72 65       	ld.w	r5,r9[0x18]
80006076:	64 20       	ld.w	r0,r2[0x8]
80006078:	00 00       	add	r0,r0
8000607a:	00 00       	add	r0,r0
8000607c:	20 73       	sub	r3,7
8000607e:	65 63       	ld.w	r3,r2[0x58]
80006080:	74 6f       	ld.w	pc,r10[0x18]
80006082:	72 73       	ld.w	r3,r9[0x1c]
80006084:	00 00       	add	r0,r0
80006086:	00 00       	add	r0,r0
80006088:	20 45       	sub	r5,4
8000608a:	6e 63       	ld.w	r3,r7[0x18]
8000608c:	69 70       	ld.w	r0,r4[0x5c]
8000608e:	68 65       	ld.w	r5,r4[0x18]
80006090:	72 65       	ld.w	r5,r9[0x18]
80006092:	64 20       	ld.w	r0,r2[0x8]
80006094:	00 00       	add	r0,r0
	...

80006098 <is_sd_mmc_mci_card_present>:


//_____ D E F I N I T I O N S ______________________________________________

bool is_sd_mmc_mci_card_present(uint8_t slot)
{
80006098:	eb cd 40 80 	pushm	r7,lr
8000609c:	1a 97       	mov	r7,sp
8000609e:	20 1d       	sub	sp,4
800060a0:	18 98       	mov	r8,r12
800060a2:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
800060a6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800060aa:	30 18       	mov	r8,1
800060ac:	f0 09 18 00 	cp.b	r9,r8
800060b0:	e0 88 00 04 	brls	800060b8 <is_sd_mmc_mci_card_present+0x20>
    return false;
800060b4:	30 08       	mov	r8,0
800060b6:	c1 88       	rjmp	800060e6 <is_sd_mmc_mci_card_present+0x4e>

  switch(slot)
800060b8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800060bc:	58 08       	cp.w	r8,0
800060be:	c0 b0       	breq	800060d4 <is_sd_mmc_mci_card_present+0x3c>
800060c0:	58 18       	cp.w	r8,1
800060c2:	c1 11       	brne	800060e4 <is_sd_mmc_mci_card_present+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_CARD_DETECT)==SD_SLOT_4BITS_CARD_DETECT_VALUE);
800060c4:	32 8c       	mov	r12,40
800060c6:	f0 1f 00 0b 	mcall	800060f0 <is_sd_mmc_mci_card_present+0x58>
800060ca:	18 98       	mov	r8,r12
800060cc:	58 08       	cp.w	r8,0
800060ce:	5f 08       	sreq	r8
800060d0:	5c 58       	castu.b	r8
800060d2:	c0 a8       	rjmp	800060e6 <is_sd_mmc_mci_card_present+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_CARD_DETECT)==SD_SLOT_8BITS_CARD_DETECT_VALUE);
800060d4:	32 bc       	mov	r12,43
800060d6:	f0 1f 00 07 	mcall	800060f0 <is_sd_mmc_mci_card_present+0x58>
800060da:	18 98       	mov	r8,r12
800060dc:	58 08       	cp.w	r8,0
800060de:	5f 08       	sreq	r8
800060e0:	5c 58       	castu.b	r8
800060e2:	c0 28       	rjmp	800060e6 <is_sd_mmc_mci_card_present+0x4e>
  }

  return false;
800060e4:	30 08       	mov	r8,0
}
800060e6:	10 9c       	mov	r12,r8
800060e8:	2f fd       	sub	sp,-4
800060ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800060ee:	00 00       	add	r0,r0
800060f0:	80 00       	ld.sh	r0,r0[0x0]
800060f2:	8e a0       	ld.uh	r0,r7[0x4]

800060f4 <is_sd_mmc_mci_card_protected>:

bool is_sd_mmc_mci_card_protected(uint8_t slot)
{
800060f4:	eb cd 40 80 	pushm	r7,lr
800060f8:	1a 97       	mov	r7,sp
800060fa:	20 1d       	sub	sp,4
800060fc:	18 98       	mov	r8,r12
800060fe:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80006102:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006106:	30 18       	mov	r8,1
80006108:	f0 09 18 00 	cp.b	r9,r8
8000610c:	e0 88 00 04 	brls	80006114 <is_sd_mmc_mci_card_protected+0x20>
    return false;
80006110:	30 08       	mov	r8,0
80006112:	c1 88       	rjmp	80006142 <is_sd_mmc_mci_card_protected+0x4e>

  switch(slot)
80006114:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006118:	58 08       	cp.w	r8,0
8000611a:	c0 b0       	breq	80006130 <is_sd_mmc_mci_card_protected+0x3c>
8000611c:	58 18       	cp.w	r8,1
8000611e:	c1 11       	brne	80006140 <is_sd_mmc_mci_card_protected+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_WRITE_PROTECT)==SD_SLOT_4BITS_WRITE_PROTECT_VALUE);
80006120:	32 6c       	mov	r12,38
80006122:	f0 1f 00 0b 	mcall	8000614c <is_sd_mmc_mci_card_protected+0x58>
80006126:	18 98       	mov	r8,r12
80006128:	58 18       	cp.w	r8,1
8000612a:	5f 08       	sreq	r8
8000612c:	5c 58       	castu.b	r8
8000612e:	c0 a8       	rjmp	80006142 <is_sd_mmc_mci_card_protected+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_WRITE_PROTECT)==SD_SLOT_8BITS_WRITE_PROTECT_VALUE);
80006130:	36 cc       	mov	r12,108
80006132:	f0 1f 00 07 	mcall	8000614c <is_sd_mmc_mci_card_protected+0x58>
80006136:	18 98       	mov	r8,r12
80006138:	58 18       	cp.w	r8,1
8000613a:	5f 08       	sreq	r8
8000613c:	5c 58       	castu.b	r8
8000613e:	c0 28       	rjmp	80006142 <is_sd_mmc_mci_card_protected+0x4e>
  }

  return false;
80006140:	30 08       	mov	r8,0
}
80006142:	10 9c       	mov	r12,r8
80006144:	2f fd       	sub	sp,-4
80006146:	e3 cd 80 80 	ldm	sp++,r7,pc
8000614a:	00 00       	add	r0,r0
8000614c:	80 00       	ld.sh	r0,r0[0x0]
8000614e:	8e a0       	ld.uh	r0,r7[0x4]

80006150 <sd_mmc_mci_get_csd>:

static bool  sd_mmc_mci_get_csd(uint8_t slot)
{
80006150:	eb cd 40 80 	pushm	r7,lr
80006154:	1a 97       	mov	r7,sp
80006156:	20 fd       	sub	sp,60
80006158:	18 98       	mov	r8,r12
8000615a:	ef 68 ff c4 	st.b	r7[-60],r8

  uint32_t max_Read_DataBlock_Length;
  uint32_t mult;
  uint32_t blocknr;
  uint8_t tmp;
  const uint16_t freq_unit[4] = {10, 100, 1000, 10000};
8000615e:	fe f9 02 b2 	ld.w	r9,pc[690]
80006162:	ee c8 00 28 	sub	r8,r7,40
80006166:	30 8a       	mov	r10,8
80006168:	12 9b       	mov	r11,r9
8000616a:	10 9c       	mov	r12,r8
8000616c:	f0 1f 00 aa 	mcall	80006414 <sd_mmc_mci_get_csd+0x2c4>
  const uint8_t mult_fact[16] = {0, 10, 12, 13, 15, 20, 26, 30, 35, 40, 45, 52, 55, 60, 70, 80}; // MMC tabs...
80006170:	fe f8 02 a8 	ld.w	r8,pc[680]
80006174:	ee ca 00 38 	sub	r10,r7,56
80006178:	10 9b       	mov	r11,r8
8000617a:	f6 e8 00 00 	ld.d	r8,r11[0]
8000617e:	f4 e9 00 00 	st.d	r10[0],r8
80006182:	f6 e8 00 08 	ld.d	r8,r11[8]
80006186:	f4 e9 00 08 	st.d	r10[8],r8

  if (slot > MCI_LAST_SLOTS)
8000618a:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000618e:	30 18       	mov	r8,1
80006190:	f0 09 18 00 	cp.b	r9,r8
80006194:	e0 88 00 04 	brls	8000619c <sd_mmc_mci_get_csd+0x4c>
    return false;
80006198:	30 08       	mov	r8,0
8000619a:	c3 69       	rjmp	80006406 <sd_mmc_mci_get_csd+0x2b6>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000619c:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800061a0:	fe f9 02 7c 	ld.w	r9,pc[636]
800061a4:	f2 08 07 08 	ld.ub	r8,r9[r8]
800061a8:	10 9a       	mov	r10,r8
800061aa:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800061ae:	fe f8 02 72 	ld.w	r8,pc[626]
800061b2:	70 08       	ld.w	r8,r8[0x0]
800061b4:	12 9b       	mov	r11,r9
800061b6:	10 9c       	mov	r12,r8
800061b8:	f0 1f 00 9b 	mcall	80006424 <sd_mmc_mci_get_csd+0x2d4>

  //-- (CMD9)
  if (mci_send_cmd(mci, SD_MMC_SEND_CSD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800061bc:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800061c0:	fe f8 02 68 	ld.w	r8,pc[616]
800061c4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800061c8:	fe f8 02 58 	ld.w	r8,pc[600]
800061cc:	70 08       	ld.w	r8,r8[0x0]
800061ce:	12 9a       	mov	r10,r9
800061d0:	e0 6b 10 89 	mov	r11,4233
800061d4:	10 9c       	mov	r12,r8
800061d6:	f0 1f 00 96 	mcall	8000642c <sd_mmc_mci_get_csd+0x2dc>
800061da:	18 98       	mov	r8,r12
800061dc:	58 08       	cp.w	r8,0
800061de:	c0 30       	breq	800061e4 <sd_mmc_mci_get_csd+0x94>
    return false;
800061e0:	30 08       	mov	r8,0
800061e2:	c1 29       	rjmp	80006406 <sd_mmc_mci_get_csd+0x2b6>


  csd.csd[0] = mci_read_response(mci);
800061e4:	fe f8 02 3c 	ld.w	r8,pc[572]
800061e8:	70 08       	ld.w	r8,r8[0x0]
800061ea:	10 9c       	mov	r12,r8
800061ec:	f0 1f 00 91 	mcall	80006430 <sd_mmc_mci_get_csd+0x2e0>
800061f0:	18 98       	mov	r8,r12
800061f2:	ef 48 ff e0 	st.w	r7[-32],r8
  csd.csd[1] = mci_read_response(mci);
800061f6:	fe f8 02 2a 	ld.w	r8,pc[554]
800061fa:	70 08       	ld.w	r8,r8[0x0]
800061fc:	10 9c       	mov	r12,r8
800061fe:	f0 1f 00 8d 	mcall	80006430 <sd_mmc_mci_get_csd+0x2e0>
80006202:	18 98       	mov	r8,r12
80006204:	ef 48 ff e4 	st.w	r7[-28],r8
  csd.csd[2] = mci_read_response(mci);
80006208:	fe f8 02 18 	ld.w	r8,pc[536]
8000620c:	70 08       	ld.w	r8,r8[0x0]
8000620e:	10 9c       	mov	r12,r8
80006210:	f0 1f 00 88 	mcall	80006430 <sd_mmc_mci_get_csd+0x2e0>
80006214:	18 98       	mov	r8,r12
80006216:	ef 48 ff e8 	st.w	r7[-24],r8
  csd.csd[3] = mci_read_response(mci);
8000621a:	fe f8 02 06 	ld.w	r8,pc[518]
8000621e:	70 08       	ld.w	r8,r8[0x0]
80006220:	10 9c       	mov	r12,r8
80006222:	f0 1f 00 84 	mcall	80006430 <sd_mmc_mci_get_csd+0x2e0>
80006226:	18 98       	mov	r8,r12
80006228:	ef 48 ff ec 	st.w	r7[-20],r8

  //-- Read "System specification version", only available on MMC card
  // field: SPEC_VERS (only on MMC)
  if (MMC_CARD & g_card_type[slot]) // TO BE ADDED
8000622c:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006230:	fe f9 02 04 	ld.w	r9,pc[516]
80006234:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006238:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000623c:	5c 58       	castu.b	r8
8000623e:	c1 40       	breq	80006266 <sd_mmc_mci_get_csd+0x116>
  {
    if (CSD_SPEC_VER_4_0 == (MSB0(csd.csd[0]) & CSD_MSK_SPEC_VER))
80006240:	ee c8 00 20 	sub	r8,r7,32
80006244:	11 88       	ld.ub	r8,r8[0x0]
80006246:	e2 18 00 3c 	andl	r8,0x3c,COH
8000624a:	59 08       	cp.w	r8,16
8000624c:	c0 d1       	brne	80006266 <sd_mmc_mci_get_csd+0x116>
    {
      g_card_type[slot] |= MMC_CARD_V4;
8000624e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006252:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006256:	4f 8a       	lddpc	r10,80006434 <sd_mmc_mci_get_csd+0x2e4>
80006258:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000625c:	a3 a8       	sbr	r8,0x2
8000625e:	5c 58       	castu.b	r8
80006260:	4f 5a       	lddpc	r10,80006434 <sd_mmc_mci_get_csd+0x2e4>
80006262:	f4 09 0b 08 	st.b	r10[r9],r8
    }
  }

  //-- Compute MMC/SD speed
  // field: TRAN_SPEED (CSD V1 & V2 are the same)
  g_card_freq[slot]  = mult_fact[csd.csd_v1.tranSpeed >> 3]; // Get Multiplier factor
80006266:	ef 3a ff c4 	ld.ub	r10,r7[-60]
8000626a:	ef 38 ff e3 	ld.ub	r8,r7[-29]
8000626e:	a3 98       	lsr	r8,0x3
80006270:	5c 58       	castu.b	r8
80006272:	ee 08 00 08 	add	r8,r7,r8
80006276:	f1 38 ff c8 	ld.ub	r8,r8[-56]
8000627a:	4f 09       	lddpc	r9,80006438 <sd_mmc_mci_get_csd+0x2e8>
8000627c:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  if (SD_CARD & g_card_type[slot])
80006280:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006284:	4e c9       	lddpc	r9,80006434 <sd_mmc_mci_get_csd+0x2e4>
80006286:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000628a:	e2 18 00 02 	andl	r8,0x2,COH
8000628e:	c2 00       	breq	800062ce <sd_mmc_mci_get_csd+0x17e>
  {
    // SD card don't have same frequency that MMC card
    if( 26 == g_card_freq[slot] )
80006290:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006294:	4e 98       	lddpc	r8,80006438 <sd_mmc_mci_get_csd+0x2e8>
80006296:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
8000629a:	31 a8       	mov	r8,26
8000629c:	f0 09 19 00 	cp.h	r9,r8
800062a0:	c0 81       	brne	800062b0 <sd_mmc_mci_get_csd+0x160>
    {
      g_card_freq[slot] = 25;
800062a2:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800062a6:	4e 59       	lddpc	r9,80006438 <sd_mmc_mci_get_csd+0x2e8>
800062a8:	31 98       	mov	r8,25
800062aa:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
800062ae:	c1 08       	rjmp	800062ce <sd_mmc_mci_get_csd+0x17e>
    }
    else if( 52 == g_card_freq[slot] )
800062b0:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800062b4:	4e 18       	lddpc	r8,80006438 <sd_mmc_mci_get_csd+0x2e8>
800062b6:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800062ba:	33 48       	mov	r8,52
800062bc:	f0 09 19 00 	cp.h	r9,r8
800062c0:	c0 71       	brne	800062ce <sd_mmc_mci_get_csd+0x17e>
    {
      g_card_freq[slot] = 50;
800062c2:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800062c6:	4d d9       	lddpc	r9,80006438 <sd_mmc_mci_get_csd+0x2e8>
800062c8:	33 28       	mov	r8,50
800062ca:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
    }
  }
  g_card_freq[slot] *= freq_unit[ csd.csd_v1.tranSpeed&0x07 ]; // Get transfer rate unit
800062ce:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800062d2:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800062d6:	4d 98       	lddpc	r8,80006438 <sd_mmc_mci_get_csd+0x2e8>
800062d8:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800062dc:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800062e0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800062e4:	a1 78       	lsl	r8,0x1
800062e6:	ee 08 00 08 	add	r8,r7,r8
800062ea:	f1 08 ff d8 	ld.sh	r8,r8[-40]
800062ee:	f2 08 02 48 	mul	r8,r9,r8
800062f2:	5c 88       	casts.h	r8
800062f4:	4d 19       	lddpc	r9,80006438 <sd_mmc_mci_get_csd+0x2e8>
800062f6:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

  //-- Compute card size in number of block
  // field: WRITE_BL_LEN, READ_BL_LEN, C_SIZE (CSD V1 & V2 are not the same)
  if (SD_CARD_HC & g_card_type[slot])
800062fa:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800062fe:	4c e9       	lddpc	r9,80006434 <sd_mmc_mci_get_csd+0x2e4>
80006300:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006304:	e2 18 00 10 	andl	r8,0x10,COH
80006308:	c2 10       	breq	8000634a <sd_mmc_mci_get_csd+0x1fa>
  {
    g_card_size[slot] = (csd.csd_v2.deviceSizeH<<16)+(csd.csd_v2.deviceSizeL&0xFFff);
8000630a:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000630e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006312:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80006316:	5c 58       	castu.b	r8
80006318:	f0 0a 15 10 	lsl	r10,r8,0x10
8000631c:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80006320:	5c 78       	castu.h	r8
80006322:	f4 08 00 08 	add	r8,r10,r8
80006326:	10 9a       	mov	r10,r8
80006328:	4c 58       	lddpc	r8,8000643c <sd_mmc_mci_get_csd+0x2ec>
8000632a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

    // memory capacity = (C_SIZE+1) * 1K sector
    g_card_size[slot] = (g_card_size[slot] + 1) << 10;  // unit 512B
8000632e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006332:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80006336:	4c 28       	lddpc	r8,8000643c <sd_mmc_mci_get_csd+0x2ec>
80006338:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000633c:	2f f8       	sub	r8,-1
8000633e:	f0 0a 15 0a 	lsl	r10,r8,0xa
80006342:	4b f8       	lddpc	r8,8000643c <sd_mmc_mci_get_csd+0x2ec>
80006344:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80006348:	c5 e8       	rjmp	80006404 <sd_mmc_mci_get_csd+0x2b4>
  }
  else
  {
    // Check block size
    tmp = csd.csd_v1.writeBlLen; // WRITE_BL_LEN
8000634a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000634e:	f1 d8 c2 c4 	bfextu	r8,r8,0x16,0x4
80006352:	5c 58       	castu.b	r8
80006354:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
80006358:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000635c:	30 88       	mov	r8,8
8000635e:	f0 09 18 00 	cp.b	r9,r8
80006362:	e0 8b 00 04 	brhi	8000636a <sd_mmc_mci_get_csd+0x21a>
      return false;  // block size < 512B not supported by firmware
80006366:	30 08       	mov	r8,0
80006368:	c4 f8       	rjmp	80006406 <sd_mmc_mci_get_csd+0x2b6>

    tmp = csd.csd_v1.readBlLen; // READ_BL_LEN
8000636a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000636e:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
80006372:	5c 58       	castu.b	r8
80006374:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
80006378:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000637c:	30 88       	mov	r8,8
8000637e:	f0 09 18 00 	cp.b	r9,r8
80006382:	e0 8b 00 04 	brhi	8000638a <sd_mmc_mci_get_csd+0x23a>
      return false;  // block size < 512B not supported by firmware
80006386:	30 08       	mov	r8,0
80006388:	c3 f8       	rjmp	80006406 <sd_mmc_mci_get_csd+0x2b6>

    //// Compute Memory Capacity
    // compute MULT
    mult = 1 << (csd.csd_v1.cSizeMult + 2);
8000638a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000638e:	f1 d8 c1 e3 	bfextu	r8,r8,0xf,0x3
80006392:	5c 58       	castu.b	r8
80006394:	2f e8       	sub	r8,-2
80006396:	30 19       	mov	r9,1
80006398:	f2 08 09 48 	lsl	r8,r9,r8
8000639c:	ef 48 ff f4 	st.w	r7[-12],r8
    max_Read_DataBlock_Length = 1<<csd.csd_v1.readBlLen;
800063a0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800063a4:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
800063a8:	5c 58       	castu.b	r8
800063aa:	30 19       	mov	r9,1
800063ac:	f2 08 09 48 	lsl	r8,r9,r8
800063b0:	ef 48 ff f0 	st.w	r7[-16],r8
    // compute MSB of C_SIZE
    blocknr = csd.csd_v1.deviceSizeH << 2;
800063b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800063b8:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
800063bc:	5c 88       	casts.h	r8
800063be:	5c 78       	castu.h	r8
800063c0:	a3 68       	lsl	r8,0x2
800063c2:	ef 48 ff f8 	st.w	r7[-8],r8
    // compute MULT * (LSB of C-SIZE + MSB already computed + 1) = BLOCKNR
    blocknr = mult * ( blocknr + csd.csd_v1.deviceSizeL + 1 );
800063c6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063ca:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
800063ce:	5c 58       	castu.b	r8
800063d0:	10 99       	mov	r9,r8
800063d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063d6:	f2 08 00 08 	add	r8,r9,r8
800063da:	f0 c9 ff ff 	sub	r9,r8,-1
800063de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800063e2:	f2 08 02 48 	mul	r8,r9,r8
800063e6:	ef 48 ff f8 	st.w	r7[-8],r8
    g_card_size[slot] = ((max_Read_DataBlock_Length * blocknr)/512);
800063ea:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800063ee:	ee fa ff f0 	ld.w	r10,r7[-16]
800063f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063f6:	f4 08 02 48 	mul	r8,r10,r8
800063fa:	f0 0a 16 09 	lsr	r10,r8,0x9
800063fe:	49 08       	lddpc	r8,8000643c <sd_mmc_mci_get_csd+0x2ec>
80006400:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  }

  return true;
80006404:	30 18       	mov	r8,1
}
80006406:	10 9c       	mov	r12,r8
80006408:	2f 1d       	sub	sp,-60
8000640a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000640e:	00 00       	add	r0,r0
80006410:	80 00       	ld.sh	r0,r0[0x0]
80006412:	f2 bc       	*unknown*
80006414:	80 00       	ld.sh	r0,r0[0x0]
80006416:	e8 f6 80 00 	ld.w	r6,r4[-32768]
8000641a:	f2 c4 00 00 	sub	r4,r9,0
8000641e:	0d fc       	ld.ub	r12,r6[0x7]
80006420:	00 00       	add	r0,r0
80006422:	01 34       	ld.ub	r4,r0++
80006424:	80 00       	ld.sh	r0,r0[0x0]
80006426:	96 0c       	ld.sh	r12,r11[0x0]
80006428:	00 00       	add	r0,r0
8000642a:	0b ec       	ld.ub	r12,r5[0x6]
8000642c:	80 00       	ld.sh	r0,r0[0x0]
8000642e:	94 74       	ld.sh	r4,r10[0xe]
80006430:	80 00       	ld.sh	r0,r0[0x0]
80006432:	95 ac       	st.w	r10[0x28],r12
80006434:	00 00       	add	r0,r0
80006436:	10 04       	add	r4,r8
80006438:	00 00       	add	r0,r0
8000643a:	0d fe       	ld.ub	lr,r6[0x7]
8000643c:	00 00       	add	r0,r0
8000643e:	0b f4       	ld.ub	r4,r5[0x7]

80006440 <sd_mmc_get_ext_csd>:

static bool  sd_mmc_get_ext_csd( uint8_t slot )
{
80006440:	eb cd 40 80 	pushm	r7,lr
80006444:	1a 97       	mov	r7,sp
80006446:	20 ad       	sub	sp,40
80006448:	18 98       	mov	r8,r12
8000644a:	ef 68 ff d8 	st.b	r7[-40],r8
  uint8_t  i;
  uint32_t val;

  if (slot > MCI_LAST_SLOTS)
8000644e:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006452:	30 18       	mov	r8,1
80006454:	f0 09 18 00 	cp.b	r9,r8
80006458:	e0 88 00 04 	brls	80006460 <sd_mmc_get_ext_csd+0x20>
    return false;
8000645c:	30 08       	mov	r8,0
8000645e:	cb e8       	rjmp	800065da <sd_mmc_get_ext_csd+0x19a>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006460:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80006464:	4e 09       	lddpc	r9,800065e4 <sd_mmc_get_ext_csd+0x1a4>
80006466:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000646a:	10 9a       	mov	r10,r8
8000646c:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006470:	4d e8       	lddpc	r8,800065e8 <sd_mmc_get_ext_csd+0x1a8>
80006472:	70 08       	ld.w	r8,r8[0x0]
80006474:	12 9b       	mov	r11,r9
80006476:	10 9c       	mov	r12,r8
80006478:	f0 1f 00 5d 	mcall	800065ec <sd_mmc_get_ext_csd+0x1ac>

  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE); // Ext CSD = 512B size
8000647c:	4d b8       	lddpc	r8,800065e8 <sd_mmc_get_ext_csd+0x1a8>
8000647e:	70 08       	ld.w	r8,r8[0x0]
80006480:	e0 6b 02 00 	mov	r11,512
80006484:	10 9c       	mov	r12,r8
80006486:	f0 1f 00 5b 	mcall	800065f0 <sd_mmc_get_ext_csd+0x1b0>
  mci_set_block_count(mci, 1);
8000648a:	4d 88       	lddpc	r8,800065e8 <sd_mmc_get_ext_csd+0x1a8>
8000648c:	70 08       	ld.w	r8,r8[0x0]
8000648e:	30 1b       	mov	r11,1
80006490:	10 9c       	mov	r12,r8
80006492:	f0 1f 00 59 	mcall	800065f4 <sd_mmc_get_ext_csd+0x1b4>

  //** (CMD8)
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
80006496:	4d 58       	lddpc	r8,800065e8 <sd_mmc_get_ext_csd+0x1a8>
80006498:	70 08       	ld.w	r8,r8[0x0]
8000649a:	30 0a       	mov	r10,0
8000649c:	e4 7b 10 48 	mov	r11,331848
800064a0:	10 9c       	mov	r12,r8
800064a2:	f0 1f 00 56 	mcall	800065f8 <sd_mmc_get_ext_csd+0x1b8>
800064a6:	18 98       	mov	r8,r12
800064a8:	58 08       	cp.w	r8,0
800064aa:	c0 30       	breq	800064b0 <sd_mmc_get_ext_csd+0x70>
    return false;
800064ac:	30 08       	mov	r8,0
800064ae:	c9 68       	rjmp	800065da <sd_mmc_get_ext_csd+0x19a>

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
800064b0:	34 08       	mov	r8,64
800064b2:	ef 68 ff e3 	st.b	r7[-29],r8
800064b6:	c8 a8       	rjmp	800065ca <sd_mmc_get_ext_csd+0x18a>
  {
    while(!(mci_rx_ready(mci)));
800064b8:	4c c8       	lddpc	r8,800065e8 <sd_mmc_get_ext_csd+0x1a8>
800064ba:	70 08       	ld.w	r8,r8[0x0]
800064bc:	ef 48 ff e4 	st.w	r7[-28],r8
800064c0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800064c4:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800064c8:	4c d8       	lddpc	r8,800065fc <sd_mmc_get_ext_csd+0x1bc>
800064ca:	70 08       	ld.w	r8,r8[0x0]
800064cc:	10 99       	mov	r9,r8
800064ce:	e6 19 01 e0 	andh	r9,0x1e0,COH
800064d2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800064d6:	71 08       	ld.w	r8,r8[0x40]
800064d8:	f3 e8 10 08 	or	r8,r9,r8
800064dc:	10 99       	mov	r9,r8
800064de:	4c 88       	lddpc	r8,800065fc <sd_mmc_get_ext_csd+0x1bc>
800064e0:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800064e2:	4c 78       	lddpc	r8,800065fc <sd_mmc_get_ext_csd+0x1bc>
800064e4:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
800064e6:	e2 18 00 02 	andl	r8,0x2,COH
800064ea:	5f 18       	srne	r8
800064ec:	58 08       	cp.w	r8,0
800064ee:	ce 50       	breq	800064b8 <sd_mmc_get_ext_csd+0x78>
    mci_rd_data(mci);
800064f0:	4b e8       	lddpc	r8,800065e8 <sd_mmc_get_ext_csd+0x1a8>
800064f2:	70 08       	ld.w	r8,r8[0x0]
800064f4:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
800064f8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800064fc:	70 c8       	ld.w	r8,r8[0x30]
    while(!(mci_rx_ready(mci)));
800064fe:	4b b8       	lddpc	r8,800065e8 <sd_mmc_get_ext_csd+0x1a8>
80006500:	70 08       	ld.w	r8,r8[0x0]
80006502:	ef 48 ff f0 	st.w	r7[-16],r8
80006506:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000650a:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
8000650e:	4b c8       	lddpc	r8,800065fc <sd_mmc_get_ext_csd+0x1bc>
80006510:	70 08       	ld.w	r8,r8[0x0]
80006512:	10 99       	mov	r9,r8
80006514:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006518:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000651c:	71 08       	ld.w	r8,r8[0x40]
8000651e:	f3 e8 10 08 	or	r8,r9,r8
80006522:	10 99       	mov	r9,r8
80006524:	4b 68       	lddpc	r8,800065fc <sd_mmc_get_ext_csd+0x1bc>
80006526:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006528:	4b 58       	lddpc	r8,800065fc <sd_mmc_get_ext_csd+0x1bc>
8000652a:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
8000652c:	e2 18 00 02 	andl	r8,0x2,COH
80006530:	5f 18       	srne	r8
80006532:	58 08       	cp.w	r8,0
80006534:	ce 50       	breq	800064fe <sd_mmc_get_ext_csd+0xbe>
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
80006536:	ef 39 ff e3 	ld.ub	r9,r7[-29]
8000653a:	32 68       	mov	r8,38
8000653c:	f0 09 18 00 	cp.b	r9,r8
80006540:	c1 c1       	brne	80006578 <sd_mmc_get_ext_csd+0x138>
80006542:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80006546:	4a f9       	lddpc	r9,80006600 <sd_mmc_get_ext_csd+0x1c0>
80006548:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000654c:	e2 18 00 20 	andl	r8,0x20,COH
80006550:	c1 40       	breq	80006578 <sd_mmc_get_ext_csd+0x138>
    {
      // If MMC HC then read Sector Count. Byte 212 is LSB, Byte 215 is MSB.
      val = mci_rd_data(mci);
80006552:	4a 68       	lddpc	r8,800065e8 <sd_mmc_get_ext_csd+0x1a8>
80006554:	70 08       	ld.w	r8,r8[0x0]
80006556:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
8000655a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000655e:	70 c8       	ld.w	r8,r8[0x30]
80006560:	ef 48 ff dc 	st.w	r7[-36],r8
      g_card_size[slot] = swap32(val);
80006564:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006568:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000656c:	5c b8       	swap.b	r8
8000656e:	10 9a       	mov	r10,r8
80006570:	4a 58       	lddpc	r8,80006604 <sd_mmc_get_ext_csd+0x1c4>
80006572:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  for (i = (512L/8); i!=0; i--)
  {
    while(!(mci_rx_ready(mci)));
    mci_rd_data(mci);
    while(!(mci_rx_ready(mci)));
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
80006576:	c2 58       	rjmp	800065c0 <sd_mmc_get_ext_csd+0x180>
      val = mci_rd_data(mci);
      g_card_size[slot] = swap32(val);
    }
    else
    {
      val = mci_rd_data(mci);
80006578:	49 c8       	lddpc	r8,800065e8 <sd_mmc_get_ext_csd+0x1a8>
8000657a:	70 08       	ld.w	r8,r8[0x0]
8000657c:	ef 48 ff fc 	st.w	r7[-4],r8
80006580:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006584:	70 c8       	ld.w	r8,r8[0x30]
80006586:	ef 48 ff dc 	st.w	r7[-36],r8
      if( (64-24) == i )
8000658a:	ef 39 ff e3 	ld.ub	r9,r7[-29]
8000658e:	32 88       	mov	r8,40
80006590:	f0 09 18 00 	cp.b	r9,r8
80006594:	c1 61       	brne	800065c0 <sd_mmc_get_ext_csd+0x180>
      {  // Read byte at offset 196
        if( MSB0(val) & 0x02 )
80006596:	ee c8 00 24 	sub	r8,r7,36
8000659a:	11 88       	ld.ub	r8,r8[0x0]
8000659c:	e2 18 00 02 	andl	r8,0x2,COH
800065a0:	c0 90       	breq	800065b2 <sd_mmc_get_ext_csd+0x172>
          g_card_freq[slot] = 52*1000;
800065a2:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800065a6:	49 99       	lddpc	r9,80006608 <sd_mmc_get_ext_csd+0x1c8>
800065a8:	fe 78 cb 20 	mov	r8,-13536
800065ac:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
800065b0:	c0 88       	rjmp	800065c0 <sd_mmc_get_ext_csd+0x180>
        else
          g_card_freq[slot] = 26*1000;
800065b2:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800065b6:	49 59       	lddpc	r9,80006608 <sd_mmc_get_ext_csd+0x1c8>
800065b8:	e0 68 65 90 	mov	r8,26000
800065bc:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
    return false;

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
800065c0:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800065c4:	20 18       	sub	r8,1
800065c6:	ef 68 ff e3 	st.b	r7[-29],r8
800065ca:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800065ce:	30 08       	mov	r8,0
800065d0:	f0 09 18 00 	cp.b	r9,r8
800065d4:	fe 91 ff 72 	brne	800064b8 <sd_mmc_get_ext_csd+0x78>
          g_card_freq[slot] = 26*1000;
      }
    }
  }

   return true;
800065d8:	30 18       	mov	r8,1
}
800065da:	10 9c       	mov	r12,r8
800065dc:	2f 6d       	sub	sp,-40
800065de:	e3 cd 80 80 	ldm	sp++,r7,pc
800065e2:	00 00       	add	r0,r0
800065e4:	00 00       	add	r0,r0
800065e6:	0d fc       	ld.ub	r12,r6[0x7]
800065e8:	00 00       	add	r0,r0
800065ea:	01 34       	ld.ub	r4,r0++
800065ec:	80 00       	ld.sh	r0,r0[0x0]
800065ee:	96 0c       	ld.sh	r12,r11[0x0]
800065f0:	80 00       	ld.sh	r0,r0[0x0]
800065f2:	93 f4       	st.w	r9[0x3c],r4
800065f4:	80 00       	ld.sh	r0,r0[0x0]
800065f6:	94 3e       	ld.sh	lr,r10[0x6]
800065f8:	80 00       	ld.sh	r0,r0[0x0]
800065fa:	94 74       	ld.sh	r4,r10[0xe]
800065fc:	00 00       	add	r0,r0
800065fe:	07 b0       	ld.ub	r0,r3[0x3]
80006600:	00 00       	add	r0,r0
80006602:	10 04       	add	r4,r8
80006604:	00 00       	add	r0,r0
80006606:	0b f4       	ld.ub	r4,r5[0x7]
80006608:	00 00       	add	r0,r0
8000660a:	0d fe       	ld.ub	lr,r6[0x7]

8000660c <sd_mmc_set_block_len>:

static bool  sd_mmc_set_block_len(uint8_t slot, uint16_t length )
{
8000660c:	eb cd 40 80 	pushm	r7,lr
80006610:	1a 97       	mov	r7,sp
80006612:	20 2d       	sub	sp,8
80006614:	18 99       	mov	r9,r12
80006616:	16 98       	mov	r8,r11
80006618:	ef 69 ff fc 	st.b	r7[-4],r9
8000661c:	ef 58 ff f8 	st.h	r7[-8],r8
  if (slot > MCI_LAST_SLOTS)
80006620:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006624:	30 18       	mov	r8,1
80006626:	f0 09 18 00 	cp.b	r9,r8
8000662a:	e0 88 00 04 	brls	80006632 <sd_mmc_set_block_len+0x26>
    return false;
8000662e:	30 08       	mov	r8,0
80006630:	c3 c8       	rjmp	800066a8 <sd_mmc_set_block_len+0x9c>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006632:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006636:	49 f9       	lddpc	r9,800066b0 <sd_mmc_set_block_len+0xa4>
80006638:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000663c:	10 9a       	mov	r10,r8
8000663e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006642:	49 d8       	lddpc	r8,800066b4 <sd_mmc_set_block_len+0xa8>
80006644:	70 08       	ld.w	r8,r8[0x0]
80006646:	12 9b       	mov	r11,r9
80006648:	10 9c       	mov	r12,r8
8000664a:	f0 1f 00 1c 	mcall	800066b8 <sd_mmc_set_block_len+0xac>

  if(mci_send_cmd(mci, SD_MMC_SET_BLOCKLEN_CMD, length)!=MCI_SUCCESS)
8000664e:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80006652:	49 98       	lddpc	r8,800066b4 <sd_mmc_set_block_len+0xa8>
80006654:	70 08       	ld.w	r8,r8[0x0]
80006656:	12 9a       	mov	r10,r9
80006658:	e0 6b 10 50 	mov	r11,4176
8000665c:	10 9c       	mov	r12,r8
8000665e:	f0 1f 00 18 	mcall	800066bc <sd_mmc_set_block_len+0xb0>
80006662:	18 98       	mov	r8,r12
80006664:	58 08       	cp.w	r8,0
80006666:	c0 30       	breq	8000666c <sd_mmc_set_block_len+0x60>
    return false;
80006668:	30 08       	mov	r8,0
8000666a:	c1 f8       	rjmp	800066a8 <sd_mmc_set_block_len+0x9c>

  // check response, card must be in TRAN state
  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
8000666c:	49 28       	lddpc	r8,800066b4 <sd_mmc_set_block_len+0xa8>
8000666e:	70 08       	ld.w	r8,r8[0x0]
80006670:	10 9c       	mov	r12,r8
80006672:	f0 1f 00 14 	mcall	800066c0 <sd_mmc_set_block_len+0xb4>
80006676:	18 98       	mov	r8,r12
80006678:	e4 18 e0 02 	andh	r8,0xe002
8000667c:	e0 18 0e 00 	andl	r8,0xe00
80006680:	e0 48 08 00 	cp.w	r8,2048
80006684:	c0 30       	breq	8000668a <sd_mmc_set_block_len+0x7e>
    return false;
80006686:	30 08       	mov	r8,0
80006688:	c1 08       	rjmp	800066a8 <sd_mmc_set_block_len+0x9c>

  mci_set_block_size(mci, length);
8000668a:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8000668e:	48 a8       	lddpc	r8,800066b4 <sd_mmc_set_block_len+0xa8>
80006690:	70 08       	ld.w	r8,r8[0x0]
80006692:	12 9b       	mov	r11,r9
80006694:	10 9c       	mov	r12,r8
80006696:	f0 1f 00 0c 	mcall	800066c4 <sd_mmc_set_block_len+0xb8>
  mci_set_block_count(mci, 1);
8000669a:	48 78       	lddpc	r8,800066b4 <sd_mmc_set_block_len+0xa8>
8000669c:	70 08       	ld.w	r8,r8[0x0]
8000669e:	30 1b       	mov	r11,1
800066a0:	10 9c       	mov	r12,r8
800066a2:	f0 1f 00 0a 	mcall	800066c8 <sd_mmc_set_block_len+0xbc>
  return true;
800066a6:	30 18       	mov	r8,1
}
800066a8:	10 9c       	mov	r12,r8
800066aa:	2f ed       	sub	sp,-8
800066ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800066b0:	00 00       	add	r0,r0
800066b2:	0d fc       	ld.ub	r12,r6[0x7]
800066b4:	00 00       	add	r0,r0
800066b6:	01 34       	ld.ub	r4,r0++
800066b8:	80 00       	ld.sh	r0,r0[0x0]
800066ba:	96 0c       	ld.sh	r12,r11[0x0]
800066bc:	80 00       	ld.sh	r0,r0[0x0]
800066be:	94 74       	ld.sh	r4,r10[0xe]
800066c0:	80 00       	ld.sh	r0,r0[0x0]
800066c2:	95 ac       	st.w	r10[0x28],r12
800066c4:	80 00       	ld.sh	r0,r0[0x0]
800066c6:	93 f4       	st.w	r9[0x3c],r4
800066c8:	80 00       	ld.sh	r0,r0[0x0]
800066ca:	94 3e       	ld.sh	lr,r10[0x6]

800066cc <sd_mmc_mci_init>:

bool sd_mmc_mci_init(unsigned char card_slot, long pbb_hz, long cpu_hz)
{
800066cc:	eb cd 40 80 	pushm	r7,lr
800066d0:	1a 97       	mov	r7,sp
800066d2:	20 5d       	sub	sp,20
800066d4:	18 98       	mov	r8,r12
800066d6:	ef 4b ff f0 	st.w	r7[-16],r11
800066da:	ef 4a ff ec 	st.w	r7[-20],r10
800066de:	ef 68 ff f4 	st.b	r7[-12],r8
    unsigned long                 scfg;
    avr32_hmatrix_scfg_t          SCFG;
  } u_avr32_hmatrix_scfg;

  // For the USBB DMA HMATRIX master, use infinite length burst.
  u_avr32_hmatrix_mcfg.mcfg = AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
800066e2:	fe 68 10 00 	mov	r8,-126976
800066e6:	70 68       	ld.w	r8,r8[0x18]
800066e8:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_hmatrix_mcfg.MCFG.ulbt = AVR32_HMATRIX_ULBT_INFINITE;
800066ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800066f0:	30 09       	mov	r9,0
800066f2:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800066f6:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] = u_avr32_hmatrix_mcfg.mcfg;
800066fa:	fe 68 10 00 	mov	r8,-126976
800066fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006702:	91 69       	st.w	r8[0x18],r9

  // For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
  u_avr32_hmatrix_scfg.scfg = AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
80006704:	fe 68 10 00 	mov	r8,-126976
80006708:	71 58       	ld.w	r8,r8[0x54]
8000670a:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.fixed_defmstr = AVR32_HMATRIX_MASTER_USBB_DMA;
8000670e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006712:	30 69       	mov	r9,6
80006714:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
80006718:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
8000671c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006720:	30 29       	mov	r9,2
80006722:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
80006726:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] = u_avr32_hmatrix_scfg.scfg;
8000672a:	fe 68 10 00 	mov	r8,-126976
8000672e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006732:	f1 49 00 54 	st.w	r8[84],r9

  g_pbb_hz = pbb_hz;
80006736:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000673a:	49 08       	lddpc	r8,80006778 <sd_mmc_mci_init+0xac>
8000673c:	91 09       	st.w	r8[0x0],r9
  g_cpu_hz = cpu_hz;
8000673e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006742:	48 f8       	lddpc	r8,8000677c <sd_mmc_mci_init+0xb0>
80006744:	91 09       	st.w	r8[0x0],r9

  // Init MCI controller
  if (mci_init(mci, card_slot, pbb_hz)!=MCI_SUCCESS)
80006746:	ee fa ff f0 	ld.w	r10,r7[-16]
8000674a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000674e:	48 d8       	lddpc	r8,80006780 <sd_mmc_mci_init+0xb4>
80006750:	70 08       	ld.w	r8,r8[0x0]
80006752:	12 9b       	mov	r11,r9
80006754:	10 9c       	mov	r12,r8
80006756:	f0 1f 00 0c 	mcall	80006784 <sd_mmc_mci_init+0xb8>
8000675a:	18 98       	mov	r8,r12
8000675c:	58 08       	cp.w	r8,0
8000675e:	c0 30       	breq	80006764 <sd_mmc_mci_init+0x98>
    return false;
80006760:	30 08       	mov	r8,0
80006762:	c0 78       	rjmp	80006770 <sd_mmc_mci_init+0xa4>

  // Default card initialization. This can be removed since the card init will
  // automatically be done when needed.
  sd_mmc_mci_card_init(card_slot);
80006764:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006768:	10 9c       	mov	r12,r8
8000676a:	f0 1f 00 08 	mcall	80006788 <sd_mmc_mci_init+0xbc>
  return true;
8000676e:	30 18       	mov	r8,1
}
80006770:	10 9c       	mov	r12,r8
80006772:	2f bd       	sub	sp,-20
80006774:	e3 cd 80 80 	ldm	sp++,r7,pc
80006778:	00 00       	add	r0,r0
8000677a:	06 18       	sub	r8,r3
8000677c:	00 00       	add	r0,r0
8000677e:	06 1c       	sub	r12,r3
80006780:	00 00       	add	r0,r0
80006782:	01 34       	ld.ub	r4,r0++
80006784:	80 00       	ld.sh	r0,r0[0x0]
80006786:	93 40       	st.w	r9[0x10],r0
80006788:	80 00       	ld.sh	r0,r0[0x0]
8000678a:	67 8c       	ld.w	r12,r3[0x60]

8000678c <sd_mmc_mci_card_init>:

bool sd_mmc_mci_card_init(unsigned char slot)
{
8000678c:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
80006790:	1a 97       	mov	r7,sp
80006792:	21 7d       	sub	sp,92
80006794:	18 98       	mov	r8,r12
80006796:	ef 68 ff a4 	st.b	r7[-92],r8
  uint32_t response;

  if (true == sd_mmc_mci_init_done[slot])
8000679a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000679e:	fe f9 08 7a 	ld.w	r9,pc[2170]
800067a2:	f2 08 07 08 	ld.ub	r8,r9[r8]
800067a6:	58 08       	cp.w	r8,0
800067a8:	c0 40       	breq	800067b0 <sd_mmc_mci_card_init+0x24>
    return true;
800067aa:	30 18       	mov	r8,1
800067ac:	e0 8f 04 31 	bral	8000700e <sd_mmc_mci_card_init+0x882>

  // Default card is not known.
  g_card_type[slot] = UNKNOWN_CARD;
800067b0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800067b4:	fe fa 08 68 	ld.w	r10,pc[2152]
800067b8:	30 08       	mov	r8,0
800067ba:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default bus size is 1 bit.
  g_card_bus_width[slot] = MCI_BUS_SIZE_1_BIT;
800067be:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800067c2:	fe fa 08 5e 	ld.w	r10,pc[2142]
800067c6:	30 08       	mov	r8,0
800067c8:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default card speed and disable High Speed mode.
  mci_init(mci, slot, g_pbb_hz);
800067cc:	fe f8 08 58 	ld.w	r8,pc[2136]
800067d0:	70 0a       	ld.w	r10,r8[0x0]
800067d2:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800067d6:	fe f8 08 52 	ld.w	r8,pc[2130]
800067da:	70 08       	ld.w	r8,r8[0x0]
800067dc:	12 9b       	mov	r11,r9
800067de:	10 9c       	mov	r12,r8
800067e0:	f0 1f 02 13 	mcall	8000702c <sd_mmc_mci_card_init+0x8a0>

  // Wait for 1ms, then wait for 74 more clock cycles (see MMC norms)
  if (mci_send_cmd(mci, SD_MMC_INIT_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800067e4:	fe f8 08 44 	ld.w	r8,pc[2116]
800067e8:	70 08       	ld.w	r8,r8[0x0]
800067ea:	3f fa       	mov	r10,-1
800067ec:	e0 6b 01 00 	mov	r11,256
800067f0:	10 9c       	mov	r12,r8
800067f2:	f0 1f 02 10 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
800067f6:	18 98       	mov	r8,r12
800067f8:	58 08       	cp.w	r8,0
800067fa:	c0 40       	breq	80006802 <sd_mmc_mci_card_init+0x76>
    return false;
800067fc:	30 08       	mov	r8,0
800067fe:	e0 8f 04 08 	bral	8000700e <sd_mmc_mci_card_init+0x882>

  //-- (CMD0)
  // Set card in idle state
  if (mci_send_cmd(mci, SD_MMC_GO_IDLE_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
80006802:	fe f8 08 26 	ld.w	r8,pc[2086]
80006806:	70 08       	ld.w	r8,r8[0x0]
80006808:	3f fa       	mov	r10,-1
8000680a:	30 0b       	mov	r11,0
8000680c:	10 9c       	mov	r12,r8
8000680e:	f0 1f 02 09 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
80006812:	18 98       	mov	r8,r12
80006814:	58 08       	cp.w	r8,0
80006816:	c0 50       	breq	80006820 <sd_mmc_mci_card_init+0x94>
    return false;
80006818:	30 08       	mov	r8,0
8000681a:	e0 8f 03 fa 	bral	8000700e <sd_mmc_mci_card_init+0x882>
    response = mci_read_response(mci);
    if( !(response & OCR_MSK_BUSY) )
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
8000681e:	d7 03       	nop
    return false;

sd_mmc_init_step1:
  // (CMD1)
  // To send its Operating Conditions Register contents command only supported by MMC card
  if(mci_send_cmd(mci, SD_MMC_MMC_SEND_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_ALL|OCR_MSK_HC)==MCI_SUCCESS)
80006820:	fe f8 08 08 	ld.w	r8,pc[2056]
80006824:	70 08       	ld.w	r8,r8[0x0]
80006826:	e0 6a 80 00 	mov	r10,32768
8000682a:	ea 1a c0 ff 	orh	r10,0xc0ff
8000682e:	e0 6b 08 41 	mov	r11,2113
80006832:	10 9c       	mov	r12,r8
80006834:	f0 1f 01 ff 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
80006838:	18 98       	mov	r8,r12
8000683a:	58 08       	cp.w	r8,0
8000683c:	c2 a1       	brne	80006890 <sd_mmc_mci_card_init+0x104>
  {
    // MMC cards always respond to MMC_SEND_OP_COND
    g_card_type[slot] = MMC_CARD;
8000683e:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006842:	fe fa 07 da 	ld.w	r10,pc[2010]
80006846:	30 18       	mov	r8,1
80006848:	f4 09 0b 08 	st.b	r10[r9],r8
    response = mci_read_response(mci);
8000684c:	fe f8 07 dc 	ld.w	r8,pc[2012]
80006850:	70 08       	ld.w	r8,r8[0x0]
80006852:	10 9c       	mov	r12,r8
80006854:	f0 1f 01 f8 	mcall	80007034 <sd_mmc_mci_card_init+0x8a8>
80006858:	18 98       	mov	r8,r12
8000685a:	ef 48 ff c0 	st.w	r7[-64],r8
    if( !(response & OCR_MSK_BUSY) )
8000685e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006862:	58 08       	cp.w	r8,0
80006864:	cd d4       	brge	8000681e <sd_mmc_mci_card_init+0x92>
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
80006866:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000686a:	e6 18 40 00 	andh	r8,0x4000,COH
8000686e:	e0 80 00 97 	breq	8000699c <sd_mmc_mci_card_init+0x210>
    {
      g_card_type[slot] |= MMC_CARD_HC;
80006872:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006876:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000687a:	fe fa 07 a2 	ld.w	r10,pc[1954]
8000687e:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006882:	a5 b8       	sbr	r8,0x5
80006884:	5c 58       	castu.b	r8
80006886:	fe fa 07 96 	ld.w	r10,pc[1942]
8000688a:	f4 09 0b 08 	st.b	r10[r9],r8
8000688e:	c8 88       	rjmp	8000699e <sd_mmc_mci_card_init+0x212>
    }
  }
  else
  {
    // SD cards do not respond to MMC_SEND_OP_COND
    g_card_type[slot] = SD_CARD;
80006890:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006894:	fe fa 07 88 	ld.w	r10,pc[1928]
80006898:	30 28       	mov	r8,2
8000689a:	f4 09 0b 08 	st.b	r10[r9],r8

    //-- (CMD8)
    // enables to expand new functionality to some existing commands supported only by SD HC card
    if (mci_send_cmd(mci, SD_MMC_SD_SEND_IF_COND_CMD, 0x000001AA)==MCI_SUCCESS)
8000689e:	fe f8 07 8a 	ld.w	r8,pc[1930]
800068a2:	70 08       	ld.w	r8,r8[0x0]
800068a4:	e0 6a 01 aa 	mov	r10,426
800068a8:	e0 6b 10 48 	mov	r11,4168
800068ac:	10 9c       	mov	r12,r8
800068ae:	f0 1f 01 e1 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
800068b2:	18 98       	mov	r8,r12
800068b4:	58 08       	cp.w	r8,0
800068b6:	c1 b1       	brne	800068ec <sd_mmc_mci_card_init+0x160>
    {
      // It is a SD HC
      if( 0x000001AA == mci_read_response(mci))
800068b8:	fe f8 07 70 	ld.w	r8,pc[1904]
800068bc:	70 08       	ld.w	r8,r8[0x0]
800068be:	10 9c       	mov	r12,r8
800068c0:	f0 1f 01 dd 	mcall	80007034 <sd_mmc_mci_card_init+0x8a8>
800068c4:	18 98       	mov	r8,r12
800068c6:	e0 48 01 aa 	cp.w	r8,426
800068ca:	c1 11       	brne	800068ec <sd_mmc_mci_card_init+0x160>
      {
        g_card_type[slot] |= SD_CARD_V2;
800068cc:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800068d0:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800068d4:	fe fa 07 48 	ld.w	r10,pc[1864]
800068d8:	f4 08 07 08 	ld.ub	r8,r10[r8]
800068dc:	a3 b8       	sbr	r8,0x3
800068de:	5c 58       	castu.b	r8
800068e0:	fe fa 07 3c 	ld.w	r10,pc[1852]
800068e4:	f4 09 0b 08 	st.b	r10[r9],r8
800068e8:	c0 28       	rjmp	800068ec <sd_mmc_mci_card_init+0x160>
    response = mci_read_response(mci);

    if( !(response & OCR_MSK_BUSY) )
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
800068ea:	d7 03       	nop

sd_mmc_init_step2:
    //-- (CMD55)
    // Indicates to the card that the next command is an application specific command rather than a standard command
    // CMD55 shall always precede ACMD41
    if (mci_send_cmd(mci, SD_MMC_APP_CMD, 0)!=MCI_SUCCESS)
800068ec:	fe f8 07 3c 	ld.w	r8,pc[1852]
800068f0:	70 08       	ld.w	r8,r8[0x0]
800068f2:	30 0a       	mov	r10,0
800068f4:	e0 6b 10 77 	mov	r11,4215
800068f8:	10 9c       	mov	r12,r8
800068fa:	f0 1f 01 ce 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
800068fe:	18 98       	mov	r8,r12
80006900:	58 08       	cp.w	r8,0
80006902:	c0 40       	breq	8000690a <sd_mmc_mci_card_init+0x17e>
      return false;
80006904:	30 08       	mov	r8,0
80006906:	e0 8f 03 84 	bral	8000700e <sd_mmc_mci_card_init+0x882>

    //-- (ACMD41)
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
8000690a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000690e:	fe f9 07 0e 	ld.w	r9,pc[1806]
80006912:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006916:	e2 18 00 08 	andl	r8,0x8,COH
8000691a:	c1 00       	breq	8000693a <sd_mmc_mci_card_init+0x1ae>
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
8000691c:	fe f8 07 0c 	ld.w	r8,pc[1804]
80006920:	70 08       	ld.w	r8,r8[0x0]
80006922:	fc 1a c0 10 	movh	r10,0xc010
80006926:	36 9b       	mov	r11,105
80006928:	10 9c       	mov	r12,r8
8000692a:	f0 1f 01 c2 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
8000692e:	18 98       	mov	r8,r12
80006930:	58 08       	cp.w	r8,0
80006932:	c1 30       	breq	80006958 <sd_mmc_mci_card_init+0x1cc>
        return false;
80006934:	30 08       	mov	r8,0
80006936:	e0 8f 03 6c 	bral	8000700e <sd_mmc_mci_card_init+0x882>
    }
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
8000693a:	fe f8 06 ee 	ld.w	r8,pc[1774]
8000693e:	70 08       	ld.w	r8,r8[0x0]
80006940:	fc 1a 80 10 	movh	r10,0x8010
80006944:	36 9b       	mov	r11,105
80006946:	10 9c       	mov	r12,r8
80006948:	f0 1f 01 ba 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
8000694c:	18 98       	mov	r8,r12
8000694e:	58 08       	cp.w	r8,0
80006950:	c0 50       	breq	8000695a <sd_mmc_mci_card_init+0x1ce>
        return false;
80006952:	30 08       	mov	r8,0
80006954:	e0 8f 03 5d 	bral	8000700e <sd_mmc_mci_card_init+0x882>
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
        return false;
80006958:	d7 03       	nop
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
        return false;
    }
    response = mci_read_response(mci);
8000695a:	fe f8 06 ce 	ld.w	r8,pc[1742]
8000695e:	70 08       	ld.w	r8,r8[0x0]
80006960:	10 9c       	mov	r12,r8
80006962:	f0 1f 01 b5 	mcall	80007034 <sd_mmc_mci_card_init+0x8a8>
80006966:	18 98       	mov	r8,r12
80006968:	ef 48 ff c0 	st.w	r7[-64],r8

    if( !(response & OCR_MSK_BUSY) )
8000696c:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006970:	58 08       	cp.w	r8,0
80006972:	cb c4       	brge	800068ea <sd_mmc_mci_card_init+0x15e>
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
    }
    // Card read then check HC type
    if (response & OCR_MSK_HC)
80006974:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006978:	e6 18 40 00 	andh	r8,0x4000,COH
8000697c:	c1 10       	breq	8000699e <sd_mmc_mci_card_init+0x212>
    {
      g_card_type[slot] |= SD_CARD_HC;  // Card SD High Capacity
8000697e:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006982:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006986:	fe fa 06 96 	ld.w	r10,pc[1686]
8000698a:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000698e:	a5 a8       	sbr	r8,0x4
80006990:	5c 58       	castu.b	r8
80006992:	fe fa 06 8a 	ld.w	r10,pc[1674]
80006996:	f4 09 0b 08 	st.b	r10[r9],r8
8000699a:	c0 28       	rjmp	8000699e <sd_mmc_mci_card_init+0x212>
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
    {
      g_card_type[slot] |= MMC_CARD_HC;
8000699c:	d7 03       	nop

  // Here card ready and type (MMC <V4, MMC V4, MMC HC, SD V1, SD V2 HC) detected

  //-- (CMD2)
  // Send CID
  if (mci_send_cmd(mci, SD_MMC_ALL_SEND_CID_CMD, 0)!=MCI_SUCCESS)
8000699e:	fe f8 06 8a 	ld.w	r8,pc[1674]
800069a2:	70 08       	ld.w	r8,r8[0x0]
800069a4:	30 0a       	mov	r10,0
800069a6:	e0 6b 00 82 	mov	r11,130
800069aa:	10 9c       	mov	r12,r8
800069ac:	f0 1f 01 a1 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
800069b0:	18 98       	mov	r8,r12
800069b2:	58 08       	cp.w	r8,0
800069b4:	c0 40       	breq	800069bc <sd_mmc_mci_card_init+0x230>
    return false;
800069b6:	30 08       	mov	r8,0
800069b8:	e0 8f 03 2b 	bral	8000700e <sd_mmc_mci_card_init+0x882>

  //-- (CMD3)
  // Set relative address
  if(MMC_CARD & g_card_type[slot])
800069bc:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800069c0:	fe f9 06 5c 	ld.w	r9,pc[1628]
800069c4:	f2 08 07 08 	ld.ub	r8,r9[r8]
800069c8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800069cc:	5c 58       	castu.b	r8
800069ce:	c1 90       	breq	80006a00 <sd_mmc_mci_card_init+0x274>
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
800069d0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800069d4:	fe f8 06 64 	ld.w	r8,pc[1636]
800069d8:	e0 7a ff ff 	mov	r10,131071
800069dc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
800069e0:	fe f8 06 48 	ld.w	r8,pc[1608]
800069e4:	70 08       	ld.w	r8,r8[0x0]
800069e6:	e0 7a ff ff 	mov	r10,131071
800069ea:	e0 6b 10 43 	mov	r11,4163
800069ee:	10 9c       	mov	r12,r8
800069f0:	f0 1f 01 90 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
800069f4:	18 98       	mov	r8,r12
800069f6:	58 08       	cp.w	r8,0
800069f8:	c1 30       	breq	80006a1e <sd_mmc_mci_card_init+0x292>
      return false;
800069fa:	30 08       	mov	r8,0
800069fc:	e0 8f 03 09 	bral	8000700e <sd_mmc_mci_card_init+0x882>
  }
  else
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
80006a00:	fe f8 06 28 	ld.w	r8,pc[1576]
80006a04:	70 08       	ld.w	r8,r8[0x0]
80006a06:	30 0a       	mov	r10,0
80006a08:	e0 6b 10 43 	mov	r11,4163
80006a0c:	10 9c       	mov	r12,r8
80006a0e:	f0 1f 01 89 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
80006a12:	18 98       	mov	r8,r12
80006a14:	58 08       	cp.w	r8,0
80006a16:	c0 50       	breq	80006a20 <sd_mmc_mci_card_init+0x294>
      return false;
80006a18:	30 08       	mov	r8,0
80006a1a:	e0 8f 02 fa 	bral	8000700e <sd_mmc_mci_card_init+0x882>
  if(MMC_CARD & g_card_type[slot])
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
      return false;
80006a1e:	d7 03       	nop
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
      return false;
  }
  if (SD_CARD & g_card_type[slot])
80006a20:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a24:	fe f9 05 f8 	ld.w	r9,pc[1528]
80006a28:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006a2c:	e2 18 00 02 	andl	r8,0x2,COH
80006a30:	c1 10       	breq	80006a52 <sd_mmc_mci_card_init+0x2c6>
  {
    // For SD  card, you receive address of card
    g_card_rca[slot] = mci_read_response(mci) & RCA_MSK_ADR ;
80006a32:	ef 36 ff a4 	ld.ub	r6,r7[-92]
80006a36:	fe f8 05 f2 	ld.w	r8,pc[1522]
80006a3a:	70 08       	ld.w	r8,r8[0x0]
80006a3c:	10 9c       	mov	r12,r8
80006a3e:	f0 1f 01 7e 	mcall	80007034 <sd_mmc_mci_card_init+0x8a8>
80006a42:	18 98       	mov	r8,r12
80006a44:	10 99       	mov	r9,r8
80006a46:	e0 19 00 00 	andl	r9,0x0
80006a4a:	fe f8 05 ee 	ld.w	r8,pc[1518]
80006a4e:	f0 06 09 29 	st.w	r8[r6<<0x2],r9
  }


  //-- (CMD9)
  // Read & analyze CSD register
  if (sd_mmc_mci_get_csd(slot)!=true)
80006a52:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a56:	10 9c       	mov	r12,r8
80006a58:	f0 1f 01 79 	mcall	8000703c <sd_mmc_mci_card_init+0x8b0>
80006a5c:	18 98       	mov	r8,r12
80006a5e:	ec 18 00 01 	eorl	r8,0x1
80006a62:	5c 58       	castu.b	r8
80006a64:	c0 40       	breq	80006a6c <sd_mmc_mci_card_init+0x2e0>
    return false;
80006a66:	30 08       	mov	r8,0
80006a68:	e0 8f 02 d3 	bral	8000700e <sd_mmc_mci_card_init+0x882>


  //-- (CMD7)-R1b
  // select card
  if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006a6c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006a70:	fe f8 05 c8 	ld.w	r8,pc[1480]
80006a74:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006a78:	fe f8 05 b0 	ld.w	r8,pc[1456]
80006a7c:	70 08       	ld.w	r8,r8[0x0]
80006a7e:	12 9a       	mov	r10,r9
80006a80:	e0 6b 10 c7 	mov	r11,4295
80006a84:	10 9c       	mov	r12,r8
80006a86:	f0 1f 01 6b 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
80006a8a:	18 98       	mov	r8,r12
80006a8c:	58 08       	cp.w	r8,0
80006a8e:	c0 40       	breq	80006a96 <sd_mmc_mci_card_init+0x30a>
    return false;
80006a90:	30 08       	mov	r8,0
80006a92:	e0 8f 02 be 	bral	8000700e <sd_mmc_mci_card_init+0x882>

  // Wait end of busy
  mci_wait_busy_signal(mci);// read busy state on DAT0
80006a96:	fe f8 05 92 	ld.w	r8,pc[1426]
80006a9a:	70 08       	ld.w	r8,r8[0x0]
80006a9c:	10 9c       	mov	r12,r8
80006a9e:	f0 1f 01 69 	mcall	80007040 <sd_mmc_mci_card_init+0x8b4>

  // Get clock by checking the extended CSD register
  if (MMC_CARD_V4 & g_card_type[slot])
80006aa2:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006aa6:	fe f9 05 76 	ld.w	r9,pc[1398]
80006aaa:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006aae:	e2 18 00 04 	andl	r8,0x4,COH
80006ab2:	c0 e0       	breq	80006ace <sd_mmc_mci_card_init+0x342>
  {
    // Get clock (MMC V4) and size (MMC V4 HC) by checking the extended CSD register
      //-- (CMD8)
    if (sd_mmc_get_ext_csd(slot)!=true)
80006ab4:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006ab8:	10 9c       	mov	r12,r8
80006aba:	f0 1f 01 63 	mcall	80007044 <sd_mmc_mci_card_init+0x8b8>
80006abe:	18 98       	mov	r8,r12
80006ac0:	ec 18 00 01 	eorl	r8,0x1
80006ac4:	5c 58       	castu.b	r8
80006ac6:	c0 40       	breq	80006ace <sd_mmc_mci_card_init+0x342>
         return false;
80006ac8:	30 08       	mov	r8,0
80006aca:	e0 8f 02 a2 	bral	8000700e <sd_mmc_mci_card_init+0x882>
  }


#if (SD_4_BIT == ENABLE)
  // set bus size
  if (SD_CARD & g_card_type[slot])
80006ace:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006ad2:	fe f9 05 4a 	ld.w	r9,pc[1354]
80006ad6:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006ada:	e2 18 00 02 	andl	r8,0x2,COH
80006ade:	c4 00       	breq	80006b5e <sd_mmc_mci_card_init+0x3d2>
  {
    // set 4-bit bus for SD Card
    //-- (CMD55)
    if(mci_send_cmd(mci, SD_MMC_APP_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006ae0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006ae4:	fe f8 05 54 	ld.w	r8,pc[1364]
80006ae8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006aec:	fe f8 05 3c 	ld.w	r8,pc[1340]
80006af0:	70 08       	ld.w	r8,r8[0x0]
80006af2:	12 9a       	mov	r10,r9
80006af4:	e0 6b 10 77 	mov	r11,4215
80006af8:	10 9c       	mov	r12,r8
80006afa:	f0 1f 01 4e 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
80006afe:	18 98       	mov	r8,r12
80006b00:	58 08       	cp.w	r8,0
80006b02:	c0 40       	breq	80006b0a <sd_mmc_mci_card_init+0x37e>
      return false;
80006b04:	30 08       	mov	r8,0
80006b06:	e0 8f 02 84 	bral	8000700e <sd_mmc_mci_card_init+0x882>

    //-- (CMD6)
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
80006b0a:	fe f8 05 1e 	ld.w	r8,pc[1310]
80006b0e:	70 08       	ld.w	r8,r8[0x0]
80006b10:	30 2a       	mov	r10,2
80006b12:	e0 6b 10 46 	mov	r11,4166
80006b16:	10 9c       	mov	r12,r8
80006b18:	f0 1f 01 46 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
80006b1c:	18 98       	mov	r8,r12
80006b1e:	58 08       	cp.w	r8,0
80006b20:	c0 40       	breq	80006b28 <sd_mmc_mci_card_init+0x39c>
      return false;
80006b22:	30 08       	mov	r8,0
80006b24:	e0 8f 02 75 	bral	8000700e <sd_mmc_mci_card_init+0x882>

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
80006b28:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006b2c:	fe fa 04 f4 	ld.w	r10,pc[1268]
80006b30:	30 28       	mov	r8,2
80006b32:	f4 09 0b 08 	st.b	r10[r9],r8
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
80006b36:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006b3a:	fe f9 04 e6 	ld.w	r9,pc[1254]
80006b3e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006b42:	10 99       	mov	r9,r8
80006b44:	fe f8 04 e4 	ld.w	r8,pc[1252]
80006b48:	70 08       	ld.w	r8,r8[0x0]
80006b4a:	12 9b       	mov	r11,r9
80006b4c:	10 9c       	mov	r12,r8
80006b4e:	f0 1f 01 3f 	mcall	80007048 <sd_mmc_mci_card_init+0x8bc>
80006b52:	18 98       	mov	r8,r12
80006b54:	58 08       	cp.w	r8,0
80006b56:	c4 00       	breq	80006bd6 <sd_mmc_mci_card_init+0x44a>
      return false;
80006b58:	30 08       	mov	r8,0
80006b5a:	e0 8f 02 5a 	bral	8000700e <sd_mmc_mci_card_init+0x882>
  }
  else // MMC bus width management
  {
    // set 8-bit bus for MMC Card
    if (MMC_CARD_V4 & g_card_type[slot])
80006b5e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006b62:	fe f9 04 ba 	ld.w	r9,pc[1210]
80006b66:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006b6a:	e2 18 00 04 	andl	r8,0x4,COH
80006b6e:	c3 50       	breq	80006bd8 <sd_mmc_mci_card_init+0x44c>
    {
      //-- (CMD6)-R1b
      // set 8-bit bus width (appeared from V4.0 specification)
      if (mci_send_cmd( mci,
80006b70:	fe f8 04 b8 	ld.w	r8,pc[1208]
80006b74:	70 08       	ld.w	r8,r8[0x0]
80006b76:	e0 6a 02 03 	mov	r10,515
80006b7a:	ea 1a 03 b7 	orh	r10,0x3b7
80006b7e:	e0 6b 10 c6 	mov	r11,4294
80006b82:	10 9c       	mov	r12,r8
80006b84:	f0 1f 01 2b 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
80006b88:	18 98       	mov	r8,r12
80006b8a:	58 08       	cp.w	r8,0
80006b8c:	c0 40       	breq	80006b94 <sd_mmc_mci_card_init+0x408>
                        ( (uint32_t)MMC_SWITCH_WRITE     <<24)|
                          ((uint32_t)MMC_SWITCH_BUS_WIDTH<<16)|
                          ((uint32_t)MMC_SWITCH_VAL_8BIT << 8)|
                          ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
80006b8e:	30 08       	mov	r8,0
80006b90:	e0 8f 02 3f 	bral	8000700e <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006b94:	fe f8 04 94 	ld.w	r8,pc[1172]
80006b98:	70 08       	ld.w	r8,r8[0x0]
80006b9a:	10 9c       	mov	r12,r8
80006b9c:	f0 1f 01 29 	mcall	80007040 <sd_mmc_mci_card_init+0x8b4>
      g_card_bus_width[slot] = MCI_BUS_SIZE_8_BIT;
80006ba0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006ba4:	fe fa 04 7c 	ld.w	r10,pc[1148]
80006ba8:	30 38       	mov	r8,3
80006baa:	f4 09 0b 08 	st.b	r10[r9],r8
      if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
80006bae:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006bb2:	fe f9 04 6e 	ld.w	r9,pc[1134]
80006bb6:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006bba:	10 99       	mov	r9,r8
80006bbc:	fe f8 04 6c 	ld.w	r8,pc[1132]
80006bc0:	70 08       	ld.w	r8,r8[0x0]
80006bc2:	12 9b       	mov	r11,r9
80006bc4:	10 9c       	mov	r12,r8
80006bc6:	f0 1f 01 21 	mcall	80007048 <sd_mmc_mci_card_init+0x8bc>
80006bca:	18 98       	mov	r8,r12
80006bcc:	58 08       	cp.w	r8,0
80006bce:	c0 50       	breq	80006bd8 <sd_mmc_mci_card_init+0x44c>
       return false;
80006bd0:	30 08       	mov	r8,0
80006bd2:	e0 8f 02 1e 	bral	8000700e <sd_mmc_mci_card_init+0x882>
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
      return false;

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
      return false;
80006bd6:	d7 03       	nop
       return false;
    }
  }
#endif

   if (MMC_CARD_V4 & g_card_type[slot])
80006bd8:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006bdc:	fe f9 04 40 	ld.w	r9,pc[1088]
80006be0:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006be4:	e2 18 00 04 	andl	r8,0x4,COH
80006be8:	c1 90       	breq	80006c1a <sd_mmc_mci_card_init+0x48e>
   {
      //-- (CMD6)-R1b
      // set high speed interface timing
      if (mci_send_cmd( mci,
80006bea:	fe f8 04 3e 	ld.w	r8,pc[1086]
80006bee:	70 08       	ld.w	r8,r8[0x0]
80006bf0:	e0 6a 01 03 	mov	r10,259
80006bf4:	ea 1a 03 b9 	orh	r10,0x3b9
80006bf8:	e0 6b 10 c6 	mov	r11,4294
80006bfc:	10 9c       	mov	r12,r8
80006bfe:	f0 1f 01 0d 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
80006c02:	18 98       	mov	r8,r12
80006c04:	58 08       	cp.w	r8,0
80006c06:	c0 40       	breq	80006c0e <sd_mmc_mci_card_init+0x482>
                        ((uint32_t)MMC_SWITCH_WRITE     <<24)|
                        ((uint32_t)MMC_SWITCH_HIGH_SPEED<<16)|
                        ((uint32_t)MMC_SWITCH_VAL_HS    << 8)|
                        ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
80006c08:	30 08       	mov	r8,0
80006c0a:	e0 8f 02 02 	bral	8000700e <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);
80006c0e:	fe f8 04 1a 	ld.w	r8,pc[1050]
80006c12:	70 08       	ld.w	r8,r8[0x0]
80006c14:	10 9c       	mov	r12,r8
80006c16:	f0 1f 01 0b 	mcall	80007040 <sd_mmc_mci_card_init+0x8b4>
   }


   if( SD_CARD_V2 & g_card_type[slot] )
80006c1a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006c1e:	fe f9 03 fe 	ld.w	r9,pc[1022]
80006c22:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006c26:	e2 18 00 08 	andl	r8,0x8,COH
80006c2a:	e0 80 01 ae 	breq	80006f86 <sd_mmc_mci_card_init+0x7fa>
#define SDMMC_SWITCH_FUNC_G3_KEEP     (0xf << 8)  /**< Group 3 No influence */
#define SDMMC_SWITCH_FUNC_G4_KEEP     (0xf << 12) /**< Group 4 No influence */
#define SDMMC_SWITCH_FUNC_G5_KEEP     (0xf << 16) /**< Group 5 No influence */
#define SDMMC_SWITCH_FUNC_G6_KEEP     (0xf << 20) /**< Group 6 No influence */

      mci_set_block_size(mci, 512/8); // CMD6 512 bits status
80006c2e:	fe f8 03 fa 	ld.w	r8,pc[1018]
80006c32:	70 08       	ld.w	r8,r8[0x0]
80006c34:	34 0b       	mov	r11,64
80006c36:	10 9c       	mov	r12,r8
80006c38:	f0 1f 01 05 	mcall	8000704c <sd_mmc_mci_card_init+0x8c0>
      mci_set_block_count(mci, 1);
80006c3c:	fe f8 03 ec 	ld.w	r8,pc[1004]
80006c40:	70 08       	ld.w	r8,r8[0x0]
80006c42:	30 1b       	mov	r11,1
80006c44:	10 9c       	mov	r12,r8
80006c46:	f0 1f 01 03 	mcall	80007050 <sd_mmc_mci_card_init+0x8c4>

      //-- (CMD6)
      // Check if we can enter into the High Speed mode.
      if (mci_send_cmd( mci
80006c4a:	fe f8 03 de 	ld.w	r8,pc[990]
80006c4e:	70 08       	ld.w	r8,r8[0x0]
80006c50:	30 1a       	mov	r10,1
80006c52:	e4 7b 10 46 	mov	r11,331846
80006c56:	10 9c       	mov	r12,r8
80006c58:	f0 1f 00 f6 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
80006c5c:	18 98       	mov	r8,r12
80006c5e:	58 08       	cp.w	r8,0
80006c60:	c0 40       	breq	80006c68 <sd_mmc_mci_card_init+0x4dc>
                      , SD_SWITCH_FUNC
                      , SDMMC_SWITCH_FUNC_MODE_CHECK | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006c62:	30 08       	mov	r8,0
80006c64:	e0 8f 01 d5 	bral	8000700e <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006c68:	fe f8 03 c0 	ld.w	r8,pc[960]
80006c6c:	70 08       	ld.w	r8,r8[0x0]
80006c6e:	10 9c       	mov	r12,r8
80006c70:	f0 1f 00 f4 	mcall	80007040 <sd_mmc_mci_card_init+0x8b4>

      bool b_hs_supported=false;
80006c74:	30 08       	mov	r8,0
80006c76:	ef 68 ff c5 	st.b	r7[-59],r8
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006c7a:	30 08       	mov	r8,0
80006c7c:	ef 68 ff c6 	st.b	r7[-58],r8
80006c80:	c4 18       	rjmp	80006d02 <sd_mmc_mci_card_init+0x576>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006c82:	fe f8 03 a6 	ld.w	r8,pc[934]
80006c86:	70 08       	ld.w	r8,r8[0x0]
80006c88:	ef 48 ff c8 	st.w	r7[-56],r8
80006c8c:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006c90:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006c94:	fe f8 03 c0 	ld.w	r8,pc[960]
80006c98:	70 08       	ld.w	r8,r8[0x0]
80006c9a:	10 99       	mov	r9,r8
80006c9c:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006ca0:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006ca4:	71 08       	ld.w	r8,r8[0x40]
80006ca6:	f3 e8 10 08 	or	r8,r9,r8
80006caa:	10 99       	mov	r9,r8
80006cac:	fe f8 03 a8 	ld.w	r8,pc[936]
80006cb0:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006cb2:	fe f8 03 a2 	ld.w	r8,pc[930]
80006cb6:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006cb8:	e2 18 00 02 	andl	r8,0x2,COH
80006cbc:	5f 18       	srne	r8
80006cbe:	58 08       	cp.w	r8,0
80006cc0:	ce 10       	breq	80006c82 <sd_mmc_mci_card_init+0x4f6>
          data = mci_rd_data(mci);
80006cc2:	fe f8 03 66 	ld.w	r8,pc[870]
80006cc6:	70 08       	ld.w	r8,r8[0x0]
80006cc8:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006ccc:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006cd0:	70 c8       	ld.w	r8,r8[0x30]
80006cd2:	ef 48 ff ac 	st.w	r7[-84],r8
          if(i==16)
80006cd6:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006cda:	31 08       	mov	r8,16
80006cdc:	f0 09 18 00 	cp.b	r9,r8
80006ce0:	c0 c1       	brne	80006cf8 <sd_mmc_mci_card_init+0x56c>
          {
            if(((data>>24)&0xf)==1)
80006ce2:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006ce6:	b9 88       	lsr	r8,0x18
80006ce8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006cec:	58 18       	cp.w	r8,1
80006cee:	c1 21       	brne	80006d12 <sd_mmc_mci_card_init+0x586>
              b_hs_supported = true;
80006cf0:	30 18       	mov	r8,1
80006cf2:	ef 68 ff c5 	st.b	r7[-59],r8
            break;
80006cf6:	c0 f8       	rjmp	80006d14 <sd_mmc_mci_card_init+0x588>
      mci_wait_busy_signal(mci);// read busy state on DAT0

      bool b_hs_supported=false;
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006cf8:	ef 38 ff c6 	ld.ub	r8,r7[-58]
80006cfc:	2f c8       	sub	r8,-4
80006cfe:	ef 68 ff c6 	st.b	r7[-58],r8
80006d02:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006d06:	33 f8       	mov	r8,63
80006d08:	f0 09 18 00 	cp.b	r9,r8
80006d0c:	fe 98 ff bb 	brls	80006c82 <sd_mmc_mci_card_init+0x4f6>
80006d10:	c0 28       	rjmp	80006d14 <sd_mmc_mci_card_init+0x588>
          data = mci_rd_data(mci);
          if(i==16)
          {
            if(((data>>24)&0xf)==1)
              b_hs_supported = true;
            break;
80006d12:	d7 03       	nop
          }
        }
      }

      if (b_hs_supported==false )
80006d14:	ef 38 ff c5 	ld.ub	r8,r7[-59]
80006d18:	ec 18 00 01 	eorl	r8,0x1
80006d1c:	5c 58       	castu.b	r8
80006d1e:	e0 81 01 33 	brne	80006f84 <sd_mmc_mci_card_init+0x7f8>
        goto sd_mmc_init_step3;

      if (mci_send_cmd( mci
80006d22:	fe f8 03 06 	ld.w	r8,pc[774]
80006d26:	70 08       	ld.w	r8,r8[0x0]
80006d28:	e0 6a ff f1 	mov	r10,65521
80006d2c:	ea 1a 80 ff 	orh	r10,0x80ff
80006d30:	e4 7b 10 46 	mov	r11,331846
80006d34:	10 9c       	mov	r12,r8
80006d36:	f0 1f 00 bf 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
80006d3a:	18 98       	mov	r8,r12
80006d3c:	58 08       	cp.w	r8,0
80006d3e:	c0 40       	breq	80006d46 <sd_mmc_mci_card_init+0x5ba>
                      | SDMMC_SWITCH_FUNC_G3_KEEP
                      | SDMMC_SWITCH_FUNC_G2_KEEP
                      | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006d40:	30 08       	mov	r8,0
80006d42:	e0 8f 01 66 	bral	8000700e <sd_mmc_mci_card_init+0x882>
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006d46:	30 08       	mov	r8,0
80006d48:	ef 68 ff c7 	st.b	r7[-57],r8
80006d4c:	c3 08       	rjmp	80006dac <sd_mmc_mci_card_init+0x620>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006d4e:	fe f8 02 da 	ld.w	r8,pc[730]
80006d52:	70 08       	ld.w	r8,r8[0x0]
80006d54:	ef 48 ff d4 	st.w	r7[-44],r8
80006d58:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006d5c:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006d60:	fe f8 02 f4 	ld.w	r8,pc[756]
80006d64:	70 08       	ld.w	r8,r8[0x0]
80006d66:	10 99       	mov	r9,r8
80006d68:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006d6c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006d70:	71 08       	ld.w	r8,r8[0x40]
80006d72:	f3 e8 10 08 	or	r8,r9,r8
80006d76:	10 99       	mov	r9,r8
80006d78:	fe f8 02 dc 	ld.w	r8,pc[732]
80006d7c:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006d7e:	fe f8 02 d6 	ld.w	r8,pc[726]
80006d82:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006d84:	e2 18 00 02 	andl	r8,0x2,COH
80006d88:	5f 18       	srne	r8
80006d8a:	58 08       	cp.w	r8,0
80006d8c:	ce 10       	breq	80006d4e <sd_mmc_mci_card_init+0x5c2>
          data = mci_rd_data(mci);
80006d8e:	fe f8 02 9a 	ld.w	r8,pc[666]
80006d92:	70 08       	ld.w	r8,r8[0x0]
80006d94:	ef 48 ff dc 	st.w	r7[-36],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006d98:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006d9c:	70 c8       	ld.w	r8,r8[0x30]
80006d9e:	ef 48 ff a8 	st.w	r7[-88],r8
      {
        return false;
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006da2:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006da6:	2f c8       	sub	r8,-4
80006da8:	ef 68 ff c7 	st.b	r7[-57],r8
80006dac:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006db0:	33 f8       	mov	r8,63
80006db2:	f0 09 18 00 	cp.b	r9,r8
80006db6:	fe 98 ff cc 	brls	80006d4e <sd_mmc_mci_card_init+0x5c2>

      /* A 8 cycle delay is required after switch command
       * @ 200KHz clock this should be 40 uS, but we use
       * 80 to handle imprecise clock setting.
       */
      cpu_delay_us(80, g_cpu_hz);
80006dba:	fe f8 02 9e 	ld.w	r8,pc[670]
80006dbe:	70 08       	ld.w	r8,r8[0x0]
80006dc0:	35 09       	mov	r9,80
80006dc2:	ef 49 ff e4 	st.w	r7[-28],r9
80006dc6:	ef 48 ff e0 	st.w	r7[-32],r8
80006dca:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006dce:	ef 48 ff ec 	st.w	r7[-20],r8
80006dd2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006dd6:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80006dda:	ee f0 ff ec 	ld.w	r0,r7[-20]
80006dde:	30 01       	mov	r1,0
80006de0:	ee f2 ff e8 	ld.w	r2,r7[-24]
80006de4:	30 03       	mov	r3,0
80006de6:	e2 02 02 4a 	mul	r10,r1,r2
80006dea:	e6 00 02 48 	mul	r8,r3,r0
80006dee:	10 0a       	add	r10,r8
80006df0:	e0 02 06 48 	mulu.d	r8,r0,r2
80006df4:	12 0a       	add	r10,r9
80006df6:	14 99       	mov	r9,r10
80006df8:	ee 7a 42 3f 	mov	r10,999999
80006dfc:	30 0b       	mov	r11,0
80006dfe:	f0 0a 00 0a 	add	r10,r8,r10
80006e02:	f2 0b 00 4b 	adc	r11,r9,r11
80006e06:	ee 78 42 40 	mov	r8,1000000
80006e0a:	30 09       	mov	r9,0
80006e0c:	f0 1f 00 94 	mcall	8000705c <sd_mmc_mci_card_init+0x8d0>
80006e10:	14 98       	mov	r8,r10
80006e12:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80006e14:	ef 48 ff f4 	st.w	r7[-12],r8
80006e18:	ee c8 00 50 	sub	r8,r7,80
80006e1c:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006e20:	e1 b8 00 42 	mfsr	r8,0x108
80006e24:	10 99       	mov	r9,r8
80006e26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e2a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006e2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e30:	70 09       	ld.w	r9,r8[0x0]
80006e32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006e36:	10 09       	add	r9,r8
80006e38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e3c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006e3e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006e42:	30 08       	mov	r8,0
80006e44:	f3 68 00 08 	st.b	r9[8],r8
80006e48:	ee c8 00 50 	sub	r8,r7,80
80006e4c:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006e50:	e1 b8 00 42 	mfsr	r8,0x108
80006e54:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006e58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e5c:	f1 39 00 08 	ld.ub	r9,r8[8]
80006e60:	30 28       	mov	r8,2
80006e62:	f0 09 18 00 	cp.b	r9,r8
80006e66:	c0 31       	brne	80006e6c <sd_mmc_mci_card_init+0x6e0>
    return false;
80006e68:	30 08       	mov	r8,0
80006e6a:	c4 38       	rjmp	80006ef0 <sd_mmc_mci_card_init+0x764>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006e6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e70:	f1 39 00 08 	ld.ub	r9,r8[8]
80006e74:	30 18       	mov	r8,1
80006e76:	f0 09 18 00 	cp.b	r9,r8
80006e7a:	c0 31       	brne	80006e80 <sd_mmc_mci_card_init+0x6f4>
    return true;
80006e7c:	30 18       	mov	r8,1
80006e7e:	c3 98       	rjmp	80006ef0 <sd_mmc_mci_card_init+0x764>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006e80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e84:	70 09       	ld.w	r9,r8[0x0]
80006e86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e8a:	70 18       	ld.w	r8,r8[0x4]
80006e8c:	10 39       	cp.w	r9,r8
80006e8e:	e0 88 00 1a 	brls	80006ec2 <sd_mmc_mci_card_init+0x736>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006e92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e96:	70 08       	ld.w	r8,r8[0x0]
80006e98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006e9c:	10 39       	cp.w	r9,r8
80006e9e:	c1 02       	brcc	80006ebe <sd_mmc_mci_card_init+0x732>
80006ea0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ea4:	70 18       	ld.w	r8,r8[0x4]
80006ea6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006eaa:	10 39       	cp.w	r9,r8
80006eac:	e0 88 00 09 	brls	80006ebe <sd_mmc_mci_card_init+0x732>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006eb0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006eb4:	30 18       	mov	r8,1
80006eb6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006eba:	30 18       	mov	r8,1
80006ebc:	c1 a8       	rjmp	80006ef0 <sd_mmc_mci_card_init+0x764>
    }
    return false;
80006ebe:	30 08       	mov	r8,0
80006ec0:	c1 88       	rjmp	80006ef0 <sd_mmc_mci_card_init+0x764>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006ec2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ec6:	70 08       	ld.w	r8,r8[0x0]
80006ec8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006ecc:	10 39       	cp.w	r9,r8
80006ece:	c0 93       	brcs	80006ee0 <sd_mmc_mci_card_init+0x754>
80006ed0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ed4:	70 18       	ld.w	r8,r8[0x4]
80006ed6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006eda:	10 39       	cp.w	r9,r8
80006edc:	e0 88 00 09 	brls	80006eee <sd_mmc_mci_card_init+0x762>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006ee0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006ee4:	30 18       	mov	r8,1
80006ee6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006eea:	30 18       	mov	r8,1
80006eec:	c0 28       	rjmp	80006ef0 <sd_mmc_mci_card_init+0x764>
    }
    return false;
80006eee:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006ef0:	58 08       	cp.w	r8,0
80006ef2:	ca b0       	breq	80006e48 <sd_mmc_mci_card_init+0x6bc>
      union u_cfg{
        unsigned long     cfg;
        avr32_mci_cfg_t   CFG;
      };
      union u_cfg val;
      val.cfg = mci->cfg;
80006ef4:	4c d8       	lddpc	r8,80007028 <sd_mmc_mci_card_init+0x89c>
80006ef6:	70 08       	ld.w	r8,r8[0x0]
80006ef8:	71 58       	ld.w	r8,r8[0x54]
80006efa:	ef 48 ff bc 	st.w	r7[-68],r8
      val.CFG.hsmode = 1;
80006efe:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006f02:	30 19       	mov	r9,1
80006f04:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80006f08:	ef 48 ff bc 	st.w	r7[-68],r8
      mci->cfg = val.cfg;
80006f0c:	4c 78       	lddpc	r8,80007028 <sd_mmc_mci_card_init+0x89c>
80006f0e:	70 08       	ld.w	r8,r8[0x0]
80006f10:	ee f9 ff bc 	ld.w	r9,r7[-68]
80006f14:	f1 49 00 54 	st.w	r8[84],r9

      // deselect card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, 0)!=MCI_SUCCESS)
80006f18:	4c 48       	lddpc	r8,80007028 <sd_mmc_mci_card_init+0x89c>
80006f1a:	70 08       	ld.w	r8,r8[0x0]
80006f1c:	30 0a       	mov	r10,0
80006f1e:	e0 6b 10 c7 	mov	r11,4295
80006f22:	10 9c       	mov	r12,r8
80006f24:	f0 1f 00 43 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
80006f28:	18 98       	mov	r8,r12
80006f2a:	58 08       	cp.w	r8,0
80006f2c:	c0 30       	breq	80006f32 <sd_mmc_mci_card_init+0x7a6>
        return false;
80006f2e:	30 08       	mov	r8,0
80006f30:	c6 f8       	rjmp	8000700e <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006f32:	4b e8       	lddpc	r8,80007028 <sd_mmc_mci_card_init+0x89c>
80006f34:	70 08       	ld.w	r8,r8[0x0]
80006f36:	10 9c       	mov	r12,r8
80006f38:	f0 1f 00 42 	mcall	80007040 <sd_mmc_mci_card_init+0x8b4>

      //-- (CMD9)
      // Read & analyze CSD register
      if (sd_mmc_mci_get_csd(slot)!=true)
80006f3c:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006f40:	10 9c       	mov	r12,r8
80006f42:	f0 1f 00 3f 	mcall	8000703c <sd_mmc_mci_card_init+0x8b0>
80006f46:	18 98       	mov	r8,r12
80006f48:	ec 18 00 01 	eorl	r8,0x1
80006f4c:	5c 58       	castu.b	r8
80006f4e:	c0 30       	breq	80006f54 <sd_mmc_mci_card_init+0x7c8>
        return false;
80006f50:	30 08       	mov	r8,0
80006f52:	c5 e8       	rjmp	8000700e <sd_mmc_mci_card_init+0x882>

      // select card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006f54:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006f58:	4b 88       	lddpc	r8,80007038 <sd_mmc_mci_card_init+0x8ac>
80006f5a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006f5e:	4b 38       	lddpc	r8,80007028 <sd_mmc_mci_card_init+0x89c>
80006f60:	70 08       	ld.w	r8,r8[0x0]
80006f62:	12 9a       	mov	r10,r9
80006f64:	e0 6b 10 c7 	mov	r11,4295
80006f68:	10 9c       	mov	r12,r8
80006f6a:	f0 1f 00 32 	mcall	80007030 <sd_mmc_mci_card_init+0x8a4>
80006f6e:	18 98       	mov	r8,r12
80006f70:	58 08       	cp.w	r8,0
80006f72:	c0 30       	breq	80006f78 <sd_mmc_mci_card_init+0x7ec>
        return false;
80006f74:	30 08       	mov	r8,0
80006f76:	c4 c8       	rjmp	8000700e <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006f78:	4a c8       	lddpc	r8,80007028 <sd_mmc_mci_card_init+0x89c>
80006f7a:	70 08       	ld.w	r8,r8[0x0]
80006f7c:	10 9c       	mov	r12,r8
80006f7e:	f0 1f 00 31 	mcall	80007040 <sd_mmc_mci_card_init+0x8b4>
80006f82:	c0 28       	rjmp	80006f86 <sd_mmc_mci_card_init+0x7fa>
          }
        }
      }

      if (b_hs_supported==false )
        goto sd_mmc_init_step3;
80006f84:	d7 03       	nop
      mci_wait_busy_signal(mci);// read busy state on DAT0
  }

sd_mmc_init_step3:
  // Set clock
  mci_set_speed(mci, g_pbb_hz, g_card_freq[slot]*1000);
80006f86:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006f8a:	4b 68       	lddpc	r8,80007060 <sd_mmc_mci_card_init+0x8d4>
80006f8c:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006f90:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80006f94:	e0 68 03 e8 	mov	r8,1000
80006f98:	f2 08 02 48 	mul	r8,r9,r8
80006f9c:	10 9a       	mov	r10,r8
80006f9e:	4a 28       	lddpc	r8,80007024 <sd_mmc_mci_card_init+0x898>
80006fa0:	70 09       	ld.w	r9,r8[0x0]
80006fa2:	4a 28       	lddpc	r8,80007028 <sd_mmc_mci_card_init+0x89c>
80006fa4:	70 08       	ld.w	r8,r8[0x0]
80006fa6:	12 9b       	mov	r11,r9
80006fa8:	10 9c       	mov	r12,r8
80006faa:	f0 1f 00 2f 	mcall	80007064 <sd_mmc_mci_card_init+0x8d8>

  //-- (CMD13)
  // Check if card is ready, the card must be in TRAN state
  if(sd_mmc_mci_cmd_send_status(slot)!=true)
80006fae:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006fb2:	10 9c       	mov	r12,r8
80006fb4:	f0 1f 00 2d 	mcall	80007068 <sd_mmc_mci_card_init+0x8dc>
80006fb8:	18 98       	mov	r8,r12
80006fba:	ec 18 00 01 	eorl	r8,0x1
80006fbe:	5c 58       	castu.b	r8
80006fc0:	c0 30       	breq	80006fc6 <sd_mmc_mci_card_init+0x83a>
    return false;
80006fc2:	30 08       	mov	r8,0
80006fc4:	c2 58       	rjmp	8000700e <sd_mmc_mci_card_init+0x882>

  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
80006fc6:	49 98       	lddpc	r8,80007028 <sd_mmc_mci_card_init+0x89c>
80006fc8:	70 08       	ld.w	r8,r8[0x0]
80006fca:	10 9c       	mov	r12,r8
80006fcc:	f0 1f 00 1a 	mcall	80007034 <sd_mmc_mci_card_init+0x8a8>
80006fd0:	18 98       	mov	r8,r12
80006fd2:	e4 18 e0 02 	andh	r8,0xe002
80006fd6:	e0 18 0e 00 	andl	r8,0xe00
80006fda:	e0 48 08 00 	cp.w	r8,2048
80006fde:	c0 30       	breq	80006fe4 <sd_mmc_mci_card_init+0x858>
    return false;
80006fe0:	30 08       	mov	r8,0
80006fe2:	c1 68       	rjmp	8000700e <sd_mmc_mci_card_init+0x882>

  //-- (CMD16)
  // Set the card block length to 512B
  if (sd_mmc_set_block_len (slot, SD_MMC_SECTOR_SIZE)!=true)
80006fe4:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006fe8:	e0 6b 02 00 	mov	r11,512
80006fec:	10 9c       	mov	r12,r8
80006fee:	f0 1f 00 20 	mcall	8000706c <sd_mmc_mci_card_init+0x8e0>
80006ff2:	18 98       	mov	r8,r12
80006ff4:	ec 18 00 01 	eorl	r8,0x1
80006ff8:	5c 58       	castu.b	r8
80006ffa:	c0 30       	breq	80007000 <sd_mmc_mci_card_init+0x874>
    return false;
80006ffc:	30 08       	mov	r8,0
80006ffe:	c0 88       	rjmp	8000700e <sd_mmc_mci_card_init+0x882>

  // USB Test Unit Attention requires a state "busy" between "not present" and "ready" state
  // otherwise never report card change
  sd_mmc_mci_init_done[slot] = true;
80007000:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80007004:	48 5a       	lddpc	r10,80007018 <sd_mmc_mci_card_init+0x88c>
80007006:	30 18       	mov	r8,1
80007008:	f4 09 0b 08 	st.b	r10[r9],r8

  return true;
8000700c:	30 18       	mov	r8,1
}
8000700e:	10 9c       	mov	r12,r8
80007010:	2e 9d       	sub	sp,-92
80007012:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80007016:	00 00       	add	r0,r0
80007018:	00 00       	add	r0,r0
8000701a:	06 14       	sub	r4,r3
8000701c:	00 00       	add	r0,r0
8000701e:	10 04       	add	r4,r8
80007020:	00 00       	add	r0,r0
80007022:	0d fc       	ld.ub	r12,r6[0x7]
80007024:	00 00       	add	r0,r0
80007026:	06 18       	sub	r8,r3
80007028:	00 00       	add	r0,r0
8000702a:	01 34       	ld.ub	r4,r0++
8000702c:	80 00       	ld.sh	r0,r0[0x0]
8000702e:	93 40       	st.w	r9[0x10],r0
80007030:	80 00       	ld.sh	r0,r0[0x0]
80007032:	94 74       	ld.sh	r4,r10[0xe]
80007034:	80 00       	ld.sh	r0,r0[0x0]
80007036:	95 ac       	st.w	r10[0x28],r12
80007038:	00 00       	add	r0,r0
8000703a:	0b ec       	ld.ub	r12,r5[0x6]
8000703c:	80 00       	ld.sh	r0,r0[0x0]
8000703e:	61 50       	ld.w	r0,r0[0x54]
80007040:	80 00       	ld.sh	r0,r0[0x0]
80007042:	95 c8       	st.w	r10[0x30],r8
80007044:	80 00       	ld.sh	r0,r0[0x0]
80007046:	64 40       	ld.w	r0,r2[0x10]
80007048:	80 00       	ld.sh	r0,r0[0x0]
8000704a:	95 4c       	st.w	r10[0x10],r12
8000704c:	80 00       	ld.sh	r0,r0[0x0]
8000704e:	93 f4       	st.w	r9[0x3c],r4
80007050:	80 00       	ld.sh	r0,r0[0x0]
80007052:	94 3e       	ld.sh	lr,r10[0x6]
80007054:	00 00       	add	r0,r0
80007056:	07 b0       	ld.ub	r0,r3[0x3]
80007058:	00 00       	add	r0,r0
8000705a:	06 1c       	sub	r12,r3
8000705c:	80 00       	ld.sh	r0,r0[0x0]
8000705e:	e6 64 00 00 	mov	r4,393216
80007062:	0d fe       	ld.ub	lr,r6[0x7]
80007064:	80 00       	ld.sh	r0,r0[0x0]
80007066:	92 5c       	ld.sh	r12,r9[0xa]
80007068:	80 00       	ld.sh	r0,r0[0x0]
8000706a:	7c 30       	ld.w	r0,lr[0xc]
8000706c:	80 00       	ld.sh	r0,r0[0x0]
8000706e:	66 0c       	ld.w	r12,r3[0x0]

80007070 <dma_mci_2_ram>:
    return true;
}
#endif

static void dma_mci_2_ram(void *ram, size_t size)
{
80007070:	eb cd 40 80 	pushm	r7,lr
80007074:	1a 97       	mov	r7,sp
80007076:	20 3d       	sub	sp,12
80007078:	ef 4c ff f8 	st.w	r7[-8],r12
8000707c:	ef 4b ff f4 	st.w	r7[-12],r11
  int *pRam = ram;
80007080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007084:	ef 48 ff fc 	st.w	r7[-4],r8

  // Src Address: the MCI registers.
  AVR32_DMACA.sar1 = (uint32_t)&AVR32_MCI.fifo;
80007088:	fc 18 ff 10 	movh	r8,0xff10
8000708c:	fe 69 42 00 	mov	r9,-114176
80007090:	f1 49 00 58 	st.w	r8[88],r9

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;
80007094:	fc 18 ff 10 	movh	r8,0xff10
80007098:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000709c:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
800070a0:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
800070a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800070a8:	a3 89       	lsr	r9,0x2

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
800070aa:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
800070ae:	fc 18 ff 10 	movh	r8,0xff10
800070b2:	e0 69 02 02 	mov	r9,514
800070b6:	f1 49 03 a0 	st.w	r8[928],r9
}
800070ba:	2f dd       	sub	sp,-12
800070bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800070c0 <is_dma_mci_2_ram_complete>:

static bool is_dma_mci_2_ram_complete( void )
{
800070c0:	eb cd 40 80 	pushm	r7,lr
800070c4:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
800070c6:	fc 18 ff 10 	movh	r8,0xff10
800070ca:	f0 f8 03 a0 	ld.w	r8,r8[928]
800070ce:	e2 18 00 02 	andl	r8,0x2,COH
800070d2:	c0 30       	breq	800070d8 <is_dma_mci_2_ram_complete+0x18>
    return false;
800070d4:	30 08       	mov	r8,0
800070d6:	c0 28       	rjmp	800070da <is_dma_mci_2_ram_complete+0x1a>

  return true;
800070d8:	30 18       	mov	r8,1
}
800070da:	10 9c       	mov	r12,r8
800070dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800070e0 <dma_ram_2_mci>:
    return true;
}
#endif

static void dma_ram_2_mci(const void *ram, size_t size)
{
800070e0:	eb cd 40 80 	pushm	r7,lr
800070e4:	1a 97       	mov	r7,sp
800070e6:	20 3d       	sub	sp,12
800070e8:	ef 4c ff f8 	st.w	r7[-8],r12
800070ec:	ef 4b ff f4 	st.w	r7[-12],r11
  const unsigned int *pRam = ram;
800070f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070f4:	ef 48 ff fc 	st.w	r7[-4],r8

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.sar1 = (unsigned long)pRam;
800070f8:	fc 18 ff 10 	movh	r8,0xff10
800070fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007100:	f1 49 00 58 	st.w	r8[88],r9

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;
80007104:	fc 18 ff 10 	movh	r8,0xff10
80007108:	fe 69 42 00 	mov	r9,-114176
8000710c:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80007110:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
80007114:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007118:	a3 89       	lsr	r9,0x2

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
8000711a:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
8000711e:	fc 18 ff 10 	movh	r8,0xff10
80007122:	e0 69 02 02 	mov	r9,514
80007126:	f1 49 03 a0 	st.w	r8[928],r9
}
8000712a:	2f dd       	sub	sp,-12
8000712c:	e3 cd 80 80 	ldm	sp++,r7,pc

80007130 <is_dma_ram_2_mci_complete>:

static bool is_dma_ram_2_mci_complete( void )
{
80007130:	eb cd 40 80 	pushm	r7,lr
80007134:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
80007136:	fc 18 ff 10 	movh	r8,0xff10
8000713a:	f0 f8 03 a0 	ld.w	r8,r8[928]
8000713e:	e2 18 00 02 	andl	r8,0x2,COH
80007142:	c0 30       	breq	80007148 <is_dma_ram_2_mci_complete+0x18>
    return false;
80007144:	30 08       	mov	r8,0
80007146:	c0 28       	rjmp	8000714a <is_dma_ram_2_mci_complete+0x1a>

  return true;
80007148:	30 18       	mov	r8,1
}
8000714a:	10 9c       	mov	r12,r8
8000714c:	e3 cd 80 80 	ldm	sp++,r7,pc

80007150 <sd_mmc_mci_mem_check>:

  return true;
}

bool sd_mmc_mci_mem_check(uint8_t slot)
{
80007150:	eb cd 40 80 	pushm	r7,lr
80007154:	1a 97       	mov	r7,sp
80007156:	20 2d       	sub	sp,8
80007158:	18 98       	mov	r8,r12
8000715a:	ef 68 ff f8 	st.b	r7[-8],r8
  uint8_t timeout_init = 0;
8000715e:	30 08       	mov	r8,0
80007160:	ef 68 ff ff 	st.b	r7[-1],r8

  if (slot > MCI_LAST_SLOTS)
80007164:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007168:	30 18       	mov	r8,1
8000716a:	f0 09 18 00 	cp.b	r9,r8
8000716e:	e0 88 00 04 	brls	80007176 <sd_mmc_mci_mem_check+0x26>
    return false;
80007172:	30 08       	mov	r8,0
80007174:	c4 d8       	rjmp	8000720e <sd_mmc_mci_mem_check+0xbe>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80007176:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000717a:	4a 89       	lddpc	r9,80007218 <sd_mmc_mci_mem_check+0xc8>
8000717c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007180:	10 9a       	mov	r10,r8
80007182:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007186:	4a 68       	lddpc	r8,8000721c <sd_mmc_mci_mem_check+0xcc>
80007188:	70 08       	ld.w	r8,r8[0x0]
8000718a:	12 9b       	mov	r11,r9
8000718c:	10 9c       	mov	r12,r8
8000718e:	f0 1f 00 25 	mcall	80007220 <sd_mmc_mci_mem_check+0xd0>

  // Check card presence
  if (is_sd_mmc_mci_card_present(slot) == false)
80007192:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007196:	10 9c       	mov	r12,r8
80007198:	f0 1f 00 23 	mcall	80007224 <sd_mmc_mci_mem_check+0xd4>
8000719c:	18 98       	mov	r8,r12
8000719e:	ec 18 00 01 	eorl	r8,0x1
800071a2:	5c 58       	castu.b	r8
800071a4:	c0 90       	breq	800071b6 <sd_mmc_mci_mem_check+0x66>
  {
    sd_mmc_mci_init_done[slot] = false;
800071a6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800071aa:	4a 0a       	lddpc	r10,80007228 <sd_mmc_mci_mem_check+0xd8>
800071ac:	30 08       	mov	r8,0
800071ae:	f4 09 0b 08 	st.b	r10[r9],r8
    return false;
800071b2:	30 08       	mov	r8,0
800071b4:	c2 d8       	rjmp	8000720e <sd_mmc_mci_mem_check+0xbe>
  }

  if (sd_mmc_mci_init_done[slot] == false)
800071b6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800071ba:	49 c9       	lddpc	r9,80007228 <sd_mmc_mci_mem_check+0xd8>
800071bc:	f2 08 07 08 	ld.ub	r8,r9[r8]
800071c0:	ec 18 00 01 	eorl	r8,0x1
800071c4:	5c 58       	castu.b	r8
800071c6:	c1 a0       	breq	800071fa <sd_mmc_mci_mem_check+0xaa>
  {
    while (sd_mmc_mci_card_init(slot)!=true)
800071c8:	c0 f8       	rjmp	800071e6 <sd_mmc_mci_mem_check+0x96>
    {
      timeout_init++;
800071ca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800071ce:	2f f8       	sub	r8,-1
800071d0:	ef 68 ff ff 	st.b	r7[-1],r8
      if (timeout_init>10) return false;
800071d4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800071d8:	30 a8       	mov	r8,10
800071da:	f0 09 18 00 	cp.b	r9,r8
800071de:	e0 88 00 04 	brls	800071e6 <sd_mmc_mci_mem_check+0x96>
800071e2:	30 08       	mov	r8,0
800071e4:	c1 58       	rjmp	8000720e <sd_mmc_mci_mem_check+0xbe>
    return false;
  }

  if (sd_mmc_mci_init_done[slot] == false)
  {
    while (sd_mmc_mci_card_init(slot)!=true)
800071e6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800071ea:	10 9c       	mov	r12,r8
800071ec:	f0 1f 00 10 	mcall	8000722c <sd_mmc_mci_mem_check+0xdc>
800071f0:	18 98       	mov	r8,r12
800071f2:	ec 18 00 01 	eorl	r8,0x1
800071f6:	5c 58       	castu.b	r8
800071f8:	ce 91       	brne	800071ca <sd_mmc_mci_mem_check+0x7a>
    {
      timeout_init++;
      if (timeout_init>10) return false;
    }
  }
  if (sd_mmc_mci_init_done[slot] == true)
800071fa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800071fe:	48 b9       	lddpc	r9,80007228 <sd_mmc_mci_mem_check+0xd8>
80007200:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007204:	58 08       	cp.w	r8,0
80007206:	c0 30       	breq	8000720c <sd_mmc_mci_mem_check+0xbc>
    return true;
80007208:	30 18       	mov	r8,1
8000720a:	c0 28       	rjmp	8000720e <sd_mmc_mci_mem_check+0xbe>
  else
    return false;
8000720c:	30 08       	mov	r8,0
}
8000720e:	10 9c       	mov	r12,r8
80007210:	2f ed       	sub	sp,-8
80007212:	e3 cd 80 80 	ldm	sp++,r7,pc
80007216:	00 00       	add	r0,r0
80007218:	00 00       	add	r0,r0
8000721a:	0d fc       	ld.ub	r12,r6[0x7]
8000721c:	00 00       	add	r0,r0
8000721e:	01 34       	ld.ub	r4,r0++
80007220:	80 00       	ld.sh	r0,r0[0x0]
80007222:	96 0c       	ld.sh	r12,r11[0x0]
80007224:	80 00       	ld.sh	r0,r0[0x0]
80007226:	60 98       	ld.w	r8,r0[0x24]
80007228:	00 00       	add	r0,r0
8000722a:	06 14       	sub	r4,r3
8000722c:	80 00       	ld.sh	r0,r0[0x0]
8000722e:	67 8c       	ld.w	r12,r3[0x60]

80007230 <sd_mmc_mci_dma_read_open>:

  return true;
}

bool sd_mmc_mci_dma_read_open(uint8_t slot, uint32_t pos, void* ram, uint16_t nb_sector)
{
80007230:	eb cd 40 80 	pushm	r7,lr
80007234:	1a 97       	mov	r7,sp
80007236:	20 5d       	sub	sp,20
80007238:	ef 4b ff f4 	st.w	r7[-12],r11
8000723c:	ef 4a ff f0 	st.w	r7[-16],r10
80007240:	12 98       	mov	r8,r9
80007242:	18 99       	mov	r9,r12
80007244:	ef 69 ff f8 	st.b	r7[-8],r9
80007248:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
8000724c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007250:	30 18       	mov	r8,1
80007252:	f0 09 18 00 	cp.b	r9,r8
80007256:	e0 88 00 04 	brls	8000725e <sd_mmc_mci_dma_read_open+0x2e>
    return false;
8000725a:	30 08       	mov	r8,0
8000725c:	c9 a8       	rjmp	80007390 <sd_mmc_mci_dma_read_open+0x160>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000725e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007262:	4c e9       	lddpc	r9,80007398 <sd_mmc_mci_dma_read_open+0x168>
80007264:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007268:	10 9a       	mov	r10,r8
8000726a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000726e:	4c c8       	lddpc	r8,8000739c <sd_mmc_mci_dma_read_open+0x16c>
80007270:	70 08       	ld.w	r8,r8[0x0]
80007272:	12 9b       	mov	r11,r9
80007274:	10 9c       	mov	r12,r8
80007276:	f0 1f 00 4b 	mcall	800073a0 <sd_mmc_mci_dma_read_open+0x170>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
8000727a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000727e:	4c a8       	lddpc	r8,800073a4 <sd_mmc_mci_dma_read_open+0x174>
80007280:	ee fa ff f4 	ld.w	r10,r7[-12]
80007284:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
80007288:	4c 58       	lddpc	r8,8000739c <sd_mmc_mci_dma_read_open+0x16c>
8000728a:	70 08       	ld.w	r8,r8[0x0]
8000728c:	10 9c       	mov	r12,r8
8000728e:	f0 1f 00 47 	mcall	800073a8 <sd_mmc_mci_dma_read_open+0x178>

  addr =  gl_ptr_mem[slot];
80007292:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007296:	4c 48       	lddpc	r8,800073a4 <sd_mmc_mci_dma_read_open+0x174>
80007298:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000729c:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800072a0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800072a4:	4c 29       	lddpc	r9,800073ac <sd_mmc_mci_dma_read_open+0x17c>
800072a6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800072aa:	e2 18 00 10 	andl	r8,0x10,COH
800072ae:	c0 e1       	brne	800072ca <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
800072b0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800072b4:	4b e9       	lddpc	r9,800073ac <sd_mmc_mci_dma_read_open+0x17c>
800072b6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800072ba:	e2 18 00 20 	andl	r8,0x20,COH
  // wait for MMC not busy
  mci_wait_busy_signal(mci);

  addr =  gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800072be:	c0 61       	brne	800072ca <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
800072c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800072c4:	a9 78       	lsl	r8,0x9
800072c6:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  //** (CMD13)
  // Necessary to clear flag error "ADDRESS_OUT_OF_RANGE" (ID LABO = MMC15)
  if(mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800072ca:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800072ce:	4b 98       	lddpc	r8,800073b0 <sd_mmc_mci_dma_read_open+0x180>
800072d0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800072d4:	4b 28       	lddpc	r8,8000739c <sd_mmc_mci_dma_read_open+0x16c>
800072d6:	70 08       	ld.w	r8,r8[0x0]
800072d8:	12 9a       	mov	r10,r9
800072da:	e0 6b 10 4d 	mov	r11,4173
800072de:	10 9c       	mov	r12,r8
800072e0:	f0 1f 00 35 	mcall	800073b4 <sd_mmc_mci_dma_read_open+0x184>
800072e4:	18 98       	mov	r8,r12
800072e6:	58 08       	cp.w	r8,0
800072e8:	c0 30       	breq	800072ee <sd_mmc_mci_dma_read_open+0xbe>
  {
    return false;
800072ea:	30 08       	mov	r8,0
800072ec:	c5 28       	rjmp	80007390 <sd_mmc_mci_dma_read_open+0x160>
  }

  // Request Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
800072ee:	4a c8       	lddpc	r8,8000739c <sd_mmc_mci_dma_read_open+0x16c>
800072f0:	70 08       	ld.w	r8,r8[0x0]
800072f2:	e0 6b 02 00 	mov	r11,512
800072f6:	10 9c       	mov	r12,r8
800072f8:	f0 1f 00 30 	mcall	800073b8 <sd_mmc_mci_dma_read_open+0x188>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
800072fc:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80007300:	4a 78       	lddpc	r8,8000739c <sd_mmc_mci_dma_read_open+0x16c>
80007302:	70 08       	ld.w	r8,r8[0x0]
80007304:	12 9b       	mov	r11,r9
80007306:	10 9c       	mov	r12,r8
80007308:	f0 1f 00 2d 	mcall	800073bc <sd_mmc_mci_dma_read_open+0x18c>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
8000730c:	fc 18 ff 10 	movh	r8,0xff10
80007310:	30 19       	mov	r9,1
80007312:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
80007316:	fe 68 40 00 	mov	r8,-114688
8000731a:	30 09       	mov	r9,0
8000731c:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
80007320:	fc 18 ff 10 	movh	r8,0xff10
80007324:	30 09       	mov	r9,0
80007326:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
8000732a:	fc 18 ff 10 	movh	r8,0xff10
8000732e:	e0 69 d8 24 	mov	r9,55332
80007332:	ea 19 00 a0 	orh	r9,0xa0
80007336:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
8000733a:	fc 18 ff 10 	movh	r8,0xff10
8000733e:	30 09       	mov	r9,0
80007340:	f1 49 00 98 	st.w	r8[152],r9
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: ignored because the dst is memory.
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: hw handshaking
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80007344:	fc 18 ff 10 	movh	r8,0xff10
80007348:	e0 69 01 00 	mov	r9,256
8000734c:	f1 49 00 9c 	st.w	r8[156],r9
    (0                      << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf: ignored because the dst is memory.
    (AVR32_DMACA_CH_MMCI_RX << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf:
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
80007350:	fe 68 40 00 	mov	r8,-114688
80007354:	e0 69 01 30 	mov	r9,304
80007358:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD17)
  if(mci_send_cmd(mci, SD_MMC_READ_MULTIPLE_BLOCK_CMD, addr)!=MCI_SUCCESS)
8000735c:	49 08       	lddpc	r8,8000739c <sd_mmc_mci_dma_read_open+0x16c>
8000735e:	70 08       	ld.w	r8,r8[0x0]
80007360:	ee fa ff fc 	ld.w	r10,r7[-4]
80007364:	ec 7b 10 52 	mov	r11,856146
80007368:	10 9c       	mov	r12,r8
8000736a:	f0 1f 00 13 	mcall	800073b4 <sd_mmc_mci_dma_read_open+0x184>
8000736e:	18 98       	mov	r8,r12
80007370:	58 08       	cp.w	r8,0
80007372:	c0 30       	breq	80007378 <sd_mmc_mci_dma_read_open+0x148>
  {
    return false;
80007374:	30 08       	mov	r8,0
80007376:	c0 d8       	rjmp	80007390 <sd_mmc_mci_dma_read_open+0x160>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
80007378:	48 98       	lddpc	r8,8000739c <sd_mmc_mci_dma_read_open+0x16c>
8000737a:	70 08       	ld.w	r8,r8[0x0]
8000737c:	10 9c       	mov	r12,r8
8000737e:	f0 1f 00 11 	mcall	800073c0 <sd_mmc_mci_dma_read_open+0x190>
80007382:	18 98       	mov	r8,r12
80007384:	e6 18 f0 50 	andh	r8,0xf050,COH
80007388:	c0 30       	breq	8000738e <sd_mmc_mci_dma_read_open+0x15e>
  {
    return false;
8000738a:	30 08       	mov	r8,0
8000738c:	c0 28       	rjmp	80007390 <sd_mmc_mci_dma_read_open+0x160>
  }

  return true;
8000738e:	30 18       	mov	r8,1
}
80007390:	10 9c       	mov	r12,r8
80007392:	2f bd       	sub	sp,-20
80007394:	e3 cd 80 80 	ldm	sp++,r7,pc
80007398:	00 00       	add	r0,r0
8000739a:	0d fc       	ld.ub	r12,r6[0x7]
8000739c:	00 00       	add	r0,r0
8000739e:	01 34       	ld.ub	r4,r0++
800073a0:	80 00       	ld.sh	r0,r0[0x0]
800073a2:	96 0c       	ld.sh	r12,r11[0x0]
800073a4:	00 00       	add	r0,r0
800073a6:	06 20       	rsub	r0,r3
800073a8:	80 00       	ld.sh	r0,r0[0x0]
800073aa:	95 c8       	st.w	r10[0x30],r8
800073ac:	00 00       	add	r0,r0
800073ae:	10 04       	add	r4,r8
800073b0:	00 00       	add	r0,r0
800073b2:	0b ec       	ld.ub	r12,r5[0x6]
800073b4:	80 00       	ld.sh	r0,r0[0x0]
800073b6:	94 74       	ld.sh	r4,r10[0xe]
800073b8:	80 00       	ld.sh	r0,r0[0x0]
800073ba:	93 f4       	st.w	r9[0x3c],r4
800073bc:	80 00       	ld.sh	r0,r0[0x0]
800073be:	94 3e       	ld.sh	lr,r10[0x6]
800073c0:	80 00       	ld.sh	r0,r0[0x0]
800073c2:	95 ac       	st.w	r10[0x28],r12

800073c4 <sd_mmc_mci_read_close>:

bool sd_mmc_mci_read_close (uint8_t slot)
{
800073c4:	eb cd 40 80 	pushm	r7,lr
800073c8:	1a 97       	mov	r7,sp
800073ca:	20 3d       	sub	sp,12
800073cc:	18 98       	mov	r8,r12
800073ce:	ef 68 ff f4 	st.b	r7[-12],r8
  if( (mci_crc_error(mci)) )
800073d2:	4a 08       	lddpc	r8,80007450 <sd_mmc_mci_read_close+0x8c>
800073d4:	70 08       	ld.w	r8,r8[0x0]
800073d6:	ef 48 ff f8 	st.w	r7[-8],r8
800073da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800073de:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800073e2:	49 d8       	lddpc	r8,80007454 <sd_mmc_mci_read_close+0x90>
800073e4:	70 08       	ld.w	r8,r8[0x0]
800073e6:	10 99       	mov	r9,r8
800073e8:	e6 19 01 e0 	andh	r9,0x1e0,COH
800073ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800073f0:	71 08       	ld.w	r8,r8[0x40]
800073f2:	f3 e8 10 08 	or	r8,r9,r8
800073f6:	10 99       	mov	r9,r8
800073f8:	49 78       	lddpc	r8,80007454 <sd_mmc_mci_read_close+0x90>
800073fa:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800073fc:	49 68       	lddpc	r8,80007454 <sd_mmc_mci_read_close+0x90>
800073fe:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
80007400:	e6 18 00 20 	andh	r8,0x20,COH
80007404:	c0 90       	breq	80007416 <sd_mmc_mci_read_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
80007406:	49 48       	lddpc	r8,80007454 <sd_mmc_mci_read_close+0x90>
80007408:	70 08       	ld.w	r8,r8[0x0]
8000740a:	10 99       	mov	r9,r8
8000740c:	b5 d9       	cbr	r9,0x15
8000740e:	49 28       	lddpc	r8,80007454 <sd_mmc_mci_read_close+0x90>
80007410:	91 09       	st.w	r8[0x0],r9
    return true;
80007412:	30 18       	mov	r8,1
80007414:	c0 28       	rjmp	80007418 <sd_mmc_mci_read_close+0x54>
  }
  else
    return false;
80007416:	30 08       	mov	r8,0
80007418:	58 08       	cp.w	r8,0
8000741a:	c0 30       	breq	80007420 <sd_mmc_mci_read_close+0x5c>
  {
    return false;  // An CRC error has been seen
8000741c:	30 08       	mov	r8,0
8000741e:	c1 48       	rjmp	80007446 <sd_mmc_mci_read_close+0x82>
  }

  mci_wait_busy_signal(mci);
80007420:	48 c8       	lddpc	r8,80007450 <sd_mmc_mci_read_close+0x8c>
80007422:	70 08       	ld.w	r8,r8[0x0]
80007424:	10 9c       	mov	r12,r8
80007426:	f0 1f 00 0d 	mcall	80007458 <sd_mmc_mci_read_close+0x94>

  if( mci_send_cmd( mci, SD_MMC_STOP_READ_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
8000742a:	48 a8       	lddpc	r8,80007450 <sd_mmc_mci_read_close+0x8c>
8000742c:	70 08       	ld.w	r8,r8[0x0]
8000742e:	3f fa       	mov	r10,-1
80007430:	e2 6b 10 4c 	mov	r11,135244
80007434:	10 9c       	mov	r12,r8
80007436:	f0 1f 00 0a 	mcall	8000745c <sd_mmc_mci_read_close+0x98>
8000743a:	18 98       	mov	r8,r12
8000743c:	58 08       	cp.w	r8,0
8000743e:	c0 30       	breq	80007444 <sd_mmc_mci_read_close+0x80>
    return false;
80007440:	30 08       	mov	r8,0
80007442:	c0 28       	rjmp	80007446 <sd_mmc_mci_read_close+0x82>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  return true;
80007444:	30 18       	mov	r8,1
}
80007446:	10 9c       	mov	r12,r8
80007448:	2f dd       	sub	sp,-12
8000744a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000744e:	00 00       	add	r0,r0
80007450:	00 00       	add	r0,r0
80007452:	01 34       	ld.ub	r4,r0++
80007454:	00 00       	add	r0,r0
80007456:	07 b0       	ld.ub	r0,r3[0x3]
80007458:	80 00       	ld.sh	r0,r0[0x0]
8000745a:	95 c8       	st.w	r10[0x30],r8
8000745c:	80 00       	ld.sh	r0,r0[0x0]
8000745e:	94 74       	ld.sh	r4,r10[0xe]

80007460 <sd_mmc_mci_dma_write_open>:

  return true;
}

bool sd_mmc_mci_dma_write_open (uint8_t slot, uint32_t pos, const void* ram, uint16_t nb_sector)
{
80007460:	eb cd 40 80 	pushm	r7,lr
80007464:	1a 97       	mov	r7,sp
80007466:	20 5d       	sub	sp,20
80007468:	ef 4b ff f4 	st.w	r7[-12],r11
8000746c:	ef 4a ff f0 	st.w	r7[-16],r10
80007470:	12 98       	mov	r8,r9
80007472:	18 99       	mov	r9,r12
80007474:	ef 69 ff f8 	st.b	r7[-8],r9
80007478:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
8000747c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007480:	30 18       	mov	r8,1
80007482:	f0 09 18 00 	cp.b	r9,r8
80007486:	e0 88 00 04 	brls	8000748e <sd_mmc_mci_dma_write_open+0x2e>
    return false;
8000748a:	30 08       	mov	r8,0
8000748c:	c8 88       	rjmp	8000759c <sd_mmc_mci_dma_write_open+0x13c>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000748e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007492:	4c 59       	lddpc	r9,800075a4 <sd_mmc_mci_dma_write_open+0x144>
80007494:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007498:	10 9a       	mov	r10,r8
8000749a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000749e:	4c 38       	lddpc	r8,800075a8 <sd_mmc_mci_dma_write_open+0x148>
800074a0:	70 08       	ld.w	r8,r8[0x0]
800074a2:	12 9b       	mov	r11,r9
800074a4:	10 9c       	mov	r12,r8
800074a6:	f0 1f 00 42 	mcall	800075ac <sd_mmc_mci_dma_write_open+0x14c>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
800074aa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800074ae:	4c 18       	lddpc	r8,800075b0 <sd_mmc_mci_dma_write_open+0x150>
800074b0:	ee fa ff f4 	ld.w	r10,r7[-12]
800074b4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
800074b8:	4b c8       	lddpc	r8,800075a8 <sd_mmc_mci_dma_write_open+0x148>
800074ba:	70 08       	ld.w	r8,r8[0x0]
800074bc:	10 9c       	mov	r12,r8
800074be:	f0 1f 00 3e 	mcall	800075b4 <sd_mmc_mci_dma_write_open+0x154>
      return false;
   }
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
800074c2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800074c6:	4b b8       	lddpc	r8,800075b0 <sd_mmc_mci_dma_write_open+0x150>
800074c8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800074cc:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800074d0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800074d4:	4b 99       	lddpc	r9,800075b8 <sd_mmc_mci_dma_write_open+0x158>
800074d6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800074da:	e2 18 00 10 	andl	r8,0x10,COH
800074de:	c0 e1       	brne	800074fa <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
800074e0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800074e4:	4b 59       	lddpc	r9,800075b8 <sd_mmc_mci_dma_write_open+0x158>
800074e6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800074ea:	e2 18 00 20 	andl	r8,0x20,COH
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800074ee:	c0 61       	brne	800074fa <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
800074f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800074f4:	a9 78       	lsl	r8,0x9
800074f6:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  // Set Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
800074fa:	4a c8       	lddpc	r8,800075a8 <sd_mmc_mci_dma_write_open+0x148>
800074fc:	70 08       	ld.w	r8,r8[0x0]
800074fe:	e0 6b 02 00 	mov	r11,512
80007502:	10 9c       	mov	r12,r8
80007504:	f0 1f 00 2e 	mcall	800075bc <sd_mmc_mci_dma_write_open+0x15c>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
80007508:	ef 19 ff ec 	ld.uh	r9,r7[-20]
8000750c:	4a 78       	lddpc	r8,800075a8 <sd_mmc_mci_dma_write_open+0x148>
8000750e:	70 08       	ld.w	r8,r8[0x0]
80007510:	12 9b       	mov	r11,r9
80007512:	10 9c       	mov	r12,r8
80007514:	f0 1f 00 2b 	mcall	800075c0 <sd_mmc_mci_dma_write_open+0x160>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
80007518:	fc 18 ff 10 	movh	r8,0xff10
8000751c:	30 19       	mov	r9,1
8000751e:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
80007522:	fe 68 40 00 	mov	r8,-114688
80007526:	30 09       	mov	r9,0
80007528:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
8000752c:	fc 18 ff 10 	movh	r8,0xff10
80007530:	30 09       	mov	r9,0
80007532:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
80007536:	fc 18 ff 10 	movh	r8,0xff10
8000753a:	e0 69 d8 24 	mov	r9,55332
8000753e:	ea 19 02 10 	orh	r9,0x210
80007542:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
80007546:	fc 18 ff 10 	movh	r8,0xff10
8000754a:	30 09       	mov	r9,0
8000754c:	f1 49 00 98 	st.w	r8[152],r9
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: hw handshaking
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80007550:	fc 18 ff 10 	movh	r8,0xff10
80007554:	e0 69 18 00 	mov	r9,6144
80007558:	f1 49 00 9c 	st.w	r8[156],r9
    (AVR32_DMACA_CH_MMCI_TX << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf:
    (0                      << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
8000755c:	fe 68 40 00 	mov	r8,-114688
80007560:	e0 69 01 30 	mov	r9,304
80007564:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD24)
  if(mci_send_cmd(mci, SD_MMC_WRITE_MULTIPLE_BLOCK_CMD, addr )!=MCI_SUCCESS)
80007568:	49 08       	lddpc	r8,800075a8 <sd_mmc_mci_dma_write_open+0x148>
8000756a:	70 08       	ld.w	r8,r8[0x0]
8000756c:	ee fa ff fc 	ld.w	r10,r7[-4]
80007570:	e8 7b 10 59 	mov	r11,594009
80007574:	10 9c       	mov	r12,r8
80007576:	f0 1f 00 14 	mcall	800075c4 <sd_mmc_mci_dma_write_open+0x164>
8000757a:	18 98       	mov	r8,r12
8000757c:	58 08       	cp.w	r8,0
8000757e:	c0 30       	breq	80007584 <sd_mmc_mci_dma_write_open+0x124>
  {
    return false;
80007580:	30 08       	mov	r8,0
80007582:	c0 d8       	rjmp	8000759c <sd_mmc_mci_dma_write_open+0x13c>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
80007584:	48 98       	lddpc	r8,800075a8 <sd_mmc_mci_dma_write_open+0x148>
80007586:	70 08       	ld.w	r8,r8[0x0]
80007588:	10 9c       	mov	r12,r8
8000758a:	f0 1f 00 10 	mcall	800075c8 <sd_mmc_mci_dma_write_open+0x168>
8000758e:	18 98       	mov	r8,r12
80007590:	e6 18 f0 50 	andh	r8,0xf050,COH
80007594:	c0 30       	breq	8000759a <sd_mmc_mci_dma_write_open+0x13a>
  {
    return false;
80007596:	30 08       	mov	r8,0
80007598:	c0 28       	rjmp	8000759c <sd_mmc_mci_dma_write_open+0x13c>
  }

  return true;
8000759a:	30 18       	mov	r8,1
}
8000759c:	10 9c       	mov	r12,r8
8000759e:	2f bd       	sub	sp,-20
800075a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800075a4:	00 00       	add	r0,r0
800075a6:	0d fc       	ld.ub	r12,r6[0x7]
800075a8:	00 00       	add	r0,r0
800075aa:	01 34       	ld.ub	r4,r0++
800075ac:	80 00       	ld.sh	r0,r0[0x0]
800075ae:	96 0c       	ld.sh	r12,r11[0x0]
800075b0:	00 00       	add	r0,r0
800075b2:	06 20       	rsub	r0,r3
800075b4:	80 00       	ld.sh	r0,r0[0x0]
800075b6:	95 c8       	st.w	r10[0x30],r8
800075b8:	00 00       	add	r0,r0
800075ba:	10 04       	add	r4,r8
800075bc:	80 00       	ld.sh	r0,r0[0x0]
800075be:	93 f4       	st.w	r9[0x3c],r4
800075c0:	80 00       	ld.sh	r0,r0[0x0]
800075c2:	94 3e       	ld.sh	lr,r10[0x6]
800075c4:	80 00       	ld.sh	r0,r0[0x0]
800075c6:	94 74       	ld.sh	r4,r10[0xe]
800075c8:	80 00       	ld.sh	r0,r0[0x0]
800075ca:	95 ac       	st.w	r10[0x28],r12

800075cc <sd_mmc_mci_write_close>:

bool sd_mmc_mci_write_close (uint8_t slot)
{
800075cc:	eb cd 40 80 	pushm	r7,lr
800075d0:	1a 97       	mov	r7,sp
800075d2:	20 5d       	sub	sp,20
800075d4:	18 98       	mov	r8,r12
800075d6:	ef 68 ff ec 	st.b	r7[-20],r8
  if( (mci_crc_error(mci)) )
800075da:	4b 58       	lddpc	r8,800076ac <sd_mmc_mci_write_close+0xe0>
800075dc:	70 08       	ld.w	r8,r8[0x0]
800075de:	ef 48 ff f0 	st.w	r7[-16],r8
800075e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800075e6:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800075ea:	4b 28       	lddpc	r8,800076b0 <sd_mmc_mci_write_close+0xe4>
800075ec:	70 08       	ld.w	r8,r8[0x0]
800075ee:	10 99       	mov	r9,r8
800075f0:	e6 19 01 e0 	andh	r9,0x1e0,COH
800075f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800075f8:	71 08       	ld.w	r8,r8[0x40]
800075fa:	f3 e8 10 08 	or	r8,r9,r8
800075fe:	10 99       	mov	r9,r8
80007600:	4a c8       	lddpc	r8,800076b0 <sd_mmc_mci_write_close+0xe4>
80007602:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007604:	4a b8       	lddpc	r8,800076b0 <sd_mmc_mci_write_close+0xe4>
80007606:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
80007608:	e6 18 00 20 	andh	r8,0x20,COH
8000760c:	c0 90       	breq	8000761e <sd_mmc_mci_write_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
8000760e:	4a 98       	lddpc	r8,800076b0 <sd_mmc_mci_write_close+0xe4>
80007610:	70 08       	ld.w	r8,r8[0x0]
80007612:	10 99       	mov	r9,r8
80007614:	b5 d9       	cbr	r9,0x15
80007616:	4a 78       	lddpc	r8,800076b0 <sd_mmc_mci_write_close+0xe4>
80007618:	91 09       	st.w	r8[0x0],r9
    return true;
8000761a:	30 18       	mov	r8,1
8000761c:	c0 28       	rjmp	80007620 <sd_mmc_mci_write_close+0x54>
  }
  else
    return false;
8000761e:	30 08       	mov	r8,0
80007620:	58 08       	cp.w	r8,0
80007622:	c0 30       	breq	80007628 <sd_mmc_mci_write_close+0x5c>
  {
    return false;  // An CRC error has been seen
80007624:	30 08       	mov	r8,0
80007626:	c3 e8       	rjmp	800076a2 <sd_mmc_mci_write_close+0xd6>
  }

  while(!(mci_data_block_ended(mci)));
80007628:	4a 18       	lddpc	r8,800076ac <sd_mmc_mci_write_close+0xe0>
8000762a:	70 08       	ld.w	r8,r8[0x0]
8000762c:	ef 48 ff f8 	st.w	r7[-8],r8
80007630:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007634:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80007638:	49 e8       	lddpc	r8,800076b0 <sd_mmc_mci_write_close+0xe4>
8000763a:	70 08       	ld.w	r8,r8[0x0]
8000763c:	10 99       	mov	r9,r8
8000763e:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007642:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007646:	71 08       	ld.w	r8,r8[0x40]
80007648:	f3 e8 10 08 	or	r8,r9,r8
8000764c:	10 99       	mov	r9,r8
8000764e:	49 98       	lddpc	r8,800076b0 <sd_mmc_mci_write_close+0xe4>
80007650:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007652:	49 88       	lddpc	r8,800076b0 <sd_mmc_mci_write_close+0xe4>
80007654:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_data_block_ended(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_XFRDONE_MASK) != 0;
80007656:	e6 18 08 00 	andh	r8,0x800,COH
8000765a:	5f 18       	srne	r8
8000765c:	58 08       	cp.w	r8,0
8000765e:	ce 50       	breq	80007628 <sd_mmc_mci_write_close+0x5c>

  if( mci_send_cmd( mci, SD_MMC_STOP_WRITE_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
80007660:	49 38       	lddpc	r8,800076ac <sd_mmc_mci_write_close+0xe0>
80007662:	70 08       	ld.w	r8,r8[0x0]
80007664:	3f fa       	mov	r10,-1
80007666:	e2 6b 10 cc 	mov	r11,135372
8000766a:	10 9c       	mov	r12,r8
8000766c:	f0 1f 00 12 	mcall	800076b4 <sd_mmc_mci_write_close+0xe8>
80007670:	18 98       	mov	r8,r12
80007672:	58 08       	cp.w	r8,0
80007674:	c0 30       	breq	8000767a <sd_mmc_mci_write_close+0xae>
  {
    return false;
80007676:	30 08       	mov	r8,0
80007678:	c1 58       	rjmp	800076a2 <sd_mmc_mci_write_close+0xd6>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  if( slot==SD_SLOT_4BITS )
8000767a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000767e:	30 18       	mov	r8,1
80007680:	f0 09 18 00 	cp.b	r9,r8
80007684:	c0 81       	brne	80007694 <sd_mmc_mci_write_close+0xc8>
  {
    while(!(gpio_get_pin_value(SD_SLOT_4BITS_DATA0_PIN)));                             // Wait until the card is ready.
80007686:	31 3c       	mov	r12,19
80007688:	f0 1f 00 0c 	mcall	800076b8 <sd_mmc_mci_write_close+0xec>
8000768c:	18 98       	mov	r8,r12
8000768e:	58 08       	cp.w	r8,0
80007690:	cf b0       	breq	80007686 <sd_mmc_mci_write_close+0xba>
80007692:	c0 78       	rjmp	800076a0 <sd_mmc_mci_write_close+0xd4>
  }
  else
  {
    while(!(gpio_get_pin_value(SD_SLOT_8BITS_DATA0_PIN)));                             // Wait until the card is ready.
80007694:	31 dc       	mov	r12,29
80007696:	f0 1f 00 09 	mcall	800076b8 <sd_mmc_mci_write_close+0xec>
8000769a:	18 98       	mov	r8,r12
8000769c:	58 08       	cp.w	r8,0
8000769e:	cf b0       	breq	80007694 <sd_mmc_mci_write_close+0xc8>
  }
  return true;
800076a0:	30 18       	mov	r8,1
}
800076a2:	10 9c       	mov	r12,r8
800076a4:	2f bd       	sub	sp,-20
800076a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800076aa:	00 00       	add	r0,r0
800076ac:	00 00       	add	r0,r0
800076ae:	01 34       	ld.ub	r4,r0++
800076b0:	00 00       	add	r0,r0
800076b2:	07 b0       	ld.ub	r0,r3[0x3]
800076b4:	80 00       	ld.sh	r0,r0[0x0]
800076b6:	94 74       	ld.sh	r4,r10[0xe]
800076b8:	80 00       	ld.sh	r0,r0[0x0]
800076ba:	8e a0       	ld.uh	r0,r7[0x4]

800076bc <int2alpha>:

char Statement[MSG_LENGTH] = {0};
uint16_t enciphered_blocks = 0, deciphered_blocks = 0, aes_step = 0;
//MESSAGE_STRING_t Lcd_Message;
void int2alpha (uint16_t value, char * dest)
{
800076bc:	eb cd 40 80 	pushm	r7,lr
800076c0:	1a 97       	mov	r7,sp
800076c2:	20 5d       	sub	sp,20
800076c4:	18 98       	mov	r8,r12
800076c6:	ef 4b ff ec 	st.w	r7[-20],r11
800076ca:	ef 58 ff f0 	st.h	r7[-16],r8
	uint8_t i = 0, value_len = 0, temp[10];
800076ce:	30 08       	mov	r8,0
800076d0:	ef 68 ff fe 	st.b	r7[-2],r8
800076d4:	30 08       	mov	r8,0
800076d6:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (value == 0)
800076da:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800076de:	30 08       	mov	r8,0
800076e0:	f0 09 19 00 	cp.h	r9,r8
800076e4:	c2 c1       	brne	8000773c <int2alpha+0x80>
	{
		return;
800076e6:	c5 68       	rjmp	80007792 <int2alpha+0xd6>
	}
	while (value != 0)
	{
		temp[i++] = value % 10 + '0';
800076e8:	ef 3b ff fe 	ld.ub	r11,r7[-2]
800076ec:	ef 1a ff f0 	ld.uh	r10,r7[-16]
800076f0:	e0 68 cc cd 	mov	r8,52429
800076f4:	ea 18 cc cc 	orh	r8,0xcccc
800076f8:	f4 08 06 48 	mulu.d	r8,r10,r8
800076fc:	a3 99       	lsr	r9,0x3
800076fe:	12 98       	mov	r8,r9
80007700:	a3 68       	lsl	r8,0x2
80007702:	12 08       	add	r8,r9
80007704:	a1 78       	lsl	r8,0x1
80007706:	f4 08 01 08 	sub	r8,r10,r8
8000770a:	5c 88       	casts.h	r8
8000770c:	5c 58       	castu.b	r8
8000770e:	2d 08       	sub	r8,-48
80007710:	5c 58       	castu.b	r8
80007712:	ee 0b 00 09 	add	r9,r7,r11
80007716:	f3 68 ff f4 	st.b	r9[-12],r8
8000771a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000771e:	2f f8       	sub	r8,-1
80007720:	ef 68 ff fe 	st.b	r7[-2],r8
		value /= 10;
80007724:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80007728:	e0 68 cc cd 	mov	r8,52429
8000772c:	ea 18 cc cc 	orh	r8,0xcccc
80007730:	f2 08 06 48 	mulu.d	r8,r9,r8
80007734:	f2 08 16 03 	lsr	r8,r9,0x3
80007738:	ef 58 ff f0 	st.h	r7[-16],r8
	
	if (value == 0)
	{
		return;
	}
	while (value != 0)
8000773c:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007740:	30 08       	mov	r8,0
80007742:	f0 09 19 00 	cp.h	r9,r8
80007746:	cd 11       	brne	800076e8 <int2alpha+0x2c>
	{
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
80007748:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000774c:	ef 68 ff ff 	st.b	r7[-1],r8
	i  = 0;
80007750:	30 08       	mov	r8,0
80007752:	ef 68 ff fe 	st.b	r7[-2],r8
	while (i < value_len)
80007756:	c1 78       	rjmp	80007784 <int2alpha+0xc8>
	{
		dest[i] = temp[value_len - i - 1];
80007758:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000775c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007760:	10 09       	add	r9,r8
80007762:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80007766:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000776a:	f4 08 01 08 	sub	r8,r10,r8
8000776e:	20 18       	sub	r8,1
80007770:	ee 08 00 08 	add	r8,r7,r8
80007774:	f1 38 ff f4 	ld.ub	r8,r8[-12]
80007778:	b2 88       	st.b	r9[0x0],r8
		i++;
8000777a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000777e:	2f f8       	sub	r8,-1
80007780:	ef 68 ff fe 	st.b	r7[-2],r8
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
	i  = 0;
	while (i < value_len)
80007784:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007788:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000778c:	f0 09 18 00 	cp.b	r9,r8
80007790:	ce 43       	brcs	80007758 <int2alpha+0x9c>
	{
		dest[i] = temp[value_len - i - 1];
		i++;
	}
}
80007792:	2f bd       	sub	sp,-20
80007794:	e3 cd 80 80 	ldm	sp++,r7,pc

80007798 <string_len>:

uint8_t string_len(char * source_str)
{
80007798:	eb cd 40 80 	pushm	r7,lr
8000779c:	1a 97       	mov	r7,sp
8000779e:	20 2d       	sub	sp,8
800077a0:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t i = 0;
800077a4:	30 08       	mov	r8,0
800077a6:	ef 68 ff ff 	st.b	r7[-1],r8
	
	while (*source_str++ != '\0')
800077aa:	c0 68       	rjmp	800077b6 <string_len+0x1e>
	{
		i++;
800077ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800077b0:	2f f8       	sub	r8,-1
800077b2:	ef 68 ff ff 	st.b	r7[-1],r8

uint8_t string_len(char * source_str)
{
	uint8_t i = 0;
	
	while (*source_str++ != '\0')
800077b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800077ba:	11 89       	ld.ub	r9,r8[0x0]
800077bc:	30 08       	mov	r8,0
800077be:	f0 09 18 00 	cp.b	r9,r8
800077c2:	5f 18       	srne	r8
800077c4:	5c 58       	castu.b	r8
800077c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800077ca:	2f f9       	sub	r9,-1
800077cc:	ef 49 ff f8 	st.w	r7[-8],r9
800077d0:	58 08       	cp.w	r8,0
800077d2:	ce d1       	brne	800077ac <string_len+0x14>
	{
		i++;
	}
	return i;
800077d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800077d8:	10 9c       	mov	r12,r8
800077da:	2f ed       	sub	sp,-8
800077dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800077e0 <string_cat>:

void string_cat(const char * source, char * dest)
{
800077e0:	eb cd 40 80 	pushm	r7,lr
800077e4:	1a 97       	mov	r7,sp
800077e6:	20 2d       	sub	sp,8
800077e8:	ef 4c ff fc 	st.w	r7[-4],r12
800077ec:	ef 4b ff f8 	st.w	r7[-8],r11
	while (*source != '\0')
800077f0:	c1 18       	rjmp	80007812 <string_cat+0x32>
	{
		*dest++ = *source++;
800077f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800077f6:	11 88       	ld.ub	r8,r8[0x0]
800077f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800077fc:	b2 88       	st.b	r9[0x0],r8
800077fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007802:	2f f8       	sub	r8,-1
80007804:	ef 48 ff f8 	st.w	r7[-8],r8
80007808:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000780c:	2f f8       	sub	r8,-1
8000780e:	ef 48 ff fc 	st.w	r7[-4],r8
	return i;
}

void string_cat(const char * source, char * dest)
{
	while (*source != '\0')
80007812:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007816:	11 88       	ld.ub	r8,r8[0x0]
80007818:	58 08       	cp.w	r8,0
8000781a:	ce c1       	brne	800077f2 <string_cat+0x12>
	{
		*dest++ = *source++;
	}
}
8000781c:	2f ed       	sub	sp,-8
8000781e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007822:	d7 03       	nop

80007824 <sd_mmc_mci_read_multiple_sector>:

bool sd_mmc_mci_read_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
80007824:	eb cd 40 80 	pushm	r7,lr
80007828:	1a 97       	mov	r7,sp
8000782a:	20 5d       	sub	sp,20
8000782c:	18 99       	mov	r9,r12
8000782e:	16 98       	mov	r8,r11
80007830:	ef 4a ff ec 	st.w	r7[-20],r10
80007834:	ef 69 ff f4 	st.b	r7[-12],r9
80007838:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
8000783c:	30 18       	mov	r8,1
8000783e:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
80007842:	30 08       	mov	r8,0
80007844:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
80007848:	30 08       	mov	r8,0
8000784a:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
8000784e:	30 08       	mov	r8,0
80007850:	ef 68 ff ff 	st.b	r7[-1],r8
80007854:	c0 c8       	rjmp	8000786c <sd_mmc_mci_read_multiple_sector+0x48>
  {
	  Statement[i] = 0;
80007856:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000785a:	4e 5a       	lddpc	r10,800079ec <sd_mmc_mci_read_multiple_sector+0x1c8>
8000785c:	30 08       	mov	r8,0
8000785e:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
80007862:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007866:	2f f8       	sub	r8,-1
80007868:	ef 68 ff ff 	st.b	r7[-1],r8
8000786c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007870:	36 38       	mov	r8,99
80007872:	f0 09 18 00 	cp.b	r9,r8
80007876:	fe 98 ff f0 	brls	80007856 <sd_mmc_mci_read_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
8000787a:	4d e8       	lddpc	r8,800079f0 <sd_mmc_mci_read_multiple_sector+0x1cc>
8000787c:	90 08       	ld.sh	r8,r8[0x0]
8000787e:	2f f8       	sub	r8,-1
80007880:	5c 88       	casts.h	r8
80007882:	4d c9       	lddpc	r9,800079f0 <sd_mmc_mci_read_multiple_sector+0x1cc>
80007884:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks = 0;
80007886:	4d c9       	lddpc	r9,800079f4 <sd_mmc_mci_read_multiple_sector+0x1d0>
80007888:	30 08       	mov	r8,0
8000788a:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks += nb_sector;
8000788c:	4d b8       	lddpc	r8,800079f8 <sd_mmc_mci_read_multiple_sector+0x1d4>
8000788e:	90 08       	ld.sh	r8,r8[0x0]
80007890:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007894:	f2 08 00 08 	add	r8,r9,r8
80007898:	5c 88       	casts.h	r8
8000789a:	4d 89       	lddpc	r9,800079f8 <sd_mmc_mci_read_multiple_sector+0x1d4>
8000789c:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
8000789e:	4d 58       	lddpc	r8,800079f0 <sd_mmc_mci_read_multiple_sector+0x1cc>
800078a0:	90 08       	ld.sh	r8,r8[0x0]
800078a2:	5c 78       	castu.h	r8
800078a4:	4d 2b       	lddpc	r11,800079ec <sd_mmc_mci_read_multiple_sector+0x1c8>
800078a6:	10 9c       	mov	r12,r8
800078a8:	f0 1f 00 55 	mcall	800079fc <sd_mmc_mci_read_multiple_sector+0x1d8>
  string_cat(" Deciphered ", &Statement[string_len(Statement)]);
800078ac:	4d 0c       	lddpc	r12,800079ec <sd_mmc_mci_read_multiple_sector+0x1c8>
800078ae:	f0 1f 00 55 	mcall	80007a00 <sd_mmc_mci_read_multiple_sector+0x1dc>
800078b2:	18 98       	mov	r8,r12
800078b4:	10 99       	mov	r9,r8
800078b6:	4c e8       	lddpc	r8,800079ec <sd_mmc_mci_read_multiple_sector+0x1c8>
800078b8:	f2 08 00 08 	add	r8,r9,r8
800078bc:	10 9b       	mov	r11,r8
800078be:	4d 2c       	lddpc	r12,80007a04 <sd_mmc_mci_read_multiple_sector+0x1e0>
800078c0:	f0 1f 00 52 	mcall	80007a08 <sd_mmc_mci_read_multiple_sector+0x1e4>
  int2alpha(deciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
800078c4:	4c ac       	lddpc	r12,800079ec <sd_mmc_mci_read_multiple_sector+0x1c8>
800078c6:	f0 1f 00 4f 	mcall	80007a00 <sd_mmc_mci_read_multiple_sector+0x1dc>
800078ca:	18 98       	mov	r8,r12
800078cc:	10 99       	mov	r9,r8
800078ce:	4c 88       	lddpc	r8,800079ec <sd_mmc_mci_read_multiple_sector+0x1c8>
800078d0:	10 09       	add	r9,r8
800078d2:	4c a8       	lddpc	r8,800079f8 <sd_mmc_mci_read_multiple_sector+0x1d4>
800078d4:	90 08       	ld.sh	r8,r8[0x0]
800078d6:	5c 78       	castu.h	r8
800078d8:	12 9b       	mov	r11,r9
800078da:	10 9c       	mov	r12,r8
800078dc:	f0 1f 00 48 	mcall	800079fc <sd_mmc_mci_read_multiple_sector+0x1d8>
  string_cat(" sectors", &Statement[string_len(Statement)]);
800078e0:	4c 3c       	lddpc	r12,800079ec <sd_mmc_mci_read_multiple_sector+0x1c8>
800078e2:	f0 1f 00 48 	mcall	80007a00 <sd_mmc_mci_read_multiple_sector+0x1dc>
800078e6:	18 98       	mov	r8,r12
800078e8:	10 99       	mov	r9,r8
800078ea:	4c 18       	lddpc	r8,800079ec <sd_mmc_mci_read_multiple_sector+0x1c8>
800078ec:	f2 08 00 08 	add	r8,r9,r8
800078f0:	10 9b       	mov	r11,r8
800078f2:	4c 7c       	lddpc	r12,80007a0c <sd_mmc_mci_read_multiple_sector+0x1e8>
800078f4:	f0 1f 00 45 	mcall	80007a08 <sd_mmc_mci_read_multiple_sector+0x1e4>
  
  //et024006_DrawFilledRect(10, 3 * 10, ET024006_WIDTH, 10, WHITE);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 3 * 10, WHITE, BLACK);
800078f8:	4c 6b       	lddpc	r11,80007a10 <sd_mmc_mci_read_multiple_sector+0x1ec>
800078fa:	30 08       	mov	r8,0
800078fc:	1a d8       	st.w	--sp,r8
800078fe:	e0 68 ff ff 	mov	r8,65535
80007902:	31 e9       	mov	r9,30
80007904:	30 aa       	mov	r10,10
80007906:	4b ac       	lddpc	r12,800079ec <sd_mmc_mci_read_multiple_sector+0x1c8>
80007908:	f0 1f 00 43 	mcall	80007a14 <sd_mmc_mci_read_multiple_sector+0x1f0>
8000790c:	2f fd       	sub	sp,-4
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
8000790e:	c4 38       	rjmp	80007994 <sd_mmc_mci_read_multiple_sector+0x170>
  {
    // (re)load first stage.
    dma_mci_2_ram((0==(buffer_id++%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80007910:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007914:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007918:	5f 08       	sreq	r8
8000791a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000791e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007922:	2f f8       	sub	r8,-1
80007924:	ef 68 ff fb 	st.b	r7[-5],r8
80007928:	58 09       	cp.w	r9,0
8000792a:	c0 30       	breq	80007930 <sd_mmc_mci_read_multiple_sector+0x10c>
8000792c:	4b b8       	lddpc	r8,80007a18 <sd_mmc_mci_read_multiple_sector+0x1f4>
8000792e:	c0 28       	rjmp	80007932 <sd_mmc_mci_read_multiple_sector+0x10e>
80007930:	4b b8       	lddpc	r8,80007a1c <sd_mmc_mci_read_multiple_sector+0x1f8>
80007932:	e0 6b 02 00 	mov	r11,512
80007936:	10 9c       	mov	r12,r8
80007938:	f0 1f 00 3a 	mcall	80007a20 <sd_mmc_mci_read_multiple_sector+0x1fc>

    // (re)load second stage.
    if( !b_first_step )
8000793c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007940:	ec 18 00 01 	eorl	r8,0x1
80007944:	5c 58       	castu.b	r8
80007946:	c1 d0       	breq	80007980 <sd_mmc_mci_read_multiple_sector+0x15c>
	{
      //apply_aes_decryption(&AVR32_AES, (0==(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
	  addr = addr + 512L; //sector_index++;
80007948:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000794c:	f0 c8 fe 00 	sub	r8,r8,-512
80007950:	ef 48 ff ec 	st.w	r7[-20],r8
	  if (!udi_msc_trans_block(true, (0==(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
80007954:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007958:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000795c:	c0 31       	brne	80007962 <sd_mmc_mci_read_multiple_sector+0x13e>
8000795e:	4a f8       	lddpc	r8,80007a18 <sd_mmc_mci_read_multiple_sector+0x1f4>
80007960:	c0 28       	rjmp	80007964 <sd_mmc_mci_read_multiple_sector+0x140>
80007962:	4a f8       	lddpc	r8,80007a1c <sd_mmc_mci_read_multiple_sector+0x1f8>
80007964:	30 09       	mov	r9,0
80007966:	e0 6a 02 00 	mov	r10,512
8000796a:	10 9b       	mov	r11,r8
8000796c:	30 1c       	mov	r12,1
8000796e:	f0 1f 00 2e 	mcall	80007a24 <sd_mmc_mci_read_multiple_sector+0x200>
80007972:	18 98       	mov	r8,r12
80007974:	ec 18 00 01 	eorl	r8,0x1
80007978:	5c 58       	castu.b	r8
8000797a:	c0 30       	breq	80007980 <sd_mmc_mci_read_multiple_sector+0x15c>
	  {
    	    return false;
8000797c:	30 08       	mov	r8,0
8000797e:	c3 28       	rjmp	800079e2 <sd_mmc_mci_read_multiple_sector+0x1be>
      }

    }
    b_first_step = false;
80007980:	30 08       	mov	r8,0
80007982:	ef 68 ff fa 	st.b	r7[-6],r8
    // Wait completion of DMACA stage.
    while( !is_dma_mci_2_ram_complete() );
80007986:	f0 1f 00 29 	mcall	80007a28 <sd_mmc_mci_read_multiple_sector+0x204>
8000798a:	18 98       	mov	r8,r12
8000798c:	ec 18 00 01 	eorl	r8,0x1
80007990:	5c 58       	castu.b	r8
80007992:	cf a1       	brne	80007986 <sd_mmc_mci_read_multiple_sector+0x162>
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
80007994:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007998:	30 08       	mov	r8,0
8000799a:	f0 09 19 00 	cp.h	r9,r8
8000799e:	5f 18       	srne	r8
800079a0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800079a4:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800079a8:	20 18       	sub	r8,1
800079aa:	ef 58 ff f0 	st.h	r7[-16],r8
800079ae:	58 09       	cp.w	r9,0
800079b0:	cb 01       	brne	80007910 <sd_mmc_mci_read_multiple_sector+0xec>

  }

  // Complete execution of the last transfer (which is in the pipe).
  //apply_aes_decryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
  if (!udi_msc_trans_block(true, (0!=(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
800079b2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800079b6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079ba:	5c 58       	castu.b	r8
800079bc:	c0 30       	breq	800079c2 <sd_mmc_mci_read_multiple_sector+0x19e>
800079be:	49 78       	lddpc	r8,80007a18 <sd_mmc_mci_read_multiple_sector+0x1f4>
800079c0:	c0 28       	rjmp	800079c4 <sd_mmc_mci_read_multiple_sector+0x1a0>
800079c2:	49 78       	lddpc	r8,80007a1c <sd_mmc_mci_read_multiple_sector+0x1f8>
800079c4:	30 09       	mov	r9,0
800079c6:	e0 6a 02 00 	mov	r10,512
800079ca:	10 9b       	mov	r11,r8
800079cc:	30 1c       	mov	r12,1
800079ce:	f0 1f 00 16 	mcall	80007a24 <sd_mmc_mci_read_multiple_sector+0x200>
800079d2:	18 98       	mov	r8,r12
800079d4:	ec 18 00 01 	eorl	r8,0x1
800079d8:	5c 58       	castu.b	r8
800079da:	c0 30       	breq	800079e0 <sd_mmc_mci_read_multiple_sector+0x1bc>
    return false;
800079dc:	30 08       	mov	r8,0
800079de:	c0 28       	rjmp	800079e2 <sd_mmc_mci_read_multiple_sector+0x1be>

  return true;
800079e0:	30 18       	mov	r8,1
}
800079e2:	10 9c       	mov	r12,r8
800079e4:	2f bd       	sub	sp,-20
800079e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800079ea:	00 00       	add	r0,r0
800079ec:	00 00       	add	r0,r0
800079ee:	06 28       	rsub	r8,r3
800079f0:	00 00       	add	r0,r0
800079f2:	06 90       	mov	r0,r3
800079f4:	00 00       	add	r0,r0
800079f6:	06 8c       	andn	r12,r3
800079f8:	00 00       	add	r0,r0
800079fa:	06 8e       	andn	lr,r3
800079fc:	80 00       	ld.sh	r0,r0[0x0]
800079fe:	76 bc       	ld.w	r12,r11[0x2c]
80007a00:	80 00       	ld.sh	r0,r0[0x0]
80007a02:	77 98       	ld.w	r8,r11[0x64]
80007a04:	80 00       	ld.sh	r0,r0[0x0]
80007a06:	60 6c       	ld.w	r12,r0[0x18]
80007a08:	80 00       	ld.sh	r0,r0[0x0]
80007a0a:	77 e0       	ld.w	r0,r11[0x78]
80007a0c:	80 00       	ld.sh	r0,r0[0x0]
80007a0e:	60 7c       	ld.w	r12,r0[0x1c]
80007a10:	80 00       	ld.sh	r0,r0[0x0]
80007a12:	ef b4       	*unknown*
80007a14:	80 00       	ld.sh	r0,r0[0x0]
80007a16:	46 dc       	lddsp	r12,sp[0x1b4]
80007a18:	00 00       	add	r0,r0
80007a1a:	0e 04       	add	r4,r7
80007a1c:	00 00       	add	r0,r0
80007a1e:	0b fc       	ld.ub	r12,r5[0x7]
80007a20:	80 00       	ld.sh	r0,r0[0x0]
80007a22:	70 70       	ld.w	r0,r8[0x1c]
80007a24:	80 00       	ld.sh	r0,r0[0x0]
80007a26:	d1 64       	*unknown*
80007a28:	80 00       	ld.sh	r0,r0[0x0]
80007a2a:	70 c0       	ld.w	r0,r8[0x30]

80007a2c <sd_mmc_mci_write_multiple_sector>:



bool sd_mmc_mci_write_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
80007a2c:	eb cd 40 80 	pushm	r7,lr
80007a30:	1a 97       	mov	r7,sp
80007a32:	20 5d       	sub	sp,20
80007a34:	18 99       	mov	r9,r12
80007a36:	16 98       	mov	r8,r11
80007a38:	ef 4a ff ec 	st.w	r7[-20],r10
80007a3c:	ef 69 ff f4 	st.b	r7[-12],r9
80007a40:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
80007a44:	30 18       	mov	r8,1
80007a46:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
80007a4a:	30 08       	mov	r8,0
80007a4c:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
80007a50:	30 08       	mov	r8,0
80007a52:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
80007a56:	30 08       	mov	r8,0
80007a58:	ef 68 ff ff 	st.b	r7[-1],r8
80007a5c:	c0 c8       	rjmp	80007a74 <sd_mmc_mci_write_multiple_sector+0x48>
  {
	  Statement[i] = 0;
80007a5e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007a62:	4e 4a       	lddpc	r10,80007bf0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007a64:	30 08       	mov	r8,0
80007a66:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
80007a6a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007a6e:	2f f8       	sub	r8,-1
80007a70:	ef 68 ff ff 	st.b	r7[-1],r8
80007a74:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007a78:	36 38       	mov	r8,99
80007a7a:	f0 09 18 00 	cp.b	r9,r8
80007a7e:	fe 98 ff f0 	brls	80007a5e <sd_mmc_mci_write_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
80007a82:	4d d8       	lddpc	r8,80007bf4 <sd_mmc_mci_write_multiple_sector+0x1c8>
80007a84:	90 08       	ld.sh	r8,r8[0x0]
80007a86:	2f f8       	sub	r8,-1
80007a88:	5c 88       	casts.h	r8
80007a8a:	4d b9       	lddpc	r9,80007bf4 <sd_mmc_mci_write_multiple_sector+0x1c8>
80007a8c:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks = 0;
80007a8e:	4d b9       	lddpc	r9,80007bf8 <sd_mmc_mci_write_multiple_sector+0x1cc>
80007a90:	30 08       	mov	r8,0
80007a92:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks += nb_sector;
80007a94:	4d a8       	lddpc	r8,80007bfc <sd_mmc_mci_write_multiple_sector+0x1d0>
80007a96:	90 08       	ld.sh	r8,r8[0x0]
80007a98:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007a9c:	f2 08 00 08 	add	r8,r9,r8
80007aa0:	5c 88       	casts.h	r8
80007aa2:	4d 79       	lddpc	r9,80007bfc <sd_mmc_mci_write_multiple_sector+0x1d0>
80007aa4:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
80007aa6:	4d 48       	lddpc	r8,80007bf4 <sd_mmc_mci_write_multiple_sector+0x1c8>
80007aa8:	90 08       	ld.sh	r8,r8[0x0]
80007aaa:	5c 78       	castu.h	r8
80007aac:	4d 1b       	lddpc	r11,80007bf0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007aae:	10 9c       	mov	r12,r8
80007ab0:	f0 1f 00 54 	mcall	80007c00 <sd_mmc_mci_write_multiple_sector+0x1d4>
  string_cat(" Enciphered ", &Statement[string_len(Statement)]);
80007ab4:	4c fc       	lddpc	r12,80007bf0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007ab6:	f0 1f 00 54 	mcall	80007c04 <sd_mmc_mci_write_multiple_sector+0x1d8>
80007aba:	18 98       	mov	r8,r12
80007abc:	10 99       	mov	r9,r8
80007abe:	4c d8       	lddpc	r8,80007bf0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007ac0:	f2 08 00 08 	add	r8,r9,r8
80007ac4:	10 9b       	mov	r11,r8
80007ac6:	4d 1c       	lddpc	r12,80007c08 <sd_mmc_mci_write_multiple_sector+0x1dc>
80007ac8:	f0 1f 00 51 	mcall	80007c0c <sd_mmc_mci_write_multiple_sector+0x1e0>
  int2alpha(enciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
80007acc:	4c 9c       	lddpc	r12,80007bf0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007ace:	f0 1f 00 4e 	mcall	80007c04 <sd_mmc_mci_write_multiple_sector+0x1d8>
80007ad2:	18 98       	mov	r8,r12
80007ad4:	10 99       	mov	r9,r8
80007ad6:	4c 78       	lddpc	r8,80007bf0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007ad8:	10 09       	add	r9,r8
80007ada:	4c 98       	lddpc	r8,80007bfc <sd_mmc_mci_write_multiple_sector+0x1d0>
80007adc:	90 08       	ld.sh	r8,r8[0x0]
80007ade:	5c 78       	castu.h	r8
80007ae0:	12 9b       	mov	r11,r9
80007ae2:	10 9c       	mov	r12,r8
80007ae4:	f0 1f 00 47 	mcall	80007c00 <sd_mmc_mci_write_multiple_sector+0x1d4>
  string_cat(" sectors", &Statement[string_len(Statement)]);
80007ae8:	4c 2c       	lddpc	r12,80007bf0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007aea:	f0 1f 00 47 	mcall	80007c04 <sd_mmc_mci_write_multiple_sector+0x1d8>
80007aee:	18 98       	mov	r8,r12
80007af0:	10 99       	mov	r9,r8
80007af2:	4c 08       	lddpc	r8,80007bf0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007af4:	f2 08 00 08 	add	r8,r9,r8
80007af8:	10 9b       	mov	r11,r8
80007afa:	4c 6c       	lddpc	r12,80007c10 <sd_mmc_mci_write_multiple_sector+0x1e4>
80007afc:	f0 1f 00 44 	mcall	80007c0c <sd_mmc_mci_write_multiple_sector+0x1e0>
  
  //et024006_DrawFilledRect(10, 5 * 10, ET024006_WIDTH, 10, BLACK);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 5 * 10, WHITE, BLACK);  //et024006_PrintConsole(Statement, BLACK, -1);
80007b00:	4c 5b       	lddpc	r11,80007c14 <sd_mmc_mci_write_multiple_sector+0x1e8>
80007b02:	30 08       	mov	r8,0
80007b04:	1a d8       	st.w	--sp,r8
80007b06:	e0 68 ff ff 	mov	r8,65535
80007b0a:	33 29       	mov	r9,50
80007b0c:	30 aa       	mov	r10,10
80007b0e:	4b 9c       	lddpc	r12,80007bf0 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007b10:	f0 1f 00 42 	mcall	80007c18 <sd_mmc_mci_write_multiple_sector+0x1ec>
80007b14:	2f fd       	sub	sp,-4
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
80007b16:	c4 38       	rjmp	80007b9c <sd_mmc_mci_write_multiple_sector+0x170>

    // (re)load second stage.
    if( !b_first_step )
80007b18:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007b1c:	ec 18 00 01 	eorl	r8,0x1
80007b20:	5c 58       	castu.b	r8
80007b22:	c1 50       	breq	80007b4c <sd_mmc_mci_write_multiple_sector+0x120>
	{
	  //apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
	  addr = addr + 512L; //sector_index++;
80007b24:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007b28:	f0 c8 fe 00 	sub	r8,r8,-512
80007b2c:	ef 48 ff ec 	st.w	r7[-20],r8
      dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80007b30:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007b34:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007b38:	5c 58       	castu.b	r8
80007b3a:	c0 30       	breq	80007b40 <sd_mmc_mci_write_multiple_sector+0x114>
80007b3c:	4b 88       	lddpc	r8,80007c1c <sd_mmc_mci_write_multiple_sector+0x1f0>
80007b3e:	c0 28       	rjmp	80007b42 <sd_mmc_mci_write_multiple_sector+0x116>
80007b40:	4b 88       	lddpc	r8,80007c20 <sd_mmc_mci_write_multiple_sector+0x1f4>
80007b42:	e0 6b 02 00 	mov	r11,512
80007b46:	10 9c       	mov	r12,r8
80007b48:	f0 1f 00 37 	mcall	80007c24 <sd_mmc_mci_write_multiple_sector+0x1f8>
    }
    udi_msc_trans_block(false, (0==(buffer_id++%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL);
80007b4c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007b50:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007b54:	5f 08       	sreq	r8
80007b56:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007b5a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007b5e:	2f f8       	sub	r8,-1
80007b60:	ef 68 ff fb 	st.b	r7[-5],r8
80007b64:	58 09       	cp.w	r9,0
80007b66:	c0 30       	breq	80007b6c <sd_mmc_mci_write_multiple_sector+0x140>
80007b68:	4a d8       	lddpc	r8,80007c1c <sd_mmc_mci_write_multiple_sector+0x1f0>
80007b6a:	c0 28       	rjmp	80007b6e <sd_mmc_mci_write_multiple_sector+0x142>
80007b6c:	4a d8       	lddpc	r8,80007c20 <sd_mmc_mci_write_multiple_sector+0x1f4>
80007b6e:	30 09       	mov	r9,0
80007b70:	e0 6a 02 00 	mov	r10,512
80007b74:	10 9b       	mov	r11,r8
80007b76:	30 0c       	mov	r12,0
80007b78:	f0 1f 00 2c 	mcall	80007c28 <sd_mmc_mci_write_multiple_sector+0x1fc>
    if( !b_first_step ) {
80007b7c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007b80:	ec 18 00 01 	eorl	r8,0x1
80007b84:	5c 58       	castu.b	r8
80007b86:	c0 80       	breq	80007b96 <sd_mmc_mci_write_multiple_sector+0x16a>
      // Wait completion of DMACA stage.
      while( !is_dma_ram_2_mci_complete() );
80007b88:	f0 1f 00 29 	mcall	80007c2c <sd_mmc_mci_write_multiple_sector+0x200>
80007b8c:	18 98       	mov	r8,r12
80007b8e:	ec 18 00 01 	eorl	r8,0x1
80007b92:	5c 58       	castu.b	r8
80007b94:	cf a1       	brne	80007b88 <sd_mmc_mci_write_multiple_sector+0x15c>
    }
    b_first_step=false;
80007b96:	30 08       	mov	r8,0
80007b98:	ef 68 ff fa 	st.b	r7[-6],r8
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
80007b9c:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007ba0:	30 08       	mov	r8,0
80007ba2:	f0 09 19 00 	cp.h	r9,r8
80007ba6:	5f 18       	srne	r8
80007ba8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007bac:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80007bb0:	20 18       	sub	r8,1
80007bb2:	ef 58 ff f0 	st.h	r7[-16],r8
80007bb6:	58 09       	cp.w	r9,0
80007bb8:	cb 01       	brne	80007b18 <sd_mmc_mci_write_multiple_sector+0xec>
    b_first_step=false;
  }

  // Complete execution of the last transfer (which is in the pipe).
  //apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
  dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80007bba:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007bbe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007bc2:	5c 58       	castu.b	r8
80007bc4:	c0 30       	breq	80007bca <sd_mmc_mci_write_multiple_sector+0x19e>
80007bc6:	49 68       	lddpc	r8,80007c1c <sd_mmc_mci_write_multiple_sector+0x1f0>
80007bc8:	c0 28       	rjmp	80007bcc <sd_mmc_mci_write_multiple_sector+0x1a0>
80007bca:	49 68       	lddpc	r8,80007c20 <sd_mmc_mci_write_multiple_sector+0x1f4>
80007bcc:	e0 6b 02 00 	mov	r11,512
80007bd0:	10 9c       	mov	r12,r8
80007bd2:	f0 1f 00 15 	mcall	80007c24 <sd_mmc_mci_write_multiple_sector+0x1f8>
  while( !is_dma_ram_2_mci_complete() );
80007bd6:	f0 1f 00 16 	mcall	80007c2c <sd_mmc_mci_write_multiple_sector+0x200>
80007bda:	18 98       	mov	r8,r12
80007bdc:	ec 18 00 01 	eorl	r8,0x1
80007be0:	5c 58       	castu.b	r8
80007be2:	cf a1       	brne	80007bd6 <sd_mmc_mci_write_multiple_sector+0x1aa>
  return true;
80007be4:	30 18       	mov	r8,1
}
80007be6:	10 9c       	mov	r12,r8
80007be8:	2f bd       	sub	sp,-20
80007bea:	e3 cd 80 80 	ldm	sp++,r7,pc
80007bee:	00 00       	add	r0,r0
80007bf0:	00 00       	add	r0,r0
80007bf2:	06 28       	rsub	r8,r3
80007bf4:	00 00       	add	r0,r0
80007bf6:	06 90       	mov	r0,r3
80007bf8:	00 00       	add	r0,r0
80007bfa:	06 8e       	andn	lr,r3
80007bfc:	00 00       	add	r0,r0
80007bfe:	06 8c       	andn	r12,r3
80007c00:	80 00       	ld.sh	r0,r0[0x0]
80007c02:	76 bc       	ld.w	r12,r11[0x2c]
80007c04:	80 00       	ld.sh	r0,r0[0x0]
80007c06:	77 98       	ld.w	r8,r11[0x64]
80007c08:	80 00       	ld.sh	r0,r0[0x0]
80007c0a:	60 88       	ld.w	r8,r0[0x20]
80007c0c:	80 00       	ld.sh	r0,r0[0x0]
80007c0e:	77 e0       	ld.w	r0,r11[0x78]
80007c10:	80 00       	ld.sh	r0,r0[0x0]
80007c12:	60 7c       	ld.w	r12,r0[0x1c]
80007c14:	80 00       	ld.sh	r0,r0[0x0]
80007c16:	ef b4       	*unknown*
80007c18:	80 00       	ld.sh	r0,r0[0x0]
80007c1a:	46 dc       	lddsp	r12,sp[0x1b4]
80007c1c:	00 00       	add	r0,r0
80007c1e:	0e 04       	add	r4,r7
80007c20:	00 00       	add	r0,r0
80007c22:	0b fc       	ld.ub	r12,r5[0x7]
80007c24:	80 00       	ld.sh	r0,r0[0x0]
80007c26:	70 e0       	ld.w	r0,r8[0x38]
80007c28:	80 00       	ld.sh	r0,r0[0x0]
80007c2a:	d1 64       	*unknown*
80007c2c:	80 00       	ld.sh	r0,r0[0x0]
80007c2e:	71 30       	ld.w	r0,r8[0x4c]

80007c30 <sd_mmc_mci_cmd_send_status>:
   return true;
}
#endif      // end FUNC_MMC_CARD_SECU

bool  sd_mmc_mci_cmd_send_status(uint8_t slot)
{
80007c30:	eb cd 40 80 	pushm	r7,lr
80007c34:	1a 97       	mov	r7,sp
80007c36:	20 1d       	sub	sp,4
80007c38:	18 98       	mov	r8,r12
80007c3a:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80007c3e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c42:	30 18       	mov	r8,1
80007c44:	f0 09 18 00 	cp.b	r9,r8
80007c48:	e0 88 00 04 	brls	80007c50 <sd_mmc_mci_cmd_send_status+0x20>
    return false;
80007c4c:	30 08       	mov	r8,0
80007c4e:	c2 28       	rjmp	80007c92 <sd_mmc_mci_cmd_send_status+0x62>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80007c50:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007c54:	49 29       	lddpc	r9,80007c9c <sd_mmc_mci_cmd_send_status+0x6c>
80007c56:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007c5a:	10 9a       	mov	r10,r8
80007c5c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c60:	49 08       	lddpc	r8,80007ca0 <sd_mmc_mci_cmd_send_status+0x70>
80007c62:	70 08       	ld.w	r8,r8[0x0]
80007c64:	12 9b       	mov	r11,r9
80007c66:	10 9c       	mov	r12,r8
80007c68:	f0 1f 00 0f 	mcall	80007ca4 <sd_mmc_mci_cmd_send_status+0x74>

  if (mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80007c6c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c70:	48 e8       	lddpc	r8,80007ca8 <sd_mmc_mci_cmd_send_status+0x78>
80007c72:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80007c76:	48 b8       	lddpc	r8,80007ca0 <sd_mmc_mci_cmd_send_status+0x70>
80007c78:	70 08       	ld.w	r8,r8[0x0]
80007c7a:	12 9a       	mov	r10,r9
80007c7c:	e0 6b 10 4d 	mov	r11,4173
80007c80:	10 9c       	mov	r12,r8
80007c82:	f0 1f 00 0b 	mcall	80007cac <sd_mmc_mci_cmd_send_status+0x7c>
80007c86:	18 98       	mov	r8,r12
80007c88:	58 08       	cp.w	r8,0
80007c8a:	c0 30       	breq	80007c90 <sd_mmc_mci_cmd_send_status+0x60>
    return false;
80007c8c:	30 08       	mov	r8,0
80007c8e:	c0 28       	rjmp	80007c92 <sd_mmc_mci_cmd_send_status+0x62>

  return true;
80007c90:	30 18       	mov	r8,1
}
80007c92:	10 9c       	mov	r12,r8
80007c94:	2f fd       	sub	sp,-4
80007c96:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c9a:	00 00       	add	r0,r0
80007c9c:	00 00       	add	r0,r0
80007c9e:	0d fc       	ld.ub	r12,r6[0x7]
80007ca0:	00 00       	add	r0,r0
80007ca2:	01 34       	ld.ub	r4,r0++
80007ca4:	80 00       	ld.sh	r0,r0[0x0]
80007ca6:	96 0c       	ld.sh	r12,r11[0x0]
80007ca8:	00 00       	add	r0,r0
80007caa:	0b ec       	ld.ub	r12,r5[0x6]
80007cac:	80 00       	ld.sh	r0,r0[0x0]
80007cae:	94 74       	ld.sh	r4,r10[0xe]

80007cb0 <sd_mmc_mci_test_unit_ready>:
 */
//! @{


Ctrl_status sd_mmc_mci_test_unit_ready(uint8_t slot)
{
80007cb0:	eb cd 40 80 	pushm	r7,lr
80007cb4:	1a 97       	mov	r7,sp
80007cb6:	20 1d       	sub	sp,4
80007cb8:	18 98       	mov	r8,r12
80007cba:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS) return CTRL_FAIL;
80007cbe:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007cc2:	30 18       	mov	r8,1
80007cc4:	f0 09 18 00 	cp.b	r9,r8
80007cc8:	e0 88 00 04 	brls	80007cd0 <sd_mmc_mci_test_unit_ready+0x20>
80007ccc:	30 18       	mov	r8,1
80007cce:	c4 d8       	rjmp	80007d68 <sd_mmc_mci_test_unit_ready+0xb8>

  Sd_mmc_mci_access_signal_on();
  switch (sd_mmc_mci_presence_status[slot])
80007cd0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007cd4:	4a 79       	lddpc	r9,80007d70 <sd_mmc_mci_test_unit_ready+0xc0>
80007cd6:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007cda:	58 18       	cp.w	r8,1
80007cdc:	c1 d0       	breq	80007d16 <sd_mmc_mci_test_unit_ready+0x66>
80007cde:	58 28       	cp.w	r8,2
80007ce0:	c3 50       	breq	80007d4a <sd_mmc_mci_test_unit_ready+0x9a>
80007ce2:	58 08       	cp.w	r8,0
80007ce4:	c3 b1       	brne	80007d5a <sd_mmc_mci_test_unit_ready+0xaa>
  {
    case SD_MMC_REMOVED:
      sd_mmc_mci_init_done[slot] = false;
80007ce6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007cea:	4a 3a       	lddpc	r10,80007d74 <sd_mmc_mci_test_unit_ready+0xc4>
80007cec:	30 08       	mov	r8,0
80007cee:	f4 09 0b 08 	st.b	r10[r9],r8
      if (sd_mmc_mci_mem_check(slot))
80007cf2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007cf6:	10 9c       	mov	r12,r8
80007cf8:	f0 1f 00 20 	mcall	80007d78 <sd_mmc_mci_test_unit_ready+0xc8>
80007cfc:	18 98       	mov	r8,r12
80007cfe:	58 08       	cp.w	r8,0
80007d00:	c0 90       	breq	80007d12 <sd_mmc_mci_test_unit_ready+0x62>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_INSERTED;
80007d02:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007d06:	49 ba       	lddpc	r10,80007d70 <sd_mmc_mci_test_unit_ready+0xc0>
80007d08:	30 18       	mov	r8,1
80007d0a:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
80007d0e:	30 38       	mov	r8,3
80007d10:	c2 c8       	rjmp	80007d68 <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
80007d12:	30 28       	mov	r8,2
80007d14:	c2 a8       	rjmp	80007d68 <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_INSERTED:
      if (!sd_mmc_mci_mem_check(slot))
80007d16:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007d1a:	10 9c       	mov	r12,r8
80007d1c:	f0 1f 00 17 	mcall	80007d78 <sd_mmc_mci_test_unit_ready+0xc8>
80007d20:	18 98       	mov	r8,r12
80007d22:	ec 18 00 01 	eorl	r8,0x1
80007d26:	5c 58       	castu.b	r8
80007d28:	c0 f0       	breq	80007d46 <sd_mmc_mci_test_unit_ready+0x96>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVING;
80007d2a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007d2e:	49 1a       	lddpc	r10,80007d70 <sd_mmc_mci_test_unit_ready+0xc0>
80007d30:	30 28       	mov	r8,2
80007d32:	f4 09 0b 08 	st.b	r10[r9],r8
        sd_mmc_mci_init_done[slot] = false;
80007d36:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007d3a:	48 fa       	lddpc	r10,80007d74 <sd_mmc_mci_test_unit_ready+0xc4>
80007d3c:	30 08       	mov	r8,0
80007d3e:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
80007d42:	30 38       	mov	r8,3
80007d44:	c1 28       	rjmp	80007d68 <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_GOOD;
80007d46:	30 08       	mov	r8,0
80007d48:	c1 08       	rjmp	80007d68 <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_REMOVING:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
80007d4a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007d4e:	48 9a       	lddpc	r10,80007d70 <sd_mmc_mci_test_unit_ready+0xc0>
80007d50:	30 08       	mov	r8,0
80007d52:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
80007d56:	30 28       	mov	r8,2
80007d58:	c0 88       	rjmp	80007d68 <sd_mmc_mci_test_unit_ready+0xb8>

    default:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
80007d5a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007d5e:	48 5a       	lddpc	r10,80007d70 <sd_mmc_mci_test_unit_ready+0xc0>
80007d60:	30 08       	mov	r8,0
80007d62:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_BUSY;
80007d66:	30 38       	mov	r8,3
  }
}
80007d68:	10 9c       	mov	r12,r8
80007d6a:	2f fd       	sub	sp,-4
80007d6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d70:	00 00       	add	r0,r0
80007d72:	01 38       	ld.ub	r8,r0++
80007d74:	00 00       	add	r0,r0
80007d76:	06 14       	sub	r4,r3
80007d78:	80 00       	ld.sh	r0,r0[0x0]
80007d7a:	71 50       	ld.w	r0,r8[0x54]

80007d7c <sd_mmc_mci_test_unit_ready_0>:


Ctrl_status sd_mmc_mci_test_unit_ready_0(void)
{
80007d7c:	eb cd 40 80 	pushm	r7,lr
80007d80:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(0);
80007d82:	30 0c       	mov	r12,0
80007d84:	f0 1f 00 03 	mcall	80007d90 <sd_mmc_mci_test_unit_ready_0+0x14>
80007d88:	18 98       	mov	r8,r12
}
80007d8a:	10 9c       	mov	r12,r8
80007d8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d90:	80 00       	ld.sh	r0,r0[0x0]
80007d92:	7c b0       	ld.w	r0,lr[0x2c]

80007d94 <sd_mmc_mci_test_unit_ready_1>:


Ctrl_status sd_mmc_mci_test_unit_ready_1(void)
{
80007d94:	eb cd 40 80 	pushm	r7,lr
80007d98:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(1);
80007d9a:	30 1c       	mov	r12,1
80007d9c:	f0 1f 00 03 	mcall	80007da8 <sd_mmc_mci_test_unit_ready_1+0x14>
80007da0:	18 98       	mov	r8,r12
}
80007da2:	10 9c       	mov	r12,r8
80007da4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007da8:	80 00       	ld.sh	r0,r0[0x0]
80007daa:	7c b0       	ld.w	r0,lr[0x2c]

80007dac <sd_mmc_mci_read_capacity>:


Ctrl_status sd_mmc_mci_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
80007dac:	eb cd 40 80 	pushm	r7,lr
80007db0:	1a 97       	mov	r7,sp
80007db2:	20 2d       	sub	sp,8
80007db4:	18 98       	mov	r8,r12
80007db6:	ef 4b ff f8 	st.w	r7[-8],r11
80007dba:	ef 68 ff fc 	st.b	r7[-4],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80007dbe:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007dc2:	10 9c       	mov	r12,r8
80007dc4:	f0 1f 00 0c 	mcall	80007df4 <sd_mmc_mci_read_capacity+0x48>
80007dc8:	18 98       	mov	r8,r12
80007dca:	ec 18 00 01 	eorl	r8,0x1
80007dce:	5c 58       	castu.b	r8
80007dd0:	c0 30       	breq	80007dd6 <sd_mmc_mci_read_capacity+0x2a>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80007dd2:	30 28       	mov	r8,2
80007dd4:	c0 c8       	rjmp	80007dec <sd_mmc_mci_read_capacity+0x40>
   }
   *nb_sector = g_card_size[slot]-1;
80007dd6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007dda:	48 88       	lddpc	r8,80007df8 <sd_mmc_mci_read_capacity+0x4c>
80007ddc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007de0:	f0 c9 00 01 	sub	r9,r8,1
80007de4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007de8:	91 09       	st.w	r8[0x0],r9
   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80007dea:	30 08       	mov	r8,0
}
80007dec:	10 9c       	mov	r12,r8
80007dee:	2f ed       	sub	sp,-8
80007df0:	e3 cd 80 80 	ldm	sp++,r7,pc
80007df4:	80 00       	ld.sh	r0,r0[0x0]
80007df6:	71 50       	ld.w	r0,r8[0x54]
80007df8:	00 00       	add	r0,r0
80007dfa:	0b f4       	ld.ub	r4,r5[0x7]

80007dfc <sd_mmc_mci_read_capacity_0>:


Ctrl_status sd_mmc_mci_read_capacity_0(uint32_t *nb_sector)
{
80007dfc:	eb cd 40 80 	pushm	r7,lr
80007e00:	1a 97       	mov	r7,sp
80007e02:	20 1d       	sub	sp,4
80007e04:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(0, nb_sector);
80007e08:	ee fb ff fc 	ld.w	r11,r7[-4]
80007e0c:	30 0c       	mov	r12,0
80007e0e:	f0 1f 00 04 	mcall	80007e1c <sd_mmc_mci_read_capacity_0+0x20>
80007e12:	18 98       	mov	r8,r12
}
80007e14:	10 9c       	mov	r12,r8
80007e16:	2f fd       	sub	sp,-4
80007e18:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e1c:	80 00       	ld.sh	r0,r0[0x0]
80007e1e:	7d ac       	ld.w	r12,lr[0x68]

80007e20 <sd_mmc_mci_read_capacity_1>:


Ctrl_status sd_mmc_mci_read_capacity_1(uint32_t *nb_sector)
{
80007e20:	eb cd 40 80 	pushm	r7,lr
80007e24:	1a 97       	mov	r7,sp
80007e26:	20 1d       	sub	sp,4
80007e28:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(1, nb_sector);
80007e2c:	ee fb ff fc 	ld.w	r11,r7[-4]
80007e30:	30 1c       	mov	r12,1
80007e32:	f0 1f 00 04 	mcall	80007e40 <sd_mmc_mci_read_capacity_1+0x20>
80007e36:	18 98       	mov	r8,r12
}
80007e38:	10 9c       	mov	r12,r8
80007e3a:	2f fd       	sub	sp,-4
80007e3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e40:	80 00       	ld.sh	r0,r0[0x0]
80007e42:	7d ac       	ld.w	r12,lr[0x68]

80007e44 <sd_mmc_mci_wr_protect>:


bool sd_mmc_mci_wr_protect(uint8_t slot)
{
80007e44:	eb cd 40 80 	pushm	r7,lr
80007e48:	1a 97       	mov	r7,sp
80007e4a:	20 1d       	sub	sp,4
80007e4c:	18 98       	mov	r8,r12
80007e4e:	ef 68 ff fc 	st.b	r7[-4],r8
  return is_sd_mmc_mci_card_protected(slot);
80007e52:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007e56:	10 9c       	mov	r12,r8
80007e58:	f0 1f 00 04 	mcall	80007e68 <sd_mmc_mci_wr_protect+0x24>
80007e5c:	18 98       	mov	r8,r12
}
80007e5e:	10 9c       	mov	r12,r8
80007e60:	2f fd       	sub	sp,-4
80007e62:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e66:	00 00       	add	r0,r0
80007e68:	80 00       	ld.sh	r0,r0[0x0]
80007e6a:	60 f4       	ld.w	r4,r0[0x3c]

80007e6c <sd_mmc_mci_wr_protect_0>:


bool sd_mmc_mci_wr_protect_0(void)
{
80007e6c:	eb cd 40 80 	pushm	r7,lr
80007e70:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(0);
80007e72:	30 0c       	mov	r12,0
80007e74:	f0 1f 00 03 	mcall	80007e80 <sd_mmc_mci_wr_protect_0+0x14>
80007e78:	18 98       	mov	r8,r12
}
80007e7a:	10 9c       	mov	r12,r8
80007e7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e80:	80 00       	ld.sh	r0,r0[0x0]
80007e82:	7e 44       	ld.w	r4,pc[0x10]

80007e84 <sd_mmc_mci_wr_protect_1>:


bool sd_mmc_mci_wr_protect_1(void)
{
80007e84:	eb cd 40 80 	pushm	r7,lr
80007e88:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(1);
80007e8a:	30 1c       	mov	r12,1
80007e8c:	f0 1f 00 03 	mcall	80007e98 <sd_mmc_mci_wr_protect_1+0x14>
80007e90:	18 98       	mov	r8,r12
}
80007e92:	10 9c       	mov	r12,r8
80007e94:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e98:	80 00       	ld.sh	r0,r0[0x0]
80007e9a:	7e 44       	ld.w	r4,pc[0x10]

80007e9c <sd_mmc_mci_removal>:


bool sd_mmc_mci_removal(uint8_t slot)
{
80007e9c:	eb cd 40 80 	pushm	r7,lr
80007ea0:	1a 97       	mov	r7,sp
80007ea2:	20 1d       	sub	sp,4
80007ea4:	18 98       	mov	r8,r12
80007ea6:	ef 68 ff fc 	st.b	r7[-4],r8
  return false;
80007eaa:	30 08       	mov	r8,0
}
80007eac:	10 9c       	mov	r12,r8
80007eae:	2f fd       	sub	sp,-4
80007eb0:	e3 cd 80 80 	ldm	sp++,r7,pc

80007eb4 <sd_mmc_mci_removal_0>:


bool sd_mmc_mci_removal_0(void)
{
80007eb4:	eb cd 40 80 	pushm	r7,lr
80007eb8:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(0);
80007eba:	30 0c       	mov	r12,0
80007ebc:	f0 1f 00 03 	mcall	80007ec8 <sd_mmc_mci_removal_0+0x14>
80007ec0:	18 98       	mov	r8,r12
}
80007ec2:	10 9c       	mov	r12,r8
80007ec4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ec8:	80 00       	ld.sh	r0,r0[0x0]
80007eca:	7e 9c       	ld.w	r12,pc[0x24]

80007ecc <sd_mmc_mci_removal_1>:


bool sd_mmc_mci_removal_1(void)
{
80007ecc:	eb cd 40 80 	pushm	r7,lr
80007ed0:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(1);
80007ed2:	30 1c       	mov	r12,1
80007ed4:	f0 1f 00 03 	mcall	80007ee0 <sd_mmc_mci_removal_1+0x14>
80007ed8:	18 98       	mov	r8,r12
}
80007eda:	10 9c       	mov	r12,r8
80007edc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ee0:	80 00       	ld.sh	r0,r0[0x0]
80007ee2:	7e 9c       	ld.w	r12,pc[0x24]

80007ee4 <sd_mmc_mci_usb_read_10>:
 */
//! @{


Ctrl_status sd_mmc_mci_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
80007ee4:	eb cd 40 80 	pushm	r7,lr
80007ee8:	1a 97       	mov	r7,sp
80007eea:	20 3d       	sub	sp,12
80007eec:	18 99       	mov	r9,r12
80007eee:	ef 4b ff f8 	st.w	r7[-8],r11
80007ef2:	14 98       	mov	r8,r10
80007ef4:	ef 69 ff fc 	st.b	r7[-4],r9
80007ef8:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80007efc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007f00:	10 9c       	mov	r12,r8
80007f02:	f0 1f 00 1f 	mcall	80007f7c <sd_mmc_mci_usb_read_10+0x98>
80007f06:	18 98       	mov	r8,r12
80007f08:	ec 18 00 01 	eorl	r8,0x1
80007f0c:	5c 58       	castu.b	r8
80007f0e:	c0 30       	breq	80007f14 <sd_mmc_mci_usb_read_10+0x30>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80007f10:	30 28       	mov	r8,2
80007f12:	c3 08       	rjmp	80007f72 <sd_mmc_mci_usb_read_10+0x8e>
   }

   if( !sd_mmc_mci_dma_read_open(slot, addr, NULL, nb_sector) )
80007f14:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007f18:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007f1c:	30 0a       	mov	r10,0
80007f1e:	ee fb ff f8 	ld.w	r11,r7[-8]
80007f22:	10 9c       	mov	r12,r8
80007f24:	f0 1f 00 17 	mcall	80007f80 <sd_mmc_mci_usb_read_10+0x9c>
80007f28:	18 98       	mov	r8,r12
80007f2a:	ec 18 00 01 	eorl	r8,0x1
80007f2e:	5c 58       	castu.b	r8
80007f30:	c0 30       	breq	80007f36 <sd_mmc_mci_usb_read_10+0x52>
     return CTRL_FAIL;
80007f32:	30 18       	mov	r8,1
80007f34:	c1 f8       	rjmp	80007f72 <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_multiple_sector(slot, nb_sector, addr) )
80007f36:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007f3a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007f3e:	ee fa ff f8 	ld.w	r10,r7[-8]
80007f42:	12 9b       	mov	r11,r9
80007f44:	10 9c       	mov	r12,r8
80007f46:	f0 1f 00 10 	mcall	80007f84 <sd_mmc_mci_usb_read_10+0xa0>
80007f4a:	18 98       	mov	r8,r12
80007f4c:	ec 18 00 01 	eorl	r8,0x1
80007f50:	5c 58       	castu.b	r8
80007f52:	c0 30       	breq	80007f58 <sd_mmc_mci_usb_read_10+0x74>
     return CTRL_FAIL;
80007f54:	30 18       	mov	r8,1
80007f56:	c0 e8       	rjmp	80007f72 <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_close(slot) )
80007f58:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007f5c:	10 9c       	mov	r12,r8
80007f5e:	f0 1f 00 0b 	mcall	80007f88 <sd_mmc_mci_usb_read_10+0xa4>
80007f62:	18 98       	mov	r8,r12
80007f64:	ec 18 00 01 	eorl	r8,0x1
80007f68:	5c 58       	castu.b	r8
80007f6a:	c0 30       	breq	80007f70 <sd_mmc_mci_usb_read_10+0x8c>
     return CTRL_FAIL;
80007f6c:	30 18       	mov	r8,1
80007f6e:	c0 28       	rjmp	80007f72 <sd_mmc_mci_usb_read_10+0x8e>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80007f70:	30 08       	mov	r8,0
}
80007f72:	10 9c       	mov	r12,r8
80007f74:	2f dd       	sub	sp,-12
80007f76:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f7a:	00 00       	add	r0,r0
80007f7c:	80 00       	ld.sh	r0,r0[0x0]
80007f7e:	71 50       	ld.w	r0,r8[0x54]
80007f80:	80 00       	ld.sh	r0,r0[0x0]
80007f82:	72 30       	ld.w	r0,r9[0xc]
80007f84:	80 00       	ld.sh	r0,r0[0x0]
80007f86:	78 24       	ld.w	r4,r12[0x8]
80007f88:	80 00       	ld.sh	r0,r0[0x0]
80007f8a:	73 c4       	ld.w	r4,r9[0x70]

80007f8c <sd_mmc_mci_usb_read_10_0>:


Ctrl_status sd_mmc_mci_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
80007f8c:	eb cd 40 80 	pushm	r7,lr
80007f90:	1a 97       	mov	r7,sp
80007f92:	20 2d       	sub	sp,8
80007f94:	ef 4c ff fc 	st.w	r7[-4],r12
80007f98:	16 98       	mov	r8,r11
80007f9a:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(0, addr, nb_sector);
80007f9e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007fa2:	10 9a       	mov	r10,r8
80007fa4:	ee fb ff fc 	ld.w	r11,r7[-4]
80007fa8:	30 0c       	mov	r12,0
80007faa:	f0 1f 00 04 	mcall	80007fb8 <sd_mmc_mci_usb_read_10_0+0x2c>
80007fae:	18 98       	mov	r8,r12
}
80007fb0:	10 9c       	mov	r12,r8
80007fb2:	2f ed       	sub	sp,-8
80007fb4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007fb8:	80 00       	ld.sh	r0,r0[0x0]
80007fba:	7e e4       	ld.w	r4,pc[0x38]

80007fbc <sd_mmc_mci_usb_read_10_1>:


Ctrl_status sd_mmc_mci_usb_read_10_1(uint32_t addr, uint16_t nb_sector)
{
80007fbc:	eb cd 40 80 	pushm	r7,lr
80007fc0:	1a 97       	mov	r7,sp
80007fc2:	20 2d       	sub	sp,8
80007fc4:	ef 4c ff fc 	st.w	r7[-4],r12
80007fc8:	16 98       	mov	r8,r11
80007fca:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(1, addr, nb_sector);
80007fce:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007fd2:	10 9a       	mov	r10,r8
80007fd4:	ee fb ff fc 	ld.w	r11,r7[-4]
80007fd8:	30 1c       	mov	r12,1
80007fda:	f0 1f 00 04 	mcall	80007fe8 <sd_mmc_mci_usb_read_10_1+0x2c>
80007fde:	18 98       	mov	r8,r12
}
80007fe0:	10 9c       	mov	r12,r8
80007fe2:	2f ed       	sub	sp,-8
80007fe4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007fe8:	80 00       	ld.sh	r0,r0[0x0]
80007fea:	7e e4       	ld.w	r4,pc[0x38]

80007fec <sd_mmc_mci_usb_write_10>:
#endif
}


Ctrl_status sd_mmc_mci_usb_write_10(uint8_t slot,uint32_t addr, uint16_t nb_sector)
{
80007fec:	eb cd 40 80 	pushm	r7,lr
80007ff0:	1a 97       	mov	r7,sp
80007ff2:	20 3d       	sub	sp,12
80007ff4:	18 99       	mov	r9,r12
80007ff6:	ef 4b ff f8 	st.w	r7[-8],r11
80007ffa:	14 98       	mov	r8,r10
80007ffc:	ef 69 ff fc 	st.b	r7[-4],r9
80008000:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80008004:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008008:	10 9c       	mov	r12,r8
8000800a:	f0 1f 00 1f 	mcall	80008084 <sd_mmc_mci_usb_write_10+0x98>
8000800e:	18 98       	mov	r8,r12
80008010:	ec 18 00 01 	eorl	r8,0x1
80008014:	5c 58       	castu.b	r8
80008016:	c0 30       	breq	8000801c <sd_mmc_mci_usb_write_10+0x30>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80008018:	30 28       	mov	r8,2
8000801a:	c3 08       	rjmp	8000807a <sd_mmc_mci_usb_write_10+0x8e>
   }

   if( !sd_mmc_mci_dma_write_open(slot, addr, NULL, nb_sector) )
8000801c:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80008020:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008024:	30 0a       	mov	r10,0
80008026:	ee fb ff f8 	ld.w	r11,r7[-8]
8000802a:	10 9c       	mov	r12,r8
8000802c:	f0 1f 00 17 	mcall	80008088 <sd_mmc_mci_usb_write_10+0x9c>
80008030:	18 98       	mov	r8,r12
80008032:	ec 18 00 01 	eorl	r8,0x1
80008036:	5c 58       	castu.b	r8
80008038:	c0 30       	breq	8000803e <sd_mmc_mci_usb_write_10+0x52>
     return CTRL_FAIL;
8000803a:	30 18       	mov	r8,1
8000803c:	c1 f8       	rjmp	8000807a <sd_mmc_mci_usb_write_10+0x8e>

   if( !sd_mmc_mci_write_multiple_sector(slot, nb_sector, addr) )
8000803e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80008042:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008046:	ee fa ff f8 	ld.w	r10,r7[-8]
8000804a:	12 9b       	mov	r11,r9
8000804c:	10 9c       	mov	r12,r8
8000804e:	f0 1f 00 10 	mcall	8000808c <sd_mmc_mci_usb_write_10+0xa0>
80008052:	18 98       	mov	r8,r12
80008054:	ec 18 00 01 	eorl	r8,0x1
80008058:	5c 58       	castu.b	r8
8000805a:	c0 30       	breq	80008060 <sd_mmc_mci_usb_write_10+0x74>
     return CTRL_FAIL;
8000805c:	30 18       	mov	r8,1
8000805e:	c0 e8       	rjmp	8000807a <sd_mmc_mci_usb_write_10+0x8e>

   if( !sd_mmc_mci_write_close(slot) )
80008060:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008064:	10 9c       	mov	r12,r8
80008066:	f0 1f 00 0b 	mcall	80008090 <sd_mmc_mci_usb_write_10+0xa4>
8000806a:	18 98       	mov	r8,r12
8000806c:	ec 18 00 01 	eorl	r8,0x1
80008070:	5c 58       	castu.b	r8
80008072:	c0 30       	breq	80008078 <sd_mmc_mci_usb_write_10+0x8c>
     return CTRL_FAIL;
80008074:	30 18       	mov	r8,1
80008076:	c0 28       	rjmp	8000807a <sd_mmc_mci_usb_write_10+0x8e>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80008078:	30 08       	mov	r8,0

}
8000807a:	10 9c       	mov	r12,r8
8000807c:	2f dd       	sub	sp,-12
8000807e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008082:	00 00       	add	r0,r0
80008084:	80 00       	ld.sh	r0,r0[0x0]
80008086:	71 50       	ld.w	r0,r8[0x54]
80008088:	80 00       	ld.sh	r0,r0[0x0]
8000808a:	74 60       	ld.w	r0,r10[0x18]
8000808c:	80 00       	ld.sh	r0,r0[0x0]
8000808e:	7a 2c       	ld.w	r12,sp[0x8]
80008090:	80 00       	ld.sh	r0,r0[0x0]
80008092:	75 cc       	ld.w	r12,r10[0x70]

80008094 <sd_mmc_mci_usb_write_10_0>:


Ctrl_status sd_mmc_mci_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
80008094:	eb cd 40 80 	pushm	r7,lr
80008098:	1a 97       	mov	r7,sp
8000809a:	20 2d       	sub	sp,8
8000809c:	ef 4c ff fc 	st.w	r7[-4],r12
800080a0:	16 98       	mov	r8,r11
800080a2:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_write_10(0, addr, nb_sector);
800080a6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800080aa:	10 9a       	mov	r10,r8
800080ac:	ee fb ff fc 	ld.w	r11,r7[-4]
800080b0:	30 0c       	mov	r12,0
800080b2:	f0 1f 00 04 	mcall	800080c0 <sd_mmc_mci_usb_write_10_0+0x2c>
800080b6:	18 98       	mov	r8,r12
}
800080b8:	10 9c       	mov	r12,r8
800080ba:	2f ed       	sub	sp,-8
800080bc:	e3 cd 80 80 	ldm	sp++,r7,pc
800080c0:	80 00       	ld.sh	r0,r0[0x0]
800080c2:	7f ec       	ld.w	r12,pc[0x78]

800080c4 <sd_mmc_mci_usb_write_10_1>:


Ctrl_status sd_mmc_mci_usb_write_10_1(uint32_t addr, uint16_t nb_sector)
{
800080c4:	eb cd 40 80 	pushm	r7,lr
800080c8:	1a 97       	mov	r7,sp
800080ca:	20 2d       	sub	sp,8
800080cc:	ef 4c ff fc 	st.w	r7[-4],r12
800080d0:	16 98       	mov	r8,r11
800080d2:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_write_10(1, addr, nb_sector);
800080d6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800080da:	10 9a       	mov	r10,r8
800080dc:	ee fb ff fc 	ld.w	r11,r7[-4]
800080e0:	30 1c       	mov	r12,1
800080e2:	f0 1f 00 04 	mcall	800080f0 <sd_mmc_mci_usb_write_10_1+0x2c>
800080e6:	18 98       	mov	r8,r12
}
800080e8:	10 9c       	mov	r12,r8
800080ea:	2f ed       	sub	sp,-8
800080ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800080f0:	80 00       	ld.sh	r0,r0[0x0]
800080f2:	7f ec       	ld.w	r12,pc[0x78]

800080f4 <aes_configure>:




void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
800080f4:	eb cd 40 80 	pushm	r7,lr
800080f8:	1a 97       	mov	r7,sp
800080fa:	20 2d       	sub	sp,8
800080fc:	ef 4c ff fc 	st.w	r7[-4],r12
80008100:	ef 4b ff f8 	st.w	r7[-8],r11
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
80008104:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008108:	11 88       	ld.ub	r8,r8[0x0]
8000810a:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
            ((pAesConfig->ProcessingDelay << AVR32_AES_MR_PROCDLY_OFFSET) & AVR32_AES_MR_PROCDLY_MASK) |
8000810e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008112:	11 98       	ld.ub	r8,r8[0x1]
80008114:	a5 68       	lsl	r8,0x4
80008116:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000811a:	10 49       	or	r9,r8
            ((pAesConfig->StartMode << AVR32_AES_MR_SMOD_OFFSET) & AVR32_AES_MR_SMOD_MASK) |
8000811c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008120:	11 a8       	ld.ub	r8,r8[0x2]
80008122:	a9 68       	lsl	r8,0x8
80008124:	e2 18 03 00 	andl	r8,0x300,COH
80008128:	10 49       	or	r9,r8
            ((pAesConfig->KeySize << AVR32_AES_MR_KEYSIZE_OFFSET) & AVR32_AES_MR_KEYSIZE_MASK) |
8000812a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000812e:	11 b8       	ld.ub	r8,r8[0x3]
80008130:	ab 68       	lsl	r8,0xa
80008132:	e2 18 0c 00 	andl	r8,0xc00,COH
80008136:	10 49       	or	r9,r8
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
80008138:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000813c:	11 c8       	ld.ub	r8,r8[0x4]
8000813e:	ad 68       	lsl	r8,0xc
80008140:	e2 18 70 00 	andl	r8,0x7000,COH
80008144:	10 49       	or	r9,r8
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
80008146:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000814a:	11 d8       	ld.ub	r8,r8[0x5]
8000814c:	af 78       	lsl	r8,0xf
8000814e:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008152:	10 49       	or	r9,r8
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
80008154:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008158:	11 e8       	ld.ub	r8,r8[0x6]
8000815a:	b1 68       	lsl	r8,0x10
8000815c:	e6 18 00 07 	andh	r8,0x7,COH
80008160:	10 49       	or	r9,r8
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
80008162:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008166:	11 f8       	ld.ub	r8,r8[0x7]
80008168:	b9 68       	lsl	r8,0x18
8000816a:	e6 18 1f 00 	andh	r8,0x1f00,COH
8000816e:	f3 e8 10 08 	or	r8,r9,r8



void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
80008172:	ea 18 00 e0 	orh	r8,0xe0
80008176:	10 99       	mov	r9,r8
80008178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000817c:	91 19       	st.w	r8[0x4],r9
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
            ((AES_CKEY << AVR32_AES_MR_CKEY_OFFSET) & AVR32_AES_MR_CKEY_MASK);
}
8000817e:	2f ed       	sub	sp,-8
80008180:	e3 cd 80 80 	ldm	sp++,r7,pc

80008184 <aes_set_key>:
  return(aes->isr);
}


void aes_set_key( volatile avr32_aes_t *aes, const unsigned long int *pKey)
{
80008184:	eb cd 40 80 	pushm	r7,lr
80008188:	1a 97       	mov	r7,sp
8000818a:	20 4d       	sub	sp,16
8000818c:	ef 4c ff f4 	st.w	r7[-12],r12
80008190:	ef 4b ff f0 	st.w	r7[-16],r11
  unsigned long int volatile *pTempo = &(aes->keyw1r);
80008194:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008198:	2e 08       	sub	r8,-32
8000819a:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char       keylen = 0;
8000819e:	30 08       	mov	r8,0
800081a0:	ef 68 ff ff 	st.b	r7[-1],r8


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
800081a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800081a8:	70 18       	ld.w	r8,r8[0x4]
800081aa:	e2 18 0c 00 	andl	r8,0xc00,COH
800081ae:	ab 88       	lsr	r8,0xa
800081b0:	58 18       	cp.w	r8,1
800081b2:	c0 90       	breq	800081c4 <aes_set_key+0x40>
800081b4:	c0 43       	brcs	800081bc <aes_set_key+0x38>
800081b6:	58 28       	cp.w	r8,2
800081b8:	c0 a0       	breq	800081cc <aes_set_key+0x48>
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
800081ba:	c2 38       	rjmp	80008200 <aes_set_key+0x7c>


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
  {
    case 0: // 128bit cryptographic key
      keylen = 4;
800081bc:	30 48       	mov	r8,4
800081be:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
800081c2:	c0 98       	rjmp	800081d4 <aes_set_key+0x50>
    case 1: // 192bit cryptographic key
      keylen = 6;
800081c4:	30 68       	mov	r8,6
800081c6:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
800081ca:	c0 58       	rjmp	800081d4 <aes_set_key+0x50>
    case 2: // 256bit cryptographic key
      keylen = 8;
800081cc:	30 88       	mov	r8,8
800081ce:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
800081d2:	c1 78       	rjmp	80008200 <aes_set_key+0x7c>
800081d4:	c1 68       	rjmp	80008200 <aes_set_key+0x7c>
    *pTempo++ = *pKey++;
800081d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800081da:	70 09       	ld.w	r9,r8[0x0]
800081dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081e0:	91 09       	st.w	r8[0x0],r9
800081e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081e6:	2f c8       	sub	r8,-4
800081e8:	ef 48 ff f8 	st.w	r7[-8],r8
800081ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800081f0:	2f c8       	sub	r8,-4
800081f2:	ef 48 ff f0 	st.w	r7[-16],r8
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
800081f6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800081fa:	20 18       	sub	r8,1
800081fc:	ef 68 ff ff 	st.b	r7[-1],r8
80008200:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008204:	30 08       	mov	r8,0
80008206:	f0 09 18 00 	cp.b	r9,r8
8000820a:	ce 61       	brne	800081d6 <aes_set_key+0x52>
    *pTempo++ = *pKey++;
}
8000820c:	2f cd       	sub	sp,-16
8000820e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008212 <aes_set_initvector>:


void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
80008212:	eb cd 40 80 	pushm	r7,lr
80008216:	1a 97       	mov	r7,sp
80008218:	20 4d       	sub	sp,16
8000821a:	ef 4c ff f4 	st.w	r7[-12],r12
8000821e:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->iv1r);
80008222:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008226:	2a 08       	sub	r8,-96
80008228:	ef 48 ff f8 	st.w	r7[-8],r8
  int i;

  for(i=0; i<4; i++)
8000822c:	30 08       	mov	r8,0
8000822e:	ef 48 ff fc 	st.w	r7[-4],r8
80008232:	c1 68       	rjmp	8000825e <aes_set_initvector+0x4c>
    *pTempo++ = *pVector++;
80008234:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008238:	70 09       	ld.w	r9,r8[0x0]
8000823a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000823e:	91 09       	st.w	r8[0x0],r9
80008240:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008244:	2f c8       	sub	r8,-4
80008246:	ef 48 ff f8 	st.w	r7[-8],r8
8000824a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000824e:	2f c8       	sub	r8,-4
80008250:	ef 48 ff f0 	st.w	r7[-16],r8
void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
  volatile uint32_t *pTempo = &(aes->iv1r);
  int i;

  for(i=0; i<4; i++)
80008254:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008258:	2f f8       	sub	r8,-1
8000825a:	ef 48 ff fc 	st.w	r7[-4],r8
8000825e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008262:	58 38       	cp.w	r8,3
80008264:	fe 9a ff e8 	brle	80008234 <aes_set_initvector+0x22>
    *pTempo++ = *pVector++;
}
80008268:	2f cd       	sub	sp,-16
8000826a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000826e <aes_write_inputdata>:


void aes_write_inputdata( volatile avr32_aes_t *aes, uint32_t *pIn)
{
8000826e:	eb cd 40 80 	pushm	r7,lr
80008272:	1a 97       	mov	r7,sp
80008274:	20 4d       	sub	sp,16
80008276:	ef 4c ff f4 	st.w	r7[-12],r12
8000827a:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->idata1r);
8000827e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008282:	2c 08       	sub	r8,-64
80008284:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char inlen = 4;
80008288:	30 48       	mov	r8,4
8000828a:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
8000828e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008292:	70 18       	ld.w	r8,r8[0x4]
80008294:	e2 18 70 00 	andl	r8,0x7000,COH
80008298:	ad 88       	lsr	r8,0xc
8000829a:	58 38       	cp.w	r8,3
8000829c:	c2 c1       	brne	800082f4 <aes_write_inputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
8000829e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800082a2:	70 18       	ld.w	r8,r8[0x4]
800082a4:	e6 18 00 07 	andh	r8,0x7,COH
800082a8:	b1 88       	lsr	r8,0x10
800082aa:	58 18       	cp.w	r8,1
800082ac:	c0 60       	breq	800082b8 <aes_write_inputdata+0x4a>
800082ae:	c2 33       	brcs	800082f4 <aes_write_inputdata+0x86>
800082b0:	58 48       	cp.w	r8,4
800082b2:	e0 8b 00 21 	brhi	800082f4 <aes_write_inputdata+0x86>
800082b6:	c0 68       	rjmp	800082c2 <aes_write_inputdata+0x54>
    {
      case 1: // 64bit CFB data size
        inlen = 2;
800082b8:	30 28       	mov	r8,2
800082ba:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
800082be:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
800082c0:	c1 a8       	rjmp	800082f4 <aes_write_inputdata+0x86>
        inlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        inlen = 1;
800082c2:	30 18       	mov	r8,1
800082c4:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
800082c8:	c1 68       	rjmp	800082f4 <aes_write_inputdata+0x86>
    *pTempo++ = *pIn++;
800082ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800082ce:	70 09       	ld.w	r9,r8[0x0]
800082d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082d4:	91 09       	st.w	r8[0x0],r9
800082d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082da:	2f c8       	sub	r8,-4
800082dc:	ef 48 ff f8 	st.w	r7[-8],r8
800082e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800082e4:	2f c8       	sub	r8,-4
800082e6:	ef 48 ff f0 	st.w	r7[-16],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
800082ea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800082ee:	20 18       	sub	r8,1
800082f0:	ef 68 ff ff 	st.b	r7[-1],r8
800082f4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800082f8:	30 08       	mov	r8,0
800082fa:	f0 09 18 00 	cp.b	r9,r8
800082fe:	ce 61       	brne	800082ca <aes_write_inputdata+0x5c>
    *pTempo++ = *pIn++;
}
80008300:	2f cd       	sub	sp,-16
80008302:	e3 cd 80 80 	ldm	sp++,r7,pc

80008306 <aes_read_outputdata>:


void aes_read_outputdata( volatile avr32_aes_t *aes, uint32_t *pOut)
{
80008306:	eb cd 40 80 	pushm	r7,lr
8000830a:	1a 97       	mov	r7,sp
8000830c:	20 4d       	sub	sp,16
8000830e:	ef 4c ff f4 	st.w	r7[-12],r12
80008312:	ef 4b ff f0 	st.w	r7[-16],r11
  const volatile uint32_t *pTempo = &(aes->odata1r);
80008316:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000831a:	2b 08       	sub	r8,-80
8000831c:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char outlen = 4;
80008320:	30 48       	mov	r8,4
80008322:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
80008326:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000832a:	70 18       	ld.w	r8,r8[0x4]
8000832c:	e2 18 70 00 	andl	r8,0x7000,COH
80008330:	ad 88       	lsr	r8,0xc
80008332:	58 38       	cp.w	r8,3
80008334:	c2 c1       	brne	8000838c <aes_read_outputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
80008336:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000833a:	70 18       	ld.w	r8,r8[0x4]
8000833c:	e6 18 00 07 	andh	r8,0x7,COH
80008340:	b1 88       	lsr	r8,0x10
80008342:	58 18       	cp.w	r8,1
80008344:	c0 60       	breq	80008350 <aes_read_outputdata+0x4a>
80008346:	c2 33       	brcs	8000838c <aes_read_outputdata+0x86>
80008348:	58 48       	cp.w	r8,4
8000834a:	e0 8b 00 21 	brhi	8000838c <aes_read_outputdata+0x86>
8000834e:	c0 68       	rjmp	8000835a <aes_read_outputdata+0x54>
    {
      case 1: // 64bit CFB data size
        outlen = 2;
80008350:	30 28       	mov	r8,2
80008352:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
80008356:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80008358:	c1 a8       	rjmp	8000838c <aes_read_outputdata+0x86>
        outlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        outlen = 1;
8000835a:	30 18       	mov	r8,1
8000835c:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80008360:	c1 68       	rjmp	8000838c <aes_read_outputdata+0x86>
    *pOut++ = *pTempo++;
80008362:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008366:	70 09       	ld.w	r9,r8[0x0]
80008368:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000836c:	91 09       	st.w	r8[0x0],r9
8000836e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008372:	2f c8       	sub	r8,-4
80008374:	ef 48 ff f0 	st.w	r7[-16],r8
80008378:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000837c:	2f c8       	sub	r8,-4
8000837e:	ef 48 ff f8 	st.w	r7[-8],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80008382:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008386:	20 18       	sub	r8,1
80008388:	ef 68 ff ff 	st.b	r7[-1],r8
8000838c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008390:	30 08       	mov	r8,0
80008392:	f0 09 18 00 	cp.b	r9,r8
80008396:	ce 61       	brne	80008362 <aes_read_outputdata+0x5c>
    *pOut++ = *pTempo++;
}
80008398:	2f cd       	sub	sp,-16
8000839a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000839e:	d7 03       	nop

800083a0 <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
800083a0:	eb cd 40 80 	pushm	r7,lr
800083a4:	1a 97       	mov	r7,sp
800083a6:	20 cd       	sub	sp,48
800083a8:	ef 4c ff d0 	st.w	r7[-48],r12
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
800083ac:	ee f8 ff d0 	ld.w	r8,r7[-48]
800083b0:	ee 7a 42 3f 	mov	r10,999999
800083b4:	f0 0a 00 09 	add	r9,r8,r10
800083b8:	e0 68 de 83 	mov	r8,56963
800083bc:	ea 18 43 1b 	orh	r8,0x431b
800083c0:	f2 08 06 48 	mulu.d	r8,r9,r8
800083c4:	f2 08 16 12 	lsr	r8,r9,0x12
800083c8:	ef 48 ff d4 	st.w	r7[-44],r8
//! Whether to use the NCS0 pin
#ifdef SMC_USE_NCS0
  #include SMC_COMPONENT_CS0

  // Setup SMC for NCS0
  SMC_CS_SETUP(0)
800083cc:	ee f9 ff d4 	ld.w	r9,r7[-44]
800083d0:	12 98       	mov	r8,r9
800083d2:	a3 68       	lsl	r8,0x2
800083d4:	12 08       	add	r8,r9
800083d6:	a3 68       	lsl	r8,0x2
800083d8:	f0 c9 fc 19 	sub	r9,r8,-999
800083dc:	e0 68 4d d3 	mov	r8,19923
800083e0:	ea 18 10 62 	orh	r8,0x1062
800083e4:	f2 08 06 48 	mulu.d	r8,r9,r8
800083e8:	f2 08 16 06 	lsr	r8,r9,0x6
800083ec:	ef 48 ff d8 	st.w	r7[-40],r8
800083f0:	30 08       	mov	r8,0
800083f2:	ef 48 ff dc 	st.w	r7[-36],r8
800083f6:	ee f9 ff d4 	ld.w	r9,r7[-44]
800083fa:	12 98       	mov	r8,r9
800083fc:	a5 68       	lsl	r8,0x4
800083fe:	12 18       	sub	r8,r9
80008400:	a1 78       	lsl	r8,0x1
80008402:	f0 c9 fc 19 	sub	r9,r8,-999
80008406:	e0 68 4d d3 	mov	r8,19923
8000840a:	ea 18 10 62 	orh	r8,0x1062
8000840e:	f2 08 06 48 	mulu.d	r8,r9,r8
80008412:	f2 08 16 06 	lsr	r8,r9,0x6
80008416:	ef 48 ff e0 	st.w	r7[-32],r8
8000841a:	30 08       	mov	r8,0
8000841c:	ef 48 ff e4 	st.w	r7[-28],r8
80008420:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008424:	12 98       	mov	r8,r9
80008426:	a5 68       	lsl	r8,0x4
80008428:	12 18       	sub	r8,r9
8000842a:	a3 68       	lsl	r8,0x2
8000842c:	f0 c9 fc 19 	sub	r9,r8,-999
80008430:	e0 68 4d d3 	mov	r8,19923
80008434:	ea 18 10 62 	orh	r8,0x1062
80008438:	f2 08 06 48 	mulu.d	r8,r9,r8
8000843c:	f2 08 16 06 	lsr	r8,r9,0x6
80008440:	ef 48 ff e8 	st.w	r7[-24],r8
80008444:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008448:	f0 08 10 5a 	mul	r8,r8,90
8000844c:	f0 c9 fc 19 	sub	r9,r8,-999
80008450:	e0 68 4d d3 	mov	r8,19923
80008454:	ea 18 10 62 	orh	r8,0x1062
80008458:	f2 08 06 48 	mulu.d	r8,r9,r8
8000845c:	f2 08 16 06 	lsr	r8,r9,0x6
80008460:	ef 48 ff ec 	st.w	r7[-20],r8
80008464:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008468:	e0 68 00 d2 	mov	r8,210
8000846c:	f2 08 02 48 	mul	r8,r9,r8
80008470:	f0 c9 fc 19 	sub	r9,r8,-999
80008474:	e0 68 4d d3 	mov	r8,19923
80008478:	ea 18 10 62 	orh	r8,0x1062
8000847c:	f2 08 06 48 	mulu.d	r8,r9,r8
80008480:	f2 08 16 06 	lsr	r8,r9,0x6
80008484:	ef 48 ff f0 	st.w	r7[-16],r8
80008488:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000848c:	12 98       	mov	r8,r9
8000848e:	a5 68       	lsl	r8,0x4
80008490:	12 18       	sub	r8,r9
80008492:	a5 68       	lsl	r8,0x4
80008494:	f0 c9 fc 19 	sub	r9,r8,-999
80008498:	e0 68 4d d3 	mov	r8,19923
8000849c:	ea 18 10 62 	orh	r8,0x1062
800084a0:	f2 08 06 48 	mulu.d	r8,r9,r8
800084a4:	f2 08 16 06 	lsr	r8,r9,0x6
800084a8:	ef 48 ff f4 	st.w	r7[-12],r8
800084ac:	ee f8 ff d4 	ld.w	r8,r7[-44]
800084b0:	f0 08 10 64 	mul	r8,r8,100
800084b4:	f0 c9 fc 19 	sub	r9,r8,-999
800084b8:	e0 68 4d d3 	mov	r8,19923
800084bc:	ea 18 10 62 	orh	r8,0x1062
800084c0:	f2 08 06 48 	mulu.d	r8,r9,r8
800084c4:	f2 08 16 06 	lsr	r8,r9,0x6
800084c8:	ef 48 ff f8 	st.w	r7[-8],r8
800084cc:	ee f9 ff d4 	ld.w	r9,r7[-44]
800084d0:	e0 68 01 0e 	mov	r8,270
800084d4:	f2 08 02 48 	mul	r8,r9,r8
800084d8:	f0 c9 fc 19 	sub	r9,r8,-999
800084dc:	e0 68 4d d3 	mov	r8,19923
800084e0:	ea 18 10 62 	orh	r8,0x1062
800084e4:	f2 08 06 48 	mulu.d	r8,r9,r8
800084e8:	f2 08 16 06 	lsr	r8,r9,0x6
800084ec:	ef 48 ff fc 	st.w	r7[-4],r8
800084f0:	ee f9 ff e4 	ld.w	r9,r7[-28]
800084f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084f8:	10 09       	add	r9,r8
800084fa:	ee fa ff e0 	ld.w	r10,r7[-32]
800084fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008502:	f4 08 00 08 	add	r8,r10,r8
80008506:	10 39       	cp.w	r9,r8
80008508:	c0 c2       	brcc	80008520 <smc_init+0x180>
8000850a:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000850e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008512:	10 09       	add	r9,r8
80008514:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008518:	f2 08 01 08 	sub	r8,r9,r8
8000851c:	ef 48 ff f4 	st.w	r7[-12],r8
80008520:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008524:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008528:	10 09       	add	r9,r8
8000852a:	ee fa ff d8 	ld.w	r10,r7[-40]
8000852e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008532:	f4 08 00 08 	add	r8,r10,r8
80008536:	10 39       	cp.w	r9,r8
80008538:	c0 c2       	brcc	80008550 <smc_init+0x1b0>
8000853a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000853e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008542:	10 09       	add	r9,r8
80008544:	ee f8 ff dc 	ld.w	r8,r7[-36]
80008548:	f2 08 01 08 	sub	r8,r9,r8
8000854c:	ef 48 ff ec 	st.w	r7[-20],r8
80008550:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008554:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008558:	10 09       	add	r9,r8
8000855a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000855e:	10 39       	cp.w	r9,r8
80008560:	e0 88 00 0a 	brls	80008574 <smc_init+0x1d4>
80008564:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008568:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000856c:	f2 08 00 08 	add	r8,r9,r8
80008570:	ef 48 ff f8 	st.w	r7[-8],r8
80008574:	ee f9 ff d8 	ld.w	r9,r7[-40]
80008578:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000857c:	10 09       	add	r9,r8
8000857e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008582:	10 39       	cp.w	r9,r8
80008584:	e0 88 00 0a 	brls	80008598 <smc_init+0x1f8>
80008588:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000858c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008590:	f2 08 00 08 	add	r8,r9,r8
80008594:	ef 48 ff f8 	st.w	r7[-8],r8
80008598:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000859c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085a0:	10 09       	add	r9,r8
800085a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085a6:	10 39       	cp.w	r9,r8
800085a8:	e0 88 00 0a 	brls	800085bc <smc_init+0x21c>
800085ac:	ee f9 ff e4 	ld.w	r9,r7[-28]
800085b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085b4:	f2 08 00 08 	add	r8,r9,r8
800085b8:	ef 48 ff fc 	st.w	r7[-4],r8
800085bc:	ee f9 ff e0 	ld.w	r9,r7[-32]
800085c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800085c4:	10 09       	add	r9,r8
800085c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085ca:	10 39       	cp.w	r9,r8
800085cc:	e0 88 00 0a 	brls	800085e0 <smc_init+0x240>
800085d0:	ee f9 ff e0 	ld.w	r9,r7[-32]
800085d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800085d8:	f2 08 00 08 	add	r8,r9,r8
800085dc:	ef 48 ff fc 	st.w	r7[-4],r8
800085e0:	fe 68 1c 00 	mov	r8,-123904
800085e4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800085e8:	f2 0a 15 08 	lsl	r10,r9,0x8
800085ec:	ee f9 ff d8 	ld.w	r9,r7[-40]
800085f0:	12 4a       	or	r10,r9
800085f2:	ee f9 ff e0 	ld.w	r9,r7[-32]
800085f6:	b1 69       	lsl	r9,0x10
800085f8:	12 4a       	or	r10,r9
800085fa:	ee f9 ff e4 	ld.w	r9,r7[-28]
800085fe:	b9 69       	lsl	r9,0x18
80008600:	f5 e9 10 09 	or	r9,r10,r9
80008604:	91 09       	st.w	r8[0x0],r9
80008606:	fe 68 1c 00 	mov	r8,-123904
8000860a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000860e:	f2 0a 15 08 	lsl	r10,r9,0x8
80008612:	ee f9 ff e8 	ld.w	r9,r7[-24]
80008616:	12 4a       	or	r10,r9
80008618:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000861c:	b1 69       	lsl	r9,0x10
8000861e:	12 4a       	or	r10,r9
80008620:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008624:	b9 69       	lsl	r9,0x18
80008626:	f5 e9 10 09 	or	r9,r10,r9
8000862a:	91 19       	st.w	r8[0x4],r9
8000862c:	fe 68 1c 00 	mov	r8,-123904
80008630:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008634:	f2 0a 15 10 	lsl	r10,r9,0x10
80008638:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000863c:	f5 e9 10 09 	or	r9,r10,r9
80008640:	91 29       	st.w	r8[0x8],r9
80008642:	fe 68 1c 00 	mov	r8,-123904
80008646:	e0 69 10 03 	mov	r9,4099
8000864a:	91 39       	st.w	r8[0xc],r9
8000864c:	48 49       	lddpc	r9,8000865c <smc_init+0x2bc>
8000864e:	30 18       	mov	r8,1
80008650:	b2 88       	st.b	r9[0x0],r8
  #undef NCS_CONTROLLED_READ
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
80008652:	f0 1f 00 04 	mcall	80008660 <smc_init+0x2c0>
}
80008656:	2f 4d       	sub	sp,-48
80008658:	e3 cd 80 80 	ldm	sp++,r7,pc
8000865c:	00 00       	add	r0,r0
8000865e:	06 94       	mov	r4,r3
80008660:	80 00       	ld.sh	r0,r0[0x0]
80008662:	86 64       	ld.sh	r4,r3[0xc]

80008664 <smc_enable_muxed_pins>:

/*! \brief Puts the multiplexed MCU pins used for the SMC
 *
 */
static void smc_enable_muxed_pins(void)
{
80008664:	eb cd 40 80 	pushm	r7,lr
80008668:	1a 97       	mov	r7,sp
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
8000866a:	31 4b       	mov	r11,20
8000866c:	48 3c       	lddpc	r12,80008678 <smc_enable_muxed_pins+0x14>
8000866e:	f0 1f 00 04 	mcall	8000867c <smc_enable_muxed_pins+0x18>
}
80008672:	e3 cd 80 80 	ldm	sp++,r7,pc
80008676:	00 00       	add	r0,r0
80008678:	80 00       	ld.sh	r0,r0[0x0]
8000867a:	f2 d4 80 00 	satsub.w	r4,r9,-32768
8000867e:	8a e4       	ld.uh	r4,r5[0xc]

80008680 <flashc_set_wait_state>:
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
80008680:	eb cd 40 80 	pushm	r7,lr
80008684:	1a 97       	mov	r7,sp
80008686:	20 2d       	sub	sp,8
80008688:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000868c:	fe 68 14 00 	mov	r8,-125952
80008690:	70 08       	ld.w	r8,r8[0x0]
80008692:	30 09       	mov	r9,0
80008694:	ef 49 ff fc 	st.w	r7[-4],r9
80008698:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000869c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800086a0:	5c 58       	castu.b	r8
800086a2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800086a6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800086aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800086ae:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
800086b2:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800086b6:	fe 68 14 00 	mov	r8,-125952
800086ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800086be:	91 09       	st.w	r8[0x0],r9
}
800086c0:	2f ed       	sub	sp,-8
800086c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800086c6:	d7 03       	nop

800086c8 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
800086c8:	eb cd 40 80 	pushm	r7,lr
800086cc:	1a 97       	mov	r7,sp
800086ce:	20 1d       	sub	sp,4
800086d0:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
800086d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800086d8:	e0 69 50 ff 	mov	r9,20735
800086dc:	ea 19 02 25 	orh	r9,0x225
800086e0:	12 38       	cp.w	r8,r9
800086e2:	e0 88 00 06 	brls	800086ee <flashc_set_bus_freq+0x26>
		// Set 1 WS.
		flashc_set_wait_state(1);
800086e6:	30 1c       	mov	r12,1
800086e8:	f0 1f 00 05 	mcall	800086fc <flashc_set_bus_freq+0x34>
800086ec:	c0 48       	rjmp	800086f4 <flashc_set_bus_freq+0x2c>
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
800086ee:	30 0c       	mov	r12,0
800086f0:	f0 1f 00 03 	mcall	800086fc <flashc_set_bus_freq+0x34>
	}
}
800086f4:	2f fd       	sub	sp,-4
800086f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800086fa:	00 00       	add	r0,r0
800086fc:	80 00       	ld.sh	r0,r0[0x0]
800086fe:	86 80       	ld.uh	r0,r3[0x0]

80008700 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
80008700:	eb cd 40 80 	pushm	r7,lr
80008704:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80008706:	fe 68 14 00 	mov	r8,-125952
8000870a:	70 28       	ld.w	r8,r8[0x8]
8000870c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008710:	5c 58       	castu.b	r8
}
80008712:	10 9c       	mov	r12,r8
80008714:	e3 cd 80 80 	ldm	sp++,r7,pc

80008718 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80008718:	eb cd 40 80 	pushm	r7,lr
8000871c:	1a 97       	mov	r7,sp
	while (!flashc_is_ready());
8000871e:	f0 1f 00 05 	mcall	80008730 <flashc_default_wait_until_ready+0x18>
80008722:	18 98       	mov	r8,r12
80008724:	ec 18 00 01 	eorl	r8,0x1
80008728:	5c 58       	castu.b	r8
8000872a:	cf a1       	brne	8000871e <flashc_default_wait_until_ready+0x6>
}
8000872c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008730:	80 00       	ld.sh	r0,r0[0x0]
80008732:	87 00       	st.w	r3[0x0],r0

80008734 <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80008734:	eb cd 40 80 	pushm	r7,lr
80008738:	1a 97       	mov	r7,sp
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
8000873a:	fe 68 14 00 	mov	r8,-125952
8000873e:	70 28       	ld.w	r8,r8[0x8]
80008740:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHC_FSR_PROGE_MASK);
}
80008744:	10 9c       	mov	r12,r8
80008746:	e3 cd 80 80 	ldm	sp++,r7,pc
8000874a:	d7 03       	nop

8000874c <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
8000874c:	eb cd 40 80 	pushm	r7,lr
80008750:	1a 97       	mov	r7,sp
80008752:	20 3d       	sub	sp,12
80008754:	ef 4c ff f8 	st.w	r7[-8],r12
80008758:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
8000875c:	49 b8       	lddpc	r8,800087c8 <flashc_issue_command+0x7c>
8000875e:	70 08       	ld.w	r8,r8[0x0]
80008760:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80008762:	fe 68 14 00 	mov	r8,-125952
80008766:	70 18       	ld.w	r8,r8[0x4]
80008768:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcmd.FCMD.cmd = command;
8000876c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008770:	5c 58       	castu.b	r8
80008772:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80008776:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000877a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000877e:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80008782:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
80008786:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000878a:	58 08       	cp.w	r8,0
8000878c:	c0 b5       	brlt	800087a2 <flashc_issue_command+0x56>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
8000878e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008792:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80008796:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000879a:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
8000879e:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800087a2:	3a 58       	mov	r8,-91
800087a4:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800087a8:	fe 68 14 00 	mov	r8,-125952
800087ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800087b0:	91 19       	st.w	r8[0x4],r9
	flashc_error_status = flashc_get_error_status();
800087b2:	f0 1f 00 07 	mcall	800087cc <flashc_issue_command+0x80>
800087b6:	18 99       	mov	r9,r12
800087b8:	48 68       	lddpc	r8,800087d0 <flashc_issue_command+0x84>
800087ba:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
800087bc:	48 38       	lddpc	r8,800087c8 <flashc_issue_command+0x7c>
800087be:	70 08       	ld.w	r8,r8[0x0]
800087c0:	5d 18       	icall	r8
}
800087c2:	2f dd       	sub	sp,-12
800087c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800087c8:	00 00       	add	r0,r0
800087ca:	01 3c       	ld.ub	r12,r0++
800087cc:	80 00       	ld.sh	r0,r0[0x0]
800087ce:	87 34       	st.w	r3[0xc],r4
800087d0:	00 00       	add	r0,r0
800087d2:	06 9c       	mov	r12,r3

800087d4 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
800087d4:	eb cd 40 80 	pushm	r7,lr
800087d8:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
800087da:	3f fb       	mov	r11,-1
800087dc:	30 3c       	mov	r12,3
800087de:	f0 1f 00 03 	mcall	800087e8 <flashc_clear_page_buffer+0x14>
}
800087e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800087e6:	00 00       	add	r0,r0
800087e8:	80 00       	ld.sh	r0,r0[0x0]
800087ea:	87 4c       	st.w	r3[0x10],r12

800087ec <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
800087ec:	eb cd 40 80 	pushm	r7,lr
800087f0:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
800087f2:	fe 68 14 00 	mov	r8,-125952
800087f6:	70 28       	ld.w	r8,r8[0x8]
800087f8:	e2 18 00 20 	andl	r8,0x20,COH
800087fc:	5f 18       	srne	r8
800087fe:	5c 58       	castu.b	r8
}
80008800:	10 9c       	mov	r12,r8
80008802:	e3 cd 80 80 	ldm	sp++,r7,pc
80008806:	d7 03       	nop

80008808 <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80008808:	eb cd 40 80 	pushm	r7,lr
8000880c:	1a 97       	mov	r7,sp
8000880e:	20 1d       	sub	sp,4
80008810:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80008814:	ee fb ff fc 	ld.w	r11,r7[-4]
80008818:	30 cc       	mov	r12,12
8000881a:	f0 1f 00 05 	mcall	8000882c <flashc_quick_page_read+0x24>
	return flashc_is_page_erased();
8000881e:	f0 1f 00 05 	mcall	80008830 <flashc_quick_page_read+0x28>
80008822:	18 98       	mov	r8,r12
}
80008824:	10 9c       	mov	r12,r8
80008826:	2f fd       	sub	sp,-4
80008828:	e3 cd 80 80 	ldm	sp++,r7,pc
8000882c:	80 00       	ld.sh	r0,r0[0x0]
8000882e:	87 4c       	st.w	r3[0x10],r12
80008830:	80 00       	ld.sh	r0,r0[0x0]
80008832:	87 ec       	st.w	r3[0x38],r12

80008834 <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
80008834:	eb cd 40 80 	pushm	r7,lr
80008838:	1a 97       	mov	r7,sp
8000883a:	20 4d       	sub	sp,16
8000883c:	ef 4c ff f4 	st.w	r7[-12],r12
80008840:	16 98       	mov	r8,r11
80008842:	ef 68 ff f0 	st.b	r7[-16],r8
	bool page_erased = true;
80008846:	30 18       	mov	r8,1
80008848:	ef 68 ff fb 	st.b	r7[-5],r8

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
8000884c:	ee fb ff f4 	ld.w	r11,r7[-12]
80008850:	30 2c       	mov	r12,2
80008852:	f0 1f 00 10 	mcall	80008890 <flashc_erase_page+0x5c>
	if (check) {
80008856:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000885a:	30 08       	mov	r8,0
8000885c:	f0 09 18 00 	cp.b	r9,r8
80008860:	c1 20       	breq	80008884 <flashc_erase_page+0x50>
		unsigned int error_status = flashc_error_status;
80008862:	48 d8       	lddpc	r8,80008894 <flashc_erase_page+0x60>
80008864:	70 08       	ld.w	r8,r8[0x0]
80008866:	ef 48 ff fc 	st.w	r7[-4],r8
		page_erased = flashc_quick_page_read(-1);
8000886a:	3f fc       	mov	r12,-1
8000886c:	f0 1f 00 0b 	mcall	80008898 <flashc_erase_page+0x64>
80008870:	18 98       	mov	r8,r12
80008872:	ef 68 ff fb 	st.b	r7[-5],r8
		flashc_error_status |= error_status;
80008876:	48 88       	lddpc	r8,80008894 <flashc_erase_page+0x60>
80008878:	70 09       	ld.w	r9,r8[0x0]
8000887a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000887e:	10 49       	or	r9,r8
80008880:	48 58       	lddpc	r8,80008894 <flashc_erase_page+0x60>
80008882:	91 09       	st.w	r8[0x0],r9
	}
	return page_erased;
80008884:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80008888:	10 9c       	mov	r12,r8
8000888a:	2f cd       	sub	sp,-16
8000888c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008890:	80 00       	ld.sh	r0,r0[0x0]
80008892:	87 4c       	st.w	r3[0x10],r12
80008894:	00 00       	add	r0,r0
80008896:	06 9c       	mov	r12,r3
80008898:	80 00       	ld.sh	r0,r0[0x0]
8000889a:	88 08       	ld.sh	r8,r4[0x0]

8000889c <flashc_write_page>:
	return all_pages_erased;
}


void flashc_write_page(int page_number)
{
8000889c:	eb cd 40 80 	pushm	r7,lr
800088a0:	1a 97       	mov	r7,sp
800088a2:	20 1d       	sub	sp,4
800088a4:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
800088a8:	ee fb ff fc 	ld.w	r11,r7[-4]
800088ac:	30 1c       	mov	r12,1
800088ae:	f0 1f 00 03 	mcall	800088b8 <flashc_write_page+0x1c>
}
800088b2:	2f fd       	sub	sp,-4
800088b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800088b8:	80 00       	ld.sh	r0,r0[0x0]
800088ba:	87 4c       	st.w	r3[0x10],r12

800088bc <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
800088bc:	eb cd 40 80 	pushm	r7,lr
800088c0:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
800088c2:	3f fb       	mov	r11,-1
800088c4:	30 fc       	mov	r12,15
800088c6:	f0 1f 00 05 	mcall	800088d8 <flashc_quick_user_page_read+0x1c>
	return flashc_is_page_erased();
800088ca:	f0 1f 00 05 	mcall	800088dc <flashc_quick_user_page_read+0x20>
800088ce:	18 98       	mov	r8,r12
}
800088d0:	10 9c       	mov	r12,r8
800088d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800088d6:	00 00       	add	r0,r0
800088d8:	80 00       	ld.sh	r0,r0[0x0]
800088da:	87 4c       	st.w	r3[0x10],r12
800088dc:	80 00       	ld.sh	r0,r0[0x0]
800088de:	87 ec       	st.w	r3[0x38],r12

800088e0 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
800088e0:	eb cd 40 80 	pushm	r7,lr
800088e4:	1a 97       	mov	r7,sp
800088e6:	20 1d       	sub	sp,4
800088e8:	18 98       	mov	r8,r12
800088ea:	ef 68 ff fc 	st.b	r7[-4],r8
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
800088ee:	3f fb       	mov	r11,-1
800088f0:	30 ec       	mov	r12,14
800088f2:	f0 1f 00 09 	mcall	80008914 <flashc_erase_user_page+0x34>
	return (check) ? flashc_quick_user_page_read() : true;
800088f6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800088fa:	30 08       	mov	r8,0
800088fc:	f0 09 18 00 	cp.b	r9,r8
80008900:	c0 50       	breq	8000890a <flashc_erase_user_page+0x2a>
80008902:	f0 1f 00 06 	mcall	80008918 <flashc_erase_user_page+0x38>
80008906:	18 98       	mov	r8,r12
80008908:	c0 28       	rjmp	8000890c <flashc_erase_user_page+0x2c>
8000890a:	30 18       	mov	r8,1
}
8000890c:	10 9c       	mov	r12,r8
8000890e:	2f fd       	sub	sp,-4
80008910:	e3 cd 80 80 	ldm	sp++,r7,pc
80008914:	80 00       	ld.sh	r0,r0[0x0]
80008916:	87 4c       	st.w	r3[0x10],r12
80008918:	80 00       	ld.sh	r0,r0[0x0]
8000891a:	88 bc       	ld.uh	r12,r4[0x6]

8000891c <flashc_write_user_page>:


void flashc_write_user_page(void)
{
8000891c:	eb cd 40 80 	pushm	r7,lr
80008920:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80008922:	3f fb       	mov	r11,-1
80008924:	30 dc       	mov	r12,13
80008926:	f0 1f 00 03 	mcall	80008930 <flashc_write_user_page+0x14>
}
8000892a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000892e:	00 00       	add	r0,r0
80008930:	80 00       	ld.sh	r0,r0[0x0]
80008932:	87 4c       	st.w	r3[0x10],r12

80008934 <flashc_memcpy>:
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80008934:	eb cd 40 80 	pushm	r7,lr
80008938:	1a 97       	mov	r7,sp
8000893a:	20 bd       	sub	sp,44
8000893c:	ef 4c ff e0 	st.w	r7[-32],r12
80008940:	ef 4b ff dc 	st.w	r7[-36],r11
80008944:	ef 4a ff d8 	st.w	r7[-40],r10
80008948:	12 98       	mov	r8,r9
8000894a:	ef 68 ff d4 	st.b	r7[-44],r8
	uint16_t page_pos;
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
8000894e:	30 08       	mov	r8,0
80008950:	ef 48 ff f0 	st.w	r7[-16],r8
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
80008954:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008958:	ef 48 ff f8 	st.w	r7[-8],r8
	const uint8_t* src_buf=(const uint8_t*)src;
8000895c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80008960:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
80008964:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008968:	e0 69 ff ff 	mov	r9,65535
8000896c:	ea 19 80 7f 	orh	r9,0x807f
80008970:	12 38       	cp.w	r8,r9
80008972:	5f b8       	srhi	r8
80008974:	ef 68 ff ef 	st.b	r7[-17],r8

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
80008978:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000897c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008980:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80008984:	f2 08 01 08 	sub	r8,r9,r8
80008988:	ef 48 ff f4 	st.w	r7[-12],r8

	while (nbytes) {
8000898c:	c9 18       	rjmp	80008aae <flashc_memcpy+0x17a>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
8000898e:	f0 1f 00 50 	mcall	80008acc <flashc_memcpy+0x198>
		error_status |= flashc_error_status;
80008992:	4d 08       	lddpc	r8,80008ad0 <flashc_memcpy+0x19c>
80008994:	70 08       	ld.w	r8,r8[0x0]
80008996:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000899a:	f3 e8 10 08 	or	r8,r9,r8
8000899e:	ef 48 ff f0 	st.w	r7[-16],r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
800089a2:	30 08       	mov	r8,0
800089a4:	ef 58 ff ec 	st.h	r7[-20],r8
800089a8:	c4 b8       	rjmp	80008a3e <flashc_memcpy+0x10a>
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
800089aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800089ae:	f0 e8 00 00 	ld.d	r8,r8[0]
800089b2:	ee e9 ff e4 	st.d	r7[-28],r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
800089b6:	30 08       	mov	r8,0
800089b8:	ef 68 ff ee 	st.b	r7[-18],r8
800089bc:	c2 d8       	rjmp	80008a16 <flashc_memcpy+0xe2>
				if (nbytes && (flash_add == dest_add)) {
800089be:	ee f8 ff d8 	ld.w	r8,r7[-40]
800089c2:	58 08       	cp.w	r8,0
800089c4:	c1 f0       	breq	80008a02 <flashc_memcpy+0xce>
800089c6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800089ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089ce:	10 39       	cp.w	r9,r8
800089d0:	c1 91       	brne	80008a02 <flashc_memcpy+0xce>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
800089d2:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800089d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800089da:	11 88       	ld.ub	r8,r8[0x0]
800089dc:	ee 09 00 09 	add	r9,r7,r9
800089e0:	f3 68 ff e4 	st.b	r9[-28],r8
800089e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800089e8:	2f f8       	sub	r8,-1
800089ea:	ef 48 ff fc 	st.w	r7[-4],r8
					dest_add++;
800089ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089f2:	2f f8       	sub	r8,-1
800089f4:	ef 48 ff f8 	st.w	r7[-8],r8
					nbytes--;
800089f8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800089fc:	20 18       	sub	r8,1
800089fe:	ef 48 ff d8 	st.w	r7[-40],r8
				}
				flash_add++;
80008a02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008a06:	2f f8       	sub	r8,-1
80008a08:	ef 48 ff f4 	st.w	r7[-12],r8
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80008a0c:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80008a10:	2f f8       	sub	r8,-1
80008a12:	ef 68 ff ee 	st.b	r7[-18],r8
80008a16:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008a1a:	30 78       	mov	r8,7
80008a1c:	f0 09 18 00 	cp.b	r9,r8
80008a20:	fe 98 ff cf 	brls	800089be <flashc_memcpy+0x8a>
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
80008a24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008a28:	20 88       	sub	r8,8
80008a2a:	10 9a       	mov	r10,r8
80008a2c:	ee e8 ff e4 	ld.d	r8,r7[-28]
80008a30:	f4 e9 00 00 	st.d	r10[0],r8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
80008a34:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80008a38:	2f 88       	sub	r8,-8
80008a3a:	ef 58 ff ec 	st.h	r7[-20],r8
80008a3e:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80008a42:	e0 68 01 ff 	mov	r8,511
80008a46:	f0 09 19 00 	cp.h	r9,r8
80008a4a:	fe 98 ff b0 	brls	800089aa <flashc_memcpy+0x76>
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
80008a4e:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80008a52:	30 08       	mov	r8,0
80008a54:	f0 09 18 00 	cp.b	r9,r8
80008a58:	c1 70       	breq	80008a86 <flashc_memcpy+0x152>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
80008a5a:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80008a5e:	30 08       	mov	r8,0
80008a60:	f0 09 18 00 	cp.b	r9,r8
80008a64:	c0 50       	breq	80008a6e <flashc_memcpy+0x13a>
80008a66:	30 0c       	mov	r12,0
80008a68:	f0 1f 00 1b 	mcall	80008ad4 <flashc_memcpy+0x1a0>
80008a6c:	c0 58       	rjmp	80008a76 <flashc_memcpy+0x142>
80008a6e:	30 0b       	mov	r11,0
80008a70:	3f fc       	mov	r12,-1
80008a72:	f0 1f 00 1a 	mcall	80008ad8 <flashc_memcpy+0x1a4>
			error_status |= flashc_error_status;
80008a76:	49 78       	lddpc	r8,80008ad0 <flashc_memcpy+0x19c>
80008a78:	70 08       	ld.w	r8,r8[0x0]
80008a7a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008a7e:	f3 e8 10 08 	or	r8,r9,r8
80008a82:	ef 48 ff f0 	st.w	r7[-16],r8
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
80008a86:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80008a8a:	30 08       	mov	r8,0
80008a8c:	f0 09 18 00 	cp.b	r9,r8
80008a90:	c0 40       	breq	80008a98 <flashc_memcpy+0x164>
80008a92:	f0 1f 00 13 	mcall	80008adc <flashc_memcpy+0x1a8>
80008a96:	c0 48       	rjmp	80008a9e <flashc_memcpy+0x16a>
80008a98:	3f fc       	mov	r12,-1
80008a9a:	f0 1f 00 12 	mcall	80008ae0 <flashc_memcpy+0x1ac>
		error_status |= flashc_error_status;
80008a9e:	48 d8       	lddpc	r8,80008ad0 <flashc_memcpy+0x19c>
80008aa0:	70 08       	ld.w	r8,r8[0x0]
80008aa2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008aa6:	f3 e8 10 08 	or	r8,r9,r8
80008aaa:	ef 48 ff f0 	st.w	r7[-16],r8

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80008aae:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008ab2:	58 08       	cp.w	r8,0
80008ab4:	fe 91 ff 6d 	brne	8000898e <flashc_memcpy+0x5a>
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
80008ab8:	48 68       	lddpc	r8,80008ad0 <flashc_memcpy+0x19c>
80008aba:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008abe:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
80008ac0:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
80008ac4:	10 9c       	mov	r12,r8
80008ac6:	2f 5d       	sub	sp,-44
80008ac8:	e3 cd 80 80 	ldm	sp++,r7,pc
80008acc:	80 00       	ld.sh	r0,r0[0x0]
80008ace:	87 d4       	st.w	r3[0x34],r4
80008ad0:	00 00       	add	r0,r0
80008ad2:	06 9c       	mov	r12,r3
80008ad4:	80 00       	ld.sh	r0,r0[0x0]
80008ad6:	88 e0       	ld.uh	r0,r4[0xc]
80008ad8:	80 00       	ld.sh	r0,r0[0x0]
80008ada:	88 34       	ld.sh	r4,r4[0x6]
80008adc:	80 00       	ld.sh	r0,r0[0x0]
80008ade:	89 1c       	st.w	r4[0x4],r12
80008ae0:	80 00       	ld.sh	r0,r0[0x0]
80008ae2:	88 9c       	ld.uh	r12,r4[0x2]

80008ae4 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80008ae4:	eb cd 40 80 	pushm	r7,lr
80008ae8:	1a 97       	mov	r7,sp
80008aea:	20 4d       	sub	sp,16
80008aec:	ef 4c ff f4 	st.w	r7[-12],r12
80008af0:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
80008af4:	30 08       	mov	r8,0
80008af6:	ef 48 ff f8 	st.w	r7[-8],r8
  uint32_t i;

  for (i = 0; i < size; i++)
80008afa:	30 08       	mov	r8,0
80008afc:	ef 48 ff fc 	st.w	r7[-4],r8
80008b00:	c1 d8       	rjmp	80008b3a <gpio_enable_module+0x56>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80008b02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008b06:	11 98       	ld.ub	r8,r8[0x1]
80008b08:	10 99       	mov	r9,r8
80008b0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008b0e:	11 88       	ld.ub	r8,r8[0x0]
80008b10:	12 9b       	mov	r11,r9
80008b12:	10 9c       	mov	r12,r8
80008b14:	f0 1f 00 10 	mcall	80008b54 <gpio_enable_module+0x70>
80008b18:	18 98       	mov	r8,r12
80008b1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008b1e:	f3 e8 10 08 	or	r8,r9,r8
80008b22:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
80008b26:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008b2a:	2f e8       	sub	r8,-2
80008b2c:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80008b30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b34:	2f f8       	sub	r8,-1
80008b36:	ef 48 ff fc 	st.w	r7[-4],r8
80008b3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008b3e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008b42:	10 39       	cp.w	r9,r8
80008b44:	cd f3       	brcs	80008b02 <gpio_enable_module+0x1e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
80008b46:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80008b4a:	10 9c       	mov	r12,r8
80008b4c:	2f cd       	sub	sp,-16
80008b4e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008b52:	00 00       	add	r0,r0
80008b54:	80 00       	ld.sh	r0,r0[0x0]
80008b56:	8b 58       	st.w	r5[0x14],r8

80008b58 <gpio_enable_module_pin>:


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80008b58:	eb cd 40 80 	pushm	r7,lr
80008b5c:	1a 97       	mov	r7,sp
80008b5e:	20 3d       	sub	sp,12
80008b60:	ef 4c ff f8 	st.w	r7[-8],r12
80008b64:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008b68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b6c:	a5 98       	lsr	r8,0x5
80008b6e:	a9 68       	lsl	r8,0x8
80008b70:	e0 28 f0 00 	sub	r8,61440
80008b74:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
80008b78:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008b7c:	58 18       	cp.w	r8,1
80008b7e:	c1 e0       	breq	80008bba <gpio_enable_module_pin+0x62>
80008b80:	c0 63       	brcs	80008b8c <gpio_enable_module_pin+0x34>
80008b82:	58 28       	cp.w	r8,2
80008b84:	c3 20       	breq	80008be8 <gpio_enable_module_pin+0x90>
80008b86:	58 38       	cp.w	r8,3
80008b88:	c4 70       	breq	80008c16 <gpio_enable_module_pin+0xbe>
80008b8a:	c5 d8       	rjmp	80008c44 <gpio_enable_module_pin+0xec>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80008b8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b90:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b94:	30 19       	mov	r9,1
80008b96:	f2 08 09 48 	lsl	r8,r9,r8
80008b9a:	10 99       	mov	r9,r8
80008b9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ba0:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80008ba2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ba6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008baa:	30 19       	mov	r9,1
80008bac:	f2 08 09 48 	lsl	r8,r9,r8
80008bb0:	10 99       	mov	r9,r8
80008bb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bb6:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008bb8:	c4 88       	rjmp	80008c48 <gpio_enable_module_pin+0xf0>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80008bba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bbe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008bc2:	30 19       	mov	r9,1
80008bc4:	f2 08 09 48 	lsl	r8,r9,r8
80008bc8:	10 99       	mov	r9,r8
80008bca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bce:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80008bd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bd4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008bd8:	30 19       	mov	r9,1
80008bda:	f2 08 09 48 	lsl	r8,r9,r8
80008bde:	10 99       	mov	r9,r8
80008be0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008be4:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008be6:	c3 18       	rjmp	80008c48 <gpio_enable_module_pin+0xf0>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80008be8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008bf0:	30 19       	mov	r9,1
80008bf2:	f2 08 09 48 	lsl	r8,r9,r8
80008bf6:	10 99       	mov	r9,r8
80008bf8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bfc:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80008bfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c02:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c06:	30 19       	mov	r9,1
80008c08:	f2 08 09 48 	lsl	r8,r9,r8
80008c0c:	10 99       	mov	r9,r8
80008c0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c12:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008c14:	c1 a8       	rjmp	80008c48 <gpio_enable_module_pin+0xf0>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80008c16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c1a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c1e:	30 19       	mov	r9,1
80008c20:	f2 08 09 48 	lsl	r8,r9,r8
80008c24:	10 99       	mov	r9,r8
80008c26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c2a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80008c2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c30:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c34:	30 19       	mov	r9,1
80008c36:	f2 08 09 48 	lsl	r8,r9,r8
80008c3a:	10 99       	mov	r9,r8
80008c3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c40:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008c42:	c0 38       	rjmp	80008c48 <gpio_enable_module_pin+0xf0>
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
80008c44:	30 18       	mov	r8,1
80008c46:	c0 d8       	rjmp	80008c60 <gpio_enable_module_pin+0x108>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80008c48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c4c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c50:	30 19       	mov	r9,1
80008c52:	f2 08 09 48 	lsl	r8,r9,r8
80008c56:	10 99       	mov	r9,r8
80008c58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c5c:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
80008c5e:	30 08       	mov	r8,0
}
80008c60:	10 9c       	mov	r12,r8
80008c62:	2f dd       	sub	sp,-12
80008c64:	e3 cd 80 80 	ldm	sp++,r7,pc

80008c68 <gpio_enable_gpio_pin>:
  }
}


void gpio_enable_gpio_pin(uint32_t pin)
{
80008c68:	eb cd 40 80 	pushm	r7,lr
80008c6c:	1a 97       	mov	r7,sp
80008c6e:	20 2d       	sub	sp,8
80008c70:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008c74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c78:	a5 98       	lsr	r8,0x5
80008c7a:	a9 68       	lsl	r8,0x8
80008c7c:	e0 28 f0 00 	sub	r8,61440
80008c80:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
80008c84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c88:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c8c:	30 19       	mov	r9,1
80008c8e:	f2 08 09 48 	lsl	r8,r9,r8
80008c92:	10 99       	mov	r9,r8
80008c94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c98:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
80008c9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ca0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ca4:	30 19       	mov	r9,1
80008ca6:	f2 08 09 48 	lsl	r8,r9,r8
80008caa:	10 99       	mov	r9,r8
80008cac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cb0:	91 19       	st.w	r8[0x4],r9
}
80008cb2:	2f ed       	sub	sp,-8
80008cb4:	e3 cd 80 80 	ldm	sp++,r7,pc

80008cb8 <gpio_enable_pin_pull_up>:

#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
80008cb8:	eb cd 40 80 	pushm	r7,lr
80008cbc:	1a 97       	mov	r7,sp
80008cbe:	20 2d       	sub	sp,8
80008cc0:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008cc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008cc8:	a5 98       	lsr	r8,0x5
80008cca:	a9 68       	lsl	r8,0x8
80008ccc:	e0 28 f0 00 	sub	r8,61440
80008cd0:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80008cd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008cd8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008cdc:	30 19       	mov	r9,1
80008cde:	f2 08 09 48 	lsl	r8,r9,r8
80008ce2:	10 99       	mov	r9,r8
80008ce4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ce8:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80008cec:	2f ed       	sub	sp,-8
80008cee:	e3 cd 80 80 	ldm	sp++,r7,pc

80008cf2 <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80008cf2:	eb cd 40 80 	pushm	r7,lr
80008cf6:	1a 97       	mov	r7,sp
80008cf8:	20 3d       	sub	sp,12
80008cfa:	ef 4c ff f8 	st.w	r7[-8],r12
80008cfe:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008d02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d06:	a5 98       	lsr	r8,0x5
80008d08:	a9 68       	lsl	r8,0x8
80008d0a:	e0 28 f0 00 	sub	r8,61440
80008d0e:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
80008d12:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008d16:	e2 18 00 04 	andl	r8,0x4,COH
80008d1a:	c0 e0       	breq	80008d36 <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
80008d1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d20:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d24:	30 19       	mov	r9,1
80008d26:	f2 08 09 48 	lsl	r8,r9,r8
80008d2a:	10 99       	mov	r9,r8
80008d2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d30:	f1 49 00 74 	st.w	r8[116],r9
80008d34:	c0 d8       	rjmp	80008d4e <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80008d36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d3a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d3e:	30 19       	mov	r9,1
80008d40:	f2 08 09 48 	lsl	r8,r9,r8
80008d44:	10 99       	mov	r9,r8
80008d46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d4a:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80008d4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008d52:	e2 18 00 80 	andl	r8,0x80,COH
80008d56:	c5 a0       	breq	80008e0a <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
80008d58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008d5c:	e2 18 01 80 	andl	r8,0x180,COH
80008d60:	c1 a0       	breq	80008d94 <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80008d62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d66:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d6a:	30 19       	mov	r9,1
80008d6c:	f2 08 09 48 	lsl	r8,r9,r8
80008d70:	10 99       	mov	r9,r8
80008d72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d76:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80008d7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d7e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d82:	30 19       	mov	r9,1
80008d84:	f2 08 09 48 	lsl	r8,r9,r8
80008d88:	10 99       	mov	r9,r8
80008d8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d8e:	f1 49 00 b8 	st.w	r8[184],r9
80008d92:	c3 c8       	rjmp	80008e0a <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
80008d94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008d98:	e2 18 02 80 	andl	r8,0x280,COH
80008d9c:	c1 a0       	breq	80008dd0 <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80008d9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008da2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008da6:	30 19       	mov	r9,1
80008da8:	f2 08 09 48 	lsl	r8,r9,r8
80008dac:	10 99       	mov	r9,r8
80008dae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008db2:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80008db6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008dba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008dbe:	30 19       	mov	r9,1
80008dc0:	f2 08 09 48 	lsl	r8,r9,r8
80008dc4:	10 99       	mov	r9,r8
80008dc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dca:	f1 49 00 b8 	st.w	r8[184],r9
80008dce:	c1 e8       	rjmp	80008e0a <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
80008dd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008dd4:	e2 18 03 80 	andl	r8,0x380,COH
80008dd8:	c1 90       	breq	80008e0a <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80008dda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008dde:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008de2:	30 19       	mov	r9,1
80008de4:	f2 08 09 48 	lsl	r8,r9,r8
80008de8:	10 99       	mov	r9,r8
80008dea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dee:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80008df2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008df6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008dfa:	30 19       	mov	r9,1
80008dfc:	f2 08 09 48 	lsl	r8,r9,r8
80008e00:	10 99       	mov	r9,r8
80008e02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e06:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80008e0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008e0e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008e12:	5c 58       	castu.b	r8
80008e14:	c2 c0       	breq	80008e6c <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
80008e16:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008e1a:	e2 18 00 02 	andl	r8,0x2,COH
80008e1e:	c0 e0       	breq	80008e3a <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80008e20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e24:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e28:	30 19       	mov	r9,1
80008e2a:	f2 08 09 48 	lsl	r8,r9,r8
80008e2e:	10 99       	mov	r9,r8
80008e30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e34:	f1 49 00 54 	st.w	r8[84],r9
80008e38:	c0 d8       	rjmp	80008e52 <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80008e3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e3e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e42:	30 19       	mov	r9,1
80008e44:	f2 08 09 48 	lsl	r8,r9,r8
80008e48:	10 99       	mov	r9,r8
80008e4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e4e:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80008e52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e56:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e5a:	30 19       	mov	r9,1
80008e5c:	f2 08 09 48 	lsl	r8,r9,r8
80008e60:	10 99       	mov	r9,r8
80008e62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e66:	f1 49 00 44 	st.w	r8[68],r9
80008e6a:	c0 d8       	rjmp	80008e84 <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80008e6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e70:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e74:	30 19       	mov	r9,1
80008e76:	f2 08 09 48 	lsl	r8,r9,r8
80008e7a:	10 99       	mov	r9,r8
80008e7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e80:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80008e84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e88:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e8c:	30 19       	mov	r9,1
80008e8e:	f2 08 09 48 	lsl	r8,r9,r8
80008e92:	10 99       	mov	r9,r8
80008e94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e98:	91 19       	st.w	r8[0x4],r9
}
80008e9a:	2f dd       	sub	sp,-12
80008e9c:	e3 cd 80 80 	ldm	sp++,r7,pc

80008ea0 <gpio_get_pin_value>:
    /* Enable GPIO */
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
80008ea0:	eb cd 40 80 	pushm	r7,lr
80008ea4:	1a 97       	mov	r7,sp
80008ea6:	20 2d       	sub	sp,8
80008ea8:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008eac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008eb0:	a5 98       	lsr	r8,0x5
80008eb2:	a9 68       	lsl	r8,0x8
80008eb4:	e0 28 f0 00 	sub	r8,61440
80008eb8:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80008ebc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ec0:	71 89       	ld.w	r9,r8[0x60]
80008ec2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ec6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008eca:	f2 08 0a 48 	lsr	r8,r9,r8
80008ece:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80008ed2:	10 9c       	mov	r12,r8
80008ed4:	2f ed       	sub	sp,-8
80008ed6:	e3 cd 80 80 	ldm	sp++,r7,pc

80008eda <gpio_set_gpio_pin>:
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
}


void gpio_set_gpio_pin(uint32_t pin)
{
80008eda:	eb cd 40 80 	pushm	r7,lr
80008ede:	1a 97       	mov	r7,sp
80008ee0:	20 2d       	sub	sp,8
80008ee2:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008ee6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008eea:	a5 98       	lsr	r8,0x5
80008eec:	a9 68       	lsl	r8,0x8
80008eee:	e0 28 f0 00 	sub	r8,61440
80008ef2:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80008ef6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008efa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008efe:	30 19       	mov	r9,1
80008f00:	f2 08 09 48 	lsl	r8,r9,r8
80008f04:	10 99       	mov	r9,r8
80008f06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f0a:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80008f0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f12:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f16:	30 19       	mov	r9,1
80008f18:	f2 08 09 48 	lsl	r8,r9,r8
80008f1c:	10 99       	mov	r9,r8
80008f1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f22:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80008f26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f2a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f2e:	30 19       	mov	r9,1
80008f30:	f2 08 09 48 	lsl	r8,r9,r8
80008f34:	10 99       	mov	r9,r8
80008f36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f3a:	91 19       	st.w	r8[0x4],r9
}
80008f3c:	2f ed       	sub	sp,-8
80008f3e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008f42 <gpio_clr_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
80008f42:	eb cd 40 80 	pushm	r7,lr
80008f46:	1a 97       	mov	r7,sp
80008f48:	20 2d       	sub	sp,8
80008f4a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008f4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f52:	a5 98       	lsr	r8,0x5
80008f54:	a9 68       	lsl	r8,0x8
80008f56:	e0 28 f0 00 	sub	r8,61440
80008f5a:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80008f5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f62:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f66:	30 19       	mov	r9,1
80008f68:	f2 08 09 48 	lsl	r8,r9,r8
80008f6c:	10 99       	mov	r9,r8
80008f6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f72:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80008f76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f7a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f7e:	30 19       	mov	r9,1
80008f80:	f2 08 09 48 	lsl	r8,r9,r8
80008f84:	10 99       	mov	r9,r8
80008f86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f8a:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80008f8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f92:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008f96:	30 19       	mov	r9,1
80008f98:	f2 08 09 48 	lsl	r8,r9,r8
80008f9c:	10 99       	mov	r9,r8
80008f9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fa2:	91 19       	st.w	r8[0x4],r9
}
80008fa4:	2f ed       	sub	sp,-8
80008fa6:	e3 cd 80 80 	ldm	sp++,r7,pc

80008faa <gpio_tgl_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
80008faa:	eb cd 40 80 	pushm	r7,lr
80008fae:	1a 97       	mov	r7,sp
80008fb0:	20 2d       	sub	sp,8
80008fb2:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008fb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fba:	a5 98       	lsr	r8,0x5
80008fbc:	a9 68       	lsl	r8,0x8
80008fbe:	e0 28 f0 00 	sub	r8,61440
80008fc2:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
80008fc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008fce:	30 19       	mov	r9,1
80008fd0:	f2 08 09 48 	lsl	r8,r9,r8
80008fd4:	10 99       	mov	r9,r8
80008fd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fda:	f1 49 00 5c 	st.w	r8[92],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80008fde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fe2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008fe6:	30 19       	mov	r9,1
80008fe8:	f2 08 09 48 	lsl	r8,r9,r8
80008fec:	10 99       	mov	r9,r8
80008fee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ff2:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80008ff6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ffa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ffe:	30 19       	mov	r9,1
80009000:	f2 08 09 48 	lsl	r8,r9,r8
80009004:	10 99       	mov	r9,r8
80009006:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000900a:	91 19       	st.w	r8[0x4],r9
}
8000900c:	2f ed       	sub	sp,-8
8000900e:	e3 cd 80 80 	ldm	sp++,r7,pc

80009012 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80009012:	eb cd 40 80 	pushm	r7,lr
80009016:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80009018:	c0 08       	rjmp	80009018 <_unhandled_interrupt+0x6>
8000901a:	d7 03       	nop

8000901c <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
8000901c:	eb cd 40 80 	pushm	r7,lr
80009020:	1a 97       	mov	r7,sp
80009022:	20 3d       	sub	sp,12
80009024:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80009028:	fe 78 08 00 	mov	r8,-63488
8000902c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009030:	f2 09 11 03 	rsub	r9,r9,3
80009034:	28 09       	sub	r9,-128
80009036:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000903a:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000903e:	fe 78 08 00 	mov	r8,-63488
80009042:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009046:	2c 09       	sub	r9,-64
80009048:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000904c:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80009050:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009054:	58 08       	cp.w	r8,0
80009056:	c1 30       	breq	8000907c <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80009058:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000905c:	48 b8       	lddpc	r8,80009088 <_get_interrupt_handler+0x6c>
8000905e:	a1 79       	lsl	r9,0x1
80009060:	2f f9       	sub	r9,-1
80009062:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80009066:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000906a:	f0 08 12 00 	clz	r8,r8
8000906e:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80009072:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80009074:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80009078:	70 08       	ld.w	r8,r8[0x0]
8000907a:	c0 28       	rjmp	8000907e <_get_interrupt_handler+0x62>
8000907c:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000907e:	10 9c       	mov	r12,r8
80009080:	2f dd       	sub	sp,-12
80009082:	e3 cd 80 80 	ldm	sp++,r7,pc
80009086:	00 00       	add	r0,r0
80009088:	80 00       	ld.sh	r0,r0[0x0]
8000908a:	f2 fc eb cd 	ld.w	r12,r9[-5171]

8000908c <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
8000908c:	eb cd 40 80 	pushm	r7,lr
80009090:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80009092:	48 38       	lddpc	r8,8000909c <INTC_init_evba+0x10>
80009094:	e3 b8 00 01 	mtsr	0x4,r8
}
80009098:	e3 cd 80 80 	ldm	sp++,r7,pc
8000909c:	80 00       	ld.sh	r0,r0[0x0]
8000909e:	ec 00       	*unknown*

800090a0 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800090a0:	eb cd 40 80 	pushm	r7,lr
800090a4:	1a 97       	mov	r7,sp
800090a6:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
800090a8:	f0 1f 00 1f 	mcall	80009124 <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800090ac:	30 08       	mov	r8,0
800090ae:	ef 48 ff f8 	st.w	r7[-8],r8
800090b2:	c3 18       	rjmp	80009114 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800090b4:	30 08       	mov	r8,0
800090b6:	ef 48 ff fc 	st.w	r7[-4],r8
800090ba:	c1 48       	rjmp	800090e2 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800090bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800090c0:	49 a8       	lddpc	r8,80009128 <INTC_init_interrupts+0x88>
800090c2:	a1 79       	lsl	r9,0x1
800090c4:	2f f9       	sub	r9,-1
800090c6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800090ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090ce:	a3 68       	lsl	r8,0x2
800090d0:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800090d4:	49 69       	lddpc	r9,8000912c <INTC_init_interrupts+0x8c>
800090d6:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800090d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090dc:	2f f8       	sub	r8,-1
800090de:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
800090e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800090e6:	49 18       	lddpc	r8,80009128 <INTC_init_interrupts+0x88>
800090e8:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800090ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090f0:	10 39       	cp.w	r9,r8
800090f2:	fe 9b ff e5 	brhi	800090bc <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800090f6:	fe 78 08 00 	mov	r8,-63488
800090fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800090fe:	48 db       	lddpc	r11,80009130 <INTC_init_interrupts+0x90>
80009100:	48 da       	lddpc	r10,80009134 <INTC_init_interrupts+0x94>
80009102:	f6 0a 01 0a 	sub	r10,r11,r10
80009106:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000910a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000910e:	2f f8       	sub	r8,-1
80009110:	ef 48 ff f8 	st.w	r7[-8],r8
80009114:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009118:	59 d8       	cp.w	r8,29
8000911a:	fe 98 ff cd 	brls	800090b4 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
8000911e:	2f ed       	sub	sp,-8
80009120:	e3 cd 80 80 	ldm	sp++,r7,pc
80009124:	80 00       	ld.sh	r0,r0[0x0]
80009126:	90 8c       	ld.uh	r12,r8[0x0]
80009128:	80 00       	ld.sh	r0,r0[0x0]
8000912a:	f2 fc 80 00 	ld.w	r12,r9[-32768]
8000912e:	90 12       	ld.sh	r2,r8[0x2]
80009130:	80 00       	ld.sh	r0,r0[0x0]
80009132:	ed 04 80 00 	ld.sh	r4,r6[-32768]
80009136:	ec 00       	*unknown*

80009138 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80009138:	eb cd 40 80 	pushm	r7,lr
8000913c:	1a 97       	mov	r7,sp
8000913e:	20 4d       	sub	sp,16
80009140:	ef 4c ff f8 	st.w	r7[-8],r12
80009144:	ef 4b ff f4 	st.w	r7[-12],r11
80009148:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000914c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009150:	a5 98       	lsr	r8,0x5
80009152:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80009156:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000915a:	4a 78       	lddpc	r8,800091f4 <INTC_register_interrupt+0xbc>
8000915c:	a1 79       	lsl	r9,0x1
8000915e:	2f f9       	sub	r9,-1
80009160:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80009164:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009168:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000916c:	a3 68       	lsl	r8,0x2
8000916e:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80009172:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009176:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80009178:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000917c:	58 08       	cp.w	r8,0
8000917e:	c0 c1       	brne	80009196 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80009180:	fe 78 08 00 	mov	r8,-63488
80009184:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009188:	49 cb       	lddpc	r11,800091f8 <INTC_register_interrupt+0xc0>
8000918a:	49 da       	lddpc	r10,800091fc <INTC_register_interrupt+0xc4>
8000918c:	f6 0a 01 0a 	sub	r10,r11,r10
80009190:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80009194:	c2 d8       	rjmp	800091ee <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80009196:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000919a:	58 18       	cp.w	r8,1
8000919c:	c0 d1       	brne	800091b6 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
8000919e:	fe 78 08 00 	mov	r8,-63488
800091a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800091a6:	49 7b       	lddpc	r11,80009200 <INTC_register_interrupt+0xc8>
800091a8:	49 5a       	lddpc	r10,800091fc <INTC_register_interrupt+0xc4>
800091aa:	f6 0a 01 0a 	sub	r10,r11,r10
800091ae:	bf aa       	sbr	r10,0x1e
800091b0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800091b4:	c1 d8       	rjmp	800091ee <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
800091b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800091ba:	58 28       	cp.w	r8,2
800091bc:	c0 d1       	brne	800091d6 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800091be:	fe 78 08 00 	mov	r8,-63488
800091c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800091c6:	49 0b       	lddpc	r11,80009204 <INTC_register_interrupt+0xcc>
800091c8:	48 da       	lddpc	r10,800091fc <INTC_register_interrupt+0xc4>
800091ca:	f6 0a 01 0a 	sub	r10,r11,r10
800091ce:	bf ba       	sbr	r10,0x1f
800091d0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800091d4:	c0 d8       	rjmp	800091ee <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800091d6:	fe 78 08 00 	mov	r8,-63488
800091da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800091de:	48 bb       	lddpc	r11,80009208 <INTC_register_interrupt+0xd0>
800091e0:	48 7a       	lddpc	r10,800091fc <INTC_register_interrupt+0xc4>
800091e2:	f6 0a 01 0a 	sub	r10,r11,r10
800091e6:	ea 1a c0 00 	orh	r10,0xc000
800091ea:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
800091ee:	2f cd       	sub	sp,-16
800091f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800091f4:	80 00       	ld.sh	r0,r0[0x0]
800091f6:	f2 fc 80 00 	ld.w	r12,r9[-32768]
800091fa:	ed 04 80 00 	ld.sh	r4,r6[-32768]
800091fe:	ec 00       	*unknown*
80009200:	80 00       	ld.sh	r0,r0[0x0]
80009202:	ed 12 80 00 	ld.uh	r2,r6[-32768]
80009206:	ed 20 80 00 	ld.sb	r0,r6[-32768]
8000920a:	ed 2e eb cd 	ld.sb	lr,r6[-5171]

8000920c <mci_reset>:


int shadow_sr=0;

void mci_reset(volatile avr32_mci_t *mci)
{
8000920c:	eb cd 40 80 	pushm	r7,lr
80009210:	1a 97       	mov	r7,sp
80009212:	20 1d       	sub	sp,4
80009214:	ef 4c ff fc 	st.w	r7[-4],r12
  mci->cr = (1<<AVR32_MCI_CR_SWRST);
80009218:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000921c:	e0 69 00 80 	mov	r9,128
80009220:	91 09       	st.w	r8[0x0],r9
}
80009222:	2f fd       	sub	sp,-4
80009224:	e3 cd 80 80 	ldm	sp++,r7,pc

80009228 <mci_disable>:

void mci_disable(volatile avr32_mci_t *mci)
{
80009228:	eb cd 40 80 	pushm	r7,lr
8000922c:	1a 97       	mov	r7,sp
8000922e:	20 1d       	sub	sp,4
80009230:	ef 4c ff fc 	st.w	r7[-4],r12
  // Disable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIDIS) | (1<<AVR32_MCI_CR_PWSDIS);
80009234:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009238:	30 a9       	mov	r9,10
8000923a:	91 09       	st.w	r8[0x0],r9
}
8000923c:	2f fd       	sub	sp,-4
8000923e:	e3 cd 80 80 	ldm	sp++,r7,pc

80009242 <mci_enable>:

void mci_enable(volatile avr32_mci_t *mci)
{
80009242:	eb cd 40 80 	pushm	r7,lr
80009246:	1a 97       	mov	r7,sp
80009248:	20 1d       	sub	sp,4
8000924a:	ef 4c ff fc 	st.w	r7[-4],r12
  // Enable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIEN) | (1<<AVR32_MCI_CR_PWSEN);
8000924e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009252:	30 59       	mov	r9,5
80009254:	91 09       	st.w	r8[0x0],r9
}
80009256:	2f fd       	sub	sp,-4
80009258:	e3 cd 80 80 	ldm	sp++,r7,pc

8000925c <mci_set_speed>:
}

void mci_set_speed(volatile avr32_mci_t *mci,
                   uint32_t pbb_hz,
                   uint32_t card_speed)
{
8000925c:	eb cd 40 80 	pushm	r7,lr
80009260:	1a 97       	mov	r7,sp
80009262:	20 7d       	sub	sp,28
80009264:	ef 4c ff ec 	st.w	r7[-20],r12
80009268:	ef 4b ff e8 	st.w	r7[-24],r11
8000926c:	ef 4a ff e4 	st.w	r7[-28],r10
    avr32_mci_cfg_t   CFG;
  };
  union u_cfg val;

  // Get the Mode Register
  mci_mode_register = mci->mr;
80009270:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009274:	70 18       	ld.w	r8,r8[0x4]
80009276:	ef 48 ff f4 	st.w	r7[-12],r8

  if (card_speed > AVR32_MCI_HSDIS_MAX_FREQ)
8000927a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000927e:	e0 69 78 40 	mov	r9,30784
80009282:	ea 19 01 7d 	orh	r9,0x17d
80009286:	12 38       	cp.w	r8,r9
80009288:	e0 88 00 14 	brls	800092b0 <mci_set_speed+0x54>
  { // Use of the High Speed mode of the MCI macro.
    val.cfg = mci->cfg;
8000928c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009290:	71 58       	ld.w	r8,r8[0x54]
80009292:	ef 48 ff f0 	st.w	r7[-16],r8
    val.CFG.hsmode = 1;
80009296:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000929a:	30 19       	mov	r9,1
8000929c:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
800092a0:	ef 48 ff f0 	st.w	r7[-16],r8
    mci->cfg = val.cfg;
800092a4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800092a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800092ac:	f1 49 00 54 	st.w	r8[84],r9
  }

  // Multimedia Card Interface clock (MCCK or MCI_CK) is Master Clock (MCK)
  // divided by (2*(CLKDIV+1))
  if (card_speed > 0)
800092b0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800092b4:	58 08       	cp.w	r8,0
800092b6:	c2 90       	breq	80009308 <mci_set_speed+0xac>
  {
    clkdiv = pbb_hz / (card_speed * 2);
800092b8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800092bc:	f0 09 15 01 	lsl	r9,r8,0x1
800092c0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800092c4:	f0 09 0d 08 	divu	r8,r8,r9
800092c8:	ef 48 ff f8 	st.w	r7[-8],r8
    rest   = pbb_hz % (card_speed * 2);
800092cc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800092d0:	f0 09 15 01 	lsl	r9,r8,0x1
800092d4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800092d8:	f0 09 0d 08 	divu	r8,r8,r9
800092dc:	12 98       	mov	r8,r9
800092de:	ef 48 ff fc 	st.w	r7[-4],r8
    if (rest)
800092e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800092e6:	58 08       	cp.w	r8,0
800092e8:	c0 60       	breq	800092f4 <mci_set_speed+0x98>
    { // Ensure that the card_speed can not be higher than expected.
      clkdiv += 1;
800092ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092ee:	2f f8       	sub	r8,-1
800092f0:	ef 48 ff f8 	st.w	r7[-8],r8
    }

    if (clkdiv > 0)
800092f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092f8:	58 08       	cp.w	r8,0
800092fa:	c0 b0       	breq	80009310 <mci_set_speed+0xb4>
    {
      clkdiv -= 1;
800092fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009300:	20 18       	sub	r8,1
80009302:	ef 48 ff f8 	st.w	r7[-8],r8
80009306:	c0 68       	rjmp	80009312 <mci_set_speed+0xb6>
    }
  }
  else
  {
    clkdiv = 0;
80009308:	30 08       	mov	r8,0
8000930a:	ef 48 ff f8 	st.w	r7[-8],r8
8000930e:	c0 28       	rjmp	80009312 <mci_set_speed+0xb6>
      clkdiv += 1;
    }

    if (clkdiv > 0)
    {
      clkdiv -= 1;
80009310:	d7 03       	nop
  {
    clkdiv = 0;
  }

  // Write new configuration
  mci_mode_register &= ~AVR32_MCI_MR_CLKDIV_MASK; // Clear previous value
80009312:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009316:	e0 18 ff 00 	andl	r8,0xff00
8000931a:	ef 48 ff f4 	st.w	r7[-12],r8
  mci_mode_register |= clkdiv; // Set the new one
8000931e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009322:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009326:	f3 e8 10 08 	or	r8,r9,r8
8000932a:	ef 48 ff f4 	st.w	r7[-12],r8
  mci->mr = mci_mode_register;
8000932e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009332:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009336:	91 19       	st.w	r8[0x4],r9
}
80009338:	2f 9d       	sub	sp,-28
8000933a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000933e:	d7 03       	nop

80009340 <mci_init>:

int mci_init(volatile avr32_mci_t *mci,
              uint8_t card_slot,
              uint32_t pbb_hz)
{
80009340:	eb cd 40 80 	pushm	r7,lr
80009344:	1a 97       	mov	r7,sp
80009346:	20 3d       	sub	sp,12
80009348:	ef 4c ff fc 	st.w	r7[-4],r12
8000934c:	16 98       	mov	r8,r11
8000934e:	ef 4a ff f4 	st.w	r7[-12],r10
80009352:	ef 68 ff f8 	st.b	r7[-8],r8
  if (card_slot>MCI_LAST_SLOTS)
80009356:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000935a:	30 18       	mov	r8,1
8000935c:	f0 09 18 00 	cp.b	r9,r8
80009360:	e0 88 00 04 	brls	80009368 <mci_init+0x28>
    return MCI_INVALID_INPUT;
80009364:	30 18       	mov	r8,1
80009366:	c3 98       	rjmp	800093d8 <mci_init+0x98>

  // Initialize all bits of the shadow status register.
  shadow_sr=0;
80009368:	49 e8       	lddpc	r8,800093e0 <mci_init+0xa0>
8000936a:	30 09       	mov	r9,0
8000936c:	91 09       	st.w	r8[0x0],r9

  // Reset the MCI
  mci_reset(mci);
8000936e:	ee fc ff fc 	ld.w	r12,r7[-4]
80009372:	f0 1f 00 1d 	mcall	800093e4 <mci_init+0xa4>

  // Disable the MCI
  mci_disable(mci);
80009376:	ee fc ff fc 	ld.w	r12,r7[-4]
8000937a:	f0 1f 00 1c 	mcall	800093e8 <mci_init+0xa8>

  // Disable all the interrupts
  mci->idr = 0xffffffff;
8000937e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009382:	3f f9       	mov	r9,-1
80009384:	f1 49 00 48 	st.w	r8[72],r9

  // Setup configuration register
  mci->cfg = 0;
80009388:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000938c:	30 09       	mov	r9,0
8000938e:	f1 49 00 54 	st.w	r8[84],r9

  // Clear Mode register
  mci->mr = 0;
80009392:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009396:	30 09       	mov	r9,0
80009398:	91 19       	st.w	r8[0x4],r9

  // Set the Data Timeout Register to 1 Mega Cycles
  mci->dtor = (MCI_DEFAULT_DTOREG);
8000939a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000939e:	37 29       	mov	r9,114
800093a0:	91 29       	st.w	r8[0x8],r9

  // Set the Mode Register
  mci_set_speed(mci, pbb_hz, MCI_DEFAULT_SPEED_HZ);
800093a2:	e2 7a 0d 40 	mov	r10,200000
800093a6:	ee fb ff f4 	ld.w	r11,r7[-12]
800093aa:	ee fc ff fc 	ld.w	r12,r7[-4]
800093ae:	f0 1f 00 10 	mcall	800093ec <mci_init+0xac>
  mci->mr |= ((MCI_DEFAULT_PWSDIV<<AVR32_MCI_MR_PWSDIV) | AVR32_MCI_MR_RDPROOF_MASK | AVR32_MCI_MR_WRPROOF_MASK);
800093b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093b6:	70 18       	ld.w	r8,r8[0x4]
800093b8:	10 99       	mov	r9,r8
800093ba:	e8 19 1f 00 	orl	r9,0x1f00
800093be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093c2:	91 19       	st.w	r8[0x4],r9

  // Set the SD/MMC Card Register
  mci->sdcr = (MCI_BUS_SIZE_1_BIT>>AVR32_MCI_SDCR_SDCBUS_OFFSET)|(card_slot>>AVR32_MCI_SDCR_SDCSEL_OFFSET);
800093c4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800093c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093cc:	91 39       	st.w	r8[0xc],r9

  // Enable the MCI and the Power Saving
  mci_enable(mci);
800093ce:	ee fc ff fc 	ld.w	r12,r7[-4]
800093d2:	f0 1f 00 08 	mcall	800093f0 <mci_init+0xb0>

  return MCI_SUCCESS;
800093d6:	30 08       	mov	r8,0
}
800093d8:	10 9c       	mov	r12,r8
800093da:	2f dd       	sub	sp,-12
800093dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800093e0:	00 00       	add	r0,r0
800093e2:	07 b0       	ld.ub	r0,r3[0x3]
800093e4:	80 00       	ld.sh	r0,r0[0x0]
800093e6:	92 0c       	ld.sh	r12,r9[0x0]
800093e8:	80 00       	ld.sh	r0,r0[0x0]
800093ea:	92 28       	ld.sh	r8,r9[0x4]
800093ec:	80 00       	ld.sh	r0,r0[0x0]
800093ee:	92 5c       	ld.sh	r12,r9[0xa]
800093f0:	80 00       	ld.sh	r0,r0[0x0]
800093f2:	92 42       	ld.sh	r2,r9[0x8]

800093f4 <mci_set_block_size>:

void mci_set_block_size(volatile avr32_mci_t *mci,
                        uint16_t length)
{
800093f4:	eb cd 40 80 	pushm	r7,lr
800093f8:	1a 97       	mov	r7,sp
800093fa:	20 3d       	sub	sp,12
800093fc:	ef 4c ff f8 	st.w	r7[-8],r12
80009400:	16 98       	mov	r8,r11
80009402:	ef 58 ff f4 	st.h	r7[-12],r8
  uint32_t mci_mode_register;

  mci_mode_register = mci->mr;
80009406:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000940a:	70 18       	ld.w	r8,r8[0x4]
8000940c:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register &= ~AVR32_MCI_MR_BLKLEN_MASK; // Clear previous BLKLEN
80009410:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009414:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80009418:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register |= (length<<AVR32_MCI_MR_BLKLEN_OFFSET); // Set the new value
8000941c:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80009420:	b1 68       	lsl	r8,0x10
80009422:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009426:	f3 e8 10 08 	or	r8,r9,r8
8000942a:	ef 48 ff fc 	st.w	r7[-4],r8

  mci->mr = mci_mode_register;
8000942e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009432:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009436:	91 19       	st.w	r8[0x4],r9
}
80009438:	2f dd       	sub	sp,-12
8000943a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000943e <mci_set_block_count>:

void mci_set_block_count(volatile avr32_mci_t *mci,
                         uint16_t cnt)
{
8000943e:	eb cd 40 80 	pushm	r7,lr
80009442:	1a 97       	mov	r7,sp
80009444:	20 3d       	sub	sp,12
80009446:	ef 4c ff f8 	st.w	r7[-8],r12
8000944a:	16 98       	mov	r8,r11
8000944c:	ef 58 ff f4 	st.h	r7[-12],r8
    uint32_t          blkr;
    avr32_mci_blkr_t  BLKR;
  };
  union u_blkr val;

  val.blkr = mci->blkr;
80009450:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009454:	70 68       	ld.w	r8,r8[0x18]
80009456:	ef 48 ff fc 	st.w	r7[-4],r8
  val.BLKR.bcnt = cnt;
8000945a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000945e:	ef 58 ff fe 	st.h	r7[-2],r8
  mci->blkr = val.blkr;
80009462:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009466:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000946a:	91 69       	st.w	r8[0x18],r9
}
8000946c:	2f dd       	sub	sp,-12
8000946e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009472:	d7 03       	nop

80009474 <mci_send_cmd>:

int mci_send_cmd(volatile avr32_mci_t *mci,
                 unsigned int cmd,
                 unsigned int arg)
{
80009474:	eb cd 40 80 	pushm	r7,lr
80009478:	1a 97       	mov	r7,sp
8000947a:	20 7d       	sub	sp,28
8000947c:	ef 4c ff ec 	st.w	r7[-20],r12
80009480:	ef 4b ff e8 	st.w	r7[-24],r11
80009484:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int	error;

  // Send the command
  mci->argr = arg;
80009488:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000948c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80009490:	91 49       	st.w	r8[0x10],r9
  mci->cmdr = cmd;
80009492:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009496:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000949a:	91 59       	st.w	r8[0x14],r9
8000949c:	ee f8 ff ec 	ld.w	r8,r7[-20]
800094a0:	ef 48 ff f4 	st.w	r7[-12],r8
800094a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800094a8:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800094ac:	4a 78       	lddpc	r8,80009548 <mci_send_cmd+0xd4>
800094ae:	70 08       	ld.w	r8,r8[0x0]
800094b0:	10 99       	mov	r9,r8
800094b2:	e6 19 01 e0 	andh	r9,0x1e0,COH
800094b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800094ba:	71 08       	ld.w	r8,r8[0x40]
800094bc:	f3 e8 10 08 	or	r8,r9,r8
800094c0:	10 99       	mov	r9,r8
800094c2:	4a 28       	lddpc	r8,80009548 <mci_send_cmd+0xd4>
800094c4:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800094c6:	4a 18       	lddpc	r8,80009548 <mci_send_cmd+0xd4>
800094c8:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_cmd_ready(volatile avr32_mci_t *mci)
{
  return ((mci_get_sr(mci)&AVR32_MCI_SR_CMDRDY_MASK) != 0);
800094ca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // wait for CMDRDY Status flag to read the response
  while( !(mci_cmd_ready(mci)) );
800094ce:	ce 70       	breq	8000949c <mci_send_cmd+0x28>
800094d0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800094d4:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800094d8:	49 c8       	lddpc	r8,80009548 <mci_send_cmd+0xd4>
800094da:	70 08       	ld.w	r8,r8[0x0]
800094dc:	10 99       	mov	r9,r8
800094de:	e6 19 01 e0 	andh	r9,0x1e0,COH
800094e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800094e6:	71 08       	ld.w	r8,r8[0x40]
800094e8:	f3 e8 10 08 	or	r8,r9,r8
800094ec:	10 99       	mov	r9,r8
800094ee:	49 78       	lddpc	r8,80009548 <mci_send_cmd+0xd4>
800094f0:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800094f2:	49 68       	lddpc	r8,80009548 <mci_send_cmd+0xd4>
800094f4:	70 08       	ld.w	r8,r8[0x0]

  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
800094f6:	e6 18 c0 7f 	andh	r8,0xc07f,COH
800094fa:	ef 48 ff f0 	st.w	r7[-16],r8
  if(error != 0 )
800094fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009502:	58 08       	cp.w	r8,0
80009504:	c1 d0       	breq	8000953e <mci_send_cmd+0xca>
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
80009506:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000950a:	e0 48 00 69 	cp.w	r8,105
8000950e:	c0 f0       	breq	8000952c <mci_send_cmd+0xb8>
80009510:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009514:	e0 48 08 41 	cp.w	r8,2113
80009518:	c0 a0       	breq	8000952c <mci_send_cmd+0xb8>
    {
      if( error != AVR32_MCI_SR_RTOE_MASK )
8000951a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000951e:	fc 19 00 10 	movh	r9,0x10
80009522:	12 38       	cp.w	r8,r9
80009524:	c0 c0       	breq	8000953c <mci_send_cmd+0xc8>
        // filter RTOE error which happens when using the HS mode
        return error;
80009526:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000952a:	c0 b8       	rjmp	80009540 <mci_send_cmd+0xcc>
    }
    else
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
8000952c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009530:	e4 48 00 00 	cp.w	r8,262144
80009534:	c0 50       	breq	8000953e <mci_send_cmd+0xca>
        return error;
80009536:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000953a:	c0 38       	rjmp	80009540 <mci_send_cmd+0xcc>
  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
  if(error != 0 )
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
8000953c:	d7 03       	nop
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
        return error;
    }
  }
  return MCI_SUCCESS;
8000953e:	30 08       	mov	r8,0

}
80009540:	10 9c       	mov	r12,r8
80009542:	2f 9d       	sub	sp,-28
80009544:	e3 cd 80 80 	ldm	sp++,r7,pc
80009548:	00 00       	add	r0,r0
8000954a:	07 b0       	ld.ub	r0,r3[0x3]

8000954c <mci_set_bus_size>:

int mci_set_bus_size(volatile avr32_mci_t *mci,
                     uint8_t busWidth)
{
8000954c:	eb cd 40 80 	pushm	r7,lr
80009550:	1a 97       	mov	r7,sp
80009552:	20 3d       	sub	sp,12
80009554:	ef 4c ff f8 	st.w	r7[-8],r12
80009558:	16 98       	mov	r8,r11
8000955a:	ef 68 ff f4 	st.b	r7[-12],r8
  uint32_t mci_sdcr_register;

  if (busWidth > MCI_BUS_SIZE_8_BIT)
8000955e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009562:	30 38       	mov	r8,3
80009564:	f0 09 18 00 	cp.b	r9,r8
80009568:	e0 88 00 04 	brls	80009570 <mci_set_bus_size+0x24>
    return MCI_INVALID_INPUT;
8000956c:	30 18       	mov	r8,1
8000956e:	c1 b8       	rjmp	800095a4 <mci_set_bus_size+0x58>

  mci_sdcr_register = mci->sdcr;
80009570:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009574:	70 38       	ld.w	r8,r8[0xc]
80009576:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register &= ~AVR32_MCI_SDCR_SDCBUS_MASK; // Clear previous buswidth
8000957a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000957e:	e0 18 ff 3f 	andl	r8,0xff3f
80009582:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register |= (busWidth<<AVR32_MCI_SDCR_SDCBUS_OFFSET);
80009586:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000958a:	a7 68       	lsl	r8,0x6
8000958c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009590:	f3 e8 10 08 	or	r8,r9,r8
80009594:	ef 48 ff fc 	st.w	r7[-4],r8
  mci->sdcr = mci_sdcr_register;
80009598:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000959c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800095a0:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
800095a2:	30 08       	mov	r8,0
}
800095a4:	10 9c       	mov	r12,r8
800095a6:	2f dd       	sub	sp,-12
800095a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800095ac <mci_read_response>:


unsigned int mci_read_response(volatile avr32_mci_t *mci)
{
800095ac:	eb cd 40 80 	pushm	r7,lr
800095b0:	1a 97       	mov	r7,sp
800095b2:	20 1d       	sub	sp,4
800095b4:	ef 4c ff fc 	st.w	r7[-4],r12
  return mci->rspr0;
800095b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800095bc:	70 88       	ld.w	r8,r8[0x20]
}
800095be:	10 9c       	mov	r12,r8
800095c0:	2f fd       	sub	sp,-4
800095c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800095c6:	d7 03       	nop

800095c8 <mci_wait_busy_signal>:

void mci_wait_busy_signal(volatile avr32_mci_t *mci)
{
800095c8:	eb cd 40 80 	pushm	r7,lr
800095cc:	1a 97       	mov	r7,sp
800095ce:	20 2d       	sub	sp,8
800095d0:	ef 4c ff f8 	st.w	r7[-8],r12
800095d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095d8:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800095dc:	48 b8       	lddpc	r8,80009608 <mci_wait_busy_signal+0x40>
800095de:	70 08       	ld.w	r8,r8[0x0]
800095e0:	10 99       	mov	r9,r8
800095e2:	e6 19 01 e0 	andh	r9,0x1e0,COH
800095e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800095ea:	71 08       	ld.w	r8,r8[0x40]
800095ec:	f3 e8 10 08 	or	r8,r9,r8
800095f0:	10 99       	mov	r9,r8
800095f2:	48 68       	lddpc	r8,80009608 <mci_wait_busy_signal+0x40>
800095f4:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800095f6:	48 58       	lddpc	r8,80009608 <mci_wait_busy_signal+0x40>
800095f8:	70 08       	ld.w	r8,r8[0x0]
  while(!(mci_get_sr(mci)&AVR32_MCI_SR_NOTBUSY_MASK));
800095fa:	e2 18 00 20 	andl	r8,0x20,COH
800095fe:	ce b0       	breq	800095d4 <mci_wait_busy_signal+0xc>
}
80009600:	2f ed       	sub	sp,-8
80009602:	e3 cd 80 80 	ldm	sp++,r7,pc
80009606:	00 00       	add	r0,r0
80009608:	00 00       	add	r0,r0
8000960a:	07 b0       	ld.ub	r0,r3[0x3]

8000960c <mci_select_card>:

int mci_select_card(volatile avr32_mci_t *mci,
                    uint8_t card_slot,
                    uint8_t bus_width)
{
8000960c:	eb cd 40 80 	pushm	r7,lr
80009610:	1a 97       	mov	r7,sp
80009612:	20 3d       	sub	sp,12
80009614:	ef 4c ff fc 	st.w	r7[-4],r12
80009618:	16 99       	mov	r9,r11
8000961a:	14 98       	mov	r8,r10
8000961c:	ef 69 ff f8 	st.b	r7[-8],r9
80009620:	ef 68 ff f4 	st.b	r7[-12],r8
  if (card_slot > MCI_LAST_SLOTS)
80009624:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009628:	30 18       	mov	r8,1
8000962a:	f0 09 18 00 	cp.b	r9,r8
8000962e:	e0 88 00 04 	brls	80009636 <mci_select_card+0x2a>
    return MCI_INVALID_INPUT;
80009632:	30 18       	mov	r8,1
80009634:	c0 e8       	rjmp	80009650 <mci_select_card+0x44>

  // Select the card slot and bus width
  mci->sdcr = (bus_width<<AVR32_MCI_SDCR_SDCBUS_OFFSET) | (card_slot<<AVR32_MCI_SDCR_SDCSEL_OFFSET);
80009636:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000963a:	f0 09 15 06 	lsl	r9,r8,0x6
8000963e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009642:	f3 e8 10 08 	or	r8,r9,r8
80009646:	10 99       	mov	r9,r8
80009648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000964c:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
8000964e:	30 08       	mov	r8,0
}
80009650:	10 9c       	mov	r12,r8
80009652:	2f dd       	sub	sp,-12
80009654:	e3 cd 80 80 	ldm	sp++,r7,pc

80009658 <cpu_irq_is_enabled_flags>:
80009658:	eb cd 40 80 	pushm	r7,lr
8000965c:	1a 97       	mov	r7,sp
8000965e:	20 1d       	sub	sp,4
80009660:	ef 4c ff fc 	st.w	r7[-4],r12
80009664:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009668:	e6 18 00 01 	andh	r8,0x1,COH
8000966c:	5f 08       	sreq	r8
8000966e:	5c 58       	castu.b	r8
80009670:	10 9c       	mov	r12,r8
80009672:	2f fd       	sub	sp,-4
80009674:	e3 cd 80 80 	ldm	sp++,r7,pc

80009678 <tc_configure_interrupts>:
80009678:	eb cd 40 80 	pushm	r7,lr
8000967c:	1a 97       	mov	r7,sp
8000967e:	20 4d       	sub	sp,16
80009680:	ef 4c ff f8 	st.w	r7[-8],r12
80009684:	ef 4b ff f4 	st.w	r7[-12],r11
80009688:	ef 4a ff f0 	st.w	r7[-16],r10
8000968c:	e1 b8 00 00 	mfsr	r8,0x0
80009690:	10 9c       	mov	r12,r8
80009692:	f0 1f 00 73 	mcall	8000985c <tc_configure_interrupts+0x1e4>
80009696:	18 98       	mov	r8,r12
80009698:	ef 68 ff ff 	st.b	r7[-1],r8
8000969c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800096a0:	58 28       	cp.w	r8,2
800096a2:	e0 88 00 04 	brls	800096aa <tc_configure_interrupts+0x32>
800096a6:	3f f8       	mov	r8,-1
800096a8:	cd 68       	rjmp	80009854 <tc_configure_interrupts+0x1dc>
800096aa:	ee fb ff f4 	ld.w	r11,r7[-12]
800096ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096b2:	70 08       	ld.w	r8,r8[0x0]
800096b4:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800096b8:	5c 58       	castu.b	r8
800096ba:	f0 09 15 07 	lsl	r9,r8,0x7
800096be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096c2:	70 08       	ld.w	r8,r8[0x0]
800096c4:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800096c8:	5c 58       	castu.b	r8
800096ca:	a7 68       	lsl	r8,0x6
800096cc:	10 49       	or	r9,r8
800096ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096d2:	70 08       	ld.w	r8,r8[0x0]
800096d4:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800096d8:	5c 58       	castu.b	r8
800096da:	a5 78       	lsl	r8,0x5
800096dc:	10 49       	or	r9,r8
800096de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096e2:	70 08       	ld.w	r8,r8[0x0]
800096e4:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
800096e8:	5c 58       	castu.b	r8
800096ea:	a5 68       	lsl	r8,0x4
800096ec:	10 49       	or	r9,r8
800096ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096f2:	70 08       	ld.w	r8,r8[0x0]
800096f4:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800096f8:	5c 58       	castu.b	r8
800096fa:	a3 78       	lsl	r8,0x3
800096fc:	10 49       	or	r9,r8
800096fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009702:	70 08       	ld.w	r8,r8[0x0]
80009704:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80009708:	5c 58       	castu.b	r8
8000970a:	a3 68       	lsl	r8,0x2
8000970c:	10 49       	or	r9,r8
8000970e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009712:	70 08       	ld.w	r8,r8[0x0]
80009714:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80009718:	5c 58       	castu.b	r8
8000971a:	a1 78       	lsl	r8,0x1
8000971c:	10 49       	or	r9,r8
8000971e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009722:	70 08       	ld.w	r8,r8[0x0]
80009724:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009728:	5c 58       	castu.b	r8
8000972a:	f3 e8 10 08 	or	r8,r9,r8
8000972e:	10 99       	mov	r9,r8
80009730:	ee fa ff f8 	ld.w	r10,r7[-8]
80009734:	f6 08 15 06 	lsl	r8,r11,0x6
80009738:	f4 08 00 08 	add	r8,r10,r8
8000973c:	2d c8       	sub	r8,-36
8000973e:	91 09       	st.w	r8[0x0],r9
80009740:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009744:	30 08       	mov	r8,0
80009746:	f0 09 18 00 	cp.b	r9,r8
8000974a:	c0 20       	breq	8000974e <tc_configure_interrupts+0xd6>
8000974c:	d3 03       	ssrf	0x10
8000974e:	ee fb ff f4 	ld.w	r11,r7[-12]
80009752:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009756:	70 08       	ld.w	r8,r8[0x0]
80009758:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
8000975c:	5c 58       	castu.b	r8
8000975e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009762:	c0 41       	brne	8000976a <tc_configure_interrupts+0xf2>
80009764:	e0 69 00 80 	mov	r9,128
80009768:	c0 28       	rjmp	8000976c <tc_configure_interrupts+0xf4>
8000976a:	30 09       	mov	r9,0
8000976c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009770:	70 08       	ld.w	r8,r8[0x0]
80009772:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80009776:	5c 58       	castu.b	r8
80009778:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000977c:	c0 31       	brne	80009782 <tc_configure_interrupts+0x10a>
8000977e:	34 08       	mov	r8,64
80009780:	c0 28       	rjmp	80009784 <tc_configure_interrupts+0x10c>
80009782:	30 08       	mov	r8,0
80009784:	10 49       	or	r9,r8
80009786:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000978a:	70 08       	ld.w	r8,r8[0x0]
8000978c:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80009790:	5c 58       	castu.b	r8
80009792:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009796:	c0 31       	brne	8000979c <tc_configure_interrupts+0x124>
80009798:	32 08       	mov	r8,32
8000979a:	c0 28       	rjmp	8000979e <tc_configure_interrupts+0x126>
8000979c:	30 08       	mov	r8,0
8000979e:	10 49       	or	r9,r8
800097a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800097a4:	70 08       	ld.w	r8,r8[0x0]
800097a6:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
800097aa:	5c 58       	castu.b	r8
800097ac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800097b0:	c0 31       	brne	800097b6 <tc_configure_interrupts+0x13e>
800097b2:	31 08       	mov	r8,16
800097b4:	c0 28       	rjmp	800097b8 <tc_configure_interrupts+0x140>
800097b6:	30 08       	mov	r8,0
800097b8:	10 49       	or	r9,r8
800097ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800097be:	70 08       	ld.w	r8,r8[0x0]
800097c0:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800097c4:	5c 58       	castu.b	r8
800097c6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800097ca:	c0 31       	brne	800097d0 <tc_configure_interrupts+0x158>
800097cc:	30 88       	mov	r8,8
800097ce:	c0 28       	rjmp	800097d2 <tc_configure_interrupts+0x15a>
800097d0:	30 08       	mov	r8,0
800097d2:	10 49       	or	r9,r8
800097d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800097d8:	70 08       	ld.w	r8,r8[0x0]
800097da:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800097de:	5c 58       	castu.b	r8
800097e0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800097e4:	c0 31       	brne	800097ea <tc_configure_interrupts+0x172>
800097e6:	30 48       	mov	r8,4
800097e8:	c0 28       	rjmp	800097ec <tc_configure_interrupts+0x174>
800097ea:	30 08       	mov	r8,0
800097ec:	10 49       	or	r9,r8
800097ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800097f2:	70 08       	ld.w	r8,r8[0x0]
800097f4:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800097f8:	5c 58       	castu.b	r8
800097fa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800097fe:	c0 31       	brne	80009804 <tc_configure_interrupts+0x18c>
80009800:	30 28       	mov	r8,2
80009802:	c0 28       	rjmp	80009806 <tc_configure_interrupts+0x18e>
80009804:	30 08       	mov	r8,0
80009806:	10 49       	or	r9,r8
80009808:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000980c:	70 08       	ld.w	r8,r8[0x0]
8000980e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009812:	5c 58       	castu.b	r8
80009814:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009818:	5f 08       	sreq	r8
8000981a:	f3 e8 10 08 	or	r8,r9,r8
8000981e:	10 99       	mov	r9,r8
80009820:	ee fa ff f8 	ld.w	r10,r7[-8]
80009824:	f6 08 15 06 	lsl	r8,r11,0x6
80009828:	f4 08 00 08 	add	r8,r10,r8
8000982c:	2d 88       	sub	r8,-40
8000982e:	91 09       	st.w	r8[0x0],r9
80009830:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009834:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009838:	a1 78       	lsl	r8,0x1
8000983a:	2f f8       	sub	r8,-1
8000983c:	a5 78       	lsl	r8,0x5
8000983e:	f2 08 00 08 	add	r8,r9,r8
80009842:	70 08       	ld.w	r8,r8[0x0]
80009844:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009848:	30 08       	mov	r8,0
8000984a:	f0 09 18 00 	cp.b	r9,r8
8000984e:	c0 20       	breq	80009852 <tc_configure_interrupts+0x1da>
80009850:	d5 03       	csrf	0x10
80009852:	30 08       	mov	r8,0
80009854:	10 9c       	mov	r12,r8
80009856:	2f cd       	sub	sp,-16
80009858:	e3 cd 80 80 	ldm	sp++,r7,pc
8000985c:	80 00       	ld.sh	r0,r0[0x0]
8000985e:	96 58       	ld.sh	r8,r11[0xa]

80009860 <tc_init_waveform>:
80009860:	eb cd 40 80 	pushm	r7,lr
80009864:	1a 97       	mov	r7,sp
80009866:	20 2d       	sub	sp,8
80009868:	ef 4c ff fc 	st.w	r7[-4],r12
8000986c:	ef 4b ff f8 	st.w	r7[-8],r11
80009870:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009874:	70 08       	ld.w	r8,r8[0x0]
80009876:	58 28       	cp.w	r8,2
80009878:	e0 88 00 04 	brls	80009880 <tc_init_waveform+0x20>
8000987c:	3f f8       	mov	r8,-1
8000987e:	c9 78       	rjmp	800099ac <tc_init_waveform+0x14c>
80009880:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009884:	70 09       	ld.w	r9,r8[0x0]
80009886:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000988a:	70 18       	ld.w	r8,r8[0x4]
8000988c:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
80009890:	5c 58       	castu.b	r8
80009892:	f0 0a 15 1e 	lsl	r10,r8,0x1e
80009896:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000989a:	70 18       	ld.w	r8,r8[0x4]
8000989c:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
800098a0:	5c 58       	castu.b	r8
800098a2:	bd 68       	lsl	r8,0x1c
800098a4:	10 4a       	or	r10,r8
800098a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098aa:	70 18       	ld.w	r8,r8[0x4]
800098ac:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
800098b0:	5c 58       	castu.b	r8
800098b2:	bb 68       	lsl	r8,0x1a
800098b4:	10 4a       	or	r10,r8
800098b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098ba:	70 18       	ld.w	r8,r8[0x4]
800098bc:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
800098c0:	5c 58       	castu.b	r8
800098c2:	b9 68       	lsl	r8,0x18
800098c4:	10 4a       	or	r10,r8
800098c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098ca:	70 18       	ld.w	r8,r8[0x4]
800098cc:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
800098d0:	5c 58       	castu.b	r8
800098d2:	b7 68       	lsl	r8,0x16
800098d4:	10 4a       	or	r10,r8
800098d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098da:	70 18       	ld.w	r8,r8[0x4]
800098dc:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
800098e0:	5c 58       	castu.b	r8
800098e2:	b5 68       	lsl	r8,0x14
800098e4:	10 4a       	or	r10,r8
800098e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098ea:	70 18       	ld.w	r8,r8[0x4]
800098ec:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
800098f0:	5c 58       	castu.b	r8
800098f2:	b3 68       	lsl	r8,0x12
800098f4:	10 4a       	or	r10,r8
800098f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098fa:	70 18       	ld.w	r8,r8[0x4]
800098fc:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80009900:	5c 58       	castu.b	r8
80009902:	b1 68       	lsl	r8,0x10
80009904:	f5 e8 10 08 	or	r8,r10,r8
80009908:	10 9a       	mov	r10,r8
8000990a:	af ba       	sbr	r10,0xf
8000990c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009910:	70 18       	ld.w	r8,r8[0x4]
80009912:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
80009916:	5c 58       	castu.b	r8
80009918:	ad 78       	lsl	r8,0xd
8000991a:	10 4a       	or	r10,r8
8000991c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009920:	70 18       	ld.w	r8,r8[0x4]
80009922:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
80009926:	5c 58       	castu.b	r8
80009928:	ad 68       	lsl	r8,0xc
8000992a:	10 4a       	or	r10,r8
8000992c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009930:	70 18       	ld.w	r8,r8[0x4]
80009932:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
80009936:	5c 58       	castu.b	r8
80009938:	ab 68       	lsl	r8,0xa
8000993a:	10 4a       	or	r10,r8
8000993c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009940:	70 18       	ld.w	r8,r8[0x4]
80009942:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
80009946:	5c 58       	castu.b	r8
80009948:	a9 68       	lsl	r8,0x8
8000994a:	10 4a       	or	r10,r8
8000994c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009950:	70 18       	ld.w	r8,r8[0x4]
80009952:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80009956:	5c 58       	castu.b	r8
80009958:	a7 78       	lsl	r8,0x7
8000995a:	10 4a       	or	r10,r8
8000995c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009960:	70 18       	ld.w	r8,r8[0x4]
80009962:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80009966:	5c 58       	castu.b	r8
80009968:	a7 68       	lsl	r8,0x6
8000996a:	10 4a       	or	r10,r8
8000996c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009970:	70 18       	ld.w	r8,r8[0x4]
80009972:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
80009976:	5c 58       	castu.b	r8
80009978:	a5 68       	lsl	r8,0x4
8000997a:	10 4a       	or	r10,r8
8000997c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009980:	70 18       	ld.w	r8,r8[0x4]
80009982:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80009986:	5c 58       	castu.b	r8
80009988:	a3 78       	lsl	r8,0x3
8000998a:	10 4a       	or	r10,r8
8000998c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009990:	70 18       	ld.w	r8,r8[0x4]
80009992:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80009996:	5c 58       	castu.b	r8
80009998:	f5 e8 10 08 	or	r8,r10,r8
8000999c:	10 9a       	mov	r10,r8
8000999e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800099a2:	a5 69       	lsl	r9,0x4
800099a4:	2f f9       	sub	r9,-1
800099a6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800099aa:	30 08       	mov	r8,0
800099ac:	10 9c       	mov	r12,r8
800099ae:	2f ed       	sub	sp,-8
800099b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800099b4 <tc_start>:
800099b4:	eb cd 40 80 	pushm	r7,lr
800099b8:	1a 97       	mov	r7,sp
800099ba:	20 2d       	sub	sp,8
800099bc:	ef 4c ff fc 	st.w	r7[-4],r12
800099c0:	ef 4b ff f8 	st.w	r7[-8],r11
800099c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800099c8:	58 28       	cp.w	r8,2
800099ca:	e0 88 00 04 	brls	800099d2 <tc_start+0x1e>
800099ce:	3f f8       	mov	r8,-1
800099d0:	c0 b8       	rjmp	800099e6 <tc_start+0x32>
800099d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800099d6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800099da:	a7 68       	lsl	r8,0x6
800099dc:	f2 08 00 08 	add	r8,r9,r8
800099e0:	30 59       	mov	r9,5
800099e2:	91 09       	st.w	r8[0x0],r9
800099e4:	30 08       	mov	r8,0
800099e6:	10 9c       	mov	r12,r8
800099e8:	2f ed       	sub	sp,-8
800099ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800099ee <tc_read_sr>:
800099ee:	eb cd 40 80 	pushm	r7,lr
800099f2:	1a 97       	mov	r7,sp
800099f4:	20 2d       	sub	sp,8
800099f6:	ef 4c ff fc 	st.w	r7[-4],r12
800099fa:	ef 4b ff f8 	st.w	r7[-8],r11
800099fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a02:	58 28       	cp.w	r8,2
80009a04:	e0 88 00 04 	brls	80009a0c <tc_read_sr+0x1e>
80009a08:	3f f8       	mov	r8,-1
80009a0a:	c0 b8       	rjmp	80009a20 <tc_read_sr+0x32>
80009a0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a10:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009a14:	a1 78       	lsl	r8,0x1
80009a16:	2f f8       	sub	r8,-1
80009a18:	a5 78       	lsl	r8,0x5
80009a1a:	f2 08 00 08 	add	r8,r9,r8
80009a1e:	70 08       	ld.w	r8,r8[0x0]
80009a20:	10 9c       	mov	r12,r8
80009a22:	2f ed       	sub	sp,-8
80009a24:	e3 cd 80 80 	ldm	sp++,r7,pc

80009a28 <tc_write_rc>:
80009a28:	eb cd 40 80 	pushm	r7,lr
80009a2c:	1a 97       	mov	r7,sp
80009a2e:	20 3d       	sub	sp,12
80009a30:	ef 4c ff fc 	st.w	r7[-4],r12
80009a34:	ef 4b ff f8 	st.w	r7[-8],r11
80009a38:	14 98       	mov	r8,r10
80009a3a:	ef 58 ff f4 	st.h	r7[-12],r8
80009a3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a42:	58 28       	cp.w	r8,2
80009a44:	e0 88 00 04 	brls	80009a4c <tc_write_rc+0x24>
80009a48:	3f f8       	mov	r8,-1
80009a4a:	c2 78       	rjmp	80009a98 <tc_write_rc+0x70>
80009a4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009a50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a54:	a5 69       	lsl	r9,0x4
80009a56:	2f f9       	sub	r9,-1
80009a58:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80009a5c:	e2 18 80 00 	andl	r8,0x8000,COH
80009a60:	c1 a0       	breq	80009a94 <tc_write_rc+0x6c>
80009a62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009a6a:	ee fa ff fc 	ld.w	r10,r7[-4]
80009a6e:	a7 69       	lsl	r9,0x6
80009a70:	f4 09 00 09 	add	r9,r10,r9
80009a74:	2e 49       	sub	r9,-28
80009a76:	72 09       	ld.w	r9,r9[0x0]
80009a78:	12 9a       	mov	r10,r9
80009a7a:	e0 1a 00 00 	andl	r10,0x0
80009a7e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80009a82:	f5 e9 10 09 	or	r9,r10,r9
80009a86:	ee fa ff fc 	ld.w	r10,r7[-4]
80009a8a:	a7 68       	lsl	r8,0x6
80009a8c:	f4 08 00 08 	add	r8,r10,r8
80009a90:	2e 48       	sub	r8,-28
80009a92:	91 09       	st.w	r8[0x0],r9
80009a94:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80009a98:	10 9c       	mov	r12,r8
80009a9a:	2f dd       	sub	sp,-12
80009a9c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009aa0 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80009aa0:	eb cd 40 80 	pushm	r7,lr
80009aa4:	1a 97       	mov	r7,sp
80009aa6:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80009aa8:	e1 b8 00 00 	mfsr	r8,0x0
80009aac:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80009ab0:	d3 03       	ssrf	0x10

	return flags;
80009ab2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80009ab6:	10 9c       	mov	r12,r8
80009ab8:	2f fd       	sub	sp,-4
80009aba:	e3 cd 80 80 	ldm	sp++,r7,pc

80009abe <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
80009abe:	eb cd 40 80 	pushm	r7,lr
80009ac2:	1a 97       	mov	r7,sp
80009ac4:	20 1d       	sub	sp,4
80009ac6:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80009aca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009ace:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80009ad2:	2f fd       	sub	sp,-4
80009ad4:	e3 cd 80 80 	ldm	sp++,r7,pc

80009ad8 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
80009ad8:	eb cd 40 80 	pushm	r7,lr
80009adc:	1a 97       	mov	r7,sp
80009ade:	20 2d       	sub	sp,8
80009ae0:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
80009ae4:	f0 1f 00 0b 	mcall	80009b10 <sleepmgr_lock_mode+0x38>
80009ae8:	18 98       	mov	r8,r12
80009aea:	ef 48 ff fc 	st.w	r7[-4],r8

	++sleepmgr_locks[mode];
80009aee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009af2:	48 99       	lddpc	r9,80009b14 <sleepmgr_lock_mode+0x3c>
80009af4:	f2 08 07 09 	ld.ub	r9,r9[r8]
80009af8:	2f f9       	sub	r9,-1
80009afa:	5c 59       	castu.b	r9
80009afc:	48 6a       	lddpc	r10,80009b14 <sleepmgr_lock_mode+0x3c>
80009afe:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
80009b02:	ee fc ff fc 	ld.w	r12,r7[-4]
80009b06:	f0 1f 00 05 	mcall	80009b18 <sleepmgr_lock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
80009b0a:	2f ed       	sub	sp,-8
80009b0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009b10:	80 00       	ld.sh	r0,r0[0x0]
80009b12:	9a a0       	ld.uh	r0,sp[0x4]
80009b14:	00 00       	add	r0,r0
80009b16:	10 20       	rsub	r0,r8
80009b18:	80 00       	ld.sh	r0,r0[0x0]
80009b1a:	9a be       	ld.uh	lr,sp[0x6]

80009b1c <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
80009b1c:	eb cd 40 80 	pushm	r7,lr
80009b20:	1a 97       	mov	r7,sp
80009b22:	20 2d       	sub	sp,8
80009b24:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();
80009b28:	f0 1f 00 0b 	mcall	80009b54 <sleepmgr_unlock_mode+0x38>
80009b2c:	18 98       	mov	r8,r12
80009b2e:	ef 48 ff fc 	st.w	r7[-4],r8

	--sleepmgr_locks[mode];
80009b32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b36:	48 99       	lddpc	r9,80009b58 <sleepmgr_unlock_mode+0x3c>
80009b38:	f2 08 07 09 	ld.ub	r9,r9[r8]
80009b3c:	20 19       	sub	r9,1
80009b3e:	5c 59       	castu.b	r9
80009b40:	48 6a       	lddpc	r10,80009b58 <sleepmgr_unlock_mode+0x3c>
80009b42:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
80009b46:	ee fc ff fc 	ld.w	r12,r7[-4]
80009b4a:	f0 1f 00 05 	mcall	80009b5c <sleepmgr_unlock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
80009b4e:	2f ed       	sub	sp,-8
80009b50:	e3 cd 80 80 	ldm	sp++,r7,pc
80009b54:	80 00       	ld.sh	r0,r0[0x0]
80009b56:	9a a0       	ld.uh	r0,sp[0x4]
80009b58:	00 00       	add	r0,r0
80009b5a:	10 20       	rsub	r0,r8
80009b5c:	80 00       	ld.sh	r0,r0[0x0]
80009b5e:	9a be       	ld.uh	lr,sp[0x6]

80009b60 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
80009b60:	eb cd 40 80 	pushm	r7,lr
80009b64:	1a 97       	mov	r7,sp
80009b66:	20 1d       	sub	sp,4
80009b68:	18 98       	mov	r8,r12
80009b6a:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!b_idle && udd_b_idle) {
80009b6e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009b72:	ec 18 00 01 	eorl	r8,0x1
80009b76:	5c 58       	castu.b	r8
80009b78:	c0 80       	breq	80009b88 <udd_sleep_mode+0x28>
80009b7a:	48 f8       	lddpc	r8,80009bb4 <udd_sleep_mode+0x54>
80009b7c:	11 88       	ld.ub	r8,r8[0x0]
80009b7e:	58 08       	cp.w	r8,0
80009b80:	c0 40       	breq	80009b88 <udd_sleep_mode+0x28>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
80009b82:	30 1c       	mov	r12,1
80009b84:	f0 1f 00 0d 	mcall	80009bb8 <udd_sleep_mode+0x58>
	}
	if (b_idle && !udd_b_idle) {
80009b88:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009b8c:	30 08       	mov	r8,0
80009b8e:	f0 09 18 00 	cp.b	r9,r8
80009b92:	c0 a0       	breq	80009ba6 <udd_sleep_mode+0x46>
80009b94:	48 88       	lddpc	r8,80009bb4 <udd_sleep_mode+0x54>
80009b96:	11 88       	ld.ub	r8,r8[0x0]
80009b98:	ec 18 00 01 	eorl	r8,0x1
80009b9c:	5c 58       	castu.b	r8
80009b9e:	c0 40       	breq	80009ba6 <udd_sleep_mode+0x46>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
80009ba0:	30 1c       	mov	r12,1
80009ba2:	f0 1f 00 07 	mcall	80009bbc <udd_sleep_mode+0x5c>
	}
	udd_b_idle = b_idle;
80009ba6:	48 49       	lddpc	r9,80009bb4 <udd_sleep_mode+0x54>
80009ba8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009bac:	b2 88       	st.b	r9[0x0],r8
}
80009bae:	2f fd       	sub	sp,-4
80009bb0:	e3 cd 80 80 	ldm	sp++,r7,pc
80009bb4:	00 00       	add	r0,r0
80009bb6:	07 b4       	ld.ub	r4,r3[0x3]
80009bb8:	80 00       	ld.sh	r0,r0[0x0]
80009bba:	9b 1c       	st.w	sp[0x4],r12
80009bbc:	80 00       	ld.sh	r0,r0[0x0]
80009bbe:	9a d8       	ld.uh	r8,sp[0xa]

80009bc0 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
80009bc0:	eb cd 40 80 	pushm	r7,lr
80009bc4:	1a 97       	mov	r7,sp
	if (Is_udd_sof()) {
80009bc6:	fe 68 00 04 	mov	r8,-131068
80009bca:	70 08       	ld.w	r8,r8[0x0]
80009bcc:	e2 18 00 04 	andl	r8,0x4,COH
80009bd0:	c1 10       	breq	80009bf2 <udd_interrupt+0x32>
		udd_ack_sof();
80009bd2:	fe 68 00 08 	mov	r8,-131064
80009bd6:	30 49       	mov	r9,4
80009bd8:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
80009bda:	fe 68 08 04 	mov	r8,-129020
80009bde:	70 08       	ld.w	r8,r8[0x0]
80009be0:	e2 18 30 00 	andl	r8,0x3000,COH
80009be4:	ad 88       	lsr	r8,0xc
80009be6:	c0 31       	brne	80009bec <udd_interrupt+0x2c>
			udc_sof_notify();
80009be8:	f0 1f 00 54 	mcall	80009d38 <udd_interrupt+0x178>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
80009bec:	f0 1f 00 54 	mcall	80009d3c <udd_interrupt+0x17c>
#endif
		goto udd_interrupt_end;
80009bf0:	c9 d8       	rjmp	80009d2a <udd_interrupt+0x16a>
	}
	if (Is_udd_msof()) {
80009bf2:	fe 68 00 04 	mov	r8,-131068
80009bf6:	70 08       	ld.w	r8,r8[0x0]
80009bf8:	e2 18 00 02 	andl	r8,0x2,COH
80009bfc:	c0 80       	breq	80009c0c <udd_interrupt+0x4c>
		udd_ack_msof();
80009bfe:	fe 68 00 08 	mov	r8,-131064
80009c02:	30 29       	mov	r9,2
80009c04:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80009c06:	f0 1f 00 4d 	mcall	80009d38 <udd_interrupt+0x178>
		goto udd_interrupt_end;
80009c0a:	c9 08       	rjmp	80009d2a <udd_interrupt+0x16a>
	}

	if (udd_ctrl_interrupt())
80009c0c:	f0 1f 00 4d 	mcall	80009d40 <udd_interrupt+0x180>
80009c10:	18 98       	mov	r8,r12
80009c12:	58 08       	cp.w	r8,0
80009c14:	e0 81 00 88 	brne	80009d24 <udd_interrupt+0x164>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
80009c18:	f0 1f 00 4b 	mcall	80009d44 <udd_interrupt+0x184>
80009c1c:	18 98       	mov	r8,r12
80009c1e:	58 08       	cp.w	r8,0
80009c20:	e0 81 00 84 	brne	80009d28 <udd_interrupt+0x168>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80009c24:	fe 68 00 04 	mov	r8,-131068
80009c28:	70 08       	ld.w	r8,r8[0x0]
80009c2a:	e2 18 00 08 	andl	r8,0x8,COH
80009c2e:	c0 e0       	breq	80009c4a <udd_interrupt+0x8a>
		udd_ack_reset();
80009c30:	fe 68 00 08 	mov	r8,-131064
80009c34:	30 89       	mov	r9,8
80009c36:	91 09       	st.w	r8[0x0],r9
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
80009c38:	f0 1f 00 44 	mcall	80009d48 <udd_interrupt+0x188>
#endif
		// Reset USB Device Stack Core
		udc_reset();
80009c3c:	f0 1f 00 44 	mcall	80009d4c <udd_interrupt+0x18c>
		// Reset endpoint control
		udd_reset_ep_ctrl();
80009c40:	f0 1f 00 44 	mcall	80009d50 <udd_interrupt+0x190>
		// Reset endpoint control management
		udd_ctrl_init();
80009c44:	f0 1f 00 44 	mcall	80009d54 <udd_interrupt+0x194>
		goto udd_interrupt_end;
80009c48:	c7 18       	rjmp	80009d2a <udd_interrupt+0x16a>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80009c4a:	fe 68 00 10 	mov	r8,-131056
80009c4e:	70 08       	ld.w	r8,r8[0x0]
80009c50:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009c54:	5c 58       	castu.b	r8
80009c56:	c2 40       	breq	80009c9e <udd_interrupt+0xde>
80009c58:	fe 68 00 04 	mov	r8,-131068
80009c5c:	70 08       	ld.w	r8,r8[0x0]
80009c5e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009c62:	5c 58       	castu.b	r8
80009c64:	c1 d0       	breq	80009c9e <udd_interrupt+0xde>
		otg_unfreeze_clock();
80009c66:	fe 68 08 00 	mov	r8,-129024
80009c6a:	fe 69 08 00 	mov	r9,-129024
80009c6e:	72 09       	ld.w	r9,r9[0x0]
80009c70:	af c9       	cbr	r9,0xe
80009c72:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80009c74:	fe 68 00 14 	mov	r8,-131052
80009c78:	30 19       	mov	r9,1
80009c7a:	91 09       	st.w	r8[0x0],r9
		udd_enable_wake_up_interrupt();
80009c7c:	fe 68 00 18 	mov	r8,-131048
80009c80:	31 09       	mov	r9,16
80009c82:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
80009c84:	fe 68 08 00 	mov	r8,-129024
80009c88:	fe 69 08 00 	mov	r9,-129024
80009c8c:	72 09       	ld.w	r9,r9[0x0]
80009c8e:	af a9       	sbr	r9,0xe
80009c90:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80009c92:	30 0c       	mov	r12,0
80009c94:	f0 1f 00 31 	mcall	80009d58 <udd_interrupt+0x198>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
80009c98:	f0 1f 00 31 	mcall	80009d5c <udd_interrupt+0x19c>
#endif
		goto udd_interrupt_end;
80009c9c:	c4 78       	rjmp	80009d2a <udd_interrupt+0x16a>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80009c9e:	fe 68 00 10 	mov	r8,-131056
80009ca2:	70 08       	ld.w	r8,r8[0x0]
80009ca4:	e2 18 00 10 	andl	r8,0x10,COH
80009ca8:	c1 c0       	breq	80009ce0 <udd_interrupt+0x120>
80009caa:	fe 68 00 04 	mov	r8,-131068
80009cae:	70 08       	ld.w	r8,r8[0x0]
80009cb0:	e2 18 00 10 	andl	r8,0x10,COH
80009cb4:	c1 60       	breq	80009ce0 <udd_interrupt+0x120>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80009cb6:	fe 68 08 00 	mov	r8,-129024
80009cba:	fe 69 08 00 	mov	r9,-129024
80009cbe:	72 09       	ld.w	r9,r9[0x0]
80009cc0:	af c9       	cbr	r9,0xe
80009cc2:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80009cc4:	fe 68 00 14 	mov	r8,-131052
80009cc8:	31 09       	mov	r9,16
80009cca:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
80009ccc:	fe 68 00 18 	mov	r8,-131048
80009cd0:	30 19       	mov	r9,1
80009cd2:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(true); // Enter in IDLE mode
80009cd4:	30 1c       	mov	r12,1
80009cd6:	f0 1f 00 21 	mcall	80009d58 <udd_interrupt+0x198>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
80009cda:	f0 1f 00 22 	mcall	80009d60 <udd_interrupt+0x1a0>
#endif
		goto udd_interrupt_end;
80009cde:	c2 68       	rjmp	80009d2a <udd_interrupt+0x16a>
	}

	if (Is_otg_vbus_transition()) {
80009ce0:	fe 68 08 04 	mov	r8,-129020
80009ce4:	70 08       	ld.w	r8,r8[0x0]
80009ce6:	e2 18 00 02 	andl	r8,0x2,COH
80009cea:	c2 00       	breq	80009d2a <udd_interrupt+0x16a>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
80009cec:	fe 68 08 00 	mov	r8,-129024
80009cf0:	fe 69 08 00 	mov	r9,-129024
80009cf4:	72 09       	ld.w	r9,r9[0x0]
80009cf6:	af c9       	cbr	r9,0xe
80009cf8:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80009cfa:	fe 68 08 08 	mov	r8,-129016
80009cfe:	30 29       	mov	r9,2
80009d00:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock();
80009d02:	fe 68 08 00 	mov	r8,-129024
80009d06:	fe 69 08 00 	mov	r9,-129024
80009d0a:	72 09       	ld.w	r9,r9[0x0]
80009d0c:	af a9       	sbr	r9,0xe
80009d0e:	91 09       	st.w	r8[0x0],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
80009d10:	fe 68 08 04 	mov	r8,-129020
80009d14:	70 08       	ld.w	r8,r8[0x0]
80009d16:	e2 18 08 00 	andl	r8,0x800,COH
80009d1a:	5f 18       	srne	r8
80009d1c:	10 9c       	mov	r12,r8
80009d1e:	f0 1f 00 12 	mcall	80009d64 <udd_interrupt+0x1a4>
80009d22:	c0 48       	rjmp	80009d2a <udd_interrupt+0x16a>
		udc_sof_notify();
		goto udd_interrupt_end;
	}

	if (udd_ctrl_interrupt())
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
80009d24:	d7 03       	nop
80009d26:	c0 28       	rjmp	80009d2a <udd_interrupt+0x16a>

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
80009d28:	d7 03       	nop
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80009d2a:	fe 68 00 00 	mov	r8,-131072
80009d2e:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80009d32:	e3 cd 40 80 	ldm	sp++,r7,lr
80009d36:	d6 03       	rete
80009d38:	80 00       	ld.sh	r0,r0[0x0]
80009d3a:	d5 dc       	*unknown*
80009d3c:	80 00       	ld.sh	r0,r0[0x0]
80009d3e:	e4 24 80 00 	sub	r4,294912
80009d42:	b2 b4       	st.b	r9[0x3],r4
80009d44:	80 00       	ld.sh	r0,r0[0x0]
80009d46:	b7 68       	lsl	r8,0x16
80009d48:	80 00       	ld.sh	r0,r0[0x0]
80009d4a:	b3 e8       	*unknown*
80009d4c:	80 00       	ld.sh	r0,r0[0x0]
80009d4e:	d5 78       	*unknown*
80009d50:	80 00       	ld.sh	r0,r0[0x0]
80009d52:	ab 34       	mul	r4,r5
80009d54:	80 00       	ld.sh	r0,r0[0x0]
80009d56:	ac 18       	st.h	r6[0x2],r8
80009d58:	80 00       	ld.sh	r0,r0[0x0]
80009d5a:	9b 60       	st.w	sp[0x18],r0
80009d5c:	80 00       	ld.sh	r0,r0[0x0]
80009d5e:	e3 fc 80 00 	ld.wls	r12,r1[0x0]
80009d62:	e4 10 80 00 	andh	r0,0x8000
80009d66:	e3 c8 eb cd 	ldm	r8++,r0,r2-r3,r6-r9,r11,sp-pc

80009d68 <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
80009d68:	eb cd 40 80 	pushm	r7,lr
80009d6c:	1a 97       	mov	r7,sp
	return true;
80009d6e:	30 18       	mov	r8,1
}
80009d70:	10 9c       	mov	r12,r8
80009d72:	e3 cd 80 80 	ldm	sp++,r7,pc
80009d76:	d7 03       	nop

80009d78 <udd_enable>:


void udd_enable(void)
{
80009d78:	eb cd 40 80 	pushm	r7,lr
80009d7c:	1a 97       	mov	r7,sp
80009d7e:	20 2d       	sub	sp,8
	irqflags_t flags;

	flags = cpu_irq_save();
80009d80:	f0 1f 00 3e 	mcall	80009e78 <udd_enable+0x100>
80009d84:	18 98       	mov	r8,r12
80009d86:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
80009d8a:	f0 1f 00 3d 	mcall	80009e7c <udd_enable+0x104>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
80009d8e:	30 0a       	mov	r10,0
80009d90:	e0 6b 02 20 	mov	r11,544
80009d94:	4b bc       	lddpc	r12,80009e80 <udd_enable+0x108>
80009d96:	f0 1f 00 3c 	mcall	80009e84 <udd_enable+0x10c>
80009d9a:	30 18       	mov	r8,1
80009d9c:	ef 48 ff fc 	st.w	r7[-4],r8
#if defined (__GNUC__)
__attribute__((__always_inline__))
#endif
static inline void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80009da0:	fe 78 0c 00 	mov	r8,-62464
80009da4:	fe 79 0c 00 	mov	r9,-62464
80009da8:	f2 fa 01 44 	ld.w	r10,r9[324]
80009dac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009db0:	f5 e9 10 09 	or	r9,r10,r9
80009db4:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
80009db8:	fe 68 08 00 	mov	r8,-129024
80009dbc:	fe 69 08 00 	mov	r9,-129024
80009dc0:	72 09       	ld.w	r9,r9[0x0]
80009dc2:	b9 c9       	cbr	r9,0x18
80009dc4:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
80009dc6:	fe 68 08 00 	mov	r8,-129024
80009dca:	fe 69 08 00 	mov	r9,-129024
80009dce:	72 09       	ld.w	r9,r9[0x0]
80009dd0:	b9 b9       	sbr	r9,0x19
80009dd2:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80009dd4:	fe 68 08 00 	mov	r8,-129024
80009dd8:	fe 69 08 00 	mov	r9,-129024
80009ddc:	72 09       	ld.w	r9,r9[0x0]
80009dde:	ad a9       	sbr	r9,0xc
80009de0:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80009de2:	fe 68 08 00 	mov	r8,-129024
80009de6:	fe 69 08 00 	mov	r9,-129024
80009dea:	72 09       	ld.w	r9,r9[0x0]
80009dec:	af b9       	sbr	r9,0xf
80009dee:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80009df0:	fe 68 08 00 	mov	r8,-129024
80009df4:	fe 69 08 00 	mov	r9,-129024
80009df8:	72 09       	ld.w	r9,r9[0x0]
80009dfa:	af c9       	cbr	r9,0xe
80009dfc:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
80009dfe:	fe 68 08 00 	mov	r8,-129024
80009e02:	70 08       	ld.w	r8,r8[0x0]

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
80009e04:	f0 1f 00 21 	mcall	80009e88 <udd_enable+0x110>

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80009e08:	fe 68 00 00 	mov	r8,-131072
80009e0c:	fe 69 00 00 	mov	r9,-131072
80009e10:	72 09       	ld.w	r9,r9[0x0]
80009e12:	ad c9       	cbr	r9,0xc
80009e14:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
80009e16:	fe 68 00 00 	mov	r8,-131072
80009e1a:	fe 69 00 00 	mov	r9,-131072
80009e1e:	72 09       	ld.w	r9,r9[0x0]
80009e20:	e0 19 f3 ff 	andl	r9,0xf3ff
80009e24:	91 09       	st.w	r8[0x0],r9
#  else
	udd_high_speed_disable();
#  endif
#endif
	otg_ack_vbus_transition();
80009e26:	fe 68 08 08 	mov	r8,-129016
80009e2a:	30 29       	mov	r9,2
80009e2c:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80009e2e:	fe 68 08 04 	mov	r8,-129020
80009e32:	70 08       	ld.w	r8,r8[0x0]
80009e34:	e2 18 08 00 	andl	r8,0x800,COH
80009e38:	c0 50       	breq	80009e42 <udd_enable+0xca>
		otg_raise_vbus_transition();
80009e3a:	fe 68 08 0c 	mov	r8,-129012
80009e3e:	30 29       	mov	r9,2
80009e40:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80009e42:	fe 68 08 00 	mov	r8,-129024
80009e46:	fe 69 08 00 	mov	r9,-129024
80009e4a:	72 09       	ld.w	r9,r9[0x0]
80009e4c:	a1 b9       	sbr	r9,0x1
80009e4e:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80009e50:	fe 68 08 00 	mov	r8,-129024
80009e54:	fe 69 08 00 	mov	r9,-129024
80009e58:	72 09       	ld.w	r9,r9[0x0]
80009e5a:	af a9       	sbr	r9,0xe
80009e5c:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80009e5e:	48 c9       	lddpc	r9,80009e8c <udd_enable+0x114>
80009e60:	30 08       	mov	r8,0
80009e62:	b2 88       	st.b	r9[0x0],r8
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
80009e64:	30 3c       	mov	r12,3
80009e66:	f0 1f 00 0b 	mcall	80009e90 <udd_enable+0x118>
#endif

	cpu_irq_restore(flags);
80009e6a:	ee fc ff f8 	ld.w	r12,r7[-8]
80009e6e:	f0 1f 00 0a 	mcall	80009e94 <udd_enable+0x11c>
}
80009e72:	2f ed       	sub	sp,-8
80009e74:	e3 cd 80 80 	ldm	sp++,r7,pc
80009e78:	80 00       	ld.sh	r0,r0[0x0]
80009e7a:	9a a0       	ld.uh	r0,sp[0x4]
80009e7c:	80 00       	ld.sh	r0,r0[0x0]
80009e7e:	c1 38       	rjmp	80009ea4 <udd_attach+0xc>
80009e80:	80 00       	ld.sh	r0,r0[0x0]
80009e82:	9b c0       	st.w	sp[0x30],r0
80009e84:	80 00       	ld.sh	r0,r0[0x0]
80009e86:	91 38       	st.w	r8[0xc],r8
80009e88:	80 00       	ld.sh	r0,r0[0x0]
80009e8a:	b3 7c       	lsl	r12,0x13
80009e8c:	00 00       	add	r0,r0
80009e8e:	07 b4       	ld.ub	r4,r3[0x3]
80009e90:	80 00       	ld.sh	r0,r0[0x0]
80009e92:	9a d8       	ld.uh	r8,sp[0xa]
80009e94:	80 00       	ld.sh	r0,r0[0x0]
80009e96:	9a be       	ld.uh	lr,sp[0x6]

80009e98 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80009e98:	eb cd 40 80 	pushm	r7,lr
80009e9c:	1a 97       	mov	r7,sp
80009e9e:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
80009ea0:	f0 1f 00 26 	mcall	80009f38 <udd_attach+0xa0>
80009ea4:	18 98       	mov	r8,r12
80009ea6:	ef 48 ff fc 	st.w	r7[-4],r8

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80009eaa:	30 1c       	mov	r12,1
80009eac:	f0 1f 00 24 	mcall	80009f3c <udd_attach+0xa4>
	otg_unfreeze_clock();
80009eb0:	fe 68 08 00 	mov	r8,-129024
80009eb4:	fe 69 08 00 	mov	r9,-129024
80009eb8:	72 09       	ld.w	r9,r9[0x0]
80009eba:	af c9       	cbr	r9,0xe
80009ebc:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );

	// Authorize attach if Vbus is present
	udd_attach_device();
80009ebe:	fe 68 00 00 	mov	r8,-131072
80009ec2:	fe 69 00 00 	mov	r9,-131072
80009ec6:	72 09       	ld.w	r9,r9[0x0]
80009ec8:	a9 c9       	cbr	r9,0x8
80009eca:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
80009ecc:	fe 68 00 18 	mov	r8,-131048
80009ed0:	30 89       	mov	r9,8
80009ed2:	91 09       	st.w	r8[0x0],r9
	udd_enable_suspend_interrupt();
80009ed4:	fe 68 00 18 	mov	r8,-131048
80009ed8:	30 19       	mov	r9,1
80009eda:	91 09       	st.w	r8[0x0],r9
	udd_enable_wake_up_interrupt();
80009edc:	fe 68 00 18 	mov	r8,-131048
80009ee0:	31 09       	mov	r9,16
80009ee2:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80009ee4:	fe 68 00 18 	mov	r8,-131048
80009ee8:	30 49       	mov	r9,4
80009eea:	91 09       	st.w	r8[0x0],r9
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
80009eec:	fe 68 00 18 	mov	r8,-131048
80009ef0:	30 29       	mov	r9,2
80009ef2:	91 09       	st.w	r8[0x0],r9
#endif
	// Reset following interrupts flag
	udd_ack_reset();
80009ef4:	fe 68 00 08 	mov	r8,-131064
80009ef8:	30 89       	mov	r9,8
80009efa:	91 09       	st.w	r8[0x0],r9
	udd_ack_sof();
80009efc:	fe 68 00 08 	mov	r8,-131064
80009f00:	30 49       	mov	r9,4
80009f02:	91 09       	st.w	r8[0x0],r9
	udd_ack_msof();
80009f04:	fe 68 00 08 	mov	r8,-131064
80009f08:	30 29       	mov	r9,2
80009f0a:	91 09       	st.w	r8[0x0],r9

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80009f0c:	fe 68 00 08 	mov	r8,-131064
80009f10:	30 19       	mov	r9,1
80009f12:	91 09       	st.w	r8[0x0],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80009f14:	fe 68 00 08 	mov	r8,-131064
80009f18:	31 09       	mov	r9,16
80009f1a:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80009f1c:	fe 68 08 00 	mov	r8,-129024
80009f20:	fe 69 08 00 	mov	r9,-129024
80009f24:	72 09       	ld.w	r9,r9[0x0]
80009f26:	af a9       	sbr	r9,0xe
80009f28:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009f2a:	ee fc ff fc 	ld.w	r12,r7[-4]
80009f2e:	f0 1f 00 05 	mcall	80009f40 <udd_attach+0xa8>
}
80009f32:	2f fd       	sub	sp,-4
80009f34:	e3 cd 80 80 	ldm	sp++,r7,pc
80009f38:	80 00       	ld.sh	r0,r0[0x0]
80009f3a:	9a a0       	ld.uh	r0,sp[0x4]
80009f3c:	80 00       	ld.sh	r0,r0[0x0]
80009f3e:	9b 60       	st.w	sp[0x18],r0
80009f40:	80 00       	ld.sh	r0,r0[0x0]
80009f42:	9a be       	ld.uh	lr,sp[0x6]

80009f44 <udd_detach>:


void udd_detach(void)
{
80009f44:	eb cd 40 80 	pushm	r7,lr
80009f48:	1a 97       	mov	r7,sp
	otg_unfreeze_clock();
80009f4a:	fe 68 08 00 	mov	r8,-129024
80009f4e:	fe 69 08 00 	mov	r9,-129024
80009f52:	72 09       	ld.w	r9,r9[0x0]
80009f54:	af c9       	cbr	r9,0xe
80009f56:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
80009f58:	fe 68 00 00 	mov	r8,-131072
80009f5c:	fe 69 00 00 	mov	r9,-131072
80009f60:	72 09       	ld.w	r9,r9[0x0]
80009f62:	a9 a9       	sbr	r9,0x8
80009f64:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80009f66:	fe 68 08 00 	mov	r8,-129024
80009f6a:	fe 69 08 00 	mov	r9,-129024
80009f6e:	72 09       	ld.w	r9,r9[0x0]
80009f70:	af a9       	sbr	r9,0xe
80009f72:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80009f74:	30 0c       	mov	r12,0
80009f76:	f0 1f 00 03 	mcall	80009f80 <udd_detach+0x3c>
}
80009f7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80009f7e:	00 00       	add	r0,r0
80009f80:	80 00       	ld.sh	r0,r0[0x0]
80009f82:	9b 60       	st.w	sp[0x18],r0

80009f84 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
80009f84:	eb cd 40 80 	pushm	r7,lr
80009f88:	1a 97       	mov	r7,sp
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
80009f8a:	fe 68 08 04 	mov	r8,-129020
80009f8e:	70 08       	ld.w	r8,r8[0x0]
80009f90:	e2 18 30 00 	andl	r8,0x3000,COH
80009f94:	ad 88       	lsr	r8,0xc
80009f96:	5f 18       	srne	r8
80009f98:	5c 58       	castu.b	r8
#else
	return false;
#endif
}
80009f9a:	10 9c       	mov	r12,r8
80009f9c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009fa0 <udd_set_address>:


void udd_set_address(uint8_t address)
{
80009fa0:	eb cd 40 80 	pushm	r7,lr
80009fa4:	1a 97       	mov	r7,sp
80009fa6:	20 1d       	sub	sp,4
80009fa8:	18 98       	mov	r8,r12
80009faa:	ef 68 ff fc 	st.b	r7[-4],r8
	udd_disable_address();
80009fae:	fe 68 00 00 	mov	r8,-131072
80009fb2:	fe 69 00 00 	mov	r9,-131072
80009fb6:	72 09       	ld.w	r9,r9[0x0]
80009fb8:	a7 d9       	cbr	r9,0x7
80009fba:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80009fbc:	fe 68 00 00 	mov	r8,-131072
80009fc0:	fe 69 00 00 	mov	r9,-131072
80009fc4:	72 09       	ld.w	r9,r9[0x0]
80009fc6:	12 9a       	mov	r10,r9
80009fc8:	e0 1a ff 80 	andl	r10,0xff80
80009fcc:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009fd0:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
80009fd4:	f5 e9 10 09 	or	r9,r10,r9
80009fd8:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80009fda:	fe 68 00 00 	mov	r8,-131072
80009fde:	fe 69 00 00 	mov	r9,-131072
80009fe2:	72 09       	ld.w	r9,r9[0x0]
80009fe4:	a7 b9       	sbr	r9,0x7
80009fe6:	91 09       	st.w	r8[0x0],r9
}
80009fe8:	2f fd       	sub	sp,-4
80009fea:	e3 cd 80 80 	ldm	sp++,r7,pc

80009fee <udd_getaddress>:


uint8_t udd_getaddress(void)
{
80009fee:	eb cd 40 80 	pushm	r7,lr
80009ff2:	1a 97       	mov	r7,sp
	return udd_get_configured_address();
80009ff4:	fe 68 00 00 	mov	r8,-131072
80009ff8:	70 08       	ld.w	r8,r8[0x0]
80009ffa:	5c 58       	castu.b	r8
80009ffc:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
}
8000a000:	10 9c       	mov	r12,r8
8000a002:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a006 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
8000a006:	eb cd 40 80 	pushm	r7,lr
8000a00a:	1a 97       	mov	r7,sp
	return udd_frame_number();
8000a00c:	fe 68 00 20 	mov	r8,-131040
8000a010:	70 08       	ld.w	r8,r8[0x0]
8000a012:	e2 18 3f f8 	andl	r8,0x3ff8,COH
8000a016:	a3 98       	lsr	r8,0x3
8000a018:	5c 88       	casts.h	r8
}
8000a01a:	10 9c       	mov	r12,r8
8000a01c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a020 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
8000a020:	eb cd 40 80 	pushm	r7,lr
8000a024:	1a 97       	mov	r7,sp
8000a026:	20 2d       	sub	sp,8
8000a028:	ef 4c ff fc 	st.w	r7[-4],r12
8000a02c:	16 98       	mov	r8,r11
8000a02e:	ef 58 ff f8 	st.h	r7[-8],r8
	udd_g_ctrlreq.payload = payload;
8000a032:	48 68       	lddpc	r8,8000a048 <udd_set_setup_payload+0x28>
8000a034:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a038:	91 29       	st.w	r8[0x8],r9
	udd_g_ctrlreq.payload_size = payload_size;
8000a03a:	48 49       	lddpc	r9,8000a048 <udd_set_setup_payload+0x28>
8000a03c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000a040:	b2 68       	st.h	r9[0xc],r8
}
8000a042:	2f ed       	sub	sp,-8
8000a044:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a048:	00 00       	add	r0,r0
8000a04a:	10 08       	add	r8,r8

8000a04c <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
8000a04c:	eb cd 40 80 	pushm	r7,lr
8000a050:	1a 97       	mov	r7,sp
8000a052:	20 dd       	sub	sp,52
8000a054:	16 99       	mov	r9,r11
8000a056:	14 98       	mov	r8,r10
8000a058:	18 9a       	mov	r10,r12
8000a05a:	ef 6a ff d4 	st.b	r7[-44],r10
8000a05e:	ef 69 ff d0 	st.b	r7[-48],r9
8000a062:	ef 58 ff cc 	st.h	r7[-52],r8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
8000a066:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a06a:	a7 98       	lsr	r8,0x7
8000a06c:	ef 68 ff db 	st.b	r7[-37],r8
	ep = ep & USB_EP_ADDR_MASK;
8000a070:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a074:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a078:	ef 68 ff d4 	st.b	r7[-44],r8

	if (ep > USB_DEVICE_MAX_EP) {
8000a07c:	ef 39 ff d4 	ld.ub	r9,r7[-44]
8000a080:	30 28       	mov	r8,2
8000a082:	f0 09 18 00 	cp.b	r9,r8
8000a086:	e0 88 00 04 	brls	8000a08e <udd_ep_alloc+0x42>
		return false;
8000a08a:	30 08       	mov	r8,0
8000a08c:	c7 f9       	rjmp	8000a38a <udd_ep_alloc+0x33e>
	}
	if (Is_udd_endpoint_enabled(ep)) {
8000a08e:	fe 68 00 00 	mov	r8,-131072
8000a092:	70 79       	ld.w	r9,r8[0x1c]
8000a094:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a098:	30 1a       	mov	r10,1
8000a09a:	f4 08 09 48 	lsl	r8,r10,r8
8000a09e:	f3 e8 00 08 	and	r8,r9,r8
8000a0a2:	c0 30       	breq	8000a0a8 <udd_ep_alloc+0x5c>
		return false;
8000a0a4:	30 08       	mov	r8,0
8000a0a6:	c7 29       	rjmp	8000a38a <udd_ep_alloc+0x33e>
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
8000a0a8:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8000a0ac:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000a0b0:	58 28       	cp.w	r8,2
8000a0b2:	c0 d0       	breq	8000a0cc <udd_ep_alloc+0x80>
8000a0b4:	58 38       	cp.w	r8,3
8000a0b6:	c0 70       	breq	8000a0c4 <udd_ep_alloc+0x78>
8000a0b8:	58 18       	cp.w	r8,1
8000a0ba:	c0 d1       	brne	8000a0d4 <udd_ep_alloc+0x88>
	case USB_EP_TYPE_ISOCHRONOUS:
		bank = UDD_ISOCHRONOUS_NB_BANK(ep);
8000a0bc:	30 28       	mov	r8,2
8000a0be:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000a0c2:	c0 b8       	rjmp	8000a0d8 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_INTERRUPT:
		bank = UDD_INTERRUPT_NB_BANK(ep);
8000a0c4:	30 18       	mov	r8,1
8000a0c6:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000a0ca:	c0 78       	rjmp	8000a0d8 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_BULK:
		bank = UDD_BULK_NB_BANK(ep);
8000a0cc:	30 28       	mov	r8,2
8000a0ce:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000a0d2:	c0 38       	rjmp	8000a0d8 <udd_ep_alloc+0x8c>
	default:
		Assert(false);
		return false;
8000a0d4:	30 08       	mov	r8,0
8000a0d6:	c5 a9       	rjmp	8000a38a <udd_ep_alloc+0x33e>
	}
	switch(bank) {
8000a0d8:	ef 38 ff de 	ld.ub	r8,r7[-34]
8000a0dc:	58 28       	cp.w	r8,2
8000a0de:	c0 90       	breq	8000a0f0 <udd_ep_alloc+0xa4>
8000a0e0:	58 38       	cp.w	r8,3
8000a0e2:	c0 b0       	breq	8000a0f8 <udd_ep_alloc+0xac>
8000a0e4:	58 18       	cp.w	r8,1
8000a0e6:	c0 d1       	brne	8000a100 <udd_ep_alloc+0xb4>
	case 1:
		bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
8000a0e8:	30 08       	mov	r8,0
8000a0ea:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000a0ee:	c0 b8       	rjmp	8000a104 <udd_ep_alloc+0xb8>
	case 2:
		bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
8000a0f0:	30 18       	mov	r8,1
8000a0f2:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000a0f6:	c0 78       	rjmp	8000a104 <udd_ep_alloc+0xb8>
	case 3:
		bank = AVR32_USBB_UECFG0_EPBK_TRIPLE;
8000a0f8:	30 28       	mov	r8,2
8000a0fa:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000a0fe:	c0 38       	rjmp	8000a104 <udd_ep_alloc+0xb8>
	default:
		Assert(false);
		return false;
8000a100:	30 08       	mov	r8,0
8000a102:	c4 49       	rjmp	8000a38a <udd_ep_alloc+0x33e>
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
8000a104:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a108:	a3 68       	lsl	r8,0x2
8000a10a:	e0 38 ff 00 	sub	r8,130816
8000a10e:	ef 39 ff d4 	ld.ub	r9,r7[-44]
8000a112:	a3 69       	lsl	r9,0x2
8000a114:	e0 39 ff 00 	sub	r9,130816
8000a118:	72 09       	ld.w	r9,r9[0x0]
8000a11a:	12 9a       	mov	r10,r9
8000a11c:	e0 1a e6 83 	andl	r10,0xe683
8000a120:	ef 39 ff d0 	ld.ub	r9,r7[-48]
8000a124:	ab 79       	lsl	r9,0xb
8000a126:	12 9b       	mov	r11,r9
8000a128:	e2 1b 18 00 	andl	r11,0x1800,COH
8000a12c:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000a130:	a9 69       	lsl	r9,0x8
8000a132:	e2 19 01 00 	andl	r9,0x100,COH
8000a136:	12 4b       	or	r11,r9
8000a138:	ef 19 ff cc 	ld.uh	r9,r7[-52]
8000a13c:	ef 49 ff f0 	st.w	r7[-16],r9
8000a140:	30 89       	mov	r9,8
8000a142:	ef 49 ff f4 	st.w	r7[-12],r9
8000a146:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a14a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000a14e:	f2 0c 0c 49 	max	r9,r9,r12
8000a152:	ef 49 ff ec 	st.w	r7[-20],r9
8000a156:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a15a:	ef 49 ff e4 	st.w	r7[-28],r9
8000a15e:	e0 69 04 00 	mov	r9,1024
8000a162:	ef 49 ff e8 	st.w	r7[-24],r9
8000a166:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a16a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000a16e:	f2 0c 0d 49 	min	r9,r9,r12
8000a172:	ef 49 ff e0 	st.w	r7[-32],r9
8000a176:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000a17a:	a1 79       	lsl	r9,0x1
8000a17c:	20 19       	sub	r9,1
8000a17e:	f2 09 12 00 	clz	r9,r9
8000a182:	f2 09 11 1c 	rsub	r9,r9,28
8000a186:	a5 69       	lsl	r9,0x4
8000a188:	12 4b       	or	r11,r9
8000a18a:	ef 39 ff de 	ld.ub	r9,r7[-34]
8000a18e:	a3 69       	lsl	r9,0x2
8000a190:	e2 19 00 0c 	andl	r9,0xc,COH
8000a194:	f7 e9 10 09 	or	r9,r11,r9
8000a198:	e2 19 19 7c 	andl	r9,0x197c,COH
8000a19c:	f5 e9 10 09 	or	r9,r10,r9
8000a1a0:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
8000a1a2:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a1a6:	30 19       	mov	r9,1
8000a1a8:	f2 08 09 48 	lsl	r8,r9,r8
8000a1ac:	ef 58 ff dc 	st.h	r7[-36],r8

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
8000a1b0:	30 28       	mov	r8,2
8000a1b2:	ef 68 ff df 	st.b	r7[-33],r8
8000a1b6:	c3 a8       	rjmp	8000a22a <udd_ep_alloc+0x1de>
		if (Is_udd_endpoint_enabled(i)) {
8000a1b8:	fe 68 00 00 	mov	r8,-131072
8000a1bc:	70 79       	ld.w	r9,r8[0x1c]
8000a1be:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a1c2:	30 1a       	mov	r10,1
8000a1c4:	f4 08 09 48 	lsl	r8,r10,r8
8000a1c8:	f3 e8 00 08 	and	r8,r9,r8
8000a1cc:	c2 a0       	breq	8000a220 <udd_ep_alloc+0x1d4>
			ep_allocated |= 1 << i;
8000a1ce:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a1d2:	30 19       	mov	r9,1
8000a1d4:	f2 08 09 48 	lsl	r8,r9,r8
8000a1d8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000a1dc:	ef 08 ff dc 	ld.sh	r8,r7[-36]
8000a1e0:	f3 e8 10 08 	or	r8,r9,r8
8000a1e4:	5c 88       	casts.h	r8
8000a1e6:	ef 58 ff dc 	st.h	r7[-36],r8
			udd_disable_endpoint(i);
8000a1ea:	fe 68 00 00 	mov	r8,-131072
8000a1ee:	fe 69 00 00 	mov	r9,-131072
8000a1f2:	72 7a       	ld.w	r10,r9[0x1c]
8000a1f4:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a1f8:	30 1b       	mov	r11,1
8000a1fa:	f6 09 09 49 	lsl	r9,r11,r9
8000a1fe:	5c d9       	com	r9
8000a200:	f5 e9 00 09 	and	r9,r10,r9
8000a204:	91 79       	st.w	r8[0x1c],r9
			udd_unallocate_memory(i);
8000a206:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a20a:	a3 68       	lsl	r8,0x2
8000a20c:	e0 38 ff 00 	sub	r8,130816
8000a210:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a214:	a3 69       	lsl	r9,0x2
8000a216:	e0 39 ff 00 	sub	r9,130816
8000a21a:	72 09       	ld.w	r9,r9[0x0]
8000a21c:	a1 d9       	cbr	r9,0x1
8000a21e:	91 09       	st.w	r8[0x0],r9
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
8000a220:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a224:	20 18       	sub	r8,1
8000a226:	ef 68 ff df 	st.b	r7[-33],r8
8000a22a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a22e:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a232:	f0 09 18 00 	cp.b	r9,r8
8000a236:	fe 9b ff c1 	brhi	8000a1b8 <udd_ep_alloc+0x16c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000a23a:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a23e:	ef 68 ff df 	st.b	r7[-33],r8
8000a242:	c9 c8       	rjmp	8000a37a <udd_ep_alloc+0x32e>
		if (ep_allocated & (1 << i)) {
8000a244:	ef 19 ff dc 	ld.uh	r9,r7[-36]
8000a248:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a24c:	f2 08 08 48 	asr	r8,r9,r8
8000a250:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a254:	5c 58       	castu.b	r8
8000a256:	e0 80 00 8d 	breq	8000a370 <udd_ep_alloc+0x324>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
8000a25a:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a25e:	f0 c9 00 01 	sub	r9,r8,1
8000a262:	12 98       	mov	r8,r9
8000a264:	a3 68       	lsl	r8,0x2
8000a266:	12 08       	add	r8,r9
8000a268:	a3 68       	lsl	r8,0x2
8000a26a:	10 99       	mov	r9,r8
8000a26c:	4c a8       	lddpc	r8,8000a394 <udd_ep_alloc+0x348>
8000a26e:	f2 08 00 08 	add	r8,r9,r8
8000a272:	ef 48 ff f8 	st.w	r7[-8],r8
			bool b_restart = ptr_job->busy;
8000a276:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a27a:	70 08       	ld.w	r8,r8[0x0]
8000a27c:	e6 18 80 00 	andh	r8,0x8000,COH
8000a280:	5f 18       	srne	r8
8000a282:	ef 68 ff ff 	st.b	r7[-1],r8
			ptr_job->busy = false;
8000a286:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a28a:	72 08       	ld.w	r8,r9[0x0]
8000a28c:	30 0a       	mov	r10,0
8000a28e:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a292:	93 08       	st.w	r9[0x0],r8

			udd_allocate_memory(i);
8000a294:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a298:	a3 68       	lsl	r8,0x2
8000a29a:	e0 38 ff 00 	sub	r8,130816
8000a29e:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a2a2:	a3 69       	lsl	r9,0x2
8000a2a4:	e0 39 ff 00 	sub	r9,130816
8000a2a8:	72 09       	ld.w	r9,r9[0x0]
8000a2aa:	a1 b9       	sbr	r9,0x1
8000a2ac:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint(i);
8000a2ae:	fe 68 00 00 	mov	r8,-131072
8000a2b2:	fe 69 00 00 	mov	r9,-131072
8000a2b6:	72 7a       	ld.w	r10,r9[0x1c]
8000a2b8:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a2bc:	30 1b       	mov	r11,1
8000a2be:	f6 09 09 49 	lsl	r9,r11,r9
8000a2c2:	f5 e9 10 09 	or	r9,r10,r9
8000a2c6:	91 79       	st.w	r8[0x1c],r9
			if (!Is_udd_endpoint_configured(i)) {
8000a2c8:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a2cc:	a3 68       	lsl	r8,0x2
8000a2ce:	e0 38 fe d0 	sub	r8,130768
8000a2d2:	70 08       	ld.w	r8,r8[0x0]
8000a2d4:	e6 18 00 04 	andh	r8,0x4,COH
8000a2d8:	c2 61       	brne	8000a324 <udd_ep_alloc+0x2d8>
				if (NULL == ptr_job->call_trans) {
8000a2da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a2de:	70 48       	ld.w	r8,r8[0x10]
8000a2e0:	58 08       	cp.w	r8,0
8000a2e2:	c0 31       	brne	8000a2e8 <udd_ep_alloc+0x29c>
					return false;
8000a2e4:	30 08       	mov	r8,0
8000a2e6:	c5 28       	rjmp	8000a38a <udd_ep_alloc+0x33e>
				}
				if (Is_udd_endpoint_in(i)) {
8000a2e8:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a2ec:	a3 68       	lsl	r8,0x2
8000a2ee:	e0 38 ff 00 	sub	r8,130816
8000a2f2:	70 08       	ld.w	r8,r8[0x0]
8000a2f4:	e2 18 01 00 	andl	r8,0x100,COH
8000a2f8:	c0 90       	breq	8000a30a <udd_ep_alloc+0x2be>
					i |= USB_EP_DIR_IN;
8000a2fa:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a2fe:	ea 18 ff ff 	orh	r8,0xffff
8000a302:	e8 18 ff 80 	orl	r8,0xff80
8000a306:	ef 68 ff df 	st.b	r7[-33],r8
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
8000a30a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a30e:	70 48       	ld.w	r8,r8[0x10]
8000a310:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000a314:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a318:	72 29       	ld.w	r9,r9[0x8]
8000a31a:	12 9b       	mov	r11,r9
8000a31c:	30 1c       	mov	r12,1
8000a31e:	5d 18       	icall	r8
						ptr_job->buf_size, i);
				return false;
8000a320:	30 08       	mov	r8,0
8000a322:	c3 48       	rjmp	8000a38a <udd_ep_alloc+0x33e>
			}
			udd_enable_endpoint_bank_autoswitch(i);
8000a324:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a328:	a3 68       	lsl	r8,0x2
8000a32a:	e0 38 ff 00 	sub	r8,130816
8000a32e:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a332:	a3 69       	lsl	r9,0x2
8000a334:	e0 39 ff 00 	sub	r9,130816
8000a338:	72 09       	ld.w	r9,r9[0x0]
8000a33a:	a9 b9       	sbr	r9,0x9
8000a33c:	91 09       	st.w	r8[0x0],r9
			if (b_restart) {
8000a33e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a342:	30 08       	mov	r8,0
8000a344:	f0 09 18 00 	cp.b	r9,r8
8000a348:	c1 40       	breq	8000a370 <udd_ep_alloc+0x324>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
8000a34a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a34e:	70 48       	ld.w	r8,r8[0x10]
8000a350:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a354:	72 29       	ld.w	r9,r9[0x8]
8000a356:	ee fa ff f8 	ld.w	r10,r7[-8]
8000a35a:	74 1a       	ld.w	r10,r10[0x4]
8000a35c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a360:	76 0b       	ld.w	r11,r11[0x0]
8000a362:	e6 1b 40 00 	andh	r11,0x4000,COH
8000a366:	5f 1b       	srne	r11
8000a368:	ef 3c ff df 	ld.ub	r12,r7[-33]
8000a36c:	f0 1f 00 0b 	mcall	8000a398 <udd_ep_alloc+0x34c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000a370:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a374:	2f f8       	sub	r8,-1
8000a376:	ef 68 ff df 	st.b	r7[-33],r8
8000a37a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a37e:	30 28       	mov	r8,2
8000a380:	f0 09 18 00 	cp.b	r9,r8
8000a384:	fe 98 ff 60 	brls	8000a244 <udd_ep_alloc+0x1f8>
						ptr_job->buf_size,
						ptr_job->call_trans);
			}
		}
	}
	return true;
8000a388:	30 18       	mov	r8,1
}
8000a38a:	10 9c       	mov	r12,r8
8000a38c:	2f 3d       	sub	sp,-52
8000a38e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a392:	00 00       	add	r0,r0
8000a394:	00 00       	add	r0,r0
8000a396:	07 c0       	ld.ub	r0,r3[0x4]
8000a398:	80 00       	ld.sh	r0,r0[0x0]
8000a39a:	a6 bc       	st.b	r3[0x3],r12

8000a39c <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
8000a39c:	eb cd 40 80 	pushm	r7,lr
8000a3a0:	1a 97       	mov	r7,sp
8000a3a2:	20 2d       	sub	sp,8
8000a3a4:	18 98       	mov	r8,r12
8000a3a6:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a3aa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a3ae:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a3b2:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
8000a3b6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a3ba:	30 28       	mov	r8,2
8000a3bc:	f0 09 18 00 	cp.b	r9,r8
8000a3c0:	e0 8b 00 33 	brhi	8000a426 <udd_ep_free+0x8a>
		return;
	}
	udd_disable_endpoint(index);
8000a3c4:	fe 68 00 00 	mov	r8,-131072
8000a3c8:	fe 69 00 00 	mov	r9,-131072
8000a3cc:	72 7a       	ld.w	r10,r9[0x1c]
8000a3ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a3d2:	30 1b       	mov	r11,1
8000a3d4:	f6 09 09 49 	lsl	r9,r11,r9
8000a3d8:	5c d9       	com	r9
8000a3da:	f5 e9 00 09 	and	r9,r10,r9
8000a3de:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
8000a3e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a3e4:	a3 68       	lsl	r8,0x2
8000a3e6:	e0 38 ff 00 	sub	r8,130816
8000a3ea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a3ee:	a3 69       	lsl	r9,0x2
8000a3f0:	e0 39 ff 00 	sub	r9,130816
8000a3f4:	72 09       	ld.w	r9,r9[0x0]
8000a3f6:	a1 d9       	cbr	r9,0x1
8000a3f8:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
8000a3fa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a3fe:	10 9c       	mov	r12,r8
8000a400:	f0 1f 00 0c 	mcall	8000a430 <udd_ep_free+0x94>
	udd_ep_job[index - 1].stall_requested = false;
8000a404:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a408:	f0 c9 00 01 	sub	r9,r8,1
8000a40c:	48 aa       	lddpc	r10,8000a434 <udd_ep_free+0x98>
8000a40e:	12 98       	mov	r8,r9
8000a410:	a3 68       	lsl	r8,0x2
8000a412:	12 08       	add	r8,r9
8000a414:	a3 68       	lsl	r8,0x2
8000a416:	f4 08 00 09 	add	r9,r10,r8
8000a41a:	72 08       	ld.w	r8,r9[0x0]
8000a41c:	30 0a       	mov	r10,0
8000a41e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a422:	93 08       	st.w	r9[0x0],r8
8000a424:	c0 28       	rjmp	8000a428 <udd_ep_free+0x8c>
void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index) {
		return;
8000a426:	d7 03       	nop
	}
	udd_disable_endpoint(index);
	udd_unallocate_memory(index);
	udd_ep_abort_job(ep);
	udd_ep_job[index - 1].stall_requested = false;
}
8000a428:	2f ed       	sub	sp,-8
8000a42a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a42e:	00 00       	add	r0,r0
8000a430:	80 00       	ld.sh	r0,r0[0x0]
8000a432:	b4 44       	st.h	r10[0x8],r4
8000a434:	00 00       	add	r0,r0
8000a436:	07 c0       	ld.ub	r0,r3[0x4]

8000a438 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
8000a438:	eb cd 40 80 	pushm	r7,lr
8000a43c:	1a 97       	mov	r7,sp
8000a43e:	20 1d       	sub	sp,4
8000a440:	18 98       	mov	r8,r12
8000a442:	ef 68 ff fc 	st.b	r7[-4],r8
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
8000a446:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a44a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a44e:	a3 68       	lsl	r8,0x2
8000a450:	e0 38 fe 40 	sub	r8,130624
8000a454:	70 08       	ld.w	r8,r8[0x0]
8000a456:	e6 18 00 08 	andh	r8,0x8,COH
8000a45a:	5f 18       	srne	r8
8000a45c:	5c 58       	castu.b	r8
}
8000a45e:	10 9c       	mov	r12,r8
8000a460:	2f fd       	sub	sp,-4
8000a462:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a466:	d7 03       	nop

8000a468 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
8000a468:	eb cd 40 80 	pushm	r7,lr
8000a46c:	1a 97       	mov	r7,sp
8000a46e:	20 3d       	sub	sp,12
8000a470:	18 98       	mov	r8,r12
8000a472:	ef 68 ff f4 	st.b	r7[-12],r8
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a476:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a47a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a47e:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
8000a482:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a486:	30 28       	mov	r8,2
8000a488:	f0 09 18 00 	cp.b	r9,r8
8000a48c:	e0 88 00 04 	brls	8000a494 <udd_ep_set_halt+0x2c>
		return false;
8000a490:	30 08       	mov	r8,0
8000a492:	c6 f8       	rjmp	8000a570 <udd_ep_set_halt+0x108>
	}

	ptr_job = &udd_ep_job[index - 1];
8000a494:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a498:	f0 c9 00 01 	sub	r9,r8,1
8000a49c:	12 98       	mov	r8,r9
8000a49e:	a3 68       	lsl	r8,0x2
8000a4a0:	12 08       	add	r8,r9
8000a4a2:	a3 68       	lsl	r8,0x2
8000a4a4:	10 99       	mov	r9,r8
8000a4a6:	4b 58       	lddpc	r8,8000a578 <udd_ep_set_halt+0x110>
8000a4a8:	f2 08 00 08 	add	r8,r9,r8
8000a4ac:	ef 48 ff f8 	st.w	r7[-8],r8

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
8000a4b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a4b4:	a3 68       	lsl	r8,0x2
8000a4b6:	e0 38 fe 40 	sub	r8,130624
8000a4ba:	70 08       	ld.w	r8,r8[0x0]
8000a4bc:	e6 18 00 08 	andh	r8,0x8,COH
8000a4c0:	c0 71       	brne	8000a4ce <udd_ep_set_halt+0x66>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
8000a4c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4c6:	70 08       	ld.w	r8,r8[0x0]
8000a4c8:	e6 18 20 00 	andh	r8,0x2000,COH
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
8000a4cc:	c0 30       	breq	8000a4d2 <udd_ep_set_halt+0x6a>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
8000a4ce:	30 18       	mov	r8,1
8000a4d0:	c5 08       	rjmp	8000a570 <udd_ep_set_halt+0x108>
	}

	if (ptr_job->busy == true) {
8000a4d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4d6:	70 08       	ld.w	r8,r8[0x0]
8000a4d8:	e6 18 80 00 	andh	r8,0x8000,COH
8000a4dc:	c0 30       	breq	8000a4e2 <udd_ep_set_halt+0x7a>
		return false; // Job on going, stall impossible
8000a4de:	30 08       	mov	r8,0
8000a4e0:	c4 88       	rjmp	8000a570 <udd_ep_set_halt+0x108>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
8000a4e2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a4e6:	30 08       	mov	r8,0
8000a4e8:	f0 09 18 00 	cp.b	r9,r8
8000a4ec:	c2 54       	brge	8000a536 <udd_ep_set_halt+0xce>
8000a4ee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a4f2:	a3 68       	lsl	r8,0x2
8000a4f4:	e0 38 fe d0 	sub	r8,130768
8000a4f8:	70 08       	ld.w	r8,r8[0x0]
8000a4fa:	e2 18 30 00 	andl	r8,0x3000,COH
8000a4fe:	ad 88       	lsr	r8,0xc
8000a500:	c1 b0       	breq	8000a536 <udd_ep_set_halt+0xce>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
8000a502:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a506:	72 08       	ld.w	r8,r9[0x0]
8000a508:	30 1a       	mov	r10,1
8000a50a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a50e:	93 08       	st.w	r9[0x0],r8
			udd_enable_bank_interrupt(index);
8000a510:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a514:	a3 68       	lsl	r8,0x2
8000a516:	e0 38 fe 10 	sub	r8,130576
8000a51a:	e0 69 10 00 	mov	r9,4096
8000a51e:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(index);
8000a520:	fe 68 00 00 	mov	r8,-131072
8000a524:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a528:	e0 6a 10 00 	mov	r10,4096
8000a52c:	f4 09 09 49 	lsl	r9,r10,r9
8000a530:	91 69       	st.w	r8[0x18],r9
			return true;
8000a532:	30 18       	mov	r8,1
8000a534:	c1 e8       	rjmp	8000a570 <udd_ep_set_halt+0x108>
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
8000a536:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a53a:	a3 68       	lsl	r8,0x2
8000a53c:	e0 38 ff 00 	sub	r8,130816
8000a540:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a544:	a3 69       	lsl	r9,0x2
8000a546:	e0 39 ff 00 	sub	r9,130816
8000a54a:	72 09       	ld.w	r9,r9[0x0]
8000a54c:	a9 d9       	cbr	r9,0x9
8000a54e:	91 09       	st.w	r8[0x0],r9
	udd_ack_stall(index);
8000a550:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a554:	a3 68       	lsl	r8,0x2
8000a556:	e0 38 fe a0 	sub	r8,130720
8000a55a:	34 09       	mov	r9,64
8000a55c:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(index);
8000a55e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a562:	a3 68       	lsl	r8,0x2
8000a564:	e0 38 fe 10 	sub	r8,130576
8000a568:	e8 69 00 00 	mov	r9,524288
8000a56c:	91 09       	st.w	r8[0x0],r9
	return true;
8000a56e:	30 18       	mov	r8,1
}
8000a570:	10 9c       	mov	r12,r8
8000a572:	2f dd       	sub	sp,-12
8000a574:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a578:	00 00       	add	r0,r0
8000a57a:	07 c0       	ld.ub	r0,r3[0x4]

8000a57c <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
8000a57c:	eb cd 40 80 	pushm	r7,lr
8000a580:	1a 97       	mov	r7,sp
8000a582:	20 3d       	sub	sp,12
8000a584:	18 98       	mov	r8,r12
8000a586:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_stall_cleared = false;
8000a58a:	30 08       	mov	r8,0
8000a58c:	ef 68 ff fb 	st.b	r7[-5],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000a590:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a594:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a598:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep)
8000a59c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a5a0:	30 28       	mov	r8,2
8000a5a2:	f0 09 18 00 	cp.b	r9,r8
8000a5a6:	e0 88 00 04 	brls	8000a5ae <udd_ep_clear_halt+0x32>
		return false;
8000a5aa:	30 08       	mov	r8,0
8000a5ac:	c8 18       	rjmp	8000a6ae <udd_ep_clear_halt+0x132>
	ptr_job = &udd_ep_job[ep - 1];
8000a5ae:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a5b2:	f0 c9 00 01 	sub	r9,r8,1
8000a5b6:	12 98       	mov	r8,r9
8000a5b8:	a3 68       	lsl	r8,0x2
8000a5ba:	12 08       	add	r8,r9
8000a5bc:	a3 68       	lsl	r8,0x2
8000a5be:	10 99       	mov	r9,r8
8000a5c0:	4b e8       	lddpc	r8,8000a6b8 <udd_ep_clear_halt+0x13c>
8000a5c2:	f2 08 00 08 	add	r8,r9,r8
8000a5c6:	ef 48 ff fc 	st.w	r7[-4],r8

	if (ptr_job->stall_requested) {
8000a5ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a5ce:	70 08       	ld.w	r8,r8[0x0]
8000a5d0:	e6 18 20 00 	andh	r8,0x2000,COH
8000a5d4:	c1 c0       	breq	8000a60c <udd_ep_clear_halt+0x90>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
8000a5d6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a5da:	72 08       	ld.w	r8,r9[0x0]
8000a5dc:	30 0a       	mov	r10,0
8000a5de:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a5e2:	93 08       	st.w	r9[0x0],r8
		udd_disable_bank_interrupt(ep);
8000a5e4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a5e8:	a3 68       	lsl	r8,0x2
8000a5ea:	e0 38 fd e0 	sub	r8,130528
8000a5ee:	e0 69 10 00 	mov	r9,4096
8000a5f2:	91 09       	st.w	r8[0x0],r9
		udd_disable_endpoint_interrupt(ep);
8000a5f4:	fe 68 00 00 	mov	r8,-131072
8000a5f8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a5fc:	e0 6a 10 00 	mov	r10,4096
8000a600:	f4 09 09 49 	lsl	r9,r10,r9
8000a604:	91 59       	st.w	r8[0x14],r9
		b_stall_cleared = true;
8000a606:	30 18       	mov	r8,1
8000a608:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
8000a60c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a610:	a3 68       	lsl	r8,0x2
8000a612:	e0 38 fe 40 	sub	r8,130624
8000a616:	70 08       	ld.w	r8,r8[0x0]
8000a618:	e6 18 00 08 	andh	r8,0x8,COH
8000a61c:	c3 10       	breq	8000a67e <udd_ep_clear_halt+0x102>
		if (Is_udd_stall(ep)) {
8000a61e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a622:	a3 68       	lsl	r8,0x2
8000a624:	e0 38 fe d0 	sub	r8,130768
8000a628:	70 08       	ld.w	r8,r8[0x0]
8000a62a:	e2 18 00 40 	andl	r8,0x40,COH
8000a62e:	c1 00       	breq	8000a64e <udd_ep_clear_halt+0xd2>
			udd_ack_stall(ep);
8000a630:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a634:	a3 68       	lsl	r8,0x2
8000a636:	e0 38 fe a0 	sub	r8,130720
8000a63a:	34 09       	mov	r9,64
8000a63c:	91 09       	st.w	r8[0x0],r9
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
8000a63e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a642:	a3 68       	lsl	r8,0x2
8000a644:	e0 38 fe 10 	sub	r8,130576
8000a648:	e4 69 00 00 	mov	r9,262144
8000a64c:	91 09       	st.w	r8[0x0],r9
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
8000a64e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a652:	a3 68       	lsl	r8,0x2
8000a654:	e0 38 fd e0 	sub	r8,130528
8000a658:	e8 69 00 00 	mov	r9,524288
8000a65c:	91 09       	st.w	r8[0x0],r9
		udd_enable_endpoint_bank_autoswitch(ep);
8000a65e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a662:	a3 68       	lsl	r8,0x2
8000a664:	e0 38 ff 00 	sub	r8,130816
8000a668:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a66c:	a3 69       	lsl	r9,0x2
8000a66e:	e0 39 ff 00 	sub	r9,130816
8000a672:	72 09       	ld.w	r9,r9[0x0]
8000a674:	a9 b9       	sbr	r9,0x9
8000a676:	91 09       	st.w	r8[0x0],r9
		b_stall_cleared = true;
8000a678:	30 18       	mov	r8,1
8000a67a:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (b_stall_cleared) {
8000a67e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000a682:	30 08       	mov	r8,0
8000a684:	f0 09 18 00 	cp.b	r9,r8
8000a688:	c1 20       	breq	8000a6ac <udd_ep_clear_halt+0x130>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
8000a68a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a68e:	70 08       	ld.w	r8,r8[0x0]
8000a690:	e6 18 80 00 	andh	r8,0x8000,COH
8000a694:	c0 c0       	breq	8000a6ac <udd_ep_clear_halt+0x130>
			ptr_job->busy = false;
8000a696:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a69a:	72 08       	ld.w	r8,r9[0x0]
8000a69c:	30 0a       	mov	r10,0
8000a69e:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a6a2:	93 08       	st.w	r9[0x0],r8
			ptr_job->call_nohalt();
8000a6a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6a8:	70 48       	ld.w	r8,r8[0x10]
8000a6aa:	5d 18       	icall	r8
		}
	}
	return true;
8000a6ac:	30 18       	mov	r8,1
}
8000a6ae:	10 9c       	mov	r12,r8
8000a6b0:	2f dd       	sub	sp,-12
8000a6b2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a6b6:	00 00       	add	r0,r0
8000a6b8:	00 00       	add	r0,r0
8000a6ba:	07 c0       	ld.ub	r0,r3[0x4]

8000a6bc <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
8000a6bc:	eb cd 40 80 	pushm	r7,lr
8000a6c0:	1a 97       	mov	r7,sp
8000a6c2:	20 7d       	sub	sp,28
8000a6c4:	ef 4a ff ec 	st.w	r7[-20],r10
8000a6c8:	ef 49 ff e8 	st.w	r7[-24],r9
8000a6cc:	ef 48 ff e4 	st.w	r7[-28],r8
8000a6d0:	18 98       	mov	r8,r12
8000a6d2:	ef 68 ff f4 	st.b	r7[-12],r8
8000a6d6:	16 98       	mov	r8,r11
8000a6d8:	ef 68 ff f0 	st.b	r7[-16],r8
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
8000a6dc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a6e0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a6e4:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep) {
8000a6e8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a6ec:	30 28       	mov	r8,2
8000a6ee:	f0 09 18 00 	cp.b	r9,r8
8000a6f2:	e0 88 00 04 	brls	8000a6fa <udd_ep_run+0x3e>
		return false;
8000a6f6:	30 08       	mov	r8,0
8000a6f8:	c6 88       	rjmp	8000a7c8 <udd_ep_run+0x10c>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000a6fa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a6fe:	f0 c9 00 01 	sub	r9,r8,1
8000a702:	12 98       	mov	r8,r9
8000a704:	a3 68       	lsl	r8,0x2
8000a706:	12 08       	add	r8,r9
8000a708:	a3 68       	lsl	r8,0x2
8000a70a:	10 99       	mov	r9,r8
8000a70c:	4b 18       	lddpc	r8,8000a7d0 <udd_ep_run+0x114>
8000a70e:	f2 08 00 08 	add	r8,r9,r8
8000a712:	ef 48 ff f8 	st.w	r7[-8],r8

	if ((!Is_udd_endpoint_enabled(ep))
8000a716:	fe 68 00 00 	mov	r8,-131072
8000a71a:	70 79       	ld.w	r9,r8[0x1c]
8000a71c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a720:	30 1a       	mov	r10,1
8000a722:	f4 08 09 48 	lsl	r8,r10,r8
8000a726:	f3 e8 00 08 	and	r8,r9,r8
8000a72a:	c1 00       	breq	8000a74a <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
8000a72c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a730:	a3 68       	lsl	r8,0x2
8000a732:	e0 38 fe 40 	sub	r8,130624
8000a736:	70 08       	ld.w	r8,r8[0x0]
8000a738:	e6 18 00 08 	andh	r8,0x8,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000a73c:	c0 71       	brne	8000a74a <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
8000a73e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a742:	70 08       	ld.w	r8,r8[0x0]
8000a744:	e6 18 20 00 	andh	r8,0x2000,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000a748:	c0 30       	breq	8000a74e <udd_ep_run+0x92>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
8000a74a:	30 08       	mov	r8,0
8000a74c:	c3 e8       	rjmp	8000a7c8 <udd_ep_run+0x10c>
	}

	flags = cpu_irq_save();
8000a74e:	f0 1f 00 22 	mcall	8000a7d4 <udd_ep_run+0x118>
8000a752:	18 98       	mov	r8,r12
8000a754:	ef 48 ff fc 	st.w	r7[-4],r8
	if (ptr_job->busy == true) {
8000a758:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a75c:	70 08       	ld.w	r8,r8[0x0]
8000a75e:	e6 18 80 00 	andh	r8,0x8000,COH
8000a762:	c0 70       	breq	8000a770 <udd_ep_run+0xb4>
		cpu_irq_restore(flags);
8000a764:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a768:	f0 1f 00 1c 	mcall	8000a7d8 <udd_ep_run+0x11c>
		return false; // Job already on going
8000a76c:	30 08       	mov	r8,0
8000a76e:	c2 d8       	rjmp	8000a7c8 <udd_ep_run+0x10c>
	}
	ptr_job->busy = true;
8000a770:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a774:	72 08       	ld.w	r8,r9[0x0]
8000a776:	30 1a       	mov	r10,1
8000a778:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a77c:	93 08       	st.w	r9[0x0],r8
	cpu_irq_restore(flags);
8000a77e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a782:	f0 1f 00 16 	mcall	8000a7d8 <udd_ep_run+0x11c>

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
8000a786:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a78a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a78e:	91 19       	st.w	r8[0x4],r9
	ptr_job->buf_size = buf_size;
8000a790:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a794:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a798:	91 29       	st.w	r8[0x8],r9
	ptr_job->nb_trans = 0;
8000a79a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a79e:	30 09       	mov	r9,0
8000a7a0:	91 39       	st.w	r8[0xc],r9
	ptr_job->call_trans = callback;
8000a7a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a7a6:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a7aa:	91 49       	st.w	r8[0x10],r9
	ptr_job->b_shortpacket = b_shortpacket;
8000a7ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a7b0:	72 08       	ld.w	r8,r9[0x0]
8000a7b2:	ef 3a ff f0 	ld.ub	r10,r7[-16]
8000a7b6:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000a7ba:	93 08       	st.w	r9[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
8000a7bc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a7c0:	10 9c       	mov	r12,r8
8000a7c2:	f0 1f 00 07 	mcall	8000a7dc <udd_ep_run+0x120>
	return true;
8000a7c6:	30 18       	mov	r8,1
}
8000a7c8:	10 9c       	mov	r12,r8
8000a7ca:	2f 9d       	sub	sp,-28
8000a7cc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a7d0:	00 00       	add	r0,r0
8000a7d2:	07 c0       	ld.ub	r0,r3[0x4]
8000a7d4:	80 00       	ld.sh	r0,r0[0x0]
8000a7d6:	9a a0       	ld.uh	r0,sp[0x4]
8000a7d8:	80 00       	ld.sh	r0,r0[0x0]
8000a7da:	9a be       	ld.uh	lr,sp[0x6]
8000a7dc:	80 00       	ld.sh	r0,r0[0x0]
8000a7de:	b5 14       	ld.d	r4,--r10

8000a7e0 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
8000a7e0:	eb cd 40 80 	pushm	r7,lr
8000a7e4:	1a 97       	mov	r7,sp
8000a7e6:	20 2d       	sub	sp,8
8000a7e8:	18 98       	mov	r8,r12
8000a7ea:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a7ee:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a7f2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a7f6:	ef 68 ff ff 	st.b	r7[-1],r8

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
8000a7fa:	fe 68 00 00 	mov	r8,-131072
8000a7fe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a802:	20 19       	sub	r9,1
8000a804:	fc 1a 02 00 	movh	r10,0x200
8000a808:	f4 09 09 49 	lsl	r9,r10,r9
8000a80c:	91 59       	st.w	r8[0x14],r9
	udd_endpoint_dma_set_control(index, 0);
8000a80e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a812:	a5 68       	lsl	r8,0x4
8000a814:	e0 38 fd 00 	sub	r8,130304
8000a818:	30 09       	mov	r9,0
8000a81a:	91 29       	st.w	r8[0x8],r9
	// Kill banks
	udd_disable_endpoint_interrupt(index);
8000a81c:	fe 68 00 00 	mov	r8,-131072
8000a820:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a824:	e0 6a 10 00 	mov	r10,4096
8000a828:	f4 09 09 49 	lsl	r9,r10,r9
8000a82c:	91 59       	st.w	r8[0x14],r9
	while (udd_nb_busy_bank(index)) {
8000a82e:	c1 28       	rjmp	8000a852 <udd_ep_abort+0x72>
		udd_kill_last_in_bank(index);
8000a830:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a834:	a3 68       	lsl	r8,0x2
8000a836:	e0 38 fe 10 	sub	r8,130576
8000a83a:	e0 69 20 00 	mov	r9,8192
8000a83e:	91 09       	st.w	r8[0x0],r9
		while(Is_udd_killing_last_in_bank(index));
8000a840:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a844:	a3 68       	lsl	r8,0x2
8000a846:	e0 38 fe 40 	sub	r8,130624
8000a84a:	70 08       	ld.w	r8,r8[0x0]
8000a84c:	e2 18 20 00 	andl	r8,0x2000,COH
8000a850:	cf 81       	brne	8000a840 <udd_ep_abort+0x60>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
8000a852:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a856:	a3 68       	lsl	r8,0x2
8000a858:	e0 38 fe d0 	sub	r8,130768
8000a85c:	70 08       	ld.w	r8,r8[0x0]
8000a85e:	e2 18 30 00 	andl	r8,0x3000,COH
8000a862:	ad 88       	lsr	r8,0xc
8000a864:	ce 61       	brne	8000a830 <udd_ep_abort+0x50>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
8000a866:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a86a:	10 9c       	mov	r12,r8
8000a86c:	f0 1f 00 03 	mcall	8000a878 <udd_ep_abort+0x98>
}
8000a870:	2f ed       	sub	sp,-8
8000a872:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a876:	00 00       	add	r0,r0
8000a878:	80 00       	ld.sh	r0,r0[0x0]
8000a87a:	b4 44       	st.h	r10[0x8],r4

8000a87c <udd_ep_wait_stall_clear>:


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
8000a87c:	eb cd 40 80 	pushm	r7,lr
8000a880:	1a 97       	mov	r7,sp
8000a882:	20 3d       	sub	sp,12
8000a884:	18 98       	mov	r8,r12
8000a886:	ef 4b ff f4 	st.w	r7[-12],r11
8000a88a:	ef 68 ff f8 	st.b	r7[-8],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000a88e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a892:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a896:	ef 68 ff f8 	st.b	r7[-8],r8
	if (USB_DEVICE_MAX_EP < ep) {
8000a89a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000a89e:	30 28       	mov	r8,2
8000a8a0:	f0 09 18 00 	cp.b	r9,r8
8000a8a4:	e0 88 00 04 	brls	8000a8ac <udd_ep_wait_stall_clear+0x30>
		return false;
8000a8a8:	30 08       	mov	r8,0
8000a8aa:	c4 48       	rjmp	8000a932 <udd_ep_wait_stall_clear+0xb6>
	}

	ptr_job = &udd_ep_job[ep - 1];
8000a8ac:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a8b0:	f0 c9 00 01 	sub	r9,r8,1
8000a8b4:	12 98       	mov	r8,r9
8000a8b6:	a3 68       	lsl	r8,0x2
8000a8b8:	12 08       	add	r8,r9
8000a8ba:	a3 68       	lsl	r8,0x2
8000a8bc:	10 99       	mov	r9,r8
8000a8be:	4a 08       	lddpc	r8,8000a93c <udd_ep_wait_stall_clear+0xc0>
8000a8c0:	f2 08 00 08 	add	r8,r9,r8
8000a8c4:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!Is_udd_endpoint_enabled(ep)) {
8000a8c8:	fe 68 00 00 	mov	r8,-131072
8000a8cc:	70 79       	ld.w	r9,r8[0x1c]
8000a8ce:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a8d2:	30 1a       	mov	r10,1
8000a8d4:	f4 08 09 48 	lsl	r8,r10,r8
8000a8d8:	f3 e8 00 08 	and	r8,r9,r8
8000a8dc:	c0 31       	brne	8000a8e2 <udd_ep_wait_stall_clear+0x66>
		return false; // Endpoint not enabled
8000a8de:	30 08       	mov	r8,0
8000a8e0:	c2 98       	rjmp	8000a932 <udd_ep_wait_stall_clear+0xb6>
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
8000a8e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a8e6:	70 08       	ld.w	r8,r8[0x0]
8000a8e8:	e6 18 80 00 	andh	r8,0x8000,COH
8000a8ec:	c0 30       	breq	8000a8f2 <udd_ep_wait_stall_clear+0x76>
		return false; // Job already on going
8000a8ee:	30 08       	mov	r8,0
8000a8f0:	c2 18       	rjmp	8000a932 <udd_ep_wait_stall_clear+0xb6>
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000a8f2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a8f6:	a3 68       	lsl	r8,0x2
8000a8f8:	e0 38 fe 40 	sub	r8,130624
8000a8fc:	70 08       	ld.w	r8,r8[0x0]
8000a8fe:	e6 18 00 08 	andh	r8,0x8,COH
8000a902:	c0 71       	brne	8000a910 <udd_ep_wait_stall_clear+0x94>
			|| ptr_job->stall_requested) {
8000a904:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a908:	70 08       	ld.w	r8,r8[0x0]
8000a90a:	e6 18 20 00 	andh	r8,0x2000,COH
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000a90e:	c0 e0       	breq	8000a92a <udd_ep_wait_stall_clear+0xae>
			|| ptr_job->stall_requested) {
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
8000a910:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a914:	72 08       	ld.w	r8,r9[0x0]
8000a916:	30 1a       	mov	r10,1
8000a918:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a91c:	93 08       	st.w	r9[0x0],r8
		ptr_job->call_nohalt = callback;
8000a91e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a922:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a926:	91 49       	st.w	r8[0x10],r9
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000a928:	c0 48       	rjmp	8000a930 <udd_ep_wait_stall_clear+0xb4>
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
8000a92a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a92e:	5d 18       	icall	r8
	}
	return true;
8000a930:	30 18       	mov	r8,1
}
8000a932:	10 9c       	mov	r12,r8
8000a934:	2f dd       	sub	sp,-12
8000a936:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a93a:	00 00       	add	r0,r0
8000a93c:	00 00       	add	r0,r0
8000a93e:	07 c0       	ld.ub	r0,r3[0x4]

8000a940 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
8000a940:	eb cd 40 80 	pushm	r7,lr
8000a944:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000a946:	fe 68 00 00 	mov	r8,-131072
8000a94a:	fe 69 00 00 	mov	r9,-131072
8000a94e:	72 09       	ld.w	r9,r9[0x0]
8000a950:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a954:	ab b9       	sbr	r9,0xb
8000a956:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_j();
8000a958:	fe 68 00 00 	mov	r8,-131072
8000a95c:	fe 69 00 00 	mov	r9,-131072
8000a960:	72 09       	ld.w	r9,r9[0x0]
8000a962:	ad b9       	sbr	r9,0xd
8000a964:	91 09       	st.w	r8[0x0],r9
}
8000a966:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a96a <udd_test_mode_k>:


void udd_test_mode_k(void)
{
8000a96a:	eb cd 40 80 	pushm	r7,lr
8000a96e:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000a970:	fe 68 00 00 	mov	r8,-131072
8000a974:	fe 69 00 00 	mov	r9,-131072
8000a978:	72 09       	ld.w	r9,r9[0x0]
8000a97a:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a97e:	ab b9       	sbr	r9,0xb
8000a980:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_k();
8000a982:	fe 68 00 00 	mov	r8,-131072
8000a986:	fe 69 00 00 	mov	r9,-131072
8000a98a:	72 09       	ld.w	r9,r9[0x0]
8000a98c:	af a9       	sbr	r9,0xe
8000a98e:	91 09       	st.w	r8[0x0],r9
}
8000a990:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a994 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
8000a994:	eb cd 40 80 	pushm	r7,lr
8000a998:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000a99a:	fe 68 00 00 	mov	r8,-131072
8000a99e:	fe 69 00 00 	mov	r9,-131072
8000a9a2:	72 09       	ld.w	r9,r9[0x0]
8000a9a4:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a9a8:	ab b9       	sbr	r9,0xb
8000a9aa:	91 09       	st.w	r8[0x0],r9
}
8000a9ac:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a9b0 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
8000a9b0:	eb cd 40 80 	pushm	r7,lr
8000a9b4:	1a 97       	mov	r7,sp
8000a9b6:	21 7d       	sub	sp,92
				0xFF, 0xFF,
		// S, 111111S, {0111111S * 7}
		0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD,
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};
8000a9b8:	4d c9       	lddpc	r9,8000ab28 <udd_test_mode_packet+0x178>
8000a9ba:	ee c8 00 5c 	sub	r8,r7,92
8000a9be:	f2 ea 00 00 	ld.d	r10,r9[0]
8000a9c2:	f0 eb 00 00 	st.d	r8[0],r10
8000a9c6:	f2 ea 00 08 	ld.d	r10,r9[8]
8000a9ca:	f0 eb 00 08 	st.d	r8[8],r10
8000a9ce:	f2 ea 00 10 	ld.d	r10,r9[16]
8000a9d2:	f0 eb 00 10 	st.d	r8[16],r10
8000a9d6:	f2 ea 00 18 	ld.d	r10,r9[24]
8000a9da:	f0 eb 00 18 	st.d	r8[24],r10
8000a9de:	f2 ea 00 20 	ld.d	r10,r9[32]
8000a9e2:	f0 eb 00 20 	st.d	r8[32],r10
8000a9e6:	f2 ea 00 28 	ld.d	r10,r9[40]
8000a9ea:	f0 eb 00 28 	st.d	r8[40],r10
8000a9ee:	72 ca       	ld.w	r10,r9[0x30]
8000a9f0:	91 ca       	st.w	r8[0x30],r10
8000a9f2:	f3 39 00 34 	ld.ub	r9,r9[52]
8000a9f6:	f1 69 00 34 	st.b	r8[52],r9

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
8000a9fa:	fe 68 00 00 	mov	r8,-131072
8000a9fe:	fe 69 00 00 	mov	r9,-131072
8000aa02:	72 79       	ld.w	r9,r9[0x1c]
8000aa04:	a1 c9       	cbr	r9,0x0
8000aa06:	91 79       	st.w	r8[0x1c],r9
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
8000aa08:	fe 68 01 00 	mov	r8,-130816
8000aa0c:	fe 69 01 00 	mov	r9,-130816
8000aa10:	72 09       	ld.w	r9,r9[0x0]
8000aa12:	12 9a       	mov	r10,r9
8000aa14:	e0 1a e6 83 	andl	r10,0xe683
8000aa18:	34 09       	mov	r9,64
8000aa1a:	ef 49 ff f8 	st.w	r7[-8],r9
8000aa1e:	30 89       	mov	r9,8
8000aa20:	ef 49 ff fc 	st.w	r7[-4],r9
8000aa24:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000aa28:	ee fb ff fc 	ld.w	r11,r7[-4]
8000aa2c:	f2 0b 0c 49 	max	r9,r9,r11
8000aa30:	ef 49 ff f4 	st.w	r7[-12],r9
8000aa34:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000aa38:	ef 49 ff ec 	st.w	r7[-20],r9
8000aa3c:	e0 69 04 00 	mov	r9,1024
8000aa40:	ef 49 ff f0 	st.w	r7[-16],r9
8000aa44:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000aa48:	ee fb ff f0 	ld.w	r11,r7[-16]
8000aa4c:	f2 0b 0d 49 	min	r9,r9,r11
8000aa50:	ef 49 ff e8 	st.w	r7[-24],r9
8000aa54:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000aa58:	a1 79       	lsl	r9,0x1
8000aa5a:	20 19       	sub	r9,1
8000aa5c:	f2 09 12 00 	clz	r9,r9
8000aa60:	f2 09 11 1c 	rsub	r9,r9,28
8000aa64:	a5 69       	lsl	r9,0x4
8000aa66:	e2 19 08 7c 	andl	r9,0x87c,COH
8000aa6a:	f5 e9 10 09 	or	r9,r10,r9
8000aa6e:	e8 19 11 00 	orl	r9,0x1100
8000aa72:	91 09       	st.w	r8[0x0],r9
			64, AVR32_USBB_UECFG0_EPBK_SINGLE);
	udd_allocate_memory(0);
8000aa74:	fe 68 01 00 	mov	r8,-130816
8000aa78:	fe 69 01 00 	mov	r9,-130816
8000aa7c:	72 09       	ld.w	r9,r9[0x0]
8000aa7e:	a1 b9       	sbr	r9,0x1
8000aa80:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
8000aa82:	fe 68 00 00 	mov	r8,-131072
8000aa86:	fe 69 00 00 	mov	r9,-131072
8000aa8a:	72 79       	ld.w	r9,r9[0x1c]
8000aa8c:	a1 a9       	sbr	r9,0x0
8000aa8e:	91 79       	st.w	r8[0x1c],r9

	udd_enable_hs_test_mode();
8000aa90:	fe 68 00 00 	mov	r8,-131072
8000aa94:	fe 69 00 00 	mov	r9,-131072
8000aa98:	72 09       	ld.w	r9,r9[0x0]
8000aa9a:	e0 19 f3 ff 	andl	r9,0xf3ff
8000aa9e:	ab b9       	sbr	r9,0xb
8000aaa0:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_packet();
8000aaa2:	fe 68 00 00 	mov	r8,-131072
8000aaa6:	fe 69 00 00 	mov	r9,-131072
8000aaaa:	72 09       	ld.w	r9,r9[0x0]
8000aaac:	af b9       	sbr	r9,0xf
8000aaae:	91 09       	st.w	r8[0x0],r9

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000aab0:	fc 18 e0 00 	movh	r8,0xe000
8000aab4:	ef 48 ff dc 	st.w	r7[-36],r8
	ptr_src = test_packet;
8000aab8:	ee c8 00 5c 	sub	r8,r7,92
8000aabc:	ef 48 ff e0 	st.w	r7[-32],r8

	for (i = 0; i < sizeof(test_packet); i++) {
8000aac0:	30 08       	mov	r8,0
8000aac2:	ef 68 ff db 	st.b	r7[-37],r8
8000aac6:	c1 68       	rjmp	8000aaf2 <udd_test_mode_packet+0x142>
		*ptr_dest++ = *ptr_src++;
8000aac8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000aacc:	11 88       	ld.ub	r8,r8[0x0]
8000aace:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000aad2:	b2 88       	st.b	r9[0x0],r8
8000aad4:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000aad8:	2f f8       	sub	r8,-1
8000aada:	ef 48 ff dc 	st.w	r7[-36],r8
8000aade:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000aae2:	2f f8       	sub	r8,-1
8000aae4:	ef 48 ff e0 	st.w	r7[-32],r8

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
8000aae8:	ef 38 ff db 	ld.ub	r8,r7[-37]
8000aaec:	2f f8       	sub	r8,-1
8000aaee:	ef 68 ff db 	st.b	r7[-37],r8
8000aaf2:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000aaf6:	33 48       	mov	r8,52
8000aaf8:	f0 09 18 00 	cp.b	r9,r8
8000aafc:	fe 98 ff e6 	brls	8000aac8 <udd_test_mode_packet+0x118>
		*ptr_dest++ = *ptr_src++;
	}
	flags = cpu_irq_save();
8000ab00:	f0 1f 00 0b 	mcall	8000ab2c <udd_test_mode_packet+0x17c>
8000ab04:	18 98       	mov	r8,r12
8000ab06:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_in_send_interrupt(0);
8000ab0a:	fe 68 01 f0 	mov	r8,-130576
8000ab0e:	30 19       	mov	r9,1
8000ab10:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000ab12:	ee fc ff e4 	ld.w	r12,r7[-28]
8000ab16:	f0 1f 00 07 	mcall	8000ab30 <udd_test_mode_packet+0x180>

	udd_ack_in_send(0);
8000ab1a:	fe 68 01 60 	mov	r8,-130720
8000ab1e:	30 19       	mov	r9,1
8000ab20:	91 09       	st.w	r8[0x0],r9
}
8000ab22:	2e 9d       	sub	sp,-92
8000ab24:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab28:	80 00       	ld.sh	r0,r0[0x0]
8000ab2a:	f3 ec 80 00 	sthh.w	r0[r0],r9:b,r12:b
8000ab2e:	9a a0       	ld.uh	r0,sp[0x4]
8000ab30:	80 00       	ld.sh	r0,r0[0x0]
8000ab32:	9a be       	ld.uh	lr,sp[0x6]

8000ab34 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
8000ab34:	eb cd 40 80 	pushm	r7,lr
8000ab38:	1a 97       	mov	r7,sp
8000ab3a:	20 7d       	sub	sp,28
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
8000ab3c:	fe 68 00 00 	mov	r8,-131072
8000ab40:	fe 69 00 00 	mov	r9,-131072
8000ab44:	72 09       	ld.w	r9,r9[0x0]
8000ab46:	e0 19 ff 80 	andl	r9,0xff80
8000ab4a:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000ab4c:	fe 68 00 00 	mov	r8,-131072
8000ab50:	fe 69 00 00 	mov	r9,-131072
8000ab54:	72 09       	ld.w	r9,r9[0x0]
8000ab56:	a7 b9       	sbr	r9,0x7
8000ab58:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
8000ab5a:	fe 68 01 00 	mov	r8,-130816
8000ab5e:	fe 69 01 00 	mov	r9,-130816
8000ab62:	72 09       	ld.w	r9,r9[0x0]
8000ab64:	12 9a       	mov	r10,r9
8000ab66:	e0 1a e6 83 	andl	r10,0xe683
8000ab6a:	34 09       	mov	r9,64
8000ab6c:	ef 49 ff f8 	st.w	r7[-8],r9
8000ab70:	30 89       	mov	r9,8
8000ab72:	ef 49 ff fc 	st.w	r7[-4],r9
8000ab76:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ab7a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ab7e:	f2 0b 0c 49 	max	r9,r9,r11
8000ab82:	ef 49 ff f4 	st.w	r7[-12],r9
8000ab86:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ab8a:	ef 49 ff ec 	st.w	r7[-20],r9
8000ab8e:	e0 69 04 00 	mov	r9,1024
8000ab92:	ef 49 ff f0 	st.w	r7[-16],r9
8000ab96:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000ab9a:	ee fb ff f0 	ld.w	r11,r7[-16]
8000ab9e:	f2 0b 0d 49 	min	r9,r9,r11
8000aba2:	ef 49 ff e8 	st.w	r7[-24],r9
8000aba6:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000abaa:	a1 79       	lsl	r9,0x1
8000abac:	20 19       	sub	r9,1
8000abae:	f2 09 12 00 	clz	r9,r9
8000abb2:	f2 09 11 1c 	rsub	r9,r9,28
8000abb6:	a5 69       	lsl	r9,0x4
8000abb8:	e2 19 19 7c 	andl	r9,0x197c,COH
8000abbc:	f5 e9 10 09 	or	r9,r10,r9
8000abc0:	91 09       	st.w	r8[0x0],r9
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
8000abc2:	fe 68 01 00 	mov	r8,-130816
8000abc6:	fe 69 01 00 	mov	r9,-130816
8000abca:	72 09       	ld.w	r9,r9[0x0]
8000abcc:	a1 b9       	sbr	r9,0x1
8000abce:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
8000abd0:	fe 68 00 00 	mov	r8,-131072
8000abd4:	fe 69 00 00 	mov	r9,-131072
8000abd8:	72 79       	ld.w	r9,r9[0x1c]
8000abda:	a1 a9       	sbr	r9,0x0
8000abdc:	91 79       	st.w	r8[0x1c],r9
	flags = cpu_irq_save();
8000abde:	f0 1f 00 0d 	mcall	8000ac10 <udd_reset_ep_ctrl+0xdc>
8000abe2:	18 98       	mov	r8,r12
8000abe4:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_setup_received_interrupt(0);
8000abe8:	fe 68 01 f0 	mov	r8,-130576
8000abec:	30 49       	mov	r9,4
8000abee:	91 09       	st.w	r8[0x0],r9
	udd_enable_out_received_interrupt(0);
8000abf0:	fe 68 01 f0 	mov	r8,-130576
8000abf4:	30 29       	mov	r9,2
8000abf6:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint_interrupt(0);
8000abf8:	fe 68 00 00 	mov	r8,-131072
8000abfc:	e0 69 10 00 	mov	r9,4096
8000ac00:	91 69       	st.w	r8[0x18],r9
	cpu_irq_restore(flags);
8000ac02:	ee fc ff e4 	ld.w	r12,r7[-28]
8000ac06:	f0 1f 00 04 	mcall	8000ac14 <udd_reset_ep_ctrl+0xe0>
}
8000ac0a:	2f 9d       	sub	sp,-28
8000ac0c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac10:	80 00       	ld.sh	r0,r0[0x0]
8000ac12:	9a a0       	ld.uh	r0,sp[0x4]
8000ac14:	80 00       	ld.sh	r0,r0[0x0]
8000ac16:	9a be       	ld.uh	lr,sp[0x6]

8000ac18 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
8000ac18:	eb cd 40 80 	pushm	r7,lr
8000ac1c:	1a 97       	mov	r7,sp
8000ac1e:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
8000ac20:	f0 1f 00 10 	mcall	8000ac60 <udd_ctrl_init+0x48>
8000ac24:	18 98       	mov	r8,r12
8000ac26:	ef 48 ff fc 	st.w	r7[-4],r8
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
8000ac2a:	fe 68 02 20 	mov	r8,-130528
8000ac2e:	30 19       	mov	r9,1
8000ac30:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000ac32:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ac36:	f0 1f 00 0c 	mcall	8000ac64 <udd_ctrl_init+0x4c>

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
8000ac3a:	fe 68 01 60 	mov	r8,-130720
8000ac3e:	30 29       	mov	r9,2
8000ac40:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
8000ac42:	48 a8       	lddpc	r8,8000ac68 <udd_ctrl_init+0x50>
8000ac44:	30 09       	mov	r9,0
8000ac46:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000ac48:	48 88       	lddpc	r8,8000ac68 <udd_ctrl_init+0x50>
8000ac4a:	30 09       	mov	r9,0
8000ac4c:	91 59       	st.w	r8[0x14],r9
	udd_g_ctrlreq.payload_size = 0;
8000ac4e:	48 79       	lddpc	r9,8000ac68 <udd_ctrl_init+0x50>
8000ac50:	30 08       	mov	r8,0
8000ac52:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
8000ac54:	48 68       	lddpc	r8,8000ac6c <udd_ctrl_init+0x54>
8000ac56:	30 09       	mov	r9,0
8000ac58:	91 09       	st.w	r8[0x0],r9
}
8000ac5a:	2f fd       	sub	sp,-4
8000ac5c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac60:	80 00       	ld.sh	r0,r0[0x0]
8000ac62:	9a a0       	ld.uh	r0,sp[0x4]
8000ac64:	80 00       	ld.sh	r0,r0[0x0]
8000ac66:	9a be       	ld.uh	lr,sp[0x6]
8000ac68:	00 00       	add	r0,r0
8000ac6a:	10 08       	add	r8,r8
8000ac6c:	00 00       	add	r0,r0
8000ac6e:	07 b8       	ld.ub	r8,r3[0x3]

8000ac70 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
8000ac70:	eb cd 40 80 	pushm	r7,lr
8000ac74:	1a 97       	mov	r7,sp
8000ac76:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
8000ac78:	4c b8       	lddpc	r8,8000ada4 <udd_ctrl_setup_received+0x134>
8000ac7a:	70 08       	ld.w	r8,r8[0x0]
8000ac7c:	58 08       	cp.w	r8,0
8000ac7e:	c0 50       	breq	8000ac88 <udd_ctrl_setup_received+0x18>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
8000ac80:	f0 1f 00 4a 	mcall	8000ada8 <udd_ctrl_setup_received+0x138>

		// Reinitializes control endpoint management
		udd_ctrl_init();
8000ac84:	f0 1f 00 4a 	mcall	8000adac <udd_ctrl_setup_received+0x13c>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
8000ac88:	fe 68 01 30 	mov	r8,-130768
8000ac8c:	70 08       	ld.w	r8,r8[0x0]
8000ac8e:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000ac92:	b5 88       	lsr	r8,0x14
8000ac94:	58 88       	cp.w	r8,8
8000ac96:	c0 80       	breq	8000aca6 <udd_ctrl_setup_received+0x36>
		udd_ctrl_stall_data();
8000ac98:	f0 1f 00 46 	mcall	8000adb0 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
8000ac9c:	fe 68 01 60 	mov	r8,-130720
8000aca0:	30 49       	mov	r9,4
8000aca2:	91 09       	st.w	r8[0x0],r9
		return; // Error data number doesn't correspond to SETUP packet
8000aca4:	c7 d8       	rjmp	8000ad9e <udd_ctrl_setup_received+0x12e>
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
8000aca6:	fc 18 e0 00 	movh	r8,0xe000
8000acaa:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < 8; i++) {
8000acae:	30 08       	mov	r8,0
8000acb0:	ef 68 ff fb 	st.b	r7[-5],r8
8000acb4:	c1 38       	rjmp	8000acda <udd_ctrl_setup_received+0x6a>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
8000acb6:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000acba:	4b f8       	lddpc	r8,8000adb4 <udd_ctrl_setup_received+0x144>
8000acbc:	10 09       	add	r9,r8
8000acbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000acc2:	11 88       	ld.ub	r8,r8[0x0]
8000acc4:	b2 88       	st.b	r9[0x0],r8
8000acc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000acca:	2f f8       	sub	r8,-1
8000accc:	ef 48 ff fc 	st.w	r7[-4],r8
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
8000acd0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000acd4:	2f f8       	sub	r8,-1
8000acd6:	ef 68 ff fb 	st.b	r7[-5],r8
8000acda:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000acde:	30 78       	mov	r8,7
8000ace0:	f0 09 18 00 	cp.b	r9,r8
8000ace4:	fe 98 ff e9 	brls	8000acb6 <udd_ctrl_setup_received+0x46>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
8000ace8:	4b 38       	lddpc	r8,8000adb4 <udd_ctrl_setup_received+0x144>
8000acea:	90 18       	ld.sh	r8,r8[0x2]
8000acec:	5c 88       	casts.h	r8
8000acee:	5c c8       	swap.bh	r8
8000acf0:	5c 88       	casts.h	r8
8000acf2:	4b 19       	lddpc	r9,8000adb4 <udd_ctrl_setup_received+0x144>
8000acf4:	b2 18       	st.h	r9[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
8000acf6:	4b 08       	lddpc	r8,8000adb4 <udd_ctrl_setup_received+0x144>
8000acf8:	90 28       	ld.sh	r8,r8[0x4]
8000acfa:	5c 88       	casts.h	r8
8000acfc:	5c c8       	swap.bh	r8
8000acfe:	5c 88       	casts.h	r8
8000ad00:	4a d9       	lddpc	r9,8000adb4 <udd_ctrl_setup_received+0x144>
8000ad02:	b2 28       	st.h	r9[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
8000ad04:	4a c8       	lddpc	r8,8000adb4 <udd_ctrl_setup_received+0x144>
8000ad06:	90 38       	ld.sh	r8,r8[0x6]
8000ad08:	5c 88       	casts.h	r8
8000ad0a:	5c c8       	swap.bh	r8
8000ad0c:	5c 88       	casts.h	r8
8000ad0e:	4a a9       	lddpc	r9,8000adb4 <udd_ctrl_setup_received+0x144>
8000ad10:	b2 38       	st.h	r9[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
8000ad12:	f0 1f 00 2a 	mcall	8000adb8 <udd_ctrl_setup_received+0x148>
8000ad16:	18 98       	mov	r8,r12
8000ad18:	ec 18 00 01 	eorl	r8,0x1
8000ad1c:	5c 58       	castu.b	r8
8000ad1e:	c0 80       	breq	8000ad2e <udd_ctrl_setup_received+0xbe>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
8000ad20:	f0 1f 00 24 	mcall	8000adb0 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
8000ad24:	fe 68 01 60 	mov	r8,-130720
8000ad28:	30 49       	mov	r9,4
8000ad2a:	91 09       	st.w	r8[0x0],r9
		return;
8000ad2c:	c3 98       	rjmp	8000ad9e <udd_ctrl_setup_received+0x12e>
	}
	udd_ack_setup_received(0);
8000ad2e:	fe 68 01 60 	mov	r8,-130720
8000ad32:	30 49       	mov	r9,4
8000ad34:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
8000ad36:	4a 08       	lddpc	r8,8000adb4 <udd_ctrl_setup_received+0x144>
8000ad38:	11 88       	ld.ub	r8,r8[0x0]
8000ad3a:	10 99       	mov	r9,r8
8000ad3c:	30 08       	mov	r8,0
8000ad3e:	f0 09 18 00 	cp.b	r9,r8
8000ad42:	c0 d4       	brge	8000ad5c <udd_ctrl_setup_received+0xec>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
8000ad44:	49 e9       	lddpc	r9,8000adbc <udd_ctrl_setup_received+0x14c>
8000ad46:	30 08       	mov	r8,0
8000ad48:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000ad4a:	49 e9       	lddpc	r9,8000adc0 <udd_ctrl_setup_received+0x150>
8000ad4c:	30 08       	mov	r8,0
8000ad4e:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
8000ad50:	49 58       	lddpc	r8,8000ada4 <udd_ctrl_setup_received+0x134>
8000ad52:	30 29       	mov	r9,2
8000ad54:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
8000ad56:	f0 1f 00 1c 	mcall	8000adc4 <udd_ctrl_setup_received+0x154>
8000ad5a:	c2 28       	rjmp	8000ad9e <udd_ctrl_setup_received+0x12e>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
8000ad5c:	49 68       	lddpc	r8,8000adb4 <udd_ctrl_setup_received+0x144>
8000ad5e:	90 38       	ld.sh	r8,r8[0x6]
8000ad60:	58 08       	cp.w	r8,0
8000ad62:	c0 41       	brne	8000ad6a <udd_ctrl_setup_received+0xfa>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
8000ad64:	f0 1f 00 19 	mcall	8000adc8 <udd_ctrl_setup_received+0x158>
			return;
8000ad68:	c1 b8       	rjmp	8000ad9e <udd_ctrl_setup_received+0x12e>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
8000ad6a:	49 59       	lddpc	r9,8000adbc <udd_ctrl_setup_received+0x14c>
8000ad6c:	30 08       	mov	r8,0
8000ad6e:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000ad70:	49 49       	lddpc	r9,8000adc0 <udd_ctrl_setup_received+0x150>
8000ad72:	30 08       	mov	r8,0
8000ad74:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
8000ad76:	48 c8       	lddpc	r8,8000ada4 <udd_ctrl_setup_received+0x134>
8000ad78:	30 19       	mov	r9,1
8000ad7a:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
8000ad7c:	fe 68 01 60 	mov	r8,-130720
8000ad80:	31 09       	mov	r9,16
8000ad82:	91 09       	st.w	r8[0x0],r9
		flags = cpu_irq_save();
8000ad84:	f0 1f 00 12 	mcall	8000adcc <udd_ctrl_setup_received+0x15c>
8000ad88:	18 98       	mov	r8,r12
8000ad8a:	ef 48 ff f4 	st.w	r7[-12],r8
		udd_enable_nak_in_interrupt(0);
8000ad8e:	fe 68 01 f0 	mov	r8,-130576
8000ad92:	31 09       	mov	r9,16
8000ad94:	91 09       	st.w	r8[0x0],r9
		cpu_irq_restore(flags);
8000ad96:	ee fc ff f4 	ld.w	r12,r7[-12]
8000ad9a:	f0 1f 00 0e 	mcall	8000add0 <udd_ctrl_setup_received+0x160>
	}
}
8000ad9e:	2f dd       	sub	sp,-12
8000ada0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ada4:	00 00       	add	r0,r0
8000ada6:	07 b8       	ld.ub	r8,r3[0x3]
8000ada8:	80 00       	ld.sh	r0,r0[0x0]
8000adaa:	b2 98       	st.b	r9[0x1],r8
8000adac:	80 00       	ld.sh	r0,r0[0x0]
8000adae:	ac 18       	st.h	r6[0x2],r8
8000adb0:	80 00       	ld.sh	r0,r0[0x0]
8000adb2:	b1 e0       	*unknown*
8000adb4:	00 00       	add	r0,r0
8000adb6:	10 08       	add	r8,r8
8000adb8:	80 00       	ld.sh	r0,r0[0x0]
8000adba:	e0 70 00 00 	mov	r0,65536
8000adbe:	07 bc       	ld.ub	r12,r3[0x3]
8000adc0:	00 00       	add	r0,r0
8000adc2:	07 be       	ld.ub	lr,r3[0x3]
8000adc4:	80 00       	ld.sh	r0,r0[0x0]
8000adc6:	ad d4       	cbr	r4,0xd
8000adc8:	80 00       	ld.sh	r0,r0[0x0]
8000adca:	b2 00       	st.h	r9[0x0],r0
8000adcc:	80 00       	ld.sh	r0,r0[0x0]
8000adce:	9a a0       	ld.uh	r0,sp[0x4]
8000add0:	80 00       	ld.sh	r0,r0[0x0]
8000add2:	9a be       	ld.uh	lr,sp[0x6]

8000add4 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
8000add4:	eb cd 40 80 	pushm	r7,lr
8000add8:	1a 97       	mov	r7,sp
8000adda:	20 4d       	sub	sp,16
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
8000addc:	f0 1f 00 5c 	mcall	8000af4c <udd_ctrl_in_sent+0x178>
8000ade0:	18 98       	mov	r8,r12
8000ade2:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_disable_in_send_interrupt(0);
8000ade6:	fe 68 02 20 	mov	r8,-130528
8000adea:	30 19       	mov	r9,1
8000adec:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000adee:	ee fc ff fc 	ld.w	r12,r7[-4]
8000adf2:	f0 1f 00 58 	mcall	8000af50 <udd_ctrl_in_sent+0x17c>

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000adf6:	4d 88       	lddpc	r8,8000af54 <udd_ctrl_in_sent+0x180>
8000adf8:	70 08       	ld.w	r8,r8[0x0]
8000adfa:	58 38       	cp.w	r8,3
8000adfc:	c0 61       	brne	8000ae08 <udd_ctrl_in_sent+0x34>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
8000adfe:	f0 1f 00 57 	mcall	8000af58 <udd_ctrl_in_sent+0x184>
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000ae02:	f0 1f 00 57 	mcall	8000af5c <udd_ctrl_in_sent+0x188>
		return;
8000ae06:	c9 f8       	rjmp	8000af44 <udd_ctrl_in_sent+0x170>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000ae08:	4d 68       	lddpc	r8,8000af60 <udd_ctrl_in_sent+0x18c>
8000ae0a:	90 69       	ld.sh	r9,r8[0xc]
8000ae0c:	4d 68       	lddpc	r8,8000af64 <udd_ctrl_in_sent+0x190>
8000ae0e:	90 08       	ld.sh	r8,r8[0x0]
8000ae10:	10 19       	sub	r9,r8
8000ae12:	ef 59 ff f0 	st.h	r7[-16],r9
	if (0 == nb_remain) {
8000ae16:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ae1a:	30 08       	mov	r8,0
8000ae1c:	f0 09 19 00 	cp.h	r9,r8
8000ae20:	c2 b1       	brne	8000ae76 <udd_ctrl_in_sent+0xa2>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000ae22:	4d 28       	lddpc	r8,8000af68 <udd_ctrl_in_sent+0x194>
8000ae24:	90 09       	ld.sh	r9,r8[0x0]
8000ae26:	4d 08       	lddpc	r8,8000af64 <udd_ctrl_in_sent+0x190>
8000ae28:	90 08       	ld.sh	r8,r8[0x0]
8000ae2a:	f2 08 00 08 	add	r8,r9,r8
8000ae2e:	5c 88       	casts.h	r8
8000ae30:	4c e9       	lddpc	r9,8000af68 <udd_ctrl_in_sent+0x194>
8000ae32:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
8000ae34:	4c b8       	lddpc	r8,8000af60 <udd_ctrl_in_sent+0x18c>
8000ae36:	90 39       	ld.sh	r9,r8[0x6]
8000ae38:	4c c8       	lddpc	r8,8000af68 <udd_ctrl_in_sent+0x194>
8000ae3a:	90 08       	ld.sh	r8,r8[0x0]
8000ae3c:	f0 09 19 00 	cp.h	r9,r8
8000ae40:	c0 50       	breq	8000ae4a <udd_ctrl_in_sent+0x76>
8000ae42:	4c b8       	lddpc	r8,8000af6c <udd_ctrl_in_sent+0x198>
8000ae44:	11 88       	ld.ub	r8,r8[0x0]
8000ae46:	58 08       	cp.w	r8,0
8000ae48:	c0 40       	breq	8000ae50 <udd_ctrl_in_sent+0x7c>
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
8000ae4a:	f0 1f 00 4a 	mcall	8000af70 <udd_ctrl_in_sent+0x19c>
			return;
8000ae4e:	c7 b8       	rjmp	8000af44 <udd_ctrl_in_sent+0x170>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
8000ae50:	4c 48       	lddpc	r8,8000af60 <udd_ctrl_in_sent+0x18c>
8000ae52:	70 58       	ld.w	r8,r8[0x14]
8000ae54:	58 08       	cp.w	r8,0
8000ae56:	c1 00       	breq	8000ae76 <udd_ctrl_in_sent+0xa2>
8000ae58:	4c 28       	lddpc	r8,8000af60 <udd_ctrl_in_sent+0x18c>
8000ae5a:	70 58       	ld.w	r8,r8[0x14]
8000ae5c:	5d 18       	icall	r8
8000ae5e:	18 98       	mov	r8,r12
8000ae60:	ec 18 00 01 	eorl	r8,0x1
8000ae64:	5c 58       	castu.b	r8
8000ae66:	c0 81       	brne	8000ae76 <udd_ctrl_in_sent+0xa2>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
8000ae68:	4b f9       	lddpc	r9,8000af64 <udd_ctrl_in_sent+0x190>
8000ae6a:	30 08       	mov	r8,0
8000ae6c:	b2 08       	st.h	r9[0x0],r8
			nb_remain = udd_g_ctrlreq.payload_size;
8000ae6e:	4b d8       	lddpc	r8,8000af60 <udd_ctrl_in_sent+0x18c>
8000ae70:	90 68       	ld.sh	r8,r8[0xc]
8000ae72:	ef 58 ff f0 	st.h	r7[-16],r8
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
8000ae76:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ae7a:	33 f8       	mov	r8,63
8000ae7c:	f0 09 19 00 	cp.h	r9,r8
8000ae80:	e0 88 00 09 	brls	8000ae92 <udd_ctrl_in_sent+0xbe>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
8000ae84:	34 08       	mov	r8,64
8000ae86:	ef 58 ff f0 	st.h	r7[-16],r8
		b_shortpacket = false;
8000ae8a:	4b 99       	lddpc	r9,8000af6c <udd_ctrl_in_sent+0x198>
8000ae8c:	30 08       	mov	r8,0
8000ae8e:	b2 88       	st.b	r9[0x0],r8
8000ae90:	c0 48       	rjmp	8000ae98 <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
8000ae92:	4b 79       	lddpc	r9,8000af6c <udd_ctrl_in_sent+0x198>
8000ae94:	30 18       	mov	r8,1
8000ae96:	b2 88       	st.b	r9[0x0],r8
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000ae98:	fc 18 e0 00 	movh	r8,0xe000
8000ae9c:	ef 48 ff f4 	st.w	r7[-12],r8
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000aea0:	4b 08       	lddpc	r8,8000af60 <udd_ctrl_in_sent+0x18c>
8000aea2:	70 29       	ld.w	r9,r8[0x8]
8000aea4:	4b 08       	lddpc	r8,8000af64 <udd_ctrl_in_sent+0x190>
8000aea6:	90 08       	ld.sh	r8,r8[0x0]
8000aea8:	5c 78       	castu.h	r8
8000aeaa:	f2 08 00 08 	add	r8,r9,r8
8000aeae:	ef 48 ff f8 	st.w	r7[-8],r8
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
8000aeb2:	f0 1f 00 27 	mcall	8000af4c <udd_ctrl_in_sent+0x178>
8000aeb6:	18 98       	mov	r8,r12
8000aeb8:	ef 48 ff fc 	st.w	r7[-4],r8
	if (Is_udd_out_received(0)) {
8000aebc:	fe 68 01 30 	mov	r8,-130768
8000aec0:	70 08       	ld.w	r8,r8[0x0]
8000aec2:	e2 18 00 02 	andl	r8,0x2,COH
8000aec6:	c0 90       	breq	8000aed8 <udd_ctrl_in_sent+0x104>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
8000aec8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000aecc:	f0 1f 00 21 	mcall	8000af50 <udd_ctrl_in_sent+0x17c>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000aed0:	4a 18       	lddpc	r8,8000af54 <udd_ctrl_in_sent+0x180>
8000aed2:	30 49       	mov	r9,4
8000aed4:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
8000aed6:	c3 78       	rjmp	8000af44 <udd_ctrl_in_sent+0x170>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000aed8:	30 08       	mov	r8,0
8000aeda:	ef 68 ff f3 	st.b	r7[-13],r8
8000aede:	c1 68       	rjmp	8000af0a <udd_ctrl_in_sent+0x136>
		*ptr_dest++ = *ptr_src++;
8000aee0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aee4:	11 88       	ld.ub	r8,r8[0x0]
8000aee6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000aeea:	b2 88       	st.b	r9[0x0],r8
8000aeec:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aef0:	2f f8       	sub	r8,-1
8000aef2:	ef 48 ff f4 	st.w	r7[-12],r8
8000aef6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aefa:	2f f8       	sub	r8,-1
8000aefc:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000af00:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000af04:	2f f8       	sub	r8,-1
8000af06:	ef 68 ff f3 	st.b	r7[-13],r8
8000af0a:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000af0e:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000af12:	f0 09 19 00 	cp.h	r9,r8
8000af16:	fe 9b ff e5 	brhi	8000aee0 <udd_ctrl_in_sent+0x10c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
8000af1a:	49 38       	lddpc	r8,8000af64 <udd_ctrl_in_sent+0x190>
8000af1c:	90 08       	ld.sh	r8,r8[0x0]
8000af1e:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000af22:	f2 08 00 08 	add	r8,r9,r8
8000af26:	5c 88       	casts.h	r8
8000af28:	48 f9       	lddpc	r9,8000af64 <udd_ctrl_in_sent+0x190>
8000af2a:	b2 08       	st.h	r9[0x0],r8

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
8000af2c:	fe 68 01 60 	mov	r8,-130720
8000af30:	30 19       	mov	r9,1
8000af32:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
8000af34:	fe 68 01 f0 	mov	r8,-130576
8000af38:	30 19       	mov	r9,1
8000af3a:	91 09       	st.w	r8[0x0],r9
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
8000af3c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000af40:	f0 1f 00 04 	mcall	8000af50 <udd_ctrl_in_sent+0x17c>
}
8000af44:	2f cd       	sub	sp,-16
8000af46:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af4a:	00 00       	add	r0,r0
8000af4c:	80 00       	ld.sh	r0,r0[0x0]
8000af4e:	9a a0       	ld.uh	r0,sp[0x4]
8000af50:	80 00       	ld.sh	r0,r0[0x0]
8000af52:	9a be       	ld.uh	lr,sp[0x6]
8000af54:	00 00       	add	r0,r0
8000af56:	07 b8       	ld.ub	r8,r3[0x3]
8000af58:	80 00       	ld.sh	r0,r0[0x0]
8000af5a:	b2 98       	st.b	r9[0x1],r8
8000af5c:	80 00       	ld.sh	r0,r0[0x0]
8000af5e:	ac 18       	st.h	r6[0x2],r8
8000af60:	00 00       	add	r0,r0
8000af62:	10 08       	add	r8,r8
8000af64:	00 00       	add	r0,r0
8000af66:	07 be       	ld.ub	lr,r3[0x3]
8000af68:	00 00       	add	r0,r0
8000af6a:	07 bc       	ld.ub	r12,r3[0x3]
8000af6c:	00 00       	add	r0,r0
8000af6e:	07 e8       	ld.ub	r8,r3[0x6]
8000af70:	80 00       	ld.sh	r0,r0[0x0]
8000af72:	b2 54       	st.h	r9[0xa],r4

8000af74 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
8000af74:	eb cd 40 80 	pushm	r7,lr
8000af78:	1a 97       	mov	r7,sp
8000af7a:	20 4d       	sub	sp,16
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
8000af7c:	4f 18       	lddpc	r8,8000b140 <udd_ctrl_out_received+0x1cc>
8000af7e:	70 08       	ld.w	r8,r8[0x0]
8000af80:	58 18       	cp.w	r8,1
8000af82:	c1 10       	breq	8000afa4 <udd_ctrl_out_received+0x30>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000af84:	4e f8       	lddpc	r8,8000b140 <udd_ctrl_out_received+0x1cc>
8000af86:	70 08       	ld.w	r8,r8[0x0]
8000af88:	58 28       	cp.w	r8,2
8000af8a:	c0 50       	breq	8000af94 <udd_ctrl_out_received+0x20>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
8000af8c:	4e d8       	lddpc	r8,8000b140 <udd_ctrl_out_received+0x1cc>
8000af8e:	70 08       	ld.w	r8,r8[0x0]
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000af90:	58 48       	cp.w	r8,4
8000af92:	c0 41       	brne	8000af9a <udd_ctrl_out_received+0x26>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
8000af94:	f0 1f 00 6c 	mcall	8000b144 <udd_ctrl_out_received+0x1d0>
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000af98:	c0 38       	rjmp	8000af9e <udd_ctrl_out_received+0x2a>
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
8000af9a:	f0 1f 00 6c 	mcall	8000b148 <udd_ctrl_out_received+0x1d4>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000af9e:	f0 1f 00 6c 	mcall	8000b14c <udd_ctrl_out_received+0x1d8>
		return;
8000afa2:	cc b8       	rjmp	8000b138 <udd_ctrl_out_received+0x1c4>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
8000afa4:	fe 68 01 30 	mov	r8,-130768
8000afa8:	70 08       	ld.w	r8,r8[0x0]
8000afaa:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000afae:	b5 88       	lsr	r8,0x14
8000afb0:	ef 58 ff f6 	st.h	r7[-10],r8
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
8000afb4:	4e 78       	lddpc	r8,8000b150 <udd_ctrl_out_received+0x1dc>
8000afb6:	90 68       	ld.sh	r8,r8[0xc]
8000afb8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000afbc:	4e 68       	lddpc	r8,8000b154 <udd_ctrl_out_received+0x1e0>
8000afbe:	90 08       	ld.sh	r8,r8[0x0]
8000afc0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000afc4:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000afc8:	f4 08 00 08 	add	r8,r10,r8
8000afcc:	10 39       	cp.w	r9,r8
8000afce:	c0 84       	brge	8000afde <udd_ctrl_out_received+0x6a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
8000afd0:	4e 08       	lddpc	r8,8000b150 <udd_ctrl_out_received+0x1dc>
8000afd2:	90 69       	ld.sh	r9,r8[0xc]
8000afd4:	4e 08       	lddpc	r8,8000b154 <udd_ctrl_out_received+0x1e0>
8000afd6:	90 08       	ld.sh	r8,r8[0x0]
8000afd8:	10 19       	sub	r9,r8
8000afda:	ef 59 ff f6 	st.h	r7[-10],r9
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000afde:	fc 18 e0 00 	movh	r8,0xe000
8000afe2:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000afe6:	4d b8       	lddpc	r8,8000b150 <udd_ctrl_out_received+0x1dc>
8000afe8:	70 29       	ld.w	r9,r8[0x8]
8000afea:	4d b8       	lddpc	r8,8000b154 <udd_ctrl_out_received+0x1e0>
8000afec:	90 08       	ld.sh	r8,r8[0x0]
8000afee:	5c 78       	castu.h	r8
8000aff0:	f2 08 00 08 	add	r8,r9,r8
8000aff4:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < nb_data; i++) {
8000aff8:	30 08       	mov	r8,0
8000affa:	ef 68 ff f5 	st.b	r7[-11],r8
8000affe:	c1 68       	rjmp	8000b02a <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = *ptr_src++;
8000b000:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b004:	11 88       	ld.ub	r8,r8[0x0]
8000b006:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b00a:	b2 88       	st.b	r9[0x0],r8
8000b00c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b010:	2f f8       	sub	r8,-1
8000b012:	ef 48 ff fc 	st.w	r7[-4],r8
8000b016:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b01a:	2f f8       	sub	r8,-1
8000b01c:	ef 48 ff f8 	st.w	r7[-8],r8
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
8000b020:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000b024:	2f f8       	sub	r8,-1
8000b026:	ef 68 ff f5 	st.b	r7[-11],r8
8000b02a:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000b02e:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000b032:	f0 09 19 00 	cp.h	r9,r8
8000b036:	fe 9b ff e5 	brhi	8000b000 <udd_ctrl_out_received+0x8c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
8000b03a:	4c 78       	lddpc	r8,8000b154 <udd_ctrl_out_received+0x1e0>
8000b03c:	90 08       	ld.sh	r8,r8[0x0]
8000b03e:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000b042:	f2 08 00 08 	add	r8,r9,r8
8000b046:	5c 88       	casts.h	r8
8000b048:	4c 39       	lddpc	r9,8000b154 <udd_ctrl_out_received+0x1e0>
8000b04a:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000b04c:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000b050:	34 08       	mov	r8,64
8000b052:	f0 09 19 00 	cp.h	r9,r8
8000b056:	c1 11       	brne	8000b078 <udd_ctrl_out_received+0x104>
			|| (udd_g_ctrlreq.req.wLength <=
8000b058:	4b e8       	lddpc	r8,8000b150 <udd_ctrl_out_received+0x1dc>
8000b05a:	90 38       	ld.sh	r8,r8[0x6]
8000b05c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
					(udd_ctrl_prev_payload_nb_trans +
8000b060:	4b e8       	lddpc	r8,8000b158 <udd_ctrl_out_received+0x1e4>
8000b062:	90 08       	ld.sh	r8,r8[0x0]
8000b064:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b068:	4b b8       	lddpc	r8,8000b154 <udd_ctrl_out_received+0x1e0>
8000b06a:	90 08       	ld.sh	r8,r8[0x0]
8000b06c:	5c 78       	castu.h	r8
8000b06e:	f4 08 00 08 	add	r8,r10,r8
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000b072:	10 39       	cp.w	r9,r8
8000b074:	e0 89 00 20 	brgt	8000b0b4 <udd_ctrl_out_received+0x140>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
8000b078:	4b 78       	lddpc	r8,8000b154 <udd_ctrl_out_received+0x1e0>
8000b07a:	90 08       	ld.sh	r8,r8[0x0]
8000b07c:	4b 59       	lddpc	r9,8000b150 <udd_ctrl_out_received+0x1dc>
8000b07e:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
8000b080:	4b 48       	lddpc	r8,8000b150 <udd_ctrl_out_received+0x1dc>
8000b082:	70 58       	ld.w	r8,r8[0x14]
8000b084:	58 08       	cp.w	r8,0
8000b086:	c1 00       	breq	8000b0a6 <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
8000b088:	4b 28       	lddpc	r8,8000b150 <udd_ctrl_out_received+0x1dc>
8000b08a:	70 58       	ld.w	r8,r8[0x14]
8000b08c:	5d 18       	icall	r8
8000b08e:	18 98       	mov	r8,r12
8000b090:	ec 18 00 01 	eorl	r8,0x1
8000b094:	5c 58       	castu.b	r8
8000b096:	c0 80       	breq	8000b0a6 <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
8000b098:	f0 1f 00 2c 	mcall	8000b148 <udd_ctrl_out_received+0x1d4>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
8000b09c:	fe 68 01 60 	mov	r8,-130720
8000b0a0:	30 29       	mov	r9,2
8000b0a2:	91 09       	st.w	r8[0x0],r9
				return;
8000b0a4:	c4 a8       	rjmp	8000b138 <udd_ctrl_out_received+0x1c4>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
8000b0a6:	fe 68 01 60 	mov	r8,-130720
8000b0aa:	30 29       	mov	r9,2
8000b0ac:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
8000b0ae:	f0 1f 00 2c 	mcall	8000b15c <udd_ctrl_out_received+0x1e8>
		return;
8000b0b2:	c4 38       	rjmp	8000b138 <udd_ctrl_out_received+0x1c4>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
8000b0b4:	4a 78       	lddpc	r8,8000b150 <udd_ctrl_out_received+0x1dc>
8000b0b6:	90 69       	ld.sh	r9,r8[0xc]
8000b0b8:	4a 78       	lddpc	r8,8000b154 <udd_ctrl_out_received+0x1e0>
8000b0ba:	90 08       	ld.sh	r8,r8[0x0]
8000b0bc:	f0 09 19 00 	cp.h	r9,r8
8000b0c0:	c2 71       	brne	8000b10e <udd_ctrl_out_received+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
8000b0c2:	4a 48       	lddpc	r8,8000b150 <udd_ctrl_out_received+0x1dc>
8000b0c4:	70 58       	ld.w	r8,r8[0x14]
8000b0c6:	58 08       	cp.w	r8,0
8000b0c8:	c0 81       	brne	8000b0d8 <udd_ctrl_out_received+0x164>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
8000b0ca:	f0 1f 00 20 	mcall	8000b148 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000b0ce:	fe 68 01 60 	mov	r8,-130720
8000b0d2:	30 29       	mov	r9,2
8000b0d4:	91 09       	st.w	r8[0x0],r9
			return;
8000b0d6:	c3 18       	rjmp	8000b138 <udd_ctrl_out_received+0x1c4>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
8000b0d8:	49 e8       	lddpc	r8,8000b150 <udd_ctrl_out_received+0x1dc>
8000b0da:	70 58       	ld.w	r8,r8[0x14]
8000b0dc:	5d 18       	icall	r8
8000b0de:	18 98       	mov	r8,r12
8000b0e0:	ec 18 00 01 	eorl	r8,0x1
8000b0e4:	5c 58       	castu.b	r8
8000b0e6:	c0 80       	breq	8000b0f6 <udd_ctrl_out_received+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
8000b0e8:	f0 1f 00 18 	mcall	8000b148 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000b0ec:	fe 68 01 60 	mov	r8,-130720
8000b0f0:	30 29       	mov	r9,2
8000b0f2:	91 09       	st.w	r8[0x0],r9
			return;
8000b0f4:	c2 28       	rjmp	8000b138 <udd_ctrl_out_received+0x1c4>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000b0f6:	49 98       	lddpc	r8,8000b158 <udd_ctrl_out_received+0x1e4>
8000b0f8:	90 09       	ld.sh	r9,r8[0x0]
8000b0fa:	49 78       	lddpc	r8,8000b154 <udd_ctrl_out_received+0x1e0>
8000b0fc:	90 08       	ld.sh	r8,r8[0x0]
8000b0fe:	f2 08 00 08 	add	r8,r9,r8
8000b102:	5c 88       	casts.h	r8
8000b104:	49 59       	lddpc	r9,8000b158 <udd_ctrl_out_received+0x1e4>
8000b106:	b2 08       	st.h	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
8000b108:	49 39       	lddpc	r9,8000b154 <udd_ctrl_out_received+0x1e0>
8000b10a:	30 08       	mov	r8,0
8000b10c:	b2 08       	st.h	r9[0x0],r8
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
8000b10e:	fe 68 01 60 	mov	r8,-130720
8000b112:	30 29       	mov	r9,2
8000b114:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
8000b116:	fe 68 01 60 	mov	r8,-130720
8000b11a:	31 09       	mov	r9,16
8000b11c:	91 09       	st.w	r8[0x0],r9
	flags = cpu_irq_save();
8000b11e:	f0 1f 00 11 	mcall	8000b160 <udd_ctrl_out_received+0x1ec>
8000b122:	18 98       	mov	r8,r12
8000b124:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_enable_nak_in_interrupt(0);
8000b128:	fe 68 01 f0 	mov	r8,-130576
8000b12c:	31 09       	mov	r9,16
8000b12e:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000b130:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b134:	f0 1f 00 0c 	mcall	8000b164 <udd_ctrl_out_received+0x1f0>
}
8000b138:	2f cd       	sub	sp,-16
8000b13a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b13e:	00 00       	add	r0,r0
8000b140:	00 00       	add	r0,r0
8000b142:	07 b8       	ld.ub	r8,r3[0x3]
8000b144:	80 00       	ld.sh	r0,r0[0x0]
8000b146:	b2 98       	st.b	r9[0x1],r8
8000b148:	80 00       	ld.sh	r0,r0[0x0]
8000b14a:	b1 e0       	*unknown*
8000b14c:	80 00       	ld.sh	r0,r0[0x0]
8000b14e:	ac 18       	st.h	r6[0x2],r8
8000b150:	00 00       	add	r0,r0
8000b152:	10 08       	add	r8,r8
8000b154:	00 00       	add	r0,r0
8000b156:	07 be       	ld.ub	lr,r3[0x3]
8000b158:	00 00       	add	r0,r0
8000b15a:	07 bc       	ld.ub	r12,r3[0x3]
8000b15c:	80 00       	ld.sh	r0,r0[0x0]
8000b15e:	b2 00       	st.h	r9[0x0],r0
8000b160:	80 00       	ld.sh	r0,r0[0x0]
8000b162:	9a a0       	ld.uh	r0,sp[0x4]
8000b164:	80 00       	ld.sh	r0,r0[0x0]
8000b166:	9a be       	ld.uh	lr,sp[0x6]

8000b168 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
8000b168:	eb cd 40 80 	pushm	r7,lr
8000b16c:	1a 97       	mov	r7,sp
	if (Is_udd_out_received(0))
8000b16e:	fe 68 01 30 	mov	r8,-130768
8000b172:	70 08       	ld.w	r8,r8[0x0]
8000b174:	e2 18 00 02 	andl	r8,0x2,COH
8000b178:	c1 21       	brne	8000b19c <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
8000b17a:	48 b8       	lddpc	r8,8000b1a4 <udd_ctrl_underflow+0x3c>
8000b17c:	70 08       	ld.w	r8,r8[0x0]
8000b17e:	58 18       	cp.w	r8,1
8000b180:	c0 41       	brne	8000b188 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
8000b182:	f0 1f 00 0a 	mcall	8000b1a8 <udd_ctrl_underflow+0x40>
8000b186:	c0 c8       	rjmp	8000b19e <udd_ctrl_underflow+0x36>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
8000b188:	48 78       	lddpc	r8,8000b1a4 <udd_ctrl_underflow+0x3c>
8000b18a:	70 08       	ld.w	r8,r8[0x0]
8000b18c:	58 48       	cp.w	r8,4
8000b18e:	c0 81       	brne	8000b19e <udd_ctrl_underflow+0x36>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
8000b190:	fe 68 01 f0 	mov	r8,-130576
8000b194:	e8 69 00 00 	mov	r9,524288
8000b198:	91 09       	st.w	r8[0x0],r9
8000b19a:	c0 28       	rjmp	8000b19e <udd_ctrl_underflow+0x36>


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
		return; // underflow ignored if OUT data is received
8000b19c:	d7 03       	nop
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
	}
}
8000b19e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b1a2:	00 00       	add	r0,r0
8000b1a4:	00 00       	add	r0,r0
8000b1a6:	07 b8       	ld.ub	r8,r3[0x3]
8000b1a8:	80 00       	ld.sh	r0,r0[0x0]
8000b1aa:	b2 00       	st.h	r9[0x0],r0

8000b1ac <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
8000b1ac:	eb cd 40 80 	pushm	r7,lr
8000b1b0:	1a 97       	mov	r7,sp
	if (Is_udd_in_send(0))
8000b1b2:	fe 68 01 30 	mov	r8,-130768
8000b1b6:	70 08       	ld.w	r8,r8[0x0]
8000b1b8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b1bc:	5c 58       	castu.b	r8
8000b1be:	c0 b1       	brne	8000b1d4 <udd_ctrl_overflow+0x28>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000b1c0:	48 78       	lddpc	r8,8000b1dc <udd_ctrl_overflow+0x30>
8000b1c2:	70 08       	ld.w	r8,r8[0x0]
8000b1c4:	58 38       	cp.w	r8,3
8000b1c6:	c0 81       	brne	8000b1d6 <udd_ctrl_overflow+0x2a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
8000b1c8:	fe 68 01 f0 	mov	r8,-130576
8000b1cc:	e8 69 00 00 	mov	r9,524288
8000b1d0:	91 09       	st.w	r8[0x0],r9
8000b1d2:	c0 28       	rjmp	8000b1d6 <udd_ctrl_overflow+0x2a>


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
		return; // overflow ignored if IN data is received
8000b1d4:	d7 03       	nop
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
8000b1d6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b1da:	00 00       	add	r0,r0
8000b1dc:	00 00       	add	r0,r0
8000b1de:	07 b8       	ld.ub	r8,r3[0x3]

8000b1e0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
8000b1e0:	eb cd 40 80 	pushm	r7,lr
8000b1e4:	1a 97       	mov	r7,sp
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
8000b1e6:	48 68       	lddpc	r8,8000b1fc <udd_ctrl_stall_data+0x1c>
8000b1e8:	30 59       	mov	r9,5
8000b1ea:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
8000b1ec:	fe 68 01 f0 	mov	r8,-130576
8000b1f0:	e8 69 00 00 	mov	r9,524288
8000b1f4:	91 09       	st.w	r8[0x0],r9
}
8000b1f6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b1fa:	00 00       	add	r0,r0
8000b1fc:	00 00       	add	r0,r0
8000b1fe:	07 b8       	ld.ub	r8,r3[0x3]

8000b200 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
8000b200:	eb cd 40 80 	pushm	r7,lr
8000b204:	1a 97       	mov	r7,sp
8000b206:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
8000b208:	49 08       	lddpc	r8,8000b248 <udd_ctrl_send_zlp_in+0x48>
8000b20a:	30 39       	mov	r9,3
8000b20c:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
8000b20e:	f0 1f 00 10 	mcall	8000b24c <udd_ctrl_send_zlp_in+0x4c>
8000b212:	18 98       	mov	r8,r12
8000b214:	ef 48 ff fc 	st.w	r7[-4],r8
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
8000b218:	fe 68 01 60 	mov	r8,-130720
8000b21c:	30 19       	mov	r9,1
8000b21e:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
8000b220:	fe 68 01 f0 	mov	r8,-130576
8000b224:	30 19       	mov	r9,1
8000b226:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
8000b228:	fe 68 01 60 	mov	r8,-130720
8000b22c:	30 89       	mov	r9,8
8000b22e:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_out_interrupt(0);
8000b230:	fe 68 01 f0 	mov	r8,-130576
8000b234:	30 89       	mov	r9,8
8000b236:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000b238:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b23c:	f0 1f 00 05 	mcall	8000b250 <udd_ctrl_send_zlp_in+0x50>
}
8000b240:	2f fd       	sub	sp,-4
8000b242:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b246:	00 00       	add	r0,r0
8000b248:	00 00       	add	r0,r0
8000b24a:	07 b8       	ld.ub	r8,r3[0x3]
8000b24c:	80 00       	ld.sh	r0,r0[0x0]
8000b24e:	9a a0       	ld.uh	r0,sp[0x4]
8000b250:	80 00       	ld.sh	r0,r0[0x0]
8000b252:	9a be       	ld.uh	lr,sp[0x6]

8000b254 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
8000b254:	eb cd 40 80 	pushm	r7,lr
8000b258:	1a 97       	mov	r7,sp
8000b25a:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000b25c:	48 c8       	lddpc	r8,8000b28c <udd_ctrl_send_zlp_out+0x38>
8000b25e:	30 49       	mov	r9,4
8000b260:	91 09       	st.w	r8[0x0],r9
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
8000b262:	f0 1f 00 0c 	mcall	8000b290 <udd_ctrl_send_zlp_out+0x3c>
8000b266:	18 98       	mov	r8,r12
8000b268:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_ack_nak_in(0);
8000b26c:	fe 68 01 60 	mov	r8,-130720
8000b270:	31 09       	mov	r9,16
8000b272:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_in_interrupt(0);
8000b274:	fe 68 01 f0 	mov	r8,-130576
8000b278:	31 09       	mov	r9,16
8000b27a:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000b27c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b280:	f0 1f 00 05 	mcall	8000b294 <udd_ctrl_send_zlp_out+0x40>
}
8000b284:	2f fd       	sub	sp,-4
8000b286:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b28a:	00 00       	add	r0,r0
8000b28c:	00 00       	add	r0,r0
8000b28e:	07 b8       	ld.ub	r8,r3[0x3]
8000b290:	80 00       	ld.sh	r0,r0[0x0]
8000b292:	9a a0       	ld.uh	r0,sp[0x4]
8000b294:	80 00       	ld.sh	r0,r0[0x0]
8000b296:	9a be       	ld.uh	lr,sp[0x6]

8000b298 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
8000b298:	eb cd 40 80 	pushm	r7,lr
8000b29c:	1a 97       	mov	r7,sp
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000b29e:	48 58       	lddpc	r8,8000b2b0 <udd_ctrl_endofrequest+0x18>
8000b2a0:	70 48       	ld.w	r8,r8[0x10]
8000b2a2:	58 08       	cp.w	r8,0
8000b2a4:	c0 40       	breq	8000b2ac <udd_ctrl_endofrequest+0x14>
		udd_g_ctrlreq.callback();
8000b2a6:	48 38       	lddpc	r8,8000b2b0 <udd_ctrl_endofrequest+0x18>
8000b2a8:	70 48       	ld.w	r8,r8[0x10]
8000b2aa:	5d 18       	icall	r8
	}
}
8000b2ac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b2b0:	00 00       	add	r0,r0
8000b2b2:	10 08       	add	r8,r8

8000b2b4 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
8000b2b4:	eb cd 40 80 	pushm	r7,lr
8000b2b8:	1a 97       	mov	r7,sp

	if (!Is_udd_endpoint_interrupt(0))
8000b2ba:	fe 68 00 00 	mov	r8,-131072
8000b2be:	70 18       	ld.w	r8,r8[0x4]
8000b2c0:	e2 18 10 00 	andl	r8,0x1000,COH
8000b2c4:	c0 31       	brne	8000b2ca <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
8000b2c6:	30 08       	mov	r8,0
8000b2c8:	c4 c8       	rjmp	8000b360 <udd_ctrl_interrupt+0xac>

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
8000b2ca:	fe 68 02 20 	mov	r8,-130528
8000b2ce:	31 09       	mov	r9,16
8000b2d0:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
8000b2d2:	fe 68 02 20 	mov	r8,-130528
8000b2d6:	30 89       	mov	r9,8
8000b2d8:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
8000b2da:	fe 68 01 30 	mov	r8,-130768
8000b2de:	70 08       	ld.w	r8,r8[0x0]
8000b2e0:	e2 18 00 04 	andl	r8,0x4,COH
8000b2e4:	c0 50       	breq	8000b2ee <udd_ctrl_interrupt+0x3a>
		// SETUP packet received
		udd_ctrl_setup_received();
8000b2e6:	f0 1f 00 21 	mcall	8000b368 <udd_ctrl_interrupt+0xb4>
		return true;
8000b2ea:	30 18       	mov	r8,1
8000b2ec:	c3 a8       	rjmp	8000b360 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
8000b2ee:	fe 68 01 30 	mov	r8,-130768
8000b2f2:	70 08       	ld.w	r8,r8[0x0]
8000b2f4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b2f8:	5c 58       	castu.b	r8
8000b2fa:	c0 c0       	breq	8000b312 <udd_ctrl_interrupt+0x5e>
8000b2fc:	fe 68 01 c0 	mov	r8,-130624
8000b300:	70 08       	ld.w	r8,r8[0x0]
8000b302:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b306:	5c 58       	castu.b	r8
8000b308:	c0 50       	breq	8000b312 <udd_ctrl_interrupt+0x5e>
		// IN packet sent
		udd_ctrl_in_sent();
8000b30a:	f0 1f 00 19 	mcall	8000b36c <udd_ctrl_interrupt+0xb8>
		return true;
8000b30e:	30 18       	mov	r8,1
8000b310:	c2 88       	rjmp	8000b360 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_out_received(0)) {
8000b312:	fe 68 01 30 	mov	r8,-130768
8000b316:	70 08       	ld.w	r8,r8[0x0]
8000b318:	e2 18 00 02 	andl	r8,0x2,COH
8000b31c:	c0 50       	breq	8000b326 <udd_ctrl_interrupt+0x72>
		// OUT packet received
		udd_ctrl_out_received();
8000b31e:	f0 1f 00 15 	mcall	8000b370 <udd_ctrl_interrupt+0xbc>
		return true;
8000b322:	30 18       	mov	r8,1
8000b324:	c1 e8       	rjmp	8000b360 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_out(0)) {
8000b326:	fe 68 01 30 	mov	r8,-130768
8000b32a:	70 08       	ld.w	r8,r8[0x0]
8000b32c:	e2 18 00 08 	andl	r8,0x8,COH
8000b330:	c0 90       	breq	8000b342 <udd_ctrl_interrupt+0x8e>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
8000b332:	fe 68 01 60 	mov	r8,-130720
8000b336:	30 89       	mov	r9,8
8000b338:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_overflow();
8000b33a:	f0 1f 00 0f 	mcall	8000b374 <udd_ctrl_interrupt+0xc0>
		return true;
8000b33e:	30 18       	mov	r8,1
8000b340:	c1 08       	rjmp	8000b360 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_in(0)) {
8000b342:	fe 68 01 30 	mov	r8,-130768
8000b346:	70 08       	ld.w	r8,r8[0x0]
8000b348:	e2 18 00 10 	andl	r8,0x10,COH
8000b34c:	c0 90       	breq	8000b35e <udd_ctrl_interrupt+0xaa>
		// Underflow on IN packet
		udd_ack_nak_in(0);
8000b34e:	fe 68 01 60 	mov	r8,-130720
8000b352:	31 09       	mov	r9,16
8000b354:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_underflow();
8000b356:	f0 1f 00 09 	mcall	8000b378 <udd_ctrl_interrupt+0xc4>
		return true;
8000b35a:	30 18       	mov	r8,1
8000b35c:	c0 28       	rjmp	8000b360 <udd_ctrl_interrupt+0xac>
	}
	return false;
8000b35e:	30 08       	mov	r8,0
}
8000b360:	10 9c       	mov	r12,r8
8000b362:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b366:	00 00       	add	r0,r0
8000b368:	80 00       	ld.sh	r0,r0[0x0]
8000b36a:	ac 70       	st.h	r6[0xe],r0
8000b36c:	80 00       	ld.sh	r0,r0[0x0]
8000b36e:	ad d4       	cbr	r4,0xd
8000b370:	80 00       	ld.sh	r0,r0[0x0]
8000b372:	af 74       	lsl	r4,0xf
8000b374:	80 00       	ld.sh	r0,r0[0x0]
8000b376:	b1 ac       	sbr	r12,0x10
8000b378:	80 00       	ld.sh	r0,r0[0x0]
8000b37a:	b1 68       	lsl	r8,0x10

8000b37c <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
8000b37c:	eb cd 40 80 	pushm	r7,lr
8000b380:	1a 97       	mov	r7,sp
8000b382:	20 1d       	sub	sp,4
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b384:	30 08       	mov	r8,0
8000b386:	ef 68 ff ff 	st.b	r7[-1],r8
8000b38a:	c2 28       	rjmp	8000b3ce <udd_ep_job_table_reset+0x52>
		udd_ep_job[i].busy = false;
8000b38c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b390:	49 5a       	lddpc	r10,8000b3e4 <udd_ep_job_table_reset+0x68>
8000b392:	12 98       	mov	r8,r9
8000b394:	a3 68       	lsl	r8,0x2
8000b396:	12 08       	add	r8,r9
8000b398:	a3 68       	lsl	r8,0x2
8000b39a:	f4 08 00 09 	add	r9,r10,r8
8000b39e:	72 08       	ld.w	r8,r9[0x0]
8000b3a0:	30 0a       	mov	r10,0
8000b3a2:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b3a6:	93 08       	st.w	r9[0x0],r8
		udd_ep_job[i].stall_requested = false;
8000b3a8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b3ac:	48 ea       	lddpc	r10,8000b3e4 <udd_ep_job_table_reset+0x68>
8000b3ae:	12 98       	mov	r8,r9
8000b3b0:	a3 68       	lsl	r8,0x2
8000b3b2:	12 08       	add	r8,r9
8000b3b4:	a3 68       	lsl	r8,0x2
8000b3b6:	f4 08 00 09 	add	r9,r10,r8
8000b3ba:	72 08       	ld.w	r8,r9[0x0]
8000b3bc:	30 0a       	mov	r10,0
8000b3be:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000b3c2:	93 08       	st.w	r9[0x0],r8
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b3c4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b3c8:	2f f8       	sub	r8,-1
8000b3ca:	ef 68 ff ff 	st.b	r7[-1],r8
8000b3ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b3d2:	30 18       	mov	r8,1
8000b3d4:	f0 09 18 00 	cp.b	r9,r8
8000b3d8:	fe 98 ff da 	brls	8000b38c <udd_ep_job_table_reset+0x10>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].stall_requested = false;
	}
}
8000b3dc:	2f fd       	sub	sp,-4
8000b3de:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b3e2:	00 00       	add	r0,r0
8000b3e4:	00 00       	add	r0,r0
8000b3e6:	07 c0       	ld.ub	r0,r3[0x4]

8000b3e8 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
8000b3e8:	eb cd 40 80 	pushm	r7,lr
8000b3ec:	1a 97       	mov	r7,sp
8000b3ee:	20 1d       	sub	sp,4
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b3f0:	30 08       	mov	r8,0
8000b3f2:	ef 68 ff ff 	st.b	r7[-1],r8
8000b3f6:	c1 98       	rjmp	8000b428 <udd_ep_job_table_kill+0x40>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
8000b3f8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b3fc:	2f f8       	sub	r8,-1
8000b3fe:	5c 58       	castu.b	r8
8000b400:	10 9a       	mov	r10,r8
8000b402:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b406:	12 98       	mov	r8,r9
8000b408:	a3 68       	lsl	r8,0x2
8000b40a:	12 08       	add	r8,r9
8000b40c:	a3 68       	lsl	r8,0x2
8000b40e:	10 99       	mov	r9,r8
8000b410:	48 b8       	lddpc	r8,8000b43c <udd_ep_job_table_kill+0x54>
8000b412:	f2 08 00 08 	add	r8,r9,r8
8000b416:	30 1b       	mov	r11,1
8000b418:	10 9c       	mov	r12,r8
8000b41a:	f0 1f 00 0a 	mcall	8000b440 <udd_ep_job_table_kill+0x58>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b41e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b422:	2f f8       	sub	r8,-1
8000b424:	ef 68 ff ff 	st.b	r7[-1],r8
8000b428:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b42c:	30 18       	mov	r8,1
8000b42e:	f0 09 18 00 	cp.b	r9,r8
8000b432:	fe 98 ff e3 	brls	8000b3f8 <udd_ep_job_table_kill+0x10>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
	}
}
8000b436:	2f fd       	sub	sp,-4
8000b438:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b43c:	00 00       	add	r0,r0
8000b43e:	07 c0       	ld.ub	r0,r3[0x4]
8000b440:	80 00       	ld.sh	r0,r0[0x0]
8000b442:	b4 90       	st.b	r10[0x1],r0

8000b444 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
8000b444:	eb cd 40 80 	pushm	r7,lr
8000b448:	1a 97       	mov	r7,sp
8000b44a:	20 1d       	sub	sp,4
8000b44c:	18 98       	mov	r8,r12
8000b44e:	ef 68 ff fc 	st.b	r7[-4],r8
	ep &= USB_EP_ADDR_MASK;
8000b452:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b456:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000b45a:	ef 68 ff fc 	st.b	r7[-4],r8

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
8000b45e:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000b462:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b466:	f0 c9 00 01 	sub	r9,r8,1
8000b46a:	12 98       	mov	r8,r9
8000b46c:	a3 68       	lsl	r8,0x2
8000b46e:	12 08       	add	r8,r9
8000b470:	a3 68       	lsl	r8,0x2
8000b472:	10 99       	mov	r9,r8
8000b474:	48 58       	lddpc	r8,8000b488 <udd_ep_abort_job+0x44>
8000b476:	f2 08 00 08 	add	r8,r9,r8
8000b47a:	30 1b       	mov	r11,1
8000b47c:	10 9c       	mov	r12,r8
8000b47e:	f0 1f 00 04 	mcall	8000b48c <udd_ep_abort_job+0x48>
}
8000b482:	2f fd       	sub	sp,-4
8000b484:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b488:	00 00       	add	r0,r0
8000b48a:	07 c0       	ld.ub	r0,r3[0x4]
8000b48c:	80 00       	ld.sh	r0,r0[0x0]
8000b48e:	b4 90       	st.b	r10[0x1],r0

8000b490 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
8000b490:	eb cd 40 80 	pushm	r7,lr
8000b494:	1a 97       	mov	r7,sp
8000b496:	20 3d       	sub	sp,12
8000b498:	ef 4c ff fc 	st.w	r7[-4],r12
8000b49c:	16 99       	mov	r9,r11
8000b49e:	14 98       	mov	r8,r10
8000b4a0:	ef 69 ff f8 	st.b	r7[-8],r9
8000b4a4:	ef 68 ff f4 	st.b	r7[-12],r8
	if (ptr_job->busy == false) {
8000b4a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b4ac:	70 08       	ld.w	r8,r8[0x0]
8000b4ae:	e6 18 80 00 	andh	r8,0x8000,COH
8000b4b2:	c2 b0       	breq	8000b508 <udd_ep_finish_job+0x78>
		return; // No on-going job
	}
	ptr_job->busy = false;
8000b4b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b4b8:	72 08       	ld.w	r8,r9[0x0]
8000b4ba:	30 0a       	mov	r10,0
8000b4bc:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b4c0:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans) {
8000b4c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b4c6:	70 48       	ld.w	r8,r8[0x10]
8000b4c8:	58 08       	cp.w	r8,0
8000b4ca:	c2 10       	breq	8000b50c <udd_ep_finish_job+0x7c>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
8000b4cc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b4d0:	a3 68       	lsl	r8,0x2
8000b4d2:	e0 38 ff 00 	sub	r8,130816
8000b4d6:	70 08       	ld.w	r8,r8[0x0]
8000b4d8:	e2 18 01 00 	andl	r8,0x100,COH
8000b4dc:	c0 90       	breq	8000b4ee <udd_ep_finish_job+0x5e>
		ep_num |= USB_EP_DIR_IN;
8000b4de:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b4e2:	ea 18 ff ff 	orh	r8,0xffff
8000b4e6:	e8 18 ff 80 	orl	r8,0xff80
8000b4ea:	ef 68 ff f4 	st.b	r7[-12],r8
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
8000b4ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b4f2:	70 48       	ld.w	r8,r8[0x10]
8000b4f4:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b4f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b4fc:	72 2b       	ld.w	r11,r9[0x8]
8000b4fe:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000b502:	12 9c       	mov	r12,r9
8000b504:	5d 18       	icall	r8
8000b506:	c0 48       	rjmp	8000b50e <udd_ep_finish_job+0x7e>


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
		return; // No on-going job
8000b508:	d7 03       	nop
8000b50a:	c0 28       	rjmp	8000b50e <udd_ep_finish_job+0x7e>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
		return; // No callback linked to job
8000b50c:	d7 03       	nop
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
8000b50e:	2f dd       	sub	sp,-12
8000b510:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b514 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
8000b514:	eb cd 40 80 	pushm	r7,lr
8000b518:	1a 97       	mov	r7,sp
8000b51a:	20 5d       	sub	sp,20
8000b51c:	18 98       	mov	r8,r12
8000b51e:	ef 68 ff ec 	st.b	r7[-20],r8
	uint32_t udd_dma_ctrl = 0;
8000b522:	30 08       	mov	r8,0
8000b524:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000b528:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b52c:	f0 c9 00 01 	sub	r9,r8,1
8000b530:	12 98       	mov	r8,r9
8000b532:	a3 68       	lsl	r8,0x2
8000b534:	12 08       	add	r8,r9
8000b536:	a3 68       	lsl	r8,0x2
8000b538:	10 99       	mov	r9,r8
8000b53a:	fe f8 02 1e 	ld.w	r8,pc[542]
8000b53e:	f2 08 00 08 	add	r8,r9,r8
8000b542:	ef 48 ff f4 	st.w	r7[-12],r8

	if (!ptr_job->busy) {
8000b546:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b54a:	70 08       	ld.w	r8,r8[0x0]
8000b54c:	e6 18 80 00 	andh	r8,0x8000,COH
8000b550:	e0 80 01 00 	breq	8000b750 <udd_ep_trans_done+0x23c>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
8000b554:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b558:	70 39       	ld.w	r9,r8[0xc]
8000b55a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b55e:	70 28       	ld.w	r8,r8[0x8]
8000b560:	10 39       	cp.w	r9,r8
8000b562:	e0 80 00 b7 	breq	8000b6d0 <udd_ep_trans_done+0x1bc>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
8000b566:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b56a:	70 29       	ld.w	r9,r8[0x8]
8000b56c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b570:	70 38       	ld.w	r8,r8[0xc]
8000b572:	10 19       	sub	r9,r8
8000b574:	ef 49 ff f8 	st.w	r7[-8],r9

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
8000b578:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b57c:	e0 58 00 00 	cp.w	r8,65536
8000b580:	e0 88 00 0a 	brls	8000b594 <udd_ep_trans_done+0x80>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
8000b584:	e0 78 00 00 	mov	r8,65536
8000b588:	ef 48 ff f8 	st.w	r7[-8],r8

			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
8000b58c:	30 08       	mov	r8,0
8000b58e:	ef 48 ff f0 	st.w	r7[-16],r8
8000b592:	c0 68       	rjmp	8000b59e <udd_ep_trans_done+0x8a>
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
8000b594:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b598:	b1 68       	lsl	r8,0x10
8000b59a:	ef 48 ff f0 	st.w	r7[-16],r8
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
8000b59e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b5a2:	a3 68       	lsl	r8,0x2
8000b5a4:	e0 38 ff 00 	sub	r8,130816
8000b5a8:	70 08       	ld.w	r8,r8[0x0]
8000b5aa:	e2 18 01 00 	andl	r8,0x100,COH
8000b5ae:	c2 10       	breq	8000b5f0 <udd_ep_trans_done+0xdc>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
8000b5b0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b5b4:	a3 68       	lsl	r8,0x2
8000b5b6:	e0 38 ff 00 	sub	r8,130816
8000b5ba:	70 08       	ld.w	r8,r8[0x0]
8000b5bc:	e2 18 00 70 	andl	r8,0x70,COH
8000b5c0:	a5 88       	lsr	r8,0x4
8000b5c2:	30 89       	mov	r9,8
8000b5c4:	f2 08 09 48 	lsl	r8,r9,r8
8000b5c8:	20 18       	sub	r8,1
8000b5ca:	10 99       	mov	r9,r8
8000b5cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b5d0:	f3 e8 00 08 	and	r8,r9,r8
8000b5d4:	c3 10       	breq	8000b636 <udd_ep_trans_done+0x122>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
8000b5d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b5da:	a3 b8       	sbr	r8,0x3
8000b5dc:	ef 48 ff f0 	st.w	r7[-16],r8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
8000b5e0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b5e4:	72 08       	ld.w	r8,r9[0x0]
8000b5e6:	30 0a       	mov	r10,0
8000b5e8:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000b5ec:	93 08       	st.w	r9[0x0],r8
8000b5ee:	c2 58       	rjmp	8000b638 <udd_ep_trans_done+0x124>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000b5f0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b5f4:	a3 68       	lsl	r8,0x2
8000b5f6:	e0 38 ff 00 	sub	r8,130816
8000b5fa:	70 08       	ld.w	r8,r8[0x0]
8000b5fc:	e2 18 18 00 	andl	r8,0x1800,COH
8000b600:	ab 98       	lsr	r8,0xb
8000b602:	58 18       	cp.w	r8,1
8000b604:	c1 21       	brne	8000b628 <udd_ep_trans_done+0x114>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
8000b606:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b60a:	a3 68       	lsl	r8,0x2
8000b60c:	e0 38 ff 00 	sub	r8,130816
8000b610:	70 08       	ld.w	r8,r8[0x0]
8000b612:	e2 18 00 70 	andl	r8,0x70,COH
8000b616:	a5 88       	lsr	r8,0x4
8000b618:	30 89       	mov	r9,8
8000b61a:	f2 08 09 48 	lsl	r8,r9,r8
8000b61e:	10 99       	mov	r9,r8
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000b620:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b624:	10 39       	cp.w	r9,r8
8000b626:	c0 93       	brcs	8000b638 <udd_ep_trans_done+0x124>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
8000b628:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b62c:	e8 18 00 14 	orl	r8,0x14
8000b630:	ef 48 ff f0 	st.w	r7[-16],r8
8000b634:	c0 28       	rjmp	8000b638 <udd_ep_trans_done+0x124>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
8000b636:	d7 03       	nop
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
8000b638:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b63c:	a5 68       	lsl	r8,0x4
8000b63e:	e0 38 fd 00 	sub	r8,130304
8000b642:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b646:	72 1a       	ld.w	r10,r9[0x4]
8000b648:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b64c:	72 39       	ld.w	r9,r9[0xc]
8000b64e:	f4 09 00 09 	add	r9,r10,r9
8000b652:	91 19       	st.w	r8[0x4],r9
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
8000b654:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b658:	e8 18 00 21 	orl	r8,0x21
8000b65c:	ef 48 ff f0 	st.w	r7[-16],r8
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
8000b660:	f0 1f 00 3f 	mcall	8000b75c <udd_ep_trans_done+0x248>
8000b664:	18 98       	mov	r8,r12
8000b666:	ef 48 ff fc 	st.w	r7[-4],r8
		if ( !(udd_endpoint_dma_get_status(ep)
8000b66a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b66e:	a5 68       	lsl	r8,0x4
8000b670:	e0 38 fd 00 	sub	r8,130304
8000b674:	70 38       	ld.w	r8,r8[0xc]
8000b676:	e2 18 00 10 	andl	r8,0x10,COH
8000b67a:	c2 11       	brne	8000b6bc <udd_ep_trans_done+0x1a8>
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
8000b67c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b680:	a5 68       	lsl	r8,0x4
8000b682:	e0 38 fd 00 	sub	r8,130304
8000b686:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000b68a:	91 29       	st.w	r8[0x8],r9
			ptr_job->nb_trans += next_trans;
8000b68c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b690:	70 39       	ld.w	r9,r8[0xc]
8000b692:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b696:	10 09       	add	r9,r8
8000b698:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b69c:	91 39       	st.w	r8[0xc],r9
			udd_enable_endpoint_dma_interrupt(ep);
8000b69e:	fe 68 00 00 	mov	r8,-131072
8000b6a2:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b6a6:	20 19       	sub	r9,1
8000b6a8:	fc 1a 02 00 	movh	r10,0x200
8000b6ac:	f4 09 09 49 	lsl	r9,r10,r9
8000b6b0:	91 69       	st.w	r8[0x18],r9
			cpu_irq_restore(flags);
8000b6b2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b6b6:	f0 1f 00 2b 	mcall	8000b760 <udd_ep_trans_done+0x24c>
			return;
8000b6ba:	c4 c8       	rjmp	8000b752 <udd_ep_trans_done+0x23e>
		}
		cpu_irq_restore(flags);
8000b6bc:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b6c0:	f0 1f 00 28 	mcall	8000b760 <udd_ep_trans_done+0x24c>

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
8000b6c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b6c8:	70 39       	ld.w	r9,r8[0xc]
8000b6ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b6ce:	91 29       	st.w	r8[0x8],r9
	}
	if (Is_udd_endpoint_in(ep)) {
8000b6d0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b6d4:	a3 68       	lsl	r8,0x2
8000b6d6:	e0 38 ff 00 	sub	r8,130816
8000b6da:	70 08       	ld.w	r8,r8[0x0]
8000b6dc:	e2 18 01 00 	andl	r8,0x100,COH
8000b6e0:	c2 f0       	breq	8000b73e <udd_ep_trans_done+0x22a>
		if (ptr_job->b_shortpacket) {
8000b6e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b6e6:	70 08       	ld.w	r8,r8[0x0]
8000b6e8:	e6 18 40 00 	andh	r8,0x4000,COH
8000b6ec:	c2 90       	breq	8000b73e <udd_ep_trans_done+0x22a>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
8000b6ee:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b6f2:	a3 68       	lsl	r8,0x2
8000b6f4:	e0 38 fe a0 	sub	r8,130720
8000b6f8:	30 19       	mov	r9,1
8000b6fa:	91 09       	st.w	r8[0x0],r9
			if (Is_udd_write_enabled(ep)) {
8000b6fc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b700:	a3 68       	lsl	r8,0x2
8000b702:	e0 38 fe d0 	sub	r8,130768
8000b706:	70 08       	ld.w	r8,r8[0x0]
8000b708:	e6 18 00 01 	andh	r8,0x1,COH
8000b70c:	c0 80       	breq	8000b71c <udd_ep_trans_done+0x208>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
8000b70e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b712:	a3 68       	lsl	r8,0x2
8000b714:	e0 38 fe 70 	sub	r8,130672
8000b718:	30 19       	mov	r9,1
8000b71a:	91 09       	st.w	r8[0x0],r9
			}
			udd_enable_in_send_interrupt(ep);
8000b71c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b720:	a3 68       	lsl	r8,0x2
8000b722:	e0 38 fe 10 	sub	r8,130576
8000b726:	30 19       	mov	r9,1
8000b728:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(ep);
8000b72a:	fe 68 00 00 	mov	r8,-131072
8000b72e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b732:	e0 6a 10 00 	mov	r10,4096
8000b736:	f4 09 09 49 	lsl	r9,r10,r9
8000b73a:	91 69       	st.w	r8[0x18],r9
			return;
8000b73c:	c0 b8       	rjmp	8000b752 <udd_ep_trans_done+0x23e>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
8000b73e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b742:	10 9a       	mov	r10,r8
8000b744:	30 0b       	mov	r11,0
8000b746:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b74a:	f0 1f 00 07 	mcall	8000b764 <udd_ep_trans_done+0x250>
8000b74e:	c0 28       	rjmp	8000b752 <udd_ep_trans_done+0x23e>

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
8000b750:	d7 03       	nop
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
8000b752:	2f bd       	sub	sp,-20
8000b754:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b758:	00 00       	add	r0,r0
8000b75a:	07 c0       	ld.ub	r0,r3[0x4]
8000b75c:	80 00       	ld.sh	r0,r0[0x0]
8000b75e:	9a a0       	ld.uh	r0,sp[0x4]
8000b760:	80 00       	ld.sh	r0,r0[0x0]
8000b762:	9a be       	ld.uh	lr,sp[0x6]
8000b764:	80 00       	ld.sh	r0,r0[0x0]
8000b766:	b4 90       	st.b	r10[0x1],r0

8000b768 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
8000b768:	eb cd 40 80 	pushm	r7,lr
8000b76c:	1a 97       	mov	r7,sp
8000b76e:	20 3d       	sub	sp,12
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000b770:	30 18       	mov	r8,1
8000b772:	ef 68 ff f7 	st.b	r7[-9],r8
8000b776:	cf 18       	rjmp	8000b958 <udd_ep_interrupt+0x1f0>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
8000b778:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b77c:	f0 c9 00 01 	sub	r9,r8,1
8000b780:	12 98       	mov	r8,r9
8000b782:	a3 68       	lsl	r8,0x2
8000b784:	12 08       	add	r8,r9
8000b786:	a3 68       	lsl	r8,0x2
8000b788:	10 99       	mov	r9,r8
8000b78a:	4f a8       	lddpc	r8,8000b970 <udd_ep_interrupt+0x208>
8000b78c:	f2 08 00 08 	add	r8,r9,r8
8000b790:	ef 48 ff f8 	st.w	r7[-8],r8

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000b794:	fe 68 00 00 	mov	r8,-131072
8000b798:	70 49       	ld.w	r9,r8[0x10]
8000b79a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b79e:	20 18       	sub	r8,1
8000b7a0:	fc 1a 02 00 	movh	r10,0x200
8000b7a4:	f4 08 09 48 	lsl	r8,r10,r8
8000b7a8:	f3 e8 00 08 	and	r8,r9,r8
8000b7ac:	c4 70       	breq	8000b83a <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
8000b7ae:	fe 68 00 00 	mov	r8,-131072
8000b7b2:	70 19       	ld.w	r9,r8[0x4]
8000b7b4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b7b8:	20 18       	sub	r8,1
8000b7ba:	fc 1a 02 00 	movh	r10,0x200
8000b7be:	f4 08 09 48 	lsl	r8,r10,r8
8000b7c2:	f3 e8 00 08 	and	r8,r9,r8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000b7c6:	c3 a0       	breq	8000b83a <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
8000b7c8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b7cc:	a5 68       	lsl	r8,0x4
8000b7ce:	e0 38 fd 00 	sub	r8,130304
8000b7d2:	70 38       	ld.w	r8,r8[0xc]
8000b7d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b7d8:	5c 58       	castu.b	r8
8000b7da:	c0 30       	breq	8000b7e0 <udd_ep_interrupt+0x78>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
8000b7dc:	30 18       	mov	r8,1
8000b7de:	cc 58       	rjmp	8000b968 <udd_ep_interrupt+0x200>
			}
			udd_disable_endpoint_dma_interrupt(ep);
8000b7e0:	fe 68 00 00 	mov	r8,-131072
8000b7e4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b7e8:	20 19       	sub	r9,1
8000b7ea:	fc 1a 02 00 	movh	r10,0x200
8000b7ee:	f4 09 09 49 	lsl	r9,r10,r9
8000b7f2:	91 59       	st.w	r8[0x14],r9
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
8000b7f4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b7f8:	a5 68       	lsl	r8,0x4
8000b7fa:	e0 38 fd 00 	sub	r8,130304
8000b7fe:	70 38       	ld.w	r8,r8[0xc]
8000b800:	b1 88       	lsr	r8,0x10
8000b802:	ef 48 ff fc 	st.w	r7[-4],r8
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
8000b806:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b80a:	58 08       	cp.w	r8,0
8000b80c:	c1 00       	breq	8000b82c <udd_ep_interrupt+0xc4>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
8000b80e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b812:	70 39       	ld.w	r9,r8[0xc]
8000b814:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b818:	10 19       	sub	r9,r8
8000b81a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b81e:	91 39       	st.w	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
8000b820:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b824:	70 39       	ld.w	r9,r8[0xc]
8000b826:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b82a:	91 29       	st.w	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
8000b82c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b830:	10 9c       	mov	r12,r8
8000b832:	f0 1f 00 51 	mcall	8000b974 <udd_ep_interrupt+0x20c>
			return true;
8000b836:	30 18       	mov	r8,1
8000b838:	c9 88       	rjmp	8000b968 <udd_ep_interrupt+0x200>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
8000b83a:	fe 68 00 00 	mov	r8,-131072
8000b83e:	70 49       	ld.w	r9,r8[0x10]
8000b840:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b844:	e0 6a 10 00 	mov	r10,4096
8000b848:	f4 08 09 48 	lsl	r8,r10,r8
8000b84c:	f3 e8 00 08 	and	r8,r9,r8
8000b850:	c7 f0       	breq	8000b94e <udd_ep_interrupt+0x1e6>
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
8000b852:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b856:	a3 68       	lsl	r8,0x2
8000b858:	e0 38 fe 40 	sub	r8,130624
8000b85c:	70 08       	ld.w	r8,r8[0x0]
8000b85e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b862:	5c 58       	castu.b	r8
8000b864:	c2 b0       	breq	8000b8ba <udd_ep_interrupt+0x152>
8000b866:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b86a:	a3 68       	lsl	r8,0x2
8000b86c:	e0 38 fe d0 	sub	r8,130768
8000b870:	70 08       	ld.w	r8,r8[0x0]
8000b872:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b876:	5c 58       	castu.b	r8
8000b878:	c2 10       	breq	8000b8ba <udd_ep_interrupt+0x152>
				udd_disable_in_send_interrupt(ep);
8000b87a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b87e:	a3 68       	lsl	r8,0x2
8000b880:	e0 38 fd e0 	sub	r8,130528
8000b884:	30 19       	mov	r9,1
8000b886:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000b888:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b88c:	a3 68       	lsl	r8,0x2
8000b88e:	e0 38 fe a0 	sub	r8,130720
8000b892:	30 19       	mov	r9,1
8000b894:	91 09       	st.w	r8[0x0],r9
				udd_ack_fifocon(ep);
8000b896:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b89a:	a3 68       	lsl	r8,0x2
8000b89c:	e0 38 fd e0 	sub	r8,130528
8000b8a0:	e0 69 40 00 	mov	r9,16384
8000b8a4:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false, ep);
8000b8a6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b8aa:	10 9a       	mov	r10,r8
8000b8ac:	30 0b       	mov	r11,0
8000b8ae:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b8b2:	f0 1f 00 32 	mcall	8000b978 <udd_ep_interrupt+0x210>
				return true;
8000b8b6:	30 18       	mov	r8,1
8000b8b8:	c5 88       	rjmp	8000b968 <udd_ep_interrupt+0x200>
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
8000b8ba:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b8be:	a3 68       	lsl	r8,0x2
8000b8c0:	e0 38 fe 40 	sub	r8,130624
8000b8c4:	70 08       	ld.w	r8,r8[0x0]
8000b8c6:	e2 18 10 00 	andl	r8,0x1000,COH
8000b8ca:	c4 20       	breq	8000b94e <udd_ep_interrupt+0x1e6>
8000b8cc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b8d0:	a3 68       	lsl	r8,0x2
8000b8d2:	e0 38 fe d0 	sub	r8,130768
8000b8d6:	70 08       	ld.w	r8,r8[0x0]
8000b8d8:	e2 18 30 00 	andl	r8,0x3000,COH
8000b8dc:	ad 88       	lsr	r8,0xc
8000b8de:	c3 81       	brne	8000b94e <udd_ep_interrupt+0x1e6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
8000b8e0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b8e4:	a3 68       	lsl	r8,0x2
8000b8e6:	e0 38 fd e0 	sub	r8,130528
8000b8ea:	e0 69 10 00 	mov	r9,4096
8000b8ee:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
8000b8f0:	fe 68 00 00 	mov	r8,-131072
8000b8f4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b8f8:	e0 6a 10 00 	mov	r10,4096
8000b8fc:	f4 09 09 49 	lsl	r9,r10,r9
8000b900:	91 59       	st.w	r8[0x14],r9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
8000b902:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b906:	72 08       	ld.w	r8,r9[0x0]
8000b908:	30 0a       	mov	r10,0
8000b90a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000b90e:	93 08       	st.w	r9[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
8000b910:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b914:	a3 68       	lsl	r8,0x2
8000b916:	e0 38 ff 00 	sub	r8,130816
8000b91a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b91e:	a3 69       	lsl	r9,0x2
8000b920:	e0 39 ff 00 	sub	r9,130816
8000b924:	72 09       	ld.w	r9,r9[0x0]
8000b926:	a9 d9       	cbr	r9,0x9
8000b928:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
8000b92a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b92e:	a3 68       	lsl	r8,0x2
8000b930:	e0 38 fe 10 	sub	r8,130576
8000b934:	e8 69 00 00 	mov	r9,524288
8000b938:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
8000b93a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b93e:	a3 68       	lsl	r8,0x2
8000b940:	e0 38 fe 10 	sub	r8,130576
8000b944:	e4 69 00 00 	mov	r9,262144
8000b948:	91 09       	st.w	r8[0x0],r9
				return true;
8000b94a:	30 18       	mov	r8,1
8000b94c:	c0 e8       	rjmp	8000b968 <udd_ep_interrupt+0x200>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000b94e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b952:	2f f8       	sub	r8,-1
8000b954:	ef 68 ff f7 	st.b	r7[-9],r8
8000b958:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b95c:	30 28       	mov	r8,2
8000b95e:	f0 09 18 00 	cp.b	r9,r8
8000b962:	fe 98 ff 0b 	brls	8000b778 <udd_ep_interrupt+0x10>
				udd_reset_data_toggle(ep);
				return true;
			}
		}
	}
	return false;
8000b966:	30 08       	mov	r8,0
}
8000b968:	10 9c       	mov	r12,r8
8000b96a:	2f dd       	sub	sp,-12
8000b96c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b970:	00 00       	add	r0,r0
8000b972:	07 c0       	ld.ub	r0,r3[0x4]
8000b974:	80 00       	ld.sh	r0,r0[0x0]
8000b976:	b5 14       	ld.d	r4,--r10
8000b978:	80 00       	ld.sh	r0,r0[0x0]
8000b97a:	b4 90       	st.b	r10[0x1],r0

8000b97c <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000b97c:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000b980:	fe c0 cd 80 	sub	r0,pc,-12928

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
8000b984:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000b988:	d5 53       	csrf	0x15
  cp      r0, r1
8000b98a:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
8000b98c:	e0 61 02 48 	mov	r1,584
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
8000b990:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000b992:	c0 72       	brcc	8000b9a0 <idata_load_loop_end>
  cp      r0, r1
8000b994:	fe c2 c3 cc 	sub	r2,pc,-15412

8000b998 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000b998:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
8000b99a:	a1 24       	st.d	r0++,r4
  cp      r0, r1
8000b99c:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000b99e:	cf d3       	brcs	8000b998 <idata_load_loop>

8000b9a0 <idata_load_loop_end>:
  mov     r2, 0
8000b9a0:	e0 60 02 48 	mov	r0,584
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000b9a4:	e0 61 10 28 	mov	r1,4136
  cp      r0, r1
  brlo    udata_clear_loop
8000b9a8:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000b9aa:	c0 62       	brcc	8000b9b6 <udata_clear_loop_end>
8000b9ac:	30 02       	mov	r2,0
8000b9ae:	30 03       	mov	r3,0

8000b9b0 <udata_clear_loop>:
8000b9b0:	a1 22       	st.d	r0++,r2
8000b9b2:	02 30       	cp.w	r0,r1
8000b9b4:	cf e3       	brcs	8000b9b0 <udata_clear_loop>

8000b9b6 <udata_clear_loop_end>:
8000b9b6:	fe cf d6 fe 	sub	pc,pc,-10498
8000b9ba:	d7 03       	nop

8000b9bc <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8000b9bc:	eb cd 40 80 	pushm	r7,lr
8000b9c0:	1a 97       	mov	r7,sp
8000b9c2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000b9c4:	e1 b8 00 00 	mfsr	r8,0x0
8000b9c8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8000b9cc:	d3 03       	ssrf	0x10

	return flags;
8000b9ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000b9d2:	10 9c       	mov	r12,r8
8000b9d4:	2f fd       	sub	sp,-4
8000b9d6:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b9da <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8000b9da:	eb cd 40 80 	pushm	r7,lr
8000b9de:	1a 97       	mov	r7,sp
8000b9e0:	20 1d       	sub	sp,4
8000b9e2:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000b9e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b9ea:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8000b9ee:	2f fd       	sub	sp,-4
8000b9f0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b9f4 <osc_enable>:
#include <stdbool.h>
#include <stdint.h>
#include <avr32/io.h>

static inline void osc_enable(uint8_t id)
{
8000b9f4:	eb cd 40 80 	pushm	r7,lr
8000b9f8:	1a 97       	mov	r7,sp
8000b9fa:	20 3d       	sub	sp,12
8000b9fc:	18 98       	mov	r8,r12
8000b9fe:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();
8000ba02:	f0 1f 00 2b 	mcall	8000baac <osc_enable+0xb8>
8000ba06:	18 98       	mov	r8,r12
8000ba08:	ef 48 ff f8 	st.w	r7[-8],r8

	switch (id) {
8000ba0c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000ba10:	58 18       	cp.w	r8,1
8000ba12:	c1 c0       	breq	8000ba4a <osc_enable+0x56>
8000ba14:	58 28       	cp.w	r8,2
8000ba16:	c3 10       	breq	8000ba78 <osc_enable+0x84>
8000ba18:	58 08       	cp.w	r8,0
8000ba1a:	c4 21       	brne	8000ba9e <osc_enable+0xaa>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
8000ba1c:	e0 68 03 00 	mov	r8,768
8000ba20:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
8000ba24:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba28:	e8 18 00 07 	orl	r8,0x7
8000ba2c:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl0 = oscctrl;
8000ba30:	fe 78 0c 00 	mov	r8,-62464
8000ba34:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ba38:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
8000ba3a:	fe 78 0c 00 	mov	r8,-62464
8000ba3e:	fe 79 0c 00 	mov	r9,-62464
8000ba42:	72 09       	ld.w	r9,r9[0x0]
8000ba44:	a3 a9       	sbr	r9,0x2
8000ba46:	91 09       	st.w	r8[0x0],r9
		break;
8000ba48:	c2 b8       	rjmp	8000ba9e <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		oscctrl = OSC1_STARTUP_VALUE <<
8000ba4a:	e0 68 03 00 	mov	r8,768
8000ba4e:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL1_STARTUP_OFFSET;
		oscctrl |= OSC1_MODE_VALUE << AVR32_PM_OSCCTRL1_MODE_OFFSET;
8000ba52:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba56:	e8 18 00 07 	orl	r8,0x7
8000ba5a:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl1 = oscctrl;
8000ba5e:	fe 78 0c 00 	mov	r8,-62464
8000ba62:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ba66:	91 b9       	st.w	r8[0x2c],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC1EN;
8000ba68:	fe 78 0c 00 	mov	r8,-62464
8000ba6c:	fe 79 0c 00 	mov	r9,-62464
8000ba70:	72 09       	ld.w	r9,r9[0x0]
8000ba72:	a3 b9       	sbr	r9,0x3
8000ba74:	91 09       	st.w	r8[0x0],r9
		break;
8000ba76:	c1 48       	rjmp	8000ba9e <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
8000ba78:	e2 68 00 00 	mov	r8,131072
8000ba7c:	ef 48 ff fc 	st.w	r7[-4],r8
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
8000ba80:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba84:	a9 a8       	sbr	r8,0x8
8000ba86:	ef 48 ff fc 	st.w	r7[-4],r8
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
8000ba8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba8e:	a1 a8       	sbr	r8,0x0
8000ba90:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl32 = oscctrl;
8000ba94:	fe 78 0c 00 	mov	r8,-62464
8000ba98:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ba9c:	91 c9       	st.w	r8[0x30],r9
	default:
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
8000ba9e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000baa2:	f0 1f 00 04 	mcall	8000bab0 <osc_enable+0xbc>
}
8000baa6:	2f dd       	sub	sp,-12
8000baa8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000baac:	80 00       	ld.sh	r0,r0[0x0]
8000baae:	b9 bc       	sbr	r12,0x19
8000bab0:	80 00       	ld.sh	r0,r0[0x0]
8000bab2:	b9 da       	cbr	r10,0x19

8000bab4 <osc_is_ready>:
	}
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
8000bab4:	eb cd 40 80 	pushm	r7,lr
8000bab8:	1a 97       	mov	r7,sp
8000baba:	20 1d       	sub	sp,4
8000babc:	18 98       	mov	r8,r12
8000babe:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000bac2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bac6:	58 18       	cp.w	r8,1
8000bac8:	c0 d0       	breq	8000bae2 <osc_is_ready+0x2e>
8000baca:	58 28       	cp.w	r8,2
8000bacc:	c1 30       	breq	8000baf2 <osc_is_ready+0x3e>
8000bace:	58 08       	cp.w	r8,0
8000bad0:	c1 91       	brne	8000bb02 <osc_is_ready+0x4e>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
8000bad2:	fe 78 0c 00 	mov	r8,-62464
8000bad6:	71 58       	ld.w	r8,r8[0x54]
8000bad8:	e2 18 00 80 	andl	r8,0x80,COH
8000badc:	5f 18       	srne	r8
8000bade:	5c 58       	castu.b	r8
8000bae0:	c1 28       	rjmp	8000bb04 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC1RDY));
8000bae2:	fe 78 0c 00 	mov	r8,-62464
8000bae6:	71 58       	ld.w	r8,r8[0x54]
8000bae8:	e2 18 01 00 	andl	r8,0x100,COH
8000baec:	5f 18       	srne	r8
8000baee:	5c 58       	castu.b	r8
8000baf0:	c0 a8       	rjmp	8000bb04 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC32RDY));
8000baf2:	fe 78 0c 00 	mov	r8,-62464
8000baf6:	71 58       	ld.w	r8,r8[0x54]
8000baf8:	e2 18 02 00 	andl	r8,0x200,COH
8000bafc:	5f 18       	srne	r8
8000bafe:	5c 58       	castu.b	r8
8000bb00:	c0 28       	rjmp	8000bb04 <osc_is_ready+0x50>
#endif

	default:
		/* unhandled_case(id); */
		return false;
8000bb02:	30 08       	mov	r8,0
	}
}
8000bb04:	10 9c       	mov	r12,r8
8000bb06:	2f fd       	sub	sp,-4
8000bb08:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bb0c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
8000bb0c:	eb cd 40 80 	pushm	r7,lr
8000bb10:	1a 97       	mov	r7,sp
8000bb12:	20 1d       	sub	sp,4
8000bb14:	18 98       	mov	r8,r12
8000bb16:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000bb1a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bb1e:	58 18       	cp.w	r8,1
8000bb20:	c0 a0       	breq	8000bb34 <osc_get_rate+0x28>
8000bb22:	58 28       	cp.w	r8,2
8000bb24:	c0 d0       	breq	8000bb3e <osc_get_rate+0x32>
8000bb26:	58 08       	cp.w	r8,0
8000bb28:	c0 e1       	brne	8000bb44 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000bb2a:	e0 68 1b 00 	mov	r8,6912
8000bb2e:	ea 18 00 b7 	orh	r8,0xb7
8000bb32:	c0 a8       	rjmp	8000bb46 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000bb34:	e0 68 44 00 	mov	r8,17408
8000bb38:	ea 18 00 ac 	orh	r8,0xac
8000bb3c:	c0 58       	rjmp	8000bb46 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000bb3e:	e0 68 80 00 	mov	r8,32768
8000bb42:	c0 28       	rjmp	8000bb46 <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000bb44:	30 08       	mov	r8,0
	}
}
8000bb46:	10 9c       	mov	r12,r8
8000bb48:	2f fd       	sub	sp,-4
8000bb4a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb4e:	d7 03       	nop

8000bb50 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8000bb50:	eb cd 40 80 	pushm	r7,lr
8000bb54:	1a 97       	mov	r7,sp
8000bb56:	20 1d       	sub	sp,4
8000bb58:	18 98       	mov	r8,r12
8000bb5a:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8000bb5e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bb62:	10 9c       	mov	r12,r8
8000bb64:	f0 1f 00 05 	mcall	8000bb78 <osc_wait_ready+0x28>
8000bb68:	18 98       	mov	r8,r12
8000bb6a:	ec 18 00 01 	eorl	r8,0x1
8000bb6e:	5c 58       	castu.b	r8
8000bb70:	cf 71       	brne	8000bb5e <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
8000bb72:	2f fd       	sub	sp,-4
8000bb74:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb78:	80 00       	ld.sh	r0,r0[0x0]
8000bb7a:	ba b4       	st.b	sp[0x3],r4

8000bb7c <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8000bb7c:	eb cd 40 80 	pushm	r7,lr
8000bb80:	1a 97       	mov	r7,sp
8000bb82:	20 2d       	sub	sp,8
8000bb84:	ef 4c ff fc 	st.w	r7[-4],r12
8000bb88:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
8000bb8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb90:	70 09       	ld.w	r9,r8[0x0]
8000bb92:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb96:	2f e8       	sub	r8,-2
8000bb98:	30 1a       	mov	r10,1
8000bb9a:	f4 08 09 48 	lsl	r8,r10,r8
8000bb9e:	10 49       	or	r9,r8
8000bba0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bba4:	91 09       	st.w	r8[0x0],r9
}
8000bba6:	2f ed       	sub	sp,-8
8000bba8:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bbac <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8000bbac:	eb cd 40 80 	pushm	r7,lr
8000bbb0:	1a 97       	mov	r7,sp
8000bbb2:	20 5d       	sub	sp,20
8000bbb4:	ef 4c ff f8 	st.w	r7[-8],r12
8000bbb8:	ef 4b ff f4 	st.w	r7[-12],r11
8000bbbc:	ef 4a ff f0 	st.w	r7[-16],r10
8000bbc0:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8000bbc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bbc8:	5c 58       	castu.b	r8
8000bbca:	10 9c       	mov	r12,r8
8000bbcc:	f0 1f 00 2e 	mcall	8000bc84 <pll_config_init+0xd8>
8000bbd0:	18 99       	mov	r9,r12
8000bbd2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bbd6:	f2 08 02 48 	mul	r8,r9,r8
8000bbda:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8000bbde:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbe2:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000bbe6:	f0 09 0d 08 	divu	r8,r8,r9
8000bbea:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8000bbee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bbf2:	30 09       	mov	r9,0
8000bbf4:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8000bbf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbfa:	e0 69 b3 ff 	mov	r9,46079
8000bbfe:	ea 19 04 c4 	orh	r9,0x4c4
8000bc02:	12 38       	cp.w	r8,r9
8000bc04:	e0 8b 00 16 	brhi	8000bc30 <pll_config_init+0x84>
8000bc08:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bc0c:	58 88       	cp.w	r8,8
8000bc0e:	e0 8b 00 11 	brhi	8000bc30 <pll_config_init+0x84>
		mul *= 2;
8000bc12:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bc16:	a1 78       	lsl	r8,0x1
8000bc18:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8000bc1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc20:	a1 78       	lsl	r8,0x1
8000bc22:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8000bc26:	30 1b       	mov	r11,1
8000bc28:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bc2c:	f0 1f 00 17 	mcall	8000bc88 <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8000bc30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc34:	e0 69 fe 7f 	mov	r9,65151
8000bc38:	ea 19 0a 21 	orh	r9,0xa21
8000bc3c:	12 38       	cp.w	r8,r9
8000bc3e:	e0 8b 00 07 	brhi	8000bc4c <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8000bc42:	30 0b       	mov	r11,0
8000bc44:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bc48:	f0 1f 00 10 	mcall	8000bc88 <pll_config_init+0xdc>

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000bc4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bc50:	70 09       	ld.w	r9,r8[0x0]
8000bc52:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bc56:	20 18       	sub	r8,1
8000bc58:	f0 0a 15 10 	lsl	r10,r8,0x10
			| (div << AVR32_PM_PLL0_PLLDIV)
8000bc5c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bc60:	a9 68       	lsl	r8,0x8
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
8000bc62:	10 4a       	or	r10,r8
			| (src << AVR32_PM_PLL0_PLLOSC);
8000bc64:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bc68:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000bc6a:	f5 e8 10 08 	or	r8,r10,r8
8000bc6e:	f3 e8 10 08 	or	r8,r9,r8
8000bc72:	10 99       	mov	r9,r8
8000bc74:	ea 19 3f 00 	orh	r9,0x3f00
8000bc78:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bc7c:	91 09       	st.w	r8[0x0],r9
			| (div << AVR32_PM_PLL0_PLLDIV)
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
			| (src << AVR32_PM_PLL0_PLLOSC);
}
8000bc7e:	2f bd       	sub	sp,-20
8000bc80:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc84:	80 00       	ld.sh	r0,r0[0x0]
8000bc86:	bb 0c       	ld.d	r12,sp
8000bc88:	80 00       	ld.sh	r0,r0[0x0]
8000bc8a:	bb 7c       	lsl	r12,0x1b

8000bc8c <pll_enable>:
	AVR32_PM.pll[pll_id] = cfg->ctrl;
}

static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
8000bc8c:	eb cd 40 80 	pushm	r7,lr
8000bc90:	1a 97       	mov	r7,sp
8000bc92:	20 2d       	sub	sp,8
8000bc94:	ef 4c ff fc 	st.w	r7[-4],r12
8000bc98:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
8000bc9c:	fe 78 0c 00 	mov	r8,-62464
8000bca0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bca4:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bca8:	74 0a       	ld.w	r10,r10[0x0]
8000bcaa:	a1 aa       	sbr	r10,0x0
8000bcac:	2f 89       	sub	r9,-8
8000bcae:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000bcb2:	2f ed       	sub	sp,-8
8000bcb4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bcb8 <pll_is_locked>:

	AVR32_PM.pll[pll_id] = 0;
}

static inline bool pll_is_locked(unsigned int pll_id)
{
8000bcb8:	eb cd 40 80 	pushm	r7,lr
8000bcbc:	1a 97       	mov	r7,sp
8000bcbe:	20 1d       	sub	sp,4
8000bcc0:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
8000bcc4:	fe 78 0c 00 	mov	r8,-62464
8000bcc8:	71 59       	ld.w	r9,r8[0x54]
8000bcca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcce:	30 1a       	mov	r10,1
8000bcd0:	f4 08 09 48 	lsl	r8,r10,r8
8000bcd4:	f3 e8 00 08 	and	r8,r9,r8
8000bcd8:	5f 18       	srne	r8
8000bcda:	5c 58       	castu.b	r8
}
8000bcdc:	10 9c       	mov	r12,r8
8000bcde:	2f fd       	sub	sp,-4
8000bce0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bce4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
8000bce4:	eb cd 40 80 	pushm	r7,lr
8000bce8:	1a 97       	mov	r7,sp
8000bcea:	20 1d       	sub	sp,4
8000bcec:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000bcf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcf4:	58 08       	cp.w	r8,0
8000bcf6:	c0 40       	breq	8000bcfe <pll_enable_source+0x1a>
8000bcf8:	58 18       	cp.w	r8,1
8000bcfa:	c1 10       	breq	8000bd1c <pll_enable_source+0x38>
8000bcfc:	c2 08       	rjmp	8000bd3c <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000bcfe:	30 0c       	mov	r12,0
8000bd00:	f0 1f 00 11 	mcall	8000bd44 <pll_enable_source+0x60>
8000bd04:	18 98       	mov	r8,r12
8000bd06:	ec 18 00 01 	eorl	r8,0x1
8000bd0a:	5c 58       	castu.b	r8
8000bd0c:	c1 70       	breq	8000bd3a <pll_enable_source+0x56>
			osc_enable(OSC_ID_OSC0);
8000bd0e:	30 0c       	mov	r12,0
8000bd10:	f0 1f 00 0e 	mcall	8000bd48 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC0);
8000bd14:	30 0c       	mov	r12,0
8000bd16:	f0 1f 00 0e 	mcall	8000bd4c <pll_enable_source+0x68>
		}
		break;
8000bd1a:	c1 18       	rjmp	8000bd3c <pll_enable_source+0x58>

	case PLL_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000bd1c:	30 1c       	mov	r12,1
8000bd1e:	f0 1f 00 0a 	mcall	8000bd44 <pll_enable_source+0x60>
8000bd22:	18 98       	mov	r8,r12
8000bd24:	ec 18 00 01 	eorl	r8,0x1
8000bd28:	5c 58       	castu.b	r8
8000bd2a:	c0 90       	breq	8000bd3c <pll_enable_source+0x58>
			osc_enable(OSC_ID_OSC1);
8000bd2c:	30 1c       	mov	r12,1
8000bd2e:	f0 1f 00 07 	mcall	8000bd48 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC1);
8000bd32:	30 1c       	mov	r12,1
8000bd34:	f0 1f 00 06 	mcall	8000bd4c <pll_enable_source+0x68>
8000bd38:	c0 28       	rjmp	8000bd3c <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000bd3a:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000bd3c:	2f fd       	sub	sp,-4
8000bd3e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd42:	00 00       	add	r0,r0
8000bd44:	80 00       	ld.sh	r0,r0[0x0]
8000bd46:	ba b4       	st.b	sp[0x3],r4
8000bd48:	80 00       	ld.sh	r0,r0[0x0]
8000bd4a:	b9 f4       	*unknown*
8000bd4c:	80 00       	ld.sh	r0,r0[0x0]
8000bd4e:	bb 50       	asr	r0,0x1b

8000bd50 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
8000bd50:	eb cd 40 80 	pushm	r7,lr
8000bd54:	1a 97       	mov	r7,sp
8000bd56:	20 2d       	sub	sp,8
8000bd58:	ef 4c ff f8 	st.w	r7[-8],r12
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
8000bd5c:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bd60:	f0 1f 00 15 	mcall	8000bdb4 <pll_enable_config_defaults+0x64>
8000bd64:	18 98       	mov	r8,r12
8000bd66:	58 08       	cp.w	r8,0
8000bd68:	c2 11       	brne	8000bdaa <pll_enable_config_defaults+0x5a>
		return; // Pll already running
	}
	switch (pll_id) {
8000bd6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bd6e:	58 08       	cp.w	r8,0
8000bd70:	c0 c1       	brne	8000bd88 <pll_enable_config_defaults+0x38>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
8000bd72:	30 0c       	mov	r12,0
8000bd74:	f0 1f 00 11 	mcall	8000bdb8 <pll_enable_config_defaults+0x68>
		pll_config_init(&pllcfg,
8000bd78:	ee c8 00 04 	sub	r8,r7,4
8000bd7c:	30 b9       	mov	r9,11
8000bd7e:	30 2a       	mov	r10,2
8000bd80:	30 0b       	mov	r11,0
8000bd82:	10 9c       	mov	r12,r8
8000bd84:	f0 1f 00 0e 	mcall	8000bdbc <pll_enable_config_defaults+0x6c>
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
8000bd88:	ee c8 00 04 	sub	r8,r7,4
8000bd8c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bd90:	10 9c       	mov	r12,r8
8000bd92:	f0 1f 00 0c 	mcall	8000bdc0 <pll_enable_config_defaults+0x70>
	while (!pll_is_locked(pll_id));
8000bd96:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bd9a:	f0 1f 00 07 	mcall	8000bdb4 <pll_enable_config_defaults+0x64>
8000bd9e:	18 98       	mov	r8,r12
8000bda0:	ec 18 00 01 	eorl	r8,0x1
8000bda4:	5c 58       	castu.b	r8
8000bda6:	cf 81       	brne	8000bd96 <pll_enable_config_defaults+0x46>
8000bda8:	c0 28       	rjmp	8000bdac <pll_enable_config_defaults+0x5c>
static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
		return; // Pll already running
8000bdaa:	d7 03       	nop
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
}
8000bdac:	2f ed       	sub	sp,-8
8000bdae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bdb2:	00 00       	add	r0,r0
8000bdb4:	80 00       	ld.sh	r0,r0[0x0]
8000bdb6:	bc b8       	st.b	lr[0x3],r8
8000bdb8:	80 00       	ld.sh	r0,r0[0x0]
8000bdba:	bc e4       	st.b	lr[0x6],r4
8000bdbc:	80 00       	ld.sh	r0,r0[0x0]
8000bdbe:	bb ac       	sbr	r12,0x1a
8000bdc0:	80 00       	ld.sh	r0,r0[0x0]
8000bdc2:	bc 8c       	st.b	lr[0x0],r12

8000bdc4 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8000bdc4:	eb cd 40 80 	pushm	r7,lr
8000bdc8:	1a 97       	mov	r7,sp
8000bdca:	20 2d       	sub	sp,8
8000bdcc:	ef 4c ff fc 	st.w	r7[-4],r12
8000bdd0:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8000bdd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bdd8:	30 09       	mov	r9,0
8000bdda:	91 09       	st.w	r8[0x0],r9
}
8000bddc:	2f ed       	sub	sp,-8
8000bdde:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bde2 <genclk_config_set_source>:
	AVR32_PM.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8000bde2:	eb cd 40 80 	pushm	r7,lr
8000bde6:	1a 97       	mov	r7,sp
8000bde8:	20 3d       	sub	sp,12
8000bdea:	ef 4c ff f8 	st.w	r7[-8],r12
8000bdee:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t mask;

	mask = AVR32_PM_GCCTRL_OSCSEL_MASK | AVR32_PM_GCCTRL_PLLSEL_MASK;
8000bdf2:	30 38       	mov	r8,3
8000bdf4:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(!(src & ~mask));

	cfg->ctrl = (cfg->ctrl & ~mask) | (src << AVR32_PM_GCCTRL_OSCSEL);
8000bdf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bdfc:	70 09       	ld.w	r9,r8[0x0]
8000bdfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be02:	5c d8       	com	r8
8000be04:	10 69       	and	r9,r8
8000be06:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000be0a:	10 49       	or	r9,r8
8000be0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be10:	91 09       	st.w	r8[0x0],r9
}
8000be12:	2f dd       	sub	sp,-12
8000be14:	e3 cd 80 80 	ldm	sp++,r7,pc

8000be18 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8000be18:	eb cd 40 80 	pushm	r7,lr
8000be1c:	1a 97       	mov	r7,sp
8000be1e:	20 2d       	sub	sp,8
8000be20:	ef 4c ff fc 	st.w	r7[-4],r12
8000be24:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert((divider > 0) && (divider <= GENCLK_DIV_MAX));

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_PM_GCCTRL_DIVEN_MASK | AVR32_PM_GCCTRL_DIV_MASK);
8000be28:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be2c:	70 08       	ld.w	r8,r8[0x0]
8000be2e:	10 99       	mov	r9,r8
8000be30:	e0 19 00 ef 	andl	r9,0xef
8000be34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be38:	91 09       	st.w	r8[0x0],r9

	if (divider > 1) {
8000be3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be3e:	58 18       	cp.w	r8,1
8000be40:	e0 88 00 17 	brls	8000be6e <genclk_config_set_divider+0x56>
		cfg->ctrl |= 1U << AVR32_PM_GCCTRL_DIVEN;
8000be44:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be48:	70 08       	ld.w	r8,r8[0x0]
8000be4a:	10 99       	mov	r9,r8
8000be4c:	a5 a9       	sbr	r9,0x4
8000be4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be52:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_PM_GCCTRL_DIV;
8000be54:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be58:	70 09       	ld.w	r9,r8[0x0]
8000be5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be5e:	2f f8       	sub	r8,-1
8000be60:	a1 98       	lsr	r8,0x1
8000be62:	20 18       	sub	r8,1
8000be64:	a9 68       	lsl	r8,0x8
8000be66:	10 49       	or	r9,r8
8000be68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be6c:	91 09       	st.w	r8[0x0],r9
	}
}
8000be6e:	2f ed       	sub	sp,-8
8000be70:	e3 cd 80 80 	ldm	sp++,r7,pc

8000be74 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8000be74:	eb cd 40 80 	pushm	r7,lr
8000be78:	1a 97       	mov	r7,sp
8000be7a:	20 2d       	sub	sp,8
8000be7c:	ef 4c ff fc 	st.w	r7[-4],r12
8000be80:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
8000be84:	fe 78 0c 00 	mov	r8,-62464
8000be88:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000be8c:	ee fa ff fc 	ld.w	r10,r7[-4]
8000be90:	74 0a       	ld.w	r10,r10[0x0]
8000be92:	a3 aa       	sbr	r10,0x2
8000be94:	2e 89       	sub	r9,-24
8000be96:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000be9a:	2f ed       	sub	sp,-8
8000be9c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bea0 <genclk_enable_source>:
{
	AVR32_PM.gcctrl[id] = 0;
}

static inline void genclk_enable_source(enum genclk_source src)
{
8000bea0:	eb cd 40 80 	pushm	r7,lr
8000bea4:	1a 97       	mov	r7,sp
8000bea6:	20 1d       	sub	sp,4
8000bea8:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000beac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000beb0:	58 18       	cp.w	r8,1
8000beb2:	c1 40       	breq	8000beda <genclk_enable_source+0x3a>
8000beb4:	c0 43       	brcs	8000bebc <genclk_enable_source+0x1c>
8000beb6:	58 28       	cp.w	r8,2
8000beb8:	c2 00       	breq	8000bef8 <genclk_enable_source+0x58>
8000beba:	c2 68       	rjmp	8000bf06 <genclk_enable_source+0x66>
#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000bebc:	30 0c       	mov	r12,0
8000bebe:	f0 1f 00 14 	mcall	8000bf0c <genclk_enable_source+0x6c>
8000bec2:	18 98       	mov	r8,r12
8000bec4:	ec 18 00 01 	eorl	r8,0x1
8000bec8:	5c 58       	castu.b	r8
8000beca:	c1 b0       	breq	8000bf00 <genclk_enable_source+0x60>
			osc_enable(OSC_ID_OSC0);
8000becc:	30 0c       	mov	r12,0
8000bece:	f0 1f 00 11 	mcall	8000bf10 <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC0);
8000bed2:	30 0c       	mov	r12,0
8000bed4:	f0 1f 00 10 	mcall	8000bf14 <genclk_enable_source+0x74>
		}
		break;
8000bed8:	c1 78       	rjmp	8000bf06 <genclk_enable_source+0x66>
#endif

#ifdef BOARD_OSC1_HZ
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000beda:	30 1c       	mov	r12,1
8000bedc:	f0 1f 00 0c 	mcall	8000bf0c <genclk_enable_source+0x6c>
8000bee0:	18 98       	mov	r8,r12
8000bee2:	ec 18 00 01 	eorl	r8,0x1
8000bee6:	5c 58       	castu.b	r8
8000bee8:	c0 e0       	breq	8000bf04 <genclk_enable_source+0x64>
			osc_enable(OSC_ID_OSC1);
8000beea:	30 1c       	mov	r12,1
8000beec:	f0 1f 00 09 	mcall	8000bf10 <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC1);
8000bef0:	30 1c       	mov	r12,1
8000bef2:	f0 1f 00 09 	mcall	8000bf14 <genclk_enable_source+0x74>
		}
		break;
8000bef6:	c0 88       	rjmp	8000bf06 <genclk_enable_source+0x66>
#endif

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000bef8:	30 0c       	mov	r12,0
8000befa:	f0 1f 00 08 	mcall	8000bf18 <genclk_enable_source+0x78>
8000befe:	c0 48       	rjmp	8000bf06 <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000bf00:	d7 03       	nop
8000bf02:	c0 28       	rjmp	8000bf06 <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
			osc_enable(OSC_ID_OSC1);
			osc_wait_ready(OSC_ID_OSC1);
		}
		break;
8000bf04:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000bf06:	2f fd       	sub	sp,-4
8000bf08:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf0c:	80 00       	ld.sh	r0,r0[0x0]
8000bf0e:	ba b4       	st.b	sp[0x3],r4
8000bf10:	80 00       	ld.sh	r0,r0[0x0]
8000bf12:	b9 f4       	*unknown*
8000bf14:	80 00       	ld.sh	r0,r0[0x0]
8000bf16:	bb 50       	asr	r0,0x1b
8000bf18:	80 00       	ld.sh	r0,r0[0x0]
8000bf1a:	bd 50       	asr	r0,0x1d

8000bf1c <genclk_enable_config>:
 * \param id      The ID of the generic clock.
 * \param src     The source clock of the generic clock.
 * \param divider The divider used to generate the generic clock.
 */
static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
8000bf1c:	eb cd 40 80 	pushm	r7,lr
8000bf20:	1a 97       	mov	r7,sp
8000bf22:	20 4d       	sub	sp,16
8000bf24:	ef 4c ff f8 	st.w	r7[-8],r12
8000bf28:	ef 4b ff f4 	st.w	r7[-12],r11
8000bf2c:	ef 4a ff f0 	st.w	r7[-16],r10
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, id);
8000bf30:	ee c8 00 04 	sub	r8,r7,4
8000bf34:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bf38:	10 9c       	mov	r12,r8
8000bf3a:	f0 1f 00 10 	mcall	8000bf78 <genclk_enable_config+0x5c>
	genclk_enable_source(src);
8000bf3e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000bf42:	f0 1f 00 0f 	mcall	8000bf7c <genclk_enable_config+0x60>
	genclk_config_set_source(&gcfg, src);
8000bf46:	ee c8 00 04 	sub	r8,r7,4
8000bf4a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000bf4e:	10 9c       	mov	r12,r8
8000bf50:	f0 1f 00 0c 	mcall	8000bf80 <genclk_enable_config+0x64>
	genclk_config_set_divider(&gcfg, divider);
8000bf54:	ee c8 00 04 	sub	r8,r7,4
8000bf58:	ee fb ff f0 	ld.w	r11,r7[-16]
8000bf5c:	10 9c       	mov	r12,r8
8000bf5e:	f0 1f 00 0a 	mcall	8000bf84 <genclk_enable_config+0x68>
	genclk_enable(&gcfg, id);
8000bf62:	ee c8 00 04 	sub	r8,r7,4
8000bf66:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bf6a:	10 9c       	mov	r12,r8
8000bf6c:	f0 1f 00 07 	mcall	8000bf88 <genclk_enable_config+0x6c>
}
8000bf70:	2f cd       	sub	sp,-16
8000bf72:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf76:	00 00       	add	r0,r0
8000bf78:	80 00       	ld.sh	r0,r0[0x0]
8000bf7a:	bd c4       	cbr	r4,0x1c
8000bf7c:	80 00       	ld.sh	r0,r0[0x0]
8000bf7e:	be a0       	st.b	pc[0x2],r0
8000bf80:	80 00       	ld.sh	r0,r0[0x0]
8000bf82:	bd e2       	*unknown*
8000bf84:	80 00       	ld.sh	r0,r0[0x0]
8000bf86:	be 18       	st.h	pc[0x2],r8
8000bf88:	80 00       	ld.sh	r0,r0[0x0]
8000bf8a:	be 74       	st.h	pc[0xe],r4

8000bf8c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000bf8c:	eb cd 40 80 	pushm	r7,lr
8000bf90:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000bf92:	30 0c       	mov	r12,0
8000bf94:	f0 1f 00 06 	mcall	8000bfac <sysclk_get_main_hz+0x20>
8000bf98:	18 99       	mov	r9,r12
8000bf9a:	12 98       	mov	r8,r9
8000bf9c:	a3 68       	lsl	r8,0x2
8000bf9e:	12 08       	add	r8,r9
8000bfa0:	a1 78       	lsl	r8,0x1
8000bfa2:	12 08       	add	r8,r9
8000bfa4:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000bfa6:	10 9c       	mov	r12,r8
8000bfa8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bfac:	80 00       	ld.sh	r0,r0[0x0]
8000bfae:	bb 0c       	ld.d	r12,sp

8000bfb0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000bfb0:	eb cd 40 80 	pushm	r7,lr
8000bfb4:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000bfb6:	f0 1f 00 04 	mcall	8000bfc4 <sysclk_get_cpu_hz+0x14>
8000bfba:	18 98       	mov	r8,r12
}
8000bfbc:	10 9c       	mov	r12,r8
8000bfbe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bfc2:	00 00       	add	r0,r0
8000bfc4:	80 00       	ld.sh	r0,r0[0x0]
8000bfc6:	bf 8c       	lsr	r12,0x1e

8000bfc8 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000bfc8:	eb cd 40 80 	pushm	r7,lr
8000bfcc:	1a 97       	mov	r7,sp
8000bfce:	20 1d       	sub	sp,4
8000bfd0:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000bfd4:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bfd8:	30 1c       	mov	r12,1
8000bfda:	f0 1f 00 03 	mcall	8000bfe4 <sysclk_enable_hsb_module+0x1c>
}
8000bfde:	2f fd       	sub	sp,-4
8000bfe0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bfe4:	80 00       	ld.sh	r0,r0[0x0]
8000bfe6:	c0 3c       	rcall	8000bfec <sysclk_set_source+0x4>

8000bfe8 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint_fast8_t src)
{
8000bfe8:	eb cd 40 80 	pushm	r7,lr
8000bfec:	1a 97       	mov	r7,sp
8000bfee:	20 3d       	sub	sp,12
8000bff0:	ef 4c ff f4 	st.w	r7[-12],r12
	irqflags_t flags;
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
8000bff4:	f0 1f 00 10 	mcall	8000c034 <sysclk_set_source+0x4c>
8000bff8:	18 98       	mov	r8,r12
8000bffa:	ef 48 ff f8 	st.w	r7[-8],r8
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
8000bffe:	fe 78 0c 00 	mov	r8,-62464
8000c002:	70 08       	ld.w	r8,r8[0x0]
8000c004:	e0 18 ff fc 	andl	r8,0xfffc
8000c008:	ef 48 ff fc 	st.w	r7[-4],r8
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
8000c00c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c010:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c014:	f3 e8 10 08 	or	r8,r9,r8
8000c018:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.mcctrl = mcctrl;
8000c01c:	fe 78 0c 00 	mov	r8,-62464
8000c020:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c024:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000c026:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c02a:	f0 1f 00 04 	mcall	8000c038 <sysclk_set_source+0x50>
}
8000c02e:	2f dd       	sub	sp,-12
8000c030:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c034:	80 00       	ld.sh	r0,r0[0x0]
8000c036:	b9 bc       	sbr	r12,0x19
8000c038:	80 00       	ld.sh	r0,r0[0x0]
8000c03a:	b9 da       	cbr	r10,0x19

8000c03c <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8000c03c:	eb cd 40 80 	pushm	r7,lr
8000c040:	1a 97       	mov	r7,sp
8000c042:	20 4d       	sub	sp,16
8000c044:	ef 4c ff f4 	st.w	r7[-12],r12
8000c048:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8000c04c:	f0 1f 00 17 	mcall	8000c0a8 <sysclk_priv_enable_module+0x6c>
8000c050:	18 98       	mov	r8,r12
8000c052:	ef 48 ff f8 	st.w	r7[-8],r8

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000c056:	fe 78 0c 00 	mov	r8,-62464
8000c05a:	71 58       	ld.w	r8,r8[0x54]
8000c05c:	e2 18 00 40 	andl	r8,0x40,COH
8000c060:	cf b0       	breq	8000c056 <sysclk_priv_enable_module+0x1a>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000c062:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c066:	a3 68       	lsl	r8,0x2
8000c068:	e0 28 f3 f8 	sub	r8,62456
8000c06c:	70 08       	ld.w	r8,r8[0x0]
8000c06e:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8000c072:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000c076:	30 19       	mov	r9,1
8000c078:	f2 08 09 48 	lsl	r8,r9,r8
8000c07c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c080:	f3 e8 10 08 	or	r8,r9,r8
8000c084:	ef 48 ff fc 	st.w	r7[-4],r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000c088:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c08c:	a3 68       	lsl	r8,0x2
8000c08e:	e0 28 f3 f8 	sub	r8,62456
8000c092:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c096:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8000c098:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c09c:	f0 1f 00 04 	mcall	8000c0ac <sysclk_priv_enable_module+0x70>
}
8000c0a0:	2f cd       	sub	sp,-16
8000c0a2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0a6:	00 00       	add	r0,r0
8000c0a8:	80 00       	ld.sh	r0,r0[0x0]
8000c0aa:	b9 bc       	sbr	r12,0x19
8000c0ac:	80 00       	ld.sh	r0,r0[0x0]
8000c0ae:	b9 da       	cbr	r10,0x19

8000c0b0 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
8000c0b0:	eb cd 40 80 	pushm	r7,lr
8000c0b4:	1a 97       	mov	r7,sp
8000c0b6:	20 3d       	sub	sp,12
8000c0b8:	ef 4c ff f4 	st.w	r7[-12],r12
	unsigned int pbus_id = 0;
8000c0bc:	30 08       	mov	r8,0
8000c0be:	ef 48 ff f8 	st.w	r7[-8],r8
	irqflags_t   flags;

	/* The AES module is on PBC, others are on PBB */
	if (index == SYSCLK_AES)
8000c0c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c0c6:	58 98       	cp.w	r8,9
8000c0c8:	c0 41       	brne	8000c0d0 <sysclk_enable_pbb_module+0x20>
		pbus_id = 1;
8000c0ca:	30 18       	mov	r8,1
8000c0cc:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
8000c0d0:	f0 1f 00 15 	mcall	8000c124 <sysclk_enable_pbb_module+0x74>
8000c0d4:	18 98       	mov	r8,r12
8000c0d6:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!sysclk_bus_refcount[pbus_id])
8000c0da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c0de:	49 39       	lddpc	r9,8000c128 <sysclk_enable_pbb_module+0x78>
8000c0e0:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000c0e4:	58 08       	cp.w	r8,0
8000c0e6:	c0 91       	brne	8000c0f8 <sysclk_enable_pbb_module+0x48>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
8000c0e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c0ec:	a1 78       	lsl	r8,0x1
8000c0ee:	2f f8       	sub	r8,-1
8000c0f0:	a1 78       	lsl	r8,0x1
8000c0f2:	10 9c       	mov	r12,r8
8000c0f4:	f0 1f 00 0e 	mcall	8000c12c <sysclk_enable_pbb_module+0x7c>
	sysclk_bus_refcount[pbus_id]++;
8000c0f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c0fc:	48 b9       	lddpc	r9,8000c128 <sysclk_enable_pbb_module+0x78>
8000c0fe:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000c102:	2f f9       	sub	r9,-1
8000c104:	5c 59       	castu.b	r9
8000c106:	48 9a       	lddpc	r10,8000c128 <sysclk_enable_pbb_module+0x78>
8000c108:	f4 08 0b 09 	st.b	r10[r8],r9

	cpu_irq_restore(flags);
8000c10c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c110:	f0 1f 00 08 	mcall	8000c130 <sysclk_enable_pbb_module+0x80>

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
8000c114:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c118:	30 3c       	mov	r12,3
8000c11a:	f0 1f 00 07 	mcall	8000c134 <sysclk_enable_pbb_module+0x84>
}
8000c11e:	2f dd       	sub	sp,-12
8000c120:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c124:	80 00       	ld.sh	r0,r0[0x0]
8000c126:	b9 bc       	sbr	r12,0x19
8000c128:	00 00       	add	r0,r0
8000c12a:	07 ec       	ld.ub	r12,r3[0x6]
8000c12c:	80 00       	ld.sh	r0,r0[0x0]
8000c12e:	bf c8       	cbr	r8,0x1e
8000c130:	80 00       	ld.sh	r0,r0[0x0]
8000c132:	b9 da       	cbr	r10,0x19
8000c134:	80 00       	ld.sh	r0,r0[0x0]
8000c136:	c0 3c       	rcall	8000c13c <sysclk_enable_usb+0x4>

8000c138 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8000c138:	eb cd 40 80 	pushm	r7,lr
8000c13c:	1a 97       	mov	r7,sp
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
8000c13e:	30 1c       	mov	r12,1
8000c140:	f0 1f 00 06 	mcall	8000c158 <sysclk_enable_usb+0x20>
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000c144:	30 3c       	mov	r12,3
8000c146:	f0 1f 00 06 	mcall	8000c15c <sysclk_enable_usb+0x24>
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
8000c14a:	30 1a       	mov	r10,1
8000c14c:	30 0b       	mov	r11,0
8000c14e:	30 4c       	mov	r12,4
8000c150:	f0 1f 00 04 	mcall	8000c160 <sysclk_enable_usb+0x28>
}
8000c154:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c158:	80 00       	ld.sh	r0,r0[0x0]
8000c15a:	c0 b0       	breq	8000c170 <sysclk_init+0xc>
8000c15c:	80 00       	ld.sh	r0,r0[0x0]
8000c15e:	bf c8       	cbr	r8,0x1e
8000c160:	80 00       	ld.sh	r0,r0[0x0]
8000c162:	bf 1c       	ld.d	r12,--pc

8000c164 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8000c164:	eb cd 40 80 	pushm	r7,lr
8000c168:	1a 97       	mov	r7,sp
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000c16a:	30 0c       	mov	r12,0
8000c16c:	f0 1f 00 07 	mcall	8000c188 <sysclk_init+0x24>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
8000c170:	f0 1f 00 07 	mcall	8000c18c <sysclk_init+0x28>
8000c174:	18 98       	mov	r8,r12
8000c176:	10 9c       	mov	r12,r8
8000c178:	f0 1f 00 06 	mcall	8000c190 <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_PLL0);
8000c17c:	30 2c       	mov	r12,2
8000c17e:	f0 1f 00 06 	mcall	8000c194 <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000c182:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c186:	00 00       	add	r0,r0
8000c188:	80 00       	ld.sh	r0,r0[0x0]
8000c18a:	bd 50       	asr	r0,0x1d
8000c18c:	80 00       	ld.sh	r0,r0[0x0]
8000c18e:	bf b0       	sbr	r0,0x1f
8000c190:	80 00       	ld.sh	r0,r0[0x0]
8000c192:	86 c8       	ld.uh	r8,r3[0x8]
8000c194:	80 00       	ld.sh	r0,r0[0x0]
8000c196:	bf e8       	*unknown*
8000c198:	22 53       	sub	r3,37
8000c19a:	44 20       	lddsp	r0,sp[0x108]
8000c19c:	43 61       	lddsp	r1,sp[0xd8]
8000c19e:	72 64       	ld.w	r4,r9[0x18]
8000c1a0:	20 53       	sub	r3,5
8000c1a2:	6c 6f       	ld.w	pc,r6[0x18]
8000c1a4:	74 20       	ld.w	r0,r10[0x8]
8000c1a6:	30 22       	mov	r2,2
8000c1a8:	00 00       	add	r0,r0
8000c1aa:	00 00       	add	r0,r0
8000c1ac:	22 53       	sub	r3,37
8000c1ae:	44 20       	lddsp	r0,sp[0x108]
8000c1b0:	43 61       	lddsp	r1,sp[0xd8]
8000c1b2:	72 64       	ld.w	r4,r9[0x18]
8000c1b4:	20 53       	sub	r3,5
8000c1b6:	6c 6f       	ld.w	pc,r6[0x18]
8000c1b8:	74 20       	ld.w	r0,r10[0x8]
8000c1ba:	31 22       	mov	r2,18
8000c1bc:	00 00       	add	r0,r0
	...

8000c1c0 <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
8000c1c0:	eb cd 40 80 	pushm	r7,lr
8000c1c4:	1a 97       	mov	r7,sp

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
8000c1c6:	30 28       	mov	r8,2
#endif
}
8000c1c8:	10 9c       	mov	r12,r8
8000c1ca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1ce:	d7 03       	nop

8000c1d0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
8000c1d0:	eb cd 40 80 	pushm	r7,lr
8000c1d4:	1a 97       	mov	r7,sp
8000c1d6:	20 2d       	sub	sp,8
8000c1d8:	18 98       	mov	r8,r12
8000c1da:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000c1de:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c1e2:	30 18       	mov	r8,1
8000c1e4:	f0 09 18 00 	cp.b	r9,r8
8000c1e8:	e0 8b 00 0f 	brhi	8000c206 <mem_test_unit_ready+0x36>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
8000c1ec:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c1f0:	48 aa       	lddpc	r10,8000c218 <mem_test_unit_ready+0x48>
8000c1f2:	12 98       	mov	r8,r9
8000c1f4:	a3 78       	lsl	r8,0x3
8000c1f6:	12 18       	sub	r8,r9
8000c1f8:	a3 68       	lsl	r8,0x2
8000c1fa:	f4 08 00 08 	add	r8,r10,r8
8000c1fe:	70 08       	ld.w	r8,r8[0x0]
8000c200:	5d 18       	icall	r8
8000c202:	18 98       	mov	r8,r12
8000c204:	c0 28       	rjmp	8000c208 <mem_test_unit_ready+0x38>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000c206:	30 18       	mov	r8,1
8000c208:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000c20c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c210:	10 9c       	mov	r12,r8
8000c212:	2f ed       	sub	sp,-8
8000c214:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c218:	80 00       	ld.sh	r0,r0[0x0]
8000c21a:	f4 24 eb cd 	sub	r4,-726067

8000c21c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
8000c21c:	eb cd 40 80 	pushm	r7,lr
8000c220:	1a 97       	mov	r7,sp
8000c222:	20 3d       	sub	sp,12
8000c224:	18 98       	mov	r8,r12
8000c226:	ef 4b ff f4 	st.w	r7[-12],r11
8000c22a:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000c22e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c232:	30 18       	mov	r8,1
8000c234:	f0 09 18 00 	cp.b	r9,r8
8000c238:	e0 8b 00 10 	brhi	8000c258 <mem_read_capacity+0x3c>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
8000c23c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c240:	48 ba       	lddpc	r10,8000c26c <mem_read_capacity+0x50>
8000c242:	12 98       	mov	r8,r9
8000c244:	a3 78       	lsl	r8,0x3
8000c246:	12 18       	sub	r8,r9
8000c248:	2f f8       	sub	r8,-1
8000c24a:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
8000c24e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c252:	5d 18       	icall	r8
8000c254:	18 98       	mov	r8,r12
8000c256:	c0 28       	rjmp	8000c25a <mem_read_capacity+0x3e>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000c258:	30 18       	mov	r8,1
8000c25a:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000c25e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c262:	10 9c       	mov	r12,r8
8000c264:	2f dd       	sub	sp,-12
8000c266:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c26a:	00 00       	add	r0,r0
8000c26c:	80 00       	ld.sh	r0,r0[0x0]
8000c26e:	f4 24 eb cd 	sub	r4,-726067

8000c270 <mem_wr_protect>:
  return sector_size;
}


bool mem_wr_protect(U8 lun)
{
8000c270:	eb cd 40 80 	pushm	r7,lr
8000c274:	1a 97       	mov	r7,sp
8000c276:	20 2d       	sub	sp,8
8000c278:	18 98       	mov	r8,r12
8000c27a:	ef 68 ff f8 	st.b	r7[-8],r8
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000c27e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c282:	30 18       	mov	r8,1
8000c284:	f0 09 18 00 	cp.b	r9,r8
8000c288:	e0 8b 00 10 	brhi	8000c2a8 <mem_wr_protect+0x38>
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
8000c28c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c290:	48 ba       	lddpc	r10,8000c2bc <mem_wr_protect+0x4c>
8000c292:	12 98       	mov	r8,r9
8000c294:	a3 78       	lsl	r8,0x3
8000c296:	12 18       	sub	r8,r9
8000c298:	a3 68       	lsl	r8,0x2
8000c29a:	f4 08 00 08 	add	r8,r10,r8
8000c29e:	2f 88       	sub	r8,-8
8000c2a0:	70 08       	ld.w	r8,r8[0x0]
8000c2a2:	5d 18       	icall	r8
8000c2a4:	18 98       	mov	r8,r12
8000c2a6:	c0 28       	rjmp	8000c2aa <mem_wr_protect+0x3a>
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000c2a8:	30 18       	mov	r8,1
8000c2aa:	ef 68 ff ff 	st.b	r7[-1],r8
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
8000c2ae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000c2b2:	10 9c       	mov	r12,r8
8000c2b4:	2f ed       	sub	sp,-8
8000c2b6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2ba:	00 00       	add	r0,r0
8000c2bc:	80 00       	ld.sh	r0,r0[0x0]
8000c2be:	f4 24 eb cd 	sub	r4,-726067

8000c2c0 <mem_name>:
  return removal;
}


const char *mem_name(U8 lun)
{
8000c2c0:	eb cd 40 80 	pushm	r7,lr
8000c2c4:	1a 97       	mov	r7,sp
8000c2c6:	20 1d       	sub	sp,4
8000c2c8:	18 98       	mov	r8,r12
8000c2ca:	ef 68 ff fc 	st.b	r7[-4],r8
  return
8000c2ce:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c2d2:	30 18       	mov	r8,1
8000c2d4:	f0 09 18 00 	cp.b	r9,r8
8000c2d8:	e0 8b 00 0e 	brhi	8000c2f4 <mem_name+0x34>
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
8000c2dc:	ef 39 ff fc 	ld.ub	r9,r7[-4]
}


const char *mem_name(U8 lun)
{
  return
8000c2e0:	48 8a       	lddpc	r10,8000c300 <mem_name+0x40>
8000c2e2:	12 98       	mov	r8,r9
8000c2e4:	a3 78       	lsl	r8,0x3
8000c2e6:	12 18       	sub	r8,r9
8000c2e8:	a3 68       	lsl	r8,0x2
8000c2ea:	f4 08 00 08 	add	r8,r10,r8
8000c2ee:	2e 88       	sub	r8,-24
8000c2f0:	70 08       	ld.w	r8,r8[0x0]
8000c2f2:	c0 28       	rjmp	8000c2f6 <mem_name+0x36>
8000c2f4:	30 08       	mov	r8,0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
8000c2f6:	10 9c       	mov	r12,r8
8000c2f8:	2f fd       	sub	sp,-4
8000c2fa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2fe:	00 00       	add	r0,r0
8000c300:	80 00       	ld.sh	r0,r0[0x0]
8000c302:	f4 24 eb cd 	sub	r4,-726067

8000c304 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
8000c304:	eb cd 40 80 	pushm	r7,lr
8000c308:	1a 97       	mov	r7,sp
8000c30a:	20 4d       	sub	sp,16
8000c30c:	18 99       	mov	r9,r12
8000c30e:	ef 4b ff f4 	st.w	r7[-12],r11
8000c312:	14 98       	mov	r8,r10
8000c314:	ef 69 ff f8 	st.b	r7[-8],r9
8000c318:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
8000c31c:	f0 1f 00 14 	mcall	8000c36c <memory_2_usb+0x68>
  status =
8000c320:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c324:	30 18       	mov	r8,1
8000c326:	f0 09 18 00 	cp.b	r9,r8
8000c32a:	e0 8b 00 15 	brhi	8000c354 <memory_2_usb+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
8000c32e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c332:	49 0a       	lddpc	r10,8000c370 <memory_2_usb+0x6c>
8000c334:	12 98       	mov	r8,r9
8000c336:	a3 78       	lsl	r8,0x3
8000c338:	12 18       	sub	r8,r9
8000c33a:	a3 68       	lsl	r8,0x2
8000c33c:	f4 08 00 08 	add	r8,r10,r8
8000c340:	2f 08       	sub	r8,-16
8000c342:	70 08       	ld.w	r8,r8[0x0]
8000c344:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c348:	12 9b       	mov	r11,r9
8000c34a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c34e:	5d 18       	icall	r8
8000c350:	18 98       	mov	r8,r12
8000c352:	c0 28       	rjmp	8000c356 <memory_2_usb+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
8000c354:	30 18       	mov	r8,1
8000c356:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
8000c35a:	f0 1f 00 07 	mcall	8000c374 <memory_2_usb+0x70>

  Ctrl_access_unlock();

  return status;
8000c35e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c362:	10 9c       	mov	r12,r8
8000c364:	2f cd       	sub	sp,-16
8000c366:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c36a:	00 00       	add	r0,r0
8000c36c:	80 00       	ld.sh	r0,r0[0x0]
8000c36e:	c4 3c       	rcall	8000c3f4 <ui_init+0x8>
8000c370:	80 00       	ld.sh	r0,r0[0x0]
8000c372:	f4 24 80 00 	sub	r4,-753664
8000c376:	c4 50       	breq	8000c400 <ui_init+0x14>

8000c378 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
8000c378:	eb cd 40 80 	pushm	r7,lr
8000c37c:	1a 97       	mov	r7,sp
8000c37e:	20 4d       	sub	sp,16
8000c380:	18 99       	mov	r9,r12
8000c382:	ef 4b ff f4 	st.w	r7[-12],r11
8000c386:	14 98       	mov	r8,r10
8000c388:	ef 69 ff f8 	st.b	r7[-8],r9
8000c38c:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
8000c390:	f0 1f 00 14 	mcall	8000c3e0 <usb_2_memory+0x68>
  status =
8000c394:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c398:	30 18       	mov	r8,1
8000c39a:	f0 09 18 00 	cp.b	r9,r8
8000c39e:	e0 8b 00 15 	brhi	8000c3c8 <usb_2_memory+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
8000c3a2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c3a6:	49 0a       	lddpc	r10,8000c3e4 <usb_2_memory+0x6c>
8000c3a8:	12 98       	mov	r8,r9
8000c3aa:	a3 78       	lsl	r8,0x3
8000c3ac:	12 18       	sub	r8,r9
8000c3ae:	a3 68       	lsl	r8,0x2
8000c3b0:	f4 08 00 08 	add	r8,r10,r8
8000c3b4:	2e c8       	sub	r8,-20
8000c3b6:	70 08       	ld.w	r8,r8[0x0]
8000c3b8:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c3bc:	12 9b       	mov	r11,r9
8000c3be:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c3c2:	5d 18       	icall	r8
8000c3c4:	18 98       	mov	r8,r12
8000c3c6:	c0 28       	rjmp	8000c3ca <usb_2_memory+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
8000c3c8:	30 18       	mov	r8,1
8000c3ca:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
8000c3ce:	f0 1f 00 07 	mcall	8000c3e8 <usb_2_memory+0x70>

  Ctrl_access_unlock();

  return status;
8000c3d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c3d6:	10 9c       	mov	r12,r8
8000c3d8:	2f cd       	sub	sp,-16
8000c3da:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3de:	00 00       	add	r0,r0
8000c3e0:	80 00       	ld.sh	r0,r0[0x0]
8000c3e2:	c4 64       	brge	8000c46e <ui_start_write+0xa>
8000c3e4:	80 00       	ld.sh	r0,r0[0x0]
8000c3e6:	f4 24 80 00 	sub	r4,-753664
8000c3ea:	c4 78       	rjmp	8000c478 <ui_stop_write>

8000c3ec <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
8000c3ec:	eb cd 40 80 	pushm	r7,lr
8000c3f0:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000c3f2:	30 1c       	mov	r12,1
8000c3f4:	f0 1f 00 04 	mcall	8000c404 <ui_init+0x18>
	LED_Off(LED1);
8000c3f8:	30 2c       	mov	r12,2
8000c3fa:	f0 1f 00 04 	mcall	8000c408 <ui_init+0x1c>
}
8000c3fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c402:	00 00       	add	r0,r0
8000c404:	80 00       	ld.sh	r0,r0[0x0]
8000c406:	45 28       	lddsp	r8,sp[0x148]
8000c408:	80 00       	ld.sh	r0,r0[0x0]
8000c40a:	44 70       	lddsp	r0,sp[0x11c]

8000c40c <ui_powerdown>:

void ui_powerdown(void)
{
8000c40c:	eb cd 40 80 	pushm	r7,lr
8000c410:	1a 97       	mov	r7,sp
	LED_Off(LED0);
8000c412:	30 1c       	mov	r12,1
8000c414:	f0 1f 00 04 	mcall	8000c424 <ui_powerdown+0x18>
	LED_Off(LED1);
8000c418:	30 2c       	mov	r12,2
8000c41a:	f0 1f 00 03 	mcall	8000c424 <ui_powerdown+0x18>
}
8000c41e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c422:	00 00       	add	r0,r0
8000c424:	80 00       	ld.sh	r0,r0[0x0]
8000c426:	44 70       	lddsp	r0,sp[0x11c]

8000c428 <ui_wakeup>:

void ui_wakeup(void)
{
8000c428:	eb cd 40 80 	pushm	r7,lr
8000c42c:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000c42e:	30 1c       	mov	r12,1
8000c430:	f0 1f 00 02 	mcall	8000c438 <ui_wakeup+0x10>
}
8000c434:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c438:	80 00       	ld.sh	r0,r0[0x0]
8000c43a:	45 28       	lddsp	r8,sp[0x148]

8000c43c <ui_start_read>:

void ui_start_read(void)
{
8000c43c:	eb cd 40 80 	pushm	r7,lr
8000c440:	1a 97       	mov	r7,sp
	LED_On(LED2);
8000c442:	30 4c       	mov	r12,4
8000c444:	f0 1f 00 02 	mcall	8000c44c <ui_start_read+0x10>
}
8000c448:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c44c:	80 00       	ld.sh	r0,r0[0x0]
8000c44e:	45 28       	lddsp	r8,sp[0x148]

8000c450 <ui_stop_read>:

void ui_stop_read(void)
{
8000c450:	eb cd 40 80 	pushm	r7,lr
8000c454:	1a 97       	mov	r7,sp
	LED_Off(LED2);
8000c456:	30 4c       	mov	r12,4
8000c458:	f0 1f 00 02 	mcall	8000c460 <ui_stop_read+0x10>
}
8000c45c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c460:	80 00       	ld.sh	r0,r0[0x0]
8000c462:	44 70       	lddsp	r0,sp[0x11c]

8000c464 <ui_start_write>:

void ui_start_write(void)
{
8000c464:	eb cd 40 80 	pushm	r7,lr
8000c468:	1a 97       	mov	r7,sp
	LED_On(LED3);
8000c46a:	30 8c       	mov	r12,8
8000c46c:	f0 1f 00 02 	mcall	8000c474 <ui_start_write+0x10>
}
8000c470:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c474:	80 00       	ld.sh	r0,r0[0x0]
8000c476:	45 28       	lddsp	r8,sp[0x148]

8000c478 <ui_stop_write>:

void ui_stop_write(void)
{
8000c478:	eb cd 40 80 	pushm	r7,lr
8000c47c:	1a 97       	mov	r7,sp
	LED_Off(LED3);
8000c47e:	30 8c       	mov	r12,8
8000c480:	f0 1f 00 02 	mcall	8000c488 <ui_stop_write+0x10>
}
8000c484:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c488:	80 00       	ld.sh	r0,r0[0x0]
8000c48a:	44 70       	lddsp	r0,sp[0x11c]

8000c48c <ui_process>:

void ui_process(uint16_t framenumber)
{
8000c48c:	eb cd 40 80 	pushm	r7,lr
8000c490:	1a 97       	mov	r7,sp
8000c492:	20 1d       	sub	sp,4
8000c494:	18 98       	mov	r8,r12
8000c496:	ef 58 ff fc 	st.h	r7[-4],r8
	if ((framenumber % 1000) == 0) {
8000c49a:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c49e:	e0 68 4d d3 	mov	r8,19923
8000c4a2:	ea 18 10 62 	orh	r8,0x1062
8000c4a6:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c4aa:	a7 89       	lsr	r9,0x6
8000c4ac:	e0 68 03 e8 	mov	r8,1000
8000c4b0:	f2 08 02 48 	mul	r8,r9,r8
8000c4b4:	f4 08 01 08 	sub	r8,r10,r8
8000c4b8:	5c 88       	casts.h	r8
8000c4ba:	c0 41       	brne	8000c4c2 <ui_process+0x36>
		LED_On(LED1);
8000c4bc:	30 2c       	mov	r12,2
8000c4be:	f0 1f 00 10 	mcall	8000c4fc <ui_process+0x70>
	}
	if ((framenumber % 1000) == 500) {
8000c4c2:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c4c6:	e0 68 4d d3 	mov	r8,19923
8000c4ca:	ea 18 10 62 	orh	r8,0x1062
8000c4ce:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c4d2:	a7 89       	lsr	r9,0x6
8000c4d4:	e0 68 03 e8 	mov	r8,1000
8000c4d8:	f2 08 02 48 	mul	r8,r9,r8
8000c4dc:	f4 08 01 08 	sub	r8,r10,r8
8000c4e0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000c4e4:	e0 68 01 f4 	mov	r8,500
8000c4e8:	f0 09 19 00 	cp.h	r9,r8
8000c4ec:	c0 41       	brne	8000c4f4 <ui_process+0x68>
		LED_Off(LED1);
8000c4ee:	30 2c       	mov	r12,2
8000c4f0:	f0 1f 00 04 	mcall	8000c500 <ui_process+0x74>
	}
}
8000c4f4:	2f fd       	sub	sp,-4
8000c4f6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c4fa:	00 00       	add	r0,r0
8000c4fc:	80 00       	ld.sh	r0,r0[0x0]
8000c4fe:	45 28       	lddsp	r8,sp[0x148]
8000c500:	80 00       	ld.sh	r0,r0[0x0]
8000c502:	44 70       	lddsp	r0,sp[0x11c]

8000c504 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
8000c504:	eb cd 40 80 	pushm	r7,lr
8000c508:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000c50a:	49 49       	lddpc	r9,8000c558 <udi_msc_enable+0x54>
8000c50c:	30 08       	mov	r8,0
8000c50e:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_cbw_invalid = false;
8000c510:	49 39       	lddpc	r9,8000c55c <udi_msc_enable+0x58>
8000c512:	30 08       	mov	r8,0
8000c514:	b2 88       	st.b	r9[0x0],r8
	udi_msc_nb_lun = get_nb_lun();
8000c516:	f0 1f 00 13 	mcall	8000c560 <udi_msc_enable+0x5c>
8000c51a:	18 98       	mov	r8,r12
8000c51c:	49 29       	lddpc	r9,8000c564 <udi_msc_enable+0x60>
8000c51e:	b2 88       	st.b	r9[0x0],r8
	if (0 == udi_msc_nb_lun)
8000c520:	49 18       	lddpc	r8,8000c564 <udi_msc_enable+0x60>
8000c522:	11 88       	ld.ub	r8,r8[0x0]
8000c524:	58 08       	cp.w	r8,0
8000c526:	c0 31       	brne	8000c52c <udi_msc_enable+0x28>
		return false;	// No lun available, then not authorize to enable interface
8000c528:	30 08       	mov	r8,0
8000c52a:	c1 38       	rjmp	8000c550 <udi_msc_enable+0x4c>
	udi_msc_nb_lun--;
8000c52c:	48 e8       	lddpc	r8,8000c564 <udi_msc_enable+0x60>
8000c52e:	11 88       	ld.ub	r8,r8[0x0]
8000c530:	20 18       	sub	r8,1
8000c532:	5c 58       	castu.b	r8
8000c534:	48 c9       	lddpc	r9,8000c564 <udi_msc_enable+0x60>
8000c536:	b2 88       	st.b	r9[0x0],r8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
8000c538:	f0 1f 00 0c 	mcall	8000c568 <udi_msc_enable+0x64>
8000c53c:	18 98       	mov	r8,r12
8000c53e:	ec 18 00 01 	eorl	r8,0x1
8000c542:	5c 58       	castu.b	r8
8000c544:	c0 30       	breq	8000c54a <udi_msc_enable+0x46>
		return false;
8000c546:	30 08       	mov	r8,0
8000c548:	c0 48       	rjmp	8000c550 <udi_msc_enable+0x4c>
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
8000c54a:	f0 1f 00 09 	mcall	8000c56c <udi_msc_enable+0x68>
	return true;
8000c54e:	30 18       	mov	r8,1
}
8000c550:	10 9c       	mov	r12,r8
8000c552:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c556:	00 00       	add	r0,r0
8000c558:	00 00       	add	r0,r0
8000c55a:	08 29       	rsub	r9,r4
8000c55c:	00 00       	add	r0,r0
8000c55e:	08 28       	rsub	r8,r4
8000c560:	80 00       	ld.sh	r0,r0[0x0]
8000c562:	c1 c0       	breq	8000c59a <udi_msc_setup+0xe>
8000c564:	00 00       	add	r0,r0
8000c566:	08 10       	sub	r0,r4
8000c568:	80 00       	ld.sh	r0,r0[0x0]
8000c56a:	e4 5c 80 00 	cp.w	r12,360448
8000c56e:	c6 e8       	rjmp	8000c64a <udi_msc_setup+0xbe>

8000c570 <udi_msc_disable>:


void udi_msc_disable(void)
{
8000c570:	eb cd 40 80 	pushm	r7,lr
8000c574:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000c576:	48 49       	lddpc	r9,8000c584 <udi_msc_disable+0x14>
8000c578:	30 08       	mov	r8,0
8000c57a:	b2 88       	st.b	r9[0x0],r8
	UDI_MSC_DISABLE_EXT();
8000c57c:	f0 1f 00 03 	mcall	8000c588 <udi_msc_disable+0x18>
}
8000c580:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c584:	00 00       	add	r0,r0
8000c586:	08 29       	rsub	r9,r4
8000c588:	80 00       	ld.sh	r0,r0[0x0]
8000c58a:	e4 74 eb cd 	mov	r4,388045

8000c58c <udi_msc_setup>:


bool udi_msc_setup(void)
{
8000c58c:	eb cd 40 80 	pushm	r7,lr
8000c590:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000c592:	4a f8       	lddpc	r8,8000c64c <udi_msc_setup+0xc0>
8000c594:	11 88       	ld.ub	r8,r8[0x0]
8000c596:	10 99       	mov	r9,r8
8000c598:	30 08       	mov	r8,0
8000c59a:	f0 09 18 00 	cp.b	r9,r8
8000c59e:	c2 34       	brge	8000c5e4 <udi_msc_setup+0x58>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000c5a0:	4a b8       	lddpc	r8,8000c64c <udi_msc_setup+0xc0>
8000c5a2:	11 88       	ld.ub	r8,r8[0x0]
8000c5a4:	e2 18 00 60 	andl	r8,0x60,COH
8000c5a8:	e0 48 00 20 	cp.w	r8,32
8000c5ac:	c1 c1       	brne	8000c5e4 <udi_msc_setup+0x58>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000c5ae:	4a 88       	lddpc	r8,8000c64c <udi_msc_setup+0xc0>
8000c5b0:	11 98       	ld.ub	r8,r8[0x1]
8000c5b2:	e0 48 00 fe 	cp.w	r8,254
8000c5b6:	c1 71       	brne	8000c5e4 <udi_msc_setup+0x58>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
8000c5b8:	4a 58       	lddpc	r8,8000c64c <udi_msc_setup+0xc0>
8000c5ba:	90 39       	ld.sh	r9,r8[0x6]
8000c5bc:	30 18       	mov	r8,1
8000c5be:	f0 09 19 00 	cp.h	r9,r8
8000c5c2:	c0 30       	breq	8000c5c8 <udi_msc_setup+0x3c>
					return false;	// Error for USB host
8000c5c4:	30 08       	mov	r8,0
8000c5c6:	c4 08       	rjmp	8000c646 <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000c5c8:	4a 18       	lddpc	r8,8000c64c <udi_msc_setup+0xc0>
8000c5ca:	90 18       	ld.sh	r8,r8[0x2]
8000c5cc:	58 08       	cp.w	r8,0
8000c5ce:	c0 30       	breq	8000c5d4 <udi_msc_setup+0x48>
					return false;
8000c5d0:	30 08       	mov	r8,0
8000c5d2:	c3 a8       	rjmp	8000c646 <udi_msc_setup+0xba>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
8000c5d4:	49 e8       	lddpc	r8,8000c64c <udi_msc_setup+0xc0>
8000c5d6:	49 f9       	lddpc	r9,8000c650 <udi_msc_setup+0xc4>
8000c5d8:	91 29       	st.w	r8[0x8],r9
				udd_g_ctrlreq.payload_size = 1;
8000c5da:	49 d9       	lddpc	r9,8000c64c <udi_msc_setup+0xc0>
8000c5dc:	30 18       	mov	r8,1
8000c5de:	b2 68       	st.h	r9[0xc],r8
				return true;
8000c5e0:	30 18       	mov	r8,1
8000c5e2:	c3 28       	rjmp	8000c646 <udi_msc_setup+0xba>
			}
		}
	}
	if (Udd_setup_is_out()) {
8000c5e4:	49 a8       	lddpc	r8,8000c64c <udi_msc_setup+0xc0>
8000c5e6:	11 88       	ld.ub	r8,r8[0x0]
8000c5e8:	10 99       	mov	r9,r8
8000c5ea:	30 08       	mov	r8,0
8000c5ec:	f0 09 18 00 	cp.b	r9,r8
8000c5f0:	c2 a5       	brlt	8000c644 <udi_msc_setup+0xb8>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000c5f2:	49 78       	lddpc	r8,8000c64c <udi_msc_setup+0xc0>
8000c5f4:	11 88       	ld.ub	r8,r8[0x0]
8000c5f6:	e2 18 00 60 	andl	r8,0x60,COH
8000c5fa:	e0 48 00 20 	cp.w	r8,32
8000c5fe:	c2 31       	brne	8000c644 <udi_msc_setup+0xb8>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000c600:	49 38       	lddpc	r8,8000c64c <udi_msc_setup+0xc0>
8000c602:	11 98       	ld.ub	r8,r8[0x1]
8000c604:	e0 48 00 ff 	cp.w	r8,255
8000c608:	c1 e1       	brne	8000c644 <udi_msc_setup+0xb8>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
8000c60a:	49 18       	lddpc	r8,8000c64c <udi_msc_setup+0xc0>
8000c60c:	90 38       	ld.sh	r8,r8[0x6]
8000c60e:	58 08       	cp.w	r8,0
8000c610:	c0 30       	breq	8000c616 <udi_msc_setup+0x8a>
					return false;
8000c612:	30 08       	mov	r8,0
8000c614:	c1 98       	rjmp	8000c646 <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000c616:	48 e8       	lddpc	r8,8000c64c <udi_msc_setup+0xc0>
8000c618:	90 18       	ld.sh	r8,r8[0x2]
8000c61a:	58 08       	cp.w	r8,0
8000c61c:	c0 30       	breq	8000c622 <udi_msc_setup+0x96>
					return false;
8000c61e:	30 08       	mov	r8,0
8000c620:	c1 38       	rjmp	8000c646 <udi_msc_setup+0xba>
				udi_msc_b_cbw_invalid = false;
8000c622:	48 d9       	lddpc	r9,8000c654 <udi_msc_setup+0xc8>
8000c624:	30 08       	mov	r8,0
8000c626:	b2 88       	st.b	r9[0x0],r8
				udi_msc_b_trans_req = false;
8000c628:	48 c9       	lddpc	r9,8000c658 <udi_msc_setup+0xcc>
8000c62a:	30 08       	mov	r8,0
8000c62c:	b2 88       	st.b	r9[0x0],r8
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
8000c62e:	30 2c       	mov	r12,2
8000c630:	f0 1f 00 0b 	mcall	8000c65c <udi_msc_setup+0xd0>
				udd_ep_abort(UDI_MSC_EP_IN);
8000c634:	e0 6c 00 81 	mov	r12,129
8000c638:	f0 1f 00 09 	mcall	8000c65c <udi_msc_setup+0xd0>
				// Restart by CBW wait
				udi_msc_cbw_wait();
8000c63c:	f0 1f 00 09 	mcall	8000c660 <udi_msc_setup+0xd4>
				return true;
8000c640:	30 18       	mov	r8,1
8000c642:	c0 28       	rjmp	8000c646 <udi_msc_setup+0xba>
			}
		}
	}
	return false;	// Not supported request
8000c644:	30 08       	mov	r8,0
}
8000c646:	10 9c       	mov	r12,r8
8000c648:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c64c:	00 00       	add	r0,r0
8000c64e:	10 08       	add	r8,r8
8000c650:	00 00       	add	r0,r0
8000c652:	08 10       	sub	r0,r4
8000c654:	00 00       	add	r0,r0
8000c656:	08 28       	rsub	r8,r4
8000c658:	00 00       	add	r0,r0
8000c65a:	08 29       	rsub	r9,r4
8000c65c:	80 00       	ld.sh	r0,r0[0x0]
8000c65e:	a7 e0       	*unknown*
8000c660:	80 00       	ld.sh	r0,r0[0x0]
8000c662:	c6 e8       	rjmp	8000c73e <udi_msc_cbw_received+0x1a>

8000c664 <udi_msc_getsetting>:

uint8_t udi_msc_getsetting(void)
{
8000c664:	eb cd 40 80 	pushm	r7,lr
8000c668:	1a 97       	mov	r7,sp
	return 0;	// MSC don't have multiple alternate setting
8000c66a:	30 08       	mov	r8,0
}
8000c66c:	10 9c       	mov	r12,r8
8000c66e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c672:	d7 03       	nop

8000c674 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
8000c674:	eb cd 40 80 	pushm	r7,lr
8000c678:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000c67a:	48 a8       	lddpc	r8,8000c6a0 <udi_msc_cbw_invalid+0x2c>
8000c67c:	11 88       	ld.ub	r8,r8[0x0]
8000c67e:	ec 18 00 01 	eorl	r8,0x1
8000c682:	5c 58       	castu.b	r8
8000c684:	c0 a1       	brne	8000c698 <udi_msc_cbw_invalid+0x24>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
8000c686:	30 2c       	mov	r12,2
8000c688:	f0 1f 00 07 	mcall	8000c6a4 <udi_msc_cbw_invalid+0x30>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
8000c68c:	fe cb 00 18 	sub	r11,pc,24
8000c690:	30 2c       	mov	r12,2
8000c692:	f0 1f 00 06 	mcall	8000c6a8 <udi_msc_cbw_invalid+0x34>
8000c696:	c0 28       	rjmp	8000c69a <udi_msc_cbw_invalid+0x26>
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000c698:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_OUT);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
}
8000c69a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c69e:	00 00       	add	r0,r0
8000c6a0:	00 00       	add	r0,r0
8000c6a2:	08 28       	rsub	r8,r4
8000c6a4:	80 00       	ld.sh	r0,r0[0x0]
8000c6a6:	a4 68       	st.h	r2[0xc],r8
8000c6a8:	80 00       	ld.sh	r0,r0[0x0]
8000c6aa:	a8 7c       	st.h	r4[0xe],r12

8000c6ac <udi_msc_csw_invalid>:

static void udi_msc_csw_invalid(void)
{
8000c6ac:	eb cd 40 80 	pushm	r7,lr
8000c6b0:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000c6b2:	48 b8       	lddpc	r8,8000c6dc <udi_msc_csw_invalid+0x30>
8000c6b4:	11 88       	ld.ub	r8,r8[0x0]
8000c6b6:	ec 18 00 01 	eorl	r8,0x1
8000c6ba:	5c 58       	castu.b	r8
8000c6bc:	c0 c1       	brne	8000c6d4 <udi_msc_csw_invalid+0x28>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
8000c6be:	e0 6c 00 81 	mov	r12,129
8000c6c2:	f0 1f 00 08 	mcall	8000c6e0 <udi_msc_csw_invalid+0x34>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
8000c6c6:	fe cb 00 1a 	sub	r11,pc,26
8000c6ca:	e0 6c 00 81 	mov	r12,129
8000c6ce:	f0 1f 00 06 	mcall	8000c6e4 <udi_msc_csw_invalid+0x38>
8000c6d2:	c0 28       	rjmp	8000c6d6 <udi_msc_csw_invalid+0x2a>
}

static void udi_msc_csw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000c6d4:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_IN);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}
8000c6d6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c6da:	00 00       	add	r0,r0
8000c6dc:	00 00       	add	r0,r0
8000c6de:	08 28       	rsub	r8,r4
8000c6e0:	80 00       	ld.sh	r0,r0[0x0]
8000c6e2:	a4 68       	st.h	r2[0xc],r8
8000c6e4:	80 00       	ld.sh	r0,r0[0x0]
8000c6e6:	a8 7c       	st.h	r4[0xe],r12

8000c6e8 <udi_msc_cbw_wait>:

static void udi_msc_cbw_wait(void)
{
8000c6e8:	eb cd 40 80 	pushm	r7,lr
8000c6ec:	1a 97       	mov	r7,sp
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
8000c6ee:	48 aa       	lddpc	r10,8000c714 <udi_msc_cbw_wait+0x2c>
8000c6f0:	48 a8       	lddpc	r8,8000c718 <udi_msc_cbw_wait+0x30>
8000c6f2:	31 f9       	mov	r9,31
8000c6f4:	30 1b       	mov	r11,1
8000c6f6:	30 2c       	mov	r12,2
8000c6f8:	f0 1f 00 09 	mcall	8000c71c <udi_msc_cbw_wait+0x34>
8000c6fc:	18 98       	mov	r8,r12
8000c6fe:	ec 18 00 01 	eorl	r8,0x1
8000c702:	5c 58       	castu.b	r8
8000c704:	c0 60       	breq	8000c710 <udi_msc_cbw_wait+0x28>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
8000c706:	fe cb 00 1e 	sub	r11,pc,30
8000c70a:	30 2c       	mov	r12,2
8000c70c:	f0 1f 00 05 	mcall	8000c720 <udi_msc_cbw_wait+0x38>
	}
}
8000c710:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c714:	00 00       	add	r0,r0
8000c716:	07 f0       	ld.ub	r0,r3[0x7]
8000c718:	80 00       	ld.sh	r0,r0[0x0]
8000c71a:	c7 24       	brge	8000c7fe <udi_msc_cbw_received+0xda>
8000c71c:	80 00       	ld.sh	r0,r0[0x0]
8000c71e:	a6 bc       	st.b	r3[0x3],r12
8000c720:	80 00       	ld.sh	r0,r0[0x0]
8000c722:	a8 7c       	st.h	r4[0xe],r12

8000c724 <udi_msc_cbw_received>:


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
8000c724:	eb cd 40 80 	pushm	r7,lr
8000c728:	1a 97       	mov	r7,sp
8000c72a:	20 3d       	sub	sp,12
8000c72c:	ef 4c ff fc 	st.w	r7[-4],r12
8000c730:	ef 4b ff f8 	st.w	r7[-8],r11
8000c734:	14 98       	mov	r8,r10
8000c736:	ef 68 ff f4 	st.b	r7[-12],r8
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
8000c73a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c73e:	58 08       	cp.w	r8,0
8000c740:	c6 11       	brne	8000c802 <udi_msc_cbw_received+0xde>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000c742:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c746:	59 f8       	cp.w	r8,31
8000c748:	c0 91       	brne	8000c75a <udi_msc_cbw_received+0x36>
			|| (udi_msc_cbw.dCBWSignature !=
8000c74a:	4b 18       	lddpc	r8,8000c80c <udi_msc_cbw_received+0xe8>
8000c74c:	70 08       	ld.w	r8,r8[0x0]
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000c74e:	e0 69 42 43 	mov	r9,16963
8000c752:	ea 19 55 53 	orh	r9,0x5553
8000c756:	12 38       	cp.w	r8,r9
8000c758:	c0 90       	breq	8000c76a <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
8000c75a:	4a e9       	lddpc	r9,8000c810 <udi_msc_cbw_received+0xec>
8000c75c:	30 18       	mov	r8,1
8000c75e:	b2 88       	st.b	r9[0x0],r8
		udi_msc_cbw_invalid();
8000c760:	f0 1f 00 2d 	mcall	8000c814 <udi_msc_cbw_received+0xf0>
		udi_msc_csw_invalid();
8000c764:	f0 1f 00 2d 	mcall	8000c818 <udi_msc_cbw_received+0xf4>
		return;
8000c768:	c4 e8       	rjmp	8000c804 <udi_msc_cbw_received+0xe0>
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
8000c76a:	4a 98       	lddpc	r8,8000c80c <udi_msc_cbw_received+0xe8>
8000c76c:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000c770:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000c774:	4a 69       	lddpc	r9,8000c80c <udi_msc_cbw_received+0xe8>
8000c776:	f3 68 00 0d 	st.b	r9[13],r8
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
8000c77a:	4a 58       	lddpc	r8,8000c80c <udi_msc_cbw_received+0xe8>
8000c77c:	f1 39 00 0d 	ld.ub	r9,r8[13]
8000c780:	4a 78       	lddpc	r8,8000c81c <udi_msc_cbw_received+0xf8>
8000c782:	11 88       	ld.ub	r8,r8[0x0]
8000c784:	f0 09 18 00 	cp.b	r9,r8
8000c788:	e0 88 00 07 	brls	8000c796 <udi_msc_cbw_received+0x72>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
8000c78c:	f0 1f 00 25 	mcall	8000c820 <udi_msc_cbw_received+0xfc>
		udi_msc_csw_process();
8000c790:	f0 1f 00 25 	mcall	8000c824 <udi_msc_cbw_received+0x100>
		return;
8000c794:	c3 88       	rjmp	8000c804 <udi_msc_cbw_received+0xe0>
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
8000c796:	49 e8       	lddpc	r8,8000c80c <udi_msc_cbw_received+0xe8>
8000c798:	70 28       	ld.w	r8,r8[0x8]
8000c79a:	5c b8       	swap.b	r8
8000c79c:	10 99       	mov	r9,r8
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
8000c79e:	4a 38       	lddpc	r8,8000c828 <udi_msc_cbw_received+0x104>
8000c7a0:	91 29       	st.w	r8[0x8],r9
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
8000c7a2:	49 b8       	lddpc	r8,8000c80c <udi_msc_cbw_received+0xe8>
8000c7a4:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000c7a8:	e0 48 00 5a 	cp.w	r8,90
8000c7ac:	e0 8b 00 26 	brhi	8000c7f8 <udi_msc_cbw_received+0xd4>
8000c7b0:	49 f9       	lddpc	r9,8000c82c <udi_msc_cbw_received+0x108>
8000c7b2:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case SPC_REQUEST_SENSE:
		udi_msc_spc_requestsense();
8000c7b6:	f0 1f 00 1f 	mcall	8000c830 <udi_msc_cbw_received+0x10c>
		break;
8000c7ba:	c2 58       	rjmp	8000c804 <udi_msc_cbw_received+0xe0>

	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
8000c7bc:	f0 1f 00 1e 	mcall	8000c834 <udi_msc_cbw_received+0x110>
		break;
8000c7c0:	c2 28       	rjmp	8000c804 <udi_msc_cbw_received+0xe0>

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
8000c7c2:	30 0c       	mov	r12,0
8000c7c4:	f0 1f 00 1d 	mcall	8000c838 <udi_msc_cbw_received+0x114>
		break;
8000c7c8:	c1 e8       	rjmp	8000c804 <udi_msc_cbw_received+0xe0>
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
8000c7ca:	30 1c       	mov	r12,1
8000c7cc:	f0 1f 00 1b 	mcall	8000c838 <udi_msc_cbw_received+0x114>
		break;
8000c7d0:	c1 a8       	rjmp	8000c804 <udi_msc_cbw_received+0xe0>

	case SPC_TEST_UNIT_READY:
		udi_msc_spc_testunitready();
8000c7d2:	f0 1f 00 1b 	mcall	8000c83c <udi_msc_cbw_received+0x118>
		break;
8000c7d6:	c1 78       	rjmp	8000c804 <udi_msc_cbw_received+0xe0>

	case SBC_READ_CAPACITY10:
		udi_msc_sbc_read_capacity();
8000c7d8:	f0 1f 00 1a 	mcall	8000c840 <udi_msc_cbw_received+0x11c>
		break;
8000c7dc:	c1 48       	rjmp	8000c804 <udi_msc_cbw_received+0xe0>
	case SBC_START_STOP_UNIT:
		// Accepts request to support plug/plug in case of card reader
	case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
8000c7de:	f0 1f 00 1a 	mcall	8000c844 <udi_msc_cbw_received+0x120>
		udi_msc_csw_process();
8000c7e2:	f0 1f 00 11 	mcall	8000c824 <udi_msc_cbw_received+0x100>
		break;
8000c7e6:	c0 f8       	rjmp	8000c804 <udi_msc_cbw_received+0xe0>

	case SBC_READ10:
		udi_msc_sbc_trans(true);
8000c7e8:	30 1c       	mov	r12,1
8000c7ea:	f0 1f 00 18 	mcall	8000c848 <udi_msc_cbw_received+0x124>
		break;
8000c7ee:	c0 b8       	rjmp	8000c804 <udi_msc_cbw_received+0xe0>

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
8000c7f0:	30 0c       	mov	r12,0
8000c7f2:	f0 1f 00 16 	mcall	8000c848 <udi_msc_cbw_received+0x124>
		break;
8000c7f6:	c0 78       	rjmp	8000c804 <udi_msc_cbw_received+0xe0>

	default:
		udi_msc_sense_command_invalid();
8000c7f8:	f0 1f 00 15 	mcall	8000c84c <udi_msc_cbw_received+0x128>
		udi_msc_csw_process();
8000c7fc:	f0 1f 00 0a 	mcall	8000c824 <udi_msc_cbw_received+0x100>
8000c800:	c0 28       	rjmp	8000c804 <udi_msc_cbw_received+0xe0>
{
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
		// Transfer aborted
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000c802:	d7 03       	nop
	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
		break;
	}
}
8000c804:	2f dd       	sub	sp,-12
8000c806:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c80a:	00 00       	add	r0,r0
8000c80c:	00 00       	add	r0,r0
8000c80e:	07 f0       	ld.ub	r0,r3[0x7]
8000c810:	00 00       	add	r0,r0
8000c812:	08 28       	rsub	r8,r4
8000c814:	80 00       	ld.sh	r0,r0[0x0]
8000c816:	c6 74       	brge	8000c8e4 <udi_msc_data_send+0x34>
8000c818:	80 00       	ld.sh	r0,r0[0x0]
8000c81a:	c6 ac       	rcall	8000c8ee <udi_msc_data_send+0x3e>
8000c81c:	00 00       	add	r0,r0
8000c81e:	08 10       	sub	r0,r4
8000c820:	80 00       	ld.sh	r0,r0[0x0]
8000c822:	cb 4c       	rcall	8000c98a <udi_msc_csw_process+0x3e>
8000c824:	80 00       	ld.sh	r0,r0[0x0]
8000c826:	c9 4c       	rcall	8000c94e <udi_msc_csw_process+0x2>
8000c828:	00 00       	add	r0,r0
8000c82a:	01 54       	ld.sh	r4,--r0
8000c82c:	80 00       	ld.sh	r0,r0[0x0]
8000c82e:	f4 5c 80 00 	cp.w	r12,-688128
8000c832:	cb 84       	brge	8000c7a2 <udi_msc_cbw_received+0x7e>
8000c834:	80 00       	ld.sh	r0,r0[0x0]
8000c836:	cb e8       	rjmp	8000c9b2 <udi_msc_csw_send+0xa>
8000c838:	80 00       	ld.sh	r0,r0[0x0]
8000c83a:	cd 80       	breq	8000c7ea <udi_msc_cbw_received+0xc6>
8000c83c:	80 00       	ld.sh	r0,r0[0x0]
8000c83e:	cd 58       	rjmp	8000c9e8 <udi_msc_csw_send+0x40>
8000c840:	80 00       	ld.sh	r0,r0[0x0]
8000c842:	ce d0       	breq	8000c81c <udi_msc_cbw_received+0xf8>
8000c844:	80 00       	ld.sh	r0,r0[0x0]
8000c846:	ca c0       	breq	8000c79e <udi_msc_cbw_received+0x7a>
8000c848:	80 00       	ld.sh	r0,r0[0x0]
8000c84a:	cf 6c       	rcall	8000ca36 <udi_msc_clear_sense+0x26>
8000c84c:	80 00       	ld.sh	r0,r0[0x0]
8000c84e:	cb 68       	rjmp	8000c9ba <udi_msc_csw_send+0x12>

8000c850 <udi_msc_cbw_validate>:


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
8000c850:	eb cd 40 80 	pushm	r7,lr
8000c854:	1a 97       	mov	r7,sp
8000c856:	20 2d       	sub	sp,8
8000c858:	ef 4c ff fc 	st.w	r7[-4],r12
8000c85c:	16 98       	mov	r8,r11
8000c85e:	ef 68 ff f8 	st.b	r7[-8],r8
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000c862:	49 08       	lddpc	r8,8000c8a0 <udi_msc_cbw_validate+0x50>
8000c864:	f1 39 00 0c 	ld.ub	r9,r8[12]
8000c868:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c86c:	f3 e8 20 08 	eor	r8,r9,r8
8000c870:	5c 58       	castu.b	r8
8000c872:	10 99       	mov	r9,r8
8000c874:	30 08       	mov	r8,0
8000c876:	f0 09 18 00 	cp.b	r9,r8
8000c87a:	c0 75       	brlt	8000c888 <udi_msc_cbw_validate+0x38>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
8000c87c:	48 a8       	lddpc	r8,8000c8a4 <udi_msc_cbw_validate+0x54>
8000c87e:	70 29       	ld.w	r9,r8[0x8]
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000c880:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c884:	10 39       	cp.w	r9,r8
8000c886:	c0 72       	brcc	8000c894 <udi_msc_cbw_validate+0x44>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
		udi_msc_sense_fail_cdb_invalid();
8000c888:	f0 1f 00 08 	mcall	8000c8a8 <udi_msc_cbw_validate+0x58>
		udi_msc_csw_process();
8000c88c:	f0 1f 00 08 	mcall	8000c8ac <udi_msc_cbw_validate+0x5c>
		return false;
8000c890:	30 08       	mov	r8,0
8000c892:	c0 28       	rjmp	8000c896 <udi_msc_cbw_validate+0x46>
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
8000c894:	30 18       	mov	r8,1
}
8000c896:	10 9c       	mov	r12,r8
8000c898:	2f ed       	sub	sp,-8
8000c89a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c89e:	00 00       	add	r0,r0
8000c8a0:	00 00       	add	r0,r0
8000c8a2:	07 f0       	ld.ub	r0,r3[0x7]
8000c8a4:	00 00       	add	r0,r0
8000c8a6:	01 54       	ld.sh	r4,--r0
8000c8a8:	80 00       	ld.sh	r0,r0[0x0]
8000c8aa:	cb 4c       	rcall	8000ca12 <udi_msc_clear_sense+0x2>
8000c8ac:	80 00       	ld.sh	r0,r0[0x0]
8000c8ae:	c9 4c       	rcall	8000c9d6 <udi_msc_csw_send+0x2e>

8000c8b0 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
8000c8b0:	eb cd 40 80 	pushm	r7,lr
8000c8b4:	1a 97       	mov	r7,sp
8000c8b6:	20 2d       	sub	sp,8
8000c8b8:	ef 4c ff fc 	st.w	r7[-4],r12
8000c8bc:	16 98       	mov	r8,r11
8000c8be:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
8000c8c2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c8c6:	48 b8       	lddpc	r8,8000c8f0 <udi_msc_data_send+0x40>
8000c8c8:	ee fa ff fc 	ld.w	r10,r7[-4]
8000c8cc:	30 1b       	mov	r11,1
8000c8ce:	e0 6c 00 81 	mov	r12,129
8000c8d2:	f0 1f 00 09 	mcall	8000c8f4 <udi_msc_data_send+0x44>
8000c8d6:	18 98       	mov	r8,r12
8000c8d8:	ec 18 00 01 	eorl	r8,0x1
8000c8dc:	5c 58       	castu.b	r8
8000c8de:	c0 50       	breq	8000c8e8 <udi_msc_data_send+0x38>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
8000c8e0:	f0 1f 00 06 	mcall	8000c8f8 <udi_msc_data_send+0x48>
		udi_msc_csw_process();
8000c8e4:	f0 1f 00 06 	mcall	8000c8fc <udi_msc_data_send+0x4c>
	}
}
8000c8e8:	2f ed       	sub	sp,-8
8000c8ea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8ee:	00 00       	add	r0,r0
8000c8f0:	80 00       	ld.sh	r0,r0[0x0]
8000c8f2:	c9 00       	breq	8000c812 <udi_msc_cbw_received+0xee>
8000c8f4:	80 00       	ld.sh	r0,r0[0x0]
8000c8f6:	a6 bc       	st.b	r3[0x3],r12
8000c8f8:	80 00       	ld.sh	r0,r0[0x0]
8000c8fa:	cb 18       	rjmp	8000ca5c <udi_msc_sense_fail+0x24>
8000c8fc:	80 00       	ld.sh	r0,r0[0x0]
8000c8fe:	c9 4c       	rcall	8000ca26 <udi_msc_clear_sense+0x16>

8000c900 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000c900:	eb cd 40 80 	pushm	r7,lr
8000c904:	1a 97       	mov	r7,sp
8000c906:	20 3d       	sub	sp,12
8000c908:	ef 4c ff fc 	st.w	r7[-4],r12
8000c90c:	ef 4b ff f8 	st.w	r7[-8],r11
8000c910:	14 98       	mov	r8,r10
8000c912:	ef 68 ff f4 	st.b	r7[-12],r8
	if (UDD_EP_TRANSFER_OK != status) {
8000c916:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c91a:	58 08       	cp.w	r8,0
8000c91c:	c0 d1       	brne	8000c936 <udi_msc_data_sent+0x36>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
8000c91e:	f0 1f 00 09 	mcall	8000c940 <udi_msc_data_sent+0x40>
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
8000c922:	48 98       	lddpc	r8,8000c944 <udi_msc_data_sent+0x44>
8000c924:	70 29       	ld.w	r9,r8[0x8]
8000c926:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c92a:	10 19       	sub	r9,r8
8000c92c:	48 68       	lddpc	r8,8000c944 <udi_msc_data_sent+0x44>
8000c92e:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_process();
8000c930:	f0 1f 00 06 	mcall	8000c948 <udi_msc_data_sent+0x48>
8000c934:	c0 28       	rjmp	8000c938 <udi_msc_data_sent+0x38>
		udd_ep_id_t ep)
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000c936:	d7 03       	nop
	// Update sense data
	udi_msc_sense_pass();
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
	udi_msc_csw_process();
}
8000c938:	2f dd       	sub	sp,-12
8000c93a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c93e:	00 00       	add	r0,r0
8000c940:	80 00       	ld.sh	r0,r0[0x0]
8000c942:	ca c0       	breq	8000c89a <udi_msc_cbw_validate+0x4a>
8000c944:	00 00       	add	r0,r0
8000c946:	01 54       	ld.sh	r4,--r0
8000c948:	80 00       	ld.sh	r0,r0[0x0]
8000c94a:	c9 4c       	rcall	8000ca72 <udi_msc_sense_fail+0x3a>

8000c94c <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
8000c94c:	eb cd 40 80 	pushm	r7,lr
8000c950:	1a 97       	mov	r7,sp
	if (0 != udi_msc_csw.dCSWDataResidue) {
8000c952:	49 28       	lddpc	r8,8000c998 <udi_msc_csw_process+0x4c>
8000c954:	70 28       	ld.w	r8,r8[0x8]
8000c956:	58 08       	cp.w	r8,0
8000c958:	c1 10       	breq	8000c97a <udi_msc_csw_process+0x2e>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
8000c95a:	49 18       	lddpc	r8,8000c99c <udi_msc_csw_process+0x50>
8000c95c:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000c960:	10 99       	mov	r9,r8
8000c962:	30 08       	mov	r8,0
8000c964:	f0 09 18 00 	cp.b	r9,r8
8000c968:	c0 64       	brge	8000c974 <udi_msc_csw_process+0x28>
			udd_ep_set_halt(UDI_MSC_EP_IN);
8000c96a:	e0 6c 00 81 	mov	r12,129
8000c96e:	f0 1f 00 0d 	mcall	8000c9a0 <udi_msc_csw_process+0x54>
8000c972:	c0 48       	rjmp	8000c97a <udi_msc_csw_process+0x2e>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
8000c974:	30 2c       	mov	r12,2
8000c976:	f0 1f 00 0b 	mcall	8000c9a0 <udi_msc_csw_process+0x54>
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
8000c97a:	48 98       	lddpc	r8,8000c99c <udi_msc_csw_process+0x50>
8000c97c:	70 19       	ld.w	r9,r8[0x4]
8000c97e:	48 78       	lddpc	r8,8000c998 <udi_msc_csw_process+0x4c>
8000c980:	91 19       	st.w	r8[0x4],r9
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
8000c982:	48 68       	lddpc	r8,8000c998 <udi_msc_csw_process+0x4c>
8000c984:	70 28       	ld.w	r8,r8[0x8]
8000c986:	5c b8       	swap.b	r8
8000c988:	10 99       	mov	r9,r8
8000c98a:	48 48       	lddpc	r8,8000c998 <udi_msc_csw_process+0x4c>
8000c98c:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_send();
8000c98e:	f0 1f 00 06 	mcall	8000c9a4 <udi_msc_csw_process+0x58>
}
8000c992:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c996:	00 00       	add	r0,r0
8000c998:	00 00       	add	r0,r0
8000c99a:	01 54       	ld.sh	r4,--r0
8000c99c:	00 00       	add	r0,r0
8000c99e:	07 f0       	ld.ub	r0,r3[0x7]
8000c9a0:	80 00       	ld.sh	r0,r0[0x0]
8000c9a2:	a4 68       	st.h	r2[0xc],r8
8000c9a4:	80 00       	ld.sh	r0,r0[0x0]
8000c9a6:	c9 a8       	rjmp	8000cada <udi_msc_sense_pass+0x1a>

8000c9a8 <udi_msc_csw_send>:


void udi_msc_csw_send(void)
{
8000c9a8:	eb cd 40 80 	pushm	r7,lr
8000c9ac:	1a 97       	mov	r7,sp
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
8000c9ae:	48 ba       	lddpc	r10,8000c9d8 <udi_msc_csw_send+0x30>
8000c9b0:	48 b8       	lddpc	r8,8000c9dc <udi_msc_csw_send+0x34>
8000c9b2:	30 d9       	mov	r9,13
8000c9b4:	30 0b       	mov	r11,0
8000c9b6:	e0 6c 00 81 	mov	r12,129
8000c9ba:	f0 1f 00 0a 	mcall	8000c9e0 <udi_msc_csw_send+0x38>
8000c9be:	18 98       	mov	r8,r12
8000c9c0:	ec 18 00 01 	eorl	r8,0x1
8000c9c4:	5c 58       	castu.b	r8
8000c9c6:	c0 60       	breq	8000c9d2 <udi_msc_csw_send+0x2a>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
8000c9c8:	48 7b       	lddpc	r11,8000c9e4 <udi_msc_csw_send+0x3c>
8000c9ca:	e0 6c 00 81 	mov	r12,129
8000c9ce:	f0 1f 00 07 	mcall	8000c9e8 <udi_msc_csw_send+0x40>
	}
}
8000c9d2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9d6:	00 00       	add	r0,r0
8000c9d8:	00 00       	add	r0,r0
8000c9da:	01 54       	ld.sh	r4,--r0
8000c9dc:	80 00       	ld.sh	r0,r0[0x0]
8000c9de:	c9 ec       	rcall	8000cb1a <udi_msc_sense_fail_hardware+0x2>
8000c9e0:	80 00       	ld.sh	r0,r0[0x0]
8000c9e2:	a6 bc       	st.b	r3[0x3],r12
8000c9e4:	80 00       	ld.sh	r0,r0[0x0]
8000c9e6:	c9 a8       	rjmp	8000cb1a <udi_msc_sense_fail_hardware+0x2>
8000c9e8:	80 00       	ld.sh	r0,r0[0x0]
8000c9ea:	a8 7c       	st.h	r4[0xe],r12

8000c9ec <udi_msc_csw_sent>:


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000c9ec:	eb cd 40 80 	pushm	r7,lr
8000c9f0:	1a 97       	mov	r7,sp
8000c9f2:	20 3d       	sub	sp,12
8000c9f4:	ef 4c ff fc 	st.w	r7[-4],r12
8000c9f8:	ef 4b ff f8 	st.w	r7[-8],r11
8000c9fc:	14 98       	mov	r8,r10
8000c9fe:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
8000ca02:	f0 1f 00 03 	mcall	8000ca0c <udi_msc_csw_sent+0x20>
}
8000ca06:	2f dd       	sub	sp,-12
8000ca08:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca0c:	80 00       	ld.sh	r0,r0[0x0]
8000ca0e:	c6 e8       	rjmp	8000caea <udi_msc_sense_fail_not_present+0xa>

8000ca10 <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
8000ca10:	eb cd 40 80 	pushm	r7,lr
8000ca14:	1a 97       	mov	r7,sp
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
8000ca16:	31 2a       	mov	r10,18
8000ca18:	30 0b       	mov	r11,0
8000ca1a:	48 6c       	lddpc	r12,8000ca30 <udi_msc_clear_sense+0x20>
8000ca1c:	f0 1f 00 06 	mcall	8000ca34 <udi_msc_clear_sense+0x24>
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
8000ca20:	48 49       	lddpc	r9,8000ca30 <udi_msc_clear_sense+0x20>
8000ca22:	3f 08       	mov	r8,-16
8000ca24:	b2 88       	st.b	r9[0x0],r8
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
8000ca26:	48 39       	lddpc	r9,8000ca30 <udi_msc_clear_sense+0x20>
8000ca28:	30 a8       	mov	r8,10
8000ca2a:	b2 f8       	st.b	r9[0x7],r8
}
8000ca2c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca30:	00 00       	add	r0,r0
8000ca32:	08 14       	sub	r4,r4
8000ca34:	80 00       	ld.sh	r0,r0[0x0]
8000ca36:	ea 3e eb cd 	sub	lr,781261

8000ca38 <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
8000ca38:	eb cd 40 80 	pushm	r7,lr
8000ca3c:	1a 97       	mov	r7,sp
8000ca3e:	20 3d       	sub	sp,12
8000ca40:	18 99       	mov	r9,r12
8000ca42:	16 98       	mov	r8,r11
8000ca44:	ef 4a ff f4 	st.w	r7[-12],r10
8000ca48:	ef 69 ff fc 	st.b	r7[-4],r9
8000ca4c:	ef 58 ff f8 	st.h	r7[-8],r8
	udi_msc_clear_sense();
8000ca50:	f0 1f 00 19 	mcall	8000cab4 <udi_msc_sense_fail+0x7c>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
8000ca54:	49 99       	lddpc	r9,8000cab8 <udi_msc_sense_fail+0x80>
8000ca56:	30 18       	mov	r8,1
8000ca58:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.sense_flag_key = sense_key;
8000ca5c:	49 89       	lddpc	r9,8000cabc <udi_msc_sense_fail+0x84>
8000ca5e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ca62:	b2 a8       	st.b	r9[0x2],r8
	udi_msc_sense.information[0] = lba >> 24;
8000ca64:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ca68:	b9 88       	lsr	r8,0x18
8000ca6a:	5c 58       	castu.b	r8
8000ca6c:	49 49       	lddpc	r9,8000cabc <udi_msc_sense_fail+0x84>
8000ca6e:	b2 b8       	st.b	r9[0x3],r8
	udi_msc_sense.information[1] = lba >> 16;
8000ca70:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ca74:	b1 88       	lsr	r8,0x10
8000ca76:	5c 58       	castu.b	r8
8000ca78:	49 19       	lddpc	r9,8000cabc <udi_msc_sense_fail+0x84>
8000ca7a:	b2 c8       	st.b	r9[0x4],r8
	udi_msc_sense.information[2] = lba >> 8;
8000ca7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ca80:	a9 88       	lsr	r8,0x8
8000ca82:	5c 58       	castu.b	r8
8000ca84:	48 e9       	lddpc	r9,8000cabc <udi_msc_sense_fail+0x84>
8000ca86:	b2 d8       	st.b	r9[0x5],r8
	udi_msc_sense.information[3] = lba;
8000ca88:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ca8c:	5c 58       	castu.b	r8
8000ca8e:	48 c9       	lddpc	r9,8000cabc <udi_msc_sense_fail+0x84>
8000ca90:	b2 e8       	st.b	r9[0x6],r8
	udi_msc_sense.AddSenseCode = add_sense >> 8;
8000ca92:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000ca96:	a9 88       	lsr	r8,0x8
8000ca98:	5c 88       	casts.h	r8
8000ca9a:	5c 58       	castu.b	r8
8000ca9c:	48 89       	lddpc	r9,8000cabc <udi_msc_sense_fail+0x84>
8000ca9e:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
8000caa2:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000caa6:	5c 58       	castu.b	r8
8000caa8:	48 59       	lddpc	r9,8000cabc <udi_msc_sense_fail+0x84>
8000caaa:	f3 68 00 0d 	st.b	r9[13],r8
}
8000caae:	2f dd       	sub	sp,-12
8000cab0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cab4:	80 00       	ld.sh	r0,r0[0x0]
8000cab6:	ca 10       	breq	8000c9f8 <udi_msc_csw_sent+0xc>
8000cab8:	00 00       	add	r0,r0
8000caba:	01 54       	ld.sh	r4,--r0
8000cabc:	00 00       	add	r0,r0
8000cabe:	08 14       	sub	r4,r4

8000cac0 <udi_msc_sense_pass>:

static void udi_msc_sense_pass(void)
{
8000cac0:	eb cd 40 80 	pushm	r7,lr
8000cac4:	1a 97       	mov	r7,sp
	udi_msc_clear_sense();
8000cac6:	f0 1f 00 05 	mcall	8000cad8 <udi_msc_sense_pass+0x18>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
8000caca:	48 59       	lddpc	r9,8000cadc <udi_msc_sense_pass+0x1c>
8000cacc:	30 08       	mov	r8,0
8000cace:	f3 68 00 0c 	st.b	r9[12],r8
}
8000cad2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cad6:	00 00       	add	r0,r0
8000cad8:	80 00       	ld.sh	r0,r0[0x0]
8000cada:	ca 10       	breq	8000ca1c <udi_msc_clear_sense+0xc>
8000cadc:	00 00       	add	r0,r0
8000cade:	01 54       	ld.sh	r4,--r0

8000cae0 <udi_msc_sense_fail_not_present>:


static void udi_msc_sense_fail_not_present(void)
{
8000cae0:	eb cd 40 80 	pushm	r7,lr
8000cae4:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
8000cae6:	30 0a       	mov	r10,0
8000cae8:	e0 6b 3a 00 	mov	r11,14848
8000caec:	30 2c       	mov	r12,2
8000caee:	f0 1f 00 03 	mcall	8000caf8 <udi_msc_sense_fail_not_present+0x18>
}
8000caf2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000caf6:	00 00       	add	r0,r0
8000caf8:	80 00       	ld.sh	r0,r0[0x0]
8000cafa:	ca 38       	rjmp	8000cc40 <udi_msc_spc_inquiry+0x58>

8000cafc <udi_msc_sense_fail_busy_or_change>:

static void udi_msc_sense_fail_busy_or_change(void)
{
8000cafc:	eb cd 40 80 	pushm	r7,lr
8000cb00:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
8000cb02:	30 0a       	mov	r10,0
8000cb04:	e0 6b 28 00 	mov	r11,10240
8000cb08:	30 6c       	mov	r12,6
8000cb0a:	f0 1f 00 03 	mcall	8000cb14 <udi_msc_sense_fail_busy_or_change+0x18>
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}
8000cb0e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb12:	00 00       	add	r0,r0
8000cb14:	80 00       	ld.sh	r0,r0[0x0]
8000cb16:	ca 38       	rjmp	8000cc5c <udi_msc_spc_inquiry+0x74>

8000cb18 <udi_msc_sense_fail_hardware>:

static void udi_msc_sense_fail_hardware(void)
{
8000cb18:	eb cd 40 80 	pushm	r7,lr
8000cb1c:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
8000cb1e:	30 0a       	mov	r10,0
8000cb20:	30 0b       	mov	r11,0
8000cb22:	30 4c       	mov	r12,4
8000cb24:	f0 1f 00 02 	mcall	8000cb2c <udi_msc_sense_fail_hardware+0x14>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}
8000cb28:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb2c:	80 00       	ld.sh	r0,r0[0x0]
8000cb2e:	ca 38       	rjmp	8000cc74 <udi_msc_spc_inquiry+0x8c>

8000cb30 <udi_msc_sense_fail_protected>:

static void udi_msc_sense_fail_protected(void)
{
8000cb30:	eb cd 40 80 	pushm	r7,lr
8000cb34:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
8000cb36:	30 0a       	mov	r10,0
8000cb38:	e0 6b 27 00 	mov	r11,9984
8000cb3c:	30 7c       	mov	r12,7
8000cb3e:	f0 1f 00 03 	mcall	8000cb48 <udi_msc_sense_fail_protected+0x18>
}
8000cb42:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb46:	00 00       	add	r0,r0
8000cb48:	80 00       	ld.sh	r0,r0[0x0]
8000cb4a:	ca 38       	rjmp	8000cc90 <udi_msc_spc_inquiry+0xa8>

8000cb4c <udi_msc_sense_fail_cdb_invalid>:

static void udi_msc_sense_fail_cdb_invalid(void)
{
8000cb4c:	eb cd 40 80 	pushm	r7,lr
8000cb50:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000cb52:	30 0a       	mov	r10,0
8000cb54:	e0 6b 24 00 	mov	r11,9216
8000cb58:	30 5c       	mov	r12,5
8000cb5a:	f0 1f 00 03 	mcall	8000cb64 <udi_msc_sense_fail_cdb_invalid+0x18>
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
8000cb5e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb62:	00 00       	add	r0,r0
8000cb64:	80 00       	ld.sh	r0,r0[0x0]
8000cb66:	ca 38       	rjmp	8000ccac <udi_msc_spc_inquiry+0xc4>

8000cb68 <udi_msc_sense_command_invalid>:

static void udi_msc_sense_command_invalid(void)
{
8000cb68:	eb cd 40 80 	pushm	r7,lr
8000cb6c:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000cb6e:	30 0a       	mov	r10,0
8000cb70:	e0 6b 20 00 	mov	r11,8192
8000cb74:	30 5c       	mov	r12,5
8000cb76:	f0 1f 00 03 	mcall	8000cb80 <udi_msc_sense_command_invalid+0x18>
			SCSI_ASC_INVALID_COMMAND_OPERATION_CODE, 0);
}
8000cb7a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb7e:	00 00       	add	r0,r0
8000cb80:	80 00       	ld.sh	r0,r0[0x0]
8000cb82:	ca 38       	rjmp	8000ccc8 <udi_msc_spc_inquiry+0xe0>

8000cb84 <udi_msc_spc_requestsense>:

//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
8000cb84:	eb cd 40 80 	pushm	r7,lr
8000cb88:	1a 97       	mov	r7,sp
8000cb8a:	20 1d       	sub	sp,4
	uint8_t length = udi_msc_cbw.CDB[4];
8000cb8c:	49 38       	lddpc	r8,8000cbd8 <udi_msc_spc_requestsense+0x54>
8000cb8e:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cb92:	ef 68 ff ff 	st.b	r7[-1],r8

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
8000cb96:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000cb9a:	31 28       	mov	r8,18
8000cb9c:	f0 09 18 00 	cp.b	r9,r8
8000cba0:	e0 88 00 05 	brls	8000cbaa <udi_msc_spc_requestsense+0x26>
		length = sizeof(udi_msc_sense);
8000cba4:	31 28       	mov	r8,18
8000cba6:	ef 68 ff ff 	st.b	r7[-1],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000cbaa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cbae:	e0 6b 00 80 	mov	r11,128
8000cbb2:	10 9c       	mov	r12,r8
8000cbb4:	f0 1f 00 0a 	mcall	8000cbdc <udi_msc_spc_requestsense+0x58>
8000cbb8:	18 98       	mov	r8,r12
8000cbba:	ec 18 00 01 	eorl	r8,0x1
8000cbbe:	5c 58       	castu.b	r8
8000cbc0:	c0 81       	brne	8000cbd0 <udi_msc_spc_requestsense+0x4c>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
8000cbc2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cbc6:	10 9b       	mov	r11,r8
8000cbc8:	48 6c       	lddpc	r12,8000cbe0 <udi_msc_spc_requestsense+0x5c>
8000cbca:	f0 1f 00 07 	mcall	8000cbe4 <udi_msc_spc_requestsense+0x60>
8000cbce:	c0 28       	rjmp	8000cbd2 <udi_msc_spc_requestsense+0x4e>
	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000cbd0:	d7 03       	nop
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
}
8000cbd2:	2f fd       	sub	sp,-4
8000cbd4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cbd8:	00 00       	add	r0,r0
8000cbda:	07 f0       	ld.ub	r0,r3[0x7]
8000cbdc:	80 00       	ld.sh	r0,r0[0x0]
8000cbde:	c8 50       	breq	8000cae8 <udi_msc_sense_fail_not_present+0x8>
8000cbe0:	00 00       	add	r0,r0
8000cbe2:	08 14       	sub	r4,r4
8000cbe4:	80 00       	ld.sh	r0,r0[0x0]
8000cbe6:	c8 b0       	breq	8000cafc <udi_msc_sense_fail_busy_or_change>

8000cbe8 <udi_msc_spc_inquiry>:


static void udi_msc_spc_inquiry(void)
{
8000cbe8:	eb cd 40 80 	pushm	r7,lr
8000cbec:	1a 97       	mov	r7,sp
8000cbee:	20 1d       	sub	sp,4
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
8000cbf0:	4b e8       	lddpc	r8,8000cce8 <udi_msc_spc_inquiry+0x100>
8000cbf2:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cbf6:	ef 68 ff fe 	st.b	r7[-2],r8

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
8000cbfa:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000cbfe:	32 48       	mov	r8,36
8000cc00:	f0 09 18 00 	cp.b	r9,r8
8000cc04:	e0 88 00 05 	brls	8000cc0e <udi_msc_spc_inquiry+0x26>
		length = sizeof(udi_msc_inquiry_data);
8000cc08:	32 48       	mov	r8,36
8000cc0a:	ef 68 ff fe 	st.b	r7[-2],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000cc0e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000cc12:	e0 6b 00 80 	mov	r11,128
8000cc16:	10 9c       	mov	r12,r8
8000cc18:	f0 1f 00 35 	mcall	8000ccec <udi_msc_spc_inquiry+0x104>
8000cc1c:	18 98       	mov	r8,r12
8000cc1e:	ec 18 00 01 	eorl	r8,0x1
8000cc22:	5c 58       	castu.b	r8
8000cc24:	c5 e1       	brne	8000cce0 <udi_msc_spc_inquiry+0xf8>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000cc26:	4b 18       	lddpc	r8,8000cce8 <udi_msc_spc_inquiry+0x100>
8000cc28:	f1 38 00 10 	ld.ub	r8,r8[16]
8000cc2c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000cc30:	c0 61       	brne	8000cc3c <udi_msc_spc_inquiry+0x54>
			|| (0 != udi_msc_cbw.CDB[2])) {
8000cc32:	4a e8       	lddpc	r8,8000cce8 <udi_msc_spc_inquiry+0x100>
8000cc34:	f1 38 00 11 	ld.ub	r8,r8[17]
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000cc38:	58 08       	cp.w	r8,0
8000cc3a:	c0 60       	breq	8000cc46 <udi_msc_spc_inquiry+0x5e>
			|| (0 != udi_msc_cbw.CDB[2])) {
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
8000cc3c:	f0 1f 00 2d 	mcall	8000ccf0 <udi_msc_spc_inquiry+0x108>
		udi_msc_csw_process();
8000cc40:	f0 1f 00 2d 	mcall	8000ccf4 <udi_msc_spc_inquiry+0x10c>
		return;
8000cc44:	c4 f8       	rjmp	8000cce2 <udi_msc_spc_inquiry+0xfa>
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
8000cc46:	4a 98       	lddpc	r8,8000cce8 <udi_msc_spc_inquiry+0x100>
8000cc48:	f1 38 00 0d 	ld.ub	r8,r8[13]
		return;
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
8000cc4c:	10 9c       	mov	r12,r8
8000cc4e:	f0 1f 00 2b 	mcall	8000ccf8 <udi_msc_spc_inquiry+0x110>
8000cc52:	18 98       	mov	r8,r12
8000cc54:	f0 c9 ff ff 	sub	r9,r8,-1
8000cc58:	4a 98       	lddpc	r8,8000ccfc <udi_msc_spc_inquiry+0x114>
8000cc5a:	2f 08       	sub	r8,-16
8000cc5c:	31 0a       	mov	r10,16
8000cc5e:	12 9b       	mov	r11,r9
8000cc60:	10 9c       	mov	r12,r8
8000cc62:	f0 1f 00 28 	mcall	8000cd00 <udi_msc_spc_inquiry+0x118>
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
8000cc66:	30 08       	mov	r8,0
8000cc68:	ef 68 ff ff 	st.b	r7[-1],r8
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000cc6c:	c1 a8       	rjmp	8000cca0 <udi_msc_spc_inquiry+0xb8>
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000cc6e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cc72:	4a 39       	lddpc	r9,8000ccfc <udi_msc_spc_inquiry+0x114>
8000cc74:	f2 08 00 08 	add	r8,r9,r8
8000cc78:	f1 38 00 10 	ld.ub	r8,r8[16]
8000cc7c:	58 08       	cp.w	r8,0
8000cc7e:	c2 40       	breq	8000ccc6 <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
8000cc80:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cc84:	49 e9       	lddpc	r9,8000ccfc <udi_msc_spc_inquiry+0x114>
8000cc86:	f2 08 00 08 	add	r8,r9,r8
8000cc8a:	f1 39 00 10 	ld.ub	r9,r8[16]
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000cc8e:	32 28       	mov	r8,34
8000cc90:	f0 09 18 00 	cp.b	r9,r8
8000cc94:	c1 90       	breq	8000ccc6 <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
8000cc96:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cc9a:	2f f8       	sub	r8,-1
8000cc9c:	ef 68 ff ff 	st.b	r7[-1],r8
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000cca0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000cca4:	31 08       	mov	r8,16
8000cca6:	f0 09 18 00 	cp.b	r9,r8
8000ccaa:	ce 21       	brne	8000cc6e <udi_msc_spc_inquiry+0x86>
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000ccac:	c0 d8       	rjmp	8000ccc6 <udi_msc_spc_inquiry+0xde>
		udi_msc_inquiry_data.product_id[i] = ' ';
8000ccae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ccb2:	49 39       	lddpc	r9,8000ccfc <udi_msc_spc_inquiry+0x114>
8000ccb4:	10 09       	add	r9,r8
8000ccb6:	32 08       	mov	r8,32
8000ccb8:	f3 68 00 10 	st.b	r9[16],r8
		i++;
8000ccbc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ccc0:	2f f8       	sub	r8,-1
8000ccc2:	ef 68 ff ff 	st.b	r7[-1],r8
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000ccc6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ccca:	31 08       	mov	r8,16
8000cccc:	f0 09 18 00 	cp.b	r9,r8
8000ccd0:	ce f1       	brne	8000ccae <udi_msc_spc_inquiry+0xc6>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
8000ccd2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000ccd6:	10 9b       	mov	r11,r8
8000ccd8:	48 9c       	lddpc	r12,8000ccfc <udi_msc_spc_inquiry+0x114>
8000ccda:	f0 1f 00 0b 	mcall	8000cd04 <udi_msc_spc_inquiry+0x11c>
8000ccde:	c0 28       	rjmp	8000cce2 <udi_msc_spc_inquiry+0xfa>
	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000cce0:	d7 03       	nop
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
}
8000cce2:	2f fd       	sub	sp,-4
8000cce4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cce8:	00 00       	add	r0,r0
8000ccea:	07 f0       	ld.ub	r0,r3[0x7]
8000ccec:	80 00       	ld.sh	r0,r0[0x0]
8000ccee:	c8 50       	breq	8000cbf8 <udi_msc_spc_inquiry+0x10>
8000ccf0:	80 00       	ld.sh	r0,r0[0x0]
8000ccf2:	cb 4c       	rcall	8000ce5a <udi_msc_spc_mode_sense+0xda>
8000ccf4:	80 00       	ld.sh	r0,r0[0x0]
8000ccf6:	c9 4c       	rcall	8000ce1e <udi_msc_spc_mode_sense+0x9e>
8000ccf8:	80 00       	ld.sh	r0,r0[0x0]
8000ccfa:	c2 c0       	breq	8000cd52 <udi_msc_spc_testunitready_global+0x4a>
8000ccfc:	00 00       	add	r0,r0
8000ccfe:	01 68       	ld.uh	r8,--r0
8000cd00:	80 00       	ld.sh	r0,r0[0x0]
8000cd02:	e8 f6 80 00 	ld.w	r6,r4[-32768]
8000cd06:	c8 b0       	breq	8000cc1c <udi_msc_spc_inquiry+0x34>

8000cd08 <udi_msc_spc_testunitready_global>:


static bool udi_msc_spc_testunitready_global(void)
{
8000cd08:	eb cd 40 80 	pushm	r7,lr
8000cd0c:	1a 97       	mov	r7,sp
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
8000cd0e:	48 e8       	lddpc	r8,8000cd44 <udi_msc_spc_testunitready_global+0x3c>
8000cd10:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cd14:	10 9c       	mov	r12,r8
8000cd16:	f0 1f 00 0d 	mcall	8000cd48 <udi_msc_spc_testunitready_global+0x40>
8000cd1a:	18 98       	mov	r8,r12
8000cd1c:	58 28       	cp.w	r8,2
8000cd1e:	c0 a0       	breq	8000cd32 <udi_msc_spc_testunitready_global+0x2a>
8000cd20:	58 38       	cp.w	r8,3
8000cd22:	c0 50       	breq	8000cd2c <udi_msc_spc_testunitready_global+0x24>
8000cd24:	58 08       	cp.w	r8,0
8000cd26:	c0 91       	brne	8000cd38 <udi_msc_spc_testunitready_global+0x30>
	case CTRL_GOOD:
		return true;	// Don't change sense data
8000cd28:	30 18       	mov	r8,1
8000cd2a:	c0 a8       	rjmp	8000cd3e <udi_msc_spc_testunitready_global+0x36>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000cd2c:	f0 1f 00 08 	mcall	8000cd4c <udi_msc_spc_testunitready_global+0x44>
		break;
8000cd30:	c0 68       	rjmp	8000cd3c <udi_msc_spc_testunitready_global+0x34>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000cd32:	f0 1f 00 08 	mcall	8000cd50 <udi_msc_spc_testunitready_global+0x48>
		break;
8000cd36:	c0 38       	rjmp	8000cd3c <udi_msc_spc_testunitready_global+0x34>
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
8000cd38:	f0 1f 00 07 	mcall	8000cd54 <udi_msc_spc_testunitready_global+0x4c>
		break;
	}
	return false;
8000cd3c:	30 08       	mov	r8,0
}
8000cd3e:	10 9c       	mov	r12,r8
8000cd40:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd44:	00 00       	add	r0,r0
8000cd46:	07 f0       	ld.ub	r0,r3[0x7]
8000cd48:	80 00       	ld.sh	r0,r0[0x0]
8000cd4a:	c1 d0       	breq	8000cd84 <udi_msc_spc_mode_sense+0x4>
8000cd4c:	80 00       	ld.sh	r0,r0[0x0]
8000cd4e:	ca fc       	rcall	8000ceac <udi_msc_spc_mode_sense+0x12c>
8000cd50:	80 00       	ld.sh	r0,r0[0x0]
8000cd52:	ca e0       	breq	8000ccae <udi_msc_spc_inquiry+0xc6>
8000cd54:	80 00       	ld.sh	r0,r0[0x0]
8000cd56:	cb 18       	rjmp	8000ceb8 <udi_msc_spc_mode_sense+0x138>

8000cd58 <udi_msc_spc_testunitready>:


static void udi_msc_spc_testunitready(void)
{
8000cd58:	eb cd 40 80 	pushm	r7,lr
8000cd5c:	1a 97       	mov	r7,sp
	if (udi_msc_spc_testunitready_global()) {
8000cd5e:	f0 1f 00 06 	mcall	8000cd74 <udi_msc_spc_testunitready+0x1c>
8000cd62:	18 98       	mov	r8,r12
8000cd64:	58 08       	cp.w	r8,0
8000cd66:	c0 30       	breq	8000cd6c <udi_msc_spc_testunitready+0x14>
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
8000cd68:	f0 1f 00 04 	mcall	8000cd78 <udi_msc_spc_testunitready+0x20>
	}
	// Send status in CSW packet
	udi_msc_csw_process();
8000cd6c:	f0 1f 00 04 	mcall	8000cd7c <udi_msc_spc_testunitready+0x24>
}
8000cd70:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd74:	80 00       	ld.sh	r0,r0[0x0]
8000cd76:	cd 08       	rjmp	8000cf16 <udi_msc_sbc_read_capacity+0x46>
8000cd78:	80 00       	ld.sh	r0,r0[0x0]
8000cd7a:	ca c0       	breq	8000ccd2 <udi_msc_spc_inquiry+0xea>
8000cd7c:	80 00       	ld.sh	r0,r0[0x0]
8000cd7e:	c9 4c       	rcall	8000cea6 <udi_msc_spc_mode_sense+0x126>

8000cd80 <udi_msc_spc_mode_sense>:


static void udi_msc_spc_mode_sense(bool b_sense10)
{
8000cd80:	eb cd 40 80 	pushm	r7,lr
8000cd84:	1a 97       	mov	r7,sp
8000cd86:	20 3d       	sub	sp,12
8000cd88:	18 98       	mov	r8,r12
8000cd8a:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
8000cd8e:	31 4a       	mov	r10,20
8000cd90:	30 0b       	mov	r11,0
8000cd92:	4c ac       	lddpc	r12,8000ceb8 <udi_msc_spc_mode_sense+0x138>
8000cd94:	f0 1f 00 4a 	mcall	8000cebc <udi_msc_spc_mode_sense+0x13c>

	// Initialize process
	if (b_sense10) {
8000cd98:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cd9c:	30 08       	mov	r8,0
8000cd9e:	f0 09 18 00 	cp.b	r9,r8
8000cda2:	c0 e0       	breq	8000cdbe <udi_msc_spc_mode_sense+0x3e>
		request_lgt = udi_msc_cbw.CDB[8];
8000cda4:	4c 78       	lddpc	r8,8000cec0 <udi_msc_spc_mode_sense+0x140>
8000cda6:	f1 38 00 17 	ld.ub	r8,r8[23]
8000cdaa:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s10.sense_data;
8000cdae:	4c 38       	lddpc	r8,8000ceb8 <udi_msc_spc_mode_sense+0x138>
8000cdb0:	2f 88       	sub	r8,-8
8000cdb2:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
8000cdb6:	30 88       	mov	r8,8
8000cdb8:	ef 68 ff f8 	st.b	r7[-8],r8
8000cdbc:	c0 d8       	rjmp	8000cdd6 <udi_msc_spc_mode_sense+0x56>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
8000cdbe:	4c 18       	lddpc	r8,8000cec0 <udi_msc_spc_mode_sense+0x140>
8000cdc0:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cdc4:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s6.sense_data;
8000cdc8:	4b c8       	lddpc	r8,8000ceb8 <udi_msc_spc_mode_sense+0x138>
8000cdca:	2f c8       	sub	r8,-4
8000cdcc:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
8000cdd0:	30 48       	mov	r8,4
8000cdd2:	ef 68 ff f8 	st.b	r7[-8],r8
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
8000cdd6:	4b b8       	lddpc	r8,8000cec0 <udi_msc_spc_mode_sense+0x140>
8000cdd8:	f1 38 00 11 	ld.ub	r8,r8[17]
8000cddc:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000cde0:	ef 68 ff f9 	st.b	r7[-7],r8
	if ((SCSI_MS_MODE_INFEXP == mode)
8000cde4:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000cde8:	31 c8       	mov	r8,28
8000cdea:	f0 09 18 00 	cp.b	r9,r8
8000cdee:	c0 70       	breq	8000cdfc <udi_msc_spc_mode_sense+0x7c>
8000cdf0:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000cdf4:	33 f8       	mov	r8,63
8000cdf6:	f0 09 18 00 	cp.b	r9,r8
8000cdfa:	c1 21       	brne	8000ce1e <udi_msc_spc_mode_sense+0x9e>
			|| (SCSI_MS_MODE_ALL == mode)) {
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
8000cdfc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ce00:	31 c8       	mov	r8,28
8000ce02:	b2 88       	st.b	r9[0x0],r8
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
8000ce04:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ce08:	30 a8       	mov	r8,10
8000ce0a:	b2 98       	st.b	r9[0x1],r8
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
8000ce0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ce10:	30 58       	mov	r8,5
8000ce12:	b2 b8       	st.b	r9[0x3],r8
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
8000ce14:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ce18:	2f 48       	sub	r8,-12
8000ce1a:	ef 68 ff f8 	st.b	r7[-8],r8
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
8000ce1e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000ce22:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ce26:	f0 09 18 00 	cp.b	r9,r8
8000ce2a:	e0 88 00 06 	brls	8000ce36 <udi_msc_spc_mode_sense+0xb6>
		request_lgt = data_sense_lgt;
8000ce2e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ce32:	ef 68 ff fa 	st.b	r7[-6],r8
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
8000ce36:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000ce3a:	e0 6b 00 80 	mov	r11,128
8000ce3e:	10 9c       	mov	r12,r8
8000ce40:	f0 1f 00 21 	mcall	8000cec4 <udi_msc_spc_mode_sense+0x144>
8000ce44:	18 98       	mov	r8,r12
8000ce46:	ec 18 00 01 	eorl	r8,0x1
8000ce4a:	5c 58       	castu.b	r8
8000ce4c:	c3 21       	brne	8000ceb0 <udi_msc_spc_mode_sense+0x130>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
8000ce4e:	49 d8       	lddpc	r8,8000cec0 <udi_msc_spc_mode_sense+0x140>
8000ce50:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ce54:	10 9c       	mov	r12,r8
8000ce56:	f0 1f 00 1d 	mcall	8000cec8 <udi_msc_spc_mode_sense+0x148>
8000ce5a:	18 98       	mov	r8,r12
8000ce5c:	58 08       	cp.w	r8,0
8000ce5e:	c0 40       	breq	8000ce66 <udi_msc_spc_mode_sense+0xe6>
8000ce60:	e0 68 00 80 	mov	r8,128
8000ce64:	c0 28       	rjmp	8000ce68 <udi_msc_spc_mode_sense+0xe8>
8000ce66:	30 08       	mov	r8,0
8000ce68:	ef 68 ff fb 	st.b	r7[-5],r8

	if (b_sense10) {
8000ce6c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000ce70:	30 08       	mov	r8,0
8000ce72:	f0 09 18 00 	cp.b	r9,r8
8000ce76:	c0 c0       	breq	8000ce8e <udi_msc_spc_mode_sense+0x10e>
		sense.s10.header.mode_data_length =
8000ce78:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ce7c:	20 28       	sub	r8,2
8000ce7e:	5c 88       	casts.h	r8
8000ce80:	48 e9       	lddpc	r9,8000ceb8 <udi_msc_spc_mode_sense+0x138>
8000ce82:	b2 08       	st.h	r9[0x0],r8
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
8000ce84:	48 d9       	lddpc	r9,8000ceb8 <udi_msc_spc_mode_sense+0x138>
8000ce86:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000ce8a:	b2 b8       	st.b	r9[0x3],r8
8000ce8c:	c0 b8       	rjmp	8000cea2 <udi_msc_spc_mode_sense+0x122>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
8000ce8e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ce92:	20 18       	sub	r8,1
8000ce94:	5c 58       	castu.b	r8
8000ce96:	48 99       	lddpc	r9,8000ceb8 <udi_msc_spc_mode_sense+0x138>
8000ce98:	b2 88       	st.b	r9[0x0],r8
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
8000ce9a:	48 89       	lddpc	r9,8000ceb8 <udi_msc_spc_mode_sense+0x138>
8000ce9c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000cea0:	b2 a8       	st.b	r9[0x2],r8
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
8000cea2:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000cea6:	10 9b       	mov	r11,r8
8000cea8:	48 4c       	lddpc	r12,8000ceb8 <udi_msc_spc_mode_sense+0x138>
8000ceaa:	f0 1f 00 09 	mcall	8000cecc <udi_msc_spc_mode_sense+0x14c>
8000ceae:	c0 28       	rjmp	8000ceb2 <udi_msc_spc_mode_sense+0x132>
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
		return;
8000ceb0:	d7 03       	nop
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
}
8000ceb2:	2f dd       	sub	sp,-12
8000ceb4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ceb8:	00 00       	add	r0,r0
8000ceba:	08 3c       	cp.w	r12,r4
8000cebc:	80 00       	ld.sh	r0,r0[0x0]
8000cebe:	ea 3e 00 00 	sub	lr,720896
8000cec2:	07 f0       	ld.ub	r0,r3[0x7]
8000cec4:	80 00       	ld.sh	r0,r0[0x0]
8000cec6:	c8 50       	breq	8000cdd0 <udi_msc_spc_mode_sense+0x50>
8000cec8:	80 00       	ld.sh	r0,r0[0x0]
8000ceca:	c2 70       	breq	8000cf18 <udi_msc_sbc_read_capacity+0x48>
8000cecc:	80 00       	ld.sh	r0,r0[0x0]
8000cece:	c8 b0       	breq	8000cde4 <udi_msc_spc_mode_sense+0x64>

8000ced0 <udi_msc_sbc_read_capacity>:


static void udi_msc_sbc_read_capacity(void)
{
8000ced0:	eb cd 40 80 	pushm	r7,lr
8000ced4:	1a 97       	mov	r7,sp
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
8000ced6:	e0 6b 00 80 	mov	r11,128
8000ceda:	30 8c       	mov	r12,8
8000cedc:	f0 1f 00 1b 	mcall	8000cf48 <udi_msc_sbc_read_capacity+0x78>
8000cee0:	18 98       	mov	r8,r12
8000cee2:	ec 18 00 01 	eorl	r8,0x1
8000cee6:	5c 58       	castu.b	r8
8000cee8:	c2 d1       	brne	8000cf42 <udi_msc_sbc_read_capacity+0x72>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
8000ceea:	49 98       	lddpc	r8,8000cf4c <udi_msc_sbc_read_capacity+0x7c>
8000ceec:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cef0:	49 8b       	lddpc	r11,8000cf50 <udi_msc_sbc_read_capacity+0x80>
8000cef2:	10 9c       	mov	r12,r8
8000cef4:	f0 1f 00 18 	mcall	8000cf54 <udi_msc_sbc_read_capacity+0x84>
8000cef8:	18 98       	mov	r8,r12
					&udi_msc_capacity.max_lba)) {
8000cefa:	58 28       	cp.w	r8,2
8000cefc:	c1 80       	breq	8000cf2c <udi_msc_sbc_read_capacity+0x5c>
8000cefe:	58 38       	cp.w	r8,3
8000cf00:	c1 10       	breq	8000cf22 <udi_msc_sbc_read_capacity+0x52>
8000cf02:	58 08       	cp.w	r8,0
8000cf04:	c1 91       	brne	8000cf36 <udi_msc_sbc_read_capacity+0x66>
		udi_msc_csw_process();
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
8000cf06:	49 38       	lddpc	r8,8000cf50 <udi_msc_sbc_read_capacity+0x80>
8000cf08:	e0 69 02 00 	mov	r9,512
8000cf0c:	91 19       	st.w	r8[0x4],r9
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
8000cf0e:	49 18       	lddpc	r8,8000cf50 <udi_msc_sbc_read_capacity+0x80>
8000cf10:	70 09       	ld.w	r9,r8[0x0]
8000cf12:	49 08       	lddpc	r8,8000cf50 <udi_msc_sbc_read_capacity+0x80>
8000cf14:	91 09       	st.w	r8[0x0],r9
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
8000cf16:	48 f8       	lddpc	r8,8000cf50 <udi_msc_sbc_read_capacity+0x80>
8000cf18:	30 8b       	mov	r11,8
8000cf1a:	10 9c       	mov	r12,r8
8000cf1c:	f0 1f 00 0f 	mcall	8000cf58 <udi_msc_sbc_read_capacity+0x88>
8000cf20:	c1 28       	rjmp	8000cf44 <udi_msc_sbc_read_capacity+0x74>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000cf22:	f0 1f 00 0f 	mcall	8000cf5c <udi_msc_sbc_read_capacity+0x8c>
		udi_msc_csw_process();
8000cf26:	f0 1f 00 0f 	mcall	8000cf60 <udi_msc_sbc_read_capacity+0x90>
		return;
8000cf2a:	c0 d8       	rjmp	8000cf44 <udi_msc_sbc_read_capacity+0x74>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000cf2c:	f0 1f 00 0e 	mcall	8000cf64 <udi_msc_sbc_read_capacity+0x94>
		udi_msc_csw_process();
8000cf30:	f0 1f 00 0c 	mcall	8000cf60 <udi_msc_sbc_read_capacity+0x90>
		return;
8000cf34:	c0 88       	rjmp	8000cf44 <udi_msc_sbc_read_capacity+0x74>
	default:
		udi_msc_sense_fail_hardware();
8000cf36:	f0 1f 00 0d 	mcall	8000cf68 <udi_msc_sbc_read_capacity+0x98>
		udi_msc_csw_process();
8000cf3a:	f0 1f 00 0a 	mcall	8000cf60 <udi_msc_sbc_read_capacity+0x90>
		return;
8000cf3e:	d7 03       	nop
8000cf40:	c0 28       	rjmp	8000cf44 <udi_msc_sbc_read_capacity+0x74>
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
					USB_CBW_DIRECTION_IN))
		return;
8000cf42:	d7 03       	nop
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
			sizeof(udi_msc_capacity));
}
8000cf44:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cf48:	80 00       	ld.sh	r0,r0[0x0]
8000cf4a:	c8 50       	breq	8000ce54 <udi_msc_spc_mode_sense+0xd4>
8000cf4c:	00 00       	add	r0,r0
8000cf4e:	07 f0       	ld.ub	r0,r3[0x7]
8000cf50:	00 00       	add	r0,r0
8000cf52:	08 34       	cp.w	r4,r4
8000cf54:	80 00       	ld.sh	r0,r0[0x0]
8000cf56:	c2 1c       	rcall	8000cf98 <udi_msc_sbc_trans+0x2c>
8000cf58:	80 00       	ld.sh	r0,r0[0x0]
8000cf5a:	c8 b0       	breq	8000ce70 <udi_msc_spc_mode_sense+0xf0>
8000cf5c:	80 00       	ld.sh	r0,r0[0x0]
8000cf5e:	ca fc       	rcall	8000d0bc <udi_msc_process_trans+0x5c>
8000cf60:	80 00       	ld.sh	r0,r0[0x0]
8000cf62:	c9 4c       	rcall	8000d08a <udi_msc_process_trans+0x2a>
8000cf64:	80 00       	ld.sh	r0,r0[0x0]
8000cf66:	ca e0       	breq	8000cec2 <udi_msc_spc_mode_sense+0x142>
8000cf68:	80 00       	ld.sh	r0,r0[0x0]
8000cf6a:	cb 18       	rjmp	8000d0cc <udi_msc_process_trans+0x6c>

8000cf6c <udi_msc_sbc_trans>:


static void udi_msc_sbc_trans(bool b_read)
{
8000cf6c:	eb cd 40 80 	pushm	r7,lr
8000cf70:	1a 97       	mov	r7,sp
8000cf72:	20 2d       	sub	sp,8
8000cf74:	18 98       	mov	r8,r12
8000cf76:	ef 68 ff f8 	st.b	r7[-8],r8
	uint32_t trans_size;

	if (!b_read) {
8000cf7a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cf7e:	ec 18 00 01 	eorl	r8,0x1
8000cf82:	5c 58       	castu.b	r8
8000cf84:	c0 f0       	breq	8000cfa2 <udi_msc_sbc_trans+0x36>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
8000cf86:	4a e8       	lddpc	r8,8000d03c <udi_msc_sbc_trans+0xd0>
8000cf88:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cf8c:	10 9c       	mov	r12,r8
8000cf8e:	f0 1f 00 2d 	mcall	8000d040 <udi_msc_sbc_trans+0xd4>
8000cf92:	18 98       	mov	r8,r12
8000cf94:	58 08       	cp.w	r8,0
8000cf96:	c0 60       	breq	8000cfa2 <udi_msc_sbc_trans+0x36>
			// Write not authorized
			udi_msc_sense_fail_protected();
8000cf98:	f0 1f 00 2b 	mcall	8000d044 <udi_msc_sbc_trans+0xd8>
			udi_msc_csw_process();
8000cf9c:	f0 1f 00 2b 	mcall	8000d048 <udi_msc_sbc_trans+0xdc>
			return;
8000cfa0:	c4 a8       	rjmp	8000d034 <udi_msc_sbc_trans+0xc8>
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
8000cfa2:	4a b9       	lddpc	r9,8000d04c <udi_msc_sbc_trans+0xe0>
8000cfa4:	4a 68       	lddpc	r8,8000d03c <udi_msc_sbc_trans+0xd0>
8000cfa6:	f1 38 00 11 	ld.ub	r8,r8[17]
8000cfaa:	b2 88       	st.b	r9[0x0],r8
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
8000cfac:	4a 88       	lddpc	r8,8000d04c <udi_msc_sbc_trans+0xe0>
8000cfae:	f0 c9 ff ff 	sub	r9,r8,-1
8000cfb2:	4a 38       	lddpc	r8,8000d03c <udi_msc_sbc_trans+0xd0>
8000cfb4:	f1 38 00 12 	ld.ub	r8,r8[18]
8000cfb8:	b2 88       	st.b	r9[0x0],r8
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
8000cfba:	4a 58       	lddpc	r8,8000d04c <udi_msc_sbc_trans+0xe0>
8000cfbc:	f0 c9 ff fe 	sub	r9,r8,-2
8000cfc0:	49 f8       	lddpc	r8,8000d03c <udi_msc_sbc_trans+0xd0>
8000cfc2:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cfc6:	b2 88       	st.b	r9[0x0],r8
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
8000cfc8:	4a 18       	lddpc	r8,8000d04c <udi_msc_sbc_trans+0xe0>
8000cfca:	f0 c9 ff fd 	sub	r9,r8,-3
8000cfce:	49 c8       	lddpc	r8,8000d03c <udi_msc_sbc_trans+0xd0>
8000cfd0:	f1 38 00 14 	ld.ub	r8,r8[20]
8000cfd4:	b2 88       	st.b	r9[0x0],r8
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
8000cfd6:	49 f9       	lddpc	r9,8000d050 <udi_msc_sbc_trans+0xe4>
8000cfd8:	49 98       	lddpc	r8,8000d03c <udi_msc_sbc_trans+0xd0>
8000cfda:	f1 38 00 16 	ld.ub	r8,r8[22]
8000cfde:	b2 88       	st.b	r9[0x0],r8
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
8000cfe0:	49 c8       	lddpc	r8,8000d050 <udi_msc_sbc_trans+0xe4>
8000cfe2:	f0 c9 ff ff 	sub	r9,r8,-1
8000cfe6:	49 68       	lddpc	r8,8000d03c <udi_msc_sbc_trans+0xd0>
8000cfe8:	f1 38 00 17 	ld.ub	r8,r8[23]
8000cfec:	b2 88       	st.b	r9[0x0],r8

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
8000cfee:	49 98       	lddpc	r8,8000d050 <udi_msc_sbc_trans+0xe4>
8000cff0:	90 08       	ld.sh	r8,r8[0x0]
8000cff2:	5c 78       	castu.h	r8
8000cff4:	a9 78       	lsl	r8,0x9
8000cff6:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udi_msc_cbw_validate(trans_size,
8000cffa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000cffe:	30 08       	mov	r8,0
8000d000:	f0 09 18 00 	cp.b	r9,r8
8000d004:	c0 40       	breq	8000d00c <udi_msc_sbc_trans+0xa0>
8000d006:	e0 68 00 80 	mov	r8,128
8000d00a:	c0 28       	rjmp	8000d00e <udi_msc_sbc_trans+0xa2>
8000d00c:	30 08       	mov	r8,0
8000d00e:	10 9b       	mov	r11,r8
8000d010:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d014:	f0 1f 00 10 	mcall	8000d054 <udi_msc_sbc_trans+0xe8>
8000d018:	18 98       	mov	r8,r12
8000d01a:	ec 18 00 01 	eorl	r8,0x1
8000d01e:	5c 58       	castu.b	r8
8000d020:	c0 91       	brne	8000d032 <udi_msc_sbc_trans+0xc6>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
8000d022:	48 e9       	lddpc	r9,8000d058 <udi_msc_sbc_trans+0xec>
8000d024:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d028:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_trans_req = true;
8000d02a:	48 d9       	lddpc	r9,8000d05c <udi_msc_sbc_trans+0xf0>
8000d02c:	30 18       	mov	r8,1
8000d02e:	b2 88       	st.b	r9[0x0],r8
8000d030:	c0 28       	rjmp	8000d034 <udi_msc_sbc_trans+0xc8>
	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
	if (!udi_msc_cbw_validate(trans_size,
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;
8000d032:	d7 03       	nop

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
	udi_msc_b_trans_req = true;
	UDI_MSC_NOTIFY_TRANS_EXT();
}
8000d034:	2f ed       	sub	sp,-8
8000d036:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d03a:	00 00       	add	r0,r0
8000d03c:	00 00       	add	r0,r0
8000d03e:	07 f0       	ld.ub	r0,r3[0x7]
8000d040:	80 00       	ld.sh	r0,r0[0x0]
8000d042:	c2 70       	breq	8000d090 <udi_msc_process_trans+0x30>
8000d044:	80 00       	ld.sh	r0,r0[0x0]
8000d046:	cb 30       	breq	8000cfac <udi_msc_sbc_trans+0x40>
8000d048:	80 00       	ld.sh	r0,r0[0x0]
8000d04a:	c9 4c       	rcall	8000d172 <udi_msc_trans_block+0xe>
8000d04c:	00 00       	add	r0,r0
8000d04e:	08 2c       	rsub	r12,r4
8000d050:	00 00       	add	r0,r0
8000d052:	08 30       	cp.w	r0,r4
8000d054:	80 00       	ld.sh	r0,r0[0x0]
8000d056:	c8 50       	breq	8000cf60 <udi_msc_sbc_read_capacity+0x90>
8000d058:	00 00       	add	r0,r0
8000d05a:	08 2a       	rsub	r10,r4
8000d05c:	00 00       	add	r0,r0
8000d05e:	08 29       	rsub	r9,r4

8000d060 <udi_msc_process_trans>:


bool udi_msc_process_trans(void)
{
8000d060:	eb cd 40 80 	pushm	r7,lr
8000d064:	1a 97       	mov	r7,sp
8000d066:	20 1d       	sub	sp,4
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
8000d068:	4a 58       	lddpc	r8,8000d0fc <udi_msc_process_trans+0x9c>
8000d06a:	11 88       	ld.ub	r8,r8[0x0]
8000d06c:	ec 18 00 01 	eorl	r8,0x1
8000d070:	5c 58       	castu.b	r8
8000d072:	c0 30       	breq	8000d078 <udi_msc_process_trans+0x18>
		return false;	// No Transfer request to do
8000d074:	30 08       	mov	r8,0
8000d076:	c3 f8       	rjmp	8000d0f4 <udi_msc_process_trans+0x94>
	udi_msc_b_trans_req = false;
8000d078:	4a 19       	lddpc	r9,8000d0fc <udi_msc_process_trans+0x9c>
8000d07a:	30 08       	mov	r8,0
8000d07c:	b2 88       	st.b	r9[0x0],r8

	// Start transfer
	if (udi_msc_b_read) {
8000d07e:	4a 18       	lddpc	r8,8000d100 <udi_msc_process_trans+0xa0>
8000d080:	11 88       	ld.ub	r8,r8[0x0]
8000d082:	58 08       	cp.w	r8,0
8000d084:	c1 20       	breq	8000d0a8 <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000d086:	4a 08       	lddpc	r8,8000d104 <udi_msc_process_trans+0xa4>
8000d088:	90 08       	ld.sh	r8,r8[0x0]
8000d08a:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000d08e:	49 f8       	lddpc	r8,8000d108 <udi_msc_process_trans+0xa8>
8000d090:	70 09       	ld.w	r9,r8[0x0]
8000d092:	49 f8       	lddpc	r8,8000d10c <udi_msc_process_trans+0xac>
8000d094:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000d098:	12 9b       	mov	r11,r9
8000d09a:	10 9c       	mov	r12,r8
8000d09c:	f0 1f 00 1d 	mcall	8000d110 <udi_msc_process_trans+0xb0>
8000d0a0:	18 98       	mov	r8,r12
8000d0a2:	ef 48 ff fc 	st.w	r7[-4],r8
8000d0a6:	c1 18       	rjmp	8000d0c8 <udi_msc_process_trans+0x68>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000d0a8:	49 78       	lddpc	r8,8000d104 <udi_msc_process_trans+0xa4>
8000d0aa:	90 08       	ld.sh	r8,r8[0x0]
8000d0ac:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000d0b0:	49 68       	lddpc	r8,8000d108 <udi_msc_process_trans+0xa8>
8000d0b2:	70 09       	ld.w	r9,r8[0x0]
8000d0b4:	49 68       	lddpc	r8,8000d10c <udi_msc_process_trans+0xac>
8000d0b6:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000d0ba:	12 9b       	mov	r11,r9
8000d0bc:	10 9c       	mov	r12,r8
8000d0be:	f0 1f 00 16 	mcall	8000d114 <udi_msc_process_trans+0xb4>
8000d0c2:	18 98       	mov	r8,r12
8000d0c4:	ef 48 ff fc 	st.w	r7[-4],r8
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
8000d0c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d0cc:	58 28       	cp.w	r8,2
8000d0ce:	c0 b0       	breq	8000d0e4 <udi_msc_process_trans+0x84>
8000d0d0:	58 38       	cp.w	r8,3
8000d0d2:	c0 60       	breq	8000d0de <udi_msc_process_trans+0x7e>
8000d0d4:	58 08       	cp.w	r8,0
8000d0d6:	c0 a1       	brne	8000d0ea <udi_msc_process_trans+0x8a>
	case CTRL_GOOD:
		udi_msc_sense_pass();
8000d0d8:	f0 1f 00 10 	mcall	8000d118 <udi_msc_process_trans+0xb8>
		break;
8000d0dc:	c0 98       	rjmp	8000d0ee <udi_msc_process_trans+0x8e>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000d0de:	f0 1f 00 10 	mcall	8000d11c <udi_msc_process_trans+0xbc>
		break;
8000d0e2:	c0 68       	rjmp	8000d0ee <udi_msc_process_trans+0x8e>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000d0e4:	f0 1f 00 0f 	mcall	8000d120 <udi_msc_process_trans+0xc0>
		break;
8000d0e8:	c0 38       	rjmp	8000d0ee <udi_msc_process_trans+0x8e>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
8000d0ea:	f0 1f 00 0f 	mcall	8000d124 <udi_msc_process_trans+0xc4>
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
8000d0ee:	f0 1f 00 0f 	mcall	8000d128 <udi_msc_process_trans+0xc8>
	return true;
8000d0f2:	30 18       	mov	r8,1
}
8000d0f4:	10 9c       	mov	r12,r8
8000d0f6:	2f fd       	sub	sp,-4
8000d0f8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d0fc:	00 00       	add	r0,r0
8000d0fe:	08 29       	rsub	r9,r4
8000d100:	00 00       	add	r0,r0
8000d102:	08 2a       	rsub	r10,r4
8000d104:	00 00       	add	r0,r0
8000d106:	08 30       	cp.w	r0,r4
8000d108:	00 00       	add	r0,r0
8000d10a:	08 2c       	rsub	r12,r4
8000d10c:	00 00       	add	r0,r0
8000d10e:	07 f0       	ld.ub	r0,r3[0x7]
8000d110:	80 00       	ld.sh	r0,r0[0x0]
8000d112:	c3 04       	brge	8000d172 <udi_msc_trans_block+0xe>
8000d114:	80 00       	ld.sh	r0,r0[0x0]
8000d116:	c3 78       	rjmp	8000d184 <udi_msc_trans_block+0x20>
8000d118:	80 00       	ld.sh	r0,r0[0x0]
8000d11a:	ca c0       	breq	8000d072 <udi_msc_process_trans+0x12>
8000d11c:	80 00       	ld.sh	r0,r0[0x0]
8000d11e:	ca fc       	rcall	8000d27c <udc_get_eof_conf+0x10>
8000d120:	80 00       	ld.sh	r0,r0[0x0]
8000d122:	ca e0       	breq	8000d07e <udi_msc_process_trans+0x1e>
8000d124:	80 00       	ld.sh	r0,r0[0x0]
8000d126:	cb 18       	rjmp	8000d288 <udc_get_eof_conf+0x1c>
8000d128:	80 00       	ld.sh	r0,r0[0x0]
8000d12a:	c9 4c       	rcall	8000d252 <udi_msc_trans_block+0xee>

8000d12c <udi_msc_trans_ack>:


static void udi_msc_trans_ack(udd_ep_status_t status, iram_size_t n,
		udd_ep_id_t ep)
{
8000d12c:	eb cd 40 80 	pushm	r7,lr
8000d130:	1a 97       	mov	r7,sp
8000d132:	20 3d       	sub	sp,12
8000d134:	ef 4c ff fc 	st.w	r7[-4],r12
8000d138:	ef 4b ff f8 	st.w	r7[-8],r11
8000d13c:	14 98       	mov	r8,r10
8000d13e:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
8000d142:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d146:	58 08       	cp.w	r8,0
8000d148:	5f 18       	srne	r8
8000d14a:	5c 58       	castu.b	r8
8000d14c:	48 49       	lddpc	r9,8000d15c <udi_msc_trans_ack+0x30>
8000d14e:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_ack_trans = true;
8000d150:	48 49       	lddpc	r9,8000d160 <udi_msc_trans_ack+0x34>
8000d152:	30 18       	mov	r8,1
8000d154:	b2 88       	st.b	r9[0x0],r8
}
8000d156:	2f dd       	sub	sp,-12
8000d158:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d15c:	00 00       	add	r0,r0
8000d15e:	10 27       	rsub	r7,r8
8000d160:	00 00       	add	r0,r0
8000d162:	01 64       	ld.uh	r4,--r0

8000d164 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
8000d164:	eb cd 40 80 	pushm	r7,lr
8000d168:	1a 97       	mov	r7,sp
8000d16a:	20 4d       	sub	sp,16
8000d16c:	18 98       	mov	r8,r12
8000d16e:	ef 4b ff f8 	st.w	r7[-8],r11
8000d172:	ef 4a ff f4 	st.w	r7[-12],r10
8000d176:	ef 49 ff f0 	st.w	r7[-16],r9
8000d17a:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!udi_msc_b_ack_trans)
8000d17e:	4a e8       	lddpc	r8,8000d234 <udi_msc_trans_block+0xd0>
8000d180:	11 88       	ld.ub	r8,r8[0x0]
8000d182:	5c 58       	castu.b	r8
8000d184:	ec 18 00 01 	eorl	r8,0x1
8000d188:	5c 58       	castu.b	r8
8000d18a:	c0 30       	breq	8000d190 <udi_msc_trans_block+0x2c>
		return false;	// No possible, transfer on going
8000d18c:	30 08       	mov	r8,0
8000d18e:	c4 f8       	rjmp	8000d22c <udi_msc_trans_block+0xc8>

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
8000d190:	4a 99       	lddpc	r9,8000d234 <udi_msc_trans_block+0xd0>
8000d192:	30 08       	mov	r8,0
8000d194:	b2 88       	st.b	r9[0x0],r8
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
8000d196:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d19a:	58 08       	cp.w	r8,0
8000d19c:	c0 40       	breq	8000d1a4 <udi_msc_trans_block+0x40>
8000d19e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d1a2:	c0 28       	rjmp	8000d1a6 <udi_msc_trans_block+0x42>
8000d1a4:	4a 58       	lddpc	r8,8000d238 <udi_msc_trans_block+0xd4>
8000d1a6:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000d1aa:	30 09       	mov	r9,0
8000d1ac:	f2 0a 18 00 	cp.b	r10,r9
8000d1b0:	c0 40       	breq	8000d1b8 <udi_msc_trans_block+0x54>
8000d1b2:	e0 6c 00 81 	mov	r12,129
8000d1b6:	c0 28       	rjmp	8000d1ba <udi_msc_trans_block+0x56>
8000d1b8:	30 2c       	mov	r12,2
8000d1ba:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d1be:	ee fa ff f8 	ld.w	r10,r7[-8]
8000d1c2:	30 0b       	mov	r11,0
8000d1c4:	f0 1f 00 1e 	mcall	8000d23c <udi_msc_trans_block+0xd8>
8000d1c8:	18 98       	mov	r8,r12
8000d1ca:	ec 18 00 01 	eorl	r8,0x1
8000d1ce:	5c 58       	castu.b	r8
8000d1d0:	c0 60       	breq	8000d1dc <udi_msc_trans_block+0x78>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
8000d1d2:	49 99       	lddpc	r9,8000d234 <udi_msc_trans_block+0xd0>
8000d1d4:	30 18       	mov	r8,1
8000d1d6:	b2 88       	st.b	r9[0x0],r8
		return false;
8000d1d8:	30 08       	mov	r8,0
8000d1da:	c2 98       	rjmp	8000d22c <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
8000d1dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d1e0:	58 08       	cp.w	r8,0
8000d1e2:	c1 d1       	brne	8000d21c <udi_msc_trans_block+0xb8>
		while (!udi_msc_b_ack_trans);
8000d1e4:	49 48       	lddpc	r8,8000d234 <udi_msc_trans_block+0xd0>
8000d1e6:	11 88       	ld.ub	r8,r8[0x0]
8000d1e8:	5c 58       	castu.b	r8
8000d1ea:	ec 18 00 01 	eorl	r8,0x1
8000d1ee:	5c 58       	castu.b	r8
8000d1f0:	cf a1       	brne	8000d1e4 <udi_msc_trans_block+0x80>
		if (udi_msc_b_abort_trans) {
8000d1f2:	49 48       	lddpc	r8,8000d240 <udi_msc_trans_block+0xdc>
8000d1f4:	11 88       	ld.ub	r8,r8[0x0]
8000d1f6:	5c 58       	castu.b	r8
8000d1f8:	c0 30       	breq	8000d1fe <udi_msc_trans_block+0x9a>
			return false;
8000d1fa:	30 08       	mov	r8,0
8000d1fc:	c1 88       	rjmp	8000d22c <udi_msc_trans_block+0xc8>
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
8000d1fe:	49 28       	lddpc	r8,8000d244 <udi_msc_trans_block+0xe0>
8000d200:	70 29       	ld.w	r9,r8[0x8]
8000d202:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d206:	10 19       	sub	r9,r8
8000d208:	48 f8       	lddpc	r8,8000d244 <udi_msc_trans_block+0xe0>
8000d20a:	91 29       	st.w	r8[0x8],r9
		return (!udi_msc_b_abort_trans);
8000d20c:	48 d8       	lddpc	r8,8000d240 <udi_msc_trans_block+0xdc>
8000d20e:	11 88       	ld.ub	r8,r8[0x0]
8000d210:	5c 58       	castu.b	r8
8000d212:	ec 18 00 01 	eorl	r8,0x1
8000d216:	5c 58       	castu.b	r8
8000d218:	5c 58       	castu.b	r8
8000d21a:	c0 98       	rjmp	8000d22c <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
8000d21c:	48 a8       	lddpc	r8,8000d244 <udi_msc_trans_block+0xe0>
8000d21e:	70 29       	ld.w	r9,r8[0x8]
8000d220:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d224:	10 19       	sub	r9,r8
8000d226:	48 88       	lddpc	r8,8000d244 <udi_msc_trans_block+0xe0>
8000d228:	91 29       	st.w	r8[0x8],r9
	return true;
8000d22a:	30 18       	mov	r8,1
}
8000d22c:	10 9c       	mov	r12,r8
8000d22e:	2f cd       	sub	sp,-16
8000d230:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d234:	00 00       	add	r0,r0
8000d236:	01 64       	ld.uh	r4,--r0
8000d238:	80 00       	ld.sh	r0,r0[0x0]
8000d23a:	d1 2c       	*unknown*
8000d23c:	80 00       	ld.sh	r0,r0[0x0]
8000d23e:	a6 bc       	st.b	r3[0x3],r12
8000d240:	00 00       	add	r0,r0
8000d242:	10 27       	rsub	r7,r8
8000d244:	00 00       	add	r0,r0
8000d246:	01 54       	ld.sh	r4,--r0
8000d248:	36 39       	mov	r9,99
8000d24a:	36 39       	mov	r9,99
8000d24c:	36 39       	mov	r9,99
8000d24e:	36 39       	mov	r9,99
8000d250:	36 39       	mov	r9,99
8000d252:	36 39       	mov	r9,99
8000d254:	00 00       	add	r0,r0
	...

8000d258 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
8000d258:	eb cd 40 80 	pushm	r7,lr
8000d25c:	1a 97       	mov	r7,sp
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
8000d25e:	48 38       	lddpc	r8,8000d268 <udc_get_string_serial_name+0x10>
	}
8000d260:	10 9c       	mov	r12,r8
8000d262:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d266:	00 00       	add	r0,r0
8000d268:	80 00       	ld.sh	r0,r0[0x0]
8000d26a:	d2 48       	*unknown*

8000d26c <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
8000d26c:	eb cd 40 80 	pushm	r7,lr
8000d270:	1a 97       	mov	r7,sp
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
8000d272:	48 b8       	lddpc	r8,8000d29c <udc_get_eof_conf+0x30>
8000d274:	70 08       	ld.w	r8,r8[0x0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000d276:	70 09       	ld.w	r9,r8[0x0]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000d278:	48 98       	lddpc	r8,8000d29c <udc_get_eof_conf+0x30>
8000d27a:	70 08       	ld.w	r8,r8[0x0]
8000d27c:	70 08       	ld.w	r8,r8[0x0]
8000d27e:	11 aa       	ld.ub	r10,r8[0x2]
8000d280:	a9 6a       	lsl	r10,0x8
8000d282:	11 b8       	ld.ub	r8,r8[0x3]
8000d284:	14 48       	or	r8,r10
8000d286:	5c 88       	casts.h	r8
8000d288:	5c 88       	casts.h	r8
8000d28a:	5c c8       	swap.bh	r8
8000d28c:	5c 88       	casts.h	r8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000d28e:	5c 78       	castu.h	r8
8000d290:	f2 08 00 08 	add	r8,r9,r8
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
8000d294:	10 9c       	mov	r12,r8
8000d296:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d29a:	00 00       	add	r0,r0
8000d29c:	00 00       	add	r0,r0
8000d29e:	08 54       	eor	r4,r4

8000d2a0 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
8000d2a0:	eb cd 40 80 	pushm	r7,lr
8000d2a4:	1a 97       	mov	r7,sp
8000d2a6:	20 3d       	sub	sp,12
8000d2a8:	ef 4c ff f8 	st.w	r7[-8],r12
8000d2ac:	16 98       	mov	r8,r11
8000d2ae:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
8000d2b2:	f0 1f 00 1d 	mcall	8000d324 <udc_next_desc_in_iface+0x84>
8000d2b6:	18 98       	mov	r8,r12
8000d2b8:	ef 48 ff fc 	st.w	r7[-4],r8
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000d2bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d2c0:	11 88       	ld.ub	r8,r8[0x0]
8000d2c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d2c6:	f2 08 00 08 	add	r8,r9,r8
8000d2ca:	ef 48 ff f8 	st.w	r7[-8],r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000d2ce:	c1 c8       	rjmp	8000d306 <udc_next_desc_in_iface+0x66>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
8000d2d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d2d4:	11 99       	ld.ub	r9,r8[0x1]
8000d2d6:	30 48       	mov	r8,4
8000d2d8:	f0 09 18 00 	cp.b	r9,r8
8000d2dc:	c1 d0       	breq	8000d316 <udc_next_desc_in_iface+0x76>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
8000d2de:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d2e2:	11 98       	ld.ub	r8,r8[0x1]
8000d2e4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d2e8:	f0 09 18 00 	cp.b	r9,r8
8000d2ec:	c0 41       	brne	8000d2f4 <udc_next_desc_in_iface+0x54>
			return desc; // Specific descriptor found
8000d2ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d2f2:	c1 48       	rjmp	8000d31a <udc_next_desc_in_iface+0x7a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000d2f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d2f8:	11 88       	ld.ub	r8,r8[0x0]
8000d2fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d2fe:	f2 08 00 08 	add	r8,r9,r8
8000d302:	ef 48 ff f8 	st.w	r7[-8],r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000d306:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d30a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d30e:	10 39       	cp.w	r9,r8
8000d310:	fe 9b ff e0 	brhi	8000d2d0 <udc_next_desc_in_iface+0x30>
8000d314:	c0 28       	rjmp	8000d318 <udc_next_desc_in_iface+0x78>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
8000d316:	d7 03       	nop
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
8000d318:	30 08       	mov	r8,0
}
8000d31a:	10 9c       	mov	r12,r8
8000d31c:	2f dd       	sub	sp,-12
8000d31e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d322:	00 00       	add	r0,r0
8000d324:	80 00       	ld.sh	r0,r0[0x0]
8000d326:	d2 6c       	*unknown*

8000d328 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
8000d328:	eb cd 40 80 	pushm	r7,lr
8000d32c:	1a 97       	mov	r7,sp
8000d32e:	20 3d       	sub	sp,12
8000d330:	18 99       	mov	r9,r12
8000d332:	16 98       	mov	r8,r11
8000d334:	ef 69 ff f8 	st.b	r7[-8],r9
8000d338:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
8000d33c:	4a 58       	lddpc	r8,8000d3d0 <udc_update_iface_desc+0xa8>
8000d33e:	11 88       	ld.ub	r8,r8[0x0]
8000d340:	58 08       	cp.w	r8,0
8000d342:	c0 31       	brne	8000d348 <udc_update_iface_desc+0x20>
		return false;
8000d344:	30 08       	mov	r8,0
8000d346:	c4 18       	rjmp	8000d3c8 <udc_update_iface_desc+0xa0>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000d348:	4a 38       	lddpc	r8,8000d3d4 <udc_update_iface_desc+0xac>
8000d34a:	70 08       	ld.w	r8,r8[0x0]
8000d34c:	70 08       	ld.w	r8,r8[0x0]
8000d34e:	11 c8       	ld.ub	r8,r8[0x4]
8000d350:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d354:	f0 09 18 00 	cp.b	r9,r8
8000d358:	c0 33       	brcs	8000d35e <udc_update_iface_desc+0x36>
		return false;
8000d35a:	30 08       	mov	r8,0
8000d35c:	c3 68       	rjmp	8000d3c8 <udc_update_iface_desc+0xa0>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
8000d35e:	49 e8       	lddpc	r8,8000d3d4 <udc_update_iface_desc+0xac>
8000d360:	70 08       	ld.w	r8,r8[0x0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000d362:	70 08       	ld.w	r8,r8[0x0]
8000d364:	10 99       	mov	r9,r8
8000d366:	49 d8       	lddpc	r8,8000d3d8 <udc_update_iface_desc+0xb0>
8000d368:	91 09       	st.w	r8[0x0],r9
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000d36a:	f0 1f 00 1d 	mcall	8000d3dc <udc_update_iface_desc+0xb4>
8000d36e:	18 98       	mov	r8,r12
8000d370:	ef 48 ff fc 	st.w	r7[-4],r8
	while (ptr_end_desc >
8000d374:	c2 28       	rjmp	8000d3b8 <udc_update_iface_desc+0x90>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000d376:	49 98       	lddpc	r8,8000d3d8 <udc_update_iface_desc+0xb0>
8000d378:	70 08       	ld.w	r8,r8[0x0]
8000d37a:	11 99       	ld.ub	r9,r8[0x1]
8000d37c:	30 48       	mov	r8,4
8000d37e:	f0 09 18 00 	cp.b	r9,r8
8000d382:	c1 31       	brne	8000d3a8 <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000d384:	49 58       	lddpc	r8,8000d3d8 <udc_update_iface_desc+0xb0>
8000d386:	70 08       	ld.w	r8,r8[0x0]
8000d388:	11 a8       	ld.ub	r8,r8[0x2]
8000d38a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d38e:	f0 09 18 00 	cp.b	r9,r8
8000d392:	c0 b1       	brne	8000d3a8 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
8000d394:	49 18       	lddpc	r8,8000d3d8 <udc_update_iface_desc+0xb0>
8000d396:	70 08       	ld.w	r8,r8[0x0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
					(setting_num ==
8000d398:	11 b8       	ld.ub	r8,r8[0x3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000d39a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d39e:	f0 09 18 00 	cp.b	r9,r8
8000d3a2:	c0 31       	brne	8000d3a8 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
8000d3a4:	30 18       	mov	r8,1
8000d3a6:	c1 18       	rjmp	8000d3c8 <udc_update_iface_desc+0xa0>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000d3a8:	48 c8       	lddpc	r8,8000d3d8 <udc_update_iface_desc+0xb0>
8000d3aa:	70 09       	ld.w	r9,r8[0x0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
8000d3ac:	48 b8       	lddpc	r8,8000d3d8 <udc_update_iface_desc+0xb0>
8000d3ae:	70 08       	ld.w	r8,r8[0x0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000d3b0:	11 88       	ld.ub	r8,r8[0x0]
8000d3b2:	10 09       	add	r9,r8
8000d3b4:	48 98       	lddpc	r8,8000d3d8 <udc_update_iface_desc+0xb0>
8000d3b6:	91 09       	st.w	r8[0x0],r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000d3b8:	48 88       	lddpc	r8,8000d3d8 <udc_update_iface_desc+0xb0>
8000d3ba:	70 08       	ld.w	r8,r8[0x0]
8000d3bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d3c0:	10 39       	cp.w	r9,r8
8000d3c2:	fe 9b ff da 	brhi	8000d376 <udc_update_iface_desc+0x4e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
8000d3c6:	30 08       	mov	r8,0
}
8000d3c8:	10 9c       	mov	r12,r8
8000d3ca:	2f dd       	sub	sp,-12
8000d3cc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d3d0:	00 00       	add	r0,r0
8000d3d2:	08 52       	eor	r2,r4
8000d3d4:	00 00       	add	r0,r0
8000d3d6:	08 54       	eor	r4,r4
8000d3d8:	00 00       	add	r0,r0
8000d3da:	08 58       	eor	r8,r4
8000d3dc:	80 00       	ld.sh	r0,r0[0x0]
8000d3de:	d2 6c       	*unknown*

8000d3e0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
8000d3e0:	eb cd 40 80 	pushm	r7,lr
8000d3e4:	1a 97       	mov	r7,sp
8000d3e6:	20 3d       	sub	sp,12
8000d3e8:	18 98       	mov	r8,r12
8000d3ea:	ef 68 ff f4 	st.b	r7[-12],r8
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000d3ee:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d3f2:	30 0b       	mov	r11,0
8000d3f4:	10 9c       	mov	r12,r8
8000d3f6:	f0 1f 00 25 	mcall	8000d488 <udc_iface_disable+0xa8>
8000d3fa:	18 98       	mov	r8,r12
8000d3fc:	ec 18 00 01 	eorl	r8,0x1
8000d400:	5c 58       	castu.b	r8
8000d402:	c0 30       	breq	8000d408 <udc_iface_disable+0x28>
		return false;
8000d404:	30 08       	mov	r8,0
8000d406:	c3 d8       	rjmp	8000d480 <udc_iface_disable+0xa0>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000d408:	4a 18       	lddpc	r8,8000d48c <udc_iface_disable+0xac>
8000d40a:	70 08       	ld.w	r8,r8[0x0]
8000d40c:	70 19       	ld.w	r9,r8[0x4]
8000d40e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d412:	a3 68       	lsl	r8,0x2
8000d414:	f2 08 00 08 	add	r8,r9,r8
8000d418:	70 08       	ld.w	r8,r8[0x0]
8000d41a:	ef 48 ff f8 	st.w	r7[-8],r8

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000d41e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d422:	70 38       	ld.w	r8,r8[0xc]
8000d424:	5d 18       	icall	r8
8000d426:	18 98       	mov	r8,r12
8000d428:	10 99       	mov	r9,r8
8000d42a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d42e:	12 9b       	mov	r11,r9
8000d430:	10 9c       	mov	r12,r8
8000d432:	f0 1f 00 16 	mcall	8000d488 <udc_iface_disable+0xa8>
8000d436:	18 98       	mov	r8,r12
8000d438:	ec 18 00 01 	eorl	r8,0x1
8000d43c:	5c 58       	castu.b	r8
8000d43e:	c0 30       	breq	8000d444 <udc_iface_disable+0x64>
		return false;
8000d440:	30 08       	mov	r8,0
8000d442:	c1 f8       	rjmp	8000d480 <udc_iface_disable+0xa0>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000d444:	49 38       	lddpc	r8,8000d490 <udc_iface_disable+0xb0>
8000d446:	70 08       	ld.w	r8,r8[0x0]
8000d448:	ef 48 ff fc 	st.w	r7[-4],r8
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000d44c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d450:	30 5b       	mov	r11,5
8000d452:	10 9c       	mov	r12,r8
8000d454:	f0 1f 00 10 	mcall	8000d494 <udc_iface_disable+0xb4>
8000d458:	18 98       	mov	r8,r12
8000d45a:	ef 48 ff fc 	st.w	r7[-4],r8
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
8000d45e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d462:	58 08       	cp.w	r8,0
8000d464:	c0 71       	brne	8000d472 <udc_iface_disable+0x92>
		}
	}
#endif

	// Disable interface
	udi_api->disable();
8000d466:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d46a:	70 18       	ld.w	r8,r8[0x4]
8000d46c:	5d 18       	icall	r8
	return true;
8000d46e:	30 18       	mov	r8,1
8000d470:	c0 88       	rjmp	8000d480 <udc_iface_disable+0xa0>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000d472:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d476:	11 a8       	ld.ub	r8,r8[0x2]
8000d478:	10 9c       	mov	r12,r8
8000d47a:	f0 1f 00 08 	mcall	8000d498 <udc_iface_disable+0xb8>
		}
8000d47e:	ce 7b       	rjmp	8000d44c <udc_iface_disable+0x6c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
8000d480:	10 9c       	mov	r12,r8
8000d482:	2f dd       	sub	sp,-12
8000d484:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d488:	80 00       	ld.sh	r0,r0[0x0]
8000d48a:	d3 28       	*unknown*
8000d48c:	00 00       	add	r0,r0
8000d48e:	08 54       	eor	r4,r4
8000d490:	00 00       	add	r0,r0
8000d492:	08 58       	eor	r8,r4
8000d494:	80 00       	ld.sh	r0,r0[0x0]
8000d496:	d2 a0       	acall	0xa8
8000d498:	80 00       	ld.sh	r0,r0[0x0]
8000d49a:	a3 9c       	lsr	r12,0x3

8000d49c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
8000d49c:	eb cd 40 80 	pushm	r7,lr
8000d4a0:	1a 97       	mov	r7,sp
8000d4a2:	20 3d       	sub	sp,12
8000d4a4:	18 99       	mov	r9,r12
8000d4a6:	16 98       	mov	r8,r11
8000d4a8:	ef 69 ff f8 	st.b	r7[-8],r9
8000d4ac:	ef 68 ff f4 	st.b	r7[-12],r8
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
8000d4b0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d4b4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d4b8:	12 9b       	mov	r11,r9
8000d4ba:	10 9c       	mov	r12,r8
8000d4bc:	f0 1f 00 25 	mcall	8000d550 <udc_iface_enable+0xb4>
8000d4c0:	18 98       	mov	r8,r12
8000d4c2:	ec 18 00 01 	eorl	r8,0x1
8000d4c6:	5c 58       	castu.b	r8
8000d4c8:	c0 30       	breq	8000d4ce <udc_iface_enable+0x32>
		return false;
8000d4ca:	30 08       	mov	r8,0
8000d4cc:	c3 e8       	rjmp	8000d548 <udc_iface_enable+0xac>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000d4ce:	4a 28       	lddpc	r8,8000d554 <udc_iface_enable+0xb8>
8000d4d0:	70 08       	ld.w	r8,r8[0x0]
8000d4d2:	ef 48 ff fc 	st.w	r7[-4],r8
8000d4d6:	c0 28       	rjmp	8000d4da <udc_iface_enable+0x3e>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
		}
	}
8000d4d8:	d7 03       	nop

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000d4da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d4de:	30 5b       	mov	r11,5
8000d4e0:	10 9c       	mov	r12,r8
8000d4e2:	f0 1f 00 1e 	mcall	8000d558 <udc_iface_enable+0xbc>
8000d4e6:	18 98       	mov	r8,r12
8000d4e8:	ef 48 ff fc 	st.w	r7[-4],r8
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
8000d4ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d4f0:	58 08       	cp.w	r8,0
8000d4f2:	c0 e1       	brne	8000d50e <udc_iface_enable+0x72>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000d4f4:	49 a8       	lddpc	r8,8000d55c <udc_iface_enable+0xc0>
8000d4f6:	70 08       	ld.w	r8,r8[0x0]
8000d4f8:	70 19       	ld.w	r9,r8[0x4]
8000d4fa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d4fe:	a3 68       	lsl	r8,0x2
8000d500:	f2 08 00 08 	add	r8,r9,r8
8000d504:	70 08       	ld.w	r8,r8[0x0]
8000d506:	70 08       	ld.w	r8,r8[0x0]
8000d508:	5d 18       	icall	r8
8000d50a:	18 98       	mov	r8,r12
8000d50c:	c1 e8       	rjmp	8000d548 <udc_iface_enable+0xac>
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
8000d50e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d512:	11 c9       	ld.ub	r9,r8[0x4]
8000d514:	a9 69       	lsl	r9,0x8
8000d516:	11 d8       	ld.ub	r8,r8[0x5]
8000d518:	12 48       	or	r8,r9
8000d51a:	5c 88       	casts.h	r8
8000d51c:	5c 88       	casts.h	r8
8000d51e:	5c c8       	swap.bh	r8
8000d520:	5c 88       	casts.h	r8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000d522:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
				ep_desc->bmAttributes,
8000d526:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d52a:	11 b8       	ld.ub	r8,r8[0x3]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000d52c:	10 99       	mov	r9,r8
8000d52e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d532:	11 a8       	ld.ub	r8,r8[0x2]
8000d534:	12 9b       	mov	r11,r9
8000d536:	10 9c       	mov	r12,r8
8000d538:	f0 1f 00 0a 	mcall	8000d560 <udc_iface_enable+0xc4>
8000d53c:	18 98       	mov	r8,r12
8000d53e:	ec 18 00 01 	eorl	r8,0x1
8000d542:	5c 58       	castu.b	r8
8000d544:	cc a0       	breq	8000d4d8 <udc_iface_enable+0x3c>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
8000d546:	30 08       	mov	r8,0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
8000d548:	10 9c       	mov	r12,r8
8000d54a:	2f dd       	sub	sp,-12
8000d54c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d550:	80 00       	ld.sh	r0,r0[0x0]
8000d552:	d3 28       	*unknown*
8000d554:	00 00       	add	r0,r0
8000d556:	08 58       	eor	r8,r4
8000d558:	80 00       	ld.sh	r0,r0[0x0]
8000d55a:	d2 a0       	acall	0xa8
8000d55c:	00 00       	add	r0,r0
8000d55e:	08 54       	eor	r4,r4
8000d560:	80 00       	ld.sh	r0,r0[0x0]
8000d562:	a0 4c       	st.h	r0[0x8],r12

8000d564 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
8000d564:	eb cd 40 80 	pushm	r7,lr
8000d568:	1a 97       	mov	r7,sp
	udd_enable();
8000d56a:	f0 1f 00 03 	mcall	8000d574 <udc_start+0x10>
}
8000d56e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d572:	00 00       	add	r0,r0
8000d574:	80 00       	ld.sh	r0,r0[0x0]
8000d576:	9d 78       	st.w	lr[0x1c],r8

8000d578 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
8000d578:	eb cd 40 80 	pushm	r7,lr
8000d57c:	1a 97       	mov	r7,sp
8000d57e:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000d580:	49 38       	lddpc	r8,8000d5cc <udc_reset+0x54>
8000d582:	11 88       	ld.ub	r8,r8[0x0]
8000d584:	58 08       	cp.w	r8,0
8000d586:	c1 80       	breq	8000d5b6 <udc_reset+0x3e>
		for (iface_num = 0;
8000d588:	30 08       	mov	r8,0
8000d58a:	ef 68 ff ff 	st.b	r7[-1],r8
8000d58e:	c0 b8       	rjmp	8000d5a4 <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
8000d590:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d594:	10 9c       	mov	r12,r8
8000d596:	f0 1f 00 0f 	mcall	8000d5d0 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000d59a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d59e:	2f f8       	sub	r8,-1
8000d5a0:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000d5a4:	48 c8       	lddpc	r8,8000d5d4 <udc_reset+0x5c>
8000d5a6:	70 08       	ld.w	r8,r8[0x0]
8000d5a8:	70 08       	ld.w	r8,r8[0x0]
8000d5aa:	11 c8       	ld.ub	r8,r8[0x4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000d5ac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d5b0:	f0 09 18 00 	cp.b	r9,r8
8000d5b4:	ce e3       	brcs	8000d590 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
8000d5b6:	48 69       	lddpc	r9,8000d5cc <udc_reset+0x54>
8000d5b8:	30 08       	mov	r8,0
8000d5ba:	b2 88       	st.b	r9[0x0],r8
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
8000d5bc:	48 79       	lddpc	r9,8000d5d8 <udc_reset+0x60>
8000d5be:	e0 68 01 00 	mov	r8,256
8000d5c2:	b2 08       	st.h	r9[0x0],r8
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
8000d5c4:	2f fd       	sub	sp,-4
8000d5c6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d5ca:	00 00       	add	r0,r0
8000d5cc:	00 00       	add	r0,r0
8000d5ce:	08 52       	eor	r2,r4
8000d5d0:	80 00       	ld.sh	r0,r0[0x0]
8000d5d2:	d3 e0       	acall	0xf8
8000d5d4:	00 00       	add	r0,r0
8000d5d6:	08 54       	eor	r4,r4
8000d5d8:	00 00       	add	r0,r0
8000d5da:	08 50       	eor	r0,r4

8000d5dc <udc_sof_notify>:

void udc_sof_notify(void)
{
8000d5dc:	eb cd 40 80 	pushm	r7,lr
8000d5e0:	1a 97       	mov	r7,sp
8000d5e2:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000d5e4:	49 88       	lddpc	r8,8000d644 <udc_sof_notify+0x68>
8000d5e6:	11 88       	ld.ub	r8,r8[0x0]
8000d5e8:	58 08       	cp.w	r8,0
8000d5ea:	c2 a0       	breq	8000d63e <udc_sof_notify+0x62>
		for (iface_num = 0;
8000d5ec:	30 08       	mov	r8,0
8000d5ee:	ef 68 ff ff 	st.b	r7[-1],r8
8000d5f2:	c1 d8       	rjmp	8000d62c <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
8000d5f4:	49 58       	lddpc	r8,8000d648 <udc_sof_notify+0x6c>
8000d5f6:	70 08       	ld.w	r8,r8[0x0]
8000d5f8:	70 19       	ld.w	r9,r8[0x4]
8000d5fa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d5fe:	a3 68       	lsl	r8,0x2
8000d600:	f2 08 00 08 	add	r8,r9,r8
8000d604:	70 08       	ld.w	r8,r8[0x0]
8000d606:	70 48       	ld.w	r8,r8[0x10]
8000d608:	58 08       	cp.w	r8,0
8000d60a:	c0 c0       	breq	8000d622 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
8000d60c:	48 f8       	lddpc	r8,8000d648 <udc_sof_notify+0x6c>
8000d60e:	70 08       	ld.w	r8,r8[0x0]
8000d610:	70 19       	ld.w	r9,r8[0x4]
8000d612:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d616:	a3 68       	lsl	r8,0x2
8000d618:	f2 08 00 08 	add	r8,r9,r8
8000d61c:	70 08       	ld.w	r8,r8[0x0]
8000d61e:	70 48       	ld.w	r8,r8[0x10]
8000d620:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000d622:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d626:	2f f8       	sub	r8,-1
8000d628:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000d62c:	48 78       	lddpc	r8,8000d648 <udc_sof_notify+0x6c>
8000d62e:	70 08       	ld.w	r8,r8[0x0]
8000d630:	70 08       	ld.w	r8,r8[0x0]
8000d632:	11 c8       	ld.ub	r8,r8[0x4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000d634:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d638:	f0 09 18 00 	cp.b	r9,r8
8000d63c:	cd c3       	brcs	8000d5f4 <udc_sof_notify+0x18>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
8000d63e:	2f fd       	sub	sp,-4
8000d640:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d644:	00 00       	add	r0,r0
8000d646:	08 52       	eor	r2,r4
8000d648:	00 00       	add	r0,r0
8000d64a:	08 54       	eor	r4,r4

8000d64c <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
8000d64c:	eb cd 40 80 	pushm	r7,lr
8000d650:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
8000d652:	48 98       	lddpc	r8,8000d674 <udc_req_std_dev_get_status+0x28>
8000d654:	90 39       	ld.sh	r9,r8[0x6]
8000d656:	30 28       	mov	r8,2
8000d658:	f0 09 19 00 	cp.h	r9,r8
8000d65c:	c0 30       	breq	8000d662 <udc_req_std_dev_get_status+0x16>
		return false;
8000d65e:	30 08       	mov	r8,0
8000d660:	c0 78       	rjmp	8000d66e <udc_req_std_dev_get_status+0x22>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
8000d662:	48 68       	lddpc	r8,8000d678 <udc_req_std_dev_get_status+0x2c>
8000d664:	30 2b       	mov	r11,2
8000d666:	10 9c       	mov	r12,r8
8000d668:	f0 1f 00 05 	mcall	8000d67c <udc_req_std_dev_get_status+0x30>
			sizeof(udc_device_status));
	return true;
8000d66c:	30 18       	mov	r8,1
}
8000d66e:	10 9c       	mov	r12,r8
8000d670:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d674:	00 00       	add	r0,r0
8000d676:	10 08       	add	r8,r8
8000d678:	00 00       	add	r0,r0
8000d67a:	08 50       	eor	r0,r4
8000d67c:	80 00       	ld.sh	r0,r0[0x0]
8000d67e:	a0 20       	st.h	r0[0x4],r0

8000d680 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
8000d680:	eb cd 40 80 	pushm	r7,lr
8000d684:	1a 97       	mov	r7,sp
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
8000d686:	49 18       	lddpc	r8,8000d6c8 <udc_req_std_ep_get_status+0x48>
8000d688:	90 39       	ld.sh	r9,r8[0x6]
8000d68a:	30 28       	mov	r8,2
8000d68c:	f0 09 19 00 	cp.h	r9,r8
8000d690:	c0 30       	breq	8000d696 <udc_req_std_ep_get_status+0x16>
		return false;
8000d692:	30 08       	mov	r8,0
8000d694:	c1 68       	rjmp	8000d6c0 <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000d696:	48 d8       	lddpc	r8,8000d6c8 <udc_req_std_ep_get_status+0x48>
8000d698:	90 28       	ld.sh	r8,r8[0x4]
8000d69a:	5c 58       	castu.b	r8
8000d69c:	10 9c       	mov	r12,r8
8000d69e:	f0 1f 00 0c 	mcall	8000d6cc <udc_req_std_ep_get_status+0x4c>
8000d6a2:	18 98       	mov	r8,r12
8000d6a4:	58 08       	cp.w	r8,0
8000d6a6:	c0 40       	breq	8000d6ae <udc_req_std_ep_get_status+0x2e>
8000d6a8:	e0 68 01 00 	mov	r8,256
8000d6ac:	c0 28       	rjmp	8000d6b0 <udc_req_std_ep_get_status+0x30>
8000d6ae:	30 08       	mov	r8,0
8000d6b0:	48 89       	lddpc	r9,8000d6d0 <udc_req_std_ep_get_status+0x50>
8000d6b2:	b2 08       	st.h	r9[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
8000d6b4:	48 78       	lddpc	r8,8000d6d0 <udc_req_std_ep_get_status+0x50>
8000d6b6:	30 2b       	mov	r11,2
8000d6b8:	10 9c       	mov	r12,r8
8000d6ba:	f0 1f 00 07 	mcall	8000d6d4 <udc_req_std_ep_get_status+0x54>
			sizeof(udc_ep_status));
	return true;
8000d6be:	30 18       	mov	r8,1
}
8000d6c0:	10 9c       	mov	r12,r8
8000d6c2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d6c6:	00 00       	add	r0,r0
8000d6c8:	00 00       	add	r0,r0
8000d6ca:	10 08       	add	r8,r8
8000d6cc:	80 00       	ld.sh	r0,r0[0x0]
8000d6ce:	a4 38       	st.h	r2[0x6],r8
8000d6d0:	00 00       	add	r0,r0
8000d6d2:	08 5e       	eor	lr,r4
8000d6d4:	80 00       	ld.sh	r0,r0[0x0]
8000d6d6:	a0 20       	st.h	r0[0x4],r0

8000d6d8 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
8000d6d8:	eb cd 40 80 	pushm	r7,lr
8000d6dc:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d6de:	48 d8       	lddpc	r8,8000d710 <udc_req_std_dev_clear_feature+0x38>
8000d6e0:	90 38       	ld.sh	r8,r8[0x6]
8000d6e2:	58 08       	cp.w	r8,0
8000d6e4:	c0 30       	breq	8000d6ea <udc_req_std_dev_clear_feature+0x12>
		return false;
8000d6e6:	30 08       	mov	r8,0
8000d6e8:	c1 08       	rjmp	8000d708 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000d6ea:	48 a8       	lddpc	r8,8000d710 <udc_req_std_dev_clear_feature+0x38>
8000d6ec:	90 19       	ld.sh	r9,r8[0x2]
8000d6ee:	30 18       	mov	r8,1
8000d6f0:	f0 09 19 00 	cp.h	r9,r8
8000d6f4:	c0 91       	brne	8000d706 <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
8000d6f6:	48 88       	lddpc	r8,8000d714 <udc_req_std_dev_clear_feature+0x3c>
8000d6f8:	90 08       	ld.sh	r8,r8[0x0]
8000d6fa:	a9 d8       	cbr	r8,0x9
8000d6fc:	5c 88       	casts.h	r8
8000d6fe:	48 69       	lddpc	r9,8000d714 <udc_req_std_dev_clear_feature+0x3c>
8000d700:	b2 08       	st.h	r9[0x0],r8
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
8000d702:	30 18       	mov	r8,1
8000d704:	c0 28       	rjmp	8000d708 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
8000d706:	30 08       	mov	r8,0
}
8000d708:	10 9c       	mov	r12,r8
8000d70a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d70e:	00 00       	add	r0,r0
8000d710:	00 00       	add	r0,r0
8000d712:	10 08       	add	r8,r8
8000d714:	00 00       	add	r0,r0
8000d716:	08 50       	eor	r0,r4

8000d718 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
8000d718:	eb cd 40 80 	pushm	r7,lr
8000d71c:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d71e:	48 c8       	lddpc	r8,8000d74c <udc_req_std_ep_clear_feature+0x34>
8000d720:	90 38       	ld.sh	r8,r8[0x6]
8000d722:	58 08       	cp.w	r8,0
8000d724:	c0 30       	breq	8000d72a <udc_req_std_ep_clear_feature+0x12>
		return false;
8000d726:	30 08       	mov	r8,0
8000d728:	c0 e8       	rjmp	8000d744 <udc_req_std_ep_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000d72a:	48 98       	lddpc	r8,8000d74c <udc_req_std_ep_clear_feature+0x34>
8000d72c:	90 18       	ld.sh	r8,r8[0x2]
8000d72e:	58 08       	cp.w	r8,0
8000d730:	c0 91       	brne	8000d742 <udc_req_std_ep_clear_feature+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000d732:	48 78       	lddpc	r8,8000d74c <udc_req_std_ep_clear_feature+0x34>
8000d734:	90 28       	ld.sh	r8,r8[0x4]
8000d736:	5c 58       	castu.b	r8
8000d738:	10 9c       	mov	r12,r8
8000d73a:	f0 1f 00 06 	mcall	8000d750 <udc_req_std_ep_clear_feature+0x38>
8000d73e:	18 98       	mov	r8,r12
8000d740:	c0 28       	rjmp	8000d744 <udc_req_std_ep_clear_feature+0x2c>
	}
	return false;
8000d742:	30 08       	mov	r8,0
}
8000d744:	10 9c       	mov	r12,r8
8000d746:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d74a:	00 00       	add	r0,r0
8000d74c:	00 00       	add	r0,r0
8000d74e:	10 08       	add	r8,r8
8000d750:	80 00       	ld.sh	r0,r0[0x0]
8000d752:	a5 7c       	lsl	r12,0x5

8000d754 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
8000d754:	eb cd 40 80 	pushm	r7,lr
8000d758:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d75a:	4a 78       	lddpc	r8,8000d7f4 <udc_req_std_dev_set_feature+0xa0>
8000d75c:	90 38       	ld.sh	r8,r8[0x6]
8000d75e:	58 08       	cp.w	r8,0
8000d760:	c0 30       	breq	8000d766 <udc_req_std_dev_set_feature+0x12>
		return false;
8000d762:	30 08       	mov	r8,0
8000d764:	c4 48       	rjmp	8000d7ec <udc_req_std_dev_set_feature+0x98>
	}

	switch (udd_g_ctrlreq.req.wValue) {
8000d766:	4a 48       	lddpc	r8,8000d7f4 <udc_req_std_dev_set_feature+0xa0>
8000d768:	90 18       	ld.sh	r8,r8[0x2]
8000d76a:	5c 78       	castu.h	r8
8000d76c:	58 18       	cp.w	r8,1
8000d76e:	c0 40       	breq	8000d776 <udc_req_std_dev_set_feature+0x22>
8000d770:	58 28       	cp.w	r8,2
8000d772:	c0 40       	breq	8000d77a <udc_req_std_dev_set_feature+0x26>
8000d774:	c3 b8       	rjmp	8000d7ea <udc_req_std_dev_set_feature+0x96>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
8000d776:	30 08       	mov	r8,0
8000d778:	c3 a8       	rjmp	8000d7ec <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
8000d77a:	f0 1f 00 20 	mcall	8000d7f8 <udc_req_std_dev_set_feature+0xa4>
8000d77e:	18 98       	mov	r8,r12
8000d780:	ec 18 00 01 	eorl	r8,0x1
8000d784:	5c 58       	castu.b	r8
8000d786:	c2 f1       	brne	8000d7e4 <udc_req_std_dev_set_feature+0x90>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
8000d788:	49 b8       	lddpc	r8,8000d7f4 <udc_req_std_dev_set_feature+0xa0>
8000d78a:	90 28       	ld.sh	r8,r8[0x4]
8000d78c:	5c 78       	castu.h	r8
8000d78e:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d792:	c2 b1       	brne	8000d7e8 <udc_req_std_dev_set_feature+0x94>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
8000d794:	f0 1f 00 1a 	mcall	8000d7fc <udc_req_std_dev_set_feature+0xa8>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
8000d798:	49 78       	lddpc	r8,8000d7f4 <udc_req_std_dev_set_feature+0xa0>
8000d79a:	90 28       	ld.sh	r8,r8[0x4]
8000d79c:	5c 78       	castu.h	r8
8000d79e:	a9 88       	lsr	r8,0x8
8000d7a0:	5c 88       	casts.h	r8
8000d7a2:	5c 78       	castu.h	r8
8000d7a4:	58 28       	cp.w	r8,2
8000d7a6:	c1 00       	breq	8000d7c6 <udc_req_std_dev_set_feature+0x72>
8000d7a8:	e0 89 00 05 	brgt	8000d7b2 <udc_req_std_dev_set_feature+0x5e>
8000d7ac:	58 18       	cp.w	r8,1
8000d7ae:	c0 70       	breq	8000d7bc <udc_req_std_dev_set_feature+0x68>
8000d7b0:	c1 d8       	rjmp	8000d7ea <udc_req_std_dev_set_feature+0x96>
8000d7b2:	58 38       	cp.w	r8,3
8000d7b4:	c0 e0       	breq	8000d7d0 <udc_req_std_dev_set_feature+0x7c>
8000d7b6:	58 48       	cp.w	r8,4
8000d7b8:	c1 10       	breq	8000d7da <udc_req_std_dev_set_feature+0x86>
8000d7ba:	c1 88       	rjmp	8000d7ea <udc_req_std_dev_set_feature+0x96>
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
8000d7bc:	48 e8       	lddpc	r8,8000d7f4 <udc_req_std_dev_set_feature+0xa0>
8000d7be:	49 19       	lddpc	r9,8000d800 <udc_req_std_dev_set_feature+0xac>
8000d7c0:	91 49       	st.w	r8[0x10],r9
			return true;
8000d7c2:	30 18       	mov	r8,1
8000d7c4:	c1 48       	rjmp	8000d7ec <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
8000d7c6:	48 c8       	lddpc	r8,8000d7f4 <udc_req_std_dev_set_feature+0xa0>
8000d7c8:	48 f9       	lddpc	r9,8000d804 <udc_req_std_dev_set_feature+0xb0>
8000d7ca:	91 49       	st.w	r8[0x10],r9
			return true;
8000d7cc:	30 18       	mov	r8,1
8000d7ce:	c0 f8       	rjmp	8000d7ec <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
8000d7d0:	48 98       	lddpc	r8,8000d7f4 <udc_req_std_dev_set_feature+0xa0>
8000d7d2:	48 e9       	lddpc	r9,8000d808 <udc_req_std_dev_set_feature+0xb4>
8000d7d4:	91 49       	st.w	r8[0x10],r9
			return true;
8000d7d6:	30 18       	mov	r8,1
8000d7d8:	c0 a8       	rjmp	8000d7ec <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
8000d7da:	48 78       	lddpc	r8,8000d7f4 <udc_req_std_dev_set_feature+0xa0>
8000d7dc:	48 c9       	lddpc	r9,8000d80c <udc_req_std_dev_set_feature+0xb8>
8000d7de:	91 49       	st.w	r8[0x10],r9
			return true;
8000d7e0:	30 18       	mov	r8,1
8000d7e2:	c0 58       	rjmp	8000d7ec <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
			break;
8000d7e4:	d7 03       	nop
8000d7e6:	c0 28       	rjmp	8000d7ea <udc_req_std_dev_set_feature+0x96>
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
			break;
8000d7e8:	d7 03       	nop
		break;
#endif
	default:
		break;
	}
	return false;
8000d7ea:	30 08       	mov	r8,0
}
8000d7ec:	10 9c       	mov	r12,r8
8000d7ee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d7f2:	00 00       	add	r0,r0
8000d7f4:	00 00       	add	r0,r0
8000d7f6:	10 08       	add	r8,r8
8000d7f8:	80 00       	ld.sh	r0,r0[0x0]
8000d7fa:	9f 84       	st.w	pc[0x20],r4
8000d7fc:	80 00       	ld.sh	r0,r0[0x0]
8000d7fe:	d5 78       	*unknown*
8000d800:	80 00       	ld.sh	r0,r0[0x0]
8000d802:	a9 40       	asr	r0,0x8
8000d804:	80 00       	ld.sh	r0,r0[0x0]
8000d806:	a9 6a       	lsl	r10,0x8
8000d808:	80 00       	ld.sh	r0,r0[0x0]
8000d80a:	a9 94       	lsr	r4,0x9
8000d80c:	80 00       	ld.sh	r0,r0[0x0]
8000d80e:	a9 b0       	sbr	r0,0x9

8000d810 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
8000d810:	eb cd 40 80 	pushm	r7,lr
8000d814:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d816:	48 f8       	lddpc	r8,8000d850 <udc_req_std_ep_set_feature+0x40>
8000d818:	90 38       	ld.sh	r8,r8[0x6]
8000d81a:	58 08       	cp.w	r8,0
8000d81c:	c0 30       	breq	8000d822 <udc_req_std_ep_set_feature+0x12>
		return false;
8000d81e:	30 08       	mov	r8,0
8000d820:	c1 48       	rjmp	8000d848 <udc_req_std_ep_set_feature+0x38>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000d822:	48 c8       	lddpc	r8,8000d850 <udc_req_std_ep_set_feature+0x40>
8000d824:	90 18       	ld.sh	r8,r8[0x2]
8000d826:	58 08       	cp.w	r8,0
8000d828:	c0 f1       	brne	8000d846 <udc_req_std_ep_set_feature+0x36>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
8000d82a:	48 a8       	lddpc	r8,8000d850 <udc_req_std_ep_set_feature+0x40>
8000d82c:	90 28       	ld.sh	r8,r8[0x4]
8000d82e:	5c 58       	castu.b	r8
8000d830:	10 9c       	mov	r12,r8
8000d832:	f0 1f 00 09 	mcall	8000d854 <udc_req_std_ep_set_feature+0x44>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000d836:	48 78       	lddpc	r8,8000d850 <udc_req_std_ep_set_feature+0x40>
8000d838:	90 28       	ld.sh	r8,r8[0x4]
8000d83a:	5c 58       	castu.b	r8
8000d83c:	10 9c       	mov	r12,r8
8000d83e:	f0 1f 00 07 	mcall	8000d858 <udc_req_std_ep_set_feature+0x48>
8000d842:	18 98       	mov	r8,r12
8000d844:	c0 28       	rjmp	8000d848 <udc_req_std_ep_set_feature+0x38>
	}
	return false;
8000d846:	30 08       	mov	r8,0
}
8000d848:	10 9c       	mov	r12,r8
8000d84a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d84e:	00 00       	add	r0,r0
8000d850:	00 00       	add	r0,r0
8000d852:	10 08       	add	r8,r8
8000d854:	80 00       	ld.sh	r0,r0[0x0]
8000d856:	a7 e0       	*unknown*
8000d858:	80 00       	ld.sh	r0,r0[0x0]
8000d85a:	a4 68       	st.h	r2[0xc],r8

8000d85c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
8000d85c:	eb cd 40 80 	pushm	r7,lr
8000d860:	1a 97       	mov	r7,sp
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
8000d862:	48 68       	lddpc	r8,8000d878 <udc_valid_address+0x1c>
8000d864:	90 18       	ld.sh	r8,r8[0x2]
8000d866:	5c 58       	castu.b	r8
8000d868:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000d86c:	10 9c       	mov	r12,r8
8000d86e:	f0 1f 00 04 	mcall	8000d87c <udc_valid_address+0x20>
}
8000d872:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d876:	00 00       	add	r0,r0
8000d878:	00 00       	add	r0,r0
8000d87a:	10 08       	add	r8,r8
8000d87c:	80 00       	ld.sh	r0,r0[0x0]
8000d87e:	9f a0       	st.w	pc[0x28],r0

8000d880 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
8000d880:	eb cd 40 80 	pushm	r7,lr
8000d884:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d886:	48 78       	lddpc	r8,8000d8a0 <udc_req_std_dev_set_address+0x20>
8000d888:	90 38       	ld.sh	r8,r8[0x6]
8000d88a:	58 08       	cp.w	r8,0
8000d88c:	c0 30       	breq	8000d892 <udc_req_std_dev_set_address+0x12>
		return false;
8000d88e:	30 08       	mov	r8,0
8000d890:	c0 58       	rjmp	8000d89a <udc_req_std_dev_set_address+0x1a>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000d892:	48 48       	lddpc	r8,8000d8a0 <udc_req_std_dev_set_address+0x20>
8000d894:	48 49       	lddpc	r9,8000d8a4 <udc_req_std_dev_set_address+0x24>
8000d896:	91 49       	st.w	r8[0x10],r9
	return true;
8000d898:	30 18       	mov	r8,1
}
8000d89a:	10 9c       	mov	r12,r8
8000d89c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d8a0:	00 00       	add	r0,r0
8000d8a2:	10 08       	add	r8,r8
8000d8a4:	80 00       	ld.sh	r0,r0[0x0]
8000d8a6:	d8 5c       	*unknown*

8000d8a8 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
8000d8a8:	eb cd 40 80 	pushm	r7,lr
8000d8ac:	1a 97       	mov	r7,sp
8000d8ae:	20 3d       	sub	sp,12
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
8000d8b0:	30 08       	mov	r8,0
8000d8b2:	ef 68 ff ff 	st.b	r7[-1],r8

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
8000d8b6:	4b 68       	lddpc	r8,8000d98c <udc_req_std_dev_get_str_desc+0xe4>
8000d8b8:	90 18       	ld.sh	r8,r8[0x2]
8000d8ba:	5c 78       	castu.h	r8
8000d8bc:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d8c0:	58 18       	cp.w	r8,1
8000d8c2:	c1 00       	breq	8000d8e2 <udc_req_std_dev_get_str_desc+0x3a>
8000d8c4:	e0 89 00 05 	brgt	8000d8ce <udc_req_std_dev_get_str_desc+0x26>
8000d8c8:	58 08       	cp.w	r8,0
8000d8ca:	c0 70       	breq	8000d8d8 <udc_req_std_dev_get_str_desc+0x30>
8000d8cc:	c2 28       	rjmp	8000d910 <udc_req_std_dev_get_str_desc+0x68>
8000d8ce:	58 28       	cp.w	r8,2
8000d8d0:	c1 00       	breq	8000d8f0 <udc_req_std_dev_get_str_desc+0x48>
8000d8d2:	58 38       	cp.w	r8,3
8000d8d4:	c1 50       	breq	8000d8fe <udc_req_std_dev_get_str_desc+0x56>
8000d8d6:	c1 d8       	rjmp	8000d910 <udc_req_std_dev_get_str_desc+0x68>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
8000d8d8:	30 4b       	mov	r11,4
8000d8da:	4a ec       	lddpc	r12,8000d990 <udc_req_std_dev_get_str_desc+0xe8>
8000d8dc:	f0 1f 00 2e 	mcall	8000d994 <udc_req_std_dev_get_str_desc+0xec>
				sizeof(udc_string_desc_languageid));
		break;
8000d8e0:	c1 a8       	rjmp	8000d914 <udc_req_std_dev_get_str_desc+0x6c>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
8000d8e2:	30 78       	mov	r8,7
8000d8e4:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_manufacturer_name;
8000d8e8:	4a c8       	lddpc	r8,8000d998 <udc_req_std_dev_get_str_desc+0xf0>
8000d8ea:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000d8ee:	c1 38       	rjmp	8000d914 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
8000d8f0:	30 78       	mov	r8,7
8000d8f2:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_product_name;
8000d8f6:	4a a8       	lddpc	r8,8000d99c <udc_req_std_dev_get_str_desc+0xf4>
8000d8f8:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000d8fc:	c0 c8       	rjmp	8000d914 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
8000d8fe:	30 c8       	mov	r8,12
8000d900:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_get_string_serial_name();
8000d904:	f0 1f 00 27 	mcall	8000d9a0 <udc_req_std_dev_get_str_desc+0xf8>
8000d908:	18 98       	mov	r8,r12
8000d90a:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000d90e:	c0 38       	rjmp	8000d914 <udc_req_std_dev_get_str_desc+0x6c>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
8000d910:	30 08       	mov	r8,0
8000d912:	c3 88       	rjmp	8000d982 <udc_req_std_dev_get_str_desc+0xda>
	}

	if (str_length) {
8000d914:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d918:	30 08       	mov	r8,0
8000d91a:	f0 09 18 00 	cp.b	r9,r8
8000d91e:	c3 10       	breq	8000d980 <udc_req_std_dev_get_str_desc+0xd8>
		for(i = 0; i < str_length; i++) {
8000d920:	30 08       	mov	r8,0
8000d922:	ef 68 ff f7 	st.b	r7[-9],r8
8000d926:	c1 88       	rjmp	8000d956 <udc_req_std_dev_get_str_desc+0xae>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
8000d928:	ef 3b ff f7 	ld.ub	r11,r7[-9]
8000d92c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000d930:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d934:	f2 08 00 08 	add	r8,r9,r8
8000d938:	11 88       	ld.ub	r8,r8[0x0]
8000d93a:	5c c8       	swap.bh	r8
8000d93c:	5c 88       	casts.h	r8
8000d93e:	10 99       	mov	r9,r8
8000d940:	49 9a       	lddpc	r10,8000d9a4 <udc_req_std_dev_get_str_desc+0xfc>
8000d942:	f6 08 15 01 	lsl	r8,r11,0x1
8000d946:	f4 08 00 08 	add	r8,r10,r8
8000d94a:	b0 19       	st.h	r8[0x2],r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
8000d94c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000d950:	2f f8       	sub	r8,-1
8000d952:	ef 68 ff f7 	st.b	r7[-9],r8
8000d956:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000d95a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d95e:	f0 09 18 00 	cp.b	r9,r8
8000d962:	ce 33       	brcs	8000d928 <udc_req_std_dev_get_str_desc+0x80>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
8000d964:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d968:	2f f8       	sub	r8,-1
8000d96a:	5c 58       	castu.b	r8
8000d96c:	a1 78       	lsl	r8,0x1
8000d96e:	5c 58       	castu.b	r8
8000d970:	48 d9       	lddpc	r9,8000d9a4 <udc_req_std_dev_get_str_desc+0xfc>
8000d972:	b2 88       	st.b	r9[0x0],r8
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
8000d974:	48 c8       	lddpc	r8,8000d9a4 <udc_req_std_dev_get_str_desc+0xfc>
8000d976:	11 88       	ld.ub	r8,r8[0x0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
8000d978:	10 9b       	mov	r11,r8
8000d97a:	48 bc       	lddpc	r12,8000d9a4 <udc_req_std_dev_get_str_desc+0xfc>
8000d97c:	f0 1f 00 06 	mcall	8000d994 <udc_req_std_dev_get_str_desc+0xec>
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
8000d980:	30 18       	mov	r8,1
}
8000d982:	10 9c       	mov	r12,r8
8000d984:	2f dd       	sub	sp,-12
8000d986:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d98a:	00 00       	add	r0,r0
8000d98c:	00 00       	add	r0,r0
8000d98e:	10 08       	add	r8,r8
8000d990:	00 00       	add	r0,r0
8000d992:	02 14       	sub	r4,r1
8000d994:	80 00       	ld.sh	r0,r0[0x0]
8000d996:	a0 20       	st.h	r0[0x4],r0
8000d998:	00 00       	add	r0,r0
8000d99a:	02 18       	sub	r8,r1
8000d99c:	00 00       	add	r0,r0
8000d99e:	02 20       	rsub	r0,r1
8000d9a0:	80 00       	ld.sh	r0,r0[0x0]
8000d9a2:	d2 58       	*unknown*
8000d9a4:	00 00       	add	r0,r0
8000d9a6:	02 28       	rsub	r8,r1

8000d9a8 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
8000d9a8:	eb cd 40 80 	pushm	r7,lr
8000d9ac:	1a 97       	mov	r7,sp
8000d9ae:	20 1d       	sub	sp,4
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000d9b0:	fe f8 02 40 	ld.w	r8,pc[576]
8000d9b4:	90 18       	ld.sh	r8,r8[0x2]
8000d9b6:	ef 68 ff ff 	st.b	r7[-1],r8

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
8000d9ba:	fe f8 02 36 	ld.w	r8,pc[566]
8000d9be:	90 18       	ld.sh	r8,r8[0x2]
8000d9c0:	5c 78       	castu.h	r8
8000d9c2:	a9 88       	lsr	r8,0x8
8000d9c4:	5c 88       	casts.h	r8
8000d9c6:	5c 58       	castu.b	r8
8000d9c8:	58 38       	cp.w	r8,3
8000d9ca:	e0 80 00 f7 	breq	8000dbb8 <udc_req_std_dev_get_descriptor+0x210>
8000d9ce:	e0 89 00 07 	brgt	8000d9dc <udc_req_std_dev_get_descriptor+0x34>
8000d9d2:	58 18       	cp.w	r8,1
8000d9d4:	c0 b0       	breq	8000d9ea <udc_req_std_dev_get_descriptor+0x42>
8000d9d6:	58 28       	cp.w	r8,2
8000d9d8:	c2 70       	breq	8000da26 <udc_req_std_dev_get_descriptor+0x7e>
8000d9da:	cf 88       	rjmp	8000dbca <udc_req_std_dev_get_descriptor+0x222>
8000d9dc:	58 68       	cp.w	r8,6
8000d9de:	e0 80 00 82 	breq	8000dae2 <udc_req_std_dev_get_descriptor+0x13a>
8000d9e2:	58 78       	cp.w	r8,7
8000d9e4:	e0 80 00 8a 	breq	8000daf8 <udc_req_std_dev_get_descriptor+0x150>
8000d9e8:	cf 18       	rjmp	8000dbca <udc_req_std_dev_get_descriptor+0x222>
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
8000d9ea:	f0 1f 00 83 	mcall	8000dbf4 <udc_req_std_dev_get_descriptor+0x24c>
8000d9ee:	18 98       	mov	r8,r12
8000d9f0:	ec 18 00 01 	eorl	r8,0x1
8000d9f4:	5c 58       	castu.b	r8
8000d9f6:	c0 d0       	breq	8000da10 <udc_req_std_dev_get_descriptor+0x68>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
8000d9f8:	fe f8 02 00 	ld.w	r8,pc[512]
8000d9fc:	70 28       	ld.w	r8,r8[0x8]
8000d9fe:	11 88       	ld.ub	r8,r8[0x0]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
8000da00:	10 99       	mov	r9,r8
8000da02:	4f e8       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000da04:	70 28       	ld.w	r8,r8[0x8]
8000da06:	12 9b       	mov	r11,r9
8000da08:	10 9c       	mov	r12,r8
8000da0a:	f0 1f 00 7d 	mcall	8000dbfc <udc_req_std_dev_get_descriptor+0x254>
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000da0e:	ce 18       	rjmp	8000dbd0 <udc_req_std_dev_get_descriptor+0x228>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
8000da10:	4f a8       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000da12:	70 08       	ld.w	r8,r8[0x0]
8000da14:	11 88       	ld.ub	r8,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
8000da16:	10 99       	mov	r9,r8
8000da18:	4f 88       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000da1a:	70 08       	ld.w	r8,r8[0x0]
8000da1c:	12 9b       	mov	r11,r9
8000da1e:	10 9c       	mov	r12,r8
8000da20:	f0 1f 00 77 	mcall	8000dbfc <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000da24:	cd 68       	rjmp	8000dbd0 <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
8000da26:	f0 1f 00 74 	mcall	8000dbf4 <udc_req_std_dev_get_descriptor+0x24c>
8000da2a:	18 98       	mov	r8,r12
8000da2c:	58 08       	cp.w	r8,0
8000da2e:	c2 b0       	breq	8000da84 <udc_req_std_dev_get_descriptor+0xdc>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000da30:	4f 28       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000da32:	70 28       	ld.w	r8,r8[0x8]
8000da34:	f1 38 00 11 	ld.ub	r8,r8[17]
8000da38:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000da3c:	f0 09 18 00 	cp.b	r9,r8
8000da40:	c0 33       	brcs	8000da46 <udc_req_std_dev_get_descriptor+0x9e>
					bNumConfigurations) {
				return false;
8000da42:	30 08       	mov	r8,0
8000da44:	cd 28       	rjmp	8000dbe8 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000da46:	4e d8       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000da48:	70 49       	ld.w	r9,r8[0x10]
8000da4a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000da4e:	a3 78       	lsl	r8,0x3
8000da50:	f2 08 00 08 	add	r8,r9,r8
8000da54:	70 08       	ld.w	r8,r8[0x0]
8000da56:	11 a9       	ld.ub	r9,r8[0x2]
8000da58:	a9 69       	lsl	r9,0x8
8000da5a:	11 b8       	ld.ub	r8,r8[0x3]
8000da5c:	12 48       	or	r8,r9
8000da5e:	5c 88       	casts.h	r8
8000da60:	5c 88       	casts.h	r8
8000da62:	5c c8       	swap.bh	r8
8000da64:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000da66:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000da6a:	4e 48       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000da6c:	70 4a       	ld.w	r10,r8[0x10]
8000da6e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000da72:	a3 78       	lsl	r8,0x3
8000da74:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000da78:	70 08       	ld.w	r8,r8[0x0]
8000da7a:	12 9b       	mov	r11,r9
8000da7c:	10 9c       	mov	r12,r8
8000da7e:	f0 1f 00 60 	mcall	8000dbfc <udc_req_std_dev_get_descriptor+0x254>
8000da82:	c2 a8       	rjmp	8000dad6 <udc_req_std_dev_get_descriptor+0x12e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000da84:	4d d8       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000da86:	70 08       	ld.w	r8,r8[0x0]
8000da88:	f1 38 00 11 	ld.ub	r8,r8[17]
8000da8c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000da90:	f0 09 18 00 	cp.b	r9,r8
8000da94:	c0 33       	brcs	8000da9a <udc_req_std_dev_get_descriptor+0xf2>
					bNumConfigurations) {
				return false;
8000da96:	30 08       	mov	r8,0
8000da98:	ca 88       	rjmp	8000dbe8 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000da9a:	4d 88       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000da9c:	70 19       	ld.w	r9,r8[0x4]
8000da9e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000daa2:	a3 78       	lsl	r8,0x3
8000daa4:	f2 08 00 08 	add	r8,r9,r8
8000daa8:	70 08       	ld.w	r8,r8[0x0]
8000daaa:	11 a9       	ld.ub	r9,r8[0x2]
8000daac:	a9 69       	lsl	r9,0x8
8000daae:	11 b8       	ld.ub	r8,r8[0x3]
8000dab0:	12 48       	or	r8,r9
8000dab2:	5c 88       	casts.h	r8
8000dab4:	5c 88       	casts.h	r8
8000dab6:	5c c8       	swap.bh	r8
8000dab8:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000daba:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000dabe:	4c f8       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000dac0:	70 1a       	ld.w	r10,r8[0x4]
8000dac2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dac6:	a3 78       	lsl	r8,0x3
8000dac8:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000dacc:	70 08       	ld.w	r8,r8[0x0]
8000dace:	12 9b       	mov	r11,r9
8000dad0:	10 9c       	mov	r12,r8
8000dad2:	f0 1f 00 4b 	mcall	8000dbfc <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000dad6:	4c 78       	lddpc	r8,8000dbf0 <udc_req_std_dev_get_descriptor+0x248>
8000dad8:	70 28       	ld.w	r8,r8[0x8]
8000dada:	10 99       	mov	r9,r8
8000dadc:	30 28       	mov	r8,2
8000dade:	b2 98       	st.b	r9[0x1],r8
				USB_DT_CONFIGURATION;
		break;
8000dae0:	c7 88       	rjmp	8000dbd0 <udc_req_std_dev_get_descriptor+0x228>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
8000dae2:	4c 68       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000dae4:	70 38       	ld.w	r8,r8[0xc]
8000dae6:	11 88       	ld.ub	r8,r8[0x0]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
8000dae8:	10 99       	mov	r9,r8
8000daea:	4c 48       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000daec:	70 38       	ld.w	r8,r8[0xc]
8000daee:	12 9b       	mov	r11,r9
8000daf0:	10 9c       	mov	r12,r8
8000daf2:	f0 1f 00 43 	mcall	8000dbfc <udc_req_std_dev_get_descriptor+0x254>
				udc_config.qualifier->bLength);
		break;
8000daf6:	c6 d8       	rjmp	8000dbd0 <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
8000daf8:	f0 1f 00 3f 	mcall	8000dbf4 <udc_req_std_dev_get_descriptor+0x24c>
8000dafc:	18 98       	mov	r8,r12
8000dafe:	ec 18 00 01 	eorl	r8,0x1
8000db02:	5c 58       	castu.b	r8
8000db04:	c2 b0       	breq	8000db5a <udc_req_std_dev_get_descriptor+0x1b2>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000db06:	4b d8       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000db08:	70 28       	ld.w	r8,r8[0x8]
8000db0a:	f1 38 00 11 	ld.ub	r8,r8[17]
8000db0e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000db12:	f0 09 18 00 	cp.b	r9,r8
8000db16:	c0 33       	brcs	8000db1c <udc_req_std_dev_get_descriptor+0x174>
					bNumConfigurations) {
				return false;
8000db18:	30 08       	mov	r8,0
8000db1a:	c6 78       	rjmp	8000dbe8 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000db1c:	4b 78       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000db1e:	70 49       	ld.w	r9,r8[0x10]
8000db20:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000db24:	a3 78       	lsl	r8,0x3
8000db26:	f2 08 00 08 	add	r8,r9,r8
8000db2a:	70 08       	ld.w	r8,r8[0x0]
8000db2c:	11 a9       	ld.ub	r9,r8[0x2]
8000db2e:	a9 69       	lsl	r9,0x8
8000db30:	11 b8       	ld.ub	r8,r8[0x3]
8000db32:	12 48       	or	r8,r9
8000db34:	5c 88       	casts.h	r8
8000db36:	5c 88       	casts.h	r8
8000db38:	5c c8       	swap.bh	r8
8000db3a:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000db3c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000db40:	4a e8       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000db42:	70 4a       	ld.w	r10,r8[0x10]
8000db44:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000db48:	a3 78       	lsl	r8,0x3
8000db4a:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000db4e:	70 08       	ld.w	r8,r8[0x0]
8000db50:	12 9b       	mov	r11,r9
8000db52:	10 9c       	mov	r12,r8
8000db54:	f0 1f 00 2a 	mcall	8000dbfc <udc_req_std_dev_get_descriptor+0x254>
8000db58:	c2 a8       	rjmp	8000dbac <udc_req_std_dev_get_descriptor+0x204>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000db5a:	4a 88       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000db5c:	70 08       	ld.w	r8,r8[0x0]
8000db5e:	f1 38 00 11 	ld.ub	r8,r8[17]
8000db62:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000db66:	f0 09 18 00 	cp.b	r9,r8
8000db6a:	c0 33       	brcs	8000db70 <udc_req_std_dev_get_descriptor+0x1c8>
					bNumConfigurations) {
				return false;
8000db6c:	30 08       	mov	r8,0
8000db6e:	c3 d8       	rjmp	8000dbe8 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000db70:	4a 28       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000db72:	70 19       	ld.w	r9,r8[0x4]
8000db74:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000db78:	a3 78       	lsl	r8,0x3
8000db7a:	f2 08 00 08 	add	r8,r9,r8
8000db7e:	70 08       	ld.w	r8,r8[0x0]
8000db80:	11 a9       	ld.ub	r9,r8[0x2]
8000db82:	a9 69       	lsl	r9,0x8
8000db84:	11 b8       	ld.ub	r8,r8[0x3]
8000db86:	12 48       	or	r8,r9
8000db88:	5c 88       	casts.h	r8
8000db8a:	5c 88       	casts.h	r8
8000db8c:	5c c8       	swap.bh	r8
8000db8e:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000db90:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000db94:	49 98       	lddpc	r8,8000dbf8 <udc_req_std_dev_get_descriptor+0x250>
8000db96:	70 1a       	ld.w	r10,r8[0x4]
8000db98:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000db9c:	a3 78       	lsl	r8,0x3
8000db9e:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000dba2:	70 08       	ld.w	r8,r8[0x0]
8000dba4:	12 9b       	mov	r11,r9
8000dba6:	10 9c       	mov	r12,r8
8000dba8:	f0 1f 00 15 	mcall	8000dbfc <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000dbac:	49 18       	lddpc	r8,8000dbf0 <udc_req_std_dev_get_descriptor+0x248>
8000dbae:	70 28       	ld.w	r8,r8[0x8]
8000dbb0:	10 99       	mov	r9,r8
8000dbb2:	30 78       	mov	r8,7
8000dbb4:	b2 98       	st.b	r9[0x1],r8
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
8000dbb6:	c0 d8       	rjmp	8000dbd0 <udc_req_std_dev_get_descriptor+0x228>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
8000dbb8:	f0 1f 00 12 	mcall	8000dc00 <udc_req_std_dev_get_descriptor+0x258>
8000dbbc:	18 98       	mov	r8,r12
8000dbbe:	ec 18 00 01 	eorl	r8,0x1
8000dbc2:	5c 58       	castu.b	r8
8000dbc4:	c0 50       	breq	8000dbce <udc_req_std_dev_get_descriptor+0x226>
			return false;
8000dbc6:	30 08       	mov	r8,0
8000dbc8:	c1 08       	rjmp	8000dbe8 <udc_req_std_dev_get_descriptor+0x240>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
8000dbca:	30 08       	mov	r8,0
8000dbcc:	c0 e8       	rjmp	8000dbe8 <udc_req_std_dev_get_descriptor+0x240>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
8000dbce:	d7 03       	nop
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
8000dbd0:	48 88       	lddpc	r8,8000dbf0 <udc_req_std_dev_get_descriptor+0x248>
8000dbd2:	90 39       	ld.sh	r9,r8[0x6]
8000dbd4:	48 78       	lddpc	r8,8000dbf0 <udc_req_std_dev_get_descriptor+0x248>
8000dbd6:	90 68       	ld.sh	r8,r8[0xc]
8000dbd8:	f0 09 19 00 	cp.h	r9,r8
8000dbdc:	c0 52       	brcc	8000dbe6 <udc_req_std_dev_get_descriptor+0x23e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000dbde:	48 58       	lddpc	r8,8000dbf0 <udc_req_std_dev_get_descriptor+0x248>
8000dbe0:	90 38       	ld.sh	r8,r8[0x6]
8000dbe2:	48 49       	lddpc	r9,8000dbf0 <udc_req_std_dev_get_descriptor+0x248>
8000dbe4:	b2 68       	st.h	r9[0xc],r8
	}
	return true;
8000dbe6:	30 18       	mov	r8,1
}
8000dbe8:	10 9c       	mov	r12,r8
8000dbea:	2f fd       	sub	sp,-4
8000dbec:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dbf0:	00 00       	add	r0,r0
8000dbf2:	10 08       	add	r8,r8
8000dbf4:	80 00       	ld.sh	r0,r0[0x0]
8000dbf6:	9f 84       	st.w	pc[0x20],r4
8000dbf8:	00 00       	add	r0,r0
8000dbfa:	02 00       	add	r0,r1
8000dbfc:	80 00       	ld.sh	r0,r0[0x0]
8000dbfe:	a0 20       	st.h	r0[0x4],r0
8000dc00:	80 00       	ld.sh	r0,r0[0x0]
8000dc02:	d8 a8       	*unknown*

8000dc04 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
8000dc04:	eb cd 40 80 	pushm	r7,lr
8000dc08:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != 1) {
8000dc0a:	48 98       	lddpc	r8,8000dc2c <udc_req_std_dev_get_configuration+0x28>
8000dc0c:	90 39       	ld.sh	r9,r8[0x6]
8000dc0e:	30 18       	mov	r8,1
8000dc10:	f0 09 19 00 	cp.h	r9,r8
8000dc14:	c0 30       	breq	8000dc1a <udc_req_std_dev_get_configuration+0x16>
		return false;
8000dc16:	30 08       	mov	r8,0
8000dc18:	c0 68       	rjmp	8000dc24 <udc_req_std_dev_get_configuration+0x20>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
8000dc1a:	30 1b       	mov	r11,1
8000dc1c:	48 5c       	lddpc	r12,8000dc30 <udc_req_std_dev_get_configuration+0x2c>
8000dc1e:	f0 1f 00 06 	mcall	8000dc34 <udc_req_std_dev_get_configuration+0x30>
	return true;
8000dc22:	30 18       	mov	r8,1
}
8000dc24:	10 9c       	mov	r12,r8
8000dc26:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dc2a:	00 00       	add	r0,r0
8000dc2c:	00 00       	add	r0,r0
8000dc2e:	10 08       	add	r8,r8
8000dc30:	00 00       	add	r0,r0
8000dc32:	08 52       	eor	r2,r4
8000dc34:	80 00       	ld.sh	r0,r0[0x0]
8000dc36:	a0 20       	st.h	r0[0x4],r0

8000dc38 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
8000dc38:	eb cd 40 80 	pushm	r7,lr
8000dc3c:	1a 97       	mov	r7,sp
8000dc3e:	20 1d       	sub	sp,4
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
8000dc40:	4b c8       	lddpc	r8,8000dd30 <udc_req_std_dev_set_configuration+0xf8>
8000dc42:	90 38       	ld.sh	r8,r8[0x6]
8000dc44:	58 08       	cp.w	r8,0
8000dc46:	c0 30       	breq	8000dc4c <udc_req_std_dev_set_configuration+0x14>
		return false;
8000dc48:	30 08       	mov	r8,0
8000dc4a:	c6 f8       	rjmp	8000dd28 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
8000dc4c:	f0 1f 00 3a 	mcall	8000dd34 <udc_req_std_dev_set_configuration+0xfc>
8000dc50:	18 98       	mov	r8,r12
8000dc52:	58 08       	cp.w	r8,0
8000dc54:	c0 31       	brne	8000dc5a <udc_req_std_dev_set_configuration+0x22>
		return false;
8000dc56:	30 08       	mov	r8,0
8000dc58:	c6 88       	rjmp	8000dd28 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000dc5a:	f0 1f 00 38 	mcall	8000dd38 <udc_req_std_dev_set_configuration+0x100>
8000dc5e:	18 98       	mov	r8,r12
8000dc60:	58 08       	cp.w	r8,0
8000dc62:	c0 f0       	breq	8000dc80 <udc_req_std_dev_set_configuration+0x48>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000dc64:	4b 38       	lddpc	r8,8000dd30 <udc_req_std_dev_set_configuration+0xf8>
8000dc66:	90 18       	ld.sh	r8,r8[0x2]
8000dc68:	5c 78       	castu.h	r8
8000dc6a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_hs->bNumConfigurations) {
8000dc6e:	4b 48       	lddpc	r8,8000dd3c <udc_req_std_dev_set_configuration+0x104>
8000dc70:	70 28       	ld.w	r8,r8[0x8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000dc72:	f1 38 00 11 	ld.ub	r8,r8[17]
8000dc76:	10 39       	cp.w	r9,r8
8000dc78:	e0 8a 00 12 	brle	8000dc9c <udc_req_std_dev_set_configuration+0x64>
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000dc7c:	30 08       	mov	r8,0
8000dc7e:	c5 58       	rjmp	8000dd28 <udc_req_std_dev_set_configuration+0xf0>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000dc80:	4a c8       	lddpc	r8,8000dd30 <udc_req_std_dev_set_configuration+0xf8>
8000dc82:	90 18       	ld.sh	r8,r8[0x2]
8000dc84:	5c 78       	castu.h	r8
8000dc86:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_lsfs->bNumConfigurations) {
8000dc8a:	4a d8       	lddpc	r8,8000dd3c <udc_req_std_dev_set_configuration+0x104>
8000dc8c:	70 08       	ld.w	r8,r8[0x0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000dc8e:	f1 38 00 11 	ld.ub	r8,r8[17]
8000dc92:	10 39       	cp.w	r9,r8
8000dc94:	e0 8a 00 05 	brle	8000dc9e <udc_req_std_dev_set_configuration+0x66>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
8000dc98:	30 08       	mov	r8,0
8000dc9a:	c4 78       	rjmp	8000dd28 <udc_req_std_dev_set_configuration+0xf0>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000dc9c:	d7 03       	nop
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
8000dc9e:	f0 1f 00 29 	mcall	8000dd40 <udc_req_std_dev_set_configuration+0x108>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
8000dca2:	4a 48       	lddpc	r8,8000dd30 <udc_req_std_dev_set_configuration+0xf8>
8000dca4:	90 18       	ld.sh	r8,r8[0x2]
8000dca6:	5c 58       	castu.b	r8
8000dca8:	4a 79       	lddpc	r9,8000dd44 <udc_req_std_dev_set_configuration+0x10c>
8000dcaa:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
8000dcac:	4a 68       	lddpc	r8,8000dd44 <udc_req_std_dev_set_configuration+0x10c>
8000dcae:	11 88       	ld.ub	r8,r8[0x0]
8000dcb0:	58 08       	cp.w	r8,0
8000dcb2:	c0 31       	brne	8000dcb8 <udc_req_std_dev_set_configuration+0x80>
		return true; // Default empty configuration requested
8000dcb4:	30 18       	mov	r8,1
8000dcb6:	c3 98       	rjmp	8000dd28 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000dcb8:	f0 1f 00 20 	mcall	8000dd38 <udc_req_std_dev_set_configuration+0x100>
8000dcbc:	18 98       	mov	r8,r12
8000dcbe:	58 08       	cp.w	r8,0
8000dcc0:	c0 b0       	breq	8000dcd6 <udc_req_std_dev_set_configuration+0x9e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
8000dcc2:	49 f8       	lddpc	r8,8000dd3c <udc_req_std_dev_set_configuration+0x104>
8000dcc4:	70 49       	ld.w	r9,r8[0x10]
8000dcc6:	4a 08       	lddpc	r8,8000dd44 <udc_req_std_dev_set_configuration+0x10c>
8000dcc8:	11 88       	ld.ub	r8,r8[0x0]
8000dcca:	20 18       	sub	r8,1
8000dccc:	a3 78       	lsl	r8,0x3
8000dcce:	10 09       	add	r9,r8
8000dcd0:	49 e8       	lddpc	r8,8000dd48 <udc_req_std_dev_set_configuration+0x110>
8000dcd2:	91 09       	st.w	r8[0x0],r9
8000dcd4:	c0 a8       	rjmp	8000dce8 <udc_req_std_dev_set_configuration+0xb0>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
8000dcd6:	49 a8       	lddpc	r8,8000dd3c <udc_req_std_dev_set_configuration+0x104>
8000dcd8:	70 19       	ld.w	r9,r8[0x4]
8000dcda:	49 b8       	lddpc	r8,8000dd44 <udc_req_std_dev_set_configuration+0x10c>
8000dcdc:	11 88       	ld.ub	r8,r8[0x0]
8000dcde:	20 18       	sub	r8,1
8000dce0:	a3 78       	lsl	r8,0x3
8000dce2:	10 09       	add	r9,r8
8000dce4:	49 98       	lddpc	r8,8000dd48 <udc_req_std_dev_set_configuration+0x110>
8000dce6:	91 09       	st.w	r8[0x0],r9
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000dce8:	30 08       	mov	r8,0
8000dcea:	ef 68 ff ff 	st.b	r7[-1],r8
8000dcee:	c1 38       	rjmp	8000dd14 <udc_req_std_dev_set_configuration+0xdc>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
8000dcf0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dcf4:	30 0b       	mov	r11,0
8000dcf6:	10 9c       	mov	r12,r8
8000dcf8:	f0 1f 00 15 	mcall	8000dd4c <udc_req_std_dev_set_configuration+0x114>
8000dcfc:	18 98       	mov	r8,r12
8000dcfe:	ec 18 00 01 	eorl	r8,0x1
8000dd02:	5c 58       	castu.b	r8
8000dd04:	c0 30       	breq	8000dd0a <udc_req_std_dev_set_configuration+0xd2>
			return false;
8000dd06:	30 08       	mov	r8,0
8000dd08:	c1 08       	rjmp	8000dd28 <udc_req_std_dev_set_configuration+0xf0>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000dd0a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dd0e:	2f f8       	sub	r8,-1
8000dd10:	ef 68 ff ff 	st.b	r7[-1],r8
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000dd14:	48 d8       	lddpc	r8,8000dd48 <udc_req_std_dev_set_configuration+0x110>
8000dd16:	70 08       	ld.w	r8,r8[0x0]
8000dd18:	70 08       	ld.w	r8,r8[0x0]
8000dd1a:	11 c8       	ld.ub	r8,r8[0x4]
8000dd1c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dd20:	f0 09 18 00 	cp.b	r9,r8
8000dd24:	ce 63       	brcs	8000dcf0 <udc_req_std_dev_set_configuration+0xb8>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
8000dd26:	30 18       	mov	r8,1
}
8000dd28:	10 9c       	mov	r12,r8
8000dd2a:	2f fd       	sub	sp,-4
8000dd2c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dd30:	00 00       	add	r0,r0
8000dd32:	10 08       	add	r8,r8
8000dd34:	80 00       	ld.sh	r0,r0[0x0]
8000dd36:	9f ee       	st.w	pc[0x38],lr
8000dd38:	80 00       	ld.sh	r0,r0[0x0]
8000dd3a:	9f 84       	st.w	pc[0x20],r4
8000dd3c:	00 00       	add	r0,r0
8000dd3e:	02 00       	add	r0,r1
8000dd40:	80 00       	ld.sh	r0,r0[0x0]
8000dd42:	d5 78       	*unknown*
8000dd44:	00 00       	add	r0,r0
8000dd46:	08 52       	eor	r2,r4
8000dd48:	00 00       	add	r0,r0
8000dd4a:	08 54       	eor	r4,r4
8000dd4c:	80 00       	ld.sh	r0,r0[0x0]
8000dd4e:	d4 9c       	*unknown*

8000dd50 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
8000dd50:	eb cd 40 80 	pushm	r7,lr
8000dd54:	1a 97       	mov	r7,sp
8000dd56:	20 2d       	sub	sp,8
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
8000dd58:	4a 38       	lddpc	r8,8000dde4 <udc_req_std_iface_get_setting+0x94>
8000dd5a:	90 39       	ld.sh	r9,r8[0x6]
8000dd5c:	30 18       	mov	r8,1
8000dd5e:	f0 09 19 00 	cp.h	r9,r8
8000dd62:	c0 30       	breq	8000dd68 <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
8000dd64:	30 08       	mov	r8,0
8000dd66:	c3 a8       	rjmp	8000ddda <udc_req_std_iface_get_setting+0x8a>
	}
	if (!udc_num_configuration) {
8000dd68:	4a 08       	lddpc	r8,8000dde8 <udc_req_std_iface_get_setting+0x98>
8000dd6a:	11 88       	ld.ub	r8,r8[0x0]
8000dd6c:	58 08       	cp.w	r8,0
8000dd6e:	c0 31       	brne	8000dd74 <udc_req_std_iface_get_setting+0x24>
		return false; // The device is not is configured state yet
8000dd70:	30 08       	mov	r8,0
8000dd72:	c3 48       	rjmp	8000ddda <udc_req_std_iface_get_setting+0x8a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000dd74:	49 c8       	lddpc	r8,8000dde4 <udc_req_std_iface_get_setting+0x94>
8000dd76:	90 28       	ld.sh	r8,r8[0x4]
8000dd78:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000dd7c:	49 c8       	lddpc	r8,8000ddec <udc_req_std_iface_get_setting+0x9c>
8000dd7e:	70 08       	ld.w	r8,r8[0x0]
8000dd80:	70 08       	ld.w	r8,r8[0x0]
8000dd82:	11 c8       	ld.ub	r8,r8[0x4]
8000dd84:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000dd88:	f0 09 18 00 	cp.b	r9,r8
8000dd8c:	c0 33       	brcs	8000dd92 <udc_req_std_iface_get_setting+0x42>
		return false;
8000dd8e:	30 08       	mov	r8,0
8000dd90:	c2 58       	rjmp	8000ddda <udc_req_std_iface_get_setting+0x8a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000dd92:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dd96:	30 0b       	mov	r11,0
8000dd98:	10 9c       	mov	r12,r8
8000dd9a:	f0 1f 00 16 	mcall	8000ddf0 <udc_req_std_iface_get_setting+0xa0>
8000dd9e:	18 98       	mov	r8,r12
8000dda0:	ec 18 00 01 	eorl	r8,0x1
8000dda4:	5c 58       	castu.b	r8
8000dda6:	c0 30       	breq	8000ddac <udc_req_std_iface_get_setting+0x5c>
		return false;
8000dda8:	30 08       	mov	r8,0
8000ddaa:	c1 88       	rjmp	8000ddda <udc_req_std_iface_get_setting+0x8a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000ddac:	49 08       	lddpc	r8,8000ddec <udc_req_std_iface_get_setting+0x9c>
8000ddae:	70 08       	ld.w	r8,r8[0x0]
8000ddb0:	70 19       	ld.w	r9,r8[0x4]
8000ddb2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000ddb6:	a3 68       	lsl	r8,0x2
8000ddb8:	f2 08 00 08 	add	r8,r9,r8
8000ddbc:	70 08       	ld.w	r8,r8[0x0]
8000ddbe:	ef 48 ff fc 	st.w	r7[-4],r8
	udc_iface_setting = udi_api->getsetting();
8000ddc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ddc6:	70 38       	ld.w	r8,r8[0xc]
8000ddc8:	5d 18       	icall	r8
8000ddca:	18 98       	mov	r8,r12
8000ddcc:	48 a9       	lddpc	r9,8000ddf4 <udc_req_std_iface_get_setting+0xa4>
8000ddce:	b2 88       	st.b	r9[0x0],r8

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
8000ddd0:	30 1b       	mov	r11,1
8000ddd2:	48 9c       	lddpc	r12,8000ddf4 <udc_req_std_iface_get_setting+0xa4>
8000ddd4:	f0 1f 00 09 	mcall	8000ddf8 <udc_req_std_iface_get_setting+0xa8>
	return true;
8000ddd8:	30 18       	mov	r8,1
}
8000ddda:	10 9c       	mov	r12,r8
8000dddc:	2f ed       	sub	sp,-8
8000ddde:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dde2:	00 00       	add	r0,r0
8000dde4:	00 00       	add	r0,r0
8000dde6:	10 08       	add	r8,r8
8000dde8:	00 00       	add	r0,r0
8000ddea:	08 52       	eor	r2,r4
8000ddec:	00 00       	add	r0,r0
8000ddee:	08 54       	eor	r4,r4
8000ddf0:	80 00       	ld.sh	r0,r0[0x0]
8000ddf2:	d3 28       	*unknown*
8000ddf4:	00 00       	add	r0,r0
8000ddf6:	08 5c       	eor	r12,r4
8000ddf8:	80 00       	ld.sh	r0,r0[0x0]
8000ddfa:	a0 20       	st.h	r0[0x4],r0

8000ddfc <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
8000ddfc:	eb cd 40 80 	pushm	r7,lr
8000de00:	1a 97       	mov	r7,sp
8000de02:	20 1d       	sub	sp,4
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
8000de04:	49 78       	lddpc	r8,8000de60 <udc_req_std_iface_set_setting+0x64>
8000de06:	90 38       	ld.sh	r8,r8[0x6]
8000de08:	58 08       	cp.w	r8,0
8000de0a:	c0 30       	breq	8000de10 <udc_req_std_iface_set_setting+0x14>
		return false; // Error in request
8000de0c:	30 08       	mov	r8,0
8000de0e:	c2 48       	rjmp	8000de56 <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
8000de10:	49 58       	lddpc	r8,8000de64 <udc_req_std_iface_set_setting+0x68>
8000de12:	11 88       	ld.ub	r8,r8[0x0]
8000de14:	58 08       	cp.w	r8,0
8000de16:	c0 31       	brne	8000de1c <udc_req_std_iface_set_setting+0x20>
		return false; // The device is not is configured state yet
8000de18:	30 08       	mov	r8,0
8000de1a:	c1 e8       	rjmp	8000de56 <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000de1c:	49 18       	lddpc	r8,8000de60 <udc_req_std_iface_set_setting+0x64>
8000de1e:	90 28       	ld.sh	r8,r8[0x4]
8000de20:	ef 68 ff fe 	st.b	r7[-2],r8
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
8000de24:	48 f8       	lddpc	r8,8000de60 <udc_req_std_iface_set_setting+0x64>
8000de26:	90 18       	ld.sh	r8,r8[0x2]
8000de28:	ef 68 ff ff 	st.b	r7[-1],r8

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
8000de2c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000de30:	10 9c       	mov	r12,r8
8000de32:	f0 1f 00 0e 	mcall	8000de68 <udc_req_std_iface_set_setting+0x6c>
8000de36:	18 98       	mov	r8,r12
8000de38:	ec 18 00 01 	eorl	r8,0x1
8000de3c:	5c 58       	castu.b	r8
8000de3e:	c0 30       	breq	8000de44 <udc_req_std_iface_set_setting+0x48>
		return false;
8000de40:	30 08       	mov	r8,0
8000de42:	c0 a8       	rjmp	8000de56 <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
8000de44:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000de48:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000de4c:	12 9b       	mov	r11,r9
8000de4e:	10 9c       	mov	r12,r8
8000de50:	f0 1f 00 07 	mcall	8000de6c <udc_req_std_iface_set_setting+0x70>
8000de54:	18 98       	mov	r8,r12
}
8000de56:	10 9c       	mov	r12,r8
8000de58:	2f fd       	sub	sp,-4
8000de5a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000de5e:	00 00       	add	r0,r0
8000de60:	00 00       	add	r0,r0
8000de62:	10 08       	add	r8,r8
8000de64:	00 00       	add	r0,r0
8000de66:	08 52       	eor	r2,r4
8000de68:	80 00       	ld.sh	r0,r0[0x0]
8000de6a:	d3 e0       	acall	0xf8
8000de6c:	80 00       	ld.sh	r0,r0[0x0]
8000de6e:	d4 9c       	*unknown*

8000de70 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
8000de70:	eb cd 40 80 	pushm	r7,lr
8000de74:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000de76:	4c 78       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000de78:	11 88       	ld.ub	r8,r8[0x0]
8000de7a:	10 99       	mov	r9,r8
8000de7c:	30 08       	mov	r8,0
8000de7e:	f0 09 18 00 	cp.b	r9,r8
8000de82:	c3 c4       	brge	8000defa <udc_reqstd+0x8a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
8000de84:	4c 38       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000de86:	90 38       	ld.sh	r8,r8[0x6]
8000de88:	58 08       	cp.w	r8,0
8000de8a:	c0 31       	brne	8000de90 <udc_reqstd+0x20>
			return false; // Error for USB host
8000de8c:	30 08       	mov	r8,0
8000de8e:	c7 e8       	rjmp	8000df8a <udc_reqstd+0x11a>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000de90:	4c 08       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000de92:	11 88       	ld.ub	r8,r8[0x0]
8000de94:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de98:	c1 51       	brne	8000dec2 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000de9a:	4b e8       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000de9c:	11 98       	ld.ub	r8,r8[0x1]
8000de9e:	58 68       	cp.w	r8,6
8000dea0:	c0 90       	breq	8000deb2 <udc_reqstd+0x42>
8000dea2:	58 88       	cp.w	r8,8
8000dea4:	c0 b0       	breq	8000deba <udc_reqstd+0x4a>
8000dea6:	58 08       	cp.w	r8,0
8000dea8:	c0 d1       	brne	8000dec2 <udc_reqstd+0x52>
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
8000deaa:	f0 1f 00 3b 	mcall	8000df94 <udc_reqstd+0x124>
8000deae:	18 98       	mov	r8,r12
8000deb0:	c6 d8       	rjmp	8000df8a <udc_reqstd+0x11a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
8000deb2:	f0 1f 00 3a 	mcall	8000df98 <udc_reqstd+0x128>
8000deb6:	18 98       	mov	r8,r12
8000deb8:	c6 98       	rjmp	8000df8a <udc_reqstd+0x11a>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
8000deba:	f0 1f 00 39 	mcall	8000df9c <udc_reqstd+0x12c>
8000debe:	18 98       	mov	r8,r12
8000dec0:	c6 58       	rjmp	8000df8a <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000dec2:	4b 48       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000dec4:	11 88       	ld.ub	r8,r8[0x0]
8000dec6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000deca:	58 18       	cp.w	r8,1
8000decc:	c0 91       	brne	8000dede <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dece:	4b 18       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000ded0:	11 98       	ld.ub	r8,r8[0x1]
8000ded2:	58 a8       	cp.w	r8,10
8000ded4:	c0 51       	brne	8000dede <udc_reqstd+0x6e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
8000ded6:	f0 1f 00 33 	mcall	8000dfa0 <udc_reqstd+0x130>
8000deda:	18 98       	mov	r8,r12
8000dedc:	c5 78       	rjmp	8000df8a <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000dede:	4a d8       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000dee0:	11 88       	ld.ub	r8,r8[0x0]
8000dee2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dee6:	58 28       	cp.w	r8,2
8000dee8:	c4 f1       	brne	8000df86 <udc_reqstd+0x116>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000deea:	4a a8       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000deec:	11 98       	ld.ub	r8,r8[0x1]
8000deee:	58 08       	cp.w	r8,0
8000def0:	c4 c1       	brne	8000df88 <udc_reqstd+0x118>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000def2:	f0 1f 00 2d 	mcall	8000dfa4 <udc_reqstd+0x134>
8000def6:	18 98       	mov	r8,r12
8000def8:	c4 98       	rjmp	8000df8a <udc_reqstd+0x11a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000defa:	4a 68       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000defc:	11 88       	ld.ub	r8,r8[0x0]
8000defe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000df02:	c1 f1       	brne	8000df40 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000df04:	4a 38       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000df06:	11 98       	ld.ub	r8,r8[0x1]
8000df08:	58 38       	cp.w	r8,3
8000df0a:	c1 30       	breq	8000df30 <udc_reqstd+0xc0>
8000df0c:	e0 89 00 05 	brgt	8000df16 <udc_reqstd+0xa6>
8000df10:	58 18       	cp.w	r8,1
8000df12:	c0 b0       	breq	8000df28 <udc_reqstd+0xb8>
8000df14:	c1 68       	rjmp	8000df40 <udc_reqstd+0xd0>
8000df16:	58 58       	cp.w	r8,5
8000df18:	c0 40       	breq	8000df20 <udc_reqstd+0xb0>
8000df1a:	58 98       	cp.w	r8,9
8000df1c:	c0 e0       	breq	8000df38 <udc_reqstd+0xc8>
8000df1e:	c1 18       	rjmp	8000df40 <udc_reqstd+0xd0>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
8000df20:	f0 1f 00 22 	mcall	8000dfa8 <udc_reqstd+0x138>
8000df24:	18 98       	mov	r8,r12
8000df26:	c3 28       	rjmp	8000df8a <udc_reqstd+0x11a>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
8000df28:	f0 1f 00 21 	mcall	8000dfac <udc_reqstd+0x13c>
8000df2c:	18 98       	mov	r8,r12
8000df2e:	c2 e8       	rjmp	8000df8a <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
8000df30:	f0 1f 00 20 	mcall	8000dfb0 <udc_reqstd+0x140>
8000df34:	18 98       	mov	r8,r12
8000df36:	c2 a8       	rjmp	8000df8a <udc_reqstd+0x11a>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
8000df38:	f0 1f 00 1f 	mcall	8000dfb4 <udc_reqstd+0x144>
8000df3c:	18 98       	mov	r8,r12
8000df3e:	c2 68       	rjmp	8000df8a <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000df40:	49 48       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000df42:	11 88       	ld.ub	r8,r8[0x0]
8000df44:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000df48:	58 18       	cp.w	r8,1
8000df4a:	c0 91       	brne	8000df5c <udc_reqstd+0xec>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000df4c:	49 18       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000df4e:	11 98       	ld.ub	r8,r8[0x1]
8000df50:	58 b8       	cp.w	r8,11
8000df52:	c0 51       	brne	8000df5c <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
8000df54:	f0 1f 00 19 	mcall	8000dfb8 <udc_reqstd+0x148>
8000df58:	18 98       	mov	r8,r12
8000df5a:	c1 88       	rjmp	8000df8a <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000df5c:	48 d8       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000df5e:	11 88       	ld.ub	r8,r8[0x0]
8000df60:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000df64:	58 28       	cp.w	r8,2
8000df66:	c1 11       	brne	8000df88 <udc_reqstd+0x118>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000df68:	48 a8       	lddpc	r8,8000df90 <udc_reqstd+0x120>
8000df6a:	11 98       	ld.ub	r8,r8[0x1]
8000df6c:	58 18       	cp.w	r8,1
8000df6e:	c0 40       	breq	8000df76 <udc_reqstd+0x106>
8000df70:	58 38       	cp.w	r8,3
8000df72:	c0 60       	breq	8000df7e <udc_reqstd+0x10e>
8000df74:	c0 a8       	rjmp	8000df88 <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
8000df76:	f0 1f 00 12 	mcall	8000dfbc <udc_reqstd+0x14c>
8000df7a:	18 98       	mov	r8,r12
8000df7c:	c0 78       	rjmp	8000df8a <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
8000df7e:	f0 1f 00 11 	mcall	8000dfc0 <udc_reqstd+0x150>
8000df82:	18 98       	mov	r8,r12
8000df84:	c0 38       	rjmp	8000df8a <udc_reqstd+0x11a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000df86:	d7 03       	nop
				break;
			}
		}
#endif
	}
	return false;
8000df88:	30 08       	mov	r8,0
}
8000df8a:	10 9c       	mov	r12,r8
8000df8c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df90:	00 00       	add	r0,r0
8000df92:	10 08       	add	r8,r8
8000df94:	80 00       	ld.sh	r0,r0[0x0]
8000df96:	d6 4c       	*unknown*
8000df98:	80 00       	ld.sh	r0,r0[0x0]
8000df9a:	d9 a8       	*unknown*
8000df9c:	80 00       	ld.sh	r0,r0[0x0]
8000df9e:	dc 04       	*unknown*
8000dfa0:	80 00       	ld.sh	r0,r0[0x0]
8000dfa2:	dd 50       	acall	0x354
8000dfa4:	80 00       	ld.sh	r0,r0[0x0]
8000dfa6:	d6 80       	acall	0x1a0
8000dfa8:	80 00       	ld.sh	r0,r0[0x0]
8000dfaa:	d8 80       	acall	0x220
8000dfac:	80 00       	ld.sh	r0,r0[0x0]
8000dfae:	d6 d8       	*unknown*
8000dfb0:	80 00       	ld.sh	r0,r0[0x0]
8000dfb2:	d7 54       	*unknown*
8000dfb4:	80 00       	ld.sh	r0,r0[0x0]
8000dfb6:	dc 38       	*unknown*
8000dfb8:	80 00       	ld.sh	r0,r0[0x0]
8000dfba:	dd fc       	*unknown*
8000dfbc:	80 00       	ld.sh	r0,r0[0x0]
8000dfbe:	d7 18       	*unknown*
8000dfc0:	80 00       	ld.sh	r0,r0[0x0]
8000dfc2:	d8 10       	acall	0x204

8000dfc4 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
8000dfc4:	eb cd 40 80 	pushm	r7,lr
8000dfc8:	1a 97       	mov	r7,sp
8000dfca:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000dfcc:	4a 58       	lddpc	r8,8000e060 <udc_req_iface+0x9c>
8000dfce:	11 88       	ld.ub	r8,r8[0x0]
8000dfd0:	58 08       	cp.w	r8,0
8000dfd2:	c0 31       	brne	8000dfd8 <udc_req_iface+0x14>
		return false; // The device is not is configured state yet
8000dfd4:	30 08       	mov	r8,0
8000dfd6:	c4 08       	rjmp	8000e056 <udc_req_iface+0x92>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000dfd8:	4a 38       	lddpc	r8,8000e064 <udc_req_iface+0xa0>
8000dfda:	90 28       	ld.sh	r8,r8[0x4]
8000dfdc:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000dfe0:	4a 28       	lddpc	r8,8000e068 <udc_req_iface+0xa4>
8000dfe2:	70 08       	ld.w	r8,r8[0x0]
8000dfe4:	70 08       	ld.w	r8,r8[0x0]
8000dfe6:	11 c8       	ld.ub	r8,r8[0x4]
8000dfe8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000dfec:	f0 09 18 00 	cp.b	r9,r8
8000dff0:	c0 33       	brcs	8000dff6 <udc_req_iface+0x32>
		return false;
8000dff2:	30 08       	mov	r8,0
8000dff4:	c3 18       	rjmp	8000e056 <udc_req_iface+0x92>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000dff6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dffa:	30 0b       	mov	r11,0
8000dffc:	10 9c       	mov	r12,r8
8000dffe:	f0 1f 00 1c 	mcall	8000e06c <udc_req_iface+0xa8>
8000e002:	18 98       	mov	r8,r12
8000e004:	ec 18 00 01 	eorl	r8,0x1
8000e008:	5c 58       	castu.b	r8
8000e00a:	c0 30       	breq	8000e010 <udc_req_iface+0x4c>
		return false;
8000e00c:	30 08       	mov	r8,0
8000e00e:	c2 48       	rjmp	8000e056 <udc_req_iface+0x92>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000e010:	49 68       	lddpc	r8,8000e068 <udc_req_iface+0xa4>
8000e012:	70 08       	ld.w	r8,r8[0x0]
8000e014:	70 19       	ld.w	r9,r8[0x4]
8000e016:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000e01a:	a3 68       	lsl	r8,0x2
8000e01c:	f2 08 00 08 	add	r8,r9,r8
8000e020:	70 08       	ld.w	r8,r8[0x0]
8000e022:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000e026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e02a:	70 38       	ld.w	r8,r8[0xc]
8000e02c:	5d 18       	icall	r8
8000e02e:	18 98       	mov	r8,r12
8000e030:	10 99       	mov	r9,r8
8000e032:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000e036:	12 9b       	mov	r11,r9
8000e038:	10 9c       	mov	r12,r8
8000e03a:	f0 1f 00 0d 	mcall	8000e06c <udc_req_iface+0xa8>
8000e03e:	18 98       	mov	r8,r12
8000e040:	ec 18 00 01 	eorl	r8,0x1
8000e044:	5c 58       	castu.b	r8
8000e046:	c0 30       	breq	8000e04c <udc_req_iface+0x88>
		return false;
8000e048:	30 08       	mov	r8,0
8000e04a:	c0 68       	rjmp	8000e056 <udc_req_iface+0x92>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
8000e04c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e050:	70 28       	ld.w	r8,r8[0x8]
8000e052:	5d 18       	icall	r8
8000e054:	18 98       	mov	r8,r12
}
8000e056:	10 9c       	mov	r12,r8
8000e058:	2f ed       	sub	sp,-8
8000e05a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e05e:	00 00       	add	r0,r0
8000e060:	00 00       	add	r0,r0
8000e062:	08 52       	eor	r2,r4
8000e064:	00 00       	add	r0,r0
8000e066:	10 08       	add	r8,r8
8000e068:	00 00       	add	r0,r0
8000e06a:	08 54       	eor	r4,r4
8000e06c:	80 00       	ld.sh	r0,r0[0x0]
8000e06e:	d3 28       	*unknown*

8000e070 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
8000e070:	eb cd 40 80 	pushm	r7,lr
8000e074:	1a 97       	mov	r7,sp
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
8000e076:	49 a9       	lddpc	r9,8000e0dc <udc_process_setup+0x6c>
8000e078:	30 08       	mov	r8,0
8000e07a:	b2 68       	st.h	r9[0xc],r8
	udd_g_ctrlreq.callback = NULL;
8000e07c:	49 88       	lddpc	r8,8000e0dc <udc_process_setup+0x6c>
8000e07e:	30 09       	mov	r9,0
8000e080:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000e082:	49 78       	lddpc	r8,8000e0dc <udc_process_setup+0x6c>
8000e084:	30 09       	mov	r9,0
8000e086:	91 59       	st.w	r8[0x14],r9

	if (Udd_setup_is_in()) {
8000e088:	49 58       	lddpc	r8,8000e0dc <udc_process_setup+0x6c>
8000e08a:	11 88       	ld.ub	r8,r8[0x0]
8000e08c:	10 99       	mov	r9,r8
8000e08e:	30 08       	mov	r8,0
8000e090:	f0 09 18 00 	cp.b	r9,r8
8000e094:	c0 74       	brge	8000e0a2 <udc_process_setup+0x32>
		if (udd_g_ctrlreq.req.wLength == 0) {
8000e096:	49 28       	lddpc	r8,8000e0dc <udc_process_setup+0x6c>
8000e098:	90 38       	ld.sh	r8,r8[0x6]
8000e09a:	58 08       	cp.w	r8,0
8000e09c:	c0 31       	brne	8000e0a2 <udc_process_setup+0x32>
			return false; // Error from USB host
8000e09e:	30 08       	mov	r8,0
8000e0a0:	c1 b8       	rjmp	8000e0d6 <udc_process_setup+0x66>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
8000e0a2:	48 f8       	lddpc	r8,8000e0dc <udc_process_setup+0x6c>
8000e0a4:	11 88       	ld.ub	r8,r8[0x0]
8000e0a6:	e2 18 00 60 	andl	r8,0x60,COH
8000e0aa:	c0 81       	brne	8000e0ba <udc_process_setup+0x4a>
		if (udc_reqstd()) {
8000e0ac:	f0 1f 00 0d 	mcall	8000e0e0 <udc_process_setup+0x70>
8000e0b0:	18 98       	mov	r8,r12
8000e0b2:	58 08       	cp.w	r8,0
8000e0b4:	c0 30       	breq	8000e0ba <udc_process_setup+0x4a>
			return true;
8000e0b6:	30 18       	mov	r8,1
8000e0b8:	c0 f8       	rjmp	8000e0d6 <udc_process_setup+0x66>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
8000e0ba:	48 98       	lddpc	r8,8000e0dc <udc_process_setup+0x6c>
8000e0bc:	11 88       	ld.ub	r8,r8[0x0]
8000e0be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e0c2:	58 18       	cp.w	r8,1
8000e0c4:	c0 81       	brne	8000e0d4 <udc_process_setup+0x64>
		if (udc_req_iface()) {
8000e0c6:	f0 1f 00 08 	mcall	8000e0e4 <udc_process_setup+0x74>
8000e0ca:	18 98       	mov	r8,r12
8000e0cc:	58 08       	cp.w	r8,0
8000e0ce:	c0 30       	breq	8000e0d4 <udc_process_setup+0x64>
			return true;
8000e0d0:	30 18       	mov	r8,1
8000e0d2:	c0 28       	rjmp	8000e0d6 <udc_process_setup+0x66>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
8000e0d4:	30 08       	mov	r8,0
#endif
}
8000e0d6:	10 9c       	mov	r12,r8
8000e0d8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e0dc:	00 00       	add	r0,r0
8000e0de:	10 08       	add	r8,r8
8000e0e0:	80 00       	ld.sh	r0,r0[0x0]
8000e0e2:	de 70       	acall	0x39c
8000e0e4:	80 00       	ld.sh	r0,r0[0x0]
8000e0e6:	df c4       	*unknown*

8000e0e8 <pm_sleep>:
#else
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
8000e0e8:	eb cd 40 80 	pushm	r7,lr
8000e0ec:	1a 97       	mov	r7,sp
8000e0ee:	20 1d       	sub	sp,4
8000e0f0:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (sleep_mode) {
8000e0f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e0f8:	58 58       	cp.w	r8,5
8000e0fa:	c4 30       	breq	8000e180 <pm_sleep+0x98>
8000e0fc:	e0 89 00 10 	brgt	8000e11c <pm_sleep+0x34>
8000e100:	58 28       	cp.w	r8,2
8000e102:	c2 d0       	breq	8000e15c <pm_sleep+0x74>
8000e104:	e0 89 00 07 	brgt	8000e112 <pm_sleep+0x2a>
8000e108:	58 08       	cp.w	r8,0
8000e10a:	c1 d0       	breq	8000e144 <pm_sleep+0x5c>
8000e10c:	58 18       	cp.w	r8,1
8000e10e:	c2 10       	breq	8000e150 <pm_sleep+0x68>
8000e110:	c3 d8       	rjmp	8000e18a <pm_sleep+0xa2>
8000e112:	58 38       	cp.w	r8,3
8000e114:	c2 a0       	breq	8000e168 <pm_sleep+0x80>
8000e116:	58 48       	cp.w	r8,4
8000e118:	c2 e0       	breq	8000e174 <pm_sleep+0x8c>
8000e11a:	c3 88       	rjmp	8000e18a <pm_sleep+0xa2>
8000e11c:	e0 48 00 82 	cp.w	r8,130
8000e120:	c2 10       	breq	8000e162 <pm_sleep+0x7a>
8000e122:	e0 89 00 09 	brgt	8000e134 <pm_sleep+0x4c>
8000e126:	e0 48 00 80 	cp.w	r8,128
8000e12a:	c1 00       	breq	8000e14a <pm_sleep+0x62>
8000e12c:	e0 48 00 81 	cp.w	r8,129
8000e130:	c1 30       	breq	8000e156 <pm_sleep+0x6e>
8000e132:	c2 c8       	rjmp	8000e18a <pm_sleep+0xa2>
8000e134:	e0 48 00 84 	cp.w	r8,132
8000e138:	c2 10       	breq	8000e17a <pm_sleep+0x92>
8000e13a:	c1 a5       	brlt	8000e16e <pm_sleep+0x86>
8000e13c:	e0 48 00 85 	cp.w	r8,133
8000e140:	c2 30       	breq	8000e186 <pm_sleep+0x9e>
8000e142:	c2 48       	rjmp	8000e18a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
8000e144:	e9 b0 00 00 	sleep	0x0
		break;
8000e148:	c2 18       	rjmp	8000e18a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
8000e14a:	e9 b0 00 80 	sleep	0x80
		break;
8000e14e:	c1 e8       	rjmp	8000e18a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
8000e150:	e9 b0 00 01 	sleep	0x1
		break;
8000e154:	c1 b8       	rjmp	8000e18a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
8000e156:	e9 b0 00 81 	sleep	0x81
		break;
8000e15a:	c1 88       	rjmp	8000e18a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
8000e15c:	e9 b0 00 02 	sleep	0x2
		break;
8000e160:	c1 58       	rjmp	8000e18a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
8000e162:	e9 b0 00 82 	sleep	0x82
		break;
8000e166:	c1 28       	rjmp	8000e18a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
8000e168:	e9 b0 00 03 	sleep	0x3
		break;
8000e16c:	c0 f8       	rjmp	8000e18a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
8000e16e:	e9 b0 00 83 	sleep	0x83
		break;
8000e172:	c0 c8       	rjmp	8000e18a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
8000e174:	e9 b0 00 04 	sleep	0x4
		break;
8000e178:	c0 98       	rjmp	8000e18a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000e17a:	e9 b0 00 84 	sleep	0x84
		break;
8000e17e:	c0 68       	rjmp	8000e18a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
8000e180:	e9 b0 00 05 	sleep	0x5
		break;
8000e184:	c0 38       	rjmp	8000e18a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
8000e186:	e9 b0 00 85 	sleep	0x85
		break;
#endif
	default:
		break;
	}
}
8000e18a:	2f fd       	sub	sp,-4
8000e18c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e190 <sleepmgr_sleep>:
//! @}



static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
8000e190:	eb cd 40 80 	pushm	r7,lr
8000e194:	1a 97       	mov	r7,sp
8000e196:	20 1d       	sub	sp,4
8000e198:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
8000e19c:	d3 03       	ssrf	0x10

	// Atomically enable the global interrupts and enter the sleep mode.
	pm_sleep(AVR32_PM_SMODE_GMCLEAR_MASK | (sleep_mode-1));
8000e19e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e1a2:	20 18       	sub	r8,1
8000e1a4:	a7 b8       	sbr	r8,0x7
8000e1a6:	10 9c       	mov	r12,r8
8000e1a8:	f0 1f 00 03 	mcall	8000e1b4 <sleepmgr_sleep+0x24>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
8000e1ac:	2f fd       	sub	sp,-4
8000e1ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e1b2:	00 00       	add	r0,r0
8000e1b4:	80 00       	ld.sh	r0,r0[0x0]
8000e1b6:	e0 e8 eb cd 	ld.d	r8,r0[-5171]

8000e1b8 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8000e1b8:	eb cd 40 80 	pushm	r7,lr
8000e1bc:	1a 97       	mov	r7,sp
8000e1be:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000e1c0:	30 08       	mov	r8,0
8000e1c2:	ef 68 ff ff 	st.b	r7[-1],r8
8000e1c6:	c0 c8       	rjmp	8000e1de <sleepmgr_init+0x26>
		sleepmgr_locks[i] = 0;
8000e1c8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000e1cc:	48 ba       	lddpc	r10,8000e1f8 <sleepmgr_init+0x40>
8000e1ce:	30 08       	mov	r8,0
8000e1d0:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000e1d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e1d8:	2f f8       	sub	r8,-1
8000e1da:	ef 68 ff ff 	st.b	r7[-1],r8
8000e1de:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000e1e2:	30 58       	mov	r8,5
8000e1e4:	f0 09 18 00 	cp.b	r9,r8
8000e1e8:	fe 98 ff f0 	brls	8000e1c8 <sleepmgr_init+0x10>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8000e1ec:	48 39       	lddpc	r9,8000e1f8 <sleepmgr_init+0x40>
8000e1ee:	30 18       	mov	r8,1
8000e1f0:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000e1f2:	2f fd       	sub	sp,-4
8000e1f4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e1f8:	00 00       	add	r0,r0
8000e1fa:	10 20       	rsub	r0,r8

8000e1fc <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
8000e1fc:	eb cd 40 80 	pushm	r7,lr
8000e200:	1a 97       	mov	r7,sp
8000e202:	20 2d       	sub	sp,8
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
8000e204:	30 08       	mov	r8,0
8000e206:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
8000e20a:	48 d8       	lddpc	r8,8000e23c <sleepmgr_get_sleep_mode+0x40>
8000e20c:	ef 48 ff fc 	st.w	r7[-4],r8

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000e210:	c0 b8       	rjmp	8000e226 <sleepmgr_get_sleep_mode+0x2a>
		lock_ptr++;
8000e212:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e216:	2f f8       	sub	r8,-1
8000e218:	ef 48 ff fc 	st.w	r7[-4],r8
		sleep_mode++;
8000e21c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e220:	2f f8       	sub	r8,-1
8000e222:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000e226:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e22a:	11 88       	ld.ub	r8,r8[0x0]
8000e22c:	58 08       	cp.w	r8,0
8000e22e:	cf 20       	breq	8000e212 <sleepmgr_get_sleep_mode+0x16>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
8000e230:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000e234:	10 9c       	mov	r12,r8
8000e236:	2f ed       	sub	sp,-8
8000e238:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e23c:	00 00       	add	r0,r0
8000e23e:	10 20       	rsub	r0,r8

8000e240 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
8000e240:	eb cd 40 80 	pushm	r7,lr
8000e244:	1a 97       	mov	r7,sp
8000e246:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
8000e248:	d3 03       	ssrf	0x10

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
8000e24a:	f0 1f 00 0a 	mcall	8000e270 <sleepmgr_enter_sleep+0x30>
8000e24e:	18 98       	mov	r8,r12
8000e250:	ef 48 ff fc 	st.w	r7[-4],r8
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
8000e254:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e258:	58 08       	cp.w	r8,0
8000e25a:	c0 31       	brne	8000e260 <sleepmgr_enter_sleep+0x20>
		cpu_irq_enable();
8000e25c:	d5 03       	csrf	0x10
		return;
8000e25e:	c0 58       	rjmp	8000e268 <sleepmgr_enter_sleep+0x28>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
8000e260:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e264:	f0 1f 00 04 	mcall	8000e274 <sleepmgr_enter_sleep+0x34>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000e268:	2f fd       	sub	sp,-4
8000e26a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e26e:	00 00       	add	r0,r0
8000e270:	80 00       	ld.sh	r0,r0[0x0]
8000e272:	e1 fc 80 00 	ld.wls	r12,r0[0x0]
8000e276:	e1 90       	*unknown*

8000e278 <udc_include_vbus_monitoring>:
 *        // Start USB \n
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
8000e278:	eb cd 40 80 	pushm	r7,lr
8000e27c:	1a 97       	mov	r7,sp
	return udd_include_vbus_monitoring();
8000e27e:	f0 1f 00 04 	mcall	8000e28c <udc_include_vbus_monitoring+0x14>
8000e282:	18 98       	mov	r8,r12
}
8000e284:	10 9c       	mov	r12,r8
8000e286:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e28a:	00 00       	add	r0,r0
8000e28c:	80 00       	ld.sh	r0,r0[0x0]
8000e28e:	9d 68       	st.w	lr[0x18],r8

8000e290 <udc_attach>:
 * \warning If a VBus control is included in driver,
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
8000e290:	eb cd 40 80 	pushm	r7,lr
8000e294:	1a 97       	mov	r7,sp
	udd_attach();
8000e296:	f0 1f 00 03 	mcall	8000e2a0 <udc_attach+0x10>
}
8000e29a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e29e:	00 00       	add	r0,r0
8000e2a0:	80 00       	ld.sh	r0,r0[0x0]
8000e2a2:	9e 98       	ld.uh	r8,pc[0x2]

8000e2a4 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
8000e2a4:	eb cd 40 80 	pushm	r7,lr
8000e2a8:	1a 97       	mov	r7,sp
	udd_detach();
8000e2aa:	f0 1f 00 03 	mcall	8000e2b4 <udc_detach+0x10>
}
8000e2ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e2b2:	00 00       	add	r0,r0
8000e2b4:	80 00       	ld.sh	r0,r0[0x0]
8000e2b6:	9f 44       	st.w	pc[0x10],r4

8000e2b8 <main>:
static bool main_b_msc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
8000e2b8:	eb cd 40 80 	pushm	r7,lr
8000e2bc:	1a 97       	mov	r7,sp
8000e2be:	20 1d       	sub	sp,4
	uint8_t i = 0;
8000e2c0:	30 08       	mov	r8,0
8000e2c2:	ef 68 ff ff 	st.b	r7[-1],r8
	irq_initialize_vectors();
8000e2c6:	f0 1f 00 2b 	mcall	8000e370 <main+0xb8>
	cpu_irq_enable();
8000e2ca:	d5 03       	csrf	0x10

	// Initialize the sleep manager
	sleepmgr_init();
8000e2cc:	f0 1f 00 2a 	mcall	8000e374 <main+0xbc>

	sysclk_init();
8000e2d0:	f0 1f 00 2a 	mcall	8000e378 <main+0xc0>
	board_init();
8000e2d4:	f0 1f 00 2a 	mcall	8000e37c <main+0xc4>

	ui_init();
8000e2d8:	f0 1f 00 2a 	mcall	8000e380 <main+0xc8>
	ui_powerdown();
8000e2dc:	f0 1f 00 2a 	mcall	8000e384 <main+0xcc>

	memories_initialization();
8000e2e0:	f0 1f 00 2a 	mcall	8000e388 <main+0xd0>

	// Initialize LCD
	et024006_Init( FOSC0, FOSC0 );
8000e2e4:	e0 6b 1b 00 	mov	r11,6912
8000e2e8:	ea 1b 00 b7 	orh	r11,0xb7
8000e2ec:	e0 6c 1b 00 	mov	r12,6912
8000e2f0:	ea 1c 00 b7 	orh	r12,0xb7
8000e2f4:	f0 1f 00 26 	mcall	8000e38c <main+0xd4>
	gpio_set_gpio_pin(ET024006DHU_BL_PIN);
8000e2f8:	30 9c       	mov	r12,9
8000e2fa:	f0 1f 00 26 	mcall	8000e390 <main+0xd8>
	
	//et024006_PrintConsole("Welcome Eric", BLACK, -1);
	//clear_lcd
	et024006_DrawFilledRect(1, 1, ET024006_WIDTH, ET024006_HEIGHT, BLACK);
8000e2fe:	30 08       	mov	r8,0
8000e300:	e0 69 00 f0 	mov	r9,240
8000e304:	e0 6a 01 40 	mov	r10,320
8000e308:	30 1b       	mov	r11,1
8000e30a:	30 1c       	mov	r12,1
8000e30c:	f0 1f 00 22 	mcall	8000e394 <main+0xdc>
	
	// Initialize AES module
	aes_task();
8000e310:	f0 1f 00 22 	mcall	8000e398 <main+0xe0>

	// Start TC
	tc_task();
8000e314:	f0 1f 00 22 	mcall	8000e39c <main+0xe4>

	// Initialize crc for fast calculations
	crcInit();
8000e318:	f0 1f 00 22 	mcall	8000e3a0 <main+0xe8>
		
	// Read the stored values from the flash
	Load_stored_values();
8000e31c:	f0 1f 00 22 	mcall	8000e3a4 <main+0xec>
	
	Stored_values_ram.salt[5] = 0x4d68ab23;
8000e320:	4a 28       	lddpc	r8,8000e3a8 <main+0xf0>
8000e322:	e0 69 ab 23 	mov	r9,43811
8000e326:	ea 19 4d 68 	orh	r9,0x4d68
8000e32a:	f1 49 00 b4 	st.w	r8[180],r9
	
	Update_stored_values();
8000e32e:	f0 1f 00 20 	mcall	8000e3ac <main+0xf4>
	// Start USB stack to authorize VBus monitoring
	udc_start();
8000e332:	f0 1f 00 20 	mcall	8000e3b0 <main+0xf8>

	if (!udc_include_vbus_monitoring()) {
8000e336:	f0 1f 00 20 	mcall	8000e3b4 <main+0xfc>
8000e33a:	18 98       	mov	r8,r12
8000e33c:	ec 18 00 01 	eorl	r8,0x1
8000e340:	5c 58       	castu.b	r8
8000e342:	c0 60       	breq	8000e34e <main+0x96>
		// VBUS monitoring is not available on this product
		// thereby VBUS has to be considered as present
		main_vbus_action(true);
8000e344:	30 1c       	mov	r12,1
8000e346:	f0 1f 00 1d 	mcall	8000e3b8 <main+0x100>
8000e34a:	c0 28       	rjmp	8000e34e <main+0x96>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e34c:	d7 03       	nop

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true)
	{
		if (main_b_msc_enable)
8000e34e:	49 c8       	lddpc	r8,8000e3bc <main+0x104>
8000e350:	11 88       	ld.ub	r8,r8[0x0]
8000e352:	58 08       	cp.w	r8,0
8000e354:	c0 b0       	breq	8000e36a <main+0xb2>
		{
			if (!udi_msc_process_trans())
8000e356:	f0 1f 00 1b 	mcall	8000e3c0 <main+0x108>
8000e35a:	18 98       	mov	r8,r12
8000e35c:	ec 18 00 01 	eorl	r8,0x1
8000e360:	5c 58       	castu.b	r8
8000e362:	cf 50       	breq	8000e34c <main+0x94>
			{
				sleepmgr_enter_sleep();
8000e364:	f0 1f 00 18 	mcall	8000e3c4 <main+0x10c>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e368:	cf 3b       	rjmp	8000e34e <main+0x96>
				sleepmgr_enter_sleep();
			}
		}
		else
		{
			sleepmgr_enter_sleep();
8000e36a:	f0 1f 00 17 	mcall	8000e3c4 <main+0x10c>
		}
		//main_process_mode();
	}
8000e36e:	cf 0b       	rjmp	8000e34e <main+0x96>
8000e370:	80 00       	ld.sh	r0,r0[0x0]
8000e372:	90 a0       	ld.uh	r0,r8[0x4]
8000e374:	80 00       	ld.sh	r0,r0[0x0]
8000e376:	e1 b8       	*unknown*
8000e378:	80 00       	ld.sh	r0,r0[0x0]
8000e37a:	c1 64       	brge	8000e3a6 <main+0xee>
8000e37c:	80 00       	ld.sh	r0,r0[0x0]
8000e37e:	43 f4       	lddsp	r4,sp[0xfc]
8000e380:	80 00       	ld.sh	r0,r0[0x0]
8000e382:	c3 ec       	rcall	8000e3fe <main_suspend_action+0x2>
8000e384:	80 00       	ld.sh	r0,r0[0x0]
8000e386:	c4 0c       	rcall	8000e406 <main_suspend_action+0xa>
8000e388:	80 00       	ld.sh	r0,r0[0x0]
8000e38a:	e5 40 80 00 	st.w	r2[-32768],r0
8000e38e:	45 dc       	lddsp	r12,sp[0x174]
8000e390:	80 00       	ld.sh	r0,r0[0x0]
8000e392:	8e da       	ld.uh	r10,r7[0xa]
8000e394:	80 00       	ld.sh	r0,r0[0x0]
8000e396:	46 54       	lddsp	r4,sp[0x194]
8000e398:	80 00       	ld.sh	r0,r0[0x0]
8000e39a:	42 60       	lddsp	r0,sp[0x98]
8000e39c:	80 00       	ld.sh	r0,r0[0x0]
8000e39e:	41 c8       	lddsp	r8,sp[0x70]
8000e3a0:	80 00       	ld.sh	r0,r0[0x0]
8000e3a2:	20 08       	sub	r8,0
8000e3a4:	80 00       	ld.sh	r0,r0[0x0]
8000e3a6:	2f b4       	sub	r4,-5
8000e3a8:	00 00       	add	r0,r0
8000e3aa:	0a 84       	andn	r4,r5
8000e3ac:	80 00       	ld.sh	r0,r0[0x0]
8000e3ae:	2f 90       	sub	r0,-7
8000e3b0:	80 00       	ld.sh	r0,r0[0x0]
8000e3b2:	d5 64       	*unknown*
8000e3b4:	80 00       	ld.sh	r0,r0[0x0]
8000e3b6:	e2 78 80 00 	mov	r8,229376
8000e3ba:	e3 c8 00 00 	ldm	r8++,
8000e3be:	08 60       	and	r0,r4
8000e3c0:	80 00       	ld.sh	r0,r0[0x0]
8000e3c2:	d0 60       	acall	0x18
8000e3c4:	80 00       	ld.sh	r0,r0[0x0]
8000e3c6:	e2 40 eb cd 	cp.w	r0,191437

8000e3c8 <main_vbus_action>:
}

void main_vbus_action(bool b_high)
{
8000e3c8:	eb cd 40 80 	pushm	r7,lr
8000e3cc:	1a 97       	mov	r7,sp
8000e3ce:	20 1d       	sub	sp,4
8000e3d0:	18 98       	mov	r8,r12
8000e3d2:	ef 68 ff fc 	st.b	r7[-4],r8
	if (b_high) {
8000e3d6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000e3da:	30 08       	mov	r8,0
8000e3dc:	f0 09 18 00 	cp.b	r9,r8
8000e3e0:	c0 40       	breq	8000e3e8 <main_vbus_action+0x20>
		// Attach USB Device
		udc_attach();
8000e3e2:	f0 1f 00 05 	mcall	8000e3f4 <main_vbus_action+0x2c>
8000e3e6:	c0 38       	rjmp	8000e3ec <main_vbus_action+0x24>
	} else {
		// VBUS not present
		udc_detach();
8000e3e8:	f0 1f 00 04 	mcall	8000e3f8 <main_vbus_action+0x30>
	}
}
8000e3ec:	2f fd       	sub	sp,-4
8000e3ee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e3f2:	00 00       	add	r0,r0
8000e3f4:	80 00       	ld.sh	r0,r0[0x0]
8000e3f6:	e2 90 80 00 	breq	8007e3f6 <Stored_values_flash+0x3e5f6>
8000e3fa:	e2 a4       	*unknown*

8000e3fc <main_suspend_action>:

void main_suspend_action(void)
{
8000e3fc:	eb cd 40 80 	pushm	r7,lr
8000e400:	1a 97       	mov	r7,sp
	ui_powerdown();
8000e402:	f0 1f 00 03 	mcall	8000e40c <main_suspend_action+0x10>
}
8000e406:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e40a:	00 00       	add	r0,r0
8000e40c:	80 00       	ld.sh	r0,r0[0x0]
8000e40e:	c4 0c       	rcall	8000e48e <osc_get_rate+0x6>

8000e410 <main_resume_action>:

void main_resume_action(void)
{
8000e410:	eb cd 40 80 	pushm	r7,lr
8000e414:	1a 97       	mov	r7,sp
	ui_wakeup();
8000e416:	f0 1f 00 03 	mcall	8000e420 <main_resume_action+0x10>
}
8000e41a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e41e:	00 00       	add	r0,r0
8000e420:	80 00       	ld.sh	r0,r0[0x0]
8000e422:	c4 28       	rjmp	8000e4a6 <osc_get_rate+0x1e>

8000e424 <main_sof_action>:

void main_sof_action(void)
{
8000e424:	eb cd 40 80 	pushm	r7,lr
8000e428:	1a 97       	mov	r7,sp
	if (!main_b_msc_enable)
8000e42a:	48 a8       	lddpc	r8,8000e450 <main_sof_action+0x2c>
8000e42c:	11 88       	ld.ub	r8,r8[0x0]
8000e42e:	ec 18 00 01 	eorl	r8,0x1
8000e432:	5c 58       	castu.b	r8
8000e434:	c0 a1       	brne	8000e448 <main_sof_action+0x24>
		return;
	ui_process(udd_get_frame_number());
8000e436:	f0 1f 00 08 	mcall	8000e454 <main_sof_action+0x30>
8000e43a:	18 98       	mov	r8,r12
8000e43c:	5c 88       	casts.h	r8
8000e43e:	5c 78       	castu.h	r8
8000e440:	10 9c       	mov	r12,r8
8000e442:	f0 1f 00 06 	mcall	8000e458 <main_sof_action+0x34>
8000e446:	c0 28       	rjmp	8000e44a <main_sof_action+0x26>
}

void main_sof_action(void)
{
	if (!main_b_msc_enable)
		return;
8000e448:	d7 03       	nop
	ui_process(udd_get_frame_number());
}
8000e44a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e44e:	00 00       	add	r0,r0
8000e450:	00 00       	add	r0,r0
8000e452:	08 60       	and	r0,r4
8000e454:	80 00       	ld.sh	r0,r0[0x0]
8000e456:	a0 06       	st.h	r0[0x0],r6
8000e458:	80 00       	ld.sh	r0,r0[0x0]
8000e45a:	c4 8c       	rcall	8000e4ea <sysclk_get_main_hz+0x1e>

8000e45c <main_msc_enable>:

bool main_msc_enable(void)
{
8000e45c:	eb cd 40 80 	pushm	r7,lr
8000e460:	1a 97       	mov	r7,sp
	main_b_msc_enable = true;
8000e462:	48 49       	lddpc	r9,8000e470 <main_msc_enable+0x14>
8000e464:	30 18       	mov	r8,1
8000e466:	b2 88       	st.b	r9[0x0],r8
	return true;
8000e468:	30 18       	mov	r8,1
}
8000e46a:	10 9c       	mov	r12,r8
8000e46c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e470:	00 00       	add	r0,r0
8000e472:	08 60       	and	r0,r4

8000e474 <main_msc_disable>:

void main_msc_disable(void)
{
8000e474:	eb cd 40 80 	pushm	r7,lr
8000e478:	1a 97       	mov	r7,sp
	main_b_msc_enable = false;
8000e47a:	48 39       	lddpc	r9,8000e484 <main_msc_disable+0x10>
8000e47c:	30 08       	mov	r8,0
8000e47e:	b2 88       	st.b	r9[0x0],r8
}
8000e480:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e484:	00 00       	add	r0,r0
8000e486:	08 60       	and	r0,r4

8000e488 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
8000e488:	eb cd 40 80 	pushm	r7,lr
8000e48c:	1a 97       	mov	r7,sp
8000e48e:	20 1d       	sub	sp,4
8000e490:	18 98       	mov	r8,r12
8000e492:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000e496:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000e49a:	58 18       	cp.w	r8,1
8000e49c:	c0 a0       	breq	8000e4b0 <osc_get_rate+0x28>
8000e49e:	58 28       	cp.w	r8,2
8000e4a0:	c0 d0       	breq	8000e4ba <osc_get_rate+0x32>
8000e4a2:	58 08       	cp.w	r8,0
8000e4a4:	c0 e1       	brne	8000e4c0 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000e4a6:	e0 68 1b 00 	mov	r8,6912
8000e4aa:	ea 18 00 b7 	orh	r8,0xb7
8000e4ae:	c0 a8       	rjmp	8000e4c2 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000e4b0:	e0 68 44 00 	mov	r8,17408
8000e4b4:	ea 18 00 ac 	orh	r8,0xac
8000e4b8:	c0 58       	rjmp	8000e4c2 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000e4ba:	e0 68 80 00 	mov	r8,32768
8000e4be:	c0 28       	rjmp	8000e4c2 <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000e4c0:	30 08       	mov	r8,0
	}
}
8000e4c2:	10 9c       	mov	r12,r8
8000e4c4:	2f fd       	sub	sp,-4
8000e4c6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e4ca:	d7 03       	nop

8000e4cc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000e4cc:	eb cd 40 80 	pushm	r7,lr
8000e4d0:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000e4d2:	30 0c       	mov	r12,0
8000e4d4:	f0 1f 00 06 	mcall	8000e4ec <sysclk_get_main_hz+0x20>
8000e4d8:	18 99       	mov	r9,r12
8000e4da:	12 98       	mov	r8,r9
8000e4dc:	a3 68       	lsl	r8,0x2
8000e4de:	12 08       	add	r8,r9
8000e4e0:	a1 78       	lsl	r8,0x1
8000e4e2:	12 08       	add	r8,r9
8000e4e4:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000e4e6:	10 9c       	mov	r12,r8
8000e4e8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e4ec:	80 00       	ld.sh	r0,r0[0x0]
8000e4ee:	e4 88 eb cd 	brls	800abc88 <Stored_values_flash+0x6be88>

8000e4f0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000e4f0:	eb cd 40 80 	pushm	r7,lr
8000e4f4:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000e4f6:	f0 1f 00 04 	mcall	8000e504 <sysclk_get_cpu_hz+0x14>
8000e4fa:	18 98       	mov	r8,r12
}
8000e4fc:	10 9c       	mov	r12,r8
8000e4fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e502:	00 00       	add	r0,r0
8000e504:	80 00       	ld.sh	r0,r0[0x0]
8000e506:	e4 cc eb cd 	sub	r12,r2,-5171

8000e508 <sysclk_get_pbb_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus B clock
 *
 * \return Frequency of the Peripheral Bus B clock, in Hz.
 */
static inline uint32_t sysclk_get_pbb_hz(void)
{
8000e508:	eb cd 40 80 	pushm	r7,lr
8000e50c:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBB_DIV;
8000e50e:	f0 1f 00 04 	mcall	8000e51c <sysclk_get_pbb_hz+0x14>
8000e512:	18 98       	mov	r8,r12
}
8000e514:	10 9c       	mov	r12,r8
8000e516:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e51a:	00 00       	add	r0,r0
8000e51c:	80 00       	ld.sh	r0,r0[0x0]
8000e51e:	e4 cc eb cd 	sub	r12,r2,-5171

8000e520 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000e520:	eb cd 40 80 	pushm	r7,lr
8000e524:	1a 97       	mov	r7,sp
8000e526:	20 1d       	sub	sp,4
8000e528:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000e52c:	ee fb ff fc 	ld.w	r11,r7[-4]
8000e530:	30 1c       	mov	r12,1
8000e532:	f0 1f 00 03 	mcall	8000e53c <sysclk_enable_hsb_module+0x1c>
}
8000e536:	2f fd       	sub	sp,-4
8000e538:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e53c:	80 00       	ld.sh	r0,r0[0x0]
8000e53e:	c0 3c       	rcall	8000e544 <memories_initialization+0x4>

8000e540 <memories_initialization>:
# include "spi.h"
# include "conf_sd_mmc_spi.h"
#endif

void memories_initialization(void)
{
8000e540:	eb cd 40 c0 	pushm	r6-r7,lr
8000e544:	1a 97       	mov	r7,sp
8000e546:	20 2d       	sub	sp,8
	union {
		unsigned long scfg;
		avr32_hmatrix_scfg_t SCFG;
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);
8000e548:	30 0c       	mov	r12,0
8000e54a:	f0 1f 00 42 	mcall	8000e650 <memories_initialization+0x110>

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
8000e54e:	fe 68 10 00 	mov	r8,-126976
8000e552:	71 08       	ld.w	r8,r8[0x40]
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e554:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e558:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e55c:	30 19       	mov	r9,1
8000e55e:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e562:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000e566:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e56a:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000e56e:	f1 49 00 40 	st.w	r8[64],r9
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
8000e572:	fe 68 10 00 	mov	r8,-126976
8000e576:	71 48       	ld.w	r8,r8[0x50]
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e578:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e57c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e580:	30 19       	mov	r9,1
8000e582:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e586:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000e58a:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e58e:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000e592:	f1 49 00 50 	st.w	r8[80],r9
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
8000e596:	fe 68 10 00 	mov	r8,-126976
8000e59a:	71 68       	ld.w	r8,r8[0x58]
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e59c:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e5a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e5a4:	30 19       	mov	r9,1
8000e5a6:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e5aa:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000e5ae:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e5b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000e5b6:	f1 49 00 58 	st.w	r8[88],r9
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
8000e5ba:	fe 68 10 00 	mov	r8,-126976
8000e5be:	70 68       	ld.w	r8,r8[0x18]
		unsigned long                 mcfg;
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
8000e5c0:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
8000e5c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e5c8:	30 09       	mov	r9,0
8000e5ca:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000e5ce:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000e5d2:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_mcfg.mcfg;
8000e5d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000e5da:	91 69       	st.w	r8[0x18],r9
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
8000e5dc:	fe 68 10 00 	mov	r8,-126976
8000e5e0:	71 58       	ld.w	r8,r8[0x54]
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
8000e5e2:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
8000e5e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e5ea:	30 69       	mov	r9,6
8000e5ec:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
8000e5f0:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e5f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e5f8:	30 29       	mov	r9,2
8000e5fa:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e5fe:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000e602:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e606:	ee f9 ff fc 	ld.w	r9,r7[-4]
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000e60a:	f1 49 00 54 	st.w	r8[84],r9
#endif

//#if ((defined SD_MMC_MCI_0_MEM) && (SD_MMC_MCI_0_MEM == ENABLE)) \
	//|| ((defined SD_MMC_MCI_1_MEM) && (SD_MMC_MCI_1_MEM == ENABLE))
#if ((defined (SD_MMC_MCI_0_MEM) || defined(SD_MMC_MCI_1_MEM) ) && (SD_MMC_MCI_0_MEM == ENABLE || SD_MMC_MCI_1_MEM == ENABLE))	
	sysclk_enable_pbb_module(SYSCLK_MCI);
8000e60e:	30 6c       	mov	r12,6
8000e610:	f0 1f 00 10 	mcall	8000e650 <memories_initialization+0x110>
	sysclk_enable_hsb_module(SYSCLK_DMACA);
8000e614:	30 7c       	mov	r12,7
8000e616:	f0 1f 00 10 	mcall	8000e654 <memories_initialization+0x114>
#if SD_MMC_MCI_0_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_8BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000e61a:	f0 1f 00 10 	mcall	8000e658 <memories_initialization+0x118>
8000e61e:	18 98       	mov	r8,r12
8000e620:	10 96       	mov	r6,r8
8000e622:	f0 1f 00 0f 	mcall	8000e65c <memories_initialization+0x11c>
8000e626:	18 98       	mov	r8,r12
8000e628:	0c 9a       	mov	r10,r6
8000e62a:	10 9b       	mov	r11,r8
8000e62c:	30 0c       	mov	r12,0
8000e62e:	f0 1f 00 0d 	mcall	8000e660 <memories_initialization+0x120>
#endif
#if SD_MMC_MCI_1_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_4BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000e632:	f0 1f 00 0a 	mcall	8000e658 <memories_initialization+0x118>
8000e636:	18 98       	mov	r8,r12
8000e638:	10 96       	mov	r6,r8
8000e63a:	f0 1f 00 09 	mcall	8000e65c <memories_initialization+0x11c>
8000e63e:	18 98       	mov	r8,r12
8000e640:	0c 9a       	mov	r10,r6
8000e642:	10 9b       	mov	r11,r8
8000e644:	30 1c       	mov	r12,1
8000e646:	f0 1f 00 07 	mcall	8000e660 <memories_initialization+0x120>

	// Initialize SD/MMC with SPI PB clock.
	sd_mmc_spi_init(spiOptions,sysclk_get_pba_hz());
#endif  // SD_MMC_SPI_MEM == ENABLE

}
8000e64a:	2f ed       	sub	sp,-8
8000e64c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e650:	80 00       	ld.sh	r0,r0[0x0]
8000e652:	c0 b0       	breq	8000e668 <__avr32_udiv64+0x4>
8000e654:	80 00       	ld.sh	r0,r0[0x0]
8000e656:	e5 20 80 00 	ld.sb	r0,r2[-32768]
8000e65a:	e4 f0 80 00 	ld.w	r0,r2[-32768]
8000e65e:	e5 08 80 00 	ld.sh	r8,r2[-32768]
8000e662:	66 cc       	ld.w	r12,r3[0x30]

8000e664 <__avr32_udiv64>:
8000e664:	d4 31       	pushm	r0-r7,lr
8000e666:	1a 97       	mov	r7,sp
8000e668:	20 2d       	sub	sp,8
8000e66a:	10 9e       	mov	lr,r8
8000e66c:	12 95       	mov	r5,r9
8000e66e:	14 96       	mov	r6,r10
8000e670:	58 09       	cp.w	r9,0
8000e672:	c4 91       	brne	8000e704 <__avr32_udiv64+0xa0>
8000e674:	16 38       	cp.w	r8,r11
8000e676:	e0 88 00 57 	brls	8000e724 <__avr32_udiv64+0xc0>
8000e67a:	f0 08 12 00 	clz	r8,r8
8000e67e:	c0 d0       	breq	8000e698 <__avr32_udiv64+0x34>
8000e680:	f6 08 09 4b 	lsl	r11,r11,r8
8000e684:	f0 09 11 20 	rsub	r9,r8,32
8000e688:	fc 08 09 4e 	lsl	lr,lr,r8
8000e68c:	f4 09 0a 49 	lsr	r9,r10,r9
8000e690:	f4 08 09 46 	lsl	r6,r10,r8
8000e694:	f3 eb 10 0b 	or	r11,r9,r11
8000e698:	fc 05 16 10 	lsr	r5,lr,0x10
8000e69c:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
8000e6a0:	f6 05 0d 0a 	divu	r10,r11,r5
8000e6a4:	ec 08 16 10 	lsr	r8,r6,0x10
8000e6a8:	14 99       	mov	r9,r10
8000e6aa:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e6ae:	b9 3a       	mul	r10,r12
8000e6b0:	10 3a       	cp.w	r10,r8
8000e6b2:	e0 88 00 0c 	brls	8000e6ca <__avr32_udiv64+0x66>
8000e6b6:	20 19       	sub	r9,1
8000e6b8:	1c 08       	add	r8,lr
8000e6ba:	10 3e       	cp.w	lr,r8
8000e6bc:	e0 8b 00 07 	brhi	8000e6ca <__avr32_udiv64+0x66>
8000e6c0:	10 3a       	cp.w	r10,r8
8000e6c2:	f7 b9 0b 01 	subhi	r9,1
8000e6c6:	f1 de eb 08 	addhi	r8,r8,lr
8000e6ca:	f0 0a 01 0b 	sub	r11,r8,r10
8000e6ce:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e6d2:	f6 05 0d 0a 	divu	r10,r11,r5
8000e6d6:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000e6da:	14 98       	mov	r8,r10
8000e6dc:	f4 0c 02 4c 	mul	r12,r10,r12
8000e6e0:	0c 3c       	cp.w	r12,r6
8000e6e2:	e0 88 00 0a 	brls	8000e6f6 <__avr32_udiv64+0x92>
8000e6e6:	20 18       	sub	r8,1
8000e6e8:	1c 06       	add	r6,lr
8000e6ea:	0c 3e       	cp.w	lr,r6
8000e6ec:	e0 8b 00 05 	brhi	8000e6f6 <__avr32_udiv64+0x92>
8000e6f0:	0c 3c       	cp.w	r12,r6
8000e6f2:	f7 b8 0b 01 	subhi	r8,1
8000e6f6:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000e6fa:	30 0c       	mov	r12,0
8000e6fc:	16 9a       	mov	r10,r11
8000e6fe:	18 9b       	mov	r11,r12
8000e700:	2f ed       	sub	sp,-8
8000e702:	d8 32       	popm	r0-r7,pc
8000e704:	16 39       	cp.w	r9,r11
8000e706:	e0 8b 00 51 	brhi	8000e7a8 <__avr32_udiv64+0x144>
8000e70a:	f2 0c 12 00 	clz	r12,r9
8000e70e:	c5 31       	brne	8000e7b4 <__avr32_udiv64+0x150>
8000e710:	14 38       	cp.w	r8,r10
8000e712:	5f 89       	srls	r9
8000e714:	16 35       	cp.w	r5,r11
8000e716:	5f 38       	srlo	r8
8000e718:	10 49       	or	r9,r8
8000e71a:	f8 09 18 00 	cp.b	r9,r12
8000e71e:	c4 50       	breq	8000e7a8 <__avr32_udiv64+0x144>
8000e720:	30 1b       	mov	r11,1
8000e722:	c4 58       	rjmp	8000e7ac <__avr32_udiv64+0x148>
8000e724:	58 08       	cp.w	r8,0
8000e726:	c0 51       	brne	8000e730 <__avr32_udiv64+0xcc>
8000e728:	30 19       	mov	r9,1
8000e72a:	f2 08 0d 08 	divu	r8,r9,r8
8000e72e:	10 9e       	mov	lr,r8
8000e730:	fc 08 12 00 	clz	r8,lr
8000e734:	e0 81 00 91 	brne	8000e856 <__avr32_udiv64+0x1f2>
8000e738:	1c 1b       	sub	r11,lr
8000e73a:	fc 05 16 10 	lsr	r5,lr,0x10
8000e73e:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e742:	30 1c       	mov	r12,1
8000e744:	f6 05 0d 0a 	divu	r10,r11,r5
8000e748:	ec 08 16 10 	lsr	r8,r6,0x10
8000e74c:	f4 09 02 43 	mul	r3,r10,r9
8000e750:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e754:	14 9b       	mov	r11,r10
8000e756:	10 33       	cp.w	r3,r8
8000e758:	e0 88 00 0c 	brls	8000e770 <__avr32_udiv64+0x10c>
8000e75c:	20 1b       	sub	r11,1
8000e75e:	1c 08       	add	r8,lr
8000e760:	10 3e       	cp.w	lr,r8
8000e762:	e0 8b 00 07 	brhi	8000e770 <__avr32_udiv64+0x10c>
8000e766:	10 33       	cp.w	r3,r8
8000e768:	f7 bb 0b 01 	subhi	r11,1
8000e76c:	f1 de eb 08 	addhi	r8,r8,lr
8000e770:	f0 03 01 03 	sub	r3,r8,r3
8000e774:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e778:	e6 05 0d 02 	divu	r2,r3,r5
8000e77c:	ed e3 11 06 	or	r6,r6,r3<<0x10
8000e780:	04 98       	mov	r8,r2
8000e782:	e4 09 02 49 	mul	r9,r2,r9
8000e786:	0c 39       	cp.w	r9,r6
8000e788:	e0 88 00 0a 	brls	8000e79c <__avr32_udiv64+0x138>
8000e78c:	20 18       	sub	r8,1
8000e78e:	1c 06       	add	r6,lr
8000e790:	0c 3e       	cp.w	lr,r6
8000e792:	e0 8b 00 05 	brhi	8000e79c <__avr32_udiv64+0x138>
8000e796:	0c 39       	cp.w	r9,r6
8000e798:	f7 b8 0b 01 	subhi	r8,1
8000e79c:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000e7a0:	16 9a       	mov	r10,r11
8000e7a2:	18 9b       	mov	r11,r12
8000e7a4:	2f ed       	sub	sp,-8
8000e7a6:	d8 32       	popm	r0-r7,pc
8000e7a8:	30 0b       	mov	r11,0
8000e7aa:	16 9c       	mov	r12,r11
8000e7ac:	16 9a       	mov	r10,r11
8000e7ae:	18 9b       	mov	r11,r12
8000e7b0:	2f ed       	sub	sp,-8
8000e7b2:	d8 32       	popm	r0-r7,pc
8000e7b4:	f2 0c 09 45 	lsl	r5,r9,r12
8000e7b8:	f8 0e 11 20 	rsub	lr,r12,32
8000e7bc:	f0 0c 09 43 	lsl	r3,r8,r12
8000e7c0:	f4 0e 0a 46 	lsr	r6,r10,lr
8000e7c4:	f0 0e 0a 48 	lsr	r8,r8,lr
8000e7c8:	f6 0e 0a 4e 	lsr	lr,r11,lr
8000e7cc:	0a 48       	or	r8,r5
8000e7ce:	f0 01 16 10 	lsr	r1,r8,0x10
8000e7d2:	fc 01 0d 04 	divu	r4,lr,r1
8000e7d6:	ee e5 ff f8 	st.d	r7[-8],r4
8000e7da:	f6 0c 09 49 	lsl	r9,r11,r12
8000e7de:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000e7e2:	ed e9 10 09 	or	r9,r6,r9
8000e7e6:	08 96       	mov	r6,r4
8000e7e8:	f2 0e 16 10 	lsr	lr,r9,0x10
8000e7ec:	ee f4 ff f8 	ld.w	r4,r7[-8]
8000e7f0:	ec 05 02 4b 	mul	r11,r6,r5
8000e7f4:	fd e4 11 0e 	or	lr,lr,r4<<0x10
8000e7f8:	1c 3b       	cp.w	r11,lr
8000e7fa:	e0 88 00 07 	brls	8000e808 <__avr32_udiv64+0x1a4>
8000e7fe:	20 16       	sub	r6,1
8000e800:	10 0e       	add	lr,r8
8000e802:	1c 38       	cp.w	r8,lr
8000e804:	e0 88 00 6d 	brls	8000e8de <__avr32_udiv64+0x27a>
8000e808:	16 1e       	sub	lr,r11
8000e80a:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000e80e:	fc 01 0d 00 	divu	r0,lr,r1
8000e812:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000e816:	00 9b       	mov	r11,r0
8000e818:	e0 05 02 4e 	mul	lr,r0,r5
8000e81c:	12 3e       	cp.w	lr,r9
8000e81e:	e0 88 00 07 	brls	8000e82c <__avr32_udiv64+0x1c8>
8000e822:	20 1b       	sub	r11,1
8000e824:	10 09       	add	r9,r8
8000e826:	12 38       	cp.w	r8,r9
8000e828:	e0 88 00 55 	brls	8000e8d2 <__avr32_udiv64+0x26e>
8000e82c:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
8000e830:	1c 19       	sub	r9,lr
8000e832:	f6 03 06 42 	mulu.d	r2,r11,r3
8000e836:	06 39       	cp.w	r9,r3
8000e838:	c0 93       	brcs	8000e84a <__avr32_udiv64+0x1e6>
8000e83a:	5f 09       	sreq	r9
8000e83c:	f4 0c 09 4c 	lsl	r12,r10,r12
8000e840:	04 3c       	cp.w	r12,r2
8000e842:	5f 38       	srlo	r8
8000e844:	f3 e8 00 08 	and	r8,r9,r8
8000e848:	c0 20       	breq	8000e84c <__avr32_udiv64+0x1e8>
8000e84a:	20 1b       	sub	r11,1
8000e84c:	30 0c       	mov	r12,0
8000e84e:	16 9a       	mov	r10,r11
8000e850:	18 9b       	mov	r11,r12
8000e852:	2f ed       	sub	sp,-8
8000e854:	d8 32       	popm	r0-r7,pc
8000e856:	f6 08 09 49 	lsl	r9,r11,r8
8000e85a:	fc 08 09 4e 	lsl	lr,lr,r8
8000e85e:	f0 01 11 20 	rsub	r1,r8,32
8000e862:	fc 05 16 10 	lsr	r5,lr,0x10
8000e866:	f4 01 0a 42 	lsr	r2,r10,r1
8000e86a:	f6 01 0a 41 	lsr	r1,r11,r1
8000e86e:	12 42       	or	r2,r9
8000e870:	e2 05 0d 00 	divu	r0,r1,r5
8000e874:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e878:	e4 06 16 10 	lsr	r6,r2,0x10
8000e87c:	00 93       	mov	r3,r0
8000e87e:	ed e1 11 06 	or	r6,r6,r1<<0x10
8000e882:	e0 09 02 4c 	mul	r12,r0,r9
8000e886:	0c 3c       	cp.w	r12,r6
8000e888:	e0 88 00 07 	brls	8000e896 <__avr32_udiv64+0x232>
8000e88c:	20 13       	sub	r3,1
8000e88e:	1c 06       	add	r6,lr
8000e890:	0c 3e       	cp.w	lr,r6
8000e892:	e0 88 00 2c 	brls	8000e8ea <__avr32_udiv64+0x286>
8000e896:	ec 0c 01 01 	sub	r1,r6,r12
8000e89a:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000e89e:	e2 05 0d 00 	divu	r0,r1,r5
8000e8a2:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000e8a6:	00 9c       	mov	r12,r0
8000e8a8:	e0 09 02 41 	mul	r1,r0,r9
8000e8ac:	16 31       	cp.w	r1,r11
8000e8ae:	e0 88 00 0c 	brls	8000e8c6 <__avr32_udiv64+0x262>
8000e8b2:	20 1c       	sub	r12,1
8000e8b4:	1c 0b       	add	r11,lr
8000e8b6:	16 3e       	cp.w	lr,r11
8000e8b8:	e0 8b 00 07 	brhi	8000e8c6 <__avr32_udiv64+0x262>
8000e8bc:	16 31       	cp.w	r1,r11
8000e8be:	f7 bc 0b 01 	subhi	r12,1
8000e8c2:	f7 de eb 0b 	addhi	r11,r11,lr
8000e8c6:	f4 08 09 46 	lsl	r6,r10,r8
8000e8ca:	02 1b       	sub	r11,r1
8000e8cc:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
8000e8d0:	c3 ab       	rjmp	8000e744 <__avr32_udiv64+0xe0>
8000e8d2:	12 3e       	cp.w	lr,r9
8000e8d4:	f3 d8 eb 09 	addhi	r9,r9,r8
8000e8d8:	f7 bb 0b 01 	subhi	r11,1
8000e8dc:	ca 8b       	rjmp	8000e82c <__avr32_udiv64+0x1c8>
8000e8de:	1c 3b       	cp.w	r11,lr
8000e8e0:	f7 b6 0b 01 	subhi	r6,1
8000e8e4:	fd d8 eb 0e 	addhi	lr,lr,r8
8000e8e8:	c9 0b       	rjmp	8000e808 <__avr32_udiv64+0x1a4>
8000e8ea:	0c 3c       	cp.w	r12,r6
8000e8ec:	f7 b3 0b 01 	subhi	r3,1
8000e8f0:	ed de eb 06 	addhi	r6,r6,lr
8000e8f4:	cd 1b       	rjmp	8000e896 <__avr32_udiv64+0x232>

8000e8f6 <memcpy>:
8000e8f6:	58 8a       	cp.w	r10,8
8000e8f8:	c2 f5       	brlt	8000e956 <memcpy+0x60>
8000e8fa:	f9 eb 10 09 	or	r9,r12,r11
8000e8fe:	e2 19 00 03 	andl	r9,0x3,COH
8000e902:	e0 81 00 97 	brne	8000ea30 <memcpy+0x13a>
8000e906:	e0 4a 00 20 	cp.w	r10,32
8000e90a:	c3 b4       	brge	8000e980 <memcpy+0x8a>
8000e90c:	f4 08 14 02 	asr	r8,r10,0x2
8000e910:	f0 09 11 08 	rsub	r9,r8,8
8000e914:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000e918:	76 69       	ld.w	r9,r11[0x18]
8000e91a:	99 69       	st.w	r12[0x18],r9
8000e91c:	76 59       	ld.w	r9,r11[0x14]
8000e91e:	99 59       	st.w	r12[0x14],r9
8000e920:	76 49       	ld.w	r9,r11[0x10]
8000e922:	99 49       	st.w	r12[0x10],r9
8000e924:	76 39       	ld.w	r9,r11[0xc]
8000e926:	99 39       	st.w	r12[0xc],r9
8000e928:	76 29       	ld.w	r9,r11[0x8]
8000e92a:	99 29       	st.w	r12[0x8],r9
8000e92c:	76 19       	ld.w	r9,r11[0x4]
8000e92e:	99 19       	st.w	r12[0x4],r9
8000e930:	76 09       	ld.w	r9,r11[0x0]
8000e932:	99 09       	st.w	r12[0x0],r9
8000e934:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000e938:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000e93c:	e0 1a 00 03 	andl	r10,0x3
8000e940:	f4 0a 11 04 	rsub	r10,r10,4
8000e944:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000e948:	17 a9       	ld.ub	r9,r11[0x2]
8000e94a:	b0 a9       	st.b	r8[0x2],r9
8000e94c:	17 99       	ld.ub	r9,r11[0x1]
8000e94e:	b0 99       	st.b	r8[0x1],r9
8000e950:	17 89       	ld.ub	r9,r11[0x0]
8000e952:	b0 89       	st.b	r8[0x0],r9
8000e954:	5e fc       	retal	r12
8000e956:	f4 0a 11 09 	rsub	r10,r10,9
8000e95a:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000e95e:	17 f9       	ld.ub	r9,r11[0x7]
8000e960:	b8 f9       	st.b	r12[0x7],r9
8000e962:	17 e9       	ld.ub	r9,r11[0x6]
8000e964:	b8 e9       	st.b	r12[0x6],r9
8000e966:	17 d9       	ld.ub	r9,r11[0x5]
8000e968:	b8 d9       	st.b	r12[0x5],r9
8000e96a:	17 c9       	ld.ub	r9,r11[0x4]
8000e96c:	b8 c9       	st.b	r12[0x4],r9
8000e96e:	17 b9       	ld.ub	r9,r11[0x3]
8000e970:	b8 b9       	st.b	r12[0x3],r9
8000e972:	17 a9       	ld.ub	r9,r11[0x2]
8000e974:	b8 a9       	st.b	r12[0x2],r9
8000e976:	17 99       	ld.ub	r9,r11[0x1]
8000e978:	b8 99       	st.b	r12[0x1],r9
8000e97a:	17 89       	ld.ub	r9,r11[0x0]
8000e97c:	b8 89       	st.b	r12[0x0],r9
8000e97e:	5e fc       	retal	r12
8000e980:	eb cd 40 c0 	pushm	r6-r7,lr
8000e984:	18 99       	mov	r9,r12
8000e986:	22 0a       	sub	r10,32
8000e988:	b7 07       	ld.d	r6,r11++
8000e98a:	b3 26       	st.d	r9++,r6
8000e98c:	b7 07       	ld.d	r6,r11++
8000e98e:	b3 26       	st.d	r9++,r6
8000e990:	b7 07       	ld.d	r6,r11++
8000e992:	b3 26       	st.d	r9++,r6
8000e994:	b7 07       	ld.d	r6,r11++
8000e996:	b3 26       	st.d	r9++,r6
8000e998:	22 0a       	sub	r10,32
8000e99a:	cf 74       	brge	8000e988 <memcpy+0x92>
8000e99c:	2f 0a       	sub	r10,-16
8000e99e:	c0 65       	brlt	8000e9aa <memcpy+0xb4>
8000e9a0:	b7 07       	ld.d	r6,r11++
8000e9a2:	b3 26       	st.d	r9++,r6
8000e9a4:	b7 07       	ld.d	r6,r11++
8000e9a6:	b3 26       	st.d	r9++,r6
8000e9a8:	21 0a       	sub	r10,16
8000e9aa:	5c 3a       	neg	r10
8000e9ac:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000e9b0:	d7 03       	nop
8000e9b2:	d7 03       	nop
8000e9b4:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000e9b8:	f3 66 00 0e 	st.b	r9[14],r6
8000e9bc:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000e9c0:	f3 66 00 0d 	st.b	r9[13],r6
8000e9c4:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000e9c8:	f3 66 00 0c 	st.b	r9[12],r6
8000e9cc:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000e9d0:	f3 66 00 0b 	st.b	r9[11],r6
8000e9d4:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000e9d8:	f3 66 00 0a 	st.b	r9[10],r6
8000e9dc:	f7 36 00 09 	ld.ub	r6,r11[9]
8000e9e0:	f3 66 00 09 	st.b	r9[9],r6
8000e9e4:	f7 36 00 08 	ld.ub	r6,r11[8]
8000e9e8:	f3 66 00 08 	st.b	r9[8],r6
8000e9ec:	f7 36 00 07 	ld.ub	r6,r11[7]
8000e9f0:	f3 66 00 07 	st.b	r9[7],r6
8000e9f4:	f7 36 00 06 	ld.ub	r6,r11[6]
8000e9f8:	f3 66 00 06 	st.b	r9[6],r6
8000e9fc:	f7 36 00 05 	ld.ub	r6,r11[5]
8000ea00:	f3 66 00 05 	st.b	r9[5],r6
8000ea04:	f7 36 00 04 	ld.ub	r6,r11[4]
8000ea08:	f3 66 00 04 	st.b	r9[4],r6
8000ea0c:	f7 36 00 03 	ld.ub	r6,r11[3]
8000ea10:	f3 66 00 03 	st.b	r9[3],r6
8000ea14:	f7 36 00 02 	ld.ub	r6,r11[2]
8000ea18:	f3 66 00 02 	st.b	r9[2],r6
8000ea1c:	f7 36 00 01 	ld.ub	r6,r11[1]
8000ea20:	f3 66 00 01 	st.b	r9[1],r6
8000ea24:	f7 36 00 00 	ld.ub	r6,r11[0]
8000ea28:	f3 66 00 00 	st.b	r9[0],r6
8000ea2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ea30:	20 1a       	sub	r10,1
8000ea32:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000ea36:	f8 0a 0b 09 	st.b	r12[r10],r9
8000ea3a:	cf b1       	brne	8000ea30 <memcpy+0x13a>
8000ea3c:	5e fc       	retal	r12

8000ea3e <memset>:
8000ea3e:	18 98       	mov	r8,r12
8000ea40:	c0 38       	rjmp	8000ea46 <memset+0x8>
8000ea42:	10 cb       	st.b	r8++,r11
8000ea44:	20 1a       	sub	r10,1
8000ea46:	58 0a       	cp.w	r10,0
8000ea48:	cf d1       	brne	8000ea42 <memset+0x4>
8000ea4a:	5e fc       	retal	r12

Disassembly of section .exception:

8000ec00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000ec00:	c0 08       	rjmp	8000ec00 <_evba>
	...

8000ec04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000ec04:	c0 08       	rjmp	8000ec04 <_handle_TLB_Multiple_Hit>
	...

8000ec08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000ec08:	c0 08       	rjmp	8000ec08 <_handle_Bus_Error_Data_Fetch>
	...

8000ec0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000ec0c:	c0 08       	rjmp	8000ec0c <_handle_Bus_Error_Instruction_Fetch>
	...

8000ec10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000ec10:	c0 08       	rjmp	8000ec10 <_handle_NMI>
	...

8000ec14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000ec14:	c0 08       	rjmp	8000ec14 <_handle_Instruction_Address>
	...

8000ec18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000ec18:	c0 08       	rjmp	8000ec18 <_handle_ITLB_Protection>
	...

8000ec1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000ec1c:	c0 08       	rjmp	8000ec1c <_handle_Breakpoint>
	...

8000ec20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000ec20:	c0 08       	rjmp	8000ec20 <_handle_Illegal_Opcode>
	...

8000ec24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000ec24:	c0 08       	rjmp	8000ec24 <_handle_Unimplemented_Instruction>
	...

8000ec28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000ec28:	c0 08       	rjmp	8000ec28 <_handle_Privilege_Violation>
	...

8000ec2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000ec2c:	c0 08       	rjmp	8000ec2c <_handle_Floating_Point>
	...

8000ec30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000ec30:	c0 08       	rjmp	8000ec30 <_handle_Coprocessor_Absent>
	...

8000ec34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000ec34:	c0 08       	rjmp	8000ec34 <_handle_Data_Address_Read>
	...

8000ec38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000ec38:	c0 08       	rjmp	8000ec38 <_handle_Data_Address_Write>
	...

8000ec3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000ec3c:	c0 08       	rjmp	8000ec3c <_handle_DTLB_Protection_Read>
	...

8000ec40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000ec40:	c0 08       	rjmp	8000ec40 <_handle_DTLB_Protection_Write>
	...

8000ec44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000ec44:	c0 08       	rjmp	8000ec44 <_handle_DTLB_Modified>
	...

8000ec50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000ec50:	c0 08       	rjmp	8000ec50 <_handle_ITLB_Miss>
	...

8000ec60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000ec60:	c0 08       	rjmp	8000ec60 <_handle_DTLB_Miss_Read>
	...

8000ec70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000ec70:	c0 08       	rjmp	8000ec70 <_handle_DTLB_Miss_Write>
	...

8000ed00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000ed00:	c0 08       	rjmp	8000ed00 <_handle_Supervisor_Call>
8000ed02:	d7 03       	nop

8000ed04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000ed04:	30 0c       	mov	r12,0
8000ed06:	fe b0 d1 8b 	rcall	8000901c <_get_interrupt_handler>
8000ed0a:	58 0c       	cp.w	r12,0
8000ed0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000ed10:	d6 03       	rete

8000ed12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000ed12:	30 1c       	mov	r12,1
8000ed14:	fe b0 d1 84 	rcall	8000901c <_get_interrupt_handler>
8000ed18:	58 0c       	cp.w	r12,0
8000ed1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000ed1e:	d6 03       	rete

8000ed20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000ed20:	30 2c       	mov	r12,2
8000ed22:	fe b0 d1 7d 	rcall	8000901c <_get_interrupt_handler>
8000ed26:	58 0c       	cp.w	r12,0
8000ed28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000ed2c:	d6 03       	rete

8000ed2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000ed2e:	30 3c       	mov	r12,3
8000ed30:	fe b0 d1 76 	rcall	8000901c <_get_interrupt_handler>
8000ed34:	58 0c       	cp.w	r12,0
8000ed36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000ed3a:	d6 03       	rete
8000ed3c:	d7 03       	nop
8000ed3e:	d7 03       	nop
8000ed40:	d7 03       	nop
8000ed42:	d7 03       	nop
8000ed44:	d7 03       	nop
8000ed46:	d7 03       	nop
8000ed48:	d7 03       	nop
8000ed4a:	d7 03       	nop
8000ed4c:	d7 03       	nop
8000ed4e:	d7 03       	nop
8000ed50:	d7 03       	nop
8000ed52:	d7 03       	nop
8000ed54:	d7 03       	nop
8000ed56:	d7 03       	nop
8000ed58:	d7 03       	nop
8000ed5a:	d7 03       	nop
8000ed5c:	d7 03       	nop
8000ed5e:	d7 03       	nop
8000ed60:	d7 03       	nop
8000ed62:	d7 03       	nop
8000ed64:	d7 03       	nop
8000ed66:	d7 03       	nop
8000ed68:	d7 03       	nop
8000ed6a:	d7 03       	nop
8000ed6c:	d7 03       	nop
8000ed6e:	d7 03       	nop
8000ed70:	d7 03       	nop
8000ed72:	d7 03       	nop
8000ed74:	d7 03       	nop
8000ed76:	d7 03       	nop
8000ed78:	d7 03       	nop
8000ed7a:	d7 03       	nop
8000ed7c:	d7 03       	nop
8000ed7e:	d7 03       	nop
8000ed80:	d7 03       	nop
8000ed82:	d7 03       	nop
8000ed84:	d7 03       	nop
8000ed86:	d7 03       	nop
8000ed88:	d7 03       	nop
8000ed8a:	d7 03       	nop
8000ed8c:	d7 03       	nop
8000ed8e:	d7 03       	nop
8000ed90:	d7 03       	nop
8000ed92:	d7 03       	nop
8000ed94:	d7 03       	nop
8000ed96:	d7 03       	nop
8000ed98:	d7 03       	nop
8000ed9a:	d7 03       	nop
8000ed9c:	d7 03       	nop
8000ed9e:	d7 03       	nop
8000eda0:	d7 03       	nop
8000eda2:	d7 03       	nop
8000eda4:	d7 03       	nop
8000eda6:	d7 03       	nop
8000eda8:	d7 03       	nop
8000edaa:	d7 03       	nop
8000edac:	d7 03       	nop
8000edae:	d7 03       	nop
8000edb0:	d7 03       	nop
8000edb2:	d7 03       	nop
8000edb4:	d7 03       	nop
8000edb6:	d7 03       	nop
8000edb8:	d7 03       	nop
8000edba:	d7 03       	nop
8000edbc:	d7 03       	nop
8000edbe:	d7 03       	nop
8000edc0:	d7 03       	nop
8000edc2:	d7 03       	nop
8000edc4:	d7 03       	nop
8000edc6:	d7 03       	nop
8000edc8:	d7 03       	nop
8000edca:	d7 03       	nop
8000edcc:	d7 03       	nop
8000edce:	d7 03       	nop
8000edd0:	d7 03       	nop
8000edd2:	d7 03       	nop
8000edd4:	d7 03       	nop
8000edd6:	d7 03       	nop
8000edd8:	d7 03       	nop
8000edda:	d7 03       	nop
8000eddc:	d7 03       	nop
8000edde:	d7 03       	nop
8000ede0:	d7 03       	nop
8000ede2:	d7 03       	nop
8000ede4:	d7 03       	nop
8000ede6:	d7 03       	nop
8000ede8:	d7 03       	nop
8000edea:	d7 03       	nop
8000edec:	d7 03       	nop
8000edee:	d7 03       	nop
8000edf0:	d7 03       	nop
8000edf2:	d7 03       	nop
8000edf4:	d7 03       	nop
8000edf6:	d7 03       	nop
8000edf8:	d7 03       	nop
8000edfa:	d7 03       	nop
8000edfc:	d7 03       	nop
8000edfe:	d7 03       	nop
