
default-cryptx2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b28c  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000d400  8000d400  0000d800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007c8  8000d600  8000d600  0000da00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000118  00000008  8000ddc8  0000e408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ac8  00000120  00000120  00000000  2**2
                  ALLOC
  8 .heap         0000e418  00000be8  00000be8  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000e520  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001110  00000000  00000000  0000e550  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00002385  00000000  00000000  0000f660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000235e5  00000000  00000000  000119e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fd7  00000000  00000000  00034fca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006b94  00000000  00000000  00037fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003430  00000000  00000000  0003eb38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000983a  00000000  00000000  00041f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000052f0  00000000  00000000  0004b7a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 19 .debug_ranges 000010f8  00000000  00000000  00050a98  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	a1 ec       	*unknown*

Disassembly of section .text:

80002008 <random_lcg>:
volatile uint32_t var_W = 0xFFFFFFFF;
volatile uint32_t var_W_ticks = 0;
volatile uint256_t var_Salt;

uint32_t random_lcg (void)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
	rseed = (rseed * 1103515245 + 12345) & RAND_MAX;
8000200e:	48 a8       	lddpc	r8,80002034 <random_lcg+0x2c>
80002010:	70 09       	ld.w	r9,r8[0x0]
80002012:	e0 68 4e 6d 	mov	r8,20077
80002016:	ea 18 41 c6 	orh	r8,0x41c6
8000201a:	f2 08 02 48 	mul	r8,r9,r8
8000201e:	f0 c8 cf c7 	sub	r8,r8,-12345
80002022:	f3 d8 c0 1f 	bfextu	r9,r8,0x0,0x1f
80002026:	48 48       	lddpc	r8,80002034 <random_lcg+0x2c>
80002028:	91 09       	st.w	r8[0x0],r9
	return rseed;
8000202a:	48 38       	lddpc	r8,80002034 <random_lcg+0x2c>
8000202c:	70 08       	ld.w	r8,r8[0x0]
}
8000202e:	10 9c       	mov	r12,r8
80002030:	e3 cd 80 80 	ldm	sp++,r7,pc
80002034:	00 00       	add	r0,r0
80002036:	01 44       	ld.w	r4,--r0

80002038 <calculate_salt>:

//void random_256 ()

void calculate_salt(void)
{
80002038:	eb cd 40 80 	pushm	r7,lr
8000203c:	1a 97       	mov	r7,sp
8000203e:	20 1d       	sub	sp,4
	uint32_t random_value = 0;
80002040:	30 08       	mov	r8,0
80002042:	ef 48 ff fc 	st.w	r7[-4],r8
	calculate_hash(pass_code, 8, var_Hkey.index); // Calculates sha256 of the keys pressed in var_W*10 msec interval and stores it in var_Hkey
80002046:	49 78       	lddpc	r8,800020a0 <calculate_salt+0x68>
80002048:	10 9a       	mov	r10,r8
8000204a:	30 8b       	mov	r11,8
8000204c:	49 6c       	lddpc	r12,800020a4 <calculate_salt+0x6c>
8000204e:	f0 1f 00 17 	mcall	800020a8 <calculate_salt+0x70>
 	
	random_value = random_lcg();	
80002052:	f0 1f 00 17 	mcall	800020ac <calculate_salt+0x74>
80002056:	18 98       	mov	r8,r12
80002058:	ef 48 ff fc 	st.w	r7[-4],r8
	
	calculate_hash(&random_value, 1, var_R.index);
8000205c:	49 59       	lddpc	r9,800020b0 <calculate_salt+0x78>
8000205e:	ee c8 00 04 	sub	r8,r7,4
80002062:	12 9a       	mov	r10,r9
80002064:	30 1b       	mov	r11,1
80002066:	10 9c       	mov	r12,r8
80002068:	f0 1f 00 10 	mcall	800020a8 <calculate_salt+0x70>
	
	xor_func(var_R.index, var_Hkey.index, 8);
8000206c:	48 d9       	lddpc	r9,800020a0 <calculate_salt+0x68>
8000206e:	49 18       	lddpc	r8,800020b0 <calculate_salt+0x78>
80002070:	30 8a       	mov	r10,8
80002072:	12 9b       	mov	r11,r9
80002074:	10 9c       	mov	r12,r8
80002076:	f0 1f 00 10 	mcall	800020b4 <calculate_salt+0x7c>
	
	calculate_hash(var_R.index, 8, var_T.index);
8000207a:	49 09       	lddpc	r9,800020b8 <calculate_salt+0x80>
8000207c:	48 d8       	lddpc	r8,800020b0 <calculate_salt+0x78>
8000207e:	12 9a       	mov	r10,r9
80002080:	30 8b       	mov	r11,8
80002082:	10 9c       	mov	r12,r8
80002084:	f0 1f 00 09 	mcall	800020a8 <calculate_salt+0x70>
 	
	xor_func(var_Salt.index, var_T.index, 8);
80002088:	48 c9       	lddpc	r9,800020b8 <calculate_salt+0x80>
8000208a:	48 d8       	lddpc	r8,800020bc <calculate_salt+0x84>
8000208c:	30 8a       	mov	r10,8
8000208e:	12 9b       	mov	r11,r9
80002090:	10 9c       	mov	r12,r8
80002092:	f0 1f 00 09 	mcall	800020b4 <calculate_salt+0x7c>
		
	Start_W_timer();
80002096:	f0 1f 00 0b 	mcall	800020c0 <calculate_salt+0x88>
}
8000209a:	2f fd       	sub	sp,-4
8000209c:	e3 cd 80 80 	ldm	sp++,r7,pc
800020a0:	00 00       	add	r0,r0
800020a2:	07 0c       	ld.w	r12,r3++
800020a4:	00 00       	add	r0,r0
800020a6:	01 20       	ld.uh	r0,r0++
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	21 74       	sub	r4,23
800020ac:	80 00       	ld.sh	r0,r0[0x0]
800020ae:	20 08       	sub	r8,0
800020b0:	00 00       	add	r0,r0
800020b2:	07 4c       	ld.w	r12,--r3
800020b4:	80 00       	ld.sh	r0,r0[0x0]
800020b6:	20 c4       	sub	r4,12
800020b8:	00 00       	add	r0,r0
800020ba:	07 2c       	ld.uh	r12,r3++
800020bc:	00 00       	add	r0,r0
800020be:	07 6c       	ld.uh	r12,--r3
800020c0:	80 00       	ld.sh	r0,r0[0x0]
800020c2:	21 30       	sub	r0,19

800020c4 <xor_func>:

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
800020c4:	eb cd 40 80 	pushm	r7,lr
800020c8:	1a 97       	mov	r7,sp
800020ca:	20 4d       	sub	sp,16
800020cc:	ef 4c ff f8 	st.w	r7[-8],r12
800020d0:	ef 4b ff f4 	st.w	r7[-12],r11
800020d4:	14 98       	mov	r8,r10
800020d6:	ef 68 ff f0 	st.b	r7[-16],r8
	unsigned char i = 0;
800020da:	30 08       	mov	r8,0
800020dc:	ef 68 ff ff 	st.b	r7[-1],r8
	while (i++ < len)
800020e0:	c1 58       	rjmp	8000210a <xor_func+0x46>
	{
		*value1 = *value1 ^ *value2;
800020e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020e6:	70 09       	ld.w	r9,r8[0x0]
800020e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800020ec:	70 08       	ld.w	r8,r8[0x0]
800020ee:	10 59       	eor	r9,r8
800020f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020f4:	91 09       	st.w	r8[0x0],r9
		value1++;	value2++;
800020f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020fa:	2f c8       	sub	r8,-4
800020fc:	ef 48 ff f8 	st.w	r7[-8],r8
80002100:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002104:	2f c8       	sub	r8,-4
80002106:	ef 48 ff f4 	st.w	r7[-12],r8
}

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
	unsigned char i = 0;
	while (i++ < len)
8000210a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000210e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002112:	f0 09 18 00 	cp.b	r9,r8
80002116:	5f 38       	srlo	r8
80002118:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000211c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002120:	2f f8       	sub	r8,-1
80002122:	ef 68 ff ff 	st.b	r7[-1],r8
80002126:	58 09       	cp.w	r9,0
80002128:	cd d1       	brne	800020e2 <xor_func+0x1e>
	{
		*value1 = *value1 ^ *value2;
		value1++;	value2++;
	}
}
8000212a:	2f cd       	sub	sp,-16
8000212c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002130 <Start_W_timer>:

void Start_W_timer(void)
{
80002130:	eb cd 40 80 	pushm	r7,lr
80002134:	1a 97       	mov	r7,sp
	var_W = random_lcg() % 500 + 50;
80002136:	f0 1f 00 0d 	mcall	80002168 <Start_W_timer+0x38>
8000213a:	18 9a       	mov	r10,r12
8000213c:	e0 68 4d d3 	mov	r8,19923
80002140:	ea 18 10 62 	orh	r8,0x1062
80002144:	f4 08 06 48 	mulu.d	r8,r10,r8
80002148:	f2 08 16 05 	lsr	r8,r9,0x5
8000214c:	e0 69 01 f4 	mov	r9,500
80002150:	b3 38       	mul	r8,r9
80002152:	f4 08 01 08 	sub	r8,r10,r8
80002156:	f0 c9 ff ce 	sub	r9,r8,-50
8000215a:	48 58       	lddpc	r8,8000216c <Start_W_timer+0x3c>
8000215c:	91 09       	st.w	r8[0x0],r9
	var_W_ticks = 0;	
8000215e:	48 58       	lddpc	r8,80002170 <Start_W_timer+0x40>
80002160:	30 09       	mov	r9,0
80002162:	91 09       	st.w	r8[0x0],r9
80002164:	e3 cd 80 80 	ldm	sp++,r7,pc
80002168:	80 00       	ld.sh	r0,r0[0x0]
8000216a:	20 08       	sub	r8,0
8000216c:	00 00       	add	r0,r0
8000216e:	00 08       	add	r8,r0
80002170:	00 00       	add	r0,r0
80002172:	01 48       	ld.w	r8,--r0

80002174 <calculate_hash>:
unsigned long Rotate_right (unsigned long number, int bits);



 void calculate_hash (uint32_t *input_array, uint8_t length, uint32_t *output_array)
 {
80002174:	eb cd 40 c0 	pushm	r6-r7,lr
80002178:	1a 97       	mov	r7,sp
8000217a:	20 ed       	sub	sp,56
8000217c:	ef 4c ff d0 	st.w	r7[-48],r12
80002180:	16 98       	mov	r8,r11
80002182:	ef 4a ff c8 	st.w	r7[-56],r10
80002186:	ef 68 ff cc 	st.b	r7[-52],r8
	 int i;
	 unsigned long int S0, S1;
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
8000218a:	fe f8 03 8a 	ld.w	r8,pc[906]
8000218e:	ef 48 ff e0 	st.w	r7[-32],r8
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
80002192:	fe f8 03 86 	ld.w	r8,pc[902]
80002196:	ef 48 ff ec 	st.w	r7[-20],r8
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
8000219a:	30 08       	mov	r8,0
8000219c:	ef 48 ff d4 	st.w	r7[-44],r8
800021a0:	c1 68       	rjmp	800021cc <calculate_hash+0x58>
	 {
		 Key_ptr[i] = input_array[i];
800021a2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800021a6:	a3 68       	lsl	r8,0x2
800021a8:	ee f9 ff e0 	ld.w	r9,r7[-32]
800021ac:	f2 08 00 08 	add	r8,r9,r8
800021b0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800021b4:	a3 69       	lsl	r9,0x2
800021b6:	ee fa ff d0 	ld.w	r10,r7[-48]
800021ba:	f4 09 00 09 	add	r9,r10,r9
800021be:	72 09       	ld.w	r9,r9[0x0]
800021c0:	91 09       	st.w	r8[0x0],r9
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
800021c2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800021c6:	2f f8       	sub	r8,-1
800021c8:	ef 48 ff d4 	st.w	r7[-44],r8
800021cc:	ef 39 ff cc 	ld.ub	r9,r7[-52]
800021d0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800021d4:	10 39       	cp.w	r9,r8
800021d6:	fe 99 ff e6 	brgt	800021a2 <calculate_hash+0x2e>
	 {
		 Key_ptr[i] = input_array[i];
	 }
	 
	 PadtheMessage(length << 2);
800021da:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800021de:	a3 68       	lsl	r8,0x2
800021e0:	5c 58       	castu.b	r8
800021e2:	10 9c       	mov	r12,r8
800021e4:	f0 1f 00 ce 	mcall	8000251c <calculate_hash+0x3a8>
	 
	 
	 W = Message_Schedule_W;
800021e8:	fe f8 03 38 	ld.w	r8,pc[824]
800021ec:	ef 48 ff e4 	st.w	r7[-28],r8
	 M = (unsigned long int *)Padded_Message;
800021f0:	fe f8 03 24 	ld.w	r8,pc[804]
800021f4:	ef 48 ff e8 	st.w	r7[-24],r8
	 for (i = 0; i < 16; i++)
800021f8:	30 08       	mov	r8,0
800021fa:	ef 48 ff d4 	st.w	r7[-44],r8
800021fe:	c1 68       	rjmp	8000222a <calculate_hash+0xb6>
	 {
		W[i] = M[i];
80002200:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002204:	a3 68       	lsl	r8,0x2
80002206:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000220a:	f2 08 00 08 	add	r8,r9,r8
8000220e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002212:	a3 69       	lsl	r9,0x2
80002214:	ee fa ff e8 	ld.w	r10,r7[-24]
80002218:	f4 09 00 09 	add	r9,r10,r9
8000221c:	72 09       	ld.w	r9,r9[0x0]
8000221e:	91 09       	st.w	r8[0x0],r9
	 PadtheMessage(length << 2);
	 
	 
	 W = Message_Schedule_W;
	 M = (unsigned long int *)Padded_Message;
	 for (i = 0; i < 16; i++)
80002220:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002224:	2f f8       	sub	r8,-1
80002226:	ef 48 ff d4 	st.w	r7[-44],r8
8000222a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000222e:	58 f8       	cp.w	r8,15
80002230:	fe 9a ff e8 	brle	80002200 <calculate_hash+0x8c>
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
80002234:	31 08       	mov	r8,16
80002236:	ef 48 ff d4 	st.w	r7[-44],r8
8000223a:	c7 58       	rjmp	80002324 <calculate_hash+0x1b0>
	 {
		 S0 = Rotate_right(Message_Schedule_W[i - 15], 7) XOR Rotate_right(Message_Schedule_W[i - 15], 18) XOR (Message_Schedule_W[i - 15] >> 3);
8000223c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002240:	f0 c9 00 0f 	sub	r9,r8,15
80002244:	fe f8 02 dc 	ld.w	r8,pc[732]
80002248:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000224c:	30 7b       	mov	r11,7
8000224e:	10 9c       	mov	r12,r8
80002250:	f0 1f 00 b5 	mcall	80002524 <calculate_hash+0x3b0>
80002254:	18 96       	mov	r6,r12
80002256:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000225a:	f0 c9 00 0f 	sub	r9,r8,15
8000225e:	fe f8 02 c2 	ld.w	r8,pc[706]
80002262:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002266:	31 2b       	mov	r11,18
80002268:	10 9c       	mov	r12,r8
8000226a:	f0 1f 00 af 	mcall	80002524 <calculate_hash+0x3b0>
8000226e:	18 98       	mov	r8,r12
80002270:	ed e8 20 09 	eor	r9,r6,r8
80002274:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002278:	f0 ca 00 0f 	sub	r10,r8,15
8000227c:	fe f8 02 a4 	ld.w	r8,pc[676]
80002280:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002284:	a3 98       	lsr	r8,0x3
80002286:	f3 e8 20 08 	eor	r8,r9,r8
8000228a:	ef 48 ff d8 	st.w	r7[-40],r8
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
8000228e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002292:	f0 c9 00 02 	sub	r9,r8,2
80002296:	fe f8 02 8a 	ld.w	r8,pc[650]
8000229a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000229e:	31 1b       	mov	r11,17
800022a0:	10 9c       	mov	r12,r8
800022a2:	f0 1f 00 a1 	mcall	80002524 <calculate_hash+0x3b0>
800022a6:	18 96       	mov	r6,r12
800022a8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800022ac:	f0 c9 00 02 	sub	r9,r8,2
800022b0:	fe f8 02 70 	ld.w	r8,pc[624]
800022b4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800022b8:	31 3b       	mov	r11,19
800022ba:	10 9c       	mov	r12,r8
800022bc:	f0 1f 00 9a 	mcall	80002524 <calculate_hash+0x3b0>
800022c0:	18 98       	mov	r8,r12
800022c2:	ed e8 20 09 	eor	r9,r6,r8
800022c6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800022ca:	f0 ca 00 02 	sub	r10,r8,2
800022ce:	fe f8 02 52 	ld.w	r8,pc[594]
800022d2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800022d6:	ab 88       	lsr	r8,0xa
800022d8:	f3 e8 20 08 	eor	r8,r9,r8
800022dc:	ef 48 ff dc 	st.w	r7[-36],r8
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
800022e0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800022e4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800022e8:	f0 ca 00 10 	sub	r10,r8,16
800022ec:	fe f8 02 34 	ld.w	r8,pc[564]
800022f0:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800022f4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800022f8:	10 0a       	add	r10,r8
800022fa:	ee f8 ff d4 	ld.w	r8,r7[-44]
800022fe:	f0 cb 00 07 	sub	r11,r8,7
80002302:	fe f8 02 1e 	ld.w	r8,pc[542]
80002306:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000230a:	10 0a       	add	r10,r8
8000230c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002310:	10 0a       	add	r10,r8
80002312:	fe f8 02 0e 	ld.w	r8,pc[526]
80002316:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
8000231a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000231e:	2f f8       	sub	r8,-1
80002320:	ef 48 ff d4 	st.w	r7[-44],r8
80002324:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002328:	e0 48 00 3f 	cp.w	r8,63
8000232c:	fe 9a ff 88 	brle	8000223c <calculate_hash+0xc8>
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
80002330:	30 08       	mov	r8,0
80002332:	ef 48 ff d4 	st.w	r7[-44],r8
80002336:	c1 38       	rjmp	8000235c <calculate_hash+0x1e8>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
80002338:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000233c:	a3 68       	lsl	r8,0x2
8000233e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80002342:	f2 08 00 08 	add	r8,r9,r8
80002346:	ee fa ff d4 	ld.w	r10,r7[-44]
8000234a:	4f 89       	lddpc	r9,80002528 <calculate_hash+0x3b4>
8000234c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80002350:	91 09       	st.w	r8[0x0],r9
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
80002352:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002356:	2f f8       	sub	r8,-1
80002358:	ef 48 ff d4 	st.w	r7[-44],r8
8000235c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002360:	58 78       	cp.w	r8,7
80002362:	fe 9a ff eb 	brle	80002338 <calculate_hash+0x1c4>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
80002366:	30 08       	mov	r8,0
80002368:	ef 48 ff d4 	st.w	r7[-44],r8
8000236c:	ca 68       	rjmp	800024b8 <calculate_hash+0x344>
	 {
		 unsigned long int maj, t2, ch, t1;
		 S0 = Rotate_right(chunk.a, 2) XOR Rotate_right(chunk.a, 13) XOR Rotate_right(chunk.a, 22);
8000236e:	4e b8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
80002370:	70 08       	ld.w	r8,r8[0x0]
80002372:	30 2b       	mov	r11,2
80002374:	10 9c       	mov	r12,r8
80002376:	f0 1f 00 6c 	mcall	80002524 <calculate_hash+0x3b0>
8000237a:	18 96       	mov	r6,r12
8000237c:	4e 78       	lddpc	r8,80002518 <calculate_hash+0x3a4>
8000237e:	70 08       	ld.w	r8,r8[0x0]
80002380:	30 db       	mov	r11,13
80002382:	10 9c       	mov	r12,r8
80002384:	f0 1f 00 68 	mcall	80002524 <calculate_hash+0x3b0>
80002388:	18 98       	mov	r8,r12
8000238a:	10 56       	eor	r6,r8
8000238c:	4e 38       	lddpc	r8,80002518 <calculate_hash+0x3a4>
8000238e:	70 08       	ld.w	r8,r8[0x0]
80002390:	31 6b       	mov	r11,22
80002392:	10 9c       	mov	r12,r8
80002394:	f0 1f 00 64 	mcall	80002524 <calculate_hash+0x3b0>
80002398:	18 98       	mov	r8,r12
8000239a:	ed e8 20 08 	eor	r8,r6,r8
8000239e:	ef 48 ff d8 	st.w	r7[-40],r8
		 maj = (chunk.a & chunk.b) XOR (chunk.a & chunk.c) XOR (chunk.b & chunk.c);
800023a2:	4d e8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
800023a4:	70 09       	ld.w	r9,r8[0x0]
800023a6:	4d d8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
800023a8:	70 18       	ld.w	r8,r8[0x4]
800023aa:	10 69       	and	r9,r8
800023ac:	4d b8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
800023ae:	70 0a       	ld.w	r10,r8[0x0]
800023b0:	4d a8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
800023b2:	70 28       	ld.w	r8,r8[0x8]
800023b4:	f5 e8 00 08 	and	r8,r10,r8
800023b8:	10 59       	eor	r9,r8
800023ba:	4d 88       	lddpc	r8,80002518 <calculate_hash+0x3a4>
800023bc:	70 1a       	ld.w	r10,r8[0x4]
800023be:	4d 78       	lddpc	r8,80002518 <calculate_hash+0x3a4>
800023c0:	70 28       	ld.w	r8,r8[0x8]
800023c2:	f5 e8 00 08 	and	r8,r10,r8
800023c6:	f3 e8 20 08 	eor	r8,r9,r8
800023ca:	ef 48 ff f0 	st.w	r7[-16],r8
		 t2 = S0 + maj;
800023ce:	ee f9 ff d8 	ld.w	r9,r7[-40]
800023d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800023d6:	f2 08 00 08 	add	r8,r9,r8
800023da:	ef 48 ff f4 	st.w	r7[-12],r8
		 S1 = Rotate_right(chunk.e, 6) XOR Rotate_right(chunk.e, 11) XOR Rotate_right(chunk.e, 25);
800023de:	4c f8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
800023e0:	70 48       	ld.w	r8,r8[0x10]
800023e2:	30 6b       	mov	r11,6
800023e4:	10 9c       	mov	r12,r8
800023e6:	f0 1f 00 50 	mcall	80002524 <calculate_hash+0x3b0>
800023ea:	18 96       	mov	r6,r12
800023ec:	4c b8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
800023ee:	70 48       	ld.w	r8,r8[0x10]
800023f0:	30 bb       	mov	r11,11
800023f2:	10 9c       	mov	r12,r8
800023f4:	f0 1f 00 4c 	mcall	80002524 <calculate_hash+0x3b0>
800023f8:	18 98       	mov	r8,r12
800023fa:	10 56       	eor	r6,r8
800023fc:	4c 78       	lddpc	r8,80002518 <calculate_hash+0x3a4>
800023fe:	70 48       	ld.w	r8,r8[0x10]
80002400:	31 9b       	mov	r11,25
80002402:	10 9c       	mov	r12,r8
80002404:	f0 1f 00 48 	mcall	80002524 <calculate_hash+0x3b0>
80002408:	18 98       	mov	r8,r12
8000240a:	ed e8 20 08 	eor	r8,r6,r8
8000240e:	ef 48 ff dc 	st.w	r7[-36],r8
		 ch = (chunk.e & chunk.f) XOR ((~chunk.e) & chunk.g);
80002412:	4c 28       	lddpc	r8,80002518 <calculate_hash+0x3a4>
80002414:	70 49       	ld.w	r9,r8[0x10]
80002416:	4c 18       	lddpc	r8,80002518 <calculate_hash+0x3a4>
80002418:	70 58       	ld.w	r8,r8[0x14]
8000241a:	10 69       	and	r9,r8
8000241c:	4b f8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
8000241e:	70 48       	ld.w	r8,r8[0x10]
80002420:	f0 0a 11 ff 	rsub	r10,r8,-1
80002424:	4b d8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
80002426:	70 68       	ld.w	r8,r8[0x18]
80002428:	f5 e8 00 08 	and	r8,r10,r8
8000242c:	f3 e8 20 08 	eor	r8,r9,r8
80002430:	ef 48 ff f8 	st.w	r7[-8],r8
		 t1 = chunk.h + S1 + ch + Hash_Constant[i] + Message_Schedule_W[i];
80002434:	4b 98       	lddpc	r8,80002518 <calculate_hash+0x3a4>
80002436:	70 79       	ld.w	r9,r8[0x1c]
80002438:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000243c:	10 09       	add	r9,r8
8000243e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002442:	10 09       	add	r9,r8
80002444:	ee fa ff d4 	ld.w	r10,r7[-44]
80002448:	4b 98       	lddpc	r8,8000252c <calculate_hash+0x3b8>
8000244a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000244e:	10 09       	add	r9,r8
80002450:	ee fa ff d4 	ld.w	r10,r7[-44]
80002454:	4b 38       	lddpc	r8,80002520 <calculate_hash+0x3ac>
80002456:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000245a:	f2 08 00 08 	add	r8,r9,r8
8000245e:	ef 48 ff fc 	st.w	r7[-4],r8
		 
		 chunk.h = chunk.g;
80002462:	4a e8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
80002464:	70 69       	ld.w	r9,r8[0x18]
80002466:	4a d8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
80002468:	91 79       	st.w	r8[0x1c],r9
		 chunk.g = chunk.f;
8000246a:	4a c8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
8000246c:	70 59       	ld.w	r9,r8[0x14]
8000246e:	4a b8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
80002470:	91 69       	st.w	r8[0x18],r9
		 chunk.f = chunk.e;
80002472:	4a a8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
80002474:	70 49       	ld.w	r9,r8[0x10]
80002476:	4a 98       	lddpc	r8,80002518 <calculate_hash+0x3a4>
80002478:	91 59       	st.w	r8[0x14],r9
		 chunk.e = chunk.d + t1;
8000247a:	4a 88       	lddpc	r8,80002518 <calculate_hash+0x3a4>
8000247c:	70 39       	ld.w	r9,r8[0xc]
8000247e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002482:	10 09       	add	r9,r8
80002484:	4a 58       	lddpc	r8,80002518 <calculate_hash+0x3a4>
80002486:	91 49       	st.w	r8[0x10],r9
		 chunk.d = chunk.c;
80002488:	4a 48       	lddpc	r8,80002518 <calculate_hash+0x3a4>
8000248a:	70 29       	ld.w	r9,r8[0x8]
8000248c:	4a 38       	lddpc	r8,80002518 <calculate_hash+0x3a4>
8000248e:	91 39       	st.w	r8[0xc],r9
		 chunk.c = chunk.b;
80002490:	4a 28       	lddpc	r8,80002518 <calculate_hash+0x3a4>
80002492:	70 19       	ld.w	r9,r8[0x4]
80002494:	4a 18       	lddpc	r8,80002518 <calculate_hash+0x3a4>
80002496:	91 29       	st.w	r8[0x8],r9
		 chunk.b = chunk.a;
80002498:	4a 08       	lddpc	r8,80002518 <calculate_hash+0x3a4>
8000249a:	70 09       	ld.w	r9,r8[0x0]
8000249c:	49 f8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
8000249e:	91 19       	st.w	r8[0x4],r9
		 chunk.a = t1 + t2;
800024a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800024a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800024a8:	10 09       	add	r9,r8
800024aa:	49 c8       	lddpc	r8,80002518 <calculate_hash+0x3a4>
800024ac:	91 09       	st.w	r8[0x0],r9
	 for (i = 0; i < 8; i++)
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
800024ae:	ee f8 ff d4 	ld.w	r8,r7[-44]
800024b2:	2f f8       	sub	r8,-1
800024b4:	ef 48 ff d4 	st.w	r7[-44],r8
800024b8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800024bc:	e0 48 00 3f 	cp.w	r8,63
800024c0:	fe 9a ff 57 	brle	8000236e <calculate_hash+0x1fa>
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
800024c4:	30 08       	mov	r8,0
800024c6:	ef 48 ff d4 	st.w	r7[-44],r8
800024ca:	c1 d8       	rjmp	80002504 <calculate_hash+0x390>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
800024cc:	ee f8 ff d4 	ld.w	r8,r7[-44]
800024d0:	a3 68       	lsl	r8,0x2
800024d2:	ee f9 ff c8 	ld.w	r9,r7[-56]
800024d6:	f2 08 00 08 	add	r8,r9,r8
800024da:	ee fa ff d4 	ld.w	r10,r7[-44]
800024de:	49 39       	lddpc	r9,80002528 <calculate_hash+0x3b4>
800024e0:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
800024e4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800024e8:	a3 69       	lsl	r9,0x2
800024ea:	ee fb ff ec 	ld.w	r11,r7[-20]
800024ee:	f6 09 00 09 	add	r9,r11,r9
800024f2:	72 09       	ld.w	r9,r9[0x0]
800024f4:	f4 09 00 09 	add	r9,r10,r9
800024f8:	91 09       	st.w	r8[0x0],r9
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
800024fa:	ee f8 ff d4 	ld.w	r8,r7[-44]
800024fe:	2f f8       	sub	r8,-1
80002500:	ef 48 ff d4 	st.w	r7[-44],r8
80002504:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002508:	58 78       	cp.w	r8,7
8000250a:	fe 9a ff e1 	brle	800024cc <calculate_hash+0x358>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
	 }
 }
8000250e:	2f 2d       	sub	sp,-56
80002510:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002514:	00 00       	add	r0,r0
80002516:	01 4c       	ld.w	r12,--r0
80002518:	00 00       	add	r0,r0
8000251a:	07 8c       	ld.ub	r12,r3[0x0]
8000251c:	80 00       	ld.sh	r0,r0[0x0]
8000251e:	25 30       	sub	r0,83
80002520:	00 00       	add	r0,r0
80002522:	01 8c       	ld.ub	r12,r0[0x0]
80002524:	80 00       	ld.sh	r0,r0[0x0]
80002526:	25 a8       	sub	r8,90
80002528:	80 00       	ld.sh	r0,r0[0x0]
8000252a:	d6 20       	acall	0x188
8000252c:	80 00       	ld.sh	r0,r0[0x0]
8000252e:	d6 40       	acall	0x190

80002530 <PadtheMessage>:


 void PadtheMessage(uint8_t message_length)
 {
80002530:	eb cd 40 80 	pushm	r7,lr
80002534:	1a 97       	mov	r7,sp
80002536:	20 3d       	sub	sp,12
80002538:	18 98       	mov	r8,r12
8000253a:	ef 68 ff f4 	st.b	r7[-12],r8
	 unsigned char i;
	 unsigned short int message_length_bits;
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];
8000253e:	49 a8       	lddpc	r8,800025a4 <PadtheMessage+0x74>
80002540:	ef 48 ff fc 	st.w	r7[-4],r8

	 message_length_bits = message_length << 3;
80002544:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002548:	a3 78       	lsl	r8,0x3
8000254a:	ef 58 ff fa 	st.h	r7[-6],r8
	 Padded_Message[message_length++] = 0x80;
8000254e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002552:	49 5a       	lddpc	r10,800025a4 <PadtheMessage+0x74>
80002554:	38 08       	mov	r8,-128
80002556:	f4 09 0b 08 	st.b	r10[r9],r8
8000255a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000255e:	2f f8       	sub	r8,-1
80002560:	ef 68 ff f4 	st.b	r7[-12],r8

	 for (i = message_length; i < 64; i++)
80002564:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002568:	ef 68 ff f9 	st.b	r7[-7],r8
8000256c:	c0 c8       	rjmp	80002584 <PadtheMessage+0x54>
	 {
		Padded_Message[i] = 0x00;
8000256e:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80002572:	48 da       	lddpc	r10,800025a4 <PadtheMessage+0x74>
80002574:	30 08       	mov	r8,0
80002576:	f4 09 0b 08 	st.b	r10[r9],r8
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];

	 message_length_bits = message_length << 3;
	 Padded_Message[message_length++] = 0x80;

	 for (i = message_length; i < 64; i++)
8000257a:	ef 38 ff f9 	ld.ub	r8,r7[-7]
8000257e:	2f f8       	sub	r8,-1
80002580:	ef 68 ff f9 	st.b	r7[-7],r8
80002584:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80002588:	33 f8       	mov	r8,63
8000258a:	f0 09 18 00 	cp.b	r9,r8
8000258e:	fe 98 ff f0 	brls	8000256e <PadtheMessage+0x3e>
	 {
		Padded_Message[i] = 0x00;
	 }

	 //ptrPadded_Message = (unsigned long int *)&Padded_Message[60];
	 ptrPadded_Message[15] = (unsigned long int)message_length_bits;
80002592:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002596:	2c 48       	sub	r8,-60
80002598:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8000259c:	91 09       	st.w	r8[0x0],r9
	 //Padded_Message[62] = *((unsigned char *)&message_length_bits);
	 //Padded_Message[63] = *((unsigned char *)&message_length_bits + 1);
 }
8000259e:	2f dd       	sub	sp,-12
800025a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800025a4:	00 00       	add	r0,r0
800025a6:	01 4c       	ld.w	r12,--r0

800025a8 <Rotate_right>:

 unsigned long int Rotate_right (unsigned long int number, int bits)
 {
800025a8:	eb cd 40 80 	pushm	r7,lr
800025ac:	1a 97       	mov	r7,sp
800025ae:	20 3d       	sub	sp,12
800025b0:	ef 4c ff f8 	st.w	r7[-8],r12
800025b4:	ef 4b ff f4 	st.w	r7[-12],r11
	 unsigned long int bit_mask = ((unsigned long int)2 << bits) - 1;
800025b8:	30 29       	mov	r9,2
800025ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800025be:	f2 08 09 48 	lsl	r8,r9,r8
800025c2:	20 18       	sub	r8,1
800025c4:	ef 48 ff fc 	st.w	r7[-4],r8
	 return ((number >> bits) | ((number & bit_mask) << (32 - bits)));
800025c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800025cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800025d0:	f2 08 0a 49 	lsr	r9,r9,r8
800025d4:	ee fa ff f8 	ld.w	r10,r7[-8]
800025d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025dc:	10 6a       	and	r10,r8
800025de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800025e2:	f0 08 11 20 	rsub	r8,r8,32
800025e6:	f4 08 09 48 	lsl	r8,r10,r8
800025ea:	f3 e8 10 08 	or	r8,r9,r8
 }
800025ee:	10 9c       	mov	r12,r8
800025f0:	2f dd       	sub	sp,-12
800025f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800025f6 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
800025f6:	eb cd 40 80 	pushm	r7,lr
800025fa:	1a 97       	mov	r7,sp
800025fc:	20 1d       	sub	sp,4
800025fe:	18 98       	mov	r8,r12
80002600:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80002604:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002608:	58 18       	cp.w	r8,1
8000260a:	c0 a0       	breq	8000261e <osc_get_rate+0x28>
8000260c:	58 28       	cp.w	r8,2
8000260e:	c0 d0       	breq	80002628 <osc_get_rate+0x32>
80002610:	58 08       	cp.w	r8,0
80002612:	c0 e1       	brne	8000262e <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80002614:	e0 68 1b 00 	mov	r8,6912
80002618:	ea 18 00 b7 	orh	r8,0xb7
8000261c:	c0 a8       	rjmp	80002630 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000261e:	e0 68 44 00 	mov	r8,17408
80002622:	ea 18 00 ac 	orh	r8,0xac
80002626:	c0 58       	rjmp	80002630 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80002628:	e0 68 80 00 	mov	r8,32768
8000262c:	c0 28       	rjmp	80002630 <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000262e:	30 08       	mov	r8,0
	}
}
80002630:	10 9c       	mov	r12,r8
80002632:	2f fd       	sub	sp,-4
80002634:	e3 cd 80 80 	ldm	sp++,r7,pc

80002638 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80002638:	eb cd 40 80 	pushm	r7,lr
8000263c:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000263e:	30 0c       	mov	r12,0
80002640:	f0 1f 00 06 	mcall	80002658 <sysclk_get_main_hz+0x20>
80002644:	18 99       	mov	r9,r12
80002646:	12 98       	mov	r8,r9
80002648:	a3 68       	lsl	r8,0x2
8000264a:	12 08       	add	r8,r9
8000264c:	a1 78       	lsl	r8,0x1
8000264e:	12 08       	add	r8,r9
80002650:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80002652:	10 9c       	mov	r12,r8
80002654:	e3 cd 80 80 	ldm	sp++,r7,pc
80002658:	80 00       	ld.sh	r0,r0[0x0]
8000265a:	25 f6       	sub	r6,95

8000265c <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
8000265c:	eb cd 40 80 	pushm	r7,lr
80002660:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
80002662:	f0 1f 00 04 	mcall	80002670 <sysclk_get_pba_hz+0x14>
80002666:	18 98       	mov	r8,r12
}
80002668:	10 9c       	mov	r12,r8
8000266a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000266e:	00 00       	add	r0,r0
80002670:	80 00       	ld.sh	r0,r0[0x0]
80002672:	26 38       	sub	r8,99

80002674 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
80002674:	eb cd 40 80 	pushm	r7,lr
80002678:	1a 97       	mov	r7,sp
8000267a:	20 1d       	sub	sp,4
8000267c:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80002680:	ee fb ff fc 	ld.w	r11,r7[-4]
80002684:	30 1c       	mov	r12,1
80002686:	f0 1f 00 03 	mcall	80002690 <sysclk_enable_hsb_module+0x1c>
}
8000268a:	2f fd       	sub	sp,-4
8000268c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002690:	80 00       	ld.sh	r0,r0[0x0]
80002692:	a8 ac       	st.b	r4[0x2],r12

80002694 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80002694:	eb cd 40 80 	pushm	r7,lr
80002698:	1a 97       	mov	r7,sp
8000269a:	20 1d       	sub	sp,4
8000269c:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800026a0:	ee fb ff fc 	ld.w	r11,r7[-4]
800026a4:	30 2c       	mov	r12,2
800026a6:	f0 1f 00 03 	mcall	800026b0 <sysclk_enable_pba_module+0x1c>
}
800026aa:	2f fd       	sub	sp,-4
800026ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800026b0:	80 00       	ld.sh	r0,r0[0x0]
800026b2:	a8 ac       	st.b	r4[0x2],r12

800026b4 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
800026b4:	eb cd 40 80 	pushm	r7,lr
800026b8:	1a 97       	mov	r7,sp
800026ba:	20 1d       	sub	sp,4
800026bc:	ef 4c ff fc 	st.w	r7[-4],r12
	switch ((uintptr_t)module) {
800026c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026c4:	fe 58 14 00 	cp.w	r8,-60416
800026c8:	e0 80 00 a5 	breq	80002812 <sysclk_enable_peripheral_clock+0x15e>
800026cc:	e0 8b 00 40 	brhi	8000274c <sysclk_enable_peripheral_clock+0x98>
800026d0:	fe 48 24 00 	cp.w	r8,-121856
800026d4:	e0 80 00 d9 	breq	80002886 <sysclk_enable_peripheral_clock+0x1d2>
800026d8:	e0 8b 00 1e 	brhi	80002714 <sysclk_enable_peripheral_clock+0x60>
800026dc:	fe 48 10 00 	cp.w	r8,-126976
800026e0:	e0 80 00 b9 	breq	80002852 <sysclk_enable_peripheral_clock+0x19e>
800026e4:	e0 8b 00 0b 	brhi	800026fa <sysclk_enable_peripheral_clock+0x46>
800026e8:	fc 58 00 00 	cp.w	r8,-196608
800026ec:	e0 80 00 e0 	breq	800028ac <sysclk_enable_peripheral_clock+0x1f8>
800026f0:	fe 48 00 00 	cp.w	r8,-131072
800026f4:	e0 80 00 b3 	breq	8000285a <sysclk_enable_peripheral_clock+0x1a6>
		break;
#endif

	default:
		Assert(false);
		return;
800026f8:	cd e8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800026fa:	fe 48 1c 00 	cp.w	r8,-123904
800026fe:	e0 80 00 bc 	breq	80002876 <sysclk_enable_peripheral_clock+0x1c2>
80002702:	fe 48 20 00 	cp.w	r8,-122880
80002706:	e0 80 00 bc 	breq	8000287e <sysclk_enable_peripheral_clock+0x1ca>
8000270a:	fe 48 14 00 	cp.w	r8,-125952
8000270e:	e0 80 00 ad 	breq	80002868 <sysclk_enable_peripheral_clock+0x1b4>
		break;
#endif

	default:
		Assert(false);
		return;
80002712:	cd 18       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80002714:	fe 58 00 00 	cp.w	r8,-65536
80002718:	c5 60       	breq	800027c4 <sysclk_enable_peripheral_clock+0x110>
8000271a:	e0 8b 00 0f 	brhi	80002738 <sysclk_enable_peripheral_clock+0x84>
8000271e:	fe 48 40 00 	cp.w	r8,-114688
80002722:	e0 80 00 b6 	breq	8000288e <sysclk_enable_peripheral_clock+0x1da>
80002726:	fe 48 80 00 	cp.w	r8,-98304
8000272a:	e0 80 00 bd 	breq	800028a4 <sysclk_enable_peripheral_clock+0x1f0>
8000272e:	fe 48 28 00 	cp.w	r8,-120832
80002732:	e0 80 00 b2 	breq	80002896 <sysclk_enable_peripheral_clock+0x1e2>
		break;
#endif

	default:
		Assert(false);
		return;
80002736:	cb f8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80002738:	fe 58 0c 00 	cp.w	r8,-62464
8000273c:	c4 b0       	breq	800027d2 <sysclk_enable_peripheral_clock+0x11e>
8000273e:	fe 58 10 00 	cp.w	r8,-61440
80002742:	c3 d0       	breq	800027bc <sysclk_enable_peripheral_clock+0x108>
80002744:	fe 58 08 00 	cp.w	r8,-63488
80002748:	c3 60       	breq	800027b4 <sysclk_enable_peripheral_clock+0x100>
		break;
#endif

	default:
		Assert(false);
		return;
8000274a:	cb 58       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000274c:	fe 58 30 00 	cp.w	r8,-53248
80002750:	c5 50       	breq	800027fa <sysclk_enable_peripheral_clock+0x146>
80002752:	e0 8b 00 18 	brhi	80002782 <sysclk_enable_peripheral_clock+0xce>
80002756:	fe 58 20 00 	cp.w	r8,-57344
8000275a:	c6 80       	breq	8000282a <sysclk_enable_peripheral_clock+0x176>
8000275c:	e0 8b 00 09 	brhi	8000276e <sysclk_enable_peripheral_clock+0xba>
80002760:	fe 58 18 00 	cp.w	r8,-59392
80002764:	c5 b0       	breq	8000281a <sysclk_enable_peripheral_clock+0x166>
80002766:	fe 58 1c 00 	cp.w	r8,-58368
8000276a:	c5 c0       	breq	80002822 <sysclk_enable_peripheral_clock+0x16e>
		break;
#endif

	default:
		Assert(false);
		return;
8000276c:	ca 48       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000276e:	fe 58 28 00 	cp.w	r8,-55296
80002772:	c3 c0       	breq	800027ea <sysclk_enable_peripheral_clock+0x136>
80002774:	fe 58 2c 00 	cp.w	r8,-54272
80002778:	c3 d0       	breq	800027f2 <sysclk_enable_peripheral_clock+0x13e>
8000277a:	fe 58 24 00 	cp.w	r8,-56320
8000277e:	c3 20       	breq	800027e2 <sysclk_enable_peripheral_clock+0x12e>
		break;
#endif

	default:
		Assert(false);
		return;
80002780:	c9 a8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80002782:	fe 58 40 00 	cp.w	r8,-49152
80002786:	c6 20       	breq	8000284a <sysclk_enable_peripheral_clock+0x196>
80002788:	e0 8b 00 0c 	brhi	800027a0 <sysclk_enable_peripheral_clock+0xec>
8000278c:	fe 58 38 00 	cp.w	r8,-51200
80002790:	c5 50       	breq	8000283a <sysclk_enable_peripheral_clock+0x186>
80002792:	fe 58 3c 00 	cp.w	r8,-50176
80002796:	c2 20       	breq	800027da <sysclk_enable_peripheral_clock+0x126>
80002798:	fe 58 34 00 	cp.w	r8,-52224
8000279c:	c4 b0       	breq	80002832 <sysclk_enable_peripheral_clock+0x17e>
		break;
#endif

	default:
		Assert(false);
		return;
8000279e:	c8 b8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800027a0:	fe 58 50 00 	cp.w	r8,-45056
800027a4:	c2 f0       	breq	80002802 <sysclk_enable_peripheral_clock+0x14e>
800027a6:	fe 58 54 00 	cp.w	r8,-44032
800027aa:	c3 00       	breq	8000280a <sysclk_enable_peripheral_clock+0x156>
800027ac:	fe 58 44 00 	cp.w	r8,-48128
800027b0:	c4 90       	breq	80002842 <sysclk_enable_peripheral_clock+0x18e>
		break;
#endif

	default:
		Assert(false);
		return;
800027b2:	c8 18       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
	case AVR32_INTC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_INTC);
800027b4:	30 0c       	mov	r12,0
800027b6:	f0 1f 00 42 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
800027ba:	c7 d8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_GPIO_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_GPIO);
800027bc:	30 1c       	mov	r12,1
800027be:	f0 1f 00 40 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
800027c2:	c7 98       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PDCA_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
800027c4:	30 4c       	mov	r12,4
800027c6:	f0 1f 00 3f 	mcall	800028c0 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pba_module(SYSCLK_PDCA_PB);
800027ca:	30 2c       	mov	r12,2
800027cc:	f0 1f 00 3c 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
800027d0:	c7 28       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PM);
800027d2:	30 3c       	mov	r12,3
800027d4:	f0 1f 00 3a 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
800027d8:	c6 e8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ADC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ADC);
800027da:	30 4c       	mov	r12,4
800027dc:	f0 1f 00 38 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
800027e0:	c6 a8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI0);
800027e2:	30 5c       	mov	r12,5
800027e4:	f0 1f 00 36 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
800027e8:	c6 68       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
800027ea:	30 6c       	mov	r12,6
800027ec:	f0 1f 00 34 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
800027f0:	c6 28       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
800027f2:	30 7c       	mov	r12,7
800027f4:	f0 1f 00 32 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
800027f8:	c5 e8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
800027fa:	30 8c       	mov	r12,8
800027fc:	f0 1f 00 30 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
80002800:	c5 a8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
80002802:	30 9c       	mov	r12,9
80002804:	f0 1f 00 2e 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
80002808:	c5 68       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
8000280a:	30 ac       	mov	r12,10
8000280c:	f0 1f 00 2c 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
80002810:	c5 28       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART0);
80002812:	30 bc       	mov	r12,11
80002814:	f0 1f 00 2a 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
80002818:	c4 e8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART1);
8000281a:	30 cc       	mov	r12,12
8000281c:	f0 1f 00 28 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
80002820:	c4 a8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART2_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
80002822:	30 dc       	mov	r12,13
80002824:	f0 1f 00 26 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
80002828:	c4 68       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART3_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART3);
8000282a:	30 ec       	mov	r12,14
8000282c:	f0 1f 00 24 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
80002830:	c4 28       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SSC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SSC);
80002832:	30 fc       	mov	r12,15
80002834:	f0 1f 00 22 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
80002838:	c3 e8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC0);
8000283a:	31 0c       	mov	r12,16
8000283c:	f0 1f 00 20 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
80002840:	c3 a8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC1);
80002842:	31 1c       	mov	r12,17
80002844:	f0 1f 00 1e 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
80002848:	c3 68       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ABDAC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DAC);
8000284a:	31 2c       	mov	r12,18
8000284c:	f0 1f 00 1c 	mcall	800028bc <sysclk_enable_peripheral_clock+0x208>
		break;
80002850:	c3 28       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_HMATRIX_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
80002852:	30 0c       	mov	r12,0
80002854:	f0 1f 00 1c 	mcall	800028c4 <sysclk_enable_peripheral_clock+0x210>
		break;
80002858:	c2 e8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USBB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000285a:	30 3c       	mov	r12,3
8000285c:	f0 1f 00 19 	mcall	800028c0 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80002860:	30 1c       	mov	r12,1
80002862:	f0 1f 00 19 	mcall	800028c4 <sysclk_enable_peripheral_clock+0x210>
		break;
80002866:	c2 78       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_FLASHC_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_FLASHC_DATA);
80002868:	30 0c       	mov	r12,0
8000286a:	f0 1f 00 16 	mcall	800028c0 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_FLASHC_REGS);
8000286e:	30 2c       	mov	r12,2
80002870:	f0 1f 00 15 	mcall	800028c4 <sysclk_enable_peripheral_clock+0x210>
		break;
80002874:	c2 08       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SMC_REGS);
80002876:	30 3c       	mov	r12,3
80002878:	f0 1f 00 13 	mcall	800028c4 <sysclk_enable_peripheral_clock+0x210>
		break;
8000287c:	c1 c8       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SDRAMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SDRAMC_REGS);
8000287e:	30 4c       	mov	r12,4
80002880:	f0 1f 00 11 	mcall	800028c4 <sysclk_enable_peripheral_clock+0x210>
		break;
80002884:	c1 88       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ECCHRS_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_ECC);
80002886:	30 5c       	mov	r12,5
80002888:	f0 1f 00 0f 	mcall	800028c4 <sysclk_enable_peripheral_clock+0x210>
		break;
8000288c:	c1 48       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MCI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MCI);
8000288e:	30 6c       	mov	r12,6
80002890:	f0 1f 00 0d 	mcall	800028c4 <sysclk_enable_peripheral_clock+0x210>
		break;
80002894:	c1 08       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_BUSMON_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_BUSMON_HSB);
80002896:	30 8c       	mov	r12,8
80002898:	f0 1f 00 0a 	mcall	800028c0 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_BUSMON);
8000289c:	30 7c       	mov	r12,7
8000289e:	f0 1f 00 0a 	mcall	800028c4 <sysclk_enable_peripheral_clock+0x210>
		break;
800028a2:	c0 98       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MSI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MSI);
800028a4:	30 8c       	mov	r12,8
800028a6:	f0 1f 00 08 	mcall	800028c4 <sysclk_enable_peripheral_clock+0x210>
		break;
800028aa:	c0 58       	rjmp	800028b4 <sysclk_enable_peripheral_clock+0x200>

#if defined(AVR32_AES_ADDRESS)
	case AVR32_AES_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_AES);
800028ac:	30 9c       	mov	r12,9
800028ae:	f0 1f 00 06 	mcall	800028c4 <sysclk_enable_peripheral_clock+0x210>
		break;
800028b2:	d7 03       	nop

	default:
		Assert(false);
		return;
	}
}
800028b4:	2f fd       	sub	sp,-4
800028b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800028ba:	00 00       	add	r0,r0
800028bc:	80 00       	ld.sh	r0,r0[0x0]
800028be:	26 94       	sub	r4,105
800028c0:	80 00       	ld.sh	r0,r0[0x0]
800028c2:	26 74       	sub	r4,103
800028c4:	80 00       	ld.sh	r0,r0[0x0]
800028c6:	a9 20       	st.d	r4++,r0

800028c8 <tc_irq>:
 * The ISR handles RC compare interrupt and sets the update_timer flag to
 * update the timer value.
 */
__attribute__((__interrupt__))
static void tc_irq(void)
{
800028c8:	eb cd 40 80 	pushm	r7,lr
800028cc:	1a 97       	mov	r7,sp
	// Increment the ms seconds counter
	tc_tick++;
800028ce:	4a 88       	lddpc	r8,8000296c <tc_irq+0xa4>
800028d0:	70 08       	ld.w	r8,r8[0x0]
800028d2:	f0 c9 ff ff 	sub	r9,r8,-1
800028d6:	4a 68       	lddpc	r8,8000296c <tc_irq+0xa4>
800028d8:	91 09       	st.w	r8[0x0],r9
	/*
	 * TODO: Place a breakpoint here and watch the update of tc_tick variable
	 * in the Watch Window.
	 */
	if (tc_tick == 500)
800028da:	4a 58       	lddpc	r8,8000296c <tc_irq+0xa4>
800028dc:	70 08       	ld.w	r8,r8[0x0]
800028de:	e0 48 01 f4 	cp.w	r8,500
800028e2:	c0 51       	brne	800028ec <tc_irq+0x24>
	{
		tc_tick = 500;
800028e4:	4a 28       	lddpc	r8,8000296c <tc_irq+0xa4>
800028e6:	e0 69 01 f4 	mov	r9,500
800028ea:	91 09       	st.w	r8[0x0],r9
	}
	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
800028ec:	30 0b       	mov	r11,0
800028ee:	fe 7c 38 00 	mov	r12,-51200
800028f2:	f0 1f 00 20 	mcall	80002970 <tc_irq+0xa8>

	if ((check_all_buttons_high() == true) && (button_released == false))
800028f6:	f0 1f 00 20 	mcall	80002974 <tc_irq+0xac>
800028fa:	18 98       	mov	r8,r12
800028fc:	58 08       	cp.w	r8,0
800028fe:	c0 b0       	breq	80002914 <tc_irq+0x4c>
80002900:	49 e8       	lddpc	r8,80002978 <tc_irq+0xb0>
80002902:	11 88       	ld.ub	r8,r8[0x0]
80002904:	5c 58       	castu.b	r8
80002906:	ec 18 00 01 	eorl	r8,0x1
8000290a:	5c 58       	castu.b	r8
8000290c:	c0 40       	breq	80002914 <tc_irq+0x4c>
	{
		button_released = true;
8000290e:	49 b9       	lddpc	r9,80002978 <tc_irq+0xb0>
80002910:	30 18       	mov	r8,1
80002912:	b2 88       	st.b	r9[0x0],r8
		//{
			//inter_key_delay = DISABLED;
			//delay_counter = 0;
		//}
	//}
	if (button_pressed() == ENTER_BUTTON)
80002914:	f0 1f 00 1a 	mcall	8000297c <tc_irq+0xb4>
80002918:	18 98       	mov	r8,r12
8000291a:	10 99       	mov	r9,r8
8000291c:	30 28       	mov	r8,2
8000291e:	f0 09 18 00 	cp.b	r9,r8
80002922:	c0 61       	brne	8000292e <tc_irq+0x66>
	{
		enter_pressed = true;
80002924:	49 79       	lddpc	r9,80002980 <tc_irq+0xb8>
80002926:	30 18       	mov	r8,1
80002928:	b2 88       	st.b	r9[0x0],r8
		calculate_salt();
8000292a:	f0 1f 00 17 	mcall	80002984 <tc_irq+0xbc>
	}

	if (!enter_pressed)
8000292e:	49 58       	lddpc	r8,80002980 <tc_irq+0xb8>
80002930:	11 88       	ld.ub	r8,r8[0x0]
80002932:	5c 58       	castu.b	r8
80002934:	ec 18 00 01 	eorl	r8,0x1
80002938:	5c 58       	castu.b	r8
8000293a:	c1 00       	breq	8000295a <tc_irq+0x92>
	{
		if (var_W_ticks++ > var_W)
8000293c:	49 38       	lddpc	r8,80002988 <tc_irq+0xc0>
8000293e:	70 08       	ld.w	r8,r8[0x0]
80002940:	49 39       	lddpc	r9,8000298c <tc_irq+0xc4>
80002942:	72 09       	ld.w	r9,r9[0x0]
80002944:	12 38       	cp.w	r8,r9
80002946:	5f b9       	srhi	r9
80002948:	5c 59       	castu.b	r9
8000294a:	f0 ca ff ff 	sub	r10,r8,-1
8000294e:	48 f8       	lddpc	r8,80002988 <tc_irq+0xc0>
80002950:	91 0a       	st.w	r8[0x0],r10
80002952:	58 09       	cp.w	r9,0
80002954:	c0 30       	breq	8000295a <tc_irq+0x92>
		{
			calculate_salt();
80002956:	f0 1f 00 0c 	mcall	80002984 <tc_irq+0xbc>
		}		
	}

	// specify that an interrupt has been raised
	update_timer = true;
8000295a:	48 e9       	lddpc	r9,80002990 <tc_irq+0xc8>
8000295c:	30 18       	mov	r8,1
8000295e:	b2 88       	st.b	r9[0x0],r8
	// Toggle the GPIO line
	gpio_tgl_gpio_pin(EXAMPLE_TOGGLE_PIN);
80002960:	30 3c       	mov	r12,3
80002962:	f0 1f 00 0d 	mcall	80002994 <tc_irq+0xcc>
}
80002966:	e3 cd 40 80 	ldm	sp++,r7,lr
8000296a:	d6 03       	rete
8000296c:	00 00       	add	r0,r0
8000296e:	02 8c       	andn	r12,r1
80002970:	80 00       	ld.sh	r0,r0[0x0]
80002972:	82 5e       	ld.sh	lr,r1[0xa]
80002974:	80 00       	ld.sh	r0,r0[0x0]
80002976:	2a 90       	sub	r0,-87
80002978:	00 00       	add	r0,r0
8000297a:	00 0e       	add	lr,r0
8000297c:	80 00       	ld.sh	r0,r0[0x0]
8000297e:	29 98       	sub	r8,-103
80002980:	00 00       	add	r0,r0
80002982:	00 0d       	add	sp,r0
80002984:	80 00       	ld.sh	r0,r0[0x0]
80002986:	20 38       	sub	r8,3
80002988:	00 00       	add	r0,r0
8000298a:	01 48       	ld.w	r8,--r0
8000298c:	00 00       	add	r0,r0
8000298e:	00 08       	add	r8,r0
80002990:	00 00       	add	r0,r0
80002992:	00 0c       	add	r12,r0
80002994:	80 00       	ld.sh	r0,r0[0x0]
80002996:	78 1a       	ld.w	r10,r12[0x4]

80002998 <button_pressed>:

uint8_t button_pressed (void)
{
80002998:	eb cd 40 80 	pushm	r7,lr
8000299c:	1a 97       	mov	r7,sp
	if (!device_unlocked && button_released)
8000299e:	4b 28       	lddpc	r8,80002a64 <button_pressed+0xcc>
800029a0:	11 88       	ld.ub	r8,r8[0x0]
800029a2:	5c 58       	castu.b	r8
800029a4:	ec 18 00 01 	eorl	r8,0x1
800029a8:	5c 58       	castu.b	r8
800029aa:	c5 90       	breq	80002a5c <button_pressed+0xc4>
800029ac:	4a f8       	lddpc	r8,80002a68 <button_pressed+0xd0>
800029ae:	11 88       	ld.ub	r8,r8[0x0]
800029b0:	5c 58       	castu.b	r8
800029b2:	c5 50       	breq	80002a5c <button_pressed+0xc4>
	{		
		if (read_push_button(PB1, (uint8_t *)&PB1_Counter))
800029b4:	4a eb       	lddpc	r11,80002a6c <button_pressed+0xd4>
800029b6:	30 bc       	mov	r12,11
800029b8:	f0 1f 00 2e 	mcall	80002a70 <button_pressed+0xd8>
800029bc:	18 98       	mov	r8,r12
800029be:	58 08       	cp.w	r8,0
800029c0:	c0 c0       	breq	800029d8 <button_pressed+0x40>
		{
			LED_On(LED0);
800029c2:	30 1c       	mov	r12,1
800029c4:	f0 1f 00 2c 	mcall	80002a74 <button_pressed+0xdc>
			LED_Off(LED1 | LED2 | LED3);
800029c8:	30 ec       	mov	r12,14
800029ca:	f0 1f 00 2c 	mcall	80002a78 <button_pressed+0xe0>
			store_passcode(0L);
800029ce:	30 0c       	mov	r12,0
800029d0:	f0 1f 00 2b 	mcall	80002a7c <button_pressed+0xe4>
			return PUSH_BUTTON;
800029d4:	30 18       	mov	r8,1
800029d6:	c4 48       	rjmp	80002a5e <button_pressed+0xc6>
		}
		else if (read_push_button(PB2, (uint8_t *)&PB2_Counter))
800029d8:	4a ab       	lddpc	r11,80002a80 <button_pressed+0xe8>
800029da:	30 cc       	mov	r12,12
800029dc:	f0 1f 00 25 	mcall	80002a70 <button_pressed+0xd8>
800029e0:	18 98       	mov	r8,r12
800029e2:	58 08       	cp.w	r8,0
800029e4:	c0 c0       	breq	800029fc <button_pressed+0x64>
		{
			LED_On(LED1);
800029e6:	30 2c       	mov	r12,2
800029e8:	f0 1f 00 23 	mcall	80002a74 <button_pressed+0xdc>
			LED_Off(LED0 | LED2 | LED3);
800029ec:	30 dc       	mov	r12,13
800029ee:	f0 1f 00 23 	mcall	80002a78 <button_pressed+0xe0>
			store_passcode(1L);
800029f2:	30 1c       	mov	r12,1
800029f4:	f0 1f 00 22 	mcall	80002a7c <button_pressed+0xe4>
			return PUSH_BUTTON;
800029f8:	30 18       	mov	r8,1
800029fa:	c3 28       	rjmp	80002a5e <button_pressed+0xc6>
		}
		else if (read_push_button(PB3, (uint8_t *)&PB3_Counter))
800029fc:	4a 2b       	lddpc	r11,80002a84 <button_pressed+0xec>
800029fe:	30 dc       	mov	r12,13
80002a00:	f0 1f 00 1c 	mcall	80002a70 <button_pressed+0xd8>
80002a04:	18 98       	mov	r8,r12
80002a06:	58 08       	cp.w	r8,0
80002a08:	c0 c0       	breq	80002a20 <button_pressed+0x88>
		{
			LED_On(LED2);
80002a0a:	30 4c       	mov	r12,4
80002a0c:	f0 1f 00 1a 	mcall	80002a74 <button_pressed+0xdc>
			LED_Off(LED0 | LED1 | LED3);
80002a10:	30 bc       	mov	r12,11
80002a12:	f0 1f 00 1a 	mcall	80002a78 <button_pressed+0xe0>
			store_passcode(2L);
80002a16:	30 2c       	mov	r12,2
80002a18:	f0 1f 00 19 	mcall	80002a7c <button_pressed+0xe4>
			return PUSH_BUTTON;
80002a1c:	30 18       	mov	r8,1
80002a1e:	c2 08       	rjmp	80002a5e <button_pressed+0xc6>
		}
		else if (read_push_button(PB4, (uint8_t *)&PB4_Counter))
80002a20:	49 ab       	lddpc	r11,80002a88 <button_pressed+0xf0>
80002a22:	30 ac       	mov	r12,10
80002a24:	f0 1f 00 13 	mcall	80002a70 <button_pressed+0xd8>
80002a28:	18 98       	mov	r8,r12
80002a2a:	58 08       	cp.w	r8,0
80002a2c:	c0 c0       	breq	80002a44 <button_pressed+0xac>
		{
			LED_On(LED3);
80002a2e:	30 8c       	mov	r12,8
80002a30:	f0 1f 00 11 	mcall	80002a74 <button_pressed+0xdc>
			LED_Off(LED0 | LED1 | LED2);
80002a34:	30 7c       	mov	r12,7
80002a36:	f0 1f 00 11 	mcall	80002a78 <button_pressed+0xe0>
			store_passcode(3L);
80002a3a:	30 3c       	mov	r12,3
80002a3c:	f0 1f 00 10 	mcall	80002a7c <button_pressed+0xe4>
			return PUSH_BUTTON;
80002a40:	30 18       	mov	r8,1
80002a42:	c0 e8       	rjmp	80002a5e <button_pressed+0xc6>
		}
		else if (read_push_button(PB_ENTER, (uint8_t *)&PB5_Counter))
80002a44:	49 2b       	lddpc	r11,80002a8c <button_pressed+0xf4>
80002a46:	32 ac       	mov	r12,42
80002a48:	f0 1f 00 0a 	mcall	80002a70 <button_pressed+0xd8>
80002a4c:	18 98       	mov	r8,r12
80002a4e:	58 08       	cp.w	r8,0
80002a50:	c0 60       	breq	80002a5c <button_pressed+0xc4>
		{
			device_unlocked = true;
80002a52:	48 59       	lddpc	r9,80002a64 <button_pressed+0xcc>
80002a54:	30 18       	mov	r8,1
80002a56:	b2 88       	st.b	r9[0x0],r8
			return ENTER_BUTTON;
80002a58:	30 28       	mov	r8,2
80002a5a:	c0 28       	rjmp	80002a5e <button_pressed+0xc6>
		}
	}
	return NO_BUTTON;
80002a5c:	30 08       	mov	r8,0
}
80002a5e:	10 9c       	mov	r12,r8
80002a60:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a64:	00 00       	add	r0,r0
80002a66:	01 40       	ld.w	r0,--r0
80002a68:	00 00       	add	r0,r0
80002a6a:	00 0e       	add	lr,r0
80002a6c:	00 00       	add	r0,r0
80002a6e:	02 b0       	st.h	r1++,r0
80002a70:	80 00       	ld.sh	r0,r0[0x0]
80002a72:	2b 04       	sub	r4,-80
80002a74:	80 00       	ld.sh	r0,r0[0x0]
80002a76:	30 f8       	mov	r8,15
80002a78:	80 00       	ld.sh	r0,r0[0x0]
80002a7a:	30 40       	mov	r0,4
80002a7c:	80 00       	ld.sh	r0,r0[0x0]
80002a7e:	2b d0       	sub	r0,-67
80002a80:	00 00       	add	r0,r0
80002a82:	02 b1       	st.h	r1++,r1
80002a84:	00 00       	add	r0,r0
80002a86:	02 b2       	st.h	r1++,r2
80002a88:	00 00       	add	r0,r0
80002a8a:	02 b3       	st.h	r1++,r3
80002a8c:	00 00       	add	r0,r0
80002a8e:	02 b4       	st.h	r1++,r4

80002a90 <check_all_buttons_high>:

bool check_all_buttons_high(void)
{
80002a90:	eb cd 40 80 	pushm	r7,lr
80002a94:	1a 97       	mov	r7,sp
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1) && (gpio_get_pin_value(PB2) == 1) && (gpio_get_pin_value(PB3) == 1) && (gpio_get_pin_value(PB4) == 1))
80002a96:	30 bc       	mov	r12,11
80002a98:	f0 1f 00 19 	mcall	80002afc <check_all_buttons_high+0x6c>
80002a9c:	18 98       	mov	r8,r12
80002a9e:	58 18       	cp.w	r8,1
80002aa0:	c2 51       	brne	80002aea <check_all_buttons_high+0x5a>
80002aa2:	30 cc       	mov	r12,12
80002aa4:	f0 1f 00 16 	mcall	80002afc <check_all_buttons_high+0x6c>
80002aa8:	18 98       	mov	r8,r12
80002aaa:	58 18       	cp.w	r8,1
80002aac:	c1 f1       	brne	80002aea <check_all_buttons_high+0x5a>
80002aae:	30 dc       	mov	r12,13
80002ab0:	f0 1f 00 13 	mcall	80002afc <check_all_buttons_high+0x6c>
80002ab4:	18 98       	mov	r8,r12
80002ab6:	58 18       	cp.w	r8,1
80002ab8:	c1 91       	brne	80002aea <check_all_buttons_high+0x5a>
80002aba:	30 ac       	mov	r12,10
80002abc:	f0 1f 00 10 	mcall	80002afc <check_all_buttons_high+0x6c>
80002ac0:	18 98       	mov	r8,r12
80002ac2:	58 18       	cp.w	r8,1
80002ac4:	c1 31       	brne	80002aea <check_all_buttons_high+0x5a>
	{
		if (button_released_iteration++ > 10)
80002ac6:	48 f8       	lddpc	r8,80002b00 <check_all_buttons_high+0x70>
80002ac8:	11 88       	ld.ub	r8,r8[0x0]
80002aca:	30 a9       	mov	r9,10
80002acc:	f2 08 18 00 	cp.b	r8,r9
80002ad0:	5f b9       	srhi	r9
80002ad2:	5c 59       	castu.b	r9
80002ad4:	2f f8       	sub	r8,-1
80002ad6:	5c 58       	castu.b	r8
80002ad8:	48 aa       	lddpc	r10,80002b00 <check_all_buttons_high+0x70>
80002ada:	b4 88       	st.b	r10[0x0],r8
80002adc:	58 09       	cp.w	r9,0
80002ade:	c0 a0       	breq	80002af2 <check_all_buttons_high+0x62>
		{
			button_released_iteration = 0;
80002ae0:	48 89       	lddpc	r9,80002b00 <check_all_buttons_high+0x70>
80002ae2:	30 08       	mov	r8,0
80002ae4:	b2 88       	st.b	r9[0x0],r8
			return true;
80002ae6:	30 18       	mov	r8,1
80002ae8:	c0 78       	rjmp	80002af6 <check_all_buttons_high+0x66>
		}
	}
	else
	{
		button_released_iteration = 0;
80002aea:	48 69       	lddpc	r9,80002b00 <check_all_buttons_high+0x70>
80002aec:	30 08       	mov	r8,0
80002aee:	b2 88       	st.b	r9[0x0],r8
80002af0:	c0 28       	rjmp	80002af4 <check_all_buttons_high+0x64>

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1) && (gpio_get_pin_value(PB2) == 1) && (gpio_get_pin_value(PB3) == 1) && (gpio_get_pin_value(PB4) == 1))
80002af2:	d7 03       	nop
	else
	{
		button_released_iteration = 0;
	}

	return false;
80002af4:	30 08       	mov	r8,0
}
80002af6:	10 9c       	mov	r12,r8
80002af8:	e3 cd 80 80 	ldm	sp++,r7,pc
80002afc:	80 00       	ld.sh	r0,r0[0x0]
80002afe:	77 10       	ld.w	r0,r11[0x44]
80002b00:	00 00       	add	r0,r0
80002b02:	02 b5       	st.h	r1++,r5

80002b04 <read_push_button>:

bool read_push_button(uint32_t pin, uint8_t *counter)
{
80002b04:	eb cd 40 80 	pushm	r7,lr
80002b08:	1a 97       	mov	r7,sp
80002b0a:	20 3d       	sub	sp,12
80002b0c:	ef 4c ff f8 	st.w	r7[-8],r12
80002b10:	ef 4b ff f4 	st.w	r7[-12],r11
	bool button_status = false;
80002b14:	30 08       	mov	r8,0
80002b16:	ef 68 ff ff 	st.b	r7[-1],r8

	if (gpio_get_pin_value(pin) == 0)
80002b1a:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b1e:	f0 1f 00 1b 	mcall	80002b88 <read_push_button+0x84>
80002b22:	18 98       	mov	r8,r12
80002b24:	58 08       	cp.w	r8,0
80002b26:	c2 11       	brne	80002b68 <read_push_button+0x64>
	{
		(*counter)++;
80002b28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002b2c:	11 88       	ld.ub	r8,r8[0x0]
80002b2e:	2f f8       	sub	r8,-1
80002b30:	5c 58       	castu.b	r8
80002b32:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002b36:	b2 88       	st.b	r9[0x0],r8
		if (*counter >= 3)
80002b38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002b3c:	11 89       	ld.ub	r9,r8[0x0]
80002b3e:	30 28       	mov	r8,2
80002b40:	f0 09 18 00 	cp.b	r9,r8
80002b44:	e0 88 00 1a 	brls	80002b78 <read_push_button+0x74>
		{
			button_status = true;
80002b48:	30 18       	mov	r8,1
80002b4a:	ef 68 ff ff 	st.b	r7[-1],r8
			if (enter_pressed)
80002b4e:	49 08       	lddpc	r8,80002b8c <read_push_button+0x88>
80002b50:	11 88       	ld.ub	r8,r8[0x0]
80002b52:	5c 58       	castu.b	r8
80002b54:	c0 60       	breq	80002b60 <read_push_button+0x5c>
			{
				enter_pressed = false;	
80002b56:	48 e9       	lddpc	r9,80002b8c <read_push_button+0x88>
80002b58:	30 08       	mov	r8,0
80002b5a:	b2 88       	st.b	r9[0x0],r8
				Start_W_timer();
80002b5c:	f0 1f 00 0d 	mcall	80002b90 <read_push_button+0x8c>
			}
			
			button_released = false;
80002b60:	48 d9       	lddpc	r9,80002b94 <read_push_button+0x90>
80002b62:	30 08       	mov	r8,0
80002b64:	b2 88       	st.b	r9[0x0],r8
80002b66:	c0 a8       	rjmp	80002b7a <read_push_button+0x76>
		}
	}
	else
	{
		button_status = false;
80002b68:	30 08       	mov	r8,0
80002b6a:	ef 68 ff ff 	st.b	r7[-1],r8
		*counter = 0;
80002b6e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002b72:	30 08       	mov	r8,0
80002b74:	b2 88       	st.b	r9[0x0],r8
80002b76:	c0 28       	rjmp	80002b7a <read_push_button+0x76>
			{
				enter_pressed = false;	
				Start_W_timer();
			}
			
			button_released = false;
80002b78:	d7 03       	nop
	else
	{
		button_status = false;
		*counter = 0;
	}
	return button_status;	
80002b7a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80002b7e:	10 9c       	mov	r12,r8
80002b80:	2f dd       	sub	sp,-12
80002b82:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b86:	00 00       	add	r0,r0
80002b88:	80 00       	ld.sh	r0,r0[0x0]
80002b8a:	77 10       	ld.w	r0,r11[0x44]
80002b8c:	00 00       	add	r0,r0
80002b8e:	00 0d       	add	sp,r0
80002b90:	80 00       	ld.sh	r0,r0[0x0]
80002b92:	21 30       	sub	r0,19
80002b94:	00 00       	add	r0,r0
80002b96:	00 0e       	add	lr,r0

80002b98 <push_buttons_init>:

void push_buttons_init(void)
{
80002b98:	eb cd 40 80 	pushm	r7,lr
80002b9c:	1a 97       	mov	r7,sp
	gpio_configure_pin(PB1,GPIO_DIR_INPUT);
80002b9e:	30 0b       	mov	r11,0
80002ba0:	30 bc       	mov	r12,11
80002ba2:	f0 1f 00 0b 	mcall	80002bcc <push_buttons_init+0x34>
	gpio_configure_pin(PB2,GPIO_DIR_INPUT);
80002ba6:	30 0b       	mov	r11,0
80002ba8:	30 cc       	mov	r12,12
80002baa:	f0 1f 00 09 	mcall	80002bcc <push_buttons_init+0x34>
	gpio_configure_pin(PB3,GPIO_DIR_INPUT);
80002bae:	30 0b       	mov	r11,0
80002bb0:	30 dc       	mov	r12,13
80002bb2:	f0 1f 00 07 	mcall	80002bcc <push_buttons_init+0x34>
	gpio_configure_pin(PB4,GPIO_DIR_INPUT);
80002bb6:	30 0b       	mov	r11,0
80002bb8:	30 ac       	mov	r12,10
80002bba:	f0 1f 00 05 	mcall	80002bcc <push_buttons_init+0x34>
	gpio_configure_pin(PB_ENTER,GPIO_DIR_INPUT);
80002bbe:	30 0b       	mov	r11,0
80002bc0:	32 ac       	mov	r12,42
80002bc2:	f0 1f 00 03 	mcall	80002bcc <push_buttons_init+0x34>
}
80002bc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002bca:	00 00       	add	r0,r0
80002bcc:	80 00       	ld.sh	r0,r0[0x0]
80002bce:	75 62       	ld.w	r2,r10[0x58]

80002bd0 <store_passcode>:

void store_passcode(uint32_t value)
{
80002bd0:	eb cd 40 80 	pushm	r7,lr
80002bd4:	1a 97       	mov	r7,sp
80002bd6:	20 2d       	sub	sp,8
80002bd8:	ef 4c ff f8 	st.w	r7[-8],r12
	unsigned char index = 0;
80002bdc:	30 08       	mov	r8,0
80002bde:	ef 68 ff ff 	st.b	r7[-1],r8
	index = passcode_byte_index >> 4;
80002be2:	49 88       	lddpc	r8,80002c40 <store_passcode+0x70>
80002be4:	11 88       	ld.ub	r8,r8[0x0]
80002be6:	5c 58       	castu.b	r8
80002be8:	a5 88       	lsr	r8,0x4
80002bea:	ef 68 ff ff 	st.b	r7[-1],r8
	pass_code[index] = pass_code[index] | (value << ((passcode_byte_index & 0x0000000F) << 1));
80002bee:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002bf2:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80002bf6:	49 48       	lddpc	r8,80002c44 <store_passcode+0x74>
80002bf8:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80002bfc:	49 18       	lddpc	r8,80002c40 <store_passcode+0x70>
80002bfe:	11 88       	ld.ub	r8,r8[0x0]
80002c00:	5c 58       	castu.b	r8
80002c02:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002c06:	a1 78       	lsl	r8,0x1
80002c08:	ee fb ff f8 	ld.w	r11,r7[-8]
80002c0c:	f6 08 09 48 	lsl	r8,r11,r8
80002c10:	10 4a       	or	r10,r8
80002c12:	48 d8       	lddpc	r8,80002c44 <store_passcode+0x74>
80002c14:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	if (passcode_byte_index++ > 128)
80002c18:	48 a8       	lddpc	r8,80002c40 <store_passcode+0x70>
80002c1a:	11 88       	ld.ub	r8,r8[0x0]
80002c1c:	5c 58       	castu.b	r8
80002c1e:	38 09       	mov	r9,-128
80002c20:	f2 08 18 00 	cp.b	r8,r9
80002c24:	5f b9       	srhi	r9
80002c26:	5c 59       	castu.b	r9
80002c28:	2f f8       	sub	r8,-1
80002c2a:	5c 58       	castu.b	r8
80002c2c:	48 5a       	lddpc	r10,80002c40 <store_passcode+0x70>
80002c2e:	b4 88       	st.b	r10[0x0],r8
80002c30:	58 09       	cp.w	r9,0
80002c32:	c0 40       	breq	80002c3a <store_passcode+0x6a>
	{
		passcode_byte_index = 0;
80002c34:	48 39       	lddpc	r9,80002c40 <store_passcode+0x70>
80002c36:	30 08       	mov	r8,0
80002c38:	b2 88       	st.b	r9[0x0],r8
	}
	//inter_key_delay = ENABLED;
}
80002c3a:	2f ed       	sub	sp,-8
80002c3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c40:	00 00       	add	r0,r0
80002c42:	01 41       	ld.w	r1,--r0
80002c44:	00 00       	add	r0,r0
80002c46:	01 20       	ld.uh	r0,r0++

80002c48 <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
static void tc_init(volatile avr32_tc_t *tc)
{
80002c48:	eb cd 40 80 	pushm	r7,lr
80002c4c:	1a 97       	mov	r7,sp
80002c4e:	20 1d       	sub	sp,4
80002c50:	ef 4c ff fc 	st.w	r7[-4],r12
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80002c54:	49 3b       	lddpc	r11,80002ca0 <tc_init+0x58>
80002c56:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c5a:	f0 1f 00 13 	mcall	80002ca4 <tc_init+0x5c>
	 * Set the compare triggers.
	 * We configure it to count every 10 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 10 ms, hence RC = (fPBA / 8) / 100
	 * to get an interrupt every 10 ms.
	 */
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL, (sysclk_get_pba_hz() / 8 / 100));
80002c5e:	f0 1f 00 13 	mcall	80002ca8 <tc_init+0x60>
80002c62:	18 99       	mov	r9,r12
80002c64:	e0 68 85 1f 	mov	r8,34079
80002c68:	ea 18 51 eb 	orh	r8,0x51eb
80002c6c:	f2 08 06 48 	mulu.d	r8,r9,r8
80002c70:	f2 08 16 08 	lsr	r8,r9,0x8
80002c74:	5c 88       	casts.h	r8
80002c76:	5c 78       	castu.h	r8
80002c78:	10 9a       	mov	r10,r8
80002c7a:	30 0b       	mov	r11,0
80002c7c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c80:	f0 1f 00 0b 	mcall	80002cac <tc_init+0x64>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80002c84:	48 ba       	lddpc	r10,80002cb0 <tc_init+0x68>
80002c86:	30 0b       	mov	r11,0
80002c88:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c8c:	f0 1f 00 0a 	mcall	80002cb4 <tc_init+0x6c>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80002c90:	30 0b       	mov	r11,0
80002c92:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c96:	f0 1f 00 09 	mcall	80002cb8 <tc_init+0x70>
}
80002c9a:	2f fd       	sub	sp,-4
80002c9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ca0:	80 00       	ld.sh	r0,r0[0x0]
80002ca2:	d7 40       	acall	0x1d0
80002ca4:	80 00       	ld.sh	r0,r0[0x0]
80002ca6:	80 d0       	ld.uh	r0,r0[0xa]
80002ca8:	80 00       	ld.sh	r0,r0[0x0]
80002caa:	26 5c       	sub	r12,101
80002cac:	80 00       	ld.sh	r0,r0[0x0]
80002cae:	82 98       	ld.uh	r8,r1[0x2]
80002cb0:	80 00       	ld.sh	r0,r0[0x0]
80002cb2:	d7 48       	*unknown*
80002cb4:	80 00       	ld.sh	r0,r0[0x0]
80002cb6:	7e e8       	ld.w	r8,pc[0x38]
80002cb8:	80 00       	ld.sh	r0,r0[0x0]
80002cba:	82 24       	ld.sh	r4,r1[0x4]

80002cbc <tc_task>:
 * - Register the TC interrupt
 * - Configure, enable the CPCS (RC compare match) interrupt,
 * - and start a TC channel in waveform mode
 */
void tc_task (void)
{
80002cbc:	eb cd 40 80 	pushm	r7,lr
80002cc0:	1a 97       	mov	r7,sp
80002cc2:	20 2d       	sub	sp,8
	volatile avr32_tc_t *tc = EXAMPLE_TC;
80002cc4:	fe 78 38 00 	mov	r8,-51200
80002cc8:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t timer = 0;
80002ccc:	30 08       	mov	r8,0
80002cce:	ef 48 ff fc 	st.w	r7[-4],r8
	 * peripheral clocks, except for the peripheral clocks explicitly
	 * enabled in conf_clock.h.
	 */
	//sysclk_init();
	// Enable the clock to the selected example Timer/counter peripheral module.
	sysclk_enable_peripheral_clock(EXAMPLE_TC);
80002cd2:	fe 7c 38 00 	mov	r12,-51200
80002cd6:	f0 1f 00 0d 	mcall	80002d08 <tc_task+0x4c>
	// Disable the interrupts
	cpu_irq_disable();
80002cda:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	//INTC_init_interrupts();
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80002cdc:	30 0a       	mov	r10,0
80002cde:	e0 6b 01 c0 	mov	r11,448
80002ce2:	48 bc       	lddpc	r12,80002d0c <tc_task+0x50>
80002ce4:	f0 1f 00 0b 	mcall	80002d10 <tc_task+0x54>
	// Enable the interrupts
	cpu_irq_enable();
80002ce8:	d5 03       	csrf	0x10
	// Initialize the timer module
	tc_init(tc);
80002cea:	ee fc ff f8 	ld.w	r12,r7[-8]
80002cee:	f0 1f 00 0a 	mcall	80002d14 <tc_task+0x58>
	// Initialize push buttons
	push_buttons_init();
80002cf2:	f0 1f 00 0a 	mcall	80002d18 <tc_task+0x5c>

    calculate_hash(CipherKey256, 8, CipherKey256_hash);
80002cf6:	48 aa       	lddpc	r10,80002d1c <tc_task+0x60>
80002cf8:	30 8b       	mov	r11,8
80002cfa:	48 ac       	lddpc	r12,80002d20 <tc_task+0x64>
80002cfc:	f0 1f 00 0a 	mcall	80002d24 <tc_task+0x68>
			 //*/
			 //// Reset the timer update flag to wait till next timer interrupt
			//update_timer = false;
		//}
	//}
}
80002d00:	2f ed       	sub	sp,-8
80002d02:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d06:	00 00       	add	r0,r0
80002d08:	80 00       	ld.sh	r0,r0[0x0]
80002d0a:	26 b4       	sub	r4,107
80002d0c:	80 00       	ld.sh	r0,r0[0x0]
80002d0e:	28 c8       	sub	r8,-116
80002d10:	80 00       	ld.sh	r0,r0[0x0]
80002d12:	79 a8       	ld.w	r8,r12[0x68]
80002d14:	80 00       	ld.sh	r0,r0[0x0]
80002d16:	2c 48       	sub	r8,-60
80002d18:	80 00       	ld.sh	r0,r0[0x0]
80002d1a:	2b 98       	sub	r8,-71
80002d1c:	00 00       	add	r0,r0
80002d1e:	02 90       	mov	r0,r1
80002d20:	80 00       	ld.sh	r0,r0[0x0]
80002d22:	d6 00       	acall	0x180
80002d24:	80 00       	ld.sh	r0,r0[0x0]
80002d26:	21 74       	sub	r4,23

80002d28 <init_hmatrix>:


/*! \brief Initializes the HSB bus matrix.
 */
static void init_hmatrix(void)
{
80002d28:	eb cd 40 80 	pushm	r7,lr
80002d2c:	1a 97       	mov	r7,sp
80002d2e:	20 1d       	sub	sp,4
  // Set flashc master type to last default to save one cycle for
  // each branch.
  avr32_hmatrix_scfg_t scfg;

  scfg = AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH];
80002d30:	fe 68 10 00 	mov	r8,-126976
80002d34:	71 08       	ld.w	r8,r8[0x40]
80002d36:	ef 48 ff fc 	st.w	r7[-4],r8
  scfg.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
80002d3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002d3e:	30 19       	mov	r9,1
80002d40:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
80002d44:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH] = scfg;
80002d48:	fe 68 10 00 	mov	r8,-126976
80002d4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d50:	f1 49 00 40 	st.w	r8[64],r9
}
80002d54:	2f fd       	sub	sp,-4
80002d56:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d5a:	d7 03       	nop

80002d5c <aes_task>:
 * 8N1.
 * Then it sets up the interrupt handler and waits for a USART interrupt to
 * trigger.
 */
void aes_task (void)
{
80002d5c:	eb cd 40 80 	pushm	r7,lr
80002d60:	1a 97       	mov	r7,sp
  init_hmatrix();
80002d62:	f0 1f 00 03 	mcall	80002d6c <aes_task+0x10>
}
80002d66:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d6a:	00 00       	add	r0,r0
80002d6c:	80 00       	ld.sh	r0,r0[0x0]
80002d6e:	2d 28       	sub	r8,-46

80002d70 <aes_init>:
	0x5A43D875,	// AES-CTR IV (BYTE2)
	0x00000001	// COUNTER
};

void aes_init (unsigned char Processing_Mode)
{
80002d70:	eb cd 40 80 	pushm	r7,lr
80002d74:	1a 97       	mov	r7,sp
80002d76:	20 3d       	sub	sp,12
80002d78:	18 98       	mov	r8,r12
80002d7a:	ef 68 ff f4 	st.b	r7[-12],r8
	  aes_config_t    AesConf;        // AES config structure
	  // Configure the AES.
	  AesConf.ProcessingMode = Processing_Mode;   // Cipher
80002d7e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002d82:	ef 68 ff f8 	st.b	r7[-8],r8
	  AesConf.ProcessingDelay = 0;                // No delay: best performance
80002d86:	30 08       	mov	r8,0
80002d88:	ef 68 ff f9 	st.b	r7[-7],r8
	  AesConf.StartMode = AES_START_MODE_AUTO;    // Manual mode
80002d8c:	30 18       	mov	r8,1
80002d8e:	ef 68 ff fa 	st.b	r7[-6],r8
	  AesConf.KeySize = AES_KEY_SIZE_256;         // 256bit cryptographic key
80002d92:	30 28       	mov	r8,2
80002d94:	ef 68 ff fb 	st.b	r7[-5],r8
	  AesConf.OpMode = AES_CBC_MODE;              // CTR cipher mode
80002d98:	30 18       	mov	r8,1
80002d9a:	ef 68 ff fc 	st.b	r7[-4],r8
	  AesConf.LodMode = 0;                        // LODMODE == 0 : the DATRDY flag
80002d9e:	30 08       	mov	r8,0
80002da0:	ef 68 ff fd 	st.b	r7[-3],r8
	  // is cleared when one of the output data registers is read (because we're in
	  // manual mode).
	  AesConf.CFBSize = 0;                        // Don't-care because we're using the CTR mode.
80002da4:	30 08       	mov	r8,0
80002da6:	ef 68 ff fe 	st.b	r7[-2],r8
	  AesConf.CounterMeasureMask = 0;             // Disable all counter measures.
80002daa:	30 08       	mov	r8,0
80002dac:	ef 68 ff ff 	st.b	r7[-1],r8
	  aes_configure(&AVR32_AES, &AesConf);
80002db0:	ee c8 00 08 	sub	r8,r7,8
80002db4:	10 9b       	mov	r11,r8
80002db6:	fc 7c 00 00 	mov	r12,-196608
80002dba:	f0 1f 00 06 	mcall	80002dd0 <aes_init+0x60>
	  aes_set_key(&AVR32_AES, CipherKey256);
80002dbe:	48 6b       	lddpc	r11,80002dd4 <aes_init+0x64>
80002dc0:	fc 7c 00 00 	mov	r12,-196608
80002dc4:	f0 1f 00 05 	mcall	80002dd8 <aes_init+0x68>

	  //ccountt0 = Get_system_register(AVR32_COUNT);
	  // Start encryption.
	  //aes_start(&AVR32_AES);

}
80002dc8:	2f dd       	sub	sp,-12
80002dca:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dce:	00 00       	add	r0,r0
80002dd0:	80 00       	ld.sh	r0,r0[0x0]
80002dd2:	6d 48       	ld.w	r8,r6[0x50]
80002dd4:	80 00       	ld.sh	r0,r0[0x0]
80002dd6:	d6 00       	acall	0x180
80002dd8:	80 00       	ld.sh	r0,r0[0x0]
80002dda:	6d d8       	ld.w	r8,r6[0x74]

80002ddc <apply_aes_encryption>:
uint32_t aes_out_data[128] = {0};

void apply_aes_encryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint32_t sector_id)
{
80002ddc:	eb cd 40 80 	pushm	r7,lr
80002de0:	1a 97       	mov	r7,sp
80002de2:	20 5d       	sub	sp,20
80002de4:	ef 4c ff f4 	st.w	r7[-12],r12
80002de8:	ef 4b ff f0 	st.w	r7[-16],r11
80002dec:	ef 4a ff ec 	st.w	r7[-20],r10
	unsigned char i = 0;
80002df0:	30 08       	mov	r8,0
80002df2:	ef 68 ff fb 	st.b	r7[-5],r8
	unsigned long int temp;
	
	temp = CipherKey256_hash[0];
80002df6:	4b 18       	lddpc	r8,80002eb8 <apply_aes_encryption+0xdc>
80002df8:	70 08       	ld.w	r8,r8[0x0]
80002dfa:	ef 48 ff fc 	st.w	r7[-4],r8

	CipherKey256_hash[0] = CipherKey256_hash[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
80002dfe:	4a f8       	lddpc	r8,80002eb8 <apply_aes_encryption+0xdc>
80002e00:	70 09       	ld.w	r9,r8[0x0]
80002e02:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002e06:	10 59       	eor	r9,r8
80002e08:	4a c8       	lddpc	r8,80002eb8 <apply_aes_encryption+0xdc>
80002e0a:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
							 
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);	
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);	
80002e0c:	4a bb       	lddpc	r11,80002eb8 <apply_aes_encryption+0xdc>
80002e0e:	fc 7c 00 00 	mov	r12,-196608
80002e12:	f0 1f 00 2b 	mcall	80002ebc <apply_aes_encryption+0xe0>
	
	CipherKey256_hash[0] = temp;
80002e16:	4a 98       	lddpc	r8,80002eb8 <apply_aes_encryption+0xdc>
80002e18:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002e1c:	91 09       	st.w	r8[0x0],r9
		
	for (; i < 128; i+=4)
80002e1e:	c2 78       	rjmp	80002e6c <apply_aes_encryption+0x90>
	{
		aes_init(AES_PMODE_CIPHER);
80002e20:	30 1c       	mov	r12,1
80002e22:	f0 1f 00 28 	mcall	80002ec0 <apply_aes_encryption+0xe4>
			
		aes_write_inputdata(aes, &aes_in_data_t[i]);
80002e26:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e2a:	a3 68       	lsl	r8,0x2
80002e2c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002e30:	f2 08 00 08 	add	r8,r9,r8
80002e34:	10 9b       	mov	r11,r8
80002e36:	ee fc ff f4 	ld.w	r12,r7[-12]
80002e3a:	f0 1f 00 23 	mcall	80002ec4 <apply_aes_encryption+0xe8>

		while (!(aes->isr & 0x00000001));
80002e3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e42:	70 78       	ld.w	r8,r8[0x1c]
80002e44:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002e48:	cf b0       	breq	80002e3e <apply_aes_encryption+0x62>

		aes_read_outputdata(aes, &aes_out_data[i]);
80002e4a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e4e:	f0 09 15 02 	lsl	r9,r8,0x2
80002e52:	49 e8       	lddpc	r8,80002ec8 <apply_aes_encryption+0xec>
80002e54:	f2 08 00 08 	add	r8,r9,r8
80002e58:	10 9b       	mov	r11,r8
80002e5a:	ee fc ff f4 	ld.w	r12,r7[-12]
80002e5e:	f0 1f 00 1c 	mcall	80002ecc <apply_aes_encryption+0xf0>
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);	
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);	
	
	CipherKey256_hash[0] = temp;
		
	for (; i < 128; i+=4)
80002e62:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e66:	2f c8       	sub	r8,-4
80002e68:	ef 68 ff fb 	st.b	r7[-5],r8
80002e6c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80002e70:	30 08       	mov	r8,0
80002e72:	f0 09 18 00 	cp.b	r9,r8
80002e76:	cd 54       	brge	80002e20 <apply_aes_encryption+0x44>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < 128; i++)
80002e78:	30 08       	mov	r8,0
80002e7a:	ef 68 ff fb 	st.b	r7[-5],r8
80002e7e:	c1 38       	rjmp	80002ea4 <apply_aes_encryption+0xc8>
	{
		aes_in_data_t[i] = aes_out_data[i];
80002e80:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e84:	a3 68       	lsl	r8,0x2
80002e86:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002e8a:	f2 08 00 08 	add	r8,r9,r8
80002e8e:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80002e92:	48 e9       	lddpc	r9,80002ec8 <apply_aes_encryption+0xec>
80002e94:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80002e98:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < 128; i++)
80002e9a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e9e:	2f f8       	sub	r8,-1
80002ea0:	ef 68 ff fb 	st.b	r7[-5],r8
80002ea4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80002ea8:	30 08       	mov	r8,0
80002eaa:	f0 09 18 00 	cp.b	r9,r8
80002eae:	ce 94       	brge	80002e80 <apply_aes_encryption+0xa4>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
80002eb0:	2f bd       	sub	sp,-20
80002eb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002eb6:	00 00       	add	r0,r0
80002eb8:	00 00       	add	r0,r0
80002eba:	02 90       	mov	r0,r1
80002ebc:	80 00       	ld.sh	r0,r0[0x0]
80002ebe:	6e 66       	ld.w	r6,r7[0x18]
80002ec0:	80 00       	ld.sh	r0,r0[0x0]
80002ec2:	2d 70       	sub	r0,-41
80002ec4:	80 00       	ld.sh	r0,r0[0x0]
80002ec6:	6e c2       	ld.w	r2,r7[0x30]
80002ec8:	00 00       	add	r0,r0
80002eca:	02 b8       	st.h	r1++,r8
80002ecc:	80 00       	ld.sh	r0,r0[0x0]
80002ece:	6f 5a       	ld.w	r10,r7[0x54]

80002ed0 <apply_aes_decryption>:


void apply_aes_decryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint32_t sector_id)
{
80002ed0:	eb cd 40 80 	pushm	r7,lr
80002ed4:	1a 97       	mov	r7,sp
80002ed6:	20 5d       	sub	sp,20
80002ed8:	ef 4c ff f4 	st.w	r7[-12],r12
80002edc:	ef 4b ff f0 	st.w	r7[-16],r11
80002ee0:	ef 4a ff ec 	st.w	r7[-20],r10
	
	unsigned char i = 0;
80002ee4:	30 08       	mov	r8,0
80002ee6:	ef 68 ff fb 	st.b	r7[-5],r8
	unsigned long int temp;

	temp = CipherKey256_hash[0];
80002eea:	4b 18       	lddpc	r8,80002fac <apply_aes_decryption+0xdc>
80002eec:	70 08       	ld.w	r8,r8[0x0]
80002eee:	ef 48 ff fc 	st.w	r7[-4],r8

	CipherKey256_hash[0] = CipherKey256_hash[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
80002ef2:	4a f8       	lddpc	r8,80002fac <apply_aes_decryption+0xdc>
80002ef4:	70 09       	ld.w	r9,r8[0x0]
80002ef6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002efa:	10 59       	eor	r9,r8
80002efc:	4a c8       	lddpc	r8,80002fac <apply_aes_decryption+0xdc>
80002efe:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
	
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);
80002f00:	4a bb       	lddpc	r11,80002fac <apply_aes_decryption+0xdc>
80002f02:	fc 7c 00 00 	mov	r12,-196608
80002f06:	f0 1f 00 2b 	mcall	80002fb0 <apply_aes_decryption+0xe0>
	
	CipherKey256_hash[0] = temp;
80002f0a:	4a 98       	lddpc	r8,80002fac <apply_aes_decryption+0xdc>
80002f0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002f10:	91 09       	st.w	r8[0x0],r9

	for (; i < 128; i+=4)
80002f12:	c2 78       	rjmp	80002f60 <apply_aes_decryption+0x90>
	{
		aes_init(AES_PMODE_DECIPHER);
80002f14:	30 0c       	mov	r12,0
80002f16:	f0 1f 00 28 	mcall	80002fb4 <apply_aes_decryption+0xe4>

		aes_write_inputdata(aes, &aes_in_data_t[i]);
80002f1a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002f1e:	a3 68       	lsl	r8,0x2
80002f20:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002f24:	f2 08 00 08 	add	r8,r9,r8
80002f28:	10 9b       	mov	r11,r8
80002f2a:	ee fc ff f4 	ld.w	r12,r7[-12]
80002f2e:	f0 1f 00 23 	mcall	80002fb8 <apply_aes_decryption+0xe8>

		while (!(aes->isr & 0x00000001));
80002f32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002f36:	70 78       	ld.w	r8,r8[0x1c]
80002f38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002f3c:	cf b0       	breq	80002f32 <apply_aes_decryption+0x62>

		aes_read_outputdata(aes, &aes_out_data[i]);
80002f3e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002f42:	f0 09 15 02 	lsl	r9,r8,0x2
80002f46:	49 e8       	lddpc	r8,80002fbc <apply_aes_decryption+0xec>
80002f48:	f2 08 00 08 	add	r8,r9,r8
80002f4c:	10 9b       	mov	r11,r8
80002f4e:	ee fc ff f4 	ld.w	r12,r7[-12]
80002f52:	f0 1f 00 1c 	mcall	80002fc0 <apply_aes_decryption+0xf0>
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);
	
	CipherKey256_hash[0] = temp;

	for (; i < 128; i+=4)
80002f56:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002f5a:	2f c8       	sub	r8,-4
80002f5c:	ef 68 ff fb 	st.b	r7[-5],r8
80002f60:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80002f64:	30 08       	mov	r8,0
80002f66:	f0 09 18 00 	cp.b	r9,r8
80002f6a:	cd 54       	brge	80002f14 <apply_aes_decryption+0x44>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < 128; i++)
80002f6c:	30 08       	mov	r8,0
80002f6e:	ef 68 ff fb 	st.b	r7[-5],r8
80002f72:	c1 38       	rjmp	80002f98 <apply_aes_decryption+0xc8>
	{
		aes_in_data_t[i] = aes_out_data[i];
80002f74:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002f78:	a3 68       	lsl	r8,0x2
80002f7a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002f7e:	f2 08 00 08 	add	r8,r9,r8
80002f82:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80002f86:	48 e9       	lddpc	r9,80002fbc <apply_aes_decryption+0xec>
80002f88:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80002f8c:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < 128; i++)
80002f8e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002f92:	2f f8       	sub	r8,-1
80002f94:	ef 68 ff fb 	st.b	r7[-5],r8
80002f98:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80002f9c:	30 08       	mov	r8,0
80002f9e:	f0 09 18 00 	cp.b	r9,r8
80002fa2:	ce 94       	brge	80002f74 <apply_aes_decryption+0xa4>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
80002fa4:	2f bd       	sub	sp,-20
80002fa6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002faa:	00 00       	add	r0,r0
80002fac:	00 00       	add	r0,r0
80002fae:	02 90       	mov	r0,r1
80002fb0:	80 00       	ld.sh	r0,r0[0x0]
80002fb2:	6e 66       	ld.w	r6,r7[0x18]
80002fb4:	80 00       	ld.sh	r0,r0[0x0]
80002fb6:	2d 70       	sub	r0,-41
80002fb8:	80 00       	ld.sh	r0,r0[0x0]
80002fba:	6e c2       	ld.w	r2,r7[0x30]
80002fbc:	00 00       	add	r0,r0
80002fbe:	02 b8       	st.h	r1++,r8
80002fc0:	80 00       	ld.sh	r0,r0[0x0]
80002fc2:	6f 5a       	ld.w	r10,r7[0x54]

80002fc4 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
# define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80002fc4:	eb cd 40 80 	pushm	r7,lr
80002fc8:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002fca:	30 3b       	mov	r11,3
80002fcc:	34 3c       	mov	r12,67
80002fce:	f0 1f 00 17 	mcall	80003028 <board_init+0x64>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002fd2:	30 3b       	mov	r11,3
80002fd4:	36 5c       	mov	r12,101
80002fd6:	f0 1f 00 15 	mcall	80003028 <board_init+0x64>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002fda:	30 3b       	mov	r11,3
80002fdc:	36 9c       	mov	r12,105
80002fde:	f0 1f 00 13 	mcall	80003028 <board_init+0x64>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002fe2:	30 3b       	mov	r11,3
80002fe4:	36 6c       	mov	r12,102
80002fe6:	f0 1f 00 11 	mcall	80003028 <board_init+0x64>

	gpio_configure_pin(GPIO_PUSH_BUTTON_SW2,GPIO_DIR_INPUT);
80002fea:	30 0b       	mov	r11,0
80002fec:	32 ac       	mov	r12,42
80002fee:	f0 1f 00 0f 	mcall	80003028 <board_init+0x64>
# define AT45DBX_ENABLE_NPCS_PIN(NPCS, unused) \
	{AT45DBX_SPI_NPCS##NPCS##_PIN, AT45DBX_SPI_NPCS##NPCS##_FUNCTION},
	MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
# undef AT45DBX_ENABLE_NPCS_PIN
	};
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
80002ff2:	30 4b       	mov	r11,4
80002ff4:	48 ec       	lddpc	r12,8000302c <board_init+0x68>
80002ff6:	f0 1f 00 0f 	mcall	80003030 <board_init+0x6c>
		{SD_SLOT_4BITS_DATA1_PIN, SD_SLOT_4BITS_DATA1_FUNCTION},
		{SD_SLOT_4BITS_DATA2_PIN, SD_SLOT_4BITS_DATA2_FUNCTION},
		{SD_SLOT_4BITS_DATA3_PIN, SD_SLOT_4BITS_DATA3_FUNCTION}
	};
	// Configure Slot 0 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP,
80002ffa:	30 ab       	mov	r11,10
80002ffc:	48 ec       	lddpc	r12,80003034 <board_init+0x70>
80002ffe:	f0 1f 00 0d 	mcall	80003030 <board_init+0x6c>
			sizeof(SD_MMC_MCI_GPIO_MAP) / sizeof(SD_MMC_MCI_GPIO_MAP[0]));
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_CARD_DETECT);
80003002:	32 bc       	mov	r12,43
80003004:	f0 1f 00 0d 	mcall	80003038 <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_WRITE_PROTECT);
80003008:	36 cc       	mov	r12,108
8000300a:	f0 1f 00 0c 	mcall	80003038 <board_init+0x74>

	// Configure Slot 1 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP_1,
8000300e:	30 6b       	mov	r11,6
80003010:	48 bc       	lddpc	r12,8000303c <board_init+0x78>
80003012:	f0 1f 00 08 	mcall	80003030 <board_init+0x6c>
	sizeof(SD_MMC_MCI_GPIO_MAP_1) / sizeof(SD_MMC_MCI_GPIO_MAP_1[0]));
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_CARD_DETECT);
80003016:	32 8c       	mov	r12,40
80003018:	f0 1f 00 08 	mcall	80003038 <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_WRITE_PROTECT);
8000301c:	32 6c       	mov	r12,38
8000301e:	f0 1f 00 07 	mcall	80003038 <board_init+0x74>
		{AVR32_USART3_TXD_0_3_PIN, AVR32_USART3_TXD_0_3_FUNCTION },
	};
	gpio_enable_module(COMPORT3_GPIO_MAP,
			sizeof(COMPORT3_GPIO_MAP) / sizeof(COMPORT3_GPIO_MAP[0]));
#endif
}
80003022:	e3 cd 80 80 	ldm	sp++,r7,pc
80003026:	00 00       	add	r0,r0
80003028:	80 00       	ld.sh	r0,r0[0x0]
8000302a:	75 62       	ld.w	r2,r10[0x58]
8000302c:	80 00       	ld.sh	r0,r0[0x0]
8000302e:	d7 4c       	*unknown*
80003030:	80 00       	ld.sh	r0,r0[0x0]
80003032:	73 54       	ld.w	r4,r9[0x54]
80003034:	80 00       	ld.sh	r0,r0[0x0]
80003036:	d7 54       	*unknown*
80003038:	80 00       	ld.sh	r0,r0[0x0]
8000303a:	75 28       	ld.w	r8,r10[0x48]
8000303c:	80 00       	ld.sh	r0,r0[0x0]
8000303e:	d7 68       	*unknown*

80003040 <LED_Off>:
  return Tst_bits(LED_State, leds);
}


void LED_Off(U32 leds)
{
80003040:	eb cd 40 80 	pushm	r7,lr
80003044:	1a 97       	mov	r7,sp
80003046:	20 4d       	sub	sp,16
80003048:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8000304c:	4a 98       	lddpc	r8,800030f0 <LED_Off+0xb0>
8000304e:	21 08       	sub	r8,16
80003050:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80003054:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003058:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000305c:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80003060:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003064:	f0 09 11 ff 	rsub	r9,r8,-1
80003068:	4a 38       	lddpc	r8,800030f4 <LED_Off+0xb4>
8000306a:	70 08       	ld.w	r8,r8[0x0]
8000306c:	10 69       	and	r9,r8
8000306e:	4a 28       	lddpc	r8,800030f4 <LED_Off+0xb4>
80003070:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80003072:	c3 78       	rjmp	800030e0 <LED_Off+0xa0>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80003074:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003078:	5c 98       	brev	r8
8000307a:	f0 08 12 00 	clz	r8,r8
8000307e:	5c 58       	castu.b	r8
80003080:	2f f8       	sub	r8,-1
80003082:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80003086:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000308a:	a5 68       	lsl	r8,0x4
8000308c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003090:	f2 08 00 08 	add	r8,r9,r8
80003094:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80003098:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000309c:	70 08       	ld.w	r8,r8[0x0]
8000309e:	a9 68       	lsl	r8,0x8
800030a0:	e0 28 f0 00 	sub	r8,61440
800030a4:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800030a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030ac:	70 19       	ld.w	r9,r8[0x4]
800030ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030b2:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800030b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030ba:	70 19       	ld.w	r9,r8[0x4]
800030bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030c0:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800030c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030c8:	70 19       	ld.w	r9,r8[0x4]
800030ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030ce:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
800030d0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800030d4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800030d8:	f2 08 0a 48 	lsr	r8,r9,r8
800030dc:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800030e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800030e4:	58 08       	cp.w	r8,0
800030e6:	cc 71       	brne	80003074 <LED_Off+0x34>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800030e8:	2f cd       	sub	sp,-16
800030ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800030ee:	00 00       	add	r0,r0
800030f0:	80 00       	ld.sh	r0,r0[0x0]
800030f2:	d7 74       	*unknown*
800030f4:	00 00       	add	r0,r0
800030f6:	00 10       	sub	r0,r0

800030f8 <LED_On>:


void LED_On(U32 leds)
{
800030f8:	eb cd 40 80 	pushm	r7,lr
800030fc:	1a 97       	mov	r7,sp
800030fe:	20 4d       	sub	sp,16
80003100:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80003104:	4a 88       	lddpc	r8,800031a4 <LED_On+0xac>
80003106:	21 08       	sub	r8,16
80003108:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000310c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003110:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003114:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80003118:	4a 48       	lddpc	r8,800031a8 <LED_On+0xb0>
8000311a:	70 09       	ld.w	r9,r8[0x0]
8000311c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003120:	10 49       	or	r9,r8
80003122:	4a 28       	lddpc	r8,800031a8 <LED_On+0xb0>
80003124:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80003126:	c3 78       	rjmp	80003194 <LED_On+0x9c>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80003128:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000312c:	5c 98       	brev	r8
8000312e:	f0 08 12 00 	clz	r8,r8
80003132:	5c 58       	castu.b	r8
80003134:	2f f8       	sub	r8,-1
80003136:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8000313a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000313e:	a5 68       	lsl	r8,0x4
80003140:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003144:	f2 08 00 08 	add	r8,r9,r8
80003148:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000314c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003150:	70 08       	ld.w	r8,r8[0x0]
80003152:	a9 68       	lsl	r8,0x8
80003154:	e0 28 f0 00 	sub	r8,61440
80003158:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
8000315c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003160:	70 19       	ld.w	r9,r8[0x4]
80003162:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003166:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000316a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000316e:	70 19       	ld.w	r9,r8[0x4]
80003170:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003174:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80003178:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000317c:	70 19       	ld.w	r9,r8[0x4]
8000317e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003182:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80003184:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003188:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000318c:	f2 08 0a 48 	lsr	r8,r9,r8
80003190:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80003194:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003198:	58 08       	cp.w	r8,0
8000319a:	cc 71       	brne	80003128 <LED_On+0x30>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8000319c:	2f cd       	sub	sp,-16
8000319e:	e3 cd 80 80 	ldm	sp++,r7,pc
800031a2:	00 00       	add	r0,r0
800031a4:	80 00       	ld.sh	r0,r0[0x0]
800031a6:	d7 74       	*unknown*
800031a8:	00 00       	add	r0,r0
800031aa:	00 10       	sub	r0,r0

800031ac <et024006_Init>:
 *  @param cpu_hz CPU speed in Hz. This is needed for power up timings.
 *  @param hsb_hz HSB bus speed in Hz. This parameter is needed to set up the SMC.
 *  If SPI mode is used then this parameter is ignored.
 */
void et024006_Init( unsigned long cpu_hz, unsigned long hsb_hz )
{
800031ac:	eb cd 40 80 	pushm	r7,lr
800031b0:	1a 97       	mov	r7,sp
800031b2:	20 2d       	sub	sp,8
800031b4:	ef 4c ff fc 	st.w	r7[-4],r12
800031b8:	ef 4b ff f8 	st.w	r7[-8],r11
  tft_data.cpu_hz = cpu_hz;
800031bc:	49 08       	lddpc	r8,800031fc <et024006_Init+0x50>
800031be:	ee f9 ff fc 	ld.w	r9,r7[-4]
800031c2:	91 09       	st.w	r8[0x0],r9
  tft_data.hsb_hz = hsb_hz;
800031c4:	48 e8       	lddpc	r8,800031fc <et024006_Init+0x50>
800031c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800031ca:	91 19       	st.w	r8[0x4],r9

#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_SPI)
  et024006_InitSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
800031cc:	48 c8       	lddpc	r8,800031fc <et024006_Init+0x50>
800031ce:	70 18       	ld.w	r8,r8[0x4]
800031d0:	10 9c       	mov	r12,r8
800031d2:	f0 1f 00 0c 	mcall	80003200 <et024006_Init+0x54>
#endif
  et024006_SetupInterface();
800031d6:	f0 1f 00 0c 	mcall	80003204 <et024006_Init+0x58>
  et024006_ResetDisplay();
800031da:	f0 1f 00 0c 	mcall	80003208 <et024006_Init+0x5c>
  et024006_AdjustGamma();
800031de:	f0 1f 00 0c 	mcall	8000320c <et024006_Init+0x60>
  et024006_GeneralSettings();
800031e2:	f0 1f 00 0c 	mcall	80003210 <et024006_Init+0x64>
  et024006_InterfaceSettings();
800031e6:	f0 1f 00 0c 	mcall	80003214 <et024006_Init+0x68>
  et024006_PowerSettings();
800031ea:	f0 1f 00 0c 	mcall	80003218 <et024006_Init+0x6c>
  et024006_PowerUp();
800031ee:	f0 1f 00 0c 	mcall	8000321c <et024006_Init+0x70>
  et024006_PowerOn();
800031f2:	f0 1f 00 0c 	mcall	80003220 <et024006_Init+0x74>
}
800031f6:	2f ed       	sub	sp,-8
800031f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800031fc:	00 00       	add	r0,r0
800031fe:	04 b8       	st.h	r2++,r8
80003200:	80 00       	ld.sh	r0,r0[0x0]
80003202:	6f f4       	ld.w	r4,r7[0x7c]
80003204:	80 00       	ld.sh	r0,r0[0x0]
80003206:	39 b0       	mov	r0,-101
80003208:	80 00       	ld.sh	r0,r0[0x0]
8000320a:	39 dc       	mov	r12,-99
8000320c:	80 00       	ld.sh	r0,r0[0x0]
8000320e:	3c 9c       	mov	r12,-55
80003210:	80 00       	ld.sh	r0,r0[0x0]
80003212:	3e 2a       	mov	r10,-30
80003214:	80 00       	ld.sh	r0,r0[0x0]
80003216:	41 c6       	lddsp	r6,sp[0x70]
80003218:	80 00       	ld.sh	r0,r0[0x0]
8000321a:	40 38       	lddsp	r8,sp[0xc]
8000321c:	80 00       	ld.sh	r0,r0[0x0]
8000321e:	41 f4       	lddsp	r4,sp[0x7c]
80003220:	80 00       	ld.sh	r0,r0[0x0]
80003222:	49 28       	lddpc	r8,80003268 <et024006_DrawFilledRect+0x44>

80003224 <et024006_DrawFilledRect>:
  }
}


void et024006_DrawFilledRect( uint16_t x, uint16_t y, uint16_t width, uint16_t height, et024006_color_t color )
{
80003224:	eb cd 40 80 	pushm	r7,lr
80003228:	1a 97       	mov	r7,sp
8000322a:	20 7d       	sub	sp,28
8000322c:	ef 5c ff f4 	st.h	r7[-12],r12
80003230:	ef 5b ff f0 	st.h	r7[-16],r11
80003234:	ef 5a ff ec 	st.h	r7[-20],r10
80003238:	ef 59 ff e8 	st.h	r7[-24],r9
8000323c:	ef 58 ff e4 	st.h	r7[-28],r8
  Assert( y < ET024006_HEIGHT );
  Assert( width > 0 );
  Assert( height > 0 );

  // Compute bottom right point.
  uint16_t x2 = x + width - 1;
80003240:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80003244:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80003248:	f2 08 00 08 	add	r8,r9,r8
8000324c:	5c 88       	casts.h	r8
8000324e:	20 18       	sub	r8,1
80003250:	ef 58 ff f8 	st.h	r7[-8],r8
  uint16_t y2 = y + height - 1;
80003254:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80003258:	ef 08 ff e8 	ld.sh	r8,r7[-24]
8000325c:	f2 08 00 08 	add	r8,r9,r8
80003260:	5c 88       	casts.h	r8
80003262:	20 18       	sub	r8,1
80003264:	ef 58 ff fa 	st.h	r7[-6],r8
  // More sanity check.
  Assert( x2 < ET024006_WIDTH );
  Assert( y2 < ET024006_HEIGHT );

  // Set up draw area and copy pixel color until area is full.
  et024006_SetLimits( x, y, x2, y2 );
80003268:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8000326c:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80003270:	ef 1b ff f0 	ld.uh	r11,r7[-16]
80003274:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80003278:	10 9c       	mov	r12,r8
8000327a:	f0 1f 00 0b 	mcall	800032a4 <et024006_DrawFilledRect+0x80>
  uint32_t count = (uint32_t) width * height;
8000327e:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80003282:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80003286:	f2 08 02 48 	mul	r8,r9,r8
8000328a:	ef 48 ff fc 	st.w	r7[-4],r8
  et024006_DuplicatePixel( color, count );
8000328e:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80003292:	ee fb ff fc 	ld.w	r11,r7[-4]
80003296:	10 9c       	mov	r12,r8
80003298:	f0 1f 00 04 	mcall	800032a8 <et024006_DrawFilledRect+0x84>
}
8000329c:	2f 9d       	sub	sp,-28
8000329e:	e3 cd 80 80 	ldm	sp++,r7,pc
800032a2:	00 00       	add	r0,r0
800032a4:	80 00       	ld.sh	r0,r0[0x0]
800032a6:	36 aa       	mov	r10,106
800032a8:	80 00       	ld.sh	r0,r0[0x0]
800032aa:	39 04       	mov	r4,-112

800032ac <et024006_PrintString>:
void et024006_PrintString(char *lcd_string, const unsigned char *font_style,
                          uint16_t x,
                          uint16_t y,
                          uint16_t fcolor,
                          int bcolor)
{
800032ac:	eb cd 40 c0 	pushm	r6-r7,lr
800032b0:	1a 97       	mov	r7,sp
800032b2:	20 9d       	sub	sp,36
800032b4:	ee c6 ff f4 	sub	r6,r7,-12
800032b8:	ef 4c ff ec 	st.w	r7[-20],r12
800032bc:	ef 4b ff e8 	st.w	r7[-24],r11
800032c0:	ef 5a ff e4 	st.h	r7[-28],r10
800032c4:	ef 59 ff e0 	st.h	r7[-32],r9
800032c8:	ef 58 ff dc 	st.h	r7[-36],r8
  uint16_t  row, col;
  unsigned char mask = 0, xfont, yfont, font_size;
800032cc:	30 08       	mov	r8,0
800032ce:	ef 68 ff f4 	st.b	r7[-12],r8
  const unsigned char *data;
  uint16_t saved_x = x;
800032d2:	ef 08 ff e4 	ld.sh	r8,r7[-28]
800032d6:	ef 58 ff fc 	st.h	r7[-4],r8

  // if string is empty there is nothing to do
  if( *lcd_string == '\0')
800032da:	ee f8 ff ec 	ld.w	r8,r7[-20]
800032de:	11 88       	ld.ub	r8,r8[0x0]
800032e0:	58 08       	cp.w	r8,0
800032e2:	e0 80 01 a4 	breq	8000362a <et024006_PrintString+0x37e>
    return;

  data = font_style;  // point to the start of the font table
800032e6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800032ea:	ef 48 ff f8 	st.w	r7[-8],r8
  xfont = *data;  // get font x width
800032ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032f2:	11 88       	ld.ub	r8,r8[0x0]
800032f4:	ef 68 ff f5 	st.b	r7[-11],r8
  data++;
800032f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032fc:	2f f8       	sub	r8,-1
800032fe:	ef 48 ff f8 	st.w	r7[-8],r8
  yfont = *data;  // get font y length
80003302:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003306:	11 88       	ld.ub	r8,r8[0x0]
80003308:	ef 68 ff f6 	st.b	r7[-10],r8
  data++;
8000330c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003310:	2f f8       	sub	r8,-1
80003312:	ef 48 ff f8 	st.w	r7[-8],r8
  font_size = *data;  // get data bytes per font
80003316:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000331a:	11 88       	ld.ub	r8,r8[0x0]
8000331c:	ef 68 ff f7 	st.b	r7[-9],r8

  // If transparent mode
  if(bcolor == -1)
80003320:	6c 08       	ld.w	r8,r6[0x0]
80003322:	5b f8       	cp.w	r8,-1
80003324:	e0 81 00 c8 	brne	800034b4 <et024006_PrintString+0x208>
  {
    // set window to display size
    et024006_SetLimits( 0, 0, ET024006_WIDTH - 1, ET024006_HEIGHT - 1 );
80003328:	e0 69 00 ef 	mov	r9,239
8000332c:	e0 6a 01 3f 	mov	r10,319
80003330:	30 0b       	mov	r11,0
80003332:	30 0c       	mov	r12,0
80003334:	f0 1f 00 c0 	mcall	80003634 <et024006_PrintString+0x388>

    do
    {
      if(*lcd_string =='\n') {
80003338:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000333c:	11 89       	ld.ub	r9,r8[0x0]
8000333e:	30 a8       	mov	r8,10
80003340:	f0 09 18 00 	cp.b	r9,r8
80003344:	c1 31       	brne	8000336a <et024006_PrintString+0xbe>
        x = saved_x;
80003346:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000334a:	ef 58 ff e4 	st.h	r7[-28],r8
        y += yfont;
8000334e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80003352:	ef 09 ff e0 	ld.sh	r9,r7[-32]
80003356:	f2 08 00 08 	add	r8,r9,r8
8000335a:	ef 58 ff e0 	st.h	r7[-32],r8
        lcd_string++;  // next character in string
8000335e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003362:	2f f8       	sub	r8,-1
80003364:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
80003368:	c9 f8       	rjmp	800034a6 <et024006_PrintString+0x1fa>
      } else if(*lcd_string =='\t') {
8000336a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000336e:	11 89       	ld.ub	r9,r8[0x0]
80003370:	30 98       	mov	r8,9
80003372:	f0 09 18 00 	cp.b	r9,r8
80003376:	c0 f1       	brne	80003394 <et024006_PrintString+0xe8>
        x += xfont;
80003378:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000337c:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80003380:	f2 08 00 08 	add	r8,r9,r8
80003384:	ef 58 ff e4 	st.h	r7[-28],r8
        lcd_string++;  // next character in string
80003388:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000338c:	2f f8       	sub	r8,-1
8000338e:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
80003392:	c8 a8       	rjmp	800034a6 <et024006_PrintString+0x1fa>
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
80003394:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003398:	11 89       	ld.ub	r9,r8[0x0]
8000339a:	31 f8       	mov	r8,31
8000339c:	f0 09 18 00 	cp.b	r9,r8
800033a0:	e0 88 00 1d 	brls	800033da <et024006_PrintString+0x12e>
800033a4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800033a8:	11 88       	ld.ub	r8,r8[0x0]
800033aa:	10 99       	mov	r9,r8
800033ac:	30 08       	mov	r8,0
800033ae:	f0 09 18 00 	cp.b	r9,r8
800033b2:	c1 45       	brlt	800033da <et024006_PrintString+0x12e>
      {
        // point to character data in font table
        data =  (font_style + font_size) +  // header offset
800033b4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
          (font_size * (int)(*lcd_string - 32)); // character select
800033b8:	ef 3a ff f7 	ld.ub	r10,r7[-9]
800033bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800033c0:	11 88       	ld.ub	r8,r8[0x0]
800033c2:	22 08       	sub	r8,32
800033c4:	f4 08 02 48 	mul	r8,r10,r8
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
      {
        // point to character data in font table
        data =  (font_style + font_size) +  // header offset
800033c8:	f2 08 00 08 	add	r8,r9,r8
800033cc:	ee f9 ff e8 	ld.w	r9,r7[-24]
800033d0:	f2 08 00 08 	add	r8,r9,r8
800033d4:	ef 48 ff f8 	st.w	r7[-8],r8
        x += xfont;
        lcd_string++;  // next character in string
        continue;
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
800033d8:	c1 28       	rjmp	800033fc <et024006_PrintString+0x150>
        data =  (font_style + font_size) +  // header offset
          (font_size * (int)(*lcd_string - 32)); // character select
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;
800033da:	ef 3a ff f7 	ld.ub	r10,r7[-9]
800033de:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800033e2:	12 98       	mov	r8,r9
800033e4:	a1 78       	lsl	r8,0x1
800033e6:	12 08       	add	r8,r9
800033e8:	a5 78       	lsl	r8,0x5
800033ea:	12 18       	sub	r8,r9
800033ec:	f4 08 00 08 	add	r8,r10,r8
800033f0:	ee f9 ff e8 	ld.w	r9,r7[-24]
800033f4:	f2 08 00 08 	add	r8,r9,r8
800033f8:	ef 48 ff f8 	st.w	r7[-8],r8

      for (row = y; row < (y + yfont); row++)
800033fc:	ef 08 ff e0 	ld.sh	r8,r7[-32]
80003400:	ef 58 ff f0 	st.h	r7[-16],r8
80003404:	c3 a8       	rjmp	80003478 <et024006_PrintString+0x1cc>
      {
        mask = 0x80;
80003406:	38 08       	mov	r8,-128
80003408:	ef 68 ff f4 	st.b	r7[-12],r8
        for (col = x; col < (x + xfont); col++)
8000340c:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80003410:	ef 58 ff f2 	st.h	r7[-14],r8
80003414:	c1 e8       	rjmp	80003450 <et024006_PrintString+0x1a4>
        {
          if (*data & mask) // if pixel data then put dot
80003416:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000341a:	11 89       	ld.ub	r9,r8[0x0]
8000341c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003420:	f3 e8 00 08 	and	r8,r9,r8
80003424:	5c 58       	castu.b	r8
80003426:	c0 b0       	breq	8000343c <et024006_PrintString+0x190>
          {
            et024006_DrawQuickPixel( col, row, fcolor );
80003428:	ef 1a ff dc 	ld.uh	r10,r7[-36]
8000342c:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80003430:	ef 18 ff f2 	ld.uh	r8,r7[-14]
80003434:	12 9b       	mov	r11,r9
80003436:	10 9c       	mov	r12,r8
80003438:	f0 1f 00 80 	mcall	80003638 <et024006_PrintString+0x38c>
          }
          mask >>= 1;
8000343c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003440:	a1 98       	lsr	r8,0x1
80003442:	ef 68 ff f4 	st.b	r7[-12],r8
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
80003446:	ef 08 ff f2 	ld.sh	r8,r7[-14]
8000344a:	2f f8       	sub	r8,-1
8000344c:	ef 58 ff f2 	st.h	r7[-14],r8
80003450:	ef 19 ff f2 	ld.uh	r9,r7[-14]
80003454:	ef 1a ff e4 	ld.uh	r10,r7[-28]
80003458:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000345c:	f4 08 00 08 	add	r8,r10,r8
80003460:	10 39       	cp.w	r9,r8
80003462:	cd a5       	brlt	80003416 <et024006_PrintString+0x16a>
            et024006_DrawQuickPixel( col, row, fcolor );
          }
          mask >>= 1;
        }
        // Next row data
        data++;
80003464:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003468:	2f f8       	sub	r8,-1
8000346a:	ef 48 ff f8 	st.w	r7[-8],r8
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
8000346e:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80003472:	2f f8       	sub	r8,-1
80003474:	ef 58 ff f0 	st.h	r7[-16],r8
80003478:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000347c:	ef 1a ff e0 	ld.uh	r10,r7[-32]
80003480:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80003484:	f4 08 00 08 	add	r8,r10,r8
80003488:	10 39       	cp.w	r9,r8
8000348a:	cb e5       	brlt	80003406 <et024006_PrintString+0x15a>
        }
        // Next row data
        data++;
      }
      // move to next character start pixel
      x += xfont;
8000348c:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80003490:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80003494:	f2 08 00 08 	add	r8,r9,r8
80003498:	ef 58 ff e4 	st.h	r7[-28],r8
      lcd_string++;  // next character in string
8000349c:	ee f8 ff ec 	ld.w	r8,r7[-20]
800034a0:	2f f8       	sub	r8,-1
800034a2:	ef 48 ff ec 	st.w	r7[-20],r8

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
800034a6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800034aa:	11 88       	ld.ub	r8,r8[0x0]
800034ac:	58 08       	cp.w	r8,0
800034ae:	fe 91 ff 45 	brne	80003338 <et024006_PrintString+0x8c>
800034b2:	cb d8       	rjmp	8000362c <et024006_PrintString+0x380>
  }
  else
  {
    do
    {
      if(*lcd_string =='\n') {
800034b4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800034b8:	11 89       	ld.ub	r9,r8[0x0]
800034ba:	30 a8       	mov	r8,10
800034bc:	f0 09 18 00 	cp.b	r9,r8
800034c0:	c1 31       	brne	800034e6 <et024006_PrintString+0x23a>
        x = saved_x;
800034c2:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800034c6:	ef 58 ff e4 	st.h	r7[-28],r8
        y += yfont;
800034ca:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800034ce:	ef 09 ff e0 	ld.sh	r9,r7[-32]
800034d2:	f2 08 00 08 	add	r8,r9,r8
800034d6:	ef 58 ff e0 	st.h	r7[-32],r8
        lcd_string++;  // next character in string
800034da:	ee f8 ff ec 	ld.w	r8,r7[-20]
800034de:	2f f8       	sub	r8,-1
800034e0:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
800034e4:	c9 c8       	rjmp	8000361c <et024006_PrintString+0x370>
      } else if(*lcd_string =='\t') {
800034e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800034ea:	11 89       	ld.ub	r9,r8[0x0]
800034ec:	30 98       	mov	r8,9
800034ee:	f0 09 18 00 	cp.b	r9,r8
800034f2:	c0 f1       	brne	80003510 <et024006_PrintString+0x264>
        x += xfont;
800034f4:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800034f8:	ef 09 ff e4 	ld.sh	r9,r7[-28]
800034fc:	f2 08 00 08 	add	r8,r9,r8
80003500:	ef 58 ff e4 	st.h	r7[-28],r8
        lcd_string++;  // next character in string
80003504:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003508:	2f f8       	sub	r8,-1
8000350a:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
8000350e:	c8 78       	rjmp	8000361c <et024006_PrintString+0x370>
      }
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
80003510:	ef 39 ff f7 	ld.ub	r9,r7[-9]
        (font_size * (int)(*lcd_string - 32)); // character select
80003514:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80003518:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000351c:	11 88       	ld.ub	r8,r8[0x0]
8000351e:	22 08       	sub	r8,32
80003520:	f4 08 02 48 	mul	r8,r10,r8
        x += xfont;
        lcd_string++;  // next character in string
        continue;
      }
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
80003524:	f2 08 00 08 	add	r8,r9,r8
80003528:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000352c:	f2 08 00 08 	add	r8,r9,r8
80003530:	ef 48 ff f8 	st.w	r7[-8],r8
        (font_size * (int)(*lcd_string - 32)); // character select

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
80003534:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80003538:	ef 09 ff e0 	ld.sh	r9,r7[-32]
8000353c:	f2 08 00 08 	add	r8,r9,r8
80003540:	5c 88       	casts.h	r8
80003542:	20 18       	sub	r8,1
80003544:	5c 88       	casts.h	r8
80003546:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
8000354a:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000354e:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80003552:	f2 08 00 08 	add	r8,r9,r8
80003556:	5c 88       	casts.h	r8
80003558:	20 18       	sub	r8,1
8000355a:	5c 88       	casts.h	r8
8000355c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80003560:	ef 1b ff e0 	ld.uh	r11,r7[-32]
80003564:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80003568:	18 99       	mov	r9,r12
8000356a:	10 9c       	mov	r12,r8
8000356c:	f0 1f 00 32 	mcall	80003634 <et024006_PrintString+0x388>
80003570:	32 28       	mov	r8,34
80003572:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003576:	fc 19 c0 00 	movh	r9,0xc000
8000357a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000357e:	b2 08       	st.h	r9[0x0],r8

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
80003580:	30 08       	mov	r8,0
80003582:	ef 58 ff f0 	st.h	r7[-16],r8
80003586:	c3 78       	rjmp	800035f4 <et024006_PrintString+0x348>
      {
        mask = 0x80;
80003588:	38 08       	mov	r8,-128
8000358a:	ef 68 ff f4 	st.b	r7[-12],r8
        for (col = 0; col < xfont; col++)
8000358e:	30 08       	mov	r8,0
80003590:	ef 58 ff f2 	st.h	r7[-14],r8
80003594:	c1 f8       	rjmp	800035d2 <et024006_PrintString+0x326>
        {
          if (*data & mask) // if pixel data then put dot
80003596:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000359a:	11 89       	ld.ub	r9,r8[0x0]
8000359c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800035a0:	f3 e8 00 08 	and	r8,r9,r8
800035a4:	5c 58       	castu.b	r8
800035a6:	c0 70       	breq	800035b4 <et024006_PrintString+0x308>
          {
            *ET024006_PARAM_ADDR = fcolor;
800035a8:	fc 19 c0 20 	movh	r9,0xc020
800035ac:	ef 08 ff dc 	ld.sh	r8,r7[-36]
800035b0:	b2 08       	st.h	r9[0x0],r8
800035b2:	c0 68       	rjmp	800035be <et024006_PrintString+0x312>
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
800035b4:	fc 19 c0 20 	movh	r9,0xc020
800035b8:	6c 08       	ld.w	r8,r6[0x0]
800035ba:	5c 88       	casts.h	r8
800035bc:	b2 08       	st.h	r9[0x0],r8
          }
          mask >>= 1;
800035be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800035c2:	a1 98       	lsr	r8,0x1
800035c4:	ef 68 ff f4 	st.b	r7[-12],r8
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
800035c8:	ef 08 ff f2 	ld.sh	r8,r7[-14]
800035cc:	2f f8       	sub	r8,-1
800035ce:	ef 58 ff f2 	st.h	r7[-14],r8
800035d2:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800035d6:	ef 09 ff f2 	ld.sh	r9,r7[-14]
800035da:	f0 09 19 00 	cp.h	r9,r8
800035de:	cd c3       	brcs	80003596 <et024006_PrintString+0x2ea>
          }
          mask >>= 1;
        }

        // Next row data
        data++;
800035e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035e4:	2f f8       	sub	r8,-1
800035e6:	ef 48 ff f8 	st.w	r7[-8],r8

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
800035ea:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800035ee:	2f f8       	sub	r8,-1
800035f0:	ef 58 ff f0 	st.h	r7[-16],r8
800035f4:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800035f8:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800035fc:	f0 09 19 00 	cp.h	r9,r8
80003600:	cc 43       	brcs	80003588 <et024006_PrintString+0x2dc>

        // Next row data
        data++;
      }
      // move to next character start pixel
      x += xfont;
80003602:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80003606:	ef 09 ff e4 	ld.sh	r9,r7[-28]
8000360a:	f2 08 00 08 	add	r8,r9,r8
8000360e:	ef 58 ff e4 	st.h	r7[-28],r8
      lcd_string++;  // next character in string
80003612:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003616:	2f f8       	sub	r8,-1
80003618:	ef 48 ff ec 	st.w	r7[-20],r8

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
8000361c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003620:	11 88       	ld.ub	r8,r8[0x0]
80003622:	58 08       	cp.w	r8,0
80003624:	fe 91 ff 48 	brne	800034b4 <et024006_PrintString+0x208>
80003628:	c0 28       	rjmp	8000362c <et024006_PrintString+0x380>
  const unsigned char *data;
  uint16_t saved_x = x;

  // if string is empty there is nothing to do
  if( *lcd_string == '\0')
    return;
8000362a:	d7 03       	nop
      x += xfont;
      lcd_string++;  // next character in string

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
  }
}
8000362c:	2f 7d       	sub	sp,-36
8000362e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003632:	00 00       	add	r0,r0
80003634:	80 00       	ld.sh	r0,r0[0x0]
80003636:	36 aa       	mov	r10,106
80003638:	80 00       	ld.sh	r0,r0[0x0]
8000363a:	38 b4       	mov	r4,-117

8000363c <et024006_SetRegister>:
#endif

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
8000363c:	eb cd 40 80 	pushm	r7,lr
80003640:	1a 97       	mov	r7,sp
80003642:	20 3d       	sub	sp,12
80003644:	18 99       	mov	r9,r12
80003646:	16 98       	mov	r8,r11
80003648:	ef 69 ff f8 	st.b	r7[-8],r9
8000364c:	ef 68 ff f4 	st.b	r7[-12],r8
  uint8_t value = et024006_ReadRegister( address );
80003650:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003654:	ef 68 ff fd 	st.b	r7[-3],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ uint8_t et024006_ReadRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003658:	fc 19 c0 00 	movh	r9,0xc000
8000365c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80003660:	b2 08       	st.h	r9[0x0],r8
  return *ET024006_PARAM_ADDR;
80003662:	fc 18 c0 20 	movh	r8,0xc020
80003666:	90 08       	ld.sh	r8,r8[0x0]
80003668:	5c 88       	casts.h	r8
8000366a:	5c 58       	castu.b	r8

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
8000366c:	ef 68 ff fc 	st.b	r7[-4],r8
  value |= bitmask;
80003670:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003674:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003678:	f3 e8 10 08 	or	r8,r9,r8
8000367c:	ef 68 ff fc 	st.b	r7[-4],r8
  et024006_WriteRegister( address, value );
80003680:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003684:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80003688:	ef 69 ff ff 	st.b	r7[-1],r9
8000368c:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003690:	fc 19 c0 00 	movh	r9,0xc000
80003694:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003698:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000369a:	fc 19 c0 20 	movh	r9,0xc020
8000369e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800036a2:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
  value |= bitmask;
  et024006_WriteRegister( address, value );
}
800036a4:	2f dd       	sub	sp,-12
800036a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800036aa <et024006_SetLimits>:
/*! \brief Sets the display limits according to the corner coordinates.
 *  Writing to the display will result in writing to the area specified through
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
800036aa:	eb cd 40 80 	pushm	r7,lr
800036ae:	1a 97       	mov	r7,sp
800036b0:	20 8d       	sub	sp,32
800036b2:	12 98       	mov	r8,r9
800036b4:	18 99       	mov	r9,r12
800036b6:	ef 59 ff ec 	st.h	r7[-20],r9
800036ba:	16 99       	mov	r9,r11
800036bc:	ef 59 ff e8 	st.h	r7[-24],r9
800036c0:	14 99       	mov	r9,r10
800036c2:	ef 59 ff e4 	st.h	r7[-28],r9
800036c6:	ef 58 ff e0 	st.h	r7[-32],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
800036ca:	ef 18 ff ec 	ld.uh	r8,r7[-20]
800036ce:	a9 88       	lsr	r8,0x8
800036d0:	5c 88       	casts.h	r8
800036d2:	5c 58       	castu.b	r8
800036d4:	30 29       	mov	r9,2
800036d6:	ef 69 ff f1 	st.b	r7[-15],r9
800036da:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800036de:	fc 19 c0 00 	movh	r9,0xc000
800036e2:	ef 38 ff f1 	ld.ub	r8,r7[-15]
800036e6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800036e8:	fc 19 c0 20 	movh	r9,0xc020
800036ec:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800036f0:	b2 08       	st.h	r9[0x0],r8
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
800036f2:	ef 08 ff ec 	ld.sh	r8,r7[-20]
800036f6:	5c 58       	castu.b	r8
800036f8:	30 39       	mov	r9,3
800036fa:	ef 69 ff f3 	st.b	r7[-13],r9
800036fe:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003702:	fc 19 c0 00 	movh	r9,0xc000
80003706:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000370a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000370c:	fc 19 c0 20 	movh	r9,0xc020
80003710:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80003714:	b2 08       	st.h	r9[0x0],r8
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
80003716:	ef 18 ff e4 	ld.uh	r8,r7[-28]
8000371a:	a9 88       	lsr	r8,0x8
8000371c:	5c 88       	casts.h	r8
8000371e:	5c 58       	castu.b	r8
80003720:	30 49       	mov	r9,4
80003722:	ef 69 ff f5 	st.b	r7[-11],r9
80003726:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000372a:	fc 19 c0 00 	movh	r9,0xc000
8000372e:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80003732:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003734:	fc 19 c0 20 	movh	r9,0xc020
80003738:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000373c:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
8000373e:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80003742:	5c 58       	castu.b	r8
80003744:	30 59       	mov	r9,5
80003746:	ef 69 ff f7 	st.b	r7[-9],r9
8000374a:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000374e:	fc 19 c0 00 	movh	r9,0xc000
80003752:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003756:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003758:	fc 19 c0 20 	movh	r9,0xc020
8000375c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80003760:	b2 08       	st.h	r9[0x0],r8
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
80003762:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80003766:	a9 88       	lsr	r8,0x8
80003768:	5c 88       	casts.h	r8
8000376a:	5c 58       	castu.b	r8
8000376c:	30 69       	mov	r9,6
8000376e:	ef 69 ff f9 	st.b	r7[-7],r9
80003772:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003776:	fc 19 c0 00 	movh	r9,0xc000
8000377a:	ef 38 ff f9 	ld.ub	r8,r7[-7]
8000377e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003780:	fc 19 c0 20 	movh	r9,0xc020
80003784:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003788:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
8000378a:	ef 08 ff e8 	ld.sh	r8,r7[-24]
8000378e:	5c 58       	castu.b	r8
80003790:	30 79       	mov	r9,7
80003792:	ef 69 ff fb 	st.b	r7[-5],r9
80003796:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000379a:	fc 19 c0 00 	movh	r9,0xc000
8000379e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800037a2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800037a4:	fc 19 c0 20 	movh	r9,0xc020
800037a8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800037ac:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
800037ae:	ef 18 ff e0 	ld.uh	r8,r7[-32]
800037b2:	a9 88       	lsr	r8,0x8
800037b4:	5c 88       	casts.h	r8
800037b6:	5c 58       	castu.b	r8
800037b8:	30 89       	mov	r9,8
800037ba:	ef 69 ff fd 	st.b	r7[-3],r9
800037be:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800037c2:	fc 19 c0 00 	movh	r9,0xc000
800037c6:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800037ca:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800037cc:	fc 19 c0 20 	movh	r9,0xc020
800037d0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800037d4:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
800037d6:	ef 08 ff e0 	ld.sh	r8,r7[-32]
800037da:	5c 58       	castu.b	r8
800037dc:	30 99       	mov	r9,9
800037de:	ef 69 ff ff 	st.b	r7[-1],r9
800037e2:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800037e6:	fc 19 c0 00 	movh	r9,0xc000
800037ea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800037ee:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800037f0:	fc 19 c0 20 	movh	r9,0xc020
800037f4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800037f8:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
}
800037fa:	2f 8d       	sub	sp,-32
800037fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80003800 <et024006_SetQuickLimits>:

/*! \brief Set the starting point of the next read/write from/to RAM.
 *  This sets only the start point of the RAM window.
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
80003800:	eb cd 40 80 	pushm	r7,lr
80003804:	1a 97       	mov	r7,sp
80003806:	20 4d       	sub	sp,16
80003808:	18 99       	mov	r9,r12
8000380a:	16 98       	mov	r8,r11
8000380c:	ef 59 ff f4 	st.h	r7[-12],r9
80003810:	ef 58 ff f0 	st.h	r7[-16],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
80003814:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80003818:	a9 88       	lsr	r8,0x8
8000381a:	5c 88       	casts.h	r8
8000381c:	5c 58       	castu.b	r8
8000381e:	30 29       	mov	r9,2
80003820:	ef 69 ff f9 	st.b	r7[-7],r9
80003824:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003828:	fc 19 c0 00 	movh	r9,0xc000
8000382c:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003830:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003832:	fc 19 c0 20 	movh	r9,0xc020
80003836:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000383a:	b2 08       	st.h	r9[0x0],r8
 *  This sets only the start point of the RAM window.
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
8000383c:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80003840:	5c 58       	castu.b	r8
80003842:	30 39       	mov	r9,3
80003844:	ef 69 ff fb 	st.b	r7[-5],r9
80003848:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000384c:	fc 19 c0 00 	movh	r9,0xc000
80003850:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003854:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003856:	fc 19 c0 20 	movh	r9,0xc020
8000385a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000385e:	b2 08       	st.h	r9[0x0],r8
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
80003860:	ef 18 ff f0 	ld.uh	r8,r7[-16]
80003864:	a9 88       	lsr	r8,0x8
80003866:	5c 88       	casts.h	r8
80003868:	5c 58       	castu.b	r8
8000386a:	30 69       	mov	r9,6
8000386c:	ef 69 ff fd 	st.b	r7[-3],r9
80003870:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003874:	fc 19 c0 00 	movh	r9,0xc000
80003878:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000387c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000387e:	fc 19 c0 20 	movh	r9,0xc020
80003882:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003886:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y & 0xff) );
80003888:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000388c:	5c 58       	castu.b	r8
8000388e:	30 79       	mov	r9,7
80003890:	ef 69 ff ff 	st.b	r7[-1],r9
80003894:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003898:	fc 19 c0 00 	movh	r9,0xc000
8000389c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800038a0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800038a2:	fc 19 c0 20 	movh	r9,0xc020
800038a6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800038aa:	b2 08       	st.h	r9[0x0],r8
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y & 0xff) );
}
800038ac:	2f cd       	sub	sp,-16
800038ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800038b2:	d7 03       	nop

800038b4 <et024006_DrawQuickPixel>:


static void et024006_DrawQuickPixel( uint16_t x, uint16_t y, et024006_color_t color )
{
800038b4:	eb cd 40 80 	pushm	r7,lr
800038b8:	1a 97       	mov	r7,sp
800038ba:	20 4d       	sub	sp,16
800038bc:	16 99       	mov	r9,r11
800038be:	14 98       	mov	r8,r10
800038c0:	18 9a       	mov	r10,r12
800038c2:	ef 5a ff f8 	st.h	r7[-8],r10
800038c6:	ef 59 ff f4 	st.h	r7[-12],r9
800038ca:	ef 58 ff f0 	st.h	r7[-16],r8
  // Sanity check on parameters.
  Assert( x < ET024006_WIDTH );
  Assert( y < ET024006_HEIGHT );

  // Set up draw area and write the two bytes of pixel data.
  et024006_SetQuickLimits( x, y );
800038ce:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800038d2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800038d6:	12 9b       	mov	r11,r9
800038d8:	10 9c       	mov	r12,r8
800038da:	f0 1f 00 0a 	mcall	80003900 <et024006_DrawQuickPixel+0x4c>
800038de:	32 28       	mov	r8,34
800038e0:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800038e4:	fc 19 c0 00 	movh	r9,0xc000
800038e8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800038ec:	b2 08       	st.h	r9[0x0],r8
  et024006_SendSPI( color & 0xff );
  et024006_SendSPI( color >> 8 );
  et024006_DeselectSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  *ET024006_PARAM_ADDR = color;
800038ee:	fc 19 c0 20 	movh	r9,0xc020
800038f2:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800038f6:	b2 08       	st.h	r9[0x0],r8
#endif

}
800038f8:	2f cd       	sub	sp,-16
800038fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800038fe:	00 00       	add	r0,r0
80003900:	80 00       	ld.sh	r0,r0[0x0]
80003902:	38 00       	mov	r0,-128

80003904 <et024006_DuplicatePixel>:


/* --- Pixel block operations --- */

static void et024006_DuplicatePixel( et024006_color_t color, uint32_t count )
{
80003904:	eb cd 40 80 	pushm	r7,lr
80003908:	1a 97       	mov	r7,sp
8000390a:	20 3d       	sub	sp,12
8000390c:	18 98       	mov	r8,r12
8000390e:	ef 4b ff f4 	st.w	r7[-12],r11
80003912:	ef 58 ff f8 	st.h	r7[-8],r8
80003916:	32 28       	mov	r8,34
80003918:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000391c:	fc 19 c0 00 	movh	r9,0xc000
80003920:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003924:	b2 08       	st.h	r9[0x0],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80003926:	c2 e8       	rjmp	80003982 <et024006_DuplicatePixel+0x7e>
    *ET024006_PARAM_ADDR = color;
80003928:	fc 19 c0 20 	movh	r9,0xc020
8000392c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80003930:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80003932:	fc 19 c0 20 	movh	r9,0xc020
80003936:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000393a:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
8000393c:	fc 19 c0 20 	movh	r9,0xc020
80003940:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80003944:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80003946:	fc 19 c0 20 	movh	r9,0xc020
8000394a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000394e:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80003950:	fc 19 c0 20 	movh	r9,0xc020
80003954:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80003958:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
8000395a:	fc 19 c0 20 	movh	r9,0xc020
8000395e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80003962:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80003964:	fc 19 c0 20 	movh	r9,0xc020
80003968:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000396c:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
8000396e:	fc 19 c0 20 	movh	r9,0xc020
80003972:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80003976:	b2 08       	st.h	r9[0x0],r8
    count-=8;
80003978:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000397c:	20 88       	sub	r8,8
8000397e:	ef 48 ff f4 	st.w	r7[-12],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80003982:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003986:	58 78       	cp.w	r8,7
80003988:	fe 9b ff d0 	brhi	80003928 <et024006_DuplicatePixel+0x24>
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
8000398c:	c0 b8       	rjmp	800039a2 <et024006_DuplicatePixel+0x9e>
    *ET024006_PARAM_ADDR = color;
8000398e:	fc 19 c0 20 	movh	r9,0xc020
80003992:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80003996:	b2 08       	st.h	r9[0x0],r8
    --count;
80003998:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000399c:	20 18       	sub	r8,1
8000399e:	ef 48 ff f4 	st.w	r7[-12],r8
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
800039a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039a6:	58 08       	cp.w	r8,0
800039a8:	cf 31       	brne	8000398e <et024006_DuplicatePixel+0x8a>
    }
  }

  et024006_DeselectSPI();
#endif
}
800039aa:	2f dd       	sub	sp,-12
800039ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800039b0 <et024006_SetupInterface>:
                SPI_MASTER_bm);          // in master mode
}
#endif

static void et024006_SetupInterface( void )
{
800039b0:	eb cd 40 80 	pushm	r7,lr
800039b4:	1a 97       	mov	r7,sp

  // et024006_TE (tearing sync) signal from display is input
  // without any pull resistors
  gpio_enable_gpio_pin(ET024006DHU_TE_PIN);
800039b6:	30 0c       	mov	r12,0
800039b8:	f0 1f 00 06 	mcall	800039d0 <et024006_SetupInterface+0x20>

  // Backlight pin (PWM) for display is output
  gpio_enable_module_pin(ET024006DHU_BL_PIN, ET024006DHU_BL_FUNCTION);
800039bc:	30 2b       	mov	r11,2
800039be:	30 9c       	mov	r12,9
800039c0:	f0 1f 00 05 	mcall	800039d4 <et024006_SetupInterface+0x24>
  // Turns backlight ON
  /*TODO Add backlight driver */

  // Reset pin for display is output
  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
800039c4:	34 2c       	mov	r12,66
800039c6:	f0 1f 00 05 	mcall	800039d8 <et024006_SetupInterface+0x28>
}
800039ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800039ce:	00 00       	add	r0,r0
800039d0:	80 00       	ld.sh	r0,r0[0x0]
800039d2:	74 d8       	ld.w	r8,r10[0x34]
800039d4:	80 00       	ld.sh	r0,r0[0x0]
800039d6:	73 c8       	ld.w	r8,r9[0x70]
800039d8:	80 00       	ld.sh	r0,r0[0x0]
800039da:	77 4a       	ld.w	r10,r11[0x50]

800039dc <et024006_ResetDisplay>:

/*! \brief Does a hard reset of the display.
 */
static void et024006_ResetDisplay( void )
{
800039dc:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800039e0:	1a 97       	mov	r7,sp
800039e2:	21 ad       	sub	sp,104
  // clear reset line
  gpio_clr_gpio_pin(ET024006DHU_RESET_PIN);
800039e4:	34 2c       	mov	r12,66
800039e6:	f0 1f 00 aa 	mcall	80003c8c <et024006_ResetDisplay+0x2b0>
  // 50us delay
  cpu_delay_us( 50, tft_data.cpu_hz );
800039ea:	fe f8 02 a6 	ld.w	r8,pc[678]
800039ee:	70 08       	ld.w	r8,r8[0x0]
800039f0:	33 29       	mov	r9,50
800039f2:	ef 49 ff c4 	st.w	r7[-60],r9
800039f6:	ef 48 ff c0 	st.w	r7[-64],r8
800039fa:	ee f8 ff c4 	ld.w	r8,r7[-60]
800039fe:	ef 48 ff cc 	st.w	r7[-52],r8
80003a02:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003a06:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80003a0a:	ee fc ff cc 	ld.w	r12,r7[-52]
80003a0e:	ef 4c ff a4 	st.w	r7[-92],r12
80003a12:	30 0b       	mov	r11,0
80003a14:	ef 4b ff a0 	st.w	r7[-96],r11
80003a18:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003a1c:	ef 49 ff 9c 	st.w	r7[-100],r9
80003a20:	30 08       	mov	r8,0
80003a22:	ef 48 ff 98 	st.w	r7[-104],r8
80003a26:	ee fa ff a0 	ld.w	r10,r7[-96]
80003a2a:	ee fc ff 9c 	ld.w	r12,r7[-100]
80003a2e:	b9 3a       	mul	r10,r12
80003a30:	ee f8 ff 98 	ld.w	r8,r7[-104]
80003a34:	ee fb ff a4 	ld.w	r11,r7[-92]
80003a38:	b7 38       	mul	r8,r11
80003a3a:	10 0a       	add	r10,r8
80003a3c:	ee fc ff a4 	ld.w	r12,r7[-92]
80003a40:	ee fb ff 9c 	ld.w	r11,r7[-100]
80003a44:	f8 0b 06 48 	mulu.d	r8,r12,r11
80003a48:	12 0a       	add	r10,r9
80003a4a:	14 99       	mov	r9,r10
80003a4c:	ee 7a 42 3f 	mov	r10,999999
80003a50:	30 0b       	mov	r11,0
80003a52:	f0 0a 00 0a 	add	r10,r8,r10
80003a56:	f2 0b 00 4b 	adc	r11,r9,r11
80003a5a:	ee 78 42 40 	mov	r8,1000000
80003a5e:	30 09       	mov	r9,0
80003a60:	f0 1f 00 8d 	mcall	80003c94 <et024006_ResetDisplay+0x2b8>
80003a64:	14 98       	mov	r8,r10
80003a66:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80003a68:	ef 48 ff d4 	st.w	r7[-44],r8
80003a6c:	ee c8 00 58 	sub	r8,r7,88
80003a70:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003a74:	e1 b8 00 42 	mfsr	r8,0x108
80003a78:	10 99       	mov	r9,r8
80003a7a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003a7e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003a80:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003a84:	70 09       	ld.w	r9,r8[0x0]
80003a86:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003a8a:	10 09       	add	r9,r8
80003a8c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003a90:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80003a92:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003a96:	30 08       	mov	r8,0
80003a98:	f3 68 00 08 	st.b	r9[8],r8
80003a9c:	ee c8 00 58 	sub	r8,r7,88
80003aa0:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003aa4:	e1 b8 00 42 	mfsr	r8,0x108
80003aa8:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80003aac:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003ab0:	f1 39 00 08 	ld.ub	r9,r8[8]
80003ab4:	30 28       	mov	r8,2
80003ab6:	f0 09 18 00 	cp.b	r9,r8
80003aba:	c0 31       	brne	80003ac0 <et024006_ResetDisplay+0xe4>
    return false;
80003abc:	30 08       	mov	r8,0
80003abe:	c4 38       	rjmp	80003b44 <et024006_ResetDisplay+0x168>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80003ac0:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003ac4:	f1 39 00 08 	ld.ub	r9,r8[8]
80003ac8:	30 18       	mov	r8,1
80003aca:	f0 09 18 00 	cp.b	r9,r8
80003ace:	c0 31       	brne	80003ad4 <et024006_ResetDisplay+0xf8>
    return true;
80003ad0:	30 18       	mov	r8,1
80003ad2:	c3 98       	rjmp	80003b44 <et024006_ResetDisplay+0x168>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003ad4:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003ad8:	70 09       	ld.w	r9,r8[0x0]
80003ada:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003ade:	70 18       	ld.w	r8,r8[0x4]
80003ae0:	10 39       	cp.w	r9,r8
80003ae2:	e0 88 00 1a 	brls	80003b16 <et024006_ResetDisplay+0x13a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003ae6:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003aea:	70 08       	ld.w	r8,r8[0x0]
80003aec:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003af0:	10 39       	cp.w	r9,r8
80003af2:	c1 02       	brcc	80003b12 <et024006_ResetDisplay+0x136>
80003af4:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003af8:	70 18       	ld.w	r8,r8[0x4]
80003afa:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003afe:	10 39       	cp.w	r9,r8
80003b00:	e0 88 00 09 	brls	80003b12 <et024006_ResetDisplay+0x136>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003b04:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003b08:	30 18       	mov	r8,1
80003b0a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80003b0e:	30 18       	mov	r8,1
80003b10:	c1 a8       	rjmp	80003b44 <et024006_ResetDisplay+0x168>
    }
    return false;
80003b12:	30 08       	mov	r8,0
80003b14:	c1 88       	rjmp	80003b44 <et024006_ResetDisplay+0x168>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003b16:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003b1a:	70 08       	ld.w	r8,r8[0x0]
80003b1c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003b20:	10 39       	cp.w	r9,r8
80003b22:	c0 93       	brcs	80003b34 <et024006_ResetDisplay+0x158>
80003b24:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003b28:	70 18       	ld.w	r8,r8[0x4]
80003b2a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003b2e:	10 39       	cp.w	r9,r8
80003b30:	e0 88 00 09 	brls	80003b42 <et024006_ResetDisplay+0x166>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003b34:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003b38:	30 18       	mov	r8,1
80003b3a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80003b3e:	30 18       	mov	r8,1
80003b40:	c0 28       	rjmp	80003b44 <et024006_ResetDisplay+0x168>
    }
    return false;
80003b42:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80003b44:	58 08       	cp.w	r8,0
80003b46:	ca b0       	breq	80003a9c <et024006_ResetDisplay+0xc0>

  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80003b48:	34 2c       	mov	r12,66
80003b4a:	f0 1f 00 54 	mcall	80003c98 <et024006_ResetDisplay+0x2bc>
  // 5ms delay
  cpu_delay_ms( 5, tft_data.cpu_hz );
80003b4e:	4d 18       	lddpc	r8,80003c90 <et024006_ResetDisplay+0x2b4>
80003b50:	70 08       	ld.w	r8,r8[0x0]
80003b52:	30 59       	mov	r9,5
80003b54:	ef 49 ff e4 	st.w	r7[-28],r9
80003b58:	ef 48 ff e0 	st.w	r7[-32],r8
80003b5c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003b60:	ef 48 ff ec 	st.w	r7[-20],r8
80003b64:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003b68:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80003b6c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80003b70:	30 01       	mov	r1,0
80003b72:	ee f2 ff e8 	ld.w	r2,r7[-24]
80003b76:	30 03       	mov	r3,0
80003b78:	e2 02 02 4a 	mul	r10,r1,r2
80003b7c:	e6 00 02 48 	mul	r8,r3,r0
80003b80:	10 0a       	add	r10,r8
80003b82:	e0 02 06 48 	mulu.d	r8,r0,r2
80003b86:	12 0a       	add	r10,r9
80003b88:	14 99       	mov	r9,r10
80003b8a:	e0 6a 03 e7 	mov	r10,999
80003b8e:	30 0b       	mov	r11,0
80003b90:	f0 0a 00 0a 	add	r10,r8,r10
80003b94:	f2 0b 00 4b 	adc	r11,r9,r11
80003b98:	e0 68 03 e8 	mov	r8,1000
80003b9c:	30 09       	mov	r9,0
80003b9e:	f0 1f 00 3e 	mcall	80003c94 <et024006_ResetDisplay+0x2b8>
80003ba2:	14 98       	mov	r8,r10
80003ba4:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80003ba6:	ef 48 ff f4 	st.w	r7[-12],r8
80003baa:	ee c8 00 4c 	sub	r8,r7,76
80003bae:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003bb2:	e1 b8 00 42 	mfsr	r8,0x108
80003bb6:	10 99       	mov	r9,r8
80003bb8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003bbc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003bbe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003bc2:	70 09       	ld.w	r9,r8[0x0]
80003bc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003bc8:	10 09       	add	r9,r8
80003bca:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003bce:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80003bd0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003bd4:	30 08       	mov	r8,0
80003bd6:	f3 68 00 08 	st.b	r9[8],r8
80003bda:	ee c8 00 4c 	sub	r8,r7,76
80003bde:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003be2:	e1 b8 00 42 	mfsr	r8,0x108
80003be6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80003bea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bee:	f1 39 00 08 	ld.ub	r9,r8[8]
80003bf2:	30 28       	mov	r8,2
80003bf4:	f0 09 18 00 	cp.b	r9,r8
80003bf8:	c0 31       	brne	80003bfe <et024006_ResetDisplay+0x222>
    return false;
80003bfa:	30 08       	mov	r8,0
80003bfc:	c4 38       	rjmp	80003c82 <et024006_ResetDisplay+0x2a6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80003bfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c02:	f1 39 00 08 	ld.ub	r9,r8[8]
80003c06:	30 18       	mov	r8,1
80003c08:	f0 09 18 00 	cp.b	r9,r8
80003c0c:	c0 31       	brne	80003c12 <et024006_ResetDisplay+0x236>
    return true;
80003c0e:	30 18       	mov	r8,1
80003c10:	c3 98       	rjmp	80003c82 <et024006_ResetDisplay+0x2a6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003c12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c16:	70 09       	ld.w	r9,r8[0x0]
80003c18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c1c:	70 18       	ld.w	r8,r8[0x4]
80003c1e:	10 39       	cp.w	r9,r8
80003c20:	e0 88 00 1a 	brls	80003c54 <et024006_ResetDisplay+0x278>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003c24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c28:	70 08       	ld.w	r8,r8[0x0]
80003c2a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003c2e:	10 39       	cp.w	r9,r8
80003c30:	c1 02       	brcc	80003c50 <et024006_ResetDisplay+0x274>
80003c32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c36:	70 18       	ld.w	r8,r8[0x4]
80003c38:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003c3c:	10 39       	cp.w	r9,r8
80003c3e:	e0 88 00 09 	brls	80003c50 <et024006_ResetDisplay+0x274>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003c42:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c46:	30 18       	mov	r8,1
80003c48:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80003c4c:	30 18       	mov	r8,1
80003c4e:	c1 a8       	rjmp	80003c82 <et024006_ResetDisplay+0x2a6>
    }
    return false;
80003c50:	30 08       	mov	r8,0
80003c52:	c1 88       	rjmp	80003c82 <et024006_ResetDisplay+0x2a6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003c54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c58:	70 08       	ld.w	r8,r8[0x0]
80003c5a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003c5e:	10 39       	cp.w	r9,r8
80003c60:	c0 93       	brcs	80003c72 <et024006_ResetDisplay+0x296>
80003c62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c66:	70 18       	ld.w	r8,r8[0x4]
80003c68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003c6c:	10 39       	cp.w	r9,r8
80003c6e:	e0 88 00 09 	brls	80003c80 <et024006_ResetDisplay+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003c72:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c76:	30 18       	mov	r8,1
80003c78:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80003c7c:	30 18       	mov	r8,1
80003c7e:	c0 28       	rjmp	80003c82 <et024006_ResetDisplay+0x2a6>
    }
    return false;
80003c80:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80003c82:	58 08       	cp.w	r8,0
80003c84:	ca b0       	breq	80003bda <et024006_ResetDisplay+0x1fe>
}
80003c86:	2e 6d       	sub	sp,-104
80003c88:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80003c8c:	80 00       	ld.sh	r0,r0[0x0]
80003c8e:	77 b2       	ld.w	r2,r11[0x6c]
80003c90:	00 00       	add	r0,r0
80003c92:	04 b8       	st.h	r2++,r8
80003c94:	80 00       	ld.sh	r0,r0[0x0]
80003c96:	ce ac       	rcall	80003e6a <et024006_GeneralSettings+0x40>
80003c98:	80 00       	ld.sh	r0,r0[0x0]
80003c9a:	77 4a       	ld.w	r10,r11[0x50]

80003c9c <et024006_AdjustGamma>:
/*! \brief Display gamma setup.
 *
 * Parameters are provided by EDT for the display.
 */
static void et024006_AdjustGamma( void )
{
80003c9c:	eb cd 40 80 	pushm	r7,lr
80003ca0:	1a 97       	mov	r7,sp
80003ca2:	20 6d       	sub	sp,24
80003ca4:	34 68       	mov	r8,70
80003ca6:	ef 68 ff e9 	st.b	r7[-23],r8
80003caa:	39 48       	mov	r8,-108
80003cac:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003cb0:	fc 19 c0 00 	movh	r9,0xc000
80003cb4:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80003cb8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003cba:	fc 19 c0 20 	movh	r9,0xc020
80003cbe:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80003cc2:	b2 08       	st.h	r9[0x0],r8
80003cc4:	34 78       	mov	r8,71
80003cc6:	ef 68 ff eb 	st.b	r7[-21],r8
80003cca:	34 18       	mov	r8,65
80003ccc:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003cd0:	fc 19 c0 00 	movh	r9,0xc000
80003cd4:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80003cd8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003cda:	fc 19 c0 20 	movh	r9,0xc020
80003cde:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80003ce2:	b2 08       	st.h	r9[0x0],r8
80003ce4:	34 88       	mov	r8,72
80003ce6:	ef 68 ff ed 	st.b	r7[-19],r8
80003cea:	30 08       	mov	r8,0
80003cec:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003cf0:	fc 19 c0 00 	movh	r9,0xc000
80003cf4:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80003cf8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003cfa:	fc 19 c0 20 	movh	r9,0xc020
80003cfe:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003d02:	b2 08       	st.h	r9[0x0],r8
80003d04:	34 98       	mov	r8,73
80003d06:	ef 68 ff ef 	st.b	r7[-17],r8
80003d0a:	33 38       	mov	r8,51
80003d0c:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003d10:	fc 19 c0 00 	movh	r9,0xc000
80003d14:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80003d18:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003d1a:	fc 19 c0 20 	movh	r9,0xc020
80003d1e:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80003d22:	b2 08       	st.h	r9[0x0],r8
80003d24:	34 a8       	mov	r8,74
80003d26:	ef 68 ff f1 	st.b	r7[-15],r8
80003d2a:	32 58       	mov	r8,37
80003d2c:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003d30:	fc 19 c0 00 	movh	r9,0xc000
80003d34:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80003d38:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003d3a:	fc 19 c0 20 	movh	r9,0xc020
80003d3e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003d42:	b2 08       	st.h	r9[0x0],r8
80003d44:	34 b8       	mov	r8,75
80003d46:	ef 68 ff f3 	st.b	r7[-13],r8
80003d4a:	34 58       	mov	r8,69
80003d4c:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003d50:	fc 19 c0 00 	movh	r9,0xc000
80003d54:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80003d58:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003d5a:	fc 19 c0 20 	movh	r9,0xc020
80003d5e:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80003d62:	b2 08       	st.h	r9[0x0],r8
80003d64:	34 c8       	mov	r8,76
80003d66:	ef 68 ff f5 	st.b	r7[-11],r8
80003d6a:	34 48       	mov	r8,68
80003d6c:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003d70:	fc 19 c0 00 	movh	r9,0xc000
80003d74:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80003d78:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003d7a:	fc 19 c0 20 	movh	r9,0xc020
80003d7e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003d82:	b2 08       	st.h	r9[0x0],r8
80003d84:	34 d8       	mov	r8,77
80003d86:	ef 68 ff f7 	st.b	r7[-9],r8
80003d8a:	37 78       	mov	r8,119
80003d8c:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003d90:	fc 19 c0 00 	movh	r9,0xc000
80003d94:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003d98:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003d9a:	fc 19 c0 20 	movh	r9,0xc020
80003d9e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80003da2:	b2 08       	st.h	r9[0x0],r8
80003da4:	34 e8       	mov	r8,78
80003da6:	ef 68 ff f9 	st.b	r7[-7],r8
80003daa:	31 28       	mov	r8,18
80003dac:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003db0:	fc 19 c0 00 	movh	r9,0xc000
80003db4:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003db8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003dba:	fc 19 c0 20 	movh	r9,0xc020
80003dbe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003dc2:	b2 08       	st.h	r9[0x0],r8
80003dc4:	34 f8       	mov	r8,79
80003dc6:	ef 68 ff fb 	st.b	r7[-5],r8
80003dca:	3c c8       	mov	r8,-52
80003dcc:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003dd0:	fc 19 c0 00 	movh	r9,0xc000
80003dd4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003dd8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003dda:	fc 19 c0 20 	movh	r9,0xc020
80003dde:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80003de2:	b2 08       	st.h	r9[0x0],r8
80003de4:	35 08       	mov	r8,80
80003de6:	ef 68 ff fd 	st.b	r7[-3],r8
80003dea:	34 68       	mov	r8,70
80003dec:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003df0:	fc 19 c0 00 	movh	r9,0xc000
80003df4:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80003df8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003dfa:	fc 19 c0 20 	movh	r9,0xc020
80003dfe:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003e02:	b2 08       	st.h	r9[0x0],r8
80003e04:	35 18       	mov	r8,81
80003e06:	ef 68 ff ff 	st.b	r7[-1],r8
80003e0a:	38 28       	mov	r8,-126
80003e0c:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003e10:	fc 19 c0 00 	movh	r9,0xc000
80003e14:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003e18:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003e1a:	fc 19 c0 20 	movh	r9,0xc020
80003e1e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80003e22:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_GAMMACTRL8, 0x77 );
  et024006_WriteRegister( HIMAX_GAMMACTRL9, 0x12 );
  et024006_WriteRegister( HIMAX_GAMMACTRL10, 0xCC );
  et024006_WriteRegister( HIMAX_GAMMACTRL11, 0x46 );
  et024006_WriteRegister( HIMAX_GAMMACTRL12, 0x82 );
}
80003e24:	2f ad       	sub	sp,-24
80003e26:	e3 cd 80 80 	ldm	sp++,r7,pc

80003e2a <et024006_GeneralSettings>:
/*! \brief General display settings.
 *
 * This are settings provided by EDT and are optimised for the display.
 */
static void et024006_GeneralSettings(void)
{
80003e2a:	eb cd 40 80 	pushm	r7,lr
80003e2e:	1a 97       	mov	r7,sp
80003e30:	20 8d       	sub	sp,32
80003e32:	30 18       	mov	r8,1
80003e34:	ef 68 ff e1 	st.b	r7[-31],r8
80003e38:	30 68       	mov	r8,6
80003e3a:	ef 68 ff e0 	st.b	r7[-32],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003e3e:	fc 19 c0 00 	movh	r9,0xc000
80003e42:	ef 38 ff e1 	ld.ub	r8,r7[-31]
80003e46:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003e48:	fc 19 c0 20 	movh	r9,0xc020
80003e4c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80003e50:	b2 08       	st.h	r9[0x0],r8
80003e52:	33 a8       	mov	r8,58
80003e54:	ef 68 ff e3 	st.b	r7[-29],r8
80003e58:	30 18       	mov	r8,1
80003e5a:	ef 68 ff e2 	st.b	r7[-30],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003e5e:	fc 19 c0 00 	movh	r9,0xc000
80003e62:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80003e66:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003e68:	fc 19 c0 20 	movh	r9,0xc020
80003e6c:	ef 38 ff e2 	ld.ub	r8,r7[-30]
80003e70:	b2 08       	st.h	r9[0x0],r8
80003e72:	33 b8       	mov	r8,59
80003e74:	ef 68 ff e5 	st.b	r7[-27],r8
80003e78:	30 18       	mov	r8,1
80003e7a:	ef 68 ff e4 	st.b	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003e7e:	fc 19 c0 00 	movh	r9,0xc000
80003e82:	ef 38 ff e5 	ld.ub	r8,r7[-27]
80003e86:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003e88:	fc 19 c0 20 	movh	r9,0xc020
80003e8c:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80003e90:	b2 08       	st.h	r9[0x0],r8
80003e92:	33 c8       	mov	r8,60
80003e94:	ef 68 ff e7 	st.b	r7[-25],r8
80003e98:	3f 08       	mov	r8,-16
80003e9a:	ef 68 ff e6 	st.b	r7[-26],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003e9e:	fc 19 c0 00 	movh	r9,0xc000
80003ea2:	ef 38 ff e7 	ld.ub	r8,r7[-25]
80003ea6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003ea8:	fc 19 c0 20 	movh	r9,0xc020
80003eac:	ef 38 ff e6 	ld.ub	r8,r7[-26]
80003eb0:	b2 08       	st.h	r9[0x0],r8
80003eb2:	33 d8       	mov	r8,61
80003eb4:	ef 68 ff e9 	st.b	r7[-23],r8
80003eb8:	30 08       	mov	r8,0
80003eba:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003ebe:	fc 19 c0 00 	movh	r9,0xc000
80003ec2:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80003ec6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003ec8:	fc 19 c0 20 	movh	r9,0xc020
80003ecc:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80003ed0:	b2 08       	st.h	r9[0x0],r8
80003ed2:	33 e8       	mov	r8,62
80003ed4:	ef 68 ff eb 	st.b	r7[-21],r8
80003ed8:	33 88       	mov	r8,56
80003eda:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003ede:	fc 19 c0 00 	movh	r9,0xc000
80003ee2:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80003ee6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003ee8:	fc 19 c0 20 	movh	r9,0xc020
80003eec:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80003ef0:	b2 08       	st.h	r9[0x0],r8
80003ef2:	34 08       	mov	r8,64
80003ef4:	ef 68 ff ed 	st.b	r7[-19],r8
80003ef8:	30 f8       	mov	r8,15
80003efa:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003efe:	fc 19 c0 00 	movh	r9,0xc000
80003f02:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80003f06:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003f08:	fc 19 c0 20 	movh	r9,0xc020
80003f0c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003f10:	b2 08       	st.h	r9[0x0],r8
80003f12:	34 18       	mov	r8,65
80003f14:	ef 68 ff ef 	st.b	r7[-17],r8
80003f18:	3f 08       	mov	r8,-16
80003f1a:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003f1e:	fc 19 c0 00 	movh	r9,0xc000
80003f22:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80003f26:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003f28:	fc 19 c0 20 	movh	r9,0xc020
80003f2c:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80003f30:	b2 08       	st.h	r9[0x0],r8
80003f32:	32 78       	mov	r8,39
80003f34:	ef 68 ff f1 	st.b	r7[-15],r8
80003f38:	30 28       	mov	r8,2
80003f3a:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003f3e:	fc 19 c0 00 	movh	r9,0xc000
80003f42:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80003f46:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003f48:	fc 19 c0 20 	movh	r9,0xc020
80003f4c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003f50:	b2 08       	st.h	r9[0x0],r8
80003f52:	32 88       	mov	r8,40
80003f54:	ef 68 ff f3 	st.b	r7[-13],r8
80003f58:	30 28       	mov	r8,2
80003f5a:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003f5e:	fc 19 c0 00 	movh	r9,0xc000
80003f62:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80003f66:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003f68:	fc 19 c0 20 	movh	r9,0xc020
80003f6c:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80003f70:	b2 08       	st.h	r9[0x0],r8
80003f72:	32 98       	mov	r8,41
80003f74:	ef 68 ff f5 	st.b	r7[-11],r8
80003f78:	30 28       	mov	r8,2
80003f7a:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003f7e:	fc 19 c0 00 	movh	r9,0xc000
80003f82:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80003f86:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003f88:	fc 19 c0 20 	movh	r9,0xc020
80003f8c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003f90:	b2 08       	st.h	r9[0x0],r8
80003f92:	32 a8       	mov	r8,42
80003f94:	ef 68 ff f7 	st.b	r7[-9],r8
80003f98:	30 28       	mov	r8,2
80003f9a:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003f9e:	fc 19 c0 00 	movh	r9,0xc000
80003fa2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003fa6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003fa8:	fc 19 c0 20 	movh	r9,0xc020
80003fac:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80003fb0:	b2 08       	st.h	r9[0x0],r8
80003fb2:	32 c8       	mov	r8,44
80003fb4:	ef 68 ff f9 	st.b	r7[-7],r8
80003fb8:	30 28       	mov	r8,2
80003fba:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003fbe:	fc 19 c0 00 	movh	r9,0xc000
80003fc2:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003fc6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003fc8:	fc 19 c0 20 	movh	r9,0xc020
80003fcc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003fd0:	b2 08       	st.h	r9[0x0],r8
80003fd2:	32 d8       	mov	r8,45
80003fd4:	ef 68 ff fb 	st.b	r7[-5],r8
80003fd8:	30 28       	mov	r8,2
80003fda:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003fde:	fc 19 c0 00 	movh	r9,0xc000
80003fe2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003fe6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003fe8:	fc 19 c0 20 	movh	r9,0xc020
80003fec:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80003ff0:	b2 08       	st.h	r9[0x0],r8
80003ff2:	31 98       	mov	r8,25
80003ff4:	ef 68 ff fd 	st.b	r7[-3],r8
80003ff8:	34 98       	mov	r8,73
80003ffa:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003ffe:	fc 19 c0 00 	movh	r9,0xc000
80004002:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004006:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004008:	fc 19 c0 20 	movh	r9,0xc020
8000400c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004010:	b2 08       	st.h	r9[0x0],r8
80004012:	39 38       	mov	r8,-109
80004014:	ef 68 ff ff 	st.b	r7[-1],r8
80004018:	30 88       	mov	r8,8
8000401a:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000401e:	fc 19 c0 00 	movh	r9,0xc000
80004022:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004026:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004028:	fc 19 c0 20 	movh	r9,0xc020
8000402c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004030:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL6, 0x02 );
  et024006_WriteRegister( HIMAX_DISPCTRL7, 0x02 );

  et024006_WriteRegister( HIMAX_OSCCTRL1, 0x49 );
  et024006_WriteRegister( HIMAX_OSCCTRL3, 0x08 );
}
80004032:	2f 8d       	sub	sp,-32
80004034:	e3 cd 80 80 	ldm	sp++,r7,pc

80004038 <et024006_PowerSettings>:
/*! \brief Power setup.
 *
 * Sets basic DC/DC and VCOM parameters.
 */
static void et024006_PowerSettings(void)
{
80004038:	eb cd 40 80 	pushm	r7,lr
8000403c:	1a 97       	mov	r7,sp
8000403e:	20 6d       	sub	sp,24
80004040:	32 38       	mov	r8,35
80004042:	ef 68 ff e9 	st.b	r7[-23],r8
80004046:	39 58       	mov	r8,-107
80004048:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000404c:	fc 19 c0 00 	movh	r9,0xc000
80004050:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80004054:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004056:	fc 19 c0 20 	movh	r9,0xc020
8000405a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000405e:	b2 08       	st.h	r9[0x0],r8
80004060:	32 48       	mov	r8,36
80004062:	ef 68 ff eb 	st.b	r7[-21],r8
80004066:	39 58       	mov	r8,-107
80004068:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000406c:	fc 19 c0 00 	movh	r9,0xc000
80004070:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80004074:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004076:	fc 19 c0 20 	movh	r9,0xc020
8000407a:	ef 38 ff ea 	ld.ub	r8,r7[-22]
8000407e:	b2 08       	st.h	r9[0x0],r8
80004080:	32 58       	mov	r8,37
80004082:	ef 68 ff ed 	st.b	r7[-19],r8
80004086:	3f f8       	mov	r8,-1
80004088:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000408c:	fc 19 c0 00 	movh	r9,0xc000
80004090:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004094:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004096:	fc 19 c0 20 	movh	r9,0xc020
8000409a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000409e:	b2 08       	st.h	r9[0x0],r8
800040a0:	39 08       	mov	r8,-112
800040a2:	ef 68 ff ef 	st.b	r7[-17],r8
800040a6:	37 f8       	mov	r8,127
800040a8:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800040ac:	fc 19 c0 00 	movh	r9,0xc000
800040b0:	ef 38 ff ef 	ld.ub	r8,r7[-17]
800040b4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800040b6:	fc 19 c0 20 	movh	r9,0xc020
800040ba:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800040be:	b2 08       	st.h	r9[0x0],r8
800040c0:	33 58       	mov	r8,53
800040c2:	ef 68 ff f1 	st.b	r7[-15],r8
800040c6:	33 88       	mov	r8,56
800040c8:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800040cc:	fc 19 c0 00 	movh	r9,0xc000
800040d0:	ef 38 ff f1 	ld.ub	r8,r7[-15]
800040d4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800040d6:	fc 19 c0 20 	movh	r9,0xc020
800040da:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800040de:	b2 08       	st.h	r9[0x0],r8
800040e0:	33 68       	mov	r8,54
800040e2:	ef 68 ff f3 	st.b	r7[-13],r8
800040e6:	37 88       	mov	r8,120
800040e8:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800040ec:	fc 19 c0 00 	movh	r9,0xc000
800040f0:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800040f4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800040f6:	fc 19 c0 20 	movh	r9,0xc020
800040fa:	ef 38 ff f2 	ld.ub	r8,r7[-14]
800040fe:	b2 08       	st.h	r9[0x0],r8
80004100:	31 d8       	mov	r8,29
80004102:	ef 68 ff f5 	st.b	r7[-11],r8
80004106:	30 78       	mov	r8,7
80004108:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000410c:	fc 19 c0 00 	movh	r9,0xc000
80004110:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004114:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004116:	fc 19 c0 20 	movh	r9,0xc020
8000411a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000411e:	b2 08       	st.h	r9[0x0],r8
80004120:	31 e8       	mov	r8,30
80004122:	ef 68 ff f7 	st.b	r7[-9],r8
80004126:	30 08       	mov	r8,0
80004128:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000412c:	fc 19 c0 00 	movh	r9,0xc000
80004130:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004134:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004136:	fc 19 c0 20 	movh	r9,0xc020
8000413a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000413e:	b2 08       	st.h	r9[0x0],r8
80004140:	31 f8       	mov	r8,31
80004142:	ef 68 ff f9 	st.b	r7[-7],r8
80004146:	30 48       	mov	r8,4
80004148:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000414c:	fc 19 c0 00 	movh	r9,0xc000
80004150:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004154:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004156:	fc 19 c0 20 	movh	r9,0xc020
8000415a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000415e:	b2 08       	st.h	r9[0x0],r8
80004160:	32 08       	mov	r8,32
80004162:	ef 68 ff fb 	st.b	r7[-5],r8
80004166:	34 08       	mov	r8,64
80004168:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000416c:	fc 19 c0 00 	movh	r9,0xc000
80004170:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004174:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004176:	fc 19 c0 20 	movh	r9,0xc020
8000417a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000417e:	b2 08       	st.h	r9[0x0],r8
80004180:	34 48       	mov	r8,68
80004182:	ef 68 ff fd 	st.b	r7[-3],r8
80004186:	33 88       	mov	r8,56
80004188:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000418c:	fc 19 c0 00 	movh	r9,0xc000
80004190:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004194:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004196:	fc 19 c0 20 	movh	r9,0xc020
8000419a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000419e:	b2 08       	st.h	r9[0x0],r8
800041a0:	34 58       	mov	r8,69
800041a2:	ef 68 ff ff 	st.b	r7[-1],r8
800041a6:	31 28       	mov	r8,18
800041a8:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800041ac:	fc 19 c0 00 	movh	r9,0xc000
800041b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800041b4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800041b6:	fc 19 c0 20 	movh	r9,0xc020
800041ba:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800041be:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL4, 0x00 );
  et024006_WriteRegister( HIMAX_POWERCTRL5, 0x04 );
  et024006_WriteRegister( HIMAX_POWERCTRL6, 0x40 );
  et024006_WriteRegister( HIMAX_VCOMCTRL2, 0x38 );
  et024006_WriteRegister( HIMAX_VCOMCTRL3, 0x12 );
}
800041c0:	2f ad       	sub	sp,-24
800041c2:	e3 cd 80 80 	ldm	sp++,r7,pc

800041c6 <et024006_InterfaceSettings>:
/*! \brief Sets display interface.
 *
 * Configures screen orientation and color mode.
 */
static void et024006_InterfaceSettings(void)
{
800041c6:	eb cd 40 80 	pushm	r7,lr
800041ca:	1a 97       	mov	r7,sp
800041cc:	20 1d       	sub	sp,4
800041ce:	31 68       	mov	r8,22
800041d0:	ef 68 ff ff 	st.b	r7[-1],r8
800041d4:	36 88       	mov	r8,104
800041d6:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800041da:	fc 19 c0 00 	movh	r9,0xc000
800041de:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800041e2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800041e4:	fc 19 c0 20 	movh	r9,0xc020
800041e8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800041ec:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_MEMACCESSCTRL,
    (1 << HIMAX_MX)
    | (1 << HIMAX_MV)
    | (1 << HIMAX_BGR) );

}
800041ee:	2f fd       	sub	sp,-4
800041f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800041f4 <et024006_PowerUp>:
/*! \brief Power up display.
 *
 * Turns on DC/DC converters.
 */
static void et024006_PowerUp(void)
{
800041f4:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800041f8:	1a 97       	mov	r7,sp
800041fa:	fa cd 01 24 	sub	sp,sp,292
  cpu_delay_ms( 10, tft_data.cpu_hz );
800041fe:	fe f8 07 22 	ld.w	r8,pc[1826]
80004202:	70 09       	ld.w	r9,r8[0x0]
80004204:	30 a8       	mov	r8,10
80004206:	ef 48 ff 54 	st.w	r7[-172],r8
8000420a:	ef 49 ff 50 	st.w	r7[-176],r9
8000420e:	ee f8 ff 54 	ld.w	r8,r7[-172]
80004212:	ef 48 ff 5c 	st.w	r7[-164],r8
80004216:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000421a:	ef 48 ff 58 	st.w	r7[-168],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000421e:	ee f2 ff 5c 	ld.w	r2,r7[-164]
80004222:	30 03       	mov	r3,0
80004224:	ee fa ff 58 	ld.w	r10,r7[-168]
80004228:	30 0b       	mov	r11,0
8000422a:	e6 0a 02 49 	mul	r9,r3,r10
8000422e:	f6 02 02 48 	mul	r8,r11,r2
80004232:	10 09       	add	r9,r8
80004234:	e4 0a 06 4a 	mulu.d	r10,r2,r10
80004238:	16 09       	add	r9,r11
8000423a:	12 9b       	mov	r11,r9
8000423c:	e0 68 03 e7 	mov	r8,999
80004240:	30 09       	mov	r9,0
80004242:	10 0a       	add	r10,r8
80004244:	f6 09 00 4b 	adc	r11,r11,r9
80004248:	e0 68 03 e8 	mov	r8,1000
8000424c:	30 09       	mov	r9,0
8000424e:	f0 1f 01 b6 	mcall	80004924 <et024006_PowerUp+0x730>
80004252:	14 98       	mov	r8,r10
80004254:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004256:	ef 48 ff 64 	st.w	r7[-156],r8
8000425a:	ee c8 00 ec 	sub	r8,r7,236
8000425e:	ef 48 ff 60 	st.w	r7[-160],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004262:	e1 b8 00 42 	mfsr	r8,0x108
80004266:	10 99       	mov	r9,r8
80004268:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000426c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000426e:	ee f8 ff 60 	ld.w	r8,r7[-160]
80004272:	70 09       	ld.w	r9,r8[0x0]
80004274:	ee f8 ff 64 	ld.w	r8,r7[-156]
80004278:	10 09       	add	r9,r8
8000427a:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000427e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004280:	ee f9 ff 60 	ld.w	r9,r7[-160]
80004284:	30 08       	mov	r8,0
80004286:	f3 68 00 08 	st.b	r9[8],r8
8000428a:	ee c8 00 ec 	sub	r8,r7,236
8000428e:	ef 48 ff 68 	st.w	r7[-152],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004292:	e1 b8 00 42 	mfsr	r8,0x108
80004296:	ef 48 ff 6c 	st.w	r7[-148],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000429a:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000429e:	f1 39 00 08 	ld.ub	r9,r8[8]
800042a2:	30 28       	mov	r8,2
800042a4:	f0 09 18 00 	cp.b	r9,r8
800042a8:	c0 31       	brne	800042ae <et024006_PowerUp+0xba>
    return false;
800042aa:	30 08       	mov	r8,0
800042ac:	c4 38       	rjmp	80004332 <et024006_PowerUp+0x13e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800042ae:	ee f8 ff 68 	ld.w	r8,r7[-152]
800042b2:	f1 39 00 08 	ld.ub	r9,r8[8]
800042b6:	30 18       	mov	r8,1
800042b8:	f0 09 18 00 	cp.b	r9,r8
800042bc:	c0 31       	brne	800042c2 <et024006_PowerUp+0xce>
    return true;
800042be:	30 18       	mov	r8,1
800042c0:	c3 98       	rjmp	80004332 <et024006_PowerUp+0x13e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800042c2:	ee f8 ff 68 	ld.w	r8,r7[-152]
800042c6:	70 09       	ld.w	r9,r8[0x0]
800042c8:	ee f8 ff 68 	ld.w	r8,r7[-152]
800042cc:	70 18       	ld.w	r8,r8[0x4]
800042ce:	10 39       	cp.w	r9,r8
800042d0:	e0 88 00 1a 	brls	80004304 <et024006_PowerUp+0x110>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800042d4:	ee f8 ff 68 	ld.w	r8,r7[-152]
800042d8:	70 09       	ld.w	r9,r8[0x0]
800042da:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800042de:	12 38       	cp.w	r8,r9
800042e0:	c1 02       	brcc	80004300 <et024006_PowerUp+0x10c>
800042e2:	ee f8 ff 68 	ld.w	r8,r7[-152]
800042e6:	70 19       	ld.w	r9,r8[0x4]
800042e8:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800042ec:	12 38       	cp.w	r8,r9
800042ee:	e0 88 00 09 	brls	80004300 <et024006_PowerUp+0x10c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800042f2:	ee f9 ff 68 	ld.w	r9,r7[-152]
800042f6:	30 18       	mov	r8,1
800042f8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800042fc:	30 18       	mov	r8,1
800042fe:	c1 a8       	rjmp	80004332 <et024006_PowerUp+0x13e>
    }
    return false;
80004300:	30 08       	mov	r8,0
80004302:	c1 88       	rjmp	80004332 <et024006_PowerUp+0x13e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004304:	ee f8 ff 68 	ld.w	r8,r7[-152]
80004308:	70 09       	ld.w	r9,r8[0x0]
8000430a:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000430e:	12 38       	cp.w	r8,r9
80004310:	c0 93       	brcs	80004322 <et024006_PowerUp+0x12e>
80004312:	ee f8 ff 68 	ld.w	r8,r7[-152]
80004316:	70 19       	ld.w	r9,r8[0x4]
80004318:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000431c:	12 38       	cp.w	r8,r9
8000431e:	e0 88 00 09 	brls	80004330 <et024006_PowerUp+0x13c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004322:	ee f9 ff 68 	ld.w	r9,r7[-152]
80004326:	30 18       	mov	r8,1
80004328:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000432c:	30 18       	mov	r8,1
8000432e:	c0 28       	rjmp	80004332 <et024006_PowerUp+0x13e>
    }
    return false;
80004330:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004332:	58 08       	cp.w	r8,0
80004334:	ca b0       	breq	8000428a <et024006_PowerUp+0x96>
80004336:	31 c8       	mov	r8,28
80004338:	ef 68 ff 73 	st.b	r7[-141],r8
8000433c:	30 48       	mov	r8,4
8000433e:	ef 68 ff 72 	st.b	r7[-142],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004342:	fc 19 c0 00 	movh	r9,0xc000
80004346:	ef 38 ff 73 	ld.ub	r8,r7[-141]
8000434a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000434c:	fc 19 c0 20 	movh	r9,0xc020
80004350:	ef 38 ff 72 	ld.ub	r8,r7[-142]
80004354:	b2 08       	st.h	r9[0x0],r8
static void et024006_PowerUp(void)
{
  cpu_delay_ms( 10, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
80004356:	fe f8 05 ca 	ld.w	r8,pc[1482]
8000435a:	70 09       	ld.w	r9,r8[0x0]
8000435c:	31 48       	mov	r8,20
8000435e:	ef 48 ff 78 	st.w	r7[-136],r8
80004362:	ef 49 ff 74 	st.w	r7[-140],r9
80004366:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000436a:	ef 48 ff 80 	st.w	r7[-128],r8
8000436e:	ee f8 ff 74 	ld.w	r8,r7[-140]
80004372:	ef 48 ff 7c 	st.w	r7[-132],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004376:	ee fc ff 80 	ld.w	r12,r7[-128]
8000437a:	ef 4c fe e0 	st.w	r7[-288],r12
8000437e:	30 0b       	mov	r11,0
80004380:	ef 4b fe dc 	st.w	r7[-292],r11
80004384:	ee f0 ff 7c 	ld.w	r0,r7[-132]
80004388:	30 01       	mov	r1,0
8000438a:	ee f9 fe dc 	ld.w	r9,r7[-292]
8000438e:	a1 39       	mul	r9,r0
80004390:	ee fa fe e0 	ld.w	r10,r7[-288]
80004394:	e2 0a 02 48 	mul	r8,r1,r10
80004398:	10 09       	add	r9,r8
8000439a:	ee f8 fe e0 	ld.w	r8,r7[-288]
8000439e:	f0 00 06 4a 	mulu.d	r10,r8,r0
800043a2:	16 09       	add	r9,r11
800043a4:	12 9b       	mov	r11,r9
800043a6:	e0 68 03 e7 	mov	r8,999
800043aa:	30 09       	mov	r9,0
800043ac:	10 0a       	add	r10,r8
800043ae:	f6 09 00 4b 	adc	r11,r11,r9
800043b2:	e0 68 03 e8 	mov	r8,1000
800043b6:	30 09       	mov	r9,0
800043b8:	f0 1f 01 5b 	mcall	80004924 <et024006_PowerUp+0x730>
800043bc:	14 98       	mov	r8,r10
800043be:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800043c0:	ef 48 ff 88 	st.w	r7[-120],r8
800043c4:	ee c8 00 e0 	sub	r8,r7,224
800043c8:	ef 48 ff 84 	st.w	r7[-124],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800043cc:	e1 b8 00 42 	mfsr	r8,0x108
800043d0:	10 99       	mov	r9,r8
800043d2:	ee f8 ff 84 	ld.w	r8,r7[-124]
800043d6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800043d8:	ee f8 ff 84 	ld.w	r8,r7[-124]
800043dc:	70 09       	ld.w	r9,r8[0x0]
800043de:	ee f8 ff 88 	ld.w	r8,r7[-120]
800043e2:	10 09       	add	r9,r8
800043e4:	ee f8 ff 84 	ld.w	r8,r7[-124]
800043e8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800043ea:	ee f9 ff 84 	ld.w	r9,r7[-124]
800043ee:	30 08       	mov	r8,0
800043f0:	f3 68 00 08 	st.b	r9[8],r8
800043f4:	ee c8 00 e0 	sub	r8,r7,224
800043f8:	ef 48 ff 8c 	st.w	r7[-116],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800043fc:	e1 b8 00 42 	mfsr	r8,0x108
80004400:	ef 48 ff 90 	st.w	r7[-112],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004404:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004408:	f1 39 00 08 	ld.ub	r9,r8[8]
8000440c:	30 28       	mov	r8,2
8000440e:	f0 09 18 00 	cp.b	r9,r8
80004412:	c0 31       	brne	80004418 <et024006_PowerUp+0x224>
    return false;
80004414:	30 08       	mov	r8,0
80004416:	c4 38       	rjmp	8000449c <et024006_PowerUp+0x2a8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004418:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000441c:	f1 39 00 08 	ld.ub	r9,r8[8]
80004420:	30 18       	mov	r8,1
80004422:	f0 09 18 00 	cp.b	r9,r8
80004426:	c0 31       	brne	8000442c <et024006_PowerUp+0x238>
    return true;
80004428:	30 18       	mov	r8,1
8000442a:	c3 98       	rjmp	8000449c <et024006_PowerUp+0x2a8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000442c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004430:	70 09       	ld.w	r9,r8[0x0]
80004432:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004436:	70 18       	ld.w	r8,r8[0x4]
80004438:	10 39       	cp.w	r9,r8
8000443a:	e0 88 00 1a 	brls	8000446e <et024006_PowerUp+0x27a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000443e:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004442:	70 08       	ld.w	r8,r8[0x0]
80004444:	ee f9 ff 90 	ld.w	r9,r7[-112]
80004448:	10 39       	cp.w	r9,r8
8000444a:	c1 02       	brcc	8000446a <et024006_PowerUp+0x276>
8000444c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004450:	70 18       	ld.w	r8,r8[0x4]
80004452:	ee f9 ff 90 	ld.w	r9,r7[-112]
80004456:	10 39       	cp.w	r9,r8
80004458:	e0 88 00 09 	brls	8000446a <et024006_PowerUp+0x276>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000445c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80004460:	30 18       	mov	r8,1
80004462:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004466:	30 18       	mov	r8,1
80004468:	c1 a8       	rjmp	8000449c <et024006_PowerUp+0x2a8>
    }
    return false;
8000446a:	30 08       	mov	r8,0
8000446c:	c1 88       	rjmp	8000449c <et024006_PowerUp+0x2a8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000446e:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004472:	70 08       	ld.w	r8,r8[0x0]
80004474:	ee f9 ff 90 	ld.w	r9,r7[-112]
80004478:	10 39       	cp.w	r9,r8
8000447a:	c0 93       	brcs	8000448c <et024006_PowerUp+0x298>
8000447c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004480:	70 18       	ld.w	r8,r8[0x4]
80004482:	ee f9 ff 90 	ld.w	r9,r7[-112]
80004486:	10 39       	cp.w	r9,r8
80004488:	e0 88 00 09 	brls	8000449a <et024006_PowerUp+0x2a6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000448c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80004490:	30 18       	mov	r8,1
80004492:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004496:	30 18       	mov	r8,1
80004498:	c0 28       	rjmp	8000449c <et024006_PowerUp+0x2a8>
    }
    return false;
8000449a:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000449c:	58 08       	cp.w	r8,0
8000449e:	ca b0       	breq	800043f4 <et024006_PowerUp+0x200>
800044a0:	34 38       	mov	r8,67
800044a2:	ef 68 ff 97 	st.b	r7[-105],r8
800044a6:	38 08       	mov	r8,-128
800044a8:	ef 68 ff 96 	st.b	r7[-106],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800044ac:	fc 19 c0 00 	movh	r9,0xc000
800044b0:	ef 38 ff 97 	ld.ub	r8,r7[-105]
800044b4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800044b6:	fc 19 c0 20 	movh	r9,0xc020
800044ba:	ef 38 ff 96 	ld.ub	r8,r7[-106]
800044be:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
800044c0:	fe f8 04 60 	ld.w	r8,pc[1120]
800044c4:	70 08       	ld.w	r8,r8[0x0]
800044c6:	30 59       	mov	r9,5
800044c8:	ef 49 ff 9c 	st.w	r7[-100],r9
800044cc:	ef 48 ff 98 	st.w	r7[-104],r8
800044d0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800044d4:	ef 48 ff a4 	st.w	r7[-92],r8
800044d8:	ee f8 ff 98 	ld.w	r8,r7[-104]
800044dc:	ef 48 ff a0 	st.w	r7[-96],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800044e0:	ee fc ff a4 	ld.w	r12,r7[-92]
800044e4:	ef 4c fe f0 	st.w	r7[-272],r12
800044e8:	30 0b       	mov	r11,0
800044ea:	ef 4b fe ec 	st.w	r7[-276],r11
800044ee:	ee fa ff a0 	ld.w	r10,r7[-96]
800044f2:	ef 4a fe e8 	st.w	r7[-280],r10
800044f6:	30 09       	mov	r9,0
800044f8:	ef 49 fe e4 	st.w	r7[-284],r9
800044fc:	ee fa fe ec 	ld.w	r10,r7[-276]
80004500:	ee f8 fe e8 	ld.w	r8,r7[-280]
80004504:	b1 3a       	mul	r10,r8
80004506:	ee f8 fe e4 	ld.w	r8,r7[-284]
8000450a:	ee fc fe f0 	ld.w	r12,r7[-272]
8000450e:	b9 38       	mul	r8,r12
80004510:	10 0a       	add	r10,r8
80004512:	ee fb fe f0 	ld.w	r11,r7[-272]
80004516:	ee fc fe e8 	ld.w	r12,r7[-280]
8000451a:	f6 0c 06 48 	mulu.d	r8,r11,r12
8000451e:	12 0a       	add	r10,r9
80004520:	14 99       	mov	r9,r10
80004522:	e0 6a 03 e7 	mov	r10,999
80004526:	30 0b       	mov	r11,0
80004528:	f0 0a 00 0a 	add	r10,r8,r10
8000452c:	f2 0b 00 4b 	adc	r11,r9,r11
80004530:	e0 68 03 e8 	mov	r8,1000
80004534:	30 09       	mov	r9,0
80004536:	f0 1f 00 fc 	mcall	80004924 <et024006_PowerUp+0x730>
8000453a:	14 98       	mov	r8,r10
8000453c:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000453e:	ef 48 ff ac 	st.w	r7[-84],r8
80004542:	ee c8 00 d4 	sub	r8,r7,212
80004546:	ef 48 ff a8 	st.w	r7[-88],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000454a:	e1 b8 00 42 	mfsr	r8,0x108
8000454e:	10 99       	mov	r9,r8
80004550:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004554:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004556:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000455a:	70 09       	ld.w	r9,r8[0x0]
8000455c:	ee f8 ff ac 	ld.w	r8,r7[-84]
80004560:	10 09       	add	r9,r8
80004562:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004566:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004568:	ee f9 ff a8 	ld.w	r9,r7[-88]
8000456c:	30 08       	mov	r8,0
8000456e:	f3 68 00 08 	st.b	r9[8],r8
80004572:	ee c8 00 d4 	sub	r8,r7,212
80004576:	ef 48 ff b0 	st.w	r7[-80],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000457a:	e1 b8 00 42 	mfsr	r8,0x108
8000457e:	ef 48 ff b4 	st.w	r7[-76],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004582:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004586:	f1 39 00 08 	ld.ub	r9,r8[8]
8000458a:	30 28       	mov	r8,2
8000458c:	f0 09 18 00 	cp.b	r9,r8
80004590:	c0 31       	brne	80004596 <et024006_PowerUp+0x3a2>
    return false;
80004592:	30 08       	mov	r8,0
80004594:	c4 38       	rjmp	8000461a <et024006_PowerUp+0x426>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004596:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000459a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000459e:	30 18       	mov	r8,1
800045a0:	f0 09 18 00 	cp.b	r9,r8
800045a4:	c0 31       	brne	800045aa <et024006_PowerUp+0x3b6>
    return true;
800045a6:	30 18       	mov	r8,1
800045a8:	c3 98       	rjmp	8000461a <et024006_PowerUp+0x426>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800045aa:	ee f8 ff b0 	ld.w	r8,r7[-80]
800045ae:	70 09       	ld.w	r9,r8[0x0]
800045b0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800045b4:	70 18       	ld.w	r8,r8[0x4]
800045b6:	10 39       	cp.w	r9,r8
800045b8:	e0 88 00 1a 	brls	800045ec <et024006_PowerUp+0x3f8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800045bc:	ee f8 ff b0 	ld.w	r8,r7[-80]
800045c0:	70 08       	ld.w	r8,r8[0x0]
800045c2:	ee f9 ff b4 	ld.w	r9,r7[-76]
800045c6:	10 39       	cp.w	r9,r8
800045c8:	c1 02       	brcc	800045e8 <et024006_PowerUp+0x3f4>
800045ca:	ee f8 ff b0 	ld.w	r8,r7[-80]
800045ce:	70 18       	ld.w	r8,r8[0x4]
800045d0:	ee f9 ff b4 	ld.w	r9,r7[-76]
800045d4:	10 39       	cp.w	r9,r8
800045d6:	e0 88 00 09 	brls	800045e8 <et024006_PowerUp+0x3f4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800045da:	ee f9 ff b0 	ld.w	r9,r7[-80]
800045de:	30 18       	mov	r8,1
800045e0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800045e4:	30 18       	mov	r8,1
800045e6:	c1 a8       	rjmp	8000461a <et024006_PowerUp+0x426>
    }
    return false;
800045e8:	30 08       	mov	r8,0
800045ea:	c1 88       	rjmp	8000461a <et024006_PowerUp+0x426>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800045ec:	ee f8 ff b0 	ld.w	r8,r7[-80]
800045f0:	70 08       	ld.w	r8,r8[0x0]
800045f2:	ee f9 ff b4 	ld.w	r9,r7[-76]
800045f6:	10 39       	cp.w	r9,r8
800045f8:	c0 93       	brcs	8000460a <et024006_PowerUp+0x416>
800045fa:	ee f8 ff b0 	ld.w	r8,r7[-80]
800045fe:	70 18       	ld.w	r8,r8[0x4]
80004600:	ee f9 ff b4 	ld.w	r9,r7[-76]
80004604:	10 39       	cp.w	r9,r8
80004606:	e0 88 00 09 	brls	80004618 <et024006_PowerUp+0x424>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000460a:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000460e:	30 18       	mov	r8,1
80004610:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004614:	30 18       	mov	r8,1
80004616:	c0 28       	rjmp	8000461a <et024006_PowerUp+0x426>
    }
    return false;
80004618:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000461a:	58 08       	cp.w	r8,0
8000461c:	ca b0       	breq	80004572 <et024006_PowerUp+0x37e>
8000461e:	31 b8       	mov	r8,27
80004620:	ef 68 ff bb 	st.b	r7[-69],r8
80004624:	30 88       	mov	r8,8
80004626:	ef 68 ff ba 	st.b	r7[-70],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000462a:	fc 19 c0 00 	movh	r9,0xc000
8000462e:	ef 38 ff bb 	ld.ub	r8,r7[-69]
80004632:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004634:	fc 19 c0 20 	movh	r9,0xc020
80004638:	ef 38 ff ba 	ld.ub	r8,r7[-70]
8000463c:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_DK) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
8000463e:	fe f8 02 e2 	ld.w	r8,pc[738]
80004642:	70 08       	ld.w	r8,r8[0x0]
80004644:	32 89       	mov	r9,40
80004646:	ef 49 ff c0 	st.w	r7[-64],r9
8000464a:	ef 48 ff bc 	st.w	r7[-68],r8
8000464e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004652:	ef 48 ff c8 	st.w	r7[-56],r8
80004656:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000465a:	ef 48 ff c4 	st.w	r7[-60],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000465e:	ee fb ff c8 	ld.w	r11,r7[-56]
80004662:	ef 4b ff 00 	st.w	r7[-256],r11
80004666:	30 0a       	mov	r10,0
80004668:	ef 4a fe fc 	st.w	r7[-260],r10
8000466c:	ee f9 ff c4 	ld.w	r9,r7[-60]
80004670:	ef 49 fe f8 	st.w	r7[-264],r9
80004674:	30 08       	mov	r8,0
80004676:	ef 48 fe f4 	st.w	r7[-268],r8
8000467a:	ee fa fe fc 	ld.w	r10,r7[-260]
8000467e:	ee fc fe f8 	ld.w	r12,r7[-264]
80004682:	b9 3a       	mul	r10,r12
80004684:	ee f8 fe f4 	ld.w	r8,r7[-268]
80004688:	ee fb ff 00 	ld.w	r11,r7[-256]
8000468c:	b7 38       	mul	r8,r11
8000468e:	10 0a       	add	r10,r8
80004690:	ee fc ff 00 	ld.w	r12,r7[-256]
80004694:	ee fb fe f8 	ld.w	r11,r7[-264]
80004698:	f8 0b 06 48 	mulu.d	r8,r12,r11
8000469c:	12 0a       	add	r10,r9
8000469e:	14 99       	mov	r9,r10
800046a0:	e0 6a 03 e7 	mov	r10,999
800046a4:	30 0b       	mov	r11,0
800046a6:	f0 0a 00 0a 	add	r10,r8,r10
800046aa:	f2 0b 00 4b 	adc	r11,r9,r11
800046ae:	e0 68 03 e8 	mov	r8,1000
800046b2:	30 09       	mov	r9,0
800046b4:	f0 1f 00 9c 	mcall	80004924 <et024006_PowerUp+0x730>
800046b8:	14 98       	mov	r8,r10
800046ba:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800046bc:	ef 48 ff d0 	st.w	r7[-48],r8
800046c0:	ee c8 00 c8 	sub	r8,r7,200
800046c4:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800046c8:	e1 b8 00 42 	mfsr	r8,0x108
800046cc:	10 99       	mov	r9,r8
800046ce:	ee f8 ff cc 	ld.w	r8,r7[-52]
800046d2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800046d4:	ee f8 ff cc 	ld.w	r8,r7[-52]
800046d8:	70 09       	ld.w	r9,r8[0x0]
800046da:	ee f8 ff d0 	ld.w	r8,r7[-48]
800046de:	10 09       	add	r9,r8
800046e0:	ee f8 ff cc 	ld.w	r8,r7[-52]
800046e4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800046e6:	ee f9 ff cc 	ld.w	r9,r7[-52]
800046ea:	30 08       	mov	r8,0
800046ec:	f3 68 00 08 	st.b	r9[8],r8
800046f0:	ee c8 00 c8 	sub	r8,r7,200
800046f4:	ef 48 ff d4 	st.w	r7[-44],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800046f8:	e1 b8 00 42 	mfsr	r8,0x108
800046fc:	ef 48 ff d8 	st.w	r7[-40],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004700:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004704:	f1 39 00 08 	ld.ub	r9,r8[8]
80004708:	30 28       	mov	r8,2
8000470a:	f0 09 18 00 	cp.b	r9,r8
8000470e:	c0 31       	brne	80004714 <et024006_PowerUp+0x520>
    return false;
80004710:	30 08       	mov	r8,0
80004712:	c4 38       	rjmp	80004798 <et024006_PowerUp+0x5a4>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004714:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004718:	f1 39 00 08 	ld.ub	r9,r8[8]
8000471c:	30 18       	mov	r8,1
8000471e:	f0 09 18 00 	cp.b	r9,r8
80004722:	c0 31       	brne	80004728 <et024006_PowerUp+0x534>
    return true;
80004724:	30 18       	mov	r8,1
80004726:	c3 98       	rjmp	80004798 <et024006_PowerUp+0x5a4>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004728:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000472c:	70 09       	ld.w	r9,r8[0x0]
8000472e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004732:	70 18       	ld.w	r8,r8[0x4]
80004734:	10 39       	cp.w	r9,r8
80004736:	e0 88 00 1a 	brls	8000476a <et024006_PowerUp+0x576>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000473a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000473e:	70 08       	ld.w	r8,r8[0x0]
80004740:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004744:	10 39       	cp.w	r9,r8
80004746:	c1 02       	brcc	80004766 <et024006_PowerUp+0x572>
80004748:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000474c:	70 18       	ld.w	r8,r8[0x4]
8000474e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004752:	10 39       	cp.w	r9,r8
80004754:	e0 88 00 09 	brls	80004766 <et024006_PowerUp+0x572>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004758:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000475c:	30 18       	mov	r8,1
8000475e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004762:	30 18       	mov	r8,1
80004764:	c1 a8       	rjmp	80004798 <et024006_PowerUp+0x5a4>
    }
    return false;
80004766:	30 08       	mov	r8,0
80004768:	c1 88       	rjmp	80004798 <et024006_PowerUp+0x5a4>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000476a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000476e:	70 08       	ld.w	r8,r8[0x0]
80004770:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004774:	10 39       	cp.w	r9,r8
80004776:	c0 93       	brcs	80004788 <et024006_PowerUp+0x594>
80004778:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000477c:	70 18       	ld.w	r8,r8[0x4]
8000477e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004782:	10 39       	cp.w	r9,r8
80004784:	e0 88 00 09 	brls	80004796 <et024006_PowerUp+0x5a2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004788:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000478c:	30 18       	mov	r8,1
8000478e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004792:	30 18       	mov	r8,1
80004794:	c0 28       	rjmp	80004798 <et024006_PowerUp+0x5a4>
    }
    return false;
80004796:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004798:	58 08       	cp.w	r8,0
8000479a:	ca b0       	breq	800046f0 <et024006_PowerUp+0x4fc>
8000479c:	31 b8       	mov	r8,27
8000479e:	ef 68 ff df 	st.b	r7[-33],r8
800047a2:	31 08       	mov	r8,16
800047a4:	ef 68 ff de 	st.b	r7[-34],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800047a8:	fc 19 c0 00 	movh	r9,0xc000
800047ac:	ef 38 ff df 	ld.ub	r8,r7[-33]
800047b0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800047b2:	fc 19 c0 20 	movh	r9,0xc020
800047b6:	ef 38 ff de 	ld.ub	r8,r7[-34]
800047ba:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_PON) );

  // In case the et024006_DisplayOn function is called right after
  cpu_delay_ms( 40, tft_data.cpu_hz );
800047bc:	4d 98       	lddpc	r8,80004920 <et024006_PowerUp+0x72c>
800047be:	70 08       	ld.w	r8,r8[0x0]
800047c0:	32 89       	mov	r9,40
800047c2:	ef 49 ff e4 	st.w	r7[-28],r9
800047c6:	ef 48 ff e0 	st.w	r7[-32],r8
800047ca:	ee f8 ff e4 	ld.w	r8,r7[-28]
800047ce:	ef 48 ff ec 	st.w	r7[-20],r8
800047d2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800047d6:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800047da:	ee fa ff ec 	ld.w	r10,r7[-20]
800047de:	ef 4a ff 10 	st.w	r7[-240],r10
800047e2:	30 09       	mov	r9,0
800047e4:	ef 49 ff 0c 	st.w	r7[-244],r9
800047e8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800047ec:	ef 48 ff 08 	st.w	r7[-248],r8
800047f0:	30 0c       	mov	r12,0
800047f2:	ef 4c ff 04 	st.w	r7[-252],r12
800047f6:	ee fa ff 0c 	ld.w	r10,r7[-244]
800047fa:	ee fb ff 08 	ld.w	r11,r7[-248]
800047fe:	b7 3a       	mul	r10,r11
80004800:	ee f8 ff 04 	ld.w	r8,r7[-252]
80004804:	ee f9 ff 10 	ld.w	r9,r7[-240]
80004808:	b3 38       	mul	r8,r9
8000480a:	10 0a       	add	r10,r8
8000480c:	ee fc ff 10 	ld.w	r12,r7[-240]
80004810:	ee fb ff 08 	ld.w	r11,r7[-248]
80004814:	f8 0b 06 48 	mulu.d	r8,r12,r11
80004818:	12 0a       	add	r10,r9
8000481a:	14 99       	mov	r9,r10
8000481c:	e0 6a 03 e7 	mov	r10,999
80004820:	30 0b       	mov	r11,0
80004822:	f0 0a 00 0a 	add	r10,r8,r10
80004826:	f2 0b 00 4b 	adc	r11,r9,r11
8000482a:	e0 68 03 e8 	mov	r8,1000
8000482e:	30 09       	mov	r9,0
80004830:	f0 1f 00 3d 	mcall	80004924 <et024006_PowerUp+0x730>
80004834:	14 98       	mov	r8,r10
80004836:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004838:	ef 48 ff f4 	st.w	r7[-12],r8
8000483c:	ee c8 00 bc 	sub	r8,r7,188
80004840:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004844:	e1 b8 00 42 	mfsr	r8,0x108
80004848:	10 99       	mov	r9,r8
8000484a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000484e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004850:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004854:	70 09       	ld.w	r9,r8[0x0]
80004856:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000485a:	10 09       	add	r9,r8
8000485c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004860:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004862:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004866:	30 08       	mov	r8,0
80004868:	f3 68 00 08 	st.b	r9[8],r8
8000486c:	ee c8 00 bc 	sub	r8,r7,188
80004870:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004874:	e1 b8 00 42 	mfsr	r8,0x108
80004878:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000487c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004880:	f1 39 00 08 	ld.ub	r9,r8[8]
80004884:	30 28       	mov	r8,2
80004886:	f0 09 18 00 	cp.b	r9,r8
8000488a:	c0 31       	brne	80004890 <et024006_PowerUp+0x69c>
    return false;
8000488c:	30 08       	mov	r8,0
8000488e:	c4 38       	rjmp	80004914 <et024006_PowerUp+0x720>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004890:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004894:	f1 39 00 08 	ld.ub	r9,r8[8]
80004898:	30 18       	mov	r8,1
8000489a:	f0 09 18 00 	cp.b	r9,r8
8000489e:	c0 31       	brne	800048a4 <et024006_PowerUp+0x6b0>
    return true;
800048a0:	30 18       	mov	r8,1
800048a2:	c3 98       	rjmp	80004914 <et024006_PowerUp+0x720>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800048a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048a8:	70 09       	ld.w	r9,r8[0x0]
800048aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ae:	70 18       	ld.w	r8,r8[0x4]
800048b0:	10 39       	cp.w	r9,r8
800048b2:	e0 88 00 1a 	brls	800048e6 <et024006_PowerUp+0x6f2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800048b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ba:	70 08       	ld.w	r8,r8[0x0]
800048bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800048c0:	10 39       	cp.w	r9,r8
800048c2:	c1 02       	brcc	800048e2 <et024006_PowerUp+0x6ee>
800048c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048c8:	70 18       	ld.w	r8,r8[0x4]
800048ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
800048ce:	10 39       	cp.w	r9,r8
800048d0:	e0 88 00 09 	brls	800048e2 <et024006_PowerUp+0x6ee>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800048d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800048d8:	30 18       	mov	r8,1
800048da:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800048de:	30 18       	mov	r8,1
800048e0:	c1 a8       	rjmp	80004914 <et024006_PowerUp+0x720>
    }
    return false;
800048e2:	30 08       	mov	r8,0
800048e4:	c1 88       	rjmp	80004914 <et024006_PowerUp+0x720>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800048e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ea:	70 08       	ld.w	r8,r8[0x0]
800048ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800048f0:	10 39       	cp.w	r9,r8
800048f2:	c0 93       	brcs	80004904 <et024006_PowerUp+0x710>
800048f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048f8:	70 18       	ld.w	r8,r8[0x4]
800048fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800048fe:	10 39       	cp.w	r9,r8
80004900:	e0 88 00 09 	brls	80004912 <et024006_PowerUp+0x71e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004904:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004908:	30 18       	mov	r8,1
8000490a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000490e:	30 18       	mov	r8,1
80004910:	c0 28       	rjmp	80004914 <et024006_PowerUp+0x720>
    }
    return false;
80004912:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004914:	58 08       	cp.w	r8,0
80004916:	ca b0       	breq	8000486c <et024006_PowerUp+0x678>
}
80004918:	2b 7d       	sub	sp,-292
8000491a:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
8000491e:	00 00       	add	r0,r0
80004920:	00 00       	add	r0,r0
80004922:	04 b8       	st.h	r2++,r8
80004924:	80 00       	ld.sh	r0,r0[0x0]
80004926:	ce ac       	rcall	80004afa <et024006_PowerOn+0x1d2>

80004928 <et024006_PowerOn>:


/*! \brief Turns the display on.
 */
static void et024006_PowerOn( void )
{
80004928:	eb cd 40 8f 	pushm	r0-r3,r7,lr
8000492c:	1a 97       	mov	r7,sp
8000492e:	21 9d       	sub	sp,100
80004930:	32 6c       	mov	r12,38
80004932:	ef 6c ff b7 	st.b	r7[-73],r12
80004936:	30 4c       	mov	r12,4
80004938:	ef 6c ff b6 	st.b	r7[-74],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000493c:	fc 1e c0 00 	movh	lr,0xc000
80004940:	ef 3c ff b7 	ld.ub	r12,r7[-73]
80004944:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004946:	fc 1e c0 20 	movh	lr,0xc020
8000494a:	ef 3c ff b6 	ld.ub	r12,r7[-74]
8000494e:	bc 0c       	st.h	lr[0x0],r12
 */
static void et024006_PowerOn( void )
{
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_D0) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
80004950:	fe fc 02 e0 	ld.w	r12,pc[736]
80004954:	78 0c       	ld.w	r12,r12[0x0]
80004956:	32 8e       	mov	lr,40
80004958:	ef 4e ff bc 	st.w	r7[-68],lr
8000495c:	ef 4c ff b8 	st.w	r7[-72],r12
80004960:	ee fc ff bc 	ld.w	r12,r7[-68]
80004964:	ef 4c ff c4 	st.w	r7[-60],r12
80004968:	ee fc ff b8 	ld.w	r12,r7[-72]
8000496c:	ef 4c ff c0 	st.w	r7[-64],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004970:	ee fa ff c4 	ld.w	r10,r7[-60]
80004974:	30 0b       	mov	r11,0
80004976:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000497a:	30 09       	mov	r9,0
8000497c:	f6 08 02 4c 	mul	r12,r11,r8
80004980:	f2 0a 02 4e 	mul	lr,r9,r10
80004984:	1c 0c       	add	r12,lr
80004986:	f4 08 06 48 	mulu.d	r8,r10,r8
8000498a:	12 0c       	add	r12,r9
8000498c:	18 99       	mov	r9,r12
8000498e:	e0 6a 03 e7 	mov	r10,999
80004992:	30 0b       	mov	r11,0
80004994:	f0 0a 00 0a 	add	r10,r8,r10
80004998:	f2 0b 00 4b 	adc	r11,r9,r11
8000499c:	e0 68 03 e8 	mov	r8,1000
800049a0:	30 09       	mov	r9,0
800049a2:	f0 1f 00 a5 	mcall	80004c34 <et024006_PowerOn+0x30c>
800049a6:	14 98       	mov	r8,r10
800049a8:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800049aa:	ef 48 ff cc 	st.w	r7[-52],r8
800049ae:	ee c8 00 64 	sub	r8,r7,100
800049b2:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800049b6:	e1 b8 00 42 	mfsr	r8,0x108
800049ba:	10 99       	mov	r9,r8
800049bc:	ee f8 ff c8 	ld.w	r8,r7[-56]
800049c0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800049c2:	ee f8 ff c8 	ld.w	r8,r7[-56]
800049c6:	70 09       	ld.w	r9,r8[0x0]
800049c8:	ee f8 ff cc 	ld.w	r8,r7[-52]
800049cc:	10 09       	add	r9,r8
800049ce:	ee f8 ff c8 	ld.w	r8,r7[-56]
800049d2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800049d4:	ee f9 ff c8 	ld.w	r9,r7[-56]
800049d8:	30 08       	mov	r8,0
800049da:	f3 68 00 08 	st.b	r9[8],r8
800049de:	ee c8 00 64 	sub	r8,r7,100
800049e2:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800049e6:	e1 b8 00 42 	mfsr	r8,0x108
800049ea:	ef 48 ff d4 	st.w	r7[-44],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800049ee:	ee f8 ff d0 	ld.w	r8,r7[-48]
800049f2:	f1 39 00 08 	ld.ub	r9,r8[8]
800049f6:	30 28       	mov	r8,2
800049f8:	f0 09 18 00 	cp.b	r9,r8
800049fc:	c0 31       	brne	80004a02 <et024006_PowerOn+0xda>
    return false;
800049fe:	30 08       	mov	r8,0
80004a00:	c4 38       	rjmp	80004a86 <et024006_PowerOn+0x15e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004a02:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004a06:	f1 39 00 08 	ld.ub	r9,r8[8]
80004a0a:	30 18       	mov	r8,1
80004a0c:	f0 09 18 00 	cp.b	r9,r8
80004a10:	c0 31       	brne	80004a16 <et024006_PowerOn+0xee>
    return true;
80004a12:	30 18       	mov	r8,1
80004a14:	c3 98       	rjmp	80004a86 <et024006_PowerOn+0x15e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004a16:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004a1a:	70 09       	ld.w	r9,r8[0x0]
80004a1c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004a20:	70 18       	ld.w	r8,r8[0x4]
80004a22:	10 39       	cp.w	r9,r8
80004a24:	e0 88 00 1a 	brls	80004a58 <et024006_PowerOn+0x130>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004a28:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004a2c:	70 08       	ld.w	r8,r8[0x0]
80004a2e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004a32:	10 39       	cp.w	r9,r8
80004a34:	c1 02       	brcc	80004a54 <et024006_PowerOn+0x12c>
80004a36:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004a3a:	70 18       	ld.w	r8,r8[0x4]
80004a3c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004a40:	10 39       	cp.w	r9,r8
80004a42:	e0 88 00 09 	brls	80004a54 <et024006_PowerOn+0x12c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004a46:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004a4a:	30 18       	mov	r8,1
80004a4c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004a50:	30 18       	mov	r8,1
80004a52:	c1 a8       	rjmp	80004a86 <et024006_PowerOn+0x15e>
    }
    return false;
80004a54:	30 08       	mov	r8,0
80004a56:	c1 88       	rjmp	80004a86 <et024006_PowerOn+0x15e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004a58:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004a5c:	70 08       	ld.w	r8,r8[0x0]
80004a5e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004a62:	10 39       	cp.w	r9,r8
80004a64:	c0 93       	brcs	80004a76 <et024006_PowerOn+0x14e>
80004a66:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004a6a:	70 18       	ld.w	r8,r8[0x4]
80004a6c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004a70:	10 39       	cp.w	r9,r8
80004a72:	e0 88 00 09 	brls	80004a84 <et024006_PowerOn+0x15c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004a76:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004a7a:	30 18       	mov	r8,1
80004a7c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004a80:	30 18       	mov	r8,1
80004a82:	c0 28       	rjmp	80004a86 <et024006_PowerOn+0x15e>
    }
    return false;
80004a84:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004a86:	58 08       	cp.w	r8,0
80004a88:	ca b0       	breq	800049de <et024006_PowerOn+0xb6>
80004a8a:	32 68       	mov	r8,38
80004a8c:	ef 68 ff d9 	st.b	r7[-39],r8
80004a90:	32 48       	mov	r8,36
80004a92:	ef 68 ff d8 	st.b	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a96:	fc 19 c0 00 	movh	r9,0xc000
80004a9a:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80004a9e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004aa0:	fc 19 c0 20 	movh	r9,0xc020
80004aa4:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80004aa8:	b2 08       	st.h	r9[0x0],r8
80004aaa:	32 68       	mov	r8,38
80004aac:	ef 68 ff db 	st.b	r7[-37],r8
80004ab0:	32 c8       	mov	r8,44
80004ab2:	ef 68 ff da 	st.b	r7[-38],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004ab6:	fc 19 c0 00 	movh	r9,0xc000
80004aba:	ef 38 ff db 	ld.ub	r8,r7[-37]
80004abe:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004ac0:	fc 19 c0 20 	movh	r9,0xc020
80004ac4:	ef 38 ff da 	ld.ub	r8,r7[-38]
80004ac8:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D0) );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  cpu_delay_ms( 40, tft_data.cpu_hz );
80004aca:	4d a8       	lddpc	r8,80004c30 <et024006_PowerOn+0x308>
80004acc:	70 08       	ld.w	r8,r8[0x0]
80004ace:	32 89       	mov	r9,40
80004ad0:	ef 49 ff e0 	st.w	r7[-32],r9
80004ad4:	ef 48 ff dc 	st.w	r7[-36],r8
80004ad8:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004adc:	ef 48 ff e8 	st.w	r7[-24],r8
80004ae0:	ee f8 ff dc 	ld.w	r8,r7[-36]
80004ae4:	ef 48 ff e4 	st.w	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004ae8:	ee f0 ff e8 	ld.w	r0,r7[-24]
80004aec:	30 01       	mov	r1,0
80004aee:	ee f2 ff e4 	ld.w	r2,r7[-28]
80004af2:	30 03       	mov	r3,0
80004af4:	e2 02 02 4a 	mul	r10,r1,r2
80004af8:	e6 00 02 48 	mul	r8,r3,r0
80004afc:	10 0a       	add	r10,r8
80004afe:	e0 02 06 48 	mulu.d	r8,r0,r2
80004b02:	12 0a       	add	r10,r9
80004b04:	14 99       	mov	r9,r10
80004b06:	e0 6a 03 e7 	mov	r10,999
80004b0a:	30 0b       	mov	r11,0
80004b0c:	f0 0a 00 0a 	add	r10,r8,r10
80004b10:	f2 0b 00 4b 	adc	r11,r9,r11
80004b14:	e0 68 03 e8 	mov	r8,1000
80004b18:	30 09       	mov	r9,0
80004b1a:	f0 1f 00 47 	mcall	80004c34 <et024006_PowerOn+0x30c>
80004b1e:	14 98       	mov	r8,r10
80004b20:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004b22:	ef 48 ff f0 	st.w	r7[-16],r8
80004b26:	ee c8 00 58 	sub	r8,r7,88
80004b2a:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004b2e:	e1 b8 00 42 	mfsr	r8,0x108
80004b32:	10 99       	mov	r9,r8
80004b34:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004b38:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004b3a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004b3e:	70 09       	ld.w	r9,r8[0x0]
80004b40:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004b44:	10 09       	add	r9,r8
80004b46:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004b4a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004b4c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004b50:	30 08       	mov	r8,0
80004b52:	f3 68 00 08 	st.b	r9[8],r8
80004b56:	ee c8 00 58 	sub	r8,r7,88
80004b5a:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004b5e:	e1 b8 00 42 	mfsr	r8,0x108
80004b62:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004b66:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b6a:	f1 39 00 08 	ld.ub	r9,r8[8]
80004b6e:	30 28       	mov	r8,2
80004b70:	f0 09 18 00 	cp.b	r9,r8
80004b74:	c0 31       	brne	80004b7a <et024006_PowerOn+0x252>
    return false;
80004b76:	30 08       	mov	r8,0
80004b78:	c4 38       	rjmp	80004bfe <et024006_PowerOn+0x2d6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004b7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b7e:	f1 39 00 08 	ld.ub	r9,r8[8]
80004b82:	30 18       	mov	r8,1
80004b84:	f0 09 18 00 	cp.b	r9,r8
80004b88:	c0 31       	brne	80004b8e <et024006_PowerOn+0x266>
    return true;
80004b8a:	30 18       	mov	r8,1
80004b8c:	c3 98       	rjmp	80004bfe <et024006_PowerOn+0x2d6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004b8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b92:	70 09       	ld.w	r9,r8[0x0]
80004b94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b98:	70 18       	ld.w	r8,r8[0x4]
80004b9a:	10 39       	cp.w	r9,r8
80004b9c:	e0 88 00 1a 	brls	80004bd0 <et024006_PowerOn+0x2a8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004ba0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ba4:	70 08       	ld.w	r8,r8[0x0]
80004ba6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004baa:	10 39       	cp.w	r9,r8
80004bac:	c1 02       	brcc	80004bcc <et024006_PowerOn+0x2a4>
80004bae:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bb2:	70 18       	ld.w	r8,r8[0x4]
80004bb4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004bb8:	10 39       	cp.w	r9,r8
80004bba:	e0 88 00 09 	brls	80004bcc <et024006_PowerOn+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004bbe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004bc2:	30 18       	mov	r8,1
80004bc4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004bc8:	30 18       	mov	r8,1
80004bca:	c1 a8       	rjmp	80004bfe <et024006_PowerOn+0x2d6>
    }
    return false;
80004bcc:	30 08       	mov	r8,0
80004bce:	c1 88       	rjmp	80004bfe <et024006_PowerOn+0x2d6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004bd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bd4:	70 08       	ld.w	r8,r8[0x0]
80004bd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004bda:	10 39       	cp.w	r9,r8
80004bdc:	c0 93       	brcs	80004bee <et024006_PowerOn+0x2c6>
80004bde:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004be2:	70 18       	ld.w	r8,r8[0x4]
80004be4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004be8:	10 39       	cp.w	r9,r8
80004bea:	e0 88 00 09 	brls	80004bfc <et024006_PowerOn+0x2d4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004bee:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004bf2:	30 18       	mov	r8,1
80004bf4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004bf8:	30 18       	mov	r8,1
80004bfa:	c0 28       	rjmp	80004bfe <et024006_PowerOn+0x2d6>
    }
    return false;
80004bfc:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004bfe:	58 08       	cp.w	r8,0
80004c00:	ca b0       	breq	80004b56 <et024006_PowerOn+0x22e>
80004c02:	32 68       	mov	r8,38
80004c04:	ef 68 ff ff 	st.b	r7[-1],r8
80004c08:	33 c8       	mov	r8,60
80004c0a:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004c0e:	fc 19 c0 00 	movh	r9,0xc000
80004c12:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004c16:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004c18:	fc 19 c0 20 	movh	r9,0xc020
80004c1c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004c20:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON)| (1 << HIMAX_DTE) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  et024006_SetRegister( HIMAX_INTERNAL28, (1 << HIMAX_TEON) );
80004c22:	30 8b       	mov	r11,8
80004c24:	37 0c       	mov	r12,112
80004c26:	f0 1f 00 05 	mcall	80004c38 <et024006_PowerOn+0x310>
}
80004c2a:	2e 7d       	sub	sp,-100
80004c2c:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80004c30:	00 00       	add	r0,r0
80004c32:	04 b8       	st.h	r2++,r8
80004c34:	80 00       	ld.sh	r0,r0[0x0]
80004c36:	ce ac       	rcall	80004e0a <sd_mmc_mci_get_csd+0xea>
80004c38:	80 00       	ld.sh	r0,r0[0x0]
80004c3a:	36 3c       	mov	r12,99
80004c3c:	20 44       	sub	r4,4
80004c3e:	65 63       	ld.w	r3,r2[0x58]
80004c40:	69 70       	ld.w	r0,r4[0x5c]
80004c42:	68 65       	ld.w	r5,r4[0x18]
80004c44:	72 65       	ld.w	r5,r9[0x18]
80004c46:	64 20       	ld.w	r0,r2[0x8]
80004c48:	00 00       	add	r0,r0
80004c4a:	00 00       	add	r0,r0
80004c4c:	20 73       	sub	r3,7
80004c4e:	65 63       	ld.w	r3,r2[0x58]
80004c50:	74 6f       	ld.w	pc,r10[0x18]
80004c52:	72 73       	ld.w	r3,r9[0x1c]
80004c54:	00 00       	add	r0,r0
80004c56:	00 00       	add	r0,r0
80004c58:	20 45       	sub	r5,4
80004c5a:	6e 63       	ld.w	r3,r7[0x18]
80004c5c:	69 70       	ld.w	r0,r4[0x5c]
80004c5e:	68 65       	ld.w	r5,r4[0x18]
80004c60:	72 65       	ld.w	r5,r9[0x18]
80004c62:	64 20       	ld.w	r0,r2[0x8]
80004c64:	00 00       	add	r0,r0
	...

80004c68 <is_sd_mmc_mci_card_present>:


//_____ D E F I N I T I O N S ______________________________________________

bool is_sd_mmc_mci_card_present(uint8_t slot)
{
80004c68:	eb cd 40 80 	pushm	r7,lr
80004c6c:	1a 97       	mov	r7,sp
80004c6e:	20 1d       	sub	sp,4
80004c70:	18 98       	mov	r8,r12
80004c72:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80004c76:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004c7a:	30 18       	mov	r8,1
80004c7c:	f0 09 18 00 	cp.b	r9,r8
80004c80:	e0 88 00 04 	brls	80004c88 <is_sd_mmc_mci_card_present+0x20>
    return false;
80004c84:	30 08       	mov	r8,0
80004c86:	c1 88       	rjmp	80004cb6 <is_sd_mmc_mci_card_present+0x4e>

  switch(slot)
80004c88:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004c8c:	58 08       	cp.w	r8,0
80004c8e:	c0 b0       	breq	80004ca4 <is_sd_mmc_mci_card_present+0x3c>
80004c90:	58 18       	cp.w	r8,1
80004c92:	c1 11       	brne	80004cb4 <is_sd_mmc_mci_card_present+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_CARD_DETECT)==SD_SLOT_4BITS_CARD_DETECT_VALUE);
80004c94:	32 8c       	mov	r12,40
80004c96:	f0 1f 00 0b 	mcall	80004cc0 <is_sd_mmc_mci_card_present+0x58>
80004c9a:	18 98       	mov	r8,r12
80004c9c:	58 08       	cp.w	r8,0
80004c9e:	5f 08       	sreq	r8
80004ca0:	5c 58       	castu.b	r8
80004ca2:	c0 a8       	rjmp	80004cb6 <is_sd_mmc_mci_card_present+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_CARD_DETECT)==SD_SLOT_8BITS_CARD_DETECT_VALUE);
80004ca4:	32 bc       	mov	r12,43
80004ca6:	f0 1f 00 07 	mcall	80004cc0 <is_sd_mmc_mci_card_present+0x58>
80004caa:	18 98       	mov	r8,r12
80004cac:	58 08       	cp.w	r8,0
80004cae:	5f 08       	sreq	r8
80004cb0:	5c 58       	castu.b	r8
80004cb2:	c0 28       	rjmp	80004cb6 <is_sd_mmc_mci_card_present+0x4e>
  }

  return false;
80004cb4:	30 08       	mov	r8,0
}
80004cb6:	10 9c       	mov	r12,r8
80004cb8:	2f fd       	sub	sp,-4
80004cba:	e3 cd 80 80 	ldm	sp++,r7,pc
80004cbe:	00 00       	add	r0,r0
80004cc0:	80 00       	ld.sh	r0,r0[0x0]
80004cc2:	77 10       	ld.w	r0,r11[0x44]

80004cc4 <is_sd_mmc_mci_card_protected>:

bool is_sd_mmc_mci_card_protected(uint8_t slot)
{
80004cc4:	eb cd 40 80 	pushm	r7,lr
80004cc8:	1a 97       	mov	r7,sp
80004cca:	20 1d       	sub	sp,4
80004ccc:	18 98       	mov	r8,r12
80004cce:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80004cd2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004cd6:	30 18       	mov	r8,1
80004cd8:	f0 09 18 00 	cp.b	r9,r8
80004cdc:	e0 88 00 04 	brls	80004ce4 <is_sd_mmc_mci_card_protected+0x20>
    return false;
80004ce0:	30 08       	mov	r8,0
80004ce2:	c1 88       	rjmp	80004d12 <is_sd_mmc_mci_card_protected+0x4e>

  switch(slot)
80004ce4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004ce8:	58 08       	cp.w	r8,0
80004cea:	c0 b0       	breq	80004d00 <is_sd_mmc_mci_card_protected+0x3c>
80004cec:	58 18       	cp.w	r8,1
80004cee:	c1 11       	brne	80004d10 <is_sd_mmc_mci_card_protected+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_WRITE_PROTECT)==SD_SLOT_4BITS_WRITE_PROTECT_VALUE);
80004cf0:	32 6c       	mov	r12,38
80004cf2:	f0 1f 00 0b 	mcall	80004d1c <is_sd_mmc_mci_card_protected+0x58>
80004cf6:	18 98       	mov	r8,r12
80004cf8:	58 18       	cp.w	r8,1
80004cfa:	5f 08       	sreq	r8
80004cfc:	5c 58       	castu.b	r8
80004cfe:	c0 a8       	rjmp	80004d12 <is_sd_mmc_mci_card_protected+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_WRITE_PROTECT)==SD_SLOT_8BITS_WRITE_PROTECT_VALUE);
80004d00:	36 cc       	mov	r12,108
80004d02:	f0 1f 00 07 	mcall	80004d1c <is_sd_mmc_mci_card_protected+0x58>
80004d06:	18 98       	mov	r8,r12
80004d08:	58 18       	cp.w	r8,1
80004d0a:	5f 08       	sreq	r8
80004d0c:	5c 58       	castu.b	r8
80004d0e:	c0 28       	rjmp	80004d12 <is_sd_mmc_mci_card_protected+0x4e>
  }

  return false;
80004d10:	30 08       	mov	r8,0
}
80004d12:	10 9c       	mov	r12,r8
80004d14:	2f fd       	sub	sp,-4
80004d16:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d1a:	00 00       	add	r0,r0
80004d1c:	80 00       	ld.sh	r0,r0[0x0]
80004d1e:	77 10       	ld.w	r0,r11[0x44]

80004d20 <sd_mmc_mci_get_csd>:

static bool  sd_mmc_mci_get_csd(uint8_t slot)
{
80004d20:	eb cd 40 80 	pushm	r7,lr
80004d24:	1a 97       	mov	r7,sp
80004d26:	20 fd       	sub	sp,60
80004d28:	18 98       	mov	r8,r12
80004d2a:	ef 68 ff c4 	st.b	r7[-60],r8

  uint32_t max_Read_DataBlock_Length;
  uint32_t mult;
  uint32_t blocknr;
  uint8_t tmp;
  const uint16_t freq_unit[4] = {10, 100, 1000, 10000};
80004d2e:	fe f9 02 b2 	ld.w	r9,pc[690]
80004d32:	ee c8 00 28 	sub	r8,r7,40
80004d36:	30 8a       	mov	r10,8
80004d38:	12 9b       	mov	r11,r9
80004d3a:	10 9c       	mov	r12,r8
80004d3c:	f0 1f 00 aa 	mcall	80004fe4 <sd_mmc_mci_get_csd+0x2c4>
  const uint8_t mult_fact[16] = {0, 10, 12, 13, 15, 20, 26, 30, 35, 40, 45, 52, 55, 60, 70, 80}; // MMC tabs...
80004d40:	fe f8 02 a8 	ld.w	r8,pc[680]
80004d44:	ee ca 00 38 	sub	r10,r7,56
80004d48:	10 9b       	mov	r11,r8
80004d4a:	f6 e8 00 00 	ld.d	r8,r11[0]
80004d4e:	f4 e9 00 00 	st.d	r10[0],r8
80004d52:	f6 e8 00 08 	ld.d	r8,r11[8]
80004d56:	f4 e9 00 08 	st.d	r10[8],r8

  if (slot > MCI_LAST_SLOTS)
80004d5a:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004d5e:	30 18       	mov	r8,1
80004d60:	f0 09 18 00 	cp.b	r9,r8
80004d64:	e0 88 00 04 	brls	80004d6c <sd_mmc_mci_get_csd+0x4c>
    return false;
80004d68:	30 08       	mov	r8,0
80004d6a:	c3 69       	rjmp	80004fd6 <sd_mmc_mci_get_csd+0x2b6>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80004d6c:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80004d70:	fe f9 02 7c 	ld.w	r9,pc[636]
80004d74:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004d78:	10 9a       	mov	r10,r8
80004d7a:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004d7e:	fe f8 02 72 	ld.w	r8,pc[626]
80004d82:	70 08       	ld.w	r8,r8[0x0]
80004d84:	12 9b       	mov	r11,r9
80004d86:	10 9c       	mov	r12,r8
80004d88:	f0 1f 00 9b 	mcall	80004ff4 <sd_mmc_mci_get_csd+0x2d4>

  //-- (CMD9)
  if (mci_send_cmd(mci, SD_MMC_SEND_CSD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80004d8c:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004d90:	fe f8 02 68 	ld.w	r8,pc[616]
80004d94:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004d98:	fe f8 02 58 	ld.w	r8,pc[600]
80004d9c:	70 08       	ld.w	r8,r8[0x0]
80004d9e:	12 9a       	mov	r10,r9
80004da0:	e0 6b 10 89 	mov	r11,4233
80004da4:	10 9c       	mov	r12,r8
80004da6:	f0 1f 00 96 	mcall	80004ffc <sd_mmc_mci_get_csd+0x2dc>
80004daa:	18 98       	mov	r8,r12
80004dac:	58 08       	cp.w	r8,0
80004dae:	c0 30       	breq	80004db4 <sd_mmc_mci_get_csd+0x94>
    return false;
80004db0:	30 08       	mov	r8,0
80004db2:	c1 29       	rjmp	80004fd6 <sd_mmc_mci_get_csd+0x2b6>


  csd.csd[0] = mci_read_response(mci);
80004db4:	fe f8 02 3c 	ld.w	r8,pc[572]
80004db8:	70 08       	ld.w	r8,r8[0x0]
80004dba:	10 9c       	mov	r12,r8
80004dbc:	f0 1f 00 91 	mcall	80005000 <sd_mmc_mci_get_csd+0x2e0>
80004dc0:	18 98       	mov	r8,r12
80004dc2:	ef 48 ff e0 	st.w	r7[-32],r8
  csd.csd[1] = mci_read_response(mci);
80004dc6:	fe f8 02 2a 	ld.w	r8,pc[554]
80004dca:	70 08       	ld.w	r8,r8[0x0]
80004dcc:	10 9c       	mov	r12,r8
80004dce:	f0 1f 00 8d 	mcall	80005000 <sd_mmc_mci_get_csd+0x2e0>
80004dd2:	18 98       	mov	r8,r12
80004dd4:	ef 48 ff e4 	st.w	r7[-28],r8
  csd.csd[2] = mci_read_response(mci);
80004dd8:	fe f8 02 18 	ld.w	r8,pc[536]
80004ddc:	70 08       	ld.w	r8,r8[0x0]
80004dde:	10 9c       	mov	r12,r8
80004de0:	f0 1f 00 88 	mcall	80005000 <sd_mmc_mci_get_csd+0x2e0>
80004de4:	18 98       	mov	r8,r12
80004de6:	ef 48 ff e8 	st.w	r7[-24],r8
  csd.csd[3] = mci_read_response(mci);
80004dea:	fe f8 02 06 	ld.w	r8,pc[518]
80004dee:	70 08       	ld.w	r8,r8[0x0]
80004df0:	10 9c       	mov	r12,r8
80004df2:	f0 1f 00 84 	mcall	80005000 <sd_mmc_mci_get_csd+0x2e0>
80004df6:	18 98       	mov	r8,r12
80004df8:	ef 48 ff ec 	st.w	r7[-20],r8

  //-- Read "System specification version", only available on MMC card
  // field: SPEC_VERS (only on MMC)
  if (MMC_CARD & g_card_type[slot]) // TO BE ADDED
80004dfc:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80004e00:	fe f9 02 04 	ld.w	r9,pc[516]
80004e04:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004e08:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004e0c:	5c 58       	castu.b	r8
80004e0e:	c1 40       	breq	80004e36 <sd_mmc_mci_get_csd+0x116>
  {
    if (CSD_SPEC_VER_4_0 == (MSB0(csd.csd[0]) & CSD_MSK_SPEC_VER))
80004e10:	ee c8 00 20 	sub	r8,r7,32
80004e14:	11 88       	ld.ub	r8,r8[0x0]
80004e16:	e2 18 00 3c 	andl	r8,0x3c,COH
80004e1a:	59 08       	cp.w	r8,16
80004e1c:	c0 d1       	brne	80004e36 <sd_mmc_mci_get_csd+0x116>
    {
      g_card_type[slot] |= MMC_CARD_V4;
80004e1e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004e22:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80004e26:	4f 8a       	lddpc	r10,80005004 <sd_mmc_mci_get_csd+0x2e4>
80004e28:	f4 08 07 08 	ld.ub	r8,r10[r8]
80004e2c:	a3 a8       	sbr	r8,0x2
80004e2e:	5c 58       	castu.b	r8
80004e30:	4f 5a       	lddpc	r10,80005004 <sd_mmc_mci_get_csd+0x2e4>
80004e32:	f4 09 0b 08 	st.b	r10[r9],r8
    }
  }

  //-- Compute MMC/SD speed
  // field: TRAN_SPEED (CSD V1 & V2 are the same)
  g_card_freq[slot]  = mult_fact[csd.csd_v1.tranSpeed >> 3]; // Get Multiplier factor
80004e36:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80004e3a:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80004e3e:	a3 98       	lsr	r8,0x3
80004e40:	5c 58       	castu.b	r8
80004e42:	ee 08 00 08 	add	r8,r7,r8
80004e46:	f1 38 ff c8 	ld.ub	r8,r8[-56]
80004e4a:	4f 09       	lddpc	r9,80005008 <sd_mmc_mci_get_csd+0x2e8>
80004e4c:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  if (SD_CARD & g_card_type[slot])
80004e50:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80004e54:	4e c9       	lddpc	r9,80005004 <sd_mmc_mci_get_csd+0x2e4>
80004e56:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004e5a:	e2 18 00 02 	andl	r8,0x2,COH
80004e5e:	c2 00       	breq	80004e9e <sd_mmc_mci_get_csd+0x17e>
  {
    // SD card don't have same frequency that MMC card
    if( 26 == g_card_freq[slot] )
80004e60:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004e64:	4e 98       	lddpc	r8,80005008 <sd_mmc_mci_get_csd+0x2e8>
80004e66:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80004e6a:	31 a8       	mov	r8,26
80004e6c:	f0 09 19 00 	cp.h	r9,r8
80004e70:	c0 81       	brne	80004e80 <sd_mmc_mci_get_csd+0x160>
    {
      g_card_freq[slot] = 25;
80004e72:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80004e76:	4e 59       	lddpc	r9,80005008 <sd_mmc_mci_get_csd+0x2e8>
80004e78:	31 98       	mov	r8,25
80004e7a:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
80004e7e:	c1 08       	rjmp	80004e9e <sd_mmc_mci_get_csd+0x17e>
    }
    else if( 52 == g_card_freq[slot] )
80004e80:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004e84:	4e 18       	lddpc	r8,80005008 <sd_mmc_mci_get_csd+0x2e8>
80004e86:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80004e8a:	33 48       	mov	r8,52
80004e8c:	f0 09 19 00 	cp.h	r9,r8
80004e90:	c0 71       	brne	80004e9e <sd_mmc_mci_get_csd+0x17e>
    {
      g_card_freq[slot] = 50;
80004e92:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80004e96:	4d d9       	lddpc	r9,80005008 <sd_mmc_mci_get_csd+0x2e8>
80004e98:	33 28       	mov	r8,50
80004e9a:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
    }
  }
  g_card_freq[slot] *= freq_unit[ csd.csd_v1.tranSpeed&0x07 ]; // Get transfer rate unit
80004e9e:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80004ea2:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004ea6:	4d 98       	lddpc	r8,80005008 <sd_mmc_mci_get_csd+0x2e8>
80004ea8:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80004eac:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80004eb0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004eb4:	a1 78       	lsl	r8,0x1
80004eb6:	ee 08 00 08 	add	r8,r7,r8
80004eba:	f1 08 ff d8 	ld.sh	r8,r8[-40]
80004ebe:	f2 08 02 48 	mul	r8,r9,r8
80004ec2:	5c 88       	casts.h	r8
80004ec4:	4d 19       	lddpc	r9,80005008 <sd_mmc_mci_get_csd+0x2e8>
80004ec6:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

  //-- Compute card size in number of block
  // field: WRITE_BL_LEN, READ_BL_LEN, C_SIZE (CSD V1 & V2 are not the same)
  if (SD_CARD_HC & g_card_type[slot])
80004eca:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80004ece:	4c e9       	lddpc	r9,80005004 <sd_mmc_mci_get_csd+0x2e4>
80004ed0:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004ed4:	e2 18 00 10 	andl	r8,0x10,COH
80004ed8:	c2 10       	breq	80004f1a <sd_mmc_mci_get_csd+0x1fa>
  {
    g_card_size[slot] = (csd.csd_v2.deviceSizeH<<16)+(csd.csd_v2.deviceSizeL&0xFFff);
80004eda:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004ede:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004ee2:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80004ee6:	5c 58       	castu.b	r8
80004ee8:	f0 0a 15 10 	lsl	r10,r8,0x10
80004eec:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80004ef0:	5c 78       	castu.h	r8
80004ef2:	f4 08 00 08 	add	r8,r10,r8
80004ef6:	10 9a       	mov	r10,r8
80004ef8:	4c 58       	lddpc	r8,8000500c <sd_mmc_mci_get_csd+0x2ec>
80004efa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

    // memory capacity = (C_SIZE+1) * 1K sector
    g_card_size[slot] = (g_card_size[slot] + 1) << 10;  // unit 512B
80004efe:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004f02:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80004f06:	4c 28       	lddpc	r8,8000500c <sd_mmc_mci_get_csd+0x2ec>
80004f08:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80004f0c:	2f f8       	sub	r8,-1
80004f0e:	f0 0a 15 0a 	lsl	r10,r8,0xa
80004f12:	4b f8       	lddpc	r8,8000500c <sd_mmc_mci_get_csd+0x2ec>
80004f14:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004f18:	c5 e8       	rjmp	80004fd4 <sd_mmc_mci_get_csd+0x2b4>
  }
  else
  {
    // Check block size
    tmp = csd.csd_v1.writeBlLen; // WRITE_BL_LEN
80004f1a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004f1e:	f1 d8 c2 c4 	bfextu	r8,r8,0x16,0x4
80004f22:	5c 58       	castu.b	r8
80004f24:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
80004f28:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f2c:	30 88       	mov	r8,8
80004f2e:	f0 09 18 00 	cp.b	r9,r8
80004f32:	e0 8b 00 04 	brhi	80004f3a <sd_mmc_mci_get_csd+0x21a>
      return false;  // block size < 512B not supported by firmware
80004f36:	30 08       	mov	r8,0
80004f38:	c4 f8       	rjmp	80004fd6 <sd_mmc_mci_get_csd+0x2b6>

    tmp = csd.csd_v1.readBlLen; // READ_BL_LEN
80004f3a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004f3e:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
80004f42:	5c 58       	castu.b	r8
80004f44:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
80004f48:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f4c:	30 88       	mov	r8,8
80004f4e:	f0 09 18 00 	cp.b	r9,r8
80004f52:	e0 8b 00 04 	brhi	80004f5a <sd_mmc_mci_get_csd+0x23a>
      return false;  // block size < 512B not supported by firmware
80004f56:	30 08       	mov	r8,0
80004f58:	c3 f8       	rjmp	80004fd6 <sd_mmc_mci_get_csd+0x2b6>

    //// Compute Memory Capacity
    // compute MULT
    mult = 1 << (csd.csd_v1.cSizeMult + 2);
80004f5a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004f5e:	f1 d8 c1 e3 	bfextu	r8,r8,0xf,0x3
80004f62:	5c 58       	castu.b	r8
80004f64:	2f e8       	sub	r8,-2
80004f66:	30 19       	mov	r9,1
80004f68:	f2 08 09 48 	lsl	r8,r9,r8
80004f6c:	ef 48 ff f4 	st.w	r7[-12],r8
    max_Read_DataBlock_Length = 1<<csd.csd_v1.readBlLen;
80004f70:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004f74:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
80004f78:	5c 58       	castu.b	r8
80004f7a:	30 19       	mov	r9,1
80004f7c:	f2 08 09 48 	lsl	r8,r9,r8
80004f80:	ef 48 ff f0 	st.w	r7[-16],r8
    // compute MSB of C_SIZE
    blocknr = csd.csd_v1.deviceSizeH << 2;
80004f84:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004f88:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80004f8c:	5c 88       	casts.h	r8
80004f8e:	5c 78       	castu.h	r8
80004f90:	a3 68       	lsl	r8,0x2
80004f92:	ef 48 ff f8 	st.w	r7[-8],r8
    // compute MULT * (LSB of C-SIZE + MSB already computed + 1) = BLOCKNR
    blocknr = mult * ( blocknr + csd.csd_v1.deviceSizeL + 1 );
80004f96:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004f9a:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
80004f9e:	5c 58       	castu.b	r8
80004fa0:	10 99       	mov	r9,r8
80004fa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fa6:	f2 08 00 08 	add	r8,r9,r8
80004faa:	f0 c9 ff ff 	sub	r9,r8,-1
80004fae:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004fb2:	f2 08 02 48 	mul	r8,r9,r8
80004fb6:	ef 48 ff f8 	st.w	r7[-8],r8
    g_card_size[slot] = ((max_Read_DataBlock_Length * blocknr)/512);
80004fba:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004fbe:	ee fa ff f0 	ld.w	r10,r7[-16]
80004fc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fc6:	f4 08 02 48 	mul	r8,r10,r8
80004fca:	f0 0a 16 09 	lsr	r10,r8,0x9
80004fce:	49 08       	lddpc	r8,8000500c <sd_mmc_mci_get_csd+0x2ec>
80004fd0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  }

  return true;
80004fd4:	30 18       	mov	r8,1
}
80004fd6:	10 9c       	mov	r12,r8
80004fd8:	2f 1d       	sub	sp,-60
80004fda:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fde:	00 00       	add	r0,r0
80004fe0:	80 00       	ld.sh	r0,r0[0x0]
80004fe2:	da bc       	*unknown*
80004fe4:	80 00       	ld.sh	r0,r0[0x0]
80004fe6:	d1 3e       	*unknown*
80004fe8:	80 00       	ld.sh	r0,r0[0x0]
80004fea:	da c4       	*unknown*
80004fec:	00 00       	add	r0,r0
80004fee:	09 bc       	ld.ub	r12,r4[0x3]
80004ff0:	00 00       	add	r0,r0
80004ff2:	00 14       	sub	r4,r0
80004ff4:	80 00       	ld.sh	r0,r0[0x0]
80004ff6:	7e 7c       	ld.w	r12,pc[0x1c]
80004ff8:	00 00       	add	r0,r0
80004ffa:	07 ac       	ld.ub	r12,r3[0x2]
80004ffc:	80 00       	ld.sh	r0,r0[0x0]
80004ffe:	7c e4       	ld.w	r4,lr[0x38]
80005000:	80 00       	ld.sh	r0,r0[0x0]
80005002:	7e 1c       	ld.w	r12,pc[0x4]
80005004:	00 00       	add	r0,r0
80005006:	0b c4       	ld.ub	r4,r5[0x4]
80005008:	00 00       	add	r0,r0
8000500a:	09 be       	ld.ub	lr,r4[0x3]
8000500c:	00 00       	add	r0,r0
8000500e:	07 b4       	ld.ub	r4,r3[0x3]

80005010 <sd_mmc_get_ext_csd>:

static bool  sd_mmc_get_ext_csd( uint8_t slot )
{
80005010:	eb cd 40 80 	pushm	r7,lr
80005014:	1a 97       	mov	r7,sp
80005016:	20 ad       	sub	sp,40
80005018:	18 98       	mov	r8,r12
8000501a:	ef 68 ff d8 	st.b	r7[-40],r8
  uint8_t  i;
  uint32_t val;

  if (slot > MCI_LAST_SLOTS)
8000501e:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80005022:	30 18       	mov	r8,1
80005024:	f0 09 18 00 	cp.b	r9,r8
80005028:	e0 88 00 04 	brls	80005030 <sd_mmc_get_ext_csd+0x20>
    return false;
8000502c:	30 08       	mov	r8,0
8000502e:	cb e8       	rjmp	800051aa <sd_mmc_get_ext_csd+0x19a>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80005030:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80005034:	4e 09       	lddpc	r9,800051b4 <sd_mmc_get_ext_csd+0x1a4>
80005036:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000503a:	10 9a       	mov	r10,r8
8000503c:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80005040:	4d e8       	lddpc	r8,800051b8 <sd_mmc_get_ext_csd+0x1a8>
80005042:	70 08       	ld.w	r8,r8[0x0]
80005044:	12 9b       	mov	r11,r9
80005046:	10 9c       	mov	r12,r8
80005048:	f0 1f 00 5d 	mcall	800051bc <sd_mmc_get_ext_csd+0x1ac>

  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE); // Ext CSD = 512B size
8000504c:	4d b8       	lddpc	r8,800051b8 <sd_mmc_get_ext_csd+0x1a8>
8000504e:	70 08       	ld.w	r8,r8[0x0]
80005050:	e0 6b 02 00 	mov	r11,512
80005054:	10 9c       	mov	r12,r8
80005056:	f0 1f 00 5b 	mcall	800051c0 <sd_mmc_get_ext_csd+0x1b0>
  mci_set_block_count(mci, 1);
8000505a:	4d 88       	lddpc	r8,800051b8 <sd_mmc_get_ext_csd+0x1a8>
8000505c:	70 08       	ld.w	r8,r8[0x0]
8000505e:	30 1b       	mov	r11,1
80005060:	10 9c       	mov	r12,r8
80005062:	f0 1f 00 59 	mcall	800051c4 <sd_mmc_get_ext_csd+0x1b4>

  //** (CMD8)
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
80005066:	4d 58       	lddpc	r8,800051b8 <sd_mmc_get_ext_csd+0x1a8>
80005068:	70 08       	ld.w	r8,r8[0x0]
8000506a:	30 0a       	mov	r10,0
8000506c:	e4 7b 10 48 	mov	r11,331848
80005070:	10 9c       	mov	r12,r8
80005072:	f0 1f 00 56 	mcall	800051c8 <sd_mmc_get_ext_csd+0x1b8>
80005076:	18 98       	mov	r8,r12
80005078:	58 08       	cp.w	r8,0
8000507a:	c0 30       	breq	80005080 <sd_mmc_get_ext_csd+0x70>
    return false;
8000507c:	30 08       	mov	r8,0
8000507e:	c9 68       	rjmp	800051aa <sd_mmc_get_ext_csd+0x19a>

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
80005080:	34 08       	mov	r8,64
80005082:	ef 68 ff e3 	st.b	r7[-29],r8
80005086:	c8 a8       	rjmp	8000519a <sd_mmc_get_ext_csd+0x18a>
  {
    while(!(mci_rx_ready(mci)));
80005088:	4c c8       	lddpc	r8,800051b8 <sd_mmc_get_ext_csd+0x1a8>
8000508a:	70 08       	ld.w	r8,r8[0x0]
8000508c:	ef 48 ff e4 	st.w	r7[-28],r8
80005090:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005094:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80005098:	4c d8       	lddpc	r8,800051cc <sd_mmc_get_ext_csd+0x1bc>
8000509a:	70 08       	ld.w	r8,r8[0x0]
8000509c:	10 99       	mov	r9,r8
8000509e:	e6 19 01 e0 	andh	r9,0x1e0,COH
800050a2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800050a6:	71 08       	ld.w	r8,r8[0x40]
800050a8:	f3 e8 10 08 	or	r8,r9,r8
800050ac:	10 99       	mov	r9,r8
800050ae:	4c 88       	lddpc	r8,800051cc <sd_mmc_get_ext_csd+0x1bc>
800050b0:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800050b2:	4c 78       	lddpc	r8,800051cc <sd_mmc_get_ext_csd+0x1bc>
800050b4:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
800050b6:	e2 18 00 02 	andl	r8,0x2,COH
800050ba:	5f 18       	srne	r8
800050bc:	58 08       	cp.w	r8,0
800050be:	ce 50       	breq	80005088 <sd_mmc_get_ext_csd+0x78>
    mci_rd_data(mci);
800050c0:	4b e8       	lddpc	r8,800051b8 <sd_mmc_get_ext_csd+0x1a8>
800050c2:	70 08       	ld.w	r8,r8[0x0]
800050c4:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
800050c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800050cc:	70 c8       	ld.w	r8,r8[0x30]
    while(!(mci_rx_ready(mci)));
800050ce:	4b b8       	lddpc	r8,800051b8 <sd_mmc_get_ext_csd+0x1a8>
800050d0:	70 08       	ld.w	r8,r8[0x0]
800050d2:	ef 48 ff f0 	st.w	r7[-16],r8
800050d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050da:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800050de:	4b c8       	lddpc	r8,800051cc <sd_mmc_get_ext_csd+0x1bc>
800050e0:	70 08       	ld.w	r8,r8[0x0]
800050e2:	10 99       	mov	r9,r8
800050e4:	e6 19 01 e0 	andh	r9,0x1e0,COH
800050e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800050ec:	71 08       	ld.w	r8,r8[0x40]
800050ee:	f3 e8 10 08 	or	r8,r9,r8
800050f2:	10 99       	mov	r9,r8
800050f4:	4b 68       	lddpc	r8,800051cc <sd_mmc_get_ext_csd+0x1bc>
800050f6:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800050f8:	4b 58       	lddpc	r8,800051cc <sd_mmc_get_ext_csd+0x1bc>
800050fa:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
800050fc:	e2 18 00 02 	andl	r8,0x2,COH
80005100:	5f 18       	srne	r8
80005102:	58 08       	cp.w	r8,0
80005104:	ce 50       	breq	800050ce <sd_mmc_get_ext_csd+0xbe>
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
80005106:	ef 39 ff e3 	ld.ub	r9,r7[-29]
8000510a:	32 68       	mov	r8,38
8000510c:	f0 09 18 00 	cp.b	r9,r8
80005110:	c1 c1       	brne	80005148 <sd_mmc_get_ext_csd+0x138>
80005112:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80005116:	4a f9       	lddpc	r9,800051d0 <sd_mmc_get_ext_csd+0x1c0>
80005118:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000511c:	e2 18 00 20 	andl	r8,0x20,COH
80005120:	c1 40       	breq	80005148 <sd_mmc_get_ext_csd+0x138>
    {
      // If MMC HC then read Sector Count. Byte 212 is LSB, Byte 215 is MSB.
      val = mci_rd_data(mci);
80005122:	4a 68       	lddpc	r8,800051b8 <sd_mmc_get_ext_csd+0x1a8>
80005124:	70 08       	ld.w	r8,r8[0x0]
80005126:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
8000512a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000512e:	70 c8       	ld.w	r8,r8[0x30]
80005130:	ef 48 ff dc 	st.w	r7[-36],r8
      g_card_size[slot] = swap32(val);
80005134:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80005138:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000513c:	5c b8       	swap.b	r8
8000513e:	10 9a       	mov	r10,r8
80005140:	4a 58       	lddpc	r8,800051d4 <sd_mmc_get_ext_csd+0x1c4>
80005142:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  for (i = (512L/8); i!=0; i--)
  {
    while(!(mci_rx_ready(mci)));
    mci_rd_data(mci);
    while(!(mci_rx_ready(mci)));
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
80005146:	c2 58       	rjmp	80005190 <sd_mmc_get_ext_csd+0x180>
      val = mci_rd_data(mci);
      g_card_size[slot] = swap32(val);
    }
    else
    {
      val = mci_rd_data(mci);
80005148:	49 c8       	lddpc	r8,800051b8 <sd_mmc_get_ext_csd+0x1a8>
8000514a:	70 08       	ld.w	r8,r8[0x0]
8000514c:	ef 48 ff fc 	st.w	r7[-4],r8
80005150:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005154:	70 c8       	ld.w	r8,r8[0x30]
80005156:	ef 48 ff dc 	st.w	r7[-36],r8
      if( (64-24) == i )
8000515a:	ef 39 ff e3 	ld.ub	r9,r7[-29]
8000515e:	32 88       	mov	r8,40
80005160:	f0 09 18 00 	cp.b	r9,r8
80005164:	c1 61       	brne	80005190 <sd_mmc_get_ext_csd+0x180>
      {  // Read byte at offset 196
        if( MSB0(val) & 0x02 )
80005166:	ee c8 00 24 	sub	r8,r7,36
8000516a:	11 88       	ld.ub	r8,r8[0x0]
8000516c:	e2 18 00 02 	andl	r8,0x2,COH
80005170:	c0 90       	breq	80005182 <sd_mmc_get_ext_csd+0x172>
          g_card_freq[slot] = 52*1000;
80005172:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80005176:	49 99       	lddpc	r9,800051d8 <sd_mmc_get_ext_csd+0x1c8>
80005178:	fe 78 cb 20 	mov	r8,-13536
8000517c:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
80005180:	c0 88       	rjmp	80005190 <sd_mmc_get_ext_csd+0x180>
        else
          g_card_freq[slot] = 26*1000;
80005182:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80005186:	49 59       	lddpc	r9,800051d8 <sd_mmc_get_ext_csd+0x1c8>
80005188:	e0 68 65 90 	mov	r8,26000
8000518c:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
    return false;

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
80005190:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80005194:	20 18       	sub	r8,1
80005196:	ef 68 ff e3 	st.b	r7[-29],r8
8000519a:	ef 39 ff e3 	ld.ub	r9,r7[-29]
8000519e:	30 08       	mov	r8,0
800051a0:	f0 09 18 00 	cp.b	r9,r8
800051a4:	fe 91 ff 72 	brne	80005088 <sd_mmc_get_ext_csd+0x78>
          g_card_freq[slot] = 26*1000;
      }
    }
  }

   return true;
800051a8:	30 18       	mov	r8,1
}
800051aa:	10 9c       	mov	r12,r8
800051ac:	2f 6d       	sub	sp,-40
800051ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800051b2:	00 00       	add	r0,r0
800051b4:	00 00       	add	r0,r0
800051b6:	09 bc       	ld.ub	r12,r4[0x3]
800051b8:	00 00       	add	r0,r0
800051ba:	00 14       	sub	r4,r0
800051bc:	80 00       	ld.sh	r0,r0[0x0]
800051be:	7e 7c       	ld.w	r12,pc[0x1c]
800051c0:	80 00       	ld.sh	r0,r0[0x0]
800051c2:	7c 64       	ld.w	r4,lr[0x18]
800051c4:	80 00       	ld.sh	r0,r0[0x0]
800051c6:	7c ae       	ld.w	lr,lr[0x28]
800051c8:	80 00       	ld.sh	r0,r0[0x0]
800051ca:	7c e4       	ld.w	r4,lr[0x38]
800051cc:	00 00       	add	r0,r0
800051ce:	06 58       	eor	r8,r3
800051d0:	00 00       	add	r0,r0
800051d2:	0b c4       	ld.ub	r4,r5[0x4]
800051d4:	00 00       	add	r0,r0
800051d6:	07 b4       	ld.ub	r4,r3[0x3]
800051d8:	00 00       	add	r0,r0
800051da:	09 be       	ld.ub	lr,r4[0x3]

800051dc <sd_mmc_set_block_len>:

static bool  sd_mmc_set_block_len(uint8_t slot, uint16_t length )
{
800051dc:	eb cd 40 80 	pushm	r7,lr
800051e0:	1a 97       	mov	r7,sp
800051e2:	20 2d       	sub	sp,8
800051e4:	18 99       	mov	r9,r12
800051e6:	16 98       	mov	r8,r11
800051e8:	ef 69 ff fc 	st.b	r7[-4],r9
800051ec:	ef 58 ff f8 	st.h	r7[-8],r8
  if (slot > MCI_LAST_SLOTS)
800051f0:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800051f4:	30 18       	mov	r8,1
800051f6:	f0 09 18 00 	cp.b	r9,r8
800051fa:	e0 88 00 04 	brls	80005202 <sd_mmc_set_block_len+0x26>
    return false;
800051fe:	30 08       	mov	r8,0
80005200:	c3 c8       	rjmp	80005278 <sd_mmc_set_block_len+0x9c>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80005202:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005206:	49 f9       	lddpc	r9,80005280 <sd_mmc_set_block_len+0xa4>
80005208:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000520c:	10 9a       	mov	r10,r8
8000520e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80005212:	49 d8       	lddpc	r8,80005284 <sd_mmc_set_block_len+0xa8>
80005214:	70 08       	ld.w	r8,r8[0x0]
80005216:	12 9b       	mov	r11,r9
80005218:	10 9c       	mov	r12,r8
8000521a:	f0 1f 00 1c 	mcall	80005288 <sd_mmc_set_block_len+0xac>

  if(mci_send_cmd(mci, SD_MMC_SET_BLOCKLEN_CMD, length)!=MCI_SUCCESS)
8000521e:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80005222:	49 98       	lddpc	r8,80005284 <sd_mmc_set_block_len+0xa8>
80005224:	70 08       	ld.w	r8,r8[0x0]
80005226:	12 9a       	mov	r10,r9
80005228:	e0 6b 10 50 	mov	r11,4176
8000522c:	10 9c       	mov	r12,r8
8000522e:	f0 1f 00 18 	mcall	8000528c <sd_mmc_set_block_len+0xb0>
80005232:	18 98       	mov	r8,r12
80005234:	58 08       	cp.w	r8,0
80005236:	c0 30       	breq	8000523c <sd_mmc_set_block_len+0x60>
    return false;
80005238:	30 08       	mov	r8,0
8000523a:	c1 f8       	rjmp	80005278 <sd_mmc_set_block_len+0x9c>

  // check response, card must be in TRAN state
  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
8000523c:	49 28       	lddpc	r8,80005284 <sd_mmc_set_block_len+0xa8>
8000523e:	70 08       	ld.w	r8,r8[0x0]
80005240:	10 9c       	mov	r12,r8
80005242:	f0 1f 00 14 	mcall	80005290 <sd_mmc_set_block_len+0xb4>
80005246:	18 98       	mov	r8,r12
80005248:	e4 18 e0 02 	andh	r8,0xe002
8000524c:	e0 18 0e 00 	andl	r8,0xe00
80005250:	e0 48 08 00 	cp.w	r8,2048
80005254:	c0 30       	breq	8000525a <sd_mmc_set_block_len+0x7e>
    return false;
80005256:	30 08       	mov	r8,0
80005258:	c1 08       	rjmp	80005278 <sd_mmc_set_block_len+0x9c>

  mci_set_block_size(mci, length);
8000525a:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8000525e:	48 a8       	lddpc	r8,80005284 <sd_mmc_set_block_len+0xa8>
80005260:	70 08       	ld.w	r8,r8[0x0]
80005262:	12 9b       	mov	r11,r9
80005264:	10 9c       	mov	r12,r8
80005266:	f0 1f 00 0c 	mcall	80005294 <sd_mmc_set_block_len+0xb8>
  mci_set_block_count(mci, 1);
8000526a:	48 78       	lddpc	r8,80005284 <sd_mmc_set_block_len+0xa8>
8000526c:	70 08       	ld.w	r8,r8[0x0]
8000526e:	30 1b       	mov	r11,1
80005270:	10 9c       	mov	r12,r8
80005272:	f0 1f 00 0a 	mcall	80005298 <sd_mmc_set_block_len+0xbc>
  return true;
80005276:	30 18       	mov	r8,1
}
80005278:	10 9c       	mov	r12,r8
8000527a:	2f ed       	sub	sp,-8
8000527c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005280:	00 00       	add	r0,r0
80005282:	09 bc       	ld.ub	r12,r4[0x3]
80005284:	00 00       	add	r0,r0
80005286:	00 14       	sub	r4,r0
80005288:	80 00       	ld.sh	r0,r0[0x0]
8000528a:	7e 7c       	ld.w	r12,pc[0x1c]
8000528c:	80 00       	ld.sh	r0,r0[0x0]
8000528e:	7c e4       	ld.w	r4,lr[0x38]
80005290:	80 00       	ld.sh	r0,r0[0x0]
80005292:	7e 1c       	ld.w	r12,pc[0x4]
80005294:	80 00       	ld.sh	r0,r0[0x0]
80005296:	7c 64       	ld.w	r4,lr[0x18]
80005298:	80 00       	ld.sh	r0,r0[0x0]
8000529a:	7c ae       	ld.w	lr,lr[0x28]

8000529c <sd_mmc_mci_init>:

bool sd_mmc_mci_init(unsigned char card_slot, long pbb_hz, long cpu_hz)
{
8000529c:	eb cd 40 80 	pushm	r7,lr
800052a0:	1a 97       	mov	r7,sp
800052a2:	20 5d       	sub	sp,20
800052a4:	18 98       	mov	r8,r12
800052a6:	ef 4b ff f0 	st.w	r7[-16],r11
800052aa:	ef 4a ff ec 	st.w	r7[-20],r10
800052ae:	ef 68 ff f4 	st.b	r7[-12],r8
    unsigned long                 scfg;
    avr32_hmatrix_scfg_t          SCFG;
  } u_avr32_hmatrix_scfg;

  // For the USBB DMA HMATRIX master, use infinite length burst.
  u_avr32_hmatrix_mcfg.mcfg = AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
800052b2:	fe 68 10 00 	mov	r8,-126976
800052b6:	70 68       	ld.w	r8,r8[0x18]
800052b8:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_hmatrix_mcfg.MCFG.ulbt = AVR32_HMATRIX_ULBT_INFINITE;
800052bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052c0:	30 09       	mov	r9,0
800052c2:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800052c6:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] = u_avr32_hmatrix_mcfg.mcfg;
800052ca:	fe 68 10 00 	mov	r8,-126976
800052ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800052d2:	91 69       	st.w	r8[0x18],r9

  // For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
  u_avr32_hmatrix_scfg.scfg = AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
800052d4:	fe 68 10 00 	mov	r8,-126976
800052d8:	71 58       	ld.w	r8,r8[0x54]
800052da:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.fixed_defmstr = AVR32_HMATRIX_MASTER_USBB_DMA;
800052de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052e2:	30 69       	mov	r9,6
800052e4:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
800052e8:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
800052ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052f0:	30 29       	mov	r9,2
800052f2:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
800052f6:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] = u_avr32_hmatrix_scfg.scfg;
800052fa:	fe 68 10 00 	mov	r8,-126976
800052fe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005302:	f1 49 00 54 	st.w	r8[84],r9

  g_pbb_hz = pbb_hz;
80005306:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000530a:	49 08       	lddpc	r8,80005348 <sd_mmc_mci_init+0xac>
8000530c:	91 09       	st.w	r8[0x0],r9
  g_cpu_hz = cpu_hz;
8000530e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005312:	48 f8       	lddpc	r8,8000534c <sd_mmc_mci_init+0xb0>
80005314:	91 09       	st.w	r8[0x0],r9

  // Init MCI controller
  if (mci_init(mci, card_slot, pbb_hz)!=MCI_SUCCESS)
80005316:	ee fa ff f0 	ld.w	r10,r7[-16]
8000531a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000531e:	48 d8       	lddpc	r8,80005350 <sd_mmc_mci_init+0xb4>
80005320:	70 08       	ld.w	r8,r8[0x0]
80005322:	12 9b       	mov	r11,r9
80005324:	10 9c       	mov	r12,r8
80005326:	f0 1f 00 0c 	mcall	80005354 <sd_mmc_mci_init+0xb8>
8000532a:	18 98       	mov	r8,r12
8000532c:	58 08       	cp.w	r8,0
8000532e:	c0 30       	breq	80005334 <sd_mmc_mci_init+0x98>
    return false;
80005330:	30 08       	mov	r8,0
80005332:	c0 78       	rjmp	80005340 <sd_mmc_mci_init+0xa4>

  // Default card initialization. This can be removed since the card init will
  // automatically be done when needed.
  sd_mmc_mci_card_init(card_slot);
80005334:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005338:	10 9c       	mov	r12,r8
8000533a:	f0 1f 00 08 	mcall	80005358 <sd_mmc_mci_init+0xbc>
  return true;
8000533e:	30 18       	mov	r8,1
}
80005340:	10 9c       	mov	r12,r8
80005342:	2f bd       	sub	sp,-20
80005344:	e3 cd 80 80 	ldm	sp++,r7,pc
80005348:	00 00       	add	r0,r0
8000534a:	04 c4       	st.b	r2++,r4
8000534c:	00 00       	add	r0,r0
8000534e:	04 c8       	st.b	r2++,r8
80005350:	00 00       	add	r0,r0
80005352:	00 14       	sub	r4,r0
80005354:	80 00       	ld.sh	r0,r0[0x0]
80005356:	7b b0       	ld.w	r0,sp[0x6c]
80005358:	80 00       	ld.sh	r0,r0[0x0]
8000535a:	53 5c       	stdsp	sp[0xd4],r12

8000535c <sd_mmc_mci_card_init>:

bool sd_mmc_mci_card_init(unsigned char slot)
{
8000535c:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
80005360:	1a 97       	mov	r7,sp
80005362:	21 7d       	sub	sp,92
80005364:	18 98       	mov	r8,r12
80005366:	ef 68 ff a4 	st.b	r7[-92],r8
  uint32_t response;

  if (true == sd_mmc_mci_init_done[slot])
8000536a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000536e:	fe f9 08 7a 	ld.w	r9,pc[2170]
80005372:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005376:	58 08       	cp.w	r8,0
80005378:	c0 40       	breq	80005380 <sd_mmc_mci_card_init+0x24>
    return true;
8000537a:	30 18       	mov	r8,1
8000537c:	e0 8f 04 31 	bral	80005bde <sd_mmc_mci_card_init+0x882>

  // Default card is not known.
  g_card_type[slot] = UNKNOWN_CARD;
80005380:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005384:	fe fa 08 68 	ld.w	r10,pc[2152]
80005388:	30 08       	mov	r8,0
8000538a:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default bus size is 1 bit.
  g_card_bus_width[slot] = MCI_BUS_SIZE_1_BIT;
8000538e:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005392:	fe fa 08 5e 	ld.w	r10,pc[2142]
80005396:	30 08       	mov	r8,0
80005398:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default card speed and disable High Speed mode.
  mci_init(mci, slot, g_pbb_hz);
8000539c:	fe f8 08 58 	ld.w	r8,pc[2136]
800053a0:	70 0a       	ld.w	r10,r8[0x0]
800053a2:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800053a6:	fe f8 08 52 	ld.w	r8,pc[2130]
800053aa:	70 08       	ld.w	r8,r8[0x0]
800053ac:	12 9b       	mov	r11,r9
800053ae:	10 9c       	mov	r12,r8
800053b0:	f0 1f 02 13 	mcall	80005bfc <sd_mmc_mci_card_init+0x8a0>

  // Wait for 1ms, then wait for 74 more clock cycles (see MMC norms)
  if (mci_send_cmd(mci, SD_MMC_INIT_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800053b4:	fe f8 08 44 	ld.w	r8,pc[2116]
800053b8:	70 08       	ld.w	r8,r8[0x0]
800053ba:	3f fa       	mov	r10,-1
800053bc:	e0 6b 01 00 	mov	r11,256
800053c0:	10 9c       	mov	r12,r8
800053c2:	f0 1f 02 10 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
800053c6:	18 98       	mov	r8,r12
800053c8:	58 08       	cp.w	r8,0
800053ca:	c0 40       	breq	800053d2 <sd_mmc_mci_card_init+0x76>
    return false;
800053cc:	30 08       	mov	r8,0
800053ce:	e0 8f 04 08 	bral	80005bde <sd_mmc_mci_card_init+0x882>

  //-- (CMD0)
  // Set card in idle state
  if (mci_send_cmd(mci, SD_MMC_GO_IDLE_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800053d2:	fe f8 08 26 	ld.w	r8,pc[2086]
800053d6:	70 08       	ld.w	r8,r8[0x0]
800053d8:	3f fa       	mov	r10,-1
800053da:	30 0b       	mov	r11,0
800053dc:	10 9c       	mov	r12,r8
800053de:	f0 1f 02 09 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
800053e2:	18 98       	mov	r8,r12
800053e4:	58 08       	cp.w	r8,0
800053e6:	c0 50       	breq	800053f0 <sd_mmc_mci_card_init+0x94>
    return false;
800053e8:	30 08       	mov	r8,0
800053ea:	e0 8f 03 fa 	bral	80005bde <sd_mmc_mci_card_init+0x882>
    response = mci_read_response(mci);
    if( !(response & OCR_MSK_BUSY) )
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
800053ee:	d7 03       	nop
    return false;

sd_mmc_init_step1:
  // (CMD1)
  // To send its Operating Conditions Register contents command only supported by MMC card
  if(mci_send_cmd(mci, SD_MMC_MMC_SEND_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_ALL|OCR_MSK_HC)==MCI_SUCCESS)
800053f0:	fe f8 08 08 	ld.w	r8,pc[2056]
800053f4:	70 08       	ld.w	r8,r8[0x0]
800053f6:	e0 6a 80 00 	mov	r10,32768
800053fa:	ea 1a c0 ff 	orh	r10,0xc0ff
800053fe:	e0 6b 08 41 	mov	r11,2113
80005402:	10 9c       	mov	r12,r8
80005404:	f0 1f 01 ff 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
80005408:	18 98       	mov	r8,r12
8000540a:	58 08       	cp.w	r8,0
8000540c:	c2 a1       	brne	80005460 <sd_mmc_mci_card_init+0x104>
  {
    // MMC cards always respond to MMC_SEND_OP_COND
    g_card_type[slot] = MMC_CARD;
8000540e:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005412:	fe fa 07 da 	ld.w	r10,pc[2010]
80005416:	30 18       	mov	r8,1
80005418:	f4 09 0b 08 	st.b	r10[r9],r8
    response = mci_read_response(mci);
8000541c:	fe f8 07 dc 	ld.w	r8,pc[2012]
80005420:	70 08       	ld.w	r8,r8[0x0]
80005422:	10 9c       	mov	r12,r8
80005424:	f0 1f 01 f8 	mcall	80005c04 <sd_mmc_mci_card_init+0x8a8>
80005428:	18 98       	mov	r8,r12
8000542a:	ef 48 ff c0 	st.w	r7[-64],r8
    if( !(response & OCR_MSK_BUSY) )
8000542e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005432:	58 08       	cp.w	r8,0
80005434:	cd d4       	brge	800053ee <sd_mmc_mci_card_init+0x92>
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
80005436:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000543a:	e6 18 40 00 	andh	r8,0x4000,COH
8000543e:	e0 80 00 97 	breq	8000556c <sd_mmc_mci_card_init+0x210>
    {
      g_card_type[slot] |= MMC_CARD_HC;
80005442:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005446:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000544a:	fe fa 07 a2 	ld.w	r10,pc[1954]
8000544e:	f4 08 07 08 	ld.ub	r8,r10[r8]
80005452:	a5 b8       	sbr	r8,0x5
80005454:	5c 58       	castu.b	r8
80005456:	fe fa 07 96 	ld.w	r10,pc[1942]
8000545a:	f4 09 0b 08 	st.b	r10[r9],r8
8000545e:	c8 88       	rjmp	8000556e <sd_mmc_mci_card_init+0x212>
    }
  }
  else
  {
    // SD cards do not respond to MMC_SEND_OP_COND
    g_card_type[slot] = SD_CARD;
80005460:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005464:	fe fa 07 88 	ld.w	r10,pc[1928]
80005468:	30 28       	mov	r8,2
8000546a:	f4 09 0b 08 	st.b	r10[r9],r8

    //-- (CMD8)
    // enables to expand new functionality to some existing commands supported only by SD HC card
    if (mci_send_cmd(mci, SD_MMC_SD_SEND_IF_COND_CMD, 0x000001AA)==MCI_SUCCESS)
8000546e:	fe f8 07 8a 	ld.w	r8,pc[1930]
80005472:	70 08       	ld.w	r8,r8[0x0]
80005474:	e0 6a 01 aa 	mov	r10,426
80005478:	e0 6b 10 48 	mov	r11,4168
8000547c:	10 9c       	mov	r12,r8
8000547e:	f0 1f 01 e1 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
80005482:	18 98       	mov	r8,r12
80005484:	58 08       	cp.w	r8,0
80005486:	c1 b1       	brne	800054bc <sd_mmc_mci_card_init+0x160>
    {
      // It is a SD HC
      if( 0x000001AA == mci_read_response(mci))
80005488:	fe f8 07 70 	ld.w	r8,pc[1904]
8000548c:	70 08       	ld.w	r8,r8[0x0]
8000548e:	10 9c       	mov	r12,r8
80005490:	f0 1f 01 dd 	mcall	80005c04 <sd_mmc_mci_card_init+0x8a8>
80005494:	18 98       	mov	r8,r12
80005496:	e0 48 01 aa 	cp.w	r8,426
8000549a:	c1 11       	brne	800054bc <sd_mmc_mci_card_init+0x160>
      {
        g_card_type[slot] |= SD_CARD_V2;
8000549c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800054a0:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800054a4:	fe fa 07 48 	ld.w	r10,pc[1864]
800054a8:	f4 08 07 08 	ld.ub	r8,r10[r8]
800054ac:	a3 b8       	sbr	r8,0x3
800054ae:	5c 58       	castu.b	r8
800054b0:	fe fa 07 3c 	ld.w	r10,pc[1852]
800054b4:	f4 09 0b 08 	st.b	r10[r9],r8
800054b8:	c0 28       	rjmp	800054bc <sd_mmc_mci_card_init+0x160>
    response = mci_read_response(mci);

    if( !(response & OCR_MSK_BUSY) )
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
800054ba:	d7 03       	nop

sd_mmc_init_step2:
    //-- (CMD55)
    // Indicates to the card that the next command is an application specific command rather than a standard command
    // CMD55 shall always precede ACMD41
    if (mci_send_cmd(mci, SD_MMC_APP_CMD, 0)!=MCI_SUCCESS)
800054bc:	fe f8 07 3c 	ld.w	r8,pc[1852]
800054c0:	70 08       	ld.w	r8,r8[0x0]
800054c2:	30 0a       	mov	r10,0
800054c4:	e0 6b 10 77 	mov	r11,4215
800054c8:	10 9c       	mov	r12,r8
800054ca:	f0 1f 01 ce 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
800054ce:	18 98       	mov	r8,r12
800054d0:	58 08       	cp.w	r8,0
800054d2:	c0 40       	breq	800054da <sd_mmc_mci_card_init+0x17e>
      return false;
800054d4:	30 08       	mov	r8,0
800054d6:	e0 8f 03 84 	bral	80005bde <sd_mmc_mci_card_init+0x882>

    //-- (ACMD41)
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
800054da:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800054de:	fe f9 07 0e 	ld.w	r9,pc[1806]
800054e2:	f2 08 07 08 	ld.ub	r8,r9[r8]
800054e6:	e2 18 00 08 	andl	r8,0x8,COH
800054ea:	c1 00       	breq	8000550a <sd_mmc_mci_card_init+0x1ae>
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
800054ec:	fe f8 07 0c 	ld.w	r8,pc[1804]
800054f0:	70 08       	ld.w	r8,r8[0x0]
800054f2:	fc 1a c0 10 	movh	r10,0xc010
800054f6:	36 9b       	mov	r11,105
800054f8:	10 9c       	mov	r12,r8
800054fa:	f0 1f 01 c2 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
800054fe:	18 98       	mov	r8,r12
80005500:	58 08       	cp.w	r8,0
80005502:	c1 30       	breq	80005528 <sd_mmc_mci_card_init+0x1cc>
        return false;
80005504:	30 08       	mov	r8,0
80005506:	e0 8f 03 6c 	bral	80005bde <sd_mmc_mci_card_init+0x882>
    }
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
8000550a:	fe f8 06 ee 	ld.w	r8,pc[1774]
8000550e:	70 08       	ld.w	r8,r8[0x0]
80005510:	fc 1a 80 10 	movh	r10,0x8010
80005514:	36 9b       	mov	r11,105
80005516:	10 9c       	mov	r12,r8
80005518:	f0 1f 01 ba 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
8000551c:	18 98       	mov	r8,r12
8000551e:	58 08       	cp.w	r8,0
80005520:	c0 50       	breq	8000552a <sd_mmc_mci_card_init+0x1ce>
        return false;
80005522:	30 08       	mov	r8,0
80005524:	e0 8f 03 5d 	bral	80005bde <sd_mmc_mci_card_init+0x882>
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
        return false;
80005528:	d7 03       	nop
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
        return false;
    }
    response = mci_read_response(mci);
8000552a:	fe f8 06 ce 	ld.w	r8,pc[1742]
8000552e:	70 08       	ld.w	r8,r8[0x0]
80005530:	10 9c       	mov	r12,r8
80005532:	f0 1f 01 b5 	mcall	80005c04 <sd_mmc_mci_card_init+0x8a8>
80005536:	18 98       	mov	r8,r12
80005538:	ef 48 ff c0 	st.w	r7[-64],r8

    if( !(response & OCR_MSK_BUSY) )
8000553c:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005540:	58 08       	cp.w	r8,0
80005542:	cb c4       	brge	800054ba <sd_mmc_mci_card_init+0x15e>
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
    }
    // Card read then check HC type
    if (response & OCR_MSK_HC)
80005544:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005548:	e6 18 40 00 	andh	r8,0x4000,COH
8000554c:	c1 10       	breq	8000556e <sd_mmc_mci_card_init+0x212>
    {
      g_card_type[slot] |= SD_CARD_HC;  // Card SD High Capacity
8000554e:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005552:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005556:	fe fa 06 96 	ld.w	r10,pc[1686]
8000555a:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000555e:	a5 a8       	sbr	r8,0x4
80005560:	5c 58       	castu.b	r8
80005562:	fe fa 06 8a 	ld.w	r10,pc[1674]
80005566:	f4 09 0b 08 	st.b	r10[r9],r8
8000556a:	c0 28       	rjmp	8000556e <sd_mmc_mci_card_init+0x212>
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
    {
      g_card_type[slot] |= MMC_CARD_HC;
8000556c:	d7 03       	nop

  // Here card ready and type (MMC <V4, MMC V4, MMC HC, SD V1, SD V2 HC) detected

  //-- (CMD2)
  // Send CID
  if (mci_send_cmd(mci, SD_MMC_ALL_SEND_CID_CMD, 0)!=MCI_SUCCESS)
8000556e:	fe f8 06 8a 	ld.w	r8,pc[1674]
80005572:	70 08       	ld.w	r8,r8[0x0]
80005574:	30 0a       	mov	r10,0
80005576:	e0 6b 00 82 	mov	r11,130
8000557a:	10 9c       	mov	r12,r8
8000557c:	f0 1f 01 a1 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
80005580:	18 98       	mov	r8,r12
80005582:	58 08       	cp.w	r8,0
80005584:	c0 40       	breq	8000558c <sd_mmc_mci_card_init+0x230>
    return false;
80005586:	30 08       	mov	r8,0
80005588:	e0 8f 03 2b 	bral	80005bde <sd_mmc_mci_card_init+0x882>

  //-- (CMD3)
  // Set relative address
  if(MMC_CARD & g_card_type[slot])
8000558c:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005590:	fe f9 06 5c 	ld.w	r9,pc[1628]
80005594:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005598:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000559c:	5c 58       	castu.b	r8
8000559e:	c1 90       	breq	800055d0 <sd_mmc_mci_card_init+0x274>
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
800055a0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800055a4:	fe f8 06 64 	ld.w	r8,pc[1636]
800055a8:	e0 7a ff ff 	mov	r10,131071
800055ac:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
800055b0:	fe f8 06 48 	ld.w	r8,pc[1608]
800055b4:	70 08       	ld.w	r8,r8[0x0]
800055b6:	e0 7a ff ff 	mov	r10,131071
800055ba:	e0 6b 10 43 	mov	r11,4163
800055be:	10 9c       	mov	r12,r8
800055c0:	f0 1f 01 90 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
800055c4:	18 98       	mov	r8,r12
800055c6:	58 08       	cp.w	r8,0
800055c8:	c1 30       	breq	800055ee <sd_mmc_mci_card_init+0x292>
      return false;
800055ca:	30 08       	mov	r8,0
800055cc:	e0 8f 03 09 	bral	80005bde <sd_mmc_mci_card_init+0x882>
  }
  else
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
800055d0:	fe f8 06 28 	ld.w	r8,pc[1576]
800055d4:	70 08       	ld.w	r8,r8[0x0]
800055d6:	30 0a       	mov	r10,0
800055d8:	e0 6b 10 43 	mov	r11,4163
800055dc:	10 9c       	mov	r12,r8
800055de:	f0 1f 01 89 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
800055e2:	18 98       	mov	r8,r12
800055e4:	58 08       	cp.w	r8,0
800055e6:	c0 50       	breq	800055f0 <sd_mmc_mci_card_init+0x294>
      return false;
800055e8:	30 08       	mov	r8,0
800055ea:	e0 8f 02 fa 	bral	80005bde <sd_mmc_mci_card_init+0x882>
  if(MMC_CARD & g_card_type[slot])
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
      return false;
800055ee:	d7 03       	nop
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
      return false;
  }
  if (SD_CARD & g_card_type[slot])
800055f0:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800055f4:	fe f9 05 f8 	ld.w	r9,pc[1528]
800055f8:	f2 08 07 08 	ld.ub	r8,r9[r8]
800055fc:	e2 18 00 02 	andl	r8,0x2,COH
80005600:	c1 10       	breq	80005622 <sd_mmc_mci_card_init+0x2c6>
  {
    // For SD  card, you receive address of card
    g_card_rca[slot] = mci_read_response(mci) & RCA_MSK_ADR ;
80005602:	ef 36 ff a4 	ld.ub	r6,r7[-92]
80005606:	fe f8 05 f2 	ld.w	r8,pc[1522]
8000560a:	70 08       	ld.w	r8,r8[0x0]
8000560c:	10 9c       	mov	r12,r8
8000560e:	f0 1f 01 7e 	mcall	80005c04 <sd_mmc_mci_card_init+0x8a8>
80005612:	18 98       	mov	r8,r12
80005614:	10 99       	mov	r9,r8
80005616:	e0 19 00 00 	andl	r9,0x0
8000561a:	fe f8 05 ee 	ld.w	r8,pc[1518]
8000561e:	f0 06 09 29 	st.w	r8[r6<<0x2],r9
  }


  //-- (CMD9)
  // Read & analyze CSD register
  if (sd_mmc_mci_get_csd(slot)!=true)
80005622:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005626:	10 9c       	mov	r12,r8
80005628:	f0 1f 01 79 	mcall	80005c0c <sd_mmc_mci_card_init+0x8b0>
8000562c:	18 98       	mov	r8,r12
8000562e:	ec 18 00 01 	eorl	r8,0x1
80005632:	5c 58       	castu.b	r8
80005634:	c0 40       	breq	8000563c <sd_mmc_mci_card_init+0x2e0>
    return false;
80005636:	30 08       	mov	r8,0
80005638:	e0 8f 02 d3 	bral	80005bde <sd_mmc_mci_card_init+0x882>


  //-- (CMD7)-R1b
  // select card
  if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
8000563c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005640:	fe f8 05 c8 	ld.w	r8,pc[1480]
80005644:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005648:	fe f8 05 b0 	ld.w	r8,pc[1456]
8000564c:	70 08       	ld.w	r8,r8[0x0]
8000564e:	12 9a       	mov	r10,r9
80005650:	e0 6b 10 c7 	mov	r11,4295
80005654:	10 9c       	mov	r12,r8
80005656:	f0 1f 01 6b 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
8000565a:	18 98       	mov	r8,r12
8000565c:	58 08       	cp.w	r8,0
8000565e:	c0 40       	breq	80005666 <sd_mmc_mci_card_init+0x30a>
    return false;
80005660:	30 08       	mov	r8,0
80005662:	e0 8f 02 be 	bral	80005bde <sd_mmc_mci_card_init+0x882>

  // Wait end of busy
  mci_wait_busy_signal(mci);// read busy state on DAT0
80005666:	fe f8 05 92 	ld.w	r8,pc[1426]
8000566a:	70 08       	ld.w	r8,r8[0x0]
8000566c:	10 9c       	mov	r12,r8
8000566e:	f0 1f 01 69 	mcall	80005c10 <sd_mmc_mci_card_init+0x8b4>

  // Get clock by checking the extended CSD register
  if (MMC_CARD_V4 & g_card_type[slot])
80005672:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005676:	fe f9 05 76 	ld.w	r9,pc[1398]
8000567a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000567e:	e2 18 00 04 	andl	r8,0x4,COH
80005682:	c0 e0       	breq	8000569e <sd_mmc_mci_card_init+0x342>
  {
    // Get clock (MMC V4) and size (MMC V4 HC) by checking the extended CSD register
      //-- (CMD8)
    if (sd_mmc_get_ext_csd(slot)!=true)
80005684:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005688:	10 9c       	mov	r12,r8
8000568a:	f0 1f 01 63 	mcall	80005c14 <sd_mmc_mci_card_init+0x8b8>
8000568e:	18 98       	mov	r8,r12
80005690:	ec 18 00 01 	eorl	r8,0x1
80005694:	5c 58       	castu.b	r8
80005696:	c0 40       	breq	8000569e <sd_mmc_mci_card_init+0x342>
         return false;
80005698:	30 08       	mov	r8,0
8000569a:	e0 8f 02 a2 	bral	80005bde <sd_mmc_mci_card_init+0x882>
  }


#if (SD_4_BIT == ENABLE)
  // set bus size
  if (SD_CARD & g_card_type[slot])
8000569e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800056a2:	fe f9 05 4a 	ld.w	r9,pc[1354]
800056a6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800056aa:	e2 18 00 02 	andl	r8,0x2,COH
800056ae:	c4 00       	breq	8000572e <sd_mmc_mci_card_init+0x3d2>
  {
    // set 4-bit bus for SD Card
    //-- (CMD55)
    if(mci_send_cmd(mci, SD_MMC_APP_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800056b0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800056b4:	fe f8 05 54 	ld.w	r8,pc[1364]
800056b8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800056bc:	fe f8 05 3c 	ld.w	r8,pc[1340]
800056c0:	70 08       	ld.w	r8,r8[0x0]
800056c2:	12 9a       	mov	r10,r9
800056c4:	e0 6b 10 77 	mov	r11,4215
800056c8:	10 9c       	mov	r12,r8
800056ca:	f0 1f 01 4e 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
800056ce:	18 98       	mov	r8,r12
800056d0:	58 08       	cp.w	r8,0
800056d2:	c0 40       	breq	800056da <sd_mmc_mci_card_init+0x37e>
      return false;
800056d4:	30 08       	mov	r8,0
800056d6:	e0 8f 02 84 	bral	80005bde <sd_mmc_mci_card_init+0x882>

    //-- (CMD6)
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
800056da:	fe f8 05 1e 	ld.w	r8,pc[1310]
800056de:	70 08       	ld.w	r8,r8[0x0]
800056e0:	30 2a       	mov	r10,2
800056e2:	e0 6b 10 46 	mov	r11,4166
800056e6:	10 9c       	mov	r12,r8
800056e8:	f0 1f 01 46 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
800056ec:	18 98       	mov	r8,r12
800056ee:	58 08       	cp.w	r8,0
800056f0:	c0 40       	breq	800056f8 <sd_mmc_mci_card_init+0x39c>
      return false;
800056f2:	30 08       	mov	r8,0
800056f4:	e0 8f 02 75 	bral	80005bde <sd_mmc_mci_card_init+0x882>

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
800056f8:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800056fc:	fe fa 04 f4 	ld.w	r10,pc[1268]
80005700:	30 28       	mov	r8,2
80005702:	f4 09 0b 08 	st.b	r10[r9],r8
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
80005706:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000570a:	fe f9 04 e6 	ld.w	r9,pc[1254]
8000570e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005712:	10 99       	mov	r9,r8
80005714:	fe f8 04 e4 	ld.w	r8,pc[1252]
80005718:	70 08       	ld.w	r8,r8[0x0]
8000571a:	12 9b       	mov	r11,r9
8000571c:	10 9c       	mov	r12,r8
8000571e:	f0 1f 01 3f 	mcall	80005c18 <sd_mmc_mci_card_init+0x8bc>
80005722:	18 98       	mov	r8,r12
80005724:	58 08       	cp.w	r8,0
80005726:	c4 00       	breq	800057a6 <sd_mmc_mci_card_init+0x44a>
      return false;
80005728:	30 08       	mov	r8,0
8000572a:	e0 8f 02 5a 	bral	80005bde <sd_mmc_mci_card_init+0x882>
  }
  else // MMC bus width management
  {
    // set 8-bit bus for MMC Card
    if (MMC_CARD_V4 & g_card_type[slot])
8000572e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005732:	fe f9 04 ba 	ld.w	r9,pc[1210]
80005736:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000573a:	e2 18 00 04 	andl	r8,0x4,COH
8000573e:	c3 50       	breq	800057a8 <sd_mmc_mci_card_init+0x44c>
    {
      //-- (CMD6)-R1b
      // set 8-bit bus width (appeared from V4.0 specification)
      if (mci_send_cmd( mci,
80005740:	fe f8 04 b8 	ld.w	r8,pc[1208]
80005744:	70 08       	ld.w	r8,r8[0x0]
80005746:	e0 6a 02 03 	mov	r10,515
8000574a:	ea 1a 03 b7 	orh	r10,0x3b7
8000574e:	e0 6b 10 c6 	mov	r11,4294
80005752:	10 9c       	mov	r12,r8
80005754:	f0 1f 01 2b 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
80005758:	18 98       	mov	r8,r12
8000575a:	58 08       	cp.w	r8,0
8000575c:	c0 40       	breq	80005764 <sd_mmc_mci_card_init+0x408>
                        ( (uint32_t)MMC_SWITCH_WRITE     <<24)|
                          ((uint32_t)MMC_SWITCH_BUS_WIDTH<<16)|
                          ((uint32_t)MMC_SWITCH_VAL_8BIT << 8)|
                          ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
8000575e:	30 08       	mov	r8,0
80005760:	e0 8f 02 3f 	bral	80005bde <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80005764:	fe f8 04 94 	ld.w	r8,pc[1172]
80005768:	70 08       	ld.w	r8,r8[0x0]
8000576a:	10 9c       	mov	r12,r8
8000576c:	f0 1f 01 29 	mcall	80005c10 <sd_mmc_mci_card_init+0x8b4>
      g_card_bus_width[slot] = MCI_BUS_SIZE_8_BIT;
80005770:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005774:	fe fa 04 7c 	ld.w	r10,pc[1148]
80005778:	30 38       	mov	r8,3
8000577a:	f4 09 0b 08 	st.b	r10[r9],r8
      if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
8000577e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005782:	fe f9 04 6e 	ld.w	r9,pc[1134]
80005786:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000578a:	10 99       	mov	r9,r8
8000578c:	fe f8 04 6c 	ld.w	r8,pc[1132]
80005790:	70 08       	ld.w	r8,r8[0x0]
80005792:	12 9b       	mov	r11,r9
80005794:	10 9c       	mov	r12,r8
80005796:	f0 1f 01 21 	mcall	80005c18 <sd_mmc_mci_card_init+0x8bc>
8000579a:	18 98       	mov	r8,r12
8000579c:	58 08       	cp.w	r8,0
8000579e:	c0 50       	breq	800057a8 <sd_mmc_mci_card_init+0x44c>
       return false;
800057a0:	30 08       	mov	r8,0
800057a2:	e0 8f 02 1e 	bral	80005bde <sd_mmc_mci_card_init+0x882>
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
      return false;

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
      return false;
800057a6:	d7 03       	nop
       return false;
    }
  }
#endif

   if (MMC_CARD_V4 & g_card_type[slot])
800057a8:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800057ac:	fe f9 04 40 	ld.w	r9,pc[1088]
800057b0:	f2 08 07 08 	ld.ub	r8,r9[r8]
800057b4:	e2 18 00 04 	andl	r8,0x4,COH
800057b8:	c1 90       	breq	800057ea <sd_mmc_mci_card_init+0x48e>
   {
      //-- (CMD6)-R1b
      // set high speed interface timing
      if (mci_send_cmd( mci,
800057ba:	fe f8 04 3e 	ld.w	r8,pc[1086]
800057be:	70 08       	ld.w	r8,r8[0x0]
800057c0:	e0 6a 01 03 	mov	r10,259
800057c4:	ea 1a 03 b9 	orh	r10,0x3b9
800057c8:	e0 6b 10 c6 	mov	r11,4294
800057cc:	10 9c       	mov	r12,r8
800057ce:	f0 1f 01 0d 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
800057d2:	18 98       	mov	r8,r12
800057d4:	58 08       	cp.w	r8,0
800057d6:	c0 40       	breq	800057de <sd_mmc_mci_card_init+0x482>
                        ((uint32_t)MMC_SWITCH_WRITE     <<24)|
                        ((uint32_t)MMC_SWITCH_HIGH_SPEED<<16)|
                        ((uint32_t)MMC_SWITCH_VAL_HS    << 8)|
                        ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
800057d8:	30 08       	mov	r8,0
800057da:	e0 8f 02 02 	bral	80005bde <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);
800057de:	fe f8 04 1a 	ld.w	r8,pc[1050]
800057e2:	70 08       	ld.w	r8,r8[0x0]
800057e4:	10 9c       	mov	r12,r8
800057e6:	f0 1f 01 0b 	mcall	80005c10 <sd_mmc_mci_card_init+0x8b4>
   }


   if( SD_CARD_V2 & g_card_type[slot] )
800057ea:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800057ee:	fe f9 03 fe 	ld.w	r9,pc[1022]
800057f2:	f2 08 07 08 	ld.ub	r8,r9[r8]
800057f6:	e2 18 00 08 	andl	r8,0x8,COH
800057fa:	e0 80 01 ae 	breq	80005b56 <sd_mmc_mci_card_init+0x7fa>
#define SDMMC_SWITCH_FUNC_G3_KEEP     (0xf << 8)  /**< Group 3 No influence */
#define SDMMC_SWITCH_FUNC_G4_KEEP     (0xf << 12) /**< Group 4 No influence */
#define SDMMC_SWITCH_FUNC_G5_KEEP     (0xf << 16) /**< Group 5 No influence */
#define SDMMC_SWITCH_FUNC_G6_KEEP     (0xf << 20) /**< Group 6 No influence */

      mci_set_block_size(mci, 512/8); // CMD6 512 bits status
800057fe:	fe f8 03 fa 	ld.w	r8,pc[1018]
80005802:	70 08       	ld.w	r8,r8[0x0]
80005804:	34 0b       	mov	r11,64
80005806:	10 9c       	mov	r12,r8
80005808:	f0 1f 01 05 	mcall	80005c1c <sd_mmc_mci_card_init+0x8c0>
      mci_set_block_count(mci, 1);
8000580c:	fe f8 03 ec 	ld.w	r8,pc[1004]
80005810:	70 08       	ld.w	r8,r8[0x0]
80005812:	30 1b       	mov	r11,1
80005814:	10 9c       	mov	r12,r8
80005816:	f0 1f 01 03 	mcall	80005c20 <sd_mmc_mci_card_init+0x8c4>

      //-- (CMD6)
      // Check if we can enter into the High Speed mode.
      if (mci_send_cmd( mci
8000581a:	fe f8 03 de 	ld.w	r8,pc[990]
8000581e:	70 08       	ld.w	r8,r8[0x0]
80005820:	30 1a       	mov	r10,1
80005822:	e4 7b 10 46 	mov	r11,331846
80005826:	10 9c       	mov	r12,r8
80005828:	f0 1f 00 f6 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
8000582c:	18 98       	mov	r8,r12
8000582e:	58 08       	cp.w	r8,0
80005830:	c0 40       	breq	80005838 <sd_mmc_mci_card_init+0x4dc>
                      , SD_SWITCH_FUNC
                      , SDMMC_SWITCH_FUNC_MODE_CHECK | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80005832:	30 08       	mov	r8,0
80005834:	e0 8f 01 d5 	bral	80005bde <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80005838:	fe f8 03 c0 	ld.w	r8,pc[960]
8000583c:	70 08       	ld.w	r8,r8[0x0]
8000583e:	10 9c       	mov	r12,r8
80005840:	f0 1f 00 f4 	mcall	80005c10 <sd_mmc_mci_card_init+0x8b4>

      bool b_hs_supported=false;
80005844:	30 08       	mov	r8,0
80005846:	ef 68 ff c5 	st.b	r7[-59],r8
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
8000584a:	30 08       	mov	r8,0
8000584c:	ef 68 ff c6 	st.b	r7[-58],r8
80005850:	c4 18       	rjmp	800058d2 <sd_mmc_mci_card_init+0x576>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80005852:	fe f8 03 a6 	ld.w	r8,pc[934]
80005856:	70 08       	ld.w	r8,r8[0x0]
80005858:	ef 48 ff c8 	st.w	r7[-56],r8
8000585c:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005860:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80005864:	fe f8 03 c0 	ld.w	r8,pc[960]
80005868:	70 08       	ld.w	r8,r8[0x0]
8000586a:	10 99       	mov	r9,r8
8000586c:	e6 19 01 e0 	andh	r9,0x1e0,COH
80005870:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005874:	71 08       	ld.w	r8,r8[0x40]
80005876:	f3 e8 10 08 	or	r8,r9,r8
8000587a:	10 99       	mov	r9,r8
8000587c:	fe f8 03 a8 	ld.w	r8,pc[936]
80005880:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80005882:	fe f8 03 a2 	ld.w	r8,pc[930]
80005886:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80005888:	e2 18 00 02 	andl	r8,0x2,COH
8000588c:	5f 18       	srne	r8
8000588e:	58 08       	cp.w	r8,0
80005890:	ce 10       	breq	80005852 <sd_mmc_mci_card_init+0x4f6>
          data = mci_rd_data(mci);
80005892:	fe f8 03 66 	ld.w	r8,pc[870]
80005896:	70 08       	ld.w	r8,r8[0x0]
80005898:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
8000589c:	ee f8 ff d0 	ld.w	r8,r7[-48]
800058a0:	70 c8       	ld.w	r8,r8[0x30]
800058a2:	ef 48 ff ac 	st.w	r7[-84],r8
          if(i==16)
800058a6:	ef 39 ff c6 	ld.ub	r9,r7[-58]
800058aa:	31 08       	mov	r8,16
800058ac:	f0 09 18 00 	cp.b	r9,r8
800058b0:	c0 c1       	brne	800058c8 <sd_mmc_mci_card_init+0x56c>
          {
            if(((data>>24)&0xf)==1)
800058b2:	ee f8 ff ac 	ld.w	r8,r7[-84]
800058b6:	b9 88       	lsr	r8,0x18
800058b8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800058bc:	58 18       	cp.w	r8,1
800058be:	c1 21       	brne	800058e2 <sd_mmc_mci_card_init+0x586>
              b_hs_supported = true;
800058c0:	30 18       	mov	r8,1
800058c2:	ef 68 ff c5 	st.b	r7[-59],r8
            break;
800058c6:	c0 f8       	rjmp	800058e4 <sd_mmc_mci_card_init+0x588>
      mci_wait_busy_signal(mci);// read busy state on DAT0

      bool b_hs_supported=false;
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
800058c8:	ef 38 ff c6 	ld.ub	r8,r7[-58]
800058cc:	2f c8       	sub	r8,-4
800058ce:	ef 68 ff c6 	st.b	r7[-58],r8
800058d2:	ef 39 ff c6 	ld.ub	r9,r7[-58]
800058d6:	33 f8       	mov	r8,63
800058d8:	f0 09 18 00 	cp.b	r9,r8
800058dc:	fe 98 ff bb 	brls	80005852 <sd_mmc_mci_card_init+0x4f6>
800058e0:	c0 28       	rjmp	800058e4 <sd_mmc_mci_card_init+0x588>
          data = mci_rd_data(mci);
          if(i==16)
          {
            if(((data>>24)&0xf)==1)
              b_hs_supported = true;
            break;
800058e2:	d7 03       	nop
          }
        }
      }

      if (b_hs_supported==false )
800058e4:	ef 38 ff c5 	ld.ub	r8,r7[-59]
800058e8:	ec 18 00 01 	eorl	r8,0x1
800058ec:	5c 58       	castu.b	r8
800058ee:	e0 81 01 33 	brne	80005b54 <sd_mmc_mci_card_init+0x7f8>
        goto sd_mmc_init_step3;

      if (mci_send_cmd( mci
800058f2:	fe f8 03 06 	ld.w	r8,pc[774]
800058f6:	70 08       	ld.w	r8,r8[0x0]
800058f8:	e0 6a ff f1 	mov	r10,65521
800058fc:	ea 1a 80 ff 	orh	r10,0x80ff
80005900:	e4 7b 10 46 	mov	r11,331846
80005904:	10 9c       	mov	r12,r8
80005906:	f0 1f 00 bf 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
8000590a:	18 98       	mov	r8,r12
8000590c:	58 08       	cp.w	r8,0
8000590e:	c0 40       	breq	80005916 <sd_mmc_mci_card_init+0x5ba>
                      | SDMMC_SWITCH_FUNC_G3_KEEP
                      | SDMMC_SWITCH_FUNC_G2_KEEP
                      | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80005910:	30 08       	mov	r8,0
80005912:	e0 8f 01 66 	bral	80005bde <sd_mmc_mci_card_init+0x882>
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80005916:	30 08       	mov	r8,0
80005918:	ef 68 ff c7 	st.b	r7[-57],r8
8000591c:	c3 08       	rjmp	8000597c <sd_mmc_mci_card_init+0x620>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
8000591e:	fe f8 02 da 	ld.w	r8,pc[730]
80005922:	70 08       	ld.w	r8,r8[0x0]
80005924:	ef 48 ff d4 	st.w	r7[-44],r8
80005928:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000592c:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80005930:	fe f8 02 f4 	ld.w	r8,pc[756]
80005934:	70 08       	ld.w	r8,r8[0x0]
80005936:	10 99       	mov	r9,r8
80005938:	e6 19 01 e0 	andh	r9,0x1e0,COH
8000593c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80005940:	71 08       	ld.w	r8,r8[0x40]
80005942:	f3 e8 10 08 	or	r8,r9,r8
80005946:	10 99       	mov	r9,r8
80005948:	fe f8 02 dc 	ld.w	r8,pc[732]
8000594c:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
8000594e:	fe f8 02 d6 	ld.w	r8,pc[726]
80005952:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80005954:	e2 18 00 02 	andl	r8,0x2,COH
80005958:	5f 18       	srne	r8
8000595a:	58 08       	cp.w	r8,0
8000595c:	ce 10       	breq	8000591e <sd_mmc_mci_card_init+0x5c2>
          data = mci_rd_data(mci);
8000595e:	fe f8 02 9a 	ld.w	r8,pc[666]
80005962:	70 08       	ld.w	r8,r8[0x0]
80005964:	ef 48 ff dc 	st.w	r7[-36],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80005968:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000596c:	70 c8       	ld.w	r8,r8[0x30]
8000596e:	ef 48 ff a8 	st.w	r7[-88],r8
      {
        return false;
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80005972:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80005976:	2f c8       	sub	r8,-4
80005978:	ef 68 ff c7 	st.b	r7[-57],r8
8000597c:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80005980:	33 f8       	mov	r8,63
80005982:	f0 09 18 00 	cp.b	r9,r8
80005986:	fe 98 ff cc 	brls	8000591e <sd_mmc_mci_card_init+0x5c2>

      /* A 8 cycle delay is required after switch command
       * @ 200KHz clock this should be 40 uS, but we use
       * 80 to handle imprecise clock setting.
       */
      cpu_delay_us(80, g_cpu_hz);
8000598a:	fe f8 02 9e 	ld.w	r8,pc[670]
8000598e:	70 08       	ld.w	r8,r8[0x0]
80005990:	35 09       	mov	r9,80
80005992:	ef 49 ff e4 	st.w	r7[-28],r9
80005996:	ef 48 ff e0 	st.w	r7[-32],r8
8000599a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000599e:	ef 48 ff ec 	st.w	r7[-20],r8
800059a2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800059a6:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800059aa:	ee f0 ff ec 	ld.w	r0,r7[-20]
800059ae:	30 01       	mov	r1,0
800059b0:	ee f2 ff e8 	ld.w	r2,r7[-24]
800059b4:	30 03       	mov	r3,0
800059b6:	e2 02 02 4a 	mul	r10,r1,r2
800059ba:	e6 00 02 48 	mul	r8,r3,r0
800059be:	10 0a       	add	r10,r8
800059c0:	e0 02 06 48 	mulu.d	r8,r0,r2
800059c4:	12 0a       	add	r10,r9
800059c6:	14 99       	mov	r9,r10
800059c8:	ee 7a 42 3f 	mov	r10,999999
800059cc:	30 0b       	mov	r11,0
800059ce:	f0 0a 00 0a 	add	r10,r8,r10
800059d2:	f2 0b 00 4b 	adc	r11,r9,r11
800059d6:	ee 78 42 40 	mov	r8,1000000
800059da:	30 09       	mov	r9,0
800059dc:	f0 1f 00 94 	mcall	80005c2c <sd_mmc_mci_card_init+0x8d0>
800059e0:	14 98       	mov	r8,r10
800059e2:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800059e4:	ef 48 ff f4 	st.w	r7[-12],r8
800059e8:	ee c8 00 50 	sub	r8,r7,80
800059ec:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800059f0:	e1 b8 00 42 	mfsr	r8,0x108
800059f4:	10 99       	mov	r9,r8
800059f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800059fa:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800059fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005a00:	70 09       	ld.w	r9,r8[0x0]
80005a02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005a06:	10 09       	add	r9,r8
80005a08:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005a0c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005a0e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005a12:	30 08       	mov	r8,0
80005a14:	f3 68 00 08 	st.b	r9[8],r8
80005a18:	ee c8 00 50 	sub	r8,r7,80
80005a1c:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005a20:	e1 b8 00 42 	mfsr	r8,0x108
80005a24:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005a28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a2c:	f1 39 00 08 	ld.ub	r9,r8[8]
80005a30:	30 28       	mov	r8,2
80005a32:	f0 09 18 00 	cp.b	r9,r8
80005a36:	c0 31       	brne	80005a3c <sd_mmc_mci_card_init+0x6e0>
    return false;
80005a38:	30 08       	mov	r8,0
80005a3a:	c4 38       	rjmp	80005ac0 <sd_mmc_mci_card_init+0x764>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005a3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a40:	f1 39 00 08 	ld.ub	r9,r8[8]
80005a44:	30 18       	mov	r8,1
80005a46:	f0 09 18 00 	cp.b	r9,r8
80005a4a:	c0 31       	brne	80005a50 <sd_mmc_mci_card_init+0x6f4>
    return true;
80005a4c:	30 18       	mov	r8,1
80005a4e:	c3 98       	rjmp	80005ac0 <sd_mmc_mci_card_init+0x764>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005a50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a54:	70 09       	ld.w	r9,r8[0x0]
80005a56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a5a:	70 18       	ld.w	r8,r8[0x4]
80005a5c:	10 39       	cp.w	r9,r8
80005a5e:	e0 88 00 1a 	brls	80005a92 <sd_mmc_mci_card_init+0x736>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005a62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a66:	70 08       	ld.w	r8,r8[0x0]
80005a68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a6c:	10 39       	cp.w	r9,r8
80005a6e:	c1 02       	brcc	80005a8e <sd_mmc_mci_card_init+0x732>
80005a70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a74:	70 18       	ld.w	r8,r8[0x4]
80005a76:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a7a:	10 39       	cp.w	r9,r8
80005a7c:	e0 88 00 09 	brls	80005a8e <sd_mmc_mci_card_init+0x732>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005a80:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005a84:	30 18       	mov	r8,1
80005a86:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005a8a:	30 18       	mov	r8,1
80005a8c:	c1 a8       	rjmp	80005ac0 <sd_mmc_mci_card_init+0x764>
    }
    return false;
80005a8e:	30 08       	mov	r8,0
80005a90:	c1 88       	rjmp	80005ac0 <sd_mmc_mci_card_init+0x764>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a96:	70 08       	ld.w	r8,r8[0x0]
80005a98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a9c:	10 39       	cp.w	r9,r8
80005a9e:	c0 93       	brcs	80005ab0 <sd_mmc_mci_card_init+0x754>
80005aa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005aa4:	70 18       	ld.w	r8,r8[0x4]
80005aa6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005aaa:	10 39       	cp.w	r9,r8
80005aac:	e0 88 00 09 	brls	80005abe <sd_mmc_mci_card_init+0x762>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005ab0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005ab4:	30 18       	mov	r8,1
80005ab6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005aba:	30 18       	mov	r8,1
80005abc:	c0 28       	rjmp	80005ac0 <sd_mmc_mci_card_init+0x764>
    }
    return false;
80005abe:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005ac0:	58 08       	cp.w	r8,0
80005ac2:	ca b0       	breq	80005a18 <sd_mmc_mci_card_init+0x6bc>
      union u_cfg{
        unsigned long     cfg;
        avr32_mci_cfg_t   CFG;
      };
      union u_cfg val;
      val.cfg = mci->cfg;
80005ac4:	4c d8       	lddpc	r8,80005bf8 <sd_mmc_mci_card_init+0x89c>
80005ac6:	70 08       	ld.w	r8,r8[0x0]
80005ac8:	71 58       	ld.w	r8,r8[0x54]
80005aca:	ef 48 ff bc 	st.w	r7[-68],r8
      val.CFG.hsmode = 1;
80005ace:	ee f8 ff bc 	ld.w	r8,r7[-68]
80005ad2:	30 19       	mov	r9,1
80005ad4:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80005ad8:	ef 48 ff bc 	st.w	r7[-68],r8
      mci->cfg = val.cfg;
80005adc:	4c 78       	lddpc	r8,80005bf8 <sd_mmc_mci_card_init+0x89c>
80005ade:	70 08       	ld.w	r8,r8[0x0]
80005ae0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80005ae4:	f1 49 00 54 	st.w	r8[84],r9

      // deselect card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, 0)!=MCI_SUCCESS)
80005ae8:	4c 48       	lddpc	r8,80005bf8 <sd_mmc_mci_card_init+0x89c>
80005aea:	70 08       	ld.w	r8,r8[0x0]
80005aec:	30 0a       	mov	r10,0
80005aee:	e0 6b 10 c7 	mov	r11,4295
80005af2:	10 9c       	mov	r12,r8
80005af4:	f0 1f 00 43 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
80005af8:	18 98       	mov	r8,r12
80005afa:	58 08       	cp.w	r8,0
80005afc:	c0 30       	breq	80005b02 <sd_mmc_mci_card_init+0x7a6>
        return false;
80005afe:	30 08       	mov	r8,0
80005b00:	c6 f8       	rjmp	80005bde <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80005b02:	4b e8       	lddpc	r8,80005bf8 <sd_mmc_mci_card_init+0x89c>
80005b04:	70 08       	ld.w	r8,r8[0x0]
80005b06:	10 9c       	mov	r12,r8
80005b08:	f0 1f 00 42 	mcall	80005c10 <sd_mmc_mci_card_init+0x8b4>

      //-- (CMD9)
      // Read & analyze CSD register
      if (sd_mmc_mci_get_csd(slot)!=true)
80005b0c:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005b10:	10 9c       	mov	r12,r8
80005b12:	f0 1f 00 3f 	mcall	80005c0c <sd_mmc_mci_card_init+0x8b0>
80005b16:	18 98       	mov	r8,r12
80005b18:	ec 18 00 01 	eorl	r8,0x1
80005b1c:	5c 58       	castu.b	r8
80005b1e:	c0 30       	breq	80005b24 <sd_mmc_mci_card_init+0x7c8>
        return false;
80005b20:	30 08       	mov	r8,0
80005b22:	c5 e8       	rjmp	80005bde <sd_mmc_mci_card_init+0x882>

      // select card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80005b24:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005b28:	4b 88       	lddpc	r8,80005c08 <sd_mmc_mci_card_init+0x8ac>
80005b2a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005b2e:	4b 38       	lddpc	r8,80005bf8 <sd_mmc_mci_card_init+0x89c>
80005b30:	70 08       	ld.w	r8,r8[0x0]
80005b32:	12 9a       	mov	r10,r9
80005b34:	e0 6b 10 c7 	mov	r11,4295
80005b38:	10 9c       	mov	r12,r8
80005b3a:	f0 1f 00 32 	mcall	80005c00 <sd_mmc_mci_card_init+0x8a4>
80005b3e:	18 98       	mov	r8,r12
80005b40:	58 08       	cp.w	r8,0
80005b42:	c0 30       	breq	80005b48 <sd_mmc_mci_card_init+0x7ec>
        return false;
80005b44:	30 08       	mov	r8,0
80005b46:	c4 c8       	rjmp	80005bde <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80005b48:	4a c8       	lddpc	r8,80005bf8 <sd_mmc_mci_card_init+0x89c>
80005b4a:	70 08       	ld.w	r8,r8[0x0]
80005b4c:	10 9c       	mov	r12,r8
80005b4e:	f0 1f 00 31 	mcall	80005c10 <sd_mmc_mci_card_init+0x8b4>
80005b52:	c0 28       	rjmp	80005b56 <sd_mmc_mci_card_init+0x7fa>
          }
        }
      }

      if (b_hs_supported==false )
        goto sd_mmc_init_step3;
80005b54:	d7 03       	nop
      mci_wait_busy_signal(mci);// read busy state on DAT0
  }

sd_mmc_init_step3:
  // Set clock
  mci_set_speed(mci, g_pbb_hz, g_card_freq[slot]*1000);
80005b56:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005b5a:	4b 68       	lddpc	r8,80005c30 <sd_mmc_mci_card_init+0x8d4>
80005b5c:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80005b60:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80005b64:	e0 68 03 e8 	mov	r8,1000
80005b68:	f2 08 02 48 	mul	r8,r9,r8
80005b6c:	10 9a       	mov	r10,r8
80005b6e:	4a 28       	lddpc	r8,80005bf4 <sd_mmc_mci_card_init+0x898>
80005b70:	70 09       	ld.w	r9,r8[0x0]
80005b72:	4a 28       	lddpc	r8,80005bf8 <sd_mmc_mci_card_init+0x89c>
80005b74:	70 08       	ld.w	r8,r8[0x0]
80005b76:	12 9b       	mov	r11,r9
80005b78:	10 9c       	mov	r12,r8
80005b7a:	f0 1f 00 2f 	mcall	80005c34 <sd_mmc_mci_card_init+0x8d8>

  //-- (CMD13)
  // Check if card is ready, the card must be in TRAN state
  if(sd_mmc_mci_cmd_send_status(slot)!=true)
80005b7e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005b82:	10 9c       	mov	r12,r8
80005b84:	f0 1f 00 2d 	mcall	80005c38 <sd_mmc_mci_card_init+0x8dc>
80005b88:	18 98       	mov	r8,r12
80005b8a:	ec 18 00 01 	eorl	r8,0x1
80005b8e:	5c 58       	castu.b	r8
80005b90:	c0 30       	breq	80005b96 <sd_mmc_mci_card_init+0x83a>
    return false;
80005b92:	30 08       	mov	r8,0
80005b94:	c2 58       	rjmp	80005bde <sd_mmc_mci_card_init+0x882>

  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
80005b96:	49 98       	lddpc	r8,80005bf8 <sd_mmc_mci_card_init+0x89c>
80005b98:	70 08       	ld.w	r8,r8[0x0]
80005b9a:	10 9c       	mov	r12,r8
80005b9c:	f0 1f 00 1a 	mcall	80005c04 <sd_mmc_mci_card_init+0x8a8>
80005ba0:	18 98       	mov	r8,r12
80005ba2:	e4 18 e0 02 	andh	r8,0xe002
80005ba6:	e0 18 0e 00 	andl	r8,0xe00
80005baa:	e0 48 08 00 	cp.w	r8,2048
80005bae:	c0 30       	breq	80005bb4 <sd_mmc_mci_card_init+0x858>
    return false;
80005bb0:	30 08       	mov	r8,0
80005bb2:	c1 68       	rjmp	80005bde <sd_mmc_mci_card_init+0x882>

  //-- (CMD16)
  // Set the card block length to 512B
  if (sd_mmc_set_block_len (slot, SD_MMC_SECTOR_SIZE)!=true)
80005bb4:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005bb8:	e0 6b 02 00 	mov	r11,512
80005bbc:	10 9c       	mov	r12,r8
80005bbe:	f0 1f 00 20 	mcall	80005c3c <sd_mmc_mci_card_init+0x8e0>
80005bc2:	18 98       	mov	r8,r12
80005bc4:	ec 18 00 01 	eorl	r8,0x1
80005bc8:	5c 58       	castu.b	r8
80005bca:	c0 30       	breq	80005bd0 <sd_mmc_mci_card_init+0x874>
    return false;
80005bcc:	30 08       	mov	r8,0
80005bce:	c0 88       	rjmp	80005bde <sd_mmc_mci_card_init+0x882>

  // USB Test Unit Attention requires a state "busy" between "not present" and "ready" state
  // otherwise never report card change
  sd_mmc_mci_init_done[slot] = true;
80005bd0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005bd4:	48 5a       	lddpc	r10,80005be8 <sd_mmc_mci_card_init+0x88c>
80005bd6:	30 18       	mov	r8,1
80005bd8:	f4 09 0b 08 	st.b	r10[r9],r8

  return true;
80005bdc:	30 18       	mov	r8,1
}
80005bde:	10 9c       	mov	r12,r8
80005be0:	2e 9d       	sub	sp,-92
80005be2:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80005be6:	00 00       	add	r0,r0
80005be8:	00 00       	add	r0,r0
80005bea:	04 c0       	st.b	r2++,r0
80005bec:	00 00       	add	r0,r0
80005bee:	0b c4       	ld.ub	r4,r5[0x4]
80005bf0:	00 00       	add	r0,r0
80005bf2:	09 bc       	ld.ub	r12,r4[0x3]
80005bf4:	00 00       	add	r0,r0
80005bf6:	04 c4       	st.b	r2++,r4
80005bf8:	00 00       	add	r0,r0
80005bfa:	00 14       	sub	r4,r0
80005bfc:	80 00       	ld.sh	r0,r0[0x0]
80005bfe:	7b b0       	ld.w	r0,sp[0x6c]
80005c00:	80 00       	ld.sh	r0,r0[0x0]
80005c02:	7c e4       	ld.w	r4,lr[0x38]
80005c04:	80 00       	ld.sh	r0,r0[0x0]
80005c06:	7e 1c       	ld.w	r12,pc[0x4]
80005c08:	00 00       	add	r0,r0
80005c0a:	07 ac       	ld.ub	r12,r3[0x2]
80005c0c:	80 00       	ld.sh	r0,r0[0x0]
80005c0e:	4d 20       	lddpc	r0,80005d54 <sd_mmc_mci_mem_check+0x34>
80005c10:	80 00       	ld.sh	r0,r0[0x0]
80005c12:	7e 38       	ld.w	r8,pc[0xc]
80005c14:	80 00       	ld.sh	r0,r0[0x0]
80005c16:	50 10       	stdsp	sp[0x4],r0
80005c18:	80 00       	ld.sh	r0,r0[0x0]
80005c1a:	7d bc       	ld.w	r12,lr[0x6c]
80005c1c:	80 00       	ld.sh	r0,r0[0x0]
80005c1e:	7c 64       	ld.w	r4,lr[0x18]
80005c20:	80 00       	ld.sh	r0,r0[0x0]
80005c22:	7c ae       	ld.w	lr,lr[0x28]
80005c24:	00 00       	add	r0,r0
80005c26:	06 58       	eor	r8,r3
80005c28:	00 00       	add	r0,r0
80005c2a:	04 c8       	st.b	r2++,r8
80005c2c:	80 00       	ld.sh	r0,r0[0x0]
80005c2e:	ce ac       	rcall	80005e02 <sd_mmc_mci_dma_read_open+0x2>
80005c30:	00 00       	add	r0,r0
80005c32:	09 be       	ld.ub	lr,r4[0x3]
80005c34:	80 00       	ld.sh	r0,r0[0x0]
80005c36:	7a cc       	ld.w	r12,sp[0x30]
80005c38:	80 00       	ld.sh	r0,r0[0x0]
80005c3a:	68 84       	ld.w	r4,r4[0x20]
80005c3c:	80 00       	ld.sh	r0,r0[0x0]
80005c3e:	51 dc       	stdsp	sp[0x74],r12

80005c40 <dma_mci_2_ram>:
    return true;
}
#endif

static void dma_mci_2_ram(void *ram, size_t size)
{
80005c40:	eb cd 40 80 	pushm	r7,lr
80005c44:	1a 97       	mov	r7,sp
80005c46:	20 3d       	sub	sp,12
80005c48:	ef 4c ff f8 	st.w	r7[-8],r12
80005c4c:	ef 4b ff f4 	st.w	r7[-12],r11
  int *pRam = ram;
80005c50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005c54:	ef 48 ff fc 	st.w	r7[-4],r8

  // Src Address: the MCI registers.
  AVR32_DMACA.sar1 = (uint32_t)&AVR32_MCI.fifo;
80005c58:	fc 18 ff 10 	movh	r8,0xff10
80005c5c:	fe 69 42 00 	mov	r9,-114176
80005c60:	f1 49 00 58 	st.w	r8[88],r9

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;
80005c64:	fc 18 ff 10 	movh	r8,0xff10
80005c68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c6c:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80005c70:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
80005c74:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005c78:	a3 89       	lsr	r9,0x2

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80005c7a:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80005c7e:	fc 18 ff 10 	movh	r8,0xff10
80005c82:	e0 69 02 02 	mov	r9,514
80005c86:	f1 49 03 a0 	st.w	r8[928],r9
}
80005c8a:	2f dd       	sub	sp,-12
80005c8c:	e3 cd 80 80 	ldm	sp++,r7,pc

80005c90 <is_dma_mci_2_ram_complete>:

static bool is_dma_mci_2_ram_complete( void )
{
80005c90:	eb cd 40 80 	pushm	r7,lr
80005c94:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
80005c96:	fc 18 ff 10 	movh	r8,0xff10
80005c9a:	f0 f8 03 a0 	ld.w	r8,r8[928]
80005c9e:	e2 18 00 02 	andl	r8,0x2,COH
80005ca2:	c0 30       	breq	80005ca8 <is_dma_mci_2_ram_complete+0x18>
    return false;
80005ca4:	30 08       	mov	r8,0
80005ca6:	c0 28       	rjmp	80005caa <is_dma_mci_2_ram_complete+0x1a>

  return true;
80005ca8:	30 18       	mov	r8,1
}
80005caa:	10 9c       	mov	r12,r8
80005cac:	e3 cd 80 80 	ldm	sp++,r7,pc

80005cb0 <dma_ram_2_mci>:
    return true;
}
#endif

static void dma_ram_2_mci(const void *ram, size_t size)
{
80005cb0:	eb cd 40 80 	pushm	r7,lr
80005cb4:	1a 97       	mov	r7,sp
80005cb6:	20 3d       	sub	sp,12
80005cb8:	ef 4c ff f8 	st.w	r7[-8],r12
80005cbc:	ef 4b ff f4 	st.w	r7[-12],r11
  const unsigned int *pRam = ram;
80005cc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cc4:	ef 48 ff fc 	st.w	r7[-4],r8

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.sar1 = (unsigned long)pRam;
80005cc8:	fc 18 ff 10 	movh	r8,0xff10
80005ccc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005cd0:	f1 49 00 58 	st.w	r8[88],r9

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;
80005cd4:	fc 18 ff 10 	movh	r8,0xff10
80005cd8:	fe 69 42 00 	mov	r9,-114176
80005cdc:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80005ce0:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
80005ce4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005ce8:	a3 89       	lsr	r9,0x2

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80005cea:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80005cee:	fc 18 ff 10 	movh	r8,0xff10
80005cf2:	e0 69 02 02 	mov	r9,514
80005cf6:	f1 49 03 a0 	st.w	r8[928],r9
}
80005cfa:	2f dd       	sub	sp,-12
80005cfc:	e3 cd 80 80 	ldm	sp++,r7,pc

80005d00 <is_dma_ram_2_mci_complete>:

static bool is_dma_ram_2_mci_complete( void )
{
80005d00:	eb cd 40 80 	pushm	r7,lr
80005d04:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
80005d06:	fc 18 ff 10 	movh	r8,0xff10
80005d0a:	f0 f8 03 a0 	ld.w	r8,r8[928]
80005d0e:	e2 18 00 02 	andl	r8,0x2,COH
80005d12:	c0 30       	breq	80005d18 <is_dma_ram_2_mci_complete+0x18>
    return false;
80005d14:	30 08       	mov	r8,0
80005d16:	c0 28       	rjmp	80005d1a <is_dma_ram_2_mci_complete+0x1a>

  return true;
80005d18:	30 18       	mov	r8,1
}
80005d1a:	10 9c       	mov	r12,r8
80005d1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80005d20 <sd_mmc_mci_mem_check>:

  return true;
}

bool sd_mmc_mci_mem_check(uint8_t slot)
{
80005d20:	eb cd 40 80 	pushm	r7,lr
80005d24:	1a 97       	mov	r7,sp
80005d26:	20 2d       	sub	sp,8
80005d28:	18 98       	mov	r8,r12
80005d2a:	ef 68 ff f8 	st.b	r7[-8],r8
  uint8_t timeout_init = 0;
80005d2e:	30 08       	mov	r8,0
80005d30:	ef 68 ff ff 	st.b	r7[-1],r8

  if (slot > MCI_LAST_SLOTS)
80005d34:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005d38:	30 18       	mov	r8,1
80005d3a:	f0 09 18 00 	cp.b	r9,r8
80005d3e:	e0 88 00 04 	brls	80005d46 <sd_mmc_mci_mem_check+0x26>
    return false;
80005d42:	30 08       	mov	r8,0
80005d44:	c4 d8       	rjmp	80005dde <sd_mmc_mci_mem_check+0xbe>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80005d46:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d4a:	4a 89       	lddpc	r9,80005de8 <sd_mmc_mci_mem_check+0xc8>
80005d4c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005d50:	10 9a       	mov	r10,r8
80005d52:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005d56:	4a 68       	lddpc	r8,80005dec <sd_mmc_mci_mem_check+0xcc>
80005d58:	70 08       	ld.w	r8,r8[0x0]
80005d5a:	12 9b       	mov	r11,r9
80005d5c:	10 9c       	mov	r12,r8
80005d5e:	f0 1f 00 25 	mcall	80005df0 <sd_mmc_mci_mem_check+0xd0>

  // Check card presence
  if (is_sd_mmc_mci_card_present(slot) == false)
80005d62:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d66:	10 9c       	mov	r12,r8
80005d68:	f0 1f 00 23 	mcall	80005df4 <sd_mmc_mci_mem_check+0xd4>
80005d6c:	18 98       	mov	r8,r12
80005d6e:	ec 18 00 01 	eorl	r8,0x1
80005d72:	5c 58       	castu.b	r8
80005d74:	c0 90       	breq	80005d86 <sd_mmc_mci_mem_check+0x66>
  {
    sd_mmc_mci_init_done[slot] = false;
80005d76:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005d7a:	4a 0a       	lddpc	r10,80005df8 <sd_mmc_mci_mem_check+0xd8>
80005d7c:	30 08       	mov	r8,0
80005d7e:	f4 09 0b 08 	st.b	r10[r9],r8
    return false;
80005d82:	30 08       	mov	r8,0
80005d84:	c2 d8       	rjmp	80005dde <sd_mmc_mci_mem_check+0xbe>
  }

  if (sd_mmc_mci_init_done[slot] == false)
80005d86:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d8a:	49 c9       	lddpc	r9,80005df8 <sd_mmc_mci_mem_check+0xd8>
80005d8c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005d90:	ec 18 00 01 	eorl	r8,0x1
80005d94:	5c 58       	castu.b	r8
80005d96:	c1 a0       	breq	80005dca <sd_mmc_mci_mem_check+0xaa>
  {
    while (sd_mmc_mci_card_init(slot)!=true)
80005d98:	c0 f8       	rjmp	80005db6 <sd_mmc_mci_mem_check+0x96>
    {
      timeout_init++;
80005d9a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005d9e:	2f f8       	sub	r8,-1
80005da0:	ef 68 ff ff 	st.b	r7[-1],r8
      if (timeout_init>10) return false;
80005da4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005da8:	30 a8       	mov	r8,10
80005daa:	f0 09 18 00 	cp.b	r9,r8
80005dae:	e0 88 00 04 	brls	80005db6 <sd_mmc_mci_mem_check+0x96>
80005db2:	30 08       	mov	r8,0
80005db4:	c1 58       	rjmp	80005dde <sd_mmc_mci_mem_check+0xbe>
    return false;
  }

  if (sd_mmc_mci_init_done[slot] == false)
  {
    while (sd_mmc_mci_card_init(slot)!=true)
80005db6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005dba:	10 9c       	mov	r12,r8
80005dbc:	f0 1f 00 10 	mcall	80005dfc <sd_mmc_mci_mem_check+0xdc>
80005dc0:	18 98       	mov	r8,r12
80005dc2:	ec 18 00 01 	eorl	r8,0x1
80005dc6:	5c 58       	castu.b	r8
80005dc8:	ce 91       	brne	80005d9a <sd_mmc_mci_mem_check+0x7a>
    {
      timeout_init++;
      if (timeout_init>10) return false;
    }
  }
  if (sd_mmc_mci_init_done[slot] == true)
80005dca:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005dce:	48 b9       	lddpc	r9,80005df8 <sd_mmc_mci_mem_check+0xd8>
80005dd0:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005dd4:	58 08       	cp.w	r8,0
80005dd6:	c0 30       	breq	80005ddc <sd_mmc_mci_mem_check+0xbc>
    return true;
80005dd8:	30 18       	mov	r8,1
80005dda:	c0 28       	rjmp	80005dde <sd_mmc_mci_mem_check+0xbe>
  else
    return false;
80005ddc:	30 08       	mov	r8,0
}
80005dde:	10 9c       	mov	r12,r8
80005de0:	2f ed       	sub	sp,-8
80005de2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005de6:	00 00       	add	r0,r0
80005de8:	00 00       	add	r0,r0
80005dea:	09 bc       	ld.ub	r12,r4[0x3]
80005dec:	00 00       	add	r0,r0
80005dee:	00 14       	sub	r4,r0
80005df0:	80 00       	ld.sh	r0,r0[0x0]
80005df2:	7e 7c       	ld.w	r12,pc[0x1c]
80005df4:	80 00       	ld.sh	r0,r0[0x0]
80005df6:	4c 68       	lddpc	r8,80005f0c <sd_mmc_mci_dma_read_open+0x10c>
80005df8:	00 00       	add	r0,r0
80005dfa:	04 c0       	st.b	r2++,r0
80005dfc:	80 00       	ld.sh	r0,r0[0x0]
80005dfe:	53 5c       	stdsp	sp[0xd4],r12

80005e00 <sd_mmc_mci_dma_read_open>:

  return true;
}

bool sd_mmc_mci_dma_read_open(uint8_t slot, uint32_t pos, void* ram, uint16_t nb_sector)
{
80005e00:	eb cd 40 80 	pushm	r7,lr
80005e04:	1a 97       	mov	r7,sp
80005e06:	20 5d       	sub	sp,20
80005e08:	ef 4b ff f4 	st.w	r7[-12],r11
80005e0c:	ef 4a ff f0 	st.w	r7[-16],r10
80005e10:	12 98       	mov	r8,r9
80005e12:	18 99       	mov	r9,r12
80005e14:	ef 69 ff f8 	st.b	r7[-8],r9
80005e18:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
80005e1c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005e20:	30 18       	mov	r8,1
80005e22:	f0 09 18 00 	cp.b	r9,r8
80005e26:	e0 88 00 04 	brls	80005e2e <sd_mmc_mci_dma_read_open+0x2e>
    return false;
80005e2a:	30 08       	mov	r8,0
80005e2c:	c9 a8       	rjmp	80005f60 <sd_mmc_mci_dma_read_open+0x160>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80005e2e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005e32:	4c e9       	lddpc	r9,80005f68 <sd_mmc_mci_dma_read_open+0x168>
80005e34:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005e38:	10 9a       	mov	r10,r8
80005e3a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005e3e:	4c c8       	lddpc	r8,80005f6c <sd_mmc_mci_dma_read_open+0x16c>
80005e40:	70 08       	ld.w	r8,r8[0x0]
80005e42:	12 9b       	mov	r11,r9
80005e44:	10 9c       	mov	r12,r8
80005e46:	f0 1f 00 4b 	mcall	80005f70 <sd_mmc_mci_dma_read_open+0x170>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
80005e4a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005e4e:	4c a8       	lddpc	r8,80005f74 <sd_mmc_mci_dma_read_open+0x174>
80005e50:	ee fa ff f4 	ld.w	r10,r7[-12]
80005e54:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
80005e58:	4c 58       	lddpc	r8,80005f6c <sd_mmc_mci_dma_read_open+0x16c>
80005e5a:	70 08       	ld.w	r8,r8[0x0]
80005e5c:	10 9c       	mov	r12,r8
80005e5e:	f0 1f 00 47 	mcall	80005f78 <sd_mmc_mci_dma_read_open+0x178>

  addr =  gl_ptr_mem[slot];
80005e62:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005e66:	4c 48       	lddpc	r8,80005f74 <sd_mmc_mci_dma_read_open+0x174>
80005e68:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80005e6c:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
80005e70:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005e74:	4c 29       	lddpc	r9,80005f7c <sd_mmc_mci_dma_read_open+0x17c>
80005e76:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005e7a:	e2 18 00 10 	andl	r8,0x10,COH
80005e7e:	c0 e1       	brne	80005e9a <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
80005e80:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005e84:	4b e9       	lddpc	r9,80005f7c <sd_mmc_mci_dma_read_open+0x17c>
80005e86:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005e8a:	e2 18 00 20 	andl	r8,0x20,COH
  // wait for MMC not busy
  mci_wait_busy_signal(mci);

  addr =  gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
80005e8e:	c0 61       	brne	80005e9a <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
80005e90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e94:	a9 78       	lsl	r8,0x9
80005e96:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  //** (CMD13)
  // Necessary to clear flag error "ADDRESS_OUT_OF_RANGE" (ID LABO = MMC15)
  if(mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80005e9a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005e9e:	4b 98       	lddpc	r8,80005f80 <sd_mmc_mci_dma_read_open+0x180>
80005ea0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005ea4:	4b 28       	lddpc	r8,80005f6c <sd_mmc_mci_dma_read_open+0x16c>
80005ea6:	70 08       	ld.w	r8,r8[0x0]
80005ea8:	12 9a       	mov	r10,r9
80005eaa:	e0 6b 10 4d 	mov	r11,4173
80005eae:	10 9c       	mov	r12,r8
80005eb0:	f0 1f 00 35 	mcall	80005f84 <sd_mmc_mci_dma_read_open+0x184>
80005eb4:	18 98       	mov	r8,r12
80005eb6:	58 08       	cp.w	r8,0
80005eb8:	c0 30       	breq	80005ebe <sd_mmc_mci_dma_read_open+0xbe>
  {
    return false;
80005eba:	30 08       	mov	r8,0
80005ebc:	c5 28       	rjmp	80005f60 <sd_mmc_mci_dma_read_open+0x160>
  }

  // Request Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
80005ebe:	4a c8       	lddpc	r8,80005f6c <sd_mmc_mci_dma_read_open+0x16c>
80005ec0:	70 08       	ld.w	r8,r8[0x0]
80005ec2:	e0 6b 02 00 	mov	r11,512
80005ec6:	10 9c       	mov	r12,r8
80005ec8:	f0 1f 00 30 	mcall	80005f88 <sd_mmc_mci_dma_read_open+0x188>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
80005ecc:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80005ed0:	4a 78       	lddpc	r8,80005f6c <sd_mmc_mci_dma_read_open+0x16c>
80005ed2:	70 08       	ld.w	r8,r8[0x0]
80005ed4:	12 9b       	mov	r11,r9
80005ed6:	10 9c       	mov	r12,r8
80005ed8:	f0 1f 00 2d 	mcall	80005f8c <sd_mmc_mci_dma_read_open+0x18c>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
80005edc:	fc 18 ff 10 	movh	r8,0xff10
80005ee0:	30 19       	mov	r9,1
80005ee2:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
80005ee6:	fe 68 40 00 	mov	r8,-114688
80005eea:	30 09       	mov	r9,0
80005eec:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
80005ef0:	fc 18 ff 10 	movh	r8,0xff10
80005ef4:	30 09       	mov	r9,0
80005ef6:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
80005efa:	fc 18 ff 10 	movh	r8,0xff10
80005efe:	e0 69 d8 24 	mov	r9,55332
80005f02:	ea 19 00 a0 	orh	r9,0xa0
80005f06:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
80005f0a:	fc 18 ff 10 	movh	r8,0xff10
80005f0e:	30 09       	mov	r9,0
80005f10:	f1 49 00 98 	st.w	r8[152],r9
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: ignored because the dst is memory.
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: hw handshaking
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80005f14:	fc 18 ff 10 	movh	r8,0xff10
80005f18:	e0 69 01 00 	mov	r9,256
80005f1c:	f1 49 00 9c 	st.w	r8[156],r9
    (0                      << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf: ignored because the dst is memory.
    (AVR32_DMACA_CH_MMCI_RX << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf:
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
80005f20:	fe 68 40 00 	mov	r8,-114688
80005f24:	e0 69 01 30 	mov	r9,304
80005f28:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD17)
  if(mci_send_cmd(mci, SD_MMC_READ_MULTIPLE_BLOCK_CMD, addr)!=MCI_SUCCESS)
80005f2c:	49 08       	lddpc	r8,80005f6c <sd_mmc_mci_dma_read_open+0x16c>
80005f2e:	70 08       	ld.w	r8,r8[0x0]
80005f30:	ee fa ff fc 	ld.w	r10,r7[-4]
80005f34:	ec 7b 10 52 	mov	r11,856146
80005f38:	10 9c       	mov	r12,r8
80005f3a:	f0 1f 00 13 	mcall	80005f84 <sd_mmc_mci_dma_read_open+0x184>
80005f3e:	18 98       	mov	r8,r12
80005f40:	58 08       	cp.w	r8,0
80005f42:	c0 30       	breq	80005f48 <sd_mmc_mci_dma_read_open+0x148>
  {
    return false;
80005f44:	30 08       	mov	r8,0
80005f46:	c0 d8       	rjmp	80005f60 <sd_mmc_mci_dma_read_open+0x160>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
80005f48:	48 98       	lddpc	r8,80005f6c <sd_mmc_mci_dma_read_open+0x16c>
80005f4a:	70 08       	ld.w	r8,r8[0x0]
80005f4c:	10 9c       	mov	r12,r8
80005f4e:	f0 1f 00 11 	mcall	80005f90 <sd_mmc_mci_dma_read_open+0x190>
80005f52:	18 98       	mov	r8,r12
80005f54:	e6 18 f0 50 	andh	r8,0xf050,COH
80005f58:	c0 30       	breq	80005f5e <sd_mmc_mci_dma_read_open+0x15e>
  {
    return false;
80005f5a:	30 08       	mov	r8,0
80005f5c:	c0 28       	rjmp	80005f60 <sd_mmc_mci_dma_read_open+0x160>
  }

  return true;
80005f5e:	30 18       	mov	r8,1
}
80005f60:	10 9c       	mov	r12,r8
80005f62:	2f bd       	sub	sp,-20
80005f64:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f68:	00 00       	add	r0,r0
80005f6a:	09 bc       	ld.ub	r12,r4[0x3]
80005f6c:	00 00       	add	r0,r0
80005f6e:	00 14       	sub	r4,r0
80005f70:	80 00       	ld.sh	r0,r0[0x0]
80005f72:	7e 7c       	ld.w	r12,pc[0x1c]
80005f74:	00 00       	add	r0,r0
80005f76:	04 cc       	st.b	r2++,r12
80005f78:	80 00       	ld.sh	r0,r0[0x0]
80005f7a:	7e 38       	ld.w	r8,pc[0xc]
80005f7c:	00 00       	add	r0,r0
80005f7e:	0b c4       	ld.ub	r4,r5[0x4]
80005f80:	00 00       	add	r0,r0
80005f82:	07 ac       	ld.ub	r12,r3[0x2]
80005f84:	80 00       	ld.sh	r0,r0[0x0]
80005f86:	7c e4       	ld.w	r4,lr[0x38]
80005f88:	80 00       	ld.sh	r0,r0[0x0]
80005f8a:	7c 64       	ld.w	r4,lr[0x18]
80005f8c:	80 00       	ld.sh	r0,r0[0x0]
80005f8e:	7c ae       	ld.w	lr,lr[0x28]
80005f90:	80 00       	ld.sh	r0,r0[0x0]
80005f92:	7e 1c       	ld.w	r12,pc[0x4]

80005f94 <sd_mmc_mci_read_close>:

bool sd_mmc_mci_read_close (uint8_t slot)
{
80005f94:	eb cd 40 80 	pushm	r7,lr
80005f98:	1a 97       	mov	r7,sp
80005f9a:	20 3d       	sub	sp,12
80005f9c:	18 98       	mov	r8,r12
80005f9e:	ef 68 ff f4 	st.b	r7[-12],r8
  if( (mci_crc_error(mci)) )
80005fa2:	4a 08       	lddpc	r8,80006020 <sd_mmc_mci_read_close+0x8c>
80005fa4:	70 08       	ld.w	r8,r8[0x0]
80005fa6:	ef 48 ff f8 	st.w	r7[-8],r8
80005faa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fae:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80005fb2:	49 d8       	lddpc	r8,80006024 <sd_mmc_mci_read_close+0x90>
80005fb4:	70 08       	ld.w	r8,r8[0x0]
80005fb6:	10 99       	mov	r9,r8
80005fb8:	e6 19 01 e0 	andh	r9,0x1e0,COH
80005fbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fc0:	71 08       	ld.w	r8,r8[0x40]
80005fc2:	f3 e8 10 08 	or	r8,r9,r8
80005fc6:	10 99       	mov	r9,r8
80005fc8:	49 78       	lddpc	r8,80006024 <sd_mmc_mci_read_close+0x90>
80005fca:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80005fcc:	49 68       	lddpc	r8,80006024 <sd_mmc_mci_read_close+0x90>
80005fce:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
80005fd0:	e6 18 00 20 	andh	r8,0x20,COH
80005fd4:	c0 90       	breq	80005fe6 <sd_mmc_mci_read_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
80005fd6:	49 48       	lddpc	r8,80006024 <sd_mmc_mci_read_close+0x90>
80005fd8:	70 08       	ld.w	r8,r8[0x0]
80005fda:	10 99       	mov	r9,r8
80005fdc:	b5 d9       	cbr	r9,0x15
80005fde:	49 28       	lddpc	r8,80006024 <sd_mmc_mci_read_close+0x90>
80005fe0:	91 09       	st.w	r8[0x0],r9
    return true;
80005fe2:	30 18       	mov	r8,1
80005fe4:	c0 28       	rjmp	80005fe8 <sd_mmc_mci_read_close+0x54>
  }
  else
    return false;
80005fe6:	30 08       	mov	r8,0
80005fe8:	58 08       	cp.w	r8,0
80005fea:	c0 30       	breq	80005ff0 <sd_mmc_mci_read_close+0x5c>
  {
    return false;  // An CRC error has been seen
80005fec:	30 08       	mov	r8,0
80005fee:	c1 48       	rjmp	80006016 <sd_mmc_mci_read_close+0x82>
  }

  mci_wait_busy_signal(mci);
80005ff0:	48 c8       	lddpc	r8,80006020 <sd_mmc_mci_read_close+0x8c>
80005ff2:	70 08       	ld.w	r8,r8[0x0]
80005ff4:	10 9c       	mov	r12,r8
80005ff6:	f0 1f 00 0d 	mcall	80006028 <sd_mmc_mci_read_close+0x94>

  if( mci_send_cmd( mci, SD_MMC_STOP_READ_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
80005ffa:	48 a8       	lddpc	r8,80006020 <sd_mmc_mci_read_close+0x8c>
80005ffc:	70 08       	ld.w	r8,r8[0x0]
80005ffe:	3f fa       	mov	r10,-1
80006000:	e2 6b 10 4c 	mov	r11,135244
80006004:	10 9c       	mov	r12,r8
80006006:	f0 1f 00 0a 	mcall	8000602c <sd_mmc_mci_read_close+0x98>
8000600a:	18 98       	mov	r8,r12
8000600c:	58 08       	cp.w	r8,0
8000600e:	c0 30       	breq	80006014 <sd_mmc_mci_read_close+0x80>
    return false;
80006010:	30 08       	mov	r8,0
80006012:	c0 28       	rjmp	80006016 <sd_mmc_mci_read_close+0x82>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  return true;
80006014:	30 18       	mov	r8,1
}
80006016:	10 9c       	mov	r12,r8
80006018:	2f dd       	sub	sp,-12
8000601a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000601e:	00 00       	add	r0,r0
80006020:	00 00       	add	r0,r0
80006022:	00 14       	sub	r4,r0
80006024:	00 00       	add	r0,r0
80006026:	06 58       	eor	r8,r3
80006028:	80 00       	ld.sh	r0,r0[0x0]
8000602a:	7e 38       	ld.w	r8,pc[0xc]
8000602c:	80 00       	ld.sh	r0,r0[0x0]
8000602e:	7c e4       	ld.w	r4,lr[0x38]

80006030 <sd_mmc_mci_dma_write_open>:

  return true;
}

bool sd_mmc_mci_dma_write_open (uint8_t slot, uint32_t pos, const void* ram, uint16_t nb_sector)
{
80006030:	eb cd 40 80 	pushm	r7,lr
80006034:	1a 97       	mov	r7,sp
80006036:	20 5d       	sub	sp,20
80006038:	ef 4b ff f4 	st.w	r7[-12],r11
8000603c:	ef 4a ff f0 	st.w	r7[-16],r10
80006040:	12 98       	mov	r8,r9
80006042:	18 99       	mov	r9,r12
80006044:	ef 69 ff f8 	st.b	r7[-8],r9
80006048:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
8000604c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006050:	30 18       	mov	r8,1
80006052:	f0 09 18 00 	cp.b	r9,r8
80006056:	e0 88 00 04 	brls	8000605e <sd_mmc_mci_dma_write_open+0x2e>
    return false;
8000605a:	30 08       	mov	r8,0
8000605c:	c8 88       	rjmp	8000616c <sd_mmc_mci_dma_write_open+0x13c>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000605e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006062:	4c 59       	lddpc	r9,80006174 <sd_mmc_mci_dma_write_open+0x144>
80006064:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006068:	10 9a       	mov	r10,r8
8000606a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000606e:	4c 38       	lddpc	r8,80006178 <sd_mmc_mci_dma_write_open+0x148>
80006070:	70 08       	ld.w	r8,r8[0x0]
80006072:	12 9b       	mov	r11,r9
80006074:	10 9c       	mov	r12,r8
80006076:	f0 1f 00 42 	mcall	8000617c <sd_mmc_mci_dma_write_open+0x14c>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
8000607a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000607e:	4c 18       	lddpc	r8,80006180 <sd_mmc_mci_dma_write_open+0x150>
80006080:	ee fa ff f4 	ld.w	r10,r7[-12]
80006084:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
80006088:	4b c8       	lddpc	r8,80006178 <sd_mmc_mci_dma_write_open+0x148>
8000608a:	70 08       	ld.w	r8,r8[0x0]
8000608c:	10 9c       	mov	r12,r8
8000608e:	f0 1f 00 3e 	mcall	80006184 <sd_mmc_mci_dma_write_open+0x154>
      return false;
   }
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
80006092:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006096:	4b b8       	lddpc	r8,80006180 <sd_mmc_mci_dma_write_open+0x150>
80006098:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000609c:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800060a0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800060a4:	4b 99       	lddpc	r9,80006188 <sd_mmc_mci_dma_write_open+0x158>
800060a6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800060aa:	e2 18 00 10 	andl	r8,0x10,COH
800060ae:	c0 e1       	brne	800060ca <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
800060b0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800060b4:	4b 59       	lddpc	r9,80006188 <sd_mmc_mci_dma_write_open+0x158>
800060b6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800060ba:	e2 18 00 20 	andl	r8,0x20,COH
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800060be:	c0 61       	brne	800060ca <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
800060c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060c4:	a9 78       	lsl	r8,0x9
800060c6:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  // Set Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
800060ca:	4a c8       	lddpc	r8,80006178 <sd_mmc_mci_dma_write_open+0x148>
800060cc:	70 08       	ld.w	r8,r8[0x0]
800060ce:	e0 6b 02 00 	mov	r11,512
800060d2:	10 9c       	mov	r12,r8
800060d4:	f0 1f 00 2e 	mcall	8000618c <sd_mmc_mci_dma_write_open+0x15c>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
800060d8:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800060dc:	4a 78       	lddpc	r8,80006178 <sd_mmc_mci_dma_write_open+0x148>
800060de:	70 08       	ld.w	r8,r8[0x0]
800060e0:	12 9b       	mov	r11,r9
800060e2:	10 9c       	mov	r12,r8
800060e4:	f0 1f 00 2b 	mcall	80006190 <sd_mmc_mci_dma_write_open+0x160>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
800060e8:	fc 18 ff 10 	movh	r8,0xff10
800060ec:	30 19       	mov	r9,1
800060ee:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
800060f2:	fe 68 40 00 	mov	r8,-114688
800060f6:	30 09       	mov	r9,0
800060f8:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
800060fc:	fc 18 ff 10 	movh	r8,0xff10
80006100:	30 09       	mov	r9,0
80006102:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
80006106:	fc 18 ff 10 	movh	r8,0xff10
8000610a:	e0 69 d8 24 	mov	r9,55332
8000610e:	ea 19 02 10 	orh	r9,0x210
80006112:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
80006116:	fc 18 ff 10 	movh	r8,0xff10
8000611a:	30 09       	mov	r9,0
8000611c:	f1 49 00 98 	st.w	r8[152],r9
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: hw handshaking
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80006120:	fc 18 ff 10 	movh	r8,0xff10
80006124:	e0 69 18 00 	mov	r9,6144
80006128:	f1 49 00 9c 	st.w	r8[156],r9
    (AVR32_DMACA_CH_MMCI_TX << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf:
    (0                      << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
8000612c:	fe 68 40 00 	mov	r8,-114688
80006130:	e0 69 01 30 	mov	r9,304
80006134:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD24)
  if(mci_send_cmd(mci, SD_MMC_WRITE_MULTIPLE_BLOCK_CMD, addr )!=MCI_SUCCESS)
80006138:	49 08       	lddpc	r8,80006178 <sd_mmc_mci_dma_write_open+0x148>
8000613a:	70 08       	ld.w	r8,r8[0x0]
8000613c:	ee fa ff fc 	ld.w	r10,r7[-4]
80006140:	e8 7b 10 59 	mov	r11,594009
80006144:	10 9c       	mov	r12,r8
80006146:	f0 1f 00 14 	mcall	80006194 <sd_mmc_mci_dma_write_open+0x164>
8000614a:	18 98       	mov	r8,r12
8000614c:	58 08       	cp.w	r8,0
8000614e:	c0 30       	breq	80006154 <sd_mmc_mci_dma_write_open+0x124>
  {
    return false;
80006150:	30 08       	mov	r8,0
80006152:	c0 d8       	rjmp	8000616c <sd_mmc_mci_dma_write_open+0x13c>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
80006154:	48 98       	lddpc	r8,80006178 <sd_mmc_mci_dma_write_open+0x148>
80006156:	70 08       	ld.w	r8,r8[0x0]
80006158:	10 9c       	mov	r12,r8
8000615a:	f0 1f 00 10 	mcall	80006198 <sd_mmc_mci_dma_write_open+0x168>
8000615e:	18 98       	mov	r8,r12
80006160:	e6 18 f0 50 	andh	r8,0xf050,COH
80006164:	c0 30       	breq	8000616a <sd_mmc_mci_dma_write_open+0x13a>
  {
    return false;
80006166:	30 08       	mov	r8,0
80006168:	c0 28       	rjmp	8000616c <sd_mmc_mci_dma_write_open+0x13c>
  }

  return true;
8000616a:	30 18       	mov	r8,1
}
8000616c:	10 9c       	mov	r12,r8
8000616e:	2f bd       	sub	sp,-20
80006170:	e3 cd 80 80 	ldm	sp++,r7,pc
80006174:	00 00       	add	r0,r0
80006176:	09 bc       	ld.ub	r12,r4[0x3]
80006178:	00 00       	add	r0,r0
8000617a:	00 14       	sub	r4,r0
8000617c:	80 00       	ld.sh	r0,r0[0x0]
8000617e:	7e 7c       	ld.w	r12,pc[0x1c]
80006180:	00 00       	add	r0,r0
80006182:	04 cc       	st.b	r2++,r12
80006184:	80 00       	ld.sh	r0,r0[0x0]
80006186:	7e 38       	ld.w	r8,pc[0xc]
80006188:	00 00       	add	r0,r0
8000618a:	0b c4       	ld.ub	r4,r5[0x4]
8000618c:	80 00       	ld.sh	r0,r0[0x0]
8000618e:	7c 64       	ld.w	r4,lr[0x18]
80006190:	80 00       	ld.sh	r0,r0[0x0]
80006192:	7c ae       	ld.w	lr,lr[0x28]
80006194:	80 00       	ld.sh	r0,r0[0x0]
80006196:	7c e4       	ld.w	r4,lr[0x38]
80006198:	80 00       	ld.sh	r0,r0[0x0]
8000619a:	7e 1c       	ld.w	r12,pc[0x4]

8000619c <sd_mmc_mci_write_close>:

bool sd_mmc_mci_write_close (uint8_t slot)
{
8000619c:	eb cd 40 80 	pushm	r7,lr
800061a0:	1a 97       	mov	r7,sp
800061a2:	20 5d       	sub	sp,20
800061a4:	18 98       	mov	r8,r12
800061a6:	ef 68 ff ec 	st.b	r7[-20],r8
  if( (mci_crc_error(mci)) )
800061aa:	4b 58       	lddpc	r8,8000627c <sd_mmc_mci_write_close+0xe0>
800061ac:	70 08       	ld.w	r8,r8[0x0]
800061ae:	ef 48 ff f0 	st.w	r7[-16],r8
800061b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800061b6:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800061ba:	4b 28       	lddpc	r8,80006280 <sd_mmc_mci_write_close+0xe4>
800061bc:	70 08       	ld.w	r8,r8[0x0]
800061be:	10 99       	mov	r9,r8
800061c0:	e6 19 01 e0 	andh	r9,0x1e0,COH
800061c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061c8:	71 08       	ld.w	r8,r8[0x40]
800061ca:	f3 e8 10 08 	or	r8,r9,r8
800061ce:	10 99       	mov	r9,r8
800061d0:	4a c8       	lddpc	r8,80006280 <sd_mmc_mci_write_close+0xe4>
800061d2:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800061d4:	4a b8       	lddpc	r8,80006280 <sd_mmc_mci_write_close+0xe4>
800061d6:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
800061d8:	e6 18 00 20 	andh	r8,0x20,COH
800061dc:	c0 90       	breq	800061ee <sd_mmc_mci_write_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
800061de:	4a 98       	lddpc	r8,80006280 <sd_mmc_mci_write_close+0xe4>
800061e0:	70 08       	ld.w	r8,r8[0x0]
800061e2:	10 99       	mov	r9,r8
800061e4:	b5 d9       	cbr	r9,0x15
800061e6:	4a 78       	lddpc	r8,80006280 <sd_mmc_mci_write_close+0xe4>
800061e8:	91 09       	st.w	r8[0x0],r9
    return true;
800061ea:	30 18       	mov	r8,1
800061ec:	c0 28       	rjmp	800061f0 <sd_mmc_mci_write_close+0x54>
  }
  else
    return false;
800061ee:	30 08       	mov	r8,0
800061f0:	58 08       	cp.w	r8,0
800061f2:	c0 30       	breq	800061f8 <sd_mmc_mci_write_close+0x5c>
  {
    return false;  // An CRC error has been seen
800061f4:	30 08       	mov	r8,0
800061f6:	c3 e8       	rjmp	80006272 <sd_mmc_mci_write_close+0xd6>
  }

  while(!(mci_data_block_ended(mci)));
800061f8:	4a 18       	lddpc	r8,8000627c <sd_mmc_mci_write_close+0xe0>
800061fa:	70 08       	ld.w	r8,r8[0x0]
800061fc:	ef 48 ff f8 	st.w	r7[-8],r8
80006200:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006204:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006208:	49 e8       	lddpc	r8,80006280 <sd_mmc_mci_write_close+0xe4>
8000620a:	70 08       	ld.w	r8,r8[0x0]
8000620c:	10 99       	mov	r9,r8
8000620e:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006212:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006216:	71 08       	ld.w	r8,r8[0x40]
80006218:	f3 e8 10 08 	or	r8,r9,r8
8000621c:	10 99       	mov	r9,r8
8000621e:	49 98       	lddpc	r8,80006280 <sd_mmc_mci_write_close+0xe4>
80006220:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006222:	49 88       	lddpc	r8,80006280 <sd_mmc_mci_write_close+0xe4>
80006224:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_data_block_ended(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_XFRDONE_MASK) != 0;
80006226:	e6 18 08 00 	andh	r8,0x800,COH
8000622a:	5f 18       	srne	r8
8000622c:	58 08       	cp.w	r8,0
8000622e:	ce 50       	breq	800061f8 <sd_mmc_mci_write_close+0x5c>

  if( mci_send_cmd( mci, SD_MMC_STOP_WRITE_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
80006230:	49 38       	lddpc	r8,8000627c <sd_mmc_mci_write_close+0xe0>
80006232:	70 08       	ld.w	r8,r8[0x0]
80006234:	3f fa       	mov	r10,-1
80006236:	e2 6b 10 cc 	mov	r11,135372
8000623a:	10 9c       	mov	r12,r8
8000623c:	f0 1f 00 12 	mcall	80006284 <sd_mmc_mci_write_close+0xe8>
80006240:	18 98       	mov	r8,r12
80006242:	58 08       	cp.w	r8,0
80006244:	c0 30       	breq	8000624a <sd_mmc_mci_write_close+0xae>
  {
    return false;
80006246:	30 08       	mov	r8,0
80006248:	c1 58       	rjmp	80006272 <sd_mmc_mci_write_close+0xd6>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  if( slot==SD_SLOT_4BITS )
8000624a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000624e:	30 18       	mov	r8,1
80006250:	f0 09 18 00 	cp.b	r9,r8
80006254:	c0 81       	brne	80006264 <sd_mmc_mci_write_close+0xc8>
  {
    while(!(gpio_get_pin_value(SD_SLOT_4BITS_DATA0_PIN)));                             // Wait until the card is ready.
80006256:	31 3c       	mov	r12,19
80006258:	f0 1f 00 0c 	mcall	80006288 <sd_mmc_mci_write_close+0xec>
8000625c:	18 98       	mov	r8,r12
8000625e:	58 08       	cp.w	r8,0
80006260:	cf b0       	breq	80006256 <sd_mmc_mci_write_close+0xba>
80006262:	c0 78       	rjmp	80006270 <sd_mmc_mci_write_close+0xd4>
  }
  else
  {
    while(!(gpio_get_pin_value(SD_SLOT_8BITS_DATA0_PIN)));                             // Wait until the card is ready.
80006264:	31 dc       	mov	r12,29
80006266:	f0 1f 00 09 	mcall	80006288 <sd_mmc_mci_write_close+0xec>
8000626a:	18 98       	mov	r8,r12
8000626c:	58 08       	cp.w	r8,0
8000626e:	cf b0       	breq	80006264 <sd_mmc_mci_write_close+0xc8>
  }
  return true;
80006270:	30 18       	mov	r8,1
}
80006272:	10 9c       	mov	r12,r8
80006274:	2f bd       	sub	sp,-20
80006276:	e3 cd 80 80 	ldm	sp++,r7,pc
8000627a:	00 00       	add	r0,r0
8000627c:	00 00       	add	r0,r0
8000627e:	00 14       	sub	r4,r0
80006280:	00 00       	add	r0,r0
80006282:	06 58       	eor	r8,r3
80006284:	80 00       	ld.sh	r0,r0[0x0]
80006286:	7c e4       	ld.w	r4,lr[0x38]
80006288:	80 00       	ld.sh	r0,r0[0x0]
8000628a:	77 10       	ld.w	r0,r11[0x44]

8000628c <int2alpha>:

char Statement[MSG_LENGTH] = {0};
uint16_t enciphered_blocks = 0, deciphered_blocks = 0, aes_step = 0;
//MESSAGE_STRING_t Lcd_Message;
void int2alpha (uint16_t value, char * dest)
{
8000628c:	eb cd 40 80 	pushm	r7,lr
80006290:	1a 97       	mov	r7,sp
80006292:	20 5d       	sub	sp,20
80006294:	18 98       	mov	r8,r12
80006296:	ef 4b ff ec 	st.w	r7[-20],r11
8000629a:	ef 58 ff f0 	st.h	r7[-16],r8
	uint8_t i = 0, value_len = 0, temp[10];
8000629e:	30 08       	mov	r8,0
800062a0:	ef 68 ff fe 	st.b	r7[-2],r8
800062a4:	30 08       	mov	r8,0
800062a6:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (value == 0)
800062aa:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800062ae:	30 08       	mov	r8,0
800062b0:	f0 09 19 00 	cp.h	r9,r8
800062b4:	c2 c1       	brne	8000630c <int2alpha+0x80>
	{
		return;
800062b6:	c5 68       	rjmp	80006362 <int2alpha+0xd6>
	}
	while (value != 0)
	{
		temp[i++] = value % 10 + '0';
800062b8:	ef 3b ff fe 	ld.ub	r11,r7[-2]
800062bc:	ef 1a ff f0 	ld.uh	r10,r7[-16]
800062c0:	e0 68 cc cd 	mov	r8,52429
800062c4:	ea 18 cc cc 	orh	r8,0xcccc
800062c8:	f4 08 06 48 	mulu.d	r8,r10,r8
800062cc:	a3 99       	lsr	r9,0x3
800062ce:	12 98       	mov	r8,r9
800062d0:	a3 68       	lsl	r8,0x2
800062d2:	12 08       	add	r8,r9
800062d4:	a1 78       	lsl	r8,0x1
800062d6:	f4 08 01 08 	sub	r8,r10,r8
800062da:	5c 88       	casts.h	r8
800062dc:	5c 58       	castu.b	r8
800062de:	2d 08       	sub	r8,-48
800062e0:	5c 58       	castu.b	r8
800062e2:	ee 0b 00 09 	add	r9,r7,r11
800062e6:	f3 68 ff f4 	st.b	r9[-12],r8
800062ea:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800062ee:	2f f8       	sub	r8,-1
800062f0:	ef 68 ff fe 	st.b	r7[-2],r8
		value /= 10;
800062f4:	ef 19 ff f0 	ld.uh	r9,r7[-16]
800062f8:	e0 68 cc cd 	mov	r8,52429
800062fc:	ea 18 cc cc 	orh	r8,0xcccc
80006300:	f2 08 06 48 	mulu.d	r8,r9,r8
80006304:	f2 08 16 03 	lsr	r8,r9,0x3
80006308:	ef 58 ff f0 	st.h	r7[-16],r8
	
	if (value == 0)
	{
		return;
	}
	while (value != 0)
8000630c:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80006310:	30 08       	mov	r8,0
80006312:	f0 09 19 00 	cp.h	r9,r8
80006316:	cd 11       	brne	800062b8 <int2alpha+0x2c>
	{
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
80006318:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000631c:	ef 68 ff ff 	st.b	r7[-1],r8
	i  = 0;
80006320:	30 08       	mov	r8,0
80006322:	ef 68 ff fe 	st.b	r7[-2],r8
	while (i < value_len)
80006326:	c1 78       	rjmp	80006354 <int2alpha+0xc8>
	{
		dest[i] = temp[value_len - i - 1];
80006328:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000632c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006330:	10 09       	add	r9,r8
80006332:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80006336:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000633a:	f4 08 01 08 	sub	r8,r10,r8
8000633e:	20 18       	sub	r8,1
80006340:	ee 08 00 08 	add	r8,r7,r8
80006344:	f1 38 ff f4 	ld.ub	r8,r8[-12]
80006348:	b2 88       	st.b	r9[0x0],r8
		i++;
8000634a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000634e:	2f f8       	sub	r8,-1
80006350:	ef 68 ff fe 	st.b	r7[-2],r8
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
	i  = 0;
	while (i < value_len)
80006354:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006358:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000635c:	f0 09 18 00 	cp.b	r9,r8
80006360:	ce 43       	brcs	80006328 <int2alpha+0x9c>
	{
		dest[i] = temp[value_len - i - 1];
		i++;
	}
}
80006362:	2f bd       	sub	sp,-20
80006364:	e3 cd 80 80 	ldm	sp++,r7,pc

80006368 <string_len>:

uint8_t string_len(char * source_str)
{
80006368:	eb cd 40 80 	pushm	r7,lr
8000636c:	1a 97       	mov	r7,sp
8000636e:	20 2d       	sub	sp,8
80006370:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t i = 0;
80006374:	30 08       	mov	r8,0
80006376:	ef 68 ff ff 	st.b	r7[-1],r8
	
	while (*source_str++ != '\0')
8000637a:	c0 68       	rjmp	80006386 <string_len+0x1e>
	{
		i++;
8000637c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006380:	2f f8       	sub	r8,-1
80006382:	ef 68 ff ff 	st.b	r7[-1],r8

uint8_t string_len(char * source_str)
{
	uint8_t i = 0;
	
	while (*source_str++ != '\0')
80006386:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000638a:	11 89       	ld.ub	r9,r8[0x0]
8000638c:	30 08       	mov	r8,0
8000638e:	f0 09 18 00 	cp.b	r9,r8
80006392:	5f 18       	srne	r8
80006394:	5c 58       	castu.b	r8
80006396:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000639a:	2f f9       	sub	r9,-1
8000639c:	ef 49 ff f8 	st.w	r7[-8],r9
800063a0:	58 08       	cp.w	r8,0
800063a2:	ce d1       	brne	8000637c <string_len+0x14>
	{
		i++;
	}
	return i;
800063a4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800063a8:	10 9c       	mov	r12,r8
800063aa:	2f ed       	sub	sp,-8
800063ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800063b0 <string_cat>:

void string_cat(const char * source, char * dest)
{
800063b0:	eb cd 40 80 	pushm	r7,lr
800063b4:	1a 97       	mov	r7,sp
800063b6:	20 2d       	sub	sp,8
800063b8:	ef 4c ff fc 	st.w	r7[-4],r12
800063bc:	ef 4b ff f8 	st.w	r7[-8],r11
	while (*source != '\0')
800063c0:	c1 18       	rjmp	800063e2 <string_cat+0x32>
	{
		*dest++ = *source++;
800063c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063c6:	11 88       	ld.ub	r8,r8[0x0]
800063c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800063cc:	b2 88       	st.b	r9[0x0],r8
800063ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063d2:	2f f8       	sub	r8,-1
800063d4:	ef 48 ff f8 	st.w	r7[-8],r8
800063d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063dc:	2f f8       	sub	r8,-1
800063de:	ef 48 ff fc 	st.w	r7[-4],r8
	return i;
}

void string_cat(const char * source, char * dest)
{
	while (*source != '\0')
800063e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063e6:	11 88       	ld.ub	r8,r8[0x0]
800063e8:	58 08       	cp.w	r8,0
800063ea:	ce c1       	brne	800063c2 <string_cat+0x12>
	{
		*dest++ = *source++;
	}
}
800063ec:	2f ed       	sub	sp,-8
800063ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800063f2:	d7 03       	nop

800063f4 <sd_mmc_mci_read_multiple_sector>:

bool sd_mmc_mci_read_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
800063f4:	eb cd 40 80 	pushm	r7,lr
800063f8:	1a 97       	mov	r7,sp
800063fa:	20 5d       	sub	sp,20
800063fc:	18 99       	mov	r9,r12
800063fe:	16 98       	mov	r8,r11
80006400:	ef 4a ff ec 	st.w	r7[-20],r10
80006404:	ef 69 ff f4 	st.b	r7[-12],r9
80006408:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
8000640c:	30 18       	mov	r8,1
8000640e:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
80006412:	30 08       	mov	r8,0
80006414:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
80006418:	30 08       	mov	r8,0
8000641a:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
8000641e:	30 08       	mov	r8,0
80006420:	ef 68 ff ff 	st.b	r7[-1],r8
80006424:	c0 c8       	rjmp	8000643c <sd_mmc_mci_read_multiple_sector+0x48>
  {
	  Statement[i] = 0;
80006426:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000642a:	4f 4a       	lddpc	r10,800065f8 <sd_mmc_mci_read_multiple_sector+0x204>
8000642c:	30 08       	mov	r8,0
8000642e:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
80006432:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006436:	2f f8       	sub	r8,-1
80006438:	ef 68 ff ff 	st.b	r7[-1],r8
8000643c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006440:	36 38       	mov	r8,99
80006442:	f0 09 18 00 	cp.b	r9,r8
80006446:	fe 98 ff f0 	brls	80006426 <sd_mmc_mci_read_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
8000644a:	4e d8       	lddpc	r8,800065fc <sd_mmc_mci_read_multiple_sector+0x208>
8000644c:	90 08       	ld.sh	r8,r8[0x0]
8000644e:	2f f8       	sub	r8,-1
80006450:	5c 88       	casts.h	r8
80006452:	4e b9       	lddpc	r9,800065fc <sd_mmc_mci_read_multiple_sector+0x208>
80006454:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks = 0;
80006456:	4e b9       	lddpc	r9,80006600 <sd_mmc_mci_read_multiple_sector+0x20c>
80006458:	30 08       	mov	r8,0
8000645a:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks += nb_sector;
8000645c:	4e a8       	lddpc	r8,80006604 <sd_mmc_mci_read_multiple_sector+0x210>
8000645e:	90 08       	ld.sh	r8,r8[0x0]
80006460:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80006464:	f2 08 00 08 	add	r8,r9,r8
80006468:	5c 88       	casts.h	r8
8000646a:	4e 79       	lddpc	r9,80006604 <sd_mmc_mci_read_multiple_sector+0x210>
8000646c:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
8000646e:	4e 48       	lddpc	r8,800065fc <sd_mmc_mci_read_multiple_sector+0x208>
80006470:	90 08       	ld.sh	r8,r8[0x0]
80006472:	5c 78       	castu.h	r8
80006474:	4e 1b       	lddpc	r11,800065f8 <sd_mmc_mci_read_multiple_sector+0x204>
80006476:	10 9c       	mov	r12,r8
80006478:	f0 1f 00 64 	mcall	80006608 <sd_mmc_mci_read_multiple_sector+0x214>
  string_cat(" Deciphered ", &Statement[string_len(Statement)]);
8000647c:	4d fc       	lddpc	r12,800065f8 <sd_mmc_mci_read_multiple_sector+0x204>
8000647e:	f0 1f 00 64 	mcall	8000660c <sd_mmc_mci_read_multiple_sector+0x218>
80006482:	18 98       	mov	r8,r12
80006484:	10 99       	mov	r9,r8
80006486:	4d d8       	lddpc	r8,800065f8 <sd_mmc_mci_read_multiple_sector+0x204>
80006488:	f2 08 00 08 	add	r8,r9,r8
8000648c:	10 9b       	mov	r11,r8
8000648e:	4e 1c       	lddpc	r12,80006610 <sd_mmc_mci_read_multiple_sector+0x21c>
80006490:	f0 1f 00 61 	mcall	80006614 <sd_mmc_mci_read_multiple_sector+0x220>
  int2alpha(deciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
80006494:	4d 9c       	lddpc	r12,800065f8 <sd_mmc_mci_read_multiple_sector+0x204>
80006496:	f0 1f 00 5e 	mcall	8000660c <sd_mmc_mci_read_multiple_sector+0x218>
8000649a:	18 98       	mov	r8,r12
8000649c:	10 99       	mov	r9,r8
8000649e:	4d 78       	lddpc	r8,800065f8 <sd_mmc_mci_read_multiple_sector+0x204>
800064a0:	10 09       	add	r9,r8
800064a2:	4d 98       	lddpc	r8,80006604 <sd_mmc_mci_read_multiple_sector+0x210>
800064a4:	90 08       	ld.sh	r8,r8[0x0]
800064a6:	5c 78       	castu.h	r8
800064a8:	12 9b       	mov	r11,r9
800064aa:	10 9c       	mov	r12,r8
800064ac:	f0 1f 00 57 	mcall	80006608 <sd_mmc_mci_read_multiple_sector+0x214>
  string_cat(" sectors", &Statement[string_len(Statement)]);
800064b0:	4d 2c       	lddpc	r12,800065f8 <sd_mmc_mci_read_multiple_sector+0x204>
800064b2:	f0 1f 00 57 	mcall	8000660c <sd_mmc_mci_read_multiple_sector+0x218>
800064b6:	18 98       	mov	r8,r12
800064b8:	10 99       	mov	r9,r8
800064ba:	4d 08       	lddpc	r8,800065f8 <sd_mmc_mci_read_multiple_sector+0x204>
800064bc:	f2 08 00 08 	add	r8,r9,r8
800064c0:	10 9b       	mov	r11,r8
800064c2:	4d 6c       	lddpc	r12,80006618 <sd_mmc_mci_read_multiple_sector+0x224>
800064c4:	f0 1f 00 54 	mcall	80006614 <sd_mmc_mci_read_multiple_sector+0x220>
  
  //et024006_DrawFilledRect(10, 3 * 10, ET024006_WIDTH, 10, WHITE);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 3 * 10, WHITE, BLACK);
800064c8:	4d 5b       	lddpc	r11,8000661c <sd_mmc_mci_read_multiple_sector+0x228>
800064ca:	30 08       	mov	r8,0
800064cc:	1a d8       	st.w	--sp,r8
800064ce:	e0 68 ff ff 	mov	r8,65535
800064d2:	31 e9       	mov	r9,30
800064d4:	30 aa       	mov	r10,10
800064d6:	4c 9c       	lddpc	r12,800065f8 <sd_mmc_mci_read_multiple_sector+0x204>
800064d8:	f0 1f 00 52 	mcall	80006620 <sd_mmc_mci_read_multiple_sector+0x22c>
800064dc:	2f fd       	sub	sp,-4
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
800064de:	c5 28       	rjmp	80006582 <sd_mmc_mci_read_multiple_sector+0x18e>
  {
    // (re)load first stage.
    dma_mci_2_ram((0==(buffer_id++%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
800064e0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800064e4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800064e8:	5f 08       	sreq	r8
800064ea:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800064ee:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800064f2:	2f f8       	sub	r8,-1
800064f4:	ef 68 ff fb 	st.b	r7[-5],r8
800064f8:	58 09       	cp.w	r9,0
800064fa:	c0 30       	breq	80006500 <sd_mmc_mci_read_multiple_sector+0x10c>
800064fc:	4c a8       	lddpc	r8,80006624 <sd_mmc_mci_read_multiple_sector+0x230>
800064fe:	c0 28       	rjmp	80006502 <sd_mmc_mci_read_multiple_sector+0x10e>
80006500:	4c a8       	lddpc	r8,80006628 <sd_mmc_mci_read_multiple_sector+0x234>
80006502:	e0 6b 02 00 	mov	r11,512
80006506:	10 9c       	mov	r12,r8
80006508:	f0 1f 00 49 	mcall	8000662c <sd_mmc_mci_read_multiple_sector+0x238>

    // (re)load second stage.
    if( !b_first_step )
8000650c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80006510:	ec 18 00 01 	eorl	r8,0x1
80006514:	5c 58       	castu.b	r8
80006516:	c2 c0       	breq	8000656e <sd_mmc_mci_read_multiple_sector+0x17a>
	{
      apply_aes_decryption(&AVR32_AES, (0==(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, addr /*+ sector_index * 512L*/);
80006518:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000651c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006520:	c0 31       	brne	80006526 <sd_mmc_mci_read_multiple_sector+0x132>
80006522:	4c 18       	lddpc	r8,80006624 <sd_mmc_mci_read_multiple_sector+0x230>
80006524:	c0 28       	rjmp	80006528 <sd_mmc_mci_read_multiple_sector+0x134>
80006526:	4c 18       	lddpc	r8,80006628 <sd_mmc_mci_read_multiple_sector+0x234>
80006528:	ee fa ff ec 	ld.w	r10,r7[-20]
8000652c:	10 9b       	mov	r11,r8
8000652e:	fc 7c 00 00 	mov	r12,-196608
80006532:	f0 1f 00 40 	mcall	80006630 <sd_mmc_mci_read_multiple_sector+0x23c>
	  addr = addr + 512L; //sector_index++;
80006536:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000653a:	f0 c8 fe 00 	sub	r8,r8,-512
8000653e:	ef 48 ff ec 	st.w	r7[-20],r8
	  if (!udi_msc_trans_block(true, (0==(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
80006542:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006546:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000654a:	c0 31       	brne	80006550 <sd_mmc_mci_read_multiple_sector+0x15c>
8000654c:	4b 68       	lddpc	r8,80006624 <sd_mmc_mci_read_multiple_sector+0x230>
8000654e:	c0 28       	rjmp	80006552 <sd_mmc_mci_read_multiple_sector+0x15e>
80006550:	4b 68       	lddpc	r8,80006628 <sd_mmc_mci_read_multiple_sector+0x234>
80006552:	30 09       	mov	r9,0
80006554:	e0 6a 02 00 	mov	r10,512
80006558:	10 9b       	mov	r11,r8
8000655a:	30 1c       	mov	r12,1
8000655c:	f0 1f 00 36 	mcall	80006634 <sd_mmc_mci_read_multiple_sector+0x240>
80006560:	18 98       	mov	r8,r12
80006562:	ec 18 00 01 	eorl	r8,0x1
80006566:	5c 58       	castu.b	r8
80006568:	c0 30       	breq	8000656e <sd_mmc_mci_read_multiple_sector+0x17a>
	  {
    	    return false;
8000656a:	30 08       	mov	r8,0
8000656c:	c4 28       	rjmp	800065f0 <sd_mmc_mci_read_multiple_sector+0x1fc>
      }

    }
    b_first_step = false;
8000656e:	30 08       	mov	r8,0
80006570:	ef 68 ff fa 	st.b	r7[-6],r8
    // Wait completion of DMACA stage.
    while( !is_dma_mci_2_ram_complete() );
80006574:	f0 1f 00 31 	mcall	80006638 <sd_mmc_mci_read_multiple_sector+0x244>
80006578:	18 98       	mov	r8,r12
8000657a:	ec 18 00 01 	eorl	r8,0x1
8000657e:	5c 58       	castu.b	r8
80006580:	cf a1       	brne	80006574 <sd_mmc_mci_read_multiple_sector+0x180>
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
80006582:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80006586:	30 08       	mov	r8,0
80006588:	f0 09 19 00 	cp.h	r9,r8
8000658c:	5f 18       	srne	r8
8000658e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006592:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80006596:	20 18       	sub	r8,1
80006598:	ef 58 ff f0 	st.h	r7[-16],r8
8000659c:	58 09       	cp.w	r9,0
8000659e:	ca 11       	brne	800064e0 <sd_mmc_mci_read_multiple_sector+0xec>
    while( !is_dma_mci_2_ram_complete() );

  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_decryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, addr /*+ sector_index * 512L*/);
800065a0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800065a4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800065a8:	5c 58       	castu.b	r8
800065aa:	c0 30       	breq	800065b0 <sd_mmc_mci_read_multiple_sector+0x1bc>
800065ac:	49 e8       	lddpc	r8,80006624 <sd_mmc_mci_read_multiple_sector+0x230>
800065ae:	c0 28       	rjmp	800065b2 <sd_mmc_mci_read_multiple_sector+0x1be>
800065b0:	49 e8       	lddpc	r8,80006628 <sd_mmc_mci_read_multiple_sector+0x234>
800065b2:	ee fa ff ec 	ld.w	r10,r7[-20]
800065b6:	10 9b       	mov	r11,r8
800065b8:	fc 7c 00 00 	mov	r12,-196608
800065bc:	f0 1f 00 1d 	mcall	80006630 <sd_mmc_mci_read_multiple_sector+0x23c>
  if (!udi_msc_trans_block(true, (0!=(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
800065c0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800065c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800065c8:	5c 58       	castu.b	r8
800065ca:	c0 30       	breq	800065d0 <sd_mmc_mci_read_multiple_sector+0x1dc>
800065cc:	49 68       	lddpc	r8,80006624 <sd_mmc_mci_read_multiple_sector+0x230>
800065ce:	c0 28       	rjmp	800065d2 <sd_mmc_mci_read_multiple_sector+0x1de>
800065d0:	49 68       	lddpc	r8,80006628 <sd_mmc_mci_read_multiple_sector+0x234>
800065d2:	30 09       	mov	r9,0
800065d4:	e0 6a 02 00 	mov	r10,512
800065d8:	10 9b       	mov	r11,r8
800065da:	30 1c       	mov	r12,1
800065dc:	f0 1f 00 16 	mcall	80006634 <sd_mmc_mci_read_multiple_sector+0x240>
800065e0:	18 98       	mov	r8,r12
800065e2:	ec 18 00 01 	eorl	r8,0x1
800065e6:	5c 58       	castu.b	r8
800065e8:	c0 30       	breq	800065ee <sd_mmc_mci_read_multiple_sector+0x1fa>
    return false;
800065ea:	30 08       	mov	r8,0
800065ec:	c0 28       	rjmp	800065f0 <sd_mmc_mci_read_multiple_sector+0x1fc>

  return true;
800065ee:	30 18       	mov	r8,1
}
800065f0:	10 9c       	mov	r12,r8
800065f2:	2f bd       	sub	sp,-20
800065f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800065f8:	00 00       	add	r0,r0
800065fa:	04 d4       	st.w	--r2,r4
800065fc:	00 00       	add	r0,r0
800065fe:	05 3c       	ld.ub	r12,r2++
80006600:	00 00       	add	r0,r0
80006602:	05 38       	ld.ub	r8,r2++
80006604:	00 00       	add	r0,r0
80006606:	05 3a       	ld.ub	r10,r2++
80006608:	80 00       	ld.sh	r0,r0[0x0]
8000660a:	62 8c       	ld.w	r12,r1[0x20]
8000660c:	80 00       	ld.sh	r0,r0[0x0]
8000660e:	63 68       	ld.w	r8,r1[0x58]
80006610:	80 00       	ld.sh	r0,r0[0x0]
80006612:	4c 3c       	lddpc	r12,8000671c <sd_mmc_mci_write_multiple_sector+0xe0>
80006614:	80 00       	ld.sh	r0,r0[0x0]
80006616:	63 b0       	ld.w	r0,r1[0x6c]
80006618:	80 00       	ld.sh	r0,r0[0x0]
8000661a:	4c 4c       	lddpc	r12,80006728 <sd_mmc_mci_write_multiple_sector+0xec>
8000661c:	80 00       	ld.sh	r0,r0[0x0]
8000661e:	d7 b4       	*unknown*
80006620:	80 00       	ld.sh	r0,r0[0x0]
80006622:	32 ac       	mov	r12,42
80006624:	00 00       	add	r0,r0
80006626:	09 c4       	ld.ub	r4,r4[0x4]
80006628:	00 00       	add	r0,r0
8000662a:	07 bc       	ld.ub	r12,r3[0x3]
8000662c:	80 00       	ld.sh	r0,r0[0x0]
8000662e:	5c 40       	abs	r0
80006630:	80 00       	ld.sh	r0,r0[0x0]
80006632:	2e d0       	sub	r0,-19
80006634:	80 00       	ld.sh	r0,r0[0x0]
80006636:	b9 d4       	cbr	r4,0x19
80006638:	80 00       	ld.sh	r0,r0[0x0]
8000663a:	5c 90       	brev	r0

8000663c <sd_mmc_mci_write_multiple_sector>:



bool sd_mmc_mci_write_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
8000663c:	eb cd 40 80 	pushm	r7,lr
80006640:	1a 97       	mov	r7,sp
80006642:	20 5d       	sub	sp,20
80006644:	18 99       	mov	r9,r12
80006646:	16 98       	mov	r8,r11
80006648:	ef 4a ff ec 	st.w	r7[-20],r10
8000664c:	ef 69 ff f4 	st.b	r7[-12],r9
80006650:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
80006654:	30 18       	mov	r8,1
80006656:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
8000665a:	30 08       	mov	r8,0
8000665c:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
80006660:	30 08       	mov	r8,0
80006662:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
80006666:	30 08       	mov	r8,0
80006668:	ef 68 ff ff 	st.b	r7[-1],r8
8000666c:	c0 c8       	rjmp	80006684 <sd_mmc_mci_write_multiple_sector+0x48>
  {
	  Statement[i] = 0;
8000666e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006672:	4f 4a       	lddpc	r10,80006840 <sd_mmc_mci_write_multiple_sector+0x204>
80006674:	30 08       	mov	r8,0
80006676:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
8000667a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000667e:	2f f8       	sub	r8,-1
80006680:	ef 68 ff ff 	st.b	r7[-1],r8
80006684:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006688:	36 38       	mov	r8,99
8000668a:	f0 09 18 00 	cp.b	r9,r8
8000668e:	fe 98 ff f0 	brls	8000666e <sd_mmc_mci_write_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
80006692:	4e d8       	lddpc	r8,80006844 <sd_mmc_mci_write_multiple_sector+0x208>
80006694:	90 08       	ld.sh	r8,r8[0x0]
80006696:	2f f8       	sub	r8,-1
80006698:	5c 88       	casts.h	r8
8000669a:	4e b9       	lddpc	r9,80006844 <sd_mmc_mci_write_multiple_sector+0x208>
8000669c:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks = 0;
8000669e:	4e b9       	lddpc	r9,80006848 <sd_mmc_mci_write_multiple_sector+0x20c>
800066a0:	30 08       	mov	r8,0
800066a2:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks += nb_sector;
800066a4:	4e a8       	lddpc	r8,8000684c <sd_mmc_mci_write_multiple_sector+0x210>
800066a6:	90 08       	ld.sh	r8,r8[0x0]
800066a8:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800066ac:	f2 08 00 08 	add	r8,r9,r8
800066b0:	5c 88       	casts.h	r8
800066b2:	4e 79       	lddpc	r9,8000684c <sd_mmc_mci_write_multiple_sector+0x210>
800066b4:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
800066b6:	4e 48       	lddpc	r8,80006844 <sd_mmc_mci_write_multiple_sector+0x208>
800066b8:	90 08       	ld.sh	r8,r8[0x0]
800066ba:	5c 78       	castu.h	r8
800066bc:	4e 1b       	lddpc	r11,80006840 <sd_mmc_mci_write_multiple_sector+0x204>
800066be:	10 9c       	mov	r12,r8
800066c0:	f0 1f 00 64 	mcall	80006850 <sd_mmc_mci_write_multiple_sector+0x214>
  string_cat(" Enciphered ", &Statement[string_len(Statement)]);
800066c4:	4d fc       	lddpc	r12,80006840 <sd_mmc_mci_write_multiple_sector+0x204>
800066c6:	f0 1f 00 64 	mcall	80006854 <sd_mmc_mci_write_multiple_sector+0x218>
800066ca:	18 98       	mov	r8,r12
800066cc:	10 99       	mov	r9,r8
800066ce:	4d d8       	lddpc	r8,80006840 <sd_mmc_mci_write_multiple_sector+0x204>
800066d0:	f2 08 00 08 	add	r8,r9,r8
800066d4:	10 9b       	mov	r11,r8
800066d6:	4e 1c       	lddpc	r12,80006858 <sd_mmc_mci_write_multiple_sector+0x21c>
800066d8:	f0 1f 00 61 	mcall	8000685c <sd_mmc_mci_write_multiple_sector+0x220>
  int2alpha(enciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
800066dc:	4d 9c       	lddpc	r12,80006840 <sd_mmc_mci_write_multiple_sector+0x204>
800066de:	f0 1f 00 5e 	mcall	80006854 <sd_mmc_mci_write_multiple_sector+0x218>
800066e2:	18 98       	mov	r8,r12
800066e4:	10 99       	mov	r9,r8
800066e6:	4d 78       	lddpc	r8,80006840 <sd_mmc_mci_write_multiple_sector+0x204>
800066e8:	10 09       	add	r9,r8
800066ea:	4d 98       	lddpc	r8,8000684c <sd_mmc_mci_write_multiple_sector+0x210>
800066ec:	90 08       	ld.sh	r8,r8[0x0]
800066ee:	5c 78       	castu.h	r8
800066f0:	12 9b       	mov	r11,r9
800066f2:	10 9c       	mov	r12,r8
800066f4:	f0 1f 00 57 	mcall	80006850 <sd_mmc_mci_write_multiple_sector+0x214>
  string_cat(" sectors", &Statement[string_len(Statement)]);
800066f8:	4d 2c       	lddpc	r12,80006840 <sd_mmc_mci_write_multiple_sector+0x204>
800066fa:	f0 1f 00 57 	mcall	80006854 <sd_mmc_mci_write_multiple_sector+0x218>
800066fe:	18 98       	mov	r8,r12
80006700:	10 99       	mov	r9,r8
80006702:	4d 08       	lddpc	r8,80006840 <sd_mmc_mci_write_multiple_sector+0x204>
80006704:	f2 08 00 08 	add	r8,r9,r8
80006708:	10 9b       	mov	r11,r8
8000670a:	4d 6c       	lddpc	r12,80006860 <sd_mmc_mci_write_multiple_sector+0x224>
8000670c:	f0 1f 00 54 	mcall	8000685c <sd_mmc_mci_write_multiple_sector+0x220>
  
  //et024006_DrawFilledRect(10, 5 * 10, ET024006_WIDTH, 10, BLACK);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 5 * 10, WHITE, BLACK);  //et024006_PrintConsole(Statement, BLACK, -1);
80006710:	4d 5b       	lddpc	r11,80006864 <sd_mmc_mci_write_multiple_sector+0x228>
80006712:	30 08       	mov	r8,0
80006714:	1a d8       	st.w	--sp,r8
80006716:	e0 68 ff ff 	mov	r8,65535
8000671a:	33 29       	mov	r9,50
8000671c:	30 aa       	mov	r10,10
8000671e:	4c 9c       	lddpc	r12,80006840 <sd_mmc_mci_write_multiple_sector+0x204>
80006720:	f0 1f 00 52 	mcall	80006868 <sd_mmc_mci_write_multiple_sector+0x22c>
80006724:	2f fd       	sub	sp,-4
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
80006726:	c5 38       	rjmp	800067cc <sd_mmc_mci_write_multiple_sector+0x190>

    // (re)load second stage.
    if( !b_first_step )
80006728:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000672c:	ec 18 00 01 	eorl	r8,0x1
80006730:	5c 58       	castu.b	r8
80006732:	c2 50       	breq	8000677c <sd_mmc_mci_write_multiple_sector+0x140>
	{
	  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, addr /*+ sector_index * 512L*/);
80006734:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006738:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000673c:	5c 58       	castu.b	r8
8000673e:	c0 30       	breq	80006744 <sd_mmc_mci_write_multiple_sector+0x108>
80006740:	4c b8       	lddpc	r8,8000686c <sd_mmc_mci_write_multiple_sector+0x230>
80006742:	c0 28       	rjmp	80006746 <sd_mmc_mci_write_multiple_sector+0x10a>
80006744:	4c b8       	lddpc	r8,80006870 <sd_mmc_mci_write_multiple_sector+0x234>
80006746:	ee fa ff ec 	ld.w	r10,r7[-20]
8000674a:	10 9b       	mov	r11,r8
8000674c:	fc 7c 00 00 	mov	r12,-196608
80006750:	f0 1f 00 49 	mcall	80006874 <sd_mmc_mci_write_multiple_sector+0x238>
	  addr = addr + 512L; //sector_index++;
80006754:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006758:	f0 c8 fe 00 	sub	r8,r8,-512
8000675c:	ef 48 ff ec 	st.w	r7[-20],r8
      dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80006760:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006764:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006768:	5c 58       	castu.b	r8
8000676a:	c0 30       	breq	80006770 <sd_mmc_mci_write_multiple_sector+0x134>
8000676c:	4c 08       	lddpc	r8,8000686c <sd_mmc_mci_write_multiple_sector+0x230>
8000676e:	c0 28       	rjmp	80006772 <sd_mmc_mci_write_multiple_sector+0x136>
80006770:	4c 08       	lddpc	r8,80006870 <sd_mmc_mci_write_multiple_sector+0x234>
80006772:	e0 6b 02 00 	mov	r11,512
80006776:	10 9c       	mov	r12,r8
80006778:	f0 1f 00 40 	mcall	80006878 <sd_mmc_mci_write_multiple_sector+0x23c>
    }
    udi_msc_trans_block(false, (0==(buffer_id++%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL);
8000677c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006780:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006784:	5f 08       	sreq	r8
80006786:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000678a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000678e:	2f f8       	sub	r8,-1
80006790:	ef 68 ff fb 	st.b	r7[-5],r8
80006794:	58 09       	cp.w	r9,0
80006796:	c0 30       	breq	8000679c <sd_mmc_mci_write_multiple_sector+0x160>
80006798:	4b 58       	lddpc	r8,8000686c <sd_mmc_mci_write_multiple_sector+0x230>
8000679a:	c0 28       	rjmp	8000679e <sd_mmc_mci_write_multiple_sector+0x162>
8000679c:	4b 58       	lddpc	r8,80006870 <sd_mmc_mci_write_multiple_sector+0x234>
8000679e:	30 09       	mov	r9,0
800067a0:	e0 6a 02 00 	mov	r10,512
800067a4:	10 9b       	mov	r11,r8
800067a6:	30 0c       	mov	r12,0
800067a8:	f0 1f 00 35 	mcall	8000687c <sd_mmc_mci_write_multiple_sector+0x240>
    if( !b_first_step ) {
800067ac:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800067b0:	ec 18 00 01 	eorl	r8,0x1
800067b4:	5c 58       	castu.b	r8
800067b6:	c0 80       	breq	800067c6 <sd_mmc_mci_write_multiple_sector+0x18a>
      // Wait completion of DMACA stage.
      while( !is_dma_ram_2_mci_complete() );
800067b8:	f0 1f 00 32 	mcall	80006880 <sd_mmc_mci_write_multiple_sector+0x244>
800067bc:	18 98       	mov	r8,r12
800067be:	ec 18 00 01 	eorl	r8,0x1
800067c2:	5c 58       	castu.b	r8
800067c4:	cf a1       	brne	800067b8 <sd_mmc_mci_write_multiple_sector+0x17c>
    }
    b_first_step=false;
800067c6:	30 08       	mov	r8,0
800067c8:	ef 68 ff fa 	st.b	r7[-6],r8
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
800067cc:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800067d0:	30 08       	mov	r8,0
800067d2:	f0 09 19 00 	cp.h	r9,r8
800067d6:	5f 18       	srne	r8
800067d8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800067dc:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800067e0:	20 18       	sub	r8,1
800067e2:	ef 58 ff f0 	st.h	r7[-16],r8
800067e6:	58 09       	cp.w	r9,0
800067e8:	ca 01       	brne	80006728 <sd_mmc_mci_write_multiple_sector+0xec>
    }
    b_first_step=false;
  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, addr /*+ sector_index * 512L*/);
800067ea:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800067ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800067f2:	5c 58       	castu.b	r8
800067f4:	c0 30       	breq	800067fa <sd_mmc_mci_write_multiple_sector+0x1be>
800067f6:	49 e8       	lddpc	r8,8000686c <sd_mmc_mci_write_multiple_sector+0x230>
800067f8:	c0 28       	rjmp	800067fc <sd_mmc_mci_write_multiple_sector+0x1c0>
800067fa:	49 e8       	lddpc	r8,80006870 <sd_mmc_mci_write_multiple_sector+0x234>
800067fc:	ee fa ff ec 	ld.w	r10,r7[-20]
80006800:	10 9b       	mov	r11,r8
80006802:	fc 7c 00 00 	mov	r12,-196608
80006806:	f0 1f 00 1c 	mcall	80006874 <sd_mmc_mci_write_multiple_sector+0x238>
  dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
8000680a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000680e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006812:	5c 58       	castu.b	r8
80006814:	c0 30       	breq	8000681a <sd_mmc_mci_write_multiple_sector+0x1de>
80006816:	49 68       	lddpc	r8,8000686c <sd_mmc_mci_write_multiple_sector+0x230>
80006818:	c0 28       	rjmp	8000681c <sd_mmc_mci_write_multiple_sector+0x1e0>
8000681a:	49 68       	lddpc	r8,80006870 <sd_mmc_mci_write_multiple_sector+0x234>
8000681c:	e0 6b 02 00 	mov	r11,512
80006820:	10 9c       	mov	r12,r8
80006822:	f0 1f 00 16 	mcall	80006878 <sd_mmc_mci_write_multiple_sector+0x23c>
  while( !is_dma_ram_2_mci_complete() );
80006826:	f0 1f 00 17 	mcall	80006880 <sd_mmc_mci_write_multiple_sector+0x244>
8000682a:	18 98       	mov	r8,r12
8000682c:	ec 18 00 01 	eorl	r8,0x1
80006830:	5c 58       	castu.b	r8
80006832:	cf a1       	brne	80006826 <sd_mmc_mci_write_multiple_sector+0x1ea>
  return true;
80006834:	30 18       	mov	r8,1
}
80006836:	10 9c       	mov	r12,r8
80006838:	2f bd       	sub	sp,-20
8000683a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000683e:	00 00       	add	r0,r0
80006840:	00 00       	add	r0,r0
80006842:	04 d4       	st.w	--r2,r4
80006844:	00 00       	add	r0,r0
80006846:	05 3c       	ld.ub	r12,r2++
80006848:	00 00       	add	r0,r0
8000684a:	05 3a       	ld.ub	r10,r2++
8000684c:	00 00       	add	r0,r0
8000684e:	05 38       	ld.ub	r8,r2++
80006850:	80 00       	ld.sh	r0,r0[0x0]
80006852:	62 8c       	ld.w	r12,r1[0x20]
80006854:	80 00       	ld.sh	r0,r0[0x0]
80006856:	63 68       	ld.w	r8,r1[0x58]
80006858:	80 00       	ld.sh	r0,r0[0x0]
8000685a:	4c 58       	lddpc	r8,8000696c <sd_mmc_mci_test_unit_ready+0x68>
8000685c:	80 00       	ld.sh	r0,r0[0x0]
8000685e:	63 b0       	ld.w	r0,r1[0x6c]
80006860:	80 00       	ld.sh	r0,r0[0x0]
80006862:	4c 4c       	lddpc	r12,80006970 <sd_mmc_mci_test_unit_ready+0x6c>
80006864:	80 00       	ld.sh	r0,r0[0x0]
80006866:	d7 b4       	*unknown*
80006868:	80 00       	ld.sh	r0,r0[0x0]
8000686a:	32 ac       	mov	r12,42
8000686c:	00 00       	add	r0,r0
8000686e:	09 c4       	ld.ub	r4,r4[0x4]
80006870:	00 00       	add	r0,r0
80006872:	07 bc       	ld.ub	r12,r3[0x3]
80006874:	80 00       	ld.sh	r0,r0[0x0]
80006876:	2d dc       	sub	r12,-35
80006878:	80 00       	ld.sh	r0,r0[0x0]
8000687a:	5c b0       	swap.b	r0
8000687c:	80 00       	ld.sh	r0,r0[0x0]
8000687e:	b9 d4       	cbr	r4,0x19
80006880:	80 00       	ld.sh	r0,r0[0x0]
80006882:	5d 00       	ror	r0

80006884 <sd_mmc_mci_cmd_send_status>:
   return true;
}
#endif      // end FUNC_MMC_CARD_SECU

bool  sd_mmc_mci_cmd_send_status(uint8_t slot)
{
80006884:	eb cd 40 80 	pushm	r7,lr
80006888:	1a 97       	mov	r7,sp
8000688a:	20 1d       	sub	sp,4
8000688c:	18 98       	mov	r8,r12
8000688e:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80006892:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006896:	30 18       	mov	r8,1
80006898:	f0 09 18 00 	cp.b	r9,r8
8000689c:	e0 88 00 04 	brls	800068a4 <sd_mmc_mci_cmd_send_status+0x20>
    return false;
800068a0:	30 08       	mov	r8,0
800068a2:	c2 28       	rjmp	800068e6 <sd_mmc_mci_cmd_send_status+0x62>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
800068a4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800068a8:	49 29       	lddpc	r9,800068f0 <sd_mmc_mci_cmd_send_status+0x6c>
800068aa:	f2 08 07 08 	ld.ub	r8,r9[r8]
800068ae:	10 9a       	mov	r10,r8
800068b0:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800068b4:	49 08       	lddpc	r8,800068f4 <sd_mmc_mci_cmd_send_status+0x70>
800068b6:	70 08       	ld.w	r8,r8[0x0]
800068b8:	12 9b       	mov	r11,r9
800068ba:	10 9c       	mov	r12,r8
800068bc:	f0 1f 00 0f 	mcall	800068f8 <sd_mmc_mci_cmd_send_status+0x74>

  if (mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800068c0:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800068c4:	48 e8       	lddpc	r8,800068fc <sd_mmc_mci_cmd_send_status+0x78>
800068c6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800068ca:	48 b8       	lddpc	r8,800068f4 <sd_mmc_mci_cmd_send_status+0x70>
800068cc:	70 08       	ld.w	r8,r8[0x0]
800068ce:	12 9a       	mov	r10,r9
800068d0:	e0 6b 10 4d 	mov	r11,4173
800068d4:	10 9c       	mov	r12,r8
800068d6:	f0 1f 00 0b 	mcall	80006900 <sd_mmc_mci_cmd_send_status+0x7c>
800068da:	18 98       	mov	r8,r12
800068dc:	58 08       	cp.w	r8,0
800068de:	c0 30       	breq	800068e4 <sd_mmc_mci_cmd_send_status+0x60>
    return false;
800068e0:	30 08       	mov	r8,0
800068e2:	c0 28       	rjmp	800068e6 <sd_mmc_mci_cmd_send_status+0x62>

  return true;
800068e4:	30 18       	mov	r8,1
}
800068e6:	10 9c       	mov	r12,r8
800068e8:	2f fd       	sub	sp,-4
800068ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800068ee:	00 00       	add	r0,r0
800068f0:	00 00       	add	r0,r0
800068f2:	09 bc       	ld.ub	r12,r4[0x3]
800068f4:	00 00       	add	r0,r0
800068f6:	00 14       	sub	r4,r0
800068f8:	80 00       	ld.sh	r0,r0[0x0]
800068fa:	7e 7c       	ld.w	r12,pc[0x1c]
800068fc:	00 00       	add	r0,r0
800068fe:	07 ac       	ld.ub	r12,r3[0x2]
80006900:	80 00       	ld.sh	r0,r0[0x0]
80006902:	7c e4       	ld.w	r4,lr[0x38]

80006904 <sd_mmc_mci_test_unit_ready>:
 */
//! @{


Ctrl_status sd_mmc_mci_test_unit_ready(uint8_t slot)
{
80006904:	eb cd 40 80 	pushm	r7,lr
80006908:	1a 97       	mov	r7,sp
8000690a:	20 1d       	sub	sp,4
8000690c:	18 98       	mov	r8,r12
8000690e:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS) return CTRL_FAIL;
80006912:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006916:	30 18       	mov	r8,1
80006918:	f0 09 18 00 	cp.b	r9,r8
8000691c:	e0 88 00 04 	brls	80006924 <sd_mmc_mci_test_unit_ready+0x20>
80006920:	30 18       	mov	r8,1
80006922:	c4 d8       	rjmp	800069bc <sd_mmc_mci_test_unit_ready+0xb8>

  Sd_mmc_mci_access_signal_on();
  switch (sd_mmc_mci_presence_status[slot])
80006924:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006928:	4a 79       	lddpc	r9,800069c4 <sd_mmc_mci_test_unit_ready+0xc0>
8000692a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000692e:	58 18       	cp.w	r8,1
80006930:	c1 d0       	breq	8000696a <sd_mmc_mci_test_unit_ready+0x66>
80006932:	58 28       	cp.w	r8,2
80006934:	c3 50       	breq	8000699e <sd_mmc_mci_test_unit_ready+0x9a>
80006936:	58 08       	cp.w	r8,0
80006938:	c3 b1       	brne	800069ae <sd_mmc_mci_test_unit_ready+0xaa>
  {
    case SD_MMC_REMOVED:
      sd_mmc_mci_init_done[slot] = false;
8000693a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000693e:	4a 3a       	lddpc	r10,800069c8 <sd_mmc_mci_test_unit_ready+0xc4>
80006940:	30 08       	mov	r8,0
80006942:	f4 09 0b 08 	st.b	r10[r9],r8
      if (sd_mmc_mci_mem_check(slot))
80006946:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000694a:	10 9c       	mov	r12,r8
8000694c:	f0 1f 00 20 	mcall	800069cc <sd_mmc_mci_test_unit_ready+0xc8>
80006950:	18 98       	mov	r8,r12
80006952:	58 08       	cp.w	r8,0
80006954:	c0 90       	breq	80006966 <sd_mmc_mci_test_unit_ready+0x62>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_INSERTED;
80006956:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000695a:	49 ba       	lddpc	r10,800069c4 <sd_mmc_mci_test_unit_ready+0xc0>
8000695c:	30 18       	mov	r8,1
8000695e:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
80006962:	30 38       	mov	r8,3
80006964:	c2 c8       	rjmp	800069bc <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
80006966:	30 28       	mov	r8,2
80006968:	c2 a8       	rjmp	800069bc <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_INSERTED:
      if (!sd_mmc_mci_mem_check(slot))
8000696a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000696e:	10 9c       	mov	r12,r8
80006970:	f0 1f 00 17 	mcall	800069cc <sd_mmc_mci_test_unit_ready+0xc8>
80006974:	18 98       	mov	r8,r12
80006976:	ec 18 00 01 	eorl	r8,0x1
8000697a:	5c 58       	castu.b	r8
8000697c:	c0 f0       	breq	8000699a <sd_mmc_mci_test_unit_ready+0x96>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVING;
8000697e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006982:	49 1a       	lddpc	r10,800069c4 <sd_mmc_mci_test_unit_ready+0xc0>
80006984:	30 28       	mov	r8,2
80006986:	f4 09 0b 08 	st.b	r10[r9],r8
        sd_mmc_mci_init_done[slot] = false;
8000698a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000698e:	48 fa       	lddpc	r10,800069c8 <sd_mmc_mci_test_unit_ready+0xc4>
80006990:	30 08       	mov	r8,0
80006992:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
80006996:	30 38       	mov	r8,3
80006998:	c1 28       	rjmp	800069bc <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_GOOD;
8000699a:	30 08       	mov	r8,0
8000699c:	c1 08       	rjmp	800069bc <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_REMOVING:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
8000699e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800069a2:	48 9a       	lddpc	r10,800069c4 <sd_mmc_mci_test_unit_ready+0xc0>
800069a4:	30 08       	mov	r8,0
800069a6:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
800069aa:	30 28       	mov	r8,2
800069ac:	c0 88       	rjmp	800069bc <sd_mmc_mci_test_unit_ready+0xb8>

    default:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
800069ae:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800069b2:	48 5a       	lddpc	r10,800069c4 <sd_mmc_mci_test_unit_ready+0xc0>
800069b4:	30 08       	mov	r8,0
800069b6:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_BUSY;
800069ba:	30 38       	mov	r8,3
  }
}
800069bc:	10 9c       	mov	r12,r8
800069be:	2f fd       	sub	sp,-4
800069c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800069c4:	00 00       	add	r0,r0
800069c6:	00 18       	sub	r8,r0
800069c8:	00 00       	add	r0,r0
800069ca:	04 c0       	st.b	r2++,r0
800069cc:	80 00       	ld.sh	r0,r0[0x0]
800069ce:	5d 20       	mustr	r0

800069d0 <sd_mmc_mci_test_unit_ready_0>:


Ctrl_status sd_mmc_mci_test_unit_ready_0(void)
{
800069d0:	eb cd 40 80 	pushm	r7,lr
800069d4:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(0);
800069d6:	30 0c       	mov	r12,0
800069d8:	f0 1f 00 03 	mcall	800069e4 <sd_mmc_mci_test_unit_ready_0+0x14>
800069dc:	18 98       	mov	r8,r12
}
800069de:	10 9c       	mov	r12,r8
800069e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800069e4:	80 00       	ld.sh	r0,r0[0x0]
800069e6:	69 04       	ld.w	r4,r4[0x40]

800069e8 <sd_mmc_mci_test_unit_ready_1>:


Ctrl_status sd_mmc_mci_test_unit_ready_1(void)
{
800069e8:	eb cd 40 80 	pushm	r7,lr
800069ec:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(1);
800069ee:	30 1c       	mov	r12,1
800069f0:	f0 1f 00 03 	mcall	800069fc <sd_mmc_mci_test_unit_ready_1+0x14>
800069f4:	18 98       	mov	r8,r12
}
800069f6:	10 9c       	mov	r12,r8
800069f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800069fc:	80 00       	ld.sh	r0,r0[0x0]
800069fe:	69 04       	ld.w	r4,r4[0x40]

80006a00 <sd_mmc_mci_read_capacity>:


Ctrl_status sd_mmc_mci_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
80006a00:	eb cd 40 80 	pushm	r7,lr
80006a04:	1a 97       	mov	r7,sp
80006a06:	20 2d       	sub	sp,8
80006a08:	18 98       	mov	r8,r12
80006a0a:	ef 4b ff f8 	st.w	r7[-8],r11
80006a0e:	ef 68 ff fc 	st.b	r7[-4],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80006a12:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006a16:	10 9c       	mov	r12,r8
80006a18:	f0 1f 00 0c 	mcall	80006a48 <sd_mmc_mci_read_capacity+0x48>
80006a1c:	18 98       	mov	r8,r12
80006a1e:	ec 18 00 01 	eorl	r8,0x1
80006a22:	5c 58       	castu.b	r8
80006a24:	c0 30       	breq	80006a2a <sd_mmc_mci_read_capacity+0x2a>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80006a26:	30 28       	mov	r8,2
80006a28:	c0 c8       	rjmp	80006a40 <sd_mmc_mci_read_capacity+0x40>
   }
   *nb_sector = g_card_size[slot]-1;
80006a2a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006a2e:	48 88       	lddpc	r8,80006a4c <sd_mmc_mci_read_capacity+0x4c>
80006a30:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006a34:	f0 c9 00 01 	sub	r9,r8,1
80006a38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a3c:	91 09       	st.w	r8[0x0],r9
   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80006a3e:	30 08       	mov	r8,0
}
80006a40:	10 9c       	mov	r12,r8
80006a42:	2f ed       	sub	sp,-8
80006a44:	e3 cd 80 80 	ldm	sp++,r7,pc
80006a48:	80 00       	ld.sh	r0,r0[0x0]
80006a4a:	5d 20       	mustr	r0
80006a4c:	00 00       	add	r0,r0
80006a4e:	07 b4       	ld.ub	r4,r3[0x3]

80006a50 <sd_mmc_mci_read_capacity_0>:


Ctrl_status sd_mmc_mci_read_capacity_0(uint32_t *nb_sector)
{
80006a50:	eb cd 40 80 	pushm	r7,lr
80006a54:	1a 97       	mov	r7,sp
80006a56:	20 1d       	sub	sp,4
80006a58:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(0, nb_sector);
80006a5c:	ee fb ff fc 	ld.w	r11,r7[-4]
80006a60:	30 0c       	mov	r12,0
80006a62:	f0 1f 00 04 	mcall	80006a70 <sd_mmc_mci_read_capacity_0+0x20>
80006a66:	18 98       	mov	r8,r12
}
80006a68:	10 9c       	mov	r12,r8
80006a6a:	2f fd       	sub	sp,-4
80006a6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006a70:	80 00       	ld.sh	r0,r0[0x0]
80006a72:	6a 00       	ld.w	r0,r5[0x0]

80006a74 <sd_mmc_mci_read_capacity_1>:


Ctrl_status sd_mmc_mci_read_capacity_1(uint32_t *nb_sector)
{
80006a74:	eb cd 40 80 	pushm	r7,lr
80006a78:	1a 97       	mov	r7,sp
80006a7a:	20 1d       	sub	sp,4
80006a7c:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(1, nb_sector);
80006a80:	ee fb ff fc 	ld.w	r11,r7[-4]
80006a84:	30 1c       	mov	r12,1
80006a86:	f0 1f 00 04 	mcall	80006a94 <sd_mmc_mci_read_capacity_1+0x20>
80006a8a:	18 98       	mov	r8,r12
}
80006a8c:	10 9c       	mov	r12,r8
80006a8e:	2f fd       	sub	sp,-4
80006a90:	e3 cd 80 80 	ldm	sp++,r7,pc
80006a94:	80 00       	ld.sh	r0,r0[0x0]
80006a96:	6a 00       	ld.w	r0,r5[0x0]

80006a98 <sd_mmc_mci_wr_protect>:


bool sd_mmc_mci_wr_protect(uint8_t slot)
{
80006a98:	eb cd 40 80 	pushm	r7,lr
80006a9c:	1a 97       	mov	r7,sp
80006a9e:	20 1d       	sub	sp,4
80006aa0:	18 98       	mov	r8,r12
80006aa2:	ef 68 ff fc 	st.b	r7[-4],r8
  return is_sd_mmc_mci_card_protected(slot);
80006aa6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006aaa:	10 9c       	mov	r12,r8
80006aac:	f0 1f 00 04 	mcall	80006abc <sd_mmc_mci_wr_protect+0x24>
80006ab0:	18 98       	mov	r8,r12
}
80006ab2:	10 9c       	mov	r12,r8
80006ab4:	2f fd       	sub	sp,-4
80006ab6:	e3 cd 80 80 	ldm	sp++,r7,pc
80006aba:	00 00       	add	r0,r0
80006abc:	80 00       	ld.sh	r0,r0[0x0]
80006abe:	4c c4       	lddpc	r4,80006bec <sd_mmc_mci_usb_read_10_0+0xc>

80006ac0 <sd_mmc_mci_wr_protect_0>:


bool sd_mmc_mci_wr_protect_0(void)
{
80006ac0:	eb cd 40 80 	pushm	r7,lr
80006ac4:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(0);
80006ac6:	30 0c       	mov	r12,0
80006ac8:	f0 1f 00 03 	mcall	80006ad4 <sd_mmc_mci_wr_protect_0+0x14>
80006acc:	18 98       	mov	r8,r12
}
80006ace:	10 9c       	mov	r12,r8
80006ad0:	e3 cd 80 80 	ldm	sp++,r7,pc
80006ad4:	80 00       	ld.sh	r0,r0[0x0]
80006ad6:	6a 98       	ld.w	r8,r5[0x24]

80006ad8 <sd_mmc_mci_wr_protect_1>:


bool sd_mmc_mci_wr_protect_1(void)
{
80006ad8:	eb cd 40 80 	pushm	r7,lr
80006adc:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(1);
80006ade:	30 1c       	mov	r12,1
80006ae0:	f0 1f 00 03 	mcall	80006aec <sd_mmc_mci_wr_protect_1+0x14>
80006ae4:	18 98       	mov	r8,r12
}
80006ae6:	10 9c       	mov	r12,r8
80006ae8:	e3 cd 80 80 	ldm	sp++,r7,pc
80006aec:	80 00       	ld.sh	r0,r0[0x0]
80006aee:	6a 98       	ld.w	r8,r5[0x24]

80006af0 <sd_mmc_mci_removal>:


bool sd_mmc_mci_removal(uint8_t slot)
{
80006af0:	eb cd 40 80 	pushm	r7,lr
80006af4:	1a 97       	mov	r7,sp
80006af6:	20 1d       	sub	sp,4
80006af8:	18 98       	mov	r8,r12
80006afa:	ef 68 ff fc 	st.b	r7[-4],r8
  return false;
80006afe:	30 08       	mov	r8,0
}
80006b00:	10 9c       	mov	r12,r8
80006b02:	2f fd       	sub	sp,-4
80006b04:	e3 cd 80 80 	ldm	sp++,r7,pc

80006b08 <sd_mmc_mci_removal_0>:


bool sd_mmc_mci_removal_0(void)
{
80006b08:	eb cd 40 80 	pushm	r7,lr
80006b0c:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(0);
80006b0e:	30 0c       	mov	r12,0
80006b10:	f0 1f 00 03 	mcall	80006b1c <sd_mmc_mci_removal_0+0x14>
80006b14:	18 98       	mov	r8,r12
}
80006b16:	10 9c       	mov	r12,r8
80006b18:	e3 cd 80 80 	ldm	sp++,r7,pc
80006b1c:	80 00       	ld.sh	r0,r0[0x0]
80006b1e:	6a f0       	ld.w	r0,r5[0x3c]

80006b20 <sd_mmc_mci_removal_1>:


bool sd_mmc_mci_removal_1(void)
{
80006b20:	eb cd 40 80 	pushm	r7,lr
80006b24:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(1);
80006b26:	30 1c       	mov	r12,1
80006b28:	f0 1f 00 03 	mcall	80006b34 <sd_mmc_mci_removal_1+0x14>
80006b2c:	18 98       	mov	r8,r12
}
80006b2e:	10 9c       	mov	r12,r8
80006b30:	e3 cd 80 80 	ldm	sp++,r7,pc
80006b34:	80 00       	ld.sh	r0,r0[0x0]
80006b36:	6a f0       	ld.w	r0,r5[0x3c]

80006b38 <sd_mmc_mci_usb_read_10>:
 */
//! @{


Ctrl_status sd_mmc_mci_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
80006b38:	eb cd 40 80 	pushm	r7,lr
80006b3c:	1a 97       	mov	r7,sp
80006b3e:	20 3d       	sub	sp,12
80006b40:	18 99       	mov	r9,r12
80006b42:	ef 4b ff f8 	st.w	r7[-8],r11
80006b46:	14 98       	mov	r8,r10
80006b48:	ef 69 ff fc 	st.b	r7[-4],r9
80006b4c:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80006b50:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006b54:	10 9c       	mov	r12,r8
80006b56:	f0 1f 00 1f 	mcall	80006bd0 <sd_mmc_mci_usb_read_10+0x98>
80006b5a:	18 98       	mov	r8,r12
80006b5c:	ec 18 00 01 	eorl	r8,0x1
80006b60:	5c 58       	castu.b	r8
80006b62:	c0 30       	breq	80006b68 <sd_mmc_mci_usb_read_10+0x30>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80006b64:	30 28       	mov	r8,2
80006b66:	c3 08       	rjmp	80006bc6 <sd_mmc_mci_usb_read_10+0x8e>
   }

   if( !sd_mmc_mci_dma_read_open(slot, addr, NULL, nb_sector) )
80006b68:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80006b6c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006b70:	30 0a       	mov	r10,0
80006b72:	ee fb ff f8 	ld.w	r11,r7[-8]
80006b76:	10 9c       	mov	r12,r8
80006b78:	f0 1f 00 17 	mcall	80006bd4 <sd_mmc_mci_usb_read_10+0x9c>
80006b7c:	18 98       	mov	r8,r12
80006b7e:	ec 18 00 01 	eorl	r8,0x1
80006b82:	5c 58       	castu.b	r8
80006b84:	c0 30       	breq	80006b8a <sd_mmc_mci_usb_read_10+0x52>
     return CTRL_FAIL;
80006b86:	30 18       	mov	r8,1
80006b88:	c1 f8       	rjmp	80006bc6 <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_multiple_sector(slot, nb_sector, addr) )
80006b8a:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80006b8e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006b92:	ee fa ff f8 	ld.w	r10,r7[-8]
80006b96:	12 9b       	mov	r11,r9
80006b98:	10 9c       	mov	r12,r8
80006b9a:	f0 1f 00 10 	mcall	80006bd8 <sd_mmc_mci_usb_read_10+0xa0>
80006b9e:	18 98       	mov	r8,r12
80006ba0:	ec 18 00 01 	eorl	r8,0x1
80006ba4:	5c 58       	castu.b	r8
80006ba6:	c0 30       	breq	80006bac <sd_mmc_mci_usb_read_10+0x74>
     return CTRL_FAIL;
80006ba8:	30 18       	mov	r8,1
80006baa:	c0 e8       	rjmp	80006bc6 <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_close(slot) )
80006bac:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006bb0:	10 9c       	mov	r12,r8
80006bb2:	f0 1f 00 0b 	mcall	80006bdc <sd_mmc_mci_usb_read_10+0xa4>
80006bb6:	18 98       	mov	r8,r12
80006bb8:	ec 18 00 01 	eorl	r8,0x1
80006bbc:	5c 58       	castu.b	r8
80006bbe:	c0 30       	breq	80006bc4 <sd_mmc_mci_usb_read_10+0x8c>
     return CTRL_FAIL;
80006bc0:	30 18       	mov	r8,1
80006bc2:	c0 28       	rjmp	80006bc6 <sd_mmc_mci_usb_read_10+0x8e>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80006bc4:	30 08       	mov	r8,0
}
80006bc6:	10 9c       	mov	r12,r8
80006bc8:	2f dd       	sub	sp,-12
80006bca:	e3 cd 80 80 	ldm	sp++,r7,pc
80006bce:	00 00       	add	r0,r0
80006bd0:	80 00       	ld.sh	r0,r0[0x0]
80006bd2:	5d 20       	mustr	r0
80006bd4:	80 00       	ld.sh	r0,r0[0x0]
80006bd6:	5e 00       	reteq	r0
80006bd8:	80 00       	ld.sh	r0,r0[0x0]
80006bda:	63 f4       	ld.w	r4,r1[0x7c]
80006bdc:	80 00       	ld.sh	r0,r0[0x0]
80006bde:	5f 94       	srgt	r4

80006be0 <sd_mmc_mci_usb_read_10_0>:


Ctrl_status sd_mmc_mci_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
80006be0:	eb cd 40 80 	pushm	r7,lr
80006be4:	1a 97       	mov	r7,sp
80006be6:	20 2d       	sub	sp,8
80006be8:	ef 4c ff fc 	st.w	r7[-4],r12
80006bec:	16 98       	mov	r8,r11
80006bee:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(0, addr, nb_sector);
80006bf2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80006bf6:	10 9a       	mov	r10,r8
80006bf8:	ee fb ff fc 	ld.w	r11,r7[-4]
80006bfc:	30 0c       	mov	r12,0
80006bfe:	f0 1f 00 04 	mcall	80006c0c <sd_mmc_mci_usb_read_10_0+0x2c>
80006c02:	18 98       	mov	r8,r12
}
80006c04:	10 9c       	mov	r12,r8
80006c06:	2f ed       	sub	sp,-8
80006c08:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c0c:	80 00       	ld.sh	r0,r0[0x0]
80006c0e:	6b 38       	ld.w	r8,r5[0x4c]

80006c10 <sd_mmc_mci_usb_read_10_1>:


Ctrl_status sd_mmc_mci_usb_read_10_1(uint32_t addr, uint16_t nb_sector)
{
80006c10:	eb cd 40 80 	pushm	r7,lr
80006c14:	1a 97       	mov	r7,sp
80006c16:	20 2d       	sub	sp,8
80006c18:	ef 4c ff fc 	st.w	r7[-4],r12
80006c1c:	16 98       	mov	r8,r11
80006c1e:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(1, addr, nb_sector);
80006c22:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80006c26:	10 9a       	mov	r10,r8
80006c28:	ee fb ff fc 	ld.w	r11,r7[-4]
80006c2c:	30 1c       	mov	r12,1
80006c2e:	f0 1f 00 04 	mcall	80006c3c <sd_mmc_mci_usb_read_10_1+0x2c>
80006c32:	18 98       	mov	r8,r12
}
80006c34:	10 9c       	mov	r12,r8
80006c36:	2f ed       	sub	sp,-8
80006c38:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c3c:	80 00       	ld.sh	r0,r0[0x0]
80006c3e:	6b 38       	ld.w	r8,r5[0x4c]

80006c40 <sd_mmc_mci_usb_write_10>:
#endif
}


Ctrl_status sd_mmc_mci_usb_write_10(uint8_t slot,uint32_t addr, uint16_t nb_sector)
{
80006c40:	eb cd 40 80 	pushm	r7,lr
80006c44:	1a 97       	mov	r7,sp
80006c46:	20 3d       	sub	sp,12
80006c48:	18 99       	mov	r9,r12
80006c4a:	ef 4b ff f8 	st.w	r7[-8],r11
80006c4e:	14 98       	mov	r8,r10
80006c50:	ef 69 ff fc 	st.b	r7[-4],r9
80006c54:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80006c58:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006c5c:	10 9c       	mov	r12,r8
80006c5e:	f0 1f 00 1f 	mcall	80006cd8 <sd_mmc_mci_usb_write_10+0x98>
80006c62:	18 98       	mov	r8,r12
80006c64:	ec 18 00 01 	eorl	r8,0x1
80006c68:	5c 58       	castu.b	r8
80006c6a:	c0 30       	breq	80006c70 <sd_mmc_mci_usb_write_10+0x30>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80006c6c:	30 28       	mov	r8,2
80006c6e:	c3 08       	rjmp	80006cce <sd_mmc_mci_usb_write_10+0x8e>
   }

   if( !sd_mmc_mci_dma_write_open(slot, addr, NULL, nb_sector) )
80006c70:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80006c74:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006c78:	30 0a       	mov	r10,0
80006c7a:	ee fb ff f8 	ld.w	r11,r7[-8]
80006c7e:	10 9c       	mov	r12,r8
80006c80:	f0 1f 00 17 	mcall	80006cdc <sd_mmc_mci_usb_write_10+0x9c>
80006c84:	18 98       	mov	r8,r12
80006c86:	ec 18 00 01 	eorl	r8,0x1
80006c8a:	5c 58       	castu.b	r8
80006c8c:	c0 30       	breq	80006c92 <sd_mmc_mci_usb_write_10+0x52>
     return CTRL_FAIL;
80006c8e:	30 18       	mov	r8,1
80006c90:	c1 f8       	rjmp	80006cce <sd_mmc_mci_usb_write_10+0x8e>

   if( !sd_mmc_mci_write_multiple_sector(slot, nb_sector, addr) )
80006c92:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80006c96:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006c9a:	ee fa ff f8 	ld.w	r10,r7[-8]
80006c9e:	12 9b       	mov	r11,r9
80006ca0:	10 9c       	mov	r12,r8
80006ca2:	f0 1f 00 10 	mcall	80006ce0 <sd_mmc_mci_usb_write_10+0xa0>
80006ca6:	18 98       	mov	r8,r12
80006ca8:	ec 18 00 01 	eorl	r8,0x1
80006cac:	5c 58       	castu.b	r8
80006cae:	c0 30       	breq	80006cb4 <sd_mmc_mci_usb_write_10+0x74>
     return CTRL_FAIL;
80006cb0:	30 18       	mov	r8,1
80006cb2:	c0 e8       	rjmp	80006cce <sd_mmc_mci_usb_write_10+0x8e>

   if( !sd_mmc_mci_write_close(slot) )
80006cb4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006cb8:	10 9c       	mov	r12,r8
80006cba:	f0 1f 00 0b 	mcall	80006ce4 <sd_mmc_mci_usb_write_10+0xa4>
80006cbe:	18 98       	mov	r8,r12
80006cc0:	ec 18 00 01 	eorl	r8,0x1
80006cc4:	5c 58       	castu.b	r8
80006cc6:	c0 30       	breq	80006ccc <sd_mmc_mci_usb_write_10+0x8c>
     return CTRL_FAIL;
80006cc8:	30 18       	mov	r8,1
80006cca:	c0 28       	rjmp	80006cce <sd_mmc_mci_usb_write_10+0x8e>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80006ccc:	30 08       	mov	r8,0

}
80006cce:	10 9c       	mov	r12,r8
80006cd0:	2f dd       	sub	sp,-12
80006cd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80006cd6:	00 00       	add	r0,r0
80006cd8:	80 00       	ld.sh	r0,r0[0x0]
80006cda:	5d 20       	mustr	r0
80006cdc:	80 00       	ld.sh	r0,r0[0x0]
80006cde:	60 30       	ld.w	r0,r0[0xc]
80006ce0:	80 00       	ld.sh	r0,r0[0x0]
80006ce2:	66 3c       	ld.w	r12,r3[0xc]
80006ce4:	80 00       	ld.sh	r0,r0[0x0]
80006ce6:	61 9c       	ld.w	r12,r0[0x64]

80006ce8 <sd_mmc_mci_usb_write_10_0>:


Ctrl_status sd_mmc_mci_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
80006ce8:	eb cd 40 80 	pushm	r7,lr
80006cec:	1a 97       	mov	r7,sp
80006cee:	20 2d       	sub	sp,8
80006cf0:	ef 4c ff fc 	st.w	r7[-4],r12
80006cf4:	16 98       	mov	r8,r11
80006cf6:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_write_10(0, addr, nb_sector);
80006cfa:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80006cfe:	10 9a       	mov	r10,r8
80006d00:	ee fb ff fc 	ld.w	r11,r7[-4]
80006d04:	30 0c       	mov	r12,0
80006d06:	f0 1f 00 04 	mcall	80006d14 <sd_mmc_mci_usb_write_10_0+0x2c>
80006d0a:	18 98       	mov	r8,r12
}
80006d0c:	10 9c       	mov	r12,r8
80006d0e:	2f ed       	sub	sp,-8
80006d10:	e3 cd 80 80 	ldm	sp++,r7,pc
80006d14:	80 00       	ld.sh	r0,r0[0x0]
80006d16:	6c 40       	ld.w	r0,r6[0x10]

80006d18 <sd_mmc_mci_usb_write_10_1>:


Ctrl_status sd_mmc_mci_usb_write_10_1(uint32_t addr, uint16_t nb_sector)
{
80006d18:	eb cd 40 80 	pushm	r7,lr
80006d1c:	1a 97       	mov	r7,sp
80006d1e:	20 2d       	sub	sp,8
80006d20:	ef 4c ff fc 	st.w	r7[-4],r12
80006d24:	16 98       	mov	r8,r11
80006d26:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_write_10(1, addr, nb_sector);
80006d2a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80006d2e:	10 9a       	mov	r10,r8
80006d30:	ee fb ff fc 	ld.w	r11,r7[-4]
80006d34:	30 1c       	mov	r12,1
80006d36:	f0 1f 00 04 	mcall	80006d44 <sd_mmc_mci_usb_write_10_1+0x2c>
80006d3a:	18 98       	mov	r8,r12
}
80006d3c:	10 9c       	mov	r12,r8
80006d3e:	2f ed       	sub	sp,-8
80006d40:	e3 cd 80 80 	ldm	sp++,r7,pc
80006d44:	80 00       	ld.sh	r0,r0[0x0]
80006d46:	6c 40       	ld.w	r0,r6[0x10]

80006d48 <aes_configure>:




void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
80006d48:	eb cd 40 80 	pushm	r7,lr
80006d4c:	1a 97       	mov	r7,sp
80006d4e:	20 2d       	sub	sp,8
80006d50:	ef 4c ff fc 	st.w	r7[-4],r12
80006d54:	ef 4b ff f8 	st.w	r7[-8],r11
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
80006d58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d5c:	11 88       	ld.ub	r8,r8[0x0]
80006d5e:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
            ((pAesConfig->ProcessingDelay << AVR32_AES_MR_PROCDLY_OFFSET) & AVR32_AES_MR_PROCDLY_MASK) |
80006d62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d66:	11 98       	ld.ub	r8,r8[0x1]
80006d68:	a5 68       	lsl	r8,0x4
80006d6a:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80006d6e:	10 49       	or	r9,r8
            ((pAesConfig->StartMode << AVR32_AES_MR_SMOD_OFFSET) & AVR32_AES_MR_SMOD_MASK) |
80006d70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d74:	11 a8       	ld.ub	r8,r8[0x2]
80006d76:	a9 68       	lsl	r8,0x8
80006d78:	e2 18 03 00 	andl	r8,0x300,COH
80006d7c:	10 49       	or	r9,r8
            ((pAesConfig->KeySize << AVR32_AES_MR_KEYSIZE_OFFSET) & AVR32_AES_MR_KEYSIZE_MASK) |
80006d7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d82:	11 b8       	ld.ub	r8,r8[0x3]
80006d84:	ab 68       	lsl	r8,0xa
80006d86:	e2 18 0c 00 	andl	r8,0xc00,COH
80006d8a:	10 49       	or	r9,r8
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
80006d8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d90:	11 c8       	ld.ub	r8,r8[0x4]
80006d92:	ad 68       	lsl	r8,0xc
80006d94:	e2 18 70 00 	andl	r8,0x7000,COH
80006d98:	10 49       	or	r9,r8
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
80006d9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d9e:	11 d8       	ld.ub	r8,r8[0x5]
80006da0:	af 78       	lsl	r8,0xf
80006da2:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80006da6:	10 49       	or	r9,r8
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
80006da8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006dac:	11 e8       	ld.ub	r8,r8[0x6]
80006dae:	b1 68       	lsl	r8,0x10
80006db0:	e6 18 00 07 	andh	r8,0x7,COH
80006db4:	10 49       	or	r9,r8
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
80006db6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006dba:	11 f8       	ld.ub	r8,r8[0x7]
80006dbc:	b9 68       	lsl	r8,0x18
80006dbe:	e6 18 1f 00 	andh	r8,0x1f00,COH
80006dc2:	f3 e8 10 08 	or	r8,r9,r8



void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
80006dc6:	ea 18 00 e0 	orh	r8,0xe0
80006dca:	10 99       	mov	r9,r8
80006dcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006dd0:	91 19       	st.w	r8[0x4],r9
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
            ((AES_CKEY << AVR32_AES_MR_CKEY_OFFSET) & AVR32_AES_MR_CKEY_MASK);
}
80006dd2:	2f ed       	sub	sp,-8
80006dd4:	e3 cd 80 80 	ldm	sp++,r7,pc

80006dd8 <aes_set_key>:
  return(aes->isr);
}


void aes_set_key( volatile avr32_aes_t *aes, const unsigned long int *pKey)
{
80006dd8:	eb cd 40 80 	pushm	r7,lr
80006ddc:	1a 97       	mov	r7,sp
80006dde:	20 4d       	sub	sp,16
80006de0:	ef 4c ff f4 	st.w	r7[-12],r12
80006de4:	ef 4b ff f0 	st.w	r7[-16],r11
  unsigned long int volatile *pTempo = &(aes->keyw1r);
80006de8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006dec:	2e 08       	sub	r8,-32
80006dee:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char       keylen = 0;
80006df2:	30 08       	mov	r8,0
80006df4:	ef 68 ff ff 	st.b	r7[-1],r8


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
80006df8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006dfc:	70 18       	ld.w	r8,r8[0x4]
80006dfe:	e2 18 0c 00 	andl	r8,0xc00,COH
80006e02:	ab 88       	lsr	r8,0xa
80006e04:	58 18       	cp.w	r8,1
80006e06:	c0 90       	breq	80006e18 <aes_set_key+0x40>
80006e08:	c0 43       	brcs	80006e10 <aes_set_key+0x38>
80006e0a:	58 28       	cp.w	r8,2
80006e0c:	c0 a0       	breq	80006e20 <aes_set_key+0x48>
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
80006e0e:	c2 38       	rjmp	80006e54 <aes_set_key+0x7c>


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
  {
    case 0: // 128bit cryptographic key
      keylen = 4;
80006e10:	30 48       	mov	r8,4
80006e12:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
80006e16:	c0 98       	rjmp	80006e28 <aes_set_key+0x50>
    case 1: // 192bit cryptographic key
      keylen = 6;
80006e18:	30 68       	mov	r8,6
80006e1a:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
80006e1e:	c0 58       	rjmp	80006e28 <aes_set_key+0x50>
    case 2: // 256bit cryptographic key
      keylen = 8;
80006e20:	30 88       	mov	r8,8
80006e22:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
80006e26:	c1 78       	rjmp	80006e54 <aes_set_key+0x7c>
80006e28:	c1 68       	rjmp	80006e54 <aes_set_key+0x7c>
    *pTempo++ = *pKey++;
80006e2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e2e:	70 09       	ld.w	r9,r8[0x0]
80006e30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e34:	91 09       	st.w	r8[0x0],r9
80006e36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e3a:	2f c8       	sub	r8,-4
80006e3c:	ef 48 ff f8 	st.w	r7[-8],r8
80006e40:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e44:	2f c8       	sub	r8,-4
80006e46:	ef 48 ff f0 	st.w	r7[-16],r8
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
80006e4a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006e4e:	20 18       	sub	r8,1
80006e50:	ef 68 ff ff 	st.b	r7[-1],r8
80006e54:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006e58:	30 08       	mov	r8,0
80006e5a:	f0 09 18 00 	cp.b	r9,r8
80006e5e:	ce 61       	brne	80006e2a <aes_set_key+0x52>
    *pTempo++ = *pKey++;
}
80006e60:	2f cd       	sub	sp,-16
80006e62:	e3 cd 80 80 	ldm	sp++,r7,pc

80006e66 <aes_set_initvector>:


void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
80006e66:	eb cd 40 80 	pushm	r7,lr
80006e6a:	1a 97       	mov	r7,sp
80006e6c:	20 4d       	sub	sp,16
80006e6e:	ef 4c ff f4 	st.w	r7[-12],r12
80006e72:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->iv1r);
80006e76:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006e7a:	2a 08       	sub	r8,-96
80006e7c:	ef 48 ff f8 	st.w	r7[-8],r8
  int i;

  for(i=0; i<4; i++)
80006e80:	30 08       	mov	r8,0
80006e82:	ef 48 ff fc 	st.w	r7[-4],r8
80006e86:	c1 68       	rjmp	80006eb2 <aes_set_initvector+0x4c>
    *pTempo++ = *pVector++;
80006e88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e8c:	70 09       	ld.w	r9,r8[0x0]
80006e8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e92:	91 09       	st.w	r8[0x0],r9
80006e94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e98:	2f c8       	sub	r8,-4
80006e9a:	ef 48 ff f8 	st.w	r7[-8],r8
80006e9e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006ea2:	2f c8       	sub	r8,-4
80006ea4:	ef 48 ff f0 	st.w	r7[-16],r8
void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
  volatile uint32_t *pTempo = &(aes->iv1r);
  int i;

  for(i=0; i<4; i++)
80006ea8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006eac:	2f f8       	sub	r8,-1
80006eae:	ef 48 ff fc 	st.w	r7[-4],r8
80006eb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006eb6:	58 38       	cp.w	r8,3
80006eb8:	fe 9a ff e8 	brle	80006e88 <aes_set_initvector+0x22>
    *pTempo++ = *pVector++;
}
80006ebc:	2f cd       	sub	sp,-16
80006ebe:	e3 cd 80 80 	ldm	sp++,r7,pc

80006ec2 <aes_write_inputdata>:


void aes_write_inputdata( volatile avr32_aes_t *aes, uint32_t *pIn)
{
80006ec2:	eb cd 40 80 	pushm	r7,lr
80006ec6:	1a 97       	mov	r7,sp
80006ec8:	20 4d       	sub	sp,16
80006eca:	ef 4c ff f4 	st.w	r7[-12],r12
80006ece:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->idata1r);
80006ed2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006ed6:	2c 08       	sub	r8,-64
80006ed8:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char inlen = 4;
80006edc:	30 48       	mov	r8,4
80006ede:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
80006ee2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006ee6:	70 18       	ld.w	r8,r8[0x4]
80006ee8:	e2 18 70 00 	andl	r8,0x7000,COH
80006eec:	ad 88       	lsr	r8,0xc
80006eee:	58 38       	cp.w	r8,3
80006ef0:	c2 c1       	brne	80006f48 <aes_write_inputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
80006ef2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006ef6:	70 18       	ld.w	r8,r8[0x4]
80006ef8:	e6 18 00 07 	andh	r8,0x7,COH
80006efc:	b1 88       	lsr	r8,0x10
80006efe:	58 18       	cp.w	r8,1
80006f00:	c0 60       	breq	80006f0c <aes_write_inputdata+0x4a>
80006f02:	c2 33       	brcs	80006f48 <aes_write_inputdata+0x86>
80006f04:	58 48       	cp.w	r8,4
80006f06:	e0 8b 00 21 	brhi	80006f48 <aes_write_inputdata+0x86>
80006f0a:	c0 68       	rjmp	80006f16 <aes_write_inputdata+0x54>
    {
      case 1: // 64bit CFB data size
        inlen = 2;
80006f0c:	30 28       	mov	r8,2
80006f0e:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
80006f12:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
80006f14:	c1 a8       	rjmp	80006f48 <aes_write_inputdata+0x86>
        inlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        inlen = 1;
80006f16:	30 18       	mov	r8,1
80006f18:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
80006f1c:	c1 68       	rjmp	80006f48 <aes_write_inputdata+0x86>
    *pTempo++ = *pIn++;
80006f1e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006f22:	70 09       	ld.w	r9,r8[0x0]
80006f24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006f28:	91 09       	st.w	r8[0x0],r9
80006f2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006f2e:	2f c8       	sub	r8,-4
80006f30:	ef 48 ff f8 	st.w	r7[-8],r8
80006f34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006f38:	2f c8       	sub	r8,-4
80006f3a:	ef 48 ff f0 	st.w	r7[-16],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
80006f3e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006f42:	20 18       	sub	r8,1
80006f44:	ef 68 ff ff 	st.b	r7[-1],r8
80006f48:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006f4c:	30 08       	mov	r8,0
80006f4e:	f0 09 18 00 	cp.b	r9,r8
80006f52:	ce 61       	brne	80006f1e <aes_write_inputdata+0x5c>
    *pTempo++ = *pIn++;
}
80006f54:	2f cd       	sub	sp,-16
80006f56:	e3 cd 80 80 	ldm	sp++,r7,pc

80006f5a <aes_read_outputdata>:


void aes_read_outputdata( volatile avr32_aes_t *aes, uint32_t *pOut)
{
80006f5a:	eb cd 40 80 	pushm	r7,lr
80006f5e:	1a 97       	mov	r7,sp
80006f60:	20 4d       	sub	sp,16
80006f62:	ef 4c ff f4 	st.w	r7[-12],r12
80006f66:	ef 4b ff f0 	st.w	r7[-16],r11
  const volatile uint32_t *pTempo = &(aes->odata1r);
80006f6a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006f6e:	2b 08       	sub	r8,-80
80006f70:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char outlen = 4;
80006f74:	30 48       	mov	r8,4
80006f76:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
80006f7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006f7e:	70 18       	ld.w	r8,r8[0x4]
80006f80:	e2 18 70 00 	andl	r8,0x7000,COH
80006f84:	ad 88       	lsr	r8,0xc
80006f86:	58 38       	cp.w	r8,3
80006f88:	c2 c1       	brne	80006fe0 <aes_read_outputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
80006f8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006f8e:	70 18       	ld.w	r8,r8[0x4]
80006f90:	e6 18 00 07 	andh	r8,0x7,COH
80006f94:	b1 88       	lsr	r8,0x10
80006f96:	58 18       	cp.w	r8,1
80006f98:	c0 60       	breq	80006fa4 <aes_read_outputdata+0x4a>
80006f9a:	c2 33       	brcs	80006fe0 <aes_read_outputdata+0x86>
80006f9c:	58 48       	cp.w	r8,4
80006f9e:	e0 8b 00 21 	brhi	80006fe0 <aes_read_outputdata+0x86>
80006fa2:	c0 68       	rjmp	80006fae <aes_read_outputdata+0x54>
    {
      case 1: // 64bit CFB data size
        outlen = 2;
80006fa4:	30 28       	mov	r8,2
80006fa6:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
80006faa:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80006fac:	c1 a8       	rjmp	80006fe0 <aes_read_outputdata+0x86>
        outlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        outlen = 1;
80006fae:	30 18       	mov	r8,1
80006fb0:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80006fb4:	c1 68       	rjmp	80006fe0 <aes_read_outputdata+0x86>
    *pOut++ = *pTempo++;
80006fb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006fba:	70 09       	ld.w	r9,r8[0x0]
80006fbc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006fc0:	91 09       	st.w	r8[0x0],r9
80006fc2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006fc6:	2f c8       	sub	r8,-4
80006fc8:	ef 48 ff f0 	st.w	r7[-16],r8
80006fcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006fd0:	2f c8       	sub	r8,-4
80006fd2:	ef 48 ff f8 	st.w	r7[-8],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80006fd6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006fda:	20 18       	sub	r8,1
80006fdc:	ef 68 ff ff 	st.b	r7[-1],r8
80006fe0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006fe4:	30 08       	mov	r8,0
80006fe6:	f0 09 18 00 	cp.b	r9,r8
80006fea:	ce 61       	brne	80006fb6 <aes_read_outputdata+0x5c>
    *pOut++ = *pTempo++;
}
80006fec:	2f cd       	sub	sp,-16
80006fee:	e3 cd 80 80 	ldm	sp++,r7,pc
80006ff2:	d7 03       	nop

80006ff4 <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
80006ff4:	eb cd 40 80 	pushm	r7,lr
80006ff8:	1a 97       	mov	r7,sp
80006ffa:	20 cd       	sub	sp,48
80006ffc:	ef 4c ff d0 	st.w	r7[-48],r12
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80007000:	ee f8 ff d0 	ld.w	r8,r7[-48]
80007004:	ee 7a 42 3f 	mov	r10,999999
80007008:	f0 0a 00 09 	add	r9,r8,r10
8000700c:	e0 68 de 83 	mov	r8,56963
80007010:	ea 18 43 1b 	orh	r8,0x431b
80007014:	f2 08 06 48 	mulu.d	r8,r9,r8
80007018:	f2 08 16 12 	lsr	r8,r9,0x12
8000701c:	ef 48 ff d4 	st.w	r7[-44],r8
//! Whether to use the NCS0 pin
#ifdef SMC_USE_NCS0
  #include SMC_COMPONENT_CS0

  // Setup SMC for NCS0
  SMC_CS_SETUP(0)
80007020:	ee f9 ff d4 	ld.w	r9,r7[-44]
80007024:	12 98       	mov	r8,r9
80007026:	a3 68       	lsl	r8,0x2
80007028:	12 08       	add	r8,r9
8000702a:	a3 68       	lsl	r8,0x2
8000702c:	f0 c9 fc 19 	sub	r9,r8,-999
80007030:	e0 68 4d d3 	mov	r8,19923
80007034:	ea 18 10 62 	orh	r8,0x1062
80007038:	f2 08 06 48 	mulu.d	r8,r9,r8
8000703c:	f2 08 16 06 	lsr	r8,r9,0x6
80007040:	ef 48 ff d8 	st.w	r7[-40],r8
80007044:	30 08       	mov	r8,0
80007046:	ef 48 ff dc 	st.w	r7[-36],r8
8000704a:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000704e:	12 98       	mov	r8,r9
80007050:	a5 68       	lsl	r8,0x4
80007052:	12 18       	sub	r8,r9
80007054:	a1 78       	lsl	r8,0x1
80007056:	f0 c9 fc 19 	sub	r9,r8,-999
8000705a:	e0 68 4d d3 	mov	r8,19923
8000705e:	ea 18 10 62 	orh	r8,0x1062
80007062:	f2 08 06 48 	mulu.d	r8,r9,r8
80007066:	f2 08 16 06 	lsr	r8,r9,0x6
8000706a:	ef 48 ff e0 	st.w	r7[-32],r8
8000706e:	30 08       	mov	r8,0
80007070:	ef 48 ff e4 	st.w	r7[-28],r8
80007074:	ee f9 ff d4 	ld.w	r9,r7[-44]
80007078:	12 98       	mov	r8,r9
8000707a:	a5 68       	lsl	r8,0x4
8000707c:	12 18       	sub	r8,r9
8000707e:	a3 68       	lsl	r8,0x2
80007080:	f0 c9 fc 19 	sub	r9,r8,-999
80007084:	e0 68 4d d3 	mov	r8,19923
80007088:	ea 18 10 62 	orh	r8,0x1062
8000708c:	f2 08 06 48 	mulu.d	r8,r9,r8
80007090:	f2 08 16 06 	lsr	r8,r9,0x6
80007094:	ef 48 ff e8 	st.w	r7[-24],r8
80007098:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000709c:	f0 08 10 5a 	mul	r8,r8,90
800070a0:	f0 c9 fc 19 	sub	r9,r8,-999
800070a4:	e0 68 4d d3 	mov	r8,19923
800070a8:	ea 18 10 62 	orh	r8,0x1062
800070ac:	f2 08 06 48 	mulu.d	r8,r9,r8
800070b0:	f2 08 16 06 	lsr	r8,r9,0x6
800070b4:	ef 48 ff ec 	st.w	r7[-20],r8
800070b8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800070bc:	e0 68 00 d2 	mov	r8,210
800070c0:	f2 08 02 48 	mul	r8,r9,r8
800070c4:	f0 c9 fc 19 	sub	r9,r8,-999
800070c8:	e0 68 4d d3 	mov	r8,19923
800070cc:	ea 18 10 62 	orh	r8,0x1062
800070d0:	f2 08 06 48 	mulu.d	r8,r9,r8
800070d4:	f2 08 16 06 	lsr	r8,r9,0x6
800070d8:	ef 48 ff f0 	st.w	r7[-16],r8
800070dc:	ee f9 ff d4 	ld.w	r9,r7[-44]
800070e0:	12 98       	mov	r8,r9
800070e2:	a5 68       	lsl	r8,0x4
800070e4:	12 18       	sub	r8,r9
800070e6:	a5 68       	lsl	r8,0x4
800070e8:	f0 c9 fc 19 	sub	r9,r8,-999
800070ec:	e0 68 4d d3 	mov	r8,19923
800070f0:	ea 18 10 62 	orh	r8,0x1062
800070f4:	f2 08 06 48 	mulu.d	r8,r9,r8
800070f8:	f2 08 16 06 	lsr	r8,r9,0x6
800070fc:	ef 48 ff f4 	st.w	r7[-12],r8
80007100:	ee f8 ff d4 	ld.w	r8,r7[-44]
80007104:	f0 08 10 64 	mul	r8,r8,100
80007108:	f0 c9 fc 19 	sub	r9,r8,-999
8000710c:	e0 68 4d d3 	mov	r8,19923
80007110:	ea 18 10 62 	orh	r8,0x1062
80007114:	f2 08 06 48 	mulu.d	r8,r9,r8
80007118:	f2 08 16 06 	lsr	r8,r9,0x6
8000711c:	ef 48 ff f8 	st.w	r7[-8],r8
80007120:	ee f9 ff d4 	ld.w	r9,r7[-44]
80007124:	e0 68 01 0e 	mov	r8,270
80007128:	f2 08 02 48 	mul	r8,r9,r8
8000712c:	f0 c9 fc 19 	sub	r9,r8,-999
80007130:	e0 68 4d d3 	mov	r8,19923
80007134:	ea 18 10 62 	orh	r8,0x1062
80007138:	f2 08 06 48 	mulu.d	r8,r9,r8
8000713c:	f2 08 16 06 	lsr	r8,r9,0x6
80007140:	ef 48 ff fc 	st.w	r7[-4],r8
80007144:	ee f9 ff e4 	ld.w	r9,r7[-28]
80007148:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000714c:	10 09       	add	r9,r8
8000714e:	ee fa ff e0 	ld.w	r10,r7[-32]
80007152:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007156:	f4 08 00 08 	add	r8,r10,r8
8000715a:	10 39       	cp.w	r9,r8
8000715c:	c0 c2       	brcc	80007174 <smc_init+0x180>
8000715e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80007162:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007166:	10 09       	add	r9,r8
80007168:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000716c:	f2 08 01 08 	sub	r8,r9,r8
80007170:	ef 48 ff f4 	st.w	r7[-12],r8
80007174:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007178:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000717c:	10 09       	add	r9,r8
8000717e:	ee fa ff d8 	ld.w	r10,r7[-40]
80007182:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007186:	f4 08 00 08 	add	r8,r10,r8
8000718a:	10 39       	cp.w	r9,r8
8000718c:	c0 c2       	brcc	800071a4 <smc_init+0x1b0>
8000718e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80007192:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007196:	10 09       	add	r9,r8
80007198:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000719c:	f2 08 01 08 	sub	r8,r9,r8
800071a0:	ef 48 ff ec 	st.w	r7[-20],r8
800071a4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800071a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800071ac:	10 09       	add	r9,r8
800071ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800071b2:	10 39       	cp.w	r9,r8
800071b4:	e0 88 00 0a 	brls	800071c8 <smc_init+0x1d4>
800071b8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800071bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800071c0:	f2 08 00 08 	add	r8,r9,r8
800071c4:	ef 48 ff f8 	st.w	r7[-8],r8
800071c8:	ee f9 ff d8 	ld.w	r9,r7[-40]
800071cc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800071d0:	10 09       	add	r9,r8
800071d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800071d6:	10 39       	cp.w	r9,r8
800071d8:	e0 88 00 0a 	brls	800071ec <smc_init+0x1f8>
800071dc:	ee f9 ff d8 	ld.w	r9,r7[-40]
800071e0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800071e4:	f2 08 00 08 	add	r8,r9,r8
800071e8:	ef 48 ff f8 	st.w	r7[-8],r8
800071ec:	ee f9 ff e4 	ld.w	r9,r7[-28]
800071f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800071f4:	10 09       	add	r9,r8
800071f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800071fa:	10 39       	cp.w	r9,r8
800071fc:	e0 88 00 0a 	brls	80007210 <smc_init+0x21c>
80007200:	ee f9 ff e4 	ld.w	r9,r7[-28]
80007204:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007208:	f2 08 00 08 	add	r8,r9,r8
8000720c:	ef 48 ff fc 	st.w	r7[-4],r8
80007210:	ee f9 ff e0 	ld.w	r9,r7[-32]
80007214:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007218:	10 09       	add	r9,r8
8000721a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000721e:	10 39       	cp.w	r9,r8
80007220:	e0 88 00 0a 	brls	80007234 <smc_init+0x240>
80007224:	ee f9 ff e0 	ld.w	r9,r7[-32]
80007228:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000722c:	f2 08 00 08 	add	r8,r9,r8
80007230:	ef 48 ff fc 	st.w	r7[-4],r8
80007234:	fe 68 1c 00 	mov	r8,-123904
80007238:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000723c:	f2 0a 15 08 	lsl	r10,r9,0x8
80007240:	ee f9 ff d8 	ld.w	r9,r7[-40]
80007244:	12 4a       	or	r10,r9
80007246:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000724a:	b1 69       	lsl	r9,0x10
8000724c:	12 4a       	or	r10,r9
8000724e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80007252:	b9 69       	lsl	r9,0x18
80007254:	f5 e9 10 09 	or	r9,r10,r9
80007258:	91 09       	st.w	r8[0x0],r9
8000725a:	fe 68 1c 00 	mov	r8,-123904
8000725e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007262:	f2 0a 15 08 	lsl	r10,r9,0x8
80007266:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000726a:	12 4a       	or	r10,r9
8000726c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007270:	b1 69       	lsl	r9,0x10
80007272:	12 4a       	or	r10,r9
80007274:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007278:	b9 69       	lsl	r9,0x18
8000727a:	f5 e9 10 09 	or	r9,r10,r9
8000727e:	91 19       	st.w	r8[0x4],r9
80007280:	fe 68 1c 00 	mov	r8,-123904
80007284:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007288:	f2 0a 15 10 	lsl	r10,r9,0x10
8000728c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007290:	f5 e9 10 09 	or	r9,r10,r9
80007294:	91 29       	st.w	r8[0x8],r9
80007296:	fe 68 1c 00 	mov	r8,-123904
8000729a:	e0 69 10 03 	mov	r9,4099
8000729e:	91 39       	st.w	r8[0xc],r9
800072a0:	48 49       	lddpc	r9,800072b0 <smc_init+0x2bc>
800072a2:	30 18       	mov	r8,1
800072a4:	b2 88       	st.b	r9[0x0],r8
  #undef NCS_CONTROLLED_READ
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
800072a6:	f0 1f 00 04 	mcall	800072b4 <smc_init+0x2c0>
}
800072aa:	2f 4d       	sub	sp,-48
800072ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800072b0:	00 00       	add	r0,r0
800072b2:	05 40       	ld.w	r0,--r2
800072b4:	80 00       	ld.sh	r0,r0[0x0]
800072b6:	72 b8       	ld.w	r8,r9[0x2c]

800072b8 <smc_enable_muxed_pins>:

/*! \brief Puts the multiplexed MCU pins used for the SMC
 *
 */
static void smc_enable_muxed_pins(void)
{
800072b8:	eb cd 40 80 	pushm	r7,lr
800072bc:	1a 97       	mov	r7,sp
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
800072be:	31 4b       	mov	r11,20
800072c0:	48 3c       	lddpc	r12,800072cc <smc_enable_muxed_pins+0x14>
800072c2:	f0 1f 00 04 	mcall	800072d0 <smc_enable_muxed_pins+0x18>
}
800072c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800072ca:	00 00       	add	r0,r0
800072cc:	80 00       	ld.sh	r0,r0[0x0]
800072ce:	da d4       	*unknown*
800072d0:	80 00       	ld.sh	r0,r0[0x0]
800072d2:	73 54       	ld.w	r4,r9[0x54]

800072d4 <flashc_set_wait_state>:
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
800072d4:	eb cd 40 80 	pushm	r7,lr
800072d8:	1a 97       	mov	r7,sp
800072da:	20 2d       	sub	sp,8
800072dc:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800072e0:	fe 68 14 00 	mov	r8,-125952
800072e4:	70 08       	ld.w	r8,r8[0x0]
800072e6:	30 09       	mov	r9,0
800072e8:	ef 49 ff fc 	st.w	r7[-4],r9
800072ec:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800072f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800072f4:	5c 58       	castu.b	r8
800072f6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800072fa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800072fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007302:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80007306:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000730a:	fe 68 14 00 	mov	r8,-125952
8000730e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007312:	91 09       	st.w	r8[0x0],r9
}
80007314:	2f ed       	sub	sp,-8
80007316:	e3 cd 80 80 	ldm	sp++,r7,pc
8000731a:	d7 03       	nop

8000731c <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
8000731c:	eb cd 40 80 	pushm	r7,lr
80007320:	1a 97       	mov	r7,sp
80007322:	20 1d       	sub	sp,4
80007324:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80007328:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000732c:	e0 69 50 ff 	mov	r9,20735
80007330:	ea 19 02 25 	orh	r9,0x225
80007334:	12 38       	cp.w	r8,r9
80007336:	e0 88 00 06 	brls	80007342 <flashc_set_bus_freq+0x26>
		// Set 1 WS.
		flashc_set_wait_state(1);
8000733a:	30 1c       	mov	r12,1
8000733c:	f0 1f 00 05 	mcall	80007350 <flashc_set_bus_freq+0x34>
80007340:	c0 48       	rjmp	80007348 <flashc_set_bus_freq+0x2c>
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80007342:	30 0c       	mov	r12,0
80007344:	f0 1f 00 03 	mcall	80007350 <flashc_set_bus_freq+0x34>
	}
}
80007348:	2f fd       	sub	sp,-4
8000734a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000734e:	00 00       	add	r0,r0
80007350:	80 00       	ld.sh	r0,r0[0x0]
80007352:	72 d4       	ld.w	r4,r9[0x34]

80007354 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80007354:	eb cd 40 80 	pushm	r7,lr
80007358:	1a 97       	mov	r7,sp
8000735a:	20 4d       	sub	sp,16
8000735c:	ef 4c ff f4 	st.w	r7[-12],r12
80007360:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
80007364:	30 08       	mov	r8,0
80007366:	ef 48 ff f8 	st.w	r7[-8],r8
  uint32_t i;

  for (i = 0; i < size; i++)
8000736a:	30 08       	mov	r8,0
8000736c:	ef 48 ff fc 	st.w	r7[-4],r8
80007370:	c1 d8       	rjmp	800073aa <gpio_enable_module+0x56>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80007372:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007376:	11 98       	ld.ub	r8,r8[0x1]
80007378:	10 99       	mov	r9,r8
8000737a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000737e:	11 88       	ld.ub	r8,r8[0x0]
80007380:	12 9b       	mov	r11,r9
80007382:	10 9c       	mov	r12,r8
80007384:	f0 1f 00 10 	mcall	800073c4 <gpio_enable_module+0x70>
80007388:	18 98       	mov	r8,r12
8000738a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000738e:	f3 e8 10 08 	or	r8,r9,r8
80007392:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
80007396:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000739a:	2f e8       	sub	r8,-2
8000739c:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800073a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800073a4:	2f f8       	sub	r8,-1
800073a6:	ef 48 ff fc 	st.w	r7[-4],r8
800073aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800073ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800073b2:	10 39       	cp.w	r9,r8
800073b4:	cd f3       	brcs	80007372 <gpio_enable_module+0x1e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
800073b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800073ba:	10 9c       	mov	r12,r8
800073bc:	2f cd       	sub	sp,-16
800073be:	e3 cd 80 80 	ldm	sp++,r7,pc
800073c2:	00 00       	add	r0,r0
800073c4:	80 00       	ld.sh	r0,r0[0x0]
800073c6:	73 c8       	ld.w	r8,r9[0x70]

800073c8 <gpio_enable_module_pin>:


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800073c8:	eb cd 40 80 	pushm	r7,lr
800073cc:	1a 97       	mov	r7,sp
800073ce:	20 3d       	sub	sp,12
800073d0:	ef 4c ff f8 	st.w	r7[-8],r12
800073d4:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800073d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800073dc:	a5 98       	lsr	r8,0x5
800073de:	a9 68       	lsl	r8,0x8
800073e0:	e0 28 f0 00 	sub	r8,61440
800073e4:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
800073e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800073ec:	58 18       	cp.w	r8,1
800073ee:	c1 e0       	breq	8000742a <gpio_enable_module_pin+0x62>
800073f0:	c0 63       	brcs	800073fc <gpio_enable_module_pin+0x34>
800073f2:	58 28       	cp.w	r8,2
800073f4:	c3 20       	breq	80007458 <gpio_enable_module_pin+0x90>
800073f6:	58 38       	cp.w	r8,3
800073f8:	c4 70       	breq	80007486 <gpio_enable_module_pin+0xbe>
800073fa:	c5 d8       	rjmp	800074b4 <gpio_enable_module_pin+0xec>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800073fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007400:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007404:	30 19       	mov	r9,1
80007406:	f2 08 09 48 	lsl	r8,r9,r8
8000740a:	10 99       	mov	r9,r8
8000740c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007410:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80007412:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007416:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000741a:	30 19       	mov	r9,1
8000741c:	f2 08 09 48 	lsl	r8,r9,r8
80007420:	10 99       	mov	r9,r8
80007422:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007426:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80007428:	c4 88       	rjmp	800074b8 <gpio_enable_module_pin+0xf0>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000742a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000742e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007432:	30 19       	mov	r9,1
80007434:	f2 08 09 48 	lsl	r8,r9,r8
80007438:	10 99       	mov	r9,r8
8000743a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000743e:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80007440:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007444:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007448:	30 19       	mov	r9,1
8000744a:	f2 08 09 48 	lsl	r8,r9,r8
8000744e:	10 99       	mov	r9,r8
80007450:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007454:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80007456:	c3 18       	rjmp	800074b8 <gpio_enable_module_pin+0xf0>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80007458:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000745c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007460:	30 19       	mov	r9,1
80007462:	f2 08 09 48 	lsl	r8,r9,r8
80007466:	10 99       	mov	r9,r8
80007468:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000746c:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000746e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007472:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007476:	30 19       	mov	r9,1
80007478:	f2 08 09 48 	lsl	r8,r9,r8
8000747c:	10 99       	mov	r9,r8
8000747e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007482:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80007484:	c1 a8       	rjmp	800074b8 <gpio_enable_module_pin+0xf0>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80007486:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000748a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000748e:	30 19       	mov	r9,1
80007490:	f2 08 09 48 	lsl	r8,r9,r8
80007494:	10 99       	mov	r9,r8
80007496:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000749a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000749c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800074a0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800074a4:	30 19       	mov	r9,1
800074a6:	f2 08 09 48 	lsl	r8,r9,r8
800074aa:	10 99       	mov	r9,r8
800074ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800074b0:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
800074b2:	c0 38       	rjmp	800074b8 <gpio_enable_module_pin+0xf0>
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
800074b4:	30 18       	mov	r8,1
800074b6:	c0 d8       	rjmp	800074d0 <gpio_enable_module_pin+0x108>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800074b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800074bc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800074c0:	30 19       	mov	r9,1
800074c2:	f2 08 09 48 	lsl	r8,r9,r8
800074c6:	10 99       	mov	r9,r8
800074c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800074cc:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
800074ce:	30 08       	mov	r8,0
}
800074d0:	10 9c       	mov	r12,r8
800074d2:	2f dd       	sub	sp,-12
800074d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800074d8 <gpio_enable_gpio_pin>:
  }
}


void gpio_enable_gpio_pin(uint32_t pin)
{
800074d8:	eb cd 40 80 	pushm	r7,lr
800074dc:	1a 97       	mov	r7,sp
800074de:	20 2d       	sub	sp,8
800074e0:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800074e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800074e8:	a5 98       	lsr	r8,0x5
800074ea:	a9 68       	lsl	r8,0x8
800074ec:	e0 28 f0 00 	sub	r8,61440
800074f0:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
800074f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800074f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800074fc:	30 19       	mov	r9,1
800074fe:	f2 08 09 48 	lsl	r8,r9,r8
80007502:	10 99       	mov	r9,r8
80007504:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007508:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
8000750c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007510:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007514:	30 19       	mov	r9,1
80007516:	f2 08 09 48 	lsl	r8,r9,r8
8000751a:	10 99       	mov	r9,r8
8000751c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007520:	91 19       	st.w	r8[0x4],r9
}
80007522:	2f ed       	sub	sp,-8
80007524:	e3 cd 80 80 	ldm	sp++,r7,pc

80007528 <gpio_enable_pin_pull_up>:

#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
80007528:	eb cd 40 80 	pushm	r7,lr
8000752c:	1a 97       	mov	r7,sp
8000752e:	20 2d       	sub	sp,8
80007530:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80007534:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007538:	a5 98       	lsr	r8,0x5
8000753a:	a9 68       	lsl	r8,0x8
8000753c:	e0 28 f0 00 	sub	r8,61440
80007540:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80007544:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007548:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000754c:	30 19       	mov	r9,1
8000754e:	f2 08 09 48 	lsl	r8,r9,r8
80007552:	10 99       	mov	r9,r8
80007554:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007558:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
8000755c:	2f ed       	sub	sp,-8
8000755e:	e3 cd 80 80 	ldm	sp++,r7,pc

80007562 <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80007562:	eb cd 40 80 	pushm	r7,lr
80007566:	1a 97       	mov	r7,sp
80007568:	20 3d       	sub	sp,12
8000756a:	ef 4c ff f8 	st.w	r7[-8],r12
8000756e:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80007572:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007576:	a5 98       	lsr	r8,0x5
80007578:	a9 68       	lsl	r8,0x8
8000757a:	e0 28 f0 00 	sub	r8,61440
8000757e:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
80007582:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007586:	e2 18 00 04 	andl	r8,0x4,COH
8000758a:	c0 e0       	breq	800075a6 <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
8000758c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007590:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007594:	30 19       	mov	r9,1
80007596:	f2 08 09 48 	lsl	r8,r9,r8
8000759a:	10 99       	mov	r9,r8
8000759c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800075a0:	f1 49 00 74 	st.w	r8[116],r9
800075a4:	c0 d8       	rjmp	800075be <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
800075a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800075aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800075ae:	30 19       	mov	r9,1
800075b0:	f2 08 09 48 	lsl	r8,r9,r8
800075b4:	10 99       	mov	r9,r8
800075b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800075ba:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
800075be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800075c2:	e2 18 00 80 	andl	r8,0x80,COH
800075c6:	c5 a0       	breq	8000767a <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
800075c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800075cc:	e2 18 01 80 	andl	r8,0x180,COH
800075d0:	c1 a0       	breq	80007604 <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800075d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800075d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800075da:	30 19       	mov	r9,1
800075dc:	f2 08 09 48 	lsl	r8,r9,r8
800075e0:	10 99       	mov	r9,r8
800075e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800075e6:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800075ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800075ee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800075f2:	30 19       	mov	r9,1
800075f4:	f2 08 09 48 	lsl	r8,r9,r8
800075f8:	10 99       	mov	r9,r8
800075fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800075fe:	f1 49 00 b8 	st.w	r8[184],r9
80007602:	c3 c8       	rjmp	8000767a <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
80007604:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007608:	e2 18 02 80 	andl	r8,0x280,COH
8000760c:	c1 a0       	breq	80007640 <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
8000760e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007612:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007616:	30 19       	mov	r9,1
80007618:	f2 08 09 48 	lsl	r8,r9,r8
8000761c:	10 99       	mov	r9,r8
8000761e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007622:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80007626:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000762a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000762e:	30 19       	mov	r9,1
80007630:	f2 08 09 48 	lsl	r8,r9,r8
80007634:	10 99       	mov	r9,r8
80007636:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000763a:	f1 49 00 b8 	st.w	r8[184],r9
8000763e:	c1 e8       	rjmp	8000767a <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
80007640:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007644:	e2 18 03 80 	andl	r8,0x380,COH
80007648:	c1 90       	breq	8000767a <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
8000764a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000764e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007652:	30 19       	mov	r9,1
80007654:	f2 08 09 48 	lsl	r8,r9,r8
80007658:	10 99       	mov	r9,r8
8000765a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000765e:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80007662:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007666:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000766a:	30 19       	mov	r9,1
8000766c:	f2 08 09 48 	lsl	r8,r9,r8
80007670:	10 99       	mov	r9,r8
80007672:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007676:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
8000767a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000767e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007682:	5c 58       	castu.b	r8
80007684:	c2 c0       	breq	800076dc <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
80007686:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000768a:	e2 18 00 02 	andl	r8,0x2,COH
8000768e:	c0 e0       	breq	800076aa <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80007690:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007694:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007698:	30 19       	mov	r9,1
8000769a:	f2 08 09 48 	lsl	r8,r9,r8
8000769e:	10 99       	mov	r9,r8
800076a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800076a4:	f1 49 00 54 	st.w	r8[84],r9
800076a8:	c0 d8       	rjmp	800076c2 <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800076aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800076ae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800076b2:	30 19       	mov	r9,1
800076b4:	f2 08 09 48 	lsl	r8,r9,r8
800076b8:	10 99       	mov	r9,r8
800076ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800076be:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800076c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800076c6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800076ca:	30 19       	mov	r9,1
800076cc:	f2 08 09 48 	lsl	r8,r9,r8
800076d0:	10 99       	mov	r9,r8
800076d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800076d6:	f1 49 00 44 	st.w	r8[68],r9
800076da:	c0 d8       	rjmp	800076f4 <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800076dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800076e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800076e4:	30 19       	mov	r9,1
800076e6:	f2 08 09 48 	lsl	r8,r9,r8
800076ea:	10 99       	mov	r9,r8
800076ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800076f0:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800076f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800076f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800076fc:	30 19       	mov	r9,1
800076fe:	f2 08 09 48 	lsl	r8,r9,r8
80007702:	10 99       	mov	r9,r8
80007704:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007708:	91 19       	st.w	r8[0x4],r9
}
8000770a:	2f dd       	sub	sp,-12
8000770c:	e3 cd 80 80 	ldm	sp++,r7,pc

80007710 <gpio_get_pin_value>:
    /* Enable GPIO */
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
80007710:	eb cd 40 80 	pushm	r7,lr
80007714:	1a 97       	mov	r7,sp
80007716:	20 2d       	sub	sp,8
80007718:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000771c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007720:	a5 98       	lsr	r8,0x5
80007722:	a9 68       	lsl	r8,0x8
80007724:	e0 28 f0 00 	sub	r8,61440
80007728:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8000772c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007730:	71 89       	ld.w	r9,r8[0x60]
80007732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007736:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000773a:	f2 08 0a 48 	lsr	r8,r9,r8
8000773e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80007742:	10 9c       	mov	r12,r8
80007744:	2f ed       	sub	sp,-8
80007746:	e3 cd 80 80 	ldm	sp++,r7,pc

8000774a <gpio_set_gpio_pin>:
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
}


void gpio_set_gpio_pin(uint32_t pin)
{
8000774a:	eb cd 40 80 	pushm	r7,lr
8000774e:	1a 97       	mov	r7,sp
80007750:	20 2d       	sub	sp,8
80007752:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80007756:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000775a:	a5 98       	lsr	r8,0x5
8000775c:	a9 68       	lsl	r8,0x8
8000775e:	e0 28 f0 00 	sub	r8,61440
80007762:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80007766:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000776a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000776e:	30 19       	mov	r9,1
80007770:	f2 08 09 48 	lsl	r8,r9,r8
80007774:	10 99       	mov	r9,r8
80007776:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000777a:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000777e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007782:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007786:	30 19       	mov	r9,1
80007788:	f2 08 09 48 	lsl	r8,r9,r8
8000778c:	10 99       	mov	r9,r8
8000778e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007792:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80007796:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000779a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000779e:	30 19       	mov	r9,1
800077a0:	f2 08 09 48 	lsl	r8,r9,r8
800077a4:	10 99       	mov	r9,r8
800077a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800077aa:	91 19       	st.w	r8[0x4],r9
}
800077ac:	2f ed       	sub	sp,-8
800077ae:	e3 cd 80 80 	ldm	sp++,r7,pc

800077b2 <gpio_clr_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
800077b2:	eb cd 40 80 	pushm	r7,lr
800077b6:	1a 97       	mov	r7,sp
800077b8:	20 2d       	sub	sp,8
800077ba:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800077be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800077c2:	a5 98       	lsr	r8,0x5
800077c4:	a9 68       	lsl	r8,0x8
800077c6:	e0 28 f0 00 	sub	r8,61440
800077ca:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
800077ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800077d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800077d6:	30 19       	mov	r9,1
800077d8:	f2 08 09 48 	lsl	r8,r9,r8
800077dc:	10 99       	mov	r9,r8
800077de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800077e2:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800077e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800077ea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800077ee:	30 19       	mov	r9,1
800077f0:	f2 08 09 48 	lsl	r8,r9,r8
800077f4:	10 99       	mov	r9,r8
800077f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800077fa:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800077fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007802:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007806:	30 19       	mov	r9,1
80007808:	f2 08 09 48 	lsl	r8,r9,r8
8000780c:	10 99       	mov	r9,r8
8000780e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007812:	91 19       	st.w	r8[0x4],r9
}
80007814:	2f ed       	sub	sp,-8
80007816:	e3 cd 80 80 	ldm	sp++,r7,pc

8000781a <gpio_tgl_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
8000781a:	eb cd 40 80 	pushm	r7,lr
8000781e:	1a 97       	mov	r7,sp
80007820:	20 2d       	sub	sp,8
80007822:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80007826:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000782a:	a5 98       	lsr	r8,0x5
8000782c:	a9 68       	lsl	r8,0x8
8000782e:	e0 28 f0 00 	sub	r8,61440
80007832:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
80007836:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000783a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000783e:	30 19       	mov	r9,1
80007840:	f2 08 09 48 	lsl	r8,r9,r8
80007844:	10 99       	mov	r9,r8
80007846:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000784a:	f1 49 00 5c 	st.w	r8[92],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000784e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007852:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007856:	30 19       	mov	r9,1
80007858:	f2 08 09 48 	lsl	r8,r9,r8
8000785c:	10 99       	mov	r9,r8
8000785e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007862:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80007866:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000786a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000786e:	30 19       	mov	r9,1
80007870:	f2 08 09 48 	lsl	r8,r9,r8
80007874:	10 99       	mov	r9,r8
80007876:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000787a:	91 19       	st.w	r8[0x4],r9
}
8000787c:	2f ed       	sub	sp,-8
8000787e:	e3 cd 80 80 	ldm	sp++,r7,pc

80007882 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80007882:	eb cd 40 80 	pushm	r7,lr
80007886:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80007888:	c0 08       	rjmp	80007888 <_unhandled_interrupt+0x6>
8000788a:	d7 03       	nop

8000788c <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
8000788c:	eb cd 40 80 	pushm	r7,lr
80007890:	1a 97       	mov	r7,sp
80007892:	20 3d       	sub	sp,12
80007894:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80007898:	fe 78 08 00 	mov	r8,-63488
8000789c:	ee f9 ff f4 	ld.w	r9,r7[-12]
800078a0:	f2 09 11 03 	rsub	r9,r9,3
800078a4:	28 09       	sub	r9,-128
800078a6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800078aa:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800078ae:	fe 78 08 00 	mov	r8,-63488
800078b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800078b6:	2c 09       	sub	r9,-64
800078b8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800078bc:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800078c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800078c4:	58 08       	cp.w	r8,0
800078c6:	c1 30       	breq	800078ec <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
800078c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800078cc:	48 b8       	lddpc	r8,800078f8 <_get_interrupt_handler+0x6c>
800078ce:	a1 79       	lsl	r9,0x1
800078d0:	2f f9       	sub	r9,-1
800078d2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800078d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800078da:	f0 08 12 00 	clz	r8,r8
800078de:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
800078e2:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
800078e4:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800078e8:	70 08       	ld.w	r8,r8[0x0]
800078ea:	c0 28       	rjmp	800078ee <_get_interrupt_handler+0x62>
800078ec:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800078ee:	10 9c       	mov	r12,r8
800078f0:	2f dd       	sub	sp,-12
800078f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800078f6:	00 00       	add	r0,r0
800078f8:	80 00       	ld.sh	r0,r0[0x0]
800078fa:	da fc       	*unknown*

800078fc <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
800078fc:	eb cd 40 80 	pushm	r7,lr
80007900:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80007902:	48 38       	lddpc	r8,8000790c <INTC_init_evba+0x10>
80007904:	e3 b8 00 01 	mtsr	0x4,r8
}
80007908:	e3 cd 80 80 	ldm	sp++,r7,pc
8000790c:	80 00       	ld.sh	r0,r0[0x0]
8000790e:	d4 00       	acall	0x100

80007910 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80007910:	eb cd 40 80 	pushm	r7,lr
80007914:	1a 97       	mov	r7,sp
80007916:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80007918:	f0 1f 00 1f 	mcall	80007994 <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000791c:	30 08       	mov	r8,0
8000791e:	ef 48 ff f8 	st.w	r7[-8],r8
80007922:	c3 18       	rjmp	80007984 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80007924:	30 08       	mov	r8,0
80007926:	ef 48 ff fc 	st.w	r7[-4],r8
8000792a:	c1 48       	rjmp	80007952 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
8000792c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007930:	49 a8       	lddpc	r8,80007998 <INTC_init_interrupts+0x88>
80007932:	a1 79       	lsl	r9,0x1
80007934:	2f f9       	sub	r9,-1
80007936:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000793a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000793e:	a3 68       	lsl	r8,0x2
80007940:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80007944:	49 69       	lddpc	r9,8000799c <INTC_init_interrupts+0x8c>
80007946:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80007948:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000794c:	2f f8       	sub	r8,-1
8000794e:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80007952:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007956:	49 18       	lddpc	r8,80007998 <INTC_init_interrupts+0x88>
80007958:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000795c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007960:	10 39       	cp.w	r9,r8
80007962:	fe 9b ff e5 	brhi	8000792c <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80007966:	fe 78 08 00 	mov	r8,-63488
8000796a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000796e:	48 db       	lddpc	r11,800079a0 <INTC_init_interrupts+0x90>
80007970:	48 da       	lddpc	r10,800079a4 <INTC_init_interrupts+0x94>
80007972:	f6 0a 01 0a 	sub	r10,r11,r10
80007976:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000797a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000797e:	2f f8       	sub	r8,-1
80007980:	ef 48 ff f8 	st.w	r7[-8],r8
80007984:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007988:	59 d8       	cp.w	r8,29
8000798a:	fe 98 ff cd 	brls	80007924 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
8000798e:	2f ed       	sub	sp,-8
80007990:	e3 cd 80 80 	ldm	sp++,r7,pc
80007994:	80 00       	ld.sh	r0,r0[0x0]
80007996:	78 fc       	ld.w	r12,r12[0x3c]
80007998:	80 00       	ld.sh	r0,r0[0x0]
8000799a:	da fc       	*unknown*
8000799c:	80 00       	ld.sh	r0,r0[0x0]
8000799e:	78 82       	ld.w	r2,r12[0x20]
800079a0:	80 00       	ld.sh	r0,r0[0x0]
800079a2:	d5 04       	*unknown*
800079a4:	80 00       	ld.sh	r0,r0[0x0]
800079a6:	d4 00       	acall	0x100

800079a8 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
800079a8:	eb cd 40 80 	pushm	r7,lr
800079ac:	1a 97       	mov	r7,sp
800079ae:	20 4d       	sub	sp,16
800079b0:	ef 4c ff f8 	st.w	r7[-8],r12
800079b4:	ef 4b ff f4 	st.w	r7[-12],r11
800079b8:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800079bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800079c0:	a5 98       	lsr	r8,0x5
800079c2:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800079c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800079ca:	4a 78       	lddpc	r8,80007a64 <INTC_register_interrupt+0xbc>
800079cc:	a1 79       	lsl	r9,0x1
800079ce:	2f f9       	sub	r9,-1
800079d0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800079d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800079d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800079dc:	a3 68       	lsl	r8,0x2
800079de:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800079e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800079e6:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800079e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800079ec:	58 08       	cp.w	r8,0
800079ee:	c0 c1       	brne	80007a06 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800079f0:	fe 78 08 00 	mov	r8,-63488
800079f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800079f8:	49 cb       	lddpc	r11,80007a68 <INTC_register_interrupt+0xc0>
800079fa:	49 da       	lddpc	r10,80007a6c <INTC_register_interrupt+0xc4>
800079fc:	f6 0a 01 0a 	sub	r10,r11,r10
80007a00:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80007a04:	c2 d8       	rjmp	80007a5e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80007a06:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007a0a:	58 18       	cp.w	r8,1
80007a0c:	c0 d1       	brne	80007a26 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80007a0e:	fe 78 08 00 	mov	r8,-63488
80007a12:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007a16:	49 7b       	lddpc	r11,80007a70 <INTC_register_interrupt+0xc8>
80007a18:	49 5a       	lddpc	r10,80007a6c <INTC_register_interrupt+0xc4>
80007a1a:	f6 0a 01 0a 	sub	r10,r11,r10
80007a1e:	bf aa       	sbr	r10,0x1e
80007a20:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80007a24:	c1 d8       	rjmp	80007a5e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80007a26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007a2a:	58 28       	cp.w	r8,2
80007a2c:	c0 d1       	brne	80007a46 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80007a2e:	fe 78 08 00 	mov	r8,-63488
80007a32:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007a36:	49 0b       	lddpc	r11,80007a74 <INTC_register_interrupt+0xcc>
80007a38:	48 da       	lddpc	r10,80007a6c <INTC_register_interrupt+0xc4>
80007a3a:	f6 0a 01 0a 	sub	r10,r11,r10
80007a3e:	bf ba       	sbr	r10,0x1f
80007a40:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80007a44:	c0 d8       	rjmp	80007a5e <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80007a46:	fe 78 08 00 	mov	r8,-63488
80007a4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007a4e:	48 bb       	lddpc	r11,80007a78 <INTC_register_interrupt+0xd0>
80007a50:	48 7a       	lddpc	r10,80007a6c <INTC_register_interrupt+0xc4>
80007a52:	f6 0a 01 0a 	sub	r10,r11,r10
80007a56:	ea 1a c0 00 	orh	r10,0xc000
80007a5a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80007a5e:	2f cd       	sub	sp,-16
80007a60:	e3 cd 80 80 	ldm	sp++,r7,pc
80007a64:	80 00       	ld.sh	r0,r0[0x0]
80007a66:	da fc       	*unknown*
80007a68:	80 00       	ld.sh	r0,r0[0x0]
80007a6a:	d5 04       	*unknown*
80007a6c:	80 00       	ld.sh	r0,r0[0x0]
80007a6e:	d4 00       	acall	0x100
80007a70:	80 00       	ld.sh	r0,r0[0x0]
80007a72:	d5 12       	popm	r0-r3,r11,lr
80007a74:	80 00       	ld.sh	r0,r0[0x0]
80007a76:	d5 20       	acall	0x148
80007a78:	80 00       	ld.sh	r0,r0[0x0]
80007a7a:	d5 2e       	*unknown*

80007a7c <mci_reset>:


int shadow_sr=0;

void mci_reset(volatile avr32_mci_t *mci)
{
80007a7c:	eb cd 40 80 	pushm	r7,lr
80007a80:	1a 97       	mov	r7,sp
80007a82:	20 1d       	sub	sp,4
80007a84:	ef 4c ff fc 	st.w	r7[-4],r12
  mci->cr = (1<<AVR32_MCI_CR_SWRST);
80007a88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007a8c:	e0 69 00 80 	mov	r9,128
80007a90:	91 09       	st.w	r8[0x0],r9
}
80007a92:	2f fd       	sub	sp,-4
80007a94:	e3 cd 80 80 	ldm	sp++,r7,pc

80007a98 <mci_disable>:

void mci_disable(volatile avr32_mci_t *mci)
{
80007a98:	eb cd 40 80 	pushm	r7,lr
80007a9c:	1a 97       	mov	r7,sp
80007a9e:	20 1d       	sub	sp,4
80007aa0:	ef 4c ff fc 	st.w	r7[-4],r12
  // Disable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIDIS) | (1<<AVR32_MCI_CR_PWSDIS);
80007aa4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007aa8:	30 a9       	mov	r9,10
80007aaa:	91 09       	st.w	r8[0x0],r9
}
80007aac:	2f fd       	sub	sp,-4
80007aae:	e3 cd 80 80 	ldm	sp++,r7,pc

80007ab2 <mci_enable>:

void mci_enable(volatile avr32_mci_t *mci)
{
80007ab2:	eb cd 40 80 	pushm	r7,lr
80007ab6:	1a 97       	mov	r7,sp
80007ab8:	20 1d       	sub	sp,4
80007aba:	ef 4c ff fc 	st.w	r7[-4],r12
  // Enable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIEN) | (1<<AVR32_MCI_CR_PWSEN);
80007abe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007ac2:	30 59       	mov	r9,5
80007ac4:	91 09       	st.w	r8[0x0],r9
}
80007ac6:	2f fd       	sub	sp,-4
80007ac8:	e3 cd 80 80 	ldm	sp++,r7,pc

80007acc <mci_set_speed>:
}

void mci_set_speed(volatile avr32_mci_t *mci,
                   uint32_t pbb_hz,
                   uint32_t card_speed)
{
80007acc:	eb cd 40 80 	pushm	r7,lr
80007ad0:	1a 97       	mov	r7,sp
80007ad2:	20 7d       	sub	sp,28
80007ad4:	ef 4c ff ec 	st.w	r7[-20],r12
80007ad8:	ef 4b ff e8 	st.w	r7[-24],r11
80007adc:	ef 4a ff e4 	st.w	r7[-28],r10
    avr32_mci_cfg_t   CFG;
  };
  union u_cfg val;

  // Get the Mode Register
  mci_mode_register = mci->mr;
80007ae0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007ae4:	70 18       	ld.w	r8,r8[0x4]
80007ae6:	ef 48 ff f4 	st.w	r7[-12],r8

  if (card_speed > AVR32_MCI_HSDIS_MAX_FREQ)
80007aea:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007aee:	e0 69 78 40 	mov	r9,30784
80007af2:	ea 19 01 7d 	orh	r9,0x17d
80007af6:	12 38       	cp.w	r8,r9
80007af8:	e0 88 00 14 	brls	80007b20 <mci_set_speed+0x54>
  { // Use of the High Speed mode of the MCI macro.
    val.cfg = mci->cfg;
80007afc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007b00:	71 58       	ld.w	r8,r8[0x54]
80007b02:	ef 48 ff f0 	st.w	r7[-16],r8
    val.CFG.hsmode = 1;
80007b06:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007b0a:	30 19       	mov	r9,1
80007b0c:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80007b10:	ef 48 ff f0 	st.w	r7[-16],r8
    mci->cfg = val.cfg;
80007b14:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007b18:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007b1c:	f1 49 00 54 	st.w	r8[84],r9
  }

  // Multimedia Card Interface clock (MCCK or MCI_CK) is Master Clock (MCK)
  // divided by (2*(CLKDIV+1))
  if (card_speed > 0)
80007b20:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007b24:	58 08       	cp.w	r8,0
80007b26:	c2 90       	breq	80007b78 <mci_set_speed+0xac>
  {
    clkdiv = pbb_hz / (card_speed * 2);
80007b28:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007b2c:	f0 09 15 01 	lsl	r9,r8,0x1
80007b30:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007b34:	f0 09 0d 08 	divu	r8,r8,r9
80007b38:	ef 48 ff f8 	st.w	r7[-8],r8
    rest   = pbb_hz % (card_speed * 2);
80007b3c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007b40:	f0 09 15 01 	lsl	r9,r8,0x1
80007b44:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007b48:	f0 09 0d 08 	divu	r8,r8,r9
80007b4c:	12 98       	mov	r8,r9
80007b4e:	ef 48 ff fc 	st.w	r7[-4],r8
    if (rest)
80007b52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007b56:	58 08       	cp.w	r8,0
80007b58:	c0 60       	breq	80007b64 <mci_set_speed+0x98>
    { // Ensure that the card_speed can not be higher than expected.
      clkdiv += 1;
80007b5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b5e:	2f f8       	sub	r8,-1
80007b60:	ef 48 ff f8 	st.w	r7[-8],r8
    }

    if (clkdiv > 0)
80007b64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b68:	58 08       	cp.w	r8,0
80007b6a:	c0 b0       	breq	80007b80 <mci_set_speed+0xb4>
    {
      clkdiv -= 1;
80007b6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b70:	20 18       	sub	r8,1
80007b72:	ef 48 ff f8 	st.w	r7[-8],r8
80007b76:	c0 68       	rjmp	80007b82 <mci_set_speed+0xb6>
    }
  }
  else
  {
    clkdiv = 0;
80007b78:	30 08       	mov	r8,0
80007b7a:	ef 48 ff f8 	st.w	r7[-8],r8
80007b7e:	c0 28       	rjmp	80007b82 <mci_set_speed+0xb6>
      clkdiv += 1;
    }

    if (clkdiv > 0)
    {
      clkdiv -= 1;
80007b80:	d7 03       	nop
  {
    clkdiv = 0;
  }

  // Write new configuration
  mci_mode_register &= ~AVR32_MCI_MR_CLKDIV_MASK; // Clear previous value
80007b82:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007b86:	e0 18 ff 00 	andl	r8,0xff00
80007b8a:	ef 48 ff f4 	st.w	r7[-12],r8
  mci_mode_register |= clkdiv; // Set the new one
80007b8e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007b92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b96:	f3 e8 10 08 	or	r8,r9,r8
80007b9a:	ef 48 ff f4 	st.w	r7[-12],r8
  mci->mr = mci_mode_register;
80007b9e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007ba2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007ba6:	91 19       	st.w	r8[0x4],r9
}
80007ba8:	2f 9d       	sub	sp,-28
80007baa:	e3 cd 80 80 	ldm	sp++,r7,pc
80007bae:	d7 03       	nop

80007bb0 <mci_init>:

int mci_init(volatile avr32_mci_t *mci,
              uint8_t card_slot,
              uint32_t pbb_hz)
{
80007bb0:	eb cd 40 80 	pushm	r7,lr
80007bb4:	1a 97       	mov	r7,sp
80007bb6:	20 3d       	sub	sp,12
80007bb8:	ef 4c ff fc 	st.w	r7[-4],r12
80007bbc:	16 98       	mov	r8,r11
80007bbe:	ef 4a ff f4 	st.w	r7[-12],r10
80007bc2:	ef 68 ff f8 	st.b	r7[-8],r8
  if (card_slot>MCI_LAST_SLOTS)
80007bc6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007bca:	30 18       	mov	r8,1
80007bcc:	f0 09 18 00 	cp.b	r9,r8
80007bd0:	e0 88 00 04 	brls	80007bd8 <mci_init+0x28>
    return MCI_INVALID_INPUT;
80007bd4:	30 18       	mov	r8,1
80007bd6:	c3 98       	rjmp	80007c48 <mci_init+0x98>

  // Initialize all bits of the shadow status register.
  shadow_sr=0;
80007bd8:	49 e8       	lddpc	r8,80007c50 <mci_init+0xa0>
80007bda:	30 09       	mov	r9,0
80007bdc:	91 09       	st.w	r8[0x0],r9

  // Reset the MCI
  mci_reset(mci);
80007bde:	ee fc ff fc 	ld.w	r12,r7[-4]
80007be2:	f0 1f 00 1d 	mcall	80007c54 <mci_init+0xa4>

  // Disable the MCI
  mci_disable(mci);
80007be6:	ee fc ff fc 	ld.w	r12,r7[-4]
80007bea:	f0 1f 00 1c 	mcall	80007c58 <mci_init+0xa8>

  // Disable all the interrupts
  mci->idr = 0xffffffff;
80007bee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bf2:	3f f9       	mov	r9,-1
80007bf4:	f1 49 00 48 	st.w	r8[72],r9

  // Setup configuration register
  mci->cfg = 0;
80007bf8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bfc:	30 09       	mov	r9,0
80007bfe:	f1 49 00 54 	st.w	r8[84],r9

  // Clear Mode register
  mci->mr = 0;
80007c02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c06:	30 09       	mov	r9,0
80007c08:	91 19       	st.w	r8[0x4],r9

  // Set the Data Timeout Register to 1 Mega Cycles
  mci->dtor = (MCI_DEFAULT_DTOREG);
80007c0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c0e:	37 29       	mov	r9,114
80007c10:	91 29       	st.w	r8[0x8],r9

  // Set the Mode Register
  mci_set_speed(mci, pbb_hz, MCI_DEFAULT_SPEED_HZ);
80007c12:	e2 7a 0d 40 	mov	r10,200000
80007c16:	ee fb ff f4 	ld.w	r11,r7[-12]
80007c1a:	ee fc ff fc 	ld.w	r12,r7[-4]
80007c1e:	f0 1f 00 10 	mcall	80007c5c <mci_init+0xac>
  mci->mr |= ((MCI_DEFAULT_PWSDIV<<AVR32_MCI_MR_PWSDIV) | AVR32_MCI_MR_RDPROOF_MASK | AVR32_MCI_MR_WRPROOF_MASK);
80007c22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c26:	70 18       	ld.w	r8,r8[0x4]
80007c28:	10 99       	mov	r9,r8
80007c2a:	e8 19 1f 00 	orl	r9,0x1f00
80007c2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c32:	91 19       	st.w	r8[0x4],r9

  // Set the SD/MMC Card Register
  mci->sdcr = (MCI_BUS_SIZE_1_BIT>>AVR32_MCI_SDCR_SDCBUS_OFFSET)|(card_slot>>AVR32_MCI_SDCR_SDCSEL_OFFSET);
80007c34:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007c38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c3c:	91 39       	st.w	r8[0xc],r9

  // Enable the MCI and the Power Saving
  mci_enable(mci);
80007c3e:	ee fc ff fc 	ld.w	r12,r7[-4]
80007c42:	f0 1f 00 08 	mcall	80007c60 <mci_init+0xb0>

  return MCI_SUCCESS;
80007c46:	30 08       	mov	r8,0
}
80007c48:	10 9c       	mov	r12,r8
80007c4a:	2f dd       	sub	sp,-12
80007c4c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c50:	00 00       	add	r0,r0
80007c52:	06 58       	eor	r8,r3
80007c54:	80 00       	ld.sh	r0,r0[0x0]
80007c56:	7a 7c       	ld.w	r12,sp[0x1c]
80007c58:	80 00       	ld.sh	r0,r0[0x0]
80007c5a:	7a 98       	ld.w	r8,sp[0x24]
80007c5c:	80 00       	ld.sh	r0,r0[0x0]
80007c5e:	7a cc       	ld.w	r12,sp[0x30]
80007c60:	80 00       	ld.sh	r0,r0[0x0]
80007c62:	7a b2       	ld.w	r2,sp[0x2c]

80007c64 <mci_set_block_size>:

void mci_set_block_size(volatile avr32_mci_t *mci,
                        uint16_t length)
{
80007c64:	eb cd 40 80 	pushm	r7,lr
80007c68:	1a 97       	mov	r7,sp
80007c6a:	20 3d       	sub	sp,12
80007c6c:	ef 4c ff f8 	st.w	r7[-8],r12
80007c70:	16 98       	mov	r8,r11
80007c72:	ef 58 ff f4 	st.h	r7[-12],r8
  uint32_t mci_mode_register;

  mci_mode_register = mci->mr;
80007c76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007c7a:	70 18       	ld.w	r8,r8[0x4]
80007c7c:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register &= ~AVR32_MCI_MR_BLKLEN_MASK; // Clear previous BLKLEN
80007c80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c84:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80007c88:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register |= (length<<AVR32_MCI_MR_BLKLEN_OFFSET); // Set the new value
80007c8c:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80007c90:	b1 68       	lsl	r8,0x10
80007c92:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007c96:	f3 e8 10 08 	or	r8,r9,r8
80007c9a:	ef 48 ff fc 	st.w	r7[-4],r8

  mci->mr = mci_mode_register;
80007c9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ca2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007ca6:	91 19       	st.w	r8[0x4],r9
}
80007ca8:	2f dd       	sub	sp,-12
80007caa:	e3 cd 80 80 	ldm	sp++,r7,pc

80007cae <mci_set_block_count>:

void mci_set_block_count(volatile avr32_mci_t *mci,
                         uint16_t cnt)
{
80007cae:	eb cd 40 80 	pushm	r7,lr
80007cb2:	1a 97       	mov	r7,sp
80007cb4:	20 3d       	sub	sp,12
80007cb6:	ef 4c ff f8 	st.w	r7[-8],r12
80007cba:	16 98       	mov	r8,r11
80007cbc:	ef 58 ff f4 	st.h	r7[-12],r8
    uint32_t          blkr;
    avr32_mci_blkr_t  BLKR;
  };
  union u_blkr val;

  val.blkr = mci->blkr;
80007cc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007cc4:	70 68       	ld.w	r8,r8[0x18]
80007cc6:	ef 48 ff fc 	st.w	r7[-4],r8
  val.BLKR.bcnt = cnt;
80007cca:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80007cce:	ef 58 ff fe 	st.h	r7[-2],r8
  mci->blkr = val.blkr;
80007cd2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007cd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007cda:	91 69       	st.w	r8[0x18],r9
}
80007cdc:	2f dd       	sub	sp,-12
80007cde:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ce2:	d7 03       	nop

80007ce4 <mci_send_cmd>:

int mci_send_cmd(volatile avr32_mci_t *mci,
                 unsigned int cmd,
                 unsigned int arg)
{
80007ce4:	eb cd 40 80 	pushm	r7,lr
80007ce8:	1a 97       	mov	r7,sp
80007cea:	20 7d       	sub	sp,28
80007cec:	ef 4c ff ec 	st.w	r7[-20],r12
80007cf0:	ef 4b ff e8 	st.w	r7[-24],r11
80007cf4:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int	error;

  // Send the command
  mci->argr = arg;
80007cf8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007cfc:	ee f9 ff e4 	ld.w	r9,r7[-28]
80007d00:	91 49       	st.w	r8[0x10],r9
  mci->cmdr = cmd;
80007d02:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007d06:	ee f9 ff e8 	ld.w	r9,r7[-24]
80007d0a:	91 59       	st.w	r8[0x14],r9
80007d0c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007d10:	ef 48 ff f4 	st.w	r7[-12],r8
80007d14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007d18:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80007d1c:	4a 78       	lddpc	r8,80007db8 <mci_send_cmd+0xd4>
80007d1e:	70 08       	ld.w	r8,r8[0x0]
80007d20:	10 99       	mov	r9,r8
80007d22:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007d26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007d2a:	71 08       	ld.w	r8,r8[0x40]
80007d2c:	f3 e8 10 08 	or	r8,r9,r8
80007d30:	10 99       	mov	r9,r8
80007d32:	4a 28       	lddpc	r8,80007db8 <mci_send_cmd+0xd4>
80007d34:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007d36:	4a 18       	lddpc	r8,80007db8 <mci_send_cmd+0xd4>
80007d38:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_cmd_ready(volatile avr32_mci_t *mci)
{
  return ((mci_get_sr(mci)&AVR32_MCI_SR_CMDRDY_MASK) != 0);
80007d3a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // wait for CMDRDY Status flag to read the response
  while( !(mci_cmd_ready(mci)) );
80007d3e:	ce 70       	breq	80007d0c <mci_send_cmd+0x28>
80007d40:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007d44:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80007d48:	49 c8       	lddpc	r8,80007db8 <mci_send_cmd+0xd4>
80007d4a:	70 08       	ld.w	r8,r8[0x0]
80007d4c:	10 99       	mov	r9,r8
80007d4e:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007d52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007d56:	71 08       	ld.w	r8,r8[0x40]
80007d58:	f3 e8 10 08 	or	r8,r9,r8
80007d5c:	10 99       	mov	r9,r8
80007d5e:	49 78       	lddpc	r8,80007db8 <mci_send_cmd+0xd4>
80007d60:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007d62:	49 68       	lddpc	r8,80007db8 <mci_send_cmd+0xd4>
80007d64:	70 08       	ld.w	r8,r8[0x0]

  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
80007d66:	e6 18 c0 7f 	andh	r8,0xc07f,COH
80007d6a:	ef 48 ff f0 	st.w	r7[-16],r8
  if(error != 0 )
80007d6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007d72:	58 08       	cp.w	r8,0
80007d74:	c1 d0       	breq	80007dae <mci_send_cmd+0xca>
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
80007d76:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007d7a:	e0 48 00 69 	cp.w	r8,105
80007d7e:	c0 f0       	breq	80007d9c <mci_send_cmd+0xb8>
80007d80:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007d84:	e0 48 08 41 	cp.w	r8,2113
80007d88:	c0 a0       	breq	80007d9c <mci_send_cmd+0xb8>
    {
      if( error != AVR32_MCI_SR_RTOE_MASK )
80007d8a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007d8e:	fc 19 00 10 	movh	r9,0x10
80007d92:	12 38       	cp.w	r8,r9
80007d94:	c0 c0       	breq	80007dac <mci_send_cmd+0xc8>
        // filter RTOE error which happens when using the HS mode
        return error;
80007d96:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007d9a:	c0 b8       	rjmp	80007db0 <mci_send_cmd+0xcc>
    }
    else
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
80007d9c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007da0:	e4 48 00 00 	cp.w	r8,262144
80007da4:	c0 50       	breq	80007dae <mci_send_cmd+0xca>
        return error;
80007da6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007daa:	c0 38       	rjmp	80007db0 <mci_send_cmd+0xcc>
  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
  if(error != 0 )
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
80007dac:	d7 03       	nop
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
        return error;
    }
  }
  return MCI_SUCCESS;
80007dae:	30 08       	mov	r8,0

}
80007db0:	10 9c       	mov	r12,r8
80007db2:	2f 9d       	sub	sp,-28
80007db4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007db8:	00 00       	add	r0,r0
80007dba:	06 58       	eor	r8,r3

80007dbc <mci_set_bus_size>:

int mci_set_bus_size(volatile avr32_mci_t *mci,
                     uint8_t busWidth)
{
80007dbc:	eb cd 40 80 	pushm	r7,lr
80007dc0:	1a 97       	mov	r7,sp
80007dc2:	20 3d       	sub	sp,12
80007dc4:	ef 4c ff f8 	st.w	r7[-8],r12
80007dc8:	16 98       	mov	r8,r11
80007dca:	ef 68 ff f4 	st.b	r7[-12],r8
  uint32_t mci_sdcr_register;

  if (busWidth > MCI_BUS_SIZE_8_BIT)
80007dce:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80007dd2:	30 38       	mov	r8,3
80007dd4:	f0 09 18 00 	cp.b	r9,r8
80007dd8:	e0 88 00 04 	brls	80007de0 <mci_set_bus_size+0x24>
    return MCI_INVALID_INPUT;
80007ddc:	30 18       	mov	r8,1
80007dde:	c1 b8       	rjmp	80007e14 <mci_set_bus_size+0x58>

  mci_sdcr_register = mci->sdcr;
80007de0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007de4:	70 38       	ld.w	r8,r8[0xc]
80007de6:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register &= ~AVR32_MCI_SDCR_SDCBUS_MASK; // Clear previous buswidth
80007dea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007dee:	e0 18 ff 3f 	andl	r8,0xff3f
80007df2:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register |= (busWidth<<AVR32_MCI_SDCR_SDCBUS_OFFSET);
80007df6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007dfa:	a7 68       	lsl	r8,0x6
80007dfc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007e00:	f3 e8 10 08 	or	r8,r9,r8
80007e04:	ef 48 ff fc 	st.w	r7[-4],r8
  mci->sdcr = mci_sdcr_register;
80007e08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007e10:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
80007e12:	30 08       	mov	r8,0
}
80007e14:	10 9c       	mov	r12,r8
80007e16:	2f dd       	sub	sp,-12
80007e18:	e3 cd 80 80 	ldm	sp++,r7,pc

80007e1c <mci_read_response>:


unsigned int mci_read_response(volatile avr32_mci_t *mci)
{
80007e1c:	eb cd 40 80 	pushm	r7,lr
80007e20:	1a 97       	mov	r7,sp
80007e22:	20 1d       	sub	sp,4
80007e24:	ef 4c ff fc 	st.w	r7[-4],r12
  return mci->rspr0;
80007e28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007e2c:	70 88       	ld.w	r8,r8[0x20]
}
80007e2e:	10 9c       	mov	r12,r8
80007e30:	2f fd       	sub	sp,-4
80007e32:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e36:	d7 03       	nop

80007e38 <mci_wait_busy_signal>:

void mci_wait_busy_signal(volatile avr32_mci_t *mci)
{
80007e38:	eb cd 40 80 	pushm	r7,lr
80007e3c:	1a 97       	mov	r7,sp
80007e3e:	20 2d       	sub	sp,8
80007e40:	ef 4c ff f8 	st.w	r7[-8],r12
80007e44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e48:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80007e4c:	48 b8       	lddpc	r8,80007e78 <mci_wait_busy_signal+0x40>
80007e4e:	70 08       	ld.w	r8,r8[0x0]
80007e50:	10 99       	mov	r9,r8
80007e52:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007e56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007e5a:	71 08       	ld.w	r8,r8[0x40]
80007e5c:	f3 e8 10 08 	or	r8,r9,r8
80007e60:	10 99       	mov	r9,r8
80007e62:	48 68       	lddpc	r8,80007e78 <mci_wait_busy_signal+0x40>
80007e64:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007e66:	48 58       	lddpc	r8,80007e78 <mci_wait_busy_signal+0x40>
80007e68:	70 08       	ld.w	r8,r8[0x0]
  while(!(mci_get_sr(mci)&AVR32_MCI_SR_NOTBUSY_MASK));
80007e6a:	e2 18 00 20 	andl	r8,0x20,COH
80007e6e:	ce b0       	breq	80007e44 <mci_wait_busy_signal+0xc>
}
80007e70:	2f ed       	sub	sp,-8
80007e72:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e76:	00 00       	add	r0,r0
80007e78:	00 00       	add	r0,r0
80007e7a:	06 58       	eor	r8,r3

80007e7c <mci_select_card>:

int mci_select_card(volatile avr32_mci_t *mci,
                    uint8_t card_slot,
                    uint8_t bus_width)
{
80007e7c:	eb cd 40 80 	pushm	r7,lr
80007e80:	1a 97       	mov	r7,sp
80007e82:	20 3d       	sub	sp,12
80007e84:	ef 4c ff fc 	st.w	r7[-4],r12
80007e88:	16 99       	mov	r9,r11
80007e8a:	14 98       	mov	r8,r10
80007e8c:	ef 69 ff f8 	st.b	r7[-8],r9
80007e90:	ef 68 ff f4 	st.b	r7[-12],r8
  if (card_slot > MCI_LAST_SLOTS)
80007e94:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007e98:	30 18       	mov	r8,1
80007e9a:	f0 09 18 00 	cp.b	r9,r8
80007e9e:	e0 88 00 04 	brls	80007ea6 <mci_select_card+0x2a>
    return MCI_INVALID_INPUT;
80007ea2:	30 18       	mov	r8,1
80007ea4:	c0 e8       	rjmp	80007ec0 <mci_select_card+0x44>

  // Select the card slot and bus width
  mci->sdcr = (bus_width<<AVR32_MCI_SDCR_SDCBUS_OFFSET) | (card_slot<<AVR32_MCI_SDCR_SDCSEL_OFFSET);
80007ea6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007eaa:	f0 09 15 06 	lsl	r9,r8,0x6
80007eae:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007eb2:	f3 e8 10 08 	or	r8,r9,r8
80007eb6:	10 99       	mov	r9,r8
80007eb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007ebc:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
80007ebe:	30 08       	mov	r8,0
}
80007ec0:	10 9c       	mov	r12,r8
80007ec2:	2f dd       	sub	sp,-12
80007ec4:	e3 cd 80 80 	ldm	sp++,r7,pc

80007ec8 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80007ec8:	eb cd 40 80 	pushm	r7,lr
80007ecc:	1a 97       	mov	r7,sp
80007ece:	20 1d       	sub	sp,4
80007ed0:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80007ed4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007ed8:	e6 18 00 01 	andh	r8,0x1,COH
80007edc:	5f 08       	sreq	r8
80007ede:	5c 58       	castu.b	r8
}
80007ee0:	10 9c       	mov	r12,r8
80007ee2:	2f fd       	sub	sp,-4
80007ee4:	e3 cd 80 80 	ldm	sp++,r7,pc

80007ee8 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80007ee8:	eb cd 40 80 	pushm	r7,lr
80007eec:	1a 97       	mov	r7,sp
80007eee:	20 4d       	sub	sp,16
80007ef0:	ef 4c ff f8 	st.w	r7[-8],r12
80007ef4:	ef 4b ff f4 	st.w	r7[-12],r11
80007ef8:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80007efc:	e1 b8 00 00 	mfsr	r8,0x0
80007f00:	10 9c       	mov	r12,r8
80007f02:	f0 1f 00 73 	mcall	800080cc <tc_configure_interrupts+0x1e4>
80007f06:	18 98       	mov	r8,r12
80007f08:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80007f0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007f10:	58 28       	cp.w	r8,2
80007f12:	e0 88 00 04 	brls	80007f1a <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
80007f16:	3f f8       	mov	r8,-1
80007f18:	cd 68       	rjmp	800080c4 <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80007f1a:	ee fb ff f4 	ld.w	r11,r7[-12]
80007f1e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f22:	70 08       	ld.w	r8,r8[0x0]
80007f24:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80007f28:	5c 58       	castu.b	r8
80007f2a:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
80007f2e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f32:	70 08       	ld.w	r8,r8[0x0]
80007f34:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80007f38:	5c 58       	castu.b	r8
80007f3a:	a7 68       	lsl	r8,0x6
80007f3c:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
80007f3e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f42:	70 08       	ld.w	r8,r8[0x0]
80007f44:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80007f48:	5c 58       	castu.b	r8
80007f4a:	a5 78       	lsl	r8,0x5
80007f4c:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
80007f4e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f52:	70 08       	ld.w	r8,r8[0x0]
80007f54:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80007f58:	5c 58       	castu.b	r8
80007f5a:	a5 68       	lsl	r8,0x4
80007f5c:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
80007f5e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f62:	70 08       	ld.w	r8,r8[0x0]
80007f64:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80007f68:	5c 58       	castu.b	r8
80007f6a:	a3 78       	lsl	r8,0x3
80007f6c:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
80007f6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f72:	70 08       	ld.w	r8,r8[0x0]
80007f74:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80007f78:	5c 58       	castu.b	r8
80007f7a:	a3 68       	lsl	r8,0x2
80007f7c:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
80007f7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f82:	70 08       	ld.w	r8,r8[0x0]
80007f84:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80007f88:	5c 58       	castu.b	r8
80007f8a:	a1 78       	lsl	r8,0x1
80007f8c:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
80007f8e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f92:	70 08       	ld.w	r8,r8[0x0]
80007f94:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007f98:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80007f9a:	f3 e8 10 08 	or	r8,r9,r8
80007f9e:	10 99       	mov	r9,r8
80007fa0:	ee fa ff f8 	ld.w	r10,r7[-8]
80007fa4:	f6 08 15 06 	lsl	r8,r11,0x6
80007fa8:	f4 08 00 08 	add	r8,r10,r8
80007fac:	2d c8       	sub	r8,-36
80007fae:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80007fb0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007fb4:	30 08       	mov	r8,0
80007fb6:	f0 09 18 00 	cp.b	r9,r8
80007fba:	c0 20       	breq	80007fbe <tc_configure_interrupts+0xd6>
80007fbc:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80007fbe:	ee fb ff f4 	ld.w	r11,r7[-12]
80007fc2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007fc6:	70 08       	ld.w	r8,r8[0x0]
80007fc8:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80007fcc:	5c 58       	castu.b	r8
80007fce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007fd2:	c0 41       	brne	80007fda <tc_configure_interrupts+0xf2>
80007fd4:	e0 69 00 80 	mov	r9,128
80007fd8:	c0 28       	rjmp	80007fdc <tc_configure_interrupts+0xf4>
80007fda:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80007fdc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007fe0:	70 08       	ld.w	r8,r8[0x0]
80007fe2:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80007fe6:	5c 58       	castu.b	r8
80007fe8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007fec:	c0 31       	brne	80007ff2 <tc_configure_interrupts+0x10a>
80007fee:	34 08       	mov	r8,64
80007ff0:	c0 28       	rjmp	80007ff4 <tc_configure_interrupts+0x10c>
80007ff2:	30 08       	mov	r8,0
80007ff4:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80007ff6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007ffa:	70 08       	ld.w	r8,r8[0x0]
80007ffc:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80008000:	5c 58       	castu.b	r8
80008002:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008006:	c0 31       	brne	8000800c <tc_configure_interrupts+0x124>
80008008:	32 08       	mov	r8,32
8000800a:	c0 28       	rjmp	8000800e <tc_configure_interrupts+0x126>
8000800c:	30 08       	mov	r8,0
8000800e:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80008010:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008014:	70 08       	ld.w	r8,r8[0x0]
80008016:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
8000801a:	5c 58       	castu.b	r8
8000801c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008020:	c0 31       	brne	80008026 <tc_configure_interrupts+0x13e>
80008022:	31 08       	mov	r8,16
80008024:	c0 28       	rjmp	80008028 <tc_configure_interrupts+0x140>
80008026:	30 08       	mov	r8,0
80008028:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
8000802a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000802e:	70 08       	ld.w	r8,r8[0x0]
80008030:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80008034:	5c 58       	castu.b	r8
80008036:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000803a:	c0 31       	brne	80008040 <tc_configure_interrupts+0x158>
8000803c:	30 88       	mov	r8,8
8000803e:	c0 28       	rjmp	80008042 <tc_configure_interrupts+0x15a>
80008040:	30 08       	mov	r8,0
80008042:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80008044:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008048:	70 08       	ld.w	r8,r8[0x0]
8000804a:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
8000804e:	5c 58       	castu.b	r8
80008050:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008054:	c0 31       	brne	8000805a <tc_configure_interrupts+0x172>
80008056:	30 48       	mov	r8,4
80008058:	c0 28       	rjmp	8000805c <tc_configure_interrupts+0x174>
8000805a:	30 08       	mov	r8,0
8000805c:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
8000805e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008062:	70 08       	ld.w	r8,r8[0x0]
80008064:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80008068:	5c 58       	castu.b	r8
8000806a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000806e:	c0 31       	brne	80008074 <tc_configure_interrupts+0x18c>
80008070:	30 28       	mov	r8,2
80008072:	c0 28       	rjmp	80008076 <tc_configure_interrupts+0x18e>
80008074:	30 08       	mov	r8,0
80008076:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
80008078:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000807c:	70 08       	ld.w	r8,r8[0x0]
8000807e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008082:	5c 58       	castu.b	r8
80008084:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008088:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000808a:	f3 e8 10 08 	or	r8,r9,r8
8000808e:	10 99       	mov	r9,r8
80008090:	ee fa ff f8 	ld.w	r10,r7[-8]
80008094:	f6 08 15 06 	lsl	r8,r11,0x6
80008098:	f4 08 00 08 	add	r8,r10,r8
8000809c:	2d 88       	sub	r8,-40
8000809e:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800080a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800080a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800080a8:	a1 78       	lsl	r8,0x1
800080aa:	2f f8       	sub	r8,-1
800080ac:	a5 78       	lsl	r8,0x5
800080ae:	f2 08 00 08 	add	r8,r9,r8
800080b2:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800080b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800080b8:	30 08       	mov	r8,0
800080ba:	f0 09 18 00 	cp.b	r9,r8
800080be:	c0 20       	breq	800080c2 <tc_configure_interrupts+0x1da>
800080c0:	d5 03       	csrf	0x10

  return 0;
800080c2:	30 08       	mov	r8,0
}
800080c4:	10 9c       	mov	r12,r8
800080c6:	2f cd       	sub	sp,-16
800080c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800080cc:	80 00       	ld.sh	r0,r0[0x0]
800080ce:	7e c8       	ld.w	r8,pc[0x30]

800080d0 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
800080d0:	eb cd 40 80 	pushm	r7,lr
800080d4:	1a 97       	mov	r7,sp
800080d6:	20 2d       	sub	sp,8
800080d8:	ef 4c ff fc 	st.w	r7[-4],r12
800080dc:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800080e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080e4:	70 08       	ld.w	r8,r8[0x0]
800080e6:	58 28       	cp.w	r8,2
800080e8:	e0 88 00 04 	brls	800080f0 <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
800080ec:	3f f8       	mov	r8,-1
800080ee:	c9 78       	rjmp	8000821c <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800080f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080f4:	70 09       	ld.w	r9,r8[0x0]
800080f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080fa:	70 18       	ld.w	r8,r8[0x4]
800080fc:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
80008100:	5c 58       	castu.b	r8
80008102:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
80008106:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000810a:	70 18       	ld.w	r8,r8[0x4]
8000810c:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
80008110:	5c 58       	castu.b	r8
80008112:	bd 68       	lsl	r8,0x1c
80008114:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
80008116:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000811a:	70 18       	ld.w	r8,r8[0x4]
8000811c:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
80008120:	5c 58       	castu.b	r8
80008122:	bb 68       	lsl	r8,0x1a
80008124:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
80008126:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000812a:	70 18       	ld.w	r8,r8[0x4]
8000812c:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
80008130:	5c 58       	castu.b	r8
80008132:	b9 68       	lsl	r8,0x18
80008134:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
80008136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000813a:	70 18       	ld.w	r8,r8[0x4]
8000813c:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
80008140:	5c 58       	castu.b	r8
80008142:	b7 68       	lsl	r8,0x16
80008144:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
80008146:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000814a:	70 18       	ld.w	r8,r8[0x4]
8000814c:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
80008150:	5c 58       	castu.b	r8
80008152:	b5 68       	lsl	r8,0x14
80008154:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
80008156:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000815a:	70 18       	ld.w	r8,r8[0x4]
8000815c:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
80008160:	5c 58       	castu.b	r8
80008162:	b3 68       	lsl	r8,0x12
80008164:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
80008166:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000816a:	70 18       	ld.w	r8,r8[0x4]
8000816c:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80008170:	5c 58       	castu.b	r8
80008172:	b1 68       	lsl	r8,0x10
80008174:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
80008178:	10 9a       	mov	r10,r8
8000817a:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
8000817c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008180:	70 18       	ld.w	r8,r8[0x4]
80008182:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
80008186:	5c 58       	castu.b	r8
80008188:	ad 78       	lsl	r8,0xd
8000818a:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
8000818c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008190:	70 18       	ld.w	r8,r8[0x4]
80008192:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
80008196:	5c 58       	castu.b	r8
80008198:	ad 68       	lsl	r8,0xc
8000819a:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
8000819c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081a0:	70 18       	ld.w	r8,r8[0x4]
800081a2:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
800081a6:	5c 58       	castu.b	r8
800081a8:	ab 68       	lsl	r8,0xa
800081aa:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
800081ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081b0:	70 18       	ld.w	r8,r8[0x4]
800081b2:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
800081b6:	5c 58       	castu.b	r8
800081b8:	a9 68       	lsl	r8,0x8
800081ba:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
800081bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081c0:	70 18       	ld.w	r8,r8[0x4]
800081c2:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800081c6:	5c 58       	castu.b	r8
800081c8:	a7 78       	lsl	r8,0x7
800081ca:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
800081cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081d0:	70 18       	ld.w	r8,r8[0x4]
800081d2:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800081d6:	5c 58       	castu.b	r8
800081d8:	a7 68       	lsl	r8,0x6
800081da:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
800081dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081e0:	70 18       	ld.w	r8,r8[0x4]
800081e2:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
800081e6:	5c 58       	castu.b	r8
800081e8:	a5 68       	lsl	r8,0x4
800081ea:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
800081ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081f0:	70 18       	ld.w	r8,r8[0x4]
800081f2:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800081f6:	5c 58       	castu.b	r8
800081f8:	a3 78       	lsl	r8,0x3
800081fa:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
800081fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008200:	70 18       	ld.w	r8,r8[0x4]
80008202:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80008206:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80008208:	f5 e8 10 08 	or	r8,r10,r8
8000820c:	10 9a       	mov	r10,r8
8000820e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008212:	a5 69       	lsl	r9,0x4
80008214:	2f f9       	sub	r9,-1
80008216:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
8000821a:	30 08       	mov	r8,0
}
8000821c:	10 9c       	mov	r12,r8
8000821e:	2f ed       	sub	sp,-8
80008220:	e3 cd 80 80 	ldm	sp++,r7,pc

80008224 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80008224:	eb cd 40 80 	pushm	r7,lr
80008228:	1a 97       	mov	r7,sp
8000822a:	20 2d       	sub	sp,8
8000822c:	ef 4c ff fc 	st.w	r7[-4],r12
80008230:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80008234:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008238:	58 28       	cp.w	r8,2
8000823a:	e0 88 00 04 	brls	80008242 <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
8000823e:	3f f8       	mov	r8,-1
80008240:	c0 b8       	rjmp	80008256 <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80008242:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008246:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000824a:	a7 68       	lsl	r8,0x6
8000824c:	f2 08 00 08 	add	r8,r9,r8
80008250:	30 59       	mov	r9,5
80008252:	91 09       	st.w	r8[0x0],r9

  return 0;
80008254:	30 08       	mov	r8,0
}
80008256:	10 9c       	mov	r12,r8
80008258:	2f ed       	sub	sp,-8
8000825a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000825e <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
8000825e:	eb cd 40 80 	pushm	r7,lr
80008262:	1a 97       	mov	r7,sp
80008264:	20 2d       	sub	sp,8
80008266:	ef 4c ff fc 	st.w	r7[-4],r12
8000826a:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000826e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008272:	58 28       	cp.w	r8,2
80008274:	e0 88 00 04 	brls	8000827c <tc_read_sr+0x1e>
    return TC_INVALID_ARGUMENT;
80008278:	3f f8       	mov	r8,-1
8000827a:	c0 b8       	rjmp	80008290 <tc_read_sr+0x32>

  return tc->channel[channel].sr;
8000827c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008280:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008284:	a1 78       	lsl	r8,0x1
80008286:	2f f8       	sub	r8,-1
80008288:	a5 78       	lsl	r8,0x5
8000828a:	f2 08 00 08 	add	r8,r9,r8
8000828e:	70 08       	ld.w	r8,r8[0x0]
}
80008290:	10 9c       	mov	r12,r8
80008292:	2f ed       	sub	sp,-8
80008294:	e3 cd 80 80 	ldm	sp++,r7,pc

80008298 <tc_write_rc>:
  return value;
}


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
80008298:	eb cd 40 80 	pushm	r7,lr
8000829c:	1a 97       	mov	r7,sp
8000829e:	20 3d       	sub	sp,12
800082a0:	ef 4c ff fc 	st.w	r7[-4],r12
800082a4:	ef 4b ff f8 	st.w	r7[-8],r11
800082a8:	14 98       	mov	r8,r10
800082aa:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800082ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082b2:	58 28       	cp.w	r8,2
800082b4:	e0 88 00 04 	brls	800082bc <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
800082b8:	3f f8       	mov	r8,-1
800082ba:	c2 78       	rjmp	80008308 <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800082bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800082c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800082c4:	a5 69       	lsl	r9,0x4
800082c6:	2f f9       	sub	r9,-1
800082c8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800082cc:	e2 18 80 00 	andl	r8,0x8000,COH
800082d0:	c1 a0       	breq	80008304 <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
800082d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800082da:	ee fa ff fc 	ld.w	r10,r7[-4]
800082de:	a7 69       	lsl	r9,0x6
800082e0:	f4 09 00 09 	add	r9,r10,r9
800082e4:	2e 49       	sub	r9,-28
800082e6:	72 09       	ld.w	r9,r9[0x0]
800082e8:	12 9a       	mov	r10,r9
800082ea:	e0 1a 00 00 	andl	r10,0x0
800082ee:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800082f2:	f5 e9 10 09 	or	r9,r10,r9
800082f6:	ee fa ff fc 	ld.w	r10,r7[-4]
800082fa:	a7 68       	lsl	r8,0x6
800082fc:	f4 08 00 08 	add	r8,r10,r8
80008300:	2e 48       	sub	r8,-28
80008302:	91 09       	st.w	r8[0x0],r9

  return value;
80008304:	ef 18 ff f4 	ld.uh	r8,r7[-12]
}
80008308:	10 9c       	mov	r12,r8
8000830a:	2f dd       	sub	sp,-12
8000830c:	e3 cd 80 80 	ldm	sp++,r7,pc

80008310 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80008310:	eb cd 40 80 	pushm	r7,lr
80008314:	1a 97       	mov	r7,sp
80008316:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80008318:	e1 b8 00 00 	mfsr	r8,0x0
8000831c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80008320:	d3 03       	ssrf	0x10

	return flags;
80008322:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008326:	10 9c       	mov	r12,r8
80008328:	2f fd       	sub	sp,-4
8000832a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000832e <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8000832e:	eb cd 40 80 	pushm	r7,lr
80008332:	1a 97       	mov	r7,sp
80008334:	20 1d       	sub	sp,4
80008336:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000833a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000833e:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80008342:	2f fd       	sub	sp,-4
80008344:	e3 cd 80 80 	ldm	sp++,r7,pc

80008348 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
80008348:	eb cd 40 80 	pushm	r7,lr
8000834c:	1a 97       	mov	r7,sp
8000834e:	20 2d       	sub	sp,8
80008350:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
80008354:	f0 1f 00 0b 	mcall	80008380 <sleepmgr_lock_mode+0x38>
80008358:	18 98       	mov	r8,r12
8000835a:	ef 48 ff fc 	st.w	r7[-4],r8

	++sleepmgr_locks[mode];
8000835e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008362:	48 99       	lddpc	r9,80008384 <sleepmgr_lock_mode+0x3c>
80008364:	f2 08 07 09 	ld.ub	r9,r9[r8]
80008368:	2f f9       	sub	r9,-1
8000836a:	5c 59       	castu.b	r9
8000836c:	48 6a       	lddpc	r10,80008384 <sleepmgr_lock_mode+0x3c>
8000836e:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
80008372:	ee fc ff fc 	ld.w	r12,r7[-4]
80008376:	f0 1f 00 05 	mcall	80008388 <sleepmgr_lock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000837a:	2f ed       	sub	sp,-8
8000837c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008380:	80 00       	ld.sh	r0,r0[0x0]
80008382:	83 10       	st.w	r1[0x4],r0
80008384:	00 00       	add	r0,r0
80008386:	0b e0       	ld.ub	r0,r5[0x6]
80008388:	80 00       	ld.sh	r0,r0[0x0]
8000838a:	83 2e       	st.w	r1[0x8],lr

8000838c <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
8000838c:	eb cd 40 80 	pushm	r7,lr
80008390:	1a 97       	mov	r7,sp
80008392:	20 2d       	sub	sp,8
80008394:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();
80008398:	f0 1f 00 0b 	mcall	800083c4 <sleepmgr_unlock_mode+0x38>
8000839c:	18 98       	mov	r8,r12
8000839e:	ef 48 ff fc 	st.w	r7[-4],r8

	--sleepmgr_locks[mode];
800083a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800083a6:	48 99       	lddpc	r9,800083c8 <sleepmgr_unlock_mode+0x3c>
800083a8:	f2 08 07 09 	ld.ub	r9,r9[r8]
800083ac:	20 19       	sub	r9,1
800083ae:	5c 59       	castu.b	r9
800083b0:	48 6a       	lddpc	r10,800083c8 <sleepmgr_unlock_mode+0x3c>
800083b2:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
800083b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800083ba:	f0 1f 00 05 	mcall	800083cc <sleepmgr_unlock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
800083be:	2f ed       	sub	sp,-8
800083c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800083c4:	80 00       	ld.sh	r0,r0[0x0]
800083c6:	83 10       	st.w	r1[0x4],r0
800083c8:	00 00       	add	r0,r0
800083ca:	0b e0       	ld.ub	r0,r5[0x6]
800083cc:	80 00       	ld.sh	r0,r0[0x0]
800083ce:	83 2e       	st.w	r1[0x8],lr

800083d0 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
800083d0:	eb cd 40 80 	pushm	r7,lr
800083d4:	1a 97       	mov	r7,sp
800083d6:	20 1d       	sub	sp,4
800083d8:	18 98       	mov	r8,r12
800083da:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!b_idle && udd_b_idle) {
800083de:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800083e2:	ec 18 00 01 	eorl	r8,0x1
800083e6:	5c 58       	castu.b	r8
800083e8:	c0 80       	breq	800083f8 <udd_sleep_mode+0x28>
800083ea:	48 f8       	lddpc	r8,80008424 <udd_sleep_mode+0x54>
800083ec:	11 88       	ld.ub	r8,r8[0x0]
800083ee:	58 08       	cp.w	r8,0
800083f0:	c0 40       	breq	800083f8 <udd_sleep_mode+0x28>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
800083f2:	30 1c       	mov	r12,1
800083f4:	f0 1f 00 0d 	mcall	80008428 <udd_sleep_mode+0x58>
	}
	if (b_idle && !udd_b_idle) {
800083f8:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800083fc:	30 08       	mov	r8,0
800083fe:	f0 09 18 00 	cp.b	r9,r8
80008402:	c0 a0       	breq	80008416 <udd_sleep_mode+0x46>
80008404:	48 88       	lddpc	r8,80008424 <udd_sleep_mode+0x54>
80008406:	11 88       	ld.ub	r8,r8[0x0]
80008408:	ec 18 00 01 	eorl	r8,0x1
8000840c:	5c 58       	castu.b	r8
8000840e:	c0 40       	breq	80008416 <udd_sleep_mode+0x46>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
80008410:	30 1c       	mov	r12,1
80008412:	f0 1f 00 07 	mcall	8000842c <udd_sleep_mode+0x5c>
	}
	udd_b_idle = b_idle;
80008416:	48 49       	lddpc	r9,80008424 <udd_sleep_mode+0x54>
80008418:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000841c:	b2 88       	st.b	r9[0x0],r8
}
8000841e:	2f fd       	sub	sp,-4
80008420:	e3 cd 80 80 	ldm	sp++,r7,pc
80008424:	00 00       	add	r0,r0
80008426:	06 5c       	eor	r12,r3
80008428:	80 00       	ld.sh	r0,r0[0x0]
8000842a:	83 8c       	st.w	r1[0x20],r12
8000842c:	80 00       	ld.sh	r0,r0[0x0]
8000842e:	83 48       	st.w	r1[0x10],r8

80008430 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
80008430:	eb cd 40 80 	pushm	r7,lr
80008434:	1a 97       	mov	r7,sp
	if (Is_udd_sof()) {
80008436:	fe 68 00 04 	mov	r8,-131068
8000843a:	70 08       	ld.w	r8,r8[0x0]
8000843c:	e2 18 00 04 	andl	r8,0x4,COH
80008440:	c1 10       	breq	80008462 <udd_interrupt+0x32>
		udd_ack_sof();
80008442:	fe 68 00 08 	mov	r8,-131064
80008446:	30 49       	mov	r9,4
80008448:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
8000844a:	fe 68 08 04 	mov	r8,-129020
8000844e:	70 08       	ld.w	r8,r8[0x0]
80008450:	e2 18 30 00 	andl	r8,0x3000,COH
80008454:	ad 88       	lsr	r8,0xc
80008456:	c0 31       	brne	8000845c <udd_interrupt+0x2c>
			udc_sof_notify();
80008458:	f0 1f 00 54 	mcall	800085a8 <udd_interrupt+0x178>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
8000845c:	f0 1f 00 54 	mcall	800085ac <udd_interrupt+0x17c>
#endif
		goto udd_interrupt_end;
80008460:	c9 d8       	rjmp	8000859a <udd_interrupt+0x16a>
	}
	if (Is_udd_msof()) {
80008462:	fe 68 00 04 	mov	r8,-131068
80008466:	70 08       	ld.w	r8,r8[0x0]
80008468:	e2 18 00 02 	andl	r8,0x2,COH
8000846c:	c0 80       	breq	8000847c <udd_interrupt+0x4c>
		udd_ack_msof();
8000846e:	fe 68 00 08 	mov	r8,-131064
80008472:	30 29       	mov	r9,2
80008474:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80008476:	f0 1f 00 4d 	mcall	800085a8 <udd_interrupt+0x178>
		goto udd_interrupt_end;
8000847a:	c9 08       	rjmp	8000859a <udd_interrupt+0x16a>
	}

	if (udd_ctrl_interrupt())
8000847c:	f0 1f 00 4d 	mcall	800085b0 <udd_interrupt+0x180>
80008480:	18 98       	mov	r8,r12
80008482:	58 08       	cp.w	r8,0
80008484:	e0 81 00 88 	brne	80008594 <udd_interrupt+0x164>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
80008488:	f0 1f 00 4b 	mcall	800085b4 <udd_interrupt+0x184>
8000848c:	18 98       	mov	r8,r12
8000848e:	58 08       	cp.w	r8,0
80008490:	e0 81 00 84 	brne	80008598 <udd_interrupt+0x168>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80008494:	fe 68 00 04 	mov	r8,-131068
80008498:	70 08       	ld.w	r8,r8[0x0]
8000849a:	e2 18 00 08 	andl	r8,0x8,COH
8000849e:	c0 e0       	breq	800084ba <udd_interrupt+0x8a>
		udd_ack_reset();
800084a0:	fe 68 00 08 	mov	r8,-131064
800084a4:	30 89       	mov	r9,8
800084a6:	91 09       	st.w	r8[0x0],r9
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
800084a8:	f0 1f 00 44 	mcall	800085b8 <udd_interrupt+0x188>
#endif
		// Reset USB Device Stack Core
		udc_reset();
800084ac:	f0 1f 00 44 	mcall	800085bc <udd_interrupt+0x18c>
		// Reset endpoint control
		udd_reset_ep_ctrl();
800084b0:	f0 1f 00 44 	mcall	800085c0 <udd_interrupt+0x190>
		// Reset endpoint control management
		udd_ctrl_init();
800084b4:	f0 1f 00 44 	mcall	800085c4 <udd_interrupt+0x194>
		goto udd_interrupt_end;
800084b8:	c7 18       	rjmp	8000859a <udd_interrupt+0x16a>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
800084ba:	fe 68 00 10 	mov	r8,-131056
800084be:	70 08       	ld.w	r8,r8[0x0]
800084c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800084c4:	5c 58       	castu.b	r8
800084c6:	c2 40       	breq	8000850e <udd_interrupt+0xde>
800084c8:	fe 68 00 04 	mov	r8,-131068
800084cc:	70 08       	ld.w	r8,r8[0x0]
800084ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800084d2:	5c 58       	castu.b	r8
800084d4:	c1 d0       	breq	8000850e <udd_interrupt+0xde>
		otg_unfreeze_clock();
800084d6:	fe 68 08 00 	mov	r8,-129024
800084da:	fe 69 08 00 	mov	r9,-129024
800084de:	72 09       	ld.w	r9,r9[0x0]
800084e0:	af c9       	cbr	r9,0xe
800084e2:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
800084e4:	fe 68 00 14 	mov	r8,-131052
800084e8:	30 19       	mov	r9,1
800084ea:	91 09       	st.w	r8[0x0],r9
		udd_enable_wake_up_interrupt();
800084ec:	fe 68 00 18 	mov	r8,-131048
800084f0:	31 09       	mov	r9,16
800084f2:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
800084f4:	fe 68 08 00 	mov	r8,-129024
800084f8:	fe 69 08 00 	mov	r9,-129024
800084fc:	72 09       	ld.w	r9,r9[0x0]
800084fe:	af a9       	sbr	r9,0xe
80008500:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80008502:	30 0c       	mov	r12,0
80008504:	f0 1f 00 31 	mcall	800085c8 <udd_interrupt+0x198>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
80008508:	f0 1f 00 31 	mcall	800085cc <udd_interrupt+0x19c>
#endif
		goto udd_interrupt_end;
8000850c:	c4 78       	rjmp	8000859a <udd_interrupt+0x16a>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
8000850e:	fe 68 00 10 	mov	r8,-131056
80008512:	70 08       	ld.w	r8,r8[0x0]
80008514:	e2 18 00 10 	andl	r8,0x10,COH
80008518:	c1 c0       	breq	80008550 <udd_interrupt+0x120>
8000851a:	fe 68 00 04 	mov	r8,-131068
8000851e:	70 08       	ld.w	r8,r8[0x0]
80008520:	e2 18 00 10 	andl	r8,0x10,COH
80008524:	c1 60       	breq	80008550 <udd_interrupt+0x120>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80008526:	fe 68 08 00 	mov	r8,-129024
8000852a:	fe 69 08 00 	mov	r9,-129024
8000852e:	72 09       	ld.w	r9,r9[0x0]
80008530:	af c9       	cbr	r9,0xe
80008532:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80008534:	fe 68 00 14 	mov	r8,-131052
80008538:	31 09       	mov	r9,16
8000853a:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
8000853c:	fe 68 00 18 	mov	r8,-131048
80008540:	30 19       	mov	r9,1
80008542:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(true); // Enter in IDLE mode
80008544:	30 1c       	mov	r12,1
80008546:	f0 1f 00 21 	mcall	800085c8 <udd_interrupt+0x198>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
8000854a:	f0 1f 00 22 	mcall	800085d0 <udd_interrupt+0x1a0>
#endif
		goto udd_interrupt_end;
8000854e:	c2 68       	rjmp	8000859a <udd_interrupt+0x16a>
	}

	if (Is_otg_vbus_transition()) {
80008550:	fe 68 08 04 	mov	r8,-129020
80008554:	70 08       	ld.w	r8,r8[0x0]
80008556:	e2 18 00 02 	andl	r8,0x2,COH
8000855a:	c2 00       	breq	8000859a <udd_interrupt+0x16a>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
8000855c:	fe 68 08 00 	mov	r8,-129024
80008560:	fe 69 08 00 	mov	r9,-129024
80008564:	72 09       	ld.w	r9,r9[0x0]
80008566:	af c9       	cbr	r9,0xe
80008568:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
8000856a:	fe 68 08 08 	mov	r8,-129016
8000856e:	30 29       	mov	r9,2
80008570:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock();
80008572:	fe 68 08 00 	mov	r8,-129024
80008576:	fe 69 08 00 	mov	r9,-129024
8000857a:	72 09       	ld.w	r9,r9[0x0]
8000857c:	af a9       	sbr	r9,0xe
8000857e:	91 09       	st.w	r8[0x0],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
80008580:	fe 68 08 04 	mov	r8,-129020
80008584:	70 08       	ld.w	r8,r8[0x0]
80008586:	e2 18 08 00 	andl	r8,0x800,COH
8000858a:	5f 18       	srne	r8
8000858c:	10 9c       	mov	r12,r8
8000858e:	f0 1f 00 12 	mcall	800085d4 <udd_interrupt+0x1a4>
80008592:	c0 48       	rjmp	8000859a <udd_interrupt+0x16a>
		udc_sof_notify();
		goto udd_interrupt_end;
	}

	if (udd_ctrl_interrupt())
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
80008594:	d7 03       	nop
80008596:	c0 28       	rjmp	8000859a <udd_interrupt+0x16a>

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
80008598:	d7 03       	nop
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
8000859a:	fe 68 00 00 	mov	r8,-131072
8000859e:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
800085a2:	e3 cd 40 80 	ldm	sp++,r7,lr
800085a6:	d6 03       	rete
800085a8:	80 00       	ld.sh	r0,r0[0x0]
800085aa:	be 4c       	st.h	pc[0x8],r12
800085ac:	80 00       	ld.sh	r0,r0[0x0]
800085ae:	cc 6c       	rcall	8000873a <udd_attach+0x32>
800085b0:	80 00       	ld.sh	r0,r0[0x0]
800085b2:	9b 24       	st.w	sp[0x8],r4
800085b4:	80 00       	ld.sh	r0,r0[0x0]
800085b6:	9f d8       	st.w	pc[0x34],r8
800085b8:	80 00       	ld.sh	r0,r0[0x0]
800085ba:	9c 58       	ld.sh	r8,lr[0xa]
800085bc:	80 00       	ld.sh	r0,r0[0x0]
800085be:	bd e8       	*unknown*
800085c0:	80 00       	ld.sh	r0,r0[0x0]
800085c2:	93 a4       	st.w	r9[0x28],r4
800085c4:	80 00       	ld.sh	r0,r0[0x0]
800085c6:	94 88       	ld.uh	r8,r10[0x0]
800085c8:	80 00       	ld.sh	r0,r0[0x0]
800085ca:	83 d0       	st.w	r1[0x34],r0
800085cc:	80 00       	ld.sh	r0,r0[0x0]
800085ce:	cc 44       	brge	80008556 <udd_interrupt+0x126>
800085d0:	80 00       	ld.sh	r0,r0[0x0]
800085d2:	cc 58       	rjmp	8000875c <udd_attach+0x54>
800085d4:	80 00       	ld.sh	r0,r0[0x0]
800085d6:	cc 10       	breq	80008558 <udd_interrupt+0x128>

800085d8 <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
800085d8:	eb cd 40 80 	pushm	r7,lr
800085dc:	1a 97       	mov	r7,sp
	return true;
800085de:	30 18       	mov	r8,1
}
800085e0:	10 9c       	mov	r12,r8
800085e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800085e6:	d7 03       	nop

800085e8 <udd_enable>:


void udd_enable(void)
{
800085e8:	eb cd 40 80 	pushm	r7,lr
800085ec:	1a 97       	mov	r7,sp
800085ee:	20 2d       	sub	sp,8
	irqflags_t flags;

	flags = cpu_irq_save();
800085f0:	f0 1f 00 3e 	mcall	800086e8 <udd_enable+0x100>
800085f4:	18 98       	mov	r8,r12
800085f6:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
800085fa:	f0 1f 00 3d 	mcall	800086ec <udd_enable+0x104>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
800085fe:	30 0a       	mov	r10,0
80008600:	e0 6b 02 20 	mov	r11,544
80008604:	4b bc       	lddpc	r12,800086f0 <udd_enable+0x108>
80008606:	f0 1f 00 3c 	mcall	800086f4 <udd_enable+0x10c>
8000860a:	30 18       	mov	r8,1
8000860c:	ef 48 ff fc 	st.w	r7[-4],r8
#if defined (__GNUC__)
__attribute__((__always_inline__))
#endif
static inline void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80008610:	fe 78 0c 00 	mov	r8,-62464
80008614:	fe 79 0c 00 	mov	r9,-62464
80008618:	f2 fa 01 44 	ld.w	r10,r9[324]
8000861c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008620:	f5 e9 10 09 	or	r9,r10,r9
80008624:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
80008628:	fe 68 08 00 	mov	r8,-129024
8000862c:	fe 69 08 00 	mov	r9,-129024
80008630:	72 09       	ld.w	r9,r9[0x0]
80008632:	b9 c9       	cbr	r9,0x18
80008634:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
80008636:	fe 68 08 00 	mov	r8,-129024
8000863a:	fe 69 08 00 	mov	r9,-129024
8000863e:	72 09       	ld.w	r9,r9[0x0]
80008640:	b9 b9       	sbr	r9,0x19
80008642:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80008644:	fe 68 08 00 	mov	r8,-129024
80008648:	fe 69 08 00 	mov	r9,-129024
8000864c:	72 09       	ld.w	r9,r9[0x0]
8000864e:	ad a9       	sbr	r9,0xc
80008650:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80008652:	fe 68 08 00 	mov	r8,-129024
80008656:	fe 69 08 00 	mov	r9,-129024
8000865a:	72 09       	ld.w	r9,r9[0x0]
8000865c:	af b9       	sbr	r9,0xf
8000865e:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80008660:	fe 68 08 00 	mov	r8,-129024
80008664:	fe 69 08 00 	mov	r9,-129024
80008668:	72 09       	ld.w	r9,r9[0x0]
8000866a:	af c9       	cbr	r9,0xe
8000866c:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
8000866e:	fe 68 08 00 	mov	r8,-129024
80008672:	70 08       	ld.w	r8,r8[0x0]

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
80008674:	f0 1f 00 21 	mcall	800086f8 <udd_enable+0x110>

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80008678:	fe 68 00 00 	mov	r8,-131072
8000867c:	fe 69 00 00 	mov	r9,-131072
80008680:	72 09       	ld.w	r9,r9[0x0]
80008682:	ad c9       	cbr	r9,0xc
80008684:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
80008686:	fe 68 00 00 	mov	r8,-131072
8000868a:	fe 69 00 00 	mov	r9,-131072
8000868e:	72 09       	ld.w	r9,r9[0x0]
80008690:	e0 19 f3 ff 	andl	r9,0xf3ff
80008694:	91 09       	st.w	r8[0x0],r9
#  else
	udd_high_speed_disable();
#  endif
#endif
	otg_ack_vbus_transition();
80008696:	fe 68 08 08 	mov	r8,-129016
8000869a:	30 29       	mov	r9,2
8000869c:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
8000869e:	fe 68 08 04 	mov	r8,-129020
800086a2:	70 08       	ld.w	r8,r8[0x0]
800086a4:	e2 18 08 00 	andl	r8,0x800,COH
800086a8:	c0 50       	breq	800086b2 <udd_enable+0xca>
		otg_raise_vbus_transition();
800086aa:	fe 68 08 0c 	mov	r8,-129012
800086ae:	30 29       	mov	r9,2
800086b0:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
800086b2:	fe 68 08 00 	mov	r8,-129024
800086b6:	fe 69 08 00 	mov	r9,-129024
800086ba:	72 09       	ld.w	r9,r9[0x0]
800086bc:	a1 b9       	sbr	r9,0x1
800086be:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
800086c0:	fe 68 08 00 	mov	r8,-129024
800086c4:	fe 69 08 00 	mov	r9,-129024
800086c8:	72 09       	ld.w	r9,r9[0x0]
800086ca:	af a9       	sbr	r9,0xe
800086cc:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
800086ce:	48 c9       	lddpc	r9,800086fc <udd_enable+0x114>
800086d0:	30 08       	mov	r8,0
800086d2:	b2 88       	st.b	r9[0x0],r8
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
800086d4:	30 3c       	mov	r12,3
800086d6:	f0 1f 00 0b 	mcall	80008700 <udd_enable+0x118>
#endif

	cpu_irq_restore(flags);
800086da:	ee fc ff f8 	ld.w	r12,r7[-8]
800086de:	f0 1f 00 0a 	mcall	80008704 <udd_enable+0x11c>
}
800086e2:	2f ed       	sub	sp,-8
800086e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800086e8:	80 00       	ld.sh	r0,r0[0x0]
800086ea:	83 10       	st.w	r1[0x4],r0
800086ec:	80 00       	ld.sh	r0,r0[0x0]
800086ee:	a9 a8       	sbr	r8,0x8
800086f0:	80 00       	ld.sh	r0,r0[0x0]
800086f2:	84 30       	ld.sh	r0,r2[0x6]
800086f4:	80 00       	ld.sh	r0,r0[0x0]
800086f6:	79 a8       	ld.w	r8,r12[0x68]
800086f8:	80 00       	ld.sh	r0,r0[0x0]
800086fa:	9b ec       	st.w	sp[0x38],r12
800086fc:	00 00       	add	r0,r0
800086fe:	06 5c       	eor	r12,r3
80008700:	80 00       	ld.sh	r0,r0[0x0]
80008702:	83 48       	st.w	r1[0x10],r8
80008704:	80 00       	ld.sh	r0,r0[0x0]
80008706:	83 2e       	st.w	r1[0x8],lr

80008708 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80008708:	eb cd 40 80 	pushm	r7,lr
8000870c:	1a 97       	mov	r7,sp
8000870e:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
80008710:	f0 1f 00 26 	mcall	800087a8 <udd_attach+0xa0>
80008714:	18 98       	mov	r8,r12
80008716:	ef 48 ff fc 	st.w	r7[-4],r8

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
8000871a:	30 1c       	mov	r12,1
8000871c:	f0 1f 00 24 	mcall	800087ac <udd_attach+0xa4>
	otg_unfreeze_clock();
80008720:	fe 68 08 00 	mov	r8,-129024
80008724:	fe 69 08 00 	mov	r9,-129024
80008728:	72 09       	ld.w	r9,r9[0x0]
8000872a:	af c9       	cbr	r9,0xe
8000872c:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );

	// Authorize attach if Vbus is present
	udd_attach_device();
8000872e:	fe 68 00 00 	mov	r8,-131072
80008732:	fe 69 00 00 	mov	r9,-131072
80008736:	72 09       	ld.w	r9,r9[0x0]
80008738:	a9 c9       	cbr	r9,0x8
8000873a:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
8000873c:	fe 68 00 18 	mov	r8,-131048
80008740:	30 89       	mov	r9,8
80008742:	91 09       	st.w	r8[0x0],r9
	udd_enable_suspend_interrupt();
80008744:	fe 68 00 18 	mov	r8,-131048
80008748:	30 19       	mov	r9,1
8000874a:	91 09       	st.w	r8[0x0],r9
	udd_enable_wake_up_interrupt();
8000874c:	fe 68 00 18 	mov	r8,-131048
80008750:	31 09       	mov	r9,16
80008752:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80008754:	fe 68 00 18 	mov	r8,-131048
80008758:	30 49       	mov	r9,4
8000875a:	91 09       	st.w	r8[0x0],r9
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
8000875c:	fe 68 00 18 	mov	r8,-131048
80008760:	30 29       	mov	r9,2
80008762:	91 09       	st.w	r8[0x0],r9
#endif
	// Reset following interrupts flag
	udd_ack_reset();
80008764:	fe 68 00 08 	mov	r8,-131064
80008768:	30 89       	mov	r9,8
8000876a:	91 09       	st.w	r8[0x0],r9
	udd_ack_sof();
8000876c:	fe 68 00 08 	mov	r8,-131064
80008770:	30 49       	mov	r9,4
80008772:	91 09       	st.w	r8[0x0],r9
	udd_ack_msof();
80008774:	fe 68 00 08 	mov	r8,-131064
80008778:	30 29       	mov	r9,2
8000877a:	91 09       	st.w	r8[0x0],r9

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
8000877c:	fe 68 00 08 	mov	r8,-131064
80008780:	30 19       	mov	r9,1
80008782:	91 09       	st.w	r8[0x0],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80008784:	fe 68 00 08 	mov	r8,-131064
80008788:	31 09       	mov	r9,16
8000878a:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
8000878c:	fe 68 08 00 	mov	r8,-129024
80008790:	fe 69 08 00 	mov	r9,-129024
80008794:	72 09       	ld.w	r9,r9[0x0]
80008796:	af a9       	sbr	r9,0xe
80008798:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000879a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000879e:	f0 1f 00 05 	mcall	800087b0 <udd_attach+0xa8>
}
800087a2:	2f fd       	sub	sp,-4
800087a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800087a8:	80 00       	ld.sh	r0,r0[0x0]
800087aa:	83 10       	st.w	r1[0x4],r0
800087ac:	80 00       	ld.sh	r0,r0[0x0]
800087ae:	83 d0       	st.w	r1[0x34],r0
800087b0:	80 00       	ld.sh	r0,r0[0x0]
800087b2:	83 2e       	st.w	r1[0x8],lr

800087b4 <udd_detach>:


void udd_detach(void)
{
800087b4:	eb cd 40 80 	pushm	r7,lr
800087b8:	1a 97       	mov	r7,sp
	otg_unfreeze_clock();
800087ba:	fe 68 08 00 	mov	r8,-129024
800087be:	fe 69 08 00 	mov	r9,-129024
800087c2:	72 09       	ld.w	r9,r9[0x0]
800087c4:	af c9       	cbr	r9,0xe
800087c6:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
800087c8:	fe 68 00 00 	mov	r8,-131072
800087cc:	fe 69 00 00 	mov	r9,-131072
800087d0:	72 09       	ld.w	r9,r9[0x0]
800087d2:	a9 a9       	sbr	r9,0x8
800087d4:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
800087d6:	fe 68 08 00 	mov	r8,-129024
800087da:	fe 69 08 00 	mov	r9,-129024
800087de:	72 09       	ld.w	r9,r9[0x0]
800087e0:	af a9       	sbr	r9,0xe
800087e2:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
800087e4:	30 0c       	mov	r12,0
800087e6:	f0 1f 00 03 	mcall	800087f0 <udd_detach+0x3c>
}
800087ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800087ee:	00 00       	add	r0,r0
800087f0:	80 00       	ld.sh	r0,r0[0x0]
800087f2:	83 d0       	st.w	r1[0x34],r0

800087f4 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
800087f4:	eb cd 40 80 	pushm	r7,lr
800087f8:	1a 97       	mov	r7,sp
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
800087fa:	fe 68 08 04 	mov	r8,-129020
800087fe:	70 08       	ld.w	r8,r8[0x0]
80008800:	e2 18 30 00 	andl	r8,0x3000,COH
80008804:	ad 88       	lsr	r8,0xc
80008806:	5f 18       	srne	r8
80008808:	5c 58       	castu.b	r8
#else
	return false;
#endif
}
8000880a:	10 9c       	mov	r12,r8
8000880c:	e3 cd 80 80 	ldm	sp++,r7,pc

80008810 <udd_set_address>:


void udd_set_address(uint8_t address)
{
80008810:	eb cd 40 80 	pushm	r7,lr
80008814:	1a 97       	mov	r7,sp
80008816:	20 1d       	sub	sp,4
80008818:	18 98       	mov	r8,r12
8000881a:	ef 68 ff fc 	st.b	r7[-4],r8
	udd_disable_address();
8000881e:	fe 68 00 00 	mov	r8,-131072
80008822:	fe 69 00 00 	mov	r9,-131072
80008826:	72 09       	ld.w	r9,r9[0x0]
80008828:	a7 d9       	cbr	r9,0x7
8000882a:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
8000882c:	fe 68 00 00 	mov	r8,-131072
80008830:	fe 69 00 00 	mov	r9,-131072
80008834:	72 09       	ld.w	r9,r9[0x0]
80008836:	12 9a       	mov	r10,r9
80008838:	e0 1a ff 80 	andl	r10,0xff80
8000883c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80008840:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
80008844:	f5 e9 10 09 	or	r9,r10,r9
80008848:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000884a:	fe 68 00 00 	mov	r8,-131072
8000884e:	fe 69 00 00 	mov	r9,-131072
80008852:	72 09       	ld.w	r9,r9[0x0]
80008854:	a7 b9       	sbr	r9,0x7
80008856:	91 09       	st.w	r8[0x0],r9
}
80008858:	2f fd       	sub	sp,-4
8000885a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000885e <udd_getaddress>:


uint8_t udd_getaddress(void)
{
8000885e:	eb cd 40 80 	pushm	r7,lr
80008862:	1a 97       	mov	r7,sp
	return udd_get_configured_address();
80008864:	fe 68 00 00 	mov	r8,-131072
80008868:	70 08       	ld.w	r8,r8[0x0]
8000886a:	5c 58       	castu.b	r8
8000886c:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
}
80008870:	10 9c       	mov	r12,r8
80008872:	e3 cd 80 80 	ldm	sp++,r7,pc

80008876 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
80008876:	eb cd 40 80 	pushm	r7,lr
8000887a:	1a 97       	mov	r7,sp
	return udd_frame_number();
8000887c:	fe 68 00 20 	mov	r8,-131040
80008880:	70 08       	ld.w	r8,r8[0x0]
80008882:	e2 18 3f f8 	andl	r8,0x3ff8,COH
80008886:	a3 98       	lsr	r8,0x3
80008888:	5c 88       	casts.h	r8
}
8000888a:	10 9c       	mov	r12,r8
8000888c:	e3 cd 80 80 	ldm	sp++,r7,pc

80008890 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
80008890:	eb cd 40 80 	pushm	r7,lr
80008894:	1a 97       	mov	r7,sp
80008896:	20 2d       	sub	sp,8
80008898:	ef 4c ff fc 	st.w	r7[-4],r12
8000889c:	16 98       	mov	r8,r11
8000889e:	ef 58 ff f8 	st.h	r7[-8],r8
	udd_g_ctrlreq.payload = payload;
800088a2:	48 68       	lddpc	r8,800088b8 <udd_set_setup_payload+0x28>
800088a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800088a8:	91 29       	st.w	r8[0x8],r9
	udd_g_ctrlreq.payload_size = payload_size;
800088aa:	48 49       	lddpc	r9,800088b8 <udd_set_setup_payload+0x28>
800088ac:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800088b0:	b2 68       	st.h	r9[0xc],r8
}
800088b2:	2f ed       	sub	sp,-8
800088b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800088b8:	00 00       	add	r0,r0
800088ba:	0b c8       	ld.ub	r8,r5[0x4]

800088bc <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
800088bc:	eb cd 40 80 	pushm	r7,lr
800088c0:	1a 97       	mov	r7,sp
800088c2:	20 dd       	sub	sp,52
800088c4:	16 99       	mov	r9,r11
800088c6:	14 98       	mov	r8,r10
800088c8:	18 9a       	mov	r10,r12
800088ca:	ef 6a ff d4 	st.b	r7[-44],r10
800088ce:	ef 69 ff d0 	st.b	r7[-48],r9
800088d2:	ef 58 ff cc 	st.h	r7[-52],r8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
800088d6:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800088da:	a7 98       	lsr	r8,0x7
800088dc:	ef 68 ff db 	st.b	r7[-37],r8
	ep = ep & USB_EP_ADDR_MASK;
800088e0:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800088e4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800088e8:	ef 68 ff d4 	st.b	r7[-44],r8

	if (ep > USB_DEVICE_MAX_EP) {
800088ec:	ef 39 ff d4 	ld.ub	r9,r7[-44]
800088f0:	30 28       	mov	r8,2
800088f2:	f0 09 18 00 	cp.b	r9,r8
800088f6:	e0 88 00 04 	brls	800088fe <udd_ep_alloc+0x42>
		return false;
800088fa:	30 08       	mov	r8,0
800088fc:	c7 f9       	rjmp	80008bfa <udd_ep_alloc+0x33e>
	}
	if (Is_udd_endpoint_enabled(ep)) {
800088fe:	fe 68 00 00 	mov	r8,-131072
80008902:	70 79       	ld.w	r9,r8[0x1c]
80008904:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008908:	30 1a       	mov	r10,1
8000890a:	f4 08 09 48 	lsl	r8,r10,r8
8000890e:	f3 e8 00 08 	and	r8,r9,r8
80008912:	c0 30       	breq	80008918 <udd_ep_alloc+0x5c>
		return false;
80008914:	30 08       	mov	r8,0
80008916:	c7 29       	rjmp	80008bfa <udd_ep_alloc+0x33e>
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80008918:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8000891c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80008920:	58 28       	cp.w	r8,2
80008922:	c0 d0       	breq	8000893c <udd_ep_alloc+0x80>
80008924:	58 38       	cp.w	r8,3
80008926:	c0 70       	breq	80008934 <udd_ep_alloc+0x78>
80008928:	58 18       	cp.w	r8,1
8000892a:	c0 d1       	brne	80008944 <udd_ep_alloc+0x88>
	case USB_EP_TYPE_ISOCHRONOUS:
		bank = UDD_ISOCHRONOUS_NB_BANK(ep);
8000892c:	30 28       	mov	r8,2
8000892e:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80008932:	c0 b8       	rjmp	80008948 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_INTERRUPT:
		bank = UDD_INTERRUPT_NB_BANK(ep);
80008934:	30 18       	mov	r8,1
80008936:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000893a:	c0 78       	rjmp	80008948 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_BULK:
		bank = UDD_BULK_NB_BANK(ep);
8000893c:	30 28       	mov	r8,2
8000893e:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80008942:	c0 38       	rjmp	80008948 <udd_ep_alloc+0x8c>
	default:
		Assert(false);
		return false;
80008944:	30 08       	mov	r8,0
80008946:	c5 a9       	rjmp	80008bfa <udd_ep_alloc+0x33e>
	}
	switch(bank) {
80008948:	ef 38 ff de 	ld.ub	r8,r7[-34]
8000894c:	58 28       	cp.w	r8,2
8000894e:	c0 90       	breq	80008960 <udd_ep_alloc+0xa4>
80008950:	58 38       	cp.w	r8,3
80008952:	c0 b0       	breq	80008968 <udd_ep_alloc+0xac>
80008954:	58 18       	cp.w	r8,1
80008956:	c0 d1       	brne	80008970 <udd_ep_alloc+0xb4>
	case 1:
		bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
80008958:	30 08       	mov	r8,0
8000895a:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000895e:	c0 b8       	rjmp	80008974 <udd_ep_alloc+0xb8>
	case 2:
		bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
80008960:	30 18       	mov	r8,1
80008962:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80008966:	c0 78       	rjmp	80008974 <udd_ep_alloc+0xb8>
	case 3:
		bank = AVR32_USBB_UECFG0_EPBK_TRIPLE;
80008968:	30 28       	mov	r8,2
8000896a:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000896e:	c0 38       	rjmp	80008974 <udd_ep_alloc+0xb8>
	default:
		Assert(false);
		return false;
80008970:	30 08       	mov	r8,0
80008972:	c4 49       	rjmp	80008bfa <udd_ep_alloc+0x33e>
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80008974:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008978:	a3 68       	lsl	r8,0x2
8000897a:	e0 38 ff 00 	sub	r8,130816
8000897e:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80008982:	a3 69       	lsl	r9,0x2
80008984:	e0 39 ff 00 	sub	r9,130816
80008988:	72 09       	ld.w	r9,r9[0x0]
8000898a:	12 9a       	mov	r10,r9
8000898c:	e0 1a e6 83 	andl	r10,0xe683
80008990:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80008994:	ab 79       	lsl	r9,0xb
80008996:	12 9b       	mov	r11,r9
80008998:	e2 1b 18 00 	andl	r11,0x1800,COH
8000899c:	ef 39 ff db 	ld.ub	r9,r7[-37]
800089a0:	a9 69       	lsl	r9,0x8
800089a2:	e2 19 01 00 	andl	r9,0x100,COH
800089a6:	12 4b       	or	r11,r9
800089a8:	ef 19 ff cc 	ld.uh	r9,r7[-52]
800089ac:	ef 49 ff f0 	st.w	r7[-16],r9
800089b0:	30 89       	mov	r9,8
800089b2:	ef 49 ff f4 	st.w	r7[-12],r9
800089b6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800089ba:	ee fc ff f4 	ld.w	r12,r7[-12]
800089be:	f2 0c 0c 49 	max	r9,r9,r12
800089c2:	ef 49 ff ec 	st.w	r7[-20],r9
800089c6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800089ca:	ef 49 ff e4 	st.w	r7[-28],r9
800089ce:	e0 69 04 00 	mov	r9,1024
800089d2:	ef 49 ff e8 	st.w	r7[-24],r9
800089d6:	ee f9 ff e4 	ld.w	r9,r7[-28]
800089da:	ee fc ff e8 	ld.w	r12,r7[-24]
800089de:	f2 0c 0d 49 	min	r9,r9,r12
800089e2:	ef 49 ff e0 	st.w	r7[-32],r9
800089e6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800089ea:	a1 79       	lsl	r9,0x1
800089ec:	20 19       	sub	r9,1
800089ee:	f2 09 12 00 	clz	r9,r9
800089f2:	f2 09 11 1c 	rsub	r9,r9,28
800089f6:	a5 69       	lsl	r9,0x4
800089f8:	12 4b       	or	r11,r9
800089fa:	ef 39 ff de 	ld.ub	r9,r7[-34]
800089fe:	a3 69       	lsl	r9,0x2
80008a00:	e2 19 00 0c 	andl	r9,0xc,COH
80008a04:	f7 e9 10 09 	or	r9,r11,r9
80008a08:	e2 19 19 7c 	andl	r9,0x197c,COH
80008a0c:	f5 e9 10 09 	or	r9,r10,r9
80008a10:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80008a12:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008a16:	30 19       	mov	r9,1
80008a18:	f2 08 09 48 	lsl	r8,r9,r8
80008a1c:	ef 58 ff dc 	st.h	r7[-36],r8

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80008a20:	30 28       	mov	r8,2
80008a22:	ef 68 ff df 	st.b	r7[-33],r8
80008a26:	c3 a8       	rjmp	80008a9a <udd_ep_alloc+0x1de>
		if (Is_udd_endpoint_enabled(i)) {
80008a28:	fe 68 00 00 	mov	r8,-131072
80008a2c:	70 79       	ld.w	r9,r8[0x1c]
80008a2e:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008a32:	30 1a       	mov	r10,1
80008a34:	f4 08 09 48 	lsl	r8,r10,r8
80008a38:	f3 e8 00 08 	and	r8,r9,r8
80008a3c:	c2 a0       	breq	80008a90 <udd_ep_alloc+0x1d4>
			ep_allocated |= 1 << i;
80008a3e:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008a42:	30 19       	mov	r9,1
80008a44:	f2 08 09 48 	lsl	r8,r9,r8
80008a48:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80008a4c:	ef 08 ff dc 	ld.sh	r8,r7[-36]
80008a50:	f3 e8 10 08 	or	r8,r9,r8
80008a54:	5c 88       	casts.h	r8
80008a56:	ef 58 ff dc 	st.h	r7[-36],r8
			udd_disable_endpoint(i);
80008a5a:	fe 68 00 00 	mov	r8,-131072
80008a5e:	fe 69 00 00 	mov	r9,-131072
80008a62:	72 7a       	ld.w	r10,r9[0x1c]
80008a64:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008a68:	30 1b       	mov	r11,1
80008a6a:	f6 09 09 49 	lsl	r9,r11,r9
80008a6e:	5c d9       	com	r9
80008a70:	f5 e9 00 09 	and	r9,r10,r9
80008a74:	91 79       	st.w	r8[0x1c],r9
			udd_unallocate_memory(i);
80008a76:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008a7a:	a3 68       	lsl	r8,0x2
80008a7c:	e0 38 ff 00 	sub	r8,130816
80008a80:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008a84:	a3 69       	lsl	r9,0x2
80008a86:	e0 39 ff 00 	sub	r9,130816
80008a8a:	72 09       	ld.w	r9,r9[0x0]
80008a8c:	a1 d9       	cbr	r9,0x1
80008a8e:	91 09       	st.w	r8[0x0],r9
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80008a90:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008a94:	20 18       	sub	r8,1
80008a96:	ef 68 ff df 	st.b	r7[-33],r8
80008a9a:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008a9e:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008aa2:	f0 09 18 00 	cp.b	r9,r8
80008aa6:	fe 9b ff c1 	brhi	80008a28 <udd_ep_alloc+0x16c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80008aaa:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008aae:	ef 68 ff df 	st.b	r7[-33],r8
80008ab2:	c9 c8       	rjmp	80008bea <udd_ep_alloc+0x32e>
		if (ep_allocated & (1 << i)) {
80008ab4:	ef 19 ff dc 	ld.uh	r9,r7[-36]
80008ab8:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008abc:	f2 08 08 48 	asr	r8,r9,r8
80008ac0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008ac4:	5c 58       	castu.b	r8
80008ac6:	e0 80 00 8d 	breq	80008be0 <udd_ep_alloc+0x324>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
80008aca:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008ace:	f0 c9 00 01 	sub	r9,r8,1
80008ad2:	12 98       	mov	r8,r9
80008ad4:	a3 68       	lsl	r8,0x2
80008ad6:	12 08       	add	r8,r9
80008ad8:	a3 68       	lsl	r8,0x2
80008ada:	10 99       	mov	r9,r8
80008adc:	4c a8       	lddpc	r8,80008c04 <udd_ep_alloc+0x348>
80008ade:	f2 08 00 08 	add	r8,r9,r8
80008ae2:	ef 48 ff f8 	st.w	r7[-8],r8
			bool b_restart = ptr_job->busy;
80008ae6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008aea:	70 08       	ld.w	r8,r8[0x0]
80008aec:	e6 18 80 00 	andh	r8,0x8000,COH
80008af0:	5f 18       	srne	r8
80008af2:	ef 68 ff ff 	st.b	r7[-1],r8
			ptr_job->busy = false;
80008af6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008afa:	72 08       	ld.w	r8,r9[0x0]
80008afc:	30 0a       	mov	r10,0
80008afe:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80008b02:	93 08       	st.w	r9[0x0],r8

			udd_allocate_memory(i);
80008b04:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008b08:	a3 68       	lsl	r8,0x2
80008b0a:	e0 38 ff 00 	sub	r8,130816
80008b0e:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008b12:	a3 69       	lsl	r9,0x2
80008b14:	e0 39 ff 00 	sub	r9,130816
80008b18:	72 09       	ld.w	r9,r9[0x0]
80008b1a:	a1 b9       	sbr	r9,0x1
80008b1c:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint(i);
80008b1e:	fe 68 00 00 	mov	r8,-131072
80008b22:	fe 69 00 00 	mov	r9,-131072
80008b26:	72 7a       	ld.w	r10,r9[0x1c]
80008b28:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008b2c:	30 1b       	mov	r11,1
80008b2e:	f6 09 09 49 	lsl	r9,r11,r9
80008b32:	f5 e9 10 09 	or	r9,r10,r9
80008b36:	91 79       	st.w	r8[0x1c],r9
			if (!Is_udd_endpoint_configured(i)) {
80008b38:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008b3c:	a3 68       	lsl	r8,0x2
80008b3e:	e0 38 fe d0 	sub	r8,130768
80008b42:	70 08       	ld.w	r8,r8[0x0]
80008b44:	e6 18 00 04 	andh	r8,0x4,COH
80008b48:	c2 61       	brne	80008b94 <udd_ep_alloc+0x2d8>
				if (NULL == ptr_job->call_trans) {
80008b4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b4e:	70 48       	ld.w	r8,r8[0x10]
80008b50:	58 08       	cp.w	r8,0
80008b52:	c0 31       	brne	80008b58 <udd_ep_alloc+0x29c>
					return false;
80008b54:	30 08       	mov	r8,0
80008b56:	c5 28       	rjmp	80008bfa <udd_ep_alloc+0x33e>
				}
				if (Is_udd_endpoint_in(i)) {
80008b58:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008b5c:	a3 68       	lsl	r8,0x2
80008b5e:	e0 38 ff 00 	sub	r8,130816
80008b62:	70 08       	ld.w	r8,r8[0x0]
80008b64:	e2 18 01 00 	andl	r8,0x100,COH
80008b68:	c0 90       	breq	80008b7a <udd_ep_alloc+0x2be>
					i |= USB_EP_DIR_IN;
80008b6a:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008b6e:	ea 18 ff ff 	orh	r8,0xffff
80008b72:	e8 18 ff 80 	orl	r8,0xff80
80008b76:	ef 68 ff df 	st.b	r7[-33],r8
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
80008b7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b7e:	70 48       	ld.w	r8,r8[0x10]
80008b80:	ef 3a ff df 	ld.ub	r10,r7[-33]
80008b84:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008b88:	72 29       	ld.w	r9,r9[0x8]
80008b8a:	12 9b       	mov	r11,r9
80008b8c:	30 1c       	mov	r12,1
80008b8e:	5d 18       	icall	r8
						ptr_job->buf_size, i);
				return false;
80008b90:	30 08       	mov	r8,0
80008b92:	c3 48       	rjmp	80008bfa <udd_ep_alloc+0x33e>
			}
			udd_enable_endpoint_bank_autoswitch(i);
80008b94:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008b98:	a3 68       	lsl	r8,0x2
80008b9a:	e0 38 ff 00 	sub	r8,130816
80008b9e:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008ba2:	a3 69       	lsl	r9,0x2
80008ba4:	e0 39 ff 00 	sub	r9,130816
80008ba8:	72 09       	ld.w	r9,r9[0x0]
80008baa:	a9 b9       	sbr	r9,0x9
80008bac:	91 09       	st.w	r8[0x0],r9
			if (b_restart) {
80008bae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008bb2:	30 08       	mov	r8,0
80008bb4:	f0 09 18 00 	cp.b	r9,r8
80008bb8:	c1 40       	breq	80008be0 <udd_ep_alloc+0x324>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
80008bba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bbe:	70 48       	ld.w	r8,r8[0x10]
80008bc0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008bc4:	72 29       	ld.w	r9,r9[0x8]
80008bc6:	ee fa ff f8 	ld.w	r10,r7[-8]
80008bca:	74 1a       	ld.w	r10,r10[0x4]
80008bcc:	ee fb ff f8 	ld.w	r11,r7[-8]
80008bd0:	76 0b       	ld.w	r11,r11[0x0]
80008bd2:	e6 1b 40 00 	andh	r11,0x4000,COH
80008bd6:	5f 1b       	srne	r11
80008bd8:	ef 3c ff df 	ld.ub	r12,r7[-33]
80008bdc:	f0 1f 00 0b 	mcall	80008c08 <udd_ep_alloc+0x34c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80008be0:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008be4:	2f f8       	sub	r8,-1
80008be6:	ef 68 ff df 	st.b	r7[-33],r8
80008bea:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008bee:	30 28       	mov	r8,2
80008bf0:	f0 09 18 00 	cp.b	r9,r8
80008bf4:	fe 98 ff 60 	brls	80008ab4 <udd_ep_alloc+0x1f8>
						ptr_job->buf_size,
						ptr_job->call_trans);
			}
		}
	}
	return true;
80008bf8:	30 18       	mov	r8,1
}
80008bfa:	10 9c       	mov	r12,r8
80008bfc:	2f 3d       	sub	sp,-52
80008bfe:	e3 cd 80 80 	ldm	sp++,r7,pc
80008c02:	00 00       	add	r0,r0
80008c04:	00 00       	add	r0,r0
80008c06:	06 68       	and	r8,r3
80008c08:	80 00       	ld.sh	r0,r0[0x0]
80008c0a:	8f 2c       	st.w	r7[0x8],r12

80008c0c <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
80008c0c:	eb cd 40 80 	pushm	r7,lr
80008c10:	1a 97       	mov	r7,sp
80008c12:	20 2d       	sub	sp,8
80008c14:	18 98       	mov	r8,r12
80008c16:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
80008c1a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80008c1e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008c22:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
80008c26:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008c2a:	30 28       	mov	r8,2
80008c2c:	f0 09 18 00 	cp.b	r9,r8
80008c30:	e0 8b 00 33 	brhi	80008c96 <udd_ep_free+0x8a>
		return;
	}
	udd_disable_endpoint(index);
80008c34:	fe 68 00 00 	mov	r8,-131072
80008c38:	fe 69 00 00 	mov	r9,-131072
80008c3c:	72 7a       	ld.w	r10,r9[0x1c]
80008c3e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008c42:	30 1b       	mov	r11,1
80008c44:	f6 09 09 49 	lsl	r9,r11,r9
80008c48:	5c d9       	com	r9
80008c4a:	f5 e9 00 09 	and	r9,r10,r9
80008c4e:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
80008c50:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008c54:	a3 68       	lsl	r8,0x2
80008c56:	e0 38 ff 00 	sub	r8,130816
80008c5a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008c5e:	a3 69       	lsl	r9,0x2
80008c60:	e0 39 ff 00 	sub	r9,130816
80008c64:	72 09       	ld.w	r9,r9[0x0]
80008c66:	a1 d9       	cbr	r9,0x1
80008c68:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80008c6a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80008c6e:	10 9c       	mov	r12,r8
80008c70:	f0 1f 00 0c 	mcall	80008ca0 <udd_ep_free+0x94>
	udd_ep_job[index - 1].stall_requested = false;
80008c74:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008c78:	f0 c9 00 01 	sub	r9,r8,1
80008c7c:	48 aa       	lddpc	r10,80008ca4 <udd_ep_free+0x98>
80008c7e:	12 98       	mov	r8,r9
80008c80:	a3 68       	lsl	r8,0x2
80008c82:	12 08       	add	r8,r9
80008c84:	a3 68       	lsl	r8,0x2
80008c86:	f4 08 00 09 	add	r9,r10,r8
80008c8a:	72 08       	ld.w	r8,r9[0x0]
80008c8c:	30 0a       	mov	r10,0
80008c8e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80008c92:	93 08       	st.w	r9[0x0],r8
80008c94:	c0 28       	rjmp	80008c98 <udd_ep_free+0x8c>
void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index) {
		return;
80008c96:	d7 03       	nop
	}
	udd_disable_endpoint(index);
	udd_unallocate_memory(index);
	udd_ep_abort_job(ep);
	udd_ep_job[index - 1].stall_requested = false;
}
80008c98:	2f ed       	sub	sp,-8
80008c9a:	e3 cd 80 80 	ldm	sp++,r7,pc
80008c9e:	00 00       	add	r0,r0
80008ca0:	80 00       	ld.sh	r0,r0[0x0]
80008ca2:	9c b4       	ld.uh	r4,lr[0x6]
80008ca4:	00 00       	add	r0,r0
80008ca6:	06 68       	and	r8,r3

80008ca8 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
80008ca8:	eb cd 40 80 	pushm	r7,lr
80008cac:	1a 97       	mov	r7,sp
80008cae:	20 1d       	sub	sp,4
80008cb0:	18 98       	mov	r8,r12
80008cb2:	ef 68 ff fc 	st.b	r7[-4],r8
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80008cb6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008cba:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008cbe:	a3 68       	lsl	r8,0x2
80008cc0:	e0 38 fe 40 	sub	r8,130624
80008cc4:	70 08       	ld.w	r8,r8[0x0]
80008cc6:	e6 18 00 08 	andh	r8,0x8,COH
80008cca:	5f 18       	srne	r8
80008ccc:	5c 58       	castu.b	r8
}
80008cce:	10 9c       	mov	r12,r8
80008cd0:	2f fd       	sub	sp,-4
80008cd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80008cd6:	d7 03       	nop

80008cd8 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
80008cd8:	eb cd 40 80 	pushm	r7,lr
80008cdc:	1a 97       	mov	r7,sp
80008cde:	20 3d       	sub	sp,12
80008ce0:	18 98       	mov	r8,r12
80008ce2:	ef 68 ff f4 	st.b	r7[-12],r8
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80008ce6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008cea:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008cee:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
80008cf2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008cf6:	30 28       	mov	r8,2
80008cf8:	f0 09 18 00 	cp.b	r9,r8
80008cfc:	e0 88 00 04 	brls	80008d04 <udd_ep_set_halt+0x2c>
		return false;
80008d00:	30 08       	mov	r8,0
80008d02:	c6 f8       	rjmp	80008de0 <udd_ep_set_halt+0x108>
	}

	ptr_job = &udd_ep_job[index - 1];
80008d04:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008d08:	f0 c9 00 01 	sub	r9,r8,1
80008d0c:	12 98       	mov	r8,r9
80008d0e:	a3 68       	lsl	r8,0x2
80008d10:	12 08       	add	r8,r9
80008d12:	a3 68       	lsl	r8,0x2
80008d14:	10 99       	mov	r9,r8
80008d16:	4b 58       	lddpc	r8,80008de8 <udd_ep_set_halt+0x110>
80008d18:	f2 08 00 08 	add	r8,r9,r8
80008d1c:	ef 48 ff f8 	st.w	r7[-8],r8

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80008d20:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008d24:	a3 68       	lsl	r8,0x2
80008d26:	e0 38 fe 40 	sub	r8,130624
80008d2a:	70 08       	ld.w	r8,r8[0x0]
80008d2c:	e6 18 00 08 	andh	r8,0x8,COH
80008d30:	c0 71       	brne	80008d3e <udd_ep_set_halt+0x66>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
80008d32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d36:	70 08       	ld.w	r8,r8[0x0]
80008d38:	e6 18 20 00 	andh	r8,0x2000,COH
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80008d3c:	c0 30       	breq	80008d42 <udd_ep_set_halt+0x6a>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
80008d3e:	30 18       	mov	r8,1
80008d40:	c5 08       	rjmp	80008de0 <udd_ep_set_halt+0x108>
	}

	if (ptr_job->busy == true) {
80008d42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d46:	70 08       	ld.w	r8,r8[0x0]
80008d48:	e6 18 80 00 	andh	r8,0x8000,COH
80008d4c:	c0 30       	breq	80008d52 <udd_ep_set_halt+0x7a>
		return false; // Job on going, stall impossible
80008d4e:	30 08       	mov	r8,0
80008d50:	c4 88       	rjmp	80008de0 <udd_ep_set_halt+0x108>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
80008d52:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008d56:	30 08       	mov	r8,0
80008d58:	f0 09 18 00 	cp.b	r9,r8
80008d5c:	c2 54       	brge	80008da6 <udd_ep_set_halt+0xce>
80008d5e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008d62:	a3 68       	lsl	r8,0x2
80008d64:	e0 38 fe d0 	sub	r8,130768
80008d68:	70 08       	ld.w	r8,r8[0x0]
80008d6a:	e2 18 30 00 	andl	r8,0x3000,COH
80008d6e:	ad 88       	lsr	r8,0xc
80008d70:	c1 b0       	breq	80008da6 <udd_ep_set_halt+0xce>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
80008d72:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008d76:	72 08       	ld.w	r8,r9[0x0]
80008d78:	30 1a       	mov	r10,1
80008d7a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80008d7e:	93 08       	st.w	r9[0x0],r8
			udd_enable_bank_interrupt(index);
80008d80:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008d84:	a3 68       	lsl	r8,0x2
80008d86:	e0 38 fe 10 	sub	r8,130576
80008d8a:	e0 69 10 00 	mov	r9,4096
80008d8e:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(index);
80008d90:	fe 68 00 00 	mov	r8,-131072
80008d94:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008d98:	e0 6a 10 00 	mov	r10,4096
80008d9c:	f4 09 09 49 	lsl	r9,r10,r9
80008da0:	91 69       	st.w	r8[0x18],r9
			return true;
80008da2:	30 18       	mov	r8,1
80008da4:	c1 e8       	rjmp	80008de0 <udd_ep_set_halt+0x108>
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
80008da6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008daa:	a3 68       	lsl	r8,0x2
80008dac:	e0 38 ff 00 	sub	r8,130816
80008db0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008db4:	a3 69       	lsl	r9,0x2
80008db6:	e0 39 ff 00 	sub	r9,130816
80008dba:	72 09       	ld.w	r9,r9[0x0]
80008dbc:	a9 d9       	cbr	r9,0x9
80008dbe:	91 09       	st.w	r8[0x0],r9
	udd_ack_stall(index);
80008dc0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008dc4:	a3 68       	lsl	r8,0x2
80008dc6:	e0 38 fe a0 	sub	r8,130720
80008dca:	34 09       	mov	r9,64
80008dcc:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(index);
80008dce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008dd2:	a3 68       	lsl	r8,0x2
80008dd4:	e0 38 fe 10 	sub	r8,130576
80008dd8:	e8 69 00 00 	mov	r9,524288
80008ddc:	91 09       	st.w	r8[0x0],r9
	return true;
80008dde:	30 18       	mov	r8,1
}
80008de0:	10 9c       	mov	r12,r8
80008de2:	2f dd       	sub	sp,-12
80008de4:	e3 cd 80 80 	ldm	sp++,r7,pc
80008de8:	00 00       	add	r0,r0
80008dea:	06 68       	and	r8,r3

80008dec <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80008dec:	eb cd 40 80 	pushm	r7,lr
80008df0:	1a 97       	mov	r7,sp
80008df2:	20 3d       	sub	sp,12
80008df4:	18 98       	mov	r8,r12
80008df6:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_stall_cleared = false;
80008dfa:	30 08       	mov	r8,0
80008dfc:	ef 68 ff fb 	st.b	r7[-5],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80008e00:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008e04:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008e08:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep)
80008e0c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008e10:	30 28       	mov	r8,2
80008e12:	f0 09 18 00 	cp.b	r9,r8
80008e16:	e0 88 00 04 	brls	80008e1e <udd_ep_clear_halt+0x32>
		return false;
80008e1a:	30 08       	mov	r8,0
80008e1c:	c8 18       	rjmp	80008f1e <udd_ep_clear_halt+0x132>
	ptr_job = &udd_ep_job[ep - 1];
80008e1e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008e22:	f0 c9 00 01 	sub	r9,r8,1
80008e26:	12 98       	mov	r8,r9
80008e28:	a3 68       	lsl	r8,0x2
80008e2a:	12 08       	add	r8,r9
80008e2c:	a3 68       	lsl	r8,0x2
80008e2e:	10 99       	mov	r9,r8
80008e30:	4b e8       	lddpc	r8,80008f28 <udd_ep_clear_halt+0x13c>
80008e32:	f2 08 00 08 	add	r8,r9,r8
80008e36:	ef 48 ff fc 	st.w	r7[-4],r8

	if (ptr_job->stall_requested) {
80008e3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e3e:	70 08       	ld.w	r8,r8[0x0]
80008e40:	e6 18 20 00 	andh	r8,0x2000,COH
80008e44:	c1 c0       	breq	80008e7c <udd_ep_clear_halt+0x90>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
80008e46:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008e4a:	72 08       	ld.w	r8,r9[0x0]
80008e4c:	30 0a       	mov	r10,0
80008e4e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80008e52:	93 08       	st.w	r9[0x0],r8
		udd_disable_bank_interrupt(ep);
80008e54:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008e58:	a3 68       	lsl	r8,0x2
80008e5a:	e0 38 fd e0 	sub	r8,130528
80008e5e:	e0 69 10 00 	mov	r9,4096
80008e62:	91 09       	st.w	r8[0x0],r9
		udd_disable_endpoint_interrupt(ep);
80008e64:	fe 68 00 00 	mov	r8,-131072
80008e68:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008e6c:	e0 6a 10 00 	mov	r10,4096
80008e70:	f4 09 09 49 	lsl	r9,r10,r9
80008e74:	91 59       	st.w	r8[0x14],r9
		b_stall_cleared = true;
80008e76:	30 18       	mov	r8,1
80008e78:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
80008e7c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008e80:	a3 68       	lsl	r8,0x2
80008e82:	e0 38 fe 40 	sub	r8,130624
80008e86:	70 08       	ld.w	r8,r8[0x0]
80008e88:	e6 18 00 08 	andh	r8,0x8,COH
80008e8c:	c3 10       	breq	80008eee <udd_ep_clear_halt+0x102>
		if (Is_udd_stall(ep)) {
80008e8e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008e92:	a3 68       	lsl	r8,0x2
80008e94:	e0 38 fe d0 	sub	r8,130768
80008e98:	70 08       	ld.w	r8,r8[0x0]
80008e9a:	e2 18 00 40 	andl	r8,0x40,COH
80008e9e:	c1 00       	breq	80008ebe <udd_ep_clear_halt+0xd2>
			udd_ack_stall(ep);
80008ea0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008ea4:	a3 68       	lsl	r8,0x2
80008ea6:	e0 38 fe a0 	sub	r8,130720
80008eaa:	34 09       	mov	r9,64
80008eac:	91 09       	st.w	r8[0x0],r9
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
80008eae:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008eb2:	a3 68       	lsl	r8,0x2
80008eb4:	e0 38 fe 10 	sub	r8,130576
80008eb8:	e4 69 00 00 	mov	r9,262144
80008ebc:	91 09       	st.w	r8[0x0],r9
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
80008ebe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008ec2:	a3 68       	lsl	r8,0x2
80008ec4:	e0 38 fd e0 	sub	r8,130528
80008ec8:	e8 69 00 00 	mov	r9,524288
80008ecc:	91 09       	st.w	r8[0x0],r9
		udd_enable_endpoint_bank_autoswitch(ep);
80008ece:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008ed2:	a3 68       	lsl	r8,0x2
80008ed4:	e0 38 ff 00 	sub	r8,130816
80008ed8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008edc:	a3 69       	lsl	r9,0x2
80008ede:	e0 39 ff 00 	sub	r9,130816
80008ee2:	72 09       	ld.w	r9,r9[0x0]
80008ee4:	a9 b9       	sbr	r9,0x9
80008ee6:	91 09       	st.w	r8[0x0],r9
		b_stall_cleared = true;
80008ee8:	30 18       	mov	r8,1
80008eea:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (b_stall_cleared) {
80008eee:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80008ef2:	30 08       	mov	r8,0
80008ef4:	f0 09 18 00 	cp.b	r9,r8
80008ef8:	c1 20       	breq	80008f1c <udd_ep_clear_halt+0x130>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80008efa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008efe:	70 08       	ld.w	r8,r8[0x0]
80008f00:	e6 18 80 00 	andh	r8,0x8000,COH
80008f04:	c0 c0       	breq	80008f1c <udd_ep_clear_halt+0x130>
			ptr_job->busy = false;
80008f06:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008f0a:	72 08       	ld.w	r8,r9[0x0]
80008f0c:	30 0a       	mov	r10,0
80008f0e:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80008f12:	93 08       	st.w	r9[0x0],r8
			ptr_job->call_nohalt();
80008f14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f18:	70 48       	ld.w	r8,r8[0x10]
80008f1a:	5d 18       	icall	r8
		}
	}
	return true;
80008f1c:	30 18       	mov	r8,1
}
80008f1e:	10 9c       	mov	r12,r8
80008f20:	2f dd       	sub	sp,-12
80008f22:	e3 cd 80 80 	ldm	sp++,r7,pc
80008f26:	00 00       	add	r0,r0
80008f28:	00 00       	add	r0,r0
80008f2a:	06 68       	and	r8,r3

80008f2c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80008f2c:	eb cd 40 80 	pushm	r7,lr
80008f30:	1a 97       	mov	r7,sp
80008f32:	20 7d       	sub	sp,28
80008f34:	ef 4a ff ec 	st.w	r7[-20],r10
80008f38:	ef 49 ff e8 	st.w	r7[-24],r9
80008f3c:	ef 48 ff e4 	st.w	r7[-28],r8
80008f40:	18 98       	mov	r8,r12
80008f42:	ef 68 ff f4 	st.b	r7[-12],r8
80008f46:	16 98       	mov	r8,r11
80008f48:	ef 68 ff f0 	st.b	r7[-16],r8
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
80008f4c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008f50:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008f54:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep) {
80008f58:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008f5c:	30 28       	mov	r8,2
80008f5e:	f0 09 18 00 	cp.b	r9,r8
80008f62:	e0 88 00 04 	brls	80008f6a <udd_ep_run+0x3e>
		return false;
80008f66:	30 08       	mov	r8,0
80008f68:	c6 88       	rjmp	80009038 <udd_ep_run+0x10c>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
80008f6a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008f6e:	f0 c9 00 01 	sub	r9,r8,1
80008f72:	12 98       	mov	r8,r9
80008f74:	a3 68       	lsl	r8,0x2
80008f76:	12 08       	add	r8,r9
80008f78:	a3 68       	lsl	r8,0x2
80008f7a:	10 99       	mov	r9,r8
80008f7c:	4b 18       	lddpc	r8,80009040 <udd_ep_run+0x114>
80008f7e:	f2 08 00 08 	add	r8,r9,r8
80008f82:	ef 48 ff f8 	st.w	r7[-8],r8

	if ((!Is_udd_endpoint_enabled(ep))
80008f86:	fe 68 00 00 	mov	r8,-131072
80008f8a:	70 79       	ld.w	r9,r8[0x1c]
80008f8c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008f90:	30 1a       	mov	r10,1
80008f92:	f4 08 09 48 	lsl	r8,r10,r8
80008f96:	f3 e8 00 08 	and	r8,r9,r8
80008f9a:	c1 00       	breq	80008fba <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
80008f9c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008fa0:	a3 68       	lsl	r8,0x2
80008fa2:	e0 38 fe 40 	sub	r8,130624
80008fa6:	70 08       	ld.w	r8,r8[0x0]
80008fa8:	e6 18 00 08 	andh	r8,0x8,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80008fac:	c0 71       	brne	80008fba <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
80008fae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fb2:	70 08       	ld.w	r8,r8[0x0]
80008fb4:	e6 18 20 00 	andh	r8,0x2000,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80008fb8:	c0 30       	breq	80008fbe <udd_ep_run+0x92>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
80008fba:	30 08       	mov	r8,0
80008fbc:	c3 e8       	rjmp	80009038 <udd_ep_run+0x10c>
	}

	flags = cpu_irq_save();
80008fbe:	f0 1f 00 22 	mcall	80009044 <udd_ep_run+0x118>
80008fc2:	18 98       	mov	r8,r12
80008fc4:	ef 48 ff fc 	st.w	r7[-4],r8
	if (ptr_job->busy == true) {
80008fc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fcc:	70 08       	ld.w	r8,r8[0x0]
80008fce:	e6 18 80 00 	andh	r8,0x8000,COH
80008fd2:	c0 70       	breq	80008fe0 <udd_ep_run+0xb4>
		cpu_irq_restore(flags);
80008fd4:	ee fc ff fc 	ld.w	r12,r7[-4]
80008fd8:	f0 1f 00 1c 	mcall	80009048 <udd_ep_run+0x11c>
		return false; // Job already on going
80008fdc:	30 08       	mov	r8,0
80008fde:	c2 d8       	rjmp	80009038 <udd_ep_run+0x10c>
	}
	ptr_job->busy = true;
80008fe0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008fe4:	72 08       	ld.w	r8,r9[0x0]
80008fe6:	30 1a       	mov	r10,1
80008fe8:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80008fec:	93 08       	st.w	r9[0x0],r8
	cpu_irq_restore(flags);
80008fee:	ee fc ff fc 	ld.w	r12,r7[-4]
80008ff2:	f0 1f 00 16 	mcall	80009048 <udd_ep_run+0x11c>

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
80008ff6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ffa:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008ffe:	91 19       	st.w	r8[0x4],r9
	ptr_job->buf_size = buf_size;
80009000:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009004:	ee f9 ff e8 	ld.w	r9,r7[-24]
80009008:	91 29       	st.w	r8[0x8],r9
	ptr_job->nb_trans = 0;
8000900a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000900e:	30 09       	mov	r9,0
80009010:	91 39       	st.w	r8[0xc],r9
	ptr_job->call_trans = callback;
80009012:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009016:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000901a:	91 49       	st.w	r8[0x10],r9
	ptr_job->b_shortpacket = b_shortpacket;
8000901c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009020:	72 08       	ld.w	r8,r9[0x0]
80009022:	ef 3a ff f0 	ld.ub	r10,r7[-16]
80009026:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000902a:	93 08       	st.w	r9[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
8000902c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009030:	10 9c       	mov	r12,r8
80009032:	f0 1f 00 07 	mcall	8000904c <udd_ep_run+0x120>
	return true;
80009036:	30 18       	mov	r8,1
}
80009038:	10 9c       	mov	r12,r8
8000903a:	2f 9d       	sub	sp,-28
8000903c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009040:	00 00       	add	r0,r0
80009042:	06 68       	and	r8,r3
80009044:	80 00       	ld.sh	r0,r0[0x0]
80009046:	83 10       	st.w	r1[0x4],r0
80009048:	80 00       	ld.sh	r0,r0[0x0]
8000904a:	83 2e       	st.w	r1[0x8],lr
8000904c:	80 00       	ld.sh	r0,r0[0x0]
8000904e:	9d 84       	st.w	lr[0x20],r4

80009050 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
80009050:	eb cd 40 80 	pushm	r7,lr
80009054:	1a 97       	mov	r7,sp
80009056:	20 2d       	sub	sp,8
80009058:	18 98       	mov	r8,r12
8000905a:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000905e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009062:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009066:	ef 68 ff ff 	st.b	r7[-1],r8

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
8000906a:	fe 68 00 00 	mov	r8,-131072
8000906e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009072:	20 19       	sub	r9,1
80009074:	fc 1a 02 00 	movh	r10,0x200
80009078:	f4 09 09 49 	lsl	r9,r10,r9
8000907c:	91 59       	st.w	r8[0x14],r9
	udd_endpoint_dma_set_control(index, 0);
8000907e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009082:	a5 68       	lsl	r8,0x4
80009084:	e0 38 fd 00 	sub	r8,130304
80009088:	30 09       	mov	r9,0
8000908a:	91 29       	st.w	r8[0x8],r9
	// Kill banks
	udd_disable_endpoint_interrupt(index);
8000908c:	fe 68 00 00 	mov	r8,-131072
80009090:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009094:	e0 6a 10 00 	mov	r10,4096
80009098:	f4 09 09 49 	lsl	r9,r10,r9
8000909c:	91 59       	st.w	r8[0x14],r9
	while (udd_nb_busy_bank(index)) {
8000909e:	c1 28       	rjmp	800090c2 <udd_ep_abort+0x72>
		udd_kill_last_in_bank(index);
800090a0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800090a4:	a3 68       	lsl	r8,0x2
800090a6:	e0 38 fe 10 	sub	r8,130576
800090aa:	e0 69 20 00 	mov	r9,8192
800090ae:	91 09       	st.w	r8[0x0],r9
		while(Is_udd_killing_last_in_bank(index));
800090b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800090b4:	a3 68       	lsl	r8,0x2
800090b6:	e0 38 fe 40 	sub	r8,130624
800090ba:	70 08       	ld.w	r8,r8[0x0]
800090bc:	e2 18 20 00 	andl	r8,0x2000,COH
800090c0:	cf 81       	brne	800090b0 <udd_ep_abort+0x60>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
800090c2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800090c6:	a3 68       	lsl	r8,0x2
800090c8:	e0 38 fe d0 	sub	r8,130768
800090cc:	70 08       	ld.w	r8,r8[0x0]
800090ce:	e2 18 30 00 	andl	r8,0x3000,COH
800090d2:	ad 88       	lsr	r8,0xc
800090d4:	ce 61       	brne	800090a0 <udd_ep_abort+0x50>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
800090d6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800090da:	10 9c       	mov	r12,r8
800090dc:	f0 1f 00 03 	mcall	800090e8 <udd_ep_abort+0x98>
}
800090e0:	2f ed       	sub	sp,-8
800090e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800090e6:	00 00       	add	r0,r0
800090e8:	80 00       	ld.sh	r0,r0[0x0]
800090ea:	9c b4       	ld.uh	r4,lr[0x6]

800090ec <udd_ep_wait_stall_clear>:


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
800090ec:	eb cd 40 80 	pushm	r7,lr
800090f0:	1a 97       	mov	r7,sp
800090f2:	20 3d       	sub	sp,12
800090f4:	18 98       	mov	r8,r12
800090f6:	ef 4b ff f4 	st.w	r7[-12],r11
800090fa:	ef 68 ff f8 	st.b	r7[-8],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
800090fe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009102:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009106:	ef 68 ff f8 	st.b	r7[-8],r8
	if (USB_DEVICE_MAX_EP < ep) {
8000910a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000910e:	30 28       	mov	r8,2
80009110:	f0 09 18 00 	cp.b	r9,r8
80009114:	e0 88 00 04 	brls	8000911c <udd_ep_wait_stall_clear+0x30>
		return false;
80009118:	30 08       	mov	r8,0
8000911a:	c4 48       	rjmp	800091a2 <udd_ep_wait_stall_clear+0xb6>
	}

	ptr_job = &udd_ep_job[ep - 1];
8000911c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009120:	f0 c9 00 01 	sub	r9,r8,1
80009124:	12 98       	mov	r8,r9
80009126:	a3 68       	lsl	r8,0x2
80009128:	12 08       	add	r8,r9
8000912a:	a3 68       	lsl	r8,0x2
8000912c:	10 99       	mov	r9,r8
8000912e:	4a 08       	lddpc	r8,800091ac <udd_ep_wait_stall_clear+0xc0>
80009130:	f2 08 00 08 	add	r8,r9,r8
80009134:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!Is_udd_endpoint_enabled(ep)) {
80009138:	fe 68 00 00 	mov	r8,-131072
8000913c:	70 79       	ld.w	r9,r8[0x1c]
8000913e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009142:	30 1a       	mov	r10,1
80009144:	f4 08 09 48 	lsl	r8,r10,r8
80009148:	f3 e8 00 08 	and	r8,r9,r8
8000914c:	c0 31       	brne	80009152 <udd_ep_wait_stall_clear+0x66>
		return false; // Endpoint not enabled
8000914e:	30 08       	mov	r8,0
80009150:	c2 98       	rjmp	800091a2 <udd_ep_wait_stall_clear+0xb6>
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
80009152:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009156:	70 08       	ld.w	r8,r8[0x0]
80009158:	e6 18 80 00 	andh	r8,0x8000,COH
8000915c:	c0 30       	breq	80009162 <udd_ep_wait_stall_clear+0x76>
		return false; // Job already on going
8000915e:	30 08       	mov	r8,0
80009160:	c2 18       	rjmp	800091a2 <udd_ep_wait_stall_clear+0xb6>
	}

	if (Is_udd_endpoint_stall_requested(ep)
80009162:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009166:	a3 68       	lsl	r8,0x2
80009168:	e0 38 fe 40 	sub	r8,130624
8000916c:	70 08       	ld.w	r8,r8[0x0]
8000916e:	e6 18 00 08 	andh	r8,0x8,COH
80009172:	c0 71       	brne	80009180 <udd_ep_wait_stall_clear+0x94>
			|| ptr_job->stall_requested) {
80009174:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009178:	70 08       	ld.w	r8,r8[0x0]
8000917a:	e6 18 20 00 	andh	r8,0x2000,COH
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000917e:	c0 e0       	breq	8000919a <udd_ep_wait_stall_clear+0xae>
			|| ptr_job->stall_requested) {
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
80009180:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009184:	72 08       	ld.w	r8,r9[0x0]
80009186:	30 1a       	mov	r10,1
80009188:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000918c:	93 08       	st.w	r9[0x0],r8
		ptr_job->call_nohalt = callback;
8000918e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009192:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009196:	91 49       	st.w	r8[0x10],r9
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
80009198:	c0 48       	rjmp	800091a0 <udd_ep_wait_stall_clear+0xb4>
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
8000919a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000919e:	5d 18       	icall	r8
	}
	return true;
800091a0:	30 18       	mov	r8,1
}
800091a2:	10 9c       	mov	r12,r8
800091a4:	2f dd       	sub	sp,-12
800091a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800091aa:	00 00       	add	r0,r0
800091ac:	00 00       	add	r0,r0
800091ae:	06 68       	and	r8,r3

800091b0 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
800091b0:	eb cd 40 80 	pushm	r7,lr
800091b4:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
800091b6:	fe 68 00 00 	mov	r8,-131072
800091ba:	fe 69 00 00 	mov	r9,-131072
800091be:	72 09       	ld.w	r9,r9[0x0]
800091c0:	e0 19 f3 ff 	andl	r9,0xf3ff
800091c4:	ab b9       	sbr	r9,0xb
800091c6:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_j();
800091c8:	fe 68 00 00 	mov	r8,-131072
800091cc:	fe 69 00 00 	mov	r9,-131072
800091d0:	72 09       	ld.w	r9,r9[0x0]
800091d2:	ad b9       	sbr	r9,0xd
800091d4:	91 09       	st.w	r8[0x0],r9
}
800091d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800091da <udd_test_mode_k>:


void udd_test_mode_k(void)
{
800091da:	eb cd 40 80 	pushm	r7,lr
800091de:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
800091e0:	fe 68 00 00 	mov	r8,-131072
800091e4:	fe 69 00 00 	mov	r9,-131072
800091e8:	72 09       	ld.w	r9,r9[0x0]
800091ea:	e0 19 f3 ff 	andl	r9,0xf3ff
800091ee:	ab b9       	sbr	r9,0xb
800091f0:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_k();
800091f2:	fe 68 00 00 	mov	r8,-131072
800091f6:	fe 69 00 00 	mov	r9,-131072
800091fa:	72 09       	ld.w	r9,r9[0x0]
800091fc:	af a9       	sbr	r9,0xe
800091fe:	91 09       	st.w	r8[0x0],r9
}
80009200:	e3 cd 80 80 	ldm	sp++,r7,pc

80009204 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
80009204:	eb cd 40 80 	pushm	r7,lr
80009208:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000920a:	fe 68 00 00 	mov	r8,-131072
8000920e:	fe 69 00 00 	mov	r9,-131072
80009212:	72 09       	ld.w	r9,r9[0x0]
80009214:	e0 19 f3 ff 	andl	r9,0xf3ff
80009218:	ab b9       	sbr	r9,0xb
8000921a:	91 09       	st.w	r8[0x0],r9
}
8000921c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009220 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
80009220:	eb cd 40 80 	pushm	r7,lr
80009224:	1a 97       	mov	r7,sp
80009226:	21 7d       	sub	sp,92
				0xFF, 0xFF,
		// S, 111111S, {0111111S * 7}
		0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD,
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};
80009228:	4d c9       	lddpc	r9,80009398 <udd_test_mode_packet+0x178>
8000922a:	ee c8 00 5c 	sub	r8,r7,92
8000922e:	f2 ea 00 00 	ld.d	r10,r9[0]
80009232:	f0 eb 00 00 	st.d	r8[0],r10
80009236:	f2 ea 00 08 	ld.d	r10,r9[8]
8000923a:	f0 eb 00 08 	st.d	r8[8],r10
8000923e:	f2 ea 00 10 	ld.d	r10,r9[16]
80009242:	f0 eb 00 10 	st.d	r8[16],r10
80009246:	f2 ea 00 18 	ld.d	r10,r9[24]
8000924a:	f0 eb 00 18 	st.d	r8[24],r10
8000924e:	f2 ea 00 20 	ld.d	r10,r9[32]
80009252:	f0 eb 00 20 	st.d	r8[32],r10
80009256:	f2 ea 00 28 	ld.d	r10,r9[40]
8000925a:	f0 eb 00 28 	st.d	r8[40],r10
8000925e:	72 ca       	ld.w	r10,r9[0x30]
80009260:	91 ca       	st.w	r8[0x30],r10
80009262:	f3 39 00 34 	ld.ub	r9,r9[52]
80009266:	f1 69 00 34 	st.b	r8[52],r9

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
8000926a:	fe 68 00 00 	mov	r8,-131072
8000926e:	fe 69 00 00 	mov	r9,-131072
80009272:	72 79       	ld.w	r9,r9[0x1c]
80009274:	a1 c9       	cbr	r9,0x0
80009276:	91 79       	st.w	r8[0x1c],r9
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
80009278:	fe 68 01 00 	mov	r8,-130816
8000927c:	fe 69 01 00 	mov	r9,-130816
80009280:	72 09       	ld.w	r9,r9[0x0]
80009282:	12 9a       	mov	r10,r9
80009284:	e0 1a e6 83 	andl	r10,0xe683
80009288:	34 09       	mov	r9,64
8000928a:	ef 49 ff f8 	st.w	r7[-8],r9
8000928e:	30 89       	mov	r9,8
80009290:	ef 49 ff fc 	st.w	r7[-4],r9
80009294:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009298:	ee fb ff fc 	ld.w	r11,r7[-4]
8000929c:	f2 0b 0c 49 	max	r9,r9,r11
800092a0:	ef 49 ff f4 	st.w	r7[-12],r9
800092a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800092a8:	ef 49 ff ec 	st.w	r7[-20],r9
800092ac:	e0 69 04 00 	mov	r9,1024
800092b0:	ef 49 ff f0 	st.w	r7[-16],r9
800092b4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800092b8:	ee fb ff f0 	ld.w	r11,r7[-16]
800092bc:	f2 0b 0d 49 	min	r9,r9,r11
800092c0:	ef 49 ff e8 	st.w	r7[-24],r9
800092c4:	ee f9 ff e8 	ld.w	r9,r7[-24]
800092c8:	a1 79       	lsl	r9,0x1
800092ca:	20 19       	sub	r9,1
800092cc:	f2 09 12 00 	clz	r9,r9
800092d0:	f2 09 11 1c 	rsub	r9,r9,28
800092d4:	a5 69       	lsl	r9,0x4
800092d6:	e2 19 08 7c 	andl	r9,0x87c,COH
800092da:	f5 e9 10 09 	or	r9,r10,r9
800092de:	e8 19 11 00 	orl	r9,0x1100
800092e2:	91 09       	st.w	r8[0x0],r9
			64, AVR32_USBB_UECFG0_EPBK_SINGLE);
	udd_allocate_memory(0);
800092e4:	fe 68 01 00 	mov	r8,-130816
800092e8:	fe 69 01 00 	mov	r9,-130816
800092ec:	72 09       	ld.w	r9,r9[0x0]
800092ee:	a1 b9       	sbr	r9,0x1
800092f0:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
800092f2:	fe 68 00 00 	mov	r8,-131072
800092f6:	fe 69 00 00 	mov	r9,-131072
800092fa:	72 79       	ld.w	r9,r9[0x1c]
800092fc:	a1 a9       	sbr	r9,0x0
800092fe:	91 79       	st.w	r8[0x1c],r9

	udd_enable_hs_test_mode();
80009300:	fe 68 00 00 	mov	r8,-131072
80009304:	fe 69 00 00 	mov	r9,-131072
80009308:	72 09       	ld.w	r9,r9[0x0]
8000930a:	e0 19 f3 ff 	andl	r9,0xf3ff
8000930e:	ab b9       	sbr	r9,0xb
80009310:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_packet();
80009312:	fe 68 00 00 	mov	r8,-131072
80009316:	fe 69 00 00 	mov	r9,-131072
8000931a:	72 09       	ld.w	r9,r9[0x0]
8000931c:	af b9       	sbr	r9,0xf
8000931e:	91 09       	st.w	r8[0x0],r9

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
80009320:	fc 18 e0 00 	movh	r8,0xe000
80009324:	ef 48 ff dc 	st.w	r7[-36],r8
	ptr_src = test_packet;
80009328:	ee c8 00 5c 	sub	r8,r7,92
8000932c:	ef 48 ff e0 	st.w	r7[-32],r8

	for (i = 0; i < sizeof(test_packet); i++) {
80009330:	30 08       	mov	r8,0
80009332:	ef 68 ff db 	st.b	r7[-37],r8
80009336:	c1 68       	rjmp	80009362 <udd_test_mode_packet+0x142>
		*ptr_dest++ = *ptr_src++;
80009338:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000933c:	11 88       	ld.ub	r8,r8[0x0]
8000933e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80009342:	b2 88       	st.b	r9[0x0],r8
80009344:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009348:	2f f8       	sub	r8,-1
8000934a:	ef 48 ff dc 	st.w	r7[-36],r8
8000934e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009352:	2f f8       	sub	r8,-1
80009354:	ef 48 ff e0 	st.w	r7[-32],r8

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
80009358:	ef 38 ff db 	ld.ub	r8,r7[-37]
8000935c:	2f f8       	sub	r8,-1
8000935e:	ef 68 ff db 	st.b	r7[-37],r8
80009362:	ef 39 ff db 	ld.ub	r9,r7[-37]
80009366:	33 48       	mov	r8,52
80009368:	f0 09 18 00 	cp.b	r9,r8
8000936c:	fe 98 ff e6 	brls	80009338 <udd_test_mode_packet+0x118>
		*ptr_dest++ = *ptr_src++;
	}
	flags = cpu_irq_save();
80009370:	f0 1f 00 0b 	mcall	8000939c <udd_test_mode_packet+0x17c>
80009374:	18 98       	mov	r8,r12
80009376:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_in_send_interrupt(0);
8000937a:	fe 68 01 f0 	mov	r8,-130576
8000937e:	30 19       	mov	r9,1
80009380:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009382:	ee fc ff e4 	ld.w	r12,r7[-28]
80009386:	f0 1f 00 07 	mcall	800093a0 <udd_test_mode_packet+0x180>

	udd_ack_in_send(0);
8000938a:	fe 68 01 60 	mov	r8,-130720
8000938e:	30 19       	mov	r9,1
80009390:	91 09       	st.w	r8[0x0],r9
}
80009392:	2e 9d       	sub	sp,-92
80009394:	e3 cd 80 80 	ldm	sp++,r7,pc
80009398:	80 00       	ld.sh	r0,r0[0x0]
8000939a:	db ec       	*unknown*
8000939c:	80 00       	ld.sh	r0,r0[0x0]
8000939e:	83 10       	st.w	r1[0x4],r0
800093a0:	80 00       	ld.sh	r0,r0[0x0]
800093a2:	83 2e       	st.w	r1[0x8],lr

800093a4 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
800093a4:	eb cd 40 80 	pushm	r7,lr
800093a8:	1a 97       	mov	r7,sp
800093aa:	20 7d       	sub	sp,28
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
800093ac:	fe 68 00 00 	mov	r8,-131072
800093b0:	fe 69 00 00 	mov	r9,-131072
800093b4:	72 09       	ld.w	r9,r9[0x0]
800093b6:	e0 19 ff 80 	andl	r9,0xff80
800093ba:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800093bc:	fe 68 00 00 	mov	r8,-131072
800093c0:	fe 69 00 00 	mov	r9,-131072
800093c4:	72 09       	ld.w	r9,r9[0x0]
800093c6:	a7 b9       	sbr	r9,0x7
800093c8:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
800093ca:	fe 68 01 00 	mov	r8,-130816
800093ce:	fe 69 01 00 	mov	r9,-130816
800093d2:	72 09       	ld.w	r9,r9[0x0]
800093d4:	12 9a       	mov	r10,r9
800093d6:	e0 1a e6 83 	andl	r10,0xe683
800093da:	34 09       	mov	r9,64
800093dc:	ef 49 ff f8 	st.w	r7[-8],r9
800093e0:	30 89       	mov	r9,8
800093e2:	ef 49 ff fc 	st.w	r7[-4],r9
800093e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800093ea:	ee fb ff fc 	ld.w	r11,r7[-4]
800093ee:	f2 0b 0c 49 	max	r9,r9,r11
800093f2:	ef 49 ff f4 	st.w	r7[-12],r9
800093f6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800093fa:	ef 49 ff ec 	st.w	r7[-20],r9
800093fe:	e0 69 04 00 	mov	r9,1024
80009402:	ef 49 ff f0 	st.w	r7[-16],r9
80009406:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000940a:	ee fb ff f0 	ld.w	r11,r7[-16]
8000940e:	f2 0b 0d 49 	min	r9,r9,r11
80009412:	ef 49 ff e8 	st.w	r7[-24],r9
80009416:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000941a:	a1 79       	lsl	r9,0x1
8000941c:	20 19       	sub	r9,1
8000941e:	f2 09 12 00 	clz	r9,r9
80009422:	f2 09 11 1c 	rsub	r9,r9,28
80009426:	a5 69       	lsl	r9,0x4
80009428:	e2 19 19 7c 	andl	r9,0x197c,COH
8000942c:	f5 e9 10 09 	or	r9,r10,r9
80009430:	91 09       	st.w	r8[0x0],r9
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80009432:	fe 68 01 00 	mov	r8,-130816
80009436:	fe 69 01 00 	mov	r9,-130816
8000943a:	72 09       	ld.w	r9,r9[0x0]
8000943c:	a1 b9       	sbr	r9,0x1
8000943e:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
80009440:	fe 68 00 00 	mov	r8,-131072
80009444:	fe 69 00 00 	mov	r9,-131072
80009448:	72 79       	ld.w	r9,r9[0x1c]
8000944a:	a1 a9       	sbr	r9,0x0
8000944c:	91 79       	st.w	r8[0x1c],r9
	flags = cpu_irq_save();
8000944e:	f0 1f 00 0d 	mcall	80009480 <udd_reset_ep_ctrl+0xdc>
80009452:	18 98       	mov	r8,r12
80009454:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_setup_received_interrupt(0);
80009458:	fe 68 01 f0 	mov	r8,-130576
8000945c:	30 49       	mov	r9,4
8000945e:	91 09       	st.w	r8[0x0],r9
	udd_enable_out_received_interrupt(0);
80009460:	fe 68 01 f0 	mov	r8,-130576
80009464:	30 29       	mov	r9,2
80009466:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint_interrupt(0);
80009468:	fe 68 00 00 	mov	r8,-131072
8000946c:	e0 69 10 00 	mov	r9,4096
80009470:	91 69       	st.w	r8[0x18],r9
	cpu_irq_restore(flags);
80009472:	ee fc ff e4 	ld.w	r12,r7[-28]
80009476:	f0 1f 00 04 	mcall	80009484 <udd_reset_ep_ctrl+0xe0>
}
8000947a:	2f 9d       	sub	sp,-28
8000947c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009480:	80 00       	ld.sh	r0,r0[0x0]
80009482:	83 10       	st.w	r1[0x4],r0
80009484:	80 00       	ld.sh	r0,r0[0x0]
80009486:	83 2e       	st.w	r1[0x8],lr

80009488 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
80009488:	eb cd 40 80 	pushm	r7,lr
8000948c:	1a 97       	mov	r7,sp
8000948e:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
80009490:	f0 1f 00 10 	mcall	800094d0 <udd_ctrl_init+0x48>
80009494:	18 98       	mov	r8,r12
80009496:	ef 48 ff fc 	st.w	r7[-4],r8
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
8000949a:	fe 68 02 20 	mov	r8,-130528
8000949e:	30 19       	mov	r9,1
800094a0:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
800094a2:	ee fc ff fc 	ld.w	r12,r7[-4]
800094a6:	f0 1f 00 0c 	mcall	800094d4 <udd_ctrl_init+0x4c>

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
800094aa:	fe 68 01 60 	mov	r8,-130720
800094ae:	30 29       	mov	r9,2
800094b0:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
800094b2:	48 a8       	lddpc	r8,800094d8 <udd_ctrl_init+0x50>
800094b4:	30 09       	mov	r9,0
800094b6:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
800094b8:	48 88       	lddpc	r8,800094d8 <udd_ctrl_init+0x50>
800094ba:	30 09       	mov	r9,0
800094bc:	91 59       	st.w	r8[0x14],r9
	udd_g_ctrlreq.payload_size = 0;
800094be:	48 79       	lddpc	r9,800094d8 <udd_ctrl_init+0x50>
800094c0:	30 08       	mov	r8,0
800094c2:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
800094c4:	48 68       	lddpc	r8,800094dc <udd_ctrl_init+0x54>
800094c6:	30 09       	mov	r9,0
800094c8:	91 09       	st.w	r8[0x0],r9
}
800094ca:	2f fd       	sub	sp,-4
800094cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800094d0:	80 00       	ld.sh	r0,r0[0x0]
800094d2:	83 10       	st.w	r1[0x4],r0
800094d4:	80 00       	ld.sh	r0,r0[0x0]
800094d6:	83 2e       	st.w	r1[0x8],lr
800094d8:	00 00       	add	r0,r0
800094da:	0b c8       	ld.ub	r8,r5[0x4]
800094dc:	00 00       	add	r0,r0
800094de:	06 60       	and	r0,r3

800094e0 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
800094e0:	eb cd 40 80 	pushm	r7,lr
800094e4:	1a 97       	mov	r7,sp
800094e6:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
800094e8:	4c b8       	lddpc	r8,80009614 <udd_ctrl_setup_received+0x134>
800094ea:	70 08       	ld.w	r8,r8[0x0]
800094ec:	58 08       	cp.w	r8,0
800094ee:	c0 50       	breq	800094f8 <udd_ctrl_setup_received+0x18>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
800094f0:	f0 1f 00 4a 	mcall	80009618 <udd_ctrl_setup_received+0x138>

		// Reinitializes control endpoint management
		udd_ctrl_init();
800094f4:	f0 1f 00 4a 	mcall	8000961c <udd_ctrl_setup_received+0x13c>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
800094f8:	fe 68 01 30 	mov	r8,-130768
800094fc:	70 08       	ld.w	r8,r8[0x0]
800094fe:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80009502:	b5 88       	lsr	r8,0x14
80009504:	58 88       	cp.w	r8,8
80009506:	c0 80       	breq	80009516 <udd_ctrl_setup_received+0x36>
		udd_ctrl_stall_data();
80009508:	f0 1f 00 46 	mcall	80009620 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
8000950c:	fe 68 01 60 	mov	r8,-130720
80009510:	30 49       	mov	r9,4
80009512:	91 09       	st.w	r8[0x0],r9
		return; // Error data number doesn't correspond to SETUP packet
80009514:	c7 d8       	rjmp	8000960e <udd_ctrl_setup_received+0x12e>
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
80009516:	fc 18 e0 00 	movh	r8,0xe000
8000951a:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < 8; i++) {
8000951e:	30 08       	mov	r8,0
80009520:	ef 68 ff fb 	st.b	r7[-5],r8
80009524:	c1 38       	rjmp	8000954a <udd_ctrl_setup_received+0x6a>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80009526:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000952a:	4b f8       	lddpc	r8,80009624 <udd_ctrl_setup_received+0x144>
8000952c:	10 09       	add	r9,r8
8000952e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009532:	11 88       	ld.ub	r8,r8[0x0]
80009534:	b2 88       	st.b	r9[0x0],r8
80009536:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000953a:	2f f8       	sub	r8,-1
8000953c:	ef 48 ff fc 	st.w	r7[-4],r8
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80009540:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80009544:	2f f8       	sub	r8,-1
80009546:	ef 68 ff fb 	st.b	r7[-5],r8
8000954a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000954e:	30 78       	mov	r8,7
80009550:	f0 09 18 00 	cp.b	r9,r8
80009554:	fe 98 ff e9 	brls	80009526 <udd_ctrl_setup_received+0x46>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80009558:	4b 38       	lddpc	r8,80009624 <udd_ctrl_setup_received+0x144>
8000955a:	90 18       	ld.sh	r8,r8[0x2]
8000955c:	5c 88       	casts.h	r8
8000955e:	5c c8       	swap.bh	r8
80009560:	5c 88       	casts.h	r8
80009562:	4b 19       	lddpc	r9,80009624 <udd_ctrl_setup_received+0x144>
80009564:	b2 18       	st.h	r9[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80009566:	4b 08       	lddpc	r8,80009624 <udd_ctrl_setup_received+0x144>
80009568:	90 28       	ld.sh	r8,r8[0x4]
8000956a:	5c 88       	casts.h	r8
8000956c:	5c c8       	swap.bh	r8
8000956e:	5c 88       	casts.h	r8
80009570:	4a d9       	lddpc	r9,80009624 <udd_ctrl_setup_received+0x144>
80009572:	b2 28       	st.h	r9[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80009574:	4a c8       	lddpc	r8,80009624 <udd_ctrl_setup_received+0x144>
80009576:	90 38       	ld.sh	r8,r8[0x6]
80009578:	5c 88       	casts.h	r8
8000957a:	5c c8       	swap.bh	r8
8000957c:	5c 88       	casts.h	r8
8000957e:	4a a9       	lddpc	r9,80009624 <udd_ctrl_setup_received+0x144>
80009580:	b2 38       	st.h	r9[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
80009582:	f0 1f 00 2a 	mcall	80009628 <udd_ctrl_setup_received+0x148>
80009586:	18 98       	mov	r8,r12
80009588:	ec 18 00 01 	eorl	r8,0x1
8000958c:	5c 58       	castu.b	r8
8000958e:	c0 80       	breq	8000959e <udd_ctrl_setup_received+0xbe>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
80009590:	f0 1f 00 24 	mcall	80009620 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
80009594:	fe 68 01 60 	mov	r8,-130720
80009598:	30 49       	mov	r9,4
8000959a:	91 09       	st.w	r8[0x0],r9
		return;
8000959c:	c3 98       	rjmp	8000960e <udd_ctrl_setup_received+0x12e>
	}
	udd_ack_setup_received(0);
8000959e:	fe 68 01 60 	mov	r8,-130720
800095a2:	30 49       	mov	r9,4
800095a4:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
800095a6:	4a 08       	lddpc	r8,80009624 <udd_ctrl_setup_received+0x144>
800095a8:	11 88       	ld.ub	r8,r8[0x0]
800095aa:	10 99       	mov	r9,r8
800095ac:	30 08       	mov	r8,0
800095ae:	f0 09 18 00 	cp.b	r9,r8
800095b2:	c0 d4       	brge	800095cc <udd_ctrl_setup_received+0xec>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800095b4:	49 e9       	lddpc	r9,8000962c <udd_ctrl_setup_received+0x14c>
800095b6:	30 08       	mov	r8,0
800095b8:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
800095ba:	49 e9       	lddpc	r9,80009630 <udd_ctrl_setup_received+0x150>
800095bc:	30 08       	mov	r8,0
800095be:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
800095c0:	49 58       	lddpc	r8,80009614 <udd_ctrl_setup_received+0x134>
800095c2:	30 29       	mov	r9,2
800095c4:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
800095c6:	f0 1f 00 1c 	mcall	80009634 <udd_ctrl_setup_received+0x154>
800095ca:	c2 28       	rjmp	8000960e <udd_ctrl_setup_received+0x12e>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
800095cc:	49 68       	lddpc	r8,80009624 <udd_ctrl_setup_received+0x144>
800095ce:	90 38       	ld.sh	r8,r8[0x6]
800095d0:	58 08       	cp.w	r8,0
800095d2:	c0 41       	brne	800095da <udd_ctrl_setup_received+0xfa>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
800095d4:	f0 1f 00 19 	mcall	80009638 <udd_ctrl_setup_received+0x158>
			return;
800095d8:	c1 b8       	rjmp	8000960e <udd_ctrl_setup_received+0x12e>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800095da:	49 59       	lddpc	r9,8000962c <udd_ctrl_setup_received+0x14c>
800095dc:	30 08       	mov	r8,0
800095de:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
800095e0:	49 49       	lddpc	r9,80009630 <udd_ctrl_setup_received+0x150>
800095e2:	30 08       	mov	r8,0
800095e4:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
800095e6:	48 c8       	lddpc	r8,80009614 <udd_ctrl_setup_received+0x134>
800095e8:	30 19       	mov	r9,1
800095ea:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
800095ec:	fe 68 01 60 	mov	r8,-130720
800095f0:	31 09       	mov	r9,16
800095f2:	91 09       	st.w	r8[0x0],r9
		flags = cpu_irq_save();
800095f4:	f0 1f 00 12 	mcall	8000963c <udd_ctrl_setup_received+0x15c>
800095f8:	18 98       	mov	r8,r12
800095fa:	ef 48 ff f4 	st.w	r7[-12],r8
		udd_enable_nak_in_interrupt(0);
800095fe:	fe 68 01 f0 	mov	r8,-130576
80009602:	31 09       	mov	r9,16
80009604:	91 09       	st.w	r8[0x0],r9
		cpu_irq_restore(flags);
80009606:	ee fc ff f4 	ld.w	r12,r7[-12]
8000960a:	f0 1f 00 0e 	mcall	80009640 <udd_ctrl_setup_received+0x160>
	}
}
8000960e:	2f dd       	sub	sp,-12
80009610:	e3 cd 80 80 	ldm	sp++,r7,pc
80009614:	00 00       	add	r0,r0
80009616:	06 60       	and	r0,r3
80009618:	80 00       	ld.sh	r0,r0[0x0]
8000961a:	9b 08       	st.w	sp[0x0],r8
8000961c:	80 00       	ld.sh	r0,r0[0x0]
8000961e:	94 88       	ld.uh	r8,r10[0x0]
80009620:	80 00       	ld.sh	r0,r0[0x0]
80009622:	9a 50       	ld.sh	r0,sp[0xa]
80009624:	00 00       	add	r0,r0
80009626:	0b c8       	ld.ub	r8,r5[0x4]
80009628:	80 00       	ld.sh	r0,r0[0x0]
8000962a:	c8 e0       	breq	80009546 <udd_ctrl_setup_received+0x66>
8000962c:	00 00       	add	r0,r0
8000962e:	06 64       	and	r4,r3
80009630:	00 00       	add	r0,r0
80009632:	06 66       	and	r6,r3
80009634:	80 00       	ld.sh	r0,r0[0x0]
80009636:	96 44       	ld.sh	r4,r11[0x8]
80009638:	80 00       	ld.sh	r0,r0[0x0]
8000963a:	9a 70       	ld.sh	r0,sp[0xe]
8000963c:	80 00       	ld.sh	r0,r0[0x0]
8000963e:	83 10       	st.w	r1[0x4],r0
80009640:	80 00       	ld.sh	r0,r0[0x0]
80009642:	83 2e       	st.w	r1[0x8],lr

80009644 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
80009644:	eb cd 40 80 	pushm	r7,lr
80009648:	1a 97       	mov	r7,sp
8000964a:	20 4d       	sub	sp,16
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
8000964c:	f0 1f 00 5c 	mcall	800097bc <udd_ctrl_in_sent+0x178>
80009650:	18 98       	mov	r8,r12
80009652:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_disable_in_send_interrupt(0);
80009656:	fe 68 02 20 	mov	r8,-130528
8000965a:	30 19       	mov	r9,1
8000965c:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000965e:	ee fc ff fc 	ld.w	r12,r7[-4]
80009662:	f0 1f 00 58 	mcall	800097c0 <udd_ctrl_in_sent+0x17c>

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80009666:	4d 88       	lddpc	r8,800097c4 <udd_ctrl_in_sent+0x180>
80009668:	70 08       	ld.w	r8,r8[0x0]
8000966a:	58 38       	cp.w	r8,3
8000966c:	c0 61       	brne	80009678 <udd_ctrl_in_sent+0x34>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
8000966e:	f0 1f 00 57 	mcall	800097c8 <udd_ctrl_in_sent+0x184>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80009672:	f0 1f 00 57 	mcall	800097cc <udd_ctrl_in_sent+0x188>
		return;
80009676:	c9 f8       	rjmp	800097b4 <udd_ctrl_in_sent+0x170>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
80009678:	4d 68       	lddpc	r8,800097d0 <udd_ctrl_in_sent+0x18c>
8000967a:	90 69       	ld.sh	r9,r8[0xc]
8000967c:	4d 68       	lddpc	r8,800097d4 <udd_ctrl_in_sent+0x190>
8000967e:	90 08       	ld.sh	r8,r8[0x0]
80009680:	10 19       	sub	r9,r8
80009682:	ef 59 ff f0 	st.h	r7[-16],r9
	if (0 == nb_remain) {
80009686:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000968a:	30 08       	mov	r8,0
8000968c:	f0 09 19 00 	cp.h	r9,r8
80009690:	c2 b1       	brne	800096e6 <udd_ctrl_in_sent+0xa2>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80009692:	4d 28       	lddpc	r8,800097d8 <udd_ctrl_in_sent+0x194>
80009694:	90 09       	ld.sh	r9,r8[0x0]
80009696:	4d 08       	lddpc	r8,800097d4 <udd_ctrl_in_sent+0x190>
80009698:	90 08       	ld.sh	r8,r8[0x0]
8000969a:	f2 08 00 08 	add	r8,r9,r8
8000969e:	5c 88       	casts.h	r8
800096a0:	4c e9       	lddpc	r9,800097d8 <udd_ctrl_in_sent+0x194>
800096a2:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
800096a4:	4c b8       	lddpc	r8,800097d0 <udd_ctrl_in_sent+0x18c>
800096a6:	90 39       	ld.sh	r9,r8[0x6]
800096a8:	4c c8       	lddpc	r8,800097d8 <udd_ctrl_in_sent+0x194>
800096aa:	90 08       	ld.sh	r8,r8[0x0]
800096ac:	f0 09 19 00 	cp.h	r9,r8
800096b0:	c0 50       	breq	800096ba <udd_ctrl_in_sent+0x76>
800096b2:	4c b8       	lddpc	r8,800097dc <udd_ctrl_in_sent+0x198>
800096b4:	11 88       	ld.ub	r8,r8[0x0]
800096b6:	58 08       	cp.w	r8,0
800096b8:	c0 40       	breq	800096c0 <udd_ctrl_in_sent+0x7c>
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
800096ba:	f0 1f 00 4a 	mcall	800097e0 <udd_ctrl_in_sent+0x19c>
			return;
800096be:	c7 b8       	rjmp	800097b4 <udd_ctrl_in_sent+0x170>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
800096c0:	4c 48       	lddpc	r8,800097d0 <udd_ctrl_in_sent+0x18c>
800096c2:	70 58       	ld.w	r8,r8[0x14]
800096c4:	58 08       	cp.w	r8,0
800096c6:	c1 00       	breq	800096e6 <udd_ctrl_in_sent+0xa2>
800096c8:	4c 28       	lddpc	r8,800097d0 <udd_ctrl_in_sent+0x18c>
800096ca:	70 58       	ld.w	r8,r8[0x14]
800096cc:	5d 18       	icall	r8
800096ce:	18 98       	mov	r8,r12
800096d0:	ec 18 00 01 	eorl	r8,0x1
800096d4:	5c 58       	castu.b	r8
800096d6:	c0 81       	brne	800096e6 <udd_ctrl_in_sent+0xa2>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
800096d8:	4b f9       	lddpc	r9,800097d4 <udd_ctrl_in_sent+0x190>
800096da:	30 08       	mov	r8,0
800096dc:	b2 08       	st.h	r9[0x0],r8
			nb_remain = udd_g_ctrlreq.payload_size;
800096de:	4b d8       	lddpc	r8,800097d0 <udd_ctrl_in_sent+0x18c>
800096e0:	90 68       	ld.sh	r8,r8[0xc]
800096e2:	ef 58 ff f0 	st.h	r7[-16],r8
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
800096e6:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800096ea:	33 f8       	mov	r8,63
800096ec:	f0 09 19 00 	cp.h	r9,r8
800096f0:	e0 88 00 09 	brls	80009702 <udd_ctrl_in_sent+0xbe>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
800096f4:	34 08       	mov	r8,64
800096f6:	ef 58 ff f0 	st.h	r7[-16],r8
		b_shortpacket = false;
800096fa:	4b 99       	lddpc	r9,800097dc <udd_ctrl_in_sent+0x198>
800096fc:	30 08       	mov	r8,0
800096fe:	b2 88       	st.b	r9[0x0],r8
80009700:	c0 48       	rjmp	80009708 <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
80009702:	4b 79       	lddpc	r9,800097dc <udd_ctrl_in_sent+0x198>
80009704:	30 18       	mov	r8,1
80009706:	b2 88       	st.b	r9[0x0],r8
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
80009708:	fc 18 e0 00 	movh	r8,0xe000
8000970c:	ef 48 ff f4 	st.w	r7[-12],r8
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80009710:	4b 08       	lddpc	r8,800097d0 <udd_ctrl_in_sent+0x18c>
80009712:	70 29       	ld.w	r9,r8[0x8]
80009714:	4b 08       	lddpc	r8,800097d4 <udd_ctrl_in_sent+0x190>
80009716:	90 08       	ld.sh	r8,r8[0x0]
80009718:	5c 78       	castu.h	r8
8000971a:	f2 08 00 08 	add	r8,r9,r8
8000971e:	ef 48 ff f8 	st.w	r7[-8],r8
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
80009722:	f0 1f 00 27 	mcall	800097bc <udd_ctrl_in_sent+0x178>
80009726:	18 98       	mov	r8,r12
80009728:	ef 48 ff fc 	st.w	r7[-4],r8
	if (Is_udd_out_received(0)) {
8000972c:	fe 68 01 30 	mov	r8,-130768
80009730:	70 08       	ld.w	r8,r8[0x0]
80009732:	e2 18 00 02 	andl	r8,0x2,COH
80009736:	c0 90       	breq	80009748 <udd_ctrl_in_sent+0x104>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
80009738:	ee fc ff fc 	ld.w	r12,r7[-4]
8000973c:	f0 1f 00 21 	mcall	800097c0 <udd_ctrl_in_sent+0x17c>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80009740:	4a 18       	lddpc	r8,800097c4 <udd_ctrl_in_sent+0x180>
80009742:	30 49       	mov	r9,4
80009744:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
80009746:	c3 78       	rjmp	800097b4 <udd_ctrl_in_sent+0x170>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80009748:	30 08       	mov	r8,0
8000974a:	ef 68 ff f3 	st.b	r7[-13],r8
8000974e:	c1 68       	rjmp	8000977a <udd_ctrl_in_sent+0x136>
		*ptr_dest++ = *ptr_src++;
80009750:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009754:	11 88       	ld.ub	r8,r8[0x0]
80009756:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000975a:	b2 88       	st.b	r9[0x0],r8
8000975c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009760:	2f f8       	sub	r8,-1
80009762:	ef 48 ff f4 	st.w	r7[-12],r8
80009766:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000976a:	2f f8       	sub	r8,-1
8000976c:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80009770:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80009774:	2f f8       	sub	r8,-1
80009776:	ef 68 ff f3 	st.b	r7[-13],r8
8000977a:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000977e:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80009782:	f0 09 19 00 	cp.h	r9,r8
80009786:	fe 9b ff e5 	brhi	80009750 <udd_ctrl_in_sent+0x10c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
8000978a:	49 38       	lddpc	r8,800097d4 <udd_ctrl_in_sent+0x190>
8000978c:	90 08       	ld.sh	r8,r8[0x0]
8000978e:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80009792:	f2 08 00 08 	add	r8,r9,r8
80009796:	5c 88       	casts.h	r8
80009798:	48 f9       	lddpc	r9,800097d4 <udd_ctrl_in_sent+0x190>
8000979a:	b2 08       	st.h	r9[0x0],r8

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
8000979c:	fe 68 01 60 	mov	r8,-130720
800097a0:	30 19       	mov	r9,1
800097a2:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
800097a4:	fe 68 01 f0 	mov	r8,-130576
800097a8:	30 19       	mov	r9,1
800097aa:	91 09       	st.w	r8[0x0],r9
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
800097ac:	ee fc ff fc 	ld.w	r12,r7[-4]
800097b0:	f0 1f 00 04 	mcall	800097c0 <udd_ctrl_in_sent+0x17c>
}
800097b4:	2f cd       	sub	sp,-16
800097b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800097ba:	00 00       	add	r0,r0
800097bc:	80 00       	ld.sh	r0,r0[0x0]
800097be:	83 10       	st.w	r1[0x4],r0
800097c0:	80 00       	ld.sh	r0,r0[0x0]
800097c2:	83 2e       	st.w	r1[0x8],lr
800097c4:	00 00       	add	r0,r0
800097c6:	06 60       	and	r0,r3
800097c8:	80 00       	ld.sh	r0,r0[0x0]
800097ca:	9b 08       	st.w	sp[0x0],r8
800097cc:	80 00       	ld.sh	r0,r0[0x0]
800097ce:	94 88       	ld.uh	r8,r10[0x0]
800097d0:	00 00       	add	r0,r0
800097d2:	0b c8       	ld.ub	r8,r5[0x4]
800097d4:	00 00       	add	r0,r0
800097d6:	06 66       	and	r6,r3
800097d8:	00 00       	add	r0,r0
800097da:	06 64       	and	r4,r3
800097dc:	00 00       	add	r0,r0
800097de:	06 90       	mov	r0,r3
800097e0:	80 00       	ld.sh	r0,r0[0x0]
800097e2:	9a c4       	ld.uh	r4,sp[0x8]

800097e4 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
800097e4:	eb cd 40 80 	pushm	r7,lr
800097e8:	1a 97       	mov	r7,sp
800097ea:	20 4d       	sub	sp,16
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
800097ec:	4f 18       	lddpc	r8,800099b0 <udd_ctrl_out_received+0x1cc>
800097ee:	70 08       	ld.w	r8,r8[0x0]
800097f0:	58 18       	cp.w	r8,1
800097f2:	c1 10       	breq	80009814 <udd_ctrl_out_received+0x30>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
800097f4:	4e f8       	lddpc	r8,800099b0 <udd_ctrl_out_received+0x1cc>
800097f6:	70 08       	ld.w	r8,r8[0x0]
800097f8:	58 28       	cp.w	r8,2
800097fa:	c0 50       	breq	80009804 <udd_ctrl_out_received+0x20>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
800097fc:	4e d8       	lddpc	r8,800099b0 <udd_ctrl_out_received+0x1cc>
800097fe:	70 08       	ld.w	r8,r8[0x0]
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80009800:	58 48       	cp.w	r8,4
80009802:	c0 41       	brne	8000980a <udd_ctrl_out_received+0x26>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
80009804:	f0 1f 00 6c 	mcall	800099b4 <udd_ctrl_out_received+0x1d0>
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80009808:	c0 38       	rjmp	8000980e <udd_ctrl_out_received+0x2a>
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
8000980a:	f0 1f 00 6c 	mcall	800099b8 <udd_ctrl_out_received+0x1d4>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000980e:	f0 1f 00 6c 	mcall	800099bc <udd_ctrl_out_received+0x1d8>
		return;
80009812:	cc b8       	rjmp	800099a8 <udd_ctrl_out_received+0x1c4>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80009814:	fe 68 01 30 	mov	r8,-130768
80009818:	70 08       	ld.w	r8,r8[0x0]
8000981a:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000981e:	b5 88       	lsr	r8,0x14
80009820:	ef 58 ff f6 	st.h	r7[-10],r8
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80009824:	4e 78       	lddpc	r8,800099c0 <udd_ctrl_out_received+0x1dc>
80009826:	90 68       	ld.sh	r8,r8[0xc]
80009828:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000982c:	4e 68       	lddpc	r8,800099c4 <udd_ctrl_out_received+0x1e0>
8000982e:	90 08       	ld.sh	r8,r8[0x0]
80009830:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80009834:	ef 18 ff f6 	ld.uh	r8,r7[-10]
80009838:	f4 08 00 08 	add	r8,r10,r8
8000983c:	10 39       	cp.w	r9,r8
8000983e:	c0 84       	brge	8000984e <udd_ctrl_out_received+0x6a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80009840:	4e 08       	lddpc	r8,800099c0 <udd_ctrl_out_received+0x1dc>
80009842:	90 69       	ld.sh	r9,r8[0xc]
80009844:	4e 08       	lddpc	r8,800099c4 <udd_ctrl_out_received+0x1e0>
80009846:	90 08       	ld.sh	r8,r8[0x0]
80009848:	10 19       	sub	r9,r8
8000984a:	ef 59 ff f6 	st.h	r7[-10],r9
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000984e:	fc 18 e0 00 	movh	r8,0xe000
80009852:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80009856:	4d b8       	lddpc	r8,800099c0 <udd_ctrl_out_received+0x1dc>
80009858:	70 29       	ld.w	r9,r8[0x8]
8000985a:	4d b8       	lddpc	r8,800099c4 <udd_ctrl_out_received+0x1e0>
8000985c:	90 08       	ld.sh	r8,r8[0x0]
8000985e:	5c 78       	castu.h	r8
80009860:	f2 08 00 08 	add	r8,r9,r8
80009864:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < nb_data; i++) {
80009868:	30 08       	mov	r8,0
8000986a:	ef 68 ff f5 	st.b	r7[-11],r8
8000986e:	c1 68       	rjmp	8000989a <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = *ptr_src++;
80009870:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009874:	11 88       	ld.ub	r8,r8[0x0]
80009876:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000987a:	b2 88       	st.b	r9[0x0],r8
8000987c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009880:	2f f8       	sub	r8,-1
80009882:	ef 48 ff fc 	st.w	r7[-4],r8
80009886:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000988a:	2f f8       	sub	r8,-1
8000988c:	ef 48 ff f8 	st.w	r7[-8],r8
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80009890:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80009894:	2f f8       	sub	r8,-1
80009896:	ef 68 ff f5 	st.b	r7[-11],r8
8000989a:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000989e:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800098a2:	f0 09 19 00 	cp.h	r9,r8
800098a6:	fe 9b ff e5 	brhi	80009870 <udd_ctrl_out_received+0x8c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800098aa:	4c 78       	lddpc	r8,800099c4 <udd_ctrl_out_received+0x1e0>
800098ac:	90 08       	ld.sh	r8,r8[0x0]
800098ae:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800098b2:	f2 08 00 08 	add	r8,r9,r8
800098b6:	5c 88       	casts.h	r8
800098b8:	4c 39       	lddpc	r9,800099c4 <udd_ctrl_out_received+0x1e0>
800098ba:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
800098bc:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800098c0:	34 08       	mov	r8,64
800098c2:	f0 09 19 00 	cp.h	r9,r8
800098c6:	c1 11       	brne	800098e8 <udd_ctrl_out_received+0x104>
			|| (udd_g_ctrlreq.req.wLength <=
800098c8:	4b e8       	lddpc	r8,800099c0 <udd_ctrl_out_received+0x1dc>
800098ca:	90 38       	ld.sh	r8,r8[0x6]
800098cc:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
					(udd_ctrl_prev_payload_nb_trans +
800098d0:	4b e8       	lddpc	r8,800099c8 <udd_ctrl_out_received+0x1e4>
800098d2:	90 08       	ld.sh	r8,r8[0x0]
800098d4:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800098d8:	4b b8       	lddpc	r8,800099c4 <udd_ctrl_out_received+0x1e0>
800098da:	90 08       	ld.sh	r8,r8[0x0]
800098dc:	5c 78       	castu.h	r8
800098de:	f4 08 00 08 	add	r8,r10,r8
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
800098e2:	10 39       	cp.w	r9,r8
800098e4:	e0 89 00 20 	brgt	80009924 <udd_ctrl_out_received+0x140>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
800098e8:	4b 78       	lddpc	r8,800099c4 <udd_ctrl_out_received+0x1e0>
800098ea:	90 08       	ld.sh	r8,r8[0x0]
800098ec:	4b 59       	lddpc	r9,800099c0 <udd_ctrl_out_received+0x1dc>
800098ee:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
800098f0:	4b 48       	lddpc	r8,800099c0 <udd_ctrl_out_received+0x1dc>
800098f2:	70 58       	ld.w	r8,r8[0x14]
800098f4:	58 08       	cp.w	r8,0
800098f6:	c1 00       	breq	80009916 <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
800098f8:	4b 28       	lddpc	r8,800099c0 <udd_ctrl_out_received+0x1dc>
800098fa:	70 58       	ld.w	r8,r8[0x14]
800098fc:	5d 18       	icall	r8
800098fe:	18 98       	mov	r8,r12
80009900:	ec 18 00 01 	eorl	r8,0x1
80009904:	5c 58       	castu.b	r8
80009906:	c0 80       	breq	80009916 <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
80009908:	f0 1f 00 2c 	mcall	800099b8 <udd_ctrl_out_received+0x1d4>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
8000990c:	fe 68 01 60 	mov	r8,-130720
80009910:	30 29       	mov	r9,2
80009912:	91 09       	st.w	r8[0x0],r9
				return;
80009914:	c4 a8       	rjmp	800099a8 <udd_ctrl_out_received+0x1c4>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80009916:	fe 68 01 60 	mov	r8,-130720
8000991a:	30 29       	mov	r9,2
8000991c:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
8000991e:	f0 1f 00 2c 	mcall	800099cc <udd_ctrl_out_received+0x1e8>
		return;
80009922:	c4 38       	rjmp	800099a8 <udd_ctrl_out_received+0x1c4>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80009924:	4a 78       	lddpc	r8,800099c0 <udd_ctrl_out_received+0x1dc>
80009926:	90 69       	ld.sh	r9,r8[0xc]
80009928:	4a 78       	lddpc	r8,800099c4 <udd_ctrl_out_received+0x1e0>
8000992a:	90 08       	ld.sh	r8,r8[0x0]
8000992c:	f0 09 19 00 	cp.h	r9,r8
80009930:	c2 71       	brne	8000997e <udd_ctrl_out_received+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80009932:	4a 48       	lddpc	r8,800099c0 <udd_ctrl_out_received+0x1dc>
80009934:	70 58       	ld.w	r8,r8[0x14]
80009936:	58 08       	cp.w	r8,0
80009938:	c0 81       	brne	80009948 <udd_ctrl_out_received+0x164>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
8000993a:	f0 1f 00 20 	mcall	800099b8 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000993e:	fe 68 01 60 	mov	r8,-130720
80009942:	30 29       	mov	r9,2
80009944:	91 09       	st.w	r8[0x0],r9
			return;
80009946:	c3 18       	rjmp	800099a8 <udd_ctrl_out_received+0x1c4>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80009948:	49 e8       	lddpc	r8,800099c0 <udd_ctrl_out_received+0x1dc>
8000994a:	70 58       	ld.w	r8,r8[0x14]
8000994c:	5d 18       	icall	r8
8000994e:	18 98       	mov	r8,r12
80009950:	ec 18 00 01 	eorl	r8,0x1
80009954:	5c 58       	castu.b	r8
80009956:	c0 80       	breq	80009966 <udd_ctrl_out_received+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80009958:	f0 1f 00 18 	mcall	800099b8 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000995c:	fe 68 01 60 	mov	r8,-130720
80009960:	30 29       	mov	r9,2
80009962:	91 09       	st.w	r8[0x0],r9
			return;
80009964:	c2 28       	rjmp	800099a8 <udd_ctrl_out_received+0x1c4>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80009966:	49 98       	lddpc	r8,800099c8 <udd_ctrl_out_received+0x1e4>
80009968:	90 09       	ld.sh	r9,r8[0x0]
8000996a:	49 78       	lddpc	r8,800099c4 <udd_ctrl_out_received+0x1e0>
8000996c:	90 08       	ld.sh	r8,r8[0x0]
8000996e:	f2 08 00 08 	add	r8,r9,r8
80009972:	5c 88       	casts.h	r8
80009974:	49 59       	lddpc	r9,800099c8 <udd_ctrl_out_received+0x1e4>
80009976:	b2 08       	st.h	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80009978:	49 39       	lddpc	r9,800099c4 <udd_ctrl_out_received+0x1e0>
8000997a:	30 08       	mov	r8,0
8000997c:	b2 08       	st.h	r9[0x0],r8
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
8000997e:	fe 68 01 60 	mov	r8,-130720
80009982:	30 29       	mov	r9,2
80009984:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80009986:	fe 68 01 60 	mov	r8,-130720
8000998a:	31 09       	mov	r9,16
8000998c:	91 09       	st.w	r8[0x0],r9
	flags = cpu_irq_save();
8000998e:	f0 1f 00 11 	mcall	800099d0 <udd_ctrl_out_received+0x1ec>
80009992:	18 98       	mov	r8,r12
80009994:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_enable_nak_in_interrupt(0);
80009998:	fe 68 01 f0 	mov	r8,-130576
8000999c:	31 09       	mov	r9,16
8000999e:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
800099a0:	ee fc ff f0 	ld.w	r12,r7[-16]
800099a4:	f0 1f 00 0c 	mcall	800099d4 <udd_ctrl_out_received+0x1f0>
}
800099a8:	2f cd       	sub	sp,-16
800099aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800099ae:	00 00       	add	r0,r0
800099b0:	00 00       	add	r0,r0
800099b2:	06 60       	and	r0,r3
800099b4:	80 00       	ld.sh	r0,r0[0x0]
800099b6:	9b 08       	st.w	sp[0x0],r8
800099b8:	80 00       	ld.sh	r0,r0[0x0]
800099ba:	9a 50       	ld.sh	r0,sp[0xa]
800099bc:	80 00       	ld.sh	r0,r0[0x0]
800099be:	94 88       	ld.uh	r8,r10[0x0]
800099c0:	00 00       	add	r0,r0
800099c2:	0b c8       	ld.ub	r8,r5[0x4]
800099c4:	00 00       	add	r0,r0
800099c6:	06 66       	and	r6,r3
800099c8:	00 00       	add	r0,r0
800099ca:	06 64       	and	r4,r3
800099cc:	80 00       	ld.sh	r0,r0[0x0]
800099ce:	9a 70       	ld.sh	r0,sp[0xe]
800099d0:	80 00       	ld.sh	r0,r0[0x0]
800099d2:	83 10       	st.w	r1[0x4],r0
800099d4:	80 00       	ld.sh	r0,r0[0x0]
800099d6:	83 2e       	st.w	r1[0x8],lr

800099d8 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
800099d8:	eb cd 40 80 	pushm	r7,lr
800099dc:	1a 97       	mov	r7,sp
	if (Is_udd_out_received(0))
800099de:	fe 68 01 30 	mov	r8,-130768
800099e2:	70 08       	ld.w	r8,r8[0x0]
800099e4:	e2 18 00 02 	andl	r8,0x2,COH
800099e8:	c1 21       	brne	80009a0c <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
800099ea:	48 b8       	lddpc	r8,80009a14 <udd_ctrl_underflow+0x3c>
800099ec:	70 08       	ld.w	r8,r8[0x0]
800099ee:	58 18       	cp.w	r8,1
800099f0:	c0 41       	brne	800099f8 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
800099f2:	f0 1f 00 0a 	mcall	80009a18 <udd_ctrl_underflow+0x40>
800099f6:	c0 c8       	rjmp	80009a0e <udd_ctrl_underflow+0x36>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
800099f8:	48 78       	lddpc	r8,80009a14 <udd_ctrl_underflow+0x3c>
800099fa:	70 08       	ld.w	r8,r8[0x0]
800099fc:	58 48       	cp.w	r8,4
800099fe:	c0 81       	brne	80009a0e <udd_ctrl_underflow+0x36>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80009a00:	fe 68 01 f0 	mov	r8,-130576
80009a04:	e8 69 00 00 	mov	r9,524288
80009a08:	91 09       	st.w	r8[0x0],r9
80009a0a:	c0 28       	rjmp	80009a0e <udd_ctrl_underflow+0x36>


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
		return; // underflow ignored if OUT data is received
80009a0c:	d7 03       	nop
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
	}
}
80009a0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a12:	00 00       	add	r0,r0
80009a14:	00 00       	add	r0,r0
80009a16:	06 60       	and	r0,r3
80009a18:	80 00       	ld.sh	r0,r0[0x0]
80009a1a:	9a 70       	ld.sh	r0,sp[0xe]

80009a1c <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
80009a1c:	eb cd 40 80 	pushm	r7,lr
80009a20:	1a 97       	mov	r7,sp
	if (Is_udd_in_send(0))
80009a22:	fe 68 01 30 	mov	r8,-130768
80009a26:	70 08       	ld.w	r8,r8[0x0]
80009a28:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009a2c:	5c 58       	castu.b	r8
80009a2e:	c0 b1       	brne	80009a44 <udd_ctrl_overflow+0x28>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80009a30:	48 78       	lddpc	r8,80009a4c <udd_ctrl_overflow+0x30>
80009a32:	70 08       	ld.w	r8,r8[0x0]
80009a34:	58 38       	cp.w	r8,3
80009a36:	c0 81       	brne	80009a46 <udd_ctrl_overflow+0x2a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80009a38:	fe 68 01 f0 	mov	r8,-130576
80009a3c:	e8 69 00 00 	mov	r9,524288
80009a40:	91 09       	st.w	r8[0x0],r9
80009a42:	c0 28       	rjmp	80009a46 <udd_ctrl_overflow+0x2a>


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
		return; // overflow ignored if IN data is received
80009a44:	d7 03       	nop
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
80009a46:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a4a:	00 00       	add	r0,r0
80009a4c:	00 00       	add	r0,r0
80009a4e:	06 60       	and	r0,r3

80009a50 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
80009a50:	eb cd 40 80 	pushm	r7,lr
80009a54:	1a 97       	mov	r7,sp
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80009a56:	48 68       	lddpc	r8,80009a6c <udd_ctrl_stall_data+0x1c>
80009a58:	30 59       	mov	r9,5
80009a5a:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80009a5c:	fe 68 01 f0 	mov	r8,-130576
80009a60:	e8 69 00 00 	mov	r9,524288
80009a64:	91 09       	st.w	r8[0x0],r9
}
80009a66:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a6a:	00 00       	add	r0,r0
80009a6c:	00 00       	add	r0,r0
80009a6e:	06 60       	and	r0,r3

80009a70 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
80009a70:	eb cd 40 80 	pushm	r7,lr
80009a74:	1a 97       	mov	r7,sp
80009a76:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80009a78:	49 08       	lddpc	r8,80009ab8 <udd_ctrl_send_zlp_in+0x48>
80009a7a:	30 39       	mov	r9,3
80009a7c:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
80009a7e:	f0 1f 00 10 	mcall	80009abc <udd_ctrl_send_zlp_in+0x4c>
80009a82:	18 98       	mov	r8,r12
80009a84:	ef 48 ff fc 	st.w	r7[-4],r8
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80009a88:	fe 68 01 60 	mov	r8,-130720
80009a8c:	30 19       	mov	r9,1
80009a8e:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
80009a90:	fe 68 01 f0 	mov	r8,-130576
80009a94:	30 19       	mov	r9,1
80009a96:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80009a98:	fe 68 01 60 	mov	r8,-130720
80009a9c:	30 89       	mov	r9,8
80009a9e:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_out_interrupt(0);
80009aa0:	fe 68 01 f0 	mov	r8,-130576
80009aa4:	30 89       	mov	r9,8
80009aa6:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009aa8:	ee fc ff fc 	ld.w	r12,r7[-4]
80009aac:	f0 1f 00 05 	mcall	80009ac0 <udd_ctrl_send_zlp_in+0x50>
}
80009ab0:	2f fd       	sub	sp,-4
80009ab2:	e3 cd 80 80 	ldm	sp++,r7,pc
80009ab6:	00 00       	add	r0,r0
80009ab8:	00 00       	add	r0,r0
80009aba:	06 60       	and	r0,r3
80009abc:	80 00       	ld.sh	r0,r0[0x0]
80009abe:	83 10       	st.w	r1[0x4],r0
80009ac0:	80 00       	ld.sh	r0,r0[0x0]
80009ac2:	83 2e       	st.w	r1[0x8],lr

80009ac4 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
80009ac4:	eb cd 40 80 	pushm	r7,lr
80009ac8:	1a 97       	mov	r7,sp
80009aca:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80009acc:	48 c8       	lddpc	r8,80009afc <udd_ctrl_send_zlp_out+0x38>
80009ace:	30 49       	mov	r9,4
80009ad0:	91 09       	st.w	r8[0x0],r9
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
80009ad2:	f0 1f 00 0c 	mcall	80009b00 <udd_ctrl_send_zlp_out+0x3c>
80009ad6:	18 98       	mov	r8,r12
80009ad8:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_ack_nak_in(0);
80009adc:	fe 68 01 60 	mov	r8,-130720
80009ae0:	31 09       	mov	r9,16
80009ae2:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_in_interrupt(0);
80009ae4:	fe 68 01 f0 	mov	r8,-130576
80009ae8:	31 09       	mov	r9,16
80009aea:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009aec:	ee fc ff fc 	ld.w	r12,r7[-4]
80009af0:	f0 1f 00 05 	mcall	80009b04 <udd_ctrl_send_zlp_out+0x40>
}
80009af4:	2f fd       	sub	sp,-4
80009af6:	e3 cd 80 80 	ldm	sp++,r7,pc
80009afa:	00 00       	add	r0,r0
80009afc:	00 00       	add	r0,r0
80009afe:	06 60       	and	r0,r3
80009b00:	80 00       	ld.sh	r0,r0[0x0]
80009b02:	83 10       	st.w	r1[0x4],r0
80009b04:	80 00       	ld.sh	r0,r0[0x0]
80009b06:	83 2e       	st.w	r1[0x8],lr

80009b08 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
80009b08:	eb cd 40 80 	pushm	r7,lr
80009b0c:	1a 97       	mov	r7,sp
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80009b0e:	48 58       	lddpc	r8,80009b20 <udd_ctrl_endofrequest+0x18>
80009b10:	70 48       	ld.w	r8,r8[0x10]
80009b12:	58 08       	cp.w	r8,0
80009b14:	c0 40       	breq	80009b1c <udd_ctrl_endofrequest+0x14>
		udd_g_ctrlreq.callback();
80009b16:	48 38       	lddpc	r8,80009b20 <udd_ctrl_endofrequest+0x18>
80009b18:	70 48       	ld.w	r8,r8[0x10]
80009b1a:	5d 18       	icall	r8
	}
}
80009b1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009b20:	00 00       	add	r0,r0
80009b22:	0b c8       	ld.ub	r8,r5[0x4]

80009b24 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
80009b24:	eb cd 40 80 	pushm	r7,lr
80009b28:	1a 97       	mov	r7,sp

	if (!Is_udd_endpoint_interrupt(0))
80009b2a:	fe 68 00 00 	mov	r8,-131072
80009b2e:	70 18       	ld.w	r8,r8[0x4]
80009b30:	e2 18 10 00 	andl	r8,0x1000,COH
80009b34:	c0 31       	brne	80009b3a <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
80009b36:	30 08       	mov	r8,0
80009b38:	c4 c8       	rjmp	80009bd0 <udd_ctrl_interrupt+0xac>

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80009b3a:	fe 68 02 20 	mov	r8,-130528
80009b3e:	31 09       	mov	r9,16
80009b40:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80009b42:	fe 68 02 20 	mov	r8,-130528
80009b46:	30 89       	mov	r9,8
80009b48:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80009b4a:	fe 68 01 30 	mov	r8,-130768
80009b4e:	70 08       	ld.w	r8,r8[0x0]
80009b50:	e2 18 00 04 	andl	r8,0x4,COH
80009b54:	c0 50       	breq	80009b5e <udd_ctrl_interrupt+0x3a>
		// SETUP packet received
		udd_ctrl_setup_received();
80009b56:	f0 1f 00 21 	mcall	80009bd8 <udd_ctrl_interrupt+0xb4>
		return true;
80009b5a:	30 18       	mov	r8,1
80009b5c:	c3 a8       	rjmp	80009bd0 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80009b5e:	fe 68 01 30 	mov	r8,-130768
80009b62:	70 08       	ld.w	r8,r8[0x0]
80009b64:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009b68:	5c 58       	castu.b	r8
80009b6a:	c0 c0       	breq	80009b82 <udd_ctrl_interrupt+0x5e>
80009b6c:	fe 68 01 c0 	mov	r8,-130624
80009b70:	70 08       	ld.w	r8,r8[0x0]
80009b72:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009b76:	5c 58       	castu.b	r8
80009b78:	c0 50       	breq	80009b82 <udd_ctrl_interrupt+0x5e>
		// IN packet sent
		udd_ctrl_in_sent();
80009b7a:	f0 1f 00 19 	mcall	80009bdc <udd_ctrl_interrupt+0xb8>
		return true;
80009b7e:	30 18       	mov	r8,1
80009b80:	c2 88       	rjmp	80009bd0 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_out_received(0)) {
80009b82:	fe 68 01 30 	mov	r8,-130768
80009b86:	70 08       	ld.w	r8,r8[0x0]
80009b88:	e2 18 00 02 	andl	r8,0x2,COH
80009b8c:	c0 50       	breq	80009b96 <udd_ctrl_interrupt+0x72>
		// OUT packet received
		udd_ctrl_out_received();
80009b8e:	f0 1f 00 15 	mcall	80009be0 <udd_ctrl_interrupt+0xbc>
		return true;
80009b92:	30 18       	mov	r8,1
80009b94:	c1 e8       	rjmp	80009bd0 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_out(0)) {
80009b96:	fe 68 01 30 	mov	r8,-130768
80009b9a:	70 08       	ld.w	r8,r8[0x0]
80009b9c:	e2 18 00 08 	andl	r8,0x8,COH
80009ba0:	c0 90       	breq	80009bb2 <udd_ctrl_interrupt+0x8e>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80009ba2:	fe 68 01 60 	mov	r8,-130720
80009ba6:	30 89       	mov	r9,8
80009ba8:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_overflow();
80009baa:	f0 1f 00 0f 	mcall	80009be4 <udd_ctrl_interrupt+0xc0>
		return true;
80009bae:	30 18       	mov	r8,1
80009bb0:	c1 08       	rjmp	80009bd0 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_in(0)) {
80009bb2:	fe 68 01 30 	mov	r8,-130768
80009bb6:	70 08       	ld.w	r8,r8[0x0]
80009bb8:	e2 18 00 10 	andl	r8,0x10,COH
80009bbc:	c0 90       	breq	80009bce <udd_ctrl_interrupt+0xaa>
		// Underflow on IN packet
		udd_ack_nak_in(0);
80009bbe:	fe 68 01 60 	mov	r8,-130720
80009bc2:	31 09       	mov	r9,16
80009bc4:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_underflow();
80009bc6:	f0 1f 00 09 	mcall	80009be8 <udd_ctrl_interrupt+0xc4>
		return true;
80009bca:	30 18       	mov	r8,1
80009bcc:	c0 28       	rjmp	80009bd0 <udd_ctrl_interrupt+0xac>
	}
	return false;
80009bce:	30 08       	mov	r8,0
}
80009bd0:	10 9c       	mov	r12,r8
80009bd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80009bd6:	00 00       	add	r0,r0
80009bd8:	80 00       	ld.sh	r0,r0[0x0]
80009bda:	94 e0       	ld.uh	r0,r10[0xc]
80009bdc:	80 00       	ld.sh	r0,r0[0x0]
80009bde:	96 44       	ld.sh	r4,r11[0x8]
80009be0:	80 00       	ld.sh	r0,r0[0x0]
80009be2:	97 e4       	st.w	r11[0x38],r4
80009be4:	80 00       	ld.sh	r0,r0[0x0]
80009be6:	9a 1c       	ld.sh	r12,sp[0x2]
80009be8:	80 00       	ld.sh	r0,r0[0x0]
80009bea:	99 d8       	st.w	r12[0x34],r8

80009bec <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
80009bec:	eb cd 40 80 	pushm	r7,lr
80009bf0:	1a 97       	mov	r7,sp
80009bf2:	20 1d       	sub	sp,4
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80009bf4:	30 08       	mov	r8,0
80009bf6:	ef 68 ff ff 	st.b	r7[-1],r8
80009bfa:	c2 28       	rjmp	80009c3e <udd_ep_job_table_reset+0x52>
		udd_ep_job[i].busy = false;
80009bfc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c00:	49 5a       	lddpc	r10,80009c54 <udd_ep_job_table_reset+0x68>
80009c02:	12 98       	mov	r8,r9
80009c04:	a3 68       	lsl	r8,0x2
80009c06:	12 08       	add	r8,r9
80009c08:	a3 68       	lsl	r8,0x2
80009c0a:	f4 08 00 09 	add	r9,r10,r8
80009c0e:	72 08       	ld.w	r8,r9[0x0]
80009c10:	30 0a       	mov	r10,0
80009c12:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80009c16:	93 08       	st.w	r9[0x0],r8
		udd_ep_job[i].stall_requested = false;
80009c18:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c1c:	48 ea       	lddpc	r10,80009c54 <udd_ep_job_table_reset+0x68>
80009c1e:	12 98       	mov	r8,r9
80009c20:	a3 68       	lsl	r8,0x2
80009c22:	12 08       	add	r8,r9
80009c24:	a3 68       	lsl	r8,0x2
80009c26:	f4 08 00 09 	add	r9,r10,r8
80009c2a:	72 08       	ld.w	r8,r9[0x0]
80009c2c:	30 0a       	mov	r10,0
80009c2e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80009c32:	93 08       	st.w	r9[0x0],r8
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80009c34:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009c38:	2f f8       	sub	r8,-1
80009c3a:	ef 68 ff ff 	st.b	r7[-1],r8
80009c3e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c42:	30 18       	mov	r8,1
80009c44:	f0 09 18 00 	cp.b	r9,r8
80009c48:	fe 98 ff da 	brls	80009bfc <udd_ep_job_table_reset+0x10>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].stall_requested = false;
	}
}
80009c4c:	2f fd       	sub	sp,-4
80009c4e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009c52:	00 00       	add	r0,r0
80009c54:	00 00       	add	r0,r0
80009c56:	06 68       	and	r8,r3

80009c58 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
80009c58:	eb cd 40 80 	pushm	r7,lr
80009c5c:	1a 97       	mov	r7,sp
80009c5e:	20 1d       	sub	sp,4
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80009c60:	30 08       	mov	r8,0
80009c62:	ef 68 ff ff 	st.b	r7[-1],r8
80009c66:	c1 98       	rjmp	80009c98 <udd_ep_job_table_kill+0x40>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
80009c68:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009c6c:	2f f8       	sub	r8,-1
80009c6e:	5c 58       	castu.b	r8
80009c70:	10 9a       	mov	r10,r8
80009c72:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c76:	12 98       	mov	r8,r9
80009c78:	a3 68       	lsl	r8,0x2
80009c7a:	12 08       	add	r8,r9
80009c7c:	a3 68       	lsl	r8,0x2
80009c7e:	10 99       	mov	r9,r8
80009c80:	48 b8       	lddpc	r8,80009cac <udd_ep_job_table_kill+0x54>
80009c82:	f2 08 00 08 	add	r8,r9,r8
80009c86:	30 1b       	mov	r11,1
80009c88:	10 9c       	mov	r12,r8
80009c8a:	f0 1f 00 0a 	mcall	80009cb0 <udd_ep_job_table_kill+0x58>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80009c8e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009c92:	2f f8       	sub	r8,-1
80009c94:	ef 68 ff ff 	st.b	r7[-1],r8
80009c98:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c9c:	30 18       	mov	r8,1
80009c9e:	f0 09 18 00 	cp.b	r9,r8
80009ca2:	fe 98 ff e3 	brls	80009c68 <udd_ep_job_table_kill+0x10>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
	}
}
80009ca6:	2f fd       	sub	sp,-4
80009ca8:	e3 cd 80 80 	ldm	sp++,r7,pc
80009cac:	00 00       	add	r0,r0
80009cae:	06 68       	and	r8,r3
80009cb0:	80 00       	ld.sh	r0,r0[0x0]
80009cb2:	9d 00       	st.w	lr[0x0],r0

80009cb4 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80009cb4:	eb cd 40 80 	pushm	r7,lr
80009cb8:	1a 97       	mov	r7,sp
80009cba:	20 1d       	sub	sp,4
80009cbc:	18 98       	mov	r8,r12
80009cbe:	ef 68 ff fc 	st.b	r7[-4],r8
	ep &= USB_EP_ADDR_MASK;
80009cc2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009cc6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009cca:	ef 68 ff fc 	st.b	r7[-4],r8

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
80009cce:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80009cd2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009cd6:	f0 c9 00 01 	sub	r9,r8,1
80009cda:	12 98       	mov	r8,r9
80009cdc:	a3 68       	lsl	r8,0x2
80009cde:	12 08       	add	r8,r9
80009ce0:	a3 68       	lsl	r8,0x2
80009ce2:	10 99       	mov	r9,r8
80009ce4:	48 58       	lddpc	r8,80009cf8 <udd_ep_abort_job+0x44>
80009ce6:	f2 08 00 08 	add	r8,r9,r8
80009cea:	30 1b       	mov	r11,1
80009cec:	10 9c       	mov	r12,r8
80009cee:	f0 1f 00 04 	mcall	80009cfc <udd_ep_abort_job+0x48>
}
80009cf2:	2f fd       	sub	sp,-4
80009cf4:	e3 cd 80 80 	ldm	sp++,r7,pc
80009cf8:	00 00       	add	r0,r0
80009cfa:	06 68       	and	r8,r3
80009cfc:	80 00       	ld.sh	r0,r0[0x0]
80009cfe:	9d 00       	st.w	lr[0x0],r0

80009d00 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
80009d00:	eb cd 40 80 	pushm	r7,lr
80009d04:	1a 97       	mov	r7,sp
80009d06:	20 3d       	sub	sp,12
80009d08:	ef 4c ff fc 	st.w	r7[-4],r12
80009d0c:	16 99       	mov	r9,r11
80009d0e:	14 98       	mov	r8,r10
80009d10:	ef 69 ff f8 	st.b	r7[-8],r9
80009d14:	ef 68 ff f4 	st.b	r7[-12],r8
	if (ptr_job->busy == false) {
80009d18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009d1c:	70 08       	ld.w	r8,r8[0x0]
80009d1e:	e6 18 80 00 	andh	r8,0x8000,COH
80009d22:	c2 b0       	breq	80009d78 <udd_ep_finish_job+0x78>
		return; // No on-going job
	}
	ptr_job->busy = false;
80009d24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009d28:	72 08       	ld.w	r8,r9[0x0]
80009d2a:	30 0a       	mov	r10,0
80009d2c:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80009d30:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans) {
80009d32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009d36:	70 48       	ld.w	r8,r8[0x10]
80009d38:	58 08       	cp.w	r8,0
80009d3a:	c2 10       	breq	80009d7c <udd_ep_finish_job+0x7c>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
80009d3c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009d40:	a3 68       	lsl	r8,0x2
80009d42:	e0 38 ff 00 	sub	r8,130816
80009d46:	70 08       	ld.w	r8,r8[0x0]
80009d48:	e2 18 01 00 	andl	r8,0x100,COH
80009d4c:	c0 90       	breq	80009d5e <udd_ep_finish_job+0x5e>
		ep_num |= USB_EP_DIR_IN;
80009d4e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009d52:	ea 18 ff ff 	orh	r8,0xffff
80009d56:	e8 18 ff 80 	orl	r8,0xff80
80009d5a:	ef 68 ff f4 	st.b	r7[-12],r8
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80009d5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009d62:	70 48       	ld.w	r8,r8[0x10]
80009d64:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80009d68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009d6c:	72 2b       	ld.w	r11,r9[0x8]
80009d6e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009d72:	12 9c       	mov	r12,r9
80009d74:	5d 18       	icall	r8
80009d76:	c0 48       	rjmp	80009d7e <udd_ep_finish_job+0x7e>


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
		return; // No on-going job
80009d78:	d7 03       	nop
80009d7a:	c0 28       	rjmp	80009d7e <udd_ep_finish_job+0x7e>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
		return; // No callback linked to job
80009d7c:	d7 03       	nop
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
80009d7e:	2f dd       	sub	sp,-12
80009d80:	e3 cd 80 80 	ldm	sp++,r7,pc

80009d84 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
80009d84:	eb cd 40 80 	pushm	r7,lr
80009d88:	1a 97       	mov	r7,sp
80009d8a:	20 5d       	sub	sp,20
80009d8c:	18 98       	mov	r8,r12
80009d8e:	ef 68 ff ec 	st.b	r7[-20],r8
	uint32_t udd_dma_ctrl = 0;
80009d92:	30 08       	mov	r8,0
80009d94:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
80009d98:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009d9c:	f0 c9 00 01 	sub	r9,r8,1
80009da0:	12 98       	mov	r8,r9
80009da2:	a3 68       	lsl	r8,0x2
80009da4:	12 08       	add	r8,r9
80009da6:	a3 68       	lsl	r8,0x2
80009da8:	10 99       	mov	r9,r8
80009daa:	fe f8 02 1e 	ld.w	r8,pc[542]
80009dae:	f2 08 00 08 	add	r8,r9,r8
80009db2:	ef 48 ff f4 	st.w	r7[-12],r8

	if (!ptr_job->busy) {
80009db6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009dba:	70 08       	ld.w	r8,r8[0x0]
80009dbc:	e6 18 80 00 	andh	r8,0x8000,COH
80009dc0:	e0 80 01 00 	breq	80009fc0 <udd_ep_trans_done+0x23c>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80009dc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009dc8:	70 39       	ld.w	r9,r8[0xc]
80009dca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009dce:	70 28       	ld.w	r8,r8[0x8]
80009dd0:	10 39       	cp.w	r9,r8
80009dd2:	e0 80 00 b7 	breq	80009f40 <udd_ep_trans_done+0x1bc>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80009dd6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009dda:	70 29       	ld.w	r9,r8[0x8]
80009ddc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009de0:	70 38       	ld.w	r8,r8[0xc]
80009de2:	10 19       	sub	r9,r8
80009de4:	ef 49 ff f8 	st.w	r7[-8],r9

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80009de8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009dec:	e0 58 00 00 	cp.w	r8,65536
80009df0:	e0 88 00 0a 	brls	80009e04 <udd_ep_trans_done+0x80>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
80009df4:	e0 78 00 00 	mov	r8,65536
80009df8:	ef 48 ff f8 	st.w	r7[-8],r8

			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
80009dfc:	30 08       	mov	r8,0
80009dfe:	ef 48 ff f0 	st.w	r7[-16],r8
80009e02:	c0 68       	rjmp	80009e0e <udd_ep_trans_done+0x8a>
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
80009e04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009e08:	b1 68       	lsl	r8,0x10
80009e0a:	ef 48 ff f0 	st.w	r7[-16],r8
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
80009e0e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009e12:	a3 68       	lsl	r8,0x2
80009e14:	e0 38 ff 00 	sub	r8,130816
80009e18:	70 08       	ld.w	r8,r8[0x0]
80009e1a:	e2 18 01 00 	andl	r8,0x100,COH
80009e1e:	c2 10       	breq	80009e60 <udd_ep_trans_done+0xdc>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
80009e20:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009e24:	a3 68       	lsl	r8,0x2
80009e26:	e0 38 ff 00 	sub	r8,130816
80009e2a:	70 08       	ld.w	r8,r8[0x0]
80009e2c:	e2 18 00 70 	andl	r8,0x70,COH
80009e30:	a5 88       	lsr	r8,0x4
80009e32:	30 89       	mov	r9,8
80009e34:	f2 08 09 48 	lsl	r8,r9,r8
80009e38:	20 18       	sub	r8,1
80009e3a:	10 99       	mov	r9,r8
80009e3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009e40:	f3 e8 00 08 	and	r8,r9,r8
80009e44:	c3 10       	breq	80009ea6 <udd_ep_trans_done+0x122>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
80009e46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009e4a:	a3 b8       	sbr	r8,0x3
80009e4c:	ef 48 ff f0 	st.w	r7[-16],r8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80009e50:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009e54:	72 08       	ld.w	r8,r9[0x0]
80009e56:	30 0a       	mov	r10,0
80009e58:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80009e5c:	93 08       	st.w	r9[0x0],r8
80009e5e:	c2 58       	rjmp	80009ea8 <udd_ep_trans_done+0x124>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80009e60:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009e64:	a3 68       	lsl	r8,0x2
80009e66:	e0 38 ff 00 	sub	r8,130816
80009e6a:	70 08       	ld.w	r8,r8[0x0]
80009e6c:	e2 18 18 00 	andl	r8,0x1800,COH
80009e70:	ab 98       	lsr	r8,0xb
80009e72:	58 18       	cp.w	r8,1
80009e74:	c1 21       	brne	80009e98 <udd_ep_trans_done+0x114>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
80009e76:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009e7a:	a3 68       	lsl	r8,0x2
80009e7c:	e0 38 ff 00 	sub	r8,130816
80009e80:	70 08       	ld.w	r8,r8[0x0]
80009e82:	e2 18 00 70 	andl	r8,0x70,COH
80009e86:	a5 88       	lsr	r8,0x4
80009e88:	30 89       	mov	r9,8
80009e8a:	f2 08 09 48 	lsl	r8,r9,r8
80009e8e:	10 99       	mov	r9,r8
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80009e90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009e94:	10 39       	cp.w	r9,r8
80009e96:	c0 93       	brcs	80009ea8 <udd_ep_trans_done+0x124>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
80009e98:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009e9c:	e8 18 00 14 	orl	r8,0x14
80009ea0:	ef 48 ff f0 	st.w	r7[-16],r8
80009ea4:	c0 28       	rjmp	80009ea8 <udd_ep_trans_done+0x124>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80009ea6:	d7 03       	nop
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80009ea8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009eac:	a5 68       	lsl	r8,0x4
80009eae:	e0 38 fd 00 	sub	r8,130304
80009eb2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009eb6:	72 1a       	ld.w	r10,r9[0x4]
80009eb8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009ebc:	72 39       	ld.w	r9,r9[0xc]
80009ebe:	f4 09 00 09 	add	r9,r10,r9
80009ec2:	91 19       	st.w	r8[0x4],r9
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80009ec4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009ec8:	e8 18 00 21 	orl	r8,0x21
80009ecc:	ef 48 ff f0 	st.w	r7[-16],r8
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
80009ed0:	f0 1f 00 3f 	mcall	80009fcc <udd_ep_trans_done+0x248>
80009ed4:	18 98       	mov	r8,r12
80009ed6:	ef 48 ff fc 	st.w	r7[-4],r8
		if ( !(udd_endpoint_dma_get_status(ep)
80009eda:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009ede:	a5 68       	lsl	r8,0x4
80009ee0:	e0 38 fd 00 	sub	r8,130304
80009ee4:	70 38       	ld.w	r8,r8[0xc]
80009ee6:	e2 18 00 10 	andl	r8,0x10,COH
80009eea:	c2 11       	brne	80009f2c <udd_ep_trans_done+0x1a8>
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
80009eec:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009ef0:	a5 68       	lsl	r8,0x4
80009ef2:	e0 38 fd 00 	sub	r8,130304
80009ef6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009efa:	91 29       	st.w	r8[0x8],r9
			ptr_job->nb_trans += next_trans;
80009efc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009f00:	70 39       	ld.w	r9,r8[0xc]
80009f02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009f06:	10 09       	add	r9,r8
80009f08:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009f0c:	91 39       	st.w	r8[0xc],r9
			udd_enable_endpoint_dma_interrupt(ep);
80009f0e:	fe 68 00 00 	mov	r8,-131072
80009f12:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80009f16:	20 19       	sub	r9,1
80009f18:	fc 1a 02 00 	movh	r10,0x200
80009f1c:	f4 09 09 49 	lsl	r9,r10,r9
80009f20:	91 69       	st.w	r8[0x18],r9
			cpu_irq_restore(flags);
80009f22:	ee fc ff fc 	ld.w	r12,r7[-4]
80009f26:	f0 1f 00 2b 	mcall	80009fd0 <udd_ep_trans_done+0x24c>
			return;
80009f2a:	c4 c8       	rjmp	80009fc2 <udd_ep_trans_done+0x23e>
		}
		cpu_irq_restore(flags);
80009f2c:	ee fc ff fc 	ld.w	r12,r7[-4]
80009f30:	f0 1f 00 28 	mcall	80009fd0 <udd_ep_trans_done+0x24c>

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80009f34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009f38:	70 39       	ld.w	r9,r8[0xc]
80009f3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009f3e:	91 29       	st.w	r8[0x8],r9
	}
	if (Is_udd_endpoint_in(ep)) {
80009f40:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f44:	a3 68       	lsl	r8,0x2
80009f46:	e0 38 ff 00 	sub	r8,130816
80009f4a:	70 08       	ld.w	r8,r8[0x0]
80009f4c:	e2 18 01 00 	andl	r8,0x100,COH
80009f50:	c2 f0       	breq	80009fae <udd_ep_trans_done+0x22a>
		if (ptr_job->b_shortpacket) {
80009f52:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009f56:	70 08       	ld.w	r8,r8[0x0]
80009f58:	e6 18 40 00 	andh	r8,0x4000,COH
80009f5c:	c2 90       	breq	80009fae <udd_ep_trans_done+0x22a>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
80009f5e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f62:	a3 68       	lsl	r8,0x2
80009f64:	e0 38 fe a0 	sub	r8,130720
80009f68:	30 19       	mov	r9,1
80009f6a:	91 09       	st.w	r8[0x0],r9
			if (Is_udd_write_enabled(ep)) {
80009f6c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f70:	a3 68       	lsl	r8,0x2
80009f72:	e0 38 fe d0 	sub	r8,130768
80009f76:	70 08       	ld.w	r8,r8[0x0]
80009f78:	e6 18 00 01 	andh	r8,0x1,COH
80009f7c:	c0 80       	breq	80009f8c <udd_ep_trans_done+0x208>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
80009f7e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f82:	a3 68       	lsl	r8,0x2
80009f84:	e0 38 fe 70 	sub	r8,130672
80009f88:	30 19       	mov	r9,1
80009f8a:	91 09       	st.w	r8[0x0],r9
			}
			udd_enable_in_send_interrupt(ep);
80009f8c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f90:	a3 68       	lsl	r8,0x2
80009f92:	e0 38 fe 10 	sub	r8,130576
80009f96:	30 19       	mov	r9,1
80009f98:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(ep);
80009f9a:	fe 68 00 00 	mov	r8,-131072
80009f9e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80009fa2:	e0 6a 10 00 	mov	r10,4096
80009fa6:	f4 09 09 49 	lsl	r9,r10,r9
80009faa:	91 69       	st.w	r8[0x18],r9
			return;
80009fac:	c0 b8       	rjmp	80009fc2 <udd_ep_trans_done+0x23e>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
80009fae:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009fb2:	10 9a       	mov	r10,r8
80009fb4:	30 0b       	mov	r11,0
80009fb6:	ee fc ff f4 	ld.w	r12,r7[-12]
80009fba:	f0 1f 00 07 	mcall	80009fd4 <udd_ep_trans_done+0x250>
80009fbe:	c0 28       	rjmp	80009fc2 <udd_ep_trans_done+0x23e>

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
80009fc0:	d7 03       	nop
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
80009fc2:	2f bd       	sub	sp,-20
80009fc4:	e3 cd 80 80 	ldm	sp++,r7,pc
80009fc8:	00 00       	add	r0,r0
80009fca:	06 68       	and	r8,r3
80009fcc:	80 00       	ld.sh	r0,r0[0x0]
80009fce:	83 10       	st.w	r1[0x4],r0
80009fd0:	80 00       	ld.sh	r0,r0[0x0]
80009fd2:	83 2e       	st.w	r1[0x8],lr
80009fd4:	80 00       	ld.sh	r0,r0[0x0]
80009fd6:	9d 00       	st.w	lr[0x0],r0

80009fd8 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
80009fd8:	eb cd 40 80 	pushm	r7,lr
80009fdc:	1a 97       	mov	r7,sp
80009fde:	20 3d       	sub	sp,12
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80009fe0:	30 18       	mov	r8,1
80009fe2:	ef 68 ff f7 	st.b	r7[-9],r8
80009fe6:	cf 18       	rjmp	8000a1c8 <udd_ep_interrupt+0x1f0>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
80009fe8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80009fec:	f0 c9 00 01 	sub	r9,r8,1
80009ff0:	12 98       	mov	r8,r9
80009ff2:	a3 68       	lsl	r8,0x2
80009ff4:	12 08       	add	r8,r9
80009ff6:	a3 68       	lsl	r8,0x2
80009ff8:	10 99       	mov	r9,r8
80009ffa:	4f a8       	lddpc	r8,8000a1e0 <udd_ep_interrupt+0x208>
80009ffc:	f2 08 00 08 	add	r8,r9,r8
8000a000:	ef 48 ff f8 	st.w	r7[-8],r8

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000a004:	fe 68 00 00 	mov	r8,-131072
8000a008:	70 49       	ld.w	r9,r8[0x10]
8000a00a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a00e:	20 18       	sub	r8,1
8000a010:	fc 1a 02 00 	movh	r10,0x200
8000a014:	f4 08 09 48 	lsl	r8,r10,r8
8000a018:	f3 e8 00 08 	and	r8,r9,r8
8000a01c:	c4 70       	breq	8000a0aa <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
8000a01e:	fe 68 00 00 	mov	r8,-131072
8000a022:	70 19       	ld.w	r9,r8[0x4]
8000a024:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a028:	20 18       	sub	r8,1
8000a02a:	fc 1a 02 00 	movh	r10,0x200
8000a02e:	f4 08 09 48 	lsl	r8,r10,r8
8000a032:	f3 e8 00 08 	and	r8,r9,r8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000a036:	c3 a0       	breq	8000a0aa <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
8000a038:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a03c:	a5 68       	lsl	r8,0x4
8000a03e:	e0 38 fd 00 	sub	r8,130304
8000a042:	70 38       	ld.w	r8,r8[0xc]
8000a044:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a048:	5c 58       	castu.b	r8
8000a04a:	c0 30       	breq	8000a050 <udd_ep_interrupt+0x78>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
8000a04c:	30 18       	mov	r8,1
8000a04e:	cc 58       	rjmp	8000a1d8 <udd_ep_interrupt+0x200>
			}
			udd_disable_endpoint_dma_interrupt(ep);
8000a050:	fe 68 00 00 	mov	r8,-131072
8000a054:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a058:	20 19       	sub	r9,1
8000a05a:	fc 1a 02 00 	movh	r10,0x200
8000a05e:	f4 09 09 49 	lsl	r9,r10,r9
8000a062:	91 59       	st.w	r8[0x14],r9
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
8000a064:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a068:	a5 68       	lsl	r8,0x4
8000a06a:	e0 38 fd 00 	sub	r8,130304
8000a06e:	70 38       	ld.w	r8,r8[0xc]
8000a070:	b1 88       	lsr	r8,0x10
8000a072:	ef 48 ff fc 	st.w	r7[-4],r8
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
8000a076:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a07a:	58 08       	cp.w	r8,0
8000a07c:	c1 00       	breq	8000a09c <udd_ep_interrupt+0xc4>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
8000a07e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a082:	70 39       	ld.w	r9,r8[0xc]
8000a084:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a088:	10 19       	sub	r9,r8
8000a08a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a08e:	91 39       	st.w	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
8000a090:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a094:	70 39       	ld.w	r9,r8[0xc]
8000a096:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a09a:	91 29       	st.w	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
8000a09c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0a0:	10 9c       	mov	r12,r8
8000a0a2:	f0 1f 00 51 	mcall	8000a1e4 <udd_ep_interrupt+0x20c>
			return true;
8000a0a6:	30 18       	mov	r8,1
8000a0a8:	c9 88       	rjmp	8000a1d8 <udd_ep_interrupt+0x200>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
8000a0aa:	fe 68 00 00 	mov	r8,-131072
8000a0ae:	70 49       	ld.w	r9,r8[0x10]
8000a0b0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0b4:	e0 6a 10 00 	mov	r10,4096
8000a0b8:	f4 08 09 48 	lsl	r8,r10,r8
8000a0bc:	f3 e8 00 08 	and	r8,r9,r8
8000a0c0:	c7 f0       	breq	8000a1be <udd_ep_interrupt+0x1e6>
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
8000a0c2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0c6:	a3 68       	lsl	r8,0x2
8000a0c8:	e0 38 fe 40 	sub	r8,130624
8000a0cc:	70 08       	ld.w	r8,r8[0x0]
8000a0ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a0d2:	5c 58       	castu.b	r8
8000a0d4:	c2 b0       	breq	8000a12a <udd_ep_interrupt+0x152>
8000a0d6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0da:	a3 68       	lsl	r8,0x2
8000a0dc:	e0 38 fe d0 	sub	r8,130768
8000a0e0:	70 08       	ld.w	r8,r8[0x0]
8000a0e2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a0e6:	5c 58       	castu.b	r8
8000a0e8:	c2 10       	breq	8000a12a <udd_ep_interrupt+0x152>
				udd_disable_in_send_interrupt(ep);
8000a0ea:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0ee:	a3 68       	lsl	r8,0x2
8000a0f0:	e0 38 fd e0 	sub	r8,130528
8000a0f4:	30 19       	mov	r9,1
8000a0f6:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000a0f8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0fc:	a3 68       	lsl	r8,0x2
8000a0fe:	e0 38 fe a0 	sub	r8,130720
8000a102:	30 19       	mov	r9,1
8000a104:	91 09       	st.w	r8[0x0],r9
				udd_ack_fifocon(ep);
8000a106:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a10a:	a3 68       	lsl	r8,0x2
8000a10c:	e0 38 fd e0 	sub	r8,130528
8000a110:	e0 69 40 00 	mov	r9,16384
8000a114:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false, ep);
8000a116:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a11a:	10 9a       	mov	r10,r8
8000a11c:	30 0b       	mov	r11,0
8000a11e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a122:	f0 1f 00 32 	mcall	8000a1e8 <udd_ep_interrupt+0x210>
				return true;
8000a126:	30 18       	mov	r8,1
8000a128:	c5 88       	rjmp	8000a1d8 <udd_ep_interrupt+0x200>
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
8000a12a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a12e:	a3 68       	lsl	r8,0x2
8000a130:	e0 38 fe 40 	sub	r8,130624
8000a134:	70 08       	ld.w	r8,r8[0x0]
8000a136:	e2 18 10 00 	andl	r8,0x1000,COH
8000a13a:	c4 20       	breq	8000a1be <udd_ep_interrupt+0x1e6>
8000a13c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a140:	a3 68       	lsl	r8,0x2
8000a142:	e0 38 fe d0 	sub	r8,130768
8000a146:	70 08       	ld.w	r8,r8[0x0]
8000a148:	e2 18 30 00 	andl	r8,0x3000,COH
8000a14c:	ad 88       	lsr	r8,0xc
8000a14e:	c3 81       	brne	8000a1be <udd_ep_interrupt+0x1e6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
8000a150:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a154:	a3 68       	lsl	r8,0x2
8000a156:	e0 38 fd e0 	sub	r8,130528
8000a15a:	e0 69 10 00 	mov	r9,4096
8000a15e:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
8000a160:	fe 68 00 00 	mov	r8,-131072
8000a164:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a168:	e0 6a 10 00 	mov	r10,4096
8000a16c:	f4 09 09 49 	lsl	r9,r10,r9
8000a170:	91 59       	st.w	r8[0x14],r9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
8000a172:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a176:	72 08       	ld.w	r8,r9[0x0]
8000a178:	30 0a       	mov	r10,0
8000a17a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a17e:	93 08       	st.w	r9[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
8000a180:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a184:	a3 68       	lsl	r8,0x2
8000a186:	e0 38 ff 00 	sub	r8,130816
8000a18a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a18e:	a3 69       	lsl	r9,0x2
8000a190:	e0 39 ff 00 	sub	r9,130816
8000a194:	72 09       	ld.w	r9,r9[0x0]
8000a196:	a9 d9       	cbr	r9,0x9
8000a198:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
8000a19a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a19e:	a3 68       	lsl	r8,0x2
8000a1a0:	e0 38 fe 10 	sub	r8,130576
8000a1a4:	e8 69 00 00 	mov	r9,524288
8000a1a8:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
8000a1aa:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a1ae:	a3 68       	lsl	r8,0x2
8000a1b0:	e0 38 fe 10 	sub	r8,130576
8000a1b4:	e4 69 00 00 	mov	r9,262144
8000a1b8:	91 09       	st.w	r8[0x0],r9
				return true;
8000a1ba:	30 18       	mov	r8,1
8000a1bc:	c0 e8       	rjmp	8000a1d8 <udd_ep_interrupt+0x200>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000a1be:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a1c2:	2f f8       	sub	r8,-1
8000a1c4:	ef 68 ff f7 	st.b	r7[-9],r8
8000a1c8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a1cc:	30 28       	mov	r8,2
8000a1ce:	f0 09 18 00 	cp.b	r9,r8
8000a1d2:	fe 98 ff 0b 	brls	80009fe8 <udd_ep_interrupt+0x10>
				udd_reset_data_toggle(ep);
				return true;
			}
		}
	}
	return false;
8000a1d6:	30 08       	mov	r8,0
}
8000a1d8:	10 9c       	mov	r12,r8
8000a1da:	2f dd       	sub	sp,-12
8000a1dc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a1e0:	00 00       	add	r0,r0
8000a1e2:	06 68       	and	r8,r3
8000a1e4:	80 00       	ld.sh	r0,r0[0x0]
8000a1e6:	9d 84       	st.w	lr[0x20],r4
8000a1e8:	80 00       	ld.sh	r0,r0[0x0]
8000a1ea:	9d 00       	st.w	lr[0x0],r0

8000a1ec <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000a1ec:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000a1f0:	fe c0 cd f0 	sub	r0,pc,-12816

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
8000a1f4:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000a1f8:	d5 53       	csrf	0x15
  cp      r0, r1
8000a1fa:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
8000a1fc:	e0 61 01 20 	mov	r1,288
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
8000a200:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000a202:	c0 72       	brcc	8000a210 <idata_load_loop_end>
  cp      r0, r1
8000a204:	fe c2 c4 3c 	sub	r2,pc,-15300

8000a208 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000a208:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
8000a20a:	a1 24       	st.d	r0++,r4
  cp      r0, r1
8000a20c:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000a20e:	cf d3       	brcs	8000a208 <idata_load_loop>

8000a210 <idata_load_loop_end>:
  mov     r2, 0
8000a210:	e0 60 01 20 	mov	r0,288
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000a214:	e0 61 0b e8 	mov	r1,3048
  cp      r0, r1
  brlo    udata_clear_loop
8000a218:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000a21a:	c0 62       	brcc	8000a226 <udata_clear_loop_end>
8000a21c:	30 02       	mov	r2,0
8000a21e:	30 03       	mov	r3,0

8000a220 <udata_clear_loop>:
8000a220:	a1 22       	st.d	r0++,r2
8000a222:	02 30       	cp.w	r0,r1
8000a224:	cf e3       	brcs	8000a220 <udata_clear_loop>

8000a226 <udata_clear_loop_end>:
8000a226:	fe cf d6 fe 	sub	pc,pc,-10498
8000a22a:	d7 03       	nop

8000a22c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8000a22c:	eb cd 40 80 	pushm	r7,lr
8000a230:	1a 97       	mov	r7,sp
8000a232:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000a234:	e1 b8 00 00 	mfsr	r8,0x0
8000a238:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8000a23c:	d3 03       	ssrf	0x10

	return flags;
8000a23e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000a242:	10 9c       	mov	r12,r8
8000a244:	2f fd       	sub	sp,-4
8000a246:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a24a <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8000a24a:	eb cd 40 80 	pushm	r7,lr
8000a24e:	1a 97       	mov	r7,sp
8000a250:	20 1d       	sub	sp,4
8000a252:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000a256:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a25a:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8000a25e:	2f fd       	sub	sp,-4
8000a260:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a264 <osc_enable>:
#include <stdbool.h>
#include <stdint.h>
#include <avr32/io.h>

static inline void osc_enable(uint8_t id)
{
8000a264:	eb cd 40 80 	pushm	r7,lr
8000a268:	1a 97       	mov	r7,sp
8000a26a:	20 3d       	sub	sp,12
8000a26c:	18 98       	mov	r8,r12
8000a26e:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();
8000a272:	f0 1f 00 2b 	mcall	8000a31c <osc_enable+0xb8>
8000a276:	18 98       	mov	r8,r12
8000a278:	ef 48 ff f8 	st.w	r7[-8],r8

	switch (id) {
8000a27c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a280:	58 18       	cp.w	r8,1
8000a282:	c1 c0       	breq	8000a2ba <osc_enable+0x56>
8000a284:	58 28       	cp.w	r8,2
8000a286:	c3 10       	breq	8000a2e8 <osc_enable+0x84>
8000a288:	58 08       	cp.w	r8,0
8000a28a:	c4 21       	brne	8000a30e <osc_enable+0xaa>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
8000a28c:	e0 68 03 00 	mov	r8,768
8000a290:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
8000a294:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a298:	e8 18 00 07 	orl	r8,0x7
8000a29c:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl0 = oscctrl;
8000a2a0:	fe 78 0c 00 	mov	r8,-62464
8000a2a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a2a8:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
8000a2aa:	fe 78 0c 00 	mov	r8,-62464
8000a2ae:	fe 79 0c 00 	mov	r9,-62464
8000a2b2:	72 09       	ld.w	r9,r9[0x0]
8000a2b4:	a3 a9       	sbr	r9,0x2
8000a2b6:	91 09       	st.w	r8[0x0],r9
		break;
8000a2b8:	c2 b8       	rjmp	8000a30e <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		oscctrl = OSC1_STARTUP_VALUE <<
8000a2ba:	e0 68 03 00 	mov	r8,768
8000a2be:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL1_STARTUP_OFFSET;
		oscctrl |= OSC1_MODE_VALUE << AVR32_PM_OSCCTRL1_MODE_OFFSET;
8000a2c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a2c6:	e8 18 00 07 	orl	r8,0x7
8000a2ca:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl1 = oscctrl;
8000a2ce:	fe 78 0c 00 	mov	r8,-62464
8000a2d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a2d6:	91 b9       	st.w	r8[0x2c],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC1EN;
8000a2d8:	fe 78 0c 00 	mov	r8,-62464
8000a2dc:	fe 79 0c 00 	mov	r9,-62464
8000a2e0:	72 09       	ld.w	r9,r9[0x0]
8000a2e2:	a3 b9       	sbr	r9,0x3
8000a2e4:	91 09       	st.w	r8[0x0],r9
		break;
8000a2e6:	c1 48       	rjmp	8000a30e <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
8000a2e8:	e2 68 00 00 	mov	r8,131072
8000a2ec:	ef 48 ff fc 	st.w	r7[-4],r8
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
8000a2f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a2f4:	a9 a8       	sbr	r8,0x8
8000a2f6:	ef 48 ff fc 	st.w	r7[-4],r8
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
8000a2fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a2fe:	a1 a8       	sbr	r8,0x0
8000a300:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl32 = oscctrl;
8000a304:	fe 78 0c 00 	mov	r8,-62464
8000a308:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a30c:	91 c9       	st.w	r8[0x30],r9
	default:
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
8000a30e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a312:	f0 1f 00 04 	mcall	8000a320 <osc_enable+0xbc>
}
8000a316:	2f dd       	sub	sp,-12
8000a318:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a31c:	80 00       	ld.sh	r0,r0[0x0]
8000a31e:	a2 2c       	st.h	r1[0x4],r12
8000a320:	80 00       	ld.sh	r0,r0[0x0]
8000a322:	a2 4a       	st.h	r1[0x8],r10

8000a324 <osc_is_ready>:
	}
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
8000a324:	eb cd 40 80 	pushm	r7,lr
8000a328:	1a 97       	mov	r7,sp
8000a32a:	20 1d       	sub	sp,4
8000a32c:	18 98       	mov	r8,r12
8000a32e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000a332:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a336:	58 18       	cp.w	r8,1
8000a338:	c0 d0       	breq	8000a352 <osc_is_ready+0x2e>
8000a33a:	58 28       	cp.w	r8,2
8000a33c:	c1 30       	breq	8000a362 <osc_is_ready+0x3e>
8000a33e:	58 08       	cp.w	r8,0
8000a340:	c1 91       	brne	8000a372 <osc_is_ready+0x4e>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
8000a342:	fe 78 0c 00 	mov	r8,-62464
8000a346:	71 58       	ld.w	r8,r8[0x54]
8000a348:	e2 18 00 80 	andl	r8,0x80,COH
8000a34c:	5f 18       	srne	r8
8000a34e:	5c 58       	castu.b	r8
8000a350:	c1 28       	rjmp	8000a374 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC1RDY));
8000a352:	fe 78 0c 00 	mov	r8,-62464
8000a356:	71 58       	ld.w	r8,r8[0x54]
8000a358:	e2 18 01 00 	andl	r8,0x100,COH
8000a35c:	5f 18       	srne	r8
8000a35e:	5c 58       	castu.b	r8
8000a360:	c0 a8       	rjmp	8000a374 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC32RDY));
8000a362:	fe 78 0c 00 	mov	r8,-62464
8000a366:	71 58       	ld.w	r8,r8[0x54]
8000a368:	e2 18 02 00 	andl	r8,0x200,COH
8000a36c:	5f 18       	srne	r8
8000a36e:	5c 58       	castu.b	r8
8000a370:	c0 28       	rjmp	8000a374 <osc_is_ready+0x50>
#endif

	default:
		/* unhandled_case(id); */
		return false;
8000a372:	30 08       	mov	r8,0
	}
}
8000a374:	10 9c       	mov	r12,r8
8000a376:	2f fd       	sub	sp,-4
8000a378:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a37c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
8000a37c:	eb cd 40 80 	pushm	r7,lr
8000a380:	1a 97       	mov	r7,sp
8000a382:	20 1d       	sub	sp,4
8000a384:	18 98       	mov	r8,r12
8000a386:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000a38a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a38e:	58 18       	cp.w	r8,1
8000a390:	c0 a0       	breq	8000a3a4 <osc_get_rate+0x28>
8000a392:	58 28       	cp.w	r8,2
8000a394:	c0 d0       	breq	8000a3ae <osc_get_rate+0x32>
8000a396:	58 08       	cp.w	r8,0
8000a398:	c0 e1       	brne	8000a3b4 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000a39a:	e0 68 1b 00 	mov	r8,6912
8000a39e:	ea 18 00 b7 	orh	r8,0xb7
8000a3a2:	c0 a8       	rjmp	8000a3b6 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000a3a4:	e0 68 44 00 	mov	r8,17408
8000a3a8:	ea 18 00 ac 	orh	r8,0xac
8000a3ac:	c0 58       	rjmp	8000a3b6 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000a3ae:	e0 68 80 00 	mov	r8,32768
8000a3b2:	c0 28       	rjmp	8000a3b6 <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000a3b4:	30 08       	mov	r8,0
	}
}
8000a3b6:	10 9c       	mov	r12,r8
8000a3b8:	2f fd       	sub	sp,-4
8000a3ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a3be:	d7 03       	nop

8000a3c0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8000a3c0:	eb cd 40 80 	pushm	r7,lr
8000a3c4:	1a 97       	mov	r7,sp
8000a3c6:	20 1d       	sub	sp,4
8000a3c8:	18 98       	mov	r8,r12
8000a3ca:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8000a3ce:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a3d2:	10 9c       	mov	r12,r8
8000a3d4:	f0 1f 00 05 	mcall	8000a3e8 <osc_wait_ready+0x28>
8000a3d8:	18 98       	mov	r8,r12
8000a3da:	ec 18 00 01 	eorl	r8,0x1
8000a3de:	5c 58       	castu.b	r8
8000a3e0:	cf 71       	brne	8000a3ce <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
8000a3e2:	2f fd       	sub	sp,-4
8000a3e4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a3e8:	80 00       	ld.sh	r0,r0[0x0]
8000a3ea:	a3 24       	st.d	r1++,r4

8000a3ec <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8000a3ec:	eb cd 40 80 	pushm	r7,lr
8000a3f0:	1a 97       	mov	r7,sp
8000a3f2:	20 2d       	sub	sp,8
8000a3f4:	ef 4c ff fc 	st.w	r7[-4],r12
8000a3f8:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
8000a3fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a400:	70 09       	ld.w	r9,r8[0x0]
8000a402:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a406:	2f e8       	sub	r8,-2
8000a408:	30 1a       	mov	r10,1
8000a40a:	f4 08 09 48 	lsl	r8,r10,r8
8000a40e:	10 49       	or	r9,r8
8000a410:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a414:	91 09       	st.w	r8[0x0],r9
}
8000a416:	2f ed       	sub	sp,-8
8000a418:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a41c <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8000a41c:	eb cd 40 80 	pushm	r7,lr
8000a420:	1a 97       	mov	r7,sp
8000a422:	20 5d       	sub	sp,20
8000a424:	ef 4c ff f8 	st.w	r7[-8],r12
8000a428:	ef 4b ff f4 	st.w	r7[-12],r11
8000a42c:	ef 4a ff f0 	st.w	r7[-16],r10
8000a430:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8000a434:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a438:	5c 58       	castu.b	r8
8000a43a:	10 9c       	mov	r12,r8
8000a43c:	f0 1f 00 2e 	mcall	8000a4f4 <pll_config_init+0xd8>
8000a440:	18 99       	mov	r9,r12
8000a442:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a446:	f2 08 02 48 	mul	r8,r9,r8
8000a44a:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8000a44e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a452:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a456:	f0 09 0d 08 	divu	r8,r8,r9
8000a45a:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8000a45e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a462:	30 09       	mov	r9,0
8000a464:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8000a466:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a46a:	e0 69 b3 ff 	mov	r9,46079
8000a46e:	ea 19 04 c4 	orh	r9,0x4c4
8000a472:	12 38       	cp.w	r8,r9
8000a474:	e0 8b 00 16 	brhi	8000a4a0 <pll_config_init+0x84>
8000a478:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a47c:	58 88       	cp.w	r8,8
8000a47e:	e0 8b 00 11 	brhi	8000a4a0 <pll_config_init+0x84>
		mul *= 2;
8000a482:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a486:	a1 78       	lsl	r8,0x1
8000a488:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8000a48c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a490:	a1 78       	lsl	r8,0x1
8000a492:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8000a496:	30 1b       	mov	r11,1
8000a498:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a49c:	f0 1f 00 17 	mcall	8000a4f8 <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8000a4a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a4a4:	e0 69 fe 7f 	mov	r9,65151
8000a4a8:	ea 19 0a 21 	orh	r9,0xa21
8000a4ac:	12 38       	cp.w	r8,r9
8000a4ae:	e0 8b 00 07 	brhi	8000a4bc <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8000a4b2:	30 0b       	mov	r11,0
8000a4b4:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a4b8:	f0 1f 00 10 	mcall	8000a4f8 <pll_config_init+0xdc>

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000a4bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4c0:	70 09       	ld.w	r9,r8[0x0]
8000a4c2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a4c6:	20 18       	sub	r8,1
8000a4c8:	f0 0a 15 10 	lsl	r10,r8,0x10
			| (div << AVR32_PM_PLL0_PLLDIV)
8000a4cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a4d0:	a9 68       	lsl	r8,0x8
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
8000a4d2:	10 4a       	or	r10,r8
			| (src << AVR32_PM_PLL0_PLLOSC);
8000a4d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a4d8:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000a4da:	f5 e8 10 08 	or	r8,r10,r8
8000a4de:	f3 e8 10 08 	or	r8,r9,r8
8000a4e2:	10 99       	mov	r9,r8
8000a4e4:	ea 19 3f 00 	orh	r9,0x3f00
8000a4e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4ec:	91 09       	st.w	r8[0x0],r9
			| (div << AVR32_PM_PLL0_PLLDIV)
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
			| (src << AVR32_PM_PLL0_PLLOSC);
}
8000a4ee:	2f bd       	sub	sp,-20
8000a4f0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a4f4:	80 00       	ld.sh	r0,r0[0x0]
8000a4f6:	a3 7c       	lsl	r12,0x3
8000a4f8:	80 00       	ld.sh	r0,r0[0x0]
8000a4fa:	a3 ec       	*unknown*

8000a4fc <pll_enable>:
	AVR32_PM.pll[pll_id] = cfg->ctrl;
}

static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
8000a4fc:	eb cd 40 80 	pushm	r7,lr
8000a500:	1a 97       	mov	r7,sp
8000a502:	20 2d       	sub	sp,8
8000a504:	ef 4c ff fc 	st.w	r7[-4],r12
8000a508:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
8000a50c:	fe 78 0c 00 	mov	r8,-62464
8000a510:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a514:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a518:	74 0a       	ld.w	r10,r10[0x0]
8000a51a:	a1 aa       	sbr	r10,0x0
8000a51c:	2f 89       	sub	r9,-8
8000a51e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000a522:	2f ed       	sub	sp,-8
8000a524:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a528 <pll_is_locked>:

	AVR32_PM.pll[pll_id] = 0;
}

static inline bool pll_is_locked(unsigned int pll_id)
{
8000a528:	eb cd 40 80 	pushm	r7,lr
8000a52c:	1a 97       	mov	r7,sp
8000a52e:	20 1d       	sub	sp,4
8000a530:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
8000a534:	fe 78 0c 00 	mov	r8,-62464
8000a538:	71 59       	ld.w	r9,r8[0x54]
8000a53a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a53e:	30 1a       	mov	r10,1
8000a540:	f4 08 09 48 	lsl	r8,r10,r8
8000a544:	f3 e8 00 08 	and	r8,r9,r8
8000a548:	5f 18       	srne	r8
8000a54a:	5c 58       	castu.b	r8
}
8000a54c:	10 9c       	mov	r12,r8
8000a54e:	2f fd       	sub	sp,-4
8000a550:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a554 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
8000a554:	eb cd 40 80 	pushm	r7,lr
8000a558:	1a 97       	mov	r7,sp
8000a55a:	20 1d       	sub	sp,4
8000a55c:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000a560:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a564:	58 08       	cp.w	r8,0
8000a566:	c0 40       	breq	8000a56e <pll_enable_source+0x1a>
8000a568:	58 18       	cp.w	r8,1
8000a56a:	c1 10       	breq	8000a58c <pll_enable_source+0x38>
8000a56c:	c2 08       	rjmp	8000a5ac <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000a56e:	30 0c       	mov	r12,0
8000a570:	f0 1f 00 11 	mcall	8000a5b4 <pll_enable_source+0x60>
8000a574:	18 98       	mov	r8,r12
8000a576:	ec 18 00 01 	eorl	r8,0x1
8000a57a:	5c 58       	castu.b	r8
8000a57c:	c1 70       	breq	8000a5aa <pll_enable_source+0x56>
			osc_enable(OSC_ID_OSC0);
8000a57e:	30 0c       	mov	r12,0
8000a580:	f0 1f 00 0e 	mcall	8000a5b8 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC0);
8000a584:	30 0c       	mov	r12,0
8000a586:	f0 1f 00 0e 	mcall	8000a5bc <pll_enable_source+0x68>
		}
		break;
8000a58a:	c1 18       	rjmp	8000a5ac <pll_enable_source+0x58>

	case PLL_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000a58c:	30 1c       	mov	r12,1
8000a58e:	f0 1f 00 0a 	mcall	8000a5b4 <pll_enable_source+0x60>
8000a592:	18 98       	mov	r8,r12
8000a594:	ec 18 00 01 	eorl	r8,0x1
8000a598:	5c 58       	castu.b	r8
8000a59a:	c0 90       	breq	8000a5ac <pll_enable_source+0x58>
			osc_enable(OSC_ID_OSC1);
8000a59c:	30 1c       	mov	r12,1
8000a59e:	f0 1f 00 07 	mcall	8000a5b8 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC1);
8000a5a2:	30 1c       	mov	r12,1
8000a5a4:	f0 1f 00 06 	mcall	8000a5bc <pll_enable_source+0x68>
8000a5a8:	c0 28       	rjmp	8000a5ac <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000a5aa:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000a5ac:	2f fd       	sub	sp,-4
8000a5ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a5b2:	00 00       	add	r0,r0
8000a5b4:	80 00       	ld.sh	r0,r0[0x0]
8000a5b6:	a3 24       	st.d	r1++,r4
8000a5b8:	80 00       	ld.sh	r0,r0[0x0]
8000a5ba:	a2 64       	st.h	r1[0xc],r4
8000a5bc:	80 00       	ld.sh	r0,r0[0x0]
8000a5be:	a3 c0       	cbr	r0,0x2

8000a5c0 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
8000a5c0:	eb cd 40 80 	pushm	r7,lr
8000a5c4:	1a 97       	mov	r7,sp
8000a5c6:	20 2d       	sub	sp,8
8000a5c8:	ef 4c ff f8 	st.w	r7[-8],r12
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
8000a5cc:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a5d0:	f0 1f 00 15 	mcall	8000a624 <pll_enable_config_defaults+0x64>
8000a5d4:	18 98       	mov	r8,r12
8000a5d6:	58 08       	cp.w	r8,0
8000a5d8:	c2 11       	brne	8000a61a <pll_enable_config_defaults+0x5a>
		return; // Pll already running
	}
	switch (pll_id) {
8000a5da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a5de:	58 08       	cp.w	r8,0
8000a5e0:	c0 c1       	brne	8000a5f8 <pll_enable_config_defaults+0x38>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
8000a5e2:	30 0c       	mov	r12,0
8000a5e4:	f0 1f 00 11 	mcall	8000a628 <pll_enable_config_defaults+0x68>
		pll_config_init(&pllcfg,
8000a5e8:	ee c8 00 04 	sub	r8,r7,4
8000a5ec:	30 b9       	mov	r9,11
8000a5ee:	30 2a       	mov	r10,2
8000a5f0:	30 0b       	mov	r11,0
8000a5f2:	10 9c       	mov	r12,r8
8000a5f4:	f0 1f 00 0e 	mcall	8000a62c <pll_enable_config_defaults+0x6c>
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
8000a5f8:	ee c8 00 04 	sub	r8,r7,4
8000a5fc:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a600:	10 9c       	mov	r12,r8
8000a602:	f0 1f 00 0c 	mcall	8000a630 <pll_enable_config_defaults+0x70>
	while (!pll_is_locked(pll_id));
8000a606:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a60a:	f0 1f 00 07 	mcall	8000a624 <pll_enable_config_defaults+0x64>
8000a60e:	18 98       	mov	r8,r12
8000a610:	ec 18 00 01 	eorl	r8,0x1
8000a614:	5c 58       	castu.b	r8
8000a616:	cf 81       	brne	8000a606 <pll_enable_config_defaults+0x46>
8000a618:	c0 28       	rjmp	8000a61c <pll_enable_config_defaults+0x5c>
static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
		return; // Pll already running
8000a61a:	d7 03       	nop
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
}
8000a61c:	2f ed       	sub	sp,-8
8000a61e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a622:	00 00       	add	r0,r0
8000a624:	80 00       	ld.sh	r0,r0[0x0]
8000a626:	a5 28       	st.d	r2++,r8
8000a628:	80 00       	ld.sh	r0,r0[0x0]
8000a62a:	a5 54       	asr	r4,0x5
8000a62c:	80 00       	ld.sh	r0,r0[0x0]
8000a62e:	a4 1c       	st.h	r2[0x2],r12
8000a630:	80 00       	ld.sh	r0,r0[0x0]
8000a632:	a4 fc       	st.b	r2[0x7],r12

8000a634 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8000a634:	eb cd 40 80 	pushm	r7,lr
8000a638:	1a 97       	mov	r7,sp
8000a63a:	20 2d       	sub	sp,8
8000a63c:	ef 4c ff fc 	st.w	r7[-4],r12
8000a640:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8000a644:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a648:	30 09       	mov	r9,0
8000a64a:	91 09       	st.w	r8[0x0],r9
}
8000a64c:	2f ed       	sub	sp,-8
8000a64e:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a652 <genclk_config_set_source>:
	AVR32_PM.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8000a652:	eb cd 40 80 	pushm	r7,lr
8000a656:	1a 97       	mov	r7,sp
8000a658:	20 3d       	sub	sp,12
8000a65a:	ef 4c ff f8 	st.w	r7[-8],r12
8000a65e:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t mask;

	mask = AVR32_PM_GCCTRL_OSCSEL_MASK | AVR32_PM_GCCTRL_PLLSEL_MASK;
8000a662:	30 38       	mov	r8,3
8000a664:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(!(src & ~mask));

	cfg->ctrl = (cfg->ctrl & ~mask) | (src << AVR32_PM_GCCTRL_OSCSEL);
8000a668:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a66c:	70 09       	ld.w	r9,r8[0x0]
8000a66e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a672:	5c d8       	com	r8
8000a674:	10 69       	and	r9,r8
8000a676:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a67a:	10 49       	or	r9,r8
8000a67c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a680:	91 09       	st.w	r8[0x0],r9
}
8000a682:	2f dd       	sub	sp,-12
8000a684:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a688 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8000a688:	eb cd 40 80 	pushm	r7,lr
8000a68c:	1a 97       	mov	r7,sp
8000a68e:	20 2d       	sub	sp,8
8000a690:	ef 4c ff fc 	st.w	r7[-4],r12
8000a694:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert((divider > 0) && (divider <= GENCLK_DIV_MAX));

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_PM_GCCTRL_DIVEN_MASK | AVR32_PM_GCCTRL_DIV_MASK);
8000a698:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a69c:	70 08       	ld.w	r8,r8[0x0]
8000a69e:	10 99       	mov	r9,r8
8000a6a0:	e0 19 00 ef 	andl	r9,0xef
8000a6a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6a8:	91 09       	st.w	r8[0x0],r9

	if (divider > 1) {
8000a6aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a6ae:	58 18       	cp.w	r8,1
8000a6b0:	e0 88 00 17 	brls	8000a6de <genclk_config_set_divider+0x56>
		cfg->ctrl |= 1U << AVR32_PM_GCCTRL_DIVEN;
8000a6b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6b8:	70 08       	ld.w	r8,r8[0x0]
8000a6ba:	10 99       	mov	r9,r8
8000a6bc:	a5 a9       	sbr	r9,0x4
8000a6be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6c2:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_PM_GCCTRL_DIV;
8000a6c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6c8:	70 09       	ld.w	r9,r8[0x0]
8000a6ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a6ce:	2f f8       	sub	r8,-1
8000a6d0:	a1 98       	lsr	r8,0x1
8000a6d2:	20 18       	sub	r8,1
8000a6d4:	a9 68       	lsl	r8,0x8
8000a6d6:	10 49       	or	r9,r8
8000a6d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6dc:	91 09       	st.w	r8[0x0],r9
	}
}
8000a6de:	2f ed       	sub	sp,-8
8000a6e0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a6e4 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8000a6e4:	eb cd 40 80 	pushm	r7,lr
8000a6e8:	1a 97       	mov	r7,sp
8000a6ea:	20 2d       	sub	sp,8
8000a6ec:	ef 4c ff fc 	st.w	r7[-4],r12
8000a6f0:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
8000a6f4:	fe 78 0c 00 	mov	r8,-62464
8000a6f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a6fc:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a700:	74 0a       	ld.w	r10,r10[0x0]
8000a702:	a3 aa       	sbr	r10,0x2
8000a704:	2e 89       	sub	r9,-24
8000a706:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000a70a:	2f ed       	sub	sp,-8
8000a70c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a710 <genclk_enable_source>:
{
	AVR32_PM.gcctrl[id] = 0;
}

static inline void genclk_enable_source(enum genclk_source src)
{
8000a710:	eb cd 40 80 	pushm	r7,lr
8000a714:	1a 97       	mov	r7,sp
8000a716:	20 1d       	sub	sp,4
8000a718:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000a71c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a720:	58 18       	cp.w	r8,1
8000a722:	c1 40       	breq	8000a74a <genclk_enable_source+0x3a>
8000a724:	c0 43       	brcs	8000a72c <genclk_enable_source+0x1c>
8000a726:	58 28       	cp.w	r8,2
8000a728:	c2 00       	breq	8000a768 <genclk_enable_source+0x58>
8000a72a:	c2 68       	rjmp	8000a776 <genclk_enable_source+0x66>
#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000a72c:	30 0c       	mov	r12,0
8000a72e:	f0 1f 00 14 	mcall	8000a77c <genclk_enable_source+0x6c>
8000a732:	18 98       	mov	r8,r12
8000a734:	ec 18 00 01 	eorl	r8,0x1
8000a738:	5c 58       	castu.b	r8
8000a73a:	c1 b0       	breq	8000a770 <genclk_enable_source+0x60>
			osc_enable(OSC_ID_OSC0);
8000a73c:	30 0c       	mov	r12,0
8000a73e:	f0 1f 00 11 	mcall	8000a780 <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC0);
8000a742:	30 0c       	mov	r12,0
8000a744:	f0 1f 00 10 	mcall	8000a784 <genclk_enable_source+0x74>
		}
		break;
8000a748:	c1 78       	rjmp	8000a776 <genclk_enable_source+0x66>
#endif

#ifdef BOARD_OSC1_HZ
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000a74a:	30 1c       	mov	r12,1
8000a74c:	f0 1f 00 0c 	mcall	8000a77c <genclk_enable_source+0x6c>
8000a750:	18 98       	mov	r8,r12
8000a752:	ec 18 00 01 	eorl	r8,0x1
8000a756:	5c 58       	castu.b	r8
8000a758:	c0 e0       	breq	8000a774 <genclk_enable_source+0x64>
			osc_enable(OSC_ID_OSC1);
8000a75a:	30 1c       	mov	r12,1
8000a75c:	f0 1f 00 09 	mcall	8000a780 <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC1);
8000a760:	30 1c       	mov	r12,1
8000a762:	f0 1f 00 09 	mcall	8000a784 <genclk_enable_source+0x74>
		}
		break;
8000a766:	c0 88       	rjmp	8000a776 <genclk_enable_source+0x66>
#endif

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000a768:	30 0c       	mov	r12,0
8000a76a:	f0 1f 00 08 	mcall	8000a788 <genclk_enable_source+0x78>
8000a76e:	c0 48       	rjmp	8000a776 <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000a770:	d7 03       	nop
8000a772:	c0 28       	rjmp	8000a776 <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
			osc_enable(OSC_ID_OSC1);
			osc_wait_ready(OSC_ID_OSC1);
		}
		break;
8000a774:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000a776:	2f fd       	sub	sp,-4
8000a778:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a77c:	80 00       	ld.sh	r0,r0[0x0]
8000a77e:	a3 24       	st.d	r1++,r4
8000a780:	80 00       	ld.sh	r0,r0[0x0]
8000a782:	a2 64       	st.h	r1[0xc],r4
8000a784:	80 00       	ld.sh	r0,r0[0x0]
8000a786:	a3 c0       	cbr	r0,0x2
8000a788:	80 00       	ld.sh	r0,r0[0x0]
8000a78a:	a5 c0       	cbr	r0,0x4

8000a78c <genclk_enable_config>:
 * \param id      The ID of the generic clock.
 * \param src     The source clock of the generic clock.
 * \param divider The divider used to generate the generic clock.
 */
static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
8000a78c:	eb cd 40 80 	pushm	r7,lr
8000a790:	1a 97       	mov	r7,sp
8000a792:	20 4d       	sub	sp,16
8000a794:	ef 4c ff f8 	st.w	r7[-8],r12
8000a798:	ef 4b ff f4 	st.w	r7[-12],r11
8000a79c:	ef 4a ff f0 	st.w	r7[-16],r10
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, id);
8000a7a0:	ee c8 00 04 	sub	r8,r7,4
8000a7a4:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a7a8:	10 9c       	mov	r12,r8
8000a7aa:	f0 1f 00 10 	mcall	8000a7e8 <genclk_enable_config+0x5c>
	genclk_enable_source(src);
8000a7ae:	ee fc ff f4 	ld.w	r12,r7[-12]
8000a7b2:	f0 1f 00 0f 	mcall	8000a7ec <genclk_enable_config+0x60>
	genclk_config_set_source(&gcfg, src);
8000a7b6:	ee c8 00 04 	sub	r8,r7,4
8000a7ba:	ee fb ff f4 	ld.w	r11,r7[-12]
8000a7be:	10 9c       	mov	r12,r8
8000a7c0:	f0 1f 00 0c 	mcall	8000a7f0 <genclk_enable_config+0x64>
	genclk_config_set_divider(&gcfg, divider);
8000a7c4:	ee c8 00 04 	sub	r8,r7,4
8000a7c8:	ee fb ff f0 	ld.w	r11,r7[-16]
8000a7cc:	10 9c       	mov	r12,r8
8000a7ce:	f0 1f 00 0a 	mcall	8000a7f4 <genclk_enable_config+0x68>
	genclk_enable(&gcfg, id);
8000a7d2:	ee c8 00 04 	sub	r8,r7,4
8000a7d6:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a7da:	10 9c       	mov	r12,r8
8000a7dc:	f0 1f 00 07 	mcall	8000a7f8 <genclk_enable_config+0x6c>
}
8000a7e0:	2f cd       	sub	sp,-16
8000a7e2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a7e6:	00 00       	add	r0,r0
8000a7e8:	80 00       	ld.sh	r0,r0[0x0]
8000a7ea:	a6 34       	st.h	r3[0x6],r4
8000a7ec:	80 00       	ld.sh	r0,r0[0x0]
8000a7ee:	a7 10       	ld.d	r0,--r3
8000a7f0:	80 00       	ld.sh	r0,r0[0x0]
8000a7f2:	a6 52       	st.h	r3[0xa],r2
8000a7f4:	80 00       	ld.sh	r0,r0[0x0]
8000a7f6:	a6 88       	st.b	r3[0x0],r8
8000a7f8:	80 00       	ld.sh	r0,r0[0x0]
8000a7fa:	a6 e4       	st.b	r3[0x6],r4

8000a7fc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000a7fc:	eb cd 40 80 	pushm	r7,lr
8000a800:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000a802:	30 0c       	mov	r12,0
8000a804:	f0 1f 00 06 	mcall	8000a81c <sysclk_get_main_hz+0x20>
8000a808:	18 99       	mov	r9,r12
8000a80a:	12 98       	mov	r8,r9
8000a80c:	a3 68       	lsl	r8,0x2
8000a80e:	12 08       	add	r8,r9
8000a810:	a1 78       	lsl	r8,0x1
8000a812:	12 08       	add	r8,r9
8000a814:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000a816:	10 9c       	mov	r12,r8
8000a818:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a81c:	80 00       	ld.sh	r0,r0[0x0]
8000a81e:	a3 7c       	lsl	r12,0x3

8000a820 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000a820:	eb cd 40 80 	pushm	r7,lr
8000a824:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000a826:	f0 1f 00 04 	mcall	8000a834 <sysclk_get_cpu_hz+0x14>
8000a82a:	18 98       	mov	r8,r12
}
8000a82c:	10 9c       	mov	r12,r8
8000a82e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a832:	00 00       	add	r0,r0
8000a834:	80 00       	ld.sh	r0,r0[0x0]
8000a836:	a7 fc       	*unknown*

8000a838 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000a838:	eb cd 40 80 	pushm	r7,lr
8000a83c:	1a 97       	mov	r7,sp
8000a83e:	20 1d       	sub	sp,4
8000a840:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000a844:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a848:	30 1c       	mov	r12,1
8000a84a:	f0 1f 00 03 	mcall	8000a854 <sysclk_enable_hsb_module+0x1c>
}
8000a84e:	2f fd       	sub	sp,-4
8000a850:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a854:	80 00       	ld.sh	r0,r0[0x0]
8000a856:	a8 ac       	st.b	r4[0x2],r12

8000a858 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint_fast8_t src)
{
8000a858:	eb cd 40 80 	pushm	r7,lr
8000a85c:	1a 97       	mov	r7,sp
8000a85e:	20 3d       	sub	sp,12
8000a860:	ef 4c ff f4 	st.w	r7[-12],r12
	irqflags_t flags;
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
8000a864:	f0 1f 00 10 	mcall	8000a8a4 <sysclk_set_source+0x4c>
8000a868:	18 98       	mov	r8,r12
8000a86a:	ef 48 ff f8 	st.w	r7[-8],r8
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
8000a86e:	fe 78 0c 00 	mov	r8,-62464
8000a872:	70 08       	ld.w	r8,r8[0x0]
8000a874:	e0 18 ff fc 	andl	r8,0xfffc
8000a878:	ef 48 ff fc 	st.w	r7[-4],r8
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
8000a87c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a880:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a884:	f3 e8 10 08 	or	r8,r9,r8
8000a888:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.mcctrl = mcctrl;
8000a88c:	fe 78 0c 00 	mov	r8,-62464
8000a890:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a894:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000a896:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a89a:	f0 1f 00 04 	mcall	8000a8a8 <sysclk_set_source+0x50>
}
8000a89e:	2f dd       	sub	sp,-12
8000a8a0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a8a4:	80 00       	ld.sh	r0,r0[0x0]
8000a8a6:	a2 2c       	st.h	r1[0x4],r12
8000a8a8:	80 00       	ld.sh	r0,r0[0x0]
8000a8aa:	a2 4a       	st.h	r1[0x8],r10

8000a8ac <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8000a8ac:	eb cd 40 80 	pushm	r7,lr
8000a8b0:	1a 97       	mov	r7,sp
8000a8b2:	20 4d       	sub	sp,16
8000a8b4:	ef 4c ff f4 	st.w	r7[-12],r12
8000a8b8:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8000a8bc:	f0 1f 00 17 	mcall	8000a918 <sysclk_priv_enable_module+0x6c>
8000a8c0:	18 98       	mov	r8,r12
8000a8c2:	ef 48 ff f8 	st.w	r7[-8],r8

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000a8c6:	fe 78 0c 00 	mov	r8,-62464
8000a8ca:	71 58       	ld.w	r8,r8[0x54]
8000a8cc:	e2 18 00 40 	andl	r8,0x40,COH
8000a8d0:	cf b0       	breq	8000a8c6 <sysclk_priv_enable_module+0x1a>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000a8d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a8d6:	a3 68       	lsl	r8,0x2
8000a8d8:	e0 28 f3 f8 	sub	r8,62456
8000a8dc:	70 08       	ld.w	r8,r8[0x0]
8000a8de:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8000a8e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a8e6:	30 19       	mov	r9,1
8000a8e8:	f2 08 09 48 	lsl	r8,r9,r8
8000a8ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a8f0:	f3 e8 10 08 	or	r8,r9,r8
8000a8f4:	ef 48 ff fc 	st.w	r7[-4],r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000a8f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a8fc:	a3 68       	lsl	r8,0x2
8000a8fe:	e0 28 f3 f8 	sub	r8,62456
8000a902:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a906:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8000a908:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a90c:	f0 1f 00 04 	mcall	8000a91c <sysclk_priv_enable_module+0x70>
}
8000a910:	2f cd       	sub	sp,-16
8000a912:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a916:	00 00       	add	r0,r0
8000a918:	80 00       	ld.sh	r0,r0[0x0]
8000a91a:	a2 2c       	st.h	r1[0x4],r12
8000a91c:	80 00       	ld.sh	r0,r0[0x0]
8000a91e:	a2 4a       	st.h	r1[0x8],r10

8000a920 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
8000a920:	eb cd 40 80 	pushm	r7,lr
8000a924:	1a 97       	mov	r7,sp
8000a926:	20 3d       	sub	sp,12
8000a928:	ef 4c ff f4 	st.w	r7[-12],r12
	unsigned int pbus_id = 0;
8000a92c:	30 08       	mov	r8,0
8000a92e:	ef 48 ff f8 	st.w	r7[-8],r8
	irqflags_t   flags;

	/* The AES module is on PBC, others are on PBB */
	if (index == SYSCLK_AES)
8000a932:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a936:	58 98       	cp.w	r8,9
8000a938:	c0 41       	brne	8000a940 <sysclk_enable_pbb_module+0x20>
		pbus_id = 1;
8000a93a:	30 18       	mov	r8,1
8000a93c:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
8000a940:	f0 1f 00 15 	mcall	8000a994 <sysclk_enable_pbb_module+0x74>
8000a944:	18 98       	mov	r8,r12
8000a946:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!sysclk_bus_refcount[pbus_id])
8000a94a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a94e:	49 39       	lddpc	r9,8000a998 <sysclk_enable_pbb_module+0x78>
8000a950:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000a954:	58 08       	cp.w	r8,0
8000a956:	c0 91       	brne	8000a968 <sysclk_enable_pbb_module+0x48>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
8000a958:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a95c:	a1 78       	lsl	r8,0x1
8000a95e:	2f f8       	sub	r8,-1
8000a960:	a1 78       	lsl	r8,0x1
8000a962:	10 9c       	mov	r12,r8
8000a964:	f0 1f 00 0e 	mcall	8000a99c <sysclk_enable_pbb_module+0x7c>
	sysclk_bus_refcount[pbus_id]++;
8000a968:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a96c:	48 b9       	lddpc	r9,8000a998 <sysclk_enable_pbb_module+0x78>
8000a96e:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000a972:	2f f9       	sub	r9,-1
8000a974:	5c 59       	castu.b	r9
8000a976:	48 9a       	lddpc	r10,8000a998 <sysclk_enable_pbb_module+0x78>
8000a978:	f4 08 0b 09 	st.b	r10[r8],r9

	cpu_irq_restore(flags);
8000a97c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a980:	f0 1f 00 08 	mcall	8000a9a0 <sysclk_enable_pbb_module+0x80>

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
8000a984:	ee fb ff f4 	ld.w	r11,r7[-12]
8000a988:	30 3c       	mov	r12,3
8000a98a:	f0 1f 00 07 	mcall	8000a9a4 <sysclk_enable_pbb_module+0x84>
}
8000a98e:	2f dd       	sub	sp,-12
8000a990:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a994:	80 00       	ld.sh	r0,r0[0x0]
8000a996:	a2 2c       	st.h	r1[0x4],r12
8000a998:	00 00       	add	r0,r0
8000a99a:	06 94       	mov	r4,r3
8000a99c:	80 00       	ld.sh	r0,r0[0x0]
8000a99e:	a8 38       	st.h	r4[0x6],r8
8000a9a0:	80 00       	ld.sh	r0,r0[0x0]
8000a9a2:	a2 4a       	st.h	r1[0x8],r10
8000a9a4:	80 00       	ld.sh	r0,r0[0x0]
8000a9a6:	a8 ac       	st.b	r4[0x2],r12

8000a9a8 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8000a9a8:	eb cd 40 80 	pushm	r7,lr
8000a9ac:	1a 97       	mov	r7,sp
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
8000a9ae:	30 1c       	mov	r12,1
8000a9b0:	f0 1f 00 06 	mcall	8000a9c8 <sysclk_enable_usb+0x20>
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000a9b4:	30 3c       	mov	r12,3
8000a9b6:	f0 1f 00 06 	mcall	8000a9cc <sysclk_enable_usb+0x24>
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
8000a9ba:	30 1a       	mov	r10,1
8000a9bc:	30 0b       	mov	r11,0
8000a9be:	30 4c       	mov	r12,4
8000a9c0:	f0 1f 00 04 	mcall	8000a9d0 <sysclk_enable_usb+0x28>
}
8000a9c4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9c8:	80 00       	ld.sh	r0,r0[0x0]
8000a9ca:	a9 20       	st.d	r4++,r0
8000a9cc:	80 00       	ld.sh	r0,r0[0x0]
8000a9ce:	a8 38       	st.h	r4[0x6],r8
8000a9d0:	80 00       	ld.sh	r0,r0[0x0]
8000a9d2:	a7 8c       	lsr	r12,0x6

8000a9d4 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8000a9d4:	eb cd 40 80 	pushm	r7,lr
8000a9d8:	1a 97       	mov	r7,sp
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000a9da:	30 0c       	mov	r12,0
8000a9dc:	f0 1f 00 07 	mcall	8000a9f8 <sysclk_init+0x24>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
8000a9e0:	f0 1f 00 07 	mcall	8000a9fc <sysclk_init+0x28>
8000a9e4:	18 98       	mov	r8,r12
8000a9e6:	10 9c       	mov	r12,r8
8000a9e8:	f0 1f 00 06 	mcall	8000aa00 <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_PLL0);
8000a9ec:	30 2c       	mov	r12,2
8000a9ee:	f0 1f 00 06 	mcall	8000aa04 <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000a9f2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9f6:	00 00       	add	r0,r0
8000a9f8:	80 00       	ld.sh	r0,r0[0x0]
8000a9fa:	a5 c0       	cbr	r0,0x4
8000a9fc:	80 00       	ld.sh	r0,r0[0x0]
8000a9fe:	a8 20       	st.h	r4[0x4],r0
8000aa00:	80 00       	ld.sh	r0,r0[0x0]
8000aa02:	73 1c       	ld.w	r12,r9[0x44]
8000aa04:	80 00       	ld.sh	r0,r0[0x0]
8000aa06:	a8 58       	st.h	r4[0xa],r8
8000aa08:	22 53       	sub	r3,37
8000aa0a:	44 20       	lddsp	r0,sp[0x108]
8000aa0c:	43 61       	lddsp	r1,sp[0xd8]
8000aa0e:	72 64       	ld.w	r4,r9[0x18]
8000aa10:	20 53       	sub	r3,5
8000aa12:	6c 6f       	ld.w	pc,r6[0x18]
8000aa14:	74 20       	ld.w	r0,r10[0x8]
8000aa16:	30 22       	mov	r2,2
8000aa18:	00 00       	add	r0,r0
8000aa1a:	00 00       	add	r0,r0
8000aa1c:	22 53       	sub	r3,37
8000aa1e:	44 20       	lddsp	r0,sp[0x108]
8000aa20:	43 61       	lddsp	r1,sp[0xd8]
8000aa22:	72 64       	ld.w	r4,r9[0x18]
8000aa24:	20 53       	sub	r3,5
8000aa26:	6c 6f       	ld.w	pc,r6[0x18]
8000aa28:	74 20       	ld.w	r0,r10[0x8]
8000aa2a:	31 22       	mov	r2,18
8000aa2c:	00 00       	add	r0,r0
	...

8000aa30 <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
8000aa30:	eb cd 40 80 	pushm	r7,lr
8000aa34:	1a 97       	mov	r7,sp

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
8000aa36:	30 28       	mov	r8,2
#endif
}
8000aa38:	10 9c       	mov	r12,r8
8000aa3a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa3e:	d7 03       	nop

8000aa40 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
8000aa40:	eb cd 40 80 	pushm	r7,lr
8000aa44:	1a 97       	mov	r7,sp
8000aa46:	20 2d       	sub	sp,8
8000aa48:	18 98       	mov	r8,r12
8000aa4a:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000aa4e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aa52:	30 18       	mov	r8,1
8000aa54:	f0 09 18 00 	cp.b	r9,r8
8000aa58:	e0 8b 00 0f 	brhi	8000aa76 <mem_test_unit_ready+0x36>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
8000aa5c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aa60:	48 aa       	lddpc	r10,8000aa88 <mem_test_unit_ready+0x48>
8000aa62:	12 98       	mov	r8,r9
8000aa64:	a3 78       	lsl	r8,0x3
8000aa66:	12 18       	sub	r8,r9
8000aa68:	a3 68       	lsl	r8,0x2
8000aa6a:	f4 08 00 08 	add	r8,r10,r8
8000aa6e:	70 08       	ld.w	r8,r8[0x0]
8000aa70:	5d 18       	icall	r8
8000aa72:	18 98       	mov	r8,r12
8000aa74:	c0 28       	rjmp	8000aa78 <mem_test_unit_ready+0x38>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000aa76:	30 18       	mov	r8,1
8000aa78:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000aa7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000aa80:	10 9c       	mov	r12,r8
8000aa82:	2f ed       	sub	sp,-8
8000aa84:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa88:	80 00       	ld.sh	r0,r0[0x0]
8000aa8a:	dc 24       	*unknown*

8000aa8c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
8000aa8c:	eb cd 40 80 	pushm	r7,lr
8000aa90:	1a 97       	mov	r7,sp
8000aa92:	20 3d       	sub	sp,12
8000aa94:	18 98       	mov	r8,r12
8000aa96:	ef 4b ff f4 	st.w	r7[-12],r11
8000aa9a:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000aa9e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aaa2:	30 18       	mov	r8,1
8000aaa4:	f0 09 18 00 	cp.b	r9,r8
8000aaa8:	e0 8b 00 10 	brhi	8000aac8 <mem_read_capacity+0x3c>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
8000aaac:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aab0:	48 ba       	lddpc	r10,8000aadc <mem_read_capacity+0x50>
8000aab2:	12 98       	mov	r8,r9
8000aab4:	a3 78       	lsl	r8,0x3
8000aab6:	12 18       	sub	r8,r9
8000aab8:	2f f8       	sub	r8,-1
8000aaba:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
8000aabe:	ee fc ff f4 	ld.w	r12,r7[-12]
8000aac2:	5d 18       	icall	r8
8000aac4:	18 98       	mov	r8,r12
8000aac6:	c0 28       	rjmp	8000aaca <mem_read_capacity+0x3e>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000aac8:	30 18       	mov	r8,1
8000aaca:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000aace:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000aad2:	10 9c       	mov	r12,r8
8000aad4:	2f dd       	sub	sp,-12
8000aad6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aada:	00 00       	add	r0,r0
8000aadc:	80 00       	ld.sh	r0,r0[0x0]
8000aade:	dc 24       	*unknown*

8000aae0 <mem_wr_protect>:
  return sector_size;
}


bool mem_wr_protect(U8 lun)
{
8000aae0:	eb cd 40 80 	pushm	r7,lr
8000aae4:	1a 97       	mov	r7,sp
8000aae6:	20 2d       	sub	sp,8
8000aae8:	18 98       	mov	r8,r12
8000aaea:	ef 68 ff f8 	st.b	r7[-8],r8
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000aaee:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aaf2:	30 18       	mov	r8,1
8000aaf4:	f0 09 18 00 	cp.b	r9,r8
8000aaf8:	e0 8b 00 10 	brhi	8000ab18 <mem_wr_protect+0x38>
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
8000aafc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ab00:	48 ba       	lddpc	r10,8000ab2c <mem_wr_protect+0x4c>
8000ab02:	12 98       	mov	r8,r9
8000ab04:	a3 78       	lsl	r8,0x3
8000ab06:	12 18       	sub	r8,r9
8000ab08:	a3 68       	lsl	r8,0x2
8000ab0a:	f4 08 00 08 	add	r8,r10,r8
8000ab0e:	2f 88       	sub	r8,-8
8000ab10:	70 08       	ld.w	r8,r8[0x0]
8000ab12:	5d 18       	icall	r8
8000ab14:	18 98       	mov	r8,r12
8000ab16:	c0 28       	rjmp	8000ab1a <mem_wr_protect+0x3a>
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000ab18:	30 18       	mov	r8,1
8000ab1a:	ef 68 ff ff 	st.b	r7[-1],r8
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
8000ab1e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000ab22:	10 9c       	mov	r12,r8
8000ab24:	2f ed       	sub	sp,-8
8000ab26:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab2a:	00 00       	add	r0,r0
8000ab2c:	80 00       	ld.sh	r0,r0[0x0]
8000ab2e:	dc 24       	*unknown*

8000ab30 <mem_name>:
  return removal;
}


const char *mem_name(U8 lun)
{
8000ab30:	eb cd 40 80 	pushm	r7,lr
8000ab34:	1a 97       	mov	r7,sp
8000ab36:	20 1d       	sub	sp,4
8000ab38:	18 98       	mov	r8,r12
8000ab3a:	ef 68 ff fc 	st.b	r7[-4],r8
  return
8000ab3e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000ab42:	30 18       	mov	r8,1
8000ab44:	f0 09 18 00 	cp.b	r9,r8
8000ab48:	e0 8b 00 0e 	brhi	8000ab64 <mem_name+0x34>
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
8000ab4c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
}


const char *mem_name(U8 lun)
{
  return
8000ab50:	48 8a       	lddpc	r10,8000ab70 <mem_name+0x40>
8000ab52:	12 98       	mov	r8,r9
8000ab54:	a3 78       	lsl	r8,0x3
8000ab56:	12 18       	sub	r8,r9
8000ab58:	a3 68       	lsl	r8,0x2
8000ab5a:	f4 08 00 08 	add	r8,r10,r8
8000ab5e:	2e 88       	sub	r8,-24
8000ab60:	70 08       	ld.w	r8,r8[0x0]
8000ab62:	c0 28       	rjmp	8000ab66 <mem_name+0x36>
8000ab64:	30 08       	mov	r8,0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
8000ab66:	10 9c       	mov	r12,r8
8000ab68:	2f fd       	sub	sp,-4
8000ab6a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab6e:	00 00       	add	r0,r0
8000ab70:	80 00       	ld.sh	r0,r0[0x0]
8000ab72:	dc 24       	*unknown*

8000ab74 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
8000ab74:	eb cd 40 80 	pushm	r7,lr
8000ab78:	1a 97       	mov	r7,sp
8000ab7a:	20 4d       	sub	sp,16
8000ab7c:	18 99       	mov	r9,r12
8000ab7e:	ef 4b ff f4 	st.w	r7[-12],r11
8000ab82:	14 98       	mov	r8,r10
8000ab84:	ef 69 ff f8 	st.b	r7[-8],r9
8000ab88:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
8000ab8c:	f0 1f 00 14 	mcall	8000abdc <memory_2_usb+0x68>
  status =
8000ab90:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ab94:	30 18       	mov	r8,1
8000ab96:	f0 09 18 00 	cp.b	r9,r8
8000ab9a:	e0 8b 00 15 	brhi	8000abc4 <memory_2_usb+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
8000ab9e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aba2:	49 0a       	lddpc	r10,8000abe0 <memory_2_usb+0x6c>
8000aba4:	12 98       	mov	r8,r9
8000aba6:	a3 78       	lsl	r8,0x3
8000aba8:	12 18       	sub	r8,r9
8000abaa:	a3 68       	lsl	r8,0x2
8000abac:	f4 08 00 08 	add	r8,r10,r8
8000abb0:	2f 08       	sub	r8,-16
8000abb2:	70 08       	ld.w	r8,r8[0x0]
8000abb4:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000abb8:	12 9b       	mov	r11,r9
8000abba:	ee fc ff f4 	ld.w	r12,r7[-12]
8000abbe:	5d 18       	icall	r8
8000abc0:	18 98       	mov	r8,r12
8000abc2:	c0 28       	rjmp	8000abc6 <memory_2_usb+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
8000abc4:	30 18       	mov	r8,1
8000abc6:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
8000abca:	f0 1f 00 07 	mcall	8000abe4 <memory_2_usb+0x70>

  Ctrl_access_unlock();

  return status;
8000abce:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000abd2:	10 9c       	mov	r12,r8
8000abd4:	2f cd       	sub	sp,-16
8000abd6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000abda:	00 00       	add	r0,r0
8000abdc:	80 00       	ld.sh	r0,r0[0x0]
8000abde:	ac ac       	st.b	r6[0x2],r12
8000abe0:	80 00       	ld.sh	r0,r0[0x0]
8000abe2:	dc 24       	*unknown*
8000abe4:	80 00       	ld.sh	r0,r0[0x0]
8000abe6:	ac c0       	st.b	r6[0x4],r0

8000abe8 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
8000abe8:	eb cd 40 80 	pushm	r7,lr
8000abec:	1a 97       	mov	r7,sp
8000abee:	20 4d       	sub	sp,16
8000abf0:	18 99       	mov	r9,r12
8000abf2:	ef 4b ff f4 	st.w	r7[-12],r11
8000abf6:	14 98       	mov	r8,r10
8000abf8:	ef 69 ff f8 	st.b	r7[-8],r9
8000abfc:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
8000ac00:	f0 1f 00 14 	mcall	8000ac50 <usb_2_memory+0x68>
  status =
8000ac04:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ac08:	30 18       	mov	r8,1
8000ac0a:	f0 09 18 00 	cp.b	r9,r8
8000ac0e:	e0 8b 00 15 	brhi	8000ac38 <usb_2_memory+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
8000ac12:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ac16:	49 0a       	lddpc	r10,8000ac54 <usb_2_memory+0x6c>
8000ac18:	12 98       	mov	r8,r9
8000ac1a:	a3 78       	lsl	r8,0x3
8000ac1c:	12 18       	sub	r8,r9
8000ac1e:	a3 68       	lsl	r8,0x2
8000ac20:	f4 08 00 08 	add	r8,r10,r8
8000ac24:	2e c8       	sub	r8,-20
8000ac26:	70 08       	ld.w	r8,r8[0x0]
8000ac28:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000ac2c:	12 9b       	mov	r11,r9
8000ac2e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000ac32:	5d 18       	icall	r8
8000ac34:	18 98       	mov	r8,r12
8000ac36:	c0 28       	rjmp	8000ac3a <usb_2_memory+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
8000ac38:	30 18       	mov	r8,1
8000ac3a:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
8000ac3e:	f0 1f 00 07 	mcall	8000ac58 <usb_2_memory+0x70>

  Ctrl_access_unlock();

  return status;
8000ac42:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000ac46:	10 9c       	mov	r12,r8
8000ac48:	2f cd       	sub	sp,-16
8000ac4a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac4e:	00 00       	add	r0,r0
8000ac50:	80 00       	ld.sh	r0,r0[0x0]
8000ac52:	ac d4       	st.b	r6[0x5],r4
8000ac54:	80 00       	ld.sh	r0,r0[0x0]
8000ac56:	dc 24       	*unknown*
8000ac58:	80 00       	ld.sh	r0,r0[0x0]
8000ac5a:	ac e8       	st.b	r6[0x6],r8

8000ac5c <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
8000ac5c:	eb cd 40 80 	pushm	r7,lr
8000ac60:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000ac62:	30 1c       	mov	r12,1
8000ac64:	f0 1f 00 04 	mcall	8000ac74 <ui_init+0x18>
	LED_Off(LED1);
8000ac68:	30 2c       	mov	r12,2
8000ac6a:	f0 1f 00 04 	mcall	8000ac78 <ui_init+0x1c>
}
8000ac6e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac72:	00 00       	add	r0,r0
8000ac74:	80 00       	ld.sh	r0,r0[0x0]
8000ac76:	30 f8       	mov	r8,15
8000ac78:	80 00       	ld.sh	r0,r0[0x0]
8000ac7a:	30 40       	mov	r0,4

8000ac7c <ui_powerdown>:

void ui_powerdown(void)
{
8000ac7c:	eb cd 40 80 	pushm	r7,lr
8000ac80:	1a 97       	mov	r7,sp
	LED_Off(LED0);
8000ac82:	30 1c       	mov	r12,1
8000ac84:	f0 1f 00 04 	mcall	8000ac94 <ui_powerdown+0x18>
	LED_Off(LED1);
8000ac88:	30 2c       	mov	r12,2
8000ac8a:	f0 1f 00 03 	mcall	8000ac94 <ui_powerdown+0x18>
}
8000ac8e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac92:	00 00       	add	r0,r0
8000ac94:	80 00       	ld.sh	r0,r0[0x0]
8000ac96:	30 40       	mov	r0,4

8000ac98 <ui_wakeup>:

void ui_wakeup(void)
{
8000ac98:	eb cd 40 80 	pushm	r7,lr
8000ac9c:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000ac9e:	30 1c       	mov	r12,1
8000aca0:	f0 1f 00 02 	mcall	8000aca8 <ui_wakeup+0x10>
}
8000aca4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aca8:	80 00       	ld.sh	r0,r0[0x0]
8000acaa:	30 f8       	mov	r8,15

8000acac <ui_start_read>:

void ui_start_read(void)
{
8000acac:	eb cd 40 80 	pushm	r7,lr
8000acb0:	1a 97       	mov	r7,sp
	LED_On(LED2);
8000acb2:	30 4c       	mov	r12,4
8000acb4:	f0 1f 00 02 	mcall	8000acbc <ui_start_read+0x10>
}
8000acb8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000acbc:	80 00       	ld.sh	r0,r0[0x0]
8000acbe:	30 f8       	mov	r8,15

8000acc0 <ui_stop_read>:

void ui_stop_read(void)
{
8000acc0:	eb cd 40 80 	pushm	r7,lr
8000acc4:	1a 97       	mov	r7,sp
	LED_Off(LED2);
8000acc6:	30 4c       	mov	r12,4
8000acc8:	f0 1f 00 02 	mcall	8000acd0 <ui_stop_read+0x10>
}
8000accc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000acd0:	80 00       	ld.sh	r0,r0[0x0]
8000acd2:	30 40       	mov	r0,4

8000acd4 <ui_start_write>:

void ui_start_write(void)
{
8000acd4:	eb cd 40 80 	pushm	r7,lr
8000acd8:	1a 97       	mov	r7,sp
	LED_On(LED3);
8000acda:	30 8c       	mov	r12,8
8000acdc:	f0 1f 00 02 	mcall	8000ace4 <ui_start_write+0x10>
}
8000ace0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ace4:	80 00       	ld.sh	r0,r0[0x0]
8000ace6:	30 f8       	mov	r8,15

8000ace8 <ui_stop_write>:

void ui_stop_write(void)
{
8000ace8:	eb cd 40 80 	pushm	r7,lr
8000acec:	1a 97       	mov	r7,sp
	LED_Off(LED3);
8000acee:	30 8c       	mov	r12,8
8000acf0:	f0 1f 00 02 	mcall	8000acf8 <ui_stop_write+0x10>
}
8000acf4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000acf8:	80 00       	ld.sh	r0,r0[0x0]
8000acfa:	30 40       	mov	r0,4

8000acfc <ui_process>:

void ui_process(uint16_t framenumber)
{
8000acfc:	eb cd 40 80 	pushm	r7,lr
8000ad00:	1a 97       	mov	r7,sp
8000ad02:	20 1d       	sub	sp,4
8000ad04:	18 98       	mov	r8,r12
8000ad06:	ef 58 ff fc 	st.h	r7[-4],r8
	if ((framenumber % 1000) == 0) {
8000ad0a:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000ad0e:	e0 68 4d d3 	mov	r8,19923
8000ad12:	ea 18 10 62 	orh	r8,0x1062
8000ad16:	f4 08 06 48 	mulu.d	r8,r10,r8
8000ad1a:	a7 89       	lsr	r9,0x6
8000ad1c:	e0 68 03 e8 	mov	r8,1000
8000ad20:	f2 08 02 48 	mul	r8,r9,r8
8000ad24:	f4 08 01 08 	sub	r8,r10,r8
8000ad28:	5c 88       	casts.h	r8
8000ad2a:	c0 41       	brne	8000ad32 <ui_process+0x36>
		LED_On(LED1);
8000ad2c:	30 2c       	mov	r12,2
8000ad2e:	f0 1f 00 10 	mcall	8000ad6c <ui_process+0x70>
	}
	if ((framenumber % 1000) == 500) {
8000ad32:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000ad36:	e0 68 4d d3 	mov	r8,19923
8000ad3a:	ea 18 10 62 	orh	r8,0x1062
8000ad3e:	f4 08 06 48 	mulu.d	r8,r10,r8
8000ad42:	a7 89       	lsr	r9,0x6
8000ad44:	e0 68 03 e8 	mov	r8,1000
8000ad48:	f2 08 02 48 	mul	r8,r9,r8
8000ad4c:	f4 08 01 08 	sub	r8,r10,r8
8000ad50:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000ad54:	e0 68 01 f4 	mov	r8,500
8000ad58:	f0 09 19 00 	cp.h	r9,r8
8000ad5c:	c0 41       	brne	8000ad64 <ui_process+0x68>
		LED_Off(LED1);
8000ad5e:	30 2c       	mov	r12,2
8000ad60:	f0 1f 00 04 	mcall	8000ad70 <ui_process+0x74>
	}
}
8000ad64:	2f fd       	sub	sp,-4
8000ad66:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ad6a:	00 00       	add	r0,r0
8000ad6c:	80 00       	ld.sh	r0,r0[0x0]
8000ad6e:	30 f8       	mov	r8,15
8000ad70:	80 00       	ld.sh	r0,r0[0x0]
8000ad72:	30 40       	mov	r0,4

8000ad74 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
8000ad74:	eb cd 40 80 	pushm	r7,lr
8000ad78:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000ad7a:	49 49       	lddpc	r9,8000adc8 <udi_msc_enable+0x54>
8000ad7c:	30 08       	mov	r8,0
8000ad7e:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_cbw_invalid = false;
8000ad80:	49 39       	lddpc	r9,8000adcc <udi_msc_enable+0x58>
8000ad82:	30 08       	mov	r8,0
8000ad84:	b2 88       	st.b	r9[0x0],r8
	udi_msc_nb_lun = get_nb_lun();
8000ad86:	f0 1f 00 13 	mcall	8000add0 <udi_msc_enable+0x5c>
8000ad8a:	18 98       	mov	r8,r12
8000ad8c:	49 29       	lddpc	r9,8000add4 <udi_msc_enable+0x60>
8000ad8e:	b2 88       	st.b	r9[0x0],r8
	if (0 == udi_msc_nb_lun)
8000ad90:	49 18       	lddpc	r8,8000add4 <udi_msc_enable+0x60>
8000ad92:	11 88       	ld.ub	r8,r8[0x0]
8000ad94:	58 08       	cp.w	r8,0
8000ad96:	c0 31       	brne	8000ad9c <udi_msc_enable+0x28>
		return false;	// No lun available, then not authorize to enable interface
8000ad98:	30 08       	mov	r8,0
8000ad9a:	c1 38       	rjmp	8000adc0 <udi_msc_enable+0x4c>
	udi_msc_nb_lun--;
8000ad9c:	48 e8       	lddpc	r8,8000add4 <udi_msc_enable+0x60>
8000ad9e:	11 88       	ld.ub	r8,r8[0x0]
8000ada0:	20 18       	sub	r8,1
8000ada2:	5c 58       	castu.b	r8
8000ada4:	48 c9       	lddpc	r9,8000add4 <udi_msc_enable+0x60>
8000ada6:	b2 88       	st.b	r9[0x0],r8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
8000ada8:	f0 1f 00 0c 	mcall	8000add8 <udi_msc_enable+0x64>
8000adac:	18 98       	mov	r8,r12
8000adae:	ec 18 00 01 	eorl	r8,0x1
8000adb2:	5c 58       	castu.b	r8
8000adb4:	c0 30       	breq	8000adba <udi_msc_enable+0x46>
		return false;
8000adb6:	30 08       	mov	r8,0
8000adb8:	c0 48       	rjmp	8000adc0 <udi_msc_enable+0x4c>
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
8000adba:	f0 1f 00 09 	mcall	8000addc <udi_msc_enable+0x68>
	return true;
8000adbe:	30 18       	mov	r8,1
}
8000adc0:	10 9c       	mov	r12,r8
8000adc2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000adc6:	00 00       	add	r0,r0
8000adc8:	00 00       	add	r0,r0
8000adca:	06 d1       	st.w	--r3,r1
8000adcc:	00 00       	add	r0,r0
8000adce:	06 d0       	st.w	--r3,r0
8000add0:	80 00       	ld.sh	r0,r0[0x0]
8000add2:	aa 30       	st.h	r5[0x6],r0
8000add4:	00 00       	add	r0,r0
8000add6:	06 b8       	st.h	r3++,r8
8000add8:	80 00       	ld.sh	r0,r0[0x0]
8000adda:	cc a4       	brge	8000ad6e <ui_process+0x72>
8000addc:	80 00       	ld.sh	r0,r0[0x0]
8000adde:	af 58       	asr	r8,0xf

8000ade0 <udi_msc_disable>:


void udi_msc_disable(void)
{
8000ade0:	eb cd 40 80 	pushm	r7,lr
8000ade4:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000ade6:	48 49       	lddpc	r9,8000adf4 <udi_msc_disable+0x14>
8000ade8:	30 08       	mov	r8,0
8000adea:	b2 88       	st.b	r9[0x0],r8
	UDI_MSC_DISABLE_EXT();
8000adec:	f0 1f 00 03 	mcall	8000adf8 <udi_msc_disable+0x18>
}
8000adf0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000adf4:	00 00       	add	r0,r0
8000adf6:	06 d1       	st.w	--r3,r1
8000adf8:	80 00       	ld.sh	r0,r0[0x0]
8000adfa:	cc bc       	rcall	8000af90 <udi_msc_cbw_wait+0x38>

8000adfc <udi_msc_setup>:


bool udi_msc_setup(void)
{
8000adfc:	eb cd 40 80 	pushm	r7,lr
8000ae00:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000ae02:	4a f8       	lddpc	r8,8000aebc <udi_msc_setup+0xc0>
8000ae04:	11 88       	ld.ub	r8,r8[0x0]
8000ae06:	10 99       	mov	r9,r8
8000ae08:	30 08       	mov	r8,0
8000ae0a:	f0 09 18 00 	cp.b	r9,r8
8000ae0e:	c2 34       	brge	8000ae54 <udi_msc_setup+0x58>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000ae10:	4a b8       	lddpc	r8,8000aebc <udi_msc_setup+0xc0>
8000ae12:	11 88       	ld.ub	r8,r8[0x0]
8000ae14:	e2 18 00 60 	andl	r8,0x60,COH
8000ae18:	e0 48 00 20 	cp.w	r8,32
8000ae1c:	c1 c1       	brne	8000ae54 <udi_msc_setup+0x58>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000ae1e:	4a 88       	lddpc	r8,8000aebc <udi_msc_setup+0xc0>
8000ae20:	11 98       	ld.ub	r8,r8[0x1]
8000ae22:	e0 48 00 fe 	cp.w	r8,254
8000ae26:	c1 71       	brne	8000ae54 <udi_msc_setup+0x58>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
8000ae28:	4a 58       	lddpc	r8,8000aebc <udi_msc_setup+0xc0>
8000ae2a:	90 39       	ld.sh	r9,r8[0x6]
8000ae2c:	30 18       	mov	r8,1
8000ae2e:	f0 09 19 00 	cp.h	r9,r8
8000ae32:	c0 30       	breq	8000ae38 <udi_msc_setup+0x3c>
					return false;	// Error for USB host
8000ae34:	30 08       	mov	r8,0
8000ae36:	c4 08       	rjmp	8000aeb6 <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000ae38:	4a 18       	lddpc	r8,8000aebc <udi_msc_setup+0xc0>
8000ae3a:	90 18       	ld.sh	r8,r8[0x2]
8000ae3c:	58 08       	cp.w	r8,0
8000ae3e:	c0 30       	breq	8000ae44 <udi_msc_setup+0x48>
					return false;
8000ae40:	30 08       	mov	r8,0
8000ae42:	c3 a8       	rjmp	8000aeb6 <udi_msc_setup+0xba>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
8000ae44:	49 e8       	lddpc	r8,8000aebc <udi_msc_setup+0xc0>
8000ae46:	49 f9       	lddpc	r9,8000aec0 <udi_msc_setup+0xc4>
8000ae48:	91 29       	st.w	r8[0x8],r9
				udd_g_ctrlreq.payload_size = 1;
8000ae4a:	49 d9       	lddpc	r9,8000aebc <udi_msc_setup+0xc0>
8000ae4c:	30 18       	mov	r8,1
8000ae4e:	b2 68       	st.h	r9[0xc],r8
				return true;
8000ae50:	30 18       	mov	r8,1
8000ae52:	c3 28       	rjmp	8000aeb6 <udi_msc_setup+0xba>
			}
		}
	}
	if (Udd_setup_is_out()) {
8000ae54:	49 a8       	lddpc	r8,8000aebc <udi_msc_setup+0xc0>
8000ae56:	11 88       	ld.ub	r8,r8[0x0]
8000ae58:	10 99       	mov	r9,r8
8000ae5a:	30 08       	mov	r8,0
8000ae5c:	f0 09 18 00 	cp.b	r9,r8
8000ae60:	c2 a5       	brlt	8000aeb4 <udi_msc_setup+0xb8>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000ae62:	49 78       	lddpc	r8,8000aebc <udi_msc_setup+0xc0>
8000ae64:	11 88       	ld.ub	r8,r8[0x0]
8000ae66:	e2 18 00 60 	andl	r8,0x60,COH
8000ae6a:	e0 48 00 20 	cp.w	r8,32
8000ae6e:	c2 31       	brne	8000aeb4 <udi_msc_setup+0xb8>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000ae70:	49 38       	lddpc	r8,8000aebc <udi_msc_setup+0xc0>
8000ae72:	11 98       	ld.ub	r8,r8[0x1]
8000ae74:	e0 48 00 ff 	cp.w	r8,255
8000ae78:	c1 e1       	brne	8000aeb4 <udi_msc_setup+0xb8>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
8000ae7a:	49 18       	lddpc	r8,8000aebc <udi_msc_setup+0xc0>
8000ae7c:	90 38       	ld.sh	r8,r8[0x6]
8000ae7e:	58 08       	cp.w	r8,0
8000ae80:	c0 30       	breq	8000ae86 <udi_msc_setup+0x8a>
					return false;
8000ae82:	30 08       	mov	r8,0
8000ae84:	c1 98       	rjmp	8000aeb6 <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000ae86:	48 e8       	lddpc	r8,8000aebc <udi_msc_setup+0xc0>
8000ae88:	90 18       	ld.sh	r8,r8[0x2]
8000ae8a:	58 08       	cp.w	r8,0
8000ae8c:	c0 30       	breq	8000ae92 <udi_msc_setup+0x96>
					return false;
8000ae8e:	30 08       	mov	r8,0
8000ae90:	c1 38       	rjmp	8000aeb6 <udi_msc_setup+0xba>
				udi_msc_b_cbw_invalid = false;
8000ae92:	48 d9       	lddpc	r9,8000aec4 <udi_msc_setup+0xc8>
8000ae94:	30 08       	mov	r8,0
8000ae96:	b2 88       	st.b	r9[0x0],r8
				udi_msc_b_trans_req = false;
8000ae98:	48 c9       	lddpc	r9,8000aec8 <udi_msc_setup+0xcc>
8000ae9a:	30 08       	mov	r8,0
8000ae9c:	b2 88       	st.b	r9[0x0],r8
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
8000ae9e:	30 2c       	mov	r12,2
8000aea0:	f0 1f 00 0b 	mcall	8000aecc <udi_msc_setup+0xd0>
				udd_ep_abort(UDI_MSC_EP_IN);
8000aea4:	e0 6c 00 81 	mov	r12,129
8000aea8:	f0 1f 00 09 	mcall	8000aecc <udi_msc_setup+0xd0>
				// Restart by CBW wait
				udi_msc_cbw_wait();
8000aeac:	f0 1f 00 09 	mcall	8000aed0 <udi_msc_setup+0xd4>
				return true;
8000aeb0:	30 18       	mov	r8,1
8000aeb2:	c0 28       	rjmp	8000aeb6 <udi_msc_setup+0xba>
			}
		}
	}
	return false;	// Not supported request
8000aeb4:	30 08       	mov	r8,0
}
8000aeb6:	10 9c       	mov	r12,r8
8000aeb8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aebc:	00 00       	add	r0,r0
8000aebe:	0b c8       	ld.ub	r8,r5[0x4]
8000aec0:	00 00       	add	r0,r0
8000aec2:	06 b8       	st.h	r3++,r8
8000aec4:	00 00       	add	r0,r0
8000aec6:	06 d0       	st.w	--r3,r0
8000aec8:	00 00       	add	r0,r0
8000aeca:	06 d1       	st.w	--r3,r1
8000aecc:	80 00       	ld.sh	r0,r0[0x0]
8000aece:	90 50       	ld.sh	r0,r8[0xa]
8000aed0:	80 00       	ld.sh	r0,r0[0x0]
8000aed2:	af 58       	asr	r8,0xf

8000aed4 <udi_msc_getsetting>:

uint8_t udi_msc_getsetting(void)
{
8000aed4:	eb cd 40 80 	pushm	r7,lr
8000aed8:	1a 97       	mov	r7,sp
	return 0;	// MSC don't have multiple alternate setting
8000aeda:	30 08       	mov	r8,0
}
8000aedc:	10 9c       	mov	r12,r8
8000aede:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aee2:	d7 03       	nop

8000aee4 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
8000aee4:	eb cd 40 80 	pushm	r7,lr
8000aee8:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000aeea:	48 a8       	lddpc	r8,8000af10 <udi_msc_cbw_invalid+0x2c>
8000aeec:	11 88       	ld.ub	r8,r8[0x0]
8000aeee:	ec 18 00 01 	eorl	r8,0x1
8000aef2:	5c 58       	castu.b	r8
8000aef4:	c0 a1       	brne	8000af08 <udi_msc_cbw_invalid+0x24>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
8000aef6:	30 2c       	mov	r12,2
8000aef8:	f0 1f 00 07 	mcall	8000af14 <udi_msc_cbw_invalid+0x30>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
8000aefc:	fe cb 00 18 	sub	r11,pc,24
8000af00:	30 2c       	mov	r12,2
8000af02:	f0 1f 00 06 	mcall	8000af18 <udi_msc_cbw_invalid+0x34>
8000af06:	c0 28       	rjmp	8000af0a <udi_msc_cbw_invalid+0x26>
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000af08:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_OUT);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
}
8000af0a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af0e:	00 00       	add	r0,r0
8000af10:	00 00       	add	r0,r0
8000af12:	06 d0       	st.w	--r3,r0
8000af14:	80 00       	ld.sh	r0,r0[0x0]
8000af16:	8c d8       	ld.uh	r8,r6[0xa]
8000af18:	80 00       	ld.sh	r0,r0[0x0]
8000af1a:	90 ec       	ld.uh	r12,r8[0xc]

8000af1c <udi_msc_csw_invalid>:

static void udi_msc_csw_invalid(void)
{
8000af1c:	eb cd 40 80 	pushm	r7,lr
8000af20:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000af22:	48 b8       	lddpc	r8,8000af4c <udi_msc_csw_invalid+0x30>
8000af24:	11 88       	ld.ub	r8,r8[0x0]
8000af26:	ec 18 00 01 	eorl	r8,0x1
8000af2a:	5c 58       	castu.b	r8
8000af2c:	c0 c1       	brne	8000af44 <udi_msc_csw_invalid+0x28>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
8000af2e:	e0 6c 00 81 	mov	r12,129
8000af32:	f0 1f 00 08 	mcall	8000af50 <udi_msc_csw_invalid+0x34>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
8000af36:	fe cb 00 1a 	sub	r11,pc,26
8000af3a:	e0 6c 00 81 	mov	r12,129
8000af3e:	f0 1f 00 06 	mcall	8000af54 <udi_msc_csw_invalid+0x38>
8000af42:	c0 28       	rjmp	8000af46 <udi_msc_csw_invalid+0x2a>
}

static void udi_msc_csw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000af44:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_IN);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}
8000af46:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af4a:	00 00       	add	r0,r0
8000af4c:	00 00       	add	r0,r0
8000af4e:	06 d0       	st.w	--r3,r0
8000af50:	80 00       	ld.sh	r0,r0[0x0]
8000af52:	8c d8       	ld.uh	r8,r6[0xa]
8000af54:	80 00       	ld.sh	r0,r0[0x0]
8000af56:	90 ec       	ld.uh	r12,r8[0xc]

8000af58 <udi_msc_cbw_wait>:

static void udi_msc_cbw_wait(void)
{
8000af58:	eb cd 40 80 	pushm	r7,lr
8000af5c:	1a 97       	mov	r7,sp
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
8000af5e:	48 aa       	lddpc	r10,8000af84 <udi_msc_cbw_wait+0x2c>
8000af60:	48 a8       	lddpc	r8,8000af88 <udi_msc_cbw_wait+0x30>
8000af62:	31 f9       	mov	r9,31
8000af64:	30 1b       	mov	r11,1
8000af66:	30 2c       	mov	r12,2
8000af68:	f0 1f 00 09 	mcall	8000af8c <udi_msc_cbw_wait+0x34>
8000af6c:	18 98       	mov	r8,r12
8000af6e:	ec 18 00 01 	eorl	r8,0x1
8000af72:	5c 58       	castu.b	r8
8000af74:	c0 60       	breq	8000af80 <udi_msc_cbw_wait+0x28>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
8000af76:	fe cb 00 1e 	sub	r11,pc,30
8000af7a:	30 2c       	mov	r12,2
8000af7c:	f0 1f 00 05 	mcall	8000af90 <udi_msc_cbw_wait+0x38>
	}
}
8000af80:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af84:	00 00       	add	r0,r0
8000af86:	06 98       	mov	r8,r3
8000af88:	80 00       	ld.sh	r0,r0[0x0]
8000af8a:	af 94       	lsr	r4,0xf
8000af8c:	80 00       	ld.sh	r0,r0[0x0]
8000af8e:	8f 2c       	st.w	r7[0x8],r12
8000af90:	80 00       	ld.sh	r0,r0[0x0]
8000af92:	90 ec       	ld.uh	r12,r8[0xc]

8000af94 <udi_msc_cbw_received>:


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
8000af94:	eb cd 40 80 	pushm	r7,lr
8000af98:	1a 97       	mov	r7,sp
8000af9a:	20 3d       	sub	sp,12
8000af9c:	ef 4c ff fc 	st.w	r7[-4],r12
8000afa0:	ef 4b ff f8 	st.w	r7[-8],r11
8000afa4:	14 98       	mov	r8,r10
8000afa6:	ef 68 ff f4 	st.b	r7[-12],r8
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
8000afaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000afae:	58 08       	cp.w	r8,0
8000afb0:	c6 11       	brne	8000b072 <udi_msc_cbw_received+0xde>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000afb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000afb6:	59 f8       	cp.w	r8,31
8000afb8:	c0 91       	brne	8000afca <udi_msc_cbw_received+0x36>
			|| (udi_msc_cbw.dCBWSignature !=
8000afba:	4b 18       	lddpc	r8,8000b07c <udi_msc_cbw_received+0xe8>
8000afbc:	70 08       	ld.w	r8,r8[0x0]
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000afbe:	e0 69 42 43 	mov	r9,16963
8000afc2:	ea 19 55 53 	orh	r9,0x5553
8000afc6:	12 38       	cp.w	r8,r9
8000afc8:	c0 90       	breq	8000afda <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
8000afca:	4a e9       	lddpc	r9,8000b080 <udi_msc_cbw_received+0xec>
8000afcc:	30 18       	mov	r8,1
8000afce:	b2 88       	st.b	r9[0x0],r8
		udi_msc_cbw_invalid();
8000afd0:	f0 1f 00 2d 	mcall	8000b084 <udi_msc_cbw_received+0xf0>
		udi_msc_csw_invalid();
8000afd4:	f0 1f 00 2d 	mcall	8000b088 <udi_msc_cbw_received+0xf4>
		return;
8000afd8:	c4 e8       	rjmp	8000b074 <udi_msc_cbw_received+0xe0>
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
8000afda:	4a 98       	lddpc	r8,8000b07c <udi_msc_cbw_received+0xe8>
8000afdc:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000afe0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000afe4:	4a 69       	lddpc	r9,8000b07c <udi_msc_cbw_received+0xe8>
8000afe6:	f3 68 00 0d 	st.b	r9[13],r8
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
8000afea:	4a 58       	lddpc	r8,8000b07c <udi_msc_cbw_received+0xe8>
8000afec:	f1 39 00 0d 	ld.ub	r9,r8[13]
8000aff0:	4a 78       	lddpc	r8,8000b08c <udi_msc_cbw_received+0xf8>
8000aff2:	11 88       	ld.ub	r8,r8[0x0]
8000aff4:	f0 09 18 00 	cp.b	r9,r8
8000aff8:	e0 88 00 07 	brls	8000b006 <udi_msc_cbw_received+0x72>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
8000affc:	f0 1f 00 25 	mcall	8000b090 <udi_msc_cbw_received+0xfc>
		udi_msc_csw_process();
8000b000:	f0 1f 00 25 	mcall	8000b094 <udi_msc_cbw_received+0x100>
		return;
8000b004:	c3 88       	rjmp	8000b074 <udi_msc_cbw_received+0xe0>
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
8000b006:	49 e8       	lddpc	r8,8000b07c <udi_msc_cbw_received+0xe8>
8000b008:	70 28       	ld.w	r8,r8[0x8]
8000b00a:	5c b8       	swap.b	r8
8000b00c:	10 99       	mov	r9,r8
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
8000b00e:	4a 38       	lddpc	r8,8000b098 <udi_msc_cbw_received+0x104>
8000b010:	91 29       	st.w	r8[0x8],r9
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
8000b012:	49 b8       	lddpc	r8,8000b07c <udi_msc_cbw_received+0xe8>
8000b014:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000b018:	e0 48 00 5a 	cp.w	r8,90
8000b01c:	e0 8b 00 26 	brhi	8000b068 <udi_msc_cbw_received+0xd4>
8000b020:	49 f9       	lddpc	r9,8000b09c <udi_msc_cbw_received+0x108>
8000b022:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case SPC_REQUEST_SENSE:
		udi_msc_spc_requestsense();
8000b026:	f0 1f 00 1f 	mcall	8000b0a0 <udi_msc_cbw_received+0x10c>
		break;
8000b02a:	c2 58       	rjmp	8000b074 <udi_msc_cbw_received+0xe0>

	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
8000b02c:	f0 1f 00 1e 	mcall	8000b0a4 <udi_msc_cbw_received+0x110>
		break;
8000b030:	c2 28       	rjmp	8000b074 <udi_msc_cbw_received+0xe0>

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
8000b032:	30 0c       	mov	r12,0
8000b034:	f0 1f 00 1d 	mcall	8000b0a8 <udi_msc_cbw_received+0x114>
		break;
8000b038:	c1 e8       	rjmp	8000b074 <udi_msc_cbw_received+0xe0>
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
8000b03a:	30 1c       	mov	r12,1
8000b03c:	f0 1f 00 1b 	mcall	8000b0a8 <udi_msc_cbw_received+0x114>
		break;
8000b040:	c1 a8       	rjmp	8000b074 <udi_msc_cbw_received+0xe0>

	case SPC_TEST_UNIT_READY:
		udi_msc_spc_testunitready();
8000b042:	f0 1f 00 1b 	mcall	8000b0ac <udi_msc_cbw_received+0x118>
		break;
8000b046:	c1 78       	rjmp	8000b074 <udi_msc_cbw_received+0xe0>

	case SBC_READ_CAPACITY10:
		udi_msc_sbc_read_capacity();
8000b048:	f0 1f 00 1a 	mcall	8000b0b0 <udi_msc_cbw_received+0x11c>
		break;
8000b04c:	c1 48       	rjmp	8000b074 <udi_msc_cbw_received+0xe0>
	case SBC_START_STOP_UNIT:
		// Accepts request to support plug/plug in case of card reader
	case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
8000b04e:	f0 1f 00 1a 	mcall	8000b0b4 <udi_msc_cbw_received+0x120>
		udi_msc_csw_process();
8000b052:	f0 1f 00 11 	mcall	8000b094 <udi_msc_cbw_received+0x100>
		break;
8000b056:	c0 f8       	rjmp	8000b074 <udi_msc_cbw_received+0xe0>

	case SBC_READ10:
		udi_msc_sbc_trans(true);
8000b058:	30 1c       	mov	r12,1
8000b05a:	f0 1f 00 18 	mcall	8000b0b8 <udi_msc_cbw_received+0x124>
		break;
8000b05e:	c0 b8       	rjmp	8000b074 <udi_msc_cbw_received+0xe0>

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
8000b060:	30 0c       	mov	r12,0
8000b062:	f0 1f 00 16 	mcall	8000b0b8 <udi_msc_cbw_received+0x124>
		break;
8000b066:	c0 78       	rjmp	8000b074 <udi_msc_cbw_received+0xe0>

	default:
		udi_msc_sense_command_invalid();
8000b068:	f0 1f 00 15 	mcall	8000b0bc <udi_msc_cbw_received+0x128>
		udi_msc_csw_process();
8000b06c:	f0 1f 00 0a 	mcall	8000b094 <udi_msc_cbw_received+0x100>
8000b070:	c0 28       	rjmp	8000b074 <udi_msc_cbw_received+0xe0>
{
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
		// Transfer aborted
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000b072:	d7 03       	nop
	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
		break;
	}
}
8000b074:	2f dd       	sub	sp,-12
8000b076:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b07a:	00 00       	add	r0,r0
8000b07c:	00 00       	add	r0,r0
8000b07e:	06 98       	mov	r8,r3
8000b080:	00 00       	add	r0,r0
8000b082:	06 d0       	st.w	--r3,r0
8000b084:	80 00       	ld.sh	r0,r0[0x0]
8000b086:	ae e4       	st.b	r7[0x6],r4
8000b088:	80 00       	ld.sh	r0,r0[0x0]
8000b08a:	af 1c       	ld.d	r12,--r7
8000b08c:	00 00       	add	r0,r0
8000b08e:	06 b8       	st.h	r3++,r8
8000b090:	80 00       	ld.sh	r0,r0[0x0]
8000b092:	b3 bc       	sbr	r12,0x13
8000b094:	80 00       	ld.sh	r0,r0[0x0]
8000b096:	b1 bc       	sbr	r12,0x11
8000b098:	00 00       	add	r0,r0
8000b09a:	00 30       	cp.w	r0,r0
8000b09c:	80 00       	ld.sh	r0,r0[0x0]
8000b09e:	dc 5c       	*unknown*
8000b0a0:	80 00       	ld.sh	r0,r0[0x0]
8000b0a2:	b3 f4       	*unknown*
8000b0a4:	80 00       	ld.sh	r0,r0[0x0]
8000b0a6:	b4 58       	st.h	r10[0xa],r8
8000b0a8:	80 00       	ld.sh	r0,r0[0x0]
8000b0aa:	b5 f0       	*unknown*
8000b0ac:	80 00       	ld.sh	r0,r0[0x0]
8000b0ae:	b5 c8       	cbr	r8,0x14
8000b0b0:	80 00       	ld.sh	r0,r0[0x0]
8000b0b2:	b7 40       	asr	r0,0x16
8000b0b4:	80 00       	ld.sh	r0,r0[0x0]
8000b0b6:	b3 30       	mul	r0,r9
8000b0b8:	80 00       	ld.sh	r0,r0[0x0]
8000b0ba:	b7 dc       	cbr	r12,0x17
8000b0bc:	80 00       	ld.sh	r0,r0[0x0]
8000b0be:	b3 d8       	cbr	r8,0x13

8000b0c0 <udi_msc_cbw_validate>:


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
8000b0c0:	eb cd 40 80 	pushm	r7,lr
8000b0c4:	1a 97       	mov	r7,sp
8000b0c6:	20 2d       	sub	sp,8
8000b0c8:	ef 4c ff fc 	st.w	r7[-4],r12
8000b0cc:	16 98       	mov	r8,r11
8000b0ce:	ef 68 ff f8 	st.b	r7[-8],r8
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000b0d2:	49 08       	lddpc	r8,8000b110 <udi_msc_cbw_validate+0x50>
8000b0d4:	f1 39 00 0c 	ld.ub	r9,r8[12]
8000b0d8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b0dc:	f3 e8 20 08 	eor	r8,r9,r8
8000b0e0:	5c 58       	castu.b	r8
8000b0e2:	10 99       	mov	r9,r8
8000b0e4:	30 08       	mov	r8,0
8000b0e6:	f0 09 18 00 	cp.b	r9,r8
8000b0ea:	c0 75       	brlt	8000b0f8 <udi_msc_cbw_validate+0x38>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
8000b0ec:	48 a8       	lddpc	r8,8000b114 <udi_msc_cbw_validate+0x54>
8000b0ee:	70 29       	ld.w	r9,r8[0x8]
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000b0f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b0f4:	10 39       	cp.w	r9,r8
8000b0f6:	c0 72       	brcc	8000b104 <udi_msc_cbw_validate+0x44>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
		udi_msc_sense_fail_cdb_invalid();
8000b0f8:	f0 1f 00 08 	mcall	8000b118 <udi_msc_cbw_validate+0x58>
		udi_msc_csw_process();
8000b0fc:	f0 1f 00 08 	mcall	8000b11c <udi_msc_cbw_validate+0x5c>
		return false;
8000b100:	30 08       	mov	r8,0
8000b102:	c0 28       	rjmp	8000b106 <udi_msc_cbw_validate+0x46>
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
8000b104:	30 18       	mov	r8,1
}
8000b106:	10 9c       	mov	r12,r8
8000b108:	2f ed       	sub	sp,-8
8000b10a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b10e:	00 00       	add	r0,r0
8000b110:	00 00       	add	r0,r0
8000b112:	06 98       	mov	r8,r3
8000b114:	00 00       	add	r0,r0
8000b116:	00 30       	cp.w	r0,r0
8000b118:	80 00       	ld.sh	r0,r0[0x0]
8000b11a:	b3 bc       	sbr	r12,0x13
8000b11c:	80 00       	ld.sh	r0,r0[0x0]
8000b11e:	b1 bc       	sbr	r12,0x11

8000b120 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
8000b120:	eb cd 40 80 	pushm	r7,lr
8000b124:	1a 97       	mov	r7,sp
8000b126:	20 2d       	sub	sp,8
8000b128:	ef 4c ff fc 	st.w	r7[-4],r12
8000b12c:	16 98       	mov	r8,r11
8000b12e:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
8000b132:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000b136:	48 b8       	lddpc	r8,8000b160 <udi_msc_data_send+0x40>
8000b138:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b13c:	30 1b       	mov	r11,1
8000b13e:	e0 6c 00 81 	mov	r12,129
8000b142:	f0 1f 00 09 	mcall	8000b164 <udi_msc_data_send+0x44>
8000b146:	18 98       	mov	r8,r12
8000b148:	ec 18 00 01 	eorl	r8,0x1
8000b14c:	5c 58       	castu.b	r8
8000b14e:	c0 50       	breq	8000b158 <udi_msc_data_send+0x38>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
8000b150:	f0 1f 00 06 	mcall	8000b168 <udi_msc_data_send+0x48>
		udi_msc_csw_process();
8000b154:	f0 1f 00 06 	mcall	8000b16c <udi_msc_data_send+0x4c>
	}
}
8000b158:	2f ed       	sub	sp,-8
8000b15a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b15e:	00 00       	add	r0,r0
8000b160:	80 00       	ld.sh	r0,r0[0x0]
8000b162:	b1 70       	lsl	r0,0x11
8000b164:	80 00       	ld.sh	r0,r0[0x0]
8000b166:	8f 2c       	st.w	r7[0x8],r12
8000b168:	80 00       	ld.sh	r0,r0[0x0]
8000b16a:	b3 88       	lsr	r8,0x12
8000b16c:	80 00       	ld.sh	r0,r0[0x0]
8000b16e:	b1 bc       	sbr	r12,0x11

8000b170 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000b170:	eb cd 40 80 	pushm	r7,lr
8000b174:	1a 97       	mov	r7,sp
8000b176:	20 3d       	sub	sp,12
8000b178:	ef 4c ff fc 	st.w	r7[-4],r12
8000b17c:	ef 4b ff f8 	st.w	r7[-8],r11
8000b180:	14 98       	mov	r8,r10
8000b182:	ef 68 ff f4 	st.b	r7[-12],r8
	if (UDD_EP_TRANSFER_OK != status) {
8000b186:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b18a:	58 08       	cp.w	r8,0
8000b18c:	c0 d1       	brne	8000b1a6 <udi_msc_data_sent+0x36>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
8000b18e:	f0 1f 00 09 	mcall	8000b1b0 <udi_msc_data_sent+0x40>
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
8000b192:	48 98       	lddpc	r8,8000b1b4 <udi_msc_data_sent+0x44>
8000b194:	70 29       	ld.w	r9,r8[0x8]
8000b196:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b19a:	10 19       	sub	r9,r8
8000b19c:	48 68       	lddpc	r8,8000b1b4 <udi_msc_data_sent+0x44>
8000b19e:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_process();
8000b1a0:	f0 1f 00 06 	mcall	8000b1b8 <udi_msc_data_sent+0x48>
8000b1a4:	c0 28       	rjmp	8000b1a8 <udi_msc_data_sent+0x38>
		udd_ep_id_t ep)
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000b1a6:	d7 03       	nop
	// Update sense data
	udi_msc_sense_pass();
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
	udi_msc_csw_process();
}
8000b1a8:	2f dd       	sub	sp,-12
8000b1aa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b1ae:	00 00       	add	r0,r0
8000b1b0:	80 00       	ld.sh	r0,r0[0x0]
8000b1b2:	b3 30       	mul	r0,r9
8000b1b4:	00 00       	add	r0,r0
8000b1b6:	00 30       	cp.w	r0,r0
8000b1b8:	80 00       	ld.sh	r0,r0[0x0]
8000b1ba:	b1 bc       	sbr	r12,0x11

8000b1bc <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
8000b1bc:	eb cd 40 80 	pushm	r7,lr
8000b1c0:	1a 97       	mov	r7,sp
	if (0 != udi_msc_csw.dCSWDataResidue) {
8000b1c2:	49 28       	lddpc	r8,8000b208 <udi_msc_csw_process+0x4c>
8000b1c4:	70 28       	ld.w	r8,r8[0x8]
8000b1c6:	58 08       	cp.w	r8,0
8000b1c8:	c1 10       	breq	8000b1ea <udi_msc_csw_process+0x2e>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
8000b1ca:	49 18       	lddpc	r8,8000b20c <udi_msc_csw_process+0x50>
8000b1cc:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000b1d0:	10 99       	mov	r9,r8
8000b1d2:	30 08       	mov	r8,0
8000b1d4:	f0 09 18 00 	cp.b	r9,r8
8000b1d8:	c0 64       	brge	8000b1e4 <udi_msc_csw_process+0x28>
			udd_ep_set_halt(UDI_MSC_EP_IN);
8000b1da:	e0 6c 00 81 	mov	r12,129
8000b1de:	f0 1f 00 0d 	mcall	8000b210 <udi_msc_csw_process+0x54>
8000b1e2:	c0 48       	rjmp	8000b1ea <udi_msc_csw_process+0x2e>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
8000b1e4:	30 2c       	mov	r12,2
8000b1e6:	f0 1f 00 0b 	mcall	8000b210 <udi_msc_csw_process+0x54>
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
8000b1ea:	48 98       	lddpc	r8,8000b20c <udi_msc_csw_process+0x50>
8000b1ec:	70 19       	ld.w	r9,r8[0x4]
8000b1ee:	48 78       	lddpc	r8,8000b208 <udi_msc_csw_process+0x4c>
8000b1f0:	91 19       	st.w	r8[0x4],r9
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
8000b1f2:	48 68       	lddpc	r8,8000b208 <udi_msc_csw_process+0x4c>
8000b1f4:	70 28       	ld.w	r8,r8[0x8]
8000b1f6:	5c b8       	swap.b	r8
8000b1f8:	10 99       	mov	r9,r8
8000b1fa:	48 48       	lddpc	r8,8000b208 <udi_msc_csw_process+0x4c>
8000b1fc:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_send();
8000b1fe:	f0 1f 00 06 	mcall	8000b214 <udi_msc_csw_process+0x58>
}
8000b202:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b206:	00 00       	add	r0,r0
8000b208:	00 00       	add	r0,r0
8000b20a:	00 30       	cp.w	r0,r0
8000b20c:	00 00       	add	r0,r0
8000b20e:	06 98       	mov	r8,r3
8000b210:	80 00       	ld.sh	r0,r0[0x0]
8000b212:	8c d8       	ld.uh	r8,r6[0xa]
8000b214:	80 00       	ld.sh	r0,r0[0x0]
8000b216:	b2 18       	st.h	r9[0x2],r8

8000b218 <udi_msc_csw_send>:


void udi_msc_csw_send(void)
{
8000b218:	eb cd 40 80 	pushm	r7,lr
8000b21c:	1a 97       	mov	r7,sp
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
8000b21e:	48 ba       	lddpc	r10,8000b248 <udi_msc_csw_send+0x30>
8000b220:	48 b8       	lddpc	r8,8000b24c <udi_msc_csw_send+0x34>
8000b222:	30 d9       	mov	r9,13
8000b224:	30 0b       	mov	r11,0
8000b226:	e0 6c 00 81 	mov	r12,129
8000b22a:	f0 1f 00 0a 	mcall	8000b250 <udi_msc_csw_send+0x38>
8000b22e:	18 98       	mov	r8,r12
8000b230:	ec 18 00 01 	eorl	r8,0x1
8000b234:	5c 58       	castu.b	r8
8000b236:	c0 60       	breq	8000b242 <udi_msc_csw_send+0x2a>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
8000b238:	48 7b       	lddpc	r11,8000b254 <udi_msc_csw_send+0x3c>
8000b23a:	e0 6c 00 81 	mov	r12,129
8000b23e:	f0 1f 00 07 	mcall	8000b258 <udi_msc_csw_send+0x40>
	}
}
8000b242:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b246:	00 00       	add	r0,r0
8000b248:	00 00       	add	r0,r0
8000b24a:	00 30       	cp.w	r0,r0
8000b24c:	80 00       	ld.sh	r0,r0[0x0]
8000b24e:	b2 5c       	st.h	r9[0xa],r12
8000b250:	80 00       	ld.sh	r0,r0[0x0]
8000b252:	8f 2c       	st.w	r7[0x8],r12
8000b254:	80 00       	ld.sh	r0,r0[0x0]
8000b256:	b2 18       	st.h	r9[0x2],r8
8000b258:	80 00       	ld.sh	r0,r0[0x0]
8000b25a:	90 ec       	ld.uh	r12,r8[0xc]

8000b25c <udi_msc_csw_sent>:


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000b25c:	eb cd 40 80 	pushm	r7,lr
8000b260:	1a 97       	mov	r7,sp
8000b262:	20 3d       	sub	sp,12
8000b264:	ef 4c ff fc 	st.w	r7[-4],r12
8000b268:	ef 4b ff f8 	st.w	r7[-8],r11
8000b26c:	14 98       	mov	r8,r10
8000b26e:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
8000b272:	f0 1f 00 03 	mcall	8000b27c <udi_msc_csw_sent+0x20>
}
8000b276:	2f dd       	sub	sp,-12
8000b278:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b27c:	80 00       	ld.sh	r0,r0[0x0]
8000b27e:	af 58       	asr	r8,0xf

8000b280 <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
8000b280:	eb cd 40 80 	pushm	r7,lr
8000b284:	1a 97       	mov	r7,sp
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
8000b286:	31 2a       	mov	r10,18
8000b288:	30 0b       	mov	r11,0
8000b28a:	48 6c       	lddpc	r12,8000b2a0 <udi_msc_clear_sense+0x20>
8000b28c:	f0 1f 00 06 	mcall	8000b2a4 <udi_msc_clear_sense+0x24>
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
8000b290:	48 49       	lddpc	r9,8000b2a0 <udi_msc_clear_sense+0x20>
8000b292:	3f 08       	mov	r8,-16
8000b294:	b2 88       	st.b	r9[0x0],r8
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
8000b296:	48 39       	lddpc	r9,8000b2a0 <udi_msc_clear_sense+0x20>
8000b298:	30 a8       	mov	r8,10
8000b29a:	b2 f8       	st.b	r9[0x7],r8
}
8000b29c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b2a0:	00 00       	add	r0,r0
8000b2a2:	06 bc       	st.h	r3++,r12
8000b2a4:	80 00       	ld.sh	r0,r0[0x0]
8000b2a6:	d2 86       	*unknown*

8000b2a8 <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
8000b2a8:	eb cd 40 80 	pushm	r7,lr
8000b2ac:	1a 97       	mov	r7,sp
8000b2ae:	20 3d       	sub	sp,12
8000b2b0:	18 99       	mov	r9,r12
8000b2b2:	16 98       	mov	r8,r11
8000b2b4:	ef 4a ff f4 	st.w	r7[-12],r10
8000b2b8:	ef 69 ff fc 	st.b	r7[-4],r9
8000b2bc:	ef 58 ff f8 	st.h	r7[-8],r8
	udi_msc_clear_sense();
8000b2c0:	f0 1f 00 19 	mcall	8000b324 <udi_msc_sense_fail+0x7c>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
8000b2c4:	49 99       	lddpc	r9,8000b328 <udi_msc_sense_fail+0x80>
8000b2c6:	30 18       	mov	r8,1
8000b2c8:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.sense_flag_key = sense_key;
8000b2cc:	49 89       	lddpc	r9,8000b32c <udi_msc_sense_fail+0x84>
8000b2ce:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b2d2:	b2 a8       	st.b	r9[0x2],r8
	udi_msc_sense.information[0] = lba >> 24;
8000b2d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2d8:	b9 88       	lsr	r8,0x18
8000b2da:	5c 58       	castu.b	r8
8000b2dc:	49 49       	lddpc	r9,8000b32c <udi_msc_sense_fail+0x84>
8000b2de:	b2 b8       	st.b	r9[0x3],r8
	udi_msc_sense.information[1] = lba >> 16;
8000b2e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2e4:	b1 88       	lsr	r8,0x10
8000b2e6:	5c 58       	castu.b	r8
8000b2e8:	49 19       	lddpc	r9,8000b32c <udi_msc_sense_fail+0x84>
8000b2ea:	b2 c8       	st.b	r9[0x4],r8
	udi_msc_sense.information[2] = lba >> 8;
8000b2ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2f0:	a9 88       	lsr	r8,0x8
8000b2f2:	5c 58       	castu.b	r8
8000b2f4:	48 e9       	lddpc	r9,8000b32c <udi_msc_sense_fail+0x84>
8000b2f6:	b2 d8       	st.b	r9[0x5],r8
	udi_msc_sense.information[3] = lba;
8000b2f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2fc:	5c 58       	castu.b	r8
8000b2fe:	48 c9       	lddpc	r9,8000b32c <udi_msc_sense_fail+0x84>
8000b300:	b2 e8       	st.b	r9[0x6],r8
	udi_msc_sense.AddSenseCode = add_sense >> 8;
8000b302:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000b306:	a9 88       	lsr	r8,0x8
8000b308:	5c 88       	casts.h	r8
8000b30a:	5c 58       	castu.b	r8
8000b30c:	48 89       	lddpc	r9,8000b32c <udi_msc_sense_fail+0x84>
8000b30e:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
8000b312:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000b316:	5c 58       	castu.b	r8
8000b318:	48 59       	lddpc	r9,8000b32c <udi_msc_sense_fail+0x84>
8000b31a:	f3 68 00 0d 	st.b	r9[13],r8
}
8000b31e:	2f dd       	sub	sp,-12
8000b320:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b324:	80 00       	ld.sh	r0,r0[0x0]
8000b326:	b2 80       	st.b	r9[0x0],r0
8000b328:	00 00       	add	r0,r0
8000b32a:	00 30       	cp.w	r0,r0
8000b32c:	00 00       	add	r0,r0
8000b32e:	06 bc       	st.h	r3++,r12

8000b330 <udi_msc_sense_pass>:

static void udi_msc_sense_pass(void)
{
8000b330:	eb cd 40 80 	pushm	r7,lr
8000b334:	1a 97       	mov	r7,sp
	udi_msc_clear_sense();
8000b336:	f0 1f 00 05 	mcall	8000b348 <udi_msc_sense_pass+0x18>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
8000b33a:	48 59       	lddpc	r9,8000b34c <udi_msc_sense_pass+0x1c>
8000b33c:	30 08       	mov	r8,0
8000b33e:	f3 68 00 0c 	st.b	r9[12],r8
}
8000b342:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b346:	00 00       	add	r0,r0
8000b348:	80 00       	ld.sh	r0,r0[0x0]
8000b34a:	b2 80       	st.b	r9[0x0],r0
8000b34c:	00 00       	add	r0,r0
8000b34e:	00 30       	cp.w	r0,r0

8000b350 <udi_msc_sense_fail_not_present>:


static void udi_msc_sense_fail_not_present(void)
{
8000b350:	eb cd 40 80 	pushm	r7,lr
8000b354:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
8000b356:	30 0a       	mov	r10,0
8000b358:	e0 6b 3a 00 	mov	r11,14848
8000b35c:	30 2c       	mov	r12,2
8000b35e:	f0 1f 00 03 	mcall	8000b368 <udi_msc_sense_fail_not_present+0x18>
}
8000b362:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b366:	00 00       	add	r0,r0
8000b368:	80 00       	ld.sh	r0,r0[0x0]
8000b36a:	b2 a8       	st.b	r9[0x2],r8

8000b36c <udi_msc_sense_fail_busy_or_change>:

static void udi_msc_sense_fail_busy_or_change(void)
{
8000b36c:	eb cd 40 80 	pushm	r7,lr
8000b370:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
8000b372:	30 0a       	mov	r10,0
8000b374:	e0 6b 28 00 	mov	r11,10240
8000b378:	30 6c       	mov	r12,6
8000b37a:	f0 1f 00 03 	mcall	8000b384 <udi_msc_sense_fail_busy_or_change+0x18>
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}
8000b37e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b382:	00 00       	add	r0,r0
8000b384:	80 00       	ld.sh	r0,r0[0x0]
8000b386:	b2 a8       	st.b	r9[0x2],r8

8000b388 <udi_msc_sense_fail_hardware>:

static void udi_msc_sense_fail_hardware(void)
{
8000b388:	eb cd 40 80 	pushm	r7,lr
8000b38c:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
8000b38e:	30 0a       	mov	r10,0
8000b390:	30 0b       	mov	r11,0
8000b392:	30 4c       	mov	r12,4
8000b394:	f0 1f 00 02 	mcall	8000b39c <udi_msc_sense_fail_hardware+0x14>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}
8000b398:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b39c:	80 00       	ld.sh	r0,r0[0x0]
8000b39e:	b2 a8       	st.b	r9[0x2],r8

8000b3a0 <udi_msc_sense_fail_protected>:

static void udi_msc_sense_fail_protected(void)
{
8000b3a0:	eb cd 40 80 	pushm	r7,lr
8000b3a4:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
8000b3a6:	30 0a       	mov	r10,0
8000b3a8:	e0 6b 27 00 	mov	r11,9984
8000b3ac:	30 7c       	mov	r12,7
8000b3ae:	f0 1f 00 03 	mcall	8000b3b8 <udi_msc_sense_fail_protected+0x18>
}
8000b3b2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b3b6:	00 00       	add	r0,r0
8000b3b8:	80 00       	ld.sh	r0,r0[0x0]
8000b3ba:	b2 a8       	st.b	r9[0x2],r8

8000b3bc <udi_msc_sense_fail_cdb_invalid>:

static void udi_msc_sense_fail_cdb_invalid(void)
{
8000b3bc:	eb cd 40 80 	pushm	r7,lr
8000b3c0:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000b3c2:	30 0a       	mov	r10,0
8000b3c4:	e0 6b 24 00 	mov	r11,9216
8000b3c8:	30 5c       	mov	r12,5
8000b3ca:	f0 1f 00 03 	mcall	8000b3d4 <udi_msc_sense_fail_cdb_invalid+0x18>
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
8000b3ce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b3d2:	00 00       	add	r0,r0
8000b3d4:	80 00       	ld.sh	r0,r0[0x0]
8000b3d6:	b2 a8       	st.b	r9[0x2],r8

8000b3d8 <udi_msc_sense_command_invalid>:

static void udi_msc_sense_command_invalid(void)
{
8000b3d8:	eb cd 40 80 	pushm	r7,lr
8000b3dc:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000b3de:	30 0a       	mov	r10,0
8000b3e0:	e0 6b 20 00 	mov	r11,8192
8000b3e4:	30 5c       	mov	r12,5
8000b3e6:	f0 1f 00 03 	mcall	8000b3f0 <udi_msc_sense_command_invalid+0x18>
			SCSI_ASC_INVALID_COMMAND_OPERATION_CODE, 0);
}
8000b3ea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b3ee:	00 00       	add	r0,r0
8000b3f0:	80 00       	ld.sh	r0,r0[0x0]
8000b3f2:	b2 a8       	st.b	r9[0x2],r8

8000b3f4 <udi_msc_spc_requestsense>:

//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
8000b3f4:	eb cd 40 80 	pushm	r7,lr
8000b3f8:	1a 97       	mov	r7,sp
8000b3fa:	20 1d       	sub	sp,4
	uint8_t length = udi_msc_cbw.CDB[4];
8000b3fc:	49 38       	lddpc	r8,8000b448 <udi_msc_spc_requestsense+0x54>
8000b3fe:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b402:	ef 68 ff ff 	st.b	r7[-1],r8

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
8000b406:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b40a:	31 28       	mov	r8,18
8000b40c:	f0 09 18 00 	cp.b	r9,r8
8000b410:	e0 88 00 05 	brls	8000b41a <udi_msc_spc_requestsense+0x26>
		length = sizeof(udi_msc_sense);
8000b414:	31 28       	mov	r8,18
8000b416:	ef 68 ff ff 	st.b	r7[-1],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000b41a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b41e:	e0 6b 00 80 	mov	r11,128
8000b422:	10 9c       	mov	r12,r8
8000b424:	f0 1f 00 0a 	mcall	8000b44c <udi_msc_spc_requestsense+0x58>
8000b428:	18 98       	mov	r8,r12
8000b42a:	ec 18 00 01 	eorl	r8,0x1
8000b42e:	5c 58       	castu.b	r8
8000b430:	c0 81       	brne	8000b440 <udi_msc_spc_requestsense+0x4c>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
8000b432:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b436:	10 9b       	mov	r11,r8
8000b438:	48 6c       	lddpc	r12,8000b450 <udi_msc_spc_requestsense+0x5c>
8000b43a:	f0 1f 00 07 	mcall	8000b454 <udi_msc_spc_requestsense+0x60>
8000b43e:	c0 28       	rjmp	8000b442 <udi_msc_spc_requestsense+0x4e>
	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000b440:	d7 03       	nop
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
}
8000b442:	2f fd       	sub	sp,-4
8000b444:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b448:	00 00       	add	r0,r0
8000b44a:	06 98       	mov	r8,r3
8000b44c:	80 00       	ld.sh	r0,r0[0x0]
8000b44e:	b0 c0       	st.b	r8[0x4],r0
8000b450:	00 00       	add	r0,r0
8000b452:	06 bc       	st.h	r3++,r12
8000b454:	80 00       	ld.sh	r0,r0[0x0]
8000b456:	b1 20       	st.d	r8++,r0

8000b458 <udi_msc_spc_inquiry>:


static void udi_msc_spc_inquiry(void)
{
8000b458:	eb cd 40 80 	pushm	r7,lr
8000b45c:	1a 97       	mov	r7,sp
8000b45e:	20 1d       	sub	sp,4
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
8000b460:	4b e8       	lddpc	r8,8000b558 <udi_msc_spc_inquiry+0x100>
8000b462:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b466:	ef 68 ff fe 	st.b	r7[-2],r8

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
8000b46a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b46e:	32 48       	mov	r8,36
8000b470:	f0 09 18 00 	cp.b	r9,r8
8000b474:	e0 88 00 05 	brls	8000b47e <udi_msc_spc_inquiry+0x26>
		length = sizeof(udi_msc_inquiry_data);
8000b478:	32 48       	mov	r8,36
8000b47a:	ef 68 ff fe 	st.b	r7[-2],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000b47e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b482:	e0 6b 00 80 	mov	r11,128
8000b486:	10 9c       	mov	r12,r8
8000b488:	f0 1f 00 35 	mcall	8000b55c <udi_msc_spc_inquiry+0x104>
8000b48c:	18 98       	mov	r8,r12
8000b48e:	ec 18 00 01 	eorl	r8,0x1
8000b492:	5c 58       	castu.b	r8
8000b494:	c5 e1       	brne	8000b550 <udi_msc_spc_inquiry+0xf8>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000b496:	4b 18       	lddpc	r8,8000b558 <udi_msc_spc_inquiry+0x100>
8000b498:	f1 38 00 10 	ld.ub	r8,r8[16]
8000b49c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000b4a0:	c0 61       	brne	8000b4ac <udi_msc_spc_inquiry+0x54>
			|| (0 != udi_msc_cbw.CDB[2])) {
8000b4a2:	4a e8       	lddpc	r8,8000b558 <udi_msc_spc_inquiry+0x100>
8000b4a4:	f1 38 00 11 	ld.ub	r8,r8[17]
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000b4a8:	58 08       	cp.w	r8,0
8000b4aa:	c0 60       	breq	8000b4b6 <udi_msc_spc_inquiry+0x5e>
			|| (0 != udi_msc_cbw.CDB[2])) {
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
8000b4ac:	f0 1f 00 2d 	mcall	8000b560 <udi_msc_spc_inquiry+0x108>
		udi_msc_csw_process();
8000b4b0:	f0 1f 00 2d 	mcall	8000b564 <udi_msc_spc_inquiry+0x10c>
		return;
8000b4b4:	c4 f8       	rjmp	8000b552 <udi_msc_spc_inquiry+0xfa>
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
8000b4b6:	4a 98       	lddpc	r8,8000b558 <udi_msc_spc_inquiry+0x100>
8000b4b8:	f1 38 00 0d 	ld.ub	r8,r8[13]
		return;
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
8000b4bc:	10 9c       	mov	r12,r8
8000b4be:	f0 1f 00 2b 	mcall	8000b568 <udi_msc_spc_inquiry+0x110>
8000b4c2:	18 98       	mov	r8,r12
8000b4c4:	f0 c9 ff ff 	sub	r9,r8,-1
8000b4c8:	4a 98       	lddpc	r8,8000b56c <udi_msc_spc_inquiry+0x114>
8000b4ca:	2f 08       	sub	r8,-16
8000b4cc:	31 0a       	mov	r10,16
8000b4ce:	12 9b       	mov	r11,r9
8000b4d0:	10 9c       	mov	r12,r8
8000b4d2:	f0 1f 00 28 	mcall	8000b570 <udi_msc_spc_inquiry+0x118>
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
8000b4d6:	30 08       	mov	r8,0
8000b4d8:	ef 68 ff ff 	st.b	r7[-1],r8
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000b4dc:	c1 a8       	rjmp	8000b510 <udi_msc_spc_inquiry+0xb8>
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000b4de:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b4e2:	4a 39       	lddpc	r9,8000b56c <udi_msc_spc_inquiry+0x114>
8000b4e4:	f2 08 00 08 	add	r8,r9,r8
8000b4e8:	f1 38 00 10 	ld.ub	r8,r8[16]
8000b4ec:	58 08       	cp.w	r8,0
8000b4ee:	c2 40       	breq	8000b536 <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
8000b4f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b4f4:	49 e9       	lddpc	r9,8000b56c <udi_msc_spc_inquiry+0x114>
8000b4f6:	f2 08 00 08 	add	r8,r9,r8
8000b4fa:	f1 39 00 10 	ld.ub	r9,r8[16]
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000b4fe:	32 28       	mov	r8,34
8000b500:	f0 09 18 00 	cp.b	r9,r8
8000b504:	c1 90       	breq	8000b536 <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
8000b506:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b50a:	2f f8       	sub	r8,-1
8000b50c:	ef 68 ff ff 	st.b	r7[-1],r8
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000b510:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b514:	31 08       	mov	r8,16
8000b516:	f0 09 18 00 	cp.b	r9,r8
8000b51a:	ce 21       	brne	8000b4de <udi_msc_spc_inquiry+0x86>
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000b51c:	c0 d8       	rjmp	8000b536 <udi_msc_spc_inquiry+0xde>
		udi_msc_inquiry_data.product_id[i] = ' ';
8000b51e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b522:	49 39       	lddpc	r9,8000b56c <udi_msc_spc_inquiry+0x114>
8000b524:	10 09       	add	r9,r8
8000b526:	32 08       	mov	r8,32
8000b528:	f3 68 00 10 	st.b	r9[16],r8
		i++;
8000b52c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b530:	2f f8       	sub	r8,-1
8000b532:	ef 68 ff ff 	st.b	r7[-1],r8
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000b536:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b53a:	31 08       	mov	r8,16
8000b53c:	f0 09 18 00 	cp.b	r9,r8
8000b540:	ce f1       	brne	8000b51e <udi_msc_spc_inquiry+0xc6>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
8000b542:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b546:	10 9b       	mov	r11,r8
8000b548:	48 9c       	lddpc	r12,8000b56c <udi_msc_spc_inquiry+0x114>
8000b54a:	f0 1f 00 0b 	mcall	8000b574 <udi_msc_spc_inquiry+0x11c>
8000b54e:	c0 28       	rjmp	8000b552 <udi_msc_spc_inquiry+0xfa>
	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000b550:	d7 03       	nop
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
}
8000b552:	2f fd       	sub	sp,-4
8000b554:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b558:	00 00       	add	r0,r0
8000b55a:	06 98       	mov	r8,r3
8000b55c:	80 00       	ld.sh	r0,r0[0x0]
8000b55e:	b0 c0       	st.b	r8[0x4],r0
8000b560:	80 00       	ld.sh	r0,r0[0x0]
8000b562:	b3 bc       	sbr	r12,0x13
8000b564:	80 00       	ld.sh	r0,r0[0x0]
8000b566:	b1 bc       	sbr	r12,0x11
8000b568:	80 00       	ld.sh	r0,r0[0x0]
8000b56a:	ab 30       	mul	r0,r5
8000b56c:	00 00       	add	r0,r0
8000b56e:	00 44       	or	r4,r0
8000b570:	80 00       	ld.sh	r0,r0[0x0]
8000b572:	d1 3e       	*unknown*
8000b574:	80 00       	ld.sh	r0,r0[0x0]
8000b576:	b1 20       	st.d	r8++,r0

8000b578 <udi_msc_spc_testunitready_global>:


static bool udi_msc_spc_testunitready_global(void)
{
8000b578:	eb cd 40 80 	pushm	r7,lr
8000b57c:	1a 97       	mov	r7,sp
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
8000b57e:	48 e8       	lddpc	r8,8000b5b4 <udi_msc_spc_testunitready_global+0x3c>
8000b580:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b584:	10 9c       	mov	r12,r8
8000b586:	f0 1f 00 0d 	mcall	8000b5b8 <udi_msc_spc_testunitready_global+0x40>
8000b58a:	18 98       	mov	r8,r12
8000b58c:	58 28       	cp.w	r8,2
8000b58e:	c0 a0       	breq	8000b5a2 <udi_msc_spc_testunitready_global+0x2a>
8000b590:	58 38       	cp.w	r8,3
8000b592:	c0 50       	breq	8000b59c <udi_msc_spc_testunitready_global+0x24>
8000b594:	58 08       	cp.w	r8,0
8000b596:	c0 91       	brne	8000b5a8 <udi_msc_spc_testunitready_global+0x30>
	case CTRL_GOOD:
		return true;	// Don't change sense data
8000b598:	30 18       	mov	r8,1
8000b59a:	c0 a8       	rjmp	8000b5ae <udi_msc_spc_testunitready_global+0x36>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000b59c:	f0 1f 00 08 	mcall	8000b5bc <udi_msc_spc_testunitready_global+0x44>
		break;
8000b5a0:	c0 68       	rjmp	8000b5ac <udi_msc_spc_testunitready_global+0x34>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000b5a2:	f0 1f 00 08 	mcall	8000b5c0 <udi_msc_spc_testunitready_global+0x48>
		break;
8000b5a6:	c0 38       	rjmp	8000b5ac <udi_msc_spc_testunitready_global+0x34>
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
8000b5a8:	f0 1f 00 07 	mcall	8000b5c4 <udi_msc_spc_testunitready_global+0x4c>
		break;
	}
	return false;
8000b5ac:	30 08       	mov	r8,0
}
8000b5ae:	10 9c       	mov	r12,r8
8000b5b0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b5b4:	00 00       	add	r0,r0
8000b5b6:	06 98       	mov	r8,r3
8000b5b8:	80 00       	ld.sh	r0,r0[0x0]
8000b5ba:	aa 40       	st.h	r5[0x8],r0
8000b5bc:	80 00       	ld.sh	r0,r0[0x0]
8000b5be:	b3 6c       	lsl	r12,0x12
8000b5c0:	80 00       	ld.sh	r0,r0[0x0]
8000b5c2:	b3 50       	asr	r0,0x13
8000b5c4:	80 00       	ld.sh	r0,r0[0x0]
8000b5c6:	b3 88       	lsr	r8,0x12

8000b5c8 <udi_msc_spc_testunitready>:


static void udi_msc_spc_testunitready(void)
{
8000b5c8:	eb cd 40 80 	pushm	r7,lr
8000b5cc:	1a 97       	mov	r7,sp
	if (udi_msc_spc_testunitready_global()) {
8000b5ce:	f0 1f 00 06 	mcall	8000b5e4 <udi_msc_spc_testunitready+0x1c>
8000b5d2:	18 98       	mov	r8,r12
8000b5d4:	58 08       	cp.w	r8,0
8000b5d6:	c0 30       	breq	8000b5dc <udi_msc_spc_testunitready+0x14>
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
8000b5d8:	f0 1f 00 04 	mcall	8000b5e8 <udi_msc_spc_testunitready+0x20>
	}
	// Send status in CSW packet
	udi_msc_csw_process();
8000b5dc:	f0 1f 00 04 	mcall	8000b5ec <udi_msc_spc_testunitready+0x24>
}
8000b5e0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b5e4:	80 00       	ld.sh	r0,r0[0x0]
8000b5e6:	b5 78       	lsl	r8,0x15
8000b5e8:	80 00       	ld.sh	r0,r0[0x0]
8000b5ea:	b3 30       	mul	r0,r9
8000b5ec:	80 00       	ld.sh	r0,r0[0x0]
8000b5ee:	b1 bc       	sbr	r12,0x11

8000b5f0 <udi_msc_spc_mode_sense>:


static void udi_msc_spc_mode_sense(bool b_sense10)
{
8000b5f0:	eb cd 40 80 	pushm	r7,lr
8000b5f4:	1a 97       	mov	r7,sp
8000b5f6:	20 3d       	sub	sp,12
8000b5f8:	18 98       	mov	r8,r12
8000b5fa:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
8000b5fe:	31 4a       	mov	r10,20
8000b600:	30 0b       	mov	r11,0
8000b602:	4c ac       	lddpc	r12,8000b728 <udi_msc_spc_mode_sense+0x138>
8000b604:	f0 1f 00 4a 	mcall	8000b72c <udi_msc_spc_mode_sense+0x13c>

	// Initialize process
	if (b_sense10) {
8000b608:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000b60c:	30 08       	mov	r8,0
8000b60e:	f0 09 18 00 	cp.b	r9,r8
8000b612:	c0 e0       	breq	8000b62e <udi_msc_spc_mode_sense+0x3e>
		request_lgt = udi_msc_cbw.CDB[8];
8000b614:	4c 78       	lddpc	r8,8000b730 <udi_msc_spc_mode_sense+0x140>
8000b616:	f1 38 00 17 	ld.ub	r8,r8[23]
8000b61a:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s10.sense_data;
8000b61e:	4c 38       	lddpc	r8,8000b728 <udi_msc_spc_mode_sense+0x138>
8000b620:	2f 88       	sub	r8,-8
8000b622:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
8000b626:	30 88       	mov	r8,8
8000b628:	ef 68 ff f8 	st.b	r7[-8],r8
8000b62c:	c0 d8       	rjmp	8000b646 <udi_msc_spc_mode_sense+0x56>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
8000b62e:	4c 18       	lddpc	r8,8000b730 <udi_msc_spc_mode_sense+0x140>
8000b630:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b634:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s6.sense_data;
8000b638:	4b c8       	lddpc	r8,8000b728 <udi_msc_spc_mode_sense+0x138>
8000b63a:	2f c8       	sub	r8,-4
8000b63c:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
8000b640:	30 48       	mov	r8,4
8000b642:	ef 68 ff f8 	st.b	r7[-8],r8
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
8000b646:	4b b8       	lddpc	r8,8000b730 <udi_msc_spc_mode_sense+0x140>
8000b648:	f1 38 00 11 	ld.ub	r8,r8[17]
8000b64c:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000b650:	ef 68 ff f9 	st.b	r7[-7],r8
	if ((SCSI_MS_MODE_INFEXP == mode)
8000b654:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000b658:	31 c8       	mov	r8,28
8000b65a:	f0 09 18 00 	cp.b	r9,r8
8000b65e:	c0 70       	breq	8000b66c <udi_msc_spc_mode_sense+0x7c>
8000b660:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000b664:	33 f8       	mov	r8,63
8000b666:	f0 09 18 00 	cp.b	r9,r8
8000b66a:	c1 21       	brne	8000b68e <udi_msc_spc_mode_sense+0x9e>
			|| (SCSI_MS_MODE_ALL == mode)) {
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
8000b66c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b670:	31 c8       	mov	r8,28
8000b672:	b2 88       	st.b	r9[0x0],r8
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
8000b674:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b678:	30 a8       	mov	r8,10
8000b67a:	b2 98       	st.b	r9[0x1],r8
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
8000b67c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b680:	30 58       	mov	r8,5
8000b682:	b2 b8       	st.b	r9[0x3],r8
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
8000b684:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b688:	2f 48       	sub	r8,-12
8000b68a:	ef 68 ff f8 	st.b	r7[-8],r8
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
8000b68e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000b692:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b696:	f0 09 18 00 	cp.b	r9,r8
8000b69a:	e0 88 00 06 	brls	8000b6a6 <udi_msc_spc_mode_sense+0xb6>
		request_lgt = data_sense_lgt;
8000b69e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b6a2:	ef 68 ff fa 	st.b	r7[-6],r8
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
8000b6a6:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000b6aa:	e0 6b 00 80 	mov	r11,128
8000b6ae:	10 9c       	mov	r12,r8
8000b6b0:	f0 1f 00 21 	mcall	8000b734 <udi_msc_spc_mode_sense+0x144>
8000b6b4:	18 98       	mov	r8,r12
8000b6b6:	ec 18 00 01 	eorl	r8,0x1
8000b6ba:	5c 58       	castu.b	r8
8000b6bc:	c3 21       	brne	8000b720 <udi_msc_spc_mode_sense+0x130>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
8000b6be:	49 d8       	lddpc	r8,8000b730 <udi_msc_spc_mode_sense+0x140>
8000b6c0:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b6c4:	10 9c       	mov	r12,r8
8000b6c6:	f0 1f 00 1d 	mcall	8000b738 <udi_msc_spc_mode_sense+0x148>
8000b6ca:	18 98       	mov	r8,r12
8000b6cc:	58 08       	cp.w	r8,0
8000b6ce:	c0 40       	breq	8000b6d6 <udi_msc_spc_mode_sense+0xe6>
8000b6d0:	e0 68 00 80 	mov	r8,128
8000b6d4:	c0 28       	rjmp	8000b6d8 <udi_msc_spc_mode_sense+0xe8>
8000b6d6:	30 08       	mov	r8,0
8000b6d8:	ef 68 ff fb 	st.b	r7[-5],r8

	if (b_sense10) {
8000b6dc:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000b6e0:	30 08       	mov	r8,0
8000b6e2:	f0 09 18 00 	cp.b	r9,r8
8000b6e6:	c0 c0       	breq	8000b6fe <udi_msc_spc_mode_sense+0x10e>
		sense.s10.header.mode_data_length =
8000b6e8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b6ec:	20 28       	sub	r8,2
8000b6ee:	5c 88       	casts.h	r8
8000b6f0:	48 e9       	lddpc	r9,8000b728 <udi_msc_spc_mode_sense+0x138>
8000b6f2:	b2 08       	st.h	r9[0x0],r8
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
8000b6f4:	48 d9       	lddpc	r9,8000b728 <udi_msc_spc_mode_sense+0x138>
8000b6f6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000b6fa:	b2 b8       	st.b	r9[0x3],r8
8000b6fc:	c0 b8       	rjmp	8000b712 <udi_msc_spc_mode_sense+0x122>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
8000b6fe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b702:	20 18       	sub	r8,1
8000b704:	5c 58       	castu.b	r8
8000b706:	48 99       	lddpc	r9,8000b728 <udi_msc_spc_mode_sense+0x138>
8000b708:	b2 88       	st.b	r9[0x0],r8
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
8000b70a:	48 89       	lddpc	r9,8000b728 <udi_msc_spc_mode_sense+0x138>
8000b70c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000b710:	b2 a8       	st.b	r9[0x2],r8
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
8000b712:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000b716:	10 9b       	mov	r11,r8
8000b718:	48 4c       	lddpc	r12,8000b728 <udi_msc_spc_mode_sense+0x138>
8000b71a:	f0 1f 00 09 	mcall	8000b73c <udi_msc_spc_mode_sense+0x14c>
8000b71e:	c0 28       	rjmp	8000b722 <udi_msc_spc_mode_sense+0x132>
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
		return;
8000b720:	d7 03       	nop
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
}
8000b722:	2f dd       	sub	sp,-12
8000b724:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b728:	00 00       	add	r0,r0
8000b72a:	06 e4       	st.h	--r3,r4
8000b72c:	80 00       	ld.sh	r0,r0[0x0]
8000b72e:	d2 86       	*unknown*
8000b730:	00 00       	add	r0,r0
8000b732:	06 98       	mov	r8,r3
8000b734:	80 00       	ld.sh	r0,r0[0x0]
8000b736:	b0 c0       	st.b	r8[0x4],r0
8000b738:	80 00       	ld.sh	r0,r0[0x0]
8000b73a:	aa e0       	st.b	r5[0x6],r0
8000b73c:	80 00       	ld.sh	r0,r0[0x0]
8000b73e:	b1 20       	st.d	r8++,r0

8000b740 <udi_msc_sbc_read_capacity>:


static void udi_msc_sbc_read_capacity(void)
{
8000b740:	eb cd 40 80 	pushm	r7,lr
8000b744:	1a 97       	mov	r7,sp
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
8000b746:	e0 6b 00 80 	mov	r11,128
8000b74a:	30 8c       	mov	r12,8
8000b74c:	f0 1f 00 1b 	mcall	8000b7b8 <udi_msc_sbc_read_capacity+0x78>
8000b750:	18 98       	mov	r8,r12
8000b752:	ec 18 00 01 	eorl	r8,0x1
8000b756:	5c 58       	castu.b	r8
8000b758:	c2 d1       	brne	8000b7b2 <udi_msc_sbc_read_capacity+0x72>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
8000b75a:	49 98       	lddpc	r8,8000b7bc <udi_msc_sbc_read_capacity+0x7c>
8000b75c:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b760:	49 8b       	lddpc	r11,8000b7c0 <udi_msc_sbc_read_capacity+0x80>
8000b762:	10 9c       	mov	r12,r8
8000b764:	f0 1f 00 18 	mcall	8000b7c4 <udi_msc_sbc_read_capacity+0x84>
8000b768:	18 98       	mov	r8,r12
					&udi_msc_capacity.max_lba)) {
8000b76a:	58 28       	cp.w	r8,2
8000b76c:	c1 80       	breq	8000b79c <udi_msc_sbc_read_capacity+0x5c>
8000b76e:	58 38       	cp.w	r8,3
8000b770:	c1 10       	breq	8000b792 <udi_msc_sbc_read_capacity+0x52>
8000b772:	58 08       	cp.w	r8,0
8000b774:	c1 91       	brne	8000b7a6 <udi_msc_sbc_read_capacity+0x66>
		udi_msc_csw_process();
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
8000b776:	49 38       	lddpc	r8,8000b7c0 <udi_msc_sbc_read_capacity+0x80>
8000b778:	e0 69 02 00 	mov	r9,512
8000b77c:	91 19       	st.w	r8[0x4],r9
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
8000b77e:	49 18       	lddpc	r8,8000b7c0 <udi_msc_sbc_read_capacity+0x80>
8000b780:	70 09       	ld.w	r9,r8[0x0]
8000b782:	49 08       	lddpc	r8,8000b7c0 <udi_msc_sbc_read_capacity+0x80>
8000b784:	91 09       	st.w	r8[0x0],r9
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
8000b786:	48 f8       	lddpc	r8,8000b7c0 <udi_msc_sbc_read_capacity+0x80>
8000b788:	30 8b       	mov	r11,8
8000b78a:	10 9c       	mov	r12,r8
8000b78c:	f0 1f 00 0f 	mcall	8000b7c8 <udi_msc_sbc_read_capacity+0x88>
8000b790:	c1 28       	rjmp	8000b7b4 <udi_msc_sbc_read_capacity+0x74>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000b792:	f0 1f 00 0f 	mcall	8000b7cc <udi_msc_sbc_read_capacity+0x8c>
		udi_msc_csw_process();
8000b796:	f0 1f 00 0f 	mcall	8000b7d0 <udi_msc_sbc_read_capacity+0x90>
		return;
8000b79a:	c0 d8       	rjmp	8000b7b4 <udi_msc_sbc_read_capacity+0x74>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000b79c:	f0 1f 00 0e 	mcall	8000b7d4 <udi_msc_sbc_read_capacity+0x94>
		udi_msc_csw_process();
8000b7a0:	f0 1f 00 0c 	mcall	8000b7d0 <udi_msc_sbc_read_capacity+0x90>
		return;
8000b7a4:	c0 88       	rjmp	8000b7b4 <udi_msc_sbc_read_capacity+0x74>
	default:
		udi_msc_sense_fail_hardware();
8000b7a6:	f0 1f 00 0d 	mcall	8000b7d8 <udi_msc_sbc_read_capacity+0x98>
		udi_msc_csw_process();
8000b7aa:	f0 1f 00 0a 	mcall	8000b7d0 <udi_msc_sbc_read_capacity+0x90>
		return;
8000b7ae:	d7 03       	nop
8000b7b0:	c0 28       	rjmp	8000b7b4 <udi_msc_sbc_read_capacity+0x74>
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
					USB_CBW_DIRECTION_IN))
		return;
8000b7b2:	d7 03       	nop
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
			sizeof(udi_msc_capacity));
}
8000b7b4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b7b8:	80 00       	ld.sh	r0,r0[0x0]
8000b7ba:	b0 c0       	st.b	r8[0x4],r0
8000b7bc:	00 00       	add	r0,r0
8000b7be:	06 98       	mov	r8,r3
8000b7c0:	00 00       	add	r0,r0
8000b7c2:	06 dc       	st.w	--r3,r12
8000b7c4:	80 00       	ld.sh	r0,r0[0x0]
8000b7c6:	aa 8c       	st.b	r5[0x0],r12
8000b7c8:	80 00       	ld.sh	r0,r0[0x0]
8000b7ca:	b1 20       	st.d	r8++,r0
8000b7cc:	80 00       	ld.sh	r0,r0[0x0]
8000b7ce:	b3 6c       	lsl	r12,0x12
8000b7d0:	80 00       	ld.sh	r0,r0[0x0]
8000b7d2:	b1 bc       	sbr	r12,0x11
8000b7d4:	80 00       	ld.sh	r0,r0[0x0]
8000b7d6:	b3 50       	asr	r0,0x13
8000b7d8:	80 00       	ld.sh	r0,r0[0x0]
8000b7da:	b3 88       	lsr	r8,0x12

8000b7dc <udi_msc_sbc_trans>:


static void udi_msc_sbc_trans(bool b_read)
{
8000b7dc:	eb cd 40 80 	pushm	r7,lr
8000b7e0:	1a 97       	mov	r7,sp
8000b7e2:	20 2d       	sub	sp,8
8000b7e4:	18 98       	mov	r8,r12
8000b7e6:	ef 68 ff f8 	st.b	r7[-8],r8
	uint32_t trans_size;

	if (!b_read) {
8000b7ea:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b7ee:	ec 18 00 01 	eorl	r8,0x1
8000b7f2:	5c 58       	castu.b	r8
8000b7f4:	c0 f0       	breq	8000b812 <udi_msc_sbc_trans+0x36>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
8000b7f6:	4a e8       	lddpc	r8,8000b8ac <udi_msc_sbc_trans+0xd0>
8000b7f8:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b7fc:	10 9c       	mov	r12,r8
8000b7fe:	f0 1f 00 2d 	mcall	8000b8b0 <udi_msc_sbc_trans+0xd4>
8000b802:	18 98       	mov	r8,r12
8000b804:	58 08       	cp.w	r8,0
8000b806:	c0 60       	breq	8000b812 <udi_msc_sbc_trans+0x36>
			// Write not authorized
			udi_msc_sense_fail_protected();
8000b808:	f0 1f 00 2b 	mcall	8000b8b4 <udi_msc_sbc_trans+0xd8>
			udi_msc_csw_process();
8000b80c:	f0 1f 00 2b 	mcall	8000b8b8 <udi_msc_sbc_trans+0xdc>
			return;
8000b810:	c4 a8       	rjmp	8000b8a4 <udi_msc_sbc_trans+0xc8>
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
8000b812:	4a b9       	lddpc	r9,8000b8bc <udi_msc_sbc_trans+0xe0>
8000b814:	4a 68       	lddpc	r8,8000b8ac <udi_msc_sbc_trans+0xd0>
8000b816:	f1 38 00 11 	ld.ub	r8,r8[17]
8000b81a:	b2 88       	st.b	r9[0x0],r8
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
8000b81c:	4a 88       	lddpc	r8,8000b8bc <udi_msc_sbc_trans+0xe0>
8000b81e:	f0 c9 ff ff 	sub	r9,r8,-1
8000b822:	4a 38       	lddpc	r8,8000b8ac <udi_msc_sbc_trans+0xd0>
8000b824:	f1 38 00 12 	ld.ub	r8,r8[18]
8000b828:	b2 88       	st.b	r9[0x0],r8
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
8000b82a:	4a 58       	lddpc	r8,8000b8bc <udi_msc_sbc_trans+0xe0>
8000b82c:	f0 c9 ff fe 	sub	r9,r8,-2
8000b830:	49 f8       	lddpc	r8,8000b8ac <udi_msc_sbc_trans+0xd0>
8000b832:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b836:	b2 88       	st.b	r9[0x0],r8
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
8000b838:	4a 18       	lddpc	r8,8000b8bc <udi_msc_sbc_trans+0xe0>
8000b83a:	f0 c9 ff fd 	sub	r9,r8,-3
8000b83e:	49 c8       	lddpc	r8,8000b8ac <udi_msc_sbc_trans+0xd0>
8000b840:	f1 38 00 14 	ld.ub	r8,r8[20]
8000b844:	b2 88       	st.b	r9[0x0],r8
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
8000b846:	49 f9       	lddpc	r9,8000b8c0 <udi_msc_sbc_trans+0xe4>
8000b848:	49 98       	lddpc	r8,8000b8ac <udi_msc_sbc_trans+0xd0>
8000b84a:	f1 38 00 16 	ld.ub	r8,r8[22]
8000b84e:	b2 88       	st.b	r9[0x0],r8
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
8000b850:	49 c8       	lddpc	r8,8000b8c0 <udi_msc_sbc_trans+0xe4>
8000b852:	f0 c9 ff ff 	sub	r9,r8,-1
8000b856:	49 68       	lddpc	r8,8000b8ac <udi_msc_sbc_trans+0xd0>
8000b858:	f1 38 00 17 	ld.ub	r8,r8[23]
8000b85c:	b2 88       	st.b	r9[0x0],r8

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
8000b85e:	49 98       	lddpc	r8,8000b8c0 <udi_msc_sbc_trans+0xe4>
8000b860:	90 08       	ld.sh	r8,r8[0x0]
8000b862:	5c 78       	castu.h	r8
8000b864:	a9 78       	lsl	r8,0x9
8000b866:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udi_msc_cbw_validate(trans_size,
8000b86a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000b86e:	30 08       	mov	r8,0
8000b870:	f0 09 18 00 	cp.b	r9,r8
8000b874:	c0 40       	breq	8000b87c <udi_msc_sbc_trans+0xa0>
8000b876:	e0 68 00 80 	mov	r8,128
8000b87a:	c0 28       	rjmp	8000b87e <udi_msc_sbc_trans+0xa2>
8000b87c:	30 08       	mov	r8,0
8000b87e:	10 9b       	mov	r11,r8
8000b880:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b884:	f0 1f 00 10 	mcall	8000b8c4 <udi_msc_sbc_trans+0xe8>
8000b888:	18 98       	mov	r8,r12
8000b88a:	ec 18 00 01 	eorl	r8,0x1
8000b88e:	5c 58       	castu.b	r8
8000b890:	c0 91       	brne	8000b8a2 <udi_msc_sbc_trans+0xc6>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
8000b892:	48 e9       	lddpc	r9,8000b8c8 <udi_msc_sbc_trans+0xec>
8000b894:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b898:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_trans_req = true;
8000b89a:	48 d9       	lddpc	r9,8000b8cc <udi_msc_sbc_trans+0xf0>
8000b89c:	30 18       	mov	r8,1
8000b89e:	b2 88       	st.b	r9[0x0],r8
8000b8a0:	c0 28       	rjmp	8000b8a4 <udi_msc_sbc_trans+0xc8>
	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
	if (!udi_msc_cbw_validate(trans_size,
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;
8000b8a2:	d7 03       	nop

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
	udi_msc_b_trans_req = true;
	UDI_MSC_NOTIFY_TRANS_EXT();
}
8000b8a4:	2f ed       	sub	sp,-8
8000b8a6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b8aa:	00 00       	add	r0,r0
8000b8ac:	00 00       	add	r0,r0
8000b8ae:	06 98       	mov	r8,r3
8000b8b0:	80 00       	ld.sh	r0,r0[0x0]
8000b8b2:	aa e0       	st.b	r5[0x6],r0
8000b8b4:	80 00       	ld.sh	r0,r0[0x0]
8000b8b6:	b3 a0       	sbr	r0,0x12
8000b8b8:	80 00       	ld.sh	r0,r0[0x0]
8000b8ba:	b1 bc       	sbr	r12,0x11
8000b8bc:	00 00       	add	r0,r0
8000b8be:	06 d4       	st.w	--r3,r4
8000b8c0:	00 00       	add	r0,r0
8000b8c2:	06 d8       	st.w	--r3,r8
8000b8c4:	80 00       	ld.sh	r0,r0[0x0]
8000b8c6:	b0 c0       	st.b	r8[0x4],r0
8000b8c8:	00 00       	add	r0,r0
8000b8ca:	06 d2       	st.w	--r3,r2
8000b8cc:	00 00       	add	r0,r0
8000b8ce:	06 d1       	st.w	--r3,r1

8000b8d0 <udi_msc_process_trans>:


bool udi_msc_process_trans(void)
{
8000b8d0:	eb cd 40 80 	pushm	r7,lr
8000b8d4:	1a 97       	mov	r7,sp
8000b8d6:	20 1d       	sub	sp,4
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
8000b8d8:	4a 58       	lddpc	r8,8000b96c <udi_msc_process_trans+0x9c>
8000b8da:	11 88       	ld.ub	r8,r8[0x0]
8000b8dc:	ec 18 00 01 	eorl	r8,0x1
8000b8e0:	5c 58       	castu.b	r8
8000b8e2:	c0 30       	breq	8000b8e8 <udi_msc_process_trans+0x18>
		return false;	// No Transfer request to do
8000b8e4:	30 08       	mov	r8,0
8000b8e6:	c3 f8       	rjmp	8000b964 <udi_msc_process_trans+0x94>
	udi_msc_b_trans_req = false;
8000b8e8:	4a 19       	lddpc	r9,8000b96c <udi_msc_process_trans+0x9c>
8000b8ea:	30 08       	mov	r8,0
8000b8ec:	b2 88       	st.b	r9[0x0],r8

	// Start transfer
	if (udi_msc_b_read) {
8000b8ee:	4a 18       	lddpc	r8,8000b970 <udi_msc_process_trans+0xa0>
8000b8f0:	11 88       	ld.ub	r8,r8[0x0]
8000b8f2:	58 08       	cp.w	r8,0
8000b8f4:	c1 20       	breq	8000b918 <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000b8f6:	4a 08       	lddpc	r8,8000b974 <udi_msc_process_trans+0xa4>
8000b8f8:	90 08       	ld.sh	r8,r8[0x0]
8000b8fa:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b8fe:	49 f8       	lddpc	r8,8000b978 <udi_msc_process_trans+0xa8>
8000b900:	70 09       	ld.w	r9,r8[0x0]
8000b902:	49 f8       	lddpc	r8,8000b97c <udi_msc_process_trans+0xac>
8000b904:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b908:	12 9b       	mov	r11,r9
8000b90a:	10 9c       	mov	r12,r8
8000b90c:	f0 1f 00 1d 	mcall	8000b980 <udi_msc_process_trans+0xb0>
8000b910:	18 98       	mov	r8,r12
8000b912:	ef 48 ff fc 	st.w	r7[-4],r8
8000b916:	c1 18       	rjmp	8000b938 <udi_msc_process_trans+0x68>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000b918:	49 78       	lddpc	r8,8000b974 <udi_msc_process_trans+0xa4>
8000b91a:	90 08       	ld.sh	r8,r8[0x0]
8000b91c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b920:	49 68       	lddpc	r8,8000b978 <udi_msc_process_trans+0xa8>
8000b922:	70 09       	ld.w	r9,r8[0x0]
8000b924:	49 68       	lddpc	r8,8000b97c <udi_msc_process_trans+0xac>
8000b926:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b92a:	12 9b       	mov	r11,r9
8000b92c:	10 9c       	mov	r12,r8
8000b92e:	f0 1f 00 16 	mcall	8000b984 <udi_msc_process_trans+0xb4>
8000b932:	18 98       	mov	r8,r12
8000b934:	ef 48 ff fc 	st.w	r7[-4],r8
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
8000b938:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b93c:	58 28       	cp.w	r8,2
8000b93e:	c0 b0       	breq	8000b954 <udi_msc_process_trans+0x84>
8000b940:	58 38       	cp.w	r8,3
8000b942:	c0 60       	breq	8000b94e <udi_msc_process_trans+0x7e>
8000b944:	58 08       	cp.w	r8,0
8000b946:	c0 a1       	brne	8000b95a <udi_msc_process_trans+0x8a>
	case CTRL_GOOD:
		udi_msc_sense_pass();
8000b948:	f0 1f 00 10 	mcall	8000b988 <udi_msc_process_trans+0xb8>
		break;
8000b94c:	c0 98       	rjmp	8000b95e <udi_msc_process_trans+0x8e>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000b94e:	f0 1f 00 10 	mcall	8000b98c <udi_msc_process_trans+0xbc>
		break;
8000b952:	c0 68       	rjmp	8000b95e <udi_msc_process_trans+0x8e>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000b954:	f0 1f 00 0f 	mcall	8000b990 <udi_msc_process_trans+0xc0>
		break;
8000b958:	c0 38       	rjmp	8000b95e <udi_msc_process_trans+0x8e>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
8000b95a:	f0 1f 00 0f 	mcall	8000b994 <udi_msc_process_trans+0xc4>
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
8000b95e:	f0 1f 00 0f 	mcall	8000b998 <udi_msc_process_trans+0xc8>
	return true;
8000b962:	30 18       	mov	r8,1
}
8000b964:	10 9c       	mov	r12,r8
8000b966:	2f fd       	sub	sp,-4
8000b968:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b96c:	00 00       	add	r0,r0
8000b96e:	06 d1       	st.w	--r3,r1
8000b970:	00 00       	add	r0,r0
8000b972:	06 d2       	st.w	--r3,r2
8000b974:	00 00       	add	r0,r0
8000b976:	06 d8       	st.w	--r3,r8
8000b978:	00 00       	add	r0,r0
8000b97a:	06 d4       	st.w	--r3,r4
8000b97c:	00 00       	add	r0,r0
8000b97e:	06 98       	mov	r8,r3
8000b980:	80 00       	ld.sh	r0,r0[0x0]
8000b982:	ab 74       	lsl	r4,0xb
8000b984:	80 00       	ld.sh	r0,r0[0x0]
8000b986:	ab e8       	*unknown*
8000b988:	80 00       	ld.sh	r0,r0[0x0]
8000b98a:	b3 30       	mul	r0,r9
8000b98c:	80 00       	ld.sh	r0,r0[0x0]
8000b98e:	b3 6c       	lsl	r12,0x12
8000b990:	80 00       	ld.sh	r0,r0[0x0]
8000b992:	b3 50       	asr	r0,0x13
8000b994:	80 00       	ld.sh	r0,r0[0x0]
8000b996:	b3 88       	lsr	r8,0x12
8000b998:	80 00       	ld.sh	r0,r0[0x0]
8000b99a:	b1 bc       	sbr	r12,0x11

8000b99c <udi_msc_trans_ack>:


static void udi_msc_trans_ack(udd_ep_status_t status, iram_size_t n,
		udd_ep_id_t ep)
{
8000b99c:	eb cd 40 80 	pushm	r7,lr
8000b9a0:	1a 97       	mov	r7,sp
8000b9a2:	20 3d       	sub	sp,12
8000b9a4:	ef 4c ff fc 	st.w	r7[-4],r12
8000b9a8:	ef 4b ff f8 	st.w	r7[-8],r11
8000b9ac:	14 98       	mov	r8,r10
8000b9ae:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
8000b9b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b9b6:	58 08       	cp.w	r8,0
8000b9b8:	5f 18       	srne	r8
8000b9ba:	5c 58       	castu.b	r8
8000b9bc:	48 49       	lddpc	r9,8000b9cc <udi_msc_trans_ack+0x30>
8000b9be:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_ack_trans = true;
8000b9c0:	48 49       	lddpc	r9,8000b9d0 <udi_msc_trans_ack+0x34>
8000b9c2:	30 18       	mov	r8,1
8000b9c4:	b2 88       	st.b	r9[0x0],r8
}
8000b9c6:	2f dd       	sub	sp,-12
8000b9c8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b9cc:	00 00       	add	r0,r0
8000b9ce:	0b e7       	ld.ub	r7,r5[0x6]
8000b9d0:	00 00       	add	r0,r0
8000b9d2:	00 40       	or	r0,r0

8000b9d4 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
8000b9d4:	eb cd 40 80 	pushm	r7,lr
8000b9d8:	1a 97       	mov	r7,sp
8000b9da:	20 4d       	sub	sp,16
8000b9dc:	18 98       	mov	r8,r12
8000b9de:	ef 4b ff f8 	st.w	r7[-8],r11
8000b9e2:	ef 4a ff f4 	st.w	r7[-12],r10
8000b9e6:	ef 49 ff f0 	st.w	r7[-16],r9
8000b9ea:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!udi_msc_b_ack_trans)
8000b9ee:	4a e8       	lddpc	r8,8000baa4 <udi_msc_trans_block+0xd0>
8000b9f0:	11 88       	ld.ub	r8,r8[0x0]
8000b9f2:	5c 58       	castu.b	r8
8000b9f4:	ec 18 00 01 	eorl	r8,0x1
8000b9f8:	5c 58       	castu.b	r8
8000b9fa:	c0 30       	breq	8000ba00 <udi_msc_trans_block+0x2c>
		return false;	// No possible, transfer on going
8000b9fc:	30 08       	mov	r8,0
8000b9fe:	c4 f8       	rjmp	8000ba9c <udi_msc_trans_block+0xc8>

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
8000ba00:	4a 99       	lddpc	r9,8000baa4 <udi_msc_trans_block+0xd0>
8000ba02:	30 08       	mov	r8,0
8000ba04:	b2 88       	st.b	r9[0x0],r8
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
8000ba06:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ba0a:	58 08       	cp.w	r8,0
8000ba0c:	c0 40       	breq	8000ba14 <udi_msc_trans_block+0x40>
8000ba0e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ba12:	c0 28       	rjmp	8000ba16 <udi_msc_trans_block+0x42>
8000ba14:	4a 58       	lddpc	r8,8000baa8 <udi_msc_trans_block+0xd4>
8000ba16:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000ba1a:	30 09       	mov	r9,0
8000ba1c:	f2 0a 18 00 	cp.b	r10,r9
8000ba20:	c0 40       	breq	8000ba28 <udi_msc_trans_block+0x54>
8000ba22:	e0 6c 00 81 	mov	r12,129
8000ba26:	c0 28       	rjmp	8000ba2a <udi_msc_trans_block+0x56>
8000ba28:	30 2c       	mov	r12,2
8000ba2a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ba2e:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ba32:	30 0b       	mov	r11,0
8000ba34:	f0 1f 00 1e 	mcall	8000baac <udi_msc_trans_block+0xd8>
8000ba38:	18 98       	mov	r8,r12
8000ba3a:	ec 18 00 01 	eorl	r8,0x1
8000ba3e:	5c 58       	castu.b	r8
8000ba40:	c0 60       	breq	8000ba4c <udi_msc_trans_block+0x78>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
8000ba42:	49 99       	lddpc	r9,8000baa4 <udi_msc_trans_block+0xd0>
8000ba44:	30 18       	mov	r8,1
8000ba46:	b2 88       	st.b	r9[0x0],r8
		return false;
8000ba48:	30 08       	mov	r8,0
8000ba4a:	c2 98       	rjmp	8000ba9c <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
8000ba4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ba50:	58 08       	cp.w	r8,0
8000ba52:	c1 d1       	brne	8000ba8c <udi_msc_trans_block+0xb8>
		while (!udi_msc_b_ack_trans);
8000ba54:	49 48       	lddpc	r8,8000baa4 <udi_msc_trans_block+0xd0>
8000ba56:	11 88       	ld.ub	r8,r8[0x0]
8000ba58:	5c 58       	castu.b	r8
8000ba5a:	ec 18 00 01 	eorl	r8,0x1
8000ba5e:	5c 58       	castu.b	r8
8000ba60:	cf a1       	brne	8000ba54 <udi_msc_trans_block+0x80>
		if (udi_msc_b_abort_trans) {
8000ba62:	49 48       	lddpc	r8,8000bab0 <udi_msc_trans_block+0xdc>
8000ba64:	11 88       	ld.ub	r8,r8[0x0]
8000ba66:	5c 58       	castu.b	r8
8000ba68:	c0 30       	breq	8000ba6e <udi_msc_trans_block+0x9a>
			return false;
8000ba6a:	30 08       	mov	r8,0
8000ba6c:	c1 88       	rjmp	8000ba9c <udi_msc_trans_block+0xc8>
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
8000ba6e:	49 28       	lddpc	r8,8000bab4 <udi_msc_trans_block+0xe0>
8000ba70:	70 29       	ld.w	r9,r8[0x8]
8000ba72:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ba76:	10 19       	sub	r9,r8
8000ba78:	48 f8       	lddpc	r8,8000bab4 <udi_msc_trans_block+0xe0>
8000ba7a:	91 29       	st.w	r8[0x8],r9
		return (!udi_msc_b_abort_trans);
8000ba7c:	48 d8       	lddpc	r8,8000bab0 <udi_msc_trans_block+0xdc>
8000ba7e:	11 88       	ld.ub	r8,r8[0x0]
8000ba80:	5c 58       	castu.b	r8
8000ba82:	ec 18 00 01 	eorl	r8,0x1
8000ba86:	5c 58       	castu.b	r8
8000ba88:	5c 58       	castu.b	r8
8000ba8a:	c0 98       	rjmp	8000ba9c <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
8000ba8c:	48 a8       	lddpc	r8,8000bab4 <udi_msc_trans_block+0xe0>
8000ba8e:	70 29       	ld.w	r9,r8[0x8]
8000ba90:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ba94:	10 19       	sub	r9,r8
8000ba96:	48 88       	lddpc	r8,8000bab4 <udi_msc_trans_block+0xe0>
8000ba98:	91 29       	st.w	r8[0x8],r9
	return true;
8000ba9a:	30 18       	mov	r8,1
}
8000ba9c:	10 9c       	mov	r12,r8
8000ba9e:	2f cd       	sub	sp,-16
8000baa0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000baa4:	00 00       	add	r0,r0
8000baa6:	00 40       	or	r0,r0
8000baa8:	80 00       	ld.sh	r0,r0[0x0]
8000baaa:	b9 9c       	lsr	r12,0x19
8000baac:	80 00       	ld.sh	r0,r0[0x0]
8000baae:	8f 2c       	st.w	r7[0x8],r12
8000bab0:	00 00       	add	r0,r0
8000bab2:	0b e7       	ld.ub	r7,r5[0x6]
8000bab4:	00 00       	add	r0,r0
8000bab6:	00 30       	cp.w	r0,r0
8000bab8:	36 39       	mov	r9,99
8000baba:	36 39       	mov	r9,99
8000babc:	36 39       	mov	r9,99
8000babe:	36 39       	mov	r9,99
8000bac0:	36 39       	mov	r9,99
8000bac2:	36 39       	mov	r9,99
8000bac4:	00 00       	add	r0,r0
	...

8000bac8 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
8000bac8:	eb cd 40 80 	pushm	r7,lr
8000bacc:	1a 97       	mov	r7,sp
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
8000bace:	48 38       	lddpc	r8,8000bad8 <udc_get_string_serial_name+0x10>
	}
8000bad0:	10 9c       	mov	r12,r8
8000bad2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bad6:	00 00       	add	r0,r0
8000bad8:	80 00       	ld.sh	r0,r0[0x0]
8000bada:	ba b8       	st.b	sp[0x3],r8

8000badc <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
8000badc:	eb cd 40 80 	pushm	r7,lr
8000bae0:	1a 97       	mov	r7,sp
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
8000bae2:	48 b8       	lddpc	r8,8000bb0c <udc_get_eof_conf+0x30>
8000bae4:	70 08       	ld.w	r8,r8[0x0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000bae6:	70 09       	ld.w	r9,r8[0x0]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000bae8:	48 98       	lddpc	r8,8000bb0c <udc_get_eof_conf+0x30>
8000baea:	70 08       	ld.w	r8,r8[0x0]
8000baec:	70 08       	ld.w	r8,r8[0x0]
8000baee:	11 aa       	ld.ub	r10,r8[0x2]
8000baf0:	a9 6a       	lsl	r10,0x8
8000baf2:	11 b8       	ld.ub	r8,r8[0x3]
8000baf4:	14 48       	or	r8,r10
8000baf6:	5c 88       	casts.h	r8
8000baf8:	5c 88       	casts.h	r8
8000bafa:	5c c8       	swap.bh	r8
8000bafc:	5c 88       	casts.h	r8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000bafe:	5c 78       	castu.h	r8
8000bb00:	f2 08 00 08 	add	r8,r9,r8
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
8000bb04:	10 9c       	mov	r12,r8
8000bb06:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb0a:	00 00       	add	r0,r0
8000bb0c:	00 00       	add	r0,r0
8000bb0e:	06 fc       	st.b	--r3,r12

8000bb10 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
8000bb10:	eb cd 40 80 	pushm	r7,lr
8000bb14:	1a 97       	mov	r7,sp
8000bb16:	20 3d       	sub	sp,12
8000bb18:	ef 4c ff f8 	st.w	r7[-8],r12
8000bb1c:	16 98       	mov	r8,r11
8000bb1e:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
8000bb22:	f0 1f 00 1d 	mcall	8000bb94 <udc_next_desc_in_iface+0x84>
8000bb26:	18 98       	mov	r8,r12
8000bb28:	ef 48 ff fc 	st.w	r7[-4],r8
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000bb2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb30:	11 88       	ld.ub	r8,r8[0x0]
8000bb32:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bb36:	f2 08 00 08 	add	r8,r9,r8
8000bb3a:	ef 48 ff f8 	st.w	r7[-8],r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000bb3e:	c1 c8       	rjmp	8000bb76 <udc_next_desc_in_iface+0x66>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
8000bb40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb44:	11 99       	ld.ub	r9,r8[0x1]
8000bb46:	30 48       	mov	r8,4
8000bb48:	f0 09 18 00 	cp.b	r9,r8
8000bb4c:	c1 d0       	breq	8000bb86 <udc_next_desc_in_iface+0x76>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
8000bb4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb52:	11 98       	ld.ub	r8,r8[0x1]
8000bb54:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000bb58:	f0 09 18 00 	cp.b	r9,r8
8000bb5c:	c0 41       	brne	8000bb64 <udc_next_desc_in_iface+0x54>
			return desc; // Specific descriptor found
8000bb5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb62:	c1 48       	rjmp	8000bb8a <udc_next_desc_in_iface+0x7a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000bb64:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb68:	11 88       	ld.ub	r8,r8[0x0]
8000bb6a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bb6e:	f2 08 00 08 	add	r8,r9,r8
8000bb72:	ef 48 ff f8 	st.w	r7[-8],r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000bb76:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bb7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb7e:	10 39       	cp.w	r9,r8
8000bb80:	fe 9b ff e0 	brhi	8000bb40 <udc_next_desc_in_iface+0x30>
8000bb84:	c0 28       	rjmp	8000bb88 <udc_next_desc_in_iface+0x78>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
8000bb86:	d7 03       	nop
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
8000bb88:	30 08       	mov	r8,0
}
8000bb8a:	10 9c       	mov	r12,r8
8000bb8c:	2f dd       	sub	sp,-12
8000bb8e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb92:	00 00       	add	r0,r0
8000bb94:	80 00       	ld.sh	r0,r0[0x0]
8000bb96:	ba dc       	st.b	sp[0x5],r12

8000bb98 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
8000bb98:	eb cd 40 80 	pushm	r7,lr
8000bb9c:	1a 97       	mov	r7,sp
8000bb9e:	20 3d       	sub	sp,12
8000bba0:	18 99       	mov	r9,r12
8000bba2:	16 98       	mov	r8,r11
8000bba4:	ef 69 ff f8 	st.b	r7[-8],r9
8000bba8:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
8000bbac:	4a 58       	lddpc	r8,8000bc40 <udc_update_iface_desc+0xa8>
8000bbae:	11 88       	ld.ub	r8,r8[0x0]
8000bbb0:	58 08       	cp.w	r8,0
8000bbb2:	c0 31       	brne	8000bbb8 <udc_update_iface_desc+0x20>
		return false;
8000bbb4:	30 08       	mov	r8,0
8000bbb6:	c4 18       	rjmp	8000bc38 <udc_update_iface_desc+0xa0>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000bbb8:	4a 38       	lddpc	r8,8000bc44 <udc_update_iface_desc+0xac>
8000bbba:	70 08       	ld.w	r8,r8[0x0]
8000bbbc:	70 08       	ld.w	r8,r8[0x0]
8000bbbe:	11 c8       	ld.ub	r8,r8[0x4]
8000bbc0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bbc4:	f0 09 18 00 	cp.b	r9,r8
8000bbc8:	c0 33       	brcs	8000bbce <udc_update_iface_desc+0x36>
		return false;
8000bbca:	30 08       	mov	r8,0
8000bbcc:	c3 68       	rjmp	8000bc38 <udc_update_iface_desc+0xa0>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
8000bbce:	49 e8       	lddpc	r8,8000bc44 <udc_update_iface_desc+0xac>
8000bbd0:	70 08       	ld.w	r8,r8[0x0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000bbd2:	70 08       	ld.w	r8,r8[0x0]
8000bbd4:	10 99       	mov	r9,r8
8000bbd6:	49 d8       	lddpc	r8,8000bc48 <udc_update_iface_desc+0xb0>
8000bbd8:	91 09       	st.w	r8[0x0],r9
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000bbda:	f0 1f 00 1d 	mcall	8000bc4c <udc_update_iface_desc+0xb4>
8000bbde:	18 98       	mov	r8,r12
8000bbe0:	ef 48 ff fc 	st.w	r7[-4],r8
	while (ptr_end_desc >
8000bbe4:	c2 28       	rjmp	8000bc28 <udc_update_iface_desc+0x90>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000bbe6:	49 98       	lddpc	r8,8000bc48 <udc_update_iface_desc+0xb0>
8000bbe8:	70 08       	ld.w	r8,r8[0x0]
8000bbea:	11 99       	ld.ub	r9,r8[0x1]
8000bbec:	30 48       	mov	r8,4
8000bbee:	f0 09 18 00 	cp.b	r9,r8
8000bbf2:	c1 31       	brne	8000bc18 <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000bbf4:	49 58       	lddpc	r8,8000bc48 <udc_update_iface_desc+0xb0>
8000bbf6:	70 08       	ld.w	r8,r8[0x0]
8000bbf8:	11 a8       	ld.ub	r8,r8[0x2]
8000bbfa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bbfe:	f0 09 18 00 	cp.b	r9,r8
8000bc02:	c0 b1       	brne	8000bc18 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
8000bc04:	49 18       	lddpc	r8,8000bc48 <udc_update_iface_desc+0xb0>
8000bc06:	70 08       	ld.w	r8,r8[0x0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
					(setting_num ==
8000bc08:	11 b8       	ld.ub	r8,r8[0x3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000bc0a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000bc0e:	f0 09 18 00 	cp.b	r9,r8
8000bc12:	c0 31       	brne	8000bc18 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
8000bc14:	30 18       	mov	r8,1
8000bc16:	c1 18       	rjmp	8000bc38 <udc_update_iface_desc+0xa0>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000bc18:	48 c8       	lddpc	r8,8000bc48 <udc_update_iface_desc+0xb0>
8000bc1a:	70 09       	ld.w	r9,r8[0x0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
8000bc1c:	48 b8       	lddpc	r8,8000bc48 <udc_update_iface_desc+0xb0>
8000bc1e:	70 08       	ld.w	r8,r8[0x0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000bc20:	11 88       	ld.ub	r8,r8[0x0]
8000bc22:	10 09       	add	r9,r8
8000bc24:	48 98       	lddpc	r8,8000bc48 <udc_update_iface_desc+0xb0>
8000bc26:	91 09       	st.w	r8[0x0],r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000bc28:	48 88       	lddpc	r8,8000bc48 <udc_update_iface_desc+0xb0>
8000bc2a:	70 08       	ld.w	r8,r8[0x0]
8000bc2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bc30:	10 39       	cp.w	r9,r8
8000bc32:	fe 9b ff da 	brhi	8000bbe6 <udc_update_iface_desc+0x4e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
8000bc36:	30 08       	mov	r8,0
}
8000bc38:	10 9c       	mov	r12,r8
8000bc3a:	2f dd       	sub	sp,-12
8000bc3c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc40:	00 00       	add	r0,r0
8000bc42:	06 fa       	st.b	--r3,r10
8000bc44:	00 00       	add	r0,r0
8000bc46:	06 fc       	st.b	--r3,r12
8000bc48:	00 00       	add	r0,r0
8000bc4a:	07 00       	ld.w	r0,r3++
8000bc4c:	80 00       	ld.sh	r0,r0[0x0]
8000bc4e:	ba dc       	st.b	sp[0x5],r12

8000bc50 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
8000bc50:	eb cd 40 80 	pushm	r7,lr
8000bc54:	1a 97       	mov	r7,sp
8000bc56:	20 3d       	sub	sp,12
8000bc58:	18 98       	mov	r8,r12
8000bc5a:	ef 68 ff f4 	st.b	r7[-12],r8
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000bc5e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000bc62:	30 0b       	mov	r11,0
8000bc64:	10 9c       	mov	r12,r8
8000bc66:	f0 1f 00 25 	mcall	8000bcf8 <udc_iface_disable+0xa8>
8000bc6a:	18 98       	mov	r8,r12
8000bc6c:	ec 18 00 01 	eorl	r8,0x1
8000bc70:	5c 58       	castu.b	r8
8000bc72:	c0 30       	breq	8000bc78 <udc_iface_disable+0x28>
		return false;
8000bc74:	30 08       	mov	r8,0
8000bc76:	c3 d8       	rjmp	8000bcf0 <udc_iface_disable+0xa0>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000bc78:	4a 18       	lddpc	r8,8000bcfc <udc_iface_disable+0xac>
8000bc7a:	70 08       	ld.w	r8,r8[0x0]
8000bc7c:	70 19       	ld.w	r9,r8[0x4]
8000bc7e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000bc82:	a3 68       	lsl	r8,0x2
8000bc84:	f2 08 00 08 	add	r8,r9,r8
8000bc88:	70 08       	ld.w	r8,r8[0x0]
8000bc8a:	ef 48 ff f8 	st.w	r7[-8],r8

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000bc8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bc92:	70 38       	ld.w	r8,r8[0xc]
8000bc94:	5d 18       	icall	r8
8000bc96:	18 98       	mov	r8,r12
8000bc98:	10 99       	mov	r9,r8
8000bc9a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000bc9e:	12 9b       	mov	r11,r9
8000bca0:	10 9c       	mov	r12,r8
8000bca2:	f0 1f 00 16 	mcall	8000bcf8 <udc_iface_disable+0xa8>
8000bca6:	18 98       	mov	r8,r12
8000bca8:	ec 18 00 01 	eorl	r8,0x1
8000bcac:	5c 58       	castu.b	r8
8000bcae:	c0 30       	breq	8000bcb4 <udc_iface_disable+0x64>
		return false;
8000bcb0:	30 08       	mov	r8,0
8000bcb2:	c1 f8       	rjmp	8000bcf0 <udc_iface_disable+0xa0>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000bcb4:	49 38       	lddpc	r8,8000bd00 <udc_iface_disable+0xb0>
8000bcb6:	70 08       	ld.w	r8,r8[0x0]
8000bcb8:	ef 48 ff fc 	st.w	r7[-4],r8
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000bcbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcc0:	30 5b       	mov	r11,5
8000bcc2:	10 9c       	mov	r12,r8
8000bcc4:	f0 1f 00 10 	mcall	8000bd04 <udc_iface_disable+0xb4>
8000bcc8:	18 98       	mov	r8,r12
8000bcca:	ef 48 ff fc 	st.w	r7[-4],r8
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
8000bcce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcd2:	58 08       	cp.w	r8,0
8000bcd4:	c0 71       	brne	8000bce2 <udc_iface_disable+0x92>
		}
	}
#endif

	// Disable interface
	udi_api->disable();
8000bcd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bcda:	70 18       	ld.w	r8,r8[0x4]
8000bcdc:	5d 18       	icall	r8
	return true;
8000bcde:	30 18       	mov	r8,1
8000bce0:	c0 88       	rjmp	8000bcf0 <udc_iface_disable+0xa0>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000bce2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bce6:	11 a8       	ld.ub	r8,r8[0x2]
8000bce8:	10 9c       	mov	r12,r8
8000bcea:	f0 1f 00 08 	mcall	8000bd08 <udc_iface_disable+0xb8>
		}
8000bcee:	ce 7b       	rjmp	8000bcbc <udc_iface_disable+0x6c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
8000bcf0:	10 9c       	mov	r12,r8
8000bcf2:	2f dd       	sub	sp,-12
8000bcf4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bcf8:	80 00       	ld.sh	r0,r0[0x0]
8000bcfa:	bb 98       	lsr	r8,0x1b
8000bcfc:	00 00       	add	r0,r0
8000bcfe:	06 fc       	st.b	--r3,r12
8000bd00:	00 00       	add	r0,r0
8000bd02:	07 00       	ld.w	r0,r3++
8000bd04:	80 00       	ld.sh	r0,r0[0x0]
8000bd06:	bb 10       	ld.d	r0,--sp
8000bd08:	80 00       	ld.sh	r0,r0[0x0]
8000bd0a:	8c 0c       	ld.sh	r12,r6[0x0]

8000bd0c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
8000bd0c:	eb cd 40 80 	pushm	r7,lr
8000bd10:	1a 97       	mov	r7,sp
8000bd12:	20 3d       	sub	sp,12
8000bd14:	18 99       	mov	r9,r12
8000bd16:	16 98       	mov	r8,r11
8000bd18:	ef 69 ff f8 	st.b	r7[-8],r9
8000bd1c:	ef 68 ff f4 	st.b	r7[-12],r8
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
8000bd20:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000bd24:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000bd28:	12 9b       	mov	r11,r9
8000bd2a:	10 9c       	mov	r12,r8
8000bd2c:	f0 1f 00 25 	mcall	8000bdc0 <udc_iface_enable+0xb4>
8000bd30:	18 98       	mov	r8,r12
8000bd32:	ec 18 00 01 	eorl	r8,0x1
8000bd36:	5c 58       	castu.b	r8
8000bd38:	c0 30       	breq	8000bd3e <udc_iface_enable+0x32>
		return false;
8000bd3a:	30 08       	mov	r8,0
8000bd3c:	c3 e8       	rjmp	8000bdb8 <udc_iface_enable+0xac>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000bd3e:	4a 28       	lddpc	r8,8000bdc4 <udc_iface_enable+0xb8>
8000bd40:	70 08       	ld.w	r8,r8[0x0]
8000bd42:	ef 48 ff fc 	st.w	r7[-4],r8
8000bd46:	c0 28       	rjmp	8000bd4a <udc_iface_enable+0x3e>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
		}
	}
8000bd48:	d7 03       	nop

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000bd4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd4e:	30 5b       	mov	r11,5
8000bd50:	10 9c       	mov	r12,r8
8000bd52:	f0 1f 00 1e 	mcall	8000bdc8 <udc_iface_enable+0xbc>
8000bd56:	18 98       	mov	r8,r12
8000bd58:	ef 48 ff fc 	st.w	r7[-4],r8
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
8000bd5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd60:	58 08       	cp.w	r8,0
8000bd62:	c0 e1       	brne	8000bd7e <udc_iface_enable+0x72>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000bd64:	49 a8       	lddpc	r8,8000bdcc <udc_iface_enable+0xc0>
8000bd66:	70 08       	ld.w	r8,r8[0x0]
8000bd68:	70 19       	ld.w	r9,r8[0x4]
8000bd6a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000bd6e:	a3 68       	lsl	r8,0x2
8000bd70:	f2 08 00 08 	add	r8,r9,r8
8000bd74:	70 08       	ld.w	r8,r8[0x0]
8000bd76:	70 08       	ld.w	r8,r8[0x0]
8000bd78:	5d 18       	icall	r8
8000bd7a:	18 98       	mov	r8,r12
8000bd7c:	c1 e8       	rjmp	8000bdb8 <udc_iface_enable+0xac>
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
8000bd7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd82:	11 c9       	ld.ub	r9,r8[0x4]
8000bd84:	a9 69       	lsl	r9,0x8
8000bd86:	11 d8       	ld.ub	r8,r8[0x5]
8000bd88:	12 48       	or	r8,r9
8000bd8a:	5c 88       	casts.h	r8
8000bd8c:	5c 88       	casts.h	r8
8000bd8e:	5c c8       	swap.bh	r8
8000bd90:	5c 88       	casts.h	r8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000bd92:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
				ep_desc->bmAttributes,
8000bd96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd9a:	11 b8       	ld.ub	r8,r8[0x3]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000bd9c:	10 99       	mov	r9,r8
8000bd9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bda2:	11 a8       	ld.ub	r8,r8[0x2]
8000bda4:	12 9b       	mov	r11,r9
8000bda6:	10 9c       	mov	r12,r8
8000bda8:	f0 1f 00 0a 	mcall	8000bdd0 <udc_iface_enable+0xc4>
8000bdac:	18 98       	mov	r8,r12
8000bdae:	ec 18 00 01 	eorl	r8,0x1
8000bdb2:	5c 58       	castu.b	r8
8000bdb4:	cc a0       	breq	8000bd48 <udc_iface_enable+0x3c>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
8000bdb6:	30 08       	mov	r8,0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
8000bdb8:	10 9c       	mov	r12,r8
8000bdba:	2f dd       	sub	sp,-12
8000bdbc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bdc0:	80 00       	ld.sh	r0,r0[0x0]
8000bdc2:	bb 98       	lsr	r8,0x1b
8000bdc4:	00 00       	add	r0,r0
8000bdc6:	07 00       	ld.w	r0,r3++
8000bdc8:	80 00       	ld.sh	r0,r0[0x0]
8000bdca:	bb 10       	ld.d	r0,--sp
8000bdcc:	00 00       	add	r0,r0
8000bdce:	06 fc       	st.b	--r3,r12
8000bdd0:	80 00       	ld.sh	r0,r0[0x0]
8000bdd2:	88 bc       	ld.uh	r12,r4[0x6]

8000bdd4 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
8000bdd4:	eb cd 40 80 	pushm	r7,lr
8000bdd8:	1a 97       	mov	r7,sp
	udd_enable();
8000bdda:	f0 1f 00 03 	mcall	8000bde4 <udc_start+0x10>
}
8000bdde:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bde2:	00 00       	add	r0,r0
8000bde4:	80 00       	ld.sh	r0,r0[0x0]
8000bde6:	85 e8       	st.w	r2[0x38],r8

8000bde8 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
8000bde8:	eb cd 40 80 	pushm	r7,lr
8000bdec:	1a 97       	mov	r7,sp
8000bdee:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000bdf0:	49 38       	lddpc	r8,8000be3c <udc_reset+0x54>
8000bdf2:	11 88       	ld.ub	r8,r8[0x0]
8000bdf4:	58 08       	cp.w	r8,0
8000bdf6:	c1 80       	breq	8000be26 <udc_reset+0x3e>
		for (iface_num = 0;
8000bdf8:	30 08       	mov	r8,0
8000bdfa:	ef 68 ff ff 	st.b	r7[-1],r8
8000bdfe:	c0 b8       	rjmp	8000be14 <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
8000be00:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be04:	10 9c       	mov	r12,r8
8000be06:	f0 1f 00 0f 	mcall	8000be40 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000be0a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be0e:	2f f8       	sub	r8,-1
8000be10:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000be14:	48 c8       	lddpc	r8,8000be44 <udc_reset+0x5c>
8000be16:	70 08       	ld.w	r8,r8[0x0]
8000be18:	70 08       	ld.w	r8,r8[0x0]
8000be1a:	11 c8       	ld.ub	r8,r8[0x4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000be1c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000be20:	f0 09 18 00 	cp.b	r9,r8
8000be24:	ce e3       	brcs	8000be00 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
8000be26:	48 69       	lddpc	r9,8000be3c <udc_reset+0x54>
8000be28:	30 08       	mov	r8,0
8000be2a:	b2 88       	st.b	r9[0x0],r8
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
8000be2c:	48 79       	lddpc	r9,8000be48 <udc_reset+0x60>
8000be2e:	e0 68 01 00 	mov	r8,256
8000be32:	b2 08       	st.h	r9[0x0],r8
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
8000be34:	2f fd       	sub	sp,-4
8000be36:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be3a:	00 00       	add	r0,r0
8000be3c:	00 00       	add	r0,r0
8000be3e:	06 fa       	st.b	--r3,r10
8000be40:	80 00       	ld.sh	r0,r0[0x0]
8000be42:	bc 50       	st.h	lr[0xa],r0
8000be44:	00 00       	add	r0,r0
8000be46:	06 fc       	st.b	--r3,r12
8000be48:	00 00       	add	r0,r0
8000be4a:	06 f8       	st.b	--r3,r8

8000be4c <udc_sof_notify>:

void udc_sof_notify(void)
{
8000be4c:	eb cd 40 80 	pushm	r7,lr
8000be50:	1a 97       	mov	r7,sp
8000be52:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000be54:	49 88       	lddpc	r8,8000beb4 <udc_sof_notify+0x68>
8000be56:	11 88       	ld.ub	r8,r8[0x0]
8000be58:	58 08       	cp.w	r8,0
8000be5a:	c2 a0       	breq	8000beae <udc_sof_notify+0x62>
		for (iface_num = 0;
8000be5c:	30 08       	mov	r8,0
8000be5e:	ef 68 ff ff 	st.b	r7[-1],r8
8000be62:	c1 d8       	rjmp	8000be9c <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
8000be64:	49 58       	lddpc	r8,8000beb8 <udc_sof_notify+0x6c>
8000be66:	70 08       	ld.w	r8,r8[0x0]
8000be68:	70 19       	ld.w	r9,r8[0x4]
8000be6a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be6e:	a3 68       	lsl	r8,0x2
8000be70:	f2 08 00 08 	add	r8,r9,r8
8000be74:	70 08       	ld.w	r8,r8[0x0]
8000be76:	70 48       	ld.w	r8,r8[0x10]
8000be78:	58 08       	cp.w	r8,0
8000be7a:	c0 c0       	breq	8000be92 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
8000be7c:	48 f8       	lddpc	r8,8000beb8 <udc_sof_notify+0x6c>
8000be7e:	70 08       	ld.w	r8,r8[0x0]
8000be80:	70 19       	ld.w	r9,r8[0x4]
8000be82:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be86:	a3 68       	lsl	r8,0x2
8000be88:	f2 08 00 08 	add	r8,r9,r8
8000be8c:	70 08       	ld.w	r8,r8[0x0]
8000be8e:	70 48       	ld.w	r8,r8[0x10]
8000be90:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000be92:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be96:	2f f8       	sub	r8,-1
8000be98:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000be9c:	48 78       	lddpc	r8,8000beb8 <udc_sof_notify+0x6c>
8000be9e:	70 08       	ld.w	r8,r8[0x0]
8000bea0:	70 08       	ld.w	r8,r8[0x0]
8000bea2:	11 c8       	ld.ub	r8,r8[0x4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000bea4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000bea8:	f0 09 18 00 	cp.b	r9,r8
8000beac:	cd c3       	brcs	8000be64 <udc_sof_notify+0x18>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
8000beae:	2f fd       	sub	sp,-4
8000beb0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000beb4:	00 00       	add	r0,r0
8000beb6:	06 fa       	st.b	--r3,r10
8000beb8:	00 00       	add	r0,r0
8000beba:	06 fc       	st.b	--r3,r12

8000bebc <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
8000bebc:	eb cd 40 80 	pushm	r7,lr
8000bec0:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
8000bec2:	48 98       	lddpc	r8,8000bee4 <udc_req_std_dev_get_status+0x28>
8000bec4:	90 39       	ld.sh	r9,r8[0x6]
8000bec6:	30 28       	mov	r8,2
8000bec8:	f0 09 19 00 	cp.h	r9,r8
8000becc:	c0 30       	breq	8000bed2 <udc_req_std_dev_get_status+0x16>
		return false;
8000bece:	30 08       	mov	r8,0
8000bed0:	c0 78       	rjmp	8000bede <udc_req_std_dev_get_status+0x22>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
8000bed2:	48 68       	lddpc	r8,8000bee8 <udc_req_std_dev_get_status+0x2c>
8000bed4:	30 2b       	mov	r11,2
8000bed6:	10 9c       	mov	r12,r8
8000bed8:	f0 1f 00 05 	mcall	8000beec <udc_req_std_dev_get_status+0x30>
			sizeof(udc_device_status));
	return true;
8000bedc:	30 18       	mov	r8,1
}
8000bede:	10 9c       	mov	r12,r8
8000bee0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bee4:	00 00       	add	r0,r0
8000bee6:	0b c8       	ld.ub	r8,r5[0x4]
8000bee8:	00 00       	add	r0,r0
8000beea:	06 f8       	st.b	--r3,r8
8000beec:	80 00       	ld.sh	r0,r0[0x0]
8000beee:	88 90       	ld.uh	r0,r4[0x2]

8000bef0 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
8000bef0:	eb cd 40 80 	pushm	r7,lr
8000bef4:	1a 97       	mov	r7,sp
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
8000bef6:	49 18       	lddpc	r8,8000bf38 <udc_req_std_ep_get_status+0x48>
8000bef8:	90 39       	ld.sh	r9,r8[0x6]
8000befa:	30 28       	mov	r8,2
8000befc:	f0 09 19 00 	cp.h	r9,r8
8000bf00:	c0 30       	breq	8000bf06 <udc_req_std_ep_get_status+0x16>
		return false;
8000bf02:	30 08       	mov	r8,0
8000bf04:	c1 68       	rjmp	8000bf30 <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000bf06:	48 d8       	lddpc	r8,8000bf38 <udc_req_std_ep_get_status+0x48>
8000bf08:	90 28       	ld.sh	r8,r8[0x4]
8000bf0a:	5c 58       	castu.b	r8
8000bf0c:	10 9c       	mov	r12,r8
8000bf0e:	f0 1f 00 0c 	mcall	8000bf3c <udc_req_std_ep_get_status+0x4c>
8000bf12:	18 98       	mov	r8,r12
8000bf14:	58 08       	cp.w	r8,0
8000bf16:	c0 40       	breq	8000bf1e <udc_req_std_ep_get_status+0x2e>
8000bf18:	e0 68 01 00 	mov	r8,256
8000bf1c:	c0 28       	rjmp	8000bf20 <udc_req_std_ep_get_status+0x30>
8000bf1e:	30 08       	mov	r8,0
8000bf20:	48 89       	lddpc	r9,8000bf40 <udc_req_std_ep_get_status+0x50>
8000bf22:	b2 08       	st.h	r9[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
8000bf24:	48 78       	lddpc	r8,8000bf40 <udc_req_std_ep_get_status+0x50>
8000bf26:	30 2b       	mov	r11,2
8000bf28:	10 9c       	mov	r12,r8
8000bf2a:	f0 1f 00 07 	mcall	8000bf44 <udc_req_std_ep_get_status+0x54>
			sizeof(udc_ep_status));
	return true;
8000bf2e:	30 18       	mov	r8,1
}
8000bf30:	10 9c       	mov	r12,r8
8000bf32:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf36:	00 00       	add	r0,r0
8000bf38:	00 00       	add	r0,r0
8000bf3a:	0b c8       	ld.ub	r8,r5[0x4]
8000bf3c:	80 00       	ld.sh	r0,r0[0x0]
8000bf3e:	8c a8       	ld.uh	r8,r6[0x4]
8000bf40:	00 00       	add	r0,r0
8000bf42:	07 06       	ld.w	r6,r3++
8000bf44:	80 00       	ld.sh	r0,r0[0x0]
8000bf46:	88 90       	ld.uh	r0,r4[0x2]

8000bf48 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
8000bf48:	eb cd 40 80 	pushm	r7,lr
8000bf4c:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000bf4e:	48 d8       	lddpc	r8,8000bf80 <udc_req_std_dev_clear_feature+0x38>
8000bf50:	90 38       	ld.sh	r8,r8[0x6]
8000bf52:	58 08       	cp.w	r8,0
8000bf54:	c0 30       	breq	8000bf5a <udc_req_std_dev_clear_feature+0x12>
		return false;
8000bf56:	30 08       	mov	r8,0
8000bf58:	c1 08       	rjmp	8000bf78 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000bf5a:	48 a8       	lddpc	r8,8000bf80 <udc_req_std_dev_clear_feature+0x38>
8000bf5c:	90 19       	ld.sh	r9,r8[0x2]
8000bf5e:	30 18       	mov	r8,1
8000bf60:	f0 09 19 00 	cp.h	r9,r8
8000bf64:	c0 91       	brne	8000bf76 <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
8000bf66:	48 88       	lddpc	r8,8000bf84 <udc_req_std_dev_clear_feature+0x3c>
8000bf68:	90 08       	ld.sh	r8,r8[0x0]
8000bf6a:	a9 d8       	cbr	r8,0x9
8000bf6c:	5c 88       	casts.h	r8
8000bf6e:	48 69       	lddpc	r9,8000bf84 <udc_req_std_dev_clear_feature+0x3c>
8000bf70:	b2 08       	st.h	r9[0x0],r8
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
8000bf72:	30 18       	mov	r8,1
8000bf74:	c0 28       	rjmp	8000bf78 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
8000bf76:	30 08       	mov	r8,0
}
8000bf78:	10 9c       	mov	r12,r8
8000bf7a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf7e:	00 00       	add	r0,r0
8000bf80:	00 00       	add	r0,r0
8000bf82:	0b c8       	ld.ub	r8,r5[0x4]
8000bf84:	00 00       	add	r0,r0
8000bf86:	06 f8       	st.b	--r3,r8

8000bf88 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
8000bf88:	eb cd 40 80 	pushm	r7,lr
8000bf8c:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000bf8e:	48 c8       	lddpc	r8,8000bfbc <udc_req_std_ep_clear_feature+0x34>
8000bf90:	90 38       	ld.sh	r8,r8[0x6]
8000bf92:	58 08       	cp.w	r8,0
8000bf94:	c0 30       	breq	8000bf9a <udc_req_std_ep_clear_feature+0x12>
		return false;
8000bf96:	30 08       	mov	r8,0
8000bf98:	c0 e8       	rjmp	8000bfb4 <udc_req_std_ep_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000bf9a:	48 98       	lddpc	r8,8000bfbc <udc_req_std_ep_clear_feature+0x34>
8000bf9c:	90 18       	ld.sh	r8,r8[0x2]
8000bf9e:	58 08       	cp.w	r8,0
8000bfa0:	c0 91       	brne	8000bfb2 <udc_req_std_ep_clear_feature+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000bfa2:	48 78       	lddpc	r8,8000bfbc <udc_req_std_ep_clear_feature+0x34>
8000bfa4:	90 28       	ld.sh	r8,r8[0x4]
8000bfa6:	5c 58       	castu.b	r8
8000bfa8:	10 9c       	mov	r12,r8
8000bfaa:	f0 1f 00 06 	mcall	8000bfc0 <udc_req_std_ep_clear_feature+0x38>
8000bfae:	18 98       	mov	r8,r12
8000bfb0:	c0 28       	rjmp	8000bfb4 <udc_req_std_ep_clear_feature+0x2c>
	}
	return false;
8000bfb2:	30 08       	mov	r8,0
}
8000bfb4:	10 9c       	mov	r12,r8
8000bfb6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bfba:	00 00       	add	r0,r0
8000bfbc:	00 00       	add	r0,r0
8000bfbe:	0b c8       	ld.ub	r8,r5[0x4]
8000bfc0:	80 00       	ld.sh	r0,r0[0x0]
8000bfc2:	8d ec       	st.w	r6[0x38],r12

8000bfc4 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
8000bfc4:	eb cd 40 80 	pushm	r7,lr
8000bfc8:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000bfca:	4a 78       	lddpc	r8,8000c064 <udc_req_std_dev_set_feature+0xa0>
8000bfcc:	90 38       	ld.sh	r8,r8[0x6]
8000bfce:	58 08       	cp.w	r8,0
8000bfd0:	c0 30       	breq	8000bfd6 <udc_req_std_dev_set_feature+0x12>
		return false;
8000bfd2:	30 08       	mov	r8,0
8000bfd4:	c4 48       	rjmp	8000c05c <udc_req_std_dev_set_feature+0x98>
	}

	switch (udd_g_ctrlreq.req.wValue) {
8000bfd6:	4a 48       	lddpc	r8,8000c064 <udc_req_std_dev_set_feature+0xa0>
8000bfd8:	90 18       	ld.sh	r8,r8[0x2]
8000bfda:	5c 78       	castu.h	r8
8000bfdc:	58 18       	cp.w	r8,1
8000bfde:	c0 40       	breq	8000bfe6 <udc_req_std_dev_set_feature+0x22>
8000bfe0:	58 28       	cp.w	r8,2
8000bfe2:	c0 40       	breq	8000bfea <udc_req_std_dev_set_feature+0x26>
8000bfe4:	c3 b8       	rjmp	8000c05a <udc_req_std_dev_set_feature+0x96>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
8000bfe6:	30 08       	mov	r8,0
8000bfe8:	c3 a8       	rjmp	8000c05c <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
8000bfea:	f0 1f 00 20 	mcall	8000c068 <udc_req_std_dev_set_feature+0xa4>
8000bfee:	18 98       	mov	r8,r12
8000bff0:	ec 18 00 01 	eorl	r8,0x1
8000bff4:	5c 58       	castu.b	r8
8000bff6:	c2 f1       	brne	8000c054 <udc_req_std_dev_set_feature+0x90>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
8000bff8:	49 b8       	lddpc	r8,8000c064 <udc_req_std_dev_set_feature+0xa0>
8000bffa:	90 28       	ld.sh	r8,r8[0x4]
8000bffc:	5c 78       	castu.h	r8
8000bffe:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000c002:	c2 b1       	brne	8000c058 <udc_req_std_dev_set_feature+0x94>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
8000c004:	f0 1f 00 1a 	mcall	8000c06c <udc_req_std_dev_set_feature+0xa8>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
8000c008:	49 78       	lddpc	r8,8000c064 <udc_req_std_dev_set_feature+0xa0>
8000c00a:	90 28       	ld.sh	r8,r8[0x4]
8000c00c:	5c 78       	castu.h	r8
8000c00e:	a9 88       	lsr	r8,0x8
8000c010:	5c 88       	casts.h	r8
8000c012:	5c 78       	castu.h	r8
8000c014:	58 28       	cp.w	r8,2
8000c016:	c1 00       	breq	8000c036 <udc_req_std_dev_set_feature+0x72>
8000c018:	e0 89 00 05 	brgt	8000c022 <udc_req_std_dev_set_feature+0x5e>
8000c01c:	58 18       	cp.w	r8,1
8000c01e:	c0 70       	breq	8000c02c <udc_req_std_dev_set_feature+0x68>
8000c020:	c1 d8       	rjmp	8000c05a <udc_req_std_dev_set_feature+0x96>
8000c022:	58 38       	cp.w	r8,3
8000c024:	c0 e0       	breq	8000c040 <udc_req_std_dev_set_feature+0x7c>
8000c026:	58 48       	cp.w	r8,4
8000c028:	c1 10       	breq	8000c04a <udc_req_std_dev_set_feature+0x86>
8000c02a:	c1 88       	rjmp	8000c05a <udc_req_std_dev_set_feature+0x96>
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
8000c02c:	48 e8       	lddpc	r8,8000c064 <udc_req_std_dev_set_feature+0xa0>
8000c02e:	49 19       	lddpc	r9,8000c070 <udc_req_std_dev_set_feature+0xac>
8000c030:	91 49       	st.w	r8[0x10],r9
			return true;
8000c032:	30 18       	mov	r8,1
8000c034:	c1 48       	rjmp	8000c05c <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
8000c036:	48 c8       	lddpc	r8,8000c064 <udc_req_std_dev_set_feature+0xa0>
8000c038:	48 f9       	lddpc	r9,8000c074 <udc_req_std_dev_set_feature+0xb0>
8000c03a:	91 49       	st.w	r8[0x10],r9
			return true;
8000c03c:	30 18       	mov	r8,1
8000c03e:	c0 f8       	rjmp	8000c05c <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
8000c040:	48 98       	lddpc	r8,8000c064 <udc_req_std_dev_set_feature+0xa0>
8000c042:	48 e9       	lddpc	r9,8000c078 <udc_req_std_dev_set_feature+0xb4>
8000c044:	91 49       	st.w	r8[0x10],r9
			return true;
8000c046:	30 18       	mov	r8,1
8000c048:	c0 a8       	rjmp	8000c05c <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
8000c04a:	48 78       	lddpc	r8,8000c064 <udc_req_std_dev_set_feature+0xa0>
8000c04c:	48 c9       	lddpc	r9,8000c07c <udc_req_std_dev_set_feature+0xb8>
8000c04e:	91 49       	st.w	r8[0x10],r9
			return true;
8000c050:	30 18       	mov	r8,1
8000c052:	c0 58       	rjmp	8000c05c <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
			break;
8000c054:	d7 03       	nop
8000c056:	c0 28       	rjmp	8000c05a <udc_req_std_dev_set_feature+0x96>
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
			break;
8000c058:	d7 03       	nop
		break;
#endif
	default:
		break;
	}
	return false;
8000c05a:	30 08       	mov	r8,0
}
8000c05c:	10 9c       	mov	r12,r8
8000c05e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c062:	00 00       	add	r0,r0
8000c064:	00 00       	add	r0,r0
8000c066:	0b c8       	ld.ub	r8,r5[0x4]
8000c068:	80 00       	ld.sh	r0,r0[0x0]
8000c06a:	87 f4       	st.w	r3[0x3c],r4
8000c06c:	80 00       	ld.sh	r0,r0[0x0]
8000c06e:	bd e8       	*unknown*
8000c070:	80 00       	ld.sh	r0,r0[0x0]
8000c072:	91 b0       	st.w	r8[0x2c],r0
8000c074:	80 00       	ld.sh	r0,r0[0x0]
8000c076:	91 da       	st.w	r8[0x34],r10
8000c078:	80 00       	ld.sh	r0,r0[0x0]
8000c07a:	92 04       	ld.sh	r4,r9[0x0]
8000c07c:	80 00       	ld.sh	r0,r0[0x0]
8000c07e:	92 20       	ld.sh	r0,r9[0x4]

8000c080 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
8000c080:	eb cd 40 80 	pushm	r7,lr
8000c084:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000c086:	48 f8       	lddpc	r8,8000c0c0 <udc_req_std_ep_set_feature+0x40>
8000c088:	90 38       	ld.sh	r8,r8[0x6]
8000c08a:	58 08       	cp.w	r8,0
8000c08c:	c0 30       	breq	8000c092 <udc_req_std_ep_set_feature+0x12>
		return false;
8000c08e:	30 08       	mov	r8,0
8000c090:	c1 48       	rjmp	8000c0b8 <udc_req_std_ep_set_feature+0x38>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000c092:	48 c8       	lddpc	r8,8000c0c0 <udc_req_std_ep_set_feature+0x40>
8000c094:	90 18       	ld.sh	r8,r8[0x2]
8000c096:	58 08       	cp.w	r8,0
8000c098:	c0 f1       	brne	8000c0b6 <udc_req_std_ep_set_feature+0x36>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
8000c09a:	48 a8       	lddpc	r8,8000c0c0 <udc_req_std_ep_set_feature+0x40>
8000c09c:	90 28       	ld.sh	r8,r8[0x4]
8000c09e:	5c 58       	castu.b	r8
8000c0a0:	10 9c       	mov	r12,r8
8000c0a2:	f0 1f 00 09 	mcall	8000c0c4 <udc_req_std_ep_set_feature+0x44>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000c0a6:	48 78       	lddpc	r8,8000c0c0 <udc_req_std_ep_set_feature+0x40>
8000c0a8:	90 28       	ld.sh	r8,r8[0x4]
8000c0aa:	5c 58       	castu.b	r8
8000c0ac:	10 9c       	mov	r12,r8
8000c0ae:	f0 1f 00 07 	mcall	8000c0c8 <udc_req_std_ep_set_feature+0x48>
8000c0b2:	18 98       	mov	r8,r12
8000c0b4:	c0 28       	rjmp	8000c0b8 <udc_req_std_ep_set_feature+0x38>
	}
	return false;
8000c0b6:	30 08       	mov	r8,0
}
8000c0b8:	10 9c       	mov	r12,r8
8000c0ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0be:	00 00       	add	r0,r0
8000c0c0:	00 00       	add	r0,r0
8000c0c2:	0b c8       	ld.ub	r8,r5[0x4]
8000c0c4:	80 00       	ld.sh	r0,r0[0x0]
8000c0c6:	90 50       	ld.sh	r0,r8[0xa]
8000c0c8:	80 00       	ld.sh	r0,r0[0x0]
8000c0ca:	8c d8       	ld.uh	r8,r6[0xa]

8000c0cc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
8000c0cc:	eb cd 40 80 	pushm	r7,lr
8000c0d0:	1a 97       	mov	r7,sp
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
8000c0d2:	48 68       	lddpc	r8,8000c0e8 <udc_valid_address+0x1c>
8000c0d4:	90 18       	ld.sh	r8,r8[0x2]
8000c0d6:	5c 58       	castu.b	r8
8000c0d8:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000c0dc:	10 9c       	mov	r12,r8
8000c0de:	f0 1f 00 04 	mcall	8000c0ec <udc_valid_address+0x20>
}
8000c0e2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0e6:	00 00       	add	r0,r0
8000c0e8:	00 00       	add	r0,r0
8000c0ea:	0b c8       	ld.ub	r8,r5[0x4]
8000c0ec:	80 00       	ld.sh	r0,r0[0x0]
8000c0ee:	88 10       	ld.sh	r0,r4[0x2]

8000c0f0 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
8000c0f0:	eb cd 40 80 	pushm	r7,lr
8000c0f4:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000c0f6:	48 78       	lddpc	r8,8000c110 <udc_req_std_dev_set_address+0x20>
8000c0f8:	90 38       	ld.sh	r8,r8[0x6]
8000c0fa:	58 08       	cp.w	r8,0
8000c0fc:	c0 30       	breq	8000c102 <udc_req_std_dev_set_address+0x12>
		return false;
8000c0fe:	30 08       	mov	r8,0
8000c100:	c0 58       	rjmp	8000c10a <udc_req_std_dev_set_address+0x1a>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000c102:	48 48       	lddpc	r8,8000c110 <udc_req_std_dev_set_address+0x20>
8000c104:	48 49       	lddpc	r9,8000c114 <udc_req_std_dev_set_address+0x24>
8000c106:	91 49       	st.w	r8[0x10],r9
	return true;
8000c108:	30 18       	mov	r8,1
}
8000c10a:	10 9c       	mov	r12,r8
8000c10c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c110:	00 00       	add	r0,r0
8000c112:	0b c8       	ld.ub	r8,r5[0x4]
8000c114:	80 00       	ld.sh	r0,r0[0x0]
8000c116:	c0 cc       	rcall	8000c12e <udc_req_std_dev_get_str_desc+0x16>

8000c118 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
8000c118:	eb cd 40 80 	pushm	r7,lr
8000c11c:	1a 97       	mov	r7,sp
8000c11e:	20 3d       	sub	sp,12
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
8000c120:	30 08       	mov	r8,0
8000c122:	ef 68 ff ff 	st.b	r7[-1],r8

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
8000c126:	4b 68       	lddpc	r8,8000c1fc <udc_req_std_dev_get_str_desc+0xe4>
8000c128:	90 18       	ld.sh	r8,r8[0x2]
8000c12a:	5c 78       	castu.h	r8
8000c12c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000c130:	58 18       	cp.w	r8,1
8000c132:	c1 00       	breq	8000c152 <udc_req_std_dev_get_str_desc+0x3a>
8000c134:	e0 89 00 05 	brgt	8000c13e <udc_req_std_dev_get_str_desc+0x26>
8000c138:	58 08       	cp.w	r8,0
8000c13a:	c0 70       	breq	8000c148 <udc_req_std_dev_get_str_desc+0x30>
8000c13c:	c2 28       	rjmp	8000c180 <udc_req_std_dev_get_str_desc+0x68>
8000c13e:	58 28       	cp.w	r8,2
8000c140:	c1 00       	breq	8000c160 <udc_req_std_dev_get_str_desc+0x48>
8000c142:	58 38       	cp.w	r8,3
8000c144:	c1 50       	breq	8000c16e <udc_req_std_dev_get_str_desc+0x56>
8000c146:	c1 d8       	rjmp	8000c180 <udc_req_std_dev_get_str_desc+0x68>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
8000c148:	30 4b       	mov	r11,4
8000c14a:	4a ec       	lddpc	r12,8000c200 <udc_req_std_dev_get_str_desc+0xe8>
8000c14c:	f0 1f 00 2e 	mcall	8000c204 <udc_req_std_dev_get_str_desc+0xec>
				sizeof(udc_string_desc_languageid));
		break;
8000c150:	c1 a8       	rjmp	8000c184 <udc_req_std_dev_get_str_desc+0x6c>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
8000c152:	30 78       	mov	r8,7
8000c154:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_manufacturer_name;
8000c158:	4a c8       	lddpc	r8,8000c208 <udc_req_std_dev_get_str_desc+0xf0>
8000c15a:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000c15e:	c1 38       	rjmp	8000c184 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
8000c160:	30 78       	mov	r8,7
8000c162:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_product_name;
8000c166:	4a a8       	lddpc	r8,8000c20c <udc_req_std_dev_get_str_desc+0xf4>
8000c168:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000c16c:	c0 c8       	rjmp	8000c184 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
8000c16e:	30 c8       	mov	r8,12
8000c170:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_get_string_serial_name();
8000c174:	f0 1f 00 27 	mcall	8000c210 <udc_req_std_dev_get_str_desc+0xf8>
8000c178:	18 98       	mov	r8,r12
8000c17a:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000c17e:	c0 38       	rjmp	8000c184 <udc_req_std_dev_get_str_desc+0x6c>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
8000c180:	30 08       	mov	r8,0
8000c182:	c3 88       	rjmp	8000c1f2 <udc_req_std_dev_get_str_desc+0xda>
	}

	if (str_length) {
8000c184:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c188:	30 08       	mov	r8,0
8000c18a:	f0 09 18 00 	cp.b	r9,r8
8000c18e:	c3 10       	breq	8000c1f0 <udc_req_std_dev_get_str_desc+0xd8>
		for(i = 0; i < str_length; i++) {
8000c190:	30 08       	mov	r8,0
8000c192:	ef 68 ff f7 	st.b	r7[-9],r8
8000c196:	c1 88       	rjmp	8000c1c6 <udc_req_std_dev_get_str_desc+0xae>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
8000c198:	ef 3b ff f7 	ld.ub	r11,r7[-9]
8000c19c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000c1a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000c1a4:	f2 08 00 08 	add	r8,r9,r8
8000c1a8:	11 88       	ld.ub	r8,r8[0x0]
8000c1aa:	5c c8       	swap.bh	r8
8000c1ac:	5c 88       	casts.h	r8
8000c1ae:	10 99       	mov	r9,r8
8000c1b0:	49 9a       	lddpc	r10,8000c214 <udc_req_std_dev_get_str_desc+0xfc>
8000c1b2:	f6 08 15 01 	lsl	r8,r11,0x1
8000c1b6:	f4 08 00 08 	add	r8,r10,r8
8000c1ba:	b0 19       	st.h	r8[0x2],r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
8000c1bc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000c1c0:	2f f8       	sub	r8,-1
8000c1c2:	ef 68 ff f7 	st.b	r7[-9],r8
8000c1c6:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000c1ca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c1ce:	f0 09 18 00 	cp.b	r9,r8
8000c1d2:	ce 33       	brcs	8000c198 <udc_req_std_dev_get_str_desc+0x80>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
8000c1d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c1d8:	2f f8       	sub	r8,-1
8000c1da:	5c 58       	castu.b	r8
8000c1dc:	a1 78       	lsl	r8,0x1
8000c1de:	5c 58       	castu.b	r8
8000c1e0:	48 d9       	lddpc	r9,8000c214 <udc_req_std_dev_get_str_desc+0xfc>
8000c1e2:	b2 88       	st.b	r9[0x0],r8
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
8000c1e4:	48 c8       	lddpc	r8,8000c214 <udc_req_std_dev_get_str_desc+0xfc>
8000c1e6:	11 88       	ld.ub	r8,r8[0x0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
8000c1e8:	10 9b       	mov	r11,r8
8000c1ea:	48 bc       	lddpc	r12,8000c214 <udc_req_std_dev_get_str_desc+0xfc>
8000c1ec:	f0 1f 00 06 	mcall	8000c204 <udc_req_std_dev_get_str_desc+0xec>
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
8000c1f0:	30 18       	mov	r8,1
}
8000c1f2:	10 9c       	mov	r12,r8
8000c1f4:	2f dd       	sub	sp,-12
8000c1f6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1fa:	00 00       	add	r0,r0
8000c1fc:	00 00       	add	r0,r0
8000c1fe:	0b c8       	ld.ub	r8,r5[0x4]
8000c200:	00 00       	add	r0,r0
8000c202:	00 f0       	st.b	--r0,r0
8000c204:	80 00       	ld.sh	r0,r0[0x0]
8000c206:	88 90       	ld.uh	r0,r4[0x2]
8000c208:	00 00       	add	r0,r0
8000c20a:	00 f4       	st.b	--r0,r4
8000c20c:	00 00       	add	r0,r0
8000c20e:	00 fc       	st.b	--r0,r12
8000c210:	80 00       	ld.sh	r0,r0[0x0]
8000c212:	ba c8       	st.b	sp[0x4],r8
8000c214:	00 00       	add	r0,r0
8000c216:	01 04       	ld.w	r4,r0++

8000c218 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
8000c218:	eb cd 40 80 	pushm	r7,lr
8000c21c:	1a 97       	mov	r7,sp
8000c21e:	20 1d       	sub	sp,4
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000c220:	fe f8 02 40 	ld.w	r8,pc[576]
8000c224:	90 18       	ld.sh	r8,r8[0x2]
8000c226:	ef 68 ff ff 	st.b	r7[-1],r8

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
8000c22a:	fe f8 02 36 	ld.w	r8,pc[566]
8000c22e:	90 18       	ld.sh	r8,r8[0x2]
8000c230:	5c 78       	castu.h	r8
8000c232:	a9 88       	lsr	r8,0x8
8000c234:	5c 88       	casts.h	r8
8000c236:	5c 58       	castu.b	r8
8000c238:	58 38       	cp.w	r8,3
8000c23a:	e0 80 00 f7 	breq	8000c428 <udc_req_std_dev_get_descriptor+0x210>
8000c23e:	e0 89 00 07 	brgt	8000c24c <udc_req_std_dev_get_descriptor+0x34>
8000c242:	58 18       	cp.w	r8,1
8000c244:	c0 b0       	breq	8000c25a <udc_req_std_dev_get_descriptor+0x42>
8000c246:	58 28       	cp.w	r8,2
8000c248:	c2 70       	breq	8000c296 <udc_req_std_dev_get_descriptor+0x7e>
8000c24a:	cf 88       	rjmp	8000c43a <udc_req_std_dev_get_descriptor+0x222>
8000c24c:	58 68       	cp.w	r8,6
8000c24e:	e0 80 00 82 	breq	8000c352 <udc_req_std_dev_get_descriptor+0x13a>
8000c252:	58 78       	cp.w	r8,7
8000c254:	e0 80 00 8a 	breq	8000c368 <udc_req_std_dev_get_descriptor+0x150>
8000c258:	cf 18       	rjmp	8000c43a <udc_req_std_dev_get_descriptor+0x222>
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
8000c25a:	f0 1f 00 83 	mcall	8000c464 <udc_req_std_dev_get_descriptor+0x24c>
8000c25e:	18 98       	mov	r8,r12
8000c260:	ec 18 00 01 	eorl	r8,0x1
8000c264:	5c 58       	castu.b	r8
8000c266:	c0 d0       	breq	8000c280 <udc_req_std_dev_get_descriptor+0x68>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
8000c268:	fe f8 02 00 	ld.w	r8,pc[512]
8000c26c:	70 28       	ld.w	r8,r8[0x8]
8000c26e:	11 88       	ld.ub	r8,r8[0x0]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
8000c270:	10 99       	mov	r9,r8
8000c272:	4f e8       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c274:	70 28       	ld.w	r8,r8[0x8]
8000c276:	12 9b       	mov	r11,r9
8000c278:	10 9c       	mov	r12,r8
8000c27a:	f0 1f 00 7d 	mcall	8000c46c <udc_req_std_dev_get_descriptor+0x254>
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000c27e:	ce 18       	rjmp	8000c440 <udc_req_std_dev_get_descriptor+0x228>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
8000c280:	4f a8       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c282:	70 08       	ld.w	r8,r8[0x0]
8000c284:	11 88       	ld.ub	r8,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
8000c286:	10 99       	mov	r9,r8
8000c288:	4f 88       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c28a:	70 08       	ld.w	r8,r8[0x0]
8000c28c:	12 9b       	mov	r11,r9
8000c28e:	10 9c       	mov	r12,r8
8000c290:	f0 1f 00 77 	mcall	8000c46c <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000c294:	cd 68       	rjmp	8000c440 <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
8000c296:	f0 1f 00 74 	mcall	8000c464 <udc_req_std_dev_get_descriptor+0x24c>
8000c29a:	18 98       	mov	r8,r12
8000c29c:	58 08       	cp.w	r8,0
8000c29e:	c2 b0       	breq	8000c2f4 <udc_req_std_dev_get_descriptor+0xdc>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000c2a0:	4f 28       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c2a2:	70 28       	ld.w	r8,r8[0x8]
8000c2a4:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c2a8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c2ac:	f0 09 18 00 	cp.b	r9,r8
8000c2b0:	c0 33       	brcs	8000c2b6 <udc_req_std_dev_get_descriptor+0x9e>
					bNumConfigurations) {
				return false;
8000c2b2:	30 08       	mov	r8,0
8000c2b4:	cd 28       	rjmp	8000c458 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000c2b6:	4e d8       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c2b8:	70 49       	ld.w	r9,r8[0x10]
8000c2ba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c2be:	a3 78       	lsl	r8,0x3
8000c2c0:	f2 08 00 08 	add	r8,r9,r8
8000c2c4:	70 08       	ld.w	r8,r8[0x0]
8000c2c6:	11 a9       	ld.ub	r9,r8[0x2]
8000c2c8:	a9 69       	lsl	r9,0x8
8000c2ca:	11 b8       	ld.ub	r8,r8[0x3]
8000c2cc:	12 48       	or	r8,r9
8000c2ce:	5c 88       	casts.h	r8
8000c2d0:	5c 88       	casts.h	r8
8000c2d2:	5c c8       	swap.bh	r8
8000c2d4:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c2d6:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000c2da:	4e 48       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c2dc:	70 4a       	ld.w	r10,r8[0x10]
8000c2de:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c2e2:	a3 78       	lsl	r8,0x3
8000c2e4:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c2e8:	70 08       	ld.w	r8,r8[0x0]
8000c2ea:	12 9b       	mov	r11,r9
8000c2ec:	10 9c       	mov	r12,r8
8000c2ee:	f0 1f 00 60 	mcall	8000c46c <udc_req_std_dev_get_descriptor+0x254>
8000c2f2:	c2 a8       	rjmp	8000c346 <udc_req_std_dev_get_descriptor+0x12e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000c2f4:	4d d8       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c2f6:	70 08       	ld.w	r8,r8[0x0]
8000c2f8:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c2fc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c300:	f0 09 18 00 	cp.b	r9,r8
8000c304:	c0 33       	brcs	8000c30a <udc_req_std_dev_get_descriptor+0xf2>
					bNumConfigurations) {
				return false;
8000c306:	30 08       	mov	r8,0
8000c308:	ca 88       	rjmp	8000c458 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000c30a:	4d 88       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c30c:	70 19       	ld.w	r9,r8[0x4]
8000c30e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c312:	a3 78       	lsl	r8,0x3
8000c314:	f2 08 00 08 	add	r8,r9,r8
8000c318:	70 08       	ld.w	r8,r8[0x0]
8000c31a:	11 a9       	ld.ub	r9,r8[0x2]
8000c31c:	a9 69       	lsl	r9,0x8
8000c31e:	11 b8       	ld.ub	r8,r8[0x3]
8000c320:	12 48       	or	r8,r9
8000c322:	5c 88       	casts.h	r8
8000c324:	5c 88       	casts.h	r8
8000c326:	5c c8       	swap.bh	r8
8000c328:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c32a:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000c32e:	4c f8       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c330:	70 1a       	ld.w	r10,r8[0x4]
8000c332:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c336:	a3 78       	lsl	r8,0x3
8000c338:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c33c:	70 08       	ld.w	r8,r8[0x0]
8000c33e:	12 9b       	mov	r11,r9
8000c340:	10 9c       	mov	r12,r8
8000c342:	f0 1f 00 4b 	mcall	8000c46c <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000c346:	4c 78       	lddpc	r8,8000c460 <udc_req_std_dev_get_descriptor+0x248>
8000c348:	70 28       	ld.w	r8,r8[0x8]
8000c34a:	10 99       	mov	r9,r8
8000c34c:	30 28       	mov	r8,2
8000c34e:	b2 98       	st.b	r9[0x1],r8
				USB_DT_CONFIGURATION;
		break;
8000c350:	c7 88       	rjmp	8000c440 <udc_req_std_dev_get_descriptor+0x228>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
8000c352:	4c 68       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c354:	70 38       	ld.w	r8,r8[0xc]
8000c356:	11 88       	ld.ub	r8,r8[0x0]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
8000c358:	10 99       	mov	r9,r8
8000c35a:	4c 48       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c35c:	70 38       	ld.w	r8,r8[0xc]
8000c35e:	12 9b       	mov	r11,r9
8000c360:	10 9c       	mov	r12,r8
8000c362:	f0 1f 00 43 	mcall	8000c46c <udc_req_std_dev_get_descriptor+0x254>
				udc_config.qualifier->bLength);
		break;
8000c366:	c6 d8       	rjmp	8000c440 <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
8000c368:	f0 1f 00 3f 	mcall	8000c464 <udc_req_std_dev_get_descriptor+0x24c>
8000c36c:	18 98       	mov	r8,r12
8000c36e:	ec 18 00 01 	eorl	r8,0x1
8000c372:	5c 58       	castu.b	r8
8000c374:	c2 b0       	breq	8000c3ca <udc_req_std_dev_get_descriptor+0x1b2>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000c376:	4b d8       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c378:	70 28       	ld.w	r8,r8[0x8]
8000c37a:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c37e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c382:	f0 09 18 00 	cp.b	r9,r8
8000c386:	c0 33       	brcs	8000c38c <udc_req_std_dev_get_descriptor+0x174>
					bNumConfigurations) {
				return false;
8000c388:	30 08       	mov	r8,0
8000c38a:	c6 78       	rjmp	8000c458 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000c38c:	4b 78       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c38e:	70 49       	ld.w	r9,r8[0x10]
8000c390:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c394:	a3 78       	lsl	r8,0x3
8000c396:	f2 08 00 08 	add	r8,r9,r8
8000c39a:	70 08       	ld.w	r8,r8[0x0]
8000c39c:	11 a9       	ld.ub	r9,r8[0x2]
8000c39e:	a9 69       	lsl	r9,0x8
8000c3a0:	11 b8       	ld.ub	r8,r8[0x3]
8000c3a2:	12 48       	or	r8,r9
8000c3a4:	5c 88       	casts.h	r8
8000c3a6:	5c 88       	casts.h	r8
8000c3a8:	5c c8       	swap.bh	r8
8000c3aa:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c3ac:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000c3b0:	4a e8       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c3b2:	70 4a       	ld.w	r10,r8[0x10]
8000c3b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c3b8:	a3 78       	lsl	r8,0x3
8000c3ba:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c3be:	70 08       	ld.w	r8,r8[0x0]
8000c3c0:	12 9b       	mov	r11,r9
8000c3c2:	10 9c       	mov	r12,r8
8000c3c4:	f0 1f 00 2a 	mcall	8000c46c <udc_req_std_dev_get_descriptor+0x254>
8000c3c8:	c2 a8       	rjmp	8000c41c <udc_req_std_dev_get_descriptor+0x204>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000c3ca:	4a 88       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c3cc:	70 08       	ld.w	r8,r8[0x0]
8000c3ce:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c3d2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c3d6:	f0 09 18 00 	cp.b	r9,r8
8000c3da:	c0 33       	brcs	8000c3e0 <udc_req_std_dev_get_descriptor+0x1c8>
					bNumConfigurations) {
				return false;
8000c3dc:	30 08       	mov	r8,0
8000c3de:	c3 d8       	rjmp	8000c458 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000c3e0:	4a 28       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c3e2:	70 19       	ld.w	r9,r8[0x4]
8000c3e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c3e8:	a3 78       	lsl	r8,0x3
8000c3ea:	f2 08 00 08 	add	r8,r9,r8
8000c3ee:	70 08       	ld.w	r8,r8[0x0]
8000c3f0:	11 a9       	ld.ub	r9,r8[0x2]
8000c3f2:	a9 69       	lsl	r9,0x8
8000c3f4:	11 b8       	ld.ub	r8,r8[0x3]
8000c3f6:	12 48       	or	r8,r9
8000c3f8:	5c 88       	casts.h	r8
8000c3fa:	5c 88       	casts.h	r8
8000c3fc:	5c c8       	swap.bh	r8
8000c3fe:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c400:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000c404:	49 98       	lddpc	r8,8000c468 <udc_req_std_dev_get_descriptor+0x250>
8000c406:	70 1a       	ld.w	r10,r8[0x4]
8000c408:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c40c:	a3 78       	lsl	r8,0x3
8000c40e:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c412:	70 08       	ld.w	r8,r8[0x0]
8000c414:	12 9b       	mov	r11,r9
8000c416:	10 9c       	mov	r12,r8
8000c418:	f0 1f 00 15 	mcall	8000c46c <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000c41c:	49 18       	lddpc	r8,8000c460 <udc_req_std_dev_get_descriptor+0x248>
8000c41e:	70 28       	ld.w	r8,r8[0x8]
8000c420:	10 99       	mov	r9,r8
8000c422:	30 78       	mov	r8,7
8000c424:	b2 98       	st.b	r9[0x1],r8
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
8000c426:	c0 d8       	rjmp	8000c440 <udc_req_std_dev_get_descriptor+0x228>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
8000c428:	f0 1f 00 12 	mcall	8000c470 <udc_req_std_dev_get_descriptor+0x258>
8000c42c:	18 98       	mov	r8,r12
8000c42e:	ec 18 00 01 	eorl	r8,0x1
8000c432:	5c 58       	castu.b	r8
8000c434:	c0 50       	breq	8000c43e <udc_req_std_dev_get_descriptor+0x226>
			return false;
8000c436:	30 08       	mov	r8,0
8000c438:	c1 08       	rjmp	8000c458 <udc_req_std_dev_get_descriptor+0x240>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
8000c43a:	30 08       	mov	r8,0
8000c43c:	c0 e8       	rjmp	8000c458 <udc_req_std_dev_get_descriptor+0x240>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
8000c43e:	d7 03       	nop
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
8000c440:	48 88       	lddpc	r8,8000c460 <udc_req_std_dev_get_descriptor+0x248>
8000c442:	90 39       	ld.sh	r9,r8[0x6]
8000c444:	48 78       	lddpc	r8,8000c460 <udc_req_std_dev_get_descriptor+0x248>
8000c446:	90 68       	ld.sh	r8,r8[0xc]
8000c448:	f0 09 19 00 	cp.h	r9,r8
8000c44c:	c0 52       	brcc	8000c456 <udc_req_std_dev_get_descriptor+0x23e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000c44e:	48 58       	lddpc	r8,8000c460 <udc_req_std_dev_get_descriptor+0x248>
8000c450:	90 38       	ld.sh	r8,r8[0x6]
8000c452:	48 49       	lddpc	r9,8000c460 <udc_req_std_dev_get_descriptor+0x248>
8000c454:	b2 68       	st.h	r9[0xc],r8
	}
	return true;
8000c456:	30 18       	mov	r8,1
}
8000c458:	10 9c       	mov	r12,r8
8000c45a:	2f fd       	sub	sp,-4
8000c45c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c460:	00 00       	add	r0,r0
8000c462:	0b c8       	ld.ub	r8,r5[0x4]
8000c464:	80 00       	ld.sh	r0,r0[0x0]
8000c466:	87 f4       	st.w	r3[0x3c],r4
8000c468:	00 00       	add	r0,r0
8000c46a:	00 dc       	st.w	--r0,r12
8000c46c:	80 00       	ld.sh	r0,r0[0x0]
8000c46e:	88 90       	ld.uh	r0,r4[0x2]
8000c470:	80 00       	ld.sh	r0,r0[0x0]
8000c472:	c1 18       	rjmp	8000c494 <udc_req_std_dev_get_configuration+0x20>

8000c474 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
8000c474:	eb cd 40 80 	pushm	r7,lr
8000c478:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != 1) {
8000c47a:	48 98       	lddpc	r8,8000c49c <udc_req_std_dev_get_configuration+0x28>
8000c47c:	90 39       	ld.sh	r9,r8[0x6]
8000c47e:	30 18       	mov	r8,1
8000c480:	f0 09 19 00 	cp.h	r9,r8
8000c484:	c0 30       	breq	8000c48a <udc_req_std_dev_get_configuration+0x16>
		return false;
8000c486:	30 08       	mov	r8,0
8000c488:	c0 68       	rjmp	8000c494 <udc_req_std_dev_get_configuration+0x20>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
8000c48a:	30 1b       	mov	r11,1
8000c48c:	48 5c       	lddpc	r12,8000c4a0 <udc_req_std_dev_get_configuration+0x2c>
8000c48e:	f0 1f 00 06 	mcall	8000c4a4 <udc_req_std_dev_get_configuration+0x30>
	return true;
8000c492:	30 18       	mov	r8,1
}
8000c494:	10 9c       	mov	r12,r8
8000c496:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c49a:	00 00       	add	r0,r0
8000c49c:	00 00       	add	r0,r0
8000c49e:	0b c8       	ld.ub	r8,r5[0x4]
8000c4a0:	00 00       	add	r0,r0
8000c4a2:	06 fa       	st.b	--r3,r10
8000c4a4:	80 00       	ld.sh	r0,r0[0x0]
8000c4a6:	88 90       	ld.uh	r0,r4[0x2]

8000c4a8 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
8000c4a8:	eb cd 40 80 	pushm	r7,lr
8000c4ac:	1a 97       	mov	r7,sp
8000c4ae:	20 1d       	sub	sp,4
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
8000c4b0:	4b c8       	lddpc	r8,8000c5a0 <udc_req_std_dev_set_configuration+0xf8>
8000c4b2:	90 38       	ld.sh	r8,r8[0x6]
8000c4b4:	58 08       	cp.w	r8,0
8000c4b6:	c0 30       	breq	8000c4bc <udc_req_std_dev_set_configuration+0x14>
		return false;
8000c4b8:	30 08       	mov	r8,0
8000c4ba:	c6 f8       	rjmp	8000c598 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
8000c4bc:	f0 1f 00 3a 	mcall	8000c5a4 <udc_req_std_dev_set_configuration+0xfc>
8000c4c0:	18 98       	mov	r8,r12
8000c4c2:	58 08       	cp.w	r8,0
8000c4c4:	c0 31       	brne	8000c4ca <udc_req_std_dev_set_configuration+0x22>
		return false;
8000c4c6:	30 08       	mov	r8,0
8000c4c8:	c6 88       	rjmp	8000c598 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000c4ca:	f0 1f 00 38 	mcall	8000c5a8 <udc_req_std_dev_set_configuration+0x100>
8000c4ce:	18 98       	mov	r8,r12
8000c4d0:	58 08       	cp.w	r8,0
8000c4d2:	c0 f0       	breq	8000c4f0 <udc_req_std_dev_set_configuration+0x48>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000c4d4:	4b 38       	lddpc	r8,8000c5a0 <udc_req_std_dev_set_configuration+0xf8>
8000c4d6:	90 18       	ld.sh	r8,r8[0x2]
8000c4d8:	5c 78       	castu.h	r8
8000c4da:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_hs->bNumConfigurations) {
8000c4de:	4b 48       	lddpc	r8,8000c5ac <udc_req_std_dev_set_configuration+0x104>
8000c4e0:	70 28       	ld.w	r8,r8[0x8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000c4e2:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c4e6:	10 39       	cp.w	r9,r8
8000c4e8:	e0 8a 00 12 	brle	8000c50c <udc_req_std_dev_set_configuration+0x64>
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000c4ec:	30 08       	mov	r8,0
8000c4ee:	c5 58       	rjmp	8000c598 <udc_req_std_dev_set_configuration+0xf0>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000c4f0:	4a c8       	lddpc	r8,8000c5a0 <udc_req_std_dev_set_configuration+0xf8>
8000c4f2:	90 18       	ld.sh	r8,r8[0x2]
8000c4f4:	5c 78       	castu.h	r8
8000c4f6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_lsfs->bNumConfigurations) {
8000c4fa:	4a d8       	lddpc	r8,8000c5ac <udc_req_std_dev_set_configuration+0x104>
8000c4fc:	70 08       	ld.w	r8,r8[0x0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000c4fe:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c502:	10 39       	cp.w	r9,r8
8000c504:	e0 8a 00 05 	brle	8000c50e <udc_req_std_dev_set_configuration+0x66>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
8000c508:	30 08       	mov	r8,0
8000c50a:	c4 78       	rjmp	8000c598 <udc_req_std_dev_set_configuration+0xf0>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000c50c:	d7 03       	nop
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
8000c50e:	f0 1f 00 29 	mcall	8000c5b0 <udc_req_std_dev_set_configuration+0x108>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
8000c512:	4a 48       	lddpc	r8,8000c5a0 <udc_req_std_dev_set_configuration+0xf8>
8000c514:	90 18       	ld.sh	r8,r8[0x2]
8000c516:	5c 58       	castu.b	r8
8000c518:	4a 79       	lddpc	r9,8000c5b4 <udc_req_std_dev_set_configuration+0x10c>
8000c51a:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
8000c51c:	4a 68       	lddpc	r8,8000c5b4 <udc_req_std_dev_set_configuration+0x10c>
8000c51e:	11 88       	ld.ub	r8,r8[0x0]
8000c520:	58 08       	cp.w	r8,0
8000c522:	c0 31       	brne	8000c528 <udc_req_std_dev_set_configuration+0x80>
		return true; // Default empty configuration requested
8000c524:	30 18       	mov	r8,1
8000c526:	c3 98       	rjmp	8000c598 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000c528:	f0 1f 00 20 	mcall	8000c5a8 <udc_req_std_dev_set_configuration+0x100>
8000c52c:	18 98       	mov	r8,r12
8000c52e:	58 08       	cp.w	r8,0
8000c530:	c0 b0       	breq	8000c546 <udc_req_std_dev_set_configuration+0x9e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
8000c532:	49 f8       	lddpc	r8,8000c5ac <udc_req_std_dev_set_configuration+0x104>
8000c534:	70 49       	ld.w	r9,r8[0x10]
8000c536:	4a 08       	lddpc	r8,8000c5b4 <udc_req_std_dev_set_configuration+0x10c>
8000c538:	11 88       	ld.ub	r8,r8[0x0]
8000c53a:	20 18       	sub	r8,1
8000c53c:	a3 78       	lsl	r8,0x3
8000c53e:	10 09       	add	r9,r8
8000c540:	49 e8       	lddpc	r8,8000c5b8 <udc_req_std_dev_set_configuration+0x110>
8000c542:	91 09       	st.w	r8[0x0],r9
8000c544:	c0 a8       	rjmp	8000c558 <udc_req_std_dev_set_configuration+0xb0>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
8000c546:	49 a8       	lddpc	r8,8000c5ac <udc_req_std_dev_set_configuration+0x104>
8000c548:	70 19       	ld.w	r9,r8[0x4]
8000c54a:	49 b8       	lddpc	r8,8000c5b4 <udc_req_std_dev_set_configuration+0x10c>
8000c54c:	11 88       	ld.ub	r8,r8[0x0]
8000c54e:	20 18       	sub	r8,1
8000c550:	a3 78       	lsl	r8,0x3
8000c552:	10 09       	add	r9,r8
8000c554:	49 98       	lddpc	r8,8000c5b8 <udc_req_std_dev_set_configuration+0x110>
8000c556:	91 09       	st.w	r8[0x0],r9
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000c558:	30 08       	mov	r8,0
8000c55a:	ef 68 ff ff 	st.b	r7[-1],r8
8000c55e:	c1 38       	rjmp	8000c584 <udc_req_std_dev_set_configuration+0xdc>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
8000c560:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c564:	30 0b       	mov	r11,0
8000c566:	10 9c       	mov	r12,r8
8000c568:	f0 1f 00 15 	mcall	8000c5bc <udc_req_std_dev_set_configuration+0x114>
8000c56c:	18 98       	mov	r8,r12
8000c56e:	ec 18 00 01 	eorl	r8,0x1
8000c572:	5c 58       	castu.b	r8
8000c574:	c0 30       	breq	8000c57a <udc_req_std_dev_set_configuration+0xd2>
			return false;
8000c576:	30 08       	mov	r8,0
8000c578:	c1 08       	rjmp	8000c598 <udc_req_std_dev_set_configuration+0xf0>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000c57a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c57e:	2f f8       	sub	r8,-1
8000c580:	ef 68 ff ff 	st.b	r7[-1],r8
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000c584:	48 d8       	lddpc	r8,8000c5b8 <udc_req_std_dev_set_configuration+0x110>
8000c586:	70 08       	ld.w	r8,r8[0x0]
8000c588:	70 08       	ld.w	r8,r8[0x0]
8000c58a:	11 c8       	ld.ub	r8,r8[0x4]
8000c58c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c590:	f0 09 18 00 	cp.b	r9,r8
8000c594:	ce 63       	brcs	8000c560 <udc_req_std_dev_set_configuration+0xb8>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
8000c596:	30 18       	mov	r8,1
}
8000c598:	10 9c       	mov	r12,r8
8000c59a:	2f fd       	sub	sp,-4
8000c59c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5a0:	00 00       	add	r0,r0
8000c5a2:	0b c8       	ld.ub	r8,r5[0x4]
8000c5a4:	80 00       	ld.sh	r0,r0[0x0]
8000c5a6:	88 5e       	ld.sh	lr,r4[0xa]
8000c5a8:	80 00       	ld.sh	r0,r0[0x0]
8000c5aa:	87 f4       	st.w	r3[0x3c],r4
8000c5ac:	00 00       	add	r0,r0
8000c5ae:	00 dc       	st.w	--r0,r12
8000c5b0:	80 00       	ld.sh	r0,r0[0x0]
8000c5b2:	bd e8       	*unknown*
8000c5b4:	00 00       	add	r0,r0
8000c5b6:	06 fa       	st.b	--r3,r10
8000c5b8:	00 00       	add	r0,r0
8000c5ba:	06 fc       	st.b	--r3,r12
8000c5bc:	80 00       	ld.sh	r0,r0[0x0]
8000c5be:	bd 0c       	ld.d	r12,lr

8000c5c0 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
8000c5c0:	eb cd 40 80 	pushm	r7,lr
8000c5c4:	1a 97       	mov	r7,sp
8000c5c6:	20 2d       	sub	sp,8
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
8000c5c8:	4a 38       	lddpc	r8,8000c654 <udc_req_std_iface_get_setting+0x94>
8000c5ca:	90 39       	ld.sh	r9,r8[0x6]
8000c5cc:	30 18       	mov	r8,1
8000c5ce:	f0 09 19 00 	cp.h	r9,r8
8000c5d2:	c0 30       	breq	8000c5d8 <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
8000c5d4:	30 08       	mov	r8,0
8000c5d6:	c3 a8       	rjmp	8000c64a <udc_req_std_iface_get_setting+0x8a>
	}
	if (!udc_num_configuration) {
8000c5d8:	4a 08       	lddpc	r8,8000c658 <udc_req_std_iface_get_setting+0x98>
8000c5da:	11 88       	ld.ub	r8,r8[0x0]
8000c5dc:	58 08       	cp.w	r8,0
8000c5de:	c0 31       	brne	8000c5e4 <udc_req_std_iface_get_setting+0x24>
		return false; // The device is not is configured state yet
8000c5e0:	30 08       	mov	r8,0
8000c5e2:	c3 48       	rjmp	8000c64a <udc_req_std_iface_get_setting+0x8a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000c5e4:	49 c8       	lddpc	r8,8000c654 <udc_req_std_iface_get_setting+0x94>
8000c5e6:	90 28       	ld.sh	r8,r8[0x4]
8000c5e8:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000c5ec:	49 c8       	lddpc	r8,8000c65c <udc_req_std_iface_get_setting+0x9c>
8000c5ee:	70 08       	ld.w	r8,r8[0x0]
8000c5f0:	70 08       	ld.w	r8,r8[0x0]
8000c5f2:	11 c8       	ld.ub	r8,r8[0x4]
8000c5f4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c5f8:	f0 09 18 00 	cp.b	r9,r8
8000c5fc:	c0 33       	brcs	8000c602 <udc_req_std_iface_get_setting+0x42>
		return false;
8000c5fe:	30 08       	mov	r8,0
8000c600:	c2 58       	rjmp	8000c64a <udc_req_std_iface_get_setting+0x8a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000c602:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c606:	30 0b       	mov	r11,0
8000c608:	10 9c       	mov	r12,r8
8000c60a:	f0 1f 00 16 	mcall	8000c660 <udc_req_std_iface_get_setting+0xa0>
8000c60e:	18 98       	mov	r8,r12
8000c610:	ec 18 00 01 	eorl	r8,0x1
8000c614:	5c 58       	castu.b	r8
8000c616:	c0 30       	breq	8000c61c <udc_req_std_iface_get_setting+0x5c>
		return false;
8000c618:	30 08       	mov	r8,0
8000c61a:	c1 88       	rjmp	8000c64a <udc_req_std_iface_get_setting+0x8a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000c61c:	49 08       	lddpc	r8,8000c65c <udc_req_std_iface_get_setting+0x9c>
8000c61e:	70 08       	ld.w	r8,r8[0x0]
8000c620:	70 19       	ld.w	r9,r8[0x4]
8000c622:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c626:	a3 68       	lsl	r8,0x2
8000c628:	f2 08 00 08 	add	r8,r9,r8
8000c62c:	70 08       	ld.w	r8,r8[0x0]
8000c62e:	ef 48 ff fc 	st.w	r7[-4],r8
	udc_iface_setting = udi_api->getsetting();
8000c632:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c636:	70 38       	ld.w	r8,r8[0xc]
8000c638:	5d 18       	icall	r8
8000c63a:	18 98       	mov	r8,r12
8000c63c:	48 a9       	lddpc	r9,8000c664 <udc_req_std_iface_get_setting+0xa4>
8000c63e:	b2 88       	st.b	r9[0x0],r8

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
8000c640:	30 1b       	mov	r11,1
8000c642:	48 9c       	lddpc	r12,8000c664 <udc_req_std_iface_get_setting+0xa4>
8000c644:	f0 1f 00 09 	mcall	8000c668 <udc_req_std_iface_get_setting+0xa8>
	return true;
8000c648:	30 18       	mov	r8,1
}
8000c64a:	10 9c       	mov	r12,r8
8000c64c:	2f ed       	sub	sp,-8
8000c64e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c652:	00 00       	add	r0,r0
8000c654:	00 00       	add	r0,r0
8000c656:	0b c8       	ld.ub	r8,r5[0x4]
8000c658:	00 00       	add	r0,r0
8000c65a:	06 fa       	st.b	--r3,r10
8000c65c:	00 00       	add	r0,r0
8000c65e:	06 fc       	st.b	--r3,r12
8000c660:	80 00       	ld.sh	r0,r0[0x0]
8000c662:	bb 98       	lsr	r8,0x1b
8000c664:	00 00       	add	r0,r0
8000c666:	07 04       	ld.w	r4,r3++
8000c668:	80 00       	ld.sh	r0,r0[0x0]
8000c66a:	88 90       	ld.uh	r0,r4[0x2]

8000c66c <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
8000c66c:	eb cd 40 80 	pushm	r7,lr
8000c670:	1a 97       	mov	r7,sp
8000c672:	20 1d       	sub	sp,4
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
8000c674:	49 78       	lddpc	r8,8000c6d0 <udc_req_std_iface_set_setting+0x64>
8000c676:	90 38       	ld.sh	r8,r8[0x6]
8000c678:	58 08       	cp.w	r8,0
8000c67a:	c0 30       	breq	8000c680 <udc_req_std_iface_set_setting+0x14>
		return false; // Error in request
8000c67c:	30 08       	mov	r8,0
8000c67e:	c2 48       	rjmp	8000c6c6 <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
8000c680:	49 58       	lddpc	r8,8000c6d4 <udc_req_std_iface_set_setting+0x68>
8000c682:	11 88       	ld.ub	r8,r8[0x0]
8000c684:	58 08       	cp.w	r8,0
8000c686:	c0 31       	brne	8000c68c <udc_req_std_iface_set_setting+0x20>
		return false; // The device is not is configured state yet
8000c688:	30 08       	mov	r8,0
8000c68a:	c1 e8       	rjmp	8000c6c6 <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000c68c:	49 18       	lddpc	r8,8000c6d0 <udc_req_std_iface_set_setting+0x64>
8000c68e:	90 28       	ld.sh	r8,r8[0x4]
8000c690:	ef 68 ff fe 	st.b	r7[-2],r8
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
8000c694:	48 f8       	lddpc	r8,8000c6d0 <udc_req_std_iface_set_setting+0x64>
8000c696:	90 18       	ld.sh	r8,r8[0x2]
8000c698:	ef 68 ff ff 	st.b	r7[-1],r8

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
8000c69c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c6a0:	10 9c       	mov	r12,r8
8000c6a2:	f0 1f 00 0e 	mcall	8000c6d8 <udc_req_std_iface_set_setting+0x6c>
8000c6a6:	18 98       	mov	r8,r12
8000c6a8:	ec 18 00 01 	eorl	r8,0x1
8000c6ac:	5c 58       	castu.b	r8
8000c6ae:	c0 30       	breq	8000c6b4 <udc_req_std_iface_set_setting+0x48>
		return false;
8000c6b0:	30 08       	mov	r8,0
8000c6b2:	c0 a8       	rjmp	8000c6c6 <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
8000c6b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c6b8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c6bc:	12 9b       	mov	r11,r9
8000c6be:	10 9c       	mov	r12,r8
8000c6c0:	f0 1f 00 07 	mcall	8000c6dc <udc_req_std_iface_set_setting+0x70>
8000c6c4:	18 98       	mov	r8,r12
}
8000c6c6:	10 9c       	mov	r12,r8
8000c6c8:	2f fd       	sub	sp,-4
8000c6ca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c6ce:	00 00       	add	r0,r0
8000c6d0:	00 00       	add	r0,r0
8000c6d2:	0b c8       	ld.ub	r8,r5[0x4]
8000c6d4:	00 00       	add	r0,r0
8000c6d6:	06 fa       	st.b	--r3,r10
8000c6d8:	80 00       	ld.sh	r0,r0[0x0]
8000c6da:	bc 50       	st.h	lr[0xa],r0
8000c6dc:	80 00       	ld.sh	r0,r0[0x0]
8000c6de:	bd 0c       	ld.d	r12,lr

8000c6e0 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
8000c6e0:	eb cd 40 80 	pushm	r7,lr
8000c6e4:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000c6e6:	4c 78       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c6e8:	11 88       	ld.ub	r8,r8[0x0]
8000c6ea:	10 99       	mov	r9,r8
8000c6ec:	30 08       	mov	r8,0
8000c6ee:	f0 09 18 00 	cp.b	r9,r8
8000c6f2:	c3 c4       	brge	8000c76a <udc_reqstd+0x8a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
8000c6f4:	4c 38       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c6f6:	90 38       	ld.sh	r8,r8[0x6]
8000c6f8:	58 08       	cp.w	r8,0
8000c6fa:	c0 31       	brne	8000c700 <udc_reqstd+0x20>
			return false; // Error for USB host
8000c6fc:	30 08       	mov	r8,0
8000c6fe:	c7 e8       	rjmp	8000c7fa <udc_reqstd+0x11a>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000c700:	4c 08       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c702:	11 88       	ld.ub	r8,r8[0x0]
8000c704:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c708:	c1 51       	brne	8000c732 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c70a:	4b e8       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c70c:	11 98       	ld.ub	r8,r8[0x1]
8000c70e:	58 68       	cp.w	r8,6
8000c710:	c0 90       	breq	8000c722 <udc_reqstd+0x42>
8000c712:	58 88       	cp.w	r8,8
8000c714:	c0 b0       	breq	8000c72a <udc_reqstd+0x4a>
8000c716:	58 08       	cp.w	r8,0
8000c718:	c0 d1       	brne	8000c732 <udc_reqstd+0x52>
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
8000c71a:	f0 1f 00 3b 	mcall	8000c804 <udc_reqstd+0x124>
8000c71e:	18 98       	mov	r8,r12
8000c720:	c6 d8       	rjmp	8000c7fa <udc_reqstd+0x11a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
8000c722:	f0 1f 00 3a 	mcall	8000c808 <udc_reqstd+0x128>
8000c726:	18 98       	mov	r8,r12
8000c728:	c6 98       	rjmp	8000c7fa <udc_reqstd+0x11a>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
8000c72a:	f0 1f 00 39 	mcall	8000c80c <udc_reqstd+0x12c>
8000c72e:	18 98       	mov	r8,r12
8000c730:	c6 58       	rjmp	8000c7fa <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000c732:	4b 48       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c734:	11 88       	ld.ub	r8,r8[0x0]
8000c736:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c73a:	58 18       	cp.w	r8,1
8000c73c:	c0 91       	brne	8000c74e <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c73e:	4b 18       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c740:	11 98       	ld.ub	r8,r8[0x1]
8000c742:	58 a8       	cp.w	r8,10
8000c744:	c0 51       	brne	8000c74e <udc_reqstd+0x6e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
8000c746:	f0 1f 00 33 	mcall	8000c810 <udc_reqstd+0x130>
8000c74a:	18 98       	mov	r8,r12
8000c74c:	c5 78       	rjmp	8000c7fa <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000c74e:	4a d8       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c750:	11 88       	ld.ub	r8,r8[0x0]
8000c752:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c756:	58 28       	cp.w	r8,2
8000c758:	c4 f1       	brne	8000c7f6 <udc_reqstd+0x116>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c75a:	4a a8       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c75c:	11 98       	ld.ub	r8,r8[0x1]
8000c75e:	58 08       	cp.w	r8,0
8000c760:	c4 c1       	brne	8000c7f8 <udc_reqstd+0x118>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000c762:	f0 1f 00 2d 	mcall	8000c814 <udc_reqstd+0x134>
8000c766:	18 98       	mov	r8,r12
8000c768:	c4 98       	rjmp	8000c7fa <udc_reqstd+0x11a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000c76a:	4a 68       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c76c:	11 88       	ld.ub	r8,r8[0x0]
8000c76e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c772:	c1 f1       	brne	8000c7b0 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c774:	4a 38       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c776:	11 98       	ld.ub	r8,r8[0x1]
8000c778:	58 38       	cp.w	r8,3
8000c77a:	c1 30       	breq	8000c7a0 <udc_reqstd+0xc0>
8000c77c:	e0 89 00 05 	brgt	8000c786 <udc_reqstd+0xa6>
8000c780:	58 18       	cp.w	r8,1
8000c782:	c0 b0       	breq	8000c798 <udc_reqstd+0xb8>
8000c784:	c1 68       	rjmp	8000c7b0 <udc_reqstd+0xd0>
8000c786:	58 58       	cp.w	r8,5
8000c788:	c0 40       	breq	8000c790 <udc_reqstd+0xb0>
8000c78a:	58 98       	cp.w	r8,9
8000c78c:	c0 e0       	breq	8000c7a8 <udc_reqstd+0xc8>
8000c78e:	c1 18       	rjmp	8000c7b0 <udc_reqstd+0xd0>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
8000c790:	f0 1f 00 22 	mcall	8000c818 <udc_reqstd+0x138>
8000c794:	18 98       	mov	r8,r12
8000c796:	c3 28       	rjmp	8000c7fa <udc_reqstd+0x11a>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
8000c798:	f0 1f 00 21 	mcall	8000c81c <udc_reqstd+0x13c>
8000c79c:	18 98       	mov	r8,r12
8000c79e:	c2 e8       	rjmp	8000c7fa <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
8000c7a0:	f0 1f 00 20 	mcall	8000c820 <udc_reqstd+0x140>
8000c7a4:	18 98       	mov	r8,r12
8000c7a6:	c2 a8       	rjmp	8000c7fa <udc_reqstd+0x11a>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
8000c7a8:	f0 1f 00 1f 	mcall	8000c824 <udc_reqstd+0x144>
8000c7ac:	18 98       	mov	r8,r12
8000c7ae:	c2 68       	rjmp	8000c7fa <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000c7b0:	49 48       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c7b2:	11 88       	ld.ub	r8,r8[0x0]
8000c7b4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c7b8:	58 18       	cp.w	r8,1
8000c7ba:	c0 91       	brne	8000c7cc <udc_reqstd+0xec>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c7bc:	49 18       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c7be:	11 98       	ld.ub	r8,r8[0x1]
8000c7c0:	58 b8       	cp.w	r8,11
8000c7c2:	c0 51       	brne	8000c7cc <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
8000c7c4:	f0 1f 00 19 	mcall	8000c828 <udc_reqstd+0x148>
8000c7c8:	18 98       	mov	r8,r12
8000c7ca:	c1 88       	rjmp	8000c7fa <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000c7cc:	48 d8       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c7ce:	11 88       	ld.ub	r8,r8[0x0]
8000c7d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c7d4:	58 28       	cp.w	r8,2
8000c7d6:	c1 11       	brne	8000c7f8 <udc_reqstd+0x118>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c7d8:	48 a8       	lddpc	r8,8000c800 <udc_reqstd+0x120>
8000c7da:	11 98       	ld.ub	r8,r8[0x1]
8000c7dc:	58 18       	cp.w	r8,1
8000c7de:	c0 40       	breq	8000c7e6 <udc_reqstd+0x106>
8000c7e0:	58 38       	cp.w	r8,3
8000c7e2:	c0 60       	breq	8000c7ee <udc_reqstd+0x10e>
8000c7e4:	c0 a8       	rjmp	8000c7f8 <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
8000c7e6:	f0 1f 00 12 	mcall	8000c82c <udc_reqstd+0x14c>
8000c7ea:	18 98       	mov	r8,r12
8000c7ec:	c0 78       	rjmp	8000c7fa <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
8000c7ee:	f0 1f 00 11 	mcall	8000c830 <udc_reqstd+0x150>
8000c7f2:	18 98       	mov	r8,r12
8000c7f4:	c0 38       	rjmp	8000c7fa <udc_reqstd+0x11a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000c7f6:	d7 03       	nop
				break;
			}
		}
#endif
	}
	return false;
8000c7f8:	30 08       	mov	r8,0
}
8000c7fa:	10 9c       	mov	r12,r8
8000c7fc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c800:	00 00       	add	r0,r0
8000c802:	0b c8       	ld.ub	r8,r5[0x4]
8000c804:	80 00       	ld.sh	r0,r0[0x0]
8000c806:	be bc       	st.b	pc[0x3],r12
8000c808:	80 00       	ld.sh	r0,r0[0x0]
8000c80a:	c2 18       	rjmp	8000c84c <udc_req_iface+0x18>
8000c80c:	80 00       	ld.sh	r0,r0[0x0]
8000c80e:	c4 74       	brge	8000c89c <udc_req_iface+0x68>
8000c810:	80 00       	ld.sh	r0,r0[0x0]
8000c812:	c5 c0       	breq	8000c8ca <udc_req_iface+0x96>
8000c814:	80 00       	ld.sh	r0,r0[0x0]
8000c816:	be f0       	st.b	pc[0x7],r0
8000c818:	80 00       	ld.sh	r0,r0[0x0]
8000c81a:	c0 f0       	breq	8000c838 <udc_req_iface+0x4>
8000c81c:	80 00       	ld.sh	r0,r0[0x0]
8000c81e:	bf 48       	asr	r8,0x1e
8000c820:	80 00       	ld.sh	r0,r0[0x0]
8000c822:	bf c4       	cbr	r4,0x1e
8000c824:	80 00       	ld.sh	r0,r0[0x0]
8000c826:	c4 a8       	rjmp	8000c8ba <udc_req_iface+0x86>
8000c828:	80 00       	ld.sh	r0,r0[0x0]
8000c82a:	c6 6c       	rcall	8000c8f6 <udc_process_setup+0x16>
8000c82c:	80 00       	ld.sh	r0,r0[0x0]
8000c82e:	bf 88       	lsr	r8,0x1e
8000c830:	80 00       	ld.sh	r0,r0[0x0]
8000c832:	c0 80       	breq	8000c842 <udc_req_iface+0xe>

8000c834 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
8000c834:	eb cd 40 80 	pushm	r7,lr
8000c838:	1a 97       	mov	r7,sp
8000c83a:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000c83c:	4a 58       	lddpc	r8,8000c8d0 <udc_req_iface+0x9c>
8000c83e:	11 88       	ld.ub	r8,r8[0x0]
8000c840:	58 08       	cp.w	r8,0
8000c842:	c0 31       	brne	8000c848 <udc_req_iface+0x14>
		return false; // The device is not is configured state yet
8000c844:	30 08       	mov	r8,0
8000c846:	c4 08       	rjmp	8000c8c6 <udc_req_iface+0x92>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000c848:	4a 38       	lddpc	r8,8000c8d4 <udc_req_iface+0xa0>
8000c84a:	90 28       	ld.sh	r8,r8[0x4]
8000c84c:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000c850:	4a 28       	lddpc	r8,8000c8d8 <udc_req_iface+0xa4>
8000c852:	70 08       	ld.w	r8,r8[0x0]
8000c854:	70 08       	ld.w	r8,r8[0x0]
8000c856:	11 c8       	ld.ub	r8,r8[0x4]
8000c858:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c85c:	f0 09 18 00 	cp.b	r9,r8
8000c860:	c0 33       	brcs	8000c866 <udc_req_iface+0x32>
		return false;
8000c862:	30 08       	mov	r8,0
8000c864:	c3 18       	rjmp	8000c8c6 <udc_req_iface+0x92>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000c866:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c86a:	30 0b       	mov	r11,0
8000c86c:	10 9c       	mov	r12,r8
8000c86e:	f0 1f 00 1c 	mcall	8000c8dc <udc_req_iface+0xa8>
8000c872:	18 98       	mov	r8,r12
8000c874:	ec 18 00 01 	eorl	r8,0x1
8000c878:	5c 58       	castu.b	r8
8000c87a:	c0 30       	breq	8000c880 <udc_req_iface+0x4c>
		return false;
8000c87c:	30 08       	mov	r8,0
8000c87e:	c2 48       	rjmp	8000c8c6 <udc_req_iface+0x92>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000c880:	49 68       	lddpc	r8,8000c8d8 <udc_req_iface+0xa4>
8000c882:	70 08       	ld.w	r8,r8[0x0]
8000c884:	70 19       	ld.w	r9,r8[0x4]
8000c886:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c88a:	a3 68       	lsl	r8,0x2
8000c88c:	f2 08 00 08 	add	r8,r9,r8
8000c890:	70 08       	ld.w	r8,r8[0x0]
8000c892:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000c896:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c89a:	70 38       	ld.w	r8,r8[0xc]
8000c89c:	5d 18       	icall	r8
8000c89e:	18 98       	mov	r8,r12
8000c8a0:	10 99       	mov	r9,r8
8000c8a2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c8a6:	12 9b       	mov	r11,r9
8000c8a8:	10 9c       	mov	r12,r8
8000c8aa:	f0 1f 00 0d 	mcall	8000c8dc <udc_req_iface+0xa8>
8000c8ae:	18 98       	mov	r8,r12
8000c8b0:	ec 18 00 01 	eorl	r8,0x1
8000c8b4:	5c 58       	castu.b	r8
8000c8b6:	c0 30       	breq	8000c8bc <udc_req_iface+0x88>
		return false;
8000c8b8:	30 08       	mov	r8,0
8000c8ba:	c0 68       	rjmp	8000c8c6 <udc_req_iface+0x92>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
8000c8bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c8c0:	70 28       	ld.w	r8,r8[0x8]
8000c8c2:	5d 18       	icall	r8
8000c8c4:	18 98       	mov	r8,r12
}
8000c8c6:	10 9c       	mov	r12,r8
8000c8c8:	2f ed       	sub	sp,-8
8000c8ca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8ce:	00 00       	add	r0,r0
8000c8d0:	00 00       	add	r0,r0
8000c8d2:	06 fa       	st.b	--r3,r10
8000c8d4:	00 00       	add	r0,r0
8000c8d6:	0b c8       	ld.ub	r8,r5[0x4]
8000c8d8:	00 00       	add	r0,r0
8000c8da:	06 fc       	st.b	--r3,r12
8000c8dc:	80 00       	ld.sh	r0,r0[0x0]
8000c8de:	bb 98       	lsr	r8,0x1b

8000c8e0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
8000c8e0:	eb cd 40 80 	pushm	r7,lr
8000c8e4:	1a 97       	mov	r7,sp
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
8000c8e6:	49 a9       	lddpc	r9,8000c94c <udc_process_setup+0x6c>
8000c8e8:	30 08       	mov	r8,0
8000c8ea:	b2 68       	st.h	r9[0xc],r8
	udd_g_ctrlreq.callback = NULL;
8000c8ec:	49 88       	lddpc	r8,8000c94c <udc_process_setup+0x6c>
8000c8ee:	30 09       	mov	r9,0
8000c8f0:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000c8f2:	49 78       	lddpc	r8,8000c94c <udc_process_setup+0x6c>
8000c8f4:	30 09       	mov	r9,0
8000c8f6:	91 59       	st.w	r8[0x14],r9

	if (Udd_setup_is_in()) {
8000c8f8:	49 58       	lddpc	r8,8000c94c <udc_process_setup+0x6c>
8000c8fa:	11 88       	ld.ub	r8,r8[0x0]
8000c8fc:	10 99       	mov	r9,r8
8000c8fe:	30 08       	mov	r8,0
8000c900:	f0 09 18 00 	cp.b	r9,r8
8000c904:	c0 74       	brge	8000c912 <udc_process_setup+0x32>
		if (udd_g_ctrlreq.req.wLength == 0) {
8000c906:	49 28       	lddpc	r8,8000c94c <udc_process_setup+0x6c>
8000c908:	90 38       	ld.sh	r8,r8[0x6]
8000c90a:	58 08       	cp.w	r8,0
8000c90c:	c0 31       	brne	8000c912 <udc_process_setup+0x32>
			return false; // Error from USB host
8000c90e:	30 08       	mov	r8,0
8000c910:	c1 b8       	rjmp	8000c946 <udc_process_setup+0x66>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
8000c912:	48 f8       	lddpc	r8,8000c94c <udc_process_setup+0x6c>
8000c914:	11 88       	ld.ub	r8,r8[0x0]
8000c916:	e2 18 00 60 	andl	r8,0x60,COH
8000c91a:	c0 81       	brne	8000c92a <udc_process_setup+0x4a>
		if (udc_reqstd()) {
8000c91c:	f0 1f 00 0d 	mcall	8000c950 <udc_process_setup+0x70>
8000c920:	18 98       	mov	r8,r12
8000c922:	58 08       	cp.w	r8,0
8000c924:	c0 30       	breq	8000c92a <udc_process_setup+0x4a>
			return true;
8000c926:	30 18       	mov	r8,1
8000c928:	c0 f8       	rjmp	8000c946 <udc_process_setup+0x66>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
8000c92a:	48 98       	lddpc	r8,8000c94c <udc_process_setup+0x6c>
8000c92c:	11 88       	ld.ub	r8,r8[0x0]
8000c92e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c932:	58 18       	cp.w	r8,1
8000c934:	c0 81       	brne	8000c944 <udc_process_setup+0x64>
		if (udc_req_iface()) {
8000c936:	f0 1f 00 08 	mcall	8000c954 <udc_process_setup+0x74>
8000c93a:	18 98       	mov	r8,r12
8000c93c:	58 08       	cp.w	r8,0
8000c93e:	c0 30       	breq	8000c944 <udc_process_setup+0x64>
			return true;
8000c940:	30 18       	mov	r8,1
8000c942:	c0 28       	rjmp	8000c946 <udc_process_setup+0x66>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
8000c944:	30 08       	mov	r8,0
#endif
}
8000c946:	10 9c       	mov	r12,r8
8000c948:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c94c:	00 00       	add	r0,r0
8000c94e:	0b c8       	ld.ub	r8,r5[0x4]
8000c950:	80 00       	ld.sh	r0,r0[0x0]
8000c952:	c6 e0       	breq	8000ca2e <sleepmgr_init+0x6>
8000c954:	80 00       	ld.sh	r0,r0[0x0]
8000c956:	c8 34       	brge	8000c85c <udc_req_iface+0x28>

8000c958 <pm_sleep>:
#else
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
8000c958:	eb cd 40 80 	pushm	r7,lr
8000c95c:	1a 97       	mov	r7,sp
8000c95e:	20 1d       	sub	sp,4
8000c960:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (sleep_mode) {
8000c964:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c968:	58 58       	cp.w	r8,5
8000c96a:	c4 30       	breq	8000c9f0 <pm_sleep+0x98>
8000c96c:	e0 89 00 10 	brgt	8000c98c <pm_sleep+0x34>
8000c970:	58 28       	cp.w	r8,2
8000c972:	c2 d0       	breq	8000c9cc <pm_sleep+0x74>
8000c974:	e0 89 00 07 	brgt	8000c982 <pm_sleep+0x2a>
8000c978:	58 08       	cp.w	r8,0
8000c97a:	c1 d0       	breq	8000c9b4 <pm_sleep+0x5c>
8000c97c:	58 18       	cp.w	r8,1
8000c97e:	c2 10       	breq	8000c9c0 <pm_sleep+0x68>
8000c980:	c3 d8       	rjmp	8000c9fa <pm_sleep+0xa2>
8000c982:	58 38       	cp.w	r8,3
8000c984:	c2 a0       	breq	8000c9d8 <pm_sleep+0x80>
8000c986:	58 48       	cp.w	r8,4
8000c988:	c2 e0       	breq	8000c9e4 <pm_sleep+0x8c>
8000c98a:	c3 88       	rjmp	8000c9fa <pm_sleep+0xa2>
8000c98c:	e0 48 00 82 	cp.w	r8,130
8000c990:	c2 10       	breq	8000c9d2 <pm_sleep+0x7a>
8000c992:	e0 89 00 09 	brgt	8000c9a4 <pm_sleep+0x4c>
8000c996:	e0 48 00 80 	cp.w	r8,128
8000c99a:	c1 00       	breq	8000c9ba <pm_sleep+0x62>
8000c99c:	e0 48 00 81 	cp.w	r8,129
8000c9a0:	c1 30       	breq	8000c9c6 <pm_sleep+0x6e>
8000c9a2:	c2 c8       	rjmp	8000c9fa <pm_sleep+0xa2>
8000c9a4:	e0 48 00 84 	cp.w	r8,132
8000c9a8:	c2 10       	breq	8000c9ea <pm_sleep+0x92>
8000c9aa:	c1 a5       	brlt	8000c9de <pm_sleep+0x86>
8000c9ac:	e0 48 00 85 	cp.w	r8,133
8000c9b0:	c2 30       	breq	8000c9f6 <pm_sleep+0x9e>
8000c9b2:	c2 48       	rjmp	8000c9fa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
8000c9b4:	e9 b0 00 00 	sleep	0x0
		break;
8000c9b8:	c2 18       	rjmp	8000c9fa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
8000c9ba:	e9 b0 00 80 	sleep	0x80
		break;
8000c9be:	c1 e8       	rjmp	8000c9fa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
8000c9c0:	e9 b0 00 01 	sleep	0x1
		break;
8000c9c4:	c1 b8       	rjmp	8000c9fa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
8000c9c6:	e9 b0 00 81 	sleep	0x81
		break;
8000c9ca:	c1 88       	rjmp	8000c9fa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
8000c9cc:	e9 b0 00 02 	sleep	0x2
		break;
8000c9d0:	c1 58       	rjmp	8000c9fa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
8000c9d2:	e9 b0 00 82 	sleep	0x82
		break;
8000c9d6:	c1 28       	rjmp	8000c9fa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
8000c9d8:	e9 b0 00 03 	sleep	0x3
		break;
8000c9dc:	c0 f8       	rjmp	8000c9fa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
8000c9de:	e9 b0 00 83 	sleep	0x83
		break;
8000c9e2:	c0 c8       	rjmp	8000c9fa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
8000c9e4:	e9 b0 00 04 	sleep	0x4
		break;
8000c9e8:	c0 98       	rjmp	8000c9fa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000c9ea:	e9 b0 00 84 	sleep	0x84
		break;
8000c9ee:	c0 68       	rjmp	8000c9fa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
8000c9f0:	e9 b0 00 05 	sleep	0x5
		break;
8000c9f4:	c0 38       	rjmp	8000c9fa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
8000c9f6:	e9 b0 00 85 	sleep	0x85
		break;
#endif
	default:
		break;
	}
}
8000c9fa:	2f fd       	sub	sp,-4
8000c9fc:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ca00 <sleepmgr_sleep>:
//! @}



static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
8000ca00:	eb cd 40 80 	pushm	r7,lr
8000ca04:	1a 97       	mov	r7,sp
8000ca06:	20 1d       	sub	sp,4
8000ca08:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
8000ca0c:	d3 03       	ssrf	0x10

	// Atomically enable the global interrupts and enter the sleep mode.
	pm_sleep(AVR32_PM_SMODE_GMCLEAR_MASK | (sleep_mode-1));
8000ca0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ca12:	20 18       	sub	r8,1
8000ca14:	a7 b8       	sbr	r8,0x7
8000ca16:	10 9c       	mov	r12,r8
8000ca18:	f0 1f 00 03 	mcall	8000ca24 <sleepmgr_sleep+0x24>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
8000ca1c:	2f fd       	sub	sp,-4
8000ca1e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca22:	00 00       	add	r0,r0
8000ca24:	80 00       	ld.sh	r0,r0[0x0]
8000ca26:	c9 58       	rjmp	8000cb50 <main+0x28>

8000ca28 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8000ca28:	eb cd 40 80 	pushm	r7,lr
8000ca2c:	1a 97       	mov	r7,sp
8000ca2e:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000ca30:	30 08       	mov	r8,0
8000ca32:	ef 68 ff ff 	st.b	r7[-1],r8
8000ca36:	c0 c8       	rjmp	8000ca4e <sleepmgr_init+0x26>
		sleepmgr_locks[i] = 0;
8000ca38:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ca3c:	48 ba       	lddpc	r10,8000ca68 <sleepmgr_init+0x40>
8000ca3e:	30 08       	mov	r8,0
8000ca40:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000ca44:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ca48:	2f f8       	sub	r8,-1
8000ca4a:	ef 68 ff ff 	st.b	r7[-1],r8
8000ca4e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ca52:	30 58       	mov	r8,5
8000ca54:	f0 09 18 00 	cp.b	r9,r8
8000ca58:	fe 98 ff f0 	brls	8000ca38 <sleepmgr_init+0x10>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8000ca5c:	48 39       	lddpc	r9,8000ca68 <sleepmgr_init+0x40>
8000ca5e:	30 18       	mov	r8,1
8000ca60:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000ca62:	2f fd       	sub	sp,-4
8000ca64:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca68:	00 00       	add	r0,r0
8000ca6a:	0b e0       	ld.ub	r0,r5[0x6]

8000ca6c <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
8000ca6c:	eb cd 40 80 	pushm	r7,lr
8000ca70:	1a 97       	mov	r7,sp
8000ca72:	20 2d       	sub	sp,8
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
8000ca74:	30 08       	mov	r8,0
8000ca76:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
8000ca7a:	48 d8       	lddpc	r8,8000caac <sleepmgr_get_sleep_mode+0x40>
8000ca7c:	ef 48 ff fc 	st.w	r7[-4],r8

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000ca80:	c0 b8       	rjmp	8000ca96 <sleepmgr_get_sleep_mode+0x2a>
		lock_ptr++;
8000ca82:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ca86:	2f f8       	sub	r8,-1
8000ca88:	ef 48 ff fc 	st.w	r7[-4],r8
		sleep_mode++;
8000ca8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ca90:	2f f8       	sub	r8,-1
8000ca92:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000ca96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ca9a:	11 88       	ld.ub	r8,r8[0x0]
8000ca9c:	58 08       	cp.w	r8,0
8000ca9e:	cf 20       	breq	8000ca82 <sleepmgr_get_sleep_mode+0x16>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
8000caa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000caa4:	10 9c       	mov	r12,r8
8000caa6:	2f ed       	sub	sp,-8
8000caa8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000caac:	00 00       	add	r0,r0
8000caae:	0b e0       	ld.ub	r0,r5[0x6]

8000cab0 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
8000cab0:	eb cd 40 80 	pushm	r7,lr
8000cab4:	1a 97       	mov	r7,sp
8000cab6:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
8000cab8:	d3 03       	ssrf	0x10

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
8000caba:	f0 1f 00 0a 	mcall	8000cae0 <sleepmgr_enter_sleep+0x30>
8000cabe:	18 98       	mov	r8,r12
8000cac0:	ef 48 ff fc 	st.w	r7[-4],r8
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
8000cac4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cac8:	58 08       	cp.w	r8,0
8000caca:	c0 31       	brne	8000cad0 <sleepmgr_enter_sleep+0x20>
		cpu_irq_enable();
8000cacc:	d5 03       	csrf	0x10
		return;
8000cace:	c0 58       	rjmp	8000cad8 <sleepmgr_enter_sleep+0x28>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
8000cad0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cad4:	f0 1f 00 04 	mcall	8000cae4 <sleepmgr_enter_sleep+0x34>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000cad8:	2f fd       	sub	sp,-4
8000cada:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cade:	00 00       	add	r0,r0
8000cae0:	80 00       	ld.sh	r0,r0[0x0]
8000cae2:	ca 6c       	rcall	8000cc2e <main_vbus_action+0x1e>
8000cae4:	80 00       	ld.sh	r0,r0[0x0]
8000cae6:	ca 00       	breq	8000ca26 <sleepmgr_sleep+0x26>

8000cae8 <udc_include_vbus_monitoring>:
 *        // Start USB \n
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
8000cae8:	eb cd 40 80 	pushm	r7,lr
8000caec:	1a 97       	mov	r7,sp
	return udd_include_vbus_monitoring();
8000caee:	f0 1f 00 04 	mcall	8000cafc <udc_include_vbus_monitoring+0x14>
8000caf2:	18 98       	mov	r8,r12
}
8000caf4:	10 9c       	mov	r12,r8
8000caf6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cafa:	00 00       	add	r0,r0
8000cafc:	80 00       	ld.sh	r0,r0[0x0]
8000cafe:	85 d8       	st.w	r2[0x34],r8

8000cb00 <udc_attach>:
 * \warning If a VBus control is included in driver,
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
8000cb00:	eb cd 40 80 	pushm	r7,lr
8000cb04:	1a 97       	mov	r7,sp
	udd_attach();
8000cb06:	f0 1f 00 03 	mcall	8000cb10 <udc_attach+0x10>
}
8000cb0a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb0e:	00 00       	add	r0,r0
8000cb10:	80 00       	ld.sh	r0,r0[0x0]
8000cb12:	87 08       	st.w	r3[0x0],r8

8000cb14 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
8000cb14:	eb cd 40 80 	pushm	r7,lr
8000cb18:	1a 97       	mov	r7,sp
	udd_detach();
8000cb1a:	f0 1f 00 03 	mcall	8000cb24 <udc_detach+0x10>
}
8000cb1e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb22:	00 00       	add	r0,r0
8000cb24:	80 00       	ld.sh	r0,r0[0x0]
8000cb26:	87 b4       	st.w	r3[0x2c],r4

8000cb28 <main>:
static bool main_b_msc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
8000cb28:	eb cd 40 80 	pushm	r7,lr
8000cb2c:	1a 97       	mov	r7,sp
8000cb2e:	20 1d       	sub	sp,4
	uint8_t i = 0;
8000cb30:	30 08       	mov	r8,0
8000cb32:	ef 68 ff ff 	st.b	r7[-1],r8
	irq_initialize_vectors();
8000cb36:	f0 1f 00 25 	mcall	8000cbc8 <main+0xa0>
	cpu_irq_enable();
8000cb3a:	d5 03       	csrf	0x10

	// Initialize the sleep manager
	sleepmgr_init();
8000cb3c:	f0 1f 00 24 	mcall	8000cbcc <main+0xa4>

	sysclk_init();
8000cb40:	f0 1f 00 24 	mcall	8000cbd0 <main+0xa8>
	board_init();
8000cb44:	f0 1f 00 24 	mcall	8000cbd4 <main+0xac>

	ui_init();
8000cb48:	f0 1f 00 24 	mcall	8000cbd8 <main+0xb0>
	ui_powerdown();
8000cb4c:	f0 1f 00 24 	mcall	8000cbdc <main+0xb4>

	memories_initialization();
8000cb50:	f0 1f 00 24 	mcall	8000cbe0 <main+0xb8>

	// Initialize LCD
	et024006_Init( FOSC0, FOSC0 );
8000cb54:	e0 6b 1b 00 	mov	r11,6912
8000cb58:	ea 1b 00 b7 	orh	r11,0xb7
8000cb5c:	e0 6c 1b 00 	mov	r12,6912
8000cb60:	ea 1c 00 b7 	orh	r12,0xb7
8000cb64:	f0 1f 00 20 	mcall	8000cbe4 <main+0xbc>
	gpio_set_gpio_pin(ET024006DHU_BL_PIN);
8000cb68:	30 9c       	mov	r12,9
8000cb6a:	f0 1f 00 20 	mcall	8000cbe8 <main+0xc0>
	
	//et024006_PrintConsole("Welcome Eric", BLACK, -1);
	//clear_lcd
	et024006_DrawFilledRect(1, 1, ET024006_WIDTH, ET024006_HEIGHT, BLACK);
8000cb6e:	30 08       	mov	r8,0
8000cb70:	e0 69 00 f0 	mov	r9,240
8000cb74:	e0 6a 01 40 	mov	r10,320
8000cb78:	30 1b       	mov	r11,1
8000cb7a:	30 1c       	mov	r12,1
8000cb7c:	f0 1f 00 1c 	mcall	8000cbec <main+0xc4>
	
	// Initialize AES module
	aes_task();
8000cb80:	f0 1f 00 1c 	mcall	8000cbf0 <main+0xc8>

	// Start TC
	tc_task();
8000cb84:	f0 1f 00 1c 	mcall	8000cbf4 <main+0xcc>

	// Start USB stack to authorize VBus monitoring
	udc_start();
8000cb88:	f0 1f 00 1c 	mcall	8000cbf8 <main+0xd0>

	if (!udc_include_vbus_monitoring()) {
8000cb8c:	f0 1f 00 1c 	mcall	8000cbfc <main+0xd4>
8000cb90:	18 98       	mov	r8,r12
8000cb92:	ec 18 00 01 	eorl	r8,0x1
8000cb96:	5c 58       	castu.b	r8
8000cb98:	c0 60       	breq	8000cba4 <main+0x7c>
		// VBUS monitoring is not available on this product
		// thereby VBUS has to be considered as present
		main_vbus_action(true);
8000cb9a:	30 1c       	mov	r12,1
8000cb9c:	f0 1f 00 19 	mcall	8000cc00 <main+0xd8>
8000cba0:	c0 28       	rjmp	8000cba4 <main+0x7c>
				sleepmgr_enter_sleep();
			}
		}else{
			sleepmgr_enter_sleep();
		}
	}
8000cba2:	d7 03       	nop

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {

		if (main_b_msc_enable) {
8000cba4:	49 88       	lddpc	r8,8000cc04 <main+0xdc>
8000cba6:	11 88       	ld.ub	r8,r8[0x0]
8000cba8:	58 08       	cp.w	r8,0
8000cbaa:	c0 b0       	breq	8000cbc0 <main+0x98>
			if (!udi_msc_process_trans()) {
8000cbac:	f0 1f 00 17 	mcall	8000cc08 <main+0xe0>
8000cbb0:	18 98       	mov	r8,r12
8000cbb2:	ec 18 00 01 	eorl	r8,0x1
8000cbb6:	5c 58       	castu.b	r8
8000cbb8:	cf 50       	breq	8000cba2 <main+0x7a>
				sleepmgr_enter_sleep();
8000cbba:	f0 1f 00 15 	mcall	8000cc0c <main+0xe4>
			}
		}else{
			sleepmgr_enter_sleep();
		}
	}
8000cbbe:	cf 3b       	rjmp	8000cba4 <main+0x7c>
		if (main_b_msc_enable) {
			if (!udi_msc_process_trans()) {
				sleepmgr_enter_sleep();
			}
		}else{
			sleepmgr_enter_sleep();
8000cbc0:	f0 1f 00 13 	mcall	8000cc0c <main+0xe4>
		}
	}
8000cbc4:	cf 0b       	rjmp	8000cba4 <main+0x7c>
8000cbc6:	00 00       	add	r0,r0
8000cbc8:	80 00       	ld.sh	r0,r0[0x0]
8000cbca:	79 10       	ld.w	r0,r12[0x44]
8000cbcc:	80 00       	ld.sh	r0,r0[0x0]
8000cbce:	ca 28       	rjmp	8000cd12 <osc_get_rate+0x42>
8000cbd0:	80 00       	ld.sh	r0,r0[0x0]
8000cbd2:	a9 d4       	cbr	r4,0x9
8000cbd4:	80 00       	ld.sh	r0,r0[0x0]
8000cbd6:	2f c4       	sub	r4,-4
8000cbd8:	80 00       	ld.sh	r0,r0[0x0]
8000cbda:	ac 5c       	st.h	r6[0xa],r12
8000cbdc:	80 00       	ld.sh	r0,r0[0x0]
8000cbde:	ac 7c       	st.h	r6[0xe],r12
8000cbe0:	80 00       	ld.sh	r0,r0[0x0]
8000cbe2:	cd 88       	rjmp	8000cd92 <memories_initialization+0xa>
8000cbe4:	80 00       	ld.sh	r0,r0[0x0]
8000cbe6:	31 ac       	mov	r12,26
8000cbe8:	80 00       	ld.sh	r0,r0[0x0]
8000cbea:	77 4a       	ld.w	r10,r11[0x50]
8000cbec:	80 00       	ld.sh	r0,r0[0x0]
8000cbee:	32 24       	mov	r4,34
8000cbf0:	80 00       	ld.sh	r0,r0[0x0]
8000cbf2:	2d 5c       	sub	r12,-43
8000cbf4:	80 00       	ld.sh	r0,r0[0x0]
8000cbf6:	2c bc       	sub	r12,-53
8000cbf8:	80 00       	ld.sh	r0,r0[0x0]
8000cbfa:	bd d4       	cbr	r4,0x1d
8000cbfc:	80 00       	ld.sh	r0,r0[0x0]
8000cbfe:	ca e8       	rjmp	8000cd5a <sysclk_get_pbb_hz+0xa>
8000cc00:	80 00       	ld.sh	r0,r0[0x0]
8000cc02:	cc 10       	breq	8000cb84 <main+0x5c>
8000cc04:	00 00       	add	r0,r0
8000cc06:	07 08       	ld.w	r8,r3++
8000cc08:	80 00       	ld.sh	r0,r0[0x0]
8000cc0a:	b8 d0       	st.b	r12[0x5],r0
8000cc0c:	80 00       	ld.sh	r0,r0[0x0]
8000cc0e:	ca b0       	breq	8000cb64 <main+0x3c>

8000cc10 <main_vbus_action>:
}

void main_vbus_action(bool b_high)
{
8000cc10:	eb cd 40 80 	pushm	r7,lr
8000cc14:	1a 97       	mov	r7,sp
8000cc16:	20 1d       	sub	sp,4
8000cc18:	18 98       	mov	r8,r12
8000cc1a:	ef 68 ff fc 	st.b	r7[-4],r8
	if (b_high) {
8000cc1e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000cc22:	30 08       	mov	r8,0
8000cc24:	f0 09 18 00 	cp.b	r9,r8
8000cc28:	c0 40       	breq	8000cc30 <main_vbus_action+0x20>
		// Attach USB Device
		udc_attach();
8000cc2a:	f0 1f 00 05 	mcall	8000cc3c <main_vbus_action+0x2c>
8000cc2e:	c0 38       	rjmp	8000cc34 <main_vbus_action+0x24>
	} else {
		// VBUS not present
		udc_detach();
8000cc30:	f0 1f 00 04 	mcall	8000cc40 <main_vbus_action+0x30>
	}
}
8000cc34:	2f fd       	sub	sp,-4
8000cc36:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc3a:	00 00       	add	r0,r0
8000cc3c:	80 00       	ld.sh	r0,r0[0x0]
8000cc3e:	cb 00       	breq	8000cb9e <main+0x76>
8000cc40:	80 00       	ld.sh	r0,r0[0x0]
8000cc42:	cb 14       	brge	8000cba4 <main+0x7c>

8000cc44 <main_suspend_action>:

void main_suspend_action(void)
{
8000cc44:	eb cd 40 80 	pushm	r7,lr
8000cc48:	1a 97       	mov	r7,sp
	ui_powerdown();
8000cc4a:	f0 1f 00 03 	mcall	8000cc54 <main_suspend_action+0x10>
}
8000cc4e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc52:	00 00       	add	r0,r0
8000cc54:	80 00       	ld.sh	r0,r0[0x0]
8000cc56:	ac 7c       	st.h	r6[0xe],r12

8000cc58 <main_resume_action>:

void main_resume_action(void)
{
8000cc58:	eb cd 40 80 	pushm	r7,lr
8000cc5c:	1a 97       	mov	r7,sp
	ui_wakeup();
8000cc5e:	f0 1f 00 03 	mcall	8000cc68 <main_resume_action+0x10>
}
8000cc62:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc66:	00 00       	add	r0,r0
8000cc68:	80 00       	ld.sh	r0,r0[0x0]
8000cc6a:	ac 98       	st.b	r6[0x1],r8

8000cc6c <main_sof_action>:

void main_sof_action(void)
{
8000cc6c:	eb cd 40 80 	pushm	r7,lr
8000cc70:	1a 97       	mov	r7,sp
	if (!main_b_msc_enable)
8000cc72:	48 a8       	lddpc	r8,8000cc98 <main_sof_action+0x2c>
8000cc74:	11 88       	ld.ub	r8,r8[0x0]
8000cc76:	ec 18 00 01 	eorl	r8,0x1
8000cc7a:	5c 58       	castu.b	r8
8000cc7c:	c0 a1       	brne	8000cc90 <main_sof_action+0x24>
		return;
	ui_process(udd_get_frame_number());
8000cc7e:	f0 1f 00 08 	mcall	8000cc9c <main_sof_action+0x30>
8000cc82:	18 98       	mov	r8,r12
8000cc84:	5c 88       	casts.h	r8
8000cc86:	5c 78       	castu.h	r8
8000cc88:	10 9c       	mov	r12,r8
8000cc8a:	f0 1f 00 06 	mcall	8000cca0 <main_sof_action+0x34>
8000cc8e:	c0 28       	rjmp	8000cc92 <main_sof_action+0x26>
}

void main_sof_action(void)
{
	if (!main_b_msc_enable)
		return;
8000cc90:	d7 03       	nop
	ui_process(udd_get_frame_number());
}
8000cc92:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc96:	00 00       	add	r0,r0
8000cc98:	00 00       	add	r0,r0
8000cc9a:	07 08       	ld.w	r8,r3++
8000cc9c:	80 00       	ld.sh	r0,r0[0x0]
8000cc9e:	88 76       	ld.sh	r6,r4[0xe]
8000cca0:	80 00       	ld.sh	r0,r0[0x0]
8000cca2:	ac fc       	st.b	r6[0x7],r12

8000cca4 <main_msc_enable>:

bool main_msc_enable(void)
{
8000cca4:	eb cd 40 80 	pushm	r7,lr
8000cca8:	1a 97       	mov	r7,sp
	main_b_msc_enable = true;
8000ccaa:	48 49       	lddpc	r9,8000ccb8 <main_msc_enable+0x14>
8000ccac:	30 18       	mov	r8,1
8000ccae:	b2 88       	st.b	r9[0x0],r8
	return true;
8000ccb0:	30 18       	mov	r8,1
}
8000ccb2:	10 9c       	mov	r12,r8
8000ccb4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccb8:	00 00       	add	r0,r0
8000ccba:	07 08       	ld.w	r8,r3++

8000ccbc <main_msc_disable>:

void main_msc_disable(void)
{
8000ccbc:	eb cd 40 80 	pushm	r7,lr
8000ccc0:	1a 97       	mov	r7,sp
	main_b_msc_enable = false;
8000ccc2:	48 39       	lddpc	r9,8000cccc <main_msc_disable+0x10>
8000ccc4:	30 08       	mov	r8,0
8000ccc6:	b2 88       	st.b	r9[0x0],r8
}
8000ccc8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cccc:	00 00       	add	r0,r0
8000ccce:	07 08       	ld.w	r8,r3++

8000ccd0 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
8000ccd0:	eb cd 40 80 	pushm	r7,lr
8000ccd4:	1a 97       	mov	r7,sp
8000ccd6:	20 1d       	sub	sp,4
8000ccd8:	18 98       	mov	r8,r12
8000ccda:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000ccde:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000cce2:	58 18       	cp.w	r8,1
8000cce4:	c0 a0       	breq	8000ccf8 <osc_get_rate+0x28>
8000cce6:	58 28       	cp.w	r8,2
8000cce8:	c0 d0       	breq	8000cd02 <osc_get_rate+0x32>
8000ccea:	58 08       	cp.w	r8,0
8000ccec:	c0 e1       	brne	8000cd08 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000ccee:	e0 68 1b 00 	mov	r8,6912
8000ccf2:	ea 18 00 b7 	orh	r8,0xb7
8000ccf6:	c0 a8       	rjmp	8000cd0a <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000ccf8:	e0 68 44 00 	mov	r8,17408
8000ccfc:	ea 18 00 ac 	orh	r8,0xac
8000cd00:	c0 58       	rjmp	8000cd0a <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000cd02:	e0 68 80 00 	mov	r8,32768
8000cd06:	c0 28       	rjmp	8000cd0a <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000cd08:	30 08       	mov	r8,0
	}
}
8000cd0a:	10 9c       	mov	r12,r8
8000cd0c:	2f fd       	sub	sp,-4
8000cd0e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd12:	d7 03       	nop

8000cd14 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000cd14:	eb cd 40 80 	pushm	r7,lr
8000cd18:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000cd1a:	30 0c       	mov	r12,0
8000cd1c:	f0 1f 00 06 	mcall	8000cd34 <sysclk_get_main_hz+0x20>
8000cd20:	18 99       	mov	r9,r12
8000cd22:	12 98       	mov	r8,r9
8000cd24:	a3 68       	lsl	r8,0x2
8000cd26:	12 08       	add	r8,r9
8000cd28:	a1 78       	lsl	r8,0x1
8000cd2a:	12 08       	add	r8,r9
8000cd2c:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000cd2e:	10 9c       	mov	r12,r8
8000cd30:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd34:	80 00       	ld.sh	r0,r0[0x0]
8000cd36:	cc d0       	breq	8000ccd0 <osc_get_rate>

8000cd38 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000cd38:	eb cd 40 80 	pushm	r7,lr
8000cd3c:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000cd3e:	f0 1f 00 04 	mcall	8000cd4c <sysclk_get_cpu_hz+0x14>
8000cd42:	18 98       	mov	r8,r12
}
8000cd44:	10 9c       	mov	r12,r8
8000cd46:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd4a:	00 00       	add	r0,r0
8000cd4c:	80 00       	ld.sh	r0,r0[0x0]
8000cd4e:	cd 14       	brge	8000ccf0 <osc_get_rate+0x20>

8000cd50 <sysclk_get_pbb_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus B clock
 *
 * \return Frequency of the Peripheral Bus B clock, in Hz.
 */
static inline uint32_t sysclk_get_pbb_hz(void)
{
8000cd50:	eb cd 40 80 	pushm	r7,lr
8000cd54:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBB_DIV;
8000cd56:	f0 1f 00 04 	mcall	8000cd64 <sysclk_get_pbb_hz+0x14>
8000cd5a:	18 98       	mov	r8,r12
}
8000cd5c:	10 9c       	mov	r12,r8
8000cd5e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd62:	00 00       	add	r0,r0
8000cd64:	80 00       	ld.sh	r0,r0[0x0]
8000cd66:	cd 14       	brge	8000cd08 <osc_get_rate+0x38>

8000cd68 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000cd68:	eb cd 40 80 	pushm	r7,lr
8000cd6c:	1a 97       	mov	r7,sp
8000cd6e:	20 1d       	sub	sp,4
8000cd70:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000cd74:	ee fb ff fc 	ld.w	r11,r7[-4]
8000cd78:	30 1c       	mov	r12,1
8000cd7a:	f0 1f 00 03 	mcall	8000cd84 <sysclk_enable_hsb_module+0x1c>
}
8000cd7e:	2f fd       	sub	sp,-4
8000cd80:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd84:	80 00       	ld.sh	r0,r0[0x0]
8000cd86:	a8 ac       	st.b	r4[0x2],r12

8000cd88 <memories_initialization>:
# include "spi.h"
# include "conf_sd_mmc_spi.h"
#endif

void memories_initialization(void)
{
8000cd88:	eb cd 40 c0 	pushm	r6-r7,lr
8000cd8c:	1a 97       	mov	r7,sp
8000cd8e:	20 2d       	sub	sp,8
	union {
		unsigned long scfg;
		avr32_hmatrix_scfg_t SCFG;
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);
8000cd90:	30 0c       	mov	r12,0
8000cd92:	f0 1f 00 42 	mcall	8000ce98 <memories_initialization+0x110>

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
8000cd96:	fe 68 10 00 	mov	r8,-126976
8000cd9a:	71 08       	ld.w	r8,r8[0x40]
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000cd9c:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000cda0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cda4:	30 19       	mov	r9,1
8000cda6:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000cdaa:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000cdae:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000cdb2:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000cdb6:	f1 49 00 40 	st.w	r8[64],r9
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
8000cdba:	fe 68 10 00 	mov	r8,-126976
8000cdbe:	71 48       	ld.w	r8,r8[0x50]
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000cdc0:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000cdc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cdc8:	30 19       	mov	r9,1
8000cdca:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000cdce:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000cdd2:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000cdd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000cdda:	f1 49 00 50 	st.w	r8[80],r9
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
8000cdde:	fe 68 10 00 	mov	r8,-126976
8000cde2:	71 68       	ld.w	r8,r8[0x58]
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000cde4:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000cde8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cdec:	30 19       	mov	r9,1
8000cdee:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000cdf2:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000cdf6:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000cdfa:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000cdfe:	f1 49 00 58 	st.w	r8[88],r9
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
8000ce02:	fe 68 10 00 	mov	r8,-126976
8000ce06:	70 68       	ld.w	r8,r8[0x18]
		unsigned long                 mcfg;
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
8000ce08:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
8000ce0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ce10:	30 09       	mov	r9,0
8000ce12:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000ce16:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000ce1a:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_mcfg.mcfg;
8000ce1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000ce22:	91 69       	st.w	r8[0x18],r9
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
8000ce24:	fe 68 10 00 	mov	r8,-126976
8000ce28:	71 58       	ld.w	r8,r8[0x54]
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
8000ce2a:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
8000ce2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ce32:	30 69       	mov	r9,6
8000ce34:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
8000ce38:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000ce3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ce40:	30 29       	mov	r9,2
8000ce42:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000ce46:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000ce4a:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000ce4e:	ee f9 ff fc 	ld.w	r9,r7[-4]
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000ce52:	f1 49 00 54 	st.w	r8[84],r9
#endif

//#if ((defined SD_MMC_MCI_0_MEM) && (SD_MMC_MCI_0_MEM == ENABLE)) \
	//|| ((defined SD_MMC_MCI_1_MEM) && (SD_MMC_MCI_1_MEM == ENABLE))
#if ((defined (SD_MMC_MCI_0_MEM) || defined(SD_MMC_MCI_1_MEM) ) && (SD_MMC_MCI_0_MEM == ENABLE || SD_MMC_MCI_1_MEM == ENABLE))	
	sysclk_enable_pbb_module(SYSCLK_MCI);
8000ce56:	30 6c       	mov	r12,6
8000ce58:	f0 1f 00 10 	mcall	8000ce98 <memories_initialization+0x110>
	sysclk_enable_hsb_module(SYSCLK_DMACA);
8000ce5c:	30 7c       	mov	r12,7
8000ce5e:	f0 1f 00 10 	mcall	8000ce9c <memories_initialization+0x114>
#if SD_MMC_MCI_0_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_8BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000ce62:	f0 1f 00 10 	mcall	8000cea0 <memories_initialization+0x118>
8000ce66:	18 98       	mov	r8,r12
8000ce68:	10 96       	mov	r6,r8
8000ce6a:	f0 1f 00 0f 	mcall	8000cea4 <memories_initialization+0x11c>
8000ce6e:	18 98       	mov	r8,r12
8000ce70:	0c 9a       	mov	r10,r6
8000ce72:	10 9b       	mov	r11,r8
8000ce74:	30 0c       	mov	r12,0
8000ce76:	f0 1f 00 0d 	mcall	8000cea8 <memories_initialization+0x120>
#endif
#if SD_MMC_MCI_1_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_4BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000ce7a:	f0 1f 00 0a 	mcall	8000cea0 <memories_initialization+0x118>
8000ce7e:	18 98       	mov	r8,r12
8000ce80:	10 96       	mov	r6,r8
8000ce82:	f0 1f 00 09 	mcall	8000cea4 <memories_initialization+0x11c>
8000ce86:	18 98       	mov	r8,r12
8000ce88:	0c 9a       	mov	r10,r6
8000ce8a:	10 9b       	mov	r11,r8
8000ce8c:	30 1c       	mov	r12,1
8000ce8e:	f0 1f 00 07 	mcall	8000cea8 <memories_initialization+0x120>

	// Initialize SD/MMC with SPI PB clock.
	sd_mmc_spi_init(spiOptions,sysclk_get_pba_hz());
#endif  // SD_MMC_SPI_MEM == ENABLE

}
8000ce92:	2f ed       	sub	sp,-8
8000ce94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ce98:	80 00       	ld.sh	r0,r0[0x0]
8000ce9a:	a9 20       	st.d	r4++,r0
8000ce9c:	80 00       	ld.sh	r0,r0[0x0]
8000ce9e:	cd 68       	rjmp	8000d04a <__avr32_udiv64+0x19e>
8000cea0:	80 00       	ld.sh	r0,r0[0x0]
8000cea2:	cd 38       	rjmp	8000d048 <__avr32_udiv64+0x19c>
8000cea4:	80 00       	ld.sh	r0,r0[0x0]
8000cea6:	cd 50       	breq	8000ce50 <memories_initialization+0xc8>
8000cea8:	80 00       	ld.sh	r0,r0[0x0]
8000ceaa:	52 9c       	stdsp	sp[0xa4],r12

8000ceac <__avr32_udiv64>:
8000ceac:	d4 31       	pushm	r0-r7,lr
8000ceae:	1a 97       	mov	r7,sp
8000ceb0:	20 2d       	sub	sp,8
8000ceb2:	10 9e       	mov	lr,r8
8000ceb4:	12 95       	mov	r5,r9
8000ceb6:	14 96       	mov	r6,r10
8000ceb8:	58 09       	cp.w	r9,0
8000ceba:	c4 91       	brne	8000cf4c <__avr32_udiv64+0xa0>
8000cebc:	16 38       	cp.w	r8,r11
8000cebe:	e0 88 00 57 	brls	8000cf6c <__avr32_udiv64+0xc0>
8000cec2:	f0 08 12 00 	clz	r8,r8
8000cec6:	c0 d0       	breq	8000cee0 <__avr32_udiv64+0x34>
8000cec8:	f6 08 09 4b 	lsl	r11,r11,r8
8000cecc:	f0 09 11 20 	rsub	r9,r8,32
8000ced0:	fc 08 09 4e 	lsl	lr,lr,r8
8000ced4:	f4 09 0a 49 	lsr	r9,r10,r9
8000ced8:	f4 08 09 46 	lsl	r6,r10,r8
8000cedc:	f3 eb 10 0b 	or	r11,r9,r11
8000cee0:	fc 05 16 10 	lsr	r5,lr,0x10
8000cee4:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
8000cee8:	f6 05 0d 0a 	divu	r10,r11,r5
8000ceec:	ec 08 16 10 	lsr	r8,r6,0x10
8000cef0:	14 99       	mov	r9,r10
8000cef2:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000cef6:	b9 3a       	mul	r10,r12
8000cef8:	10 3a       	cp.w	r10,r8
8000cefa:	e0 88 00 0c 	brls	8000cf12 <__avr32_udiv64+0x66>
8000cefe:	20 19       	sub	r9,1
8000cf00:	1c 08       	add	r8,lr
8000cf02:	10 3e       	cp.w	lr,r8
8000cf04:	e0 8b 00 07 	brhi	8000cf12 <__avr32_udiv64+0x66>
8000cf08:	10 3a       	cp.w	r10,r8
8000cf0a:	f7 b9 0b 01 	subhi	r9,1
8000cf0e:	f1 de eb 08 	addhi	r8,r8,lr
8000cf12:	f0 0a 01 0b 	sub	r11,r8,r10
8000cf16:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000cf1a:	f6 05 0d 0a 	divu	r10,r11,r5
8000cf1e:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000cf22:	14 98       	mov	r8,r10
8000cf24:	f4 0c 02 4c 	mul	r12,r10,r12
8000cf28:	0c 3c       	cp.w	r12,r6
8000cf2a:	e0 88 00 0a 	brls	8000cf3e <__avr32_udiv64+0x92>
8000cf2e:	20 18       	sub	r8,1
8000cf30:	1c 06       	add	r6,lr
8000cf32:	0c 3e       	cp.w	lr,r6
8000cf34:	e0 8b 00 05 	brhi	8000cf3e <__avr32_udiv64+0x92>
8000cf38:	0c 3c       	cp.w	r12,r6
8000cf3a:	f7 b8 0b 01 	subhi	r8,1
8000cf3e:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000cf42:	30 0c       	mov	r12,0
8000cf44:	16 9a       	mov	r10,r11
8000cf46:	18 9b       	mov	r11,r12
8000cf48:	2f ed       	sub	sp,-8
8000cf4a:	d8 32       	popm	r0-r7,pc
8000cf4c:	16 39       	cp.w	r9,r11
8000cf4e:	e0 8b 00 51 	brhi	8000cff0 <__avr32_udiv64+0x144>
8000cf52:	f2 0c 12 00 	clz	r12,r9
8000cf56:	c5 31       	brne	8000cffc <__avr32_udiv64+0x150>
8000cf58:	14 38       	cp.w	r8,r10
8000cf5a:	5f 89       	srls	r9
8000cf5c:	16 35       	cp.w	r5,r11
8000cf5e:	5f 38       	srlo	r8
8000cf60:	10 49       	or	r9,r8
8000cf62:	f8 09 18 00 	cp.b	r9,r12
8000cf66:	c4 50       	breq	8000cff0 <__avr32_udiv64+0x144>
8000cf68:	30 1b       	mov	r11,1
8000cf6a:	c4 58       	rjmp	8000cff4 <__avr32_udiv64+0x148>
8000cf6c:	58 08       	cp.w	r8,0
8000cf6e:	c0 51       	brne	8000cf78 <__avr32_udiv64+0xcc>
8000cf70:	30 19       	mov	r9,1
8000cf72:	f2 08 0d 08 	divu	r8,r9,r8
8000cf76:	10 9e       	mov	lr,r8
8000cf78:	fc 08 12 00 	clz	r8,lr
8000cf7c:	e0 81 00 91 	brne	8000d09e <__avr32_udiv64+0x1f2>
8000cf80:	1c 1b       	sub	r11,lr
8000cf82:	fc 05 16 10 	lsr	r5,lr,0x10
8000cf86:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000cf8a:	30 1c       	mov	r12,1
8000cf8c:	f6 05 0d 0a 	divu	r10,r11,r5
8000cf90:	ec 08 16 10 	lsr	r8,r6,0x10
8000cf94:	f4 09 02 43 	mul	r3,r10,r9
8000cf98:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000cf9c:	14 9b       	mov	r11,r10
8000cf9e:	10 33       	cp.w	r3,r8
8000cfa0:	e0 88 00 0c 	brls	8000cfb8 <__avr32_udiv64+0x10c>
8000cfa4:	20 1b       	sub	r11,1
8000cfa6:	1c 08       	add	r8,lr
8000cfa8:	10 3e       	cp.w	lr,r8
8000cfaa:	e0 8b 00 07 	brhi	8000cfb8 <__avr32_udiv64+0x10c>
8000cfae:	10 33       	cp.w	r3,r8
8000cfb0:	f7 bb 0b 01 	subhi	r11,1
8000cfb4:	f1 de eb 08 	addhi	r8,r8,lr
8000cfb8:	f0 03 01 03 	sub	r3,r8,r3
8000cfbc:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000cfc0:	e6 05 0d 02 	divu	r2,r3,r5
8000cfc4:	ed e3 11 06 	or	r6,r6,r3<<0x10
8000cfc8:	04 98       	mov	r8,r2
8000cfca:	e4 09 02 49 	mul	r9,r2,r9
8000cfce:	0c 39       	cp.w	r9,r6
8000cfd0:	e0 88 00 0a 	brls	8000cfe4 <__avr32_udiv64+0x138>
8000cfd4:	20 18       	sub	r8,1
8000cfd6:	1c 06       	add	r6,lr
8000cfd8:	0c 3e       	cp.w	lr,r6
8000cfda:	e0 8b 00 05 	brhi	8000cfe4 <__avr32_udiv64+0x138>
8000cfde:	0c 39       	cp.w	r9,r6
8000cfe0:	f7 b8 0b 01 	subhi	r8,1
8000cfe4:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000cfe8:	16 9a       	mov	r10,r11
8000cfea:	18 9b       	mov	r11,r12
8000cfec:	2f ed       	sub	sp,-8
8000cfee:	d8 32       	popm	r0-r7,pc
8000cff0:	30 0b       	mov	r11,0
8000cff2:	16 9c       	mov	r12,r11
8000cff4:	16 9a       	mov	r10,r11
8000cff6:	18 9b       	mov	r11,r12
8000cff8:	2f ed       	sub	sp,-8
8000cffa:	d8 32       	popm	r0-r7,pc
8000cffc:	f2 0c 09 45 	lsl	r5,r9,r12
8000d000:	f8 0e 11 20 	rsub	lr,r12,32
8000d004:	f0 0c 09 43 	lsl	r3,r8,r12
8000d008:	f4 0e 0a 46 	lsr	r6,r10,lr
8000d00c:	f0 0e 0a 48 	lsr	r8,r8,lr
8000d010:	f6 0e 0a 4e 	lsr	lr,r11,lr
8000d014:	0a 48       	or	r8,r5
8000d016:	f0 01 16 10 	lsr	r1,r8,0x10
8000d01a:	fc 01 0d 04 	divu	r4,lr,r1
8000d01e:	ee e5 ff f8 	st.d	r7[-8],r4
8000d022:	f6 0c 09 49 	lsl	r9,r11,r12
8000d026:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000d02a:	ed e9 10 09 	or	r9,r6,r9
8000d02e:	08 96       	mov	r6,r4
8000d030:	f2 0e 16 10 	lsr	lr,r9,0x10
8000d034:	ee f4 ff f8 	ld.w	r4,r7[-8]
8000d038:	ec 05 02 4b 	mul	r11,r6,r5
8000d03c:	fd e4 11 0e 	or	lr,lr,r4<<0x10
8000d040:	1c 3b       	cp.w	r11,lr
8000d042:	e0 88 00 07 	brls	8000d050 <__avr32_udiv64+0x1a4>
8000d046:	20 16       	sub	r6,1
8000d048:	10 0e       	add	lr,r8
8000d04a:	1c 38       	cp.w	r8,lr
8000d04c:	e0 88 00 6d 	brls	8000d126 <__avr32_udiv64+0x27a>
8000d050:	16 1e       	sub	lr,r11
8000d052:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000d056:	fc 01 0d 00 	divu	r0,lr,r1
8000d05a:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000d05e:	00 9b       	mov	r11,r0
8000d060:	e0 05 02 4e 	mul	lr,r0,r5
8000d064:	12 3e       	cp.w	lr,r9
8000d066:	e0 88 00 07 	brls	8000d074 <__avr32_udiv64+0x1c8>
8000d06a:	20 1b       	sub	r11,1
8000d06c:	10 09       	add	r9,r8
8000d06e:	12 38       	cp.w	r8,r9
8000d070:	e0 88 00 55 	brls	8000d11a <__avr32_udiv64+0x26e>
8000d074:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
8000d078:	1c 19       	sub	r9,lr
8000d07a:	f6 03 06 42 	mulu.d	r2,r11,r3
8000d07e:	06 39       	cp.w	r9,r3
8000d080:	c0 93       	brcs	8000d092 <__avr32_udiv64+0x1e6>
8000d082:	5f 09       	sreq	r9
8000d084:	f4 0c 09 4c 	lsl	r12,r10,r12
8000d088:	04 3c       	cp.w	r12,r2
8000d08a:	5f 38       	srlo	r8
8000d08c:	f3 e8 00 08 	and	r8,r9,r8
8000d090:	c0 20       	breq	8000d094 <__avr32_udiv64+0x1e8>
8000d092:	20 1b       	sub	r11,1
8000d094:	30 0c       	mov	r12,0
8000d096:	16 9a       	mov	r10,r11
8000d098:	18 9b       	mov	r11,r12
8000d09a:	2f ed       	sub	sp,-8
8000d09c:	d8 32       	popm	r0-r7,pc
8000d09e:	f6 08 09 49 	lsl	r9,r11,r8
8000d0a2:	fc 08 09 4e 	lsl	lr,lr,r8
8000d0a6:	f0 01 11 20 	rsub	r1,r8,32
8000d0aa:	fc 05 16 10 	lsr	r5,lr,0x10
8000d0ae:	f4 01 0a 42 	lsr	r2,r10,r1
8000d0b2:	f6 01 0a 41 	lsr	r1,r11,r1
8000d0b6:	12 42       	or	r2,r9
8000d0b8:	e2 05 0d 00 	divu	r0,r1,r5
8000d0bc:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000d0c0:	e4 06 16 10 	lsr	r6,r2,0x10
8000d0c4:	00 93       	mov	r3,r0
8000d0c6:	ed e1 11 06 	or	r6,r6,r1<<0x10
8000d0ca:	e0 09 02 4c 	mul	r12,r0,r9
8000d0ce:	0c 3c       	cp.w	r12,r6
8000d0d0:	e0 88 00 07 	brls	8000d0de <__avr32_udiv64+0x232>
8000d0d4:	20 13       	sub	r3,1
8000d0d6:	1c 06       	add	r6,lr
8000d0d8:	0c 3e       	cp.w	lr,r6
8000d0da:	e0 88 00 2c 	brls	8000d132 <__avr32_udiv64+0x286>
8000d0de:	ec 0c 01 01 	sub	r1,r6,r12
8000d0e2:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000d0e6:	e2 05 0d 00 	divu	r0,r1,r5
8000d0ea:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000d0ee:	00 9c       	mov	r12,r0
8000d0f0:	e0 09 02 41 	mul	r1,r0,r9
8000d0f4:	16 31       	cp.w	r1,r11
8000d0f6:	e0 88 00 0c 	brls	8000d10e <__avr32_udiv64+0x262>
8000d0fa:	20 1c       	sub	r12,1
8000d0fc:	1c 0b       	add	r11,lr
8000d0fe:	16 3e       	cp.w	lr,r11
8000d100:	e0 8b 00 07 	brhi	8000d10e <__avr32_udiv64+0x262>
8000d104:	16 31       	cp.w	r1,r11
8000d106:	f7 bc 0b 01 	subhi	r12,1
8000d10a:	f7 de eb 0b 	addhi	r11,r11,lr
8000d10e:	f4 08 09 46 	lsl	r6,r10,r8
8000d112:	02 1b       	sub	r11,r1
8000d114:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
8000d118:	c3 ab       	rjmp	8000cf8c <__avr32_udiv64+0xe0>
8000d11a:	12 3e       	cp.w	lr,r9
8000d11c:	f3 d8 eb 09 	addhi	r9,r9,r8
8000d120:	f7 bb 0b 01 	subhi	r11,1
8000d124:	ca 8b       	rjmp	8000d074 <__avr32_udiv64+0x1c8>
8000d126:	1c 3b       	cp.w	r11,lr
8000d128:	f7 b6 0b 01 	subhi	r6,1
8000d12c:	fd d8 eb 0e 	addhi	lr,lr,r8
8000d130:	c9 0b       	rjmp	8000d050 <__avr32_udiv64+0x1a4>
8000d132:	0c 3c       	cp.w	r12,r6
8000d134:	f7 b3 0b 01 	subhi	r3,1
8000d138:	ed de eb 06 	addhi	r6,r6,lr
8000d13c:	cd 1b       	rjmp	8000d0de <__avr32_udiv64+0x232>

8000d13e <memcpy>:
8000d13e:	58 8a       	cp.w	r10,8
8000d140:	c2 f5       	brlt	8000d19e <memcpy+0x60>
8000d142:	f9 eb 10 09 	or	r9,r12,r11
8000d146:	e2 19 00 03 	andl	r9,0x3,COH
8000d14a:	e0 81 00 97 	brne	8000d278 <memcpy+0x13a>
8000d14e:	e0 4a 00 20 	cp.w	r10,32
8000d152:	c3 b4       	brge	8000d1c8 <memcpy+0x8a>
8000d154:	f4 08 14 02 	asr	r8,r10,0x2
8000d158:	f0 09 11 08 	rsub	r9,r8,8
8000d15c:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000d160:	76 69       	ld.w	r9,r11[0x18]
8000d162:	99 69       	st.w	r12[0x18],r9
8000d164:	76 59       	ld.w	r9,r11[0x14]
8000d166:	99 59       	st.w	r12[0x14],r9
8000d168:	76 49       	ld.w	r9,r11[0x10]
8000d16a:	99 49       	st.w	r12[0x10],r9
8000d16c:	76 39       	ld.w	r9,r11[0xc]
8000d16e:	99 39       	st.w	r12[0xc],r9
8000d170:	76 29       	ld.w	r9,r11[0x8]
8000d172:	99 29       	st.w	r12[0x8],r9
8000d174:	76 19       	ld.w	r9,r11[0x4]
8000d176:	99 19       	st.w	r12[0x4],r9
8000d178:	76 09       	ld.w	r9,r11[0x0]
8000d17a:	99 09       	st.w	r12[0x0],r9
8000d17c:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000d180:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000d184:	e0 1a 00 03 	andl	r10,0x3
8000d188:	f4 0a 11 04 	rsub	r10,r10,4
8000d18c:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000d190:	17 a9       	ld.ub	r9,r11[0x2]
8000d192:	b0 a9       	st.b	r8[0x2],r9
8000d194:	17 99       	ld.ub	r9,r11[0x1]
8000d196:	b0 99       	st.b	r8[0x1],r9
8000d198:	17 89       	ld.ub	r9,r11[0x0]
8000d19a:	b0 89       	st.b	r8[0x0],r9
8000d19c:	5e fc       	retal	r12
8000d19e:	f4 0a 11 09 	rsub	r10,r10,9
8000d1a2:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000d1a6:	17 f9       	ld.ub	r9,r11[0x7]
8000d1a8:	b8 f9       	st.b	r12[0x7],r9
8000d1aa:	17 e9       	ld.ub	r9,r11[0x6]
8000d1ac:	b8 e9       	st.b	r12[0x6],r9
8000d1ae:	17 d9       	ld.ub	r9,r11[0x5]
8000d1b0:	b8 d9       	st.b	r12[0x5],r9
8000d1b2:	17 c9       	ld.ub	r9,r11[0x4]
8000d1b4:	b8 c9       	st.b	r12[0x4],r9
8000d1b6:	17 b9       	ld.ub	r9,r11[0x3]
8000d1b8:	b8 b9       	st.b	r12[0x3],r9
8000d1ba:	17 a9       	ld.ub	r9,r11[0x2]
8000d1bc:	b8 a9       	st.b	r12[0x2],r9
8000d1be:	17 99       	ld.ub	r9,r11[0x1]
8000d1c0:	b8 99       	st.b	r12[0x1],r9
8000d1c2:	17 89       	ld.ub	r9,r11[0x0]
8000d1c4:	b8 89       	st.b	r12[0x0],r9
8000d1c6:	5e fc       	retal	r12
8000d1c8:	eb cd 40 c0 	pushm	r6-r7,lr
8000d1cc:	18 99       	mov	r9,r12
8000d1ce:	22 0a       	sub	r10,32
8000d1d0:	b7 07       	ld.d	r6,r11++
8000d1d2:	b3 26       	st.d	r9++,r6
8000d1d4:	b7 07       	ld.d	r6,r11++
8000d1d6:	b3 26       	st.d	r9++,r6
8000d1d8:	b7 07       	ld.d	r6,r11++
8000d1da:	b3 26       	st.d	r9++,r6
8000d1dc:	b7 07       	ld.d	r6,r11++
8000d1de:	b3 26       	st.d	r9++,r6
8000d1e0:	22 0a       	sub	r10,32
8000d1e2:	cf 74       	brge	8000d1d0 <memcpy+0x92>
8000d1e4:	2f 0a       	sub	r10,-16
8000d1e6:	c0 65       	brlt	8000d1f2 <memcpy+0xb4>
8000d1e8:	b7 07       	ld.d	r6,r11++
8000d1ea:	b3 26       	st.d	r9++,r6
8000d1ec:	b7 07       	ld.d	r6,r11++
8000d1ee:	b3 26       	st.d	r9++,r6
8000d1f0:	21 0a       	sub	r10,16
8000d1f2:	5c 3a       	neg	r10
8000d1f4:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000d1f8:	d7 03       	nop
8000d1fa:	d7 03       	nop
8000d1fc:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000d200:	f3 66 00 0e 	st.b	r9[14],r6
8000d204:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000d208:	f3 66 00 0d 	st.b	r9[13],r6
8000d20c:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000d210:	f3 66 00 0c 	st.b	r9[12],r6
8000d214:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000d218:	f3 66 00 0b 	st.b	r9[11],r6
8000d21c:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000d220:	f3 66 00 0a 	st.b	r9[10],r6
8000d224:	f7 36 00 09 	ld.ub	r6,r11[9]
8000d228:	f3 66 00 09 	st.b	r9[9],r6
8000d22c:	f7 36 00 08 	ld.ub	r6,r11[8]
8000d230:	f3 66 00 08 	st.b	r9[8],r6
8000d234:	f7 36 00 07 	ld.ub	r6,r11[7]
8000d238:	f3 66 00 07 	st.b	r9[7],r6
8000d23c:	f7 36 00 06 	ld.ub	r6,r11[6]
8000d240:	f3 66 00 06 	st.b	r9[6],r6
8000d244:	f7 36 00 05 	ld.ub	r6,r11[5]
8000d248:	f3 66 00 05 	st.b	r9[5],r6
8000d24c:	f7 36 00 04 	ld.ub	r6,r11[4]
8000d250:	f3 66 00 04 	st.b	r9[4],r6
8000d254:	f7 36 00 03 	ld.ub	r6,r11[3]
8000d258:	f3 66 00 03 	st.b	r9[3],r6
8000d25c:	f7 36 00 02 	ld.ub	r6,r11[2]
8000d260:	f3 66 00 02 	st.b	r9[2],r6
8000d264:	f7 36 00 01 	ld.ub	r6,r11[1]
8000d268:	f3 66 00 01 	st.b	r9[1],r6
8000d26c:	f7 36 00 00 	ld.ub	r6,r11[0]
8000d270:	f3 66 00 00 	st.b	r9[0],r6
8000d274:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d278:	20 1a       	sub	r10,1
8000d27a:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000d27e:	f8 0a 0b 09 	st.b	r12[r10],r9
8000d282:	cf b1       	brne	8000d278 <memcpy+0x13a>
8000d284:	5e fc       	retal	r12

8000d286 <memset>:
8000d286:	18 98       	mov	r8,r12
8000d288:	c0 38       	rjmp	8000d28e <memset+0x8>
8000d28a:	10 cb       	st.b	r8++,r11
8000d28c:	20 1a       	sub	r10,1
8000d28e:	58 0a       	cp.w	r10,0
8000d290:	cf d1       	brne	8000d28a <memset+0x4>
8000d292:	5e fc       	retal	r12

Disassembly of section .exception:

8000d400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000d400:	c0 08       	rjmp	8000d400 <_evba>
	...

8000d404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000d404:	c0 08       	rjmp	8000d404 <_handle_TLB_Multiple_Hit>
	...

8000d408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000d408:	c0 08       	rjmp	8000d408 <_handle_Bus_Error_Data_Fetch>
	...

8000d40c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000d40c:	c0 08       	rjmp	8000d40c <_handle_Bus_Error_Instruction_Fetch>
	...

8000d410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000d410:	c0 08       	rjmp	8000d410 <_handle_NMI>
	...

8000d414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000d414:	c0 08       	rjmp	8000d414 <_handle_Instruction_Address>
	...

8000d418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000d418:	c0 08       	rjmp	8000d418 <_handle_ITLB_Protection>
	...

8000d41c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000d41c:	c0 08       	rjmp	8000d41c <_handle_Breakpoint>
	...

8000d420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000d420:	c0 08       	rjmp	8000d420 <_handle_Illegal_Opcode>
	...

8000d424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000d424:	c0 08       	rjmp	8000d424 <_handle_Unimplemented_Instruction>
	...

8000d428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000d428:	c0 08       	rjmp	8000d428 <_handle_Privilege_Violation>
	...

8000d42c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000d42c:	c0 08       	rjmp	8000d42c <_handle_Floating_Point>
	...

8000d430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000d430:	c0 08       	rjmp	8000d430 <_handle_Coprocessor_Absent>
	...

8000d434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000d434:	c0 08       	rjmp	8000d434 <_handle_Data_Address_Read>
	...

8000d438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000d438:	c0 08       	rjmp	8000d438 <_handle_Data_Address_Write>
	...

8000d43c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000d43c:	c0 08       	rjmp	8000d43c <_handle_DTLB_Protection_Read>
	...

8000d440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000d440:	c0 08       	rjmp	8000d440 <_handle_DTLB_Protection_Write>
	...

8000d444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000d444:	c0 08       	rjmp	8000d444 <_handle_DTLB_Modified>
	...

8000d450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000d450:	c0 08       	rjmp	8000d450 <_handle_ITLB_Miss>
	...

8000d460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000d460:	c0 08       	rjmp	8000d460 <_handle_DTLB_Miss_Read>
	...

8000d470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000d470:	c0 08       	rjmp	8000d470 <_handle_DTLB_Miss_Write>
	...

8000d500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000d500:	c0 08       	rjmp	8000d500 <_handle_Supervisor_Call>
8000d502:	d7 03       	nop

8000d504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d504:	30 0c       	mov	r12,0
8000d506:	fe b0 d1 c3 	rcall	8000788c <_get_interrupt_handler>
8000d50a:	58 0c       	cp.w	r12,0
8000d50c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d510:	d6 03       	rete

8000d512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d512:	30 1c       	mov	r12,1
8000d514:	fe b0 d1 bc 	rcall	8000788c <_get_interrupt_handler>
8000d518:	58 0c       	cp.w	r12,0
8000d51a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d51e:	d6 03       	rete

8000d520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d520:	30 2c       	mov	r12,2
8000d522:	fe b0 d1 b5 	rcall	8000788c <_get_interrupt_handler>
8000d526:	58 0c       	cp.w	r12,0
8000d528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d52c:	d6 03       	rete

8000d52e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d52e:	30 3c       	mov	r12,3
8000d530:	fe b0 d1 ae 	rcall	8000788c <_get_interrupt_handler>
8000d534:	58 0c       	cp.w	r12,0
8000d536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d53a:	d6 03       	rete
8000d53c:	d7 03       	nop
8000d53e:	d7 03       	nop
8000d540:	d7 03       	nop
8000d542:	d7 03       	nop
8000d544:	d7 03       	nop
8000d546:	d7 03       	nop
8000d548:	d7 03       	nop
8000d54a:	d7 03       	nop
8000d54c:	d7 03       	nop
8000d54e:	d7 03       	nop
8000d550:	d7 03       	nop
8000d552:	d7 03       	nop
8000d554:	d7 03       	nop
8000d556:	d7 03       	nop
8000d558:	d7 03       	nop
8000d55a:	d7 03       	nop
8000d55c:	d7 03       	nop
8000d55e:	d7 03       	nop
8000d560:	d7 03       	nop
8000d562:	d7 03       	nop
8000d564:	d7 03       	nop
8000d566:	d7 03       	nop
8000d568:	d7 03       	nop
8000d56a:	d7 03       	nop
8000d56c:	d7 03       	nop
8000d56e:	d7 03       	nop
8000d570:	d7 03       	nop
8000d572:	d7 03       	nop
8000d574:	d7 03       	nop
8000d576:	d7 03       	nop
8000d578:	d7 03       	nop
8000d57a:	d7 03       	nop
8000d57c:	d7 03       	nop
8000d57e:	d7 03       	nop
8000d580:	d7 03       	nop
8000d582:	d7 03       	nop
8000d584:	d7 03       	nop
8000d586:	d7 03       	nop
8000d588:	d7 03       	nop
8000d58a:	d7 03       	nop
8000d58c:	d7 03       	nop
8000d58e:	d7 03       	nop
8000d590:	d7 03       	nop
8000d592:	d7 03       	nop
8000d594:	d7 03       	nop
8000d596:	d7 03       	nop
8000d598:	d7 03       	nop
8000d59a:	d7 03       	nop
8000d59c:	d7 03       	nop
8000d59e:	d7 03       	nop
8000d5a0:	d7 03       	nop
8000d5a2:	d7 03       	nop
8000d5a4:	d7 03       	nop
8000d5a6:	d7 03       	nop
8000d5a8:	d7 03       	nop
8000d5aa:	d7 03       	nop
8000d5ac:	d7 03       	nop
8000d5ae:	d7 03       	nop
8000d5b0:	d7 03       	nop
8000d5b2:	d7 03       	nop
8000d5b4:	d7 03       	nop
8000d5b6:	d7 03       	nop
8000d5b8:	d7 03       	nop
8000d5ba:	d7 03       	nop
8000d5bc:	d7 03       	nop
8000d5be:	d7 03       	nop
8000d5c0:	d7 03       	nop
8000d5c2:	d7 03       	nop
8000d5c4:	d7 03       	nop
8000d5c6:	d7 03       	nop
8000d5c8:	d7 03       	nop
8000d5ca:	d7 03       	nop
8000d5cc:	d7 03       	nop
8000d5ce:	d7 03       	nop
8000d5d0:	d7 03       	nop
8000d5d2:	d7 03       	nop
8000d5d4:	d7 03       	nop
8000d5d6:	d7 03       	nop
8000d5d8:	d7 03       	nop
8000d5da:	d7 03       	nop
8000d5dc:	d7 03       	nop
8000d5de:	d7 03       	nop
8000d5e0:	d7 03       	nop
8000d5e2:	d7 03       	nop
8000d5e4:	d7 03       	nop
8000d5e6:	d7 03       	nop
8000d5e8:	d7 03       	nop
8000d5ea:	d7 03       	nop
8000d5ec:	d7 03       	nop
8000d5ee:	d7 03       	nop
8000d5f0:	d7 03       	nop
8000d5f2:	d7 03       	nop
8000d5f4:	d7 03       	nop
8000d5f6:	d7 03       	nop
8000d5f8:	d7 03       	nop
8000d5fa:	d7 03       	nop
8000d5fc:	d7 03       	nop
8000d5fe:	d7 03       	nop
