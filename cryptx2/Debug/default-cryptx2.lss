
default-cryptx2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c7d8  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000e800  8000e800  0000ec00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000004c0  8000ea00  8000ea00  0000ee00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         0000023c  00000008  8000eec0  0000f408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  00000244  8000f0fc  0000f644  2**0
                  ALLOC
  8 .bss          00000d80  00000248  00000248  00000000  2**2
                  ALLOC
  9 .heap         0000e038  00000fc8  00000fc8  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000f644  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001368  00000000  00000000  0000f678  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00002a65  00000000  00000000  000109e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00025ee6  00000000  00000000  00013445  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000035d4  00000000  00000000  0003932b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007640  00000000  00000000  0003c8ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003b44  00000000  00000000  00043f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a0fa  00000000  00000000  00047a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00005d04  00000000  00000000  00051b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .flash_nvram  000000c4  8003fe00  8000f0fc  0000fa00  2**2
                  ALLOC
 21 .debug_ranges 00001328  00000000  00000000  00057888  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	b6 e8       	st.b	r11[0x6],r8

Disassembly of section .text:

80002008 <crcInit>:
 * Returns:		None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 3d       	sub	sp,12


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
80002010:	30 08       	mov	r8,0
80002012:	ef 48 ff f8 	st.w	r7[-8],r8
80002016:	c3 78       	rjmp	80002084 <crcInit+0x7c>
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
80002018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000201c:	5c 88       	casts.h	r8
8000201e:	a9 68       	lsl	r8,0x8
80002020:	ef 58 ff f6 	st.h	r7[-10],r8

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
80002024:	30 88       	mov	r8,8
80002026:	ef 68 ff ff 	st.b	r7[-1],r8
8000202a:	c1 b8       	rjmp	80002060 <crcInit+0x58>
        {
            /*
             * Try to divide the current data bit.
             */			
            if (remainder & TOPBIT)
8000202c:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80002030:	30 08       	mov	r8,0
80002032:	f0 09 19 00 	cp.h	r9,r8
80002036:	c0 b4       	brge	8000204c <crcInit+0x44>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
80002038:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000203c:	a1 78       	lsl	r8,0x1
8000203e:	5c 88       	casts.h	r8
80002040:	ec 18 10 21 	eorl	r8,0x1021
80002044:	5c 88       	casts.h	r8
80002046:	ef 58 ff f6 	st.h	r7[-10],r8
8000204a:	c0 68       	rjmp	80002056 <crcInit+0x4e>
            }
            else
            {
                remainder = (remainder << 1);
8000204c:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002050:	a1 78       	lsl	r8,0x1
80002052:	ef 58 ff f6 	st.h	r7[-10],r8
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
80002056:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000205a:	20 18       	sub	r8,1
8000205c:	ef 68 ff ff 	st.b	r7[-1],r8
80002060:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002064:	30 08       	mov	r8,0
80002066:	f0 09 18 00 	cp.b	r9,r8
8000206a:	ce 11       	brne	8000202c <crcInit+0x24>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
8000206c:	ee fa ff f8 	ld.w	r10,r7[-8]
80002070:	48 a9       	lddpc	r9,80002098 <crcInit+0x90>
80002072:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002076:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
8000207a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000207e:	2f f8       	sub	r8,-1
80002080:	ef 48 ff f8 	st.w	r7[-8],r8
80002084:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002088:	e0 48 00 ff 	cp.w	r8,255
8000208c:	fe 9a ff c6 	brle	80002018 <crcInit+0x10>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
80002090:	2f dd       	sub	sp,-12
80002092:	e3 cd 80 80 	ldm	sp++,r7,pc
80002096:	00 00       	add	r0,r0
80002098:	00 00       	add	r0,r0
8000209a:	08 1e       	sub	lr,r4

8000209c <crcFast>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
8000209c:	eb cd 40 80 	pushm	r7,lr
800020a0:	1a 97       	mov	r7,sp
800020a2:	20 4d       	sub	sp,16
800020a4:	ef 4c ff f4 	st.w	r7[-12],r12
800020a8:	ef 4b ff f0 	st.w	r7[-16],r11
    crc	           remainder = INITIAL_REMAINDER;
800020ac:	3f f8       	mov	r8,-1
800020ae:	ef 58 ff f8 	st.h	r7[-8],r8


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
800020b2:	30 08       	mov	r8,0
800020b4:	ef 48 ff fc 	st.w	r7[-4],r8
800020b8:	c2 68       	rjmp	80002104 <crcFast+0x68>
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
800020ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800020c2:	f2 08 00 08 	add	r8,r9,r8
800020c6:	11 89       	ld.ub	r9,r8[0x0]
800020c8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800020cc:	a9 88       	lsr	r8,0x8
800020ce:	5c 88       	casts.h	r8
800020d0:	5c 58       	castu.b	r8
800020d2:	f3 e8 20 08 	eor	r8,r9,r8
800020d6:	ef 68 ff fb 	st.b	r7[-5],r8
  		remainder = crcTable[data] ^ (remainder << 8);
800020da:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800020de:	49 08       	lddpc	r8,8000211c <crcFast+0x80>
800020e0:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800020e4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800020e8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800020ec:	a9 68       	lsl	r8,0x8
800020ee:	5c 88       	casts.h	r8
800020f0:	f3 e8 20 08 	eor	r8,r9,r8
800020f4:	5c 88       	casts.h	r8
800020f6:	ef 58 ff f8 	st.h	r7[-8],r8


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
800020fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020fe:	2f f8       	sub	r8,-1
80002100:	ef 48 ff fc 	st.w	r7[-4],r8
80002104:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002108:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000210c:	10 39       	cp.w	r9,r8
8000210e:	cd 65       	brlt	800020ba <crcFast+0x1e>
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
80002110:	ef 08 ff f8 	ld.sh	r8,r7[-8]

}   /* crcFast() */
80002114:	10 9c       	mov	r12,r8
80002116:	2f cd       	sub	sp,-16
80002118:	e3 cd 80 80 	ldm	sp++,r7,pc
8000211c:	00 00       	add	r0,r0
8000211e:	08 1e       	sub	lr,r4

80002120 <hmac_sha256_init>:

/* HMAC-SHA-256 functions */

void hmac_sha256_init(hmac_sha256_ctx *ctx, const unsigned char *key,
                      unsigned int key_size)
{
80002120:	eb cd 40 80 	pushm	r7,lr
80002124:	1a 97       	mov	r7,sp
80002126:	20 fd       	sub	sp,60
80002128:	ef 4c ff cc 	st.w	r7[-52],r12
8000212c:	ef 4b ff c8 	st.w	r7[-56],r11
80002130:	ef 4a ff c4 	st.w	r7[-60],r10

    const unsigned char *key_used;
    unsigned char key_temp[SHA256_DIGEST_SIZE];
    int i;

    if (key_size == SHA256_BLOCK_SIZE) {
80002134:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002138:	e0 48 00 40 	cp.w	r8,64
8000213c:	c0 91       	brne	8000214e <hmac_sha256_init+0x2e>
        key_used = key;
8000213e:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002142:	ef 48 ff f8 	st.w	r7[-8],r8
        num = SHA256_BLOCK_SIZE;
80002146:	34 08       	mov	r8,64
80002148:	ef 48 ff f4 	st.w	r7[-12],r8
8000214c:	c4 28       	rjmp	800021d0 <hmac_sha256_init+0xb0>
    } else {
        if (key_size > SHA256_BLOCK_SIZE){
8000214e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002152:	e0 48 00 40 	cp.w	r8,64
80002156:	e0 88 00 13 	brls	8000217c <hmac_sha256_init+0x5c>
            num = SHA256_DIGEST_SIZE;
8000215a:	32 08       	mov	r8,32
8000215c:	ef 48 ff f4 	st.w	r7[-12],r8
            sha256(key, key_size, key_temp);
80002160:	ee c8 00 30 	sub	r8,r7,48
80002164:	10 9a       	mov	r10,r8
80002166:	ee fb ff c4 	ld.w	r11,r7[-60]
8000216a:	ee fc ff c8 	ld.w	r12,r7[-56]
8000216e:	f0 1f 00 54 	mcall	800022bc <hmac_sha256_init+0x19c>
            key_used = key_temp;
80002172:	ee c8 00 30 	sub	r8,r7,48
80002176:	ef 48 ff f8 	st.w	r7[-8],r8
8000217a:	c0 98       	rjmp	8000218c <hmac_sha256_init+0x6c>
        } else { /* key_size > SHA256_BLOCK_SIZE */
            key_used = key;
8000217c:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002180:	ef 48 ff f8 	st.w	r7[-8],r8
            num = key_size;
80002184:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002188:	ef 48 ff f4 	st.w	r7[-12],r8
        }
        fill = SHA256_BLOCK_SIZE - num;
8000218c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002190:	f0 08 11 40 	rsub	r8,r8,64
80002194:	ef 48 ff f0 	st.w	r7[-16],r8

        memset(ctx->block_ipad + num, 0x36, fill);
80002198:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000219c:	f0 c9 fd 60 	sub	r9,r8,-672
800021a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021a4:	f2 08 00 08 	add	r8,r9,r8
800021a8:	ee fa ff f0 	ld.w	r10,r7[-16]
800021ac:	33 6b       	mov	r11,54
800021ae:	10 9c       	mov	r12,r8
800021b0:	f0 1f 00 44 	mcall	800022c0 <hmac_sha256_init+0x1a0>
        memset(ctx->block_opad + num, 0x5c, fill);
800021b4:	ee f8 ff cc 	ld.w	r8,r7[-52]
800021b8:	f0 c9 fd 20 	sub	r9,r8,-736
800021bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021c0:	f2 08 00 08 	add	r8,r9,r8
800021c4:	ee fa ff f0 	ld.w	r10,r7[-16]
800021c8:	35 cb       	mov	r11,92
800021ca:	10 9c       	mov	r12,r8
800021cc:	f0 1f 00 3d 	mcall	800022c0 <hmac_sha256_init+0x1a0>
    }

    for (i = 0; i < (int) num; i++) {
800021d0:	30 08       	mov	r8,0
800021d2:	ef 48 ff fc 	st.w	r7[-4],r8
800021d6:	c2 a8       	rjmp	8000222a <hmac_sha256_init+0x10a>
        ctx->block_ipad[i] = key_used[i] ^ 0x36;
800021d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800021dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021e0:	ee fa ff f8 	ld.w	r10,r7[-8]
800021e4:	f4 08 00 08 	add	r8,r10,r8
800021e8:	11 88       	ld.ub	r8,r8[0x0]
800021ea:	ec 18 00 36 	eorl	r8,0x36
800021ee:	5c 58       	castu.b	r8
800021f0:	ee fa ff cc 	ld.w	r10,r7[-52]
800021f4:	f4 09 00 09 	add	r9,r10,r9
800021f8:	f3 68 02 a0 	st.b	r9[672],r8
        ctx->block_opad[i] = key_used[i] ^ 0x5c;
800021fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002200:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002204:	ee fa ff f8 	ld.w	r10,r7[-8]
80002208:	f4 08 00 08 	add	r8,r10,r8
8000220c:	11 88       	ld.ub	r8,r8[0x0]
8000220e:	ec 18 00 5c 	eorl	r8,0x5c
80002212:	5c 58       	castu.b	r8
80002214:	ee fa ff cc 	ld.w	r10,r7[-52]
80002218:	f4 09 00 09 	add	r9,r10,r9
8000221c:	f3 68 02 e0 	st.b	r9[736],r8

        memset(ctx->block_ipad + num, 0x36, fill);
        memset(ctx->block_opad + num, 0x5c, fill);
    }

    for (i = 0; i < (int) num; i++) {
80002220:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002224:	2f f8       	sub	r8,-1
80002226:	ef 48 ff fc 	st.w	r7[-4],r8
8000222a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000222e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002232:	10 39       	cp.w	r9,r8
80002234:	fe 99 ff d2 	brgt	800021d8 <hmac_sha256_init+0xb8>
        ctx->block_ipad[i] = key_used[i] ^ 0x36;
        ctx->block_opad[i] = key_used[i] ^ 0x5c;
    }

    sha256_init(&ctx->ctx_inside);
80002238:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000223c:	10 9c       	mov	r12,r8
8000223e:	f0 1f 00 22 	mcall	800022c4 <hmac_sha256_init+0x1a4>
    sha256_update(&ctx->ctx_inside, ctx->block_ipad, SHA256_BLOCK_SIZE);
80002242:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002246:	f0 c9 fd 60 	sub	r9,r8,-672
8000224a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000224e:	34 0a       	mov	r10,64
80002250:	12 9b       	mov	r11,r9
80002252:	10 9c       	mov	r12,r8
80002254:	f0 1f 00 1d 	mcall	800022c8 <hmac_sha256_init+0x1a8>

    sha256_init(&ctx->ctx_outside);
80002258:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000225c:	f0 c8 ff 58 	sub	r8,r8,-168
80002260:	10 9c       	mov	r12,r8
80002262:	f0 1f 00 19 	mcall	800022c4 <hmac_sha256_init+0x1a4>
    sha256_update(&ctx->ctx_outside, ctx->block_opad,
80002266:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000226a:	f0 c9 fd 20 	sub	r9,r8,-736
8000226e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002272:	f0 c8 ff 58 	sub	r8,r8,-168
80002276:	34 0a       	mov	r10,64
80002278:	12 9b       	mov	r11,r9
8000227a:	10 9c       	mov	r12,r8
8000227c:	f0 1f 00 13 	mcall	800022c8 <hmac_sha256_init+0x1a8>
                  SHA256_BLOCK_SIZE);

    /* for hmac_reinit */
    memcpy(&ctx->ctx_inside_reinit, &ctx->ctx_inside,
80002280:	ee f9 ff cc 	ld.w	r9,r7[-52]
80002284:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002288:	f0 c8 fe b0 	sub	r8,r8,-336
8000228c:	e0 6a 00 a8 	mov	r10,168
80002290:	12 9b       	mov	r11,r9
80002292:	10 9c       	mov	r12,r8
80002294:	f0 1f 00 0e 	mcall	800022cc <hmac_sha256_init+0x1ac>
           sizeof(sha256_ctx));
    memcpy(&ctx->ctx_outside_reinit, &ctx->ctx_outside,
80002298:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000229c:	f0 c9 ff 58 	sub	r9,r8,-168
800022a0:	ee f8 ff cc 	ld.w	r8,r7[-52]
800022a4:	f0 c8 fe 08 	sub	r8,r8,-504
800022a8:	e0 6a 00 a8 	mov	r10,168
800022ac:	12 9b       	mov	r11,r9
800022ae:	10 9c       	mov	r12,r8
800022b0:	f0 1f 00 07 	mcall	800022cc <hmac_sha256_init+0x1ac>
           sizeof(sha256_ctx));
}
800022b4:	2f 1d       	sub	sp,-60
800022b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800022ba:	00 00       	add	r0,r0
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	27 5c       	sub	r12,117
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	e7 d2 80 00 	ldswp.w	r2,r3[0]
800022c6:	27 b0       	sub	r0,123
800022c8:	80 00       	ld.sh	r0,r0[0x0]
800022ca:	28 0c       	sub	r12,-128
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	e6 8a eb cd 	brle	800dfa68 <Stored_values_flash+0x9fc68>

800022d0 <hmac_sha256_update>:
           sizeof(sha256_ctx));
}

void hmac_sha256_update(hmac_sha256_ctx *ctx, const unsigned char *message,
                        unsigned int message_len)
{
800022d0:	eb cd 40 80 	pushm	r7,lr
800022d4:	1a 97       	mov	r7,sp
800022d6:	20 3d       	sub	sp,12
800022d8:	ef 4c ff fc 	st.w	r7[-4],r12
800022dc:	ef 4b ff f8 	st.w	r7[-8],r11
800022e0:	ef 4a ff f4 	st.w	r7[-12],r10
    sha256_update(&ctx->ctx_inside, message, message_len);
800022e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022e8:	ee fa ff f4 	ld.w	r10,r7[-12]
800022ec:	ee fb ff f8 	ld.w	r11,r7[-8]
800022f0:	10 9c       	mov	r12,r8
800022f2:	f0 1f 00 03 	mcall	800022fc <hmac_sha256_update+0x2c>
}
800022f6:	2f dd       	sub	sp,-12
800022f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800022fc:	80 00       	ld.sh	r0,r0[0x0]
800022fe:	28 0c       	sub	r12,-128

80002300 <hmac_sha256_final>:

void hmac_sha256_final(hmac_sha256_ctx *ctx, unsigned char *mac,
                       unsigned int mac_size)
{
80002300:	eb cd 40 80 	pushm	r7,lr
80002304:	1a 97       	mov	r7,sp
80002306:	21 3d       	sub	sp,76
80002308:	ef 4c ff bc 	st.w	r7[-68],r12
8000230c:	ef 4b ff b8 	st.w	r7[-72],r11
80002310:	ef 4a ff b4 	st.w	r7[-76],r10
    unsigned char digest_inside[SHA256_DIGEST_SIZE];
    unsigned char mac_temp[SHA256_DIGEST_SIZE];

    sha256_final(&ctx->ctx_inside, digest_inside);
80002314:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002318:	ee c9 00 20 	sub	r9,r7,32
8000231c:	12 9b       	mov	r11,r9
8000231e:	10 9c       	mov	r12,r8
80002320:	f0 1f 00 12 	mcall	80002368 <hmac_sha256_final+0x68>
    sha256_update(&ctx->ctx_outside, digest_inside, SHA256_DIGEST_SIZE);
80002324:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002328:	f0 c8 ff 58 	sub	r8,r8,-168
8000232c:	ee c9 00 20 	sub	r9,r7,32
80002330:	32 0a       	mov	r10,32
80002332:	12 9b       	mov	r11,r9
80002334:	10 9c       	mov	r12,r8
80002336:	f0 1f 00 0e 	mcall	8000236c <hmac_sha256_final+0x6c>
    sha256_final(&ctx->ctx_outside, mac_temp);
8000233a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000233e:	f0 c8 ff 58 	sub	r8,r8,-168
80002342:	ee c9 00 40 	sub	r9,r7,64
80002346:	12 9b       	mov	r11,r9
80002348:	10 9c       	mov	r12,r8
8000234a:	f0 1f 00 08 	mcall	80002368 <hmac_sha256_final+0x68>
    memcpy(mac, mac_temp, mac_size);
8000234e:	ee c8 00 40 	sub	r8,r7,64
80002352:	ee fa ff b4 	ld.w	r10,r7[-76]
80002356:	10 9b       	mov	r11,r8
80002358:	ee fc ff b8 	ld.w	r12,r7[-72]
8000235c:	f0 1f 00 05 	mcall	80002370 <hmac_sha256_final+0x70>
}
80002360:	2e dd       	sub	sp,-76
80002362:	e3 cd 80 80 	ldm	sp++,r7,pc
80002366:	00 00       	add	r0,r0
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	29 34       	sub	r4,-109
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	28 0c       	sub	r12,-128
80002370:	80 00       	ld.sh	r0,r0[0x0]
80002372:	e6 8a eb cd 	brle	800dfb0c <Stored_values_flash+0x9fd0c>

80002374 <hmac_sha256>:

void hmac_sha256(const unsigned char *key, unsigned int key_size,
          const unsigned char *message, unsigned int message_len,
          unsigned char *mac, unsigned mac_size)
{
80002374:	eb cd 40 c0 	pushm	r6-r7,lr
80002378:	1a 97       	mov	r7,sp
8000237a:	fa cd 03 34 	sub	sp,sp,820
8000237e:	ee c6 ff f4 	sub	r6,r7,-12
80002382:	ef 4c fc dc 	st.w	r7[-804],r12
80002386:	ef 4b fc d8 	st.w	r7[-808],r11
8000238a:	ef 4a fc d4 	st.w	r7[-812],r10
8000238e:	ef 49 fc d0 	st.w	r7[-816],r9
80002392:	ef 48 fc cc 	st.w	r7[-820],r8
    hmac_sha256_ctx ctx;

    hmac_sha256_init(&ctx, key, key_size);
80002396:	ee c8 03 20 	sub	r8,r7,800
8000239a:	ee fa fc d8 	ld.w	r10,r7[-808]
8000239e:	ee fb fc dc 	ld.w	r11,r7[-804]
800023a2:	10 9c       	mov	r12,r8
800023a4:	f0 1f 00 0c 	mcall	800023d4 <hmac_sha256+0x60>
    hmac_sha256_update(&ctx, message, message_len);
800023a8:	ee c8 03 20 	sub	r8,r7,800
800023ac:	ee fa fc d0 	ld.w	r10,r7[-816]
800023b0:	ee fb fc d4 	ld.w	r11,r7[-812]
800023b4:	10 9c       	mov	r12,r8
800023b6:	f0 1f 00 09 	mcall	800023d8 <hmac_sha256+0x64>
    hmac_sha256_final(&ctx, mac, mac_size);
800023ba:	ee c8 03 20 	sub	r8,r7,800
800023be:	6c 0a       	ld.w	r10,r6[0x0]
800023c0:	ee fb fc cc 	ld.w	r11,r7[-820]
800023c4:	10 9c       	mov	r12,r8
800023c6:	f0 1f 00 06 	mcall	800023dc <hmac_sha256+0x68>
}
800023ca:	fe 3d fc cc 	sub	sp,-820
800023ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023d2:	00 00       	add	r0,r0
800023d4:	80 00       	ld.sh	r0,r0[0x0]
800023d6:	21 20       	sub	r0,18
800023d8:	80 00       	ld.sh	r0,r0[0x0]
800023da:	22 d0       	sub	r0,45
800023dc:	80 00       	ld.sh	r0,r0[0x0]
800023de:	23 00       	sub	r0,48

800023e0 <sha256_transf>:

/* SHA-256 functions */

void sha256_transf(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int block_nb)
{
800023e0:	eb cd 40 80 	pushm	r7,lr
800023e4:	1a 97       	mov	r7,sp
800023e6:	fa cd 01 40 	sub	sp,sp,320
800023ea:	ef 4c fe c8 	st.w	r7[-312],r12
800023ee:	ef 4b fe c4 	st.w	r7[-316],r11
800023f2:	ef 4a fe c0 	st.w	r7[-320],r10

#ifndef UNROLL_LOOPS
    int j;
#endif

    for (i = 0; i < (int) block_nb; i++) {
800023f6:	30 08       	mov	r8,0
800023f8:	ef 48 ff f8 	st.w	r7[-8],r8
800023fc:	ca 49       	rjmp	80002744 <sha256_transf+0x364>
        sub_block = message + (i << 6);
800023fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002402:	a7 68       	lsl	r8,0x6
80002404:	ee f9 fe c4 	ld.w	r9,r7[-316]
80002408:	f2 08 00 08 	add	r8,r9,r8
8000240c:	ef 48 ff f4 	st.w	r7[-12],r8

#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
80002410:	30 08       	mov	r8,0
80002412:	ef 48 ff fc 	st.w	r7[-4],r8
80002416:	c3 98       	rjmp	80002488 <sha256_transf+0xa8>
            PACK32(&sub_block[j << 2], &w[j]);
80002418:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000241c:	f0 09 15 02 	lsl	r9,r8,0x2
80002420:	ee c8 01 14 	sub	r8,r7,276
80002424:	12 08       	add	r8,r9
80002426:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000242a:	a3 69       	lsl	r9,0x2
8000242c:	2f d9       	sub	r9,-3
8000242e:	ee fa ff f4 	ld.w	r10,r7[-12]
80002432:	f4 09 00 09 	add	r9,r10,r9
80002436:	13 89       	ld.ub	r9,r9[0x0]
80002438:	12 9a       	mov	r10,r9
8000243a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000243e:	a3 69       	lsl	r9,0x2
80002440:	2f e9       	sub	r9,-2
80002442:	ee fb ff f4 	ld.w	r11,r7[-12]
80002446:	f6 09 00 09 	add	r9,r11,r9
8000244a:	13 89       	ld.ub	r9,r9[0x0]
8000244c:	a9 69       	lsl	r9,0x8
8000244e:	12 4a       	or	r10,r9
80002450:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002454:	a3 69       	lsl	r9,0x2
80002456:	2f f9       	sub	r9,-1
80002458:	ee fb ff f4 	ld.w	r11,r7[-12]
8000245c:	f6 09 00 09 	add	r9,r11,r9
80002460:	13 89       	ld.ub	r9,r9[0x0]
80002462:	b1 69       	lsl	r9,0x10
80002464:	12 4a       	or	r10,r9
80002466:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000246a:	a3 69       	lsl	r9,0x2
8000246c:	ee fb ff f4 	ld.w	r11,r7[-12]
80002470:	f6 09 00 09 	add	r9,r11,r9
80002474:	13 89       	ld.ub	r9,r9[0x0]
80002476:	b9 69       	lsl	r9,0x18
80002478:	f5 e9 10 09 	or	r9,r10,r9
8000247c:	91 09       	st.w	r8[0x0],r9

    for (i = 0; i < (int) block_nb; i++) {
        sub_block = message + (i << 6);

#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
8000247e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002482:	2f f8       	sub	r8,-1
80002484:	ef 48 ff fc 	st.w	r7[-4],r8
80002488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000248c:	58 f8       	cp.w	r8,15
8000248e:	fe 9a ff c5 	brle	80002418 <sha256_transf+0x38>
            PACK32(&sub_block[j << 2], &w[j]);
        }

        for (j = 16; j < 64; j++) {
80002492:	31 08       	mov	r8,16
80002494:	ef 48 ff fc 	st.w	r7[-4],r8
80002498:	c6 c8       	rjmp	80002570 <sha256_transf+0x190>
            SHA256_SCR(j);
8000249a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000249e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024a2:	20 28       	sub	r8,2
800024a4:	a3 68       	lsl	r8,0x2
800024a6:	ee 08 00 08 	add	r8,r7,r8
800024aa:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024ae:	f0 0b 16 11 	lsr	r11,r8,0x11
800024b2:	f0 09 15 0f 	lsl	r9,r8,0xf
800024b6:	16 49       	or	r9,r11
800024b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024bc:	20 28       	sub	r8,2
800024be:	a3 68       	lsl	r8,0x2
800024c0:	ee 08 00 08 	add	r8,r7,r8
800024c4:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024c8:	f0 0b 16 13 	lsr	r11,r8,0x13
800024cc:	ad 78       	lsl	r8,0xd
800024ce:	16 48       	or	r8,r11
800024d0:	10 59       	eor	r9,r8
800024d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024d6:	20 28       	sub	r8,2
800024d8:	a3 68       	lsl	r8,0x2
800024da:	ee 08 00 08 	add	r8,r7,r8
800024de:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024e2:	ab 88       	lsr	r8,0xa
800024e4:	10 59       	eor	r9,r8
800024e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024ea:	20 78       	sub	r8,7
800024ec:	a3 68       	lsl	r8,0x2
800024ee:	ee 08 00 08 	add	r8,r7,r8
800024f2:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024f6:	f2 08 00 0b 	add	r11,r9,r8
800024fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024fe:	20 f8       	sub	r8,15
80002500:	a3 68       	lsl	r8,0x2
80002502:	ee 08 00 08 	add	r8,r7,r8
80002506:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000250a:	f0 0c 16 07 	lsr	r12,r8,0x7
8000250e:	f0 09 15 19 	lsl	r9,r8,0x19
80002512:	18 49       	or	r9,r12
80002514:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002518:	20 f8       	sub	r8,15
8000251a:	a3 68       	lsl	r8,0x2
8000251c:	ee 08 00 08 	add	r8,r7,r8
80002520:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002524:	f0 0c 16 12 	lsr	r12,r8,0x12
80002528:	af 68       	lsl	r8,0xe
8000252a:	18 48       	or	r8,r12
8000252c:	10 59       	eor	r9,r8
8000252e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002532:	20 f8       	sub	r8,15
80002534:	a3 68       	lsl	r8,0x2
80002536:	ee 08 00 08 	add	r8,r7,r8
8000253a:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000253e:	a3 98       	lsr	r8,0x3
80002540:	f3 e8 20 08 	eor	r8,r9,r8
80002544:	f6 08 00 09 	add	r9,r11,r8
80002548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000254c:	21 08       	sub	r8,16
8000254e:	a3 68       	lsl	r8,0x2
80002550:	ee 08 00 08 	add	r8,r7,r8
80002554:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002558:	10 09       	add	r9,r8
8000255a:	f4 08 15 02 	lsl	r8,r10,0x2
8000255e:	ee 08 00 08 	add	r8,r7,r8
80002562:	f1 49 fe ec 	st.w	r8[-276],r9
#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
            PACK32(&sub_block[j << 2], &w[j]);
        }

        for (j = 16; j < 64; j++) {
80002566:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000256a:	2f f8       	sub	r8,-1
8000256c:	ef 48 ff fc 	st.w	r7[-4],r8
80002570:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002574:	e0 48 00 3f 	cp.w	r8,63
80002578:	fe 9a ff 91 	brle	8000249a <sha256_transf+0xba>
            SHA256_SCR(j);
        }

        for (j = 0; j < 8; j++) {
8000257c:	30 08       	mov	r8,0
8000257e:	ef 48 ff fc 	st.w	r7[-4],r8
80002582:	c1 48       	rjmp	800025aa <sha256_transf+0x1ca>
            wv[j] = ctx->h[j];
80002584:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002588:	ee fa ff fc 	ld.w	r10,r7[-4]
8000258c:	ee f9 fe c8 	ld.w	r9,r7[-312]
80002590:	2d ea       	sub	r10,-34
80002592:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80002596:	a3 68       	lsl	r8,0x2
80002598:	ee 08 00 08 	add	r8,r7,r8
8000259c:	f1 49 fe cc 	st.w	r8[-308],r9

        for (j = 16; j < 64; j++) {
            SHA256_SCR(j);
        }

        for (j = 0; j < 8; j++) {
800025a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025a4:	2f f8       	sub	r8,-1
800025a6:	ef 48 ff fc 	st.w	r7[-4],r8
800025aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025ae:	58 78       	cp.w	r8,7
800025b0:	fe 9a ff ea 	brle	80002584 <sha256_transf+0x1a4>
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
800025b4:	30 08       	mov	r8,0
800025b6:	ef 48 ff fc 	st.w	r7[-4],r8
800025ba:	c9 68       	rjmp	800026e6 <sha256_transf+0x306>
            t1 = wv[7] + SHA256_F2(wv[4]) + CH(wv[4], wv[5], wv[6])
800025bc:	ee fa fe e8 	ld.w	r10,r7[-280]
800025c0:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025c4:	f0 0b 16 06 	lsr	r11,r8,0x6
800025c8:	f0 09 15 1a 	lsl	r9,r8,0x1a
800025cc:	16 49       	or	r9,r11
800025ce:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025d2:	f0 0b 16 0b 	lsr	r11,r8,0xb
800025d6:	b5 78       	lsl	r8,0x15
800025d8:	16 48       	or	r8,r11
800025da:	10 59       	eor	r9,r8
800025dc:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025e0:	f0 0b 16 19 	lsr	r11,r8,0x19
800025e4:	a7 78       	lsl	r8,0x7
800025e6:	16 48       	or	r8,r11
800025e8:	f3 e8 20 08 	eor	r8,r9,r8
800025ec:	f4 08 00 09 	add	r9,r10,r8
800025f0:	ee fa fe dc 	ld.w	r10,r7[-292]
800025f4:	ee f8 fe e0 	ld.w	r8,r7[-288]
800025f8:	10 6a       	and	r10,r8
800025fa:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025fe:	f0 0b 11 ff 	rsub	r11,r8,-1
80002602:	ee f8 fe e4 	ld.w	r8,r7[-284]
80002606:	f7 e8 00 08 	and	r8,r11,r8
8000260a:	f5 e8 20 08 	eor	r8,r10,r8
                + sha256_k[j] + w[j];
8000260e:	10 09       	add	r9,r8
80002610:	ee fa ff fc 	ld.w	r10,r7[-4]
80002614:	4d 18       	lddpc	r8,80002758 <sha256_transf+0x378>
80002616:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000261a:	10 09       	add	r9,r8
8000261c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002620:	a3 68       	lsl	r8,0x2
80002622:	ee 08 00 08 	add	r8,r7,r8
80002626:	f0 f8 fe ec 	ld.w	r8,r8[-276]
        for (j = 0; j < 8; j++) {
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
            t1 = wv[7] + SHA256_F2(wv[4]) + CH(wv[4], wv[5], wv[6])
8000262a:	f2 08 00 08 	add	r8,r9,r8
8000262e:	ef 48 ff ec 	st.w	r7[-20],r8
                + sha256_k[j] + w[j];
            t2 = SHA256_F1(wv[0]) + MAJ(wv[0], wv[1], wv[2]);
80002632:	ee f8 fe cc 	ld.w	r8,r7[-308]
80002636:	f0 0a 16 02 	lsr	r10,r8,0x2
8000263a:	f0 09 15 1e 	lsl	r9,r8,0x1e
8000263e:	14 49       	or	r9,r10
80002640:	ee f8 fe cc 	ld.w	r8,r7[-308]
80002644:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002648:	b3 78       	lsl	r8,0x13
8000264a:	14 48       	or	r8,r10
8000264c:	10 59       	eor	r9,r8
8000264e:	ee f8 fe cc 	ld.w	r8,r7[-308]
80002652:	f0 0a 16 16 	lsr	r10,r8,0x16
80002656:	ab 68       	lsl	r8,0xa
80002658:	14 48       	or	r8,r10
8000265a:	10 59       	eor	r9,r8
8000265c:	ee fa fe cc 	ld.w	r10,r7[-308]
80002660:	ee f8 fe d0 	ld.w	r8,r7[-304]
80002664:	10 6a       	and	r10,r8
80002666:	ee fb fe cc 	ld.w	r11,r7[-308]
8000266a:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000266e:	f7 e8 00 08 	and	r8,r11,r8
80002672:	10 5a       	eor	r10,r8
80002674:	ee fb fe d0 	ld.w	r11,r7[-304]
80002678:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000267c:	f7 e8 00 08 	and	r8,r11,r8
80002680:	f5 e8 20 08 	eor	r8,r10,r8
80002684:	f2 08 00 08 	add	r8,r9,r8
80002688:	ef 48 ff f0 	st.w	r7[-16],r8
            wv[7] = wv[6];
8000268c:	ee f8 fe e4 	ld.w	r8,r7[-284]
80002690:	ef 48 fe e8 	st.w	r7[-280],r8
            wv[6] = wv[5];
80002694:	ee f8 fe e0 	ld.w	r8,r7[-288]
80002698:	ef 48 fe e4 	st.w	r7[-284],r8
            wv[5] = wv[4];
8000269c:	ee f8 fe dc 	ld.w	r8,r7[-292]
800026a0:	ef 48 fe e0 	st.w	r7[-288],r8
            wv[4] = wv[3] + t1;
800026a4:	ee f9 fe d8 	ld.w	r9,r7[-296]
800026a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800026ac:	f2 08 00 08 	add	r8,r9,r8
800026b0:	ef 48 fe dc 	st.w	r7[-292],r8
            wv[3] = wv[2];
800026b4:	ee f8 fe d4 	ld.w	r8,r7[-300]
800026b8:	ef 48 fe d8 	st.w	r7[-296],r8
            wv[2] = wv[1];
800026bc:	ee f8 fe d0 	ld.w	r8,r7[-304]
800026c0:	ef 48 fe d4 	st.w	r7[-300],r8
            wv[1] = wv[0];
800026c4:	ee f8 fe cc 	ld.w	r8,r7[-308]
800026c8:	ef 48 fe d0 	st.w	r7[-304],r8
            wv[0] = t1 + t2;
800026cc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800026d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800026d4:	f2 08 00 08 	add	r8,r9,r8
800026d8:	ef 48 fe cc 	st.w	r7[-308],r8

        for (j = 0; j < 8; j++) {
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
800026dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026e0:	2f f8       	sub	r8,-1
800026e2:	ef 48 ff fc 	st.w	r7[-4],r8
800026e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026ea:	e0 48 00 3f 	cp.w	r8,63
800026ee:	fe 9a ff 67 	brle	800025bc <sha256_transf+0x1dc>
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }

        for (j = 0; j < 8; j++) {
800026f2:	30 08       	mov	r8,0
800026f4:	ef 48 ff fc 	st.w	r7[-4],r8
800026f8:	c1 c8       	rjmp	80002730 <sha256_transf+0x350>
            ctx->h[j] += wv[j];
800026fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800026fe:	ee fa ff fc 	ld.w	r10,r7[-4]
80002702:	ee f8 fe c8 	ld.w	r8,r7[-312]
80002706:	2d ea       	sub	r10,-34
80002708:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000270c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002710:	a3 68       	lsl	r8,0x2
80002712:	ee 08 00 08 	add	r8,r7,r8
80002716:	f0 f8 fe cc 	ld.w	r8,r8[-308]
8000271a:	10 0a       	add	r10,r8
8000271c:	ee f8 fe c8 	ld.w	r8,r7[-312]
80002720:	2d e9       	sub	r9,-34
80002722:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }

        for (j = 0; j < 8; j++) {
80002726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000272a:	2f f8       	sub	r8,-1
8000272c:	ef 48 ff fc 	st.w	r7[-4],r8
80002730:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002734:	58 78       	cp.w	r8,7
80002736:	fe 9a ff e2 	brle	800026fa <sha256_transf+0x31a>

#ifndef UNROLL_LOOPS
    int j;
#endif

    for (i = 0; i < (int) block_nb; i++) {
8000273a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000273e:	2f f8       	sub	r8,-1
80002740:	ef 48 ff f8 	st.w	r7[-8],r8
80002744:	ee f9 fe c0 	ld.w	r9,r7[-320]
80002748:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000274c:	10 39       	cp.w	r9,r8
8000274e:	fe 99 fe 58 	brgt	800023fe <sha256_transf+0x1e>
        ctx->h[2] += wv[2]; ctx->h[3] += wv[3];
        ctx->h[4] += wv[4]; ctx->h[5] += wv[5];
        ctx->h[6] += wv[6]; ctx->h[7] += wv[7];
#endif /* !UNROLL_LOOPS */
    }
}
80002752:	2b 0d       	sub	sp,-320
80002754:	e3 cd 80 80 	ldm	sp++,r7,pc
80002758:	00 00       	add	r0,r0
8000275a:	00 28       	rsub	r8,r0

8000275c <sha256>:

void sha256(const unsigned char *message, unsigned int len, unsigned char *digest)
{
8000275c:	eb cd 40 80 	pushm	r7,lr
80002760:	1a 97       	mov	r7,sp
80002762:	fa cd 00 b4 	sub	sp,sp,180
80002766:	ef 4c ff 54 	st.w	r7[-172],r12
8000276a:	ef 4b ff 50 	st.w	r7[-176],r11
8000276e:	ef 4a ff 4c 	st.w	r7[-180],r10
    sha256_ctx ctx;

    sha256_init(&ctx);
80002772:	ee c8 00 a8 	sub	r8,r7,168
80002776:	10 9c       	mov	r12,r8
80002778:	f0 1f 00 0b 	mcall	800027a4 <sha256+0x48>
    sha256_update(&ctx, message, len);
8000277c:	ee c8 00 a8 	sub	r8,r7,168
80002780:	ee fa ff 50 	ld.w	r10,r7[-176]
80002784:	ee fb ff 54 	ld.w	r11,r7[-172]
80002788:	10 9c       	mov	r12,r8
8000278a:	f0 1f 00 08 	mcall	800027a8 <sha256+0x4c>
    sha256_final(&ctx, digest);
8000278e:	ee c8 00 a8 	sub	r8,r7,168
80002792:	ee fb ff 4c 	ld.w	r11,r7[-180]
80002796:	10 9c       	mov	r12,r8
80002798:	f0 1f 00 05 	mcall	800027ac <sha256+0x50>
}
8000279c:	2d 3d       	sub	sp,-180
8000279e:	e3 cd 80 80 	ldm	sp++,r7,pc
800027a2:	00 00       	add	r0,r0
800027a4:	80 00       	ld.sh	r0,r0[0x0]
800027a6:	27 b0       	sub	r0,123
800027a8:	80 00       	ld.sh	r0,r0[0x0]
800027aa:	28 0c       	sub	r12,-128
800027ac:	80 00       	ld.sh	r0,r0[0x0]
800027ae:	29 34       	sub	r4,-109

800027b0 <sha256_init>:

void sha256_init(sha256_ctx *ctx)
{
800027b0:	eb cd 40 80 	pushm	r7,lr
800027b4:	1a 97       	mov	r7,sp
800027b6:	20 2d       	sub	sp,8
800027b8:	ef 4c ff f8 	st.w	r7[-8],r12
#ifndef UNROLL_LOOPS
    int i;
    for (i = 0; i < 8; i++) {
800027bc:	30 08       	mov	r8,0
800027be:	ef 48 ff fc 	st.w	r7[-4],r8
800027c2:	c1 28       	rjmp	800027e6 <sha256_init+0x36>
        ctx->h[i] = sha256_h0[i];
800027c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027c8:	ee fa ff fc 	ld.w	r10,r7[-4]
800027cc:	48 f8       	lddpc	r8,80002808 <sha256_init+0x58>
800027ce:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800027d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027d6:	2d e9       	sub	r9,-34
800027d8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

void sha256_init(sha256_ctx *ctx)
{
#ifndef UNROLL_LOOPS
    int i;
    for (i = 0; i < 8; i++) {
800027dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800027e0:	2f f8       	sub	r8,-1
800027e2:	ef 48 ff fc 	st.w	r7[-4],r8
800027e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800027ea:	58 78       	cp.w	r8,7
800027ec:	fe 9a ff ec 	brle	800027c4 <sha256_init+0x14>
    ctx->h[2] = sha256_h0[2]; ctx->h[3] = sha256_h0[3];
    ctx->h[4] = sha256_h0[4]; ctx->h[5] = sha256_h0[5];
    ctx->h[6] = sha256_h0[6]; ctx->h[7] = sha256_h0[7];
#endif /* !UNROLL_LOOPS */

    ctx->len = 0;
800027f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027f4:	30 09       	mov	r9,0
800027f6:	91 19       	st.w	r8[0x4],r9
    ctx->tot_len = 0;
800027f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027fc:	30 09       	mov	r9,0
800027fe:	91 09       	st.w	r8[0x0],r9
}
80002800:	2f ed       	sub	sp,-8
80002802:	e3 cd 80 80 	ldm	sp++,r7,pc
80002806:	00 00       	add	r0,r0
80002808:	00 00       	add	r0,r0
8000280a:	00 08       	add	r8,r0

8000280c <sha256_update>:

void sha256_update(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int len)
{
8000280c:	eb cd 40 80 	pushm	r7,lr
80002810:	1a 97       	mov	r7,sp
80002812:	20 8d       	sub	sp,32
80002814:	ef 4c ff e8 	st.w	r7[-24],r12
80002818:	ef 4b ff e4 	st.w	r7[-28],r11
8000281c:	ef 4a ff e0 	st.w	r7[-32],r10
    unsigned int block_nb;
    unsigned int new_len, rem_len, tmp_len;
    const unsigned char *shifted_message;

    tmp_len = SHA256_BLOCK_SIZE - ctx->len;
80002820:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002824:	70 18       	ld.w	r8,r8[0x4]
80002826:	f0 08 11 40 	rsub	r8,r8,64
8000282a:	ef 48 ff f8 	st.w	r7[-8],r8
    rem_len = len < tmp_len ? len : tmp_len;
8000282e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002832:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002836:	ee fa ff f8 	ld.w	r10,r7[-8]
8000283a:	10 3a       	cp.w	r10,r8
8000283c:	f2 08 17 80 	movls	r8,r9
80002840:	ef 48 ff f4 	st.w	r7[-12],r8

    memcpy(&ctx->block[ctx->len], message, rem_len);
80002844:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002848:	f0 c9 ff f8 	sub	r9,r8,-8
8000284c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002850:	70 18       	ld.w	r8,r8[0x4]
80002852:	f2 08 00 08 	add	r8,r9,r8
80002856:	ee fa ff f4 	ld.w	r10,r7[-12]
8000285a:	ee fb ff e4 	ld.w	r11,r7[-28]
8000285e:	10 9c       	mov	r12,r8
80002860:	f0 1f 00 33 	mcall	8000292c <sha256_update+0x120>

    if (ctx->len + len < SHA256_BLOCK_SIZE) {
80002864:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002868:	70 19       	ld.w	r9,r8[0x4]
8000286a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000286e:	f2 08 00 08 	add	r8,r9,r8
80002872:	e0 48 00 3f 	cp.w	r8,63
80002876:	e0 8b 00 0c 	brhi	8000288e <sha256_update+0x82>
        ctx->len += len;
8000287a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000287e:	70 19       	ld.w	r9,r8[0x4]
80002880:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002884:	10 09       	add	r9,r8
80002886:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000288a:	91 19       	st.w	r8[0x4],r9
        return;
8000288c:	c4 c8       	rjmp	80002924 <sha256_update+0x118>
    }

    new_len = len - rem_len;
8000288e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80002892:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002896:	f2 08 01 08 	sub	r8,r9,r8
8000289a:	ef 48 ff f0 	st.w	r7[-16],r8
    block_nb = new_len / SHA256_BLOCK_SIZE;
8000289e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028a2:	a7 88       	lsr	r8,0x6
800028a4:	ef 48 ff ec 	st.w	r7[-20],r8

    shifted_message = message + rem_len;
800028a8:	ee f9 ff e4 	ld.w	r9,r7[-28]
800028ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028b0:	f2 08 00 08 	add	r8,r9,r8
800028b4:	ef 48 ff fc 	st.w	r7[-4],r8

    sha256_transf(ctx, ctx->block, 1);
800028b8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800028bc:	2f 88       	sub	r8,-8
800028be:	30 1a       	mov	r10,1
800028c0:	10 9b       	mov	r11,r8
800028c2:	ee fc ff e8 	ld.w	r12,r7[-24]
800028c6:	f0 1f 00 1b 	mcall	80002930 <sha256_update+0x124>
    sha256_transf(ctx, shifted_message, block_nb);
800028ca:	ee fa ff ec 	ld.w	r10,r7[-20]
800028ce:	ee fb ff fc 	ld.w	r11,r7[-4]
800028d2:	ee fc ff e8 	ld.w	r12,r7[-24]
800028d6:	f0 1f 00 17 	mcall	80002930 <sha256_update+0x124>

    rem_len = new_len % SHA256_BLOCK_SIZE;
800028da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028de:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800028e2:	ef 48 ff f4 	st.w	r7[-12],r8

    memcpy(ctx->block, &shifted_message[block_nb << 6],
800028e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028ea:	a7 68       	lsl	r8,0x6
800028ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800028f0:	10 09       	add	r9,r8
800028f2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800028f6:	2f 88       	sub	r8,-8
800028f8:	ee fa ff f4 	ld.w	r10,r7[-12]
800028fc:	12 9b       	mov	r11,r9
800028fe:	10 9c       	mov	r12,r8
80002900:	f0 1f 00 0b 	mcall	8000292c <sha256_update+0x120>
           rem_len);

    ctx->len = rem_len;
80002904:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002908:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000290c:	91 19       	st.w	r8[0x4],r9
    ctx->tot_len += (block_nb + 1) << 6;
8000290e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002912:	70 09       	ld.w	r9,r8[0x0]
80002914:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002918:	2f f8       	sub	r8,-1
8000291a:	a7 68       	lsl	r8,0x6
8000291c:	10 09       	add	r9,r8
8000291e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002922:	91 09       	st.w	r8[0x0],r9
}
80002924:	2f 8d       	sub	sp,-32
80002926:	e3 cd 80 80 	ldm	sp++,r7,pc
8000292a:	00 00       	add	r0,r0
8000292c:	80 00       	ld.sh	r0,r0[0x0]
8000292e:	e6 8a 80 00 	brle	800d292e <Stored_values_flash+0x92b2e>
80002932:	23 e0       	sub	r0,62

80002934 <sha256_final>:

void sha256_final(sha256_ctx *ctx, unsigned char *digest)
{
80002934:	eb cd 40 80 	pushm	r7,lr
80002938:	1a 97       	mov	r7,sp
8000293a:	20 6d       	sub	sp,24
8000293c:	ef 4c ff ec 	st.w	r7[-20],r12
80002940:	ef 4b ff e8 	st.w	r7[-24],r11
#ifndef UNROLL_LOOPS
    int i;
#endif

    block_nb = (1 + ((SHA256_BLOCK_SIZE - 9)
                     < (ctx->len % SHA256_BLOCK_SIZE)));
80002944:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002948:	70 18       	ld.w	r8,r8[0x4]
8000294a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6

#ifndef UNROLL_LOOPS
    int i;
#endif

    block_nb = (1 + ((SHA256_BLOCK_SIZE - 9)
8000294e:	e0 48 00 37 	cp.w	r8,55
80002952:	e0 88 00 04 	brls	8000295a <sha256_final+0x26>
80002956:	30 28       	mov	r8,2
80002958:	c0 28       	rjmp	8000295c <sha256_final+0x28>
8000295a:	30 18       	mov	r8,1
8000295c:	ef 48 ff f0 	st.w	r7[-16],r8
                     < (ctx->len % SHA256_BLOCK_SIZE)));

    len_b = (ctx->tot_len + ctx->len) << 3;
80002960:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002964:	70 09       	ld.w	r9,r8[0x0]
80002966:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000296a:	70 18       	ld.w	r8,r8[0x4]
8000296c:	f2 08 00 08 	add	r8,r9,r8
80002970:	a3 78       	lsl	r8,0x3
80002972:	ef 48 ff f8 	st.w	r7[-8],r8
    pm_len = block_nb << 6;
80002976:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000297a:	a7 68       	lsl	r8,0x6
8000297c:	ef 48 ff f4 	st.w	r7[-12],r8

    memset(ctx->block + ctx->len, 0, pm_len - ctx->len);
80002980:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002984:	70 18       	ld.w	r8,r8[0x4]
80002986:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000298a:	10 19       	sub	r9,r8
8000298c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002990:	f0 ca ff f8 	sub	r10,r8,-8
80002994:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002998:	70 18       	ld.w	r8,r8[0x4]
8000299a:	f4 08 00 08 	add	r8,r10,r8
8000299e:	12 9a       	mov	r10,r9
800029a0:	30 0b       	mov	r11,0
800029a2:	10 9c       	mov	r12,r8
800029a4:	f0 1f 00 4e 	mcall	80002adc <sha256_final+0x1a8>
    ctx->block[ctx->len] = 0x80;
800029a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029ac:	70 18       	ld.w	r8,r8[0x4]
800029ae:	ee f9 ff ec 	ld.w	r9,r7[-20]
800029b2:	10 09       	add	r9,r8
800029b4:	38 08       	mov	r8,-128
800029b6:	f3 68 00 08 	st.b	r9[8],r8
    UNPACK32(len_b, ctx->block + pm_len - 4);
800029ba:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029be:	f0 c9 ff f8 	sub	r9,r8,-8
800029c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029c6:	20 18       	sub	r8,1
800029c8:	10 09       	add	r9,r8
800029ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029ce:	5c 58       	castu.b	r8
800029d0:	b2 88       	st.b	r9[0x0],r8
800029d2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029d6:	f0 c9 ff f8 	sub	r9,r8,-8
800029da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029de:	20 28       	sub	r8,2
800029e0:	10 09       	add	r9,r8
800029e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029e6:	a9 88       	lsr	r8,0x8
800029e8:	5c 58       	castu.b	r8
800029ea:	b2 88       	st.b	r9[0x0],r8
800029ec:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029f0:	f0 c9 ff f8 	sub	r9,r8,-8
800029f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029f8:	20 38       	sub	r8,3
800029fa:	10 09       	add	r9,r8
800029fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a00:	b1 88       	lsr	r8,0x10
80002a02:	5c 58       	castu.b	r8
80002a04:	b2 88       	st.b	r9[0x0],r8
80002a06:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a0a:	f0 c9 ff f8 	sub	r9,r8,-8
80002a0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002a12:	20 48       	sub	r8,4
80002a14:	10 09       	add	r9,r8
80002a16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a1a:	b9 88       	lsr	r8,0x18
80002a1c:	5c 58       	castu.b	r8
80002a1e:	b2 88       	st.b	r9[0x0],r8

    sha256_transf(ctx, ctx->block, block_nb);
80002a20:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a24:	2f 88       	sub	r8,-8
80002a26:	ee fa ff f0 	ld.w	r10,r7[-16]
80002a2a:	10 9b       	mov	r11,r8
80002a2c:	ee fc ff ec 	ld.w	r12,r7[-20]
80002a30:	f0 1f 00 2c 	mcall	80002ae0 <sha256_final+0x1ac>

#ifndef UNROLL_LOOPS
    for (i = 0 ; i < 8; i++) {
80002a34:	30 08       	mov	r8,0
80002a36:	ef 48 ff fc 	st.w	r7[-4],r8
80002a3a:	c4 88       	rjmp	80002aca <sha256_final+0x196>
        UNPACK32(ctx->h[i], &digest[i << 2]);
80002a3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a40:	a3 68       	lsl	r8,0x2
80002a42:	2f d8       	sub	r8,-3
80002a44:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002a48:	10 09       	add	r9,r8
80002a4a:	ee fa ff fc 	ld.w	r10,r7[-4]
80002a4e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a52:	2d ea       	sub	r10,-34
80002a54:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002a58:	5c 58       	castu.b	r8
80002a5a:	b2 88       	st.b	r9[0x0],r8
80002a5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a60:	a3 68       	lsl	r8,0x2
80002a62:	2f e8       	sub	r8,-2
80002a64:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002a68:	10 09       	add	r9,r8
80002a6a:	ee fa ff fc 	ld.w	r10,r7[-4]
80002a6e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a72:	2d ea       	sub	r10,-34
80002a74:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002a78:	a9 88       	lsr	r8,0x8
80002a7a:	5c 58       	castu.b	r8
80002a7c:	b2 88       	st.b	r9[0x0],r8
80002a7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a82:	a3 68       	lsl	r8,0x2
80002a84:	2f f8       	sub	r8,-1
80002a86:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002a8a:	10 09       	add	r9,r8
80002a8c:	ee fa ff fc 	ld.w	r10,r7[-4]
80002a90:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a94:	2d ea       	sub	r10,-34
80002a96:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002a9a:	b1 88       	lsr	r8,0x10
80002a9c:	5c 58       	castu.b	r8
80002a9e:	b2 88       	st.b	r9[0x0],r8
80002aa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002aa4:	a3 68       	lsl	r8,0x2
80002aa6:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002aaa:	10 09       	add	r9,r8
80002aac:	ee fa ff fc 	ld.w	r10,r7[-4]
80002ab0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002ab4:	2d ea       	sub	r10,-34
80002ab6:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002aba:	b9 88       	lsr	r8,0x18
80002abc:	5c 58       	castu.b	r8
80002abe:	b2 88       	st.b	r9[0x0],r8
    UNPACK32(len_b, ctx->block + pm_len - 4);

    sha256_transf(ctx, ctx->block, block_nb);

#ifndef UNROLL_LOOPS
    for (i = 0 ; i < 8; i++) {
80002ac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ac4:	2f f8       	sub	r8,-1
80002ac6:	ef 48 ff fc 	st.w	r7[-4],r8
80002aca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ace:	58 78       	cp.w	r8,7
80002ad0:	fe 9a ff b6 	brle	80002a3c <sha256_final+0x108>
   UNPACK32(ctx->h[4], &digest[16]);
   UNPACK32(ctx->h[5], &digest[20]);
   UNPACK32(ctx->h[6], &digest[24]);
   UNPACK32(ctx->h[7], &digest[28]);
#endif /* !UNROLL_LOOPS */
}
80002ad4:	2f ad       	sub	sp,-24
80002ad6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ada:	00 00       	add	r0,r0
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	e7 d2 80 00 	ldswp.w	r2,r3[0]
80002ae2:	23 e0       	sub	r0,62

80002ae4 <pbkdf2_func>:

volatile uint256_t var_Password;


void pbkdf2_func(uint8_t *password, uint8_t *derived_key)
{
80002ae4:	eb cd 40 80 	pushm	r7,lr
80002ae8:	1a 97       	mov	r7,sp
80002aea:	fa cd 00 98 	sub	sp,sp,152
80002aee:	ef 4c ff 6c 	st.w	r7[-148],r12
80002af2:	ef 4b ff 68 	st.w	r7[-152],r11
	unsigned short int iteration_count;
	unsigned char mac[hLen];
	unsigned char Ubuffer[hLen+4] = {0};
80002af6:	ee c8 00 50 	sub	r8,r7,80
80002afa:	30 0a       	mov	r10,0
80002afc:	30 0b       	mov	r11,0
80002afe:	f0 eb 00 00 	st.d	r8[0],r10
80002b02:	2f 88       	sub	r8,-8
80002b04:	30 0a       	mov	r10,0
80002b06:	30 0b       	mov	r11,0
80002b08:	f0 eb 00 00 	st.d	r8[0],r10
80002b0c:	2f 88       	sub	r8,-8
80002b0e:	30 0a       	mov	r10,0
80002b10:	30 0b       	mov	r11,0
80002b12:	f0 eb 00 00 	st.d	r8[0],r10
80002b16:	2f 88       	sub	r8,-8
80002b18:	30 0a       	mov	r10,0
80002b1a:	30 0b       	mov	r11,0
80002b1c:	f0 eb 00 00 	st.d	r8[0],r10
80002b20:	2f 88       	sub	r8,-8
80002b22:	30 09       	mov	r9,0
80002b24:	91 09       	st.w	r8[0x0],r9
80002b26:	2f c8       	sub	r8,-4
	unsigned char Tbuffer[hLen] = {0};
80002b28:	ee c8 00 70 	sub	r8,r7,112
80002b2c:	30 0a       	mov	r10,0
80002b2e:	30 0b       	mov	r11,0
80002b30:	f0 eb 00 00 	st.d	r8[0],r10
80002b34:	2f 88       	sub	r8,-8
80002b36:	30 0a       	mov	r10,0
80002b38:	30 0b       	mov	r11,0
80002b3a:	f0 eb 00 00 	st.d	r8[0],r10
80002b3e:	2f 88       	sub	r8,-8
80002b40:	30 0a       	mov	r10,0
80002b42:	30 0b       	mov	r11,0
80002b44:	f0 eb 00 00 	st.d	r8[0],r10
80002b48:	2f 88       	sub	r8,-8
80002b4a:	30 0a       	mov	r10,0
80002b4c:	30 0b       	mov	r11,0
80002b4e:	f0 eb 00 00 	st.d	r8[0],r10
80002b52:	2f 88       	sub	r8,-8
	unsigned char Fbuffer[hLen] = {0};
80002b54:	ee c8 00 90 	sub	r8,r7,144
80002b58:	30 0a       	mov	r10,0
80002b5a:	30 0b       	mov	r11,0
80002b5c:	f0 eb 00 00 	st.d	r8[0],r10
80002b60:	2f 88       	sub	r8,-8
80002b62:	30 0a       	mov	r10,0
80002b64:	30 0b       	mov	r11,0
80002b66:	f0 eb 00 00 	st.d	r8[0],r10
80002b6a:	2f 88       	sub	r8,-8
80002b6c:	30 0a       	mov	r10,0
80002b6e:	30 0b       	mov	r11,0
80002b70:	f0 eb 00 00 	st.d	r8[0],r10
80002b74:	2f 88       	sub	r8,-8
80002b76:	30 0a       	mov	r10,0
80002b78:	30 0b       	mov	r11,0
80002b7a:	f0 eb 00 00 	st.d	r8[0],r10
80002b7e:	2f 88       	sub	r8,-8
	unsigned char total_blocks = hLen / hLen, block_num = 1;
80002b80:	30 18       	mov	r8,1
80002b82:	ef 68 ff f6 	st.b	r7[-10],r8
80002b86:	30 18       	mov	r8,1
80002b88:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char *Salt = (unsigned char *)Stored_values_ram.salt;
80002b8c:	4e 68       	lddpc	r8,80002d24 <pbkdf2_func+0x240>
80002b8e:	f0 c8 ff 60 	sub	r8,r8,-160
80002b92:	ef 48 ff f8 	st.w	r7[-8],r8
	
	while (block_num <= total_blocks)
80002b96:	cb c8       	rjmp	80002d0e <pbkdf2_func+0x22a>
	{
		iteration_count = 0;
80002b98:	30 08       	mov	r8,0
80002b9a:	ef 58 ff f4 	st.h	r7[-12],r8
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002b9e:	c9 b8       	rjmp	80002cd4 <pbkdf2_func+0x1f0>
		{
			unsigned short int i;
			if (iteration_count == 0)
80002ba0:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002ba4:	30 08       	mov	r8,0
80002ba6:	f0 09 19 00 	cp.h	r9,r8
80002baa:	c5 e1       	brne	80002c66 <pbkdf2_func+0x182>
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002bac:	30 08       	mov	r8,0
80002bae:	ef 58 ff fe 	st.h	r7[-2],r8
80002bb2:	c1 38       	rjmp	80002bd8 <pbkdf2_func+0xf4>
				{
					Ubuffer[i] = Salt[i];
80002bb4:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002bb8:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002bbc:	ee fa ff f8 	ld.w	r10,r7[-8]
80002bc0:	f4 08 00 08 	add	r8,r10,r8
80002bc4:	11 88       	ld.ub	r8,r8[0x0]
80002bc6:	ee 09 00 09 	add	r9,r7,r9
80002bca:	f3 68 ff b0 	st.b	r9[-80],r8
		{
			unsigned short int i;
			if (iteration_count == 0)
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002bce:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002bd2:	2f f8       	sub	r8,-1
80002bd4:	ef 58 ff fe 	st.h	r7[-2],r8
80002bd8:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80002bdc:	31 f8       	mov	r8,31
80002bde:	f0 09 19 00 	cp.h	r9,r8
80002be2:	fe 98 ff e9 	brls	80002bb4 <pbkdf2_func+0xd0>
				{
					Ubuffer[i] = Salt[i];
				}
				Ubuffer[i++] = (block_num >> 24) & 0xFF;
80002be6:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002bea:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002bee:	b9 48       	asr	r8,0x18
80002bf0:	5c 58       	castu.b	r8
80002bf2:	ee 09 00 09 	add	r9,r7,r9
80002bf6:	f3 68 ff b0 	st.b	r9[-80],r8
80002bfa:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002bfe:	2f f8       	sub	r8,-1
80002c00:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 16) & 0xFF;
80002c04:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002c08:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002c0c:	b1 48       	asr	r8,0x10
80002c0e:	5c 58       	castu.b	r8
80002c10:	ee 09 00 09 	add	r9,r7,r9
80002c14:	f3 68 ff b0 	st.b	r9[-80],r8
80002c18:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002c1c:	2f f8       	sub	r8,-1
80002c1e:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 8) & 0xFF;
80002c22:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002c26:	ee 08 00 09 	add	r9,r7,r8
80002c2a:	30 08       	mov	r8,0
80002c2c:	f3 68 ff b0 	st.b	r9[-80],r8
80002c30:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002c34:	2f f8       	sub	r8,-1
80002c36:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i] = (block_num >> 0) & 0xFF;
80002c3a:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002c3e:	ee 08 00 09 	add	r9,r7,r8
80002c42:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002c46:	f3 68 ff b0 	st.b	r9[-80],r8
				hmac_sha256(password, 32, Ubuffer, 36, mac, 32);
80002c4a:	ee c8 00 2c 	sub	r8,r7,44
80002c4e:	ee ca 00 50 	sub	r10,r7,80
80002c52:	32 09       	mov	r9,32
80002c54:	1a d9       	st.w	--sp,r9
80002c56:	32 49       	mov	r9,36
80002c58:	32 0b       	mov	r11,32
80002c5a:	ee fc ff 6c 	ld.w	r12,r7[-148]
80002c5e:	f0 1f 00 33 	mcall	80002d28 <pbkdf2_func+0x244>
80002c62:	2f fd       	sub	sp,-4
80002c64:	c0 e8       	rjmp	80002c80 <pbkdf2_func+0x19c>
			}
			else
			{
				hmac_sha256(password, 32, Ubuffer, 32, mac, 32);
80002c66:	ee c8 00 2c 	sub	r8,r7,44
80002c6a:	ee ca 00 50 	sub	r10,r7,80
80002c6e:	32 09       	mov	r9,32
80002c70:	1a d9       	st.w	--sp,r9
80002c72:	32 09       	mov	r9,32
80002c74:	32 0b       	mov	r11,32
80002c76:	ee fc ff 6c 	ld.w	r12,r7[-148]
80002c7a:	f0 1f 00 2c 	mcall	80002d28 <pbkdf2_func+0x244>
80002c7e:	2f fd       	sub	sp,-4
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
80002c80:	ee c9 00 2c 	sub	r9,r7,44
80002c84:	ee c8 00 90 	sub	r8,r7,144
80002c88:	30 8a       	mov	r10,8
80002c8a:	12 9b       	mov	r11,r9
80002c8c:	10 9c       	mov	r12,r8
80002c8e:	f0 1f 00 28 	mcall	80002d2c <pbkdf2_func+0x248>
			
			for (i = 0; i < hLen; i++)
80002c92:	30 08       	mov	r8,0
80002c94:	ef 58 ff fc 	st.h	r7[-4],r8
80002c98:	c1 28       	rjmp	80002cbc <pbkdf2_func+0x1d8>
			{
				Ubuffer[i] = mac[i];
80002c9a:	ef 19 ff fc 	ld.uh	r9,r7[-4]
80002c9e:	ef 18 ff fc 	ld.uh	r8,r7[-4]
80002ca2:	ee 08 00 08 	add	r8,r7,r8
80002ca6:	f1 38 ff d4 	ld.ub	r8,r8[-44]
80002caa:	ee 09 00 09 	add	r9,r7,r9
80002cae:	f3 68 ff b0 	st.b	r9[-80],r8
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
			
			for (i = 0; i < hLen; i++)
80002cb2:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80002cb6:	2f f8       	sub	r8,-1
80002cb8:	ef 58 ff fc 	st.h	r7[-4],r8
80002cbc:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80002cc0:	31 f8       	mov	r8,31
80002cc2:	f0 09 19 00 	cp.h	r9,r8
80002cc6:	fe 98 ff ea 	brls	80002c9a <pbkdf2_func+0x1b6>
			{
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
80002cca:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80002cce:	2f f8       	sub	r8,-1
80002cd0:	ef 58 ff f4 	st.h	r7[-12],r8
	unsigned char *Salt = (unsigned char *)Stored_values_ram.salt;
	
	while (block_num <= total_blocks)
	{
		iteration_count = 0;
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002cd4:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002cd8:	e0 68 03 e7 	mov	r8,999
80002cdc:	f0 09 19 00 	cp.h	r9,r8
80002ce0:	fe 98 ff 60 	brls	80002ba0 <pbkdf2_func+0xbc>
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
80002ce4:	ee c9 00 90 	sub	r9,r7,144
80002ce8:	ee f8 ff 68 	ld.w	r8,r7[-152]
80002cec:	30 8a       	mov	r10,8
80002cee:	12 9b       	mov	r11,r9
80002cf0:	10 9c       	mov	r12,r8
80002cf2:	f0 1f 00 0f 	mcall	80002d2c <pbkdf2_func+0x248>
		memset(Fbuffer, 0, 32);		
80002cf6:	ee c8 00 90 	sub	r8,r7,144
80002cfa:	32 0a       	mov	r10,32
80002cfc:	30 0b       	mov	r11,0
80002cfe:	10 9c       	mov	r12,r8
80002d00:	f0 1f 00 0c 	mcall	80002d30 <pbkdf2_func+0x24c>
		block_num++;
80002d04:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002d08:	2f f8       	sub	r8,-1
80002d0a:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char Tbuffer[hLen] = {0};
	unsigned char Fbuffer[hLen] = {0};
	unsigned char total_blocks = hLen / hLen, block_num = 1;
	unsigned char *Salt = (unsigned char *)Stored_values_ram.salt;
	
	while (block_num <= total_blocks)
80002d0e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80002d12:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80002d16:	f0 09 18 00 	cp.b	r9,r8
80002d1a:	fe 98 ff 3f 	brls	80002b98 <pbkdf2_func+0xb4>
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
		memset(Fbuffer, 0, 32);		
		block_num++;
	}
80002d1e:	2d ad       	sub	sp,-152
80002d20:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d24:	00 00       	add	r0,r0
80002d26:	0a 20       	rsub	r0,r5
80002d28:	80 00       	ld.sh	r0,r0[0x0]
80002d2a:	23 74       	sub	r4,55
80002d2c:	80 00       	ld.sh	r0,r0[0x0]
80002d2e:	2e 68       	sub	r8,-26
80002d30:	80 00       	ld.sh	r0,r0[0x0]
80002d32:	e7 d2       	*unknown*

80002d34 <encrypt_password>:
volatile uint256_t var_Salt;
volatile uint8_t DK_aes_key[32] = {0};


void encrypt_password(uint32_t *password, uint32_t *digest)
{
80002d34:	eb cd 40 80 	pushm	r7,lr
80002d38:	1a 97       	mov	r7,sp
80002d3a:	20 2d       	sub	sp,8
80002d3c:	ef 4c ff fc 	st.w	r7[-4],r12
80002d40:	ef 4b ff f8 	st.w	r7[-8],r11
	//uint8_t temp_dk[32] = {0};
	pbkdf2_func((uint8_t *)password, DK_aes_key);
80002d44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002d48:	48 cb       	lddpc	r11,80002d78 <encrypt_password+0x44>
80002d4a:	10 9c       	mov	r12,r8
80002d4c:	f0 1f 00 0c 	mcall	80002d7c <encrypt_password+0x48>
	sha256(DK_aes_key, 32, (uint8_t *)digest);
80002d50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d54:	10 9a       	mov	r10,r8
80002d56:	32 0b       	mov	r11,32
80002d58:	48 8c       	lddpc	r12,80002d78 <encrypt_password+0x44>
80002d5a:	f0 1f 00 0a 	mcall	80002d80 <encrypt_password+0x4c>
	apply_aes_encryption(&AVR32_AES, digest, 0, 32, 0x00000000);
80002d5e:	30 08       	mov	r8,0
80002d60:	32 09       	mov	r9,32
80002d62:	30 0a       	mov	r10,0
80002d64:	ee fb ff f8 	ld.w	r11,r7[-8]
80002d68:	fc 7c 00 00 	mov	r12,-196608
80002d6c:	f0 1f 00 06 	mcall	80002d84 <encrypt_password+0x50>
}
80002d70:	2f ed       	sub	sp,-8
80002d72:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d76:	00 00       	add	r0,r0
80002d78:	00 00       	add	r0,r0
80002d7a:	02 94       	mov	r4,r1
80002d7c:	80 00       	ld.sh	r0,r0[0x0]
80002d7e:	2a e4       	sub	r4,-82
80002d80:	80 00       	ld.sh	r0,r0[0x0]
80002d82:	27 5c       	sub	r12,117
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	46 50       	lddsp	r0,sp[0x194]

80002d88 <random_lcg>:


uint32_t random_lcg (void)
{
80002d88:	eb cd 40 80 	pushm	r7,lr
80002d8c:	1a 97       	mov	r7,sp
	rseed = (rseed * 1103515245 + 12345) & RAND_MAX;
80002d8e:	48 a8       	lddpc	r8,80002db4 <random_lcg+0x2c>
80002d90:	70 09       	ld.w	r9,r8[0x0]
80002d92:	e0 68 4e 6d 	mov	r8,20077
80002d96:	ea 18 41 c6 	orh	r8,0x41c6
80002d9a:	f2 08 02 48 	mul	r8,r9,r8
80002d9e:	f0 c8 cf c7 	sub	r8,r8,-12345
80002da2:	f3 d8 c0 1f 	bfextu	r9,r8,0x0,0x1f
80002da6:	48 48       	lddpc	r8,80002db4 <random_lcg+0x2c>
80002da8:	91 09       	st.w	r8[0x0],r9
	return rseed;
80002daa:	48 38       	lddpc	r8,80002db4 <random_lcg+0x2c>
80002dac:	70 08       	ld.w	r8,r8[0x0]
}
80002dae:	10 9c       	mov	r12,r8
80002db0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002db4:	00 00       	add	r0,r0
80002db6:	02 8c       	andn	r12,r1

80002db8 <calculate_salt>:

//void random_256 ()

void calculate_salt(void)
{
80002db8:	eb cd 40 80 	pushm	r7,lr
80002dbc:	1a 97       	mov	r7,sp
80002dbe:	20 1d       	sub	sp,4
	uint32_t random_value = 0;
80002dc0:	30 08       	mov	r8,0
80002dc2:	ef 48 ff fc 	st.w	r7[-4],r8
	calculate_hash(pass_code, 8, var_Hkey.index); // Calculates sha256 of the keys pressed in var_W*10 msec interval and stores it in var_Hkey
80002dc6:	49 e9       	lddpc	r9,80002e3c <calculate_salt+0x84>
80002dc8:	49 e8       	lddpc	r8,80002e40 <calculate_salt+0x88>
80002dca:	70 08       	ld.w	r8,r8[0x0]
80002dcc:	12 9a       	mov	r10,r9
80002dce:	30 8b       	mov	r11,8
80002dd0:	10 9c       	mov	r12,r8
80002dd2:	f0 1f 00 1d 	mcall	80002e44 <calculate_salt+0x8c>
 	
	random_value = random_lcg();	
80002dd6:	f0 1f 00 1d 	mcall	80002e48 <calculate_salt+0x90>
80002dda:	18 98       	mov	r8,r12
80002ddc:	ef 48 ff fc 	st.w	r7[-4],r8
	
	calculate_hash(&random_value, 1, var_R.index);
80002de0:	49 b9       	lddpc	r9,80002e4c <calculate_salt+0x94>
80002de2:	ee c8 00 04 	sub	r8,r7,4
80002de6:	12 9a       	mov	r10,r9
80002de8:	30 1b       	mov	r11,1
80002dea:	10 9c       	mov	r12,r8
80002dec:	f0 1f 00 16 	mcall	80002e44 <calculate_salt+0x8c>
	
	xor_func(var_R.index, var_Hkey.index, 8);
80002df0:	49 39       	lddpc	r9,80002e3c <calculate_salt+0x84>
80002df2:	49 78       	lddpc	r8,80002e4c <calculate_salt+0x94>
80002df4:	30 8a       	mov	r10,8
80002df6:	12 9b       	mov	r11,r9
80002df8:	10 9c       	mov	r12,r8
80002dfa:	f0 1f 00 16 	mcall	80002e50 <calculate_salt+0x98>
	
	calculate_hash(var_R.index, 8, var_T.index);
80002dfe:	49 69       	lddpc	r9,80002e54 <calculate_salt+0x9c>
80002e00:	49 38       	lddpc	r8,80002e4c <calculate_salt+0x94>
80002e02:	12 9a       	mov	r10,r9
80002e04:	30 8b       	mov	r11,8
80002e06:	10 9c       	mov	r12,r8
80002e08:	f0 1f 00 0f 	mcall	80002e44 <calculate_salt+0x8c>
 	
	xor_func(var_Salt.index, var_T.index, 8);
80002e0c:	49 29       	lddpc	r9,80002e54 <calculate_salt+0x9c>
80002e0e:	49 38       	lddpc	r8,80002e58 <calculate_salt+0xa0>
80002e10:	30 8a       	mov	r10,8
80002e12:	12 9b       	mov	r11,r9
80002e14:	10 9c       	mov	r12,r8
80002e16:	f0 1f 00 0f 	mcall	80002e50 <calculate_salt+0x98>
	
	if (enter_button_status == THIRD_TIME_PRESSED)
80002e1a:	49 18       	lddpc	r8,80002e5c <calculate_salt+0xa4>
80002e1c:	11 88       	ld.ub	r8,r8[0x0]
80002e1e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002e22:	30 68       	mov	r8,6
80002e24:	f0 09 18 00 	cp.b	r9,r8
80002e28:	c0 41       	brne	80002e30 <calculate_salt+0x78>
	{
		save_salt_to_mcu();
80002e2a:	f0 1f 00 0e 	mcall	80002e60 <calculate_salt+0xa8>
80002e2e:	c0 38       	rjmp	80002e34 <calculate_salt+0x7c>
	}
	else
	{
		Start_W_timer();	
80002e30:	f0 1f 00 0d 	mcall	80002e64 <calculate_salt+0xac>
	}
	
}
80002e34:	2f fd       	sub	sp,-4
80002e36:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e3a:	00 00       	add	r0,r0
80002e3c:	00 00       	add	r0,r0
80002e3e:	0a e4       	st.h	--r5,r4
80002e40:	00 00       	add	r0,r0
80002e42:	0b 64       	ld.uh	r4,--r5
80002e44:	80 00       	ld.sh	r0,r0[0x0]
80002e46:	30 a4       	mov	r4,10
80002e48:	80 00       	ld.sh	r0,r0[0x0]
80002e4a:	2d 88       	sub	r8,-40
80002e4c:	00 00       	add	r0,r0
80002e4e:	0b 24       	ld.uh	r4,r5++
80002e50:	80 00       	ld.sh	r0,r0[0x0]
80002e52:	2e 68       	sub	r8,-26
80002e54:	00 00       	add	r0,r0
80002e56:	0b 04       	ld.w	r4,r5++
80002e58:	00 00       	add	r0,r0
80002e5a:	0b 44       	ld.w	r4,--r5
80002e5c:	00 00       	add	r0,r0
80002e5e:	03 fa       	ld.ub	r10,r1[0x7]
80002e60:	80 00       	ld.sh	r0,r0[0x0]
80002e62:	2e d4       	sub	r4,-19
80002e64:	80 00       	ld.sh	r0,r0[0x0]
80002e66:	30 38       	mov	r8,3

80002e68 <xor_func>:

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
80002e68:	eb cd 40 80 	pushm	r7,lr
80002e6c:	1a 97       	mov	r7,sp
80002e6e:	20 4d       	sub	sp,16
80002e70:	ef 4c ff f8 	st.w	r7[-8],r12
80002e74:	ef 4b ff f4 	st.w	r7[-12],r11
80002e78:	14 98       	mov	r8,r10
80002e7a:	ef 68 ff f0 	st.b	r7[-16],r8
	unsigned char i = 0;
80002e7e:	30 08       	mov	r8,0
80002e80:	ef 68 ff ff 	st.b	r7[-1],r8
	while (i++ < len)
80002e84:	c1 58       	rjmp	80002eae <xor_func+0x46>
	{
		*value1 = *value1 ^ *value2;
80002e86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002e8a:	70 09       	ld.w	r9,r8[0x0]
80002e8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e90:	70 08       	ld.w	r8,r8[0x0]
80002e92:	10 59       	eor	r9,r8
80002e94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002e98:	91 09       	st.w	r8[0x0],r9
		value1++;	value2++;
80002e9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002e9e:	2f c8       	sub	r8,-4
80002ea0:	ef 48 ff f8 	st.w	r7[-8],r8
80002ea4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002ea8:	2f c8       	sub	r8,-4
80002eaa:	ef 48 ff f4 	st.w	r7[-12],r8
}

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
	unsigned char i = 0;
	while (i++ < len)
80002eae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002eb2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002eb6:	f0 09 18 00 	cp.b	r9,r8
80002eba:	5f 38       	srlo	r8
80002ebc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002ec0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002ec4:	2f f8       	sub	r8,-1
80002ec6:	ef 68 ff ff 	st.b	r7[-1],r8
80002eca:	58 09       	cp.w	r9,0
80002ecc:	cd d1       	brne	80002e86 <xor_func+0x1e>
	{
		*value1 = *value1 ^ *value2;
		value1++;	value2++;
	}
}
80002ece:	2f cd       	sub	sp,-16
80002ed0:	e3 cd 80 80 	ldm	sp++,r7,pc

80002ed4 <save_salt_to_mcu>:

void save_salt_to_mcu(void)
{
80002ed4:	eb cd 40 80 	pushm	r7,lr
80002ed8:	1a 97       	mov	r7,sp
80002eda:	20 9d       	sub	sp,36
	//volatile salt_t *salt = &SALT_STRUCT;
	uint32_t temp_encypted_password[8] = {0};
80002edc:	ee c8 00 24 	sub	r8,r7,36
80002ee0:	30 0a       	mov	r10,0
80002ee2:	30 0b       	mov	r11,0
80002ee4:	f0 eb 00 00 	st.d	r8[0],r10
80002ee8:	2f 88       	sub	r8,-8
80002eea:	30 0a       	mov	r10,0
80002eec:	30 0b       	mov	r11,0
80002eee:	f0 eb 00 00 	st.d	r8[0],r10
80002ef2:	2f 88       	sub	r8,-8
80002ef4:	30 0a       	mov	r10,0
80002ef6:	30 0b       	mov	r11,0
80002ef8:	f0 eb 00 00 	st.d	r8[0],r10
80002efc:	2f 88       	sub	r8,-8
80002efe:	30 0a       	mov	r10,0
80002f00:	30 0b       	mov	r11,0
80002f02:	f0 eb 00 00 	st.d	r8[0],r10
80002f06:	2f 88       	sub	r8,-8
	uint8_t i;
	
	memcpy((uint8_t *)Stored_values_ram.salt, (const uint8_t *)var_Salt.index, 32);
80002f08:	48 e8       	lddpc	r8,80002f40 <save_salt_to_mcu+0x6c>
80002f0a:	f0 c8 ff 60 	sub	r8,r8,-160
80002f0e:	32 0a       	mov	r10,32
80002f10:	48 db       	lddpc	r11,80002f44 <save_salt_to_mcu+0x70>
80002f12:	10 9c       	mov	r12,r8
80002f14:	f0 1f 00 0d 	mcall	80002f48 <save_salt_to_mcu+0x74>
	encrypt_password(temp_password1, temp_encypted_password);
80002f18:	ee c8 00 24 	sub	r8,r7,36
80002f1c:	10 9b       	mov	r11,r8
80002f1e:	48 cc       	lddpc	r12,80002f4c <save_salt_to_mcu+0x78>
80002f20:	f0 1f 00 0c 	mcall	80002f50 <save_salt_to_mcu+0x7c>
	memcpy((uint8_t *)Stored_values_ram.unlock_password, (const uint8_t *)temp_encypted_password, 32);	
80002f24:	ee c8 00 24 	sub	r8,r7,36
80002f28:	32 0a       	mov	r10,32
80002f2a:	10 9b       	mov	r11,r8
80002f2c:	48 5c       	lddpc	r12,80002f40 <save_salt_to_mcu+0x6c>
80002f2e:	f0 1f 00 07 	mcall	80002f48 <save_salt_to_mcu+0x74>
	Calculate_block_crc();
80002f32:	f0 1f 00 09 	mcall	80002f54 <save_salt_to_mcu+0x80>
	Update_stored_values();
80002f36:	f0 1f 00 09 	mcall	80002f58 <save_salt_to_mcu+0x84>
	
}
80002f3a:	2f 7d       	sub	sp,-36
80002f3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f40:	00 00       	add	r0,r0
80002f42:	0a 20       	rsub	r0,r5
80002f44:	00 00       	add	r0,r0
80002f46:	0b 44       	ld.w	r4,--r5
80002f48:	80 00       	ld.sh	r0,r0[0x0]
80002f4a:	e6 8a 00 00 	brle	800c2f4a <Stored_values_flash+0x8314a>
80002f4e:	02 68       	and	r8,r1
80002f50:	80 00       	ld.sh	r0,r0[0x0]
80002f52:	2d 34       	sub	r4,-45
80002f54:	80 00       	ld.sh	r0,r0[0x0]
80002f56:	30 7c       	mov	r12,7
80002f58:	80 00       	ld.sh	r0,r0[0x0]
80002f5a:	2f f0       	sub	r0,-1

80002f5c <save_sequence_to_mcu>:

void save_sequence_to_mcu(void)
{
80002f5c:	eb cd 40 80 	pushm	r7,lr
80002f60:	1a 97       	mov	r7,sp
80002f62:	20 8d       	sub	sp,32
	uint32_t temp_digest[8];
	
	hash_the_password(temp_password1, temp_digest);
80002f64:	ee c8 00 20 	sub	r8,r7,32
80002f68:	10 9b       	mov	r11,r8
80002f6a:	48 ac       	lddpc	r12,80002f90 <save_sequence_to_mcu+0x34>
80002f6c:	f0 1f 00 0a 	mcall	80002f94 <save_sequence_to_mcu+0x38>
	memcpy_ram2ram((uint8_t *)Stored_values_ram.device_id_confirm, (const uint8_t *)temp_digest, 32);
80002f70:	ee c9 00 20 	sub	r9,r7,32
80002f74:	48 98       	lddpc	r8,80002f98 <save_sequence_to_mcu+0x3c>
80002f76:	2a 08       	sub	r8,-96
80002f78:	32 0a       	mov	r10,32
80002f7a:	12 9b       	mov	r11,r9
80002f7c:	10 9c       	mov	r12,r8
80002f7e:	f0 1f 00 08 	mcall	80002f9c <save_sequence_to_mcu+0x40>
	Calculate_block_crc();
80002f82:	f0 1f 00 08 	mcall	80002fa0 <save_sequence_to_mcu+0x44>
	Update_stored_values();
80002f86:	f0 1f 00 08 	mcall	80002fa4 <save_sequence_to_mcu+0x48>
}
80002f8a:	2f 8d       	sub	sp,-32
80002f8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f90:	00 00       	add	r0,r0
80002f92:	02 68       	and	r8,r1
80002f94:	80 00       	ld.sh	r0,r0[0x0]
80002f96:	2f a8       	sub	r8,-6
80002f98:	00 00       	add	r0,r0
80002f9a:	0a 20       	rsub	r0,r5
80002f9c:	80 00       	ld.sh	r0,r0[0x0]
80002f9e:	e6 8a 80 00 	brle	800d2f9e <Stored_values_flash+0x9319e>
80002fa2:	30 7c       	mov	r12,7
80002fa4:	80 00       	ld.sh	r0,r0[0x0]
80002fa6:	2f f0       	sub	r0,-1

80002fa8 <hash_the_password>:

void hash_the_password(uint32_t *password, uint32_t *digest)
{
80002fa8:	eb cd 40 80 	pushm	r7,lr
80002fac:	1a 97       	mov	r7,sp
80002fae:	20 2d       	sub	sp,8
80002fb0:	ef 4c ff fc 	st.w	r7[-4],r12
80002fb4:	ef 4b ff f8 	st.w	r7[-8],r11
	xor_func(password, Stored_values_ram.salt, 8);
80002fb8:	48 b8       	lddpc	r8,80002fe4 <hash_the_password+0x3c>
80002fba:	f0 c8 ff 60 	sub	r8,r8,-160
80002fbe:	30 8a       	mov	r10,8
80002fc0:	10 9b       	mov	r11,r8
80002fc2:	ee fc ff fc 	ld.w	r12,r7[-4]
80002fc6:	f0 1f 00 09 	mcall	80002fe8 <hash_the_password+0x40>
	sha256((uint8_t *)password, 32, (uint8_t *)digest);	
80002fca:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002fce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002fd2:	12 9a       	mov	r10,r9
80002fd4:	32 0b       	mov	r11,32
80002fd6:	10 9c       	mov	r12,r8
80002fd8:	f0 1f 00 05 	mcall	80002fec <hash_the_password+0x44>
}
80002fdc:	2f ed       	sub	sp,-8
80002fde:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fe2:	00 00       	add	r0,r0
80002fe4:	00 00       	add	r0,r0
80002fe6:	0a 20       	rsub	r0,r5
80002fe8:	80 00       	ld.sh	r0,r0[0x0]
80002fea:	2e 68       	sub	r8,-26
80002fec:	80 00       	ld.sh	r0,r0[0x0]
80002fee:	27 5c       	sub	r12,117

80002ff0 <Update_stored_values>:

void Update_stored_values(void)
{
80002ff0:	eb cd 40 80 	pushm	r7,lr
80002ff4:	1a 97       	mov	r7,sp
	flashc_memcpy((void *)&Stored_values_flash, (void *)&Stored_values_ram, sizeof(Stored_values_ram), true);
80002ff6:	30 19       	mov	r9,1
80002ff8:	e0 6a 00 c4 	mov	r10,196
80002ffc:	48 3b       	lddpc	r11,80003008 <Update_stored_values+0x18>
80002ffe:	48 4c       	lddpc	r12,8000300c <Update_stored_values+0x1c>
80003000:	f0 1f 00 04 	mcall	80003010 <Update_stored_values+0x20>
}
80003004:	e3 cd 80 80 	ldm	sp++,r7,pc
80003008:	00 00       	add	r0,r0
8000300a:	0a 20       	rsub	r0,r5
8000300c:	80 03       	ld.sh	r3,r0[0x0]
8000300e:	fe 00       	*unknown*
80003010:	80 00       	ld.sh	r0,r0[0x0]
80003012:	86 a0       	ld.uh	r0,r3[0x4]

80003014 <Load_stored_values>:

void Load_stored_values(void)
{
80003014:	eb cd 40 80 	pushm	r7,lr
80003018:	1a 97       	mov	r7,sp
	memcpy_code2ram((void *)&Stored_values_ram, (uint8_t *)&Stored_values_flash, sizeof(Stored_values_ram));
8000301a:	e0 6a 00 c4 	mov	r10,196
8000301e:	48 4b       	lddpc	r11,8000302c <Load_stored_values+0x18>
80003020:	48 4c       	lddpc	r12,80003030 <Load_stored_values+0x1c>
80003022:	f0 1f 00 05 	mcall	80003034 <Load_stored_values+0x20>
}
80003026:	e3 cd 80 80 	ldm	sp++,r7,pc
8000302a:	00 00       	add	r0,r0
8000302c:	80 03       	ld.sh	r3,r0[0x0]
8000302e:	fe 00 00 00 	add	r0,pc,r0
80003032:	0a 20       	rsub	r0,r5
80003034:	80 00       	ld.sh	r0,r0[0x0]
80003036:	e6 8a eb cd 	brle	800e07d0 <Stored_values_flash+0xa09d0>

80003038 <Start_W_timer>:

void Start_W_timer(void)
{
80003038:	eb cd 40 80 	pushm	r7,lr
8000303c:	1a 97       	mov	r7,sp
	var_W = random_lcg() % 500 + 50;
8000303e:	f0 1f 00 0d 	mcall	80003070 <Start_W_timer+0x38>
80003042:	18 9a       	mov	r10,r12
80003044:	e0 68 4d d3 	mov	r8,19923
80003048:	ea 18 10 62 	orh	r8,0x1062
8000304c:	f4 08 06 48 	mulu.d	r8,r10,r8
80003050:	f2 08 16 05 	lsr	r8,r9,0x5
80003054:	e0 69 01 f4 	mov	r9,500
80003058:	b3 38       	mul	r8,r9
8000305a:	f4 08 01 08 	sub	r8,r10,r8
8000305e:	f0 c9 ff ce 	sub	r9,r8,-50
80003062:	48 58       	lddpc	r8,80003074 <Start_W_timer+0x3c>
80003064:	91 09       	st.w	r8[0x0],r9
	var_W_ticks = 0;	
80003066:	48 58       	lddpc	r8,80003078 <Start_W_timer+0x40>
80003068:	30 09       	mov	r9,0
8000306a:	91 09       	st.w	r8[0x0],r9
}
8000306c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003070:	80 00       	ld.sh	r0,r0[0x0]
80003072:	2d 88       	sub	r8,-40
80003074:	00 00       	add	r0,r0
80003076:	01 28       	ld.uh	r8,r0++
80003078:	00 00       	add	r0,r0
8000307a:	02 90       	mov	r0,r1

8000307c <Calculate_block_crc>:

void Calculate_block_crc(void)
{
8000307c:	eb cd 40 80 	pushm	r7,lr
80003080:	1a 97       	mov	r7,sp
	//uint16_t temp_block_crc;
	Stored_values_ram.block_crc = crcFast((const uint8_t *)&Stored_values_ram, 192);
80003082:	48 78       	lddpc	r8,8000309c <Calculate_block_crc+0x20>
80003084:	e0 6b 00 c0 	mov	r11,192
80003088:	10 9c       	mov	r12,r8
8000308a:	f0 1f 00 06 	mcall	800030a0 <Calculate_block_crc+0x24>
8000308e:	18 98       	mov	r8,r12
80003090:	5c 88       	casts.h	r8
80003092:	48 39       	lddpc	r9,8000309c <Calculate_block_crc+0x20>
80003094:	f3 58 00 c0 	st.h	r9[192],r8
80003098:	e3 cd 80 80 	ldm	sp++,r7,pc
8000309c:	00 00       	add	r0,r0
8000309e:	0a 20       	rsub	r0,r5
800030a0:	80 00       	ld.sh	r0,r0[0x0]
800030a2:	20 9c       	sub	r12,9

800030a4 <calculate_hash>:
unsigned long Rotate_right (unsigned long number, int bits);



 void calculate_hash (uint32_t *input_array, uint8_t length, uint32_t *output_array)
 {
800030a4:	eb cd 40 c0 	pushm	r6-r7,lr
800030a8:	1a 97       	mov	r7,sp
800030aa:	20 ed       	sub	sp,56
800030ac:	ef 4c ff d0 	st.w	r7[-48],r12
800030b0:	16 98       	mov	r8,r11
800030b2:	ef 4a ff c8 	st.w	r7[-56],r10
800030b6:	ef 68 ff cc 	st.b	r7[-52],r8
	 int i;
	 unsigned long int S0, S1;
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
800030ba:	fe f8 03 8a 	ld.w	r8,pc[906]
800030be:	ef 48 ff e0 	st.w	r7[-32],r8
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
800030c2:	fe f8 03 86 	ld.w	r8,pc[902]
800030c6:	ef 48 ff ec 	st.w	r7[-20],r8
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
800030ca:	30 08       	mov	r8,0
800030cc:	ef 48 ff d4 	st.w	r7[-44],r8
800030d0:	c1 68       	rjmp	800030fc <calculate_hash+0x58>
	 {
		 Key_ptr[i] = input_array[i];
800030d2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030d6:	a3 68       	lsl	r8,0x2
800030d8:	ee f9 ff e0 	ld.w	r9,r7[-32]
800030dc:	f2 08 00 08 	add	r8,r9,r8
800030e0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800030e4:	a3 69       	lsl	r9,0x2
800030e6:	ee fa ff d0 	ld.w	r10,r7[-48]
800030ea:	f4 09 00 09 	add	r9,r10,r9
800030ee:	72 09       	ld.w	r9,r9[0x0]
800030f0:	91 09       	st.w	r8[0x0],r9
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
800030f2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030f6:	2f f8       	sub	r8,-1
800030f8:	ef 48 ff d4 	st.w	r7[-44],r8
800030fc:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80003100:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003104:	10 39       	cp.w	r9,r8
80003106:	fe 99 ff e6 	brgt	800030d2 <calculate_hash+0x2e>
	 {
		 Key_ptr[i] = input_array[i];
	 }
	 
	 PadtheMessage(length << 2);
8000310a:	ef 38 ff cc 	ld.ub	r8,r7[-52]
8000310e:	a3 68       	lsl	r8,0x2
80003110:	5c 58       	castu.b	r8
80003112:	10 9c       	mov	r12,r8
80003114:	f0 1f 00 ce 	mcall	8000344c <calculate_hash+0x3a8>
	 
	 
	 W = Message_Schedule_W;
80003118:	fe f8 03 38 	ld.w	r8,pc[824]
8000311c:	ef 48 ff e4 	st.w	r7[-28],r8
	 M = (unsigned long int *)Padded_Message;
80003120:	fe f8 03 24 	ld.w	r8,pc[804]
80003124:	ef 48 ff e8 	st.w	r7[-24],r8
	 for (i = 0; i < 16; i++)
80003128:	30 08       	mov	r8,0
8000312a:	ef 48 ff d4 	st.w	r7[-44],r8
8000312e:	c1 68       	rjmp	8000315a <calculate_hash+0xb6>
	 {
		W[i] = M[i];
80003130:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003134:	a3 68       	lsl	r8,0x2
80003136:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000313a:	f2 08 00 08 	add	r8,r9,r8
8000313e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80003142:	a3 69       	lsl	r9,0x2
80003144:	ee fa ff e8 	ld.w	r10,r7[-24]
80003148:	f4 09 00 09 	add	r9,r10,r9
8000314c:	72 09       	ld.w	r9,r9[0x0]
8000314e:	91 09       	st.w	r8[0x0],r9
	 PadtheMessage(length << 2);
	 
	 
	 W = Message_Schedule_W;
	 M = (unsigned long int *)Padded_Message;
	 for (i = 0; i < 16; i++)
80003150:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003154:	2f f8       	sub	r8,-1
80003156:	ef 48 ff d4 	st.w	r7[-44],r8
8000315a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000315e:	58 f8       	cp.w	r8,15
80003160:	fe 9a ff e8 	brle	80003130 <calculate_hash+0x8c>
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
80003164:	31 08       	mov	r8,16
80003166:	ef 48 ff d4 	st.w	r7[-44],r8
8000316a:	c7 58       	rjmp	80003254 <calculate_hash+0x1b0>
	 {
		 S0 = Rotate_right(Message_Schedule_W[i - 15], 7) XOR Rotate_right(Message_Schedule_W[i - 15], 18) XOR (Message_Schedule_W[i - 15] >> 3);
8000316c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003170:	f0 c9 00 0f 	sub	r9,r8,15
80003174:	fe f8 02 dc 	ld.w	r8,pc[732]
80003178:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000317c:	30 7b       	mov	r11,7
8000317e:	10 9c       	mov	r12,r8
80003180:	f0 1f 00 b5 	mcall	80003454 <calculate_hash+0x3b0>
80003184:	18 96       	mov	r6,r12
80003186:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000318a:	f0 c9 00 0f 	sub	r9,r8,15
8000318e:	fe f8 02 c2 	ld.w	r8,pc[706]
80003192:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003196:	31 2b       	mov	r11,18
80003198:	10 9c       	mov	r12,r8
8000319a:	f0 1f 00 af 	mcall	80003454 <calculate_hash+0x3b0>
8000319e:	18 98       	mov	r8,r12
800031a0:	ed e8 20 09 	eor	r9,r6,r8
800031a4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031a8:	f0 ca 00 0f 	sub	r10,r8,15
800031ac:	fe f8 02 a4 	ld.w	r8,pc[676]
800031b0:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800031b4:	a3 98       	lsr	r8,0x3
800031b6:	f3 e8 20 08 	eor	r8,r9,r8
800031ba:	ef 48 ff d8 	st.w	r7[-40],r8
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
800031be:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031c2:	f0 c9 00 02 	sub	r9,r8,2
800031c6:	fe f8 02 8a 	ld.w	r8,pc[650]
800031ca:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800031ce:	31 1b       	mov	r11,17
800031d0:	10 9c       	mov	r12,r8
800031d2:	f0 1f 00 a1 	mcall	80003454 <calculate_hash+0x3b0>
800031d6:	18 96       	mov	r6,r12
800031d8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031dc:	f0 c9 00 02 	sub	r9,r8,2
800031e0:	fe f8 02 70 	ld.w	r8,pc[624]
800031e4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800031e8:	31 3b       	mov	r11,19
800031ea:	10 9c       	mov	r12,r8
800031ec:	f0 1f 00 9a 	mcall	80003454 <calculate_hash+0x3b0>
800031f0:	18 98       	mov	r8,r12
800031f2:	ed e8 20 09 	eor	r9,r6,r8
800031f6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031fa:	f0 ca 00 02 	sub	r10,r8,2
800031fe:	fe f8 02 52 	ld.w	r8,pc[594]
80003202:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003206:	ab 88       	lsr	r8,0xa
80003208:	f3 e8 20 08 	eor	r8,r9,r8
8000320c:	ef 48 ff dc 	st.w	r7[-36],r8
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
80003210:	ee f9 ff d4 	ld.w	r9,r7[-44]
80003214:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003218:	f0 ca 00 10 	sub	r10,r8,16
8000321c:	fe f8 02 34 	ld.w	r8,pc[564]
80003220:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80003224:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003228:	10 0a       	add	r10,r8
8000322a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000322e:	f0 cb 00 07 	sub	r11,r8,7
80003232:	fe f8 02 1e 	ld.w	r8,pc[542]
80003236:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000323a:	10 0a       	add	r10,r8
8000323c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003240:	10 0a       	add	r10,r8
80003242:	fe f8 02 0e 	ld.w	r8,pc[526]
80003246:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
8000324a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000324e:	2f f8       	sub	r8,-1
80003250:	ef 48 ff d4 	st.w	r7[-44],r8
80003254:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003258:	e0 48 00 3f 	cp.w	r8,63
8000325c:	fe 9a ff 88 	brle	8000316c <calculate_hash+0xc8>
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
80003260:	30 08       	mov	r8,0
80003262:	ef 48 ff d4 	st.w	r7[-44],r8
80003266:	c1 38       	rjmp	8000328c <calculate_hash+0x1e8>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
80003268:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000326c:	a3 68       	lsl	r8,0x2
8000326e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003272:	f2 08 00 08 	add	r8,r9,r8
80003276:	ee fa ff d4 	ld.w	r10,r7[-44]
8000327a:	4f 89       	lddpc	r9,80003458 <calculate_hash+0x3b4>
8000327c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80003280:	91 09       	st.w	r8[0x0],r9
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
80003282:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003286:	2f f8       	sub	r8,-1
80003288:	ef 48 ff d4 	st.w	r7[-44],r8
8000328c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003290:	58 78       	cp.w	r8,7
80003292:	fe 9a ff eb 	brle	80003268 <calculate_hash+0x1c4>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
80003296:	30 08       	mov	r8,0
80003298:	ef 48 ff d4 	st.w	r7[-44],r8
8000329c:	ca 68       	rjmp	800033e8 <calculate_hash+0x344>
	 {
		 unsigned long int maj, t2, ch, t1;
		 S0 = Rotate_right(chunk.a, 2) XOR Rotate_right(chunk.a, 13) XOR Rotate_right(chunk.a, 22);
8000329e:	4e b8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800032a0:	70 08       	ld.w	r8,r8[0x0]
800032a2:	30 2b       	mov	r11,2
800032a4:	10 9c       	mov	r12,r8
800032a6:	f0 1f 00 6c 	mcall	80003454 <calculate_hash+0x3b0>
800032aa:	18 96       	mov	r6,r12
800032ac:	4e 78       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800032ae:	70 08       	ld.w	r8,r8[0x0]
800032b0:	30 db       	mov	r11,13
800032b2:	10 9c       	mov	r12,r8
800032b4:	f0 1f 00 68 	mcall	80003454 <calculate_hash+0x3b0>
800032b8:	18 98       	mov	r8,r12
800032ba:	10 56       	eor	r6,r8
800032bc:	4e 38       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800032be:	70 08       	ld.w	r8,r8[0x0]
800032c0:	31 6b       	mov	r11,22
800032c2:	10 9c       	mov	r12,r8
800032c4:	f0 1f 00 64 	mcall	80003454 <calculate_hash+0x3b0>
800032c8:	18 98       	mov	r8,r12
800032ca:	ed e8 20 08 	eor	r8,r6,r8
800032ce:	ef 48 ff d8 	st.w	r7[-40],r8
		 maj = (chunk.a & chunk.b) XOR (chunk.a & chunk.c) XOR (chunk.b & chunk.c);
800032d2:	4d e8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800032d4:	70 09       	ld.w	r9,r8[0x0]
800032d6:	4d d8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800032d8:	70 18       	ld.w	r8,r8[0x4]
800032da:	10 69       	and	r9,r8
800032dc:	4d b8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800032de:	70 0a       	ld.w	r10,r8[0x0]
800032e0:	4d a8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800032e2:	70 28       	ld.w	r8,r8[0x8]
800032e4:	f5 e8 00 08 	and	r8,r10,r8
800032e8:	10 59       	eor	r9,r8
800032ea:	4d 88       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800032ec:	70 1a       	ld.w	r10,r8[0x4]
800032ee:	4d 78       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800032f0:	70 28       	ld.w	r8,r8[0x8]
800032f2:	f5 e8 00 08 	and	r8,r10,r8
800032f6:	f3 e8 20 08 	eor	r8,r9,r8
800032fa:	ef 48 ff f0 	st.w	r7[-16],r8
		 t2 = S0 + maj;
800032fe:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003302:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003306:	f2 08 00 08 	add	r8,r9,r8
8000330a:	ef 48 ff f4 	st.w	r7[-12],r8
		 S1 = Rotate_right(chunk.e, 6) XOR Rotate_right(chunk.e, 11) XOR Rotate_right(chunk.e, 25);
8000330e:	4c f8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
80003310:	70 48       	ld.w	r8,r8[0x10]
80003312:	30 6b       	mov	r11,6
80003314:	10 9c       	mov	r12,r8
80003316:	f0 1f 00 50 	mcall	80003454 <calculate_hash+0x3b0>
8000331a:	18 96       	mov	r6,r12
8000331c:	4c b8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
8000331e:	70 48       	ld.w	r8,r8[0x10]
80003320:	30 bb       	mov	r11,11
80003322:	10 9c       	mov	r12,r8
80003324:	f0 1f 00 4c 	mcall	80003454 <calculate_hash+0x3b0>
80003328:	18 98       	mov	r8,r12
8000332a:	10 56       	eor	r6,r8
8000332c:	4c 78       	lddpc	r8,80003448 <calculate_hash+0x3a4>
8000332e:	70 48       	ld.w	r8,r8[0x10]
80003330:	31 9b       	mov	r11,25
80003332:	10 9c       	mov	r12,r8
80003334:	f0 1f 00 48 	mcall	80003454 <calculate_hash+0x3b0>
80003338:	18 98       	mov	r8,r12
8000333a:	ed e8 20 08 	eor	r8,r6,r8
8000333e:	ef 48 ff dc 	st.w	r7[-36],r8
		 ch = (chunk.e & chunk.f) XOR ((~chunk.e) & chunk.g);
80003342:	4c 28       	lddpc	r8,80003448 <calculate_hash+0x3a4>
80003344:	70 49       	ld.w	r9,r8[0x10]
80003346:	4c 18       	lddpc	r8,80003448 <calculate_hash+0x3a4>
80003348:	70 58       	ld.w	r8,r8[0x14]
8000334a:	10 69       	and	r9,r8
8000334c:	4b f8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
8000334e:	70 48       	ld.w	r8,r8[0x10]
80003350:	f0 0a 11 ff 	rsub	r10,r8,-1
80003354:	4b d8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
80003356:	70 68       	ld.w	r8,r8[0x18]
80003358:	f5 e8 00 08 	and	r8,r10,r8
8000335c:	f3 e8 20 08 	eor	r8,r9,r8
80003360:	ef 48 ff f8 	st.w	r7[-8],r8
		 t1 = chunk.h + S1 + ch + Hash_Constant[i] + Message_Schedule_W[i];
80003364:	4b 98       	lddpc	r8,80003448 <calculate_hash+0x3a4>
80003366:	70 79       	ld.w	r9,r8[0x1c]
80003368:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000336c:	10 09       	add	r9,r8
8000336e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003372:	10 09       	add	r9,r8
80003374:	ee fa ff d4 	ld.w	r10,r7[-44]
80003378:	4b 98       	lddpc	r8,8000345c <calculate_hash+0x3b8>
8000337a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000337e:	10 09       	add	r9,r8
80003380:	ee fa ff d4 	ld.w	r10,r7[-44]
80003384:	4b 38       	lddpc	r8,80003450 <calculate_hash+0x3ac>
80003386:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000338a:	f2 08 00 08 	add	r8,r9,r8
8000338e:	ef 48 ff fc 	st.w	r7[-4],r8
		 
		 chunk.h = chunk.g;
80003392:	4a e8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
80003394:	70 69       	ld.w	r9,r8[0x18]
80003396:	4a d8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
80003398:	91 79       	st.w	r8[0x1c],r9
		 chunk.g = chunk.f;
8000339a:	4a c8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
8000339c:	70 59       	ld.w	r9,r8[0x14]
8000339e:	4a b8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800033a0:	91 69       	st.w	r8[0x18],r9
		 chunk.f = chunk.e;
800033a2:	4a a8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800033a4:	70 49       	ld.w	r9,r8[0x10]
800033a6:	4a 98       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800033a8:	91 59       	st.w	r8[0x14],r9
		 chunk.e = chunk.d + t1;
800033aa:	4a 88       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800033ac:	70 39       	ld.w	r9,r8[0xc]
800033ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033b2:	10 09       	add	r9,r8
800033b4:	4a 58       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800033b6:	91 49       	st.w	r8[0x10],r9
		 chunk.d = chunk.c;
800033b8:	4a 48       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800033ba:	70 29       	ld.w	r9,r8[0x8]
800033bc:	4a 38       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800033be:	91 39       	st.w	r8[0xc],r9
		 chunk.c = chunk.b;
800033c0:	4a 28       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800033c2:	70 19       	ld.w	r9,r8[0x4]
800033c4:	4a 18       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800033c6:	91 29       	st.w	r8[0x8],r9
		 chunk.b = chunk.a;
800033c8:	4a 08       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800033ca:	70 09       	ld.w	r9,r8[0x0]
800033cc:	49 f8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800033ce:	91 19       	st.w	r8[0x4],r9
		 chunk.a = t1 + t2;
800033d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800033d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800033d8:	10 09       	add	r9,r8
800033da:	49 c8       	lddpc	r8,80003448 <calculate_hash+0x3a4>
800033dc:	91 09       	st.w	r8[0x0],r9
	 for (i = 0; i < 8; i++)
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
800033de:	ee f8 ff d4 	ld.w	r8,r7[-44]
800033e2:	2f f8       	sub	r8,-1
800033e4:	ef 48 ff d4 	st.w	r7[-44],r8
800033e8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800033ec:	e0 48 00 3f 	cp.w	r8,63
800033f0:	fe 9a ff 57 	brle	8000329e <calculate_hash+0x1fa>
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
800033f4:	30 08       	mov	r8,0
800033f6:	ef 48 ff d4 	st.w	r7[-44],r8
800033fa:	c1 d8       	rjmp	80003434 <calculate_hash+0x390>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
800033fc:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003400:	a3 68       	lsl	r8,0x2
80003402:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003406:	f2 08 00 08 	add	r8,r9,r8
8000340a:	ee fa ff d4 	ld.w	r10,r7[-44]
8000340e:	49 39       	lddpc	r9,80003458 <calculate_hash+0x3b4>
80003410:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80003414:	ee f9 ff d4 	ld.w	r9,r7[-44]
80003418:	a3 69       	lsl	r9,0x2
8000341a:	ee fb ff ec 	ld.w	r11,r7[-20]
8000341e:	f6 09 00 09 	add	r9,r11,r9
80003422:	72 09       	ld.w	r9,r9[0x0]
80003424:	f4 09 00 09 	add	r9,r10,r9
80003428:	91 09       	st.w	r8[0x0],r9
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
8000342a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000342e:	2f f8       	sub	r8,-1
80003430:	ef 48 ff d4 	st.w	r7[-44],r8
80003434:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003438:	58 78       	cp.w	r8,7
8000343a:	fe 9a ff e1 	brle	800033fc <calculate_hash+0x358>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
	 }
 }
8000343e:	2f 2d       	sub	sp,-56
80003440:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003444:	00 00       	add	r0,r0
80003446:	02 b4       	st.h	r1++,r4
80003448:	00 00       	add	r0,r0
8000344a:	0b 68       	ld.uh	r8,--r5
8000344c:	80 00       	ld.sh	r0,r0[0x0]
8000344e:	34 60       	mov	r0,70
80003450:	00 00       	add	r0,r0
80003452:	02 f4       	st.b	--r1,r4
80003454:	80 00       	ld.sh	r0,r0[0x0]
80003456:	34 d8       	mov	r8,77
80003458:	80 00       	ld.sh	r0,r0[0x0]
8000345a:	ea 20 80 00 	sub	r0,688128
8000345e:	ea 40 eb cd 	cp.w	r0,715725

80003460 <PadtheMessage>:


 void PadtheMessage(uint8_t message_length)
 {
80003460:	eb cd 40 80 	pushm	r7,lr
80003464:	1a 97       	mov	r7,sp
80003466:	20 3d       	sub	sp,12
80003468:	18 98       	mov	r8,r12
8000346a:	ef 68 ff f4 	st.b	r7[-12],r8
	 unsigned char i;
	 unsigned short int message_length_bits;
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];
8000346e:	49 a8       	lddpc	r8,800034d4 <PadtheMessage+0x74>
80003470:	ef 48 ff fc 	st.w	r7[-4],r8

	 message_length_bits = message_length << 3;
80003474:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003478:	a3 78       	lsl	r8,0x3
8000347a:	ef 58 ff fa 	st.h	r7[-6],r8
	 Padded_Message[message_length++] = 0x80;
8000347e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003482:	49 5a       	lddpc	r10,800034d4 <PadtheMessage+0x74>
80003484:	38 08       	mov	r8,-128
80003486:	f4 09 0b 08 	st.b	r10[r9],r8
8000348a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000348e:	2f f8       	sub	r8,-1
80003490:	ef 68 ff f4 	st.b	r7[-12],r8

	 for (i = message_length; i < 64; i++)
80003494:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003498:	ef 68 ff f9 	st.b	r7[-7],r8
8000349c:	c0 c8       	rjmp	800034b4 <PadtheMessage+0x54>
	 {
		Padded_Message[i] = 0x00;
8000349e:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800034a2:	48 da       	lddpc	r10,800034d4 <PadtheMessage+0x74>
800034a4:	30 08       	mov	r8,0
800034a6:	f4 09 0b 08 	st.b	r10[r9],r8
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];

	 message_length_bits = message_length << 3;
	 Padded_Message[message_length++] = 0x80;

	 for (i = message_length; i < 64; i++)
800034aa:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800034ae:	2f f8       	sub	r8,-1
800034b0:	ef 68 ff f9 	st.b	r7[-7],r8
800034b4:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800034b8:	33 f8       	mov	r8,63
800034ba:	f0 09 18 00 	cp.b	r9,r8
800034be:	fe 98 ff f0 	brls	8000349e <PadtheMessage+0x3e>
	 {
		Padded_Message[i] = 0x00;
	 }

	 //ptrPadded_Message = (unsigned long int *)&Padded_Message[60];
	 ptrPadded_Message[15] = (unsigned long int)message_length_bits;
800034c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034c6:	2c 48       	sub	r8,-60
800034c8:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800034cc:	91 09       	st.w	r8[0x0],r9
	 //Padded_Message[62] = *((unsigned char *)&message_length_bits);
	 //Padded_Message[63] = *((unsigned char *)&message_length_bits + 1);
 }
800034ce:	2f dd       	sub	sp,-12
800034d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800034d4:	00 00       	add	r0,r0
800034d6:	02 b4       	st.h	r1++,r4

800034d8 <Rotate_right>:

 unsigned long int Rotate_right (unsigned long int number, int bits)
 {
800034d8:	eb cd 40 80 	pushm	r7,lr
800034dc:	1a 97       	mov	r7,sp
800034de:	20 3d       	sub	sp,12
800034e0:	ef 4c ff f8 	st.w	r7[-8],r12
800034e4:	ef 4b ff f4 	st.w	r7[-12],r11
	 unsigned long int bit_mask = ((unsigned long int)2 << bits) - 1;
800034e8:	30 29       	mov	r9,2
800034ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034ee:	f2 08 09 48 	lsl	r8,r9,r8
800034f2:	20 18       	sub	r8,1
800034f4:	ef 48 ff fc 	st.w	r7[-4],r8
	 return ((number >> bits) | ((number & bit_mask) << (32 - bits)));
800034f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003500:	f2 08 0a 49 	lsr	r9,r9,r8
80003504:	ee fa ff f8 	ld.w	r10,r7[-8]
80003508:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000350c:	10 6a       	and	r10,r8
8000350e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003512:	f0 08 11 20 	rsub	r8,r8,32
80003516:	f4 08 09 48 	lsl	r8,r10,r8
8000351a:	f3 e8 10 08 	or	r8,r9,r8
 }
8000351e:	10 9c       	mov	r12,r8
80003520:	2f dd       	sub	sp,-12
80003522:	e3 cd 80 80 	ldm	sp++,r7,pc
80003526:	d7 03       	nop

80003528 <Init_System_Status>:

volatile system_status_t stSystemStatus;


void Init_System_Status(void)
{
80003528:	eb cd 40 80 	pushm	r7,lr
8000352c:	1a 97       	mov	r7,sp
	stSystemStatus.stored_value_crc_status = 0;
8000352e:	48 e9       	lddpc	r9,80003564 <Init_System_Status+0x3c>
80003530:	72 08       	ld.w	r8,r9[0x0]
80003532:	30 0a       	mov	r10,0
80003534:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80003538:	93 08       	st.w	r9[0x0],r8
	stSystemStatus.unlock_password_status = 0;
8000353a:	48 b9       	lddpc	r9,80003564 <Init_System_Status+0x3c>
8000353c:	72 08       	ld.w	r8,r9[0x0]
8000353e:	30 0a       	mov	r10,0
80003540:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80003544:	93 08       	st.w	r9[0x0],r8
	stSystemStatus.read_only_mode_0_status = 0;
80003546:	48 89       	lddpc	r9,80003564 <Init_System_Status+0x3c>
80003548:	72 08       	ld.w	r8,r9[0x0]
8000354a:	30 0a       	mov	r10,0
8000354c:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80003550:	93 08       	st.w	r9[0x0],r8
	stSystemStatus.read_only_mode_1_status = 0;
80003552:	48 59       	lddpc	r9,80003564 <Init_System_Status+0x3c>
80003554:	72 08       	ld.w	r8,r9[0x0]
80003556:	30 0a       	mov	r10,0
80003558:	f1 da d3 81 	bfins	r8,r10,0x1c,0x1
8000355c:	93 08       	st.w	r9[0x0],r8
}
8000355e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003562:	00 00       	add	r0,r0
80003564:	00 00       	add	r0,r0
80003566:	0b 88       	ld.ub	r8,r5[0x0]

80003568 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
80003568:	eb cd 40 80 	pushm	r7,lr
8000356c:	1a 97       	mov	r7,sp
8000356e:	20 1d       	sub	sp,4
80003570:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003574:	ee fb ff fc 	ld.w	r11,r7[-4]
80003578:	30 1c       	mov	r12,1
8000357a:	f0 1f 00 03 	mcall	80003584 <sysclk_enable_hsb_module+0x1c>
}
8000357e:	2f fd       	sub	sp,-4
80003580:	e3 cd 80 80 	ldm	sp++,r7,pc
80003584:	80 00       	ld.sh	r0,r0[0x0]
80003586:	bd a8       	sbr	r8,0x1c

80003588 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80003588:	eb cd 40 80 	pushm	r7,lr
8000358c:	1a 97       	mov	r7,sp
8000358e:	20 1d       	sub	sp,4
80003590:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003594:	ee fb ff fc 	ld.w	r11,r7[-4]
80003598:	30 2c       	mov	r12,2
8000359a:	f0 1f 00 03 	mcall	800035a4 <sysclk_enable_pba_module+0x1c>
}
8000359e:	2f fd       	sub	sp,-4
800035a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800035a4:	80 00       	ld.sh	r0,r0[0x0]
800035a6:	bd a8       	sbr	r8,0x1c

800035a8 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
800035a8:	eb cd 40 80 	pushm	r7,lr
800035ac:	1a 97       	mov	r7,sp
800035ae:	20 1d       	sub	sp,4
800035b0:	ef 4c ff fc 	st.w	r7[-4],r12
	switch ((uintptr_t)module) {
800035b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035b8:	fe 58 14 00 	cp.w	r8,-60416
800035bc:	e0 80 00 a5 	breq	80003706 <sysclk_enable_peripheral_clock+0x15e>
800035c0:	e0 8b 00 40 	brhi	80003640 <sysclk_enable_peripheral_clock+0x98>
800035c4:	fe 48 24 00 	cp.w	r8,-121856
800035c8:	e0 80 00 d9 	breq	8000377a <sysclk_enable_peripheral_clock+0x1d2>
800035cc:	e0 8b 00 1e 	brhi	80003608 <sysclk_enable_peripheral_clock+0x60>
800035d0:	fe 48 10 00 	cp.w	r8,-126976
800035d4:	e0 80 00 b9 	breq	80003746 <sysclk_enable_peripheral_clock+0x19e>
800035d8:	e0 8b 00 0b 	brhi	800035ee <sysclk_enable_peripheral_clock+0x46>
800035dc:	fc 58 00 00 	cp.w	r8,-196608
800035e0:	e0 80 00 e0 	breq	800037a0 <sysclk_enable_peripheral_clock+0x1f8>
800035e4:	fe 48 00 00 	cp.w	r8,-131072
800035e8:	e0 80 00 b3 	breq	8000374e <sysclk_enable_peripheral_clock+0x1a6>
		break;
#endif

	default:
		Assert(false);
		return;
800035ec:	cd e8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800035ee:	fe 48 1c 00 	cp.w	r8,-123904
800035f2:	e0 80 00 bc 	breq	8000376a <sysclk_enable_peripheral_clock+0x1c2>
800035f6:	fe 48 20 00 	cp.w	r8,-122880
800035fa:	e0 80 00 bc 	breq	80003772 <sysclk_enable_peripheral_clock+0x1ca>
800035fe:	fe 48 14 00 	cp.w	r8,-125952
80003602:	e0 80 00 ad 	breq	8000375c <sysclk_enable_peripheral_clock+0x1b4>
		break;
#endif

	default:
		Assert(false);
		return;
80003606:	cd 18       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003608:	fe 58 00 00 	cp.w	r8,-65536
8000360c:	c5 60       	breq	800036b8 <sysclk_enable_peripheral_clock+0x110>
8000360e:	e0 8b 00 0f 	brhi	8000362c <sysclk_enable_peripheral_clock+0x84>
80003612:	fe 48 40 00 	cp.w	r8,-114688
80003616:	e0 80 00 b6 	breq	80003782 <sysclk_enable_peripheral_clock+0x1da>
8000361a:	fe 48 80 00 	cp.w	r8,-98304
8000361e:	e0 80 00 bd 	breq	80003798 <sysclk_enable_peripheral_clock+0x1f0>
80003622:	fe 48 28 00 	cp.w	r8,-120832
80003626:	e0 80 00 b2 	breq	8000378a <sysclk_enable_peripheral_clock+0x1e2>
		break;
#endif

	default:
		Assert(false);
		return;
8000362a:	cb f8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000362c:	fe 58 0c 00 	cp.w	r8,-62464
80003630:	c4 b0       	breq	800036c6 <sysclk_enable_peripheral_clock+0x11e>
80003632:	fe 58 10 00 	cp.w	r8,-61440
80003636:	c3 d0       	breq	800036b0 <sysclk_enable_peripheral_clock+0x108>
80003638:	fe 58 08 00 	cp.w	r8,-63488
8000363c:	c3 60       	breq	800036a8 <sysclk_enable_peripheral_clock+0x100>
		break;
#endif

	default:
		Assert(false);
		return;
8000363e:	cb 58       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003640:	fe 58 30 00 	cp.w	r8,-53248
80003644:	c5 50       	breq	800036ee <sysclk_enable_peripheral_clock+0x146>
80003646:	e0 8b 00 18 	brhi	80003676 <sysclk_enable_peripheral_clock+0xce>
8000364a:	fe 58 20 00 	cp.w	r8,-57344
8000364e:	c6 80       	breq	8000371e <sysclk_enable_peripheral_clock+0x176>
80003650:	e0 8b 00 09 	brhi	80003662 <sysclk_enable_peripheral_clock+0xba>
80003654:	fe 58 18 00 	cp.w	r8,-59392
80003658:	c5 b0       	breq	8000370e <sysclk_enable_peripheral_clock+0x166>
8000365a:	fe 58 1c 00 	cp.w	r8,-58368
8000365e:	c5 c0       	breq	80003716 <sysclk_enable_peripheral_clock+0x16e>
		break;
#endif

	default:
		Assert(false);
		return;
80003660:	ca 48       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003662:	fe 58 28 00 	cp.w	r8,-55296
80003666:	c3 c0       	breq	800036de <sysclk_enable_peripheral_clock+0x136>
80003668:	fe 58 2c 00 	cp.w	r8,-54272
8000366c:	c3 d0       	breq	800036e6 <sysclk_enable_peripheral_clock+0x13e>
8000366e:	fe 58 24 00 	cp.w	r8,-56320
80003672:	c3 20       	breq	800036d6 <sysclk_enable_peripheral_clock+0x12e>
		break;
#endif

	default:
		Assert(false);
		return;
80003674:	c9 a8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003676:	fe 58 40 00 	cp.w	r8,-49152
8000367a:	c6 20       	breq	8000373e <sysclk_enable_peripheral_clock+0x196>
8000367c:	e0 8b 00 0c 	brhi	80003694 <sysclk_enable_peripheral_clock+0xec>
80003680:	fe 58 38 00 	cp.w	r8,-51200
80003684:	c5 50       	breq	8000372e <sysclk_enable_peripheral_clock+0x186>
80003686:	fe 58 3c 00 	cp.w	r8,-50176
8000368a:	c2 20       	breq	800036ce <sysclk_enable_peripheral_clock+0x126>
8000368c:	fe 58 34 00 	cp.w	r8,-52224
80003690:	c4 b0       	breq	80003726 <sysclk_enable_peripheral_clock+0x17e>
		break;
#endif

	default:
		Assert(false);
		return;
80003692:	c8 b8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003694:	fe 58 50 00 	cp.w	r8,-45056
80003698:	c2 f0       	breq	800036f6 <sysclk_enable_peripheral_clock+0x14e>
8000369a:	fe 58 54 00 	cp.w	r8,-44032
8000369e:	c3 00       	breq	800036fe <sysclk_enable_peripheral_clock+0x156>
800036a0:	fe 58 44 00 	cp.w	r8,-48128
800036a4:	c4 90       	breq	80003736 <sysclk_enable_peripheral_clock+0x18e>
		break;
#endif

	default:
		Assert(false);
		return;
800036a6:	c8 18       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
	case AVR32_INTC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_INTC);
800036a8:	30 0c       	mov	r12,0
800036aa:	f0 1f 00 42 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800036ae:	c7 d8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_GPIO_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_GPIO);
800036b0:	30 1c       	mov	r12,1
800036b2:	f0 1f 00 40 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800036b6:	c7 98       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PDCA_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
800036b8:	30 4c       	mov	r12,4
800036ba:	f0 1f 00 3f 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pba_module(SYSCLK_PDCA_PB);
800036be:	30 2c       	mov	r12,2
800036c0:	f0 1f 00 3c 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800036c4:	c7 28       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PM);
800036c6:	30 3c       	mov	r12,3
800036c8:	f0 1f 00 3a 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800036cc:	c6 e8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ADC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ADC);
800036ce:	30 4c       	mov	r12,4
800036d0:	f0 1f 00 38 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800036d4:	c6 a8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI0);
800036d6:	30 5c       	mov	r12,5
800036d8:	f0 1f 00 36 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800036dc:	c6 68       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
800036de:	30 6c       	mov	r12,6
800036e0:	f0 1f 00 34 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800036e4:	c6 28       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
800036e6:	30 7c       	mov	r12,7
800036e8:	f0 1f 00 32 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800036ec:	c5 e8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
800036ee:	30 8c       	mov	r12,8
800036f0:	f0 1f 00 30 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800036f4:	c5 a8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
800036f6:	30 9c       	mov	r12,9
800036f8:	f0 1f 00 2e 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800036fc:	c5 68       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
800036fe:	30 ac       	mov	r12,10
80003700:	f0 1f 00 2c 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
80003704:	c5 28       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART0);
80003706:	30 bc       	mov	r12,11
80003708:	f0 1f 00 2a 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
8000370c:	c4 e8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART1);
8000370e:	30 cc       	mov	r12,12
80003710:	f0 1f 00 28 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
80003714:	c4 a8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART2_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
80003716:	30 dc       	mov	r12,13
80003718:	f0 1f 00 26 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
8000371c:	c4 68       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART3_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART3);
8000371e:	30 ec       	mov	r12,14
80003720:	f0 1f 00 24 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
80003724:	c4 28       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SSC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SSC);
80003726:	30 fc       	mov	r12,15
80003728:	f0 1f 00 22 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
8000372c:	c3 e8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC0);
8000372e:	31 0c       	mov	r12,16
80003730:	f0 1f 00 20 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
80003734:	c3 a8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC1);
80003736:	31 1c       	mov	r12,17
80003738:	f0 1f 00 1e 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
8000373c:	c3 68       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ABDAC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DAC);
8000373e:	31 2c       	mov	r12,18
80003740:	f0 1f 00 1c 	mcall	800037b0 <sysclk_enable_peripheral_clock+0x208>
		break;
80003744:	c3 28       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_HMATRIX_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
80003746:	30 0c       	mov	r12,0
80003748:	f0 1f 00 1c 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x210>
		break;
8000374c:	c2 e8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USBB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000374e:	30 3c       	mov	r12,3
80003750:	f0 1f 00 19 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80003754:	30 1c       	mov	r12,1
80003756:	f0 1f 00 19 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x210>
		break;
8000375a:	c2 78       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_FLASHC_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_FLASHC_DATA);
8000375c:	30 0c       	mov	r12,0
8000375e:	f0 1f 00 16 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_FLASHC_REGS);
80003762:	30 2c       	mov	r12,2
80003764:	f0 1f 00 15 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x210>
		break;
80003768:	c2 08       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SMC_REGS);
8000376a:	30 3c       	mov	r12,3
8000376c:	f0 1f 00 13 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x210>
		break;
80003770:	c1 c8       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SDRAMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SDRAMC_REGS);
80003772:	30 4c       	mov	r12,4
80003774:	f0 1f 00 11 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x210>
		break;
80003778:	c1 88       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ECCHRS_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_ECC);
8000377a:	30 5c       	mov	r12,5
8000377c:	f0 1f 00 0f 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x210>
		break;
80003780:	c1 48       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MCI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MCI);
80003782:	30 6c       	mov	r12,6
80003784:	f0 1f 00 0d 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x210>
		break;
80003788:	c1 08       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_BUSMON_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_BUSMON_HSB);
8000378a:	30 8c       	mov	r12,8
8000378c:	f0 1f 00 0a 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_BUSMON);
80003790:	30 7c       	mov	r12,7
80003792:	f0 1f 00 0a 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x210>
		break;
80003796:	c0 98       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MSI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MSI);
80003798:	30 8c       	mov	r12,8
8000379a:	f0 1f 00 08 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x210>
		break;
8000379e:	c0 58       	rjmp	800037a8 <sysclk_enable_peripheral_clock+0x200>

#if defined(AVR32_AES_ADDRESS)
	case AVR32_AES_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_AES);
800037a0:	30 9c       	mov	r12,9
800037a2:	f0 1f 00 06 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x210>
		break;
800037a6:	d7 03       	nop

	default:
		Assert(false);
		return;
	}
}
800037a8:	2f fd       	sub	sp,-4
800037aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800037ae:	00 00       	add	r0,r0
800037b0:	80 00       	ld.sh	r0,r0[0x0]
800037b2:	35 88       	mov	r8,88
800037b4:	80 00       	ld.sh	r0,r0[0x0]
800037b6:	35 68       	mov	r8,86
800037b8:	80 00       	ld.sh	r0,r0[0x0]
800037ba:	be 1c       	st.h	pc[0x2],r12

800037bc <tc_irq>:
 * The ISR handles RC compare interrupt and sets the update_timer flag to
 * update the timer value.
 */
__attribute__((__interrupt__))
static void tc_irq(void)
{
800037bc:	eb cd 40 80 	pushm	r7,lr
800037c0:	1a 97       	mov	r7,sp
	// Increment the ms seconds counter
	tc_tick++;
800037c2:	4b 48       	lddpc	r8,80003890 <tc_irq+0xd4>
800037c4:	70 08       	ld.w	r8,r8[0x0]
800037c6:	f0 c9 ff ff 	sub	r9,r8,-1
800037ca:	4b 28       	lddpc	r8,80003890 <tc_irq+0xd4>
800037cc:	91 09       	st.w	r8[0x0],r9
	 * in the Watch Window.
	 */

	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
800037ce:	30 0b       	mov	r11,0
800037d0:	fe 7c 38 00 	mov	r12,-51200
800037d4:	f0 1f 00 30 	mcall	80003894 <tc_irq+0xd8>

	if (entry_mode_status == NO_MODE_SELECTED)
800037d8:	4b 08       	lddpc	r8,80003898 <tc_irq+0xdc>
800037da:	11 88       	ld.ub	r8,r8[0x0]
800037dc:	5c 58       	castu.b	r8
800037de:	c1 51       	brne	80003808 <tc_irq+0x4c>
	{
		if (check_programming_mode_entry_sequence() == true)
800037e0:	f0 1f 00 2f 	mcall	8000389c <tc_irq+0xe0>
800037e4:	18 98       	mov	r8,r12
800037e6:	58 08       	cp.w	r8,0
800037e8:	c0 50       	breq	800037f2 <tc_irq+0x36>
		{
			entry_mode_status = PROGRAMMING_MODE;
800037ea:	4a c9       	lddpc	r9,80003898 <tc_irq+0xdc>
800037ec:	30 18       	mov	r8,1
800037ee:	b2 88       	st.b	r9[0x0],r8
800037f0:	c0 c8       	rjmp	80003808 <tc_irq+0x4c>
		}
		else if (check_normal_mode_entry_sequence() == true)
800037f2:	f0 1f 00 2c 	mcall	800038a0 <tc_irq+0xe4>
800037f6:	18 98       	mov	r8,r12
800037f8:	58 08       	cp.w	r8,0
800037fa:	c0 70       	breq	80003808 <tc_irq+0x4c>
		{
			entry_mode_status = NORMAL_MODE;
800037fc:	4a 79       	lddpc	r9,80003898 <tc_irq+0xdc>
800037fe:	30 28       	mov	r8,2
80003800:	b2 88       	st.b	r9[0x0],r8
			pass_code = temp_password;
80003802:	4a 98       	lddpc	r8,800038a4 <tc_irq+0xe8>
80003804:	4a 99       	lddpc	r9,800038a8 <tc_irq+0xec>
80003806:	91 09       	st.w	r8[0x0],r9
		}
	}
	
	if (entry_mode_status == PROGRAMMING_MODE)
80003808:	4a 48       	lddpc	r8,80003898 <tc_irq+0xdc>
8000380a:	11 88       	ld.ub	r8,r8[0x0]
8000380c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003810:	30 18       	mov	r8,1
80003812:	f0 09 18 00 	cp.b	r9,r8
80003816:	c2 31       	brne	8000385c <tc_irq+0xa0>
	{
		if (!mode_selected)
80003818:	4a 58       	lddpc	r8,800038ac <tc_irq+0xf0>
8000381a:	11 88       	ld.ub	r8,r8[0x0]
8000381c:	5c 58       	castu.b	r8
8000381e:	ec 18 00 01 	eorl	r8,0x1
80003822:	5c 58       	castu.b	r8
80003824:	c0 40       	breq	8000382c <tc_irq+0x70>
		{
			check_for_mode_selected();
80003826:	f0 1f 00 23 	mcall	800038b0 <tc_irq+0xf4>
					entry_mode_status = NO_MODE_SELECTED;
				}				
			}
			else
			{
				Wait_timer--;
8000382a:	c2 58       	rjmp	80003874 <tc_irq+0xb8>
		{
			check_for_mode_selected();
		}
		else
		{
			if (Wait_timer == 0)
8000382c:	4a 28       	lddpc	r8,800038b4 <tc_irq+0xf8>
8000382e:	90 08       	ld.sh	r8,r8[0x0]
80003830:	5c 88       	casts.h	r8
80003832:	c0 d1       	brne	8000384c <tc_irq+0x90>
			{
				if (process_selected_mode() == SUCCESSFUL)
80003834:	f0 1f 00 21 	mcall	800038b8 <tc_irq+0xfc>
80003838:	18 98       	mov	r8,r12
8000383a:	10 99       	mov	r9,r8
8000383c:	30 18       	mov	r8,1
8000383e:	f0 09 18 00 	cp.b	r9,r8
80003842:	c1 81       	brne	80003872 <tc_irq+0xb6>
				{
					entry_mode_status = NO_MODE_SELECTED;
80003844:	49 59       	lddpc	r9,80003898 <tc_irq+0xdc>
80003846:	30 08       	mov	r8,0
80003848:	b2 88       	st.b	r9[0x0],r8
				}				
			}
			else
			{
				Wait_timer--;
8000384a:	c1 58       	rjmp	80003874 <tc_irq+0xb8>
8000384c:	49 a8       	lddpc	r8,800038b4 <tc_irq+0xf8>
8000384e:	90 08       	ld.sh	r8,r8[0x0]
80003850:	5c 88       	casts.h	r8
80003852:	20 18       	sub	r8,1
80003854:	5c 88       	casts.h	r8
80003856:	49 89       	lddpc	r9,800038b4 <tc_irq+0xf8>
80003858:	b2 08       	st.h	r9[0x0],r8
8000385a:	c0 d8       	rjmp	80003874 <tc_irq+0xb8>
			}

		}
	}

	else if (entry_mode_status == NORMAL_MODE)
8000385c:	48 f8       	lddpc	r8,80003898 <tc_irq+0xdc>
8000385e:	11 88       	ld.ub	r8,r8[0x0]
80003860:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003864:	30 28       	mov	r8,2
80003866:	f0 09 18 00 	cp.b	r9,r8
8000386a:	c0 51       	brne	80003874 <tc_irq+0xb8>
	{
		read_password();
8000386c:	f0 1f 00 14 	mcall	800038bc <tc_irq+0x100>
80003870:	c0 28       	rjmp	80003874 <tc_irq+0xb8>
					entry_mode_status = NO_MODE_SELECTED;
				}				
			}
			else
			{
				Wait_timer--;
80003872:	d7 03       	nop
	else if (entry_mode_status == NORMAL_MODE)
	{
		read_password();
	}
	
	check_to_toggle_read_only_mode();
80003874:	f0 1f 00 13 	mcall	800038c0 <tc_irq+0x104>
	//if (is_button_released() == true)
	//{
		//Read_button();	
	//}

	update_leds();
80003878:	f0 1f 00 13 	mcall	800038c4 <tc_irq+0x108>



	// specify that an interrupt has been raised
	update_timer = true;
8000387c:	49 39       	lddpc	r9,800038c8 <tc_irq+0x10c>
8000387e:	30 18       	mov	r8,1
80003880:	b2 88       	st.b	r9[0x0],r8
	// Toggle the GPIO line
	gpio_tgl_gpio_pin(EXAMPLE_TOGGLE_PIN);
80003882:	30 3c       	mov	r12,3
80003884:	f0 1f 00 12 	mcall	800038cc <tc_irq+0x110>
}
80003888:	e3 cd 40 80 	ldm	sp++,r7,lr
8000388c:	d6 03       	rete
8000388e:	00 00       	add	r0,r0
80003890:	00 00       	add	r0,r0
80003892:	03 f4       	ld.ub	r4,r1[0x7]
80003894:	80 00       	ld.sh	r0,r0[0x0]
80003896:	97 5a       	st.w	r11[0x14],r10
80003898:	00 00       	add	r0,r0
8000389a:	03 fc       	ld.ub	r12,r1[0x7]
8000389c:	80 00       	ld.sh	r0,r0[0x0]
8000389e:	3e a4       	mov	r4,-22
800038a0:	80 00       	ld.sh	r0,r0[0x0]
800038a2:	3f 30       	mov	r0,-13
800038a4:	00 00       	add	r0,r0
800038a6:	0b 64       	ld.uh	r4,--r5
800038a8:	00 00       	add	r0,r0
800038aa:	02 48       	or	r8,r1
800038ac:	00 00       	add	r0,r0
800038ae:	03 f8       	ld.ub	r8,r1[0x7]
800038b0:	80 00       	ld.sh	r0,r0[0x0]
800038b2:	40 4c       	lddsp	r12,sp[0x10]
800038b4:	00 00       	add	r0,r0
800038b6:	04 26       	rsub	r6,r2
800038b8:	80 00       	ld.sh	r0,r0[0x0]
800038ba:	40 60       	lddsp	r0,sp[0x18]
800038bc:	80 00       	ld.sh	r0,r0[0x0]
800038be:	42 4c       	lddsp	r12,sp[0x90]
800038c0:	80 00       	ld.sh	r0,r0[0x0]
800038c2:	38 d0       	mov	r0,-115
800038c4:	80 00       	ld.sh	r0,r0[0x0]
800038c6:	43 50       	lddsp	r0,sp[0xd4]
800038c8:	00 00       	add	r0,r0
800038ca:	01 2c       	ld.uh	r12,r0++
800038cc:	80 00       	ld.sh	r0,r0[0x0]
800038ce:	8d 16       	st.w	r6[0x4],r6

800038d0 <check_to_toggle_read_only_mode>:

void check_to_toggle_read_only_mode(void)
{
800038d0:	eb cd 40 80 	pushm	r7,lr
800038d4:	1a 97       	mov	r7,sp
800038d6:	20 1d       	sub	sp,4
	if (stSystemStatus.unlock_password_status == 1)
800038d8:	49 f8       	lddpc	r8,80003954 <check_to_toggle_read_only_mode+0x84>
800038da:	70 08       	ld.w	r8,r8[0x0]
800038dc:	e6 18 40 00 	andh	r8,0x4000,COH
800038e0:	c3 70       	breq	8000394e <check_to_toggle_read_only_mode+0x7e>
	{
		uint8_t button_value = button_pressed();
800038e2:	f0 1f 00 1e 	mcall	80003958 <check_to_toggle_read_only_mode+0x88>
800038e6:	18 98       	mov	r8,r12
800038e8:	ef 68 ff ff 	st.b	r7[-1],r8
		if (button_value == PUSH_BUTTON1)
800038ec:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800038f0:	30 08       	mov	r8,0
800038f2:	f0 09 18 00 	cp.b	r9,r8
800038f6:	c1 41       	brne	8000391e <check_to_toggle_read_only_mode+0x4e>
		{
			stSystemStatus.read_only_mode_0_status ^= 1;
800038f8:	49 78       	lddpc	r8,80003954 <check_to_toggle_read_only_mode+0x84>
800038fa:	70 08       	ld.w	r8,r8[0x0]
800038fc:	f1 d8 c3 a1 	bfextu	r8,r8,0x1d,0x1
80003900:	5c 58       	castu.b	r8
80003902:	ec 18 00 01 	eorl	r8,0x1
80003906:	5c 58       	castu.b	r8
80003908:	5c 58       	castu.b	r8
8000390a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000390e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80003912:	49 19       	lddpc	r9,80003954 <check_to_toggle_read_only_mode+0x84>
80003914:	72 08       	ld.w	r8,r9[0x0]
80003916:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000391a:	93 08       	st.w	r9[0x0],r8
8000391c:	c1 98       	rjmp	8000394e <check_to_toggle_read_only_mode+0x7e>
		}
		else if (button_value == PUSH_BUTTON2)
8000391e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003922:	30 18       	mov	r8,1
80003924:	f0 09 18 00 	cp.b	r9,r8
80003928:	c1 31       	brne	8000394e <check_to_toggle_read_only_mode+0x7e>
		{
			stSystemStatus.read_only_mode_1_status ^= 1;
8000392a:	48 b8       	lddpc	r8,80003954 <check_to_toggle_read_only_mode+0x84>
8000392c:	70 08       	ld.w	r8,r8[0x0]
8000392e:	f1 d8 c3 81 	bfextu	r8,r8,0x1c,0x1
80003932:	5c 58       	castu.b	r8
80003934:	ec 18 00 01 	eorl	r8,0x1
80003938:	5c 58       	castu.b	r8
8000393a:	5c 58       	castu.b	r8
8000393c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003940:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80003944:	48 49       	lddpc	r9,80003954 <check_to_toggle_read_only_mode+0x84>
80003946:	72 08       	ld.w	r8,r9[0x0]
80003948:	f1 da d3 81 	bfins	r8,r10,0x1c,0x1
8000394c:	93 08       	st.w	r9[0x0],r8
		}
	}
}
8000394e:	2f fd       	sub	sp,-4
80003950:	e3 cd 80 80 	ldm	sp++,r7,pc
80003954:	00 00       	add	r0,r0
80003956:	0b 88       	ld.ub	r8,r5[0x0]
80003958:	80 00       	ld.sh	r0,r0[0x0]
8000395a:	3b 08       	mov	r8,-80

8000395c <is_button_released>:

bool is_button_released(void)
{
8000395c:	eb cd 40 80 	pushm	r7,lr
80003960:	1a 97       	mov	r7,sp
	if ((check_all_buttons_high() == true) && (button_released == false))
80003962:	f0 1f 00 0b 	mcall	8000398c <is_button_released+0x30>
80003966:	18 98       	mov	r8,r12
80003968:	58 08       	cp.w	r8,0
8000396a:	c0 b0       	breq	80003980 <is_button_released+0x24>
8000396c:	48 98       	lddpc	r8,80003990 <is_button_released+0x34>
8000396e:	11 88       	ld.ub	r8,r8[0x0]
80003970:	5c 58       	castu.b	r8
80003972:	ec 18 00 01 	eorl	r8,0x1
80003976:	5c 58       	castu.b	r8
80003978:	c0 40       	breq	80003980 <is_button_released+0x24>
	{
		button_released = true;
8000397a:	48 69       	lddpc	r9,80003990 <is_button_released+0x34>
8000397c:	30 18       	mov	r8,1
8000397e:	b2 88       	st.b	r9[0x0],r8
	}
	return button_released;
80003980:	48 48       	lddpc	r8,80003990 <is_button_released+0x34>
80003982:	11 88       	ld.ub	r8,r8[0x0]
80003984:	5c 58       	castu.b	r8
}
80003986:	10 9c       	mov	r12,r8
80003988:	e3 cd 80 80 	ldm	sp++,r7,pc
8000398c:	80 00       	ld.sh	r0,r0[0x0]
8000398e:	3b e8       	mov	r8,-66
80003990:	00 00       	add	r0,r0
80003992:	01 2d       	ld.uh	sp,r0++

80003994 <Read_button>:

void Read_button(void)
{
80003994:	eb cd 40 80 	pushm	r7,lr
80003998:	1a 97       	mov	r7,sp
8000399a:	20 1d       	sub	sp,4
	uint8_t button_value = NO_BUTTON;
8000399c:	3f f8       	mov	r8,-1
8000399e:	ef 68 ff ff 	st.b	r7[-1],r8
	
	button_value = button_pressed();
800039a2:	f0 1f 00 4f 	mcall	80003adc <Read_button+0x148>
800039a6:	18 98       	mov	r8,r12
800039a8:	ef 68 ff ff 	st.b	r7[-1],r8
	switch (button_value)
800039ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800039b0:	58 48       	cp.w	r8,4
800039b2:	c0 50       	breq	800039bc <Read_button+0x28>
800039b4:	e0 48 00 ff 	cp.w	r8,255
800039b8:	c6 d0       	breq	80003a92 <Read_button+0xfe>
800039ba:	c2 88       	rjmp	80003a0a <Read_button+0x76>
	{
		case ENTER_BUTTON:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
800039bc:	4c 98       	lddpc	r8,80003ae0 <Read_button+0x14c>
800039be:	11 88       	ld.ub	r8,r8[0x0]
800039c0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800039c4:	30 18       	mov	r8,1
800039c6:	f0 09 18 00 	cp.b	r9,r8
800039ca:	c0 d1       	brne	800039e4 <Read_button+0x50>
			{
				if (mode_selected)
800039cc:	4c 68       	lddpc	r8,80003ae4 <Read_button+0x150>
800039ce:	11 88       	ld.ub	r8,r8[0x0]
800039d0:	5c 58       	castu.b	r8
800039d2:	c6 20       	breq	80003a96 <Read_button+0x102>
				{
					enter_button_status++;
800039d4:	4c 58       	lddpc	r8,80003ae8 <Read_button+0x154>
800039d6:	11 88       	ld.ub	r8,r8[0x0]
800039d8:	5c 58       	castu.b	r8
800039da:	2f f8       	sub	r8,-1
800039dc:	5c 58       	castu.b	r8
800039de:	4c 39       	lddpc	r9,80003ae8 <Read_button+0x154>
800039e0:	b2 88       	st.b	r9[0x0],r8
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
			{
				normal_mode_password_entered = true;
			}
			break;
800039e2:	c5 f8       	rjmp	80003aa0 <Read_button+0x10c>
				if (mode_selected)
				{
					enter_button_status++;
				}
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
800039e4:	4b f8       	lddpc	r8,80003ae0 <Read_button+0x14c>
800039e6:	11 88       	ld.ub	r8,r8[0x0]
800039e8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800039ec:	30 28       	mov	r8,2
800039ee:	f0 09 18 00 	cp.b	r9,r8
800039f2:	c5 41       	brne	80003a9a <Read_button+0x106>
800039f4:	4b e8       	lddpc	r8,80003aec <Read_button+0x158>
800039f6:	11 88       	ld.ub	r8,r8[0x0]
800039f8:	5c 58       	castu.b	r8
800039fa:	ec 18 00 01 	eorl	r8,0x1
800039fe:	5c 58       	castu.b	r8
80003a00:	c4 f0       	breq	80003a9e <Read_button+0x10a>
			{
				normal_mode_password_entered = true;
80003a02:	4b b9       	lddpc	r9,80003aec <Read_button+0x158>
80003a04:	30 18       	mov	r8,1
80003a06:	b2 88       	st.b	r9[0x0],r8
			}
			break;
80003a08:	c4 c8       	rjmp	80003aa0 <Read_button+0x10c>
		case NO_BUTTON:
		break;
		
		default:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
80003a0a:	4b 68       	lddpc	r8,80003ae0 <Read_button+0x14c>
80003a0c:	11 88       	ld.ub	r8,r8[0x0]
80003a0e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003a12:	30 18       	mov	r8,1
80003a14:	f0 09 18 00 	cp.b	r9,r8
80003a18:	c2 f1       	brne	80003a76 <Read_button+0xe2>
			{
				if (mode_selected)
80003a1a:	4b 38       	lddpc	r8,80003ae4 <Read_button+0x150>
80003a1c:	11 88       	ld.ub	r8,r8[0x0]
80003a1e:	5c 58       	castu.b	r8
80003a20:	c2 30       	breq	80003a66 <Read_button+0xd2>
				{
					switch (mode_chosen)
80003a22:	4b 48       	lddpc	r8,80003af0 <Read_button+0x15c>
80003a24:	11 88       	ld.ub	r8,r8[0x0]
80003a26:	5c 58       	castu.b	r8
80003a28:	c0 40       	breq	80003a30 <Read_button+0x9c>
80003a2a:	58 38       	cp.w	r8,3
80003a2c:	c0 90       	breq	80003a3e <Read_button+0xaa>
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003a2e:	c3 98       	rjmp	80003aa0 <Read_button+0x10c>
				if (mode_selected)
				{
					switch (mode_chosen)
					{
					case _UNLOCK_PASSWORD:
						store_passcode((uint32_t)button_value);
80003a30:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a34:	10 9c       	mov	r12,r8
80003a36:	f0 1f 00 30 	mcall	80003af4 <Read_button+0x160>
						break;
80003a3a:	d7 03       	nop
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003a3c:	c3 28       	rjmp	80003aa0 <Read_button+0x10c>
					{
					case _UNLOCK_PASSWORD:
						store_passcode((uint32_t)button_value);
						break;
					case _DEVICE_ID_CONFIRM:
						if (enter_button_status == WAITING_FOR_USER_INPUT)
80003a3e:	4a b8       	lddpc	r8,80003ae8 <Read_button+0x154>
80003a40:	11 88       	ld.ub	r8,r8[0x0]
80003a42:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003a46:	30 58       	mov	r8,5
80003a48:	f0 09 18 00 	cp.b	r9,r8
80003a4c:	c0 71       	brne	80003a5a <Read_button+0xc6>
						{
							store_sequence(button_value);
80003a4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a52:	10 9c       	mov	r12,r8
80003a54:	f0 1f 00 29 	mcall	80003af8 <Read_button+0x164>
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003a58:	c2 48       	rjmp	80003aa0 <Read_button+0x10c>
						{
							store_sequence(button_value);
						}
						else
						{
							store_passcode((uint32_t)button_value);
80003a5a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a5e:	10 9c       	mov	r12,r8
80003a60:	f0 1f 00 25 	mcall	80003af4 <Read_button+0x160>
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003a64:	c1 e8       	rjmp	80003aa0 <Read_button+0x10c>
					}
					
				}
				else
				{
					mode_chosen = button_value;
80003a66:	4a 39       	lddpc	r9,80003af0 <Read_button+0x15c>
80003a68:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a6c:	b2 88       	st.b	r9[0x0],r8
					mode_selected = true;
80003a6e:	49 e9       	lddpc	r9,80003ae4 <Read_button+0x150>
80003a70:	30 18       	mov	r8,1
80003a72:	b2 88       	st.b	r9[0x0],r8
80003a74:	c1 68       	rjmp	80003aa0 <Read_button+0x10c>
				}
			}
			else if (entry_mode_status == NORMAL_MODE)
80003a76:	49 b8       	lddpc	r8,80003ae0 <Read_button+0x14c>
80003a78:	11 88       	ld.ub	r8,r8[0x0]
80003a7a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003a7e:	30 28       	mov	r8,2
80003a80:	f0 09 18 00 	cp.b	r9,r8
80003a84:	c0 e1       	brne	80003aa0 <Read_button+0x10c>
			{
				store_passcode((uint32_t)button_value);
80003a86:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a8a:	10 9c       	mov	r12,r8
80003a8c:	f0 1f 00 1a 	mcall	80003af4 <Read_button+0x160>
80003a90:	c0 88       	rjmp	80003aa0 <Read_button+0x10c>
				normal_mode_password_entered = true;
			}
			break;
		}
		case NO_BUTTON:
		break;
80003a92:	d7 03       	nop
80003a94:	c0 68       	rjmp	80003aa0 <Read_button+0x10c>
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
			{
				normal_mode_password_entered = true;
			}
			break;
80003a96:	d7 03       	nop
80003a98:	c0 48       	rjmp	80003aa0 <Read_button+0x10c>
80003a9a:	d7 03       	nop
80003a9c:	c0 28       	rjmp	80003aa0 <Read_button+0x10c>
80003a9e:	d7 03       	nop
			}

		}
	}	

	if (mode_chosen == _UNLOCK_PASSWORD && enter_button_status == WAITING_FOR_USER_INPUT)
80003aa0:	49 48       	lddpc	r8,80003af0 <Read_button+0x15c>
80003aa2:	11 88       	ld.ub	r8,r8[0x0]
80003aa4:	5c 58       	castu.b	r8
80003aa6:	c1 81       	brne	80003ad6 <Read_button+0x142>
80003aa8:	49 08       	lddpc	r8,80003ae8 <Read_button+0x154>
80003aaa:	11 88       	ld.ub	r8,r8[0x0]
80003aac:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003ab0:	30 58       	mov	r8,5
80003ab2:	f0 09 18 00 	cp.b	r9,r8
80003ab6:	c1 01       	brne	80003ad6 <Read_button+0x142>
	{
		if (var_W_ticks++ > var_W)
80003ab8:	49 18       	lddpc	r8,80003afc <Read_button+0x168>
80003aba:	70 08       	ld.w	r8,r8[0x0]
80003abc:	49 19       	lddpc	r9,80003b00 <Read_button+0x16c>
80003abe:	72 09       	ld.w	r9,r9[0x0]
80003ac0:	12 38       	cp.w	r8,r9
80003ac2:	5f b9       	srhi	r9
80003ac4:	5c 59       	castu.b	r9
80003ac6:	f0 ca ff ff 	sub	r10,r8,-1
80003aca:	48 d8       	lddpc	r8,80003afc <Read_button+0x168>
80003acc:	91 0a       	st.w	r8[0x0],r10
80003ace:	58 09       	cp.w	r9,0
80003ad0:	c0 30       	breq	80003ad6 <Read_button+0x142>
		{
			calculate_salt();
80003ad2:	f0 1f 00 0d 	mcall	80003b04 <Read_button+0x170>
		}
	}	
}
80003ad6:	2f fd       	sub	sp,-4
80003ad8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003adc:	80 00       	ld.sh	r0,r0[0x0]
80003ade:	3b 08       	mov	r8,-80
80003ae0:	00 00       	add	r0,r0
80003ae2:	03 fc       	ld.ub	r12,r1[0x7]
80003ae4:	00 00       	add	r0,r0
80003ae6:	03 f8       	ld.ub	r8,r1[0x7]
80003ae8:	00 00       	add	r0,r0
80003aea:	03 fa       	ld.ub	r10,r1[0x7]
80003aec:	00 00       	add	r0,r0
80003aee:	03 f9       	ld.ub	r9,r1[0x7]
80003af0:	00 00       	add	r0,r0
80003af2:	01 2e       	ld.uh	lr,r0++
80003af4:	80 00       	ld.sh	r0,r0[0x0]
80003af6:	3c c0       	mov	r0,-52
80003af8:	80 00       	ld.sh	r0,r0[0x0]
80003afa:	3d 48       	mov	r8,-44
80003afc:	00 00       	add	r0,r0
80003afe:	02 90       	mov	r0,r1
80003b00:	00 00       	add	r0,r0
80003b02:	01 28       	ld.uh	r8,r0++
80003b04:	80 00       	ld.sh	r0,r0[0x0]
80003b06:	2d b8       	sub	r8,-37

80003b08 <button_pressed>:

uint8_t button_pressed (void)
{
80003b08:	eb cd 40 80 	pushm	r7,lr
80003b0c:	1a 97       	mov	r7,sp
	
	is_button_released();
80003b0e:	f0 1f 00 2c 	mcall	80003bbc <button_pressed+0xb4>

	if (button_released)
80003b12:	4a c8       	lddpc	r8,80003bc0 <button_pressed+0xb8>
80003b14:	11 88       	ld.ub	r8,r8[0x0]
80003b16:	5c 58       	castu.b	r8
80003b18:	c4 c0       	breq	80003bb0 <button_pressed+0xa8>
	{		
		if (read_push_button(PB1, (uint8_t *)&PB1_Counter))
80003b1a:	4a bb       	lddpc	r11,80003bc4 <button_pressed+0xbc>
80003b1c:	30 ac       	mov	r12,10
80003b1e:	f0 1f 00 2b 	mcall	80003bc8 <button_pressed+0xc0>
80003b22:	18 98       	mov	r8,r12
80003b24:	58 08       	cp.w	r8,0
80003b26:	c0 90       	breq	80003b38 <button_pressed+0x30>
		{
			LED_On(LED0);
80003b28:	30 1c       	mov	r12,1
80003b2a:	f0 1f 00 29 	mcall	80003bcc <button_pressed+0xc4>
			LED_Off(LED1 | LED2 | LED3);
80003b2e:	30 ec       	mov	r12,14
80003b30:	f0 1f 00 28 	mcall	80003bd0 <button_pressed+0xc8>
			//store_passcode(0L);
			return PUSH_BUTTON1;
80003b34:	30 08       	mov	r8,0
80003b36:	c3 f8       	rjmp	80003bb4 <button_pressed+0xac>
		}
		else if (read_push_button(PB2, (uint8_t *)&PB2_Counter))
80003b38:	4a 7b       	lddpc	r11,80003bd4 <button_pressed+0xcc>
80003b3a:	30 bc       	mov	r12,11
80003b3c:	f0 1f 00 23 	mcall	80003bc8 <button_pressed+0xc0>
80003b40:	18 98       	mov	r8,r12
80003b42:	58 08       	cp.w	r8,0
80003b44:	c0 90       	breq	80003b56 <button_pressed+0x4e>
		{
			LED_On(LED1);
80003b46:	30 2c       	mov	r12,2
80003b48:	f0 1f 00 21 	mcall	80003bcc <button_pressed+0xc4>
			LED_Off(LED0 | LED2 | LED3);
80003b4c:	30 dc       	mov	r12,13
80003b4e:	f0 1f 00 21 	mcall	80003bd0 <button_pressed+0xc8>
			//store_passcode(1L);
			return PUSH_BUTTON2;
80003b52:	30 18       	mov	r8,1
80003b54:	c3 08       	rjmp	80003bb4 <button_pressed+0xac>
		}
		else if (read_push_button(PB3, (uint8_t *)&PB3_Counter))
80003b56:	4a 1b       	lddpc	r11,80003bd8 <button_pressed+0xd0>
80003b58:	30 cc       	mov	r12,12
80003b5a:	f0 1f 00 1c 	mcall	80003bc8 <button_pressed+0xc0>
80003b5e:	18 98       	mov	r8,r12
80003b60:	58 08       	cp.w	r8,0
80003b62:	c0 90       	breq	80003b74 <button_pressed+0x6c>
		{
			LED_On(LED2);
80003b64:	30 4c       	mov	r12,4
80003b66:	f0 1f 00 1a 	mcall	80003bcc <button_pressed+0xc4>
			LED_Off(LED0 | LED1 | LED3);
80003b6a:	30 bc       	mov	r12,11
80003b6c:	f0 1f 00 19 	mcall	80003bd0 <button_pressed+0xc8>
			//store_passcode(2L);
			return PUSH_BUTTON3;
80003b70:	30 28       	mov	r8,2
80003b72:	c2 18       	rjmp	80003bb4 <button_pressed+0xac>
		}
		else if (read_push_button(PB4, (uint8_t *)&PB4_Counter))
80003b74:	49 ab       	lddpc	r11,80003bdc <button_pressed+0xd4>
80003b76:	30 dc       	mov	r12,13
80003b78:	f0 1f 00 14 	mcall	80003bc8 <button_pressed+0xc0>
80003b7c:	18 98       	mov	r8,r12
80003b7e:	58 08       	cp.w	r8,0
80003b80:	c0 90       	breq	80003b92 <button_pressed+0x8a>
		{
			LED_On(LED3);
80003b82:	30 8c       	mov	r12,8
80003b84:	f0 1f 00 12 	mcall	80003bcc <button_pressed+0xc4>
			LED_Off(LED0 | LED1 | LED2);
80003b88:	30 7c       	mov	r12,7
80003b8a:	f0 1f 00 12 	mcall	80003bd0 <button_pressed+0xc8>
			//store_passcode(3L);
			return PUSH_BUTTON4;
80003b8e:	30 38       	mov	r8,3
80003b90:	c1 28       	rjmp	80003bb4 <button_pressed+0xac>
		}
		else if (read_push_button(PB_ENTER, (uint8_t *)&PB5_Counter))
80003b92:	49 4b       	lddpc	r11,80003be0 <button_pressed+0xd8>
80003b94:	32 ac       	mov	r12,42
80003b96:	f0 1f 00 0d 	mcall	80003bc8 <button_pressed+0xc0>
80003b9a:	18 98       	mov	r8,r12
80003b9c:	58 08       	cp.w	r8,0
80003b9e:	c0 90       	breq	80003bb0 <button_pressed+0xa8>
		{
			device_unlocked = true;
80003ba0:	49 19       	lddpc	r9,80003be4 <button_pressed+0xdc>
80003ba2:	30 18       	mov	r8,1
80003ba4:	b2 88       	st.b	r9[0x0],r8
			LED_Off(LED0 | LED1 | LED2 | LED3);
80003ba6:	30 fc       	mov	r12,15
80003ba8:	f0 1f 00 0a 	mcall	80003bd0 <button_pressed+0xc8>
			return ENTER_BUTTON;
80003bac:	30 48       	mov	r8,4
80003bae:	c0 38       	rjmp	80003bb4 <button_pressed+0xac>
		}
	}
	return NO_BUTTON;
80003bb0:	e0 68 00 ff 	mov	r8,255
}
80003bb4:	10 9c       	mov	r12,r8
80003bb6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bba:	00 00       	add	r0,r0
80003bbc:	80 00       	ld.sh	r0,r0[0x0]
80003bbe:	39 5c       	mov	r12,-107
80003bc0:	00 00       	add	r0,r0
80003bc2:	01 2d       	ld.uh	sp,r0++
80003bc4:	00 00       	add	r0,r0
80003bc6:	04 20       	rsub	r0,r2
80003bc8:	80 00       	ld.sh	r0,r0[0x0]
80003bca:	3c 3c       	mov	r12,-61
80003bcc:	80 00       	ld.sh	r0,r0[0x0]
80003bce:	49 cc       	lddpc	r12,80003c3c <read_push_button>
80003bd0:	80 00       	ld.sh	r0,r0[0x0]
80003bd2:	49 14       	lddpc	r4,80003c14 <check_all_buttons_high+0x2c>
80003bd4:	00 00       	add	r0,r0
80003bd6:	04 21       	rsub	r1,r2
80003bd8:	00 00       	add	r0,r0
80003bda:	04 22       	rsub	r2,r2
80003bdc:	00 00       	add	r0,r0
80003bde:	04 23       	rsub	r3,r2
80003be0:	00 00       	add	r0,r0
80003be2:	04 24       	rsub	r4,r2
80003be4:	00 00       	add	r0,r0
80003be6:	02 88       	andn	r8,r1

80003be8 <check_all_buttons_high>:

bool check_all_buttons_high(void)
{
80003be8:	eb cd 40 80 	pushm	r7,lr
80003bec:	1a 97       	mov	r7,sp
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003bee:	30 ac       	mov	r12,10
80003bf0:	f0 1f 00 12 	mcall	80003c38 <check_all_buttons_high+0x50>
80003bf4:	18 98       	mov	r8,r12
80003bf6:	58 18       	cp.w	r8,1
80003bf8:	c1 b1       	brne	80003c2e <check_all_buttons_high+0x46>
		&& (gpio_get_pin_value(PB2) == 1)
80003bfa:	30 bc       	mov	r12,11
80003bfc:	f0 1f 00 0f 	mcall	80003c38 <check_all_buttons_high+0x50>
80003c00:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003c02:	58 18       	cp.w	r8,1
80003c04:	c1 51       	brne	80003c2e <check_all_buttons_high+0x46>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
80003c06:	30 cc       	mov	r12,12
80003c08:	f0 1f 00 0c 	mcall	80003c38 <check_all_buttons_high+0x50>
80003c0c:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003c0e:	58 18       	cp.w	r8,1
80003c10:	c0 f1       	brne	80003c2e <check_all_buttons_high+0x46>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
80003c12:	30 dc       	mov	r12,13
80003c14:	f0 1f 00 09 	mcall	80003c38 <check_all_buttons_high+0x50>
80003c18:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003c1a:	58 18       	cp.w	r8,1
80003c1c:	c0 91       	brne	80003c2e <check_all_buttons_high+0x46>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
		&& (gpio_get_pin_value(PB_ENTER) == 1))
80003c1e:	32 ac       	mov	r12,42
80003c20:	f0 1f 00 06 	mcall	80003c38 <check_all_buttons_high+0x50>
80003c24:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003c26:	58 18       	cp.w	r8,1
80003c28:	c0 31       	brne	80003c2e <check_all_buttons_high+0x46>
		//if (button_released_iteration++ > 4)
		//{
			//button_released_iteration = 0;
			//return true;
		//}
		return true;
80003c2a:	30 18       	mov	r8,1
80003c2c:	c0 28       	rjmp	80003c30 <check_all_buttons_high+0x48>
	//else
	//{
		//button_released_iteration = 0;
	//}

	return false;
80003c2e:	30 08       	mov	r8,0
}
80003c30:	10 9c       	mov	r12,r8
80003c32:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c36:	00 00       	add	r0,r0
80003c38:	80 00       	ld.sh	r0,r0[0x0]
80003c3a:	8c 0c       	ld.sh	r12,r6[0x0]

80003c3c <read_push_button>:

bool read_push_button(uint32_t pin, uint8_t *counter)
{
80003c3c:	eb cd 40 80 	pushm	r7,lr
80003c40:	1a 97       	mov	r7,sp
80003c42:	20 3d       	sub	sp,12
80003c44:	ef 4c ff f8 	st.w	r7[-8],r12
80003c48:	ef 4b ff f4 	st.w	r7[-12],r11
	bool button_status = false;
80003c4c:	30 08       	mov	r8,0
80003c4e:	ef 68 ff ff 	st.b	r7[-1],r8

	if (gpio_get_pin_value(pin) == 0)
80003c52:	ee fc ff f8 	ld.w	r12,r7[-8]
80003c56:	f0 1f 00 0b 	mcall	80003c80 <read_push_button+0x44>
80003c5a:	18 98       	mov	r8,r12
80003c5c:	58 08       	cp.w	r8,0
80003c5e:	c0 81       	brne	80003c6e <read_push_button+0x32>
		//{
			//button_status = true;
			//*counter = 0;
			//button_released = false;
		//}
		button_status = true;
80003c60:	30 18       	mov	r8,1
80003c62:	ef 68 ff ff 	st.b	r7[-1],r8
		button_released = false;
80003c66:	48 89       	lddpc	r9,80003c84 <read_push_button+0x48>
80003c68:	30 08       	mov	r8,0
80003c6a:	b2 88       	st.b	r9[0x0],r8
80003c6c:	c0 48       	rjmp	80003c74 <read_push_button+0x38>
	}
	else
	{
		button_status = false;
80003c6e:	30 08       	mov	r8,0
80003c70:	ef 68 ff ff 	st.b	r7[-1],r8
		//*counter = 0;
	}
	return button_status;	
80003c74:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80003c78:	10 9c       	mov	r12,r8
80003c7a:	2f dd       	sub	sp,-12
80003c7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c80:	80 00       	ld.sh	r0,r0[0x0]
80003c82:	8c 0c       	ld.sh	r12,r6[0x0]
80003c84:	00 00       	add	r0,r0
80003c86:	01 2d       	ld.uh	sp,r0++

80003c88 <push_buttons_init>:

void push_buttons_init(void)
{
80003c88:	eb cd 40 80 	pushm	r7,lr
80003c8c:	1a 97       	mov	r7,sp
	gpio_configure_pin(PB1,GPIO_DIR_INPUT);
80003c8e:	30 0b       	mov	r11,0
80003c90:	30 ac       	mov	r12,10
80003c92:	f0 1f 00 0b 	mcall	80003cbc <push_buttons_init+0x34>
	gpio_configure_pin(PB2,GPIO_DIR_INPUT);
80003c96:	30 0b       	mov	r11,0
80003c98:	30 bc       	mov	r12,11
80003c9a:	f0 1f 00 09 	mcall	80003cbc <push_buttons_init+0x34>
	gpio_configure_pin(PB3,GPIO_DIR_INPUT);
80003c9e:	30 0b       	mov	r11,0
80003ca0:	30 cc       	mov	r12,12
80003ca2:	f0 1f 00 07 	mcall	80003cbc <push_buttons_init+0x34>
	gpio_configure_pin(PB4,GPIO_DIR_INPUT);
80003ca6:	30 0b       	mov	r11,0
80003ca8:	30 dc       	mov	r12,13
80003caa:	f0 1f 00 05 	mcall	80003cbc <push_buttons_init+0x34>
	gpio_configure_pin(PB_ENTER,GPIO_DIR_INPUT);
80003cae:	30 0b       	mov	r11,0
80003cb0:	32 ac       	mov	r12,42
80003cb2:	f0 1f 00 03 	mcall	80003cbc <push_buttons_init+0x34>
}
80003cb6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cba:	00 00       	add	r0,r0
80003cbc:	80 00       	ld.sh	r0,r0[0x0]
80003cbe:	8a 5e       	ld.sh	lr,r5[0xa]

80003cc0 <store_passcode>:

void store_passcode(uint32_t value)
{
80003cc0:	eb cd 40 80 	pushm	r7,lr
80003cc4:	1a 97       	mov	r7,sp
80003cc6:	20 2d       	sub	sp,8
80003cc8:	ef 4c ff f8 	st.w	r7[-8],r12
	unsigned char index = 0;
80003ccc:	30 08       	mov	r8,0
80003cce:	ef 68 ff ff 	st.b	r7[-1],r8
	index = passcode_byte_index >> 4;
80003cd2:	49 c8       	lddpc	r8,80003d40 <store_passcode+0x80>
80003cd4:	11 88       	ld.ub	r8,r8[0x0]
80003cd6:	5c 58       	castu.b	r8
80003cd8:	a5 88       	lsr	r8,0x4
80003cda:	ef 68 ff ff 	st.b	r7[-1],r8
	pass_code[index] = pass_code[index] | (value << ((passcode_byte_index & 0x0000000F) << 1));
80003cde:	49 a8       	lddpc	r8,80003d44 <store_passcode+0x84>
80003ce0:	70 09       	ld.w	r9,r8[0x0]
80003ce2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003ce6:	a3 68       	lsl	r8,0x2
80003ce8:	10 09       	add	r9,r8
80003cea:	49 78       	lddpc	r8,80003d44 <store_passcode+0x84>
80003cec:	70 0a       	ld.w	r10,r8[0x0]
80003cee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003cf2:	a3 68       	lsl	r8,0x2
80003cf4:	f4 08 00 08 	add	r8,r10,r8
80003cf8:	70 0a       	ld.w	r10,r8[0x0]
80003cfa:	49 28       	lddpc	r8,80003d40 <store_passcode+0x80>
80003cfc:	11 88       	ld.ub	r8,r8[0x0]
80003cfe:	5c 58       	castu.b	r8
80003d00:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003d04:	a1 78       	lsl	r8,0x1
80003d06:	ee fb ff f8 	ld.w	r11,r7[-8]
80003d0a:	f6 08 09 48 	lsl	r8,r11,r8
80003d0e:	f5 e8 10 08 	or	r8,r10,r8
80003d12:	93 08       	st.w	r9[0x0],r8
	if (++passcode_byte_index >= 128)
80003d14:	48 b8       	lddpc	r8,80003d40 <store_passcode+0x80>
80003d16:	11 88       	ld.ub	r8,r8[0x0]
80003d18:	5c 58       	castu.b	r8
80003d1a:	2f f8       	sub	r8,-1
80003d1c:	5c 58       	castu.b	r8
80003d1e:	48 99       	lddpc	r9,80003d40 <store_passcode+0x80>
80003d20:	b2 88       	st.b	r9[0x0],r8
80003d22:	48 88       	lddpc	r8,80003d40 <store_passcode+0x80>
80003d24:	11 88       	ld.ub	r8,r8[0x0]
80003d26:	5c 58       	castu.b	r8
80003d28:	10 99       	mov	r9,r8
80003d2a:	30 08       	mov	r8,0
80003d2c:	f0 09 18 00 	cp.b	r9,r8
80003d30:	c0 44       	brge	80003d38 <store_passcode+0x78>
	{
		passcode_byte_index = 0;
80003d32:	48 49       	lddpc	r9,80003d40 <store_passcode+0x80>
80003d34:	30 08       	mov	r8,0
80003d36:	b2 88       	st.b	r9[0x0],r8
	}
	//inter_key_delay = ENABLED;
}
80003d38:	2f ed       	sub	sp,-8
80003d3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d3e:	00 00       	add	r0,r0
80003d40:	00 00       	add	r0,r0
80003d42:	02 89       	andn	r9,r1
80003d44:	00 00       	add	r0,r0
80003d46:	0b 64       	ld.uh	r4,--r5

80003d48 <store_sequence>:

void store_sequence(uint8_t value)
{
80003d48:	eb cd 40 80 	pushm	r7,lr
80003d4c:	1a 97       	mov	r7,sp
80003d4e:	20 4d       	sub	sp,16
80003d50:	18 98       	mov	r8,r12
80003d52:	ef 68 ff f0 	st.b	r7[-16],r8
	static uint8_t frame_number = 0;
	uint8_t temp1, temp2, temp3;
	uint8_t shift_value = value * 2;
80003d56:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003d5a:	a1 78       	lsl	r8,0x1
80003d5c:	ef 68 ff f9 	st.b	r7[-7],r8
	uint8_t button_bit_mask = 0x03 << shift_value;
80003d60:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003d64:	30 39       	mov	r9,3
80003d66:	f2 08 09 48 	lsl	r8,r9,r8
80003d6a:	ef 68 ff fa 	st.b	r7[-6],r8
	uint8_t increment_bit_mask = 0x01 << shift_value;
80003d6e:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003d72:	30 19       	mov	r9,1
80003d74:	f2 08 09 48 	lsl	r8,r9,r8
80003d78:	ef 68 ff fb 	st.b	r7[-5],r8
	
	switch (value)
80003d7c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003d80:	58 08       	cp.w	r8,0
80003d82:	e0 85 00 85 	brlt	80003e8c <store_sequence+0x144>
80003d86:	58 28       	cp.w	r8,2
80003d88:	e0 8a 00 05 	brle	80003d92 <store_sequence+0x4a>
80003d8c:	58 38       	cp.w	r8,3
80003d8e:	c6 70       	breq	80003e5c <store_sequence+0x114>
80003d90:	c7 e8       	rjmp	80003e8c <store_sequence+0x144>
	{
	case 0:
	case 1:
	case 2:
		temp1 = Stored_values_ram.device_id_sequence[frame_number] & button_bit_mask;
80003d92:	4c 18       	lddpc	r8,80003e94 <store_sequence+0x14c>
80003d94:	11 88       	ld.ub	r8,r8[0x0]
80003d96:	4c 19       	lddpc	r9,80003e98 <store_sequence+0x150>
80003d98:	f2 08 00 08 	add	r8,r9,r8
80003d9c:	f1 38 00 80 	ld.ub	r8,r8[128]
80003da0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003da4:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80003da8:	f3 e8 00 08 	and	r8,r9,r8
80003dac:	ef 68 ff f6 	st.b	r7[-10],r8
		temp1 = temp1 + increment_bit_mask;
80003db0:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80003db4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003db8:	f2 08 00 08 	add	r8,r9,r8
80003dbc:	ef 68 ff f6 	st.b	r7[-10],r8
		temp1 = temp1 & button_bit_mask;
80003dc0:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80003dc4:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80003dc8:	f3 e8 00 08 	and	r8,r9,r8
80003dcc:	ef 68 ff f6 	st.b	r7[-10],r8
		LED_Off(0x0000000f);
80003dd0:	30 fc       	mov	r12,15
80003dd2:	f0 1f 00 33 	mcall	80003e9c <store_sequence+0x154>
		if (temp1)
80003dd6:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80003dda:	30 08       	mov	r8,0
80003ddc:	f0 09 18 00 	cp.b	r9,r8
80003de0:	c1 b0       	breq	80003e16 <store_sequence+0xce>
		{
			uint32_t led_bit_mask = 0;
80003de2:	30 08       	mov	r8,0
80003de4:	ef 48 ff fc 	st.w	r7[-4],r8
			led_bit_mask = ((uint32_t)1L << (value * 3)) << ((temp1 >> shift_value) - 1);
80003de8:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003dec:	12 98       	mov	r8,r9
80003dee:	a1 78       	lsl	r8,0x1
80003df0:	12 08       	add	r8,r9
80003df2:	30 19       	mov	r9,1
80003df4:	f2 08 09 49 	lsl	r9,r9,r8
80003df8:	ef 3a ff f6 	ld.ub	r10,r7[-10]
80003dfc:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003e00:	f4 08 08 48 	asr	r8,r10,r8
80003e04:	20 18       	sub	r8,1
80003e06:	f2 08 09 48 	lsl	r8,r9,r8
80003e0a:	ef 48 ff fc 	st.w	r7[-4],r8
			LED_On(led_bit_mask);
80003e0e:	ee fc ff fc 	ld.w	r12,r7[-4]
80003e12:	f0 1f 00 24 	mcall	80003ea0 <store_sequence+0x158>
		}				
		temp2 = Stored_values_ram.device_id_sequence[frame_number] & ~button_bit_mask;
80003e16:	4a 08       	lddpc	r8,80003e94 <store_sequence+0x14c>
80003e18:	11 88       	ld.ub	r8,r8[0x0]
80003e1a:	4a 09       	lddpc	r9,80003e98 <store_sequence+0x150>
80003e1c:	f2 08 00 08 	add	r8,r9,r8
80003e20:	f1 38 00 80 	ld.ub	r8,r8[128]
80003e24:	5c 58       	castu.b	r8
80003e26:	10 99       	mov	r9,r8
80003e28:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80003e2c:	5c d8       	com	r8
80003e2e:	5c 58       	castu.b	r8
80003e30:	f3 e8 00 08 	and	r8,r9,r8
80003e34:	5c 58       	castu.b	r8
80003e36:	ef 68 ff f7 	st.b	r7[-9],r8
		//temp2 = ~temp2;
		temp3 = temp1 | temp2;
80003e3a:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80003e3e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003e42:	f3 e8 10 08 	or	r8,r9,r8
80003e46:	ef 68 ff f8 	st.b	r7[-8],r8
		Stored_values_ram.device_id_sequence[frame_number] = temp3;
80003e4a:	49 38       	lddpc	r8,80003e94 <store_sequence+0x14c>
80003e4c:	11 88       	ld.ub	r8,r8[0x0]
80003e4e:	49 39       	lddpc	r9,80003e98 <store_sequence+0x150>
80003e50:	10 09       	add	r9,r8
80003e52:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003e56:	f3 68 00 80 	st.b	r9[128],r8
		break;
80003e5a:	c1 98       	rjmp	80003e8c <store_sequence+0x144>
	case 3:
		Stored_values_ram.device_id_sequence[frame_number++] |= 0xC0;
80003e5c:	48 e8       	lddpc	r8,80003e94 <store_sequence+0x14c>
80003e5e:	11 88       	ld.ub	r8,r8[0x0]
80003e60:	10 99       	mov	r9,r8
80003e62:	12 9a       	mov	r10,r9
80003e64:	48 db       	lddpc	r11,80003e98 <store_sequence+0x150>
80003e66:	f6 09 00 09 	add	r9,r11,r9
80003e6a:	f3 39 00 80 	ld.ub	r9,r9[128]
80003e6e:	5c 59       	castu.b	r9
80003e70:	ea 19 ff ff 	orh	r9,0xffff
80003e74:	e8 19 ff c0 	orl	r9,0xffc0
80003e78:	5c 59       	castu.b	r9
80003e7a:	48 8b       	lddpc	r11,80003e98 <store_sequence+0x150>
80003e7c:	f6 0a 00 0a 	add	r10,r11,r10
80003e80:	f5 69 00 80 	st.b	r10[128],r9
80003e84:	2f f8       	sub	r8,-1
80003e86:	5c 58       	castu.b	r8
80003e88:	48 39       	lddpc	r9,80003e94 <store_sequence+0x14c>
80003e8a:	b2 88       	st.b	r9[0x0],r8
		break;
	}	
}
80003e8c:	2f cd       	sub	sp,-16
80003e8e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e92:	00 00       	add	r0,r0
80003e94:	00 00       	add	r0,r0
80003e96:	04 32       	cp.w	r2,r2
80003e98:	00 00       	add	r0,r0
80003e9a:	0a 20       	rsub	r0,r5
80003e9c:	80 00       	ld.sh	r0,r0[0x0]
80003e9e:	49 14       	lddpc	r4,80003ee0 <check_programming_mode_entry_sequence+0x3c>
80003ea0:	80 00       	ld.sh	r0,r0[0x0]
80003ea2:	49 cc       	lddpc	r12,80003f10 <check_programming_mode_entry_sequence+0x6c>

80003ea4 <check_programming_mode_entry_sequence>:

bool check_programming_mode_entry_sequence(void)
{
80003ea4:	eb cd 40 80 	pushm	r7,lr
80003ea8:	1a 97       	mov	r7,sp
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
		&& gpio_get_pin_value(PB3) == 0
80003eaa:	30 ac       	mov	r12,10
80003eac:	f0 1f 00 1e 	mcall	80003f24 <check_programming_mode_entry_sequence+0x80>
80003eb0:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003eb2:	58 08       	cp.w	r8,0
80003eb4:	c2 e1       	brne	80003f10 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
80003eb6:	30 cc       	mov	r12,12
80003eb8:	f0 1f 00 1b 	mcall	80003f24 <check_programming_mode_entry_sequence+0x80>
80003ebc:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003ebe:	58 08       	cp.w	r8,0
80003ec0:	c2 81       	brne	80003f10 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
80003ec2:	30 dc       	mov	r12,13
80003ec4:	f0 1f 00 18 	mcall	80003f24 <check_programming_mode_entry_sequence+0x80>
80003ec8:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003eca:	58 08       	cp.w	r8,0
80003ecc:	c2 21       	brne	80003f10 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB_ENTER) == 1)
80003ece:	30 bc       	mov	r12,11
80003ed0:	f0 1f 00 15 	mcall	80003f24 <check_programming_mode_entry_sequence+0x80>
80003ed4:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003ed6:	58 18       	cp.w	r8,1
80003ed8:	c1 c1       	brne	80003f10 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB_ENTER) == 1)
80003eda:	32 ac       	mov	r12,42
80003edc:	f0 1f 00 12 	mcall	80003f24 <check_programming_mode_entry_sequence+0x80>
80003ee0:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003ee2:	58 18       	cp.w	r8,1
80003ee4:	c1 61       	brne	80003f10 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB_ENTER) == 1)
	{
		if (programming_mode_sequence_counter++ >= 100)
80003ee6:	49 18       	lddpc	r8,80003f28 <check_programming_mode_entry_sequence+0x84>
80003ee8:	90 08       	ld.sh	r8,r8[0x0]
80003eea:	36 39       	mov	r9,99
80003eec:	f2 08 19 00 	cp.h	r8,r9
80003ef0:	5f b9       	srhi	r9
80003ef2:	5c 59       	castu.b	r9
80003ef4:	2f f8       	sub	r8,-1
80003ef6:	5c 88       	casts.h	r8
80003ef8:	48 ca       	lddpc	r10,80003f28 <check_programming_mode_entry_sequence+0x84>
80003efa:	b4 08       	st.h	r10[0x0],r8
80003efc:	58 09       	cp.w	r9,0
80003efe:	c0 d0       	breq	80003f18 <check_programming_mode_entry_sequence+0x74>
		{
			programming_mode_sequence_counter = 0;
80003f00:	48 a9       	lddpc	r9,80003f28 <check_programming_mode_entry_sequence+0x84>
80003f02:	30 08       	mov	r8,0
80003f04:	b2 08       	st.h	r9[0x0],r8
			button_released = false;
80003f06:	48 a9       	lddpc	r9,80003f2c <check_programming_mode_entry_sequence+0x88>
80003f08:	30 08       	mov	r8,0
80003f0a:	b2 88       	st.b	r9[0x0],r8
			return true;
80003f0c:	30 18       	mov	r8,1
80003f0e:	c0 78       	rjmp	80003f1c <check_programming_mode_entry_sequence+0x78>
		}
	}
	else
	{
		programming_mode_sequence_counter = 0;
80003f10:	48 69       	lddpc	r9,80003f28 <check_programming_mode_entry_sequence+0x84>
80003f12:	30 08       	mov	r8,0
80003f14:	b2 08       	st.h	r9[0x0],r8
80003f16:	c0 28       	rjmp	80003f1a <check_programming_mode_entry_sequence+0x76>
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003f18:	d7 03       	nop
	}
	else
	{
		programming_mode_sequence_counter = 0;
	}
	return false;
80003f1a:	30 08       	mov	r8,0
}
80003f1c:	10 9c       	mov	r12,r8
80003f1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f22:	00 00       	add	r0,r0
80003f24:	80 00       	ld.sh	r0,r0[0x0]
80003f26:	8c 0c       	ld.sh	r12,r6[0x0]
80003f28:	00 00       	add	r0,r0
80003f2a:	04 30       	cp.w	r0,r2
80003f2c:	00 00       	add	r0,r0
80003f2e:	01 2d       	ld.uh	sp,r0++

80003f30 <check_normal_mode_entry_sequence>:

bool check_normal_mode_entry_sequence(void)
{
80003f30:	eb cd 40 80 	pushm	r7,lr
80003f34:	1a 97       	mov	r7,sp
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(PB_ENTER) == 0 
		&& gpio_get_pin_value(PB4) == 0
80003f36:	32 ac       	mov	r12,42
80003f38:	f0 1f 00 40 	mcall	80004038 <check_normal_mode_entry_sequence+0x108>
80003f3c:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(PB_ENTER) == 0 
80003f3e:	58 08       	cp.w	r8,0
80003f40:	c3 41       	brne	80003fa8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
80003f42:	30 dc       	mov	r12,13
80003f44:	f0 1f 00 3d 	mcall	80004038 <check_normal_mode_entry_sequence+0x108>
80003f48:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(PB_ENTER) == 0 
80003f4a:	58 08       	cp.w	r8,0
80003f4c:	c2 e1       	brne	80003fa8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
80003f4e:	30 ac       	mov	r12,10
80003f50:	f0 1f 00 3a 	mcall	80004038 <check_normal_mode_entry_sequence+0x108>
80003f54:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(PB_ENTER) == 0 
80003f56:	58 18       	cp.w	r8,1
80003f58:	c2 81       	brne	80003fa8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003f5a:	30 bc       	mov	r12,11
80003f5c:	f0 1f 00 37 	mcall	80004038 <check_normal_mode_entry_sequence+0x108>
80003f60:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(PB_ENTER) == 0 
80003f62:	58 18       	cp.w	r8,1
80003f64:	c2 21       	brne	80003fa8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003f66:	30 cc       	mov	r12,12
80003f68:	f0 1f 00 34 	mcall	80004038 <check_normal_mode_entry_sequence+0x108>
80003f6c:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(PB_ENTER) == 0 
80003f6e:	58 18       	cp.w	r8,1
80003f70:	c1 c1       	brne	80003fa8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
	{
		normal_mode_unlock_device_sequence_counter = 0;
80003f72:	4b 39       	lddpc	r9,8000403c <check_normal_mode_entry_sequence+0x10c>
80003f74:	30 08       	mov	r8,0
80003f76:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_device_id_sequence_counter++ >= 200)
80003f78:	4b 28       	lddpc	r8,80004040 <check_normal_mode_entry_sequence+0x110>
80003f7a:	11 88       	ld.ub	r8,r8[0x0]
80003f7c:	3c 79       	mov	r9,-57
80003f7e:	f2 08 18 00 	cp.b	r8,r9
80003f82:	5f b9       	srhi	r9
80003f84:	5c 59       	castu.b	r9
80003f86:	2f f8       	sub	r8,-1
80003f88:	5c 58       	castu.b	r8
80003f8a:	4a ea       	lddpc	r10,80004040 <check_normal_mode_entry_sequence+0x110>
80003f8c:	b4 88       	st.b	r10[0x0],r8
80003f8e:	58 09       	cp.w	r9,0
80003f90:	c4 c0       	breq	80004028 <check_normal_mode_entry_sequence+0xf8>
		{
			normal_mode_device_id_sequence_counter = 0;
80003f92:	4a c9       	lddpc	r9,80004040 <check_normal_mode_entry_sequence+0x110>
80003f94:	30 08       	mov	r8,0
80003f96:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003f98:	4a b9       	lddpc	r9,80004044 <check_normal_mode_entry_sequence+0x114>
80003f9a:	30 08       	mov	r8,0
80003f9c:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = DEVICE_ID;
80003f9e:	4a b9       	lddpc	r9,80004048 <check_normal_mode_entry_sequence+0x118>
80003fa0:	30 38       	mov	r8,3
80003fa2:	b2 88       	st.b	r9[0x0],r8
			return true;
80003fa4:	30 18       	mov	r8,1
80003fa6:	c4 58       	rjmp	80004030 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else if (gpio_get_pin_value(PB_ENTER) == 0
			&& gpio_get_pin_value(PB2) == 0
80003fa8:	32 ac       	mov	r12,42
80003faa:	f0 1f 00 24 	mcall	80004038 <check_normal_mode_entry_sequence+0x108>
80003fae:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(PB_ENTER) == 0
80003fb0:	58 08       	cp.w	r8,0
80003fb2:	c3 41       	brne	8000401a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
80003fb4:	30 bc       	mov	r12,11
80003fb6:	f0 1f 00 21 	mcall	80004038 <check_normal_mode_entry_sequence+0x108>
80003fba:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(PB_ENTER) == 0
80003fbc:	58 08       	cp.w	r8,0
80003fbe:	c2 e1       	brne	8000401a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
80003fc0:	30 ac       	mov	r12,10
80003fc2:	f0 1f 00 1e 	mcall	80004038 <check_normal_mode_entry_sequence+0x108>
80003fc6:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(PB_ENTER) == 0
80003fc8:	58 18       	cp.w	r8,1
80003fca:	c2 81       	brne	8000401a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003fcc:	30 cc       	mov	r12,12
80003fce:	f0 1f 00 1b 	mcall	80004038 <check_normal_mode_entry_sequence+0x108>
80003fd2:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(PB_ENTER) == 0
80003fd4:	58 18       	cp.w	r8,1
80003fd6:	c2 21       	brne	8000401a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003fd8:	30 dc       	mov	r12,13
80003fda:	f0 1f 00 18 	mcall	80004038 <check_normal_mode_entry_sequence+0x108>
80003fde:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(PB_ENTER) == 0
80003fe0:	58 18       	cp.w	r8,1
80003fe2:	c1 c1       	brne	8000401a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
	{
		normal_mode_device_id_sequence_counter = 0;
80003fe4:	49 79       	lddpc	r9,80004040 <check_normal_mode_entry_sequence+0x110>
80003fe6:	30 08       	mov	r8,0
80003fe8:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_unlock_device_sequence_counter++ >= 200)
80003fea:	49 58       	lddpc	r8,8000403c <check_normal_mode_entry_sequence+0x10c>
80003fec:	11 88       	ld.ub	r8,r8[0x0]
80003fee:	3c 79       	mov	r9,-57
80003ff0:	f2 08 18 00 	cp.b	r8,r9
80003ff4:	5f b9       	srhi	r9
80003ff6:	5c 59       	castu.b	r9
80003ff8:	2f f8       	sub	r8,-1
80003ffa:	5c 58       	castu.b	r8
80003ffc:	49 0a       	lddpc	r10,8000403c <check_normal_mode_entry_sequence+0x10c>
80003ffe:	b4 88       	st.b	r10[0x0],r8
80004000:	58 09       	cp.w	r9,0
80004002:	c1 50       	breq	8000402c <check_normal_mode_entry_sequence+0xfc>
		{
			normal_mode_unlock_device_sequence_counter = 0;
80004004:	48 e9       	lddpc	r9,8000403c <check_normal_mode_entry_sequence+0x10c>
80004006:	30 08       	mov	r8,0
80004008:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
8000400a:	48 f9       	lddpc	r9,80004044 <check_normal_mode_entry_sequence+0x114>
8000400c:	30 08       	mov	r8,0
8000400e:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = UNLOCK_CRYPTX2;
80004010:	48 e9       	lddpc	r9,80004048 <check_normal_mode_entry_sequence+0x118>
80004012:	30 48       	mov	r8,4
80004014:	b2 88       	st.b	r9[0x0],r8
			return true;
80004016:	30 18       	mov	r8,1
80004018:	c0 c8       	rjmp	80004030 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else
	{
		normal_mode_device_id_sequence_counter = 0;
8000401a:	48 a9       	lddpc	r9,80004040 <check_normal_mode_entry_sequence+0x110>
8000401c:	30 08       	mov	r8,0
8000401e:	b2 88       	st.b	r9[0x0],r8
		normal_mode_unlock_device_sequence_counter = 0;
80004020:	48 79       	lddpc	r9,8000403c <check_normal_mode_entry_sequence+0x10c>
80004022:	30 08       	mov	r8,0
80004024:	b2 88       	st.b	r9[0x0],r8
80004026:	c0 48       	rjmp	8000402e <check_normal_mode_entry_sequence+0xfe>
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(PB_ENTER) == 0 
80004028:	d7 03       	nop
8000402a:	c0 28       	rjmp	8000402e <check_normal_mode_entry_sequence+0xfe>
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(PB_ENTER) == 0
8000402c:	d7 03       	nop
	else
	{
		normal_mode_device_id_sequence_counter = 0;
		normal_mode_unlock_device_sequence_counter = 0;
	}
	return false;
8000402e:	30 08       	mov	r8,0
}
80004030:	10 9c       	mov	r12,r8
80004032:	e3 cd 80 80 	ldm	sp++,r7,pc
80004036:	00 00       	add	r0,r0
80004038:	80 00       	ld.sh	r0,r0[0x0]
8000403a:	8c 0c       	ld.sh	r12,r6[0x0]
8000403c:	00 00       	add	r0,r0
8000403e:	04 2e       	rsub	lr,r2
80004040:	00 00       	add	r0,r0
80004042:	04 2f       	rsub	pc,r2
80004044:	00 00       	add	r0,r0
80004046:	01 2d       	ld.uh	sp,r0++
80004048:	00 00       	add	r0,r0
8000404a:	03 fb       	ld.ub	r11,r1[0x7]

8000404c <check_for_mode_selected>:

void check_for_mode_selected(void)
{
8000404c:	eb cd 40 80 	pushm	r7,lr
80004050:	1a 97       	mov	r7,sp
	Read_button();
80004052:	f0 1f 00 03 	mcall	8000405c <check_for_mode_selected+0x10>
}
80004056:	e3 cd 80 80 	ldm	sp++,r7,pc
8000405a:	00 00       	add	r0,r0
8000405c:	80 00       	ld.sh	r0,r0[0x0]
8000405e:	39 94       	mov	r4,-103

80004060 <process_selected_mode>:

uint8_t process_selected_mode(void)
{
80004060:	eb cd 40 80 	pushm	r7,lr
80004064:	1a 97       	mov	r7,sp
80004066:	20 1d       	sub	sp,4
	uint8_t return_value = FAILED;
80004068:	30 08       	mov	r8,0
8000406a:	ef 68 ff ff 	st.b	r7[-1],r8
	static uint8_t total_presses = 0;
	
	
	if (enter_button_status == READY_TO_TRIGGER)
8000406e:	4d 38       	lddpc	r8,800041b8 <process_selected_mode+0x158>
80004070:	11 88       	ld.ub	r8,r8[0x0]
80004072:	5c 58       	castu.b	r8
80004074:	c1 51       	brne	8000409e <process_selected_mode+0x3e>
	{
		memset((uint8_t *)temp_password, 0, 32);
80004076:	32 0a       	mov	r10,32
80004078:	30 0b       	mov	r11,0
8000407a:	4d 1c       	lddpc	r12,800041bc <process_selected_mode+0x15c>
8000407c:	f0 1f 00 51 	mcall	800041c0 <process_selected_mode+0x160>
		memset((uint8_t *)temp_password1, 0, 32);
80004080:	32 0a       	mov	r10,32
80004082:	30 0b       	mov	r11,0
80004084:	4d 0c       	lddpc	r12,800041c4 <process_selected_mode+0x164>
80004086:	f0 1f 00 4f 	mcall	800041c0 <process_selected_mode+0x160>
		pass_code = temp_password;
8000408a:	4d 08       	lddpc	r8,800041c8 <process_selected_mode+0x168>
8000408c:	4c c9       	lddpc	r9,800041bc <process_selected_mode+0x15c>
8000408e:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
80004090:	4c f9       	lddpc	r9,800041cc <process_selected_mode+0x16c>
80004092:	30 08       	mov	r8,0
80004094:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_FIRST_PRESS;
80004096:	4c 99       	lddpc	r9,800041b8 <process_selected_mode+0x158>
80004098:	30 18       	mov	r8,1
8000409a:	b2 88       	st.b	r9[0x0],r8
8000409c:	c8 58       	rjmp	800041a6 <process_selected_mode+0x146>
	}
	else if (enter_button_status == FIRST_TIME_PRESSED)
8000409e:	4c 78       	lddpc	r8,800041b8 <process_selected_mode+0x158>
800040a0:	11 88       	ld.ub	r8,r8[0x0]
800040a2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800040a6:	30 28       	mov	r8,2
800040a8:	f0 09 18 00 	cp.b	r9,r8
800040ac:	c1 81       	brne	800040dc <process_selected_mode+0x7c>
	{
		store_passcode(3L);
800040ae:	30 3c       	mov	r12,3
800040b0:	f0 1f 00 48 	mcall	800041d0 <process_selected_mode+0x170>
		pass_code = temp_password1;
800040b4:	4c 58       	lddpc	r8,800041c8 <process_selected_mode+0x168>
800040b6:	4c 49       	lddpc	r9,800041c4 <process_selected_mode+0x164>
800040b8:	91 09       	st.w	r8[0x0],r9
		total_presses = total_presses + passcode_byte_index;
800040ba:	4c 78       	lddpc	r8,800041d4 <process_selected_mode+0x174>
800040bc:	11 89       	ld.ub	r9,r8[0x0]
800040be:	4c 48       	lddpc	r8,800041cc <process_selected_mode+0x16c>
800040c0:	11 88       	ld.ub	r8,r8[0x0]
800040c2:	5c 58       	castu.b	r8
800040c4:	f2 08 00 08 	add	r8,r9,r8
800040c8:	5c 58       	castu.b	r8
800040ca:	4c 39       	lddpc	r9,800041d4 <process_selected_mode+0x174>
800040cc:	b2 88       	st.b	r9[0x0],r8
		passcode_byte_index = 0;
800040ce:	4c 09       	lddpc	r9,800041cc <process_selected_mode+0x16c>
800040d0:	30 08       	mov	r8,0
800040d2:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_SECOND_PRESS;
800040d4:	4b 99       	lddpc	r9,800041b8 <process_selected_mode+0x158>
800040d6:	30 38       	mov	r8,3
800040d8:	b2 88       	st.b	r9[0x0],r8
800040da:	c6 68       	rjmp	800041a6 <process_selected_mode+0x146>
		//Wait_timer = 2000;
	}
	else if (enter_button_status == SECOND_TIME_PRESSED)
800040dc:	4b 78       	lddpc	r8,800041b8 <process_selected_mode+0x158>
800040de:	11 88       	ld.ub	r8,r8[0x0]
800040e0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800040e4:	30 48       	mov	r8,4
800040e6:	f0 09 18 00 	cp.b	r9,r8
800040ea:	c3 81       	brne	8000415a <process_selected_mode+0xfa>
	{
		store_passcode(3L);
800040ec:	30 3c       	mov	r12,3
800040ee:	f0 1f 00 39 	mcall	800041d0 <process_selected_mode+0x170>
		if (compare_entered_passwords() == true)
800040f2:	f0 1f 00 3a 	mcall	800041d8 <process_selected_mode+0x178>
800040f6:	18 98       	mov	r8,r12
800040f8:	58 08       	cp.w	r8,0
800040fa:	c2 c0       	breq	80004152 <process_selected_mode+0xf2>
		{
			memset((uint8_t *)temp_password, 0, 32);
800040fc:	32 0a       	mov	r10,32
800040fe:	30 0b       	mov	r11,0
80004100:	4a fc       	lddpc	r12,800041bc <process_selected_mode+0x15c>
80004102:	f0 1f 00 30 	mcall	800041c0 <process_selected_mode+0x160>
			pass_code = temp_password;
80004106:	4b 18       	lddpc	r8,800041c8 <process_selected_mode+0x168>
80004108:	4a d9       	lddpc	r9,800041bc <process_selected_mode+0x15c>
8000410a:	91 09       	st.w	r8[0x0],r9
			passcode_byte_index = 0;
8000410c:	4b 09       	lddpc	r9,800041cc <process_selected_mode+0x16c>
8000410e:	30 08       	mov	r8,0
80004110:	b2 88       	st.b	r9[0x0],r8
			enter_button_status = WAITING_FOR_USER_INPUT;
80004112:	4a a9       	lddpc	r9,800041b8 <process_selected_mode+0x158>
80004114:	30 58       	mov	r8,5
80004116:	b2 88       	st.b	r9[0x0],r8
			switch (mode_chosen)
80004118:	4b 18       	lddpc	r8,800041dc <process_selected_mode+0x17c>
8000411a:	11 88       	ld.ub	r8,r8[0x0]
8000411c:	5c 58       	castu.b	r8
8000411e:	58 18       	cp.w	r8,1
80004120:	c0 e0       	breq	8000413c <process_selected_mode+0xdc>
80004122:	e0 89 00 05 	brgt	8000412c <process_selected_mode+0xcc>
80004126:	58 08       	cp.w	r8,0
80004128:	c0 70       	breq	80004136 <process_selected_mode+0xd6>
			}

		}
		else
		{
			enter_button_status = READY_TO_TRIGGER;
8000412a:	c3 e8       	rjmp	800041a6 <process_selected_mode+0x146>
		{
			memset((uint8_t *)temp_password, 0, 32);
			pass_code = temp_password;
			passcode_byte_index = 0;
			enter_button_status = WAITING_FOR_USER_INPUT;
			switch (mode_chosen)
8000412c:	58 28       	cp.w	r8,2
8000412e:	c0 80       	breq	8000413e <process_selected_mode+0xde>
80004130:	58 38       	cp.w	r8,3
80004132:	c0 70       	breq	80004140 <process_selected_mode+0xe0>
			}

		}
		else
		{
			enter_button_status = READY_TO_TRIGGER;
80004134:	c3 98       	rjmp	800041a6 <process_selected_mode+0x146>
			passcode_byte_index = 0;
			enter_button_status = WAITING_FOR_USER_INPUT;
			switch (mode_chosen)
			{
			case _UNLOCK_PASSWORD:
				Start_W_timer();			
80004136:	f0 1f 00 2b 	mcall	800041e0 <process_selected_mode+0x180>
				break;
8000413a:	c0 b8       	rjmp	80004150 <process_selected_mode+0xf0>
			case _HIDDEN_DATA_UNLOCK_PASSWORD:
				break;
8000413c:	c0 a8       	rjmp	80004150 <process_selected_mode+0xf0>
			case _PANIC_MODE:
				break;
8000413e:	c0 98       	rjmp	80004150 <process_selected_mode+0xf0>
			case _DEVICE_ID_CONFIRM:
				memset((uint8_t *)Stored_values_ram.device_id_sequence, 0, 32);
80004140:	4a 98       	lddpc	r8,800041e4 <process_selected_mode+0x184>
80004142:	28 08       	sub	r8,-128
80004144:	32 0a       	mov	r10,32
80004146:	30 0b       	mov	r11,0
80004148:	10 9c       	mov	r12,r8
8000414a:	f0 1f 00 1e 	mcall	800041c0 <process_selected_mode+0x160>
			}

		}
		else
		{
			enter_button_status = READY_TO_TRIGGER;
8000414e:	c2 c8       	rjmp	800041a6 <process_selected_mode+0x146>
80004150:	c2 b8       	rjmp	800041a6 <process_selected_mode+0x146>
80004152:	49 a9       	lddpc	r9,800041b8 <process_selected_mode+0x158>
80004154:	30 08       	mov	r8,0
80004156:	b2 88       	st.b	r9[0x0],r8
80004158:	c2 78       	rjmp	800041a6 <process_selected_mode+0x146>
		}
		
	}
	else if (enter_button_status == THIRD_TIME_PRESSED)
8000415a:	49 88       	lddpc	r8,800041b8 <process_selected_mode+0x158>
8000415c:	11 88       	ld.ub	r8,r8[0x0]
8000415e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80004162:	30 68       	mov	r8,6
80004164:	f0 09 18 00 	cp.b	r9,r8
80004168:	c1 f1       	brne	800041a6 <process_selected_mode+0x146>
	{
		
		switch (mode_chosen)
8000416a:	49 d8       	lddpc	r8,800041dc <process_selected_mode+0x17c>
8000416c:	11 88       	ld.ub	r8,r8[0x0]
8000416e:	5c 58       	castu.b	r8
80004170:	58 18       	cp.w	r8,1
80004172:	c1 40       	breq	8000419a <process_selected_mode+0x13a>
80004174:	e0 89 00 05 	brgt	8000417e <process_selected_mode+0x11e>
80004178:	58 08       	cp.w	r8,0
8000417a:	c0 70       	breq	80004188 <process_selected_mode+0x128>
8000417c:	c1 28       	rjmp	800041a0 <process_selected_mode+0x140>
8000417e:	58 28       	cp.w	r8,2
80004180:	c0 f0       	breq	8000419e <process_selected_mode+0x13e>
80004182:	58 38       	cp.w	r8,3
80004184:	c0 80       	breq	80004194 <process_selected_mode+0x134>
80004186:	c0 d8       	rjmp	800041a0 <process_selected_mode+0x140>
		{
		case _UNLOCK_PASSWORD:
			store_passcode(3L);
80004188:	30 3c       	mov	r12,3
8000418a:	f0 1f 00 12 	mcall	800041d0 <process_selected_mode+0x170>
			calculate_salt();
8000418e:	f0 1f 00 17 	mcall	800041e8 <process_selected_mode+0x188>
			break;
80004192:	c0 78       	rjmp	800041a0 <process_selected_mode+0x140>
		case _HIDDEN_DATA_UNLOCK_PASSWORD:
			break;
		case _PANIC_MODE:
			break;
		case _DEVICE_ID_CONFIRM:
			save_sequence_to_mcu();
80004194:	f0 1f 00 16 	mcall	800041ec <process_selected_mode+0x18c>
80004198:	c0 48       	rjmp	800041a0 <process_selected_mode+0x140>
		case _UNLOCK_PASSWORD:
			store_passcode(3L);
			calculate_salt();
			break;
		case _HIDDEN_DATA_UNLOCK_PASSWORD:
			break;
8000419a:	d7 03       	nop
8000419c:	c0 28       	rjmp	800041a0 <process_selected_mode+0x140>
		case _PANIC_MODE:
			break;
8000419e:	d7 03       	nop
		case _DEVICE_ID_CONFIRM:
			save_sequence_to_mcu();
			break;
		}
		
		return_value = SUCCESSFUL;
800041a0:	30 18       	mov	r8,1
800041a2:	ef 68 ff ff 	st.b	r7[-1],r8
	}

	Read_button();
800041a6:	f0 1f 00 13 	mcall	800041f0 <process_selected_mode+0x190>
	
	return return_value;
800041aa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800041ae:	10 9c       	mov	r12,r8
800041b0:	2f fd       	sub	sp,-4
800041b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800041b6:	00 00       	add	r0,r0
800041b8:	00 00       	add	r0,r0
800041ba:	03 fa       	ld.ub	r10,r1[0x7]
800041bc:	00 00       	add	r0,r0
800041be:	02 48       	or	r8,r1
800041c0:	80 00       	ld.sh	r0,r0[0x0]
800041c2:	e7 d2 00 00 	ldins.h	r2:b,r3[0]
800041c6:	02 68       	and	r8,r1
800041c8:	00 00       	add	r0,r0
800041ca:	0b 64       	ld.uh	r4,--r5
800041cc:	00 00       	add	r0,r0
800041ce:	02 89       	andn	r9,r1
800041d0:	80 00       	ld.sh	r0,r0[0x0]
800041d2:	3c c0       	mov	r0,-52
800041d4:	00 00       	add	r0,r0
800041d6:	04 2d       	rsub	sp,r2
800041d8:	80 00       	ld.sh	r0,r0[0x0]
800041da:	41 f4       	lddsp	r4,sp[0x7c]
800041dc:	00 00       	add	r0,r0
800041de:	01 2e       	ld.uh	lr,r0++
800041e0:	80 00       	ld.sh	r0,r0[0x0]
800041e2:	30 38       	mov	r8,3
800041e4:	00 00       	add	r0,r0
800041e6:	0a 20       	rsub	r0,r5
800041e8:	80 00       	ld.sh	r0,r0[0x0]
800041ea:	2d b8       	sub	r8,-37
800041ec:	80 00       	ld.sh	r0,r0[0x0]
800041ee:	2f 5c       	sub	r12,-11
800041f0:	80 00       	ld.sh	r0,r0[0x0]
800041f2:	39 94       	mov	r4,-103

800041f4 <compare_entered_passwords>:

bool compare_entered_passwords(void)
{
800041f4:	eb cd 40 80 	pushm	r7,lr
800041f8:	1a 97       	mov	r7,sp
800041fa:	20 1d       	sub	sp,4
	uint8_t i = 0;
800041fc:	30 08       	mov	r8,0
800041fe:	ef 68 ff ff 	st.b	r7[-1],r8
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
80004202:	c1 48       	rjmp	8000422a <compare_entered_passwords+0x36>
	{
		if (temp_password[i] != temp_password1[i])
80004204:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004208:	48 f8       	lddpc	r8,80004244 <compare_entered_passwords+0x50>
8000420a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000420e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80004212:	48 e8       	lddpc	r8,80004248 <compare_entered_passwords+0x54>
80004214:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80004218:	10 39       	cp.w	r9,r8
8000421a:	c0 30       	breq	80004220 <compare_entered_passwords+0x2c>
		{
			return false;
8000421c:	30 08       	mov	r8,0
8000421e:	c0 e8       	rjmp	8000423a <compare_entered_passwords+0x46>
		}
		i++;
80004220:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004224:	2f f8       	sub	r8,-1
80004226:	ef 68 ff ff 	st.b	r7[-1],r8

bool compare_entered_passwords(void)
{
	uint8_t i = 0;
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
8000422a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000422e:	30 78       	mov	r8,7
80004230:	f0 09 18 00 	cp.b	r9,r8
80004234:	fe 98 ff e8 	brls	80004204 <compare_entered_passwords+0x10>
		{
			return false;
		}
		i++;
	}
	return true;
80004238:	30 18       	mov	r8,1
}
8000423a:	10 9c       	mov	r12,r8
8000423c:	2f fd       	sub	sp,-4
8000423e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004242:	00 00       	add	r0,r0
80004244:	00 00       	add	r0,r0
80004246:	02 48       	or	r8,r1
80004248:	00 00       	add	r0,r0
8000424a:	02 68       	and	r8,r1

8000424c <read_password>:

void read_password(void)
{
8000424c:	eb cd 40 80 	pushm	r7,lr
80004250:	1a 97       	mov	r7,sp
	Read_button();
80004252:	f0 1f 00 0c 	mcall	80004280 <read_password+0x34>
	if (normal_mode_password_entered == true)
80004256:	48 c8       	lddpc	r8,80004284 <read_password+0x38>
80004258:	11 88       	ld.ub	r8,r8[0x0]
8000425a:	5c 58       	castu.b	r8
8000425c:	c0 f0       	breq	8000427a <read_password+0x2e>
	{
		store_passcode(3L);
8000425e:	30 3c       	mov	r12,3
80004260:	f0 1f 00 0a 	mcall	80004288 <read_password+0x3c>
		if (compare_with_saved_password() == true)
80004264:	f0 1f 00 0a 	mcall	8000428c <read_password+0x40>
80004268:	18 98       	mov	r8,r12
8000426a:	58 08       	cp.w	r8,0
8000426c:	c0 70       	breq	8000427a <read_password+0x2e>
		{
			stSystemStatus.unlock_password_status = 1;
8000426e:	48 99       	lddpc	r9,80004290 <read_password+0x44>
80004270:	72 08       	ld.w	r8,r9[0x0]
80004272:	30 1a       	mov	r10,1
80004274:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80004278:	93 08       	st.w	r9[0x0],r8
		}
	}
}
8000427a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000427e:	00 00       	add	r0,r0
80004280:	80 00       	ld.sh	r0,r0[0x0]
80004282:	39 94       	mov	r4,-103
80004284:	00 00       	add	r0,r0
80004286:	03 f9       	ld.ub	r9,r1[0x7]
80004288:	80 00       	ld.sh	r0,r0[0x0]
8000428a:	3c c0       	mov	r0,-52
8000428c:	80 00       	ld.sh	r0,r0[0x0]
8000428e:	42 94       	lddsp	r4,sp[0xa4]
80004290:	00 00       	add	r0,r0
80004292:	0b 88       	ld.ub	r8,r5[0x0]

80004294 <compare_with_saved_password>:

bool compare_with_saved_password(void)
{
80004294:	eb cd 40 80 	pushm	r7,lr
80004298:	1a 97       	mov	r7,sp
8000429a:	20 ad       	sub	sp,40
	uint8_t i = 0; 
8000429c:	30 08       	mov	r8,0
8000429e:	ef 68 ff fb 	st.b	r7[-5],r8
	uint32_t temp_digest[8], *temp_stored_password;

	if (normal_mode_chosen == DEVICE_ID)
800042a2:	4a 78       	lddpc	r8,8000433c <compare_with_saved_password+0xa8>
800042a4:	11 88       	ld.ub	r8,r8[0x0]
800042a6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800042aa:	30 38       	mov	r8,3
800042ac:	f0 09 18 00 	cp.b	r9,r8
800042b0:	c0 c1       	brne	800042c8 <compare_with_saved_password+0x34>
	{
		hash_the_password(temp_password, temp_digest);
800042b2:	ee c8 00 28 	sub	r8,r7,40
800042b6:	10 9b       	mov	r11,r8
800042b8:	4a 2c       	lddpc	r12,80004340 <compare_with_saved_password+0xac>
800042ba:	f0 1f 00 23 	mcall	80004344 <compare_with_saved_password+0xb0>
		temp_stored_password = Stored_values_ram.device_id_confirm;
800042be:	4a 38       	lddpc	r8,80004348 <compare_with_saved_password+0xb4>
800042c0:	2a 08       	sub	r8,-96
800042c2:	ef 48 ff fc 	st.w	r7[-4],r8
800042c6:	c1 28       	rjmp	800042ea <compare_with_saved_password+0x56>
	}
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
800042c8:	49 d8       	lddpc	r8,8000433c <compare_with_saved_password+0xa8>
800042ca:	11 88       	ld.ub	r8,r8[0x0]
800042cc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800042d0:	30 48       	mov	r8,4
800042d2:	f0 09 18 00 	cp.b	r9,r8
800042d6:	c0 a1       	brne	800042ea <compare_with_saved_password+0x56>
	{
		encrypt_password(temp_password, temp_digest);
800042d8:	ee c8 00 28 	sub	r8,r7,40
800042dc:	10 9b       	mov	r11,r8
800042de:	49 9c       	lddpc	r12,80004340 <compare_with_saved_password+0xac>
800042e0:	f0 1f 00 1b 	mcall	8000434c <compare_with_saved_password+0xb8>
		temp_stored_password = (uint32_t *)Stored_values_ram.unlock_password;
800042e4:	49 98       	lddpc	r8,80004348 <compare_with_saved_password+0xb4>
800042e6:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	i = 0;
800042ea:	30 08       	mov	r8,0
800042ec:	ef 68 ff fb 	st.b	r7[-5],r8
	while (i < 8)
800042f0:	c1 98       	rjmp	80004322 <compare_with_saved_password+0x8e>
	{
		if (temp_stored_password[i] != temp_digest[i])
800042f2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800042f6:	a3 68       	lsl	r8,0x2
800042f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800042fc:	f2 08 00 08 	add	r8,r9,r8
80004300:	70 09       	ld.w	r9,r8[0x0]
80004302:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004306:	a3 68       	lsl	r8,0x2
80004308:	ee 08 00 08 	add	r8,r7,r8
8000430c:	f0 f8 ff d8 	ld.w	r8,r8[-40]
80004310:	10 39       	cp.w	r9,r8
80004312:	c0 30       	breq	80004318 <compare_with_saved_password+0x84>
		{
			return false;
80004314:	30 08       	mov	r8,0
80004316:	c0 e8       	rjmp	80004332 <compare_with_saved_password+0x9e>
		}
		i++;
80004318:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000431c:	2f f8       	sub	r8,-1
8000431e:	ef 68 ff fb 	st.b	r7[-5],r8
	{
		encrypt_password(temp_password, temp_digest);
		temp_stored_password = (uint32_t *)Stored_values_ram.unlock_password;
	}
	i = 0;
	while (i < 8)
80004322:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80004326:	30 78       	mov	r8,7
80004328:	f0 09 18 00 	cp.b	r9,r8
8000432c:	fe 98 ff e3 	brls	800042f2 <compare_with_saved_password+0x5e>
		{
			return false;
		}
		i++;
	}
	return true;
80004330:	30 18       	mov	r8,1
}
80004332:	10 9c       	mov	r12,r8
80004334:	2f 6d       	sub	sp,-40
80004336:	e3 cd 80 80 	ldm	sp++,r7,pc
8000433a:	00 00       	add	r0,r0
8000433c:	00 00       	add	r0,r0
8000433e:	03 fb       	ld.ub	r11,r1[0x7]
80004340:	00 00       	add	r0,r0
80004342:	02 48       	or	r8,r1
80004344:	80 00       	ld.sh	r0,r0[0x0]
80004346:	2f a8       	sub	r8,-6
80004348:	00 00       	add	r0,r0
8000434a:	0a 20       	rsub	r0,r5
8000434c:	80 00       	ld.sh	r0,r0[0x0]
8000434e:	2d 34       	sub	r4,-45

80004350 <update_leds>:
#define		SD1				0
#define		MODE			1
#define		SD2				2

void update_leds(void)
{
80004350:	eb cd 40 80 	pushm	r7,lr
80004354:	1a 97       	mov	r7,sp
	static uint8_t led_bit_mask = 0;
	static uint8_t current_bit_mask = 3;
	static uint8_t device_id_byte = 0;
	static uint8_t device_id_byte_index = 0;
	
	if (led_on_time && led_off_time)
80004356:	4d 78       	lddpc	r8,800044b0 <update_leds+0x160>
80004358:	11 88       	ld.ub	r8,r8[0x0]
8000435a:	58 08       	cp.w	r8,0
8000435c:	c1 10       	breq	8000437e <update_leds+0x2e>
8000435e:	4d 68       	lddpc	r8,800044b4 <update_leds+0x164>
80004360:	11 88       	ld.ub	r8,r8[0x0]
80004362:	58 08       	cp.w	r8,0
80004364:	c0 d0       	breq	8000437e <update_leds+0x2e>
	{
		LED_On(led_bit_mask);
80004366:	4d 58       	lddpc	r8,800044b8 <update_leds+0x168>
80004368:	11 88       	ld.ub	r8,r8[0x0]
8000436a:	10 9c       	mov	r12,r8
8000436c:	f0 1f 00 54 	mcall	800044bc <update_leds+0x16c>
		led_on_time--;
80004370:	4d 08       	lddpc	r8,800044b0 <update_leds+0x160>
80004372:	11 88       	ld.ub	r8,r8[0x0]
80004374:	20 18       	sub	r8,1
80004376:	5c 58       	castu.b	r8
80004378:	4c e9       	lddpc	r9,800044b0 <update_leds+0x160>
8000437a:	b2 88       	st.b	r9[0x0],r8
	static uint8_t led_bit_mask = 0;
	static uint8_t current_bit_mask = 3;
	static uint8_t device_id_byte = 0;
	static uint8_t device_id_byte_index = 0;
	
	if (led_on_time && led_off_time)
8000437c:	c9 88       	rjmp	800044ac <update_leds+0x15c>
	{
		LED_On(led_bit_mask);
		led_on_time--;
	}
	else if (led_on_time == 0 && led_off_time)
8000437e:	4c d8       	lddpc	r8,800044b0 <update_leds+0x160>
80004380:	11 88       	ld.ub	r8,r8[0x0]
80004382:	58 08       	cp.w	r8,0
80004384:	c1 11       	brne	800043a6 <update_leds+0x56>
80004386:	4c c8       	lddpc	r8,800044b4 <update_leds+0x164>
80004388:	11 88       	ld.ub	r8,r8[0x0]
8000438a:	58 08       	cp.w	r8,0
8000438c:	c0 d0       	breq	800043a6 <update_leds+0x56>
	{
		LED_Off(led_bit_mask);
8000438e:	4c b8       	lddpc	r8,800044b8 <update_leds+0x168>
80004390:	11 88       	ld.ub	r8,r8[0x0]
80004392:	10 9c       	mov	r12,r8
80004394:	f0 1f 00 4b 	mcall	800044c0 <update_leds+0x170>
		led_off_time--;
80004398:	4c 78       	lddpc	r8,800044b4 <update_leds+0x164>
8000439a:	11 88       	ld.ub	r8,r8[0x0]
8000439c:	20 18       	sub	r8,1
8000439e:	5c 58       	castu.b	r8
800043a0:	4c 59       	lddpc	r9,800044b4 <update_leds+0x164>
800043a2:	b2 88       	st.b	r9[0x0],r8
	if (led_on_time && led_off_time)
	{
		LED_On(led_bit_mask);
		led_on_time--;
	}
	else if (led_on_time == 0 && led_off_time)
800043a4:	c8 48       	rjmp	800044ac <update_leds+0x15c>
		LED_Off(led_bit_mask);
		led_off_time--;
	}
	else
	{
		led_bit_mask = 0;
800043a6:	4c 59       	lddpc	r9,800044b8 <update_leds+0x168>
800043a8:	30 08       	mov	r8,0
800043aa:	b2 88       	st.b	r9[0x0],r8
		switch (current_bit_mask)
800043ac:	4c 68       	lddpc	r8,800044c4 <update_leds+0x174>
800043ae:	11 88       	ld.ub	r8,r8[0x0]
800043b0:	58 18       	cp.w	r8,1
800043b2:	c2 10       	breq	800043f4 <update_leds+0xa4>
800043b4:	58 28       	cp.w	r8,2
800043b6:	c4 20       	breq	8000443a <update_leds+0xea>
800043b8:	58 08       	cp.w	r8,0
800043ba:	c6 31       	brne	80004480 <update_leds+0x130>
		{
			case SD1:
				if (device_id_byte & 0x03)
800043bc:	4c 38       	lddpc	r8,800044c8 <update_leds+0x178>
800043be:	11 88       	ld.ub	r8,r8[0x0]
800043c0:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800043c4:	c1 10       	breq	800043e6 <update_leds+0x96>
				{
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 0);
800043c6:	4c 18       	lddpc	r8,800044c8 <update_leds+0x178>
800043c8:	11 88       	ld.ub	r8,r8[0x0]
800043ca:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800043ce:	30 19       	mov	r9,1
800043d0:	f2 08 09 48 	lsl	r8,r9,r8
800043d4:	5c 58       	castu.b	r8
800043d6:	4b 99       	lddpc	r9,800044b8 <update_leds+0x168>
800043d8:	b2 88       	st.b	r9[0x0],r8
					led_on_time = 50;
800043da:	4b 69       	lddpc	r9,800044b0 <update_leds+0x160>
800043dc:	33 28       	mov	r8,50
800043de:	b2 88       	st.b	r9[0x0],r8
					led_off_time = 10;		
800043e0:	4b 59       	lddpc	r9,800044b4 <update_leds+0x164>
800043e2:	30 a8       	mov	r8,10
800043e4:	b2 88       	st.b	r9[0x0],r8
				}
				current_bit_mask++;			
800043e6:	4b 88       	lddpc	r8,800044c4 <update_leds+0x174>
800043e8:	11 88       	ld.ub	r8,r8[0x0]
800043ea:	2f f8       	sub	r8,-1
800043ec:	5c 58       	castu.b	r8
800043ee:	4b 69       	lddpc	r9,800044c4 <update_leds+0x174>
800043f0:	b2 88       	st.b	r9[0x0],r8
				break;
800043f2:	c5 d8       	rjmp	800044ac <update_leds+0x15c>
			case MODE:
				device_id_byte >>= 2;
800043f4:	4b 58       	lddpc	r8,800044c8 <update_leds+0x178>
800043f6:	11 88       	ld.ub	r8,r8[0x0]
800043f8:	a3 88       	lsr	r8,0x2
800043fa:	5c 58       	castu.b	r8
800043fc:	4b 39       	lddpc	r9,800044c8 <update_leds+0x178>
800043fe:	b2 88       	st.b	r9[0x0],r8
				if (device_id_byte & 0x03)
80004400:	4b 28       	lddpc	r8,800044c8 <update_leds+0x178>
80004402:	11 88       	ld.ub	r8,r8[0x0]
80004404:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004408:	c4 f0       	breq	800044a6 <update_leds+0x156>
				{
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 3);
8000440a:	4b 08       	lddpc	r8,800044c8 <update_leds+0x178>
8000440c:	11 88       	ld.ub	r8,r8[0x0]
8000440e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004412:	2f d8       	sub	r8,-3
80004414:	30 19       	mov	r9,1
80004416:	f2 08 09 48 	lsl	r8,r9,r8
8000441a:	5c 58       	castu.b	r8
8000441c:	4a 79       	lddpc	r9,800044b8 <update_leds+0x168>
8000441e:	b2 88       	st.b	r9[0x0],r8
					led_on_time = 50;
80004420:	4a 49       	lddpc	r9,800044b0 <update_leds+0x160>
80004422:	33 28       	mov	r8,50
80004424:	b2 88       	st.b	r9[0x0],r8
					led_off_time = 10;
80004426:	4a 49       	lddpc	r9,800044b4 <update_leds+0x164>
80004428:	30 a8       	mov	r8,10
8000442a:	b2 88       	st.b	r9[0x0],r8
					current_bit_mask++;
8000442c:	4a 68       	lddpc	r8,800044c4 <update_leds+0x174>
8000442e:	11 88       	ld.ub	r8,r8[0x0]
80004430:	2f f8       	sub	r8,-1
80004432:	5c 58       	castu.b	r8
80004434:	4a 49       	lddpc	r9,800044c4 <update_leds+0x174>
80004436:	b2 88       	st.b	r9[0x0],r8
				}				
				break;
80004438:	c3 a8       	rjmp	800044ac <update_leds+0x15c>
			case SD2:
				device_id_byte >>= 4;
8000443a:	4a 48       	lddpc	r8,800044c8 <update_leds+0x178>
8000443c:	11 88       	ld.ub	r8,r8[0x0]
8000443e:	a5 88       	lsr	r8,0x4
80004440:	5c 58       	castu.b	r8
80004442:	4a 29       	lddpc	r9,800044c8 <update_leds+0x178>
80004444:	b2 88       	st.b	r9[0x0],r8
				if (device_id_byte & 0x03)
80004446:	4a 18       	lddpc	r8,800044c8 <update_leds+0x178>
80004448:	11 88       	ld.ub	r8,r8[0x0]
8000444a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000444e:	c2 e0       	breq	800044aa <update_leds+0x15a>
				{
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 6);
80004450:	49 e8       	lddpc	r8,800044c8 <update_leds+0x178>
80004452:	11 88       	ld.ub	r8,r8[0x0]
80004454:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004458:	2f a8       	sub	r8,-6
8000445a:	30 19       	mov	r9,1
8000445c:	f2 08 09 48 	lsl	r8,r9,r8
80004460:	5c 58       	castu.b	r8
80004462:	49 69       	lddpc	r9,800044b8 <update_leds+0x168>
80004464:	b2 88       	st.b	r9[0x0],r8
					led_on_time = 50;
80004466:	49 39       	lddpc	r9,800044b0 <update_leds+0x160>
80004468:	33 28       	mov	r8,50
8000446a:	b2 88       	st.b	r9[0x0],r8
					led_off_time = 10;					
8000446c:	49 29       	lddpc	r9,800044b4 <update_leds+0x164>
8000446e:	30 a8       	mov	r8,10
80004470:	b2 88       	st.b	r9[0x0],r8
					current_bit_mask++;
80004472:	49 58       	lddpc	r8,800044c4 <update_leds+0x174>
80004474:	11 88       	ld.ub	r8,r8[0x0]
80004476:	2f f8       	sub	r8,-1
80004478:	5c 58       	castu.b	r8
8000447a:	49 39       	lddpc	r9,800044c4 <update_leds+0x174>
8000447c:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000447e:	c1 78       	rjmp	800044ac <update_leds+0x15c>
			default:
			{
				device_id_byte = Stored_values_ram.device_id_sequence[device_id_byte_index++];
80004480:	49 38       	lddpc	r8,800044cc <update_leds+0x17c>
80004482:	11 88       	ld.ub	r8,r8[0x0]
80004484:	10 99       	mov	r9,r8
80004486:	49 3a       	lddpc	r10,800044d0 <update_leds+0x180>
80004488:	f4 09 00 09 	add	r9,r10,r9
8000448c:	f3 39 00 80 	ld.ub	r9,r9[128]
80004490:	5c 59       	castu.b	r9
80004492:	48 ea       	lddpc	r10,800044c8 <update_leds+0x178>
80004494:	b4 89       	st.b	r10[0x0],r9
80004496:	2f f8       	sub	r8,-1
80004498:	5c 58       	castu.b	r8
8000449a:	48 d9       	lddpc	r9,800044cc <update_leds+0x17c>
8000449c:	b2 88       	st.b	r9[0x0],r8
				current_bit_mask = SD1;
8000449e:	48 a9       	lddpc	r9,800044c4 <update_leds+0x174>
800044a0:	30 08       	mov	r8,0
800044a2:	b2 88       	st.b	r9[0x0],r8
800044a4:	c0 48       	rjmp	800044ac <update_leds+0x15c>
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 3);
					led_on_time = 50;
					led_off_time = 10;
					current_bit_mask++;
				}				
				break;
800044a6:	d7 03       	nop
800044a8:	c0 28       	rjmp	800044ac <update_leds+0x15c>
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 6);
					led_on_time = 50;
					led_off_time = 10;					
					current_bit_mask++;
				}
				break;
800044aa:	d7 03       	nop
				device_id_byte = Stored_values_ram.device_id_sequence[device_id_byte_index++];
				current_bit_mask = SD1;
			}
		}
	}
}
800044ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800044b0:	00 00       	add	r0,r0
800044b2:	04 28       	rsub	r8,r2
800044b4:	00 00       	add	r0,r0
800044b6:	04 29       	rsub	r9,r2
800044b8:	00 00       	add	r0,r0
800044ba:	04 2a       	rsub	r10,r2
800044bc:	80 00       	ld.sh	r0,r0[0x0]
800044be:	49 cc       	lddpc	r12,8000452c <tc_init+0x58>
800044c0:	80 00       	ld.sh	r0,r0[0x0]
800044c2:	49 14       	lddpc	r4,80004504 <tc_init+0x30>
800044c4:	00 00       	add	r0,r0
800044c6:	01 2f       	ld.uh	pc,r0++
800044c8:	00 00       	add	r0,r0
800044ca:	04 2b       	rsub	r11,r2
800044cc:	00 00       	add	r0,r0
800044ce:	04 2c       	rsub	r12,r2
800044d0:	00 00       	add	r0,r0
800044d2:	0a 20       	rsub	r0,r5

800044d4 <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
static void tc_init(volatile avr32_tc_t *tc)
{
800044d4:	eb cd 40 80 	pushm	r7,lr
800044d8:	1a 97       	mov	r7,sp
800044da:	20 2d       	sub	sp,8
800044dc:	ef 4c ff f8 	st.w	r7[-8],r12
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
800044e0:	49 0b       	lddpc	r11,80004520 <tc_init+0x4c>
800044e2:	ee fc ff f8 	ld.w	r12,r7[-8]
800044e6:	f0 1f 00 10 	mcall	80004524 <tc_init+0x50>
	 * Set the compare triggers.
	 * We configure it to count every 10 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 10 ms, hence RC = (fPBA / 8) / 100
	 * to get an interrupt every 10 ms.
	 */
	temp_value = tc_write_rc(tc, EXAMPLE_TC_CHANNEL, 20625 /*(sysclk_get_pba_hz() / 8 / 100)*/);
800044ea:	e0 6a 50 91 	mov	r10,20625
800044ee:	30 0b       	mov	r11,0
800044f0:	ee fc ff f8 	ld.w	r12,r7[-8]
800044f4:	f0 1f 00 0d 	mcall	80004528 <tc_init+0x54>
800044f8:	18 98       	mov	r8,r12
800044fa:	5c 88       	casts.h	r8
800044fc:	5c 78       	castu.h	r8
800044fe:	ef 48 ff fc 	st.w	r7[-4],r8
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80004502:	48 ba       	lddpc	r10,8000452c <tc_init+0x58>
80004504:	30 0b       	mov	r11,0
80004506:	ee fc ff f8 	ld.w	r12,r7[-8]
8000450a:	f0 1f 00 0a 	mcall	80004530 <tc_init+0x5c>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
8000450e:	30 0b       	mov	r11,0
80004510:	ee fc ff f8 	ld.w	r12,r7[-8]
80004514:	f0 1f 00 08 	mcall	80004534 <tc_init+0x60>
}
80004518:	2f ed       	sub	sp,-8
8000451a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000451e:	00 00       	add	r0,r0
80004520:	80 00       	ld.sh	r0,r0[0x0]
80004522:	eb 40 80 00 	st.w	r5[-32768],r0
80004526:	95 cc       	st.w	r10[0x30],r12
80004528:	80 00       	ld.sh	r0,r0[0x0]
8000452a:	97 94       	st.w	r11[0x24],r4
8000452c:	80 00       	ld.sh	r0,r0[0x0]
8000452e:	eb 48 80 00 	st.w	r5[-32768],r8
80004532:	93 e4       	st.w	r9[0x38],r4
80004534:	80 00       	ld.sh	r0,r0[0x0]
80004536:	97 20       	st.w	r11[0x8],r0

80004538 <tc_task>:
 * - Register the TC interrupt
 * - Configure, enable the CPCS (RC compare match) interrupt,
 * - and start a TC channel in waveform mode
 */
void tc_task (void)
{
80004538:	eb cd 40 80 	pushm	r7,lr
8000453c:	1a 97       	mov	r7,sp
8000453e:	20 1d       	sub	sp,4
	volatile avr32_tc_t *tc = EXAMPLE_TC;
80004540:	fe 78 38 00 	mov	r8,-51200
80004544:	ef 48 ff fc 	st.w	r7[-4],r8
	 * peripheral clocks, except for the peripheral clocks explicitly
	 * enabled in conf_clock.h.
	 */
	//sysclk_init();
	// Enable the clock to the selected example Timer/counter peripheral module.
	sysclk_enable_peripheral_clock(EXAMPLE_TC);
80004548:	fe 7c 38 00 	mov	r12,-51200
8000454c:	f0 1f 00 0c 	mcall	8000457c <tc_task+0x44>
	// Disable the interrupts
	cpu_irq_disable();
80004550:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	//INTC_init_interrupts();
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80004552:	30 0a       	mov	r10,0
80004554:	e0 6b 01 c0 	mov	r11,448
80004558:	48 ac       	lddpc	r12,80004580 <tc_task+0x48>
8000455a:	f0 1f 00 0b 	mcall	80004584 <tc_task+0x4c>
	// Enable the interrupts
	cpu_irq_enable();
8000455e:	d5 03       	csrf	0x10
	// Initialize the timer module
	tc_init(tc);
80004560:	ee fc ff fc 	ld.w	r12,r7[-4]
80004564:	f0 1f 00 09 	mcall	80004588 <tc_task+0x50>
	// Initialize push buttons
	push_buttons_init();
80004568:	f0 1f 00 09 	mcall	8000458c <tc_task+0x54>

    calculate_hash((uint32_t *)CipherKey256, 8, CipherKey256_hash);
8000456c:	48 9a       	lddpc	r10,80004590 <tc_task+0x58>
8000456e:	30 8b       	mov	r11,8
80004570:	48 9c       	lddpc	r12,80004594 <tc_task+0x5c>
80004572:	f0 1f 00 0a 	mcall	80004598 <tc_task+0x60>
			 //*/
			 //// Reset the timer update flag to wait till next timer interrupt
			//update_timer = false;
		//}
	//}
}
80004576:	2f fd       	sub	sp,-4
80004578:	e3 cd 80 80 	ldm	sp++,r7,pc
8000457c:	80 00       	ld.sh	r0,r0[0x0]
8000457e:	35 a8       	mov	r8,90
80004580:	80 00       	ld.sh	r0,r0[0x0]
80004582:	37 bc       	mov	r12,123
80004584:	80 00       	ld.sh	r0,r0[0x0]
80004586:	8e a4       	ld.uh	r4,r7[0x4]
80004588:	80 00       	ld.sh	r0,r0[0x0]
8000458a:	44 d4       	lddsp	r4,sp[0x134]
8000458c:	80 00       	ld.sh	r0,r0[0x0]
8000458e:	3c 88       	mov	r8,-56
80004590:	00 00       	add	r0,r0
80004592:	04 00       	add	r0,r2
80004594:	80 00       	ld.sh	r0,r0[0x0]
80004596:	ea 00       	*unknown*
80004598:	80 00       	ld.sh	r0,r0[0x0]
8000459a:	30 a4       	mov	r4,10

8000459c <init_hmatrix>:


/*! \brief Initializes the HSB bus matrix.
 */
static void init_hmatrix(void)
{
8000459c:	eb cd 40 80 	pushm	r7,lr
800045a0:	1a 97       	mov	r7,sp
800045a2:	20 1d       	sub	sp,4
  // Set flashc master type to last default to save one cycle for
  // each branch.
  avr32_hmatrix_scfg_t scfg;

  scfg = AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH];
800045a4:	fe 68 10 00 	mov	r8,-126976
800045a8:	71 08       	ld.w	r8,r8[0x40]
800045aa:	ef 48 ff fc 	st.w	r7[-4],r8
  scfg.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
800045ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045b2:	30 19       	mov	r9,1
800045b4:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
800045b8:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH] = scfg;
800045bc:	fe 68 10 00 	mov	r8,-126976
800045c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800045c4:	f1 49 00 40 	st.w	r8[64],r9
}
800045c8:	2f fd       	sub	sp,-4
800045ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800045ce:	d7 03       	nop

800045d0 <aes_task>:
 * 8N1.
 * Then it sets up the interrupt handler and waits for a USART interrupt to
 * trigger.
 */
void aes_task (void)
{
800045d0:	eb cd 40 80 	pushm	r7,lr
800045d4:	1a 97       	mov	r7,sp
  init_hmatrix();
800045d6:	f0 1f 00 03 	mcall	800045e0 <aes_task+0x10>
}
800045da:	e3 cd 80 80 	ldm	sp++,r7,pc
800045de:	00 00       	add	r0,r0
800045e0:	80 00       	ld.sh	r0,r0[0x0]
800045e2:	45 9c       	lddsp	r12,sp[0x164]

800045e4 <aes_init>:
	0x5A43D875,	// AES-CTR IV (BYTE2)
	0x00000001	// COUNTER
};

void aes_init (unsigned char Processing_Mode)
{
800045e4:	eb cd 40 80 	pushm	r7,lr
800045e8:	1a 97       	mov	r7,sp
800045ea:	20 3d       	sub	sp,12
800045ec:	18 98       	mov	r8,r12
800045ee:	ef 68 ff f4 	st.b	r7[-12],r8
	  aes_config_t    AesConf;        // AES config structure
	  // Configure the AES.
	  AesConf.ProcessingMode = Processing_Mode;   // Cipher
800045f2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800045f6:	ef 68 ff f8 	st.b	r7[-8],r8
	  AesConf.ProcessingDelay = 0;                // No delay: best performance
800045fa:	30 08       	mov	r8,0
800045fc:	ef 68 ff f9 	st.b	r7[-7],r8
	  AesConf.StartMode = AES_START_MODE_AUTO;    // Manual mode
80004600:	30 18       	mov	r8,1
80004602:	ef 68 ff fa 	st.b	r7[-6],r8
	  AesConf.KeySize = AES_KEY_SIZE_256;         // 256bit cryptographic key
80004606:	30 28       	mov	r8,2
80004608:	ef 68 ff fb 	st.b	r7[-5],r8
	  AesConf.OpMode = AES_CBC_MODE;              // CTR cipher mode
8000460c:	30 18       	mov	r8,1
8000460e:	ef 68 ff fc 	st.b	r7[-4],r8
	  AesConf.LodMode = 0;                        // LODMODE == 0 : the DATRDY flag
80004612:	30 08       	mov	r8,0
80004614:	ef 68 ff fd 	st.b	r7[-3],r8
	  // is cleared when one of the output data registers is read (because we're in
	  // manual mode).
	  AesConf.CFBSize = 0;                        // Don't-care because we're using the CTR mode.
80004618:	30 08       	mov	r8,0
8000461a:	ef 68 ff fe 	st.b	r7[-2],r8
	  AesConf.CounterMeasureMask = 0;             // Disable all counter measures.
8000461e:	30 08       	mov	r8,0
80004620:	ef 68 ff ff 	st.b	r7[-1],r8
	  aes_configure(&AVR32_AES, &AesConf);
80004624:	ee c8 00 08 	sub	r8,r7,8
80004628:	10 9b       	mov	r11,r8
8000462a:	fc 7c 00 00 	mov	r12,-196608
8000462e:	f0 1f 00 06 	mcall	80004644 <aes_init+0x60>
	  aes_set_key(&AVR32_AES, CipherKey256);
80004632:	48 6b       	lddpc	r11,80004648 <aes_init+0x64>
80004634:	fc 7c 00 00 	mov	r12,-196608
80004638:	f0 1f 00 05 	mcall	8000464c <aes_init+0x68>

	  //ccountt0 = Get_system_register(AVR32_COUNT);
	  // Start encryption.
	  //aes_start(&AVR32_AES);

}
8000463c:	2f dd       	sub	sp,-12
8000463e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004642:	00 00       	add	r0,r0
80004644:	80 00       	ld.sh	r0,r0[0x0]
80004646:	7e 60       	ld.w	r0,pc[0x18]
80004648:	80 00       	ld.sh	r0,r0[0x0]
8000464a:	ea 00       	*unknown*
8000464c:	80 00       	ld.sh	r0,r0[0x0]
8000464e:	7e f0       	ld.w	r0,pc[0x3c]

80004650 <apply_aes_encryption>:
uint32_t aes_out_data[128] = {0};

void apply_aes_encryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint32_t *aes_key, uint16_t len, uint32_t sector_id)
{
80004650:	eb cd 40 80 	pushm	r7,lr
80004654:	1a 97       	mov	r7,sp
80004656:	20 7d       	sub	sp,28
80004658:	ef 4c ff f4 	st.w	r7[-12],r12
8000465c:	ef 4b ff f0 	st.w	r7[-16],r11
80004660:	ef 4a ff ec 	st.w	r7[-20],r10
80004664:	ef 48 ff e4 	st.w	r7[-28],r8
80004668:	12 98       	mov	r8,r9
8000466a:	ef 58 ff e8 	st.h	r7[-24],r8
	uint8_t i, loop_counter;
	uint32_t temp;
	
	if (aes_key == 0)
8000466e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004672:	58 08       	cp.w	r8,0
80004674:	c0 41       	brne	8000467c <apply_aes_encryption+0x2c>
	{
		aes_key = (uint32_t *)DK_aes_key;
80004676:	4b a8       	lddpc	r8,8000475c <apply_aes_encryption+0x10c>
80004678:	ef 48 ff ec 	st.w	r7[-20],r8
	}
	temp = aes_key[0];
8000467c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004680:	70 08       	ld.w	r8,r8[0x0]
80004682:	ef 48 ff fc 	st.w	r7[-4],r8

	aes_key[0] = aes_key[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
80004686:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000468a:	70 09       	ld.w	r9,r8[0x0]
8000468c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004690:	10 59       	eor	r9,r8
80004692:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004696:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
							 
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);	
	aes_set_initvector(&AVR32_AES, (unsigned long int *)aes_key);	
80004698:	ee fb ff ec 	ld.w	r11,r7[-20]
8000469c:	fc 7c 00 00 	mov	r12,-196608
800046a0:	f0 1f 00 30 	mcall	80004760 <apply_aes_encryption+0x110>
	
	aes_key[0] = temp;
800046a4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800046a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800046ac:	91 09       	st.w	r8[0x0],r9
	
	loop_counter = len >> 2;
800046ae:	ef 18 ff e8 	ld.uh	r8,r7[-24]
800046b2:	a3 88       	lsr	r8,0x2
800046b4:	5c 88       	casts.h	r8
800046b6:	ef 68 ff fb 	st.b	r7[-5],r8
		
	for (i = 0; i < loop_counter; i+=4)
800046ba:	30 08       	mov	r8,0
800046bc:	ef 68 ff fa 	st.b	r7[-6],r8
800046c0:	c2 78       	rjmp	8000470e <apply_aes_encryption+0xbe>
	{
		aes_init(AES_PMODE_CIPHER);
800046c2:	30 1c       	mov	r12,1
800046c4:	f0 1f 00 28 	mcall	80004764 <apply_aes_encryption+0x114>
			
		aes_write_inputdata(aes, &aes_in_data_t[i]);
800046c8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800046cc:	a3 68       	lsl	r8,0x2
800046ce:	ee f9 ff f0 	ld.w	r9,r7[-16]
800046d2:	f2 08 00 08 	add	r8,r9,r8
800046d6:	10 9b       	mov	r11,r8
800046d8:	ee fc ff f4 	ld.w	r12,r7[-12]
800046dc:	f0 1f 00 23 	mcall	80004768 <apply_aes_encryption+0x118>

		while (!(aes->isr & 0x00000001));
800046e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046e4:	70 78       	ld.w	r8,r8[0x1c]
800046e6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800046ea:	cf b0       	breq	800046e0 <apply_aes_encryption+0x90>

		aes_read_outputdata(aes, &aes_out_data[i]);
800046ec:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800046f0:	f0 09 15 02 	lsl	r9,r8,0x2
800046f4:	49 e8       	lddpc	r8,8000476c <apply_aes_encryption+0x11c>
800046f6:	f2 08 00 08 	add	r8,r9,r8
800046fa:	10 9b       	mov	r11,r8
800046fc:	ee fc ff f4 	ld.w	r12,r7[-12]
80004700:	f0 1f 00 1c 	mcall	80004770 <apply_aes_encryption+0x120>
	
	aes_key[0] = temp;
	
	loop_counter = len >> 2;
		
	for (i = 0; i < loop_counter; i+=4)
80004704:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004708:	2f c8       	sub	r8,-4
8000470a:	ef 68 ff fa 	st.b	r7[-6],r8
8000470e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80004712:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004716:	f0 09 18 00 	cp.b	r9,r8
8000471a:	cd 43       	brcs	800046c2 <apply_aes_encryption+0x72>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
8000471c:	30 08       	mov	r8,0
8000471e:	ef 68 ff fa 	st.b	r7[-6],r8
80004722:	c1 38       	rjmp	80004748 <apply_aes_encryption+0xf8>
	{
		aes_in_data_t[i] = aes_out_data[i];
80004724:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004728:	a3 68       	lsl	r8,0x2
8000472a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000472e:	f2 08 00 08 	add	r8,r9,r8
80004732:	ef 3a ff fa 	ld.ub	r10,r7[-6]
80004736:	48 e9       	lddpc	r9,8000476c <apply_aes_encryption+0x11c>
80004738:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000473c:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
8000473e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004742:	2f f8       	sub	r8,-1
80004744:	ef 68 ff fa 	st.b	r7[-6],r8
80004748:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000474c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004750:	f0 09 18 00 	cp.b	r9,r8
80004754:	ce 83       	brcs	80004724 <apply_aes_encryption+0xd4>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
80004756:	2f 9d       	sub	sp,-28
80004758:	e3 cd 80 80 	ldm	sp++,r7,pc
8000475c:	00 00       	add	r0,r0
8000475e:	02 94       	mov	r4,r1
80004760:	80 00       	ld.sh	r0,r0[0x0]
80004762:	7f 7e       	ld.w	lr,pc[0x5c]
80004764:	80 00       	ld.sh	r0,r0[0x0]
80004766:	45 e4       	lddsp	r4,sp[0x178]
80004768:	80 00       	ld.sh	r0,r0[0x0]
8000476a:	7f da       	ld.w	r10,pc[0x74]
8000476c:	00 00       	add	r0,r0
8000476e:	04 34       	cp.w	r4,r2
80004770:	80 00       	ld.sh	r0,r0[0x0]
80004772:	80 72       	ld.sh	r2,r0[0xe]

80004774 <apply_aes_decryption>:


void apply_aes_decryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint32_t *aes_key, uint16_t len, uint32_t sector_id)
{
80004774:	eb cd 40 80 	pushm	r7,lr
80004778:	1a 97       	mov	r7,sp
8000477a:	20 7d       	sub	sp,28
8000477c:	ef 4c ff f4 	st.w	r7[-12],r12
80004780:	ef 4b ff f0 	st.w	r7[-16],r11
80004784:	ef 4a ff ec 	st.w	r7[-20],r10
80004788:	ef 48 ff e4 	st.w	r7[-28],r8
8000478c:	12 98       	mov	r8,r9
8000478e:	ef 58 ff e8 	st.h	r7[-24],r8
	
	uint8_t i, loop_counter;
	uint32_t temp;

	if (aes_key == 0)
80004792:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004796:	58 08       	cp.w	r8,0
80004798:	c0 41       	brne	800047a0 <apply_aes_decryption+0x2c>
	{
		aes_key = (uint32_t *)DK_aes_key;
8000479a:	4b a8       	lddpc	r8,80004880 <apply_aes_decryption+0x10c>
8000479c:	ef 48 ff ec 	st.w	r7[-20],r8
	}
	
	temp = aes_key[0];
800047a0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047a4:	70 08       	ld.w	r8,r8[0x0]
800047a6:	ef 48 ff fc 	st.w	r7[-4],r8

	aes_key[0] = aes_key[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
800047aa:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047ae:	70 09       	ld.w	r9,r8[0x0]
800047b0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800047b4:	10 59       	eor	r9,r8
800047b6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047ba:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
	
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);
	aes_set_initvector(&AVR32_AES, (unsigned long int *)aes_key);
800047bc:	ee fb ff ec 	ld.w	r11,r7[-20]
800047c0:	fc 7c 00 00 	mov	r12,-196608
800047c4:	f0 1f 00 30 	mcall	80004884 <apply_aes_decryption+0x110>
	
	aes_key[0] = temp;
800047c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800047d0:	91 09       	st.w	r8[0x0],r9

	loop_counter = len >> 2;
800047d2:	ef 18 ff e8 	ld.uh	r8,r7[-24]
800047d6:	a3 88       	lsr	r8,0x2
800047d8:	5c 88       	casts.h	r8
800047da:	ef 68 ff fb 	st.b	r7[-5],r8

	for (i = 0; i < loop_counter; i+=4)
800047de:	30 08       	mov	r8,0
800047e0:	ef 68 ff fa 	st.b	r7[-6],r8
800047e4:	c2 78       	rjmp	80004832 <apply_aes_decryption+0xbe>
	{
		aes_init(AES_PMODE_DECIPHER);
800047e6:	30 0c       	mov	r12,0
800047e8:	f0 1f 00 28 	mcall	80004888 <apply_aes_decryption+0x114>

		aes_write_inputdata(aes, &aes_in_data_t[i]);
800047ec:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800047f0:	a3 68       	lsl	r8,0x2
800047f2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800047f6:	f2 08 00 08 	add	r8,r9,r8
800047fa:	10 9b       	mov	r11,r8
800047fc:	ee fc ff f4 	ld.w	r12,r7[-12]
80004800:	f0 1f 00 23 	mcall	8000488c <apply_aes_decryption+0x118>

		while (!(aes->isr & 0x00000001));
80004804:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004808:	70 78       	ld.w	r8,r8[0x1c]
8000480a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000480e:	cf b0       	breq	80004804 <apply_aes_decryption+0x90>

		aes_read_outputdata(aes, &aes_out_data[i]);
80004810:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004814:	f0 09 15 02 	lsl	r9,r8,0x2
80004818:	49 e8       	lddpc	r8,80004890 <apply_aes_decryption+0x11c>
8000481a:	f2 08 00 08 	add	r8,r9,r8
8000481e:	10 9b       	mov	r11,r8
80004820:	ee fc ff f4 	ld.w	r12,r7[-12]
80004824:	f0 1f 00 1c 	mcall	80004894 <apply_aes_decryption+0x120>
	
	aes_key[0] = temp;

	loop_counter = len >> 2;

	for (i = 0; i < loop_counter; i+=4)
80004828:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000482c:	2f c8       	sub	r8,-4
8000482e:	ef 68 ff fa 	st.b	r7[-6],r8
80004832:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80004836:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000483a:	f0 09 18 00 	cp.b	r9,r8
8000483e:	cd 43       	brcs	800047e6 <apply_aes_decryption+0x72>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < loop_counter; i++)
80004840:	30 08       	mov	r8,0
80004842:	ef 68 ff fa 	st.b	r7[-6],r8
80004846:	c1 38       	rjmp	8000486c <apply_aes_decryption+0xf8>
	{
		aes_in_data_t[i] = aes_out_data[i];
80004848:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000484c:	a3 68       	lsl	r8,0x2
8000484e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004852:	f2 08 00 08 	add	r8,r9,r8
80004856:	ef 3a ff fa 	ld.ub	r10,r7[-6]
8000485a:	48 e9       	lddpc	r9,80004890 <apply_aes_decryption+0x11c>
8000485c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80004860:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < loop_counter; i++)
80004862:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004866:	2f f8       	sub	r8,-1
80004868:	ef 68 ff fa 	st.b	r7[-6],r8
8000486c:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80004870:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004874:	f0 09 18 00 	cp.b	r9,r8
80004878:	ce 83       	brcs	80004848 <apply_aes_decryption+0xd4>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
8000487a:	2f 9d       	sub	sp,-28
8000487c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004880:	00 00       	add	r0,r0
80004882:	02 94       	mov	r4,r1
80004884:	80 00       	ld.sh	r0,r0[0x0]
80004886:	7f 7e       	ld.w	lr,pc[0x5c]
80004888:	80 00       	ld.sh	r0,r0[0x0]
8000488a:	45 e4       	lddsp	r4,sp[0x178]
8000488c:	80 00       	ld.sh	r0,r0[0x0]
8000488e:	7f da       	ld.w	r10,pc[0x74]
80004890:	00 00       	add	r0,r0
80004892:	04 34       	cp.w	r4,r2
80004894:	80 00       	ld.sh	r0,r0[0x0]
80004896:	80 72       	ld.sh	r2,r0[0xe]

80004898 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
# define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80004898:	eb cd 40 80 	pushm	r7,lr
8000489c:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000489e:	30 3b       	mov	r11,3
800048a0:	34 3c       	mov	r12,67
800048a2:	f0 1f 00 17 	mcall	800048fc <board_init+0x64>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800048a6:	30 3b       	mov	r11,3
800048a8:	36 5c       	mov	r12,101
800048aa:	f0 1f 00 15 	mcall	800048fc <board_init+0x64>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800048ae:	30 3b       	mov	r11,3
800048b0:	36 9c       	mov	r12,105
800048b2:	f0 1f 00 13 	mcall	800048fc <board_init+0x64>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800048b6:	30 3b       	mov	r11,3
800048b8:	36 6c       	mov	r12,102
800048ba:	f0 1f 00 11 	mcall	800048fc <board_init+0x64>

	gpio_configure_pin(GPIO_PUSH_BUTTON_SW2,GPIO_DIR_INPUT);
800048be:	30 0b       	mov	r11,0
800048c0:	32 ac       	mov	r12,42
800048c2:	f0 1f 00 0f 	mcall	800048fc <board_init+0x64>
# define AT45DBX_ENABLE_NPCS_PIN(NPCS, unused) \
	{AT45DBX_SPI_NPCS##NPCS##_PIN, AT45DBX_SPI_NPCS##NPCS##_FUNCTION},
	MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
# undef AT45DBX_ENABLE_NPCS_PIN
	};
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
800048c6:	30 4b       	mov	r11,4
800048c8:	48 ec       	lddpc	r12,80004900 <board_init+0x68>
800048ca:	f0 1f 00 0f 	mcall	80004904 <board_init+0x6c>
		{SD_SLOT_4BITS_DATA1_PIN, SD_SLOT_4BITS_DATA1_FUNCTION},
		{SD_SLOT_4BITS_DATA2_PIN, SD_SLOT_4BITS_DATA2_FUNCTION},
		{SD_SLOT_4BITS_DATA3_PIN, SD_SLOT_4BITS_DATA3_FUNCTION}
	};
	// Configure Slot 0 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP,
800048ce:	30 ab       	mov	r11,10
800048d0:	48 ec       	lddpc	r12,80004908 <board_init+0x70>
800048d2:	f0 1f 00 0d 	mcall	80004904 <board_init+0x6c>
			sizeof(SD_MMC_MCI_GPIO_MAP) / sizeof(SD_MMC_MCI_GPIO_MAP[0]));
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_CARD_DETECT);
800048d6:	32 bc       	mov	r12,43
800048d8:	f0 1f 00 0d 	mcall	8000490c <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_WRITE_PROTECT);
800048dc:	36 cc       	mov	r12,108
800048de:	f0 1f 00 0c 	mcall	8000490c <board_init+0x74>

	// Configure Slot 1 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP_1,
800048e2:	30 6b       	mov	r11,6
800048e4:	48 bc       	lddpc	r12,80004910 <board_init+0x78>
800048e6:	f0 1f 00 08 	mcall	80004904 <board_init+0x6c>
	sizeof(SD_MMC_MCI_GPIO_MAP_1) / sizeof(SD_MMC_MCI_GPIO_MAP_1[0]));
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_CARD_DETECT);
800048ea:	32 8c       	mov	r12,40
800048ec:	f0 1f 00 08 	mcall	8000490c <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_WRITE_PROTECT);
800048f0:	32 6c       	mov	r12,38
800048f2:	f0 1f 00 07 	mcall	8000490c <board_init+0x74>
		{AVR32_USART3_TXD_0_3_PIN, AVR32_USART3_TXD_0_3_FUNCTION },
	};
	gpio_enable_module(COMPORT3_GPIO_MAP,
			sizeof(COMPORT3_GPIO_MAP) / sizeof(COMPORT3_GPIO_MAP[0]));
#endif
}
800048f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800048fa:	00 00       	add	r0,r0
800048fc:	80 00       	ld.sh	r0,r0[0x0]
800048fe:	8a 5e       	ld.sh	lr,r5[0xa]
80004900:	80 00       	ld.sh	r0,r0[0x0]
80004902:	eb 4c 80 00 	st.w	r5[-32768],r12
80004906:	88 50       	ld.sh	r0,r4[0xa]
80004908:	80 00       	ld.sh	r0,r0[0x0]
8000490a:	eb 54 80 00 	st.h	r5[-32768],r4
8000490e:	8a 24       	ld.sh	r4,r5[0x4]
80004910:	80 00       	ld.sh	r0,r0[0x0]
80004912:	eb 68 eb cd 	st.b	r5[-5171],r8

80004914 <LED_Off>:
  return Tst_bits(LED_State, leds);
}


void LED_Off(U32 leds)
{
80004914:	eb cd 40 80 	pushm	r7,lr
80004918:	1a 97       	mov	r7,sp
8000491a:	20 4d       	sub	sp,16
8000491c:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80004920:	4a 98       	lddpc	r8,800049c4 <LED_Off+0xb0>
80004922:	21 08       	sub	r8,16
80004924:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80004928:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000492c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004930:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80004934:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004938:	f0 09 11 ff 	rsub	r9,r8,-1
8000493c:	4a 38       	lddpc	r8,800049c8 <LED_Off+0xb4>
8000493e:	70 08       	ld.w	r8,r8[0x0]
80004940:	10 69       	and	r9,r8
80004942:	4a 28       	lddpc	r8,800049c8 <LED_Off+0xb4>
80004944:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80004946:	c3 78       	rjmp	800049b4 <LED_Off+0xa0>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80004948:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000494c:	5c 98       	brev	r8
8000494e:	f0 08 12 00 	clz	r8,r8
80004952:	5c 58       	castu.b	r8
80004954:	2f f8       	sub	r8,-1
80004956:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8000495a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000495e:	a5 68       	lsl	r8,0x4
80004960:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004964:	f2 08 00 08 	add	r8,r9,r8
80004968:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000496c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004970:	70 08       	ld.w	r8,r8[0x0]
80004972:	a9 68       	lsl	r8,0x8
80004974:	e0 28 f0 00 	sub	r8,61440
80004978:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
8000497c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004980:	70 19       	ld.w	r9,r8[0x4]
80004982:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004986:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000498a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000498e:	70 19       	ld.w	r9,r8[0x4]
80004990:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004994:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80004998:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000499c:	70 19       	ld.w	r9,r8[0x4]
8000499e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049a2:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
800049a4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800049a8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800049ac:	f2 08 0a 48 	lsr	r8,r9,r8
800049b0:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800049b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800049b8:	58 08       	cp.w	r8,0
800049ba:	cc 71       	brne	80004948 <LED_Off+0x34>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800049bc:	2f cd       	sub	sp,-16
800049be:	e3 cd 80 80 	ldm	sp++,r7,pc
800049c2:	00 00       	add	r0,r0
800049c4:	80 00       	ld.sh	r0,r0[0x0]
800049c6:	eb 74 00 00 	stcond	r5[0],r4
800049ca:	01 30       	ld.ub	r0,r0++

800049cc <LED_On>:


void LED_On(U32 leds)
{
800049cc:	eb cd 40 80 	pushm	r7,lr
800049d0:	1a 97       	mov	r7,sp
800049d2:	20 4d       	sub	sp,16
800049d4:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
800049d8:	4a 88       	lddpc	r8,80004a78 <LED_On+0xac>
800049da:	21 08       	sub	r8,16
800049dc:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800049e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800049e4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800049e8:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
800049ec:	4a 48       	lddpc	r8,80004a7c <LED_On+0xb0>
800049ee:	70 09       	ld.w	r9,r8[0x0]
800049f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800049f4:	10 49       	or	r9,r8
800049f6:	4a 28       	lddpc	r8,80004a7c <LED_On+0xb0>
800049f8:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800049fa:	c3 78       	rjmp	80004a68 <LED_On+0x9c>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
800049fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004a00:	5c 98       	brev	r8
80004a02:	f0 08 12 00 	clz	r8,r8
80004a06:	5c 58       	castu.b	r8
80004a08:	2f f8       	sub	r8,-1
80004a0a:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80004a0e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004a12:	a5 68       	lsl	r8,0x4
80004a14:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004a18:	f2 08 00 08 	add	r8,r9,r8
80004a1c:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80004a20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a24:	70 08       	ld.w	r8,r8[0x0]
80004a26:	a9 68       	lsl	r8,0x8
80004a28:	e0 28 f0 00 	sub	r8,61440
80004a2c:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80004a30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a34:	70 19       	ld.w	r9,r8[0x4]
80004a36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a3a:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80004a3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a42:	70 19       	ld.w	r9,r8[0x4]
80004a44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a48:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80004a4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a50:	70 19       	ld.w	r9,r8[0x4]
80004a52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a56:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80004a58:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004a5c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004a60:	f2 08 0a 48 	lsr	r8,r9,r8
80004a64:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80004a68:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004a6c:	58 08       	cp.w	r8,0
80004a6e:	cc 71       	brne	800049fc <LED_On+0x30>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
80004a70:	2f cd       	sub	sp,-16
80004a72:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a76:	00 00       	add	r0,r0
80004a78:	80 00       	ld.sh	r0,r0[0x0]
80004a7a:	eb 74 00 00 	stcond	r5[0],r4
80004a7e:	01 30       	ld.ub	r0,r0++

80004a80 <et024006_Init>:
 *  @param cpu_hz CPU speed in Hz. This is needed for power up timings.
 *  @param hsb_hz HSB bus speed in Hz. This parameter is needed to set up the SMC.
 *  If SPI mode is used then this parameter is ignored.
 */
void et024006_Init( unsigned long cpu_hz, unsigned long hsb_hz )
{
80004a80:	eb cd 40 80 	pushm	r7,lr
80004a84:	1a 97       	mov	r7,sp
80004a86:	20 2d       	sub	sp,8
80004a88:	ef 4c ff fc 	st.w	r7[-4],r12
80004a8c:	ef 4b ff f8 	st.w	r7[-8],r11
  tft_data.cpu_hz = cpu_hz;
80004a90:	49 08       	lddpc	r8,80004ad0 <et024006_Init+0x50>
80004a92:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004a96:	91 09       	st.w	r8[0x0],r9
  tft_data.hsb_hz = hsb_hz;
80004a98:	48 e8       	lddpc	r8,80004ad0 <et024006_Init+0x50>
80004a9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004a9e:	91 19       	st.w	r8[0x4],r9

#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_SPI)
  et024006_InitSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
80004aa0:	48 c8       	lddpc	r8,80004ad0 <et024006_Init+0x50>
80004aa2:	70 18       	ld.w	r8,r8[0x4]
80004aa4:	10 9c       	mov	r12,r8
80004aa6:	f0 1f 00 0c 	mcall	80004ad4 <et024006_Init+0x54>
#endif
  et024006_SetupInterface();
80004aaa:	f0 1f 00 0c 	mcall	80004ad8 <et024006_Init+0x58>
  et024006_ResetDisplay();
80004aae:	f0 1f 00 0c 	mcall	80004adc <et024006_Init+0x5c>
  et024006_AdjustGamma();
80004ab2:	f0 1f 00 0c 	mcall	80004ae0 <et024006_Init+0x60>
  et024006_GeneralSettings();
80004ab6:	f0 1f 00 0c 	mcall	80004ae4 <et024006_Init+0x64>
  et024006_InterfaceSettings();
80004aba:	f0 1f 00 0c 	mcall	80004ae8 <et024006_Init+0x68>
  et024006_PowerSettings();
80004abe:	f0 1f 00 0c 	mcall	80004aec <et024006_Init+0x6c>
  et024006_PowerUp();
80004ac2:	f0 1f 00 0c 	mcall	80004af0 <et024006_Init+0x70>
  et024006_PowerOn();
80004ac6:	f0 1f 00 0c 	mcall	80004af4 <et024006_Init+0x74>
}
80004aca:	2f ed       	sub	sp,-8
80004acc:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ad0:	00 00       	add	r0,r0
80004ad2:	06 34       	cp.w	r4,r3
80004ad4:	80 00       	ld.sh	r0,r0[0x0]
80004ad6:	81 0c       	st.w	r0[0x0],r12
80004ad8:	80 00       	ld.sh	r0,r0[0x0]
80004ada:	4d f0       	lddpc	r0,80004c54 <et024006_SetLimits+0x66>
80004adc:	80 00       	ld.sh	r0,r0[0x0]
80004ade:	4e 1c       	lddpc	r12,80004c60 <et024006_SetLimits+0x72>
80004ae0:	80 00       	ld.sh	r0,r0[0x0]
80004ae2:	50 dc       	stdsp	sp[0x34],r12
80004ae4:	80 00       	ld.sh	r0,r0[0x0]
80004ae6:	52 6a       	stdsp	sp[0x98],r10
80004ae8:	80 00       	ld.sh	r0,r0[0x0]
80004aea:	56 06       	stdsp	sp[0x180],r6
80004aec:	80 00       	ld.sh	r0,r0[0x0]
80004aee:	54 78       	stdsp	sp[0x11c],r8
80004af0:	80 00       	ld.sh	r0,r0[0x0]
80004af2:	56 34       	stdsp	sp[0x18c],r4
80004af4:	80 00       	ld.sh	r0,r0[0x0]
80004af6:	5d 68       	*unknown*

80004af8 <et024006_DrawFilledRect>:
  }
}


void et024006_DrawFilledRect( uint16_t x, uint16_t y, uint16_t width, uint16_t height, et024006_color_t color )
{
80004af8:	eb cd 40 80 	pushm	r7,lr
80004afc:	1a 97       	mov	r7,sp
80004afe:	20 7d       	sub	sp,28
80004b00:	ef 5c ff f4 	st.h	r7[-12],r12
80004b04:	ef 5b ff f0 	st.h	r7[-16],r11
80004b08:	ef 5a ff ec 	st.h	r7[-20],r10
80004b0c:	ef 59 ff e8 	st.h	r7[-24],r9
80004b10:	ef 58 ff e4 	st.h	r7[-28],r8
  Assert( y < ET024006_HEIGHT );
  Assert( width > 0 );
  Assert( height > 0 );

  // Compute bottom right point.
  uint16_t x2 = x + width - 1;
80004b14:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80004b18:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80004b1c:	f2 08 00 08 	add	r8,r9,r8
80004b20:	5c 88       	casts.h	r8
80004b22:	20 18       	sub	r8,1
80004b24:	ef 58 ff f8 	st.h	r7[-8],r8
  uint16_t y2 = y + height - 1;
80004b28:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80004b2c:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80004b30:	f2 08 00 08 	add	r8,r9,r8
80004b34:	5c 88       	casts.h	r8
80004b36:	20 18       	sub	r8,1
80004b38:	ef 58 ff fa 	st.h	r7[-6],r8
  // More sanity check.
  Assert( x2 < ET024006_WIDTH );
  Assert( y2 < ET024006_HEIGHT );

  // Set up draw area and copy pixel color until area is full.
  et024006_SetLimits( x, y, x2, y2 );
80004b3c:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80004b40:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80004b44:	ef 1b ff f0 	ld.uh	r11,r7[-16]
80004b48:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80004b4c:	10 9c       	mov	r12,r8
80004b4e:	f0 1f 00 0b 	mcall	80004b78 <et024006_DrawFilledRect+0x80>
  uint32_t count = (uint32_t) width * height;
80004b52:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80004b56:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80004b5a:	f2 08 02 48 	mul	r8,r9,r8
80004b5e:	ef 48 ff fc 	st.w	r7[-4],r8
  et024006_DuplicatePixel( color, count );
80004b62:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80004b66:	ee fb ff fc 	ld.w	r11,r7[-4]
80004b6a:	10 9c       	mov	r12,r8
80004b6c:	f0 1f 00 04 	mcall	80004b7c <et024006_DrawFilledRect+0x84>
}
80004b70:	2f 9d       	sub	sp,-28
80004b72:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b76:	00 00       	add	r0,r0
80004b78:	80 00       	ld.sh	r0,r0[0x0]
80004b7a:	4b ee       	lddpc	lr,80004c70 <et024006_SetLimits+0x82>
80004b7c:	80 00       	ld.sh	r0,r0[0x0]
80004b7e:	4d 44       	lddpc	r4,80004ccc <et024006_SetLimits+0xde>

80004b80 <et024006_SetRegister>:
#endif

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
80004b80:	eb cd 40 80 	pushm	r7,lr
80004b84:	1a 97       	mov	r7,sp
80004b86:	20 3d       	sub	sp,12
80004b88:	18 99       	mov	r9,r12
80004b8a:	16 98       	mov	r8,r11
80004b8c:	ef 69 ff f8 	st.b	r7[-8],r9
80004b90:	ef 68 ff f4 	st.b	r7[-12],r8
  uint8_t value = et024006_ReadRegister( address );
80004b94:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004b98:	ef 68 ff fd 	st.b	r7[-3],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ uint8_t et024006_ReadRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004b9c:	fc 19 c0 00 	movh	r9,0xc000
80004ba0:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004ba4:	b2 08       	st.h	r9[0x0],r8
  return *ET024006_PARAM_ADDR;
80004ba6:	fc 18 c0 20 	movh	r8,0xc020
80004baa:	90 08       	ld.sh	r8,r8[0x0]
80004bac:	5c 88       	casts.h	r8
80004bae:	5c 58       	castu.b	r8

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
80004bb0:	ef 68 ff fc 	st.b	r7[-4],r8
  value |= bitmask;
80004bb4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004bb8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004bbc:	f3 e8 10 08 	or	r8,r9,r8
80004bc0:	ef 68 ff fc 	st.b	r7[-4],r8
  et024006_WriteRegister( address, value );
80004bc4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004bc8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80004bcc:	ef 69 ff ff 	st.b	r7[-1],r9
80004bd0:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004bd4:	fc 19 c0 00 	movh	r9,0xc000
80004bd8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004bdc:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004bde:	fc 19 c0 20 	movh	r9,0xc020
80004be2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004be6:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
  value |= bitmask;
  et024006_WriteRegister( address, value );
}
80004be8:	2f dd       	sub	sp,-12
80004bea:	e3 cd 80 80 	ldm	sp++,r7,pc

80004bee <et024006_SetLimits>:
/*! \brief Sets the display limits according to the corner coordinates.
 *  Writing to the display will result in writing to the area specified through
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
80004bee:	eb cd 40 80 	pushm	r7,lr
80004bf2:	1a 97       	mov	r7,sp
80004bf4:	20 8d       	sub	sp,32
80004bf6:	12 98       	mov	r8,r9
80004bf8:	18 99       	mov	r9,r12
80004bfa:	ef 59 ff ec 	st.h	r7[-20],r9
80004bfe:	16 99       	mov	r9,r11
80004c00:	ef 59 ff e8 	st.h	r7[-24],r9
80004c04:	14 99       	mov	r9,r10
80004c06:	ef 59 ff e4 	st.h	r7[-28],r9
80004c0a:	ef 58 ff e0 	st.h	r7[-32],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
80004c0e:	ef 18 ff ec 	ld.uh	r8,r7[-20]
80004c12:	a9 88       	lsr	r8,0x8
80004c14:	5c 88       	casts.h	r8
80004c16:	5c 58       	castu.b	r8
80004c18:	30 29       	mov	r9,2
80004c1a:	ef 69 ff f1 	st.b	r7[-15],r9
80004c1e:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004c22:	fc 19 c0 00 	movh	r9,0xc000
80004c26:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80004c2a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004c2c:	fc 19 c0 20 	movh	r9,0xc020
80004c30:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80004c34:	b2 08       	st.h	r9[0x0],r8
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
80004c36:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80004c3a:	5c 58       	castu.b	r8
80004c3c:	30 39       	mov	r9,3
80004c3e:	ef 69 ff f3 	st.b	r7[-13],r9
80004c42:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004c46:	fc 19 c0 00 	movh	r9,0xc000
80004c4a:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80004c4e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004c50:	fc 19 c0 20 	movh	r9,0xc020
80004c54:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80004c58:	b2 08       	st.h	r9[0x0],r8
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
80004c5a:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80004c5e:	a9 88       	lsr	r8,0x8
80004c60:	5c 88       	casts.h	r8
80004c62:	5c 58       	castu.b	r8
80004c64:	30 49       	mov	r9,4
80004c66:	ef 69 ff f5 	st.b	r7[-11],r9
80004c6a:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004c6e:	fc 19 c0 00 	movh	r9,0xc000
80004c72:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004c76:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004c78:	fc 19 c0 20 	movh	r9,0xc020
80004c7c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004c80:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
80004c82:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80004c86:	5c 58       	castu.b	r8
80004c88:	30 59       	mov	r9,5
80004c8a:	ef 69 ff f7 	st.b	r7[-9],r9
80004c8e:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004c92:	fc 19 c0 00 	movh	r9,0xc000
80004c96:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004c9a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004c9c:	fc 19 c0 20 	movh	r9,0xc020
80004ca0:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004ca4:	b2 08       	st.h	r9[0x0],r8
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
80004ca6:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80004caa:	a9 88       	lsr	r8,0x8
80004cac:	5c 88       	casts.h	r8
80004cae:	5c 58       	castu.b	r8
80004cb0:	30 69       	mov	r9,6
80004cb2:	ef 69 ff f9 	st.b	r7[-7],r9
80004cb6:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004cba:	fc 19 c0 00 	movh	r9,0xc000
80004cbe:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004cc2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004cc4:	fc 19 c0 20 	movh	r9,0xc020
80004cc8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004ccc:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
80004cce:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80004cd2:	5c 58       	castu.b	r8
80004cd4:	30 79       	mov	r9,7
80004cd6:	ef 69 ff fb 	st.b	r7[-5],r9
80004cda:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004cde:	fc 19 c0 00 	movh	r9,0xc000
80004ce2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004ce6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004ce8:	fc 19 c0 20 	movh	r9,0xc020
80004cec:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004cf0:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
80004cf2:	ef 18 ff e0 	ld.uh	r8,r7[-32]
80004cf6:	a9 88       	lsr	r8,0x8
80004cf8:	5c 88       	casts.h	r8
80004cfa:	5c 58       	castu.b	r8
80004cfc:	30 89       	mov	r9,8
80004cfe:	ef 69 ff fd 	st.b	r7[-3],r9
80004d02:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004d06:	fc 19 c0 00 	movh	r9,0xc000
80004d0a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004d0e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004d10:	fc 19 c0 20 	movh	r9,0xc020
80004d14:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004d18:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
80004d1a:	ef 08 ff e0 	ld.sh	r8,r7[-32]
80004d1e:	5c 58       	castu.b	r8
80004d20:	30 99       	mov	r9,9
80004d22:	ef 69 ff ff 	st.b	r7[-1],r9
80004d26:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004d2a:	fc 19 c0 00 	movh	r9,0xc000
80004d2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004d32:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004d34:	fc 19 c0 20 	movh	r9,0xc020
80004d38:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004d3c:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
}
80004d3e:	2f 8d       	sub	sp,-32
80004d40:	e3 cd 80 80 	ldm	sp++,r7,pc

80004d44 <et024006_DuplicatePixel>:


/* --- Pixel block operations --- */

static void et024006_DuplicatePixel( et024006_color_t color, uint32_t count )
{
80004d44:	eb cd 40 80 	pushm	r7,lr
80004d48:	1a 97       	mov	r7,sp
80004d4a:	20 3d       	sub	sp,12
80004d4c:	18 98       	mov	r8,r12
80004d4e:	ef 4b ff f4 	st.w	r7[-12],r11
80004d52:	ef 58 ff f8 	st.h	r7[-8],r8
80004d56:	32 28       	mov	r8,34
80004d58:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004d5c:	fc 19 c0 00 	movh	r9,0xc000
80004d60:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004d64:	b2 08       	st.h	r9[0x0],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80004d66:	c2 e8       	rjmp	80004dc2 <et024006_DuplicatePixel+0x7e>
    *ET024006_PARAM_ADDR = color;
80004d68:	fc 19 c0 20 	movh	r9,0xc020
80004d6c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d70:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004d72:	fc 19 c0 20 	movh	r9,0xc020
80004d76:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d7a:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004d7c:	fc 19 c0 20 	movh	r9,0xc020
80004d80:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d84:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004d86:	fc 19 c0 20 	movh	r9,0xc020
80004d8a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d8e:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004d90:	fc 19 c0 20 	movh	r9,0xc020
80004d94:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d98:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004d9a:	fc 19 c0 20 	movh	r9,0xc020
80004d9e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004da2:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004da4:	fc 19 c0 20 	movh	r9,0xc020
80004da8:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004dac:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004dae:	fc 19 c0 20 	movh	r9,0xc020
80004db2:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004db6:	b2 08       	st.h	r9[0x0],r8
    count-=8;
80004db8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004dbc:	20 88       	sub	r8,8
80004dbe:	ef 48 ff f4 	st.w	r7[-12],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80004dc2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004dc6:	58 78       	cp.w	r8,7
80004dc8:	fe 9b ff d0 	brhi	80004d68 <et024006_DuplicatePixel+0x24>
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80004dcc:	c0 b8       	rjmp	80004de2 <et024006_DuplicatePixel+0x9e>
    *ET024006_PARAM_ADDR = color;
80004dce:	fc 19 c0 20 	movh	r9,0xc020
80004dd2:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004dd6:	b2 08       	st.h	r9[0x0],r8
    --count;
80004dd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ddc:	20 18       	sub	r8,1
80004dde:	ef 48 ff f4 	st.w	r7[-12],r8
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80004de2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004de6:	58 08       	cp.w	r8,0
80004de8:	cf 31       	brne	80004dce <et024006_DuplicatePixel+0x8a>
    }
  }

  et024006_DeselectSPI();
#endif
}
80004dea:	2f dd       	sub	sp,-12
80004dec:	e3 cd 80 80 	ldm	sp++,r7,pc

80004df0 <et024006_SetupInterface>:
                SPI_MASTER_bm);          // in master mode
}
#endif

static void et024006_SetupInterface( void )
{
80004df0:	eb cd 40 80 	pushm	r7,lr
80004df4:	1a 97       	mov	r7,sp

  // et024006_TE (tearing sync) signal from display is input
  // without any pull resistors
  gpio_enable_gpio_pin(ET024006DHU_TE_PIN);
80004df6:	30 0c       	mov	r12,0
80004df8:	f0 1f 00 06 	mcall	80004e10 <et024006_SetupInterface+0x20>

  // Backlight pin (PWM) for display is output
  gpio_enable_module_pin(ET024006DHU_BL_PIN, ET024006DHU_BL_FUNCTION);
80004dfc:	30 2b       	mov	r11,2
80004dfe:	30 9c       	mov	r12,9
80004e00:	f0 1f 00 05 	mcall	80004e14 <et024006_SetupInterface+0x24>
  // Turns backlight ON
  /*TODO Add backlight driver */

  // Reset pin for display is output
  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80004e04:	34 2c       	mov	r12,66
80004e06:	f0 1f 00 05 	mcall	80004e18 <et024006_SetupInterface+0x28>
}
80004e0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e0e:	00 00       	add	r0,r0
80004e10:	80 00       	ld.sh	r0,r0[0x0]
80004e12:	89 d4       	st.w	r4[0x34],r4
80004e14:	80 00       	ld.sh	r0,r0[0x0]
80004e16:	88 c4       	ld.uh	r4,r4[0x8]
80004e18:	80 00       	ld.sh	r0,r0[0x0]
80004e1a:	8c 46       	ld.sh	r6,r6[0x8]

80004e1c <et024006_ResetDisplay>:

/*! \brief Does a hard reset of the display.
 */
static void et024006_ResetDisplay( void )
{
80004e1c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80004e20:	1a 97       	mov	r7,sp
80004e22:	21 ad       	sub	sp,104
  // clear reset line
  gpio_clr_gpio_pin(ET024006DHU_RESET_PIN);
80004e24:	34 2c       	mov	r12,66
80004e26:	f0 1f 00 aa 	mcall	800050cc <et024006_ResetDisplay+0x2b0>
  // 50us delay
  cpu_delay_us( 50, tft_data.cpu_hz );
80004e2a:	fe f8 02 a6 	ld.w	r8,pc[678]
80004e2e:	70 08       	ld.w	r8,r8[0x0]
80004e30:	33 29       	mov	r9,50
80004e32:	ef 49 ff c4 	st.w	r7[-60],r9
80004e36:	ef 48 ff c0 	st.w	r7[-64],r8
80004e3a:	ee f8 ff c4 	ld.w	r8,r7[-60]
80004e3e:	ef 48 ff cc 	st.w	r7[-52],r8
80004e42:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004e46:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80004e4a:	ee fc ff cc 	ld.w	r12,r7[-52]
80004e4e:	ef 4c ff a4 	st.w	r7[-92],r12
80004e52:	30 0b       	mov	r11,0
80004e54:	ef 4b ff a0 	st.w	r7[-96],r11
80004e58:	ee f9 ff c8 	ld.w	r9,r7[-56]
80004e5c:	ef 49 ff 9c 	st.w	r7[-100],r9
80004e60:	30 08       	mov	r8,0
80004e62:	ef 48 ff 98 	st.w	r7[-104],r8
80004e66:	ee fa ff a0 	ld.w	r10,r7[-96]
80004e6a:	ee fc ff 9c 	ld.w	r12,r7[-100]
80004e6e:	b9 3a       	mul	r10,r12
80004e70:	ee f8 ff 98 	ld.w	r8,r7[-104]
80004e74:	ee fb ff a4 	ld.w	r11,r7[-92]
80004e78:	b7 38       	mul	r8,r11
80004e7a:	10 0a       	add	r10,r8
80004e7c:	ee fc ff a4 	ld.w	r12,r7[-92]
80004e80:	ee fb ff 9c 	ld.w	r11,r7[-100]
80004e84:	f8 0b 06 48 	mulu.d	r8,r12,r11
80004e88:	12 0a       	add	r10,r9
80004e8a:	14 99       	mov	r9,r10
80004e8c:	ee 7a 42 3f 	mov	r10,999999
80004e90:	30 0b       	mov	r11,0
80004e92:	f0 0a 00 0a 	add	r10,r8,r10
80004e96:	f2 0b 00 4b 	adc	r11,r9,r11
80004e9a:	ee 78 42 40 	mov	r8,1000000
80004e9e:	30 09       	mov	r9,0
80004ea0:	f0 1f 00 8d 	mcall	800050d4 <et024006_ResetDisplay+0x2b8>
80004ea4:	14 98       	mov	r8,r10
80004ea6:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80004ea8:	ef 48 ff d4 	st.w	r7[-44],r8
80004eac:	ee c8 00 58 	sub	r8,r7,88
80004eb0:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004eb4:	e1 b8 00 42 	mfsr	r8,0x108
80004eb8:	10 99       	mov	r9,r8
80004eba:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004ebe:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004ec0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004ec4:	70 09       	ld.w	r9,r8[0x0]
80004ec6:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004eca:	10 09       	add	r9,r8
80004ecc:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004ed0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004ed2:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004ed6:	30 08       	mov	r8,0
80004ed8:	f3 68 00 08 	st.b	r9[8],r8
80004edc:	ee c8 00 58 	sub	r8,r7,88
80004ee0:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004ee4:	e1 b8 00 42 	mfsr	r8,0x108
80004ee8:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004eec:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004ef0:	f1 39 00 08 	ld.ub	r9,r8[8]
80004ef4:	30 28       	mov	r8,2
80004ef6:	f0 09 18 00 	cp.b	r9,r8
80004efa:	c0 31       	brne	80004f00 <et024006_ResetDisplay+0xe4>
    return false;
80004efc:	30 08       	mov	r8,0
80004efe:	c4 38       	rjmp	80004f84 <et024006_ResetDisplay+0x168>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004f00:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f04:	f1 39 00 08 	ld.ub	r9,r8[8]
80004f08:	30 18       	mov	r8,1
80004f0a:	f0 09 18 00 	cp.b	r9,r8
80004f0e:	c0 31       	brne	80004f14 <et024006_ResetDisplay+0xf8>
    return true;
80004f10:	30 18       	mov	r8,1
80004f12:	c3 98       	rjmp	80004f84 <et024006_ResetDisplay+0x168>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004f14:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f18:	70 09       	ld.w	r9,r8[0x0]
80004f1a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f1e:	70 18       	ld.w	r8,r8[0x4]
80004f20:	10 39       	cp.w	r9,r8
80004f22:	e0 88 00 1a 	brls	80004f56 <et024006_ResetDisplay+0x13a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004f26:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f2a:	70 08       	ld.w	r8,r8[0x0]
80004f2c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004f30:	10 39       	cp.w	r9,r8
80004f32:	c1 02       	brcc	80004f52 <et024006_ResetDisplay+0x136>
80004f34:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f38:	70 18       	ld.w	r8,r8[0x4]
80004f3a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004f3e:	10 39       	cp.w	r9,r8
80004f40:	e0 88 00 09 	brls	80004f52 <et024006_ResetDisplay+0x136>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004f44:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004f48:	30 18       	mov	r8,1
80004f4a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004f4e:	30 18       	mov	r8,1
80004f50:	c1 a8       	rjmp	80004f84 <et024006_ResetDisplay+0x168>
    }
    return false;
80004f52:	30 08       	mov	r8,0
80004f54:	c1 88       	rjmp	80004f84 <et024006_ResetDisplay+0x168>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004f56:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f5a:	70 08       	ld.w	r8,r8[0x0]
80004f5c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004f60:	10 39       	cp.w	r9,r8
80004f62:	c0 93       	brcs	80004f74 <et024006_ResetDisplay+0x158>
80004f64:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f68:	70 18       	ld.w	r8,r8[0x4]
80004f6a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004f6e:	10 39       	cp.w	r9,r8
80004f70:	e0 88 00 09 	brls	80004f82 <et024006_ResetDisplay+0x166>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004f74:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004f78:	30 18       	mov	r8,1
80004f7a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004f7e:	30 18       	mov	r8,1
80004f80:	c0 28       	rjmp	80004f84 <et024006_ResetDisplay+0x168>
    }
    return false;
80004f82:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004f84:	58 08       	cp.w	r8,0
80004f86:	ca b0       	breq	80004edc <et024006_ResetDisplay+0xc0>

  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80004f88:	34 2c       	mov	r12,66
80004f8a:	f0 1f 00 54 	mcall	800050d8 <et024006_ResetDisplay+0x2bc>
  // 5ms delay
  cpu_delay_ms( 5, tft_data.cpu_hz );
80004f8e:	4d 18       	lddpc	r8,800050d0 <et024006_ResetDisplay+0x2b4>
80004f90:	70 08       	ld.w	r8,r8[0x0]
80004f92:	30 59       	mov	r9,5
80004f94:	ef 49 ff e4 	st.w	r7[-28],r9
80004f98:	ef 48 ff e0 	st.w	r7[-32],r8
80004f9c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004fa0:	ef 48 ff ec 	st.w	r7[-20],r8
80004fa4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004fa8:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004fac:	ee f0 ff ec 	ld.w	r0,r7[-20]
80004fb0:	30 01       	mov	r1,0
80004fb2:	ee f2 ff e8 	ld.w	r2,r7[-24]
80004fb6:	30 03       	mov	r3,0
80004fb8:	e2 02 02 4a 	mul	r10,r1,r2
80004fbc:	e6 00 02 48 	mul	r8,r3,r0
80004fc0:	10 0a       	add	r10,r8
80004fc2:	e0 02 06 48 	mulu.d	r8,r0,r2
80004fc6:	12 0a       	add	r10,r9
80004fc8:	14 99       	mov	r9,r10
80004fca:	e0 6a 03 e7 	mov	r10,999
80004fce:	30 0b       	mov	r11,0
80004fd0:	f0 0a 00 0a 	add	r10,r8,r10
80004fd4:	f2 0b 00 4b 	adc	r11,r9,r11
80004fd8:	e0 68 03 e8 	mov	r8,1000
80004fdc:	30 09       	mov	r9,0
80004fde:	f0 1f 00 3e 	mcall	800050d4 <et024006_ResetDisplay+0x2b8>
80004fe2:	14 98       	mov	r8,r10
80004fe4:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004fe6:	ef 48 ff f4 	st.w	r7[-12],r8
80004fea:	ee c8 00 4c 	sub	r8,r7,76
80004fee:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004ff2:	e1 b8 00 42 	mfsr	r8,0x108
80004ff6:	10 99       	mov	r9,r8
80004ff8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004ffc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004ffe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005002:	70 09       	ld.w	r9,r8[0x0]
80005004:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005008:	10 09       	add	r9,r8
8000500a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000500e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005010:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005014:	30 08       	mov	r8,0
80005016:	f3 68 00 08 	st.b	r9[8],r8
8000501a:	ee c8 00 4c 	sub	r8,r7,76
8000501e:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005022:	e1 b8 00 42 	mfsr	r8,0x108
80005026:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000502a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000502e:	f1 39 00 08 	ld.ub	r9,r8[8]
80005032:	30 28       	mov	r8,2
80005034:	f0 09 18 00 	cp.b	r9,r8
80005038:	c0 31       	brne	8000503e <et024006_ResetDisplay+0x222>
    return false;
8000503a:	30 08       	mov	r8,0
8000503c:	c4 38       	rjmp	800050c2 <et024006_ResetDisplay+0x2a6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000503e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005042:	f1 39 00 08 	ld.ub	r9,r8[8]
80005046:	30 18       	mov	r8,1
80005048:	f0 09 18 00 	cp.b	r9,r8
8000504c:	c0 31       	brne	80005052 <et024006_ResetDisplay+0x236>
    return true;
8000504e:	30 18       	mov	r8,1
80005050:	c3 98       	rjmp	800050c2 <et024006_ResetDisplay+0x2a6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005052:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005056:	70 09       	ld.w	r9,r8[0x0]
80005058:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000505c:	70 18       	ld.w	r8,r8[0x4]
8000505e:	10 39       	cp.w	r9,r8
80005060:	e0 88 00 1a 	brls	80005094 <et024006_ResetDisplay+0x278>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005064:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005068:	70 08       	ld.w	r8,r8[0x0]
8000506a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000506e:	10 39       	cp.w	r9,r8
80005070:	c1 02       	brcc	80005090 <et024006_ResetDisplay+0x274>
80005072:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005076:	70 18       	ld.w	r8,r8[0x4]
80005078:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000507c:	10 39       	cp.w	r9,r8
8000507e:	e0 88 00 09 	brls	80005090 <et024006_ResetDisplay+0x274>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005082:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005086:	30 18       	mov	r8,1
80005088:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000508c:	30 18       	mov	r8,1
8000508e:	c1 a8       	rjmp	800050c2 <et024006_ResetDisplay+0x2a6>
    }
    return false;
80005090:	30 08       	mov	r8,0
80005092:	c1 88       	rjmp	800050c2 <et024006_ResetDisplay+0x2a6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005094:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005098:	70 08       	ld.w	r8,r8[0x0]
8000509a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000509e:	10 39       	cp.w	r9,r8
800050a0:	c0 93       	brcs	800050b2 <et024006_ResetDisplay+0x296>
800050a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050a6:	70 18       	ld.w	r8,r8[0x4]
800050a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800050ac:	10 39       	cp.w	r9,r8
800050ae:	e0 88 00 09 	brls	800050c0 <et024006_ResetDisplay+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800050b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800050b6:	30 18       	mov	r8,1
800050b8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800050bc:	30 18       	mov	r8,1
800050be:	c0 28       	rjmp	800050c2 <et024006_ResetDisplay+0x2a6>
    }
    return false;
800050c0:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800050c2:	58 08       	cp.w	r8,0
800050c4:	ca b0       	breq	8000501a <et024006_ResetDisplay+0x1fe>
}
800050c6:	2e 6d       	sub	sp,-104
800050c8:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800050cc:	80 00       	ld.sh	r0,r0[0x0]
800050ce:	8c ae       	ld.uh	lr,r6[0x4]
800050d0:	00 00       	add	r0,r0
800050d2:	06 34       	cp.w	r4,r3
800050d4:	80 00       	ld.sh	r0,r0[0x0]
800050d6:	e3 f8 80 00 	ld.wls	r8,r1[0x0]
800050da:	8c 46       	ld.sh	r6,r6[0x8]

800050dc <et024006_AdjustGamma>:
/*! \brief Display gamma setup.
 *
 * Parameters are provided by EDT for the display.
 */
static void et024006_AdjustGamma( void )
{
800050dc:	eb cd 40 80 	pushm	r7,lr
800050e0:	1a 97       	mov	r7,sp
800050e2:	20 6d       	sub	sp,24
800050e4:	34 68       	mov	r8,70
800050e6:	ef 68 ff e9 	st.b	r7[-23],r8
800050ea:	39 48       	mov	r8,-108
800050ec:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800050f0:	fc 19 c0 00 	movh	r9,0xc000
800050f4:	ef 38 ff e9 	ld.ub	r8,r7[-23]
800050f8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800050fa:	fc 19 c0 20 	movh	r9,0xc020
800050fe:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80005102:	b2 08       	st.h	r9[0x0],r8
80005104:	34 78       	mov	r8,71
80005106:	ef 68 ff eb 	st.b	r7[-21],r8
8000510a:	34 18       	mov	r8,65
8000510c:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005110:	fc 19 c0 00 	movh	r9,0xc000
80005114:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80005118:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000511a:	fc 19 c0 20 	movh	r9,0xc020
8000511e:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80005122:	b2 08       	st.h	r9[0x0],r8
80005124:	34 88       	mov	r8,72
80005126:	ef 68 ff ed 	st.b	r7[-19],r8
8000512a:	30 08       	mov	r8,0
8000512c:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005130:	fc 19 c0 00 	movh	r9,0xc000
80005134:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005138:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000513a:	fc 19 c0 20 	movh	r9,0xc020
8000513e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005142:	b2 08       	st.h	r9[0x0],r8
80005144:	34 98       	mov	r8,73
80005146:	ef 68 ff ef 	st.b	r7[-17],r8
8000514a:	33 38       	mov	r8,51
8000514c:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005150:	fc 19 c0 00 	movh	r9,0xc000
80005154:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80005158:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000515a:	fc 19 c0 20 	movh	r9,0xc020
8000515e:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80005162:	b2 08       	st.h	r9[0x0],r8
80005164:	34 a8       	mov	r8,74
80005166:	ef 68 ff f1 	st.b	r7[-15],r8
8000516a:	32 58       	mov	r8,37
8000516c:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005170:	fc 19 c0 00 	movh	r9,0xc000
80005174:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80005178:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000517a:	fc 19 c0 20 	movh	r9,0xc020
8000517e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005182:	b2 08       	st.h	r9[0x0],r8
80005184:	34 b8       	mov	r8,75
80005186:	ef 68 ff f3 	st.b	r7[-13],r8
8000518a:	34 58       	mov	r8,69
8000518c:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005190:	fc 19 c0 00 	movh	r9,0xc000
80005194:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80005198:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000519a:	fc 19 c0 20 	movh	r9,0xc020
8000519e:	ef 38 ff f2 	ld.ub	r8,r7[-14]
800051a2:	b2 08       	st.h	r9[0x0],r8
800051a4:	34 c8       	mov	r8,76
800051a6:	ef 68 ff f5 	st.b	r7[-11],r8
800051aa:	34 48       	mov	r8,68
800051ac:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051b0:	fc 19 c0 00 	movh	r9,0xc000
800051b4:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800051b8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051ba:	fc 19 c0 20 	movh	r9,0xc020
800051be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800051c2:	b2 08       	st.h	r9[0x0],r8
800051c4:	34 d8       	mov	r8,77
800051c6:	ef 68 ff f7 	st.b	r7[-9],r8
800051ca:	37 78       	mov	r8,119
800051cc:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051d0:	fc 19 c0 00 	movh	r9,0xc000
800051d4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800051d8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051da:	fc 19 c0 20 	movh	r9,0xc020
800051de:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800051e2:	b2 08       	st.h	r9[0x0],r8
800051e4:	34 e8       	mov	r8,78
800051e6:	ef 68 ff f9 	st.b	r7[-7],r8
800051ea:	31 28       	mov	r8,18
800051ec:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051f0:	fc 19 c0 00 	movh	r9,0xc000
800051f4:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800051f8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051fa:	fc 19 c0 20 	movh	r9,0xc020
800051fe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005202:	b2 08       	st.h	r9[0x0],r8
80005204:	34 f8       	mov	r8,79
80005206:	ef 68 ff fb 	st.b	r7[-5],r8
8000520a:	3c c8       	mov	r8,-52
8000520c:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005210:	fc 19 c0 00 	movh	r9,0xc000
80005214:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005218:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000521a:	fc 19 c0 20 	movh	r9,0xc020
8000521e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80005222:	b2 08       	st.h	r9[0x0],r8
80005224:	35 08       	mov	r8,80
80005226:	ef 68 ff fd 	st.b	r7[-3],r8
8000522a:	34 68       	mov	r8,70
8000522c:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005230:	fc 19 c0 00 	movh	r9,0xc000
80005234:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005238:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000523a:	fc 19 c0 20 	movh	r9,0xc020
8000523e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005242:	b2 08       	st.h	r9[0x0],r8
80005244:	35 18       	mov	r8,81
80005246:	ef 68 ff ff 	st.b	r7[-1],r8
8000524a:	38 28       	mov	r8,-126
8000524c:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005250:	fc 19 c0 00 	movh	r9,0xc000
80005254:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005258:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000525a:	fc 19 c0 20 	movh	r9,0xc020
8000525e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005262:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_GAMMACTRL8, 0x77 );
  et024006_WriteRegister( HIMAX_GAMMACTRL9, 0x12 );
  et024006_WriteRegister( HIMAX_GAMMACTRL10, 0xCC );
  et024006_WriteRegister( HIMAX_GAMMACTRL11, 0x46 );
  et024006_WriteRegister( HIMAX_GAMMACTRL12, 0x82 );
}
80005264:	2f ad       	sub	sp,-24
80005266:	e3 cd 80 80 	ldm	sp++,r7,pc

8000526a <et024006_GeneralSettings>:
/*! \brief General display settings.
 *
 * This are settings provided by EDT and are optimised for the display.
 */
static void et024006_GeneralSettings(void)
{
8000526a:	eb cd 40 80 	pushm	r7,lr
8000526e:	1a 97       	mov	r7,sp
80005270:	20 8d       	sub	sp,32
80005272:	30 18       	mov	r8,1
80005274:	ef 68 ff e1 	st.b	r7[-31],r8
80005278:	30 68       	mov	r8,6
8000527a:	ef 68 ff e0 	st.b	r7[-32],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000527e:	fc 19 c0 00 	movh	r9,0xc000
80005282:	ef 38 ff e1 	ld.ub	r8,r7[-31]
80005286:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005288:	fc 19 c0 20 	movh	r9,0xc020
8000528c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80005290:	b2 08       	st.h	r9[0x0],r8
80005292:	33 a8       	mov	r8,58
80005294:	ef 68 ff e3 	st.b	r7[-29],r8
80005298:	30 18       	mov	r8,1
8000529a:	ef 68 ff e2 	st.b	r7[-30],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000529e:	fc 19 c0 00 	movh	r9,0xc000
800052a2:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800052a6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052a8:	fc 19 c0 20 	movh	r9,0xc020
800052ac:	ef 38 ff e2 	ld.ub	r8,r7[-30]
800052b0:	b2 08       	st.h	r9[0x0],r8
800052b2:	33 b8       	mov	r8,59
800052b4:	ef 68 ff e5 	st.b	r7[-27],r8
800052b8:	30 18       	mov	r8,1
800052ba:	ef 68 ff e4 	st.b	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052be:	fc 19 c0 00 	movh	r9,0xc000
800052c2:	ef 38 ff e5 	ld.ub	r8,r7[-27]
800052c6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052c8:	fc 19 c0 20 	movh	r9,0xc020
800052cc:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800052d0:	b2 08       	st.h	r9[0x0],r8
800052d2:	33 c8       	mov	r8,60
800052d4:	ef 68 ff e7 	st.b	r7[-25],r8
800052d8:	3f 08       	mov	r8,-16
800052da:	ef 68 ff e6 	st.b	r7[-26],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052de:	fc 19 c0 00 	movh	r9,0xc000
800052e2:	ef 38 ff e7 	ld.ub	r8,r7[-25]
800052e6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052e8:	fc 19 c0 20 	movh	r9,0xc020
800052ec:	ef 38 ff e6 	ld.ub	r8,r7[-26]
800052f0:	b2 08       	st.h	r9[0x0],r8
800052f2:	33 d8       	mov	r8,61
800052f4:	ef 68 ff e9 	st.b	r7[-23],r8
800052f8:	30 08       	mov	r8,0
800052fa:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052fe:	fc 19 c0 00 	movh	r9,0xc000
80005302:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80005306:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005308:	fc 19 c0 20 	movh	r9,0xc020
8000530c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80005310:	b2 08       	st.h	r9[0x0],r8
80005312:	33 e8       	mov	r8,62
80005314:	ef 68 ff eb 	st.b	r7[-21],r8
80005318:	33 88       	mov	r8,56
8000531a:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000531e:	fc 19 c0 00 	movh	r9,0xc000
80005322:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80005326:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005328:	fc 19 c0 20 	movh	r9,0xc020
8000532c:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80005330:	b2 08       	st.h	r9[0x0],r8
80005332:	34 08       	mov	r8,64
80005334:	ef 68 ff ed 	st.b	r7[-19],r8
80005338:	30 f8       	mov	r8,15
8000533a:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000533e:	fc 19 c0 00 	movh	r9,0xc000
80005342:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005346:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005348:	fc 19 c0 20 	movh	r9,0xc020
8000534c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005350:	b2 08       	st.h	r9[0x0],r8
80005352:	34 18       	mov	r8,65
80005354:	ef 68 ff ef 	st.b	r7[-17],r8
80005358:	3f 08       	mov	r8,-16
8000535a:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000535e:	fc 19 c0 00 	movh	r9,0xc000
80005362:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80005366:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005368:	fc 19 c0 20 	movh	r9,0xc020
8000536c:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80005370:	b2 08       	st.h	r9[0x0],r8
80005372:	32 78       	mov	r8,39
80005374:	ef 68 ff f1 	st.b	r7[-15],r8
80005378:	30 28       	mov	r8,2
8000537a:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000537e:	fc 19 c0 00 	movh	r9,0xc000
80005382:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80005386:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005388:	fc 19 c0 20 	movh	r9,0xc020
8000538c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005390:	b2 08       	st.h	r9[0x0],r8
80005392:	32 88       	mov	r8,40
80005394:	ef 68 ff f3 	st.b	r7[-13],r8
80005398:	30 28       	mov	r8,2
8000539a:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000539e:	fc 19 c0 00 	movh	r9,0xc000
800053a2:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800053a6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053a8:	fc 19 c0 20 	movh	r9,0xc020
800053ac:	ef 38 ff f2 	ld.ub	r8,r7[-14]
800053b0:	b2 08       	st.h	r9[0x0],r8
800053b2:	32 98       	mov	r8,41
800053b4:	ef 68 ff f5 	st.b	r7[-11],r8
800053b8:	30 28       	mov	r8,2
800053ba:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053be:	fc 19 c0 00 	movh	r9,0xc000
800053c2:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800053c6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053c8:	fc 19 c0 20 	movh	r9,0xc020
800053cc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800053d0:	b2 08       	st.h	r9[0x0],r8
800053d2:	32 a8       	mov	r8,42
800053d4:	ef 68 ff f7 	st.b	r7[-9],r8
800053d8:	30 28       	mov	r8,2
800053da:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053de:	fc 19 c0 00 	movh	r9,0xc000
800053e2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800053e6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053e8:	fc 19 c0 20 	movh	r9,0xc020
800053ec:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800053f0:	b2 08       	st.h	r9[0x0],r8
800053f2:	32 c8       	mov	r8,44
800053f4:	ef 68 ff f9 	st.b	r7[-7],r8
800053f8:	30 28       	mov	r8,2
800053fa:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053fe:	fc 19 c0 00 	movh	r9,0xc000
80005402:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80005406:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005408:	fc 19 c0 20 	movh	r9,0xc020
8000540c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005410:	b2 08       	st.h	r9[0x0],r8
80005412:	32 d8       	mov	r8,45
80005414:	ef 68 ff fb 	st.b	r7[-5],r8
80005418:	30 28       	mov	r8,2
8000541a:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000541e:	fc 19 c0 00 	movh	r9,0xc000
80005422:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005426:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005428:	fc 19 c0 20 	movh	r9,0xc020
8000542c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80005430:	b2 08       	st.h	r9[0x0],r8
80005432:	31 98       	mov	r8,25
80005434:	ef 68 ff fd 	st.b	r7[-3],r8
80005438:	34 98       	mov	r8,73
8000543a:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000543e:	fc 19 c0 00 	movh	r9,0xc000
80005442:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005446:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005448:	fc 19 c0 20 	movh	r9,0xc020
8000544c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005450:	b2 08       	st.h	r9[0x0],r8
80005452:	39 38       	mov	r8,-109
80005454:	ef 68 ff ff 	st.b	r7[-1],r8
80005458:	30 88       	mov	r8,8
8000545a:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000545e:	fc 19 c0 00 	movh	r9,0xc000
80005462:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005466:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005468:	fc 19 c0 20 	movh	r9,0xc020
8000546c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005470:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL6, 0x02 );
  et024006_WriteRegister( HIMAX_DISPCTRL7, 0x02 );

  et024006_WriteRegister( HIMAX_OSCCTRL1, 0x49 );
  et024006_WriteRegister( HIMAX_OSCCTRL3, 0x08 );
}
80005472:	2f 8d       	sub	sp,-32
80005474:	e3 cd 80 80 	ldm	sp++,r7,pc

80005478 <et024006_PowerSettings>:
/*! \brief Power setup.
 *
 * Sets basic DC/DC and VCOM parameters.
 */
static void et024006_PowerSettings(void)
{
80005478:	eb cd 40 80 	pushm	r7,lr
8000547c:	1a 97       	mov	r7,sp
8000547e:	20 6d       	sub	sp,24
80005480:	32 38       	mov	r8,35
80005482:	ef 68 ff e9 	st.b	r7[-23],r8
80005486:	39 58       	mov	r8,-107
80005488:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000548c:	fc 19 c0 00 	movh	r9,0xc000
80005490:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80005494:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005496:	fc 19 c0 20 	movh	r9,0xc020
8000549a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000549e:	b2 08       	st.h	r9[0x0],r8
800054a0:	32 48       	mov	r8,36
800054a2:	ef 68 ff eb 	st.b	r7[-21],r8
800054a6:	39 58       	mov	r8,-107
800054a8:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800054ac:	fc 19 c0 00 	movh	r9,0xc000
800054b0:	ef 38 ff eb 	ld.ub	r8,r7[-21]
800054b4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800054b6:	fc 19 c0 20 	movh	r9,0xc020
800054ba:	ef 38 ff ea 	ld.ub	r8,r7[-22]
800054be:	b2 08       	st.h	r9[0x0],r8
800054c0:	32 58       	mov	r8,37
800054c2:	ef 68 ff ed 	st.b	r7[-19],r8
800054c6:	3f f8       	mov	r8,-1
800054c8:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800054cc:	fc 19 c0 00 	movh	r9,0xc000
800054d0:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800054d4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800054d6:	fc 19 c0 20 	movh	r9,0xc020
800054da:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800054de:	b2 08       	st.h	r9[0x0],r8
800054e0:	39 08       	mov	r8,-112
800054e2:	ef 68 ff ef 	st.b	r7[-17],r8
800054e6:	37 f8       	mov	r8,127
800054e8:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800054ec:	fc 19 c0 00 	movh	r9,0xc000
800054f0:	ef 38 ff ef 	ld.ub	r8,r7[-17]
800054f4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800054f6:	fc 19 c0 20 	movh	r9,0xc020
800054fa:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800054fe:	b2 08       	st.h	r9[0x0],r8
80005500:	33 58       	mov	r8,53
80005502:	ef 68 ff f1 	st.b	r7[-15],r8
80005506:	33 88       	mov	r8,56
80005508:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000550c:	fc 19 c0 00 	movh	r9,0xc000
80005510:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80005514:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005516:	fc 19 c0 20 	movh	r9,0xc020
8000551a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000551e:	b2 08       	st.h	r9[0x0],r8
80005520:	33 68       	mov	r8,54
80005522:	ef 68 ff f3 	st.b	r7[-13],r8
80005526:	37 88       	mov	r8,120
80005528:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000552c:	fc 19 c0 00 	movh	r9,0xc000
80005530:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80005534:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005536:	fc 19 c0 20 	movh	r9,0xc020
8000553a:	ef 38 ff f2 	ld.ub	r8,r7[-14]
8000553e:	b2 08       	st.h	r9[0x0],r8
80005540:	31 d8       	mov	r8,29
80005542:	ef 68 ff f5 	st.b	r7[-11],r8
80005546:	30 78       	mov	r8,7
80005548:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000554c:	fc 19 c0 00 	movh	r9,0xc000
80005550:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005554:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005556:	fc 19 c0 20 	movh	r9,0xc020
8000555a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000555e:	b2 08       	st.h	r9[0x0],r8
80005560:	31 e8       	mov	r8,30
80005562:	ef 68 ff f7 	st.b	r7[-9],r8
80005566:	30 08       	mov	r8,0
80005568:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000556c:	fc 19 c0 00 	movh	r9,0xc000
80005570:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005574:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005576:	fc 19 c0 20 	movh	r9,0xc020
8000557a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000557e:	b2 08       	st.h	r9[0x0],r8
80005580:	31 f8       	mov	r8,31
80005582:	ef 68 ff f9 	st.b	r7[-7],r8
80005586:	30 48       	mov	r8,4
80005588:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000558c:	fc 19 c0 00 	movh	r9,0xc000
80005590:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80005594:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005596:	fc 19 c0 20 	movh	r9,0xc020
8000559a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000559e:	b2 08       	st.h	r9[0x0],r8
800055a0:	32 08       	mov	r8,32
800055a2:	ef 68 ff fb 	st.b	r7[-5],r8
800055a6:	34 08       	mov	r8,64
800055a8:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800055ac:	fc 19 c0 00 	movh	r9,0xc000
800055b0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800055b4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800055b6:	fc 19 c0 20 	movh	r9,0xc020
800055ba:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800055be:	b2 08       	st.h	r9[0x0],r8
800055c0:	34 48       	mov	r8,68
800055c2:	ef 68 ff fd 	st.b	r7[-3],r8
800055c6:	33 88       	mov	r8,56
800055c8:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800055cc:	fc 19 c0 00 	movh	r9,0xc000
800055d0:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800055d4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800055d6:	fc 19 c0 20 	movh	r9,0xc020
800055da:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800055de:	b2 08       	st.h	r9[0x0],r8
800055e0:	34 58       	mov	r8,69
800055e2:	ef 68 ff ff 	st.b	r7[-1],r8
800055e6:	31 28       	mov	r8,18
800055e8:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800055ec:	fc 19 c0 00 	movh	r9,0xc000
800055f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800055f4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800055f6:	fc 19 c0 20 	movh	r9,0xc020
800055fa:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800055fe:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL4, 0x00 );
  et024006_WriteRegister( HIMAX_POWERCTRL5, 0x04 );
  et024006_WriteRegister( HIMAX_POWERCTRL6, 0x40 );
  et024006_WriteRegister( HIMAX_VCOMCTRL2, 0x38 );
  et024006_WriteRegister( HIMAX_VCOMCTRL3, 0x12 );
}
80005600:	2f ad       	sub	sp,-24
80005602:	e3 cd 80 80 	ldm	sp++,r7,pc

80005606 <et024006_InterfaceSettings>:
/*! \brief Sets display interface.
 *
 * Configures screen orientation and color mode.
 */
static void et024006_InterfaceSettings(void)
{
80005606:	eb cd 40 80 	pushm	r7,lr
8000560a:	1a 97       	mov	r7,sp
8000560c:	20 1d       	sub	sp,4
8000560e:	31 68       	mov	r8,22
80005610:	ef 68 ff ff 	st.b	r7[-1],r8
80005614:	36 88       	mov	r8,104
80005616:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000561a:	fc 19 c0 00 	movh	r9,0xc000
8000561e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005622:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005624:	fc 19 c0 20 	movh	r9,0xc020
80005628:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000562c:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_MEMACCESSCTRL,
    (1 << HIMAX_MX)
    | (1 << HIMAX_MV)
    | (1 << HIMAX_BGR) );

}
8000562e:	2f fd       	sub	sp,-4
80005630:	e3 cd 80 80 	ldm	sp++,r7,pc

80005634 <et024006_PowerUp>:
/*! \brief Power up display.
 *
 * Turns on DC/DC converters.
 */
static void et024006_PowerUp(void)
{
80005634:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005638:	1a 97       	mov	r7,sp
8000563a:	fa cd 01 24 	sub	sp,sp,292
  cpu_delay_ms( 10, tft_data.cpu_hz );
8000563e:	fe f8 07 22 	ld.w	r8,pc[1826]
80005642:	70 09       	ld.w	r9,r8[0x0]
80005644:	30 a8       	mov	r8,10
80005646:	ef 48 ff 54 	st.w	r7[-172],r8
8000564a:	ef 49 ff 50 	st.w	r7[-176],r9
8000564e:	ee f8 ff 54 	ld.w	r8,r7[-172]
80005652:	ef 48 ff 5c 	st.w	r7[-164],r8
80005656:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000565a:	ef 48 ff 58 	st.w	r7[-168],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000565e:	ee f2 ff 5c 	ld.w	r2,r7[-164]
80005662:	30 03       	mov	r3,0
80005664:	ee fa ff 58 	ld.w	r10,r7[-168]
80005668:	30 0b       	mov	r11,0
8000566a:	e6 0a 02 49 	mul	r9,r3,r10
8000566e:	f6 02 02 48 	mul	r8,r11,r2
80005672:	10 09       	add	r9,r8
80005674:	e4 0a 06 4a 	mulu.d	r10,r2,r10
80005678:	16 09       	add	r9,r11
8000567a:	12 9b       	mov	r11,r9
8000567c:	e0 68 03 e7 	mov	r8,999
80005680:	30 09       	mov	r9,0
80005682:	10 0a       	add	r10,r8
80005684:	f6 09 00 4b 	adc	r11,r11,r9
80005688:	e0 68 03 e8 	mov	r8,1000
8000568c:	30 09       	mov	r9,0
8000568e:	f0 1f 01 b6 	mcall	80005d64 <et024006_PowerUp+0x730>
80005692:	14 98       	mov	r8,r10
80005694:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005696:	ef 48 ff 64 	st.w	r7[-156],r8
8000569a:	ee c8 00 ec 	sub	r8,r7,236
8000569e:	ef 48 ff 60 	st.w	r7[-160],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800056a2:	e1 b8 00 42 	mfsr	r8,0x108
800056a6:	10 99       	mov	r9,r8
800056a8:	ee f8 ff 60 	ld.w	r8,r7[-160]
800056ac:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800056ae:	ee f8 ff 60 	ld.w	r8,r7[-160]
800056b2:	70 09       	ld.w	r9,r8[0x0]
800056b4:	ee f8 ff 64 	ld.w	r8,r7[-156]
800056b8:	10 09       	add	r9,r8
800056ba:	ee f8 ff 60 	ld.w	r8,r7[-160]
800056be:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800056c0:	ee f9 ff 60 	ld.w	r9,r7[-160]
800056c4:	30 08       	mov	r8,0
800056c6:	f3 68 00 08 	st.b	r9[8],r8
800056ca:	ee c8 00 ec 	sub	r8,r7,236
800056ce:	ef 48 ff 68 	st.w	r7[-152],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800056d2:	e1 b8 00 42 	mfsr	r8,0x108
800056d6:	ef 48 ff 6c 	st.w	r7[-148],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800056da:	ee f8 ff 68 	ld.w	r8,r7[-152]
800056de:	f1 39 00 08 	ld.ub	r9,r8[8]
800056e2:	30 28       	mov	r8,2
800056e4:	f0 09 18 00 	cp.b	r9,r8
800056e8:	c0 31       	brne	800056ee <et024006_PowerUp+0xba>
    return false;
800056ea:	30 08       	mov	r8,0
800056ec:	c4 38       	rjmp	80005772 <et024006_PowerUp+0x13e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800056ee:	ee f8 ff 68 	ld.w	r8,r7[-152]
800056f2:	f1 39 00 08 	ld.ub	r9,r8[8]
800056f6:	30 18       	mov	r8,1
800056f8:	f0 09 18 00 	cp.b	r9,r8
800056fc:	c0 31       	brne	80005702 <et024006_PowerUp+0xce>
    return true;
800056fe:	30 18       	mov	r8,1
80005700:	c3 98       	rjmp	80005772 <et024006_PowerUp+0x13e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005702:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005706:	70 09       	ld.w	r9,r8[0x0]
80005708:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000570c:	70 18       	ld.w	r8,r8[0x4]
8000570e:	10 39       	cp.w	r9,r8
80005710:	e0 88 00 1a 	brls	80005744 <et024006_PowerUp+0x110>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005714:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005718:	70 09       	ld.w	r9,r8[0x0]
8000571a:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000571e:	12 38       	cp.w	r8,r9
80005720:	c1 02       	brcc	80005740 <et024006_PowerUp+0x10c>
80005722:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005726:	70 19       	ld.w	r9,r8[0x4]
80005728:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000572c:	12 38       	cp.w	r8,r9
8000572e:	e0 88 00 09 	brls	80005740 <et024006_PowerUp+0x10c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005732:	ee f9 ff 68 	ld.w	r9,r7[-152]
80005736:	30 18       	mov	r8,1
80005738:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000573c:	30 18       	mov	r8,1
8000573e:	c1 a8       	rjmp	80005772 <et024006_PowerUp+0x13e>
    }
    return false;
80005740:	30 08       	mov	r8,0
80005742:	c1 88       	rjmp	80005772 <et024006_PowerUp+0x13e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005744:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005748:	70 09       	ld.w	r9,r8[0x0]
8000574a:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000574e:	12 38       	cp.w	r8,r9
80005750:	c0 93       	brcs	80005762 <et024006_PowerUp+0x12e>
80005752:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005756:	70 19       	ld.w	r9,r8[0x4]
80005758:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000575c:	12 38       	cp.w	r8,r9
8000575e:	e0 88 00 09 	brls	80005770 <et024006_PowerUp+0x13c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005762:	ee f9 ff 68 	ld.w	r9,r7[-152]
80005766:	30 18       	mov	r8,1
80005768:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000576c:	30 18       	mov	r8,1
8000576e:	c0 28       	rjmp	80005772 <et024006_PowerUp+0x13e>
    }
    return false;
80005770:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005772:	58 08       	cp.w	r8,0
80005774:	ca b0       	breq	800056ca <et024006_PowerUp+0x96>
80005776:	31 c8       	mov	r8,28
80005778:	ef 68 ff 73 	st.b	r7[-141],r8
8000577c:	30 48       	mov	r8,4
8000577e:	ef 68 ff 72 	st.b	r7[-142],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005782:	fc 19 c0 00 	movh	r9,0xc000
80005786:	ef 38 ff 73 	ld.ub	r8,r7[-141]
8000578a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000578c:	fc 19 c0 20 	movh	r9,0xc020
80005790:	ef 38 ff 72 	ld.ub	r8,r7[-142]
80005794:	b2 08       	st.h	r9[0x0],r8
static void et024006_PowerUp(void)
{
  cpu_delay_ms( 10, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
80005796:	fe f8 05 ca 	ld.w	r8,pc[1482]
8000579a:	70 09       	ld.w	r9,r8[0x0]
8000579c:	31 48       	mov	r8,20
8000579e:	ef 48 ff 78 	st.w	r7[-136],r8
800057a2:	ef 49 ff 74 	st.w	r7[-140],r9
800057a6:	ee f8 ff 78 	ld.w	r8,r7[-136]
800057aa:	ef 48 ff 80 	st.w	r7[-128],r8
800057ae:	ee f8 ff 74 	ld.w	r8,r7[-140]
800057b2:	ef 48 ff 7c 	st.w	r7[-132],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800057b6:	ee fc ff 80 	ld.w	r12,r7[-128]
800057ba:	ef 4c fe e0 	st.w	r7[-288],r12
800057be:	30 0b       	mov	r11,0
800057c0:	ef 4b fe dc 	st.w	r7[-292],r11
800057c4:	ee f0 ff 7c 	ld.w	r0,r7[-132]
800057c8:	30 01       	mov	r1,0
800057ca:	ee f9 fe dc 	ld.w	r9,r7[-292]
800057ce:	a1 39       	mul	r9,r0
800057d0:	ee fa fe e0 	ld.w	r10,r7[-288]
800057d4:	e2 0a 02 48 	mul	r8,r1,r10
800057d8:	10 09       	add	r9,r8
800057da:	ee f8 fe e0 	ld.w	r8,r7[-288]
800057de:	f0 00 06 4a 	mulu.d	r10,r8,r0
800057e2:	16 09       	add	r9,r11
800057e4:	12 9b       	mov	r11,r9
800057e6:	e0 68 03 e7 	mov	r8,999
800057ea:	30 09       	mov	r9,0
800057ec:	10 0a       	add	r10,r8
800057ee:	f6 09 00 4b 	adc	r11,r11,r9
800057f2:	e0 68 03 e8 	mov	r8,1000
800057f6:	30 09       	mov	r9,0
800057f8:	f0 1f 01 5b 	mcall	80005d64 <et024006_PowerUp+0x730>
800057fc:	14 98       	mov	r8,r10
800057fe:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005800:	ef 48 ff 88 	st.w	r7[-120],r8
80005804:	ee c8 00 e0 	sub	r8,r7,224
80005808:	ef 48 ff 84 	st.w	r7[-124],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000580c:	e1 b8 00 42 	mfsr	r8,0x108
80005810:	10 99       	mov	r9,r8
80005812:	ee f8 ff 84 	ld.w	r8,r7[-124]
80005816:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005818:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000581c:	70 09       	ld.w	r9,r8[0x0]
8000581e:	ee f8 ff 88 	ld.w	r8,r7[-120]
80005822:	10 09       	add	r9,r8
80005824:	ee f8 ff 84 	ld.w	r8,r7[-124]
80005828:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000582a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000582e:	30 08       	mov	r8,0
80005830:	f3 68 00 08 	st.b	r9[8],r8
80005834:	ee c8 00 e0 	sub	r8,r7,224
80005838:	ef 48 ff 8c 	st.w	r7[-116],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000583c:	e1 b8 00 42 	mfsr	r8,0x108
80005840:	ef 48 ff 90 	st.w	r7[-112],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005844:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005848:	f1 39 00 08 	ld.ub	r9,r8[8]
8000584c:	30 28       	mov	r8,2
8000584e:	f0 09 18 00 	cp.b	r9,r8
80005852:	c0 31       	brne	80005858 <et024006_PowerUp+0x224>
    return false;
80005854:	30 08       	mov	r8,0
80005856:	c4 38       	rjmp	800058dc <et024006_PowerUp+0x2a8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005858:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000585c:	f1 39 00 08 	ld.ub	r9,r8[8]
80005860:	30 18       	mov	r8,1
80005862:	f0 09 18 00 	cp.b	r9,r8
80005866:	c0 31       	brne	8000586c <et024006_PowerUp+0x238>
    return true;
80005868:	30 18       	mov	r8,1
8000586a:	c3 98       	rjmp	800058dc <et024006_PowerUp+0x2a8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000586c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005870:	70 09       	ld.w	r9,r8[0x0]
80005872:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005876:	70 18       	ld.w	r8,r8[0x4]
80005878:	10 39       	cp.w	r9,r8
8000587a:	e0 88 00 1a 	brls	800058ae <et024006_PowerUp+0x27a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000587e:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005882:	70 08       	ld.w	r8,r8[0x0]
80005884:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005888:	10 39       	cp.w	r9,r8
8000588a:	c1 02       	brcc	800058aa <et024006_PowerUp+0x276>
8000588c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005890:	70 18       	ld.w	r8,r8[0x4]
80005892:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005896:	10 39       	cp.w	r9,r8
80005898:	e0 88 00 09 	brls	800058aa <et024006_PowerUp+0x276>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000589c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800058a0:	30 18       	mov	r8,1
800058a2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800058a6:	30 18       	mov	r8,1
800058a8:	c1 a8       	rjmp	800058dc <et024006_PowerUp+0x2a8>
    }
    return false;
800058aa:	30 08       	mov	r8,0
800058ac:	c1 88       	rjmp	800058dc <et024006_PowerUp+0x2a8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800058ae:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800058b2:	70 08       	ld.w	r8,r8[0x0]
800058b4:	ee f9 ff 90 	ld.w	r9,r7[-112]
800058b8:	10 39       	cp.w	r9,r8
800058ba:	c0 93       	brcs	800058cc <et024006_PowerUp+0x298>
800058bc:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800058c0:	70 18       	ld.w	r8,r8[0x4]
800058c2:	ee f9 ff 90 	ld.w	r9,r7[-112]
800058c6:	10 39       	cp.w	r9,r8
800058c8:	e0 88 00 09 	brls	800058da <et024006_PowerUp+0x2a6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800058cc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800058d0:	30 18       	mov	r8,1
800058d2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800058d6:	30 18       	mov	r8,1
800058d8:	c0 28       	rjmp	800058dc <et024006_PowerUp+0x2a8>
    }
    return false;
800058da:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800058dc:	58 08       	cp.w	r8,0
800058de:	ca b0       	breq	80005834 <et024006_PowerUp+0x200>
800058e0:	34 38       	mov	r8,67
800058e2:	ef 68 ff 97 	st.b	r7[-105],r8
800058e6:	38 08       	mov	r8,-128
800058e8:	ef 68 ff 96 	st.b	r7[-106],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800058ec:	fc 19 c0 00 	movh	r9,0xc000
800058f0:	ef 38 ff 97 	ld.ub	r8,r7[-105]
800058f4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800058f6:	fc 19 c0 20 	movh	r9,0xc020
800058fa:	ef 38 ff 96 	ld.ub	r8,r7[-106]
800058fe:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
80005900:	fe f8 04 60 	ld.w	r8,pc[1120]
80005904:	70 08       	ld.w	r8,r8[0x0]
80005906:	30 59       	mov	r9,5
80005908:	ef 49 ff 9c 	st.w	r7[-100],r9
8000590c:	ef 48 ff 98 	st.w	r7[-104],r8
80005910:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80005914:	ef 48 ff a4 	st.w	r7[-92],r8
80005918:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000591c:	ef 48 ff a0 	st.w	r7[-96],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005920:	ee fc ff a4 	ld.w	r12,r7[-92]
80005924:	ef 4c fe f0 	st.w	r7[-272],r12
80005928:	30 0b       	mov	r11,0
8000592a:	ef 4b fe ec 	st.w	r7[-276],r11
8000592e:	ee fa ff a0 	ld.w	r10,r7[-96]
80005932:	ef 4a fe e8 	st.w	r7[-280],r10
80005936:	30 09       	mov	r9,0
80005938:	ef 49 fe e4 	st.w	r7[-284],r9
8000593c:	ee fa fe ec 	ld.w	r10,r7[-276]
80005940:	ee f8 fe e8 	ld.w	r8,r7[-280]
80005944:	b1 3a       	mul	r10,r8
80005946:	ee f8 fe e4 	ld.w	r8,r7[-284]
8000594a:	ee fc fe f0 	ld.w	r12,r7[-272]
8000594e:	b9 38       	mul	r8,r12
80005950:	10 0a       	add	r10,r8
80005952:	ee fb fe f0 	ld.w	r11,r7[-272]
80005956:	ee fc fe e8 	ld.w	r12,r7[-280]
8000595a:	f6 0c 06 48 	mulu.d	r8,r11,r12
8000595e:	12 0a       	add	r10,r9
80005960:	14 99       	mov	r9,r10
80005962:	e0 6a 03 e7 	mov	r10,999
80005966:	30 0b       	mov	r11,0
80005968:	f0 0a 00 0a 	add	r10,r8,r10
8000596c:	f2 0b 00 4b 	adc	r11,r9,r11
80005970:	e0 68 03 e8 	mov	r8,1000
80005974:	30 09       	mov	r9,0
80005976:	f0 1f 00 fc 	mcall	80005d64 <et024006_PowerUp+0x730>
8000597a:	14 98       	mov	r8,r10
8000597c:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000597e:	ef 48 ff ac 	st.w	r7[-84],r8
80005982:	ee c8 00 d4 	sub	r8,r7,212
80005986:	ef 48 ff a8 	st.w	r7[-88],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000598a:	e1 b8 00 42 	mfsr	r8,0x108
8000598e:	10 99       	mov	r9,r8
80005990:	ee f8 ff a8 	ld.w	r8,r7[-88]
80005994:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005996:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000599a:	70 09       	ld.w	r9,r8[0x0]
8000599c:	ee f8 ff ac 	ld.w	r8,r7[-84]
800059a0:	10 09       	add	r9,r8
800059a2:	ee f8 ff a8 	ld.w	r8,r7[-88]
800059a6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800059a8:	ee f9 ff a8 	ld.w	r9,r7[-88]
800059ac:	30 08       	mov	r8,0
800059ae:	f3 68 00 08 	st.b	r9[8],r8
800059b2:	ee c8 00 d4 	sub	r8,r7,212
800059b6:	ef 48 ff b0 	st.w	r7[-80],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800059ba:	e1 b8 00 42 	mfsr	r8,0x108
800059be:	ef 48 ff b4 	st.w	r7[-76],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800059c2:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059c6:	f1 39 00 08 	ld.ub	r9,r8[8]
800059ca:	30 28       	mov	r8,2
800059cc:	f0 09 18 00 	cp.b	r9,r8
800059d0:	c0 31       	brne	800059d6 <et024006_PowerUp+0x3a2>
    return false;
800059d2:	30 08       	mov	r8,0
800059d4:	c4 38       	rjmp	80005a5a <et024006_PowerUp+0x426>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800059d6:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059da:	f1 39 00 08 	ld.ub	r9,r8[8]
800059de:	30 18       	mov	r8,1
800059e0:	f0 09 18 00 	cp.b	r9,r8
800059e4:	c0 31       	brne	800059ea <et024006_PowerUp+0x3b6>
    return true;
800059e6:	30 18       	mov	r8,1
800059e8:	c3 98       	rjmp	80005a5a <et024006_PowerUp+0x426>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800059ea:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059ee:	70 09       	ld.w	r9,r8[0x0]
800059f0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059f4:	70 18       	ld.w	r8,r8[0x4]
800059f6:	10 39       	cp.w	r9,r8
800059f8:	e0 88 00 1a 	brls	80005a2c <et024006_PowerUp+0x3f8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800059fc:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a00:	70 08       	ld.w	r8,r8[0x0]
80005a02:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005a06:	10 39       	cp.w	r9,r8
80005a08:	c1 02       	brcc	80005a28 <et024006_PowerUp+0x3f4>
80005a0a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a0e:	70 18       	ld.w	r8,r8[0x4]
80005a10:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005a14:	10 39       	cp.w	r9,r8
80005a16:	e0 88 00 09 	brls	80005a28 <et024006_PowerUp+0x3f4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005a1a:	ee f9 ff b0 	ld.w	r9,r7[-80]
80005a1e:	30 18       	mov	r8,1
80005a20:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005a24:	30 18       	mov	r8,1
80005a26:	c1 a8       	rjmp	80005a5a <et024006_PowerUp+0x426>
    }
    return false;
80005a28:	30 08       	mov	r8,0
80005a2a:	c1 88       	rjmp	80005a5a <et024006_PowerUp+0x426>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005a2c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a30:	70 08       	ld.w	r8,r8[0x0]
80005a32:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005a36:	10 39       	cp.w	r9,r8
80005a38:	c0 93       	brcs	80005a4a <et024006_PowerUp+0x416>
80005a3a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a3e:	70 18       	ld.w	r8,r8[0x4]
80005a40:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005a44:	10 39       	cp.w	r9,r8
80005a46:	e0 88 00 09 	brls	80005a58 <et024006_PowerUp+0x424>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005a4a:	ee f9 ff b0 	ld.w	r9,r7[-80]
80005a4e:	30 18       	mov	r8,1
80005a50:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005a54:	30 18       	mov	r8,1
80005a56:	c0 28       	rjmp	80005a5a <et024006_PowerUp+0x426>
    }
    return false;
80005a58:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005a5a:	58 08       	cp.w	r8,0
80005a5c:	ca b0       	breq	800059b2 <et024006_PowerUp+0x37e>
80005a5e:	31 b8       	mov	r8,27
80005a60:	ef 68 ff bb 	st.b	r7[-69],r8
80005a64:	30 88       	mov	r8,8
80005a66:	ef 68 ff ba 	st.b	r7[-70],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005a6a:	fc 19 c0 00 	movh	r9,0xc000
80005a6e:	ef 38 ff bb 	ld.ub	r8,r7[-69]
80005a72:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005a74:	fc 19 c0 20 	movh	r9,0xc020
80005a78:	ef 38 ff ba 	ld.ub	r8,r7[-70]
80005a7c:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_DK) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
80005a7e:	fe f8 02 e2 	ld.w	r8,pc[738]
80005a82:	70 08       	ld.w	r8,r8[0x0]
80005a84:	32 89       	mov	r9,40
80005a86:	ef 49 ff c0 	st.w	r7[-64],r9
80005a8a:	ef 48 ff bc 	st.w	r7[-68],r8
80005a8e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005a92:	ef 48 ff c8 	st.w	r7[-56],r8
80005a96:	ee f8 ff bc 	ld.w	r8,r7[-68]
80005a9a:	ef 48 ff c4 	st.w	r7[-60],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005a9e:	ee fb ff c8 	ld.w	r11,r7[-56]
80005aa2:	ef 4b ff 00 	st.w	r7[-256],r11
80005aa6:	30 0a       	mov	r10,0
80005aa8:	ef 4a fe fc 	st.w	r7[-260],r10
80005aac:	ee f9 ff c4 	ld.w	r9,r7[-60]
80005ab0:	ef 49 fe f8 	st.w	r7[-264],r9
80005ab4:	30 08       	mov	r8,0
80005ab6:	ef 48 fe f4 	st.w	r7[-268],r8
80005aba:	ee fa fe fc 	ld.w	r10,r7[-260]
80005abe:	ee fc fe f8 	ld.w	r12,r7[-264]
80005ac2:	b9 3a       	mul	r10,r12
80005ac4:	ee f8 fe f4 	ld.w	r8,r7[-268]
80005ac8:	ee fb ff 00 	ld.w	r11,r7[-256]
80005acc:	b7 38       	mul	r8,r11
80005ace:	10 0a       	add	r10,r8
80005ad0:	ee fc ff 00 	ld.w	r12,r7[-256]
80005ad4:	ee fb fe f8 	ld.w	r11,r7[-264]
80005ad8:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005adc:	12 0a       	add	r10,r9
80005ade:	14 99       	mov	r9,r10
80005ae0:	e0 6a 03 e7 	mov	r10,999
80005ae4:	30 0b       	mov	r11,0
80005ae6:	f0 0a 00 0a 	add	r10,r8,r10
80005aea:	f2 0b 00 4b 	adc	r11,r9,r11
80005aee:	e0 68 03 e8 	mov	r8,1000
80005af2:	30 09       	mov	r9,0
80005af4:	f0 1f 00 9c 	mcall	80005d64 <et024006_PowerUp+0x730>
80005af8:	14 98       	mov	r8,r10
80005afa:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005afc:	ef 48 ff d0 	st.w	r7[-48],r8
80005b00:	ee c8 00 c8 	sub	r8,r7,200
80005b04:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005b08:	e1 b8 00 42 	mfsr	r8,0x108
80005b0c:	10 99       	mov	r9,r8
80005b0e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005b12:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005b14:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005b18:	70 09       	ld.w	r9,r8[0x0]
80005b1a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005b1e:	10 09       	add	r9,r8
80005b20:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005b24:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005b26:	ee f9 ff cc 	ld.w	r9,r7[-52]
80005b2a:	30 08       	mov	r8,0
80005b2c:	f3 68 00 08 	st.b	r9[8],r8
80005b30:	ee c8 00 c8 	sub	r8,r7,200
80005b34:	ef 48 ff d4 	st.w	r7[-44],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005b38:	e1 b8 00 42 	mfsr	r8,0x108
80005b3c:	ef 48 ff d8 	st.w	r7[-40],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005b40:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b44:	f1 39 00 08 	ld.ub	r9,r8[8]
80005b48:	30 28       	mov	r8,2
80005b4a:	f0 09 18 00 	cp.b	r9,r8
80005b4e:	c0 31       	brne	80005b54 <et024006_PowerUp+0x520>
    return false;
80005b50:	30 08       	mov	r8,0
80005b52:	c4 38       	rjmp	80005bd8 <et024006_PowerUp+0x5a4>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005b54:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b58:	f1 39 00 08 	ld.ub	r9,r8[8]
80005b5c:	30 18       	mov	r8,1
80005b5e:	f0 09 18 00 	cp.b	r9,r8
80005b62:	c0 31       	brne	80005b68 <et024006_PowerUp+0x534>
    return true;
80005b64:	30 18       	mov	r8,1
80005b66:	c3 98       	rjmp	80005bd8 <et024006_PowerUp+0x5a4>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005b68:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b6c:	70 09       	ld.w	r9,r8[0x0]
80005b6e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b72:	70 18       	ld.w	r8,r8[0x4]
80005b74:	10 39       	cp.w	r9,r8
80005b76:	e0 88 00 1a 	brls	80005baa <et024006_PowerUp+0x576>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005b7a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b7e:	70 08       	ld.w	r8,r8[0x0]
80005b80:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005b84:	10 39       	cp.w	r9,r8
80005b86:	c1 02       	brcc	80005ba6 <et024006_PowerUp+0x572>
80005b88:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b8c:	70 18       	ld.w	r8,r8[0x4]
80005b8e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005b92:	10 39       	cp.w	r9,r8
80005b94:	e0 88 00 09 	brls	80005ba6 <et024006_PowerUp+0x572>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005b98:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005b9c:	30 18       	mov	r8,1
80005b9e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005ba2:	30 18       	mov	r8,1
80005ba4:	c1 a8       	rjmp	80005bd8 <et024006_PowerUp+0x5a4>
    }
    return false;
80005ba6:	30 08       	mov	r8,0
80005ba8:	c1 88       	rjmp	80005bd8 <et024006_PowerUp+0x5a4>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005baa:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005bae:	70 08       	ld.w	r8,r8[0x0]
80005bb0:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005bb4:	10 39       	cp.w	r9,r8
80005bb6:	c0 93       	brcs	80005bc8 <et024006_PowerUp+0x594>
80005bb8:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005bbc:	70 18       	ld.w	r8,r8[0x4]
80005bbe:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005bc2:	10 39       	cp.w	r9,r8
80005bc4:	e0 88 00 09 	brls	80005bd6 <et024006_PowerUp+0x5a2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005bc8:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005bcc:	30 18       	mov	r8,1
80005bce:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005bd2:	30 18       	mov	r8,1
80005bd4:	c0 28       	rjmp	80005bd8 <et024006_PowerUp+0x5a4>
    }
    return false;
80005bd6:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005bd8:	58 08       	cp.w	r8,0
80005bda:	ca b0       	breq	80005b30 <et024006_PowerUp+0x4fc>
80005bdc:	31 b8       	mov	r8,27
80005bde:	ef 68 ff df 	st.b	r7[-33],r8
80005be2:	31 08       	mov	r8,16
80005be4:	ef 68 ff de 	st.b	r7[-34],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005be8:	fc 19 c0 00 	movh	r9,0xc000
80005bec:	ef 38 ff df 	ld.ub	r8,r7[-33]
80005bf0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005bf2:	fc 19 c0 20 	movh	r9,0xc020
80005bf6:	ef 38 ff de 	ld.ub	r8,r7[-34]
80005bfa:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_PON) );

  // In case the et024006_DisplayOn function is called right after
  cpu_delay_ms( 40, tft_data.cpu_hz );
80005bfc:	4d 98       	lddpc	r8,80005d60 <et024006_PowerUp+0x72c>
80005bfe:	70 08       	ld.w	r8,r8[0x0]
80005c00:	32 89       	mov	r9,40
80005c02:	ef 49 ff e4 	st.w	r7[-28],r9
80005c06:	ef 48 ff e0 	st.w	r7[-32],r8
80005c0a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005c0e:	ef 48 ff ec 	st.w	r7[-20],r8
80005c12:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005c16:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005c1a:	ee fa ff ec 	ld.w	r10,r7[-20]
80005c1e:	ef 4a ff 10 	st.w	r7[-240],r10
80005c22:	30 09       	mov	r9,0
80005c24:	ef 49 ff 0c 	st.w	r7[-244],r9
80005c28:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005c2c:	ef 48 ff 08 	st.w	r7[-248],r8
80005c30:	30 0c       	mov	r12,0
80005c32:	ef 4c ff 04 	st.w	r7[-252],r12
80005c36:	ee fa ff 0c 	ld.w	r10,r7[-244]
80005c3a:	ee fb ff 08 	ld.w	r11,r7[-248]
80005c3e:	b7 3a       	mul	r10,r11
80005c40:	ee f8 ff 04 	ld.w	r8,r7[-252]
80005c44:	ee f9 ff 10 	ld.w	r9,r7[-240]
80005c48:	b3 38       	mul	r8,r9
80005c4a:	10 0a       	add	r10,r8
80005c4c:	ee fc ff 10 	ld.w	r12,r7[-240]
80005c50:	ee fb ff 08 	ld.w	r11,r7[-248]
80005c54:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005c58:	12 0a       	add	r10,r9
80005c5a:	14 99       	mov	r9,r10
80005c5c:	e0 6a 03 e7 	mov	r10,999
80005c60:	30 0b       	mov	r11,0
80005c62:	f0 0a 00 0a 	add	r10,r8,r10
80005c66:	f2 0b 00 4b 	adc	r11,r9,r11
80005c6a:	e0 68 03 e8 	mov	r8,1000
80005c6e:	30 09       	mov	r9,0
80005c70:	f0 1f 00 3d 	mcall	80005d64 <et024006_PowerUp+0x730>
80005c74:	14 98       	mov	r8,r10
80005c76:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005c78:	ef 48 ff f4 	st.w	r7[-12],r8
80005c7c:	ee c8 00 bc 	sub	r8,r7,188
80005c80:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005c84:	e1 b8 00 42 	mfsr	r8,0x108
80005c88:	10 99       	mov	r9,r8
80005c8a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005c8e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005c90:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005c94:	70 09       	ld.w	r9,r8[0x0]
80005c96:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005c9a:	10 09       	add	r9,r8
80005c9c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005ca0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005ca2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005ca6:	30 08       	mov	r8,0
80005ca8:	f3 68 00 08 	st.b	r9[8],r8
80005cac:	ee c8 00 bc 	sub	r8,r7,188
80005cb0:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005cb4:	e1 b8 00 42 	mfsr	r8,0x108
80005cb8:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005cbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cc0:	f1 39 00 08 	ld.ub	r9,r8[8]
80005cc4:	30 28       	mov	r8,2
80005cc6:	f0 09 18 00 	cp.b	r9,r8
80005cca:	c0 31       	brne	80005cd0 <et024006_PowerUp+0x69c>
    return false;
80005ccc:	30 08       	mov	r8,0
80005cce:	c4 38       	rjmp	80005d54 <et024006_PowerUp+0x720>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005cd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cd4:	f1 39 00 08 	ld.ub	r9,r8[8]
80005cd8:	30 18       	mov	r8,1
80005cda:	f0 09 18 00 	cp.b	r9,r8
80005cde:	c0 31       	brne	80005ce4 <et024006_PowerUp+0x6b0>
    return true;
80005ce0:	30 18       	mov	r8,1
80005ce2:	c3 98       	rjmp	80005d54 <et024006_PowerUp+0x720>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005ce4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ce8:	70 09       	ld.w	r9,r8[0x0]
80005cea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cee:	70 18       	ld.w	r8,r8[0x4]
80005cf0:	10 39       	cp.w	r9,r8
80005cf2:	e0 88 00 1a 	brls	80005d26 <et024006_PowerUp+0x6f2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005cf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cfa:	70 08       	ld.w	r8,r8[0x0]
80005cfc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d00:	10 39       	cp.w	r9,r8
80005d02:	c1 02       	brcc	80005d22 <et024006_PowerUp+0x6ee>
80005d04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d08:	70 18       	ld.w	r8,r8[0x4]
80005d0a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d0e:	10 39       	cp.w	r9,r8
80005d10:	e0 88 00 09 	brls	80005d22 <et024006_PowerUp+0x6ee>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005d14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005d18:	30 18       	mov	r8,1
80005d1a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005d1e:	30 18       	mov	r8,1
80005d20:	c1 a8       	rjmp	80005d54 <et024006_PowerUp+0x720>
    }
    return false;
80005d22:	30 08       	mov	r8,0
80005d24:	c1 88       	rjmp	80005d54 <et024006_PowerUp+0x720>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005d26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d2a:	70 08       	ld.w	r8,r8[0x0]
80005d2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d30:	10 39       	cp.w	r9,r8
80005d32:	c0 93       	brcs	80005d44 <et024006_PowerUp+0x710>
80005d34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d38:	70 18       	ld.w	r8,r8[0x4]
80005d3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d3e:	10 39       	cp.w	r9,r8
80005d40:	e0 88 00 09 	brls	80005d52 <et024006_PowerUp+0x71e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005d44:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005d48:	30 18       	mov	r8,1
80005d4a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005d4e:	30 18       	mov	r8,1
80005d50:	c0 28       	rjmp	80005d54 <et024006_PowerUp+0x720>
    }
    return false;
80005d52:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005d54:	58 08       	cp.w	r8,0
80005d56:	ca b0       	breq	80005cac <et024006_PowerUp+0x678>
}
80005d58:	2b 7d       	sub	sp,-292
80005d5a:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005d5e:	00 00       	add	r0,r0
80005d60:	00 00       	add	r0,r0
80005d62:	06 34       	cp.w	r4,r3
80005d64:	80 00       	ld.sh	r0,r0[0x0]
80005d66:	e3 f8 eb cd 	st.wqs	r1[0x734],r8

80005d68 <et024006_PowerOn>:


/*! \brief Turns the display on.
 */
static void et024006_PowerOn( void )
{
80005d68:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005d6c:	1a 97       	mov	r7,sp
80005d6e:	21 9d       	sub	sp,100
80005d70:	32 6c       	mov	r12,38
80005d72:	ef 6c ff b7 	st.b	r7[-73],r12
80005d76:	30 4c       	mov	r12,4
80005d78:	ef 6c ff b6 	st.b	r7[-74],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005d7c:	fc 1e c0 00 	movh	lr,0xc000
80005d80:	ef 3c ff b7 	ld.ub	r12,r7[-73]
80005d84:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005d86:	fc 1e c0 20 	movh	lr,0xc020
80005d8a:	ef 3c ff b6 	ld.ub	r12,r7[-74]
80005d8e:	bc 0c       	st.h	lr[0x0],r12
 */
static void et024006_PowerOn( void )
{
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_D0) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
80005d90:	fe fc 02 e0 	ld.w	r12,pc[736]
80005d94:	78 0c       	ld.w	r12,r12[0x0]
80005d96:	32 8e       	mov	lr,40
80005d98:	ef 4e ff bc 	st.w	r7[-68],lr
80005d9c:	ef 4c ff b8 	st.w	r7[-72],r12
80005da0:	ee fc ff bc 	ld.w	r12,r7[-68]
80005da4:	ef 4c ff c4 	st.w	r7[-60],r12
80005da8:	ee fc ff b8 	ld.w	r12,r7[-72]
80005dac:	ef 4c ff c0 	st.w	r7[-64],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005db0:	ee fa ff c4 	ld.w	r10,r7[-60]
80005db4:	30 0b       	mov	r11,0
80005db6:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005dba:	30 09       	mov	r9,0
80005dbc:	f6 08 02 4c 	mul	r12,r11,r8
80005dc0:	f2 0a 02 4e 	mul	lr,r9,r10
80005dc4:	1c 0c       	add	r12,lr
80005dc6:	f4 08 06 48 	mulu.d	r8,r10,r8
80005dca:	12 0c       	add	r12,r9
80005dcc:	18 99       	mov	r9,r12
80005dce:	e0 6a 03 e7 	mov	r10,999
80005dd2:	30 0b       	mov	r11,0
80005dd4:	f0 0a 00 0a 	add	r10,r8,r10
80005dd8:	f2 0b 00 4b 	adc	r11,r9,r11
80005ddc:	e0 68 03 e8 	mov	r8,1000
80005de0:	30 09       	mov	r9,0
80005de2:	f0 1f 00 a5 	mcall	80006074 <et024006_PowerOn+0x30c>
80005de6:	14 98       	mov	r8,r10
80005de8:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005dea:	ef 48 ff cc 	st.w	r7[-52],r8
80005dee:	ee c8 00 64 	sub	r8,r7,100
80005df2:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005df6:	e1 b8 00 42 	mfsr	r8,0x108
80005dfa:	10 99       	mov	r9,r8
80005dfc:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005e00:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005e02:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005e06:	70 09       	ld.w	r9,r8[0x0]
80005e08:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005e0c:	10 09       	add	r9,r8
80005e0e:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005e12:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005e14:	ee f9 ff c8 	ld.w	r9,r7[-56]
80005e18:	30 08       	mov	r8,0
80005e1a:	f3 68 00 08 	st.b	r9[8],r8
80005e1e:	ee c8 00 64 	sub	r8,r7,100
80005e22:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005e26:	e1 b8 00 42 	mfsr	r8,0x108
80005e2a:	ef 48 ff d4 	st.w	r7[-44],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005e2e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e32:	f1 39 00 08 	ld.ub	r9,r8[8]
80005e36:	30 28       	mov	r8,2
80005e38:	f0 09 18 00 	cp.b	r9,r8
80005e3c:	c0 31       	brne	80005e42 <et024006_PowerOn+0xda>
    return false;
80005e3e:	30 08       	mov	r8,0
80005e40:	c4 38       	rjmp	80005ec6 <et024006_PowerOn+0x15e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005e42:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e46:	f1 39 00 08 	ld.ub	r9,r8[8]
80005e4a:	30 18       	mov	r8,1
80005e4c:	f0 09 18 00 	cp.b	r9,r8
80005e50:	c0 31       	brne	80005e56 <et024006_PowerOn+0xee>
    return true;
80005e52:	30 18       	mov	r8,1
80005e54:	c3 98       	rjmp	80005ec6 <et024006_PowerOn+0x15e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005e56:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e5a:	70 09       	ld.w	r9,r8[0x0]
80005e5c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e60:	70 18       	ld.w	r8,r8[0x4]
80005e62:	10 39       	cp.w	r9,r8
80005e64:	e0 88 00 1a 	brls	80005e98 <et024006_PowerOn+0x130>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005e68:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e6c:	70 08       	ld.w	r8,r8[0x0]
80005e6e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005e72:	10 39       	cp.w	r9,r8
80005e74:	c1 02       	brcc	80005e94 <et024006_PowerOn+0x12c>
80005e76:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e7a:	70 18       	ld.w	r8,r8[0x4]
80005e7c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005e80:	10 39       	cp.w	r9,r8
80005e82:	e0 88 00 09 	brls	80005e94 <et024006_PowerOn+0x12c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005e86:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005e8a:	30 18       	mov	r8,1
80005e8c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005e90:	30 18       	mov	r8,1
80005e92:	c1 a8       	rjmp	80005ec6 <et024006_PowerOn+0x15e>
    }
    return false;
80005e94:	30 08       	mov	r8,0
80005e96:	c1 88       	rjmp	80005ec6 <et024006_PowerOn+0x15e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005e98:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e9c:	70 08       	ld.w	r8,r8[0x0]
80005e9e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005ea2:	10 39       	cp.w	r9,r8
80005ea4:	c0 93       	brcs	80005eb6 <et024006_PowerOn+0x14e>
80005ea6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005eaa:	70 18       	ld.w	r8,r8[0x4]
80005eac:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005eb0:	10 39       	cp.w	r9,r8
80005eb2:	e0 88 00 09 	brls	80005ec4 <et024006_PowerOn+0x15c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005eb6:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005eba:	30 18       	mov	r8,1
80005ebc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005ec0:	30 18       	mov	r8,1
80005ec2:	c0 28       	rjmp	80005ec6 <et024006_PowerOn+0x15e>
    }
    return false;
80005ec4:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005ec6:	58 08       	cp.w	r8,0
80005ec8:	ca b0       	breq	80005e1e <et024006_PowerOn+0xb6>
80005eca:	32 68       	mov	r8,38
80005ecc:	ef 68 ff d9 	st.b	r7[-39],r8
80005ed0:	32 48       	mov	r8,36
80005ed2:	ef 68 ff d8 	st.b	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005ed6:	fc 19 c0 00 	movh	r9,0xc000
80005eda:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80005ede:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005ee0:	fc 19 c0 20 	movh	r9,0xc020
80005ee4:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80005ee8:	b2 08       	st.h	r9[0x0],r8
80005eea:	32 68       	mov	r8,38
80005eec:	ef 68 ff db 	st.b	r7[-37],r8
80005ef0:	32 c8       	mov	r8,44
80005ef2:	ef 68 ff da 	st.b	r7[-38],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005ef6:	fc 19 c0 00 	movh	r9,0xc000
80005efa:	ef 38 ff db 	ld.ub	r8,r7[-37]
80005efe:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005f00:	fc 19 c0 20 	movh	r9,0xc020
80005f04:	ef 38 ff da 	ld.ub	r8,r7[-38]
80005f08:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D0) );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  cpu_delay_ms( 40, tft_data.cpu_hz );
80005f0a:	4d a8       	lddpc	r8,80006070 <et024006_PowerOn+0x308>
80005f0c:	70 08       	ld.w	r8,r8[0x0]
80005f0e:	32 89       	mov	r9,40
80005f10:	ef 49 ff e0 	st.w	r7[-32],r9
80005f14:	ef 48 ff dc 	st.w	r7[-36],r8
80005f18:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005f1c:	ef 48 ff e8 	st.w	r7[-24],r8
80005f20:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005f24:	ef 48 ff e4 	st.w	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005f28:	ee f0 ff e8 	ld.w	r0,r7[-24]
80005f2c:	30 01       	mov	r1,0
80005f2e:	ee f2 ff e4 	ld.w	r2,r7[-28]
80005f32:	30 03       	mov	r3,0
80005f34:	e2 02 02 4a 	mul	r10,r1,r2
80005f38:	e6 00 02 48 	mul	r8,r3,r0
80005f3c:	10 0a       	add	r10,r8
80005f3e:	e0 02 06 48 	mulu.d	r8,r0,r2
80005f42:	12 0a       	add	r10,r9
80005f44:	14 99       	mov	r9,r10
80005f46:	e0 6a 03 e7 	mov	r10,999
80005f4a:	30 0b       	mov	r11,0
80005f4c:	f0 0a 00 0a 	add	r10,r8,r10
80005f50:	f2 0b 00 4b 	adc	r11,r9,r11
80005f54:	e0 68 03 e8 	mov	r8,1000
80005f58:	30 09       	mov	r9,0
80005f5a:	f0 1f 00 47 	mcall	80006074 <et024006_PowerOn+0x30c>
80005f5e:	14 98       	mov	r8,r10
80005f60:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005f62:	ef 48 ff f0 	st.w	r7[-16],r8
80005f66:	ee c8 00 58 	sub	r8,r7,88
80005f6a:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005f6e:	e1 b8 00 42 	mfsr	r8,0x108
80005f72:	10 99       	mov	r9,r8
80005f74:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005f78:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005f7a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005f7e:	70 09       	ld.w	r9,r8[0x0]
80005f80:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f84:	10 09       	add	r9,r8
80005f86:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005f8a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005f8c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005f90:	30 08       	mov	r8,0
80005f92:	f3 68 00 08 	st.b	r9[8],r8
80005f96:	ee c8 00 58 	sub	r8,r7,88
80005f9a:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005f9e:	e1 b8 00 42 	mfsr	r8,0x108
80005fa2:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005fa6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005faa:	f1 39 00 08 	ld.ub	r9,r8[8]
80005fae:	30 28       	mov	r8,2
80005fb0:	f0 09 18 00 	cp.b	r9,r8
80005fb4:	c0 31       	brne	80005fba <et024006_PowerOn+0x252>
    return false;
80005fb6:	30 08       	mov	r8,0
80005fb8:	c4 38       	rjmp	8000603e <et024006_PowerOn+0x2d6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005fba:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fbe:	f1 39 00 08 	ld.ub	r9,r8[8]
80005fc2:	30 18       	mov	r8,1
80005fc4:	f0 09 18 00 	cp.b	r9,r8
80005fc8:	c0 31       	brne	80005fce <et024006_PowerOn+0x266>
    return true;
80005fca:	30 18       	mov	r8,1
80005fcc:	c3 98       	rjmp	8000603e <et024006_PowerOn+0x2d6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005fce:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fd2:	70 09       	ld.w	r9,r8[0x0]
80005fd4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fd8:	70 18       	ld.w	r8,r8[0x4]
80005fda:	10 39       	cp.w	r9,r8
80005fdc:	e0 88 00 1a 	brls	80006010 <et024006_PowerOn+0x2a8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005fe0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fe4:	70 08       	ld.w	r8,r8[0x0]
80005fe6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005fea:	10 39       	cp.w	r9,r8
80005fec:	c1 02       	brcc	8000600c <et024006_PowerOn+0x2a4>
80005fee:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005ff2:	70 18       	ld.w	r8,r8[0x4]
80005ff4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005ff8:	10 39       	cp.w	r9,r8
80005ffa:	e0 88 00 09 	brls	8000600c <et024006_PowerOn+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005ffe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006002:	30 18       	mov	r8,1
80006004:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006008:	30 18       	mov	r8,1
8000600a:	c1 a8       	rjmp	8000603e <et024006_PowerOn+0x2d6>
    }
    return false;
8000600c:	30 08       	mov	r8,0
8000600e:	c1 88       	rjmp	8000603e <et024006_PowerOn+0x2d6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006010:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006014:	70 08       	ld.w	r8,r8[0x0]
80006016:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000601a:	10 39       	cp.w	r9,r8
8000601c:	c0 93       	brcs	8000602e <et024006_PowerOn+0x2c6>
8000601e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006022:	70 18       	ld.w	r8,r8[0x4]
80006024:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006028:	10 39       	cp.w	r9,r8
8000602a:	e0 88 00 09 	brls	8000603c <et024006_PowerOn+0x2d4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000602e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006032:	30 18       	mov	r8,1
80006034:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006038:	30 18       	mov	r8,1
8000603a:	c0 28       	rjmp	8000603e <et024006_PowerOn+0x2d6>
    }
    return false;
8000603c:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000603e:	58 08       	cp.w	r8,0
80006040:	ca b0       	breq	80005f96 <et024006_PowerOn+0x22e>
80006042:	32 68       	mov	r8,38
80006044:	ef 68 ff ff 	st.b	r7[-1],r8
80006048:	33 c8       	mov	r8,60
8000604a:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000604e:	fc 19 c0 00 	movh	r9,0xc000
80006052:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006056:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80006058:	fc 19 c0 20 	movh	r9,0xc020
8000605c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006060:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON)| (1 << HIMAX_DTE) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  et024006_SetRegister( HIMAX_INTERNAL28, (1 << HIMAX_TEON) );
80006062:	30 8b       	mov	r11,8
80006064:	37 0c       	mov	r12,112
80006066:	f0 1f 00 05 	mcall	80006078 <et024006_PowerOn+0x310>
}
8000606a:	2e 7d       	sub	sp,-100
8000606c:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80006070:	00 00       	add	r0,r0
80006072:	06 34       	cp.w	r4,r3
80006074:	80 00       	ld.sh	r0,r0[0x0]
80006076:	e3 f8 80 00 	ld.wls	r8,r1[0x0]
8000607a:	4b 80       	lddpc	r0,80006158 <sd_mmc_mci_get_csd+0x24>

8000607c <is_sd_mmc_mci_card_present>:


//_____ D E F I N I T I O N S ______________________________________________

bool is_sd_mmc_mci_card_present(uint8_t slot)
{
8000607c:	eb cd 40 80 	pushm	r7,lr
80006080:	1a 97       	mov	r7,sp
80006082:	20 1d       	sub	sp,4
80006084:	18 98       	mov	r8,r12
80006086:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
8000608a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000608e:	30 18       	mov	r8,1
80006090:	f0 09 18 00 	cp.b	r9,r8
80006094:	e0 88 00 04 	brls	8000609c <is_sd_mmc_mci_card_present+0x20>
    return false;
80006098:	30 08       	mov	r8,0
8000609a:	c1 88       	rjmp	800060ca <is_sd_mmc_mci_card_present+0x4e>

  switch(slot)
8000609c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800060a0:	58 08       	cp.w	r8,0
800060a2:	c0 b0       	breq	800060b8 <is_sd_mmc_mci_card_present+0x3c>
800060a4:	58 18       	cp.w	r8,1
800060a6:	c1 11       	brne	800060c8 <is_sd_mmc_mci_card_present+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_CARD_DETECT)==SD_SLOT_4BITS_CARD_DETECT_VALUE);
800060a8:	32 8c       	mov	r12,40
800060aa:	f0 1f 00 0b 	mcall	800060d4 <is_sd_mmc_mci_card_present+0x58>
800060ae:	18 98       	mov	r8,r12
800060b0:	58 08       	cp.w	r8,0
800060b2:	5f 08       	sreq	r8
800060b4:	5c 58       	castu.b	r8
800060b6:	c0 a8       	rjmp	800060ca <is_sd_mmc_mci_card_present+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_CARD_DETECT)==SD_SLOT_8BITS_CARD_DETECT_VALUE);
800060b8:	32 bc       	mov	r12,43
800060ba:	f0 1f 00 07 	mcall	800060d4 <is_sd_mmc_mci_card_present+0x58>
800060be:	18 98       	mov	r8,r12
800060c0:	58 08       	cp.w	r8,0
800060c2:	5f 08       	sreq	r8
800060c4:	5c 58       	castu.b	r8
800060c6:	c0 28       	rjmp	800060ca <is_sd_mmc_mci_card_present+0x4e>
  }

  return false;
800060c8:	30 08       	mov	r8,0
}
800060ca:	10 9c       	mov	r12,r8
800060cc:	2f fd       	sub	sp,-4
800060ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800060d2:	00 00       	add	r0,r0
800060d4:	80 00       	ld.sh	r0,r0[0x0]
800060d6:	8c 0c       	ld.sh	r12,r6[0x0]

800060d8 <is_sd_mmc_mci_card_protected>:

bool is_sd_mmc_mci_card_protected(uint8_t slot)
{
800060d8:	eb cd 40 80 	pushm	r7,lr
800060dc:	1a 97       	mov	r7,sp
800060de:	20 1d       	sub	sp,4
800060e0:	18 98       	mov	r8,r12
800060e2:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
800060e6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800060ea:	30 18       	mov	r8,1
800060ec:	f0 09 18 00 	cp.b	r9,r8
800060f0:	e0 88 00 04 	brls	800060f8 <is_sd_mmc_mci_card_protected+0x20>
    return false;
800060f4:	30 08       	mov	r8,0
800060f6:	c1 88       	rjmp	80006126 <is_sd_mmc_mci_card_protected+0x4e>

  switch(slot)
800060f8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800060fc:	58 08       	cp.w	r8,0
800060fe:	c0 b0       	breq	80006114 <is_sd_mmc_mci_card_protected+0x3c>
80006100:	58 18       	cp.w	r8,1
80006102:	c1 11       	brne	80006124 <is_sd_mmc_mci_card_protected+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_WRITE_PROTECT)==SD_SLOT_4BITS_WRITE_PROTECT_VALUE);
80006104:	32 6c       	mov	r12,38
80006106:	f0 1f 00 0b 	mcall	80006130 <is_sd_mmc_mci_card_protected+0x58>
8000610a:	18 98       	mov	r8,r12
8000610c:	58 18       	cp.w	r8,1
8000610e:	5f 08       	sreq	r8
80006110:	5c 58       	castu.b	r8
80006112:	c0 a8       	rjmp	80006126 <is_sd_mmc_mci_card_protected+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_WRITE_PROTECT)==SD_SLOT_8BITS_WRITE_PROTECT_VALUE);
80006114:	36 cc       	mov	r12,108
80006116:	f0 1f 00 07 	mcall	80006130 <is_sd_mmc_mci_card_protected+0x58>
8000611a:	18 98       	mov	r8,r12
8000611c:	58 18       	cp.w	r8,1
8000611e:	5f 08       	sreq	r8
80006120:	5c 58       	castu.b	r8
80006122:	c0 28       	rjmp	80006126 <is_sd_mmc_mci_card_protected+0x4e>
  }

  return false;
80006124:	30 08       	mov	r8,0
}
80006126:	10 9c       	mov	r12,r8
80006128:	2f fd       	sub	sp,-4
8000612a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000612e:	00 00       	add	r0,r0
80006130:	80 00       	ld.sh	r0,r0[0x0]
80006132:	8c 0c       	ld.sh	r12,r6[0x0]

80006134 <sd_mmc_mci_get_csd>:

static bool  sd_mmc_mci_get_csd(uint8_t slot)
{
80006134:	eb cd 40 80 	pushm	r7,lr
80006138:	1a 97       	mov	r7,sp
8000613a:	20 fd       	sub	sp,60
8000613c:	18 98       	mov	r8,r12
8000613e:	ef 68 ff c4 	st.b	r7[-60],r8

  uint32_t max_Read_DataBlock_Length;
  uint32_t mult;
  uint32_t blocknr;
  uint8_t tmp;
  const uint16_t freq_unit[4] = {10, 100, 1000, 10000};
80006142:	fe f9 02 b2 	ld.w	r9,pc[690]
80006146:	ee c8 00 28 	sub	r8,r7,40
8000614a:	30 8a       	mov	r10,8
8000614c:	12 9b       	mov	r11,r9
8000614e:	10 9c       	mov	r12,r8
80006150:	f0 1f 00 aa 	mcall	800063f8 <sd_mmc_mci_get_csd+0x2c4>
  const uint8_t mult_fact[16] = {0, 10, 12, 13, 15, 20, 26, 30, 35, 40, 45, 52, 55, 60, 70, 80}; // MMC tabs...
80006154:	fe f8 02 a8 	ld.w	r8,pc[680]
80006158:	ee ca 00 38 	sub	r10,r7,56
8000615c:	10 9b       	mov	r11,r8
8000615e:	f6 e8 00 00 	ld.d	r8,r11[0]
80006162:	f4 e9 00 00 	st.d	r10[0],r8
80006166:	f6 e8 00 08 	ld.d	r8,r11[8]
8000616a:	f4 e9 00 08 	st.d	r10[8],r8

  if (slot > MCI_LAST_SLOTS)
8000616e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006172:	30 18       	mov	r8,1
80006174:	f0 09 18 00 	cp.b	r9,r8
80006178:	e0 88 00 04 	brls	80006180 <sd_mmc_mci_get_csd+0x4c>
    return false;
8000617c:	30 08       	mov	r8,0
8000617e:	c3 69       	rjmp	800063ea <sd_mmc_mci_get_csd+0x2b6>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006180:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006184:	fe f9 02 7c 	ld.w	r9,pc[636]
80006188:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000618c:	10 9a       	mov	r10,r8
8000618e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006192:	fe f8 02 72 	ld.w	r8,pc[626]
80006196:	70 08       	ld.w	r8,r8[0x0]
80006198:	12 9b       	mov	r11,r9
8000619a:	10 9c       	mov	r12,r8
8000619c:	f0 1f 00 9b 	mcall	80006408 <sd_mmc_mci_get_csd+0x2d4>

  //-- (CMD9)
  if (mci_send_cmd(mci, SD_MMC_SEND_CSD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800061a0:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800061a4:	fe f8 02 68 	ld.w	r8,pc[616]
800061a8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800061ac:	fe f8 02 58 	ld.w	r8,pc[600]
800061b0:	70 08       	ld.w	r8,r8[0x0]
800061b2:	12 9a       	mov	r10,r9
800061b4:	e0 6b 10 89 	mov	r11,4233
800061b8:	10 9c       	mov	r12,r8
800061ba:	f0 1f 00 96 	mcall	80006410 <sd_mmc_mci_get_csd+0x2dc>
800061be:	18 98       	mov	r8,r12
800061c0:	58 08       	cp.w	r8,0
800061c2:	c0 30       	breq	800061c8 <sd_mmc_mci_get_csd+0x94>
    return false;
800061c4:	30 08       	mov	r8,0
800061c6:	c1 29       	rjmp	800063ea <sd_mmc_mci_get_csd+0x2b6>


  csd.csd[0] = mci_read_response(mci);
800061c8:	fe f8 02 3c 	ld.w	r8,pc[572]
800061cc:	70 08       	ld.w	r8,r8[0x0]
800061ce:	10 9c       	mov	r12,r8
800061d0:	f0 1f 00 91 	mcall	80006414 <sd_mmc_mci_get_csd+0x2e0>
800061d4:	18 98       	mov	r8,r12
800061d6:	ef 48 ff e0 	st.w	r7[-32],r8
  csd.csd[1] = mci_read_response(mci);
800061da:	fe f8 02 2a 	ld.w	r8,pc[554]
800061de:	70 08       	ld.w	r8,r8[0x0]
800061e0:	10 9c       	mov	r12,r8
800061e2:	f0 1f 00 8d 	mcall	80006414 <sd_mmc_mci_get_csd+0x2e0>
800061e6:	18 98       	mov	r8,r12
800061e8:	ef 48 ff e4 	st.w	r7[-28],r8
  csd.csd[2] = mci_read_response(mci);
800061ec:	fe f8 02 18 	ld.w	r8,pc[536]
800061f0:	70 08       	ld.w	r8,r8[0x0]
800061f2:	10 9c       	mov	r12,r8
800061f4:	f0 1f 00 88 	mcall	80006414 <sd_mmc_mci_get_csd+0x2e0>
800061f8:	18 98       	mov	r8,r12
800061fa:	ef 48 ff e8 	st.w	r7[-24],r8
  csd.csd[3] = mci_read_response(mci);
800061fe:	fe f8 02 06 	ld.w	r8,pc[518]
80006202:	70 08       	ld.w	r8,r8[0x0]
80006204:	10 9c       	mov	r12,r8
80006206:	f0 1f 00 84 	mcall	80006414 <sd_mmc_mci_get_csd+0x2e0>
8000620a:	18 98       	mov	r8,r12
8000620c:	ef 48 ff ec 	st.w	r7[-20],r8

  //-- Read "System specification version", only available on MMC card
  // field: SPEC_VERS (only on MMC)
  if (MMC_CARD & g_card_type[slot]) // TO BE ADDED
80006210:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006214:	fe f9 02 04 	ld.w	r9,pc[516]
80006218:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000621c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006220:	5c 58       	castu.b	r8
80006222:	c1 40       	breq	8000624a <sd_mmc_mci_get_csd+0x116>
  {
    if (CSD_SPEC_VER_4_0 == (MSB0(csd.csd[0]) & CSD_MSK_SPEC_VER))
80006224:	ee c8 00 20 	sub	r8,r7,32
80006228:	11 88       	ld.ub	r8,r8[0x0]
8000622a:	e2 18 00 3c 	andl	r8,0x3c,COH
8000622e:	59 08       	cp.w	r8,16
80006230:	c0 d1       	brne	8000624a <sd_mmc_mci_get_csd+0x116>
    {
      g_card_type[slot] |= MMC_CARD_V4;
80006232:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006236:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8000623a:	4f 8a       	lddpc	r10,80006418 <sd_mmc_mci_get_csd+0x2e4>
8000623c:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006240:	a3 a8       	sbr	r8,0x2
80006242:	5c 58       	castu.b	r8
80006244:	4f 5a       	lddpc	r10,80006418 <sd_mmc_mci_get_csd+0x2e4>
80006246:	f4 09 0b 08 	st.b	r10[r9],r8
    }
  }

  //-- Compute MMC/SD speed
  // field: TRAN_SPEED (CSD V1 & V2 are the same)
  g_card_freq[slot]  = mult_fact[csd.csd_v1.tranSpeed >> 3]; // Get Multiplier factor
8000624a:	ef 3a ff c4 	ld.ub	r10,r7[-60]
8000624e:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80006252:	a3 98       	lsr	r8,0x3
80006254:	5c 58       	castu.b	r8
80006256:	ee 08 00 08 	add	r8,r7,r8
8000625a:	f1 38 ff c8 	ld.ub	r8,r8[-56]
8000625e:	4f 09       	lddpc	r9,8000641c <sd_mmc_mci_get_csd+0x2e8>
80006260:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  if (SD_CARD & g_card_type[slot])
80006264:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006268:	4e c9       	lddpc	r9,80006418 <sd_mmc_mci_get_csd+0x2e4>
8000626a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000626e:	e2 18 00 02 	andl	r8,0x2,COH
80006272:	c2 00       	breq	800062b2 <sd_mmc_mci_get_csd+0x17e>
  {
    // SD card don't have same frequency that MMC card
    if( 26 == g_card_freq[slot] )
80006274:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006278:	4e 98       	lddpc	r8,8000641c <sd_mmc_mci_get_csd+0x2e8>
8000627a:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
8000627e:	31 a8       	mov	r8,26
80006280:	f0 09 19 00 	cp.h	r9,r8
80006284:	c0 81       	brne	80006294 <sd_mmc_mci_get_csd+0x160>
    {
      g_card_freq[slot] = 25;
80006286:	ef 3a ff c4 	ld.ub	r10,r7[-60]
8000628a:	4e 59       	lddpc	r9,8000641c <sd_mmc_mci_get_csd+0x2e8>
8000628c:	31 98       	mov	r8,25
8000628e:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
80006292:	c1 08       	rjmp	800062b2 <sd_mmc_mci_get_csd+0x17e>
    }
    else if( 52 == g_card_freq[slot] )
80006294:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006298:	4e 18       	lddpc	r8,8000641c <sd_mmc_mci_get_csd+0x2e8>
8000629a:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
8000629e:	33 48       	mov	r8,52
800062a0:	f0 09 19 00 	cp.h	r9,r8
800062a4:	c0 71       	brne	800062b2 <sd_mmc_mci_get_csd+0x17e>
    {
      g_card_freq[slot] = 50;
800062a6:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800062aa:	4d d9       	lddpc	r9,8000641c <sd_mmc_mci_get_csd+0x2e8>
800062ac:	33 28       	mov	r8,50
800062ae:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
    }
  }
  g_card_freq[slot] *= freq_unit[ csd.csd_v1.tranSpeed&0x07 ]; // Get transfer rate unit
800062b2:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800062b6:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800062ba:	4d 98       	lddpc	r8,8000641c <sd_mmc_mci_get_csd+0x2e8>
800062bc:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800062c0:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800062c4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800062c8:	a1 78       	lsl	r8,0x1
800062ca:	ee 08 00 08 	add	r8,r7,r8
800062ce:	f1 08 ff d8 	ld.sh	r8,r8[-40]
800062d2:	f2 08 02 48 	mul	r8,r9,r8
800062d6:	5c 88       	casts.h	r8
800062d8:	4d 19       	lddpc	r9,8000641c <sd_mmc_mci_get_csd+0x2e8>
800062da:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

  //-- Compute card size in number of block
  // field: WRITE_BL_LEN, READ_BL_LEN, C_SIZE (CSD V1 & V2 are not the same)
  if (SD_CARD_HC & g_card_type[slot])
800062de:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800062e2:	4c e9       	lddpc	r9,80006418 <sd_mmc_mci_get_csd+0x2e4>
800062e4:	f2 08 07 08 	ld.ub	r8,r9[r8]
800062e8:	e2 18 00 10 	andl	r8,0x10,COH
800062ec:	c2 10       	breq	8000632e <sd_mmc_mci_get_csd+0x1fa>
  {
    g_card_size[slot] = (csd.csd_v2.deviceSizeH<<16)+(csd.csd_v2.deviceSizeL&0xFFff);
800062ee:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800062f2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800062f6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800062fa:	5c 58       	castu.b	r8
800062fc:	f0 0a 15 10 	lsl	r10,r8,0x10
80006300:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80006304:	5c 78       	castu.h	r8
80006306:	f4 08 00 08 	add	r8,r10,r8
8000630a:	10 9a       	mov	r10,r8
8000630c:	4c 58       	lddpc	r8,80006420 <sd_mmc_mci_get_csd+0x2ec>
8000630e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

    // memory capacity = (C_SIZE+1) * 1K sector
    g_card_size[slot] = (g_card_size[slot] + 1) << 10;  // unit 512B
80006312:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006316:	ef 3a ff c4 	ld.ub	r10,r7[-60]
8000631a:	4c 28       	lddpc	r8,80006420 <sd_mmc_mci_get_csd+0x2ec>
8000631c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80006320:	2f f8       	sub	r8,-1
80006322:	f0 0a 15 0a 	lsl	r10,r8,0xa
80006326:	4b f8       	lddpc	r8,80006420 <sd_mmc_mci_get_csd+0x2ec>
80006328:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000632c:	c5 e8       	rjmp	800063e8 <sd_mmc_mci_get_csd+0x2b4>
  }
  else
  {
    // Check block size
    tmp = csd.csd_v1.writeBlLen; // WRITE_BL_LEN
8000632e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006332:	f1 d8 c2 c4 	bfextu	r8,r8,0x16,0x4
80006336:	5c 58       	castu.b	r8
80006338:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
8000633c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006340:	30 88       	mov	r8,8
80006342:	f0 09 18 00 	cp.b	r9,r8
80006346:	e0 8b 00 04 	brhi	8000634e <sd_mmc_mci_get_csd+0x21a>
      return false;  // block size < 512B not supported by firmware
8000634a:	30 08       	mov	r8,0
8000634c:	c4 f8       	rjmp	800063ea <sd_mmc_mci_get_csd+0x2b6>

    tmp = csd.csd_v1.readBlLen; // READ_BL_LEN
8000634e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006352:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
80006356:	5c 58       	castu.b	r8
80006358:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
8000635c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006360:	30 88       	mov	r8,8
80006362:	f0 09 18 00 	cp.b	r9,r8
80006366:	e0 8b 00 04 	brhi	8000636e <sd_mmc_mci_get_csd+0x23a>
      return false;  // block size < 512B not supported by firmware
8000636a:	30 08       	mov	r8,0
8000636c:	c3 f8       	rjmp	800063ea <sd_mmc_mci_get_csd+0x2b6>

    //// Compute Memory Capacity
    // compute MULT
    mult = 1 << (csd.csd_v1.cSizeMult + 2);
8000636e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006372:	f1 d8 c1 e3 	bfextu	r8,r8,0xf,0x3
80006376:	5c 58       	castu.b	r8
80006378:	2f e8       	sub	r8,-2
8000637a:	30 19       	mov	r9,1
8000637c:	f2 08 09 48 	lsl	r8,r9,r8
80006380:	ef 48 ff f4 	st.w	r7[-12],r8
    max_Read_DataBlock_Length = 1<<csd.csd_v1.readBlLen;
80006384:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006388:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
8000638c:	5c 58       	castu.b	r8
8000638e:	30 19       	mov	r9,1
80006390:	f2 08 09 48 	lsl	r8,r9,r8
80006394:	ef 48 ff f0 	st.w	r7[-16],r8
    // compute MSB of C_SIZE
    blocknr = csd.csd_v1.deviceSizeH << 2;
80006398:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000639c:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
800063a0:	5c 88       	casts.h	r8
800063a2:	5c 78       	castu.h	r8
800063a4:	a3 68       	lsl	r8,0x2
800063a6:	ef 48 ff f8 	st.w	r7[-8],r8
    // compute MULT * (LSB of C-SIZE + MSB already computed + 1) = BLOCKNR
    blocknr = mult * ( blocknr + csd.csd_v1.deviceSizeL + 1 );
800063aa:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063ae:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
800063b2:	5c 58       	castu.b	r8
800063b4:	10 99       	mov	r9,r8
800063b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063ba:	f2 08 00 08 	add	r8,r9,r8
800063be:	f0 c9 ff ff 	sub	r9,r8,-1
800063c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800063c6:	f2 08 02 48 	mul	r8,r9,r8
800063ca:	ef 48 ff f8 	st.w	r7[-8],r8
    g_card_size[slot] = ((max_Read_DataBlock_Length * blocknr)/512);
800063ce:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800063d2:	ee fa ff f0 	ld.w	r10,r7[-16]
800063d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063da:	f4 08 02 48 	mul	r8,r10,r8
800063de:	f0 0a 16 09 	lsr	r10,r8,0x9
800063e2:	49 08       	lddpc	r8,80006420 <sd_mmc_mci_get_csd+0x2ec>
800063e4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  }

  return true;
800063e8:	30 18       	mov	r8,1
}
800063ea:	10 9c       	mov	r12,r8
800063ec:	2f 1d       	sub	sp,-60
800063ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800063f2:	00 00       	add	r0,r0
800063f4:	80 00       	ld.sh	r0,r0[0x0]
800063f6:	eb b4       	*unknown*
800063f8:	80 00       	ld.sh	r0,r0[0x0]
800063fa:	e6 8a 80 00 	brle	800d63fa <Stored_values_flash+0x965fa>
800063fe:	eb bc       	*unknown*
80006400:	00 00       	add	r0,r0
80006402:	0d 9c       	ld.ub	r12,r6[0x1]
80006404:	00 00       	add	r0,r0
80006406:	01 34       	ld.ub	r4,r0++
80006408:	80 00       	ld.sh	r0,r0[0x0]
8000640a:	93 78       	st.w	r9[0x1c],r8
8000640c:	00 00       	add	r0,r0
8000640e:	0b 8c       	ld.ub	r12,r5[0x0]
80006410:	80 00       	ld.sh	r0,r0[0x0]
80006412:	91 e0       	st.w	r8[0x38],r0
80006414:	80 00       	ld.sh	r0,r0[0x0]
80006416:	93 18       	st.w	r9[0x4],r8
80006418:	00 00       	add	r0,r0
8000641a:	0f a4       	ld.ub	r4,r7[0x2]
8000641c:	00 00       	add	r0,r0
8000641e:	0d 9e       	ld.ub	lr,r6[0x1]
80006420:	00 00       	add	r0,r0
80006422:	0b 94       	ld.ub	r4,r5[0x1]

80006424 <sd_mmc_get_ext_csd>:

static bool  sd_mmc_get_ext_csd( uint8_t slot )
{
80006424:	eb cd 40 80 	pushm	r7,lr
80006428:	1a 97       	mov	r7,sp
8000642a:	20 ad       	sub	sp,40
8000642c:	18 98       	mov	r8,r12
8000642e:	ef 68 ff d8 	st.b	r7[-40],r8
  uint8_t  i;
  uint32_t val;

  if (slot > MCI_LAST_SLOTS)
80006432:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006436:	30 18       	mov	r8,1
80006438:	f0 09 18 00 	cp.b	r9,r8
8000643c:	e0 88 00 04 	brls	80006444 <sd_mmc_get_ext_csd+0x20>
    return false;
80006440:	30 08       	mov	r8,0
80006442:	cb e8       	rjmp	800065be <sd_mmc_get_ext_csd+0x19a>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006444:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80006448:	4e 09       	lddpc	r9,800065c8 <sd_mmc_get_ext_csd+0x1a4>
8000644a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000644e:	10 9a       	mov	r10,r8
80006450:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006454:	4d e8       	lddpc	r8,800065cc <sd_mmc_get_ext_csd+0x1a8>
80006456:	70 08       	ld.w	r8,r8[0x0]
80006458:	12 9b       	mov	r11,r9
8000645a:	10 9c       	mov	r12,r8
8000645c:	f0 1f 00 5d 	mcall	800065d0 <sd_mmc_get_ext_csd+0x1ac>

  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE); // Ext CSD = 512B size
80006460:	4d b8       	lddpc	r8,800065cc <sd_mmc_get_ext_csd+0x1a8>
80006462:	70 08       	ld.w	r8,r8[0x0]
80006464:	e0 6b 02 00 	mov	r11,512
80006468:	10 9c       	mov	r12,r8
8000646a:	f0 1f 00 5b 	mcall	800065d4 <sd_mmc_get_ext_csd+0x1b0>
  mci_set_block_count(mci, 1);
8000646e:	4d 88       	lddpc	r8,800065cc <sd_mmc_get_ext_csd+0x1a8>
80006470:	70 08       	ld.w	r8,r8[0x0]
80006472:	30 1b       	mov	r11,1
80006474:	10 9c       	mov	r12,r8
80006476:	f0 1f 00 59 	mcall	800065d8 <sd_mmc_get_ext_csd+0x1b4>

  //** (CMD8)
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
8000647a:	4d 58       	lddpc	r8,800065cc <sd_mmc_get_ext_csd+0x1a8>
8000647c:	70 08       	ld.w	r8,r8[0x0]
8000647e:	30 0a       	mov	r10,0
80006480:	e4 7b 10 48 	mov	r11,331848
80006484:	10 9c       	mov	r12,r8
80006486:	f0 1f 00 56 	mcall	800065dc <sd_mmc_get_ext_csd+0x1b8>
8000648a:	18 98       	mov	r8,r12
8000648c:	58 08       	cp.w	r8,0
8000648e:	c0 30       	breq	80006494 <sd_mmc_get_ext_csd+0x70>
    return false;
80006490:	30 08       	mov	r8,0
80006492:	c9 68       	rjmp	800065be <sd_mmc_get_ext_csd+0x19a>

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
80006494:	34 08       	mov	r8,64
80006496:	ef 68 ff e3 	st.b	r7[-29],r8
8000649a:	c8 a8       	rjmp	800065ae <sd_mmc_get_ext_csd+0x18a>
  {
    while(!(mci_rx_ready(mci)));
8000649c:	4c c8       	lddpc	r8,800065cc <sd_mmc_get_ext_csd+0x1a8>
8000649e:	70 08       	ld.w	r8,r8[0x0]
800064a0:	ef 48 ff e4 	st.w	r7[-28],r8
800064a4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800064a8:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800064ac:	4c d8       	lddpc	r8,800065e0 <sd_mmc_get_ext_csd+0x1bc>
800064ae:	70 08       	ld.w	r8,r8[0x0]
800064b0:	10 99       	mov	r9,r8
800064b2:	e6 19 01 e0 	andh	r9,0x1e0,COH
800064b6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800064ba:	71 08       	ld.w	r8,r8[0x40]
800064bc:	f3 e8 10 08 	or	r8,r9,r8
800064c0:	10 99       	mov	r9,r8
800064c2:	4c 88       	lddpc	r8,800065e0 <sd_mmc_get_ext_csd+0x1bc>
800064c4:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800064c6:	4c 78       	lddpc	r8,800065e0 <sd_mmc_get_ext_csd+0x1bc>
800064c8:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
800064ca:	e2 18 00 02 	andl	r8,0x2,COH
800064ce:	5f 18       	srne	r8
800064d0:	58 08       	cp.w	r8,0
800064d2:	ce 50       	breq	8000649c <sd_mmc_get_ext_csd+0x78>
    mci_rd_data(mci);
800064d4:	4b e8       	lddpc	r8,800065cc <sd_mmc_get_ext_csd+0x1a8>
800064d6:	70 08       	ld.w	r8,r8[0x0]
800064d8:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
800064dc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800064e0:	70 c8       	ld.w	r8,r8[0x30]
    while(!(mci_rx_ready(mci)));
800064e2:	4b b8       	lddpc	r8,800065cc <sd_mmc_get_ext_csd+0x1a8>
800064e4:	70 08       	ld.w	r8,r8[0x0]
800064e6:	ef 48 ff f0 	st.w	r7[-16],r8
800064ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800064ee:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800064f2:	4b c8       	lddpc	r8,800065e0 <sd_mmc_get_ext_csd+0x1bc>
800064f4:	70 08       	ld.w	r8,r8[0x0]
800064f6:	10 99       	mov	r9,r8
800064f8:	e6 19 01 e0 	andh	r9,0x1e0,COH
800064fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006500:	71 08       	ld.w	r8,r8[0x40]
80006502:	f3 e8 10 08 	or	r8,r9,r8
80006506:	10 99       	mov	r9,r8
80006508:	4b 68       	lddpc	r8,800065e0 <sd_mmc_get_ext_csd+0x1bc>
8000650a:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
8000650c:	4b 58       	lddpc	r8,800065e0 <sd_mmc_get_ext_csd+0x1bc>
8000650e:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006510:	e2 18 00 02 	andl	r8,0x2,COH
80006514:	5f 18       	srne	r8
80006516:	58 08       	cp.w	r8,0
80006518:	ce 50       	breq	800064e2 <sd_mmc_get_ext_csd+0xbe>
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
8000651a:	ef 39 ff e3 	ld.ub	r9,r7[-29]
8000651e:	32 68       	mov	r8,38
80006520:	f0 09 18 00 	cp.b	r9,r8
80006524:	c1 c1       	brne	8000655c <sd_mmc_get_ext_csd+0x138>
80006526:	ef 38 ff d8 	ld.ub	r8,r7[-40]
8000652a:	4a f9       	lddpc	r9,800065e4 <sd_mmc_get_ext_csd+0x1c0>
8000652c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006530:	e2 18 00 20 	andl	r8,0x20,COH
80006534:	c1 40       	breq	8000655c <sd_mmc_get_ext_csd+0x138>
    {
      // If MMC HC then read Sector Count. Byte 212 is LSB, Byte 215 is MSB.
      val = mci_rd_data(mci);
80006536:	4a 68       	lddpc	r8,800065cc <sd_mmc_get_ext_csd+0x1a8>
80006538:	70 08       	ld.w	r8,r8[0x0]
8000653a:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
8000653e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006542:	70 c8       	ld.w	r8,r8[0x30]
80006544:	ef 48 ff dc 	st.w	r7[-36],r8
      g_card_size[slot] = swap32(val);
80006548:	ef 39 ff d8 	ld.ub	r9,r7[-40]
8000654c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006550:	5c b8       	swap.b	r8
80006552:	10 9a       	mov	r10,r8
80006554:	4a 58       	lddpc	r8,800065e8 <sd_mmc_get_ext_csd+0x1c4>
80006556:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  for (i = (512L/8); i!=0; i--)
  {
    while(!(mci_rx_ready(mci)));
    mci_rd_data(mci);
    while(!(mci_rx_ready(mci)));
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
8000655a:	c2 58       	rjmp	800065a4 <sd_mmc_get_ext_csd+0x180>
      val = mci_rd_data(mci);
      g_card_size[slot] = swap32(val);
    }
    else
    {
      val = mci_rd_data(mci);
8000655c:	49 c8       	lddpc	r8,800065cc <sd_mmc_get_ext_csd+0x1a8>
8000655e:	70 08       	ld.w	r8,r8[0x0]
80006560:	ef 48 ff fc 	st.w	r7[-4],r8
80006564:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006568:	70 c8       	ld.w	r8,r8[0x30]
8000656a:	ef 48 ff dc 	st.w	r7[-36],r8
      if( (64-24) == i )
8000656e:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80006572:	32 88       	mov	r8,40
80006574:	f0 09 18 00 	cp.b	r9,r8
80006578:	c1 61       	brne	800065a4 <sd_mmc_get_ext_csd+0x180>
      {  // Read byte at offset 196
        if( MSB0(val) & 0x02 )
8000657a:	ee c8 00 24 	sub	r8,r7,36
8000657e:	11 88       	ld.ub	r8,r8[0x0]
80006580:	e2 18 00 02 	andl	r8,0x2,COH
80006584:	c0 90       	breq	80006596 <sd_mmc_get_ext_csd+0x172>
          g_card_freq[slot] = 52*1000;
80006586:	ef 3a ff d8 	ld.ub	r10,r7[-40]
8000658a:	49 99       	lddpc	r9,800065ec <sd_mmc_get_ext_csd+0x1c8>
8000658c:	fe 78 cb 20 	mov	r8,-13536
80006590:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
80006594:	c0 88       	rjmp	800065a4 <sd_mmc_get_ext_csd+0x180>
        else
          g_card_freq[slot] = 26*1000;
80006596:	ef 3a ff d8 	ld.ub	r10,r7[-40]
8000659a:	49 59       	lddpc	r9,800065ec <sd_mmc_get_ext_csd+0x1c8>
8000659c:	e0 68 65 90 	mov	r8,26000
800065a0:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
    return false;

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
800065a4:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800065a8:	20 18       	sub	r8,1
800065aa:	ef 68 ff e3 	st.b	r7[-29],r8
800065ae:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800065b2:	30 08       	mov	r8,0
800065b4:	f0 09 18 00 	cp.b	r9,r8
800065b8:	fe 91 ff 72 	brne	8000649c <sd_mmc_get_ext_csd+0x78>
          g_card_freq[slot] = 26*1000;
      }
    }
  }

   return true;
800065bc:	30 18       	mov	r8,1
}
800065be:	10 9c       	mov	r12,r8
800065c0:	2f 6d       	sub	sp,-40
800065c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800065c6:	00 00       	add	r0,r0
800065c8:	00 00       	add	r0,r0
800065ca:	0d 9c       	ld.ub	r12,r6[0x1]
800065cc:	00 00       	add	r0,r0
800065ce:	01 34       	ld.ub	r4,r0++
800065d0:	80 00       	ld.sh	r0,r0[0x0]
800065d2:	93 78       	st.w	r9[0x1c],r8
800065d4:	80 00       	ld.sh	r0,r0[0x0]
800065d6:	91 60       	st.w	r8[0x18],r0
800065d8:	80 00       	ld.sh	r0,r0[0x0]
800065da:	91 aa       	st.w	r8[0x28],r10
800065dc:	80 00       	ld.sh	r0,r0[0x0]
800065de:	91 e0       	st.w	r8[0x38],r0
800065e0:	00 00       	add	r0,r0
800065e2:	07 6c       	ld.uh	r12,--r3
800065e4:	00 00       	add	r0,r0
800065e6:	0f a4       	ld.ub	r4,r7[0x2]
800065e8:	00 00       	add	r0,r0
800065ea:	0b 94       	ld.ub	r4,r5[0x1]
800065ec:	00 00       	add	r0,r0
800065ee:	0d 9e       	ld.ub	lr,r6[0x1]

800065f0 <sd_mmc_set_block_len>:

static bool  sd_mmc_set_block_len(uint8_t slot, uint16_t length )
{
800065f0:	eb cd 40 80 	pushm	r7,lr
800065f4:	1a 97       	mov	r7,sp
800065f6:	20 2d       	sub	sp,8
800065f8:	18 99       	mov	r9,r12
800065fa:	16 98       	mov	r8,r11
800065fc:	ef 69 ff fc 	st.b	r7[-4],r9
80006600:	ef 58 ff f8 	st.h	r7[-8],r8
  if (slot > MCI_LAST_SLOTS)
80006604:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006608:	30 18       	mov	r8,1
8000660a:	f0 09 18 00 	cp.b	r9,r8
8000660e:	e0 88 00 04 	brls	80006616 <sd_mmc_set_block_len+0x26>
    return false;
80006612:	30 08       	mov	r8,0
80006614:	c3 c8       	rjmp	8000668c <sd_mmc_set_block_len+0x9c>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006616:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000661a:	49 f9       	lddpc	r9,80006694 <sd_mmc_set_block_len+0xa4>
8000661c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006620:	10 9a       	mov	r10,r8
80006622:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006626:	49 d8       	lddpc	r8,80006698 <sd_mmc_set_block_len+0xa8>
80006628:	70 08       	ld.w	r8,r8[0x0]
8000662a:	12 9b       	mov	r11,r9
8000662c:	10 9c       	mov	r12,r8
8000662e:	f0 1f 00 1c 	mcall	8000669c <sd_mmc_set_block_len+0xac>

  if(mci_send_cmd(mci, SD_MMC_SET_BLOCKLEN_CMD, length)!=MCI_SUCCESS)
80006632:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80006636:	49 98       	lddpc	r8,80006698 <sd_mmc_set_block_len+0xa8>
80006638:	70 08       	ld.w	r8,r8[0x0]
8000663a:	12 9a       	mov	r10,r9
8000663c:	e0 6b 10 50 	mov	r11,4176
80006640:	10 9c       	mov	r12,r8
80006642:	f0 1f 00 18 	mcall	800066a0 <sd_mmc_set_block_len+0xb0>
80006646:	18 98       	mov	r8,r12
80006648:	58 08       	cp.w	r8,0
8000664a:	c0 30       	breq	80006650 <sd_mmc_set_block_len+0x60>
    return false;
8000664c:	30 08       	mov	r8,0
8000664e:	c1 f8       	rjmp	8000668c <sd_mmc_set_block_len+0x9c>

  // check response, card must be in TRAN state
  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
80006650:	49 28       	lddpc	r8,80006698 <sd_mmc_set_block_len+0xa8>
80006652:	70 08       	ld.w	r8,r8[0x0]
80006654:	10 9c       	mov	r12,r8
80006656:	f0 1f 00 14 	mcall	800066a4 <sd_mmc_set_block_len+0xb4>
8000665a:	18 98       	mov	r8,r12
8000665c:	e4 18 e0 02 	andh	r8,0xe002
80006660:	e0 18 0e 00 	andl	r8,0xe00
80006664:	e0 48 08 00 	cp.w	r8,2048
80006668:	c0 30       	breq	8000666e <sd_mmc_set_block_len+0x7e>
    return false;
8000666a:	30 08       	mov	r8,0
8000666c:	c1 08       	rjmp	8000668c <sd_mmc_set_block_len+0x9c>

  mci_set_block_size(mci, length);
8000666e:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80006672:	48 a8       	lddpc	r8,80006698 <sd_mmc_set_block_len+0xa8>
80006674:	70 08       	ld.w	r8,r8[0x0]
80006676:	12 9b       	mov	r11,r9
80006678:	10 9c       	mov	r12,r8
8000667a:	f0 1f 00 0c 	mcall	800066a8 <sd_mmc_set_block_len+0xb8>
  mci_set_block_count(mci, 1);
8000667e:	48 78       	lddpc	r8,80006698 <sd_mmc_set_block_len+0xa8>
80006680:	70 08       	ld.w	r8,r8[0x0]
80006682:	30 1b       	mov	r11,1
80006684:	10 9c       	mov	r12,r8
80006686:	f0 1f 00 0a 	mcall	800066ac <sd_mmc_set_block_len+0xbc>
  return true;
8000668a:	30 18       	mov	r8,1
}
8000668c:	10 9c       	mov	r12,r8
8000668e:	2f ed       	sub	sp,-8
80006690:	e3 cd 80 80 	ldm	sp++,r7,pc
80006694:	00 00       	add	r0,r0
80006696:	0d 9c       	ld.ub	r12,r6[0x1]
80006698:	00 00       	add	r0,r0
8000669a:	01 34       	ld.ub	r4,r0++
8000669c:	80 00       	ld.sh	r0,r0[0x0]
8000669e:	93 78       	st.w	r9[0x1c],r8
800066a0:	80 00       	ld.sh	r0,r0[0x0]
800066a2:	91 e0       	st.w	r8[0x38],r0
800066a4:	80 00       	ld.sh	r0,r0[0x0]
800066a6:	93 18       	st.w	r9[0x4],r8
800066a8:	80 00       	ld.sh	r0,r0[0x0]
800066aa:	91 60       	st.w	r8[0x18],r0
800066ac:	80 00       	ld.sh	r0,r0[0x0]
800066ae:	91 aa       	st.w	r8[0x28],r10

800066b0 <sd_mmc_mci_init>:

bool sd_mmc_mci_init(unsigned char card_slot, long pbb_hz, long cpu_hz)
{
800066b0:	eb cd 40 80 	pushm	r7,lr
800066b4:	1a 97       	mov	r7,sp
800066b6:	20 5d       	sub	sp,20
800066b8:	18 98       	mov	r8,r12
800066ba:	ef 4b ff f0 	st.w	r7[-16],r11
800066be:	ef 4a ff ec 	st.w	r7[-20],r10
800066c2:	ef 68 ff f4 	st.b	r7[-12],r8
    unsigned long                 scfg;
    avr32_hmatrix_scfg_t          SCFG;
  } u_avr32_hmatrix_scfg;

  // For the USBB DMA HMATRIX master, use infinite length burst.
  u_avr32_hmatrix_mcfg.mcfg = AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
800066c6:	fe 68 10 00 	mov	r8,-126976
800066ca:	70 68       	ld.w	r8,r8[0x18]
800066cc:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_hmatrix_mcfg.MCFG.ulbt = AVR32_HMATRIX_ULBT_INFINITE;
800066d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800066d4:	30 09       	mov	r9,0
800066d6:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800066da:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] = u_avr32_hmatrix_mcfg.mcfg;
800066de:	fe 68 10 00 	mov	r8,-126976
800066e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800066e6:	91 69       	st.w	r8[0x18],r9

  // For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
  u_avr32_hmatrix_scfg.scfg = AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
800066e8:	fe 68 10 00 	mov	r8,-126976
800066ec:	71 58       	ld.w	r8,r8[0x54]
800066ee:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.fixed_defmstr = AVR32_HMATRIX_MASTER_USBB_DMA;
800066f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066f6:	30 69       	mov	r9,6
800066f8:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
800066fc:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
80006700:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006704:	30 29       	mov	r9,2
80006706:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000670a:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] = u_avr32_hmatrix_scfg.scfg;
8000670e:	fe 68 10 00 	mov	r8,-126976
80006712:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006716:	f1 49 00 54 	st.w	r8[84],r9

  g_pbb_hz = pbb_hz;
8000671a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000671e:	49 08       	lddpc	r8,8000675c <sd_mmc_mci_init+0xac>
80006720:	91 09       	st.w	r8[0x0],r9
  g_cpu_hz = cpu_hz;
80006722:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006726:	48 f8       	lddpc	r8,80006760 <sd_mmc_mci_init+0xb0>
80006728:	91 09       	st.w	r8[0x0],r9

  // Init MCI controller
  if (mci_init(mci, card_slot, pbb_hz)!=MCI_SUCCESS)
8000672a:	ee fa ff f0 	ld.w	r10,r7[-16]
8000672e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006732:	48 d8       	lddpc	r8,80006764 <sd_mmc_mci_init+0xb4>
80006734:	70 08       	ld.w	r8,r8[0x0]
80006736:	12 9b       	mov	r11,r9
80006738:	10 9c       	mov	r12,r8
8000673a:	f0 1f 00 0c 	mcall	80006768 <sd_mmc_mci_init+0xb8>
8000673e:	18 98       	mov	r8,r12
80006740:	58 08       	cp.w	r8,0
80006742:	c0 30       	breq	80006748 <sd_mmc_mci_init+0x98>
    return false;
80006744:	30 08       	mov	r8,0
80006746:	c0 78       	rjmp	80006754 <sd_mmc_mci_init+0xa4>

  // Default card initialization. This can be removed since the card init will
  // automatically be done when needed.
  sd_mmc_mci_card_init(card_slot);
80006748:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000674c:	10 9c       	mov	r12,r8
8000674e:	f0 1f 00 08 	mcall	8000676c <sd_mmc_mci_init+0xbc>
  return true;
80006752:	30 18       	mov	r8,1
}
80006754:	10 9c       	mov	r12,r8
80006756:	2f bd       	sub	sp,-20
80006758:	e3 cd 80 80 	ldm	sp++,r7,pc
8000675c:	00 00       	add	r0,r0
8000675e:	06 40       	or	r0,r3
80006760:	00 00       	add	r0,r0
80006762:	06 44       	or	r4,r3
80006764:	00 00       	add	r0,r0
80006766:	01 34       	ld.ub	r4,r0++
80006768:	80 00       	ld.sh	r0,r0[0x0]
8000676a:	90 ac       	ld.uh	r12,r8[0x4]
8000676c:	80 00       	ld.sh	r0,r0[0x0]
8000676e:	67 70       	ld.w	r0,r3[0x5c]

80006770 <sd_mmc_mci_card_init>:

bool sd_mmc_mci_card_init(unsigned char slot)
{
80006770:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
80006774:	1a 97       	mov	r7,sp
80006776:	21 7d       	sub	sp,92
80006778:	18 98       	mov	r8,r12
8000677a:	ef 68 ff a4 	st.b	r7[-92],r8
  uint32_t response;

  if (true == sd_mmc_mci_init_done[slot])
8000677e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006782:	fe f9 08 7a 	ld.w	r9,pc[2170]
80006786:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000678a:	58 08       	cp.w	r8,0
8000678c:	c0 40       	breq	80006794 <sd_mmc_mci_card_init+0x24>
    return true;
8000678e:	30 18       	mov	r8,1
80006790:	e0 8f 04 31 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>

  // Default card is not known.
  g_card_type[slot] = UNKNOWN_CARD;
80006794:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006798:	fe fa 08 68 	ld.w	r10,pc[2152]
8000679c:	30 08       	mov	r8,0
8000679e:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default bus size is 1 bit.
  g_card_bus_width[slot] = MCI_BUS_SIZE_1_BIT;
800067a2:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800067a6:	fe fa 08 5e 	ld.w	r10,pc[2142]
800067aa:	30 08       	mov	r8,0
800067ac:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default card speed and disable High Speed mode.
  mci_init(mci, slot, g_pbb_hz);
800067b0:	fe f8 08 58 	ld.w	r8,pc[2136]
800067b4:	70 0a       	ld.w	r10,r8[0x0]
800067b6:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800067ba:	fe f8 08 52 	ld.w	r8,pc[2130]
800067be:	70 08       	ld.w	r8,r8[0x0]
800067c0:	12 9b       	mov	r11,r9
800067c2:	10 9c       	mov	r12,r8
800067c4:	f0 1f 02 13 	mcall	80007010 <sd_mmc_mci_card_init+0x8a0>

  // Wait for 1ms, then wait for 74 more clock cycles (see MMC norms)
  if (mci_send_cmd(mci, SD_MMC_INIT_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800067c8:	fe f8 08 44 	ld.w	r8,pc[2116]
800067cc:	70 08       	ld.w	r8,r8[0x0]
800067ce:	3f fa       	mov	r10,-1
800067d0:	e0 6b 01 00 	mov	r11,256
800067d4:	10 9c       	mov	r12,r8
800067d6:	f0 1f 02 10 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
800067da:	18 98       	mov	r8,r12
800067dc:	58 08       	cp.w	r8,0
800067de:	c0 40       	breq	800067e6 <sd_mmc_mci_card_init+0x76>
    return false;
800067e0:	30 08       	mov	r8,0
800067e2:	e0 8f 04 08 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>

  //-- (CMD0)
  // Set card in idle state
  if (mci_send_cmd(mci, SD_MMC_GO_IDLE_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800067e6:	fe f8 08 26 	ld.w	r8,pc[2086]
800067ea:	70 08       	ld.w	r8,r8[0x0]
800067ec:	3f fa       	mov	r10,-1
800067ee:	30 0b       	mov	r11,0
800067f0:	10 9c       	mov	r12,r8
800067f2:	f0 1f 02 09 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
800067f6:	18 98       	mov	r8,r12
800067f8:	58 08       	cp.w	r8,0
800067fa:	c0 50       	breq	80006804 <sd_mmc_mci_card_init+0x94>
    return false;
800067fc:	30 08       	mov	r8,0
800067fe:	e0 8f 03 fa 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>
    response = mci_read_response(mci);
    if( !(response & OCR_MSK_BUSY) )
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
80006802:	d7 03       	nop
    return false;

sd_mmc_init_step1:
  // (CMD1)
  // To send its Operating Conditions Register contents command only supported by MMC card
  if(mci_send_cmd(mci, SD_MMC_MMC_SEND_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_ALL|OCR_MSK_HC)==MCI_SUCCESS)
80006804:	fe f8 08 08 	ld.w	r8,pc[2056]
80006808:	70 08       	ld.w	r8,r8[0x0]
8000680a:	e0 6a 80 00 	mov	r10,32768
8000680e:	ea 1a c0 ff 	orh	r10,0xc0ff
80006812:	e0 6b 08 41 	mov	r11,2113
80006816:	10 9c       	mov	r12,r8
80006818:	f0 1f 01 ff 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
8000681c:	18 98       	mov	r8,r12
8000681e:	58 08       	cp.w	r8,0
80006820:	c2 a1       	brne	80006874 <sd_mmc_mci_card_init+0x104>
  {
    // MMC cards always respond to MMC_SEND_OP_COND
    g_card_type[slot] = MMC_CARD;
80006822:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006826:	fe fa 07 da 	ld.w	r10,pc[2010]
8000682a:	30 18       	mov	r8,1
8000682c:	f4 09 0b 08 	st.b	r10[r9],r8
    response = mci_read_response(mci);
80006830:	fe f8 07 dc 	ld.w	r8,pc[2012]
80006834:	70 08       	ld.w	r8,r8[0x0]
80006836:	10 9c       	mov	r12,r8
80006838:	f0 1f 01 f8 	mcall	80007018 <sd_mmc_mci_card_init+0x8a8>
8000683c:	18 98       	mov	r8,r12
8000683e:	ef 48 ff c0 	st.w	r7[-64],r8
    if( !(response & OCR_MSK_BUSY) )
80006842:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006846:	58 08       	cp.w	r8,0
80006848:	cd d4       	brge	80006802 <sd_mmc_mci_card_init+0x92>
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
8000684a:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000684e:	e6 18 40 00 	andh	r8,0x4000,COH
80006852:	e0 80 00 97 	breq	80006980 <sd_mmc_mci_card_init+0x210>
    {
      g_card_type[slot] |= MMC_CARD_HC;
80006856:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000685a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000685e:	fe fa 07 a2 	ld.w	r10,pc[1954]
80006862:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006866:	a5 b8       	sbr	r8,0x5
80006868:	5c 58       	castu.b	r8
8000686a:	fe fa 07 96 	ld.w	r10,pc[1942]
8000686e:	f4 09 0b 08 	st.b	r10[r9],r8
80006872:	c8 88       	rjmp	80006982 <sd_mmc_mci_card_init+0x212>
    }
  }
  else
  {
    // SD cards do not respond to MMC_SEND_OP_COND
    g_card_type[slot] = SD_CARD;
80006874:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006878:	fe fa 07 88 	ld.w	r10,pc[1928]
8000687c:	30 28       	mov	r8,2
8000687e:	f4 09 0b 08 	st.b	r10[r9],r8

    //-- (CMD8)
    // enables to expand new functionality to some existing commands supported only by SD HC card
    if (mci_send_cmd(mci, SD_MMC_SD_SEND_IF_COND_CMD, 0x000001AA)==MCI_SUCCESS)
80006882:	fe f8 07 8a 	ld.w	r8,pc[1930]
80006886:	70 08       	ld.w	r8,r8[0x0]
80006888:	e0 6a 01 aa 	mov	r10,426
8000688c:	e0 6b 10 48 	mov	r11,4168
80006890:	10 9c       	mov	r12,r8
80006892:	f0 1f 01 e1 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
80006896:	18 98       	mov	r8,r12
80006898:	58 08       	cp.w	r8,0
8000689a:	c1 b1       	brne	800068d0 <sd_mmc_mci_card_init+0x160>
    {
      // It is a SD HC
      if( 0x000001AA == mci_read_response(mci))
8000689c:	fe f8 07 70 	ld.w	r8,pc[1904]
800068a0:	70 08       	ld.w	r8,r8[0x0]
800068a2:	10 9c       	mov	r12,r8
800068a4:	f0 1f 01 dd 	mcall	80007018 <sd_mmc_mci_card_init+0x8a8>
800068a8:	18 98       	mov	r8,r12
800068aa:	e0 48 01 aa 	cp.w	r8,426
800068ae:	c1 11       	brne	800068d0 <sd_mmc_mci_card_init+0x160>
      {
        g_card_type[slot] |= SD_CARD_V2;
800068b0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800068b4:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800068b8:	fe fa 07 48 	ld.w	r10,pc[1864]
800068bc:	f4 08 07 08 	ld.ub	r8,r10[r8]
800068c0:	a3 b8       	sbr	r8,0x3
800068c2:	5c 58       	castu.b	r8
800068c4:	fe fa 07 3c 	ld.w	r10,pc[1852]
800068c8:	f4 09 0b 08 	st.b	r10[r9],r8
800068cc:	c0 28       	rjmp	800068d0 <sd_mmc_mci_card_init+0x160>
    response = mci_read_response(mci);

    if( !(response & OCR_MSK_BUSY) )
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
800068ce:	d7 03       	nop

sd_mmc_init_step2:
    //-- (CMD55)
    // Indicates to the card that the next command is an application specific command rather than a standard command
    // CMD55 shall always precede ACMD41
    if (mci_send_cmd(mci, SD_MMC_APP_CMD, 0)!=MCI_SUCCESS)
800068d0:	fe f8 07 3c 	ld.w	r8,pc[1852]
800068d4:	70 08       	ld.w	r8,r8[0x0]
800068d6:	30 0a       	mov	r10,0
800068d8:	e0 6b 10 77 	mov	r11,4215
800068dc:	10 9c       	mov	r12,r8
800068de:	f0 1f 01 ce 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
800068e2:	18 98       	mov	r8,r12
800068e4:	58 08       	cp.w	r8,0
800068e6:	c0 40       	breq	800068ee <sd_mmc_mci_card_init+0x17e>
      return false;
800068e8:	30 08       	mov	r8,0
800068ea:	e0 8f 03 84 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>

    //-- (ACMD41)
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
800068ee:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800068f2:	fe f9 07 0e 	ld.w	r9,pc[1806]
800068f6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800068fa:	e2 18 00 08 	andl	r8,0x8,COH
800068fe:	c1 00       	breq	8000691e <sd_mmc_mci_card_init+0x1ae>
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
80006900:	fe f8 07 0c 	ld.w	r8,pc[1804]
80006904:	70 08       	ld.w	r8,r8[0x0]
80006906:	fc 1a c0 10 	movh	r10,0xc010
8000690a:	36 9b       	mov	r11,105
8000690c:	10 9c       	mov	r12,r8
8000690e:	f0 1f 01 c2 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
80006912:	18 98       	mov	r8,r12
80006914:	58 08       	cp.w	r8,0
80006916:	c1 30       	breq	8000693c <sd_mmc_mci_card_init+0x1cc>
        return false;
80006918:	30 08       	mov	r8,0
8000691a:	e0 8f 03 6c 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>
    }
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
8000691e:	fe f8 06 ee 	ld.w	r8,pc[1774]
80006922:	70 08       	ld.w	r8,r8[0x0]
80006924:	fc 1a 80 10 	movh	r10,0x8010
80006928:	36 9b       	mov	r11,105
8000692a:	10 9c       	mov	r12,r8
8000692c:	f0 1f 01 ba 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
80006930:	18 98       	mov	r8,r12
80006932:	58 08       	cp.w	r8,0
80006934:	c0 50       	breq	8000693e <sd_mmc_mci_card_init+0x1ce>
        return false;
80006936:	30 08       	mov	r8,0
80006938:	e0 8f 03 5d 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
        return false;
8000693c:	d7 03       	nop
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
        return false;
    }
    response = mci_read_response(mci);
8000693e:	fe f8 06 ce 	ld.w	r8,pc[1742]
80006942:	70 08       	ld.w	r8,r8[0x0]
80006944:	10 9c       	mov	r12,r8
80006946:	f0 1f 01 b5 	mcall	80007018 <sd_mmc_mci_card_init+0x8a8>
8000694a:	18 98       	mov	r8,r12
8000694c:	ef 48 ff c0 	st.w	r7[-64],r8

    if( !(response & OCR_MSK_BUSY) )
80006950:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006954:	58 08       	cp.w	r8,0
80006956:	cb c4       	brge	800068ce <sd_mmc_mci_card_init+0x15e>
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
    }
    // Card read then check HC type
    if (response & OCR_MSK_HC)
80006958:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000695c:	e6 18 40 00 	andh	r8,0x4000,COH
80006960:	c1 10       	breq	80006982 <sd_mmc_mci_card_init+0x212>
    {
      g_card_type[slot] |= SD_CARD_HC;  // Card SD High Capacity
80006962:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006966:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000696a:	fe fa 06 96 	ld.w	r10,pc[1686]
8000696e:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006972:	a5 a8       	sbr	r8,0x4
80006974:	5c 58       	castu.b	r8
80006976:	fe fa 06 8a 	ld.w	r10,pc[1674]
8000697a:	f4 09 0b 08 	st.b	r10[r9],r8
8000697e:	c0 28       	rjmp	80006982 <sd_mmc_mci_card_init+0x212>
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
    {
      g_card_type[slot] |= MMC_CARD_HC;
80006980:	d7 03       	nop

  // Here card ready and type (MMC <V4, MMC V4, MMC HC, SD V1, SD V2 HC) detected

  //-- (CMD2)
  // Send CID
  if (mci_send_cmd(mci, SD_MMC_ALL_SEND_CID_CMD, 0)!=MCI_SUCCESS)
80006982:	fe f8 06 8a 	ld.w	r8,pc[1674]
80006986:	70 08       	ld.w	r8,r8[0x0]
80006988:	30 0a       	mov	r10,0
8000698a:	e0 6b 00 82 	mov	r11,130
8000698e:	10 9c       	mov	r12,r8
80006990:	f0 1f 01 a1 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
80006994:	18 98       	mov	r8,r12
80006996:	58 08       	cp.w	r8,0
80006998:	c0 40       	breq	800069a0 <sd_mmc_mci_card_init+0x230>
    return false;
8000699a:	30 08       	mov	r8,0
8000699c:	e0 8f 03 2b 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>

  //-- (CMD3)
  // Set relative address
  if(MMC_CARD & g_card_type[slot])
800069a0:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800069a4:	fe f9 06 5c 	ld.w	r9,pc[1628]
800069a8:	f2 08 07 08 	ld.ub	r8,r9[r8]
800069ac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800069b0:	5c 58       	castu.b	r8
800069b2:	c1 90       	breq	800069e4 <sd_mmc_mci_card_init+0x274>
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
800069b4:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800069b8:	fe f8 06 64 	ld.w	r8,pc[1636]
800069bc:	e0 7a ff ff 	mov	r10,131071
800069c0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
800069c4:	fe f8 06 48 	ld.w	r8,pc[1608]
800069c8:	70 08       	ld.w	r8,r8[0x0]
800069ca:	e0 7a ff ff 	mov	r10,131071
800069ce:	e0 6b 10 43 	mov	r11,4163
800069d2:	10 9c       	mov	r12,r8
800069d4:	f0 1f 01 90 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
800069d8:	18 98       	mov	r8,r12
800069da:	58 08       	cp.w	r8,0
800069dc:	c1 30       	breq	80006a02 <sd_mmc_mci_card_init+0x292>
      return false;
800069de:	30 08       	mov	r8,0
800069e0:	e0 8f 03 09 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>
  }
  else
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
800069e4:	fe f8 06 28 	ld.w	r8,pc[1576]
800069e8:	70 08       	ld.w	r8,r8[0x0]
800069ea:	30 0a       	mov	r10,0
800069ec:	e0 6b 10 43 	mov	r11,4163
800069f0:	10 9c       	mov	r12,r8
800069f2:	f0 1f 01 89 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
800069f6:	18 98       	mov	r8,r12
800069f8:	58 08       	cp.w	r8,0
800069fa:	c0 50       	breq	80006a04 <sd_mmc_mci_card_init+0x294>
      return false;
800069fc:	30 08       	mov	r8,0
800069fe:	e0 8f 02 fa 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>
  if(MMC_CARD & g_card_type[slot])
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
      return false;
80006a02:	d7 03       	nop
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
      return false;
  }
  if (SD_CARD & g_card_type[slot])
80006a04:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a08:	fe f9 05 f8 	ld.w	r9,pc[1528]
80006a0c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006a10:	e2 18 00 02 	andl	r8,0x2,COH
80006a14:	c1 10       	breq	80006a36 <sd_mmc_mci_card_init+0x2c6>
  {
    // For SD  card, you receive address of card
    g_card_rca[slot] = mci_read_response(mci) & RCA_MSK_ADR ;
80006a16:	ef 36 ff a4 	ld.ub	r6,r7[-92]
80006a1a:	fe f8 05 f2 	ld.w	r8,pc[1522]
80006a1e:	70 08       	ld.w	r8,r8[0x0]
80006a20:	10 9c       	mov	r12,r8
80006a22:	f0 1f 01 7e 	mcall	80007018 <sd_mmc_mci_card_init+0x8a8>
80006a26:	18 98       	mov	r8,r12
80006a28:	10 99       	mov	r9,r8
80006a2a:	e0 19 00 00 	andl	r9,0x0
80006a2e:	fe f8 05 ee 	ld.w	r8,pc[1518]
80006a32:	f0 06 09 29 	st.w	r8[r6<<0x2],r9
  }


  //-- (CMD9)
  // Read & analyze CSD register
  if (sd_mmc_mci_get_csd(slot)!=true)
80006a36:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a3a:	10 9c       	mov	r12,r8
80006a3c:	f0 1f 01 79 	mcall	80007020 <sd_mmc_mci_card_init+0x8b0>
80006a40:	18 98       	mov	r8,r12
80006a42:	ec 18 00 01 	eorl	r8,0x1
80006a46:	5c 58       	castu.b	r8
80006a48:	c0 40       	breq	80006a50 <sd_mmc_mci_card_init+0x2e0>
    return false;
80006a4a:	30 08       	mov	r8,0
80006a4c:	e0 8f 02 d3 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>


  //-- (CMD7)-R1b
  // select card
  if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006a50:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006a54:	fe f8 05 c8 	ld.w	r8,pc[1480]
80006a58:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006a5c:	fe f8 05 b0 	ld.w	r8,pc[1456]
80006a60:	70 08       	ld.w	r8,r8[0x0]
80006a62:	12 9a       	mov	r10,r9
80006a64:	e0 6b 10 c7 	mov	r11,4295
80006a68:	10 9c       	mov	r12,r8
80006a6a:	f0 1f 01 6b 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
80006a6e:	18 98       	mov	r8,r12
80006a70:	58 08       	cp.w	r8,0
80006a72:	c0 40       	breq	80006a7a <sd_mmc_mci_card_init+0x30a>
    return false;
80006a74:	30 08       	mov	r8,0
80006a76:	e0 8f 02 be 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>

  // Wait end of busy
  mci_wait_busy_signal(mci);// read busy state on DAT0
80006a7a:	fe f8 05 92 	ld.w	r8,pc[1426]
80006a7e:	70 08       	ld.w	r8,r8[0x0]
80006a80:	10 9c       	mov	r12,r8
80006a82:	f0 1f 01 69 	mcall	80007024 <sd_mmc_mci_card_init+0x8b4>

  // Get clock by checking the extended CSD register
  if (MMC_CARD_V4 & g_card_type[slot])
80006a86:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a8a:	fe f9 05 76 	ld.w	r9,pc[1398]
80006a8e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006a92:	e2 18 00 04 	andl	r8,0x4,COH
80006a96:	c0 e0       	breq	80006ab2 <sd_mmc_mci_card_init+0x342>
  {
    // Get clock (MMC V4) and size (MMC V4 HC) by checking the extended CSD register
      //-- (CMD8)
    if (sd_mmc_get_ext_csd(slot)!=true)
80006a98:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a9c:	10 9c       	mov	r12,r8
80006a9e:	f0 1f 01 63 	mcall	80007028 <sd_mmc_mci_card_init+0x8b8>
80006aa2:	18 98       	mov	r8,r12
80006aa4:	ec 18 00 01 	eorl	r8,0x1
80006aa8:	5c 58       	castu.b	r8
80006aaa:	c0 40       	breq	80006ab2 <sd_mmc_mci_card_init+0x342>
         return false;
80006aac:	30 08       	mov	r8,0
80006aae:	e0 8f 02 a2 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>
  }


#if (SD_4_BIT == ENABLE)
  // set bus size
  if (SD_CARD & g_card_type[slot])
80006ab2:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006ab6:	fe f9 05 4a 	ld.w	r9,pc[1354]
80006aba:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006abe:	e2 18 00 02 	andl	r8,0x2,COH
80006ac2:	c4 00       	breq	80006b42 <sd_mmc_mci_card_init+0x3d2>
  {
    // set 4-bit bus for SD Card
    //-- (CMD55)
    if(mci_send_cmd(mci, SD_MMC_APP_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006ac4:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006ac8:	fe f8 05 54 	ld.w	r8,pc[1364]
80006acc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006ad0:	fe f8 05 3c 	ld.w	r8,pc[1340]
80006ad4:	70 08       	ld.w	r8,r8[0x0]
80006ad6:	12 9a       	mov	r10,r9
80006ad8:	e0 6b 10 77 	mov	r11,4215
80006adc:	10 9c       	mov	r12,r8
80006ade:	f0 1f 01 4e 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
80006ae2:	18 98       	mov	r8,r12
80006ae4:	58 08       	cp.w	r8,0
80006ae6:	c0 40       	breq	80006aee <sd_mmc_mci_card_init+0x37e>
      return false;
80006ae8:	30 08       	mov	r8,0
80006aea:	e0 8f 02 84 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>

    //-- (CMD6)
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
80006aee:	fe f8 05 1e 	ld.w	r8,pc[1310]
80006af2:	70 08       	ld.w	r8,r8[0x0]
80006af4:	30 2a       	mov	r10,2
80006af6:	e0 6b 10 46 	mov	r11,4166
80006afa:	10 9c       	mov	r12,r8
80006afc:	f0 1f 01 46 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
80006b00:	18 98       	mov	r8,r12
80006b02:	58 08       	cp.w	r8,0
80006b04:	c0 40       	breq	80006b0c <sd_mmc_mci_card_init+0x39c>
      return false;
80006b06:	30 08       	mov	r8,0
80006b08:	e0 8f 02 75 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
80006b0c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006b10:	fe fa 04 f4 	ld.w	r10,pc[1268]
80006b14:	30 28       	mov	r8,2
80006b16:	f4 09 0b 08 	st.b	r10[r9],r8
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
80006b1a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006b1e:	fe f9 04 e6 	ld.w	r9,pc[1254]
80006b22:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006b26:	10 99       	mov	r9,r8
80006b28:	fe f8 04 e4 	ld.w	r8,pc[1252]
80006b2c:	70 08       	ld.w	r8,r8[0x0]
80006b2e:	12 9b       	mov	r11,r9
80006b30:	10 9c       	mov	r12,r8
80006b32:	f0 1f 01 3f 	mcall	8000702c <sd_mmc_mci_card_init+0x8bc>
80006b36:	18 98       	mov	r8,r12
80006b38:	58 08       	cp.w	r8,0
80006b3a:	c4 00       	breq	80006bba <sd_mmc_mci_card_init+0x44a>
      return false;
80006b3c:	30 08       	mov	r8,0
80006b3e:	e0 8f 02 5a 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>
  }
  else // MMC bus width management
  {
    // set 8-bit bus for MMC Card
    if (MMC_CARD_V4 & g_card_type[slot])
80006b42:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006b46:	fe f9 04 ba 	ld.w	r9,pc[1210]
80006b4a:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006b4e:	e2 18 00 04 	andl	r8,0x4,COH
80006b52:	c3 50       	breq	80006bbc <sd_mmc_mci_card_init+0x44c>
    {
      //-- (CMD6)-R1b
      // set 8-bit bus width (appeared from V4.0 specification)
      if (mci_send_cmd( mci,
80006b54:	fe f8 04 b8 	ld.w	r8,pc[1208]
80006b58:	70 08       	ld.w	r8,r8[0x0]
80006b5a:	e0 6a 02 03 	mov	r10,515
80006b5e:	ea 1a 03 b7 	orh	r10,0x3b7
80006b62:	e0 6b 10 c6 	mov	r11,4294
80006b66:	10 9c       	mov	r12,r8
80006b68:	f0 1f 01 2b 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
80006b6c:	18 98       	mov	r8,r12
80006b6e:	58 08       	cp.w	r8,0
80006b70:	c0 40       	breq	80006b78 <sd_mmc_mci_card_init+0x408>
                        ( (uint32_t)MMC_SWITCH_WRITE     <<24)|
                          ((uint32_t)MMC_SWITCH_BUS_WIDTH<<16)|
                          ((uint32_t)MMC_SWITCH_VAL_8BIT << 8)|
                          ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
80006b72:	30 08       	mov	r8,0
80006b74:	e0 8f 02 3f 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006b78:	fe f8 04 94 	ld.w	r8,pc[1172]
80006b7c:	70 08       	ld.w	r8,r8[0x0]
80006b7e:	10 9c       	mov	r12,r8
80006b80:	f0 1f 01 29 	mcall	80007024 <sd_mmc_mci_card_init+0x8b4>
      g_card_bus_width[slot] = MCI_BUS_SIZE_8_BIT;
80006b84:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006b88:	fe fa 04 7c 	ld.w	r10,pc[1148]
80006b8c:	30 38       	mov	r8,3
80006b8e:	f4 09 0b 08 	st.b	r10[r9],r8
      if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
80006b92:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006b96:	fe f9 04 6e 	ld.w	r9,pc[1134]
80006b9a:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006b9e:	10 99       	mov	r9,r8
80006ba0:	fe f8 04 6c 	ld.w	r8,pc[1132]
80006ba4:	70 08       	ld.w	r8,r8[0x0]
80006ba6:	12 9b       	mov	r11,r9
80006ba8:	10 9c       	mov	r12,r8
80006baa:	f0 1f 01 21 	mcall	8000702c <sd_mmc_mci_card_init+0x8bc>
80006bae:	18 98       	mov	r8,r12
80006bb0:	58 08       	cp.w	r8,0
80006bb2:	c0 50       	breq	80006bbc <sd_mmc_mci_card_init+0x44c>
       return false;
80006bb4:	30 08       	mov	r8,0
80006bb6:	e0 8f 02 1e 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
      return false;

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
      return false;
80006bba:	d7 03       	nop
       return false;
    }
  }
#endif

   if (MMC_CARD_V4 & g_card_type[slot])
80006bbc:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006bc0:	fe f9 04 40 	ld.w	r9,pc[1088]
80006bc4:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006bc8:	e2 18 00 04 	andl	r8,0x4,COH
80006bcc:	c1 90       	breq	80006bfe <sd_mmc_mci_card_init+0x48e>
   {
      //-- (CMD6)-R1b
      // set high speed interface timing
      if (mci_send_cmd( mci,
80006bce:	fe f8 04 3e 	ld.w	r8,pc[1086]
80006bd2:	70 08       	ld.w	r8,r8[0x0]
80006bd4:	e0 6a 01 03 	mov	r10,259
80006bd8:	ea 1a 03 b9 	orh	r10,0x3b9
80006bdc:	e0 6b 10 c6 	mov	r11,4294
80006be0:	10 9c       	mov	r12,r8
80006be2:	f0 1f 01 0d 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
80006be6:	18 98       	mov	r8,r12
80006be8:	58 08       	cp.w	r8,0
80006bea:	c0 40       	breq	80006bf2 <sd_mmc_mci_card_init+0x482>
                        ((uint32_t)MMC_SWITCH_WRITE     <<24)|
                        ((uint32_t)MMC_SWITCH_HIGH_SPEED<<16)|
                        ((uint32_t)MMC_SWITCH_VAL_HS    << 8)|
                        ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
80006bec:	30 08       	mov	r8,0
80006bee:	e0 8f 02 02 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);
80006bf2:	fe f8 04 1a 	ld.w	r8,pc[1050]
80006bf6:	70 08       	ld.w	r8,r8[0x0]
80006bf8:	10 9c       	mov	r12,r8
80006bfa:	f0 1f 01 0b 	mcall	80007024 <sd_mmc_mci_card_init+0x8b4>
   }


   if( SD_CARD_V2 & g_card_type[slot] )
80006bfe:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006c02:	fe f9 03 fe 	ld.w	r9,pc[1022]
80006c06:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006c0a:	e2 18 00 08 	andl	r8,0x8,COH
80006c0e:	e0 80 01 ae 	breq	80006f6a <sd_mmc_mci_card_init+0x7fa>
#define SDMMC_SWITCH_FUNC_G3_KEEP     (0xf << 8)  /**< Group 3 No influence */
#define SDMMC_SWITCH_FUNC_G4_KEEP     (0xf << 12) /**< Group 4 No influence */
#define SDMMC_SWITCH_FUNC_G5_KEEP     (0xf << 16) /**< Group 5 No influence */
#define SDMMC_SWITCH_FUNC_G6_KEEP     (0xf << 20) /**< Group 6 No influence */

      mci_set_block_size(mci, 512/8); // CMD6 512 bits status
80006c12:	fe f8 03 fa 	ld.w	r8,pc[1018]
80006c16:	70 08       	ld.w	r8,r8[0x0]
80006c18:	34 0b       	mov	r11,64
80006c1a:	10 9c       	mov	r12,r8
80006c1c:	f0 1f 01 05 	mcall	80007030 <sd_mmc_mci_card_init+0x8c0>
      mci_set_block_count(mci, 1);
80006c20:	fe f8 03 ec 	ld.w	r8,pc[1004]
80006c24:	70 08       	ld.w	r8,r8[0x0]
80006c26:	30 1b       	mov	r11,1
80006c28:	10 9c       	mov	r12,r8
80006c2a:	f0 1f 01 03 	mcall	80007034 <sd_mmc_mci_card_init+0x8c4>

      //-- (CMD6)
      // Check if we can enter into the High Speed mode.
      if (mci_send_cmd( mci
80006c2e:	fe f8 03 de 	ld.w	r8,pc[990]
80006c32:	70 08       	ld.w	r8,r8[0x0]
80006c34:	30 1a       	mov	r10,1
80006c36:	e4 7b 10 46 	mov	r11,331846
80006c3a:	10 9c       	mov	r12,r8
80006c3c:	f0 1f 00 f6 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
80006c40:	18 98       	mov	r8,r12
80006c42:	58 08       	cp.w	r8,0
80006c44:	c0 40       	breq	80006c4c <sd_mmc_mci_card_init+0x4dc>
                      , SD_SWITCH_FUNC
                      , SDMMC_SWITCH_FUNC_MODE_CHECK | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006c46:	30 08       	mov	r8,0
80006c48:	e0 8f 01 d5 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006c4c:	fe f8 03 c0 	ld.w	r8,pc[960]
80006c50:	70 08       	ld.w	r8,r8[0x0]
80006c52:	10 9c       	mov	r12,r8
80006c54:	f0 1f 00 f4 	mcall	80007024 <sd_mmc_mci_card_init+0x8b4>

      bool b_hs_supported=false;
80006c58:	30 08       	mov	r8,0
80006c5a:	ef 68 ff c5 	st.b	r7[-59],r8
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006c5e:	30 08       	mov	r8,0
80006c60:	ef 68 ff c6 	st.b	r7[-58],r8
80006c64:	c4 18       	rjmp	80006ce6 <sd_mmc_mci_card_init+0x576>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006c66:	fe f8 03 a6 	ld.w	r8,pc[934]
80006c6a:	70 08       	ld.w	r8,r8[0x0]
80006c6c:	ef 48 ff c8 	st.w	r7[-56],r8
80006c70:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006c74:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006c78:	fe f8 03 c0 	ld.w	r8,pc[960]
80006c7c:	70 08       	ld.w	r8,r8[0x0]
80006c7e:	10 99       	mov	r9,r8
80006c80:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006c84:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006c88:	71 08       	ld.w	r8,r8[0x40]
80006c8a:	f3 e8 10 08 	or	r8,r9,r8
80006c8e:	10 99       	mov	r9,r8
80006c90:	fe f8 03 a8 	ld.w	r8,pc[936]
80006c94:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006c96:	fe f8 03 a2 	ld.w	r8,pc[930]
80006c9a:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006c9c:	e2 18 00 02 	andl	r8,0x2,COH
80006ca0:	5f 18       	srne	r8
80006ca2:	58 08       	cp.w	r8,0
80006ca4:	ce 10       	breq	80006c66 <sd_mmc_mci_card_init+0x4f6>
          data = mci_rd_data(mci);
80006ca6:	fe f8 03 66 	ld.w	r8,pc[870]
80006caa:	70 08       	ld.w	r8,r8[0x0]
80006cac:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006cb0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006cb4:	70 c8       	ld.w	r8,r8[0x30]
80006cb6:	ef 48 ff ac 	st.w	r7[-84],r8
          if(i==16)
80006cba:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006cbe:	31 08       	mov	r8,16
80006cc0:	f0 09 18 00 	cp.b	r9,r8
80006cc4:	c0 c1       	brne	80006cdc <sd_mmc_mci_card_init+0x56c>
          {
            if(((data>>24)&0xf)==1)
80006cc6:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006cca:	b9 88       	lsr	r8,0x18
80006ccc:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006cd0:	58 18       	cp.w	r8,1
80006cd2:	c1 21       	brne	80006cf6 <sd_mmc_mci_card_init+0x586>
              b_hs_supported = true;
80006cd4:	30 18       	mov	r8,1
80006cd6:	ef 68 ff c5 	st.b	r7[-59],r8
            break;
80006cda:	c0 f8       	rjmp	80006cf8 <sd_mmc_mci_card_init+0x588>
      mci_wait_busy_signal(mci);// read busy state on DAT0

      bool b_hs_supported=false;
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006cdc:	ef 38 ff c6 	ld.ub	r8,r7[-58]
80006ce0:	2f c8       	sub	r8,-4
80006ce2:	ef 68 ff c6 	st.b	r7[-58],r8
80006ce6:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006cea:	33 f8       	mov	r8,63
80006cec:	f0 09 18 00 	cp.b	r9,r8
80006cf0:	fe 98 ff bb 	brls	80006c66 <sd_mmc_mci_card_init+0x4f6>
80006cf4:	c0 28       	rjmp	80006cf8 <sd_mmc_mci_card_init+0x588>
          data = mci_rd_data(mci);
          if(i==16)
          {
            if(((data>>24)&0xf)==1)
              b_hs_supported = true;
            break;
80006cf6:	d7 03       	nop
          }
        }
      }

      if (b_hs_supported==false )
80006cf8:	ef 38 ff c5 	ld.ub	r8,r7[-59]
80006cfc:	ec 18 00 01 	eorl	r8,0x1
80006d00:	5c 58       	castu.b	r8
80006d02:	e0 81 01 33 	brne	80006f68 <sd_mmc_mci_card_init+0x7f8>
        goto sd_mmc_init_step3;

      if (mci_send_cmd( mci
80006d06:	fe f8 03 06 	ld.w	r8,pc[774]
80006d0a:	70 08       	ld.w	r8,r8[0x0]
80006d0c:	e0 6a ff f1 	mov	r10,65521
80006d10:	ea 1a 80 ff 	orh	r10,0x80ff
80006d14:	e4 7b 10 46 	mov	r11,331846
80006d18:	10 9c       	mov	r12,r8
80006d1a:	f0 1f 00 bf 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
80006d1e:	18 98       	mov	r8,r12
80006d20:	58 08       	cp.w	r8,0
80006d22:	c0 40       	breq	80006d2a <sd_mmc_mci_card_init+0x5ba>
                      | SDMMC_SWITCH_FUNC_G3_KEEP
                      | SDMMC_SWITCH_FUNC_G2_KEEP
                      | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006d24:	30 08       	mov	r8,0
80006d26:	e0 8f 01 66 	bral	80006ff2 <sd_mmc_mci_card_init+0x882>
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006d2a:	30 08       	mov	r8,0
80006d2c:	ef 68 ff c7 	st.b	r7[-57],r8
80006d30:	c3 08       	rjmp	80006d90 <sd_mmc_mci_card_init+0x620>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006d32:	fe f8 02 da 	ld.w	r8,pc[730]
80006d36:	70 08       	ld.w	r8,r8[0x0]
80006d38:	ef 48 ff d4 	st.w	r7[-44],r8
80006d3c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006d40:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006d44:	fe f8 02 f4 	ld.w	r8,pc[756]
80006d48:	70 08       	ld.w	r8,r8[0x0]
80006d4a:	10 99       	mov	r9,r8
80006d4c:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006d50:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006d54:	71 08       	ld.w	r8,r8[0x40]
80006d56:	f3 e8 10 08 	or	r8,r9,r8
80006d5a:	10 99       	mov	r9,r8
80006d5c:	fe f8 02 dc 	ld.w	r8,pc[732]
80006d60:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006d62:	fe f8 02 d6 	ld.w	r8,pc[726]
80006d66:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006d68:	e2 18 00 02 	andl	r8,0x2,COH
80006d6c:	5f 18       	srne	r8
80006d6e:	58 08       	cp.w	r8,0
80006d70:	ce 10       	breq	80006d32 <sd_mmc_mci_card_init+0x5c2>
          data = mci_rd_data(mci);
80006d72:	fe f8 02 9a 	ld.w	r8,pc[666]
80006d76:	70 08       	ld.w	r8,r8[0x0]
80006d78:	ef 48 ff dc 	st.w	r7[-36],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006d7c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006d80:	70 c8       	ld.w	r8,r8[0x30]
80006d82:	ef 48 ff a8 	st.w	r7[-88],r8
      {
        return false;
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006d86:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006d8a:	2f c8       	sub	r8,-4
80006d8c:	ef 68 ff c7 	st.b	r7[-57],r8
80006d90:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006d94:	33 f8       	mov	r8,63
80006d96:	f0 09 18 00 	cp.b	r9,r8
80006d9a:	fe 98 ff cc 	brls	80006d32 <sd_mmc_mci_card_init+0x5c2>

      /* A 8 cycle delay is required after switch command
       * @ 200KHz clock this should be 40 uS, but we use
       * 80 to handle imprecise clock setting.
       */
      cpu_delay_us(80, g_cpu_hz);
80006d9e:	fe f8 02 9e 	ld.w	r8,pc[670]
80006da2:	70 08       	ld.w	r8,r8[0x0]
80006da4:	35 09       	mov	r9,80
80006da6:	ef 49 ff e4 	st.w	r7[-28],r9
80006daa:	ef 48 ff e0 	st.w	r7[-32],r8
80006dae:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006db2:	ef 48 ff ec 	st.w	r7[-20],r8
80006db6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006dba:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80006dbe:	ee f0 ff ec 	ld.w	r0,r7[-20]
80006dc2:	30 01       	mov	r1,0
80006dc4:	ee f2 ff e8 	ld.w	r2,r7[-24]
80006dc8:	30 03       	mov	r3,0
80006dca:	e2 02 02 4a 	mul	r10,r1,r2
80006dce:	e6 00 02 48 	mul	r8,r3,r0
80006dd2:	10 0a       	add	r10,r8
80006dd4:	e0 02 06 48 	mulu.d	r8,r0,r2
80006dd8:	12 0a       	add	r10,r9
80006dda:	14 99       	mov	r9,r10
80006ddc:	ee 7a 42 3f 	mov	r10,999999
80006de0:	30 0b       	mov	r11,0
80006de2:	f0 0a 00 0a 	add	r10,r8,r10
80006de6:	f2 0b 00 4b 	adc	r11,r9,r11
80006dea:	ee 78 42 40 	mov	r8,1000000
80006dee:	30 09       	mov	r9,0
80006df0:	f0 1f 00 94 	mcall	80007040 <sd_mmc_mci_card_init+0x8d0>
80006df4:	14 98       	mov	r8,r10
80006df6:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80006df8:	ef 48 ff f4 	st.w	r7[-12],r8
80006dfc:	ee c8 00 50 	sub	r8,r7,80
80006e00:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006e04:	e1 b8 00 42 	mfsr	r8,0x108
80006e08:	10 99       	mov	r9,r8
80006e0a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e0e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006e10:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e14:	70 09       	ld.w	r9,r8[0x0]
80006e16:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006e1a:	10 09       	add	r9,r8
80006e1c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e20:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006e22:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006e26:	30 08       	mov	r8,0
80006e28:	f3 68 00 08 	st.b	r9[8],r8
80006e2c:	ee c8 00 50 	sub	r8,r7,80
80006e30:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006e34:	e1 b8 00 42 	mfsr	r8,0x108
80006e38:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006e3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e40:	f1 39 00 08 	ld.ub	r9,r8[8]
80006e44:	30 28       	mov	r8,2
80006e46:	f0 09 18 00 	cp.b	r9,r8
80006e4a:	c0 31       	brne	80006e50 <sd_mmc_mci_card_init+0x6e0>
    return false;
80006e4c:	30 08       	mov	r8,0
80006e4e:	c4 38       	rjmp	80006ed4 <sd_mmc_mci_card_init+0x764>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006e50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e54:	f1 39 00 08 	ld.ub	r9,r8[8]
80006e58:	30 18       	mov	r8,1
80006e5a:	f0 09 18 00 	cp.b	r9,r8
80006e5e:	c0 31       	brne	80006e64 <sd_mmc_mci_card_init+0x6f4>
    return true;
80006e60:	30 18       	mov	r8,1
80006e62:	c3 98       	rjmp	80006ed4 <sd_mmc_mci_card_init+0x764>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006e64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e68:	70 09       	ld.w	r9,r8[0x0]
80006e6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e6e:	70 18       	ld.w	r8,r8[0x4]
80006e70:	10 39       	cp.w	r9,r8
80006e72:	e0 88 00 1a 	brls	80006ea6 <sd_mmc_mci_card_init+0x736>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006e76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e7a:	70 08       	ld.w	r8,r8[0x0]
80006e7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006e80:	10 39       	cp.w	r9,r8
80006e82:	c1 02       	brcc	80006ea2 <sd_mmc_mci_card_init+0x732>
80006e84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e88:	70 18       	ld.w	r8,r8[0x4]
80006e8a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006e8e:	10 39       	cp.w	r9,r8
80006e90:	e0 88 00 09 	brls	80006ea2 <sd_mmc_mci_card_init+0x732>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006e94:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006e98:	30 18       	mov	r8,1
80006e9a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006e9e:	30 18       	mov	r8,1
80006ea0:	c1 a8       	rjmp	80006ed4 <sd_mmc_mci_card_init+0x764>
    }
    return false;
80006ea2:	30 08       	mov	r8,0
80006ea4:	c1 88       	rjmp	80006ed4 <sd_mmc_mci_card_init+0x764>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006ea6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006eaa:	70 08       	ld.w	r8,r8[0x0]
80006eac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006eb0:	10 39       	cp.w	r9,r8
80006eb2:	c0 93       	brcs	80006ec4 <sd_mmc_mci_card_init+0x754>
80006eb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006eb8:	70 18       	ld.w	r8,r8[0x4]
80006eba:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006ebe:	10 39       	cp.w	r9,r8
80006ec0:	e0 88 00 09 	brls	80006ed2 <sd_mmc_mci_card_init+0x762>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006ec4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006ec8:	30 18       	mov	r8,1
80006eca:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006ece:	30 18       	mov	r8,1
80006ed0:	c0 28       	rjmp	80006ed4 <sd_mmc_mci_card_init+0x764>
    }
    return false;
80006ed2:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006ed4:	58 08       	cp.w	r8,0
80006ed6:	ca b0       	breq	80006e2c <sd_mmc_mci_card_init+0x6bc>
      union u_cfg{
        unsigned long     cfg;
        avr32_mci_cfg_t   CFG;
      };
      union u_cfg val;
      val.cfg = mci->cfg;
80006ed8:	4c d8       	lddpc	r8,8000700c <sd_mmc_mci_card_init+0x89c>
80006eda:	70 08       	ld.w	r8,r8[0x0]
80006edc:	71 58       	ld.w	r8,r8[0x54]
80006ede:	ef 48 ff bc 	st.w	r7[-68],r8
      val.CFG.hsmode = 1;
80006ee2:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006ee6:	30 19       	mov	r9,1
80006ee8:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80006eec:	ef 48 ff bc 	st.w	r7[-68],r8
      mci->cfg = val.cfg;
80006ef0:	4c 78       	lddpc	r8,8000700c <sd_mmc_mci_card_init+0x89c>
80006ef2:	70 08       	ld.w	r8,r8[0x0]
80006ef4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80006ef8:	f1 49 00 54 	st.w	r8[84],r9

      // deselect card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, 0)!=MCI_SUCCESS)
80006efc:	4c 48       	lddpc	r8,8000700c <sd_mmc_mci_card_init+0x89c>
80006efe:	70 08       	ld.w	r8,r8[0x0]
80006f00:	30 0a       	mov	r10,0
80006f02:	e0 6b 10 c7 	mov	r11,4295
80006f06:	10 9c       	mov	r12,r8
80006f08:	f0 1f 00 43 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
80006f0c:	18 98       	mov	r8,r12
80006f0e:	58 08       	cp.w	r8,0
80006f10:	c0 30       	breq	80006f16 <sd_mmc_mci_card_init+0x7a6>
        return false;
80006f12:	30 08       	mov	r8,0
80006f14:	c6 f8       	rjmp	80006ff2 <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006f16:	4b e8       	lddpc	r8,8000700c <sd_mmc_mci_card_init+0x89c>
80006f18:	70 08       	ld.w	r8,r8[0x0]
80006f1a:	10 9c       	mov	r12,r8
80006f1c:	f0 1f 00 42 	mcall	80007024 <sd_mmc_mci_card_init+0x8b4>

      //-- (CMD9)
      // Read & analyze CSD register
      if (sd_mmc_mci_get_csd(slot)!=true)
80006f20:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006f24:	10 9c       	mov	r12,r8
80006f26:	f0 1f 00 3f 	mcall	80007020 <sd_mmc_mci_card_init+0x8b0>
80006f2a:	18 98       	mov	r8,r12
80006f2c:	ec 18 00 01 	eorl	r8,0x1
80006f30:	5c 58       	castu.b	r8
80006f32:	c0 30       	breq	80006f38 <sd_mmc_mci_card_init+0x7c8>
        return false;
80006f34:	30 08       	mov	r8,0
80006f36:	c5 e8       	rjmp	80006ff2 <sd_mmc_mci_card_init+0x882>

      // select card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006f38:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006f3c:	4b 88       	lddpc	r8,8000701c <sd_mmc_mci_card_init+0x8ac>
80006f3e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006f42:	4b 38       	lddpc	r8,8000700c <sd_mmc_mci_card_init+0x89c>
80006f44:	70 08       	ld.w	r8,r8[0x0]
80006f46:	12 9a       	mov	r10,r9
80006f48:	e0 6b 10 c7 	mov	r11,4295
80006f4c:	10 9c       	mov	r12,r8
80006f4e:	f0 1f 00 32 	mcall	80007014 <sd_mmc_mci_card_init+0x8a4>
80006f52:	18 98       	mov	r8,r12
80006f54:	58 08       	cp.w	r8,0
80006f56:	c0 30       	breq	80006f5c <sd_mmc_mci_card_init+0x7ec>
        return false;
80006f58:	30 08       	mov	r8,0
80006f5a:	c4 c8       	rjmp	80006ff2 <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006f5c:	4a c8       	lddpc	r8,8000700c <sd_mmc_mci_card_init+0x89c>
80006f5e:	70 08       	ld.w	r8,r8[0x0]
80006f60:	10 9c       	mov	r12,r8
80006f62:	f0 1f 00 31 	mcall	80007024 <sd_mmc_mci_card_init+0x8b4>
80006f66:	c0 28       	rjmp	80006f6a <sd_mmc_mci_card_init+0x7fa>
          }
        }
      }

      if (b_hs_supported==false )
        goto sd_mmc_init_step3;
80006f68:	d7 03       	nop
      mci_wait_busy_signal(mci);// read busy state on DAT0
  }

sd_mmc_init_step3:
  // Set clock
  mci_set_speed(mci, g_pbb_hz, g_card_freq[slot]*1000);
80006f6a:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006f6e:	4b 68       	lddpc	r8,80007044 <sd_mmc_mci_card_init+0x8d4>
80006f70:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006f74:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80006f78:	e0 68 03 e8 	mov	r8,1000
80006f7c:	f2 08 02 48 	mul	r8,r9,r8
80006f80:	10 9a       	mov	r10,r8
80006f82:	4a 28       	lddpc	r8,80007008 <sd_mmc_mci_card_init+0x898>
80006f84:	70 09       	ld.w	r9,r8[0x0]
80006f86:	4a 28       	lddpc	r8,8000700c <sd_mmc_mci_card_init+0x89c>
80006f88:	70 08       	ld.w	r8,r8[0x0]
80006f8a:	12 9b       	mov	r11,r9
80006f8c:	10 9c       	mov	r12,r8
80006f8e:	f0 1f 00 2f 	mcall	80007048 <sd_mmc_mci_card_init+0x8d8>

  //-- (CMD13)
  // Check if card is ready, the card must be in TRAN state
  if(sd_mmc_mci_cmd_send_status(slot)!=true)
80006f92:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006f96:	10 9c       	mov	r12,r8
80006f98:	f0 1f 00 2d 	mcall	8000704c <sd_mmc_mci_card_init+0x8dc>
80006f9c:	18 98       	mov	r8,r12
80006f9e:	ec 18 00 01 	eorl	r8,0x1
80006fa2:	5c 58       	castu.b	r8
80006fa4:	c0 30       	breq	80006faa <sd_mmc_mci_card_init+0x83a>
    return false;
80006fa6:	30 08       	mov	r8,0
80006fa8:	c2 58       	rjmp	80006ff2 <sd_mmc_mci_card_init+0x882>

  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
80006faa:	49 98       	lddpc	r8,8000700c <sd_mmc_mci_card_init+0x89c>
80006fac:	70 08       	ld.w	r8,r8[0x0]
80006fae:	10 9c       	mov	r12,r8
80006fb0:	f0 1f 00 1a 	mcall	80007018 <sd_mmc_mci_card_init+0x8a8>
80006fb4:	18 98       	mov	r8,r12
80006fb6:	e4 18 e0 02 	andh	r8,0xe002
80006fba:	e0 18 0e 00 	andl	r8,0xe00
80006fbe:	e0 48 08 00 	cp.w	r8,2048
80006fc2:	c0 30       	breq	80006fc8 <sd_mmc_mci_card_init+0x858>
    return false;
80006fc4:	30 08       	mov	r8,0
80006fc6:	c1 68       	rjmp	80006ff2 <sd_mmc_mci_card_init+0x882>

  //-- (CMD16)
  // Set the card block length to 512B
  if (sd_mmc_set_block_len (slot, SD_MMC_SECTOR_SIZE)!=true)
80006fc8:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006fcc:	e0 6b 02 00 	mov	r11,512
80006fd0:	10 9c       	mov	r12,r8
80006fd2:	f0 1f 00 20 	mcall	80007050 <sd_mmc_mci_card_init+0x8e0>
80006fd6:	18 98       	mov	r8,r12
80006fd8:	ec 18 00 01 	eorl	r8,0x1
80006fdc:	5c 58       	castu.b	r8
80006fde:	c0 30       	breq	80006fe4 <sd_mmc_mci_card_init+0x874>
    return false;
80006fe0:	30 08       	mov	r8,0
80006fe2:	c0 88       	rjmp	80006ff2 <sd_mmc_mci_card_init+0x882>

  // USB Test Unit Attention requires a state "busy" between "not present" and "ready" state
  // otherwise never report card change
  sd_mmc_mci_init_done[slot] = true;
80006fe4:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006fe8:	48 5a       	lddpc	r10,80006ffc <sd_mmc_mci_card_init+0x88c>
80006fea:	30 18       	mov	r8,1
80006fec:	f4 09 0b 08 	st.b	r10[r9],r8

  return true;
80006ff0:	30 18       	mov	r8,1
}
80006ff2:	10 9c       	mov	r12,r8
80006ff4:	2e 9d       	sub	sp,-92
80006ff6:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80006ffa:	00 00       	add	r0,r0
80006ffc:	00 00       	add	r0,r0
80006ffe:	06 3c       	cp.w	r12,r3
80007000:	00 00       	add	r0,r0
80007002:	0f a4       	ld.ub	r4,r7[0x2]
80007004:	00 00       	add	r0,r0
80007006:	0d 9c       	ld.ub	r12,r6[0x1]
80007008:	00 00       	add	r0,r0
8000700a:	06 40       	or	r0,r3
8000700c:	00 00       	add	r0,r0
8000700e:	01 34       	ld.ub	r4,r0++
80007010:	80 00       	ld.sh	r0,r0[0x0]
80007012:	90 ac       	ld.uh	r12,r8[0x4]
80007014:	80 00       	ld.sh	r0,r0[0x0]
80007016:	91 e0       	st.w	r8[0x38],r0
80007018:	80 00       	ld.sh	r0,r0[0x0]
8000701a:	93 18       	st.w	r9[0x4],r8
8000701c:	00 00       	add	r0,r0
8000701e:	0b 8c       	ld.ub	r12,r5[0x0]
80007020:	80 00       	ld.sh	r0,r0[0x0]
80007022:	61 34       	ld.w	r4,r0[0x4c]
80007024:	80 00       	ld.sh	r0,r0[0x0]
80007026:	93 34       	st.w	r9[0xc],r4
80007028:	80 00       	ld.sh	r0,r0[0x0]
8000702a:	64 24       	ld.w	r4,r2[0x8]
8000702c:	80 00       	ld.sh	r0,r0[0x0]
8000702e:	92 b8       	ld.uh	r8,r9[0x6]
80007030:	80 00       	ld.sh	r0,r0[0x0]
80007032:	91 60       	st.w	r8[0x18],r0
80007034:	80 00       	ld.sh	r0,r0[0x0]
80007036:	91 aa       	st.w	r8[0x28],r10
80007038:	00 00       	add	r0,r0
8000703a:	07 6c       	ld.uh	r12,--r3
8000703c:	00 00       	add	r0,r0
8000703e:	06 44       	or	r4,r3
80007040:	80 00       	ld.sh	r0,r0[0x0]
80007042:	e3 f8 00 00 	ld.weq	r8,r1[0x0]
80007046:	0d 9e       	ld.ub	lr,r6[0x1]
80007048:	80 00       	ld.sh	r0,r0[0x0]
8000704a:	8f c8       	st.w	r7[0x30],r8
8000704c:	80 00       	ld.sh	r0,r0[0x0]
8000704e:	79 68       	ld.w	r8,r12[0x58]
80007050:	80 00       	ld.sh	r0,r0[0x0]
80007052:	65 f0       	ld.w	r0,r2[0x7c]

80007054 <dma_mci_2_ram>:
    return true;
}
#endif

static void dma_mci_2_ram(void *ram, size_t size)
{
80007054:	eb cd 40 80 	pushm	r7,lr
80007058:	1a 97       	mov	r7,sp
8000705a:	20 3d       	sub	sp,12
8000705c:	ef 4c ff f8 	st.w	r7[-8],r12
80007060:	ef 4b ff f4 	st.w	r7[-12],r11
  int *pRam = ram;
80007064:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007068:	ef 48 ff fc 	st.w	r7[-4],r8

  // Src Address: the MCI registers.
  AVR32_DMACA.sar1 = (uint32_t)&AVR32_MCI.fifo;
8000706c:	fc 18 ff 10 	movh	r8,0xff10
80007070:	fe 69 42 00 	mov	r9,-114176
80007074:	f1 49 00 58 	st.w	r8[88],r9

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;
80007078:	fc 18 ff 10 	movh	r8,0xff10
8000707c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007080:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80007084:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
80007088:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000708c:	a3 89       	lsr	r9,0x2

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
8000708e:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80007092:	fc 18 ff 10 	movh	r8,0xff10
80007096:	e0 69 02 02 	mov	r9,514
8000709a:	f1 49 03 a0 	st.w	r8[928],r9
}
8000709e:	2f dd       	sub	sp,-12
800070a0:	e3 cd 80 80 	ldm	sp++,r7,pc

800070a4 <is_dma_mci_2_ram_complete>:

static bool is_dma_mci_2_ram_complete( void )
{
800070a4:	eb cd 40 80 	pushm	r7,lr
800070a8:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
800070aa:	fc 18 ff 10 	movh	r8,0xff10
800070ae:	f0 f8 03 a0 	ld.w	r8,r8[928]
800070b2:	e2 18 00 02 	andl	r8,0x2,COH
800070b6:	c0 30       	breq	800070bc <is_dma_mci_2_ram_complete+0x18>
    return false;
800070b8:	30 08       	mov	r8,0
800070ba:	c0 28       	rjmp	800070be <is_dma_mci_2_ram_complete+0x1a>

  return true;
800070bc:	30 18       	mov	r8,1
}
800070be:	10 9c       	mov	r12,r8
800070c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800070c4 <dma_ram_2_mci>:
    return true;
}
#endif

static void dma_ram_2_mci(const void *ram, size_t size)
{
800070c4:	eb cd 40 80 	pushm	r7,lr
800070c8:	1a 97       	mov	r7,sp
800070ca:	20 3d       	sub	sp,12
800070cc:	ef 4c ff f8 	st.w	r7[-8],r12
800070d0:	ef 4b ff f4 	st.w	r7[-12],r11
  const unsigned int *pRam = ram;
800070d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070d8:	ef 48 ff fc 	st.w	r7[-4],r8

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.sar1 = (unsigned long)pRam;
800070dc:	fc 18 ff 10 	movh	r8,0xff10
800070e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800070e4:	f1 49 00 58 	st.w	r8[88],r9

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;
800070e8:	fc 18 ff 10 	movh	r8,0xff10
800070ec:	fe 69 42 00 	mov	r9,-114176
800070f0:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
800070f4:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
800070f8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800070fc:	a3 89       	lsr	r9,0x2

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
800070fe:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80007102:	fc 18 ff 10 	movh	r8,0xff10
80007106:	e0 69 02 02 	mov	r9,514
8000710a:	f1 49 03 a0 	st.w	r8[928],r9
}
8000710e:	2f dd       	sub	sp,-12
80007110:	e3 cd 80 80 	ldm	sp++,r7,pc

80007114 <is_dma_ram_2_mci_complete>:

static bool is_dma_ram_2_mci_complete( void )
{
80007114:	eb cd 40 80 	pushm	r7,lr
80007118:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
8000711a:	fc 18 ff 10 	movh	r8,0xff10
8000711e:	f0 f8 03 a0 	ld.w	r8,r8[928]
80007122:	e2 18 00 02 	andl	r8,0x2,COH
80007126:	c0 30       	breq	8000712c <is_dma_ram_2_mci_complete+0x18>
    return false;
80007128:	30 08       	mov	r8,0
8000712a:	c0 28       	rjmp	8000712e <is_dma_ram_2_mci_complete+0x1a>

  return true;
8000712c:	30 18       	mov	r8,1
}
8000712e:	10 9c       	mov	r12,r8
80007130:	e3 cd 80 80 	ldm	sp++,r7,pc

80007134 <sd_mmc_mci_mem_check>:

  return true;
}

bool sd_mmc_mci_mem_check(uint8_t slot)
{
80007134:	eb cd 40 80 	pushm	r7,lr
80007138:	1a 97       	mov	r7,sp
8000713a:	20 2d       	sub	sp,8
8000713c:	18 98       	mov	r8,r12
8000713e:	ef 68 ff f8 	st.b	r7[-8],r8
  uint8_t timeout_init = 0;
80007142:	30 08       	mov	r8,0
80007144:	ef 68 ff ff 	st.b	r7[-1],r8

  if (slot > MCI_LAST_SLOTS)
80007148:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000714c:	30 18       	mov	r8,1
8000714e:	f0 09 18 00 	cp.b	r9,r8
80007152:	e0 88 00 04 	brls	8000715a <sd_mmc_mci_mem_check+0x26>
    return false;
80007156:	30 08       	mov	r8,0
80007158:	c4 d8       	rjmp	800071f2 <sd_mmc_mci_mem_check+0xbe>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000715a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000715e:	4a 89       	lddpc	r9,800071fc <sd_mmc_mci_mem_check+0xc8>
80007160:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007164:	10 9a       	mov	r10,r8
80007166:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000716a:	4a 68       	lddpc	r8,80007200 <sd_mmc_mci_mem_check+0xcc>
8000716c:	70 08       	ld.w	r8,r8[0x0]
8000716e:	12 9b       	mov	r11,r9
80007170:	10 9c       	mov	r12,r8
80007172:	f0 1f 00 25 	mcall	80007204 <sd_mmc_mci_mem_check+0xd0>

  // Check card presence
  if (is_sd_mmc_mci_card_present(slot) == false)
80007176:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000717a:	10 9c       	mov	r12,r8
8000717c:	f0 1f 00 23 	mcall	80007208 <sd_mmc_mci_mem_check+0xd4>
80007180:	18 98       	mov	r8,r12
80007182:	ec 18 00 01 	eorl	r8,0x1
80007186:	5c 58       	castu.b	r8
80007188:	c0 90       	breq	8000719a <sd_mmc_mci_mem_check+0x66>
  {
    sd_mmc_mci_init_done[slot] = false;
8000718a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000718e:	4a 0a       	lddpc	r10,8000720c <sd_mmc_mci_mem_check+0xd8>
80007190:	30 08       	mov	r8,0
80007192:	f4 09 0b 08 	st.b	r10[r9],r8
    return false;
80007196:	30 08       	mov	r8,0
80007198:	c2 d8       	rjmp	800071f2 <sd_mmc_mci_mem_check+0xbe>
  }

  if (sd_mmc_mci_init_done[slot] == false)
8000719a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000719e:	49 c9       	lddpc	r9,8000720c <sd_mmc_mci_mem_check+0xd8>
800071a0:	f2 08 07 08 	ld.ub	r8,r9[r8]
800071a4:	ec 18 00 01 	eorl	r8,0x1
800071a8:	5c 58       	castu.b	r8
800071aa:	c1 a0       	breq	800071de <sd_mmc_mci_mem_check+0xaa>
  {
    while (sd_mmc_mci_card_init(slot)!=true)
800071ac:	c0 f8       	rjmp	800071ca <sd_mmc_mci_mem_check+0x96>
    {
      timeout_init++;
800071ae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800071b2:	2f f8       	sub	r8,-1
800071b4:	ef 68 ff ff 	st.b	r7[-1],r8
      if (timeout_init>10) return false;
800071b8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800071bc:	30 a8       	mov	r8,10
800071be:	f0 09 18 00 	cp.b	r9,r8
800071c2:	e0 88 00 04 	brls	800071ca <sd_mmc_mci_mem_check+0x96>
800071c6:	30 08       	mov	r8,0
800071c8:	c1 58       	rjmp	800071f2 <sd_mmc_mci_mem_check+0xbe>
    return false;
  }

  if (sd_mmc_mci_init_done[slot] == false)
  {
    while (sd_mmc_mci_card_init(slot)!=true)
800071ca:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800071ce:	10 9c       	mov	r12,r8
800071d0:	f0 1f 00 10 	mcall	80007210 <sd_mmc_mci_mem_check+0xdc>
800071d4:	18 98       	mov	r8,r12
800071d6:	ec 18 00 01 	eorl	r8,0x1
800071da:	5c 58       	castu.b	r8
800071dc:	ce 91       	brne	800071ae <sd_mmc_mci_mem_check+0x7a>
    {
      timeout_init++;
      if (timeout_init>10) return false;
    }
  }
  if (sd_mmc_mci_init_done[slot] == true)
800071de:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800071e2:	48 b9       	lddpc	r9,8000720c <sd_mmc_mci_mem_check+0xd8>
800071e4:	f2 08 07 08 	ld.ub	r8,r9[r8]
800071e8:	58 08       	cp.w	r8,0
800071ea:	c0 30       	breq	800071f0 <sd_mmc_mci_mem_check+0xbc>
    return true;
800071ec:	30 18       	mov	r8,1
800071ee:	c0 28       	rjmp	800071f2 <sd_mmc_mci_mem_check+0xbe>
  else
    return false;
800071f0:	30 08       	mov	r8,0
}
800071f2:	10 9c       	mov	r12,r8
800071f4:	2f ed       	sub	sp,-8
800071f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800071fa:	00 00       	add	r0,r0
800071fc:	00 00       	add	r0,r0
800071fe:	0d 9c       	ld.ub	r12,r6[0x1]
80007200:	00 00       	add	r0,r0
80007202:	01 34       	ld.ub	r4,r0++
80007204:	80 00       	ld.sh	r0,r0[0x0]
80007206:	93 78       	st.w	r9[0x1c],r8
80007208:	80 00       	ld.sh	r0,r0[0x0]
8000720a:	60 7c       	ld.w	r12,r0[0x1c]
8000720c:	00 00       	add	r0,r0
8000720e:	06 3c       	cp.w	r12,r3
80007210:	80 00       	ld.sh	r0,r0[0x0]
80007212:	67 70       	ld.w	r0,r3[0x5c]

80007214 <sd_mmc_mci_dma_read_open>:

  return true;
}

bool sd_mmc_mci_dma_read_open(uint8_t slot, uint32_t pos, void* ram, uint16_t nb_sector)
{
80007214:	eb cd 40 80 	pushm	r7,lr
80007218:	1a 97       	mov	r7,sp
8000721a:	20 5d       	sub	sp,20
8000721c:	ef 4b ff f4 	st.w	r7[-12],r11
80007220:	ef 4a ff f0 	st.w	r7[-16],r10
80007224:	12 98       	mov	r8,r9
80007226:	18 99       	mov	r9,r12
80007228:	ef 69 ff f8 	st.b	r7[-8],r9
8000722c:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
80007230:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007234:	30 18       	mov	r8,1
80007236:	f0 09 18 00 	cp.b	r9,r8
8000723a:	e0 88 00 04 	brls	80007242 <sd_mmc_mci_dma_read_open+0x2e>
    return false;
8000723e:	30 08       	mov	r8,0
80007240:	c9 a8       	rjmp	80007374 <sd_mmc_mci_dma_read_open+0x160>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80007242:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007246:	4c e9       	lddpc	r9,8000737c <sd_mmc_mci_dma_read_open+0x168>
80007248:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000724c:	10 9a       	mov	r10,r8
8000724e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007252:	4c c8       	lddpc	r8,80007380 <sd_mmc_mci_dma_read_open+0x16c>
80007254:	70 08       	ld.w	r8,r8[0x0]
80007256:	12 9b       	mov	r11,r9
80007258:	10 9c       	mov	r12,r8
8000725a:	f0 1f 00 4b 	mcall	80007384 <sd_mmc_mci_dma_read_open+0x170>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
8000725e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007262:	4c a8       	lddpc	r8,80007388 <sd_mmc_mci_dma_read_open+0x174>
80007264:	ee fa ff f4 	ld.w	r10,r7[-12]
80007268:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
8000726c:	4c 58       	lddpc	r8,80007380 <sd_mmc_mci_dma_read_open+0x16c>
8000726e:	70 08       	ld.w	r8,r8[0x0]
80007270:	10 9c       	mov	r12,r8
80007272:	f0 1f 00 47 	mcall	8000738c <sd_mmc_mci_dma_read_open+0x178>

  addr =  gl_ptr_mem[slot];
80007276:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000727a:	4c 48       	lddpc	r8,80007388 <sd_mmc_mci_dma_read_open+0x174>
8000727c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007280:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
80007284:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007288:	4c 29       	lddpc	r9,80007390 <sd_mmc_mci_dma_read_open+0x17c>
8000728a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000728e:	e2 18 00 10 	andl	r8,0x10,COH
80007292:	c0 e1       	brne	800072ae <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
80007294:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007298:	4b e9       	lddpc	r9,80007390 <sd_mmc_mci_dma_read_open+0x17c>
8000729a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000729e:	e2 18 00 20 	andl	r8,0x20,COH
  // wait for MMC not busy
  mci_wait_busy_signal(mci);

  addr =  gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800072a2:	c0 61       	brne	800072ae <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
800072a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800072a8:	a9 78       	lsl	r8,0x9
800072aa:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  //** (CMD13)
  // Necessary to clear flag error "ADDRESS_OUT_OF_RANGE" (ID LABO = MMC15)
  if(mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800072ae:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800072b2:	4b 98       	lddpc	r8,80007394 <sd_mmc_mci_dma_read_open+0x180>
800072b4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800072b8:	4b 28       	lddpc	r8,80007380 <sd_mmc_mci_dma_read_open+0x16c>
800072ba:	70 08       	ld.w	r8,r8[0x0]
800072bc:	12 9a       	mov	r10,r9
800072be:	e0 6b 10 4d 	mov	r11,4173
800072c2:	10 9c       	mov	r12,r8
800072c4:	f0 1f 00 35 	mcall	80007398 <sd_mmc_mci_dma_read_open+0x184>
800072c8:	18 98       	mov	r8,r12
800072ca:	58 08       	cp.w	r8,0
800072cc:	c0 30       	breq	800072d2 <sd_mmc_mci_dma_read_open+0xbe>
  {
    return false;
800072ce:	30 08       	mov	r8,0
800072d0:	c5 28       	rjmp	80007374 <sd_mmc_mci_dma_read_open+0x160>
  }

  // Request Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
800072d2:	4a c8       	lddpc	r8,80007380 <sd_mmc_mci_dma_read_open+0x16c>
800072d4:	70 08       	ld.w	r8,r8[0x0]
800072d6:	e0 6b 02 00 	mov	r11,512
800072da:	10 9c       	mov	r12,r8
800072dc:	f0 1f 00 30 	mcall	8000739c <sd_mmc_mci_dma_read_open+0x188>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
800072e0:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800072e4:	4a 78       	lddpc	r8,80007380 <sd_mmc_mci_dma_read_open+0x16c>
800072e6:	70 08       	ld.w	r8,r8[0x0]
800072e8:	12 9b       	mov	r11,r9
800072ea:	10 9c       	mov	r12,r8
800072ec:	f0 1f 00 2d 	mcall	800073a0 <sd_mmc_mci_dma_read_open+0x18c>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
800072f0:	fc 18 ff 10 	movh	r8,0xff10
800072f4:	30 19       	mov	r9,1
800072f6:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
800072fa:	fe 68 40 00 	mov	r8,-114688
800072fe:	30 09       	mov	r9,0
80007300:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
80007304:	fc 18 ff 10 	movh	r8,0xff10
80007308:	30 09       	mov	r9,0
8000730a:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
8000730e:	fc 18 ff 10 	movh	r8,0xff10
80007312:	e0 69 d8 24 	mov	r9,55332
80007316:	ea 19 00 a0 	orh	r9,0xa0
8000731a:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
8000731e:	fc 18 ff 10 	movh	r8,0xff10
80007322:	30 09       	mov	r9,0
80007324:	f1 49 00 98 	st.w	r8[152],r9
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: ignored because the dst is memory.
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: hw handshaking
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80007328:	fc 18 ff 10 	movh	r8,0xff10
8000732c:	e0 69 01 00 	mov	r9,256
80007330:	f1 49 00 9c 	st.w	r8[156],r9
    (0                      << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf: ignored because the dst is memory.
    (AVR32_DMACA_CH_MMCI_RX << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf:
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
80007334:	fe 68 40 00 	mov	r8,-114688
80007338:	e0 69 01 30 	mov	r9,304
8000733c:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD17)
  if(mci_send_cmd(mci, SD_MMC_READ_MULTIPLE_BLOCK_CMD, addr)!=MCI_SUCCESS)
80007340:	49 08       	lddpc	r8,80007380 <sd_mmc_mci_dma_read_open+0x16c>
80007342:	70 08       	ld.w	r8,r8[0x0]
80007344:	ee fa ff fc 	ld.w	r10,r7[-4]
80007348:	ec 7b 10 52 	mov	r11,856146
8000734c:	10 9c       	mov	r12,r8
8000734e:	f0 1f 00 13 	mcall	80007398 <sd_mmc_mci_dma_read_open+0x184>
80007352:	18 98       	mov	r8,r12
80007354:	58 08       	cp.w	r8,0
80007356:	c0 30       	breq	8000735c <sd_mmc_mci_dma_read_open+0x148>
  {
    return false;
80007358:	30 08       	mov	r8,0
8000735a:	c0 d8       	rjmp	80007374 <sd_mmc_mci_dma_read_open+0x160>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
8000735c:	48 98       	lddpc	r8,80007380 <sd_mmc_mci_dma_read_open+0x16c>
8000735e:	70 08       	ld.w	r8,r8[0x0]
80007360:	10 9c       	mov	r12,r8
80007362:	f0 1f 00 11 	mcall	800073a4 <sd_mmc_mci_dma_read_open+0x190>
80007366:	18 98       	mov	r8,r12
80007368:	e6 18 f0 50 	andh	r8,0xf050,COH
8000736c:	c0 30       	breq	80007372 <sd_mmc_mci_dma_read_open+0x15e>
  {
    return false;
8000736e:	30 08       	mov	r8,0
80007370:	c0 28       	rjmp	80007374 <sd_mmc_mci_dma_read_open+0x160>
  }

  return true;
80007372:	30 18       	mov	r8,1
}
80007374:	10 9c       	mov	r12,r8
80007376:	2f bd       	sub	sp,-20
80007378:	e3 cd 80 80 	ldm	sp++,r7,pc
8000737c:	00 00       	add	r0,r0
8000737e:	0d 9c       	ld.ub	r12,r6[0x1]
80007380:	00 00       	add	r0,r0
80007382:	01 34       	ld.ub	r4,r0++
80007384:	80 00       	ld.sh	r0,r0[0x0]
80007386:	93 78       	st.w	r9[0x1c],r8
80007388:	00 00       	add	r0,r0
8000738a:	06 48       	or	r8,r3
8000738c:	80 00       	ld.sh	r0,r0[0x0]
8000738e:	93 34       	st.w	r9[0xc],r4
80007390:	00 00       	add	r0,r0
80007392:	0f a4       	ld.ub	r4,r7[0x2]
80007394:	00 00       	add	r0,r0
80007396:	0b 8c       	ld.ub	r12,r5[0x0]
80007398:	80 00       	ld.sh	r0,r0[0x0]
8000739a:	91 e0       	st.w	r8[0x38],r0
8000739c:	80 00       	ld.sh	r0,r0[0x0]
8000739e:	91 60       	st.w	r8[0x18],r0
800073a0:	80 00       	ld.sh	r0,r0[0x0]
800073a2:	91 aa       	st.w	r8[0x28],r10
800073a4:	80 00       	ld.sh	r0,r0[0x0]
800073a6:	93 18       	st.w	r9[0x4],r8

800073a8 <sd_mmc_mci_read_close>:

bool sd_mmc_mci_read_close (uint8_t slot)
{
800073a8:	eb cd 40 80 	pushm	r7,lr
800073ac:	1a 97       	mov	r7,sp
800073ae:	20 3d       	sub	sp,12
800073b0:	18 98       	mov	r8,r12
800073b2:	ef 68 ff f4 	st.b	r7[-12],r8
  if( (mci_crc_error(mci)) )
800073b6:	4a 08       	lddpc	r8,80007434 <sd_mmc_mci_read_close+0x8c>
800073b8:	70 08       	ld.w	r8,r8[0x0]
800073ba:	ef 48 ff f8 	st.w	r7[-8],r8
800073be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800073c2:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800073c6:	49 d8       	lddpc	r8,80007438 <sd_mmc_mci_read_close+0x90>
800073c8:	70 08       	ld.w	r8,r8[0x0]
800073ca:	10 99       	mov	r9,r8
800073cc:	e6 19 01 e0 	andh	r9,0x1e0,COH
800073d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800073d4:	71 08       	ld.w	r8,r8[0x40]
800073d6:	f3 e8 10 08 	or	r8,r9,r8
800073da:	10 99       	mov	r9,r8
800073dc:	49 78       	lddpc	r8,80007438 <sd_mmc_mci_read_close+0x90>
800073de:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800073e0:	49 68       	lddpc	r8,80007438 <sd_mmc_mci_read_close+0x90>
800073e2:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
800073e4:	e6 18 00 20 	andh	r8,0x20,COH
800073e8:	c0 90       	breq	800073fa <sd_mmc_mci_read_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
800073ea:	49 48       	lddpc	r8,80007438 <sd_mmc_mci_read_close+0x90>
800073ec:	70 08       	ld.w	r8,r8[0x0]
800073ee:	10 99       	mov	r9,r8
800073f0:	b5 d9       	cbr	r9,0x15
800073f2:	49 28       	lddpc	r8,80007438 <sd_mmc_mci_read_close+0x90>
800073f4:	91 09       	st.w	r8[0x0],r9
    return true;
800073f6:	30 18       	mov	r8,1
800073f8:	c0 28       	rjmp	800073fc <sd_mmc_mci_read_close+0x54>
  }
  else
    return false;
800073fa:	30 08       	mov	r8,0
800073fc:	58 08       	cp.w	r8,0
800073fe:	c0 30       	breq	80007404 <sd_mmc_mci_read_close+0x5c>
  {
    return false;  // An CRC error has been seen
80007400:	30 08       	mov	r8,0
80007402:	c1 48       	rjmp	8000742a <sd_mmc_mci_read_close+0x82>
  }

  mci_wait_busy_signal(mci);
80007404:	48 c8       	lddpc	r8,80007434 <sd_mmc_mci_read_close+0x8c>
80007406:	70 08       	ld.w	r8,r8[0x0]
80007408:	10 9c       	mov	r12,r8
8000740a:	f0 1f 00 0d 	mcall	8000743c <sd_mmc_mci_read_close+0x94>

  if( mci_send_cmd( mci, SD_MMC_STOP_READ_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
8000740e:	48 a8       	lddpc	r8,80007434 <sd_mmc_mci_read_close+0x8c>
80007410:	70 08       	ld.w	r8,r8[0x0]
80007412:	3f fa       	mov	r10,-1
80007414:	e2 6b 10 4c 	mov	r11,135244
80007418:	10 9c       	mov	r12,r8
8000741a:	f0 1f 00 0a 	mcall	80007440 <sd_mmc_mci_read_close+0x98>
8000741e:	18 98       	mov	r8,r12
80007420:	58 08       	cp.w	r8,0
80007422:	c0 30       	breq	80007428 <sd_mmc_mci_read_close+0x80>
    return false;
80007424:	30 08       	mov	r8,0
80007426:	c0 28       	rjmp	8000742a <sd_mmc_mci_read_close+0x82>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  return true;
80007428:	30 18       	mov	r8,1
}
8000742a:	10 9c       	mov	r12,r8
8000742c:	2f dd       	sub	sp,-12
8000742e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007432:	00 00       	add	r0,r0
80007434:	00 00       	add	r0,r0
80007436:	01 34       	ld.ub	r4,r0++
80007438:	00 00       	add	r0,r0
8000743a:	07 6c       	ld.uh	r12,--r3
8000743c:	80 00       	ld.sh	r0,r0[0x0]
8000743e:	93 34       	st.w	r9[0xc],r4
80007440:	80 00       	ld.sh	r0,r0[0x0]
80007442:	91 e0       	st.w	r8[0x38],r0

80007444 <sd_mmc_mci_dma_write_open>:

  return true;
}

bool sd_mmc_mci_dma_write_open (uint8_t slot, uint32_t pos, const void* ram, uint16_t nb_sector)
{
80007444:	eb cd 40 80 	pushm	r7,lr
80007448:	1a 97       	mov	r7,sp
8000744a:	20 5d       	sub	sp,20
8000744c:	ef 4b ff f4 	st.w	r7[-12],r11
80007450:	ef 4a ff f0 	st.w	r7[-16],r10
80007454:	12 98       	mov	r8,r9
80007456:	18 99       	mov	r9,r12
80007458:	ef 69 ff f8 	st.b	r7[-8],r9
8000745c:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
80007460:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007464:	30 18       	mov	r8,1
80007466:	f0 09 18 00 	cp.b	r9,r8
8000746a:	e0 88 00 04 	brls	80007472 <sd_mmc_mci_dma_write_open+0x2e>
    return false;
8000746e:	30 08       	mov	r8,0
80007470:	c8 88       	rjmp	80007580 <sd_mmc_mci_dma_write_open+0x13c>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80007472:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007476:	4c 59       	lddpc	r9,80007588 <sd_mmc_mci_dma_write_open+0x144>
80007478:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000747c:	10 9a       	mov	r10,r8
8000747e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007482:	4c 38       	lddpc	r8,8000758c <sd_mmc_mci_dma_write_open+0x148>
80007484:	70 08       	ld.w	r8,r8[0x0]
80007486:	12 9b       	mov	r11,r9
80007488:	10 9c       	mov	r12,r8
8000748a:	f0 1f 00 42 	mcall	80007590 <sd_mmc_mci_dma_write_open+0x14c>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
8000748e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007492:	4c 18       	lddpc	r8,80007594 <sd_mmc_mci_dma_write_open+0x150>
80007494:	ee fa ff f4 	ld.w	r10,r7[-12]
80007498:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
8000749c:	4b c8       	lddpc	r8,8000758c <sd_mmc_mci_dma_write_open+0x148>
8000749e:	70 08       	ld.w	r8,r8[0x0]
800074a0:	10 9c       	mov	r12,r8
800074a2:	f0 1f 00 3e 	mcall	80007598 <sd_mmc_mci_dma_write_open+0x154>
      return false;
   }
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
800074a6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800074aa:	4b b8       	lddpc	r8,80007594 <sd_mmc_mci_dma_write_open+0x150>
800074ac:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800074b0:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800074b4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800074b8:	4b 99       	lddpc	r9,8000759c <sd_mmc_mci_dma_write_open+0x158>
800074ba:	f2 08 07 08 	ld.ub	r8,r9[r8]
800074be:	e2 18 00 10 	andl	r8,0x10,COH
800074c2:	c0 e1       	brne	800074de <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
800074c4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800074c8:	4b 59       	lddpc	r9,8000759c <sd_mmc_mci_dma_write_open+0x158>
800074ca:	f2 08 07 08 	ld.ub	r8,r9[r8]
800074ce:	e2 18 00 20 	andl	r8,0x20,COH
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800074d2:	c0 61       	brne	800074de <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
800074d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800074d8:	a9 78       	lsl	r8,0x9
800074da:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  // Set Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
800074de:	4a c8       	lddpc	r8,8000758c <sd_mmc_mci_dma_write_open+0x148>
800074e0:	70 08       	ld.w	r8,r8[0x0]
800074e2:	e0 6b 02 00 	mov	r11,512
800074e6:	10 9c       	mov	r12,r8
800074e8:	f0 1f 00 2e 	mcall	800075a0 <sd_mmc_mci_dma_write_open+0x15c>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
800074ec:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800074f0:	4a 78       	lddpc	r8,8000758c <sd_mmc_mci_dma_write_open+0x148>
800074f2:	70 08       	ld.w	r8,r8[0x0]
800074f4:	12 9b       	mov	r11,r9
800074f6:	10 9c       	mov	r12,r8
800074f8:	f0 1f 00 2b 	mcall	800075a4 <sd_mmc_mci_dma_write_open+0x160>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
800074fc:	fc 18 ff 10 	movh	r8,0xff10
80007500:	30 19       	mov	r9,1
80007502:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
80007506:	fe 68 40 00 	mov	r8,-114688
8000750a:	30 09       	mov	r9,0
8000750c:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
80007510:	fc 18 ff 10 	movh	r8,0xff10
80007514:	30 09       	mov	r9,0
80007516:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
8000751a:	fc 18 ff 10 	movh	r8,0xff10
8000751e:	e0 69 d8 24 	mov	r9,55332
80007522:	ea 19 02 10 	orh	r9,0x210
80007526:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
8000752a:	fc 18 ff 10 	movh	r8,0xff10
8000752e:	30 09       	mov	r9,0
80007530:	f1 49 00 98 	st.w	r8[152],r9
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: hw handshaking
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80007534:	fc 18 ff 10 	movh	r8,0xff10
80007538:	e0 69 18 00 	mov	r9,6144
8000753c:	f1 49 00 9c 	st.w	r8[156],r9
    (AVR32_DMACA_CH_MMCI_TX << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf:
    (0                      << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
80007540:	fe 68 40 00 	mov	r8,-114688
80007544:	e0 69 01 30 	mov	r9,304
80007548:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD24)
  if(mci_send_cmd(mci, SD_MMC_WRITE_MULTIPLE_BLOCK_CMD, addr )!=MCI_SUCCESS)
8000754c:	49 08       	lddpc	r8,8000758c <sd_mmc_mci_dma_write_open+0x148>
8000754e:	70 08       	ld.w	r8,r8[0x0]
80007550:	ee fa ff fc 	ld.w	r10,r7[-4]
80007554:	e8 7b 10 59 	mov	r11,594009
80007558:	10 9c       	mov	r12,r8
8000755a:	f0 1f 00 14 	mcall	800075a8 <sd_mmc_mci_dma_write_open+0x164>
8000755e:	18 98       	mov	r8,r12
80007560:	58 08       	cp.w	r8,0
80007562:	c0 30       	breq	80007568 <sd_mmc_mci_dma_write_open+0x124>
  {
    return false;
80007564:	30 08       	mov	r8,0
80007566:	c0 d8       	rjmp	80007580 <sd_mmc_mci_dma_write_open+0x13c>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
80007568:	48 98       	lddpc	r8,8000758c <sd_mmc_mci_dma_write_open+0x148>
8000756a:	70 08       	ld.w	r8,r8[0x0]
8000756c:	10 9c       	mov	r12,r8
8000756e:	f0 1f 00 10 	mcall	800075ac <sd_mmc_mci_dma_write_open+0x168>
80007572:	18 98       	mov	r8,r12
80007574:	e6 18 f0 50 	andh	r8,0xf050,COH
80007578:	c0 30       	breq	8000757e <sd_mmc_mci_dma_write_open+0x13a>
  {
    return false;
8000757a:	30 08       	mov	r8,0
8000757c:	c0 28       	rjmp	80007580 <sd_mmc_mci_dma_write_open+0x13c>
  }

  return true;
8000757e:	30 18       	mov	r8,1
}
80007580:	10 9c       	mov	r12,r8
80007582:	2f bd       	sub	sp,-20
80007584:	e3 cd 80 80 	ldm	sp++,r7,pc
80007588:	00 00       	add	r0,r0
8000758a:	0d 9c       	ld.ub	r12,r6[0x1]
8000758c:	00 00       	add	r0,r0
8000758e:	01 34       	ld.ub	r4,r0++
80007590:	80 00       	ld.sh	r0,r0[0x0]
80007592:	93 78       	st.w	r9[0x1c],r8
80007594:	00 00       	add	r0,r0
80007596:	06 48       	or	r8,r3
80007598:	80 00       	ld.sh	r0,r0[0x0]
8000759a:	93 34       	st.w	r9[0xc],r4
8000759c:	00 00       	add	r0,r0
8000759e:	0f a4       	ld.ub	r4,r7[0x2]
800075a0:	80 00       	ld.sh	r0,r0[0x0]
800075a2:	91 60       	st.w	r8[0x18],r0
800075a4:	80 00       	ld.sh	r0,r0[0x0]
800075a6:	91 aa       	st.w	r8[0x28],r10
800075a8:	80 00       	ld.sh	r0,r0[0x0]
800075aa:	91 e0       	st.w	r8[0x38],r0
800075ac:	80 00       	ld.sh	r0,r0[0x0]
800075ae:	93 18       	st.w	r9[0x4],r8

800075b0 <sd_mmc_mci_write_close>:

bool sd_mmc_mci_write_close (uint8_t slot)
{
800075b0:	eb cd 40 80 	pushm	r7,lr
800075b4:	1a 97       	mov	r7,sp
800075b6:	20 5d       	sub	sp,20
800075b8:	18 98       	mov	r8,r12
800075ba:	ef 68 ff ec 	st.b	r7[-20],r8
  if( (mci_crc_error(mci)) )
800075be:	4b 58       	lddpc	r8,80007690 <sd_mmc_mci_write_close+0xe0>
800075c0:	70 08       	ld.w	r8,r8[0x0]
800075c2:	ef 48 ff f0 	st.w	r7[-16],r8
800075c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800075ca:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800075ce:	4b 28       	lddpc	r8,80007694 <sd_mmc_mci_write_close+0xe4>
800075d0:	70 08       	ld.w	r8,r8[0x0]
800075d2:	10 99       	mov	r9,r8
800075d4:	e6 19 01 e0 	andh	r9,0x1e0,COH
800075d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800075dc:	71 08       	ld.w	r8,r8[0x40]
800075de:	f3 e8 10 08 	or	r8,r9,r8
800075e2:	10 99       	mov	r9,r8
800075e4:	4a c8       	lddpc	r8,80007694 <sd_mmc_mci_write_close+0xe4>
800075e6:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800075e8:	4a b8       	lddpc	r8,80007694 <sd_mmc_mci_write_close+0xe4>
800075ea:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
800075ec:	e6 18 00 20 	andh	r8,0x20,COH
800075f0:	c0 90       	breq	80007602 <sd_mmc_mci_write_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
800075f2:	4a 98       	lddpc	r8,80007694 <sd_mmc_mci_write_close+0xe4>
800075f4:	70 08       	ld.w	r8,r8[0x0]
800075f6:	10 99       	mov	r9,r8
800075f8:	b5 d9       	cbr	r9,0x15
800075fa:	4a 78       	lddpc	r8,80007694 <sd_mmc_mci_write_close+0xe4>
800075fc:	91 09       	st.w	r8[0x0],r9
    return true;
800075fe:	30 18       	mov	r8,1
80007600:	c0 28       	rjmp	80007604 <sd_mmc_mci_write_close+0x54>
  }
  else
    return false;
80007602:	30 08       	mov	r8,0
80007604:	58 08       	cp.w	r8,0
80007606:	c0 30       	breq	8000760c <sd_mmc_mci_write_close+0x5c>
  {
    return false;  // An CRC error has been seen
80007608:	30 08       	mov	r8,0
8000760a:	c3 e8       	rjmp	80007686 <sd_mmc_mci_write_close+0xd6>
  }

  while(!(mci_data_block_ended(mci)));
8000760c:	4a 18       	lddpc	r8,80007690 <sd_mmc_mci_write_close+0xe0>
8000760e:	70 08       	ld.w	r8,r8[0x0]
80007610:	ef 48 ff f8 	st.w	r7[-8],r8
80007614:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007618:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
8000761c:	49 e8       	lddpc	r8,80007694 <sd_mmc_mci_write_close+0xe4>
8000761e:	70 08       	ld.w	r8,r8[0x0]
80007620:	10 99       	mov	r9,r8
80007622:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000762a:	71 08       	ld.w	r8,r8[0x40]
8000762c:	f3 e8 10 08 	or	r8,r9,r8
80007630:	10 99       	mov	r9,r8
80007632:	49 98       	lddpc	r8,80007694 <sd_mmc_mci_write_close+0xe4>
80007634:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007636:	49 88       	lddpc	r8,80007694 <sd_mmc_mci_write_close+0xe4>
80007638:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_data_block_ended(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_XFRDONE_MASK) != 0;
8000763a:	e6 18 08 00 	andh	r8,0x800,COH
8000763e:	5f 18       	srne	r8
80007640:	58 08       	cp.w	r8,0
80007642:	ce 50       	breq	8000760c <sd_mmc_mci_write_close+0x5c>

  if( mci_send_cmd( mci, SD_MMC_STOP_WRITE_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
80007644:	49 38       	lddpc	r8,80007690 <sd_mmc_mci_write_close+0xe0>
80007646:	70 08       	ld.w	r8,r8[0x0]
80007648:	3f fa       	mov	r10,-1
8000764a:	e2 6b 10 cc 	mov	r11,135372
8000764e:	10 9c       	mov	r12,r8
80007650:	f0 1f 00 12 	mcall	80007698 <sd_mmc_mci_write_close+0xe8>
80007654:	18 98       	mov	r8,r12
80007656:	58 08       	cp.w	r8,0
80007658:	c0 30       	breq	8000765e <sd_mmc_mci_write_close+0xae>
  {
    return false;
8000765a:	30 08       	mov	r8,0
8000765c:	c1 58       	rjmp	80007686 <sd_mmc_mci_write_close+0xd6>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  if( slot==SD_SLOT_4BITS )
8000765e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80007662:	30 18       	mov	r8,1
80007664:	f0 09 18 00 	cp.b	r9,r8
80007668:	c0 81       	brne	80007678 <sd_mmc_mci_write_close+0xc8>
  {
    while(!(gpio_get_pin_value(SD_SLOT_4BITS_DATA0_PIN)));                             // Wait until the card is ready.
8000766a:	31 3c       	mov	r12,19
8000766c:	f0 1f 00 0c 	mcall	8000769c <sd_mmc_mci_write_close+0xec>
80007670:	18 98       	mov	r8,r12
80007672:	58 08       	cp.w	r8,0
80007674:	cf b0       	breq	8000766a <sd_mmc_mci_write_close+0xba>
80007676:	c0 78       	rjmp	80007684 <sd_mmc_mci_write_close+0xd4>
  }
  else
  {
    while(!(gpio_get_pin_value(SD_SLOT_8BITS_DATA0_PIN)));                             // Wait until the card is ready.
80007678:	31 dc       	mov	r12,29
8000767a:	f0 1f 00 09 	mcall	8000769c <sd_mmc_mci_write_close+0xec>
8000767e:	18 98       	mov	r8,r12
80007680:	58 08       	cp.w	r8,0
80007682:	cf b0       	breq	80007678 <sd_mmc_mci_write_close+0xc8>
  }
  return true;
80007684:	30 18       	mov	r8,1
}
80007686:	10 9c       	mov	r12,r8
80007688:	2f bd       	sub	sp,-20
8000768a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000768e:	00 00       	add	r0,r0
80007690:	00 00       	add	r0,r0
80007692:	01 34       	ld.ub	r4,r0++
80007694:	00 00       	add	r0,r0
80007696:	07 6c       	ld.uh	r12,--r3
80007698:	80 00       	ld.sh	r0,r0[0x0]
8000769a:	91 e0       	st.w	r8[0x38],r0
8000769c:	80 00       	ld.sh	r0,r0[0x0]
8000769e:	8c 0c       	ld.sh	r12,r6[0x0]

800076a0 <sd_mmc_mci_read_multiple_sector>:
		*dest++ = *source++;
	}
}

bool sd_mmc_mci_read_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
800076a0:	eb cd 40 80 	pushm	r7,lr
800076a4:	1a 97       	mov	r7,sp
800076a6:	20 4d       	sub	sp,16
800076a8:	18 99       	mov	r9,r12
800076aa:	16 98       	mov	r8,r11
800076ac:	ef 4a ff f0 	st.w	r7[-16],r10
800076b0:	ef 69 ff f8 	st.b	r7[-8],r9
800076b4:	ef 58 ff f4 	st.h	r7[-12],r8
  bool b_first_step=true;
800076b8:	30 18       	mov	r8,1
800076ba:	ef 68 ff fc 	st.b	r7[-4],r8
  uint8_t   buffer_id=0;
800076be:	30 08       	mov	r8,0
800076c0:	ef 68 ff fd 	st.b	r7[-3],r8
  uint16_t sector_index = 0;
800076c4:	30 08       	mov	r8,0
800076c6:	ef 58 ff fe 	st.h	r7[-2],r8
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
800076ca:	c5 48       	rjmp	80007772 <sd_mmc_mci_read_multiple_sector+0xd2>
  {
    // (re)load first stage.
    dma_mci_2_ram((0==(buffer_id++%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
800076cc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800076d0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800076d4:	5f 08       	sreq	r8
800076d6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800076da:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800076de:	2f f8       	sub	r8,-1
800076e0:	ef 68 ff fd 	st.b	r7[-3],r8
800076e4:	58 09       	cp.w	r9,0
800076e6:	c0 30       	breq	800076ec <sd_mmc_mci_read_multiple_sector+0x4c>
800076e8:	4c 18       	lddpc	r8,800077ec <sd_mmc_mci_read_multiple_sector+0x14c>
800076ea:	c0 28       	rjmp	800076ee <sd_mmc_mci_read_multiple_sector+0x4e>
800076ec:	4c 18       	lddpc	r8,800077f0 <sd_mmc_mci_read_multiple_sector+0x150>
800076ee:	e0 6b 02 00 	mov	r11,512
800076f2:	10 9c       	mov	r12,r8
800076f4:	f0 1f 00 40 	mcall	800077f4 <sd_mmc_mci_read_multiple_sector+0x154>

    // (re)load second stage.
    if( !b_first_step )
800076f8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800076fc:	ec 18 00 01 	eorl	r8,0x1
80007700:	5c 58       	castu.b	r8
80007702:	c2 e0       	breq	8000775e <sd_mmc_mci_read_multiple_sector+0xbe>
	{
      apply_aes_decryption(&AVR32_AES, (0==(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 0, 512, addr /*+ sector_index * 512L*/);
80007704:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80007708:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000770c:	c0 31       	brne	80007712 <sd_mmc_mci_read_multiple_sector+0x72>
8000770e:	4b 8b       	lddpc	r11,800077ec <sd_mmc_mci_read_multiple_sector+0x14c>
80007710:	c0 28       	rjmp	80007714 <sd_mmc_mci_read_multiple_sector+0x74>
80007712:	4b 8b       	lddpc	r11,800077f0 <sd_mmc_mci_read_multiple_sector+0x150>
80007714:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007718:	e0 69 02 00 	mov	r9,512
8000771c:	30 0a       	mov	r10,0
8000771e:	fc 7c 00 00 	mov	r12,-196608
80007722:	f0 1f 00 36 	mcall	800077f8 <sd_mmc_mci_read_multiple_sector+0x158>
	  addr = addr + 512L; //sector_index++;
80007726:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000772a:	f0 c8 fe 00 	sub	r8,r8,-512
8000772e:	ef 48 ff f0 	st.w	r7[-16],r8
	  if (!udi_msc_trans_block(true, (0==(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
80007732:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80007736:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000773a:	c0 31       	brne	80007740 <sd_mmc_mci_read_multiple_sector+0xa0>
8000773c:	4a c8       	lddpc	r8,800077ec <sd_mmc_mci_read_multiple_sector+0x14c>
8000773e:	c0 28       	rjmp	80007742 <sd_mmc_mci_read_multiple_sector+0xa2>
80007740:	4a c8       	lddpc	r8,800077f0 <sd_mmc_mci_read_multiple_sector+0x150>
80007742:	30 09       	mov	r9,0
80007744:	e0 6a 02 00 	mov	r10,512
80007748:	10 9b       	mov	r11,r8
8000774a:	30 1c       	mov	r12,1
8000774c:	f0 1f 00 2c 	mcall	800077fc <sd_mmc_mci_read_multiple_sector+0x15c>
80007750:	18 98       	mov	r8,r12
80007752:	ec 18 00 01 	eorl	r8,0x1
80007756:	5c 58       	castu.b	r8
80007758:	c0 30       	breq	8000775e <sd_mmc_mci_read_multiple_sector+0xbe>
	  {
    	    return false;
8000775a:	30 08       	mov	r8,0
8000775c:	c4 48       	rjmp	800077e4 <sd_mmc_mci_read_multiple_sector+0x144>
      }

    }
    b_first_step = false;
8000775e:	30 08       	mov	r8,0
80007760:	ef 68 ff fc 	st.b	r7[-4],r8
    // Wait completion of DMACA stage.
    while( !is_dma_mci_2_ram_complete() );
80007764:	f0 1f 00 27 	mcall	80007800 <sd_mmc_mci_read_multiple_sector+0x160>
80007768:	18 98       	mov	r8,r12
8000776a:	ec 18 00 01 	eorl	r8,0x1
8000776e:	5c 58       	castu.b	r8
80007770:	cf a1       	brne	80007764 <sd_mmc_mci_read_multiple_sector+0xc4>
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
80007772:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80007776:	30 08       	mov	r8,0
80007778:	f0 09 19 00 	cp.h	r9,r8
8000777c:	5f 18       	srne	r8
8000777e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007782:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80007786:	20 18       	sub	r8,1
80007788:	ef 58 ff f4 	st.h	r7[-12],r8
8000778c:	58 09       	cp.w	r9,0
8000778e:	c9 f1       	brne	800076cc <sd_mmc_mci_read_multiple_sector+0x2c>
    while( !is_dma_mci_2_ram_complete() );

  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_decryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 0, 512, addr /*+ sector_index * 512L*/);
80007790:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80007794:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007798:	5c 58       	castu.b	r8
8000779a:	c0 30       	breq	800077a0 <sd_mmc_mci_read_multiple_sector+0x100>
8000779c:	49 4b       	lddpc	r11,800077ec <sd_mmc_mci_read_multiple_sector+0x14c>
8000779e:	c0 28       	rjmp	800077a2 <sd_mmc_mci_read_multiple_sector+0x102>
800077a0:	49 4b       	lddpc	r11,800077f0 <sd_mmc_mci_read_multiple_sector+0x150>
800077a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800077a6:	e0 69 02 00 	mov	r9,512
800077aa:	30 0a       	mov	r10,0
800077ac:	fc 7c 00 00 	mov	r12,-196608
800077b0:	f0 1f 00 12 	mcall	800077f8 <sd_mmc_mci_read_multiple_sector+0x158>
  if (!udi_msc_trans_block(true, (0!=(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
800077b4:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800077b8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800077bc:	5c 58       	castu.b	r8
800077be:	c0 30       	breq	800077c4 <sd_mmc_mci_read_multiple_sector+0x124>
800077c0:	48 b8       	lddpc	r8,800077ec <sd_mmc_mci_read_multiple_sector+0x14c>
800077c2:	c0 28       	rjmp	800077c6 <sd_mmc_mci_read_multiple_sector+0x126>
800077c4:	48 b8       	lddpc	r8,800077f0 <sd_mmc_mci_read_multiple_sector+0x150>
800077c6:	30 09       	mov	r9,0
800077c8:	e0 6a 02 00 	mov	r10,512
800077cc:	10 9b       	mov	r11,r8
800077ce:	30 1c       	mov	r12,1
800077d0:	f0 1f 00 0b 	mcall	800077fc <sd_mmc_mci_read_multiple_sector+0x15c>
800077d4:	18 98       	mov	r8,r12
800077d6:	ec 18 00 01 	eorl	r8,0x1
800077da:	5c 58       	castu.b	r8
800077dc:	c0 30       	breq	800077e2 <sd_mmc_mci_read_multiple_sector+0x142>
    return false;
800077de:	30 08       	mov	r8,0
800077e0:	c0 28       	rjmp	800077e4 <sd_mmc_mci_read_multiple_sector+0x144>

  return true;
800077e2:	30 18       	mov	r8,1
}
800077e4:	10 9c       	mov	r12,r8
800077e6:	2f cd       	sub	sp,-16
800077e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800077ec:	00 00       	add	r0,r0
800077ee:	0d a4       	ld.ub	r4,r6[0x2]
800077f0:	00 00       	add	r0,r0
800077f2:	0b 9c       	ld.ub	r12,r5[0x1]
800077f4:	80 00       	ld.sh	r0,r0[0x0]
800077f6:	70 54       	ld.w	r4,r8[0x14]
800077f8:	80 00       	ld.sh	r0,r0[0x0]
800077fa:	47 74       	lddsp	r4,sp[0x1dc]
800077fc:	80 00       	ld.sh	r0,r0[0x0]
800077fe:	ce d0       	breq	800077d8 <sd_mmc_mci_read_multiple_sector+0x138>
80007800:	80 00       	ld.sh	r0,r0[0x0]
80007802:	70 a4       	ld.w	r4,r8[0x28]

80007804 <sd_mmc_mci_write_multiple_sector>:



bool sd_mmc_mci_write_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
80007804:	eb cd 40 80 	pushm	r7,lr
80007808:	1a 97       	mov	r7,sp
8000780a:	20 4d       	sub	sp,16
8000780c:	18 99       	mov	r9,r12
8000780e:	16 98       	mov	r8,r11
80007810:	ef 4a ff f0 	st.w	r7[-16],r10
80007814:	ef 69 ff f8 	st.b	r7[-8],r9
80007818:	ef 58 ff f4 	st.h	r7[-12],r8
  bool b_first_step=true;
8000781c:	30 18       	mov	r8,1
8000781e:	ef 68 ff fc 	st.b	r7[-4],r8
  uint8_t   buffer_id=0;
80007822:	30 08       	mov	r8,0
80007824:	ef 68 ff fd 	st.b	r7[-3],r8
  uint16_t sector_index = 0;
80007828:	30 08       	mov	r8,0
8000782a:	ef 58 ff fe 	st.h	r7[-2],r8
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
8000782e:	c5 58       	rjmp	800078d8 <sd_mmc_mci_write_multiple_sector+0xd4>

    // (re)load second stage.
    if( !b_first_step )
80007830:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007834:	ec 18 00 01 	eorl	r8,0x1
80007838:	5c 58       	castu.b	r8
8000783a:	c2 70       	breq	80007888 <sd_mmc_mci_write_multiple_sector+0x84>
	{
	  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 0, 512, addr /*+ sector_index * 512L*/);
8000783c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80007840:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007844:	5c 58       	castu.b	r8
80007846:	c0 30       	breq	8000784c <sd_mmc_mci_write_multiple_sector+0x48>
80007848:	4c 2b       	lddpc	r11,80007950 <sd_mmc_mci_write_multiple_sector+0x14c>
8000784a:	c0 28       	rjmp	8000784e <sd_mmc_mci_write_multiple_sector+0x4a>
8000784c:	4c 2b       	lddpc	r11,80007954 <sd_mmc_mci_write_multiple_sector+0x150>
8000784e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007852:	e0 69 02 00 	mov	r9,512
80007856:	30 0a       	mov	r10,0
80007858:	fc 7c 00 00 	mov	r12,-196608
8000785c:	f0 1f 00 3f 	mcall	80007958 <sd_mmc_mci_write_multiple_sector+0x154>
	  addr = addr + 512L; //sector_index++;
80007860:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007864:	f0 c8 fe 00 	sub	r8,r8,-512
80007868:	ef 48 ff f0 	st.w	r7[-16],r8
      dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
8000786c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80007870:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007874:	5c 58       	castu.b	r8
80007876:	c0 30       	breq	8000787c <sd_mmc_mci_write_multiple_sector+0x78>
80007878:	4b 68       	lddpc	r8,80007950 <sd_mmc_mci_write_multiple_sector+0x14c>
8000787a:	c0 28       	rjmp	8000787e <sd_mmc_mci_write_multiple_sector+0x7a>
8000787c:	4b 68       	lddpc	r8,80007954 <sd_mmc_mci_write_multiple_sector+0x150>
8000787e:	e0 6b 02 00 	mov	r11,512
80007882:	10 9c       	mov	r12,r8
80007884:	f0 1f 00 36 	mcall	8000795c <sd_mmc_mci_write_multiple_sector+0x158>
    }
    udi_msc_trans_block(false, (0==(buffer_id++%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL);
80007888:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000788c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007890:	5f 08       	sreq	r8
80007892:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007896:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000789a:	2f f8       	sub	r8,-1
8000789c:	ef 68 ff fd 	st.b	r7[-3],r8
800078a0:	58 09       	cp.w	r9,0
800078a2:	c0 30       	breq	800078a8 <sd_mmc_mci_write_multiple_sector+0xa4>
800078a4:	4a b8       	lddpc	r8,80007950 <sd_mmc_mci_write_multiple_sector+0x14c>
800078a6:	c0 28       	rjmp	800078aa <sd_mmc_mci_write_multiple_sector+0xa6>
800078a8:	4a b8       	lddpc	r8,80007954 <sd_mmc_mci_write_multiple_sector+0x150>
800078aa:	30 09       	mov	r9,0
800078ac:	e0 6a 02 00 	mov	r10,512
800078b0:	10 9b       	mov	r11,r8
800078b2:	30 0c       	mov	r12,0
800078b4:	f0 1f 00 2b 	mcall	80007960 <sd_mmc_mci_write_multiple_sector+0x15c>
    if( !b_first_step ) {
800078b8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800078bc:	ec 18 00 01 	eorl	r8,0x1
800078c0:	5c 58       	castu.b	r8
800078c2:	c0 80       	breq	800078d2 <sd_mmc_mci_write_multiple_sector+0xce>
      // Wait completion of DMACA stage.
      while( !is_dma_ram_2_mci_complete() );
800078c4:	f0 1f 00 28 	mcall	80007964 <sd_mmc_mci_write_multiple_sector+0x160>
800078c8:	18 98       	mov	r8,r12
800078ca:	ec 18 00 01 	eorl	r8,0x1
800078ce:	5c 58       	castu.b	r8
800078d0:	cf a1       	brne	800078c4 <sd_mmc_mci_write_multiple_sector+0xc0>
    }
    b_first_step=false;
800078d2:	30 08       	mov	r8,0
800078d4:	ef 68 ff fc 	st.b	r7[-4],r8
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
800078d8:	ef 09 ff f4 	ld.sh	r9,r7[-12]
800078dc:	30 08       	mov	r8,0
800078de:	f0 09 19 00 	cp.h	r9,r8
800078e2:	5f 18       	srne	r8
800078e4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800078e8:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800078ec:	20 18       	sub	r8,1
800078ee:	ef 58 ff f4 	st.h	r7[-12],r8
800078f2:	58 09       	cp.w	r9,0
800078f4:	c9 e1       	brne	80007830 <sd_mmc_mci_write_multiple_sector+0x2c>
    }
    b_first_step=false;
  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 0, 512, addr /*+ sector_index * 512L*/);
800078f6:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800078fa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800078fe:	5c 58       	castu.b	r8
80007900:	c0 30       	breq	80007906 <sd_mmc_mci_write_multiple_sector+0x102>
80007902:	49 4b       	lddpc	r11,80007950 <sd_mmc_mci_write_multiple_sector+0x14c>
80007904:	c0 28       	rjmp	80007908 <sd_mmc_mci_write_multiple_sector+0x104>
80007906:	49 4b       	lddpc	r11,80007954 <sd_mmc_mci_write_multiple_sector+0x150>
80007908:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000790c:	e0 69 02 00 	mov	r9,512
80007910:	30 0a       	mov	r10,0
80007912:	fc 7c 00 00 	mov	r12,-196608
80007916:	f0 1f 00 11 	mcall	80007958 <sd_mmc_mci_write_multiple_sector+0x154>
  dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
8000791a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000791e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007922:	5c 58       	castu.b	r8
80007924:	c0 30       	breq	8000792a <sd_mmc_mci_write_multiple_sector+0x126>
80007926:	48 b8       	lddpc	r8,80007950 <sd_mmc_mci_write_multiple_sector+0x14c>
80007928:	c0 28       	rjmp	8000792c <sd_mmc_mci_write_multiple_sector+0x128>
8000792a:	48 b8       	lddpc	r8,80007954 <sd_mmc_mci_write_multiple_sector+0x150>
8000792c:	e0 6b 02 00 	mov	r11,512
80007930:	10 9c       	mov	r12,r8
80007932:	f0 1f 00 0b 	mcall	8000795c <sd_mmc_mci_write_multiple_sector+0x158>
  while( !is_dma_ram_2_mci_complete() );
80007936:	f0 1f 00 0c 	mcall	80007964 <sd_mmc_mci_write_multiple_sector+0x160>
8000793a:	18 98       	mov	r8,r12
8000793c:	ec 18 00 01 	eorl	r8,0x1
80007940:	5c 58       	castu.b	r8
80007942:	cf a1       	brne	80007936 <sd_mmc_mci_write_multiple_sector+0x132>
  return true;
80007944:	30 18       	mov	r8,1
}
80007946:	10 9c       	mov	r12,r8
80007948:	2f cd       	sub	sp,-16
8000794a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000794e:	00 00       	add	r0,r0
80007950:	00 00       	add	r0,r0
80007952:	0d a4       	ld.ub	r4,r6[0x2]
80007954:	00 00       	add	r0,r0
80007956:	0b 9c       	ld.ub	r12,r5[0x1]
80007958:	80 00       	ld.sh	r0,r0[0x0]
8000795a:	46 50       	lddsp	r0,sp[0x194]
8000795c:	80 00       	ld.sh	r0,r0[0x0]
8000795e:	70 c4       	ld.w	r4,r8[0x30]
80007960:	80 00       	ld.sh	r0,r0[0x0]
80007962:	ce d0       	breq	8000793c <sd_mmc_mci_write_multiple_sector+0x138>
80007964:	80 00       	ld.sh	r0,r0[0x0]
80007966:	71 14       	ld.w	r4,r8[0x44]

80007968 <sd_mmc_mci_cmd_send_status>:
   return true;
}
#endif      // end FUNC_MMC_CARD_SECU

bool  sd_mmc_mci_cmd_send_status(uint8_t slot)
{
80007968:	eb cd 40 80 	pushm	r7,lr
8000796c:	1a 97       	mov	r7,sp
8000796e:	20 1d       	sub	sp,4
80007970:	18 98       	mov	r8,r12
80007972:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80007976:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000797a:	30 18       	mov	r8,1
8000797c:	f0 09 18 00 	cp.b	r9,r8
80007980:	e0 88 00 04 	brls	80007988 <sd_mmc_mci_cmd_send_status+0x20>
    return false;
80007984:	30 08       	mov	r8,0
80007986:	c2 28       	rjmp	800079ca <sd_mmc_mci_cmd_send_status+0x62>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80007988:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000798c:	49 29       	lddpc	r9,800079d4 <sd_mmc_mci_cmd_send_status+0x6c>
8000798e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007992:	10 9a       	mov	r10,r8
80007994:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007998:	49 08       	lddpc	r8,800079d8 <sd_mmc_mci_cmd_send_status+0x70>
8000799a:	70 08       	ld.w	r8,r8[0x0]
8000799c:	12 9b       	mov	r11,r9
8000799e:	10 9c       	mov	r12,r8
800079a0:	f0 1f 00 0f 	mcall	800079dc <sd_mmc_mci_cmd_send_status+0x74>

  if (mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800079a4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800079a8:	48 e8       	lddpc	r8,800079e0 <sd_mmc_mci_cmd_send_status+0x78>
800079aa:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800079ae:	48 b8       	lddpc	r8,800079d8 <sd_mmc_mci_cmd_send_status+0x70>
800079b0:	70 08       	ld.w	r8,r8[0x0]
800079b2:	12 9a       	mov	r10,r9
800079b4:	e0 6b 10 4d 	mov	r11,4173
800079b8:	10 9c       	mov	r12,r8
800079ba:	f0 1f 00 0b 	mcall	800079e4 <sd_mmc_mci_cmd_send_status+0x7c>
800079be:	18 98       	mov	r8,r12
800079c0:	58 08       	cp.w	r8,0
800079c2:	c0 30       	breq	800079c8 <sd_mmc_mci_cmd_send_status+0x60>
    return false;
800079c4:	30 08       	mov	r8,0
800079c6:	c0 28       	rjmp	800079ca <sd_mmc_mci_cmd_send_status+0x62>

  return true;
800079c8:	30 18       	mov	r8,1
}
800079ca:	10 9c       	mov	r12,r8
800079cc:	2f fd       	sub	sp,-4
800079ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800079d2:	00 00       	add	r0,r0
800079d4:	00 00       	add	r0,r0
800079d6:	0d 9c       	ld.ub	r12,r6[0x1]
800079d8:	00 00       	add	r0,r0
800079da:	01 34       	ld.ub	r4,r0++
800079dc:	80 00       	ld.sh	r0,r0[0x0]
800079de:	93 78       	st.w	r9[0x1c],r8
800079e0:	00 00       	add	r0,r0
800079e2:	0b 8c       	ld.ub	r12,r5[0x0]
800079e4:	80 00       	ld.sh	r0,r0[0x0]
800079e6:	91 e0       	st.w	r8[0x38],r0

800079e8 <sd_mmc_mci_test_unit_ready>:
 */
//! @{


Ctrl_status sd_mmc_mci_test_unit_ready(uint8_t slot)
{
800079e8:	eb cd 40 80 	pushm	r7,lr
800079ec:	1a 97       	mov	r7,sp
800079ee:	20 1d       	sub	sp,4
800079f0:	18 98       	mov	r8,r12
800079f2:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS) return CTRL_FAIL;
800079f6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800079fa:	30 18       	mov	r8,1
800079fc:	f0 09 18 00 	cp.b	r9,r8
80007a00:	e0 88 00 04 	brls	80007a08 <sd_mmc_mci_test_unit_ready+0x20>
80007a04:	30 18       	mov	r8,1
80007a06:	c4 d8       	rjmp	80007aa0 <sd_mmc_mci_test_unit_ready+0xb8>

  Sd_mmc_mci_access_signal_on();
  switch (sd_mmc_mci_presence_status[slot])
80007a08:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007a0c:	4a 79       	lddpc	r9,80007aa8 <sd_mmc_mci_test_unit_ready+0xc0>
80007a0e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007a12:	58 18       	cp.w	r8,1
80007a14:	c1 d0       	breq	80007a4e <sd_mmc_mci_test_unit_ready+0x66>
80007a16:	58 28       	cp.w	r8,2
80007a18:	c3 50       	breq	80007a82 <sd_mmc_mci_test_unit_ready+0x9a>
80007a1a:	58 08       	cp.w	r8,0
80007a1c:	c3 b1       	brne	80007a92 <sd_mmc_mci_test_unit_ready+0xaa>
  {
    case SD_MMC_REMOVED:
      sd_mmc_mci_init_done[slot] = false;
80007a1e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007a22:	4a 3a       	lddpc	r10,80007aac <sd_mmc_mci_test_unit_ready+0xc4>
80007a24:	30 08       	mov	r8,0
80007a26:	f4 09 0b 08 	st.b	r10[r9],r8
      if (sd_mmc_mci_mem_check(slot))
80007a2a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007a2e:	10 9c       	mov	r12,r8
80007a30:	f0 1f 00 20 	mcall	80007ab0 <sd_mmc_mci_test_unit_ready+0xc8>
80007a34:	18 98       	mov	r8,r12
80007a36:	58 08       	cp.w	r8,0
80007a38:	c0 90       	breq	80007a4a <sd_mmc_mci_test_unit_ready+0x62>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_INSERTED;
80007a3a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007a3e:	49 ba       	lddpc	r10,80007aa8 <sd_mmc_mci_test_unit_ready+0xc0>
80007a40:	30 18       	mov	r8,1
80007a42:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
80007a46:	30 38       	mov	r8,3
80007a48:	c2 c8       	rjmp	80007aa0 <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
80007a4a:	30 28       	mov	r8,2
80007a4c:	c2 a8       	rjmp	80007aa0 <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_INSERTED:
      if (!sd_mmc_mci_mem_check(slot))
80007a4e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007a52:	10 9c       	mov	r12,r8
80007a54:	f0 1f 00 17 	mcall	80007ab0 <sd_mmc_mci_test_unit_ready+0xc8>
80007a58:	18 98       	mov	r8,r12
80007a5a:	ec 18 00 01 	eorl	r8,0x1
80007a5e:	5c 58       	castu.b	r8
80007a60:	c0 f0       	breq	80007a7e <sd_mmc_mci_test_unit_ready+0x96>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVING;
80007a62:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007a66:	49 1a       	lddpc	r10,80007aa8 <sd_mmc_mci_test_unit_ready+0xc0>
80007a68:	30 28       	mov	r8,2
80007a6a:	f4 09 0b 08 	st.b	r10[r9],r8
        sd_mmc_mci_init_done[slot] = false;
80007a6e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007a72:	48 fa       	lddpc	r10,80007aac <sd_mmc_mci_test_unit_ready+0xc4>
80007a74:	30 08       	mov	r8,0
80007a76:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
80007a7a:	30 38       	mov	r8,3
80007a7c:	c1 28       	rjmp	80007aa0 <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_GOOD;
80007a7e:	30 08       	mov	r8,0
80007a80:	c1 08       	rjmp	80007aa0 <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_REMOVING:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
80007a82:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007a86:	48 9a       	lddpc	r10,80007aa8 <sd_mmc_mci_test_unit_ready+0xc0>
80007a88:	30 08       	mov	r8,0
80007a8a:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
80007a8e:	30 28       	mov	r8,2
80007a90:	c0 88       	rjmp	80007aa0 <sd_mmc_mci_test_unit_ready+0xb8>

    default:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
80007a92:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007a96:	48 5a       	lddpc	r10,80007aa8 <sd_mmc_mci_test_unit_ready+0xc0>
80007a98:	30 08       	mov	r8,0
80007a9a:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_BUSY;
80007a9e:	30 38       	mov	r8,3
  }
}
80007aa0:	10 9c       	mov	r12,r8
80007aa2:	2f fd       	sub	sp,-4
80007aa4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007aa8:	00 00       	add	r0,r0
80007aaa:	01 38       	ld.ub	r8,r0++
80007aac:	00 00       	add	r0,r0
80007aae:	06 3c       	cp.w	r12,r3
80007ab0:	80 00       	ld.sh	r0,r0[0x0]
80007ab2:	71 34       	ld.w	r4,r8[0x4c]

80007ab4 <sd_mmc_mci_test_unit_ready_0>:


Ctrl_status sd_mmc_mci_test_unit_ready_0(void)
{
80007ab4:	eb cd 40 80 	pushm	r7,lr
80007ab8:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(0);
80007aba:	30 0c       	mov	r12,0
80007abc:	f0 1f 00 03 	mcall	80007ac8 <sd_mmc_mci_test_unit_ready_0+0x14>
80007ac0:	18 98       	mov	r8,r12
}
80007ac2:	10 9c       	mov	r12,r8
80007ac4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ac8:	80 00       	ld.sh	r0,r0[0x0]
80007aca:	79 e8       	ld.w	r8,r12[0x78]

80007acc <sd_mmc_mci_test_unit_ready_1>:


Ctrl_status sd_mmc_mci_test_unit_ready_1(void)
{
80007acc:	eb cd 40 80 	pushm	r7,lr
80007ad0:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(1);
80007ad2:	30 1c       	mov	r12,1
80007ad4:	f0 1f 00 03 	mcall	80007ae0 <sd_mmc_mci_test_unit_ready_1+0x14>
80007ad8:	18 98       	mov	r8,r12
}
80007ada:	10 9c       	mov	r12,r8
80007adc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ae0:	80 00       	ld.sh	r0,r0[0x0]
80007ae2:	79 e8       	ld.w	r8,r12[0x78]

80007ae4 <sd_mmc_mci_read_capacity>:


Ctrl_status sd_mmc_mci_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
80007ae4:	eb cd 40 80 	pushm	r7,lr
80007ae8:	1a 97       	mov	r7,sp
80007aea:	20 2d       	sub	sp,8
80007aec:	18 98       	mov	r8,r12
80007aee:	ef 4b ff f8 	st.w	r7[-8],r11
80007af2:	ef 68 ff fc 	st.b	r7[-4],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80007af6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007afa:	10 9c       	mov	r12,r8
80007afc:	f0 1f 00 0c 	mcall	80007b2c <sd_mmc_mci_read_capacity+0x48>
80007b00:	18 98       	mov	r8,r12
80007b02:	ec 18 00 01 	eorl	r8,0x1
80007b06:	5c 58       	castu.b	r8
80007b08:	c0 30       	breq	80007b0e <sd_mmc_mci_read_capacity+0x2a>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80007b0a:	30 28       	mov	r8,2
80007b0c:	c0 c8       	rjmp	80007b24 <sd_mmc_mci_read_capacity+0x40>
   }
   *nb_sector = g_card_size[slot]-1;
80007b0e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b12:	48 88       	lddpc	r8,80007b30 <sd_mmc_mci_read_capacity+0x4c>
80007b14:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007b18:	f0 c9 00 01 	sub	r9,r8,1
80007b1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b20:	91 09       	st.w	r8[0x0],r9
   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80007b22:	30 08       	mov	r8,0
}
80007b24:	10 9c       	mov	r12,r8
80007b26:	2f ed       	sub	sp,-8
80007b28:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b2c:	80 00       	ld.sh	r0,r0[0x0]
80007b2e:	71 34       	ld.w	r4,r8[0x4c]
80007b30:	00 00       	add	r0,r0
80007b32:	0b 94       	ld.ub	r4,r5[0x1]

80007b34 <sd_mmc_mci_read_capacity_0>:


Ctrl_status sd_mmc_mci_read_capacity_0(uint32_t *nb_sector)
{
80007b34:	eb cd 40 80 	pushm	r7,lr
80007b38:	1a 97       	mov	r7,sp
80007b3a:	20 1d       	sub	sp,4
80007b3c:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(0, nb_sector);
80007b40:	ee fb ff fc 	ld.w	r11,r7[-4]
80007b44:	30 0c       	mov	r12,0
80007b46:	f0 1f 00 04 	mcall	80007b54 <sd_mmc_mci_read_capacity_0+0x20>
80007b4a:	18 98       	mov	r8,r12
}
80007b4c:	10 9c       	mov	r12,r8
80007b4e:	2f fd       	sub	sp,-4
80007b50:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b54:	80 00       	ld.sh	r0,r0[0x0]
80007b56:	7a e4       	ld.w	r4,sp[0x38]

80007b58 <sd_mmc_mci_read_capacity_1>:


Ctrl_status sd_mmc_mci_read_capacity_1(uint32_t *nb_sector)
{
80007b58:	eb cd 40 80 	pushm	r7,lr
80007b5c:	1a 97       	mov	r7,sp
80007b5e:	20 1d       	sub	sp,4
80007b60:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(1, nb_sector);
80007b64:	ee fb ff fc 	ld.w	r11,r7[-4]
80007b68:	30 1c       	mov	r12,1
80007b6a:	f0 1f 00 04 	mcall	80007b78 <sd_mmc_mci_read_capacity_1+0x20>
80007b6e:	18 98       	mov	r8,r12
}
80007b70:	10 9c       	mov	r12,r8
80007b72:	2f fd       	sub	sp,-4
80007b74:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b78:	80 00       	ld.sh	r0,r0[0x0]
80007b7a:	7a e4       	ld.w	r4,sp[0x38]

80007b7c <sd_mmc_mci_wr_protect>:


bool sd_mmc_mci_wr_protect(uint8_t slot)
{
80007b7c:	eb cd 40 80 	pushm	r7,lr
80007b80:	1a 97       	mov	r7,sp
80007b82:	20 1d       	sub	sp,4
80007b84:	18 98       	mov	r8,r12
80007b86:	ef 68 ff fc 	st.b	r7[-4],r8
  return is_sd_mmc_mci_card_protected(slot);
80007b8a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007b8e:	10 9c       	mov	r12,r8
80007b90:	f0 1f 00 04 	mcall	80007ba0 <sd_mmc_mci_wr_protect+0x24>
80007b94:	18 98       	mov	r8,r12
}
80007b96:	10 9c       	mov	r12,r8
80007b98:	2f fd       	sub	sp,-4
80007b9a:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b9e:	00 00       	add	r0,r0
80007ba0:	80 00       	ld.sh	r0,r0[0x0]
80007ba2:	60 d8       	ld.w	r8,r0[0x34]

80007ba4 <sd_mmc_mci_wr_protect_0>:


bool sd_mmc_mci_wr_protect_0(void)
{
80007ba4:	eb cd 40 80 	pushm	r7,lr
80007ba8:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(0);
80007baa:	30 0c       	mov	r12,0
80007bac:	f0 1f 00 03 	mcall	80007bb8 <sd_mmc_mci_wr_protect_0+0x14>
80007bb0:	18 98       	mov	r8,r12
}
80007bb2:	10 9c       	mov	r12,r8
80007bb4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007bb8:	80 00       	ld.sh	r0,r0[0x0]
80007bba:	7b 7c       	ld.w	r12,sp[0x5c]

80007bbc <sd_mmc_mci_wr_protect_1>:


bool sd_mmc_mci_wr_protect_1(void)
{
80007bbc:	eb cd 40 80 	pushm	r7,lr
80007bc0:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(1);
80007bc2:	30 1c       	mov	r12,1
80007bc4:	f0 1f 00 03 	mcall	80007bd0 <sd_mmc_mci_wr_protect_1+0x14>
80007bc8:	18 98       	mov	r8,r12
}
80007bca:	10 9c       	mov	r12,r8
80007bcc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007bd0:	80 00       	ld.sh	r0,r0[0x0]
80007bd2:	7b 7c       	ld.w	r12,sp[0x5c]

80007bd4 <sd_mmc_mci_removal>:


bool sd_mmc_mci_removal(uint8_t slot)
{
80007bd4:	eb cd 40 80 	pushm	r7,lr
80007bd8:	1a 97       	mov	r7,sp
80007bda:	20 1d       	sub	sp,4
80007bdc:	18 98       	mov	r8,r12
80007bde:	ef 68 ff fc 	st.b	r7[-4],r8
  return false;
80007be2:	30 08       	mov	r8,0
}
80007be4:	10 9c       	mov	r12,r8
80007be6:	2f fd       	sub	sp,-4
80007be8:	e3 cd 80 80 	ldm	sp++,r7,pc

80007bec <sd_mmc_mci_removal_0>:


bool sd_mmc_mci_removal_0(void)
{
80007bec:	eb cd 40 80 	pushm	r7,lr
80007bf0:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(0);
80007bf2:	30 0c       	mov	r12,0
80007bf4:	f0 1f 00 03 	mcall	80007c00 <sd_mmc_mci_removal_0+0x14>
80007bf8:	18 98       	mov	r8,r12
}
80007bfa:	10 9c       	mov	r12,r8
80007bfc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c00:	80 00       	ld.sh	r0,r0[0x0]
80007c02:	7b d4       	ld.w	r4,sp[0x74]

80007c04 <sd_mmc_mci_removal_1>:


bool sd_mmc_mci_removal_1(void)
{
80007c04:	eb cd 40 80 	pushm	r7,lr
80007c08:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(1);
80007c0a:	30 1c       	mov	r12,1
80007c0c:	f0 1f 00 03 	mcall	80007c18 <sd_mmc_mci_removal_1+0x14>
80007c10:	18 98       	mov	r8,r12
}
80007c12:	10 9c       	mov	r12,r8
80007c14:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c18:	80 00       	ld.sh	r0,r0[0x0]
80007c1a:	7b d4       	ld.w	r4,sp[0x74]

80007c1c <sd_mmc_mci_usb_read_10>:
 */
//! @{


Ctrl_status sd_mmc_mci_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
80007c1c:	eb cd 40 80 	pushm	r7,lr
80007c20:	1a 97       	mov	r7,sp
80007c22:	20 3d       	sub	sp,12
80007c24:	18 99       	mov	r9,r12
80007c26:	ef 4b ff f8 	st.w	r7[-8],r11
80007c2a:	14 98       	mov	r8,r10
80007c2c:	ef 69 ff fc 	st.b	r7[-4],r9
80007c30:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80007c34:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007c38:	10 9c       	mov	r12,r8
80007c3a:	f0 1f 00 1f 	mcall	80007cb4 <sd_mmc_mci_usb_read_10+0x98>
80007c3e:	18 98       	mov	r8,r12
80007c40:	ec 18 00 01 	eorl	r8,0x1
80007c44:	5c 58       	castu.b	r8
80007c46:	c0 30       	breq	80007c4c <sd_mmc_mci_usb_read_10+0x30>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80007c48:	30 28       	mov	r8,2
80007c4a:	c3 08       	rjmp	80007caa <sd_mmc_mci_usb_read_10+0x8e>
   }

   if( !sd_mmc_mci_dma_read_open(slot, addr, NULL, nb_sector) )
80007c4c:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007c50:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007c54:	30 0a       	mov	r10,0
80007c56:	ee fb ff f8 	ld.w	r11,r7[-8]
80007c5a:	10 9c       	mov	r12,r8
80007c5c:	f0 1f 00 17 	mcall	80007cb8 <sd_mmc_mci_usb_read_10+0x9c>
80007c60:	18 98       	mov	r8,r12
80007c62:	ec 18 00 01 	eorl	r8,0x1
80007c66:	5c 58       	castu.b	r8
80007c68:	c0 30       	breq	80007c6e <sd_mmc_mci_usb_read_10+0x52>
     return CTRL_FAIL;
80007c6a:	30 18       	mov	r8,1
80007c6c:	c1 f8       	rjmp	80007caa <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_multiple_sector(slot, nb_sector, addr) )
80007c6e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007c72:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007c76:	ee fa ff f8 	ld.w	r10,r7[-8]
80007c7a:	12 9b       	mov	r11,r9
80007c7c:	10 9c       	mov	r12,r8
80007c7e:	f0 1f 00 10 	mcall	80007cbc <sd_mmc_mci_usb_read_10+0xa0>
80007c82:	18 98       	mov	r8,r12
80007c84:	ec 18 00 01 	eorl	r8,0x1
80007c88:	5c 58       	castu.b	r8
80007c8a:	c0 30       	breq	80007c90 <sd_mmc_mci_usb_read_10+0x74>
     return CTRL_FAIL;
80007c8c:	30 18       	mov	r8,1
80007c8e:	c0 e8       	rjmp	80007caa <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_close(slot) )
80007c90:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007c94:	10 9c       	mov	r12,r8
80007c96:	f0 1f 00 0b 	mcall	80007cc0 <sd_mmc_mci_usb_read_10+0xa4>
80007c9a:	18 98       	mov	r8,r12
80007c9c:	ec 18 00 01 	eorl	r8,0x1
80007ca0:	5c 58       	castu.b	r8
80007ca2:	c0 30       	breq	80007ca8 <sd_mmc_mci_usb_read_10+0x8c>
     return CTRL_FAIL;
80007ca4:	30 18       	mov	r8,1
80007ca6:	c0 28       	rjmp	80007caa <sd_mmc_mci_usb_read_10+0x8e>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80007ca8:	30 08       	mov	r8,0
}
80007caa:	10 9c       	mov	r12,r8
80007cac:	2f dd       	sub	sp,-12
80007cae:	e3 cd 80 80 	ldm	sp++,r7,pc
80007cb2:	00 00       	add	r0,r0
80007cb4:	80 00       	ld.sh	r0,r0[0x0]
80007cb6:	71 34       	ld.w	r4,r8[0x4c]
80007cb8:	80 00       	ld.sh	r0,r0[0x0]
80007cba:	72 14       	ld.w	r4,r9[0x4]
80007cbc:	80 00       	ld.sh	r0,r0[0x0]
80007cbe:	76 a0       	ld.w	r0,r11[0x28]
80007cc0:	80 00       	ld.sh	r0,r0[0x0]
80007cc2:	73 a8       	ld.w	r8,r9[0x68]

80007cc4 <sd_mmc_mci_usb_read_10_0>:


Ctrl_status sd_mmc_mci_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
80007cc4:	eb cd 40 80 	pushm	r7,lr
80007cc8:	1a 97       	mov	r7,sp
80007cca:	20 2d       	sub	sp,8
80007ccc:	ef 4c ff fc 	st.w	r7[-4],r12
80007cd0:	16 98       	mov	r8,r11
80007cd2:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(0, addr, nb_sector);
80007cd6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007cda:	10 9a       	mov	r10,r8
80007cdc:	ee fb ff fc 	ld.w	r11,r7[-4]
80007ce0:	30 0c       	mov	r12,0
80007ce2:	f0 1f 00 04 	mcall	80007cf0 <sd_mmc_mci_usb_read_10_0+0x2c>
80007ce6:	18 98       	mov	r8,r12
}
80007ce8:	10 9c       	mov	r12,r8
80007cea:	2f ed       	sub	sp,-8
80007cec:	e3 cd 80 80 	ldm	sp++,r7,pc
80007cf0:	80 00       	ld.sh	r0,r0[0x0]
80007cf2:	7c 1c       	ld.w	r12,lr[0x4]

80007cf4 <sd_mmc_mci_usb_read_10_1>:


Ctrl_status sd_mmc_mci_usb_read_10_1(uint32_t addr, uint16_t nb_sector)
{
80007cf4:	eb cd 40 80 	pushm	r7,lr
80007cf8:	1a 97       	mov	r7,sp
80007cfa:	20 2d       	sub	sp,8
80007cfc:	ef 4c ff fc 	st.w	r7[-4],r12
80007d00:	16 98       	mov	r8,r11
80007d02:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(1, addr, nb_sector);
80007d06:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007d0a:	10 9a       	mov	r10,r8
80007d0c:	ee fb ff fc 	ld.w	r11,r7[-4]
80007d10:	30 1c       	mov	r12,1
80007d12:	f0 1f 00 04 	mcall	80007d20 <sd_mmc_mci_usb_read_10_1+0x2c>
80007d16:	18 98       	mov	r8,r12
}
80007d18:	10 9c       	mov	r12,r8
80007d1a:	2f ed       	sub	sp,-8
80007d1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d20:	80 00       	ld.sh	r0,r0[0x0]
80007d22:	7c 1c       	ld.w	r12,lr[0x4]

80007d24 <sd_mmc_mci_usb_write_10>:
#endif
}


Ctrl_status sd_mmc_mci_usb_write_10(uint8_t slot,uint32_t addr, uint16_t nb_sector)
{
80007d24:	eb cd 40 80 	pushm	r7,lr
80007d28:	1a 97       	mov	r7,sp
80007d2a:	20 3d       	sub	sp,12
80007d2c:	18 99       	mov	r9,r12
80007d2e:	ef 4b ff f8 	st.w	r7[-8],r11
80007d32:	14 98       	mov	r8,r10
80007d34:	ef 69 ff fc 	st.b	r7[-4],r9
80007d38:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) || stSystemStatus.unlock_password_status == 0)
80007d3c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007d40:	10 9c       	mov	r12,r8
80007d42:	f0 1f 00 21 	mcall	80007dc4 <sd_mmc_mci_usb_write_10+0xa0>
80007d46:	18 98       	mov	r8,r12
80007d48:	ec 18 00 01 	eorl	r8,0x1
80007d4c:	5c 58       	castu.b	r8
80007d4e:	c0 61       	brne	80007d5a <sd_mmc_mci_usb_write_10+0x36>
80007d50:	49 e8       	lddpc	r8,80007dc8 <sd_mmc_mci_usb_write_10+0xa4>
80007d52:	70 08       	ld.w	r8,r8[0x0]
80007d54:	e6 18 40 00 	andh	r8,0x4000,COH
80007d58:	c0 31       	brne	80007d5e <sd_mmc_mci_usb_write_10+0x3a>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80007d5a:	30 28       	mov	r8,2
80007d5c:	c3 08       	rjmp	80007dbc <sd_mmc_mci_usb_write_10+0x98>
   }

   if( !sd_mmc_mci_dma_write_open(slot, addr, NULL, nb_sector) )
80007d5e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007d62:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007d66:	30 0a       	mov	r10,0
80007d68:	ee fb ff f8 	ld.w	r11,r7[-8]
80007d6c:	10 9c       	mov	r12,r8
80007d6e:	f0 1f 00 18 	mcall	80007dcc <sd_mmc_mci_usb_write_10+0xa8>
80007d72:	18 98       	mov	r8,r12
80007d74:	ec 18 00 01 	eorl	r8,0x1
80007d78:	5c 58       	castu.b	r8
80007d7a:	c0 30       	breq	80007d80 <sd_mmc_mci_usb_write_10+0x5c>
     return CTRL_FAIL;
80007d7c:	30 18       	mov	r8,1
80007d7e:	c1 f8       	rjmp	80007dbc <sd_mmc_mci_usb_write_10+0x98>

   if( !sd_mmc_mci_write_multiple_sector(slot, nb_sector, addr) )
80007d80:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007d84:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007d88:	ee fa ff f8 	ld.w	r10,r7[-8]
80007d8c:	12 9b       	mov	r11,r9
80007d8e:	10 9c       	mov	r12,r8
80007d90:	f0 1f 00 10 	mcall	80007dd0 <sd_mmc_mci_usb_write_10+0xac>
80007d94:	18 98       	mov	r8,r12
80007d96:	ec 18 00 01 	eorl	r8,0x1
80007d9a:	5c 58       	castu.b	r8
80007d9c:	c0 30       	breq	80007da2 <sd_mmc_mci_usb_write_10+0x7e>
     return CTRL_FAIL;
80007d9e:	30 18       	mov	r8,1
80007da0:	c0 e8       	rjmp	80007dbc <sd_mmc_mci_usb_write_10+0x98>

   if( !sd_mmc_mci_write_close(slot) )
80007da2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007da6:	10 9c       	mov	r12,r8
80007da8:	f0 1f 00 0b 	mcall	80007dd4 <sd_mmc_mci_usb_write_10+0xb0>
80007dac:	18 98       	mov	r8,r12
80007dae:	ec 18 00 01 	eorl	r8,0x1
80007db2:	5c 58       	castu.b	r8
80007db4:	c0 30       	breq	80007dba <sd_mmc_mci_usb_write_10+0x96>
     return CTRL_FAIL;
80007db6:	30 18       	mov	r8,1
80007db8:	c0 28       	rjmp	80007dbc <sd_mmc_mci_usb_write_10+0x98>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80007dba:	30 08       	mov	r8,0

}
80007dbc:	10 9c       	mov	r12,r8
80007dbe:	2f dd       	sub	sp,-12
80007dc0:	e3 cd 80 80 	ldm	sp++,r7,pc
80007dc4:	80 00       	ld.sh	r0,r0[0x0]
80007dc6:	71 34       	ld.w	r4,r8[0x4c]
80007dc8:	00 00       	add	r0,r0
80007dca:	0b 88       	ld.ub	r8,r5[0x0]
80007dcc:	80 00       	ld.sh	r0,r0[0x0]
80007dce:	74 44       	ld.w	r4,r10[0x10]
80007dd0:	80 00       	ld.sh	r0,r0[0x0]
80007dd2:	78 04       	ld.w	r4,r12[0x0]
80007dd4:	80 00       	ld.sh	r0,r0[0x0]
80007dd6:	75 b0       	ld.w	r0,r10[0x6c]

80007dd8 <sd_mmc_mci_usb_write_10_0>:


Ctrl_status sd_mmc_mci_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
80007dd8:	eb cd 40 80 	pushm	r7,lr
80007ddc:	1a 97       	mov	r7,sp
80007dde:	20 2d       	sub	sp,8
80007de0:	ef 4c ff fc 	st.w	r7[-4],r12
80007de4:	16 98       	mov	r8,r11
80007de6:	ef 58 ff f8 	st.h	r7[-8],r8
	if (stSystemStatus.read_only_mode_0_status == 0)
80007dea:	48 b8       	lddpc	r8,80007e14 <sd_mmc_mci_usb_write_10_0+0x3c>
80007dec:	70 08       	ld.w	r8,r8[0x0]
80007dee:	e6 18 20 00 	andh	r8,0x2000,COH
80007df2:	c0 31       	brne	80007df8 <sd_mmc_mci_usb_write_10_0+0x20>
	{
		return CTRL_FAIL;
80007df4:	30 18       	mov	r8,1
80007df6:	c0 a8       	rjmp	80007e0a <sd_mmc_mci_usb_write_10_0+0x32>
	}
	else
	{		
		return sd_mmc_mci_usb_write_10(0, addr, nb_sector);
80007df8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007dfc:	10 9a       	mov	r10,r8
80007dfe:	ee fb ff fc 	ld.w	r11,r7[-4]
80007e02:	30 0c       	mov	r12,0
80007e04:	f0 1f 00 05 	mcall	80007e18 <sd_mmc_mci_usb_write_10_0+0x40>
80007e08:	18 98       	mov	r8,r12
	}		
}
80007e0a:	10 9c       	mov	r12,r8
80007e0c:	2f ed       	sub	sp,-8
80007e0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e12:	00 00       	add	r0,r0
80007e14:	00 00       	add	r0,r0
80007e16:	0b 88       	ld.ub	r8,r5[0x0]
80007e18:	80 00       	ld.sh	r0,r0[0x0]
80007e1a:	7d 24       	ld.w	r4,lr[0x48]

80007e1c <sd_mmc_mci_usb_write_10_1>:


Ctrl_status sd_mmc_mci_usb_write_10_1(uint32_t addr, uint16_t nb_sector)
{
80007e1c:	eb cd 40 80 	pushm	r7,lr
80007e20:	1a 97       	mov	r7,sp
80007e22:	20 2d       	sub	sp,8
80007e24:	ef 4c ff fc 	st.w	r7[-4],r12
80007e28:	16 98       	mov	r8,r11
80007e2a:	ef 58 ff f8 	st.h	r7[-8],r8
	if (stSystemStatus.read_only_mode_1_status == 0)
80007e2e:	48 b8       	lddpc	r8,80007e58 <sd_mmc_mci_usb_write_10_1+0x3c>
80007e30:	70 08       	ld.w	r8,r8[0x0]
80007e32:	e6 18 10 00 	andh	r8,0x1000,COH
80007e36:	c0 31       	brne	80007e3c <sd_mmc_mci_usb_write_10_1+0x20>
	{
		return CTRL_FAIL;
80007e38:	30 18       	mov	r8,1
80007e3a:	c0 a8       	rjmp	80007e4e <sd_mmc_mci_usb_write_10_1+0x32>
	}
	else
	{		
		return sd_mmc_mci_usb_write_10(1, addr, nb_sector);
80007e3c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007e40:	10 9a       	mov	r10,r8
80007e42:	ee fb ff fc 	ld.w	r11,r7[-4]
80007e46:	30 1c       	mov	r12,1
80007e48:	f0 1f 00 05 	mcall	80007e5c <sd_mmc_mci_usb_write_10_1+0x40>
80007e4c:	18 98       	mov	r8,r12
	}		
}
80007e4e:	10 9c       	mov	r12,r8
80007e50:	2f ed       	sub	sp,-8
80007e52:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e56:	00 00       	add	r0,r0
80007e58:	00 00       	add	r0,r0
80007e5a:	0b 88       	ld.ub	r8,r5[0x0]
80007e5c:	80 00       	ld.sh	r0,r0[0x0]
80007e5e:	7d 24       	ld.w	r4,lr[0x48]

80007e60 <aes_configure>:




void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
80007e60:	eb cd 40 80 	pushm	r7,lr
80007e64:	1a 97       	mov	r7,sp
80007e66:	20 2d       	sub	sp,8
80007e68:	ef 4c ff fc 	st.w	r7[-4],r12
80007e6c:	ef 4b ff f8 	st.w	r7[-8],r11
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
80007e70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e74:	11 88       	ld.ub	r8,r8[0x0]
80007e76:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
            ((pAesConfig->ProcessingDelay << AVR32_AES_MR_PROCDLY_OFFSET) & AVR32_AES_MR_PROCDLY_MASK) |
80007e7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e7e:	11 98       	ld.ub	r8,r8[0x1]
80007e80:	a5 68       	lsl	r8,0x4
80007e82:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80007e86:	10 49       	or	r9,r8
            ((pAesConfig->StartMode << AVR32_AES_MR_SMOD_OFFSET) & AVR32_AES_MR_SMOD_MASK) |
80007e88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e8c:	11 a8       	ld.ub	r8,r8[0x2]
80007e8e:	a9 68       	lsl	r8,0x8
80007e90:	e2 18 03 00 	andl	r8,0x300,COH
80007e94:	10 49       	or	r9,r8
            ((pAesConfig->KeySize << AVR32_AES_MR_KEYSIZE_OFFSET) & AVR32_AES_MR_KEYSIZE_MASK) |
80007e96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e9a:	11 b8       	ld.ub	r8,r8[0x3]
80007e9c:	ab 68       	lsl	r8,0xa
80007e9e:	e2 18 0c 00 	andl	r8,0xc00,COH
80007ea2:	10 49       	or	r9,r8
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
80007ea4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ea8:	11 c8       	ld.ub	r8,r8[0x4]
80007eaa:	ad 68       	lsl	r8,0xc
80007eac:	e2 18 70 00 	andl	r8,0x7000,COH
80007eb0:	10 49       	or	r9,r8
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
80007eb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007eb6:	11 d8       	ld.ub	r8,r8[0x5]
80007eb8:	af 78       	lsl	r8,0xf
80007eba:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80007ebe:	10 49       	or	r9,r8
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
80007ec0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ec4:	11 e8       	ld.ub	r8,r8[0x6]
80007ec6:	b1 68       	lsl	r8,0x10
80007ec8:	e6 18 00 07 	andh	r8,0x7,COH
80007ecc:	10 49       	or	r9,r8
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
80007ece:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ed2:	11 f8       	ld.ub	r8,r8[0x7]
80007ed4:	b9 68       	lsl	r8,0x18
80007ed6:	e6 18 1f 00 	andh	r8,0x1f00,COH
80007eda:	f3 e8 10 08 	or	r8,r9,r8



void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
80007ede:	ea 18 00 e0 	orh	r8,0xe0
80007ee2:	10 99       	mov	r9,r8
80007ee4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007ee8:	91 19       	st.w	r8[0x4],r9
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
            ((AES_CKEY << AVR32_AES_MR_CKEY_OFFSET) & AVR32_AES_MR_CKEY_MASK);
}
80007eea:	2f ed       	sub	sp,-8
80007eec:	e3 cd 80 80 	ldm	sp++,r7,pc

80007ef0 <aes_set_key>:
  return(aes->isr);
}


void aes_set_key( volatile avr32_aes_t *aes, const unsigned long int *pKey)
{
80007ef0:	eb cd 40 80 	pushm	r7,lr
80007ef4:	1a 97       	mov	r7,sp
80007ef6:	20 4d       	sub	sp,16
80007ef8:	ef 4c ff f4 	st.w	r7[-12],r12
80007efc:	ef 4b ff f0 	st.w	r7[-16],r11
  unsigned long int volatile *pTempo = &(aes->keyw1r);
80007f00:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007f04:	2e 08       	sub	r8,-32
80007f06:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char       keylen = 0;
80007f0a:	30 08       	mov	r8,0
80007f0c:	ef 68 ff ff 	st.b	r7[-1],r8


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
80007f10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007f14:	70 18       	ld.w	r8,r8[0x4]
80007f16:	e2 18 0c 00 	andl	r8,0xc00,COH
80007f1a:	ab 88       	lsr	r8,0xa
80007f1c:	58 18       	cp.w	r8,1
80007f1e:	c0 90       	breq	80007f30 <aes_set_key+0x40>
80007f20:	c0 43       	brcs	80007f28 <aes_set_key+0x38>
80007f22:	58 28       	cp.w	r8,2
80007f24:	c0 a0       	breq	80007f38 <aes_set_key+0x48>
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
80007f26:	c2 38       	rjmp	80007f6c <aes_set_key+0x7c>


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
  {
    case 0: // 128bit cryptographic key
      keylen = 4;
80007f28:	30 48       	mov	r8,4
80007f2a:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
80007f2e:	c0 98       	rjmp	80007f40 <aes_set_key+0x50>
    case 1: // 192bit cryptographic key
      keylen = 6;
80007f30:	30 68       	mov	r8,6
80007f32:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
80007f36:	c0 58       	rjmp	80007f40 <aes_set_key+0x50>
    case 2: // 256bit cryptographic key
      keylen = 8;
80007f38:	30 88       	mov	r8,8
80007f3a:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
80007f3e:	c1 78       	rjmp	80007f6c <aes_set_key+0x7c>
80007f40:	c1 68       	rjmp	80007f6c <aes_set_key+0x7c>
    *pTempo++ = *pKey++;
80007f42:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f46:	70 09       	ld.w	r9,r8[0x0]
80007f48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f4c:	91 09       	st.w	r8[0x0],r9
80007f4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f52:	2f c8       	sub	r8,-4
80007f54:	ef 48 ff f8 	st.w	r7[-8],r8
80007f58:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f5c:	2f c8       	sub	r8,-4
80007f5e:	ef 48 ff f0 	st.w	r7[-16],r8
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
80007f62:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007f66:	20 18       	sub	r8,1
80007f68:	ef 68 ff ff 	st.b	r7[-1],r8
80007f6c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007f70:	30 08       	mov	r8,0
80007f72:	f0 09 18 00 	cp.b	r9,r8
80007f76:	ce 61       	brne	80007f42 <aes_set_key+0x52>
    *pTempo++ = *pKey++;
}
80007f78:	2f cd       	sub	sp,-16
80007f7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80007f7e <aes_set_initvector>:


void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
80007f7e:	eb cd 40 80 	pushm	r7,lr
80007f82:	1a 97       	mov	r7,sp
80007f84:	20 4d       	sub	sp,16
80007f86:	ef 4c ff f4 	st.w	r7[-12],r12
80007f8a:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->iv1r);
80007f8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007f92:	2a 08       	sub	r8,-96
80007f94:	ef 48 ff f8 	st.w	r7[-8],r8
  int i;

  for(i=0; i<4; i++)
80007f98:	30 08       	mov	r8,0
80007f9a:	ef 48 ff fc 	st.w	r7[-4],r8
80007f9e:	c1 68       	rjmp	80007fca <aes_set_initvector+0x4c>
    *pTempo++ = *pVector++;
80007fa0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007fa4:	70 09       	ld.w	r9,r8[0x0]
80007fa6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007faa:	91 09       	st.w	r8[0x0],r9
80007fac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fb0:	2f c8       	sub	r8,-4
80007fb2:	ef 48 ff f8 	st.w	r7[-8],r8
80007fb6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007fba:	2f c8       	sub	r8,-4
80007fbc:	ef 48 ff f0 	st.w	r7[-16],r8
void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
  volatile uint32_t *pTempo = &(aes->iv1r);
  int i;

  for(i=0; i<4; i++)
80007fc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007fc4:	2f f8       	sub	r8,-1
80007fc6:	ef 48 ff fc 	st.w	r7[-4],r8
80007fca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007fce:	58 38       	cp.w	r8,3
80007fd0:	fe 9a ff e8 	brle	80007fa0 <aes_set_initvector+0x22>
    *pTempo++ = *pVector++;
}
80007fd4:	2f cd       	sub	sp,-16
80007fd6:	e3 cd 80 80 	ldm	sp++,r7,pc

80007fda <aes_write_inputdata>:


void aes_write_inputdata( volatile avr32_aes_t *aes, uint32_t *pIn)
{
80007fda:	eb cd 40 80 	pushm	r7,lr
80007fde:	1a 97       	mov	r7,sp
80007fe0:	20 4d       	sub	sp,16
80007fe2:	ef 4c ff f4 	st.w	r7[-12],r12
80007fe6:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->idata1r);
80007fea:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007fee:	2c 08       	sub	r8,-64
80007ff0:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char inlen = 4;
80007ff4:	30 48       	mov	r8,4
80007ff6:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
80007ffa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007ffe:	70 18       	ld.w	r8,r8[0x4]
80008000:	e2 18 70 00 	andl	r8,0x7000,COH
80008004:	ad 88       	lsr	r8,0xc
80008006:	58 38       	cp.w	r8,3
80008008:	c2 c1       	brne	80008060 <aes_write_inputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
8000800a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000800e:	70 18       	ld.w	r8,r8[0x4]
80008010:	e6 18 00 07 	andh	r8,0x7,COH
80008014:	b1 88       	lsr	r8,0x10
80008016:	58 18       	cp.w	r8,1
80008018:	c0 60       	breq	80008024 <aes_write_inputdata+0x4a>
8000801a:	c2 33       	brcs	80008060 <aes_write_inputdata+0x86>
8000801c:	58 48       	cp.w	r8,4
8000801e:	e0 8b 00 21 	brhi	80008060 <aes_write_inputdata+0x86>
80008022:	c0 68       	rjmp	8000802e <aes_write_inputdata+0x54>
    {
      case 1: // 64bit CFB data size
        inlen = 2;
80008024:	30 28       	mov	r8,2
80008026:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
8000802a:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
8000802c:	c1 a8       	rjmp	80008060 <aes_write_inputdata+0x86>
        inlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        inlen = 1;
8000802e:	30 18       	mov	r8,1
80008030:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
80008034:	c1 68       	rjmp	80008060 <aes_write_inputdata+0x86>
    *pTempo++ = *pIn++;
80008036:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000803a:	70 09       	ld.w	r9,r8[0x0]
8000803c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008040:	91 09       	st.w	r8[0x0],r9
80008042:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008046:	2f c8       	sub	r8,-4
80008048:	ef 48 ff f8 	st.w	r7[-8],r8
8000804c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008050:	2f c8       	sub	r8,-4
80008052:	ef 48 ff f0 	st.w	r7[-16],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
80008056:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000805a:	20 18       	sub	r8,1
8000805c:	ef 68 ff ff 	st.b	r7[-1],r8
80008060:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008064:	30 08       	mov	r8,0
80008066:	f0 09 18 00 	cp.b	r9,r8
8000806a:	ce 61       	brne	80008036 <aes_write_inputdata+0x5c>
    *pTempo++ = *pIn++;
}
8000806c:	2f cd       	sub	sp,-16
8000806e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008072 <aes_read_outputdata>:


void aes_read_outputdata( volatile avr32_aes_t *aes, uint32_t *pOut)
{
80008072:	eb cd 40 80 	pushm	r7,lr
80008076:	1a 97       	mov	r7,sp
80008078:	20 4d       	sub	sp,16
8000807a:	ef 4c ff f4 	st.w	r7[-12],r12
8000807e:	ef 4b ff f0 	st.w	r7[-16],r11
  const volatile uint32_t *pTempo = &(aes->odata1r);
80008082:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008086:	2b 08       	sub	r8,-80
80008088:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char outlen = 4;
8000808c:	30 48       	mov	r8,4
8000808e:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
80008092:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008096:	70 18       	ld.w	r8,r8[0x4]
80008098:	e2 18 70 00 	andl	r8,0x7000,COH
8000809c:	ad 88       	lsr	r8,0xc
8000809e:	58 38       	cp.w	r8,3
800080a0:	c2 c1       	brne	800080f8 <aes_read_outputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
800080a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800080a6:	70 18       	ld.w	r8,r8[0x4]
800080a8:	e6 18 00 07 	andh	r8,0x7,COH
800080ac:	b1 88       	lsr	r8,0x10
800080ae:	58 18       	cp.w	r8,1
800080b0:	c0 60       	breq	800080bc <aes_read_outputdata+0x4a>
800080b2:	c2 33       	brcs	800080f8 <aes_read_outputdata+0x86>
800080b4:	58 48       	cp.w	r8,4
800080b6:	e0 8b 00 21 	brhi	800080f8 <aes_read_outputdata+0x86>
800080ba:	c0 68       	rjmp	800080c6 <aes_read_outputdata+0x54>
    {
      case 1: // 64bit CFB data size
        outlen = 2;
800080bc:	30 28       	mov	r8,2
800080be:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
800080c2:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
800080c4:	c1 a8       	rjmp	800080f8 <aes_read_outputdata+0x86>
        outlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        outlen = 1;
800080c6:	30 18       	mov	r8,1
800080c8:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
800080cc:	c1 68       	rjmp	800080f8 <aes_read_outputdata+0x86>
    *pOut++ = *pTempo++;
800080ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080d2:	70 09       	ld.w	r9,r8[0x0]
800080d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800080d8:	91 09       	st.w	r8[0x0],r9
800080da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800080de:	2f c8       	sub	r8,-4
800080e0:	ef 48 ff f0 	st.w	r7[-16],r8
800080e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080e8:	2f c8       	sub	r8,-4
800080ea:	ef 48 ff f8 	st.w	r7[-8],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
800080ee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800080f2:	20 18       	sub	r8,1
800080f4:	ef 68 ff ff 	st.b	r7[-1],r8
800080f8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800080fc:	30 08       	mov	r8,0
800080fe:	f0 09 18 00 	cp.b	r9,r8
80008102:	ce 61       	brne	800080ce <aes_read_outputdata+0x5c>
    *pOut++ = *pTempo++;
}
80008104:	2f cd       	sub	sp,-16
80008106:	e3 cd 80 80 	ldm	sp++,r7,pc
8000810a:	d7 03       	nop

8000810c <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
8000810c:	eb cd 40 80 	pushm	r7,lr
80008110:	1a 97       	mov	r7,sp
80008112:	20 cd       	sub	sp,48
80008114:	ef 4c ff d0 	st.w	r7[-48],r12
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80008118:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000811c:	ee 7a 42 3f 	mov	r10,999999
80008120:	f0 0a 00 09 	add	r9,r8,r10
80008124:	e0 68 de 83 	mov	r8,56963
80008128:	ea 18 43 1b 	orh	r8,0x431b
8000812c:	f2 08 06 48 	mulu.d	r8,r9,r8
80008130:	f2 08 16 12 	lsr	r8,r9,0x12
80008134:	ef 48 ff d4 	st.w	r7[-44],r8
//! Whether to use the NCS0 pin
#ifdef SMC_USE_NCS0
  #include SMC_COMPONENT_CS0

  // Setup SMC for NCS0
  SMC_CS_SETUP(0)
80008138:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000813c:	12 98       	mov	r8,r9
8000813e:	a3 68       	lsl	r8,0x2
80008140:	12 08       	add	r8,r9
80008142:	a3 68       	lsl	r8,0x2
80008144:	f0 c9 fc 19 	sub	r9,r8,-999
80008148:	e0 68 4d d3 	mov	r8,19923
8000814c:	ea 18 10 62 	orh	r8,0x1062
80008150:	f2 08 06 48 	mulu.d	r8,r9,r8
80008154:	f2 08 16 06 	lsr	r8,r9,0x6
80008158:	ef 48 ff d8 	st.w	r7[-40],r8
8000815c:	30 08       	mov	r8,0
8000815e:	ef 48 ff dc 	st.w	r7[-36],r8
80008162:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008166:	12 98       	mov	r8,r9
80008168:	a5 68       	lsl	r8,0x4
8000816a:	12 18       	sub	r8,r9
8000816c:	a1 78       	lsl	r8,0x1
8000816e:	f0 c9 fc 19 	sub	r9,r8,-999
80008172:	e0 68 4d d3 	mov	r8,19923
80008176:	ea 18 10 62 	orh	r8,0x1062
8000817a:	f2 08 06 48 	mulu.d	r8,r9,r8
8000817e:	f2 08 16 06 	lsr	r8,r9,0x6
80008182:	ef 48 ff e0 	st.w	r7[-32],r8
80008186:	30 08       	mov	r8,0
80008188:	ef 48 ff e4 	st.w	r7[-28],r8
8000818c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008190:	12 98       	mov	r8,r9
80008192:	a5 68       	lsl	r8,0x4
80008194:	12 18       	sub	r8,r9
80008196:	a3 68       	lsl	r8,0x2
80008198:	f0 c9 fc 19 	sub	r9,r8,-999
8000819c:	e0 68 4d d3 	mov	r8,19923
800081a0:	ea 18 10 62 	orh	r8,0x1062
800081a4:	f2 08 06 48 	mulu.d	r8,r9,r8
800081a8:	f2 08 16 06 	lsr	r8,r9,0x6
800081ac:	ef 48 ff e8 	st.w	r7[-24],r8
800081b0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800081b4:	f0 08 10 5a 	mul	r8,r8,90
800081b8:	f0 c9 fc 19 	sub	r9,r8,-999
800081bc:	e0 68 4d d3 	mov	r8,19923
800081c0:	ea 18 10 62 	orh	r8,0x1062
800081c4:	f2 08 06 48 	mulu.d	r8,r9,r8
800081c8:	f2 08 16 06 	lsr	r8,r9,0x6
800081cc:	ef 48 ff ec 	st.w	r7[-20],r8
800081d0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800081d4:	e0 68 00 d2 	mov	r8,210
800081d8:	f2 08 02 48 	mul	r8,r9,r8
800081dc:	f0 c9 fc 19 	sub	r9,r8,-999
800081e0:	e0 68 4d d3 	mov	r8,19923
800081e4:	ea 18 10 62 	orh	r8,0x1062
800081e8:	f2 08 06 48 	mulu.d	r8,r9,r8
800081ec:	f2 08 16 06 	lsr	r8,r9,0x6
800081f0:	ef 48 ff f0 	st.w	r7[-16],r8
800081f4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800081f8:	12 98       	mov	r8,r9
800081fa:	a5 68       	lsl	r8,0x4
800081fc:	12 18       	sub	r8,r9
800081fe:	a5 68       	lsl	r8,0x4
80008200:	f0 c9 fc 19 	sub	r9,r8,-999
80008204:	e0 68 4d d3 	mov	r8,19923
80008208:	ea 18 10 62 	orh	r8,0x1062
8000820c:	f2 08 06 48 	mulu.d	r8,r9,r8
80008210:	f2 08 16 06 	lsr	r8,r9,0x6
80008214:	ef 48 ff f4 	st.w	r7[-12],r8
80008218:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000821c:	f0 08 10 64 	mul	r8,r8,100
80008220:	f0 c9 fc 19 	sub	r9,r8,-999
80008224:	e0 68 4d d3 	mov	r8,19923
80008228:	ea 18 10 62 	orh	r8,0x1062
8000822c:	f2 08 06 48 	mulu.d	r8,r9,r8
80008230:	f2 08 16 06 	lsr	r8,r9,0x6
80008234:	ef 48 ff f8 	st.w	r7[-8],r8
80008238:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000823c:	e0 68 01 0e 	mov	r8,270
80008240:	f2 08 02 48 	mul	r8,r9,r8
80008244:	f0 c9 fc 19 	sub	r9,r8,-999
80008248:	e0 68 4d d3 	mov	r8,19923
8000824c:	ea 18 10 62 	orh	r8,0x1062
80008250:	f2 08 06 48 	mulu.d	r8,r9,r8
80008254:	f2 08 16 06 	lsr	r8,r9,0x6
80008258:	ef 48 ff fc 	st.w	r7[-4],r8
8000825c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008260:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008264:	10 09       	add	r9,r8
80008266:	ee fa ff e0 	ld.w	r10,r7[-32]
8000826a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000826e:	f4 08 00 08 	add	r8,r10,r8
80008272:	10 39       	cp.w	r9,r8
80008274:	c0 c2       	brcc	8000828c <smc_init+0x180>
80008276:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000827a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000827e:	10 09       	add	r9,r8
80008280:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008284:	f2 08 01 08 	sub	r8,r9,r8
80008288:	ef 48 ff f4 	st.w	r7[-12],r8
8000828c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008290:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008294:	10 09       	add	r9,r8
80008296:	ee fa ff d8 	ld.w	r10,r7[-40]
8000829a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000829e:	f4 08 00 08 	add	r8,r10,r8
800082a2:	10 39       	cp.w	r9,r8
800082a4:	c0 c2       	brcc	800082bc <smc_init+0x1b0>
800082a6:	ee f9 ff d8 	ld.w	r9,r7[-40]
800082aa:	ee f8 ff e8 	ld.w	r8,r7[-24]
800082ae:	10 09       	add	r9,r8
800082b0:	ee f8 ff dc 	ld.w	r8,r7[-36]
800082b4:	f2 08 01 08 	sub	r8,r9,r8
800082b8:	ef 48 ff ec 	st.w	r7[-20],r8
800082bc:	ee f9 ff dc 	ld.w	r9,r7[-36]
800082c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800082c4:	10 09       	add	r9,r8
800082c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082ca:	10 39       	cp.w	r9,r8
800082cc:	e0 88 00 0a 	brls	800082e0 <smc_init+0x1d4>
800082d0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800082d4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800082d8:	f2 08 00 08 	add	r8,r9,r8
800082dc:	ef 48 ff f8 	st.w	r7[-8],r8
800082e0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800082e4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800082e8:	10 09       	add	r9,r8
800082ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082ee:	10 39       	cp.w	r9,r8
800082f0:	e0 88 00 0a 	brls	80008304 <smc_init+0x1f8>
800082f4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800082f8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800082fc:	f2 08 00 08 	add	r8,r9,r8
80008300:	ef 48 ff f8 	st.w	r7[-8],r8
80008304:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008308:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000830c:	10 09       	add	r9,r8
8000830e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008312:	10 39       	cp.w	r9,r8
80008314:	e0 88 00 0a 	brls	80008328 <smc_init+0x21c>
80008318:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000831c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008320:	f2 08 00 08 	add	r8,r9,r8
80008324:	ef 48 ff fc 	st.w	r7[-4],r8
80008328:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000832c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008330:	10 09       	add	r9,r8
80008332:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008336:	10 39       	cp.w	r9,r8
80008338:	e0 88 00 0a 	brls	8000834c <smc_init+0x240>
8000833c:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008340:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008344:	f2 08 00 08 	add	r8,r9,r8
80008348:	ef 48 ff fc 	st.w	r7[-4],r8
8000834c:	fe 68 1c 00 	mov	r8,-123904
80008350:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008354:	f2 0a 15 08 	lsl	r10,r9,0x8
80008358:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000835c:	12 4a       	or	r10,r9
8000835e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008362:	b1 69       	lsl	r9,0x10
80008364:	12 4a       	or	r10,r9
80008366:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000836a:	b9 69       	lsl	r9,0x18
8000836c:	f5 e9 10 09 	or	r9,r10,r9
80008370:	91 09       	st.w	r8[0x0],r9
80008372:	fe 68 1c 00 	mov	r8,-123904
80008376:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000837a:	f2 0a 15 08 	lsl	r10,r9,0x8
8000837e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80008382:	12 4a       	or	r10,r9
80008384:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008388:	b1 69       	lsl	r9,0x10
8000838a:	12 4a       	or	r10,r9
8000838c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008390:	b9 69       	lsl	r9,0x18
80008392:	f5 e9 10 09 	or	r9,r10,r9
80008396:	91 19       	st.w	r8[0x4],r9
80008398:	fe 68 1c 00 	mov	r8,-123904
8000839c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800083a0:	f2 0a 15 10 	lsl	r10,r9,0x10
800083a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800083a8:	f5 e9 10 09 	or	r9,r10,r9
800083ac:	91 29       	st.w	r8[0x8],r9
800083ae:	fe 68 1c 00 	mov	r8,-123904
800083b2:	e0 69 10 03 	mov	r9,4099
800083b6:	91 39       	st.w	r8[0xc],r9
800083b8:	48 49       	lddpc	r9,800083c8 <smc_init+0x2bc>
800083ba:	30 18       	mov	r8,1
800083bc:	b2 88       	st.b	r9[0x0],r8
  #undef NCS_CONTROLLED_READ
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
800083be:	f0 1f 00 04 	mcall	800083cc <smc_init+0x2c0>
}
800083c2:	2f 4d       	sub	sp,-48
800083c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800083c8:	00 00       	add	r0,r0
800083ca:	06 50       	eor	r0,r3
800083cc:	80 00       	ld.sh	r0,r0[0x0]
800083ce:	83 d0       	st.w	r1[0x34],r0

800083d0 <smc_enable_muxed_pins>:

/*! \brief Puts the multiplexed MCU pins used for the SMC
 *
 */
static void smc_enable_muxed_pins(void)
{
800083d0:	eb cd 40 80 	pushm	r7,lr
800083d4:	1a 97       	mov	r7,sp
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
800083d6:	31 4b       	mov	r11,20
800083d8:	48 3c       	lddpc	r12,800083e4 <smc_enable_muxed_pins+0x14>
800083da:	f0 1f 00 04 	mcall	800083e8 <smc_enable_muxed_pins+0x18>
}
800083de:	e3 cd 80 80 	ldm	sp++,r7,pc
800083e2:	00 00       	add	r0,r0
800083e4:	80 00       	ld.sh	r0,r0[0x0]
800083e6:	eb cc 80 00 	stm	--r12,pc
800083ea:	88 50       	ld.sh	r0,r4[0xa]

800083ec <flashc_set_wait_state>:
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
800083ec:	eb cd 40 80 	pushm	r7,lr
800083f0:	1a 97       	mov	r7,sp
800083f2:	20 2d       	sub	sp,8
800083f4:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800083f8:	fe 68 14 00 	mov	r8,-125952
800083fc:	70 08       	ld.w	r8,r8[0x0]
800083fe:	30 09       	mov	r9,0
80008400:	ef 49 ff fc 	st.w	r7[-4],r9
80008404:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80008408:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000840c:	5c 58       	castu.b	r8
8000840e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008412:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80008416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000841a:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
8000841e:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80008422:	fe 68 14 00 	mov	r8,-125952
80008426:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000842a:	91 09       	st.w	r8[0x0],r9
}
8000842c:	2f ed       	sub	sp,-8
8000842e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008432:	d7 03       	nop

80008434 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80008434:	eb cd 40 80 	pushm	r7,lr
80008438:	1a 97       	mov	r7,sp
8000843a:	20 1d       	sub	sp,4
8000843c:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80008440:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008444:	e0 69 50 ff 	mov	r9,20735
80008448:	ea 19 02 25 	orh	r9,0x225
8000844c:	12 38       	cp.w	r8,r9
8000844e:	e0 88 00 06 	brls	8000845a <flashc_set_bus_freq+0x26>
		// Set 1 WS.
		flashc_set_wait_state(1);
80008452:	30 1c       	mov	r12,1
80008454:	f0 1f 00 05 	mcall	80008468 <flashc_set_bus_freq+0x34>
80008458:	c0 48       	rjmp	80008460 <flashc_set_bus_freq+0x2c>
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
8000845a:	30 0c       	mov	r12,0
8000845c:	f0 1f 00 03 	mcall	80008468 <flashc_set_bus_freq+0x34>
	}
}
80008460:	2f fd       	sub	sp,-4
80008462:	e3 cd 80 80 	ldm	sp++,r7,pc
80008466:	00 00       	add	r0,r0
80008468:	80 00       	ld.sh	r0,r0[0x0]
8000846a:	83 ec       	st.w	r1[0x38],r12

8000846c <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
8000846c:	eb cd 40 80 	pushm	r7,lr
80008470:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80008472:	fe 68 14 00 	mov	r8,-125952
80008476:	70 28       	ld.w	r8,r8[0x8]
80008478:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000847c:	5c 58       	castu.b	r8
}
8000847e:	10 9c       	mov	r12,r8
80008480:	e3 cd 80 80 	ldm	sp++,r7,pc

80008484 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80008484:	eb cd 40 80 	pushm	r7,lr
80008488:	1a 97       	mov	r7,sp
	while (!flashc_is_ready());
8000848a:	f0 1f 00 05 	mcall	8000849c <flashc_default_wait_until_ready+0x18>
8000848e:	18 98       	mov	r8,r12
80008490:	ec 18 00 01 	eorl	r8,0x1
80008494:	5c 58       	castu.b	r8
80008496:	cf a1       	brne	8000848a <flashc_default_wait_until_ready+0x6>
}
80008498:	e3 cd 80 80 	ldm	sp++,r7,pc
8000849c:	80 00       	ld.sh	r0,r0[0x0]
8000849e:	84 6c       	ld.sh	r12,r2[0xc]

800084a0 <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
800084a0:	eb cd 40 80 	pushm	r7,lr
800084a4:	1a 97       	mov	r7,sp
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800084a6:	fe 68 14 00 	mov	r8,-125952
800084aa:	70 28       	ld.w	r8,r8[0x8]
800084ac:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHC_FSR_PROGE_MASK);
}
800084b0:	10 9c       	mov	r12,r8
800084b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800084b6:	d7 03       	nop

800084b8 <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
800084b8:	eb cd 40 80 	pushm	r7,lr
800084bc:	1a 97       	mov	r7,sp
800084be:	20 3d       	sub	sp,12
800084c0:	ef 4c ff f8 	st.w	r7[-8],r12
800084c4:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
800084c8:	49 b8       	lddpc	r8,80008534 <flashc_issue_command+0x7c>
800084ca:	70 08       	ld.w	r8,r8[0x0]
800084cc:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
800084ce:	fe 68 14 00 	mov	r8,-125952
800084d2:	70 18       	ld.w	r8,r8[0x4]
800084d4:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800084d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800084dc:	5c 58       	castu.b	r8
800084de:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800084e2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800084e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800084ea:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
800084ee:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
800084f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084f6:	58 08       	cp.w	r8,0
800084f8:	c0 b5       	brlt	8000850e <flashc_issue_command+0x56>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
800084fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084fe:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80008502:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008506:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
8000850a:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
8000850e:	3a 58       	mov	r8,-91
80008510:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80008514:	fe 68 14 00 	mov	r8,-125952
80008518:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000851c:	91 19       	st.w	r8[0x4],r9
	flashc_error_status = flashc_get_error_status();
8000851e:	f0 1f 00 07 	mcall	80008538 <flashc_issue_command+0x80>
80008522:	18 99       	mov	r9,r12
80008524:	48 68       	lddpc	r8,8000853c <flashc_issue_command+0x84>
80008526:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
80008528:	48 38       	lddpc	r8,80008534 <flashc_issue_command+0x7c>
8000852a:	70 08       	ld.w	r8,r8[0x0]
8000852c:	5d 18       	icall	r8
}
8000852e:	2f dd       	sub	sp,-12
80008530:	e3 cd 80 80 	ldm	sp++,r7,pc
80008534:	00 00       	add	r0,r0
80008536:	01 3c       	ld.ub	r12,r0++
80008538:	80 00       	ld.sh	r0,r0[0x0]
8000853a:	84 a0       	ld.uh	r0,r2[0x4]
8000853c:	00 00       	add	r0,r0
8000853e:	06 58       	eor	r8,r3

80008540 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80008540:	eb cd 40 80 	pushm	r7,lr
80008544:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80008546:	3f fb       	mov	r11,-1
80008548:	30 3c       	mov	r12,3
8000854a:	f0 1f 00 03 	mcall	80008554 <flashc_clear_page_buffer+0x14>
}
8000854e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008552:	00 00       	add	r0,r0
80008554:	80 00       	ld.sh	r0,r0[0x0]
80008556:	84 b8       	ld.uh	r8,r2[0x6]

80008558 <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
80008558:	eb cd 40 80 	pushm	r7,lr
8000855c:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
8000855e:	fe 68 14 00 	mov	r8,-125952
80008562:	70 28       	ld.w	r8,r8[0x8]
80008564:	e2 18 00 20 	andl	r8,0x20,COH
80008568:	5f 18       	srne	r8
8000856a:	5c 58       	castu.b	r8
}
8000856c:	10 9c       	mov	r12,r8
8000856e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008572:	d7 03       	nop

80008574 <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80008574:	eb cd 40 80 	pushm	r7,lr
80008578:	1a 97       	mov	r7,sp
8000857a:	20 1d       	sub	sp,4
8000857c:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80008580:	ee fb ff fc 	ld.w	r11,r7[-4]
80008584:	30 cc       	mov	r12,12
80008586:	f0 1f 00 05 	mcall	80008598 <flashc_quick_page_read+0x24>
	return flashc_is_page_erased();
8000858a:	f0 1f 00 05 	mcall	8000859c <flashc_quick_page_read+0x28>
8000858e:	18 98       	mov	r8,r12
}
80008590:	10 9c       	mov	r12,r8
80008592:	2f fd       	sub	sp,-4
80008594:	e3 cd 80 80 	ldm	sp++,r7,pc
80008598:	80 00       	ld.sh	r0,r0[0x0]
8000859a:	84 b8       	ld.uh	r8,r2[0x6]
8000859c:	80 00       	ld.sh	r0,r0[0x0]
8000859e:	85 58       	st.w	r2[0x14],r8

800085a0 <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
800085a0:	eb cd 40 80 	pushm	r7,lr
800085a4:	1a 97       	mov	r7,sp
800085a6:	20 4d       	sub	sp,16
800085a8:	ef 4c ff f4 	st.w	r7[-12],r12
800085ac:	16 98       	mov	r8,r11
800085ae:	ef 68 ff f0 	st.b	r7[-16],r8
	bool page_erased = true;
800085b2:	30 18       	mov	r8,1
800085b4:	ef 68 ff fb 	st.b	r7[-5],r8

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
800085b8:	ee fb ff f4 	ld.w	r11,r7[-12]
800085bc:	30 2c       	mov	r12,2
800085be:	f0 1f 00 10 	mcall	800085fc <flashc_erase_page+0x5c>
	if (check) {
800085c2:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800085c6:	30 08       	mov	r8,0
800085c8:	f0 09 18 00 	cp.b	r9,r8
800085cc:	c1 20       	breq	800085f0 <flashc_erase_page+0x50>
		unsigned int error_status = flashc_error_status;
800085ce:	48 d8       	lddpc	r8,80008600 <flashc_erase_page+0x60>
800085d0:	70 08       	ld.w	r8,r8[0x0]
800085d2:	ef 48 ff fc 	st.w	r7[-4],r8
		page_erased = flashc_quick_page_read(-1);
800085d6:	3f fc       	mov	r12,-1
800085d8:	f0 1f 00 0b 	mcall	80008604 <flashc_erase_page+0x64>
800085dc:	18 98       	mov	r8,r12
800085de:	ef 68 ff fb 	st.b	r7[-5],r8
		flashc_error_status |= error_status;
800085e2:	48 88       	lddpc	r8,80008600 <flashc_erase_page+0x60>
800085e4:	70 09       	ld.w	r9,r8[0x0]
800085e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085ea:	10 49       	or	r9,r8
800085ec:	48 58       	lddpc	r8,80008600 <flashc_erase_page+0x60>
800085ee:	91 09       	st.w	r8[0x0],r9
	}
	return page_erased;
800085f0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
800085f4:	10 9c       	mov	r12,r8
800085f6:	2f cd       	sub	sp,-16
800085f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800085fc:	80 00       	ld.sh	r0,r0[0x0]
800085fe:	84 b8       	ld.uh	r8,r2[0x6]
80008600:	00 00       	add	r0,r0
80008602:	06 58       	eor	r8,r3
80008604:	80 00       	ld.sh	r0,r0[0x0]
80008606:	85 74       	st.w	r2[0x1c],r4

80008608 <flashc_write_page>:
	return all_pages_erased;
}


void flashc_write_page(int page_number)
{
80008608:	eb cd 40 80 	pushm	r7,lr
8000860c:	1a 97       	mov	r7,sp
8000860e:	20 1d       	sub	sp,4
80008610:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80008614:	ee fb ff fc 	ld.w	r11,r7[-4]
80008618:	30 1c       	mov	r12,1
8000861a:	f0 1f 00 03 	mcall	80008624 <flashc_write_page+0x1c>
}
8000861e:	2f fd       	sub	sp,-4
80008620:	e3 cd 80 80 	ldm	sp++,r7,pc
80008624:	80 00       	ld.sh	r0,r0[0x0]
80008626:	84 b8       	ld.uh	r8,r2[0x6]

80008628 <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80008628:	eb cd 40 80 	pushm	r7,lr
8000862c:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
8000862e:	3f fb       	mov	r11,-1
80008630:	30 fc       	mov	r12,15
80008632:	f0 1f 00 05 	mcall	80008644 <flashc_quick_user_page_read+0x1c>
	return flashc_is_page_erased();
80008636:	f0 1f 00 05 	mcall	80008648 <flashc_quick_user_page_read+0x20>
8000863a:	18 98       	mov	r8,r12
}
8000863c:	10 9c       	mov	r12,r8
8000863e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008642:	00 00       	add	r0,r0
80008644:	80 00       	ld.sh	r0,r0[0x0]
80008646:	84 b8       	ld.uh	r8,r2[0x6]
80008648:	80 00       	ld.sh	r0,r0[0x0]
8000864a:	85 58       	st.w	r2[0x14],r8

8000864c <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
8000864c:	eb cd 40 80 	pushm	r7,lr
80008650:	1a 97       	mov	r7,sp
80008652:	20 1d       	sub	sp,4
80008654:	18 98       	mov	r8,r12
80008656:	ef 68 ff fc 	st.b	r7[-4],r8
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
8000865a:	3f fb       	mov	r11,-1
8000865c:	30 ec       	mov	r12,14
8000865e:	f0 1f 00 09 	mcall	80008680 <flashc_erase_user_page+0x34>
	return (check) ? flashc_quick_user_page_read() : true;
80008662:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80008666:	30 08       	mov	r8,0
80008668:	f0 09 18 00 	cp.b	r9,r8
8000866c:	c0 50       	breq	80008676 <flashc_erase_user_page+0x2a>
8000866e:	f0 1f 00 06 	mcall	80008684 <flashc_erase_user_page+0x38>
80008672:	18 98       	mov	r8,r12
80008674:	c0 28       	rjmp	80008678 <flashc_erase_user_page+0x2c>
80008676:	30 18       	mov	r8,1
}
80008678:	10 9c       	mov	r12,r8
8000867a:	2f fd       	sub	sp,-4
8000867c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008680:	80 00       	ld.sh	r0,r0[0x0]
80008682:	84 b8       	ld.uh	r8,r2[0x6]
80008684:	80 00       	ld.sh	r0,r0[0x0]
80008686:	86 28       	ld.sh	r8,r3[0x4]

80008688 <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80008688:	eb cd 40 80 	pushm	r7,lr
8000868c:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
8000868e:	3f fb       	mov	r11,-1
80008690:	30 dc       	mov	r12,13
80008692:	f0 1f 00 03 	mcall	8000869c <flashc_write_user_page+0x14>
}
80008696:	e3 cd 80 80 	ldm	sp++,r7,pc
8000869a:	00 00       	add	r0,r0
8000869c:	80 00       	ld.sh	r0,r0[0x0]
8000869e:	84 b8       	ld.uh	r8,r2[0x6]

800086a0 <flashc_memcpy>:
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
800086a0:	eb cd 40 80 	pushm	r7,lr
800086a4:	1a 97       	mov	r7,sp
800086a6:	20 bd       	sub	sp,44
800086a8:	ef 4c ff e0 	st.w	r7[-32],r12
800086ac:	ef 4b ff dc 	st.w	r7[-36],r11
800086b0:	ef 4a ff d8 	st.w	r7[-40],r10
800086b4:	12 98       	mov	r8,r9
800086b6:	ef 68 ff d4 	st.b	r7[-44],r8
	uint16_t page_pos;
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
800086ba:	30 08       	mov	r8,0
800086bc:	ef 48 ff f0 	st.w	r7[-16],r8
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
800086c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800086c4:	ef 48 ff f8 	st.w	r7[-8],r8
	const uint8_t* src_buf=(const uint8_t*)src;
800086c8:	ee f8 ff dc 	ld.w	r8,r7[-36]
800086cc:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
800086d0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800086d4:	e0 69 ff ff 	mov	r9,65535
800086d8:	ea 19 80 7f 	orh	r9,0x807f
800086dc:	12 38       	cp.w	r8,r9
800086de:	5f b8       	srhi	r8
800086e0:	ef 68 ff ef 	st.b	r7[-17],r8

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
800086e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800086e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800086ec:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800086f0:	f2 08 01 08 	sub	r8,r9,r8
800086f4:	ef 48 ff f4 	st.w	r7[-12],r8

	while (nbytes) {
800086f8:	c9 18       	rjmp	8000881a <flashc_memcpy+0x17a>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
800086fa:	f0 1f 00 50 	mcall	80008838 <flashc_memcpy+0x198>
		error_status |= flashc_error_status;
800086fe:	4d 08       	lddpc	r8,8000883c <flashc_memcpy+0x19c>
80008700:	70 08       	ld.w	r8,r8[0x0]
80008702:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008706:	f3 e8 10 08 	or	r8,r9,r8
8000870a:	ef 48 ff f0 	st.w	r7[-16],r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
8000870e:	30 08       	mov	r8,0
80008710:	ef 58 ff ec 	st.h	r7[-20],r8
80008714:	c4 b8       	rjmp	800087aa <flashc_memcpy+0x10a>
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
80008716:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000871a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000871e:	ee e9 ff e4 	st.d	r7[-28],r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80008722:	30 08       	mov	r8,0
80008724:	ef 68 ff ee 	st.b	r7[-18],r8
80008728:	c2 d8       	rjmp	80008782 <flashc_memcpy+0xe2>
				if (nbytes && (flash_add == dest_add)) {
8000872a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000872e:	58 08       	cp.w	r8,0
80008730:	c1 f0       	breq	8000876e <flashc_memcpy+0xce>
80008732:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008736:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000873a:	10 39       	cp.w	r9,r8
8000873c:	c1 91       	brne	8000876e <flashc_memcpy+0xce>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
8000873e:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008742:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008746:	11 88       	ld.ub	r8,r8[0x0]
80008748:	ee 09 00 09 	add	r9,r7,r9
8000874c:	f3 68 ff e4 	st.b	r9[-28],r8
80008750:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008754:	2f f8       	sub	r8,-1
80008756:	ef 48 ff fc 	st.w	r7[-4],r8
					dest_add++;
8000875a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000875e:	2f f8       	sub	r8,-1
80008760:	ef 48 ff f8 	st.w	r7[-8],r8
					nbytes--;
80008764:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008768:	20 18       	sub	r8,1
8000876a:	ef 48 ff d8 	st.w	r7[-40],r8
				}
				flash_add++;
8000876e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008772:	2f f8       	sub	r8,-1
80008774:	ef 48 ff f4 	st.w	r7[-12],r8
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80008778:	ef 38 ff ee 	ld.ub	r8,r7[-18]
8000877c:	2f f8       	sub	r8,-1
8000877e:	ef 68 ff ee 	st.b	r7[-18],r8
80008782:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008786:	30 78       	mov	r8,7
80008788:	f0 09 18 00 	cp.b	r9,r8
8000878c:	fe 98 ff cf 	brls	8000872a <flashc_memcpy+0x8a>
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
80008790:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008794:	20 88       	sub	r8,8
80008796:	10 9a       	mov	r10,r8
80008798:	ee e8 ff e4 	ld.d	r8,r7[-28]
8000879c:	f4 e9 00 00 	st.d	r10[0],r8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
800087a0:	ef 08 ff ec 	ld.sh	r8,r7[-20]
800087a4:	2f 88       	sub	r8,-8
800087a6:	ef 58 ff ec 	st.h	r7[-20],r8
800087aa:	ef 09 ff ec 	ld.sh	r9,r7[-20]
800087ae:	e0 68 01 ff 	mov	r8,511
800087b2:	f0 09 19 00 	cp.h	r9,r8
800087b6:	fe 98 ff b0 	brls	80008716 <flashc_memcpy+0x76>
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
800087ba:	ef 39 ff d4 	ld.ub	r9,r7[-44]
800087be:	30 08       	mov	r8,0
800087c0:	f0 09 18 00 	cp.b	r9,r8
800087c4:	c1 70       	breq	800087f2 <flashc_memcpy+0x152>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
800087c6:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800087ca:	30 08       	mov	r8,0
800087cc:	f0 09 18 00 	cp.b	r9,r8
800087d0:	c0 50       	breq	800087da <flashc_memcpy+0x13a>
800087d2:	30 0c       	mov	r12,0
800087d4:	f0 1f 00 1b 	mcall	80008840 <flashc_memcpy+0x1a0>
800087d8:	c0 58       	rjmp	800087e2 <flashc_memcpy+0x142>
800087da:	30 0b       	mov	r11,0
800087dc:	3f fc       	mov	r12,-1
800087de:	f0 1f 00 1a 	mcall	80008844 <flashc_memcpy+0x1a4>
			error_status |= flashc_error_status;
800087e2:	49 78       	lddpc	r8,8000883c <flashc_memcpy+0x19c>
800087e4:	70 08       	ld.w	r8,r8[0x0]
800087e6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800087ea:	f3 e8 10 08 	or	r8,r9,r8
800087ee:	ef 48 ff f0 	st.w	r7[-16],r8
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
800087f2:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800087f6:	30 08       	mov	r8,0
800087f8:	f0 09 18 00 	cp.b	r9,r8
800087fc:	c0 40       	breq	80008804 <flashc_memcpy+0x164>
800087fe:	f0 1f 00 13 	mcall	80008848 <flashc_memcpy+0x1a8>
80008802:	c0 48       	rjmp	8000880a <flashc_memcpy+0x16a>
80008804:	3f fc       	mov	r12,-1
80008806:	f0 1f 00 12 	mcall	8000884c <flashc_memcpy+0x1ac>
		error_status |= flashc_error_status;
8000880a:	48 d8       	lddpc	r8,8000883c <flashc_memcpy+0x19c>
8000880c:	70 08       	ld.w	r8,r8[0x0]
8000880e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008812:	f3 e8 10 08 	or	r8,r9,r8
80008816:	ef 48 ff f0 	st.w	r7[-16],r8

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
8000881a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000881e:	58 08       	cp.w	r8,0
80008820:	fe 91 ff 6d 	brne	800086fa <flashc_memcpy+0x5a>
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
80008824:	48 68       	lddpc	r8,8000883c <flashc_memcpy+0x19c>
80008826:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000882a:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
8000882c:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
80008830:	10 9c       	mov	r12,r8
80008832:	2f 5d       	sub	sp,-44
80008834:	e3 cd 80 80 	ldm	sp++,r7,pc
80008838:	80 00       	ld.sh	r0,r0[0x0]
8000883a:	85 40       	st.w	r2[0x10],r0
8000883c:	00 00       	add	r0,r0
8000883e:	06 58       	eor	r8,r3
80008840:	80 00       	ld.sh	r0,r0[0x0]
80008842:	86 4c       	ld.sh	r12,r3[0x8]
80008844:	80 00       	ld.sh	r0,r0[0x0]
80008846:	85 a0       	st.w	r2[0x28],r0
80008848:	80 00       	ld.sh	r0,r0[0x0]
8000884a:	86 88       	ld.uh	r8,r3[0x0]
8000884c:	80 00       	ld.sh	r0,r0[0x0]
8000884e:	86 08       	ld.sh	r8,r3[0x0]

80008850 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80008850:	eb cd 40 80 	pushm	r7,lr
80008854:	1a 97       	mov	r7,sp
80008856:	20 4d       	sub	sp,16
80008858:	ef 4c ff f4 	st.w	r7[-12],r12
8000885c:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
80008860:	30 08       	mov	r8,0
80008862:	ef 48 ff f8 	st.w	r7[-8],r8
  uint32_t i;

  for (i = 0; i < size; i++)
80008866:	30 08       	mov	r8,0
80008868:	ef 48 ff fc 	st.w	r7[-4],r8
8000886c:	c1 d8       	rjmp	800088a6 <gpio_enable_module+0x56>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000886e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008872:	11 98       	ld.ub	r8,r8[0x1]
80008874:	10 99       	mov	r9,r8
80008876:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000887a:	11 88       	ld.ub	r8,r8[0x0]
8000887c:	12 9b       	mov	r11,r9
8000887e:	10 9c       	mov	r12,r8
80008880:	f0 1f 00 10 	mcall	800088c0 <gpio_enable_module+0x70>
80008884:	18 98       	mov	r8,r12
80008886:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000888a:	f3 e8 10 08 	or	r8,r9,r8
8000888e:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
80008892:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008896:	2f e8       	sub	r8,-2
80008898:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000889c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800088a0:	2f f8       	sub	r8,-1
800088a2:	ef 48 ff fc 	st.w	r7[-4],r8
800088a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800088aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800088ae:	10 39       	cp.w	r9,r8
800088b0:	cd f3       	brcs	8000886e <gpio_enable_module+0x1e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
800088b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800088b6:	10 9c       	mov	r12,r8
800088b8:	2f cd       	sub	sp,-16
800088ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800088be:	00 00       	add	r0,r0
800088c0:	80 00       	ld.sh	r0,r0[0x0]
800088c2:	88 c4       	ld.uh	r4,r4[0x8]

800088c4 <gpio_enable_module_pin>:


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800088c4:	eb cd 40 80 	pushm	r7,lr
800088c8:	1a 97       	mov	r7,sp
800088ca:	20 3d       	sub	sp,12
800088cc:	ef 4c ff f8 	st.w	r7[-8],r12
800088d0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800088d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800088d8:	a5 98       	lsr	r8,0x5
800088da:	a9 68       	lsl	r8,0x8
800088dc:	e0 28 f0 00 	sub	r8,61440
800088e0:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
800088e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800088e8:	58 18       	cp.w	r8,1
800088ea:	c1 e0       	breq	80008926 <gpio_enable_module_pin+0x62>
800088ec:	c0 63       	brcs	800088f8 <gpio_enable_module_pin+0x34>
800088ee:	58 28       	cp.w	r8,2
800088f0:	c3 20       	breq	80008954 <gpio_enable_module_pin+0x90>
800088f2:	58 38       	cp.w	r8,3
800088f4:	c4 70       	breq	80008982 <gpio_enable_module_pin+0xbe>
800088f6:	c5 d8       	rjmp	800089b0 <gpio_enable_module_pin+0xec>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800088f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800088fc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008900:	30 19       	mov	r9,1
80008902:	f2 08 09 48 	lsl	r8,r9,r8
80008906:	10 99       	mov	r9,r8
80008908:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000890c:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000890e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008912:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008916:	30 19       	mov	r9,1
80008918:	f2 08 09 48 	lsl	r8,r9,r8
8000891c:	10 99       	mov	r9,r8
8000891e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008922:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008924:	c4 88       	rjmp	800089b4 <gpio_enable_module_pin+0xf0>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80008926:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000892a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000892e:	30 19       	mov	r9,1
80008930:	f2 08 09 48 	lsl	r8,r9,r8
80008934:	10 99       	mov	r9,r8
80008936:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000893a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000893c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008940:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008944:	30 19       	mov	r9,1
80008946:	f2 08 09 48 	lsl	r8,r9,r8
8000894a:	10 99       	mov	r9,r8
8000894c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008950:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008952:	c3 18       	rjmp	800089b4 <gpio_enable_module_pin+0xf0>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80008954:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008958:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000895c:	30 19       	mov	r9,1
8000895e:	f2 08 09 48 	lsl	r8,r9,r8
80008962:	10 99       	mov	r9,r8
80008964:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008968:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000896a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000896e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008972:	30 19       	mov	r9,1
80008974:	f2 08 09 48 	lsl	r8,r9,r8
80008978:	10 99       	mov	r9,r8
8000897a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000897e:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008980:	c1 a8       	rjmp	800089b4 <gpio_enable_module_pin+0xf0>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80008982:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008986:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000898a:	30 19       	mov	r9,1
8000898c:	f2 08 09 48 	lsl	r8,r9,r8
80008990:	10 99       	mov	r9,r8
80008992:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008996:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80008998:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000899c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800089a0:	30 19       	mov	r9,1
800089a2:	f2 08 09 48 	lsl	r8,r9,r8
800089a6:	10 99       	mov	r9,r8
800089a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800089ac:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
800089ae:	c0 38       	rjmp	800089b4 <gpio_enable_module_pin+0xf0>
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
800089b0:	30 18       	mov	r8,1
800089b2:	c0 d8       	rjmp	800089cc <gpio_enable_module_pin+0x108>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800089b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089b8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800089bc:	30 19       	mov	r9,1
800089be:	f2 08 09 48 	lsl	r8,r9,r8
800089c2:	10 99       	mov	r9,r8
800089c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800089c8:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
800089ca:	30 08       	mov	r8,0
}
800089cc:	10 9c       	mov	r12,r8
800089ce:	2f dd       	sub	sp,-12
800089d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800089d4 <gpio_enable_gpio_pin>:
  }
}


void gpio_enable_gpio_pin(uint32_t pin)
{
800089d4:	eb cd 40 80 	pushm	r7,lr
800089d8:	1a 97       	mov	r7,sp
800089da:	20 2d       	sub	sp,8
800089dc:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800089e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089e4:	a5 98       	lsr	r8,0x5
800089e6:	a9 68       	lsl	r8,0x8
800089e8:	e0 28 f0 00 	sub	r8,61440
800089ec:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
800089f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089f4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800089f8:	30 19       	mov	r9,1
800089fa:	f2 08 09 48 	lsl	r8,r9,r8
800089fe:	10 99       	mov	r9,r8
80008a00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a04:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
80008a08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a0c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a10:	30 19       	mov	r9,1
80008a12:	f2 08 09 48 	lsl	r8,r9,r8
80008a16:	10 99       	mov	r9,r8
80008a18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a1c:	91 19       	st.w	r8[0x4],r9
}
80008a1e:	2f ed       	sub	sp,-8
80008a20:	e3 cd 80 80 	ldm	sp++,r7,pc

80008a24 <gpio_enable_pin_pull_up>:

#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
80008a24:	eb cd 40 80 	pushm	r7,lr
80008a28:	1a 97       	mov	r7,sp
80008a2a:	20 2d       	sub	sp,8
80008a2c:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008a30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a34:	a5 98       	lsr	r8,0x5
80008a36:	a9 68       	lsl	r8,0x8
80008a38:	e0 28 f0 00 	sub	r8,61440
80008a3c:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80008a40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a44:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a48:	30 19       	mov	r9,1
80008a4a:	f2 08 09 48 	lsl	r8,r9,r8
80008a4e:	10 99       	mov	r9,r8
80008a50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a54:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80008a58:	2f ed       	sub	sp,-8
80008a5a:	e3 cd 80 80 	ldm	sp++,r7,pc

80008a5e <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80008a5e:	eb cd 40 80 	pushm	r7,lr
80008a62:	1a 97       	mov	r7,sp
80008a64:	20 3d       	sub	sp,12
80008a66:	ef 4c ff f8 	st.w	r7[-8],r12
80008a6a:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008a6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a72:	a5 98       	lsr	r8,0x5
80008a74:	a9 68       	lsl	r8,0x8
80008a76:	e0 28 f0 00 	sub	r8,61440
80008a7a:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
80008a7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008a82:	e2 18 00 04 	andl	r8,0x4,COH
80008a86:	c0 e0       	breq	80008aa2 <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
80008a88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a8c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a90:	30 19       	mov	r9,1
80008a92:	f2 08 09 48 	lsl	r8,r9,r8
80008a96:	10 99       	mov	r9,r8
80008a98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a9c:	f1 49 00 74 	st.w	r8[116],r9
80008aa0:	c0 d8       	rjmp	80008aba <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80008aa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008aa6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008aaa:	30 19       	mov	r9,1
80008aac:	f2 08 09 48 	lsl	r8,r9,r8
80008ab0:	10 99       	mov	r9,r8
80008ab2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ab6:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80008aba:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008abe:	e2 18 00 80 	andl	r8,0x80,COH
80008ac2:	c5 a0       	breq	80008b76 <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
80008ac4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008ac8:	e2 18 01 80 	andl	r8,0x180,COH
80008acc:	c1 a0       	breq	80008b00 <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80008ace:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ad2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ad6:	30 19       	mov	r9,1
80008ad8:	f2 08 09 48 	lsl	r8,r9,r8
80008adc:	10 99       	mov	r9,r8
80008ade:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ae2:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80008ae6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008aea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008aee:	30 19       	mov	r9,1
80008af0:	f2 08 09 48 	lsl	r8,r9,r8
80008af4:	10 99       	mov	r9,r8
80008af6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008afa:	f1 49 00 b8 	st.w	r8[184],r9
80008afe:	c3 c8       	rjmp	80008b76 <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
80008b00:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008b04:	e2 18 02 80 	andl	r8,0x280,COH
80008b08:	c1 a0       	breq	80008b3c <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80008b0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b0e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b12:	30 19       	mov	r9,1
80008b14:	f2 08 09 48 	lsl	r8,r9,r8
80008b18:	10 99       	mov	r9,r8
80008b1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b1e:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80008b22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b26:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b2a:	30 19       	mov	r9,1
80008b2c:	f2 08 09 48 	lsl	r8,r9,r8
80008b30:	10 99       	mov	r9,r8
80008b32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b36:	f1 49 00 b8 	st.w	r8[184],r9
80008b3a:	c1 e8       	rjmp	80008b76 <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
80008b3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008b40:	e2 18 03 80 	andl	r8,0x380,COH
80008b44:	c1 90       	breq	80008b76 <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80008b46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b4e:	30 19       	mov	r9,1
80008b50:	f2 08 09 48 	lsl	r8,r9,r8
80008b54:	10 99       	mov	r9,r8
80008b56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b5a:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80008b5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b62:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b66:	30 19       	mov	r9,1
80008b68:	f2 08 09 48 	lsl	r8,r9,r8
80008b6c:	10 99       	mov	r9,r8
80008b6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b72:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80008b76:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008b7a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008b7e:	5c 58       	castu.b	r8
80008b80:	c2 c0       	breq	80008bd8 <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
80008b82:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008b86:	e2 18 00 02 	andl	r8,0x2,COH
80008b8a:	c0 e0       	breq	80008ba6 <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80008b8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b90:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b94:	30 19       	mov	r9,1
80008b96:	f2 08 09 48 	lsl	r8,r9,r8
80008b9a:	10 99       	mov	r9,r8
80008b9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ba0:	f1 49 00 54 	st.w	r8[84],r9
80008ba4:	c0 d8       	rjmp	80008bbe <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80008ba6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008baa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008bae:	30 19       	mov	r9,1
80008bb0:	f2 08 09 48 	lsl	r8,r9,r8
80008bb4:	10 99       	mov	r9,r8
80008bb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bba:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80008bbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bc2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008bc6:	30 19       	mov	r9,1
80008bc8:	f2 08 09 48 	lsl	r8,r9,r8
80008bcc:	10 99       	mov	r9,r8
80008bce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bd2:	f1 49 00 44 	st.w	r8[68],r9
80008bd6:	c0 d8       	rjmp	80008bf0 <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80008bd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bdc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008be0:	30 19       	mov	r9,1
80008be2:	f2 08 09 48 	lsl	r8,r9,r8
80008be6:	10 99       	mov	r9,r8
80008be8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bec:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80008bf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bf4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008bf8:	30 19       	mov	r9,1
80008bfa:	f2 08 09 48 	lsl	r8,r9,r8
80008bfe:	10 99       	mov	r9,r8
80008c00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c04:	91 19       	st.w	r8[0x4],r9
}
80008c06:	2f dd       	sub	sp,-12
80008c08:	e3 cd 80 80 	ldm	sp++,r7,pc

80008c0c <gpio_get_pin_value>:
    /* Enable GPIO */
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
80008c0c:	eb cd 40 80 	pushm	r7,lr
80008c10:	1a 97       	mov	r7,sp
80008c12:	20 2d       	sub	sp,8
80008c14:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008c18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c1c:	a5 98       	lsr	r8,0x5
80008c1e:	a9 68       	lsl	r8,0x8
80008c20:	e0 28 f0 00 	sub	r8,61440
80008c24:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80008c28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c2c:	71 89       	ld.w	r9,r8[0x60]
80008c2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c32:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c36:	f2 08 0a 48 	lsr	r8,r9,r8
80008c3a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80008c3e:	10 9c       	mov	r12,r8
80008c40:	2f ed       	sub	sp,-8
80008c42:	e3 cd 80 80 	ldm	sp++,r7,pc

80008c46 <gpio_set_gpio_pin>:
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
}


void gpio_set_gpio_pin(uint32_t pin)
{
80008c46:	eb cd 40 80 	pushm	r7,lr
80008c4a:	1a 97       	mov	r7,sp
80008c4c:	20 2d       	sub	sp,8
80008c4e:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008c52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c56:	a5 98       	lsr	r8,0x5
80008c58:	a9 68       	lsl	r8,0x8
80008c5a:	e0 28 f0 00 	sub	r8,61440
80008c5e:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80008c62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c66:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c6a:	30 19       	mov	r9,1
80008c6c:	f2 08 09 48 	lsl	r8,r9,r8
80008c70:	10 99       	mov	r9,r8
80008c72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c76:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80008c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c7e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c82:	30 19       	mov	r9,1
80008c84:	f2 08 09 48 	lsl	r8,r9,r8
80008c88:	10 99       	mov	r9,r8
80008c8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c8e:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80008c92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c9a:	30 19       	mov	r9,1
80008c9c:	f2 08 09 48 	lsl	r8,r9,r8
80008ca0:	10 99       	mov	r9,r8
80008ca2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ca6:	91 19       	st.w	r8[0x4],r9
}
80008ca8:	2f ed       	sub	sp,-8
80008caa:	e3 cd 80 80 	ldm	sp++,r7,pc

80008cae <gpio_clr_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
80008cae:	eb cd 40 80 	pushm	r7,lr
80008cb2:	1a 97       	mov	r7,sp
80008cb4:	20 2d       	sub	sp,8
80008cb6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008cba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008cbe:	a5 98       	lsr	r8,0x5
80008cc0:	a9 68       	lsl	r8,0x8
80008cc2:	e0 28 f0 00 	sub	r8,61440
80008cc6:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80008cca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008cce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008cd2:	30 19       	mov	r9,1
80008cd4:	f2 08 09 48 	lsl	r8,r9,r8
80008cd8:	10 99       	mov	r9,r8
80008cda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cde:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80008ce2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ce6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008cea:	30 19       	mov	r9,1
80008cec:	f2 08 09 48 	lsl	r8,r9,r8
80008cf0:	10 99       	mov	r9,r8
80008cf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cf6:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80008cfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008cfe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d02:	30 19       	mov	r9,1
80008d04:	f2 08 09 48 	lsl	r8,r9,r8
80008d08:	10 99       	mov	r9,r8
80008d0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d0e:	91 19       	st.w	r8[0x4],r9
}
80008d10:	2f ed       	sub	sp,-8
80008d12:	e3 cd 80 80 	ldm	sp++,r7,pc

80008d16 <gpio_tgl_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
80008d16:	eb cd 40 80 	pushm	r7,lr
80008d1a:	1a 97       	mov	r7,sp
80008d1c:	20 2d       	sub	sp,8
80008d1e:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008d22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d26:	a5 98       	lsr	r8,0x5
80008d28:	a9 68       	lsl	r8,0x8
80008d2a:	e0 28 f0 00 	sub	r8,61440
80008d2e:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
80008d32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d36:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d3a:	30 19       	mov	r9,1
80008d3c:	f2 08 09 48 	lsl	r8,r9,r8
80008d40:	10 99       	mov	r9,r8
80008d42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d46:	f1 49 00 5c 	st.w	r8[92],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80008d4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d4e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d52:	30 19       	mov	r9,1
80008d54:	f2 08 09 48 	lsl	r8,r9,r8
80008d58:	10 99       	mov	r9,r8
80008d5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d5e:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80008d62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d66:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d6a:	30 19       	mov	r9,1
80008d6c:	f2 08 09 48 	lsl	r8,r9,r8
80008d70:	10 99       	mov	r9,r8
80008d72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d76:	91 19       	st.w	r8[0x4],r9
}
80008d78:	2f ed       	sub	sp,-8
80008d7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80008d7e <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80008d7e:	eb cd 40 80 	pushm	r7,lr
80008d82:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80008d84:	c0 08       	rjmp	80008d84 <_unhandled_interrupt+0x6>
80008d86:	d7 03       	nop

80008d88 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80008d88:	eb cd 40 80 	pushm	r7,lr
80008d8c:	1a 97       	mov	r7,sp
80008d8e:	20 3d       	sub	sp,12
80008d90:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80008d94:	fe 78 08 00 	mov	r8,-63488
80008d98:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008d9c:	f2 09 11 03 	rsub	r9,r9,3
80008da0:	28 09       	sub	r9,-128
80008da2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008da6:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80008daa:	fe 78 08 00 	mov	r8,-63488
80008dae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008db2:	2c 09       	sub	r9,-64
80008db4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008db8:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80008dbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dc0:	58 08       	cp.w	r8,0
80008dc2:	c1 30       	breq	80008de8 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80008dc4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008dc8:	48 b8       	lddpc	r8,80008df4 <_get_interrupt_handler+0x6c>
80008dca:	a1 79       	lsl	r9,0x1
80008dcc:	2f f9       	sub	r9,-1
80008dce:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008dd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dd6:	f0 08 12 00 	clz	r8,r8
80008dda:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80008dde:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80008de0:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80008de4:	70 08       	ld.w	r8,r8[0x0]
80008de6:	c0 28       	rjmp	80008dea <_get_interrupt_handler+0x62>
80008de8:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80008dea:	10 9c       	mov	r12,r8
80008dec:	2f dd       	sub	sp,-12
80008dee:	e3 cd 80 80 	ldm	sp++,r7,pc
80008df2:	00 00       	add	r0,r0
80008df4:	80 00       	ld.sh	r0,r0[0x0]
80008df6:	eb f4 eb cd 	st.wqs	r5[0x734],r4

80008df8 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80008df8:	eb cd 40 80 	pushm	r7,lr
80008dfc:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80008dfe:	48 38       	lddpc	r8,80008e08 <INTC_init_evba+0x10>
80008e00:	e3 b8 00 01 	mtsr	0x4,r8
}
80008e04:	e3 cd 80 80 	ldm	sp++,r7,pc
80008e08:	80 00       	ld.sh	r0,r0[0x0]
80008e0a:	e8 00       	*unknown*

80008e0c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80008e0c:	eb cd 40 80 	pushm	r7,lr
80008e10:	1a 97       	mov	r7,sp
80008e12:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80008e14:	f0 1f 00 1f 	mcall	80008e90 <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80008e18:	30 08       	mov	r8,0
80008e1a:	ef 48 ff f8 	st.w	r7[-8],r8
80008e1e:	c3 18       	rjmp	80008e80 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80008e20:	30 08       	mov	r8,0
80008e22:	ef 48 ff fc 	st.w	r7[-4],r8
80008e26:	c1 48       	rjmp	80008e4e <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80008e28:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008e2c:	49 a8       	lddpc	r8,80008e94 <INTC_init_interrupts+0x88>
80008e2e:	a1 79       	lsl	r9,0x1
80008e30:	2f f9       	sub	r9,-1
80008e32:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008e36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e3a:	a3 68       	lsl	r8,0x2
80008e3c:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80008e40:	49 69       	lddpc	r9,80008e98 <INTC_init_interrupts+0x8c>
80008e42:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80008e44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e48:	2f f8       	sub	r8,-1
80008e4a:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80008e4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008e52:	49 18       	lddpc	r8,80008e94 <INTC_init_interrupts+0x88>
80008e54:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80008e58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e5c:	10 39       	cp.w	r9,r8
80008e5e:	fe 9b ff e5 	brhi	80008e28 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80008e62:	fe 78 08 00 	mov	r8,-63488
80008e66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008e6a:	48 db       	lddpc	r11,80008e9c <INTC_init_interrupts+0x90>
80008e6c:	48 da       	lddpc	r10,80008ea0 <INTC_init_interrupts+0x94>
80008e6e:	f6 0a 01 0a 	sub	r10,r11,r10
80008e72:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80008e76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e7a:	2f f8       	sub	r8,-1
80008e7c:	ef 48 ff f8 	st.w	r7[-8],r8
80008e80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e84:	59 d8       	cp.w	r8,29
80008e86:	fe 98 ff cd 	brls	80008e20 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80008e8a:	2f ed       	sub	sp,-8
80008e8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008e90:	80 00       	ld.sh	r0,r0[0x0]
80008e92:	8d f8       	st.w	r6[0x3c],r8
80008e94:	80 00       	ld.sh	r0,r0[0x0]
80008e96:	eb f4 80 00 	ld.wls	r4,r5[0x0]
80008e9a:	8d 7e       	st.w	r6[0x1c],lr
80008e9c:	80 00       	ld.sh	r0,r0[0x0]
80008e9e:	e9 04 80 00 	ld.sh	r4,r4[-32768]
80008ea2:	e8 00       	*unknown*

80008ea4 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80008ea4:	eb cd 40 80 	pushm	r7,lr
80008ea8:	1a 97       	mov	r7,sp
80008eaa:	20 4d       	sub	sp,16
80008eac:	ef 4c ff f8 	st.w	r7[-8],r12
80008eb0:	ef 4b ff f4 	st.w	r7[-12],r11
80008eb4:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80008eb8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008ebc:	a5 98       	lsr	r8,0x5
80008ebe:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80008ec2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008ec6:	4a 78       	lddpc	r8,80008f60 <INTC_register_interrupt+0xbc>
80008ec8:	a1 79       	lsl	r9,0x1
80008eca:	2f f9       	sub	r9,-1
80008ecc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008ed0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008ed4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ed8:	a3 68       	lsl	r8,0x2
80008eda:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80008ede:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008ee2:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80008ee4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008ee8:	58 08       	cp.w	r8,0
80008eea:	c0 c1       	brne	80008f02 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80008eec:	fe 78 08 00 	mov	r8,-63488
80008ef0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008ef4:	49 cb       	lddpc	r11,80008f64 <INTC_register_interrupt+0xc0>
80008ef6:	49 da       	lddpc	r10,80008f68 <INTC_register_interrupt+0xc4>
80008ef8:	f6 0a 01 0a 	sub	r10,r11,r10
80008efc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80008f00:	c2 d8       	rjmp	80008f5a <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80008f02:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008f06:	58 18       	cp.w	r8,1
80008f08:	c0 d1       	brne	80008f22 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80008f0a:	fe 78 08 00 	mov	r8,-63488
80008f0e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008f12:	49 7b       	lddpc	r11,80008f6c <INTC_register_interrupt+0xc8>
80008f14:	49 5a       	lddpc	r10,80008f68 <INTC_register_interrupt+0xc4>
80008f16:	f6 0a 01 0a 	sub	r10,r11,r10
80008f1a:	bf aa       	sbr	r10,0x1e
80008f1c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80008f20:	c1 d8       	rjmp	80008f5a <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80008f22:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008f26:	58 28       	cp.w	r8,2
80008f28:	c0 d1       	brne	80008f42 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80008f2a:	fe 78 08 00 	mov	r8,-63488
80008f2e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008f32:	49 0b       	lddpc	r11,80008f70 <INTC_register_interrupt+0xcc>
80008f34:	48 da       	lddpc	r10,80008f68 <INTC_register_interrupt+0xc4>
80008f36:	f6 0a 01 0a 	sub	r10,r11,r10
80008f3a:	bf ba       	sbr	r10,0x1f
80008f3c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80008f40:	c0 d8       	rjmp	80008f5a <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80008f42:	fe 78 08 00 	mov	r8,-63488
80008f46:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008f4a:	48 bb       	lddpc	r11,80008f74 <INTC_register_interrupt+0xd0>
80008f4c:	48 7a       	lddpc	r10,80008f68 <INTC_register_interrupt+0xc4>
80008f4e:	f6 0a 01 0a 	sub	r10,r11,r10
80008f52:	ea 1a c0 00 	orh	r10,0xc000
80008f56:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80008f5a:	2f cd       	sub	sp,-16
80008f5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008f60:	80 00       	ld.sh	r0,r0[0x0]
80008f62:	eb f4 80 00 	ld.wls	r4,r5[0x0]
80008f66:	e9 04 80 00 	ld.sh	r4,r4[-32768]
80008f6a:	e8 00       	*unknown*
80008f6c:	80 00       	ld.sh	r0,r0[0x0]
80008f6e:	e9 12 80 00 	ld.uh	r2,r4[-32768]
80008f72:	e9 20 80 00 	ld.sb	r0,r4[-32768]
80008f76:	e9 2e eb cd 	ld.sb	lr,r4[-5171]

80008f78 <mci_reset>:


int shadow_sr=0;

void mci_reset(volatile avr32_mci_t *mci)
{
80008f78:	eb cd 40 80 	pushm	r7,lr
80008f7c:	1a 97       	mov	r7,sp
80008f7e:	20 1d       	sub	sp,4
80008f80:	ef 4c ff fc 	st.w	r7[-4],r12
  mci->cr = (1<<AVR32_MCI_CR_SWRST);
80008f84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f88:	e0 69 00 80 	mov	r9,128
80008f8c:	91 09       	st.w	r8[0x0],r9
}
80008f8e:	2f fd       	sub	sp,-4
80008f90:	e3 cd 80 80 	ldm	sp++,r7,pc

80008f94 <mci_disable>:

void mci_disable(volatile avr32_mci_t *mci)
{
80008f94:	eb cd 40 80 	pushm	r7,lr
80008f98:	1a 97       	mov	r7,sp
80008f9a:	20 1d       	sub	sp,4
80008f9c:	ef 4c ff fc 	st.w	r7[-4],r12
  // Disable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIDIS) | (1<<AVR32_MCI_CR_PWSDIS);
80008fa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fa4:	30 a9       	mov	r9,10
80008fa6:	91 09       	st.w	r8[0x0],r9
}
80008fa8:	2f fd       	sub	sp,-4
80008faa:	e3 cd 80 80 	ldm	sp++,r7,pc

80008fae <mci_enable>:

void mci_enable(volatile avr32_mci_t *mci)
{
80008fae:	eb cd 40 80 	pushm	r7,lr
80008fb2:	1a 97       	mov	r7,sp
80008fb4:	20 1d       	sub	sp,4
80008fb6:	ef 4c ff fc 	st.w	r7[-4],r12
  // Enable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIEN) | (1<<AVR32_MCI_CR_PWSEN);
80008fba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fbe:	30 59       	mov	r9,5
80008fc0:	91 09       	st.w	r8[0x0],r9
}
80008fc2:	2f fd       	sub	sp,-4
80008fc4:	e3 cd 80 80 	ldm	sp++,r7,pc

80008fc8 <mci_set_speed>:
}

void mci_set_speed(volatile avr32_mci_t *mci,
                   uint32_t pbb_hz,
                   uint32_t card_speed)
{
80008fc8:	eb cd 40 80 	pushm	r7,lr
80008fcc:	1a 97       	mov	r7,sp
80008fce:	20 7d       	sub	sp,28
80008fd0:	ef 4c ff ec 	st.w	r7[-20],r12
80008fd4:	ef 4b ff e8 	st.w	r7[-24],r11
80008fd8:	ef 4a ff e4 	st.w	r7[-28],r10
    avr32_mci_cfg_t   CFG;
  };
  union u_cfg val;

  // Get the Mode Register
  mci_mode_register = mci->mr;
80008fdc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008fe0:	70 18       	ld.w	r8,r8[0x4]
80008fe2:	ef 48 ff f4 	st.w	r7[-12],r8

  if (card_speed > AVR32_MCI_HSDIS_MAX_FREQ)
80008fe6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008fea:	e0 69 78 40 	mov	r9,30784
80008fee:	ea 19 01 7d 	orh	r9,0x17d
80008ff2:	12 38       	cp.w	r8,r9
80008ff4:	e0 88 00 14 	brls	8000901c <mci_set_speed+0x54>
  { // Use of the High Speed mode of the MCI macro.
    val.cfg = mci->cfg;
80008ff8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008ffc:	71 58       	ld.w	r8,r8[0x54]
80008ffe:	ef 48 ff f0 	st.w	r7[-16],r8
    val.CFG.hsmode = 1;
80009002:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009006:	30 19       	mov	r9,1
80009008:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
8000900c:	ef 48 ff f0 	st.w	r7[-16],r8
    mci->cfg = val.cfg;
80009010:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009014:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009018:	f1 49 00 54 	st.w	r8[84],r9
  }

  // Multimedia Card Interface clock (MCCK or MCI_CK) is Master Clock (MCK)
  // divided by (2*(CLKDIV+1))
  if (card_speed > 0)
8000901c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009020:	58 08       	cp.w	r8,0
80009022:	c2 90       	breq	80009074 <mci_set_speed+0xac>
  {
    clkdiv = pbb_hz / (card_speed * 2);
80009024:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009028:	f0 09 15 01 	lsl	r9,r8,0x1
8000902c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009030:	f0 09 0d 08 	divu	r8,r8,r9
80009034:	ef 48 ff f8 	st.w	r7[-8],r8
    rest   = pbb_hz % (card_speed * 2);
80009038:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000903c:	f0 09 15 01 	lsl	r9,r8,0x1
80009040:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009044:	f0 09 0d 08 	divu	r8,r8,r9
80009048:	12 98       	mov	r8,r9
8000904a:	ef 48 ff fc 	st.w	r7[-4],r8
    if (rest)
8000904e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009052:	58 08       	cp.w	r8,0
80009054:	c0 60       	breq	80009060 <mci_set_speed+0x98>
    { // Ensure that the card_speed can not be higher than expected.
      clkdiv += 1;
80009056:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000905a:	2f f8       	sub	r8,-1
8000905c:	ef 48 ff f8 	st.w	r7[-8],r8
    }

    if (clkdiv > 0)
80009060:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009064:	58 08       	cp.w	r8,0
80009066:	c0 b0       	breq	8000907c <mci_set_speed+0xb4>
    {
      clkdiv -= 1;
80009068:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000906c:	20 18       	sub	r8,1
8000906e:	ef 48 ff f8 	st.w	r7[-8],r8
80009072:	c0 68       	rjmp	8000907e <mci_set_speed+0xb6>
    }
  }
  else
  {
    clkdiv = 0;
80009074:	30 08       	mov	r8,0
80009076:	ef 48 ff f8 	st.w	r7[-8],r8
8000907a:	c0 28       	rjmp	8000907e <mci_set_speed+0xb6>
      clkdiv += 1;
    }

    if (clkdiv > 0)
    {
      clkdiv -= 1;
8000907c:	d7 03       	nop
  {
    clkdiv = 0;
  }

  // Write new configuration
  mci_mode_register &= ~AVR32_MCI_MR_CLKDIV_MASK; // Clear previous value
8000907e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009082:	e0 18 ff 00 	andl	r8,0xff00
80009086:	ef 48 ff f4 	st.w	r7[-12],r8
  mci_mode_register |= clkdiv; // Set the new one
8000908a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000908e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009092:	f3 e8 10 08 	or	r8,r9,r8
80009096:	ef 48 ff f4 	st.w	r7[-12],r8
  mci->mr = mci_mode_register;
8000909a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000909e:	ee f9 ff f4 	ld.w	r9,r7[-12]
800090a2:	91 19       	st.w	r8[0x4],r9
}
800090a4:	2f 9d       	sub	sp,-28
800090a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800090aa:	d7 03       	nop

800090ac <mci_init>:

int mci_init(volatile avr32_mci_t *mci,
              uint8_t card_slot,
              uint32_t pbb_hz)
{
800090ac:	eb cd 40 80 	pushm	r7,lr
800090b0:	1a 97       	mov	r7,sp
800090b2:	20 3d       	sub	sp,12
800090b4:	ef 4c ff fc 	st.w	r7[-4],r12
800090b8:	16 98       	mov	r8,r11
800090ba:	ef 4a ff f4 	st.w	r7[-12],r10
800090be:	ef 68 ff f8 	st.b	r7[-8],r8
  if (card_slot>MCI_LAST_SLOTS)
800090c2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800090c6:	30 18       	mov	r8,1
800090c8:	f0 09 18 00 	cp.b	r9,r8
800090cc:	e0 88 00 04 	brls	800090d4 <mci_init+0x28>
    return MCI_INVALID_INPUT;
800090d0:	30 18       	mov	r8,1
800090d2:	c3 98       	rjmp	80009144 <mci_init+0x98>

  // Initialize all bits of the shadow status register.
  shadow_sr=0;
800090d4:	49 e8       	lddpc	r8,8000914c <mci_init+0xa0>
800090d6:	30 09       	mov	r9,0
800090d8:	91 09       	st.w	r8[0x0],r9

  // Reset the MCI
  mci_reset(mci);
800090da:	ee fc ff fc 	ld.w	r12,r7[-4]
800090de:	f0 1f 00 1d 	mcall	80009150 <mci_init+0xa4>

  // Disable the MCI
  mci_disable(mci);
800090e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800090e6:	f0 1f 00 1c 	mcall	80009154 <mci_init+0xa8>

  // Disable all the interrupts
  mci->idr = 0xffffffff;
800090ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090ee:	3f f9       	mov	r9,-1
800090f0:	f1 49 00 48 	st.w	r8[72],r9

  // Setup configuration register
  mci->cfg = 0;
800090f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090f8:	30 09       	mov	r9,0
800090fa:	f1 49 00 54 	st.w	r8[84],r9

  // Clear Mode register
  mci->mr = 0;
800090fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009102:	30 09       	mov	r9,0
80009104:	91 19       	st.w	r8[0x4],r9

  // Set the Data Timeout Register to 1 Mega Cycles
  mci->dtor = (MCI_DEFAULT_DTOREG);
80009106:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000910a:	37 29       	mov	r9,114
8000910c:	91 29       	st.w	r8[0x8],r9

  // Set the Mode Register
  mci_set_speed(mci, pbb_hz, MCI_DEFAULT_SPEED_HZ);
8000910e:	e2 7a 0d 40 	mov	r10,200000
80009112:	ee fb ff f4 	ld.w	r11,r7[-12]
80009116:	ee fc ff fc 	ld.w	r12,r7[-4]
8000911a:	f0 1f 00 10 	mcall	80009158 <mci_init+0xac>
  mci->mr |= ((MCI_DEFAULT_PWSDIV<<AVR32_MCI_MR_PWSDIV) | AVR32_MCI_MR_RDPROOF_MASK | AVR32_MCI_MR_WRPROOF_MASK);
8000911e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009122:	70 18       	ld.w	r8,r8[0x4]
80009124:	10 99       	mov	r9,r8
80009126:	e8 19 1f 00 	orl	r9,0x1f00
8000912a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000912e:	91 19       	st.w	r8[0x4],r9

  // Set the SD/MMC Card Register
  mci->sdcr = (MCI_BUS_SIZE_1_BIT>>AVR32_MCI_SDCR_SDCBUS_OFFSET)|(card_slot>>AVR32_MCI_SDCR_SDCSEL_OFFSET);
80009130:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009134:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009138:	91 39       	st.w	r8[0xc],r9

  // Enable the MCI and the Power Saving
  mci_enable(mci);
8000913a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000913e:	f0 1f 00 08 	mcall	8000915c <mci_init+0xb0>

  return MCI_SUCCESS;
80009142:	30 08       	mov	r8,0
}
80009144:	10 9c       	mov	r12,r8
80009146:	2f dd       	sub	sp,-12
80009148:	e3 cd 80 80 	ldm	sp++,r7,pc
8000914c:	00 00       	add	r0,r0
8000914e:	07 6c       	ld.uh	r12,--r3
80009150:	80 00       	ld.sh	r0,r0[0x0]
80009152:	8f 78       	st.w	r7[0x1c],r8
80009154:	80 00       	ld.sh	r0,r0[0x0]
80009156:	8f 94       	st.w	r7[0x24],r4
80009158:	80 00       	ld.sh	r0,r0[0x0]
8000915a:	8f c8       	st.w	r7[0x30],r8
8000915c:	80 00       	ld.sh	r0,r0[0x0]
8000915e:	8f ae       	st.w	r7[0x28],lr

80009160 <mci_set_block_size>:

void mci_set_block_size(volatile avr32_mci_t *mci,
                        uint16_t length)
{
80009160:	eb cd 40 80 	pushm	r7,lr
80009164:	1a 97       	mov	r7,sp
80009166:	20 3d       	sub	sp,12
80009168:	ef 4c ff f8 	st.w	r7[-8],r12
8000916c:	16 98       	mov	r8,r11
8000916e:	ef 58 ff f4 	st.h	r7[-12],r8
  uint32_t mci_mode_register;

  mci_mode_register = mci->mr;
80009172:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009176:	70 18       	ld.w	r8,r8[0x4]
80009178:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register &= ~AVR32_MCI_MR_BLKLEN_MASK; // Clear previous BLKLEN
8000917c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009180:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80009184:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register |= (length<<AVR32_MCI_MR_BLKLEN_OFFSET); // Set the new value
80009188:	ef 18 ff f4 	ld.uh	r8,r7[-12]
8000918c:	b1 68       	lsl	r8,0x10
8000918e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009192:	f3 e8 10 08 	or	r8,r9,r8
80009196:	ef 48 ff fc 	st.w	r7[-4],r8

  mci->mr = mci_mode_register;
8000919a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000919e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800091a2:	91 19       	st.w	r8[0x4],r9
}
800091a4:	2f dd       	sub	sp,-12
800091a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800091aa <mci_set_block_count>:

void mci_set_block_count(volatile avr32_mci_t *mci,
                         uint16_t cnt)
{
800091aa:	eb cd 40 80 	pushm	r7,lr
800091ae:	1a 97       	mov	r7,sp
800091b0:	20 3d       	sub	sp,12
800091b2:	ef 4c ff f8 	st.w	r7[-8],r12
800091b6:	16 98       	mov	r8,r11
800091b8:	ef 58 ff f4 	st.h	r7[-12],r8
    uint32_t          blkr;
    avr32_mci_blkr_t  BLKR;
  };
  union u_blkr val;

  val.blkr = mci->blkr;
800091bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091c0:	70 68       	ld.w	r8,r8[0x18]
800091c2:	ef 48 ff fc 	st.w	r7[-4],r8
  val.BLKR.bcnt = cnt;
800091c6:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800091ca:	ef 58 ff fe 	st.h	r7[-2],r8
  mci->blkr = val.blkr;
800091ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800091d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091d6:	91 69       	st.w	r8[0x18],r9
}
800091d8:	2f dd       	sub	sp,-12
800091da:	e3 cd 80 80 	ldm	sp++,r7,pc
800091de:	d7 03       	nop

800091e0 <mci_send_cmd>:

int mci_send_cmd(volatile avr32_mci_t *mci,
                 unsigned int cmd,
                 unsigned int arg)
{
800091e0:	eb cd 40 80 	pushm	r7,lr
800091e4:	1a 97       	mov	r7,sp
800091e6:	20 7d       	sub	sp,28
800091e8:	ef 4c ff ec 	st.w	r7[-20],r12
800091ec:	ef 4b ff e8 	st.w	r7[-24],r11
800091f0:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int	error;

  // Send the command
  mci->argr = arg;
800091f4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800091f8:	ee f9 ff e4 	ld.w	r9,r7[-28]
800091fc:	91 49       	st.w	r8[0x10],r9
  mci->cmdr = cmd;
800091fe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009202:	ee f9 ff e8 	ld.w	r9,r7[-24]
80009206:	91 59       	st.w	r8[0x14],r9
80009208:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000920c:	ef 48 ff f4 	st.w	r7[-12],r8
80009210:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009214:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80009218:	4a 78       	lddpc	r8,800092b4 <mci_send_cmd+0xd4>
8000921a:	70 08       	ld.w	r8,r8[0x0]
8000921c:	10 99       	mov	r9,r8
8000921e:	e6 19 01 e0 	andh	r9,0x1e0,COH
80009222:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009226:	71 08       	ld.w	r8,r8[0x40]
80009228:	f3 e8 10 08 	or	r8,r9,r8
8000922c:	10 99       	mov	r9,r8
8000922e:	4a 28       	lddpc	r8,800092b4 <mci_send_cmd+0xd4>
80009230:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80009232:	4a 18       	lddpc	r8,800092b4 <mci_send_cmd+0xd4>
80009234:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_cmd_ready(volatile avr32_mci_t *mci)
{
  return ((mci_get_sr(mci)&AVR32_MCI_SR_CMDRDY_MASK) != 0);
80009236:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // wait for CMDRDY Status flag to read the response
  while( !(mci_cmd_ready(mci)) );
8000923a:	ce 70       	breq	80009208 <mci_send_cmd+0x28>
8000923c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009240:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80009244:	49 c8       	lddpc	r8,800092b4 <mci_send_cmd+0xd4>
80009246:	70 08       	ld.w	r8,r8[0x0]
80009248:	10 99       	mov	r9,r8
8000924a:	e6 19 01 e0 	andh	r9,0x1e0,COH
8000924e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009252:	71 08       	ld.w	r8,r8[0x40]
80009254:	f3 e8 10 08 	or	r8,r9,r8
80009258:	10 99       	mov	r9,r8
8000925a:	49 78       	lddpc	r8,800092b4 <mci_send_cmd+0xd4>
8000925c:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
8000925e:	49 68       	lddpc	r8,800092b4 <mci_send_cmd+0xd4>
80009260:	70 08       	ld.w	r8,r8[0x0]

  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
80009262:	e6 18 c0 7f 	andh	r8,0xc07f,COH
80009266:	ef 48 ff f0 	st.w	r7[-16],r8
  if(error != 0 )
8000926a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000926e:	58 08       	cp.w	r8,0
80009270:	c1 d0       	breq	800092aa <mci_send_cmd+0xca>
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
80009272:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009276:	e0 48 00 69 	cp.w	r8,105
8000927a:	c0 f0       	breq	80009298 <mci_send_cmd+0xb8>
8000927c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009280:	e0 48 08 41 	cp.w	r8,2113
80009284:	c0 a0       	breq	80009298 <mci_send_cmd+0xb8>
    {
      if( error != AVR32_MCI_SR_RTOE_MASK )
80009286:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000928a:	fc 19 00 10 	movh	r9,0x10
8000928e:	12 38       	cp.w	r8,r9
80009290:	c0 c0       	breq	800092a8 <mci_send_cmd+0xc8>
        // filter RTOE error which happens when using the HS mode
        return error;
80009292:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009296:	c0 b8       	rjmp	800092ac <mci_send_cmd+0xcc>
    }
    else
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
80009298:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000929c:	e4 48 00 00 	cp.w	r8,262144
800092a0:	c0 50       	breq	800092aa <mci_send_cmd+0xca>
        return error;
800092a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800092a6:	c0 38       	rjmp	800092ac <mci_send_cmd+0xcc>
  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
  if(error != 0 )
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
800092a8:	d7 03       	nop
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
        return error;
    }
  }
  return MCI_SUCCESS;
800092aa:	30 08       	mov	r8,0

}
800092ac:	10 9c       	mov	r12,r8
800092ae:	2f 9d       	sub	sp,-28
800092b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800092b4:	00 00       	add	r0,r0
800092b6:	07 6c       	ld.uh	r12,--r3

800092b8 <mci_set_bus_size>:

int mci_set_bus_size(volatile avr32_mci_t *mci,
                     uint8_t busWidth)
{
800092b8:	eb cd 40 80 	pushm	r7,lr
800092bc:	1a 97       	mov	r7,sp
800092be:	20 3d       	sub	sp,12
800092c0:	ef 4c ff f8 	st.w	r7[-8],r12
800092c4:	16 98       	mov	r8,r11
800092c6:	ef 68 ff f4 	st.b	r7[-12],r8
  uint32_t mci_sdcr_register;

  if (busWidth > MCI_BUS_SIZE_8_BIT)
800092ca:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800092ce:	30 38       	mov	r8,3
800092d0:	f0 09 18 00 	cp.b	r9,r8
800092d4:	e0 88 00 04 	brls	800092dc <mci_set_bus_size+0x24>
    return MCI_INVALID_INPUT;
800092d8:	30 18       	mov	r8,1
800092da:	c1 b8       	rjmp	80009310 <mci_set_bus_size+0x58>

  mci_sdcr_register = mci->sdcr;
800092dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092e0:	70 38       	ld.w	r8,r8[0xc]
800092e2:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register &= ~AVR32_MCI_SDCR_SDCBUS_MASK; // Clear previous buswidth
800092e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800092ea:	e0 18 ff 3f 	andl	r8,0xff3f
800092ee:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register |= (busWidth<<AVR32_MCI_SDCR_SDCBUS_OFFSET);
800092f2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800092f6:	a7 68       	lsl	r8,0x6
800092f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800092fc:	f3 e8 10 08 	or	r8,r9,r8
80009300:	ef 48 ff fc 	st.w	r7[-4],r8
  mci->sdcr = mci_sdcr_register;
80009304:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009308:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000930c:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
8000930e:	30 08       	mov	r8,0
}
80009310:	10 9c       	mov	r12,r8
80009312:	2f dd       	sub	sp,-12
80009314:	e3 cd 80 80 	ldm	sp++,r7,pc

80009318 <mci_read_response>:


unsigned int mci_read_response(volatile avr32_mci_t *mci)
{
80009318:	eb cd 40 80 	pushm	r7,lr
8000931c:	1a 97       	mov	r7,sp
8000931e:	20 1d       	sub	sp,4
80009320:	ef 4c ff fc 	st.w	r7[-4],r12
  return mci->rspr0;
80009324:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009328:	70 88       	ld.w	r8,r8[0x20]
}
8000932a:	10 9c       	mov	r12,r8
8000932c:	2f fd       	sub	sp,-4
8000932e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009332:	d7 03       	nop

80009334 <mci_wait_busy_signal>:

void mci_wait_busy_signal(volatile avr32_mci_t *mci)
{
80009334:	eb cd 40 80 	pushm	r7,lr
80009338:	1a 97       	mov	r7,sp
8000933a:	20 2d       	sub	sp,8
8000933c:	ef 4c ff f8 	st.w	r7[-8],r12
80009340:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009344:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80009348:	48 b8       	lddpc	r8,80009374 <mci_wait_busy_signal+0x40>
8000934a:	70 08       	ld.w	r8,r8[0x0]
8000934c:	10 99       	mov	r9,r8
8000934e:	e6 19 01 e0 	andh	r9,0x1e0,COH
80009352:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009356:	71 08       	ld.w	r8,r8[0x40]
80009358:	f3 e8 10 08 	or	r8,r9,r8
8000935c:	10 99       	mov	r9,r8
8000935e:	48 68       	lddpc	r8,80009374 <mci_wait_busy_signal+0x40>
80009360:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80009362:	48 58       	lddpc	r8,80009374 <mci_wait_busy_signal+0x40>
80009364:	70 08       	ld.w	r8,r8[0x0]
  while(!(mci_get_sr(mci)&AVR32_MCI_SR_NOTBUSY_MASK));
80009366:	e2 18 00 20 	andl	r8,0x20,COH
8000936a:	ce b0       	breq	80009340 <mci_wait_busy_signal+0xc>
}
8000936c:	2f ed       	sub	sp,-8
8000936e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009372:	00 00       	add	r0,r0
80009374:	00 00       	add	r0,r0
80009376:	07 6c       	ld.uh	r12,--r3

80009378 <mci_select_card>:

int mci_select_card(volatile avr32_mci_t *mci,
                    uint8_t card_slot,
                    uint8_t bus_width)
{
80009378:	eb cd 40 80 	pushm	r7,lr
8000937c:	1a 97       	mov	r7,sp
8000937e:	20 3d       	sub	sp,12
80009380:	ef 4c ff fc 	st.w	r7[-4],r12
80009384:	16 99       	mov	r9,r11
80009386:	14 98       	mov	r8,r10
80009388:	ef 69 ff f8 	st.b	r7[-8],r9
8000938c:	ef 68 ff f4 	st.b	r7[-12],r8
  if (card_slot > MCI_LAST_SLOTS)
80009390:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009394:	30 18       	mov	r8,1
80009396:	f0 09 18 00 	cp.b	r9,r8
8000939a:	e0 88 00 04 	brls	800093a2 <mci_select_card+0x2a>
    return MCI_INVALID_INPUT;
8000939e:	30 18       	mov	r8,1
800093a0:	c0 e8       	rjmp	800093bc <mci_select_card+0x44>

  // Select the card slot and bus width
  mci->sdcr = (bus_width<<AVR32_MCI_SDCR_SDCBUS_OFFSET) | (card_slot<<AVR32_MCI_SDCR_SDCSEL_OFFSET);
800093a2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800093a6:	f0 09 15 06 	lsl	r9,r8,0x6
800093aa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800093ae:	f3 e8 10 08 	or	r8,r9,r8
800093b2:	10 99       	mov	r9,r8
800093b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093b8:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
800093ba:	30 08       	mov	r8,0
}
800093bc:	10 9c       	mov	r12,r8
800093be:	2f dd       	sub	sp,-12
800093c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800093c4 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800093c4:	eb cd 40 80 	pushm	r7,lr
800093c8:	1a 97       	mov	r7,sp
800093ca:	20 1d       	sub	sp,4
800093cc:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800093d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093d4:	e6 18 00 01 	andh	r8,0x1,COH
800093d8:	5f 08       	sreq	r8
800093da:	5c 58       	castu.b	r8
}
800093dc:	10 9c       	mov	r12,r8
800093de:	2f fd       	sub	sp,-4
800093e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800093e4 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
800093e4:	eb cd 40 80 	pushm	r7,lr
800093e8:	1a 97       	mov	r7,sp
800093ea:	20 4d       	sub	sp,16
800093ec:	ef 4c ff f8 	st.w	r7[-8],r12
800093f0:	ef 4b ff f4 	st.w	r7[-12],r11
800093f4:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800093f8:	e1 b8 00 00 	mfsr	r8,0x0
800093fc:	10 9c       	mov	r12,r8
800093fe:	f0 1f 00 73 	mcall	800095c8 <tc_configure_interrupts+0x1e4>
80009402:	18 98       	mov	r8,r12
80009404:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80009408:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000940c:	58 28       	cp.w	r8,2
8000940e:	e0 88 00 04 	brls	80009416 <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
80009412:	3f f8       	mov	r8,-1
80009414:	cd 68       	rjmp	800095c0 <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80009416:	ee fb ff f4 	ld.w	r11,r7[-12]
8000941a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000941e:	70 08       	ld.w	r8,r8[0x0]
80009420:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80009424:	5c 58       	castu.b	r8
80009426:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
8000942a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000942e:	70 08       	ld.w	r8,r8[0x0]
80009430:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80009434:	5c 58       	castu.b	r8
80009436:	a7 68       	lsl	r8,0x6
80009438:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
8000943a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000943e:	70 08       	ld.w	r8,r8[0x0]
80009440:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80009444:	5c 58       	castu.b	r8
80009446:	a5 78       	lsl	r8,0x5
80009448:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
8000944a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000944e:	70 08       	ld.w	r8,r8[0x0]
80009450:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80009454:	5c 58       	castu.b	r8
80009456:	a5 68       	lsl	r8,0x4
80009458:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
8000945a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000945e:	70 08       	ld.w	r8,r8[0x0]
80009460:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80009464:	5c 58       	castu.b	r8
80009466:	a3 78       	lsl	r8,0x3
80009468:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
8000946a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000946e:	70 08       	ld.w	r8,r8[0x0]
80009470:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80009474:	5c 58       	castu.b	r8
80009476:	a3 68       	lsl	r8,0x2
80009478:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
8000947a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000947e:	70 08       	ld.w	r8,r8[0x0]
80009480:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80009484:	5c 58       	castu.b	r8
80009486:	a1 78       	lsl	r8,0x1
80009488:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
8000948a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000948e:	70 08       	ld.w	r8,r8[0x0]
80009490:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009494:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80009496:	f3 e8 10 08 	or	r8,r9,r8
8000949a:	10 99       	mov	r9,r8
8000949c:	ee fa ff f8 	ld.w	r10,r7[-8]
800094a0:	f6 08 15 06 	lsl	r8,r11,0x6
800094a4:	f4 08 00 08 	add	r8,r10,r8
800094a8:	2d c8       	sub	r8,-36
800094aa:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
800094ac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800094b0:	30 08       	mov	r8,0
800094b2:	f0 09 18 00 	cp.b	r9,r8
800094b6:	c0 20       	breq	800094ba <tc_configure_interrupts+0xd6>
800094b8:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800094ba:	ee fb ff f4 	ld.w	r11,r7[-12]
800094be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800094c2:	70 08       	ld.w	r8,r8[0x0]
800094c4:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800094c8:	5c 58       	castu.b	r8
800094ca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800094ce:	c0 41       	brne	800094d6 <tc_configure_interrupts+0xf2>
800094d0:	e0 69 00 80 	mov	r9,128
800094d4:	c0 28       	rjmp	800094d8 <tc_configure_interrupts+0xf4>
800094d6:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
800094d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800094dc:	70 08       	ld.w	r8,r8[0x0]
800094de:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800094e2:	5c 58       	castu.b	r8
800094e4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800094e8:	c0 31       	brne	800094ee <tc_configure_interrupts+0x10a>
800094ea:	34 08       	mov	r8,64
800094ec:	c0 28       	rjmp	800094f0 <tc_configure_interrupts+0x10c>
800094ee:	30 08       	mov	r8,0
800094f0:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
800094f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800094f6:	70 08       	ld.w	r8,r8[0x0]
800094f8:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800094fc:	5c 58       	castu.b	r8
800094fe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009502:	c0 31       	brne	80009508 <tc_configure_interrupts+0x124>
80009504:	32 08       	mov	r8,32
80009506:	c0 28       	rjmp	8000950a <tc_configure_interrupts+0x126>
80009508:	30 08       	mov	r8,0
8000950a:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
8000950c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009510:	70 08       	ld.w	r8,r8[0x0]
80009512:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80009516:	5c 58       	castu.b	r8
80009518:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000951c:	c0 31       	brne	80009522 <tc_configure_interrupts+0x13e>
8000951e:	31 08       	mov	r8,16
80009520:	c0 28       	rjmp	80009524 <tc_configure_interrupts+0x140>
80009522:	30 08       	mov	r8,0
80009524:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80009526:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000952a:	70 08       	ld.w	r8,r8[0x0]
8000952c:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80009530:	5c 58       	castu.b	r8
80009532:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009536:	c0 31       	brne	8000953c <tc_configure_interrupts+0x158>
80009538:	30 88       	mov	r8,8
8000953a:	c0 28       	rjmp	8000953e <tc_configure_interrupts+0x15a>
8000953c:	30 08       	mov	r8,0
8000953e:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80009540:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009544:	70 08       	ld.w	r8,r8[0x0]
80009546:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
8000954a:	5c 58       	castu.b	r8
8000954c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009550:	c0 31       	brne	80009556 <tc_configure_interrupts+0x172>
80009552:	30 48       	mov	r8,4
80009554:	c0 28       	rjmp	80009558 <tc_configure_interrupts+0x174>
80009556:	30 08       	mov	r8,0
80009558:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
8000955a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000955e:	70 08       	ld.w	r8,r8[0x0]
80009560:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80009564:	5c 58       	castu.b	r8
80009566:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000956a:	c0 31       	brne	80009570 <tc_configure_interrupts+0x18c>
8000956c:	30 28       	mov	r8,2
8000956e:	c0 28       	rjmp	80009572 <tc_configure_interrupts+0x18e>
80009570:	30 08       	mov	r8,0
80009572:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
80009574:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009578:	70 08       	ld.w	r8,r8[0x0]
8000957a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000957e:	5c 58       	castu.b	r8
80009580:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009584:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80009586:	f3 e8 10 08 	or	r8,r9,r8
8000958a:	10 99       	mov	r9,r8
8000958c:	ee fa ff f8 	ld.w	r10,r7[-8]
80009590:	f6 08 15 06 	lsl	r8,r11,0x6
80009594:	f4 08 00 08 	add	r8,r10,r8
80009598:	2d 88       	sub	r8,-40
8000959a:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
8000959c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800095a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800095a4:	a1 78       	lsl	r8,0x1
800095a6:	2f f8       	sub	r8,-1
800095a8:	a5 78       	lsl	r8,0x5
800095aa:	f2 08 00 08 	add	r8,r9,r8
800095ae:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800095b0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800095b4:	30 08       	mov	r8,0
800095b6:	f0 09 18 00 	cp.b	r9,r8
800095ba:	c0 20       	breq	800095be <tc_configure_interrupts+0x1da>
800095bc:	d5 03       	csrf	0x10

  return 0;
800095be:	30 08       	mov	r8,0
}
800095c0:	10 9c       	mov	r12,r8
800095c2:	2f cd       	sub	sp,-16
800095c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800095c8:	80 00       	ld.sh	r0,r0[0x0]
800095ca:	93 c4       	st.w	r9[0x30],r4

800095cc <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
800095cc:	eb cd 40 80 	pushm	r7,lr
800095d0:	1a 97       	mov	r7,sp
800095d2:	20 2d       	sub	sp,8
800095d4:	ef 4c ff fc 	st.w	r7[-4],r12
800095d8:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800095dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095e0:	70 08       	ld.w	r8,r8[0x0]
800095e2:	58 28       	cp.w	r8,2
800095e4:	e0 88 00 04 	brls	800095ec <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
800095e8:	3f f8       	mov	r8,-1
800095ea:	c9 78       	rjmp	80009718 <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800095ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095f0:	70 09       	ld.w	r9,r8[0x0]
800095f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095f6:	70 18       	ld.w	r8,r8[0x4]
800095f8:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
800095fc:	5c 58       	castu.b	r8
800095fe:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
80009602:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009606:	70 18       	ld.w	r8,r8[0x4]
80009608:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
8000960c:	5c 58       	castu.b	r8
8000960e:	bd 68       	lsl	r8,0x1c
80009610:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
80009612:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009616:	70 18       	ld.w	r8,r8[0x4]
80009618:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
8000961c:	5c 58       	castu.b	r8
8000961e:	bb 68       	lsl	r8,0x1a
80009620:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
80009622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009626:	70 18       	ld.w	r8,r8[0x4]
80009628:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
8000962c:	5c 58       	castu.b	r8
8000962e:	b9 68       	lsl	r8,0x18
80009630:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
80009632:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009636:	70 18       	ld.w	r8,r8[0x4]
80009638:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
8000963c:	5c 58       	castu.b	r8
8000963e:	b7 68       	lsl	r8,0x16
80009640:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
80009642:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009646:	70 18       	ld.w	r8,r8[0x4]
80009648:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
8000964c:	5c 58       	castu.b	r8
8000964e:	b5 68       	lsl	r8,0x14
80009650:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
80009652:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009656:	70 18       	ld.w	r8,r8[0x4]
80009658:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
8000965c:	5c 58       	castu.b	r8
8000965e:	b3 68       	lsl	r8,0x12
80009660:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
80009662:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009666:	70 18       	ld.w	r8,r8[0x4]
80009668:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
8000966c:	5c 58       	castu.b	r8
8000966e:	b1 68       	lsl	r8,0x10
80009670:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
80009674:	10 9a       	mov	r10,r8
80009676:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
80009678:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000967c:	70 18       	ld.w	r8,r8[0x4]
8000967e:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
80009682:	5c 58       	castu.b	r8
80009684:	ad 78       	lsl	r8,0xd
80009686:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
80009688:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000968c:	70 18       	ld.w	r8,r8[0x4]
8000968e:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
80009692:	5c 58       	castu.b	r8
80009694:	ad 68       	lsl	r8,0xc
80009696:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
80009698:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000969c:	70 18       	ld.w	r8,r8[0x4]
8000969e:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
800096a2:	5c 58       	castu.b	r8
800096a4:	ab 68       	lsl	r8,0xa
800096a6:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
800096a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800096ac:	70 18       	ld.w	r8,r8[0x4]
800096ae:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
800096b2:	5c 58       	castu.b	r8
800096b4:	a9 68       	lsl	r8,0x8
800096b6:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
800096b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800096bc:	70 18       	ld.w	r8,r8[0x4]
800096be:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800096c2:	5c 58       	castu.b	r8
800096c4:	a7 78       	lsl	r8,0x7
800096c6:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
800096c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800096cc:	70 18       	ld.w	r8,r8[0x4]
800096ce:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800096d2:	5c 58       	castu.b	r8
800096d4:	a7 68       	lsl	r8,0x6
800096d6:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
800096d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800096dc:	70 18       	ld.w	r8,r8[0x4]
800096de:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
800096e2:	5c 58       	castu.b	r8
800096e4:	a5 68       	lsl	r8,0x4
800096e6:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
800096e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800096ec:	70 18       	ld.w	r8,r8[0x4]
800096ee:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800096f2:	5c 58       	castu.b	r8
800096f4:	a3 78       	lsl	r8,0x3
800096f6:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
800096f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800096fc:	70 18       	ld.w	r8,r8[0x4]
800096fe:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80009702:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80009704:	f5 e8 10 08 	or	r8,r10,r8
80009708:	10 9a       	mov	r10,r8
8000970a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000970e:	a5 69       	lsl	r9,0x4
80009710:	2f f9       	sub	r9,-1
80009712:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
80009716:	30 08       	mov	r8,0
}
80009718:	10 9c       	mov	r12,r8
8000971a:	2f ed       	sub	sp,-8
8000971c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009720 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80009720:	eb cd 40 80 	pushm	r7,lr
80009724:	1a 97       	mov	r7,sp
80009726:	20 2d       	sub	sp,8
80009728:	ef 4c ff fc 	st.w	r7[-4],r12
8000972c:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80009730:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009734:	58 28       	cp.w	r8,2
80009736:	e0 88 00 04 	brls	8000973e <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
8000973a:	3f f8       	mov	r8,-1
8000973c:	c0 b8       	rjmp	80009752 <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
8000973e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009742:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009746:	a7 68       	lsl	r8,0x6
80009748:	f2 08 00 08 	add	r8,r9,r8
8000974c:	30 59       	mov	r9,5
8000974e:	91 09       	st.w	r8[0x0],r9

  return 0;
80009750:	30 08       	mov	r8,0
}
80009752:	10 9c       	mov	r12,r8
80009754:	2f ed       	sub	sp,-8
80009756:	e3 cd 80 80 	ldm	sp++,r7,pc

8000975a <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
8000975a:	eb cd 40 80 	pushm	r7,lr
8000975e:	1a 97       	mov	r7,sp
80009760:	20 2d       	sub	sp,8
80009762:	ef 4c ff fc 	st.w	r7[-4],r12
80009766:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000976a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000976e:	58 28       	cp.w	r8,2
80009770:	e0 88 00 04 	brls	80009778 <tc_read_sr+0x1e>
    return TC_INVALID_ARGUMENT;
80009774:	3f f8       	mov	r8,-1
80009776:	c0 b8       	rjmp	8000978c <tc_read_sr+0x32>

  return tc->channel[channel].sr;
80009778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000977c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009780:	a1 78       	lsl	r8,0x1
80009782:	2f f8       	sub	r8,-1
80009784:	a5 78       	lsl	r8,0x5
80009786:	f2 08 00 08 	add	r8,r9,r8
8000978a:	70 08       	ld.w	r8,r8[0x0]
}
8000978c:	10 9c       	mov	r12,r8
8000978e:	2f ed       	sub	sp,-8
80009790:	e3 cd 80 80 	ldm	sp++,r7,pc

80009794 <tc_write_rc>:
  return value;
}


uint16_t tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, uint16_t value)
{
80009794:	eb cd 40 80 	pushm	r7,lr
80009798:	1a 97       	mov	r7,sp
8000979a:	20 3d       	sub	sp,12
8000979c:	ef 4c ff fc 	st.w	r7[-4],r12
800097a0:	ef 4b ff f8 	st.w	r7[-8],r11
800097a4:	14 98       	mov	r8,r10
800097a6:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800097aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097ae:	58 28       	cp.w	r8,2
800097b0:	e0 88 00 04 	brls	800097b8 <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
800097b4:	3f f8       	mov	r8,-1
800097b6:	c2 78       	rjmp	80009804 <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800097b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800097bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800097c0:	a5 69       	lsl	r9,0x4
800097c2:	2f f9       	sub	r9,-1
800097c4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800097c8:	e2 18 80 00 	andl	r8,0x8000,COH
800097cc:	c1 a0       	breq	80009800 <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
800097ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800097d6:	ee fa ff fc 	ld.w	r10,r7[-4]
800097da:	a7 69       	lsl	r9,0x6
800097dc:	f4 09 00 09 	add	r9,r10,r9
800097e0:	2e 49       	sub	r9,-28
800097e2:	72 09       	ld.w	r9,r9[0x0]
800097e4:	12 9a       	mov	r10,r9
800097e6:	e0 1a 00 00 	andl	r10,0x0
800097ea:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800097ee:	f5 e9 10 09 	or	r9,r10,r9
800097f2:	ee fa ff fc 	ld.w	r10,r7[-4]
800097f6:	a7 68       	lsl	r8,0x6
800097f8:	f4 08 00 08 	add	r8,r10,r8
800097fc:	2e 48       	sub	r8,-28
800097fe:	91 09       	st.w	r8[0x0],r9

  return value;
80009800:	ef 08 ff f4 	ld.sh	r8,r7[-12]
}
80009804:	10 9c       	mov	r12,r8
80009806:	2f dd       	sub	sp,-12
80009808:	e3 cd 80 80 	ldm	sp++,r7,pc

8000980c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8000980c:	eb cd 40 80 	pushm	r7,lr
80009810:	1a 97       	mov	r7,sp
80009812:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80009814:	e1 b8 00 00 	mfsr	r8,0x0
80009818:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8000981c:	d3 03       	ssrf	0x10

	return flags;
8000981e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80009822:	10 9c       	mov	r12,r8
80009824:	2f fd       	sub	sp,-4
80009826:	e3 cd 80 80 	ldm	sp++,r7,pc

8000982a <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8000982a:	eb cd 40 80 	pushm	r7,lr
8000982e:	1a 97       	mov	r7,sp
80009830:	20 1d       	sub	sp,4
80009832:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80009836:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000983a:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8000983e:	2f fd       	sub	sp,-4
80009840:	e3 cd 80 80 	ldm	sp++,r7,pc

80009844 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
80009844:	eb cd 40 80 	pushm	r7,lr
80009848:	1a 97       	mov	r7,sp
8000984a:	20 2d       	sub	sp,8
8000984c:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
80009850:	f0 1f 00 0b 	mcall	8000987c <sleepmgr_lock_mode+0x38>
80009854:	18 98       	mov	r8,r12
80009856:	ef 48 ff fc 	st.w	r7[-4],r8

	++sleepmgr_locks[mode];
8000985a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000985e:	48 99       	lddpc	r9,80009880 <sleepmgr_lock_mode+0x3c>
80009860:	f2 08 07 09 	ld.ub	r9,r9[r8]
80009864:	2f f9       	sub	r9,-1
80009866:	5c 59       	castu.b	r9
80009868:	48 6a       	lddpc	r10,80009880 <sleepmgr_lock_mode+0x3c>
8000986a:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
8000986e:	ee fc ff fc 	ld.w	r12,r7[-4]
80009872:	f0 1f 00 05 	mcall	80009884 <sleepmgr_lock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
80009876:	2f ed       	sub	sp,-8
80009878:	e3 cd 80 80 	ldm	sp++,r7,pc
8000987c:	80 00       	ld.sh	r0,r0[0x0]
8000987e:	98 0c       	ld.sh	r12,r12[0x0]
80009880:	00 00       	add	r0,r0
80009882:	0f c0       	ld.ub	r0,r7[0x4]
80009884:	80 00       	ld.sh	r0,r0[0x0]
80009886:	98 2a       	ld.sh	r10,r12[0x4]

80009888 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
80009888:	eb cd 40 80 	pushm	r7,lr
8000988c:	1a 97       	mov	r7,sp
8000988e:	20 2d       	sub	sp,8
80009890:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();
80009894:	f0 1f 00 0b 	mcall	800098c0 <sleepmgr_unlock_mode+0x38>
80009898:	18 98       	mov	r8,r12
8000989a:	ef 48 ff fc 	st.w	r7[-4],r8

	--sleepmgr_locks[mode];
8000989e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098a2:	48 99       	lddpc	r9,800098c4 <sleepmgr_unlock_mode+0x3c>
800098a4:	f2 08 07 09 	ld.ub	r9,r9[r8]
800098a8:	20 19       	sub	r9,1
800098aa:	5c 59       	castu.b	r9
800098ac:	48 6a       	lddpc	r10,800098c4 <sleepmgr_unlock_mode+0x3c>
800098ae:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
800098b2:	ee fc ff fc 	ld.w	r12,r7[-4]
800098b6:	f0 1f 00 05 	mcall	800098c8 <sleepmgr_unlock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
800098ba:	2f ed       	sub	sp,-8
800098bc:	e3 cd 80 80 	ldm	sp++,r7,pc
800098c0:	80 00       	ld.sh	r0,r0[0x0]
800098c2:	98 0c       	ld.sh	r12,r12[0x0]
800098c4:	00 00       	add	r0,r0
800098c6:	0f c0       	ld.ub	r0,r7[0x4]
800098c8:	80 00       	ld.sh	r0,r0[0x0]
800098ca:	98 2a       	ld.sh	r10,r12[0x4]

800098cc <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
800098cc:	eb cd 40 80 	pushm	r7,lr
800098d0:	1a 97       	mov	r7,sp
800098d2:	20 1d       	sub	sp,4
800098d4:	18 98       	mov	r8,r12
800098d6:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!b_idle && udd_b_idle) {
800098da:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800098de:	ec 18 00 01 	eorl	r8,0x1
800098e2:	5c 58       	castu.b	r8
800098e4:	c0 80       	breq	800098f4 <udd_sleep_mode+0x28>
800098e6:	48 f8       	lddpc	r8,80009920 <udd_sleep_mode+0x54>
800098e8:	11 88       	ld.ub	r8,r8[0x0]
800098ea:	58 08       	cp.w	r8,0
800098ec:	c0 40       	breq	800098f4 <udd_sleep_mode+0x28>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
800098ee:	30 1c       	mov	r12,1
800098f0:	f0 1f 00 0d 	mcall	80009924 <udd_sleep_mode+0x58>
	}
	if (b_idle && !udd_b_idle) {
800098f4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800098f8:	30 08       	mov	r8,0
800098fa:	f0 09 18 00 	cp.b	r9,r8
800098fe:	c0 a0       	breq	80009912 <udd_sleep_mode+0x46>
80009900:	48 88       	lddpc	r8,80009920 <udd_sleep_mode+0x54>
80009902:	11 88       	ld.ub	r8,r8[0x0]
80009904:	ec 18 00 01 	eorl	r8,0x1
80009908:	5c 58       	castu.b	r8
8000990a:	c0 40       	breq	80009912 <udd_sleep_mode+0x46>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
8000990c:	30 1c       	mov	r12,1
8000990e:	f0 1f 00 07 	mcall	80009928 <udd_sleep_mode+0x5c>
	}
	udd_b_idle = b_idle;
80009912:	48 49       	lddpc	r9,80009920 <udd_sleep_mode+0x54>
80009914:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009918:	b2 88       	st.b	r9[0x0],r8
}
8000991a:	2f fd       	sub	sp,-4
8000991c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009920:	00 00       	add	r0,r0
80009922:	07 70       	ld.ub	r0,--r3
80009924:	80 00       	ld.sh	r0,r0[0x0]
80009926:	98 88       	ld.uh	r8,r12[0x0]
80009928:	80 00       	ld.sh	r0,r0[0x0]
8000992a:	98 44       	ld.sh	r4,r12[0x8]

8000992c <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
8000992c:	eb cd 40 80 	pushm	r7,lr
80009930:	1a 97       	mov	r7,sp
	if (Is_udd_sof()) {
80009932:	fe 68 00 04 	mov	r8,-131068
80009936:	70 08       	ld.w	r8,r8[0x0]
80009938:	e2 18 00 04 	andl	r8,0x4,COH
8000993c:	c1 10       	breq	8000995e <udd_interrupt+0x32>
		udd_ack_sof();
8000993e:	fe 68 00 08 	mov	r8,-131064
80009942:	30 49       	mov	r9,4
80009944:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
80009946:	fe 68 08 04 	mov	r8,-129020
8000994a:	70 08       	ld.w	r8,r8[0x0]
8000994c:	e2 18 30 00 	andl	r8,0x3000,COH
80009950:	ad 88       	lsr	r8,0xc
80009952:	c0 31       	brne	80009958 <udd_interrupt+0x2c>
			udc_sof_notify();
80009954:	f0 1f 00 54 	mcall	80009aa4 <udd_interrupt+0x178>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
80009958:	f0 1f 00 54 	mcall	80009aa8 <udd_interrupt+0x17c>
#endif
		goto udd_interrupt_end;
8000995c:	c9 d8       	rjmp	80009a96 <udd_interrupt+0x16a>
	}
	if (Is_udd_msof()) {
8000995e:	fe 68 00 04 	mov	r8,-131068
80009962:	70 08       	ld.w	r8,r8[0x0]
80009964:	e2 18 00 02 	andl	r8,0x2,COH
80009968:	c0 80       	breq	80009978 <udd_interrupt+0x4c>
		udd_ack_msof();
8000996a:	fe 68 00 08 	mov	r8,-131064
8000996e:	30 29       	mov	r9,2
80009970:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80009972:	f0 1f 00 4d 	mcall	80009aa4 <udd_interrupt+0x178>
		goto udd_interrupt_end;
80009976:	c9 08       	rjmp	80009a96 <udd_interrupt+0x16a>
	}

	if (udd_ctrl_interrupt())
80009978:	f0 1f 00 4d 	mcall	80009aac <udd_interrupt+0x180>
8000997c:	18 98       	mov	r8,r12
8000997e:	58 08       	cp.w	r8,0
80009980:	e0 81 00 88 	brne	80009a90 <udd_interrupt+0x164>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
80009984:	f0 1f 00 4b 	mcall	80009ab0 <udd_interrupt+0x184>
80009988:	18 98       	mov	r8,r12
8000998a:	58 08       	cp.w	r8,0
8000998c:	e0 81 00 84 	brne	80009a94 <udd_interrupt+0x168>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80009990:	fe 68 00 04 	mov	r8,-131068
80009994:	70 08       	ld.w	r8,r8[0x0]
80009996:	e2 18 00 08 	andl	r8,0x8,COH
8000999a:	c0 e0       	breq	800099b6 <udd_interrupt+0x8a>
		udd_ack_reset();
8000999c:	fe 68 00 08 	mov	r8,-131064
800099a0:	30 89       	mov	r9,8
800099a2:	91 09       	st.w	r8[0x0],r9
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
800099a4:	f0 1f 00 44 	mcall	80009ab4 <udd_interrupt+0x188>
#endif
		// Reset USB Device Stack Core
		udc_reset();
800099a8:	f0 1f 00 44 	mcall	80009ab8 <udd_interrupt+0x18c>
		// Reset endpoint control
		udd_reset_ep_ctrl();
800099ac:	f0 1f 00 44 	mcall	80009abc <udd_interrupt+0x190>
		// Reset endpoint control management
		udd_ctrl_init();
800099b0:	f0 1f 00 44 	mcall	80009ac0 <udd_interrupt+0x194>
		goto udd_interrupt_end;
800099b4:	c7 18       	rjmp	80009a96 <udd_interrupt+0x16a>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
800099b6:	fe 68 00 10 	mov	r8,-131056
800099ba:	70 08       	ld.w	r8,r8[0x0]
800099bc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800099c0:	5c 58       	castu.b	r8
800099c2:	c2 40       	breq	80009a0a <udd_interrupt+0xde>
800099c4:	fe 68 00 04 	mov	r8,-131068
800099c8:	70 08       	ld.w	r8,r8[0x0]
800099ca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800099ce:	5c 58       	castu.b	r8
800099d0:	c1 d0       	breq	80009a0a <udd_interrupt+0xde>
		otg_unfreeze_clock();
800099d2:	fe 68 08 00 	mov	r8,-129024
800099d6:	fe 69 08 00 	mov	r9,-129024
800099da:	72 09       	ld.w	r9,r9[0x0]
800099dc:	af c9       	cbr	r9,0xe
800099de:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
800099e0:	fe 68 00 14 	mov	r8,-131052
800099e4:	30 19       	mov	r9,1
800099e6:	91 09       	st.w	r8[0x0],r9
		udd_enable_wake_up_interrupt();
800099e8:	fe 68 00 18 	mov	r8,-131048
800099ec:	31 09       	mov	r9,16
800099ee:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
800099f0:	fe 68 08 00 	mov	r8,-129024
800099f4:	fe 69 08 00 	mov	r9,-129024
800099f8:	72 09       	ld.w	r9,r9[0x0]
800099fa:	af a9       	sbr	r9,0xe
800099fc:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
800099fe:	30 0c       	mov	r12,0
80009a00:	f0 1f 00 31 	mcall	80009ac4 <udd_interrupt+0x198>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
80009a04:	f0 1f 00 31 	mcall	80009ac8 <udd_interrupt+0x19c>
#endif
		goto udd_interrupt_end;
80009a08:	c4 78       	rjmp	80009a96 <udd_interrupt+0x16a>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80009a0a:	fe 68 00 10 	mov	r8,-131056
80009a0e:	70 08       	ld.w	r8,r8[0x0]
80009a10:	e2 18 00 10 	andl	r8,0x10,COH
80009a14:	c1 c0       	breq	80009a4c <udd_interrupt+0x120>
80009a16:	fe 68 00 04 	mov	r8,-131068
80009a1a:	70 08       	ld.w	r8,r8[0x0]
80009a1c:	e2 18 00 10 	andl	r8,0x10,COH
80009a20:	c1 60       	breq	80009a4c <udd_interrupt+0x120>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80009a22:	fe 68 08 00 	mov	r8,-129024
80009a26:	fe 69 08 00 	mov	r9,-129024
80009a2a:	72 09       	ld.w	r9,r9[0x0]
80009a2c:	af c9       	cbr	r9,0xe
80009a2e:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80009a30:	fe 68 00 14 	mov	r8,-131052
80009a34:	31 09       	mov	r9,16
80009a36:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
80009a38:	fe 68 00 18 	mov	r8,-131048
80009a3c:	30 19       	mov	r9,1
80009a3e:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(true); // Enter in IDLE mode
80009a40:	30 1c       	mov	r12,1
80009a42:	f0 1f 00 21 	mcall	80009ac4 <udd_interrupt+0x198>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
80009a46:	f0 1f 00 22 	mcall	80009acc <udd_interrupt+0x1a0>
#endif
		goto udd_interrupt_end;
80009a4a:	c2 68       	rjmp	80009a96 <udd_interrupt+0x16a>
	}

	if (Is_otg_vbus_transition()) {
80009a4c:	fe 68 08 04 	mov	r8,-129020
80009a50:	70 08       	ld.w	r8,r8[0x0]
80009a52:	e2 18 00 02 	andl	r8,0x2,COH
80009a56:	c2 00       	breq	80009a96 <udd_interrupt+0x16a>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
80009a58:	fe 68 08 00 	mov	r8,-129024
80009a5c:	fe 69 08 00 	mov	r9,-129024
80009a60:	72 09       	ld.w	r9,r9[0x0]
80009a62:	af c9       	cbr	r9,0xe
80009a64:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80009a66:	fe 68 08 08 	mov	r8,-129016
80009a6a:	30 29       	mov	r9,2
80009a6c:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock();
80009a6e:	fe 68 08 00 	mov	r8,-129024
80009a72:	fe 69 08 00 	mov	r9,-129024
80009a76:	72 09       	ld.w	r9,r9[0x0]
80009a78:	af a9       	sbr	r9,0xe
80009a7a:	91 09       	st.w	r8[0x0],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
80009a7c:	fe 68 08 04 	mov	r8,-129020
80009a80:	70 08       	ld.w	r8,r8[0x0]
80009a82:	e2 18 08 00 	andl	r8,0x800,COH
80009a86:	5f 18       	srne	r8
80009a88:	10 9c       	mov	r12,r8
80009a8a:	f0 1f 00 12 	mcall	80009ad0 <udd_interrupt+0x1a4>
80009a8e:	c0 48       	rjmp	80009a96 <udd_interrupt+0x16a>
		udc_sof_notify();
		goto udd_interrupt_end;
	}

	if (udd_ctrl_interrupt())
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
80009a90:	d7 03       	nop
80009a92:	c0 28       	rjmp	80009a96 <udd_interrupt+0x16a>

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
80009a94:	d7 03       	nop
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80009a96:	fe 68 00 00 	mov	r8,-131072
80009a9a:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80009a9e:	e3 cd 40 80 	ldm	sp++,r7,lr
80009aa2:	d6 03       	rete
80009aa4:	80 00       	ld.sh	r0,r0[0x0]
80009aa6:	d3 48       	*unknown*
80009aa8:	80 00       	ld.sh	r0,r0[0x0]
80009aaa:	e1 b8       	*unknown*
80009aac:	80 00       	ld.sh	r0,r0[0x0]
80009aae:	b0 20       	st.h	r8[0x4],r0
80009ab0:	80 00       	ld.sh	r0,r0[0x0]
80009ab2:	b4 d4       	st.b	r10[0x5],r4
80009ab4:	80 00       	ld.sh	r0,r0[0x0]
80009ab6:	b1 54       	asr	r4,0x11
80009ab8:	80 00       	ld.sh	r0,r0[0x0]
80009aba:	d2 e4       	*unknown*
80009abc:	80 00       	ld.sh	r0,r0[0x0]
80009abe:	a8 a0       	st.b	r4[0x2],r0
80009ac0:	80 00       	ld.sh	r0,r0[0x0]
80009ac2:	a9 84       	lsr	r4,0x8
80009ac4:	80 00       	ld.sh	r0,r0[0x0]
80009ac6:	98 cc       	ld.uh	r12,r12[0x8]
80009ac8:	80 00       	ld.sh	r0,r0[0x0]
80009aca:	e1 90       	*unknown*
80009acc:	80 00       	ld.sh	r0,r0[0x0]
80009ace:	e1 a4 80 00 	cop	cp4,cr0,cr0,cr0,0x8
80009ad2:	e1 5c eb cd 	st.h	r0[-5171],r12

80009ad4 <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
80009ad4:	eb cd 40 80 	pushm	r7,lr
80009ad8:	1a 97       	mov	r7,sp
	return true;
80009ada:	30 18       	mov	r8,1
}
80009adc:	10 9c       	mov	r12,r8
80009ade:	e3 cd 80 80 	ldm	sp++,r7,pc
80009ae2:	d7 03       	nop

80009ae4 <udd_enable>:


void udd_enable(void)
{
80009ae4:	eb cd 40 80 	pushm	r7,lr
80009ae8:	1a 97       	mov	r7,sp
80009aea:	20 2d       	sub	sp,8
	irqflags_t flags;

	flags = cpu_irq_save();
80009aec:	f0 1f 00 3e 	mcall	80009be4 <udd_enable+0x100>
80009af0:	18 98       	mov	r8,r12
80009af2:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
80009af6:	f0 1f 00 3d 	mcall	80009be8 <udd_enable+0x104>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
80009afa:	30 0a       	mov	r10,0
80009afc:	e0 6b 02 20 	mov	r11,544
80009b00:	4b bc       	lddpc	r12,80009bec <udd_enable+0x108>
80009b02:	f0 1f 00 3c 	mcall	80009bf0 <udd_enable+0x10c>
80009b06:	30 18       	mov	r8,1
80009b08:	ef 48 ff fc 	st.w	r7[-4],r8
#if defined (__GNUC__)
__attribute__((__always_inline__))
#endif
static inline void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80009b0c:	fe 78 0c 00 	mov	r8,-62464
80009b10:	fe 79 0c 00 	mov	r9,-62464
80009b14:	f2 fa 01 44 	ld.w	r10,r9[324]
80009b18:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009b1c:	f5 e9 10 09 	or	r9,r10,r9
80009b20:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
80009b24:	fe 68 08 00 	mov	r8,-129024
80009b28:	fe 69 08 00 	mov	r9,-129024
80009b2c:	72 09       	ld.w	r9,r9[0x0]
80009b2e:	b9 c9       	cbr	r9,0x18
80009b30:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
80009b32:	fe 68 08 00 	mov	r8,-129024
80009b36:	fe 69 08 00 	mov	r9,-129024
80009b3a:	72 09       	ld.w	r9,r9[0x0]
80009b3c:	b9 b9       	sbr	r9,0x19
80009b3e:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80009b40:	fe 68 08 00 	mov	r8,-129024
80009b44:	fe 69 08 00 	mov	r9,-129024
80009b48:	72 09       	ld.w	r9,r9[0x0]
80009b4a:	ad a9       	sbr	r9,0xc
80009b4c:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80009b4e:	fe 68 08 00 	mov	r8,-129024
80009b52:	fe 69 08 00 	mov	r9,-129024
80009b56:	72 09       	ld.w	r9,r9[0x0]
80009b58:	af b9       	sbr	r9,0xf
80009b5a:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80009b5c:	fe 68 08 00 	mov	r8,-129024
80009b60:	fe 69 08 00 	mov	r9,-129024
80009b64:	72 09       	ld.w	r9,r9[0x0]
80009b66:	af c9       	cbr	r9,0xe
80009b68:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
80009b6a:	fe 68 08 00 	mov	r8,-129024
80009b6e:	70 08       	ld.w	r8,r8[0x0]

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
80009b70:	f0 1f 00 21 	mcall	80009bf4 <udd_enable+0x110>

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80009b74:	fe 68 00 00 	mov	r8,-131072
80009b78:	fe 69 00 00 	mov	r9,-131072
80009b7c:	72 09       	ld.w	r9,r9[0x0]
80009b7e:	ad c9       	cbr	r9,0xc
80009b80:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
80009b82:	fe 68 00 00 	mov	r8,-131072
80009b86:	fe 69 00 00 	mov	r9,-131072
80009b8a:	72 09       	ld.w	r9,r9[0x0]
80009b8c:	e0 19 f3 ff 	andl	r9,0xf3ff
80009b90:	91 09       	st.w	r8[0x0],r9
#  else
	udd_high_speed_disable();
#  endif
#endif
	otg_ack_vbus_transition();
80009b92:	fe 68 08 08 	mov	r8,-129016
80009b96:	30 29       	mov	r9,2
80009b98:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80009b9a:	fe 68 08 04 	mov	r8,-129020
80009b9e:	70 08       	ld.w	r8,r8[0x0]
80009ba0:	e2 18 08 00 	andl	r8,0x800,COH
80009ba4:	c0 50       	breq	80009bae <udd_enable+0xca>
		otg_raise_vbus_transition();
80009ba6:	fe 68 08 0c 	mov	r8,-129012
80009baa:	30 29       	mov	r9,2
80009bac:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80009bae:	fe 68 08 00 	mov	r8,-129024
80009bb2:	fe 69 08 00 	mov	r9,-129024
80009bb6:	72 09       	ld.w	r9,r9[0x0]
80009bb8:	a1 b9       	sbr	r9,0x1
80009bba:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80009bbc:	fe 68 08 00 	mov	r8,-129024
80009bc0:	fe 69 08 00 	mov	r9,-129024
80009bc4:	72 09       	ld.w	r9,r9[0x0]
80009bc6:	af a9       	sbr	r9,0xe
80009bc8:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80009bca:	48 c9       	lddpc	r9,80009bf8 <udd_enable+0x114>
80009bcc:	30 08       	mov	r8,0
80009bce:	b2 88       	st.b	r9[0x0],r8
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
80009bd0:	30 3c       	mov	r12,3
80009bd2:	f0 1f 00 0b 	mcall	80009bfc <udd_enable+0x118>
#endif

	cpu_irq_restore(flags);
80009bd6:	ee fc ff f8 	ld.w	r12,r7[-8]
80009bda:	f0 1f 00 0a 	mcall	80009c00 <udd_enable+0x11c>
}
80009bde:	2f ed       	sub	sp,-8
80009be0:	e3 cd 80 80 	ldm	sp++,r7,pc
80009be4:	80 00       	ld.sh	r0,r0[0x0]
80009be6:	98 0c       	ld.sh	r12,r12[0x0]
80009be8:	80 00       	ld.sh	r0,r0[0x0]
80009bea:	be a4       	st.b	pc[0x2],r4
80009bec:	80 00       	ld.sh	r0,r0[0x0]
80009bee:	99 2c       	st.w	r12[0x8],r12
80009bf0:	80 00       	ld.sh	r0,r0[0x0]
80009bf2:	8e a4       	ld.uh	r4,r7[0x4]
80009bf4:	80 00       	ld.sh	r0,r0[0x0]
80009bf6:	b0 e8       	st.b	r8[0x6],r8
80009bf8:	00 00       	add	r0,r0
80009bfa:	07 70       	ld.ub	r0,--r3
80009bfc:	80 00       	ld.sh	r0,r0[0x0]
80009bfe:	98 44       	ld.sh	r4,r12[0x8]
80009c00:	80 00       	ld.sh	r0,r0[0x0]
80009c02:	98 2a       	ld.sh	r10,r12[0x4]

80009c04 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80009c04:	eb cd 40 80 	pushm	r7,lr
80009c08:	1a 97       	mov	r7,sp
80009c0a:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
80009c0c:	f0 1f 00 26 	mcall	80009ca4 <udd_attach+0xa0>
80009c10:	18 98       	mov	r8,r12
80009c12:	ef 48 ff fc 	st.w	r7[-4],r8

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80009c16:	30 1c       	mov	r12,1
80009c18:	f0 1f 00 24 	mcall	80009ca8 <udd_attach+0xa4>
	otg_unfreeze_clock();
80009c1c:	fe 68 08 00 	mov	r8,-129024
80009c20:	fe 69 08 00 	mov	r9,-129024
80009c24:	72 09       	ld.w	r9,r9[0x0]
80009c26:	af c9       	cbr	r9,0xe
80009c28:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );

	// Authorize attach if Vbus is present
	udd_attach_device();
80009c2a:	fe 68 00 00 	mov	r8,-131072
80009c2e:	fe 69 00 00 	mov	r9,-131072
80009c32:	72 09       	ld.w	r9,r9[0x0]
80009c34:	a9 c9       	cbr	r9,0x8
80009c36:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
80009c38:	fe 68 00 18 	mov	r8,-131048
80009c3c:	30 89       	mov	r9,8
80009c3e:	91 09       	st.w	r8[0x0],r9
	udd_enable_suspend_interrupt();
80009c40:	fe 68 00 18 	mov	r8,-131048
80009c44:	30 19       	mov	r9,1
80009c46:	91 09       	st.w	r8[0x0],r9
	udd_enable_wake_up_interrupt();
80009c48:	fe 68 00 18 	mov	r8,-131048
80009c4c:	31 09       	mov	r9,16
80009c4e:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80009c50:	fe 68 00 18 	mov	r8,-131048
80009c54:	30 49       	mov	r9,4
80009c56:	91 09       	st.w	r8[0x0],r9
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
80009c58:	fe 68 00 18 	mov	r8,-131048
80009c5c:	30 29       	mov	r9,2
80009c5e:	91 09       	st.w	r8[0x0],r9
#endif
	// Reset following interrupts flag
	udd_ack_reset();
80009c60:	fe 68 00 08 	mov	r8,-131064
80009c64:	30 89       	mov	r9,8
80009c66:	91 09       	st.w	r8[0x0],r9
	udd_ack_sof();
80009c68:	fe 68 00 08 	mov	r8,-131064
80009c6c:	30 49       	mov	r9,4
80009c6e:	91 09       	st.w	r8[0x0],r9
	udd_ack_msof();
80009c70:	fe 68 00 08 	mov	r8,-131064
80009c74:	30 29       	mov	r9,2
80009c76:	91 09       	st.w	r8[0x0],r9

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80009c78:	fe 68 00 08 	mov	r8,-131064
80009c7c:	30 19       	mov	r9,1
80009c7e:	91 09       	st.w	r8[0x0],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80009c80:	fe 68 00 08 	mov	r8,-131064
80009c84:	31 09       	mov	r9,16
80009c86:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80009c88:	fe 68 08 00 	mov	r8,-129024
80009c8c:	fe 69 08 00 	mov	r9,-129024
80009c90:	72 09       	ld.w	r9,r9[0x0]
80009c92:	af a9       	sbr	r9,0xe
80009c94:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009c96:	ee fc ff fc 	ld.w	r12,r7[-4]
80009c9a:	f0 1f 00 05 	mcall	80009cac <udd_attach+0xa8>
}
80009c9e:	2f fd       	sub	sp,-4
80009ca0:	e3 cd 80 80 	ldm	sp++,r7,pc
80009ca4:	80 00       	ld.sh	r0,r0[0x0]
80009ca6:	98 0c       	ld.sh	r12,r12[0x0]
80009ca8:	80 00       	ld.sh	r0,r0[0x0]
80009caa:	98 cc       	ld.uh	r12,r12[0x8]
80009cac:	80 00       	ld.sh	r0,r0[0x0]
80009cae:	98 2a       	ld.sh	r10,r12[0x4]

80009cb0 <udd_detach>:


void udd_detach(void)
{
80009cb0:	eb cd 40 80 	pushm	r7,lr
80009cb4:	1a 97       	mov	r7,sp
	otg_unfreeze_clock();
80009cb6:	fe 68 08 00 	mov	r8,-129024
80009cba:	fe 69 08 00 	mov	r9,-129024
80009cbe:	72 09       	ld.w	r9,r9[0x0]
80009cc0:	af c9       	cbr	r9,0xe
80009cc2:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
80009cc4:	fe 68 00 00 	mov	r8,-131072
80009cc8:	fe 69 00 00 	mov	r9,-131072
80009ccc:	72 09       	ld.w	r9,r9[0x0]
80009cce:	a9 a9       	sbr	r9,0x8
80009cd0:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80009cd2:	fe 68 08 00 	mov	r8,-129024
80009cd6:	fe 69 08 00 	mov	r9,-129024
80009cda:	72 09       	ld.w	r9,r9[0x0]
80009cdc:	af a9       	sbr	r9,0xe
80009cde:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80009ce0:	30 0c       	mov	r12,0
80009ce2:	f0 1f 00 03 	mcall	80009cec <udd_detach+0x3c>
}
80009ce6:	e3 cd 80 80 	ldm	sp++,r7,pc
80009cea:	00 00       	add	r0,r0
80009cec:	80 00       	ld.sh	r0,r0[0x0]
80009cee:	98 cc       	ld.uh	r12,r12[0x8]

80009cf0 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
80009cf0:	eb cd 40 80 	pushm	r7,lr
80009cf4:	1a 97       	mov	r7,sp
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
80009cf6:	fe 68 08 04 	mov	r8,-129020
80009cfa:	70 08       	ld.w	r8,r8[0x0]
80009cfc:	e2 18 30 00 	andl	r8,0x3000,COH
80009d00:	ad 88       	lsr	r8,0xc
80009d02:	5f 18       	srne	r8
80009d04:	5c 58       	castu.b	r8
#else
	return false;
#endif
}
80009d06:	10 9c       	mov	r12,r8
80009d08:	e3 cd 80 80 	ldm	sp++,r7,pc

80009d0c <udd_set_address>:


void udd_set_address(uint8_t address)
{
80009d0c:	eb cd 40 80 	pushm	r7,lr
80009d10:	1a 97       	mov	r7,sp
80009d12:	20 1d       	sub	sp,4
80009d14:	18 98       	mov	r8,r12
80009d16:	ef 68 ff fc 	st.b	r7[-4],r8
	udd_disable_address();
80009d1a:	fe 68 00 00 	mov	r8,-131072
80009d1e:	fe 69 00 00 	mov	r9,-131072
80009d22:	72 09       	ld.w	r9,r9[0x0]
80009d24:	a7 d9       	cbr	r9,0x7
80009d26:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80009d28:	fe 68 00 00 	mov	r8,-131072
80009d2c:	fe 69 00 00 	mov	r9,-131072
80009d30:	72 09       	ld.w	r9,r9[0x0]
80009d32:	12 9a       	mov	r10,r9
80009d34:	e0 1a ff 80 	andl	r10,0xff80
80009d38:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009d3c:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
80009d40:	f5 e9 10 09 	or	r9,r10,r9
80009d44:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80009d46:	fe 68 00 00 	mov	r8,-131072
80009d4a:	fe 69 00 00 	mov	r9,-131072
80009d4e:	72 09       	ld.w	r9,r9[0x0]
80009d50:	a7 b9       	sbr	r9,0x7
80009d52:	91 09       	st.w	r8[0x0],r9
}
80009d54:	2f fd       	sub	sp,-4
80009d56:	e3 cd 80 80 	ldm	sp++,r7,pc

80009d5a <udd_getaddress>:


uint8_t udd_getaddress(void)
{
80009d5a:	eb cd 40 80 	pushm	r7,lr
80009d5e:	1a 97       	mov	r7,sp
	return udd_get_configured_address();
80009d60:	fe 68 00 00 	mov	r8,-131072
80009d64:	70 08       	ld.w	r8,r8[0x0]
80009d66:	5c 58       	castu.b	r8
80009d68:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
}
80009d6c:	10 9c       	mov	r12,r8
80009d6e:	e3 cd 80 80 	ldm	sp++,r7,pc

80009d72 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
80009d72:	eb cd 40 80 	pushm	r7,lr
80009d76:	1a 97       	mov	r7,sp
	return udd_frame_number();
80009d78:	fe 68 00 20 	mov	r8,-131040
80009d7c:	70 08       	ld.w	r8,r8[0x0]
80009d7e:	e2 18 3f f8 	andl	r8,0x3ff8,COH
80009d82:	a3 98       	lsr	r8,0x3
80009d84:	5c 88       	casts.h	r8
}
80009d86:	10 9c       	mov	r12,r8
80009d88:	e3 cd 80 80 	ldm	sp++,r7,pc

80009d8c <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
80009d8c:	eb cd 40 80 	pushm	r7,lr
80009d90:	1a 97       	mov	r7,sp
80009d92:	20 2d       	sub	sp,8
80009d94:	ef 4c ff fc 	st.w	r7[-4],r12
80009d98:	16 98       	mov	r8,r11
80009d9a:	ef 58 ff f8 	st.h	r7[-8],r8
	udd_g_ctrlreq.payload = payload;
80009d9e:	48 68       	lddpc	r8,80009db4 <udd_set_setup_payload+0x28>
80009da0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009da4:	91 29       	st.w	r8[0x8],r9
	udd_g_ctrlreq.payload_size = payload_size;
80009da6:	48 49       	lddpc	r9,80009db4 <udd_set_setup_payload+0x28>
80009da8:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80009dac:	b2 68       	st.h	r9[0xc],r8
}
80009dae:	2f ed       	sub	sp,-8
80009db0:	e3 cd 80 80 	ldm	sp++,r7,pc
80009db4:	00 00       	add	r0,r0
80009db6:	0f a8       	ld.ub	r8,r7[0x2]

80009db8 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80009db8:	eb cd 40 80 	pushm	r7,lr
80009dbc:	1a 97       	mov	r7,sp
80009dbe:	20 dd       	sub	sp,52
80009dc0:	16 99       	mov	r9,r11
80009dc2:	14 98       	mov	r8,r10
80009dc4:	18 9a       	mov	r10,r12
80009dc6:	ef 6a ff d4 	st.b	r7[-44],r10
80009dca:	ef 69 ff d0 	st.b	r7[-48],r9
80009dce:	ef 58 ff cc 	st.h	r7[-52],r8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
80009dd2:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009dd6:	a7 98       	lsr	r8,0x7
80009dd8:	ef 68 ff db 	st.b	r7[-37],r8
	ep = ep & USB_EP_ADDR_MASK;
80009ddc:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009de0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009de4:	ef 68 ff d4 	st.b	r7[-44],r8

	if (ep > USB_DEVICE_MAX_EP) {
80009de8:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80009dec:	30 28       	mov	r8,2
80009dee:	f0 09 18 00 	cp.b	r9,r8
80009df2:	e0 88 00 04 	brls	80009dfa <udd_ep_alloc+0x42>
		return false;
80009df6:	30 08       	mov	r8,0
80009df8:	c7 f9       	rjmp	8000a0f6 <udd_ep_alloc+0x33e>
	}
	if (Is_udd_endpoint_enabled(ep)) {
80009dfa:	fe 68 00 00 	mov	r8,-131072
80009dfe:	70 79       	ld.w	r9,r8[0x1c]
80009e00:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009e04:	30 1a       	mov	r10,1
80009e06:	f4 08 09 48 	lsl	r8,r10,r8
80009e0a:	f3 e8 00 08 	and	r8,r9,r8
80009e0e:	c0 30       	breq	80009e14 <udd_ep_alloc+0x5c>
		return false;
80009e10:	30 08       	mov	r8,0
80009e12:	c7 29       	rjmp	8000a0f6 <udd_ep_alloc+0x33e>
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80009e14:	ef 38 ff d0 	ld.ub	r8,r7[-48]
80009e18:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80009e1c:	58 28       	cp.w	r8,2
80009e1e:	c0 d0       	breq	80009e38 <udd_ep_alloc+0x80>
80009e20:	58 38       	cp.w	r8,3
80009e22:	c0 70       	breq	80009e30 <udd_ep_alloc+0x78>
80009e24:	58 18       	cp.w	r8,1
80009e26:	c0 d1       	brne	80009e40 <udd_ep_alloc+0x88>
	case USB_EP_TYPE_ISOCHRONOUS:
		bank = UDD_ISOCHRONOUS_NB_BANK(ep);
80009e28:	30 28       	mov	r8,2
80009e2a:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009e2e:	c0 b8       	rjmp	80009e44 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_INTERRUPT:
		bank = UDD_INTERRUPT_NB_BANK(ep);
80009e30:	30 18       	mov	r8,1
80009e32:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009e36:	c0 78       	rjmp	80009e44 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_BULK:
		bank = UDD_BULK_NB_BANK(ep);
80009e38:	30 28       	mov	r8,2
80009e3a:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009e3e:	c0 38       	rjmp	80009e44 <udd_ep_alloc+0x8c>
	default:
		Assert(false);
		return false;
80009e40:	30 08       	mov	r8,0
80009e42:	c5 a9       	rjmp	8000a0f6 <udd_ep_alloc+0x33e>
	}
	switch(bank) {
80009e44:	ef 38 ff de 	ld.ub	r8,r7[-34]
80009e48:	58 28       	cp.w	r8,2
80009e4a:	c0 90       	breq	80009e5c <udd_ep_alloc+0xa4>
80009e4c:	58 38       	cp.w	r8,3
80009e4e:	c0 b0       	breq	80009e64 <udd_ep_alloc+0xac>
80009e50:	58 18       	cp.w	r8,1
80009e52:	c0 d1       	brne	80009e6c <udd_ep_alloc+0xb4>
	case 1:
		bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
80009e54:	30 08       	mov	r8,0
80009e56:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009e5a:	c0 b8       	rjmp	80009e70 <udd_ep_alloc+0xb8>
	case 2:
		bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
80009e5c:	30 18       	mov	r8,1
80009e5e:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009e62:	c0 78       	rjmp	80009e70 <udd_ep_alloc+0xb8>
	case 3:
		bank = AVR32_USBB_UECFG0_EPBK_TRIPLE;
80009e64:	30 28       	mov	r8,2
80009e66:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009e6a:	c0 38       	rjmp	80009e70 <udd_ep_alloc+0xb8>
	default:
		Assert(false);
		return false;
80009e6c:	30 08       	mov	r8,0
80009e6e:	c4 49       	rjmp	8000a0f6 <udd_ep_alloc+0x33e>
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80009e70:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009e74:	a3 68       	lsl	r8,0x2
80009e76:	e0 38 ff 00 	sub	r8,130816
80009e7a:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80009e7e:	a3 69       	lsl	r9,0x2
80009e80:	e0 39 ff 00 	sub	r9,130816
80009e84:	72 09       	ld.w	r9,r9[0x0]
80009e86:	12 9a       	mov	r10,r9
80009e88:	e0 1a e6 83 	andl	r10,0xe683
80009e8c:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80009e90:	ab 79       	lsl	r9,0xb
80009e92:	12 9b       	mov	r11,r9
80009e94:	e2 1b 18 00 	andl	r11,0x1800,COH
80009e98:	ef 39 ff db 	ld.ub	r9,r7[-37]
80009e9c:	a9 69       	lsl	r9,0x8
80009e9e:	e2 19 01 00 	andl	r9,0x100,COH
80009ea2:	12 4b       	or	r11,r9
80009ea4:	ef 19 ff cc 	ld.uh	r9,r7[-52]
80009ea8:	ef 49 ff f0 	st.w	r7[-16],r9
80009eac:	30 89       	mov	r9,8
80009eae:	ef 49 ff f4 	st.w	r7[-12],r9
80009eb2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009eb6:	ee fc ff f4 	ld.w	r12,r7[-12]
80009eba:	f2 0c 0c 49 	max	r9,r9,r12
80009ebe:	ef 49 ff ec 	st.w	r7[-20],r9
80009ec2:	ee f9 ff ec 	ld.w	r9,r7[-20]
80009ec6:	ef 49 ff e4 	st.w	r7[-28],r9
80009eca:	e0 69 04 00 	mov	r9,1024
80009ece:	ef 49 ff e8 	st.w	r7[-24],r9
80009ed2:	ee f9 ff e4 	ld.w	r9,r7[-28]
80009ed6:	ee fc ff e8 	ld.w	r12,r7[-24]
80009eda:	f2 0c 0d 49 	min	r9,r9,r12
80009ede:	ef 49 ff e0 	st.w	r7[-32],r9
80009ee2:	ee f9 ff e0 	ld.w	r9,r7[-32]
80009ee6:	a1 79       	lsl	r9,0x1
80009ee8:	20 19       	sub	r9,1
80009eea:	f2 09 12 00 	clz	r9,r9
80009eee:	f2 09 11 1c 	rsub	r9,r9,28
80009ef2:	a5 69       	lsl	r9,0x4
80009ef4:	12 4b       	or	r11,r9
80009ef6:	ef 39 ff de 	ld.ub	r9,r7[-34]
80009efa:	a3 69       	lsl	r9,0x2
80009efc:	e2 19 00 0c 	andl	r9,0xc,COH
80009f00:	f7 e9 10 09 	or	r9,r11,r9
80009f04:	e2 19 19 7c 	andl	r9,0x197c,COH
80009f08:	f5 e9 10 09 	or	r9,r10,r9
80009f0c:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80009f0e:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009f12:	30 19       	mov	r9,1
80009f14:	f2 08 09 48 	lsl	r8,r9,r8
80009f18:	ef 58 ff dc 	st.h	r7[-36],r8

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80009f1c:	30 28       	mov	r8,2
80009f1e:	ef 68 ff df 	st.b	r7[-33],r8
80009f22:	c3 a8       	rjmp	80009f96 <udd_ep_alloc+0x1de>
		if (Is_udd_endpoint_enabled(i)) {
80009f24:	fe 68 00 00 	mov	r8,-131072
80009f28:	70 79       	ld.w	r9,r8[0x1c]
80009f2a:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009f2e:	30 1a       	mov	r10,1
80009f30:	f4 08 09 48 	lsl	r8,r10,r8
80009f34:	f3 e8 00 08 	and	r8,r9,r8
80009f38:	c2 a0       	breq	80009f8c <udd_ep_alloc+0x1d4>
			ep_allocated |= 1 << i;
80009f3a:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009f3e:	30 19       	mov	r9,1
80009f40:	f2 08 09 48 	lsl	r8,r9,r8
80009f44:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80009f48:	ef 08 ff dc 	ld.sh	r8,r7[-36]
80009f4c:	f3 e8 10 08 	or	r8,r9,r8
80009f50:	5c 88       	casts.h	r8
80009f52:	ef 58 ff dc 	st.h	r7[-36],r8
			udd_disable_endpoint(i);
80009f56:	fe 68 00 00 	mov	r8,-131072
80009f5a:	fe 69 00 00 	mov	r9,-131072
80009f5e:	72 7a       	ld.w	r10,r9[0x1c]
80009f60:	ef 39 ff df 	ld.ub	r9,r7[-33]
80009f64:	30 1b       	mov	r11,1
80009f66:	f6 09 09 49 	lsl	r9,r11,r9
80009f6a:	5c d9       	com	r9
80009f6c:	f5 e9 00 09 	and	r9,r10,r9
80009f70:	91 79       	st.w	r8[0x1c],r9
			udd_unallocate_memory(i);
80009f72:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009f76:	a3 68       	lsl	r8,0x2
80009f78:	e0 38 ff 00 	sub	r8,130816
80009f7c:	ef 39 ff df 	ld.ub	r9,r7[-33]
80009f80:	a3 69       	lsl	r9,0x2
80009f82:	e0 39 ff 00 	sub	r9,130816
80009f86:	72 09       	ld.w	r9,r9[0x0]
80009f88:	a1 d9       	cbr	r9,0x1
80009f8a:	91 09       	st.w	r8[0x0],r9
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80009f8c:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009f90:	20 18       	sub	r8,1
80009f92:	ef 68 ff df 	st.b	r7[-33],r8
80009f96:	ef 39 ff df 	ld.ub	r9,r7[-33]
80009f9a:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009f9e:	f0 09 18 00 	cp.b	r9,r8
80009fa2:	fe 9b ff c1 	brhi	80009f24 <udd_ep_alloc+0x16c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80009fa6:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009faa:	ef 68 ff df 	st.b	r7[-33],r8
80009fae:	c9 c8       	rjmp	8000a0e6 <udd_ep_alloc+0x32e>
		if (ep_allocated & (1 << i)) {
80009fb0:	ef 19 ff dc 	ld.uh	r9,r7[-36]
80009fb4:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009fb8:	f2 08 08 48 	asr	r8,r9,r8
80009fbc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009fc0:	5c 58       	castu.b	r8
80009fc2:	e0 80 00 8d 	breq	8000a0dc <udd_ep_alloc+0x324>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
80009fc6:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009fca:	f0 c9 00 01 	sub	r9,r8,1
80009fce:	12 98       	mov	r8,r9
80009fd0:	a3 68       	lsl	r8,0x2
80009fd2:	12 08       	add	r8,r9
80009fd4:	a3 68       	lsl	r8,0x2
80009fd6:	10 99       	mov	r9,r8
80009fd8:	4c a8       	lddpc	r8,8000a100 <udd_ep_alloc+0x348>
80009fda:	f2 08 00 08 	add	r8,r9,r8
80009fde:	ef 48 ff f8 	st.w	r7[-8],r8
			bool b_restart = ptr_job->busy;
80009fe2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009fe6:	70 08       	ld.w	r8,r8[0x0]
80009fe8:	e6 18 80 00 	andh	r8,0x8000,COH
80009fec:	5f 18       	srne	r8
80009fee:	ef 68 ff ff 	st.b	r7[-1],r8
			ptr_job->busy = false;
80009ff2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009ff6:	72 08       	ld.w	r8,r9[0x0]
80009ff8:	30 0a       	mov	r10,0
80009ffa:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80009ffe:	93 08       	st.w	r9[0x0],r8

			udd_allocate_memory(i);
8000a000:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a004:	a3 68       	lsl	r8,0x2
8000a006:	e0 38 ff 00 	sub	r8,130816
8000a00a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a00e:	a3 69       	lsl	r9,0x2
8000a010:	e0 39 ff 00 	sub	r9,130816
8000a014:	72 09       	ld.w	r9,r9[0x0]
8000a016:	a1 b9       	sbr	r9,0x1
8000a018:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint(i);
8000a01a:	fe 68 00 00 	mov	r8,-131072
8000a01e:	fe 69 00 00 	mov	r9,-131072
8000a022:	72 7a       	ld.w	r10,r9[0x1c]
8000a024:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a028:	30 1b       	mov	r11,1
8000a02a:	f6 09 09 49 	lsl	r9,r11,r9
8000a02e:	f5 e9 10 09 	or	r9,r10,r9
8000a032:	91 79       	st.w	r8[0x1c],r9
			if (!Is_udd_endpoint_configured(i)) {
8000a034:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a038:	a3 68       	lsl	r8,0x2
8000a03a:	e0 38 fe d0 	sub	r8,130768
8000a03e:	70 08       	ld.w	r8,r8[0x0]
8000a040:	e6 18 00 04 	andh	r8,0x4,COH
8000a044:	c2 61       	brne	8000a090 <udd_ep_alloc+0x2d8>
				if (NULL == ptr_job->call_trans) {
8000a046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a04a:	70 48       	ld.w	r8,r8[0x10]
8000a04c:	58 08       	cp.w	r8,0
8000a04e:	c0 31       	brne	8000a054 <udd_ep_alloc+0x29c>
					return false;
8000a050:	30 08       	mov	r8,0
8000a052:	c5 28       	rjmp	8000a0f6 <udd_ep_alloc+0x33e>
				}
				if (Is_udd_endpoint_in(i)) {
8000a054:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a058:	a3 68       	lsl	r8,0x2
8000a05a:	e0 38 ff 00 	sub	r8,130816
8000a05e:	70 08       	ld.w	r8,r8[0x0]
8000a060:	e2 18 01 00 	andl	r8,0x100,COH
8000a064:	c0 90       	breq	8000a076 <udd_ep_alloc+0x2be>
					i |= USB_EP_DIR_IN;
8000a066:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a06a:	ea 18 ff ff 	orh	r8,0xffff
8000a06e:	e8 18 ff 80 	orl	r8,0xff80
8000a072:	ef 68 ff df 	st.b	r7[-33],r8
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
8000a076:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a07a:	70 48       	ld.w	r8,r8[0x10]
8000a07c:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000a080:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a084:	72 29       	ld.w	r9,r9[0x8]
8000a086:	12 9b       	mov	r11,r9
8000a088:	30 1c       	mov	r12,1
8000a08a:	5d 18       	icall	r8
						ptr_job->buf_size, i);
				return false;
8000a08c:	30 08       	mov	r8,0
8000a08e:	c3 48       	rjmp	8000a0f6 <udd_ep_alloc+0x33e>
			}
			udd_enable_endpoint_bank_autoswitch(i);
8000a090:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a094:	a3 68       	lsl	r8,0x2
8000a096:	e0 38 ff 00 	sub	r8,130816
8000a09a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a09e:	a3 69       	lsl	r9,0x2
8000a0a0:	e0 39 ff 00 	sub	r9,130816
8000a0a4:	72 09       	ld.w	r9,r9[0x0]
8000a0a6:	a9 b9       	sbr	r9,0x9
8000a0a8:	91 09       	st.w	r8[0x0],r9
			if (b_restart) {
8000a0aa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a0ae:	30 08       	mov	r8,0
8000a0b0:	f0 09 18 00 	cp.b	r9,r8
8000a0b4:	c1 40       	breq	8000a0dc <udd_ep_alloc+0x324>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
8000a0b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a0ba:	70 48       	ld.w	r8,r8[0x10]
8000a0bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a0c0:	72 29       	ld.w	r9,r9[0x8]
8000a0c2:	ee fa ff f8 	ld.w	r10,r7[-8]
8000a0c6:	74 1a       	ld.w	r10,r10[0x4]
8000a0c8:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a0cc:	76 0b       	ld.w	r11,r11[0x0]
8000a0ce:	e6 1b 40 00 	andh	r11,0x4000,COH
8000a0d2:	5f 1b       	srne	r11
8000a0d4:	ef 3c ff df 	ld.ub	r12,r7[-33]
8000a0d8:	f0 1f 00 0b 	mcall	8000a104 <udd_ep_alloc+0x34c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000a0dc:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a0e0:	2f f8       	sub	r8,-1
8000a0e2:	ef 68 ff df 	st.b	r7[-33],r8
8000a0e6:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a0ea:	30 28       	mov	r8,2
8000a0ec:	f0 09 18 00 	cp.b	r9,r8
8000a0f0:	fe 98 ff 60 	brls	80009fb0 <udd_ep_alloc+0x1f8>
						ptr_job->buf_size,
						ptr_job->call_trans);
			}
		}
	}
	return true;
8000a0f4:	30 18       	mov	r8,1
}
8000a0f6:	10 9c       	mov	r12,r8
8000a0f8:	2f 3d       	sub	sp,-52
8000a0fa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a0fe:	00 00       	add	r0,r0
8000a100:	00 00       	add	r0,r0
8000a102:	07 7c       	ld.ub	r12,--r3
8000a104:	80 00       	ld.sh	r0,r0[0x0]
8000a106:	a4 28       	st.h	r2[0x4],r8

8000a108 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
8000a108:	eb cd 40 80 	pushm	r7,lr
8000a10c:	1a 97       	mov	r7,sp
8000a10e:	20 2d       	sub	sp,8
8000a110:	18 98       	mov	r8,r12
8000a112:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a116:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a11a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a11e:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
8000a122:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a126:	30 28       	mov	r8,2
8000a128:	f0 09 18 00 	cp.b	r9,r8
8000a12c:	e0 8b 00 33 	brhi	8000a192 <udd_ep_free+0x8a>
		return;
	}
	udd_disable_endpoint(index);
8000a130:	fe 68 00 00 	mov	r8,-131072
8000a134:	fe 69 00 00 	mov	r9,-131072
8000a138:	72 7a       	ld.w	r10,r9[0x1c]
8000a13a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a13e:	30 1b       	mov	r11,1
8000a140:	f6 09 09 49 	lsl	r9,r11,r9
8000a144:	5c d9       	com	r9
8000a146:	f5 e9 00 09 	and	r9,r10,r9
8000a14a:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
8000a14c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a150:	a3 68       	lsl	r8,0x2
8000a152:	e0 38 ff 00 	sub	r8,130816
8000a156:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a15a:	a3 69       	lsl	r9,0x2
8000a15c:	e0 39 ff 00 	sub	r9,130816
8000a160:	72 09       	ld.w	r9,r9[0x0]
8000a162:	a1 d9       	cbr	r9,0x1
8000a164:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
8000a166:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a16a:	10 9c       	mov	r12,r8
8000a16c:	f0 1f 00 0c 	mcall	8000a19c <udd_ep_free+0x94>
	udd_ep_job[index - 1].stall_requested = false;
8000a170:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a174:	f0 c9 00 01 	sub	r9,r8,1
8000a178:	48 aa       	lddpc	r10,8000a1a0 <udd_ep_free+0x98>
8000a17a:	12 98       	mov	r8,r9
8000a17c:	a3 68       	lsl	r8,0x2
8000a17e:	12 08       	add	r8,r9
8000a180:	a3 68       	lsl	r8,0x2
8000a182:	f4 08 00 09 	add	r9,r10,r8
8000a186:	72 08       	ld.w	r8,r9[0x0]
8000a188:	30 0a       	mov	r10,0
8000a18a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a18e:	93 08       	st.w	r9[0x0],r8
8000a190:	c0 28       	rjmp	8000a194 <udd_ep_free+0x8c>
void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index) {
		return;
8000a192:	d7 03       	nop
	}
	udd_disable_endpoint(index);
	udd_unallocate_memory(index);
	udd_ep_abort_job(ep);
	udd_ep_job[index - 1].stall_requested = false;
}
8000a194:	2f ed       	sub	sp,-8
8000a196:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a19a:	00 00       	add	r0,r0
8000a19c:	80 00       	ld.sh	r0,r0[0x0]
8000a19e:	b1 b0       	sbr	r0,0x11
8000a1a0:	00 00       	add	r0,r0
8000a1a2:	07 7c       	ld.ub	r12,--r3

8000a1a4 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
8000a1a4:	eb cd 40 80 	pushm	r7,lr
8000a1a8:	1a 97       	mov	r7,sp
8000a1aa:	20 1d       	sub	sp,4
8000a1ac:	18 98       	mov	r8,r12
8000a1ae:	ef 68 ff fc 	st.b	r7[-4],r8
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
8000a1b2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a1b6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a1ba:	a3 68       	lsl	r8,0x2
8000a1bc:	e0 38 fe 40 	sub	r8,130624
8000a1c0:	70 08       	ld.w	r8,r8[0x0]
8000a1c2:	e6 18 00 08 	andh	r8,0x8,COH
8000a1c6:	5f 18       	srne	r8
8000a1c8:	5c 58       	castu.b	r8
}
8000a1ca:	10 9c       	mov	r12,r8
8000a1cc:	2f fd       	sub	sp,-4
8000a1ce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a1d2:	d7 03       	nop

8000a1d4 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
8000a1d4:	eb cd 40 80 	pushm	r7,lr
8000a1d8:	1a 97       	mov	r7,sp
8000a1da:	20 3d       	sub	sp,12
8000a1dc:	18 98       	mov	r8,r12
8000a1de:	ef 68 ff f4 	st.b	r7[-12],r8
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a1e2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a1e6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a1ea:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
8000a1ee:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a1f2:	30 28       	mov	r8,2
8000a1f4:	f0 09 18 00 	cp.b	r9,r8
8000a1f8:	e0 88 00 04 	brls	8000a200 <udd_ep_set_halt+0x2c>
		return false;
8000a1fc:	30 08       	mov	r8,0
8000a1fe:	c6 f8       	rjmp	8000a2dc <udd_ep_set_halt+0x108>
	}

	ptr_job = &udd_ep_job[index - 1];
8000a200:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a204:	f0 c9 00 01 	sub	r9,r8,1
8000a208:	12 98       	mov	r8,r9
8000a20a:	a3 68       	lsl	r8,0x2
8000a20c:	12 08       	add	r8,r9
8000a20e:	a3 68       	lsl	r8,0x2
8000a210:	10 99       	mov	r9,r8
8000a212:	4b 58       	lddpc	r8,8000a2e4 <udd_ep_set_halt+0x110>
8000a214:	f2 08 00 08 	add	r8,r9,r8
8000a218:	ef 48 ff f8 	st.w	r7[-8],r8

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
8000a21c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a220:	a3 68       	lsl	r8,0x2
8000a222:	e0 38 fe 40 	sub	r8,130624
8000a226:	70 08       	ld.w	r8,r8[0x0]
8000a228:	e6 18 00 08 	andh	r8,0x8,COH
8000a22c:	c0 71       	brne	8000a23a <udd_ep_set_halt+0x66>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
8000a22e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a232:	70 08       	ld.w	r8,r8[0x0]
8000a234:	e6 18 20 00 	andh	r8,0x2000,COH
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
8000a238:	c0 30       	breq	8000a23e <udd_ep_set_halt+0x6a>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
8000a23a:	30 18       	mov	r8,1
8000a23c:	c5 08       	rjmp	8000a2dc <udd_ep_set_halt+0x108>
	}

	if (ptr_job->busy == true) {
8000a23e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a242:	70 08       	ld.w	r8,r8[0x0]
8000a244:	e6 18 80 00 	andh	r8,0x8000,COH
8000a248:	c0 30       	breq	8000a24e <udd_ep_set_halt+0x7a>
		return false; // Job on going, stall impossible
8000a24a:	30 08       	mov	r8,0
8000a24c:	c4 88       	rjmp	8000a2dc <udd_ep_set_halt+0x108>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
8000a24e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a252:	30 08       	mov	r8,0
8000a254:	f0 09 18 00 	cp.b	r9,r8
8000a258:	c2 54       	brge	8000a2a2 <udd_ep_set_halt+0xce>
8000a25a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a25e:	a3 68       	lsl	r8,0x2
8000a260:	e0 38 fe d0 	sub	r8,130768
8000a264:	70 08       	ld.w	r8,r8[0x0]
8000a266:	e2 18 30 00 	andl	r8,0x3000,COH
8000a26a:	ad 88       	lsr	r8,0xc
8000a26c:	c1 b0       	breq	8000a2a2 <udd_ep_set_halt+0xce>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
8000a26e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a272:	72 08       	ld.w	r8,r9[0x0]
8000a274:	30 1a       	mov	r10,1
8000a276:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a27a:	93 08       	st.w	r9[0x0],r8
			udd_enable_bank_interrupt(index);
8000a27c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a280:	a3 68       	lsl	r8,0x2
8000a282:	e0 38 fe 10 	sub	r8,130576
8000a286:	e0 69 10 00 	mov	r9,4096
8000a28a:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(index);
8000a28c:	fe 68 00 00 	mov	r8,-131072
8000a290:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a294:	e0 6a 10 00 	mov	r10,4096
8000a298:	f4 09 09 49 	lsl	r9,r10,r9
8000a29c:	91 69       	st.w	r8[0x18],r9
			return true;
8000a29e:	30 18       	mov	r8,1
8000a2a0:	c1 e8       	rjmp	8000a2dc <udd_ep_set_halt+0x108>
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
8000a2a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2a6:	a3 68       	lsl	r8,0x2
8000a2a8:	e0 38 ff 00 	sub	r8,130816
8000a2ac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a2b0:	a3 69       	lsl	r9,0x2
8000a2b2:	e0 39 ff 00 	sub	r9,130816
8000a2b6:	72 09       	ld.w	r9,r9[0x0]
8000a2b8:	a9 d9       	cbr	r9,0x9
8000a2ba:	91 09       	st.w	r8[0x0],r9
	udd_ack_stall(index);
8000a2bc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2c0:	a3 68       	lsl	r8,0x2
8000a2c2:	e0 38 fe a0 	sub	r8,130720
8000a2c6:	34 09       	mov	r9,64
8000a2c8:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(index);
8000a2ca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2ce:	a3 68       	lsl	r8,0x2
8000a2d0:	e0 38 fe 10 	sub	r8,130576
8000a2d4:	e8 69 00 00 	mov	r9,524288
8000a2d8:	91 09       	st.w	r8[0x0],r9
	return true;
8000a2da:	30 18       	mov	r8,1
}
8000a2dc:	10 9c       	mov	r12,r8
8000a2de:	2f dd       	sub	sp,-12
8000a2e0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a2e4:	00 00       	add	r0,r0
8000a2e6:	07 7c       	ld.ub	r12,--r3

8000a2e8 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
8000a2e8:	eb cd 40 80 	pushm	r7,lr
8000a2ec:	1a 97       	mov	r7,sp
8000a2ee:	20 3d       	sub	sp,12
8000a2f0:	18 98       	mov	r8,r12
8000a2f2:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_stall_cleared = false;
8000a2f6:	30 08       	mov	r8,0
8000a2f8:	ef 68 ff fb 	st.b	r7[-5],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000a2fc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a300:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a304:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep)
8000a308:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a30c:	30 28       	mov	r8,2
8000a30e:	f0 09 18 00 	cp.b	r9,r8
8000a312:	e0 88 00 04 	brls	8000a31a <udd_ep_clear_halt+0x32>
		return false;
8000a316:	30 08       	mov	r8,0
8000a318:	c8 18       	rjmp	8000a41a <udd_ep_clear_halt+0x132>
	ptr_job = &udd_ep_job[ep - 1];
8000a31a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a31e:	f0 c9 00 01 	sub	r9,r8,1
8000a322:	12 98       	mov	r8,r9
8000a324:	a3 68       	lsl	r8,0x2
8000a326:	12 08       	add	r8,r9
8000a328:	a3 68       	lsl	r8,0x2
8000a32a:	10 99       	mov	r9,r8
8000a32c:	4b e8       	lddpc	r8,8000a424 <udd_ep_clear_halt+0x13c>
8000a32e:	f2 08 00 08 	add	r8,r9,r8
8000a332:	ef 48 ff fc 	st.w	r7[-4],r8

	if (ptr_job->stall_requested) {
8000a336:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a33a:	70 08       	ld.w	r8,r8[0x0]
8000a33c:	e6 18 20 00 	andh	r8,0x2000,COH
8000a340:	c1 c0       	breq	8000a378 <udd_ep_clear_halt+0x90>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
8000a342:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a346:	72 08       	ld.w	r8,r9[0x0]
8000a348:	30 0a       	mov	r10,0
8000a34a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a34e:	93 08       	st.w	r9[0x0],r8
		udd_disable_bank_interrupt(ep);
8000a350:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a354:	a3 68       	lsl	r8,0x2
8000a356:	e0 38 fd e0 	sub	r8,130528
8000a35a:	e0 69 10 00 	mov	r9,4096
8000a35e:	91 09       	st.w	r8[0x0],r9
		udd_disable_endpoint_interrupt(ep);
8000a360:	fe 68 00 00 	mov	r8,-131072
8000a364:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a368:	e0 6a 10 00 	mov	r10,4096
8000a36c:	f4 09 09 49 	lsl	r9,r10,r9
8000a370:	91 59       	st.w	r8[0x14],r9
		b_stall_cleared = true;
8000a372:	30 18       	mov	r8,1
8000a374:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
8000a378:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a37c:	a3 68       	lsl	r8,0x2
8000a37e:	e0 38 fe 40 	sub	r8,130624
8000a382:	70 08       	ld.w	r8,r8[0x0]
8000a384:	e6 18 00 08 	andh	r8,0x8,COH
8000a388:	c3 10       	breq	8000a3ea <udd_ep_clear_halt+0x102>
		if (Is_udd_stall(ep)) {
8000a38a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a38e:	a3 68       	lsl	r8,0x2
8000a390:	e0 38 fe d0 	sub	r8,130768
8000a394:	70 08       	ld.w	r8,r8[0x0]
8000a396:	e2 18 00 40 	andl	r8,0x40,COH
8000a39a:	c1 00       	breq	8000a3ba <udd_ep_clear_halt+0xd2>
			udd_ack_stall(ep);
8000a39c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a3a0:	a3 68       	lsl	r8,0x2
8000a3a2:	e0 38 fe a0 	sub	r8,130720
8000a3a6:	34 09       	mov	r9,64
8000a3a8:	91 09       	st.w	r8[0x0],r9
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
8000a3aa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a3ae:	a3 68       	lsl	r8,0x2
8000a3b0:	e0 38 fe 10 	sub	r8,130576
8000a3b4:	e4 69 00 00 	mov	r9,262144
8000a3b8:	91 09       	st.w	r8[0x0],r9
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
8000a3ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a3be:	a3 68       	lsl	r8,0x2
8000a3c0:	e0 38 fd e0 	sub	r8,130528
8000a3c4:	e8 69 00 00 	mov	r9,524288
8000a3c8:	91 09       	st.w	r8[0x0],r9
		udd_enable_endpoint_bank_autoswitch(ep);
8000a3ca:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a3ce:	a3 68       	lsl	r8,0x2
8000a3d0:	e0 38 ff 00 	sub	r8,130816
8000a3d4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a3d8:	a3 69       	lsl	r9,0x2
8000a3da:	e0 39 ff 00 	sub	r9,130816
8000a3de:	72 09       	ld.w	r9,r9[0x0]
8000a3e0:	a9 b9       	sbr	r9,0x9
8000a3e2:	91 09       	st.w	r8[0x0],r9
		b_stall_cleared = true;
8000a3e4:	30 18       	mov	r8,1
8000a3e6:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (b_stall_cleared) {
8000a3ea:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000a3ee:	30 08       	mov	r8,0
8000a3f0:	f0 09 18 00 	cp.b	r9,r8
8000a3f4:	c1 20       	breq	8000a418 <udd_ep_clear_halt+0x130>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
8000a3f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3fa:	70 08       	ld.w	r8,r8[0x0]
8000a3fc:	e6 18 80 00 	andh	r8,0x8000,COH
8000a400:	c0 c0       	breq	8000a418 <udd_ep_clear_halt+0x130>
			ptr_job->busy = false;
8000a402:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a406:	72 08       	ld.w	r8,r9[0x0]
8000a408:	30 0a       	mov	r10,0
8000a40a:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a40e:	93 08       	st.w	r9[0x0],r8
			ptr_job->call_nohalt();
8000a410:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a414:	70 48       	ld.w	r8,r8[0x10]
8000a416:	5d 18       	icall	r8
		}
	}
	return true;
8000a418:	30 18       	mov	r8,1
}
8000a41a:	10 9c       	mov	r12,r8
8000a41c:	2f dd       	sub	sp,-12
8000a41e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a422:	00 00       	add	r0,r0
8000a424:	00 00       	add	r0,r0
8000a426:	07 7c       	ld.ub	r12,--r3

8000a428 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
8000a428:	eb cd 40 80 	pushm	r7,lr
8000a42c:	1a 97       	mov	r7,sp
8000a42e:	20 7d       	sub	sp,28
8000a430:	ef 4a ff ec 	st.w	r7[-20],r10
8000a434:	ef 49 ff e8 	st.w	r7[-24],r9
8000a438:	ef 48 ff e4 	st.w	r7[-28],r8
8000a43c:	18 98       	mov	r8,r12
8000a43e:	ef 68 ff f4 	st.b	r7[-12],r8
8000a442:	16 98       	mov	r8,r11
8000a444:	ef 68 ff f0 	st.b	r7[-16],r8
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
8000a448:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a44c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a450:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep) {
8000a454:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a458:	30 28       	mov	r8,2
8000a45a:	f0 09 18 00 	cp.b	r9,r8
8000a45e:	e0 88 00 04 	brls	8000a466 <udd_ep_run+0x3e>
		return false;
8000a462:	30 08       	mov	r8,0
8000a464:	c6 88       	rjmp	8000a534 <udd_ep_run+0x10c>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000a466:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a46a:	f0 c9 00 01 	sub	r9,r8,1
8000a46e:	12 98       	mov	r8,r9
8000a470:	a3 68       	lsl	r8,0x2
8000a472:	12 08       	add	r8,r9
8000a474:	a3 68       	lsl	r8,0x2
8000a476:	10 99       	mov	r9,r8
8000a478:	4b 18       	lddpc	r8,8000a53c <udd_ep_run+0x114>
8000a47a:	f2 08 00 08 	add	r8,r9,r8
8000a47e:	ef 48 ff f8 	st.w	r7[-8],r8

	if ((!Is_udd_endpoint_enabled(ep))
8000a482:	fe 68 00 00 	mov	r8,-131072
8000a486:	70 79       	ld.w	r9,r8[0x1c]
8000a488:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a48c:	30 1a       	mov	r10,1
8000a48e:	f4 08 09 48 	lsl	r8,r10,r8
8000a492:	f3 e8 00 08 	and	r8,r9,r8
8000a496:	c1 00       	breq	8000a4b6 <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
8000a498:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a49c:	a3 68       	lsl	r8,0x2
8000a49e:	e0 38 fe 40 	sub	r8,130624
8000a4a2:	70 08       	ld.w	r8,r8[0x0]
8000a4a4:	e6 18 00 08 	andh	r8,0x8,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000a4a8:	c0 71       	brne	8000a4b6 <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
8000a4aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4ae:	70 08       	ld.w	r8,r8[0x0]
8000a4b0:	e6 18 20 00 	andh	r8,0x2000,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000a4b4:	c0 30       	breq	8000a4ba <udd_ep_run+0x92>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
8000a4b6:	30 08       	mov	r8,0
8000a4b8:	c3 e8       	rjmp	8000a534 <udd_ep_run+0x10c>
	}

	flags = cpu_irq_save();
8000a4ba:	f0 1f 00 22 	mcall	8000a540 <udd_ep_run+0x118>
8000a4be:	18 98       	mov	r8,r12
8000a4c0:	ef 48 ff fc 	st.w	r7[-4],r8
	if (ptr_job->busy == true) {
8000a4c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4c8:	70 08       	ld.w	r8,r8[0x0]
8000a4ca:	e6 18 80 00 	andh	r8,0x8000,COH
8000a4ce:	c0 70       	breq	8000a4dc <udd_ep_run+0xb4>
		cpu_irq_restore(flags);
8000a4d0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a4d4:	f0 1f 00 1c 	mcall	8000a544 <udd_ep_run+0x11c>
		return false; // Job already on going
8000a4d8:	30 08       	mov	r8,0
8000a4da:	c2 d8       	rjmp	8000a534 <udd_ep_run+0x10c>
	}
	ptr_job->busy = true;
8000a4dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a4e0:	72 08       	ld.w	r8,r9[0x0]
8000a4e2:	30 1a       	mov	r10,1
8000a4e4:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a4e8:	93 08       	st.w	r9[0x0],r8
	cpu_irq_restore(flags);
8000a4ea:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a4ee:	f0 1f 00 16 	mcall	8000a544 <udd_ep_run+0x11c>

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
8000a4f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4f6:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a4fa:	91 19       	st.w	r8[0x4],r9
	ptr_job->buf_size = buf_size;
8000a4fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a500:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a504:	91 29       	st.w	r8[0x8],r9
	ptr_job->nb_trans = 0;
8000a506:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a50a:	30 09       	mov	r9,0
8000a50c:	91 39       	st.w	r8[0xc],r9
	ptr_job->call_trans = callback;
8000a50e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a512:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a516:	91 49       	st.w	r8[0x10],r9
	ptr_job->b_shortpacket = b_shortpacket;
8000a518:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a51c:	72 08       	ld.w	r8,r9[0x0]
8000a51e:	ef 3a ff f0 	ld.ub	r10,r7[-16]
8000a522:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000a526:	93 08       	st.w	r9[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
8000a528:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a52c:	10 9c       	mov	r12,r8
8000a52e:	f0 1f 00 07 	mcall	8000a548 <udd_ep_run+0x120>
	return true;
8000a532:	30 18       	mov	r8,1
}
8000a534:	10 9c       	mov	r12,r8
8000a536:	2f 9d       	sub	sp,-28
8000a538:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a53c:	00 00       	add	r0,r0
8000a53e:	07 7c       	ld.ub	r12,--r3
8000a540:	80 00       	ld.sh	r0,r0[0x0]
8000a542:	98 0c       	ld.sh	r12,r12[0x0]
8000a544:	80 00       	ld.sh	r0,r0[0x0]
8000a546:	98 2a       	ld.sh	r10,r12[0x4]
8000a548:	80 00       	ld.sh	r0,r0[0x0]
8000a54a:	b2 80       	st.b	r9[0x0],r0

8000a54c <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
8000a54c:	eb cd 40 80 	pushm	r7,lr
8000a550:	1a 97       	mov	r7,sp
8000a552:	20 2d       	sub	sp,8
8000a554:	18 98       	mov	r8,r12
8000a556:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a55a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a55e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a562:	ef 68 ff ff 	st.b	r7[-1],r8

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
8000a566:	fe 68 00 00 	mov	r8,-131072
8000a56a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a56e:	20 19       	sub	r9,1
8000a570:	fc 1a 02 00 	movh	r10,0x200
8000a574:	f4 09 09 49 	lsl	r9,r10,r9
8000a578:	91 59       	st.w	r8[0x14],r9
	udd_endpoint_dma_set_control(index, 0);
8000a57a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a57e:	a5 68       	lsl	r8,0x4
8000a580:	e0 38 fd 00 	sub	r8,130304
8000a584:	30 09       	mov	r9,0
8000a586:	91 29       	st.w	r8[0x8],r9
	// Kill banks
	udd_disable_endpoint_interrupt(index);
8000a588:	fe 68 00 00 	mov	r8,-131072
8000a58c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a590:	e0 6a 10 00 	mov	r10,4096
8000a594:	f4 09 09 49 	lsl	r9,r10,r9
8000a598:	91 59       	st.w	r8[0x14],r9
	while (udd_nb_busy_bank(index)) {
8000a59a:	c1 28       	rjmp	8000a5be <udd_ep_abort+0x72>
		udd_kill_last_in_bank(index);
8000a59c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a5a0:	a3 68       	lsl	r8,0x2
8000a5a2:	e0 38 fe 10 	sub	r8,130576
8000a5a6:	e0 69 20 00 	mov	r9,8192
8000a5aa:	91 09       	st.w	r8[0x0],r9
		while(Is_udd_killing_last_in_bank(index));
8000a5ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a5b0:	a3 68       	lsl	r8,0x2
8000a5b2:	e0 38 fe 40 	sub	r8,130624
8000a5b6:	70 08       	ld.w	r8,r8[0x0]
8000a5b8:	e2 18 20 00 	andl	r8,0x2000,COH
8000a5bc:	cf 81       	brne	8000a5ac <udd_ep_abort+0x60>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
8000a5be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a5c2:	a3 68       	lsl	r8,0x2
8000a5c4:	e0 38 fe d0 	sub	r8,130768
8000a5c8:	70 08       	ld.w	r8,r8[0x0]
8000a5ca:	e2 18 30 00 	andl	r8,0x3000,COH
8000a5ce:	ad 88       	lsr	r8,0xc
8000a5d0:	ce 61       	brne	8000a59c <udd_ep_abort+0x50>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
8000a5d2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a5d6:	10 9c       	mov	r12,r8
8000a5d8:	f0 1f 00 03 	mcall	8000a5e4 <udd_ep_abort+0x98>
}
8000a5dc:	2f ed       	sub	sp,-8
8000a5de:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a5e2:	00 00       	add	r0,r0
8000a5e4:	80 00       	ld.sh	r0,r0[0x0]
8000a5e6:	b1 b0       	sbr	r0,0x11

8000a5e8 <udd_ep_wait_stall_clear>:


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
8000a5e8:	eb cd 40 80 	pushm	r7,lr
8000a5ec:	1a 97       	mov	r7,sp
8000a5ee:	20 3d       	sub	sp,12
8000a5f0:	18 98       	mov	r8,r12
8000a5f2:	ef 4b ff f4 	st.w	r7[-12],r11
8000a5f6:	ef 68 ff f8 	st.b	r7[-8],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000a5fa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a5fe:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a602:	ef 68 ff f8 	st.b	r7[-8],r8
	if (USB_DEVICE_MAX_EP < ep) {
8000a606:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000a60a:	30 28       	mov	r8,2
8000a60c:	f0 09 18 00 	cp.b	r9,r8
8000a610:	e0 88 00 04 	brls	8000a618 <udd_ep_wait_stall_clear+0x30>
		return false;
8000a614:	30 08       	mov	r8,0
8000a616:	c4 48       	rjmp	8000a69e <udd_ep_wait_stall_clear+0xb6>
	}

	ptr_job = &udd_ep_job[ep - 1];
8000a618:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a61c:	f0 c9 00 01 	sub	r9,r8,1
8000a620:	12 98       	mov	r8,r9
8000a622:	a3 68       	lsl	r8,0x2
8000a624:	12 08       	add	r8,r9
8000a626:	a3 68       	lsl	r8,0x2
8000a628:	10 99       	mov	r9,r8
8000a62a:	4a 08       	lddpc	r8,8000a6a8 <udd_ep_wait_stall_clear+0xc0>
8000a62c:	f2 08 00 08 	add	r8,r9,r8
8000a630:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!Is_udd_endpoint_enabled(ep)) {
8000a634:	fe 68 00 00 	mov	r8,-131072
8000a638:	70 79       	ld.w	r9,r8[0x1c]
8000a63a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a63e:	30 1a       	mov	r10,1
8000a640:	f4 08 09 48 	lsl	r8,r10,r8
8000a644:	f3 e8 00 08 	and	r8,r9,r8
8000a648:	c0 31       	brne	8000a64e <udd_ep_wait_stall_clear+0x66>
		return false; // Endpoint not enabled
8000a64a:	30 08       	mov	r8,0
8000a64c:	c2 98       	rjmp	8000a69e <udd_ep_wait_stall_clear+0xb6>
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
8000a64e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a652:	70 08       	ld.w	r8,r8[0x0]
8000a654:	e6 18 80 00 	andh	r8,0x8000,COH
8000a658:	c0 30       	breq	8000a65e <udd_ep_wait_stall_clear+0x76>
		return false; // Job already on going
8000a65a:	30 08       	mov	r8,0
8000a65c:	c2 18       	rjmp	8000a69e <udd_ep_wait_stall_clear+0xb6>
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000a65e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a662:	a3 68       	lsl	r8,0x2
8000a664:	e0 38 fe 40 	sub	r8,130624
8000a668:	70 08       	ld.w	r8,r8[0x0]
8000a66a:	e6 18 00 08 	andh	r8,0x8,COH
8000a66e:	c0 71       	brne	8000a67c <udd_ep_wait_stall_clear+0x94>
			|| ptr_job->stall_requested) {
8000a670:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a674:	70 08       	ld.w	r8,r8[0x0]
8000a676:	e6 18 20 00 	andh	r8,0x2000,COH
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000a67a:	c0 e0       	breq	8000a696 <udd_ep_wait_stall_clear+0xae>
			|| ptr_job->stall_requested) {
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
8000a67c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a680:	72 08       	ld.w	r8,r9[0x0]
8000a682:	30 1a       	mov	r10,1
8000a684:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a688:	93 08       	st.w	r9[0x0],r8
		ptr_job->call_nohalt = callback;
8000a68a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a68e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a692:	91 49       	st.w	r8[0x10],r9
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000a694:	c0 48       	rjmp	8000a69c <udd_ep_wait_stall_clear+0xb4>
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
8000a696:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a69a:	5d 18       	icall	r8
	}
	return true;
8000a69c:	30 18       	mov	r8,1
}
8000a69e:	10 9c       	mov	r12,r8
8000a6a0:	2f dd       	sub	sp,-12
8000a6a2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a6a6:	00 00       	add	r0,r0
8000a6a8:	00 00       	add	r0,r0
8000a6aa:	07 7c       	ld.ub	r12,--r3

8000a6ac <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
8000a6ac:	eb cd 40 80 	pushm	r7,lr
8000a6b0:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000a6b2:	fe 68 00 00 	mov	r8,-131072
8000a6b6:	fe 69 00 00 	mov	r9,-131072
8000a6ba:	72 09       	ld.w	r9,r9[0x0]
8000a6bc:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a6c0:	ab b9       	sbr	r9,0xb
8000a6c2:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_j();
8000a6c4:	fe 68 00 00 	mov	r8,-131072
8000a6c8:	fe 69 00 00 	mov	r9,-131072
8000a6cc:	72 09       	ld.w	r9,r9[0x0]
8000a6ce:	ad b9       	sbr	r9,0xd
8000a6d0:	91 09       	st.w	r8[0x0],r9
}
8000a6d2:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a6d6 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
8000a6d6:	eb cd 40 80 	pushm	r7,lr
8000a6da:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000a6dc:	fe 68 00 00 	mov	r8,-131072
8000a6e0:	fe 69 00 00 	mov	r9,-131072
8000a6e4:	72 09       	ld.w	r9,r9[0x0]
8000a6e6:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a6ea:	ab b9       	sbr	r9,0xb
8000a6ec:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_k();
8000a6ee:	fe 68 00 00 	mov	r8,-131072
8000a6f2:	fe 69 00 00 	mov	r9,-131072
8000a6f6:	72 09       	ld.w	r9,r9[0x0]
8000a6f8:	af a9       	sbr	r9,0xe
8000a6fa:	91 09       	st.w	r8[0x0],r9
}
8000a6fc:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a700 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
8000a700:	eb cd 40 80 	pushm	r7,lr
8000a704:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000a706:	fe 68 00 00 	mov	r8,-131072
8000a70a:	fe 69 00 00 	mov	r9,-131072
8000a70e:	72 09       	ld.w	r9,r9[0x0]
8000a710:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a714:	ab b9       	sbr	r9,0xb
8000a716:	91 09       	st.w	r8[0x0],r9
}
8000a718:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a71c <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
8000a71c:	eb cd 40 80 	pushm	r7,lr
8000a720:	1a 97       	mov	r7,sp
8000a722:	21 7d       	sub	sp,92
				0xFF, 0xFF,
		// S, 111111S, {0111111S * 7}
		0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD,
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};
8000a724:	4d c9       	lddpc	r9,8000a894 <udd_test_mode_packet+0x178>
8000a726:	ee c8 00 5c 	sub	r8,r7,92
8000a72a:	f2 ea 00 00 	ld.d	r10,r9[0]
8000a72e:	f0 eb 00 00 	st.d	r8[0],r10
8000a732:	f2 ea 00 08 	ld.d	r10,r9[8]
8000a736:	f0 eb 00 08 	st.d	r8[8],r10
8000a73a:	f2 ea 00 10 	ld.d	r10,r9[16]
8000a73e:	f0 eb 00 10 	st.d	r8[16],r10
8000a742:	f2 ea 00 18 	ld.d	r10,r9[24]
8000a746:	f0 eb 00 18 	st.d	r8[24],r10
8000a74a:	f2 ea 00 20 	ld.d	r10,r9[32]
8000a74e:	f0 eb 00 20 	st.d	r8[32],r10
8000a752:	f2 ea 00 28 	ld.d	r10,r9[40]
8000a756:	f0 eb 00 28 	st.d	r8[40],r10
8000a75a:	72 ca       	ld.w	r10,r9[0x30]
8000a75c:	91 ca       	st.w	r8[0x30],r10
8000a75e:	f3 39 00 34 	ld.ub	r9,r9[52]
8000a762:	f1 69 00 34 	st.b	r8[52],r9

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
8000a766:	fe 68 00 00 	mov	r8,-131072
8000a76a:	fe 69 00 00 	mov	r9,-131072
8000a76e:	72 79       	ld.w	r9,r9[0x1c]
8000a770:	a1 c9       	cbr	r9,0x0
8000a772:	91 79       	st.w	r8[0x1c],r9
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
8000a774:	fe 68 01 00 	mov	r8,-130816
8000a778:	fe 69 01 00 	mov	r9,-130816
8000a77c:	72 09       	ld.w	r9,r9[0x0]
8000a77e:	12 9a       	mov	r10,r9
8000a780:	e0 1a e6 83 	andl	r10,0xe683
8000a784:	34 09       	mov	r9,64
8000a786:	ef 49 ff f8 	st.w	r7[-8],r9
8000a78a:	30 89       	mov	r9,8
8000a78c:	ef 49 ff fc 	st.w	r7[-4],r9
8000a790:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a794:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a798:	f2 0b 0c 49 	max	r9,r9,r11
8000a79c:	ef 49 ff f4 	st.w	r7[-12],r9
8000a7a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a7a4:	ef 49 ff ec 	st.w	r7[-20],r9
8000a7a8:	e0 69 04 00 	mov	r9,1024
8000a7ac:	ef 49 ff f0 	st.w	r7[-16],r9
8000a7b0:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a7b4:	ee fb ff f0 	ld.w	r11,r7[-16]
8000a7b8:	f2 0b 0d 49 	min	r9,r9,r11
8000a7bc:	ef 49 ff e8 	st.w	r7[-24],r9
8000a7c0:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a7c4:	a1 79       	lsl	r9,0x1
8000a7c6:	20 19       	sub	r9,1
8000a7c8:	f2 09 12 00 	clz	r9,r9
8000a7cc:	f2 09 11 1c 	rsub	r9,r9,28
8000a7d0:	a5 69       	lsl	r9,0x4
8000a7d2:	e2 19 08 7c 	andl	r9,0x87c,COH
8000a7d6:	f5 e9 10 09 	or	r9,r10,r9
8000a7da:	e8 19 11 00 	orl	r9,0x1100
8000a7de:	91 09       	st.w	r8[0x0],r9
			64, AVR32_USBB_UECFG0_EPBK_SINGLE);
	udd_allocate_memory(0);
8000a7e0:	fe 68 01 00 	mov	r8,-130816
8000a7e4:	fe 69 01 00 	mov	r9,-130816
8000a7e8:	72 09       	ld.w	r9,r9[0x0]
8000a7ea:	a1 b9       	sbr	r9,0x1
8000a7ec:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
8000a7ee:	fe 68 00 00 	mov	r8,-131072
8000a7f2:	fe 69 00 00 	mov	r9,-131072
8000a7f6:	72 79       	ld.w	r9,r9[0x1c]
8000a7f8:	a1 a9       	sbr	r9,0x0
8000a7fa:	91 79       	st.w	r8[0x1c],r9

	udd_enable_hs_test_mode();
8000a7fc:	fe 68 00 00 	mov	r8,-131072
8000a800:	fe 69 00 00 	mov	r9,-131072
8000a804:	72 09       	ld.w	r9,r9[0x0]
8000a806:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a80a:	ab b9       	sbr	r9,0xb
8000a80c:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_packet();
8000a80e:	fe 68 00 00 	mov	r8,-131072
8000a812:	fe 69 00 00 	mov	r9,-131072
8000a816:	72 09       	ld.w	r9,r9[0x0]
8000a818:	af b9       	sbr	r9,0xf
8000a81a:	91 09       	st.w	r8[0x0],r9

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000a81c:	fc 18 e0 00 	movh	r8,0xe000
8000a820:	ef 48 ff dc 	st.w	r7[-36],r8
	ptr_src = test_packet;
8000a824:	ee c8 00 5c 	sub	r8,r7,92
8000a828:	ef 48 ff e0 	st.w	r7[-32],r8

	for (i = 0; i < sizeof(test_packet); i++) {
8000a82c:	30 08       	mov	r8,0
8000a82e:	ef 68 ff db 	st.b	r7[-37],r8
8000a832:	c1 68       	rjmp	8000a85e <udd_test_mode_packet+0x142>
		*ptr_dest++ = *ptr_src++;
8000a834:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a838:	11 88       	ld.ub	r8,r8[0x0]
8000a83a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000a83e:	b2 88       	st.b	r9[0x0],r8
8000a840:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a844:	2f f8       	sub	r8,-1
8000a846:	ef 48 ff dc 	st.w	r7[-36],r8
8000a84a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a84e:	2f f8       	sub	r8,-1
8000a850:	ef 48 ff e0 	st.w	r7[-32],r8

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
8000a854:	ef 38 ff db 	ld.ub	r8,r7[-37]
8000a858:	2f f8       	sub	r8,-1
8000a85a:	ef 68 ff db 	st.b	r7[-37],r8
8000a85e:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000a862:	33 48       	mov	r8,52
8000a864:	f0 09 18 00 	cp.b	r9,r8
8000a868:	fe 98 ff e6 	brls	8000a834 <udd_test_mode_packet+0x118>
		*ptr_dest++ = *ptr_src++;
	}
	flags = cpu_irq_save();
8000a86c:	f0 1f 00 0b 	mcall	8000a898 <udd_test_mode_packet+0x17c>
8000a870:	18 98       	mov	r8,r12
8000a872:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_in_send_interrupt(0);
8000a876:	fe 68 01 f0 	mov	r8,-130576
8000a87a:	30 19       	mov	r9,1
8000a87c:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000a87e:	ee fc ff e4 	ld.w	r12,r7[-28]
8000a882:	f0 1f 00 07 	mcall	8000a89c <udd_test_mode_packet+0x180>

	udd_ack_in_send(0);
8000a886:	fe 68 01 60 	mov	r8,-130720
8000a88a:	30 19       	mov	r9,1
8000a88c:	91 09       	st.w	r8[0x0],r9
}
8000a88e:	2e 9d       	sub	sp,-92
8000a890:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a894:	80 00       	ld.sh	r0,r0[0x0]
8000a896:	ec e4 80 00 	ld.d	r4,r6[-32768]
8000a89a:	98 0c       	ld.sh	r12,r12[0x0]
8000a89c:	80 00       	ld.sh	r0,r0[0x0]
8000a89e:	98 2a       	ld.sh	r10,r12[0x4]

8000a8a0 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
8000a8a0:	eb cd 40 80 	pushm	r7,lr
8000a8a4:	1a 97       	mov	r7,sp
8000a8a6:	20 7d       	sub	sp,28
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
8000a8a8:	fe 68 00 00 	mov	r8,-131072
8000a8ac:	fe 69 00 00 	mov	r9,-131072
8000a8b0:	72 09       	ld.w	r9,r9[0x0]
8000a8b2:	e0 19 ff 80 	andl	r9,0xff80
8000a8b6:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000a8b8:	fe 68 00 00 	mov	r8,-131072
8000a8bc:	fe 69 00 00 	mov	r9,-131072
8000a8c0:	72 09       	ld.w	r9,r9[0x0]
8000a8c2:	a7 b9       	sbr	r9,0x7
8000a8c4:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
8000a8c6:	fe 68 01 00 	mov	r8,-130816
8000a8ca:	fe 69 01 00 	mov	r9,-130816
8000a8ce:	72 09       	ld.w	r9,r9[0x0]
8000a8d0:	12 9a       	mov	r10,r9
8000a8d2:	e0 1a e6 83 	andl	r10,0xe683
8000a8d6:	34 09       	mov	r9,64
8000a8d8:	ef 49 ff f8 	st.w	r7[-8],r9
8000a8dc:	30 89       	mov	r9,8
8000a8de:	ef 49 ff fc 	st.w	r7[-4],r9
8000a8e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a8e6:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a8ea:	f2 0b 0c 49 	max	r9,r9,r11
8000a8ee:	ef 49 ff f4 	st.w	r7[-12],r9
8000a8f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a8f6:	ef 49 ff ec 	st.w	r7[-20],r9
8000a8fa:	e0 69 04 00 	mov	r9,1024
8000a8fe:	ef 49 ff f0 	st.w	r7[-16],r9
8000a902:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a906:	ee fb ff f0 	ld.w	r11,r7[-16]
8000a90a:	f2 0b 0d 49 	min	r9,r9,r11
8000a90e:	ef 49 ff e8 	st.w	r7[-24],r9
8000a912:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a916:	a1 79       	lsl	r9,0x1
8000a918:	20 19       	sub	r9,1
8000a91a:	f2 09 12 00 	clz	r9,r9
8000a91e:	f2 09 11 1c 	rsub	r9,r9,28
8000a922:	a5 69       	lsl	r9,0x4
8000a924:	e2 19 19 7c 	andl	r9,0x197c,COH
8000a928:	f5 e9 10 09 	or	r9,r10,r9
8000a92c:	91 09       	st.w	r8[0x0],r9
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
8000a92e:	fe 68 01 00 	mov	r8,-130816
8000a932:	fe 69 01 00 	mov	r9,-130816
8000a936:	72 09       	ld.w	r9,r9[0x0]
8000a938:	a1 b9       	sbr	r9,0x1
8000a93a:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
8000a93c:	fe 68 00 00 	mov	r8,-131072
8000a940:	fe 69 00 00 	mov	r9,-131072
8000a944:	72 79       	ld.w	r9,r9[0x1c]
8000a946:	a1 a9       	sbr	r9,0x0
8000a948:	91 79       	st.w	r8[0x1c],r9
	flags = cpu_irq_save();
8000a94a:	f0 1f 00 0d 	mcall	8000a97c <udd_reset_ep_ctrl+0xdc>
8000a94e:	18 98       	mov	r8,r12
8000a950:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_setup_received_interrupt(0);
8000a954:	fe 68 01 f0 	mov	r8,-130576
8000a958:	30 49       	mov	r9,4
8000a95a:	91 09       	st.w	r8[0x0],r9
	udd_enable_out_received_interrupt(0);
8000a95c:	fe 68 01 f0 	mov	r8,-130576
8000a960:	30 29       	mov	r9,2
8000a962:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint_interrupt(0);
8000a964:	fe 68 00 00 	mov	r8,-131072
8000a968:	e0 69 10 00 	mov	r9,4096
8000a96c:	91 69       	st.w	r8[0x18],r9
	cpu_irq_restore(flags);
8000a96e:	ee fc ff e4 	ld.w	r12,r7[-28]
8000a972:	f0 1f 00 04 	mcall	8000a980 <udd_reset_ep_ctrl+0xe0>
}
8000a976:	2f 9d       	sub	sp,-28
8000a978:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a97c:	80 00       	ld.sh	r0,r0[0x0]
8000a97e:	98 0c       	ld.sh	r12,r12[0x0]
8000a980:	80 00       	ld.sh	r0,r0[0x0]
8000a982:	98 2a       	ld.sh	r10,r12[0x4]

8000a984 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
8000a984:	eb cd 40 80 	pushm	r7,lr
8000a988:	1a 97       	mov	r7,sp
8000a98a:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
8000a98c:	f0 1f 00 10 	mcall	8000a9cc <udd_ctrl_init+0x48>
8000a990:	18 98       	mov	r8,r12
8000a992:	ef 48 ff fc 	st.w	r7[-4],r8
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
8000a996:	fe 68 02 20 	mov	r8,-130528
8000a99a:	30 19       	mov	r9,1
8000a99c:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000a99e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a9a2:	f0 1f 00 0c 	mcall	8000a9d0 <udd_ctrl_init+0x4c>

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
8000a9a6:	fe 68 01 60 	mov	r8,-130720
8000a9aa:	30 29       	mov	r9,2
8000a9ac:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
8000a9ae:	48 a8       	lddpc	r8,8000a9d4 <udd_ctrl_init+0x50>
8000a9b0:	30 09       	mov	r9,0
8000a9b2:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000a9b4:	48 88       	lddpc	r8,8000a9d4 <udd_ctrl_init+0x50>
8000a9b6:	30 09       	mov	r9,0
8000a9b8:	91 59       	st.w	r8[0x14],r9
	udd_g_ctrlreq.payload_size = 0;
8000a9ba:	48 79       	lddpc	r9,8000a9d4 <udd_ctrl_init+0x50>
8000a9bc:	30 08       	mov	r8,0
8000a9be:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
8000a9c0:	48 68       	lddpc	r8,8000a9d8 <udd_ctrl_init+0x54>
8000a9c2:	30 09       	mov	r9,0
8000a9c4:	91 09       	st.w	r8[0x0],r9
}
8000a9c6:	2f fd       	sub	sp,-4
8000a9c8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9cc:	80 00       	ld.sh	r0,r0[0x0]
8000a9ce:	98 0c       	ld.sh	r12,r12[0x0]
8000a9d0:	80 00       	ld.sh	r0,r0[0x0]
8000a9d2:	98 2a       	ld.sh	r10,r12[0x4]
8000a9d4:	00 00       	add	r0,r0
8000a9d6:	0f a8       	ld.ub	r8,r7[0x2]
8000a9d8:	00 00       	add	r0,r0
8000a9da:	07 74       	ld.ub	r4,--r3

8000a9dc <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
8000a9dc:	eb cd 40 80 	pushm	r7,lr
8000a9e0:	1a 97       	mov	r7,sp
8000a9e2:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
8000a9e4:	4c b8       	lddpc	r8,8000ab10 <udd_ctrl_setup_received+0x134>
8000a9e6:	70 08       	ld.w	r8,r8[0x0]
8000a9e8:	58 08       	cp.w	r8,0
8000a9ea:	c0 50       	breq	8000a9f4 <udd_ctrl_setup_received+0x18>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
8000a9ec:	f0 1f 00 4a 	mcall	8000ab14 <udd_ctrl_setup_received+0x138>

		// Reinitializes control endpoint management
		udd_ctrl_init();
8000a9f0:	f0 1f 00 4a 	mcall	8000ab18 <udd_ctrl_setup_received+0x13c>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
8000a9f4:	fe 68 01 30 	mov	r8,-130768
8000a9f8:	70 08       	ld.w	r8,r8[0x0]
8000a9fa:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000a9fe:	b5 88       	lsr	r8,0x14
8000aa00:	58 88       	cp.w	r8,8
8000aa02:	c0 80       	breq	8000aa12 <udd_ctrl_setup_received+0x36>
		udd_ctrl_stall_data();
8000aa04:	f0 1f 00 46 	mcall	8000ab1c <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
8000aa08:	fe 68 01 60 	mov	r8,-130720
8000aa0c:	30 49       	mov	r9,4
8000aa0e:	91 09       	st.w	r8[0x0],r9
		return; // Error data number doesn't correspond to SETUP packet
8000aa10:	c7 d8       	rjmp	8000ab0a <udd_ctrl_setup_received+0x12e>
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
8000aa12:	fc 18 e0 00 	movh	r8,0xe000
8000aa16:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < 8; i++) {
8000aa1a:	30 08       	mov	r8,0
8000aa1c:	ef 68 ff fb 	st.b	r7[-5],r8
8000aa20:	c1 38       	rjmp	8000aa46 <udd_ctrl_setup_received+0x6a>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
8000aa22:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000aa26:	4b f8       	lddpc	r8,8000ab20 <udd_ctrl_setup_received+0x144>
8000aa28:	10 09       	add	r9,r8
8000aa2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aa2e:	11 88       	ld.ub	r8,r8[0x0]
8000aa30:	b2 88       	st.b	r9[0x0],r8
8000aa32:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aa36:	2f f8       	sub	r8,-1
8000aa38:	ef 48 ff fc 	st.w	r7[-4],r8
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
8000aa3c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000aa40:	2f f8       	sub	r8,-1
8000aa42:	ef 68 ff fb 	st.b	r7[-5],r8
8000aa46:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000aa4a:	30 78       	mov	r8,7
8000aa4c:	f0 09 18 00 	cp.b	r9,r8
8000aa50:	fe 98 ff e9 	brls	8000aa22 <udd_ctrl_setup_received+0x46>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
8000aa54:	4b 38       	lddpc	r8,8000ab20 <udd_ctrl_setup_received+0x144>
8000aa56:	90 18       	ld.sh	r8,r8[0x2]
8000aa58:	5c 88       	casts.h	r8
8000aa5a:	5c c8       	swap.bh	r8
8000aa5c:	5c 88       	casts.h	r8
8000aa5e:	4b 19       	lddpc	r9,8000ab20 <udd_ctrl_setup_received+0x144>
8000aa60:	b2 18       	st.h	r9[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
8000aa62:	4b 08       	lddpc	r8,8000ab20 <udd_ctrl_setup_received+0x144>
8000aa64:	90 28       	ld.sh	r8,r8[0x4]
8000aa66:	5c 88       	casts.h	r8
8000aa68:	5c c8       	swap.bh	r8
8000aa6a:	5c 88       	casts.h	r8
8000aa6c:	4a d9       	lddpc	r9,8000ab20 <udd_ctrl_setup_received+0x144>
8000aa6e:	b2 28       	st.h	r9[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
8000aa70:	4a c8       	lddpc	r8,8000ab20 <udd_ctrl_setup_received+0x144>
8000aa72:	90 38       	ld.sh	r8,r8[0x6]
8000aa74:	5c 88       	casts.h	r8
8000aa76:	5c c8       	swap.bh	r8
8000aa78:	5c 88       	casts.h	r8
8000aa7a:	4a a9       	lddpc	r9,8000ab20 <udd_ctrl_setup_received+0x144>
8000aa7c:	b2 38       	st.h	r9[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
8000aa7e:	f0 1f 00 2a 	mcall	8000ab24 <udd_ctrl_setup_received+0x148>
8000aa82:	18 98       	mov	r8,r12
8000aa84:	ec 18 00 01 	eorl	r8,0x1
8000aa88:	5c 58       	castu.b	r8
8000aa8a:	c0 80       	breq	8000aa9a <udd_ctrl_setup_received+0xbe>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
8000aa8c:	f0 1f 00 24 	mcall	8000ab1c <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
8000aa90:	fe 68 01 60 	mov	r8,-130720
8000aa94:	30 49       	mov	r9,4
8000aa96:	91 09       	st.w	r8[0x0],r9
		return;
8000aa98:	c3 98       	rjmp	8000ab0a <udd_ctrl_setup_received+0x12e>
	}
	udd_ack_setup_received(0);
8000aa9a:	fe 68 01 60 	mov	r8,-130720
8000aa9e:	30 49       	mov	r9,4
8000aaa0:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
8000aaa2:	4a 08       	lddpc	r8,8000ab20 <udd_ctrl_setup_received+0x144>
8000aaa4:	11 88       	ld.ub	r8,r8[0x0]
8000aaa6:	10 99       	mov	r9,r8
8000aaa8:	30 08       	mov	r8,0
8000aaaa:	f0 09 18 00 	cp.b	r9,r8
8000aaae:	c0 d4       	brge	8000aac8 <udd_ctrl_setup_received+0xec>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
8000aab0:	49 e9       	lddpc	r9,8000ab28 <udd_ctrl_setup_received+0x14c>
8000aab2:	30 08       	mov	r8,0
8000aab4:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000aab6:	49 e9       	lddpc	r9,8000ab2c <udd_ctrl_setup_received+0x150>
8000aab8:	30 08       	mov	r8,0
8000aaba:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
8000aabc:	49 58       	lddpc	r8,8000ab10 <udd_ctrl_setup_received+0x134>
8000aabe:	30 29       	mov	r9,2
8000aac0:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
8000aac2:	f0 1f 00 1c 	mcall	8000ab30 <udd_ctrl_setup_received+0x154>
8000aac6:	c2 28       	rjmp	8000ab0a <udd_ctrl_setup_received+0x12e>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
8000aac8:	49 68       	lddpc	r8,8000ab20 <udd_ctrl_setup_received+0x144>
8000aaca:	90 38       	ld.sh	r8,r8[0x6]
8000aacc:	58 08       	cp.w	r8,0
8000aace:	c0 41       	brne	8000aad6 <udd_ctrl_setup_received+0xfa>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
8000aad0:	f0 1f 00 19 	mcall	8000ab34 <udd_ctrl_setup_received+0x158>
			return;
8000aad4:	c1 b8       	rjmp	8000ab0a <udd_ctrl_setup_received+0x12e>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
8000aad6:	49 59       	lddpc	r9,8000ab28 <udd_ctrl_setup_received+0x14c>
8000aad8:	30 08       	mov	r8,0
8000aada:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000aadc:	49 49       	lddpc	r9,8000ab2c <udd_ctrl_setup_received+0x150>
8000aade:	30 08       	mov	r8,0
8000aae0:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
8000aae2:	48 c8       	lddpc	r8,8000ab10 <udd_ctrl_setup_received+0x134>
8000aae4:	30 19       	mov	r9,1
8000aae6:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
8000aae8:	fe 68 01 60 	mov	r8,-130720
8000aaec:	31 09       	mov	r9,16
8000aaee:	91 09       	st.w	r8[0x0],r9
		flags = cpu_irq_save();
8000aaf0:	f0 1f 00 12 	mcall	8000ab38 <udd_ctrl_setup_received+0x15c>
8000aaf4:	18 98       	mov	r8,r12
8000aaf6:	ef 48 ff f4 	st.w	r7[-12],r8
		udd_enable_nak_in_interrupt(0);
8000aafa:	fe 68 01 f0 	mov	r8,-130576
8000aafe:	31 09       	mov	r9,16
8000ab00:	91 09       	st.w	r8[0x0],r9
		cpu_irq_restore(flags);
8000ab02:	ee fc ff f4 	ld.w	r12,r7[-12]
8000ab06:	f0 1f 00 0e 	mcall	8000ab3c <udd_ctrl_setup_received+0x160>
	}
}
8000ab0a:	2f dd       	sub	sp,-12
8000ab0c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab10:	00 00       	add	r0,r0
8000ab12:	07 74       	ld.ub	r4,--r3
8000ab14:	80 00       	ld.sh	r0,r0[0x0]
8000ab16:	b0 04       	st.h	r8[0x0],r4
8000ab18:	80 00       	ld.sh	r0,r0[0x0]
8000ab1a:	a9 84       	lsr	r4,0x8
8000ab1c:	80 00       	ld.sh	r0,r0[0x0]
8000ab1e:	af 4c       	asr	r12,0xe
8000ab20:	00 00       	add	r0,r0
8000ab22:	0f a8       	ld.ub	r8,r7[0x2]
8000ab24:	80 00       	ld.sh	r0,r0[0x0]
8000ab26:	dd dc       	*unknown*
8000ab28:	00 00       	add	r0,r0
8000ab2a:	07 78       	ld.ub	r8,--r3
8000ab2c:	00 00       	add	r0,r0
8000ab2e:	07 7a       	ld.ub	r10,--r3
8000ab30:	80 00       	ld.sh	r0,r0[0x0]
8000ab32:	ab 40       	asr	r0,0xa
8000ab34:	80 00       	ld.sh	r0,r0[0x0]
8000ab36:	af 6c       	lsl	r12,0xe
8000ab38:	80 00       	ld.sh	r0,r0[0x0]
8000ab3a:	98 0c       	ld.sh	r12,r12[0x0]
8000ab3c:	80 00       	ld.sh	r0,r0[0x0]
8000ab3e:	98 2a       	ld.sh	r10,r12[0x4]

8000ab40 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
8000ab40:	eb cd 40 80 	pushm	r7,lr
8000ab44:	1a 97       	mov	r7,sp
8000ab46:	20 4d       	sub	sp,16
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
8000ab48:	f0 1f 00 5c 	mcall	8000acb8 <udd_ctrl_in_sent+0x178>
8000ab4c:	18 98       	mov	r8,r12
8000ab4e:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_disable_in_send_interrupt(0);
8000ab52:	fe 68 02 20 	mov	r8,-130528
8000ab56:	30 19       	mov	r9,1
8000ab58:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000ab5a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ab5e:	f0 1f 00 58 	mcall	8000acbc <udd_ctrl_in_sent+0x17c>

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000ab62:	4d 88       	lddpc	r8,8000acc0 <udd_ctrl_in_sent+0x180>
8000ab64:	70 08       	ld.w	r8,r8[0x0]
8000ab66:	58 38       	cp.w	r8,3
8000ab68:	c0 61       	brne	8000ab74 <udd_ctrl_in_sent+0x34>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
8000ab6a:	f0 1f 00 57 	mcall	8000acc4 <udd_ctrl_in_sent+0x184>
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000ab6e:	f0 1f 00 57 	mcall	8000acc8 <udd_ctrl_in_sent+0x188>
		return;
8000ab72:	c9 f8       	rjmp	8000acb0 <udd_ctrl_in_sent+0x170>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000ab74:	4d 68       	lddpc	r8,8000accc <udd_ctrl_in_sent+0x18c>
8000ab76:	90 69       	ld.sh	r9,r8[0xc]
8000ab78:	4d 68       	lddpc	r8,8000acd0 <udd_ctrl_in_sent+0x190>
8000ab7a:	90 08       	ld.sh	r8,r8[0x0]
8000ab7c:	10 19       	sub	r9,r8
8000ab7e:	ef 59 ff f0 	st.h	r7[-16],r9
	if (0 == nb_remain) {
8000ab82:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ab86:	30 08       	mov	r8,0
8000ab88:	f0 09 19 00 	cp.h	r9,r8
8000ab8c:	c2 b1       	brne	8000abe2 <udd_ctrl_in_sent+0xa2>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000ab8e:	4d 28       	lddpc	r8,8000acd4 <udd_ctrl_in_sent+0x194>
8000ab90:	90 09       	ld.sh	r9,r8[0x0]
8000ab92:	4d 08       	lddpc	r8,8000acd0 <udd_ctrl_in_sent+0x190>
8000ab94:	90 08       	ld.sh	r8,r8[0x0]
8000ab96:	f2 08 00 08 	add	r8,r9,r8
8000ab9a:	5c 88       	casts.h	r8
8000ab9c:	4c e9       	lddpc	r9,8000acd4 <udd_ctrl_in_sent+0x194>
8000ab9e:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
8000aba0:	4c b8       	lddpc	r8,8000accc <udd_ctrl_in_sent+0x18c>
8000aba2:	90 39       	ld.sh	r9,r8[0x6]
8000aba4:	4c c8       	lddpc	r8,8000acd4 <udd_ctrl_in_sent+0x194>
8000aba6:	90 08       	ld.sh	r8,r8[0x0]
8000aba8:	f0 09 19 00 	cp.h	r9,r8
8000abac:	c0 50       	breq	8000abb6 <udd_ctrl_in_sent+0x76>
8000abae:	4c b8       	lddpc	r8,8000acd8 <udd_ctrl_in_sent+0x198>
8000abb0:	11 88       	ld.ub	r8,r8[0x0]
8000abb2:	58 08       	cp.w	r8,0
8000abb4:	c0 40       	breq	8000abbc <udd_ctrl_in_sent+0x7c>
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
8000abb6:	f0 1f 00 4a 	mcall	8000acdc <udd_ctrl_in_sent+0x19c>
			return;
8000abba:	c7 b8       	rjmp	8000acb0 <udd_ctrl_in_sent+0x170>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
8000abbc:	4c 48       	lddpc	r8,8000accc <udd_ctrl_in_sent+0x18c>
8000abbe:	70 58       	ld.w	r8,r8[0x14]
8000abc0:	58 08       	cp.w	r8,0
8000abc2:	c1 00       	breq	8000abe2 <udd_ctrl_in_sent+0xa2>
8000abc4:	4c 28       	lddpc	r8,8000accc <udd_ctrl_in_sent+0x18c>
8000abc6:	70 58       	ld.w	r8,r8[0x14]
8000abc8:	5d 18       	icall	r8
8000abca:	18 98       	mov	r8,r12
8000abcc:	ec 18 00 01 	eorl	r8,0x1
8000abd0:	5c 58       	castu.b	r8
8000abd2:	c0 81       	brne	8000abe2 <udd_ctrl_in_sent+0xa2>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
8000abd4:	4b f9       	lddpc	r9,8000acd0 <udd_ctrl_in_sent+0x190>
8000abd6:	30 08       	mov	r8,0
8000abd8:	b2 08       	st.h	r9[0x0],r8
			nb_remain = udd_g_ctrlreq.payload_size;
8000abda:	4b d8       	lddpc	r8,8000accc <udd_ctrl_in_sent+0x18c>
8000abdc:	90 68       	ld.sh	r8,r8[0xc]
8000abde:	ef 58 ff f0 	st.h	r7[-16],r8
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
8000abe2:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000abe6:	33 f8       	mov	r8,63
8000abe8:	f0 09 19 00 	cp.h	r9,r8
8000abec:	e0 88 00 09 	brls	8000abfe <udd_ctrl_in_sent+0xbe>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
8000abf0:	34 08       	mov	r8,64
8000abf2:	ef 58 ff f0 	st.h	r7[-16],r8
		b_shortpacket = false;
8000abf6:	4b 99       	lddpc	r9,8000acd8 <udd_ctrl_in_sent+0x198>
8000abf8:	30 08       	mov	r8,0
8000abfa:	b2 88       	st.b	r9[0x0],r8
8000abfc:	c0 48       	rjmp	8000ac04 <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
8000abfe:	4b 79       	lddpc	r9,8000acd8 <udd_ctrl_in_sent+0x198>
8000ac00:	30 18       	mov	r8,1
8000ac02:	b2 88       	st.b	r9[0x0],r8
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000ac04:	fc 18 e0 00 	movh	r8,0xe000
8000ac08:	ef 48 ff f4 	st.w	r7[-12],r8
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000ac0c:	4b 08       	lddpc	r8,8000accc <udd_ctrl_in_sent+0x18c>
8000ac0e:	70 29       	ld.w	r9,r8[0x8]
8000ac10:	4b 08       	lddpc	r8,8000acd0 <udd_ctrl_in_sent+0x190>
8000ac12:	90 08       	ld.sh	r8,r8[0x0]
8000ac14:	5c 78       	castu.h	r8
8000ac16:	f2 08 00 08 	add	r8,r9,r8
8000ac1a:	ef 48 ff f8 	st.w	r7[-8],r8
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
8000ac1e:	f0 1f 00 27 	mcall	8000acb8 <udd_ctrl_in_sent+0x178>
8000ac22:	18 98       	mov	r8,r12
8000ac24:	ef 48 ff fc 	st.w	r7[-4],r8
	if (Is_udd_out_received(0)) {
8000ac28:	fe 68 01 30 	mov	r8,-130768
8000ac2c:	70 08       	ld.w	r8,r8[0x0]
8000ac2e:	e2 18 00 02 	andl	r8,0x2,COH
8000ac32:	c0 90       	breq	8000ac44 <udd_ctrl_in_sent+0x104>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
8000ac34:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ac38:	f0 1f 00 21 	mcall	8000acbc <udd_ctrl_in_sent+0x17c>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000ac3c:	4a 18       	lddpc	r8,8000acc0 <udd_ctrl_in_sent+0x180>
8000ac3e:	30 49       	mov	r9,4
8000ac40:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
8000ac42:	c3 78       	rjmp	8000acb0 <udd_ctrl_in_sent+0x170>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000ac44:	30 08       	mov	r8,0
8000ac46:	ef 68 ff f3 	st.b	r7[-13],r8
8000ac4a:	c1 68       	rjmp	8000ac76 <udd_ctrl_in_sent+0x136>
		*ptr_dest++ = *ptr_src++;
8000ac4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ac50:	11 88       	ld.ub	r8,r8[0x0]
8000ac52:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ac56:	b2 88       	st.b	r9[0x0],r8
8000ac58:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ac5c:	2f f8       	sub	r8,-1
8000ac5e:	ef 48 ff f4 	st.w	r7[-12],r8
8000ac62:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ac66:	2f f8       	sub	r8,-1
8000ac68:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000ac6c:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000ac70:	2f f8       	sub	r8,-1
8000ac72:	ef 68 ff f3 	st.b	r7[-13],r8
8000ac76:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000ac7a:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ac7e:	f0 09 19 00 	cp.h	r9,r8
8000ac82:	fe 9b ff e5 	brhi	8000ac4c <udd_ctrl_in_sent+0x10c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
8000ac86:	49 38       	lddpc	r8,8000acd0 <udd_ctrl_in_sent+0x190>
8000ac88:	90 08       	ld.sh	r8,r8[0x0]
8000ac8a:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ac8e:	f2 08 00 08 	add	r8,r9,r8
8000ac92:	5c 88       	casts.h	r8
8000ac94:	48 f9       	lddpc	r9,8000acd0 <udd_ctrl_in_sent+0x190>
8000ac96:	b2 08       	st.h	r9[0x0],r8

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
8000ac98:	fe 68 01 60 	mov	r8,-130720
8000ac9c:	30 19       	mov	r9,1
8000ac9e:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
8000aca0:	fe 68 01 f0 	mov	r8,-130576
8000aca4:	30 19       	mov	r9,1
8000aca6:	91 09       	st.w	r8[0x0],r9
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
8000aca8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000acac:	f0 1f 00 04 	mcall	8000acbc <udd_ctrl_in_sent+0x17c>
}
8000acb0:	2f cd       	sub	sp,-16
8000acb2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000acb6:	00 00       	add	r0,r0
8000acb8:	80 00       	ld.sh	r0,r0[0x0]
8000acba:	98 0c       	ld.sh	r12,r12[0x0]
8000acbc:	80 00       	ld.sh	r0,r0[0x0]
8000acbe:	98 2a       	ld.sh	r10,r12[0x4]
8000acc0:	00 00       	add	r0,r0
8000acc2:	07 74       	ld.ub	r4,--r3
8000acc4:	80 00       	ld.sh	r0,r0[0x0]
8000acc6:	b0 04       	st.h	r8[0x0],r4
8000acc8:	80 00       	ld.sh	r0,r0[0x0]
8000acca:	a9 84       	lsr	r4,0x8
8000accc:	00 00       	add	r0,r0
8000acce:	0f a8       	ld.ub	r8,r7[0x2]
8000acd0:	00 00       	add	r0,r0
8000acd2:	07 7a       	ld.ub	r10,--r3
8000acd4:	00 00       	add	r0,r0
8000acd6:	07 78       	ld.ub	r8,--r3
8000acd8:	00 00       	add	r0,r0
8000acda:	07 a4       	ld.ub	r4,r3[0x2]
8000acdc:	80 00       	ld.sh	r0,r0[0x0]
8000acde:	af c0       	cbr	r0,0xe

8000ace0 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
8000ace0:	eb cd 40 80 	pushm	r7,lr
8000ace4:	1a 97       	mov	r7,sp
8000ace6:	20 4d       	sub	sp,16
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
8000ace8:	4f 18       	lddpc	r8,8000aeac <udd_ctrl_out_received+0x1cc>
8000acea:	70 08       	ld.w	r8,r8[0x0]
8000acec:	58 18       	cp.w	r8,1
8000acee:	c1 10       	breq	8000ad10 <udd_ctrl_out_received+0x30>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000acf0:	4e f8       	lddpc	r8,8000aeac <udd_ctrl_out_received+0x1cc>
8000acf2:	70 08       	ld.w	r8,r8[0x0]
8000acf4:	58 28       	cp.w	r8,2
8000acf6:	c0 50       	breq	8000ad00 <udd_ctrl_out_received+0x20>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
8000acf8:	4e d8       	lddpc	r8,8000aeac <udd_ctrl_out_received+0x1cc>
8000acfa:	70 08       	ld.w	r8,r8[0x0]
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000acfc:	58 48       	cp.w	r8,4
8000acfe:	c0 41       	brne	8000ad06 <udd_ctrl_out_received+0x26>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
8000ad00:	f0 1f 00 6c 	mcall	8000aeb0 <udd_ctrl_out_received+0x1d0>
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000ad04:	c0 38       	rjmp	8000ad0a <udd_ctrl_out_received+0x2a>
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
8000ad06:	f0 1f 00 6c 	mcall	8000aeb4 <udd_ctrl_out_received+0x1d4>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000ad0a:	f0 1f 00 6c 	mcall	8000aeb8 <udd_ctrl_out_received+0x1d8>
		return;
8000ad0e:	cc b8       	rjmp	8000aea4 <udd_ctrl_out_received+0x1c4>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
8000ad10:	fe 68 01 30 	mov	r8,-130768
8000ad14:	70 08       	ld.w	r8,r8[0x0]
8000ad16:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000ad1a:	b5 88       	lsr	r8,0x14
8000ad1c:	ef 58 ff f6 	st.h	r7[-10],r8
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
8000ad20:	4e 78       	lddpc	r8,8000aebc <udd_ctrl_out_received+0x1dc>
8000ad22:	90 68       	ld.sh	r8,r8[0xc]
8000ad24:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000ad28:	4e 68       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1e0>
8000ad2a:	90 08       	ld.sh	r8,r8[0x0]
8000ad2c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000ad30:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000ad34:	f4 08 00 08 	add	r8,r10,r8
8000ad38:	10 39       	cp.w	r9,r8
8000ad3a:	c0 84       	brge	8000ad4a <udd_ctrl_out_received+0x6a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
8000ad3c:	4e 08       	lddpc	r8,8000aebc <udd_ctrl_out_received+0x1dc>
8000ad3e:	90 69       	ld.sh	r9,r8[0xc]
8000ad40:	4e 08       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1e0>
8000ad42:	90 08       	ld.sh	r8,r8[0x0]
8000ad44:	10 19       	sub	r9,r8
8000ad46:	ef 59 ff f6 	st.h	r7[-10],r9
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000ad4a:	fc 18 e0 00 	movh	r8,0xe000
8000ad4e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000ad52:	4d b8       	lddpc	r8,8000aebc <udd_ctrl_out_received+0x1dc>
8000ad54:	70 29       	ld.w	r9,r8[0x8]
8000ad56:	4d b8       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1e0>
8000ad58:	90 08       	ld.sh	r8,r8[0x0]
8000ad5a:	5c 78       	castu.h	r8
8000ad5c:	f2 08 00 08 	add	r8,r9,r8
8000ad60:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < nb_data; i++) {
8000ad64:	30 08       	mov	r8,0
8000ad66:	ef 68 ff f5 	st.b	r7[-11],r8
8000ad6a:	c1 68       	rjmp	8000ad96 <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = *ptr_src++;
8000ad6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ad70:	11 88       	ld.ub	r8,r8[0x0]
8000ad72:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ad76:	b2 88       	st.b	r9[0x0],r8
8000ad78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad7c:	2f f8       	sub	r8,-1
8000ad7e:	ef 48 ff fc 	st.w	r7[-4],r8
8000ad82:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ad86:	2f f8       	sub	r8,-1
8000ad88:	ef 48 ff f8 	st.w	r7[-8],r8
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
8000ad8c:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000ad90:	2f f8       	sub	r8,-1
8000ad92:	ef 68 ff f5 	st.b	r7[-11],r8
8000ad96:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000ad9a:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000ad9e:	f0 09 19 00 	cp.h	r9,r8
8000ada2:	fe 9b ff e5 	brhi	8000ad6c <udd_ctrl_out_received+0x8c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
8000ada6:	4c 78       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1e0>
8000ada8:	90 08       	ld.sh	r8,r8[0x0]
8000adaa:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000adae:	f2 08 00 08 	add	r8,r9,r8
8000adb2:	5c 88       	casts.h	r8
8000adb4:	4c 39       	lddpc	r9,8000aec0 <udd_ctrl_out_received+0x1e0>
8000adb6:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000adb8:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000adbc:	34 08       	mov	r8,64
8000adbe:	f0 09 19 00 	cp.h	r9,r8
8000adc2:	c1 11       	brne	8000ade4 <udd_ctrl_out_received+0x104>
			|| (udd_g_ctrlreq.req.wLength <=
8000adc4:	4b e8       	lddpc	r8,8000aebc <udd_ctrl_out_received+0x1dc>
8000adc6:	90 38       	ld.sh	r8,r8[0x6]
8000adc8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
					(udd_ctrl_prev_payload_nb_trans +
8000adcc:	4b e8       	lddpc	r8,8000aec4 <udd_ctrl_out_received+0x1e4>
8000adce:	90 08       	ld.sh	r8,r8[0x0]
8000add0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000add4:	4b b8       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1e0>
8000add6:	90 08       	ld.sh	r8,r8[0x0]
8000add8:	5c 78       	castu.h	r8
8000adda:	f4 08 00 08 	add	r8,r10,r8
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000adde:	10 39       	cp.w	r9,r8
8000ade0:	e0 89 00 20 	brgt	8000ae20 <udd_ctrl_out_received+0x140>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
8000ade4:	4b 78       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1e0>
8000ade6:	90 08       	ld.sh	r8,r8[0x0]
8000ade8:	4b 59       	lddpc	r9,8000aebc <udd_ctrl_out_received+0x1dc>
8000adea:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
8000adec:	4b 48       	lddpc	r8,8000aebc <udd_ctrl_out_received+0x1dc>
8000adee:	70 58       	ld.w	r8,r8[0x14]
8000adf0:	58 08       	cp.w	r8,0
8000adf2:	c1 00       	breq	8000ae12 <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
8000adf4:	4b 28       	lddpc	r8,8000aebc <udd_ctrl_out_received+0x1dc>
8000adf6:	70 58       	ld.w	r8,r8[0x14]
8000adf8:	5d 18       	icall	r8
8000adfa:	18 98       	mov	r8,r12
8000adfc:	ec 18 00 01 	eorl	r8,0x1
8000ae00:	5c 58       	castu.b	r8
8000ae02:	c0 80       	breq	8000ae12 <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
8000ae04:	f0 1f 00 2c 	mcall	8000aeb4 <udd_ctrl_out_received+0x1d4>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
8000ae08:	fe 68 01 60 	mov	r8,-130720
8000ae0c:	30 29       	mov	r9,2
8000ae0e:	91 09       	st.w	r8[0x0],r9
				return;
8000ae10:	c4 a8       	rjmp	8000aea4 <udd_ctrl_out_received+0x1c4>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
8000ae12:	fe 68 01 60 	mov	r8,-130720
8000ae16:	30 29       	mov	r9,2
8000ae18:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
8000ae1a:	f0 1f 00 2c 	mcall	8000aec8 <udd_ctrl_out_received+0x1e8>
		return;
8000ae1e:	c4 38       	rjmp	8000aea4 <udd_ctrl_out_received+0x1c4>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
8000ae20:	4a 78       	lddpc	r8,8000aebc <udd_ctrl_out_received+0x1dc>
8000ae22:	90 69       	ld.sh	r9,r8[0xc]
8000ae24:	4a 78       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1e0>
8000ae26:	90 08       	ld.sh	r8,r8[0x0]
8000ae28:	f0 09 19 00 	cp.h	r9,r8
8000ae2c:	c2 71       	brne	8000ae7a <udd_ctrl_out_received+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
8000ae2e:	4a 48       	lddpc	r8,8000aebc <udd_ctrl_out_received+0x1dc>
8000ae30:	70 58       	ld.w	r8,r8[0x14]
8000ae32:	58 08       	cp.w	r8,0
8000ae34:	c0 81       	brne	8000ae44 <udd_ctrl_out_received+0x164>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
8000ae36:	f0 1f 00 20 	mcall	8000aeb4 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000ae3a:	fe 68 01 60 	mov	r8,-130720
8000ae3e:	30 29       	mov	r9,2
8000ae40:	91 09       	st.w	r8[0x0],r9
			return;
8000ae42:	c3 18       	rjmp	8000aea4 <udd_ctrl_out_received+0x1c4>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
8000ae44:	49 e8       	lddpc	r8,8000aebc <udd_ctrl_out_received+0x1dc>
8000ae46:	70 58       	ld.w	r8,r8[0x14]
8000ae48:	5d 18       	icall	r8
8000ae4a:	18 98       	mov	r8,r12
8000ae4c:	ec 18 00 01 	eorl	r8,0x1
8000ae50:	5c 58       	castu.b	r8
8000ae52:	c0 80       	breq	8000ae62 <udd_ctrl_out_received+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
8000ae54:	f0 1f 00 18 	mcall	8000aeb4 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000ae58:	fe 68 01 60 	mov	r8,-130720
8000ae5c:	30 29       	mov	r9,2
8000ae5e:	91 09       	st.w	r8[0x0],r9
			return;
8000ae60:	c2 28       	rjmp	8000aea4 <udd_ctrl_out_received+0x1c4>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000ae62:	49 98       	lddpc	r8,8000aec4 <udd_ctrl_out_received+0x1e4>
8000ae64:	90 09       	ld.sh	r9,r8[0x0]
8000ae66:	49 78       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1e0>
8000ae68:	90 08       	ld.sh	r8,r8[0x0]
8000ae6a:	f2 08 00 08 	add	r8,r9,r8
8000ae6e:	5c 88       	casts.h	r8
8000ae70:	49 59       	lddpc	r9,8000aec4 <udd_ctrl_out_received+0x1e4>
8000ae72:	b2 08       	st.h	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
8000ae74:	49 39       	lddpc	r9,8000aec0 <udd_ctrl_out_received+0x1e0>
8000ae76:	30 08       	mov	r8,0
8000ae78:	b2 08       	st.h	r9[0x0],r8
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
8000ae7a:	fe 68 01 60 	mov	r8,-130720
8000ae7e:	30 29       	mov	r9,2
8000ae80:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
8000ae82:	fe 68 01 60 	mov	r8,-130720
8000ae86:	31 09       	mov	r9,16
8000ae88:	91 09       	st.w	r8[0x0],r9
	flags = cpu_irq_save();
8000ae8a:	f0 1f 00 11 	mcall	8000aecc <udd_ctrl_out_received+0x1ec>
8000ae8e:	18 98       	mov	r8,r12
8000ae90:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_enable_nak_in_interrupt(0);
8000ae94:	fe 68 01 f0 	mov	r8,-130576
8000ae98:	31 09       	mov	r9,16
8000ae9a:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000ae9c:	ee fc ff f0 	ld.w	r12,r7[-16]
8000aea0:	f0 1f 00 0c 	mcall	8000aed0 <udd_ctrl_out_received+0x1f0>
}
8000aea4:	2f cd       	sub	sp,-16
8000aea6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aeaa:	00 00       	add	r0,r0
8000aeac:	00 00       	add	r0,r0
8000aeae:	07 74       	ld.ub	r4,--r3
8000aeb0:	80 00       	ld.sh	r0,r0[0x0]
8000aeb2:	b0 04       	st.h	r8[0x0],r4
8000aeb4:	80 00       	ld.sh	r0,r0[0x0]
8000aeb6:	af 4c       	asr	r12,0xe
8000aeb8:	80 00       	ld.sh	r0,r0[0x0]
8000aeba:	a9 84       	lsr	r4,0x8
8000aebc:	00 00       	add	r0,r0
8000aebe:	0f a8       	ld.ub	r8,r7[0x2]
8000aec0:	00 00       	add	r0,r0
8000aec2:	07 7a       	ld.ub	r10,--r3
8000aec4:	00 00       	add	r0,r0
8000aec6:	07 78       	ld.ub	r8,--r3
8000aec8:	80 00       	ld.sh	r0,r0[0x0]
8000aeca:	af 6c       	lsl	r12,0xe
8000aecc:	80 00       	ld.sh	r0,r0[0x0]
8000aece:	98 0c       	ld.sh	r12,r12[0x0]
8000aed0:	80 00       	ld.sh	r0,r0[0x0]
8000aed2:	98 2a       	ld.sh	r10,r12[0x4]

8000aed4 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
8000aed4:	eb cd 40 80 	pushm	r7,lr
8000aed8:	1a 97       	mov	r7,sp
	if (Is_udd_out_received(0))
8000aeda:	fe 68 01 30 	mov	r8,-130768
8000aede:	70 08       	ld.w	r8,r8[0x0]
8000aee0:	e2 18 00 02 	andl	r8,0x2,COH
8000aee4:	c1 21       	brne	8000af08 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
8000aee6:	48 b8       	lddpc	r8,8000af10 <udd_ctrl_underflow+0x3c>
8000aee8:	70 08       	ld.w	r8,r8[0x0]
8000aeea:	58 18       	cp.w	r8,1
8000aeec:	c0 41       	brne	8000aef4 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
8000aeee:	f0 1f 00 0a 	mcall	8000af14 <udd_ctrl_underflow+0x40>
8000aef2:	c0 c8       	rjmp	8000af0a <udd_ctrl_underflow+0x36>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
8000aef4:	48 78       	lddpc	r8,8000af10 <udd_ctrl_underflow+0x3c>
8000aef6:	70 08       	ld.w	r8,r8[0x0]
8000aef8:	58 48       	cp.w	r8,4
8000aefa:	c0 81       	brne	8000af0a <udd_ctrl_underflow+0x36>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
8000aefc:	fe 68 01 f0 	mov	r8,-130576
8000af00:	e8 69 00 00 	mov	r9,524288
8000af04:	91 09       	st.w	r8[0x0],r9
8000af06:	c0 28       	rjmp	8000af0a <udd_ctrl_underflow+0x36>


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
		return; // underflow ignored if OUT data is received
8000af08:	d7 03       	nop
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
	}
}
8000af0a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af0e:	00 00       	add	r0,r0
8000af10:	00 00       	add	r0,r0
8000af12:	07 74       	ld.ub	r4,--r3
8000af14:	80 00       	ld.sh	r0,r0[0x0]
8000af16:	af 6c       	lsl	r12,0xe

8000af18 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
8000af18:	eb cd 40 80 	pushm	r7,lr
8000af1c:	1a 97       	mov	r7,sp
	if (Is_udd_in_send(0))
8000af1e:	fe 68 01 30 	mov	r8,-130768
8000af22:	70 08       	ld.w	r8,r8[0x0]
8000af24:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000af28:	5c 58       	castu.b	r8
8000af2a:	c0 b1       	brne	8000af40 <udd_ctrl_overflow+0x28>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000af2c:	48 78       	lddpc	r8,8000af48 <udd_ctrl_overflow+0x30>
8000af2e:	70 08       	ld.w	r8,r8[0x0]
8000af30:	58 38       	cp.w	r8,3
8000af32:	c0 81       	brne	8000af42 <udd_ctrl_overflow+0x2a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
8000af34:	fe 68 01 f0 	mov	r8,-130576
8000af38:	e8 69 00 00 	mov	r9,524288
8000af3c:	91 09       	st.w	r8[0x0],r9
8000af3e:	c0 28       	rjmp	8000af42 <udd_ctrl_overflow+0x2a>


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
		return; // overflow ignored if IN data is received
8000af40:	d7 03       	nop
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
8000af42:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af46:	00 00       	add	r0,r0
8000af48:	00 00       	add	r0,r0
8000af4a:	07 74       	ld.ub	r4,--r3

8000af4c <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
8000af4c:	eb cd 40 80 	pushm	r7,lr
8000af50:	1a 97       	mov	r7,sp
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
8000af52:	48 68       	lddpc	r8,8000af68 <udd_ctrl_stall_data+0x1c>
8000af54:	30 59       	mov	r9,5
8000af56:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
8000af58:	fe 68 01 f0 	mov	r8,-130576
8000af5c:	e8 69 00 00 	mov	r9,524288
8000af60:	91 09       	st.w	r8[0x0],r9
}
8000af62:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af66:	00 00       	add	r0,r0
8000af68:	00 00       	add	r0,r0
8000af6a:	07 74       	ld.ub	r4,--r3

8000af6c <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
8000af6c:	eb cd 40 80 	pushm	r7,lr
8000af70:	1a 97       	mov	r7,sp
8000af72:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
8000af74:	49 08       	lddpc	r8,8000afb4 <udd_ctrl_send_zlp_in+0x48>
8000af76:	30 39       	mov	r9,3
8000af78:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
8000af7a:	f0 1f 00 10 	mcall	8000afb8 <udd_ctrl_send_zlp_in+0x4c>
8000af7e:	18 98       	mov	r8,r12
8000af80:	ef 48 ff fc 	st.w	r7[-4],r8
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
8000af84:	fe 68 01 60 	mov	r8,-130720
8000af88:	30 19       	mov	r9,1
8000af8a:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
8000af8c:	fe 68 01 f0 	mov	r8,-130576
8000af90:	30 19       	mov	r9,1
8000af92:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
8000af94:	fe 68 01 60 	mov	r8,-130720
8000af98:	30 89       	mov	r9,8
8000af9a:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_out_interrupt(0);
8000af9c:	fe 68 01 f0 	mov	r8,-130576
8000afa0:	30 89       	mov	r9,8
8000afa2:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000afa4:	ee fc ff fc 	ld.w	r12,r7[-4]
8000afa8:	f0 1f 00 05 	mcall	8000afbc <udd_ctrl_send_zlp_in+0x50>
}
8000afac:	2f fd       	sub	sp,-4
8000afae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000afb2:	00 00       	add	r0,r0
8000afb4:	00 00       	add	r0,r0
8000afb6:	07 74       	ld.ub	r4,--r3
8000afb8:	80 00       	ld.sh	r0,r0[0x0]
8000afba:	98 0c       	ld.sh	r12,r12[0x0]
8000afbc:	80 00       	ld.sh	r0,r0[0x0]
8000afbe:	98 2a       	ld.sh	r10,r12[0x4]

8000afc0 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
8000afc0:	eb cd 40 80 	pushm	r7,lr
8000afc4:	1a 97       	mov	r7,sp
8000afc6:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000afc8:	48 c8       	lddpc	r8,8000aff8 <udd_ctrl_send_zlp_out+0x38>
8000afca:	30 49       	mov	r9,4
8000afcc:	91 09       	st.w	r8[0x0],r9
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
8000afce:	f0 1f 00 0c 	mcall	8000affc <udd_ctrl_send_zlp_out+0x3c>
8000afd2:	18 98       	mov	r8,r12
8000afd4:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_ack_nak_in(0);
8000afd8:	fe 68 01 60 	mov	r8,-130720
8000afdc:	31 09       	mov	r9,16
8000afde:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_in_interrupt(0);
8000afe0:	fe 68 01 f0 	mov	r8,-130576
8000afe4:	31 09       	mov	r9,16
8000afe6:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000afe8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000afec:	f0 1f 00 05 	mcall	8000b000 <udd_ctrl_send_zlp_out+0x40>
}
8000aff0:	2f fd       	sub	sp,-4
8000aff2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aff6:	00 00       	add	r0,r0
8000aff8:	00 00       	add	r0,r0
8000affa:	07 74       	ld.ub	r4,--r3
8000affc:	80 00       	ld.sh	r0,r0[0x0]
8000affe:	98 0c       	ld.sh	r12,r12[0x0]
8000b000:	80 00       	ld.sh	r0,r0[0x0]
8000b002:	98 2a       	ld.sh	r10,r12[0x4]

8000b004 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
8000b004:	eb cd 40 80 	pushm	r7,lr
8000b008:	1a 97       	mov	r7,sp
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000b00a:	48 58       	lddpc	r8,8000b01c <udd_ctrl_endofrequest+0x18>
8000b00c:	70 48       	ld.w	r8,r8[0x10]
8000b00e:	58 08       	cp.w	r8,0
8000b010:	c0 40       	breq	8000b018 <udd_ctrl_endofrequest+0x14>
		udd_g_ctrlreq.callback();
8000b012:	48 38       	lddpc	r8,8000b01c <udd_ctrl_endofrequest+0x18>
8000b014:	70 48       	ld.w	r8,r8[0x10]
8000b016:	5d 18       	icall	r8
	}
}
8000b018:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b01c:	00 00       	add	r0,r0
8000b01e:	0f a8       	ld.ub	r8,r7[0x2]

8000b020 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
8000b020:	eb cd 40 80 	pushm	r7,lr
8000b024:	1a 97       	mov	r7,sp

	if (!Is_udd_endpoint_interrupt(0))
8000b026:	fe 68 00 00 	mov	r8,-131072
8000b02a:	70 18       	ld.w	r8,r8[0x4]
8000b02c:	e2 18 10 00 	andl	r8,0x1000,COH
8000b030:	c0 31       	brne	8000b036 <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
8000b032:	30 08       	mov	r8,0
8000b034:	c4 c8       	rjmp	8000b0cc <udd_ctrl_interrupt+0xac>

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
8000b036:	fe 68 02 20 	mov	r8,-130528
8000b03a:	31 09       	mov	r9,16
8000b03c:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
8000b03e:	fe 68 02 20 	mov	r8,-130528
8000b042:	30 89       	mov	r9,8
8000b044:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
8000b046:	fe 68 01 30 	mov	r8,-130768
8000b04a:	70 08       	ld.w	r8,r8[0x0]
8000b04c:	e2 18 00 04 	andl	r8,0x4,COH
8000b050:	c0 50       	breq	8000b05a <udd_ctrl_interrupt+0x3a>
		// SETUP packet received
		udd_ctrl_setup_received();
8000b052:	f0 1f 00 21 	mcall	8000b0d4 <udd_ctrl_interrupt+0xb4>
		return true;
8000b056:	30 18       	mov	r8,1
8000b058:	c3 a8       	rjmp	8000b0cc <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
8000b05a:	fe 68 01 30 	mov	r8,-130768
8000b05e:	70 08       	ld.w	r8,r8[0x0]
8000b060:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b064:	5c 58       	castu.b	r8
8000b066:	c0 c0       	breq	8000b07e <udd_ctrl_interrupt+0x5e>
8000b068:	fe 68 01 c0 	mov	r8,-130624
8000b06c:	70 08       	ld.w	r8,r8[0x0]
8000b06e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b072:	5c 58       	castu.b	r8
8000b074:	c0 50       	breq	8000b07e <udd_ctrl_interrupt+0x5e>
		// IN packet sent
		udd_ctrl_in_sent();
8000b076:	f0 1f 00 19 	mcall	8000b0d8 <udd_ctrl_interrupt+0xb8>
		return true;
8000b07a:	30 18       	mov	r8,1
8000b07c:	c2 88       	rjmp	8000b0cc <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_out_received(0)) {
8000b07e:	fe 68 01 30 	mov	r8,-130768
8000b082:	70 08       	ld.w	r8,r8[0x0]
8000b084:	e2 18 00 02 	andl	r8,0x2,COH
8000b088:	c0 50       	breq	8000b092 <udd_ctrl_interrupt+0x72>
		// OUT packet received
		udd_ctrl_out_received();
8000b08a:	f0 1f 00 15 	mcall	8000b0dc <udd_ctrl_interrupt+0xbc>
		return true;
8000b08e:	30 18       	mov	r8,1
8000b090:	c1 e8       	rjmp	8000b0cc <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_out(0)) {
8000b092:	fe 68 01 30 	mov	r8,-130768
8000b096:	70 08       	ld.w	r8,r8[0x0]
8000b098:	e2 18 00 08 	andl	r8,0x8,COH
8000b09c:	c0 90       	breq	8000b0ae <udd_ctrl_interrupt+0x8e>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
8000b09e:	fe 68 01 60 	mov	r8,-130720
8000b0a2:	30 89       	mov	r9,8
8000b0a4:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_overflow();
8000b0a6:	f0 1f 00 0f 	mcall	8000b0e0 <udd_ctrl_interrupt+0xc0>
		return true;
8000b0aa:	30 18       	mov	r8,1
8000b0ac:	c1 08       	rjmp	8000b0cc <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_in(0)) {
8000b0ae:	fe 68 01 30 	mov	r8,-130768
8000b0b2:	70 08       	ld.w	r8,r8[0x0]
8000b0b4:	e2 18 00 10 	andl	r8,0x10,COH
8000b0b8:	c0 90       	breq	8000b0ca <udd_ctrl_interrupt+0xaa>
		// Underflow on IN packet
		udd_ack_nak_in(0);
8000b0ba:	fe 68 01 60 	mov	r8,-130720
8000b0be:	31 09       	mov	r9,16
8000b0c0:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_underflow();
8000b0c2:	f0 1f 00 09 	mcall	8000b0e4 <udd_ctrl_interrupt+0xc4>
		return true;
8000b0c6:	30 18       	mov	r8,1
8000b0c8:	c0 28       	rjmp	8000b0cc <udd_ctrl_interrupt+0xac>
	}
	return false;
8000b0ca:	30 08       	mov	r8,0
}
8000b0cc:	10 9c       	mov	r12,r8
8000b0ce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b0d2:	00 00       	add	r0,r0
8000b0d4:	80 00       	ld.sh	r0,r0[0x0]
8000b0d6:	a9 dc       	cbr	r12,0x9
8000b0d8:	80 00       	ld.sh	r0,r0[0x0]
8000b0da:	ab 40       	asr	r0,0xa
8000b0dc:	80 00       	ld.sh	r0,r0[0x0]
8000b0de:	ac e0       	st.b	r6[0x6],r0
8000b0e0:	80 00       	ld.sh	r0,r0[0x0]
8000b0e2:	af 18       	ld.d	r8,--r7
8000b0e4:	80 00       	ld.sh	r0,r0[0x0]
8000b0e6:	ae d4       	st.b	r7[0x5],r4

8000b0e8 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
8000b0e8:	eb cd 40 80 	pushm	r7,lr
8000b0ec:	1a 97       	mov	r7,sp
8000b0ee:	20 1d       	sub	sp,4
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b0f0:	30 08       	mov	r8,0
8000b0f2:	ef 68 ff ff 	st.b	r7[-1],r8
8000b0f6:	c2 28       	rjmp	8000b13a <udd_ep_job_table_reset+0x52>
		udd_ep_job[i].busy = false;
8000b0f8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b0fc:	49 5a       	lddpc	r10,8000b150 <udd_ep_job_table_reset+0x68>
8000b0fe:	12 98       	mov	r8,r9
8000b100:	a3 68       	lsl	r8,0x2
8000b102:	12 08       	add	r8,r9
8000b104:	a3 68       	lsl	r8,0x2
8000b106:	f4 08 00 09 	add	r9,r10,r8
8000b10a:	72 08       	ld.w	r8,r9[0x0]
8000b10c:	30 0a       	mov	r10,0
8000b10e:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b112:	93 08       	st.w	r9[0x0],r8
		udd_ep_job[i].stall_requested = false;
8000b114:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b118:	48 ea       	lddpc	r10,8000b150 <udd_ep_job_table_reset+0x68>
8000b11a:	12 98       	mov	r8,r9
8000b11c:	a3 68       	lsl	r8,0x2
8000b11e:	12 08       	add	r8,r9
8000b120:	a3 68       	lsl	r8,0x2
8000b122:	f4 08 00 09 	add	r9,r10,r8
8000b126:	72 08       	ld.w	r8,r9[0x0]
8000b128:	30 0a       	mov	r10,0
8000b12a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000b12e:	93 08       	st.w	r9[0x0],r8
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b130:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b134:	2f f8       	sub	r8,-1
8000b136:	ef 68 ff ff 	st.b	r7[-1],r8
8000b13a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b13e:	30 18       	mov	r8,1
8000b140:	f0 09 18 00 	cp.b	r9,r8
8000b144:	fe 98 ff da 	brls	8000b0f8 <udd_ep_job_table_reset+0x10>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].stall_requested = false;
	}
}
8000b148:	2f fd       	sub	sp,-4
8000b14a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b14e:	00 00       	add	r0,r0
8000b150:	00 00       	add	r0,r0
8000b152:	07 7c       	ld.ub	r12,--r3

8000b154 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
8000b154:	eb cd 40 80 	pushm	r7,lr
8000b158:	1a 97       	mov	r7,sp
8000b15a:	20 1d       	sub	sp,4
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b15c:	30 08       	mov	r8,0
8000b15e:	ef 68 ff ff 	st.b	r7[-1],r8
8000b162:	c1 98       	rjmp	8000b194 <udd_ep_job_table_kill+0x40>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
8000b164:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b168:	2f f8       	sub	r8,-1
8000b16a:	5c 58       	castu.b	r8
8000b16c:	10 9a       	mov	r10,r8
8000b16e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b172:	12 98       	mov	r8,r9
8000b174:	a3 68       	lsl	r8,0x2
8000b176:	12 08       	add	r8,r9
8000b178:	a3 68       	lsl	r8,0x2
8000b17a:	10 99       	mov	r9,r8
8000b17c:	48 b8       	lddpc	r8,8000b1a8 <udd_ep_job_table_kill+0x54>
8000b17e:	f2 08 00 08 	add	r8,r9,r8
8000b182:	30 1b       	mov	r11,1
8000b184:	10 9c       	mov	r12,r8
8000b186:	f0 1f 00 0a 	mcall	8000b1ac <udd_ep_job_table_kill+0x58>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b18a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b18e:	2f f8       	sub	r8,-1
8000b190:	ef 68 ff ff 	st.b	r7[-1],r8
8000b194:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b198:	30 18       	mov	r8,1
8000b19a:	f0 09 18 00 	cp.b	r9,r8
8000b19e:	fe 98 ff e3 	brls	8000b164 <udd_ep_job_table_kill+0x10>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
	}
}
8000b1a2:	2f fd       	sub	sp,-4
8000b1a4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b1a8:	00 00       	add	r0,r0
8000b1aa:	07 7c       	ld.ub	r12,--r3
8000b1ac:	80 00       	ld.sh	r0,r0[0x0]
8000b1ae:	b1 fc       	*unknown*

8000b1b0 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
8000b1b0:	eb cd 40 80 	pushm	r7,lr
8000b1b4:	1a 97       	mov	r7,sp
8000b1b6:	20 1d       	sub	sp,4
8000b1b8:	18 98       	mov	r8,r12
8000b1ba:	ef 68 ff fc 	st.b	r7[-4],r8
	ep &= USB_EP_ADDR_MASK;
8000b1be:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b1c2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000b1c6:	ef 68 ff fc 	st.b	r7[-4],r8

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
8000b1ca:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000b1ce:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b1d2:	f0 c9 00 01 	sub	r9,r8,1
8000b1d6:	12 98       	mov	r8,r9
8000b1d8:	a3 68       	lsl	r8,0x2
8000b1da:	12 08       	add	r8,r9
8000b1dc:	a3 68       	lsl	r8,0x2
8000b1de:	10 99       	mov	r9,r8
8000b1e0:	48 58       	lddpc	r8,8000b1f4 <udd_ep_abort_job+0x44>
8000b1e2:	f2 08 00 08 	add	r8,r9,r8
8000b1e6:	30 1b       	mov	r11,1
8000b1e8:	10 9c       	mov	r12,r8
8000b1ea:	f0 1f 00 04 	mcall	8000b1f8 <udd_ep_abort_job+0x48>
}
8000b1ee:	2f fd       	sub	sp,-4
8000b1f0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b1f4:	00 00       	add	r0,r0
8000b1f6:	07 7c       	ld.ub	r12,--r3
8000b1f8:	80 00       	ld.sh	r0,r0[0x0]
8000b1fa:	b1 fc       	*unknown*

8000b1fc <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
8000b1fc:	eb cd 40 80 	pushm	r7,lr
8000b200:	1a 97       	mov	r7,sp
8000b202:	20 3d       	sub	sp,12
8000b204:	ef 4c ff fc 	st.w	r7[-4],r12
8000b208:	16 99       	mov	r9,r11
8000b20a:	14 98       	mov	r8,r10
8000b20c:	ef 69 ff f8 	st.b	r7[-8],r9
8000b210:	ef 68 ff f4 	st.b	r7[-12],r8
	if (ptr_job->busy == false) {
8000b214:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b218:	70 08       	ld.w	r8,r8[0x0]
8000b21a:	e6 18 80 00 	andh	r8,0x8000,COH
8000b21e:	c2 b0       	breq	8000b274 <udd_ep_finish_job+0x78>
		return; // No on-going job
	}
	ptr_job->busy = false;
8000b220:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b224:	72 08       	ld.w	r8,r9[0x0]
8000b226:	30 0a       	mov	r10,0
8000b228:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b22c:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans) {
8000b22e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b232:	70 48       	ld.w	r8,r8[0x10]
8000b234:	58 08       	cp.w	r8,0
8000b236:	c2 10       	breq	8000b278 <udd_ep_finish_job+0x7c>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
8000b238:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b23c:	a3 68       	lsl	r8,0x2
8000b23e:	e0 38 ff 00 	sub	r8,130816
8000b242:	70 08       	ld.w	r8,r8[0x0]
8000b244:	e2 18 01 00 	andl	r8,0x100,COH
8000b248:	c0 90       	breq	8000b25a <udd_ep_finish_job+0x5e>
		ep_num |= USB_EP_DIR_IN;
8000b24a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b24e:	ea 18 ff ff 	orh	r8,0xffff
8000b252:	e8 18 ff 80 	orl	r8,0xff80
8000b256:	ef 68 ff f4 	st.b	r7[-12],r8
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
8000b25a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b25e:	70 48       	ld.w	r8,r8[0x10]
8000b260:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b264:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b268:	72 2b       	ld.w	r11,r9[0x8]
8000b26a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000b26e:	12 9c       	mov	r12,r9
8000b270:	5d 18       	icall	r8
8000b272:	c0 48       	rjmp	8000b27a <udd_ep_finish_job+0x7e>


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
		return; // No on-going job
8000b274:	d7 03       	nop
8000b276:	c0 28       	rjmp	8000b27a <udd_ep_finish_job+0x7e>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
		return; // No callback linked to job
8000b278:	d7 03       	nop
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
8000b27a:	2f dd       	sub	sp,-12
8000b27c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b280 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
8000b280:	eb cd 40 80 	pushm	r7,lr
8000b284:	1a 97       	mov	r7,sp
8000b286:	20 5d       	sub	sp,20
8000b288:	18 98       	mov	r8,r12
8000b28a:	ef 68 ff ec 	st.b	r7[-20],r8
	uint32_t udd_dma_ctrl = 0;
8000b28e:	30 08       	mov	r8,0
8000b290:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000b294:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b298:	f0 c9 00 01 	sub	r9,r8,1
8000b29c:	12 98       	mov	r8,r9
8000b29e:	a3 68       	lsl	r8,0x2
8000b2a0:	12 08       	add	r8,r9
8000b2a2:	a3 68       	lsl	r8,0x2
8000b2a4:	10 99       	mov	r9,r8
8000b2a6:	fe f8 02 1e 	ld.w	r8,pc[542]
8000b2aa:	f2 08 00 08 	add	r8,r9,r8
8000b2ae:	ef 48 ff f4 	st.w	r7[-12],r8

	if (!ptr_job->busy) {
8000b2b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2b6:	70 08       	ld.w	r8,r8[0x0]
8000b2b8:	e6 18 80 00 	andh	r8,0x8000,COH
8000b2bc:	e0 80 01 00 	breq	8000b4bc <udd_ep_trans_done+0x23c>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
8000b2c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2c4:	70 39       	ld.w	r9,r8[0xc]
8000b2c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2ca:	70 28       	ld.w	r8,r8[0x8]
8000b2cc:	10 39       	cp.w	r9,r8
8000b2ce:	e0 80 00 b7 	breq	8000b43c <udd_ep_trans_done+0x1bc>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
8000b2d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2d6:	70 29       	ld.w	r9,r8[0x8]
8000b2d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2dc:	70 38       	ld.w	r8,r8[0xc]
8000b2de:	10 19       	sub	r9,r8
8000b2e0:	ef 49 ff f8 	st.w	r7[-8],r9

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
8000b2e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b2e8:	e0 58 00 00 	cp.w	r8,65536
8000b2ec:	e0 88 00 0a 	brls	8000b300 <udd_ep_trans_done+0x80>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
8000b2f0:	e0 78 00 00 	mov	r8,65536
8000b2f4:	ef 48 ff f8 	st.w	r7[-8],r8

			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
8000b2f8:	30 08       	mov	r8,0
8000b2fa:	ef 48 ff f0 	st.w	r7[-16],r8
8000b2fe:	c0 68       	rjmp	8000b30a <udd_ep_trans_done+0x8a>
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
8000b300:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b304:	b1 68       	lsl	r8,0x10
8000b306:	ef 48 ff f0 	st.w	r7[-16],r8
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
8000b30a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b30e:	a3 68       	lsl	r8,0x2
8000b310:	e0 38 ff 00 	sub	r8,130816
8000b314:	70 08       	ld.w	r8,r8[0x0]
8000b316:	e2 18 01 00 	andl	r8,0x100,COH
8000b31a:	c2 10       	breq	8000b35c <udd_ep_trans_done+0xdc>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
8000b31c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b320:	a3 68       	lsl	r8,0x2
8000b322:	e0 38 ff 00 	sub	r8,130816
8000b326:	70 08       	ld.w	r8,r8[0x0]
8000b328:	e2 18 00 70 	andl	r8,0x70,COH
8000b32c:	a5 88       	lsr	r8,0x4
8000b32e:	30 89       	mov	r9,8
8000b330:	f2 08 09 48 	lsl	r8,r9,r8
8000b334:	20 18       	sub	r8,1
8000b336:	10 99       	mov	r9,r8
8000b338:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b33c:	f3 e8 00 08 	and	r8,r9,r8
8000b340:	c3 10       	breq	8000b3a2 <udd_ep_trans_done+0x122>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
8000b342:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b346:	a3 b8       	sbr	r8,0x3
8000b348:	ef 48 ff f0 	st.w	r7[-16],r8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
8000b34c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b350:	72 08       	ld.w	r8,r9[0x0]
8000b352:	30 0a       	mov	r10,0
8000b354:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000b358:	93 08       	st.w	r9[0x0],r8
8000b35a:	c2 58       	rjmp	8000b3a4 <udd_ep_trans_done+0x124>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000b35c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b360:	a3 68       	lsl	r8,0x2
8000b362:	e0 38 ff 00 	sub	r8,130816
8000b366:	70 08       	ld.w	r8,r8[0x0]
8000b368:	e2 18 18 00 	andl	r8,0x1800,COH
8000b36c:	ab 98       	lsr	r8,0xb
8000b36e:	58 18       	cp.w	r8,1
8000b370:	c1 21       	brne	8000b394 <udd_ep_trans_done+0x114>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
8000b372:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b376:	a3 68       	lsl	r8,0x2
8000b378:	e0 38 ff 00 	sub	r8,130816
8000b37c:	70 08       	ld.w	r8,r8[0x0]
8000b37e:	e2 18 00 70 	andl	r8,0x70,COH
8000b382:	a5 88       	lsr	r8,0x4
8000b384:	30 89       	mov	r9,8
8000b386:	f2 08 09 48 	lsl	r8,r9,r8
8000b38a:	10 99       	mov	r9,r8
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000b38c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b390:	10 39       	cp.w	r9,r8
8000b392:	c0 93       	brcs	8000b3a4 <udd_ep_trans_done+0x124>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
8000b394:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b398:	e8 18 00 14 	orl	r8,0x14
8000b39c:	ef 48 ff f0 	st.w	r7[-16],r8
8000b3a0:	c0 28       	rjmp	8000b3a4 <udd_ep_trans_done+0x124>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
8000b3a2:	d7 03       	nop
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
8000b3a4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b3a8:	a5 68       	lsl	r8,0x4
8000b3aa:	e0 38 fd 00 	sub	r8,130304
8000b3ae:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b3b2:	72 1a       	ld.w	r10,r9[0x4]
8000b3b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b3b8:	72 39       	ld.w	r9,r9[0xc]
8000b3ba:	f4 09 00 09 	add	r9,r10,r9
8000b3be:	91 19       	st.w	r8[0x4],r9
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
8000b3c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b3c4:	e8 18 00 21 	orl	r8,0x21
8000b3c8:	ef 48 ff f0 	st.w	r7[-16],r8
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
8000b3cc:	f0 1f 00 3f 	mcall	8000b4c8 <udd_ep_trans_done+0x248>
8000b3d0:	18 98       	mov	r8,r12
8000b3d2:	ef 48 ff fc 	st.w	r7[-4],r8
		if ( !(udd_endpoint_dma_get_status(ep)
8000b3d6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b3da:	a5 68       	lsl	r8,0x4
8000b3dc:	e0 38 fd 00 	sub	r8,130304
8000b3e0:	70 38       	ld.w	r8,r8[0xc]
8000b3e2:	e2 18 00 10 	andl	r8,0x10,COH
8000b3e6:	c2 11       	brne	8000b428 <udd_ep_trans_done+0x1a8>
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
8000b3e8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b3ec:	a5 68       	lsl	r8,0x4
8000b3ee:	e0 38 fd 00 	sub	r8,130304
8000b3f2:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000b3f6:	91 29       	st.w	r8[0x8],r9
			ptr_job->nb_trans += next_trans;
8000b3f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b3fc:	70 39       	ld.w	r9,r8[0xc]
8000b3fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b402:	10 09       	add	r9,r8
8000b404:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b408:	91 39       	st.w	r8[0xc],r9
			udd_enable_endpoint_dma_interrupt(ep);
8000b40a:	fe 68 00 00 	mov	r8,-131072
8000b40e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b412:	20 19       	sub	r9,1
8000b414:	fc 1a 02 00 	movh	r10,0x200
8000b418:	f4 09 09 49 	lsl	r9,r10,r9
8000b41c:	91 69       	st.w	r8[0x18],r9
			cpu_irq_restore(flags);
8000b41e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b422:	f0 1f 00 2b 	mcall	8000b4cc <udd_ep_trans_done+0x24c>
			return;
8000b426:	c4 c8       	rjmp	8000b4be <udd_ep_trans_done+0x23e>
		}
		cpu_irq_restore(flags);
8000b428:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b42c:	f0 1f 00 28 	mcall	8000b4cc <udd_ep_trans_done+0x24c>

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
8000b430:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b434:	70 39       	ld.w	r9,r8[0xc]
8000b436:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b43a:	91 29       	st.w	r8[0x8],r9
	}
	if (Is_udd_endpoint_in(ep)) {
8000b43c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b440:	a3 68       	lsl	r8,0x2
8000b442:	e0 38 ff 00 	sub	r8,130816
8000b446:	70 08       	ld.w	r8,r8[0x0]
8000b448:	e2 18 01 00 	andl	r8,0x100,COH
8000b44c:	c2 f0       	breq	8000b4aa <udd_ep_trans_done+0x22a>
		if (ptr_job->b_shortpacket) {
8000b44e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b452:	70 08       	ld.w	r8,r8[0x0]
8000b454:	e6 18 40 00 	andh	r8,0x4000,COH
8000b458:	c2 90       	breq	8000b4aa <udd_ep_trans_done+0x22a>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
8000b45a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b45e:	a3 68       	lsl	r8,0x2
8000b460:	e0 38 fe a0 	sub	r8,130720
8000b464:	30 19       	mov	r9,1
8000b466:	91 09       	st.w	r8[0x0],r9
			if (Is_udd_write_enabled(ep)) {
8000b468:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b46c:	a3 68       	lsl	r8,0x2
8000b46e:	e0 38 fe d0 	sub	r8,130768
8000b472:	70 08       	ld.w	r8,r8[0x0]
8000b474:	e6 18 00 01 	andh	r8,0x1,COH
8000b478:	c0 80       	breq	8000b488 <udd_ep_trans_done+0x208>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
8000b47a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b47e:	a3 68       	lsl	r8,0x2
8000b480:	e0 38 fe 70 	sub	r8,130672
8000b484:	30 19       	mov	r9,1
8000b486:	91 09       	st.w	r8[0x0],r9
			}
			udd_enable_in_send_interrupt(ep);
8000b488:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b48c:	a3 68       	lsl	r8,0x2
8000b48e:	e0 38 fe 10 	sub	r8,130576
8000b492:	30 19       	mov	r9,1
8000b494:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(ep);
8000b496:	fe 68 00 00 	mov	r8,-131072
8000b49a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b49e:	e0 6a 10 00 	mov	r10,4096
8000b4a2:	f4 09 09 49 	lsl	r9,r10,r9
8000b4a6:	91 69       	st.w	r8[0x18],r9
			return;
8000b4a8:	c0 b8       	rjmp	8000b4be <udd_ep_trans_done+0x23e>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
8000b4aa:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b4ae:	10 9a       	mov	r10,r8
8000b4b0:	30 0b       	mov	r11,0
8000b4b2:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b4b6:	f0 1f 00 07 	mcall	8000b4d0 <udd_ep_trans_done+0x250>
8000b4ba:	c0 28       	rjmp	8000b4be <udd_ep_trans_done+0x23e>

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
8000b4bc:	d7 03       	nop
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
8000b4be:	2f bd       	sub	sp,-20
8000b4c0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b4c4:	00 00       	add	r0,r0
8000b4c6:	07 7c       	ld.ub	r12,--r3
8000b4c8:	80 00       	ld.sh	r0,r0[0x0]
8000b4ca:	98 0c       	ld.sh	r12,r12[0x0]
8000b4cc:	80 00       	ld.sh	r0,r0[0x0]
8000b4ce:	98 2a       	ld.sh	r10,r12[0x4]
8000b4d0:	80 00       	ld.sh	r0,r0[0x0]
8000b4d2:	b1 fc       	*unknown*

8000b4d4 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
8000b4d4:	eb cd 40 80 	pushm	r7,lr
8000b4d8:	1a 97       	mov	r7,sp
8000b4da:	20 3d       	sub	sp,12
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000b4dc:	30 18       	mov	r8,1
8000b4de:	ef 68 ff f7 	st.b	r7[-9],r8
8000b4e2:	cf 18       	rjmp	8000b6c4 <udd_ep_interrupt+0x1f0>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
8000b4e4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b4e8:	f0 c9 00 01 	sub	r9,r8,1
8000b4ec:	12 98       	mov	r8,r9
8000b4ee:	a3 68       	lsl	r8,0x2
8000b4f0:	12 08       	add	r8,r9
8000b4f2:	a3 68       	lsl	r8,0x2
8000b4f4:	10 99       	mov	r9,r8
8000b4f6:	4f a8       	lddpc	r8,8000b6dc <udd_ep_interrupt+0x208>
8000b4f8:	f2 08 00 08 	add	r8,r9,r8
8000b4fc:	ef 48 ff f8 	st.w	r7[-8],r8

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000b500:	fe 68 00 00 	mov	r8,-131072
8000b504:	70 49       	ld.w	r9,r8[0x10]
8000b506:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b50a:	20 18       	sub	r8,1
8000b50c:	fc 1a 02 00 	movh	r10,0x200
8000b510:	f4 08 09 48 	lsl	r8,r10,r8
8000b514:	f3 e8 00 08 	and	r8,r9,r8
8000b518:	c4 70       	breq	8000b5a6 <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
8000b51a:	fe 68 00 00 	mov	r8,-131072
8000b51e:	70 19       	ld.w	r9,r8[0x4]
8000b520:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b524:	20 18       	sub	r8,1
8000b526:	fc 1a 02 00 	movh	r10,0x200
8000b52a:	f4 08 09 48 	lsl	r8,r10,r8
8000b52e:	f3 e8 00 08 	and	r8,r9,r8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000b532:	c3 a0       	breq	8000b5a6 <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
8000b534:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b538:	a5 68       	lsl	r8,0x4
8000b53a:	e0 38 fd 00 	sub	r8,130304
8000b53e:	70 38       	ld.w	r8,r8[0xc]
8000b540:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b544:	5c 58       	castu.b	r8
8000b546:	c0 30       	breq	8000b54c <udd_ep_interrupt+0x78>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
8000b548:	30 18       	mov	r8,1
8000b54a:	cc 58       	rjmp	8000b6d4 <udd_ep_interrupt+0x200>
			}
			udd_disable_endpoint_dma_interrupt(ep);
8000b54c:	fe 68 00 00 	mov	r8,-131072
8000b550:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b554:	20 19       	sub	r9,1
8000b556:	fc 1a 02 00 	movh	r10,0x200
8000b55a:	f4 09 09 49 	lsl	r9,r10,r9
8000b55e:	91 59       	st.w	r8[0x14],r9
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
8000b560:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b564:	a5 68       	lsl	r8,0x4
8000b566:	e0 38 fd 00 	sub	r8,130304
8000b56a:	70 38       	ld.w	r8,r8[0xc]
8000b56c:	b1 88       	lsr	r8,0x10
8000b56e:	ef 48 ff fc 	st.w	r7[-4],r8
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
8000b572:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b576:	58 08       	cp.w	r8,0
8000b578:	c1 00       	breq	8000b598 <udd_ep_interrupt+0xc4>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
8000b57a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b57e:	70 39       	ld.w	r9,r8[0xc]
8000b580:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b584:	10 19       	sub	r9,r8
8000b586:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b58a:	91 39       	st.w	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
8000b58c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b590:	70 39       	ld.w	r9,r8[0xc]
8000b592:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b596:	91 29       	st.w	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
8000b598:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b59c:	10 9c       	mov	r12,r8
8000b59e:	f0 1f 00 51 	mcall	8000b6e0 <udd_ep_interrupt+0x20c>
			return true;
8000b5a2:	30 18       	mov	r8,1
8000b5a4:	c9 88       	rjmp	8000b6d4 <udd_ep_interrupt+0x200>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
8000b5a6:	fe 68 00 00 	mov	r8,-131072
8000b5aa:	70 49       	ld.w	r9,r8[0x10]
8000b5ac:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b5b0:	e0 6a 10 00 	mov	r10,4096
8000b5b4:	f4 08 09 48 	lsl	r8,r10,r8
8000b5b8:	f3 e8 00 08 	and	r8,r9,r8
8000b5bc:	c7 f0       	breq	8000b6ba <udd_ep_interrupt+0x1e6>
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
8000b5be:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b5c2:	a3 68       	lsl	r8,0x2
8000b5c4:	e0 38 fe 40 	sub	r8,130624
8000b5c8:	70 08       	ld.w	r8,r8[0x0]
8000b5ca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b5ce:	5c 58       	castu.b	r8
8000b5d0:	c2 b0       	breq	8000b626 <udd_ep_interrupt+0x152>
8000b5d2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b5d6:	a3 68       	lsl	r8,0x2
8000b5d8:	e0 38 fe d0 	sub	r8,130768
8000b5dc:	70 08       	ld.w	r8,r8[0x0]
8000b5de:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b5e2:	5c 58       	castu.b	r8
8000b5e4:	c2 10       	breq	8000b626 <udd_ep_interrupt+0x152>
				udd_disable_in_send_interrupt(ep);
8000b5e6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b5ea:	a3 68       	lsl	r8,0x2
8000b5ec:	e0 38 fd e0 	sub	r8,130528
8000b5f0:	30 19       	mov	r9,1
8000b5f2:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000b5f4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b5f8:	a3 68       	lsl	r8,0x2
8000b5fa:	e0 38 fe a0 	sub	r8,130720
8000b5fe:	30 19       	mov	r9,1
8000b600:	91 09       	st.w	r8[0x0],r9
				udd_ack_fifocon(ep);
8000b602:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b606:	a3 68       	lsl	r8,0x2
8000b608:	e0 38 fd e0 	sub	r8,130528
8000b60c:	e0 69 40 00 	mov	r9,16384
8000b610:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false, ep);
8000b612:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b616:	10 9a       	mov	r10,r8
8000b618:	30 0b       	mov	r11,0
8000b61a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b61e:	f0 1f 00 32 	mcall	8000b6e4 <udd_ep_interrupt+0x210>
				return true;
8000b622:	30 18       	mov	r8,1
8000b624:	c5 88       	rjmp	8000b6d4 <udd_ep_interrupt+0x200>
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
8000b626:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b62a:	a3 68       	lsl	r8,0x2
8000b62c:	e0 38 fe 40 	sub	r8,130624
8000b630:	70 08       	ld.w	r8,r8[0x0]
8000b632:	e2 18 10 00 	andl	r8,0x1000,COH
8000b636:	c4 20       	breq	8000b6ba <udd_ep_interrupt+0x1e6>
8000b638:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b63c:	a3 68       	lsl	r8,0x2
8000b63e:	e0 38 fe d0 	sub	r8,130768
8000b642:	70 08       	ld.w	r8,r8[0x0]
8000b644:	e2 18 30 00 	andl	r8,0x3000,COH
8000b648:	ad 88       	lsr	r8,0xc
8000b64a:	c3 81       	brne	8000b6ba <udd_ep_interrupt+0x1e6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
8000b64c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b650:	a3 68       	lsl	r8,0x2
8000b652:	e0 38 fd e0 	sub	r8,130528
8000b656:	e0 69 10 00 	mov	r9,4096
8000b65a:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
8000b65c:	fe 68 00 00 	mov	r8,-131072
8000b660:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b664:	e0 6a 10 00 	mov	r10,4096
8000b668:	f4 09 09 49 	lsl	r9,r10,r9
8000b66c:	91 59       	st.w	r8[0x14],r9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
8000b66e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b672:	72 08       	ld.w	r8,r9[0x0]
8000b674:	30 0a       	mov	r10,0
8000b676:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000b67a:	93 08       	st.w	r9[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
8000b67c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b680:	a3 68       	lsl	r8,0x2
8000b682:	e0 38 ff 00 	sub	r8,130816
8000b686:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b68a:	a3 69       	lsl	r9,0x2
8000b68c:	e0 39 ff 00 	sub	r9,130816
8000b690:	72 09       	ld.w	r9,r9[0x0]
8000b692:	a9 d9       	cbr	r9,0x9
8000b694:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
8000b696:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b69a:	a3 68       	lsl	r8,0x2
8000b69c:	e0 38 fe 10 	sub	r8,130576
8000b6a0:	e8 69 00 00 	mov	r9,524288
8000b6a4:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
8000b6a6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b6aa:	a3 68       	lsl	r8,0x2
8000b6ac:	e0 38 fe 10 	sub	r8,130576
8000b6b0:	e4 69 00 00 	mov	r9,262144
8000b6b4:	91 09       	st.w	r8[0x0],r9
				return true;
8000b6b6:	30 18       	mov	r8,1
8000b6b8:	c0 e8       	rjmp	8000b6d4 <udd_ep_interrupt+0x200>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000b6ba:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b6be:	2f f8       	sub	r8,-1
8000b6c0:	ef 68 ff f7 	st.b	r7[-9],r8
8000b6c4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b6c8:	30 28       	mov	r8,2
8000b6ca:	f0 09 18 00 	cp.b	r9,r8
8000b6ce:	fe 98 ff 0b 	brls	8000b4e4 <udd_ep_interrupt+0x10>
				udd_reset_data_toggle(ep);
				return true;
			}
		}
	}
	return false;
8000b6d2:	30 08       	mov	r8,0
}
8000b6d4:	10 9c       	mov	r12,r8
8000b6d6:	2f dd       	sub	sp,-12
8000b6d8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b6dc:	00 00       	add	r0,r0
8000b6de:	07 7c       	ld.ub	r12,--r3
8000b6e0:	80 00       	ld.sh	r0,r0[0x0]
8000b6e2:	b2 80       	st.b	r9[0x0],r0
8000b6e4:	80 00       	ld.sh	r0,r0[0x0]
8000b6e6:	b1 fc       	*unknown*

8000b6e8 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000b6e8:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000b6ec:	fe c0 ce ec 	sub	r0,pc,-12564

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
8000b6f0:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000b6f4:	d5 53       	csrf	0x15
  cp      r0, r1
8000b6f6:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
8000b6f8:	e0 61 02 48 	mov	r1,584
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
8000b6fc:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000b6fe:	c0 72       	brcc	8000b70c <idata_load_loop_end>
  cp      r0, r1
8000b700:	fe c2 c8 40 	sub	r2,pc,-14272

8000b704 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000b704:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
8000b706:	a1 24       	st.d	r0++,r4
  cp      r0, r1
8000b708:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000b70a:	cf d3       	brcs	8000b704 <idata_load_loop>

8000b70c <idata_load_loop_end>:
  mov     r2, 0
8000b70c:	e0 60 02 48 	mov	r0,584
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000b710:	e0 61 0f c8 	mov	r1,4040
  cp      r0, r1
  brlo    udata_clear_loop
8000b714:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000b716:	c0 62       	brcc	8000b722 <udata_clear_loop_end>
8000b718:	30 02       	mov	r2,0
8000b71a:	30 03       	mov	r3,0

8000b71c <udata_clear_loop>:
8000b71c:	a1 22       	st.d	r0++,r2
8000b71e:	02 30       	cp.w	r0,r1
8000b720:	cf e3       	brcs	8000b71c <udata_clear_loop>

8000b722 <udata_clear_loop_end>:
8000b722:	fe cf d6 fe 	sub	pc,pc,-10498
8000b726:	d7 03       	nop

8000b728 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8000b728:	eb cd 40 80 	pushm	r7,lr
8000b72c:	1a 97       	mov	r7,sp
8000b72e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000b730:	e1 b8 00 00 	mfsr	r8,0x0
8000b734:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8000b738:	d3 03       	ssrf	0x10

	return flags;
8000b73a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000b73e:	10 9c       	mov	r12,r8
8000b740:	2f fd       	sub	sp,-4
8000b742:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b746 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8000b746:	eb cd 40 80 	pushm	r7,lr
8000b74a:	1a 97       	mov	r7,sp
8000b74c:	20 1d       	sub	sp,4
8000b74e:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000b752:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b756:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8000b75a:	2f fd       	sub	sp,-4
8000b75c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b760 <osc_enable>:
#include <stdbool.h>
#include <stdint.h>
#include <avr32/io.h>

static inline void osc_enable(uint8_t id)
{
8000b760:	eb cd 40 80 	pushm	r7,lr
8000b764:	1a 97       	mov	r7,sp
8000b766:	20 3d       	sub	sp,12
8000b768:	18 98       	mov	r8,r12
8000b76a:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();
8000b76e:	f0 1f 00 2b 	mcall	8000b818 <osc_enable+0xb8>
8000b772:	18 98       	mov	r8,r12
8000b774:	ef 48 ff f8 	st.w	r7[-8],r8

	switch (id) {
8000b778:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b77c:	58 18       	cp.w	r8,1
8000b77e:	c1 c0       	breq	8000b7b6 <osc_enable+0x56>
8000b780:	58 28       	cp.w	r8,2
8000b782:	c3 10       	breq	8000b7e4 <osc_enable+0x84>
8000b784:	58 08       	cp.w	r8,0
8000b786:	c4 21       	brne	8000b80a <osc_enable+0xaa>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
8000b788:	e0 68 03 00 	mov	r8,768
8000b78c:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
8000b790:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b794:	e8 18 00 07 	orl	r8,0x7
8000b798:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl0 = oscctrl;
8000b79c:	fe 78 0c 00 	mov	r8,-62464
8000b7a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b7a4:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
8000b7a6:	fe 78 0c 00 	mov	r8,-62464
8000b7aa:	fe 79 0c 00 	mov	r9,-62464
8000b7ae:	72 09       	ld.w	r9,r9[0x0]
8000b7b0:	a3 a9       	sbr	r9,0x2
8000b7b2:	91 09       	st.w	r8[0x0],r9
		break;
8000b7b4:	c2 b8       	rjmp	8000b80a <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		oscctrl = OSC1_STARTUP_VALUE <<
8000b7b6:	e0 68 03 00 	mov	r8,768
8000b7ba:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL1_STARTUP_OFFSET;
		oscctrl |= OSC1_MODE_VALUE << AVR32_PM_OSCCTRL1_MODE_OFFSET;
8000b7be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b7c2:	e8 18 00 07 	orl	r8,0x7
8000b7c6:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl1 = oscctrl;
8000b7ca:	fe 78 0c 00 	mov	r8,-62464
8000b7ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b7d2:	91 b9       	st.w	r8[0x2c],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC1EN;
8000b7d4:	fe 78 0c 00 	mov	r8,-62464
8000b7d8:	fe 79 0c 00 	mov	r9,-62464
8000b7dc:	72 09       	ld.w	r9,r9[0x0]
8000b7de:	a3 b9       	sbr	r9,0x3
8000b7e0:	91 09       	st.w	r8[0x0],r9
		break;
8000b7e2:	c1 48       	rjmp	8000b80a <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
8000b7e4:	e2 68 00 00 	mov	r8,131072
8000b7e8:	ef 48 ff fc 	st.w	r7[-4],r8
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
8000b7ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b7f0:	a9 a8       	sbr	r8,0x8
8000b7f2:	ef 48 ff fc 	st.w	r7[-4],r8
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
8000b7f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b7fa:	a1 a8       	sbr	r8,0x0
8000b7fc:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl32 = oscctrl;
8000b800:	fe 78 0c 00 	mov	r8,-62464
8000b804:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b808:	91 c9       	st.w	r8[0x30],r9
	default:
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
8000b80a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b80e:	f0 1f 00 04 	mcall	8000b81c <osc_enable+0xbc>
}
8000b812:	2f dd       	sub	sp,-12
8000b814:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b818:	80 00       	ld.sh	r0,r0[0x0]
8000b81a:	b7 28       	st.d	r11++,r8
8000b81c:	80 00       	ld.sh	r0,r0[0x0]
8000b81e:	b7 46       	asr	r6,0x16

8000b820 <osc_is_ready>:
	}
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
8000b820:	eb cd 40 80 	pushm	r7,lr
8000b824:	1a 97       	mov	r7,sp
8000b826:	20 1d       	sub	sp,4
8000b828:	18 98       	mov	r8,r12
8000b82a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000b82e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b832:	58 18       	cp.w	r8,1
8000b834:	c0 d0       	breq	8000b84e <osc_is_ready+0x2e>
8000b836:	58 28       	cp.w	r8,2
8000b838:	c1 30       	breq	8000b85e <osc_is_ready+0x3e>
8000b83a:	58 08       	cp.w	r8,0
8000b83c:	c1 91       	brne	8000b86e <osc_is_ready+0x4e>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
8000b83e:	fe 78 0c 00 	mov	r8,-62464
8000b842:	71 58       	ld.w	r8,r8[0x54]
8000b844:	e2 18 00 80 	andl	r8,0x80,COH
8000b848:	5f 18       	srne	r8
8000b84a:	5c 58       	castu.b	r8
8000b84c:	c1 28       	rjmp	8000b870 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC1RDY));
8000b84e:	fe 78 0c 00 	mov	r8,-62464
8000b852:	71 58       	ld.w	r8,r8[0x54]
8000b854:	e2 18 01 00 	andl	r8,0x100,COH
8000b858:	5f 18       	srne	r8
8000b85a:	5c 58       	castu.b	r8
8000b85c:	c0 a8       	rjmp	8000b870 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC32RDY));
8000b85e:	fe 78 0c 00 	mov	r8,-62464
8000b862:	71 58       	ld.w	r8,r8[0x54]
8000b864:	e2 18 02 00 	andl	r8,0x200,COH
8000b868:	5f 18       	srne	r8
8000b86a:	5c 58       	castu.b	r8
8000b86c:	c0 28       	rjmp	8000b870 <osc_is_ready+0x50>
#endif

	default:
		/* unhandled_case(id); */
		return false;
8000b86e:	30 08       	mov	r8,0
	}
}
8000b870:	10 9c       	mov	r12,r8
8000b872:	2f fd       	sub	sp,-4
8000b874:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b878 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
8000b878:	eb cd 40 80 	pushm	r7,lr
8000b87c:	1a 97       	mov	r7,sp
8000b87e:	20 1d       	sub	sp,4
8000b880:	18 98       	mov	r8,r12
8000b882:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000b886:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b88a:	58 18       	cp.w	r8,1
8000b88c:	c0 a0       	breq	8000b8a0 <osc_get_rate+0x28>
8000b88e:	58 28       	cp.w	r8,2
8000b890:	c0 d0       	breq	8000b8aa <osc_get_rate+0x32>
8000b892:	58 08       	cp.w	r8,0
8000b894:	c0 e1       	brne	8000b8b0 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000b896:	e0 68 1b 00 	mov	r8,6912
8000b89a:	ea 18 00 b7 	orh	r8,0xb7
8000b89e:	c0 a8       	rjmp	8000b8b2 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000b8a0:	e0 68 44 00 	mov	r8,17408
8000b8a4:	ea 18 00 ac 	orh	r8,0xac
8000b8a8:	c0 58       	rjmp	8000b8b2 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000b8aa:	e0 68 80 00 	mov	r8,32768
8000b8ae:	c0 28       	rjmp	8000b8b2 <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000b8b0:	30 08       	mov	r8,0
	}
}
8000b8b2:	10 9c       	mov	r12,r8
8000b8b4:	2f fd       	sub	sp,-4
8000b8b6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b8ba:	d7 03       	nop

8000b8bc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8000b8bc:	eb cd 40 80 	pushm	r7,lr
8000b8c0:	1a 97       	mov	r7,sp
8000b8c2:	20 1d       	sub	sp,4
8000b8c4:	18 98       	mov	r8,r12
8000b8c6:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8000b8ca:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b8ce:	10 9c       	mov	r12,r8
8000b8d0:	f0 1f 00 05 	mcall	8000b8e4 <osc_wait_ready+0x28>
8000b8d4:	18 98       	mov	r8,r12
8000b8d6:	ec 18 00 01 	eorl	r8,0x1
8000b8da:	5c 58       	castu.b	r8
8000b8dc:	cf 71       	brne	8000b8ca <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
8000b8de:	2f fd       	sub	sp,-4
8000b8e0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b8e4:	80 00       	ld.sh	r0,r0[0x0]
8000b8e6:	b8 20       	st.h	r12[0x4],r0

8000b8e8 <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8000b8e8:	eb cd 40 80 	pushm	r7,lr
8000b8ec:	1a 97       	mov	r7,sp
8000b8ee:	20 2d       	sub	sp,8
8000b8f0:	ef 4c ff fc 	st.w	r7[-4],r12
8000b8f4:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
8000b8f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8fc:	70 09       	ld.w	r9,r8[0x0]
8000b8fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b902:	2f e8       	sub	r8,-2
8000b904:	30 1a       	mov	r10,1
8000b906:	f4 08 09 48 	lsl	r8,r10,r8
8000b90a:	10 49       	or	r9,r8
8000b90c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b910:	91 09       	st.w	r8[0x0],r9
}
8000b912:	2f ed       	sub	sp,-8
8000b914:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b918 <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8000b918:	eb cd 40 80 	pushm	r7,lr
8000b91c:	1a 97       	mov	r7,sp
8000b91e:	20 5d       	sub	sp,20
8000b920:	ef 4c ff f8 	st.w	r7[-8],r12
8000b924:	ef 4b ff f4 	st.w	r7[-12],r11
8000b928:	ef 4a ff f0 	st.w	r7[-16],r10
8000b92c:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8000b930:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b934:	5c 58       	castu.b	r8
8000b936:	10 9c       	mov	r12,r8
8000b938:	f0 1f 00 2e 	mcall	8000b9f0 <pll_config_init+0xd8>
8000b93c:	18 99       	mov	r9,r12
8000b93e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b942:	f2 08 02 48 	mul	r8,r9,r8
8000b946:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8000b94a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b94e:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000b952:	f0 09 0d 08 	divu	r8,r8,r9
8000b956:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8000b95a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b95e:	30 09       	mov	r9,0
8000b960:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8000b962:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b966:	e0 69 b3 ff 	mov	r9,46079
8000b96a:	ea 19 04 c4 	orh	r9,0x4c4
8000b96e:	12 38       	cp.w	r8,r9
8000b970:	e0 8b 00 16 	brhi	8000b99c <pll_config_init+0x84>
8000b974:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b978:	58 88       	cp.w	r8,8
8000b97a:	e0 8b 00 11 	brhi	8000b99c <pll_config_init+0x84>
		mul *= 2;
8000b97e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b982:	a1 78       	lsl	r8,0x1
8000b984:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8000b988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b98c:	a1 78       	lsl	r8,0x1
8000b98e:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8000b992:	30 1b       	mov	r11,1
8000b994:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b998:	f0 1f 00 17 	mcall	8000b9f4 <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8000b99c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b9a0:	e0 69 fe 7f 	mov	r9,65151
8000b9a4:	ea 19 0a 21 	orh	r9,0xa21
8000b9a8:	12 38       	cp.w	r8,r9
8000b9aa:	e0 8b 00 07 	brhi	8000b9b8 <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8000b9ae:	30 0b       	mov	r11,0
8000b9b0:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b9b4:	f0 1f 00 10 	mcall	8000b9f4 <pll_config_init+0xdc>

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000b9b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b9bc:	70 09       	ld.w	r9,r8[0x0]
8000b9be:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b9c2:	20 18       	sub	r8,1
8000b9c4:	f0 0a 15 10 	lsl	r10,r8,0x10
			| (div << AVR32_PM_PLL0_PLLDIV)
8000b9c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b9cc:	a9 68       	lsl	r8,0x8
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
8000b9ce:	10 4a       	or	r10,r8
			| (src << AVR32_PM_PLL0_PLLOSC);
8000b9d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b9d4:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000b9d6:	f5 e8 10 08 	or	r8,r10,r8
8000b9da:	f3 e8 10 08 	or	r8,r9,r8
8000b9de:	10 99       	mov	r9,r8
8000b9e0:	ea 19 3f 00 	orh	r9,0x3f00
8000b9e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b9e8:	91 09       	st.w	r8[0x0],r9
			| (div << AVR32_PM_PLL0_PLLDIV)
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
			| (src << AVR32_PM_PLL0_PLLOSC);
}
8000b9ea:	2f bd       	sub	sp,-20
8000b9ec:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b9f0:	80 00       	ld.sh	r0,r0[0x0]
8000b9f2:	b8 78       	st.h	r12[0xe],r8
8000b9f4:	80 00       	ld.sh	r0,r0[0x0]
8000b9f6:	b8 e8       	st.b	r12[0x6],r8

8000b9f8 <pll_enable>:
	AVR32_PM.pll[pll_id] = cfg->ctrl;
}

static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
8000b9f8:	eb cd 40 80 	pushm	r7,lr
8000b9fc:	1a 97       	mov	r7,sp
8000b9fe:	20 2d       	sub	sp,8
8000ba00:	ef 4c ff fc 	st.w	r7[-4],r12
8000ba04:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
8000ba08:	fe 78 0c 00 	mov	r8,-62464
8000ba0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ba10:	ee fa ff fc 	ld.w	r10,r7[-4]
8000ba14:	74 0a       	ld.w	r10,r10[0x0]
8000ba16:	a1 aa       	sbr	r10,0x0
8000ba18:	2f 89       	sub	r9,-8
8000ba1a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000ba1e:	2f ed       	sub	sp,-8
8000ba20:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ba24 <pll_is_locked>:

	AVR32_PM.pll[pll_id] = 0;
}

static inline bool pll_is_locked(unsigned int pll_id)
{
8000ba24:	eb cd 40 80 	pushm	r7,lr
8000ba28:	1a 97       	mov	r7,sp
8000ba2a:	20 1d       	sub	sp,4
8000ba2c:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
8000ba30:	fe 78 0c 00 	mov	r8,-62464
8000ba34:	71 59       	ld.w	r9,r8[0x54]
8000ba36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba3a:	30 1a       	mov	r10,1
8000ba3c:	f4 08 09 48 	lsl	r8,r10,r8
8000ba40:	f3 e8 00 08 	and	r8,r9,r8
8000ba44:	5f 18       	srne	r8
8000ba46:	5c 58       	castu.b	r8
}
8000ba48:	10 9c       	mov	r12,r8
8000ba4a:	2f fd       	sub	sp,-4
8000ba4c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ba50 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
8000ba50:	eb cd 40 80 	pushm	r7,lr
8000ba54:	1a 97       	mov	r7,sp
8000ba56:	20 1d       	sub	sp,4
8000ba58:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000ba5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba60:	58 08       	cp.w	r8,0
8000ba62:	c0 40       	breq	8000ba6a <pll_enable_source+0x1a>
8000ba64:	58 18       	cp.w	r8,1
8000ba66:	c1 10       	breq	8000ba88 <pll_enable_source+0x38>
8000ba68:	c2 08       	rjmp	8000baa8 <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000ba6a:	30 0c       	mov	r12,0
8000ba6c:	f0 1f 00 11 	mcall	8000bab0 <pll_enable_source+0x60>
8000ba70:	18 98       	mov	r8,r12
8000ba72:	ec 18 00 01 	eorl	r8,0x1
8000ba76:	5c 58       	castu.b	r8
8000ba78:	c1 70       	breq	8000baa6 <pll_enable_source+0x56>
			osc_enable(OSC_ID_OSC0);
8000ba7a:	30 0c       	mov	r12,0
8000ba7c:	f0 1f 00 0e 	mcall	8000bab4 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC0);
8000ba80:	30 0c       	mov	r12,0
8000ba82:	f0 1f 00 0e 	mcall	8000bab8 <pll_enable_source+0x68>
		}
		break;
8000ba86:	c1 18       	rjmp	8000baa8 <pll_enable_source+0x58>

	case PLL_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000ba88:	30 1c       	mov	r12,1
8000ba8a:	f0 1f 00 0a 	mcall	8000bab0 <pll_enable_source+0x60>
8000ba8e:	18 98       	mov	r8,r12
8000ba90:	ec 18 00 01 	eorl	r8,0x1
8000ba94:	5c 58       	castu.b	r8
8000ba96:	c0 90       	breq	8000baa8 <pll_enable_source+0x58>
			osc_enable(OSC_ID_OSC1);
8000ba98:	30 1c       	mov	r12,1
8000ba9a:	f0 1f 00 07 	mcall	8000bab4 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC1);
8000ba9e:	30 1c       	mov	r12,1
8000baa0:	f0 1f 00 06 	mcall	8000bab8 <pll_enable_source+0x68>
8000baa4:	c0 28       	rjmp	8000baa8 <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000baa6:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000baa8:	2f fd       	sub	sp,-4
8000baaa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000baae:	00 00       	add	r0,r0
8000bab0:	80 00       	ld.sh	r0,r0[0x0]
8000bab2:	b8 20       	st.h	r12[0x4],r0
8000bab4:	80 00       	ld.sh	r0,r0[0x0]
8000bab6:	b7 60       	lsl	r0,0x16
8000bab8:	80 00       	ld.sh	r0,r0[0x0]
8000baba:	b8 bc       	st.b	r12[0x3],r12

8000babc <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
8000babc:	eb cd 40 80 	pushm	r7,lr
8000bac0:	1a 97       	mov	r7,sp
8000bac2:	20 2d       	sub	sp,8
8000bac4:	ef 4c ff f8 	st.w	r7[-8],r12
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
8000bac8:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bacc:	f0 1f 00 15 	mcall	8000bb20 <pll_enable_config_defaults+0x64>
8000bad0:	18 98       	mov	r8,r12
8000bad2:	58 08       	cp.w	r8,0
8000bad4:	c2 11       	brne	8000bb16 <pll_enable_config_defaults+0x5a>
		return; // Pll already running
	}
	switch (pll_id) {
8000bad6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bada:	58 08       	cp.w	r8,0
8000badc:	c0 c1       	brne	8000baf4 <pll_enable_config_defaults+0x38>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
8000bade:	30 0c       	mov	r12,0
8000bae0:	f0 1f 00 11 	mcall	8000bb24 <pll_enable_config_defaults+0x68>
		pll_config_init(&pllcfg,
8000bae4:	ee c8 00 04 	sub	r8,r7,4
8000bae8:	30 b9       	mov	r9,11
8000baea:	30 2a       	mov	r10,2
8000baec:	30 0b       	mov	r11,0
8000baee:	10 9c       	mov	r12,r8
8000baf0:	f0 1f 00 0e 	mcall	8000bb28 <pll_enable_config_defaults+0x6c>
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
8000baf4:	ee c8 00 04 	sub	r8,r7,4
8000baf8:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bafc:	10 9c       	mov	r12,r8
8000bafe:	f0 1f 00 0c 	mcall	8000bb2c <pll_enable_config_defaults+0x70>
	while (!pll_is_locked(pll_id));
8000bb02:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bb06:	f0 1f 00 07 	mcall	8000bb20 <pll_enable_config_defaults+0x64>
8000bb0a:	18 98       	mov	r8,r12
8000bb0c:	ec 18 00 01 	eorl	r8,0x1
8000bb10:	5c 58       	castu.b	r8
8000bb12:	cf 81       	brne	8000bb02 <pll_enable_config_defaults+0x46>
8000bb14:	c0 28       	rjmp	8000bb18 <pll_enable_config_defaults+0x5c>
static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
		return; // Pll already running
8000bb16:	d7 03       	nop
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
}
8000bb18:	2f ed       	sub	sp,-8
8000bb1a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb1e:	00 00       	add	r0,r0
8000bb20:	80 00       	ld.sh	r0,r0[0x0]
8000bb22:	ba 24       	st.h	sp[0x4],r4
8000bb24:	80 00       	ld.sh	r0,r0[0x0]
8000bb26:	ba 50       	st.h	sp[0xa],r0
8000bb28:	80 00       	ld.sh	r0,r0[0x0]
8000bb2a:	b9 18       	ld.d	r8,--r12
8000bb2c:	80 00       	ld.sh	r0,r0[0x0]
8000bb2e:	b9 f8       	*unknown*

8000bb30 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8000bb30:	eb cd 40 80 	pushm	r7,lr
8000bb34:	1a 97       	mov	r7,sp
8000bb36:	20 2d       	sub	sp,8
8000bb38:	ef 4c ff fc 	st.w	r7[-4],r12
8000bb3c:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8000bb40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb44:	30 09       	mov	r9,0
8000bb46:	91 09       	st.w	r8[0x0],r9
}
8000bb48:	2f ed       	sub	sp,-8
8000bb4a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bb4e <genclk_config_set_source>:
	AVR32_PM.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8000bb4e:	eb cd 40 80 	pushm	r7,lr
8000bb52:	1a 97       	mov	r7,sp
8000bb54:	20 3d       	sub	sp,12
8000bb56:	ef 4c ff f8 	st.w	r7[-8],r12
8000bb5a:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t mask;

	mask = AVR32_PM_GCCTRL_OSCSEL_MASK | AVR32_PM_GCCTRL_PLLSEL_MASK;
8000bb5e:	30 38       	mov	r8,3
8000bb60:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(!(src & ~mask));

	cfg->ctrl = (cfg->ctrl & ~mask) | (src << AVR32_PM_GCCTRL_OSCSEL);
8000bb64:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb68:	70 09       	ld.w	r9,r8[0x0]
8000bb6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb6e:	5c d8       	com	r8
8000bb70:	10 69       	and	r9,r8
8000bb72:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb76:	10 49       	or	r9,r8
8000bb78:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb7c:	91 09       	st.w	r8[0x0],r9
}
8000bb7e:	2f dd       	sub	sp,-12
8000bb80:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bb84 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8000bb84:	eb cd 40 80 	pushm	r7,lr
8000bb88:	1a 97       	mov	r7,sp
8000bb8a:	20 2d       	sub	sp,8
8000bb8c:	ef 4c ff fc 	st.w	r7[-4],r12
8000bb90:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert((divider > 0) && (divider <= GENCLK_DIV_MAX));

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_PM_GCCTRL_DIVEN_MASK | AVR32_PM_GCCTRL_DIV_MASK);
8000bb94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb98:	70 08       	ld.w	r8,r8[0x0]
8000bb9a:	10 99       	mov	r9,r8
8000bb9c:	e0 19 00 ef 	andl	r9,0xef
8000bba0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bba4:	91 09       	st.w	r8[0x0],r9

	if (divider > 1) {
8000bba6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bbaa:	58 18       	cp.w	r8,1
8000bbac:	e0 88 00 17 	brls	8000bbda <genclk_config_set_divider+0x56>
		cfg->ctrl |= 1U << AVR32_PM_GCCTRL_DIVEN;
8000bbb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbb4:	70 08       	ld.w	r8,r8[0x0]
8000bbb6:	10 99       	mov	r9,r8
8000bbb8:	a5 a9       	sbr	r9,0x4
8000bbba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbbe:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_PM_GCCTRL_DIV;
8000bbc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbc4:	70 09       	ld.w	r9,r8[0x0]
8000bbc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bbca:	2f f8       	sub	r8,-1
8000bbcc:	a1 98       	lsr	r8,0x1
8000bbce:	20 18       	sub	r8,1
8000bbd0:	a9 68       	lsl	r8,0x8
8000bbd2:	10 49       	or	r9,r8
8000bbd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbd8:	91 09       	st.w	r8[0x0],r9
	}
}
8000bbda:	2f ed       	sub	sp,-8
8000bbdc:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bbe0 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8000bbe0:	eb cd 40 80 	pushm	r7,lr
8000bbe4:	1a 97       	mov	r7,sp
8000bbe6:	20 2d       	sub	sp,8
8000bbe8:	ef 4c ff fc 	st.w	r7[-4],r12
8000bbec:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
8000bbf0:	fe 78 0c 00 	mov	r8,-62464
8000bbf4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bbf8:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bbfc:	74 0a       	ld.w	r10,r10[0x0]
8000bbfe:	a3 aa       	sbr	r10,0x2
8000bc00:	2e 89       	sub	r9,-24
8000bc02:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000bc06:	2f ed       	sub	sp,-8
8000bc08:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bc0c <genclk_enable_source>:
{
	AVR32_PM.gcctrl[id] = 0;
}

static inline void genclk_enable_source(enum genclk_source src)
{
8000bc0c:	eb cd 40 80 	pushm	r7,lr
8000bc10:	1a 97       	mov	r7,sp
8000bc12:	20 1d       	sub	sp,4
8000bc14:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000bc18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc1c:	58 18       	cp.w	r8,1
8000bc1e:	c1 40       	breq	8000bc46 <genclk_enable_source+0x3a>
8000bc20:	c0 43       	brcs	8000bc28 <genclk_enable_source+0x1c>
8000bc22:	58 28       	cp.w	r8,2
8000bc24:	c2 00       	breq	8000bc64 <genclk_enable_source+0x58>
8000bc26:	c2 68       	rjmp	8000bc72 <genclk_enable_source+0x66>
#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000bc28:	30 0c       	mov	r12,0
8000bc2a:	f0 1f 00 14 	mcall	8000bc78 <genclk_enable_source+0x6c>
8000bc2e:	18 98       	mov	r8,r12
8000bc30:	ec 18 00 01 	eorl	r8,0x1
8000bc34:	5c 58       	castu.b	r8
8000bc36:	c1 b0       	breq	8000bc6c <genclk_enable_source+0x60>
			osc_enable(OSC_ID_OSC0);
8000bc38:	30 0c       	mov	r12,0
8000bc3a:	f0 1f 00 11 	mcall	8000bc7c <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC0);
8000bc3e:	30 0c       	mov	r12,0
8000bc40:	f0 1f 00 10 	mcall	8000bc80 <genclk_enable_source+0x74>
		}
		break;
8000bc44:	c1 78       	rjmp	8000bc72 <genclk_enable_source+0x66>
#endif

#ifdef BOARD_OSC1_HZ
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000bc46:	30 1c       	mov	r12,1
8000bc48:	f0 1f 00 0c 	mcall	8000bc78 <genclk_enable_source+0x6c>
8000bc4c:	18 98       	mov	r8,r12
8000bc4e:	ec 18 00 01 	eorl	r8,0x1
8000bc52:	5c 58       	castu.b	r8
8000bc54:	c0 e0       	breq	8000bc70 <genclk_enable_source+0x64>
			osc_enable(OSC_ID_OSC1);
8000bc56:	30 1c       	mov	r12,1
8000bc58:	f0 1f 00 09 	mcall	8000bc7c <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC1);
8000bc5c:	30 1c       	mov	r12,1
8000bc5e:	f0 1f 00 09 	mcall	8000bc80 <genclk_enable_source+0x74>
		}
		break;
8000bc62:	c0 88       	rjmp	8000bc72 <genclk_enable_source+0x66>
#endif

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000bc64:	30 0c       	mov	r12,0
8000bc66:	f0 1f 00 08 	mcall	8000bc84 <genclk_enable_source+0x78>
8000bc6a:	c0 48       	rjmp	8000bc72 <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000bc6c:	d7 03       	nop
8000bc6e:	c0 28       	rjmp	8000bc72 <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
			osc_enable(OSC_ID_OSC1);
			osc_wait_ready(OSC_ID_OSC1);
		}
		break;
8000bc70:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000bc72:	2f fd       	sub	sp,-4
8000bc74:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc78:	80 00       	ld.sh	r0,r0[0x0]
8000bc7a:	b8 20       	st.h	r12[0x4],r0
8000bc7c:	80 00       	ld.sh	r0,r0[0x0]
8000bc7e:	b7 60       	lsl	r0,0x16
8000bc80:	80 00       	ld.sh	r0,r0[0x0]
8000bc82:	b8 bc       	st.b	r12[0x3],r12
8000bc84:	80 00       	ld.sh	r0,r0[0x0]
8000bc86:	ba bc       	st.b	sp[0x3],r12

8000bc88 <genclk_enable_config>:
 * \param id      The ID of the generic clock.
 * \param src     The source clock of the generic clock.
 * \param divider The divider used to generate the generic clock.
 */
static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
8000bc88:	eb cd 40 80 	pushm	r7,lr
8000bc8c:	1a 97       	mov	r7,sp
8000bc8e:	20 4d       	sub	sp,16
8000bc90:	ef 4c ff f8 	st.w	r7[-8],r12
8000bc94:	ef 4b ff f4 	st.w	r7[-12],r11
8000bc98:	ef 4a ff f0 	st.w	r7[-16],r10
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, id);
8000bc9c:	ee c8 00 04 	sub	r8,r7,4
8000bca0:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bca4:	10 9c       	mov	r12,r8
8000bca6:	f0 1f 00 10 	mcall	8000bce4 <genclk_enable_config+0x5c>
	genclk_enable_source(src);
8000bcaa:	ee fc ff f4 	ld.w	r12,r7[-12]
8000bcae:	f0 1f 00 0f 	mcall	8000bce8 <genclk_enable_config+0x60>
	genclk_config_set_source(&gcfg, src);
8000bcb2:	ee c8 00 04 	sub	r8,r7,4
8000bcb6:	ee fb ff f4 	ld.w	r11,r7[-12]
8000bcba:	10 9c       	mov	r12,r8
8000bcbc:	f0 1f 00 0c 	mcall	8000bcec <genclk_enable_config+0x64>
	genclk_config_set_divider(&gcfg, divider);
8000bcc0:	ee c8 00 04 	sub	r8,r7,4
8000bcc4:	ee fb ff f0 	ld.w	r11,r7[-16]
8000bcc8:	10 9c       	mov	r12,r8
8000bcca:	f0 1f 00 0a 	mcall	8000bcf0 <genclk_enable_config+0x68>
	genclk_enable(&gcfg, id);
8000bcce:	ee c8 00 04 	sub	r8,r7,4
8000bcd2:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bcd6:	10 9c       	mov	r12,r8
8000bcd8:	f0 1f 00 07 	mcall	8000bcf4 <genclk_enable_config+0x6c>
}
8000bcdc:	2f cd       	sub	sp,-16
8000bcde:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bce2:	00 00       	add	r0,r0
8000bce4:	80 00       	ld.sh	r0,r0[0x0]
8000bce6:	bb 30       	mul	r0,sp
8000bce8:	80 00       	ld.sh	r0,r0[0x0]
8000bcea:	bc 0c       	st.h	lr[0x0],r12
8000bcec:	80 00       	ld.sh	r0,r0[0x0]
8000bcee:	bb 4e       	asr	lr,0x1a
8000bcf0:	80 00       	ld.sh	r0,r0[0x0]
8000bcf2:	bb 84       	lsr	r4,0x1a
8000bcf4:	80 00       	ld.sh	r0,r0[0x0]
8000bcf6:	bb e0       	*unknown*

8000bcf8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000bcf8:	eb cd 40 80 	pushm	r7,lr
8000bcfc:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000bcfe:	30 0c       	mov	r12,0
8000bd00:	f0 1f 00 06 	mcall	8000bd18 <sysclk_get_main_hz+0x20>
8000bd04:	18 99       	mov	r9,r12
8000bd06:	12 98       	mov	r8,r9
8000bd08:	a3 68       	lsl	r8,0x2
8000bd0a:	12 08       	add	r8,r9
8000bd0c:	a1 78       	lsl	r8,0x1
8000bd0e:	12 08       	add	r8,r9
8000bd10:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000bd12:	10 9c       	mov	r12,r8
8000bd14:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd18:	80 00       	ld.sh	r0,r0[0x0]
8000bd1a:	b8 78       	st.h	r12[0xe],r8

8000bd1c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000bd1c:	eb cd 40 80 	pushm	r7,lr
8000bd20:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000bd22:	f0 1f 00 04 	mcall	8000bd30 <sysclk_get_cpu_hz+0x14>
8000bd26:	18 98       	mov	r8,r12
}
8000bd28:	10 9c       	mov	r12,r8
8000bd2a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd2e:	00 00       	add	r0,r0
8000bd30:	80 00       	ld.sh	r0,r0[0x0]
8000bd32:	bc f8       	st.b	lr[0x7],r8

8000bd34 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000bd34:	eb cd 40 80 	pushm	r7,lr
8000bd38:	1a 97       	mov	r7,sp
8000bd3a:	20 1d       	sub	sp,4
8000bd3c:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000bd40:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bd44:	30 1c       	mov	r12,1
8000bd46:	f0 1f 00 03 	mcall	8000bd50 <sysclk_enable_hsb_module+0x1c>
}
8000bd4a:	2f fd       	sub	sp,-4
8000bd4c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd50:	80 00       	ld.sh	r0,r0[0x0]
8000bd52:	bd a8       	sbr	r8,0x1c

8000bd54 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint_fast8_t src)
{
8000bd54:	eb cd 40 80 	pushm	r7,lr
8000bd58:	1a 97       	mov	r7,sp
8000bd5a:	20 3d       	sub	sp,12
8000bd5c:	ef 4c ff f4 	st.w	r7[-12],r12
	irqflags_t flags;
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
8000bd60:	f0 1f 00 10 	mcall	8000bda0 <sysclk_set_source+0x4c>
8000bd64:	18 98       	mov	r8,r12
8000bd66:	ef 48 ff f8 	st.w	r7[-8],r8
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
8000bd6a:	fe 78 0c 00 	mov	r8,-62464
8000bd6e:	70 08       	ld.w	r8,r8[0x0]
8000bd70:	e0 18 ff fc 	andl	r8,0xfffc
8000bd74:	ef 48 ff fc 	st.w	r7[-4],r8
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
8000bd78:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bd7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd80:	f3 e8 10 08 	or	r8,r9,r8
8000bd84:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.mcctrl = mcctrl;
8000bd88:	fe 78 0c 00 	mov	r8,-62464
8000bd8c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bd90:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000bd92:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bd96:	f0 1f 00 04 	mcall	8000bda4 <sysclk_set_source+0x50>
}
8000bd9a:	2f dd       	sub	sp,-12
8000bd9c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bda0:	80 00       	ld.sh	r0,r0[0x0]
8000bda2:	b7 28       	st.d	r11++,r8
8000bda4:	80 00       	ld.sh	r0,r0[0x0]
8000bda6:	b7 46       	asr	r6,0x16

8000bda8 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8000bda8:	eb cd 40 80 	pushm	r7,lr
8000bdac:	1a 97       	mov	r7,sp
8000bdae:	20 4d       	sub	sp,16
8000bdb0:	ef 4c ff f4 	st.w	r7[-12],r12
8000bdb4:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8000bdb8:	f0 1f 00 17 	mcall	8000be14 <sysclk_priv_enable_module+0x6c>
8000bdbc:	18 98       	mov	r8,r12
8000bdbe:	ef 48 ff f8 	st.w	r7[-8],r8

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000bdc2:	fe 78 0c 00 	mov	r8,-62464
8000bdc6:	71 58       	ld.w	r8,r8[0x54]
8000bdc8:	e2 18 00 40 	andl	r8,0x40,COH
8000bdcc:	cf b0       	breq	8000bdc2 <sysclk_priv_enable_module+0x1a>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000bdce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bdd2:	a3 68       	lsl	r8,0x2
8000bdd4:	e0 28 f3 f8 	sub	r8,62456
8000bdd8:	70 08       	ld.w	r8,r8[0x0]
8000bdda:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8000bdde:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bde2:	30 19       	mov	r9,1
8000bde4:	f2 08 09 48 	lsl	r8,r9,r8
8000bde8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bdec:	f3 e8 10 08 	or	r8,r9,r8
8000bdf0:	ef 48 ff fc 	st.w	r7[-4],r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000bdf4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bdf8:	a3 68       	lsl	r8,0x2
8000bdfa:	e0 28 f3 f8 	sub	r8,62456
8000bdfe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000be02:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8000be04:	ee fc ff f8 	ld.w	r12,r7[-8]
8000be08:	f0 1f 00 04 	mcall	8000be18 <sysclk_priv_enable_module+0x70>
}
8000be0c:	2f cd       	sub	sp,-16
8000be0e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be12:	00 00       	add	r0,r0
8000be14:	80 00       	ld.sh	r0,r0[0x0]
8000be16:	b7 28       	st.d	r11++,r8
8000be18:	80 00       	ld.sh	r0,r0[0x0]
8000be1a:	b7 46       	asr	r6,0x16

8000be1c <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
8000be1c:	eb cd 40 80 	pushm	r7,lr
8000be20:	1a 97       	mov	r7,sp
8000be22:	20 3d       	sub	sp,12
8000be24:	ef 4c ff f4 	st.w	r7[-12],r12
	unsigned int pbus_id = 0;
8000be28:	30 08       	mov	r8,0
8000be2a:	ef 48 ff f8 	st.w	r7[-8],r8
	irqflags_t   flags;

	/* The AES module is on PBC, others are on PBB */
	if (index == SYSCLK_AES)
8000be2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000be32:	58 98       	cp.w	r8,9
8000be34:	c0 41       	brne	8000be3c <sysclk_enable_pbb_module+0x20>
		pbus_id = 1;
8000be36:	30 18       	mov	r8,1
8000be38:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
8000be3c:	f0 1f 00 15 	mcall	8000be90 <sysclk_enable_pbb_module+0x74>
8000be40:	18 98       	mov	r8,r12
8000be42:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!sysclk_bus_refcount[pbus_id])
8000be46:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be4a:	49 39       	lddpc	r9,8000be94 <sysclk_enable_pbb_module+0x78>
8000be4c:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000be50:	58 08       	cp.w	r8,0
8000be52:	c0 91       	brne	8000be64 <sysclk_enable_pbb_module+0x48>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
8000be54:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be58:	a1 78       	lsl	r8,0x1
8000be5a:	2f f8       	sub	r8,-1
8000be5c:	a1 78       	lsl	r8,0x1
8000be5e:	10 9c       	mov	r12,r8
8000be60:	f0 1f 00 0e 	mcall	8000be98 <sysclk_enable_pbb_module+0x7c>
	sysclk_bus_refcount[pbus_id]++;
8000be64:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be68:	48 b9       	lddpc	r9,8000be94 <sysclk_enable_pbb_module+0x78>
8000be6a:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000be6e:	2f f9       	sub	r9,-1
8000be70:	5c 59       	castu.b	r9
8000be72:	48 9a       	lddpc	r10,8000be94 <sysclk_enable_pbb_module+0x78>
8000be74:	f4 08 0b 09 	st.b	r10[r8],r9

	cpu_irq_restore(flags);
8000be78:	ee fc ff fc 	ld.w	r12,r7[-4]
8000be7c:	f0 1f 00 08 	mcall	8000be9c <sysclk_enable_pbb_module+0x80>

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
8000be80:	ee fb ff f4 	ld.w	r11,r7[-12]
8000be84:	30 3c       	mov	r12,3
8000be86:	f0 1f 00 07 	mcall	8000bea0 <sysclk_enable_pbb_module+0x84>
}
8000be8a:	2f dd       	sub	sp,-12
8000be8c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be90:	80 00       	ld.sh	r0,r0[0x0]
8000be92:	b7 28       	st.d	r11++,r8
8000be94:	00 00       	add	r0,r0
8000be96:	07 a8       	ld.ub	r8,r3[0x2]
8000be98:	80 00       	ld.sh	r0,r0[0x0]
8000be9a:	bd 34       	mul	r4,lr
8000be9c:	80 00       	ld.sh	r0,r0[0x0]
8000be9e:	b7 46       	asr	r6,0x16
8000bea0:	80 00       	ld.sh	r0,r0[0x0]
8000bea2:	bd a8       	sbr	r8,0x1c

8000bea4 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8000bea4:	eb cd 40 80 	pushm	r7,lr
8000bea8:	1a 97       	mov	r7,sp
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
8000beaa:	30 1c       	mov	r12,1
8000beac:	f0 1f 00 06 	mcall	8000bec4 <sysclk_enable_usb+0x20>
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000beb0:	30 3c       	mov	r12,3
8000beb2:	f0 1f 00 06 	mcall	8000bec8 <sysclk_enable_usb+0x24>
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
8000beb6:	30 1a       	mov	r10,1
8000beb8:	30 0b       	mov	r11,0
8000beba:	30 4c       	mov	r12,4
8000bebc:	f0 1f 00 04 	mcall	8000becc <sysclk_enable_usb+0x28>
}
8000bec0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bec4:	80 00       	ld.sh	r0,r0[0x0]
8000bec6:	be 1c       	st.h	pc[0x2],r12
8000bec8:	80 00       	ld.sh	r0,r0[0x0]
8000beca:	bd 34       	mul	r4,lr
8000becc:	80 00       	ld.sh	r0,r0[0x0]
8000bece:	bc 88       	st.b	lr[0x0],r8

8000bed0 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8000bed0:	eb cd 40 80 	pushm	r7,lr
8000bed4:	1a 97       	mov	r7,sp
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000bed6:	30 0c       	mov	r12,0
8000bed8:	f0 1f 00 07 	mcall	8000bef4 <sysclk_init+0x24>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
8000bedc:	f0 1f 00 07 	mcall	8000bef8 <sysclk_init+0x28>
8000bee0:	18 98       	mov	r8,r12
8000bee2:	10 9c       	mov	r12,r8
8000bee4:	f0 1f 00 06 	mcall	8000befc <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_PLL0);
8000bee8:	30 2c       	mov	r12,2
8000beea:	f0 1f 00 06 	mcall	8000bf00 <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000beee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bef2:	00 00       	add	r0,r0
8000bef4:	80 00       	ld.sh	r0,r0[0x0]
8000bef6:	ba bc       	st.b	sp[0x3],r12
8000bef8:	80 00       	ld.sh	r0,r0[0x0]
8000befa:	bd 1c       	ld.d	r12,--lr
8000befc:	80 00       	ld.sh	r0,r0[0x0]
8000befe:	84 34       	ld.sh	r4,r2[0x6]
8000bf00:	80 00       	ld.sh	r0,r0[0x0]
8000bf02:	bd 54       	asr	r4,0x1d
8000bf04:	22 53       	sub	r3,37
8000bf06:	44 20       	lddsp	r0,sp[0x108]
8000bf08:	43 61       	lddsp	r1,sp[0xd8]
8000bf0a:	72 64       	ld.w	r4,r9[0x18]
8000bf0c:	20 53       	sub	r3,5
8000bf0e:	6c 6f       	ld.w	pc,r6[0x18]
8000bf10:	74 20       	ld.w	r0,r10[0x8]
8000bf12:	30 22       	mov	r2,2
8000bf14:	00 00       	add	r0,r0
8000bf16:	00 00       	add	r0,r0
8000bf18:	22 53       	sub	r3,37
8000bf1a:	44 20       	lddsp	r0,sp[0x108]
8000bf1c:	43 61       	lddsp	r1,sp[0xd8]
8000bf1e:	72 64       	ld.w	r4,r9[0x18]
8000bf20:	20 53       	sub	r3,5
8000bf22:	6c 6f       	ld.w	pc,r6[0x18]
8000bf24:	74 20       	ld.w	r0,r10[0x8]
8000bf26:	31 22       	mov	r2,18
8000bf28:	00 00       	add	r0,r0
	...

8000bf2c <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
8000bf2c:	eb cd 40 80 	pushm	r7,lr
8000bf30:	1a 97       	mov	r7,sp

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
8000bf32:	30 28       	mov	r8,2
#endif
}
8000bf34:	10 9c       	mov	r12,r8
8000bf36:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf3a:	d7 03       	nop

8000bf3c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
8000bf3c:	eb cd 40 80 	pushm	r7,lr
8000bf40:	1a 97       	mov	r7,sp
8000bf42:	20 2d       	sub	sp,8
8000bf44:	18 98       	mov	r8,r12
8000bf46:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000bf4a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bf4e:	30 18       	mov	r8,1
8000bf50:	f0 09 18 00 	cp.b	r9,r8
8000bf54:	e0 8b 00 0f 	brhi	8000bf72 <mem_test_unit_ready+0x36>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
8000bf58:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bf5c:	48 aa       	lddpc	r10,8000bf84 <mem_test_unit_ready+0x48>
8000bf5e:	12 98       	mov	r8,r9
8000bf60:	a3 78       	lsl	r8,0x3
8000bf62:	12 18       	sub	r8,r9
8000bf64:	a3 68       	lsl	r8,0x2
8000bf66:	f4 08 00 08 	add	r8,r10,r8
8000bf6a:	70 08       	ld.w	r8,r8[0x0]
8000bf6c:	5d 18       	icall	r8
8000bf6e:	18 98       	mov	r8,r12
8000bf70:	c0 28       	rjmp	8000bf74 <mem_test_unit_ready+0x38>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000bf72:	30 18       	mov	r8,1
8000bf74:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000bf78:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000bf7c:	10 9c       	mov	r12,r8
8000bf7e:	2f ed       	sub	sp,-8
8000bf80:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf84:	80 00       	ld.sh	r0,r0[0x0]
8000bf86:	ed 1c eb cd 	ld.uh	r12,r6[-5171]

8000bf88 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
8000bf88:	eb cd 40 80 	pushm	r7,lr
8000bf8c:	1a 97       	mov	r7,sp
8000bf8e:	20 3d       	sub	sp,12
8000bf90:	18 98       	mov	r8,r12
8000bf92:	ef 4b ff f4 	st.w	r7[-12],r11
8000bf96:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000bf9a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bf9e:	30 18       	mov	r8,1
8000bfa0:	f0 09 18 00 	cp.b	r9,r8
8000bfa4:	e0 8b 00 10 	brhi	8000bfc4 <mem_read_capacity+0x3c>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
8000bfa8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bfac:	48 ba       	lddpc	r10,8000bfd8 <mem_read_capacity+0x50>
8000bfae:	12 98       	mov	r8,r9
8000bfb0:	a3 78       	lsl	r8,0x3
8000bfb2:	12 18       	sub	r8,r9
8000bfb4:	2f f8       	sub	r8,-1
8000bfb6:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
8000bfba:	ee fc ff f4 	ld.w	r12,r7[-12]
8000bfbe:	5d 18       	icall	r8
8000bfc0:	18 98       	mov	r8,r12
8000bfc2:	c0 28       	rjmp	8000bfc6 <mem_read_capacity+0x3e>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000bfc4:	30 18       	mov	r8,1
8000bfc6:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000bfca:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000bfce:	10 9c       	mov	r12,r8
8000bfd0:	2f dd       	sub	sp,-12
8000bfd2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bfd6:	00 00       	add	r0,r0
8000bfd8:	80 00       	ld.sh	r0,r0[0x0]
8000bfda:	ed 1c eb cd 	ld.uh	r12,r6[-5171]

8000bfdc <mem_wr_protect>:
  return sector_size;
}


bool mem_wr_protect(U8 lun)
{
8000bfdc:	eb cd 40 80 	pushm	r7,lr
8000bfe0:	1a 97       	mov	r7,sp
8000bfe2:	20 2d       	sub	sp,8
8000bfe4:	18 98       	mov	r8,r12
8000bfe6:	ef 68 ff f8 	st.b	r7[-8],r8
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000bfea:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bfee:	30 18       	mov	r8,1
8000bff0:	f0 09 18 00 	cp.b	r9,r8
8000bff4:	e0 8b 00 10 	brhi	8000c014 <mem_wr_protect+0x38>
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
8000bff8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bffc:	48 ba       	lddpc	r10,8000c028 <mem_wr_protect+0x4c>
8000bffe:	12 98       	mov	r8,r9
8000c000:	a3 78       	lsl	r8,0x3
8000c002:	12 18       	sub	r8,r9
8000c004:	a3 68       	lsl	r8,0x2
8000c006:	f4 08 00 08 	add	r8,r10,r8
8000c00a:	2f 88       	sub	r8,-8
8000c00c:	70 08       	ld.w	r8,r8[0x0]
8000c00e:	5d 18       	icall	r8
8000c010:	18 98       	mov	r8,r12
8000c012:	c0 28       	rjmp	8000c016 <mem_wr_protect+0x3a>
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000c014:	30 18       	mov	r8,1
8000c016:	ef 68 ff ff 	st.b	r7[-1],r8
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
8000c01a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000c01e:	10 9c       	mov	r12,r8
8000c020:	2f ed       	sub	sp,-8
8000c022:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c026:	00 00       	add	r0,r0
8000c028:	80 00       	ld.sh	r0,r0[0x0]
8000c02a:	ed 1c eb cd 	ld.uh	r12,r6[-5171]

8000c02c <mem_name>:
  return removal;
}


const char *mem_name(U8 lun)
{
8000c02c:	eb cd 40 80 	pushm	r7,lr
8000c030:	1a 97       	mov	r7,sp
8000c032:	20 1d       	sub	sp,4
8000c034:	18 98       	mov	r8,r12
8000c036:	ef 68 ff fc 	st.b	r7[-4],r8
  return
8000c03a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c03e:	30 18       	mov	r8,1
8000c040:	f0 09 18 00 	cp.b	r9,r8
8000c044:	e0 8b 00 0e 	brhi	8000c060 <mem_name+0x34>
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
8000c048:	ef 39 ff fc 	ld.ub	r9,r7[-4]
}


const char *mem_name(U8 lun)
{
  return
8000c04c:	48 8a       	lddpc	r10,8000c06c <mem_name+0x40>
8000c04e:	12 98       	mov	r8,r9
8000c050:	a3 78       	lsl	r8,0x3
8000c052:	12 18       	sub	r8,r9
8000c054:	a3 68       	lsl	r8,0x2
8000c056:	f4 08 00 08 	add	r8,r10,r8
8000c05a:	2e 88       	sub	r8,-24
8000c05c:	70 08       	ld.w	r8,r8[0x0]
8000c05e:	c0 28       	rjmp	8000c062 <mem_name+0x36>
8000c060:	30 08       	mov	r8,0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
8000c062:	10 9c       	mov	r12,r8
8000c064:	2f fd       	sub	sp,-4
8000c066:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c06a:	00 00       	add	r0,r0
8000c06c:	80 00       	ld.sh	r0,r0[0x0]
8000c06e:	ed 1c eb cd 	ld.uh	r12,r6[-5171]

8000c070 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
8000c070:	eb cd 40 80 	pushm	r7,lr
8000c074:	1a 97       	mov	r7,sp
8000c076:	20 4d       	sub	sp,16
8000c078:	18 99       	mov	r9,r12
8000c07a:	ef 4b ff f4 	st.w	r7[-12],r11
8000c07e:	14 98       	mov	r8,r10
8000c080:	ef 69 ff f8 	st.b	r7[-8],r9
8000c084:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
8000c088:	f0 1f 00 14 	mcall	8000c0d8 <memory_2_usb+0x68>
  status =
8000c08c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c090:	30 18       	mov	r8,1
8000c092:	f0 09 18 00 	cp.b	r9,r8
8000c096:	e0 8b 00 15 	brhi	8000c0c0 <memory_2_usb+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
8000c09a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c09e:	49 0a       	lddpc	r10,8000c0dc <memory_2_usb+0x6c>
8000c0a0:	12 98       	mov	r8,r9
8000c0a2:	a3 78       	lsl	r8,0x3
8000c0a4:	12 18       	sub	r8,r9
8000c0a6:	a3 68       	lsl	r8,0x2
8000c0a8:	f4 08 00 08 	add	r8,r10,r8
8000c0ac:	2f 08       	sub	r8,-16
8000c0ae:	70 08       	ld.w	r8,r8[0x0]
8000c0b0:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c0b4:	12 9b       	mov	r11,r9
8000c0b6:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c0ba:	5d 18       	icall	r8
8000c0bc:	18 98       	mov	r8,r12
8000c0be:	c0 28       	rjmp	8000c0c2 <memory_2_usb+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
8000c0c0:	30 18       	mov	r8,1
8000c0c2:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
8000c0c6:	f0 1f 00 07 	mcall	8000c0e0 <memory_2_usb+0x70>

  Ctrl_access_unlock();

  return status;
8000c0ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c0ce:	10 9c       	mov	r12,r8
8000c0d0:	2f cd       	sub	sp,-16
8000c0d2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0d6:	00 00       	add	r0,r0
8000c0d8:	80 00       	ld.sh	r0,r0[0x0]
8000c0da:	c1 a8       	rjmp	8000c10e <usb_2_memory+0x2a>
8000c0dc:	80 00       	ld.sh	r0,r0[0x0]
8000c0de:	ed 1c 80 00 	ld.uh	r12,r6[-32768]
8000c0e2:	c1 bc       	rcall	8000c118 <usb_2_memory+0x34>

8000c0e4 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
8000c0e4:	eb cd 40 80 	pushm	r7,lr
8000c0e8:	1a 97       	mov	r7,sp
8000c0ea:	20 4d       	sub	sp,16
8000c0ec:	18 99       	mov	r9,r12
8000c0ee:	ef 4b ff f4 	st.w	r7[-12],r11
8000c0f2:	14 98       	mov	r8,r10
8000c0f4:	ef 69 ff f8 	st.b	r7[-8],r9
8000c0f8:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
8000c0fc:	f0 1f 00 14 	mcall	8000c14c <usb_2_memory+0x68>
  status =
8000c100:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c104:	30 18       	mov	r8,1
8000c106:	f0 09 18 00 	cp.b	r9,r8
8000c10a:	e0 8b 00 15 	brhi	8000c134 <usb_2_memory+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
8000c10e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c112:	49 0a       	lddpc	r10,8000c150 <usb_2_memory+0x6c>
8000c114:	12 98       	mov	r8,r9
8000c116:	a3 78       	lsl	r8,0x3
8000c118:	12 18       	sub	r8,r9
8000c11a:	a3 68       	lsl	r8,0x2
8000c11c:	f4 08 00 08 	add	r8,r10,r8
8000c120:	2e c8       	sub	r8,-20
8000c122:	70 08       	ld.w	r8,r8[0x0]
8000c124:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c128:	12 9b       	mov	r11,r9
8000c12a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c12e:	5d 18       	icall	r8
8000c130:	18 98       	mov	r8,r12
8000c132:	c0 28       	rjmp	8000c136 <usb_2_memory+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
8000c134:	30 18       	mov	r8,1
8000c136:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
8000c13a:	f0 1f 00 07 	mcall	8000c154 <usb_2_memory+0x70>

  Ctrl_access_unlock();

  return status;
8000c13e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c142:	10 9c       	mov	r12,r8
8000c144:	2f cd       	sub	sp,-16
8000c146:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c14a:	00 00       	add	r0,r0
8000c14c:	80 00       	ld.sh	r0,r0[0x0]
8000c14e:	c1 d0       	breq	8000c188 <ui_powerdown+0x10>
8000c150:	80 00       	ld.sh	r0,r0[0x0]
8000c152:	ed 1c 80 00 	ld.uh	r12,r6[-32768]
8000c156:	c1 e4       	brge	8000c192 <ui_powerdown+0x1a>

8000c158 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
8000c158:	eb cd 40 80 	pushm	r7,lr
8000c15c:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000c15e:	30 1c       	mov	r12,1
8000c160:	f0 1f 00 04 	mcall	8000c170 <ui_init+0x18>
	LED_Off(LED1);
8000c164:	30 2c       	mov	r12,2
8000c166:	f0 1f 00 04 	mcall	8000c174 <ui_init+0x1c>
}
8000c16a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c16e:	00 00       	add	r0,r0
8000c170:	80 00       	ld.sh	r0,r0[0x0]
8000c172:	49 cc       	lddpc	r12,8000c1e0 <ui_start_write+0x10>
8000c174:	80 00       	ld.sh	r0,r0[0x0]
8000c176:	49 14       	lddpc	r4,8000c1b8 <ui_start_read+0x10>

8000c178 <ui_powerdown>:

void ui_powerdown(void)
{
8000c178:	eb cd 40 80 	pushm	r7,lr
8000c17c:	1a 97       	mov	r7,sp
	LED_Off(LED0);
8000c17e:	30 1c       	mov	r12,1
8000c180:	f0 1f 00 04 	mcall	8000c190 <ui_powerdown+0x18>
	LED_Off(LED1);
8000c184:	30 2c       	mov	r12,2
8000c186:	f0 1f 00 03 	mcall	8000c190 <ui_powerdown+0x18>
}
8000c18a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c18e:	00 00       	add	r0,r0
8000c190:	80 00       	ld.sh	r0,r0[0x0]
8000c192:	49 14       	lddpc	r4,8000c1d4 <ui_start_write+0x4>

8000c194 <ui_wakeup>:

void ui_wakeup(void)
{
8000c194:	eb cd 40 80 	pushm	r7,lr
8000c198:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000c19a:	30 1c       	mov	r12,1
8000c19c:	f0 1f 00 02 	mcall	8000c1a4 <ui_wakeup+0x10>
}
8000c1a0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1a4:	80 00       	ld.sh	r0,r0[0x0]
8000c1a6:	49 cc       	lddpc	r12,8000c214 <ui_process+0x1c>

8000c1a8 <ui_start_read>:

void ui_start_read(void)
{
8000c1a8:	eb cd 40 80 	pushm	r7,lr
8000c1ac:	1a 97       	mov	r7,sp
	LED_On(LED2);
8000c1ae:	30 4c       	mov	r12,4
8000c1b0:	f0 1f 00 02 	mcall	8000c1b8 <ui_start_read+0x10>
}
8000c1b4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1b8:	80 00       	ld.sh	r0,r0[0x0]
8000c1ba:	49 cc       	lddpc	r12,8000c228 <ui_process+0x30>

8000c1bc <ui_stop_read>:

void ui_stop_read(void)
{
8000c1bc:	eb cd 40 80 	pushm	r7,lr
8000c1c0:	1a 97       	mov	r7,sp
	LED_Off(LED2);
8000c1c2:	30 4c       	mov	r12,4
8000c1c4:	f0 1f 00 02 	mcall	8000c1cc <ui_stop_read+0x10>
}
8000c1c8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1cc:	80 00       	ld.sh	r0,r0[0x0]
8000c1ce:	49 14       	lddpc	r4,8000c210 <ui_process+0x18>

8000c1d0 <ui_start_write>:

void ui_start_write(void)
{
8000c1d0:	eb cd 40 80 	pushm	r7,lr
8000c1d4:	1a 97       	mov	r7,sp
	LED_On(LED3);
8000c1d6:	30 8c       	mov	r12,8
8000c1d8:	f0 1f 00 02 	mcall	8000c1e0 <ui_start_write+0x10>
}
8000c1dc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1e0:	80 00       	ld.sh	r0,r0[0x0]
8000c1e2:	49 cc       	lddpc	r12,8000c250 <ui_process+0x58>

8000c1e4 <ui_stop_write>:

void ui_stop_write(void)
{
8000c1e4:	eb cd 40 80 	pushm	r7,lr
8000c1e8:	1a 97       	mov	r7,sp
	LED_Off(LED3);
8000c1ea:	30 8c       	mov	r12,8
8000c1ec:	f0 1f 00 02 	mcall	8000c1f4 <ui_stop_write+0x10>
}
8000c1f0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1f4:	80 00       	ld.sh	r0,r0[0x0]
8000c1f6:	49 14       	lddpc	r4,8000c238 <ui_process+0x40>

8000c1f8 <ui_process>:

void ui_process(uint16_t framenumber)
{
8000c1f8:	eb cd 40 80 	pushm	r7,lr
8000c1fc:	1a 97       	mov	r7,sp
8000c1fe:	20 1d       	sub	sp,4
8000c200:	18 98       	mov	r8,r12
8000c202:	ef 58 ff fc 	st.h	r7[-4],r8
	if ((framenumber % 1000) == 0) {
8000c206:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c20a:	e0 68 4d d3 	mov	r8,19923
8000c20e:	ea 18 10 62 	orh	r8,0x1062
8000c212:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c216:	a7 89       	lsr	r9,0x6
8000c218:	e0 68 03 e8 	mov	r8,1000
8000c21c:	f2 08 02 48 	mul	r8,r9,r8
8000c220:	f4 08 01 08 	sub	r8,r10,r8
8000c224:	5c 88       	casts.h	r8
8000c226:	c0 41       	brne	8000c22e <ui_process+0x36>
		LED_On(LED1);
8000c228:	30 2c       	mov	r12,2
8000c22a:	f0 1f 00 10 	mcall	8000c268 <ui_process+0x70>
	}
	if ((framenumber % 1000) == 500) {
8000c22e:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c232:	e0 68 4d d3 	mov	r8,19923
8000c236:	ea 18 10 62 	orh	r8,0x1062
8000c23a:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c23e:	a7 89       	lsr	r9,0x6
8000c240:	e0 68 03 e8 	mov	r8,1000
8000c244:	f2 08 02 48 	mul	r8,r9,r8
8000c248:	f4 08 01 08 	sub	r8,r10,r8
8000c24c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000c250:	e0 68 01 f4 	mov	r8,500
8000c254:	f0 09 19 00 	cp.h	r9,r8
8000c258:	c0 41       	brne	8000c260 <ui_process+0x68>
		LED_Off(LED1);
8000c25a:	30 2c       	mov	r12,2
8000c25c:	f0 1f 00 04 	mcall	8000c26c <ui_process+0x74>
	}
}
8000c260:	2f fd       	sub	sp,-4
8000c262:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c266:	00 00       	add	r0,r0
8000c268:	80 00       	ld.sh	r0,r0[0x0]
8000c26a:	49 cc       	lddpc	r12,8000c2d8 <udi_msc_enable+0x68>
8000c26c:	80 00       	ld.sh	r0,r0[0x0]
8000c26e:	49 14       	lddpc	r4,8000c2b0 <udi_msc_enable+0x40>

8000c270 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
8000c270:	eb cd 40 80 	pushm	r7,lr
8000c274:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000c276:	49 49       	lddpc	r9,8000c2c4 <udi_msc_enable+0x54>
8000c278:	30 08       	mov	r8,0
8000c27a:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_cbw_invalid = false;
8000c27c:	49 39       	lddpc	r9,8000c2c8 <udi_msc_enable+0x58>
8000c27e:	30 08       	mov	r8,0
8000c280:	b2 88       	st.b	r9[0x0],r8
	udi_msc_nb_lun = get_nb_lun();
8000c282:	f0 1f 00 13 	mcall	8000c2cc <udi_msc_enable+0x5c>
8000c286:	18 98       	mov	r8,r12
8000c288:	49 29       	lddpc	r9,8000c2d0 <udi_msc_enable+0x60>
8000c28a:	b2 88       	st.b	r9[0x0],r8
	if (0 == udi_msc_nb_lun)
8000c28c:	49 18       	lddpc	r8,8000c2d0 <udi_msc_enable+0x60>
8000c28e:	11 88       	ld.ub	r8,r8[0x0]
8000c290:	58 08       	cp.w	r8,0
8000c292:	c0 31       	brne	8000c298 <udi_msc_enable+0x28>
		return false;	// No lun available, then not authorize to enable interface
8000c294:	30 08       	mov	r8,0
8000c296:	c1 38       	rjmp	8000c2bc <udi_msc_enable+0x4c>
	udi_msc_nb_lun--;
8000c298:	48 e8       	lddpc	r8,8000c2d0 <udi_msc_enable+0x60>
8000c29a:	11 88       	ld.ub	r8,r8[0x0]
8000c29c:	20 18       	sub	r8,1
8000c29e:	5c 58       	castu.b	r8
8000c2a0:	48 c9       	lddpc	r9,8000c2d0 <udi_msc_enable+0x60>
8000c2a2:	b2 88       	st.b	r9[0x0],r8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
8000c2a4:	f0 1f 00 0c 	mcall	8000c2d4 <udi_msc_enable+0x64>
8000c2a8:	18 98       	mov	r8,r12
8000c2aa:	ec 18 00 01 	eorl	r8,0x1
8000c2ae:	5c 58       	castu.b	r8
8000c2b0:	c0 30       	breq	8000c2b6 <udi_msc_enable+0x46>
		return false;
8000c2b2:	30 08       	mov	r8,0
8000c2b4:	c0 48       	rjmp	8000c2bc <udi_msc_enable+0x4c>
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
8000c2b6:	f0 1f 00 09 	mcall	8000c2d8 <udi_msc_enable+0x68>
	return true;
8000c2ba:	30 18       	mov	r8,1
}
8000c2bc:	10 9c       	mov	r12,r8
8000c2be:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2c2:	00 00       	add	r0,r0
8000c2c4:	00 00       	add	r0,r0
8000c2c6:	07 e5       	ld.ub	r5,r3[0x6]
8000c2c8:	00 00       	add	r0,r0
8000c2ca:	07 e4       	ld.ub	r4,r3[0x6]
8000c2cc:	80 00       	ld.sh	r0,r0[0x0]
8000c2ce:	bf 2c       	st.d	pc++,r12
8000c2d0:	00 00       	add	r0,r0
8000c2d2:	07 cc       	ld.ub	r12,r3[0x4]
8000c2d4:	80 00       	ld.sh	r0,r0[0x0]
8000c2d6:	e1 f0 80 00 	ld.wls	r0,r0[0x0]
8000c2da:	c4 54       	brge	8000c364 <udi_msc_setup+0x6c>

8000c2dc <udi_msc_disable>:


void udi_msc_disable(void)
{
8000c2dc:	eb cd 40 80 	pushm	r7,lr
8000c2e0:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000c2e2:	48 49       	lddpc	r9,8000c2f0 <udi_msc_disable+0x14>
8000c2e4:	30 08       	mov	r8,0
8000c2e6:	b2 88       	st.b	r9[0x0],r8
	UDI_MSC_DISABLE_EXT();
8000c2e8:	f0 1f 00 03 	mcall	8000c2f4 <udi_msc_disable+0x18>
}
8000c2ec:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2f0:	00 00       	add	r0,r0
8000c2f2:	07 e5       	ld.ub	r5,r3[0x6]
8000c2f4:	80 00       	ld.sh	r0,r0[0x0]
8000c2f6:	e2 08       	*unknown*

8000c2f8 <udi_msc_setup>:


bool udi_msc_setup(void)
{
8000c2f8:	eb cd 40 80 	pushm	r7,lr
8000c2fc:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000c2fe:	4a f8       	lddpc	r8,8000c3b8 <udi_msc_setup+0xc0>
8000c300:	11 88       	ld.ub	r8,r8[0x0]
8000c302:	10 99       	mov	r9,r8
8000c304:	30 08       	mov	r8,0
8000c306:	f0 09 18 00 	cp.b	r9,r8
8000c30a:	c2 34       	brge	8000c350 <udi_msc_setup+0x58>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000c30c:	4a b8       	lddpc	r8,8000c3b8 <udi_msc_setup+0xc0>
8000c30e:	11 88       	ld.ub	r8,r8[0x0]
8000c310:	e2 18 00 60 	andl	r8,0x60,COH
8000c314:	e0 48 00 20 	cp.w	r8,32
8000c318:	c1 c1       	brne	8000c350 <udi_msc_setup+0x58>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000c31a:	4a 88       	lddpc	r8,8000c3b8 <udi_msc_setup+0xc0>
8000c31c:	11 98       	ld.ub	r8,r8[0x1]
8000c31e:	e0 48 00 fe 	cp.w	r8,254
8000c322:	c1 71       	brne	8000c350 <udi_msc_setup+0x58>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
8000c324:	4a 58       	lddpc	r8,8000c3b8 <udi_msc_setup+0xc0>
8000c326:	90 39       	ld.sh	r9,r8[0x6]
8000c328:	30 18       	mov	r8,1
8000c32a:	f0 09 19 00 	cp.h	r9,r8
8000c32e:	c0 30       	breq	8000c334 <udi_msc_setup+0x3c>
					return false;	// Error for USB host
8000c330:	30 08       	mov	r8,0
8000c332:	c4 08       	rjmp	8000c3b2 <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000c334:	4a 18       	lddpc	r8,8000c3b8 <udi_msc_setup+0xc0>
8000c336:	90 18       	ld.sh	r8,r8[0x2]
8000c338:	58 08       	cp.w	r8,0
8000c33a:	c0 30       	breq	8000c340 <udi_msc_setup+0x48>
					return false;
8000c33c:	30 08       	mov	r8,0
8000c33e:	c3 a8       	rjmp	8000c3b2 <udi_msc_setup+0xba>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
8000c340:	49 e8       	lddpc	r8,8000c3b8 <udi_msc_setup+0xc0>
8000c342:	49 f9       	lddpc	r9,8000c3bc <udi_msc_setup+0xc4>
8000c344:	91 29       	st.w	r8[0x8],r9
				udd_g_ctrlreq.payload_size = 1;
8000c346:	49 d9       	lddpc	r9,8000c3b8 <udi_msc_setup+0xc0>
8000c348:	30 18       	mov	r8,1
8000c34a:	b2 68       	st.h	r9[0xc],r8
				return true;
8000c34c:	30 18       	mov	r8,1
8000c34e:	c3 28       	rjmp	8000c3b2 <udi_msc_setup+0xba>
			}
		}
	}
	if (Udd_setup_is_out()) {
8000c350:	49 a8       	lddpc	r8,8000c3b8 <udi_msc_setup+0xc0>
8000c352:	11 88       	ld.ub	r8,r8[0x0]
8000c354:	10 99       	mov	r9,r8
8000c356:	30 08       	mov	r8,0
8000c358:	f0 09 18 00 	cp.b	r9,r8
8000c35c:	c2 a5       	brlt	8000c3b0 <udi_msc_setup+0xb8>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000c35e:	49 78       	lddpc	r8,8000c3b8 <udi_msc_setup+0xc0>
8000c360:	11 88       	ld.ub	r8,r8[0x0]
8000c362:	e2 18 00 60 	andl	r8,0x60,COH
8000c366:	e0 48 00 20 	cp.w	r8,32
8000c36a:	c2 31       	brne	8000c3b0 <udi_msc_setup+0xb8>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000c36c:	49 38       	lddpc	r8,8000c3b8 <udi_msc_setup+0xc0>
8000c36e:	11 98       	ld.ub	r8,r8[0x1]
8000c370:	e0 48 00 ff 	cp.w	r8,255
8000c374:	c1 e1       	brne	8000c3b0 <udi_msc_setup+0xb8>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
8000c376:	49 18       	lddpc	r8,8000c3b8 <udi_msc_setup+0xc0>
8000c378:	90 38       	ld.sh	r8,r8[0x6]
8000c37a:	58 08       	cp.w	r8,0
8000c37c:	c0 30       	breq	8000c382 <udi_msc_setup+0x8a>
					return false;
8000c37e:	30 08       	mov	r8,0
8000c380:	c1 98       	rjmp	8000c3b2 <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000c382:	48 e8       	lddpc	r8,8000c3b8 <udi_msc_setup+0xc0>
8000c384:	90 18       	ld.sh	r8,r8[0x2]
8000c386:	58 08       	cp.w	r8,0
8000c388:	c0 30       	breq	8000c38e <udi_msc_setup+0x96>
					return false;
8000c38a:	30 08       	mov	r8,0
8000c38c:	c1 38       	rjmp	8000c3b2 <udi_msc_setup+0xba>
				udi_msc_b_cbw_invalid = false;
8000c38e:	48 d9       	lddpc	r9,8000c3c0 <udi_msc_setup+0xc8>
8000c390:	30 08       	mov	r8,0
8000c392:	b2 88       	st.b	r9[0x0],r8
				udi_msc_b_trans_req = false;
8000c394:	48 c9       	lddpc	r9,8000c3c4 <udi_msc_setup+0xcc>
8000c396:	30 08       	mov	r8,0
8000c398:	b2 88       	st.b	r9[0x0],r8
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
8000c39a:	30 2c       	mov	r12,2
8000c39c:	f0 1f 00 0b 	mcall	8000c3c8 <udi_msc_setup+0xd0>
				udd_ep_abort(UDI_MSC_EP_IN);
8000c3a0:	e0 6c 00 81 	mov	r12,129
8000c3a4:	f0 1f 00 09 	mcall	8000c3c8 <udi_msc_setup+0xd0>
				// Restart by CBW wait
				udi_msc_cbw_wait();
8000c3a8:	f0 1f 00 09 	mcall	8000c3cc <udi_msc_setup+0xd4>
				return true;
8000c3ac:	30 18       	mov	r8,1
8000c3ae:	c0 28       	rjmp	8000c3b2 <udi_msc_setup+0xba>
			}
		}
	}
	return false;	// Not supported request
8000c3b0:	30 08       	mov	r8,0
}
8000c3b2:	10 9c       	mov	r12,r8
8000c3b4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3b8:	00 00       	add	r0,r0
8000c3ba:	0f a8       	ld.ub	r8,r7[0x2]
8000c3bc:	00 00       	add	r0,r0
8000c3be:	07 cc       	ld.ub	r12,r3[0x4]
8000c3c0:	00 00       	add	r0,r0
8000c3c2:	07 e4       	ld.ub	r4,r3[0x6]
8000c3c4:	00 00       	add	r0,r0
8000c3c6:	07 e5       	ld.ub	r5,r3[0x6]
8000c3c8:	80 00       	ld.sh	r0,r0[0x0]
8000c3ca:	a5 4c       	asr	r12,0x4
8000c3cc:	80 00       	ld.sh	r0,r0[0x0]
8000c3ce:	c4 54       	brge	8000c458 <udi_msc_cbw_wait+0x4>

8000c3d0 <udi_msc_getsetting>:

uint8_t udi_msc_getsetting(void)
{
8000c3d0:	eb cd 40 80 	pushm	r7,lr
8000c3d4:	1a 97       	mov	r7,sp
	return 0;	// MSC don't have multiple alternate setting
8000c3d6:	30 08       	mov	r8,0
}
8000c3d8:	10 9c       	mov	r12,r8
8000c3da:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3de:	d7 03       	nop

8000c3e0 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
8000c3e0:	eb cd 40 80 	pushm	r7,lr
8000c3e4:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000c3e6:	48 a8       	lddpc	r8,8000c40c <udi_msc_cbw_invalid+0x2c>
8000c3e8:	11 88       	ld.ub	r8,r8[0x0]
8000c3ea:	ec 18 00 01 	eorl	r8,0x1
8000c3ee:	5c 58       	castu.b	r8
8000c3f0:	c0 a1       	brne	8000c404 <udi_msc_cbw_invalid+0x24>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
8000c3f2:	30 2c       	mov	r12,2
8000c3f4:	f0 1f 00 07 	mcall	8000c410 <udi_msc_cbw_invalid+0x30>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
8000c3f8:	fe cb 00 18 	sub	r11,pc,24
8000c3fc:	30 2c       	mov	r12,2
8000c3fe:	f0 1f 00 06 	mcall	8000c414 <udi_msc_cbw_invalid+0x34>
8000c402:	c0 28       	rjmp	8000c406 <udi_msc_cbw_invalid+0x26>
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000c404:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_OUT);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
}
8000c406:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c40a:	00 00       	add	r0,r0
8000c40c:	00 00       	add	r0,r0
8000c40e:	07 e4       	ld.ub	r4,r3[0x6]
8000c410:	80 00       	ld.sh	r0,r0[0x0]
8000c412:	a1 d4       	cbr	r4,0x1
8000c414:	80 00       	ld.sh	r0,r0[0x0]
8000c416:	a5 e8       	*unknown*

8000c418 <udi_msc_csw_invalid>:

static void udi_msc_csw_invalid(void)
{
8000c418:	eb cd 40 80 	pushm	r7,lr
8000c41c:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000c41e:	48 b8       	lddpc	r8,8000c448 <udi_msc_csw_invalid+0x30>
8000c420:	11 88       	ld.ub	r8,r8[0x0]
8000c422:	ec 18 00 01 	eorl	r8,0x1
8000c426:	5c 58       	castu.b	r8
8000c428:	c0 c1       	brne	8000c440 <udi_msc_csw_invalid+0x28>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
8000c42a:	e0 6c 00 81 	mov	r12,129
8000c42e:	f0 1f 00 08 	mcall	8000c44c <udi_msc_csw_invalid+0x34>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
8000c432:	fe cb 00 1a 	sub	r11,pc,26
8000c436:	e0 6c 00 81 	mov	r12,129
8000c43a:	f0 1f 00 06 	mcall	8000c450 <udi_msc_csw_invalid+0x38>
8000c43e:	c0 28       	rjmp	8000c442 <udi_msc_csw_invalid+0x2a>
}

static void udi_msc_csw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000c440:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_IN);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}
8000c442:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c446:	00 00       	add	r0,r0
8000c448:	00 00       	add	r0,r0
8000c44a:	07 e4       	ld.ub	r4,r3[0x6]
8000c44c:	80 00       	ld.sh	r0,r0[0x0]
8000c44e:	a1 d4       	cbr	r4,0x1
8000c450:	80 00       	ld.sh	r0,r0[0x0]
8000c452:	a5 e8       	*unknown*

8000c454 <udi_msc_cbw_wait>:

static void udi_msc_cbw_wait(void)
{
8000c454:	eb cd 40 80 	pushm	r7,lr
8000c458:	1a 97       	mov	r7,sp
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
8000c45a:	48 aa       	lddpc	r10,8000c480 <udi_msc_cbw_wait+0x2c>
8000c45c:	48 a8       	lddpc	r8,8000c484 <udi_msc_cbw_wait+0x30>
8000c45e:	31 f9       	mov	r9,31
8000c460:	30 1b       	mov	r11,1
8000c462:	30 2c       	mov	r12,2
8000c464:	f0 1f 00 09 	mcall	8000c488 <udi_msc_cbw_wait+0x34>
8000c468:	18 98       	mov	r8,r12
8000c46a:	ec 18 00 01 	eorl	r8,0x1
8000c46e:	5c 58       	castu.b	r8
8000c470:	c0 60       	breq	8000c47c <udi_msc_cbw_wait+0x28>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
8000c472:	fe cb 00 1e 	sub	r11,pc,30
8000c476:	30 2c       	mov	r12,2
8000c478:	f0 1f 00 05 	mcall	8000c48c <udi_msc_cbw_wait+0x38>
	}
}
8000c47c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c480:	00 00       	add	r0,r0
8000c482:	07 ac       	ld.ub	r12,r3[0x2]
8000c484:	80 00       	ld.sh	r0,r0[0x0]
8000c486:	c4 90       	breq	8000c518 <udi_msc_cbw_received+0x88>
8000c488:	80 00       	ld.sh	r0,r0[0x0]
8000c48a:	a4 28       	st.h	r2[0x4],r8
8000c48c:	80 00       	ld.sh	r0,r0[0x0]
8000c48e:	a5 e8       	*unknown*

8000c490 <udi_msc_cbw_received>:


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
8000c490:	eb cd 40 80 	pushm	r7,lr
8000c494:	1a 97       	mov	r7,sp
8000c496:	20 3d       	sub	sp,12
8000c498:	ef 4c ff fc 	st.w	r7[-4],r12
8000c49c:	ef 4b ff f8 	st.w	r7[-8],r11
8000c4a0:	14 98       	mov	r8,r10
8000c4a2:	ef 68 ff f4 	st.b	r7[-12],r8
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
8000c4a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c4aa:	58 08       	cp.w	r8,0
8000c4ac:	c6 11       	brne	8000c56e <udi_msc_cbw_received+0xde>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000c4ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c4b2:	59 f8       	cp.w	r8,31
8000c4b4:	c0 91       	brne	8000c4c6 <udi_msc_cbw_received+0x36>
			|| (udi_msc_cbw.dCBWSignature !=
8000c4b6:	4b 18       	lddpc	r8,8000c578 <udi_msc_cbw_received+0xe8>
8000c4b8:	70 08       	ld.w	r8,r8[0x0]
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000c4ba:	e0 69 42 43 	mov	r9,16963
8000c4be:	ea 19 55 53 	orh	r9,0x5553
8000c4c2:	12 38       	cp.w	r8,r9
8000c4c4:	c0 90       	breq	8000c4d6 <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
8000c4c6:	4a e9       	lddpc	r9,8000c57c <udi_msc_cbw_received+0xec>
8000c4c8:	30 18       	mov	r8,1
8000c4ca:	b2 88       	st.b	r9[0x0],r8
		udi_msc_cbw_invalid();
8000c4cc:	f0 1f 00 2d 	mcall	8000c580 <udi_msc_cbw_received+0xf0>
		udi_msc_csw_invalid();
8000c4d0:	f0 1f 00 2d 	mcall	8000c584 <udi_msc_cbw_received+0xf4>
		return;
8000c4d4:	c4 e8       	rjmp	8000c570 <udi_msc_cbw_received+0xe0>
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
8000c4d6:	4a 98       	lddpc	r8,8000c578 <udi_msc_cbw_received+0xe8>
8000c4d8:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000c4dc:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000c4e0:	4a 69       	lddpc	r9,8000c578 <udi_msc_cbw_received+0xe8>
8000c4e2:	f3 68 00 0d 	st.b	r9[13],r8
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
8000c4e6:	4a 58       	lddpc	r8,8000c578 <udi_msc_cbw_received+0xe8>
8000c4e8:	f1 39 00 0d 	ld.ub	r9,r8[13]
8000c4ec:	4a 78       	lddpc	r8,8000c588 <udi_msc_cbw_received+0xf8>
8000c4ee:	11 88       	ld.ub	r8,r8[0x0]
8000c4f0:	f0 09 18 00 	cp.b	r9,r8
8000c4f4:	e0 88 00 07 	brls	8000c502 <udi_msc_cbw_received+0x72>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
8000c4f8:	f0 1f 00 25 	mcall	8000c58c <udi_msc_cbw_received+0xfc>
		udi_msc_csw_process();
8000c4fc:	f0 1f 00 25 	mcall	8000c590 <udi_msc_cbw_received+0x100>
		return;
8000c500:	c3 88       	rjmp	8000c570 <udi_msc_cbw_received+0xe0>
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
8000c502:	49 e8       	lddpc	r8,8000c578 <udi_msc_cbw_received+0xe8>
8000c504:	70 28       	ld.w	r8,r8[0x8]
8000c506:	5c b8       	swap.b	r8
8000c508:	10 99       	mov	r9,r8
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
8000c50a:	4a 38       	lddpc	r8,8000c594 <udi_msc_cbw_received+0x104>
8000c50c:	91 29       	st.w	r8[0x8],r9
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
8000c50e:	49 b8       	lddpc	r8,8000c578 <udi_msc_cbw_received+0xe8>
8000c510:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000c514:	e0 48 00 5a 	cp.w	r8,90
8000c518:	e0 8b 00 26 	brhi	8000c564 <udi_msc_cbw_received+0xd4>
8000c51c:	49 f9       	lddpc	r9,8000c598 <udi_msc_cbw_received+0x108>
8000c51e:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case SPC_REQUEST_SENSE:
		udi_msc_spc_requestsense();
8000c522:	f0 1f 00 1f 	mcall	8000c59c <udi_msc_cbw_received+0x10c>
		break;
8000c526:	c2 58       	rjmp	8000c570 <udi_msc_cbw_received+0xe0>

	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
8000c528:	f0 1f 00 1e 	mcall	8000c5a0 <udi_msc_cbw_received+0x110>
		break;
8000c52c:	c2 28       	rjmp	8000c570 <udi_msc_cbw_received+0xe0>

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
8000c52e:	30 0c       	mov	r12,0
8000c530:	f0 1f 00 1d 	mcall	8000c5a4 <udi_msc_cbw_received+0x114>
		break;
8000c534:	c1 e8       	rjmp	8000c570 <udi_msc_cbw_received+0xe0>
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
8000c536:	30 1c       	mov	r12,1
8000c538:	f0 1f 00 1b 	mcall	8000c5a4 <udi_msc_cbw_received+0x114>
		break;
8000c53c:	c1 a8       	rjmp	8000c570 <udi_msc_cbw_received+0xe0>

	case SPC_TEST_UNIT_READY:
		udi_msc_spc_testunitready();
8000c53e:	f0 1f 00 1b 	mcall	8000c5a8 <udi_msc_cbw_received+0x118>
		break;
8000c542:	c1 78       	rjmp	8000c570 <udi_msc_cbw_received+0xe0>

	case SBC_READ_CAPACITY10:
		udi_msc_sbc_read_capacity();
8000c544:	f0 1f 00 1a 	mcall	8000c5ac <udi_msc_cbw_received+0x11c>
		break;
8000c548:	c1 48       	rjmp	8000c570 <udi_msc_cbw_received+0xe0>
	case SBC_START_STOP_UNIT:
		// Accepts request to support plug/plug in case of card reader
	case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
8000c54a:	f0 1f 00 1a 	mcall	8000c5b0 <udi_msc_cbw_received+0x120>
		udi_msc_csw_process();
8000c54e:	f0 1f 00 11 	mcall	8000c590 <udi_msc_cbw_received+0x100>
		break;
8000c552:	c0 f8       	rjmp	8000c570 <udi_msc_cbw_received+0xe0>

	case SBC_READ10:
		udi_msc_sbc_trans(true);
8000c554:	30 1c       	mov	r12,1
8000c556:	f0 1f 00 18 	mcall	8000c5b4 <udi_msc_cbw_received+0x124>
		break;
8000c55a:	c0 b8       	rjmp	8000c570 <udi_msc_cbw_received+0xe0>

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
8000c55c:	30 0c       	mov	r12,0
8000c55e:	f0 1f 00 16 	mcall	8000c5b4 <udi_msc_cbw_received+0x124>
		break;
8000c562:	c0 78       	rjmp	8000c570 <udi_msc_cbw_received+0xe0>

	default:
		udi_msc_sense_command_invalid();
8000c564:	f0 1f 00 15 	mcall	8000c5b8 <udi_msc_cbw_received+0x128>
		udi_msc_csw_process();
8000c568:	f0 1f 00 0a 	mcall	8000c590 <udi_msc_cbw_received+0x100>
8000c56c:	c0 28       	rjmp	8000c570 <udi_msc_cbw_received+0xe0>
{
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
		// Transfer aborted
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000c56e:	d7 03       	nop
	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
		break;
	}
}
8000c570:	2f dd       	sub	sp,-12
8000c572:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c576:	00 00       	add	r0,r0
8000c578:	00 00       	add	r0,r0
8000c57a:	07 ac       	ld.ub	r12,r3[0x2]
8000c57c:	00 00       	add	r0,r0
8000c57e:	07 e4       	ld.ub	r4,r3[0x6]
8000c580:	80 00       	ld.sh	r0,r0[0x0]
8000c582:	c3 e0       	breq	8000c5fe <udi_msc_cbw_validate+0x42>
8000c584:	80 00       	ld.sh	r0,r0[0x0]
8000c586:	c4 18       	rjmp	8000c608 <udi_msc_cbw_validate+0x4c>
8000c588:	00 00       	add	r0,r0
8000c58a:	07 cc       	ld.ub	r12,r3[0x4]
8000c58c:	80 00       	ld.sh	r0,r0[0x0]
8000c58e:	c8 b8       	rjmp	8000c6a4 <udi_msc_data_sent+0x38>
8000c590:	80 00       	ld.sh	r0,r0[0x0]
8000c592:	c6 b8       	rjmp	8000c668 <udi_msc_data_send+0x4c>
8000c594:	00 00       	add	r0,r0
8000c596:	01 54       	ld.sh	r4,--r0
8000c598:	80 00       	ld.sh	r0,r0[0x0]
8000c59a:	ed 54 80 00 	st.h	r6[-32768],r4
8000c59e:	c8 f0       	breq	8000c4bc <udi_msc_cbw_received+0x2c>
8000c5a0:	80 00       	ld.sh	r0,r0[0x0]
8000c5a2:	c9 54       	brge	8000c4cc <udi_msc_cbw_received+0x3c>
8000c5a4:	80 00       	ld.sh	r0,r0[0x0]
8000c5a6:	ca ec       	rcall	8000c702 <udi_msc_csw_process+0x4a>
8000c5a8:	80 00       	ld.sh	r0,r0[0x0]
8000c5aa:	ca c4       	brge	8000c502 <udi_msc_cbw_received+0x72>
8000c5ac:	80 00       	ld.sh	r0,r0[0x0]
8000c5ae:	cc 3c       	rcall	8000c734 <udi_msc_csw_send+0x20>
8000c5b0:	80 00       	ld.sh	r0,r0[0x0]
8000c5b2:	c8 2c       	rcall	8000c6b6 <udi_msc_data_sent+0x4a>
8000c5b4:	80 00       	ld.sh	r0,r0[0x0]
8000c5b6:	cc d8       	rjmp	8000c750 <udi_msc_csw_send+0x3c>
8000c5b8:	80 00       	ld.sh	r0,r0[0x0]
8000c5ba:	c8 d4       	brge	8000c4d4 <udi_msc_cbw_received+0x44>

8000c5bc <udi_msc_cbw_validate>:


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
8000c5bc:	eb cd 40 80 	pushm	r7,lr
8000c5c0:	1a 97       	mov	r7,sp
8000c5c2:	20 2d       	sub	sp,8
8000c5c4:	ef 4c ff fc 	st.w	r7[-4],r12
8000c5c8:	16 98       	mov	r8,r11
8000c5ca:	ef 68 ff f8 	st.b	r7[-8],r8
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000c5ce:	49 08       	lddpc	r8,8000c60c <udi_msc_cbw_validate+0x50>
8000c5d0:	f1 39 00 0c 	ld.ub	r9,r8[12]
8000c5d4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c5d8:	f3 e8 20 08 	eor	r8,r9,r8
8000c5dc:	5c 58       	castu.b	r8
8000c5de:	10 99       	mov	r9,r8
8000c5e0:	30 08       	mov	r8,0
8000c5e2:	f0 09 18 00 	cp.b	r9,r8
8000c5e6:	c0 75       	brlt	8000c5f4 <udi_msc_cbw_validate+0x38>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
8000c5e8:	48 a8       	lddpc	r8,8000c610 <udi_msc_cbw_validate+0x54>
8000c5ea:	70 29       	ld.w	r9,r8[0x8]
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000c5ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c5f0:	10 39       	cp.w	r9,r8
8000c5f2:	c0 72       	brcc	8000c600 <udi_msc_cbw_validate+0x44>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
		udi_msc_sense_fail_cdb_invalid();
8000c5f4:	f0 1f 00 08 	mcall	8000c614 <udi_msc_cbw_validate+0x58>
		udi_msc_csw_process();
8000c5f8:	f0 1f 00 08 	mcall	8000c618 <udi_msc_cbw_validate+0x5c>
		return false;
8000c5fc:	30 08       	mov	r8,0
8000c5fe:	c0 28       	rjmp	8000c602 <udi_msc_cbw_validate+0x46>
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
8000c600:	30 18       	mov	r8,1
}
8000c602:	10 9c       	mov	r12,r8
8000c604:	2f ed       	sub	sp,-8
8000c606:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c60a:	00 00       	add	r0,r0
8000c60c:	00 00       	add	r0,r0
8000c60e:	07 ac       	ld.ub	r12,r3[0x2]
8000c610:	00 00       	add	r0,r0
8000c612:	01 54       	ld.sh	r4,--r0
8000c614:	80 00       	ld.sh	r0,r0[0x0]
8000c616:	c8 b8       	rjmp	8000c72c <udi_msc_csw_send+0x18>
8000c618:	80 00       	ld.sh	r0,r0[0x0]
8000c61a:	c6 b8       	rjmp	8000c6f0 <udi_msc_csw_process+0x38>

8000c61c <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
8000c61c:	eb cd 40 80 	pushm	r7,lr
8000c620:	1a 97       	mov	r7,sp
8000c622:	20 2d       	sub	sp,8
8000c624:	ef 4c ff fc 	st.w	r7[-4],r12
8000c628:	16 98       	mov	r8,r11
8000c62a:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
8000c62e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c632:	48 b8       	lddpc	r8,8000c65c <udi_msc_data_send+0x40>
8000c634:	ee fa ff fc 	ld.w	r10,r7[-4]
8000c638:	30 1b       	mov	r11,1
8000c63a:	e0 6c 00 81 	mov	r12,129
8000c63e:	f0 1f 00 09 	mcall	8000c660 <udi_msc_data_send+0x44>
8000c642:	18 98       	mov	r8,r12
8000c644:	ec 18 00 01 	eorl	r8,0x1
8000c648:	5c 58       	castu.b	r8
8000c64a:	c0 50       	breq	8000c654 <udi_msc_data_send+0x38>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
8000c64c:	f0 1f 00 06 	mcall	8000c664 <udi_msc_data_send+0x48>
		udi_msc_csw_process();
8000c650:	f0 1f 00 06 	mcall	8000c668 <udi_msc_data_send+0x4c>
	}
}
8000c654:	2f ed       	sub	sp,-8
8000c656:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c65a:	00 00       	add	r0,r0
8000c65c:	80 00       	ld.sh	r0,r0[0x0]
8000c65e:	c6 6c       	rcall	8000c72a <udi_msc_csw_send+0x16>
8000c660:	80 00       	ld.sh	r0,r0[0x0]
8000c662:	a4 28       	st.h	r2[0x4],r8
8000c664:	80 00       	ld.sh	r0,r0[0x0]
8000c666:	c8 84       	brge	8000c576 <udi_msc_cbw_received+0xe6>
8000c668:	80 00       	ld.sh	r0,r0[0x0]
8000c66a:	c6 b8       	rjmp	8000c740 <udi_msc_csw_send+0x2c>

8000c66c <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000c66c:	eb cd 40 80 	pushm	r7,lr
8000c670:	1a 97       	mov	r7,sp
8000c672:	20 3d       	sub	sp,12
8000c674:	ef 4c ff fc 	st.w	r7[-4],r12
8000c678:	ef 4b ff f8 	st.w	r7[-8],r11
8000c67c:	14 98       	mov	r8,r10
8000c67e:	ef 68 ff f4 	st.b	r7[-12],r8
	if (UDD_EP_TRANSFER_OK != status) {
8000c682:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c686:	58 08       	cp.w	r8,0
8000c688:	c0 d1       	brne	8000c6a2 <udi_msc_data_sent+0x36>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
8000c68a:	f0 1f 00 09 	mcall	8000c6ac <udi_msc_data_sent+0x40>
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
8000c68e:	48 98       	lddpc	r8,8000c6b0 <udi_msc_data_sent+0x44>
8000c690:	70 29       	ld.w	r9,r8[0x8]
8000c692:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c696:	10 19       	sub	r9,r8
8000c698:	48 68       	lddpc	r8,8000c6b0 <udi_msc_data_sent+0x44>
8000c69a:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_process();
8000c69c:	f0 1f 00 06 	mcall	8000c6b4 <udi_msc_data_sent+0x48>
8000c6a0:	c0 28       	rjmp	8000c6a4 <udi_msc_data_sent+0x38>
		udd_ep_id_t ep)
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000c6a2:	d7 03       	nop
	// Update sense data
	udi_msc_sense_pass();
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
	udi_msc_csw_process();
}
8000c6a4:	2f dd       	sub	sp,-12
8000c6a6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c6aa:	00 00       	add	r0,r0
8000c6ac:	80 00       	ld.sh	r0,r0[0x0]
8000c6ae:	c8 2c       	rcall	8000c7b2 <udi_msc_sense_fail+0xe>
8000c6b0:	00 00       	add	r0,r0
8000c6b2:	01 54       	ld.sh	r4,--r0
8000c6b4:	80 00       	ld.sh	r0,r0[0x0]
8000c6b6:	c6 b8       	rjmp	8000c78c <udi_msc_clear_sense+0x10>

8000c6b8 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
8000c6b8:	eb cd 40 80 	pushm	r7,lr
8000c6bc:	1a 97       	mov	r7,sp
	if (0 != udi_msc_csw.dCSWDataResidue) {
8000c6be:	49 28       	lddpc	r8,8000c704 <udi_msc_csw_process+0x4c>
8000c6c0:	70 28       	ld.w	r8,r8[0x8]
8000c6c2:	58 08       	cp.w	r8,0
8000c6c4:	c1 10       	breq	8000c6e6 <udi_msc_csw_process+0x2e>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
8000c6c6:	49 18       	lddpc	r8,8000c708 <udi_msc_csw_process+0x50>
8000c6c8:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000c6cc:	10 99       	mov	r9,r8
8000c6ce:	30 08       	mov	r8,0
8000c6d0:	f0 09 18 00 	cp.b	r9,r8
8000c6d4:	c0 64       	brge	8000c6e0 <udi_msc_csw_process+0x28>
			udd_ep_set_halt(UDI_MSC_EP_IN);
8000c6d6:	e0 6c 00 81 	mov	r12,129
8000c6da:	f0 1f 00 0d 	mcall	8000c70c <udi_msc_csw_process+0x54>
8000c6de:	c0 48       	rjmp	8000c6e6 <udi_msc_csw_process+0x2e>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
8000c6e0:	30 2c       	mov	r12,2
8000c6e2:	f0 1f 00 0b 	mcall	8000c70c <udi_msc_csw_process+0x54>
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
8000c6e6:	48 98       	lddpc	r8,8000c708 <udi_msc_csw_process+0x50>
8000c6e8:	70 19       	ld.w	r9,r8[0x4]
8000c6ea:	48 78       	lddpc	r8,8000c704 <udi_msc_csw_process+0x4c>
8000c6ec:	91 19       	st.w	r8[0x4],r9
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
8000c6ee:	48 68       	lddpc	r8,8000c704 <udi_msc_csw_process+0x4c>
8000c6f0:	70 28       	ld.w	r8,r8[0x8]
8000c6f2:	5c b8       	swap.b	r8
8000c6f4:	10 99       	mov	r9,r8
8000c6f6:	48 48       	lddpc	r8,8000c704 <udi_msc_csw_process+0x4c>
8000c6f8:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_send();
8000c6fa:	f0 1f 00 06 	mcall	8000c710 <udi_msc_csw_process+0x58>
}
8000c6fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c702:	00 00       	add	r0,r0
8000c704:	00 00       	add	r0,r0
8000c706:	01 54       	ld.sh	r4,--r0
8000c708:	00 00       	add	r0,r0
8000c70a:	07 ac       	ld.ub	r12,r3[0x2]
8000c70c:	80 00       	ld.sh	r0,r0[0x0]
8000c70e:	a1 d4       	cbr	r4,0x1
8000c710:	80 00       	ld.sh	r0,r0[0x0]
8000c712:	c7 14       	brge	8000c7f4 <udi_msc_sense_fail+0x50>

8000c714 <udi_msc_csw_send>:


void udi_msc_csw_send(void)
{
8000c714:	eb cd 40 80 	pushm	r7,lr
8000c718:	1a 97       	mov	r7,sp
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
8000c71a:	48 ba       	lddpc	r10,8000c744 <udi_msc_csw_send+0x30>
8000c71c:	48 b8       	lddpc	r8,8000c748 <udi_msc_csw_send+0x34>
8000c71e:	30 d9       	mov	r9,13
8000c720:	30 0b       	mov	r11,0
8000c722:	e0 6c 00 81 	mov	r12,129
8000c726:	f0 1f 00 0a 	mcall	8000c74c <udi_msc_csw_send+0x38>
8000c72a:	18 98       	mov	r8,r12
8000c72c:	ec 18 00 01 	eorl	r8,0x1
8000c730:	5c 58       	castu.b	r8
8000c732:	c0 60       	breq	8000c73e <udi_msc_csw_send+0x2a>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
8000c734:	48 7b       	lddpc	r11,8000c750 <udi_msc_csw_send+0x3c>
8000c736:	e0 6c 00 81 	mov	r12,129
8000c73a:	f0 1f 00 07 	mcall	8000c754 <udi_msc_csw_send+0x40>
	}
}
8000c73e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c742:	00 00       	add	r0,r0
8000c744:	00 00       	add	r0,r0
8000c746:	01 54       	ld.sh	r4,--r0
8000c748:	80 00       	ld.sh	r0,r0[0x0]
8000c74a:	c7 58       	rjmp	8000c834 <udi_msc_sense_pass+0x8>
8000c74c:	80 00       	ld.sh	r0,r0[0x0]
8000c74e:	a4 28       	st.h	r2[0x4],r8
8000c750:	80 00       	ld.sh	r0,r0[0x0]
8000c752:	c7 14       	brge	8000c834 <udi_msc_sense_pass+0x8>
8000c754:	80 00       	ld.sh	r0,r0[0x0]
8000c756:	a5 e8       	*unknown*

8000c758 <udi_msc_csw_sent>:


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000c758:	eb cd 40 80 	pushm	r7,lr
8000c75c:	1a 97       	mov	r7,sp
8000c75e:	20 3d       	sub	sp,12
8000c760:	ef 4c ff fc 	st.w	r7[-4],r12
8000c764:	ef 4b ff f8 	st.w	r7[-8],r11
8000c768:	14 98       	mov	r8,r10
8000c76a:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
8000c76e:	f0 1f 00 03 	mcall	8000c778 <udi_msc_csw_sent+0x20>
}
8000c772:	2f dd       	sub	sp,-12
8000c774:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c778:	80 00       	ld.sh	r0,r0[0x0]
8000c77a:	c4 54       	brge	8000c804 <udi_msc_sense_fail+0x60>

8000c77c <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
8000c77c:	eb cd 40 80 	pushm	r7,lr
8000c780:	1a 97       	mov	r7,sp
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
8000c782:	31 2a       	mov	r10,18
8000c784:	30 0b       	mov	r11,0
8000c786:	48 6c       	lddpc	r12,8000c79c <udi_msc_clear_sense+0x20>
8000c788:	f0 1f 00 06 	mcall	8000c7a0 <udi_msc_clear_sense+0x24>
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
8000c78c:	48 49       	lddpc	r9,8000c79c <udi_msc_clear_sense+0x20>
8000c78e:	3f 08       	mov	r8,-16
8000c790:	b2 88       	st.b	r9[0x0],r8
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
8000c792:	48 39       	lddpc	r9,8000c79c <udi_msc_clear_sense+0x20>
8000c794:	30 a8       	mov	r8,10
8000c796:	b2 f8       	st.b	r9[0x7],r8
}
8000c798:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c79c:	00 00       	add	r0,r0
8000c79e:	07 d0       	ld.ub	r0,r3[0x5]
8000c7a0:	80 00       	ld.sh	r0,r0[0x0]
8000c7a2:	e7 d2       	*unknown*

8000c7a4 <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
8000c7a4:	eb cd 40 80 	pushm	r7,lr
8000c7a8:	1a 97       	mov	r7,sp
8000c7aa:	20 3d       	sub	sp,12
8000c7ac:	18 99       	mov	r9,r12
8000c7ae:	16 98       	mov	r8,r11
8000c7b0:	ef 4a ff f4 	st.w	r7[-12],r10
8000c7b4:	ef 69 ff fc 	st.b	r7[-4],r9
8000c7b8:	ef 58 ff f8 	st.h	r7[-8],r8
	udi_msc_clear_sense();
8000c7bc:	f0 1f 00 19 	mcall	8000c820 <udi_msc_sense_fail+0x7c>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
8000c7c0:	49 99       	lddpc	r9,8000c824 <udi_msc_sense_fail+0x80>
8000c7c2:	30 18       	mov	r8,1
8000c7c4:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.sense_flag_key = sense_key;
8000c7c8:	49 89       	lddpc	r9,8000c828 <udi_msc_sense_fail+0x84>
8000c7ca:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c7ce:	b2 a8       	st.b	r9[0x2],r8
	udi_msc_sense.information[0] = lba >> 24;
8000c7d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c7d4:	b9 88       	lsr	r8,0x18
8000c7d6:	5c 58       	castu.b	r8
8000c7d8:	49 49       	lddpc	r9,8000c828 <udi_msc_sense_fail+0x84>
8000c7da:	b2 b8       	st.b	r9[0x3],r8
	udi_msc_sense.information[1] = lba >> 16;
8000c7dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c7e0:	b1 88       	lsr	r8,0x10
8000c7e2:	5c 58       	castu.b	r8
8000c7e4:	49 19       	lddpc	r9,8000c828 <udi_msc_sense_fail+0x84>
8000c7e6:	b2 c8       	st.b	r9[0x4],r8
	udi_msc_sense.information[2] = lba >> 8;
8000c7e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c7ec:	a9 88       	lsr	r8,0x8
8000c7ee:	5c 58       	castu.b	r8
8000c7f0:	48 e9       	lddpc	r9,8000c828 <udi_msc_sense_fail+0x84>
8000c7f2:	b2 d8       	st.b	r9[0x5],r8
	udi_msc_sense.information[3] = lba;
8000c7f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c7f8:	5c 58       	castu.b	r8
8000c7fa:	48 c9       	lddpc	r9,8000c828 <udi_msc_sense_fail+0x84>
8000c7fc:	b2 e8       	st.b	r9[0x6],r8
	udi_msc_sense.AddSenseCode = add_sense >> 8;
8000c7fe:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000c802:	a9 88       	lsr	r8,0x8
8000c804:	5c 88       	casts.h	r8
8000c806:	5c 58       	castu.b	r8
8000c808:	48 89       	lddpc	r9,8000c828 <udi_msc_sense_fail+0x84>
8000c80a:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
8000c80e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000c812:	5c 58       	castu.b	r8
8000c814:	48 59       	lddpc	r9,8000c828 <udi_msc_sense_fail+0x84>
8000c816:	f3 68 00 0d 	st.b	r9[13],r8
}
8000c81a:	2f dd       	sub	sp,-12
8000c81c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c820:	80 00       	ld.sh	r0,r0[0x0]
8000c822:	c7 7c       	rcall	8000c910 <udi_msc_spc_requestsense+0x20>
8000c824:	00 00       	add	r0,r0
8000c826:	01 54       	ld.sh	r4,--r0
8000c828:	00 00       	add	r0,r0
8000c82a:	07 d0       	ld.ub	r0,r3[0x5]

8000c82c <udi_msc_sense_pass>:

static void udi_msc_sense_pass(void)
{
8000c82c:	eb cd 40 80 	pushm	r7,lr
8000c830:	1a 97       	mov	r7,sp
	udi_msc_clear_sense();
8000c832:	f0 1f 00 05 	mcall	8000c844 <udi_msc_sense_pass+0x18>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
8000c836:	48 59       	lddpc	r9,8000c848 <udi_msc_sense_pass+0x1c>
8000c838:	30 08       	mov	r8,0
8000c83a:	f3 68 00 0c 	st.b	r9[12],r8
}
8000c83e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c842:	00 00       	add	r0,r0
8000c844:	80 00       	ld.sh	r0,r0[0x0]
8000c846:	c7 7c       	rcall	8000c934 <udi_msc_spc_requestsense+0x44>
8000c848:	00 00       	add	r0,r0
8000c84a:	01 54       	ld.sh	r4,--r0

8000c84c <udi_msc_sense_fail_not_present>:


static void udi_msc_sense_fail_not_present(void)
{
8000c84c:	eb cd 40 80 	pushm	r7,lr
8000c850:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
8000c852:	30 0a       	mov	r10,0
8000c854:	e0 6b 3a 00 	mov	r11,14848
8000c858:	30 2c       	mov	r12,2
8000c85a:	f0 1f 00 03 	mcall	8000c864 <udi_msc_sense_fail_not_present+0x18>
}
8000c85e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c862:	00 00       	add	r0,r0
8000c864:	80 00       	ld.sh	r0,r0[0x0]
8000c866:	c7 a4       	brge	8000c95a <udi_msc_spc_inquiry+0x6>

8000c868 <udi_msc_sense_fail_busy_or_change>:

static void udi_msc_sense_fail_busy_or_change(void)
{
8000c868:	eb cd 40 80 	pushm	r7,lr
8000c86c:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
8000c86e:	30 0a       	mov	r10,0
8000c870:	e0 6b 28 00 	mov	r11,10240
8000c874:	30 6c       	mov	r12,6
8000c876:	f0 1f 00 03 	mcall	8000c880 <udi_msc_sense_fail_busy_or_change+0x18>
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}
8000c87a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c87e:	00 00       	add	r0,r0
8000c880:	80 00       	ld.sh	r0,r0[0x0]
8000c882:	c7 a4       	brge	8000c976 <udi_msc_spc_inquiry+0x22>

8000c884 <udi_msc_sense_fail_hardware>:

static void udi_msc_sense_fail_hardware(void)
{
8000c884:	eb cd 40 80 	pushm	r7,lr
8000c888:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
8000c88a:	30 0a       	mov	r10,0
8000c88c:	30 0b       	mov	r11,0
8000c88e:	30 4c       	mov	r12,4
8000c890:	f0 1f 00 02 	mcall	8000c898 <udi_msc_sense_fail_hardware+0x14>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}
8000c894:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c898:	80 00       	ld.sh	r0,r0[0x0]
8000c89a:	c7 a4       	brge	8000c98e <udi_msc_spc_inquiry+0x3a>

8000c89c <udi_msc_sense_fail_protected>:

static void udi_msc_sense_fail_protected(void)
{
8000c89c:	eb cd 40 80 	pushm	r7,lr
8000c8a0:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
8000c8a2:	30 0a       	mov	r10,0
8000c8a4:	e0 6b 27 00 	mov	r11,9984
8000c8a8:	30 7c       	mov	r12,7
8000c8aa:	f0 1f 00 03 	mcall	8000c8b4 <udi_msc_sense_fail_protected+0x18>
}
8000c8ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8b2:	00 00       	add	r0,r0
8000c8b4:	80 00       	ld.sh	r0,r0[0x0]
8000c8b6:	c7 a4       	brge	8000c9aa <udi_msc_spc_inquiry+0x56>

8000c8b8 <udi_msc_sense_fail_cdb_invalid>:

static void udi_msc_sense_fail_cdb_invalid(void)
{
8000c8b8:	eb cd 40 80 	pushm	r7,lr
8000c8bc:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000c8be:	30 0a       	mov	r10,0
8000c8c0:	e0 6b 24 00 	mov	r11,9216
8000c8c4:	30 5c       	mov	r12,5
8000c8c6:	f0 1f 00 03 	mcall	8000c8d0 <udi_msc_sense_fail_cdb_invalid+0x18>
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
8000c8ca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8ce:	00 00       	add	r0,r0
8000c8d0:	80 00       	ld.sh	r0,r0[0x0]
8000c8d2:	c7 a4       	brge	8000c9c6 <udi_msc_spc_inquiry+0x72>

8000c8d4 <udi_msc_sense_command_invalid>:

static void udi_msc_sense_command_invalid(void)
{
8000c8d4:	eb cd 40 80 	pushm	r7,lr
8000c8d8:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000c8da:	30 0a       	mov	r10,0
8000c8dc:	e0 6b 20 00 	mov	r11,8192
8000c8e0:	30 5c       	mov	r12,5
8000c8e2:	f0 1f 00 03 	mcall	8000c8ec <udi_msc_sense_command_invalid+0x18>
			SCSI_ASC_INVALID_COMMAND_OPERATION_CODE, 0);
}
8000c8e6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8ea:	00 00       	add	r0,r0
8000c8ec:	80 00       	ld.sh	r0,r0[0x0]
8000c8ee:	c7 a4       	brge	8000c9e2 <udi_msc_spc_inquiry+0x8e>

8000c8f0 <udi_msc_spc_requestsense>:

//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
8000c8f0:	eb cd 40 80 	pushm	r7,lr
8000c8f4:	1a 97       	mov	r7,sp
8000c8f6:	20 1d       	sub	sp,4
	uint8_t length = udi_msc_cbw.CDB[4];
8000c8f8:	49 38       	lddpc	r8,8000c944 <udi_msc_spc_requestsense+0x54>
8000c8fa:	f1 38 00 13 	ld.ub	r8,r8[19]
8000c8fe:	ef 68 ff ff 	st.b	r7[-1],r8

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
8000c902:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c906:	31 28       	mov	r8,18
8000c908:	f0 09 18 00 	cp.b	r9,r8
8000c90c:	e0 88 00 05 	brls	8000c916 <udi_msc_spc_requestsense+0x26>
		length = sizeof(udi_msc_sense);
8000c910:	31 28       	mov	r8,18
8000c912:	ef 68 ff ff 	st.b	r7[-1],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000c916:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c91a:	e0 6b 00 80 	mov	r11,128
8000c91e:	10 9c       	mov	r12,r8
8000c920:	f0 1f 00 0a 	mcall	8000c948 <udi_msc_spc_requestsense+0x58>
8000c924:	18 98       	mov	r8,r12
8000c926:	ec 18 00 01 	eorl	r8,0x1
8000c92a:	5c 58       	castu.b	r8
8000c92c:	c0 81       	brne	8000c93c <udi_msc_spc_requestsense+0x4c>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
8000c92e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c932:	10 9b       	mov	r11,r8
8000c934:	48 6c       	lddpc	r12,8000c94c <udi_msc_spc_requestsense+0x5c>
8000c936:	f0 1f 00 07 	mcall	8000c950 <udi_msc_spc_requestsense+0x60>
8000c93a:	c0 28       	rjmp	8000c93e <udi_msc_spc_requestsense+0x4e>
	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000c93c:	d7 03       	nop
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
}
8000c93e:	2f fd       	sub	sp,-4
8000c940:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c944:	00 00       	add	r0,r0
8000c946:	07 ac       	ld.ub	r12,r3[0x2]
8000c948:	80 00       	ld.sh	r0,r0[0x0]
8000c94a:	c5 bc       	rcall	8000ca00 <udi_msc_spc_inquiry+0xac>
8000c94c:	00 00       	add	r0,r0
8000c94e:	07 d0       	ld.ub	r0,r3[0x5]
8000c950:	80 00       	ld.sh	r0,r0[0x0]
8000c952:	c6 1c       	rcall	8000ca14 <udi_msc_spc_inquiry+0xc0>

8000c954 <udi_msc_spc_inquiry>:


static void udi_msc_spc_inquiry(void)
{
8000c954:	eb cd 40 80 	pushm	r7,lr
8000c958:	1a 97       	mov	r7,sp
8000c95a:	20 1d       	sub	sp,4
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
8000c95c:	4b e8       	lddpc	r8,8000ca54 <udi_msc_spc_inquiry+0x100>
8000c95e:	f1 38 00 13 	ld.ub	r8,r8[19]
8000c962:	ef 68 ff fe 	st.b	r7[-2],r8

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
8000c966:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c96a:	32 48       	mov	r8,36
8000c96c:	f0 09 18 00 	cp.b	r9,r8
8000c970:	e0 88 00 05 	brls	8000c97a <udi_msc_spc_inquiry+0x26>
		length = sizeof(udi_msc_inquiry_data);
8000c974:	32 48       	mov	r8,36
8000c976:	ef 68 ff fe 	st.b	r7[-2],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000c97a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c97e:	e0 6b 00 80 	mov	r11,128
8000c982:	10 9c       	mov	r12,r8
8000c984:	f0 1f 00 35 	mcall	8000ca58 <udi_msc_spc_inquiry+0x104>
8000c988:	18 98       	mov	r8,r12
8000c98a:	ec 18 00 01 	eorl	r8,0x1
8000c98e:	5c 58       	castu.b	r8
8000c990:	c5 e1       	brne	8000ca4c <udi_msc_spc_inquiry+0xf8>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000c992:	4b 18       	lddpc	r8,8000ca54 <udi_msc_spc_inquiry+0x100>
8000c994:	f1 38 00 10 	ld.ub	r8,r8[16]
8000c998:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000c99c:	c0 61       	brne	8000c9a8 <udi_msc_spc_inquiry+0x54>
			|| (0 != udi_msc_cbw.CDB[2])) {
8000c99e:	4a e8       	lddpc	r8,8000ca54 <udi_msc_spc_inquiry+0x100>
8000c9a0:	f1 38 00 11 	ld.ub	r8,r8[17]
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000c9a4:	58 08       	cp.w	r8,0
8000c9a6:	c0 60       	breq	8000c9b2 <udi_msc_spc_inquiry+0x5e>
			|| (0 != udi_msc_cbw.CDB[2])) {
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
8000c9a8:	f0 1f 00 2d 	mcall	8000ca5c <udi_msc_spc_inquiry+0x108>
		udi_msc_csw_process();
8000c9ac:	f0 1f 00 2d 	mcall	8000ca60 <udi_msc_spc_inquiry+0x10c>
		return;
8000c9b0:	c4 f8       	rjmp	8000ca4e <udi_msc_spc_inquiry+0xfa>
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
8000c9b2:	4a 98       	lddpc	r8,8000ca54 <udi_msc_spc_inquiry+0x100>
8000c9b4:	f1 38 00 0d 	ld.ub	r8,r8[13]
		return;
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
8000c9b8:	10 9c       	mov	r12,r8
8000c9ba:	f0 1f 00 2b 	mcall	8000ca64 <udi_msc_spc_inquiry+0x110>
8000c9be:	18 98       	mov	r8,r12
8000c9c0:	f0 c9 ff ff 	sub	r9,r8,-1
8000c9c4:	4a 98       	lddpc	r8,8000ca68 <udi_msc_spc_inquiry+0x114>
8000c9c6:	2f 08       	sub	r8,-16
8000c9c8:	31 0a       	mov	r10,16
8000c9ca:	12 9b       	mov	r11,r9
8000c9cc:	10 9c       	mov	r12,r8
8000c9ce:	f0 1f 00 28 	mcall	8000ca6c <udi_msc_spc_inquiry+0x118>
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
8000c9d2:	30 08       	mov	r8,0
8000c9d4:	ef 68 ff ff 	st.b	r7[-1],r8
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000c9d8:	c1 a8       	rjmp	8000ca0c <udi_msc_spc_inquiry+0xb8>
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000c9da:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c9de:	4a 39       	lddpc	r9,8000ca68 <udi_msc_spc_inquiry+0x114>
8000c9e0:	f2 08 00 08 	add	r8,r9,r8
8000c9e4:	f1 38 00 10 	ld.ub	r8,r8[16]
8000c9e8:	58 08       	cp.w	r8,0
8000c9ea:	c2 40       	breq	8000ca32 <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
8000c9ec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c9f0:	49 e9       	lddpc	r9,8000ca68 <udi_msc_spc_inquiry+0x114>
8000c9f2:	f2 08 00 08 	add	r8,r9,r8
8000c9f6:	f1 39 00 10 	ld.ub	r9,r8[16]
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000c9fa:	32 28       	mov	r8,34
8000c9fc:	f0 09 18 00 	cp.b	r9,r8
8000ca00:	c1 90       	breq	8000ca32 <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
8000ca02:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ca06:	2f f8       	sub	r8,-1
8000ca08:	ef 68 ff ff 	st.b	r7[-1],r8
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000ca0c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ca10:	31 08       	mov	r8,16
8000ca12:	f0 09 18 00 	cp.b	r9,r8
8000ca16:	ce 21       	brne	8000c9da <udi_msc_spc_inquiry+0x86>
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000ca18:	c0 d8       	rjmp	8000ca32 <udi_msc_spc_inquiry+0xde>
		udi_msc_inquiry_data.product_id[i] = ' ';
8000ca1a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ca1e:	49 39       	lddpc	r9,8000ca68 <udi_msc_spc_inquiry+0x114>
8000ca20:	10 09       	add	r9,r8
8000ca22:	32 08       	mov	r8,32
8000ca24:	f3 68 00 10 	st.b	r9[16],r8
		i++;
8000ca28:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ca2c:	2f f8       	sub	r8,-1
8000ca2e:	ef 68 ff ff 	st.b	r7[-1],r8
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000ca32:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ca36:	31 08       	mov	r8,16
8000ca38:	f0 09 18 00 	cp.b	r9,r8
8000ca3c:	ce f1       	brne	8000ca1a <udi_msc_spc_inquiry+0xc6>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
8000ca3e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000ca42:	10 9b       	mov	r11,r8
8000ca44:	48 9c       	lddpc	r12,8000ca68 <udi_msc_spc_inquiry+0x114>
8000ca46:	f0 1f 00 0b 	mcall	8000ca70 <udi_msc_spc_inquiry+0x11c>
8000ca4a:	c0 28       	rjmp	8000ca4e <udi_msc_spc_inquiry+0xfa>
	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000ca4c:	d7 03       	nop
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
}
8000ca4e:	2f fd       	sub	sp,-4
8000ca50:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca54:	00 00       	add	r0,r0
8000ca56:	07 ac       	ld.ub	r12,r3[0x2]
8000ca58:	80 00       	ld.sh	r0,r0[0x0]
8000ca5a:	c5 bc       	rcall	8000cb10 <udi_msc_spc_mode_sense+0x24>
8000ca5c:	80 00       	ld.sh	r0,r0[0x0]
8000ca5e:	c8 b8       	rjmp	8000cb74 <udi_msc_spc_mode_sense+0x88>
8000ca60:	80 00       	ld.sh	r0,r0[0x0]
8000ca62:	c6 b8       	rjmp	8000cb38 <udi_msc_spc_mode_sense+0x4c>
8000ca64:	80 00       	ld.sh	r0,r0[0x0]
8000ca66:	c0 2c       	rcall	8000ca6a <udi_msc_spc_inquiry+0x116>
8000ca68:	00 00       	add	r0,r0
8000ca6a:	01 68       	ld.uh	r8,--r0
8000ca6c:	80 00       	ld.sh	r0,r0[0x0]
8000ca6e:	e6 8a 80 00 	brle	800dca6e <Stored_values_flash+0x9cc6e>
8000ca72:	c6 1c       	rcall	8000cb34 <udi_msc_spc_mode_sense+0x48>

8000ca74 <udi_msc_spc_testunitready_global>:


static bool udi_msc_spc_testunitready_global(void)
{
8000ca74:	eb cd 40 80 	pushm	r7,lr
8000ca78:	1a 97       	mov	r7,sp
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
8000ca7a:	48 e8       	lddpc	r8,8000cab0 <udi_msc_spc_testunitready_global+0x3c>
8000ca7c:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ca80:	10 9c       	mov	r12,r8
8000ca82:	f0 1f 00 0d 	mcall	8000cab4 <udi_msc_spc_testunitready_global+0x40>
8000ca86:	18 98       	mov	r8,r12
8000ca88:	58 28       	cp.w	r8,2
8000ca8a:	c0 a0       	breq	8000ca9e <udi_msc_spc_testunitready_global+0x2a>
8000ca8c:	58 38       	cp.w	r8,3
8000ca8e:	c0 50       	breq	8000ca98 <udi_msc_spc_testunitready_global+0x24>
8000ca90:	58 08       	cp.w	r8,0
8000ca92:	c0 91       	brne	8000caa4 <udi_msc_spc_testunitready_global+0x30>
	case CTRL_GOOD:
		return true;	// Don't change sense data
8000ca94:	30 18       	mov	r8,1
8000ca96:	c0 a8       	rjmp	8000caaa <udi_msc_spc_testunitready_global+0x36>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000ca98:	f0 1f 00 08 	mcall	8000cab8 <udi_msc_spc_testunitready_global+0x44>
		break;
8000ca9c:	c0 68       	rjmp	8000caa8 <udi_msc_spc_testunitready_global+0x34>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000ca9e:	f0 1f 00 08 	mcall	8000cabc <udi_msc_spc_testunitready_global+0x48>
		break;
8000caa2:	c0 38       	rjmp	8000caa8 <udi_msc_spc_testunitready_global+0x34>
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
8000caa4:	f0 1f 00 07 	mcall	8000cac0 <udi_msc_spc_testunitready_global+0x4c>
		break;
	}
	return false;
8000caa8:	30 08       	mov	r8,0
}
8000caaa:	10 9c       	mov	r12,r8
8000caac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cab0:	00 00       	add	r0,r0
8000cab2:	07 ac       	ld.ub	r12,r3[0x2]
8000cab4:	80 00       	ld.sh	r0,r0[0x0]
8000cab6:	bf 3c       	mul	r12,pc
8000cab8:	80 00       	ld.sh	r0,r0[0x0]
8000caba:	c8 68       	rjmp	8000cbc6 <udi_msc_spc_mode_sense+0xda>
8000cabc:	80 00       	ld.sh	r0,r0[0x0]
8000cabe:	c8 4c       	rcall	8000cbc6 <udi_msc_spc_mode_sense+0xda>
8000cac0:	80 00       	ld.sh	r0,r0[0x0]
8000cac2:	c8 84       	brge	8000c9d2 <udi_msc_spc_inquiry+0x7e>

8000cac4 <udi_msc_spc_testunitready>:


static void udi_msc_spc_testunitready(void)
{
8000cac4:	eb cd 40 80 	pushm	r7,lr
8000cac8:	1a 97       	mov	r7,sp
	if (udi_msc_spc_testunitready_global()) {
8000caca:	f0 1f 00 06 	mcall	8000cae0 <udi_msc_spc_testunitready+0x1c>
8000cace:	18 98       	mov	r8,r12
8000cad0:	58 08       	cp.w	r8,0
8000cad2:	c0 30       	breq	8000cad8 <udi_msc_spc_testunitready+0x14>
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
8000cad4:	f0 1f 00 04 	mcall	8000cae4 <udi_msc_spc_testunitready+0x20>
	}
	// Send status in CSW packet
	udi_msc_csw_process();
8000cad8:	f0 1f 00 04 	mcall	8000cae8 <udi_msc_spc_testunitready+0x24>
}
8000cadc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cae0:	80 00       	ld.sh	r0,r0[0x0]
8000cae2:	ca 74       	brge	8000ca30 <udi_msc_spc_inquiry+0xdc>
8000cae4:	80 00       	ld.sh	r0,r0[0x0]
8000cae6:	c8 2c       	rcall	8000cbea <udi_msc_spc_mode_sense+0xfe>
8000cae8:	80 00       	ld.sh	r0,r0[0x0]
8000caea:	c6 b8       	rjmp	8000cbc0 <udi_msc_spc_mode_sense+0xd4>

8000caec <udi_msc_spc_mode_sense>:


static void udi_msc_spc_mode_sense(bool b_sense10)
{
8000caec:	eb cd 40 80 	pushm	r7,lr
8000caf0:	1a 97       	mov	r7,sp
8000caf2:	20 3d       	sub	sp,12
8000caf4:	18 98       	mov	r8,r12
8000caf6:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
8000cafa:	31 4a       	mov	r10,20
8000cafc:	30 0b       	mov	r11,0
8000cafe:	4c ac       	lddpc	r12,8000cc24 <udi_msc_spc_mode_sense+0x138>
8000cb00:	f0 1f 00 4a 	mcall	8000cc28 <udi_msc_spc_mode_sense+0x13c>

	// Initialize process
	if (b_sense10) {
8000cb04:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cb08:	30 08       	mov	r8,0
8000cb0a:	f0 09 18 00 	cp.b	r9,r8
8000cb0e:	c0 e0       	breq	8000cb2a <udi_msc_spc_mode_sense+0x3e>
		request_lgt = udi_msc_cbw.CDB[8];
8000cb10:	4c 78       	lddpc	r8,8000cc2c <udi_msc_spc_mode_sense+0x140>
8000cb12:	f1 38 00 17 	ld.ub	r8,r8[23]
8000cb16:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s10.sense_data;
8000cb1a:	4c 38       	lddpc	r8,8000cc24 <udi_msc_spc_mode_sense+0x138>
8000cb1c:	2f 88       	sub	r8,-8
8000cb1e:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
8000cb22:	30 88       	mov	r8,8
8000cb24:	ef 68 ff f8 	st.b	r7[-8],r8
8000cb28:	c0 d8       	rjmp	8000cb42 <udi_msc_spc_mode_sense+0x56>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
8000cb2a:	4c 18       	lddpc	r8,8000cc2c <udi_msc_spc_mode_sense+0x140>
8000cb2c:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cb30:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s6.sense_data;
8000cb34:	4b c8       	lddpc	r8,8000cc24 <udi_msc_spc_mode_sense+0x138>
8000cb36:	2f c8       	sub	r8,-4
8000cb38:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
8000cb3c:	30 48       	mov	r8,4
8000cb3e:	ef 68 ff f8 	st.b	r7[-8],r8
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
8000cb42:	4b b8       	lddpc	r8,8000cc2c <udi_msc_spc_mode_sense+0x140>
8000cb44:	f1 38 00 11 	ld.ub	r8,r8[17]
8000cb48:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000cb4c:	ef 68 ff f9 	st.b	r7[-7],r8
	if ((SCSI_MS_MODE_INFEXP == mode)
8000cb50:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000cb54:	31 c8       	mov	r8,28
8000cb56:	f0 09 18 00 	cp.b	r9,r8
8000cb5a:	c0 70       	breq	8000cb68 <udi_msc_spc_mode_sense+0x7c>
8000cb5c:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000cb60:	33 f8       	mov	r8,63
8000cb62:	f0 09 18 00 	cp.b	r9,r8
8000cb66:	c1 21       	brne	8000cb8a <udi_msc_spc_mode_sense+0x9e>
			|| (SCSI_MS_MODE_ALL == mode)) {
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
8000cb68:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cb6c:	31 c8       	mov	r8,28
8000cb6e:	b2 88       	st.b	r9[0x0],r8
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
8000cb70:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cb74:	30 a8       	mov	r8,10
8000cb76:	b2 98       	st.b	r9[0x1],r8
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
8000cb78:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cb7c:	30 58       	mov	r8,5
8000cb7e:	b2 b8       	st.b	r9[0x3],r8
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
8000cb80:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cb84:	2f 48       	sub	r8,-12
8000cb86:	ef 68 ff f8 	st.b	r7[-8],r8
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
8000cb8a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000cb8e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cb92:	f0 09 18 00 	cp.b	r9,r8
8000cb96:	e0 88 00 06 	brls	8000cba2 <udi_msc_spc_mode_sense+0xb6>
		request_lgt = data_sense_lgt;
8000cb9a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cb9e:	ef 68 ff fa 	st.b	r7[-6],r8
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
8000cba2:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000cba6:	e0 6b 00 80 	mov	r11,128
8000cbaa:	10 9c       	mov	r12,r8
8000cbac:	f0 1f 00 21 	mcall	8000cc30 <udi_msc_spc_mode_sense+0x144>
8000cbb0:	18 98       	mov	r8,r12
8000cbb2:	ec 18 00 01 	eorl	r8,0x1
8000cbb6:	5c 58       	castu.b	r8
8000cbb8:	c3 21       	brne	8000cc1c <udi_msc_spc_mode_sense+0x130>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
8000cbba:	49 d8       	lddpc	r8,8000cc2c <udi_msc_spc_mode_sense+0x140>
8000cbbc:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cbc0:	10 9c       	mov	r12,r8
8000cbc2:	f0 1f 00 1d 	mcall	8000cc34 <udi_msc_spc_mode_sense+0x148>
8000cbc6:	18 98       	mov	r8,r12
8000cbc8:	58 08       	cp.w	r8,0
8000cbca:	c0 40       	breq	8000cbd2 <udi_msc_spc_mode_sense+0xe6>
8000cbcc:	e0 68 00 80 	mov	r8,128
8000cbd0:	c0 28       	rjmp	8000cbd4 <udi_msc_spc_mode_sense+0xe8>
8000cbd2:	30 08       	mov	r8,0
8000cbd4:	ef 68 ff fb 	st.b	r7[-5],r8

	if (b_sense10) {
8000cbd8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cbdc:	30 08       	mov	r8,0
8000cbde:	f0 09 18 00 	cp.b	r9,r8
8000cbe2:	c0 c0       	breq	8000cbfa <udi_msc_spc_mode_sense+0x10e>
		sense.s10.header.mode_data_length =
8000cbe4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cbe8:	20 28       	sub	r8,2
8000cbea:	5c 88       	casts.h	r8
8000cbec:	48 e9       	lddpc	r9,8000cc24 <udi_msc_spc_mode_sense+0x138>
8000cbee:	b2 08       	st.h	r9[0x0],r8
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
8000cbf0:	48 d9       	lddpc	r9,8000cc24 <udi_msc_spc_mode_sense+0x138>
8000cbf2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000cbf6:	b2 b8       	st.b	r9[0x3],r8
8000cbf8:	c0 b8       	rjmp	8000cc0e <udi_msc_spc_mode_sense+0x122>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
8000cbfa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cbfe:	20 18       	sub	r8,1
8000cc00:	5c 58       	castu.b	r8
8000cc02:	48 99       	lddpc	r9,8000cc24 <udi_msc_spc_mode_sense+0x138>
8000cc04:	b2 88       	st.b	r9[0x0],r8
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
8000cc06:	48 89       	lddpc	r9,8000cc24 <udi_msc_spc_mode_sense+0x138>
8000cc08:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000cc0c:	b2 a8       	st.b	r9[0x2],r8
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
8000cc0e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000cc12:	10 9b       	mov	r11,r8
8000cc14:	48 4c       	lddpc	r12,8000cc24 <udi_msc_spc_mode_sense+0x138>
8000cc16:	f0 1f 00 09 	mcall	8000cc38 <udi_msc_spc_mode_sense+0x14c>
8000cc1a:	c0 28       	rjmp	8000cc1e <udi_msc_spc_mode_sense+0x132>
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
		return;
8000cc1c:	d7 03       	nop
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
}
8000cc1e:	2f dd       	sub	sp,-12
8000cc20:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc24:	00 00       	add	r0,r0
8000cc26:	07 f8       	ld.ub	r8,r3[0x7]
8000cc28:	80 00       	ld.sh	r0,r0[0x0]
8000cc2a:	e7 d2 00 00 	ldins.h	r2:b,r3[0]
8000cc2e:	07 ac       	ld.ub	r12,r3[0x2]
8000cc30:	80 00       	ld.sh	r0,r0[0x0]
8000cc32:	c5 bc       	rcall	8000cce8 <udi_msc_sbc_trans+0x10>
8000cc34:	80 00       	ld.sh	r0,r0[0x0]
8000cc36:	bf dc       	cbr	r12,0x1f
8000cc38:	80 00       	ld.sh	r0,r0[0x0]
8000cc3a:	c6 1c       	rcall	8000ccfc <udi_msc_sbc_trans+0x24>

8000cc3c <udi_msc_sbc_read_capacity>:


static void udi_msc_sbc_read_capacity(void)
{
8000cc3c:	eb cd 40 80 	pushm	r7,lr
8000cc40:	1a 97       	mov	r7,sp
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
8000cc42:	e0 6b 00 80 	mov	r11,128
8000cc46:	30 8c       	mov	r12,8
8000cc48:	f0 1f 00 1b 	mcall	8000ccb4 <udi_msc_sbc_read_capacity+0x78>
8000cc4c:	18 98       	mov	r8,r12
8000cc4e:	ec 18 00 01 	eorl	r8,0x1
8000cc52:	5c 58       	castu.b	r8
8000cc54:	c2 d1       	brne	8000ccae <udi_msc_sbc_read_capacity+0x72>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
8000cc56:	49 98       	lddpc	r8,8000ccb8 <udi_msc_sbc_read_capacity+0x7c>
8000cc58:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cc5c:	49 8b       	lddpc	r11,8000ccbc <udi_msc_sbc_read_capacity+0x80>
8000cc5e:	10 9c       	mov	r12,r8
8000cc60:	f0 1f 00 18 	mcall	8000ccc0 <udi_msc_sbc_read_capacity+0x84>
8000cc64:	18 98       	mov	r8,r12
					&udi_msc_capacity.max_lba)) {
8000cc66:	58 28       	cp.w	r8,2
8000cc68:	c1 80       	breq	8000cc98 <udi_msc_sbc_read_capacity+0x5c>
8000cc6a:	58 38       	cp.w	r8,3
8000cc6c:	c1 10       	breq	8000cc8e <udi_msc_sbc_read_capacity+0x52>
8000cc6e:	58 08       	cp.w	r8,0
8000cc70:	c1 91       	brne	8000cca2 <udi_msc_sbc_read_capacity+0x66>
		udi_msc_csw_process();
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
8000cc72:	49 38       	lddpc	r8,8000ccbc <udi_msc_sbc_read_capacity+0x80>
8000cc74:	e0 69 02 00 	mov	r9,512
8000cc78:	91 19       	st.w	r8[0x4],r9
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
8000cc7a:	49 18       	lddpc	r8,8000ccbc <udi_msc_sbc_read_capacity+0x80>
8000cc7c:	70 09       	ld.w	r9,r8[0x0]
8000cc7e:	49 08       	lddpc	r8,8000ccbc <udi_msc_sbc_read_capacity+0x80>
8000cc80:	91 09       	st.w	r8[0x0],r9
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
8000cc82:	48 f8       	lddpc	r8,8000ccbc <udi_msc_sbc_read_capacity+0x80>
8000cc84:	30 8b       	mov	r11,8
8000cc86:	10 9c       	mov	r12,r8
8000cc88:	f0 1f 00 0f 	mcall	8000ccc4 <udi_msc_sbc_read_capacity+0x88>
8000cc8c:	c1 28       	rjmp	8000ccb0 <udi_msc_sbc_read_capacity+0x74>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000cc8e:	f0 1f 00 0f 	mcall	8000ccc8 <udi_msc_sbc_read_capacity+0x8c>
		udi_msc_csw_process();
8000cc92:	f0 1f 00 0f 	mcall	8000cccc <udi_msc_sbc_read_capacity+0x90>
		return;
8000cc96:	c0 d8       	rjmp	8000ccb0 <udi_msc_sbc_read_capacity+0x74>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000cc98:	f0 1f 00 0e 	mcall	8000ccd0 <udi_msc_sbc_read_capacity+0x94>
		udi_msc_csw_process();
8000cc9c:	f0 1f 00 0c 	mcall	8000cccc <udi_msc_sbc_read_capacity+0x90>
		return;
8000cca0:	c0 88       	rjmp	8000ccb0 <udi_msc_sbc_read_capacity+0x74>
	default:
		udi_msc_sense_fail_hardware();
8000cca2:	f0 1f 00 0d 	mcall	8000ccd4 <udi_msc_sbc_read_capacity+0x98>
		udi_msc_csw_process();
8000cca6:	f0 1f 00 0a 	mcall	8000cccc <udi_msc_sbc_read_capacity+0x90>
		return;
8000ccaa:	d7 03       	nop
8000ccac:	c0 28       	rjmp	8000ccb0 <udi_msc_sbc_read_capacity+0x74>
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
					USB_CBW_DIRECTION_IN))
		return;
8000ccae:	d7 03       	nop
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
			sizeof(udi_msc_capacity));
}
8000ccb0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccb4:	80 00       	ld.sh	r0,r0[0x0]
8000ccb6:	c5 bc       	rcall	8000cd6c <udi_msc_sbc_trans+0x94>
8000ccb8:	00 00       	add	r0,r0
8000ccba:	07 ac       	ld.ub	r12,r3[0x2]
8000ccbc:	00 00       	add	r0,r0
8000ccbe:	07 f0       	ld.ub	r0,r3[0x7]
8000ccc0:	80 00       	ld.sh	r0,r0[0x0]
8000ccc2:	bf 88       	lsr	r8,0x1e
8000ccc4:	80 00       	ld.sh	r0,r0[0x0]
8000ccc6:	c6 1c       	rcall	8000cd88 <udi_msc_sbc_trans+0xb0>
8000ccc8:	80 00       	ld.sh	r0,r0[0x0]
8000ccca:	c8 68       	rjmp	8000cdd6 <udi_msc_process_trans+0xa>
8000cccc:	80 00       	ld.sh	r0,r0[0x0]
8000ccce:	c6 b8       	rjmp	8000cda4 <udi_msc_sbc_trans+0xcc>
8000ccd0:	80 00       	ld.sh	r0,r0[0x0]
8000ccd2:	c8 4c       	rcall	8000cdda <udi_msc_process_trans+0xe>
8000ccd4:	80 00       	ld.sh	r0,r0[0x0]
8000ccd6:	c8 84       	brge	8000cbe6 <udi_msc_spc_mode_sense+0xfa>

8000ccd8 <udi_msc_sbc_trans>:


static void udi_msc_sbc_trans(bool b_read)
{
8000ccd8:	eb cd 40 80 	pushm	r7,lr
8000ccdc:	1a 97       	mov	r7,sp
8000ccde:	20 2d       	sub	sp,8
8000cce0:	18 98       	mov	r8,r12
8000cce2:	ef 68 ff f8 	st.b	r7[-8],r8
	uint32_t trans_size;

	if (!b_read) {
8000cce6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ccea:	ec 18 00 01 	eorl	r8,0x1
8000ccee:	5c 58       	castu.b	r8
8000ccf0:	c0 f0       	breq	8000cd0e <udi_msc_sbc_trans+0x36>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
8000ccf2:	4a e8       	lddpc	r8,8000cda8 <udi_msc_sbc_trans+0xd0>
8000ccf4:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ccf8:	10 9c       	mov	r12,r8
8000ccfa:	f0 1f 00 2d 	mcall	8000cdac <udi_msc_sbc_trans+0xd4>
8000ccfe:	18 98       	mov	r8,r12
8000cd00:	58 08       	cp.w	r8,0
8000cd02:	c0 60       	breq	8000cd0e <udi_msc_sbc_trans+0x36>
			// Write not authorized
			udi_msc_sense_fail_protected();
8000cd04:	f0 1f 00 2b 	mcall	8000cdb0 <udi_msc_sbc_trans+0xd8>
			udi_msc_csw_process();
8000cd08:	f0 1f 00 2b 	mcall	8000cdb4 <udi_msc_sbc_trans+0xdc>
			return;
8000cd0c:	c4 a8       	rjmp	8000cda0 <udi_msc_sbc_trans+0xc8>
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
8000cd0e:	4a b9       	lddpc	r9,8000cdb8 <udi_msc_sbc_trans+0xe0>
8000cd10:	4a 68       	lddpc	r8,8000cda8 <udi_msc_sbc_trans+0xd0>
8000cd12:	f1 38 00 11 	ld.ub	r8,r8[17]
8000cd16:	b2 88       	st.b	r9[0x0],r8
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
8000cd18:	4a 88       	lddpc	r8,8000cdb8 <udi_msc_sbc_trans+0xe0>
8000cd1a:	f0 c9 ff ff 	sub	r9,r8,-1
8000cd1e:	4a 38       	lddpc	r8,8000cda8 <udi_msc_sbc_trans+0xd0>
8000cd20:	f1 38 00 12 	ld.ub	r8,r8[18]
8000cd24:	b2 88       	st.b	r9[0x0],r8
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
8000cd26:	4a 58       	lddpc	r8,8000cdb8 <udi_msc_sbc_trans+0xe0>
8000cd28:	f0 c9 ff fe 	sub	r9,r8,-2
8000cd2c:	49 f8       	lddpc	r8,8000cda8 <udi_msc_sbc_trans+0xd0>
8000cd2e:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cd32:	b2 88       	st.b	r9[0x0],r8
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
8000cd34:	4a 18       	lddpc	r8,8000cdb8 <udi_msc_sbc_trans+0xe0>
8000cd36:	f0 c9 ff fd 	sub	r9,r8,-3
8000cd3a:	49 c8       	lddpc	r8,8000cda8 <udi_msc_sbc_trans+0xd0>
8000cd3c:	f1 38 00 14 	ld.ub	r8,r8[20]
8000cd40:	b2 88       	st.b	r9[0x0],r8
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
8000cd42:	49 f9       	lddpc	r9,8000cdbc <udi_msc_sbc_trans+0xe4>
8000cd44:	49 98       	lddpc	r8,8000cda8 <udi_msc_sbc_trans+0xd0>
8000cd46:	f1 38 00 16 	ld.ub	r8,r8[22]
8000cd4a:	b2 88       	st.b	r9[0x0],r8
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
8000cd4c:	49 c8       	lddpc	r8,8000cdbc <udi_msc_sbc_trans+0xe4>
8000cd4e:	f0 c9 ff ff 	sub	r9,r8,-1
8000cd52:	49 68       	lddpc	r8,8000cda8 <udi_msc_sbc_trans+0xd0>
8000cd54:	f1 38 00 17 	ld.ub	r8,r8[23]
8000cd58:	b2 88       	st.b	r9[0x0],r8

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
8000cd5a:	49 98       	lddpc	r8,8000cdbc <udi_msc_sbc_trans+0xe4>
8000cd5c:	90 08       	ld.sh	r8,r8[0x0]
8000cd5e:	5c 78       	castu.h	r8
8000cd60:	a9 78       	lsl	r8,0x9
8000cd62:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udi_msc_cbw_validate(trans_size,
8000cd66:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000cd6a:	30 08       	mov	r8,0
8000cd6c:	f0 09 18 00 	cp.b	r9,r8
8000cd70:	c0 40       	breq	8000cd78 <udi_msc_sbc_trans+0xa0>
8000cd72:	e0 68 00 80 	mov	r8,128
8000cd76:	c0 28       	rjmp	8000cd7a <udi_msc_sbc_trans+0xa2>
8000cd78:	30 08       	mov	r8,0
8000cd7a:	10 9b       	mov	r11,r8
8000cd7c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cd80:	f0 1f 00 10 	mcall	8000cdc0 <udi_msc_sbc_trans+0xe8>
8000cd84:	18 98       	mov	r8,r12
8000cd86:	ec 18 00 01 	eorl	r8,0x1
8000cd8a:	5c 58       	castu.b	r8
8000cd8c:	c0 91       	brne	8000cd9e <udi_msc_sbc_trans+0xc6>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
8000cd8e:	48 e9       	lddpc	r9,8000cdc4 <udi_msc_sbc_trans+0xec>
8000cd90:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cd94:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_trans_req = true;
8000cd96:	48 d9       	lddpc	r9,8000cdc8 <udi_msc_sbc_trans+0xf0>
8000cd98:	30 18       	mov	r8,1
8000cd9a:	b2 88       	st.b	r9[0x0],r8
8000cd9c:	c0 28       	rjmp	8000cda0 <udi_msc_sbc_trans+0xc8>
	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
	if (!udi_msc_cbw_validate(trans_size,
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;
8000cd9e:	d7 03       	nop

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
	udi_msc_b_trans_req = true;
	UDI_MSC_NOTIFY_TRANS_EXT();
}
8000cda0:	2f ed       	sub	sp,-8
8000cda2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cda6:	00 00       	add	r0,r0
8000cda8:	00 00       	add	r0,r0
8000cdaa:	07 ac       	ld.ub	r12,r3[0x2]
8000cdac:	80 00       	ld.sh	r0,r0[0x0]
8000cdae:	bf dc       	cbr	r12,0x1f
8000cdb0:	80 00       	ld.sh	r0,r0[0x0]
8000cdb2:	c8 9c       	rcall	8000cec4 <udi_msc_trans_ack+0x2c>
8000cdb4:	80 00       	ld.sh	r0,r0[0x0]
8000cdb6:	c6 b8       	rjmp	8000ce8c <udi_msc_process_trans+0xc0>
8000cdb8:	00 00       	add	r0,r0
8000cdba:	07 e8       	ld.ub	r8,r3[0x6]
8000cdbc:	00 00       	add	r0,r0
8000cdbe:	07 ec       	ld.ub	r12,r3[0x6]
8000cdc0:	80 00       	ld.sh	r0,r0[0x0]
8000cdc2:	c5 bc       	rcall	8000ce78 <udi_msc_process_trans+0xac>
8000cdc4:	00 00       	add	r0,r0
8000cdc6:	07 e6       	ld.ub	r6,r3[0x6]
8000cdc8:	00 00       	add	r0,r0
8000cdca:	07 e5       	ld.ub	r5,r3[0x6]

8000cdcc <udi_msc_process_trans>:


bool udi_msc_process_trans(void)
{
8000cdcc:	eb cd 40 80 	pushm	r7,lr
8000cdd0:	1a 97       	mov	r7,sp
8000cdd2:	20 1d       	sub	sp,4
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
8000cdd4:	4a 58       	lddpc	r8,8000ce68 <udi_msc_process_trans+0x9c>
8000cdd6:	11 88       	ld.ub	r8,r8[0x0]
8000cdd8:	ec 18 00 01 	eorl	r8,0x1
8000cddc:	5c 58       	castu.b	r8
8000cdde:	c0 30       	breq	8000cde4 <udi_msc_process_trans+0x18>
		return false;	// No Transfer request to do
8000cde0:	30 08       	mov	r8,0
8000cde2:	c3 f8       	rjmp	8000ce60 <udi_msc_process_trans+0x94>
	udi_msc_b_trans_req = false;
8000cde4:	4a 19       	lddpc	r9,8000ce68 <udi_msc_process_trans+0x9c>
8000cde6:	30 08       	mov	r8,0
8000cde8:	b2 88       	st.b	r9[0x0],r8

	// Start transfer
	if (udi_msc_b_read) {
8000cdea:	4a 18       	lddpc	r8,8000ce6c <udi_msc_process_trans+0xa0>
8000cdec:	11 88       	ld.ub	r8,r8[0x0]
8000cdee:	58 08       	cp.w	r8,0
8000cdf0:	c1 20       	breq	8000ce14 <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000cdf2:	4a 08       	lddpc	r8,8000ce70 <udi_msc_process_trans+0xa4>
8000cdf4:	90 08       	ld.sh	r8,r8[0x0]
8000cdf6:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000cdfa:	49 f8       	lddpc	r8,8000ce74 <udi_msc_process_trans+0xa8>
8000cdfc:	70 09       	ld.w	r9,r8[0x0]
8000cdfe:	49 f8       	lddpc	r8,8000ce78 <udi_msc_process_trans+0xac>
8000ce00:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ce04:	12 9b       	mov	r11,r9
8000ce06:	10 9c       	mov	r12,r8
8000ce08:	f0 1f 00 1d 	mcall	8000ce7c <udi_msc_process_trans+0xb0>
8000ce0c:	18 98       	mov	r8,r12
8000ce0e:	ef 48 ff fc 	st.w	r7[-4],r8
8000ce12:	c1 18       	rjmp	8000ce34 <udi_msc_process_trans+0x68>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000ce14:	49 78       	lddpc	r8,8000ce70 <udi_msc_process_trans+0xa4>
8000ce16:	90 08       	ld.sh	r8,r8[0x0]
8000ce18:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000ce1c:	49 68       	lddpc	r8,8000ce74 <udi_msc_process_trans+0xa8>
8000ce1e:	70 09       	ld.w	r9,r8[0x0]
8000ce20:	49 68       	lddpc	r8,8000ce78 <udi_msc_process_trans+0xac>
8000ce22:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ce26:	12 9b       	mov	r11,r9
8000ce28:	10 9c       	mov	r12,r8
8000ce2a:	f0 1f 00 16 	mcall	8000ce80 <udi_msc_process_trans+0xb4>
8000ce2e:	18 98       	mov	r8,r12
8000ce30:	ef 48 ff fc 	st.w	r7[-4],r8
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
8000ce34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ce38:	58 28       	cp.w	r8,2
8000ce3a:	c0 b0       	breq	8000ce50 <udi_msc_process_trans+0x84>
8000ce3c:	58 38       	cp.w	r8,3
8000ce3e:	c0 60       	breq	8000ce4a <udi_msc_process_trans+0x7e>
8000ce40:	58 08       	cp.w	r8,0
8000ce42:	c0 a1       	brne	8000ce56 <udi_msc_process_trans+0x8a>
	case CTRL_GOOD:
		udi_msc_sense_pass();
8000ce44:	f0 1f 00 10 	mcall	8000ce84 <udi_msc_process_trans+0xb8>
		break;
8000ce48:	c0 98       	rjmp	8000ce5a <udi_msc_process_trans+0x8e>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000ce4a:	f0 1f 00 10 	mcall	8000ce88 <udi_msc_process_trans+0xbc>
		break;
8000ce4e:	c0 68       	rjmp	8000ce5a <udi_msc_process_trans+0x8e>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000ce50:	f0 1f 00 0f 	mcall	8000ce8c <udi_msc_process_trans+0xc0>
		break;
8000ce54:	c0 38       	rjmp	8000ce5a <udi_msc_process_trans+0x8e>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
8000ce56:	f0 1f 00 0f 	mcall	8000ce90 <udi_msc_process_trans+0xc4>
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
8000ce5a:	f0 1f 00 0f 	mcall	8000ce94 <udi_msc_process_trans+0xc8>
	return true;
8000ce5e:	30 18       	mov	r8,1
}
8000ce60:	10 9c       	mov	r12,r8
8000ce62:	2f fd       	sub	sp,-4
8000ce64:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ce68:	00 00       	add	r0,r0
8000ce6a:	07 e5       	ld.ub	r5,r3[0x6]
8000ce6c:	00 00       	add	r0,r0
8000ce6e:	07 e6       	ld.ub	r6,r3[0x6]
8000ce70:	00 00       	add	r0,r0
8000ce72:	07 ec       	ld.ub	r12,r3[0x6]
8000ce74:	00 00       	add	r0,r0
8000ce76:	07 e8       	ld.ub	r8,r3[0x6]
8000ce78:	00 00       	add	r0,r0
8000ce7a:	07 ac       	ld.ub	r12,r3[0x2]
8000ce7c:	80 00       	ld.sh	r0,r0[0x0]
8000ce7e:	c0 70       	breq	8000ce8c <udi_msc_process_trans+0xc0>
8000ce80:	80 00       	ld.sh	r0,r0[0x0]
8000ce82:	c0 e4       	brge	8000ce9e <udi_msc_trans_ack+0x6>
8000ce84:	80 00       	ld.sh	r0,r0[0x0]
8000ce86:	c8 2c       	rcall	8000cf8a <udi_msc_trans_block+0xba>
8000ce88:	80 00       	ld.sh	r0,r0[0x0]
8000ce8a:	c8 68       	rjmp	8000cf96 <udi_msc_trans_block+0xc6>
8000ce8c:	80 00       	ld.sh	r0,r0[0x0]
8000ce8e:	c8 4c       	rcall	8000cf96 <udi_msc_trans_block+0xc6>
8000ce90:	80 00       	ld.sh	r0,r0[0x0]
8000ce92:	c8 84       	brge	8000cda2 <udi_msc_sbc_trans+0xca>
8000ce94:	80 00       	ld.sh	r0,r0[0x0]
8000ce96:	c6 b8       	rjmp	8000cf6c <udi_msc_trans_block+0x9c>

8000ce98 <udi_msc_trans_ack>:


static void udi_msc_trans_ack(udd_ep_status_t status, iram_size_t n,
		udd_ep_id_t ep)
{
8000ce98:	eb cd 40 80 	pushm	r7,lr
8000ce9c:	1a 97       	mov	r7,sp
8000ce9e:	20 3d       	sub	sp,12
8000cea0:	ef 4c ff fc 	st.w	r7[-4],r12
8000cea4:	ef 4b ff f8 	st.w	r7[-8],r11
8000cea8:	14 98       	mov	r8,r10
8000ceaa:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
8000ceae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ceb2:	58 08       	cp.w	r8,0
8000ceb4:	5f 18       	srne	r8
8000ceb6:	5c 58       	castu.b	r8
8000ceb8:	48 49       	lddpc	r9,8000cec8 <udi_msc_trans_ack+0x30>
8000ceba:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_ack_trans = true;
8000cebc:	48 49       	lddpc	r9,8000cecc <udi_msc_trans_ack+0x34>
8000cebe:	30 18       	mov	r8,1
8000cec0:	b2 88       	st.b	r9[0x0],r8
}
8000cec2:	2f dd       	sub	sp,-12
8000cec4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cec8:	00 00       	add	r0,r0
8000ceca:	0f c7       	ld.ub	r7,r7[0x4]
8000cecc:	00 00       	add	r0,r0
8000cece:	01 64       	ld.uh	r4,--r0

8000ced0 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
8000ced0:	eb cd 40 80 	pushm	r7,lr
8000ced4:	1a 97       	mov	r7,sp
8000ced6:	20 4d       	sub	sp,16
8000ced8:	18 98       	mov	r8,r12
8000ceda:	ef 4b ff f8 	st.w	r7[-8],r11
8000cede:	ef 4a ff f4 	st.w	r7[-12],r10
8000cee2:	ef 49 ff f0 	st.w	r7[-16],r9
8000cee6:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!udi_msc_b_ack_trans)
8000ceea:	4a e8       	lddpc	r8,8000cfa0 <udi_msc_trans_block+0xd0>
8000ceec:	11 88       	ld.ub	r8,r8[0x0]
8000ceee:	5c 58       	castu.b	r8
8000cef0:	ec 18 00 01 	eorl	r8,0x1
8000cef4:	5c 58       	castu.b	r8
8000cef6:	c0 30       	breq	8000cefc <udi_msc_trans_block+0x2c>
		return false;	// No possible, transfer on going
8000cef8:	30 08       	mov	r8,0
8000cefa:	c4 f8       	rjmp	8000cf98 <udi_msc_trans_block+0xc8>

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
8000cefc:	4a 99       	lddpc	r9,8000cfa0 <udi_msc_trans_block+0xd0>
8000cefe:	30 08       	mov	r8,0
8000cf00:	b2 88       	st.b	r9[0x0],r8
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
8000cf02:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000cf06:	58 08       	cp.w	r8,0
8000cf08:	c0 40       	breq	8000cf10 <udi_msc_trans_block+0x40>
8000cf0a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000cf0e:	c0 28       	rjmp	8000cf12 <udi_msc_trans_block+0x42>
8000cf10:	4a 58       	lddpc	r8,8000cfa4 <udi_msc_trans_block+0xd4>
8000cf12:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000cf16:	30 09       	mov	r9,0
8000cf18:	f2 0a 18 00 	cp.b	r10,r9
8000cf1c:	c0 40       	breq	8000cf24 <udi_msc_trans_block+0x54>
8000cf1e:	e0 6c 00 81 	mov	r12,129
8000cf22:	c0 28       	rjmp	8000cf26 <udi_msc_trans_block+0x56>
8000cf24:	30 2c       	mov	r12,2
8000cf26:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000cf2a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000cf2e:	30 0b       	mov	r11,0
8000cf30:	f0 1f 00 1e 	mcall	8000cfa8 <udi_msc_trans_block+0xd8>
8000cf34:	18 98       	mov	r8,r12
8000cf36:	ec 18 00 01 	eorl	r8,0x1
8000cf3a:	5c 58       	castu.b	r8
8000cf3c:	c0 60       	breq	8000cf48 <udi_msc_trans_block+0x78>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
8000cf3e:	49 99       	lddpc	r9,8000cfa0 <udi_msc_trans_block+0xd0>
8000cf40:	30 18       	mov	r8,1
8000cf42:	b2 88       	st.b	r9[0x0],r8
		return false;
8000cf44:	30 08       	mov	r8,0
8000cf46:	c2 98       	rjmp	8000cf98 <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
8000cf48:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000cf4c:	58 08       	cp.w	r8,0
8000cf4e:	c1 d1       	brne	8000cf88 <udi_msc_trans_block+0xb8>
		while (!udi_msc_b_ack_trans);
8000cf50:	49 48       	lddpc	r8,8000cfa0 <udi_msc_trans_block+0xd0>
8000cf52:	11 88       	ld.ub	r8,r8[0x0]
8000cf54:	5c 58       	castu.b	r8
8000cf56:	ec 18 00 01 	eorl	r8,0x1
8000cf5a:	5c 58       	castu.b	r8
8000cf5c:	cf a1       	brne	8000cf50 <udi_msc_trans_block+0x80>
		if (udi_msc_b_abort_trans) {
8000cf5e:	49 48       	lddpc	r8,8000cfac <udi_msc_trans_block+0xdc>
8000cf60:	11 88       	ld.ub	r8,r8[0x0]
8000cf62:	5c 58       	castu.b	r8
8000cf64:	c0 30       	breq	8000cf6a <udi_msc_trans_block+0x9a>
			return false;
8000cf66:	30 08       	mov	r8,0
8000cf68:	c1 88       	rjmp	8000cf98 <udi_msc_trans_block+0xc8>
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
8000cf6a:	49 28       	lddpc	r8,8000cfb0 <udi_msc_trans_block+0xe0>
8000cf6c:	70 29       	ld.w	r9,r8[0x8]
8000cf6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cf72:	10 19       	sub	r9,r8
8000cf74:	48 f8       	lddpc	r8,8000cfb0 <udi_msc_trans_block+0xe0>
8000cf76:	91 29       	st.w	r8[0x8],r9
		return (!udi_msc_b_abort_trans);
8000cf78:	48 d8       	lddpc	r8,8000cfac <udi_msc_trans_block+0xdc>
8000cf7a:	11 88       	ld.ub	r8,r8[0x0]
8000cf7c:	5c 58       	castu.b	r8
8000cf7e:	ec 18 00 01 	eorl	r8,0x1
8000cf82:	5c 58       	castu.b	r8
8000cf84:	5c 58       	castu.b	r8
8000cf86:	c0 98       	rjmp	8000cf98 <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
8000cf88:	48 a8       	lddpc	r8,8000cfb0 <udi_msc_trans_block+0xe0>
8000cf8a:	70 29       	ld.w	r9,r8[0x8]
8000cf8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cf90:	10 19       	sub	r9,r8
8000cf92:	48 88       	lddpc	r8,8000cfb0 <udi_msc_trans_block+0xe0>
8000cf94:	91 29       	st.w	r8[0x8],r9
	return true;
8000cf96:	30 18       	mov	r8,1
}
8000cf98:	10 9c       	mov	r12,r8
8000cf9a:	2f cd       	sub	sp,-16
8000cf9c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cfa0:	00 00       	add	r0,r0
8000cfa2:	01 64       	ld.uh	r4,--r0
8000cfa4:	80 00       	ld.sh	r0,r0[0x0]
8000cfa6:	ce 98       	rjmp	8000d178 <udc_iface_disable+0x2c>
8000cfa8:	80 00       	ld.sh	r0,r0[0x0]
8000cfaa:	a4 28       	st.h	r2[0x4],r8
8000cfac:	00 00       	add	r0,r0
8000cfae:	0f c7       	ld.ub	r7,r7[0x4]
8000cfb0:	00 00       	add	r0,r0
8000cfb2:	01 54       	ld.sh	r4,--r0
8000cfb4:	36 39       	mov	r9,99
8000cfb6:	36 39       	mov	r9,99
8000cfb8:	36 39       	mov	r9,99
8000cfba:	36 39       	mov	r9,99
8000cfbc:	36 39       	mov	r9,99
8000cfbe:	36 39       	mov	r9,99
8000cfc0:	00 00       	add	r0,r0
	...

8000cfc4 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
8000cfc4:	eb cd 40 80 	pushm	r7,lr
8000cfc8:	1a 97       	mov	r7,sp
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
8000cfca:	48 38       	lddpc	r8,8000cfd4 <udc_get_string_serial_name+0x10>
	}
8000cfcc:	10 9c       	mov	r12,r8
8000cfce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cfd2:	00 00       	add	r0,r0
8000cfd4:	80 00       	ld.sh	r0,r0[0x0]
8000cfd6:	cf b4       	brge	8000cfcc <udc_get_string_serial_name+0x8>

8000cfd8 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
8000cfd8:	eb cd 40 80 	pushm	r7,lr
8000cfdc:	1a 97       	mov	r7,sp
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
8000cfde:	48 b8       	lddpc	r8,8000d008 <udc_get_eof_conf+0x30>
8000cfe0:	70 08       	ld.w	r8,r8[0x0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000cfe2:	70 09       	ld.w	r9,r8[0x0]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000cfe4:	48 98       	lddpc	r8,8000d008 <udc_get_eof_conf+0x30>
8000cfe6:	70 08       	ld.w	r8,r8[0x0]
8000cfe8:	70 08       	ld.w	r8,r8[0x0]
8000cfea:	11 aa       	ld.ub	r10,r8[0x2]
8000cfec:	a9 6a       	lsl	r10,0x8
8000cfee:	11 b8       	ld.ub	r8,r8[0x3]
8000cff0:	14 48       	or	r8,r10
8000cff2:	5c 88       	casts.h	r8
8000cff4:	5c 88       	casts.h	r8
8000cff6:	5c c8       	swap.bh	r8
8000cff8:	5c 88       	casts.h	r8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000cffa:	5c 78       	castu.h	r8
8000cffc:	f2 08 00 08 	add	r8,r9,r8
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
8000d000:	10 9c       	mov	r12,r8
8000d002:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d006:	00 00       	add	r0,r0
8000d008:	00 00       	add	r0,r0
8000d00a:	08 10       	sub	r0,r4

8000d00c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
8000d00c:	eb cd 40 80 	pushm	r7,lr
8000d010:	1a 97       	mov	r7,sp
8000d012:	20 3d       	sub	sp,12
8000d014:	ef 4c ff f8 	st.w	r7[-8],r12
8000d018:	16 98       	mov	r8,r11
8000d01a:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
8000d01e:	f0 1f 00 1d 	mcall	8000d090 <udc_next_desc_in_iface+0x84>
8000d022:	18 98       	mov	r8,r12
8000d024:	ef 48 ff fc 	st.w	r7[-4],r8
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000d028:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d02c:	11 88       	ld.ub	r8,r8[0x0]
8000d02e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d032:	f2 08 00 08 	add	r8,r9,r8
8000d036:	ef 48 ff f8 	st.w	r7[-8],r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000d03a:	c1 c8       	rjmp	8000d072 <udc_next_desc_in_iface+0x66>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
8000d03c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d040:	11 99       	ld.ub	r9,r8[0x1]
8000d042:	30 48       	mov	r8,4
8000d044:	f0 09 18 00 	cp.b	r9,r8
8000d048:	c1 d0       	breq	8000d082 <udc_next_desc_in_iface+0x76>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
8000d04a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d04e:	11 98       	ld.ub	r8,r8[0x1]
8000d050:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d054:	f0 09 18 00 	cp.b	r9,r8
8000d058:	c0 41       	brne	8000d060 <udc_next_desc_in_iface+0x54>
			return desc; // Specific descriptor found
8000d05a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d05e:	c1 48       	rjmp	8000d086 <udc_next_desc_in_iface+0x7a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000d060:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d064:	11 88       	ld.ub	r8,r8[0x0]
8000d066:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d06a:	f2 08 00 08 	add	r8,r9,r8
8000d06e:	ef 48 ff f8 	st.w	r7[-8],r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000d072:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d076:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d07a:	10 39       	cp.w	r9,r8
8000d07c:	fe 9b ff e0 	brhi	8000d03c <udc_next_desc_in_iface+0x30>
8000d080:	c0 28       	rjmp	8000d084 <udc_next_desc_in_iface+0x78>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
8000d082:	d7 03       	nop
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
8000d084:	30 08       	mov	r8,0
}
8000d086:	10 9c       	mov	r12,r8
8000d088:	2f dd       	sub	sp,-12
8000d08a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d08e:	00 00       	add	r0,r0
8000d090:	80 00       	ld.sh	r0,r0[0x0]
8000d092:	cf d8       	rjmp	8000d28c <udc_iface_enable+0x84>

8000d094 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
8000d094:	eb cd 40 80 	pushm	r7,lr
8000d098:	1a 97       	mov	r7,sp
8000d09a:	20 3d       	sub	sp,12
8000d09c:	18 99       	mov	r9,r12
8000d09e:	16 98       	mov	r8,r11
8000d0a0:	ef 69 ff f8 	st.b	r7[-8],r9
8000d0a4:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
8000d0a8:	4a 58       	lddpc	r8,8000d13c <udc_update_iface_desc+0xa8>
8000d0aa:	11 88       	ld.ub	r8,r8[0x0]
8000d0ac:	58 08       	cp.w	r8,0
8000d0ae:	c0 31       	brne	8000d0b4 <udc_update_iface_desc+0x20>
		return false;
8000d0b0:	30 08       	mov	r8,0
8000d0b2:	c4 18       	rjmp	8000d134 <udc_update_iface_desc+0xa0>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000d0b4:	4a 38       	lddpc	r8,8000d140 <udc_update_iface_desc+0xac>
8000d0b6:	70 08       	ld.w	r8,r8[0x0]
8000d0b8:	70 08       	ld.w	r8,r8[0x0]
8000d0ba:	11 c8       	ld.ub	r8,r8[0x4]
8000d0bc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d0c0:	f0 09 18 00 	cp.b	r9,r8
8000d0c4:	c0 33       	brcs	8000d0ca <udc_update_iface_desc+0x36>
		return false;
8000d0c6:	30 08       	mov	r8,0
8000d0c8:	c3 68       	rjmp	8000d134 <udc_update_iface_desc+0xa0>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
8000d0ca:	49 e8       	lddpc	r8,8000d140 <udc_update_iface_desc+0xac>
8000d0cc:	70 08       	ld.w	r8,r8[0x0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000d0ce:	70 08       	ld.w	r8,r8[0x0]
8000d0d0:	10 99       	mov	r9,r8
8000d0d2:	49 d8       	lddpc	r8,8000d144 <udc_update_iface_desc+0xb0>
8000d0d4:	91 09       	st.w	r8[0x0],r9
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000d0d6:	f0 1f 00 1d 	mcall	8000d148 <udc_update_iface_desc+0xb4>
8000d0da:	18 98       	mov	r8,r12
8000d0dc:	ef 48 ff fc 	st.w	r7[-4],r8
	while (ptr_end_desc >
8000d0e0:	c2 28       	rjmp	8000d124 <udc_update_iface_desc+0x90>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000d0e2:	49 98       	lddpc	r8,8000d144 <udc_update_iface_desc+0xb0>
8000d0e4:	70 08       	ld.w	r8,r8[0x0]
8000d0e6:	11 99       	ld.ub	r9,r8[0x1]
8000d0e8:	30 48       	mov	r8,4
8000d0ea:	f0 09 18 00 	cp.b	r9,r8
8000d0ee:	c1 31       	brne	8000d114 <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000d0f0:	49 58       	lddpc	r8,8000d144 <udc_update_iface_desc+0xb0>
8000d0f2:	70 08       	ld.w	r8,r8[0x0]
8000d0f4:	11 a8       	ld.ub	r8,r8[0x2]
8000d0f6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d0fa:	f0 09 18 00 	cp.b	r9,r8
8000d0fe:	c0 b1       	brne	8000d114 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
8000d100:	49 18       	lddpc	r8,8000d144 <udc_update_iface_desc+0xb0>
8000d102:	70 08       	ld.w	r8,r8[0x0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
					(setting_num ==
8000d104:	11 b8       	ld.ub	r8,r8[0x3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000d106:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d10a:	f0 09 18 00 	cp.b	r9,r8
8000d10e:	c0 31       	brne	8000d114 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
8000d110:	30 18       	mov	r8,1
8000d112:	c1 18       	rjmp	8000d134 <udc_update_iface_desc+0xa0>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000d114:	48 c8       	lddpc	r8,8000d144 <udc_update_iface_desc+0xb0>
8000d116:	70 09       	ld.w	r9,r8[0x0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
8000d118:	48 b8       	lddpc	r8,8000d144 <udc_update_iface_desc+0xb0>
8000d11a:	70 08       	ld.w	r8,r8[0x0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000d11c:	11 88       	ld.ub	r8,r8[0x0]
8000d11e:	10 09       	add	r9,r8
8000d120:	48 98       	lddpc	r8,8000d144 <udc_update_iface_desc+0xb0>
8000d122:	91 09       	st.w	r8[0x0],r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000d124:	48 88       	lddpc	r8,8000d144 <udc_update_iface_desc+0xb0>
8000d126:	70 08       	ld.w	r8,r8[0x0]
8000d128:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d12c:	10 39       	cp.w	r9,r8
8000d12e:	fe 9b ff da 	brhi	8000d0e2 <udc_update_iface_desc+0x4e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
8000d132:	30 08       	mov	r8,0
}
8000d134:	10 9c       	mov	r12,r8
8000d136:	2f dd       	sub	sp,-12
8000d138:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d13c:	00 00       	add	r0,r0
8000d13e:	08 0e       	add	lr,r4
8000d140:	00 00       	add	r0,r0
8000d142:	08 10       	sub	r0,r4
8000d144:	00 00       	add	r0,r0
8000d146:	08 14       	sub	r4,r4
8000d148:	80 00       	ld.sh	r0,r0[0x0]
8000d14a:	cf d8       	rjmp	8000d344 <udc_reset+0x60>

8000d14c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
8000d14c:	eb cd 40 80 	pushm	r7,lr
8000d150:	1a 97       	mov	r7,sp
8000d152:	20 3d       	sub	sp,12
8000d154:	18 98       	mov	r8,r12
8000d156:	ef 68 ff f4 	st.b	r7[-12],r8
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000d15a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d15e:	30 0b       	mov	r11,0
8000d160:	10 9c       	mov	r12,r8
8000d162:	f0 1f 00 25 	mcall	8000d1f4 <udc_iface_disable+0xa8>
8000d166:	18 98       	mov	r8,r12
8000d168:	ec 18 00 01 	eorl	r8,0x1
8000d16c:	5c 58       	castu.b	r8
8000d16e:	c0 30       	breq	8000d174 <udc_iface_disable+0x28>
		return false;
8000d170:	30 08       	mov	r8,0
8000d172:	c3 d8       	rjmp	8000d1ec <udc_iface_disable+0xa0>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000d174:	4a 18       	lddpc	r8,8000d1f8 <udc_iface_disable+0xac>
8000d176:	70 08       	ld.w	r8,r8[0x0]
8000d178:	70 19       	ld.w	r9,r8[0x4]
8000d17a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d17e:	a3 68       	lsl	r8,0x2
8000d180:	f2 08 00 08 	add	r8,r9,r8
8000d184:	70 08       	ld.w	r8,r8[0x0]
8000d186:	ef 48 ff f8 	st.w	r7[-8],r8

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000d18a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d18e:	70 38       	ld.w	r8,r8[0xc]
8000d190:	5d 18       	icall	r8
8000d192:	18 98       	mov	r8,r12
8000d194:	10 99       	mov	r9,r8
8000d196:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d19a:	12 9b       	mov	r11,r9
8000d19c:	10 9c       	mov	r12,r8
8000d19e:	f0 1f 00 16 	mcall	8000d1f4 <udc_iface_disable+0xa8>
8000d1a2:	18 98       	mov	r8,r12
8000d1a4:	ec 18 00 01 	eorl	r8,0x1
8000d1a8:	5c 58       	castu.b	r8
8000d1aa:	c0 30       	breq	8000d1b0 <udc_iface_disable+0x64>
		return false;
8000d1ac:	30 08       	mov	r8,0
8000d1ae:	c1 f8       	rjmp	8000d1ec <udc_iface_disable+0xa0>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000d1b0:	49 38       	lddpc	r8,8000d1fc <udc_iface_disable+0xb0>
8000d1b2:	70 08       	ld.w	r8,r8[0x0]
8000d1b4:	ef 48 ff fc 	st.w	r7[-4],r8
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000d1b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d1bc:	30 5b       	mov	r11,5
8000d1be:	10 9c       	mov	r12,r8
8000d1c0:	f0 1f 00 10 	mcall	8000d200 <udc_iface_disable+0xb4>
8000d1c4:	18 98       	mov	r8,r12
8000d1c6:	ef 48 ff fc 	st.w	r7[-4],r8
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
8000d1ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d1ce:	58 08       	cp.w	r8,0
8000d1d0:	c0 71       	brne	8000d1de <udc_iface_disable+0x92>
		}
	}
#endif

	// Disable interface
	udi_api->disable();
8000d1d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d1d6:	70 18       	ld.w	r8,r8[0x4]
8000d1d8:	5d 18       	icall	r8
	return true;
8000d1da:	30 18       	mov	r8,1
8000d1dc:	c0 88       	rjmp	8000d1ec <udc_iface_disable+0xa0>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000d1de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d1e2:	11 a8       	ld.ub	r8,r8[0x2]
8000d1e4:	10 9c       	mov	r12,r8
8000d1e6:	f0 1f 00 08 	mcall	8000d204 <udc_iface_disable+0xb8>
		}
8000d1ea:	ce 7b       	rjmp	8000d1b8 <udc_iface_disable+0x6c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
8000d1ec:	10 9c       	mov	r12,r8
8000d1ee:	2f dd       	sub	sp,-12
8000d1f0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d1f4:	80 00       	ld.sh	r0,r0[0x0]
8000d1f6:	d0 94       	*unknown*
8000d1f8:	00 00       	add	r0,r0
8000d1fa:	08 10       	sub	r0,r4
8000d1fc:	00 00       	add	r0,r0
8000d1fe:	08 14       	sub	r4,r4
8000d200:	80 00       	ld.sh	r0,r0[0x0]
8000d202:	d0 0c       	*unknown*
8000d204:	80 00       	ld.sh	r0,r0[0x0]
8000d206:	a1 08       	ld.d	r8,r0

8000d208 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
8000d208:	eb cd 40 80 	pushm	r7,lr
8000d20c:	1a 97       	mov	r7,sp
8000d20e:	20 3d       	sub	sp,12
8000d210:	18 99       	mov	r9,r12
8000d212:	16 98       	mov	r8,r11
8000d214:	ef 69 ff f8 	st.b	r7[-8],r9
8000d218:	ef 68 ff f4 	st.b	r7[-12],r8
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
8000d21c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d220:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d224:	12 9b       	mov	r11,r9
8000d226:	10 9c       	mov	r12,r8
8000d228:	f0 1f 00 25 	mcall	8000d2bc <udc_iface_enable+0xb4>
8000d22c:	18 98       	mov	r8,r12
8000d22e:	ec 18 00 01 	eorl	r8,0x1
8000d232:	5c 58       	castu.b	r8
8000d234:	c0 30       	breq	8000d23a <udc_iface_enable+0x32>
		return false;
8000d236:	30 08       	mov	r8,0
8000d238:	c3 e8       	rjmp	8000d2b4 <udc_iface_enable+0xac>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000d23a:	4a 28       	lddpc	r8,8000d2c0 <udc_iface_enable+0xb8>
8000d23c:	70 08       	ld.w	r8,r8[0x0]
8000d23e:	ef 48 ff fc 	st.w	r7[-4],r8
8000d242:	c0 28       	rjmp	8000d246 <udc_iface_enable+0x3e>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
		}
	}
8000d244:	d7 03       	nop

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000d246:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d24a:	30 5b       	mov	r11,5
8000d24c:	10 9c       	mov	r12,r8
8000d24e:	f0 1f 00 1e 	mcall	8000d2c4 <udc_iface_enable+0xbc>
8000d252:	18 98       	mov	r8,r12
8000d254:	ef 48 ff fc 	st.w	r7[-4],r8
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
8000d258:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d25c:	58 08       	cp.w	r8,0
8000d25e:	c0 e1       	brne	8000d27a <udc_iface_enable+0x72>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000d260:	49 a8       	lddpc	r8,8000d2c8 <udc_iface_enable+0xc0>
8000d262:	70 08       	ld.w	r8,r8[0x0]
8000d264:	70 19       	ld.w	r9,r8[0x4]
8000d266:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d26a:	a3 68       	lsl	r8,0x2
8000d26c:	f2 08 00 08 	add	r8,r9,r8
8000d270:	70 08       	ld.w	r8,r8[0x0]
8000d272:	70 08       	ld.w	r8,r8[0x0]
8000d274:	5d 18       	icall	r8
8000d276:	18 98       	mov	r8,r12
8000d278:	c1 e8       	rjmp	8000d2b4 <udc_iface_enable+0xac>
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
8000d27a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d27e:	11 c9       	ld.ub	r9,r8[0x4]
8000d280:	a9 69       	lsl	r9,0x8
8000d282:	11 d8       	ld.ub	r8,r8[0x5]
8000d284:	12 48       	or	r8,r9
8000d286:	5c 88       	casts.h	r8
8000d288:	5c 88       	casts.h	r8
8000d28a:	5c c8       	swap.bh	r8
8000d28c:	5c 88       	casts.h	r8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000d28e:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
				ep_desc->bmAttributes,
8000d292:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d296:	11 b8       	ld.ub	r8,r8[0x3]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000d298:	10 99       	mov	r9,r8
8000d29a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d29e:	11 a8       	ld.ub	r8,r8[0x2]
8000d2a0:	12 9b       	mov	r11,r9
8000d2a2:	10 9c       	mov	r12,r8
8000d2a4:	f0 1f 00 0a 	mcall	8000d2cc <udc_iface_enable+0xc4>
8000d2a8:	18 98       	mov	r8,r12
8000d2aa:	ec 18 00 01 	eorl	r8,0x1
8000d2ae:	5c 58       	castu.b	r8
8000d2b0:	cc a0       	breq	8000d244 <udc_iface_enable+0x3c>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
8000d2b2:	30 08       	mov	r8,0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
8000d2b4:	10 9c       	mov	r12,r8
8000d2b6:	2f dd       	sub	sp,-12
8000d2b8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d2bc:	80 00       	ld.sh	r0,r0[0x0]
8000d2be:	d0 94       	*unknown*
8000d2c0:	00 00       	add	r0,r0
8000d2c2:	08 14       	sub	r4,r4
8000d2c4:	80 00       	ld.sh	r0,r0[0x0]
8000d2c6:	d0 0c       	*unknown*
8000d2c8:	00 00       	add	r0,r0
8000d2ca:	08 10       	sub	r0,r4
8000d2cc:	80 00       	ld.sh	r0,r0[0x0]
8000d2ce:	9d b8       	st.w	lr[0x2c],r8

8000d2d0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
8000d2d0:	eb cd 40 80 	pushm	r7,lr
8000d2d4:	1a 97       	mov	r7,sp
	udd_enable();
8000d2d6:	f0 1f 00 03 	mcall	8000d2e0 <udc_start+0x10>
}
8000d2da:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d2de:	00 00       	add	r0,r0
8000d2e0:	80 00       	ld.sh	r0,r0[0x0]
8000d2e2:	9a e4       	ld.uh	r4,sp[0xc]

8000d2e4 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
8000d2e4:	eb cd 40 80 	pushm	r7,lr
8000d2e8:	1a 97       	mov	r7,sp
8000d2ea:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000d2ec:	49 38       	lddpc	r8,8000d338 <udc_reset+0x54>
8000d2ee:	11 88       	ld.ub	r8,r8[0x0]
8000d2f0:	58 08       	cp.w	r8,0
8000d2f2:	c1 80       	breq	8000d322 <udc_reset+0x3e>
		for (iface_num = 0;
8000d2f4:	30 08       	mov	r8,0
8000d2f6:	ef 68 ff ff 	st.b	r7[-1],r8
8000d2fa:	c0 b8       	rjmp	8000d310 <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
8000d2fc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d300:	10 9c       	mov	r12,r8
8000d302:	f0 1f 00 0f 	mcall	8000d33c <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000d306:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d30a:	2f f8       	sub	r8,-1
8000d30c:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000d310:	48 c8       	lddpc	r8,8000d340 <udc_reset+0x5c>
8000d312:	70 08       	ld.w	r8,r8[0x0]
8000d314:	70 08       	ld.w	r8,r8[0x0]
8000d316:	11 c8       	ld.ub	r8,r8[0x4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000d318:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d31c:	f0 09 18 00 	cp.b	r9,r8
8000d320:	ce e3       	brcs	8000d2fc <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
8000d322:	48 69       	lddpc	r9,8000d338 <udc_reset+0x54>
8000d324:	30 08       	mov	r8,0
8000d326:	b2 88       	st.b	r9[0x0],r8
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
8000d328:	48 79       	lddpc	r9,8000d344 <udc_reset+0x60>
8000d32a:	e0 68 01 00 	mov	r8,256
8000d32e:	b2 08       	st.h	r9[0x0],r8
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
8000d330:	2f fd       	sub	sp,-4
8000d332:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d336:	00 00       	add	r0,r0
8000d338:	00 00       	add	r0,r0
8000d33a:	08 0e       	add	lr,r4
8000d33c:	80 00       	ld.sh	r0,r0[0x0]
8000d33e:	d1 4c       	*unknown*
8000d340:	00 00       	add	r0,r0
8000d342:	08 10       	sub	r0,r4
8000d344:	00 00       	add	r0,r0
8000d346:	08 0c       	add	r12,r4

8000d348 <udc_sof_notify>:

void udc_sof_notify(void)
{
8000d348:	eb cd 40 80 	pushm	r7,lr
8000d34c:	1a 97       	mov	r7,sp
8000d34e:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000d350:	49 88       	lddpc	r8,8000d3b0 <udc_sof_notify+0x68>
8000d352:	11 88       	ld.ub	r8,r8[0x0]
8000d354:	58 08       	cp.w	r8,0
8000d356:	c2 a0       	breq	8000d3aa <udc_sof_notify+0x62>
		for (iface_num = 0;
8000d358:	30 08       	mov	r8,0
8000d35a:	ef 68 ff ff 	st.b	r7[-1],r8
8000d35e:	c1 d8       	rjmp	8000d398 <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
8000d360:	49 58       	lddpc	r8,8000d3b4 <udc_sof_notify+0x6c>
8000d362:	70 08       	ld.w	r8,r8[0x0]
8000d364:	70 19       	ld.w	r9,r8[0x4]
8000d366:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d36a:	a3 68       	lsl	r8,0x2
8000d36c:	f2 08 00 08 	add	r8,r9,r8
8000d370:	70 08       	ld.w	r8,r8[0x0]
8000d372:	70 48       	ld.w	r8,r8[0x10]
8000d374:	58 08       	cp.w	r8,0
8000d376:	c0 c0       	breq	8000d38e <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
8000d378:	48 f8       	lddpc	r8,8000d3b4 <udc_sof_notify+0x6c>
8000d37a:	70 08       	ld.w	r8,r8[0x0]
8000d37c:	70 19       	ld.w	r9,r8[0x4]
8000d37e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d382:	a3 68       	lsl	r8,0x2
8000d384:	f2 08 00 08 	add	r8,r9,r8
8000d388:	70 08       	ld.w	r8,r8[0x0]
8000d38a:	70 48       	ld.w	r8,r8[0x10]
8000d38c:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000d38e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d392:	2f f8       	sub	r8,-1
8000d394:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000d398:	48 78       	lddpc	r8,8000d3b4 <udc_sof_notify+0x6c>
8000d39a:	70 08       	ld.w	r8,r8[0x0]
8000d39c:	70 08       	ld.w	r8,r8[0x0]
8000d39e:	11 c8       	ld.ub	r8,r8[0x4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000d3a0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d3a4:	f0 09 18 00 	cp.b	r9,r8
8000d3a8:	cd c3       	brcs	8000d360 <udc_sof_notify+0x18>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
8000d3aa:	2f fd       	sub	sp,-4
8000d3ac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d3b0:	00 00       	add	r0,r0
8000d3b2:	08 0e       	add	lr,r4
8000d3b4:	00 00       	add	r0,r0
8000d3b6:	08 10       	sub	r0,r4

8000d3b8 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
8000d3b8:	eb cd 40 80 	pushm	r7,lr
8000d3bc:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
8000d3be:	48 98       	lddpc	r8,8000d3e0 <udc_req_std_dev_get_status+0x28>
8000d3c0:	90 39       	ld.sh	r9,r8[0x6]
8000d3c2:	30 28       	mov	r8,2
8000d3c4:	f0 09 19 00 	cp.h	r9,r8
8000d3c8:	c0 30       	breq	8000d3ce <udc_req_std_dev_get_status+0x16>
		return false;
8000d3ca:	30 08       	mov	r8,0
8000d3cc:	c0 78       	rjmp	8000d3da <udc_req_std_dev_get_status+0x22>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
8000d3ce:	48 68       	lddpc	r8,8000d3e4 <udc_req_std_dev_get_status+0x2c>
8000d3d0:	30 2b       	mov	r11,2
8000d3d2:	10 9c       	mov	r12,r8
8000d3d4:	f0 1f 00 05 	mcall	8000d3e8 <udc_req_std_dev_get_status+0x30>
			sizeof(udc_device_status));
	return true;
8000d3d8:	30 18       	mov	r8,1
}
8000d3da:	10 9c       	mov	r12,r8
8000d3dc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d3e0:	00 00       	add	r0,r0
8000d3e2:	0f a8       	ld.ub	r8,r7[0x2]
8000d3e4:	00 00       	add	r0,r0
8000d3e6:	08 0c       	add	r12,r4
8000d3e8:	80 00       	ld.sh	r0,r0[0x0]
8000d3ea:	9d 8c       	st.w	lr[0x20],r12

8000d3ec <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
8000d3ec:	eb cd 40 80 	pushm	r7,lr
8000d3f0:	1a 97       	mov	r7,sp
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
8000d3f2:	49 18       	lddpc	r8,8000d434 <udc_req_std_ep_get_status+0x48>
8000d3f4:	90 39       	ld.sh	r9,r8[0x6]
8000d3f6:	30 28       	mov	r8,2
8000d3f8:	f0 09 19 00 	cp.h	r9,r8
8000d3fc:	c0 30       	breq	8000d402 <udc_req_std_ep_get_status+0x16>
		return false;
8000d3fe:	30 08       	mov	r8,0
8000d400:	c1 68       	rjmp	8000d42c <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000d402:	48 d8       	lddpc	r8,8000d434 <udc_req_std_ep_get_status+0x48>
8000d404:	90 28       	ld.sh	r8,r8[0x4]
8000d406:	5c 58       	castu.b	r8
8000d408:	10 9c       	mov	r12,r8
8000d40a:	f0 1f 00 0c 	mcall	8000d438 <udc_req_std_ep_get_status+0x4c>
8000d40e:	18 98       	mov	r8,r12
8000d410:	58 08       	cp.w	r8,0
8000d412:	c0 40       	breq	8000d41a <udc_req_std_ep_get_status+0x2e>
8000d414:	e0 68 01 00 	mov	r8,256
8000d418:	c0 28       	rjmp	8000d41c <udc_req_std_ep_get_status+0x30>
8000d41a:	30 08       	mov	r8,0
8000d41c:	48 89       	lddpc	r9,8000d43c <udc_req_std_ep_get_status+0x50>
8000d41e:	b2 08       	st.h	r9[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
8000d420:	48 78       	lddpc	r8,8000d43c <udc_req_std_ep_get_status+0x50>
8000d422:	30 2b       	mov	r11,2
8000d424:	10 9c       	mov	r12,r8
8000d426:	f0 1f 00 07 	mcall	8000d440 <udc_req_std_ep_get_status+0x54>
			sizeof(udc_ep_status));
	return true;
8000d42a:	30 18       	mov	r8,1
}
8000d42c:	10 9c       	mov	r12,r8
8000d42e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d432:	00 00       	add	r0,r0
8000d434:	00 00       	add	r0,r0
8000d436:	0f a8       	ld.ub	r8,r7[0x2]
8000d438:	80 00       	ld.sh	r0,r0[0x0]
8000d43a:	a1 a4       	sbr	r4,0x0
8000d43c:	00 00       	add	r0,r0
8000d43e:	08 1a       	sub	r10,r4
8000d440:	80 00       	ld.sh	r0,r0[0x0]
8000d442:	9d 8c       	st.w	lr[0x20],r12

8000d444 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
8000d444:	eb cd 40 80 	pushm	r7,lr
8000d448:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d44a:	48 d8       	lddpc	r8,8000d47c <udc_req_std_dev_clear_feature+0x38>
8000d44c:	90 38       	ld.sh	r8,r8[0x6]
8000d44e:	58 08       	cp.w	r8,0
8000d450:	c0 30       	breq	8000d456 <udc_req_std_dev_clear_feature+0x12>
		return false;
8000d452:	30 08       	mov	r8,0
8000d454:	c1 08       	rjmp	8000d474 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000d456:	48 a8       	lddpc	r8,8000d47c <udc_req_std_dev_clear_feature+0x38>
8000d458:	90 19       	ld.sh	r9,r8[0x2]
8000d45a:	30 18       	mov	r8,1
8000d45c:	f0 09 19 00 	cp.h	r9,r8
8000d460:	c0 91       	brne	8000d472 <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
8000d462:	48 88       	lddpc	r8,8000d480 <udc_req_std_dev_clear_feature+0x3c>
8000d464:	90 08       	ld.sh	r8,r8[0x0]
8000d466:	a9 d8       	cbr	r8,0x9
8000d468:	5c 88       	casts.h	r8
8000d46a:	48 69       	lddpc	r9,8000d480 <udc_req_std_dev_clear_feature+0x3c>
8000d46c:	b2 08       	st.h	r9[0x0],r8
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
8000d46e:	30 18       	mov	r8,1
8000d470:	c0 28       	rjmp	8000d474 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
8000d472:	30 08       	mov	r8,0
}
8000d474:	10 9c       	mov	r12,r8
8000d476:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d47a:	00 00       	add	r0,r0
8000d47c:	00 00       	add	r0,r0
8000d47e:	0f a8       	ld.ub	r8,r7[0x2]
8000d480:	00 00       	add	r0,r0
8000d482:	08 0c       	add	r12,r4

8000d484 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
8000d484:	eb cd 40 80 	pushm	r7,lr
8000d488:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d48a:	48 c8       	lddpc	r8,8000d4b8 <udc_req_std_ep_clear_feature+0x34>
8000d48c:	90 38       	ld.sh	r8,r8[0x6]
8000d48e:	58 08       	cp.w	r8,0
8000d490:	c0 30       	breq	8000d496 <udc_req_std_ep_clear_feature+0x12>
		return false;
8000d492:	30 08       	mov	r8,0
8000d494:	c0 e8       	rjmp	8000d4b0 <udc_req_std_ep_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000d496:	48 98       	lddpc	r8,8000d4b8 <udc_req_std_ep_clear_feature+0x34>
8000d498:	90 18       	ld.sh	r8,r8[0x2]
8000d49a:	58 08       	cp.w	r8,0
8000d49c:	c0 91       	brne	8000d4ae <udc_req_std_ep_clear_feature+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000d49e:	48 78       	lddpc	r8,8000d4b8 <udc_req_std_ep_clear_feature+0x34>
8000d4a0:	90 28       	ld.sh	r8,r8[0x4]
8000d4a2:	5c 58       	castu.b	r8
8000d4a4:	10 9c       	mov	r12,r8
8000d4a6:	f0 1f 00 06 	mcall	8000d4bc <udc_req_std_ep_clear_feature+0x38>
8000d4aa:	18 98       	mov	r8,r12
8000d4ac:	c0 28       	rjmp	8000d4b0 <udc_req_std_ep_clear_feature+0x2c>
	}
	return false;
8000d4ae:	30 08       	mov	r8,0
}
8000d4b0:	10 9c       	mov	r12,r8
8000d4b2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d4b6:	00 00       	add	r0,r0
8000d4b8:	00 00       	add	r0,r0
8000d4ba:	0f a8       	ld.ub	r8,r7[0x2]
8000d4bc:	80 00       	ld.sh	r0,r0[0x0]
8000d4be:	a2 e8       	st.b	r1[0x6],r8

8000d4c0 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
8000d4c0:	eb cd 40 80 	pushm	r7,lr
8000d4c4:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d4c6:	4a 78       	lddpc	r8,8000d560 <udc_req_std_dev_set_feature+0xa0>
8000d4c8:	90 38       	ld.sh	r8,r8[0x6]
8000d4ca:	58 08       	cp.w	r8,0
8000d4cc:	c0 30       	breq	8000d4d2 <udc_req_std_dev_set_feature+0x12>
		return false;
8000d4ce:	30 08       	mov	r8,0
8000d4d0:	c4 48       	rjmp	8000d558 <udc_req_std_dev_set_feature+0x98>
	}

	switch (udd_g_ctrlreq.req.wValue) {
8000d4d2:	4a 48       	lddpc	r8,8000d560 <udc_req_std_dev_set_feature+0xa0>
8000d4d4:	90 18       	ld.sh	r8,r8[0x2]
8000d4d6:	5c 78       	castu.h	r8
8000d4d8:	58 18       	cp.w	r8,1
8000d4da:	c0 40       	breq	8000d4e2 <udc_req_std_dev_set_feature+0x22>
8000d4dc:	58 28       	cp.w	r8,2
8000d4de:	c0 40       	breq	8000d4e6 <udc_req_std_dev_set_feature+0x26>
8000d4e0:	c3 b8       	rjmp	8000d556 <udc_req_std_dev_set_feature+0x96>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
8000d4e2:	30 08       	mov	r8,0
8000d4e4:	c3 a8       	rjmp	8000d558 <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
8000d4e6:	f0 1f 00 20 	mcall	8000d564 <udc_req_std_dev_set_feature+0xa4>
8000d4ea:	18 98       	mov	r8,r12
8000d4ec:	ec 18 00 01 	eorl	r8,0x1
8000d4f0:	5c 58       	castu.b	r8
8000d4f2:	c2 f1       	brne	8000d550 <udc_req_std_dev_set_feature+0x90>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
8000d4f4:	49 b8       	lddpc	r8,8000d560 <udc_req_std_dev_set_feature+0xa0>
8000d4f6:	90 28       	ld.sh	r8,r8[0x4]
8000d4f8:	5c 78       	castu.h	r8
8000d4fa:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d4fe:	c2 b1       	brne	8000d554 <udc_req_std_dev_set_feature+0x94>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
8000d500:	f0 1f 00 1a 	mcall	8000d568 <udc_req_std_dev_set_feature+0xa8>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
8000d504:	49 78       	lddpc	r8,8000d560 <udc_req_std_dev_set_feature+0xa0>
8000d506:	90 28       	ld.sh	r8,r8[0x4]
8000d508:	5c 78       	castu.h	r8
8000d50a:	a9 88       	lsr	r8,0x8
8000d50c:	5c 88       	casts.h	r8
8000d50e:	5c 78       	castu.h	r8
8000d510:	58 28       	cp.w	r8,2
8000d512:	c1 00       	breq	8000d532 <udc_req_std_dev_set_feature+0x72>
8000d514:	e0 89 00 05 	brgt	8000d51e <udc_req_std_dev_set_feature+0x5e>
8000d518:	58 18       	cp.w	r8,1
8000d51a:	c0 70       	breq	8000d528 <udc_req_std_dev_set_feature+0x68>
8000d51c:	c1 d8       	rjmp	8000d556 <udc_req_std_dev_set_feature+0x96>
8000d51e:	58 38       	cp.w	r8,3
8000d520:	c0 e0       	breq	8000d53c <udc_req_std_dev_set_feature+0x7c>
8000d522:	58 48       	cp.w	r8,4
8000d524:	c1 10       	breq	8000d546 <udc_req_std_dev_set_feature+0x86>
8000d526:	c1 88       	rjmp	8000d556 <udc_req_std_dev_set_feature+0x96>
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
8000d528:	48 e8       	lddpc	r8,8000d560 <udc_req_std_dev_set_feature+0xa0>
8000d52a:	49 19       	lddpc	r9,8000d56c <udc_req_std_dev_set_feature+0xac>
8000d52c:	91 49       	st.w	r8[0x10],r9
			return true;
8000d52e:	30 18       	mov	r8,1
8000d530:	c1 48       	rjmp	8000d558 <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
8000d532:	48 c8       	lddpc	r8,8000d560 <udc_req_std_dev_set_feature+0xa0>
8000d534:	48 f9       	lddpc	r9,8000d570 <udc_req_std_dev_set_feature+0xb0>
8000d536:	91 49       	st.w	r8[0x10],r9
			return true;
8000d538:	30 18       	mov	r8,1
8000d53a:	c0 f8       	rjmp	8000d558 <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
8000d53c:	48 98       	lddpc	r8,8000d560 <udc_req_std_dev_set_feature+0xa0>
8000d53e:	48 e9       	lddpc	r9,8000d574 <udc_req_std_dev_set_feature+0xb4>
8000d540:	91 49       	st.w	r8[0x10],r9
			return true;
8000d542:	30 18       	mov	r8,1
8000d544:	c0 a8       	rjmp	8000d558 <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
8000d546:	48 78       	lddpc	r8,8000d560 <udc_req_std_dev_set_feature+0xa0>
8000d548:	48 c9       	lddpc	r9,8000d578 <udc_req_std_dev_set_feature+0xb8>
8000d54a:	91 49       	st.w	r8[0x10],r9
			return true;
8000d54c:	30 18       	mov	r8,1
8000d54e:	c0 58       	rjmp	8000d558 <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
			break;
8000d550:	d7 03       	nop
8000d552:	c0 28       	rjmp	8000d556 <udc_req_std_dev_set_feature+0x96>
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
			break;
8000d554:	d7 03       	nop
		break;
#endif
	default:
		break;
	}
	return false;
8000d556:	30 08       	mov	r8,0
}
8000d558:	10 9c       	mov	r12,r8
8000d55a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d55e:	00 00       	add	r0,r0
8000d560:	00 00       	add	r0,r0
8000d562:	0f a8       	ld.ub	r8,r7[0x2]
8000d564:	80 00       	ld.sh	r0,r0[0x0]
8000d566:	9c f0       	ld.uh	r0,lr[0xe]
8000d568:	80 00       	ld.sh	r0,r0[0x0]
8000d56a:	d2 e4       	*unknown*
8000d56c:	80 00       	ld.sh	r0,r0[0x0]
8000d56e:	a6 ac       	st.b	r3[0x2],r12
8000d570:	80 00       	ld.sh	r0,r0[0x0]
8000d572:	a6 d6       	st.b	r3[0x5],r6
8000d574:	80 00       	ld.sh	r0,r0[0x0]
8000d576:	a7 00       	ld.d	r0,r3
8000d578:	80 00       	ld.sh	r0,r0[0x0]
8000d57a:	a7 1c       	ld.d	r12,--r3

8000d57c <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
8000d57c:	eb cd 40 80 	pushm	r7,lr
8000d580:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d582:	48 f8       	lddpc	r8,8000d5bc <udc_req_std_ep_set_feature+0x40>
8000d584:	90 38       	ld.sh	r8,r8[0x6]
8000d586:	58 08       	cp.w	r8,0
8000d588:	c0 30       	breq	8000d58e <udc_req_std_ep_set_feature+0x12>
		return false;
8000d58a:	30 08       	mov	r8,0
8000d58c:	c1 48       	rjmp	8000d5b4 <udc_req_std_ep_set_feature+0x38>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000d58e:	48 c8       	lddpc	r8,8000d5bc <udc_req_std_ep_set_feature+0x40>
8000d590:	90 18       	ld.sh	r8,r8[0x2]
8000d592:	58 08       	cp.w	r8,0
8000d594:	c0 f1       	brne	8000d5b2 <udc_req_std_ep_set_feature+0x36>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
8000d596:	48 a8       	lddpc	r8,8000d5bc <udc_req_std_ep_set_feature+0x40>
8000d598:	90 28       	ld.sh	r8,r8[0x4]
8000d59a:	5c 58       	castu.b	r8
8000d59c:	10 9c       	mov	r12,r8
8000d59e:	f0 1f 00 09 	mcall	8000d5c0 <udc_req_std_ep_set_feature+0x44>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000d5a2:	48 78       	lddpc	r8,8000d5bc <udc_req_std_ep_set_feature+0x40>
8000d5a4:	90 28       	ld.sh	r8,r8[0x4]
8000d5a6:	5c 58       	castu.b	r8
8000d5a8:	10 9c       	mov	r12,r8
8000d5aa:	f0 1f 00 07 	mcall	8000d5c4 <udc_req_std_ep_set_feature+0x48>
8000d5ae:	18 98       	mov	r8,r12
8000d5b0:	c0 28       	rjmp	8000d5b4 <udc_req_std_ep_set_feature+0x38>
	}
	return false;
8000d5b2:	30 08       	mov	r8,0
}
8000d5b4:	10 9c       	mov	r12,r8
8000d5b6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d5ba:	00 00       	add	r0,r0
8000d5bc:	00 00       	add	r0,r0
8000d5be:	0f a8       	ld.ub	r8,r7[0x2]
8000d5c0:	80 00       	ld.sh	r0,r0[0x0]
8000d5c2:	a5 4c       	asr	r12,0x4
8000d5c4:	80 00       	ld.sh	r0,r0[0x0]
8000d5c6:	a1 d4       	cbr	r4,0x1

8000d5c8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
8000d5c8:	eb cd 40 80 	pushm	r7,lr
8000d5cc:	1a 97       	mov	r7,sp
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
8000d5ce:	48 68       	lddpc	r8,8000d5e4 <udc_valid_address+0x1c>
8000d5d0:	90 18       	ld.sh	r8,r8[0x2]
8000d5d2:	5c 58       	castu.b	r8
8000d5d4:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000d5d8:	10 9c       	mov	r12,r8
8000d5da:	f0 1f 00 04 	mcall	8000d5e8 <udc_valid_address+0x20>
}
8000d5de:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d5e2:	00 00       	add	r0,r0
8000d5e4:	00 00       	add	r0,r0
8000d5e6:	0f a8       	ld.ub	r8,r7[0x2]
8000d5e8:	80 00       	ld.sh	r0,r0[0x0]
8000d5ea:	9d 0c       	st.w	lr[0x0],r12

8000d5ec <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
8000d5ec:	eb cd 40 80 	pushm	r7,lr
8000d5f0:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d5f2:	48 78       	lddpc	r8,8000d60c <udc_req_std_dev_set_address+0x20>
8000d5f4:	90 38       	ld.sh	r8,r8[0x6]
8000d5f6:	58 08       	cp.w	r8,0
8000d5f8:	c0 30       	breq	8000d5fe <udc_req_std_dev_set_address+0x12>
		return false;
8000d5fa:	30 08       	mov	r8,0
8000d5fc:	c0 58       	rjmp	8000d606 <udc_req_std_dev_set_address+0x1a>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000d5fe:	48 48       	lddpc	r8,8000d60c <udc_req_std_dev_set_address+0x20>
8000d600:	48 49       	lddpc	r9,8000d610 <udc_req_std_dev_set_address+0x24>
8000d602:	91 49       	st.w	r8[0x10],r9
	return true;
8000d604:	30 18       	mov	r8,1
}
8000d606:	10 9c       	mov	r12,r8
8000d608:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d60c:	00 00       	add	r0,r0
8000d60e:	0f a8       	ld.ub	r8,r7[0x2]
8000d610:	80 00       	ld.sh	r0,r0[0x0]
8000d612:	d5 c8       	*unknown*

8000d614 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
8000d614:	eb cd 40 80 	pushm	r7,lr
8000d618:	1a 97       	mov	r7,sp
8000d61a:	20 3d       	sub	sp,12
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
8000d61c:	30 08       	mov	r8,0
8000d61e:	ef 68 ff ff 	st.b	r7[-1],r8

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
8000d622:	4b 68       	lddpc	r8,8000d6f8 <udc_req_std_dev_get_str_desc+0xe4>
8000d624:	90 18       	ld.sh	r8,r8[0x2]
8000d626:	5c 78       	castu.h	r8
8000d628:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d62c:	58 18       	cp.w	r8,1
8000d62e:	c1 00       	breq	8000d64e <udc_req_std_dev_get_str_desc+0x3a>
8000d630:	e0 89 00 05 	brgt	8000d63a <udc_req_std_dev_get_str_desc+0x26>
8000d634:	58 08       	cp.w	r8,0
8000d636:	c0 70       	breq	8000d644 <udc_req_std_dev_get_str_desc+0x30>
8000d638:	c2 28       	rjmp	8000d67c <udc_req_std_dev_get_str_desc+0x68>
8000d63a:	58 28       	cp.w	r8,2
8000d63c:	c1 00       	breq	8000d65c <udc_req_std_dev_get_str_desc+0x48>
8000d63e:	58 38       	cp.w	r8,3
8000d640:	c1 50       	breq	8000d66a <udc_req_std_dev_get_str_desc+0x56>
8000d642:	c1 d8       	rjmp	8000d67c <udc_req_std_dev_get_str_desc+0x68>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
8000d644:	30 4b       	mov	r11,4
8000d646:	4a ec       	lddpc	r12,8000d6fc <udc_req_std_dev_get_str_desc+0xe8>
8000d648:	f0 1f 00 2e 	mcall	8000d700 <udc_req_std_dev_get_str_desc+0xec>
				sizeof(udc_string_desc_languageid));
		break;
8000d64c:	c1 a8       	rjmp	8000d680 <udc_req_std_dev_get_str_desc+0x6c>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
8000d64e:	30 78       	mov	r8,7
8000d650:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_manufacturer_name;
8000d654:	4a c8       	lddpc	r8,8000d704 <udc_req_std_dev_get_str_desc+0xf0>
8000d656:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000d65a:	c1 38       	rjmp	8000d680 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
8000d65c:	30 78       	mov	r8,7
8000d65e:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_product_name;
8000d662:	4a a8       	lddpc	r8,8000d708 <udc_req_std_dev_get_str_desc+0xf4>
8000d664:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000d668:	c0 c8       	rjmp	8000d680 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
8000d66a:	30 c8       	mov	r8,12
8000d66c:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_get_string_serial_name();
8000d670:	f0 1f 00 27 	mcall	8000d70c <udc_req_std_dev_get_str_desc+0xf8>
8000d674:	18 98       	mov	r8,r12
8000d676:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000d67a:	c0 38       	rjmp	8000d680 <udc_req_std_dev_get_str_desc+0x6c>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
8000d67c:	30 08       	mov	r8,0
8000d67e:	c3 88       	rjmp	8000d6ee <udc_req_std_dev_get_str_desc+0xda>
	}

	if (str_length) {
8000d680:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d684:	30 08       	mov	r8,0
8000d686:	f0 09 18 00 	cp.b	r9,r8
8000d68a:	c3 10       	breq	8000d6ec <udc_req_std_dev_get_str_desc+0xd8>
		for(i = 0; i < str_length; i++) {
8000d68c:	30 08       	mov	r8,0
8000d68e:	ef 68 ff f7 	st.b	r7[-9],r8
8000d692:	c1 88       	rjmp	8000d6c2 <udc_req_std_dev_get_str_desc+0xae>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
8000d694:	ef 3b ff f7 	ld.ub	r11,r7[-9]
8000d698:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000d69c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d6a0:	f2 08 00 08 	add	r8,r9,r8
8000d6a4:	11 88       	ld.ub	r8,r8[0x0]
8000d6a6:	5c c8       	swap.bh	r8
8000d6a8:	5c 88       	casts.h	r8
8000d6aa:	10 99       	mov	r9,r8
8000d6ac:	49 9a       	lddpc	r10,8000d710 <udc_req_std_dev_get_str_desc+0xfc>
8000d6ae:	f6 08 15 01 	lsl	r8,r11,0x1
8000d6b2:	f4 08 00 08 	add	r8,r10,r8
8000d6b6:	b0 19       	st.h	r8[0x2],r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
8000d6b8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000d6bc:	2f f8       	sub	r8,-1
8000d6be:	ef 68 ff f7 	st.b	r7[-9],r8
8000d6c2:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000d6c6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d6ca:	f0 09 18 00 	cp.b	r9,r8
8000d6ce:	ce 33       	brcs	8000d694 <udc_req_std_dev_get_str_desc+0x80>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
8000d6d0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d6d4:	2f f8       	sub	r8,-1
8000d6d6:	5c 58       	castu.b	r8
8000d6d8:	a1 78       	lsl	r8,0x1
8000d6da:	5c 58       	castu.b	r8
8000d6dc:	48 d9       	lddpc	r9,8000d710 <udc_req_std_dev_get_str_desc+0xfc>
8000d6de:	b2 88       	st.b	r9[0x0],r8
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
8000d6e0:	48 c8       	lddpc	r8,8000d710 <udc_req_std_dev_get_str_desc+0xfc>
8000d6e2:	11 88       	ld.ub	r8,r8[0x0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
8000d6e4:	10 9b       	mov	r11,r8
8000d6e6:	48 bc       	lddpc	r12,8000d710 <udc_req_std_dev_get_str_desc+0xfc>
8000d6e8:	f0 1f 00 06 	mcall	8000d700 <udc_req_std_dev_get_str_desc+0xec>
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
8000d6ec:	30 18       	mov	r8,1
}
8000d6ee:	10 9c       	mov	r12,r8
8000d6f0:	2f dd       	sub	sp,-12
8000d6f2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d6f6:	00 00       	add	r0,r0
8000d6f8:	00 00       	add	r0,r0
8000d6fa:	0f a8       	ld.ub	r8,r7[0x2]
8000d6fc:	00 00       	add	r0,r0
8000d6fe:	02 14       	sub	r4,r1
8000d700:	80 00       	ld.sh	r0,r0[0x0]
8000d702:	9d 8c       	st.w	lr[0x20],r12
8000d704:	00 00       	add	r0,r0
8000d706:	02 18       	sub	r8,r1
8000d708:	00 00       	add	r0,r0
8000d70a:	02 20       	rsub	r0,r1
8000d70c:	80 00       	ld.sh	r0,r0[0x0]
8000d70e:	cf c4       	brge	8000d706 <udc_req_std_dev_get_str_desc+0xf2>
8000d710:	00 00       	add	r0,r0
8000d712:	02 28       	rsub	r8,r1

8000d714 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
8000d714:	eb cd 40 80 	pushm	r7,lr
8000d718:	1a 97       	mov	r7,sp
8000d71a:	20 1d       	sub	sp,4
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000d71c:	fe f8 02 40 	ld.w	r8,pc[576]
8000d720:	90 18       	ld.sh	r8,r8[0x2]
8000d722:	ef 68 ff ff 	st.b	r7[-1],r8

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
8000d726:	fe f8 02 36 	ld.w	r8,pc[566]
8000d72a:	90 18       	ld.sh	r8,r8[0x2]
8000d72c:	5c 78       	castu.h	r8
8000d72e:	a9 88       	lsr	r8,0x8
8000d730:	5c 88       	casts.h	r8
8000d732:	5c 58       	castu.b	r8
8000d734:	58 38       	cp.w	r8,3
8000d736:	e0 80 00 f7 	breq	8000d924 <udc_req_std_dev_get_descriptor+0x210>
8000d73a:	e0 89 00 07 	brgt	8000d748 <udc_req_std_dev_get_descriptor+0x34>
8000d73e:	58 18       	cp.w	r8,1
8000d740:	c0 b0       	breq	8000d756 <udc_req_std_dev_get_descriptor+0x42>
8000d742:	58 28       	cp.w	r8,2
8000d744:	c2 70       	breq	8000d792 <udc_req_std_dev_get_descriptor+0x7e>
8000d746:	cf 88       	rjmp	8000d936 <udc_req_std_dev_get_descriptor+0x222>
8000d748:	58 68       	cp.w	r8,6
8000d74a:	e0 80 00 82 	breq	8000d84e <udc_req_std_dev_get_descriptor+0x13a>
8000d74e:	58 78       	cp.w	r8,7
8000d750:	e0 80 00 8a 	breq	8000d864 <udc_req_std_dev_get_descriptor+0x150>
8000d754:	cf 18       	rjmp	8000d936 <udc_req_std_dev_get_descriptor+0x222>
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
8000d756:	f0 1f 00 83 	mcall	8000d960 <udc_req_std_dev_get_descriptor+0x24c>
8000d75a:	18 98       	mov	r8,r12
8000d75c:	ec 18 00 01 	eorl	r8,0x1
8000d760:	5c 58       	castu.b	r8
8000d762:	c0 d0       	breq	8000d77c <udc_req_std_dev_get_descriptor+0x68>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
8000d764:	fe f8 02 00 	ld.w	r8,pc[512]
8000d768:	70 28       	ld.w	r8,r8[0x8]
8000d76a:	11 88       	ld.ub	r8,r8[0x0]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
8000d76c:	10 99       	mov	r9,r8
8000d76e:	4f e8       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d770:	70 28       	ld.w	r8,r8[0x8]
8000d772:	12 9b       	mov	r11,r9
8000d774:	10 9c       	mov	r12,r8
8000d776:	f0 1f 00 7d 	mcall	8000d968 <udc_req_std_dev_get_descriptor+0x254>
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000d77a:	ce 18       	rjmp	8000d93c <udc_req_std_dev_get_descriptor+0x228>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
8000d77c:	4f a8       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d77e:	70 08       	ld.w	r8,r8[0x0]
8000d780:	11 88       	ld.ub	r8,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
8000d782:	10 99       	mov	r9,r8
8000d784:	4f 88       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d786:	70 08       	ld.w	r8,r8[0x0]
8000d788:	12 9b       	mov	r11,r9
8000d78a:	10 9c       	mov	r12,r8
8000d78c:	f0 1f 00 77 	mcall	8000d968 <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000d790:	cd 68       	rjmp	8000d93c <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
8000d792:	f0 1f 00 74 	mcall	8000d960 <udc_req_std_dev_get_descriptor+0x24c>
8000d796:	18 98       	mov	r8,r12
8000d798:	58 08       	cp.w	r8,0
8000d79a:	c2 b0       	breq	8000d7f0 <udc_req_std_dev_get_descriptor+0xdc>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000d79c:	4f 28       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d79e:	70 28       	ld.w	r8,r8[0x8]
8000d7a0:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d7a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d7a8:	f0 09 18 00 	cp.b	r9,r8
8000d7ac:	c0 33       	brcs	8000d7b2 <udc_req_std_dev_get_descriptor+0x9e>
					bNumConfigurations) {
				return false;
8000d7ae:	30 08       	mov	r8,0
8000d7b0:	cd 28       	rjmp	8000d954 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000d7b2:	4e d8       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d7b4:	70 49       	ld.w	r9,r8[0x10]
8000d7b6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d7ba:	a3 78       	lsl	r8,0x3
8000d7bc:	f2 08 00 08 	add	r8,r9,r8
8000d7c0:	70 08       	ld.w	r8,r8[0x0]
8000d7c2:	11 a9       	ld.ub	r9,r8[0x2]
8000d7c4:	a9 69       	lsl	r9,0x8
8000d7c6:	11 b8       	ld.ub	r8,r8[0x3]
8000d7c8:	12 48       	or	r8,r9
8000d7ca:	5c 88       	casts.h	r8
8000d7cc:	5c 88       	casts.h	r8
8000d7ce:	5c c8       	swap.bh	r8
8000d7d0:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d7d2:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000d7d6:	4e 48       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d7d8:	70 4a       	ld.w	r10,r8[0x10]
8000d7da:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d7de:	a3 78       	lsl	r8,0x3
8000d7e0:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d7e4:	70 08       	ld.w	r8,r8[0x0]
8000d7e6:	12 9b       	mov	r11,r9
8000d7e8:	10 9c       	mov	r12,r8
8000d7ea:	f0 1f 00 60 	mcall	8000d968 <udc_req_std_dev_get_descriptor+0x254>
8000d7ee:	c2 a8       	rjmp	8000d842 <udc_req_std_dev_get_descriptor+0x12e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000d7f0:	4d d8       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d7f2:	70 08       	ld.w	r8,r8[0x0]
8000d7f4:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d7f8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d7fc:	f0 09 18 00 	cp.b	r9,r8
8000d800:	c0 33       	brcs	8000d806 <udc_req_std_dev_get_descriptor+0xf2>
					bNumConfigurations) {
				return false;
8000d802:	30 08       	mov	r8,0
8000d804:	ca 88       	rjmp	8000d954 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000d806:	4d 88       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d808:	70 19       	ld.w	r9,r8[0x4]
8000d80a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d80e:	a3 78       	lsl	r8,0x3
8000d810:	f2 08 00 08 	add	r8,r9,r8
8000d814:	70 08       	ld.w	r8,r8[0x0]
8000d816:	11 a9       	ld.ub	r9,r8[0x2]
8000d818:	a9 69       	lsl	r9,0x8
8000d81a:	11 b8       	ld.ub	r8,r8[0x3]
8000d81c:	12 48       	or	r8,r9
8000d81e:	5c 88       	casts.h	r8
8000d820:	5c 88       	casts.h	r8
8000d822:	5c c8       	swap.bh	r8
8000d824:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d826:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000d82a:	4c f8       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d82c:	70 1a       	ld.w	r10,r8[0x4]
8000d82e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d832:	a3 78       	lsl	r8,0x3
8000d834:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d838:	70 08       	ld.w	r8,r8[0x0]
8000d83a:	12 9b       	mov	r11,r9
8000d83c:	10 9c       	mov	r12,r8
8000d83e:	f0 1f 00 4b 	mcall	8000d968 <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000d842:	4c 78       	lddpc	r8,8000d95c <udc_req_std_dev_get_descriptor+0x248>
8000d844:	70 28       	ld.w	r8,r8[0x8]
8000d846:	10 99       	mov	r9,r8
8000d848:	30 28       	mov	r8,2
8000d84a:	b2 98       	st.b	r9[0x1],r8
				USB_DT_CONFIGURATION;
		break;
8000d84c:	c7 88       	rjmp	8000d93c <udc_req_std_dev_get_descriptor+0x228>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
8000d84e:	4c 68       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d850:	70 38       	ld.w	r8,r8[0xc]
8000d852:	11 88       	ld.ub	r8,r8[0x0]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
8000d854:	10 99       	mov	r9,r8
8000d856:	4c 48       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d858:	70 38       	ld.w	r8,r8[0xc]
8000d85a:	12 9b       	mov	r11,r9
8000d85c:	10 9c       	mov	r12,r8
8000d85e:	f0 1f 00 43 	mcall	8000d968 <udc_req_std_dev_get_descriptor+0x254>
				udc_config.qualifier->bLength);
		break;
8000d862:	c6 d8       	rjmp	8000d93c <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
8000d864:	f0 1f 00 3f 	mcall	8000d960 <udc_req_std_dev_get_descriptor+0x24c>
8000d868:	18 98       	mov	r8,r12
8000d86a:	ec 18 00 01 	eorl	r8,0x1
8000d86e:	5c 58       	castu.b	r8
8000d870:	c2 b0       	breq	8000d8c6 <udc_req_std_dev_get_descriptor+0x1b2>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000d872:	4b d8       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d874:	70 28       	ld.w	r8,r8[0x8]
8000d876:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d87a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d87e:	f0 09 18 00 	cp.b	r9,r8
8000d882:	c0 33       	brcs	8000d888 <udc_req_std_dev_get_descriptor+0x174>
					bNumConfigurations) {
				return false;
8000d884:	30 08       	mov	r8,0
8000d886:	c6 78       	rjmp	8000d954 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000d888:	4b 78       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d88a:	70 49       	ld.w	r9,r8[0x10]
8000d88c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d890:	a3 78       	lsl	r8,0x3
8000d892:	f2 08 00 08 	add	r8,r9,r8
8000d896:	70 08       	ld.w	r8,r8[0x0]
8000d898:	11 a9       	ld.ub	r9,r8[0x2]
8000d89a:	a9 69       	lsl	r9,0x8
8000d89c:	11 b8       	ld.ub	r8,r8[0x3]
8000d89e:	12 48       	or	r8,r9
8000d8a0:	5c 88       	casts.h	r8
8000d8a2:	5c 88       	casts.h	r8
8000d8a4:	5c c8       	swap.bh	r8
8000d8a6:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d8a8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000d8ac:	4a e8       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d8ae:	70 4a       	ld.w	r10,r8[0x10]
8000d8b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d8b4:	a3 78       	lsl	r8,0x3
8000d8b6:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d8ba:	70 08       	ld.w	r8,r8[0x0]
8000d8bc:	12 9b       	mov	r11,r9
8000d8be:	10 9c       	mov	r12,r8
8000d8c0:	f0 1f 00 2a 	mcall	8000d968 <udc_req_std_dev_get_descriptor+0x254>
8000d8c4:	c2 a8       	rjmp	8000d918 <udc_req_std_dev_get_descriptor+0x204>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000d8c6:	4a 88       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d8c8:	70 08       	ld.w	r8,r8[0x0]
8000d8ca:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d8ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d8d2:	f0 09 18 00 	cp.b	r9,r8
8000d8d6:	c0 33       	brcs	8000d8dc <udc_req_std_dev_get_descriptor+0x1c8>
					bNumConfigurations) {
				return false;
8000d8d8:	30 08       	mov	r8,0
8000d8da:	c3 d8       	rjmp	8000d954 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000d8dc:	4a 28       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d8de:	70 19       	ld.w	r9,r8[0x4]
8000d8e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d8e4:	a3 78       	lsl	r8,0x3
8000d8e6:	f2 08 00 08 	add	r8,r9,r8
8000d8ea:	70 08       	ld.w	r8,r8[0x0]
8000d8ec:	11 a9       	ld.ub	r9,r8[0x2]
8000d8ee:	a9 69       	lsl	r9,0x8
8000d8f0:	11 b8       	ld.ub	r8,r8[0x3]
8000d8f2:	12 48       	or	r8,r9
8000d8f4:	5c 88       	casts.h	r8
8000d8f6:	5c 88       	casts.h	r8
8000d8f8:	5c c8       	swap.bh	r8
8000d8fa:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d8fc:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000d900:	49 98       	lddpc	r8,8000d964 <udc_req_std_dev_get_descriptor+0x250>
8000d902:	70 1a       	ld.w	r10,r8[0x4]
8000d904:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d908:	a3 78       	lsl	r8,0x3
8000d90a:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d90e:	70 08       	ld.w	r8,r8[0x0]
8000d910:	12 9b       	mov	r11,r9
8000d912:	10 9c       	mov	r12,r8
8000d914:	f0 1f 00 15 	mcall	8000d968 <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000d918:	49 18       	lddpc	r8,8000d95c <udc_req_std_dev_get_descriptor+0x248>
8000d91a:	70 28       	ld.w	r8,r8[0x8]
8000d91c:	10 99       	mov	r9,r8
8000d91e:	30 78       	mov	r8,7
8000d920:	b2 98       	st.b	r9[0x1],r8
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
8000d922:	c0 d8       	rjmp	8000d93c <udc_req_std_dev_get_descriptor+0x228>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
8000d924:	f0 1f 00 12 	mcall	8000d96c <udc_req_std_dev_get_descriptor+0x258>
8000d928:	18 98       	mov	r8,r12
8000d92a:	ec 18 00 01 	eorl	r8,0x1
8000d92e:	5c 58       	castu.b	r8
8000d930:	c0 50       	breq	8000d93a <udc_req_std_dev_get_descriptor+0x226>
			return false;
8000d932:	30 08       	mov	r8,0
8000d934:	c1 08       	rjmp	8000d954 <udc_req_std_dev_get_descriptor+0x240>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
8000d936:	30 08       	mov	r8,0
8000d938:	c0 e8       	rjmp	8000d954 <udc_req_std_dev_get_descriptor+0x240>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
8000d93a:	d7 03       	nop
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
8000d93c:	48 88       	lddpc	r8,8000d95c <udc_req_std_dev_get_descriptor+0x248>
8000d93e:	90 39       	ld.sh	r9,r8[0x6]
8000d940:	48 78       	lddpc	r8,8000d95c <udc_req_std_dev_get_descriptor+0x248>
8000d942:	90 68       	ld.sh	r8,r8[0xc]
8000d944:	f0 09 19 00 	cp.h	r9,r8
8000d948:	c0 52       	brcc	8000d952 <udc_req_std_dev_get_descriptor+0x23e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000d94a:	48 58       	lddpc	r8,8000d95c <udc_req_std_dev_get_descriptor+0x248>
8000d94c:	90 38       	ld.sh	r8,r8[0x6]
8000d94e:	48 49       	lddpc	r9,8000d95c <udc_req_std_dev_get_descriptor+0x248>
8000d950:	b2 68       	st.h	r9[0xc],r8
	}
	return true;
8000d952:	30 18       	mov	r8,1
}
8000d954:	10 9c       	mov	r12,r8
8000d956:	2f fd       	sub	sp,-4
8000d958:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d95c:	00 00       	add	r0,r0
8000d95e:	0f a8       	ld.ub	r8,r7[0x2]
8000d960:	80 00       	ld.sh	r0,r0[0x0]
8000d962:	9c f0       	ld.uh	r0,lr[0xe]
8000d964:	00 00       	add	r0,r0
8000d966:	02 00       	add	r0,r1
8000d968:	80 00       	ld.sh	r0,r0[0x0]
8000d96a:	9d 8c       	st.w	lr[0x20],r12
8000d96c:	80 00       	ld.sh	r0,r0[0x0]
8000d96e:	d6 14       	*unknown*

8000d970 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
8000d970:	eb cd 40 80 	pushm	r7,lr
8000d974:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != 1) {
8000d976:	48 98       	lddpc	r8,8000d998 <udc_req_std_dev_get_configuration+0x28>
8000d978:	90 39       	ld.sh	r9,r8[0x6]
8000d97a:	30 18       	mov	r8,1
8000d97c:	f0 09 19 00 	cp.h	r9,r8
8000d980:	c0 30       	breq	8000d986 <udc_req_std_dev_get_configuration+0x16>
		return false;
8000d982:	30 08       	mov	r8,0
8000d984:	c0 68       	rjmp	8000d990 <udc_req_std_dev_get_configuration+0x20>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
8000d986:	30 1b       	mov	r11,1
8000d988:	48 5c       	lddpc	r12,8000d99c <udc_req_std_dev_get_configuration+0x2c>
8000d98a:	f0 1f 00 06 	mcall	8000d9a0 <udc_req_std_dev_get_configuration+0x30>
	return true;
8000d98e:	30 18       	mov	r8,1
}
8000d990:	10 9c       	mov	r12,r8
8000d992:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d996:	00 00       	add	r0,r0
8000d998:	00 00       	add	r0,r0
8000d99a:	0f a8       	ld.ub	r8,r7[0x2]
8000d99c:	00 00       	add	r0,r0
8000d99e:	08 0e       	add	lr,r4
8000d9a0:	80 00       	ld.sh	r0,r0[0x0]
8000d9a2:	9d 8c       	st.w	lr[0x20],r12

8000d9a4 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
8000d9a4:	eb cd 40 80 	pushm	r7,lr
8000d9a8:	1a 97       	mov	r7,sp
8000d9aa:	20 1d       	sub	sp,4
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
8000d9ac:	4b c8       	lddpc	r8,8000da9c <udc_req_std_dev_set_configuration+0xf8>
8000d9ae:	90 38       	ld.sh	r8,r8[0x6]
8000d9b0:	58 08       	cp.w	r8,0
8000d9b2:	c0 30       	breq	8000d9b8 <udc_req_std_dev_set_configuration+0x14>
		return false;
8000d9b4:	30 08       	mov	r8,0
8000d9b6:	c6 f8       	rjmp	8000da94 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
8000d9b8:	f0 1f 00 3a 	mcall	8000daa0 <udc_req_std_dev_set_configuration+0xfc>
8000d9bc:	18 98       	mov	r8,r12
8000d9be:	58 08       	cp.w	r8,0
8000d9c0:	c0 31       	brne	8000d9c6 <udc_req_std_dev_set_configuration+0x22>
		return false;
8000d9c2:	30 08       	mov	r8,0
8000d9c4:	c6 88       	rjmp	8000da94 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000d9c6:	f0 1f 00 38 	mcall	8000daa4 <udc_req_std_dev_set_configuration+0x100>
8000d9ca:	18 98       	mov	r8,r12
8000d9cc:	58 08       	cp.w	r8,0
8000d9ce:	c0 f0       	breq	8000d9ec <udc_req_std_dev_set_configuration+0x48>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000d9d0:	4b 38       	lddpc	r8,8000da9c <udc_req_std_dev_set_configuration+0xf8>
8000d9d2:	90 18       	ld.sh	r8,r8[0x2]
8000d9d4:	5c 78       	castu.h	r8
8000d9d6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_hs->bNumConfigurations) {
8000d9da:	4b 48       	lddpc	r8,8000daa8 <udc_req_std_dev_set_configuration+0x104>
8000d9dc:	70 28       	ld.w	r8,r8[0x8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000d9de:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d9e2:	10 39       	cp.w	r9,r8
8000d9e4:	e0 8a 00 12 	brle	8000da08 <udc_req_std_dev_set_configuration+0x64>
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000d9e8:	30 08       	mov	r8,0
8000d9ea:	c5 58       	rjmp	8000da94 <udc_req_std_dev_set_configuration+0xf0>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000d9ec:	4a c8       	lddpc	r8,8000da9c <udc_req_std_dev_set_configuration+0xf8>
8000d9ee:	90 18       	ld.sh	r8,r8[0x2]
8000d9f0:	5c 78       	castu.h	r8
8000d9f2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_lsfs->bNumConfigurations) {
8000d9f6:	4a d8       	lddpc	r8,8000daa8 <udc_req_std_dev_set_configuration+0x104>
8000d9f8:	70 08       	ld.w	r8,r8[0x0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000d9fa:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d9fe:	10 39       	cp.w	r9,r8
8000da00:	e0 8a 00 05 	brle	8000da0a <udc_req_std_dev_set_configuration+0x66>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
8000da04:	30 08       	mov	r8,0
8000da06:	c4 78       	rjmp	8000da94 <udc_req_std_dev_set_configuration+0xf0>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000da08:	d7 03       	nop
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
8000da0a:	f0 1f 00 29 	mcall	8000daac <udc_req_std_dev_set_configuration+0x108>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
8000da0e:	4a 48       	lddpc	r8,8000da9c <udc_req_std_dev_set_configuration+0xf8>
8000da10:	90 18       	ld.sh	r8,r8[0x2]
8000da12:	5c 58       	castu.b	r8
8000da14:	4a 79       	lddpc	r9,8000dab0 <udc_req_std_dev_set_configuration+0x10c>
8000da16:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
8000da18:	4a 68       	lddpc	r8,8000dab0 <udc_req_std_dev_set_configuration+0x10c>
8000da1a:	11 88       	ld.ub	r8,r8[0x0]
8000da1c:	58 08       	cp.w	r8,0
8000da1e:	c0 31       	brne	8000da24 <udc_req_std_dev_set_configuration+0x80>
		return true; // Default empty configuration requested
8000da20:	30 18       	mov	r8,1
8000da22:	c3 98       	rjmp	8000da94 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000da24:	f0 1f 00 20 	mcall	8000daa4 <udc_req_std_dev_set_configuration+0x100>
8000da28:	18 98       	mov	r8,r12
8000da2a:	58 08       	cp.w	r8,0
8000da2c:	c0 b0       	breq	8000da42 <udc_req_std_dev_set_configuration+0x9e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
8000da2e:	49 f8       	lddpc	r8,8000daa8 <udc_req_std_dev_set_configuration+0x104>
8000da30:	70 49       	ld.w	r9,r8[0x10]
8000da32:	4a 08       	lddpc	r8,8000dab0 <udc_req_std_dev_set_configuration+0x10c>
8000da34:	11 88       	ld.ub	r8,r8[0x0]
8000da36:	20 18       	sub	r8,1
8000da38:	a3 78       	lsl	r8,0x3
8000da3a:	10 09       	add	r9,r8
8000da3c:	49 e8       	lddpc	r8,8000dab4 <udc_req_std_dev_set_configuration+0x110>
8000da3e:	91 09       	st.w	r8[0x0],r9
8000da40:	c0 a8       	rjmp	8000da54 <udc_req_std_dev_set_configuration+0xb0>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
8000da42:	49 a8       	lddpc	r8,8000daa8 <udc_req_std_dev_set_configuration+0x104>
8000da44:	70 19       	ld.w	r9,r8[0x4]
8000da46:	49 b8       	lddpc	r8,8000dab0 <udc_req_std_dev_set_configuration+0x10c>
8000da48:	11 88       	ld.ub	r8,r8[0x0]
8000da4a:	20 18       	sub	r8,1
8000da4c:	a3 78       	lsl	r8,0x3
8000da4e:	10 09       	add	r9,r8
8000da50:	49 98       	lddpc	r8,8000dab4 <udc_req_std_dev_set_configuration+0x110>
8000da52:	91 09       	st.w	r8[0x0],r9
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000da54:	30 08       	mov	r8,0
8000da56:	ef 68 ff ff 	st.b	r7[-1],r8
8000da5a:	c1 38       	rjmp	8000da80 <udc_req_std_dev_set_configuration+0xdc>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
8000da5c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000da60:	30 0b       	mov	r11,0
8000da62:	10 9c       	mov	r12,r8
8000da64:	f0 1f 00 15 	mcall	8000dab8 <udc_req_std_dev_set_configuration+0x114>
8000da68:	18 98       	mov	r8,r12
8000da6a:	ec 18 00 01 	eorl	r8,0x1
8000da6e:	5c 58       	castu.b	r8
8000da70:	c0 30       	breq	8000da76 <udc_req_std_dev_set_configuration+0xd2>
			return false;
8000da72:	30 08       	mov	r8,0
8000da74:	c1 08       	rjmp	8000da94 <udc_req_std_dev_set_configuration+0xf0>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000da76:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000da7a:	2f f8       	sub	r8,-1
8000da7c:	ef 68 ff ff 	st.b	r7[-1],r8
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000da80:	48 d8       	lddpc	r8,8000dab4 <udc_req_std_dev_set_configuration+0x110>
8000da82:	70 08       	ld.w	r8,r8[0x0]
8000da84:	70 08       	ld.w	r8,r8[0x0]
8000da86:	11 c8       	ld.ub	r8,r8[0x4]
8000da88:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000da8c:	f0 09 18 00 	cp.b	r9,r8
8000da90:	ce 63       	brcs	8000da5c <udc_req_std_dev_set_configuration+0xb8>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
8000da92:	30 18       	mov	r8,1
}
8000da94:	10 9c       	mov	r12,r8
8000da96:	2f fd       	sub	sp,-4
8000da98:	e3 cd 80 80 	ldm	sp++,r7,pc
8000da9c:	00 00       	add	r0,r0
8000da9e:	0f a8       	ld.ub	r8,r7[0x2]
8000daa0:	80 00       	ld.sh	r0,r0[0x0]
8000daa2:	9d 5a       	st.w	lr[0x14],r10
8000daa4:	80 00       	ld.sh	r0,r0[0x0]
8000daa6:	9c f0       	ld.uh	r0,lr[0xe]
8000daa8:	00 00       	add	r0,r0
8000daaa:	02 00       	add	r0,r1
8000daac:	80 00       	ld.sh	r0,r0[0x0]
8000daae:	d2 e4       	*unknown*
8000dab0:	00 00       	add	r0,r0
8000dab2:	08 0e       	add	lr,r4
8000dab4:	00 00       	add	r0,r0
8000dab6:	08 10       	sub	r0,r4
8000dab8:	80 00       	ld.sh	r0,r0[0x0]
8000daba:	d2 08       	*unknown*

8000dabc <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
8000dabc:	eb cd 40 80 	pushm	r7,lr
8000dac0:	1a 97       	mov	r7,sp
8000dac2:	20 2d       	sub	sp,8
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
8000dac4:	4a 38       	lddpc	r8,8000db50 <udc_req_std_iface_get_setting+0x94>
8000dac6:	90 39       	ld.sh	r9,r8[0x6]
8000dac8:	30 18       	mov	r8,1
8000daca:	f0 09 19 00 	cp.h	r9,r8
8000dace:	c0 30       	breq	8000dad4 <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
8000dad0:	30 08       	mov	r8,0
8000dad2:	c3 a8       	rjmp	8000db46 <udc_req_std_iface_get_setting+0x8a>
	}
	if (!udc_num_configuration) {
8000dad4:	4a 08       	lddpc	r8,8000db54 <udc_req_std_iface_get_setting+0x98>
8000dad6:	11 88       	ld.ub	r8,r8[0x0]
8000dad8:	58 08       	cp.w	r8,0
8000dada:	c0 31       	brne	8000dae0 <udc_req_std_iface_get_setting+0x24>
		return false; // The device is not is configured state yet
8000dadc:	30 08       	mov	r8,0
8000dade:	c3 48       	rjmp	8000db46 <udc_req_std_iface_get_setting+0x8a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000dae0:	49 c8       	lddpc	r8,8000db50 <udc_req_std_iface_get_setting+0x94>
8000dae2:	90 28       	ld.sh	r8,r8[0x4]
8000dae4:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000dae8:	49 c8       	lddpc	r8,8000db58 <udc_req_std_iface_get_setting+0x9c>
8000daea:	70 08       	ld.w	r8,r8[0x0]
8000daec:	70 08       	ld.w	r8,r8[0x0]
8000daee:	11 c8       	ld.ub	r8,r8[0x4]
8000daf0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000daf4:	f0 09 18 00 	cp.b	r9,r8
8000daf8:	c0 33       	brcs	8000dafe <udc_req_std_iface_get_setting+0x42>
		return false;
8000dafa:	30 08       	mov	r8,0
8000dafc:	c2 58       	rjmp	8000db46 <udc_req_std_iface_get_setting+0x8a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000dafe:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000db02:	30 0b       	mov	r11,0
8000db04:	10 9c       	mov	r12,r8
8000db06:	f0 1f 00 16 	mcall	8000db5c <udc_req_std_iface_get_setting+0xa0>
8000db0a:	18 98       	mov	r8,r12
8000db0c:	ec 18 00 01 	eorl	r8,0x1
8000db10:	5c 58       	castu.b	r8
8000db12:	c0 30       	breq	8000db18 <udc_req_std_iface_get_setting+0x5c>
		return false;
8000db14:	30 08       	mov	r8,0
8000db16:	c1 88       	rjmp	8000db46 <udc_req_std_iface_get_setting+0x8a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000db18:	49 08       	lddpc	r8,8000db58 <udc_req_std_iface_get_setting+0x9c>
8000db1a:	70 08       	ld.w	r8,r8[0x0]
8000db1c:	70 19       	ld.w	r9,r8[0x4]
8000db1e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000db22:	a3 68       	lsl	r8,0x2
8000db24:	f2 08 00 08 	add	r8,r9,r8
8000db28:	70 08       	ld.w	r8,r8[0x0]
8000db2a:	ef 48 ff fc 	st.w	r7[-4],r8
	udc_iface_setting = udi_api->getsetting();
8000db2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000db32:	70 38       	ld.w	r8,r8[0xc]
8000db34:	5d 18       	icall	r8
8000db36:	18 98       	mov	r8,r12
8000db38:	48 a9       	lddpc	r9,8000db60 <udc_req_std_iface_get_setting+0xa4>
8000db3a:	b2 88       	st.b	r9[0x0],r8

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
8000db3c:	30 1b       	mov	r11,1
8000db3e:	48 9c       	lddpc	r12,8000db60 <udc_req_std_iface_get_setting+0xa4>
8000db40:	f0 1f 00 09 	mcall	8000db64 <udc_req_std_iface_get_setting+0xa8>
	return true;
8000db44:	30 18       	mov	r8,1
}
8000db46:	10 9c       	mov	r12,r8
8000db48:	2f ed       	sub	sp,-8
8000db4a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000db4e:	00 00       	add	r0,r0
8000db50:	00 00       	add	r0,r0
8000db52:	0f a8       	ld.ub	r8,r7[0x2]
8000db54:	00 00       	add	r0,r0
8000db56:	08 0e       	add	lr,r4
8000db58:	00 00       	add	r0,r0
8000db5a:	08 10       	sub	r0,r4
8000db5c:	80 00       	ld.sh	r0,r0[0x0]
8000db5e:	d0 94       	*unknown*
8000db60:	00 00       	add	r0,r0
8000db62:	08 18       	sub	r8,r4
8000db64:	80 00       	ld.sh	r0,r0[0x0]
8000db66:	9d 8c       	st.w	lr[0x20],r12

8000db68 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
8000db68:	eb cd 40 80 	pushm	r7,lr
8000db6c:	1a 97       	mov	r7,sp
8000db6e:	20 1d       	sub	sp,4
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
8000db70:	49 78       	lddpc	r8,8000dbcc <udc_req_std_iface_set_setting+0x64>
8000db72:	90 38       	ld.sh	r8,r8[0x6]
8000db74:	58 08       	cp.w	r8,0
8000db76:	c0 30       	breq	8000db7c <udc_req_std_iface_set_setting+0x14>
		return false; // Error in request
8000db78:	30 08       	mov	r8,0
8000db7a:	c2 48       	rjmp	8000dbc2 <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
8000db7c:	49 58       	lddpc	r8,8000dbd0 <udc_req_std_iface_set_setting+0x68>
8000db7e:	11 88       	ld.ub	r8,r8[0x0]
8000db80:	58 08       	cp.w	r8,0
8000db82:	c0 31       	brne	8000db88 <udc_req_std_iface_set_setting+0x20>
		return false; // The device is not is configured state yet
8000db84:	30 08       	mov	r8,0
8000db86:	c1 e8       	rjmp	8000dbc2 <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000db88:	49 18       	lddpc	r8,8000dbcc <udc_req_std_iface_set_setting+0x64>
8000db8a:	90 28       	ld.sh	r8,r8[0x4]
8000db8c:	ef 68 ff fe 	st.b	r7[-2],r8
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
8000db90:	48 f8       	lddpc	r8,8000dbcc <udc_req_std_iface_set_setting+0x64>
8000db92:	90 18       	ld.sh	r8,r8[0x2]
8000db94:	ef 68 ff ff 	st.b	r7[-1],r8

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
8000db98:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000db9c:	10 9c       	mov	r12,r8
8000db9e:	f0 1f 00 0e 	mcall	8000dbd4 <udc_req_std_iface_set_setting+0x6c>
8000dba2:	18 98       	mov	r8,r12
8000dba4:	ec 18 00 01 	eorl	r8,0x1
8000dba8:	5c 58       	castu.b	r8
8000dbaa:	c0 30       	breq	8000dbb0 <udc_req_std_iface_set_setting+0x48>
		return false;
8000dbac:	30 08       	mov	r8,0
8000dbae:	c0 a8       	rjmp	8000dbc2 <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
8000dbb0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dbb4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000dbb8:	12 9b       	mov	r11,r9
8000dbba:	10 9c       	mov	r12,r8
8000dbbc:	f0 1f 00 07 	mcall	8000dbd8 <udc_req_std_iface_set_setting+0x70>
8000dbc0:	18 98       	mov	r8,r12
}
8000dbc2:	10 9c       	mov	r12,r8
8000dbc4:	2f fd       	sub	sp,-4
8000dbc6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dbca:	00 00       	add	r0,r0
8000dbcc:	00 00       	add	r0,r0
8000dbce:	0f a8       	ld.ub	r8,r7[0x2]
8000dbd0:	00 00       	add	r0,r0
8000dbd2:	08 0e       	add	lr,r4
8000dbd4:	80 00       	ld.sh	r0,r0[0x0]
8000dbd6:	d1 4c       	*unknown*
8000dbd8:	80 00       	ld.sh	r0,r0[0x0]
8000dbda:	d2 08       	*unknown*

8000dbdc <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
8000dbdc:	eb cd 40 80 	pushm	r7,lr
8000dbe0:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000dbe2:	4c 78       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dbe4:	11 88       	ld.ub	r8,r8[0x0]
8000dbe6:	10 99       	mov	r9,r8
8000dbe8:	30 08       	mov	r8,0
8000dbea:	f0 09 18 00 	cp.b	r9,r8
8000dbee:	c3 c4       	brge	8000dc66 <udc_reqstd+0x8a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
8000dbf0:	4c 38       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dbf2:	90 38       	ld.sh	r8,r8[0x6]
8000dbf4:	58 08       	cp.w	r8,0
8000dbf6:	c0 31       	brne	8000dbfc <udc_reqstd+0x20>
			return false; // Error for USB host
8000dbf8:	30 08       	mov	r8,0
8000dbfa:	c7 e8       	rjmp	8000dcf6 <udc_reqstd+0x11a>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000dbfc:	4c 08       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dbfe:	11 88       	ld.ub	r8,r8[0x0]
8000dc00:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc04:	c1 51       	brne	8000dc2e <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dc06:	4b e8       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dc08:	11 98       	ld.ub	r8,r8[0x1]
8000dc0a:	58 68       	cp.w	r8,6
8000dc0c:	c0 90       	breq	8000dc1e <udc_reqstd+0x42>
8000dc0e:	58 88       	cp.w	r8,8
8000dc10:	c0 b0       	breq	8000dc26 <udc_reqstd+0x4a>
8000dc12:	58 08       	cp.w	r8,0
8000dc14:	c0 d1       	brne	8000dc2e <udc_reqstd+0x52>
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
8000dc16:	f0 1f 00 3b 	mcall	8000dd00 <udc_reqstd+0x124>
8000dc1a:	18 98       	mov	r8,r12
8000dc1c:	c6 d8       	rjmp	8000dcf6 <udc_reqstd+0x11a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
8000dc1e:	f0 1f 00 3a 	mcall	8000dd04 <udc_reqstd+0x128>
8000dc22:	18 98       	mov	r8,r12
8000dc24:	c6 98       	rjmp	8000dcf6 <udc_reqstd+0x11a>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
8000dc26:	f0 1f 00 39 	mcall	8000dd08 <udc_reqstd+0x12c>
8000dc2a:	18 98       	mov	r8,r12
8000dc2c:	c6 58       	rjmp	8000dcf6 <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000dc2e:	4b 48       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dc30:	11 88       	ld.ub	r8,r8[0x0]
8000dc32:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc36:	58 18       	cp.w	r8,1
8000dc38:	c0 91       	brne	8000dc4a <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dc3a:	4b 18       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dc3c:	11 98       	ld.ub	r8,r8[0x1]
8000dc3e:	58 a8       	cp.w	r8,10
8000dc40:	c0 51       	brne	8000dc4a <udc_reqstd+0x6e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
8000dc42:	f0 1f 00 33 	mcall	8000dd0c <udc_reqstd+0x130>
8000dc46:	18 98       	mov	r8,r12
8000dc48:	c5 78       	rjmp	8000dcf6 <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000dc4a:	4a d8       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dc4c:	11 88       	ld.ub	r8,r8[0x0]
8000dc4e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc52:	58 28       	cp.w	r8,2
8000dc54:	c4 f1       	brne	8000dcf2 <udc_reqstd+0x116>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dc56:	4a a8       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dc58:	11 98       	ld.ub	r8,r8[0x1]
8000dc5a:	58 08       	cp.w	r8,0
8000dc5c:	c4 c1       	brne	8000dcf4 <udc_reqstd+0x118>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000dc5e:	f0 1f 00 2d 	mcall	8000dd10 <udc_reqstd+0x134>
8000dc62:	18 98       	mov	r8,r12
8000dc64:	c4 98       	rjmp	8000dcf6 <udc_reqstd+0x11a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000dc66:	4a 68       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dc68:	11 88       	ld.ub	r8,r8[0x0]
8000dc6a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc6e:	c1 f1       	brne	8000dcac <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dc70:	4a 38       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dc72:	11 98       	ld.ub	r8,r8[0x1]
8000dc74:	58 38       	cp.w	r8,3
8000dc76:	c1 30       	breq	8000dc9c <udc_reqstd+0xc0>
8000dc78:	e0 89 00 05 	brgt	8000dc82 <udc_reqstd+0xa6>
8000dc7c:	58 18       	cp.w	r8,1
8000dc7e:	c0 b0       	breq	8000dc94 <udc_reqstd+0xb8>
8000dc80:	c1 68       	rjmp	8000dcac <udc_reqstd+0xd0>
8000dc82:	58 58       	cp.w	r8,5
8000dc84:	c0 40       	breq	8000dc8c <udc_reqstd+0xb0>
8000dc86:	58 98       	cp.w	r8,9
8000dc88:	c0 e0       	breq	8000dca4 <udc_reqstd+0xc8>
8000dc8a:	c1 18       	rjmp	8000dcac <udc_reqstd+0xd0>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
8000dc8c:	f0 1f 00 22 	mcall	8000dd14 <udc_reqstd+0x138>
8000dc90:	18 98       	mov	r8,r12
8000dc92:	c3 28       	rjmp	8000dcf6 <udc_reqstd+0x11a>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
8000dc94:	f0 1f 00 21 	mcall	8000dd18 <udc_reqstd+0x13c>
8000dc98:	18 98       	mov	r8,r12
8000dc9a:	c2 e8       	rjmp	8000dcf6 <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
8000dc9c:	f0 1f 00 20 	mcall	8000dd1c <udc_reqstd+0x140>
8000dca0:	18 98       	mov	r8,r12
8000dca2:	c2 a8       	rjmp	8000dcf6 <udc_reqstd+0x11a>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
8000dca4:	f0 1f 00 1f 	mcall	8000dd20 <udc_reqstd+0x144>
8000dca8:	18 98       	mov	r8,r12
8000dcaa:	c2 68       	rjmp	8000dcf6 <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000dcac:	49 48       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dcae:	11 88       	ld.ub	r8,r8[0x0]
8000dcb0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dcb4:	58 18       	cp.w	r8,1
8000dcb6:	c0 91       	brne	8000dcc8 <udc_reqstd+0xec>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dcb8:	49 18       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dcba:	11 98       	ld.ub	r8,r8[0x1]
8000dcbc:	58 b8       	cp.w	r8,11
8000dcbe:	c0 51       	brne	8000dcc8 <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
8000dcc0:	f0 1f 00 19 	mcall	8000dd24 <udc_reqstd+0x148>
8000dcc4:	18 98       	mov	r8,r12
8000dcc6:	c1 88       	rjmp	8000dcf6 <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000dcc8:	48 d8       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dcca:	11 88       	ld.ub	r8,r8[0x0]
8000dccc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dcd0:	58 28       	cp.w	r8,2
8000dcd2:	c1 11       	brne	8000dcf4 <udc_reqstd+0x118>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dcd4:	48 a8       	lddpc	r8,8000dcfc <udc_reqstd+0x120>
8000dcd6:	11 98       	ld.ub	r8,r8[0x1]
8000dcd8:	58 18       	cp.w	r8,1
8000dcda:	c0 40       	breq	8000dce2 <udc_reqstd+0x106>
8000dcdc:	58 38       	cp.w	r8,3
8000dcde:	c0 60       	breq	8000dcea <udc_reqstd+0x10e>
8000dce0:	c0 a8       	rjmp	8000dcf4 <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
8000dce2:	f0 1f 00 12 	mcall	8000dd28 <udc_reqstd+0x14c>
8000dce6:	18 98       	mov	r8,r12
8000dce8:	c0 78       	rjmp	8000dcf6 <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
8000dcea:	f0 1f 00 11 	mcall	8000dd2c <udc_reqstd+0x150>
8000dcee:	18 98       	mov	r8,r12
8000dcf0:	c0 38       	rjmp	8000dcf6 <udc_reqstd+0x11a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000dcf2:	d7 03       	nop
				break;
			}
		}
#endif
	}
	return false;
8000dcf4:	30 08       	mov	r8,0
}
8000dcf6:	10 9c       	mov	r12,r8
8000dcf8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dcfc:	00 00       	add	r0,r0
8000dcfe:	0f a8       	ld.ub	r8,r7[0x2]
8000dd00:	80 00       	ld.sh	r0,r0[0x0]
8000dd02:	d3 b8       	*unknown*
8000dd04:	80 00       	ld.sh	r0,r0[0x0]
8000dd06:	d7 14       	*unknown*
8000dd08:	80 00       	ld.sh	r0,r0[0x0]
8000dd0a:	d9 70       	acall	0x25c
8000dd0c:	80 00       	ld.sh	r0,r0[0x0]
8000dd0e:	da bc       	*unknown*
8000dd10:	80 00       	ld.sh	r0,r0[0x0]
8000dd12:	d3 ec       	*unknown*
8000dd14:	80 00       	ld.sh	r0,r0[0x0]
8000dd16:	d5 ec       	*unknown*
8000dd18:	80 00       	ld.sh	r0,r0[0x0]
8000dd1a:	d4 44       	*unknown*
8000dd1c:	80 00       	ld.sh	r0,r0[0x0]
8000dd1e:	d4 c0       	acall	0x130
8000dd20:	80 00       	ld.sh	r0,r0[0x0]
8000dd22:	d9 a4       	*unknown*
8000dd24:	80 00       	ld.sh	r0,r0[0x0]
8000dd26:	db 68       	*unknown*
8000dd28:	80 00       	ld.sh	r0,r0[0x0]
8000dd2a:	d4 84       	*unknown*
8000dd2c:	80 00       	ld.sh	r0,r0[0x0]
8000dd2e:	d5 7c       	*unknown*

8000dd30 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
8000dd30:	eb cd 40 80 	pushm	r7,lr
8000dd34:	1a 97       	mov	r7,sp
8000dd36:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000dd38:	4a 58       	lddpc	r8,8000ddcc <udc_req_iface+0x9c>
8000dd3a:	11 88       	ld.ub	r8,r8[0x0]
8000dd3c:	58 08       	cp.w	r8,0
8000dd3e:	c0 31       	brne	8000dd44 <udc_req_iface+0x14>
		return false; // The device is not is configured state yet
8000dd40:	30 08       	mov	r8,0
8000dd42:	c4 08       	rjmp	8000ddc2 <udc_req_iface+0x92>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000dd44:	4a 38       	lddpc	r8,8000ddd0 <udc_req_iface+0xa0>
8000dd46:	90 28       	ld.sh	r8,r8[0x4]
8000dd48:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000dd4c:	4a 28       	lddpc	r8,8000ddd4 <udc_req_iface+0xa4>
8000dd4e:	70 08       	ld.w	r8,r8[0x0]
8000dd50:	70 08       	ld.w	r8,r8[0x0]
8000dd52:	11 c8       	ld.ub	r8,r8[0x4]
8000dd54:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000dd58:	f0 09 18 00 	cp.b	r9,r8
8000dd5c:	c0 33       	brcs	8000dd62 <udc_req_iface+0x32>
		return false;
8000dd5e:	30 08       	mov	r8,0
8000dd60:	c3 18       	rjmp	8000ddc2 <udc_req_iface+0x92>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000dd62:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dd66:	30 0b       	mov	r11,0
8000dd68:	10 9c       	mov	r12,r8
8000dd6a:	f0 1f 00 1c 	mcall	8000ddd8 <udc_req_iface+0xa8>
8000dd6e:	18 98       	mov	r8,r12
8000dd70:	ec 18 00 01 	eorl	r8,0x1
8000dd74:	5c 58       	castu.b	r8
8000dd76:	c0 30       	breq	8000dd7c <udc_req_iface+0x4c>
		return false;
8000dd78:	30 08       	mov	r8,0
8000dd7a:	c2 48       	rjmp	8000ddc2 <udc_req_iface+0x92>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000dd7c:	49 68       	lddpc	r8,8000ddd4 <udc_req_iface+0xa4>
8000dd7e:	70 08       	ld.w	r8,r8[0x0]
8000dd80:	70 19       	ld.w	r9,r8[0x4]
8000dd82:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dd86:	a3 68       	lsl	r8,0x2
8000dd88:	f2 08 00 08 	add	r8,r9,r8
8000dd8c:	70 08       	ld.w	r8,r8[0x0]
8000dd8e:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000dd92:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dd96:	70 38       	ld.w	r8,r8[0xc]
8000dd98:	5d 18       	icall	r8
8000dd9a:	18 98       	mov	r8,r12
8000dd9c:	10 99       	mov	r9,r8
8000dd9e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dda2:	12 9b       	mov	r11,r9
8000dda4:	10 9c       	mov	r12,r8
8000dda6:	f0 1f 00 0d 	mcall	8000ddd8 <udc_req_iface+0xa8>
8000ddaa:	18 98       	mov	r8,r12
8000ddac:	ec 18 00 01 	eorl	r8,0x1
8000ddb0:	5c 58       	castu.b	r8
8000ddb2:	c0 30       	breq	8000ddb8 <udc_req_iface+0x88>
		return false;
8000ddb4:	30 08       	mov	r8,0
8000ddb6:	c0 68       	rjmp	8000ddc2 <udc_req_iface+0x92>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
8000ddb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ddbc:	70 28       	ld.w	r8,r8[0x8]
8000ddbe:	5d 18       	icall	r8
8000ddc0:	18 98       	mov	r8,r12
}
8000ddc2:	10 9c       	mov	r12,r8
8000ddc4:	2f ed       	sub	sp,-8
8000ddc6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ddca:	00 00       	add	r0,r0
8000ddcc:	00 00       	add	r0,r0
8000ddce:	08 0e       	add	lr,r4
8000ddd0:	00 00       	add	r0,r0
8000ddd2:	0f a8       	ld.ub	r8,r7[0x2]
8000ddd4:	00 00       	add	r0,r0
8000ddd6:	08 10       	sub	r0,r4
8000ddd8:	80 00       	ld.sh	r0,r0[0x0]
8000ddda:	d0 94       	*unknown*

8000dddc <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
8000dddc:	eb cd 40 80 	pushm	r7,lr
8000dde0:	1a 97       	mov	r7,sp
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
8000dde2:	49 a9       	lddpc	r9,8000de48 <udc_process_setup+0x6c>
8000dde4:	30 08       	mov	r8,0
8000dde6:	b2 68       	st.h	r9[0xc],r8
	udd_g_ctrlreq.callback = NULL;
8000dde8:	49 88       	lddpc	r8,8000de48 <udc_process_setup+0x6c>
8000ddea:	30 09       	mov	r9,0
8000ddec:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000ddee:	49 78       	lddpc	r8,8000de48 <udc_process_setup+0x6c>
8000ddf0:	30 09       	mov	r9,0
8000ddf2:	91 59       	st.w	r8[0x14],r9

	if (Udd_setup_is_in()) {
8000ddf4:	49 58       	lddpc	r8,8000de48 <udc_process_setup+0x6c>
8000ddf6:	11 88       	ld.ub	r8,r8[0x0]
8000ddf8:	10 99       	mov	r9,r8
8000ddfa:	30 08       	mov	r8,0
8000ddfc:	f0 09 18 00 	cp.b	r9,r8
8000de00:	c0 74       	brge	8000de0e <udc_process_setup+0x32>
		if (udd_g_ctrlreq.req.wLength == 0) {
8000de02:	49 28       	lddpc	r8,8000de48 <udc_process_setup+0x6c>
8000de04:	90 38       	ld.sh	r8,r8[0x6]
8000de06:	58 08       	cp.w	r8,0
8000de08:	c0 31       	brne	8000de0e <udc_process_setup+0x32>
			return false; // Error from USB host
8000de0a:	30 08       	mov	r8,0
8000de0c:	c1 b8       	rjmp	8000de42 <udc_process_setup+0x66>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
8000de0e:	48 f8       	lddpc	r8,8000de48 <udc_process_setup+0x6c>
8000de10:	11 88       	ld.ub	r8,r8[0x0]
8000de12:	e2 18 00 60 	andl	r8,0x60,COH
8000de16:	c0 81       	brne	8000de26 <udc_process_setup+0x4a>
		if (udc_reqstd()) {
8000de18:	f0 1f 00 0d 	mcall	8000de4c <udc_process_setup+0x70>
8000de1c:	18 98       	mov	r8,r12
8000de1e:	58 08       	cp.w	r8,0
8000de20:	c0 30       	breq	8000de26 <udc_process_setup+0x4a>
			return true;
8000de22:	30 18       	mov	r8,1
8000de24:	c0 f8       	rjmp	8000de42 <udc_process_setup+0x66>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
8000de26:	48 98       	lddpc	r8,8000de48 <udc_process_setup+0x6c>
8000de28:	11 88       	ld.ub	r8,r8[0x0]
8000de2a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de2e:	58 18       	cp.w	r8,1
8000de30:	c0 81       	brne	8000de40 <udc_process_setup+0x64>
		if (udc_req_iface()) {
8000de32:	f0 1f 00 08 	mcall	8000de50 <udc_process_setup+0x74>
8000de36:	18 98       	mov	r8,r12
8000de38:	58 08       	cp.w	r8,0
8000de3a:	c0 30       	breq	8000de40 <udc_process_setup+0x64>
			return true;
8000de3c:	30 18       	mov	r8,1
8000de3e:	c0 28       	rjmp	8000de42 <udc_process_setup+0x66>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
8000de40:	30 08       	mov	r8,0
#endif
}
8000de42:	10 9c       	mov	r12,r8
8000de44:	e3 cd 80 80 	ldm	sp++,r7,pc
8000de48:	00 00       	add	r0,r0
8000de4a:	0f a8       	ld.ub	r8,r7[0x2]
8000de4c:	80 00       	ld.sh	r0,r0[0x0]
8000de4e:	db dc       	*unknown*
8000de50:	80 00       	ld.sh	r0,r0[0x0]
8000de52:	dd 30       	acall	0x34c

8000de54 <pm_sleep>:
#else
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
8000de54:	eb cd 40 80 	pushm	r7,lr
8000de58:	1a 97       	mov	r7,sp
8000de5a:	20 1d       	sub	sp,4
8000de5c:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (sleep_mode) {
8000de60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de64:	58 58       	cp.w	r8,5
8000de66:	c4 30       	breq	8000deec <pm_sleep+0x98>
8000de68:	e0 89 00 10 	brgt	8000de88 <pm_sleep+0x34>
8000de6c:	58 28       	cp.w	r8,2
8000de6e:	c2 d0       	breq	8000dec8 <pm_sleep+0x74>
8000de70:	e0 89 00 07 	brgt	8000de7e <pm_sleep+0x2a>
8000de74:	58 08       	cp.w	r8,0
8000de76:	c1 d0       	breq	8000deb0 <pm_sleep+0x5c>
8000de78:	58 18       	cp.w	r8,1
8000de7a:	c2 10       	breq	8000debc <pm_sleep+0x68>
8000de7c:	c3 d8       	rjmp	8000def6 <pm_sleep+0xa2>
8000de7e:	58 38       	cp.w	r8,3
8000de80:	c2 a0       	breq	8000ded4 <pm_sleep+0x80>
8000de82:	58 48       	cp.w	r8,4
8000de84:	c2 e0       	breq	8000dee0 <pm_sleep+0x8c>
8000de86:	c3 88       	rjmp	8000def6 <pm_sleep+0xa2>
8000de88:	e0 48 00 82 	cp.w	r8,130
8000de8c:	c2 10       	breq	8000dece <pm_sleep+0x7a>
8000de8e:	e0 89 00 09 	brgt	8000dea0 <pm_sleep+0x4c>
8000de92:	e0 48 00 80 	cp.w	r8,128
8000de96:	c1 00       	breq	8000deb6 <pm_sleep+0x62>
8000de98:	e0 48 00 81 	cp.w	r8,129
8000de9c:	c1 30       	breq	8000dec2 <pm_sleep+0x6e>
8000de9e:	c2 c8       	rjmp	8000def6 <pm_sleep+0xa2>
8000dea0:	e0 48 00 84 	cp.w	r8,132
8000dea4:	c2 10       	breq	8000dee6 <pm_sleep+0x92>
8000dea6:	c1 a5       	brlt	8000deda <pm_sleep+0x86>
8000dea8:	e0 48 00 85 	cp.w	r8,133
8000deac:	c2 30       	breq	8000def2 <pm_sleep+0x9e>
8000deae:	c2 48       	rjmp	8000def6 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
8000deb0:	e9 b0 00 00 	sleep	0x0
		break;
8000deb4:	c2 18       	rjmp	8000def6 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
8000deb6:	e9 b0 00 80 	sleep	0x80
		break;
8000deba:	c1 e8       	rjmp	8000def6 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
8000debc:	e9 b0 00 01 	sleep	0x1
		break;
8000dec0:	c1 b8       	rjmp	8000def6 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
8000dec2:	e9 b0 00 81 	sleep	0x81
		break;
8000dec6:	c1 88       	rjmp	8000def6 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
8000dec8:	e9 b0 00 02 	sleep	0x2
		break;
8000decc:	c1 58       	rjmp	8000def6 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
8000dece:	e9 b0 00 82 	sleep	0x82
		break;
8000ded2:	c1 28       	rjmp	8000def6 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
8000ded4:	e9 b0 00 03 	sleep	0x3
		break;
8000ded8:	c0 f8       	rjmp	8000def6 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
8000deda:	e9 b0 00 83 	sleep	0x83
		break;
8000dede:	c0 c8       	rjmp	8000def6 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
8000dee0:	e9 b0 00 04 	sleep	0x4
		break;
8000dee4:	c0 98       	rjmp	8000def6 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000dee6:	e9 b0 00 84 	sleep	0x84
		break;
8000deea:	c0 68       	rjmp	8000def6 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
8000deec:	e9 b0 00 05 	sleep	0x5
		break;
8000def0:	c0 38       	rjmp	8000def6 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
8000def2:	e9 b0 00 85 	sleep	0x85
		break;
#endif
	default:
		break;
	}
}
8000def6:	2f fd       	sub	sp,-4
8000def8:	e3 cd 80 80 	ldm	sp++,r7,pc

8000defc <sleepmgr_sleep>:
//! @}



static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
8000defc:	eb cd 40 80 	pushm	r7,lr
8000df00:	1a 97       	mov	r7,sp
8000df02:	20 1d       	sub	sp,4
8000df04:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
8000df08:	d3 03       	ssrf	0x10

	// Atomically enable the global interrupts and enter the sleep mode.
	pm_sleep(AVR32_PM_SMODE_GMCLEAR_MASK | (sleep_mode-1));
8000df0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df0e:	20 18       	sub	r8,1
8000df10:	a7 b8       	sbr	r8,0x7
8000df12:	10 9c       	mov	r12,r8
8000df14:	f0 1f 00 03 	mcall	8000df20 <sleepmgr_sleep+0x24>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
8000df18:	2f fd       	sub	sp,-4
8000df1a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df1e:	00 00       	add	r0,r0
8000df20:	80 00       	ld.sh	r0,r0[0x0]
8000df22:	de 54       	*unknown*

8000df24 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8000df24:	eb cd 40 80 	pushm	r7,lr
8000df28:	1a 97       	mov	r7,sp
8000df2a:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000df2c:	30 08       	mov	r8,0
8000df2e:	ef 68 ff ff 	st.b	r7[-1],r8
8000df32:	c0 c8       	rjmp	8000df4a <sleepmgr_init+0x26>
		sleepmgr_locks[i] = 0;
8000df34:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000df38:	48 ba       	lddpc	r10,8000df64 <sleepmgr_init+0x40>
8000df3a:	30 08       	mov	r8,0
8000df3c:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000df40:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000df44:	2f f8       	sub	r8,-1
8000df46:	ef 68 ff ff 	st.b	r7[-1],r8
8000df4a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000df4e:	30 58       	mov	r8,5
8000df50:	f0 09 18 00 	cp.b	r9,r8
8000df54:	fe 98 ff f0 	brls	8000df34 <sleepmgr_init+0x10>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8000df58:	48 39       	lddpc	r9,8000df64 <sleepmgr_init+0x40>
8000df5a:	30 18       	mov	r8,1
8000df5c:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000df5e:	2f fd       	sub	sp,-4
8000df60:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df64:	00 00       	add	r0,r0
8000df66:	0f c0       	ld.ub	r0,r7[0x4]

8000df68 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
8000df68:	eb cd 40 80 	pushm	r7,lr
8000df6c:	1a 97       	mov	r7,sp
8000df6e:	20 2d       	sub	sp,8
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
8000df70:	30 08       	mov	r8,0
8000df72:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
8000df76:	48 d8       	lddpc	r8,8000dfa8 <sleepmgr_get_sleep_mode+0x40>
8000df78:	ef 48 ff fc 	st.w	r7[-4],r8

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000df7c:	c0 b8       	rjmp	8000df92 <sleepmgr_get_sleep_mode+0x2a>
		lock_ptr++;
8000df7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df82:	2f f8       	sub	r8,-1
8000df84:	ef 48 ff fc 	st.w	r7[-4],r8
		sleep_mode++;
8000df88:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000df8c:	2f f8       	sub	r8,-1
8000df8e:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000df92:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df96:	11 88       	ld.ub	r8,r8[0x0]
8000df98:	58 08       	cp.w	r8,0
8000df9a:	cf 20       	breq	8000df7e <sleepmgr_get_sleep_mode+0x16>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
8000df9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000dfa0:	10 9c       	mov	r12,r8
8000dfa2:	2f ed       	sub	sp,-8
8000dfa4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dfa8:	00 00       	add	r0,r0
8000dfaa:	0f c0       	ld.ub	r0,r7[0x4]

8000dfac <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
8000dfac:	eb cd 40 80 	pushm	r7,lr
8000dfb0:	1a 97       	mov	r7,sp
8000dfb2:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
8000dfb4:	d3 03       	ssrf	0x10

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
8000dfb6:	f0 1f 00 0a 	mcall	8000dfdc <sleepmgr_enter_sleep+0x30>
8000dfba:	18 98       	mov	r8,r12
8000dfbc:	ef 48 ff fc 	st.w	r7[-4],r8
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
8000dfc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dfc4:	58 08       	cp.w	r8,0
8000dfc6:	c0 31       	brne	8000dfcc <sleepmgr_enter_sleep+0x20>
		cpu_irq_enable();
8000dfc8:	d5 03       	csrf	0x10
		return;
8000dfca:	c0 58       	rjmp	8000dfd4 <sleepmgr_enter_sleep+0x28>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
8000dfcc:	ee fc ff fc 	ld.w	r12,r7[-4]
8000dfd0:	f0 1f 00 04 	mcall	8000dfe0 <sleepmgr_enter_sleep+0x34>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000dfd4:	2f fd       	sub	sp,-4
8000dfd6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dfda:	00 00       	add	r0,r0
8000dfdc:	80 00       	ld.sh	r0,r0[0x0]
8000dfde:	df 68       	*unknown*
8000dfe0:	80 00       	ld.sh	r0,r0[0x0]
8000dfe2:	de fc       	*unknown*

8000dfe4 <udc_include_vbus_monitoring>:
 *        // Start USB \n
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
8000dfe4:	eb cd 40 80 	pushm	r7,lr
8000dfe8:	1a 97       	mov	r7,sp
	return udd_include_vbus_monitoring();
8000dfea:	f0 1f 00 04 	mcall	8000dff8 <udc_include_vbus_monitoring+0x14>
8000dfee:	18 98       	mov	r8,r12
}
8000dff0:	10 9c       	mov	r12,r8
8000dff2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dff6:	00 00       	add	r0,r0
8000dff8:	80 00       	ld.sh	r0,r0[0x0]
8000dffa:	9a d4       	ld.uh	r4,sp[0xa]

8000dffc <udc_attach>:
 * \warning If a VBus control is included in driver,
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
8000dffc:	eb cd 40 80 	pushm	r7,lr
8000e000:	1a 97       	mov	r7,sp
	udd_attach();
8000e002:	f0 1f 00 03 	mcall	8000e00c <udc_attach+0x10>
}
8000e006:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e00a:	00 00       	add	r0,r0
8000e00c:	80 00       	ld.sh	r0,r0[0x0]
8000e00e:	9c 04       	ld.sh	r4,lr[0x0]

8000e010 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
8000e010:	eb cd 40 80 	pushm	r7,lr
8000e014:	1a 97       	mov	r7,sp
	udd_detach();
8000e016:	f0 1f 00 03 	mcall	8000e020 <udc_detach+0x10>
}
8000e01a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e01e:	00 00       	add	r0,r0
8000e020:	80 00       	ld.sh	r0,r0[0x0]
8000e022:	9c b0       	ld.uh	r0,lr[0x6]

8000e024 <main>:
static bool main_b_msc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
8000e024:	eb cd 40 80 	pushm	r7,lr
8000e028:	1a 97       	mov	r7,sp
8000e02a:	20 1d       	sub	sp,4
	//uint8_t i = 0;
	uint16_t temp_crc;
	irq_initialize_vectors();
8000e02c:	f0 1f 00 34 	mcall	8000e0fc <main+0xd8>
	cpu_irq_enable();
8000e030:	d5 03       	csrf	0x10

	// Initialize the sleep manager
	sleepmgr_init();
8000e032:	f0 1f 00 34 	mcall	8000e100 <main+0xdc>

	sysclk_init();
8000e036:	f0 1f 00 34 	mcall	8000e104 <main+0xe0>
	board_init();
8000e03a:	f0 1f 00 34 	mcall	8000e108 <main+0xe4>

	ui_init();
8000e03e:	f0 1f 00 34 	mcall	8000e10c <main+0xe8>
	ui_powerdown();
8000e042:	f0 1f 00 34 	mcall	8000e110 <main+0xec>

	memories_initialization();
8000e046:	f0 1f 00 34 	mcall	8000e114 <main+0xf0>

	// Initialize LCD
	et024006_Init( FOSC0, FOSC0 );
8000e04a:	e0 6b 1b 00 	mov	r11,6912
8000e04e:	ea 1b 00 b7 	orh	r11,0xb7
8000e052:	e0 6c 1b 00 	mov	r12,6912
8000e056:	ea 1c 00 b7 	orh	r12,0xb7
8000e05a:	f0 1f 00 30 	mcall	8000e118 <main+0xf4>
	gpio_set_gpio_pin(ET024006DHU_BL_PIN);
8000e05e:	30 9c       	mov	r12,9
8000e060:	f0 1f 00 2f 	mcall	8000e11c <main+0xf8>
	
	//et024006_PrintConsole("Welcome Eric", BLACK, -1);
	//clear_lcd
	et024006_DrawFilledRect(1, 1, ET024006_WIDTH, ET024006_HEIGHT, BLACK);
8000e064:	30 08       	mov	r8,0
8000e066:	e0 69 00 f0 	mov	r9,240
8000e06a:	e0 6a 01 40 	mov	r10,320
8000e06e:	30 1b       	mov	r11,1
8000e070:	30 1c       	mov	r12,1
8000e072:	f0 1f 00 2c 	mcall	8000e120 <main+0xfc>
	
	// Initialize AES module
	aes_task();
8000e076:	f0 1f 00 2c 	mcall	8000e124 <main+0x100>

	// Start TC
	tc_task();
8000e07a:	f0 1f 00 2c 	mcall	8000e128 <main+0x104>

	Init_System_Status();
8000e07e:	f0 1f 00 2c 	mcall	8000e12c <main+0x108>
	// Initialize crc for fast calculations
	crcInit();
8000e082:	f0 1f 00 2c 	mcall	8000e130 <main+0x10c>
		
	// Read the stored values from the flash
	Load_stored_values();
8000e086:	f0 1f 00 2c 	mcall	8000e134 <main+0x110>
	//i = sizeof(stored_values_t) - sizeof(uint16_t);
	temp_crc = crcFast((const uint8_t *)&Stored_values_ram, 192);
8000e08a:	4a c8       	lddpc	r8,8000e138 <main+0x114>
8000e08c:	e0 6b 00 c0 	mov	r11,192
8000e090:	10 9c       	mov	r12,r8
8000e092:	f0 1f 00 2b 	mcall	8000e13c <main+0x118>
8000e096:	18 98       	mov	r8,r12
8000e098:	5c 88       	casts.h	r8
8000e09a:	ef 58 ff fe 	st.h	r7[-2],r8
	//temp_crc1 = crcFast("123456789", 9);
	if (temp_crc == Stored_values_ram.block_crc)
8000e09e:	4a 78       	lddpc	r8,8000e138 <main+0x114>
8000e0a0:	f1 08 00 c0 	ld.sh	r8,r8[192]
8000e0a4:	5c 88       	casts.h	r8
8000e0a6:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000e0aa:	f0 09 19 00 	cp.h	r9,r8
8000e0ae:	c0 71       	brne	8000e0bc <main+0x98>
	{
		stSystemStatus.stored_value_crc_status = 1;
8000e0b0:	4a 49       	lddpc	r9,8000e140 <main+0x11c>
8000e0b2:	72 08       	ld.w	r8,r9[0x0]
8000e0b4:	30 1a       	mov	r10,1
8000e0b6:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000e0ba:	93 08       	st.w	r9[0x0],r8
	}
	//Stored_values_ram.salt[5] = 0x4d68ab23;
	
	//Update_stored_values();
	// Start USB stack to authorize VBus monitoring
	udc_start();
8000e0bc:	f0 1f 00 22 	mcall	8000e144 <main+0x120>

	if (!udc_include_vbus_monitoring()) {
8000e0c0:	f0 1f 00 22 	mcall	8000e148 <main+0x124>
8000e0c4:	18 98       	mov	r8,r12
8000e0c6:	ec 18 00 01 	eorl	r8,0x1
8000e0ca:	5c 58       	castu.b	r8
8000e0cc:	c0 60       	breq	8000e0d8 <main+0xb4>
		// VBUS monitoring is not available on this product
		// thereby VBUS has to be considered as present
		main_vbus_action(true);
8000e0ce:	30 1c       	mov	r12,1
8000e0d0:	f0 1f 00 1f 	mcall	8000e14c <main+0x128>
8000e0d4:	c0 28       	rjmp	8000e0d8 <main+0xb4>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e0d6:	d7 03       	nop

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true)
	{
		if (main_b_msc_enable)
8000e0d8:	49 e8       	lddpc	r8,8000e150 <main+0x12c>
8000e0da:	11 88       	ld.ub	r8,r8[0x0]
8000e0dc:	58 08       	cp.w	r8,0
8000e0de:	c0 b0       	breq	8000e0f4 <main+0xd0>
		{
			if (!udi_msc_process_trans())
8000e0e0:	f0 1f 00 1d 	mcall	8000e154 <main+0x130>
8000e0e4:	18 98       	mov	r8,r12
8000e0e6:	ec 18 00 01 	eorl	r8,0x1
8000e0ea:	5c 58       	castu.b	r8
8000e0ec:	cf 50       	breq	8000e0d6 <main+0xb2>
			{
				sleepmgr_enter_sleep();
8000e0ee:	f0 1f 00 1b 	mcall	8000e158 <main+0x134>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e0f2:	cf 3b       	rjmp	8000e0d8 <main+0xb4>
				sleepmgr_enter_sleep();
			}
		}
		else
		{
			sleepmgr_enter_sleep();
8000e0f4:	f0 1f 00 19 	mcall	8000e158 <main+0x134>
		}
		//main_process_mode();
	}
8000e0f8:	cf 0b       	rjmp	8000e0d8 <main+0xb4>
8000e0fa:	00 00       	add	r0,r0
8000e0fc:	80 00       	ld.sh	r0,r0[0x0]
8000e0fe:	8e 0c       	ld.sh	r12,r7[0x0]
8000e100:	80 00       	ld.sh	r0,r0[0x0]
8000e102:	df 24       	*unknown*
8000e104:	80 00       	ld.sh	r0,r0[0x0]
8000e106:	be d0       	st.b	pc[0x5],r0
8000e108:	80 00       	ld.sh	r0,r0[0x0]
8000e10a:	48 98       	lddpc	r8,8000e12c <main+0x108>
8000e10c:	80 00       	ld.sh	r0,r0[0x0]
8000e10e:	c1 58       	rjmp	8000e138 <main+0x114>
8000e110:	80 00       	ld.sh	r0,r0[0x0]
8000e112:	c1 78       	rjmp	8000e140 <main+0x11c>
8000e114:	80 00       	ld.sh	r0,r0[0x0]
8000e116:	e2 d4 80 00 	satsub.w	r4,r1,-32768
8000e11a:	4a 80       	lddpc	r0,8000e1b8 <main_sof_action>
8000e11c:	80 00       	ld.sh	r0,r0[0x0]
8000e11e:	8c 46       	ld.sh	r6,r6[0x8]
8000e120:	80 00       	ld.sh	r0,r0[0x0]
8000e122:	4a f8       	lddpc	r8,8000e1dc <main_sof_action+0x24>
8000e124:	80 00       	ld.sh	r0,r0[0x0]
8000e126:	45 d0       	lddsp	r0,sp[0x174]
8000e128:	80 00       	ld.sh	r0,r0[0x0]
8000e12a:	45 38       	lddsp	r8,sp[0x14c]
8000e12c:	80 00       	ld.sh	r0,r0[0x0]
8000e12e:	35 28       	mov	r8,82
8000e130:	80 00       	ld.sh	r0,r0[0x0]
8000e132:	20 08       	sub	r8,0
8000e134:	80 00       	ld.sh	r0,r0[0x0]
8000e136:	30 14       	mov	r4,1
8000e138:	00 00       	add	r0,r0
8000e13a:	0a 20       	rsub	r0,r5
8000e13c:	80 00       	ld.sh	r0,r0[0x0]
8000e13e:	20 9c       	sub	r12,9
8000e140:	00 00       	add	r0,r0
8000e142:	0b 88       	ld.ub	r8,r5[0x0]
8000e144:	80 00       	ld.sh	r0,r0[0x0]
8000e146:	d2 d0       	acall	0xb4
8000e148:	80 00       	ld.sh	r0,r0[0x0]
8000e14a:	df e4       	*unknown*
8000e14c:	80 00       	ld.sh	r0,r0[0x0]
8000e14e:	e1 5c 00 00 	st.h	r0[0],r12
8000e152:	08 1c       	sub	r12,r4
8000e154:	80 00       	ld.sh	r0,r0[0x0]
8000e156:	cd cc       	rcall	8000e30e <memories_initialization+0x3a>
8000e158:	80 00       	ld.sh	r0,r0[0x0]
8000e15a:	df ac       	*unknown*

8000e15c <main_vbus_action>:
}

void main_vbus_action(bool b_high)
{
8000e15c:	eb cd 40 80 	pushm	r7,lr
8000e160:	1a 97       	mov	r7,sp
8000e162:	20 1d       	sub	sp,4
8000e164:	18 98       	mov	r8,r12
8000e166:	ef 68 ff fc 	st.b	r7[-4],r8
	if (b_high) {
8000e16a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000e16e:	30 08       	mov	r8,0
8000e170:	f0 09 18 00 	cp.b	r9,r8
8000e174:	c0 40       	breq	8000e17c <main_vbus_action+0x20>
		// Attach USB Device
		udc_attach();
8000e176:	f0 1f 00 05 	mcall	8000e188 <main_vbus_action+0x2c>
8000e17a:	c0 38       	rjmp	8000e180 <main_vbus_action+0x24>
	} else {
		// VBUS not present
		udc_detach();
8000e17c:	f0 1f 00 04 	mcall	8000e18c <main_vbus_action+0x30>
	}
}
8000e180:	2f fd       	sub	sp,-4
8000e182:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e186:	00 00       	add	r0,r0
8000e188:	80 00       	ld.sh	r0,r0[0x0]
8000e18a:	df fc       	*unknown*
8000e18c:	80 00       	ld.sh	r0,r0[0x0]
8000e18e:	e0 10 eb cd 	andl	r0,0xebcd

8000e190 <main_suspend_action>:

void main_suspend_action(void)
{
8000e190:	eb cd 40 80 	pushm	r7,lr
8000e194:	1a 97       	mov	r7,sp
	ui_powerdown();
8000e196:	f0 1f 00 03 	mcall	8000e1a0 <main_suspend_action+0x10>
}
8000e19a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e19e:	00 00       	add	r0,r0
8000e1a0:	80 00       	ld.sh	r0,r0[0x0]
8000e1a2:	c1 78       	rjmp	8000e1d0 <main_sof_action+0x18>

8000e1a4 <main_resume_action>:

void main_resume_action(void)
{
8000e1a4:	eb cd 40 80 	pushm	r7,lr
8000e1a8:	1a 97       	mov	r7,sp
	ui_wakeup();
8000e1aa:	f0 1f 00 03 	mcall	8000e1b4 <main_resume_action+0x10>
}
8000e1ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e1b2:	00 00       	add	r0,r0
8000e1b4:	80 00       	ld.sh	r0,r0[0x0]
8000e1b6:	c1 94       	brge	8000e1e8 <main_sof_action+0x30>

8000e1b8 <main_sof_action>:

void main_sof_action(void)
{
8000e1b8:	eb cd 40 80 	pushm	r7,lr
8000e1bc:	1a 97       	mov	r7,sp
	if (!main_b_msc_enable)
8000e1be:	48 a8       	lddpc	r8,8000e1e4 <main_sof_action+0x2c>
8000e1c0:	11 88       	ld.ub	r8,r8[0x0]
8000e1c2:	ec 18 00 01 	eorl	r8,0x1
8000e1c6:	5c 58       	castu.b	r8
8000e1c8:	c0 a1       	brne	8000e1dc <main_sof_action+0x24>
		return;
	ui_process(udd_get_frame_number());
8000e1ca:	f0 1f 00 08 	mcall	8000e1e8 <main_sof_action+0x30>
8000e1ce:	18 98       	mov	r8,r12
8000e1d0:	5c 88       	casts.h	r8
8000e1d2:	5c 78       	castu.h	r8
8000e1d4:	10 9c       	mov	r12,r8
8000e1d6:	f0 1f 00 06 	mcall	8000e1ec <main_sof_action+0x34>
8000e1da:	c0 28       	rjmp	8000e1de <main_sof_action+0x26>
}

void main_sof_action(void)
{
	if (!main_b_msc_enable)
		return;
8000e1dc:	d7 03       	nop
	ui_process(udd_get_frame_number());
}
8000e1de:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e1e2:	00 00       	add	r0,r0
8000e1e4:	00 00       	add	r0,r0
8000e1e6:	08 1c       	sub	r12,r4
8000e1e8:	80 00       	ld.sh	r0,r0[0x0]
8000e1ea:	9d 72       	st.w	lr[0x1c],r2
8000e1ec:	80 00       	ld.sh	r0,r0[0x0]
8000e1ee:	c1 f8       	rjmp	8000e22c <osc_get_rate+0x10>

8000e1f0 <main_msc_enable>:

bool main_msc_enable(void)
{
8000e1f0:	eb cd 40 80 	pushm	r7,lr
8000e1f4:	1a 97       	mov	r7,sp
	main_b_msc_enable = true;
8000e1f6:	48 49       	lddpc	r9,8000e204 <main_msc_enable+0x14>
8000e1f8:	30 18       	mov	r8,1
8000e1fa:	b2 88       	st.b	r9[0x0],r8
	return true;
8000e1fc:	30 18       	mov	r8,1
}
8000e1fe:	10 9c       	mov	r12,r8
8000e200:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e204:	00 00       	add	r0,r0
8000e206:	08 1c       	sub	r12,r4

8000e208 <main_msc_disable>:

void main_msc_disable(void)
{
8000e208:	eb cd 40 80 	pushm	r7,lr
8000e20c:	1a 97       	mov	r7,sp
	main_b_msc_enable = false;
8000e20e:	48 39       	lddpc	r9,8000e218 <main_msc_disable+0x10>
8000e210:	30 08       	mov	r8,0
8000e212:	b2 88       	st.b	r9[0x0],r8
}
8000e214:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e218:	00 00       	add	r0,r0
8000e21a:	08 1c       	sub	r12,r4

8000e21c <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
8000e21c:	eb cd 40 80 	pushm	r7,lr
8000e220:	1a 97       	mov	r7,sp
8000e222:	20 1d       	sub	sp,4
8000e224:	18 98       	mov	r8,r12
8000e226:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000e22a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000e22e:	58 18       	cp.w	r8,1
8000e230:	c0 a0       	breq	8000e244 <osc_get_rate+0x28>
8000e232:	58 28       	cp.w	r8,2
8000e234:	c0 d0       	breq	8000e24e <osc_get_rate+0x32>
8000e236:	58 08       	cp.w	r8,0
8000e238:	c0 e1       	brne	8000e254 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000e23a:	e0 68 1b 00 	mov	r8,6912
8000e23e:	ea 18 00 b7 	orh	r8,0xb7
8000e242:	c0 a8       	rjmp	8000e256 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000e244:	e0 68 44 00 	mov	r8,17408
8000e248:	ea 18 00 ac 	orh	r8,0xac
8000e24c:	c0 58       	rjmp	8000e256 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000e24e:	e0 68 80 00 	mov	r8,32768
8000e252:	c0 28       	rjmp	8000e256 <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000e254:	30 08       	mov	r8,0
	}
}
8000e256:	10 9c       	mov	r12,r8
8000e258:	2f fd       	sub	sp,-4
8000e25a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e25e:	d7 03       	nop

8000e260 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000e260:	eb cd 40 80 	pushm	r7,lr
8000e264:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000e266:	30 0c       	mov	r12,0
8000e268:	f0 1f 00 06 	mcall	8000e280 <sysclk_get_main_hz+0x20>
8000e26c:	18 99       	mov	r9,r12
8000e26e:	12 98       	mov	r8,r9
8000e270:	a3 68       	lsl	r8,0x2
8000e272:	12 08       	add	r8,r9
8000e274:	a1 78       	lsl	r8,0x1
8000e276:	12 08       	add	r8,r9
8000e278:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000e27a:	10 9c       	mov	r12,r8
8000e27c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e280:	80 00       	ld.sh	r0,r0[0x0]
8000e282:	e2 1c eb cd 	andl	r12,0xebcd,COH

8000e284 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000e284:	eb cd 40 80 	pushm	r7,lr
8000e288:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000e28a:	f0 1f 00 04 	mcall	8000e298 <sysclk_get_cpu_hz+0x14>
8000e28e:	18 98       	mov	r8,r12
}
8000e290:	10 9c       	mov	r12,r8
8000e292:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e296:	00 00       	add	r0,r0
8000e298:	80 00       	ld.sh	r0,r0[0x0]
8000e29a:	e2 60 eb cd 	mov	r0,191437

8000e29c <sysclk_get_pbb_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus B clock
 *
 * \return Frequency of the Peripheral Bus B clock, in Hz.
 */
static inline uint32_t sysclk_get_pbb_hz(void)
{
8000e29c:	eb cd 40 80 	pushm	r7,lr
8000e2a0:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBB_DIV;
8000e2a2:	f0 1f 00 04 	mcall	8000e2b0 <sysclk_get_pbb_hz+0x14>
8000e2a6:	18 98       	mov	r8,r12
}
8000e2a8:	10 9c       	mov	r12,r8
8000e2aa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e2ae:	00 00       	add	r0,r0
8000e2b0:	80 00       	ld.sh	r0,r0[0x0]
8000e2b2:	e2 60 eb cd 	mov	r0,191437

8000e2b4 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000e2b4:	eb cd 40 80 	pushm	r7,lr
8000e2b8:	1a 97       	mov	r7,sp
8000e2ba:	20 1d       	sub	sp,4
8000e2bc:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000e2c0:	ee fb ff fc 	ld.w	r11,r7[-4]
8000e2c4:	30 1c       	mov	r12,1
8000e2c6:	f0 1f 00 03 	mcall	8000e2d0 <sysclk_enable_hsb_module+0x1c>
}
8000e2ca:	2f fd       	sub	sp,-4
8000e2cc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e2d0:	80 00       	ld.sh	r0,r0[0x0]
8000e2d2:	bd a8       	sbr	r8,0x1c

8000e2d4 <memories_initialization>:
# include "spi.h"
# include "conf_sd_mmc_spi.h"
#endif

void memories_initialization(void)
{
8000e2d4:	eb cd 40 c0 	pushm	r6-r7,lr
8000e2d8:	1a 97       	mov	r7,sp
8000e2da:	20 2d       	sub	sp,8
	union {
		unsigned long scfg;
		avr32_hmatrix_scfg_t SCFG;
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);
8000e2dc:	30 0c       	mov	r12,0
8000e2de:	f0 1f 00 42 	mcall	8000e3e4 <memories_initialization+0x110>

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
8000e2e2:	fe 68 10 00 	mov	r8,-126976
8000e2e6:	71 08       	ld.w	r8,r8[0x40]
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e2e8:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e2ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e2f0:	30 19       	mov	r9,1
8000e2f2:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e2f6:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000e2fa:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e2fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000e302:	f1 49 00 40 	st.w	r8[64],r9
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
8000e306:	fe 68 10 00 	mov	r8,-126976
8000e30a:	71 48       	ld.w	r8,r8[0x50]
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e30c:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e310:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e314:	30 19       	mov	r9,1
8000e316:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e31a:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000e31e:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e322:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000e326:	f1 49 00 50 	st.w	r8[80],r9
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
8000e32a:	fe 68 10 00 	mov	r8,-126976
8000e32e:	71 68       	ld.w	r8,r8[0x58]
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e330:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e334:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e338:	30 19       	mov	r9,1
8000e33a:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e33e:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000e342:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e346:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000e34a:	f1 49 00 58 	st.w	r8[88],r9
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
8000e34e:	fe 68 10 00 	mov	r8,-126976
8000e352:	70 68       	ld.w	r8,r8[0x18]
		unsigned long                 mcfg;
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
8000e354:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
8000e358:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e35c:	30 09       	mov	r9,0
8000e35e:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000e362:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000e366:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_mcfg.mcfg;
8000e36a:	ee f9 ff f8 	ld.w	r9,r7[-8]
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000e36e:	91 69       	st.w	r8[0x18],r9
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
8000e370:	fe 68 10 00 	mov	r8,-126976
8000e374:	71 58       	ld.w	r8,r8[0x54]
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
8000e376:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
8000e37a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e37e:	30 69       	mov	r9,6
8000e380:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
8000e384:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e388:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e38c:	30 29       	mov	r9,2
8000e38e:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e392:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000e396:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e39a:	ee f9 ff fc 	ld.w	r9,r7[-4]
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000e39e:	f1 49 00 54 	st.w	r8[84],r9
#endif

//#if ((defined SD_MMC_MCI_0_MEM) && (SD_MMC_MCI_0_MEM == ENABLE)) \
	//|| ((defined SD_MMC_MCI_1_MEM) && (SD_MMC_MCI_1_MEM == ENABLE))
#if ((defined (SD_MMC_MCI_0_MEM) || defined(SD_MMC_MCI_1_MEM) ) && (SD_MMC_MCI_0_MEM == ENABLE || SD_MMC_MCI_1_MEM == ENABLE))	
	sysclk_enable_pbb_module(SYSCLK_MCI);
8000e3a2:	30 6c       	mov	r12,6
8000e3a4:	f0 1f 00 10 	mcall	8000e3e4 <memories_initialization+0x110>
	sysclk_enable_hsb_module(SYSCLK_DMACA);
8000e3a8:	30 7c       	mov	r12,7
8000e3aa:	f0 1f 00 10 	mcall	8000e3e8 <memories_initialization+0x114>
#if SD_MMC_MCI_0_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_8BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000e3ae:	f0 1f 00 10 	mcall	8000e3ec <memories_initialization+0x118>
8000e3b2:	18 98       	mov	r8,r12
8000e3b4:	10 96       	mov	r6,r8
8000e3b6:	f0 1f 00 0f 	mcall	8000e3f0 <memories_initialization+0x11c>
8000e3ba:	18 98       	mov	r8,r12
8000e3bc:	0c 9a       	mov	r10,r6
8000e3be:	10 9b       	mov	r11,r8
8000e3c0:	30 0c       	mov	r12,0
8000e3c2:	f0 1f 00 0d 	mcall	8000e3f4 <memories_initialization+0x120>
#endif
#if SD_MMC_MCI_1_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_4BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000e3c6:	f0 1f 00 0a 	mcall	8000e3ec <memories_initialization+0x118>
8000e3ca:	18 98       	mov	r8,r12
8000e3cc:	10 96       	mov	r6,r8
8000e3ce:	f0 1f 00 09 	mcall	8000e3f0 <memories_initialization+0x11c>
8000e3d2:	18 98       	mov	r8,r12
8000e3d4:	0c 9a       	mov	r10,r6
8000e3d6:	10 9b       	mov	r11,r8
8000e3d8:	30 1c       	mov	r12,1
8000e3da:	f0 1f 00 07 	mcall	8000e3f4 <memories_initialization+0x120>

	// Initialize SD/MMC with SPI PB clock.
	sd_mmc_spi_init(spiOptions,sysclk_get_pba_hz());
#endif  // SD_MMC_SPI_MEM == ENABLE

}
8000e3de:	2f ed       	sub	sp,-8
8000e3e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e3e4:	80 00       	ld.sh	r0,r0[0x0]
8000e3e6:	be 1c       	st.h	pc[0x2],r12
8000e3e8:	80 00       	ld.sh	r0,r0[0x0]
8000e3ea:	e2 b4       	*unknown*
8000e3ec:	80 00       	ld.sh	r0,r0[0x0]
8000e3ee:	e2 84 80 00 	brge	8005e3ee <Stored_values_flash+0x1e5ee>
8000e3f2:	e2 9c 80 00 	brvs	8007e3f2 <Stored_values_flash+0x3e5f2>
8000e3f6:	66 b0       	ld.w	r0,r3[0x2c]

8000e3f8 <__avr32_udiv64>:
8000e3f8:	d4 31       	pushm	r0-r7,lr
8000e3fa:	1a 97       	mov	r7,sp
8000e3fc:	20 2d       	sub	sp,8
8000e3fe:	10 9e       	mov	lr,r8
8000e400:	12 95       	mov	r5,r9
8000e402:	14 96       	mov	r6,r10
8000e404:	58 09       	cp.w	r9,0
8000e406:	c4 91       	brne	8000e498 <__avr32_udiv64+0xa0>
8000e408:	16 38       	cp.w	r8,r11
8000e40a:	e0 88 00 57 	brls	8000e4b8 <__avr32_udiv64+0xc0>
8000e40e:	f0 08 12 00 	clz	r8,r8
8000e412:	c0 d0       	breq	8000e42c <__avr32_udiv64+0x34>
8000e414:	f6 08 09 4b 	lsl	r11,r11,r8
8000e418:	f0 09 11 20 	rsub	r9,r8,32
8000e41c:	fc 08 09 4e 	lsl	lr,lr,r8
8000e420:	f4 09 0a 49 	lsr	r9,r10,r9
8000e424:	f4 08 09 46 	lsl	r6,r10,r8
8000e428:	f3 eb 10 0b 	or	r11,r9,r11
8000e42c:	fc 05 16 10 	lsr	r5,lr,0x10
8000e430:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
8000e434:	f6 05 0d 0a 	divu	r10,r11,r5
8000e438:	ec 08 16 10 	lsr	r8,r6,0x10
8000e43c:	14 99       	mov	r9,r10
8000e43e:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e442:	b9 3a       	mul	r10,r12
8000e444:	10 3a       	cp.w	r10,r8
8000e446:	e0 88 00 0c 	brls	8000e45e <__avr32_udiv64+0x66>
8000e44a:	20 19       	sub	r9,1
8000e44c:	1c 08       	add	r8,lr
8000e44e:	10 3e       	cp.w	lr,r8
8000e450:	e0 8b 00 07 	brhi	8000e45e <__avr32_udiv64+0x66>
8000e454:	10 3a       	cp.w	r10,r8
8000e456:	f7 b9 0b 01 	subhi	r9,1
8000e45a:	f1 de eb 08 	addhi	r8,r8,lr
8000e45e:	f0 0a 01 0b 	sub	r11,r8,r10
8000e462:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e466:	f6 05 0d 0a 	divu	r10,r11,r5
8000e46a:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000e46e:	14 98       	mov	r8,r10
8000e470:	f4 0c 02 4c 	mul	r12,r10,r12
8000e474:	0c 3c       	cp.w	r12,r6
8000e476:	e0 88 00 0a 	brls	8000e48a <__avr32_udiv64+0x92>
8000e47a:	20 18       	sub	r8,1
8000e47c:	1c 06       	add	r6,lr
8000e47e:	0c 3e       	cp.w	lr,r6
8000e480:	e0 8b 00 05 	brhi	8000e48a <__avr32_udiv64+0x92>
8000e484:	0c 3c       	cp.w	r12,r6
8000e486:	f7 b8 0b 01 	subhi	r8,1
8000e48a:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000e48e:	30 0c       	mov	r12,0
8000e490:	16 9a       	mov	r10,r11
8000e492:	18 9b       	mov	r11,r12
8000e494:	2f ed       	sub	sp,-8
8000e496:	d8 32       	popm	r0-r7,pc
8000e498:	16 39       	cp.w	r9,r11
8000e49a:	e0 8b 00 51 	brhi	8000e53c <__avr32_udiv64+0x144>
8000e49e:	f2 0c 12 00 	clz	r12,r9
8000e4a2:	c5 31       	brne	8000e548 <__avr32_udiv64+0x150>
8000e4a4:	14 38       	cp.w	r8,r10
8000e4a6:	5f 89       	srls	r9
8000e4a8:	16 35       	cp.w	r5,r11
8000e4aa:	5f 38       	srlo	r8
8000e4ac:	10 49       	or	r9,r8
8000e4ae:	f8 09 18 00 	cp.b	r9,r12
8000e4b2:	c4 50       	breq	8000e53c <__avr32_udiv64+0x144>
8000e4b4:	30 1b       	mov	r11,1
8000e4b6:	c4 58       	rjmp	8000e540 <__avr32_udiv64+0x148>
8000e4b8:	58 08       	cp.w	r8,0
8000e4ba:	c0 51       	brne	8000e4c4 <__avr32_udiv64+0xcc>
8000e4bc:	30 19       	mov	r9,1
8000e4be:	f2 08 0d 08 	divu	r8,r9,r8
8000e4c2:	10 9e       	mov	lr,r8
8000e4c4:	fc 08 12 00 	clz	r8,lr
8000e4c8:	e0 81 00 91 	brne	8000e5ea <__avr32_udiv64+0x1f2>
8000e4cc:	1c 1b       	sub	r11,lr
8000e4ce:	fc 05 16 10 	lsr	r5,lr,0x10
8000e4d2:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e4d6:	30 1c       	mov	r12,1
8000e4d8:	f6 05 0d 0a 	divu	r10,r11,r5
8000e4dc:	ec 08 16 10 	lsr	r8,r6,0x10
8000e4e0:	f4 09 02 43 	mul	r3,r10,r9
8000e4e4:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e4e8:	14 9b       	mov	r11,r10
8000e4ea:	10 33       	cp.w	r3,r8
8000e4ec:	e0 88 00 0c 	brls	8000e504 <__avr32_udiv64+0x10c>
8000e4f0:	20 1b       	sub	r11,1
8000e4f2:	1c 08       	add	r8,lr
8000e4f4:	10 3e       	cp.w	lr,r8
8000e4f6:	e0 8b 00 07 	brhi	8000e504 <__avr32_udiv64+0x10c>
8000e4fa:	10 33       	cp.w	r3,r8
8000e4fc:	f7 bb 0b 01 	subhi	r11,1
8000e500:	f1 de eb 08 	addhi	r8,r8,lr
8000e504:	f0 03 01 03 	sub	r3,r8,r3
8000e508:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e50c:	e6 05 0d 02 	divu	r2,r3,r5
8000e510:	ed e3 11 06 	or	r6,r6,r3<<0x10
8000e514:	04 98       	mov	r8,r2
8000e516:	e4 09 02 49 	mul	r9,r2,r9
8000e51a:	0c 39       	cp.w	r9,r6
8000e51c:	e0 88 00 0a 	brls	8000e530 <__avr32_udiv64+0x138>
8000e520:	20 18       	sub	r8,1
8000e522:	1c 06       	add	r6,lr
8000e524:	0c 3e       	cp.w	lr,r6
8000e526:	e0 8b 00 05 	brhi	8000e530 <__avr32_udiv64+0x138>
8000e52a:	0c 39       	cp.w	r9,r6
8000e52c:	f7 b8 0b 01 	subhi	r8,1
8000e530:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000e534:	16 9a       	mov	r10,r11
8000e536:	18 9b       	mov	r11,r12
8000e538:	2f ed       	sub	sp,-8
8000e53a:	d8 32       	popm	r0-r7,pc
8000e53c:	30 0b       	mov	r11,0
8000e53e:	16 9c       	mov	r12,r11
8000e540:	16 9a       	mov	r10,r11
8000e542:	18 9b       	mov	r11,r12
8000e544:	2f ed       	sub	sp,-8
8000e546:	d8 32       	popm	r0-r7,pc
8000e548:	f2 0c 09 45 	lsl	r5,r9,r12
8000e54c:	f8 0e 11 20 	rsub	lr,r12,32
8000e550:	f0 0c 09 43 	lsl	r3,r8,r12
8000e554:	f4 0e 0a 46 	lsr	r6,r10,lr
8000e558:	f0 0e 0a 48 	lsr	r8,r8,lr
8000e55c:	f6 0e 0a 4e 	lsr	lr,r11,lr
8000e560:	0a 48       	or	r8,r5
8000e562:	f0 01 16 10 	lsr	r1,r8,0x10
8000e566:	fc 01 0d 04 	divu	r4,lr,r1
8000e56a:	ee e5 ff f8 	st.d	r7[-8],r4
8000e56e:	f6 0c 09 49 	lsl	r9,r11,r12
8000e572:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000e576:	ed e9 10 09 	or	r9,r6,r9
8000e57a:	08 96       	mov	r6,r4
8000e57c:	f2 0e 16 10 	lsr	lr,r9,0x10
8000e580:	ee f4 ff f8 	ld.w	r4,r7[-8]
8000e584:	ec 05 02 4b 	mul	r11,r6,r5
8000e588:	fd e4 11 0e 	or	lr,lr,r4<<0x10
8000e58c:	1c 3b       	cp.w	r11,lr
8000e58e:	e0 88 00 07 	brls	8000e59c <__avr32_udiv64+0x1a4>
8000e592:	20 16       	sub	r6,1
8000e594:	10 0e       	add	lr,r8
8000e596:	1c 38       	cp.w	r8,lr
8000e598:	e0 88 00 6d 	brls	8000e672 <__avr32_udiv64+0x27a>
8000e59c:	16 1e       	sub	lr,r11
8000e59e:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000e5a2:	fc 01 0d 00 	divu	r0,lr,r1
8000e5a6:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000e5aa:	00 9b       	mov	r11,r0
8000e5ac:	e0 05 02 4e 	mul	lr,r0,r5
8000e5b0:	12 3e       	cp.w	lr,r9
8000e5b2:	e0 88 00 07 	brls	8000e5c0 <__avr32_udiv64+0x1c8>
8000e5b6:	20 1b       	sub	r11,1
8000e5b8:	10 09       	add	r9,r8
8000e5ba:	12 38       	cp.w	r8,r9
8000e5bc:	e0 88 00 55 	brls	8000e666 <__avr32_udiv64+0x26e>
8000e5c0:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
8000e5c4:	1c 19       	sub	r9,lr
8000e5c6:	f6 03 06 42 	mulu.d	r2,r11,r3
8000e5ca:	06 39       	cp.w	r9,r3
8000e5cc:	c0 93       	brcs	8000e5de <__avr32_udiv64+0x1e6>
8000e5ce:	5f 09       	sreq	r9
8000e5d0:	f4 0c 09 4c 	lsl	r12,r10,r12
8000e5d4:	04 3c       	cp.w	r12,r2
8000e5d6:	5f 38       	srlo	r8
8000e5d8:	f3 e8 00 08 	and	r8,r9,r8
8000e5dc:	c0 20       	breq	8000e5e0 <__avr32_udiv64+0x1e8>
8000e5de:	20 1b       	sub	r11,1
8000e5e0:	30 0c       	mov	r12,0
8000e5e2:	16 9a       	mov	r10,r11
8000e5e4:	18 9b       	mov	r11,r12
8000e5e6:	2f ed       	sub	sp,-8
8000e5e8:	d8 32       	popm	r0-r7,pc
8000e5ea:	f6 08 09 49 	lsl	r9,r11,r8
8000e5ee:	fc 08 09 4e 	lsl	lr,lr,r8
8000e5f2:	f0 01 11 20 	rsub	r1,r8,32
8000e5f6:	fc 05 16 10 	lsr	r5,lr,0x10
8000e5fa:	f4 01 0a 42 	lsr	r2,r10,r1
8000e5fe:	f6 01 0a 41 	lsr	r1,r11,r1
8000e602:	12 42       	or	r2,r9
8000e604:	e2 05 0d 00 	divu	r0,r1,r5
8000e608:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e60c:	e4 06 16 10 	lsr	r6,r2,0x10
8000e610:	00 93       	mov	r3,r0
8000e612:	ed e1 11 06 	or	r6,r6,r1<<0x10
8000e616:	e0 09 02 4c 	mul	r12,r0,r9
8000e61a:	0c 3c       	cp.w	r12,r6
8000e61c:	e0 88 00 07 	brls	8000e62a <__avr32_udiv64+0x232>
8000e620:	20 13       	sub	r3,1
8000e622:	1c 06       	add	r6,lr
8000e624:	0c 3e       	cp.w	lr,r6
8000e626:	e0 88 00 2c 	brls	8000e67e <__avr32_udiv64+0x286>
8000e62a:	ec 0c 01 01 	sub	r1,r6,r12
8000e62e:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000e632:	e2 05 0d 00 	divu	r0,r1,r5
8000e636:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000e63a:	00 9c       	mov	r12,r0
8000e63c:	e0 09 02 41 	mul	r1,r0,r9
8000e640:	16 31       	cp.w	r1,r11
8000e642:	e0 88 00 0c 	brls	8000e65a <__avr32_udiv64+0x262>
8000e646:	20 1c       	sub	r12,1
8000e648:	1c 0b       	add	r11,lr
8000e64a:	16 3e       	cp.w	lr,r11
8000e64c:	e0 8b 00 07 	brhi	8000e65a <__avr32_udiv64+0x262>
8000e650:	16 31       	cp.w	r1,r11
8000e652:	f7 bc 0b 01 	subhi	r12,1
8000e656:	f7 de eb 0b 	addhi	r11,r11,lr
8000e65a:	f4 08 09 46 	lsl	r6,r10,r8
8000e65e:	02 1b       	sub	r11,r1
8000e660:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
8000e664:	c3 ab       	rjmp	8000e4d8 <__avr32_udiv64+0xe0>
8000e666:	12 3e       	cp.w	lr,r9
8000e668:	f3 d8 eb 09 	addhi	r9,r9,r8
8000e66c:	f7 bb 0b 01 	subhi	r11,1
8000e670:	ca 8b       	rjmp	8000e5c0 <__avr32_udiv64+0x1c8>
8000e672:	1c 3b       	cp.w	r11,lr
8000e674:	f7 b6 0b 01 	subhi	r6,1
8000e678:	fd d8 eb 0e 	addhi	lr,lr,r8
8000e67c:	c9 0b       	rjmp	8000e59c <__avr32_udiv64+0x1a4>
8000e67e:	0c 3c       	cp.w	r12,r6
8000e680:	f7 b3 0b 01 	subhi	r3,1
8000e684:	ed de eb 06 	addhi	r6,r6,lr
8000e688:	cd 1b       	rjmp	8000e62a <__avr32_udiv64+0x232>

8000e68a <memcpy>:
8000e68a:	58 8a       	cp.w	r10,8
8000e68c:	c2 f5       	brlt	8000e6ea <memcpy+0x60>
8000e68e:	f9 eb 10 09 	or	r9,r12,r11
8000e692:	e2 19 00 03 	andl	r9,0x3,COH
8000e696:	e0 81 00 97 	brne	8000e7c4 <memcpy+0x13a>
8000e69a:	e0 4a 00 20 	cp.w	r10,32
8000e69e:	c3 b4       	brge	8000e714 <memcpy+0x8a>
8000e6a0:	f4 08 14 02 	asr	r8,r10,0x2
8000e6a4:	f0 09 11 08 	rsub	r9,r8,8
8000e6a8:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000e6ac:	76 69       	ld.w	r9,r11[0x18]
8000e6ae:	99 69       	st.w	r12[0x18],r9
8000e6b0:	76 59       	ld.w	r9,r11[0x14]
8000e6b2:	99 59       	st.w	r12[0x14],r9
8000e6b4:	76 49       	ld.w	r9,r11[0x10]
8000e6b6:	99 49       	st.w	r12[0x10],r9
8000e6b8:	76 39       	ld.w	r9,r11[0xc]
8000e6ba:	99 39       	st.w	r12[0xc],r9
8000e6bc:	76 29       	ld.w	r9,r11[0x8]
8000e6be:	99 29       	st.w	r12[0x8],r9
8000e6c0:	76 19       	ld.w	r9,r11[0x4]
8000e6c2:	99 19       	st.w	r12[0x4],r9
8000e6c4:	76 09       	ld.w	r9,r11[0x0]
8000e6c6:	99 09       	st.w	r12[0x0],r9
8000e6c8:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000e6cc:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000e6d0:	e0 1a 00 03 	andl	r10,0x3
8000e6d4:	f4 0a 11 04 	rsub	r10,r10,4
8000e6d8:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000e6dc:	17 a9       	ld.ub	r9,r11[0x2]
8000e6de:	b0 a9       	st.b	r8[0x2],r9
8000e6e0:	17 99       	ld.ub	r9,r11[0x1]
8000e6e2:	b0 99       	st.b	r8[0x1],r9
8000e6e4:	17 89       	ld.ub	r9,r11[0x0]
8000e6e6:	b0 89       	st.b	r8[0x0],r9
8000e6e8:	5e fc       	retal	r12
8000e6ea:	f4 0a 11 09 	rsub	r10,r10,9
8000e6ee:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000e6f2:	17 f9       	ld.ub	r9,r11[0x7]
8000e6f4:	b8 f9       	st.b	r12[0x7],r9
8000e6f6:	17 e9       	ld.ub	r9,r11[0x6]
8000e6f8:	b8 e9       	st.b	r12[0x6],r9
8000e6fa:	17 d9       	ld.ub	r9,r11[0x5]
8000e6fc:	b8 d9       	st.b	r12[0x5],r9
8000e6fe:	17 c9       	ld.ub	r9,r11[0x4]
8000e700:	b8 c9       	st.b	r12[0x4],r9
8000e702:	17 b9       	ld.ub	r9,r11[0x3]
8000e704:	b8 b9       	st.b	r12[0x3],r9
8000e706:	17 a9       	ld.ub	r9,r11[0x2]
8000e708:	b8 a9       	st.b	r12[0x2],r9
8000e70a:	17 99       	ld.ub	r9,r11[0x1]
8000e70c:	b8 99       	st.b	r12[0x1],r9
8000e70e:	17 89       	ld.ub	r9,r11[0x0]
8000e710:	b8 89       	st.b	r12[0x0],r9
8000e712:	5e fc       	retal	r12
8000e714:	eb cd 40 c0 	pushm	r6-r7,lr
8000e718:	18 99       	mov	r9,r12
8000e71a:	22 0a       	sub	r10,32
8000e71c:	b7 07       	ld.d	r6,r11++
8000e71e:	b3 26       	st.d	r9++,r6
8000e720:	b7 07       	ld.d	r6,r11++
8000e722:	b3 26       	st.d	r9++,r6
8000e724:	b7 07       	ld.d	r6,r11++
8000e726:	b3 26       	st.d	r9++,r6
8000e728:	b7 07       	ld.d	r6,r11++
8000e72a:	b3 26       	st.d	r9++,r6
8000e72c:	22 0a       	sub	r10,32
8000e72e:	cf 74       	brge	8000e71c <memcpy+0x92>
8000e730:	2f 0a       	sub	r10,-16
8000e732:	c0 65       	brlt	8000e73e <memcpy+0xb4>
8000e734:	b7 07       	ld.d	r6,r11++
8000e736:	b3 26       	st.d	r9++,r6
8000e738:	b7 07       	ld.d	r6,r11++
8000e73a:	b3 26       	st.d	r9++,r6
8000e73c:	21 0a       	sub	r10,16
8000e73e:	5c 3a       	neg	r10
8000e740:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000e744:	d7 03       	nop
8000e746:	d7 03       	nop
8000e748:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000e74c:	f3 66 00 0e 	st.b	r9[14],r6
8000e750:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000e754:	f3 66 00 0d 	st.b	r9[13],r6
8000e758:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000e75c:	f3 66 00 0c 	st.b	r9[12],r6
8000e760:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000e764:	f3 66 00 0b 	st.b	r9[11],r6
8000e768:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000e76c:	f3 66 00 0a 	st.b	r9[10],r6
8000e770:	f7 36 00 09 	ld.ub	r6,r11[9]
8000e774:	f3 66 00 09 	st.b	r9[9],r6
8000e778:	f7 36 00 08 	ld.ub	r6,r11[8]
8000e77c:	f3 66 00 08 	st.b	r9[8],r6
8000e780:	f7 36 00 07 	ld.ub	r6,r11[7]
8000e784:	f3 66 00 07 	st.b	r9[7],r6
8000e788:	f7 36 00 06 	ld.ub	r6,r11[6]
8000e78c:	f3 66 00 06 	st.b	r9[6],r6
8000e790:	f7 36 00 05 	ld.ub	r6,r11[5]
8000e794:	f3 66 00 05 	st.b	r9[5],r6
8000e798:	f7 36 00 04 	ld.ub	r6,r11[4]
8000e79c:	f3 66 00 04 	st.b	r9[4],r6
8000e7a0:	f7 36 00 03 	ld.ub	r6,r11[3]
8000e7a4:	f3 66 00 03 	st.b	r9[3],r6
8000e7a8:	f7 36 00 02 	ld.ub	r6,r11[2]
8000e7ac:	f3 66 00 02 	st.b	r9[2],r6
8000e7b0:	f7 36 00 01 	ld.ub	r6,r11[1]
8000e7b4:	f3 66 00 01 	st.b	r9[1],r6
8000e7b8:	f7 36 00 00 	ld.ub	r6,r11[0]
8000e7bc:	f3 66 00 00 	st.b	r9[0],r6
8000e7c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e7c4:	20 1a       	sub	r10,1
8000e7c6:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000e7ca:	f8 0a 0b 09 	st.b	r12[r10],r9
8000e7ce:	cf b1       	brne	8000e7c4 <memcpy+0x13a>
8000e7d0:	5e fc       	retal	r12

8000e7d2 <memset>:
8000e7d2:	18 98       	mov	r8,r12
8000e7d4:	c0 38       	rjmp	8000e7da <memset+0x8>
8000e7d6:	10 cb       	st.b	r8++,r11
8000e7d8:	20 1a       	sub	r10,1
8000e7da:	58 0a       	cp.w	r10,0
8000e7dc:	cf d1       	brne	8000e7d6 <memset+0x4>
8000e7de:	5e fc       	retal	r12

Disassembly of section .exception:

8000e800 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000e800:	c0 08       	rjmp	8000e800 <_evba>
	...

8000e804 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000e804:	c0 08       	rjmp	8000e804 <_handle_TLB_Multiple_Hit>
	...

8000e808 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000e808:	c0 08       	rjmp	8000e808 <_handle_Bus_Error_Data_Fetch>
	...

8000e80c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000e80c:	c0 08       	rjmp	8000e80c <_handle_Bus_Error_Instruction_Fetch>
	...

8000e810 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000e810:	c0 08       	rjmp	8000e810 <_handle_NMI>
	...

8000e814 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000e814:	c0 08       	rjmp	8000e814 <_handle_Instruction_Address>
	...

8000e818 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000e818:	c0 08       	rjmp	8000e818 <_handle_ITLB_Protection>
	...

8000e81c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000e81c:	c0 08       	rjmp	8000e81c <_handle_Breakpoint>
	...

8000e820 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000e820:	c0 08       	rjmp	8000e820 <_handle_Illegal_Opcode>
	...

8000e824 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000e824:	c0 08       	rjmp	8000e824 <_handle_Unimplemented_Instruction>
	...

8000e828 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000e828:	c0 08       	rjmp	8000e828 <_handle_Privilege_Violation>
	...

8000e82c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000e82c:	c0 08       	rjmp	8000e82c <_handle_Floating_Point>
	...

8000e830 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000e830:	c0 08       	rjmp	8000e830 <_handle_Coprocessor_Absent>
	...

8000e834 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000e834:	c0 08       	rjmp	8000e834 <_handle_Data_Address_Read>
	...

8000e838 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000e838:	c0 08       	rjmp	8000e838 <_handle_Data_Address_Write>
	...

8000e83c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000e83c:	c0 08       	rjmp	8000e83c <_handle_DTLB_Protection_Read>
	...

8000e840 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000e840:	c0 08       	rjmp	8000e840 <_handle_DTLB_Protection_Write>
	...

8000e844 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000e844:	c0 08       	rjmp	8000e844 <_handle_DTLB_Modified>
	...

8000e850 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000e850:	c0 08       	rjmp	8000e850 <_handle_ITLB_Miss>
	...

8000e860 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000e860:	c0 08       	rjmp	8000e860 <_handle_DTLB_Miss_Read>
	...

8000e870 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000e870:	c0 08       	rjmp	8000e870 <_handle_DTLB_Miss_Write>
	...

8000e900 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000e900:	c0 08       	rjmp	8000e900 <_handle_Supervisor_Call>
8000e902:	d7 03       	nop

8000e904 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000e904:	30 0c       	mov	r12,0
8000e906:	fe b0 d2 41 	rcall	80008d88 <_get_interrupt_handler>
8000e90a:	58 0c       	cp.w	r12,0
8000e90c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000e910:	d6 03       	rete

8000e912 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000e912:	30 1c       	mov	r12,1
8000e914:	fe b0 d2 3a 	rcall	80008d88 <_get_interrupt_handler>
8000e918:	58 0c       	cp.w	r12,0
8000e91a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000e91e:	d6 03       	rete

8000e920 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000e920:	30 2c       	mov	r12,2
8000e922:	fe b0 d2 33 	rcall	80008d88 <_get_interrupt_handler>
8000e926:	58 0c       	cp.w	r12,0
8000e928:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000e92c:	d6 03       	rete

8000e92e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000e92e:	30 3c       	mov	r12,3
8000e930:	fe b0 d2 2c 	rcall	80008d88 <_get_interrupt_handler>
8000e934:	58 0c       	cp.w	r12,0
8000e936:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000e93a:	d6 03       	rete
8000e93c:	d7 03       	nop
8000e93e:	d7 03       	nop
8000e940:	d7 03       	nop
8000e942:	d7 03       	nop
8000e944:	d7 03       	nop
8000e946:	d7 03       	nop
8000e948:	d7 03       	nop
8000e94a:	d7 03       	nop
8000e94c:	d7 03       	nop
8000e94e:	d7 03       	nop
8000e950:	d7 03       	nop
8000e952:	d7 03       	nop
8000e954:	d7 03       	nop
8000e956:	d7 03       	nop
8000e958:	d7 03       	nop
8000e95a:	d7 03       	nop
8000e95c:	d7 03       	nop
8000e95e:	d7 03       	nop
8000e960:	d7 03       	nop
8000e962:	d7 03       	nop
8000e964:	d7 03       	nop
8000e966:	d7 03       	nop
8000e968:	d7 03       	nop
8000e96a:	d7 03       	nop
8000e96c:	d7 03       	nop
8000e96e:	d7 03       	nop
8000e970:	d7 03       	nop
8000e972:	d7 03       	nop
8000e974:	d7 03       	nop
8000e976:	d7 03       	nop
8000e978:	d7 03       	nop
8000e97a:	d7 03       	nop
8000e97c:	d7 03       	nop
8000e97e:	d7 03       	nop
8000e980:	d7 03       	nop
8000e982:	d7 03       	nop
8000e984:	d7 03       	nop
8000e986:	d7 03       	nop
8000e988:	d7 03       	nop
8000e98a:	d7 03       	nop
8000e98c:	d7 03       	nop
8000e98e:	d7 03       	nop
8000e990:	d7 03       	nop
8000e992:	d7 03       	nop
8000e994:	d7 03       	nop
8000e996:	d7 03       	nop
8000e998:	d7 03       	nop
8000e99a:	d7 03       	nop
8000e99c:	d7 03       	nop
8000e99e:	d7 03       	nop
8000e9a0:	d7 03       	nop
8000e9a2:	d7 03       	nop
8000e9a4:	d7 03       	nop
8000e9a6:	d7 03       	nop
8000e9a8:	d7 03       	nop
8000e9aa:	d7 03       	nop
8000e9ac:	d7 03       	nop
8000e9ae:	d7 03       	nop
8000e9b0:	d7 03       	nop
8000e9b2:	d7 03       	nop
8000e9b4:	d7 03       	nop
8000e9b6:	d7 03       	nop
8000e9b8:	d7 03       	nop
8000e9ba:	d7 03       	nop
8000e9bc:	d7 03       	nop
8000e9be:	d7 03       	nop
8000e9c0:	d7 03       	nop
8000e9c2:	d7 03       	nop
8000e9c4:	d7 03       	nop
8000e9c6:	d7 03       	nop
8000e9c8:	d7 03       	nop
8000e9ca:	d7 03       	nop
8000e9cc:	d7 03       	nop
8000e9ce:	d7 03       	nop
8000e9d0:	d7 03       	nop
8000e9d2:	d7 03       	nop
8000e9d4:	d7 03       	nop
8000e9d6:	d7 03       	nop
8000e9d8:	d7 03       	nop
8000e9da:	d7 03       	nop
8000e9dc:	d7 03       	nop
8000e9de:	d7 03       	nop
8000e9e0:	d7 03       	nop
8000e9e2:	d7 03       	nop
8000e9e4:	d7 03       	nop
8000e9e6:	d7 03       	nop
8000e9e8:	d7 03       	nop
8000e9ea:	d7 03       	nop
8000e9ec:	d7 03       	nop
8000e9ee:	d7 03       	nop
8000e9f0:	d7 03       	nop
8000e9f2:	d7 03       	nop
8000e9f4:	d7 03       	nop
8000e9f6:	d7 03       	nop
8000e9f8:	d7 03       	nop
8000e9fa:	d7 03       	nop
8000e9fc:	d7 03       	nop
8000e9fe:	d7 03       	nop
