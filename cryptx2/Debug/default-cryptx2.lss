
default-cryptx2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c498  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000e600  8000e600  0000ea00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007c8  8000e800  8000e800  0000ec00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000238  00000008  8000efc8  0000f408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b98  00000240  00000240  00000000  2**2
                  ALLOC
  8 .heap         0000e228  00000dd8  00000dd8  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000f640  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000012e8  00000000  00000000  0000f670  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 000028ef  00000000  00000000  00010958  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00025725  00000000  00000000  00013247  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003440  00000000  00000000  0003896c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000744b  00000000  00000000  0003bdac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003a1c  00000000  00000000  000431f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009ee3  00000000  00000000  00046c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00005b56  00000000  00000000  00050af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 19 .debug_ranges 000012b8  00000000  00000000  00056650  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	b3 f8       	*unknown*

Disassembly of section .text:

80002008 <hmac_sha256_init>:

/* HMAC-SHA-256 functions */

void hmac_sha256_init(hmac_sha256_ctx *ctx, const unsigned char *key,
                      unsigned int key_size)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 fd       	sub	sp,60
80002010:	ef 4c ff cc 	st.w	r7[-52],r12
80002014:	ef 4b ff c8 	st.w	r7[-56],r11
80002018:	ef 4a ff c4 	st.w	r7[-60],r10

    const unsigned char *key_used;
    unsigned char key_temp[SHA256_DIGEST_SIZE];
    int i;

    if (key_size == SHA256_BLOCK_SIZE) {
8000201c:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002020:	e0 48 00 40 	cp.w	r8,64
80002024:	c0 91       	brne	80002036 <hmac_sha256_init+0x2e>
        key_used = key;
80002026:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000202a:	ef 48 ff f8 	st.w	r7[-8],r8
        num = SHA256_BLOCK_SIZE;
8000202e:	34 08       	mov	r8,64
80002030:	ef 48 ff f4 	st.w	r7[-12],r8
80002034:	c4 28       	rjmp	800020b8 <hmac_sha256_init+0xb0>
    } else {
        if (key_size > SHA256_BLOCK_SIZE){
80002036:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000203a:	e0 48 00 40 	cp.w	r8,64
8000203e:	e0 88 00 13 	brls	80002064 <hmac_sha256_init+0x5c>
            num = SHA256_DIGEST_SIZE;
80002042:	32 08       	mov	r8,32
80002044:	ef 48 ff f4 	st.w	r7[-12],r8
            sha256(key, key_size, key_temp);
80002048:	ee c8 00 30 	sub	r8,r7,48
8000204c:	10 9a       	mov	r10,r8
8000204e:	ee fb ff c4 	ld.w	r11,r7[-60]
80002052:	ee fc ff c8 	ld.w	r12,r7[-56]
80002056:	f0 1f 00 54 	mcall	800021a4 <hmac_sha256_init+0x19c>
            key_used = key_temp;
8000205a:	ee c8 00 30 	sub	r8,r7,48
8000205e:	ef 48 ff f8 	st.w	r7[-8],r8
80002062:	c0 98       	rjmp	80002074 <hmac_sha256_init+0x6c>
        } else { /* key_size > SHA256_BLOCK_SIZE */
            key_used = key;
80002064:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002068:	ef 48 ff f8 	st.w	r7[-8],r8
            num = key_size;
8000206c:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002070:	ef 48 ff f4 	st.w	r7[-12],r8
        }
        fill = SHA256_BLOCK_SIZE - num;
80002074:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002078:	f0 08 11 40 	rsub	r8,r8,64
8000207c:	ef 48 ff f0 	st.w	r7[-16],r8

        memset(ctx->block_ipad + num, 0x36, fill);
80002080:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002084:	f0 c9 fd 60 	sub	r9,r8,-672
80002088:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000208c:	f2 08 00 08 	add	r8,r9,r8
80002090:	ee fa ff f0 	ld.w	r10,r7[-16]
80002094:	33 6b       	mov	r11,54
80002096:	10 9c       	mov	r12,r8
80002098:	f0 1f 00 44 	mcall	800021a8 <hmac_sha256_init+0x1a0>
        memset(ctx->block_opad + num, 0x5c, fill);
8000209c:	ee f8 ff cc 	ld.w	r8,r7[-52]
800020a0:	f0 c9 fd 20 	sub	r9,r8,-736
800020a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800020a8:	f2 08 00 08 	add	r8,r9,r8
800020ac:	ee fa ff f0 	ld.w	r10,r7[-16]
800020b0:	35 cb       	mov	r11,92
800020b2:	10 9c       	mov	r12,r8
800020b4:	f0 1f 00 3d 	mcall	800021a8 <hmac_sha256_init+0x1a0>
    }

    for (i = 0; i < (int) num; i++) {
800020b8:	30 08       	mov	r8,0
800020ba:	ef 48 ff fc 	st.w	r7[-4],r8
800020be:	c2 a8       	rjmp	80002112 <hmac_sha256_init+0x10a>
        ctx->block_ipad[i] = key_used[i] ^ 0x36;
800020c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020c8:	ee fa ff f8 	ld.w	r10,r7[-8]
800020cc:	f4 08 00 08 	add	r8,r10,r8
800020d0:	11 88       	ld.ub	r8,r8[0x0]
800020d2:	ec 18 00 36 	eorl	r8,0x36
800020d6:	5c 58       	castu.b	r8
800020d8:	ee fa ff cc 	ld.w	r10,r7[-52]
800020dc:	f4 09 00 09 	add	r9,r10,r9
800020e0:	f3 68 02 a0 	st.b	r9[672],r8
        ctx->block_opad[i] = key_used[i] ^ 0x5c;
800020e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020ec:	ee fa ff f8 	ld.w	r10,r7[-8]
800020f0:	f4 08 00 08 	add	r8,r10,r8
800020f4:	11 88       	ld.ub	r8,r8[0x0]
800020f6:	ec 18 00 5c 	eorl	r8,0x5c
800020fa:	5c 58       	castu.b	r8
800020fc:	ee fa ff cc 	ld.w	r10,r7[-52]
80002100:	f4 09 00 09 	add	r9,r10,r9
80002104:	f3 68 02 e0 	st.b	r9[736],r8

        memset(ctx->block_ipad + num, 0x36, fill);
        memset(ctx->block_opad + num, 0x5c, fill);
    }

    for (i = 0; i < (int) num; i++) {
80002108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000210c:	2f f8       	sub	r8,-1
8000210e:	ef 48 ff fc 	st.w	r7[-4],r8
80002112:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000211a:	10 39       	cp.w	r9,r8
8000211c:	fe 99 ff d2 	brgt	800020c0 <hmac_sha256_init+0xb8>
        ctx->block_ipad[i] = key_used[i] ^ 0x36;
        ctx->block_opad[i] = key_used[i] ^ 0x5c;
    }

    sha256_init(&ctx->ctx_inside);
80002120:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002124:	10 9c       	mov	r12,r8
80002126:	f0 1f 00 22 	mcall	800021ac <hmac_sha256_init+0x1a4>
    sha256_update(&ctx->ctx_inside, ctx->block_ipad, SHA256_BLOCK_SIZE);
8000212a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000212e:	f0 c9 fd 60 	sub	r9,r8,-672
80002132:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002136:	34 0a       	mov	r10,64
80002138:	12 9b       	mov	r11,r9
8000213a:	10 9c       	mov	r12,r8
8000213c:	f0 1f 00 1d 	mcall	800021b0 <hmac_sha256_init+0x1a8>

    sha256_init(&ctx->ctx_outside);
80002140:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002144:	f0 c8 ff 58 	sub	r8,r8,-168
80002148:	10 9c       	mov	r12,r8
8000214a:	f0 1f 00 19 	mcall	800021ac <hmac_sha256_init+0x1a4>
    sha256_update(&ctx->ctx_outside, ctx->block_opad,
8000214e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002152:	f0 c9 fd 20 	sub	r9,r8,-736
80002156:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000215a:	f0 c8 ff 58 	sub	r8,r8,-168
8000215e:	34 0a       	mov	r10,64
80002160:	12 9b       	mov	r11,r9
80002162:	10 9c       	mov	r12,r8
80002164:	f0 1f 00 13 	mcall	800021b0 <hmac_sha256_init+0x1a8>
                  SHA256_BLOCK_SIZE);

    /* for hmac_reinit */
    memcpy(&ctx->ctx_inside_reinit, &ctx->ctx_inside,
80002168:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000216c:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002170:	f0 c8 fe b0 	sub	r8,r8,-336
80002174:	e0 6a 00 a8 	mov	r10,168
80002178:	12 9b       	mov	r11,r9
8000217a:	10 9c       	mov	r12,r8
8000217c:	f0 1f 00 0e 	mcall	800021b4 <hmac_sha256_init+0x1ac>
           sizeof(sha256_ctx));
    memcpy(&ctx->ctx_outside_reinit, &ctx->ctx_outside,
80002180:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002184:	f0 c9 ff 58 	sub	r9,r8,-168
80002188:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000218c:	f0 c8 fe 08 	sub	r8,r8,-504
80002190:	e0 6a 00 a8 	mov	r10,168
80002194:	12 9b       	mov	r11,r9
80002196:	10 9c       	mov	r12,r8
80002198:	f0 1f 00 07 	mcall	800021b4 <hmac_sha256_init+0x1ac>
           sizeof(sha256_ctx));
}
8000219c:	2f 1d       	sub	sp,-60
8000219e:	e3 cd 80 80 	ldm	sp++,r7,pc
800021a2:	00 00       	add	r0,r0
800021a4:	80 00       	ld.sh	r0,r0[0x0]
800021a6:	26 44       	sub	r4,100
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	e4 92 80 00 	brhs	800b21aa <_data_lma+0xa31e2>
800021ae:	26 98       	sub	r8,105
800021b0:	80 00       	ld.sh	r0,r0[0x0]
800021b2:	26 f4       	sub	r4,111
800021b4:	80 00       	ld.sh	r0,r0[0x0]
800021b6:	e3 4a eb cd 	st.w	r1[-5171],r10

800021b8 <hmac_sha256_update>:
           sizeof(sha256_ctx));
}

void hmac_sha256_update(hmac_sha256_ctx *ctx, const unsigned char *message,
                        unsigned int message_len)
{
800021b8:	eb cd 40 80 	pushm	r7,lr
800021bc:	1a 97       	mov	r7,sp
800021be:	20 3d       	sub	sp,12
800021c0:	ef 4c ff fc 	st.w	r7[-4],r12
800021c4:	ef 4b ff f8 	st.w	r7[-8],r11
800021c8:	ef 4a ff f4 	st.w	r7[-12],r10
    sha256_update(&ctx->ctx_inside, message, message_len);
800021cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d0:	ee fa ff f4 	ld.w	r10,r7[-12]
800021d4:	ee fb ff f8 	ld.w	r11,r7[-8]
800021d8:	10 9c       	mov	r12,r8
800021da:	f0 1f 00 03 	mcall	800021e4 <hmac_sha256_update+0x2c>
}
800021de:	2f dd       	sub	sp,-12
800021e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	26 f4       	sub	r4,111

800021e8 <hmac_sha256_final>:

void hmac_sha256_final(hmac_sha256_ctx *ctx, unsigned char *mac,
                       unsigned int mac_size)
{
800021e8:	eb cd 40 80 	pushm	r7,lr
800021ec:	1a 97       	mov	r7,sp
800021ee:	21 3d       	sub	sp,76
800021f0:	ef 4c ff bc 	st.w	r7[-68],r12
800021f4:	ef 4b ff b8 	st.w	r7[-72],r11
800021f8:	ef 4a ff b4 	st.w	r7[-76],r10
    unsigned char digest_inside[SHA256_DIGEST_SIZE];
    unsigned char mac_temp[SHA256_DIGEST_SIZE];

    sha256_final(&ctx->ctx_inside, digest_inside);
800021fc:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002200:	ee c9 00 20 	sub	r9,r7,32
80002204:	12 9b       	mov	r11,r9
80002206:	10 9c       	mov	r12,r8
80002208:	f0 1f 00 12 	mcall	80002250 <hmac_sha256_final+0x68>
    sha256_update(&ctx->ctx_outside, digest_inside, SHA256_DIGEST_SIZE);
8000220c:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002210:	f0 c8 ff 58 	sub	r8,r8,-168
80002214:	ee c9 00 20 	sub	r9,r7,32
80002218:	32 0a       	mov	r10,32
8000221a:	12 9b       	mov	r11,r9
8000221c:	10 9c       	mov	r12,r8
8000221e:	f0 1f 00 0e 	mcall	80002254 <hmac_sha256_final+0x6c>
    sha256_final(&ctx->ctx_outside, mac_temp);
80002222:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002226:	f0 c8 ff 58 	sub	r8,r8,-168
8000222a:	ee c9 00 40 	sub	r9,r7,64
8000222e:	12 9b       	mov	r11,r9
80002230:	10 9c       	mov	r12,r8
80002232:	f0 1f 00 08 	mcall	80002250 <hmac_sha256_final+0x68>
    memcpy(mac, mac_temp, mac_size);
80002236:	ee c8 00 40 	sub	r8,r7,64
8000223a:	ee fa ff b4 	ld.w	r10,r7[-76]
8000223e:	10 9b       	mov	r11,r8
80002240:	ee fc ff b8 	ld.w	r12,r7[-72]
80002244:	f0 1f 00 05 	mcall	80002258 <hmac_sha256_final+0x70>
}
80002248:	2e dd       	sub	sp,-76
8000224a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000224e:	00 00       	add	r0,r0
80002250:	80 00       	ld.sh	r0,r0[0x0]
80002252:	28 1c       	sub	r12,-127
80002254:	80 00       	ld.sh	r0,r0[0x0]
80002256:	26 f4       	sub	r4,111
80002258:	80 00       	ld.sh	r0,r0[0x0]
8000225a:	e3 4a eb cd 	st.w	r1[-5171],r10

8000225c <hmac_sha256>:

void hmac_sha256(const unsigned char *key, unsigned int key_size,
          const unsigned char *message, unsigned int message_len,
          unsigned char *mac, unsigned mac_size)
{
8000225c:	eb cd 40 c0 	pushm	r6-r7,lr
80002260:	1a 97       	mov	r7,sp
80002262:	fa cd 03 34 	sub	sp,sp,820
80002266:	ee c6 ff f4 	sub	r6,r7,-12
8000226a:	ef 4c fc dc 	st.w	r7[-804],r12
8000226e:	ef 4b fc d8 	st.w	r7[-808],r11
80002272:	ef 4a fc d4 	st.w	r7[-812],r10
80002276:	ef 49 fc d0 	st.w	r7[-816],r9
8000227a:	ef 48 fc cc 	st.w	r7[-820],r8
    hmac_sha256_ctx ctx;

    hmac_sha256_init(&ctx, key, key_size);
8000227e:	ee c8 03 20 	sub	r8,r7,800
80002282:	ee fa fc d8 	ld.w	r10,r7[-808]
80002286:	ee fb fc dc 	ld.w	r11,r7[-804]
8000228a:	10 9c       	mov	r12,r8
8000228c:	f0 1f 00 0c 	mcall	800022bc <hmac_sha256+0x60>
    hmac_sha256_update(&ctx, message, message_len);
80002290:	ee c8 03 20 	sub	r8,r7,800
80002294:	ee fa fc d0 	ld.w	r10,r7[-816]
80002298:	ee fb fc d4 	ld.w	r11,r7[-812]
8000229c:	10 9c       	mov	r12,r8
8000229e:	f0 1f 00 09 	mcall	800022c0 <hmac_sha256+0x64>
    hmac_sha256_final(&ctx, mac, mac_size);
800022a2:	ee c8 03 20 	sub	r8,r7,800
800022a6:	6c 0a       	ld.w	r10,r6[0x0]
800022a8:	ee fb fc cc 	ld.w	r11,r7[-820]
800022ac:	10 9c       	mov	r12,r8
800022ae:	f0 1f 00 06 	mcall	800022c4 <hmac_sha256+0x68>
}
800022b2:	fe 3d fc cc 	sub	sp,-820
800022b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022ba:	00 00       	add	r0,r0
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	20 08       	sub	r8,0
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	21 b8       	sub	r8,27
800022c4:	80 00       	ld.sh	r0,r0[0x0]
800022c6:	21 e8       	sub	r8,30

800022c8 <sha256_transf>:

/* SHA-256 functions */

void sha256_transf(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int block_nb)
{
800022c8:	eb cd 40 80 	pushm	r7,lr
800022cc:	1a 97       	mov	r7,sp
800022ce:	fa cd 01 40 	sub	sp,sp,320
800022d2:	ef 4c fe c8 	st.w	r7[-312],r12
800022d6:	ef 4b fe c4 	st.w	r7[-316],r11
800022da:	ef 4a fe c0 	st.w	r7[-320],r10

#ifndef UNROLL_LOOPS
    int j;
#endif

    for (i = 0; i < (int) block_nb; i++) {
800022de:	30 08       	mov	r8,0
800022e0:	ef 48 ff f8 	st.w	r7[-8],r8
800022e4:	ca 49       	rjmp	8000262c <sha256_transf+0x364>
        sub_block = message + (i << 6);
800022e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022ea:	a7 68       	lsl	r8,0x6
800022ec:	ee f9 fe c4 	ld.w	r9,r7[-316]
800022f0:	f2 08 00 08 	add	r8,r9,r8
800022f4:	ef 48 ff f4 	st.w	r7[-12],r8

#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
800022f8:	30 08       	mov	r8,0
800022fa:	ef 48 ff fc 	st.w	r7[-4],r8
800022fe:	c3 98       	rjmp	80002370 <sha256_transf+0xa8>
            PACK32(&sub_block[j << 2], &w[j]);
80002300:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002304:	f0 09 15 02 	lsl	r9,r8,0x2
80002308:	ee c8 01 14 	sub	r8,r7,276
8000230c:	12 08       	add	r8,r9
8000230e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002312:	a3 69       	lsl	r9,0x2
80002314:	2f d9       	sub	r9,-3
80002316:	ee fa ff f4 	ld.w	r10,r7[-12]
8000231a:	f4 09 00 09 	add	r9,r10,r9
8000231e:	13 89       	ld.ub	r9,r9[0x0]
80002320:	12 9a       	mov	r10,r9
80002322:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002326:	a3 69       	lsl	r9,0x2
80002328:	2f e9       	sub	r9,-2
8000232a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000232e:	f6 09 00 09 	add	r9,r11,r9
80002332:	13 89       	ld.ub	r9,r9[0x0]
80002334:	a9 69       	lsl	r9,0x8
80002336:	12 4a       	or	r10,r9
80002338:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000233c:	a3 69       	lsl	r9,0x2
8000233e:	2f f9       	sub	r9,-1
80002340:	ee fb ff f4 	ld.w	r11,r7[-12]
80002344:	f6 09 00 09 	add	r9,r11,r9
80002348:	13 89       	ld.ub	r9,r9[0x0]
8000234a:	b1 69       	lsl	r9,0x10
8000234c:	12 4a       	or	r10,r9
8000234e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002352:	a3 69       	lsl	r9,0x2
80002354:	ee fb ff f4 	ld.w	r11,r7[-12]
80002358:	f6 09 00 09 	add	r9,r11,r9
8000235c:	13 89       	ld.ub	r9,r9[0x0]
8000235e:	b9 69       	lsl	r9,0x18
80002360:	f5 e9 10 09 	or	r9,r10,r9
80002364:	91 09       	st.w	r8[0x0],r9

    for (i = 0; i < (int) block_nb; i++) {
        sub_block = message + (i << 6);

#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
80002366:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000236a:	2f f8       	sub	r8,-1
8000236c:	ef 48 ff fc 	st.w	r7[-4],r8
80002370:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002374:	58 f8       	cp.w	r8,15
80002376:	fe 9a ff c5 	brle	80002300 <sha256_transf+0x38>
            PACK32(&sub_block[j << 2], &w[j]);
        }

        for (j = 16; j < 64; j++) {
8000237a:	31 08       	mov	r8,16
8000237c:	ef 48 ff fc 	st.w	r7[-4],r8
80002380:	c6 c8       	rjmp	80002458 <sha256_transf+0x190>
            SHA256_SCR(j);
80002382:	ee fa ff fc 	ld.w	r10,r7[-4]
80002386:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000238a:	20 28       	sub	r8,2
8000238c:	a3 68       	lsl	r8,0x2
8000238e:	ee 08 00 08 	add	r8,r7,r8
80002392:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002396:	f0 0b 16 11 	lsr	r11,r8,0x11
8000239a:	f0 09 15 0f 	lsl	r9,r8,0xf
8000239e:	16 49       	or	r9,r11
800023a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023a4:	20 28       	sub	r8,2
800023a6:	a3 68       	lsl	r8,0x2
800023a8:	ee 08 00 08 	add	r8,r7,r8
800023ac:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023b0:	f0 0b 16 13 	lsr	r11,r8,0x13
800023b4:	ad 78       	lsl	r8,0xd
800023b6:	16 48       	or	r8,r11
800023b8:	10 59       	eor	r9,r8
800023ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023be:	20 28       	sub	r8,2
800023c0:	a3 68       	lsl	r8,0x2
800023c2:	ee 08 00 08 	add	r8,r7,r8
800023c6:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023ca:	ab 88       	lsr	r8,0xa
800023cc:	10 59       	eor	r9,r8
800023ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023d2:	20 78       	sub	r8,7
800023d4:	a3 68       	lsl	r8,0x2
800023d6:	ee 08 00 08 	add	r8,r7,r8
800023da:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023de:	f2 08 00 0b 	add	r11,r9,r8
800023e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023e6:	20 f8       	sub	r8,15
800023e8:	a3 68       	lsl	r8,0x2
800023ea:	ee 08 00 08 	add	r8,r7,r8
800023ee:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023f2:	f0 0c 16 07 	lsr	r12,r8,0x7
800023f6:	f0 09 15 19 	lsl	r9,r8,0x19
800023fa:	18 49       	or	r9,r12
800023fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002400:	20 f8       	sub	r8,15
80002402:	a3 68       	lsl	r8,0x2
80002404:	ee 08 00 08 	add	r8,r7,r8
80002408:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000240c:	f0 0c 16 12 	lsr	r12,r8,0x12
80002410:	af 68       	lsl	r8,0xe
80002412:	18 48       	or	r8,r12
80002414:	10 59       	eor	r9,r8
80002416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000241a:	20 f8       	sub	r8,15
8000241c:	a3 68       	lsl	r8,0x2
8000241e:	ee 08 00 08 	add	r8,r7,r8
80002422:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002426:	a3 98       	lsr	r8,0x3
80002428:	f3 e8 20 08 	eor	r8,r9,r8
8000242c:	f6 08 00 09 	add	r9,r11,r8
80002430:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002434:	21 08       	sub	r8,16
80002436:	a3 68       	lsl	r8,0x2
80002438:	ee 08 00 08 	add	r8,r7,r8
8000243c:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002440:	10 09       	add	r9,r8
80002442:	f4 08 15 02 	lsl	r8,r10,0x2
80002446:	ee 08 00 08 	add	r8,r7,r8
8000244a:	f1 49 fe ec 	st.w	r8[-276],r9
#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
            PACK32(&sub_block[j << 2], &w[j]);
        }

        for (j = 16; j < 64; j++) {
8000244e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002452:	2f f8       	sub	r8,-1
80002454:	ef 48 ff fc 	st.w	r7[-4],r8
80002458:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000245c:	e0 48 00 3f 	cp.w	r8,63
80002460:	fe 9a ff 91 	brle	80002382 <sha256_transf+0xba>
            SHA256_SCR(j);
        }

        for (j = 0; j < 8; j++) {
80002464:	30 08       	mov	r8,0
80002466:	ef 48 ff fc 	st.w	r7[-4],r8
8000246a:	c1 48       	rjmp	80002492 <sha256_transf+0x1ca>
            wv[j] = ctx->h[j];
8000246c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002470:	ee fa ff fc 	ld.w	r10,r7[-4]
80002474:	ee f9 fe c8 	ld.w	r9,r7[-312]
80002478:	2d ea       	sub	r10,-34
8000247a:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000247e:	a3 68       	lsl	r8,0x2
80002480:	ee 08 00 08 	add	r8,r7,r8
80002484:	f1 49 fe cc 	st.w	r8[-308],r9

        for (j = 16; j < 64; j++) {
            SHA256_SCR(j);
        }

        for (j = 0; j < 8; j++) {
80002488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000248c:	2f f8       	sub	r8,-1
8000248e:	ef 48 ff fc 	st.w	r7[-4],r8
80002492:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002496:	58 78       	cp.w	r8,7
80002498:	fe 9a ff ea 	brle	8000246c <sha256_transf+0x1a4>
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
8000249c:	30 08       	mov	r8,0
8000249e:	ef 48 ff fc 	st.w	r7[-4],r8
800024a2:	c9 68       	rjmp	800025ce <sha256_transf+0x306>
            t1 = wv[7] + SHA256_F2(wv[4]) + CH(wv[4], wv[5], wv[6])
800024a4:	ee fa fe e8 	ld.w	r10,r7[-280]
800024a8:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024ac:	f0 0b 16 06 	lsr	r11,r8,0x6
800024b0:	f0 09 15 1a 	lsl	r9,r8,0x1a
800024b4:	16 49       	or	r9,r11
800024b6:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024ba:	f0 0b 16 0b 	lsr	r11,r8,0xb
800024be:	b5 78       	lsl	r8,0x15
800024c0:	16 48       	or	r8,r11
800024c2:	10 59       	eor	r9,r8
800024c4:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024c8:	f0 0b 16 19 	lsr	r11,r8,0x19
800024cc:	a7 78       	lsl	r8,0x7
800024ce:	16 48       	or	r8,r11
800024d0:	f3 e8 20 08 	eor	r8,r9,r8
800024d4:	f4 08 00 09 	add	r9,r10,r8
800024d8:	ee fa fe dc 	ld.w	r10,r7[-292]
800024dc:	ee f8 fe e0 	ld.w	r8,r7[-288]
800024e0:	10 6a       	and	r10,r8
800024e2:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024e6:	f0 0b 11 ff 	rsub	r11,r8,-1
800024ea:	ee f8 fe e4 	ld.w	r8,r7[-284]
800024ee:	f7 e8 00 08 	and	r8,r11,r8
800024f2:	f5 e8 20 08 	eor	r8,r10,r8
                + sha256_k[j] + w[j];
800024f6:	10 09       	add	r9,r8
800024f8:	ee fa ff fc 	ld.w	r10,r7[-4]
800024fc:	4d 18       	lddpc	r8,80002640 <sha256_transf+0x378>
800024fe:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002502:	10 09       	add	r9,r8
80002504:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002508:	a3 68       	lsl	r8,0x2
8000250a:	ee 08 00 08 	add	r8,r7,r8
8000250e:	f0 f8 fe ec 	ld.w	r8,r8[-276]
        for (j = 0; j < 8; j++) {
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
            t1 = wv[7] + SHA256_F2(wv[4]) + CH(wv[4], wv[5], wv[6])
80002512:	f2 08 00 08 	add	r8,r9,r8
80002516:	ef 48 ff ec 	st.w	r7[-20],r8
                + sha256_k[j] + w[j];
            t2 = SHA256_F1(wv[0]) + MAJ(wv[0], wv[1], wv[2]);
8000251a:	ee f8 fe cc 	ld.w	r8,r7[-308]
8000251e:	f0 0a 16 02 	lsr	r10,r8,0x2
80002522:	f0 09 15 1e 	lsl	r9,r8,0x1e
80002526:	14 49       	or	r9,r10
80002528:	ee f8 fe cc 	ld.w	r8,r7[-308]
8000252c:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002530:	b3 78       	lsl	r8,0x13
80002532:	14 48       	or	r8,r10
80002534:	10 59       	eor	r9,r8
80002536:	ee f8 fe cc 	ld.w	r8,r7[-308]
8000253a:	f0 0a 16 16 	lsr	r10,r8,0x16
8000253e:	ab 68       	lsl	r8,0xa
80002540:	14 48       	or	r8,r10
80002542:	10 59       	eor	r9,r8
80002544:	ee fa fe cc 	ld.w	r10,r7[-308]
80002548:	ee f8 fe d0 	ld.w	r8,r7[-304]
8000254c:	10 6a       	and	r10,r8
8000254e:	ee fb fe cc 	ld.w	r11,r7[-308]
80002552:	ee f8 fe d4 	ld.w	r8,r7[-300]
80002556:	f7 e8 00 08 	and	r8,r11,r8
8000255a:	10 5a       	eor	r10,r8
8000255c:	ee fb fe d0 	ld.w	r11,r7[-304]
80002560:	ee f8 fe d4 	ld.w	r8,r7[-300]
80002564:	f7 e8 00 08 	and	r8,r11,r8
80002568:	f5 e8 20 08 	eor	r8,r10,r8
8000256c:	f2 08 00 08 	add	r8,r9,r8
80002570:	ef 48 ff f0 	st.w	r7[-16],r8
            wv[7] = wv[6];
80002574:	ee f8 fe e4 	ld.w	r8,r7[-284]
80002578:	ef 48 fe e8 	st.w	r7[-280],r8
            wv[6] = wv[5];
8000257c:	ee f8 fe e0 	ld.w	r8,r7[-288]
80002580:	ef 48 fe e4 	st.w	r7[-284],r8
            wv[5] = wv[4];
80002584:	ee f8 fe dc 	ld.w	r8,r7[-292]
80002588:	ef 48 fe e0 	st.w	r7[-288],r8
            wv[4] = wv[3] + t1;
8000258c:	ee f9 fe d8 	ld.w	r9,r7[-296]
80002590:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002594:	f2 08 00 08 	add	r8,r9,r8
80002598:	ef 48 fe dc 	st.w	r7[-292],r8
            wv[3] = wv[2];
8000259c:	ee f8 fe d4 	ld.w	r8,r7[-300]
800025a0:	ef 48 fe d8 	st.w	r7[-296],r8
            wv[2] = wv[1];
800025a4:	ee f8 fe d0 	ld.w	r8,r7[-304]
800025a8:	ef 48 fe d4 	st.w	r7[-300],r8
            wv[1] = wv[0];
800025ac:	ee f8 fe cc 	ld.w	r8,r7[-308]
800025b0:	ef 48 fe d0 	st.w	r7[-304],r8
            wv[0] = t1 + t2;
800025b4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800025b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800025bc:	f2 08 00 08 	add	r8,r9,r8
800025c0:	ef 48 fe cc 	st.w	r7[-308],r8

        for (j = 0; j < 8; j++) {
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
800025c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025c8:	2f f8       	sub	r8,-1
800025ca:	ef 48 ff fc 	st.w	r7[-4],r8
800025ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025d2:	e0 48 00 3f 	cp.w	r8,63
800025d6:	fe 9a ff 67 	brle	800024a4 <sha256_transf+0x1dc>
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }

        for (j = 0; j < 8; j++) {
800025da:	30 08       	mov	r8,0
800025dc:	ef 48 ff fc 	st.w	r7[-4],r8
800025e0:	c1 c8       	rjmp	80002618 <sha256_transf+0x350>
            ctx->h[j] += wv[j];
800025e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800025e6:	ee fa ff fc 	ld.w	r10,r7[-4]
800025ea:	ee f8 fe c8 	ld.w	r8,r7[-312]
800025ee:	2d ea       	sub	r10,-34
800025f0:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800025f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025f8:	a3 68       	lsl	r8,0x2
800025fa:	ee 08 00 08 	add	r8,r7,r8
800025fe:	f0 f8 fe cc 	ld.w	r8,r8[-308]
80002602:	10 0a       	add	r10,r8
80002604:	ee f8 fe c8 	ld.w	r8,r7[-312]
80002608:	2d e9       	sub	r9,-34
8000260a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }

        for (j = 0; j < 8; j++) {
8000260e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002612:	2f f8       	sub	r8,-1
80002614:	ef 48 ff fc 	st.w	r7[-4],r8
80002618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000261c:	58 78       	cp.w	r8,7
8000261e:	fe 9a ff e2 	brle	800025e2 <sha256_transf+0x31a>

#ifndef UNROLL_LOOPS
    int j;
#endif

    for (i = 0; i < (int) block_nb; i++) {
80002622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002626:	2f f8       	sub	r8,-1
80002628:	ef 48 ff f8 	st.w	r7[-8],r8
8000262c:	ee f9 fe c0 	ld.w	r9,r7[-320]
80002630:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002634:	10 39       	cp.w	r9,r8
80002636:	fe 99 fe 58 	brgt	800022e6 <sha256_transf+0x1e>
        ctx->h[2] += wv[2]; ctx->h[3] += wv[3];
        ctx->h[4] += wv[4]; ctx->h[5] += wv[5];
        ctx->h[6] += wv[6]; ctx->h[7] += wv[7];
#endif /* !UNROLL_LOOPS */
    }
}
8000263a:	2b 0d       	sub	sp,-320
8000263c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002640:	00 00       	add	r0,r0
80002642:	00 28       	rsub	r8,r0

80002644 <sha256>:

void sha256(const unsigned char *message, unsigned int len, unsigned char *digest)
{
80002644:	eb cd 40 80 	pushm	r7,lr
80002648:	1a 97       	mov	r7,sp
8000264a:	fa cd 00 b4 	sub	sp,sp,180
8000264e:	ef 4c ff 54 	st.w	r7[-172],r12
80002652:	ef 4b ff 50 	st.w	r7[-176],r11
80002656:	ef 4a ff 4c 	st.w	r7[-180],r10
    sha256_ctx ctx;

    sha256_init(&ctx);
8000265a:	ee c8 00 a8 	sub	r8,r7,168
8000265e:	10 9c       	mov	r12,r8
80002660:	f0 1f 00 0b 	mcall	8000268c <sha256+0x48>
    sha256_update(&ctx, message, len);
80002664:	ee c8 00 a8 	sub	r8,r7,168
80002668:	ee fa ff 50 	ld.w	r10,r7[-176]
8000266c:	ee fb ff 54 	ld.w	r11,r7[-172]
80002670:	10 9c       	mov	r12,r8
80002672:	f0 1f 00 08 	mcall	80002690 <sha256+0x4c>
    sha256_final(&ctx, digest);
80002676:	ee c8 00 a8 	sub	r8,r7,168
8000267a:	ee fb ff 4c 	ld.w	r11,r7[-180]
8000267e:	10 9c       	mov	r12,r8
80002680:	f0 1f 00 05 	mcall	80002694 <sha256+0x50>
}
80002684:	2d 3d       	sub	sp,-180
80002686:	e3 cd 80 80 	ldm	sp++,r7,pc
8000268a:	00 00       	add	r0,r0
8000268c:	80 00       	ld.sh	r0,r0[0x0]
8000268e:	26 98       	sub	r8,105
80002690:	80 00       	ld.sh	r0,r0[0x0]
80002692:	26 f4       	sub	r4,111
80002694:	80 00       	ld.sh	r0,r0[0x0]
80002696:	28 1c       	sub	r12,-127

80002698 <sha256_init>:

void sha256_init(sha256_ctx *ctx)
{
80002698:	eb cd 40 80 	pushm	r7,lr
8000269c:	1a 97       	mov	r7,sp
8000269e:	20 2d       	sub	sp,8
800026a0:	ef 4c ff f8 	st.w	r7[-8],r12
#ifndef UNROLL_LOOPS
    int i;
    for (i = 0; i < 8; i++) {
800026a4:	30 08       	mov	r8,0
800026a6:	ef 48 ff fc 	st.w	r7[-4],r8
800026aa:	c1 28       	rjmp	800026ce <sha256_init+0x36>
        ctx->h[i] = sha256_h0[i];
800026ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800026b0:	ee fa ff fc 	ld.w	r10,r7[-4]
800026b4:	48 f8       	lddpc	r8,800026f0 <sha256_init+0x58>
800026b6:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800026ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026be:	2d e9       	sub	r9,-34
800026c0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

void sha256_init(sha256_ctx *ctx)
{
#ifndef UNROLL_LOOPS
    int i;
    for (i = 0; i < 8; i++) {
800026c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026c8:	2f f8       	sub	r8,-1
800026ca:	ef 48 ff fc 	st.w	r7[-4],r8
800026ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026d2:	58 78       	cp.w	r8,7
800026d4:	fe 9a ff ec 	brle	800026ac <sha256_init+0x14>
    ctx->h[2] = sha256_h0[2]; ctx->h[3] = sha256_h0[3];
    ctx->h[4] = sha256_h0[4]; ctx->h[5] = sha256_h0[5];
    ctx->h[6] = sha256_h0[6]; ctx->h[7] = sha256_h0[7];
#endif /* !UNROLL_LOOPS */

    ctx->len = 0;
800026d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026dc:	30 09       	mov	r9,0
800026de:	91 19       	st.w	r8[0x4],r9
    ctx->tot_len = 0;
800026e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026e4:	30 09       	mov	r9,0
800026e6:	91 09       	st.w	r8[0x0],r9
}
800026e8:	2f ed       	sub	sp,-8
800026ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800026ee:	00 00       	add	r0,r0
800026f0:	00 00       	add	r0,r0
800026f2:	00 08       	add	r8,r0

800026f4 <sha256_update>:

void sha256_update(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int len)
{
800026f4:	eb cd 40 80 	pushm	r7,lr
800026f8:	1a 97       	mov	r7,sp
800026fa:	20 8d       	sub	sp,32
800026fc:	ef 4c ff e8 	st.w	r7[-24],r12
80002700:	ef 4b ff e4 	st.w	r7[-28],r11
80002704:	ef 4a ff e0 	st.w	r7[-32],r10
    unsigned int block_nb;
    unsigned int new_len, rem_len, tmp_len;
    const unsigned char *shifted_message;

    tmp_len = SHA256_BLOCK_SIZE - ctx->len;
80002708:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000270c:	70 18       	ld.w	r8,r8[0x4]
8000270e:	f0 08 11 40 	rsub	r8,r8,64
80002712:	ef 48 ff f8 	st.w	r7[-8],r8
    rem_len = len < tmp_len ? len : tmp_len;
80002716:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000271a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000271e:	ee fa ff f8 	ld.w	r10,r7[-8]
80002722:	10 3a       	cp.w	r10,r8
80002724:	f2 08 17 80 	movls	r8,r9
80002728:	ef 48 ff f4 	st.w	r7[-12],r8

    memcpy(&ctx->block[ctx->len], message, rem_len);
8000272c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002730:	f0 c9 ff f8 	sub	r9,r8,-8
80002734:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002738:	70 18       	ld.w	r8,r8[0x4]
8000273a:	f2 08 00 08 	add	r8,r9,r8
8000273e:	ee fa ff f4 	ld.w	r10,r7[-12]
80002742:	ee fb ff e4 	ld.w	r11,r7[-28]
80002746:	10 9c       	mov	r12,r8
80002748:	f0 1f 00 33 	mcall	80002814 <sha256_update+0x120>

    if (ctx->len + len < SHA256_BLOCK_SIZE) {
8000274c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002750:	70 19       	ld.w	r9,r8[0x4]
80002752:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002756:	f2 08 00 08 	add	r8,r9,r8
8000275a:	e0 48 00 3f 	cp.w	r8,63
8000275e:	e0 8b 00 0c 	brhi	80002776 <sha256_update+0x82>
        ctx->len += len;
80002762:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002766:	70 19       	ld.w	r9,r8[0x4]
80002768:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000276c:	10 09       	add	r9,r8
8000276e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002772:	91 19       	st.w	r8[0x4],r9
        return;
80002774:	c4 c8       	rjmp	8000280c <sha256_update+0x118>
    }

    new_len = len - rem_len;
80002776:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000277a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000277e:	f2 08 01 08 	sub	r8,r9,r8
80002782:	ef 48 ff f0 	st.w	r7[-16],r8
    block_nb = new_len / SHA256_BLOCK_SIZE;
80002786:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000278a:	a7 88       	lsr	r8,0x6
8000278c:	ef 48 ff ec 	st.w	r7[-20],r8

    shifted_message = message + rem_len;
80002790:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002794:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002798:	f2 08 00 08 	add	r8,r9,r8
8000279c:	ef 48 ff fc 	st.w	r7[-4],r8

    sha256_transf(ctx, ctx->block, 1);
800027a0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027a4:	2f 88       	sub	r8,-8
800027a6:	30 1a       	mov	r10,1
800027a8:	10 9b       	mov	r11,r8
800027aa:	ee fc ff e8 	ld.w	r12,r7[-24]
800027ae:	f0 1f 00 1b 	mcall	80002818 <sha256_update+0x124>
    sha256_transf(ctx, shifted_message, block_nb);
800027b2:	ee fa ff ec 	ld.w	r10,r7[-20]
800027b6:	ee fb ff fc 	ld.w	r11,r7[-4]
800027ba:	ee fc ff e8 	ld.w	r12,r7[-24]
800027be:	f0 1f 00 17 	mcall	80002818 <sha256_update+0x124>

    rem_len = new_len % SHA256_BLOCK_SIZE;
800027c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027c6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800027ca:	ef 48 ff f4 	st.w	r7[-12],r8

    memcpy(ctx->block, &shifted_message[block_nb << 6],
800027ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800027d2:	a7 68       	lsl	r8,0x6
800027d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027d8:	10 09       	add	r9,r8
800027da:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027de:	2f 88       	sub	r8,-8
800027e0:	ee fa ff f4 	ld.w	r10,r7[-12]
800027e4:	12 9b       	mov	r11,r9
800027e6:	10 9c       	mov	r12,r8
800027e8:	f0 1f 00 0b 	mcall	80002814 <sha256_update+0x120>
           rem_len);

    ctx->len = rem_len;
800027ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800027f4:	91 19       	st.w	r8[0x4],r9
    ctx->tot_len += (block_nb + 1) << 6;
800027f6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027fa:	70 09       	ld.w	r9,r8[0x0]
800027fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002800:	2f f8       	sub	r8,-1
80002802:	a7 68       	lsl	r8,0x6
80002804:	10 09       	add	r9,r8
80002806:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000280a:	91 09       	st.w	r8[0x0],r9
}
8000280c:	2f 8d       	sub	sp,-32
8000280e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002812:	00 00       	add	r0,r0
80002814:	80 00       	ld.sh	r0,r0[0x0]
80002816:	e3 4a 80 00 	st.w	r1[-32768],r10
8000281a:	22 c8       	sub	r8,44

8000281c <sha256_final>:

void sha256_final(sha256_ctx *ctx, unsigned char *digest)
{
8000281c:	eb cd 40 80 	pushm	r7,lr
80002820:	1a 97       	mov	r7,sp
80002822:	20 6d       	sub	sp,24
80002824:	ef 4c ff ec 	st.w	r7[-20],r12
80002828:	ef 4b ff e8 	st.w	r7[-24],r11
#ifndef UNROLL_LOOPS
    int i;
#endif

    block_nb = (1 + ((SHA256_BLOCK_SIZE - 9)
                     < (ctx->len % SHA256_BLOCK_SIZE)));
8000282c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002830:	70 18       	ld.w	r8,r8[0x4]
80002832:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6

#ifndef UNROLL_LOOPS
    int i;
#endif

    block_nb = (1 + ((SHA256_BLOCK_SIZE - 9)
80002836:	e0 48 00 37 	cp.w	r8,55
8000283a:	e0 88 00 04 	brls	80002842 <sha256_final+0x26>
8000283e:	30 28       	mov	r8,2
80002840:	c0 28       	rjmp	80002844 <sha256_final+0x28>
80002842:	30 18       	mov	r8,1
80002844:	ef 48 ff f0 	st.w	r7[-16],r8
                     < (ctx->len % SHA256_BLOCK_SIZE)));

    len_b = (ctx->tot_len + ctx->len) << 3;
80002848:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000284c:	70 09       	ld.w	r9,r8[0x0]
8000284e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002852:	70 18       	ld.w	r8,r8[0x4]
80002854:	f2 08 00 08 	add	r8,r9,r8
80002858:	a3 78       	lsl	r8,0x3
8000285a:	ef 48 ff f8 	st.w	r7[-8],r8
    pm_len = block_nb << 6;
8000285e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002862:	a7 68       	lsl	r8,0x6
80002864:	ef 48 ff f4 	st.w	r7[-12],r8

    memset(ctx->block + ctx->len, 0, pm_len - ctx->len);
80002868:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000286c:	70 18       	ld.w	r8,r8[0x4]
8000286e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002872:	10 19       	sub	r9,r8
80002874:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002878:	f0 ca ff f8 	sub	r10,r8,-8
8000287c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002880:	70 18       	ld.w	r8,r8[0x4]
80002882:	f4 08 00 08 	add	r8,r10,r8
80002886:	12 9a       	mov	r10,r9
80002888:	30 0b       	mov	r11,0
8000288a:	10 9c       	mov	r12,r8
8000288c:	f0 1f 00 4e 	mcall	800029c4 <sha256_final+0x1a8>
    ctx->block[ctx->len] = 0x80;
80002890:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002894:	70 18       	ld.w	r8,r8[0x4]
80002896:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000289a:	10 09       	add	r9,r8
8000289c:	38 08       	mov	r8,-128
8000289e:	f3 68 00 08 	st.b	r9[8],r8
    UNPACK32(len_b, ctx->block + pm_len - 4);
800028a2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028a6:	f0 c9 ff f8 	sub	r9,r8,-8
800028aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028ae:	20 18       	sub	r8,1
800028b0:	10 09       	add	r9,r8
800028b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028b6:	5c 58       	castu.b	r8
800028b8:	b2 88       	st.b	r9[0x0],r8
800028ba:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028be:	f0 c9 ff f8 	sub	r9,r8,-8
800028c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028c6:	20 28       	sub	r8,2
800028c8:	10 09       	add	r9,r8
800028ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028ce:	a9 88       	lsr	r8,0x8
800028d0:	5c 58       	castu.b	r8
800028d2:	b2 88       	st.b	r9[0x0],r8
800028d4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028d8:	f0 c9 ff f8 	sub	r9,r8,-8
800028dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028e0:	20 38       	sub	r8,3
800028e2:	10 09       	add	r9,r8
800028e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028e8:	b1 88       	lsr	r8,0x10
800028ea:	5c 58       	castu.b	r8
800028ec:	b2 88       	st.b	r9[0x0],r8
800028ee:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028f2:	f0 c9 ff f8 	sub	r9,r8,-8
800028f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028fa:	20 48       	sub	r8,4
800028fc:	10 09       	add	r9,r8
800028fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002902:	b9 88       	lsr	r8,0x18
80002904:	5c 58       	castu.b	r8
80002906:	b2 88       	st.b	r9[0x0],r8

    sha256_transf(ctx, ctx->block, block_nb);
80002908:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000290c:	2f 88       	sub	r8,-8
8000290e:	ee fa ff f0 	ld.w	r10,r7[-16]
80002912:	10 9b       	mov	r11,r8
80002914:	ee fc ff ec 	ld.w	r12,r7[-20]
80002918:	f0 1f 00 2c 	mcall	800029c8 <sha256_final+0x1ac>

#ifndef UNROLL_LOOPS
    for (i = 0 ; i < 8; i++) {
8000291c:	30 08       	mov	r8,0
8000291e:	ef 48 ff fc 	st.w	r7[-4],r8
80002922:	c4 88       	rjmp	800029b2 <sha256_final+0x196>
        UNPACK32(ctx->h[i], &digest[i << 2]);
80002924:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002928:	a3 68       	lsl	r8,0x2
8000292a:	2f d8       	sub	r8,-3
8000292c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002930:	10 09       	add	r9,r8
80002932:	ee fa ff fc 	ld.w	r10,r7[-4]
80002936:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000293a:	2d ea       	sub	r10,-34
8000293c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002940:	5c 58       	castu.b	r8
80002942:	b2 88       	st.b	r9[0x0],r8
80002944:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002948:	a3 68       	lsl	r8,0x2
8000294a:	2f e8       	sub	r8,-2
8000294c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002950:	10 09       	add	r9,r8
80002952:	ee fa ff fc 	ld.w	r10,r7[-4]
80002956:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000295a:	2d ea       	sub	r10,-34
8000295c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002960:	a9 88       	lsr	r8,0x8
80002962:	5c 58       	castu.b	r8
80002964:	b2 88       	st.b	r9[0x0],r8
80002966:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000296a:	a3 68       	lsl	r8,0x2
8000296c:	2f f8       	sub	r8,-1
8000296e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002972:	10 09       	add	r9,r8
80002974:	ee fa ff fc 	ld.w	r10,r7[-4]
80002978:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000297c:	2d ea       	sub	r10,-34
8000297e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002982:	b1 88       	lsr	r8,0x10
80002984:	5c 58       	castu.b	r8
80002986:	b2 88       	st.b	r9[0x0],r8
80002988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000298c:	a3 68       	lsl	r8,0x2
8000298e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002992:	10 09       	add	r9,r8
80002994:	ee fa ff fc 	ld.w	r10,r7[-4]
80002998:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000299c:	2d ea       	sub	r10,-34
8000299e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800029a2:	b9 88       	lsr	r8,0x18
800029a4:	5c 58       	castu.b	r8
800029a6:	b2 88       	st.b	r9[0x0],r8
    UNPACK32(len_b, ctx->block + pm_len - 4);

    sha256_transf(ctx, ctx->block, block_nb);

#ifndef UNROLL_LOOPS
    for (i = 0 ; i < 8; i++) {
800029a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029ac:	2f f8       	sub	r8,-1
800029ae:	ef 48 ff fc 	st.w	r7[-4],r8
800029b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029b6:	58 78       	cp.w	r8,7
800029b8:	fe 9a ff b6 	brle	80002924 <sha256_final+0x108>
   UNPACK32(ctx->h[4], &digest[16]);
   UNPACK32(ctx->h[5], &digest[20]);
   UNPACK32(ctx->h[6], &digest[24]);
   UNPACK32(ctx->h[7], &digest[28]);
#endif /* !UNROLL_LOOPS */
}
800029bc:	2f ad       	sub	sp,-24
800029be:	e3 cd 80 80 	ldm	sp++,r7,pc
800029c2:	00 00       	add	r0,r0
800029c4:	80 00       	ld.sh	r0,r0[0x0]
800029c6:	e4 92 80 00 	brhs	800b29c6 <_data_lma+0xa39fe>
800029ca:	22 c8       	sub	r8,44

800029cc <pbkdf2_func>:

volatile uint256_t var_Password;


void pbkdf2_func(uint8_t *password, uint8_t *derived_key)
{
800029cc:	eb cd 40 80 	pushm	r7,lr
800029d0:	1a 97       	mov	r7,sp
800029d2:	fa cd 00 98 	sub	sp,sp,152
800029d6:	ef 4c ff 6c 	st.w	r7[-148],r12
800029da:	ef 4b ff 68 	st.w	r7[-152],r11
	unsigned short int iteration_count;
	unsigned char mac[hLen];
	unsigned char Ubuffer[hLen+4] = {0};
800029de:	ee c8 00 50 	sub	r8,r7,80
800029e2:	30 0a       	mov	r10,0
800029e4:	30 0b       	mov	r11,0
800029e6:	f0 eb 00 00 	st.d	r8[0],r10
800029ea:	2f 88       	sub	r8,-8
800029ec:	30 0a       	mov	r10,0
800029ee:	30 0b       	mov	r11,0
800029f0:	f0 eb 00 00 	st.d	r8[0],r10
800029f4:	2f 88       	sub	r8,-8
800029f6:	30 0a       	mov	r10,0
800029f8:	30 0b       	mov	r11,0
800029fa:	f0 eb 00 00 	st.d	r8[0],r10
800029fe:	2f 88       	sub	r8,-8
80002a00:	30 0a       	mov	r10,0
80002a02:	30 0b       	mov	r11,0
80002a04:	f0 eb 00 00 	st.d	r8[0],r10
80002a08:	2f 88       	sub	r8,-8
80002a0a:	30 09       	mov	r9,0
80002a0c:	91 09       	st.w	r8[0x0],r9
80002a0e:	2f c8       	sub	r8,-4
	unsigned char Tbuffer[hLen] = {0};
80002a10:	ee c8 00 70 	sub	r8,r7,112
80002a14:	30 0a       	mov	r10,0
80002a16:	30 0b       	mov	r11,0
80002a18:	f0 eb 00 00 	st.d	r8[0],r10
80002a1c:	2f 88       	sub	r8,-8
80002a1e:	30 0a       	mov	r10,0
80002a20:	30 0b       	mov	r11,0
80002a22:	f0 eb 00 00 	st.d	r8[0],r10
80002a26:	2f 88       	sub	r8,-8
80002a28:	30 0a       	mov	r10,0
80002a2a:	30 0b       	mov	r11,0
80002a2c:	f0 eb 00 00 	st.d	r8[0],r10
80002a30:	2f 88       	sub	r8,-8
80002a32:	30 0a       	mov	r10,0
80002a34:	30 0b       	mov	r11,0
80002a36:	f0 eb 00 00 	st.d	r8[0],r10
80002a3a:	2f 88       	sub	r8,-8
	unsigned char Fbuffer[hLen] = {0};
80002a3c:	ee c8 00 90 	sub	r8,r7,144
80002a40:	30 0a       	mov	r10,0
80002a42:	30 0b       	mov	r11,0
80002a44:	f0 eb 00 00 	st.d	r8[0],r10
80002a48:	2f 88       	sub	r8,-8
80002a4a:	30 0a       	mov	r10,0
80002a4c:	30 0b       	mov	r11,0
80002a4e:	f0 eb 00 00 	st.d	r8[0],r10
80002a52:	2f 88       	sub	r8,-8
80002a54:	30 0a       	mov	r10,0
80002a56:	30 0b       	mov	r11,0
80002a58:	f0 eb 00 00 	st.d	r8[0],r10
80002a5c:	2f 88       	sub	r8,-8
80002a5e:	30 0a       	mov	r10,0
80002a60:	30 0b       	mov	r11,0
80002a62:	f0 eb 00 00 	st.d	r8[0],r10
80002a66:	2f 88       	sub	r8,-8
	unsigned char total_blocks = hLen / hLen, block_num = 1;
80002a68:	30 18       	mov	r8,1
80002a6a:	ef 68 ff f6 	st.b	r7[-10],r8
80002a6e:	30 18       	mov	r8,1
80002a70:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char *Salt = (unsigned char *)var_Salt.index;
80002a74:	4e 58       	lddpc	r8,80002c08 <pbkdf2_func+0x23c>
80002a76:	ef 48 ff f8 	st.w	r7[-8],r8
	
	while (block_num <= total_blocks)
80002a7a:	cb b8       	rjmp	80002bf0 <pbkdf2_func+0x224>
	{
		iteration_count = 0;
80002a7c:	30 08       	mov	r8,0
80002a7e:	ef 58 ff f4 	st.h	r7[-12],r8
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002a82:	c9 a8       	rjmp	80002bb6 <pbkdf2_func+0x1ea>
		{
			unsigned short int i;
			if (iteration_count == 0)
80002a84:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002a88:	30 08       	mov	r8,0
80002a8a:	f0 09 19 00 	cp.h	r9,r8
80002a8e:	c5 e1       	brne	80002b4a <pbkdf2_func+0x17e>
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002a90:	30 08       	mov	r8,0
80002a92:	ef 58 ff fe 	st.h	r7[-2],r8
80002a96:	c1 38       	rjmp	80002abc <pbkdf2_func+0xf0>
				{
					Ubuffer[i] = Salt[i];
80002a98:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002a9c:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002aa0:	ee fa ff f8 	ld.w	r10,r7[-8]
80002aa4:	f4 08 00 08 	add	r8,r10,r8
80002aa8:	11 88       	ld.ub	r8,r8[0x0]
80002aaa:	ee 09 00 09 	add	r9,r7,r9
80002aae:	f3 68 ff b0 	st.b	r9[-80],r8
		{
			unsigned short int i;
			if (iteration_count == 0)
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002ab2:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002ab6:	2f f8       	sub	r8,-1
80002ab8:	ef 58 ff fe 	st.h	r7[-2],r8
80002abc:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80002ac0:	31 f8       	mov	r8,31
80002ac2:	f0 09 19 00 	cp.h	r9,r8
80002ac6:	fe 98 ff e9 	brls	80002a98 <pbkdf2_func+0xcc>
				{
					Ubuffer[i] = Salt[i];
				}
				Ubuffer[i++] = (block_num >> 24) & 0xFF;
80002aca:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002ace:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002ad2:	b9 48       	asr	r8,0x18
80002ad4:	5c 58       	castu.b	r8
80002ad6:	ee 09 00 09 	add	r9,r7,r9
80002ada:	f3 68 ff b0 	st.b	r9[-80],r8
80002ade:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002ae2:	2f f8       	sub	r8,-1
80002ae4:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 16) & 0xFF;
80002ae8:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002aec:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002af0:	b1 48       	asr	r8,0x10
80002af2:	5c 58       	castu.b	r8
80002af4:	ee 09 00 09 	add	r9,r7,r9
80002af8:	f3 68 ff b0 	st.b	r9[-80],r8
80002afc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002b00:	2f f8       	sub	r8,-1
80002b02:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 8) & 0xFF;
80002b06:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002b0a:	ee 08 00 09 	add	r9,r7,r8
80002b0e:	30 08       	mov	r8,0
80002b10:	f3 68 ff b0 	st.b	r9[-80],r8
80002b14:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002b18:	2f f8       	sub	r8,-1
80002b1a:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i] = (block_num >> 0) & 0xFF;
80002b1e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002b22:	ee 08 00 09 	add	r9,r7,r8
80002b26:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002b2a:	f3 68 ff b0 	st.b	r9[-80],r8
				hmac_sha256(password, 32, Ubuffer, 36, mac, 32);
80002b2e:	ee c8 00 2c 	sub	r8,r7,44
80002b32:	ee ca 00 50 	sub	r10,r7,80
80002b36:	32 09       	mov	r9,32
80002b38:	1a d9       	st.w	--sp,r9
80002b3a:	32 49       	mov	r9,36
80002b3c:	32 0b       	mov	r11,32
80002b3e:	ee fc ff 6c 	ld.w	r12,r7[-148]
80002b42:	f0 1f 00 33 	mcall	80002c0c <pbkdf2_func+0x240>
80002b46:	2f fd       	sub	sp,-4
80002b48:	c0 d8       	rjmp	80002b62 <pbkdf2_func+0x196>
			}
			else
			{
				hmac_sha256((const unsigned char *)var_Password.index, 32, Ubuffer, 32, mac, 32);
80002b4a:	4b 2c       	lddpc	r12,80002c10 <pbkdf2_func+0x244>
80002b4c:	ee c8 00 2c 	sub	r8,r7,44
80002b50:	ee ca 00 50 	sub	r10,r7,80
80002b54:	32 09       	mov	r9,32
80002b56:	1a d9       	st.w	--sp,r9
80002b58:	32 09       	mov	r9,32
80002b5a:	32 0b       	mov	r11,32
80002b5c:	f0 1f 00 2c 	mcall	80002c0c <pbkdf2_func+0x240>
80002b60:	2f fd       	sub	sp,-4
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
80002b62:	ee c9 00 2c 	sub	r9,r7,44
80002b66:	ee c8 00 90 	sub	r8,r7,144
80002b6a:	30 8a       	mov	r10,8
80002b6c:	12 9b       	mov	r11,r9
80002b6e:	10 9c       	mov	r12,r8
80002b70:	f0 1f 00 29 	mcall	80002c14 <pbkdf2_func+0x248>
			
			for (i = 0; i < hLen; i++)
80002b74:	30 08       	mov	r8,0
80002b76:	ef 58 ff fc 	st.h	r7[-4],r8
80002b7a:	c1 28       	rjmp	80002b9e <pbkdf2_func+0x1d2>
			{
				Ubuffer[i] = mac[i];
80002b7c:	ef 19 ff fc 	ld.uh	r9,r7[-4]
80002b80:	ef 18 ff fc 	ld.uh	r8,r7[-4]
80002b84:	ee 08 00 08 	add	r8,r7,r8
80002b88:	f1 38 ff d4 	ld.ub	r8,r8[-44]
80002b8c:	ee 09 00 09 	add	r9,r7,r9
80002b90:	f3 68 ff b0 	st.b	r9[-80],r8
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
			
			for (i = 0; i < hLen; i++)
80002b94:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80002b98:	2f f8       	sub	r8,-1
80002b9a:	ef 58 ff fc 	st.h	r7[-4],r8
80002b9e:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80002ba2:	31 f8       	mov	r8,31
80002ba4:	f0 09 19 00 	cp.h	r9,r8
80002ba8:	fe 98 ff ea 	brls	80002b7c <pbkdf2_func+0x1b0>
			{
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
80002bac:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80002bb0:	2f f8       	sub	r8,-1
80002bb2:	ef 58 ff f4 	st.h	r7[-12],r8
	unsigned char *Salt = (unsigned char *)var_Salt.index;
	
	while (block_num <= total_blocks)
	{
		iteration_count = 0;
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002bb6:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002bba:	e0 68 01 f3 	mov	r8,499
80002bbe:	f0 09 19 00 	cp.h	r9,r8
80002bc2:	fe 98 ff 61 	brls	80002a84 <pbkdf2_func+0xb8>
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
80002bc6:	ee c9 00 90 	sub	r9,r7,144
80002bca:	ee f8 ff 68 	ld.w	r8,r7[-152]
80002bce:	30 8a       	mov	r10,8
80002bd0:	12 9b       	mov	r11,r9
80002bd2:	10 9c       	mov	r12,r8
80002bd4:	f0 1f 00 10 	mcall	80002c14 <pbkdf2_func+0x248>
		memset(Fbuffer, 0, 32);		
80002bd8:	ee c8 00 90 	sub	r8,r7,144
80002bdc:	32 0a       	mov	r10,32
80002bde:	30 0b       	mov	r11,0
80002be0:	10 9c       	mov	r12,r8
80002be2:	f0 1f 00 0e 	mcall	80002c18 <pbkdf2_func+0x24c>
		block_num++;
80002be6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002bea:	2f f8       	sub	r8,-1
80002bec:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char Tbuffer[hLen] = {0};
	unsigned char Fbuffer[hLen] = {0};
	unsigned char total_blocks = hLen / hLen, block_num = 1;
	unsigned char *Salt = (unsigned char *)var_Salt.index;
	
	while (block_num <= total_blocks)
80002bf0:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80002bf4:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80002bf8:	f0 09 18 00 	cp.b	r9,r8
80002bfc:	fe 98 ff 40 	brls	80002a7c <pbkdf2_func+0xb0>
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
		memset(Fbuffer, 0, 32);		
		block_num++;
	}
80002c00:	2d ad       	sub	sp,-152
80002c02:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c06:	00 00       	add	r0,r0
80002c08:	00 00       	add	r0,r0
80002c0a:	09 58       	ld.sh	r8,--r4
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	22 5c       	sub	r12,37
80002c10:	00 00       	add	r0,r0
80002c12:	08 d8       	st.w	--r4,r8
80002c14:	80 00       	ld.sh	r0,r0[0x0]
80002c16:	2d 84       	sub	r4,-40
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	e4 92 eb cd 	brhs	800c03b4 <_data_lma+0xb13ec>

80002c1c <encrypt_password>:
volatile uint32_t var_W_ticks = 0;
volatile uint256_t var_Salt;


uint32_t * encrypt_password(uint32_t *password)
{
80002c1c:	eb cd 40 80 	pushm	r7,lr
80002c20:	1a 97       	mov	r7,sp
80002c22:	21 1d       	sub	sp,68
80002c24:	ef 4c ff bc 	st.w	r7[-68],r12
	uint8_t temp_dk[32] = {0}, temp_dk_digest[32] = {0};
80002c28:	ee c8 00 20 	sub	r8,r7,32
80002c2c:	30 0a       	mov	r10,0
80002c2e:	30 0b       	mov	r11,0
80002c30:	f0 eb 00 00 	st.d	r8[0],r10
80002c34:	2f 88       	sub	r8,-8
80002c36:	30 0a       	mov	r10,0
80002c38:	30 0b       	mov	r11,0
80002c3a:	f0 eb 00 00 	st.d	r8[0],r10
80002c3e:	2f 88       	sub	r8,-8
80002c40:	30 0a       	mov	r10,0
80002c42:	30 0b       	mov	r11,0
80002c44:	f0 eb 00 00 	st.d	r8[0],r10
80002c48:	2f 88       	sub	r8,-8
80002c4a:	30 0a       	mov	r10,0
80002c4c:	30 0b       	mov	r11,0
80002c4e:	f0 eb 00 00 	st.d	r8[0],r10
80002c52:	2f 88       	sub	r8,-8
80002c54:	ee c8 00 40 	sub	r8,r7,64
80002c58:	30 0a       	mov	r10,0
80002c5a:	30 0b       	mov	r11,0
80002c5c:	f0 eb 00 00 	st.d	r8[0],r10
80002c60:	2f 88       	sub	r8,-8
80002c62:	30 0a       	mov	r10,0
80002c64:	30 0b       	mov	r11,0
80002c66:	f0 eb 00 00 	st.d	r8[0],r10
80002c6a:	2f 88       	sub	r8,-8
80002c6c:	30 0a       	mov	r10,0
80002c6e:	30 0b       	mov	r11,0
80002c70:	f0 eb 00 00 	st.d	r8[0],r10
80002c74:	2f 88       	sub	r8,-8
80002c76:	30 0a       	mov	r10,0
80002c78:	30 0b       	mov	r11,0
80002c7a:	f0 eb 00 00 	st.d	r8[0],r10
80002c7e:	2f 88       	sub	r8,-8
	pbkdf2_func((uint8_t *)password, temp_dk);
80002c80:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002c84:	ee c9 00 20 	sub	r9,r7,32
80002c88:	12 9b       	mov	r11,r9
80002c8a:	10 9c       	mov	r12,r8
80002c8c:	f0 1f 00 0d 	mcall	80002cc0 <encrypt_password+0xa4>
	sha256(temp_dk, 32, temp_dk_digest);
80002c90:	ee c9 00 40 	sub	r9,r7,64
80002c94:	ee c8 00 20 	sub	r8,r7,32
80002c98:	12 9a       	mov	r10,r9
80002c9a:	32 0b       	mov	r11,32
80002c9c:	10 9c       	mov	r12,r8
80002c9e:	f0 1f 00 0a 	mcall	80002cc4 <encrypt_password+0xa8>
	apply_aes_encryption(&AVR32_AES, temp_dk_digest, 32, 0x00000000);
80002ca2:	ee c8 00 40 	sub	r8,r7,64
80002ca6:	30 09       	mov	r9,0
80002ca8:	32 0a       	mov	r10,32
80002caa:	10 9b       	mov	r11,r8
80002cac:	fc 7c 00 00 	mov	r12,-196608
80002cb0:	f0 1f 00 06 	mcall	80002cc8 <encrypt_password+0xac>
	return temp_dk_digest;	
80002cb4:	ee c8 00 40 	sub	r8,r7,64
}
80002cb8:	10 9c       	mov	r12,r8
80002cba:	2e fd       	sub	sp,-68
80002cbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cc0:	80 00       	ld.sh	r0,r0[0x0]
80002cc2:	29 cc       	sub	r12,-100
80002cc4:	80 00       	ld.sh	r0,r0[0x0]
80002cc6:	26 44       	sub	r4,100
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	3f b0       	mov	r0,-5

80002ccc <random_lcg>:


uint32_t random_lcg (void)
{
80002ccc:	eb cd 40 80 	pushm	r7,lr
80002cd0:	1a 97       	mov	r7,sp
	rseed = (rseed * 1103515245 + 12345) & RAND_MAX;
80002cd2:	48 a8       	lddpc	r8,80002cf8 <random_lcg+0x2c>
80002cd4:	70 09       	ld.w	r9,r8[0x0]
80002cd6:	e0 68 4e 6d 	mov	r8,20077
80002cda:	ea 18 41 c6 	orh	r8,0x41c6
80002cde:	f2 08 02 48 	mul	r8,r9,r8
80002ce2:	f0 c8 cf c7 	sub	r8,r8,-12345
80002ce6:	f3 d8 c0 1f 	bfextu	r9,r8,0x0,0x1f
80002cea:	48 48       	lddpc	r8,80002cf8 <random_lcg+0x2c>
80002cec:	91 09       	st.w	r8[0x0],r9
	return rseed;
80002cee:	48 38       	lddpc	r8,80002cf8 <random_lcg+0x2c>
80002cf0:	70 08       	ld.w	r8,r8[0x0]
}
80002cf2:	10 9c       	mov	r12,r8
80002cf4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cf8:	00 00       	add	r0,r0
80002cfa:	03 04       	ld.w	r4,r1++

80002cfc <calculate_salt>:

//void random_256 ()

void calculate_salt(void)
{
80002cfc:	eb cd 40 80 	pushm	r7,lr
80002d00:	1a 97       	mov	r7,sp
80002d02:	20 1d       	sub	sp,4
	uint32_t random_value = 0;
80002d04:	30 08       	mov	r8,0
80002d06:	ef 48 ff fc 	st.w	r7[-4],r8
	calculate_hash(pass_code, 8, var_Hkey.index); // Calculates sha256 of the keys pressed in var_W*10 msec interval and stores it in var_Hkey
80002d0a:	49 79       	lddpc	r9,80002d64 <calculate_salt+0x68>
80002d0c:	49 78       	lddpc	r8,80002d68 <calculate_salt+0x6c>
80002d0e:	70 08       	ld.w	r8,r8[0x0]
80002d10:	12 9a       	mov	r10,r9
80002d12:	30 8b       	mov	r11,8
80002d14:	10 9c       	mov	r12,r8
80002d16:	f0 1f 00 16 	mcall	80002d6c <calculate_salt+0x70>
 	
	random_value = random_lcg();	
80002d1a:	f0 1f 00 16 	mcall	80002d70 <calculate_salt+0x74>
80002d1e:	18 98       	mov	r8,r12
80002d20:	ef 48 ff fc 	st.w	r7[-4],r8
	
	calculate_hash(&random_value, 1, var_R.index);
80002d24:	49 49       	lddpc	r9,80002d74 <calculate_salt+0x78>
80002d26:	ee c8 00 04 	sub	r8,r7,4
80002d2a:	12 9a       	mov	r10,r9
80002d2c:	30 1b       	mov	r11,1
80002d2e:	10 9c       	mov	r12,r8
80002d30:	f0 1f 00 0f 	mcall	80002d6c <calculate_salt+0x70>
	
	xor_func(var_R.index, var_Hkey.index, 8);
80002d34:	48 c9       	lddpc	r9,80002d64 <calculate_salt+0x68>
80002d36:	49 08       	lddpc	r8,80002d74 <calculate_salt+0x78>
80002d38:	30 8a       	mov	r10,8
80002d3a:	12 9b       	mov	r11,r9
80002d3c:	10 9c       	mov	r12,r8
80002d3e:	f0 1f 00 0f 	mcall	80002d78 <calculate_salt+0x7c>
	
	calculate_hash(var_R.index, 8, var_T.index);
80002d42:	48 f9       	lddpc	r9,80002d7c <calculate_salt+0x80>
80002d44:	48 c8       	lddpc	r8,80002d74 <calculate_salt+0x78>
80002d46:	12 9a       	mov	r10,r9
80002d48:	30 8b       	mov	r11,8
80002d4a:	10 9c       	mov	r12,r8
80002d4c:	f0 1f 00 08 	mcall	80002d6c <calculate_salt+0x70>
 	
	xor_func(var_Salt.index, var_T.index, 8);
80002d50:	48 b9       	lddpc	r9,80002d7c <calculate_salt+0x80>
80002d52:	48 c8       	lddpc	r8,80002d80 <calculate_salt+0x84>
80002d54:	30 8a       	mov	r10,8
80002d56:	12 9b       	mov	r11,r9
80002d58:	10 9c       	mov	r12,r8
80002d5a:	f0 1f 00 08 	mcall	80002d78 <calculate_salt+0x7c>
	//else
	//{
		//Start_W_timer();	
	//}
	
}
80002d5e:	2f fd       	sub	sp,-4
80002d60:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d64:	00 00       	add	r0,r0
80002d66:	08 f8       	st.b	--r4,r8
80002d68:	00 00       	add	r0,r0
80002d6a:	09 78       	ld.ub	r8,--r4
80002d6c:	80 00       	ld.sh	r0,r0[0x0]
80002d6e:	2e 34       	sub	r4,-29
80002d70:	80 00       	ld.sh	r0,r0[0x0]
80002d72:	2c cc       	sub	r12,-52
80002d74:	00 00       	add	r0,r0
80002d76:	09 38       	ld.ub	r8,r4++
80002d78:	80 00       	ld.sh	r0,r0[0x0]
80002d7a:	2d 84       	sub	r4,-40
80002d7c:	00 00       	add	r0,r0
80002d7e:	09 18       	ld.sh	r8,r4++
80002d80:	00 00       	add	r0,r0
80002d82:	09 58       	ld.sh	r8,--r4

80002d84 <xor_func>:

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
80002d84:	eb cd 40 80 	pushm	r7,lr
80002d88:	1a 97       	mov	r7,sp
80002d8a:	20 4d       	sub	sp,16
80002d8c:	ef 4c ff f8 	st.w	r7[-8],r12
80002d90:	ef 4b ff f4 	st.w	r7[-12],r11
80002d94:	14 98       	mov	r8,r10
80002d96:	ef 68 ff f0 	st.b	r7[-16],r8
	unsigned char i = 0;
80002d9a:	30 08       	mov	r8,0
80002d9c:	ef 68 ff ff 	st.b	r7[-1],r8
	while (i++ < len)
80002da0:	c1 58       	rjmp	80002dca <xor_func+0x46>
	{
		*value1 = *value1 ^ *value2;
80002da2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002da6:	70 09       	ld.w	r9,r8[0x0]
80002da8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002dac:	70 08       	ld.w	r8,r8[0x0]
80002dae:	10 59       	eor	r9,r8
80002db0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002db4:	91 09       	st.w	r8[0x0],r9
		value1++;	value2++;
80002db6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dba:	2f c8       	sub	r8,-4
80002dbc:	ef 48 ff f8 	st.w	r7[-8],r8
80002dc0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002dc4:	2f c8       	sub	r8,-4
80002dc6:	ef 48 ff f4 	st.w	r7[-12],r8
}

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
	unsigned char i = 0;
	while (i++ < len)
80002dca:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002dce:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002dd2:	f0 09 18 00 	cp.b	r9,r8
80002dd6:	5f 38       	srlo	r8
80002dd8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002ddc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002de0:	2f f8       	sub	r8,-1
80002de2:	ef 68 ff ff 	st.b	r7[-1],r8
80002de6:	58 09       	cp.w	r9,0
80002de8:	cd d1       	brne	80002da2 <xor_func+0x1e>
	{
		*value1 = *value1 ^ *value2;
		value1++;	value2++;
	}
}
80002dea:	2f cd       	sub	sp,-16
80002dec:	e3 cd 80 80 	ldm	sp++,r7,pc

80002df0 <Start_W_timer>:
	volatile salt_t *salt = &SALT_STRUCT;
	memcpy((char *)salt->salt_value_primary, (const char *)var_Salt.index, 32);
}

void Start_W_timer(void)
{
80002df0:	eb cd 40 80 	pushm	r7,lr
80002df4:	1a 97       	mov	r7,sp
	var_W = random_lcg() % 500 + 50;
80002df6:	f0 1f 00 0d 	mcall	80002e28 <Start_W_timer+0x38>
80002dfa:	18 9a       	mov	r10,r12
80002dfc:	e0 68 4d d3 	mov	r8,19923
80002e00:	ea 18 10 62 	orh	r8,0x1062
80002e04:	f4 08 06 48 	mulu.d	r8,r10,r8
80002e08:	f2 08 16 05 	lsr	r8,r9,0x5
80002e0c:	e0 69 01 f4 	mov	r9,500
80002e10:	b3 38       	mul	r8,r9
80002e12:	f4 08 01 08 	sub	r8,r10,r8
80002e16:	f0 c9 ff ce 	sub	r9,r8,-50
80002e1a:	48 58       	lddpc	r8,80002e2c <Start_W_timer+0x3c>
80002e1c:	91 09       	st.w	r8[0x0],r9
	var_W_ticks = 0;	
80002e1e:	48 58       	lddpc	r8,80002e30 <Start_W_timer+0x40>
80002e20:	30 09       	mov	r9,0
80002e22:	91 09       	st.w	r8[0x0],r9
80002e24:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e28:	80 00       	ld.sh	r0,r0[0x0]
80002e2a:	2c cc       	sub	r12,-52
80002e2c:	00 00       	add	r0,r0
80002e2e:	01 28       	ld.uh	r8,r0++
80002e30:	00 00       	add	r0,r0
80002e32:	03 08       	ld.w	r8,r1++

80002e34 <calculate_hash>:
80002e34:	eb cd 40 c0 	pushm	r6-r7,lr
80002e38:	1a 97       	mov	r7,sp
80002e3a:	20 ed       	sub	sp,56
80002e3c:	ef 4c ff d0 	st.w	r7[-48],r12
80002e40:	16 98       	mov	r8,r11
80002e42:	ef 4a ff c8 	st.w	r7[-56],r10
80002e46:	ef 68 ff cc 	st.b	r7[-52],r8
80002e4a:	fe f8 03 8a 	ld.w	r8,pc[906]
80002e4e:	ef 48 ff e0 	st.w	r7[-32],r8
80002e52:	fe f8 03 86 	ld.w	r8,pc[902]
80002e56:	ef 48 ff ec 	st.w	r7[-20],r8
80002e5a:	30 08       	mov	r8,0
80002e5c:	ef 48 ff d4 	st.w	r7[-44],r8
80002e60:	c1 68       	rjmp	80002e8c <calculate_hash+0x58>
80002e62:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002e66:	a3 68       	lsl	r8,0x2
80002e68:	ee f9 ff e0 	ld.w	r9,r7[-32]
80002e6c:	f2 08 00 08 	add	r8,r9,r8
80002e70:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002e74:	a3 69       	lsl	r9,0x2
80002e76:	ee fa ff d0 	ld.w	r10,r7[-48]
80002e7a:	f4 09 00 09 	add	r9,r10,r9
80002e7e:	72 09       	ld.w	r9,r9[0x0]
80002e80:	91 09       	st.w	r8[0x0],r9
80002e82:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002e86:	2f f8       	sub	r8,-1
80002e88:	ef 48 ff d4 	st.w	r7[-44],r8
80002e8c:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80002e90:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002e94:	10 39       	cp.w	r9,r8
80002e96:	fe 99 ff e6 	brgt	80002e62 <calculate_hash+0x2e>
80002e9a:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80002e9e:	a3 68       	lsl	r8,0x2
80002ea0:	5c 58       	castu.b	r8
80002ea2:	10 9c       	mov	r12,r8
80002ea4:	f0 1f 00 ce 	mcall	800031dc <calculate_hash+0x3a8>
80002ea8:	fe f8 03 38 	ld.w	r8,pc[824]
80002eac:	ef 48 ff e4 	st.w	r7[-28],r8
80002eb0:	fe f8 03 24 	ld.w	r8,pc[804]
80002eb4:	ef 48 ff e8 	st.w	r7[-24],r8
80002eb8:	30 08       	mov	r8,0
80002eba:	ef 48 ff d4 	st.w	r7[-44],r8
80002ebe:	c1 68       	rjmp	80002eea <calculate_hash+0xb6>
80002ec0:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ec4:	a3 68       	lsl	r8,0x2
80002ec6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002eca:	f2 08 00 08 	add	r8,r9,r8
80002ece:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002ed2:	a3 69       	lsl	r9,0x2
80002ed4:	ee fa ff e8 	ld.w	r10,r7[-24]
80002ed8:	f4 09 00 09 	add	r9,r10,r9
80002edc:	72 09       	ld.w	r9,r9[0x0]
80002ede:	91 09       	st.w	r8[0x0],r9
80002ee0:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ee4:	2f f8       	sub	r8,-1
80002ee6:	ef 48 ff d4 	st.w	r7[-44],r8
80002eea:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002eee:	58 f8       	cp.w	r8,15
80002ef0:	fe 9a ff e8 	brle	80002ec0 <calculate_hash+0x8c>
80002ef4:	31 08       	mov	r8,16
80002ef6:	ef 48 ff d4 	st.w	r7[-44],r8
80002efa:	c7 58       	rjmp	80002fe4 <calculate_hash+0x1b0>
80002efc:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f00:	f0 c9 00 0f 	sub	r9,r8,15
80002f04:	fe f8 02 dc 	ld.w	r8,pc[732]
80002f08:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002f0c:	30 7b       	mov	r11,7
80002f0e:	10 9c       	mov	r12,r8
80002f10:	f0 1f 00 b5 	mcall	800031e4 <calculate_hash+0x3b0>
80002f14:	18 96       	mov	r6,r12
80002f16:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f1a:	f0 c9 00 0f 	sub	r9,r8,15
80002f1e:	fe f8 02 c2 	ld.w	r8,pc[706]
80002f22:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002f26:	31 2b       	mov	r11,18
80002f28:	10 9c       	mov	r12,r8
80002f2a:	f0 1f 00 af 	mcall	800031e4 <calculate_hash+0x3b0>
80002f2e:	18 98       	mov	r8,r12
80002f30:	ed e8 20 09 	eor	r9,r6,r8
80002f34:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f38:	f0 ca 00 0f 	sub	r10,r8,15
80002f3c:	fe f8 02 a4 	ld.w	r8,pc[676]
80002f40:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002f44:	a3 98       	lsr	r8,0x3
80002f46:	f3 e8 20 08 	eor	r8,r9,r8
80002f4a:	ef 48 ff d8 	st.w	r7[-40],r8
80002f4e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f52:	f0 c9 00 02 	sub	r9,r8,2
80002f56:	fe f8 02 8a 	ld.w	r8,pc[650]
80002f5a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002f5e:	31 1b       	mov	r11,17
80002f60:	10 9c       	mov	r12,r8
80002f62:	f0 1f 00 a1 	mcall	800031e4 <calculate_hash+0x3b0>
80002f66:	18 96       	mov	r6,r12
80002f68:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f6c:	f0 c9 00 02 	sub	r9,r8,2
80002f70:	fe f8 02 70 	ld.w	r8,pc[624]
80002f74:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002f78:	31 3b       	mov	r11,19
80002f7a:	10 9c       	mov	r12,r8
80002f7c:	f0 1f 00 9a 	mcall	800031e4 <calculate_hash+0x3b0>
80002f80:	18 98       	mov	r8,r12
80002f82:	ed e8 20 09 	eor	r9,r6,r8
80002f86:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f8a:	f0 ca 00 02 	sub	r10,r8,2
80002f8e:	fe f8 02 52 	ld.w	r8,pc[594]
80002f92:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002f96:	ab 88       	lsr	r8,0xa
80002f98:	f3 e8 20 08 	eor	r8,r9,r8
80002f9c:	ef 48 ff dc 	st.w	r7[-36],r8
80002fa0:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002fa4:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fa8:	f0 ca 00 10 	sub	r10,r8,16
80002fac:	fe f8 02 34 	ld.w	r8,pc[564]
80002fb0:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80002fb4:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002fb8:	10 0a       	add	r10,r8
80002fba:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fbe:	f0 cb 00 07 	sub	r11,r8,7
80002fc2:	fe f8 02 1e 	ld.w	r8,pc[542]
80002fc6:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
80002fca:	10 0a       	add	r10,r8
80002fcc:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002fd0:	10 0a       	add	r10,r8
80002fd2:	fe f8 02 0e 	ld.w	r8,pc[526]
80002fd6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80002fda:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fde:	2f f8       	sub	r8,-1
80002fe0:	ef 48 ff d4 	st.w	r7[-44],r8
80002fe4:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fe8:	e0 48 00 3f 	cp.w	r8,63
80002fec:	fe 9a ff 88 	brle	80002efc <calculate_hash+0xc8>
80002ff0:	30 08       	mov	r8,0
80002ff2:	ef 48 ff d4 	st.w	r7[-44],r8
80002ff6:	c1 38       	rjmp	8000301c <calculate_hash+0x1e8>
80002ff8:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ffc:	a3 68       	lsl	r8,0x2
80002ffe:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003002:	f2 08 00 08 	add	r8,r9,r8
80003006:	ee fa ff d4 	ld.w	r10,r7[-44]
8000300a:	4f 89       	lddpc	r9,800031e8 <calculate_hash+0x3b4>
8000300c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80003010:	91 09       	st.w	r8[0x0],r9
80003012:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003016:	2f f8       	sub	r8,-1
80003018:	ef 48 ff d4 	st.w	r7[-44],r8
8000301c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003020:	58 78       	cp.w	r8,7
80003022:	fe 9a ff eb 	brle	80002ff8 <calculate_hash+0x1c4>
80003026:	30 08       	mov	r8,0
80003028:	ef 48 ff d4 	st.w	r7[-44],r8
8000302c:	ca 68       	rjmp	80003178 <calculate_hash+0x344>
8000302e:	4e b8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
80003030:	70 08       	ld.w	r8,r8[0x0]
80003032:	30 2b       	mov	r11,2
80003034:	10 9c       	mov	r12,r8
80003036:	f0 1f 00 6c 	mcall	800031e4 <calculate_hash+0x3b0>
8000303a:	18 96       	mov	r6,r12
8000303c:	4e 78       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
8000303e:	70 08       	ld.w	r8,r8[0x0]
80003040:	30 db       	mov	r11,13
80003042:	10 9c       	mov	r12,r8
80003044:	f0 1f 00 68 	mcall	800031e4 <calculate_hash+0x3b0>
80003048:	18 98       	mov	r8,r12
8000304a:	10 56       	eor	r6,r8
8000304c:	4e 38       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
8000304e:	70 08       	ld.w	r8,r8[0x0]
80003050:	31 6b       	mov	r11,22
80003052:	10 9c       	mov	r12,r8
80003054:	f0 1f 00 64 	mcall	800031e4 <calculate_hash+0x3b0>
80003058:	18 98       	mov	r8,r12
8000305a:	ed e8 20 08 	eor	r8,r6,r8
8000305e:	ef 48 ff d8 	st.w	r7[-40],r8
80003062:	4d e8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
80003064:	70 09       	ld.w	r9,r8[0x0]
80003066:	4d d8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
80003068:	70 18       	ld.w	r8,r8[0x4]
8000306a:	10 69       	and	r9,r8
8000306c:	4d b8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
8000306e:	70 0a       	ld.w	r10,r8[0x0]
80003070:	4d a8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
80003072:	70 28       	ld.w	r8,r8[0x8]
80003074:	f5 e8 00 08 	and	r8,r10,r8
80003078:	10 59       	eor	r9,r8
8000307a:	4d 88       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
8000307c:	70 1a       	ld.w	r10,r8[0x4]
8000307e:	4d 78       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
80003080:	70 28       	ld.w	r8,r8[0x8]
80003082:	f5 e8 00 08 	and	r8,r10,r8
80003086:	f3 e8 20 08 	eor	r8,r9,r8
8000308a:	ef 48 ff f0 	st.w	r7[-16],r8
8000308e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003092:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003096:	f2 08 00 08 	add	r8,r9,r8
8000309a:	ef 48 ff f4 	st.w	r7[-12],r8
8000309e:	4c f8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
800030a0:	70 48       	ld.w	r8,r8[0x10]
800030a2:	30 6b       	mov	r11,6
800030a4:	10 9c       	mov	r12,r8
800030a6:	f0 1f 00 50 	mcall	800031e4 <calculate_hash+0x3b0>
800030aa:	18 96       	mov	r6,r12
800030ac:	4c b8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
800030ae:	70 48       	ld.w	r8,r8[0x10]
800030b0:	30 bb       	mov	r11,11
800030b2:	10 9c       	mov	r12,r8
800030b4:	f0 1f 00 4c 	mcall	800031e4 <calculate_hash+0x3b0>
800030b8:	18 98       	mov	r8,r12
800030ba:	10 56       	eor	r6,r8
800030bc:	4c 78       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
800030be:	70 48       	ld.w	r8,r8[0x10]
800030c0:	31 9b       	mov	r11,25
800030c2:	10 9c       	mov	r12,r8
800030c4:	f0 1f 00 48 	mcall	800031e4 <calculate_hash+0x3b0>
800030c8:	18 98       	mov	r8,r12
800030ca:	ed e8 20 08 	eor	r8,r6,r8
800030ce:	ef 48 ff dc 	st.w	r7[-36],r8
800030d2:	4c 28       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
800030d4:	70 49       	ld.w	r9,r8[0x10]
800030d6:	4c 18       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
800030d8:	70 58       	ld.w	r8,r8[0x14]
800030da:	10 69       	and	r9,r8
800030dc:	4b f8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
800030de:	70 48       	ld.w	r8,r8[0x10]
800030e0:	f0 0a 11 ff 	rsub	r10,r8,-1
800030e4:	4b d8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
800030e6:	70 68       	ld.w	r8,r8[0x18]
800030e8:	f5 e8 00 08 	and	r8,r10,r8
800030ec:	f3 e8 20 08 	eor	r8,r9,r8
800030f0:	ef 48 ff f8 	st.w	r7[-8],r8
800030f4:	4b 98       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
800030f6:	70 79       	ld.w	r9,r8[0x1c]
800030f8:	ee f8 ff dc 	ld.w	r8,r7[-36]
800030fc:	10 09       	add	r9,r8
800030fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003102:	10 09       	add	r9,r8
80003104:	ee fa ff d4 	ld.w	r10,r7[-44]
80003108:	4b 98       	lddpc	r8,800031ec <calculate_hash+0x3b8>
8000310a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000310e:	10 09       	add	r9,r8
80003110:	ee fa ff d4 	ld.w	r10,r7[-44]
80003114:	4b 38       	lddpc	r8,800031e0 <calculate_hash+0x3ac>
80003116:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000311a:	f2 08 00 08 	add	r8,r9,r8
8000311e:	ef 48 ff fc 	st.w	r7[-4],r8
80003122:	4a e8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
80003124:	70 69       	ld.w	r9,r8[0x18]
80003126:	4a d8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
80003128:	91 79       	st.w	r8[0x1c],r9
8000312a:	4a c8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
8000312c:	70 59       	ld.w	r9,r8[0x14]
8000312e:	4a b8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
80003130:	91 69       	st.w	r8[0x18],r9
80003132:	4a a8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
80003134:	70 49       	ld.w	r9,r8[0x10]
80003136:	4a 98       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
80003138:	91 59       	st.w	r8[0x14],r9
8000313a:	4a 88       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
8000313c:	70 39       	ld.w	r9,r8[0xc]
8000313e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003142:	10 09       	add	r9,r8
80003144:	4a 58       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
80003146:	91 49       	st.w	r8[0x10],r9
80003148:	4a 48       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
8000314a:	70 29       	ld.w	r9,r8[0x8]
8000314c:	4a 38       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
8000314e:	91 39       	st.w	r8[0xc],r9
80003150:	4a 28       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
80003152:	70 19       	ld.w	r9,r8[0x4]
80003154:	4a 18       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
80003156:	91 29       	st.w	r8[0x8],r9
80003158:	4a 08       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
8000315a:	70 09       	ld.w	r9,r8[0x0]
8000315c:	49 f8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
8000315e:	91 19       	st.w	r8[0x4],r9
80003160:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003164:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003168:	10 09       	add	r9,r8
8000316a:	49 c8       	lddpc	r8,800031d8 <calculate_hash+0x3a4>
8000316c:	91 09       	st.w	r8[0x0],r9
8000316e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003172:	2f f8       	sub	r8,-1
80003174:	ef 48 ff d4 	st.w	r7[-44],r8
80003178:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000317c:	e0 48 00 3f 	cp.w	r8,63
80003180:	fe 9a ff 57 	brle	8000302e <calculate_hash+0x1fa>
80003184:	30 08       	mov	r8,0
80003186:	ef 48 ff d4 	st.w	r7[-44],r8
8000318a:	c1 d8       	rjmp	800031c4 <calculate_hash+0x390>
8000318c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003190:	a3 68       	lsl	r8,0x2
80003192:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003196:	f2 08 00 08 	add	r8,r9,r8
8000319a:	ee fa ff d4 	ld.w	r10,r7[-44]
8000319e:	49 39       	lddpc	r9,800031e8 <calculate_hash+0x3b4>
800031a0:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
800031a4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800031a8:	a3 69       	lsl	r9,0x2
800031aa:	ee fb ff ec 	ld.w	r11,r7[-20]
800031ae:	f6 09 00 09 	add	r9,r11,r9
800031b2:	72 09       	ld.w	r9,r9[0x0]
800031b4:	f4 09 00 09 	add	r9,r10,r9
800031b8:	91 09       	st.w	r8[0x0],r9
800031ba:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031be:	2f f8       	sub	r8,-1
800031c0:	ef 48 ff d4 	st.w	r7[-44],r8
800031c4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031c8:	58 78       	cp.w	r8,7
800031ca:	fe 9a ff e1 	brle	8000318c <calculate_hash+0x358>
800031ce:	2f 2d       	sub	sp,-56
800031d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800031d4:	00 00       	add	r0,r0
800031d6:	03 0c       	ld.w	r12,r1++
800031d8:	00 00       	add	r0,r0
800031da:	09 7c       	ld.ub	r12,--r4
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	31 f0       	mov	r0,31
800031e0:	00 00       	add	r0,r0
800031e2:	03 4c       	ld.w	r12,--r1
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	32 68       	mov	r8,38
800031e8:	80 00       	ld.sh	r0,r0[0x0]
800031ea:	e8 20 80 00 	sub	r0,557056
800031ee:	e8 40 eb cd 	cp.w	r0,584653

800031f0 <PadtheMessage>:
800031f0:	eb cd 40 80 	pushm	r7,lr
800031f4:	1a 97       	mov	r7,sp
800031f6:	20 3d       	sub	sp,12
800031f8:	18 98       	mov	r8,r12
800031fa:	ef 68 ff f4 	st.b	r7[-12],r8
800031fe:	49 a8       	lddpc	r8,80003264 <PadtheMessage+0x74>
80003200:	ef 48 ff fc 	st.w	r7[-4],r8
80003204:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003208:	a3 78       	lsl	r8,0x3
8000320a:	ef 58 ff fa 	st.h	r7[-6],r8
8000320e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003212:	49 5a       	lddpc	r10,80003264 <PadtheMessage+0x74>
80003214:	38 08       	mov	r8,-128
80003216:	f4 09 0b 08 	st.b	r10[r9],r8
8000321a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000321e:	2f f8       	sub	r8,-1
80003220:	ef 68 ff f4 	st.b	r7[-12],r8
80003224:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003228:	ef 68 ff f9 	st.b	r7[-7],r8
8000322c:	c0 c8       	rjmp	80003244 <PadtheMessage+0x54>
8000322e:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80003232:	48 da       	lddpc	r10,80003264 <PadtheMessage+0x74>
80003234:	30 08       	mov	r8,0
80003236:	f4 09 0b 08 	st.b	r10[r9],r8
8000323a:	ef 38 ff f9 	ld.ub	r8,r7[-7]
8000323e:	2f f8       	sub	r8,-1
80003240:	ef 68 ff f9 	st.b	r7[-7],r8
80003244:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80003248:	33 f8       	mov	r8,63
8000324a:	f0 09 18 00 	cp.b	r9,r8
8000324e:	fe 98 ff f0 	brls	8000322e <PadtheMessage+0x3e>
80003252:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003256:	2c 48       	sub	r8,-60
80003258:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8000325c:	91 09       	st.w	r8[0x0],r9
8000325e:	2f dd       	sub	sp,-12
80003260:	e3 cd 80 80 	ldm	sp++,r7,pc
80003264:	00 00       	add	r0,r0
80003266:	03 0c       	ld.w	r12,r1++

80003268 <Rotate_right>:
80003268:	eb cd 40 80 	pushm	r7,lr
8000326c:	1a 97       	mov	r7,sp
8000326e:	20 3d       	sub	sp,12
80003270:	ef 4c ff f8 	st.w	r7[-8],r12
80003274:	ef 4b ff f4 	st.w	r7[-12],r11
80003278:	30 29       	mov	r9,2
8000327a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000327e:	f2 08 09 48 	lsl	r8,r9,r8
80003282:	20 18       	sub	r8,1
80003284:	ef 48 ff fc 	st.w	r7[-4],r8
80003288:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000328c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003290:	f2 08 0a 49 	lsr	r9,r9,r8
80003294:	ee fa ff f8 	ld.w	r10,r7[-8]
80003298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000329c:	10 6a       	and	r10,r8
8000329e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800032a2:	f0 08 11 20 	rsub	r8,r8,32
800032a6:	f4 08 09 48 	lsl	r8,r10,r8
800032aa:	f3 e8 10 08 	or	r8,r9,r8
800032ae:	10 9c       	mov	r12,r8
800032b0:	2f dd       	sub	sp,-12
800032b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800032b6 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
800032b6:	eb cd 40 80 	pushm	r7,lr
800032ba:	1a 97       	mov	r7,sp
800032bc:	20 1d       	sub	sp,4
800032be:	18 98       	mov	r8,r12
800032c0:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
800032c4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800032c8:	58 18       	cp.w	r8,1
800032ca:	c0 a0       	breq	800032de <osc_get_rate+0x28>
800032cc:	58 28       	cp.w	r8,2
800032ce:	c0 d0       	breq	800032e8 <osc_get_rate+0x32>
800032d0:	58 08       	cp.w	r8,0
800032d2:	c0 e1       	brne	800032ee <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
800032d4:	e0 68 1b 00 	mov	r8,6912
800032d8:	ea 18 00 b7 	orh	r8,0xb7
800032dc:	c0 a8       	rjmp	800032f0 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
800032de:	e0 68 44 00 	mov	r8,17408
800032e2:	ea 18 00 ac 	orh	r8,0xac
800032e6:	c0 58       	rjmp	800032f0 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
800032e8:	e0 68 80 00 	mov	r8,32768
800032ec:	c0 28       	rjmp	800032f0 <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
800032ee:	30 08       	mov	r8,0
	}
}
800032f0:	10 9c       	mov	r12,r8
800032f2:	2f fd       	sub	sp,-4
800032f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800032f8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
800032f8:	eb cd 40 80 	pushm	r7,lr
800032fc:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
800032fe:	30 0c       	mov	r12,0
80003300:	f0 1f 00 06 	mcall	80003318 <sysclk_get_main_hz+0x20>
80003304:	18 99       	mov	r9,r12
80003306:	12 98       	mov	r8,r9
80003308:	a3 68       	lsl	r8,0x2
8000330a:	12 08       	add	r8,r9
8000330c:	a1 78       	lsl	r8,0x1
8000330e:	12 08       	add	r8,r9
80003310:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80003312:	10 9c       	mov	r12,r8
80003314:	e3 cd 80 80 	ldm	sp++,r7,pc
80003318:	80 00       	ld.sh	r0,r0[0x0]
8000331a:	32 b6       	mov	r6,43

8000331c <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
8000331c:	eb cd 40 80 	pushm	r7,lr
80003320:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
80003322:	f0 1f 00 04 	mcall	80003330 <sysclk_get_pba_hz+0x14>
80003326:	18 98       	mov	r8,r12
}
80003328:	10 9c       	mov	r12,r8
8000332a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000332e:	00 00       	add	r0,r0
80003330:	80 00       	ld.sh	r0,r0[0x0]
80003332:	32 f8       	mov	r8,47

80003334 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
80003334:	eb cd 40 80 	pushm	r7,lr
80003338:	1a 97       	mov	r7,sp
8000333a:	20 1d       	sub	sp,4
8000333c:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003340:	ee fb ff fc 	ld.w	r11,r7[-4]
80003344:	30 1c       	mov	r12,1
80003346:	f0 1f 00 03 	mcall	80003350 <sysclk_enable_hsb_module+0x1c>
}
8000334a:	2f fd       	sub	sp,-4
8000334c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003350:	80 00       	ld.sh	r0,r0[0x0]
80003352:	ba b8       	st.b	sp[0x3],r8

80003354 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80003354:	eb cd 40 80 	pushm	r7,lr
80003358:	1a 97       	mov	r7,sp
8000335a:	20 1d       	sub	sp,4
8000335c:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003360:	ee fb ff fc 	ld.w	r11,r7[-4]
80003364:	30 2c       	mov	r12,2
80003366:	f0 1f 00 03 	mcall	80003370 <sysclk_enable_pba_module+0x1c>
}
8000336a:	2f fd       	sub	sp,-4
8000336c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003370:	80 00       	ld.sh	r0,r0[0x0]
80003372:	ba b8       	st.b	sp[0x3],r8

80003374 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
80003374:	eb cd 40 80 	pushm	r7,lr
80003378:	1a 97       	mov	r7,sp
8000337a:	20 1d       	sub	sp,4
8000337c:	ef 4c ff fc 	st.w	r7[-4],r12
	switch ((uintptr_t)module) {
80003380:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003384:	fe 58 14 00 	cp.w	r8,-60416
80003388:	e0 80 00 a5 	breq	800034d2 <sysclk_enable_peripheral_clock+0x15e>
8000338c:	e0 8b 00 40 	brhi	8000340c <sysclk_enable_peripheral_clock+0x98>
80003390:	fe 48 24 00 	cp.w	r8,-121856
80003394:	e0 80 00 d9 	breq	80003546 <sysclk_enable_peripheral_clock+0x1d2>
80003398:	e0 8b 00 1e 	brhi	800033d4 <sysclk_enable_peripheral_clock+0x60>
8000339c:	fe 48 10 00 	cp.w	r8,-126976
800033a0:	e0 80 00 b9 	breq	80003512 <sysclk_enable_peripheral_clock+0x19e>
800033a4:	e0 8b 00 0b 	brhi	800033ba <sysclk_enable_peripheral_clock+0x46>
800033a8:	fc 58 00 00 	cp.w	r8,-196608
800033ac:	e0 80 00 e0 	breq	8000356c <sysclk_enable_peripheral_clock+0x1f8>
800033b0:	fe 48 00 00 	cp.w	r8,-131072
800033b4:	e0 80 00 b3 	breq	8000351a <sysclk_enable_peripheral_clock+0x1a6>
		break;
#endif

	default:
		Assert(false);
		return;
800033b8:	cd e8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800033ba:	fe 48 1c 00 	cp.w	r8,-123904
800033be:	e0 80 00 bc 	breq	80003536 <sysclk_enable_peripheral_clock+0x1c2>
800033c2:	fe 48 20 00 	cp.w	r8,-122880
800033c6:	e0 80 00 bc 	breq	8000353e <sysclk_enable_peripheral_clock+0x1ca>
800033ca:	fe 48 14 00 	cp.w	r8,-125952
800033ce:	e0 80 00 ad 	breq	80003528 <sysclk_enable_peripheral_clock+0x1b4>
		break;
#endif

	default:
		Assert(false);
		return;
800033d2:	cd 18       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800033d4:	fe 58 00 00 	cp.w	r8,-65536
800033d8:	c5 60       	breq	80003484 <sysclk_enable_peripheral_clock+0x110>
800033da:	e0 8b 00 0f 	brhi	800033f8 <sysclk_enable_peripheral_clock+0x84>
800033de:	fe 48 40 00 	cp.w	r8,-114688
800033e2:	e0 80 00 b6 	breq	8000354e <sysclk_enable_peripheral_clock+0x1da>
800033e6:	fe 48 80 00 	cp.w	r8,-98304
800033ea:	e0 80 00 bd 	breq	80003564 <sysclk_enable_peripheral_clock+0x1f0>
800033ee:	fe 48 28 00 	cp.w	r8,-120832
800033f2:	e0 80 00 b2 	breq	80003556 <sysclk_enable_peripheral_clock+0x1e2>
		break;
#endif

	default:
		Assert(false);
		return;
800033f6:	cb f8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800033f8:	fe 58 0c 00 	cp.w	r8,-62464
800033fc:	c4 b0       	breq	80003492 <sysclk_enable_peripheral_clock+0x11e>
800033fe:	fe 58 10 00 	cp.w	r8,-61440
80003402:	c3 d0       	breq	8000347c <sysclk_enable_peripheral_clock+0x108>
80003404:	fe 58 08 00 	cp.w	r8,-63488
80003408:	c3 60       	breq	80003474 <sysclk_enable_peripheral_clock+0x100>
		break;
#endif

	default:
		Assert(false);
		return;
8000340a:	cb 58       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000340c:	fe 58 30 00 	cp.w	r8,-53248
80003410:	c5 50       	breq	800034ba <sysclk_enable_peripheral_clock+0x146>
80003412:	e0 8b 00 18 	brhi	80003442 <sysclk_enable_peripheral_clock+0xce>
80003416:	fe 58 20 00 	cp.w	r8,-57344
8000341a:	c6 80       	breq	800034ea <sysclk_enable_peripheral_clock+0x176>
8000341c:	e0 8b 00 09 	brhi	8000342e <sysclk_enable_peripheral_clock+0xba>
80003420:	fe 58 18 00 	cp.w	r8,-59392
80003424:	c5 b0       	breq	800034da <sysclk_enable_peripheral_clock+0x166>
80003426:	fe 58 1c 00 	cp.w	r8,-58368
8000342a:	c5 c0       	breq	800034e2 <sysclk_enable_peripheral_clock+0x16e>
		break;
#endif

	default:
		Assert(false);
		return;
8000342c:	ca 48       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000342e:	fe 58 28 00 	cp.w	r8,-55296
80003432:	c3 c0       	breq	800034aa <sysclk_enable_peripheral_clock+0x136>
80003434:	fe 58 2c 00 	cp.w	r8,-54272
80003438:	c3 d0       	breq	800034b2 <sysclk_enable_peripheral_clock+0x13e>
8000343a:	fe 58 24 00 	cp.w	r8,-56320
8000343e:	c3 20       	breq	800034a2 <sysclk_enable_peripheral_clock+0x12e>
		break;
#endif

	default:
		Assert(false);
		return;
80003440:	c9 a8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003442:	fe 58 40 00 	cp.w	r8,-49152
80003446:	c6 20       	breq	8000350a <sysclk_enable_peripheral_clock+0x196>
80003448:	e0 8b 00 0c 	brhi	80003460 <sysclk_enable_peripheral_clock+0xec>
8000344c:	fe 58 38 00 	cp.w	r8,-51200
80003450:	c5 50       	breq	800034fa <sysclk_enable_peripheral_clock+0x186>
80003452:	fe 58 3c 00 	cp.w	r8,-50176
80003456:	c2 20       	breq	8000349a <sysclk_enable_peripheral_clock+0x126>
80003458:	fe 58 34 00 	cp.w	r8,-52224
8000345c:	c4 b0       	breq	800034f2 <sysclk_enable_peripheral_clock+0x17e>
		break;
#endif

	default:
		Assert(false);
		return;
8000345e:	c8 b8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003460:	fe 58 50 00 	cp.w	r8,-45056
80003464:	c2 f0       	breq	800034c2 <sysclk_enable_peripheral_clock+0x14e>
80003466:	fe 58 54 00 	cp.w	r8,-44032
8000346a:	c3 00       	breq	800034ca <sysclk_enable_peripheral_clock+0x156>
8000346c:	fe 58 44 00 	cp.w	r8,-48128
80003470:	c4 90       	breq	80003502 <sysclk_enable_peripheral_clock+0x18e>
		break;
#endif

	default:
		Assert(false);
		return;
80003472:	c8 18       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
	case AVR32_INTC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_INTC);
80003474:	30 0c       	mov	r12,0
80003476:	f0 1f 00 42 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
8000347a:	c7 d8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_GPIO_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_GPIO);
8000347c:	30 1c       	mov	r12,1
8000347e:	f0 1f 00 40 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
80003482:	c7 98       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PDCA_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
80003484:	30 4c       	mov	r12,4
80003486:	f0 1f 00 3f 	mcall	80003580 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pba_module(SYSCLK_PDCA_PB);
8000348a:	30 2c       	mov	r12,2
8000348c:	f0 1f 00 3c 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
80003490:	c7 28       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PM);
80003492:	30 3c       	mov	r12,3
80003494:	f0 1f 00 3a 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
80003498:	c6 e8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ADC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ADC);
8000349a:	30 4c       	mov	r12,4
8000349c:	f0 1f 00 38 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
800034a0:	c6 a8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI0);
800034a2:	30 5c       	mov	r12,5
800034a4:	f0 1f 00 36 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
800034a8:	c6 68       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
800034aa:	30 6c       	mov	r12,6
800034ac:	f0 1f 00 34 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
800034b0:	c6 28       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
800034b2:	30 7c       	mov	r12,7
800034b4:	f0 1f 00 32 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
800034b8:	c5 e8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
800034ba:	30 8c       	mov	r12,8
800034bc:	f0 1f 00 30 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
800034c0:	c5 a8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
800034c2:	30 9c       	mov	r12,9
800034c4:	f0 1f 00 2e 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
800034c8:	c5 68       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
800034ca:	30 ac       	mov	r12,10
800034cc:	f0 1f 00 2c 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
800034d0:	c5 28       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART0);
800034d2:	30 bc       	mov	r12,11
800034d4:	f0 1f 00 2a 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
800034d8:	c4 e8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART1);
800034da:	30 cc       	mov	r12,12
800034dc:	f0 1f 00 28 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
800034e0:	c4 a8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART2_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
800034e2:	30 dc       	mov	r12,13
800034e4:	f0 1f 00 26 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
800034e8:	c4 68       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART3_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART3);
800034ea:	30 ec       	mov	r12,14
800034ec:	f0 1f 00 24 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
800034f0:	c4 28       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SSC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SSC);
800034f2:	30 fc       	mov	r12,15
800034f4:	f0 1f 00 22 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
800034f8:	c3 e8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC0);
800034fa:	31 0c       	mov	r12,16
800034fc:	f0 1f 00 20 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
80003500:	c3 a8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC1);
80003502:	31 1c       	mov	r12,17
80003504:	f0 1f 00 1e 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
80003508:	c3 68       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ABDAC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DAC);
8000350a:	31 2c       	mov	r12,18
8000350c:	f0 1f 00 1c 	mcall	8000357c <sysclk_enable_peripheral_clock+0x208>
		break;
80003510:	c3 28       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_HMATRIX_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
80003512:	30 0c       	mov	r12,0
80003514:	f0 1f 00 1c 	mcall	80003584 <sysclk_enable_peripheral_clock+0x210>
		break;
80003518:	c2 e8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USBB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000351a:	30 3c       	mov	r12,3
8000351c:	f0 1f 00 19 	mcall	80003580 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80003520:	30 1c       	mov	r12,1
80003522:	f0 1f 00 19 	mcall	80003584 <sysclk_enable_peripheral_clock+0x210>
		break;
80003526:	c2 78       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_FLASHC_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_FLASHC_DATA);
80003528:	30 0c       	mov	r12,0
8000352a:	f0 1f 00 16 	mcall	80003580 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_FLASHC_REGS);
8000352e:	30 2c       	mov	r12,2
80003530:	f0 1f 00 15 	mcall	80003584 <sysclk_enable_peripheral_clock+0x210>
		break;
80003534:	c2 08       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SMC_REGS);
80003536:	30 3c       	mov	r12,3
80003538:	f0 1f 00 13 	mcall	80003584 <sysclk_enable_peripheral_clock+0x210>
		break;
8000353c:	c1 c8       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SDRAMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SDRAMC_REGS);
8000353e:	30 4c       	mov	r12,4
80003540:	f0 1f 00 11 	mcall	80003584 <sysclk_enable_peripheral_clock+0x210>
		break;
80003544:	c1 88       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ECCHRS_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_ECC);
80003546:	30 5c       	mov	r12,5
80003548:	f0 1f 00 0f 	mcall	80003584 <sysclk_enable_peripheral_clock+0x210>
		break;
8000354c:	c1 48       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MCI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MCI);
8000354e:	30 6c       	mov	r12,6
80003550:	f0 1f 00 0d 	mcall	80003584 <sysclk_enable_peripheral_clock+0x210>
		break;
80003554:	c1 08       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_BUSMON_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_BUSMON_HSB);
80003556:	30 8c       	mov	r12,8
80003558:	f0 1f 00 0a 	mcall	80003580 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_BUSMON);
8000355c:	30 7c       	mov	r12,7
8000355e:	f0 1f 00 0a 	mcall	80003584 <sysclk_enable_peripheral_clock+0x210>
		break;
80003562:	c0 98       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MSI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MSI);
80003564:	30 8c       	mov	r12,8
80003566:	f0 1f 00 08 	mcall	80003584 <sysclk_enable_peripheral_clock+0x210>
		break;
8000356a:	c0 58       	rjmp	80003574 <sysclk_enable_peripheral_clock+0x200>

#if defined(AVR32_AES_ADDRESS)
	case AVR32_AES_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_AES);
8000356c:	30 9c       	mov	r12,9
8000356e:	f0 1f 00 06 	mcall	80003584 <sysclk_enable_peripheral_clock+0x210>
		break;
80003572:	d7 03       	nop

	default:
		Assert(false);
		return;
	}
}
80003574:	2f fd       	sub	sp,-4
80003576:	e3 cd 80 80 	ldm	sp++,r7,pc
8000357a:	00 00       	add	r0,r0
8000357c:	80 00       	ld.sh	r0,r0[0x0]
8000357e:	33 54       	mov	r4,53
80003580:	80 00       	ld.sh	r0,r0[0x0]
80003582:	33 34       	mov	r4,51
80003584:	80 00       	ld.sh	r0,r0[0x0]
80003586:	bb 2c       	st.d	sp++,r12

80003588 <tc_irq>:
 * The ISR handles RC compare interrupt and sets the update_timer flag to
 * update the timer value.
 */
__attribute__((__interrupt__))
static void tc_irq(void)
{
80003588:	eb cd 40 80 	pushm	r7,lr
8000358c:	1a 97       	mov	r7,sp
	// Increment the ms seconds counter
	tc_tick++;
8000358e:	4a 68       	lddpc	r8,80003624 <tc_irq+0x9c>
80003590:	70 08       	ld.w	r8,r8[0x0]
80003592:	f0 c9 ff ff 	sub	r9,r8,-1
80003596:	4a 48       	lddpc	r8,80003624 <tc_irq+0x9c>
80003598:	91 09       	st.w	r8[0x0],r9
	 * in the Watch Window.
	 */

	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
8000359a:	30 0b       	mov	r11,0
8000359c:	fe 7c 38 00 	mov	r12,-51200
800035a0:	f0 1f 00 22 	mcall	80003628 <tc_irq+0xa0>

	if (entry_mode_status == NO_MODE_SELECTED)
800035a4:	4a 28       	lddpc	r8,8000362c <tc_irq+0xa4>
800035a6:	11 88       	ld.ub	r8,r8[0x0]
800035a8:	5c 58       	castu.b	r8
800035aa:	c1 51       	brne	800035d4 <tc_irq+0x4c>
	{
		if (check_programming_mode_entry_sequence() == true)
800035ac:	f0 1f 00 21 	mcall	80003630 <tc_irq+0xa8>
800035b0:	18 98       	mov	r8,r12
800035b2:	58 08       	cp.w	r8,0
800035b4:	c0 50       	breq	800035be <tc_irq+0x36>
		{
			entry_mode_status = PROGRAMMING_MODE;
800035b6:	49 e9       	lddpc	r9,8000362c <tc_irq+0xa4>
800035b8:	30 18       	mov	r8,1
800035ba:	b2 88       	st.b	r9[0x0],r8
800035bc:	c0 c8       	rjmp	800035d4 <tc_irq+0x4c>
		}
		else if (check_normal_mode_entry_sequence() == true)
800035be:	f0 1f 00 1e 	mcall	80003634 <tc_irq+0xac>
800035c2:	18 98       	mov	r8,r12
800035c4:	58 08       	cp.w	r8,0
800035c6:	c0 70       	breq	800035d4 <tc_irq+0x4c>
		{
			entry_mode_status = NORMAL_MODE;
800035c8:	49 99       	lddpc	r9,8000362c <tc_irq+0xa4>
800035ca:	30 28       	mov	r8,2
800035cc:	b2 88       	st.b	r9[0x0],r8
			pass_code = temp_password;
800035ce:	49 b8       	lddpc	r8,80003638 <tc_irq+0xb0>
800035d0:	49 b9       	lddpc	r9,8000363c <tc_irq+0xb4>
800035d2:	91 09       	st.w	r8[0x0],r9
		}
	}
	
	if (entry_mode_status == PROGRAMMING_MODE)
800035d4:	49 68       	lddpc	r8,8000362c <tc_irq+0xa4>
800035d6:	11 88       	ld.ub	r8,r8[0x0]
800035d8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800035dc:	30 18       	mov	r8,1
800035de:	f0 09 18 00 	cp.b	r9,r8
800035e2:	c0 e1       	brne	800035fe <tc_irq+0x76>
	{
		if (!mode_selected)
800035e4:	49 78       	lddpc	r8,80003640 <tc_irq+0xb8>
800035e6:	11 88       	ld.ub	r8,r8[0x0]
800035e8:	5c 58       	castu.b	r8
800035ea:	ec 18 00 01 	eorl	r8,0x1
800035ee:	5c 58       	castu.b	r8
800035f0:	c0 40       	breq	800035f8 <tc_irq+0x70>
		{
			check_for_mode_selected();
800035f2:	f0 1f 00 15 	mcall	80003644 <tc_irq+0xbc>
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
800035f6:	c0 e8       	rjmp	80003612 <tc_irq+0x8a>
800035f8:	f0 1f 00 14 	mcall	80003648 <tc_irq+0xc0>
800035fc:	c0 b8       	rjmp	80003612 <tc_irq+0x8a>
				//save_to_mcu_flash();
			}
		}
	}

	else if (entry_mode_status == NORMAL_MODE)
800035fe:	48 c8       	lddpc	r8,8000362c <tc_irq+0xa4>
80003600:	11 88       	ld.ub	r8,r8[0x0]
80003602:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003606:	30 28       	mov	r8,2
80003608:	f0 09 18 00 	cp.b	r9,r8
8000360c:	c0 31       	brne	80003612 <tc_irq+0x8a>
	{
		read_password();
8000360e:	f0 1f 00 10 	mcall	8000364c <tc_irq+0xc4>
	



	// specify that an interrupt has been raised
	update_timer = true;
80003612:	49 09       	lddpc	r9,80003650 <tc_irq+0xc8>
80003614:	30 18       	mov	r8,1
80003616:	b2 88       	st.b	r9[0x0],r8
	// Toggle the GPIO line
	gpio_tgl_gpio_pin(EXAMPLE_TOGGLE_PIN);
80003618:	30 3c       	mov	r12,3
8000361a:	f0 1f 00 0f 	mcall	80003654 <tc_irq+0xcc>
}
8000361e:	e3 cd 40 80 	ldm	sp++,r7,lr
80003622:	d6 03       	rete
80003624:	00 00       	add	r0,r0
80003626:	04 4c       	or	r12,r2
80003628:	80 00       	ld.sh	r0,r0[0x0]
8000362a:	94 6a       	ld.sh	r10,r10[0xc]
8000362c:	00 00       	add	r0,r0
8000362e:	04 54       	eor	r4,r2
80003630:	80 00       	ld.sh	r0,r0[0x0]
80003632:	3a 64       	mov	r4,-90
80003634:	80 00       	ld.sh	r0,r0[0x0]
80003636:	3a f0       	mov	r0,-81
80003638:	00 00       	add	r0,r0
8000363a:	09 78       	ld.ub	r8,--r4
8000363c:	00 00       	add	r0,r0
8000363e:	02 c0       	st.b	r1++,r0
80003640:	00 00       	add	r0,r0
80003642:	04 50       	eor	r0,r2
80003644:	80 00       	ld.sh	r0,r0[0x0]
80003646:	3c 0c       	mov	r12,-64
80003648:	80 00       	ld.sh	r0,r0[0x0]
8000364a:	3c 20       	mov	r0,-62
8000364c:	80 00       	ld.sh	r0,r0[0x0]
8000364e:	3d 18       	mov	r8,-47
80003650:	00 00       	add	r0,r0
80003652:	01 2c       	ld.uh	r12,r0++
80003654:	80 00       	ld.sh	r0,r0[0x0]
80003656:	8a 26       	ld.sh	r6,r5[0x4]

80003658 <is_button_released>:

bool is_button_released(void)
{
80003658:	eb cd 40 80 	pushm	r7,lr
8000365c:	1a 97       	mov	r7,sp
	if ((check_all_buttons_high() == true) && (button_released == false))
8000365e:	f0 1f 00 0b 	mcall	80003688 <is_button_released+0x30>
80003662:	18 98       	mov	r8,r12
80003664:	58 08       	cp.w	r8,0
80003666:	c0 b0       	breq	8000367c <is_button_released+0x24>
80003668:	48 98       	lddpc	r8,8000368c <is_button_released+0x34>
8000366a:	11 88       	ld.ub	r8,r8[0x0]
8000366c:	5c 58       	castu.b	r8
8000366e:	ec 18 00 01 	eorl	r8,0x1
80003672:	5c 58       	castu.b	r8
80003674:	c0 40       	breq	8000367c <is_button_released+0x24>
	{
		button_released = true;
80003676:	48 69       	lddpc	r9,8000368c <is_button_released+0x34>
80003678:	30 18       	mov	r8,1
8000367a:	b2 88       	st.b	r9[0x0],r8
	}
	return button_released;
8000367c:	48 48       	lddpc	r8,8000368c <is_button_released+0x34>
8000367e:	11 88       	ld.ub	r8,r8[0x0]
80003680:	5c 58       	castu.b	r8
}
80003682:	10 9c       	mov	r12,r8
80003684:	e3 cd 80 80 	ldm	sp++,r7,pc
80003688:	80 00       	ld.sh	r0,r0[0x0]
8000368a:	38 9c       	mov	r12,-119
8000368c:	00 00       	add	r0,r0
8000368e:	01 2e       	ld.uh	lr,r0++

80003690 <Read_button>:

void Read_button(void)
{
80003690:	eb cd 40 80 	pushm	r7,lr
80003694:	1a 97       	mov	r7,sp
80003696:	20 1d       	sub	sp,4
	uint8_t button_value = 0;
80003698:	30 08       	mov	r8,0
8000369a:	ef 68 ff ff 	st.b	r7[-1],r8
	
	button_value = button_pressed();
8000369e:	f0 1f 00 3f 	mcall	80003798 <Read_button+0x108>
800036a2:	18 98       	mov	r8,r12
800036a4:	ef 68 ff ff 	st.b	r7[-1],r8
	switch (button_value)
800036a8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036ac:	58 48       	cp.w	r8,4
800036ae:	c0 50       	breq	800036b8 <Read_button+0x28>
800036b0:	e0 48 00 ff 	cp.w	r8,255
800036b4:	c5 10       	breq	80003756 <Read_button+0xc6>
800036b6:	c2 88       	rjmp	80003706 <Read_button+0x76>
	{
		case ENTER_BUTTON:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
800036b8:	4b 98       	lddpc	r8,8000379c <Read_button+0x10c>
800036ba:	11 88       	ld.ub	r8,r8[0x0]
800036bc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800036c0:	30 18       	mov	r8,1
800036c2:	f0 09 18 00 	cp.b	r9,r8
800036c6:	c0 d1       	brne	800036e0 <Read_button+0x50>
			{
				if (mode_selected)
800036c8:	4b 68       	lddpc	r8,800037a0 <Read_button+0x110>
800036ca:	11 88       	ld.ub	r8,r8[0x0]
800036cc:	5c 58       	castu.b	r8
800036ce:	c4 60       	breq	8000375a <Read_button+0xca>
				{
					enter_button_status++;
800036d0:	4b 58       	lddpc	r8,800037a4 <Read_button+0x114>
800036d2:	11 88       	ld.ub	r8,r8[0x0]
800036d4:	5c 58       	castu.b	r8
800036d6:	2f f8       	sub	r8,-1
800036d8:	5c 58       	castu.b	r8
800036da:	4b 39       	lddpc	r9,800037a4 <Read_button+0x114>
800036dc:	b2 88       	st.b	r9[0x0],r8
			{
				normal_mode_password_entered = true;
			}

			
			break;
800036de:	c4 38       	rjmp	80003764 <Read_button+0xd4>
				//else
				//{
					//mode_selected = true;
				//}
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
800036e0:	4a f8       	lddpc	r8,8000379c <Read_button+0x10c>
800036e2:	11 88       	ld.ub	r8,r8[0x0]
800036e4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800036e8:	30 28       	mov	r8,2
800036ea:	f0 09 18 00 	cp.b	r9,r8
800036ee:	c3 81       	brne	8000375e <Read_button+0xce>
800036f0:	4a e8       	lddpc	r8,800037a8 <Read_button+0x118>
800036f2:	11 88       	ld.ub	r8,r8[0x0]
800036f4:	5c 58       	castu.b	r8
800036f6:	ec 18 00 01 	eorl	r8,0x1
800036fa:	5c 58       	castu.b	r8
800036fc:	c3 30       	breq	80003762 <Read_button+0xd2>
			{
				normal_mode_password_entered = true;
800036fe:	4a b9       	lddpc	r9,800037a8 <Read_button+0x118>
80003700:	30 18       	mov	r8,1
80003702:	b2 88       	st.b	r9[0x0],r8
			}

			
			break;
80003704:	c3 08       	rjmp	80003764 <Read_button+0xd4>
		case NO_BUTTON:
		break;
		
		default:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
80003706:	4a 68       	lddpc	r8,8000379c <Read_button+0x10c>
80003708:	11 88       	ld.ub	r8,r8[0x0]
8000370a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000370e:	30 18       	mov	r8,1
80003710:	f0 09 18 00 	cp.b	r9,r8
80003714:	c1 31       	brne	8000373a <Read_button+0xaa>
			{
				if (mode_selected)
80003716:	4a 38       	lddpc	r8,800037a0 <Read_button+0x110>
80003718:	11 88       	ld.ub	r8,r8[0x0]
8000371a:	5c 58       	castu.b	r8
8000371c:	c0 70       	breq	8000372a <Read_button+0x9a>
				{
					store_passcode((uint32_t)button_value);
8000371e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003722:	10 9c       	mov	r12,r8
80003724:	f0 1f 00 22 	mcall	800037ac <Read_button+0x11c>
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003728:	c1 e8       	rjmp	80003764 <Read_button+0xd4>
				{
					store_passcode((uint32_t)button_value);
				}
				else
				{
					mode_chosen = button_value;
8000372a:	4a 29       	lddpc	r9,800037b0 <Read_button+0x120>
8000372c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003730:	b2 88       	st.b	r9[0x0],r8
					mode_selected = true;
80003732:	49 c9       	lddpc	r9,800037a0 <Read_button+0x110>
80003734:	30 18       	mov	r8,1
80003736:	b2 88       	st.b	r9[0x0],r8
80003738:	c1 68       	rjmp	80003764 <Read_button+0xd4>
				}
			}
			else if (entry_mode_status == NORMAL_MODE)
8000373a:	49 98       	lddpc	r8,8000379c <Read_button+0x10c>
8000373c:	11 88       	ld.ub	r8,r8[0x0]
8000373e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003742:	30 28       	mov	r8,2
80003744:	f0 09 18 00 	cp.b	r9,r8
80003748:	c0 e1       	brne	80003764 <Read_button+0xd4>
			{
				store_passcode((uint32_t)button_value);
8000374a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000374e:	10 9c       	mov	r12,r8
80003750:	f0 1f 00 17 	mcall	800037ac <Read_button+0x11c>
80003754:	c0 88       	rjmp	80003764 <Read_button+0xd4>

			
			break;
		}
		case NO_BUTTON:
		break;
80003756:	d7 03       	nop
80003758:	c0 68       	rjmp	80003764 <Read_button+0xd4>
			{
				normal_mode_password_entered = true;
			}

			
			break;
8000375a:	d7 03       	nop
8000375c:	c0 48       	rjmp	80003764 <Read_button+0xd4>
8000375e:	d7 03       	nop
80003760:	c0 28       	rjmp	80003764 <Read_button+0xd4>
80003762:	d7 03       	nop
			}

		}
	}	

	if (!enter_pressed)
80003764:	49 48       	lddpc	r8,800037b4 <Read_button+0x124>
80003766:	11 88       	ld.ub	r8,r8[0x0]
80003768:	5c 58       	castu.b	r8
8000376a:	ec 18 00 01 	eorl	r8,0x1
8000376e:	5c 58       	castu.b	r8
80003770:	c1 00       	breq	80003790 <Read_button+0x100>
	{
		if (var_W_ticks++ > var_W)
80003772:	49 28       	lddpc	r8,800037b8 <Read_button+0x128>
80003774:	70 08       	ld.w	r8,r8[0x0]
80003776:	49 29       	lddpc	r9,800037bc <Read_button+0x12c>
80003778:	72 09       	ld.w	r9,r9[0x0]
8000377a:	12 38       	cp.w	r8,r9
8000377c:	5f b9       	srhi	r9
8000377e:	5c 59       	castu.b	r9
80003780:	f0 ca ff ff 	sub	r10,r8,-1
80003784:	48 d8       	lddpc	r8,800037b8 <Read_button+0x128>
80003786:	91 0a       	st.w	r8[0x0],r10
80003788:	58 09       	cp.w	r9,0
8000378a:	c0 30       	breq	80003790 <Read_button+0x100>
		{
			calculate_salt();
8000378c:	f0 1f 00 0d 	mcall	800037c0 <Read_button+0x130>
		}
	}	
}
80003790:	2f fd       	sub	sp,-4
80003792:	e3 cd 80 80 	ldm	sp++,r7,pc
80003796:	00 00       	add	r0,r0
80003798:	80 00       	ld.sh	r0,r0[0x0]
8000379a:	37 c4       	mov	r4,124
8000379c:	00 00       	add	r0,r0
8000379e:	04 54       	eor	r4,r2
800037a0:	00 00       	add	r0,r0
800037a2:	04 50       	eor	r0,r2
800037a4:	00 00       	add	r0,r0
800037a6:	04 52       	eor	r2,r2
800037a8:	00 00       	add	r0,r0
800037aa:	04 51       	eor	r1,r2
800037ac:	80 00       	ld.sh	r0,r0[0x0]
800037ae:	39 dc       	mov	r12,-99
800037b0:	00 00       	add	r0,r0
800037b2:	01 2f       	ld.uh	pc,r0++
800037b4:	00 00       	add	r0,r0
800037b6:	01 2d       	ld.uh	sp,r0++
800037b8:	00 00       	add	r0,r0
800037ba:	03 08       	ld.w	r8,r1++
800037bc:	00 00       	add	r0,r0
800037be:	01 28       	ld.uh	r8,r0++
800037c0:	80 00       	ld.sh	r0,r0[0x0]
800037c2:	2c fc       	sub	r12,-49

800037c4 <button_pressed>:

uint8_t button_pressed (void)
{
800037c4:	eb cd 40 80 	pushm	r7,lr
800037c8:	1a 97       	mov	r7,sp
	
	is_button_released();
800037ca:	f0 1f 00 2a 	mcall	80003870 <button_pressed+0xac>

	if (button_released)
800037ce:	4a a8       	lddpc	r8,80003874 <button_pressed+0xb0>
800037d0:	11 88       	ld.ub	r8,r8[0x0]
800037d2:	5c 58       	castu.b	r8
800037d4:	c4 90       	breq	80003866 <button_pressed+0xa2>
	{		
		if (read_push_button(PB1, (uint8_t *)&PB1_Counter))
800037d6:	4a 9b       	lddpc	r11,80003878 <button_pressed+0xb4>
800037d8:	30 ac       	mov	r12,10
800037da:	f0 1f 00 29 	mcall	8000387c <button_pressed+0xb8>
800037de:	18 98       	mov	r8,r12
800037e0:	58 08       	cp.w	r8,0
800037e2:	c0 90       	breq	800037f4 <button_pressed+0x30>
		{
			LED_On(LED0);
800037e4:	30 1c       	mov	r12,1
800037e6:	f0 1f 00 27 	mcall	80003880 <button_pressed+0xbc>
			LED_Off(LED1 | LED2 | LED3);
800037ea:	30 ec       	mov	r12,14
800037ec:	f0 1f 00 26 	mcall	80003884 <button_pressed+0xc0>
			//store_passcode(0L);
			return PUSH_BUTTON1;
800037f0:	30 08       	mov	r8,0
800037f2:	c3 c8       	rjmp	8000386a <button_pressed+0xa6>
		}
		else if (read_push_button(PB2, (uint8_t *)&PB2_Counter))
800037f4:	4a 5b       	lddpc	r11,80003888 <button_pressed+0xc4>
800037f6:	30 bc       	mov	r12,11
800037f8:	f0 1f 00 21 	mcall	8000387c <button_pressed+0xb8>
800037fc:	18 98       	mov	r8,r12
800037fe:	58 08       	cp.w	r8,0
80003800:	c0 90       	breq	80003812 <button_pressed+0x4e>
		{
			LED_On(LED1);
80003802:	30 2c       	mov	r12,2
80003804:	f0 1f 00 1f 	mcall	80003880 <button_pressed+0xbc>
			LED_Off(LED0 | LED2 | LED3);
80003808:	30 dc       	mov	r12,13
8000380a:	f0 1f 00 1f 	mcall	80003884 <button_pressed+0xc0>
			//store_passcode(1L);
			return PUSH_BUTTON2;
8000380e:	30 18       	mov	r8,1
80003810:	c2 d8       	rjmp	8000386a <button_pressed+0xa6>
		}
		else if (read_push_button(PB3, (uint8_t *)&PB3_Counter))
80003812:	49 fb       	lddpc	r11,8000388c <button_pressed+0xc8>
80003814:	30 cc       	mov	r12,12
80003816:	f0 1f 00 1a 	mcall	8000387c <button_pressed+0xb8>
8000381a:	18 98       	mov	r8,r12
8000381c:	58 08       	cp.w	r8,0
8000381e:	c0 90       	breq	80003830 <button_pressed+0x6c>
		{
			LED_On(LED2);
80003820:	30 4c       	mov	r12,4
80003822:	f0 1f 00 18 	mcall	80003880 <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED3);
80003826:	30 bc       	mov	r12,11
80003828:	f0 1f 00 17 	mcall	80003884 <button_pressed+0xc0>
			//store_passcode(2L);
			return PUSH_BUTTON3;
8000382c:	30 28       	mov	r8,2
8000382e:	c1 e8       	rjmp	8000386a <button_pressed+0xa6>
		}
		else if (read_push_button(PB4, (uint8_t *)&PB4_Counter))
80003830:	49 8b       	lddpc	r11,80003890 <button_pressed+0xcc>
80003832:	30 dc       	mov	r12,13
80003834:	f0 1f 00 12 	mcall	8000387c <button_pressed+0xb8>
80003838:	18 98       	mov	r8,r12
8000383a:	58 08       	cp.w	r8,0
8000383c:	c0 90       	breq	8000384e <button_pressed+0x8a>
		{
			LED_On(LED3);
8000383e:	30 8c       	mov	r12,8
80003840:	f0 1f 00 10 	mcall	80003880 <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED2);
80003844:	30 7c       	mov	r12,7
80003846:	f0 1f 00 10 	mcall	80003884 <button_pressed+0xc0>
			//store_passcode(3L);
			return PUSH_BUTTON4;
8000384a:	30 38       	mov	r8,3
8000384c:	c0 f8       	rjmp	8000386a <button_pressed+0xa6>
		}
		else if (read_push_button(PB_ENTER, (uint8_t *)&PB5_Counter))
8000384e:	49 2b       	lddpc	r11,80003894 <button_pressed+0xd0>
80003850:	32 ac       	mov	r12,42
80003852:	f0 1f 00 0b 	mcall	8000387c <button_pressed+0xb8>
80003856:	18 98       	mov	r8,r12
80003858:	58 08       	cp.w	r8,0
8000385a:	c0 60       	breq	80003866 <button_pressed+0xa2>
		{
			device_unlocked = true;
8000385c:	48 f9       	lddpc	r9,80003898 <button_pressed+0xd4>
8000385e:	30 18       	mov	r8,1
80003860:	b2 88       	st.b	r9[0x0],r8
			return ENTER_BUTTON;
80003862:	30 48       	mov	r8,4
80003864:	c0 38       	rjmp	8000386a <button_pressed+0xa6>
		}
	}
	return NO_BUTTON;
80003866:	e0 68 00 ff 	mov	r8,255
}
8000386a:	10 9c       	mov	r12,r8
8000386c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003870:	80 00       	ld.sh	r0,r0[0x0]
80003872:	36 58       	mov	r8,101
80003874:	00 00       	add	r0,r0
80003876:	01 2e       	ld.uh	lr,r0++
80003878:	00 00       	add	r0,r0
8000387a:	04 78       	tst	r8,r2
8000387c:	80 00       	ld.sh	r0,r0[0x0]
8000387e:	39 10       	mov	r0,-111
80003880:	80 00       	ld.sh	r0,r0[0x0]
80003882:	42 f4       	lddsp	r4,sp[0xbc]
80003884:	80 00       	ld.sh	r0,r0[0x0]
80003886:	42 3c       	lddsp	r12,sp[0x8c]
80003888:	00 00       	add	r0,r0
8000388a:	04 79       	tst	r9,r2
8000388c:	00 00       	add	r0,r0
8000388e:	04 7a       	tst	r10,r2
80003890:	00 00       	add	r0,r0
80003892:	04 7b       	tst	r11,r2
80003894:	00 00       	add	r0,r0
80003896:	04 7c       	tst	r12,r2
80003898:	00 00       	add	r0,r0
8000389a:	03 00       	ld.w	r0,r1++

8000389c <check_all_buttons_high>:

bool check_all_buttons_high(void)
{
8000389c:	eb cd 40 80 	pushm	r7,lr
800038a0:	1a 97       	mov	r7,sp
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1) && (gpio_get_pin_value(PB2) == 1) && (gpio_get_pin_value(PB3) == 1) && (gpio_get_pin_value(PB4) == 1))
800038a2:	30 ac       	mov	r12,10
800038a4:	f0 1f 00 19 	mcall	80003908 <check_all_buttons_high+0x6c>
800038a8:	18 98       	mov	r8,r12
800038aa:	58 18       	cp.w	r8,1
800038ac:	c2 51       	brne	800038f6 <check_all_buttons_high+0x5a>
800038ae:	30 bc       	mov	r12,11
800038b0:	f0 1f 00 16 	mcall	80003908 <check_all_buttons_high+0x6c>
800038b4:	18 98       	mov	r8,r12
800038b6:	58 18       	cp.w	r8,1
800038b8:	c1 f1       	brne	800038f6 <check_all_buttons_high+0x5a>
800038ba:	30 cc       	mov	r12,12
800038bc:	f0 1f 00 13 	mcall	80003908 <check_all_buttons_high+0x6c>
800038c0:	18 98       	mov	r8,r12
800038c2:	58 18       	cp.w	r8,1
800038c4:	c1 91       	brne	800038f6 <check_all_buttons_high+0x5a>
800038c6:	30 dc       	mov	r12,13
800038c8:	f0 1f 00 10 	mcall	80003908 <check_all_buttons_high+0x6c>
800038cc:	18 98       	mov	r8,r12
800038ce:	58 18       	cp.w	r8,1
800038d0:	c1 31       	brne	800038f6 <check_all_buttons_high+0x5a>
	{
		if (button_released_iteration++ > 10)
800038d2:	48 f8       	lddpc	r8,8000390c <check_all_buttons_high+0x70>
800038d4:	11 88       	ld.ub	r8,r8[0x0]
800038d6:	30 a9       	mov	r9,10
800038d8:	f2 08 18 00 	cp.b	r8,r9
800038dc:	5f b9       	srhi	r9
800038de:	5c 59       	castu.b	r9
800038e0:	2f f8       	sub	r8,-1
800038e2:	5c 58       	castu.b	r8
800038e4:	48 aa       	lddpc	r10,8000390c <check_all_buttons_high+0x70>
800038e6:	b4 88       	st.b	r10[0x0],r8
800038e8:	58 09       	cp.w	r9,0
800038ea:	c0 a0       	breq	800038fe <check_all_buttons_high+0x62>
		{
			button_released_iteration = 0;
800038ec:	48 89       	lddpc	r9,8000390c <check_all_buttons_high+0x70>
800038ee:	30 08       	mov	r8,0
800038f0:	b2 88       	st.b	r9[0x0],r8
			return true;
800038f2:	30 18       	mov	r8,1
800038f4:	c0 78       	rjmp	80003902 <check_all_buttons_high+0x66>
		}
	}
	else
	{
		button_released_iteration = 0;
800038f6:	48 69       	lddpc	r9,8000390c <check_all_buttons_high+0x70>
800038f8:	30 08       	mov	r8,0
800038fa:	b2 88       	st.b	r9[0x0],r8
800038fc:	c0 28       	rjmp	80003900 <check_all_buttons_high+0x64>

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1) && (gpio_get_pin_value(PB2) == 1) && (gpio_get_pin_value(PB3) == 1) && (gpio_get_pin_value(PB4) == 1))
800038fe:	d7 03       	nop
	else
	{
		button_released_iteration = 0;
	}

	return false;
80003900:	30 08       	mov	r8,0
}
80003902:	10 9c       	mov	r12,r8
80003904:	e3 cd 80 80 	ldm	sp++,r7,pc
80003908:	80 00       	ld.sh	r0,r0[0x0]
8000390a:	89 1c       	st.w	r4[0x4],r12
8000390c:	00 00       	add	r0,r0
8000390e:	04 82       	andn	r2,r2

80003910 <read_push_button>:

bool read_push_button(uint32_t pin, uint8_t *counter)
{
80003910:	eb cd 40 80 	pushm	r7,lr
80003914:	1a 97       	mov	r7,sp
80003916:	20 3d       	sub	sp,12
80003918:	ef 4c ff f8 	st.w	r7[-8],r12
8000391c:	ef 4b ff f4 	st.w	r7[-12],r11
	bool button_status = false;
80003920:	30 08       	mov	r8,0
80003922:	ef 68 ff ff 	st.b	r7[-1],r8

	if (gpio_get_pin_value(pin) == 0)
80003926:	ee fc ff f8 	ld.w	r12,r7[-8]
8000392a:	f0 1f 00 1b 	mcall	80003994 <read_push_button+0x84>
8000392e:	18 98       	mov	r8,r12
80003930:	58 08       	cp.w	r8,0
80003932:	c2 11       	brne	80003974 <read_push_button+0x64>
	{
		(*counter)++;
80003934:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003938:	11 88       	ld.ub	r8,r8[0x0]
8000393a:	2f f8       	sub	r8,-1
8000393c:	5c 58       	castu.b	r8
8000393e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003942:	b2 88       	st.b	r9[0x0],r8
		if (*counter >= 3)
80003944:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003948:	11 89       	ld.ub	r9,r8[0x0]
8000394a:	30 28       	mov	r8,2
8000394c:	f0 09 18 00 	cp.b	r9,r8
80003950:	e0 88 00 1a 	brls	80003984 <read_push_button+0x74>
		{
			button_status = true;
80003954:	30 18       	mov	r8,1
80003956:	ef 68 ff ff 	st.b	r7[-1],r8
			if (enter_pressed)
8000395a:	49 08       	lddpc	r8,80003998 <read_push_button+0x88>
8000395c:	11 88       	ld.ub	r8,r8[0x0]
8000395e:	5c 58       	castu.b	r8
80003960:	c0 60       	breq	8000396c <read_push_button+0x5c>
			{
				enter_pressed = false;	
80003962:	48 e9       	lddpc	r9,80003998 <read_push_button+0x88>
80003964:	30 08       	mov	r8,0
80003966:	b2 88       	st.b	r9[0x0],r8
				Start_W_timer();
80003968:	f0 1f 00 0d 	mcall	8000399c <read_push_button+0x8c>
			}
			
			button_released = false;
8000396c:	48 d9       	lddpc	r9,800039a0 <read_push_button+0x90>
8000396e:	30 08       	mov	r8,0
80003970:	b2 88       	st.b	r9[0x0],r8
80003972:	c0 a8       	rjmp	80003986 <read_push_button+0x76>
		}
	}
	else
	{
		button_status = false;
80003974:	30 08       	mov	r8,0
80003976:	ef 68 ff ff 	st.b	r7[-1],r8
		*counter = 0;
8000397a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000397e:	30 08       	mov	r8,0
80003980:	b2 88       	st.b	r9[0x0],r8
80003982:	c0 28       	rjmp	80003986 <read_push_button+0x76>
			{
				enter_pressed = false;	
				Start_W_timer();
			}
			
			button_released = false;
80003984:	d7 03       	nop
	else
	{
		button_status = false;
		*counter = 0;
	}
	return button_status;	
80003986:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000398a:	10 9c       	mov	r12,r8
8000398c:	2f dd       	sub	sp,-12
8000398e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003992:	00 00       	add	r0,r0
80003994:	80 00       	ld.sh	r0,r0[0x0]
80003996:	89 1c       	st.w	r4[0x4],r12
80003998:	00 00       	add	r0,r0
8000399a:	01 2d       	ld.uh	sp,r0++
8000399c:	80 00       	ld.sh	r0,r0[0x0]
8000399e:	2d f0       	sub	r0,-33
800039a0:	00 00       	add	r0,r0
800039a2:	01 2e       	ld.uh	lr,r0++

800039a4 <push_buttons_init>:

void push_buttons_init(void)
{
800039a4:	eb cd 40 80 	pushm	r7,lr
800039a8:	1a 97       	mov	r7,sp
	gpio_configure_pin(PB1,GPIO_DIR_INPUT);
800039aa:	30 0b       	mov	r11,0
800039ac:	30 ac       	mov	r12,10
800039ae:	f0 1f 00 0b 	mcall	800039d8 <push_buttons_init+0x34>
	gpio_configure_pin(PB2,GPIO_DIR_INPUT);
800039b2:	30 0b       	mov	r11,0
800039b4:	30 bc       	mov	r12,11
800039b6:	f0 1f 00 09 	mcall	800039d8 <push_buttons_init+0x34>
	gpio_configure_pin(PB3,GPIO_DIR_INPUT);
800039ba:	30 0b       	mov	r11,0
800039bc:	30 cc       	mov	r12,12
800039be:	f0 1f 00 07 	mcall	800039d8 <push_buttons_init+0x34>
	gpio_configure_pin(PB4,GPIO_DIR_INPUT);
800039c2:	30 0b       	mov	r11,0
800039c4:	30 dc       	mov	r12,13
800039c6:	f0 1f 00 05 	mcall	800039d8 <push_buttons_init+0x34>
	gpio_configure_pin(PB_ENTER,GPIO_DIR_INPUT);
800039ca:	30 0b       	mov	r11,0
800039cc:	32 ac       	mov	r12,42
800039ce:	f0 1f 00 03 	mcall	800039d8 <push_buttons_init+0x34>
}
800039d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800039d6:	00 00       	add	r0,r0
800039d8:	80 00       	ld.sh	r0,r0[0x0]
800039da:	87 6e       	st.w	r3[0x18],lr

800039dc <store_passcode>:

void store_passcode(uint32_t value)
{
800039dc:	eb cd 40 80 	pushm	r7,lr
800039e0:	1a 97       	mov	r7,sp
800039e2:	20 2d       	sub	sp,8
800039e4:	ef 4c ff f8 	st.w	r7[-8],r12
	unsigned char index = 0;
800039e8:	30 08       	mov	r8,0
800039ea:	ef 68 ff ff 	st.b	r7[-1],r8
	index = passcode_byte_index >> 4;
800039ee:	49 c8       	lddpc	r8,80003a5c <store_passcode+0x80>
800039f0:	11 88       	ld.ub	r8,r8[0x0]
800039f2:	5c 58       	castu.b	r8
800039f4:	a5 88       	lsr	r8,0x4
800039f6:	ef 68 ff ff 	st.b	r7[-1],r8
	pass_code[index] = pass_code[index] | (value << ((passcode_byte_index & 0x0000000F) << 1));
800039fa:	49 a8       	lddpc	r8,80003a60 <store_passcode+0x84>
800039fc:	70 09       	ld.w	r9,r8[0x0]
800039fe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a02:	a3 68       	lsl	r8,0x2
80003a04:	10 09       	add	r9,r8
80003a06:	49 78       	lddpc	r8,80003a60 <store_passcode+0x84>
80003a08:	70 0a       	ld.w	r10,r8[0x0]
80003a0a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a0e:	a3 68       	lsl	r8,0x2
80003a10:	f4 08 00 08 	add	r8,r10,r8
80003a14:	70 0a       	ld.w	r10,r8[0x0]
80003a16:	49 28       	lddpc	r8,80003a5c <store_passcode+0x80>
80003a18:	11 88       	ld.ub	r8,r8[0x0]
80003a1a:	5c 58       	castu.b	r8
80003a1c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003a20:	a1 78       	lsl	r8,0x1
80003a22:	ee fb ff f8 	ld.w	r11,r7[-8]
80003a26:	f6 08 09 48 	lsl	r8,r11,r8
80003a2a:	f5 e8 10 08 	or	r8,r10,r8
80003a2e:	93 08       	st.w	r9[0x0],r8
	if (++passcode_byte_index >= 128)
80003a30:	48 b8       	lddpc	r8,80003a5c <store_passcode+0x80>
80003a32:	11 88       	ld.ub	r8,r8[0x0]
80003a34:	5c 58       	castu.b	r8
80003a36:	2f f8       	sub	r8,-1
80003a38:	5c 58       	castu.b	r8
80003a3a:	48 99       	lddpc	r9,80003a5c <store_passcode+0x80>
80003a3c:	b2 88       	st.b	r9[0x0],r8
80003a3e:	48 88       	lddpc	r8,80003a5c <store_passcode+0x80>
80003a40:	11 88       	ld.ub	r8,r8[0x0]
80003a42:	5c 58       	castu.b	r8
80003a44:	10 99       	mov	r9,r8
80003a46:	30 08       	mov	r8,0
80003a48:	f0 09 18 00 	cp.b	r9,r8
80003a4c:	c0 44       	brge	80003a54 <store_passcode+0x78>
	{
		passcode_byte_index = 0;
80003a4e:	48 49       	lddpc	r9,80003a5c <store_passcode+0x80>
80003a50:	30 08       	mov	r8,0
80003a52:	b2 88       	st.b	r9[0x0],r8
	}
	//inter_key_delay = ENABLED;
}
80003a54:	2f ed       	sub	sp,-8
80003a56:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a5a:	00 00       	add	r0,r0
80003a5c:	00 00       	add	r0,r0
80003a5e:	03 01       	ld.w	r1,r1++
80003a60:	00 00       	add	r0,r0
80003a62:	09 78       	ld.ub	r8,--r4

80003a64 <check_programming_mode_entry_sequence>:

bool check_programming_mode_entry_sequence(void)
{
80003a64:	eb cd 40 80 	pushm	r7,lr
80003a68:	1a 97       	mov	r7,sp
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
		&& gpio_get_pin_value(PB3) == 0
80003a6a:	30 ac       	mov	r12,10
80003a6c:	f0 1f 00 1e 	mcall	80003ae4 <check_programming_mode_entry_sequence+0x80>
80003a70:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003a72:	58 08       	cp.w	r8,0
80003a74:	c2 f1       	brne	80003ad2 <check_programming_mode_entry_sequence+0x6e>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
80003a76:	30 cc       	mov	r12,12
80003a78:	f0 1f 00 1b 	mcall	80003ae4 <check_programming_mode_entry_sequence+0x80>
80003a7c:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003a7e:	58 08       	cp.w	r8,0
80003a80:	c2 91       	brne	80003ad2 <check_programming_mode_entry_sequence+0x6e>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
80003a82:	30 dc       	mov	r12,13
80003a84:	f0 1f 00 18 	mcall	80003ae4 <check_programming_mode_entry_sequence+0x80>
80003a88:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003a8a:	58 08       	cp.w	r8,0
80003a8c:	c2 31       	brne	80003ad2 <check_programming_mode_entry_sequence+0x6e>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003a8e:	30 bc       	mov	r12,11
80003a90:	f0 1f 00 15 	mcall	80003ae4 <check_programming_mode_entry_sequence+0x80>
80003a94:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003a96:	58 18       	cp.w	r8,1
80003a98:	c1 d1       	brne	80003ad2 <check_programming_mode_entry_sequence+0x6e>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003a9a:	30 4c       	mov	r12,4
80003a9c:	f0 1f 00 12 	mcall	80003ae4 <check_programming_mode_entry_sequence+0x80>
80003aa0:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003aa2:	58 18       	cp.w	r8,1
80003aa4:	c1 71       	brne	80003ad2 <check_programming_mode_entry_sequence+0x6e>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
	{
		if (programming_mode_sequence_counter++ >= 1000)
80003aa6:	49 18       	lddpc	r8,80003ae8 <check_programming_mode_entry_sequence+0x84>
80003aa8:	90 08       	ld.sh	r8,r8[0x0]
80003aaa:	e0 69 03 e7 	mov	r9,999
80003aae:	f2 08 19 00 	cp.h	r8,r9
80003ab2:	5f b9       	srhi	r9
80003ab4:	5c 59       	castu.b	r9
80003ab6:	2f f8       	sub	r8,-1
80003ab8:	5c 88       	casts.h	r8
80003aba:	48 ca       	lddpc	r10,80003ae8 <check_programming_mode_entry_sequence+0x84>
80003abc:	b4 08       	st.h	r10[0x0],r8
80003abe:	58 09       	cp.w	r9,0
80003ac0:	c0 d0       	breq	80003ada <check_programming_mode_entry_sequence+0x76>
		{
			programming_mode_sequence_counter = 0;
80003ac2:	48 a9       	lddpc	r9,80003ae8 <check_programming_mode_entry_sequence+0x84>
80003ac4:	30 08       	mov	r8,0
80003ac6:	b2 08       	st.h	r9[0x0],r8
			button_released = false;
80003ac8:	48 99       	lddpc	r9,80003aec <check_programming_mode_entry_sequence+0x88>
80003aca:	30 08       	mov	r8,0
80003acc:	b2 88       	st.b	r9[0x0],r8
			return true;
80003ace:	30 18       	mov	r8,1
80003ad0:	c0 78       	rjmp	80003ade <check_programming_mode_entry_sequence+0x7a>
		}
	}
	else
	{
		programming_mode_sequence_counter = 0;
80003ad2:	48 69       	lddpc	r9,80003ae8 <check_programming_mode_entry_sequence+0x84>
80003ad4:	30 08       	mov	r8,0
80003ad6:	b2 08       	st.h	r9[0x0],r8
80003ad8:	c0 28       	rjmp	80003adc <check_programming_mode_entry_sequence+0x78>
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003ada:	d7 03       	nop
	}
	else
	{
		programming_mode_sequence_counter = 0;
	}
	return false;
80003adc:	30 08       	mov	r8,0
}
80003ade:	10 9c       	mov	r12,r8
80003ae0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ae4:	80 00       	ld.sh	r0,r0[0x0]
80003ae6:	89 1c       	st.w	r4[0x4],r12
80003ae8:	00 00       	add	r0,r0
80003aea:	04 80       	andn	r0,r2
80003aec:	00 00       	add	r0,r0
80003aee:	01 2e       	ld.uh	lr,r0++

80003af0 <check_normal_mode_entry_sequence>:

bool check_normal_mode_entry_sequence(void)
{
80003af0:	eb cd 40 80 	pushm	r7,lr
80003af4:	1a 97       	mov	r7,sp
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
		&& gpio_get_pin_value(PB4) == 0
80003af6:	30 4c       	mov	r12,4
80003af8:	f0 1f 00 40 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003afc:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003afe:	58 08       	cp.w	r8,0
80003b00:	c3 41       	brne	80003b68 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
80003b02:	30 dc       	mov	r12,13
80003b04:	f0 1f 00 3d 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b08:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b0a:	58 08       	cp.w	r8,0
80003b0c:	c2 e1       	brne	80003b68 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
80003b0e:	30 ac       	mov	r12,10
80003b10:	f0 1f 00 3a 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b14:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b16:	58 18       	cp.w	r8,1
80003b18:	c2 81       	brne	80003b68 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003b1a:	30 bc       	mov	r12,11
80003b1c:	f0 1f 00 37 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b20:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b22:	58 18       	cp.w	r8,1
80003b24:	c2 21       	brne	80003b68 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003b26:	30 cc       	mov	r12,12
80003b28:	f0 1f 00 34 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b2c:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b2e:	58 18       	cp.w	r8,1
80003b30:	c1 c1       	brne	80003b68 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
	{
		normal_mode_unlock_device_sequence_counter = 0;
80003b32:	4b 39       	lddpc	r9,80003bfc <check_normal_mode_entry_sequence+0x10c>
80003b34:	30 08       	mov	r8,0
80003b36:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_device_id_sequence_counter++ >= 200)
80003b38:	4b 28       	lddpc	r8,80003c00 <check_normal_mode_entry_sequence+0x110>
80003b3a:	11 88       	ld.ub	r8,r8[0x0]
80003b3c:	3c 79       	mov	r9,-57
80003b3e:	f2 08 18 00 	cp.b	r8,r9
80003b42:	5f b9       	srhi	r9
80003b44:	5c 59       	castu.b	r9
80003b46:	2f f8       	sub	r8,-1
80003b48:	5c 58       	castu.b	r8
80003b4a:	4a ea       	lddpc	r10,80003c00 <check_normal_mode_entry_sequence+0x110>
80003b4c:	b4 88       	st.b	r10[0x0],r8
80003b4e:	58 09       	cp.w	r9,0
80003b50:	c4 c0       	breq	80003be8 <check_normal_mode_entry_sequence+0xf8>
		{
			normal_mode_device_id_sequence_counter = 0;
80003b52:	4a c9       	lddpc	r9,80003c00 <check_normal_mode_entry_sequence+0x110>
80003b54:	30 08       	mov	r8,0
80003b56:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003b58:	4a b9       	lddpc	r9,80003c04 <check_normal_mode_entry_sequence+0x114>
80003b5a:	30 08       	mov	r8,0
80003b5c:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = DEVICE_ID;
80003b5e:	4a b9       	lddpc	r9,80003c08 <check_normal_mode_entry_sequence+0x118>
80003b60:	30 38       	mov	r8,3
80003b62:	b2 88       	st.b	r9[0x0],r8
			return true;
80003b64:	30 18       	mov	r8,1
80003b66:	c4 58       	rjmp	80003bf0 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
			&& gpio_get_pin_value(PB2) == 0
80003b68:	30 4c       	mov	r12,4
80003b6a:	f0 1f 00 24 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b6e:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003b70:	58 08       	cp.w	r8,0
80003b72:	c3 41       	brne	80003bda <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
80003b74:	30 bc       	mov	r12,11
80003b76:	f0 1f 00 21 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b7a:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003b7c:	58 08       	cp.w	r8,0
80003b7e:	c2 e1       	brne	80003bda <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
80003b80:	30 ac       	mov	r12,10
80003b82:	f0 1f 00 1e 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b86:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003b88:	58 18       	cp.w	r8,1
80003b8a:	c2 81       	brne	80003bda <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003b8c:	30 cc       	mov	r12,12
80003b8e:	f0 1f 00 1b 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b92:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003b94:	58 18       	cp.w	r8,1
80003b96:	c2 21       	brne	80003bda <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003b98:	30 dc       	mov	r12,13
80003b9a:	f0 1f 00 18 	mcall	80003bf8 <check_normal_mode_entry_sequence+0x108>
80003b9e:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003ba0:	58 18       	cp.w	r8,1
80003ba2:	c1 c1       	brne	80003bda <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
	{
		normal_mode_device_id_sequence_counter = 0;
80003ba4:	49 79       	lddpc	r9,80003c00 <check_normal_mode_entry_sequence+0x110>
80003ba6:	30 08       	mov	r8,0
80003ba8:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_unlock_device_sequence_counter++ >= 200)
80003baa:	49 58       	lddpc	r8,80003bfc <check_normal_mode_entry_sequence+0x10c>
80003bac:	11 88       	ld.ub	r8,r8[0x0]
80003bae:	3c 79       	mov	r9,-57
80003bb0:	f2 08 18 00 	cp.b	r8,r9
80003bb4:	5f b9       	srhi	r9
80003bb6:	5c 59       	castu.b	r9
80003bb8:	2f f8       	sub	r8,-1
80003bba:	5c 58       	castu.b	r8
80003bbc:	49 0a       	lddpc	r10,80003bfc <check_normal_mode_entry_sequence+0x10c>
80003bbe:	b4 88       	st.b	r10[0x0],r8
80003bc0:	58 09       	cp.w	r9,0
80003bc2:	c1 50       	breq	80003bec <check_normal_mode_entry_sequence+0xfc>
		{
			normal_mode_unlock_device_sequence_counter = 0;
80003bc4:	48 e9       	lddpc	r9,80003bfc <check_normal_mode_entry_sequence+0x10c>
80003bc6:	30 08       	mov	r8,0
80003bc8:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003bca:	48 f9       	lddpc	r9,80003c04 <check_normal_mode_entry_sequence+0x114>
80003bcc:	30 08       	mov	r8,0
80003bce:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = UNLOCK_CRYPTX2;
80003bd0:	48 e9       	lddpc	r9,80003c08 <check_normal_mode_entry_sequence+0x118>
80003bd2:	30 48       	mov	r8,4
80003bd4:	b2 88       	st.b	r9[0x0],r8
			return true;
80003bd6:	30 18       	mov	r8,1
80003bd8:	c0 c8       	rjmp	80003bf0 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else
	{
		normal_mode_device_id_sequence_counter = 0;
80003bda:	48 a9       	lddpc	r9,80003c00 <check_normal_mode_entry_sequence+0x110>
80003bdc:	30 08       	mov	r8,0
80003bde:	b2 88       	st.b	r9[0x0],r8
		normal_mode_unlock_device_sequence_counter = 0;
80003be0:	48 79       	lddpc	r9,80003bfc <check_normal_mode_entry_sequence+0x10c>
80003be2:	30 08       	mov	r8,0
80003be4:	b2 88       	st.b	r9[0x0],r8
80003be6:	c0 48       	rjmp	80003bee <check_normal_mode_entry_sequence+0xfe>
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003be8:	d7 03       	nop
80003bea:	c0 28       	rjmp	80003bee <check_normal_mode_entry_sequence+0xfe>
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003bec:	d7 03       	nop
	else
	{
		normal_mode_device_id_sequence_counter = 0;
		normal_mode_unlock_device_sequence_counter = 0;
	}
	return false;
80003bee:	30 08       	mov	r8,0
}
80003bf0:	10 9c       	mov	r12,r8
80003bf2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bf6:	00 00       	add	r0,r0
80003bf8:	80 00       	ld.sh	r0,r0[0x0]
80003bfa:	89 1c       	st.w	r4[0x4],r12
80003bfc:	00 00       	add	r0,r0
80003bfe:	04 7d       	tst	sp,r2
80003c00:	00 00       	add	r0,r0
80003c02:	04 7e       	tst	lr,r2
80003c04:	00 00       	add	r0,r0
80003c06:	01 2e       	ld.uh	lr,r0++
80003c08:	00 00       	add	r0,r0
80003c0a:	04 53       	eor	r3,r2

80003c0c <check_for_mode_selected>:

void check_for_mode_selected(void)
{
80003c0c:	eb cd 40 80 	pushm	r7,lr
80003c10:	1a 97       	mov	r7,sp
	Read_button();
80003c12:	f0 1f 00 03 	mcall	80003c1c <check_for_mode_selected+0x10>
}
80003c16:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c1a:	00 00       	add	r0,r0
80003c1c:	80 00       	ld.sh	r0,r0[0x0]
80003c1e:	36 90       	mov	r0,105

80003c20 <process_selected_mode>:

uint8_t process_selected_mode(void)
{
80003c20:	eb cd 40 80 	pushm	r7,lr
80003c24:	1a 97       	mov	r7,sp
	if (enter_button_status == READY_TO_TRIGGER)
80003c26:	49 f8       	lddpc	r8,80003ca0 <process_selected_mode+0x80>
80003c28:	11 88       	ld.ub	r8,r8[0x0]
80003c2a:	5c 58       	castu.b	r8
80003c2c:	c0 b1       	brne	80003c42 <process_selected_mode+0x22>
	{
		pass_code = temp_password;
80003c2e:	49 e8       	lddpc	r8,80003ca4 <process_selected_mode+0x84>
80003c30:	49 e9       	lddpc	r9,80003ca8 <process_selected_mode+0x88>
80003c32:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
80003c34:	49 e9       	lddpc	r9,80003cac <process_selected_mode+0x8c>
80003c36:	30 08       	mov	r8,0
80003c38:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_FIRST_PRESS;
80003c3a:	49 a9       	lddpc	r9,80003ca0 <process_selected_mode+0x80>
80003c3c:	30 18       	mov	r8,1
80003c3e:	b2 88       	st.b	r9[0x0],r8
80003c40:	c2 a8       	rjmp	80003c94 <process_selected_mode+0x74>
	}
	else if (enter_button_status == FIRST_TIME_PRESSED)
80003c42:	49 88       	lddpc	r8,80003ca0 <process_selected_mode+0x80>
80003c44:	11 88       	ld.ub	r8,r8[0x0]
80003c46:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003c4a:	30 28       	mov	r8,2
80003c4c:	f0 09 18 00 	cp.b	r9,r8
80003c50:	c0 e1       	brne	80003c6c <process_selected_mode+0x4c>
	{
		store_passcode(3L);
80003c52:	30 3c       	mov	r12,3
80003c54:	f0 1f 00 17 	mcall	80003cb0 <process_selected_mode+0x90>
		pass_code = temp_password1;
80003c58:	49 38       	lddpc	r8,80003ca4 <process_selected_mode+0x84>
80003c5a:	49 79       	lddpc	r9,80003cb4 <process_selected_mode+0x94>
80003c5c:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
80003c5e:	49 49       	lddpc	r9,80003cac <process_selected_mode+0x8c>
80003c60:	30 08       	mov	r8,0
80003c62:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_SECOND_PRESS;
80003c64:	48 f9       	lddpc	r9,80003ca0 <process_selected_mode+0x80>
80003c66:	30 38       	mov	r8,3
80003c68:	b2 88       	st.b	r9[0x0],r8
80003c6a:	c1 58       	rjmp	80003c94 <process_selected_mode+0x74>
	}
	else if (enter_button_status == SECOND_TIME_PRESSED)
80003c6c:	48 d8       	lddpc	r8,80003ca0 <process_selected_mode+0x80>
80003c6e:	11 88       	ld.ub	r8,r8[0x0]
80003c70:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003c74:	30 48       	mov	r8,4
80003c76:	f0 09 18 00 	cp.b	r9,r8
80003c7a:	c0 d1       	brne	80003c94 <process_selected_mode+0x74>
	{
		store_passcode(3L);
80003c7c:	30 3c       	mov	r12,3
80003c7e:	f0 1f 00 0d 	mcall	80003cb0 <process_selected_mode+0x90>
		if (compare_entered_passwords() == true)
80003c82:	f0 1f 00 0e 	mcall	80003cb8 <process_selected_mode+0x98>
80003c86:	18 98       	mov	r8,r12
80003c88:	58 08       	cp.w	r8,0
80003c8a:	c0 30       	breq	80003c90 <process_selected_mode+0x70>
		{
			return SUCCESSFUL;
80003c8c:	30 18       	mov	r8,1
80003c8e:	c0 68       	rjmp	80003c9a <process_selected_mode+0x7a>
		}
		else
		{
			return FAILED;
80003c90:	30 08       	mov	r8,0
80003c92:	c0 48       	rjmp	80003c9a <process_selected_mode+0x7a>
		}
	}

	Read_button();
80003c94:	f0 1f 00 0a 	mcall	80003cbc <process_selected_mode+0x9c>
80003c98:	c0 18       	rjmp	80003c9a <process_selected_mode+0x7a>
}
80003c9a:	10 9c       	mov	r12,r8
80003c9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ca0:	00 00       	add	r0,r0
80003ca2:	04 52       	eor	r2,r2
80003ca4:	00 00       	add	r0,r0
80003ca6:	09 78       	ld.ub	r8,--r4
80003ca8:	00 00       	add	r0,r0
80003caa:	02 c0       	st.b	r1++,r0
80003cac:	00 00       	add	r0,r0
80003cae:	03 01       	ld.w	r1,r1++
80003cb0:	80 00       	ld.sh	r0,r0[0x0]
80003cb2:	39 dc       	mov	r12,-99
80003cb4:	00 00       	add	r0,r0
80003cb6:	02 e0       	st.h	--r1,r0
80003cb8:	80 00       	ld.sh	r0,r0[0x0]
80003cba:	3c c0       	mov	r0,-52
80003cbc:	80 00       	ld.sh	r0,r0[0x0]
80003cbe:	36 90       	mov	r0,105

80003cc0 <compare_entered_passwords>:

bool compare_entered_passwords(void)
{
80003cc0:	eb cd 40 80 	pushm	r7,lr
80003cc4:	1a 97       	mov	r7,sp
80003cc6:	20 1d       	sub	sp,4
	uint8_t i = 0;
80003cc8:	30 08       	mov	r8,0
80003cca:	ef 68 ff ff 	st.b	r7[-1],r8
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
80003cce:	c1 48       	rjmp	80003cf6 <compare_entered_passwords+0x36>
	{
		if (temp_password[i] != temp_password1[i])
80003cd0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003cd4:	48 f8       	lddpc	r8,80003d10 <compare_entered_passwords+0x50>
80003cd6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003cda:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003cde:	48 e8       	lddpc	r8,80003d14 <compare_entered_passwords+0x54>
80003ce0:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003ce4:	10 39       	cp.w	r9,r8
80003ce6:	c0 30       	breq	80003cec <compare_entered_passwords+0x2c>
		{
			return false;
80003ce8:	30 08       	mov	r8,0
80003cea:	c0 e8       	rjmp	80003d06 <compare_entered_passwords+0x46>
		}
		i++;
80003cec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003cf0:	2f f8       	sub	r8,-1
80003cf2:	ef 68 ff ff 	st.b	r7[-1],r8

bool compare_entered_passwords(void)
{
	uint8_t i = 0;
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
80003cf6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003cfa:	30 78       	mov	r8,7
80003cfc:	f0 09 18 00 	cp.b	r9,r8
80003d00:	fe 98 ff e8 	brls	80003cd0 <compare_entered_passwords+0x10>
		{
			return false;
		}
		i++;
	}
	return true;
80003d04:	30 18       	mov	r8,1
}
80003d06:	10 9c       	mov	r12,r8
80003d08:	2f fd       	sub	sp,-4
80003d0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d0e:	00 00       	add	r0,r0
80003d10:	00 00       	add	r0,r0
80003d12:	02 c0       	st.b	r1++,r0
80003d14:	00 00       	add	r0,r0
80003d16:	02 e0       	st.h	--r1,r0

80003d18 <read_password>:

void read_password(void)
{
80003d18:	eb cd 40 80 	pushm	r7,lr
80003d1c:	1a 97       	mov	r7,sp
	Read_button();
80003d1e:	f0 1f 00 06 	mcall	80003d34 <read_password+0x1c>
	if (normal_mode_password_entered == true)
80003d22:	48 68       	lddpc	r8,80003d38 <read_password+0x20>
80003d24:	11 88       	ld.ub	r8,r8[0x0]
80003d26:	5c 58       	castu.b	r8
80003d28:	c0 30       	breq	80003d2e <read_password+0x16>
	{
		compare_with_saved_password();
80003d2a:	f0 1f 00 05 	mcall	80003d3c <read_password+0x24>
	}
}
80003d2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d32:	00 00       	add	r0,r0
80003d34:	80 00       	ld.sh	r0,r0[0x0]
80003d36:	36 90       	mov	r0,105
80003d38:	00 00       	add	r0,r0
80003d3a:	04 51       	eor	r1,r2
80003d3c:	80 00       	ld.sh	r0,r0[0x0]
80003d3e:	3d 40       	mov	r0,-44

80003d40 <compare_with_saved_password>:

bool compare_with_saved_password(void)
{
80003d40:	eb cd 40 80 	pushm	r7,lr
80003d44:	1a 97       	mov	r7,sp
80003d46:	20 2d       	sub	sp,8
	uint8_t i = 0; 
80003d48:	30 08       	mov	r8,0
80003d4a:	ef 68 ff fb 	st.b	r7[-5],r8
	uint32_t *temp_stored_password;

	temp_stored_password = encrypt_password(temp_password);
80003d4e:	4b 0c       	lddpc	r12,80003e0c <compare_with_saved_password+0xcc>
80003d50:	f0 1f 00 30 	mcall	80003e10 <compare_with_saved_password+0xd0>
80003d54:	18 98       	mov	r8,r12
80003d56:	ef 48 ff fc 	st.w	r7[-4],r8

	while (i < 8)
80003d5a:	c1 38       	rjmp	80003d80 <compare_with_saved_password+0x40>
	{
		temp_password[i] = temp_stored_password[i];
80003d5c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003d60:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003d64:	a3 68       	lsl	r8,0x2
80003d66:	ee fa ff fc 	ld.w	r10,r7[-4]
80003d6a:	f4 08 00 08 	add	r8,r10,r8
80003d6e:	70 0a       	ld.w	r10,r8[0x0]
80003d70:	4a 78       	lddpc	r8,80003e0c <compare_with_saved_password+0xcc>
80003d72:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		i++;
80003d76:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003d7a:	2f f8       	sub	r8,-1
80003d7c:	ef 68 ff fb 	st.b	r7[-5],r8
	uint8_t i = 0; 
	uint32_t *temp_stored_password;

	temp_stored_password = encrypt_password(temp_password);

	while (i < 8)
80003d80:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003d84:	30 78       	mov	r8,7
80003d86:	f0 09 18 00 	cp.b	r9,r8
80003d8a:	fe 98 ff e9 	brls	80003d5c <compare_with_saved_password+0x1c>
	{
		temp_password[i] = temp_stored_password[i];
		i++;
	}
	if (normal_mode_chosen == DEVICE_ID)
80003d8e:	4a 28       	lddpc	r8,80003e14 <compare_with_saved_password+0xd4>
80003d90:	11 88       	ld.ub	r8,r8[0x0]
80003d92:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003d96:	30 38       	mov	r8,3
80003d98:	f0 09 18 00 	cp.b	r9,r8
80003d9c:	c0 61       	brne	80003da8 <compare_with_saved_password+0x68>
	{
		temp_stored_password = Stored_values.device_id_confirm;
80003d9e:	49 f8       	lddpc	r8,80003e18 <compare_with_saved_password+0xd8>
80003da0:	2a 08       	sub	r8,-96
80003da2:	ef 48 ff fc 	st.w	r7[-4],r8
80003da6:	c0 c8       	rjmp	80003dbe <compare_with_saved_password+0x7e>
	}
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
80003da8:	49 b8       	lddpc	r8,80003e14 <compare_with_saved_password+0xd4>
80003daa:	11 88       	ld.ub	r8,r8[0x0]
80003dac:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003db0:	30 48       	mov	r8,4
80003db2:	f0 09 18 00 	cp.b	r9,r8
80003db6:	c0 41       	brne	80003dbe <compare_with_saved_password+0x7e>
	{
		temp_stored_password = Stored_values.unlock_password;
80003db8:	49 88       	lddpc	r8,80003e18 <compare_with_saved_password+0xd8>
80003dba:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	i = 0;
80003dbe:	30 08       	mov	r8,0
80003dc0:	ef 68 ff fb 	st.b	r7[-5],r8
	while (i < 8)
80003dc4:	c1 78       	rjmp	80003df2 <compare_with_saved_password+0xb2>
	{
		if (temp_stored_password[i] != temp_password[i])
80003dc6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003dca:	a3 68       	lsl	r8,0x2
80003dcc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003dd0:	f2 08 00 08 	add	r8,r9,r8
80003dd4:	70 09       	ld.w	r9,r8[0x0]
80003dd6:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80003dda:	48 d8       	lddpc	r8,80003e0c <compare_with_saved_password+0xcc>
80003ddc:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003de0:	10 39       	cp.w	r9,r8
80003de2:	c0 30       	breq	80003de8 <compare_with_saved_password+0xa8>
		{
			return false;
80003de4:	30 08       	mov	r8,0
80003de6:	c0 e8       	rjmp	80003e02 <compare_with_saved_password+0xc2>
		}
		i++;
80003de8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003dec:	2f f8       	sub	r8,-1
80003dee:	ef 68 ff fb 	st.b	r7[-5],r8
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
	{
		temp_stored_password = Stored_values.unlock_password;
	}
	i = 0;
	while (i < 8)
80003df2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003df6:	30 78       	mov	r8,7
80003df8:	f0 09 18 00 	cp.b	r9,r8
80003dfc:	fe 98 ff e5 	brls	80003dc6 <compare_with_saved_password+0x86>
		{
			return false;
		}
		i++;
	}
	return true;
80003e00:	30 18       	mov	r8,1
}
80003e02:	10 9c       	mov	r12,r8
80003e04:	2f ed       	sub	sp,-8
80003e06:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e0a:	00 00       	add	r0,r0
80003e0c:	00 00       	add	r0,r0
80003e0e:	02 c0       	st.b	r1++,r0
80003e10:	80 00       	ld.sh	r0,r0[0x0]
80003e12:	2c 1c       	sub	r12,-63
80003e14:	00 00       	add	r0,r0
80003e16:	04 53       	eor	r3,r2
80003e18:	00 00       	add	r0,r0
80003e1a:	02 40       	or	r0,r1

80003e1c <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
static void tc_init(volatile avr32_tc_t *tc)
{
80003e1c:	eb cd 40 80 	pushm	r7,lr
80003e20:	1a 97       	mov	r7,sp
80003e22:	20 1d       	sub	sp,4
80003e24:	ef 4c ff fc 	st.w	r7[-4],r12
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80003e28:	49 3b       	lddpc	r11,80003e74 <tc_init+0x58>
80003e2a:	ee fc ff fc 	ld.w	r12,r7[-4]
80003e2e:	f0 1f 00 13 	mcall	80003e78 <tc_init+0x5c>
	 * Set the compare triggers.
	 * We configure it to count every 10 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 10 ms, hence RC = (fPBA / 8) / 100
	 * to get an interrupt every 10 ms.
	 */
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL, (sysclk_get_pba_hz() / 8 / 100));
80003e32:	f0 1f 00 13 	mcall	80003e7c <tc_init+0x60>
80003e36:	18 99       	mov	r9,r12
80003e38:	e0 68 85 1f 	mov	r8,34079
80003e3c:	ea 18 51 eb 	orh	r8,0x51eb
80003e40:	f2 08 06 48 	mulu.d	r8,r9,r8
80003e44:	f2 08 16 08 	lsr	r8,r9,0x8
80003e48:	5c 88       	casts.h	r8
80003e4a:	5c 78       	castu.h	r8
80003e4c:	10 9a       	mov	r10,r8
80003e4e:	30 0b       	mov	r11,0
80003e50:	ee fc ff fc 	ld.w	r12,r7[-4]
80003e54:	f0 1f 00 0b 	mcall	80003e80 <tc_init+0x64>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80003e58:	48 ba       	lddpc	r10,80003e84 <tc_init+0x68>
80003e5a:	30 0b       	mov	r11,0
80003e5c:	ee fc ff fc 	ld.w	r12,r7[-4]
80003e60:	f0 1f 00 0a 	mcall	80003e88 <tc_init+0x6c>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80003e64:	30 0b       	mov	r11,0
80003e66:	ee fc ff fc 	ld.w	r12,r7[-4]
80003e6a:	f0 1f 00 09 	mcall	80003e8c <tc_init+0x70>
}
80003e6e:	2f fd       	sub	sp,-4
80003e70:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e74:	80 00       	ld.sh	r0,r0[0x0]
80003e76:	e9 40 80 00 	st.w	r4[-32768],r0
80003e7a:	92 dc       	ld.uh	r12,r9[0xa]
80003e7c:	80 00       	ld.sh	r0,r0[0x0]
80003e7e:	33 1c       	mov	r12,49
80003e80:	80 00       	ld.sh	r0,r0[0x0]
80003e82:	94 a4       	ld.uh	r4,r10[0x4]
80003e84:	80 00       	ld.sh	r0,r0[0x0]
80003e86:	e9 48 80 00 	st.w	r4[-32768],r8
80003e8a:	90 f4       	ld.uh	r4,r8[0xe]
80003e8c:	80 00       	ld.sh	r0,r0[0x0]
80003e8e:	94 30       	ld.sh	r0,r10[0x6]

80003e90 <tc_task>:
 * - Register the TC interrupt
 * - Configure, enable the CPCS (RC compare match) interrupt,
 * - and start a TC channel in waveform mode
 */
void tc_task (void)
{
80003e90:	eb cd 40 80 	pushm	r7,lr
80003e94:	1a 97       	mov	r7,sp
80003e96:	20 2d       	sub	sp,8
	volatile avr32_tc_t *tc = EXAMPLE_TC;
80003e98:	fe 78 38 00 	mov	r8,-51200
80003e9c:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t timer = 0;
80003ea0:	30 08       	mov	r8,0
80003ea2:	ef 48 ff fc 	st.w	r7[-4],r8
	 * peripheral clocks, except for the peripheral clocks explicitly
	 * enabled in conf_clock.h.
	 */
	//sysclk_init();
	// Enable the clock to the selected example Timer/counter peripheral module.
	sysclk_enable_peripheral_clock(EXAMPLE_TC);
80003ea6:	fe 7c 38 00 	mov	r12,-51200
80003eaa:	f0 1f 00 0d 	mcall	80003edc <tc_task+0x4c>
	// Disable the interrupts
	cpu_irq_disable();
80003eae:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	//INTC_init_interrupts();
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80003eb0:	30 0a       	mov	r10,0
80003eb2:	e0 6b 01 c0 	mov	r11,448
80003eb6:	48 bc       	lddpc	r12,80003ee0 <tc_task+0x50>
80003eb8:	f0 1f 00 0b 	mcall	80003ee4 <tc_task+0x54>
	// Enable the interrupts
	cpu_irq_enable();
80003ebc:	d5 03       	csrf	0x10
	// Initialize the timer module
	tc_init(tc);
80003ebe:	ee fc ff f8 	ld.w	r12,r7[-8]
80003ec2:	f0 1f 00 0a 	mcall	80003ee8 <tc_task+0x58>
	// Initialize push buttons
	push_buttons_init();
80003ec6:	f0 1f 00 0a 	mcall	80003eec <tc_task+0x5c>

    calculate_hash(CipherKey256, 8, CipherKey256_hash);
80003eca:	48 aa       	lddpc	r10,80003ef0 <tc_task+0x60>
80003ecc:	30 8b       	mov	r11,8
80003ece:	48 ac       	lddpc	r12,80003ef4 <tc_task+0x64>
80003ed0:	f0 1f 00 0a 	mcall	80003ef8 <tc_task+0x68>
			 //*/
			 //// Reset the timer update flag to wait till next timer interrupt
			//update_timer = false;
		//}
	//}
}
80003ed4:	2f ed       	sub	sp,-8
80003ed6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eda:	00 00       	add	r0,r0
80003edc:	80 00       	ld.sh	r0,r0[0x0]
80003ede:	33 74       	mov	r4,55
80003ee0:	80 00       	ld.sh	r0,r0[0x0]
80003ee2:	35 88       	mov	r8,88
80003ee4:	80 00       	ld.sh	r0,r0[0x0]
80003ee6:	8b b4       	st.w	r5[0x2c],r4
80003ee8:	80 00       	ld.sh	r0,r0[0x0]
80003eea:	3e 1c       	mov	r12,-31
80003eec:	80 00       	ld.sh	r0,r0[0x0]
80003eee:	39 a4       	mov	r4,-102
80003ef0:	00 00       	add	r0,r0
80003ef2:	04 58       	eor	r8,r2
80003ef4:	80 00       	ld.sh	r0,r0[0x0]
80003ef6:	e8 00       	*unknown*
80003ef8:	80 00       	ld.sh	r0,r0[0x0]
80003efa:	2e 34       	sub	r4,-29

80003efc <init_hmatrix>:


/*! \brief Initializes the HSB bus matrix.
 */
static void init_hmatrix(void)
{
80003efc:	eb cd 40 80 	pushm	r7,lr
80003f00:	1a 97       	mov	r7,sp
80003f02:	20 1d       	sub	sp,4
  // Set flashc master type to last default to save one cycle for
  // each branch.
  avr32_hmatrix_scfg_t scfg;

  scfg = AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH];
80003f04:	fe 68 10 00 	mov	r8,-126976
80003f08:	71 08       	ld.w	r8,r8[0x40]
80003f0a:	ef 48 ff fc 	st.w	r7[-4],r8
  scfg.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
80003f0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f12:	30 19       	mov	r9,1
80003f14:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
80003f18:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH] = scfg;
80003f1c:	fe 68 10 00 	mov	r8,-126976
80003f20:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003f24:	f1 49 00 40 	st.w	r8[64],r9
}
80003f28:	2f fd       	sub	sp,-4
80003f2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f2e:	d7 03       	nop

80003f30 <aes_task>:
 * 8N1.
 * Then it sets up the interrupt handler and waits for a USART interrupt to
 * trigger.
 */
void aes_task (void)
{
80003f30:	eb cd 40 80 	pushm	r7,lr
80003f34:	1a 97       	mov	r7,sp
  init_hmatrix();
80003f36:	f0 1f 00 03 	mcall	80003f40 <aes_task+0x10>
}
80003f3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f3e:	00 00       	add	r0,r0
80003f40:	80 00       	ld.sh	r0,r0[0x0]
80003f42:	3e fc       	mov	r12,-17

80003f44 <aes_init>:
	0x5A43D875,	// AES-CTR IV (BYTE2)
	0x00000001	// COUNTER
};

void aes_init (unsigned char Processing_Mode)
{
80003f44:	eb cd 40 80 	pushm	r7,lr
80003f48:	1a 97       	mov	r7,sp
80003f4a:	20 3d       	sub	sp,12
80003f4c:	18 98       	mov	r8,r12
80003f4e:	ef 68 ff f4 	st.b	r7[-12],r8
	  aes_config_t    AesConf;        // AES config structure
	  // Configure the AES.
	  AesConf.ProcessingMode = Processing_Mode;   // Cipher
80003f52:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003f56:	ef 68 ff f8 	st.b	r7[-8],r8
	  AesConf.ProcessingDelay = 0;                // No delay: best performance
80003f5a:	30 08       	mov	r8,0
80003f5c:	ef 68 ff f9 	st.b	r7[-7],r8
	  AesConf.StartMode = AES_START_MODE_AUTO;    // Manual mode
80003f60:	30 18       	mov	r8,1
80003f62:	ef 68 ff fa 	st.b	r7[-6],r8
	  AesConf.KeySize = AES_KEY_SIZE_256;         // 256bit cryptographic key
80003f66:	30 28       	mov	r8,2
80003f68:	ef 68 ff fb 	st.b	r7[-5],r8
	  AesConf.OpMode = AES_CBC_MODE;              // CTR cipher mode
80003f6c:	30 18       	mov	r8,1
80003f6e:	ef 68 ff fc 	st.b	r7[-4],r8
	  AesConf.LodMode = 0;                        // LODMODE == 0 : the DATRDY flag
80003f72:	30 08       	mov	r8,0
80003f74:	ef 68 ff fd 	st.b	r7[-3],r8
	  // is cleared when one of the output data registers is read (because we're in
	  // manual mode).
	  AesConf.CFBSize = 0;                        // Don't-care because we're using the CTR mode.
80003f78:	30 08       	mov	r8,0
80003f7a:	ef 68 ff fe 	st.b	r7[-2],r8
	  AesConf.CounterMeasureMask = 0;             // Disable all counter measures.
80003f7e:	30 08       	mov	r8,0
80003f80:	ef 68 ff ff 	st.b	r7[-1],r8
	  aes_configure(&AVR32_AES, &AesConf);
80003f84:	ee c8 00 08 	sub	r8,r7,8
80003f88:	10 9b       	mov	r11,r8
80003f8a:	fc 7c 00 00 	mov	r12,-196608
80003f8e:	f0 1f 00 06 	mcall	80003fa4 <aes_init+0x60>
	  aes_set_key(&AVR32_AES, CipherKey256);
80003f92:	48 6b       	lddpc	r11,80003fa8 <aes_init+0x64>
80003f94:	fc 7c 00 00 	mov	r12,-196608
80003f98:	f0 1f 00 05 	mcall	80003fac <aes_init+0x68>

	  //ccountt0 = Get_system_register(AVR32_COUNT);
	  // Start encryption.
	  //aes_start(&AVR32_AES);

}
80003f9c:	2f dd       	sub	sp,-12
80003f9e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fa2:	00 00       	add	r0,r0
80003fa4:	80 00       	ld.sh	r0,r0[0x0]
80003fa6:	7f 54       	ld.w	r4,pc[0x54]
80003fa8:	80 00       	ld.sh	r0,r0[0x0]
80003faa:	e8 00       	*unknown*
80003fac:	80 00       	ld.sh	r0,r0[0x0]
80003fae:	7f e4       	ld.w	r4,pc[0x78]

80003fb0 <apply_aes_encryption>:
uint32_t aes_out_data[128] = {0};

void apply_aes_encryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint16_t len, uint32_t sector_id)
{
80003fb0:	eb cd 40 80 	pushm	r7,lr
80003fb4:	1a 97       	mov	r7,sp
80003fb6:	20 6d       	sub	sp,24
80003fb8:	ef 4c ff f4 	st.w	r7[-12],r12
80003fbc:	ef 4b ff f0 	st.w	r7[-16],r11
80003fc0:	14 98       	mov	r8,r10
80003fc2:	ef 49 ff e8 	st.w	r7[-24],r9
80003fc6:	ef 58 ff ec 	st.h	r7[-20],r8
	uint8_t i, loop_counter;
	uint32_t temp;
	
	temp = CipherKey256_hash[0];
80003fca:	4b 68       	lddpc	r8,800040a0 <apply_aes_encryption+0xf0>
80003fcc:	70 08       	ld.w	r8,r8[0x0]
80003fce:	ef 48 ff fc 	st.w	r7[-4],r8

	CipherKey256_hash[0] = CipherKey256_hash[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
80003fd2:	4b 48       	lddpc	r8,800040a0 <apply_aes_encryption+0xf0>
80003fd4:	70 09       	ld.w	r9,r8[0x0]
80003fd6:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003fda:	10 59       	eor	r9,r8
80003fdc:	4b 18       	lddpc	r8,800040a0 <apply_aes_encryption+0xf0>
80003fde:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
							 
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);	
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);	
80003fe0:	4b 0b       	lddpc	r11,800040a0 <apply_aes_encryption+0xf0>
80003fe2:	fc 7c 00 00 	mov	r12,-196608
80003fe6:	f0 1f 00 30 	mcall	800040a4 <apply_aes_encryption+0xf4>
	
	CipherKey256_hash[0] = temp;
80003fea:	4a e8       	lddpc	r8,800040a0 <apply_aes_encryption+0xf0>
80003fec:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003ff0:	91 09       	st.w	r8[0x0],r9
	
	loop_counter = len >> 2;
80003ff2:	ef 18 ff ec 	ld.uh	r8,r7[-20]
80003ff6:	a3 88       	lsr	r8,0x2
80003ff8:	5c 88       	casts.h	r8
80003ffa:	ef 68 ff fb 	st.b	r7[-5],r8
		
	for (i = 0; i < loop_counter; i+=4)
80003ffe:	30 08       	mov	r8,0
80004000:	ef 68 ff fa 	st.b	r7[-6],r8
80004004:	c2 78       	rjmp	80004052 <apply_aes_encryption+0xa2>
	{
		aes_init(AES_PMODE_CIPHER);
80004006:	30 1c       	mov	r12,1
80004008:	f0 1f 00 28 	mcall	800040a8 <apply_aes_encryption+0xf8>
			
		aes_write_inputdata(aes, &aes_in_data_t[i]);
8000400c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004010:	a3 68       	lsl	r8,0x2
80004012:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004016:	f2 08 00 08 	add	r8,r9,r8
8000401a:	10 9b       	mov	r11,r8
8000401c:	ee fc ff f4 	ld.w	r12,r7[-12]
80004020:	f0 1f 00 23 	mcall	800040ac <apply_aes_encryption+0xfc>

		while (!(aes->isr & 0x00000001));
80004024:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004028:	70 78       	ld.w	r8,r8[0x1c]
8000402a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000402e:	cf b0       	breq	80004024 <apply_aes_encryption+0x74>

		aes_read_outputdata(aes, &aes_out_data[i]);
80004030:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004034:	f0 09 15 02 	lsl	r9,r8,0x2
80004038:	49 e8       	lddpc	r8,800040b0 <apply_aes_encryption+0x100>
8000403a:	f2 08 00 08 	add	r8,r9,r8
8000403e:	10 9b       	mov	r11,r8
80004040:	ee fc ff f4 	ld.w	r12,r7[-12]
80004044:	f0 1f 00 1c 	mcall	800040b4 <apply_aes_encryption+0x104>
	
	CipherKey256_hash[0] = temp;
	
	loop_counter = len >> 2;
		
	for (i = 0; i < loop_counter; i+=4)
80004048:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000404c:	2f c8       	sub	r8,-4
8000404e:	ef 68 ff fa 	st.b	r7[-6],r8
80004052:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80004056:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000405a:	f0 09 18 00 	cp.b	r9,r8
8000405e:	cd 43       	brcs	80004006 <apply_aes_encryption+0x56>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
80004060:	30 08       	mov	r8,0
80004062:	ef 68 ff fa 	st.b	r7[-6],r8
80004066:	c1 38       	rjmp	8000408c <apply_aes_encryption+0xdc>
	{
		aes_in_data_t[i] = aes_out_data[i];
80004068:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000406c:	a3 68       	lsl	r8,0x2
8000406e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004072:	f2 08 00 08 	add	r8,r9,r8
80004076:	ef 3a ff fa 	ld.ub	r10,r7[-6]
8000407a:	48 e9       	lddpc	r9,800040b0 <apply_aes_encryption+0x100>
8000407c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80004080:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
80004082:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004086:	2f f8       	sub	r8,-1
80004088:	ef 68 ff fa 	st.b	r7[-6],r8
8000408c:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80004090:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004094:	f0 09 18 00 	cp.b	r9,r8
80004098:	ce 83       	brcs	80004068 <apply_aes_encryption+0xb8>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
8000409a:	2f ad       	sub	sp,-24
8000409c:	e3 cd 80 80 	ldm	sp++,r7,pc
800040a0:	00 00       	add	r0,r0
800040a2:	04 58       	eor	r8,r2
800040a4:	80 00       	ld.sh	r0,r0[0x0]
800040a6:	80 72       	ld.sh	r2,r0[0xe]
800040a8:	80 00       	ld.sh	r0,r0[0x0]
800040aa:	3f 44       	mov	r4,-12
800040ac:	80 00       	ld.sh	r0,r0[0x0]
800040ae:	80 ce       	ld.uh	lr,r0[0x8]
800040b0:	00 00       	add	r0,r0
800040b2:	04 84       	andn	r4,r2
800040b4:	80 00       	ld.sh	r0,r0[0x0]
800040b6:	81 66       	st.w	r0[0x18],r6

800040b8 <apply_aes_decryption>:


void apply_aes_decryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint16_t len, uint32_t sector_id)
{
800040b8:	eb cd 40 80 	pushm	r7,lr
800040bc:	1a 97       	mov	r7,sp
800040be:	20 6d       	sub	sp,24
800040c0:	ef 4c ff f4 	st.w	r7[-12],r12
800040c4:	ef 4b ff f0 	st.w	r7[-16],r11
800040c8:	14 98       	mov	r8,r10
800040ca:	ef 49 ff e8 	st.w	r7[-24],r9
800040ce:	ef 58 ff ec 	st.h	r7[-20],r8
	
	uint8_t i, loop_counter;
	uint32_t temp;

	temp = CipherKey256_hash[0];
800040d2:	4b 68       	lddpc	r8,800041a8 <apply_aes_decryption+0xf0>
800040d4:	70 08       	ld.w	r8,r8[0x0]
800040d6:	ef 48 ff fc 	st.w	r7[-4],r8

	CipherKey256_hash[0] = CipherKey256_hash[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
800040da:	4b 48       	lddpc	r8,800041a8 <apply_aes_decryption+0xf0>
800040dc:	70 09       	ld.w	r9,r8[0x0]
800040de:	ee f8 ff e8 	ld.w	r8,r7[-24]
800040e2:	10 59       	eor	r9,r8
800040e4:	4b 18       	lddpc	r8,800041a8 <apply_aes_decryption+0xf0>
800040e6:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
	
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);
800040e8:	4b 0b       	lddpc	r11,800041a8 <apply_aes_decryption+0xf0>
800040ea:	fc 7c 00 00 	mov	r12,-196608
800040ee:	f0 1f 00 30 	mcall	800041ac <apply_aes_decryption+0xf4>
	
	CipherKey256_hash[0] = temp;
800040f2:	4a e8       	lddpc	r8,800041a8 <apply_aes_decryption+0xf0>
800040f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800040f8:	91 09       	st.w	r8[0x0],r9

	loop_counter = len >> 2;
800040fa:	ef 18 ff ec 	ld.uh	r8,r7[-20]
800040fe:	a3 88       	lsr	r8,0x2
80004100:	5c 88       	casts.h	r8
80004102:	ef 68 ff fb 	st.b	r7[-5],r8

	for (i = 0; i < loop_counter; i+=4)
80004106:	30 08       	mov	r8,0
80004108:	ef 68 ff fa 	st.b	r7[-6],r8
8000410c:	c2 78       	rjmp	8000415a <apply_aes_decryption+0xa2>
	{
		aes_init(AES_PMODE_DECIPHER);
8000410e:	30 0c       	mov	r12,0
80004110:	f0 1f 00 28 	mcall	800041b0 <apply_aes_decryption+0xf8>

		aes_write_inputdata(aes, &aes_in_data_t[i]);
80004114:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004118:	a3 68       	lsl	r8,0x2
8000411a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000411e:	f2 08 00 08 	add	r8,r9,r8
80004122:	10 9b       	mov	r11,r8
80004124:	ee fc ff f4 	ld.w	r12,r7[-12]
80004128:	f0 1f 00 23 	mcall	800041b4 <apply_aes_decryption+0xfc>

		while (!(aes->isr & 0x00000001));
8000412c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004130:	70 78       	ld.w	r8,r8[0x1c]
80004132:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004136:	cf b0       	breq	8000412c <apply_aes_decryption+0x74>

		aes_read_outputdata(aes, &aes_out_data[i]);
80004138:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000413c:	f0 09 15 02 	lsl	r9,r8,0x2
80004140:	49 e8       	lddpc	r8,800041b8 <apply_aes_decryption+0x100>
80004142:	f2 08 00 08 	add	r8,r9,r8
80004146:	10 9b       	mov	r11,r8
80004148:	ee fc ff f4 	ld.w	r12,r7[-12]
8000414c:	f0 1f 00 1c 	mcall	800041bc <apply_aes_decryption+0x104>
	
	CipherKey256_hash[0] = temp;

	loop_counter = len >> 2;

	for (i = 0; i < loop_counter; i+=4)
80004150:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004154:	2f c8       	sub	r8,-4
80004156:	ef 68 ff fa 	st.b	r7[-6],r8
8000415a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000415e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004162:	f0 09 18 00 	cp.b	r9,r8
80004166:	cd 43       	brcs	8000410e <apply_aes_decryption+0x56>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < loop_counter; i++)
80004168:	30 08       	mov	r8,0
8000416a:	ef 68 ff fa 	st.b	r7[-6],r8
8000416e:	c1 38       	rjmp	80004194 <apply_aes_decryption+0xdc>
	{
		aes_in_data_t[i] = aes_out_data[i];
80004170:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004174:	a3 68       	lsl	r8,0x2
80004176:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000417a:	f2 08 00 08 	add	r8,r9,r8
8000417e:	ef 3a ff fa 	ld.ub	r10,r7[-6]
80004182:	48 e9       	lddpc	r9,800041b8 <apply_aes_decryption+0x100>
80004184:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80004188:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < loop_counter; i++)
8000418a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000418e:	2f f8       	sub	r8,-1
80004190:	ef 68 ff fa 	st.b	r7[-6],r8
80004194:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80004198:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000419c:	f0 09 18 00 	cp.b	r9,r8
800041a0:	ce 83       	brcs	80004170 <apply_aes_decryption+0xb8>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
800041a2:	2f ad       	sub	sp,-24
800041a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800041a8:	00 00       	add	r0,r0
800041aa:	04 58       	eor	r8,r2
800041ac:	80 00       	ld.sh	r0,r0[0x0]
800041ae:	80 72       	ld.sh	r2,r0[0xe]
800041b0:	80 00       	ld.sh	r0,r0[0x0]
800041b2:	3f 44       	mov	r4,-12
800041b4:	80 00       	ld.sh	r0,r0[0x0]
800041b6:	80 ce       	ld.uh	lr,r0[0x8]
800041b8:	00 00       	add	r0,r0
800041ba:	04 84       	andn	r4,r2
800041bc:	80 00       	ld.sh	r0,r0[0x0]
800041be:	81 66       	st.w	r0[0x18],r6

800041c0 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
# define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
800041c0:	eb cd 40 80 	pushm	r7,lr
800041c4:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800041c6:	30 3b       	mov	r11,3
800041c8:	34 3c       	mov	r12,67
800041ca:	f0 1f 00 17 	mcall	80004224 <board_init+0x64>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800041ce:	30 3b       	mov	r11,3
800041d0:	36 5c       	mov	r12,101
800041d2:	f0 1f 00 15 	mcall	80004224 <board_init+0x64>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800041d6:	30 3b       	mov	r11,3
800041d8:	36 9c       	mov	r12,105
800041da:	f0 1f 00 13 	mcall	80004224 <board_init+0x64>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800041de:	30 3b       	mov	r11,3
800041e0:	36 6c       	mov	r12,102
800041e2:	f0 1f 00 11 	mcall	80004224 <board_init+0x64>

	gpio_configure_pin(GPIO_PUSH_BUTTON_SW2,GPIO_DIR_INPUT);
800041e6:	30 0b       	mov	r11,0
800041e8:	32 ac       	mov	r12,42
800041ea:	f0 1f 00 0f 	mcall	80004224 <board_init+0x64>
# define AT45DBX_ENABLE_NPCS_PIN(NPCS, unused) \
	{AT45DBX_SPI_NPCS##NPCS##_PIN, AT45DBX_SPI_NPCS##NPCS##_FUNCTION},
	MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
# undef AT45DBX_ENABLE_NPCS_PIN
	};
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
800041ee:	30 4b       	mov	r11,4
800041f0:	48 ec       	lddpc	r12,80004228 <board_init+0x68>
800041f2:	f0 1f 00 0f 	mcall	8000422c <board_init+0x6c>
		{SD_SLOT_4BITS_DATA1_PIN, SD_SLOT_4BITS_DATA1_FUNCTION},
		{SD_SLOT_4BITS_DATA2_PIN, SD_SLOT_4BITS_DATA2_FUNCTION},
		{SD_SLOT_4BITS_DATA3_PIN, SD_SLOT_4BITS_DATA3_FUNCTION}
	};
	// Configure Slot 0 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP,
800041f6:	30 ab       	mov	r11,10
800041f8:	48 ec       	lddpc	r12,80004230 <board_init+0x70>
800041fa:	f0 1f 00 0d 	mcall	8000422c <board_init+0x6c>
			sizeof(SD_MMC_MCI_GPIO_MAP) / sizeof(SD_MMC_MCI_GPIO_MAP[0]));
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_CARD_DETECT);
800041fe:	32 bc       	mov	r12,43
80004200:	f0 1f 00 0d 	mcall	80004234 <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_WRITE_PROTECT);
80004204:	36 cc       	mov	r12,108
80004206:	f0 1f 00 0c 	mcall	80004234 <board_init+0x74>

	// Configure Slot 1 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP_1,
8000420a:	30 6b       	mov	r11,6
8000420c:	48 bc       	lddpc	r12,80004238 <board_init+0x78>
8000420e:	f0 1f 00 08 	mcall	8000422c <board_init+0x6c>
	sizeof(SD_MMC_MCI_GPIO_MAP_1) / sizeof(SD_MMC_MCI_GPIO_MAP_1[0]));
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_CARD_DETECT);
80004212:	32 8c       	mov	r12,40
80004214:	f0 1f 00 08 	mcall	80004234 <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_WRITE_PROTECT);
80004218:	32 6c       	mov	r12,38
8000421a:	f0 1f 00 07 	mcall	80004234 <board_init+0x74>
		{AVR32_USART3_TXD_0_3_PIN, AVR32_USART3_TXD_0_3_FUNCTION },
	};
	gpio_enable_module(COMPORT3_GPIO_MAP,
			sizeof(COMPORT3_GPIO_MAP) / sizeof(COMPORT3_GPIO_MAP[0]));
#endif
}
8000421e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004222:	00 00       	add	r0,r0
80004224:	80 00       	ld.sh	r0,r0[0x0]
80004226:	87 6e       	st.w	r3[0x18],lr
80004228:	80 00       	ld.sh	r0,r0[0x0]
8000422a:	e9 4c 80 00 	st.w	r4[-32768],r12
8000422e:	85 60       	st.w	r2[0x18],r0
80004230:	80 00       	ld.sh	r0,r0[0x0]
80004232:	e9 54 80 00 	st.h	r4[-32768],r4
80004236:	87 34       	st.w	r3[0xc],r4
80004238:	80 00       	ld.sh	r0,r0[0x0]
8000423a:	e9 68 eb cd 	st.b	r4[-5171],r8

8000423c <LED_Off>:
  return Tst_bits(LED_State, leds);
}


void LED_Off(U32 leds)
{
8000423c:	eb cd 40 80 	pushm	r7,lr
80004240:	1a 97       	mov	r7,sp
80004242:	20 4d       	sub	sp,16
80004244:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80004248:	4a 98       	lddpc	r8,800042ec <LED_Off+0xb0>
8000424a:	21 08       	sub	r8,16
8000424c:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80004250:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004254:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004258:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
8000425c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004260:	f0 09 11 ff 	rsub	r9,r8,-1
80004264:	4a 38       	lddpc	r8,800042f0 <LED_Off+0xb4>
80004266:	70 08       	ld.w	r8,r8[0x0]
80004268:	10 69       	and	r9,r8
8000426a:	4a 28       	lddpc	r8,800042f0 <LED_Off+0xb4>
8000426c:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000426e:	c3 78       	rjmp	800042dc <LED_Off+0xa0>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80004270:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004274:	5c 98       	brev	r8
80004276:	f0 08 12 00 	clz	r8,r8
8000427a:	5c 58       	castu.b	r8
8000427c:	2f f8       	sub	r8,-1
8000427e:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80004282:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004286:	a5 68       	lsl	r8,0x4
80004288:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000428c:	f2 08 00 08 	add	r8,r9,r8
80004290:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80004294:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004298:	70 08       	ld.w	r8,r8[0x0]
8000429a:	a9 68       	lsl	r8,0x8
8000429c:	e0 28 f0 00 	sub	r8,61440
800042a0:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800042a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042a8:	70 19       	ld.w	r9,r8[0x4]
800042aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042ae:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800042b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042b6:	70 19       	ld.w	r9,r8[0x4]
800042b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042bc:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800042c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042c4:	70 19       	ld.w	r9,r8[0x4]
800042c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042ca:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
800042cc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800042d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800042d4:	f2 08 0a 48 	lsr	r8,r9,r8
800042d8:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800042dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042e0:	58 08       	cp.w	r8,0
800042e2:	cc 71       	brne	80004270 <LED_Off+0x34>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800042e4:	2f cd       	sub	sp,-16
800042e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800042ea:	00 00       	add	r0,r0
800042ec:	80 00       	ld.sh	r0,r0[0x0]
800042ee:	e9 74 00 00 	stcond	r4[0],r4
800042f2:	01 30       	ld.ub	r0,r0++

800042f4 <LED_On>:


void LED_On(U32 leds)
{
800042f4:	eb cd 40 80 	pushm	r7,lr
800042f8:	1a 97       	mov	r7,sp
800042fa:	20 4d       	sub	sp,16
800042fc:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80004300:	4a 88       	lddpc	r8,800043a0 <LED_On+0xac>
80004302:	21 08       	sub	r8,16
80004304:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80004308:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000430c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004310:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80004314:	4a 48       	lddpc	r8,800043a4 <LED_On+0xb0>
80004316:	70 09       	ld.w	r9,r8[0x0]
80004318:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000431c:	10 49       	or	r9,r8
8000431e:	4a 28       	lddpc	r8,800043a4 <LED_On+0xb0>
80004320:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80004322:	c3 78       	rjmp	80004390 <LED_On+0x9c>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80004324:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004328:	5c 98       	brev	r8
8000432a:	f0 08 12 00 	clz	r8,r8
8000432e:	5c 58       	castu.b	r8
80004330:	2f f8       	sub	r8,-1
80004332:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80004336:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000433a:	a5 68       	lsl	r8,0x4
8000433c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004340:	f2 08 00 08 	add	r8,r9,r8
80004344:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80004348:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000434c:	70 08       	ld.w	r8,r8[0x0]
8000434e:	a9 68       	lsl	r8,0x8
80004350:	e0 28 f0 00 	sub	r8,61440
80004354:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80004358:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000435c:	70 19       	ld.w	r9,r8[0x4]
8000435e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004362:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80004366:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000436a:	70 19       	ld.w	r9,r8[0x4]
8000436c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004370:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80004374:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004378:	70 19       	ld.w	r9,r8[0x4]
8000437a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000437e:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80004380:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004384:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004388:	f2 08 0a 48 	lsr	r8,r9,r8
8000438c:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80004390:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004394:	58 08       	cp.w	r8,0
80004396:	cc 71       	brne	80004324 <LED_On+0x30>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
80004398:	2f cd       	sub	sp,-16
8000439a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000439e:	00 00       	add	r0,r0
800043a0:	80 00       	ld.sh	r0,r0[0x0]
800043a2:	e9 74 00 00 	stcond	r4[0],r4
800043a6:	01 30       	ld.ub	r0,r0++

800043a8 <et024006_Init>:
 *  @param cpu_hz CPU speed in Hz. This is needed for power up timings.
 *  @param hsb_hz HSB bus speed in Hz. This parameter is needed to set up the SMC.
 *  If SPI mode is used then this parameter is ignored.
 */
void et024006_Init( unsigned long cpu_hz, unsigned long hsb_hz )
{
800043a8:	eb cd 40 80 	pushm	r7,lr
800043ac:	1a 97       	mov	r7,sp
800043ae:	20 2d       	sub	sp,8
800043b0:	ef 4c ff fc 	st.w	r7[-4],r12
800043b4:	ef 4b ff f8 	st.w	r7[-8],r11
  tft_data.cpu_hz = cpu_hz;
800043b8:	49 08       	lddpc	r8,800043f8 <et024006_Init+0x50>
800043ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800043be:	91 09       	st.w	r8[0x0],r9
  tft_data.hsb_hz = hsb_hz;
800043c0:	48 e8       	lddpc	r8,800043f8 <et024006_Init+0x50>
800043c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043c6:	91 19       	st.w	r8[0x4],r9

#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_SPI)
  et024006_InitSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
800043c8:	48 c8       	lddpc	r8,800043f8 <et024006_Init+0x50>
800043ca:	70 18       	ld.w	r8,r8[0x4]
800043cc:	10 9c       	mov	r12,r8
800043ce:	f0 1f 00 0c 	mcall	800043fc <et024006_Init+0x54>
#endif
  et024006_SetupInterface();
800043d2:	f0 1f 00 0c 	mcall	80004400 <et024006_Init+0x58>
  et024006_ResetDisplay();
800043d6:	f0 1f 00 0c 	mcall	80004404 <et024006_Init+0x5c>
  et024006_AdjustGamma();
800043da:	f0 1f 00 0c 	mcall	80004408 <et024006_Init+0x60>
  et024006_GeneralSettings();
800043de:	f0 1f 00 0c 	mcall	8000440c <et024006_Init+0x64>
  et024006_InterfaceSettings();
800043e2:	f0 1f 00 0c 	mcall	80004410 <et024006_Init+0x68>
  et024006_PowerSettings();
800043e6:	f0 1f 00 0c 	mcall	80004414 <et024006_Init+0x6c>
  et024006_PowerUp();
800043ea:	f0 1f 00 0c 	mcall	80004418 <et024006_Init+0x70>
  et024006_PowerOn();
800043ee:	f0 1f 00 0c 	mcall	8000441c <et024006_Init+0x74>
}
800043f2:	2f ed       	sub	sp,-8
800043f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800043f8:	00 00       	add	r0,r0
800043fa:	06 84       	andn	r4,r3
800043fc:	80 00       	ld.sh	r0,r0[0x0]
800043fe:	82 00       	ld.sh	r0,r1[0x0]
80004400:	80 00       	ld.sh	r0,r0[0x0]
80004402:	4b ac       	lddpc	r12,800044e8 <et024006_PrintString+0x40>
80004404:	80 00       	ld.sh	r0,r0[0x0]
80004406:	4b d8       	lddpc	r8,800044f8 <et024006_PrintString+0x50>
80004408:	80 00       	ld.sh	r0,r0[0x0]
8000440a:	4e 98       	lddpc	r8,800045ac <et024006_PrintString+0x104>
8000440c:	80 00       	ld.sh	r0,r0[0x0]
8000440e:	50 26       	stdsp	sp[0x8],r6
80004410:	80 00       	ld.sh	r0,r0[0x0]
80004412:	53 c2       	stdsp	sp[0xf0],r2
80004414:	80 00       	ld.sh	r0,r0[0x0]
80004416:	52 34       	stdsp	sp[0x8c],r4
80004418:	80 00       	ld.sh	r0,r0[0x0]
8000441a:	53 f0       	stdsp	sp[0xfc],r0
8000441c:	80 00       	ld.sh	r0,r0[0x0]
8000441e:	5b 24       	cp.w	r4,-14

80004420 <et024006_DrawFilledRect>:
  }
}


void et024006_DrawFilledRect( uint16_t x, uint16_t y, uint16_t width, uint16_t height, et024006_color_t color )
{
80004420:	eb cd 40 80 	pushm	r7,lr
80004424:	1a 97       	mov	r7,sp
80004426:	20 7d       	sub	sp,28
80004428:	ef 5c ff f4 	st.h	r7[-12],r12
8000442c:	ef 5b ff f0 	st.h	r7[-16],r11
80004430:	ef 5a ff ec 	st.h	r7[-20],r10
80004434:	ef 59 ff e8 	st.h	r7[-24],r9
80004438:	ef 58 ff e4 	st.h	r7[-28],r8
  Assert( y < ET024006_HEIGHT );
  Assert( width > 0 );
  Assert( height > 0 );

  // Compute bottom right point.
  uint16_t x2 = x + width - 1;
8000443c:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80004440:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80004444:	f2 08 00 08 	add	r8,r9,r8
80004448:	5c 88       	casts.h	r8
8000444a:	20 18       	sub	r8,1
8000444c:	ef 58 ff f8 	st.h	r7[-8],r8
  uint16_t y2 = y + height - 1;
80004450:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80004454:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80004458:	f2 08 00 08 	add	r8,r9,r8
8000445c:	5c 88       	casts.h	r8
8000445e:	20 18       	sub	r8,1
80004460:	ef 58 ff fa 	st.h	r7[-6],r8
  // More sanity check.
  Assert( x2 < ET024006_WIDTH );
  Assert( y2 < ET024006_HEIGHT );

  // Set up draw area and copy pixel color until area is full.
  et024006_SetLimits( x, y, x2, y2 );
80004464:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80004468:	ef 1a ff f8 	ld.uh	r10,r7[-8]
8000446c:	ef 1b ff f0 	ld.uh	r11,r7[-16]
80004470:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80004474:	10 9c       	mov	r12,r8
80004476:	f0 1f 00 0b 	mcall	800044a0 <et024006_DrawFilledRect+0x80>
  uint32_t count = (uint32_t) width * height;
8000447a:	ef 19 ff ec 	ld.uh	r9,r7[-20]
8000447e:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80004482:	f2 08 02 48 	mul	r8,r9,r8
80004486:	ef 48 ff fc 	st.w	r7[-4],r8
  et024006_DuplicatePixel( color, count );
8000448a:	ef 18 ff e4 	ld.uh	r8,r7[-28]
8000448e:	ee fb ff fc 	ld.w	r11,r7[-4]
80004492:	10 9c       	mov	r12,r8
80004494:	f0 1f 00 04 	mcall	800044a4 <et024006_DrawFilledRect+0x84>
}
80004498:	2f 9d       	sub	sp,-28
8000449a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000449e:	00 00       	add	r0,r0
800044a0:	80 00       	ld.sh	r0,r0[0x0]
800044a2:	48 a6       	lddpc	r6,800044c8 <et024006_PrintString+0x20>
800044a4:	80 00       	ld.sh	r0,r0[0x0]
800044a6:	4b 00       	lddpc	r0,80004564 <et024006_PrintString+0xbc>

800044a8 <et024006_PrintString>:
void et024006_PrintString(char *lcd_string, const unsigned char *font_style,
                          uint16_t x,
                          uint16_t y,
                          uint16_t fcolor,
                          int bcolor)
{
800044a8:	eb cd 40 c0 	pushm	r6-r7,lr
800044ac:	1a 97       	mov	r7,sp
800044ae:	20 9d       	sub	sp,36
800044b0:	ee c6 ff f4 	sub	r6,r7,-12
800044b4:	ef 4c ff ec 	st.w	r7[-20],r12
800044b8:	ef 4b ff e8 	st.w	r7[-24],r11
800044bc:	ef 5a ff e4 	st.h	r7[-28],r10
800044c0:	ef 59 ff e0 	st.h	r7[-32],r9
800044c4:	ef 58 ff dc 	st.h	r7[-36],r8
  uint16_t  row, col;
  unsigned char mask = 0, xfont, yfont, font_size;
800044c8:	30 08       	mov	r8,0
800044ca:	ef 68 ff f4 	st.b	r7[-12],r8
  const unsigned char *data;
  uint16_t saved_x = x;
800044ce:	ef 08 ff e4 	ld.sh	r8,r7[-28]
800044d2:	ef 58 ff fc 	st.h	r7[-4],r8

  // if string is empty there is nothing to do
  if( *lcd_string == '\0')
800044d6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800044da:	11 88       	ld.ub	r8,r8[0x0]
800044dc:	58 08       	cp.w	r8,0
800044de:	e0 80 01 a4 	breq	80004826 <et024006_PrintString+0x37e>
    return;

  data = font_style;  // point to the start of the font table
800044e2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800044e6:	ef 48 ff f8 	st.w	r7[-8],r8
  xfont = *data;  // get font x width
800044ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044ee:	11 88       	ld.ub	r8,r8[0x0]
800044f0:	ef 68 ff f5 	st.b	r7[-11],r8
  data++;
800044f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044f8:	2f f8       	sub	r8,-1
800044fa:	ef 48 ff f8 	st.w	r7[-8],r8
  yfont = *data;  // get font y length
800044fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004502:	11 88       	ld.ub	r8,r8[0x0]
80004504:	ef 68 ff f6 	st.b	r7[-10],r8
  data++;
80004508:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000450c:	2f f8       	sub	r8,-1
8000450e:	ef 48 ff f8 	st.w	r7[-8],r8
  font_size = *data;  // get data bytes per font
80004512:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004516:	11 88       	ld.ub	r8,r8[0x0]
80004518:	ef 68 ff f7 	st.b	r7[-9],r8

  // If transparent mode
  if(bcolor == -1)
8000451c:	6c 08       	ld.w	r8,r6[0x0]
8000451e:	5b f8       	cp.w	r8,-1
80004520:	e0 81 00 c8 	brne	800046b0 <et024006_PrintString+0x208>
  {
    // set window to display size
    et024006_SetLimits( 0, 0, ET024006_WIDTH - 1, ET024006_HEIGHT - 1 );
80004524:	e0 69 00 ef 	mov	r9,239
80004528:	e0 6a 01 3f 	mov	r10,319
8000452c:	30 0b       	mov	r11,0
8000452e:	30 0c       	mov	r12,0
80004530:	f0 1f 00 c0 	mcall	80004830 <et024006_PrintString+0x388>

    do
    {
      if(*lcd_string =='\n') {
80004534:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004538:	11 89       	ld.ub	r9,r8[0x0]
8000453a:	30 a8       	mov	r8,10
8000453c:	f0 09 18 00 	cp.b	r9,r8
80004540:	c1 31       	brne	80004566 <et024006_PrintString+0xbe>
        x = saved_x;
80004542:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80004546:	ef 58 ff e4 	st.h	r7[-28],r8
        y += yfont;
8000454a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000454e:	ef 09 ff e0 	ld.sh	r9,r7[-32]
80004552:	f2 08 00 08 	add	r8,r9,r8
80004556:	ef 58 ff e0 	st.h	r7[-32],r8
        lcd_string++;  // next character in string
8000455a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000455e:	2f f8       	sub	r8,-1
80004560:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
80004564:	c9 f8       	rjmp	800046a2 <et024006_PrintString+0x1fa>
      } else if(*lcd_string =='\t') {
80004566:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000456a:	11 89       	ld.ub	r9,r8[0x0]
8000456c:	30 98       	mov	r8,9
8000456e:	f0 09 18 00 	cp.b	r9,r8
80004572:	c0 f1       	brne	80004590 <et024006_PrintString+0xe8>
        x += xfont;
80004574:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004578:	ef 09 ff e4 	ld.sh	r9,r7[-28]
8000457c:	f2 08 00 08 	add	r8,r9,r8
80004580:	ef 58 ff e4 	st.h	r7[-28],r8
        lcd_string++;  // next character in string
80004584:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004588:	2f f8       	sub	r8,-1
8000458a:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
8000458e:	c8 a8       	rjmp	800046a2 <et024006_PrintString+0x1fa>
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
80004590:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004594:	11 89       	ld.ub	r9,r8[0x0]
80004596:	31 f8       	mov	r8,31
80004598:	f0 09 18 00 	cp.b	r9,r8
8000459c:	e0 88 00 1d 	brls	800045d6 <et024006_PrintString+0x12e>
800045a0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045a4:	11 88       	ld.ub	r8,r8[0x0]
800045a6:	10 99       	mov	r9,r8
800045a8:	30 08       	mov	r8,0
800045aa:	f0 09 18 00 	cp.b	r9,r8
800045ae:	c1 45       	brlt	800045d6 <et024006_PrintString+0x12e>
      {
        // point to character data in font table
        data =  (font_style + font_size) +  // header offset
800045b0:	ef 39 ff f7 	ld.ub	r9,r7[-9]
          (font_size * (int)(*lcd_string - 32)); // character select
800045b4:	ef 3a ff f7 	ld.ub	r10,r7[-9]
800045b8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045bc:	11 88       	ld.ub	r8,r8[0x0]
800045be:	22 08       	sub	r8,32
800045c0:	f4 08 02 48 	mul	r8,r10,r8
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
      {
        // point to character data in font table
        data =  (font_style + font_size) +  // header offset
800045c4:	f2 08 00 08 	add	r8,r9,r8
800045c8:	ee f9 ff e8 	ld.w	r9,r7[-24]
800045cc:	f2 08 00 08 	add	r8,r9,r8
800045d0:	ef 48 ff f8 	st.w	r7[-8],r8
        x += xfont;
        lcd_string++;  // next character in string
        continue;
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
800045d4:	c1 28       	rjmp	800045f8 <et024006_PrintString+0x150>
        data =  (font_style + font_size) +  // header offset
          (font_size * (int)(*lcd_string - 32)); // character select
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;
800045d6:	ef 3a ff f7 	ld.ub	r10,r7[-9]
800045da:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800045de:	12 98       	mov	r8,r9
800045e0:	a1 78       	lsl	r8,0x1
800045e2:	12 08       	add	r8,r9
800045e4:	a5 78       	lsl	r8,0x5
800045e6:	12 18       	sub	r8,r9
800045e8:	f4 08 00 08 	add	r8,r10,r8
800045ec:	ee f9 ff e8 	ld.w	r9,r7[-24]
800045f0:	f2 08 00 08 	add	r8,r9,r8
800045f4:	ef 48 ff f8 	st.w	r7[-8],r8

      for (row = y; row < (y + yfont); row++)
800045f8:	ef 08 ff e0 	ld.sh	r8,r7[-32]
800045fc:	ef 58 ff f0 	st.h	r7[-16],r8
80004600:	c3 a8       	rjmp	80004674 <et024006_PrintString+0x1cc>
      {
        mask = 0x80;
80004602:	38 08       	mov	r8,-128
80004604:	ef 68 ff f4 	st.b	r7[-12],r8
        for (col = x; col < (x + xfont); col++)
80004608:	ef 08 ff e4 	ld.sh	r8,r7[-28]
8000460c:	ef 58 ff f2 	st.h	r7[-14],r8
80004610:	c1 e8       	rjmp	8000464c <et024006_PrintString+0x1a4>
        {
          if (*data & mask) // if pixel data then put dot
80004612:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004616:	11 89       	ld.ub	r9,r8[0x0]
80004618:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000461c:	f3 e8 00 08 	and	r8,r9,r8
80004620:	5c 58       	castu.b	r8
80004622:	c0 b0       	breq	80004638 <et024006_PrintString+0x190>
          {
            et024006_DrawQuickPixel( col, row, fcolor );
80004624:	ef 1a ff dc 	ld.uh	r10,r7[-36]
80004628:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000462c:	ef 18 ff f2 	ld.uh	r8,r7[-14]
80004630:	12 9b       	mov	r11,r9
80004632:	10 9c       	mov	r12,r8
80004634:	f0 1f 00 80 	mcall	80004834 <et024006_PrintString+0x38c>
          }
          mask >>= 1;
80004638:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000463c:	a1 98       	lsr	r8,0x1
8000463e:	ef 68 ff f4 	st.b	r7[-12],r8
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
80004642:	ef 08 ff f2 	ld.sh	r8,r7[-14]
80004646:	2f f8       	sub	r8,-1
80004648:	ef 58 ff f2 	st.h	r7[-14],r8
8000464c:	ef 19 ff f2 	ld.uh	r9,r7[-14]
80004650:	ef 1a ff e4 	ld.uh	r10,r7[-28]
80004654:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004658:	f4 08 00 08 	add	r8,r10,r8
8000465c:	10 39       	cp.w	r9,r8
8000465e:	cd a5       	brlt	80004612 <et024006_PrintString+0x16a>
            et024006_DrawQuickPixel( col, row, fcolor );
          }
          mask >>= 1;
        }
        // Next row data
        data++;
80004660:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004664:	2f f8       	sub	r8,-1
80004666:	ef 48 ff f8 	st.w	r7[-8],r8
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
8000466a:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000466e:	2f f8       	sub	r8,-1
80004670:	ef 58 ff f0 	st.h	r7[-16],r8
80004674:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80004678:	ef 1a ff e0 	ld.uh	r10,r7[-32]
8000467c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004680:	f4 08 00 08 	add	r8,r10,r8
80004684:	10 39       	cp.w	r9,r8
80004686:	cb e5       	brlt	80004602 <et024006_PrintString+0x15a>
        }
        // Next row data
        data++;
      }
      // move to next character start pixel
      x += xfont;
80004688:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000468c:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004690:	f2 08 00 08 	add	r8,r9,r8
80004694:	ef 58 ff e4 	st.h	r7[-28],r8
      lcd_string++;  // next character in string
80004698:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000469c:	2f f8       	sub	r8,-1
8000469e:	ef 48 ff ec 	st.w	r7[-20],r8

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
800046a2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800046a6:	11 88       	ld.ub	r8,r8[0x0]
800046a8:	58 08       	cp.w	r8,0
800046aa:	fe 91 ff 45 	brne	80004534 <et024006_PrintString+0x8c>
800046ae:	cb d8       	rjmp	80004828 <et024006_PrintString+0x380>
  }
  else
  {
    do
    {
      if(*lcd_string =='\n') {
800046b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800046b4:	11 89       	ld.ub	r9,r8[0x0]
800046b6:	30 a8       	mov	r8,10
800046b8:	f0 09 18 00 	cp.b	r9,r8
800046bc:	c1 31       	brne	800046e2 <et024006_PrintString+0x23a>
        x = saved_x;
800046be:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800046c2:	ef 58 ff e4 	st.h	r7[-28],r8
        y += yfont;
800046c6:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800046ca:	ef 09 ff e0 	ld.sh	r9,r7[-32]
800046ce:	f2 08 00 08 	add	r8,r9,r8
800046d2:	ef 58 ff e0 	st.h	r7[-32],r8
        lcd_string++;  // next character in string
800046d6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800046da:	2f f8       	sub	r8,-1
800046dc:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
800046e0:	c9 c8       	rjmp	80004818 <et024006_PrintString+0x370>
      } else if(*lcd_string =='\t') {
800046e2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800046e6:	11 89       	ld.ub	r9,r8[0x0]
800046e8:	30 98       	mov	r8,9
800046ea:	f0 09 18 00 	cp.b	r9,r8
800046ee:	c0 f1       	brne	8000470c <et024006_PrintString+0x264>
        x += xfont;
800046f0:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800046f4:	ef 09 ff e4 	ld.sh	r9,r7[-28]
800046f8:	f2 08 00 08 	add	r8,r9,r8
800046fc:	ef 58 ff e4 	st.h	r7[-28],r8
        lcd_string++;  // next character in string
80004700:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004704:	2f f8       	sub	r8,-1
80004706:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
8000470a:	c8 78       	rjmp	80004818 <et024006_PrintString+0x370>
      }
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
8000470c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
        (font_size * (int)(*lcd_string - 32)); // character select
80004710:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80004714:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004718:	11 88       	ld.ub	r8,r8[0x0]
8000471a:	22 08       	sub	r8,32
8000471c:	f4 08 02 48 	mul	r8,r10,r8
        x += xfont;
        lcd_string++;  // next character in string
        continue;
      }
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
80004720:	f2 08 00 08 	add	r8,r9,r8
80004724:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004728:	f2 08 00 08 	add	r8,r9,r8
8000472c:	ef 48 ff f8 	st.w	r7[-8],r8
        (font_size * (int)(*lcd_string - 32)); // character select

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
80004730:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004734:	ef 09 ff e0 	ld.sh	r9,r7[-32]
80004738:	f2 08 00 08 	add	r8,r9,r8
8000473c:	5c 88       	casts.h	r8
8000473e:	20 18       	sub	r8,1
80004740:	5c 88       	casts.h	r8
80004742:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
80004746:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000474a:	ef 09 ff e4 	ld.sh	r9,r7[-28]
8000474e:	f2 08 00 08 	add	r8,r9,r8
80004752:	5c 88       	casts.h	r8
80004754:	20 18       	sub	r8,1
80004756:	5c 88       	casts.h	r8
80004758:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000475c:	ef 1b ff e0 	ld.uh	r11,r7[-32]
80004760:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80004764:	18 99       	mov	r9,r12
80004766:	10 9c       	mov	r12,r8
80004768:	f0 1f 00 32 	mcall	80004830 <et024006_PrintString+0x388>
8000476c:	32 28       	mov	r8,34
8000476e:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004772:	fc 19 c0 00 	movh	r9,0xc000
80004776:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000477a:	b2 08       	st.h	r9[0x0],r8

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
8000477c:	30 08       	mov	r8,0
8000477e:	ef 58 ff f0 	st.h	r7[-16],r8
80004782:	c3 78       	rjmp	800047f0 <et024006_PrintString+0x348>
      {
        mask = 0x80;
80004784:	38 08       	mov	r8,-128
80004786:	ef 68 ff f4 	st.b	r7[-12],r8
        for (col = 0; col < xfont; col++)
8000478a:	30 08       	mov	r8,0
8000478c:	ef 58 ff f2 	st.h	r7[-14],r8
80004790:	c1 f8       	rjmp	800047ce <et024006_PrintString+0x326>
        {
          if (*data & mask) // if pixel data then put dot
80004792:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004796:	11 89       	ld.ub	r9,r8[0x0]
80004798:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000479c:	f3 e8 00 08 	and	r8,r9,r8
800047a0:	5c 58       	castu.b	r8
800047a2:	c0 70       	breq	800047b0 <et024006_PrintString+0x308>
          {
            *ET024006_PARAM_ADDR = fcolor;
800047a4:	fc 19 c0 20 	movh	r9,0xc020
800047a8:	ef 08 ff dc 	ld.sh	r8,r7[-36]
800047ac:	b2 08       	st.h	r9[0x0],r8
800047ae:	c0 68       	rjmp	800047ba <et024006_PrintString+0x312>
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
800047b0:	fc 19 c0 20 	movh	r9,0xc020
800047b4:	6c 08       	ld.w	r8,r6[0x0]
800047b6:	5c 88       	casts.h	r8
800047b8:	b2 08       	st.h	r9[0x0],r8
          }
          mask >>= 1;
800047ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800047be:	a1 98       	lsr	r8,0x1
800047c0:	ef 68 ff f4 	st.b	r7[-12],r8
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
800047c4:	ef 08 ff f2 	ld.sh	r8,r7[-14]
800047c8:	2f f8       	sub	r8,-1
800047ca:	ef 58 ff f2 	st.h	r7[-14],r8
800047ce:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800047d2:	ef 09 ff f2 	ld.sh	r9,r7[-14]
800047d6:	f0 09 19 00 	cp.h	r9,r8
800047da:	cd c3       	brcs	80004792 <et024006_PrintString+0x2ea>
          }
          mask >>= 1;
        }

        // Next row data
        data++;
800047dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047e0:	2f f8       	sub	r8,-1
800047e2:	ef 48 ff f8 	st.w	r7[-8],r8

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
800047e6:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800047ea:	2f f8       	sub	r8,-1
800047ec:	ef 58 ff f0 	st.h	r7[-16],r8
800047f0:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800047f4:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800047f8:	f0 09 19 00 	cp.h	r9,r8
800047fc:	cc 43       	brcs	80004784 <et024006_PrintString+0x2dc>

        // Next row data
        data++;
      }
      // move to next character start pixel
      x += xfont;
800047fe:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004802:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004806:	f2 08 00 08 	add	r8,r9,r8
8000480a:	ef 58 ff e4 	st.h	r7[-28],r8
      lcd_string++;  // next character in string
8000480e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004812:	2f f8       	sub	r8,-1
80004814:	ef 48 ff ec 	st.w	r7[-20],r8

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
80004818:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000481c:	11 88       	ld.ub	r8,r8[0x0]
8000481e:	58 08       	cp.w	r8,0
80004820:	fe 91 ff 48 	brne	800046b0 <et024006_PrintString+0x208>
80004824:	c0 28       	rjmp	80004828 <et024006_PrintString+0x380>
  const unsigned char *data;
  uint16_t saved_x = x;

  // if string is empty there is nothing to do
  if( *lcd_string == '\0')
    return;
80004826:	d7 03       	nop
      x += xfont;
      lcd_string++;  // next character in string

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
  }
}
80004828:	2f 7d       	sub	sp,-36
8000482a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000482e:	00 00       	add	r0,r0
80004830:	80 00       	ld.sh	r0,r0[0x0]
80004832:	48 a6       	lddpc	r6,80004858 <et024006_SetRegister+0x20>
80004834:	80 00       	ld.sh	r0,r0[0x0]
80004836:	4a b0       	lddpc	r0,800048e0 <et024006_SetLimits+0x3a>

80004838 <et024006_SetRegister>:
#endif

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
80004838:	eb cd 40 80 	pushm	r7,lr
8000483c:	1a 97       	mov	r7,sp
8000483e:	20 3d       	sub	sp,12
80004840:	18 99       	mov	r9,r12
80004842:	16 98       	mov	r8,r11
80004844:	ef 69 ff f8 	st.b	r7[-8],r9
80004848:	ef 68 ff f4 	st.b	r7[-12],r8
  uint8_t value = et024006_ReadRegister( address );
8000484c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004850:	ef 68 ff fd 	st.b	r7[-3],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ uint8_t et024006_ReadRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004854:	fc 19 c0 00 	movh	r9,0xc000
80004858:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000485c:	b2 08       	st.h	r9[0x0],r8
  return *ET024006_PARAM_ADDR;
8000485e:	fc 18 c0 20 	movh	r8,0xc020
80004862:	90 08       	ld.sh	r8,r8[0x0]
80004864:	5c 88       	casts.h	r8
80004866:	5c 58       	castu.b	r8

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
80004868:	ef 68 ff fc 	st.b	r7[-4],r8
  value |= bitmask;
8000486c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004870:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004874:	f3 e8 10 08 	or	r8,r9,r8
80004878:	ef 68 ff fc 	st.b	r7[-4],r8
  et024006_WriteRegister( address, value );
8000487c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004880:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80004884:	ef 69 ff ff 	st.b	r7[-1],r9
80004888:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000488c:	fc 19 c0 00 	movh	r9,0xc000
80004890:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004894:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004896:	fc 19 c0 20 	movh	r9,0xc020
8000489a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000489e:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
  value |= bitmask;
  et024006_WriteRegister( address, value );
}
800048a0:	2f dd       	sub	sp,-12
800048a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800048a6 <et024006_SetLimits>:
/*! \brief Sets the display limits according to the corner coordinates.
 *  Writing to the display will result in writing to the area specified through
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
800048a6:	eb cd 40 80 	pushm	r7,lr
800048aa:	1a 97       	mov	r7,sp
800048ac:	20 8d       	sub	sp,32
800048ae:	12 98       	mov	r8,r9
800048b0:	18 99       	mov	r9,r12
800048b2:	ef 59 ff ec 	st.h	r7[-20],r9
800048b6:	16 99       	mov	r9,r11
800048b8:	ef 59 ff e8 	st.h	r7[-24],r9
800048bc:	14 99       	mov	r9,r10
800048be:	ef 59 ff e4 	st.h	r7[-28],r9
800048c2:	ef 58 ff e0 	st.h	r7[-32],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
800048c6:	ef 18 ff ec 	ld.uh	r8,r7[-20]
800048ca:	a9 88       	lsr	r8,0x8
800048cc:	5c 88       	casts.h	r8
800048ce:	5c 58       	castu.b	r8
800048d0:	30 29       	mov	r9,2
800048d2:	ef 69 ff f1 	st.b	r7[-15],r9
800048d6:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800048da:	fc 19 c0 00 	movh	r9,0xc000
800048de:	ef 38 ff f1 	ld.ub	r8,r7[-15]
800048e2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800048e4:	fc 19 c0 20 	movh	r9,0xc020
800048e8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800048ec:	b2 08       	st.h	r9[0x0],r8
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
800048ee:	ef 08 ff ec 	ld.sh	r8,r7[-20]
800048f2:	5c 58       	castu.b	r8
800048f4:	30 39       	mov	r9,3
800048f6:	ef 69 ff f3 	st.b	r7[-13],r9
800048fa:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800048fe:	fc 19 c0 00 	movh	r9,0xc000
80004902:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80004906:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004908:	fc 19 c0 20 	movh	r9,0xc020
8000490c:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80004910:	b2 08       	st.h	r9[0x0],r8
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
80004912:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80004916:	a9 88       	lsr	r8,0x8
80004918:	5c 88       	casts.h	r8
8000491a:	5c 58       	castu.b	r8
8000491c:	30 49       	mov	r9,4
8000491e:	ef 69 ff f5 	st.b	r7[-11],r9
80004922:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004926:	fc 19 c0 00 	movh	r9,0xc000
8000492a:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000492e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004930:	fc 19 c0 20 	movh	r9,0xc020
80004934:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004938:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
8000493a:	ef 08 ff e4 	ld.sh	r8,r7[-28]
8000493e:	5c 58       	castu.b	r8
80004940:	30 59       	mov	r9,5
80004942:	ef 69 ff f7 	st.b	r7[-9],r9
80004946:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000494a:	fc 19 c0 00 	movh	r9,0xc000
8000494e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004952:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004954:	fc 19 c0 20 	movh	r9,0xc020
80004958:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000495c:	b2 08       	st.h	r9[0x0],r8
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
8000495e:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80004962:	a9 88       	lsr	r8,0x8
80004964:	5c 88       	casts.h	r8
80004966:	5c 58       	castu.b	r8
80004968:	30 69       	mov	r9,6
8000496a:	ef 69 ff f9 	st.b	r7[-7],r9
8000496e:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004972:	fc 19 c0 00 	movh	r9,0xc000
80004976:	ef 38 ff f9 	ld.ub	r8,r7[-7]
8000497a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000497c:	fc 19 c0 20 	movh	r9,0xc020
80004980:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004984:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
80004986:	ef 08 ff e8 	ld.sh	r8,r7[-24]
8000498a:	5c 58       	castu.b	r8
8000498c:	30 79       	mov	r9,7
8000498e:	ef 69 ff fb 	st.b	r7[-5],r9
80004992:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004996:	fc 19 c0 00 	movh	r9,0xc000
8000499a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000499e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800049a0:	fc 19 c0 20 	movh	r9,0xc020
800049a4:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800049a8:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
800049aa:	ef 18 ff e0 	ld.uh	r8,r7[-32]
800049ae:	a9 88       	lsr	r8,0x8
800049b0:	5c 88       	casts.h	r8
800049b2:	5c 58       	castu.b	r8
800049b4:	30 89       	mov	r9,8
800049b6:	ef 69 ff fd 	st.b	r7[-3],r9
800049ba:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800049be:	fc 19 c0 00 	movh	r9,0xc000
800049c2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800049c6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800049c8:	fc 19 c0 20 	movh	r9,0xc020
800049cc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800049d0:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
800049d2:	ef 08 ff e0 	ld.sh	r8,r7[-32]
800049d6:	5c 58       	castu.b	r8
800049d8:	30 99       	mov	r9,9
800049da:	ef 69 ff ff 	st.b	r7[-1],r9
800049de:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800049e2:	fc 19 c0 00 	movh	r9,0xc000
800049e6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800049ea:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800049ec:	fc 19 c0 20 	movh	r9,0xc020
800049f0:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800049f4:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
}
800049f6:	2f 8d       	sub	sp,-32
800049f8:	e3 cd 80 80 	ldm	sp++,r7,pc

800049fc <et024006_SetQuickLimits>:

/*! \brief Set the starting point of the next read/write from/to RAM.
 *  This sets only the start point of the RAM window.
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
800049fc:	eb cd 40 80 	pushm	r7,lr
80004a00:	1a 97       	mov	r7,sp
80004a02:	20 4d       	sub	sp,16
80004a04:	18 99       	mov	r9,r12
80004a06:	16 98       	mov	r8,r11
80004a08:	ef 59 ff f4 	st.h	r7[-12],r9
80004a0c:	ef 58 ff f0 	st.h	r7[-16],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
80004a10:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80004a14:	a9 88       	lsr	r8,0x8
80004a16:	5c 88       	casts.h	r8
80004a18:	5c 58       	castu.b	r8
80004a1a:	30 29       	mov	r9,2
80004a1c:	ef 69 ff f9 	st.b	r7[-7],r9
80004a20:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a24:	fc 19 c0 00 	movh	r9,0xc000
80004a28:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004a2c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004a2e:	fc 19 c0 20 	movh	r9,0xc020
80004a32:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004a36:	b2 08       	st.h	r9[0x0],r8
 *  This sets only the start point of the RAM window.
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
80004a38:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80004a3c:	5c 58       	castu.b	r8
80004a3e:	30 39       	mov	r9,3
80004a40:	ef 69 ff fb 	st.b	r7[-5],r9
80004a44:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a48:	fc 19 c0 00 	movh	r9,0xc000
80004a4c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004a50:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004a52:	fc 19 c0 20 	movh	r9,0xc020
80004a56:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004a5a:	b2 08       	st.h	r9[0x0],r8
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
80004a5c:	ef 18 ff f0 	ld.uh	r8,r7[-16]
80004a60:	a9 88       	lsr	r8,0x8
80004a62:	5c 88       	casts.h	r8
80004a64:	5c 58       	castu.b	r8
80004a66:	30 69       	mov	r9,6
80004a68:	ef 69 ff fd 	st.b	r7[-3],r9
80004a6c:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a70:	fc 19 c0 00 	movh	r9,0xc000
80004a74:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004a78:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004a7a:	fc 19 c0 20 	movh	r9,0xc020
80004a7e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004a82:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y & 0xff) );
80004a84:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004a88:	5c 58       	castu.b	r8
80004a8a:	30 79       	mov	r9,7
80004a8c:	ef 69 ff ff 	st.b	r7[-1],r9
80004a90:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a94:	fc 19 c0 00 	movh	r9,0xc000
80004a98:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004a9c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004a9e:	fc 19 c0 20 	movh	r9,0xc020
80004aa2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004aa6:	b2 08       	st.h	r9[0x0],r8
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y & 0xff) );
}
80004aa8:	2f cd       	sub	sp,-16
80004aaa:	e3 cd 80 80 	ldm	sp++,r7,pc
80004aae:	d7 03       	nop

80004ab0 <et024006_DrawQuickPixel>:


static void et024006_DrawQuickPixel( uint16_t x, uint16_t y, et024006_color_t color )
{
80004ab0:	eb cd 40 80 	pushm	r7,lr
80004ab4:	1a 97       	mov	r7,sp
80004ab6:	20 4d       	sub	sp,16
80004ab8:	16 99       	mov	r9,r11
80004aba:	14 98       	mov	r8,r10
80004abc:	18 9a       	mov	r10,r12
80004abe:	ef 5a ff f8 	st.h	r7[-8],r10
80004ac2:	ef 59 ff f4 	st.h	r7[-12],r9
80004ac6:	ef 58 ff f0 	st.h	r7[-16],r8
  // Sanity check on parameters.
  Assert( x < ET024006_WIDTH );
  Assert( y < ET024006_HEIGHT );

  // Set up draw area and write the two bytes of pixel data.
  et024006_SetQuickLimits( x, y );
80004aca:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80004ace:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80004ad2:	12 9b       	mov	r11,r9
80004ad4:	10 9c       	mov	r12,r8
80004ad6:	f0 1f 00 0a 	mcall	80004afc <et024006_DrawQuickPixel+0x4c>
80004ada:	32 28       	mov	r8,34
80004adc:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004ae0:	fc 19 c0 00 	movh	r9,0xc000
80004ae4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004ae8:	b2 08       	st.h	r9[0x0],r8
  et024006_SendSPI( color & 0xff );
  et024006_SendSPI( color >> 8 );
  et024006_DeselectSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  *ET024006_PARAM_ADDR = color;
80004aea:	fc 19 c0 20 	movh	r9,0xc020
80004aee:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004af2:	b2 08       	st.h	r9[0x0],r8
#endif

}
80004af4:	2f cd       	sub	sp,-16
80004af6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004afa:	00 00       	add	r0,r0
80004afc:	80 00       	ld.sh	r0,r0[0x0]
80004afe:	49 fc       	lddpc	r12,80004b78 <et024006_DuplicatePixel+0x78>

80004b00 <et024006_DuplicatePixel>:


/* --- Pixel block operations --- */

static void et024006_DuplicatePixel( et024006_color_t color, uint32_t count )
{
80004b00:	eb cd 40 80 	pushm	r7,lr
80004b04:	1a 97       	mov	r7,sp
80004b06:	20 3d       	sub	sp,12
80004b08:	18 98       	mov	r8,r12
80004b0a:	ef 4b ff f4 	st.w	r7[-12],r11
80004b0e:	ef 58 ff f8 	st.h	r7[-8],r8
80004b12:	32 28       	mov	r8,34
80004b14:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004b18:	fc 19 c0 00 	movh	r9,0xc000
80004b1c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004b20:	b2 08       	st.h	r9[0x0],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80004b22:	c2 e8       	rjmp	80004b7e <et024006_DuplicatePixel+0x7e>
    *ET024006_PARAM_ADDR = color;
80004b24:	fc 19 c0 20 	movh	r9,0xc020
80004b28:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b2c:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004b2e:	fc 19 c0 20 	movh	r9,0xc020
80004b32:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b36:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004b38:	fc 19 c0 20 	movh	r9,0xc020
80004b3c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b40:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004b42:	fc 19 c0 20 	movh	r9,0xc020
80004b46:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b4a:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004b4c:	fc 19 c0 20 	movh	r9,0xc020
80004b50:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b54:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004b56:	fc 19 c0 20 	movh	r9,0xc020
80004b5a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b5e:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004b60:	fc 19 c0 20 	movh	r9,0xc020
80004b64:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b68:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004b6a:	fc 19 c0 20 	movh	r9,0xc020
80004b6e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b72:	b2 08       	st.h	r9[0x0],r8
    count-=8;
80004b74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b78:	20 88       	sub	r8,8
80004b7a:	ef 48 ff f4 	st.w	r7[-12],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80004b7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b82:	58 78       	cp.w	r8,7
80004b84:	fe 9b ff d0 	brhi	80004b24 <et024006_DuplicatePixel+0x24>
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80004b88:	c0 b8       	rjmp	80004b9e <et024006_DuplicatePixel+0x9e>
    *ET024006_PARAM_ADDR = color;
80004b8a:	fc 19 c0 20 	movh	r9,0xc020
80004b8e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b92:	b2 08       	st.h	r9[0x0],r8
    --count;
80004b94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b98:	20 18       	sub	r8,1
80004b9a:	ef 48 ff f4 	st.w	r7[-12],r8
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80004b9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ba2:	58 08       	cp.w	r8,0
80004ba4:	cf 31       	brne	80004b8a <et024006_DuplicatePixel+0x8a>
    }
  }

  et024006_DeselectSPI();
#endif
}
80004ba6:	2f dd       	sub	sp,-12
80004ba8:	e3 cd 80 80 	ldm	sp++,r7,pc

80004bac <et024006_SetupInterface>:
                SPI_MASTER_bm);          // in master mode
}
#endif

static void et024006_SetupInterface( void )
{
80004bac:	eb cd 40 80 	pushm	r7,lr
80004bb0:	1a 97       	mov	r7,sp

  // et024006_TE (tearing sync) signal from display is input
  // without any pull resistors
  gpio_enable_gpio_pin(ET024006DHU_TE_PIN);
80004bb2:	30 0c       	mov	r12,0
80004bb4:	f0 1f 00 06 	mcall	80004bcc <et024006_SetupInterface+0x20>

  // Backlight pin (PWM) for display is output
  gpio_enable_module_pin(ET024006DHU_BL_PIN, ET024006DHU_BL_FUNCTION);
80004bb8:	30 2b       	mov	r11,2
80004bba:	30 9c       	mov	r12,9
80004bbc:	f0 1f 00 05 	mcall	80004bd0 <et024006_SetupInterface+0x24>
  // Turns backlight ON
  /*TODO Add backlight driver */

  // Reset pin for display is output
  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80004bc0:	34 2c       	mov	r12,66
80004bc2:	f0 1f 00 05 	mcall	80004bd4 <et024006_SetupInterface+0x28>
}
80004bc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004bca:	00 00       	add	r0,r0
80004bcc:	80 00       	ld.sh	r0,r0[0x0]
80004bce:	86 e4       	ld.uh	r4,r3[0xc]
80004bd0:	80 00       	ld.sh	r0,r0[0x0]
80004bd2:	85 d4       	st.w	r2[0x34],r4
80004bd4:	80 00       	ld.sh	r0,r0[0x0]
80004bd6:	89 56       	st.w	r4[0x14],r6

80004bd8 <et024006_ResetDisplay>:

/*! \brief Does a hard reset of the display.
 */
static void et024006_ResetDisplay( void )
{
80004bd8:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80004bdc:	1a 97       	mov	r7,sp
80004bde:	21 ad       	sub	sp,104
  // clear reset line
  gpio_clr_gpio_pin(ET024006DHU_RESET_PIN);
80004be0:	34 2c       	mov	r12,66
80004be2:	f0 1f 00 aa 	mcall	80004e88 <et024006_ResetDisplay+0x2b0>
  // 50us delay
  cpu_delay_us( 50, tft_data.cpu_hz );
80004be6:	fe f8 02 a6 	ld.w	r8,pc[678]
80004bea:	70 08       	ld.w	r8,r8[0x0]
80004bec:	33 29       	mov	r9,50
80004bee:	ef 49 ff c4 	st.w	r7[-60],r9
80004bf2:	ef 48 ff c0 	st.w	r7[-64],r8
80004bf6:	ee f8 ff c4 	ld.w	r8,r7[-60]
80004bfa:	ef 48 ff cc 	st.w	r7[-52],r8
80004bfe:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004c02:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80004c06:	ee fc ff cc 	ld.w	r12,r7[-52]
80004c0a:	ef 4c ff a4 	st.w	r7[-92],r12
80004c0e:	30 0b       	mov	r11,0
80004c10:	ef 4b ff a0 	st.w	r7[-96],r11
80004c14:	ee f9 ff c8 	ld.w	r9,r7[-56]
80004c18:	ef 49 ff 9c 	st.w	r7[-100],r9
80004c1c:	30 08       	mov	r8,0
80004c1e:	ef 48 ff 98 	st.w	r7[-104],r8
80004c22:	ee fa ff a0 	ld.w	r10,r7[-96]
80004c26:	ee fc ff 9c 	ld.w	r12,r7[-100]
80004c2a:	b9 3a       	mul	r10,r12
80004c2c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80004c30:	ee fb ff a4 	ld.w	r11,r7[-92]
80004c34:	b7 38       	mul	r8,r11
80004c36:	10 0a       	add	r10,r8
80004c38:	ee fc ff a4 	ld.w	r12,r7[-92]
80004c3c:	ee fb ff 9c 	ld.w	r11,r7[-100]
80004c40:	f8 0b 06 48 	mulu.d	r8,r12,r11
80004c44:	12 0a       	add	r10,r9
80004c46:	14 99       	mov	r9,r10
80004c48:	ee 7a 42 3f 	mov	r10,999999
80004c4c:	30 0b       	mov	r11,0
80004c4e:	f0 0a 00 0a 	add	r10,r8,r10
80004c52:	f2 0b 00 4b 	adc	r11,r9,r11
80004c56:	ee 78 42 40 	mov	r8,1000000
80004c5a:	30 09       	mov	r9,0
80004c5c:	f0 1f 00 8d 	mcall	80004e90 <et024006_ResetDisplay+0x2b8>
80004c60:	14 98       	mov	r8,r10
80004c62:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80004c64:	ef 48 ff d4 	st.w	r7[-44],r8
80004c68:	ee c8 00 58 	sub	r8,r7,88
80004c6c:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004c70:	e1 b8 00 42 	mfsr	r8,0x108
80004c74:	10 99       	mov	r9,r8
80004c76:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004c7a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004c7c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004c80:	70 09       	ld.w	r9,r8[0x0]
80004c82:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004c86:	10 09       	add	r9,r8
80004c88:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004c8c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004c8e:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004c92:	30 08       	mov	r8,0
80004c94:	f3 68 00 08 	st.b	r9[8],r8
80004c98:	ee c8 00 58 	sub	r8,r7,88
80004c9c:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004ca0:	e1 b8 00 42 	mfsr	r8,0x108
80004ca4:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004ca8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004cac:	f1 39 00 08 	ld.ub	r9,r8[8]
80004cb0:	30 28       	mov	r8,2
80004cb2:	f0 09 18 00 	cp.b	r9,r8
80004cb6:	c0 31       	brne	80004cbc <et024006_ResetDisplay+0xe4>
    return false;
80004cb8:	30 08       	mov	r8,0
80004cba:	c4 38       	rjmp	80004d40 <et024006_ResetDisplay+0x168>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004cbc:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004cc0:	f1 39 00 08 	ld.ub	r9,r8[8]
80004cc4:	30 18       	mov	r8,1
80004cc6:	f0 09 18 00 	cp.b	r9,r8
80004cca:	c0 31       	brne	80004cd0 <et024006_ResetDisplay+0xf8>
    return true;
80004ccc:	30 18       	mov	r8,1
80004cce:	c3 98       	rjmp	80004d40 <et024006_ResetDisplay+0x168>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004cd0:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004cd4:	70 09       	ld.w	r9,r8[0x0]
80004cd6:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004cda:	70 18       	ld.w	r8,r8[0x4]
80004cdc:	10 39       	cp.w	r9,r8
80004cde:	e0 88 00 1a 	brls	80004d12 <et024006_ResetDisplay+0x13a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004ce2:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004ce6:	70 08       	ld.w	r8,r8[0x0]
80004ce8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004cec:	10 39       	cp.w	r9,r8
80004cee:	c1 02       	brcc	80004d0e <et024006_ResetDisplay+0x136>
80004cf0:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004cf4:	70 18       	ld.w	r8,r8[0x4]
80004cf6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004cfa:	10 39       	cp.w	r9,r8
80004cfc:	e0 88 00 09 	brls	80004d0e <et024006_ResetDisplay+0x136>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004d00:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004d04:	30 18       	mov	r8,1
80004d06:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004d0a:	30 18       	mov	r8,1
80004d0c:	c1 a8       	rjmp	80004d40 <et024006_ResetDisplay+0x168>
    }
    return false;
80004d0e:	30 08       	mov	r8,0
80004d10:	c1 88       	rjmp	80004d40 <et024006_ResetDisplay+0x168>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004d12:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d16:	70 08       	ld.w	r8,r8[0x0]
80004d18:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004d1c:	10 39       	cp.w	r9,r8
80004d1e:	c0 93       	brcs	80004d30 <et024006_ResetDisplay+0x158>
80004d20:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d24:	70 18       	ld.w	r8,r8[0x4]
80004d26:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004d2a:	10 39       	cp.w	r9,r8
80004d2c:	e0 88 00 09 	brls	80004d3e <et024006_ResetDisplay+0x166>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004d30:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004d34:	30 18       	mov	r8,1
80004d36:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004d3a:	30 18       	mov	r8,1
80004d3c:	c0 28       	rjmp	80004d40 <et024006_ResetDisplay+0x168>
    }
    return false;
80004d3e:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004d40:	58 08       	cp.w	r8,0
80004d42:	ca b0       	breq	80004c98 <et024006_ResetDisplay+0xc0>

  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80004d44:	34 2c       	mov	r12,66
80004d46:	f0 1f 00 54 	mcall	80004e94 <et024006_ResetDisplay+0x2bc>
  // 5ms delay
  cpu_delay_ms( 5, tft_data.cpu_hz );
80004d4a:	4d 18       	lddpc	r8,80004e8c <et024006_ResetDisplay+0x2b4>
80004d4c:	70 08       	ld.w	r8,r8[0x0]
80004d4e:	30 59       	mov	r9,5
80004d50:	ef 49 ff e4 	st.w	r7[-28],r9
80004d54:	ef 48 ff e0 	st.w	r7[-32],r8
80004d58:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004d5c:	ef 48 ff ec 	st.w	r7[-20],r8
80004d60:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004d64:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004d68:	ee f0 ff ec 	ld.w	r0,r7[-20]
80004d6c:	30 01       	mov	r1,0
80004d6e:	ee f2 ff e8 	ld.w	r2,r7[-24]
80004d72:	30 03       	mov	r3,0
80004d74:	e2 02 02 4a 	mul	r10,r1,r2
80004d78:	e6 00 02 48 	mul	r8,r3,r0
80004d7c:	10 0a       	add	r10,r8
80004d7e:	e0 02 06 48 	mulu.d	r8,r0,r2
80004d82:	12 0a       	add	r10,r9
80004d84:	14 99       	mov	r9,r10
80004d86:	e0 6a 03 e7 	mov	r10,999
80004d8a:	30 0b       	mov	r11,0
80004d8c:	f0 0a 00 0a 	add	r10,r8,r10
80004d90:	f2 0b 00 4b 	adc	r11,r9,r11
80004d94:	e0 68 03 e8 	mov	r8,1000
80004d98:	30 09       	mov	r9,0
80004d9a:	f0 1f 00 3e 	mcall	80004e90 <et024006_ResetDisplay+0x2b8>
80004d9e:	14 98       	mov	r8,r10
80004da0:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004da2:	ef 48 ff f4 	st.w	r7[-12],r8
80004da6:	ee c8 00 4c 	sub	r8,r7,76
80004daa:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004dae:	e1 b8 00 42 	mfsr	r8,0x108
80004db2:	10 99       	mov	r9,r8
80004db4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004db8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004dba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004dbe:	70 09       	ld.w	r9,r8[0x0]
80004dc0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004dc4:	10 09       	add	r9,r8
80004dc6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004dca:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004dcc:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004dd0:	30 08       	mov	r8,0
80004dd2:	f3 68 00 08 	st.b	r9[8],r8
80004dd6:	ee c8 00 4c 	sub	r8,r7,76
80004dda:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004dde:	e1 b8 00 42 	mfsr	r8,0x108
80004de2:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004de6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004dea:	f1 39 00 08 	ld.ub	r9,r8[8]
80004dee:	30 28       	mov	r8,2
80004df0:	f0 09 18 00 	cp.b	r9,r8
80004df4:	c0 31       	brne	80004dfa <et024006_ResetDisplay+0x222>
    return false;
80004df6:	30 08       	mov	r8,0
80004df8:	c4 38       	rjmp	80004e7e <et024006_ResetDisplay+0x2a6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004dfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004dfe:	f1 39 00 08 	ld.ub	r9,r8[8]
80004e02:	30 18       	mov	r8,1
80004e04:	f0 09 18 00 	cp.b	r9,r8
80004e08:	c0 31       	brne	80004e0e <et024006_ResetDisplay+0x236>
    return true;
80004e0a:	30 18       	mov	r8,1
80004e0c:	c3 98       	rjmp	80004e7e <et024006_ResetDisplay+0x2a6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004e0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e12:	70 09       	ld.w	r9,r8[0x0]
80004e14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e18:	70 18       	ld.w	r8,r8[0x4]
80004e1a:	10 39       	cp.w	r9,r8
80004e1c:	e0 88 00 1a 	brls	80004e50 <et024006_ResetDisplay+0x278>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004e20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e24:	70 08       	ld.w	r8,r8[0x0]
80004e26:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004e2a:	10 39       	cp.w	r9,r8
80004e2c:	c1 02       	brcc	80004e4c <et024006_ResetDisplay+0x274>
80004e2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e32:	70 18       	ld.w	r8,r8[0x4]
80004e34:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004e38:	10 39       	cp.w	r9,r8
80004e3a:	e0 88 00 09 	brls	80004e4c <et024006_ResetDisplay+0x274>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004e3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004e42:	30 18       	mov	r8,1
80004e44:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004e48:	30 18       	mov	r8,1
80004e4a:	c1 a8       	rjmp	80004e7e <et024006_ResetDisplay+0x2a6>
    }
    return false;
80004e4c:	30 08       	mov	r8,0
80004e4e:	c1 88       	rjmp	80004e7e <et024006_ResetDisplay+0x2a6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004e50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e54:	70 08       	ld.w	r8,r8[0x0]
80004e56:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004e5a:	10 39       	cp.w	r9,r8
80004e5c:	c0 93       	brcs	80004e6e <et024006_ResetDisplay+0x296>
80004e5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e62:	70 18       	ld.w	r8,r8[0x4]
80004e64:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004e68:	10 39       	cp.w	r9,r8
80004e6a:	e0 88 00 09 	brls	80004e7c <et024006_ResetDisplay+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004e6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004e72:	30 18       	mov	r8,1
80004e74:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004e78:	30 18       	mov	r8,1
80004e7a:	c0 28       	rjmp	80004e7e <et024006_ResetDisplay+0x2a6>
    }
    return false;
80004e7c:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004e7e:	58 08       	cp.w	r8,0
80004e80:	ca b0       	breq	80004dd6 <et024006_ResetDisplay+0x1fe>
}
80004e82:	2e 6d       	sub	sp,-104
80004e84:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80004e88:	80 00       	ld.sh	r0,r0[0x0]
80004e8a:	89 be       	st.w	r4[0x2c],lr
80004e8c:	00 00       	add	r0,r0
80004e8e:	06 84       	andn	r4,r3
80004e90:	80 00       	ld.sh	r0,r0[0x0]
80004e92:	e0 b8       	*unknown*
80004e94:	80 00       	ld.sh	r0,r0[0x0]
80004e96:	89 56       	st.w	r4[0x14],r6

80004e98 <et024006_AdjustGamma>:
/*! \brief Display gamma setup.
 *
 * Parameters are provided by EDT for the display.
 */
static void et024006_AdjustGamma( void )
{
80004e98:	eb cd 40 80 	pushm	r7,lr
80004e9c:	1a 97       	mov	r7,sp
80004e9e:	20 6d       	sub	sp,24
80004ea0:	34 68       	mov	r8,70
80004ea2:	ef 68 ff e9 	st.b	r7[-23],r8
80004ea6:	39 48       	mov	r8,-108
80004ea8:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004eac:	fc 19 c0 00 	movh	r9,0xc000
80004eb0:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80004eb4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004eb6:	fc 19 c0 20 	movh	r9,0xc020
80004eba:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80004ebe:	b2 08       	st.h	r9[0x0],r8
80004ec0:	34 78       	mov	r8,71
80004ec2:	ef 68 ff eb 	st.b	r7[-21],r8
80004ec6:	34 18       	mov	r8,65
80004ec8:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004ecc:	fc 19 c0 00 	movh	r9,0xc000
80004ed0:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80004ed4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004ed6:	fc 19 c0 20 	movh	r9,0xc020
80004eda:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80004ede:	b2 08       	st.h	r9[0x0],r8
80004ee0:	34 88       	mov	r8,72
80004ee2:	ef 68 ff ed 	st.b	r7[-19],r8
80004ee6:	30 08       	mov	r8,0
80004ee8:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004eec:	fc 19 c0 00 	movh	r9,0xc000
80004ef0:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004ef4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004ef6:	fc 19 c0 20 	movh	r9,0xc020
80004efa:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80004efe:	b2 08       	st.h	r9[0x0],r8
80004f00:	34 98       	mov	r8,73
80004f02:	ef 68 ff ef 	st.b	r7[-17],r8
80004f06:	33 38       	mov	r8,51
80004f08:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f0c:	fc 19 c0 00 	movh	r9,0xc000
80004f10:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80004f14:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004f16:	fc 19 c0 20 	movh	r9,0xc020
80004f1a:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004f1e:	b2 08       	st.h	r9[0x0],r8
80004f20:	34 a8       	mov	r8,74
80004f22:	ef 68 ff f1 	st.b	r7[-15],r8
80004f26:	32 58       	mov	r8,37
80004f28:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f2c:	fc 19 c0 00 	movh	r9,0xc000
80004f30:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80004f34:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004f36:	fc 19 c0 20 	movh	r9,0xc020
80004f3a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80004f3e:	b2 08       	st.h	r9[0x0],r8
80004f40:	34 b8       	mov	r8,75
80004f42:	ef 68 ff f3 	st.b	r7[-13],r8
80004f46:	34 58       	mov	r8,69
80004f48:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f4c:	fc 19 c0 00 	movh	r9,0xc000
80004f50:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80004f54:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004f56:	fc 19 c0 20 	movh	r9,0xc020
80004f5a:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80004f5e:	b2 08       	st.h	r9[0x0],r8
80004f60:	34 c8       	mov	r8,76
80004f62:	ef 68 ff f5 	st.b	r7[-11],r8
80004f66:	34 48       	mov	r8,68
80004f68:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f6c:	fc 19 c0 00 	movh	r9,0xc000
80004f70:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004f74:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004f76:	fc 19 c0 20 	movh	r9,0xc020
80004f7a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004f7e:	b2 08       	st.h	r9[0x0],r8
80004f80:	34 d8       	mov	r8,77
80004f82:	ef 68 ff f7 	st.b	r7[-9],r8
80004f86:	37 78       	mov	r8,119
80004f88:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f8c:	fc 19 c0 00 	movh	r9,0xc000
80004f90:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004f94:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004f96:	fc 19 c0 20 	movh	r9,0xc020
80004f9a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004f9e:	b2 08       	st.h	r9[0x0],r8
80004fa0:	34 e8       	mov	r8,78
80004fa2:	ef 68 ff f9 	st.b	r7[-7],r8
80004fa6:	31 28       	mov	r8,18
80004fa8:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004fac:	fc 19 c0 00 	movh	r9,0xc000
80004fb0:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004fb4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004fb6:	fc 19 c0 20 	movh	r9,0xc020
80004fba:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004fbe:	b2 08       	st.h	r9[0x0],r8
80004fc0:	34 f8       	mov	r8,79
80004fc2:	ef 68 ff fb 	st.b	r7[-5],r8
80004fc6:	3c c8       	mov	r8,-52
80004fc8:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004fcc:	fc 19 c0 00 	movh	r9,0xc000
80004fd0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004fd4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004fd6:	fc 19 c0 20 	movh	r9,0xc020
80004fda:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004fde:	b2 08       	st.h	r9[0x0],r8
80004fe0:	35 08       	mov	r8,80
80004fe2:	ef 68 ff fd 	st.b	r7[-3],r8
80004fe6:	34 68       	mov	r8,70
80004fe8:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004fec:	fc 19 c0 00 	movh	r9,0xc000
80004ff0:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004ff4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004ff6:	fc 19 c0 20 	movh	r9,0xc020
80004ffa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004ffe:	b2 08       	st.h	r9[0x0],r8
80005000:	35 18       	mov	r8,81
80005002:	ef 68 ff ff 	st.b	r7[-1],r8
80005006:	38 28       	mov	r8,-126
80005008:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000500c:	fc 19 c0 00 	movh	r9,0xc000
80005010:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005014:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005016:	fc 19 c0 20 	movh	r9,0xc020
8000501a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000501e:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_GAMMACTRL8, 0x77 );
  et024006_WriteRegister( HIMAX_GAMMACTRL9, 0x12 );
  et024006_WriteRegister( HIMAX_GAMMACTRL10, 0xCC );
  et024006_WriteRegister( HIMAX_GAMMACTRL11, 0x46 );
  et024006_WriteRegister( HIMAX_GAMMACTRL12, 0x82 );
}
80005020:	2f ad       	sub	sp,-24
80005022:	e3 cd 80 80 	ldm	sp++,r7,pc

80005026 <et024006_GeneralSettings>:
/*! \brief General display settings.
 *
 * This are settings provided by EDT and are optimised for the display.
 */
static void et024006_GeneralSettings(void)
{
80005026:	eb cd 40 80 	pushm	r7,lr
8000502a:	1a 97       	mov	r7,sp
8000502c:	20 8d       	sub	sp,32
8000502e:	30 18       	mov	r8,1
80005030:	ef 68 ff e1 	st.b	r7[-31],r8
80005034:	30 68       	mov	r8,6
80005036:	ef 68 ff e0 	st.b	r7[-32],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000503a:	fc 19 c0 00 	movh	r9,0xc000
8000503e:	ef 38 ff e1 	ld.ub	r8,r7[-31]
80005042:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005044:	fc 19 c0 20 	movh	r9,0xc020
80005048:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000504c:	b2 08       	st.h	r9[0x0],r8
8000504e:	33 a8       	mov	r8,58
80005050:	ef 68 ff e3 	st.b	r7[-29],r8
80005054:	30 18       	mov	r8,1
80005056:	ef 68 ff e2 	st.b	r7[-30],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000505a:	fc 19 c0 00 	movh	r9,0xc000
8000505e:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80005062:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005064:	fc 19 c0 20 	movh	r9,0xc020
80005068:	ef 38 ff e2 	ld.ub	r8,r7[-30]
8000506c:	b2 08       	st.h	r9[0x0],r8
8000506e:	33 b8       	mov	r8,59
80005070:	ef 68 ff e5 	st.b	r7[-27],r8
80005074:	30 18       	mov	r8,1
80005076:	ef 68 ff e4 	st.b	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000507a:	fc 19 c0 00 	movh	r9,0xc000
8000507e:	ef 38 ff e5 	ld.ub	r8,r7[-27]
80005082:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005084:	fc 19 c0 20 	movh	r9,0xc020
80005088:	ef 38 ff e4 	ld.ub	r8,r7[-28]
8000508c:	b2 08       	st.h	r9[0x0],r8
8000508e:	33 c8       	mov	r8,60
80005090:	ef 68 ff e7 	st.b	r7[-25],r8
80005094:	3f 08       	mov	r8,-16
80005096:	ef 68 ff e6 	st.b	r7[-26],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000509a:	fc 19 c0 00 	movh	r9,0xc000
8000509e:	ef 38 ff e7 	ld.ub	r8,r7[-25]
800050a2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800050a4:	fc 19 c0 20 	movh	r9,0xc020
800050a8:	ef 38 ff e6 	ld.ub	r8,r7[-26]
800050ac:	b2 08       	st.h	r9[0x0],r8
800050ae:	33 d8       	mov	r8,61
800050b0:	ef 68 ff e9 	st.b	r7[-23],r8
800050b4:	30 08       	mov	r8,0
800050b6:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800050ba:	fc 19 c0 00 	movh	r9,0xc000
800050be:	ef 38 ff e9 	ld.ub	r8,r7[-23]
800050c2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800050c4:	fc 19 c0 20 	movh	r9,0xc020
800050c8:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800050cc:	b2 08       	st.h	r9[0x0],r8
800050ce:	33 e8       	mov	r8,62
800050d0:	ef 68 ff eb 	st.b	r7[-21],r8
800050d4:	33 88       	mov	r8,56
800050d6:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800050da:	fc 19 c0 00 	movh	r9,0xc000
800050de:	ef 38 ff eb 	ld.ub	r8,r7[-21]
800050e2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800050e4:	fc 19 c0 20 	movh	r9,0xc020
800050e8:	ef 38 ff ea 	ld.ub	r8,r7[-22]
800050ec:	b2 08       	st.h	r9[0x0],r8
800050ee:	34 08       	mov	r8,64
800050f0:	ef 68 ff ed 	st.b	r7[-19],r8
800050f4:	30 f8       	mov	r8,15
800050f6:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800050fa:	fc 19 c0 00 	movh	r9,0xc000
800050fe:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005102:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005104:	fc 19 c0 20 	movh	r9,0xc020
80005108:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000510c:	b2 08       	st.h	r9[0x0],r8
8000510e:	34 18       	mov	r8,65
80005110:	ef 68 ff ef 	st.b	r7[-17],r8
80005114:	3f 08       	mov	r8,-16
80005116:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000511a:	fc 19 c0 00 	movh	r9,0xc000
8000511e:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80005122:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005124:	fc 19 c0 20 	movh	r9,0xc020
80005128:	ef 38 ff ee 	ld.ub	r8,r7[-18]
8000512c:	b2 08       	st.h	r9[0x0],r8
8000512e:	32 78       	mov	r8,39
80005130:	ef 68 ff f1 	st.b	r7[-15],r8
80005134:	30 28       	mov	r8,2
80005136:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000513a:	fc 19 c0 00 	movh	r9,0xc000
8000513e:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80005142:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005144:	fc 19 c0 20 	movh	r9,0xc020
80005148:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000514c:	b2 08       	st.h	r9[0x0],r8
8000514e:	32 88       	mov	r8,40
80005150:	ef 68 ff f3 	st.b	r7[-13],r8
80005154:	30 28       	mov	r8,2
80005156:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000515a:	fc 19 c0 00 	movh	r9,0xc000
8000515e:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80005162:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005164:	fc 19 c0 20 	movh	r9,0xc020
80005168:	ef 38 ff f2 	ld.ub	r8,r7[-14]
8000516c:	b2 08       	st.h	r9[0x0],r8
8000516e:	32 98       	mov	r8,41
80005170:	ef 68 ff f5 	st.b	r7[-11],r8
80005174:	30 28       	mov	r8,2
80005176:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000517a:	fc 19 c0 00 	movh	r9,0xc000
8000517e:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005182:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005184:	fc 19 c0 20 	movh	r9,0xc020
80005188:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000518c:	b2 08       	st.h	r9[0x0],r8
8000518e:	32 a8       	mov	r8,42
80005190:	ef 68 ff f7 	st.b	r7[-9],r8
80005194:	30 28       	mov	r8,2
80005196:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000519a:	fc 19 c0 00 	movh	r9,0xc000
8000519e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800051a2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051a4:	fc 19 c0 20 	movh	r9,0xc020
800051a8:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800051ac:	b2 08       	st.h	r9[0x0],r8
800051ae:	32 c8       	mov	r8,44
800051b0:	ef 68 ff f9 	st.b	r7[-7],r8
800051b4:	30 28       	mov	r8,2
800051b6:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051ba:	fc 19 c0 00 	movh	r9,0xc000
800051be:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800051c2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051c4:	fc 19 c0 20 	movh	r9,0xc020
800051c8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800051cc:	b2 08       	st.h	r9[0x0],r8
800051ce:	32 d8       	mov	r8,45
800051d0:	ef 68 ff fb 	st.b	r7[-5],r8
800051d4:	30 28       	mov	r8,2
800051d6:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051da:	fc 19 c0 00 	movh	r9,0xc000
800051de:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800051e2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051e4:	fc 19 c0 20 	movh	r9,0xc020
800051e8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800051ec:	b2 08       	st.h	r9[0x0],r8
800051ee:	31 98       	mov	r8,25
800051f0:	ef 68 ff fd 	st.b	r7[-3],r8
800051f4:	34 98       	mov	r8,73
800051f6:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051fa:	fc 19 c0 00 	movh	r9,0xc000
800051fe:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005202:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005204:	fc 19 c0 20 	movh	r9,0xc020
80005208:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000520c:	b2 08       	st.h	r9[0x0],r8
8000520e:	39 38       	mov	r8,-109
80005210:	ef 68 ff ff 	st.b	r7[-1],r8
80005214:	30 88       	mov	r8,8
80005216:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000521a:	fc 19 c0 00 	movh	r9,0xc000
8000521e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005222:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005224:	fc 19 c0 20 	movh	r9,0xc020
80005228:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000522c:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL6, 0x02 );
  et024006_WriteRegister( HIMAX_DISPCTRL7, 0x02 );

  et024006_WriteRegister( HIMAX_OSCCTRL1, 0x49 );
  et024006_WriteRegister( HIMAX_OSCCTRL3, 0x08 );
}
8000522e:	2f 8d       	sub	sp,-32
80005230:	e3 cd 80 80 	ldm	sp++,r7,pc

80005234 <et024006_PowerSettings>:
/*! \brief Power setup.
 *
 * Sets basic DC/DC and VCOM parameters.
 */
static void et024006_PowerSettings(void)
{
80005234:	eb cd 40 80 	pushm	r7,lr
80005238:	1a 97       	mov	r7,sp
8000523a:	20 6d       	sub	sp,24
8000523c:	32 38       	mov	r8,35
8000523e:	ef 68 ff e9 	st.b	r7[-23],r8
80005242:	39 58       	mov	r8,-107
80005244:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005248:	fc 19 c0 00 	movh	r9,0xc000
8000524c:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80005250:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005252:	fc 19 c0 20 	movh	r9,0xc020
80005256:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000525a:	b2 08       	st.h	r9[0x0],r8
8000525c:	32 48       	mov	r8,36
8000525e:	ef 68 ff eb 	st.b	r7[-21],r8
80005262:	39 58       	mov	r8,-107
80005264:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005268:	fc 19 c0 00 	movh	r9,0xc000
8000526c:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80005270:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005272:	fc 19 c0 20 	movh	r9,0xc020
80005276:	ef 38 ff ea 	ld.ub	r8,r7[-22]
8000527a:	b2 08       	st.h	r9[0x0],r8
8000527c:	32 58       	mov	r8,37
8000527e:	ef 68 ff ed 	st.b	r7[-19],r8
80005282:	3f f8       	mov	r8,-1
80005284:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005288:	fc 19 c0 00 	movh	r9,0xc000
8000528c:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005290:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005292:	fc 19 c0 20 	movh	r9,0xc020
80005296:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000529a:	b2 08       	st.h	r9[0x0],r8
8000529c:	39 08       	mov	r8,-112
8000529e:	ef 68 ff ef 	st.b	r7[-17],r8
800052a2:	37 f8       	mov	r8,127
800052a4:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052a8:	fc 19 c0 00 	movh	r9,0xc000
800052ac:	ef 38 ff ef 	ld.ub	r8,r7[-17]
800052b0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052b2:	fc 19 c0 20 	movh	r9,0xc020
800052b6:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800052ba:	b2 08       	st.h	r9[0x0],r8
800052bc:	33 58       	mov	r8,53
800052be:	ef 68 ff f1 	st.b	r7[-15],r8
800052c2:	33 88       	mov	r8,56
800052c4:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052c8:	fc 19 c0 00 	movh	r9,0xc000
800052cc:	ef 38 ff f1 	ld.ub	r8,r7[-15]
800052d0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052d2:	fc 19 c0 20 	movh	r9,0xc020
800052d6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800052da:	b2 08       	st.h	r9[0x0],r8
800052dc:	33 68       	mov	r8,54
800052de:	ef 68 ff f3 	st.b	r7[-13],r8
800052e2:	37 88       	mov	r8,120
800052e4:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052e8:	fc 19 c0 00 	movh	r9,0xc000
800052ec:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800052f0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052f2:	fc 19 c0 20 	movh	r9,0xc020
800052f6:	ef 38 ff f2 	ld.ub	r8,r7[-14]
800052fa:	b2 08       	st.h	r9[0x0],r8
800052fc:	31 d8       	mov	r8,29
800052fe:	ef 68 ff f5 	st.b	r7[-11],r8
80005302:	30 78       	mov	r8,7
80005304:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005308:	fc 19 c0 00 	movh	r9,0xc000
8000530c:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005310:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005312:	fc 19 c0 20 	movh	r9,0xc020
80005316:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000531a:	b2 08       	st.h	r9[0x0],r8
8000531c:	31 e8       	mov	r8,30
8000531e:	ef 68 ff f7 	st.b	r7[-9],r8
80005322:	30 08       	mov	r8,0
80005324:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005328:	fc 19 c0 00 	movh	r9,0xc000
8000532c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005330:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005332:	fc 19 c0 20 	movh	r9,0xc020
80005336:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000533a:	b2 08       	st.h	r9[0x0],r8
8000533c:	31 f8       	mov	r8,31
8000533e:	ef 68 ff f9 	st.b	r7[-7],r8
80005342:	30 48       	mov	r8,4
80005344:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005348:	fc 19 c0 00 	movh	r9,0xc000
8000534c:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80005350:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005352:	fc 19 c0 20 	movh	r9,0xc020
80005356:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000535a:	b2 08       	st.h	r9[0x0],r8
8000535c:	32 08       	mov	r8,32
8000535e:	ef 68 ff fb 	st.b	r7[-5],r8
80005362:	34 08       	mov	r8,64
80005364:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005368:	fc 19 c0 00 	movh	r9,0xc000
8000536c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005370:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005372:	fc 19 c0 20 	movh	r9,0xc020
80005376:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000537a:	b2 08       	st.h	r9[0x0],r8
8000537c:	34 48       	mov	r8,68
8000537e:	ef 68 ff fd 	st.b	r7[-3],r8
80005382:	33 88       	mov	r8,56
80005384:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005388:	fc 19 c0 00 	movh	r9,0xc000
8000538c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005390:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005392:	fc 19 c0 20 	movh	r9,0xc020
80005396:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000539a:	b2 08       	st.h	r9[0x0],r8
8000539c:	34 58       	mov	r8,69
8000539e:	ef 68 ff ff 	st.b	r7[-1],r8
800053a2:	31 28       	mov	r8,18
800053a4:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053a8:	fc 19 c0 00 	movh	r9,0xc000
800053ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800053b0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053b2:	fc 19 c0 20 	movh	r9,0xc020
800053b6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800053ba:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL4, 0x00 );
  et024006_WriteRegister( HIMAX_POWERCTRL5, 0x04 );
  et024006_WriteRegister( HIMAX_POWERCTRL6, 0x40 );
  et024006_WriteRegister( HIMAX_VCOMCTRL2, 0x38 );
  et024006_WriteRegister( HIMAX_VCOMCTRL3, 0x12 );
}
800053bc:	2f ad       	sub	sp,-24
800053be:	e3 cd 80 80 	ldm	sp++,r7,pc

800053c2 <et024006_InterfaceSettings>:
/*! \brief Sets display interface.
 *
 * Configures screen orientation and color mode.
 */
static void et024006_InterfaceSettings(void)
{
800053c2:	eb cd 40 80 	pushm	r7,lr
800053c6:	1a 97       	mov	r7,sp
800053c8:	20 1d       	sub	sp,4
800053ca:	31 68       	mov	r8,22
800053cc:	ef 68 ff ff 	st.b	r7[-1],r8
800053d0:	36 88       	mov	r8,104
800053d2:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053d6:	fc 19 c0 00 	movh	r9,0xc000
800053da:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800053de:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053e0:	fc 19 c0 20 	movh	r9,0xc020
800053e4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800053e8:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_MEMACCESSCTRL,
    (1 << HIMAX_MX)
    | (1 << HIMAX_MV)
    | (1 << HIMAX_BGR) );

}
800053ea:	2f fd       	sub	sp,-4
800053ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800053f0 <et024006_PowerUp>:
/*! \brief Power up display.
 *
 * Turns on DC/DC converters.
 */
static void et024006_PowerUp(void)
{
800053f0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800053f4:	1a 97       	mov	r7,sp
800053f6:	fa cd 01 24 	sub	sp,sp,292
  cpu_delay_ms( 10, tft_data.cpu_hz );
800053fa:	fe f8 07 22 	ld.w	r8,pc[1826]
800053fe:	70 09       	ld.w	r9,r8[0x0]
80005400:	30 a8       	mov	r8,10
80005402:	ef 48 ff 54 	st.w	r7[-172],r8
80005406:	ef 49 ff 50 	st.w	r7[-176],r9
8000540a:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000540e:	ef 48 ff 5c 	st.w	r7[-164],r8
80005412:	ee f8 ff 50 	ld.w	r8,r7[-176]
80005416:	ef 48 ff 58 	st.w	r7[-168],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000541a:	ee f2 ff 5c 	ld.w	r2,r7[-164]
8000541e:	30 03       	mov	r3,0
80005420:	ee fa ff 58 	ld.w	r10,r7[-168]
80005424:	30 0b       	mov	r11,0
80005426:	e6 0a 02 49 	mul	r9,r3,r10
8000542a:	f6 02 02 48 	mul	r8,r11,r2
8000542e:	10 09       	add	r9,r8
80005430:	e4 0a 06 4a 	mulu.d	r10,r2,r10
80005434:	16 09       	add	r9,r11
80005436:	12 9b       	mov	r11,r9
80005438:	e0 68 03 e7 	mov	r8,999
8000543c:	30 09       	mov	r9,0
8000543e:	10 0a       	add	r10,r8
80005440:	f6 09 00 4b 	adc	r11,r11,r9
80005444:	e0 68 03 e8 	mov	r8,1000
80005448:	30 09       	mov	r9,0
8000544a:	f0 1f 01 b6 	mcall	80005b20 <et024006_PowerUp+0x730>
8000544e:	14 98       	mov	r8,r10
80005450:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005452:	ef 48 ff 64 	st.w	r7[-156],r8
80005456:	ee c8 00 ec 	sub	r8,r7,236
8000545a:	ef 48 ff 60 	st.w	r7[-160],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000545e:	e1 b8 00 42 	mfsr	r8,0x108
80005462:	10 99       	mov	r9,r8
80005464:	ee f8 ff 60 	ld.w	r8,r7[-160]
80005468:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000546a:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000546e:	70 09       	ld.w	r9,r8[0x0]
80005470:	ee f8 ff 64 	ld.w	r8,r7[-156]
80005474:	10 09       	add	r9,r8
80005476:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000547a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000547c:	ee f9 ff 60 	ld.w	r9,r7[-160]
80005480:	30 08       	mov	r8,0
80005482:	f3 68 00 08 	st.b	r9[8],r8
80005486:	ee c8 00 ec 	sub	r8,r7,236
8000548a:	ef 48 ff 68 	st.w	r7[-152],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000548e:	e1 b8 00 42 	mfsr	r8,0x108
80005492:	ef 48 ff 6c 	st.w	r7[-148],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005496:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000549a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000549e:	30 28       	mov	r8,2
800054a0:	f0 09 18 00 	cp.b	r9,r8
800054a4:	c0 31       	brne	800054aa <et024006_PowerUp+0xba>
    return false;
800054a6:	30 08       	mov	r8,0
800054a8:	c4 38       	rjmp	8000552e <et024006_PowerUp+0x13e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800054aa:	ee f8 ff 68 	ld.w	r8,r7[-152]
800054ae:	f1 39 00 08 	ld.ub	r9,r8[8]
800054b2:	30 18       	mov	r8,1
800054b4:	f0 09 18 00 	cp.b	r9,r8
800054b8:	c0 31       	brne	800054be <et024006_PowerUp+0xce>
    return true;
800054ba:	30 18       	mov	r8,1
800054bc:	c3 98       	rjmp	8000552e <et024006_PowerUp+0x13e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800054be:	ee f8 ff 68 	ld.w	r8,r7[-152]
800054c2:	70 09       	ld.w	r9,r8[0x0]
800054c4:	ee f8 ff 68 	ld.w	r8,r7[-152]
800054c8:	70 18       	ld.w	r8,r8[0x4]
800054ca:	10 39       	cp.w	r9,r8
800054cc:	e0 88 00 1a 	brls	80005500 <et024006_PowerUp+0x110>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800054d0:	ee f8 ff 68 	ld.w	r8,r7[-152]
800054d4:	70 09       	ld.w	r9,r8[0x0]
800054d6:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800054da:	12 38       	cp.w	r8,r9
800054dc:	c1 02       	brcc	800054fc <et024006_PowerUp+0x10c>
800054de:	ee f8 ff 68 	ld.w	r8,r7[-152]
800054e2:	70 19       	ld.w	r9,r8[0x4]
800054e4:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800054e8:	12 38       	cp.w	r8,r9
800054ea:	e0 88 00 09 	brls	800054fc <et024006_PowerUp+0x10c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800054ee:	ee f9 ff 68 	ld.w	r9,r7[-152]
800054f2:	30 18       	mov	r8,1
800054f4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800054f8:	30 18       	mov	r8,1
800054fa:	c1 a8       	rjmp	8000552e <et024006_PowerUp+0x13e>
    }
    return false;
800054fc:	30 08       	mov	r8,0
800054fe:	c1 88       	rjmp	8000552e <et024006_PowerUp+0x13e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005500:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005504:	70 09       	ld.w	r9,r8[0x0]
80005506:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000550a:	12 38       	cp.w	r8,r9
8000550c:	c0 93       	brcs	8000551e <et024006_PowerUp+0x12e>
8000550e:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005512:	70 19       	ld.w	r9,r8[0x4]
80005514:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80005518:	12 38       	cp.w	r8,r9
8000551a:	e0 88 00 09 	brls	8000552c <et024006_PowerUp+0x13c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000551e:	ee f9 ff 68 	ld.w	r9,r7[-152]
80005522:	30 18       	mov	r8,1
80005524:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005528:	30 18       	mov	r8,1
8000552a:	c0 28       	rjmp	8000552e <et024006_PowerUp+0x13e>
    }
    return false;
8000552c:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000552e:	58 08       	cp.w	r8,0
80005530:	ca b0       	breq	80005486 <et024006_PowerUp+0x96>
80005532:	31 c8       	mov	r8,28
80005534:	ef 68 ff 73 	st.b	r7[-141],r8
80005538:	30 48       	mov	r8,4
8000553a:	ef 68 ff 72 	st.b	r7[-142],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000553e:	fc 19 c0 00 	movh	r9,0xc000
80005542:	ef 38 ff 73 	ld.ub	r8,r7[-141]
80005546:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005548:	fc 19 c0 20 	movh	r9,0xc020
8000554c:	ef 38 ff 72 	ld.ub	r8,r7[-142]
80005550:	b2 08       	st.h	r9[0x0],r8
static void et024006_PowerUp(void)
{
  cpu_delay_ms( 10, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
80005552:	fe f8 05 ca 	ld.w	r8,pc[1482]
80005556:	70 09       	ld.w	r9,r8[0x0]
80005558:	31 48       	mov	r8,20
8000555a:	ef 48 ff 78 	st.w	r7[-136],r8
8000555e:	ef 49 ff 74 	st.w	r7[-140],r9
80005562:	ee f8 ff 78 	ld.w	r8,r7[-136]
80005566:	ef 48 ff 80 	st.w	r7[-128],r8
8000556a:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000556e:	ef 48 ff 7c 	st.w	r7[-132],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005572:	ee fc ff 80 	ld.w	r12,r7[-128]
80005576:	ef 4c fe e0 	st.w	r7[-288],r12
8000557a:	30 0b       	mov	r11,0
8000557c:	ef 4b fe dc 	st.w	r7[-292],r11
80005580:	ee f0 ff 7c 	ld.w	r0,r7[-132]
80005584:	30 01       	mov	r1,0
80005586:	ee f9 fe dc 	ld.w	r9,r7[-292]
8000558a:	a1 39       	mul	r9,r0
8000558c:	ee fa fe e0 	ld.w	r10,r7[-288]
80005590:	e2 0a 02 48 	mul	r8,r1,r10
80005594:	10 09       	add	r9,r8
80005596:	ee f8 fe e0 	ld.w	r8,r7[-288]
8000559a:	f0 00 06 4a 	mulu.d	r10,r8,r0
8000559e:	16 09       	add	r9,r11
800055a0:	12 9b       	mov	r11,r9
800055a2:	e0 68 03 e7 	mov	r8,999
800055a6:	30 09       	mov	r9,0
800055a8:	10 0a       	add	r10,r8
800055aa:	f6 09 00 4b 	adc	r11,r11,r9
800055ae:	e0 68 03 e8 	mov	r8,1000
800055b2:	30 09       	mov	r9,0
800055b4:	f0 1f 01 5b 	mcall	80005b20 <et024006_PowerUp+0x730>
800055b8:	14 98       	mov	r8,r10
800055ba:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800055bc:	ef 48 ff 88 	st.w	r7[-120],r8
800055c0:	ee c8 00 e0 	sub	r8,r7,224
800055c4:	ef 48 ff 84 	st.w	r7[-124],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800055c8:	e1 b8 00 42 	mfsr	r8,0x108
800055cc:	10 99       	mov	r9,r8
800055ce:	ee f8 ff 84 	ld.w	r8,r7[-124]
800055d2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800055d4:	ee f8 ff 84 	ld.w	r8,r7[-124]
800055d8:	70 09       	ld.w	r9,r8[0x0]
800055da:	ee f8 ff 88 	ld.w	r8,r7[-120]
800055de:	10 09       	add	r9,r8
800055e0:	ee f8 ff 84 	ld.w	r8,r7[-124]
800055e4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800055e6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800055ea:	30 08       	mov	r8,0
800055ec:	f3 68 00 08 	st.b	r9[8],r8
800055f0:	ee c8 00 e0 	sub	r8,r7,224
800055f4:	ef 48 ff 8c 	st.w	r7[-116],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800055f8:	e1 b8 00 42 	mfsr	r8,0x108
800055fc:	ef 48 ff 90 	st.w	r7[-112],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005600:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005604:	f1 39 00 08 	ld.ub	r9,r8[8]
80005608:	30 28       	mov	r8,2
8000560a:	f0 09 18 00 	cp.b	r9,r8
8000560e:	c0 31       	brne	80005614 <et024006_PowerUp+0x224>
    return false;
80005610:	30 08       	mov	r8,0
80005612:	c4 38       	rjmp	80005698 <et024006_PowerUp+0x2a8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005614:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005618:	f1 39 00 08 	ld.ub	r9,r8[8]
8000561c:	30 18       	mov	r8,1
8000561e:	f0 09 18 00 	cp.b	r9,r8
80005622:	c0 31       	brne	80005628 <et024006_PowerUp+0x238>
    return true;
80005624:	30 18       	mov	r8,1
80005626:	c3 98       	rjmp	80005698 <et024006_PowerUp+0x2a8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005628:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000562c:	70 09       	ld.w	r9,r8[0x0]
8000562e:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005632:	70 18       	ld.w	r8,r8[0x4]
80005634:	10 39       	cp.w	r9,r8
80005636:	e0 88 00 1a 	brls	8000566a <et024006_PowerUp+0x27a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000563a:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000563e:	70 08       	ld.w	r8,r8[0x0]
80005640:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005644:	10 39       	cp.w	r9,r8
80005646:	c1 02       	brcc	80005666 <et024006_PowerUp+0x276>
80005648:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000564c:	70 18       	ld.w	r8,r8[0x4]
8000564e:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005652:	10 39       	cp.w	r9,r8
80005654:	e0 88 00 09 	brls	80005666 <et024006_PowerUp+0x276>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005658:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000565c:	30 18       	mov	r8,1
8000565e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005662:	30 18       	mov	r8,1
80005664:	c1 a8       	rjmp	80005698 <et024006_PowerUp+0x2a8>
    }
    return false;
80005666:	30 08       	mov	r8,0
80005668:	c1 88       	rjmp	80005698 <et024006_PowerUp+0x2a8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000566a:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000566e:	70 08       	ld.w	r8,r8[0x0]
80005670:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005674:	10 39       	cp.w	r9,r8
80005676:	c0 93       	brcs	80005688 <et024006_PowerUp+0x298>
80005678:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000567c:	70 18       	ld.w	r8,r8[0x4]
8000567e:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005682:	10 39       	cp.w	r9,r8
80005684:	e0 88 00 09 	brls	80005696 <et024006_PowerUp+0x2a6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005688:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000568c:	30 18       	mov	r8,1
8000568e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005692:	30 18       	mov	r8,1
80005694:	c0 28       	rjmp	80005698 <et024006_PowerUp+0x2a8>
    }
    return false;
80005696:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005698:	58 08       	cp.w	r8,0
8000569a:	ca b0       	breq	800055f0 <et024006_PowerUp+0x200>
8000569c:	34 38       	mov	r8,67
8000569e:	ef 68 ff 97 	st.b	r7[-105],r8
800056a2:	38 08       	mov	r8,-128
800056a4:	ef 68 ff 96 	st.b	r7[-106],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800056a8:	fc 19 c0 00 	movh	r9,0xc000
800056ac:	ef 38 ff 97 	ld.ub	r8,r7[-105]
800056b0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800056b2:	fc 19 c0 20 	movh	r9,0xc020
800056b6:	ef 38 ff 96 	ld.ub	r8,r7[-106]
800056ba:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
800056bc:	fe f8 04 60 	ld.w	r8,pc[1120]
800056c0:	70 08       	ld.w	r8,r8[0x0]
800056c2:	30 59       	mov	r9,5
800056c4:	ef 49 ff 9c 	st.w	r7[-100],r9
800056c8:	ef 48 ff 98 	st.w	r7[-104],r8
800056cc:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800056d0:	ef 48 ff a4 	st.w	r7[-92],r8
800056d4:	ee f8 ff 98 	ld.w	r8,r7[-104]
800056d8:	ef 48 ff a0 	st.w	r7[-96],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800056dc:	ee fc ff a4 	ld.w	r12,r7[-92]
800056e0:	ef 4c fe f0 	st.w	r7[-272],r12
800056e4:	30 0b       	mov	r11,0
800056e6:	ef 4b fe ec 	st.w	r7[-276],r11
800056ea:	ee fa ff a0 	ld.w	r10,r7[-96]
800056ee:	ef 4a fe e8 	st.w	r7[-280],r10
800056f2:	30 09       	mov	r9,0
800056f4:	ef 49 fe e4 	st.w	r7[-284],r9
800056f8:	ee fa fe ec 	ld.w	r10,r7[-276]
800056fc:	ee f8 fe e8 	ld.w	r8,r7[-280]
80005700:	b1 3a       	mul	r10,r8
80005702:	ee f8 fe e4 	ld.w	r8,r7[-284]
80005706:	ee fc fe f0 	ld.w	r12,r7[-272]
8000570a:	b9 38       	mul	r8,r12
8000570c:	10 0a       	add	r10,r8
8000570e:	ee fb fe f0 	ld.w	r11,r7[-272]
80005712:	ee fc fe e8 	ld.w	r12,r7[-280]
80005716:	f6 0c 06 48 	mulu.d	r8,r11,r12
8000571a:	12 0a       	add	r10,r9
8000571c:	14 99       	mov	r9,r10
8000571e:	e0 6a 03 e7 	mov	r10,999
80005722:	30 0b       	mov	r11,0
80005724:	f0 0a 00 0a 	add	r10,r8,r10
80005728:	f2 0b 00 4b 	adc	r11,r9,r11
8000572c:	e0 68 03 e8 	mov	r8,1000
80005730:	30 09       	mov	r9,0
80005732:	f0 1f 00 fc 	mcall	80005b20 <et024006_PowerUp+0x730>
80005736:	14 98       	mov	r8,r10
80005738:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000573a:	ef 48 ff ac 	st.w	r7[-84],r8
8000573e:	ee c8 00 d4 	sub	r8,r7,212
80005742:	ef 48 ff a8 	st.w	r7[-88],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005746:	e1 b8 00 42 	mfsr	r8,0x108
8000574a:	10 99       	mov	r9,r8
8000574c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80005750:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005752:	ee f8 ff a8 	ld.w	r8,r7[-88]
80005756:	70 09       	ld.w	r9,r8[0x0]
80005758:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000575c:	10 09       	add	r9,r8
8000575e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80005762:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005764:	ee f9 ff a8 	ld.w	r9,r7[-88]
80005768:	30 08       	mov	r8,0
8000576a:	f3 68 00 08 	st.b	r9[8],r8
8000576e:	ee c8 00 d4 	sub	r8,r7,212
80005772:	ef 48 ff b0 	st.w	r7[-80],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005776:	e1 b8 00 42 	mfsr	r8,0x108
8000577a:	ef 48 ff b4 	st.w	r7[-76],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000577e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005782:	f1 39 00 08 	ld.ub	r9,r8[8]
80005786:	30 28       	mov	r8,2
80005788:	f0 09 18 00 	cp.b	r9,r8
8000578c:	c0 31       	brne	80005792 <et024006_PowerUp+0x3a2>
    return false;
8000578e:	30 08       	mov	r8,0
80005790:	c4 38       	rjmp	80005816 <et024006_PowerUp+0x426>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005792:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005796:	f1 39 00 08 	ld.ub	r9,r8[8]
8000579a:	30 18       	mov	r8,1
8000579c:	f0 09 18 00 	cp.b	r9,r8
800057a0:	c0 31       	brne	800057a6 <et024006_PowerUp+0x3b6>
    return true;
800057a2:	30 18       	mov	r8,1
800057a4:	c3 98       	rjmp	80005816 <et024006_PowerUp+0x426>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800057a6:	ee f8 ff b0 	ld.w	r8,r7[-80]
800057aa:	70 09       	ld.w	r9,r8[0x0]
800057ac:	ee f8 ff b0 	ld.w	r8,r7[-80]
800057b0:	70 18       	ld.w	r8,r8[0x4]
800057b2:	10 39       	cp.w	r9,r8
800057b4:	e0 88 00 1a 	brls	800057e8 <et024006_PowerUp+0x3f8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800057b8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800057bc:	70 08       	ld.w	r8,r8[0x0]
800057be:	ee f9 ff b4 	ld.w	r9,r7[-76]
800057c2:	10 39       	cp.w	r9,r8
800057c4:	c1 02       	brcc	800057e4 <et024006_PowerUp+0x3f4>
800057c6:	ee f8 ff b0 	ld.w	r8,r7[-80]
800057ca:	70 18       	ld.w	r8,r8[0x4]
800057cc:	ee f9 ff b4 	ld.w	r9,r7[-76]
800057d0:	10 39       	cp.w	r9,r8
800057d2:	e0 88 00 09 	brls	800057e4 <et024006_PowerUp+0x3f4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800057d6:	ee f9 ff b0 	ld.w	r9,r7[-80]
800057da:	30 18       	mov	r8,1
800057dc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800057e0:	30 18       	mov	r8,1
800057e2:	c1 a8       	rjmp	80005816 <et024006_PowerUp+0x426>
    }
    return false;
800057e4:	30 08       	mov	r8,0
800057e6:	c1 88       	rjmp	80005816 <et024006_PowerUp+0x426>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800057e8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800057ec:	70 08       	ld.w	r8,r8[0x0]
800057ee:	ee f9 ff b4 	ld.w	r9,r7[-76]
800057f2:	10 39       	cp.w	r9,r8
800057f4:	c0 93       	brcs	80005806 <et024006_PowerUp+0x416>
800057f6:	ee f8 ff b0 	ld.w	r8,r7[-80]
800057fa:	70 18       	ld.w	r8,r8[0x4]
800057fc:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005800:	10 39       	cp.w	r9,r8
80005802:	e0 88 00 09 	brls	80005814 <et024006_PowerUp+0x424>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005806:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000580a:	30 18       	mov	r8,1
8000580c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005810:	30 18       	mov	r8,1
80005812:	c0 28       	rjmp	80005816 <et024006_PowerUp+0x426>
    }
    return false;
80005814:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005816:	58 08       	cp.w	r8,0
80005818:	ca b0       	breq	8000576e <et024006_PowerUp+0x37e>
8000581a:	31 b8       	mov	r8,27
8000581c:	ef 68 ff bb 	st.b	r7[-69],r8
80005820:	30 88       	mov	r8,8
80005822:	ef 68 ff ba 	st.b	r7[-70],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005826:	fc 19 c0 00 	movh	r9,0xc000
8000582a:	ef 38 ff bb 	ld.ub	r8,r7[-69]
8000582e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005830:	fc 19 c0 20 	movh	r9,0xc020
80005834:	ef 38 ff ba 	ld.ub	r8,r7[-70]
80005838:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_DK) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
8000583a:	fe f8 02 e2 	ld.w	r8,pc[738]
8000583e:	70 08       	ld.w	r8,r8[0x0]
80005840:	32 89       	mov	r9,40
80005842:	ef 49 ff c0 	st.w	r7[-64],r9
80005846:	ef 48 ff bc 	st.w	r7[-68],r8
8000584a:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000584e:	ef 48 ff c8 	st.w	r7[-56],r8
80005852:	ee f8 ff bc 	ld.w	r8,r7[-68]
80005856:	ef 48 ff c4 	st.w	r7[-60],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000585a:	ee fb ff c8 	ld.w	r11,r7[-56]
8000585e:	ef 4b ff 00 	st.w	r7[-256],r11
80005862:	30 0a       	mov	r10,0
80005864:	ef 4a fe fc 	st.w	r7[-260],r10
80005868:	ee f9 ff c4 	ld.w	r9,r7[-60]
8000586c:	ef 49 fe f8 	st.w	r7[-264],r9
80005870:	30 08       	mov	r8,0
80005872:	ef 48 fe f4 	st.w	r7[-268],r8
80005876:	ee fa fe fc 	ld.w	r10,r7[-260]
8000587a:	ee fc fe f8 	ld.w	r12,r7[-264]
8000587e:	b9 3a       	mul	r10,r12
80005880:	ee f8 fe f4 	ld.w	r8,r7[-268]
80005884:	ee fb ff 00 	ld.w	r11,r7[-256]
80005888:	b7 38       	mul	r8,r11
8000588a:	10 0a       	add	r10,r8
8000588c:	ee fc ff 00 	ld.w	r12,r7[-256]
80005890:	ee fb fe f8 	ld.w	r11,r7[-264]
80005894:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005898:	12 0a       	add	r10,r9
8000589a:	14 99       	mov	r9,r10
8000589c:	e0 6a 03 e7 	mov	r10,999
800058a0:	30 0b       	mov	r11,0
800058a2:	f0 0a 00 0a 	add	r10,r8,r10
800058a6:	f2 0b 00 4b 	adc	r11,r9,r11
800058aa:	e0 68 03 e8 	mov	r8,1000
800058ae:	30 09       	mov	r9,0
800058b0:	f0 1f 00 9c 	mcall	80005b20 <et024006_PowerUp+0x730>
800058b4:	14 98       	mov	r8,r10
800058b6:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800058b8:	ef 48 ff d0 	st.w	r7[-48],r8
800058bc:	ee c8 00 c8 	sub	r8,r7,200
800058c0:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800058c4:	e1 b8 00 42 	mfsr	r8,0x108
800058c8:	10 99       	mov	r9,r8
800058ca:	ee f8 ff cc 	ld.w	r8,r7[-52]
800058ce:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800058d0:	ee f8 ff cc 	ld.w	r8,r7[-52]
800058d4:	70 09       	ld.w	r9,r8[0x0]
800058d6:	ee f8 ff d0 	ld.w	r8,r7[-48]
800058da:	10 09       	add	r9,r8
800058dc:	ee f8 ff cc 	ld.w	r8,r7[-52]
800058e0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800058e2:	ee f9 ff cc 	ld.w	r9,r7[-52]
800058e6:	30 08       	mov	r8,0
800058e8:	f3 68 00 08 	st.b	r9[8],r8
800058ec:	ee c8 00 c8 	sub	r8,r7,200
800058f0:	ef 48 ff d4 	st.w	r7[-44],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800058f4:	e1 b8 00 42 	mfsr	r8,0x108
800058f8:	ef 48 ff d8 	st.w	r7[-40],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800058fc:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005900:	f1 39 00 08 	ld.ub	r9,r8[8]
80005904:	30 28       	mov	r8,2
80005906:	f0 09 18 00 	cp.b	r9,r8
8000590a:	c0 31       	brne	80005910 <et024006_PowerUp+0x520>
    return false;
8000590c:	30 08       	mov	r8,0
8000590e:	c4 38       	rjmp	80005994 <et024006_PowerUp+0x5a4>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005910:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005914:	f1 39 00 08 	ld.ub	r9,r8[8]
80005918:	30 18       	mov	r8,1
8000591a:	f0 09 18 00 	cp.b	r9,r8
8000591e:	c0 31       	brne	80005924 <et024006_PowerUp+0x534>
    return true;
80005920:	30 18       	mov	r8,1
80005922:	c3 98       	rjmp	80005994 <et024006_PowerUp+0x5a4>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005924:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005928:	70 09       	ld.w	r9,r8[0x0]
8000592a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000592e:	70 18       	ld.w	r8,r8[0x4]
80005930:	10 39       	cp.w	r9,r8
80005932:	e0 88 00 1a 	brls	80005966 <et024006_PowerUp+0x576>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005936:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000593a:	70 08       	ld.w	r8,r8[0x0]
8000593c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005940:	10 39       	cp.w	r9,r8
80005942:	c1 02       	brcc	80005962 <et024006_PowerUp+0x572>
80005944:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005948:	70 18       	ld.w	r8,r8[0x4]
8000594a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000594e:	10 39       	cp.w	r9,r8
80005950:	e0 88 00 09 	brls	80005962 <et024006_PowerUp+0x572>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005954:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005958:	30 18       	mov	r8,1
8000595a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000595e:	30 18       	mov	r8,1
80005960:	c1 a8       	rjmp	80005994 <et024006_PowerUp+0x5a4>
    }
    return false;
80005962:	30 08       	mov	r8,0
80005964:	c1 88       	rjmp	80005994 <et024006_PowerUp+0x5a4>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005966:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000596a:	70 08       	ld.w	r8,r8[0x0]
8000596c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005970:	10 39       	cp.w	r9,r8
80005972:	c0 93       	brcs	80005984 <et024006_PowerUp+0x594>
80005974:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005978:	70 18       	ld.w	r8,r8[0x4]
8000597a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000597e:	10 39       	cp.w	r9,r8
80005980:	e0 88 00 09 	brls	80005992 <et024006_PowerUp+0x5a2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005984:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005988:	30 18       	mov	r8,1
8000598a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000598e:	30 18       	mov	r8,1
80005990:	c0 28       	rjmp	80005994 <et024006_PowerUp+0x5a4>
    }
    return false;
80005992:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005994:	58 08       	cp.w	r8,0
80005996:	ca b0       	breq	800058ec <et024006_PowerUp+0x4fc>
80005998:	31 b8       	mov	r8,27
8000599a:	ef 68 ff df 	st.b	r7[-33],r8
8000599e:	31 08       	mov	r8,16
800059a0:	ef 68 ff de 	st.b	r7[-34],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800059a4:	fc 19 c0 00 	movh	r9,0xc000
800059a8:	ef 38 ff df 	ld.ub	r8,r7[-33]
800059ac:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800059ae:	fc 19 c0 20 	movh	r9,0xc020
800059b2:	ef 38 ff de 	ld.ub	r8,r7[-34]
800059b6:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_PON) );

  // In case the et024006_DisplayOn function is called right after
  cpu_delay_ms( 40, tft_data.cpu_hz );
800059b8:	4d 98       	lddpc	r8,80005b1c <et024006_PowerUp+0x72c>
800059ba:	70 08       	ld.w	r8,r8[0x0]
800059bc:	32 89       	mov	r9,40
800059be:	ef 49 ff e4 	st.w	r7[-28],r9
800059c2:	ef 48 ff e0 	st.w	r7[-32],r8
800059c6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800059ca:	ef 48 ff ec 	st.w	r7[-20],r8
800059ce:	ee f8 ff e0 	ld.w	r8,r7[-32]
800059d2:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800059d6:	ee fa ff ec 	ld.w	r10,r7[-20]
800059da:	ef 4a ff 10 	st.w	r7[-240],r10
800059de:	30 09       	mov	r9,0
800059e0:	ef 49 ff 0c 	st.w	r7[-244],r9
800059e4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800059e8:	ef 48 ff 08 	st.w	r7[-248],r8
800059ec:	30 0c       	mov	r12,0
800059ee:	ef 4c ff 04 	st.w	r7[-252],r12
800059f2:	ee fa ff 0c 	ld.w	r10,r7[-244]
800059f6:	ee fb ff 08 	ld.w	r11,r7[-248]
800059fa:	b7 3a       	mul	r10,r11
800059fc:	ee f8 ff 04 	ld.w	r8,r7[-252]
80005a00:	ee f9 ff 10 	ld.w	r9,r7[-240]
80005a04:	b3 38       	mul	r8,r9
80005a06:	10 0a       	add	r10,r8
80005a08:	ee fc ff 10 	ld.w	r12,r7[-240]
80005a0c:	ee fb ff 08 	ld.w	r11,r7[-248]
80005a10:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005a14:	12 0a       	add	r10,r9
80005a16:	14 99       	mov	r9,r10
80005a18:	e0 6a 03 e7 	mov	r10,999
80005a1c:	30 0b       	mov	r11,0
80005a1e:	f0 0a 00 0a 	add	r10,r8,r10
80005a22:	f2 0b 00 4b 	adc	r11,r9,r11
80005a26:	e0 68 03 e8 	mov	r8,1000
80005a2a:	30 09       	mov	r9,0
80005a2c:	f0 1f 00 3d 	mcall	80005b20 <et024006_PowerUp+0x730>
80005a30:	14 98       	mov	r8,r10
80005a32:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005a34:	ef 48 ff f4 	st.w	r7[-12],r8
80005a38:	ee c8 00 bc 	sub	r8,r7,188
80005a3c:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005a40:	e1 b8 00 42 	mfsr	r8,0x108
80005a44:	10 99       	mov	r9,r8
80005a46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005a4a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005a4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005a50:	70 09       	ld.w	r9,r8[0x0]
80005a52:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005a56:	10 09       	add	r9,r8
80005a58:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005a5c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005a5e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005a62:	30 08       	mov	r8,0
80005a64:	f3 68 00 08 	st.b	r9[8],r8
80005a68:	ee c8 00 bc 	sub	r8,r7,188
80005a6c:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005a70:	e1 b8 00 42 	mfsr	r8,0x108
80005a74:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005a78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a7c:	f1 39 00 08 	ld.ub	r9,r8[8]
80005a80:	30 28       	mov	r8,2
80005a82:	f0 09 18 00 	cp.b	r9,r8
80005a86:	c0 31       	brne	80005a8c <et024006_PowerUp+0x69c>
    return false;
80005a88:	30 08       	mov	r8,0
80005a8a:	c4 38       	rjmp	80005b10 <et024006_PowerUp+0x720>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005a8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a90:	f1 39 00 08 	ld.ub	r9,r8[8]
80005a94:	30 18       	mov	r8,1
80005a96:	f0 09 18 00 	cp.b	r9,r8
80005a9a:	c0 31       	brne	80005aa0 <et024006_PowerUp+0x6b0>
    return true;
80005a9c:	30 18       	mov	r8,1
80005a9e:	c3 98       	rjmp	80005b10 <et024006_PowerUp+0x720>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005aa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005aa4:	70 09       	ld.w	r9,r8[0x0]
80005aa6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005aaa:	70 18       	ld.w	r8,r8[0x4]
80005aac:	10 39       	cp.w	r9,r8
80005aae:	e0 88 00 1a 	brls	80005ae2 <et024006_PowerUp+0x6f2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005ab2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ab6:	70 08       	ld.w	r8,r8[0x0]
80005ab8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005abc:	10 39       	cp.w	r9,r8
80005abe:	c1 02       	brcc	80005ade <et024006_PowerUp+0x6ee>
80005ac0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ac4:	70 18       	ld.w	r8,r8[0x4]
80005ac6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005aca:	10 39       	cp.w	r9,r8
80005acc:	e0 88 00 09 	brls	80005ade <et024006_PowerUp+0x6ee>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005ad0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005ad4:	30 18       	mov	r8,1
80005ad6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005ada:	30 18       	mov	r8,1
80005adc:	c1 a8       	rjmp	80005b10 <et024006_PowerUp+0x720>
    }
    return false;
80005ade:	30 08       	mov	r8,0
80005ae0:	c1 88       	rjmp	80005b10 <et024006_PowerUp+0x720>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005ae2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ae6:	70 08       	ld.w	r8,r8[0x0]
80005ae8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005aec:	10 39       	cp.w	r9,r8
80005aee:	c0 93       	brcs	80005b00 <et024006_PowerUp+0x710>
80005af0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005af4:	70 18       	ld.w	r8,r8[0x4]
80005af6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005afa:	10 39       	cp.w	r9,r8
80005afc:	e0 88 00 09 	brls	80005b0e <et024006_PowerUp+0x71e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005b00:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b04:	30 18       	mov	r8,1
80005b06:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005b0a:	30 18       	mov	r8,1
80005b0c:	c0 28       	rjmp	80005b10 <et024006_PowerUp+0x720>
    }
    return false;
80005b0e:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005b10:	58 08       	cp.w	r8,0
80005b12:	ca b0       	breq	80005a68 <et024006_PowerUp+0x678>
}
80005b14:	2b 7d       	sub	sp,-292
80005b16:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005b1a:	00 00       	add	r0,r0
80005b1c:	00 00       	add	r0,r0
80005b1e:	06 84       	andn	r4,r3
80005b20:	80 00       	ld.sh	r0,r0[0x0]
80005b22:	e0 b8       	*unknown*

80005b24 <et024006_PowerOn>:


/*! \brief Turns the display on.
 */
static void et024006_PowerOn( void )
{
80005b24:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005b28:	1a 97       	mov	r7,sp
80005b2a:	21 9d       	sub	sp,100
80005b2c:	32 6c       	mov	r12,38
80005b2e:	ef 6c ff b7 	st.b	r7[-73],r12
80005b32:	30 4c       	mov	r12,4
80005b34:	ef 6c ff b6 	st.b	r7[-74],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005b38:	fc 1e c0 00 	movh	lr,0xc000
80005b3c:	ef 3c ff b7 	ld.ub	r12,r7[-73]
80005b40:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005b42:	fc 1e c0 20 	movh	lr,0xc020
80005b46:	ef 3c ff b6 	ld.ub	r12,r7[-74]
80005b4a:	bc 0c       	st.h	lr[0x0],r12
 */
static void et024006_PowerOn( void )
{
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_D0) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
80005b4c:	fe fc 02 e0 	ld.w	r12,pc[736]
80005b50:	78 0c       	ld.w	r12,r12[0x0]
80005b52:	32 8e       	mov	lr,40
80005b54:	ef 4e ff bc 	st.w	r7[-68],lr
80005b58:	ef 4c ff b8 	st.w	r7[-72],r12
80005b5c:	ee fc ff bc 	ld.w	r12,r7[-68]
80005b60:	ef 4c ff c4 	st.w	r7[-60],r12
80005b64:	ee fc ff b8 	ld.w	r12,r7[-72]
80005b68:	ef 4c ff c0 	st.w	r7[-64],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005b6c:	ee fa ff c4 	ld.w	r10,r7[-60]
80005b70:	30 0b       	mov	r11,0
80005b72:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005b76:	30 09       	mov	r9,0
80005b78:	f6 08 02 4c 	mul	r12,r11,r8
80005b7c:	f2 0a 02 4e 	mul	lr,r9,r10
80005b80:	1c 0c       	add	r12,lr
80005b82:	f4 08 06 48 	mulu.d	r8,r10,r8
80005b86:	12 0c       	add	r12,r9
80005b88:	18 99       	mov	r9,r12
80005b8a:	e0 6a 03 e7 	mov	r10,999
80005b8e:	30 0b       	mov	r11,0
80005b90:	f0 0a 00 0a 	add	r10,r8,r10
80005b94:	f2 0b 00 4b 	adc	r11,r9,r11
80005b98:	e0 68 03 e8 	mov	r8,1000
80005b9c:	30 09       	mov	r9,0
80005b9e:	f0 1f 00 a5 	mcall	80005e30 <et024006_PowerOn+0x30c>
80005ba2:	14 98       	mov	r8,r10
80005ba4:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005ba6:	ef 48 ff cc 	st.w	r7[-52],r8
80005baa:	ee c8 00 64 	sub	r8,r7,100
80005bae:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005bb2:	e1 b8 00 42 	mfsr	r8,0x108
80005bb6:	10 99       	mov	r9,r8
80005bb8:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005bbc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005bbe:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005bc2:	70 09       	ld.w	r9,r8[0x0]
80005bc4:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005bc8:	10 09       	add	r9,r8
80005bca:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005bce:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005bd0:	ee f9 ff c8 	ld.w	r9,r7[-56]
80005bd4:	30 08       	mov	r8,0
80005bd6:	f3 68 00 08 	st.b	r9[8],r8
80005bda:	ee c8 00 64 	sub	r8,r7,100
80005bde:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005be2:	e1 b8 00 42 	mfsr	r8,0x108
80005be6:	ef 48 ff d4 	st.w	r7[-44],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005bea:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005bee:	f1 39 00 08 	ld.ub	r9,r8[8]
80005bf2:	30 28       	mov	r8,2
80005bf4:	f0 09 18 00 	cp.b	r9,r8
80005bf8:	c0 31       	brne	80005bfe <et024006_PowerOn+0xda>
    return false;
80005bfa:	30 08       	mov	r8,0
80005bfc:	c4 38       	rjmp	80005c82 <et024006_PowerOn+0x15e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005bfe:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c02:	f1 39 00 08 	ld.ub	r9,r8[8]
80005c06:	30 18       	mov	r8,1
80005c08:	f0 09 18 00 	cp.b	r9,r8
80005c0c:	c0 31       	brne	80005c12 <et024006_PowerOn+0xee>
    return true;
80005c0e:	30 18       	mov	r8,1
80005c10:	c3 98       	rjmp	80005c82 <et024006_PowerOn+0x15e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005c12:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c16:	70 09       	ld.w	r9,r8[0x0]
80005c18:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c1c:	70 18       	ld.w	r8,r8[0x4]
80005c1e:	10 39       	cp.w	r9,r8
80005c20:	e0 88 00 1a 	brls	80005c54 <et024006_PowerOn+0x130>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005c24:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c28:	70 08       	ld.w	r8,r8[0x0]
80005c2a:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005c2e:	10 39       	cp.w	r9,r8
80005c30:	c1 02       	brcc	80005c50 <et024006_PowerOn+0x12c>
80005c32:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c36:	70 18       	ld.w	r8,r8[0x4]
80005c38:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005c3c:	10 39       	cp.w	r9,r8
80005c3e:	e0 88 00 09 	brls	80005c50 <et024006_PowerOn+0x12c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005c42:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005c46:	30 18       	mov	r8,1
80005c48:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005c4c:	30 18       	mov	r8,1
80005c4e:	c1 a8       	rjmp	80005c82 <et024006_PowerOn+0x15e>
    }
    return false;
80005c50:	30 08       	mov	r8,0
80005c52:	c1 88       	rjmp	80005c82 <et024006_PowerOn+0x15e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005c54:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c58:	70 08       	ld.w	r8,r8[0x0]
80005c5a:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005c5e:	10 39       	cp.w	r9,r8
80005c60:	c0 93       	brcs	80005c72 <et024006_PowerOn+0x14e>
80005c62:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c66:	70 18       	ld.w	r8,r8[0x4]
80005c68:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005c6c:	10 39       	cp.w	r9,r8
80005c6e:	e0 88 00 09 	brls	80005c80 <et024006_PowerOn+0x15c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005c72:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005c76:	30 18       	mov	r8,1
80005c78:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005c7c:	30 18       	mov	r8,1
80005c7e:	c0 28       	rjmp	80005c82 <et024006_PowerOn+0x15e>
    }
    return false;
80005c80:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005c82:	58 08       	cp.w	r8,0
80005c84:	ca b0       	breq	80005bda <et024006_PowerOn+0xb6>
80005c86:	32 68       	mov	r8,38
80005c88:	ef 68 ff d9 	st.b	r7[-39],r8
80005c8c:	32 48       	mov	r8,36
80005c8e:	ef 68 ff d8 	st.b	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005c92:	fc 19 c0 00 	movh	r9,0xc000
80005c96:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80005c9a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005c9c:	fc 19 c0 20 	movh	r9,0xc020
80005ca0:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80005ca4:	b2 08       	st.h	r9[0x0],r8
80005ca6:	32 68       	mov	r8,38
80005ca8:	ef 68 ff db 	st.b	r7[-37],r8
80005cac:	32 c8       	mov	r8,44
80005cae:	ef 68 ff da 	st.b	r7[-38],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005cb2:	fc 19 c0 00 	movh	r9,0xc000
80005cb6:	ef 38 ff db 	ld.ub	r8,r7[-37]
80005cba:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005cbc:	fc 19 c0 20 	movh	r9,0xc020
80005cc0:	ef 38 ff da 	ld.ub	r8,r7[-38]
80005cc4:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D0) );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  cpu_delay_ms( 40, tft_data.cpu_hz );
80005cc6:	4d a8       	lddpc	r8,80005e2c <et024006_PowerOn+0x308>
80005cc8:	70 08       	ld.w	r8,r8[0x0]
80005cca:	32 89       	mov	r9,40
80005ccc:	ef 49 ff e0 	st.w	r7[-32],r9
80005cd0:	ef 48 ff dc 	st.w	r7[-36],r8
80005cd4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005cd8:	ef 48 ff e8 	st.w	r7[-24],r8
80005cdc:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005ce0:	ef 48 ff e4 	st.w	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005ce4:	ee f0 ff e8 	ld.w	r0,r7[-24]
80005ce8:	30 01       	mov	r1,0
80005cea:	ee f2 ff e4 	ld.w	r2,r7[-28]
80005cee:	30 03       	mov	r3,0
80005cf0:	e2 02 02 4a 	mul	r10,r1,r2
80005cf4:	e6 00 02 48 	mul	r8,r3,r0
80005cf8:	10 0a       	add	r10,r8
80005cfa:	e0 02 06 48 	mulu.d	r8,r0,r2
80005cfe:	12 0a       	add	r10,r9
80005d00:	14 99       	mov	r9,r10
80005d02:	e0 6a 03 e7 	mov	r10,999
80005d06:	30 0b       	mov	r11,0
80005d08:	f0 0a 00 0a 	add	r10,r8,r10
80005d0c:	f2 0b 00 4b 	adc	r11,r9,r11
80005d10:	e0 68 03 e8 	mov	r8,1000
80005d14:	30 09       	mov	r9,0
80005d16:	f0 1f 00 47 	mcall	80005e30 <et024006_PowerOn+0x30c>
80005d1a:	14 98       	mov	r8,r10
80005d1c:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005d1e:	ef 48 ff f0 	st.w	r7[-16],r8
80005d22:	ee c8 00 58 	sub	r8,r7,88
80005d26:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005d2a:	e1 b8 00 42 	mfsr	r8,0x108
80005d2e:	10 99       	mov	r9,r8
80005d30:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005d34:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005d36:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005d3a:	70 09       	ld.w	r9,r8[0x0]
80005d3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005d40:	10 09       	add	r9,r8
80005d42:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005d46:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005d48:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005d4c:	30 08       	mov	r8,0
80005d4e:	f3 68 00 08 	st.b	r9[8],r8
80005d52:	ee c8 00 58 	sub	r8,r7,88
80005d56:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005d5a:	e1 b8 00 42 	mfsr	r8,0x108
80005d5e:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005d62:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005d66:	f1 39 00 08 	ld.ub	r9,r8[8]
80005d6a:	30 28       	mov	r8,2
80005d6c:	f0 09 18 00 	cp.b	r9,r8
80005d70:	c0 31       	brne	80005d76 <et024006_PowerOn+0x252>
    return false;
80005d72:	30 08       	mov	r8,0
80005d74:	c4 38       	rjmp	80005dfa <et024006_PowerOn+0x2d6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005d76:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005d7a:	f1 39 00 08 	ld.ub	r9,r8[8]
80005d7e:	30 18       	mov	r8,1
80005d80:	f0 09 18 00 	cp.b	r9,r8
80005d84:	c0 31       	brne	80005d8a <et024006_PowerOn+0x266>
    return true;
80005d86:	30 18       	mov	r8,1
80005d88:	c3 98       	rjmp	80005dfa <et024006_PowerOn+0x2d6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005d8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005d8e:	70 09       	ld.w	r9,r8[0x0]
80005d90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005d94:	70 18       	ld.w	r8,r8[0x4]
80005d96:	10 39       	cp.w	r9,r8
80005d98:	e0 88 00 1a 	brls	80005dcc <et024006_PowerOn+0x2a8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005d9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005da0:	70 08       	ld.w	r8,r8[0x0]
80005da2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005da6:	10 39       	cp.w	r9,r8
80005da8:	c1 02       	brcc	80005dc8 <et024006_PowerOn+0x2a4>
80005daa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005dae:	70 18       	ld.w	r8,r8[0x4]
80005db0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005db4:	10 39       	cp.w	r9,r8
80005db6:	e0 88 00 09 	brls	80005dc8 <et024006_PowerOn+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005dba:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005dbe:	30 18       	mov	r8,1
80005dc0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005dc4:	30 18       	mov	r8,1
80005dc6:	c1 a8       	rjmp	80005dfa <et024006_PowerOn+0x2d6>
    }
    return false;
80005dc8:	30 08       	mov	r8,0
80005dca:	c1 88       	rjmp	80005dfa <et024006_PowerOn+0x2d6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005dcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005dd0:	70 08       	ld.w	r8,r8[0x0]
80005dd2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005dd6:	10 39       	cp.w	r9,r8
80005dd8:	c0 93       	brcs	80005dea <et024006_PowerOn+0x2c6>
80005dda:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005dde:	70 18       	ld.w	r8,r8[0x4]
80005de0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005de4:	10 39       	cp.w	r9,r8
80005de6:	e0 88 00 09 	brls	80005df8 <et024006_PowerOn+0x2d4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005dea:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005dee:	30 18       	mov	r8,1
80005df0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005df4:	30 18       	mov	r8,1
80005df6:	c0 28       	rjmp	80005dfa <et024006_PowerOn+0x2d6>
    }
    return false;
80005df8:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005dfa:	58 08       	cp.w	r8,0
80005dfc:	ca b0       	breq	80005d52 <et024006_PowerOn+0x22e>
80005dfe:	32 68       	mov	r8,38
80005e00:	ef 68 ff ff 	st.b	r7[-1],r8
80005e04:	33 c8       	mov	r8,60
80005e06:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005e0a:	fc 19 c0 00 	movh	r9,0xc000
80005e0e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005e12:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005e14:	fc 19 c0 20 	movh	r9,0xc020
80005e18:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005e1c:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON)| (1 << HIMAX_DTE) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  et024006_SetRegister( HIMAX_INTERNAL28, (1 << HIMAX_TEON) );
80005e1e:	30 8b       	mov	r11,8
80005e20:	37 0c       	mov	r12,112
80005e22:	f0 1f 00 05 	mcall	80005e34 <et024006_PowerOn+0x310>
}
80005e26:	2e 7d       	sub	sp,-100
80005e28:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005e2c:	00 00       	add	r0,r0
80005e2e:	06 84       	andn	r4,r3
80005e30:	80 00       	ld.sh	r0,r0[0x0]
80005e32:	e0 b8       	*unknown*
80005e34:	80 00       	ld.sh	r0,r0[0x0]
80005e36:	48 38       	lddpc	r8,80005e40 <et024006_PowerOn+0x31c>
80005e38:	20 44       	sub	r4,4
80005e3a:	65 63       	ld.w	r3,r2[0x58]
80005e3c:	69 70       	ld.w	r0,r4[0x5c]
80005e3e:	68 65       	ld.w	r5,r4[0x18]
80005e40:	72 65       	ld.w	r5,r9[0x18]
80005e42:	64 20       	ld.w	r0,r2[0x8]
80005e44:	00 00       	add	r0,r0
80005e46:	00 00       	add	r0,r0
80005e48:	20 73       	sub	r3,7
80005e4a:	65 63       	ld.w	r3,r2[0x58]
80005e4c:	74 6f       	ld.w	pc,r10[0x18]
80005e4e:	72 73       	ld.w	r3,r9[0x1c]
80005e50:	00 00       	add	r0,r0
80005e52:	00 00       	add	r0,r0
80005e54:	20 45       	sub	r5,4
80005e56:	6e 63       	ld.w	r3,r7[0x18]
80005e58:	69 70       	ld.w	r0,r4[0x5c]
80005e5a:	68 65       	ld.w	r5,r4[0x18]
80005e5c:	72 65       	ld.w	r5,r9[0x18]
80005e5e:	64 20       	ld.w	r0,r2[0x8]
80005e60:	00 00       	add	r0,r0
	...

80005e64 <is_sd_mmc_mci_card_present>:


//_____ D E F I N I T I O N S ______________________________________________

bool is_sd_mmc_mci_card_present(uint8_t slot)
{
80005e64:	eb cd 40 80 	pushm	r7,lr
80005e68:	1a 97       	mov	r7,sp
80005e6a:	20 1d       	sub	sp,4
80005e6c:	18 98       	mov	r8,r12
80005e6e:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80005e72:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80005e76:	30 18       	mov	r8,1
80005e78:	f0 09 18 00 	cp.b	r9,r8
80005e7c:	e0 88 00 04 	brls	80005e84 <is_sd_mmc_mci_card_present+0x20>
    return false;
80005e80:	30 08       	mov	r8,0
80005e82:	c1 88       	rjmp	80005eb2 <is_sd_mmc_mci_card_present+0x4e>

  switch(slot)
80005e84:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005e88:	58 08       	cp.w	r8,0
80005e8a:	c0 b0       	breq	80005ea0 <is_sd_mmc_mci_card_present+0x3c>
80005e8c:	58 18       	cp.w	r8,1
80005e8e:	c1 11       	brne	80005eb0 <is_sd_mmc_mci_card_present+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_CARD_DETECT)==SD_SLOT_4BITS_CARD_DETECT_VALUE);
80005e90:	32 8c       	mov	r12,40
80005e92:	f0 1f 00 0b 	mcall	80005ebc <is_sd_mmc_mci_card_present+0x58>
80005e96:	18 98       	mov	r8,r12
80005e98:	58 08       	cp.w	r8,0
80005e9a:	5f 08       	sreq	r8
80005e9c:	5c 58       	castu.b	r8
80005e9e:	c0 a8       	rjmp	80005eb2 <is_sd_mmc_mci_card_present+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_CARD_DETECT)==SD_SLOT_8BITS_CARD_DETECT_VALUE);
80005ea0:	32 bc       	mov	r12,43
80005ea2:	f0 1f 00 07 	mcall	80005ebc <is_sd_mmc_mci_card_present+0x58>
80005ea6:	18 98       	mov	r8,r12
80005ea8:	58 08       	cp.w	r8,0
80005eaa:	5f 08       	sreq	r8
80005eac:	5c 58       	castu.b	r8
80005eae:	c0 28       	rjmp	80005eb2 <is_sd_mmc_mci_card_present+0x4e>
  }

  return false;
80005eb0:	30 08       	mov	r8,0
}
80005eb2:	10 9c       	mov	r12,r8
80005eb4:	2f fd       	sub	sp,-4
80005eb6:	e3 cd 80 80 	ldm	sp++,r7,pc
80005eba:	00 00       	add	r0,r0
80005ebc:	80 00       	ld.sh	r0,r0[0x0]
80005ebe:	89 1c       	st.w	r4[0x4],r12

80005ec0 <is_sd_mmc_mci_card_protected>:

bool is_sd_mmc_mci_card_protected(uint8_t slot)
{
80005ec0:	eb cd 40 80 	pushm	r7,lr
80005ec4:	1a 97       	mov	r7,sp
80005ec6:	20 1d       	sub	sp,4
80005ec8:	18 98       	mov	r8,r12
80005eca:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80005ece:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80005ed2:	30 18       	mov	r8,1
80005ed4:	f0 09 18 00 	cp.b	r9,r8
80005ed8:	e0 88 00 04 	brls	80005ee0 <is_sd_mmc_mci_card_protected+0x20>
    return false;
80005edc:	30 08       	mov	r8,0
80005ede:	c1 88       	rjmp	80005f0e <is_sd_mmc_mci_card_protected+0x4e>

  switch(slot)
80005ee0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005ee4:	58 08       	cp.w	r8,0
80005ee6:	c0 b0       	breq	80005efc <is_sd_mmc_mci_card_protected+0x3c>
80005ee8:	58 18       	cp.w	r8,1
80005eea:	c1 11       	brne	80005f0c <is_sd_mmc_mci_card_protected+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_WRITE_PROTECT)==SD_SLOT_4BITS_WRITE_PROTECT_VALUE);
80005eec:	32 6c       	mov	r12,38
80005eee:	f0 1f 00 0b 	mcall	80005f18 <is_sd_mmc_mci_card_protected+0x58>
80005ef2:	18 98       	mov	r8,r12
80005ef4:	58 18       	cp.w	r8,1
80005ef6:	5f 08       	sreq	r8
80005ef8:	5c 58       	castu.b	r8
80005efa:	c0 a8       	rjmp	80005f0e <is_sd_mmc_mci_card_protected+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_WRITE_PROTECT)==SD_SLOT_8BITS_WRITE_PROTECT_VALUE);
80005efc:	36 cc       	mov	r12,108
80005efe:	f0 1f 00 07 	mcall	80005f18 <is_sd_mmc_mci_card_protected+0x58>
80005f02:	18 98       	mov	r8,r12
80005f04:	58 18       	cp.w	r8,1
80005f06:	5f 08       	sreq	r8
80005f08:	5c 58       	castu.b	r8
80005f0a:	c0 28       	rjmp	80005f0e <is_sd_mmc_mci_card_protected+0x4e>
  }

  return false;
80005f0c:	30 08       	mov	r8,0
}
80005f0e:	10 9c       	mov	r12,r8
80005f10:	2f fd       	sub	sp,-4
80005f12:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f16:	00 00       	add	r0,r0
80005f18:	80 00       	ld.sh	r0,r0[0x0]
80005f1a:	89 1c       	st.w	r4[0x4],r12

80005f1c <sd_mmc_mci_get_csd>:

static bool  sd_mmc_mci_get_csd(uint8_t slot)
{
80005f1c:	eb cd 40 80 	pushm	r7,lr
80005f20:	1a 97       	mov	r7,sp
80005f22:	20 fd       	sub	sp,60
80005f24:	18 98       	mov	r8,r12
80005f26:	ef 68 ff c4 	st.b	r7[-60],r8

  uint32_t max_Read_DataBlock_Length;
  uint32_t mult;
  uint32_t blocknr;
  uint8_t tmp;
  const uint16_t freq_unit[4] = {10, 100, 1000, 10000};
80005f2a:	fe f9 02 b2 	ld.w	r9,pc[690]
80005f2e:	ee c8 00 28 	sub	r8,r7,40
80005f32:	30 8a       	mov	r10,8
80005f34:	12 9b       	mov	r11,r9
80005f36:	10 9c       	mov	r12,r8
80005f38:	f0 1f 00 aa 	mcall	800061e0 <sd_mmc_mci_get_csd+0x2c4>
  const uint8_t mult_fact[16] = {0, 10, 12, 13, 15, 20, 26, 30, 35, 40, 45, 52, 55, 60, 70, 80}; // MMC tabs...
80005f3c:	fe f8 02 a8 	ld.w	r8,pc[680]
80005f40:	ee ca 00 38 	sub	r10,r7,56
80005f44:	10 9b       	mov	r11,r8
80005f46:	f6 e8 00 00 	ld.d	r8,r11[0]
80005f4a:	f4 e9 00 00 	st.d	r10[0],r8
80005f4e:	f6 e8 00 08 	ld.d	r8,r11[8]
80005f52:	f4 e9 00 08 	st.d	r10[8],r8

  if (slot > MCI_LAST_SLOTS)
80005f56:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80005f5a:	30 18       	mov	r8,1
80005f5c:	f0 09 18 00 	cp.b	r9,r8
80005f60:	e0 88 00 04 	brls	80005f68 <sd_mmc_mci_get_csd+0x4c>
    return false;
80005f64:	30 08       	mov	r8,0
80005f66:	c3 69       	rjmp	800061d2 <sd_mmc_mci_get_csd+0x2b6>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80005f68:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80005f6c:	fe f9 02 7c 	ld.w	r9,pc[636]
80005f70:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005f74:	10 9a       	mov	r10,r8
80005f76:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80005f7a:	fe f8 02 72 	ld.w	r8,pc[626]
80005f7e:	70 08       	ld.w	r8,r8[0x0]
80005f80:	12 9b       	mov	r11,r9
80005f82:	10 9c       	mov	r12,r8
80005f84:	f0 1f 00 9b 	mcall	800061f0 <sd_mmc_mci_get_csd+0x2d4>

  //-- (CMD9)
  if (mci_send_cmd(mci, SD_MMC_SEND_CSD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80005f88:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80005f8c:	fe f8 02 68 	ld.w	r8,pc[616]
80005f90:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005f94:	fe f8 02 58 	ld.w	r8,pc[600]
80005f98:	70 08       	ld.w	r8,r8[0x0]
80005f9a:	12 9a       	mov	r10,r9
80005f9c:	e0 6b 10 89 	mov	r11,4233
80005fa0:	10 9c       	mov	r12,r8
80005fa2:	f0 1f 00 96 	mcall	800061f8 <sd_mmc_mci_get_csd+0x2dc>
80005fa6:	18 98       	mov	r8,r12
80005fa8:	58 08       	cp.w	r8,0
80005faa:	c0 30       	breq	80005fb0 <sd_mmc_mci_get_csd+0x94>
    return false;
80005fac:	30 08       	mov	r8,0
80005fae:	c1 29       	rjmp	800061d2 <sd_mmc_mci_get_csd+0x2b6>


  csd.csd[0] = mci_read_response(mci);
80005fb0:	fe f8 02 3c 	ld.w	r8,pc[572]
80005fb4:	70 08       	ld.w	r8,r8[0x0]
80005fb6:	10 9c       	mov	r12,r8
80005fb8:	f0 1f 00 91 	mcall	800061fc <sd_mmc_mci_get_csd+0x2e0>
80005fbc:	18 98       	mov	r8,r12
80005fbe:	ef 48 ff e0 	st.w	r7[-32],r8
  csd.csd[1] = mci_read_response(mci);
80005fc2:	fe f8 02 2a 	ld.w	r8,pc[554]
80005fc6:	70 08       	ld.w	r8,r8[0x0]
80005fc8:	10 9c       	mov	r12,r8
80005fca:	f0 1f 00 8d 	mcall	800061fc <sd_mmc_mci_get_csd+0x2e0>
80005fce:	18 98       	mov	r8,r12
80005fd0:	ef 48 ff e4 	st.w	r7[-28],r8
  csd.csd[2] = mci_read_response(mci);
80005fd4:	fe f8 02 18 	ld.w	r8,pc[536]
80005fd8:	70 08       	ld.w	r8,r8[0x0]
80005fda:	10 9c       	mov	r12,r8
80005fdc:	f0 1f 00 88 	mcall	800061fc <sd_mmc_mci_get_csd+0x2e0>
80005fe0:	18 98       	mov	r8,r12
80005fe2:	ef 48 ff e8 	st.w	r7[-24],r8
  csd.csd[3] = mci_read_response(mci);
80005fe6:	fe f8 02 06 	ld.w	r8,pc[518]
80005fea:	70 08       	ld.w	r8,r8[0x0]
80005fec:	10 9c       	mov	r12,r8
80005fee:	f0 1f 00 84 	mcall	800061fc <sd_mmc_mci_get_csd+0x2e0>
80005ff2:	18 98       	mov	r8,r12
80005ff4:	ef 48 ff ec 	st.w	r7[-20],r8

  //-- Read "System specification version", only available on MMC card
  // field: SPEC_VERS (only on MMC)
  if (MMC_CARD & g_card_type[slot]) // TO BE ADDED
80005ff8:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80005ffc:	fe f9 02 04 	ld.w	r9,pc[516]
80006000:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006004:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006008:	5c 58       	castu.b	r8
8000600a:	c1 40       	breq	80006032 <sd_mmc_mci_get_csd+0x116>
  {
    if (CSD_SPEC_VER_4_0 == (MSB0(csd.csd[0]) & CSD_MSK_SPEC_VER))
8000600c:	ee c8 00 20 	sub	r8,r7,32
80006010:	11 88       	ld.ub	r8,r8[0x0]
80006012:	e2 18 00 3c 	andl	r8,0x3c,COH
80006016:	59 08       	cp.w	r8,16
80006018:	c0 d1       	brne	80006032 <sd_mmc_mci_get_csd+0x116>
    {
      g_card_type[slot] |= MMC_CARD_V4;
8000601a:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000601e:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006022:	4f 8a       	lddpc	r10,80006200 <sd_mmc_mci_get_csd+0x2e4>
80006024:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006028:	a3 a8       	sbr	r8,0x2
8000602a:	5c 58       	castu.b	r8
8000602c:	4f 5a       	lddpc	r10,80006200 <sd_mmc_mci_get_csd+0x2e4>
8000602e:	f4 09 0b 08 	st.b	r10[r9],r8
    }
  }

  //-- Compute MMC/SD speed
  // field: TRAN_SPEED (CSD V1 & V2 are the same)
  g_card_freq[slot]  = mult_fact[csd.csd_v1.tranSpeed >> 3]; // Get Multiplier factor
80006032:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80006036:	ef 38 ff e3 	ld.ub	r8,r7[-29]
8000603a:	a3 98       	lsr	r8,0x3
8000603c:	5c 58       	castu.b	r8
8000603e:	ee 08 00 08 	add	r8,r7,r8
80006042:	f1 38 ff c8 	ld.ub	r8,r8[-56]
80006046:	4f 09       	lddpc	r9,80006204 <sd_mmc_mci_get_csd+0x2e8>
80006048:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  if (SD_CARD & g_card_type[slot])
8000604c:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006050:	4e c9       	lddpc	r9,80006200 <sd_mmc_mci_get_csd+0x2e4>
80006052:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006056:	e2 18 00 02 	andl	r8,0x2,COH
8000605a:	c2 00       	breq	8000609a <sd_mmc_mci_get_csd+0x17e>
  {
    // SD card don't have same frequency that MMC card
    if( 26 == g_card_freq[slot] )
8000605c:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006060:	4e 98       	lddpc	r8,80006204 <sd_mmc_mci_get_csd+0x2e8>
80006062:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80006066:	31 a8       	mov	r8,26
80006068:	f0 09 19 00 	cp.h	r9,r8
8000606c:	c0 81       	brne	8000607c <sd_mmc_mci_get_csd+0x160>
    {
      g_card_freq[slot] = 25;
8000606e:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80006072:	4e 59       	lddpc	r9,80006204 <sd_mmc_mci_get_csd+0x2e8>
80006074:	31 98       	mov	r8,25
80006076:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
8000607a:	c1 08       	rjmp	8000609a <sd_mmc_mci_get_csd+0x17e>
    }
    else if( 52 == g_card_freq[slot] )
8000607c:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006080:	4e 18       	lddpc	r8,80006204 <sd_mmc_mci_get_csd+0x2e8>
80006082:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80006086:	33 48       	mov	r8,52
80006088:	f0 09 19 00 	cp.h	r9,r8
8000608c:	c0 71       	brne	8000609a <sd_mmc_mci_get_csd+0x17e>
    {
      g_card_freq[slot] = 50;
8000608e:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80006092:	4d d9       	lddpc	r9,80006204 <sd_mmc_mci_get_csd+0x2e8>
80006094:	33 28       	mov	r8,50
80006096:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
    }
  }
  g_card_freq[slot] *= freq_unit[ csd.csd_v1.tranSpeed&0x07 ]; // Get transfer rate unit
8000609a:	ef 3a ff c4 	ld.ub	r10,r7[-60]
8000609e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800060a2:	4d 98       	lddpc	r8,80006204 <sd_mmc_mci_get_csd+0x2e8>
800060a4:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800060a8:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800060ac:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800060b0:	a1 78       	lsl	r8,0x1
800060b2:	ee 08 00 08 	add	r8,r7,r8
800060b6:	f1 08 ff d8 	ld.sh	r8,r8[-40]
800060ba:	f2 08 02 48 	mul	r8,r9,r8
800060be:	5c 88       	casts.h	r8
800060c0:	4d 19       	lddpc	r9,80006204 <sd_mmc_mci_get_csd+0x2e8>
800060c2:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

  //-- Compute card size in number of block
  // field: WRITE_BL_LEN, READ_BL_LEN, C_SIZE (CSD V1 & V2 are not the same)
  if (SD_CARD_HC & g_card_type[slot])
800060c6:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800060ca:	4c e9       	lddpc	r9,80006200 <sd_mmc_mci_get_csd+0x2e4>
800060cc:	f2 08 07 08 	ld.ub	r8,r9[r8]
800060d0:	e2 18 00 10 	andl	r8,0x10,COH
800060d4:	c2 10       	breq	80006116 <sd_mmc_mci_get_csd+0x1fa>
  {
    g_card_size[slot] = (csd.csd_v2.deviceSizeH<<16)+(csd.csd_v2.deviceSizeL&0xFFff);
800060d6:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800060da:	ee f8 ff e4 	ld.w	r8,r7[-28]
800060de:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800060e2:	5c 58       	castu.b	r8
800060e4:	f0 0a 15 10 	lsl	r10,r8,0x10
800060e8:	ef 08 ff e8 	ld.sh	r8,r7[-24]
800060ec:	5c 78       	castu.h	r8
800060ee:	f4 08 00 08 	add	r8,r10,r8
800060f2:	10 9a       	mov	r10,r8
800060f4:	4c 58       	lddpc	r8,80006208 <sd_mmc_mci_get_csd+0x2ec>
800060f6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

    // memory capacity = (C_SIZE+1) * 1K sector
    g_card_size[slot] = (g_card_size[slot] + 1) << 10;  // unit 512B
800060fa:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800060fe:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80006102:	4c 28       	lddpc	r8,80006208 <sd_mmc_mci_get_csd+0x2ec>
80006104:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80006108:	2f f8       	sub	r8,-1
8000610a:	f0 0a 15 0a 	lsl	r10,r8,0xa
8000610e:	4b f8       	lddpc	r8,80006208 <sd_mmc_mci_get_csd+0x2ec>
80006110:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80006114:	c5 e8       	rjmp	800061d0 <sd_mmc_mci_get_csd+0x2b4>
  }
  else
  {
    // Check block size
    tmp = csd.csd_v1.writeBlLen; // WRITE_BL_LEN
80006116:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000611a:	f1 d8 c2 c4 	bfextu	r8,r8,0x16,0x4
8000611e:	5c 58       	castu.b	r8
80006120:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
80006124:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006128:	30 88       	mov	r8,8
8000612a:	f0 09 18 00 	cp.b	r9,r8
8000612e:	e0 8b 00 04 	brhi	80006136 <sd_mmc_mci_get_csd+0x21a>
      return false;  // block size < 512B not supported by firmware
80006132:	30 08       	mov	r8,0
80006134:	c4 f8       	rjmp	800061d2 <sd_mmc_mci_get_csd+0x2b6>

    tmp = csd.csd_v1.readBlLen; // READ_BL_LEN
80006136:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000613a:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
8000613e:	5c 58       	castu.b	r8
80006140:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
80006144:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006148:	30 88       	mov	r8,8
8000614a:	f0 09 18 00 	cp.b	r9,r8
8000614e:	e0 8b 00 04 	brhi	80006156 <sd_mmc_mci_get_csd+0x23a>
      return false;  // block size < 512B not supported by firmware
80006152:	30 08       	mov	r8,0
80006154:	c3 f8       	rjmp	800061d2 <sd_mmc_mci_get_csd+0x2b6>

    //// Compute Memory Capacity
    // compute MULT
    mult = 1 << (csd.csd_v1.cSizeMult + 2);
80006156:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000615a:	f1 d8 c1 e3 	bfextu	r8,r8,0xf,0x3
8000615e:	5c 58       	castu.b	r8
80006160:	2f e8       	sub	r8,-2
80006162:	30 19       	mov	r9,1
80006164:	f2 08 09 48 	lsl	r8,r9,r8
80006168:	ef 48 ff f4 	st.w	r7[-12],r8
    max_Read_DataBlock_Length = 1<<csd.csd_v1.readBlLen;
8000616c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006170:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
80006174:	5c 58       	castu.b	r8
80006176:	30 19       	mov	r9,1
80006178:	f2 08 09 48 	lsl	r8,r9,r8
8000617c:	ef 48 ff f0 	st.w	r7[-16],r8
    // compute MSB of C_SIZE
    blocknr = csd.csd_v1.deviceSizeH << 2;
80006180:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006184:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80006188:	5c 88       	casts.h	r8
8000618a:	5c 78       	castu.h	r8
8000618c:	a3 68       	lsl	r8,0x2
8000618e:	ef 48 ff f8 	st.w	r7[-8],r8
    // compute MULT * (LSB of C-SIZE + MSB already computed + 1) = BLOCKNR
    blocknr = mult * ( blocknr + csd.csd_v1.deviceSizeL + 1 );
80006192:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006196:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
8000619a:	5c 58       	castu.b	r8
8000619c:	10 99       	mov	r9,r8
8000619e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061a2:	f2 08 00 08 	add	r8,r9,r8
800061a6:	f0 c9 ff ff 	sub	r9,r8,-1
800061aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061ae:	f2 08 02 48 	mul	r8,r9,r8
800061b2:	ef 48 ff f8 	st.w	r7[-8],r8
    g_card_size[slot] = ((max_Read_DataBlock_Length * blocknr)/512);
800061b6:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800061ba:	ee fa ff f0 	ld.w	r10,r7[-16]
800061be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061c2:	f4 08 02 48 	mul	r8,r10,r8
800061c6:	f0 0a 16 09 	lsr	r10,r8,0x9
800061ca:	49 08       	lddpc	r8,80006208 <sd_mmc_mci_get_csd+0x2ec>
800061cc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  }

  return true;
800061d0:	30 18       	mov	r8,1
}
800061d2:	10 9c       	mov	r12,r8
800061d4:	2f 1d       	sub	sp,-60
800061d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800061da:	00 00       	add	r0,r0
800061dc:	80 00       	ld.sh	r0,r0[0x0]
800061de:	ec bc       	*unknown*
800061e0:	80 00       	ld.sh	r0,r0[0x0]
800061e2:	e3 4a 80 00 	st.w	r1[-32768],r10
800061e6:	ec c4 00 00 	sub	r4,r6,0
800061ea:	0b ac       	ld.ub	r12,r5[0x2]
800061ec:	00 00       	add	r0,r0
800061ee:	01 34       	ld.ub	r4,r0++
800061f0:	80 00       	ld.sh	r0,r0[0x0]
800061f2:	90 88       	ld.uh	r8,r8[0x0]
800061f4:	00 00       	add	r0,r0
800061f6:	09 9c       	ld.ub	r12,r4[0x1]
800061f8:	80 00       	ld.sh	r0,r0[0x0]
800061fa:	8e f0       	ld.uh	r0,r7[0xe]
800061fc:	80 00       	ld.sh	r0,r0[0x0]
800061fe:	90 28       	ld.sh	r8,r8[0x4]
80006200:	00 00       	add	r0,r0
80006202:	0d b4       	ld.ub	r4,r6[0x3]
80006204:	00 00       	add	r0,r0
80006206:	0b ae       	ld.ub	lr,r5[0x2]
80006208:	00 00       	add	r0,r0
8000620a:	09 a4       	ld.ub	r4,r4[0x2]

8000620c <sd_mmc_get_ext_csd>:

static bool  sd_mmc_get_ext_csd( uint8_t slot )
{
8000620c:	eb cd 40 80 	pushm	r7,lr
80006210:	1a 97       	mov	r7,sp
80006212:	20 ad       	sub	sp,40
80006214:	18 98       	mov	r8,r12
80006216:	ef 68 ff d8 	st.b	r7[-40],r8
  uint8_t  i;
  uint32_t val;

  if (slot > MCI_LAST_SLOTS)
8000621a:	ef 39 ff d8 	ld.ub	r9,r7[-40]
8000621e:	30 18       	mov	r8,1
80006220:	f0 09 18 00 	cp.b	r9,r8
80006224:	e0 88 00 04 	brls	8000622c <sd_mmc_get_ext_csd+0x20>
    return false;
80006228:	30 08       	mov	r8,0
8000622a:	cb e8       	rjmp	800063a6 <sd_mmc_get_ext_csd+0x19a>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000622c:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80006230:	4e 09       	lddpc	r9,800063b0 <sd_mmc_get_ext_csd+0x1a4>
80006232:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006236:	10 9a       	mov	r10,r8
80006238:	ef 39 ff d8 	ld.ub	r9,r7[-40]
8000623c:	4d e8       	lddpc	r8,800063b4 <sd_mmc_get_ext_csd+0x1a8>
8000623e:	70 08       	ld.w	r8,r8[0x0]
80006240:	12 9b       	mov	r11,r9
80006242:	10 9c       	mov	r12,r8
80006244:	f0 1f 00 5d 	mcall	800063b8 <sd_mmc_get_ext_csd+0x1ac>

  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE); // Ext CSD = 512B size
80006248:	4d b8       	lddpc	r8,800063b4 <sd_mmc_get_ext_csd+0x1a8>
8000624a:	70 08       	ld.w	r8,r8[0x0]
8000624c:	e0 6b 02 00 	mov	r11,512
80006250:	10 9c       	mov	r12,r8
80006252:	f0 1f 00 5b 	mcall	800063bc <sd_mmc_get_ext_csd+0x1b0>
  mci_set_block_count(mci, 1);
80006256:	4d 88       	lddpc	r8,800063b4 <sd_mmc_get_ext_csd+0x1a8>
80006258:	70 08       	ld.w	r8,r8[0x0]
8000625a:	30 1b       	mov	r11,1
8000625c:	10 9c       	mov	r12,r8
8000625e:	f0 1f 00 59 	mcall	800063c0 <sd_mmc_get_ext_csd+0x1b4>

  //** (CMD8)
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
80006262:	4d 58       	lddpc	r8,800063b4 <sd_mmc_get_ext_csd+0x1a8>
80006264:	70 08       	ld.w	r8,r8[0x0]
80006266:	30 0a       	mov	r10,0
80006268:	e4 7b 10 48 	mov	r11,331848
8000626c:	10 9c       	mov	r12,r8
8000626e:	f0 1f 00 56 	mcall	800063c4 <sd_mmc_get_ext_csd+0x1b8>
80006272:	18 98       	mov	r8,r12
80006274:	58 08       	cp.w	r8,0
80006276:	c0 30       	breq	8000627c <sd_mmc_get_ext_csd+0x70>
    return false;
80006278:	30 08       	mov	r8,0
8000627a:	c9 68       	rjmp	800063a6 <sd_mmc_get_ext_csd+0x19a>

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
8000627c:	34 08       	mov	r8,64
8000627e:	ef 68 ff e3 	st.b	r7[-29],r8
80006282:	c8 a8       	rjmp	80006396 <sd_mmc_get_ext_csd+0x18a>
  {
    while(!(mci_rx_ready(mci)));
80006284:	4c c8       	lddpc	r8,800063b4 <sd_mmc_get_ext_csd+0x1a8>
80006286:	70 08       	ld.w	r8,r8[0x0]
80006288:	ef 48 ff e4 	st.w	r7[-28],r8
8000628c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006290:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006294:	4c d8       	lddpc	r8,800063c8 <sd_mmc_get_ext_csd+0x1bc>
80006296:	70 08       	ld.w	r8,r8[0x0]
80006298:	10 99       	mov	r9,r8
8000629a:	e6 19 01 e0 	andh	r9,0x1e0,COH
8000629e:	ee f8 ff e8 	ld.w	r8,r7[-24]
800062a2:	71 08       	ld.w	r8,r8[0x40]
800062a4:	f3 e8 10 08 	or	r8,r9,r8
800062a8:	10 99       	mov	r9,r8
800062aa:	4c 88       	lddpc	r8,800063c8 <sd_mmc_get_ext_csd+0x1bc>
800062ac:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800062ae:	4c 78       	lddpc	r8,800063c8 <sd_mmc_get_ext_csd+0x1bc>
800062b0:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
800062b2:	e2 18 00 02 	andl	r8,0x2,COH
800062b6:	5f 18       	srne	r8
800062b8:	58 08       	cp.w	r8,0
800062ba:	ce 50       	breq	80006284 <sd_mmc_get_ext_csd+0x78>
    mci_rd_data(mci);
800062bc:	4b e8       	lddpc	r8,800063b4 <sd_mmc_get_ext_csd+0x1a8>
800062be:	70 08       	ld.w	r8,r8[0x0]
800062c0:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
800062c4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800062c8:	70 c8       	ld.w	r8,r8[0x30]
    while(!(mci_rx_ready(mci)));
800062ca:	4b b8       	lddpc	r8,800063b4 <sd_mmc_get_ext_csd+0x1a8>
800062cc:	70 08       	ld.w	r8,r8[0x0]
800062ce:	ef 48 ff f0 	st.w	r7[-16],r8
800062d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800062d6:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800062da:	4b c8       	lddpc	r8,800063c8 <sd_mmc_get_ext_csd+0x1bc>
800062dc:	70 08       	ld.w	r8,r8[0x0]
800062de:	10 99       	mov	r9,r8
800062e0:	e6 19 01 e0 	andh	r9,0x1e0,COH
800062e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800062e8:	71 08       	ld.w	r8,r8[0x40]
800062ea:	f3 e8 10 08 	or	r8,r9,r8
800062ee:	10 99       	mov	r9,r8
800062f0:	4b 68       	lddpc	r8,800063c8 <sd_mmc_get_ext_csd+0x1bc>
800062f2:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800062f4:	4b 58       	lddpc	r8,800063c8 <sd_mmc_get_ext_csd+0x1bc>
800062f6:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
800062f8:	e2 18 00 02 	andl	r8,0x2,COH
800062fc:	5f 18       	srne	r8
800062fe:	58 08       	cp.w	r8,0
80006300:	ce 50       	breq	800062ca <sd_mmc_get_ext_csd+0xbe>
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
80006302:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80006306:	32 68       	mov	r8,38
80006308:	f0 09 18 00 	cp.b	r9,r8
8000630c:	c1 c1       	brne	80006344 <sd_mmc_get_ext_csd+0x138>
8000630e:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80006312:	4a f9       	lddpc	r9,800063cc <sd_mmc_get_ext_csd+0x1c0>
80006314:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006318:	e2 18 00 20 	andl	r8,0x20,COH
8000631c:	c1 40       	breq	80006344 <sd_mmc_get_ext_csd+0x138>
    {
      // If MMC HC then read Sector Count. Byte 212 is LSB, Byte 215 is MSB.
      val = mci_rd_data(mci);
8000631e:	4a 68       	lddpc	r8,800063b4 <sd_mmc_get_ext_csd+0x1a8>
80006320:	70 08       	ld.w	r8,r8[0x0]
80006322:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006326:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000632a:	70 c8       	ld.w	r8,r8[0x30]
8000632c:	ef 48 ff dc 	st.w	r7[-36],r8
      g_card_size[slot] = swap32(val);
80006330:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006334:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006338:	5c b8       	swap.b	r8
8000633a:	10 9a       	mov	r10,r8
8000633c:	4a 58       	lddpc	r8,800063d0 <sd_mmc_get_ext_csd+0x1c4>
8000633e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  for (i = (512L/8); i!=0; i--)
  {
    while(!(mci_rx_ready(mci)));
    mci_rd_data(mci);
    while(!(mci_rx_ready(mci)));
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
80006342:	c2 58       	rjmp	8000638c <sd_mmc_get_ext_csd+0x180>
      val = mci_rd_data(mci);
      g_card_size[slot] = swap32(val);
    }
    else
    {
      val = mci_rd_data(mci);
80006344:	49 c8       	lddpc	r8,800063b4 <sd_mmc_get_ext_csd+0x1a8>
80006346:	70 08       	ld.w	r8,r8[0x0]
80006348:	ef 48 ff fc 	st.w	r7[-4],r8
8000634c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006350:	70 c8       	ld.w	r8,r8[0x30]
80006352:	ef 48 ff dc 	st.w	r7[-36],r8
      if( (64-24) == i )
80006356:	ef 39 ff e3 	ld.ub	r9,r7[-29]
8000635a:	32 88       	mov	r8,40
8000635c:	f0 09 18 00 	cp.b	r9,r8
80006360:	c1 61       	brne	8000638c <sd_mmc_get_ext_csd+0x180>
      {  // Read byte at offset 196
        if( MSB0(val) & 0x02 )
80006362:	ee c8 00 24 	sub	r8,r7,36
80006366:	11 88       	ld.ub	r8,r8[0x0]
80006368:	e2 18 00 02 	andl	r8,0x2,COH
8000636c:	c0 90       	breq	8000637e <sd_mmc_get_ext_csd+0x172>
          g_card_freq[slot] = 52*1000;
8000636e:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80006372:	49 99       	lddpc	r9,800063d4 <sd_mmc_get_ext_csd+0x1c8>
80006374:	fe 78 cb 20 	mov	r8,-13536
80006378:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
8000637c:	c0 88       	rjmp	8000638c <sd_mmc_get_ext_csd+0x180>
        else
          g_card_freq[slot] = 26*1000;
8000637e:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80006382:	49 59       	lddpc	r9,800063d4 <sd_mmc_get_ext_csd+0x1c8>
80006384:	e0 68 65 90 	mov	r8,26000
80006388:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
    return false;

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
8000638c:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80006390:	20 18       	sub	r8,1
80006392:	ef 68 ff e3 	st.b	r7[-29],r8
80006396:	ef 39 ff e3 	ld.ub	r9,r7[-29]
8000639a:	30 08       	mov	r8,0
8000639c:	f0 09 18 00 	cp.b	r9,r8
800063a0:	fe 91 ff 72 	brne	80006284 <sd_mmc_get_ext_csd+0x78>
          g_card_freq[slot] = 26*1000;
      }
    }
  }

   return true;
800063a4:	30 18       	mov	r8,1
}
800063a6:	10 9c       	mov	r12,r8
800063a8:	2f 6d       	sub	sp,-40
800063aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800063ae:	00 00       	add	r0,r0
800063b0:	00 00       	add	r0,r0
800063b2:	0b ac       	ld.ub	r12,r5[0x2]
800063b4:	00 00       	add	r0,r0
800063b6:	01 34       	ld.ub	r4,r0++
800063b8:	80 00       	ld.sh	r0,r0[0x0]
800063ba:	90 88       	ld.uh	r8,r8[0x0]
800063bc:	80 00       	ld.sh	r0,r0[0x0]
800063be:	8e 70       	ld.sh	r0,r7[0xe]
800063c0:	80 00       	ld.sh	r0,r0[0x0]
800063c2:	8e ba       	ld.uh	r10,r7[0x6]
800063c4:	80 00       	ld.sh	r0,r0[0x0]
800063c6:	8e f0       	ld.uh	r0,r7[0xe]
800063c8:	00 00       	add	r0,r0
800063ca:	08 24       	rsub	r4,r4
800063cc:	00 00       	add	r0,r0
800063ce:	0d b4       	ld.ub	r4,r6[0x3]
800063d0:	00 00       	add	r0,r0
800063d2:	09 a4       	ld.ub	r4,r4[0x2]
800063d4:	00 00       	add	r0,r0
800063d6:	0b ae       	ld.ub	lr,r5[0x2]

800063d8 <sd_mmc_set_block_len>:

static bool  sd_mmc_set_block_len(uint8_t slot, uint16_t length )
{
800063d8:	eb cd 40 80 	pushm	r7,lr
800063dc:	1a 97       	mov	r7,sp
800063de:	20 2d       	sub	sp,8
800063e0:	18 99       	mov	r9,r12
800063e2:	16 98       	mov	r8,r11
800063e4:	ef 69 ff fc 	st.b	r7[-4],r9
800063e8:	ef 58 ff f8 	st.h	r7[-8],r8
  if (slot > MCI_LAST_SLOTS)
800063ec:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800063f0:	30 18       	mov	r8,1
800063f2:	f0 09 18 00 	cp.b	r9,r8
800063f6:	e0 88 00 04 	brls	800063fe <sd_mmc_set_block_len+0x26>
    return false;
800063fa:	30 08       	mov	r8,0
800063fc:	c3 c8       	rjmp	80006474 <sd_mmc_set_block_len+0x9c>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
800063fe:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006402:	49 f9       	lddpc	r9,8000647c <sd_mmc_set_block_len+0xa4>
80006404:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006408:	10 9a       	mov	r10,r8
8000640a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000640e:	49 d8       	lddpc	r8,80006480 <sd_mmc_set_block_len+0xa8>
80006410:	70 08       	ld.w	r8,r8[0x0]
80006412:	12 9b       	mov	r11,r9
80006414:	10 9c       	mov	r12,r8
80006416:	f0 1f 00 1c 	mcall	80006484 <sd_mmc_set_block_len+0xac>

  if(mci_send_cmd(mci, SD_MMC_SET_BLOCKLEN_CMD, length)!=MCI_SUCCESS)
8000641a:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8000641e:	49 98       	lddpc	r8,80006480 <sd_mmc_set_block_len+0xa8>
80006420:	70 08       	ld.w	r8,r8[0x0]
80006422:	12 9a       	mov	r10,r9
80006424:	e0 6b 10 50 	mov	r11,4176
80006428:	10 9c       	mov	r12,r8
8000642a:	f0 1f 00 18 	mcall	80006488 <sd_mmc_set_block_len+0xb0>
8000642e:	18 98       	mov	r8,r12
80006430:	58 08       	cp.w	r8,0
80006432:	c0 30       	breq	80006438 <sd_mmc_set_block_len+0x60>
    return false;
80006434:	30 08       	mov	r8,0
80006436:	c1 f8       	rjmp	80006474 <sd_mmc_set_block_len+0x9c>

  // check response, card must be in TRAN state
  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
80006438:	49 28       	lddpc	r8,80006480 <sd_mmc_set_block_len+0xa8>
8000643a:	70 08       	ld.w	r8,r8[0x0]
8000643c:	10 9c       	mov	r12,r8
8000643e:	f0 1f 00 14 	mcall	8000648c <sd_mmc_set_block_len+0xb4>
80006442:	18 98       	mov	r8,r12
80006444:	e4 18 e0 02 	andh	r8,0xe002
80006448:	e0 18 0e 00 	andl	r8,0xe00
8000644c:	e0 48 08 00 	cp.w	r8,2048
80006450:	c0 30       	breq	80006456 <sd_mmc_set_block_len+0x7e>
    return false;
80006452:	30 08       	mov	r8,0
80006454:	c1 08       	rjmp	80006474 <sd_mmc_set_block_len+0x9c>

  mci_set_block_size(mci, length);
80006456:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8000645a:	48 a8       	lddpc	r8,80006480 <sd_mmc_set_block_len+0xa8>
8000645c:	70 08       	ld.w	r8,r8[0x0]
8000645e:	12 9b       	mov	r11,r9
80006460:	10 9c       	mov	r12,r8
80006462:	f0 1f 00 0c 	mcall	80006490 <sd_mmc_set_block_len+0xb8>
  mci_set_block_count(mci, 1);
80006466:	48 78       	lddpc	r8,80006480 <sd_mmc_set_block_len+0xa8>
80006468:	70 08       	ld.w	r8,r8[0x0]
8000646a:	30 1b       	mov	r11,1
8000646c:	10 9c       	mov	r12,r8
8000646e:	f0 1f 00 0a 	mcall	80006494 <sd_mmc_set_block_len+0xbc>
  return true;
80006472:	30 18       	mov	r8,1
}
80006474:	10 9c       	mov	r12,r8
80006476:	2f ed       	sub	sp,-8
80006478:	e3 cd 80 80 	ldm	sp++,r7,pc
8000647c:	00 00       	add	r0,r0
8000647e:	0b ac       	ld.ub	r12,r5[0x2]
80006480:	00 00       	add	r0,r0
80006482:	01 34       	ld.ub	r4,r0++
80006484:	80 00       	ld.sh	r0,r0[0x0]
80006486:	90 88       	ld.uh	r8,r8[0x0]
80006488:	80 00       	ld.sh	r0,r0[0x0]
8000648a:	8e f0       	ld.uh	r0,r7[0xe]
8000648c:	80 00       	ld.sh	r0,r0[0x0]
8000648e:	90 28       	ld.sh	r8,r8[0x4]
80006490:	80 00       	ld.sh	r0,r0[0x0]
80006492:	8e 70       	ld.sh	r0,r7[0xe]
80006494:	80 00       	ld.sh	r0,r0[0x0]
80006496:	8e ba       	ld.uh	r10,r7[0x6]

80006498 <sd_mmc_mci_init>:

bool sd_mmc_mci_init(unsigned char card_slot, long pbb_hz, long cpu_hz)
{
80006498:	eb cd 40 80 	pushm	r7,lr
8000649c:	1a 97       	mov	r7,sp
8000649e:	20 5d       	sub	sp,20
800064a0:	18 98       	mov	r8,r12
800064a2:	ef 4b ff f0 	st.w	r7[-16],r11
800064a6:	ef 4a ff ec 	st.w	r7[-20],r10
800064aa:	ef 68 ff f4 	st.b	r7[-12],r8
    unsigned long                 scfg;
    avr32_hmatrix_scfg_t          SCFG;
  } u_avr32_hmatrix_scfg;

  // For the USBB DMA HMATRIX master, use infinite length burst.
  u_avr32_hmatrix_mcfg.mcfg = AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
800064ae:	fe 68 10 00 	mov	r8,-126976
800064b2:	70 68       	ld.w	r8,r8[0x18]
800064b4:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_hmatrix_mcfg.MCFG.ulbt = AVR32_HMATRIX_ULBT_INFINITE;
800064b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800064bc:	30 09       	mov	r9,0
800064be:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800064c2:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] = u_avr32_hmatrix_mcfg.mcfg;
800064c6:	fe 68 10 00 	mov	r8,-126976
800064ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
800064ce:	91 69       	st.w	r8[0x18],r9

  // For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
  u_avr32_hmatrix_scfg.scfg = AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
800064d0:	fe 68 10 00 	mov	r8,-126976
800064d4:	71 58       	ld.w	r8,r8[0x54]
800064d6:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.fixed_defmstr = AVR32_HMATRIX_MASTER_USBB_DMA;
800064da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800064de:	30 69       	mov	r9,6
800064e0:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
800064e4:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
800064e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800064ec:	30 29       	mov	r9,2
800064ee:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
800064f2:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] = u_avr32_hmatrix_scfg.scfg;
800064f6:	fe 68 10 00 	mov	r8,-126976
800064fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800064fe:	f1 49 00 54 	st.w	r8[84],r9

  g_pbb_hz = pbb_hz;
80006502:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006506:	49 08       	lddpc	r8,80006544 <sd_mmc_mci_init+0xac>
80006508:	91 09       	st.w	r8[0x0],r9
  g_cpu_hz = cpu_hz;
8000650a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000650e:	48 f8       	lddpc	r8,80006548 <sd_mmc_mci_init+0xb0>
80006510:	91 09       	st.w	r8[0x0],r9

  // Init MCI controller
  if (mci_init(mci, card_slot, pbb_hz)!=MCI_SUCCESS)
80006512:	ee fa ff f0 	ld.w	r10,r7[-16]
80006516:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000651a:	48 d8       	lddpc	r8,8000654c <sd_mmc_mci_init+0xb4>
8000651c:	70 08       	ld.w	r8,r8[0x0]
8000651e:	12 9b       	mov	r11,r9
80006520:	10 9c       	mov	r12,r8
80006522:	f0 1f 00 0c 	mcall	80006550 <sd_mmc_mci_init+0xb8>
80006526:	18 98       	mov	r8,r12
80006528:	58 08       	cp.w	r8,0
8000652a:	c0 30       	breq	80006530 <sd_mmc_mci_init+0x98>
    return false;
8000652c:	30 08       	mov	r8,0
8000652e:	c0 78       	rjmp	8000653c <sd_mmc_mci_init+0xa4>

  // Default card initialization. This can be removed since the card init will
  // automatically be done when needed.
  sd_mmc_mci_card_init(card_slot);
80006530:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006534:	10 9c       	mov	r12,r8
80006536:	f0 1f 00 08 	mcall	80006554 <sd_mmc_mci_init+0xbc>
  return true;
8000653a:	30 18       	mov	r8,1
}
8000653c:	10 9c       	mov	r12,r8
8000653e:	2f bd       	sub	sp,-20
80006540:	e3 cd 80 80 	ldm	sp++,r7,pc
80006544:	00 00       	add	r0,r0
80006546:	06 90       	mov	r0,r3
80006548:	00 00       	add	r0,r0
8000654a:	06 94       	mov	r4,r3
8000654c:	00 00       	add	r0,r0
8000654e:	01 34       	ld.ub	r4,r0++
80006550:	80 00       	ld.sh	r0,r0[0x0]
80006552:	8d bc       	st.w	r6[0x2c],r12
80006554:	80 00       	ld.sh	r0,r0[0x0]
80006556:	65 58       	ld.w	r8,r2[0x54]

80006558 <sd_mmc_mci_card_init>:

bool sd_mmc_mci_card_init(unsigned char slot)
{
80006558:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
8000655c:	1a 97       	mov	r7,sp
8000655e:	21 7d       	sub	sp,92
80006560:	18 98       	mov	r8,r12
80006562:	ef 68 ff a4 	st.b	r7[-92],r8
  uint32_t response;

  if (true == sd_mmc_mci_init_done[slot])
80006566:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000656a:	fe f9 08 7a 	ld.w	r9,pc[2170]
8000656e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006572:	58 08       	cp.w	r8,0
80006574:	c0 40       	breq	8000657c <sd_mmc_mci_card_init+0x24>
    return true;
80006576:	30 18       	mov	r8,1
80006578:	e0 8f 04 31 	bral	80006dda <sd_mmc_mci_card_init+0x882>

  // Default card is not known.
  g_card_type[slot] = UNKNOWN_CARD;
8000657c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006580:	fe fa 08 68 	ld.w	r10,pc[2152]
80006584:	30 08       	mov	r8,0
80006586:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default bus size is 1 bit.
  g_card_bus_width[slot] = MCI_BUS_SIZE_1_BIT;
8000658a:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000658e:	fe fa 08 5e 	ld.w	r10,pc[2142]
80006592:	30 08       	mov	r8,0
80006594:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default card speed and disable High Speed mode.
  mci_init(mci, slot, g_pbb_hz);
80006598:	fe f8 08 58 	ld.w	r8,pc[2136]
8000659c:	70 0a       	ld.w	r10,r8[0x0]
8000659e:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800065a2:	fe f8 08 52 	ld.w	r8,pc[2130]
800065a6:	70 08       	ld.w	r8,r8[0x0]
800065a8:	12 9b       	mov	r11,r9
800065aa:	10 9c       	mov	r12,r8
800065ac:	f0 1f 02 13 	mcall	80006df8 <sd_mmc_mci_card_init+0x8a0>

  // Wait for 1ms, then wait for 74 more clock cycles (see MMC norms)
  if (mci_send_cmd(mci, SD_MMC_INIT_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800065b0:	fe f8 08 44 	ld.w	r8,pc[2116]
800065b4:	70 08       	ld.w	r8,r8[0x0]
800065b6:	3f fa       	mov	r10,-1
800065b8:	e0 6b 01 00 	mov	r11,256
800065bc:	10 9c       	mov	r12,r8
800065be:	f0 1f 02 10 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
800065c2:	18 98       	mov	r8,r12
800065c4:	58 08       	cp.w	r8,0
800065c6:	c0 40       	breq	800065ce <sd_mmc_mci_card_init+0x76>
    return false;
800065c8:	30 08       	mov	r8,0
800065ca:	e0 8f 04 08 	bral	80006dda <sd_mmc_mci_card_init+0x882>

  //-- (CMD0)
  // Set card in idle state
  if (mci_send_cmd(mci, SD_MMC_GO_IDLE_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800065ce:	fe f8 08 26 	ld.w	r8,pc[2086]
800065d2:	70 08       	ld.w	r8,r8[0x0]
800065d4:	3f fa       	mov	r10,-1
800065d6:	30 0b       	mov	r11,0
800065d8:	10 9c       	mov	r12,r8
800065da:	f0 1f 02 09 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
800065de:	18 98       	mov	r8,r12
800065e0:	58 08       	cp.w	r8,0
800065e2:	c0 50       	breq	800065ec <sd_mmc_mci_card_init+0x94>
    return false;
800065e4:	30 08       	mov	r8,0
800065e6:	e0 8f 03 fa 	bral	80006dda <sd_mmc_mci_card_init+0x882>
    response = mci_read_response(mci);
    if( !(response & OCR_MSK_BUSY) )
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
800065ea:	d7 03       	nop
    return false;

sd_mmc_init_step1:
  // (CMD1)
  // To send its Operating Conditions Register contents command only supported by MMC card
  if(mci_send_cmd(mci, SD_MMC_MMC_SEND_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_ALL|OCR_MSK_HC)==MCI_SUCCESS)
800065ec:	fe f8 08 08 	ld.w	r8,pc[2056]
800065f0:	70 08       	ld.w	r8,r8[0x0]
800065f2:	e0 6a 80 00 	mov	r10,32768
800065f6:	ea 1a c0 ff 	orh	r10,0xc0ff
800065fa:	e0 6b 08 41 	mov	r11,2113
800065fe:	10 9c       	mov	r12,r8
80006600:	f0 1f 01 ff 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
80006604:	18 98       	mov	r8,r12
80006606:	58 08       	cp.w	r8,0
80006608:	c2 a1       	brne	8000665c <sd_mmc_mci_card_init+0x104>
  {
    // MMC cards always respond to MMC_SEND_OP_COND
    g_card_type[slot] = MMC_CARD;
8000660a:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000660e:	fe fa 07 da 	ld.w	r10,pc[2010]
80006612:	30 18       	mov	r8,1
80006614:	f4 09 0b 08 	st.b	r10[r9],r8
    response = mci_read_response(mci);
80006618:	fe f8 07 dc 	ld.w	r8,pc[2012]
8000661c:	70 08       	ld.w	r8,r8[0x0]
8000661e:	10 9c       	mov	r12,r8
80006620:	f0 1f 01 f8 	mcall	80006e00 <sd_mmc_mci_card_init+0x8a8>
80006624:	18 98       	mov	r8,r12
80006626:	ef 48 ff c0 	st.w	r7[-64],r8
    if( !(response & OCR_MSK_BUSY) )
8000662a:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000662e:	58 08       	cp.w	r8,0
80006630:	cd d4       	brge	800065ea <sd_mmc_mci_card_init+0x92>
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
80006632:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006636:	e6 18 40 00 	andh	r8,0x4000,COH
8000663a:	e0 80 00 97 	breq	80006768 <sd_mmc_mci_card_init+0x210>
    {
      g_card_type[slot] |= MMC_CARD_HC;
8000663e:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006642:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006646:	fe fa 07 a2 	ld.w	r10,pc[1954]
8000664a:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000664e:	a5 b8       	sbr	r8,0x5
80006650:	5c 58       	castu.b	r8
80006652:	fe fa 07 96 	ld.w	r10,pc[1942]
80006656:	f4 09 0b 08 	st.b	r10[r9],r8
8000665a:	c8 88       	rjmp	8000676a <sd_mmc_mci_card_init+0x212>
    }
  }
  else
  {
    // SD cards do not respond to MMC_SEND_OP_COND
    g_card_type[slot] = SD_CARD;
8000665c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006660:	fe fa 07 88 	ld.w	r10,pc[1928]
80006664:	30 28       	mov	r8,2
80006666:	f4 09 0b 08 	st.b	r10[r9],r8

    //-- (CMD8)
    // enables to expand new functionality to some existing commands supported only by SD HC card
    if (mci_send_cmd(mci, SD_MMC_SD_SEND_IF_COND_CMD, 0x000001AA)==MCI_SUCCESS)
8000666a:	fe f8 07 8a 	ld.w	r8,pc[1930]
8000666e:	70 08       	ld.w	r8,r8[0x0]
80006670:	e0 6a 01 aa 	mov	r10,426
80006674:	e0 6b 10 48 	mov	r11,4168
80006678:	10 9c       	mov	r12,r8
8000667a:	f0 1f 01 e1 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
8000667e:	18 98       	mov	r8,r12
80006680:	58 08       	cp.w	r8,0
80006682:	c1 b1       	brne	800066b8 <sd_mmc_mci_card_init+0x160>
    {
      // It is a SD HC
      if( 0x000001AA == mci_read_response(mci))
80006684:	fe f8 07 70 	ld.w	r8,pc[1904]
80006688:	70 08       	ld.w	r8,r8[0x0]
8000668a:	10 9c       	mov	r12,r8
8000668c:	f0 1f 01 dd 	mcall	80006e00 <sd_mmc_mci_card_init+0x8a8>
80006690:	18 98       	mov	r8,r12
80006692:	e0 48 01 aa 	cp.w	r8,426
80006696:	c1 11       	brne	800066b8 <sd_mmc_mci_card_init+0x160>
      {
        g_card_type[slot] |= SD_CARD_V2;
80006698:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000669c:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800066a0:	fe fa 07 48 	ld.w	r10,pc[1864]
800066a4:	f4 08 07 08 	ld.ub	r8,r10[r8]
800066a8:	a3 b8       	sbr	r8,0x3
800066aa:	5c 58       	castu.b	r8
800066ac:	fe fa 07 3c 	ld.w	r10,pc[1852]
800066b0:	f4 09 0b 08 	st.b	r10[r9],r8
800066b4:	c0 28       	rjmp	800066b8 <sd_mmc_mci_card_init+0x160>
    response = mci_read_response(mci);

    if( !(response & OCR_MSK_BUSY) )
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
800066b6:	d7 03       	nop

sd_mmc_init_step2:
    //-- (CMD55)
    // Indicates to the card that the next command is an application specific command rather than a standard command
    // CMD55 shall always precede ACMD41
    if (mci_send_cmd(mci, SD_MMC_APP_CMD, 0)!=MCI_SUCCESS)
800066b8:	fe f8 07 3c 	ld.w	r8,pc[1852]
800066bc:	70 08       	ld.w	r8,r8[0x0]
800066be:	30 0a       	mov	r10,0
800066c0:	e0 6b 10 77 	mov	r11,4215
800066c4:	10 9c       	mov	r12,r8
800066c6:	f0 1f 01 ce 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
800066ca:	18 98       	mov	r8,r12
800066cc:	58 08       	cp.w	r8,0
800066ce:	c0 40       	breq	800066d6 <sd_mmc_mci_card_init+0x17e>
      return false;
800066d0:	30 08       	mov	r8,0
800066d2:	e0 8f 03 84 	bral	80006dda <sd_mmc_mci_card_init+0x882>

    //-- (ACMD41)
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
800066d6:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800066da:	fe f9 07 0e 	ld.w	r9,pc[1806]
800066de:	f2 08 07 08 	ld.ub	r8,r9[r8]
800066e2:	e2 18 00 08 	andl	r8,0x8,COH
800066e6:	c1 00       	breq	80006706 <sd_mmc_mci_card_init+0x1ae>
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
800066e8:	fe f8 07 0c 	ld.w	r8,pc[1804]
800066ec:	70 08       	ld.w	r8,r8[0x0]
800066ee:	fc 1a c0 10 	movh	r10,0xc010
800066f2:	36 9b       	mov	r11,105
800066f4:	10 9c       	mov	r12,r8
800066f6:	f0 1f 01 c2 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
800066fa:	18 98       	mov	r8,r12
800066fc:	58 08       	cp.w	r8,0
800066fe:	c1 30       	breq	80006724 <sd_mmc_mci_card_init+0x1cc>
        return false;
80006700:	30 08       	mov	r8,0
80006702:	e0 8f 03 6c 	bral	80006dda <sd_mmc_mci_card_init+0x882>
    }
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
80006706:	fe f8 06 ee 	ld.w	r8,pc[1774]
8000670a:	70 08       	ld.w	r8,r8[0x0]
8000670c:	fc 1a 80 10 	movh	r10,0x8010
80006710:	36 9b       	mov	r11,105
80006712:	10 9c       	mov	r12,r8
80006714:	f0 1f 01 ba 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
80006718:	18 98       	mov	r8,r12
8000671a:	58 08       	cp.w	r8,0
8000671c:	c0 50       	breq	80006726 <sd_mmc_mci_card_init+0x1ce>
        return false;
8000671e:	30 08       	mov	r8,0
80006720:	e0 8f 03 5d 	bral	80006dda <sd_mmc_mci_card_init+0x882>
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
        return false;
80006724:	d7 03       	nop
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
        return false;
    }
    response = mci_read_response(mci);
80006726:	fe f8 06 ce 	ld.w	r8,pc[1742]
8000672a:	70 08       	ld.w	r8,r8[0x0]
8000672c:	10 9c       	mov	r12,r8
8000672e:	f0 1f 01 b5 	mcall	80006e00 <sd_mmc_mci_card_init+0x8a8>
80006732:	18 98       	mov	r8,r12
80006734:	ef 48 ff c0 	st.w	r7[-64],r8

    if( !(response & OCR_MSK_BUSY) )
80006738:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000673c:	58 08       	cp.w	r8,0
8000673e:	cb c4       	brge	800066b6 <sd_mmc_mci_card_init+0x15e>
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
    }
    // Card read then check HC type
    if (response & OCR_MSK_HC)
80006740:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006744:	e6 18 40 00 	andh	r8,0x4000,COH
80006748:	c1 10       	breq	8000676a <sd_mmc_mci_card_init+0x212>
    {
      g_card_type[slot] |= SD_CARD_HC;  // Card SD High Capacity
8000674a:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000674e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006752:	fe fa 06 96 	ld.w	r10,pc[1686]
80006756:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000675a:	a5 a8       	sbr	r8,0x4
8000675c:	5c 58       	castu.b	r8
8000675e:	fe fa 06 8a 	ld.w	r10,pc[1674]
80006762:	f4 09 0b 08 	st.b	r10[r9],r8
80006766:	c0 28       	rjmp	8000676a <sd_mmc_mci_card_init+0x212>
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
    {
      g_card_type[slot] |= MMC_CARD_HC;
80006768:	d7 03       	nop

  // Here card ready and type (MMC <V4, MMC V4, MMC HC, SD V1, SD V2 HC) detected

  //-- (CMD2)
  // Send CID
  if (mci_send_cmd(mci, SD_MMC_ALL_SEND_CID_CMD, 0)!=MCI_SUCCESS)
8000676a:	fe f8 06 8a 	ld.w	r8,pc[1674]
8000676e:	70 08       	ld.w	r8,r8[0x0]
80006770:	30 0a       	mov	r10,0
80006772:	e0 6b 00 82 	mov	r11,130
80006776:	10 9c       	mov	r12,r8
80006778:	f0 1f 01 a1 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
8000677c:	18 98       	mov	r8,r12
8000677e:	58 08       	cp.w	r8,0
80006780:	c0 40       	breq	80006788 <sd_mmc_mci_card_init+0x230>
    return false;
80006782:	30 08       	mov	r8,0
80006784:	e0 8f 03 2b 	bral	80006dda <sd_mmc_mci_card_init+0x882>

  //-- (CMD3)
  // Set relative address
  if(MMC_CARD & g_card_type[slot])
80006788:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000678c:	fe f9 06 5c 	ld.w	r9,pc[1628]
80006790:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006794:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006798:	5c 58       	castu.b	r8
8000679a:	c1 90       	breq	800067cc <sd_mmc_mci_card_init+0x274>
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
8000679c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800067a0:	fe f8 06 64 	ld.w	r8,pc[1636]
800067a4:	e0 7a ff ff 	mov	r10,131071
800067a8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
800067ac:	fe f8 06 48 	ld.w	r8,pc[1608]
800067b0:	70 08       	ld.w	r8,r8[0x0]
800067b2:	e0 7a ff ff 	mov	r10,131071
800067b6:	e0 6b 10 43 	mov	r11,4163
800067ba:	10 9c       	mov	r12,r8
800067bc:	f0 1f 01 90 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
800067c0:	18 98       	mov	r8,r12
800067c2:	58 08       	cp.w	r8,0
800067c4:	c1 30       	breq	800067ea <sd_mmc_mci_card_init+0x292>
      return false;
800067c6:	30 08       	mov	r8,0
800067c8:	e0 8f 03 09 	bral	80006dda <sd_mmc_mci_card_init+0x882>
  }
  else
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
800067cc:	fe f8 06 28 	ld.w	r8,pc[1576]
800067d0:	70 08       	ld.w	r8,r8[0x0]
800067d2:	30 0a       	mov	r10,0
800067d4:	e0 6b 10 43 	mov	r11,4163
800067d8:	10 9c       	mov	r12,r8
800067da:	f0 1f 01 89 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
800067de:	18 98       	mov	r8,r12
800067e0:	58 08       	cp.w	r8,0
800067e2:	c0 50       	breq	800067ec <sd_mmc_mci_card_init+0x294>
      return false;
800067e4:	30 08       	mov	r8,0
800067e6:	e0 8f 02 fa 	bral	80006dda <sd_mmc_mci_card_init+0x882>
  if(MMC_CARD & g_card_type[slot])
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
      return false;
800067ea:	d7 03       	nop
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
      return false;
  }
  if (SD_CARD & g_card_type[slot])
800067ec:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800067f0:	fe f9 05 f8 	ld.w	r9,pc[1528]
800067f4:	f2 08 07 08 	ld.ub	r8,r9[r8]
800067f8:	e2 18 00 02 	andl	r8,0x2,COH
800067fc:	c1 10       	breq	8000681e <sd_mmc_mci_card_init+0x2c6>
  {
    // For SD  card, you receive address of card
    g_card_rca[slot] = mci_read_response(mci) & RCA_MSK_ADR ;
800067fe:	ef 36 ff a4 	ld.ub	r6,r7[-92]
80006802:	fe f8 05 f2 	ld.w	r8,pc[1522]
80006806:	70 08       	ld.w	r8,r8[0x0]
80006808:	10 9c       	mov	r12,r8
8000680a:	f0 1f 01 7e 	mcall	80006e00 <sd_mmc_mci_card_init+0x8a8>
8000680e:	18 98       	mov	r8,r12
80006810:	10 99       	mov	r9,r8
80006812:	e0 19 00 00 	andl	r9,0x0
80006816:	fe f8 05 ee 	ld.w	r8,pc[1518]
8000681a:	f0 06 09 29 	st.w	r8[r6<<0x2],r9
  }


  //-- (CMD9)
  // Read & analyze CSD register
  if (sd_mmc_mci_get_csd(slot)!=true)
8000681e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006822:	10 9c       	mov	r12,r8
80006824:	f0 1f 01 79 	mcall	80006e08 <sd_mmc_mci_card_init+0x8b0>
80006828:	18 98       	mov	r8,r12
8000682a:	ec 18 00 01 	eorl	r8,0x1
8000682e:	5c 58       	castu.b	r8
80006830:	c0 40       	breq	80006838 <sd_mmc_mci_card_init+0x2e0>
    return false;
80006832:	30 08       	mov	r8,0
80006834:	e0 8f 02 d3 	bral	80006dda <sd_mmc_mci_card_init+0x882>


  //-- (CMD7)-R1b
  // select card
  if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006838:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000683c:	fe f8 05 c8 	ld.w	r8,pc[1480]
80006840:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006844:	fe f8 05 b0 	ld.w	r8,pc[1456]
80006848:	70 08       	ld.w	r8,r8[0x0]
8000684a:	12 9a       	mov	r10,r9
8000684c:	e0 6b 10 c7 	mov	r11,4295
80006850:	10 9c       	mov	r12,r8
80006852:	f0 1f 01 6b 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
80006856:	18 98       	mov	r8,r12
80006858:	58 08       	cp.w	r8,0
8000685a:	c0 40       	breq	80006862 <sd_mmc_mci_card_init+0x30a>
    return false;
8000685c:	30 08       	mov	r8,0
8000685e:	e0 8f 02 be 	bral	80006dda <sd_mmc_mci_card_init+0x882>

  // Wait end of busy
  mci_wait_busy_signal(mci);// read busy state on DAT0
80006862:	fe f8 05 92 	ld.w	r8,pc[1426]
80006866:	70 08       	ld.w	r8,r8[0x0]
80006868:	10 9c       	mov	r12,r8
8000686a:	f0 1f 01 69 	mcall	80006e0c <sd_mmc_mci_card_init+0x8b4>

  // Get clock by checking the extended CSD register
  if (MMC_CARD_V4 & g_card_type[slot])
8000686e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006872:	fe f9 05 76 	ld.w	r9,pc[1398]
80006876:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000687a:	e2 18 00 04 	andl	r8,0x4,COH
8000687e:	c0 e0       	breq	8000689a <sd_mmc_mci_card_init+0x342>
  {
    // Get clock (MMC V4) and size (MMC V4 HC) by checking the extended CSD register
      //-- (CMD8)
    if (sd_mmc_get_ext_csd(slot)!=true)
80006880:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006884:	10 9c       	mov	r12,r8
80006886:	f0 1f 01 63 	mcall	80006e10 <sd_mmc_mci_card_init+0x8b8>
8000688a:	18 98       	mov	r8,r12
8000688c:	ec 18 00 01 	eorl	r8,0x1
80006890:	5c 58       	castu.b	r8
80006892:	c0 40       	breq	8000689a <sd_mmc_mci_card_init+0x342>
         return false;
80006894:	30 08       	mov	r8,0
80006896:	e0 8f 02 a2 	bral	80006dda <sd_mmc_mci_card_init+0x882>
  }


#if (SD_4_BIT == ENABLE)
  // set bus size
  if (SD_CARD & g_card_type[slot])
8000689a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000689e:	fe f9 05 4a 	ld.w	r9,pc[1354]
800068a2:	f2 08 07 08 	ld.ub	r8,r9[r8]
800068a6:	e2 18 00 02 	andl	r8,0x2,COH
800068aa:	c4 00       	breq	8000692a <sd_mmc_mci_card_init+0x3d2>
  {
    // set 4-bit bus for SD Card
    //-- (CMD55)
    if(mci_send_cmd(mci, SD_MMC_APP_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800068ac:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800068b0:	fe f8 05 54 	ld.w	r8,pc[1364]
800068b4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800068b8:	fe f8 05 3c 	ld.w	r8,pc[1340]
800068bc:	70 08       	ld.w	r8,r8[0x0]
800068be:	12 9a       	mov	r10,r9
800068c0:	e0 6b 10 77 	mov	r11,4215
800068c4:	10 9c       	mov	r12,r8
800068c6:	f0 1f 01 4e 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
800068ca:	18 98       	mov	r8,r12
800068cc:	58 08       	cp.w	r8,0
800068ce:	c0 40       	breq	800068d6 <sd_mmc_mci_card_init+0x37e>
      return false;
800068d0:	30 08       	mov	r8,0
800068d2:	e0 8f 02 84 	bral	80006dda <sd_mmc_mci_card_init+0x882>

    //-- (CMD6)
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
800068d6:	fe f8 05 1e 	ld.w	r8,pc[1310]
800068da:	70 08       	ld.w	r8,r8[0x0]
800068dc:	30 2a       	mov	r10,2
800068de:	e0 6b 10 46 	mov	r11,4166
800068e2:	10 9c       	mov	r12,r8
800068e4:	f0 1f 01 46 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
800068e8:	18 98       	mov	r8,r12
800068ea:	58 08       	cp.w	r8,0
800068ec:	c0 40       	breq	800068f4 <sd_mmc_mci_card_init+0x39c>
      return false;
800068ee:	30 08       	mov	r8,0
800068f0:	e0 8f 02 75 	bral	80006dda <sd_mmc_mci_card_init+0x882>

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
800068f4:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800068f8:	fe fa 04 f4 	ld.w	r10,pc[1268]
800068fc:	30 28       	mov	r8,2
800068fe:	f4 09 0b 08 	st.b	r10[r9],r8
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
80006902:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006906:	fe f9 04 e6 	ld.w	r9,pc[1254]
8000690a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000690e:	10 99       	mov	r9,r8
80006910:	fe f8 04 e4 	ld.w	r8,pc[1252]
80006914:	70 08       	ld.w	r8,r8[0x0]
80006916:	12 9b       	mov	r11,r9
80006918:	10 9c       	mov	r12,r8
8000691a:	f0 1f 01 3f 	mcall	80006e14 <sd_mmc_mci_card_init+0x8bc>
8000691e:	18 98       	mov	r8,r12
80006920:	58 08       	cp.w	r8,0
80006922:	c4 00       	breq	800069a2 <sd_mmc_mci_card_init+0x44a>
      return false;
80006924:	30 08       	mov	r8,0
80006926:	e0 8f 02 5a 	bral	80006dda <sd_mmc_mci_card_init+0x882>
  }
  else // MMC bus width management
  {
    // set 8-bit bus for MMC Card
    if (MMC_CARD_V4 & g_card_type[slot])
8000692a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000692e:	fe f9 04 ba 	ld.w	r9,pc[1210]
80006932:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006936:	e2 18 00 04 	andl	r8,0x4,COH
8000693a:	c3 50       	breq	800069a4 <sd_mmc_mci_card_init+0x44c>
    {
      //-- (CMD6)-R1b
      // set 8-bit bus width (appeared from V4.0 specification)
      if (mci_send_cmd( mci,
8000693c:	fe f8 04 b8 	ld.w	r8,pc[1208]
80006940:	70 08       	ld.w	r8,r8[0x0]
80006942:	e0 6a 02 03 	mov	r10,515
80006946:	ea 1a 03 b7 	orh	r10,0x3b7
8000694a:	e0 6b 10 c6 	mov	r11,4294
8000694e:	10 9c       	mov	r12,r8
80006950:	f0 1f 01 2b 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
80006954:	18 98       	mov	r8,r12
80006956:	58 08       	cp.w	r8,0
80006958:	c0 40       	breq	80006960 <sd_mmc_mci_card_init+0x408>
                        ( (uint32_t)MMC_SWITCH_WRITE     <<24)|
                          ((uint32_t)MMC_SWITCH_BUS_WIDTH<<16)|
                          ((uint32_t)MMC_SWITCH_VAL_8BIT << 8)|
                          ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
8000695a:	30 08       	mov	r8,0
8000695c:	e0 8f 02 3f 	bral	80006dda <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006960:	fe f8 04 94 	ld.w	r8,pc[1172]
80006964:	70 08       	ld.w	r8,r8[0x0]
80006966:	10 9c       	mov	r12,r8
80006968:	f0 1f 01 29 	mcall	80006e0c <sd_mmc_mci_card_init+0x8b4>
      g_card_bus_width[slot] = MCI_BUS_SIZE_8_BIT;
8000696c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006970:	fe fa 04 7c 	ld.w	r10,pc[1148]
80006974:	30 38       	mov	r8,3
80006976:	f4 09 0b 08 	st.b	r10[r9],r8
      if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
8000697a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000697e:	fe f9 04 6e 	ld.w	r9,pc[1134]
80006982:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006986:	10 99       	mov	r9,r8
80006988:	fe f8 04 6c 	ld.w	r8,pc[1132]
8000698c:	70 08       	ld.w	r8,r8[0x0]
8000698e:	12 9b       	mov	r11,r9
80006990:	10 9c       	mov	r12,r8
80006992:	f0 1f 01 21 	mcall	80006e14 <sd_mmc_mci_card_init+0x8bc>
80006996:	18 98       	mov	r8,r12
80006998:	58 08       	cp.w	r8,0
8000699a:	c0 50       	breq	800069a4 <sd_mmc_mci_card_init+0x44c>
       return false;
8000699c:	30 08       	mov	r8,0
8000699e:	e0 8f 02 1e 	bral	80006dda <sd_mmc_mci_card_init+0x882>
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
      return false;

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
      return false;
800069a2:	d7 03       	nop
       return false;
    }
  }
#endif

   if (MMC_CARD_V4 & g_card_type[slot])
800069a4:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800069a8:	fe f9 04 40 	ld.w	r9,pc[1088]
800069ac:	f2 08 07 08 	ld.ub	r8,r9[r8]
800069b0:	e2 18 00 04 	andl	r8,0x4,COH
800069b4:	c1 90       	breq	800069e6 <sd_mmc_mci_card_init+0x48e>
   {
      //-- (CMD6)-R1b
      // set high speed interface timing
      if (mci_send_cmd( mci,
800069b6:	fe f8 04 3e 	ld.w	r8,pc[1086]
800069ba:	70 08       	ld.w	r8,r8[0x0]
800069bc:	e0 6a 01 03 	mov	r10,259
800069c0:	ea 1a 03 b9 	orh	r10,0x3b9
800069c4:	e0 6b 10 c6 	mov	r11,4294
800069c8:	10 9c       	mov	r12,r8
800069ca:	f0 1f 01 0d 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
800069ce:	18 98       	mov	r8,r12
800069d0:	58 08       	cp.w	r8,0
800069d2:	c0 40       	breq	800069da <sd_mmc_mci_card_init+0x482>
                        ((uint32_t)MMC_SWITCH_WRITE     <<24)|
                        ((uint32_t)MMC_SWITCH_HIGH_SPEED<<16)|
                        ((uint32_t)MMC_SWITCH_VAL_HS    << 8)|
                        ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
800069d4:	30 08       	mov	r8,0
800069d6:	e0 8f 02 02 	bral	80006dda <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);
800069da:	fe f8 04 1a 	ld.w	r8,pc[1050]
800069de:	70 08       	ld.w	r8,r8[0x0]
800069e0:	10 9c       	mov	r12,r8
800069e2:	f0 1f 01 0b 	mcall	80006e0c <sd_mmc_mci_card_init+0x8b4>
   }


   if( SD_CARD_V2 & g_card_type[slot] )
800069e6:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800069ea:	fe f9 03 fe 	ld.w	r9,pc[1022]
800069ee:	f2 08 07 08 	ld.ub	r8,r9[r8]
800069f2:	e2 18 00 08 	andl	r8,0x8,COH
800069f6:	e0 80 01 ae 	breq	80006d52 <sd_mmc_mci_card_init+0x7fa>
#define SDMMC_SWITCH_FUNC_G3_KEEP     (0xf << 8)  /**< Group 3 No influence */
#define SDMMC_SWITCH_FUNC_G4_KEEP     (0xf << 12) /**< Group 4 No influence */
#define SDMMC_SWITCH_FUNC_G5_KEEP     (0xf << 16) /**< Group 5 No influence */
#define SDMMC_SWITCH_FUNC_G6_KEEP     (0xf << 20) /**< Group 6 No influence */

      mci_set_block_size(mci, 512/8); // CMD6 512 bits status
800069fa:	fe f8 03 fa 	ld.w	r8,pc[1018]
800069fe:	70 08       	ld.w	r8,r8[0x0]
80006a00:	34 0b       	mov	r11,64
80006a02:	10 9c       	mov	r12,r8
80006a04:	f0 1f 01 05 	mcall	80006e18 <sd_mmc_mci_card_init+0x8c0>
      mci_set_block_count(mci, 1);
80006a08:	fe f8 03 ec 	ld.w	r8,pc[1004]
80006a0c:	70 08       	ld.w	r8,r8[0x0]
80006a0e:	30 1b       	mov	r11,1
80006a10:	10 9c       	mov	r12,r8
80006a12:	f0 1f 01 03 	mcall	80006e1c <sd_mmc_mci_card_init+0x8c4>

      //-- (CMD6)
      // Check if we can enter into the High Speed mode.
      if (mci_send_cmd( mci
80006a16:	fe f8 03 de 	ld.w	r8,pc[990]
80006a1a:	70 08       	ld.w	r8,r8[0x0]
80006a1c:	30 1a       	mov	r10,1
80006a1e:	e4 7b 10 46 	mov	r11,331846
80006a22:	10 9c       	mov	r12,r8
80006a24:	f0 1f 00 f6 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
80006a28:	18 98       	mov	r8,r12
80006a2a:	58 08       	cp.w	r8,0
80006a2c:	c0 40       	breq	80006a34 <sd_mmc_mci_card_init+0x4dc>
                      , SD_SWITCH_FUNC
                      , SDMMC_SWITCH_FUNC_MODE_CHECK | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006a2e:	30 08       	mov	r8,0
80006a30:	e0 8f 01 d5 	bral	80006dda <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006a34:	fe f8 03 c0 	ld.w	r8,pc[960]
80006a38:	70 08       	ld.w	r8,r8[0x0]
80006a3a:	10 9c       	mov	r12,r8
80006a3c:	f0 1f 00 f4 	mcall	80006e0c <sd_mmc_mci_card_init+0x8b4>

      bool b_hs_supported=false;
80006a40:	30 08       	mov	r8,0
80006a42:	ef 68 ff c5 	st.b	r7[-59],r8
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006a46:	30 08       	mov	r8,0
80006a48:	ef 68 ff c6 	st.b	r7[-58],r8
80006a4c:	c4 18       	rjmp	80006ace <sd_mmc_mci_card_init+0x576>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006a4e:	fe f8 03 a6 	ld.w	r8,pc[934]
80006a52:	70 08       	ld.w	r8,r8[0x0]
80006a54:	ef 48 ff c8 	st.w	r7[-56],r8
80006a58:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006a5c:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006a60:	fe f8 03 c0 	ld.w	r8,pc[960]
80006a64:	70 08       	ld.w	r8,r8[0x0]
80006a66:	10 99       	mov	r9,r8
80006a68:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006a6c:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006a70:	71 08       	ld.w	r8,r8[0x40]
80006a72:	f3 e8 10 08 	or	r8,r9,r8
80006a76:	10 99       	mov	r9,r8
80006a78:	fe f8 03 a8 	ld.w	r8,pc[936]
80006a7c:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006a7e:	fe f8 03 a2 	ld.w	r8,pc[930]
80006a82:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006a84:	e2 18 00 02 	andl	r8,0x2,COH
80006a88:	5f 18       	srne	r8
80006a8a:	58 08       	cp.w	r8,0
80006a8c:	ce 10       	breq	80006a4e <sd_mmc_mci_card_init+0x4f6>
          data = mci_rd_data(mci);
80006a8e:	fe f8 03 66 	ld.w	r8,pc[870]
80006a92:	70 08       	ld.w	r8,r8[0x0]
80006a94:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006a98:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006a9c:	70 c8       	ld.w	r8,r8[0x30]
80006a9e:	ef 48 ff ac 	st.w	r7[-84],r8
          if(i==16)
80006aa2:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006aa6:	31 08       	mov	r8,16
80006aa8:	f0 09 18 00 	cp.b	r9,r8
80006aac:	c0 c1       	brne	80006ac4 <sd_mmc_mci_card_init+0x56c>
          {
            if(((data>>24)&0xf)==1)
80006aae:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006ab2:	b9 88       	lsr	r8,0x18
80006ab4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006ab8:	58 18       	cp.w	r8,1
80006aba:	c1 21       	brne	80006ade <sd_mmc_mci_card_init+0x586>
              b_hs_supported = true;
80006abc:	30 18       	mov	r8,1
80006abe:	ef 68 ff c5 	st.b	r7[-59],r8
            break;
80006ac2:	c0 f8       	rjmp	80006ae0 <sd_mmc_mci_card_init+0x588>
      mci_wait_busy_signal(mci);// read busy state on DAT0

      bool b_hs_supported=false;
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006ac4:	ef 38 ff c6 	ld.ub	r8,r7[-58]
80006ac8:	2f c8       	sub	r8,-4
80006aca:	ef 68 ff c6 	st.b	r7[-58],r8
80006ace:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006ad2:	33 f8       	mov	r8,63
80006ad4:	f0 09 18 00 	cp.b	r9,r8
80006ad8:	fe 98 ff bb 	brls	80006a4e <sd_mmc_mci_card_init+0x4f6>
80006adc:	c0 28       	rjmp	80006ae0 <sd_mmc_mci_card_init+0x588>
          data = mci_rd_data(mci);
          if(i==16)
          {
            if(((data>>24)&0xf)==1)
              b_hs_supported = true;
            break;
80006ade:	d7 03       	nop
          }
        }
      }

      if (b_hs_supported==false )
80006ae0:	ef 38 ff c5 	ld.ub	r8,r7[-59]
80006ae4:	ec 18 00 01 	eorl	r8,0x1
80006ae8:	5c 58       	castu.b	r8
80006aea:	e0 81 01 33 	brne	80006d50 <sd_mmc_mci_card_init+0x7f8>
        goto sd_mmc_init_step3;

      if (mci_send_cmd( mci
80006aee:	fe f8 03 06 	ld.w	r8,pc[774]
80006af2:	70 08       	ld.w	r8,r8[0x0]
80006af4:	e0 6a ff f1 	mov	r10,65521
80006af8:	ea 1a 80 ff 	orh	r10,0x80ff
80006afc:	e4 7b 10 46 	mov	r11,331846
80006b00:	10 9c       	mov	r12,r8
80006b02:	f0 1f 00 bf 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
80006b06:	18 98       	mov	r8,r12
80006b08:	58 08       	cp.w	r8,0
80006b0a:	c0 40       	breq	80006b12 <sd_mmc_mci_card_init+0x5ba>
                      | SDMMC_SWITCH_FUNC_G3_KEEP
                      | SDMMC_SWITCH_FUNC_G2_KEEP
                      | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006b0c:	30 08       	mov	r8,0
80006b0e:	e0 8f 01 66 	bral	80006dda <sd_mmc_mci_card_init+0x882>
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006b12:	30 08       	mov	r8,0
80006b14:	ef 68 ff c7 	st.b	r7[-57],r8
80006b18:	c3 08       	rjmp	80006b78 <sd_mmc_mci_card_init+0x620>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006b1a:	fe f8 02 da 	ld.w	r8,pc[730]
80006b1e:	70 08       	ld.w	r8,r8[0x0]
80006b20:	ef 48 ff d4 	st.w	r7[-44],r8
80006b24:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006b28:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006b2c:	fe f8 02 f4 	ld.w	r8,pc[756]
80006b30:	70 08       	ld.w	r8,r8[0x0]
80006b32:	10 99       	mov	r9,r8
80006b34:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006b38:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006b3c:	71 08       	ld.w	r8,r8[0x40]
80006b3e:	f3 e8 10 08 	or	r8,r9,r8
80006b42:	10 99       	mov	r9,r8
80006b44:	fe f8 02 dc 	ld.w	r8,pc[732]
80006b48:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006b4a:	fe f8 02 d6 	ld.w	r8,pc[726]
80006b4e:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006b50:	e2 18 00 02 	andl	r8,0x2,COH
80006b54:	5f 18       	srne	r8
80006b56:	58 08       	cp.w	r8,0
80006b58:	ce 10       	breq	80006b1a <sd_mmc_mci_card_init+0x5c2>
          data = mci_rd_data(mci);
80006b5a:	fe f8 02 9a 	ld.w	r8,pc[666]
80006b5e:	70 08       	ld.w	r8,r8[0x0]
80006b60:	ef 48 ff dc 	st.w	r7[-36],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006b64:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006b68:	70 c8       	ld.w	r8,r8[0x30]
80006b6a:	ef 48 ff a8 	st.w	r7[-88],r8
      {
        return false;
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006b6e:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006b72:	2f c8       	sub	r8,-4
80006b74:	ef 68 ff c7 	st.b	r7[-57],r8
80006b78:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006b7c:	33 f8       	mov	r8,63
80006b7e:	f0 09 18 00 	cp.b	r9,r8
80006b82:	fe 98 ff cc 	brls	80006b1a <sd_mmc_mci_card_init+0x5c2>

      /* A 8 cycle delay is required after switch command
       * @ 200KHz clock this should be 40 uS, but we use
       * 80 to handle imprecise clock setting.
       */
      cpu_delay_us(80, g_cpu_hz);
80006b86:	fe f8 02 9e 	ld.w	r8,pc[670]
80006b8a:	70 08       	ld.w	r8,r8[0x0]
80006b8c:	35 09       	mov	r9,80
80006b8e:	ef 49 ff e4 	st.w	r7[-28],r9
80006b92:	ef 48 ff e0 	st.w	r7[-32],r8
80006b96:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006b9a:	ef 48 ff ec 	st.w	r7[-20],r8
80006b9e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006ba2:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80006ba6:	ee f0 ff ec 	ld.w	r0,r7[-20]
80006baa:	30 01       	mov	r1,0
80006bac:	ee f2 ff e8 	ld.w	r2,r7[-24]
80006bb0:	30 03       	mov	r3,0
80006bb2:	e2 02 02 4a 	mul	r10,r1,r2
80006bb6:	e6 00 02 48 	mul	r8,r3,r0
80006bba:	10 0a       	add	r10,r8
80006bbc:	e0 02 06 48 	mulu.d	r8,r0,r2
80006bc0:	12 0a       	add	r10,r9
80006bc2:	14 99       	mov	r9,r10
80006bc4:	ee 7a 42 3f 	mov	r10,999999
80006bc8:	30 0b       	mov	r11,0
80006bca:	f0 0a 00 0a 	add	r10,r8,r10
80006bce:	f2 0b 00 4b 	adc	r11,r9,r11
80006bd2:	ee 78 42 40 	mov	r8,1000000
80006bd6:	30 09       	mov	r9,0
80006bd8:	f0 1f 00 94 	mcall	80006e28 <sd_mmc_mci_card_init+0x8d0>
80006bdc:	14 98       	mov	r8,r10
80006bde:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80006be0:	ef 48 ff f4 	st.w	r7[-12],r8
80006be4:	ee c8 00 50 	sub	r8,r7,80
80006be8:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006bec:	e1 b8 00 42 	mfsr	r8,0x108
80006bf0:	10 99       	mov	r9,r8
80006bf2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006bf6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006bf8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006bfc:	70 09       	ld.w	r9,r8[0x0]
80006bfe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006c02:	10 09       	add	r9,r8
80006c04:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006c08:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006c0a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006c0e:	30 08       	mov	r8,0
80006c10:	f3 68 00 08 	st.b	r9[8],r8
80006c14:	ee c8 00 50 	sub	r8,r7,80
80006c18:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006c1c:	e1 b8 00 42 	mfsr	r8,0x108
80006c20:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006c24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c28:	f1 39 00 08 	ld.ub	r9,r8[8]
80006c2c:	30 28       	mov	r8,2
80006c2e:	f0 09 18 00 	cp.b	r9,r8
80006c32:	c0 31       	brne	80006c38 <sd_mmc_mci_card_init+0x6e0>
    return false;
80006c34:	30 08       	mov	r8,0
80006c36:	c4 38       	rjmp	80006cbc <sd_mmc_mci_card_init+0x764>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006c38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c3c:	f1 39 00 08 	ld.ub	r9,r8[8]
80006c40:	30 18       	mov	r8,1
80006c42:	f0 09 18 00 	cp.b	r9,r8
80006c46:	c0 31       	brne	80006c4c <sd_mmc_mci_card_init+0x6f4>
    return true;
80006c48:	30 18       	mov	r8,1
80006c4a:	c3 98       	rjmp	80006cbc <sd_mmc_mci_card_init+0x764>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006c4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c50:	70 09       	ld.w	r9,r8[0x0]
80006c52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c56:	70 18       	ld.w	r8,r8[0x4]
80006c58:	10 39       	cp.w	r9,r8
80006c5a:	e0 88 00 1a 	brls	80006c8e <sd_mmc_mci_card_init+0x736>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006c5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c62:	70 08       	ld.w	r8,r8[0x0]
80006c64:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006c68:	10 39       	cp.w	r9,r8
80006c6a:	c1 02       	brcc	80006c8a <sd_mmc_mci_card_init+0x732>
80006c6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c70:	70 18       	ld.w	r8,r8[0x4]
80006c72:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006c76:	10 39       	cp.w	r9,r8
80006c78:	e0 88 00 09 	brls	80006c8a <sd_mmc_mci_card_init+0x732>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006c7c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006c80:	30 18       	mov	r8,1
80006c82:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006c86:	30 18       	mov	r8,1
80006c88:	c1 a8       	rjmp	80006cbc <sd_mmc_mci_card_init+0x764>
    }
    return false;
80006c8a:	30 08       	mov	r8,0
80006c8c:	c1 88       	rjmp	80006cbc <sd_mmc_mci_card_init+0x764>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006c8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c92:	70 08       	ld.w	r8,r8[0x0]
80006c94:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006c98:	10 39       	cp.w	r9,r8
80006c9a:	c0 93       	brcs	80006cac <sd_mmc_mci_card_init+0x754>
80006c9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ca0:	70 18       	ld.w	r8,r8[0x4]
80006ca2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006ca6:	10 39       	cp.w	r9,r8
80006ca8:	e0 88 00 09 	brls	80006cba <sd_mmc_mci_card_init+0x762>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006cac:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006cb0:	30 18       	mov	r8,1
80006cb2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006cb6:	30 18       	mov	r8,1
80006cb8:	c0 28       	rjmp	80006cbc <sd_mmc_mci_card_init+0x764>
    }
    return false;
80006cba:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006cbc:	58 08       	cp.w	r8,0
80006cbe:	ca b0       	breq	80006c14 <sd_mmc_mci_card_init+0x6bc>
      union u_cfg{
        unsigned long     cfg;
        avr32_mci_cfg_t   CFG;
      };
      union u_cfg val;
      val.cfg = mci->cfg;
80006cc0:	4c d8       	lddpc	r8,80006df4 <sd_mmc_mci_card_init+0x89c>
80006cc2:	70 08       	ld.w	r8,r8[0x0]
80006cc4:	71 58       	ld.w	r8,r8[0x54]
80006cc6:	ef 48 ff bc 	st.w	r7[-68],r8
      val.CFG.hsmode = 1;
80006cca:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006cce:	30 19       	mov	r9,1
80006cd0:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80006cd4:	ef 48 ff bc 	st.w	r7[-68],r8
      mci->cfg = val.cfg;
80006cd8:	4c 78       	lddpc	r8,80006df4 <sd_mmc_mci_card_init+0x89c>
80006cda:	70 08       	ld.w	r8,r8[0x0]
80006cdc:	ee f9 ff bc 	ld.w	r9,r7[-68]
80006ce0:	f1 49 00 54 	st.w	r8[84],r9

      // deselect card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, 0)!=MCI_SUCCESS)
80006ce4:	4c 48       	lddpc	r8,80006df4 <sd_mmc_mci_card_init+0x89c>
80006ce6:	70 08       	ld.w	r8,r8[0x0]
80006ce8:	30 0a       	mov	r10,0
80006cea:	e0 6b 10 c7 	mov	r11,4295
80006cee:	10 9c       	mov	r12,r8
80006cf0:	f0 1f 00 43 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
80006cf4:	18 98       	mov	r8,r12
80006cf6:	58 08       	cp.w	r8,0
80006cf8:	c0 30       	breq	80006cfe <sd_mmc_mci_card_init+0x7a6>
        return false;
80006cfa:	30 08       	mov	r8,0
80006cfc:	c6 f8       	rjmp	80006dda <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006cfe:	4b e8       	lddpc	r8,80006df4 <sd_mmc_mci_card_init+0x89c>
80006d00:	70 08       	ld.w	r8,r8[0x0]
80006d02:	10 9c       	mov	r12,r8
80006d04:	f0 1f 00 42 	mcall	80006e0c <sd_mmc_mci_card_init+0x8b4>

      //-- (CMD9)
      // Read & analyze CSD register
      if (sd_mmc_mci_get_csd(slot)!=true)
80006d08:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006d0c:	10 9c       	mov	r12,r8
80006d0e:	f0 1f 00 3f 	mcall	80006e08 <sd_mmc_mci_card_init+0x8b0>
80006d12:	18 98       	mov	r8,r12
80006d14:	ec 18 00 01 	eorl	r8,0x1
80006d18:	5c 58       	castu.b	r8
80006d1a:	c0 30       	breq	80006d20 <sd_mmc_mci_card_init+0x7c8>
        return false;
80006d1c:	30 08       	mov	r8,0
80006d1e:	c5 e8       	rjmp	80006dda <sd_mmc_mci_card_init+0x882>

      // select card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006d20:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006d24:	4b 88       	lddpc	r8,80006e04 <sd_mmc_mci_card_init+0x8ac>
80006d26:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006d2a:	4b 38       	lddpc	r8,80006df4 <sd_mmc_mci_card_init+0x89c>
80006d2c:	70 08       	ld.w	r8,r8[0x0]
80006d2e:	12 9a       	mov	r10,r9
80006d30:	e0 6b 10 c7 	mov	r11,4295
80006d34:	10 9c       	mov	r12,r8
80006d36:	f0 1f 00 32 	mcall	80006dfc <sd_mmc_mci_card_init+0x8a4>
80006d3a:	18 98       	mov	r8,r12
80006d3c:	58 08       	cp.w	r8,0
80006d3e:	c0 30       	breq	80006d44 <sd_mmc_mci_card_init+0x7ec>
        return false;
80006d40:	30 08       	mov	r8,0
80006d42:	c4 c8       	rjmp	80006dda <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006d44:	4a c8       	lddpc	r8,80006df4 <sd_mmc_mci_card_init+0x89c>
80006d46:	70 08       	ld.w	r8,r8[0x0]
80006d48:	10 9c       	mov	r12,r8
80006d4a:	f0 1f 00 31 	mcall	80006e0c <sd_mmc_mci_card_init+0x8b4>
80006d4e:	c0 28       	rjmp	80006d52 <sd_mmc_mci_card_init+0x7fa>
          }
        }
      }

      if (b_hs_supported==false )
        goto sd_mmc_init_step3;
80006d50:	d7 03       	nop
      mci_wait_busy_signal(mci);// read busy state on DAT0
  }

sd_mmc_init_step3:
  // Set clock
  mci_set_speed(mci, g_pbb_hz, g_card_freq[slot]*1000);
80006d52:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006d56:	4b 68       	lddpc	r8,80006e2c <sd_mmc_mci_card_init+0x8d4>
80006d58:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006d5c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80006d60:	e0 68 03 e8 	mov	r8,1000
80006d64:	f2 08 02 48 	mul	r8,r9,r8
80006d68:	10 9a       	mov	r10,r8
80006d6a:	4a 28       	lddpc	r8,80006df0 <sd_mmc_mci_card_init+0x898>
80006d6c:	70 09       	ld.w	r9,r8[0x0]
80006d6e:	4a 28       	lddpc	r8,80006df4 <sd_mmc_mci_card_init+0x89c>
80006d70:	70 08       	ld.w	r8,r8[0x0]
80006d72:	12 9b       	mov	r11,r9
80006d74:	10 9c       	mov	r12,r8
80006d76:	f0 1f 00 2f 	mcall	80006e30 <sd_mmc_mci_card_init+0x8d8>

  //-- (CMD13)
  // Check if card is ready, the card must be in TRAN state
  if(sd_mmc_mci_cmd_send_status(slot)!=true)
80006d7a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006d7e:	10 9c       	mov	r12,r8
80006d80:	f0 1f 00 2d 	mcall	80006e34 <sd_mmc_mci_card_init+0x8dc>
80006d84:	18 98       	mov	r8,r12
80006d86:	ec 18 00 01 	eorl	r8,0x1
80006d8a:	5c 58       	castu.b	r8
80006d8c:	c0 30       	breq	80006d92 <sd_mmc_mci_card_init+0x83a>
    return false;
80006d8e:	30 08       	mov	r8,0
80006d90:	c2 58       	rjmp	80006dda <sd_mmc_mci_card_init+0x882>

  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
80006d92:	49 98       	lddpc	r8,80006df4 <sd_mmc_mci_card_init+0x89c>
80006d94:	70 08       	ld.w	r8,r8[0x0]
80006d96:	10 9c       	mov	r12,r8
80006d98:	f0 1f 00 1a 	mcall	80006e00 <sd_mmc_mci_card_init+0x8a8>
80006d9c:	18 98       	mov	r8,r12
80006d9e:	e4 18 e0 02 	andh	r8,0xe002
80006da2:	e0 18 0e 00 	andl	r8,0xe00
80006da6:	e0 48 08 00 	cp.w	r8,2048
80006daa:	c0 30       	breq	80006db0 <sd_mmc_mci_card_init+0x858>
    return false;
80006dac:	30 08       	mov	r8,0
80006dae:	c1 68       	rjmp	80006dda <sd_mmc_mci_card_init+0x882>

  //-- (CMD16)
  // Set the card block length to 512B
  if (sd_mmc_set_block_len (slot, SD_MMC_SECTOR_SIZE)!=true)
80006db0:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006db4:	e0 6b 02 00 	mov	r11,512
80006db8:	10 9c       	mov	r12,r8
80006dba:	f0 1f 00 20 	mcall	80006e38 <sd_mmc_mci_card_init+0x8e0>
80006dbe:	18 98       	mov	r8,r12
80006dc0:	ec 18 00 01 	eorl	r8,0x1
80006dc4:	5c 58       	castu.b	r8
80006dc6:	c0 30       	breq	80006dcc <sd_mmc_mci_card_init+0x874>
    return false;
80006dc8:	30 08       	mov	r8,0
80006dca:	c0 88       	rjmp	80006dda <sd_mmc_mci_card_init+0x882>

  // USB Test Unit Attention requires a state "busy" between "not present" and "ready" state
  // otherwise never report card change
  sd_mmc_mci_init_done[slot] = true;
80006dcc:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006dd0:	48 5a       	lddpc	r10,80006de4 <sd_mmc_mci_card_init+0x88c>
80006dd2:	30 18       	mov	r8,1
80006dd4:	f4 09 0b 08 	st.b	r10[r9],r8

  return true;
80006dd8:	30 18       	mov	r8,1
}
80006dda:	10 9c       	mov	r12,r8
80006ddc:	2e 9d       	sub	sp,-92
80006dde:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80006de2:	00 00       	add	r0,r0
80006de4:	00 00       	add	r0,r0
80006de6:	06 8c       	andn	r12,r3
80006de8:	00 00       	add	r0,r0
80006dea:	0d b4       	ld.ub	r4,r6[0x3]
80006dec:	00 00       	add	r0,r0
80006dee:	0b ac       	ld.ub	r12,r5[0x2]
80006df0:	00 00       	add	r0,r0
80006df2:	06 90       	mov	r0,r3
80006df4:	00 00       	add	r0,r0
80006df6:	01 34       	ld.ub	r4,r0++
80006df8:	80 00       	ld.sh	r0,r0[0x0]
80006dfa:	8d bc       	st.w	r6[0x2c],r12
80006dfc:	80 00       	ld.sh	r0,r0[0x0]
80006dfe:	8e f0       	ld.uh	r0,r7[0xe]
80006e00:	80 00       	ld.sh	r0,r0[0x0]
80006e02:	90 28       	ld.sh	r8,r8[0x4]
80006e04:	00 00       	add	r0,r0
80006e06:	09 9c       	ld.ub	r12,r4[0x1]
80006e08:	80 00       	ld.sh	r0,r0[0x0]
80006e0a:	5f 1c       	srne	r12
80006e0c:	80 00       	ld.sh	r0,r0[0x0]
80006e0e:	90 44       	ld.sh	r4,r8[0x8]
80006e10:	80 00       	ld.sh	r0,r0[0x0]
80006e12:	62 0c       	ld.w	r12,r1[0x0]
80006e14:	80 00       	ld.sh	r0,r0[0x0]
80006e16:	8f c8       	st.w	r7[0x30],r8
80006e18:	80 00       	ld.sh	r0,r0[0x0]
80006e1a:	8e 70       	ld.sh	r0,r7[0xe]
80006e1c:	80 00       	ld.sh	r0,r0[0x0]
80006e1e:	8e ba       	ld.uh	r10,r7[0x6]
80006e20:	00 00       	add	r0,r0
80006e22:	08 24       	rsub	r4,r4
80006e24:	00 00       	add	r0,r0
80006e26:	06 94       	mov	r4,r3
80006e28:	80 00       	ld.sh	r0,r0[0x0]
80006e2a:	e0 b8       	*unknown*
80006e2c:	00 00       	add	r0,r0
80006e2e:	0b ae       	ld.ub	lr,r5[0x2]
80006e30:	80 00       	ld.sh	r0,r0[0x0]
80006e32:	8c d8       	ld.uh	r8,r6[0xa]
80006e34:	80 00       	ld.sh	r0,r0[0x0]
80006e36:	7a 90       	ld.w	r0,sp[0x24]
80006e38:	80 00       	ld.sh	r0,r0[0x0]
80006e3a:	63 d8       	ld.w	r8,r1[0x74]

80006e3c <dma_mci_2_ram>:
    return true;
}
#endif

static void dma_mci_2_ram(void *ram, size_t size)
{
80006e3c:	eb cd 40 80 	pushm	r7,lr
80006e40:	1a 97       	mov	r7,sp
80006e42:	20 3d       	sub	sp,12
80006e44:	ef 4c ff f8 	st.w	r7[-8],r12
80006e48:	ef 4b ff f4 	st.w	r7[-12],r11
  int *pRam = ram;
80006e4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e50:	ef 48 ff fc 	st.w	r7[-4],r8

  // Src Address: the MCI registers.
  AVR32_DMACA.sar1 = (uint32_t)&AVR32_MCI.fifo;
80006e54:	fc 18 ff 10 	movh	r8,0xff10
80006e58:	fe 69 42 00 	mov	r9,-114176
80006e5c:	f1 49 00 58 	st.w	r8[88],r9

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;
80006e60:	fc 18 ff 10 	movh	r8,0xff10
80006e64:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006e68:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80006e6c:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
80006e70:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006e74:	a3 89       	lsr	r9,0x2

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80006e76:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80006e7a:	fc 18 ff 10 	movh	r8,0xff10
80006e7e:	e0 69 02 02 	mov	r9,514
80006e82:	f1 49 03 a0 	st.w	r8[928],r9
}
80006e86:	2f dd       	sub	sp,-12
80006e88:	e3 cd 80 80 	ldm	sp++,r7,pc

80006e8c <is_dma_mci_2_ram_complete>:

static bool is_dma_mci_2_ram_complete( void )
{
80006e8c:	eb cd 40 80 	pushm	r7,lr
80006e90:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
80006e92:	fc 18 ff 10 	movh	r8,0xff10
80006e96:	f0 f8 03 a0 	ld.w	r8,r8[928]
80006e9a:	e2 18 00 02 	andl	r8,0x2,COH
80006e9e:	c0 30       	breq	80006ea4 <is_dma_mci_2_ram_complete+0x18>
    return false;
80006ea0:	30 08       	mov	r8,0
80006ea2:	c0 28       	rjmp	80006ea6 <is_dma_mci_2_ram_complete+0x1a>

  return true;
80006ea4:	30 18       	mov	r8,1
}
80006ea6:	10 9c       	mov	r12,r8
80006ea8:	e3 cd 80 80 	ldm	sp++,r7,pc

80006eac <dma_ram_2_mci>:
    return true;
}
#endif

static void dma_ram_2_mci(const void *ram, size_t size)
{
80006eac:	eb cd 40 80 	pushm	r7,lr
80006eb0:	1a 97       	mov	r7,sp
80006eb2:	20 3d       	sub	sp,12
80006eb4:	ef 4c ff f8 	st.w	r7[-8],r12
80006eb8:	ef 4b ff f4 	st.w	r7[-12],r11
  const unsigned int *pRam = ram;
80006ebc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ec0:	ef 48 ff fc 	st.w	r7[-4],r8

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.sar1 = (unsigned long)pRam;
80006ec4:	fc 18 ff 10 	movh	r8,0xff10
80006ec8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006ecc:	f1 49 00 58 	st.w	r8[88],r9

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;
80006ed0:	fc 18 ff 10 	movh	r8,0xff10
80006ed4:	fe 69 42 00 	mov	r9,-114176
80006ed8:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80006edc:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
80006ee0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006ee4:	a3 89       	lsr	r9,0x2

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80006ee6:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80006eea:	fc 18 ff 10 	movh	r8,0xff10
80006eee:	e0 69 02 02 	mov	r9,514
80006ef2:	f1 49 03 a0 	st.w	r8[928],r9
}
80006ef6:	2f dd       	sub	sp,-12
80006ef8:	e3 cd 80 80 	ldm	sp++,r7,pc

80006efc <is_dma_ram_2_mci_complete>:

static bool is_dma_ram_2_mci_complete( void )
{
80006efc:	eb cd 40 80 	pushm	r7,lr
80006f00:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
80006f02:	fc 18 ff 10 	movh	r8,0xff10
80006f06:	f0 f8 03 a0 	ld.w	r8,r8[928]
80006f0a:	e2 18 00 02 	andl	r8,0x2,COH
80006f0e:	c0 30       	breq	80006f14 <is_dma_ram_2_mci_complete+0x18>
    return false;
80006f10:	30 08       	mov	r8,0
80006f12:	c0 28       	rjmp	80006f16 <is_dma_ram_2_mci_complete+0x1a>

  return true;
80006f14:	30 18       	mov	r8,1
}
80006f16:	10 9c       	mov	r12,r8
80006f18:	e3 cd 80 80 	ldm	sp++,r7,pc

80006f1c <sd_mmc_mci_mem_check>:

  return true;
}

bool sd_mmc_mci_mem_check(uint8_t slot)
{
80006f1c:	eb cd 40 80 	pushm	r7,lr
80006f20:	1a 97       	mov	r7,sp
80006f22:	20 2d       	sub	sp,8
80006f24:	18 98       	mov	r8,r12
80006f26:	ef 68 ff f8 	st.b	r7[-8],r8
  uint8_t timeout_init = 0;
80006f2a:	30 08       	mov	r8,0
80006f2c:	ef 68 ff ff 	st.b	r7[-1],r8

  if (slot > MCI_LAST_SLOTS)
80006f30:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006f34:	30 18       	mov	r8,1
80006f36:	f0 09 18 00 	cp.b	r9,r8
80006f3a:	e0 88 00 04 	brls	80006f42 <sd_mmc_mci_mem_check+0x26>
    return false;
80006f3e:	30 08       	mov	r8,0
80006f40:	c4 d8       	rjmp	80006fda <sd_mmc_mci_mem_check+0xbe>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006f42:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006f46:	4a 89       	lddpc	r9,80006fe4 <sd_mmc_mci_mem_check+0xc8>
80006f48:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006f4c:	10 9a       	mov	r10,r8
80006f4e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006f52:	4a 68       	lddpc	r8,80006fe8 <sd_mmc_mci_mem_check+0xcc>
80006f54:	70 08       	ld.w	r8,r8[0x0]
80006f56:	12 9b       	mov	r11,r9
80006f58:	10 9c       	mov	r12,r8
80006f5a:	f0 1f 00 25 	mcall	80006fec <sd_mmc_mci_mem_check+0xd0>

  // Check card presence
  if (is_sd_mmc_mci_card_present(slot) == false)
80006f5e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006f62:	10 9c       	mov	r12,r8
80006f64:	f0 1f 00 23 	mcall	80006ff0 <sd_mmc_mci_mem_check+0xd4>
80006f68:	18 98       	mov	r8,r12
80006f6a:	ec 18 00 01 	eorl	r8,0x1
80006f6e:	5c 58       	castu.b	r8
80006f70:	c0 90       	breq	80006f82 <sd_mmc_mci_mem_check+0x66>
  {
    sd_mmc_mci_init_done[slot] = false;
80006f72:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006f76:	4a 0a       	lddpc	r10,80006ff4 <sd_mmc_mci_mem_check+0xd8>
80006f78:	30 08       	mov	r8,0
80006f7a:	f4 09 0b 08 	st.b	r10[r9],r8
    return false;
80006f7e:	30 08       	mov	r8,0
80006f80:	c2 d8       	rjmp	80006fda <sd_mmc_mci_mem_check+0xbe>
  }

  if (sd_mmc_mci_init_done[slot] == false)
80006f82:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006f86:	49 c9       	lddpc	r9,80006ff4 <sd_mmc_mci_mem_check+0xd8>
80006f88:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006f8c:	ec 18 00 01 	eorl	r8,0x1
80006f90:	5c 58       	castu.b	r8
80006f92:	c1 a0       	breq	80006fc6 <sd_mmc_mci_mem_check+0xaa>
  {
    while (sd_mmc_mci_card_init(slot)!=true)
80006f94:	c0 f8       	rjmp	80006fb2 <sd_mmc_mci_mem_check+0x96>
    {
      timeout_init++;
80006f96:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006f9a:	2f f8       	sub	r8,-1
80006f9c:	ef 68 ff ff 	st.b	r7[-1],r8
      if (timeout_init>10) return false;
80006fa0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006fa4:	30 a8       	mov	r8,10
80006fa6:	f0 09 18 00 	cp.b	r9,r8
80006faa:	e0 88 00 04 	brls	80006fb2 <sd_mmc_mci_mem_check+0x96>
80006fae:	30 08       	mov	r8,0
80006fb0:	c1 58       	rjmp	80006fda <sd_mmc_mci_mem_check+0xbe>
    return false;
  }

  if (sd_mmc_mci_init_done[slot] == false)
  {
    while (sd_mmc_mci_card_init(slot)!=true)
80006fb2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006fb6:	10 9c       	mov	r12,r8
80006fb8:	f0 1f 00 10 	mcall	80006ff8 <sd_mmc_mci_mem_check+0xdc>
80006fbc:	18 98       	mov	r8,r12
80006fbe:	ec 18 00 01 	eorl	r8,0x1
80006fc2:	5c 58       	castu.b	r8
80006fc4:	ce 91       	brne	80006f96 <sd_mmc_mci_mem_check+0x7a>
    {
      timeout_init++;
      if (timeout_init>10) return false;
    }
  }
  if (sd_mmc_mci_init_done[slot] == true)
80006fc6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006fca:	48 b9       	lddpc	r9,80006ff4 <sd_mmc_mci_mem_check+0xd8>
80006fcc:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006fd0:	58 08       	cp.w	r8,0
80006fd2:	c0 30       	breq	80006fd8 <sd_mmc_mci_mem_check+0xbc>
    return true;
80006fd4:	30 18       	mov	r8,1
80006fd6:	c0 28       	rjmp	80006fda <sd_mmc_mci_mem_check+0xbe>
  else
    return false;
80006fd8:	30 08       	mov	r8,0
}
80006fda:	10 9c       	mov	r12,r8
80006fdc:	2f ed       	sub	sp,-8
80006fde:	e3 cd 80 80 	ldm	sp++,r7,pc
80006fe2:	00 00       	add	r0,r0
80006fe4:	00 00       	add	r0,r0
80006fe6:	0b ac       	ld.ub	r12,r5[0x2]
80006fe8:	00 00       	add	r0,r0
80006fea:	01 34       	ld.ub	r4,r0++
80006fec:	80 00       	ld.sh	r0,r0[0x0]
80006fee:	90 88       	ld.uh	r8,r8[0x0]
80006ff0:	80 00       	ld.sh	r0,r0[0x0]
80006ff2:	5e 64       	retmi	r4
80006ff4:	00 00       	add	r0,r0
80006ff6:	06 8c       	andn	r12,r3
80006ff8:	80 00       	ld.sh	r0,r0[0x0]
80006ffa:	65 58       	ld.w	r8,r2[0x54]

80006ffc <sd_mmc_mci_dma_read_open>:

  return true;
}

bool sd_mmc_mci_dma_read_open(uint8_t slot, uint32_t pos, void* ram, uint16_t nb_sector)
{
80006ffc:	eb cd 40 80 	pushm	r7,lr
80007000:	1a 97       	mov	r7,sp
80007002:	20 5d       	sub	sp,20
80007004:	ef 4b ff f4 	st.w	r7[-12],r11
80007008:	ef 4a ff f0 	st.w	r7[-16],r10
8000700c:	12 98       	mov	r8,r9
8000700e:	18 99       	mov	r9,r12
80007010:	ef 69 ff f8 	st.b	r7[-8],r9
80007014:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
80007018:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000701c:	30 18       	mov	r8,1
8000701e:	f0 09 18 00 	cp.b	r9,r8
80007022:	e0 88 00 04 	brls	8000702a <sd_mmc_mci_dma_read_open+0x2e>
    return false;
80007026:	30 08       	mov	r8,0
80007028:	c9 a8       	rjmp	8000715c <sd_mmc_mci_dma_read_open+0x160>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000702a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000702e:	4c e9       	lddpc	r9,80007164 <sd_mmc_mci_dma_read_open+0x168>
80007030:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007034:	10 9a       	mov	r10,r8
80007036:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000703a:	4c c8       	lddpc	r8,80007168 <sd_mmc_mci_dma_read_open+0x16c>
8000703c:	70 08       	ld.w	r8,r8[0x0]
8000703e:	12 9b       	mov	r11,r9
80007040:	10 9c       	mov	r12,r8
80007042:	f0 1f 00 4b 	mcall	8000716c <sd_mmc_mci_dma_read_open+0x170>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
80007046:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000704a:	4c a8       	lddpc	r8,80007170 <sd_mmc_mci_dma_read_open+0x174>
8000704c:	ee fa ff f4 	ld.w	r10,r7[-12]
80007050:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
80007054:	4c 58       	lddpc	r8,80007168 <sd_mmc_mci_dma_read_open+0x16c>
80007056:	70 08       	ld.w	r8,r8[0x0]
80007058:	10 9c       	mov	r12,r8
8000705a:	f0 1f 00 47 	mcall	80007174 <sd_mmc_mci_dma_read_open+0x178>

  addr =  gl_ptr_mem[slot];
8000705e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007062:	4c 48       	lddpc	r8,80007170 <sd_mmc_mci_dma_read_open+0x174>
80007064:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007068:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
8000706c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007070:	4c 29       	lddpc	r9,80007178 <sd_mmc_mci_dma_read_open+0x17c>
80007072:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007076:	e2 18 00 10 	andl	r8,0x10,COH
8000707a:	c0 e1       	brne	80007096 <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
8000707c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007080:	4b e9       	lddpc	r9,80007178 <sd_mmc_mci_dma_read_open+0x17c>
80007082:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007086:	e2 18 00 20 	andl	r8,0x20,COH
  // wait for MMC not busy
  mci_wait_busy_signal(mci);

  addr =  gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
8000708a:	c0 61       	brne	80007096 <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
8000708c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007090:	a9 78       	lsl	r8,0x9
80007092:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  //** (CMD13)
  // Necessary to clear flag error "ADDRESS_OUT_OF_RANGE" (ID LABO = MMC15)
  if(mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80007096:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000709a:	4b 98       	lddpc	r8,8000717c <sd_mmc_mci_dma_read_open+0x180>
8000709c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800070a0:	4b 28       	lddpc	r8,80007168 <sd_mmc_mci_dma_read_open+0x16c>
800070a2:	70 08       	ld.w	r8,r8[0x0]
800070a4:	12 9a       	mov	r10,r9
800070a6:	e0 6b 10 4d 	mov	r11,4173
800070aa:	10 9c       	mov	r12,r8
800070ac:	f0 1f 00 35 	mcall	80007180 <sd_mmc_mci_dma_read_open+0x184>
800070b0:	18 98       	mov	r8,r12
800070b2:	58 08       	cp.w	r8,0
800070b4:	c0 30       	breq	800070ba <sd_mmc_mci_dma_read_open+0xbe>
  {
    return false;
800070b6:	30 08       	mov	r8,0
800070b8:	c5 28       	rjmp	8000715c <sd_mmc_mci_dma_read_open+0x160>
  }

  // Request Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
800070ba:	4a c8       	lddpc	r8,80007168 <sd_mmc_mci_dma_read_open+0x16c>
800070bc:	70 08       	ld.w	r8,r8[0x0]
800070be:	e0 6b 02 00 	mov	r11,512
800070c2:	10 9c       	mov	r12,r8
800070c4:	f0 1f 00 30 	mcall	80007184 <sd_mmc_mci_dma_read_open+0x188>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
800070c8:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800070cc:	4a 78       	lddpc	r8,80007168 <sd_mmc_mci_dma_read_open+0x16c>
800070ce:	70 08       	ld.w	r8,r8[0x0]
800070d0:	12 9b       	mov	r11,r9
800070d2:	10 9c       	mov	r12,r8
800070d4:	f0 1f 00 2d 	mcall	80007188 <sd_mmc_mci_dma_read_open+0x18c>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
800070d8:	fc 18 ff 10 	movh	r8,0xff10
800070dc:	30 19       	mov	r9,1
800070de:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
800070e2:	fe 68 40 00 	mov	r8,-114688
800070e6:	30 09       	mov	r9,0
800070e8:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
800070ec:	fc 18 ff 10 	movh	r8,0xff10
800070f0:	30 09       	mov	r9,0
800070f2:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
800070f6:	fc 18 ff 10 	movh	r8,0xff10
800070fa:	e0 69 d8 24 	mov	r9,55332
800070fe:	ea 19 00 a0 	orh	r9,0xa0
80007102:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
80007106:	fc 18 ff 10 	movh	r8,0xff10
8000710a:	30 09       	mov	r9,0
8000710c:	f1 49 00 98 	st.w	r8[152],r9
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: ignored because the dst is memory.
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: hw handshaking
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80007110:	fc 18 ff 10 	movh	r8,0xff10
80007114:	e0 69 01 00 	mov	r9,256
80007118:	f1 49 00 9c 	st.w	r8[156],r9
    (0                      << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf: ignored because the dst is memory.
    (AVR32_DMACA_CH_MMCI_RX << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf:
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
8000711c:	fe 68 40 00 	mov	r8,-114688
80007120:	e0 69 01 30 	mov	r9,304
80007124:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD17)
  if(mci_send_cmd(mci, SD_MMC_READ_MULTIPLE_BLOCK_CMD, addr)!=MCI_SUCCESS)
80007128:	49 08       	lddpc	r8,80007168 <sd_mmc_mci_dma_read_open+0x16c>
8000712a:	70 08       	ld.w	r8,r8[0x0]
8000712c:	ee fa ff fc 	ld.w	r10,r7[-4]
80007130:	ec 7b 10 52 	mov	r11,856146
80007134:	10 9c       	mov	r12,r8
80007136:	f0 1f 00 13 	mcall	80007180 <sd_mmc_mci_dma_read_open+0x184>
8000713a:	18 98       	mov	r8,r12
8000713c:	58 08       	cp.w	r8,0
8000713e:	c0 30       	breq	80007144 <sd_mmc_mci_dma_read_open+0x148>
  {
    return false;
80007140:	30 08       	mov	r8,0
80007142:	c0 d8       	rjmp	8000715c <sd_mmc_mci_dma_read_open+0x160>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
80007144:	48 98       	lddpc	r8,80007168 <sd_mmc_mci_dma_read_open+0x16c>
80007146:	70 08       	ld.w	r8,r8[0x0]
80007148:	10 9c       	mov	r12,r8
8000714a:	f0 1f 00 11 	mcall	8000718c <sd_mmc_mci_dma_read_open+0x190>
8000714e:	18 98       	mov	r8,r12
80007150:	e6 18 f0 50 	andh	r8,0xf050,COH
80007154:	c0 30       	breq	8000715a <sd_mmc_mci_dma_read_open+0x15e>
  {
    return false;
80007156:	30 08       	mov	r8,0
80007158:	c0 28       	rjmp	8000715c <sd_mmc_mci_dma_read_open+0x160>
  }

  return true;
8000715a:	30 18       	mov	r8,1
}
8000715c:	10 9c       	mov	r12,r8
8000715e:	2f bd       	sub	sp,-20
80007160:	e3 cd 80 80 	ldm	sp++,r7,pc
80007164:	00 00       	add	r0,r0
80007166:	0b ac       	ld.ub	r12,r5[0x2]
80007168:	00 00       	add	r0,r0
8000716a:	01 34       	ld.ub	r4,r0++
8000716c:	80 00       	ld.sh	r0,r0[0x0]
8000716e:	90 88       	ld.uh	r8,r8[0x0]
80007170:	00 00       	add	r0,r0
80007172:	06 98       	mov	r8,r3
80007174:	80 00       	ld.sh	r0,r0[0x0]
80007176:	90 44       	ld.sh	r4,r8[0x8]
80007178:	00 00       	add	r0,r0
8000717a:	0d b4       	ld.ub	r4,r6[0x3]
8000717c:	00 00       	add	r0,r0
8000717e:	09 9c       	ld.ub	r12,r4[0x1]
80007180:	80 00       	ld.sh	r0,r0[0x0]
80007182:	8e f0       	ld.uh	r0,r7[0xe]
80007184:	80 00       	ld.sh	r0,r0[0x0]
80007186:	8e 70       	ld.sh	r0,r7[0xe]
80007188:	80 00       	ld.sh	r0,r0[0x0]
8000718a:	8e ba       	ld.uh	r10,r7[0x6]
8000718c:	80 00       	ld.sh	r0,r0[0x0]
8000718e:	90 28       	ld.sh	r8,r8[0x4]

80007190 <sd_mmc_mci_read_close>:

bool sd_mmc_mci_read_close (uint8_t slot)
{
80007190:	eb cd 40 80 	pushm	r7,lr
80007194:	1a 97       	mov	r7,sp
80007196:	20 3d       	sub	sp,12
80007198:	18 98       	mov	r8,r12
8000719a:	ef 68 ff f4 	st.b	r7[-12],r8
  if( (mci_crc_error(mci)) )
8000719e:	4a 08       	lddpc	r8,8000721c <sd_mmc_mci_read_close+0x8c>
800071a0:	70 08       	ld.w	r8,r8[0x0]
800071a2:	ef 48 ff f8 	st.w	r7[-8],r8
800071a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800071aa:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800071ae:	49 d8       	lddpc	r8,80007220 <sd_mmc_mci_read_close+0x90>
800071b0:	70 08       	ld.w	r8,r8[0x0]
800071b2:	10 99       	mov	r9,r8
800071b4:	e6 19 01 e0 	andh	r9,0x1e0,COH
800071b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800071bc:	71 08       	ld.w	r8,r8[0x40]
800071be:	f3 e8 10 08 	or	r8,r9,r8
800071c2:	10 99       	mov	r9,r8
800071c4:	49 78       	lddpc	r8,80007220 <sd_mmc_mci_read_close+0x90>
800071c6:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800071c8:	49 68       	lddpc	r8,80007220 <sd_mmc_mci_read_close+0x90>
800071ca:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
800071cc:	e6 18 00 20 	andh	r8,0x20,COH
800071d0:	c0 90       	breq	800071e2 <sd_mmc_mci_read_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
800071d2:	49 48       	lddpc	r8,80007220 <sd_mmc_mci_read_close+0x90>
800071d4:	70 08       	ld.w	r8,r8[0x0]
800071d6:	10 99       	mov	r9,r8
800071d8:	b5 d9       	cbr	r9,0x15
800071da:	49 28       	lddpc	r8,80007220 <sd_mmc_mci_read_close+0x90>
800071dc:	91 09       	st.w	r8[0x0],r9
    return true;
800071de:	30 18       	mov	r8,1
800071e0:	c0 28       	rjmp	800071e4 <sd_mmc_mci_read_close+0x54>
  }
  else
    return false;
800071e2:	30 08       	mov	r8,0
800071e4:	58 08       	cp.w	r8,0
800071e6:	c0 30       	breq	800071ec <sd_mmc_mci_read_close+0x5c>
  {
    return false;  // An CRC error has been seen
800071e8:	30 08       	mov	r8,0
800071ea:	c1 48       	rjmp	80007212 <sd_mmc_mci_read_close+0x82>
  }

  mci_wait_busy_signal(mci);
800071ec:	48 c8       	lddpc	r8,8000721c <sd_mmc_mci_read_close+0x8c>
800071ee:	70 08       	ld.w	r8,r8[0x0]
800071f0:	10 9c       	mov	r12,r8
800071f2:	f0 1f 00 0d 	mcall	80007224 <sd_mmc_mci_read_close+0x94>

  if( mci_send_cmd( mci, SD_MMC_STOP_READ_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
800071f6:	48 a8       	lddpc	r8,8000721c <sd_mmc_mci_read_close+0x8c>
800071f8:	70 08       	ld.w	r8,r8[0x0]
800071fa:	3f fa       	mov	r10,-1
800071fc:	e2 6b 10 4c 	mov	r11,135244
80007200:	10 9c       	mov	r12,r8
80007202:	f0 1f 00 0a 	mcall	80007228 <sd_mmc_mci_read_close+0x98>
80007206:	18 98       	mov	r8,r12
80007208:	58 08       	cp.w	r8,0
8000720a:	c0 30       	breq	80007210 <sd_mmc_mci_read_close+0x80>
    return false;
8000720c:	30 08       	mov	r8,0
8000720e:	c0 28       	rjmp	80007212 <sd_mmc_mci_read_close+0x82>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  return true;
80007210:	30 18       	mov	r8,1
}
80007212:	10 9c       	mov	r12,r8
80007214:	2f dd       	sub	sp,-12
80007216:	e3 cd 80 80 	ldm	sp++,r7,pc
8000721a:	00 00       	add	r0,r0
8000721c:	00 00       	add	r0,r0
8000721e:	01 34       	ld.ub	r4,r0++
80007220:	00 00       	add	r0,r0
80007222:	08 24       	rsub	r4,r4
80007224:	80 00       	ld.sh	r0,r0[0x0]
80007226:	90 44       	ld.sh	r4,r8[0x8]
80007228:	80 00       	ld.sh	r0,r0[0x0]
8000722a:	8e f0       	ld.uh	r0,r7[0xe]

8000722c <sd_mmc_mci_dma_write_open>:

  return true;
}

bool sd_mmc_mci_dma_write_open (uint8_t slot, uint32_t pos, const void* ram, uint16_t nb_sector)
{
8000722c:	eb cd 40 80 	pushm	r7,lr
80007230:	1a 97       	mov	r7,sp
80007232:	20 5d       	sub	sp,20
80007234:	ef 4b ff f4 	st.w	r7[-12],r11
80007238:	ef 4a ff f0 	st.w	r7[-16],r10
8000723c:	12 98       	mov	r8,r9
8000723e:	18 99       	mov	r9,r12
80007240:	ef 69 ff f8 	st.b	r7[-8],r9
80007244:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
80007248:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000724c:	30 18       	mov	r8,1
8000724e:	f0 09 18 00 	cp.b	r9,r8
80007252:	e0 88 00 04 	brls	8000725a <sd_mmc_mci_dma_write_open+0x2e>
    return false;
80007256:	30 08       	mov	r8,0
80007258:	c8 88       	rjmp	80007368 <sd_mmc_mci_dma_write_open+0x13c>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000725a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000725e:	4c 59       	lddpc	r9,80007370 <sd_mmc_mci_dma_write_open+0x144>
80007260:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007264:	10 9a       	mov	r10,r8
80007266:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000726a:	4c 38       	lddpc	r8,80007374 <sd_mmc_mci_dma_write_open+0x148>
8000726c:	70 08       	ld.w	r8,r8[0x0]
8000726e:	12 9b       	mov	r11,r9
80007270:	10 9c       	mov	r12,r8
80007272:	f0 1f 00 42 	mcall	80007378 <sd_mmc_mci_dma_write_open+0x14c>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
80007276:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000727a:	4c 18       	lddpc	r8,8000737c <sd_mmc_mci_dma_write_open+0x150>
8000727c:	ee fa ff f4 	ld.w	r10,r7[-12]
80007280:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
80007284:	4b c8       	lddpc	r8,80007374 <sd_mmc_mci_dma_write_open+0x148>
80007286:	70 08       	ld.w	r8,r8[0x0]
80007288:	10 9c       	mov	r12,r8
8000728a:	f0 1f 00 3e 	mcall	80007380 <sd_mmc_mci_dma_write_open+0x154>
      return false;
   }
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
8000728e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007292:	4b b8       	lddpc	r8,8000737c <sd_mmc_mci_dma_write_open+0x150>
80007294:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007298:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
8000729c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800072a0:	4b 99       	lddpc	r9,80007384 <sd_mmc_mci_dma_write_open+0x158>
800072a2:	f2 08 07 08 	ld.ub	r8,r9[r8]
800072a6:	e2 18 00 10 	andl	r8,0x10,COH
800072aa:	c0 e1       	brne	800072c6 <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
800072ac:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800072b0:	4b 59       	lddpc	r9,80007384 <sd_mmc_mci_dma_write_open+0x158>
800072b2:	f2 08 07 08 	ld.ub	r8,r9[r8]
800072b6:	e2 18 00 20 	andl	r8,0x20,COH
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800072ba:	c0 61       	brne	800072c6 <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
800072bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800072c0:	a9 78       	lsl	r8,0x9
800072c2:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  // Set Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
800072c6:	4a c8       	lddpc	r8,80007374 <sd_mmc_mci_dma_write_open+0x148>
800072c8:	70 08       	ld.w	r8,r8[0x0]
800072ca:	e0 6b 02 00 	mov	r11,512
800072ce:	10 9c       	mov	r12,r8
800072d0:	f0 1f 00 2e 	mcall	80007388 <sd_mmc_mci_dma_write_open+0x15c>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
800072d4:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800072d8:	4a 78       	lddpc	r8,80007374 <sd_mmc_mci_dma_write_open+0x148>
800072da:	70 08       	ld.w	r8,r8[0x0]
800072dc:	12 9b       	mov	r11,r9
800072de:	10 9c       	mov	r12,r8
800072e0:	f0 1f 00 2b 	mcall	8000738c <sd_mmc_mci_dma_write_open+0x160>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
800072e4:	fc 18 ff 10 	movh	r8,0xff10
800072e8:	30 19       	mov	r9,1
800072ea:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
800072ee:	fe 68 40 00 	mov	r8,-114688
800072f2:	30 09       	mov	r9,0
800072f4:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
800072f8:	fc 18 ff 10 	movh	r8,0xff10
800072fc:	30 09       	mov	r9,0
800072fe:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
80007302:	fc 18 ff 10 	movh	r8,0xff10
80007306:	e0 69 d8 24 	mov	r9,55332
8000730a:	ea 19 02 10 	orh	r9,0x210
8000730e:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
80007312:	fc 18 ff 10 	movh	r8,0xff10
80007316:	30 09       	mov	r9,0
80007318:	f1 49 00 98 	st.w	r8[152],r9
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: hw handshaking
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
8000731c:	fc 18 ff 10 	movh	r8,0xff10
80007320:	e0 69 18 00 	mov	r9,6144
80007324:	f1 49 00 9c 	st.w	r8[156],r9
    (AVR32_DMACA_CH_MMCI_TX << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf:
    (0                      << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
80007328:	fe 68 40 00 	mov	r8,-114688
8000732c:	e0 69 01 30 	mov	r9,304
80007330:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD24)
  if(mci_send_cmd(mci, SD_MMC_WRITE_MULTIPLE_BLOCK_CMD, addr )!=MCI_SUCCESS)
80007334:	49 08       	lddpc	r8,80007374 <sd_mmc_mci_dma_write_open+0x148>
80007336:	70 08       	ld.w	r8,r8[0x0]
80007338:	ee fa ff fc 	ld.w	r10,r7[-4]
8000733c:	e8 7b 10 59 	mov	r11,594009
80007340:	10 9c       	mov	r12,r8
80007342:	f0 1f 00 14 	mcall	80007390 <sd_mmc_mci_dma_write_open+0x164>
80007346:	18 98       	mov	r8,r12
80007348:	58 08       	cp.w	r8,0
8000734a:	c0 30       	breq	80007350 <sd_mmc_mci_dma_write_open+0x124>
  {
    return false;
8000734c:	30 08       	mov	r8,0
8000734e:	c0 d8       	rjmp	80007368 <sd_mmc_mci_dma_write_open+0x13c>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
80007350:	48 98       	lddpc	r8,80007374 <sd_mmc_mci_dma_write_open+0x148>
80007352:	70 08       	ld.w	r8,r8[0x0]
80007354:	10 9c       	mov	r12,r8
80007356:	f0 1f 00 10 	mcall	80007394 <sd_mmc_mci_dma_write_open+0x168>
8000735a:	18 98       	mov	r8,r12
8000735c:	e6 18 f0 50 	andh	r8,0xf050,COH
80007360:	c0 30       	breq	80007366 <sd_mmc_mci_dma_write_open+0x13a>
  {
    return false;
80007362:	30 08       	mov	r8,0
80007364:	c0 28       	rjmp	80007368 <sd_mmc_mci_dma_write_open+0x13c>
  }

  return true;
80007366:	30 18       	mov	r8,1
}
80007368:	10 9c       	mov	r12,r8
8000736a:	2f bd       	sub	sp,-20
8000736c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007370:	00 00       	add	r0,r0
80007372:	0b ac       	ld.ub	r12,r5[0x2]
80007374:	00 00       	add	r0,r0
80007376:	01 34       	ld.ub	r4,r0++
80007378:	80 00       	ld.sh	r0,r0[0x0]
8000737a:	90 88       	ld.uh	r8,r8[0x0]
8000737c:	00 00       	add	r0,r0
8000737e:	06 98       	mov	r8,r3
80007380:	80 00       	ld.sh	r0,r0[0x0]
80007382:	90 44       	ld.sh	r4,r8[0x8]
80007384:	00 00       	add	r0,r0
80007386:	0d b4       	ld.ub	r4,r6[0x3]
80007388:	80 00       	ld.sh	r0,r0[0x0]
8000738a:	8e 70       	ld.sh	r0,r7[0xe]
8000738c:	80 00       	ld.sh	r0,r0[0x0]
8000738e:	8e ba       	ld.uh	r10,r7[0x6]
80007390:	80 00       	ld.sh	r0,r0[0x0]
80007392:	8e f0       	ld.uh	r0,r7[0xe]
80007394:	80 00       	ld.sh	r0,r0[0x0]
80007396:	90 28       	ld.sh	r8,r8[0x4]

80007398 <sd_mmc_mci_write_close>:

bool sd_mmc_mci_write_close (uint8_t slot)
{
80007398:	eb cd 40 80 	pushm	r7,lr
8000739c:	1a 97       	mov	r7,sp
8000739e:	20 5d       	sub	sp,20
800073a0:	18 98       	mov	r8,r12
800073a2:	ef 68 ff ec 	st.b	r7[-20],r8
  if( (mci_crc_error(mci)) )
800073a6:	4b 58       	lddpc	r8,80007478 <sd_mmc_mci_write_close+0xe0>
800073a8:	70 08       	ld.w	r8,r8[0x0]
800073aa:	ef 48 ff f0 	st.w	r7[-16],r8
800073ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800073b2:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800073b6:	4b 28       	lddpc	r8,8000747c <sd_mmc_mci_write_close+0xe4>
800073b8:	70 08       	ld.w	r8,r8[0x0]
800073ba:	10 99       	mov	r9,r8
800073bc:	e6 19 01 e0 	andh	r9,0x1e0,COH
800073c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800073c4:	71 08       	ld.w	r8,r8[0x40]
800073c6:	f3 e8 10 08 	or	r8,r9,r8
800073ca:	10 99       	mov	r9,r8
800073cc:	4a c8       	lddpc	r8,8000747c <sd_mmc_mci_write_close+0xe4>
800073ce:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800073d0:	4a b8       	lddpc	r8,8000747c <sd_mmc_mci_write_close+0xe4>
800073d2:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
800073d4:	e6 18 00 20 	andh	r8,0x20,COH
800073d8:	c0 90       	breq	800073ea <sd_mmc_mci_write_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
800073da:	4a 98       	lddpc	r8,8000747c <sd_mmc_mci_write_close+0xe4>
800073dc:	70 08       	ld.w	r8,r8[0x0]
800073de:	10 99       	mov	r9,r8
800073e0:	b5 d9       	cbr	r9,0x15
800073e2:	4a 78       	lddpc	r8,8000747c <sd_mmc_mci_write_close+0xe4>
800073e4:	91 09       	st.w	r8[0x0],r9
    return true;
800073e6:	30 18       	mov	r8,1
800073e8:	c0 28       	rjmp	800073ec <sd_mmc_mci_write_close+0x54>
  }
  else
    return false;
800073ea:	30 08       	mov	r8,0
800073ec:	58 08       	cp.w	r8,0
800073ee:	c0 30       	breq	800073f4 <sd_mmc_mci_write_close+0x5c>
  {
    return false;  // An CRC error has been seen
800073f0:	30 08       	mov	r8,0
800073f2:	c3 e8       	rjmp	8000746e <sd_mmc_mci_write_close+0xd6>
  }

  while(!(mci_data_block_ended(mci)));
800073f4:	4a 18       	lddpc	r8,80007478 <sd_mmc_mci_write_close+0xe0>
800073f6:	70 08       	ld.w	r8,r8[0x0]
800073f8:	ef 48 ff f8 	st.w	r7[-8],r8
800073fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007400:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80007404:	49 e8       	lddpc	r8,8000747c <sd_mmc_mci_write_close+0xe4>
80007406:	70 08       	ld.w	r8,r8[0x0]
80007408:	10 99       	mov	r9,r8
8000740a:	e6 19 01 e0 	andh	r9,0x1e0,COH
8000740e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007412:	71 08       	ld.w	r8,r8[0x40]
80007414:	f3 e8 10 08 	or	r8,r9,r8
80007418:	10 99       	mov	r9,r8
8000741a:	49 98       	lddpc	r8,8000747c <sd_mmc_mci_write_close+0xe4>
8000741c:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
8000741e:	49 88       	lddpc	r8,8000747c <sd_mmc_mci_write_close+0xe4>
80007420:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_data_block_ended(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_XFRDONE_MASK) != 0;
80007422:	e6 18 08 00 	andh	r8,0x800,COH
80007426:	5f 18       	srne	r8
80007428:	58 08       	cp.w	r8,0
8000742a:	ce 50       	breq	800073f4 <sd_mmc_mci_write_close+0x5c>

  if( mci_send_cmd( mci, SD_MMC_STOP_WRITE_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
8000742c:	49 38       	lddpc	r8,80007478 <sd_mmc_mci_write_close+0xe0>
8000742e:	70 08       	ld.w	r8,r8[0x0]
80007430:	3f fa       	mov	r10,-1
80007432:	e2 6b 10 cc 	mov	r11,135372
80007436:	10 9c       	mov	r12,r8
80007438:	f0 1f 00 12 	mcall	80007480 <sd_mmc_mci_write_close+0xe8>
8000743c:	18 98       	mov	r8,r12
8000743e:	58 08       	cp.w	r8,0
80007440:	c0 30       	breq	80007446 <sd_mmc_mci_write_close+0xae>
  {
    return false;
80007442:	30 08       	mov	r8,0
80007444:	c1 58       	rjmp	8000746e <sd_mmc_mci_write_close+0xd6>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  if( slot==SD_SLOT_4BITS )
80007446:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000744a:	30 18       	mov	r8,1
8000744c:	f0 09 18 00 	cp.b	r9,r8
80007450:	c0 81       	brne	80007460 <sd_mmc_mci_write_close+0xc8>
  {
    while(!(gpio_get_pin_value(SD_SLOT_4BITS_DATA0_PIN)));                             // Wait until the card is ready.
80007452:	31 3c       	mov	r12,19
80007454:	f0 1f 00 0c 	mcall	80007484 <sd_mmc_mci_write_close+0xec>
80007458:	18 98       	mov	r8,r12
8000745a:	58 08       	cp.w	r8,0
8000745c:	cf b0       	breq	80007452 <sd_mmc_mci_write_close+0xba>
8000745e:	c0 78       	rjmp	8000746c <sd_mmc_mci_write_close+0xd4>
  }
  else
  {
    while(!(gpio_get_pin_value(SD_SLOT_8BITS_DATA0_PIN)));                             // Wait until the card is ready.
80007460:	31 dc       	mov	r12,29
80007462:	f0 1f 00 09 	mcall	80007484 <sd_mmc_mci_write_close+0xec>
80007466:	18 98       	mov	r8,r12
80007468:	58 08       	cp.w	r8,0
8000746a:	cf b0       	breq	80007460 <sd_mmc_mci_write_close+0xc8>
  }
  return true;
8000746c:	30 18       	mov	r8,1
}
8000746e:	10 9c       	mov	r12,r8
80007470:	2f bd       	sub	sp,-20
80007472:	e3 cd 80 80 	ldm	sp++,r7,pc
80007476:	00 00       	add	r0,r0
80007478:	00 00       	add	r0,r0
8000747a:	01 34       	ld.ub	r4,r0++
8000747c:	00 00       	add	r0,r0
8000747e:	08 24       	rsub	r4,r4
80007480:	80 00       	ld.sh	r0,r0[0x0]
80007482:	8e f0       	ld.uh	r0,r7[0xe]
80007484:	80 00       	ld.sh	r0,r0[0x0]
80007486:	89 1c       	st.w	r4[0x4],r12

80007488 <int2alpha>:

char Statement[MSG_LENGTH] = {0};
uint16_t enciphered_blocks = 0, deciphered_blocks = 0, aes_step = 0;
//MESSAGE_STRING_t Lcd_Message;
void int2alpha (uint16_t value, char * dest)
{
80007488:	eb cd 40 80 	pushm	r7,lr
8000748c:	1a 97       	mov	r7,sp
8000748e:	20 5d       	sub	sp,20
80007490:	18 98       	mov	r8,r12
80007492:	ef 4b ff ec 	st.w	r7[-20],r11
80007496:	ef 58 ff f0 	st.h	r7[-16],r8
	uint8_t i = 0, value_len = 0, temp[10];
8000749a:	30 08       	mov	r8,0
8000749c:	ef 68 ff fe 	st.b	r7[-2],r8
800074a0:	30 08       	mov	r8,0
800074a2:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (value == 0)
800074a6:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800074aa:	30 08       	mov	r8,0
800074ac:	f0 09 19 00 	cp.h	r9,r8
800074b0:	c2 c1       	brne	80007508 <int2alpha+0x80>
	{
		return;
800074b2:	c5 68       	rjmp	8000755e <int2alpha+0xd6>
	}
	while (value != 0)
	{
		temp[i++] = value % 10 + '0';
800074b4:	ef 3b ff fe 	ld.ub	r11,r7[-2]
800074b8:	ef 1a ff f0 	ld.uh	r10,r7[-16]
800074bc:	e0 68 cc cd 	mov	r8,52429
800074c0:	ea 18 cc cc 	orh	r8,0xcccc
800074c4:	f4 08 06 48 	mulu.d	r8,r10,r8
800074c8:	a3 99       	lsr	r9,0x3
800074ca:	12 98       	mov	r8,r9
800074cc:	a3 68       	lsl	r8,0x2
800074ce:	12 08       	add	r8,r9
800074d0:	a1 78       	lsl	r8,0x1
800074d2:	f4 08 01 08 	sub	r8,r10,r8
800074d6:	5c 88       	casts.h	r8
800074d8:	5c 58       	castu.b	r8
800074da:	2d 08       	sub	r8,-48
800074dc:	5c 58       	castu.b	r8
800074de:	ee 0b 00 09 	add	r9,r7,r11
800074e2:	f3 68 ff f4 	st.b	r9[-12],r8
800074e6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800074ea:	2f f8       	sub	r8,-1
800074ec:	ef 68 ff fe 	st.b	r7[-2],r8
		value /= 10;
800074f0:	ef 19 ff f0 	ld.uh	r9,r7[-16]
800074f4:	e0 68 cc cd 	mov	r8,52429
800074f8:	ea 18 cc cc 	orh	r8,0xcccc
800074fc:	f2 08 06 48 	mulu.d	r8,r9,r8
80007500:	f2 08 16 03 	lsr	r8,r9,0x3
80007504:	ef 58 ff f0 	st.h	r7[-16],r8
	
	if (value == 0)
	{
		return;
	}
	while (value != 0)
80007508:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000750c:	30 08       	mov	r8,0
8000750e:	f0 09 19 00 	cp.h	r9,r8
80007512:	cd 11       	brne	800074b4 <int2alpha+0x2c>
	{
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
80007514:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007518:	ef 68 ff ff 	st.b	r7[-1],r8
	i  = 0;
8000751c:	30 08       	mov	r8,0
8000751e:	ef 68 ff fe 	st.b	r7[-2],r8
	while (i < value_len)
80007522:	c1 78       	rjmp	80007550 <int2alpha+0xc8>
	{
		dest[i] = temp[value_len - i - 1];
80007524:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007528:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000752c:	10 09       	add	r9,r8
8000752e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80007532:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007536:	f4 08 01 08 	sub	r8,r10,r8
8000753a:	20 18       	sub	r8,1
8000753c:	ee 08 00 08 	add	r8,r7,r8
80007540:	f1 38 ff f4 	ld.ub	r8,r8[-12]
80007544:	b2 88       	st.b	r9[0x0],r8
		i++;
80007546:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000754a:	2f f8       	sub	r8,-1
8000754c:	ef 68 ff fe 	st.b	r7[-2],r8
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
	i  = 0;
	while (i < value_len)
80007550:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007554:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007558:	f0 09 18 00 	cp.b	r9,r8
8000755c:	ce 43       	brcs	80007524 <int2alpha+0x9c>
	{
		dest[i] = temp[value_len - i - 1];
		i++;
	}
}
8000755e:	2f bd       	sub	sp,-20
80007560:	e3 cd 80 80 	ldm	sp++,r7,pc

80007564 <string_len>:

uint8_t string_len(char * source_str)
{
80007564:	eb cd 40 80 	pushm	r7,lr
80007568:	1a 97       	mov	r7,sp
8000756a:	20 2d       	sub	sp,8
8000756c:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t i = 0;
80007570:	30 08       	mov	r8,0
80007572:	ef 68 ff ff 	st.b	r7[-1],r8
	
	while (*source_str++ != '\0')
80007576:	c0 68       	rjmp	80007582 <string_len+0x1e>
	{
		i++;
80007578:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000757c:	2f f8       	sub	r8,-1
8000757e:	ef 68 ff ff 	st.b	r7[-1],r8

uint8_t string_len(char * source_str)
{
	uint8_t i = 0;
	
	while (*source_str++ != '\0')
80007582:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007586:	11 89       	ld.ub	r9,r8[0x0]
80007588:	30 08       	mov	r8,0
8000758a:	f0 09 18 00 	cp.b	r9,r8
8000758e:	5f 18       	srne	r8
80007590:	5c 58       	castu.b	r8
80007592:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007596:	2f f9       	sub	r9,-1
80007598:	ef 49 ff f8 	st.w	r7[-8],r9
8000759c:	58 08       	cp.w	r8,0
8000759e:	ce d1       	brne	80007578 <string_len+0x14>
	{
		i++;
	}
	return i;
800075a0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800075a4:	10 9c       	mov	r12,r8
800075a6:	2f ed       	sub	sp,-8
800075a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800075ac <string_cat>:

void string_cat(const char * source, char * dest)
{
800075ac:	eb cd 40 80 	pushm	r7,lr
800075b0:	1a 97       	mov	r7,sp
800075b2:	20 2d       	sub	sp,8
800075b4:	ef 4c ff fc 	st.w	r7[-4],r12
800075b8:	ef 4b ff f8 	st.w	r7[-8],r11
	while (*source != '\0')
800075bc:	c1 18       	rjmp	800075de <string_cat+0x32>
	{
		*dest++ = *source++;
800075be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800075c2:	11 88       	ld.ub	r8,r8[0x0]
800075c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800075c8:	b2 88       	st.b	r9[0x0],r8
800075ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800075ce:	2f f8       	sub	r8,-1
800075d0:	ef 48 ff f8 	st.w	r7[-8],r8
800075d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800075d8:	2f f8       	sub	r8,-1
800075da:	ef 48 ff fc 	st.w	r7[-4],r8
	return i;
}

void string_cat(const char * source, char * dest)
{
	while (*source != '\0')
800075de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800075e2:	11 88       	ld.ub	r8,r8[0x0]
800075e4:	58 08       	cp.w	r8,0
800075e6:	ce c1       	brne	800075be <string_cat+0x12>
	{
		*dest++ = *source++;
	}
}
800075e8:	2f ed       	sub	sp,-8
800075ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800075ee:	d7 03       	nop

800075f0 <sd_mmc_mci_read_multiple_sector>:

bool sd_mmc_mci_read_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
800075f0:	eb cd 40 80 	pushm	r7,lr
800075f4:	1a 97       	mov	r7,sp
800075f6:	20 5d       	sub	sp,20
800075f8:	18 99       	mov	r9,r12
800075fa:	16 98       	mov	r8,r11
800075fc:	ef 4a ff ec 	st.w	r7[-20],r10
80007600:	ef 69 ff f4 	st.b	r7[-12],r9
80007604:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
80007608:	30 18       	mov	r8,1
8000760a:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
8000760e:	30 08       	mov	r8,0
80007610:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
80007614:	30 08       	mov	r8,0
80007616:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
8000761a:	30 08       	mov	r8,0
8000761c:	ef 68 ff ff 	st.b	r7[-1],r8
80007620:	c0 c8       	rjmp	80007638 <sd_mmc_mci_read_multiple_sector+0x48>
  {
	  Statement[i] = 0;
80007622:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007626:	4f 6a       	lddpc	r10,800077fc <sd_mmc_mci_read_multiple_sector+0x20c>
80007628:	30 08       	mov	r8,0
8000762a:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
8000762e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007632:	2f f8       	sub	r8,-1
80007634:	ef 68 ff ff 	st.b	r7[-1],r8
80007638:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000763c:	36 38       	mov	r8,99
8000763e:	f0 09 18 00 	cp.b	r9,r8
80007642:	fe 98 ff f0 	brls	80007622 <sd_mmc_mci_read_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
80007646:	4e f8       	lddpc	r8,80007800 <sd_mmc_mci_read_multiple_sector+0x210>
80007648:	90 08       	ld.sh	r8,r8[0x0]
8000764a:	2f f8       	sub	r8,-1
8000764c:	5c 88       	casts.h	r8
8000764e:	4e d9       	lddpc	r9,80007800 <sd_mmc_mci_read_multiple_sector+0x210>
80007650:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks = 0;
80007652:	4e d9       	lddpc	r9,80007804 <sd_mmc_mci_read_multiple_sector+0x214>
80007654:	30 08       	mov	r8,0
80007656:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks += nb_sector;
80007658:	4e c8       	lddpc	r8,80007808 <sd_mmc_mci_read_multiple_sector+0x218>
8000765a:	90 08       	ld.sh	r8,r8[0x0]
8000765c:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007660:	f2 08 00 08 	add	r8,r9,r8
80007664:	5c 88       	casts.h	r8
80007666:	4e 99       	lddpc	r9,80007808 <sd_mmc_mci_read_multiple_sector+0x218>
80007668:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
8000766a:	4e 68       	lddpc	r8,80007800 <sd_mmc_mci_read_multiple_sector+0x210>
8000766c:	90 08       	ld.sh	r8,r8[0x0]
8000766e:	5c 78       	castu.h	r8
80007670:	4e 3b       	lddpc	r11,800077fc <sd_mmc_mci_read_multiple_sector+0x20c>
80007672:	10 9c       	mov	r12,r8
80007674:	f0 1f 00 66 	mcall	8000780c <sd_mmc_mci_read_multiple_sector+0x21c>
  string_cat(" Deciphered ", &Statement[string_len(Statement)]);
80007678:	4e 1c       	lddpc	r12,800077fc <sd_mmc_mci_read_multiple_sector+0x20c>
8000767a:	f0 1f 00 66 	mcall	80007810 <sd_mmc_mci_read_multiple_sector+0x220>
8000767e:	18 98       	mov	r8,r12
80007680:	10 99       	mov	r9,r8
80007682:	4d f8       	lddpc	r8,800077fc <sd_mmc_mci_read_multiple_sector+0x20c>
80007684:	f2 08 00 08 	add	r8,r9,r8
80007688:	10 9b       	mov	r11,r8
8000768a:	4e 3c       	lddpc	r12,80007814 <sd_mmc_mci_read_multiple_sector+0x224>
8000768c:	f0 1f 00 63 	mcall	80007818 <sd_mmc_mci_read_multiple_sector+0x228>
  int2alpha(deciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
80007690:	4d bc       	lddpc	r12,800077fc <sd_mmc_mci_read_multiple_sector+0x20c>
80007692:	f0 1f 00 60 	mcall	80007810 <sd_mmc_mci_read_multiple_sector+0x220>
80007696:	18 98       	mov	r8,r12
80007698:	10 99       	mov	r9,r8
8000769a:	4d 98       	lddpc	r8,800077fc <sd_mmc_mci_read_multiple_sector+0x20c>
8000769c:	10 09       	add	r9,r8
8000769e:	4d b8       	lddpc	r8,80007808 <sd_mmc_mci_read_multiple_sector+0x218>
800076a0:	90 08       	ld.sh	r8,r8[0x0]
800076a2:	5c 78       	castu.h	r8
800076a4:	12 9b       	mov	r11,r9
800076a6:	10 9c       	mov	r12,r8
800076a8:	f0 1f 00 59 	mcall	8000780c <sd_mmc_mci_read_multiple_sector+0x21c>
  string_cat(" sectors", &Statement[string_len(Statement)]);
800076ac:	4d 4c       	lddpc	r12,800077fc <sd_mmc_mci_read_multiple_sector+0x20c>
800076ae:	f0 1f 00 59 	mcall	80007810 <sd_mmc_mci_read_multiple_sector+0x220>
800076b2:	18 98       	mov	r8,r12
800076b4:	10 99       	mov	r9,r8
800076b6:	4d 28       	lddpc	r8,800077fc <sd_mmc_mci_read_multiple_sector+0x20c>
800076b8:	f2 08 00 08 	add	r8,r9,r8
800076bc:	10 9b       	mov	r11,r8
800076be:	4d 8c       	lddpc	r12,8000781c <sd_mmc_mci_read_multiple_sector+0x22c>
800076c0:	f0 1f 00 56 	mcall	80007818 <sd_mmc_mci_read_multiple_sector+0x228>
  
  //et024006_DrawFilledRect(10, 3 * 10, ET024006_WIDTH, 10, WHITE);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 3 * 10, WHITE, BLACK);
800076c4:	4d 7b       	lddpc	r11,80007820 <sd_mmc_mci_read_multiple_sector+0x230>
800076c6:	30 08       	mov	r8,0
800076c8:	1a d8       	st.w	--sp,r8
800076ca:	e0 68 ff ff 	mov	r8,65535
800076ce:	31 e9       	mov	r9,30
800076d0:	30 aa       	mov	r10,10
800076d2:	4c bc       	lddpc	r12,800077fc <sd_mmc_mci_read_multiple_sector+0x20c>
800076d4:	f0 1f 00 54 	mcall	80007824 <sd_mmc_mci_read_multiple_sector+0x234>
800076d8:	2f fd       	sub	sp,-4
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
800076da:	c5 48       	rjmp	80007782 <sd_mmc_mci_read_multiple_sector+0x192>
  {
    // (re)load first stage.
    dma_mci_2_ram((0==(buffer_id++%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
800076dc:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800076e0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800076e4:	5f 08       	sreq	r8
800076e6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800076ea:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800076ee:	2f f8       	sub	r8,-1
800076f0:	ef 68 ff fb 	st.b	r7[-5],r8
800076f4:	58 09       	cp.w	r9,0
800076f6:	c0 30       	breq	800076fc <sd_mmc_mci_read_multiple_sector+0x10c>
800076f8:	4c c8       	lddpc	r8,80007828 <sd_mmc_mci_read_multiple_sector+0x238>
800076fa:	c0 28       	rjmp	800076fe <sd_mmc_mci_read_multiple_sector+0x10e>
800076fc:	4c c8       	lddpc	r8,8000782c <sd_mmc_mci_read_multiple_sector+0x23c>
800076fe:	e0 6b 02 00 	mov	r11,512
80007702:	10 9c       	mov	r12,r8
80007704:	f0 1f 00 4b 	mcall	80007830 <sd_mmc_mci_read_multiple_sector+0x240>

    // (re)load second stage.
    if( !b_first_step )
80007708:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000770c:	ec 18 00 01 	eorl	r8,0x1
80007710:	5c 58       	castu.b	r8
80007712:	c2 e0       	breq	8000776e <sd_mmc_mci_read_multiple_sector+0x17e>
	{
      apply_aes_decryption(&AVR32_AES, (0==(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
80007714:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007718:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000771c:	c0 31       	brne	80007722 <sd_mmc_mci_read_multiple_sector+0x132>
8000771e:	4c 38       	lddpc	r8,80007828 <sd_mmc_mci_read_multiple_sector+0x238>
80007720:	c0 28       	rjmp	80007724 <sd_mmc_mci_read_multiple_sector+0x134>
80007722:	4c 38       	lddpc	r8,8000782c <sd_mmc_mci_read_multiple_sector+0x23c>
80007724:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007728:	e0 6a 02 00 	mov	r10,512
8000772c:	10 9b       	mov	r11,r8
8000772e:	fc 7c 00 00 	mov	r12,-196608
80007732:	f0 1f 00 41 	mcall	80007834 <sd_mmc_mci_read_multiple_sector+0x244>
	  addr = addr + 512L; //sector_index++;
80007736:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000773a:	f0 c8 fe 00 	sub	r8,r8,-512
8000773e:	ef 48 ff ec 	st.w	r7[-20],r8
	  if (!udi_msc_trans_block(true, (0==(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
80007742:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007746:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000774a:	c0 31       	brne	80007750 <sd_mmc_mci_read_multiple_sector+0x160>
8000774c:	4b 78       	lddpc	r8,80007828 <sd_mmc_mci_read_multiple_sector+0x238>
8000774e:	c0 28       	rjmp	80007752 <sd_mmc_mci_read_multiple_sector+0x162>
80007750:	4b 78       	lddpc	r8,8000782c <sd_mmc_mci_read_multiple_sector+0x23c>
80007752:	30 09       	mov	r9,0
80007754:	e0 6a 02 00 	mov	r10,512
80007758:	10 9b       	mov	r11,r8
8000775a:	30 1c       	mov	r12,1
8000775c:	f0 1f 00 37 	mcall	80007838 <sd_mmc_mci_read_multiple_sector+0x248>
80007760:	18 98       	mov	r8,r12
80007762:	ec 18 00 01 	eorl	r8,0x1
80007766:	5c 58       	castu.b	r8
80007768:	c0 30       	breq	8000776e <sd_mmc_mci_read_multiple_sector+0x17e>
	  {
    	    return false;
8000776a:	30 08       	mov	r8,0
8000776c:	c4 48       	rjmp	800077f4 <sd_mmc_mci_read_multiple_sector+0x204>
      }

    }
    b_first_step = false;
8000776e:	30 08       	mov	r8,0
80007770:	ef 68 ff fa 	st.b	r7[-6],r8
    // Wait completion of DMACA stage.
    while( !is_dma_mci_2_ram_complete() );
80007774:	f0 1f 00 32 	mcall	8000783c <sd_mmc_mci_read_multiple_sector+0x24c>
80007778:	18 98       	mov	r8,r12
8000777a:	ec 18 00 01 	eorl	r8,0x1
8000777e:	5c 58       	castu.b	r8
80007780:	cf a1       	brne	80007774 <sd_mmc_mci_read_multiple_sector+0x184>
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
80007782:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007786:	30 08       	mov	r8,0
80007788:	f0 09 19 00 	cp.h	r9,r8
8000778c:	5f 18       	srne	r8
8000778e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007792:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80007796:	20 18       	sub	r8,1
80007798:	ef 58 ff f0 	st.h	r7[-16],r8
8000779c:	58 09       	cp.w	r9,0
8000779e:	c9 f1       	brne	800076dc <sd_mmc_mci_read_multiple_sector+0xec>
    while( !is_dma_mci_2_ram_complete() );

  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_decryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
800077a0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800077a4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800077a8:	5c 58       	castu.b	r8
800077aa:	c0 30       	breq	800077b0 <sd_mmc_mci_read_multiple_sector+0x1c0>
800077ac:	49 f8       	lddpc	r8,80007828 <sd_mmc_mci_read_multiple_sector+0x238>
800077ae:	c0 28       	rjmp	800077b2 <sd_mmc_mci_read_multiple_sector+0x1c2>
800077b0:	49 f8       	lddpc	r8,8000782c <sd_mmc_mci_read_multiple_sector+0x23c>
800077b2:	ee f9 ff ec 	ld.w	r9,r7[-20]
800077b6:	e0 6a 02 00 	mov	r10,512
800077ba:	10 9b       	mov	r11,r8
800077bc:	fc 7c 00 00 	mov	r12,-196608
800077c0:	f0 1f 00 1d 	mcall	80007834 <sd_mmc_mci_read_multiple_sector+0x244>
  if (!udi_msc_trans_block(true, (0!=(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
800077c4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800077c8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800077cc:	5c 58       	castu.b	r8
800077ce:	c0 30       	breq	800077d4 <sd_mmc_mci_read_multiple_sector+0x1e4>
800077d0:	49 68       	lddpc	r8,80007828 <sd_mmc_mci_read_multiple_sector+0x238>
800077d2:	c0 28       	rjmp	800077d6 <sd_mmc_mci_read_multiple_sector+0x1e6>
800077d4:	49 68       	lddpc	r8,8000782c <sd_mmc_mci_read_multiple_sector+0x23c>
800077d6:	30 09       	mov	r9,0
800077d8:	e0 6a 02 00 	mov	r10,512
800077dc:	10 9b       	mov	r11,r8
800077de:	30 1c       	mov	r12,1
800077e0:	f0 1f 00 16 	mcall	80007838 <sd_mmc_mci_read_multiple_sector+0x248>
800077e4:	18 98       	mov	r8,r12
800077e6:	ec 18 00 01 	eorl	r8,0x1
800077ea:	5c 58       	castu.b	r8
800077ec:	c0 30       	breq	800077f2 <sd_mmc_mci_read_multiple_sector+0x202>
    return false;
800077ee:	30 08       	mov	r8,0
800077f0:	c0 28       	rjmp	800077f4 <sd_mmc_mci_read_multiple_sector+0x204>

  return true;
800077f2:	30 18       	mov	r8,1
}
800077f4:	10 9c       	mov	r12,r8
800077f6:	2f bd       	sub	sp,-20
800077f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800077fc:	00 00       	add	r0,r0
800077fe:	06 a0       	st.w	r3++,r0
80007800:	00 00       	add	r0,r0
80007802:	07 08       	ld.w	r8,r3++
80007804:	00 00       	add	r0,r0
80007806:	07 04       	ld.w	r4,r3++
80007808:	00 00       	add	r0,r0
8000780a:	07 06       	ld.w	r6,r3++
8000780c:	80 00       	ld.sh	r0,r0[0x0]
8000780e:	74 88       	ld.w	r8,r10[0x20]
80007810:	80 00       	ld.sh	r0,r0[0x0]
80007812:	75 64       	ld.w	r4,r10[0x58]
80007814:	80 00       	ld.sh	r0,r0[0x0]
80007816:	5e 38       	retlo	r8
80007818:	80 00       	ld.sh	r0,r0[0x0]
8000781a:	75 ac       	ld.w	r12,r10[0x68]
8000781c:	80 00       	ld.sh	r0,r0[0x0]
8000781e:	5e 48       	retge	r8
80007820:	80 00       	ld.sh	r0,r0[0x0]
80007822:	e9 b4       	*unknown*
80007824:	80 00       	ld.sh	r0,r0[0x0]
80007826:	44 a8       	lddsp	r8,sp[0x128]
80007828:	00 00       	add	r0,r0
8000782a:	0b b4       	ld.ub	r4,r5[0x3]
8000782c:	00 00       	add	r0,r0
8000782e:	09 ac       	ld.ub	r12,r4[0x2]
80007830:	80 00       	ld.sh	r0,r0[0x0]
80007832:	6e 3c       	ld.w	r12,r7[0xc]
80007834:	80 00       	ld.sh	r0,r0[0x0]
80007836:	40 b8       	lddsp	r8,sp[0x2c]
80007838:	80 00       	ld.sh	r0,r0[0x0]
8000783a:	cb e0       	breq	800077b6 <sd_mmc_mci_read_multiple_sector+0x1c6>
8000783c:	80 00       	ld.sh	r0,r0[0x0]
8000783e:	6e 8c       	ld.w	r12,r7[0x20]

80007840 <sd_mmc_mci_write_multiple_sector>:



bool sd_mmc_mci_write_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
80007840:	eb cd 40 80 	pushm	r7,lr
80007844:	1a 97       	mov	r7,sp
80007846:	20 5d       	sub	sp,20
80007848:	18 99       	mov	r9,r12
8000784a:	16 98       	mov	r8,r11
8000784c:	ef 4a ff ec 	st.w	r7[-20],r10
80007850:	ef 69 ff f4 	st.b	r7[-12],r9
80007854:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
80007858:	30 18       	mov	r8,1
8000785a:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
8000785e:	30 08       	mov	r8,0
80007860:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
80007864:	30 08       	mov	r8,0
80007866:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
8000786a:	30 08       	mov	r8,0
8000786c:	ef 68 ff ff 	st.b	r7[-1],r8
80007870:	c0 c8       	rjmp	80007888 <sd_mmc_mci_write_multiple_sector+0x48>
  {
	  Statement[i] = 0;
80007872:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007876:	4f 6a       	lddpc	r10,80007a4c <sd_mmc_mci_write_multiple_sector+0x20c>
80007878:	30 08       	mov	r8,0
8000787a:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
8000787e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007882:	2f f8       	sub	r8,-1
80007884:	ef 68 ff ff 	st.b	r7[-1],r8
80007888:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000788c:	36 38       	mov	r8,99
8000788e:	f0 09 18 00 	cp.b	r9,r8
80007892:	fe 98 ff f0 	brls	80007872 <sd_mmc_mci_write_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
80007896:	4e f8       	lddpc	r8,80007a50 <sd_mmc_mci_write_multiple_sector+0x210>
80007898:	90 08       	ld.sh	r8,r8[0x0]
8000789a:	2f f8       	sub	r8,-1
8000789c:	5c 88       	casts.h	r8
8000789e:	4e d9       	lddpc	r9,80007a50 <sd_mmc_mci_write_multiple_sector+0x210>
800078a0:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks = 0;
800078a2:	4e d9       	lddpc	r9,80007a54 <sd_mmc_mci_write_multiple_sector+0x214>
800078a4:	30 08       	mov	r8,0
800078a6:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks += nb_sector;
800078a8:	4e c8       	lddpc	r8,80007a58 <sd_mmc_mci_write_multiple_sector+0x218>
800078aa:	90 08       	ld.sh	r8,r8[0x0]
800078ac:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800078b0:	f2 08 00 08 	add	r8,r9,r8
800078b4:	5c 88       	casts.h	r8
800078b6:	4e 99       	lddpc	r9,80007a58 <sd_mmc_mci_write_multiple_sector+0x218>
800078b8:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
800078ba:	4e 68       	lddpc	r8,80007a50 <sd_mmc_mci_write_multiple_sector+0x210>
800078bc:	90 08       	ld.sh	r8,r8[0x0]
800078be:	5c 78       	castu.h	r8
800078c0:	4e 3b       	lddpc	r11,80007a4c <sd_mmc_mci_write_multiple_sector+0x20c>
800078c2:	10 9c       	mov	r12,r8
800078c4:	f0 1f 00 66 	mcall	80007a5c <sd_mmc_mci_write_multiple_sector+0x21c>
  string_cat(" Enciphered ", &Statement[string_len(Statement)]);
800078c8:	4e 1c       	lddpc	r12,80007a4c <sd_mmc_mci_write_multiple_sector+0x20c>
800078ca:	f0 1f 00 66 	mcall	80007a60 <sd_mmc_mci_write_multiple_sector+0x220>
800078ce:	18 98       	mov	r8,r12
800078d0:	10 99       	mov	r9,r8
800078d2:	4d f8       	lddpc	r8,80007a4c <sd_mmc_mci_write_multiple_sector+0x20c>
800078d4:	f2 08 00 08 	add	r8,r9,r8
800078d8:	10 9b       	mov	r11,r8
800078da:	4e 3c       	lddpc	r12,80007a64 <sd_mmc_mci_write_multiple_sector+0x224>
800078dc:	f0 1f 00 63 	mcall	80007a68 <sd_mmc_mci_write_multiple_sector+0x228>
  int2alpha(enciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
800078e0:	4d bc       	lddpc	r12,80007a4c <sd_mmc_mci_write_multiple_sector+0x20c>
800078e2:	f0 1f 00 60 	mcall	80007a60 <sd_mmc_mci_write_multiple_sector+0x220>
800078e6:	18 98       	mov	r8,r12
800078e8:	10 99       	mov	r9,r8
800078ea:	4d 98       	lddpc	r8,80007a4c <sd_mmc_mci_write_multiple_sector+0x20c>
800078ec:	10 09       	add	r9,r8
800078ee:	4d b8       	lddpc	r8,80007a58 <sd_mmc_mci_write_multiple_sector+0x218>
800078f0:	90 08       	ld.sh	r8,r8[0x0]
800078f2:	5c 78       	castu.h	r8
800078f4:	12 9b       	mov	r11,r9
800078f6:	10 9c       	mov	r12,r8
800078f8:	f0 1f 00 59 	mcall	80007a5c <sd_mmc_mci_write_multiple_sector+0x21c>
  string_cat(" sectors", &Statement[string_len(Statement)]);
800078fc:	4d 4c       	lddpc	r12,80007a4c <sd_mmc_mci_write_multiple_sector+0x20c>
800078fe:	f0 1f 00 59 	mcall	80007a60 <sd_mmc_mci_write_multiple_sector+0x220>
80007902:	18 98       	mov	r8,r12
80007904:	10 99       	mov	r9,r8
80007906:	4d 28       	lddpc	r8,80007a4c <sd_mmc_mci_write_multiple_sector+0x20c>
80007908:	f2 08 00 08 	add	r8,r9,r8
8000790c:	10 9b       	mov	r11,r8
8000790e:	4d 8c       	lddpc	r12,80007a6c <sd_mmc_mci_write_multiple_sector+0x22c>
80007910:	f0 1f 00 56 	mcall	80007a68 <sd_mmc_mci_write_multiple_sector+0x228>
  
  //et024006_DrawFilledRect(10, 5 * 10, ET024006_WIDTH, 10, BLACK);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 5 * 10, WHITE, BLACK);  //et024006_PrintConsole(Statement, BLACK, -1);
80007914:	4d 7b       	lddpc	r11,80007a70 <sd_mmc_mci_write_multiple_sector+0x230>
80007916:	30 08       	mov	r8,0
80007918:	1a d8       	st.w	--sp,r8
8000791a:	e0 68 ff ff 	mov	r8,65535
8000791e:	33 29       	mov	r9,50
80007920:	30 aa       	mov	r10,10
80007922:	4c bc       	lddpc	r12,80007a4c <sd_mmc_mci_write_multiple_sector+0x20c>
80007924:	f0 1f 00 54 	mcall	80007a74 <sd_mmc_mci_write_multiple_sector+0x234>
80007928:	2f fd       	sub	sp,-4
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
8000792a:	c5 58       	rjmp	800079d4 <sd_mmc_mci_write_multiple_sector+0x194>

    // (re)load second stage.
    if( !b_first_step )
8000792c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007930:	ec 18 00 01 	eorl	r8,0x1
80007934:	5c 58       	castu.b	r8
80007936:	c2 70       	breq	80007984 <sd_mmc_mci_write_multiple_sector+0x144>
	{
	  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
80007938:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000793c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007940:	5c 58       	castu.b	r8
80007942:	c0 30       	breq	80007948 <sd_mmc_mci_write_multiple_sector+0x108>
80007944:	4c d8       	lddpc	r8,80007a78 <sd_mmc_mci_write_multiple_sector+0x238>
80007946:	c0 28       	rjmp	8000794a <sd_mmc_mci_write_multiple_sector+0x10a>
80007948:	4c d8       	lddpc	r8,80007a7c <sd_mmc_mci_write_multiple_sector+0x23c>
8000794a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000794e:	e0 6a 02 00 	mov	r10,512
80007952:	10 9b       	mov	r11,r8
80007954:	fc 7c 00 00 	mov	r12,-196608
80007958:	f0 1f 00 4a 	mcall	80007a80 <sd_mmc_mci_write_multiple_sector+0x240>
	  addr = addr + 512L; //sector_index++;
8000795c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007960:	f0 c8 fe 00 	sub	r8,r8,-512
80007964:	ef 48 ff ec 	st.w	r7[-20],r8
      dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80007968:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000796c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007970:	5c 58       	castu.b	r8
80007972:	c0 30       	breq	80007978 <sd_mmc_mci_write_multiple_sector+0x138>
80007974:	4c 18       	lddpc	r8,80007a78 <sd_mmc_mci_write_multiple_sector+0x238>
80007976:	c0 28       	rjmp	8000797a <sd_mmc_mci_write_multiple_sector+0x13a>
80007978:	4c 18       	lddpc	r8,80007a7c <sd_mmc_mci_write_multiple_sector+0x23c>
8000797a:	e0 6b 02 00 	mov	r11,512
8000797e:	10 9c       	mov	r12,r8
80007980:	f0 1f 00 41 	mcall	80007a84 <sd_mmc_mci_write_multiple_sector+0x244>
    }
    udi_msc_trans_block(false, (0==(buffer_id++%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL);
80007984:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007988:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000798c:	5f 08       	sreq	r8
8000798e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007992:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007996:	2f f8       	sub	r8,-1
80007998:	ef 68 ff fb 	st.b	r7[-5],r8
8000799c:	58 09       	cp.w	r9,0
8000799e:	c0 30       	breq	800079a4 <sd_mmc_mci_write_multiple_sector+0x164>
800079a0:	4b 68       	lddpc	r8,80007a78 <sd_mmc_mci_write_multiple_sector+0x238>
800079a2:	c0 28       	rjmp	800079a6 <sd_mmc_mci_write_multiple_sector+0x166>
800079a4:	4b 68       	lddpc	r8,80007a7c <sd_mmc_mci_write_multiple_sector+0x23c>
800079a6:	30 09       	mov	r9,0
800079a8:	e0 6a 02 00 	mov	r10,512
800079ac:	10 9b       	mov	r11,r8
800079ae:	30 0c       	mov	r12,0
800079b0:	f0 1f 00 36 	mcall	80007a88 <sd_mmc_mci_write_multiple_sector+0x248>
    if( !b_first_step ) {
800079b4:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800079b8:	ec 18 00 01 	eorl	r8,0x1
800079bc:	5c 58       	castu.b	r8
800079be:	c0 80       	breq	800079ce <sd_mmc_mci_write_multiple_sector+0x18e>
      // Wait completion of DMACA stage.
      while( !is_dma_ram_2_mci_complete() );
800079c0:	f0 1f 00 33 	mcall	80007a8c <sd_mmc_mci_write_multiple_sector+0x24c>
800079c4:	18 98       	mov	r8,r12
800079c6:	ec 18 00 01 	eorl	r8,0x1
800079ca:	5c 58       	castu.b	r8
800079cc:	cf a1       	brne	800079c0 <sd_mmc_mci_write_multiple_sector+0x180>
    }
    b_first_step=false;
800079ce:	30 08       	mov	r8,0
800079d0:	ef 68 ff fa 	st.b	r7[-6],r8
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
800079d4:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800079d8:	30 08       	mov	r8,0
800079da:	f0 09 19 00 	cp.h	r9,r8
800079de:	5f 18       	srne	r8
800079e0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800079e4:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800079e8:	20 18       	sub	r8,1
800079ea:	ef 58 ff f0 	st.h	r7[-16],r8
800079ee:	58 09       	cp.w	r9,0
800079f0:	c9 e1       	brne	8000792c <sd_mmc_mci_write_multiple_sector+0xec>
    }
    b_first_step=false;
  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
800079f2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800079f6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079fa:	5c 58       	castu.b	r8
800079fc:	c0 30       	breq	80007a02 <sd_mmc_mci_write_multiple_sector+0x1c2>
800079fe:	49 f8       	lddpc	r8,80007a78 <sd_mmc_mci_write_multiple_sector+0x238>
80007a00:	c0 28       	rjmp	80007a04 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007a02:	49 f8       	lddpc	r8,80007a7c <sd_mmc_mci_write_multiple_sector+0x23c>
80007a04:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007a08:	e0 6a 02 00 	mov	r10,512
80007a0c:	10 9b       	mov	r11,r8
80007a0e:	fc 7c 00 00 	mov	r12,-196608
80007a12:	f0 1f 00 1c 	mcall	80007a80 <sd_mmc_mci_write_multiple_sector+0x240>
  dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80007a16:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007a1a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007a1e:	5c 58       	castu.b	r8
80007a20:	c0 30       	breq	80007a26 <sd_mmc_mci_write_multiple_sector+0x1e6>
80007a22:	49 68       	lddpc	r8,80007a78 <sd_mmc_mci_write_multiple_sector+0x238>
80007a24:	c0 28       	rjmp	80007a28 <sd_mmc_mci_write_multiple_sector+0x1e8>
80007a26:	49 68       	lddpc	r8,80007a7c <sd_mmc_mci_write_multiple_sector+0x23c>
80007a28:	e0 6b 02 00 	mov	r11,512
80007a2c:	10 9c       	mov	r12,r8
80007a2e:	f0 1f 00 16 	mcall	80007a84 <sd_mmc_mci_write_multiple_sector+0x244>
  while( !is_dma_ram_2_mci_complete() );
80007a32:	f0 1f 00 17 	mcall	80007a8c <sd_mmc_mci_write_multiple_sector+0x24c>
80007a36:	18 98       	mov	r8,r12
80007a38:	ec 18 00 01 	eorl	r8,0x1
80007a3c:	5c 58       	castu.b	r8
80007a3e:	cf a1       	brne	80007a32 <sd_mmc_mci_write_multiple_sector+0x1f2>
  return true;
80007a40:	30 18       	mov	r8,1
}
80007a42:	10 9c       	mov	r12,r8
80007a44:	2f bd       	sub	sp,-20
80007a46:	e3 cd 80 80 	ldm	sp++,r7,pc
80007a4a:	00 00       	add	r0,r0
80007a4c:	00 00       	add	r0,r0
80007a4e:	06 a0       	st.w	r3++,r0
80007a50:	00 00       	add	r0,r0
80007a52:	07 08       	ld.w	r8,r3++
80007a54:	00 00       	add	r0,r0
80007a56:	07 06       	ld.w	r6,r3++
80007a58:	00 00       	add	r0,r0
80007a5a:	07 04       	ld.w	r4,r3++
80007a5c:	80 00       	ld.sh	r0,r0[0x0]
80007a5e:	74 88       	ld.w	r8,r10[0x20]
80007a60:	80 00       	ld.sh	r0,r0[0x0]
80007a62:	75 64       	ld.w	r4,r10[0x58]
80007a64:	80 00       	ld.sh	r0,r0[0x0]
80007a66:	5e 54       	retlt	r4
80007a68:	80 00       	ld.sh	r0,r0[0x0]
80007a6a:	75 ac       	ld.w	r12,r10[0x68]
80007a6c:	80 00       	ld.sh	r0,r0[0x0]
80007a6e:	5e 48       	retge	r8
80007a70:	80 00       	ld.sh	r0,r0[0x0]
80007a72:	e9 b4       	*unknown*
80007a74:	80 00       	ld.sh	r0,r0[0x0]
80007a76:	44 a8       	lddsp	r8,sp[0x128]
80007a78:	00 00       	add	r0,r0
80007a7a:	0b b4       	ld.ub	r4,r5[0x3]
80007a7c:	00 00       	add	r0,r0
80007a7e:	09 ac       	ld.ub	r12,r4[0x2]
80007a80:	80 00       	ld.sh	r0,r0[0x0]
80007a82:	3f b0       	mov	r0,-5
80007a84:	80 00       	ld.sh	r0,r0[0x0]
80007a86:	6e ac       	ld.w	r12,r7[0x28]
80007a88:	80 00       	ld.sh	r0,r0[0x0]
80007a8a:	cb e0       	breq	80007a06 <sd_mmc_mci_write_multiple_sector+0x1c6>
80007a8c:	80 00       	ld.sh	r0,r0[0x0]
80007a8e:	6e fc       	ld.w	r12,r7[0x3c]

80007a90 <sd_mmc_mci_cmd_send_status>:
   return true;
}
#endif      // end FUNC_MMC_CARD_SECU

bool  sd_mmc_mci_cmd_send_status(uint8_t slot)
{
80007a90:	eb cd 40 80 	pushm	r7,lr
80007a94:	1a 97       	mov	r7,sp
80007a96:	20 1d       	sub	sp,4
80007a98:	18 98       	mov	r8,r12
80007a9a:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80007a9e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007aa2:	30 18       	mov	r8,1
80007aa4:	f0 09 18 00 	cp.b	r9,r8
80007aa8:	e0 88 00 04 	brls	80007ab0 <sd_mmc_mci_cmd_send_status+0x20>
    return false;
80007aac:	30 08       	mov	r8,0
80007aae:	c2 28       	rjmp	80007af2 <sd_mmc_mci_cmd_send_status+0x62>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80007ab0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007ab4:	49 29       	lddpc	r9,80007afc <sd_mmc_mci_cmd_send_status+0x6c>
80007ab6:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007aba:	10 9a       	mov	r10,r8
80007abc:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007ac0:	49 08       	lddpc	r8,80007b00 <sd_mmc_mci_cmd_send_status+0x70>
80007ac2:	70 08       	ld.w	r8,r8[0x0]
80007ac4:	12 9b       	mov	r11,r9
80007ac6:	10 9c       	mov	r12,r8
80007ac8:	f0 1f 00 0f 	mcall	80007b04 <sd_mmc_mci_cmd_send_status+0x74>

  if (mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80007acc:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007ad0:	48 e8       	lddpc	r8,80007b08 <sd_mmc_mci_cmd_send_status+0x78>
80007ad2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80007ad6:	48 b8       	lddpc	r8,80007b00 <sd_mmc_mci_cmd_send_status+0x70>
80007ad8:	70 08       	ld.w	r8,r8[0x0]
80007ada:	12 9a       	mov	r10,r9
80007adc:	e0 6b 10 4d 	mov	r11,4173
80007ae0:	10 9c       	mov	r12,r8
80007ae2:	f0 1f 00 0b 	mcall	80007b0c <sd_mmc_mci_cmd_send_status+0x7c>
80007ae6:	18 98       	mov	r8,r12
80007ae8:	58 08       	cp.w	r8,0
80007aea:	c0 30       	breq	80007af0 <sd_mmc_mci_cmd_send_status+0x60>
    return false;
80007aec:	30 08       	mov	r8,0
80007aee:	c0 28       	rjmp	80007af2 <sd_mmc_mci_cmd_send_status+0x62>

  return true;
80007af0:	30 18       	mov	r8,1
}
80007af2:	10 9c       	mov	r12,r8
80007af4:	2f fd       	sub	sp,-4
80007af6:	e3 cd 80 80 	ldm	sp++,r7,pc
80007afa:	00 00       	add	r0,r0
80007afc:	00 00       	add	r0,r0
80007afe:	0b ac       	ld.ub	r12,r5[0x2]
80007b00:	00 00       	add	r0,r0
80007b02:	01 34       	ld.ub	r4,r0++
80007b04:	80 00       	ld.sh	r0,r0[0x0]
80007b06:	90 88       	ld.uh	r8,r8[0x0]
80007b08:	00 00       	add	r0,r0
80007b0a:	09 9c       	ld.ub	r12,r4[0x1]
80007b0c:	80 00       	ld.sh	r0,r0[0x0]
80007b0e:	8e f0       	ld.uh	r0,r7[0xe]

80007b10 <sd_mmc_mci_test_unit_ready>:
80007b10:	eb cd 40 80 	pushm	r7,lr
80007b14:	1a 97       	mov	r7,sp
80007b16:	20 1d       	sub	sp,4
80007b18:	18 98       	mov	r8,r12
80007b1a:	ef 68 ff fc 	st.b	r7[-4],r8
80007b1e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b22:	30 18       	mov	r8,1
80007b24:	f0 09 18 00 	cp.b	r9,r8
80007b28:	e0 88 00 04 	brls	80007b30 <sd_mmc_mci_test_unit_ready+0x20>
80007b2c:	30 18       	mov	r8,1
80007b2e:	c4 d8       	rjmp	80007bc8 <sd_mmc_mci_test_unit_ready+0xb8>
80007b30:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007b34:	4a 79       	lddpc	r9,80007bd0 <sd_mmc_mci_test_unit_ready+0xc0>
80007b36:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007b3a:	58 18       	cp.w	r8,1
80007b3c:	c1 d0       	breq	80007b76 <sd_mmc_mci_test_unit_ready+0x66>
80007b3e:	58 28       	cp.w	r8,2
80007b40:	c3 50       	breq	80007baa <sd_mmc_mci_test_unit_ready+0x9a>
80007b42:	58 08       	cp.w	r8,0
80007b44:	c3 b1       	brne	80007bba <sd_mmc_mci_test_unit_ready+0xaa>
80007b46:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b4a:	4a 3a       	lddpc	r10,80007bd4 <sd_mmc_mci_test_unit_ready+0xc4>
80007b4c:	30 08       	mov	r8,0
80007b4e:	f4 09 0b 08 	st.b	r10[r9],r8
80007b52:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007b56:	10 9c       	mov	r12,r8
80007b58:	f0 1f 00 20 	mcall	80007bd8 <sd_mmc_mci_test_unit_ready+0xc8>
80007b5c:	18 98       	mov	r8,r12
80007b5e:	58 08       	cp.w	r8,0
80007b60:	c0 90       	breq	80007b72 <sd_mmc_mci_test_unit_ready+0x62>
80007b62:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b66:	49 ba       	lddpc	r10,80007bd0 <sd_mmc_mci_test_unit_ready+0xc0>
80007b68:	30 18       	mov	r8,1
80007b6a:	f4 09 0b 08 	st.b	r10[r9],r8
80007b6e:	30 38       	mov	r8,3
80007b70:	c2 c8       	rjmp	80007bc8 <sd_mmc_mci_test_unit_ready+0xb8>
80007b72:	30 28       	mov	r8,2
80007b74:	c2 a8       	rjmp	80007bc8 <sd_mmc_mci_test_unit_ready+0xb8>
80007b76:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007b7a:	10 9c       	mov	r12,r8
80007b7c:	f0 1f 00 17 	mcall	80007bd8 <sd_mmc_mci_test_unit_ready+0xc8>
80007b80:	18 98       	mov	r8,r12
80007b82:	ec 18 00 01 	eorl	r8,0x1
80007b86:	5c 58       	castu.b	r8
80007b88:	c0 f0       	breq	80007ba6 <sd_mmc_mci_test_unit_ready+0x96>
80007b8a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b8e:	49 1a       	lddpc	r10,80007bd0 <sd_mmc_mci_test_unit_ready+0xc0>
80007b90:	30 28       	mov	r8,2
80007b92:	f4 09 0b 08 	st.b	r10[r9],r8
80007b96:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b9a:	48 fa       	lddpc	r10,80007bd4 <sd_mmc_mci_test_unit_ready+0xc4>
80007b9c:	30 08       	mov	r8,0
80007b9e:	f4 09 0b 08 	st.b	r10[r9],r8
80007ba2:	30 38       	mov	r8,3
80007ba4:	c1 28       	rjmp	80007bc8 <sd_mmc_mci_test_unit_ready+0xb8>
80007ba6:	30 08       	mov	r8,0
80007ba8:	c1 08       	rjmp	80007bc8 <sd_mmc_mci_test_unit_ready+0xb8>
80007baa:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007bae:	48 9a       	lddpc	r10,80007bd0 <sd_mmc_mci_test_unit_ready+0xc0>
80007bb0:	30 08       	mov	r8,0
80007bb2:	f4 09 0b 08 	st.b	r10[r9],r8
80007bb6:	30 28       	mov	r8,2
80007bb8:	c0 88       	rjmp	80007bc8 <sd_mmc_mci_test_unit_ready+0xb8>
80007bba:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007bbe:	48 5a       	lddpc	r10,80007bd0 <sd_mmc_mci_test_unit_ready+0xc0>
80007bc0:	30 08       	mov	r8,0
80007bc2:	f4 09 0b 08 	st.b	r10[r9],r8
80007bc6:	30 38       	mov	r8,3
80007bc8:	10 9c       	mov	r12,r8
80007bca:	2f fd       	sub	sp,-4
80007bcc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007bd0:	00 00       	add	r0,r0
80007bd2:	01 38       	ld.ub	r8,r0++
80007bd4:	00 00       	add	r0,r0
80007bd6:	06 8c       	andn	r12,r3
80007bd8:	80 00       	ld.sh	r0,r0[0x0]
80007bda:	6f 1c       	ld.w	r12,r7[0x44]

80007bdc <sd_mmc_mci_test_unit_ready_0>:
80007bdc:	eb cd 40 80 	pushm	r7,lr
80007be0:	1a 97       	mov	r7,sp
80007be2:	30 0c       	mov	r12,0
80007be4:	f0 1f 00 03 	mcall	80007bf0 <sd_mmc_mci_test_unit_ready_0+0x14>
80007be8:	18 98       	mov	r8,r12
80007bea:	10 9c       	mov	r12,r8
80007bec:	e3 cd 80 80 	ldm	sp++,r7,pc
80007bf0:	80 00       	ld.sh	r0,r0[0x0]
80007bf2:	7b 10       	ld.w	r0,sp[0x44]

80007bf4 <sd_mmc_mci_test_unit_ready_1>:
80007bf4:	eb cd 40 80 	pushm	r7,lr
80007bf8:	1a 97       	mov	r7,sp
80007bfa:	30 1c       	mov	r12,1
80007bfc:	f0 1f 00 03 	mcall	80007c08 <sd_mmc_mci_test_unit_ready_1+0x14>
80007c00:	18 98       	mov	r8,r12
80007c02:	10 9c       	mov	r12,r8
80007c04:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c08:	80 00       	ld.sh	r0,r0[0x0]
80007c0a:	7b 10       	ld.w	r0,sp[0x44]

80007c0c <sd_mmc_mci_read_capacity>:
80007c0c:	eb cd 40 80 	pushm	r7,lr
80007c10:	1a 97       	mov	r7,sp
80007c12:	20 2d       	sub	sp,8
80007c14:	18 98       	mov	r8,r12
80007c16:	ef 4b ff f8 	st.w	r7[-8],r11
80007c1a:	ef 68 ff fc 	st.b	r7[-4],r8
80007c1e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007c22:	10 9c       	mov	r12,r8
80007c24:	f0 1f 00 0c 	mcall	80007c54 <sd_mmc_mci_read_capacity+0x48>
80007c28:	18 98       	mov	r8,r12
80007c2a:	ec 18 00 01 	eorl	r8,0x1
80007c2e:	5c 58       	castu.b	r8
80007c30:	c0 30       	breq	80007c36 <sd_mmc_mci_read_capacity+0x2a>
80007c32:	30 28       	mov	r8,2
80007c34:	c0 c8       	rjmp	80007c4c <sd_mmc_mci_read_capacity+0x40>
80007c36:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c3a:	48 88       	lddpc	r8,80007c58 <sd_mmc_mci_read_capacity+0x4c>
80007c3c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007c40:	f0 c9 00 01 	sub	r9,r8,1
80007c44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007c48:	91 09       	st.w	r8[0x0],r9
80007c4a:	30 08       	mov	r8,0
80007c4c:	10 9c       	mov	r12,r8
80007c4e:	2f ed       	sub	sp,-8
80007c50:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c54:	80 00       	ld.sh	r0,r0[0x0]
80007c56:	6f 1c       	ld.w	r12,r7[0x44]
80007c58:	00 00       	add	r0,r0
80007c5a:	09 a4       	ld.ub	r4,r4[0x2]

80007c5c <sd_mmc_mci_read_capacity_0>:
80007c5c:	eb cd 40 80 	pushm	r7,lr
80007c60:	1a 97       	mov	r7,sp
80007c62:	20 1d       	sub	sp,4
80007c64:	ef 4c ff fc 	st.w	r7[-4],r12
80007c68:	ee fb ff fc 	ld.w	r11,r7[-4]
80007c6c:	30 0c       	mov	r12,0
80007c6e:	f0 1f 00 04 	mcall	80007c7c <sd_mmc_mci_read_capacity_0+0x20>
80007c72:	18 98       	mov	r8,r12
80007c74:	10 9c       	mov	r12,r8
80007c76:	2f fd       	sub	sp,-4
80007c78:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c7c:	80 00       	ld.sh	r0,r0[0x0]
80007c7e:	7c 0c       	ld.w	r12,lr[0x0]

80007c80 <sd_mmc_mci_read_capacity_1>:
80007c80:	eb cd 40 80 	pushm	r7,lr
80007c84:	1a 97       	mov	r7,sp
80007c86:	20 1d       	sub	sp,4
80007c88:	ef 4c ff fc 	st.w	r7[-4],r12
80007c8c:	ee fb ff fc 	ld.w	r11,r7[-4]
80007c90:	30 1c       	mov	r12,1
80007c92:	f0 1f 00 04 	mcall	80007ca0 <sd_mmc_mci_read_capacity_1+0x20>
80007c96:	18 98       	mov	r8,r12
80007c98:	10 9c       	mov	r12,r8
80007c9a:	2f fd       	sub	sp,-4
80007c9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ca0:	80 00       	ld.sh	r0,r0[0x0]
80007ca2:	7c 0c       	ld.w	r12,lr[0x0]

80007ca4 <sd_mmc_mci_wr_protect>:
80007ca4:	eb cd 40 80 	pushm	r7,lr
80007ca8:	1a 97       	mov	r7,sp
80007caa:	20 1d       	sub	sp,4
80007cac:	18 98       	mov	r8,r12
80007cae:	ef 68 ff fc 	st.b	r7[-4],r8
80007cb2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007cb6:	10 9c       	mov	r12,r8
80007cb8:	f0 1f 00 04 	mcall	80007cc8 <sd_mmc_mci_wr_protect+0x24>
80007cbc:	18 98       	mov	r8,r12
80007cbe:	10 9c       	mov	r12,r8
80007cc0:	2f fd       	sub	sp,-4
80007cc2:	e3 cd 80 80 	ldm	sp++,r7,pc
80007cc6:	00 00       	add	r0,r0
80007cc8:	80 00       	ld.sh	r0,r0[0x0]
80007cca:	5e c0       	retvs	r0

80007ccc <sd_mmc_mci_wr_protect_0>:
80007ccc:	eb cd 40 80 	pushm	r7,lr
80007cd0:	1a 97       	mov	r7,sp
80007cd2:	30 0c       	mov	r12,0
80007cd4:	f0 1f 00 03 	mcall	80007ce0 <sd_mmc_mci_wr_protect_0+0x14>
80007cd8:	18 98       	mov	r8,r12
80007cda:	10 9c       	mov	r12,r8
80007cdc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ce0:	80 00       	ld.sh	r0,r0[0x0]
80007ce2:	7c a4       	ld.w	r4,lr[0x28]

80007ce4 <sd_mmc_mci_wr_protect_1>:
80007ce4:	eb cd 40 80 	pushm	r7,lr
80007ce8:	1a 97       	mov	r7,sp
80007cea:	30 1c       	mov	r12,1
80007cec:	f0 1f 00 03 	mcall	80007cf8 <sd_mmc_mci_wr_protect_1+0x14>
80007cf0:	18 98       	mov	r8,r12
80007cf2:	10 9c       	mov	r12,r8
80007cf4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007cf8:	80 00       	ld.sh	r0,r0[0x0]
80007cfa:	7c a4       	ld.w	r4,lr[0x28]

80007cfc <sd_mmc_mci_removal>:
80007cfc:	eb cd 40 80 	pushm	r7,lr
80007d00:	1a 97       	mov	r7,sp
80007d02:	20 1d       	sub	sp,4
80007d04:	18 98       	mov	r8,r12
80007d06:	ef 68 ff fc 	st.b	r7[-4],r8
80007d0a:	30 08       	mov	r8,0
80007d0c:	10 9c       	mov	r12,r8
80007d0e:	2f fd       	sub	sp,-4
80007d10:	e3 cd 80 80 	ldm	sp++,r7,pc

80007d14 <sd_mmc_mci_removal_0>:
80007d14:	eb cd 40 80 	pushm	r7,lr
80007d18:	1a 97       	mov	r7,sp
80007d1a:	30 0c       	mov	r12,0
80007d1c:	f0 1f 00 03 	mcall	80007d28 <sd_mmc_mci_removal_0+0x14>
80007d20:	18 98       	mov	r8,r12
80007d22:	10 9c       	mov	r12,r8
80007d24:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d28:	80 00       	ld.sh	r0,r0[0x0]
80007d2a:	7c fc       	ld.w	r12,lr[0x3c]

80007d2c <sd_mmc_mci_removal_1>:
80007d2c:	eb cd 40 80 	pushm	r7,lr
80007d30:	1a 97       	mov	r7,sp
80007d32:	30 1c       	mov	r12,1
80007d34:	f0 1f 00 03 	mcall	80007d40 <sd_mmc_mci_removal_1+0x14>
80007d38:	18 98       	mov	r8,r12
80007d3a:	10 9c       	mov	r12,r8
80007d3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d40:	80 00       	ld.sh	r0,r0[0x0]
80007d42:	7c fc       	ld.w	r12,lr[0x3c]

80007d44 <sd_mmc_mci_usb_read_10>:
80007d44:	eb cd 40 80 	pushm	r7,lr
80007d48:	1a 97       	mov	r7,sp
80007d4a:	20 3d       	sub	sp,12
80007d4c:	18 99       	mov	r9,r12
80007d4e:	ef 4b ff f8 	st.w	r7[-8],r11
80007d52:	14 98       	mov	r8,r10
80007d54:	ef 69 ff fc 	st.b	r7[-4],r9
80007d58:	ef 58 ff f4 	st.h	r7[-12],r8
80007d5c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007d60:	10 9c       	mov	r12,r8
80007d62:	f0 1f 00 1f 	mcall	80007ddc <sd_mmc_mci_usb_read_10+0x98>
80007d66:	18 98       	mov	r8,r12
80007d68:	ec 18 00 01 	eorl	r8,0x1
80007d6c:	5c 58       	castu.b	r8
80007d6e:	c0 30       	breq	80007d74 <sd_mmc_mci_usb_read_10+0x30>
80007d70:	30 28       	mov	r8,2
80007d72:	c3 08       	rjmp	80007dd2 <sd_mmc_mci_usb_read_10+0x8e>
80007d74:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007d78:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007d7c:	30 0a       	mov	r10,0
80007d7e:	ee fb ff f8 	ld.w	r11,r7[-8]
80007d82:	10 9c       	mov	r12,r8
80007d84:	f0 1f 00 17 	mcall	80007de0 <sd_mmc_mci_usb_read_10+0x9c>
80007d88:	18 98       	mov	r8,r12
80007d8a:	ec 18 00 01 	eorl	r8,0x1
80007d8e:	5c 58       	castu.b	r8
80007d90:	c0 30       	breq	80007d96 <sd_mmc_mci_usb_read_10+0x52>
80007d92:	30 18       	mov	r8,1
80007d94:	c1 f8       	rjmp	80007dd2 <sd_mmc_mci_usb_read_10+0x8e>
80007d96:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007d9a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007d9e:	ee fa ff f8 	ld.w	r10,r7[-8]
80007da2:	12 9b       	mov	r11,r9
80007da4:	10 9c       	mov	r12,r8
80007da6:	f0 1f 00 10 	mcall	80007de4 <sd_mmc_mci_usb_read_10+0xa0>
80007daa:	18 98       	mov	r8,r12
80007dac:	ec 18 00 01 	eorl	r8,0x1
80007db0:	5c 58       	castu.b	r8
80007db2:	c0 30       	breq	80007db8 <sd_mmc_mci_usb_read_10+0x74>
80007db4:	30 18       	mov	r8,1
80007db6:	c0 e8       	rjmp	80007dd2 <sd_mmc_mci_usb_read_10+0x8e>
80007db8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007dbc:	10 9c       	mov	r12,r8
80007dbe:	f0 1f 00 0b 	mcall	80007de8 <sd_mmc_mci_usb_read_10+0xa4>
80007dc2:	18 98       	mov	r8,r12
80007dc4:	ec 18 00 01 	eorl	r8,0x1
80007dc8:	5c 58       	castu.b	r8
80007dca:	c0 30       	breq	80007dd0 <sd_mmc_mci_usb_read_10+0x8c>
80007dcc:	30 18       	mov	r8,1
80007dce:	c0 28       	rjmp	80007dd2 <sd_mmc_mci_usb_read_10+0x8e>
80007dd0:	30 08       	mov	r8,0
80007dd2:	10 9c       	mov	r12,r8
80007dd4:	2f dd       	sub	sp,-12
80007dd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80007dda:	00 00       	add	r0,r0
80007ddc:	80 00       	ld.sh	r0,r0[0x0]
80007dde:	6f 1c       	ld.w	r12,r7[0x44]
80007de0:	80 00       	ld.sh	r0,r0[0x0]
80007de2:	6f fc       	ld.w	r12,r7[0x7c]
80007de4:	80 00       	ld.sh	r0,r0[0x0]
80007de6:	75 f0       	ld.w	r0,r10[0x7c]
80007de8:	80 00       	ld.sh	r0,r0[0x0]
80007dea:	71 90       	ld.w	r0,r8[0x64]

80007dec <sd_mmc_mci_usb_read_10_0>:
80007dec:	eb cd 40 80 	pushm	r7,lr
80007df0:	1a 97       	mov	r7,sp
80007df2:	20 2d       	sub	sp,8
80007df4:	ef 4c ff fc 	st.w	r7[-4],r12
80007df8:	16 98       	mov	r8,r11
80007dfa:	ef 58 ff f8 	st.h	r7[-8],r8
80007dfe:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007e02:	10 9a       	mov	r10,r8
80007e04:	ee fb ff fc 	ld.w	r11,r7[-4]
80007e08:	30 0c       	mov	r12,0
80007e0a:	f0 1f 00 04 	mcall	80007e18 <sd_mmc_mci_usb_read_10_0+0x2c>
80007e0e:	18 98       	mov	r8,r12
80007e10:	10 9c       	mov	r12,r8
80007e12:	2f ed       	sub	sp,-8
80007e14:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e18:	80 00       	ld.sh	r0,r0[0x0]
80007e1a:	7d 44       	ld.w	r4,lr[0x50]

80007e1c <sd_mmc_mci_usb_read_10_1>:
80007e1c:	eb cd 40 80 	pushm	r7,lr
80007e20:	1a 97       	mov	r7,sp
80007e22:	20 2d       	sub	sp,8
80007e24:	ef 4c ff fc 	st.w	r7[-4],r12
80007e28:	16 98       	mov	r8,r11
80007e2a:	ef 58 ff f8 	st.h	r7[-8],r8
80007e2e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007e32:	10 9a       	mov	r10,r8
80007e34:	ee fb ff fc 	ld.w	r11,r7[-4]
80007e38:	30 1c       	mov	r12,1
80007e3a:	f0 1f 00 04 	mcall	80007e48 <sd_mmc_mci_usb_read_10_1+0x2c>
80007e3e:	18 98       	mov	r8,r12
80007e40:	10 9c       	mov	r12,r8
80007e42:	2f ed       	sub	sp,-8
80007e44:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e48:	80 00       	ld.sh	r0,r0[0x0]
80007e4a:	7d 44       	ld.w	r4,lr[0x50]

80007e4c <sd_mmc_mci_usb_write_10>:
80007e4c:	eb cd 40 80 	pushm	r7,lr
80007e50:	1a 97       	mov	r7,sp
80007e52:	20 3d       	sub	sp,12
80007e54:	18 99       	mov	r9,r12
80007e56:	ef 4b ff f8 	st.w	r7[-8],r11
80007e5a:	14 98       	mov	r8,r10
80007e5c:	ef 69 ff fc 	st.b	r7[-4],r9
80007e60:	ef 58 ff f4 	st.h	r7[-12],r8
80007e64:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007e68:	10 9c       	mov	r12,r8
80007e6a:	f0 1f 00 1f 	mcall	80007ee4 <sd_mmc_mci_usb_write_10+0x98>
80007e6e:	18 98       	mov	r8,r12
80007e70:	ec 18 00 01 	eorl	r8,0x1
80007e74:	5c 58       	castu.b	r8
80007e76:	c0 30       	breq	80007e7c <sd_mmc_mci_usb_write_10+0x30>
80007e78:	30 28       	mov	r8,2
80007e7a:	c3 08       	rjmp	80007eda <sd_mmc_mci_usb_write_10+0x8e>
80007e7c:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007e80:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007e84:	30 0a       	mov	r10,0
80007e86:	ee fb ff f8 	ld.w	r11,r7[-8]
80007e8a:	10 9c       	mov	r12,r8
80007e8c:	f0 1f 00 17 	mcall	80007ee8 <sd_mmc_mci_usb_write_10+0x9c>
80007e90:	18 98       	mov	r8,r12
80007e92:	ec 18 00 01 	eorl	r8,0x1
80007e96:	5c 58       	castu.b	r8
80007e98:	c0 30       	breq	80007e9e <sd_mmc_mci_usb_write_10+0x52>
80007e9a:	30 18       	mov	r8,1
80007e9c:	c1 f8       	rjmp	80007eda <sd_mmc_mci_usb_write_10+0x8e>
80007e9e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007ea2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007ea6:	ee fa ff f8 	ld.w	r10,r7[-8]
80007eaa:	12 9b       	mov	r11,r9
80007eac:	10 9c       	mov	r12,r8
80007eae:	f0 1f 00 10 	mcall	80007eec <sd_mmc_mci_usb_write_10+0xa0>
80007eb2:	18 98       	mov	r8,r12
80007eb4:	ec 18 00 01 	eorl	r8,0x1
80007eb8:	5c 58       	castu.b	r8
80007eba:	c0 30       	breq	80007ec0 <sd_mmc_mci_usb_write_10+0x74>
80007ebc:	30 18       	mov	r8,1
80007ebe:	c0 e8       	rjmp	80007eda <sd_mmc_mci_usb_write_10+0x8e>
80007ec0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007ec4:	10 9c       	mov	r12,r8
80007ec6:	f0 1f 00 0b 	mcall	80007ef0 <sd_mmc_mci_usb_write_10+0xa4>
80007eca:	18 98       	mov	r8,r12
80007ecc:	ec 18 00 01 	eorl	r8,0x1
80007ed0:	5c 58       	castu.b	r8
80007ed2:	c0 30       	breq	80007ed8 <sd_mmc_mci_usb_write_10+0x8c>
80007ed4:	30 18       	mov	r8,1
80007ed6:	c0 28       	rjmp	80007eda <sd_mmc_mci_usb_write_10+0x8e>
80007ed8:	30 08       	mov	r8,0
80007eda:	10 9c       	mov	r12,r8
80007edc:	2f dd       	sub	sp,-12
80007ede:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ee2:	00 00       	add	r0,r0
80007ee4:	80 00       	ld.sh	r0,r0[0x0]
80007ee6:	6f 1c       	ld.w	r12,r7[0x44]
80007ee8:	80 00       	ld.sh	r0,r0[0x0]
80007eea:	72 2c       	ld.w	r12,r9[0x8]
80007eec:	80 00       	ld.sh	r0,r0[0x0]
80007eee:	78 40       	ld.w	r0,r12[0x10]
80007ef0:	80 00       	ld.sh	r0,r0[0x0]
80007ef2:	73 98       	ld.w	r8,r9[0x64]

80007ef4 <sd_mmc_mci_usb_write_10_0>:
80007ef4:	eb cd 40 80 	pushm	r7,lr
80007ef8:	1a 97       	mov	r7,sp
80007efa:	20 2d       	sub	sp,8
80007efc:	ef 4c ff fc 	st.w	r7[-4],r12
80007f00:	16 98       	mov	r8,r11
80007f02:	ef 58 ff f8 	st.h	r7[-8],r8
80007f06:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007f0a:	10 9a       	mov	r10,r8
80007f0c:	ee fb ff fc 	ld.w	r11,r7[-4]
80007f10:	30 0c       	mov	r12,0
80007f12:	f0 1f 00 04 	mcall	80007f20 <sd_mmc_mci_usb_write_10_0+0x2c>
80007f16:	18 98       	mov	r8,r12
80007f18:	10 9c       	mov	r12,r8
80007f1a:	2f ed       	sub	sp,-8
80007f1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f20:	80 00       	ld.sh	r0,r0[0x0]
80007f22:	7e 4c       	ld.w	r12,pc[0x10]

80007f24 <sd_mmc_mci_usb_write_10_1>:
80007f24:	eb cd 40 80 	pushm	r7,lr
80007f28:	1a 97       	mov	r7,sp
80007f2a:	20 2d       	sub	sp,8
80007f2c:	ef 4c ff fc 	st.w	r7[-4],r12
80007f30:	16 98       	mov	r8,r11
80007f32:	ef 58 ff f8 	st.h	r7[-8],r8
80007f36:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007f3a:	10 9a       	mov	r10,r8
80007f3c:	ee fb ff fc 	ld.w	r11,r7[-4]
80007f40:	30 1c       	mov	r12,1
80007f42:	f0 1f 00 04 	mcall	80007f50 <sd_mmc_mci_usb_write_10_1+0x2c>
80007f46:	18 98       	mov	r8,r12
80007f48:	10 9c       	mov	r12,r8
80007f4a:	2f ed       	sub	sp,-8
80007f4c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f50:	80 00       	ld.sh	r0,r0[0x0]
80007f52:	7e 4c       	ld.w	r12,pc[0x10]

80007f54 <aes_configure>:
80007f54:	eb cd 40 80 	pushm	r7,lr
80007f58:	1a 97       	mov	r7,sp
80007f5a:	20 2d       	sub	sp,8
80007f5c:	ef 4c ff fc 	st.w	r7[-4],r12
80007f60:	ef 4b ff f8 	st.w	r7[-8],r11
80007f64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f68:	11 88       	ld.ub	r8,r8[0x0]
80007f6a:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80007f6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f72:	11 98       	ld.ub	r8,r8[0x1]
80007f74:	a5 68       	lsl	r8,0x4
80007f76:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80007f7a:	10 49       	or	r9,r8
80007f7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f80:	11 a8       	ld.ub	r8,r8[0x2]
80007f82:	a9 68       	lsl	r8,0x8
80007f84:	e2 18 03 00 	andl	r8,0x300,COH
80007f88:	10 49       	or	r9,r8
80007f8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f8e:	11 b8       	ld.ub	r8,r8[0x3]
80007f90:	ab 68       	lsl	r8,0xa
80007f92:	e2 18 0c 00 	andl	r8,0xc00,COH
80007f96:	10 49       	or	r9,r8
80007f98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f9c:	11 c8       	ld.ub	r8,r8[0x4]
80007f9e:	ad 68       	lsl	r8,0xc
80007fa0:	e2 18 70 00 	andl	r8,0x7000,COH
80007fa4:	10 49       	or	r9,r8
80007fa6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007faa:	11 d8       	ld.ub	r8,r8[0x5]
80007fac:	af 78       	lsl	r8,0xf
80007fae:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80007fb2:	10 49       	or	r9,r8
80007fb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fb8:	11 e8       	ld.ub	r8,r8[0x6]
80007fba:	b1 68       	lsl	r8,0x10
80007fbc:	e6 18 00 07 	andh	r8,0x7,COH
80007fc0:	10 49       	or	r9,r8
80007fc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fc6:	11 f8       	ld.ub	r8,r8[0x7]
80007fc8:	b9 68       	lsl	r8,0x18
80007fca:	e6 18 1f 00 	andh	r8,0x1f00,COH
80007fce:	f3 e8 10 08 	or	r8,r9,r8
80007fd2:	ea 18 00 e0 	orh	r8,0xe0
80007fd6:	10 99       	mov	r9,r8
80007fd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007fdc:	91 19       	st.w	r8[0x4],r9
80007fde:	2f ed       	sub	sp,-8
80007fe0:	e3 cd 80 80 	ldm	sp++,r7,pc

80007fe4 <aes_set_key>:
80007fe4:	eb cd 40 80 	pushm	r7,lr
80007fe8:	1a 97       	mov	r7,sp
80007fea:	20 4d       	sub	sp,16
80007fec:	ef 4c ff f4 	st.w	r7[-12],r12
80007ff0:	ef 4b ff f0 	st.w	r7[-16],r11
80007ff4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007ff8:	2e 08       	sub	r8,-32
80007ffa:	ef 48 ff f8 	st.w	r7[-8],r8
80007ffe:	30 08       	mov	r8,0
80008000:	ef 68 ff ff 	st.b	r7[-1],r8
80008004:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008008:	70 18       	ld.w	r8,r8[0x4]
8000800a:	e2 18 0c 00 	andl	r8,0xc00,COH
8000800e:	ab 88       	lsr	r8,0xa
80008010:	58 18       	cp.w	r8,1
80008012:	c0 90       	breq	80008024 <aes_set_key+0x40>
80008014:	c0 43       	brcs	8000801c <aes_set_key+0x38>
80008016:	58 28       	cp.w	r8,2
80008018:	c0 a0       	breq	8000802c <aes_set_key+0x48>
8000801a:	c2 38       	rjmp	80008060 <aes_set_key+0x7c>
8000801c:	30 48       	mov	r8,4
8000801e:	ef 68 ff ff 	st.b	r7[-1],r8
80008022:	c0 98       	rjmp	80008034 <aes_set_key+0x50>
80008024:	30 68       	mov	r8,6
80008026:	ef 68 ff ff 	st.b	r7[-1],r8
8000802a:	c0 58       	rjmp	80008034 <aes_set_key+0x50>
8000802c:	30 88       	mov	r8,8
8000802e:	ef 68 ff ff 	st.b	r7[-1],r8
80008032:	c1 78       	rjmp	80008060 <aes_set_key+0x7c>
80008034:	c1 68       	rjmp	80008060 <aes_set_key+0x7c>
80008036:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000803a:	70 09       	ld.w	r9,r8[0x0]
8000803c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008040:	91 09       	st.w	r8[0x0],r9
80008042:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008046:	2f c8       	sub	r8,-4
80008048:	ef 48 ff f8 	st.w	r7[-8],r8
8000804c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008050:	2f c8       	sub	r8,-4
80008052:	ef 48 ff f0 	st.w	r7[-16],r8
80008056:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000805a:	20 18       	sub	r8,1
8000805c:	ef 68 ff ff 	st.b	r7[-1],r8
80008060:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008064:	30 08       	mov	r8,0
80008066:	f0 09 18 00 	cp.b	r9,r8
8000806a:	ce 61       	brne	80008036 <aes_set_key+0x52>
8000806c:	2f cd       	sub	sp,-16
8000806e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008072 <aes_set_initvector>:
80008072:	eb cd 40 80 	pushm	r7,lr
80008076:	1a 97       	mov	r7,sp
80008078:	20 4d       	sub	sp,16
8000807a:	ef 4c ff f4 	st.w	r7[-12],r12
8000807e:	ef 4b ff f0 	st.w	r7[-16],r11
80008082:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008086:	2a 08       	sub	r8,-96
80008088:	ef 48 ff f8 	st.w	r7[-8],r8
8000808c:	30 08       	mov	r8,0
8000808e:	ef 48 ff fc 	st.w	r7[-4],r8
80008092:	c1 68       	rjmp	800080be <aes_set_initvector+0x4c>
80008094:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008098:	70 09       	ld.w	r9,r8[0x0]
8000809a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000809e:	91 09       	st.w	r8[0x0],r9
800080a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080a4:	2f c8       	sub	r8,-4
800080a6:	ef 48 ff f8 	st.w	r7[-8],r8
800080aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800080ae:	2f c8       	sub	r8,-4
800080b0:	ef 48 ff f0 	st.w	r7[-16],r8
800080b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800080b8:	2f f8       	sub	r8,-1
800080ba:	ef 48 ff fc 	st.w	r7[-4],r8
800080be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800080c2:	58 38       	cp.w	r8,3
800080c4:	fe 9a ff e8 	brle	80008094 <aes_set_initvector+0x22>
800080c8:	2f cd       	sub	sp,-16
800080ca:	e3 cd 80 80 	ldm	sp++,r7,pc

800080ce <aes_write_inputdata>:
800080ce:	eb cd 40 80 	pushm	r7,lr
800080d2:	1a 97       	mov	r7,sp
800080d4:	20 4d       	sub	sp,16
800080d6:	ef 4c ff f4 	st.w	r7[-12],r12
800080da:	ef 4b ff f0 	st.w	r7[-16],r11
800080de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800080e2:	2c 08       	sub	r8,-64
800080e4:	ef 48 ff f8 	st.w	r7[-8],r8
800080e8:	30 48       	mov	r8,4
800080ea:	ef 68 ff ff 	st.b	r7[-1],r8
800080ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800080f2:	70 18       	ld.w	r8,r8[0x4]
800080f4:	e2 18 70 00 	andl	r8,0x7000,COH
800080f8:	ad 88       	lsr	r8,0xc
800080fa:	58 38       	cp.w	r8,3
800080fc:	c2 c1       	brne	80008154 <aes_write_inputdata+0x86>
800080fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008102:	70 18       	ld.w	r8,r8[0x4]
80008104:	e6 18 00 07 	andh	r8,0x7,COH
80008108:	b1 88       	lsr	r8,0x10
8000810a:	58 18       	cp.w	r8,1
8000810c:	c0 60       	breq	80008118 <aes_write_inputdata+0x4a>
8000810e:	c2 33       	brcs	80008154 <aes_write_inputdata+0x86>
80008110:	58 48       	cp.w	r8,4
80008112:	e0 8b 00 21 	brhi	80008154 <aes_write_inputdata+0x86>
80008116:	c0 68       	rjmp	80008122 <aes_write_inputdata+0x54>
80008118:	30 28       	mov	r8,2
8000811a:	ef 68 ff ff 	st.b	r7[-1],r8
8000811e:	d7 03       	nop
80008120:	c1 a8       	rjmp	80008154 <aes_write_inputdata+0x86>
80008122:	30 18       	mov	r8,1
80008124:	ef 68 ff ff 	st.b	r7[-1],r8
80008128:	c1 68       	rjmp	80008154 <aes_write_inputdata+0x86>
8000812a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000812e:	70 09       	ld.w	r9,r8[0x0]
80008130:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008134:	91 09       	st.w	r8[0x0],r9
80008136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000813a:	2f c8       	sub	r8,-4
8000813c:	ef 48 ff f8 	st.w	r7[-8],r8
80008140:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008144:	2f c8       	sub	r8,-4
80008146:	ef 48 ff f0 	st.w	r7[-16],r8
8000814a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000814e:	20 18       	sub	r8,1
80008150:	ef 68 ff ff 	st.b	r7[-1],r8
80008154:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008158:	30 08       	mov	r8,0
8000815a:	f0 09 18 00 	cp.b	r9,r8
8000815e:	ce 61       	brne	8000812a <aes_write_inputdata+0x5c>
80008160:	2f cd       	sub	sp,-16
80008162:	e3 cd 80 80 	ldm	sp++,r7,pc

80008166 <aes_read_outputdata>:
80008166:	eb cd 40 80 	pushm	r7,lr
8000816a:	1a 97       	mov	r7,sp
8000816c:	20 4d       	sub	sp,16
8000816e:	ef 4c ff f4 	st.w	r7[-12],r12
80008172:	ef 4b ff f0 	st.w	r7[-16],r11
80008176:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000817a:	2b 08       	sub	r8,-80
8000817c:	ef 48 ff f8 	st.w	r7[-8],r8
80008180:	30 48       	mov	r8,4
80008182:	ef 68 ff ff 	st.b	r7[-1],r8
80008186:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000818a:	70 18       	ld.w	r8,r8[0x4]
8000818c:	e2 18 70 00 	andl	r8,0x7000,COH
80008190:	ad 88       	lsr	r8,0xc
80008192:	58 38       	cp.w	r8,3
80008194:	c2 c1       	brne	800081ec <aes_read_outputdata+0x86>
80008196:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000819a:	70 18       	ld.w	r8,r8[0x4]
8000819c:	e6 18 00 07 	andh	r8,0x7,COH
800081a0:	b1 88       	lsr	r8,0x10
800081a2:	58 18       	cp.w	r8,1
800081a4:	c0 60       	breq	800081b0 <aes_read_outputdata+0x4a>
800081a6:	c2 33       	brcs	800081ec <aes_read_outputdata+0x86>
800081a8:	58 48       	cp.w	r8,4
800081aa:	e0 8b 00 21 	brhi	800081ec <aes_read_outputdata+0x86>
800081ae:	c0 68       	rjmp	800081ba <aes_read_outputdata+0x54>
800081b0:	30 28       	mov	r8,2
800081b2:	ef 68 ff ff 	st.b	r7[-1],r8
800081b6:	d7 03       	nop
800081b8:	c1 a8       	rjmp	800081ec <aes_read_outputdata+0x86>
800081ba:	30 18       	mov	r8,1
800081bc:	ef 68 ff ff 	st.b	r7[-1],r8
800081c0:	c1 68       	rjmp	800081ec <aes_read_outputdata+0x86>
800081c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081c6:	70 09       	ld.w	r9,r8[0x0]
800081c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800081cc:	91 09       	st.w	r8[0x0],r9
800081ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800081d2:	2f c8       	sub	r8,-4
800081d4:	ef 48 ff f0 	st.w	r7[-16],r8
800081d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081dc:	2f c8       	sub	r8,-4
800081de:	ef 48 ff f8 	st.w	r7[-8],r8
800081e2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800081e6:	20 18       	sub	r8,1
800081e8:	ef 68 ff ff 	st.b	r7[-1],r8
800081ec:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800081f0:	30 08       	mov	r8,0
800081f2:	f0 09 18 00 	cp.b	r9,r8
800081f6:	ce 61       	brne	800081c2 <aes_read_outputdata+0x5c>
800081f8:	2f cd       	sub	sp,-16
800081fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800081fe:	d7 03       	nop

80008200 <smc_init>:
80008200:	eb cd 40 80 	pushm	r7,lr
80008204:	1a 97       	mov	r7,sp
80008206:	20 cd       	sub	sp,48
80008208:	ef 4c ff d0 	st.w	r7[-48],r12
8000820c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80008210:	ee 7a 42 3f 	mov	r10,999999
80008214:	f0 0a 00 09 	add	r9,r8,r10
80008218:	e0 68 de 83 	mov	r8,56963
8000821c:	ea 18 43 1b 	orh	r8,0x431b
80008220:	f2 08 06 48 	mulu.d	r8,r9,r8
80008224:	f2 08 16 12 	lsr	r8,r9,0x12
80008228:	ef 48 ff d4 	st.w	r7[-44],r8
8000822c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008230:	12 98       	mov	r8,r9
80008232:	a3 68       	lsl	r8,0x2
80008234:	12 08       	add	r8,r9
80008236:	a3 68       	lsl	r8,0x2
80008238:	f0 c9 fc 19 	sub	r9,r8,-999
8000823c:	e0 68 4d d3 	mov	r8,19923
80008240:	ea 18 10 62 	orh	r8,0x1062
80008244:	f2 08 06 48 	mulu.d	r8,r9,r8
80008248:	f2 08 16 06 	lsr	r8,r9,0x6
8000824c:	ef 48 ff d8 	st.w	r7[-40],r8
80008250:	30 08       	mov	r8,0
80008252:	ef 48 ff dc 	st.w	r7[-36],r8
80008256:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000825a:	12 98       	mov	r8,r9
8000825c:	a5 68       	lsl	r8,0x4
8000825e:	12 18       	sub	r8,r9
80008260:	a1 78       	lsl	r8,0x1
80008262:	f0 c9 fc 19 	sub	r9,r8,-999
80008266:	e0 68 4d d3 	mov	r8,19923
8000826a:	ea 18 10 62 	orh	r8,0x1062
8000826e:	f2 08 06 48 	mulu.d	r8,r9,r8
80008272:	f2 08 16 06 	lsr	r8,r9,0x6
80008276:	ef 48 ff e0 	st.w	r7[-32],r8
8000827a:	30 08       	mov	r8,0
8000827c:	ef 48 ff e4 	st.w	r7[-28],r8
80008280:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008284:	12 98       	mov	r8,r9
80008286:	a5 68       	lsl	r8,0x4
80008288:	12 18       	sub	r8,r9
8000828a:	a3 68       	lsl	r8,0x2
8000828c:	f0 c9 fc 19 	sub	r9,r8,-999
80008290:	e0 68 4d d3 	mov	r8,19923
80008294:	ea 18 10 62 	orh	r8,0x1062
80008298:	f2 08 06 48 	mulu.d	r8,r9,r8
8000829c:	f2 08 16 06 	lsr	r8,r9,0x6
800082a0:	ef 48 ff e8 	st.w	r7[-24],r8
800082a4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800082a8:	f0 08 10 5a 	mul	r8,r8,90
800082ac:	f0 c9 fc 19 	sub	r9,r8,-999
800082b0:	e0 68 4d d3 	mov	r8,19923
800082b4:	ea 18 10 62 	orh	r8,0x1062
800082b8:	f2 08 06 48 	mulu.d	r8,r9,r8
800082bc:	f2 08 16 06 	lsr	r8,r9,0x6
800082c0:	ef 48 ff ec 	st.w	r7[-20],r8
800082c4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800082c8:	e0 68 00 d2 	mov	r8,210
800082cc:	f2 08 02 48 	mul	r8,r9,r8
800082d0:	f0 c9 fc 19 	sub	r9,r8,-999
800082d4:	e0 68 4d d3 	mov	r8,19923
800082d8:	ea 18 10 62 	orh	r8,0x1062
800082dc:	f2 08 06 48 	mulu.d	r8,r9,r8
800082e0:	f2 08 16 06 	lsr	r8,r9,0x6
800082e4:	ef 48 ff f0 	st.w	r7[-16],r8
800082e8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800082ec:	12 98       	mov	r8,r9
800082ee:	a5 68       	lsl	r8,0x4
800082f0:	12 18       	sub	r8,r9
800082f2:	a5 68       	lsl	r8,0x4
800082f4:	f0 c9 fc 19 	sub	r9,r8,-999
800082f8:	e0 68 4d d3 	mov	r8,19923
800082fc:	ea 18 10 62 	orh	r8,0x1062
80008300:	f2 08 06 48 	mulu.d	r8,r9,r8
80008304:	f2 08 16 06 	lsr	r8,r9,0x6
80008308:	ef 48 ff f4 	st.w	r7[-12],r8
8000830c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008310:	f0 08 10 64 	mul	r8,r8,100
80008314:	f0 c9 fc 19 	sub	r9,r8,-999
80008318:	e0 68 4d d3 	mov	r8,19923
8000831c:	ea 18 10 62 	orh	r8,0x1062
80008320:	f2 08 06 48 	mulu.d	r8,r9,r8
80008324:	f2 08 16 06 	lsr	r8,r9,0x6
80008328:	ef 48 ff f8 	st.w	r7[-8],r8
8000832c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008330:	e0 68 01 0e 	mov	r8,270
80008334:	f2 08 02 48 	mul	r8,r9,r8
80008338:	f0 c9 fc 19 	sub	r9,r8,-999
8000833c:	e0 68 4d d3 	mov	r8,19923
80008340:	ea 18 10 62 	orh	r8,0x1062
80008344:	f2 08 06 48 	mulu.d	r8,r9,r8
80008348:	f2 08 16 06 	lsr	r8,r9,0x6
8000834c:	ef 48 ff fc 	st.w	r7[-4],r8
80008350:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008354:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008358:	10 09       	add	r9,r8
8000835a:	ee fa ff e0 	ld.w	r10,r7[-32]
8000835e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008362:	f4 08 00 08 	add	r8,r10,r8
80008366:	10 39       	cp.w	r9,r8
80008368:	c0 c2       	brcc	80008380 <smc_init+0x180>
8000836a:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000836e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008372:	10 09       	add	r9,r8
80008374:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008378:	f2 08 01 08 	sub	r8,r9,r8
8000837c:	ef 48 ff f4 	st.w	r7[-12],r8
80008380:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008384:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008388:	10 09       	add	r9,r8
8000838a:	ee fa ff d8 	ld.w	r10,r7[-40]
8000838e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008392:	f4 08 00 08 	add	r8,r10,r8
80008396:	10 39       	cp.w	r9,r8
80008398:	c0 c2       	brcc	800083b0 <smc_init+0x1b0>
8000839a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000839e:	ee f8 ff e8 	ld.w	r8,r7[-24]
800083a2:	10 09       	add	r9,r8
800083a4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800083a8:	f2 08 01 08 	sub	r8,r9,r8
800083ac:	ef 48 ff ec 	st.w	r7[-20],r8
800083b0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800083b4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800083b8:	10 09       	add	r9,r8
800083ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800083be:	10 39       	cp.w	r9,r8
800083c0:	e0 88 00 0a 	brls	800083d4 <smc_init+0x1d4>
800083c4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800083c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800083cc:	f2 08 00 08 	add	r8,r9,r8
800083d0:	ef 48 ff f8 	st.w	r7[-8],r8
800083d4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800083d8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800083dc:	10 09       	add	r9,r8
800083de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800083e2:	10 39       	cp.w	r9,r8
800083e4:	e0 88 00 0a 	brls	800083f8 <smc_init+0x1f8>
800083e8:	ee f9 ff d8 	ld.w	r9,r7[-40]
800083ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800083f0:	f2 08 00 08 	add	r8,r9,r8
800083f4:	ef 48 ff f8 	st.w	r7[-8],r8
800083f8:	ee f9 ff e4 	ld.w	r9,r7[-28]
800083fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008400:	10 09       	add	r9,r8
80008402:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008406:	10 39       	cp.w	r9,r8
80008408:	e0 88 00 0a 	brls	8000841c <smc_init+0x21c>
8000840c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008410:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008414:	f2 08 00 08 	add	r8,r9,r8
80008418:	ef 48 ff fc 	st.w	r7[-4],r8
8000841c:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008420:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008424:	10 09       	add	r9,r8
80008426:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000842a:	10 39       	cp.w	r9,r8
8000842c:	e0 88 00 0a 	brls	80008440 <smc_init+0x240>
80008430:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008434:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008438:	f2 08 00 08 	add	r8,r9,r8
8000843c:	ef 48 ff fc 	st.w	r7[-4],r8
80008440:	fe 68 1c 00 	mov	r8,-123904
80008444:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008448:	f2 0a 15 08 	lsl	r10,r9,0x8
8000844c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80008450:	12 4a       	or	r10,r9
80008452:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008456:	b1 69       	lsl	r9,0x10
80008458:	12 4a       	or	r10,r9
8000845a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000845e:	b9 69       	lsl	r9,0x18
80008460:	f5 e9 10 09 	or	r9,r10,r9
80008464:	91 09       	st.w	r8[0x0],r9
80008466:	fe 68 1c 00 	mov	r8,-123904
8000846a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000846e:	f2 0a 15 08 	lsl	r10,r9,0x8
80008472:	ee f9 ff e8 	ld.w	r9,r7[-24]
80008476:	12 4a       	or	r10,r9
80008478:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000847c:	b1 69       	lsl	r9,0x10
8000847e:	12 4a       	or	r10,r9
80008480:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008484:	b9 69       	lsl	r9,0x18
80008486:	f5 e9 10 09 	or	r9,r10,r9
8000848a:	91 19       	st.w	r8[0x4],r9
8000848c:	fe 68 1c 00 	mov	r8,-123904
80008490:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008494:	f2 0a 15 10 	lsl	r10,r9,0x10
80008498:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000849c:	f5 e9 10 09 	or	r9,r10,r9
800084a0:	91 29       	st.w	r8[0x8],r9
800084a2:	fe 68 1c 00 	mov	r8,-123904
800084a6:	e0 69 10 03 	mov	r9,4099
800084aa:	91 39       	st.w	r8[0xc],r9
800084ac:	48 49       	lddpc	r9,800084bc <smc_init+0x2bc>
800084ae:	30 18       	mov	r8,1
800084b0:	b2 88       	st.b	r9[0x0],r8
800084b2:	f0 1f 00 04 	mcall	800084c0 <smc_init+0x2c0>
800084b6:	2f 4d       	sub	sp,-48
800084b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800084bc:	00 00       	add	r0,r0
800084be:	07 0c       	ld.w	r12,r3++
800084c0:	80 00       	ld.sh	r0,r0[0x0]
800084c2:	84 c4       	ld.uh	r4,r2[0x8]

800084c4 <smc_enable_muxed_pins>:
800084c4:	eb cd 40 80 	pushm	r7,lr
800084c8:	1a 97       	mov	r7,sp
800084ca:	31 4b       	mov	r11,20
800084cc:	48 3c       	lddpc	r12,800084d8 <smc_enable_muxed_pins+0x14>
800084ce:	f0 1f 00 04 	mcall	800084dc <smc_enable_muxed_pins+0x18>
800084d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800084d6:	00 00       	add	r0,r0
800084d8:	80 00       	ld.sh	r0,r0[0x0]
800084da:	ec d4 80 00 	satsub.w	r4,r6,-32768
800084de:	85 60       	st.w	r2[0x18],r0

800084e0 <flashc_set_wait_state>:
800084e0:	eb cd 40 80 	pushm	r7,lr
800084e4:	1a 97       	mov	r7,sp
800084e6:	20 2d       	sub	sp,8
800084e8:	ef 4c ff f8 	st.w	r7[-8],r12
800084ec:	fe 68 14 00 	mov	r8,-125952
800084f0:	70 08       	ld.w	r8,r8[0x0]
800084f2:	30 09       	mov	r9,0
800084f4:	ef 49 ff fc 	st.w	r7[-4],r9
800084f8:	ef 48 ff fc 	st.w	r7[-4],r8
800084fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008500:	5c 58       	castu.b	r8
80008502:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008506:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000850a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000850e:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80008512:	ef 48 ff fc 	st.w	r7[-4],r8
80008516:	fe 68 14 00 	mov	r8,-125952
8000851a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000851e:	91 09       	st.w	r8[0x0],r9
80008520:	2f ed       	sub	sp,-8
80008522:	e3 cd 80 80 	ldm	sp++,r7,pc
80008526:	d7 03       	nop

80008528 <flashc_set_bus_freq>:
80008528:	eb cd 40 80 	pushm	r7,lr
8000852c:	1a 97       	mov	r7,sp
8000852e:	20 1d       	sub	sp,4
80008530:	ef 4c ff fc 	st.w	r7[-4],r12
80008534:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008538:	e0 69 50 ff 	mov	r9,20735
8000853c:	ea 19 02 25 	orh	r9,0x225
80008540:	12 38       	cp.w	r8,r9
80008542:	e0 88 00 06 	brls	8000854e <flashc_set_bus_freq+0x26>
80008546:	30 1c       	mov	r12,1
80008548:	f0 1f 00 05 	mcall	8000855c <flashc_set_bus_freq+0x34>
8000854c:	c0 48       	rjmp	80008554 <flashc_set_bus_freq+0x2c>
8000854e:	30 0c       	mov	r12,0
80008550:	f0 1f 00 03 	mcall	8000855c <flashc_set_bus_freq+0x34>
80008554:	2f fd       	sub	sp,-4
80008556:	e3 cd 80 80 	ldm	sp++,r7,pc
8000855a:	00 00       	add	r0,r0
8000855c:	80 00       	ld.sh	r0,r0[0x0]
8000855e:	84 e0       	ld.uh	r0,r2[0xc]

80008560 <gpio_enable_module>:
80008560:	eb cd 40 80 	pushm	r7,lr
80008564:	1a 97       	mov	r7,sp
80008566:	20 4d       	sub	sp,16
80008568:	ef 4c ff f4 	st.w	r7[-12],r12
8000856c:	ef 4b ff f0 	st.w	r7[-16],r11
80008570:	30 08       	mov	r8,0
80008572:	ef 48 ff f8 	st.w	r7[-8],r8
80008576:	30 08       	mov	r8,0
80008578:	ef 48 ff fc 	st.w	r7[-4],r8
8000857c:	c1 d8       	rjmp	800085b6 <gpio_enable_module+0x56>
8000857e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008582:	11 98       	ld.ub	r8,r8[0x1]
80008584:	10 99       	mov	r9,r8
80008586:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000858a:	11 88       	ld.ub	r8,r8[0x0]
8000858c:	12 9b       	mov	r11,r9
8000858e:	10 9c       	mov	r12,r8
80008590:	f0 1f 00 10 	mcall	800085d0 <gpio_enable_module+0x70>
80008594:	18 98       	mov	r8,r12
80008596:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000859a:	f3 e8 10 08 	or	r8,r9,r8
8000859e:	ef 48 ff f8 	st.w	r7[-8],r8
800085a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085a6:	2f e8       	sub	r8,-2
800085a8:	ef 48 ff f4 	st.w	r7[-12],r8
800085ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085b0:	2f f8       	sub	r8,-1
800085b2:	ef 48 ff fc 	st.w	r7[-4],r8
800085b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800085ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800085be:	10 39       	cp.w	r9,r8
800085c0:	cd f3       	brcs	8000857e <gpio_enable_module+0x1e>
800085c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800085c6:	10 9c       	mov	r12,r8
800085c8:	2f cd       	sub	sp,-16
800085ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800085ce:	00 00       	add	r0,r0
800085d0:	80 00       	ld.sh	r0,r0[0x0]
800085d2:	85 d4       	st.w	r2[0x34],r4

800085d4 <gpio_enable_module_pin>:
800085d4:	eb cd 40 80 	pushm	r7,lr
800085d8:	1a 97       	mov	r7,sp
800085da:	20 3d       	sub	sp,12
800085dc:	ef 4c ff f8 	st.w	r7[-8],r12
800085e0:	ef 4b ff f4 	st.w	r7[-12],r11
800085e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800085e8:	a5 98       	lsr	r8,0x5
800085ea:	a9 68       	lsl	r8,0x8
800085ec:	e0 28 f0 00 	sub	r8,61440
800085f0:	ef 48 ff fc 	st.w	r7[-4],r8
800085f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085f8:	58 18       	cp.w	r8,1
800085fa:	c1 e0       	breq	80008636 <gpio_enable_module_pin+0x62>
800085fc:	c0 63       	brcs	80008608 <gpio_enable_module_pin+0x34>
800085fe:	58 28       	cp.w	r8,2
80008600:	c3 20       	breq	80008664 <gpio_enable_module_pin+0x90>
80008602:	58 38       	cp.w	r8,3
80008604:	c4 70       	breq	80008692 <gpio_enable_module_pin+0xbe>
80008606:	c5 d8       	rjmp	800086c0 <gpio_enable_module_pin+0xec>
80008608:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000860c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008610:	30 19       	mov	r9,1
80008612:	f2 08 09 48 	lsl	r8,r9,r8
80008616:	10 99       	mov	r9,r8
80008618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000861c:	91 69       	st.w	r8[0x18],r9
8000861e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008622:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008626:	30 19       	mov	r9,1
80008628:	f2 08 09 48 	lsl	r8,r9,r8
8000862c:	10 99       	mov	r9,r8
8000862e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008632:	91 a9       	st.w	r8[0x28],r9
80008634:	c4 88       	rjmp	800086c4 <gpio_enable_module_pin+0xf0>
80008636:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000863a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000863e:	30 19       	mov	r9,1
80008640:	f2 08 09 48 	lsl	r8,r9,r8
80008644:	10 99       	mov	r9,r8
80008646:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000864a:	91 59       	st.w	r8[0x14],r9
8000864c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008650:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008654:	30 19       	mov	r9,1
80008656:	f2 08 09 48 	lsl	r8,r9,r8
8000865a:	10 99       	mov	r9,r8
8000865c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008660:	91 a9       	st.w	r8[0x28],r9
80008662:	c3 18       	rjmp	800086c4 <gpio_enable_module_pin+0xf0>
80008664:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008668:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000866c:	30 19       	mov	r9,1
8000866e:	f2 08 09 48 	lsl	r8,r9,r8
80008672:	10 99       	mov	r9,r8
80008674:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008678:	91 69       	st.w	r8[0x18],r9
8000867a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000867e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008682:	30 19       	mov	r9,1
80008684:	f2 08 09 48 	lsl	r8,r9,r8
80008688:	10 99       	mov	r9,r8
8000868a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000868e:	91 99       	st.w	r8[0x24],r9
80008690:	c1 a8       	rjmp	800086c4 <gpio_enable_module_pin+0xf0>
80008692:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008696:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000869a:	30 19       	mov	r9,1
8000869c:	f2 08 09 48 	lsl	r8,r9,r8
800086a0:	10 99       	mov	r9,r8
800086a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800086a6:	91 59       	st.w	r8[0x14],r9
800086a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800086ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800086b0:	30 19       	mov	r9,1
800086b2:	f2 08 09 48 	lsl	r8,r9,r8
800086b6:	10 99       	mov	r9,r8
800086b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800086bc:	91 99       	st.w	r8[0x24],r9
800086be:	c0 38       	rjmp	800086c4 <gpio_enable_module_pin+0xf0>
800086c0:	30 18       	mov	r8,1
800086c2:	c0 d8       	rjmp	800086dc <gpio_enable_module_pin+0x108>
800086c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800086c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800086cc:	30 19       	mov	r9,1
800086ce:	f2 08 09 48 	lsl	r8,r9,r8
800086d2:	10 99       	mov	r9,r8
800086d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800086d8:	91 29       	st.w	r8[0x8],r9
800086da:	30 08       	mov	r8,0
800086dc:	10 9c       	mov	r12,r8
800086de:	2f dd       	sub	sp,-12
800086e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800086e4 <gpio_enable_gpio_pin>:
800086e4:	eb cd 40 80 	pushm	r7,lr
800086e8:	1a 97       	mov	r7,sp
800086ea:	20 2d       	sub	sp,8
800086ec:	ef 4c ff f8 	st.w	r7[-8],r12
800086f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800086f4:	a5 98       	lsr	r8,0x5
800086f6:	a9 68       	lsl	r8,0x8
800086f8:	e0 28 f0 00 	sub	r8,61440
800086fc:	ef 48 ff fc 	st.w	r7[-4],r8
80008700:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008704:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008708:	30 19       	mov	r9,1
8000870a:	f2 08 09 48 	lsl	r8,r9,r8
8000870e:	10 99       	mov	r9,r8
80008710:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008714:	f1 49 00 48 	st.w	r8[72],r9
80008718:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000871c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008720:	30 19       	mov	r9,1
80008722:	f2 08 09 48 	lsl	r8,r9,r8
80008726:	10 99       	mov	r9,r8
80008728:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000872c:	91 19       	st.w	r8[0x4],r9
8000872e:	2f ed       	sub	sp,-8
80008730:	e3 cd 80 80 	ldm	sp++,r7,pc

80008734 <gpio_enable_pin_pull_up>:
80008734:	eb cd 40 80 	pushm	r7,lr
80008738:	1a 97       	mov	r7,sp
8000873a:	20 2d       	sub	sp,8
8000873c:	ef 4c ff f8 	st.w	r7[-8],r12
80008740:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008744:	a5 98       	lsr	r8,0x5
80008746:	a9 68       	lsl	r8,0x8
80008748:	e0 28 f0 00 	sub	r8,61440
8000874c:	ef 48 ff fc 	st.w	r7[-4],r8
80008750:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008754:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008758:	30 19       	mov	r9,1
8000875a:	f2 08 09 48 	lsl	r8,r9,r8
8000875e:	10 99       	mov	r9,r8
80008760:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008764:	f1 49 00 74 	st.w	r8[116],r9
80008768:	2f ed       	sub	sp,-8
8000876a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000876e <gpio_configure_pin>:
8000876e:	eb cd 40 80 	pushm	r7,lr
80008772:	1a 97       	mov	r7,sp
80008774:	20 3d       	sub	sp,12
80008776:	ef 4c ff f8 	st.w	r7[-8],r12
8000877a:	ef 4b ff f4 	st.w	r7[-12],r11
8000877e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008782:	a5 98       	lsr	r8,0x5
80008784:	a9 68       	lsl	r8,0x8
80008786:	e0 28 f0 00 	sub	r8,61440
8000878a:	ef 48 ff fc 	st.w	r7[-4],r8
8000878e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008792:	e2 18 00 04 	andl	r8,0x4,COH
80008796:	c0 e0       	breq	800087b2 <gpio_configure_pin+0x44>
80008798:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000879c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800087a0:	30 19       	mov	r9,1
800087a2:	f2 08 09 48 	lsl	r8,r9,r8
800087a6:	10 99       	mov	r9,r8
800087a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800087ac:	f1 49 00 74 	st.w	r8[116],r9
800087b0:	c0 d8       	rjmp	800087ca <gpio_configure_pin+0x5c>
800087b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800087b6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800087ba:	30 19       	mov	r9,1
800087bc:	f2 08 09 48 	lsl	r8,r9,r8
800087c0:	10 99       	mov	r9,r8
800087c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800087c6:	f1 49 00 78 	st.w	r8[120],r9
800087ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800087ce:	e2 18 00 80 	andl	r8,0x80,COH
800087d2:	c5 a0       	breq	80008886 <gpio_configure_pin+0x118>
800087d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800087d8:	e2 18 01 80 	andl	r8,0x180,COH
800087dc:	c1 a0       	breq	80008810 <gpio_configure_pin+0xa2>
800087de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800087e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800087e6:	30 19       	mov	r9,1
800087e8:	f2 08 09 48 	lsl	r8,r9,r8
800087ec:	10 99       	mov	r9,r8
800087ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800087f2:	f1 49 00 a8 	st.w	r8[168],r9
800087f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800087fa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800087fe:	30 19       	mov	r9,1
80008800:	f2 08 09 48 	lsl	r8,r9,r8
80008804:	10 99       	mov	r9,r8
80008806:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000880a:	f1 49 00 b8 	st.w	r8[184],r9
8000880e:	c3 c8       	rjmp	80008886 <gpio_configure_pin+0x118>
80008810:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008814:	e2 18 02 80 	andl	r8,0x280,COH
80008818:	c1 a0       	breq	8000884c <gpio_configure_pin+0xde>
8000881a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000881e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008822:	30 19       	mov	r9,1
80008824:	f2 08 09 48 	lsl	r8,r9,r8
80008828:	10 99       	mov	r9,r8
8000882a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000882e:	f1 49 00 a4 	st.w	r8[164],r9
80008832:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008836:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000883a:	30 19       	mov	r9,1
8000883c:	f2 08 09 48 	lsl	r8,r9,r8
80008840:	10 99       	mov	r9,r8
80008842:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008846:	f1 49 00 b8 	st.w	r8[184],r9
8000884a:	c1 e8       	rjmp	80008886 <gpio_configure_pin+0x118>
8000884c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008850:	e2 18 03 80 	andl	r8,0x380,COH
80008854:	c1 90       	breq	80008886 <gpio_configure_pin+0x118>
80008856:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000885a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000885e:	30 19       	mov	r9,1
80008860:	f2 08 09 48 	lsl	r8,r9,r8
80008864:	10 99       	mov	r9,r8
80008866:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000886a:	f1 49 00 a8 	st.w	r8[168],r9
8000886e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008872:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008876:	30 19       	mov	r9,1
80008878:	f2 08 09 48 	lsl	r8,r9,r8
8000887c:	10 99       	mov	r9,r8
8000887e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008882:	f1 49 00 b4 	st.w	r8[180],r9
80008886:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000888a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000888e:	5c 58       	castu.b	r8
80008890:	c2 c0       	breq	800088e8 <gpio_configure_pin+0x17a>
80008892:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008896:	e2 18 00 02 	andl	r8,0x2,COH
8000889a:	c0 e0       	breq	800088b6 <gpio_configure_pin+0x148>
8000889c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800088a0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800088a4:	30 19       	mov	r9,1
800088a6:	f2 08 09 48 	lsl	r8,r9,r8
800088aa:	10 99       	mov	r9,r8
800088ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800088b0:	f1 49 00 54 	st.w	r8[84],r9
800088b4:	c0 d8       	rjmp	800088ce <gpio_configure_pin+0x160>
800088b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800088ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800088be:	30 19       	mov	r9,1
800088c0:	f2 08 09 48 	lsl	r8,r9,r8
800088c4:	10 99       	mov	r9,r8
800088c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800088ca:	f1 49 00 58 	st.w	r8[88],r9
800088ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800088d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800088d6:	30 19       	mov	r9,1
800088d8:	f2 08 09 48 	lsl	r8,r9,r8
800088dc:	10 99       	mov	r9,r8
800088de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800088e2:	f1 49 00 44 	st.w	r8[68],r9
800088e6:	c0 d8       	rjmp	80008900 <gpio_configure_pin+0x192>
800088e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800088ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800088f0:	30 19       	mov	r9,1
800088f2:	f2 08 09 48 	lsl	r8,r9,r8
800088f6:	10 99       	mov	r9,r8
800088f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800088fc:	f1 49 00 48 	st.w	r8[72],r9
80008900:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008904:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008908:	30 19       	mov	r9,1
8000890a:	f2 08 09 48 	lsl	r8,r9,r8
8000890e:	10 99       	mov	r9,r8
80008910:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008914:	91 19       	st.w	r8[0x4],r9
80008916:	2f dd       	sub	sp,-12
80008918:	e3 cd 80 80 	ldm	sp++,r7,pc

8000891c <gpio_get_pin_value>:
8000891c:	eb cd 40 80 	pushm	r7,lr
80008920:	1a 97       	mov	r7,sp
80008922:	20 2d       	sub	sp,8
80008924:	ef 4c ff f8 	st.w	r7[-8],r12
80008928:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000892c:	a5 98       	lsr	r8,0x5
8000892e:	a9 68       	lsl	r8,0x8
80008930:	e0 28 f0 00 	sub	r8,61440
80008934:	ef 48 ff fc 	st.w	r7[-4],r8
80008938:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000893c:	71 89       	ld.w	r9,r8[0x60]
8000893e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008942:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008946:	f2 08 0a 48 	lsr	r8,r9,r8
8000894a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000894e:	10 9c       	mov	r12,r8
80008950:	2f ed       	sub	sp,-8
80008952:	e3 cd 80 80 	ldm	sp++,r7,pc

80008956 <gpio_set_gpio_pin>:
80008956:	eb cd 40 80 	pushm	r7,lr
8000895a:	1a 97       	mov	r7,sp
8000895c:	20 2d       	sub	sp,8
8000895e:	ef 4c ff f8 	st.w	r7[-8],r12
80008962:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008966:	a5 98       	lsr	r8,0x5
80008968:	a9 68       	lsl	r8,0x8
8000896a:	e0 28 f0 00 	sub	r8,61440
8000896e:	ef 48 ff fc 	st.w	r7[-4],r8
80008972:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008976:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000897a:	30 19       	mov	r9,1
8000897c:	f2 08 09 48 	lsl	r8,r9,r8
80008980:	10 99       	mov	r9,r8
80008982:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008986:	f1 49 00 54 	st.w	r8[84],r9
8000898a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000898e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008992:	30 19       	mov	r9,1
80008994:	f2 08 09 48 	lsl	r8,r9,r8
80008998:	10 99       	mov	r9,r8
8000899a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000899e:	f1 49 00 44 	st.w	r8[68],r9
800089a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800089aa:	30 19       	mov	r9,1
800089ac:	f2 08 09 48 	lsl	r8,r9,r8
800089b0:	10 99       	mov	r9,r8
800089b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800089b6:	91 19       	st.w	r8[0x4],r9
800089b8:	2f ed       	sub	sp,-8
800089ba:	e3 cd 80 80 	ldm	sp++,r7,pc

800089be <gpio_clr_gpio_pin>:
800089be:	eb cd 40 80 	pushm	r7,lr
800089c2:	1a 97       	mov	r7,sp
800089c4:	20 2d       	sub	sp,8
800089c6:	ef 4c ff f8 	st.w	r7[-8],r12
800089ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089ce:	a5 98       	lsr	r8,0x5
800089d0:	a9 68       	lsl	r8,0x8
800089d2:	e0 28 f0 00 	sub	r8,61440
800089d6:	ef 48 ff fc 	st.w	r7[-4],r8
800089da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800089e2:	30 19       	mov	r9,1
800089e4:	f2 08 09 48 	lsl	r8,r9,r8
800089e8:	10 99       	mov	r9,r8
800089ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800089ee:	f1 49 00 58 	st.w	r8[88],r9
800089f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800089fa:	30 19       	mov	r9,1
800089fc:	f2 08 09 48 	lsl	r8,r9,r8
80008a00:	10 99       	mov	r9,r8
80008a02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a06:	f1 49 00 44 	st.w	r8[68],r9
80008a0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a0e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a12:	30 19       	mov	r9,1
80008a14:	f2 08 09 48 	lsl	r8,r9,r8
80008a18:	10 99       	mov	r9,r8
80008a1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a1e:	91 19       	st.w	r8[0x4],r9
80008a20:	2f ed       	sub	sp,-8
80008a22:	e3 cd 80 80 	ldm	sp++,r7,pc

80008a26 <gpio_tgl_gpio_pin>:
80008a26:	eb cd 40 80 	pushm	r7,lr
80008a2a:	1a 97       	mov	r7,sp
80008a2c:	20 2d       	sub	sp,8
80008a2e:	ef 4c ff f8 	st.w	r7[-8],r12
80008a32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a36:	a5 98       	lsr	r8,0x5
80008a38:	a9 68       	lsl	r8,0x8
80008a3a:	e0 28 f0 00 	sub	r8,61440
80008a3e:	ef 48 ff fc 	st.w	r7[-4],r8
80008a42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a46:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a4a:	30 19       	mov	r9,1
80008a4c:	f2 08 09 48 	lsl	r8,r9,r8
80008a50:	10 99       	mov	r9,r8
80008a52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a56:	f1 49 00 5c 	st.w	r8[92],r9
80008a5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a5e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a62:	30 19       	mov	r9,1
80008a64:	f2 08 09 48 	lsl	r8,r9,r8
80008a68:	10 99       	mov	r9,r8
80008a6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a6e:	f1 49 00 44 	st.w	r8[68],r9
80008a72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a76:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a7a:	30 19       	mov	r9,1
80008a7c:	f2 08 09 48 	lsl	r8,r9,r8
80008a80:	10 99       	mov	r9,r8
80008a82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a86:	91 19       	st.w	r8[0x4],r9
80008a88:	2f ed       	sub	sp,-8
80008a8a:	e3 cd 80 80 	ldm	sp++,r7,pc

80008a8e <_unhandled_interrupt>:
80008a8e:	eb cd 40 80 	pushm	r7,lr
80008a92:	1a 97       	mov	r7,sp
80008a94:	c0 08       	rjmp	80008a94 <_unhandled_interrupt+0x6>
80008a96:	d7 03       	nop

80008a98 <_get_interrupt_handler>:
80008a98:	eb cd 40 80 	pushm	r7,lr
80008a9c:	1a 97       	mov	r7,sp
80008a9e:	20 3d       	sub	sp,12
80008aa0:	ef 4c ff f4 	st.w	r7[-12],r12
80008aa4:	fe 78 08 00 	mov	r8,-63488
80008aa8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008aac:	f2 09 11 03 	rsub	r9,r9,3
80008ab0:	28 09       	sub	r9,-128
80008ab2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008ab6:	ef 48 ff f8 	st.w	r7[-8],r8
80008aba:	fe 78 08 00 	mov	r8,-63488
80008abe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008ac2:	2c 09       	sub	r9,-64
80008ac4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008ac8:	ef 48 ff fc 	st.w	r7[-4],r8
80008acc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ad0:	58 08       	cp.w	r8,0
80008ad2:	c1 30       	breq	80008af8 <_get_interrupt_handler+0x60>
80008ad4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008ad8:	48 b8       	lddpc	r8,80008b04 <_get_interrupt_handler+0x6c>
80008ada:	a1 79       	lsl	r9,0x1
80008adc:	2f f9       	sub	r9,-1
80008ade:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008ae2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ae6:	f0 08 12 00 	clz	r8,r8
80008aea:	f0 08 11 1f 	rsub	r8,r8,31
80008aee:	a3 68       	lsl	r8,0x2
80008af0:	f2 08 00 08 	add	r8,r9,r8
80008af4:	70 08       	ld.w	r8,r8[0x0]
80008af6:	c0 28       	rjmp	80008afa <_get_interrupt_handler+0x62>
80008af8:	30 08       	mov	r8,0
80008afa:	10 9c       	mov	r12,r8
80008afc:	2f dd       	sub	sp,-12
80008afe:	e3 cd 80 80 	ldm	sp++,r7,pc
80008b02:	00 00       	add	r0,r0
80008b04:	80 00       	ld.sh	r0,r0[0x0]
80008b06:	ec fc eb cd 	ld.w	r12,r6[-5171]

80008b08 <INTC_init_evba>:
80008b08:	eb cd 40 80 	pushm	r7,lr
80008b0c:	1a 97       	mov	r7,sp
80008b0e:	48 38       	lddpc	r8,80008b18 <INTC_init_evba+0x10>
80008b10:	e3 b8 00 01 	mtsr	0x4,r8
80008b14:	e3 cd 80 80 	ldm	sp++,r7,pc
80008b18:	80 00       	ld.sh	r0,r0[0x0]
80008b1a:	e6 00       	*unknown*

80008b1c <INTC_init_interrupts>:
80008b1c:	eb cd 40 80 	pushm	r7,lr
80008b20:	1a 97       	mov	r7,sp
80008b22:	20 2d       	sub	sp,8
80008b24:	f0 1f 00 1f 	mcall	80008ba0 <INTC_init_interrupts+0x84>
80008b28:	30 08       	mov	r8,0
80008b2a:	ef 48 ff f8 	st.w	r7[-8],r8
80008b2e:	c3 18       	rjmp	80008b90 <INTC_init_interrupts+0x74>
80008b30:	30 08       	mov	r8,0
80008b32:	ef 48 ff fc 	st.w	r7[-4],r8
80008b36:	c1 48       	rjmp	80008b5e <INTC_init_interrupts+0x42>
80008b38:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008b3c:	49 a8       	lddpc	r8,80008ba4 <INTC_init_interrupts+0x88>
80008b3e:	a1 79       	lsl	r9,0x1
80008b40:	2f f9       	sub	r9,-1
80008b42:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008b46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b4a:	a3 68       	lsl	r8,0x2
80008b4c:	f2 08 00 08 	add	r8,r9,r8
80008b50:	49 69       	lddpc	r9,80008ba8 <INTC_init_interrupts+0x8c>
80008b52:	91 09       	st.w	r8[0x0],r9
80008b54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b58:	2f f8       	sub	r8,-1
80008b5a:	ef 48 ff fc 	st.w	r7[-4],r8
80008b5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008b62:	49 18       	lddpc	r8,80008ba4 <INTC_init_interrupts+0x88>
80008b64:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
80008b68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b6c:	10 39       	cp.w	r9,r8
80008b6e:	fe 9b ff e5 	brhi	80008b38 <INTC_init_interrupts+0x1c>
80008b72:	fe 78 08 00 	mov	r8,-63488
80008b76:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008b7a:	48 db       	lddpc	r11,80008bac <INTC_init_interrupts+0x90>
80008b7c:	48 da       	lddpc	r10,80008bb0 <INTC_init_interrupts+0x94>
80008b7e:	f6 0a 01 0a 	sub	r10,r11,r10
80008b82:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80008b86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b8a:	2f f8       	sub	r8,-1
80008b8c:	ef 48 ff f8 	st.w	r7[-8],r8
80008b90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b94:	59 d8       	cp.w	r8,29
80008b96:	fe 98 ff cd 	brls	80008b30 <INTC_init_interrupts+0x14>
80008b9a:	2f ed       	sub	sp,-8
80008b9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008ba0:	80 00       	ld.sh	r0,r0[0x0]
80008ba2:	8b 08       	st.w	r5[0x0],r8
80008ba4:	80 00       	ld.sh	r0,r0[0x0]
80008ba6:	ec fc 80 00 	ld.w	r12,r6[-32768]
80008baa:	8a 8e       	ld.uh	lr,r5[0x0]
80008bac:	80 00       	ld.sh	r0,r0[0x0]
80008bae:	e7 04 80 00 	ld.sh	r4,r3[-32768]
80008bb2:	e6 00       	*unknown*

80008bb4 <INTC_register_interrupt>:
80008bb4:	eb cd 40 80 	pushm	r7,lr
80008bb8:	1a 97       	mov	r7,sp
80008bba:	20 4d       	sub	sp,16
80008bbc:	ef 4c ff f8 	st.w	r7[-8],r12
80008bc0:	ef 4b ff f4 	st.w	r7[-12],r11
80008bc4:	ef 4a ff f0 	st.w	r7[-16],r10
80008bc8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008bcc:	a5 98       	lsr	r8,0x5
80008bce:	ef 48 ff fc 	st.w	r7[-4],r8
80008bd2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008bd6:	4a 78       	lddpc	r8,80008c70 <INTC_register_interrupt+0xbc>
80008bd8:	a1 79       	lsl	r9,0x1
80008bda:	2f f9       	sub	r9,-1
80008bdc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008be0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008be4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008be8:	a3 68       	lsl	r8,0x2
80008bea:	f2 08 00 08 	add	r8,r9,r8
80008bee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008bf2:	91 09       	st.w	r8[0x0],r9
80008bf4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008bf8:	58 08       	cp.w	r8,0
80008bfa:	c0 c1       	brne	80008c12 <INTC_register_interrupt+0x5e>
80008bfc:	fe 78 08 00 	mov	r8,-63488
80008c00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008c04:	49 cb       	lddpc	r11,80008c74 <INTC_register_interrupt+0xc0>
80008c06:	49 da       	lddpc	r10,80008c78 <INTC_register_interrupt+0xc4>
80008c08:	f6 0a 01 0a 	sub	r10,r11,r10
80008c0c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80008c10:	c2 d8       	rjmp	80008c6a <INTC_register_interrupt+0xb6>
80008c12:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008c16:	58 18       	cp.w	r8,1
80008c18:	c0 d1       	brne	80008c32 <INTC_register_interrupt+0x7e>
80008c1a:	fe 78 08 00 	mov	r8,-63488
80008c1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008c22:	49 7b       	lddpc	r11,80008c7c <INTC_register_interrupt+0xc8>
80008c24:	49 5a       	lddpc	r10,80008c78 <INTC_register_interrupt+0xc4>
80008c26:	f6 0a 01 0a 	sub	r10,r11,r10
80008c2a:	bf aa       	sbr	r10,0x1e
80008c2c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80008c30:	c1 d8       	rjmp	80008c6a <INTC_register_interrupt+0xb6>
80008c32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008c36:	58 28       	cp.w	r8,2
80008c38:	c0 d1       	brne	80008c52 <INTC_register_interrupt+0x9e>
80008c3a:	fe 78 08 00 	mov	r8,-63488
80008c3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008c42:	49 0b       	lddpc	r11,80008c80 <INTC_register_interrupt+0xcc>
80008c44:	48 da       	lddpc	r10,80008c78 <INTC_register_interrupt+0xc4>
80008c46:	f6 0a 01 0a 	sub	r10,r11,r10
80008c4a:	bf ba       	sbr	r10,0x1f
80008c4c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80008c50:	c0 d8       	rjmp	80008c6a <INTC_register_interrupt+0xb6>
80008c52:	fe 78 08 00 	mov	r8,-63488
80008c56:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008c5a:	48 bb       	lddpc	r11,80008c84 <INTC_register_interrupt+0xd0>
80008c5c:	48 7a       	lddpc	r10,80008c78 <INTC_register_interrupt+0xc4>
80008c5e:	f6 0a 01 0a 	sub	r10,r11,r10
80008c62:	ea 1a c0 00 	orh	r10,0xc000
80008c66:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80008c6a:	2f cd       	sub	sp,-16
80008c6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008c70:	80 00       	ld.sh	r0,r0[0x0]
80008c72:	ec fc 80 00 	ld.w	r12,r6[-32768]
80008c76:	e7 04 80 00 	ld.sh	r4,r3[-32768]
80008c7a:	e6 00       	*unknown*
80008c7c:	80 00       	ld.sh	r0,r0[0x0]
80008c7e:	e7 12 80 00 	ld.uh	r2,r3[-32768]
80008c82:	e7 20 80 00 	ld.sb	r0,r3[-32768]
80008c86:	e7 2e eb cd 	ld.sb	lr,r3[-5171]

80008c88 <mci_reset>:
80008c88:	eb cd 40 80 	pushm	r7,lr
80008c8c:	1a 97       	mov	r7,sp
80008c8e:	20 1d       	sub	sp,4
80008c90:	ef 4c ff fc 	st.w	r7[-4],r12
80008c94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c98:	e0 69 00 80 	mov	r9,128
80008c9c:	91 09       	st.w	r8[0x0],r9
80008c9e:	2f fd       	sub	sp,-4
80008ca0:	e3 cd 80 80 	ldm	sp++,r7,pc

80008ca4 <mci_disable>:
80008ca4:	eb cd 40 80 	pushm	r7,lr
80008ca8:	1a 97       	mov	r7,sp
80008caa:	20 1d       	sub	sp,4
80008cac:	ef 4c ff fc 	st.w	r7[-4],r12
80008cb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cb4:	30 a9       	mov	r9,10
80008cb6:	91 09       	st.w	r8[0x0],r9
80008cb8:	2f fd       	sub	sp,-4
80008cba:	e3 cd 80 80 	ldm	sp++,r7,pc

80008cbe <mci_enable>:
80008cbe:	eb cd 40 80 	pushm	r7,lr
80008cc2:	1a 97       	mov	r7,sp
80008cc4:	20 1d       	sub	sp,4
80008cc6:	ef 4c ff fc 	st.w	r7[-4],r12
80008cca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cce:	30 59       	mov	r9,5
80008cd0:	91 09       	st.w	r8[0x0],r9
80008cd2:	2f fd       	sub	sp,-4
80008cd4:	e3 cd 80 80 	ldm	sp++,r7,pc

80008cd8 <mci_set_speed>:
80008cd8:	eb cd 40 80 	pushm	r7,lr
80008cdc:	1a 97       	mov	r7,sp
80008cde:	20 7d       	sub	sp,28
80008ce0:	ef 4c ff ec 	st.w	r7[-20],r12
80008ce4:	ef 4b ff e8 	st.w	r7[-24],r11
80008ce8:	ef 4a ff e4 	st.w	r7[-28],r10
80008cec:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008cf0:	70 18       	ld.w	r8,r8[0x4]
80008cf2:	ef 48 ff f4 	st.w	r7[-12],r8
80008cf6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008cfa:	e0 69 78 40 	mov	r9,30784
80008cfe:	ea 19 01 7d 	orh	r9,0x17d
80008d02:	12 38       	cp.w	r8,r9
80008d04:	e0 88 00 14 	brls	80008d2c <mci_set_speed+0x54>
80008d08:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008d0c:	71 58       	ld.w	r8,r8[0x54]
80008d0e:	ef 48 ff f0 	st.w	r7[-16],r8
80008d12:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008d16:	30 19       	mov	r9,1
80008d18:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80008d1c:	ef 48 ff f0 	st.w	r7[-16],r8
80008d20:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008d24:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008d28:	f1 49 00 54 	st.w	r8[84],r9
80008d2c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008d30:	58 08       	cp.w	r8,0
80008d32:	c2 90       	breq	80008d84 <mci_set_speed+0xac>
80008d34:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008d38:	f0 09 15 01 	lsl	r9,r8,0x1
80008d3c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008d40:	f0 09 0d 08 	divu	r8,r8,r9
80008d44:	ef 48 ff f8 	st.w	r7[-8],r8
80008d48:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008d4c:	f0 09 15 01 	lsl	r9,r8,0x1
80008d50:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008d54:	f0 09 0d 08 	divu	r8,r8,r9
80008d58:	12 98       	mov	r8,r9
80008d5a:	ef 48 ff fc 	st.w	r7[-4],r8
80008d5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d62:	58 08       	cp.w	r8,0
80008d64:	c0 60       	breq	80008d70 <mci_set_speed+0x98>
80008d66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d6a:	2f f8       	sub	r8,-1
80008d6c:	ef 48 ff f8 	st.w	r7[-8],r8
80008d70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d74:	58 08       	cp.w	r8,0
80008d76:	c0 b0       	breq	80008d8c <mci_set_speed+0xb4>
80008d78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d7c:	20 18       	sub	r8,1
80008d7e:	ef 48 ff f8 	st.w	r7[-8],r8
80008d82:	c0 68       	rjmp	80008d8e <mci_set_speed+0xb6>
80008d84:	30 08       	mov	r8,0
80008d86:	ef 48 ff f8 	st.w	r7[-8],r8
80008d8a:	c0 28       	rjmp	80008d8e <mci_set_speed+0xb6>
80008d8c:	d7 03       	nop
80008d8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008d92:	e0 18 ff 00 	andl	r8,0xff00
80008d96:	ef 48 ff f4 	st.w	r7[-12],r8
80008d9a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008d9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008da2:	f3 e8 10 08 	or	r8,r9,r8
80008da6:	ef 48 ff f4 	st.w	r7[-12],r8
80008daa:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008dae:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008db2:	91 19       	st.w	r8[0x4],r9
80008db4:	2f 9d       	sub	sp,-28
80008db6:	e3 cd 80 80 	ldm	sp++,r7,pc
80008dba:	d7 03       	nop

80008dbc <mci_init>:
80008dbc:	eb cd 40 80 	pushm	r7,lr
80008dc0:	1a 97       	mov	r7,sp
80008dc2:	20 3d       	sub	sp,12
80008dc4:	ef 4c ff fc 	st.w	r7[-4],r12
80008dc8:	16 98       	mov	r8,r11
80008dca:	ef 4a ff f4 	st.w	r7[-12],r10
80008dce:	ef 68 ff f8 	st.b	r7[-8],r8
80008dd2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80008dd6:	30 18       	mov	r8,1
80008dd8:	f0 09 18 00 	cp.b	r9,r8
80008ddc:	e0 88 00 04 	brls	80008de4 <mci_init+0x28>
80008de0:	30 18       	mov	r8,1
80008de2:	c3 98       	rjmp	80008e54 <mci_init+0x98>
80008de4:	49 e8       	lddpc	r8,80008e5c <mci_init+0xa0>
80008de6:	30 09       	mov	r9,0
80008de8:	91 09       	st.w	r8[0x0],r9
80008dea:	ee fc ff fc 	ld.w	r12,r7[-4]
80008dee:	f0 1f 00 1d 	mcall	80008e60 <mci_init+0xa4>
80008df2:	ee fc ff fc 	ld.w	r12,r7[-4]
80008df6:	f0 1f 00 1c 	mcall	80008e64 <mci_init+0xa8>
80008dfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dfe:	3f f9       	mov	r9,-1
80008e00:	f1 49 00 48 	st.w	r8[72],r9
80008e04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e08:	30 09       	mov	r9,0
80008e0a:	f1 49 00 54 	st.w	r8[84],r9
80008e0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e12:	30 09       	mov	r9,0
80008e14:	91 19       	st.w	r8[0x4],r9
80008e16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e1a:	37 29       	mov	r9,114
80008e1c:	91 29       	st.w	r8[0x8],r9
80008e1e:	e2 7a 0d 40 	mov	r10,200000
80008e22:	ee fb ff f4 	ld.w	r11,r7[-12]
80008e26:	ee fc ff fc 	ld.w	r12,r7[-4]
80008e2a:	f0 1f 00 10 	mcall	80008e68 <mci_init+0xac>
80008e2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e32:	70 18       	ld.w	r8,r8[0x4]
80008e34:	10 99       	mov	r9,r8
80008e36:	e8 19 1f 00 	orl	r9,0x1f00
80008e3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e3e:	91 19       	st.w	r8[0x4],r9
80008e40:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80008e44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e48:	91 39       	st.w	r8[0xc],r9
80008e4a:	ee fc ff fc 	ld.w	r12,r7[-4]
80008e4e:	f0 1f 00 08 	mcall	80008e6c <mci_init+0xb0>
80008e52:	30 08       	mov	r8,0
80008e54:	10 9c       	mov	r12,r8
80008e56:	2f dd       	sub	sp,-12
80008e58:	e3 cd 80 80 	ldm	sp++,r7,pc
80008e5c:	00 00       	add	r0,r0
80008e5e:	08 24       	rsub	r4,r4
80008e60:	80 00       	ld.sh	r0,r0[0x0]
80008e62:	8c 88       	ld.uh	r8,r6[0x0]
80008e64:	80 00       	ld.sh	r0,r0[0x0]
80008e66:	8c a4       	ld.uh	r4,r6[0x4]
80008e68:	80 00       	ld.sh	r0,r0[0x0]
80008e6a:	8c d8       	ld.uh	r8,r6[0xa]
80008e6c:	80 00       	ld.sh	r0,r0[0x0]
80008e6e:	8c be       	ld.uh	lr,r6[0x6]

80008e70 <mci_set_block_size>:
80008e70:	eb cd 40 80 	pushm	r7,lr
80008e74:	1a 97       	mov	r7,sp
80008e76:	20 3d       	sub	sp,12
80008e78:	ef 4c ff f8 	st.w	r7[-8],r12
80008e7c:	16 98       	mov	r8,r11
80008e7e:	ef 58 ff f4 	st.h	r7[-12],r8
80008e82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e86:	70 18       	ld.w	r8,r8[0x4]
80008e88:	ef 48 ff fc 	st.w	r7[-4],r8
80008e8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e90:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008e94:	ef 48 ff fc 	st.w	r7[-4],r8
80008e98:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80008e9c:	b1 68       	lsl	r8,0x10
80008e9e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008ea2:	f3 e8 10 08 	or	r8,r9,r8
80008ea6:	ef 48 ff fc 	st.w	r7[-4],r8
80008eaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008eae:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008eb2:	91 19       	st.w	r8[0x4],r9
80008eb4:	2f dd       	sub	sp,-12
80008eb6:	e3 cd 80 80 	ldm	sp++,r7,pc

80008eba <mci_set_block_count>:
80008eba:	eb cd 40 80 	pushm	r7,lr
80008ebe:	1a 97       	mov	r7,sp
80008ec0:	20 3d       	sub	sp,12
80008ec2:	ef 4c ff f8 	st.w	r7[-8],r12
80008ec6:	16 98       	mov	r8,r11
80008ec8:	ef 58 ff f4 	st.h	r7[-12],r8
80008ecc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ed0:	70 68       	ld.w	r8,r8[0x18]
80008ed2:	ef 48 ff fc 	st.w	r7[-4],r8
80008ed6:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80008eda:	ef 58 ff fe 	st.h	r7[-2],r8
80008ede:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008ee2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ee6:	91 69       	st.w	r8[0x18],r9
80008ee8:	2f dd       	sub	sp,-12
80008eea:	e3 cd 80 80 	ldm	sp++,r7,pc
80008eee:	d7 03       	nop

80008ef0 <mci_send_cmd>:
80008ef0:	eb cd 40 80 	pushm	r7,lr
80008ef4:	1a 97       	mov	r7,sp
80008ef6:	20 7d       	sub	sp,28
80008ef8:	ef 4c ff ec 	st.w	r7[-20],r12
80008efc:	ef 4b ff e8 	st.w	r7[-24],r11
80008f00:	ef 4a ff e4 	st.w	r7[-28],r10
80008f04:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008f08:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008f0c:	91 49       	st.w	r8[0x10],r9
80008f0e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008f12:	ee f9 ff e8 	ld.w	r9,r7[-24]
80008f16:	91 59       	st.w	r8[0x14],r9
80008f18:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008f1c:	ef 48 ff f4 	st.w	r7[-12],r8
80008f20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008f24:	ef 48 ff f8 	st.w	r7[-8],r8
80008f28:	4a 78       	lddpc	r8,80008fc4 <mci_send_cmd+0xd4>
80008f2a:	70 08       	ld.w	r8,r8[0x0]
80008f2c:	10 99       	mov	r9,r8
80008f2e:	e6 19 01 e0 	andh	r9,0x1e0,COH
80008f32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f36:	71 08       	ld.w	r8,r8[0x40]
80008f38:	f3 e8 10 08 	or	r8,r9,r8
80008f3c:	10 99       	mov	r9,r8
80008f3e:	4a 28       	lddpc	r8,80008fc4 <mci_send_cmd+0xd4>
80008f40:	91 09       	st.w	r8[0x0],r9
80008f42:	4a 18       	lddpc	r8,80008fc4 <mci_send_cmd+0xd4>
80008f44:	70 08       	ld.w	r8,r8[0x0]
80008f46:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008f4a:	ce 70       	breq	80008f18 <mci_send_cmd+0x28>
80008f4c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008f50:	ef 48 ff fc 	st.w	r7[-4],r8
80008f54:	49 c8       	lddpc	r8,80008fc4 <mci_send_cmd+0xd4>
80008f56:	70 08       	ld.w	r8,r8[0x0]
80008f58:	10 99       	mov	r9,r8
80008f5a:	e6 19 01 e0 	andh	r9,0x1e0,COH
80008f5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f62:	71 08       	ld.w	r8,r8[0x40]
80008f64:	f3 e8 10 08 	or	r8,r9,r8
80008f68:	10 99       	mov	r9,r8
80008f6a:	49 78       	lddpc	r8,80008fc4 <mci_send_cmd+0xd4>
80008f6c:	91 09       	st.w	r8[0x0],r9
80008f6e:	49 68       	lddpc	r8,80008fc4 <mci_send_cmd+0xd4>
80008f70:	70 08       	ld.w	r8,r8[0x0]
80008f72:	e6 18 c0 7f 	andh	r8,0xc07f,COH
80008f76:	ef 48 ff f0 	st.w	r7[-16],r8
80008f7a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008f7e:	58 08       	cp.w	r8,0
80008f80:	c1 d0       	breq	80008fba <mci_send_cmd+0xca>
80008f82:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008f86:	e0 48 00 69 	cp.w	r8,105
80008f8a:	c0 f0       	breq	80008fa8 <mci_send_cmd+0xb8>
80008f8c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008f90:	e0 48 08 41 	cp.w	r8,2113
80008f94:	c0 a0       	breq	80008fa8 <mci_send_cmd+0xb8>
80008f96:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008f9a:	fc 19 00 10 	movh	r9,0x10
80008f9e:	12 38       	cp.w	r8,r9
80008fa0:	c0 c0       	breq	80008fb8 <mci_send_cmd+0xc8>
80008fa2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008fa6:	c0 b8       	rjmp	80008fbc <mci_send_cmd+0xcc>
80008fa8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008fac:	e4 48 00 00 	cp.w	r8,262144
80008fb0:	c0 50       	breq	80008fba <mci_send_cmd+0xca>
80008fb2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008fb6:	c0 38       	rjmp	80008fbc <mci_send_cmd+0xcc>
80008fb8:	d7 03       	nop
80008fba:	30 08       	mov	r8,0
80008fbc:	10 9c       	mov	r12,r8
80008fbe:	2f 9d       	sub	sp,-28
80008fc0:	e3 cd 80 80 	ldm	sp++,r7,pc
80008fc4:	00 00       	add	r0,r0
80008fc6:	08 24       	rsub	r4,r4

80008fc8 <mci_set_bus_size>:
80008fc8:	eb cd 40 80 	pushm	r7,lr
80008fcc:	1a 97       	mov	r7,sp
80008fce:	20 3d       	sub	sp,12
80008fd0:	ef 4c ff f8 	st.w	r7[-8],r12
80008fd4:	16 98       	mov	r8,r11
80008fd6:	ef 68 ff f4 	st.b	r7[-12],r8
80008fda:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008fde:	30 38       	mov	r8,3
80008fe0:	f0 09 18 00 	cp.b	r9,r8
80008fe4:	e0 88 00 04 	brls	80008fec <mci_set_bus_size+0x24>
80008fe8:	30 18       	mov	r8,1
80008fea:	c1 b8       	rjmp	80009020 <mci_set_bus_size+0x58>
80008fec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ff0:	70 38       	ld.w	r8,r8[0xc]
80008ff2:	ef 48 ff fc 	st.w	r7[-4],r8
80008ff6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ffa:	e0 18 ff 3f 	andl	r8,0xff3f
80008ffe:	ef 48 ff fc 	st.w	r7[-4],r8
80009002:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009006:	a7 68       	lsl	r8,0x6
80009008:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000900c:	f3 e8 10 08 	or	r8,r9,r8
80009010:	ef 48 ff fc 	st.w	r7[-4],r8
80009014:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009018:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000901c:	91 39       	st.w	r8[0xc],r9
8000901e:	30 08       	mov	r8,0
80009020:	10 9c       	mov	r12,r8
80009022:	2f dd       	sub	sp,-12
80009024:	e3 cd 80 80 	ldm	sp++,r7,pc

80009028 <mci_read_response>:
80009028:	eb cd 40 80 	pushm	r7,lr
8000902c:	1a 97       	mov	r7,sp
8000902e:	20 1d       	sub	sp,4
80009030:	ef 4c ff fc 	st.w	r7[-4],r12
80009034:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009038:	70 88       	ld.w	r8,r8[0x20]
8000903a:	10 9c       	mov	r12,r8
8000903c:	2f fd       	sub	sp,-4
8000903e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009042:	d7 03       	nop

80009044 <mci_wait_busy_signal>:
80009044:	eb cd 40 80 	pushm	r7,lr
80009048:	1a 97       	mov	r7,sp
8000904a:	20 2d       	sub	sp,8
8000904c:	ef 4c ff f8 	st.w	r7[-8],r12
80009050:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009054:	ef 48 ff fc 	st.w	r7[-4],r8
80009058:	48 b8       	lddpc	r8,80009084 <mci_wait_busy_signal+0x40>
8000905a:	70 08       	ld.w	r8,r8[0x0]
8000905c:	10 99       	mov	r9,r8
8000905e:	e6 19 01 e0 	andh	r9,0x1e0,COH
80009062:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009066:	71 08       	ld.w	r8,r8[0x40]
80009068:	f3 e8 10 08 	or	r8,r9,r8
8000906c:	10 99       	mov	r9,r8
8000906e:	48 68       	lddpc	r8,80009084 <mci_wait_busy_signal+0x40>
80009070:	91 09       	st.w	r8[0x0],r9
80009072:	48 58       	lddpc	r8,80009084 <mci_wait_busy_signal+0x40>
80009074:	70 08       	ld.w	r8,r8[0x0]
80009076:	e2 18 00 20 	andl	r8,0x20,COH
8000907a:	ce b0       	breq	80009050 <mci_wait_busy_signal+0xc>
8000907c:	2f ed       	sub	sp,-8
8000907e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009082:	00 00       	add	r0,r0
80009084:	00 00       	add	r0,r0
80009086:	08 24       	rsub	r4,r4

80009088 <mci_select_card>:
80009088:	eb cd 40 80 	pushm	r7,lr
8000908c:	1a 97       	mov	r7,sp
8000908e:	20 3d       	sub	sp,12
80009090:	ef 4c ff fc 	st.w	r7[-4],r12
80009094:	16 99       	mov	r9,r11
80009096:	14 98       	mov	r8,r10
80009098:	ef 69 ff f8 	st.b	r7[-8],r9
8000909c:	ef 68 ff f4 	st.b	r7[-12],r8
800090a0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800090a4:	30 18       	mov	r8,1
800090a6:	f0 09 18 00 	cp.b	r9,r8
800090aa:	e0 88 00 04 	brls	800090b2 <mci_select_card+0x2a>
800090ae:	30 18       	mov	r8,1
800090b0:	c0 e8       	rjmp	800090cc <mci_select_card+0x44>
800090b2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800090b6:	f0 09 15 06 	lsl	r9,r8,0x6
800090ba:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800090be:	f3 e8 10 08 	or	r8,r9,r8
800090c2:	10 99       	mov	r9,r8
800090c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090c8:	91 39       	st.w	r8[0xc],r9
800090ca:	30 08       	mov	r8,0
800090cc:	10 9c       	mov	r12,r8
800090ce:	2f dd       	sub	sp,-12
800090d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800090d4 <cpu_irq_is_enabled_flags>:
800090d4:	eb cd 40 80 	pushm	r7,lr
800090d8:	1a 97       	mov	r7,sp
800090da:	20 1d       	sub	sp,4
800090dc:	ef 4c ff fc 	st.w	r7[-4],r12
800090e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090e4:	e6 18 00 01 	andh	r8,0x1,COH
800090e8:	5f 08       	sreq	r8
800090ea:	5c 58       	castu.b	r8
800090ec:	10 9c       	mov	r12,r8
800090ee:	2f fd       	sub	sp,-4
800090f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800090f4 <tc_configure_interrupts>:
800090f4:	eb cd 40 80 	pushm	r7,lr
800090f8:	1a 97       	mov	r7,sp
800090fa:	20 4d       	sub	sp,16
800090fc:	ef 4c ff f8 	st.w	r7[-8],r12
80009100:	ef 4b ff f4 	st.w	r7[-12],r11
80009104:	ef 4a ff f0 	st.w	r7[-16],r10
80009108:	e1 b8 00 00 	mfsr	r8,0x0
8000910c:	10 9c       	mov	r12,r8
8000910e:	f0 1f 00 73 	mcall	800092d8 <tc_configure_interrupts+0x1e4>
80009112:	18 98       	mov	r8,r12
80009114:	ef 68 ff ff 	st.b	r7[-1],r8
80009118:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000911c:	58 28       	cp.w	r8,2
8000911e:	e0 88 00 04 	brls	80009126 <tc_configure_interrupts+0x32>
80009122:	3f f8       	mov	r8,-1
80009124:	cd 68       	rjmp	800092d0 <tc_configure_interrupts+0x1dc>
80009126:	ee fb ff f4 	ld.w	r11,r7[-12]
8000912a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000912e:	70 08       	ld.w	r8,r8[0x0]
80009130:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80009134:	5c 58       	castu.b	r8
80009136:	f0 09 15 07 	lsl	r9,r8,0x7
8000913a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000913e:	70 08       	ld.w	r8,r8[0x0]
80009140:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80009144:	5c 58       	castu.b	r8
80009146:	a7 68       	lsl	r8,0x6
80009148:	10 49       	or	r9,r8
8000914a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000914e:	70 08       	ld.w	r8,r8[0x0]
80009150:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80009154:	5c 58       	castu.b	r8
80009156:	a5 78       	lsl	r8,0x5
80009158:	10 49       	or	r9,r8
8000915a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000915e:	70 08       	ld.w	r8,r8[0x0]
80009160:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80009164:	5c 58       	castu.b	r8
80009166:	a5 68       	lsl	r8,0x4
80009168:	10 49       	or	r9,r8
8000916a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000916e:	70 08       	ld.w	r8,r8[0x0]
80009170:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80009174:	5c 58       	castu.b	r8
80009176:	a3 78       	lsl	r8,0x3
80009178:	10 49       	or	r9,r8
8000917a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000917e:	70 08       	ld.w	r8,r8[0x0]
80009180:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80009184:	5c 58       	castu.b	r8
80009186:	a3 68       	lsl	r8,0x2
80009188:	10 49       	or	r9,r8
8000918a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000918e:	70 08       	ld.w	r8,r8[0x0]
80009190:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80009194:	5c 58       	castu.b	r8
80009196:	a1 78       	lsl	r8,0x1
80009198:	10 49       	or	r9,r8
8000919a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000919e:	70 08       	ld.w	r8,r8[0x0]
800091a0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800091a4:	5c 58       	castu.b	r8
800091a6:	f3 e8 10 08 	or	r8,r9,r8
800091aa:	10 99       	mov	r9,r8
800091ac:	ee fa ff f8 	ld.w	r10,r7[-8]
800091b0:	f6 08 15 06 	lsl	r8,r11,0x6
800091b4:	f4 08 00 08 	add	r8,r10,r8
800091b8:	2d c8       	sub	r8,-36
800091ba:	91 09       	st.w	r8[0x0],r9
800091bc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800091c0:	30 08       	mov	r8,0
800091c2:	f0 09 18 00 	cp.b	r9,r8
800091c6:	c0 20       	breq	800091ca <tc_configure_interrupts+0xd6>
800091c8:	d3 03       	ssrf	0x10
800091ca:	ee fb ff f4 	ld.w	r11,r7[-12]
800091ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800091d2:	70 08       	ld.w	r8,r8[0x0]
800091d4:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800091d8:	5c 58       	castu.b	r8
800091da:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800091de:	c0 41       	brne	800091e6 <tc_configure_interrupts+0xf2>
800091e0:	e0 69 00 80 	mov	r9,128
800091e4:	c0 28       	rjmp	800091e8 <tc_configure_interrupts+0xf4>
800091e6:	30 09       	mov	r9,0
800091e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800091ec:	70 08       	ld.w	r8,r8[0x0]
800091ee:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800091f2:	5c 58       	castu.b	r8
800091f4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800091f8:	c0 31       	brne	800091fe <tc_configure_interrupts+0x10a>
800091fa:	34 08       	mov	r8,64
800091fc:	c0 28       	rjmp	80009200 <tc_configure_interrupts+0x10c>
800091fe:	30 08       	mov	r8,0
80009200:	10 49       	or	r9,r8
80009202:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009206:	70 08       	ld.w	r8,r8[0x0]
80009208:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
8000920c:	5c 58       	castu.b	r8
8000920e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009212:	c0 31       	brne	80009218 <tc_configure_interrupts+0x124>
80009214:	32 08       	mov	r8,32
80009216:	c0 28       	rjmp	8000921a <tc_configure_interrupts+0x126>
80009218:	30 08       	mov	r8,0
8000921a:	10 49       	or	r9,r8
8000921c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009220:	70 08       	ld.w	r8,r8[0x0]
80009222:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80009226:	5c 58       	castu.b	r8
80009228:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000922c:	c0 31       	brne	80009232 <tc_configure_interrupts+0x13e>
8000922e:	31 08       	mov	r8,16
80009230:	c0 28       	rjmp	80009234 <tc_configure_interrupts+0x140>
80009232:	30 08       	mov	r8,0
80009234:	10 49       	or	r9,r8
80009236:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000923a:	70 08       	ld.w	r8,r8[0x0]
8000923c:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80009240:	5c 58       	castu.b	r8
80009242:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009246:	c0 31       	brne	8000924c <tc_configure_interrupts+0x158>
80009248:	30 88       	mov	r8,8
8000924a:	c0 28       	rjmp	8000924e <tc_configure_interrupts+0x15a>
8000924c:	30 08       	mov	r8,0
8000924e:	10 49       	or	r9,r8
80009250:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009254:	70 08       	ld.w	r8,r8[0x0]
80009256:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
8000925a:	5c 58       	castu.b	r8
8000925c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009260:	c0 31       	brne	80009266 <tc_configure_interrupts+0x172>
80009262:	30 48       	mov	r8,4
80009264:	c0 28       	rjmp	80009268 <tc_configure_interrupts+0x174>
80009266:	30 08       	mov	r8,0
80009268:	10 49       	or	r9,r8
8000926a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000926e:	70 08       	ld.w	r8,r8[0x0]
80009270:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80009274:	5c 58       	castu.b	r8
80009276:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000927a:	c0 31       	brne	80009280 <tc_configure_interrupts+0x18c>
8000927c:	30 28       	mov	r8,2
8000927e:	c0 28       	rjmp	80009282 <tc_configure_interrupts+0x18e>
80009280:	30 08       	mov	r8,0
80009282:	10 49       	or	r9,r8
80009284:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009288:	70 08       	ld.w	r8,r8[0x0]
8000928a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000928e:	5c 58       	castu.b	r8
80009290:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009294:	5f 08       	sreq	r8
80009296:	f3 e8 10 08 	or	r8,r9,r8
8000929a:	10 99       	mov	r9,r8
8000929c:	ee fa ff f8 	ld.w	r10,r7[-8]
800092a0:	f6 08 15 06 	lsl	r8,r11,0x6
800092a4:	f4 08 00 08 	add	r8,r10,r8
800092a8:	2d 88       	sub	r8,-40
800092aa:	91 09       	st.w	r8[0x0],r9
800092ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800092b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800092b4:	a1 78       	lsl	r8,0x1
800092b6:	2f f8       	sub	r8,-1
800092b8:	a5 78       	lsl	r8,0x5
800092ba:	f2 08 00 08 	add	r8,r9,r8
800092be:	70 08       	ld.w	r8,r8[0x0]
800092c0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800092c4:	30 08       	mov	r8,0
800092c6:	f0 09 18 00 	cp.b	r9,r8
800092ca:	c0 20       	breq	800092ce <tc_configure_interrupts+0x1da>
800092cc:	d5 03       	csrf	0x10
800092ce:	30 08       	mov	r8,0
800092d0:	10 9c       	mov	r12,r8
800092d2:	2f cd       	sub	sp,-16
800092d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800092d8:	80 00       	ld.sh	r0,r0[0x0]
800092da:	90 d4       	ld.uh	r4,r8[0xa]

800092dc <tc_init_waveform>:
800092dc:	eb cd 40 80 	pushm	r7,lr
800092e0:	1a 97       	mov	r7,sp
800092e2:	20 2d       	sub	sp,8
800092e4:	ef 4c ff fc 	st.w	r7[-4],r12
800092e8:	ef 4b ff f8 	st.w	r7[-8],r11
800092ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092f0:	70 08       	ld.w	r8,r8[0x0]
800092f2:	58 28       	cp.w	r8,2
800092f4:	e0 88 00 04 	brls	800092fc <tc_init_waveform+0x20>
800092f8:	3f f8       	mov	r8,-1
800092fa:	c9 78       	rjmp	80009428 <tc_init_waveform+0x14c>
800092fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009300:	70 09       	ld.w	r9,r8[0x0]
80009302:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009306:	70 18       	ld.w	r8,r8[0x4]
80009308:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
8000930c:	5c 58       	castu.b	r8
8000930e:	f0 0a 15 1e 	lsl	r10,r8,0x1e
80009312:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009316:	70 18       	ld.w	r8,r8[0x4]
80009318:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
8000931c:	5c 58       	castu.b	r8
8000931e:	bd 68       	lsl	r8,0x1c
80009320:	10 4a       	or	r10,r8
80009322:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009326:	70 18       	ld.w	r8,r8[0x4]
80009328:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
8000932c:	5c 58       	castu.b	r8
8000932e:	bb 68       	lsl	r8,0x1a
80009330:	10 4a       	or	r10,r8
80009332:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009336:	70 18       	ld.w	r8,r8[0x4]
80009338:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
8000933c:	5c 58       	castu.b	r8
8000933e:	b9 68       	lsl	r8,0x18
80009340:	10 4a       	or	r10,r8
80009342:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009346:	70 18       	ld.w	r8,r8[0x4]
80009348:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
8000934c:	5c 58       	castu.b	r8
8000934e:	b7 68       	lsl	r8,0x16
80009350:	10 4a       	or	r10,r8
80009352:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009356:	70 18       	ld.w	r8,r8[0x4]
80009358:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
8000935c:	5c 58       	castu.b	r8
8000935e:	b5 68       	lsl	r8,0x14
80009360:	10 4a       	or	r10,r8
80009362:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009366:	70 18       	ld.w	r8,r8[0x4]
80009368:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
8000936c:	5c 58       	castu.b	r8
8000936e:	b3 68       	lsl	r8,0x12
80009370:	10 4a       	or	r10,r8
80009372:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009376:	70 18       	ld.w	r8,r8[0x4]
80009378:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
8000937c:	5c 58       	castu.b	r8
8000937e:	b1 68       	lsl	r8,0x10
80009380:	f5 e8 10 08 	or	r8,r10,r8
80009384:	10 9a       	mov	r10,r8
80009386:	af ba       	sbr	r10,0xf
80009388:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000938c:	70 18       	ld.w	r8,r8[0x4]
8000938e:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
80009392:	5c 58       	castu.b	r8
80009394:	ad 78       	lsl	r8,0xd
80009396:	10 4a       	or	r10,r8
80009398:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000939c:	70 18       	ld.w	r8,r8[0x4]
8000939e:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
800093a2:	5c 58       	castu.b	r8
800093a4:	ad 68       	lsl	r8,0xc
800093a6:	10 4a       	or	r10,r8
800093a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093ac:	70 18       	ld.w	r8,r8[0x4]
800093ae:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
800093b2:	5c 58       	castu.b	r8
800093b4:	ab 68       	lsl	r8,0xa
800093b6:	10 4a       	or	r10,r8
800093b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093bc:	70 18       	ld.w	r8,r8[0x4]
800093be:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
800093c2:	5c 58       	castu.b	r8
800093c4:	a9 68       	lsl	r8,0x8
800093c6:	10 4a       	or	r10,r8
800093c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093cc:	70 18       	ld.w	r8,r8[0x4]
800093ce:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800093d2:	5c 58       	castu.b	r8
800093d4:	a7 78       	lsl	r8,0x7
800093d6:	10 4a       	or	r10,r8
800093d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093dc:	70 18       	ld.w	r8,r8[0x4]
800093de:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800093e2:	5c 58       	castu.b	r8
800093e4:	a7 68       	lsl	r8,0x6
800093e6:	10 4a       	or	r10,r8
800093e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093ec:	70 18       	ld.w	r8,r8[0x4]
800093ee:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
800093f2:	5c 58       	castu.b	r8
800093f4:	a5 68       	lsl	r8,0x4
800093f6:	10 4a       	or	r10,r8
800093f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093fc:	70 18       	ld.w	r8,r8[0x4]
800093fe:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80009402:	5c 58       	castu.b	r8
80009404:	a3 78       	lsl	r8,0x3
80009406:	10 4a       	or	r10,r8
80009408:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000940c:	70 18       	ld.w	r8,r8[0x4]
8000940e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80009412:	5c 58       	castu.b	r8
80009414:	f5 e8 10 08 	or	r8,r10,r8
80009418:	10 9a       	mov	r10,r8
8000941a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000941e:	a5 69       	lsl	r9,0x4
80009420:	2f f9       	sub	r9,-1
80009422:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80009426:	30 08       	mov	r8,0
80009428:	10 9c       	mov	r12,r8
8000942a:	2f ed       	sub	sp,-8
8000942c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009430 <tc_start>:
80009430:	eb cd 40 80 	pushm	r7,lr
80009434:	1a 97       	mov	r7,sp
80009436:	20 2d       	sub	sp,8
80009438:	ef 4c ff fc 	st.w	r7[-4],r12
8000943c:	ef 4b ff f8 	st.w	r7[-8],r11
80009440:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009444:	58 28       	cp.w	r8,2
80009446:	e0 88 00 04 	brls	8000944e <tc_start+0x1e>
8000944a:	3f f8       	mov	r8,-1
8000944c:	c0 b8       	rjmp	80009462 <tc_start+0x32>
8000944e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009452:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009456:	a7 68       	lsl	r8,0x6
80009458:	f2 08 00 08 	add	r8,r9,r8
8000945c:	30 59       	mov	r9,5
8000945e:	91 09       	st.w	r8[0x0],r9
80009460:	30 08       	mov	r8,0
80009462:	10 9c       	mov	r12,r8
80009464:	2f ed       	sub	sp,-8
80009466:	e3 cd 80 80 	ldm	sp++,r7,pc

8000946a <tc_read_sr>:
8000946a:	eb cd 40 80 	pushm	r7,lr
8000946e:	1a 97       	mov	r7,sp
80009470:	20 2d       	sub	sp,8
80009472:	ef 4c ff fc 	st.w	r7[-4],r12
80009476:	ef 4b ff f8 	st.w	r7[-8],r11
8000947a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000947e:	58 28       	cp.w	r8,2
80009480:	e0 88 00 04 	brls	80009488 <tc_read_sr+0x1e>
80009484:	3f f8       	mov	r8,-1
80009486:	c0 b8       	rjmp	8000949c <tc_read_sr+0x32>
80009488:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000948c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009490:	a1 78       	lsl	r8,0x1
80009492:	2f f8       	sub	r8,-1
80009494:	a5 78       	lsl	r8,0x5
80009496:	f2 08 00 08 	add	r8,r9,r8
8000949a:	70 08       	ld.w	r8,r8[0x0]
8000949c:	10 9c       	mov	r12,r8
8000949e:	2f ed       	sub	sp,-8
800094a0:	e3 cd 80 80 	ldm	sp++,r7,pc

800094a4 <tc_write_rc>:
800094a4:	eb cd 40 80 	pushm	r7,lr
800094a8:	1a 97       	mov	r7,sp
800094aa:	20 3d       	sub	sp,12
800094ac:	ef 4c ff fc 	st.w	r7[-4],r12
800094b0:	ef 4b ff f8 	st.w	r7[-8],r11
800094b4:	14 98       	mov	r8,r10
800094b6:	ef 58 ff f4 	st.h	r7[-12],r8
800094ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800094be:	58 28       	cp.w	r8,2
800094c0:	e0 88 00 04 	brls	800094c8 <tc_write_rc+0x24>
800094c4:	3f f8       	mov	r8,-1
800094c6:	c2 78       	rjmp	80009514 <tc_write_rc+0x70>
800094c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800094cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800094d0:	a5 69       	lsl	r9,0x4
800094d2:	2f f9       	sub	r9,-1
800094d4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800094d8:	e2 18 80 00 	andl	r8,0x8000,COH
800094dc:	c1 a0       	breq	80009510 <tc_write_rc+0x6c>
800094de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800094e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800094e6:	ee fa ff fc 	ld.w	r10,r7[-4]
800094ea:	a7 69       	lsl	r9,0x6
800094ec:	f4 09 00 09 	add	r9,r10,r9
800094f0:	2e 49       	sub	r9,-28
800094f2:	72 09       	ld.w	r9,r9[0x0]
800094f4:	12 9a       	mov	r10,r9
800094f6:	e0 1a 00 00 	andl	r10,0x0
800094fa:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800094fe:	f5 e9 10 09 	or	r9,r10,r9
80009502:	ee fa ff fc 	ld.w	r10,r7[-4]
80009506:	a7 68       	lsl	r8,0x6
80009508:	f4 08 00 08 	add	r8,r10,r8
8000950c:	2e 48       	sub	r8,-28
8000950e:	91 09       	st.w	r8[0x0],r9
80009510:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80009514:	10 9c       	mov	r12,r8
80009516:	2f dd       	sub	sp,-12
80009518:	e3 cd 80 80 	ldm	sp++,r7,pc

8000951c <cpu_irq_save>:
8000951c:	eb cd 40 80 	pushm	r7,lr
80009520:	1a 97       	mov	r7,sp
80009522:	20 1d       	sub	sp,4
80009524:	e1 b8 00 00 	mfsr	r8,0x0
80009528:	ef 48 ff fc 	st.w	r7[-4],r8
8000952c:	d3 03       	ssrf	0x10
8000952e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009532:	10 9c       	mov	r12,r8
80009534:	2f fd       	sub	sp,-4
80009536:	e3 cd 80 80 	ldm	sp++,r7,pc

8000953a <cpu_irq_restore>:
8000953a:	eb cd 40 80 	pushm	r7,lr
8000953e:	1a 97       	mov	r7,sp
80009540:	20 1d       	sub	sp,4
80009542:	ef 4c ff fc 	st.w	r7[-4],r12
80009546:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000954a:	e3 b8 00 00 	mtsr	0x0,r8
8000954e:	2f fd       	sub	sp,-4
80009550:	e3 cd 80 80 	ldm	sp++,r7,pc

80009554 <sleepmgr_lock_mode>:
80009554:	eb cd 40 80 	pushm	r7,lr
80009558:	1a 97       	mov	r7,sp
8000955a:	20 2d       	sub	sp,8
8000955c:	ef 4c ff f8 	st.w	r7[-8],r12
80009560:	f0 1f 00 0b 	mcall	8000958c <sleepmgr_lock_mode+0x38>
80009564:	18 98       	mov	r8,r12
80009566:	ef 48 ff fc 	st.w	r7[-4],r8
8000956a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000956e:	48 99       	lddpc	r9,80009590 <sleepmgr_lock_mode+0x3c>
80009570:	f2 08 07 09 	ld.ub	r9,r9[r8]
80009574:	2f f9       	sub	r9,-1
80009576:	5c 59       	castu.b	r9
80009578:	48 6a       	lddpc	r10,80009590 <sleepmgr_lock_mode+0x3c>
8000957a:	f4 08 0b 09 	st.b	r10[r8],r9
8000957e:	ee fc ff fc 	ld.w	r12,r7[-4]
80009582:	f0 1f 00 05 	mcall	80009594 <sleepmgr_lock_mode+0x40>
80009586:	2f ed       	sub	sp,-8
80009588:	e3 cd 80 80 	ldm	sp++,r7,pc
8000958c:	80 00       	ld.sh	r0,r0[0x0]
8000958e:	95 1c       	st.w	r10[0x4],r12
80009590:	00 00       	add	r0,r0
80009592:	0d d0       	ld.ub	r0,r6[0x5]
80009594:	80 00       	ld.sh	r0,r0[0x0]
80009596:	95 3a       	st.w	r10[0xc],r10

80009598 <sleepmgr_unlock_mode>:
80009598:	eb cd 40 80 	pushm	r7,lr
8000959c:	1a 97       	mov	r7,sp
8000959e:	20 2d       	sub	sp,8
800095a0:	ef 4c ff f8 	st.w	r7[-8],r12
800095a4:	f0 1f 00 0b 	mcall	800095d0 <sleepmgr_unlock_mode+0x38>
800095a8:	18 98       	mov	r8,r12
800095aa:	ef 48 ff fc 	st.w	r7[-4],r8
800095ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095b2:	48 99       	lddpc	r9,800095d4 <sleepmgr_unlock_mode+0x3c>
800095b4:	f2 08 07 09 	ld.ub	r9,r9[r8]
800095b8:	20 19       	sub	r9,1
800095ba:	5c 59       	castu.b	r9
800095bc:	48 6a       	lddpc	r10,800095d4 <sleepmgr_unlock_mode+0x3c>
800095be:	f4 08 0b 09 	st.b	r10[r8],r9
800095c2:	ee fc ff fc 	ld.w	r12,r7[-4]
800095c6:	f0 1f 00 05 	mcall	800095d8 <sleepmgr_unlock_mode+0x40>
800095ca:	2f ed       	sub	sp,-8
800095cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800095d0:	80 00       	ld.sh	r0,r0[0x0]
800095d2:	95 1c       	st.w	r10[0x4],r12
800095d4:	00 00       	add	r0,r0
800095d6:	0d d0       	ld.ub	r0,r6[0x5]
800095d8:	80 00       	ld.sh	r0,r0[0x0]
800095da:	95 3a       	st.w	r10[0xc],r10

800095dc <udd_sleep_mode>:
800095dc:	eb cd 40 80 	pushm	r7,lr
800095e0:	1a 97       	mov	r7,sp
800095e2:	20 1d       	sub	sp,4
800095e4:	18 98       	mov	r8,r12
800095e6:	ef 68 ff fc 	st.b	r7[-4],r8
800095ea:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800095ee:	ec 18 00 01 	eorl	r8,0x1
800095f2:	5c 58       	castu.b	r8
800095f4:	c0 80       	breq	80009604 <udd_sleep_mode+0x28>
800095f6:	48 f8       	lddpc	r8,80009630 <udd_sleep_mode+0x54>
800095f8:	11 88       	ld.ub	r8,r8[0x0]
800095fa:	58 08       	cp.w	r8,0
800095fc:	c0 40       	breq	80009604 <udd_sleep_mode+0x28>
800095fe:	30 1c       	mov	r12,1
80009600:	f0 1f 00 0d 	mcall	80009634 <udd_sleep_mode+0x58>
80009604:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009608:	30 08       	mov	r8,0
8000960a:	f0 09 18 00 	cp.b	r9,r8
8000960e:	c0 a0       	breq	80009622 <udd_sleep_mode+0x46>
80009610:	48 88       	lddpc	r8,80009630 <udd_sleep_mode+0x54>
80009612:	11 88       	ld.ub	r8,r8[0x0]
80009614:	ec 18 00 01 	eorl	r8,0x1
80009618:	5c 58       	castu.b	r8
8000961a:	c0 40       	breq	80009622 <udd_sleep_mode+0x46>
8000961c:	30 1c       	mov	r12,1
8000961e:	f0 1f 00 07 	mcall	80009638 <udd_sleep_mode+0x5c>
80009622:	48 49       	lddpc	r9,80009630 <udd_sleep_mode+0x54>
80009624:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009628:	b2 88       	st.b	r9[0x0],r8
8000962a:	2f fd       	sub	sp,-4
8000962c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009630:	00 00       	add	r0,r0
80009632:	08 28       	rsub	r8,r4
80009634:	80 00       	ld.sh	r0,r0[0x0]
80009636:	95 98       	st.w	r10[0x24],r8
80009638:	80 00       	ld.sh	r0,r0[0x0]
8000963a:	95 54       	st.w	r10[0x14],r4

8000963c <udd_interrupt>:
8000963c:	eb cd 40 80 	pushm	r7,lr
80009640:	1a 97       	mov	r7,sp
80009642:	fe 68 00 04 	mov	r8,-131068
80009646:	70 08       	ld.w	r8,r8[0x0]
80009648:	e2 18 00 04 	andl	r8,0x4,COH
8000964c:	c1 10       	breq	8000966e <udd_interrupt+0x32>
8000964e:	fe 68 00 08 	mov	r8,-131064
80009652:	30 49       	mov	r9,4
80009654:	91 09       	st.w	r8[0x0],r9
80009656:	fe 68 08 04 	mov	r8,-129020
8000965a:	70 08       	ld.w	r8,r8[0x0]
8000965c:	e2 18 30 00 	andl	r8,0x3000,COH
80009660:	ad 88       	lsr	r8,0xc
80009662:	c0 31       	brne	80009668 <udd_interrupt+0x2c>
80009664:	f0 1f 00 54 	mcall	800097b4 <udd_interrupt+0x178>
80009668:	f0 1f 00 54 	mcall	800097b8 <udd_interrupt+0x17c>
8000966c:	c9 d8       	rjmp	800097a6 <udd_interrupt+0x16a>
8000966e:	fe 68 00 04 	mov	r8,-131068
80009672:	70 08       	ld.w	r8,r8[0x0]
80009674:	e2 18 00 02 	andl	r8,0x2,COH
80009678:	c0 80       	breq	80009688 <udd_interrupt+0x4c>
8000967a:	fe 68 00 08 	mov	r8,-131064
8000967e:	30 29       	mov	r9,2
80009680:	91 09       	st.w	r8[0x0],r9
80009682:	f0 1f 00 4d 	mcall	800097b4 <udd_interrupt+0x178>
80009686:	c9 08       	rjmp	800097a6 <udd_interrupt+0x16a>
80009688:	f0 1f 00 4d 	mcall	800097bc <udd_interrupt+0x180>
8000968c:	18 98       	mov	r8,r12
8000968e:	58 08       	cp.w	r8,0
80009690:	e0 81 00 88 	brne	800097a0 <udd_interrupt+0x164>
80009694:	f0 1f 00 4b 	mcall	800097c0 <udd_interrupt+0x184>
80009698:	18 98       	mov	r8,r12
8000969a:	58 08       	cp.w	r8,0
8000969c:	e0 81 00 84 	brne	800097a4 <udd_interrupt+0x168>
800096a0:	fe 68 00 04 	mov	r8,-131068
800096a4:	70 08       	ld.w	r8,r8[0x0]
800096a6:	e2 18 00 08 	andl	r8,0x8,COH
800096aa:	c0 e0       	breq	800096c6 <udd_interrupt+0x8a>
800096ac:	fe 68 00 08 	mov	r8,-131064
800096b0:	30 89       	mov	r9,8
800096b2:	91 09       	st.w	r8[0x0],r9
800096b4:	f0 1f 00 44 	mcall	800097c4 <udd_interrupt+0x188>
800096b8:	f0 1f 00 44 	mcall	800097c8 <udd_interrupt+0x18c>
800096bc:	f0 1f 00 44 	mcall	800097cc <udd_interrupt+0x190>
800096c0:	f0 1f 00 44 	mcall	800097d0 <udd_interrupt+0x194>
800096c4:	c7 18       	rjmp	800097a6 <udd_interrupt+0x16a>
800096c6:	fe 68 00 10 	mov	r8,-131056
800096ca:	70 08       	ld.w	r8,r8[0x0]
800096cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800096d0:	5c 58       	castu.b	r8
800096d2:	c2 40       	breq	8000971a <udd_interrupt+0xde>
800096d4:	fe 68 00 04 	mov	r8,-131068
800096d8:	70 08       	ld.w	r8,r8[0x0]
800096da:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800096de:	5c 58       	castu.b	r8
800096e0:	c1 d0       	breq	8000971a <udd_interrupt+0xde>
800096e2:	fe 68 08 00 	mov	r8,-129024
800096e6:	fe 69 08 00 	mov	r9,-129024
800096ea:	72 09       	ld.w	r9,r9[0x0]
800096ec:	af c9       	cbr	r9,0xe
800096ee:	91 09       	st.w	r8[0x0],r9
800096f0:	fe 68 00 14 	mov	r8,-131052
800096f4:	30 19       	mov	r9,1
800096f6:	91 09       	st.w	r8[0x0],r9
800096f8:	fe 68 00 18 	mov	r8,-131048
800096fc:	31 09       	mov	r9,16
800096fe:	91 09       	st.w	r8[0x0],r9
80009700:	fe 68 08 00 	mov	r8,-129024
80009704:	fe 69 08 00 	mov	r9,-129024
80009708:	72 09       	ld.w	r9,r9[0x0]
8000970a:	af a9       	sbr	r9,0xe
8000970c:	91 09       	st.w	r8[0x0],r9
8000970e:	30 0c       	mov	r12,0
80009710:	f0 1f 00 31 	mcall	800097d4 <udd_interrupt+0x198>
80009714:	f0 1f 00 31 	mcall	800097d8 <udd_interrupt+0x19c>
80009718:	c4 78       	rjmp	800097a6 <udd_interrupt+0x16a>
8000971a:	fe 68 00 10 	mov	r8,-131056
8000971e:	70 08       	ld.w	r8,r8[0x0]
80009720:	e2 18 00 10 	andl	r8,0x10,COH
80009724:	c1 c0       	breq	8000975c <udd_interrupt+0x120>
80009726:	fe 68 00 04 	mov	r8,-131068
8000972a:	70 08       	ld.w	r8,r8[0x0]
8000972c:	e2 18 00 10 	andl	r8,0x10,COH
80009730:	c1 60       	breq	8000975c <udd_interrupt+0x120>
80009732:	fe 68 08 00 	mov	r8,-129024
80009736:	fe 69 08 00 	mov	r9,-129024
8000973a:	72 09       	ld.w	r9,r9[0x0]
8000973c:	af c9       	cbr	r9,0xe
8000973e:	91 09       	st.w	r8[0x0],r9
80009740:	fe 68 00 14 	mov	r8,-131052
80009744:	31 09       	mov	r9,16
80009746:	91 09       	st.w	r8[0x0],r9
80009748:	fe 68 00 18 	mov	r8,-131048
8000974c:	30 19       	mov	r9,1
8000974e:	91 09       	st.w	r8[0x0],r9
80009750:	30 1c       	mov	r12,1
80009752:	f0 1f 00 21 	mcall	800097d4 <udd_interrupt+0x198>
80009756:	f0 1f 00 22 	mcall	800097dc <udd_interrupt+0x1a0>
8000975a:	c2 68       	rjmp	800097a6 <udd_interrupt+0x16a>
8000975c:	fe 68 08 04 	mov	r8,-129020
80009760:	70 08       	ld.w	r8,r8[0x0]
80009762:	e2 18 00 02 	andl	r8,0x2,COH
80009766:	c2 00       	breq	800097a6 <udd_interrupt+0x16a>
80009768:	fe 68 08 00 	mov	r8,-129024
8000976c:	fe 69 08 00 	mov	r9,-129024
80009770:	72 09       	ld.w	r9,r9[0x0]
80009772:	af c9       	cbr	r9,0xe
80009774:	91 09       	st.w	r8[0x0],r9
80009776:	fe 68 08 08 	mov	r8,-129016
8000977a:	30 29       	mov	r9,2
8000977c:	91 09       	st.w	r8[0x0],r9
8000977e:	fe 68 08 00 	mov	r8,-129024
80009782:	fe 69 08 00 	mov	r9,-129024
80009786:	72 09       	ld.w	r9,r9[0x0]
80009788:	af a9       	sbr	r9,0xe
8000978a:	91 09       	st.w	r8[0x0],r9
8000978c:	fe 68 08 04 	mov	r8,-129020
80009790:	70 08       	ld.w	r8,r8[0x0]
80009792:	e2 18 08 00 	andl	r8,0x800,COH
80009796:	5f 18       	srne	r8
80009798:	10 9c       	mov	r12,r8
8000979a:	f0 1f 00 12 	mcall	800097e0 <udd_interrupt+0x1a4>
8000979e:	c0 48       	rjmp	800097a6 <udd_interrupt+0x16a>
800097a0:	d7 03       	nop
800097a2:	c0 28       	rjmp	800097a6 <udd_interrupt+0x16a>
800097a4:	d7 03       	nop
800097a6:	fe 68 00 00 	mov	r8,-131072
800097aa:	f0 f8 08 18 	ld.w	r8,r8[2072]
800097ae:	e3 cd 40 80 	ldm	sp++,r7,lr
800097b2:	d6 03       	rete
800097b4:	80 00       	ld.sh	r0,r0[0x0]
800097b6:	d0 58       	*unknown*
800097b8:	80 00       	ld.sh	r0,r0[0x0]
800097ba:	de 78       	*unknown*
800097bc:	80 00       	ld.sh	r0,r0[0x0]
800097be:	ad 30       	mul	r0,r6
800097c0:	80 00       	ld.sh	r0,r0[0x0]
800097c2:	b1 e4       	*unknown*
800097c4:	80 00       	ld.sh	r0,r0[0x0]
800097c6:	ae 64       	st.h	r7[0xc],r4
800097c8:	80 00       	ld.sh	r0,r0[0x0]
800097ca:	cf f4       	brge	800097c8 <udd_interrupt+0x18c>
800097cc:	80 00       	ld.sh	r0,r0[0x0]
800097ce:	a5 b0       	sbr	r0,0x5
800097d0:	80 00       	ld.sh	r0,r0[0x0]
800097d2:	a6 94       	st.b	r3[0x1],r4
800097d4:	80 00       	ld.sh	r0,r0[0x0]
800097d6:	95 dc       	st.w	r10[0x34],r12
800097d8:	80 00       	ld.sh	r0,r0[0x0]
800097da:	de 50       	acall	0x394
800097dc:	80 00       	ld.sh	r0,r0[0x0]
800097de:	de 64       	*unknown*
800097e0:	80 00       	ld.sh	r0,r0[0x0]
800097e2:	de 1c       	*unknown*

800097e4 <udd_include_vbus_monitoring>:
800097e4:	eb cd 40 80 	pushm	r7,lr
800097e8:	1a 97       	mov	r7,sp
800097ea:	30 18       	mov	r8,1
800097ec:	10 9c       	mov	r12,r8
800097ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800097f2:	d7 03       	nop

800097f4 <udd_enable>:
800097f4:	eb cd 40 80 	pushm	r7,lr
800097f8:	1a 97       	mov	r7,sp
800097fa:	20 2d       	sub	sp,8
800097fc:	f0 1f 00 3e 	mcall	800098f4 <udd_enable+0x100>
80009800:	18 98       	mov	r8,r12
80009802:	ef 48 ff f8 	st.w	r7[-8],r8
80009806:	f0 1f 00 3d 	mcall	800098f8 <udd_enable+0x104>
8000980a:	30 0a       	mov	r10,0
8000980c:	e0 6b 02 20 	mov	r11,544
80009810:	4b bc       	lddpc	r12,800098fc <udd_enable+0x108>
80009812:	f0 1f 00 3c 	mcall	80009900 <udd_enable+0x10c>
80009816:	30 18       	mov	r8,1
80009818:	ef 48 ff fc 	st.w	r7[-4],r8
8000981c:	fe 78 0c 00 	mov	r8,-62464
80009820:	fe 79 0c 00 	mov	r9,-62464
80009824:	f2 fa 01 44 	ld.w	r10,r9[324]
80009828:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000982c:	f5 e9 10 09 	or	r9,r10,r9
80009830:	f1 49 01 44 	st.w	r8[324],r9
80009834:	fe 68 08 00 	mov	r8,-129024
80009838:	fe 69 08 00 	mov	r9,-129024
8000983c:	72 09       	ld.w	r9,r9[0x0]
8000983e:	b9 c9       	cbr	r9,0x18
80009840:	91 09       	st.w	r8[0x0],r9
80009842:	fe 68 08 00 	mov	r8,-129024
80009846:	fe 69 08 00 	mov	r9,-129024
8000984a:	72 09       	ld.w	r9,r9[0x0]
8000984c:	b9 b9       	sbr	r9,0x19
8000984e:	91 09       	st.w	r8[0x0],r9
80009850:	fe 68 08 00 	mov	r8,-129024
80009854:	fe 69 08 00 	mov	r9,-129024
80009858:	72 09       	ld.w	r9,r9[0x0]
8000985a:	ad a9       	sbr	r9,0xc
8000985c:	91 09       	st.w	r8[0x0],r9
8000985e:	fe 68 08 00 	mov	r8,-129024
80009862:	fe 69 08 00 	mov	r9,-129024
80009866:	72 09       	ld.w	r9,r9[0x0]
80009868:	af b9       	sbr	r9,0xf
8000986a:	91 09       	st.w	r8[0x0],r9
8000986c:	fe 68 08 00 	mov	r8,-129024
80009870:	fe 69 08 00 	mov	r9,-129024
80009874:	72 09       	ld.w	r9,r9[0x0]
80009876:	af c9       	cbr	r9,0xe
80009878:	91 09       	st.w	r8[0x0],r9
8000987a:	fe 68 08 00 	mov	r8,-129024
8000987e:	70 08       	ld.w	r8,r8[0x0]
80009880:	f0 1f 00 21 	mcall	80009904 <udd_enable+0x110>
80009884:	fe 68 00 00 	mov	r8,-131072
80009888:	fe 69 00 00 	mov	r9,-131072
8000988c:	72 09       	ld.w	r9,r9[0x0]
8000988e:	ad c9       	cbr	r9,0xc
80009890:	91 09       	st.w	r8[0x0],r9
80009892:	fe 68 00 00 	mov	r8,-131072
80009896:	fe 69 00 00 	mov	r9,-131072
8000989a:	72 09       	ld.w	r9,r9[0x0]
8000989c:	e0 19 f3 ff 	andl	r9,0xf3ff
800098a0:	91 09       	st.w	r8[0x0],r9
800098a2:	fe 68 08 08 	mov	r8,-129016
800098a6:	30 29       	mov	r9,2
800098a8:	91 09       	st.w	r8[0x0],r9
800098aa:	fe 68 08 04 	mov	r8,-129020
800098ae:	70 08       	ld.w	r8,r8[0x0]
800098b0:	e2 18 08 00 	andl	r8,0x800,COH
800098b4:	c0 50       	breq	800098be <udd_enable+0xca>
800098b6:	fe 68 08 0c 	mov	r8,-129012
800098ba:	30 29       	mov	r9,2
800098bc:	91 09       	st.w	r8[0x0],r9
800098be:	fe 68 08 00 	mov	r8,-129024
800098c2:	fe 69 08 00 	mov	r9,-129024
800098c6:	72 09       	ld.w	r9,r9[0x0]
800098c8:	a1 b9       	sbr	r9,0x1
800098ca:	91 09       	st.w	r8[0x0],r9
800098cc:	fe 68 08 00 	mov	r8,-129024
800098d0:	fe 69 08 00 	mov	r9,-129024
800098d4:	72 09       	ld.w	r9,r9[0x0]
800098d6:	af a9       	sbr	r9,0xe
800098d8:	91 09       	st.w	r8[0x0],r9
800098da:	48 c9       	lddpc	r9,80009908 <udd_enable+0x114>
800098dc:	30 08       	mov	r8,0
800098de:	b2 88       	st.b	r9[0x0],r8
800098e0:	30 3c       	mov	r12,3
800098e2:	f0 1f 00 0b 	mcall	8000990c <udd_enable+0x118>
800098e6:	ee fc ff f8 	ld.w	r12,r7[-8]
800098ea:	f0 1f 00 0a 	mcall	80009910 <udd_enable+0x11c>
800098ee:	2f ed       	sub	sp,-8
800098f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800098f4:	80 00       	ld.sh	r0,r0[0x0]
800098f6:	95 1c       	st.w	r10[0x4],r12
800098f8:	80 00       	ld.sh	r0,r0[0x0]
800098fa:	bb b4       	sbr	r4,0x1b
800098fc:	80 00       	ld.sh	r0,r0[0x0]
800098fe:	96 3c       	ld.sh	r12,r11[0x6]
80009900:	80 00       	ld.sh	r0,r0[0x0]
80009902:	8b b4       	st.w	r5[0x2c],r4
80009904:	80 00       	ld.sh	r0,r0[0x0]
80009906:	ad f8       	*unknown*
80009908:	00 00       	add	r0,r0
8000990a:	08 28       	rsub	r8,r4
8000990c:	80 00       	ld.sh	r0,r0[0x0]
8000990e:	95 54       	st.w	r10[0x14],r4
80009910:	80 00       	ld.sh	r0,r0[0x0]
80009912:	95 3a       	st.w	r10[0xc],r10

80009914 <udd_attach>:
80009914:	eb cd 40 80 	pushm	r7,lr
80009918:	1a 97       	mov	r7,sp
8000991a:	20 1d       	sub	sp,4
8000991c:	f0 1f 00 26 	mcall	800099b4 <udd_attach+0xa0>
80009920:	18 98       	mov	r8,r12
80009922:	ef 48 ff fc 	st.w	r7[-4],r8
80009926:	30 1c       	mov	r12,1
80009928:	f0 1f 00 24 	mcall	800099b8 <udd_attach+0xa4>
8000992c:	fe 68 08 00 	mov	r8,-129024
80009930:	fe 69 08 00 	mov	r9,-129024
80009934:	72 09       	ld.w	r9,r9[0x0]
80009936:	af c9       	cbr	r9,0xe
80009938:	91 09       	st.w	r8[0x0],r9
8000993a:	fe 68 00 00 	mov	r8,-131072
8000993e:	fe 69 00 00 	mov	r9,-131072
80009942:	72 09       	ld.w	r9,r9[0x0]
80009944:	a9 c9       	cbr	r9,0x8
80009946:	91 09       	st.w	r8[0x0],r9
80009948:	fe 68 00 18 	mov	r8,-131048
8000994c:	30 89       	mov	r9,8
8000994e:	91 09       	st.w	r8[0x0],r9
80009950:	fe 68 00 18 	mov	r8,-131048
80009954:	30 19       	mov	r9,1
80009956:	91 09       	st.w	r8[0x0],r9
80009958:	fe 68 00 18 	mov	r8,-131048
8000995c:	31 09       	mov	r9,16
8000995e:	91 09       	st.w	r8[0x0],r9
80009960:	fe 68 00 18 	mov	r8,-131048
80009964:	30 49       	mov	r9,4
80009966:	91 09       	st.w	r8[0x0],r9
80009968:	fe 68 00 18 	mov	r8,-131048
8000996c:	30 29       	mov	r9,2
8000996e:	91 09       	st.w	r8[0x0],r9
80009970:	fe 68 00 08 	mov	r8,-131064
80009974:	30 89       	mov	r9,8
80009976:	91 09       	st.w	r8[0x0],r9
80009978:	fe 68 00 08 	mov	r8,-131064
8000997c:	30 49       	mov	r9,4
8000997e:	91 09       	st.w	r8[0x0],r9
80009980:	fe 68 00 08 	mov	r8,-131064
80009984:	30 29       	mov	r9,2
80009986:	91 09       	st.w	r8[0x0],r9
80009988:	fe 68 00 08 	mov	r8,-131064
8000998c:	30 19       	mov	r9,1
8000998e:	91 09       	st.w	r8[0x0],r9
80009990:	fe 68 00 08 	mov	r8,-131064
80009994:	31 09       	mov	r9,16
80009996:	91 09       	st.w	r8[0x0],r9
80009998:	fe 68 08 00 	mov	r8,-129024
8000999c:	fe 69 08 00 	mov	r9,-129024
800099a0:	72 09       	ld.w	r9,r9[0x0]
800099a2:	af a9       	sbr	r9,0xe
800099a4:	91 09       	st.w	r8[0x0],r9
800099a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800099aa:	f0 1f 00 05 	mcall	800099bc <udd_attach+0xa8>
800099ae:	2f fd       	sub	sp,-4
800099b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800099b4:	80 00       	ld.sh	r0,r0[0x0]
800099b6:	95 1c       	st.w	r10[0x4],r12
800099b8:	80 00       	ld.sh	r0,r0[0x0]
800099ba:	95 dc       	st.w	r10[0x34],r12
800099bc:	80 00       	ld.sh	r0,r0[0x0]
800099be:	95 3a       	st.w	r10[0xc],r10

800099c0 <udd_detach>:
800099c0:	eb cd 40 80 	pushm	r7,lr
800099c4:	1a 97       	mov	r7,sp
800099c6:	fe 68 08 00 	mov	r8,-129024
800099ca:	fe 69 08 00 	mov	r9,-129024
800099ce:	72 09       	ld.w	r9,r9[0x0]
800099d0:	af c9       	cbr	r9,0xe
800099d2:	91 09       	st.w	r8[0x0],r9
800099d4:	fe 68 00 00 	mov	r8,-131072
800099d8:	fe 69 00 00 	mov	r9,-131072
800099dc:	72 09       	ld.w	r9,r9[0x0]
800099de:	a9 a9       	sbr	r9,0x8
800099e0:	91 09       	st.w	r8[0x0],r9
800099e2:	fe 68 08 00 	mov	r8,-129024
800099e6:	fe 69 08 00 	mov	r9,-129024
800099ea:	72 09       	ld.w	r9,r9[0x0]
800099ec:	af a9       	sbr	r9,0xe
800099ee:	91 09       	st.w	r8[0x0],r9
800099f0:	30 0c       	mov	r12,0
800099f2:	f0 1f 00 03 	mcall	800099fc <udd_detach+0x3c>
800099f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800099fa:	00 00       	add	r0,r0
800099fc:	80 00       	ld.sh	r0,r0[0x0]
800099fe:	95 dc       	st.w	r10[0x34],r12

80009a00 <udd_is_high_speed>:
80009a00:	eb cd 40 80 	pushm	r7,lr
80009a04:	1a 97       	mov	r7,sp
80009a06:	fe 68 08 04 	mov	r8,-129020
80009a0a:	70 08       	ld.w	r8,r8[0x0]
80009a0c:	e2 18 30 00 	andl	r8,0x3000,COH
80009a10:	ad 88       	lsr	r8,0xc
80009a12:	5f 18       	srne	r8
80009a14:	5c 58       	castu.b	r8
80009a16:	10 9c       	mov	r12,r8
80009a18:	e3 cd 80 80 	ldm	sp++,r7,pc

80009a1c <udd_set_address>:
80009a1c:	eb cd 40 80 	pushm	r7,lr
80009a20:	1a 97       	mov	r7,sp
80009a22:	20 1d       	sub	sp,4
80009a24:	18 98       	mov	r8,r12
80009a26:	ef 68 ff fc 	st.b	r7[-4],r8
80009a2a:	fe 68 00 00 	mov	r8,-131072
80009a2e:	fe 69 00 00 	mov	r9,-131072
80009a32:	72 09       	ld.w	r9,r9[0x0]
80009a34:	a7 d9       	cbr	r9,0x7
80009a36:	91 09       	st.w	r8[0x0],r9
80009a38:	fe 68 00 00 	mov	r8,-131072
80009a3c:	fe 69 00 00 	mov	r9,-131072
80009a40:	72 09       	ld.w	r9,r9[0x0]
80009a42:	12 9a       	mov	r10,r9
80009a44:	e0 1a ff 80 	andl	r10,0xff80
80009a48:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009a4c:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
80009a50:	f5 e9 10 09 	or	r9,r10,r9
80009a54:	91 09       	st.w	r8[0x0],r9
80009a56:	fe 68 00 00 	mov	r8,-131072
80009a5a:	fe 69 00 00 	mov	r9,-131072
80009a5e:	72 09       	ld.w	r9,r9[0x0]
80009a60:	a7 b9       	sbr	r9,0x7
80009a62:	91 09       	st.w	r8[0x0],r9
80009a64:	2f fd       	sub	sp,-4
80009a66:	e3 cd 80 80 	ldm	sp++,r7,pc

80009a6a <udd_getaddress>:
80009a6a:	eb cd 40 80 	pushm	r7,lr
80009a6e:	1a 97       	mov	r7,sp
80009a70:	fe 68 00 00 	mov	r8,-131072
80009a74:	70 08       	ld.w	r8,r8[0x0]
80009a76:	5c 58       	castu.b	r8
80009a78:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
80009a7c:	10 9c       	mov	r12,r8
80009a7e:	e3 cd 80 80 	ldm	sp++,r7,pc

80009a82 <udd_get_frame_number>:
80009a82:	eb cd 40 80 	pushm	r7,lr
80009a86:	1a 97       	mov	r7,sp
80009a88:	fe 68 00 20 	mov	r8,-131040
80009a8c:	70 08       	ld.w	r8,r8[0x0]
80009a8e:	e2 18 3f f8 	andl	r8,0x3ff8,COH
80009a92:	a3 98       	lsr	r8,0x3
80009a94:	5c 88       	casts.h	r8
80009a96:	10 9c       	mov	r12,r8
80009a98:	e3 cd 80 80 	ldm	sp++,r7,pc

80009a9c <udd_set_setup_payload>:
80009a9c:	eb cd 40 80 	pushm	r7,lr
80009aa0:	1a 97       	mov	r7,sp
80009aa2:	20 2d       	sub	sp,8
80009aa4:	ef 4c ff fc 	st.w	r7[-4],r12
80009aa8:	16 98       	mov	r8,r11
80009aaa:	ef 58 ff f8 	st.h	r7[-8],r8
80009aae:	48 68       	lddpc	r8,80009ac4 <udd_set_setup_payload+0x28>
80009ab0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009ab4:	91 29       	st.w	r8[0x8],r9
80009ab6:	48 49       	lddpc	r9,80009ac4 <udd_set_setup_payload+0x28>
80009ab8:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80009abc:	b2 68       	st.h	r9[0xc],r8
80009abe:	2f ed       	sub	sp,-8
80009ac0:	e3 cd 80 80 	ldm	sp++,r7,pc
80009ac4:	00 00       	add	r0,r0
80009ac6:	0d b8       	ld.ub	r8,r6[0x3]

80009ac8 <udd_ep_alloc>:
80009ac8:	eb cd 40 80 	pushm	r7,lr
80009acc:	1a 97       	mov	r7,sp
80009ace:	20 dd       	sub	sp,52
80009ad0:	16 99       	mov	r9,r11
80009ad2:	14 98       	mov	r8,r10
80009ad4:	18 9a       	mov	r10,r12
80009ad6:	ef 6a ff d4 	st.b	r7[-44],r10
80009ada:	ef 69 ff d0 	st.b	r7[-48],r9
80009ade:	ef 58 ff cc 	st.h	r7[-52],r8
80009ae2:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009ae6:	a7 98       	lsr	r8,0x7
80009ae8:	ef 68 ff db 	st.b	r7[-37],r8
80009aec:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009af0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009af4:	ef 68 ff d4 	st.b	r7[-44],r8
80009af8:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80009afc:	30 28       	mov	r8,2
80009afe:	f0 09 18 00 	cp.b	r9,r8
80009b02:	e0 88 00 04 	brls	80009b0a <udd_ep_alloc+0x42>
80009b06:	30 08       	mov	r8,0
80009b08:	c7 f9       	rjmp	80009e06 <udd_ep_alloc+0x33e>
80009b0a:	fe 68 00 00 	mov	r8,-131072
80009b0e:	70 79       	ld.w	r9,r8[0x1c]
80009b10:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009b14:	30 1a       	mov	r10,1
80009b16:	f4 08 09 48 	lsl	r8,r10,r8
80009b1a:	f3 e8 00 08 	and	r8,r9,r8
80009b1e:	c0 30       	breq	80009b24 <udd_ep_alloc+0x5c>
80009b20:	30 08       	mov	r8,0
80009b22:	c7 29       	rjmp	80009e06 <udd_ep_alloc+0x33e>
80009b24:	ef 38 ff d0 	ld.ub	r8,r7[-48]
80009b28:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80009b2c:	58 28       	cp.w	r8,2
80009b2e:	c0 d0       	breq	80009b48 <udd_ep_alloc+0x80>
80009b30:	58 38       	cp.w	r8,3
80009b32:	c0 70       	breq	80009b40 <udd_ep_alloc+0x78>
80009b34:	58 18       	cp.w	r8,1
80009b36:	c0 d1       	brne	80009b50 <udd_ep_alloc+0x88>
80009b38:	30 28       	mov	r8,2
80009b3a:	ef 68 ff de 	st.b	r7[-34],r8
80009b3e:	c0 b8       	rjmp	80009b54 <udd_ep_alloc+0x8c>
80009b40:	30 18       	mov	r8,1
80009b42:	ef 68 ff de 	st.b	r7[-34],r8
80009b46:	c0 78       	rjmp	80009b54 <udd_ep_alloc+0x8c>
80009b48:	30 28       	mov	r8,2
80009b4a:	ef 68 ff de 	st.b	r7[-34],r8
80009b4e:	c0 38       	rjmp	80009b54 <udd_ep_alloc+0x8c>
80009b50:	30 08       	mov	r8,0
80009b52:	c5 a9       	rjmp	80009e06 <udd_ep_alloc+0x33e>
80009b54:	ef 38 ff de 	ld.ub	r8,r7[-34]
80009b58:	58 28       	cp.w	r8,2
80009b5a:	c0 90       	breq	80009b6c <udd_ep_alloc+0xa4>
80009b5c:	58 38       	cp.w	r8,3
80009b5e:	c0 b0       	breq	80009b74 <udd_ep_alloc+0xac>
80009b60:	58 18       	cp.w	r8,1
80009b62:	c0 d1       	brne	80009b7c <udd_ep_alloc+0xb4>
80009b64:	30 08       	mov	r8,0
80009b66:	ef 68 ff de 	st.b	r7[-34],r8
80009b6a:	c0 b8       	rjmp	80009b80 <udd_ep_alloc+0xb8>
80009b6c:	30 18       	mov	r8,1
80009b6e:	ef 68 ff de 	st.b	r7[-34],r8
80009b72:	c0 78       	rjmp	80009b80 <udd_ep_alloc+0xb8>
80009b74:	30 28       	mov	r8,2
80009b76:	ef 68 ff de 	st.b	r7[-34],r8
80009b7a:	c0 38       	rjmp	80009b80 <udd_ep_alloc+0xb8>
80009b7c:	30 08       	mov	r8,0
80009b7e:	c4 49       	rjmp	80009e06 <udd_ep_alloc+0x33e>
80009b80:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009b84:	a3 68       	lsl	r8,0x2
80009b86:	e0 38 ff 00 	sub	r8,130816
80009b8a:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80009b8e:	a3 69       	lsl	r9,0x2
80009b90:	e0 39 ff 00 	sub	r9,130816
80009b94:	72 09       	ld.w	r9,r9[0x0]
80009b96:	12 9a       	mov	r10,r9
80009b98:	e0 1a e6 83 	andl	r10,0xe683
80009b9c:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80009ba0:	ab 79       	lsl	r9,0xb
80009ba2:	12 9b       	mov	r11,r9
80009ba4:	e2 1b 18 00 	andl	r11,0x1800,COH
80009ba8:	ef 39 ff db 	ld.ub	r9,r7[-37]
80009bac:	a9 69       	lsl	r9,0x8
80009bae:	e2 19 01 00 	andl	r9,0x100,COH
80009bb2:	12 4b       	or	r11,r9
80009bb4:	ef 19 ff cc 	ld.uh	r9,r7[-52]
80009bb8:	ef 49 ff f0 	st.w	r7[-16],r9
80009bbc:	30 89       	mov	r9,8
80009bbe:	ef 49 ff f4 	st.w	r7[-12],r9
80009bc2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009bc6:	ee fc ff f4 	ld.w	r12,r7[-12]
80009bca:	f2 0c 0c 49 	max	r9,r9,r12
80009bce:	ef 49 ff ec 	st.w	r7[-20],r9
80009bd2:	ee f9 ff ec 	ld.w	r9,r7[-20]
80009bd6:	ef 49 ff e4 	st.w	r7[-28],r9
80009bda:	e0 69 04 00 	mov	r9,1024
80009bde:	ef 49 ff e8 	st.w	r7[-24],r9
80009be2:	ee f9 ff e4 	ld.w	r9,r7[-28]
80009be6:	ee fc ff e8 	ld.w	r12,r7[-24]
80009bea:	f2 0c 0d 49 	min	r9,r9,r12
80009bee:	ef 49 ff e0 	st.w	r7[-32],r9
80009bf2:	ee f9 ff e0 	ld.w	r9,r7[-32]
80009bf6:	a1 79       	lsl	r9,0x1
80009bf8:	20 19       	sub	r9,1
80009bfa:	f2 09 12 00 	clz	r9,r9
80009bfe:	f2 09 11 1c 	rsub	r9,r9,28
80009c02:	a5 69       	lsl	r9,0x4
80009c04:	12 4b       	or	r11,r9
80009c06:	ef 39 ff de 	ld.ub	r9,r7[-34]
80009c0a:	a3 69       	lsl	r9,0x2
80009c0c:	e2 19 00 0c 	andl	r9,0xc,COH
80009c10:	f7 e9 10 09 	or	r9,r11,r9
80009c14:	e2 19 19 7c 	andl	r9,0x197c,COH
80009c18:	f5 e9 10 09 	or	r9,r10,r9
80009c1c:	91 09       	st.w	r8[0x0],r9
80009c1e:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009c22:	30 19       	mov	r9,1
80009c24:	f2 08 09 48 	lsl	r8,r9,r8
80009c28:	ef 58 ff dc 	st.h	r7[-36],r8
80009c2c:	30 28       	mov	r8,2
80009c2e:	ef 68 ff df 	st.b	r7[-33],r8
80009c32:	c3 a8       	rjmp	80009ca6 <udd_ep_alloc+0x1de>
80009c34:	fe 68 00 00 	mov	r8,-131072
80009c38:	70 79       	ld.w	r9,r8[0x1c]
80009c3a:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009c3e:	30 1a       	mov	r10,1
80009c40:	f4 08 09 48 	lsl	r8,r10,r8
80009c44:	f3 e8 00 08 	and	r8,r9,r8
80009c48:	c2 a0       	breq	80009c9c <udd_ep_alloc+0x1d4>
80009c4a:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009c4e:	30 19       	mov	r9,1
80009c50:	f2 08 09 48 	lsl	r8,r9,r8
80009c54:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80009c58:	ef 08 ff dc 	ld.sh	r8,r7[-36]
80009c5c:	f3 e8 10 08 	or	r8,r9,r8
80009c60:	5c 88       	casts.h	r8
80009c62:	ef 58 ff dc 	st.h	r7[-36],r8
80009c66:	fe 68 00 00 	mov	r8,-131072
80009c6a:	fe 69 00 00 	mov	r9,-131072
80009c6e:	72 7a       	ld.w	r10,r9[0x1c]
80009c70:	ef 39 ff df 	ld.ub	r9,r7[-33]
80009c74:	30 1b       	mov	r11,1
80009c76:	f6 09 09 49 	lsl	r9,r11,r9
80009c7a:	5c d9       	com	r9
80009c7c:	f5 e9 00 09 	and	r9,r10,r9
80009c80:	91 79       	st.w	r8[0x1c],r9
80009c82:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009c86:	a3 68       	lsl	r8,0x2
80009c88:	e0 38 ff 00 	sub	r8,130816
80009c8c:	ef 39 ff df 	ld.ub	r9,r7[-33]
80009c90:	a3 69       	lsl	r9,0x2
80009c92:	e0 39 ff 00 	sub	r9,130816
80009c96:	72 09       	ld.w	r9,r9[0x0]
80009c98:	a1 d9       	cbr	r9,0x1
80009c9a:	91 09       	st.w	r8[0x0],r9
80009c9c:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009ca0:	20 18       	sub	r8,1
80009ca2:	ef 68 ff df 	st.b	r7[-33],r8
80009ca6:	ef 39 ff df 	ld.ub	r9,r7[-33]
80009caa:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009cae:	f0 09 18 00 	cp.b	r9,r8
80009cb2:	fe 9b ff c1 	brhi	80009c34 <udd_ep_alloc+0x16c>
80009cb6:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009cba:	ef 68 ff df 	st.b	r7[-33],r8
80009cbe:	c9 c8       	rjmp	80009df6 <udd_ep_alloc+0x32e>
80009cc0:	ef 19 ff dc 	ld.uh	r9,r7[-36]
80009cc4:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009cc8:	f2 08 08 48 	asr	r8,r9,r8
80009ccc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009cd0:	5c 58       	castu.b	r8
80009cd2:	e0 80 00 8d 	breq	80009dec <udd_ep_alloc+0x324>
80009cd6:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009cda:	f0 c9 00 01 	sub	r9,r8,1
80009cde:	12 98       	mov	r8,r9
80009ce0:	a3 68       	lsl	r8,0x2
80009ce2:	12 08       	add	r8,r9
80009ce4:	a3 68       	lsl	r8,0x2
80009ce6:	10 99       	mov	r9,r8
80009ce8:	4c a8       	lddpc	r8,80009e10 <udd_ep_alloc+0x348>
80009cea:	f2 08 00 08 	add	r8,r9,r8
80009cee:	ef 48 ff f8 	st.w	r7[-8],r8
80009cf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009cf6:	70 08       	ld.w	r8,r8[0x0]
80009cf8:	e6 18 80 00 	andh	r8,0x8000,COH
80009cfc:	5f 18       	srne	r8
80009cfe:	ef 68 ff ff 	st.b	r7[-1],r8
80009d02:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009d06:	72 08       	ld.w	r8,r9[0x0]
80009d08:	30 0a       	mov	r10,0
80009d0a:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80009d0e:	93 08       	st.w	r9[0x0],r8
80009d10:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009d14:	a3 68       	lsl	r8,0x2
80009d16:	e0 38 ff 00 	sub	r8,130816
80009d1a:	ef 39 ff df 	ld.ub	r9,r7[-33]
80009d1e:	a3 69       	lsl	r9,0x2
80009d20:	e0 39 ff 00 	sub	r9,130816
80009d24:	72 09       	ld.w	r9,r9[0x0]
80009d26:	a1 b9       	sbr	r9,0x1
80009d28:	91 09       	st.w	r8[0x0],r9
80009d2a:	fe 68 00 00 	mov	r8,-131072
80009d2e:	fe 69 00 00 	mov	r9,-131072
80009d32:	72 7a       	ld.w	r10,r9[0x1c]
80009d34:	ef 39 ff df 	ld.ub	r9,r7[-33]
80009d38:	30 1b       	mov	r11,1
80009d3a:	f6 09 09 49 	lsl	r9,r11,r9
80009d3e:	f5 e9 10 09 	or	r9,r10,r9
80009d42:	91 79       	st.w	r8[0x1c],r9
80009d44:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009d48:	a3 68       	lsl	r8,0x2
80009d4a:	e0 38 fe d0 	sub	r8,130768
80009d4e:	70 08       	ld.w	r8,r8[0x0]
80009d50:	e6 18 00 04 	andh	r8,0x4,COH
80009d54:	c2 61       	brne	80009da0 <udd_ep_alloc+0x2d8>
80009d56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009d5a:	70 48       	ld.w	r8,r8[0x10]
80009d5c:	58 08       	cp.w	r8,0
80009d5e:	c0 31       	brne	80009d64 <udd_ep_alloc+0x29c>
80009d60:	30 08       	mov	r8,0
80009d62:	c5 28       	rjmp	80009e06 <udd_ep_alloc+0x33e>
80009d64:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009d68:	a3 68       	lsl	r8,0x2
80009d6a:	e0 38 ff 00 	sub	r8,130816
80009d6e:	70 08       	ld.w	r8,r8[0x0]
80009d70:	e2 18 01 00 	andl	r8,0x100,COH
80009d74:	c0 90       	breq	80009d86 <udd_ep_alloc+0x2be>
80009d76:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009d7a:	ea 18 ff ff 	orh	r8,0xffff
80009d7e:	e8 18 ff 80 	orl	r8,0xff80
80009d82:	ef 68 ff df 	st.b	r7[-33],r8
80009d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009d8a:	70 48       	ld.w	r8,r8[0x10]
80009d8c:	ef 3a ff df 	ld.ub	r10,r7[-33]
80009d90:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009d94:	72 29       	ld.w	r9,r9[0x8]
80009d96:	12 9b       	mov	r11,r9
80009d98:	30 1c       	mov	r12,1
80009d9a:	5d 18       	icall	r8
80009d9c:	30 08       	mov	r8,0
80009d9e:	c3 48       	rjmp	80009e06 <udd_ep_alloc+0x33e>
80009da0:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009da4:	a3 68       	lsl	r8,0x2
80009da6:	e0 38 ff 00 	sub	r8,130816
80009daa:	ef 39 ff df 	ld.ub	r9,r7[-33]
80009dae:	a3 69       	lsl	r9,0x2
80009db0:	e0 39 ff 00 	sub	r9,130816
80009db4:	72 09       	ld.w	r9,r9[0x0]
80009db6:	a9 b9       	sbr	r9,0x9
80009db8:	91 09       	st.w	r8[0x0],r9
80009dba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009dbe:	30 08       	mov	r8,0
80009dc0:	f0 09 18 00 	cp.b	r9,r8
80009dc4:	c1 40       	breq	80009dec <udd_ep_alloc+0x324>
80009dc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009dca:	70 48       	ld.w	r8,r8[0x10]
80009dcc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009dd0:	72 29       	ld.w	r9,r9[0x8]
80009dd2:	ee fa ff f8 	ld.w	r10,r7[-8]
80009dd6:	74 1a       	ld.w	r10,r10[0x4]
80009dd8:	ee fb ff f8 	ld.w	r11,r7[-8]
80009ddc:	76 0b       	ld.w	r11,r11[0x0]
80009dde:	e6 1b 40 00 	andh	r11,0x4000,COH
80009de2:	5f 1b       	srne	r11
80009de4:	ef 3c ff df 	ld.ub	r12,r7[-33]
80009de8:	f0 1f 00 0b 	mcall	80009e14 <udd_ep_alloc+0x34c>
80009dec:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009df0:	2f f8       	sub	r8,-1
80009df2:	ef 68 ff df 	st.b	r7[-33],r8
80009df6:	ef 39 ff df 	ld.ub	r9,r7[-33]
80009dfa:	30 28       	mov	r8,2
80009dfc:	f0 09 18 00 	cp.b	r9,r8
80009e00:	fe 98 ff 60 	brls	80009cc0 <udd_ep_alloc+0x1f8>
80009e04:	30 18       	mov	r8,1
80009e06:	10 9c       	mov	r12,r8
80009e08:	2f 3d       	sub	sp,-52
80009e0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80009e0e:	00 00       	add	r0,r0
80009e10:	00 00       	add	r0,r0
80009e12:	08 34       	cp.w	r4,r4
80009e14:	80 00       	ld.sh	r0,r0[0x0]
80009e16:	a1 38       	mul	r8,r0

80009e18 <udd_ep_free>:
80009e18:	eb cd 40 80 	pushm	r7,lr
80009e1c:	1a 97       	mov	r7,sp
80009e1e:	20 2d       	sub	sp,8
80009e20:	18 98       	mov	r8,r12
80009e22:	ef 68 ff f8 	st.b	r7[-8],r8
80009e26:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009e2a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009e2e:	ef 68 ff ff 	st.b	r7[-1],r8
80009e32:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009e36:	30 28       	mov	r8,2
80009e38:	f0 09 18 00 	cp.b	r9,r8
80009e3c:	e0 8b 00 33 	brhi	80009ea2 <udd_ep_free+0x8a>
80009e40:	fe 68 00 00 	mov	r8,-131072
80009e44:	fe 69 00 00 	mov	r9,-131072
80009e48:	72 7a       	ld.w	r10,r9[0x1c]
80009e4a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009e4e:	30 1b       	mov	r11,1
80009e50:	f6 09 09 49 	lsl	r9,r11,r9
80009e54:	5c d9       	com	r9
80009e56:	f5 e9 00 09 	and	r9,r10,r9
80009e5a:	91 79       	st.w	r8[0x1c],r9
80009e5c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009e60:	a3 68       	lsl	r8,0x2
80009e62:	e0 38 ff 00 	sub	r8,130816
80009e66:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009e6a:	a3 69       	lsl	r9,0x2
80009e6c:	e0 39 ff 00 	sub	r9,130816
80009e70:	72 09       	ld.w	r9,r9[0x0]
80009e72:	a1 d9       	cbr	r9,0x1
80009e74:	91 09       	st.w	r8[0x0],r9
80009e76:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009e7a:	10 9c       	mov	r12,r8
80009e7c:	f0 1f 00 0c 	mcall	80009eac <udd_ep_free+0x94>
80009e80:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009e84:	f0 c9 00 01 	sub	r9,r8,1
80009e88:	48 aa       	lddpc	r10,80009eb0 <udd_ep_free+0x98>
80009e8a:	12 98       	mov	r8,r9
80009e8c:	a3 68       	lsl	r8,0x2
80009e8e:	12 08       	add	r8,r9
80009e90:	a3 68       	lsl	r8,0x2
80009e92:	f4 08 00 09 	add	r9,r10,r8
80009e96:	72 08       	ld.w	r8,r9[0x0]
80009e98:	30 0a       	mov	r10,0
80009e9a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80009e9e:	93 08       	st.w	r9[0x0],r8
80009ea0:	c0 28       	rjmp	80009ea4 <udd_ep_free+0x8c>
80009ea2:	d7 03       	nop
80009ea4:	2f ed       	sub	sp,-8
80009ea6:	e3 cd 80 80 	ldm	sp++,r7,pc
80009eaa:	00 00       	add	r0,r0
80009eac:	80 00       	ld.sh	r0,r0[0x0]
80009eae:	ae c0       	st.b	r7[0x4],r0
80009eb0:	00 00       	add	r0,r0
80009eb2:	08 34       	cp.w	r4,r4

80009eb4 <udd_ep_is_halted>:
80009eb4:	eb cd 40 80 	pushm	r7,lr
80009eb8:	1a 97       	mov	r7,sp
80009eba:	20 1d       	sub	sp,4
80009ebc:	18 98       	mov	r8,r12
80009ebe:	ef 68 ff fc 	st.b	r7[-4],r8
80009ec2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009ec6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009eca:	a3 68       	lsl	r8,0x2
80009ecc:	e0 38 fe 40 	sub	r8,130624
80009ed0:	70 08       	ld.w	r8,r8[0x0]
80009ed2:	e6 18 00 08 	andh	r8,0x8,COH
80009ed6:	5f 18       	srne	r8
80009ed8:	5c 58       	castu.b	r8
80009eda:	10 9c       	mov	r12,r8
80009edc:	2f fd       	sub	sp,-4
80009ede:	e3 cd 80 80 	ldm	sp++,r7,pc
80009ee2:	d7 03       	nop

80009ee4 <udd_ep_set_halt>:
80009ee4:	eb cd 40 80 	pushm	r7,lr
80009ee8:	1a 97       	mov	r7,sp
80009eea:	20 3d       	sub	sp,12
80009eec:	18 98       	mov	r8,r12
80009eee:	ef 68 ff f4 	st.b	r7[-12],r8
80009ef2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009ef6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009efa:	ef 68 ff ff 	st.b	r7[-1],r8
80009efe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009f02:	30 28       	mov	r8,2
80009f04:	f0 09 18 00 	cp.b	r9,r8
80009f08:	e0 88 00 04 	brls	80009f10 <udd_ep_set_halt+0x2c>
80009f0c:	30 08       	mov	r8,0
80009f0e:	c6 f8       	rjmp	80009fec <udd_ep_set_halt+0x108>
80009f10:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009f14:	f0 c9 00 01 	sub	r9,r8,1
80009f18:	12 98       	mov	r8,r9
80009f1a:	a3 68       	lsl	r8,0x2
80009f1c:	12 08       	add	r8,r9
80009f1e:	a3 68       	lsl	r8,0x2
80009f20:	10 99       	mov	r9,r8
80009f22:	4b 58       	lddpc	r8,80009ff4 <udd_ep_set_halt+0x110>
80009f24:	f2 08 00 08 	add	r8,r9,r8
80009f28:	ef 48 ff f8 	st.w	r7[-8],r8
80009f2c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009f30:	a3 68       	lsl	r8,0x2
80009f32:	e0 38 fe 40 	sub	r8,130624
80009f36:	70 08       	ld.w	r8,r8[0x0]
80009f38:	e6 18 00 08 	andh	r8,0x8,COH
80009f3c:	c0 71       	brne	80009f4a <udd_ep_set_halt+0x66>
80009f3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009f42:	70 08       	ld.w	r8,r8[0x0]
80009f44:	e6 18 20 00 	andh	r8,0x2000,COH
80009f48:	c0 30       	breq	80009f4e <udd_ep_set_halt+0x6a>
80009f4a:	30 18       	mov	r8,1
80009f4c:	c5 08       	rjmp	80009fec <udd_ep_set_halt+0x108>
80009f4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009f52:	70 08       	ld.w	r8,r8[0x0]
80009f54:	e6 18 80 00 	andh	r8,0x8000,COH
80009f58:	c0 30       	breq	80009f5e <udd_ep_set_halt+0x7a>
80009f5a:	30 08       	mov	r8,0
80009f5c:	c4 88       	rjmp	80009fec <udd_ep_set_halt+0x108>
80009f5e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009f62:	30 08       	mov	r8,0
80009f64:	f0 09 18 00 	cp.b	r9,r8
80009f68:	c2 54       	brge	80009fb2 <udd_ep_set_halt+0xce>
80009f6a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009f6e:	a3 68       	lsl	r8,0x2
80009f70:	e0 38 fe d0 	sub	r8,130768
80009f74:	70 08       	ld.w	r8,r8[0x0]
80009f76:	e2 18 30 00 	andl	r8,0x3000,COH
80009f7a:	ad 88       	lsr	r8,0xc
80009f7c:	c1 b0       	breq	80009fb2 <udd_ep_set_halt+0xce>
80009f7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009f82:	72 08       	ld.w	r8,r9[0x0]
80009f84:	30 1a       	mov	r10,1
80009f86:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80009f8a:	93 08       	st.w	r9[0x0],r8
80009f8c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009f90:	a3 68       	lsl	r8,0x2
80009f92:	e0 38 fe 10 	sub	r8,130576
80009f96:	e0 69 10 00 	mov	r9,4096
80009f9a:	91 09       	st.w	r8[0x0],r9
80009f9c:	fe 68 00 00 	mov	r8,-131072
80009fa0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009fa4:	e0 6a 10 00 	mov	r10,4096
80009fa8:	f4 09 09 49 	lsl	r9,r10,r9
80009fac:	91 69       	st.w	r8[0x18],r9
80009fae:	30 18       	mov	r8,1
80009fb0:	c1 e8       	rjmp	80009fec <udd_ep_set_halt+0x108>
80009fb2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009fb6:	a3 68       	lsl	r8,0x2
80009fb8:	e0 38 ff 00 	sub	r8,130816
80009fbc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009fc0:	a3 69       	lsl	r9,0x2
80009fc2:	e0 39 ff 00 	sub	r9,130816
80009fc6:	72 09       	ld.w	r9,r9[0x0]
80009fc8:	a9 d9       	cbr	r9,0x9
80009fca:	91 09       	st.w	r8[0x0],r9
80009fcc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009fd0:	a3 68       	lsl	r8,0x2
80009fd2:	e0 38 fe a0 	sub	r8,130720
80009fd6:	34 09       	mov	r9,64
80009fd8:	91 09       	st.w	r8[0x0],r9
80009fda:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009fde:	a3 68       	lsl	r8,0x2
80009fe0:	e0 38 fe 10 	sub	r8,130576
80009fe4:	e8 69 00 00 	mov	r9,524288
80009fe8:	91 09       	st.w	r8[0x0],r9
80009fea:	30 18       	mov	r8,1
80009fec:	10 9c       	mov	r12,r8
80009fee:	2f dd       	sub	sp,-12
80009ff0:	e3 cd 80 80 	ldm	sp++,r7,pc
80009ff4:	00 00       	add	r0,r0
80009ff6:	08 34       	cp.w	r4,r4

80009ff8 <udd_ep_clear_halt>:
80009ff8:	eb cd 40 80 	pushm	r7,lr
80009ffc:	1a 97       	mov	r7,sp
80009ffe:	20 3d       	sub	sp,12
8000a000:	18 98       	mov	r8,r12
8000a002:	ef 68 ff f4 	st.b	r7[-12],r8
8000a006:	30 08       	mov	r8,0
8000a008:	ef 68 ff fb 	st.b	r7[-5],r8
8000a00c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a010:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a014:	ef 68 ff f4 	st.b	r7[-12],r8
8000a018:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a01c:	30 28       	mov	r8,2
8000a01e:	f0 09 18 00 	cp.b	r9,r8
8000a022:	e0 88 00 04 	brls	8000a02a <udd_ep_clear_halt+0x32>
8000a026:	30 08       	mov	r8,0
8000a028:	c8 18       	rjmp	8000a12a <udd_ep_clear_halt+0x132>
8000a02a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a02e:	f0 c9 00 01 	sub	r9,r8,1
8000a032:	12 98       	mov	r8,r9
8000a034:	a3 68       	lsl	r8,0x2
8000a036:	12 08       	add	r8,r9
8000a038:	a3 68       	lsl	r8,0x2
8000a03a:	10 99       	mov	r9,r8
8000a03c:	4b e8       	lddpc	r8,8000a134 <udd_ep_clear_halt+0x13c>
8000a03e:	f2 08 00 08 	add	r8,r9,r8
8000a042:	ef 48 ff fc 	st.w	r7[-4],r8
8000a046:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a04a:	70 08       	ld.w	r8,r8[0x0]
8000a04c:	e6 18 20 00 	andh	r8,0x2000,COH
8000a050:	c1 c0       	breq	8000a088 <udd_ep_clear_halt+0x90>
8000a052:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a056:	72 08       	ld.w	r8,r9[0x0]
8000a058:	30 0a       	mov	r10,0
8000a05a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a05e:	93 08       	st.w	r9[0x0],r8
8000a060:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a064:	a3 68       	lsl	r8,0x2
8000a066:	e0 38 fd e0 	sub	r8,130528
8000a06a:	e0 69 10 00 	mov	r9,4096
8000a06e:	91 09       	st.w	r8[0x0],r9
8000a070:	fe 68 00 00 	mov	r8,-131072
8000a074:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a078:	e0 6a 10 00 	mov	r10,4096
8000a07c:	f4 09 09 49 	lsl	r9,r10,r9
8000a080:	91 59       	st.w	r8[0x14],r9
8000a082:	30 18       	mov	r8,1
8000a084:	ef 68 ff fb 	st.b	r7[-5],r8
8000a088:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a08c:	a3 68       	lsl	r8,0x2
8000a08e:	e0 38 fe 40 	sub	r8,130624
8000a092:	70 08       	ld.w	r8,r8[0x0]
8000a094:	e6 18 00 08 	andh	r8,0x8,COH
8000a098:	c3 10       	breq	8000a0fa <udd_ep_clear_halt+0x102>
8000a09a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a09e:	a3 68       	lsl	r8,0x2
8000a0a0:	e0 38 fe d0 	sub	r8,130768
8000a0a4:	70 08       	ld.w	r8,r8[0x0]
8000a0a6:	e2 18 00 40 	andl	r8,0x40,COH
8000a0aa:	c1 00       	breq	8000a0ca <udd_ep_clear_halt+0xd2>
8000a0ac:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a0b0:	a3 68       	lsl	r8,0x2
8000a0b2:	e0 38 fe a0 	sub	r8,130720
8000a0b6:	34 09       	mov	r9,64
8000a0b8:	91 09       	st.w	r8[0x0],r9
8000a0ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a0be:	a3 68       	lsl	r8,0x2
8000a0c0:	e0 38 fe 10 	sub	r8,130576
8000a0c4:	e4 69 00 00 	mov	r9,262144
8000a0c8:	91 09       	st.w	r8[0x0],r9
8000a0ca:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a0ce:	a3 68       	lsl	r8,0x2
8000a0d0:	e0 38 fd e0 	sub	r8,130528
8000a0d4:	e8 69 00 00 	mov	r9,524288
8000a0d8:	91 09       	st.w	r8[0x0],r9
8000a0da:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a0de:	a3 68       	lsl	r8,0x2
8000a0e0:	e0 38 ff 00 	sub	r8,130816
8000a0e4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a0e8:	a3 69       	lsl	r9,0x2
8000a0ea:	e0 39 ff 00 	sub	r9,130816
8000a0ee:	72 09       	ld.w	r9,r9[0x0]
8000a0f0:	a9 b9       	sbr	r9,0x9
8000a0f2:	91 09       	st.w	r8[0x0],r9
8000a0f4:	30 18       	mov	r8,1
8000a0f6:	ef 68 ff fb 	st.b	r7[-5],r8
8000a0fa:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000a0fe:	30 08       	mov	r8,0
8000a100:	f0 09 18 00 	cp.b	r9,r8
8000a104:	c1 20       	breq	8000a128 <udd_ep_clear_halt+0x130>
8000a106:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a10a:	70 08       	ld.w	r8,r8[0x0]
8000a10c:	e6 18 80 00 	andh	r8,0x8000,COH
8000a110:	c0 c0       	breq	8000a128 <udd_ep_clear_halt+0x130>
8000a112:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a116:	72 08       	ld.w	r8,r9[0x0]
8000a118:	30 0a       	mov	r10,0
8000a11a:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a11e:	93 08       	st.w	r9[0x0],r8
8000a120:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a124:	70 48       	ld.w	r8,r8[0x10]
8000a126:	5d 18       	icall	r8
8000a128:	30 18       	mov	r8,1
8000a12a:	10 9c       	mov	r12,r8
8000a12c:	2f dd       	sub	sp,-12
8000a12e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a132:	00 00       	add	r0,r0
8000a134:	00 00       	add	r0,r0
8000a136:	08 34       	cp.w	r4,r4

8000a138 <udd_ep_run>:
8000a138:	eb cd 40 80 	pushm	r7,lr
8000a13c:	1a 97       	mov	r7,sp
8000a13e:	20 7d       	sub	sp,28
8000a140:	ef 4a ff ec 	st.w	r7[-20],r10
8000a144:	ef 49 ff e8 	st.w	r7[-24],r9
8000a148:	ef 48 ff e4 	st.w	r7[-28],r8
8000a14c:	18 98       	mov	r8,r12
8000a14e:	ef 68 ff f4 	st.b	r7[-12],r8
8000a152:	16 98       	mov	r8,r11
8000a154:	ef 68 ff f0 	st.b	r7[-16],r8
8000a158:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a15c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a160:	ef 68 ff f4 	st.b	r7[-12],r8
8000a164:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a168:	30 28       	mov	r8,2
8000a16a:	f0 09 18 00 	cp.b	r9,r8
8000a16e:	e0 88 00 04 	brls	8000a176 <udd_ep_run+0x3e>
8000a172:	30 08       	mov	r8,0
8000a174:	c6 88       	rjmp	8000a244 <udd_ep_run+0x10c>
8000a176:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a17a:	f0 c9 00 01 	sub	r9,r8,1
8000a17e:	12 98       	mov	r8,r9
8000a180:	a3 68       	lsl	r8,0x2
8000a182:	12 08       	add	r8,r9
8000a184:	a3 68       	lsl	r8,0x2
8000a186:	10 99       	mov	r9,r8
8000a188:	4b 18       	lddpc	r8,8000a24c <udd_ep_run+0x114>
8000a18a:	f2 08 00 08 	add	r8,r9,r8
8000a18e:	ef 48 ff f8 	st.w	r7[-8],r8
8000a192:	fe 68 00 00 	mov	r8,-131072
8000a196:	70 79       	ld.w	r9,r8[0x1c]
8000a198:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a19c:	30 1a       	mov	r10,1
8000a19e:	f4 08 09 48 	lsl	r8,r10,r8
8000a1a2:	f3 e8 00 08 	and	r8,r9,r8
8000a1a6:	c1 00       	breq	8000a1c6 <udd_ep_run+0x8e>
8000a1a8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a1ac:	a3 68       	lsl	r8,0x2
8000a1ae:	e0 38 fe 40 	sub	r8,130624
8000a1b2:	70 08       	ld.w	r8,r8[0x0]
8000a1b4:	e6 18 00 08 	andh	r8,0x8,COH
8000a1b8:	c0 71       	brne	8000a1c6 <udd_ep_run+0x8e>
8000a1ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a1be:	70 08       	ld.w	r8,r8[0x0]
8000a1c0:	e6 18 20 00 	andh	r8,0x2000,COH
8000a1c4:	c0 30       	breq	8000a1ca <udd_ep_run+0x92>
8000a1c6:	30 08       	mov	r8,0
8000a1c8:	c3 e8       	rjmp	8000a244 <udd_ep_run+0x10c>
8000a1ca:	f0 1f 00 22 	mcall	8000a250 <udd_ep_run+0x118>
8000a1ce:	18 98       	mov	r8,r12
8000a1d0:	ef 48 ff fc 	st.w	r7[-4],r8
8000a1d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a1d8:	70 08       	ld.w	r8,r8[0x0]
8000a1da:	e6 18 80 00 	andh	r8,0x8000,COH
8000a1de:	c0 70       	breq	8000a1ec <udd_ep_run+0xb4>
8000a1e0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a1e4:	f0 1f 00 1c 	mcall	8000a254 <udd_ep_run+0x11c>
8000a1e8:	30 08       	mov	r8,0
8000a1ea:	c2 d8       	rjmp	8000a244 <udd_ep_run+0x10c>
8000a1ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a1f0:	72 08       	ld.w	r8,r9[0x0]
8000a1f2:	30 1a       	mov	r10,1
8000a1f4:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a1f8:	93 08       	st.w	r9[0x0],r8
8000a1fa:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a1fe:	f0 1f 00 16 	mcall	8000a254 <udd_ep_run+0x11c>
8000a202:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a206:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a20a:	91 19       	st.w	r8[0x4],r9
8000a20c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a210:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a214:	91 29       	st.w	r8[0x8],r9
8000a216:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a21a:	30 09       	mov	r9,0
8000a21c:	91 39       	st.w	r8[0xc],r9
8000a21e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a222:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a226:	91 49       	st.w	r8[0x10],r9
8000a228:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a22c:	72 08       	ld.w	r8,r9[0x0]
8000a22e:	ef 3a ff f0 	ld.ub	r10,r7[-16]
8000a232:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000a236:	93 08       	st.w	r9[0x0],r8
8000a238:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a23c:	10 9c       	mov	r12,r8
8000a23e:	f0 1f 00 07 	mcall	8000a258 <udd_ep_run+0x120>
8000a242:	30 18       	mov	r8,1
8000a244:	10 9c       	mov	r12,r8
8000a246:	2f 9d       	sub	sp,-28
8000a248:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a24c:	00 00       	add	r0,r0
8000a24e:	08 34       	cp.w	r4,r4
8000a250:	80 00       	ld.sh	r0,r0[0x0]
8000a252:	95 1c       	st.w	r10[0x4],r12
8000a254:	80 00       	ld.sh	r0,r0[0x0]
8000a256:	95 3a       	st.w	r10[0xc],r10
8000a258:	80 00       	ld.sh	r0,r0[0x0]
8000a25a:	af 90       	lsr	r0,0xf

8000a25c <udd_ep_abort>:
8000a25c:	eb cd 40 80 	pushm	r7,lr
8000a260:	1a 97       	mov	r7,sp
8000a262:	20 2d       	sub	sp,8
8000a264:	18 98       	mov	r8,r12
8000a266:	ef 68 ff f8 	st.b	r7[-8],r8
8000a26a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a26e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a272:	ef 68 ff ff 	st.b	r7[-1],r8
8000a276:	fe 68 00 00 	mov	r8,-131072
8000a27a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a27e:	20 19       	sub	r9,1
8000a280:	fc 1a 02 00 	movh	r10,0x200
8000a284:	f4 09 09 49 	lsl	r9,r10,r9
8000a288:	91 59       	st.w	r8[0x14],r9
8000a28a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a28e:	a5 68       	lsl	r8,0x4
8000a290:	e0 38 fd 00 	sub	r8,130304
8000a294:	30 09       	mov	r9,0
8000a296:	91 29       	st.w	r8[0x8],r9
8000a298:	fe 68 00 00 	mov	r8,-131072
8000a29c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a2a0:	e0 6a 10 00 	mov	r10,4096
8000a2a4:	f4 09 09 49 	lsl	r9,r10,r9
8000a2a8:	91 59       	st.w	r8[0x14],r9
8000a2aa:	c1 28       	rjmp	8000a2ce <udd_ep_abort+0x72>
8000a2ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2b0:	a3 68       	lsl	r8,0x2
8000a2b2:	e0 38 fe 10 	sub	r8,130576
8000a2b6:	e0 69 20 00 	mov	r9,8192
8000a2ba:	91 09       	st.w	r8[0x0],r9
8000a2bc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2c0:	a3 68       	lsl	r8,0x2
8000a2c2:	e0 38 fe 40 	sub	r8,130624
8000a2c6:	70 08       	ld.w	r8,r8[0x0]
8000a2c8:	e2 18 20 00 	andl	r8,0x2000,COH
8000a2cc:	cf 81       	brne	8000a2bc <udd_ep_abort+0x60>
8000a2ce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2d2:	a3 68       	lsl	r8,0x2
8000a2d4:	e0 38 fe d0 	sub	r8,130768
8000a2d8:	70 08       	ld.w	r8,r8[0x0]
8000a2da:	e2 18 30 00 	andl	r8,0x3000,COH
8000a2de:	ad 88       	lsr	r8,0xc
8000a2e0:	ce 61       	brne	8000a2ac <udd_ep_abort+0x50>
8000a2e2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a2e6:	10 9c       	mov	r12,r8
8000a2e8:	f0 1f 00 03 	mcall	8000a2f4 <udd_ep_abort+0x98>
8000a2ec:	2f ed       	sub	sp,-8
8000a2ee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a2f2:	00 00       	add	r0,r0
8000a2f4:	80 00       	ld.sh	r0,r0[0x0]
8000a2f6:	ae c0       	st.b	r7[0x4],r0

8000a2f8 <udd_ep_wait_stall_clear>:
8000a2f8:	eb cd 40 80 	pushm	r7,lr
8000a2fc:	1a 97       	mov	r7,sp
8000a2fe:	20 3d       	sub	sp,12
8000a300:	18 98       	mov	r8,r12
8000a302:	ef 4b ff f4 	st.w	r7[-12],r11
8000a306:	ef 68 ff f8 	st.b	r7[-8],r8
8000a30a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a30e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a312:	ef 68 ff f8 	st.b	r7[-8],r8
8000a316:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000a31a:	30 28       	mov	r8,2
8000a31c:	f0 09 18 00 	cp.b	r9,r8
8000a320:	e0 88 00 04 	brls	8000a328 <udd_ep_wait_stall_clear+0x30>
8000a324:	30 08       	mov	r8,0
8000a326:	c4 48       	rjmp	8000a3ae <udd_ep_wait_stall_clear+0xb6>
8000a328:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a32c:	f0 c9 00 01 	sub	r9,r8,1
8000a330:	12 98       	mov	r8,r9
8000a332:	a3 68       	lsl	r8,0x2
8000a334:	12 08       	add	r8,r9
8000a336:	a3 68       	lsl	r8,0x2
8000a338:	10 99       	mov	r9,r8
8000a33a:	4a 08       	lddpc	r8,8000a3b8 <udd_ep_wait_stall_clear+0xc0>
8000a33c:	f2 08 00 08 	add	r8,r9,r8
8000a340:	ef 48 ff fc 	st.w	r7[-4],r8
8000a344:	fe 68 00 00 	mov	r8,-131072
8000a348:	70 79       	ld.w	r9,r8[0x1c]
8000a34a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a34e:	30 1a       	mov	r10,1
8000a350:	f4 08 09 48 	lsl	r8,r10,r8
8000a354:	f3 e8 00 08 	and	r8,r9,r8
8000a358:	c0 31       	brne	8000a35e <udd_ep_wait_stall_clear+0x66>
8000a35a:	30 08       	mov	r8,0
8000a35c:	c2 98       	rjmp	8000a3ae <udd_ep_wait_stall_clear+0xb6>
8000a35e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a362:	70 08       	ld.w	r8,r8[0x0]
8000a364:	e6 18 80 00 	andh	r8,0x8000,COH
8000a368:	c0 30       	breq	8000a36e <udd_ep_wait_stall_clear+0x76>
8000a36a:	30 08       	mov	r8,0
8000a36c:	c2 18       	rjmp	8000a3ae <udd_ep_wait_stall_clear+0xb6>
8000a36e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a372:	a3 68       	lsl	r8,0x2
8000a374:	e0 38 fe 40 	sub	r8,130624
8000a378:	70 08       	ld.w	r8,r8[0x0]
8000a37a:	e6 18 00 08 	andh	r8,0x8,COH
8000a37e:	c0 71       	brne	8000a38c <udd_ep_wait_stall_clear+0x94>
8000a380:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a384:	70 08       	ld.w	r8,r8[0x0]
8000a386:	e6 18 20 00 	andh	r8,0x2000,COH
8000a38a:	c0 e0       	breq	8000a3a6 <udd_ep_wait_stall_clear+0xae>
8000a38c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a390:	72 08       	ld.w	r8,r9[0x0]
8000a392:	30 1a       	mov	r10,1
8000a394:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a398:	93 08       	st.w	r9[0x0],r8
8000a39a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a39e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a3a2:	91 49       	st.w	r8[0x10],r9
8000a3a4:	c0 48       	rjmp	8000a3ac <udd_ep_wait_stall_clear+0xb4>
8000a3a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a3aa:	5d 18       	icall	r8
8000a3ac:	30 18       	mov	r8,1
8000a3ae:	10 9c       	mov	r12,r8
8000a3b0:	2f dd       	sub	sp,-12
8000a3b2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a3b6:	00 00       	add	r0,r0
8000a3b8:	00 00       	add	r0,r0
8000a3ba:	08 34       	cp.w	r4,r4

8000a3bc <udd_test_mode_j>:
8000a3bc:	eb cd 40 80 	pushm	r7,lr
8000a3c0:	1a 97       	mov	r7,sp
8000a3c2:	fe 68 00 00 	mov	r8,-131072
8000a3c6:	fe 69 00 00 	mov	r9,-131072
8000a3ca:	72 09       	ld.w	r9,r9[0x0]
8000a3cc:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a3d0:	ab b9       	sbr	r9,0xb
8000a3d2:	91 09       	st.w	r8[0x0],r9
8000a3d4:	fe 68 00 00 	mov	r8,-131072
8000a3d8:	fe 69 00 00 	mov	r9,-131072
8000a3dc:	72 09       	ld.w	r9,r9[0x0]
8000a3de:	ad b9       	sbr	r9,0xd
8000a3e0:	91 09       	st.w	r8[0x0],r9
8000a3e2:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a3e6 <udd_test_mode_k>:
8000a3e6:	eb cd 40 80 	pushm	r7,lr
8000a3ea:	1a 97       	mov	r7,sp
8000a3ec:	fe 68 00 00 	mov	r8,-131072
8000a3f0:	fe 69 00 00 	mov	r9,-131072
8000a3f4:	72 09       	ld.w	r9,r9[0x0]
8000a3f6:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a3fa:	ab b9       	sbr	r9,0xb
8000a3fc:	91 09       	st.w	r8[0x0],r9
8000a3fe:	fe 68 00 00 	mov	r8,-131072
8000a402:	fe 69 00 00 	mov	r9,-131072
8000a406:	72 09       	ld.w	r9,r9[0x0]
8000a408:	af a9       	sbr	r9,0xe
8000a40a:	91 09       	st.w	r8[0x0],r9
8000a40c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a410 <udd_test_mode_se0_nak>:
8000a410:	eb cd 40 80 	pushm	r7,lr
8000a414:	1a 97       	mov	r7,sp
8000a416:	fe 68 00 00 	mov	r8,-131072
8000a41a:	fe 69 00 00 	mov	r9,-131072
8000a41e:	72 09       	ld.w	r9,r9[0x0]
8000a420:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a424:	ab b9       	sbr	r9,0xb
8000a426:	91 09       	st.w	r8[0x0],r9
8000a428:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a42c <udd_test_mode_packet>:
8000a42c:	eb cd 40 80 	pushm	r7,lr
8000a430:	1a 97       	mov	r7,sp
8000a432:	21 7d       	sub	sp,92
8000a434:	4d c9       	lddpc	r9,8000a5a4 <udd_test_mode_packet+0x178>
8000a436:	ee c8 00 5c 	sub	r8,r7,92
8000a43a:	f2 ea 00 00 	ld.d	r10,r9[0]
8000a43e:	f0 eb 00 00 	st.d	r8[0],r10
8000a442:	f2 ea 00 08 	ld.d	r10,r9[8]
8000a446:	f0 eb 00 08 	st.d	r8[8],r10
8000a44a:	f2 ea 00 10 	ld.d	r10,r9[16]
8000a44e:	f0 eb 00 10 	st.d	r8[16],r10
8000a452:	f2 ea 00 18 	ld.d	r10,r9[24]
8000a456:	f0 eb 00 18 	st.d	r8[24],r10
8000a45a:	f2 ea 00 20 	ld.d	r10,r9[32]
8000a45e:	f0 eb 00 20 	st.d	r8[32],r10
8000a462:	f2 ea 00 28 	ld.d	r10,r9[40]
8000a466:	f0 eb 00 28 	st.d	r8[40],r10
8000a46a:	72 ca       	ld.w	r10,r9[0x30]
8000a46c:	91 ca       	st.w	r8[0x30],r10
8000a46e:	f3 39 00 34 	ld.ub	r9,r9[52]
8000a472:	f1 69 00 34 	st.b	r8[52],r9
8000a476:	fe 68 00 00 	mov	r8,-131072
8000a47a:	fe 69 00 00 	mov	r9,-131072
8000a47e:	72 79       	ld.w	r9,r9[0x1c]
8000a480:	a1 c9       	cbr	r9,0x0
8000a482:	91 79       	st.w	r8[0x1c],r9
8000a484:	fe 68 01 00 	mov	r8,-130816
8000a488:	fe 69 01 00 	mov	r9,-130816
8000a48c:	72 09       	ld.w	r9,r9[0x0]
8000a48e:	12 9a       	mov	r10,r9
8000a490:	e0 1a e6 83 	andl	r10,0xe683
8000a494:	34 09       	mov	r9,64
8000a496:	ef 49 ff f8 	st.w	r7[-8],r9
8000a49a:	30 89       	mov	r9,8
8000a49c:	ef 49 ff fc 	st.w	r7[-4],r9
8000a4a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a4a4:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a4a8:	f2 0b 0c 49 	max	r9,r9,r11
8000a4ac:	ef 49 ff f4 	st.w	r7[-12],r9
8000a4b0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a4b4:	ef 49 ff ec 	st.w	r7[-20],r9
8000a4b8:	e0 69 04 00 	mov	r9,1024
8000a4bc:	ef 49 ff f0 	st.w	r7[-16],r9
8000a4c0:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a4c4:	ee fb ff f0 	ld.w	r11,r7[-16]
8000a4c8:	f2 0b 0d 49 	min	r9,r9,r11
8000a4cc:	ef 49 ff e8 	st.w	r7[-24],r9
8000a4d0:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a4d4:	a1 79       	lsl	r9,0x1
8000a4d6:	20 19       	sub	r9,1
8000a4d8:	f2 09 12 00 	clz	r9,r9
8000a4dc:	f2 09 11 1c 	rsub	r9,r9,28
8000a4e0:	a5 69       	lsl	r9,0x4
8000a4e2:	e2 19 08 7c 	andl	r9,0x87c,COH
8000a4e6:	f5 e9 10 09 	or	r9,r10,r9
8000a4ea:	e8 19 11 00 	orl	r9,0x1100
8000a4ee:	91 09       	st.w	r8[0x0],r9
8000a4f0:	fe 68 01 00 	mov	r8,-130816
8000a4f4:	fe 69 01 00 	mov	r9,-130816
8000a4f8:	72 09       	ld.w	r9,r9[0x0]
8000a4fa:	a1 b9       	sbr	r9,0x1
8000a4fc:	91 09       	st.w	r8[0x0],r9
8000a4fe:	fe 68 00 00 	mov	r8,-131072
8000a502:	fe 69 00 00 	mov	r9,-131072
8000a506:	72 79       	ld.w	r9,r9[0x1c]
8000a508:	a1 a9       	sbr	r9,0x0
8000a50a:	91 79       	st.w	r8[0x1c],r9
8000a50c:	fe 68 00 00 	mov	r8,-131072
8000a510:	fe 69 00 00 	mov	r9,-131072
8000a514:	72 09       	ld.w	r9,r9[0x0]
8000a516:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a51a:	ab b9       	sbr	r9,0xb
8000a51c:	91 09       	st.w	r8[0x0],r9
8000a51e:	fe 68 00 00 	mov	r8,-131072
8000a522:	fe 69 00 00 	mov	r9,-131072
8000a526:	72 09       	ld.w	r9,r9[0x0]
8000a528:	af b9       	sbr	r9,0xf
8000a52a:	91 09       	st.w	r8[0x0],r9
8000a52c:	fc 18 e0 00 	movh	r8,0xe000
8000a530:	ef 48 ff dc 	st.w	r7[-36],r8
8000a534:	ee c8 00 5c 	sub	r8,r7,92
8000a538:	ef 48 ff e0 	st.w	r7[-32],r8
8000a53c:	30 08       	mov	r8,0
8000a53e:	ef 68 ff db 	st.b	r7[-37],r8
8000a542:	c1 68       	rjmp	8000a56e <udd_test_mode_packet+0x142>
8000a544:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a548:	11 88       	ld.ub	r8,r8[0x0]
8000a54a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000a54e:	b2 88       	st.b	r9[0x0],r8
8000a550:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a554:	2f f8       	sub	r8,-1
8000a556:	ef 48 ff dc 	st.w	r7[-36],r8
8000a55a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a55e:	2f f8       	sub	r8,-1
8000a560:	ef 48 ff e0 	st.w	r7[-32],r8
8000a564:	ef 38 ff db 	ld.ub	r8,r7[-37]
8000a568:	2f f8       	sub	r8,-1
8000a56a:	ef 68 ff db 	st.b	r7[-37],r8
8000a56e:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000a572:	33 48       	mov	r8,52
8000a574:	f0 09 18 00 	cp.b	r9,r8
8000a578:	fe 98 ff e6 	brls	8000a544 <udd_test_mode_packet+0x118>
8000a57c:	f0 1f 00 0b 	mcall	8000a5a8 <udd_test_mode_packet+0x17c>
8000a580:	18 98       	mov	r8,r12
8000a582:	ef 48 ff e4 	st.w	r7[-28],r8
8000a586:	fe 68 01 f0 	mov	r8,-130576
8000a58a:	30 19       	mov	r9,1
8000a58c:	91 09       	st.w	r8[0x0],r9
8000a58e:	ee fc ff e4 	ld.w	r12,r7[-28]
8000a592:	f0 1f 00 07 	mcall	8000a5ac <udd_test_mode_packet+0x180>
8000a596:	fe 68 01 60 	mov	r8,-130720
8000a59a:	30 19       	mov	r9,1
8000a59c:	91 09       	st.w	r8[0x0],r9
8000a59e:	2e 9d       	sub	sp,-92
8000a5a0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a5a4:	80 00       	ld.sh	r0,r0[0x0]
8000a5a6:	ed ec 80 00 	sthh.w	r0[r0],r6:b,r12:b
8000a5aa:	95 1c       	st.w	r10[0x4],r12
8000a5ac:	80 00       	ld.sh	r0,r0[0x0]
8000a5ae:	95 3a       	st.w	r10[0xc],r10

8000a5b0 <udd_reset_ep_ctrl>:
8000a5b0:	eb cd 40 80 	pushm	r7,lr
8000a5b4:	1a 97       	mov	r7,sp
8000a5b6:	20 7d       	sub	sp,28
8000a5b8:	fe 68 00 00 	mov	r8,-131072
8000a5bc:	fe 69 00 00 	mov	r9,-131072
8000a5c0:	72 09       	ld.w	r9,r9[0x0]
8000a5c2:	e0 19 ff 80 	andl	r9,0xff80
8000a5c6:	91 09       	st.w	r8[0x0],r9
8000a5c8:	fe 68 00 00 	mov	r8,-131072
8000a5cc:	fe 69 00 00 	mov	r9,-131072
8000a5d0:	72 09       	ld.w	r9,r9[0x0]
8000a5d2:	a7 b9       	sbr	r9,0x7
8000a5d4:	91 09       	st.w	r8[0x0],r9
8000a5d6:	fe 68 01 00 	mov	r8,-130816
8000a5da:	fe 69 01 00 	mov	r9,-130816
8000a5de:	72 09       	ld.w	r9,r9[0x0]
8000a5e0:	12 9a       	mov	r10,r9
8000a5e2:	e0 1a e6 83 	andl	r10,0xe683
8000a5e6:	34 09       	mov	r9,64
8000a5e8:	ef 49 ff f8 	st.w	r7[-8],r9
8000a5ec:	30 89       	mov	r9,8
8000a5ee:	ef 49 ff fc 	st.w	r7[-4],r9
8000a5f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a5f6:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a5fa:	f2 0b 0c 49 	max	r9,r9,r11
8000a5fe:	ef 49 ff f4 	st.w	r7[-12],r9
8000a602:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a606:	ef 49 ff ec 	st.w	r7[-20],r9
8000a60a:	e0 69 04 00 	mov	r9,1024
8000a60e:	ef 49 ff f0 	st.w	r7[-16],r9
8000a612:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a616:	ee fb ff f0 	ld.w	r11,r7[-16]
8000a61a:	f2 0b 0d 49 	min	r9,r9,r11
8000a61e:	ef 49 ff e8 	st.w	r7[-24],r9
8000a622:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a626:	a1 79       	lsl	r9,0x1
8000a628:	20 19       	sub	r9,1
8000a62a:	f2 09 12 00 	clz	r9,r9
8000a62e:	f2 09 11 1c 	rsub	r9,r9,28
8000a632:	a5 69       	lsl	r9,0x4
8000a634:	e2 19 19 7c 	andl	r9,0x197c,COH
8000a638:	f5 e9 10 09 	or	r9,r10,r9
8000a63c:	91 09       	st.w	r8[0x0],r9
8000a63e:	fe 68 01 00 	mov	r8,-130816
8000a642:	fe 69 01 00 	mov	r9,-130816
8000a646:	72 09       	ld.w	r9,r9[0x0]
8000a648:	a1 b9       	sbr	r9,0x1
8000a64a:	91 09       	st.w	r8[0x0],r9
8000a64c:	fe 68 00 00 	mov	r8,-131072
8000a650:	fe 69 00 00 	mov	r9,-131072
8000a654:	72 79       	ld.w	r9,r9[0x1c]
8000a656:	a1 a9       	sbr	r9,0x0
8000a658:	91 79       	st.w	r8[0x1c],r9
8000a65a:	f0 1f 00 0d 	mcall	8000a68c <udd_reset_ep_ctrl+0xdc>
8000a65e:	18 98       	mov	r8,r12
8000a660:	ef 48 ff e4 	st.w	r7[-28],r8
8000a664:	fe 68 01 f0 	mov	r8,-130576
8000a668:	30 49       	mov	r9,4
8000a66a:	91 09       	st.w	r8[0x0],r9
8000a66c:	fe 68 01 f0 	mov	r8,-130576
8000a670:	30 29       	mov	r9,2
8000a672:	91 09       	st.w	r8[0x0],r9
8000a674:	fe 68 00 00 	mov	r8,-131072
8000a678:	e0 69 10 00 	mov	r9,4096
8000a67c:	91 69       	st.w	r8[0x18],r9
8000a67e:	ee fc ff e4 	ld.w	r12,r7[-28]
8000a682:	f0 1f 00 04 	mcall	8000a690 <udd_reset_ep_ctrl+0xe0>
8000a686:	2f 9d       	sub	sp,-28
8000a688:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a68c:	80 00       	ld.sh	r0,r0[0x0]
8000a68e:	95 1c       	st.w	r10[0x4],r12
8000a690:	80 00       	ld.sh	r0,r0[0x0]
8000a692:	95 3a       	st.w	r10[0xc],r10

8000a694 <udd_ctrl_init>:
8000a694:	eb cd 40 80 	pushm	r7,lr
8000a698:	1a 97       	mov	r7,sp
8000a69a:	20 1d       	sub	sp,4
8000a69c:	f0 1f 00 10 	mcall	8000a6dc <udd_ctrl_init+0x48>
8000a6a0:	18 98       	mov	r8,r12
8000a6a2:	ef 48 ff fc 	st.w	r7[-4],r8
8000a6a6:	fe 68 02 20 	mov	r8,-130528
8000a6aa:	30 19       	mov	r9,1
8000a6ac:	91 09       	st.w	r8[0x0],r9
8000a6ae:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a6b2:	f0 1f 00 0c 	mcall	8000a6e0 <udd_ctrl_init+0x4c>
8000a6b6:	fe 68 01 60 	mov	r8,-130720
8000a6ba:	30 29       	mov	r9,2
8000a6bc:	91 09       	st.w	r8[0x0],r9
8000a6be:	48 a8       	lddpc	r8,8000a6e4 <udd_ctrl_init+0x50>
8000a6c0:	30 09       	mov	r9,0
8000a6c2:	91 49       	st.w	r8[0x10],r9
8000a6c4:	48 88       	lddpc	r8,8000a6e4 <udd_ctrl_init+0x50>
8000a6c6:	30 09       	mov	r9,0
8000a6c8:	91 59       	st.w	r8[0x14],r9
8000a6ca:	48 79       	lddpc	r9,8000a6e4 <udd_ctrl_init+0x50>
8000a6cc:	30 08       	mov	r8,0
8000a6ce:	b2 68       	st.h	r9[0xc],r8
8000a6d0:	48 68       	lddpc	r8,8000a6e8 <udd_ctrl_init+0x54>
8000a6d2:	30 09       	mov	r9,0
8000a6d4:	91 09       	st.w	r8[0x0],r9
8000a6d6:	2f fd       	sub	sp,-4
8000a6d8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a6dc:	80 00       	ld.sh	r0,r0[0x0]
8000a6de:	95 1c       	st.w	r10[0x4],r12
8000a6e0:	80 00       	ld.sh	r0,r0[0x0]
8000a6e2:	95 3a       	st.w	r10[0xc],r10
8000a6e4:	00 00       	add	r0,r0
8000a6e6:	0d b8       	ld.ub	r8,r6[0x3]
8000a6e8:	00 00       	add	r0,r0
8000a6ea:	08 2c       	rsub	r12,r4

8000a6ec <udd_ctrl_setup_received>:
8000a6ec:	eb cd 40 80 	pushm	r7,lr
8000a6f0:	1a 97       	mov	r7,sp
8000a6f2:	20 3d       	sub	sp,12
8000a6f4:	4c b8       	lddpc	r8,8000a820 <udd_ctrl_setup_received+0x134>
8000a6f6:	70 08       	ld.w	r8,r8[0x0]
8000a6f8:	58 08       	cp.w	r8,0
8000a6fa:	c0 50       	breq	8000a704 <udd_ctrl_setup_received+0x18>
8000a6fc:	f0 1f 00 4a 	mcall	8000a824 <udd_ctrl_setup_received+0x138>
8000a700:	f0 1f 00 4a 	mcall	8000a828 <udd_ctrl_setup_received+0x13c>
8000a704:	fe 68 01 30 	mov	r8,-130768
8000a708:	70 08       	ld.w	r8,r8[0x0]
8000a70a:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000a70e:	b5 88       	lsr	r8,0x14
8000a710:	58 88       	cp.w	r8,8
8000a712:	c0 80       	breq	8000a722 <udd_ctrl_setup_received+0x36>
8000a714:	f0 1f 00 46 	mcall	8000a82c <udd_ctrl_setup_received+0x140>
8000a718:	fe 68 01 60 	mov	r8,-130720
8000a71c:	30 49       	mov	r9,4
8000a71e:	91 09       	st.w	r8[0x0],r9
8000a720:	c7 d8       	rjmp	8000a81a <udd_ctrl_setup_received+0x12e>
8000a722:	fc 18 e0 00 	movh	r8,0xe000
8000a726:	ef 48 ff fc 	st.w	r7[-4],r8
8000a72a:	30 08       	mov	r8,0
8000a72c:	ef 68 ff fb 	st.b	r7[-5],r8
8000a730:	c1 38       	rjmp	8000a756 <udd_ctrl_setup_received+0x6a>
8000a732:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000a736:	4b f8       	lddpc	r8,8000a830 <udd_ctrl_setup_received+0x144>
8000a738:	10 09       	add	r9,r8
8000a73a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a73e:	11 88       	ld.ub	r8,r8[0x0]
8000a740:	b2 88       	st.b	r9[0x0],r8
8000a742:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a746:	2f f8       	sub	r8,-1
8000a748:	ef 48 ff fc 	st.w	r7[-4],r8
8000a74c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000a750:	2f f8       	sub	r8,-1
8000a752:	ef 68 ff fb 	st.b	r7[-5],r8
8000a756:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000a75a:	30 78       	mov	r8,7
8000a75c:	f0 09 18 00 	cp.b	r9,r8
8000a760:	fe 98 ff e9 	brls	8000a732 <udd_ctrl_setup_received+0x46>
8000a764:	4b 38       	lddpc	r8,8000a830 <udd_ctrl_setup_received+0x144>
8000a766:	90 18       	ld.sh	r8,r8[0x2]
8000a768:	5c 88       	casts.h	r8
8000a76a:	5c c8       	swap.bh	r8
8000a76c:	5c 88       	casts.h	r8
8000a76e:	4b 19       	lddpc	r9,8000a830 <udd_ctrl_setup_received+0x144>
8000a770:	b2 18       	st.h	r9[0x2],r8
8000a772:	4b 08       	lddpc	r8,8000a830 <udd_ctrl_setup_received+0x144>
8000a774:	90 28       	ld.sh	r8,r8[0x4]
8000a776:	5c 88       	casts.h	r8
8000a778:	5c c8       	swap.bh	r8
8000a77a:	5c 88       	casts.h	r8
8000a77c:	4a d9       	lddpc	r9,8000a830 <udd_ctrl_setup_received+0x144>
8000a77e:	b2 28       	st.h	r9[0x4],r8
8000a780:	4a c8       	lddpc	r8,8000a830 <udd_ctrl_setup_received+0x144>
8000a782:	90 38       	ld.sh	r8,r8[0x6]
8000a784:	5c 88       	casts.h	r8
8000a786:	5c c8       	swap.bh	r8
8000a788:	5c 88       	casts.h	r8
8000a78a:	4a a9       	lddpc	r9,8000a830 <udd_ctrl_setup_received+0x144>
8000a78c:	b2 38       	st.h	r9[0x6],r8
8000a78e:	f0 1f 00 2a 	mcall	8000a834 <udd_ctrl_setup_received+0x148>
8000a792:	18 98       	mov	r8,r12
8000a794:	ec 18 00 01 	eorl	r8,0x1
8000a798:	5c 58       	castu.b	r8
8000a79a:	c0 80       	breq	8000a7aa <udd_ctrl_setup_received+0xbe>
8000a79c:	f0 1f 00 24 	mcall	8000a82c <udd_ctrl_setup_received+0x140>
8000a7a0:	fe 68 01 60 	mov	r8,-130720
8000a7a4:	30 49       	mov	r9,4
8000a7a6:	91 09       	st.w	r8[0x0],r9
8000a7a8:	c3 98       	rjmp	8000a81a <udd_ctrl_setup_received+0x12e>
8000a7aa:	fe 68 01 60 	mov	r8,-130720
8000a7ae:	30 49       	mov	r9,4
8000a7b0:	91 09       	st.w	r8[0x0],r9
8000a7b2:	4a 08       	lddpc	r8,8000a830 <udd_ctrl_setup_received+0x144>
8000a7b4:	11 88       	ld.ub	r8,r8[0x0]
8000a7b6:	10 99       	mov	r9,r8
8000a7b8:	30 08       	mov	r8,0
8000a7ba:	f0 09 18 00 	cp.b	r9,r8
8000a7be:	c0 d4       	brge	8000a7d8 <udd_ctrl_setup_received+0xec>
8000a7c0:	49 e9       	lddpc	r9,8000a838 <udd_ctrl_setup_received+0x14c>
8000a7c2:	30 08       	mov	r8,0
8000a7c4:	b2 08       	st.h	r9[0x0],r8
8000a7c6:	49 e9       	lddpc	r9,8000a83c <udd_ctrl_setup_received+0x150>
8000a7c8:	30 08       	mov	r8,0
8000a7ca:	b2 08       	st.h	r9[0x0],r8
8000a7cc:	49 58       	lddpc	r8,8000a820 <udd_ctrl_setup_received+0x134>
8000a7ce:	30 29       	mov	r9,2
8000a7d0:	91 09       	st.w	r8[0x0],r9
8000a7d2:	f0 1f 00 1c 	mcall	8000a840 <udd_ctrl_setup_received+0x154>
8000a7d6:	c2 28       	rjmp	8000a81a <udd_ctrl_setup_received+0x12e>
8000a7d8:	49 68       	lddpc	r8,8000a830 <udd_ctrl_setup_received+0x144>
8000a7da:	90 38       	ld.sh	r8,r8[0x6]
8000a7dc:	58 08       	cp.w	r8,0
8000a7de:	c0 41       	brne	8000a7e6 <udd_ctrl_setup_received+0xfa>
8000a7e0:	f0 1f 00 19 	mcall	8000a844 <udd_ctrl_setup_received+0x158>
8000a7e4:	c1 b8       	rjmp	8000a81a <udd_ctrl_setup_received+0x12e>
8000a7e6:	49 59       	lddpc	r9,8000a838 <udd_ctrl_setup_received+0x14c>
8000a7e8:	30 08       	mov	r8,0
8000a7ea:	b2 08       	st.h	r9[0x0],r8
8000a7ec:	49 49       	lddpc	r9,8000a83c <udd_ctrl_setup_received+0x150>
8000a7ee:	30 08       	mov	r8,0
8000a7f0:	b2 08       	st.h	r9[0x0],r8
8000a7f2:	48 c8       	lddpc	r8,8000a820 <udd_ctrl_setup_received+0x134>
8000a7f4:	30 19       	mov	r9,1
8000a7f6:	91 09       	st.w	r8[0x0],r9
8000a7f8:	fe 68 01 60 	mov	r8,-130720
8000a7fc:	31 09       	mov	r9,16
8000a7fe:	91 09       	st.w	r8[0x0],r9
8000a800:	f0 1f 00 12 	mcall	8000a848 <udd_ctrl_setup_received+0x15c>
8000a804:	18 98       	mov	r8,r12
8000a806:	ef 48 ff f4 	st.w	r7[-12],r8
8000a80a:	fe 68 01 f0 	mov	r8,-130576
8000a80e:	31 09       	mov	r9,16
8000a810:	91 09       	st.w	r8[0x0],r9
8000a812:	ee fc ff f4 	ld.w	r12,r7[-12]
8000a816:	f0 1f 00 0e 	mcall	8000a84c <udd_ctrl_setup_received+0x160>
8000a81a:	2f dd       	sub	sp,-12
8000a81c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a820:	00 00       	add	r0,r0
8000a822:	08 2c       	rsub	r12,r4
8000a824:	80 00       	ld.sh	r0,r0[0x0]
8000a826:	ad 14       	ld.d	r4,--r6
8000a828:	80 00       	ld.sh	r0,r0[0x0]
8000a82a:	a6 94       	st.b	r3[0x1],r4
8000a82c:	80 00       	ld.sh	r0,r0[0x0]
8000a82e:	ac 5c       	st.h	r6[0xa],r12
8000a830:	00 00       	add	r0,r0
8000a832:	0d b8       	ld.ub	r8,r6[0x3]
8000a834:	80 00       	ld.sh	r0,r0[0x0]
8000a836:	da ec       	*unknown*
8000a838:	00 00       	add	r0,r0
8000a83a:	08 30       	cp.w	r0,r4
8000a83c:	00 00       	add	r0,r0
8000a83e:	08 32       	cp.w	r2,r4
8000a840:	80 00       	ld.sh	r0,r0[0x0]
8000a842:	a8 50       	st.h	r4[0xa],r0
8000a844:	80 00       	ld.sh	r0,r0[0x0]
8000a846:	ac 7c       	st.h	r6[0xe],r12
8000a848:	80 00       	ld.sh	r0,r0[0x0]
8000a84a:	95 1c       	st.w	r10[0x4],r12
8000a84c:	80 00       	ld.sh	r0,r0[0x0]
8000a84e:	95 3a       	st.w	r10[0xc],r10

8000a850 <udd_ctrl_in_sent>:
8000a850:	eb cd 40 80 	pushm	r7,lr
8000a854:	1a 97       	mov	r7,sp
8000a856:	20 4d       	sub	sp,16
8000a858:	f0 1f 00 5c 	mcall	8000a9c8 <udd_ctrl_in_sent+0x178>
8000a85c:	18 98       	mov	r8,r12
8000a85e:	ef 48 ff fc 	st.w	r7[-4],r8
8000a862:	fe 68 02 20 	mov	r8,-130528
8000a866:	30 19       	mov	r9,1
8000a868:	91 09       	st.w	r8[0x0],r9
8000a86a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a86e:	f0 1f 00 58 	mcall	8000a9cc <udd_ctrl_in_sent+0x17c>
8000a872:	4d 88       	lddpc	r8,8000a9d0 <udd_ctrl_in_sent+0x180>
8000a874:	70 08       	ld.w	r8,r8[0x0]
8000a876:	58 38       	cp.w	r8,3
8000a878:	c0 61       	brne	8000a884 <udd_ctrl_in_sent+0x34>
8000a87a:	f0 1f 00 57 	mcall	8000a9d4 <udd_ctrl_in_sent+0x184>
8000a87e:	f0 1f 00 57 	mcall	8000a9d8 <udd_ctrl_in_sent+0x188>
8000a882:	c9 f8       	rjmp	8000a9c0 <udd_ctrl_in_sent+0x170>
8000a884:	4d 68       	lddpc	r8,8000a9dc <udd_ctrl_in_sent+0x18c>
8000a886:	90 69       	ld.sh	r9,r8[0xc]
8000a888:	4d 68       	lddpc	r8,8000a9e0 <udd_ctrl_in_sent+0x190>
8000a88a:	90 08       	ld.sh	r8,r8[0x0]
8000a88c:	10 19       	sub	r9,r8
8000a88e:	ef 59 ff f0 	st.h	r7[-16],r9
8000a892:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000a896:	30 08       	mov	r8,0
8000a898:	f0 09 19 00 	cp.h	r9,r8
8000a89c:	c2 b1       	brne	8000a8f2 <udd_ctrl_in_sent+0xa2>
8000a89e:	4d 28       	lddpc	r8,8000a9e4 <udd_ctrl_in_sent+0x194>
8000a8a0:	90 09       	ld.sh	r9,r8[0x0]
8000a8a2:	4d 08       	lddpc	r8,8000a9e0 <udd_ctrl_in_sent+0x190>
8000a8a4:	90 08       	ld.sh	r8,r8[0x0]
8000a8a6:	f2 08 00 08 	add	r8,r9,r8
8000a8aa:	5c 88       	casts.h	r8
8000a8ac:	4c e9       	lddpc	r9,8000a9e4 <udd_ctrl_in_sent+0x194>
8000a8ae:	b2 08       	st.h	r9[0x0],r8
8000a8b0:	4c b8       	lddpc	r8,8000a9dc <udd_ctrl_in_sent+0x18c>
8000a8b2:	90 39       	ld.sh	r9,r8[0x6]
8000a8b4:	4c c8       	lddpc	r8,8000a9e4 <udd_ctrl_in_sent+0x194>
8000a8b6:	90 08       	ld.sh	r8,r8[0x0]
8000a8b8:	f0 09 19 00 	cp.h	r9,r8
8000a8bc:	c0 50       	breq	8000a8c6 <udd_ctrl_in_sent+0x76>
8000a8be:	4c b8       	lddpc	r8,8000a9e8 <udd_ctrl_in_sent+0x198>
8000a8c0:	11 88       	ld.ub	r8,r8[0x0]
8000a8c2:	58 08       	cp.w	r8,0
8000a8c4:	c0 40       	breq	8000a8cc <udd_ctrl_in_sent+0x7c>
8000a8c6:	f0 1f 00 4a 	mcall	8000a9ec <udd_ctrl_in_sent+0x19c>
8000a8ca:	c7 b8       	rjmp	8000a9c0 <udd_ctrl_in_sent+0x170>
8000a8cc:	4c 48       	lddpc	r8,8000a9dc <udd_ctrl_in_sent+0x18c>
8000a8ce:	70 58       	ld.w	r8,r8[0x14]
8000a8d0:	58 08       	cp.w	r8,0
8000a8d2:	c1 00       	breq	8000a8f2 <udd_ctrl_in_sent+0xa2>
8000a8d4:	4c 28       	lddpc	r8,8000a9dc <udd_ctrl_in_sent+0x18c>
8000a8d6:	70 58       	ld.w	r8,r8[0x14]
8000a8d8:	5d 18       	icall	r8
8000a8da:	18 98       	mov	r8,r12
8000a8dc:	ec 18 00 01 	eorl	r8,0x1
8000a8e0:	5c 58       	castu.b	r8
8000a8e2:	c0 81       	brne	8000a8f2 <udd_ctrl_in_sent+0xa2>
8000a8e4:	4b f9       	lddpc	r9,8000a9e0 <udd_ctrl_in_sent+0x190>
8000a8e6:	30 08       	mov	r8,0
8000a8e8:	b2 08       	st.h	r9[0x0],r8
8000a8ea:	4b d8       	lddpc	r8,8000a9dc <udd_ctrl_in_sent+0x18c>
8000a8ec:	90 68       	ld.sh	r8,r8[0xc]
8000a8ee:	ef 58 ff f0 	st.h	r7[-16],r8
8000a8f2:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000a8f6:	33 f8       	mov	r8,63
8000a8f8:	f0 09 19 00 	cp.h	r9,r8
8000a8fc:	e0 88 00 09 	brls	8000a90e <udd_ctrl_in_sent+0xbe>
8000a900:	34 08       	mov	r8,64
8000a902:	ef 58 ff f0 	st.h	r7[-16],r8
8000a906:	4b 99       	lddpc	r9,8000a9e8 <udd_ctrl_in_sent+0x198>
8000a908:	30 08       	mov	r8,0
8000a90a:	b2 88       	st.b	r9[0x0],r8
8000a90c:	c0 48       	rjmp	8000a914 <udd_ctrl_in_sent+0xc4>
8000a90e:	4b 79       	lddpc	r9,8000a9e8 <udd_ctrl_in_sent+0x198>
8000a910:	30 18       	mov	r8,1
8000a912:	b2 88       	st.b	r9[0x0],r8
8000a914:	fc 18 e0 00 	movh	r8,0xe000
8000a918:	ef 48 ff f4 	st.w	r7[-12],r8
8000a91c:	4b 08       	lddpc	r8,8000a9dc <udd_ctrl_in_sent+0x18c>
8000a91e:	70 29       	ld.w	r9,r8[0x8]
8000a920:	4b 08       	lddpc	r8,8000a9e0 <udd_ctrl_in_sent+0x190>
8000a922:	90 08       	ld.sh	r8,r8[0x0]
8000a924:	5c 78       	castu.h	r8
8000a926:	f2 08 00 08 	add	r8,r9,r8
8000a92a:	ef 48 ff f8 	st.w	r7[-8],r8
8000a92e:	f0 1f 00 27 	mcall	8000a9c8 <udd_ctrl_in_sent+0x178>
8000a932:	18 98       	mov	r8,r12
8000a934:	ef 48 ff fc 	st.w	r7[-4],r8
8000a938:	fe 68 01 30 	mov	r8,-130768
8000a93c:	70 08       	ld.w	r8,r8[0x0]
8000a93e:	e2 18 00 02 	andl	r8,0x2,COH
8000a942:	c0 90       	breq	8000a954 <udd_ctrl_in_sent+0x104>
8000a944:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a948:	f0 1f 00 21 	mcall	8000a9cc <udd_ctrl_in_sent+0x17c>
8000a94c:	4a 18       	lddpc	r8,8000a9d0 <udd_ctrl_in_sent+0x180>
8000a94e:	30 49       	mov	r9,4
8000a950:	91 09       	st.w	r8[0x0],r9
8000a952:	c3 78       	rjmp	8000a9c0 <udd_ctrl_in_sent+0x170>
8000a954:	30 08       	mov	r8,0
8000a956:	ef 68 ff f3 	st.b	r7[-13],r8
8000a95a:	c1 68       	rjmp	8000a986 <udd_ctrl_in_sent+0x136>
8000a95c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a960:	11 88       	ld.ub	r8,r8[0x0]
8000a962:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a966:	b2 88       	st.b	r9[0x0],r8
8000a968:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a96c:	2f f8       	sub	r8,-1
8000a96e:	ef 48 ff f4 	st.w	r7[-12],r8
8000a972:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a976:	2f f8       	sub	r8,-1
8000a978:	ef 48 ff f8 	st.w	r7[-8],r8
8000a97c:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000a980:	2f f8       	sub	r8,-1
8000a982:	ef 68 ff f3 	st.b	r7[-13],r8
8000a986:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000a98a:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000a98e:	f0 09 19 00 	cp.h	r9,r8
8000a992:	fe 9b ff e5 	brhi	8000a95c <udd_ctrl_in_sent+0x10c>
8000a996:	49 38       	lddpc	r8,8000a9e0 <udd_ctrl_in_sent+0x190>
8000a998:	90 08       	ld.sh	r8,r8[0x0]
8000a99a:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000a99e:	f2 08 00 08 	add	r8,r9,r8
8000a9a2:	5c 88       	casts.h	r8
8000a9a4:	48 f9       	lddpc	r9,8000a9e0 <udd_ctrl_in_sent+0x190>
8000a9a6:	b2 08       	st.h	r9[0x0],r8
8000a9a8:	fe 68 01 60 	mov	r8,-130720
8000a9ac:	30 19       	mov	r9,1
8000a9ae:	91 09       	st.w	r8[0x0],r9
8000a9b0:	fe 68 01 f0 	mov	r8,-130576
8000a9b4:	30 19       	mov	r9,1
8000a9b6:	91 09       	st.w	r8[0x0],r9
8000a9b8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a9bc:	f0 1f 00 04 	mcall	8000a9cc <udd_ctrl_in_sent+0x17c>
8000a9c0:	2f cd       	sub	sp,-16
8000a9c2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9c6:	00 00       	add	r0,r0
8000a9c8:	80 00       	ld.sh	r0,r0[0x0]
8000a9ca:	95 1c       	st.w	r10[0x4],r12
8000a9cc:	80 00       	ld.sh	r0,r0[0x0]
8000a9ce:	95 3a       	st.w	r10[0xc],r10
8000a9d0:	00 00       	add	r0,r0
8000a9d2:	08 2c       	rsub	r12,r4
8000a9d4:	80 00       	ld.sh	r0,r0[0x0]
8000a9d6:	ad 14       	ld.d	r4,--r6
8000a9d8:	80 00       	ld.sh	r0,r0[0x0]
8000a9da:	a6 94       	st.b	r3[0x1],r4
8000a9dc:	00 00       	add	r0,r0
8000a9de:	0d b8       	ld.ub	r8,r6[0x3]
8000a9e0:	00 00       	add	r0,r0
8000a9e2:	08 32       	cp.w	r2,r4
8000a9e4:	00 00       	add	r0,r0
8000a9e6:	08 30       	cp.w	r0,r4
8000a9e8:	00 00       	add	r0,r0
8000a9ea:	08 5c       	eor	r12,r4
8000a9ec:	80 00       	ld.sh	r0,r0[0x0]
8000a9ee:	ac d0       	st.b	r6[0x5],r0

8000a9f0 <udd_ctrl_out_received>:
8000a9f0:	eb cd 40 80 	pushm	r7,lr
8000a9f4:	1a 97       	mov	r7,sp
8000a9f6:	20 4d       	sub	sp,16
8000a9f8:	4f 18       	lddpc	r8,8000abbc <udd_ctrl_out_received+0x1cc>
8000a9fa:	70 08       	ld.w	r8,r8[0x0]
8000a9fc:	58 18       	cp.w	r8,1
8000a9fe:	c1 10       	breq	8000aa20 <udd_ctrl_out_received+0x30>
8000aa00:	4e f8       	lddpc	r8,8000abbc <udd_ctrl_out_received+0x1cc>
8000aa02:	70 08       	ld.w	r8,r8[0x0]
8000aa04:	58 28       	cp.w	r8,2
8000aa06:	c0 50       	breq	8000aa10 <udd_ctrl_out_received+0x20>
8000aa08:	4e d8       	lddpc	r8,8000abbc <udd_ctrl_out_received+0x1cc>
8000aa0a:	70 08       	ld.w	r8,r8[0x0]
8000aa0c:	58 48       	cp.w	r8,4
8000aa0e:	c0 41       	brne	8000aa16 <udd_ctrl_out_received+0x26>
8000aa10:	f0 1f 00 6c 	mcall	8000abc0 <udd_ctrl_out_received+0x1d0>
8000aa14:	c0 38       	rjmp	8000aa1a <udd_ctrl_out_received+0x2a>
8000aa16:	f0 1f 00 6c 	mcall	8000abc4 <udd_ctrl_out_received+0x1d4>
8000aa1a:	f0 1f 00 6c 	mcall	8000abc8 <udd_ctrl_out_received+0x1d8>
8000aa1e:	cc b8       	rjmp	8000abb4 <udd_ctrl_out_received+0x1c4>
8000aa20:	fe 68 01 30 	mov	r8,-130768
8000aa24:	70 08       	ld.w	r8,r8[0x0]
8000aa26:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000aa2a:	b5 88       	lsr	r8,0x14
8000aa2c:	ef 58 ff f6 	st.h	r7[-10],r8
8000aa30:	4e 78       	lddpc	r8,8000abcc <udd_ctrl_out_received+0x1dc>
8000aa32:	90 68       	ld.sh	r8,r8[0xc]
8000aa34:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000aa38:	4e 68       	lddpc	r8,8000abd0 <udd_ctrl_out_received+0x1e0>
8000aa3a:	90 08       	ld.sh	r8,r8[0x0]
8000aa3c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000aa40:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000aa44:	f4 08 00 08 	add	r8,r10,r8
8000aa48:	10 39       	cp.w	r9,r8
8000aa4a:	c0 84       	brge	8000aa5a <udd_ctrl_out_received+0x6a>
8000aa4c:	4e 08       	lddpc	r8,8000abcc <udd_ctrl_out_received+0x1dc>
8000aa4e:	90 69       	ld.sh	r9,r8[0xc]
8000aa50:	4e 08       	lddpc	r8,8000abd0 <udd_ctrl_out_received+0x1e0>
8000aa52:	90 08       	ld.sh	r8,r8[0x0]
8000aa54:	10 19       	sub	r9,r8
8000aa56:	ef 59 ff f6 	st.h	r7[-10],r9
8000aa5a:	fc 18 e0 00 	movh	r8,0xe000
8000aa5e:	ef 48 ff f8 	st.w	r7[-8],r8
8000aa62:	4d b8       	lddpc	r8,8000abcc <udd_ctrl_out_received+0x1dc>
8000aa64:	70 29       	ld.w	r9,r8[0x8]
8000aa66:	4d b8       	lddpc	r8,8000abd0 <udd_ctrl_out_received+0x1e0>
8000aa68:	90 08       	ld.sh	r8,r8[0x0]
8000aa6a:	5c 78       	castu.h	r8
8000aa6c:	f2 08 00 08 	add	r8,r9,r8
8000aa70:	ef 48 ff fc 	st.w	r7[-4],r8
8000aa74:	30 08       	mov	r8,0
8000aa76:	ef 68 ff f5 	st.b	r7[-11],r8
8000aa7a:	c1 68       	rjmp	8000aaa6 <udd_ctrl_out_received+0xb6>
8000aa7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aa80:	11 88       	ld.ub	r8,r8[0x0]
8000aa82:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aa86:	b2 88       	st.b	r9[0x0],r8
8000aa88:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aa8c:	2f f8       	sub	r8,-1
8000aa8e:	ef 48 ff fc 	st.w	r7[-4],r8
8000aa92:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aa96:	2f f8       	sub	r8,-1
8000aa98:	ef 48 ff f8 	st.w	r7[-8],r8
8000aa9c:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000aaa0:	2f f8       	sub	r8,-1
8000aaa2:	ef 68 ff f5 	st.b	r7[-11],r8
8000aaa6:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000aaaa:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000aaae:	f0 09 19 00 	cp.h	r9,r8
8000aab2:	fe 9b ff e5 	brhi	8000aa7c <udd_ctrl_out_received+0x8c>
8000aab6:	4c 78       	lddpc	r8,8000abd0 <udd_ctrl_out_received+0x1e0>
8000aab8:	90 08       	ld.sh	r8,r8[0x0]
8000aaba:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000aabe:	f2 08 00 08 	add	r8,r9,r8
8000aac2:	5c 88       	casts.h	r8
8000aac4:	4c 39       	lddpc	r9,8000abd0 <udd_ctrl_out_received+0x1e0>
8000aac6:	b2 08       	st.h	r9[0x0],r8
8000aac8:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000aacc:	34 08       	mov	r8,64
8000aace:	f0 09 19 00 	cp.h	r9,r8
8000aad2:	c1 11       	brne	8000aaf4 <udd_ctrl_out_received+0x104>
8000aad4:	4b e8       	lddpc	r8,8000abcc <udd_ctrl_out_received+0x1dc>
8000aad6:	90 38       	ld.sh	r8,r8[0x6]
8000aad8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000aadc:	4b e8       	lddpc	r8,8000abd4 <udd_ctrl_out_received+0x1e4>
8000aade:	90 08       	ld.sh	r8,r8[0x0]
8000aae0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000aae4:	4b b8       	lddpc	r8,8000abd0 <udd_ctrl_out_received+0x1e0>
8000aae6:	90 08       	ld.sh	r8,r8[0x0]
8000aae8:	5c 78       	castu.h	r8
8000aaea:	f4 08 00 08 	add	r8,r10,r8
8000aaee:	10 39       	cp.w	r9,r8
8000aaf0:	e0 89 00 20 	brgt	8000ab30 <udd_ctrl_out_received+0x140>
8000aaf4:	4b 78       	lddpc	r8,8000abd0 <udd_ctrl_out_received+0x1e0>
8000aaf6:	90 08       	ld.sh	r8,r8[0x0]
8000aaf8:	4b 59       	lddpc	r9,8000abcc <udd_ctrl_out_received+0x1dc>
8000aafa:	b2 68       	st.h	r9[0xc],r8
8000aafc:	4b 48       	lddpc	r8,8000abcc <udd_ctrl_out_received+0x1dc>
8000aafe:	70 58       	ld.w	r8,r8[0x14]
8000ab00:	58 08       	cp.w	r8,0
8000ab02:	c1 00       	breq	8000ab22 <udd_ctrl_out_received+0x132>
8000ab04:	4b 28       	lddpc	r8,8000abcc <udd_ctrl_out_received+0x1dc>
8000ab06:	70 58       	ld.w	r8,r8[0x14]
8000ab08:	5d 18       	icall	r8
8000ab0a:	18 98       	mov	r8,r12
8000ab0c:	ec 18 00 01 	eorl	r8,0x1
8000ab10:	5c 58       	castu.b	r8
8000ab12:	c0 80       	breq	8000ab22 <udd_ctrl_out_received+0x132>
8000ab14:	f0 1f 00 2c 	mcall	8000abc4 <udd_ctrl_out_received+0x1d4>
8000ab18:	fe 68 01 60 	mov	r8,-130720
8000ab1c:	30 29       	mov	r9,2
8000ab1e:	91 09       	st.w	r8[0x0],r9
8000ab20:	c4 a8       	rjmp	8000abb4 <udd_ctrl_out_received+0x1c4>
8000ab22:	fe 68 01 60 	mov	r8,-130720
8000ab26:	30 29       	mov	r9,2
8000ab28:	91 09       	st.w	r8[0x0],r9
8000ab2a:	f0 1f 00 2c 	mcall	8000abd8 <udd_ctrl_out_received+0x1e8>
8000ab2e:	c4 38       	rjmp	8000abb4 <udd_ctrl_out_received+0x1c4>
8000ab30:	4a 78       	lddpc	r8,8000abcc <udd_ctrl_out_received+0x1dc>
8000ab32:	90 69       	ld.sh	r9,r8[0xc]
8000ab34:	4a 78       	lddpc	r8,8000abd0 <udd_ctrl_out_received+0x1e0>
8000ab36:	90 08       	ld.sh	r8,r8[0x0]
8000ab38:	f0 09 19 00 	cp.h	r9,r8
8000ab3c:	c2 71       	brne	8000ab8a <udd_ctrl_out_received+0x19a>
8000ab3e:	4a 48       	lddpc	r8,8000abcc <udd_ctrl_out_received+0x1dc>
8000ab40:	70 58       	ld.w	r8,r8[0x14]
8000ab42:	58 08       	cp.w	r8,0
8000ab44:	c0 81       	brne	8000ab54 <udd_ctrl_out_received+0x164>
8000ab46:	f0 1f 00 20 	mcall	8000abc4 <udd_ctrl_out_received+0x1d4>
8000ab4a:	fe 68 01 60 	mov	r8,-130720
8000ab4e:	30 29       	mov	r9,2
8000ab50:	91 09       	st.w	r8[0x0],r9
8000ab52:	c3 18       	rjmp	8000abb4 <udd_ctrl_out_received+0x1c4>
8000ab54:	49 e8       	lddpc	r8,8000abcc <udd_ctrl_out_received+0x1dc>
8000ab56:	70 58       	ld.w	r8,r8[0x14]
8000ab58:	5d 18       	icall	r8
8000ab5a:	18 98       	mov	r8,r12
8000ab5c:	ec 18 00 01 	eorl	r8,0x1
8000ab60:	5c 58       	castu.b	r8
8000ab62:	c0 80       	breq	8000ab72 <udd_ctrl_out_received+0x182>
8000ab64:	f0 1f 00 18 	mcall	8000abc4 <udd_ctrl_out_received+0x1d4>
8000ab68:	fe 68 01 60 	mov	r8,-130720
8000ab6c:	30 29       	mov	r9,2
8000ab6e:	91 09       	st.w	r8[0x0],r9
8000ab70:	c2 28       	rjmp	8000abb4 <udd_ctrl_out_received+0x1c4>
8000ab72:	49 98       	lddpc	r8,8000abd4 <udd_ctrl_out_received+0x1e4>
8000ab74:	90 09       	ld.sh	r9,r8[0x0]
8000ab76:	49 78       	lddpc	r8,8000abd0 <udd_ctrl_out_received+0x1e0>
8000ab78:	90 08       	ld.sh	r8,r8[0x0]
8000ab7a:	f2 08 00 08 	add	r8,r9,r8
8000ab7e:	5c 88       	casts.h	r8
8000ab80:	49 59       	lddpc	r9,8000abd4 <udd_ctrl_out_received+0x1e4>
8000ab82:	b2 08       	st.h	r9[0x0],r8
8000ab84:	49 39       	lddpc	r9,8000abd0 <udd_ctrl_out_received+0x1e0>
8000ab86:	30 08       	mov	r8,0
8000ab88:	b2 08       	st.h	r9[0x0],r8
8000ab8a:	fe 68 01 60 	mov	r8,-130720
8000ab8e:	30 29       	mov	r9,2
8000ab90:	91 09       	st.w	r8[0x0],r9
8000ab92:	fe 68 01 60 	mov	r8,-130720
8000ab96:	31 09       	mov	r9,16
8000ab98:	91 09       	st.w	r8[0x0],r9
8000ab9a:	f0 1f 00 11 	mcall	8000abdc <udd_ctrl_out_received+0x1ec>
8000ab9e:	18 98       	mov	r8,r12
8000aba0:	ef 48 ff f0 	st.w	r7[-16],r8
8000aba4:	fe 68 01 f0 	mov	r8,-130576
8000aba8:	31 09       	mov	r9,16
8000abaa:	91 09       	st.w	r8[0x0],r9
8000abac:	ee fc ff f0 	ld.w	r12,r7[-16]
8000abb0:	f0 1f 00 0c 	mcall	8000abe0 <udd_ctrl_out_received+0x1f0>
8000abb4:	2f cd       	sub	sp,-16
8000abb6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000abba:	00 00       	add	r0,r0
8000abbc:	00 00       	add	r0,r0
8000abbe:	08 2c       	rsub	r12,r4
8000abc0:	80 00       	ld.sh	r0,r0[0x0]
8000abc2:	ad 14       	ld.d	r4,--r6
8000abc4:	80 00       	ld.sh	r0,r0[0x0]
8000abc6:	ac 5c       	st.h	r6[0xa],r12
8000abc8:	80 00       	ld.sh	r0,r0[0x0]
8000abca:	a6 94       	st.b	r3[0x1],r4
8000abcc:	00 00       	add	r0,r0
8000abce:	0d b8       	ld.ub	r8,r6[0x3]
8000abd0:	00 00       	add	r0,r0
8000abd2:	08 32       	cp.w	r2,r4
8000abd4:	00 00       	add	r0,r0
8000abd6:	08 30       	cp.w	r0,r4
8000abd8:	80 00       	ld.sh	r0,r0[0x0]
8000abda:	ac 7c       	st.h	r6[0xe],r12
8000abdc:	80 00       	ld.sh	r0,r0[0x0]
8000abde:	95 1c       	st.w	r10[0x4],r12
8000abe0:	80 00       	ld.sh	r0,r0[0x0]
8000abe2:	95 3a       	st.w	r10[0xc],r10

8000abe4 <udd_ctrl_underflow>:
8000abe4:	eb cd 40 80 	pushm	r7,lr
8000abe8:	1a 97       	mov	r7,sp
8000abea:	fe 68 01 30 	mov	r8,-130768
8000abee:	70 08       	ld.w	r8,r8[0x0]
8000abf0:	e2 18 00 02 	andl	r8,0x2,COH
8000abf4:	c1 21       	brne	8000ac18 <udd_ctrl_underflow+0x34>
8000abf6:	48 b8       	lddpc	r8,8000ac20 <udd_ctrl_underflow+0x3c>
8000abf8:	70 08       	ld.w	r8,r8[0x0]
8000abfa:	58 18       	cp.w	r8,1
8000abfc:	c0 41       	brne	8000ac04 <udd_ctrl_underflow+0x20>
8000abfe:	f0 1f 00 0a 	mcall	8000ac24 <udd_ctrl_underflow+0x40>
8000ac02:	c0 c8       	rjmp	8000ac1a <udd_ctrl_underflow+0x36>
8000ac04:	48 78       	lddpc	r8,8000ac20 <udd_ctrl_underflow+0x3c>
8000ac06:	70 08       	ld.w	r8,r8[0x0]
8000ac08:	58 48       	cp.w	r8,4
8000ac0a:	c0 81       	brne	8000ac1a <udd_ctrl_underflow+0x36>
8000ac0c:	fe 68 01 f0 	mov	r8,-130576
8000ac10:	e8 69 00 00 	mov	r9,524288
8000ac14:	91 09       	st.w	r8[0x0],r9
8000ac16:	c0 28       	rjmp	8000ac1a <udd_ctrl_underflow+0x36>
8000ac18:	d7 03       	nop
8000ac1a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac1e:	00 00       	add	r0,r0
8000ac20:	00 00       	add	r0,r0
8000ac22:	08 2c       	rsub	r12,r4
8000ac24:	80 00       	ld.sh	r0,r0[0x0]
8000ac26:	ac 7c       	st.h	r6[0xe],r12

8000ac28 <udd_ctrl_overflow>:
8000ac28:	eb cd 40 80 	pushm	r7,lr
8000ac2c:	1a 97       	mov	r7,sp
8000ac2e:	fe 68 01 30 	mov	r8,-130768
8000ac32:	70 08       	ld.w	r8,r8[0x0]
8000ac34:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000ac38:	5c 58       	castu.b	r8
8000ac3a:	c0 b1       	brne	8000ac50 <udd_ctrl_overflow+0x28>
8000ac3c:	48 78       	lddpc	r8,8000ac58 <udd_ctrl_overflow+0x30>
8000ac3e:	70 08       	ld.w	r8,r8[0x0]
8000ac40:	58 38       	cp.w	r8,3
8000ac42:	c0 81       	brne	8000ac52 <udd_ctrl_overflow+0x2a>
8000ac44:	fe 68 01 f0 	mov	r8,-130576
8000ac48:	e8 69 00 00 	mov	r9,524288
8000ac4c:	91 09       	st.w	r8[0x0],r9
8000ac4e:	c0 28       	rjmp	8000ac52 <udd_ctrl_overflow+0x2a>
8000ac50:	d7 03       	nop
8000ac52:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac56:	00 00       	add	r0,r0
8000ac58:	00 00       	add	r0,r0
8000ac5a:	08 2c       	rsub	r12,r4

8000ac5c <udd_ctrl_stall_data>:
8000ac5c:	eb cd 40 80 	pushm	r7,lr
8000ac60:	1a 97       	mov	r7,sp
8000ac62:	48 68       	lddpc	r8,8000ac78 <udd_ctrl_stall_data+0x1c>
8000ac64:	30 59       	mov	r9,5
8000ac66:	91 09       	st.w	r8[0x0],r9
8000ac68:	fe 68 01 f0 	mov	r8,-130576
8000ac6c:	e8 69 00 00 	mov	r9,524288
8000ac70:	91 09       	st.w	r8[0x0],r9
8000ac72:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac76:	00 00       	add	r0,r0
8000ac78:	00 00       	add	r0,r0
8000ac7a:	08 2c       	rsub	r12,r4

8000ac7c <udd_ctrl_send_zlp_in>:
8000ac7c:	eb cd 40 80 	pushm	r7,lr
8000ac80:	1a 97       	mov	r7,sp
8000ac82:	20 1d       	sub	sp,4
8000ac84:	49 08       	lddpc	r8,8000acc4 <udd_ctrl_send_zlp_in+0x48>
8000ac86:	30 39       	mov	r9,3
8000ac88:	91 09       	st.w	r8[0x0],r9
8000ac8a:	f0 1f 00 10 	mcall	8000acc8 <udd_ctrl_send_zlp_in+0x4c>
8000ac8e:	18 98       	mov	r8,r12
8000ac90:	ef 48 ff fc 	st.w	r7[-4],r8
8000ac94:	fe 68 01 60 	mov	r8,-130720
8000ac98:	30 19       	mov	r9,1
8000ac9a:	91 09       	st.w	r8[0x0],r9
8000ac9c:	fe 68 01 f0 	mov	r8,-130576
8000aca0:	30 19       	mov	r9,1
8000aca2:	91 09       	st.w	r8[0x0],r9
8000aca4:	fe 68 01 60 	mov	r8,-130720
8000aca8:	30 89       	mov	r9,8
8000acaa:	91 09       	st.w	r8[0x0],r9
8000acac:	fe 68 01 f0 	mov	r8,-130576
8000acb0:	30 89       	mov	r9,8
8000acb2:	91 09       	st.w	r8[0x0],r9
8000acb4:	ee fc ff fc 	ld.w	r12,r7[-4]
8000acb8:	f0 1f 00 05 	mcall	8000accc <udd_ctrl_send_zlp_in+0x50>
8000acbc:	2f fd       	sub	sp,-4
8000acbe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000acc2:	00 00       	add	r0,r0
8000acc4:	00 00       	add	r0,r0
8000acc6:	08 2c       	rsub	r12,r4
8000acc8:	80 00       	ld.sh	r0,r0[0x0]
8000acca:	95 1c       	st.w	r10[0x4],r12
8000accc:	80 00       	ld.sh	r0,r0[0x0]
8000acce:	95 3a       	st.w	r10[0xc],r10

8000acd0 <udd_ctrl_send_zlp_out>:
8000acd0:	eb cd 40 80 	pushm	r7,lr
8000acd4:	1a 97       	mov	r7,sp
8000acd6:	20 1d       	sub	sp,4
8000acd8:	48 c8       	lddpc	r8,8000ad08 <udd_ctrl_send_zlp_out+0x38>
8000acda:	30 49       	mov	r9,4
8000acdc:	91 09       	st.w	r8[0x0],r9
8000acde:	f0 1f 00 0c 	mcall	8000ad0c <udd_ctrl_send_zlp_out+0x3c>
8000ace2:	18 98       	mov	r8,r12
8000ace4:	ef 48 ff fc 	st.w	r7[-4],r8
8000ace8:	fe 68 01 60 	mov	r8,-130720
8000acec:	31 09       	mov	r9,16
8000acee:	91 09       	st.w	r8[0x0],r9
8000acf0:	fe 68 01 f0 	mov	r8,-130576
8000acf4:	31 09       	mov	r9,16
8000acf6:	91 09       	st.w	r8[0x0],r9
8000acf8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000acfc:	f0 1f 00 05 	mcall	8000ad10 <udd_ctrl_send_zlp_out+0x40>
8000ad00:	2f fd       	sub	sp,-4
8000ad02:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ad06:	00 00       	add	r0,r0
8000ad08:	00 00       	add	r0,r0
8000ad0a:	08 2c       	rsub	r12,r4
8000ad0c:	80 00       	ld.sh	r0,r0[0x0]
8000ad0e:	95 1c       	st.w	r10[0x4],r12
8000ad10:	80 00       	ld.sh	r0,r0[0x0]
8000ad12:	95 3a       	st.w	r10[0xc],r10

8000ad14 <udd_ctrl_endofrequest>:
8000ad14:	eb cd 40 80 	pushm	r7,lr
8000ad18:	1a 97       	mov	r7,sp
8000ad1a:	48 58       	lddpc	r8,8000ad2c <udd_ctrl_endofrequest+0x18>
8000ad1c:	70 48       	ld.w	r8,r8[0x10]
8000ad1e:	58 08       	cp.w	r8,0
8000ad20:	c0 40       	breq	8000ad28 <udd_ctrl_endofrequest+0x14>
8000ad22:	48 38       	lddpc	r8,8000ad2c <udd_ctrl_endofrequest+0x18>
8000ad24:	70 48       	ld.w	r8,r8[0x10]
8000ad26:	5d 18       	icall	r8
8000ad28:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ad2c:	00 00       	add	r0,r0
8000ad2e:	0d b8       	ld.ub	r8,r6[0x3]

8000ad30 <udd_ctrl_interrupt>:
8000ad30:	eb cd 40 80 	pushm	r7,lr
8000ad34:	1a 97       	mov	r7,sp
8000ad36:	fe 68 00 00 	mov	r8,-131072
8000ad3a:	70 18       	ld.w	r8,r8[0x4]
8000ad3c:	e2 18 10 00 	andl	r8,0x1000,COH
8000ad40:	c0 31       	brne	8000ad46 <udd_ctrl_interrupt+0x16>
8000ad42:	30 08       	mov	r8,0
8000ad44:	c4 c8       	rjmp	8000addc <udd_ctrl_interrupt+0xac>
8000ad46:	fe 68 02 20 	mov	r8,-130528
8000ad4a:	31 09       	mov	r9,16
8000ad4c:	91 09       	st.w	r8[0x0],r9
8000ad4e:	fe 68 02 20 	mov	r8,-130528
8000ad52:	30 89       	mov	r9,8
8000ad54:	91 09       	st.w	r8[0x0],r9
8000ad56:	fe 68 01 30 	mov	r8,-130768
8000ad5a:	70 08       	ld.w	r8,r8[0x0]
8000ad5c:	e2 18 00 04 	andl	r8,0x4,COH
8000ad60:	c0 50       	breq	8000ad6a <udd_ctrl_interrupt+0x3a>
8000ad62:	f0 1f 00 21 	mcall	8000ade4 <udd_ctrl_interrupt+0xb4>
8000ad66:	30 18       	mov	r8,1
8000ad68:	c3 a8       	rjmp	8000addc <udd_ctrl_interrupt+0xac>
8000ad6a:	fe 68 01 30 	mov	r8,-130768
8000ad6e:	70 08       	ld.w	r8,r8[0x0]
8000ad70:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000ad74:	5c 58       	castu.b	r8
8000ad76:	c0 c0       	breq	8000ad8e <udd_ctrl_interrupt+0x5e>
8000ad78:	fe 68 01 c0 	mov	r8,-130624
8000ad7c:	70 08       	ld.w	r8,r8[0x0]
8000ad7e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000ad82:	5c 58       	castu.b	r8
8000ad84:	c0 50       	breq	8000ad8e <udd_ctrl_interrupt+0x5e>
8000ad86:	f0 1f 00 19 	mcall	8000ade8 <udd_ctrl_interrupt+0xb8>
8000ad8a:	30 18       	mov	r8,1
8000ad8c:	c2 88       	rjmp	8000addc <udd_ctrl_interrupt+0xac>
8000ad8e:	fe 68 01 30 	mov	r8,-130768
8000ad92:	70 08       	ld.w	r8,r8[0x0]
8000ad94:	e2 18 00 02 	andl	r8,0x2,COH
8000ad98:	c0 50       	breq	8000ada2 <udd_ctrl_interrupt+0x72>
8000ad9a:	f0 1f 00 15 	mcall	8000adec <udd_ctrl_interrupt+0xbc>
8000ad9e:	30 18       	mov	r8,1
8000ada0:	c1 e8       	rjmp	8000addc <udd_ctrl_interrupt+0xac>
8000ada2:	fe 68 01 30 	mov	r8,-130768
8000ada6:	70 08       	ld.w	r8,r8[0x0]
8000ada8:	e2 18 00 08 	andl	r8,0x8,COH
8000adac:	c0 90       	breq	8000adbe <udd_ctrl_interrupt+0x8e>
8000adae:	fe 68 01 60 	mov	r8,-130720
8000adb2:	30 89       	mov	r9,8
8000adb4:	91 09       	st.w	r8[0x0],r9
8000adb6:	f0 1f 00 0f 	mcall	8000adf0 <udd_ctrl_interrupt+0xc0>
8000adba:	30 18       	mov	r8,1
8000adbc:	c1 08       	rjmp	8000addc <udd_ctrl_interrupt+0xac>
8000adbe:	fe 68 01 30 	mov	r8,-130768
8000adc2:	70 08       	ld.w	r8,r8[0x0]
8000adc4:	e2 18 00 10 	andl	r8,0x10,COH
8000adc8:	c0 90       	breq	8000adda <udd_ctrl_interrupt+0xaa>
8000adca:	fe 68 01 60 	mov	r8,-130720
8000adce:	31 09       	mov	r9,16
8000add0:	91 09       	st.w	r8[0x0],r9
8000add2:	f0 1f 00 09 	mcall	8000adf4 <udd_ctrl_interrupt+0xc4>
8000add6:	30 18       	mov	r8,1
8000add8:	c0 28       	rjmp	8000addc <udd_ctrl_interrupt+0xac>
8000adda:	30 08       	mov	r8,0
8000addc:	10 9c       	mov	r12,r8
8000adde:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ade2:	00 00       	add	r0,r0
8000ade4:	80 00       	ld.sh	r0,r0[0x0]
8000ade6:	a6 ec       	st.b	r3[0x6],r12
8000ade8:	80 00       	ld.sh	r0,r0[0x0]
8000adea:	a8 50       	st.h	r4[0xa],r0
8000adec:	80 00       	ld.sh	r0,r0[0x0]
8000adee:	a9 f0       	*unknown*
8000adf0:	80 00       	ld.sh	r0,r0[0x0]
8000adf2:	ac 28       	st.h	r6[0x4],r8
8000adf4:	80 00       	ld.sh	r0,r0[0x0]
8000adf6:	ab e4       	*unknown*

8000adf8 <udd_ep_job_table_reset>:
8000adf8:	eb cd 40 80 	pushm	r7,lr
8000adfc:	1a 97       	mov	r7,sp
8000adfe:	20 1d       	sub	sp,4
8000ae00:	30 08       	mov	r8,0
8000ae02:	ef 68 ff ff 	st.b	r7[-1],r8
8000ae06:	c2 28       	rjmp	8000ae4a <udd_ep_job_table_reset+0x52>
8000ae08:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ae0c:	49 5a       	lddpc	r10,8000ae60 <udd_ep_job_table_reset+0x68>
8000ae0e:	12 98       	mov	r8,r9
8000ae10:	a3 68       	lsl	r8,0x2
8000ae12:	12 08       	add	r8,r9
8000ae14:	a3 68       	lsl	r8,0x2
8000ae16:	f4 08 00 09 	add	r9,r10,r8
8000ae1a:	72 08       	ld.w	r8,r9[0x0]
8000ae1c:	30 0a       	mov	r10,0
8000ae1e:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000ae22:	93 08       	st.w	r9[0x0],r8
8000ae24:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ae28:	48 ea       	lddpc	r10,8000ae60 <udd_ep_job_table_reset+0x68>
8000ae2a:	12 98       	mov	r8,r9
8000ae2c:	a3 68       	lsl	r8,0x2
8000ae2e:	12 08       	add	r8,r9
8000ae30:	a3 68       	lsl	r8,0x2
8000ae32:	f4 08 00 09 	add	r9,r10,r8
8000ae36:	72 08       	ld.w	r8,r9[0x0]
8000ae38:	30 0a       	mov	r10,0
8000ae3a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000ae3e:	93 08       	st.w	r9[0x0],r8
8000ae40:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ae44:	2f f8       	sub	r8,-1
8000ae46:	ef 68 ff ff 	st.b	r7[-1],r8
8000ae4a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ae4e:	30 18       	mov	r8,1
8000ae50:	f0 09 18 00 	cp.b	r9,r8
8000ae54:	fe 98 ff da 	brls	8000ae08 <udd_ep_job_table_reset+0x10>
8000ae58:	2f fd       	sub	sp,-4
8000ae5a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ae5e:	00 00       	add	r0,r0
8000ae60:	00 00       	add	r0,r0
8000ae62:	08 34       	cp.w	r4,r4

8000ae64 <udd_ep_job_table_kill>:
8000ae64:	eb cd 40 80 	pushm	r7,lr
8000ae68:	1a 97       	mov	r7,sp
8000ae6a:	20 1d       	sub	sp,4
8000ae6c:	30 08       	mov	r8,0
8000ae6e:	ef 68 ff ff 	st.b	r7[-1],r8
8000ae72:	c1 98       	rjmp	8000aea4 <udd_ep_job_table_kill+0x40>
8000ae74:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ae78:	2f f8       	sub	r8,-1
8000ae7a:	5c 58       	castu.b	r8
8000ae7c:	10 9a       	mov	r10,r8
8000ae7e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ae82:	12 98       	mov	r8,r9
8000ae84:	a3 68       	lsl	r8,0x2
8000ae86:	12 08       	add	r8,r9
8000ae88:	a3 68       	lsl	r8,0x2
8000ae8a:	10 99       	mov	r9,r8
8000ae8c:	48 b8       	lddpc	r8,8000aeb8 <udd_ep_job_table_kill+0x54>
8000ae8e:	f2 08 00 08 	add	r8,r9,r8
8000ae92:	30 1b       	mov	r11,1
8000ae94:	10 9c       	mov	r12,r8
8000ae96:	f0 1f 00 0a 	mcall	8000aebc <udd_ep_job_table_kill+0x58>
8000ae9a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ae9e:	2f f8       	sub	r8,-1
8000aea0:	ef 68 ff ff 	st.b	r7[-1],r8
8000aea4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000aea8:	30 18       	mov	r8,1
8000aeaa:	f0 09 18 00 	cp.b	r9,r8
8000aeae:	fe 98 ff e3 	brls	8000ae74 <udd_ep_job_table_kill+0x10>
8000aeb2:	2f fd       	sub	sp,-4
8000aeb4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aeb8:	00 00       	add	r0,r0
8000aeba:	08 34       	cp.w	r4,r4
8000aebc:	80 00       	ld.sh	r0,r0[0x0]
8000aebe:	af 0c       	ld.d	r12,r7

8000aec0 <udd_ep_abort_job>:
8000aec0:	eb cd 40 80 	pushm	r7,lr
8000aec4:	1a 97       	mov	r7,sp
8000aec6:	20 1d       	sub	sp,4
8000aec8:	18 98       	mov	r8,r12
8000aeca:	ef 68 ff fc 	st.b	r7[-4],r8
8000aece:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000aed2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000aed6:	ef 68 ff fc 	st.b	r7[-4],r8
8000aeda:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000aede:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000aee2:	f0 c9 00 01 	sub	r9,r8,1
8000aee6:	12 98       	mov	r8,r9
8000aee8:	a3 68       	lsl	r8,0x2
8000aeea:	12 08       	add	r8,r9
8000aeec:	a3 68       	lsl	r8,0x2
8000aeee:	10 99       	mov	r9,r8
8000aef0:	48 58       	lddpc	r8,8000af04 <udd_ep_abort_job+0x44>
8000aef2:	f2 08 00 08 	add	r8,r9,r8
8000aef6:	30 1b       	mov	r11,1
8000aef8:	10 9c       	mov	r12,r8
8000aefa:	f0 1f 00 04 	mcall	8000af08 <udd_ep_abort_job+0x48>
8000aefe:	2f fd       	sub	sp,-4
8000af00:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af04:	00 00       	add	r0,r0
8000af06:	08 34       	cp.w	r4,r4
8000af08:	80 00       	ld.sh	r0,r0[0x0]
8000af0a:	af 0c       	ld.d	r12,r7

8000af0c <udd_ep_finish_job>:
8000af0c:	eb cd 40 80 	pushm	r7,lr
8000af10:	1a 97       	mov	r7,sp
8000af12:	20 3d       	sub	sp,12
8000af14:	ef 4c ff fc 	st.w	r7[-4],r12
8000af18:	16 99       	mov	r9,r11
8000af1a:	14 98       	mov	r8,r10
8000af1c:	ef 69 ff f8 	st.b	r7[-8],r9
8000af20:	ef 68 ff f4 	st.b	r7[-12],r8
8000af24:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af28:	70 08       	ld.w	r8,r8[0x0]
8000af2a:	e6 18 80 00 	andh	r8,0x8000,COH
8000af2e:	c2 b0       	breq	8000af84 <udd_ep_finish_job+0x78>
8000af30:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af34:	72 08       	ld.w	r8,r9[0x0]
8000af36:	30 0a       	mov	r10,0
8000af38:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000af3c:	93 08       	st.w	r9[0x0],r8
8000af3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af42:	70 48       	ld.w	r8,r8[0x10]
8000af44:	58 08       	cp.w	r8,0
8000af46:	c2 10       	breq	8000af88 <udd_ep_finish_job+0x7c>
8000af48:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000af4c:	a3 68       	lsl	r8,0x2
8000af4e:	e0 38 ff 00 	sub	r8,130816
8000af52:	70 08       	ld.w	r8,r8[0x0]
8000af54:	e2 18 01 00 	andl	r8,0x100,COH
8000af58:	c0 90       	breq	8000af6a <udd_ep_finish_job+0x5e>
8000af5a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000af5e:	ea 18 ff ff 	orh	r8,0xffff
8000af62:	e8 18 ff 80 	orl	r8,0xff80
8000af66:	ef 68 ff f4 	st.b	r7[-12],r8
8000af6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af6e:	70 48       	ld.w	r8,r8[0x10]
8000af70:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000af74:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af78:	72 2b       	ld.w	r11,r9[0x8]
8000af7a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000af7e:	12 9c       	mov	r12,r9
8000af80:	5d 18       	icall	r8
8000af82:	c0 48       	rjmp	8000af8a <udd_ep_finish_job+0x7e>
8000af84:	d7 03       	nop
8000af86:	c0 28       	rjmp	8000af8a <udd_ep_finish_job+0x7e>
8000af88:	d7 03       	nop
8000af8a:	2f dd       	sub	sp,-12
8000af8c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000af90 <udd_ep_trans_done>:
8000af90:	eb cd 40 80 	pushm	r7,lr
8000af94:	1a 97       	mov	r7,sp
8000af96:	20 5d       	sub	sp,20
8000af98:	18 98       	mov	r8,r12
8000af9a:	ef 68 ff ec 	st.b	r7[-20],r8
8000af9e:	30 08       	mov	r8,0
8000afa0:	ef 48 ff f0 	st.w	r7[-16],r8
8000afa4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000afa8:	f0 c9 00 01 	sub	r9,r8,1
8000afac:	12 98       	mov	r8,r9
8000afae:	a3 68       	lsl	r8,0x2
8000afb0:	12 08       	add	r8,r9
8000afb2:	a3 68       	lsl	r8,0x2
8000afb4:	10 99       	mov	r9,r8
8000afb6:	fe f8 02 1e 	ld.w	r8,pc[542]
8000afba:	f2 08 00 08 	add	r8,r9,r8
8000afbe:	ef 48 ff f4 	st.w	r7[-12],r8
8000afc2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000afc6:	70 08       	ld.w	r8,r8[0x0]
8000afc8:	e6 18 80 00 	andh	r8,0x8000,COH
8000afcc:	e0 80 01 00 	breq	8000b1cc <udd_ep_trans_done+0x23c>
8000afd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000afd4:	70 39       	ld.w	r9,r8[0xc]
8000afd6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000afda:	70 28       	ld.w	r8,r8[0x8]
8000afdc:	10 39       	cp.w	r9,r8
8000afde:	e0 80 00 b7 	breq	8000b14c <udd_ep_trans_done+0x1bc>
8000afe2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000afe6:	70 29       	ld.w	r9,r8[0x8]
8000afe8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000afec:	70 38       	ld.w	r8,r8[0xc]
8000afee:	10 19       	sub	r9,r8
8000aff0:	ef 49 ff f8 	st.w	r7[-8],r9
8000aff4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aff8:	e0 58 00 00 	cp.w	r8,65536
8000affc:	e0 88 00 0a 	brls	8000b010 <udd_ep_trans_done+0x80>
8000b000:	e0 78 00 00 	mov	r8,65536
8000b004:	ef 48 ff f8 	st.w	r7[-8],r8
8000b008:	30 08       	mov	r8,0
8000b00a:	ef 48 ff f0 	st.w	r7[-16],r8
8000b00e:	c0 68       	rjmp	8000b01a <udd_ep_trans_done+0x8a>
8000b010:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b014:	b1 68       	lsl	r8,0x10
8000b016:	ef 48 ff f0 	st.w	r7[-16],r8
8000b01a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b01e:	a3 68       	lsl	r8,0x2
8000b020:	e0 38 ff 00 	sub	r8,130816
8000b024:	70 08       	ld.w	r8,r8[0x0]
8000b026:	e2 18 01 00 	andl	r8,0x100,COH
8000b02a:	c2 10       	breq	8000b06c <udd_ep_trans_done+0xdc>
8000b02c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b030:	a3 68       	lsl	r8,0x2
8000b032:	e0 38 ff 00 	sub	r8,130816
8000b036:	70 08       	ld.w	r8,r8[0x0]
8000b038:	e2 18 00 70 	andl	r8,0x70,COH
8000b03c:	a5 88       	lsr	r8,0x4
8000b03e:	30 89       	mov	r9,8
8000b040:	f2 08 09 48 	lsl	r8,r9,r8
8000b044:	20 18       	sub	r8,1
8000b046:	10 99       	mov	r9,r8
8000b048:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b04c:	f3 e8 00 08 	and	r8,r9,r8
8000b050:	c3 10       	breq	8000b0b2 <udd_ep_trans_done+0x122>
8000b052:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b056:	a3 b8       	sbr	r8,0x3
8000b058:	ef 48 ff f0 	st.w	r7[-16],r8
8000b05c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b060:	72 08       	ld.w	r8,r9[0x0]
8000b062:	30 0a       	mov	r10,0
8000b064:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000b068:	93 08       	st.w	r9[0x0],r8
8000b06a:	c2 58       	rjmp	8000b0b4 <udd_ep_trans_done+0x124>
8000b06c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b070:	a3 68       	lsl	r8,0x2
8000b072:	e0 38 ff 00 	sub	r8,130816
8000b076:	70 08       	ld.w	r8,r8[0x0]
8000b078:	e2 18 18 00 	andl	r8,0x1800,COH
8000b07c:	ab 98       	lsr	r8,0xb
8000b07e:	58 18       	cp.w	r8,1
8000b080:	c1 21       	brne	8000b0a4 <udd_ep_trans_done+0x114>
8000b082:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b086:	a3 68       	lsl	r8,0x2
8000b088:	e0 38 ff 00 	sub	r8,130816
8000b08c:	70 08       	ld.w	r8,r8[0x0]
8000b08e:	e2 18 00 70 	andl	r8,0x70,COH
8000b092:	a5 88       	lsr	r8,0x4
8000b094:	30 89       	mov	r9,8
8000b096:	f2 08 09 48 	lsl	r8,r9,r8
8000b09a:	10 99       	mov	r9,r8
8000b09c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0a0:	10 39       	cp.w	r9,r8
8000b0a2:	c0 93       	brcs	8000b0b4 <udd_ep_trans_done+0x124>
8000b0a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b0a8:	e8 18 00 14 	orl	r8,0x14
8000b0ac:	ef 48 ff f0 	st.w	r7[-16],r8
8000b0b0:	c0 28       	rjmp	8000b0b4 <udd_ep_trans_done+0x124>
8000b0b2:	d7 03       	nop
8000b0b4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b0b8:	a5 68       	lsl	r8,0x4
8000b0ba:	e0 38 fd 00 	sub	r8,130304
8000b0be:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b0c2:	72 1a       	ld.w	r10,r9[0x4]
8000b0c4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b0c8:	72 39       	ld.w	r9,r9[0xc]
8000b0ca:	f4 09 00 09 	add	r9,r10,r9
8000b0ce:	91 19       	st.w	r8[0x4],r9
8000b0d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b0d4:	e8 18 00 21 	orl	r8,0x21
8000b0d8:	ef 48 ff f0 	st.w	r7[-16],r8
8000b0dc:	f0 1f 00 3f 	mcall	8000b1d8 <udd_ep_trans_done+0x248>
8000b0e0:	18 98       	mov	r8,r12
8000b0e2:	ef 48 ff fc 	st.w	r7[-4],r8
8000b0e6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b0ea:	a5 68       	lsl	r8,0x4
8000b0ec:	e0 38 fd 00 	sub	r8,130304
8000b0f0:	70 38       	ld.w	r8,r8[0xc]
8000b0f2:	e2 18 00 10 	andl	r8,0x10,COH
8000b0f6:	c2 11       	brne	8000b138 <udd_ep_trans_done+0x1a8>
8000b0f8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b0fc:	a5 68       	lsl	r8,0x4
8000b0fe:	e0 38 fd 00 	sub	r8,130304
8000b102:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000b106:	91 29       	st.w	r8[0x8],r9
8000b108:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b10c:	70 39       	ld.w	r9,r8[0xc]
8000b10e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b112:	10 09       	add	r9,r8
8000b114:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b118:	91 39       	st.w	r8[0xc],r9
8000b11a:	fe 68 00 00 	mov	r8,-131072
8000b11e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b122:	20 19       	sub	r9,1
8000b124:	fc 1a 02 00 	movh	r10,0x200
8000b128:	f4 09 09 49 	lsl	r9,r10,r9
8000b12c:	91 69       	st.w	r8[0x18],r9
8000b12e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b132:	f0 1f 00 2b 	mcall	8000b1dc <udd_ep_trans_done+0x24c>
8000b136:	c4 c8       	rjmp	8000b1ce <udd_ep_trans_done+0x23e>
8000b138:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b13c:	f0 1f 00 28 	mcall	8000b1dc <udd_ep_trans_done+0x24c>
8000b140:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b144:	70 39       	ld.w	r9,r8[0xc]
8000b146:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b14a:	91 29       	st.w	r8[0x8],r9
8000b14c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b150:	a3 68       	lsl	r8,0x2
8000b152:	e0 38 ff 00 	sub	r8,130816
8000b156:	70 08       	ld.w	r8,r8[0x0]
8000b158:	e2 18 01 00 	andl	r8,0x100,COH
8000b15c:	c2 f0       	breq	8000b1ba <udd_ep_trans_done+0x22a>
8000b15e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b162:	70 08       	ld.w	r8,r8[0x0]
8000b164:	e6 18 40 00 	andh	r8,0x4000,COH
8000b168:	c2 90       	breq	8000b1ba <udd_ep_trans_done+0x22a>
8000b16a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b16e:	a3 68       	lsl	r8,0x2
8000b170:	e0 38 fe a0 	sub	r8,130720
8000b174:	30 19       	mov	r9,1
8000b176:	91 09       	st.w	r8[0x0],r9
8000b178:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b17c:	a3 68       	lsl	r8,0x2
8000b17e:	e0 38 fe d0 	sub	r8,130768
8000b182:	70 08       	ld.w	r8,r8[0x0]
8000b184:	e6 18 00 01 	andh	r8,0x1,COH
8000b188:	c0 80       	breq	8000b198 <udd_ep_trans_done+0x208>
8000b18a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b18e:	a3 68       	lsl	r8,0x2
8000b190:	e0 38 fe 70 	sub	r8,130672
8000b194:	30 19       	mov	r9,1
8000b196:	91 09       	st.w	r8[0x0],r9
8000b198:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b19c:	a3 68       	lsl	r8,0x2
8000b19e:	e0 38 fe 10 	sub	r8,130576
8000b1a2:	30 19       	mov	r9,1
8000b1a4:	91 09       	st.w	r8[0x0],r9
8000b1a6:	fe 68 00 00 	mov	r8,-131072
8000b1aa:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b1ae:	e0 6a 10 00 	mov	r10,4096
8000b1b2:	f4 09 09 49 	lsl	r9,r10,r9
8000b1b6:	91 69       	st.w	r8[0x18],r9
8000b1b8:	c0 b8       	rjmp	8000b1ce <udd_ep_trans_done+0x23e>
8000b1ba:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b1be:	10 9a       	mov	r10,r8
8000b1c0:	30 0b       	mov	r11,0
8000b1c2:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b1c6:	f0 1f 00 07 	mcall	8000b1e0 <udd_ep_trans_done+0x250>
8000b1ca:	c0 28       	rjmp	8000b1ce <udd_ep_trans_done+0x23e>
8000b1cc:	d7 03       	nop
8000b1ce:	2f bd       	sub	sp,-20
8000b1d0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b1d4:	00 00       	add	r0,r0
8000b1d6:	08 34       	cp.w	r4,r4
8000b1d8:	80 00       	ld.sh	r0,r0[0x0]
8000b1da:	95 1c       	st.w	r10[0x4],r12
8000b1dc:	80 00       	ld.sh	r0,r0[0x0]
8000b1de:	95 3a       	st.w	r10[0xc],r10
8000b1e0:	80 00       	ld.sh	r0,r0[0x0]
8000b1e2:	af 0c       	ld.d	r12,r7

8000b1e4 <udd_ep_interrupt>:
8000b1e4:	eb cd 40 80 	pushm	r7,lr
8000b1e8:	1a 97       	mov	r7,sp
8000b1ea:	20 3d       	sub	sp,12
8000b1ec:	30 18       	mov	r8,1
8000b1ee:	ef 68 ff f7 	st.b	r7[-9],r8
8000b1f2:	cf 18       	rjmp	8000b3d4 <udd_ep_interrupt+0x1f0>
8000b1f4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b1f8:	f0 c9 00 01 	sub	r9,r8,1
8000b1fc:	12 98       	mov	r8,r9
8000b1fe:	a3 68       	lsl	r8,0x2
8000b200:	12 08       	add	r8,r9
8000b202:	a3 68       	lsl	r8,0x2
8000b204:	10 99       	mov	r9,r8
8000b206:	4f a8       	lddpc	r8,8000b3ec <udd_ep_interrupt+0x208>
8000b208:	f2 08 00 08 	add	r8,r9,r8
8000b20c:	ef 48 ff f8 	st.w	r7[-8],r8
8000b210:	fe 68 00 00 	mov	r8,-131072
8000b214:	70 49       	ld.w	r9,r8[0x10]
8000b216:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b21a:	20 18       	sub	r8,1
8000b21c:	fc 1a 02 00 	movh	r10,0x200
8000b220:	f4 08 09 48 	lsl	r8,r10,r8
8000b224:	f3 e8 00 08 	and	r8,r9,r8
8000b228:	c4 70       	breq	8000b2b6 <udd_ep_interrupt+0xd2>
8000b22a:	fe 68 00 00 	mov	r8,-131072
8000b22e:	70 19       	ld.w	r9,r8[0x4]
8000b230:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b234:	20 18       	sub	r8,1
8000b236:	fc 1a 02 00 	movh	r10,0x200
8000b23a:	f4 08 09 48 	lsl	r8,r10,r8
8000b23e:	f3 e8 00 08 	and	r8,r9,r8
8000b242:	c3 a0       	breq	8000b2b6 <udd_ep_interrupt+0xd2>
8000b244:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b248:	a5 68       	lsl	r8,0x4
8000b24a:	e0 38 fd 00 	sub	r8,130304
8000b24e:	70 38       	ld.w	r8,r8[0xc]
8000b250:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b254:	5c 58       	castu.b	r8
8000b256:	c0 30       	breq	8000b25c <udd_ep_interrupt+0x78>
8000b258:	30 18       	mov	r8,1
8000b25a:	cc 58       	rjmp	8000b3e4 <udd_ep_interrupt+0x200>
8000b25c:	fe 68 00 00 	mov	r8,-131072
8000b260:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b264:	20 19       	sub	r9,1
8000b266:	fc 1a 02 00 	movh	r10,0x200
8000b26a:	f4 09 09 49 	lsl	r9,r10,r9
8000b26e:	91 59       	st.w	r8[0x14],r9
8000b270:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b274:	a5 68       	lsl	r8,0x4
8000b276:	e0 38 fd 00 	sub	r8,130304
8000b27a:	70 38       	ld.w	r8,r8[0xc]
8000b27c:	b1 88       	lsr	r8,0x10
8000b27e:	ef 48 ff fc 	st.w	r7[-4],r8
8000b282:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b286:	58 08       	cp.w	r8,0
8000b288:	c1 00       	breq	8000b2a8 <udd_ep_interrupt+0xc4>
8000b28a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b28e:	70 39       	ld.w	r9,r8[0xc]
8000b290:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b294:	10 19       	sub	r9,r8
8000b296:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b29a:	91 39       	st.w	r8[0xc],r9
8000b29c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b2a0:	70 39       	ld.w	r9,r8[0xc]
8000b2a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b2a6:	91 29       	st.w	r8[0x8],r9
8000b2a8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b2ac:	10 9c       	mov	r12,r8
8000b2ae:	f0 1f 00 51 	mcall	8000b3f0 <udd_ep_interrupt+0x20c>
8000b2b2:	30 18       	mov	r8,1
8000b2b4:	c9 88       	rjmp	8000b3e4 <udd_ep_interrupt+0x200>
8000b2b6:	fe 68 00 00 	mov	r8,-131072
8000b2ba:	70 49       	ld.w	r9,r8[0x10]
8000b2bc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b2c0:	e0 6a 10 00 	mov	r10,4096
8000b2c4:	f4 08 09 48 	lsl	r8,r10,r8
8000b2c8:	f3 e8 00 08 	and	r8,r9,r8
8000b2cc:	c7 f0       	breq	8000b3ca <udd_ep_interrupt+0x1e6>
8000b2ce:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b2d2:	a3 68       	lsl	r8,0x2
8000b2d4:	e0 38 fe 40 	sub	r8,130624
8000b2d8:	70 08       	ld.w	r8,r8[0x0]
8000b2da:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b2de:	5c 58       	castu.b	r8
8000b2e0:	c2 b0       	breq	8000b336 <udd_ep_interrupt+0x152>
8000b2e2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b2e6:	a3 68       	lsl	r8,0x2
8000b2e8:	e0 38 fe d0 	sub	r8,130768
8000b2ec:	70 08       	ld.w	r8,r8[0x0]
8000b2ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b2f2:	5c 58       	castu.b	r8
8000b2f4:	c2 10       	breq	8000b336 <udd_ep_interrupt+0x152>
8000b2f6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b2fa:	a3 68       	lsl	r8,0x2
8000b2fc:	e0 38 fd e0 	sub	r8,130528
8000b300:	30 19       	mov	r9,1
8000b302:	91 09       	st.w	r8[0x0],r9
8000b304:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b308:	a3 68       	lsl	r8,0x2
8000b30a:	e0 38 fe a0 	sub	r8,130720
8000b30e:	30 19       	mov	r9,1
8000b310:	91 09       	st.w	r8[0x0],r9
8000b312:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b316:	a3 68       	lsl	r8,0x2
8000b318:	e0 38 fd e0 	sub	r8,130528
8000b31c:	e0 69 40 00 	mov	r9,16384
8000b320:	91 09       	st.w	r8[0x0],r9
8000b322:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b326:	10 9a       	mov	r10,r8
8000b328:	30 0b       	mov	r11,0
8000b32a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b32e:	f0 1f 00 32 	mcall	8000b3f4 <udd_ep_interrupt+0x210>
8000b332:	30 18       	mov	r8,1
8000b334:	c5 88       	rjmp	8000b3e4 <udd_ep_interrupt+0x200>
8000b336:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b33a:	a3 68       	lsl	r8,0x2
8000b33c:	e0 38 fe 40 	sub	r8,130624
8000b340:	70 08       	ld.w	r8,r8[0x0]
8000b342:	e2 18 10 00 	andl	r8,0x1000,COH
8000b346:	c4 20       	breq	8000b3ca <udd_ep_interrupt+0x1e6>
8000b348:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b34c:	a3 68       	lsl	r8,0x2
8000b34e:	e0 38 fe d0 	sub	r8,130768
8000b352:	70 08       	ld.w	r8,r8[0x0]
8000b354:	e2 18 30 00 	andl	r8,0x3000,COH
8000b358:	ad 88       	lsr	r8,0xc
8000b35a:	c3 81       	brne	8000b3ca <udd_ep_interrupt+0x1e6>
8000b35c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b360:	a3 68       	lsl	r8,0x2
8000b362:	e0 38 fd e0 	sub	r8,130528
8000b366:	e0 69 10 00 	mov	r9,4096
8000b36a:	91 09       	st.w	r8[0x0],r9
8000b36c:	fe 68 00 00 	mov	r8,-131072
8000b370:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b374:	e0 6a 10 00 	mov	r10,4096
8000b378:	f4 09 09 49 	lsl	r9,r10,r9
8000b37c:	91 59       	st.w	r8[0x14],r9
8000b37e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b382:	72 08       	ld.w	r8,r9[0x0]
8000b384:	30 0a       	mov	r10,0
8000b386:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000b38a:	93 08       	st.w	r9[0x0],r8
8000b38c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b390:	a3 68       	lsl	r8,0x2
8000b392:	e0 38 ff 00 	sub	r8,130816
8000b396:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b39a:	a3 69       	lsl	r9,0x2
8000b39c:	e0 39 ff 00 	sub	r9,130816
8000b3a0:	72 09       	ld.w	r9,r9[0x0]
8000b3a2:	a9 d9       	cbr	r9,0x9
8000b3a4:	91 09       	st.w	r8[0x0],r9
8000b3a6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b3aa:	a3 68       	lsl	r8,0x2
8000b3ac:	e0 38 fe 10 	sub	r8,130576
8000b3b0:	e8 69 00 00 	mov	r9,524288
8000b3b4:	91 09       	st.w	r8[0x0],r9
8000b3b6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b3ba:	a3 68       	lsl	r8,0x2
8000b3bc:	e0 38 fe 10 	sub	r8,130576
8000b3c0:	e4 69 00 00 	mov	r9,262144
8000b3c4:	91 09       	st.w	r8[0x0],r9
8000b3c6:	30 18       	mov	r8,1
8000b3c8:	c0 e8       	rjmp	8000b3e4 <udd_ep_interrupt+0x200>
8000b3ca:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b3ce:	2f f8       	sub	r8,-1
8000b3d0:	ef 68 ff f7 	st.b	r7[-9],r8
8000b3d4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b3d8:	30 28       	mov	r8,2
8000b3da:	f0 09 18 00 	cp.b	r9,r8
8000b3de:	fe 98 ff 0b 	brls	8000b1f4 <udd_ep_interrupt+0x10>
8000b3e2:	30 08       	mov	r8,0
8000b3e4:	10 9c       	mov	r12,r8
8000b3e6:	2f dd       	sub	sp,-12
8000b3e8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b3ec:	00 00       	add	r0,r0
8000b3ee:	08 34       	cp.w	r4,r4
8000b3f0:	80 00       	ld.sh	r0,r0[0x0]
8000b3f2:	af 90       	lsr	r0,0xf
8000b3f4:	80 00       	ld.sh	r0,r0[0x0]
8000b3f6:	af 0c       	ld.d	r12,r7

8000b3f8 <_stext>:
8000b3f8:	e0 7d 00 00 	mov	sp,65536
8000b3fc:	fe c0 cd fc 	sub	r0,pc,-12804
8000b400:	e3 b0 00 01 	mtsr	0x4,r0
8000b404:	d5 53       	csrf	0x15
8000b406:	30 80       	mov	r0,8
8000b408:	e0 61 02 40 	mov	r1,576
8000b40c:	02 30       	cp.w	r0,r1
8000b40e:	c0 72       	brcc	8000b41c <idata_load_loop_end>
8000b410:	fe c2 c4 48 	sub	r2,pc,-15288

8000b414 <idata_load_loop>:
8000b414:	a5 05       	ld.d	r4,r2++
8000b416:	a1 24       	st.d	r0++,r4
8000b418:	02 30       	cp.w	r0,r1
8000b41a:	cf d3       	brcs	8000b414 <idata_load_loop>

8000b41c <idata_load_loop_end>:
8000b41c:	e0 60 02 40 	mov	r0,576
8000b420:	e0 61 0d d8 	mov	r1,3544
8000b424:	02 30       	cp.w	r0,r1
8000b426:	c0 62       	brcc	8000b432 <udata_clear_loop_end>
8000b428:	30 02       	mov	r2,0
8000b42a:	30 03       	mov	r3,0

8000b42c <udata_clear_loop>:
8000b42c:	a1 22       	st.d	r0++,r2
8000b42e:	02 30       	cp.w	r0,r1
8000b430:	cf e3       	brcs	8000b42c <udata_clear_loop>

8000b432 <udata_clear_loop_end>:
8000b432:	fe cf d6 fe 	sub	pc,pc,-10498
8000b436:	d7 03       	nop

8000b438 <cpu_irq_save>:
8000b438:	eb cd 40 80 	pushm	r7,lr
8000b43c:	1a 97       	mov	r7,sp
8000b43e:	20 1d       	sub	sp,4
8000b440:	e1 b8 00 00 	mfsr	r8,0x0
8000b444:	ef 48 ff fc 	st.w	r7[-4],r8
8000b448:	d3 03       	ssrf	0x10
8000b44a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b44e:	10 9c       	mov	r12,r8
8000b450:	2f fd       	sub	sp,-4
8000b452:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b456 <cpu_irq_restore>:
8000b456:	eb cd 40 80 	pushm	r7,lr
8000b45a:	1a 97       	mov	r7,sp
8000b45c:	20 1d       	sub	sp,4
8000b45e:	ef 4c ff fc 	st.w	r7[-4],r12
8000b462:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b466:	e3 b8 00 00 	mtsr	0x0,r8
8000b46a:	2f fd       	sub	sp,-4
8000b46c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b470 <osc_enable>:
8000b470:	eb cd 40 80 	pushm	r7,lr
8000b474:	1a 97       	mov	r7,sp
8000b476:	20 3d       	sub	sp,12
8000b478:	18 98       	mov	r8,r12
8000b47a:	ef 68 ff f4 	st.b	r7[-12],r8
8000b47e:	f0 1f 00 2b 	mcall	8000b528 <osc_enable+0xb8>
8000b482:	18 98       	mov	r8,r12
8000b484:	ef 48 ff f8 	st.w	r7[-8],r8
8000b488:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b48c:	58 18       	cp.w	r8,1
8000b48e:	c1 c0       	breq	8000b4c6 <osc_enable+0x56>
8000b490:	58 28       	cp.w	r8,2
8000b492:	c3 10       	breq	8000b4f4 <osc_enable+0x84>
8000b494:	58 08       	cp.w	r8,0
8000b496:	c4 21       	brne	8000b51a <osc_enable+0xaa>
8000b498:	e0 68 03 00 	mov	r8,768
8000b49c:	ef 48 ff fc 	st.w	r7[-4],r8
8000b4a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b4a4:	e8 18 00 07 	orl	r8,0x7
8000b4a8:	ef 48 ff fc 	st.w	r7[-4],r8
8000b4ac:	fe 78 0c 00 	mov	r8,-62464
8000b4b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b4b4:	91 a9       	st.w	r8[0x28],r9
8000b4b6:	fe 78 0c 00 	mov	r8,-62464
8000b4ba:	fe 79 0c 00 	mov	r9,-62464
8000b4be:	72 09       	ld.w	r9,r9[0x0]
8000b4c0:	a3 a9       	sbr	r9,0x2
8000b4c2:	91 09       	st.w	r8[0x0],r9
8000b4c4:	c2 b8       	rjmp	8000b51a <osc_enable+0xaa>
8000b4c6:	e0 68 03 00 	mov	r8,768
8000b4ca:	ef 48 ff fc 	st.w	r7[-4],r8
8000b4ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b4d2:	e8 18 00 07 	orl	r8,0x7
8000b4d6:	ef 48 ff fc 	st.w	r7[-4],r8
8000b4da:	fe 78 0c 00 	mov	r8,-62464
8000b4de:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b4e2:	91 b9       	st.w	r8[0x2c],r9
8000b4e4:	fe 78 0c 00 	mov	r8,-62464
8000b4e8:	fe 79 0c 00 	mov	r9,-62464
8000b4ec:	72 09       	ld.w	r9,r9[0x0]
8000b4ee:	a3 b9       	sbr	r9,0x3
8000b4f0:	91 09       	st.w	r8[0x0],r9
8000b4f2:	c1 48       	rjmp	8000b51a <osc_enable+0xaa>
8000b4f4:	e2 68 00 00 	mov	r8,131072
8000b4f8:	ef 48 ff fc 	st.w	r7[-4],r8
8000b4fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b500:	a9 a8       	sbr	r8,0x8
8000b502:	ef 48 ff fc 	st.w	r7[-4],r8
8000b506:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b50a:	a1 a8       	sbr	r8,0x0
8000b50c:	ef 48 ff fc 	st.w	r7[-4],r8
8000b510:	fe 78 0c 00 	mov	r8,-62464
8000b514:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b518:	91 c9       	st.w	r8[0x30],r9
8000b51a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b51e:	f0 1f 00 04 	mcall	8000b52c <osc_enable+0xbc>
8000b522:	2f dd       	sub	sp,-12
8000b524:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b528:	80 00       	ld.sh	r0,r0[0x0]
8000b52a:	b4 38       	st.h	r10[0x6],r8
8000b52c:	80 00       	ld.sh	r0,r0[0x0]
8000b52e:	b4 56       	st.h	r10[0xa],r6

8000b530 <osc_is_ready>:
8000b530:	eb cd 40 80 	pushm	r7,lr
8000b534:	1a 97       	mov	r7,sp
8000b536:	20 1d       	sub	sp,4
8000b538:	18 98       	mov	r8,r12
8000b53a:	ef 68 ff fc 	st.b	r7[-4],r8
8000b53e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b542:	58 18       	cp.w	r8,1
8000b544:	c0 d0       	breq	8000b55e <osc_is_ready+0x2e>
8000b546:	58 28       	cp.w	r8,2
8000b548:	c1 30       	breq	8000b56e <osc_is_ready+0x3e>
8000b54a:	58 08       	cp.w	r8,0
8000b54c:	c1 91       	brne	8000b57e <osc_is_ready+0x4e>
8000b54e:	fe 78 0c 00 	mov	r8,-62464
8000b552:	71 58       	ld.w	r8,r8[0x54]
8000b554:	e2 18 00 80 	andl	r8,0x80,COH
8000b558:	5f 18       	srne	r8
8000b55a:	5c 58       	castu.b	r8
8000b55c:	c1 28       	rjmp	8000b580 <osc_is_ready+0x50>
8000b55e:	fe 78 0c 00 	mov	r8,-62464
8000b562:	71 58       	ld.w	r8,r8[0x54]
8000b564:	e2 18 01 00 	andl	r8,0x100,COH
8000b568:	5f 18       	srne	r8
8000b56a:	5c 58       	castu.b	r8
8000b56c:	c0 a8       	rjmp	8000b580 <osc_is_ready+0x50>
8000b56e:	fe 78 0c 00 	mov	r8,-62464
8000b572:	71 58       	ld.w	r8,r8[0x54]
8000b574:	e2 18 02 00 	andl	r8,0x200,COH
8000b578:	5f 18       	srne	r8
8000b57a:	5c 58       	castu.b	r8
8000b57c:	c0 28       	rjmp	8000b580 <osc_is_ready+0x50>
8000b57e:	30 08       	mov	r8,0
8000b580:	10 9c       	mov	r12,r8
8000b582:	2f fd       	sub	sp,-4
8000b584:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b588 <osc_get_rate>:
8000b588:	eb cd 40 80 	pushm	r7,lr
8000b58c:	1a 97       	mov	r7,sp
8000b58e:	20 1d       	sub	sp,4
8000b590:	18 98       	mov	r8,r12
8000b592:	ef 68 ff fc 	st.b	r7[-4],r8
8000b596:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b59a:	58 18       	cp.w	r8,1
8000b59c:	c0 a0       	breq	8000b5b0 <osc_get_rate+0x28>
8000b59e:	58 28       	cp.w	r8,2
8000b5a0:	c0 d0       	breq	8000b5ba <osc_get_rate+0x32>
8000b5a2:	58 08       	cp.w	r8,0
8000b5a4:	c0 e1       	brne	8000b5c0 <osc_get_rate+0x38>
8000b5a6:	e0 68 1b 00 	mov	r8,6912
8000b5aa:	ea 18 00 b7 	orh	r8,0xb7
8000b5ae:	c0 a8       	rjmp	8000b5c2 <osc_get_rate+0x3a>
8000b5b0:	e0 68 44 00 	mov	r8,17408
8000b5b4:	ea 18 00 ac 	orh	r8,0xac
8000b5b8:	c0 58       	rjmp	8000b5c2 <osc_get_rate+0x3a>
8000b5ba:	e0 68 80 00 	mov	r8,32768
8000b5be:	c0 28       	rjmp	8000b5c2 <osc_get_rate+0x3a>
8000b5c0:	30 08       	mov	r8,0
8000b5c2:	10 9c       	mov	r12,r8
8000b5c4:	2f fd       	sub	sp,-4
8000b5c6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b5ca:	d7 03       	nop

8000b5cc <osc_wait_ready>:
8000b5cc:	eb cd 40 80 	pushm	r7,lr
8000b5d0:	1a 97       	mov	r7,sp
8000b5d2:	20 1d       	sub	sp,4
8000b5d4:	18 98       	mov	r8,r12
8000b5d6:	ef 68 ff fc 	st.b	r7[-4],r8
8000b5da:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b5de:	10 9c       	mov	r12,r8
8000b5e0:	f0 1f 00 05 	mcall	8000b5f4 <osc_wait_ready+0x28>
8000b5e4:	18 98       	mov	r8,r12
8000b5e6:	ec 18 00 01 	eorl	r8,0x1
8000b5ea:	5c 58       	castu.b	r8
8000b5ec:	cf 71       	brne	8000b5da <osc_wait_ready+0xe>
8000b5ee:	2f fd       	sub	sp,-4
8000b5f0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b5f4:	80 00       	ld.sh	r0,r0[0x0]
8000b5f6:	b5 30       	mul	r0,r10

8000b5f8 <pll_config_set_option>:
8000b5f8:	eb cd 40 80 	pushm	r7,lr
8000b5fc:	1a 97       	mov	r7,sp
8000b5fe:	20 2d       	sub	sp,8
8000b600:	ef 4c ff fc 	st.w	r7[-4],r12
8000b604:	ef 4b ff f8 	st.w	r7[-8],r11
8000b608:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b60c:	70 09       	ld.w	r9,r8[0x0]
8000b60e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b612:	2f e8       	sub	r8,-2
8000b614:	30 1a       	mov	r10,1
8000b616:	f4 08 09 48 	lsl	r8,r10,r8
8000b61a:	10 49       	or	r9,r8
8000b61c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b620:	91 09       	st.w	r8[0x0],r9
8000b622:	2f ed       	sub	sp,-8
8000b624:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b628 <pll_config_init>:
8000b628:	eb cd 40 80 	pushm	r7,lr
8000b62c:	1a 97       	mov	r7,sp
8000b62e:	20 5d       	sub	sp,20
8000b630:	ef 4c ff f8 	st.w	r7[-8],r12
8000b634:	ef 4b ff f4 	st.w	r7[-12],r11
8000b638:	ef 4a ff f0 	st.w	r7[-16],r10
8000b63c:	ef 49 ff ec 	st.w	r7[-20],r9
8000b640:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b644:	5c 58       	castu.b	r8
8000b646:	10 9c       	mov	r12,r8
8000b648:	f0 1f 00 2e 	mcall	8000b700 <pll_config_init+0xd8>
8000b64c:	18 99       	mov	r9,r12
8000b64e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b652:	f2 08 02 48 	mul	r8,r9,r8
8000b656:	ef 48 ff fc 	st.w	r7[-4],r8
8000b65a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b65e:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000b662:	f0 09 0d 08 	divu	r8,r8,r9
8000b666:	ef 48 ff fc 	st.w	r7[-4],r8
8000b66a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b66e:	30 09       	mov	r9,0
8000b670:	91 09       	st.w	r8[0x0],r9
8000b672:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b676:	e0 69 b3 ff 	mov	r9,46079
8000b67a:	ea 19 04 c4 	orh	r9,0x4c4
8000b67e:	12 38       	cp.w	r8,r9
8000b680:	e0 8b 00 16 	brhi	8000b6ac <pll_config_init+0x84>
8000b684:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b688:	58 88       	cp.w	r8,8
8000b68a:	e0 8b 00 11 	brhi	8000b6ac <pll_config_init+0x84>
8000b68e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b692:	a1 78       	lsl	r8,0x1
8000b694:	ef 48 ff ec 	st.w	r7[-20],r8
8000b698:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b69c:	a1 78       	lsl	r8,0x1
8000b69e:	ef 48 ff fc 	st.w	r7[-4],r8
8000b6a2:	30 1b       	mov	r11,1
8000b6a4:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b6a8:	f0 1f 00 17 	mcall	8000b704 <pll_config_init+0xdc>
8000b6ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b6b0:	e0 69 fe 7f 	mov	r9,65151
8000b6b4:	ea 19 0a 21 	orh	r9,0xa21
8000b6b8:	12 38       	cp.w	r8,r9
8000b6ba:	e0 8b 00 07 	brhi	8000b6c8 <pll_config_init+0xa0>
8000b6be:	30 0b       	mov	r11,0
8000b6c0:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b6c4:	f0 1f 00 10 	mcall	8000b704 <pll_config_init+0xdc>
8000b6c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b6cc:	70 09       	ld.w	r9,r8[0x0]
8000b6ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b6d2:	20 18       	sub	r8,1
8000b6d4:	f0 0a 15 10 	lsl	r10,r8,0x10
8000b6d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b6dc:	a9 68       	lsl	r8,0x8
8000b6de:	10 4a       	or	r10,r8
8000b6e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b6e4:	a1 78       	lsl	r8,0x1
8000b6e6:	f5 e8 10 08 	or	r8,r10,r8
8000b6ea:	f3 e8 10 08 	or	r8,r9,r8
8000b6ee:	10 99       	mov	r9,r8
8000b6f0:	ea 19 3f 00 	orh	r9,0x3f00
8000b6f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b6f8:	91 09       	st.w	r8[0x0],r9
8000b6fa:	2f bd       	sub	sp,-20
8000b6fc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b700:	80 00       	ld.sh	r0,r0[0x0]
8000b702:	b5 88       	lsr	r8,0x14
8000b704:	80 00       	ld.sh	r0,r0[0x0]
8000b706:	b5 f8       	*unknown*

8000b708 <pll_enable>:
8000b708:	eb cd 40 80 	pushm	r7,lr
8000b70c:	1a 97       	mov	r7,sp
8000b70e:	20 2d       	sub	sp,8
8000b710:	ef 4c ff fc 	st.w	r7[-4],r12
8000b714:	ef 4b ff f8 	st.w	r7[-8],r11
8000b718:	fe 78 0c 00 	mov	r8,-62464
8000b71c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b720:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b724:	74 0a       	ld.w	r10,r10[0x0]
8000b726:	a1 aa       	sbr	r10,0x0
8000b728:	2f 89       	sub	r9,-8
8000b72a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000b72e:	2f ed       	sub	sp,-8
8000b730:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b734 <pll_is_locked>:
8000b734:	eb cd 40 80 	pushm	r7,lr
8000b738:	1a 97       	mov	r7,sp
8000b73a:	20 1d       	sub	sp,4
8000b73c:	ef 4c ff fc 	st.w	r7[-4],r12
8000b740:	fe 78 0c 00 	mov	r8,-62464
8000b744:	71 59       	ld.w	r9,r8[0x54]
8000b746:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b74a:	30 1a       	mov	r10,1
8000b74c:	f4 08 09 48 	lsl	r8,r10,r8
8000b750:	f3 e8 00 08 	and	r8,r9,r8
8000b754:	5f 18       	srne	r8
8000b756:	5c 58       	castu.b	r8
8000b758:	10 9c       	mov	r12,r8
8000b75a:	2f fd       	sub	sp,-4
8000b75c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b760 <pll_enable_source>:
8000b760:	eb cd 40 80 	pushm	r7,lr
8000b764:	1a 97       	mov	r7,sp
8000b766:	20 1d       	sub	sp,4
8000b768:	ef 4c ff fc 	st.w	r7[-4],r12
8000b76c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b770:	58 08       	cp.w	r8,0
8000b772:	c0 40       	breq	8000b77a <pll_enable_source+0x1a>
8000b774:	58 18       	cp.w	r8,1
8000b776:	c1 10       	breq	8000b798 <pll_enable_source+0x38>
8000b778:	c2 08       	rjmp	8000b7b8 <pll_enable_source+0x58>
8000b77a:	30 0c       	mov	r12,0
8000b77c:	f0 1f 00 11 	mcall	8000b7c0 <pll_enable_source+0x60>
8000b780:	18 98       	mov	r8,r12
8000b782:	ec 18 00 01 	eorl	r8,0x1
8000b786:	5c 58       	castu.b	r8
8000b788:	c1 70       	breq	8000b7b6 <pll_enable_source+0x56>
8000b78a:	30 0c       	mov	r12,0
8000b78c:	f0 1f 00 0e 	mcall	8000b7c4 <pll_enable_source+0x64>
8000b790:	30 0c       	mov	r12,0
8000b792:	f0 1f 00 0e 	mcall	8000b7c8 <pll_enable_source+0x68>
8000b796:	c1 18       	rjmp	8000b7b8 <pll_enable_source+0x58>
8000b798:	30 1c       	mov	r12,1
8000b79a:	f0 1f 00 0a 	mcall	8000b7c0 <pll_enable_source+0x60>
8000b79e:	18 98       	mov	r8,r12
8000b7a0:	ec 18 00 01 	eorl	r8,0x1
8000b7a4:	5c 58       	castu.b	r8
8000b7a6:	c0 90       	breq	8000b7b8 <pll_enable_source+0x58>
8000b7a8:	30 1c       	mov	r12,1
8000b7aa:	f0 1f 00 07 	mcall	8000b7c4 <pll_enable_source+0x64>
8000b7ae:	30 1c       	mov	r12,1
8000b7b0:	f0 1f 00 06 	mcall	8000b7c8 <pll_enable_source+0x68>
8000b7b4:	c0 28       	rjmp	8000b7b8 <pll_enable_source+0x58>
8000b7b6:	d7 03       	nop
8000b7b8:	2f fd       	sub	sp,-4
8000b7ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b7be:	00 00       	add	r0,r0
8000b7c0:	80 00       	ld.sh	r0,r0[0x0]
8000b7c2:	b5 30       	mul	r0,r10
8000b7c4:	80 00       	ld.sh	r0,r0[0x0]
8000b7c6:	b4 70       	st.h	r10[0xe],r0
8000b7c8:	80 00       	ld.sh	r0,r0[0x0]
8000b7ca:	b5 cc       	cbr	r12,0x14

8000b7cc <pll_enable_config_defaults>:
8000b7cc:	eb cd 40 80 	pushm	r7,lr
8000b7d0:	1a 97       	mov	r7,sp
8000b7d2:	20 2d       	sub	sp,8
8000b7d4:	ef 4c ff f8 	st.w	r7[-8],r12
8000b7d8:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b7dc:	f0 1f 00 15 	mcall	8000b830 <pll_enable_config_defaults+0x64>
8000b7e0:	18 98       	mov	r8,r12
8000b7e2:	58 08       	cp.w	r8,0
8000b7e4:	c2 11       	brne	8000b826 <pll_enable_config_defaults+0x5a>
8000b7e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b7ea:	58 08       	cp.w	r8,0
8000b7ec:	c0 c1       	brne	8000b804 <pll_enable_config_defaults+0x38>
8000b7ee:	30 0c       	mov	r12,0
8000b7f0:	f0 1f 00 11 	mcall	8000b834 <pll_enable_config_defaults+0x68>
8000b7f4:	ee c8 00 04 	sub	r8,r7,4
8000b7f8:	30 b9       	mov	r9,11
8000b7fa:	30 2a       	mov	r10,2
8000b7fc:	30 0b       	mov	r11,0
8000b7fe:	10 9c       	mov	r12,r8
8000b800:	f0 1f 00 0e 	mcall	8000b838 <pll_enable_config_defaults+0x6c>
8000b804:	ee c8 00 04 	sub	r8,r7,4
8000b808:	ee fb ff f8 	ld.w	r11,r7[-8]
8000b80c:	10 9c       	mov	r12,r8
8000b80e:	f0 1f 00 0c 	mcall	8000b83c <pll_enable_config_defaults+0x70>
8000b812:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b816:	f0 1f 00 07 	mcall	8000b830 <pll_enable_config_defaults+0x64>
8000b81a:	18 98       	mov	r8,r12
8000b81c:	ec 18 00 01 	eorl	r8,0x1
8000b820:	5c 58       	castu.b	r8
8000b822:	cf 81       	brne	8000b812 <pll_enable_config_defaults+0x46>
8000b824:	c0 28       	rjmp	8000b828 <pll_enable_config_defaults+0x5c>
8000b826:	d7 03       	nop
8000b828:	2f ed       	sub	sp,-8
8000b82a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b82e:	00 00       	add	r0,r0
8000b830:	80 00       	ld.sh	r0,r0[0x0]
8000b832:	b7 34       	mul	r4,r11
8000b834:	80 00       	ld.sh	r0,r0[0x0]
8000b836:	b7 60       	lsl	r0,0x16
8000b838:	80 00       	ld.sh	r0,r0[0x0]
8000b83a:	b6 28       	st.h	r11[0x4],r8
8000b83c:	80 00       	ld.sh	r0,r0[0x0]
8000b83e:	b7 08       	ld.d	r8,r11

8000b840 <genclk_config_defaults>:
8000b840:	eb cd 40 80 	pushm	r7,lr
8000b844:	1a 97       	mov	r7,sp
8000b846:	20 2d       	sub	sp,8
8000b848:	ef 4c ff fc 	st.w	r7[-4],r12
8000b84c:	ef 4b ff f8 	st.w	r7[-8],r11
8000b850:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b854:	30 09       	mov	r9,0
8000b856:	91 09       	st.w	r8[0x0],r9
8000b858:	2f ed       	sub	sp,-8
8000b85a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b85e <genclk_config_set_source>:
8000b85e:	eb cd 40 80 	pushm	r7,lr
8000b862:	1a 97       	mov	r7,sp
8000b864:	20 3d       	sub	sp,12
8000b866:	ef 4c ff f8 	st.w	r7[-8],r12
8000b86a:	ef 4b ff f4 	st.w	r7[-12],r11
8000b86e:	30 38       	mov	r8,3
8000b870:	ef 48 ff fc 	st.w	r7[-4],r8
8000b874:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b878:	70 09       	ld.w	r9,r8[0x0]
8000b87a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b87e:	5c d8       	com	r8
8000b880:	10 69       	and	r9,r8
8000b882:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b886:	10 49       	or	r9,r8
8000b888:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b88c:	91 09       	st.w	r8[0x0],r9
8000b88e:	2f dd       	sub	sp,-12
8000b890:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b894 <genclk_config_set_divider>:
8000b894:	eb cd 40 80 	pushm	r7,lr
8000b898:	1a 97       	mov	r7,sp
8000b89a:	20 2d       	sub	sp,8
8000b89c:	ef 4c ff fc 	st.w	r7[-4],r12
8000b8a0:	ef 4b ff f8 	st.w	r7[-8],r11
8000b8a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8a8:	70 08       	ld.w	r8,r8[0x0]
8000b8aa:	10 99       	mov	r9,r8
8000b8ac:	e0 19 00 ef 	andl	r9,0xef
8000b8b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8b4:	91 09       	st.w	r8[0x0],r9
8000b8b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b8ba:	58 18       	cp.w	r8,1
8000b8bc:	e0 88 00 17 	brls	8000b8ea <genclk_config_set_divider+0x56>
8000b8c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8c4:	70 08       	ld.w	r8,r8[0x0]
8000b8c6:	10 99       	mov	r9,r8
8000b8c8:	a5 a9       	sbr	r9,0x4
8000b8ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8ce:	91 09       	st.w	r8[0x0],r9
8000b8d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8d4:	70 09       	ld.w	r9,r8[0x0]
8000b8d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b8da:	2f f8       	sub	r8,-1
8000b8dc:	a1 98       	lsr	r8,0x1
8000b8de:	20 18       	sub	r8,1
8000b8e0:	a9 68       	lsl	r8,0x8
8000b8e2:	10 49       	or	r9,r8
8000b8e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8e8:	91 09       	st.w	r8[0x0],r9
8000b8ea:	2f ed       	sub	sp,-8
8000b8ec:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b8f0 <genclk_enable>:
8000b8f0:	eb cd 40 80 	pushm	r7,lr
8000b8f4:	1a 97       	mov	r7,sp
8000b8f6:	20 2d       	sub	sp,8
8000b8f8:	ef 4c ff fc 	st.w	r7[-4],r12
8000b8fc:	ef 4b ff f8 	st.w	r7[-8],r11
8000b900:	fe 78 0c 00 	mov	r8,-62464
8000b904:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b908:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b90c:	74 0a       	ld.w	r10,r10[0x0]
8000b90e:	a3 aa       	sbr	r10,0x2
8000b910:	2e 89       	sub	r9,-24
8000b912:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000b916:	2f ed       	sub	sp,-8
8000b918:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b91c <genclk_enable_source>:
8000b91c:	eb cd 40 80 	pushm	r7,lr
8000b920:	1a 97       	mov	r7,sp
8000b922:	20 1d       	sub	sp,4
8000b924:	ef 4c ff fc 	st.w	r7[-4],r12
8000b928:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b92c:	58 18       	cp.w	r8,1
8000b92e:	c1 40       	breq	8000b956 <genclk_enable_source+0x3a>
8000b930:	c0 43       	brcs	8000b938 <genclk_enable_source+0x1c>
8000b932:	58 28       	cp.w	r8,2
8000b934:	c2 00       	breq	8000b974 <genclk_enable_source+0x58>
8000b936:	c2 68       	rjmp	8000b982 <genclk_enable_source+0x66>
8000b938:	30 0c       	mov	r12,0
8000b93a:	f0 1f 00 14 	mcall	8000b988 <genclk_enable_source+0x6c>
8000b93e:	18 98       	mov	r8,r12
8000b940:	ec 18 00 01 	eorl	r8,0x1
8000b944:	5c 58       	castu.b	r8
8000b946:	c1 b0       	breq	8000b97c <genclk_enable_source+0x60>
8000b948:	30 0c       	mov	r12,0
8000b94a:	f0 1f 00 11 	mcall	8000b98c <genclk_enable_source+0x70>
8000b94e:	30 0c       	mov	r12,0
8000b950:	f0 1f 00 10 	mcall	8000b990 <genclk_enable_source+0x74>
8000b954:	c1 78       	rjmp	8000b982 <genclk_enable_source+0x66>
8000b956:	30 1c       	mov	r12,1
8000b958:	f0 1f 00 0c 	mcall	8000b988 <genclk_enable_source+0x6c>
8000b95c:	18 98       	mov	r8,r12
8000b95e:	ec 18 00 01 	eorl	r8,0x1
8000b962:	5c 58       	castu.b	r8
8000b964:	c0 e0       	breq	8000b980 <genclk_enable_source+0x64>
8000b966:	30 1c       	mov	r12,1
8000b968:	f0 1f 00 09 	mcall	8000b98c <genclk_enable_source+0x70>
8000b96c:	30 1c       	mov	r12,1
8000b96e:	f0 1f 00 09 	mcall	8000b990 <genclk_enable_source+0x74>
8000b972:	c0 88       	rjmp	8000b982 <genclk_enable_source+0x66>
8000b974:	30 0c       	mov	r12,0
8000b976:	f0 1f 00 08 	mcall	8000b994 <genclk_enable_source+0x78>
8000b97a:	c0 48       	rjmp	8000b982 <genclk_enable_source+0x66>
8000b97c:	d7 03       	nop
8000b97e:	c0 28       	rjmp	8000b982 <genclk_enable_source+0x66>
8000b980:	d7 03       	nop
8000b982:	2f fd       	sub	sp,-4
8000b984:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b988:	80 00       	ld.sh	r0,r0[0x0]
8000b98a:	b5 30       	mul	r0,r10
8000b98c:	80 00       	ld.sh	r0,r0[0x0]
8000b98e:	b4 70       	st.h	r10[0xe],r0
8000b990:	80 00       	ld.sh	r0,r0[0x0]
8000b992:	b5 cc       	cbr	r12,0x14
8000b994:	80 00       	ld.sh	r0,r0[0x0]
8000b996:	b7 cc       	cbr	r12,0x16

8000b998 <genclk_enable_config>:
8000b998:	eb cd 40 80 	pushm	r7,lr
8000b99c:	1a 97       	mov	r7,sp
8000b99e:	20 4d       	sub	sp,16
8000b9a0:	ef 4c ff f8 	st.w	r7[-8],r12
8000b9a4:	ef 4b ff f4 	st.w	r7[-12],r11
8000b9a8:	ef 4a ff f0 	st.w	r7[-16],r10
8000b9ac:	ee c8 00 04 	sub	r8,r7,4
8000b9b0:	ee fb ff f8 	ld.w	r11,r7[-8]
8000b9b4:	10 9c       	mov	r12,r8
8000b9b6:	f0 1f 00 10 	mcall	8000b9f4 <genclk_enable_config+0x5c>
8000b9ba:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b9be:	f0 1f 00 0f 	mcall	8000b9f8 <genclk_enable_config+0x60>
8000b9c2:	ee c8 00 04 	sub	r8,r7,4
8000b9c6:	ee fb ff f4 	ld.w	r11,r7[-12]
8000b9ca:	10 9c       	mov	r12,r8
8000b9cc:	f0 1f 00 0c 	mcall	8000b9fc <genclk_enable_config+0x64>
8000b9d0:	ee c8 00 04 	sub	r8,r7,4
8000b9d4:	ee fb ff f0 	ld.w	r11,r7[-16]
8000b9d8:	10 9c       	mov	r12,r8
8000b9da:	f0 1f 00 0a 	mcall	8000ba00 <genclk_enable_config+0x68>
8000b9de:	ee c8 00 04 	sub	r8,r7,4
8000b9e2:	ee fb ff f8 	ld.w	r11,r7[-8]
8000b9e6:	10 9c       	mov	r12,r8
8000b9e8:	f0 1f 00 07 	mcall	8000ba04 <genclk_enable_config+0x6c>
8000b9ec:	2f cd       	sub	sp,-16
8000b9ee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b9f2:	00 00       	add	r0,r0
8000b9f4:	80 00       	ld.sh	r0,r0[0x0]
8000b9f6:	b8 40       	st.h	r12[0x8],r0
8000b9f8:	80 00       	ld.sh	r0,r0[0x0]
8000b9fa:	b9 1c       	ld.d	r12,--r12
8000b9fc:	80 00       	ld.sh	r0,r0[0x0]
8000b9fe:	b8 5e       	st.h	r12[0xa],lr
8000ba00:	80 00       	ld.sh	r0,r0[0x0]
8000ba02:	b8 94       	st.b	r12[0x1],r4
8000ba04:	80 00       	ld.sh	r0,r0[0x0]
8000ba06:	b8 f0       	st.b	r12[0x7],r0

8000ba08 <sysclk_get_main_hz>:
8000ba08:	eb cd 40 80 	pushm	r7,lr
8000ba0c:	1a 97       	mov	r7,sp
8000ba0e:	30 0c       	mov	r12,0
8000ba10:	f0 1f 00 06 	mcall	8000ba28 <sysclk_get_main_hz+0x20>
8000ba14:	18 99       	mov	r9,r12
8000ba16:	12 98       	mov	r8,r9
8000ba18:	a3 68       	lsl	r8,0x2
8000ba1a:	12 08       	add	r8,r9
8000ba1c:	a1 78       	lsl	r8,0x1
8000ba1e:	12 08       	add	r8,r9
8000ba20:	a1 98       	lsr	r8,0x1
8000ba22:	10 9c       	mov	r12,r8
8000ba24:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ba28:	80 00       	ld.sh	r0,r0[0x0]
8000ba2a:	b5 88       	lsr	r8,0x14

8000ba2c <sysclk_get_cpu_hz>:
8000ba2c:	eb cd 40 80 	pushm	r7,lr
8000ba30:	1a 97       	mov	r7,sp
8000ba32:	f0 1f 00 04 	mcall	8000ba40 <sysclk_get_cpu_hz+0x14>
8000ba36:	18 98       	mov	r8,r12
8000ba38:	10 9c       	mov	r12,r8
8000ba3a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ba3e:	00 00       	add	r0,r0
8000ba40:	80 00       	ld.sh	r0,r0[0x0]
8000ba42:	ba 08       	st.h	sp[0x0],r8

8000ba44 <sysclk_enable_hsb_module>:
8000ba44:	eb cd 40 80 	pushm	r7,lr
8000ba48:	1a 97       	mov	r7,sp
8000ba4a:	20 1d       	sub	sp,4
8000ba4c:	ef 4c ff fc 	st.w	r7[-4],r12
8000ba50:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ba54:	30 1c       	mov	r12,1
8000ba56:	f0 1f 00 03 	mcall	8000ba60 <sysclk_enable_hsb_module+0x1c>
8000ba5a:	2f fd       	sub	sp,-4
8000ba5c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ba60:	80 00       	ld.sh	r0,r0[0x0]
8000ba62:	ba b8       	st.b	sp[0x3],r8

8000ba64 <sysclk_set_source>:
8000ba64:	eb cd 40 80 	pushm	r7,lr
8000ba68:	1a 97       	mov	r7,sp
8000ba6a:	20 3d       	sub	sp,12
8000ba6c:	ef 4c ff f4 	st.w	r7[-12],r12
8000ba70:	f0 1f 00 10 	mcall	8000bab0 <sysclk_set_source+0x4c>
8000ba74:	18 98       	mov	r8,r12
8000ba76:	ef 48 ff f8 	st.w	r7[-8],r8
8000ba7a:	fe 78 0c 00 	mov	r8,-62464
8000ba7e:	70 08       	ld.w	r8,r8[0x0]
8000ba80:	e0 18 ff fc 	andl	r8,0xfffc
8000ba84:	ef 48 ff fc 	st.w	r7[-4],r8
8000ba88:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ba8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ba90:	f3 e8 10 08 	or	r8,r9,r8
8000ba94:	ef 48 ff fc 	st.w	r7[-4],r8
8000ba98:	fe 78 0c 00 	mov	r8,-62464
8000ba9c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000baa0:	91 09       	st.w	r8[0x0],r9
8000baa2:	ee fc ff f8 	ld.w	r12,r7[-8]
8000baa6:	f0 1f 00 04 	mcall	8000bab4 <sysclk_set_source+0x50>
8000baaa:	2f dd       	sub	sp,-12
8000baac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bab0:	80 00       	ld.sh	r0,r0[0x0]
8000bab2:	b4 38       	st.h	r10[0x6],r8
8000bab4:	80 00       	ld.sh	r0,r0[0x0]
8000bab6:	b4 56       	st.h	r10[0xa],r6

8000bab8 <sysclk_priv_enable_module>:
8000bab8:	eb cd 40 80 	pushm	r7,lr
8000babc:	1a 97       	mov	r7,sp
8000babe:	20 4d       	sub	sp,16
8000bac0:	ef 4c ff f4 	st.w	r7[-12],r12
8000bac4:	ef 4b ff f0 	st.w	r7[-16],r11
8000bac8:	f0 1f 00 17 	mcall	8000bb24 <sysclk_priv_enable_module+0x6c>
8000bacc:	18 98       	mov	r8,r12
8000bace:	ef 48 ff f8 	st.w	r7[-8],r8
8000bad2:	fe 78 0c 00 	mov	r8,-62464
8000bad6:	71 58       	ld.w	r8,r8[0x54]
8000bad8:	e2 18 00 40 	andl	r8,0x40,COH
8000badc:	cf b0       	breq	8000bad2 <sysclk_priv_enable_module+0x1a>
8000bade:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bae2:	a3 68       	lsl	r8,0x2
8000bae4:	e0 28 f3 f8 	sub	r8,62456
8000bae8:	70 08       	ld.w	r8,r8[0x0]
8000baea:	ef 48 ff fc 	st.w	r7[-4],r8
8000baee:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000baf2:	30 19       	mov	r9,1
8000baf4:	f2 08 09 48 	lsl	r8,r9,r8
8000baf8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bafc:	f3 e8 10 08 	or	r8,r9,r8
8000bb00:	ef 48 ff fc 	st.w	r7[-4],r8
8000bb04:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb08:	a3 68       	lsl	r8,0x2
8000bb0a:	e0 28 f3 f8 	sub	r8,62456
8000bb0e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bb12:	91 09       	st.w	r8[0x0],r9
8000bb14:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bb18:	f0 1f 00 04 	mcall	8000bb28 <sysclk_priv_enable_module+0x70>
8000bb1c:	2f cd       	sub	sp,-16
8000bb1e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb22:	00 00       	add	r0,r0
8000bb24:	80 00       	ld.sh	r0,r0[0x0]
8000bb26:	b4 38       	st.h	r10[0x6],r8
8000bb28:	80 00       	ld.sh	r0,r0[0x0]
8000bb2a:	b4 56       	st.h	r10[0xa],r6

8000bb2c <sysclk_enable_pbb_module>:
8000bb2c:	eb cd 40 80 	pushm	r7,lr
8000bb30:	1a 97       	mov	r7,sp
8000bb32:	20 3d       	sub	sp,12
8000bb34:	ef 4c ff f4 	st.w	r7[-12],r12
8000bb38:	30 08       	mov	r8,0
8000bb3a:	ef 48 ff f8 	st.w	r7[-8],r8
8000bb3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb42:	58 98       	cp.w	r8,9
8000bb44:	c0 41       	brne	8000bb4c <sysclk_enable_pbb_module+0x20>
8000bb46:	30 18       	mov	r8,1
8000bb48:	ef 48 ff f8 	st.w	r7[-8],r8
8000bb4c:	f0 1f 00 15 	mcall	8000bba0 <sysclk_enable_pbb_module+0x74>
8000bb50:	18 98       	mov	r8,r12
8000bb52:	ef 48 ff fc 	st.w	r7[-4],r8
8000bb56:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb5a:	49 39       	lddpc	r9,8000bba4 <sysclk_enable_pbb_module+0x78>
8000bb5c:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000bb60:	58 08       	cp.w	r8,0
8000bb62:	c0 91       	brne	8000bb74 <sysclk_enable_pbb_module+0x48>
8000bb64:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb68:	a1 78       	lsl	r8,0x1
8000bb6a:	2f f8       	sub	r8,-1
8000bb6c:	a1 78       	lsl	r8,0x1
8000bb6e:	10 9c       	mov	r12,r8
8000bb70:	f0 1f 00 0e 	mcall	8000bba8 <sysclk_enable_pbb_module+0x7c>
8000bb74:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb78:	48 b9       	lddpc	r9,8000bba4 <sysclk_enable_pbb_module+0x78>
8000bb7a:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000bb7e:	2f f9       	sub	r9,-1
8000bb80:	5c 59       	castu.b	r9
8000bb82:	48 9a       	lddpc	r10,8000bba4 <sysclk_enable_pbb_module+0x78>
8000bb84:	f4 08 0b 09 	st.b	r10[r8],r9
8000bb88:	ee fc ff fc 	ld.w	r12,r7[-4]
8000bb8c:	f0 1f 00 08 	mcall	8000bbac <sysclk_enable_pbb_module+0x80>
8000bb90:	ee fb ff f4 	ld.w	r11,r7[-12]
8000bb94:	30 3c       	mov	r12,3
8000bb96:	f0 1f 00 07 	mcall	8000bbb0 <sysclk_enable_pbb_module+0x84>
8000bb9a:	2f dd       	sub	sp,-12
8000bb9c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bba0:	80 00       	ld.sh	r0,r0[0x0]
8000bba2:	b4 38       	st.h	r10[0x6],r8
8000bba4:	00 00       	add	r0,r0
8000bba6:	08 60       	and	r0,r4
8000bba8:	80 00       	ld.sh	r0,r0[0x0]
8000bbaa:	ba 44       	st.h	sp[0x8],r4
8000bbac:	80 00       	ld.sh	r0,r0[0x0]
8000bbae:	b4 56       	st.h	r10[0xa],r6
8000bbb0:	80 00       	ld.sh	r0,r0[0x0]
8000bbb2:	ba b8       	st.b	sp[0x3],r8

8000bbb4 <sysclk_enable_usb>:
8000bbb4:	eb cd 40 80 	pushm	r7,lr
8000bbb8:	1a 97       	mov	r7,sp
8000bbba:	30 1c       	mov	r12,1
8000bbbc:	f0 1f 00 06 	mcall	8000bbd4 <sysclk_enable_usb+0x20>
8000bbc0:	30 3c       	mov	r12,3
8000bbc2:	f0 1f 00 06 	mcall	8000bbd8 <sysclk_enable_usb+0x24>
8000bbc6:	30 1a       	mov	r10,1
8000bbc8:	30 0b       	mov	r11,0
8000bbca:	30 4c       	mov	r12,4
8000bbcc:	f0 1f 00 04 	mcall	8000bbdc <sysclk_enable_usb+0x28>
8000bbd0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bbd4:	80 00       	ld.sh	r0,r0[0x0]
8000bbd6:	bb 2c       	st.d	sp++,r12
8000bbd8:	80 00       	ld.sh	r0,r0[0x0]
8000bbda:	ba 44       	st.h	sp[0x8],r4
8000bbdc:	80 00       	ld.sh	r0,r0[0x0]
8000bbde:	b9 98       	lsr	r8,0x19

8000bbe0 <sysclk_init>:
8000bbe0:	eb cd 40 80 	pushm	r7,lr
8000bbe4:	1a 97       	mov	r7,sp
8000bbe6:	30 0c       	mov	r12,0
8000bbe8:	f0 1f 00 07 	mcall	8000bc04 <sysclk_init+0x24>
8000bbec:	f0 1f 00 07 	mcall	8000bc08 <sysclk_init+0x28>
8000bbf0:	18 98       	mov	r8,r12
8000bbf2:	10 9c       	mov	r12,r8
8000bbf4:	f0 1f 00 06 	mcall	8000bc0c <sysclk_init+0x2c>
8000bbf8:	30 2c       	mov	r12,2
8000bbfa:	f0 1f 00 06 	mcall	8000bc10 <sysclk_init+0x30>
8000bbfe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc02:	00 00       	add	r0,r0
8000bc04:	80 00       	ld.sh	r0,r0[0x0]
8000bc06:	b7 cc       	cbr	r12,0x16
8000bc08:	80 00       	ld.sh	r0,r0[0x0]
8000bc0a:	ba 2c       	st.h	sp[0x4],r12
8000bc0c:	80 00       	ld.sh	r0,r0[0x0]
8000bc0e:	85 28       	st.w	r2[0x8],r8
8000bc10:	80 00       	ld.sh	r0,r0[0x0]
8000bc12:	ba 64       	st.h	sp[0xc],r4
8000bc14:	22 53       	sub	r3,37
8000bc16:	44 20       	lddsp	r0,sp[0x108]
8000bc18:	43 61       	lddsp	r1,sp[0xd8]
8000bc1a:	72 64       	ld.w	r4,r9[0x18]
8000bc1c:	20 53       	sub	r3,5
8000bc1e:	6c 6f       	ld.w	pc,r6[0x18]
8000bc20:	74 20       	ld.w	r0,r10[0x8]
8000bc22:	30 22       	mov	r2,2
8000bc24:	00 00       	add	r0,r0
8000bc26:	00 00       	add	r0,r0
8000bc28:	22 53       	sub	r3,37
8000bc2a:	44 20       	lddsp	r0,sp[0x108]
8000bc2c:	43 61       	lddsp	r1,sp[0xd8]
8000bc2e:	72 64       	ld.w	r4,r9[0x18]
8000bc30:	20 53       	sub	r3,5
8000bc32:	6c 6f       	ld.w	pc,r6[0x18]
8000bc34:	74 20       	ld.w	r0,r10[0x8]
8000bc36:	31 22       	mov	r2,18
8000bc38:	00 00       	add	r0,r0
	...

8000bc3c <get_nb_lun>:
8000bc3c:	eb cd 40 80 	pushm	r7,lr
8000bc40:	1a 97       	mov	r7,sp
8000bc42:	30 28       	mov	r8,2
8000bc44:	10 9c       	mov	r12,r8
8000bc46:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc4a:	d7 03       	nop

8000bc4c <mem_test_unit_ready>:
8000bc4c:	eb cd 40 80 	pushm	r7,lr
8000bc50:	1a 97       	mov	r7,sp
8000bc52:	20 2d       	sub	sp,8
8000bc54:	18 98       	mov	r8,r12
8000bc56:	ef 68 ff f8 	st.b	r7[-8],r8
8000bc5a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bc5e:	30 18       	mov	r8,1
8000bc60:	f0 09 18 00 	cp.b	r9,r8
8000bc64:	e0 8b 00 0f 	brhi	8000bc82 <mem_test_unit_ready+0x36>
8000bc68:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bc6c:	48 aa       	lddpc	r10,8000bc94 <mem_test_unit_ready+0x48>
8000bc6e:	12 98       	mov	r8,r9
8000bc70:	a3 78       	lsl	r8,0x3
8000bc72:	12 18       	sub	r8,r9
8000bc74:	a3 68       	lsl	r8,0x2
8000bc76:	f4 08 00 08 	add	r8,r10,r8
8000bc7a:	70 08       	ld.w	r8,r8[0x0]
8000bc7c:	5d 18       	icall	r8
8000bc7e:	18 98       	mov	r8,r12
8000bc80:	c0 28       	rjmp	8000bc84 <mem_test_unit_ready+0x38>
8000bc82:	30 18       	mov	r8,1
8000bc84:	ef 48 ff fc 	st.w	r7[-4],r8
8000bc88:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc8c:	10 9c       	mov	r12,r8
8000bc8e:	2f ed       	sub	sp,-8
8000bc90:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc94:	80 00       	ld.sh	r0,r0[0x0]
8000bc96:	ee 24 eb cd 	sub	r4,977869

8000bc98 <mem_read_capacity>:
8000bc98:	eb cd 40 80 	pushm	r7,lr
8000bc9c:	1a 97       	mov	r7,sp
8000bc9e:	20 3d       	sub	sp,12
8000bca0:	18 98       	mov	r8,r12
8000bca2:	ef 4b ff f4 	st.w	r7[-12],r11
8000bca6:	ef 68 ff f8 	st.b	r7[-8],r8
8000bcaa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bcae:	30 18       	mov	r8,1
8000bcb0:	f0 09 18 00 	cp.b	r9,r8
8000bcb4:	e0 8b 00 10 	brhi	8000bcd4 <mem_read_capacity+0x3c>
8000bcb8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bcbc:	48 ba       	lddpc	r10,8000bce8 <mem_read_capacity+0x50>
8000bcbe:	12 98       	mov	r8,r9
8000bcc0:	a3 78       	lsl	r8,0x3
8000bcc2:	12 18       	sub	r8,r9
8000bcc4:	2f f8       	sub	r8,-1
8000bcc6:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
8000bcca:	ee fc ff f4 	ld.w	r12,r7[-12]
8000bcce:	5d 18       	icall	r8
8000bcd0:	18 98       	mov	r8,r12
8000bcd2:	c0 28       	rjmp	8000bcd6 <mem_read_capacity+0x3e>
8000bcd4:	30 18       	mov	r8,1
8000bcd6:	ef 48 ff fc 	st.w	r7[-4],r8
8000bcda:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcde:	10 9c       	mov	r12,r8
8000bce0:	2f dd       	sub	sp,-12
8000bce2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bce6:	00 00       	add	r0,r0
8000bce8:	80 00       	ld.sh	r0,r0[0x0]
8000bcea:	ee 24 eb cd 	sub	r4,977869

8000bcec <mem_wr_protect>:
8000bcec:	eb cd 40 80 	pushm	r7,lr
8000bcf0:	1a 97       	mov	r7,sp
8000bcf2:	20 2d       	sub	sp,8
8000bcf4:	18 98       	mov	r8,r12
8000bcf6:	ef 68 ff f8 	st.b	r7[-8],r8
8000bcfa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bcfe:	30 18       	mov	r8,1
8000bd00:	f0 09 18 00 	cp.b	r9,r8
8000bd04:	e0 8b 00 10 	brhi	8000bd24 <mem_wr_protect+0x38>
8000bd08:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bd0c:	48 ba       	lddpc	r10,8000bd38 <mem_wr_protect+0x4c>
8000bd0e:	12 98       	mov	r8,r9
8000bd10:	a3 78       	lsl	r8,0x3
8000bd12:	12 18       	sub	r8,r9
8000bd14:	a3 68       	lsl	r8,0x2
8000bd16:	f4 08 00 08 	add	r8,r10,r8
8000bd1a:	2f 88       	sub	r8,-8
8000bd1c:	70 08       	ld.w	r8,r8[0x0]
8000bd1e:	5d 18       	icall	r8
8000bd20:	18 98       	mov	r8,r12
8000bd22:	c0 28       	rjmp	8000bd26 <mem_wr_protect+0x3a>
8000bd24:	30 18       	mov	r8,1
8000bd26:	ef 68 ff ff 	st.b	r7[-1],r8
8000bd2a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bd2e:	10 9c       	mov	r12,r8
8000bd30:	2f ed       	sub	sp,-8
8000bd32:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd36:	00 00       	add	r0,r0
8000bd38:	80 00       	ld.sh	r0,r0[0x0]
8000bd3a:	ee 24 eb cd 	sub	r4,977869

8000bd3c <mem_name>:
8000bd3c:	eb cd 40 80 	pushm	r7,lr
8000bd40:	1a 97       	mov	r7,sp
8000bd42:	20 1d       	sub	sp,4
8000bd44:	18 98       	mov	r8,r12
8000bd46:	ef 68 ff fc 	st.b	r7[-4],r8
8000bd4a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bd4e:	30 18       	mov	r8,1
8000bd50:	f0 09 18 00 	cp.b	r9,r8
8000bd54:	e0 8b 00 0e 	brhi	8000bd70 <mem_name+0x34>
8000bd58:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bd5c:	48 8a       	lddpc	r10,8000bd7c <mem_name+0x40>
8000bd5e:	12 98       	mov	r8,r9
8000bd60:	a3 78       	lsl	r8,0x3
8000bd62:	12 18       	sub	r8,r9
8000bd64:	a3 68       	lsl	r8,0x2
8000bd66:	f4 08 00 08 	add	r8,r10,r8
8000bd6a:	2e 88       	sub	r8,-24
8000bd6c:	70 08       	ld.w	r8,r8[0x0]
8000bd6e:	c0 28       	rjmp	8000bd72 <mem_name+0x36>
8000bd70:	30 08       	mov	r8,0
8000bd72:	10 9c       	mov	r12,r8
8000bd74:	2f fd       	sub	sp,-4
8000bd76:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd7a:	00 00       	add	r0,r0
8000bd7c:	80 00       	ld.sh	r0,r0[0x0]
8000bd7e:	ee 24 eb cd 	sub	r4,977869

8000bd80 <memory_2_usb>:
8000bd80:	eb cd 40 80 	pushm	r7,lr
8000bd84:	1a 97       	mov	r7,sp
8000bd86:	20 4d       	sub	sp,16
8000bd88:	18 99       	mov	r9,r12
8000bd8a:	ef 4b ff f4 	st.w	r7[-12],r11
8000bd8e:	14 98       	mov	r8,r10
8000bd90:	ef 69 ff f8 	st.b	r7[-8],r9
8000bd94:	ef 58 ff f0 	st.h	r7[-16],r8
8000bd98:	f0 1f 00 14 	mcall	8000bde8 <memory_2_usb+0x68>
8000bd9c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bda0:	30 18       	mov	r8,1
8000bda2:	f0 09 18 00 	cp.b	r9,r8
8000bda6:	e0 8b 00 15 	brhi	8000bdd0 <memory_2_usb+0x50>
8000bdaa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bdae:	49 0a       	lddpc	r10,8000bdec <memory_2_usb+0x6c>
8000bdb0:	12 98       	mov	r8,r9
8000bdb2:	a3 78       	lsl	r8,0x3
8000bdb4:	12 18       	sub	r8,r9
8000bdb6:	a3 68       	lsl	r8,0x2
8000bdb8:	f4 08 00 08 	add	r8,r10,r8
8000bdbc:	2f 08       	sub	r8,-16
8000bdbe:	70 08       	ld.w	r8,r8[0x0]
8000bdc0:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000bdc4:	12 9b       	mov	r11,r9
8000bdc6:	ee fc ff f4 	ld.w	r12,r7[-12]
8000bdca:	5d 18       	icall	r8
8000bdcc:	18 98       	mov	r8,r12
8000bdce:	c0 28       	rjmp	8000bdd2 <memory_2_usb+0x52>
8000bdd0:	30 18       	mov	r8,1
8000bdd2:	ef 48 ff fc 	st.w	r7[-4],r8
8000bdd6:	f0 1f 00 07 	mcall	8000bdf0 <memory_2_usb+0x70>
8000bdda:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bdde:	10 9c       	mov	r12,r8
8000bde0:	2f cd       	sub	sp,-16
8000bde2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bde6:	00 00       	add	r0,r0
8000bde8:	80 00       	ld.sh	r0,r0[0x0]
8000bdea:	be b8       	st.b	pc[0x3],r8
8000bdec:	80 00       	ld.sh	r0,r0[0x0]
8000bdee:	ee 24 80 00 	sub	r4,950272
8000bdf2:	be cc       	st.b	pc[0x4],r12

8000bdf4 <usb_2_memory>:
8000bdf4:	eb cd 40 80 	pushm	r7,lr
8000bdf8:	1a 97       	mov	r7,sp
8000bdfa:	20 4d       	sub	sp,16
8000bdfc:	18 99       	mov	r9,r12
8000bdfe:	ef 4b ff f4 	st.w	r7[-12],r11
8000be02:	14 98       	mov	r8,r10
8000be04:	ef 69 ff f8 	st.b	r7[-8],r9
8000be08:	ef 58 ff f0 	st.h	r7[-16],r8
8000be0c:	f0 1f 00 14 	mcall	8000be5c <usb_2_memory+0x68>
8000be10:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000be14:	30 18       	mov	r8,1
8000be16:	f0 09 18 00 	cp.b	r9,r8
8000be1a:	e0 8b 00 15 	brhi	8000be44 <usb_2_memory+0x50>
8000be1e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000be22:	49 0a       	lddpc	r10,8000be60 <usb_2_memory+0x6c>
8000be24:	12 98       	mov	r8,r9
8000be26:	a3 78       	lsl	r8,0x3
8000be28:	12 18       	sub	r8,r9
8000be2a:	a3 68       	lsl	r8,0x2
8000be2c:	f4 08 00 08 	add	r8,r10,r8
8000be30:	2e c8       	sub	r8,-20
8000be32:	70 08       	ld.w	r8,r8[0x0]
8000be34:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000be38:	12 9b       	mov	r11,r9
8000be3a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000be3e:	5d 18       	icall	r8
8000be40:	18 98       	mov	r8,r12
8000be42:	c0 28       	rjmp	8000be46 <usb_2_memory+0x52>
8000be44:	30 18       	mov	r8,1
8000be46:	ef 48 ff fc 	st.w	r7[-4],r8
8000be4a:	f0 1f 00 07 	mcall	8000be64 <usb_2_memory+0x70>
8000be4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be52:	10 9c       	mov	r12,r8
8000be54:	2f cd       	sub	sp,-16
8000be56:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be5a:	00 00       	add	r0,r0
8000be5c:	80 00       	ld.sh	r0,r0[0x0]
8000be5e:	be e0       	st.b	pc[0x6],r0
8000be60:	80 00       	ld.sh	r0,r0[0x0]
8000be62:	ee 24 80 00 	sub	r4,950272
8000be66:	be f4       	st.b	pc[0x7],r4

8000be68 <ui_init>:
8000be68:	eb cd 40 80 	pushm	r7,lr
8000be6c:	1a 97       	mov	r7,sp
8000be6e:	30 1c       	mov	r12,1
8000be70:	f0 1f 00 04 	mcall	8000be80 <ui_init+0x18>
8000be74:	30 2c       	mov	r12,2
8000be76:	f0 1f 00 04 	mcall	8000be84 <ui_init+0x1c>
8000be7a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be7e:	00 00       	add	r0,r0
8000be80:	80 00       	ld.sh	r0,r0[0x0]
8000be82:	42 f4       	lddsp	r4,sp[0xbc]
8000be84:	80 00       	ld.sh	r0,r0[0x0]
8000be86:	42 3c       	lddsp	r12,sp[0x8c]

8000be88 <ui_powerdown>:
8000be88:	eb cd 40 80 	pushm	r7,lr
8000be8c:	1a 97       	mov	r7,sp
8000be8e:	30 1c       	mov	r12,1
8000be90:	f0 1f 00 04 	mcall	8000bea0 <ui_powerdown+0x18>
8000be94:	30 2c       	mov	r12,2
8000be96:	f0 1f 00 03 	mcall	8000bea0 <ui_powerdown+0x18>
8000be9a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be9e:	00 00       	add	r0,r0
8000bea0:	80 00       	ld.sh	r0,r0[0x0]
8000bea2:	42 3c       	lddsp	r12,sp[0x8c]

8000bea4 <ui_wakeup>:
8000bea4:	eb cd 40 80 	pushm	r7,lr
8000bea8:	1a 97       	mov	r7,sp
8000beaa:	30 1c       	mov	r12,1
8000beac:	f0 1f 00 02 	mcall	8000beb4 <ui_wakeup+0x10>
8000beb0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000beb4:	80 00       	ld.sh	r0,r0[0x0]
8000beb6:	42 f4       	lddsp	r4,sp[0xbc]

8000beb8 <ui_start_read>:
8000beb8:	eb cd 40 80 	pushm	r7,lr
8000bebc:	1a 97       	mov	r7,sp
8000bebe:	30 4c       	mov	r12,4
8000bec0:	f0 1f 00 02 	mcall	8000bec8 <ui_start_read+0x10>
8000bec4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bec8:	80 00       	ld.sh	r0,r0[0x0]
8000beca:	42 f4       	lddsp	r4,sp[0xbc]

8000becc <ui_stop_read>:
8000becc:	eb cd 40 80 	pushm	r7,lr
8000bed0:	1a 97       	mov	r7,sp
8000bed2:	30 4c       	mov	r12,4
8000bed4:	f0 1f 00 02 	mcall	8000bedc <ui_stop_read+0x10>
8000bed8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bedc:	80 00       	ld.sh	r0,r0[0x0]
8000bede:	42 3c       	lddsp	r12,sp[0x8c]

8000bee0 <ui_start_write>:
8000bee0:	eb cd 40 80 	pushm	r7,lr
8000bee4:	1a 97       	mov	r7,sp
8000bee6:	30 8c       	mov	r12,8
8000bee8:	f0 1f 00 02 	mcall	8000bef0 <ui_start_write+0x10>
8000beec:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bef0:	80 00       	ld.sh	r0,r0[0x0]
8000bef2:	42 f4       	lddsp	r4,sp[0xbc]

8000bef4 <ui_stop_write>:
8000bef4:	eb cd 40 80 	pushm	r7,lr
8000bef8:	1a 97       	mov	r7,sp
8000befa:	30 8c       	mov	r12,8
8000befc:	f0 1f 00 02 	mcall	8000bf04 <ui_stop_write+0x10>
8000bf00:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf04:	80 00       	ld.sh	r0,r0[0x0]
8000bf06:	42 3c       	lddsp	r12,sp[0x8c]

8000bf08 <ui_process>:
8000bf08:	eb cd 40 80 	pushm	r7,lr
8000bf0c:	1a 97       	mov	r7,sp
8000bf0e:	20 1d       	sub	sp,4
8000bf10:	18 98       	mov	r8,r12
8000bf12:	ef 58 ff fc 	st.h	r7[-4],r8
8000bf16:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000bf1a:	e0 68 4d d3 	mov	r8,19923
8000bf1e:	ea 18 10 62 	orh	r8,0x1062
8000bf22:	f4 08 06 48 	mulu.d	r8,r10,r8
8000bf26:	a7 89       	lsr	r9,0x6
8000bf28:	e0 68 03 e8 	mov	r8,1000
8000bf2c:	f2 08 02 48 	mul	r8,r9,r8
8000bf30:	f4 08 01 08 	sub	r8,r10,r8
8000bf34:	5c 88       	casts.h	r8
8000bf36:	c0 41       	brne	8000bf3e <ui_process+0x36>
8000bf38:	30 2c       	mov	r12,2
8000bf3a:	f0 1f 00 10 	mcall	8000bf78 <ui_process+0x70>
8000bf3e:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000bf42:	e0 68 4d d3 	mov	r8,19923
8000bf46:	ea 18 10 62 	orh	r8,0x1062
8000bf4a:	f4 08 06 48 	mulu.d	r8,r10,r8
8000bf4e:	a7 89       	lsr	r9,0x6
8000bf50:	e0 68 03 e8 	mov	r8,1000
8000bf54:	f2 08 02 48 	mul	r8,r9,r8
8000bf58:	f4 08 01 08 	sub	r8,r10,r8
8000bf5c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000bf60:	e0 68 01 f4 	mov	r8,500
8000bf64:	f0 09 19 00 	cp.h	r9,r8
8000bf68:	c0 41       	brne	8000bf70 <ui_process+0x68>
8000bf6a:	30 2c       	mov	r12,2
8000bf6c:	f0 1f 00 04 	mcall	8000bf7c <ui_process+0x74>
8000bf70:	2f fd       	sub	sp,-4
8000bf72:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf76:	00 00       	add	r0,r0
8000bf78:	80 00       	ld.sh	r0,r0[0x0]
8000bf7a:	42 f4       	lddsp	r4,sp[0xbc]
8000bf7c:	80 00       	ld.sh	r0,r0[0x0]
8000bf7e:	42 3c       	lddsp	r12,sp[0x8c]

8000bf80 <udi_msc_enable>:
8000bf80:	eb cd 40 80 	pushm	r7,lr
8000bf84:	1a 97       	mov	r7,sp
8000bf86:	49 49       	lddpc	r9,8000bfd4 <udi_msc_enable+0x54>
8000bf88:	30 08       	mov	r8,0
8000bf8a:	b2 88       	st.b	r9[0x0],r8
8000bf8c:	49 39       	lddpc	r9,8000bfd8 <udi_msc_enable+0x58>
8000bf8e:	30 08       	mov	r8,0
8000bf90:	b2 88       	st.b	r9[0x0],r8
8000bf92:	f0 1f 00 13 	mcall	8000bfdc <udi_msc_enable+0x5c>
8000bf96:	18 98       	mov	r8,r12
8000bf98:	49 29       	lddpc	r9,8000bfe0 <udi_msc_enable+0x60>
8000bf9a:	b2 88       	st.b	r9[0x0],r8
8000bf9c:	49 18       	lddpc	r8,8000bfe0 <udi_msc_enable+0x60>
8000bf9e:	11 88       	ld.ub	r8,r8[0x0]
8000bfa0:	58 08       	cp.w	r8,0
8000bfa2:	c0 31       	brne	8000bfa8 <udi_msc_enable+0x28>
8000bfa4:	30 08       	mov	r8,0
8000bfa6:	c1 38       	rjmp	8000bfcc <udi_msc_enable+0x4c>
8000bfa8:	48 e8       	lddpc	r8,8000bfe0 <udi_msc_enable+0x60>
8000bfaa:	11 88       	ld.ub	r8,r8[0x0]
8000bfac:	20 18       	sub	r8,1
8000bfae:	5c 58       	castu.b	r8
8000bfb0:	48 c9       	lddpc	r9,8000bfe0 <udi_msc_enable+0x60>
8000bfb2:	b2 88       	st.b	r9[0x0],r8
8000bfb4:	f0 1f 00 0c 	mcall	8000bfe4 <udi_msc_enable+0x64>
8000bfb8:	18 98       	mov	r8,r12
8000bfba:	ec 18 00 01 	eorl	r8,0x1
8000bfbe:	5c 58       	castu.b	r8
8000bfc0:	c0 30       	breq	8000bfc6 <udi_msc_enable+0x46>
8000bfc2:	30 08       	mov	r8,0
8000bfc4:	c0 48       	rjmp	8000bfcc <udi_msc_enable+0x4c>
8000bfc6:	f0 1f 00 09 	mcall	8000bfe8 <udi_msc_enable+0x68>
8000bfca:	30 18       	mov	r8,1
8000bfcc:	10 9c       	mov	r12,r8
8000bfce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bfd2:	00 00       	add	r0,r0
8000bfd4:	00 00       	add	r0,r0
8000bfd6:	08 9d       	mov	sp,r4
8000bfd8:	00 00       	add	r0,r0
8000bfda:	08 9c       	mov	r12,r4
8000bfdc:	80 00       	ld.sh	r0,r0[0x0]
8000bfde:	bc 3c       	st.h	lr[0x6],r12
8000bfe0:	00 00       	add	r0,r0
8000bfe2:	08 84       	andn	r4,r4
8000bfe4:	80 00       	ld.sh	r0,r0[0x0]
8000bfe6:	de b0       	acall	0x3ac
8000bfe8:	80 00       	ld.sh	r0,r0[0x0]
8000bfea:	c1 64       	brge	8000c016 <udi_msc_setup+0xe>

8000bfec <udi_msc_disable>:
8000bfec:	eb cd 40 80 	pushm	r7,lr
8000bff0:	1a 97       	mov	r7,sp
8000bff2:	48 49       	lddpc	r9,8000c000 <udi_msc_disable+0x14>
8000bff4:	30 08       	mov	r8,0
8000bff6:	b2 88       	st.b	r9[0x0],r8
8000bff8:	f0 1f 00 03 	mcall	8000c004 <udi_msc_disable+0x18>
8000bffc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c000:	00 00       	add	r0,r0
8000c002:	08 9d       	mov	sp,r4
8000c004:	80 00       	ld.sh	r0,r0[0x0]
8000c006:	de c8       	*unknown*

8000c008 <udi_msc_setup>:
8000c008:	eb cd 40 80 	pushm	r7,lr
8000c00c:	1a 97       	mov	r7,sp
8000c00e:	4a f8       	lddpc	r8,8000c0c8 <udi_msc_setup+0xc0>
8000c010:	11 88       	ld.ub	r8,r8[0x0]
8000c012:	10 99       	mov	r9,r8
8000c014:	30 08       	mov	r8,0
8000c016:	f0 09 18 00 	cp.b	r9,r8
8000c01a:	c2 34       	brge	8000c060 <udi_msc_setup+0x58>
8000c01c:	4a b8       	lddpc	r8,8000c0c8 <udi_msc_setup+0xc0>
8000c01e:	11 88       	ld.ub	r8,r8[0x0]
8000c020:	e2 18 00 60 	andl	r8,0x60,COH
8000c024:	e0 48 00 20 	cp.w	r8,32
8000c028:	c1 c1       	brne	8000c060 <udi_msc_setup+0x58>
8000c02a:	4a 88       	lddpc	r8,8000c0c8 <udi_msc_setup+0xc0>
8000c02c:	11 98       	ld.ub	r8,r8[0x1]
8000c02e:	e0 48 00 fe 	cp.w	r8,254
8000c032:	c1 71       	brne	8000c060 <udi_msc_setup+0x58>
8000c034:	4a 58       	lddpc	r8,8000c0c8 <udi_msc_setup+0xc0>
8000c036:	90 39       	ld.sh	r9,r8[0x6]
8000c038:	30 18       	mov	r8,1
8000c03a:	f0 09 19 00 	cp.h	r9,r8
8000c03e:	c0 30       	breq	8000c044 <udi_msc_setup+0x3c>
8000c040:	30 08       	mov	r8,0
8000c042:	c4 08       	rjmp	8000c0c2 <udi_msc_setup+0xba>
8000c044:	4a 18       	lddpc	r8,8000c0c8 <udi_msc_setup+0xc0>
8000c046:	90 18       	ld.sh	r8,r8[0x2]
8000c048:	58 08       	cp.w	r8,0
8000c04a:	c0 30       	breq	8000c050 <udi_msc_setup+0x48>
8000c04c:	30 08       	mov	r8,0
8000c04e:	c3 a8       	rjmp	8000c0c2 <udi_msc_setup+0xba>
8000c050:	49 e8       	lddpc	r8,8000c0c8 <udi_msc_setup+0xc0>
8000c052:	49 f9       	lddpc	r9,8000c0cc <udi_msc_setup+0xc4>
8000c054:	91 29       	st.w	r8[0x8],r9
8000c056:	49 d9       	lddpc	r9,8000c0c8 <udi_msc_setup+0xc0>
8000c058:	30 18       	mov	r8,1
8000c05a:	b2 68       	st.h	r9[0xc],r8
8000c05c:	30 18       	mov	r8,1
8000c05e:	c3 28       	rjmp	8000c0c2 <udi_msc_setup+0xba>
8000c060:	49 a8       	lddpc	r8,8000c0c8 <udi_msc_setup+0xc0>
8000c062:	11 88       	ld.ub	r8,r8[0x0]
8000c064:	10 99       	mov	r9,r8
8000c066:	30 08       	mov	r8,0
8000c068:	f0 09 18 00 	cp.b	r9,r8
8000c06c:	c2 a5       	brlt	8000c0c0 <udi_msc_setup+0xb8>
8000c06e:	49 78       	lddpc	r8,8000c0c8 <udi_msc_setup+0xc0>
8000c070:	11 88       	ld.ub	r8,r8[0x0]
8000c072:	e2 18 00 60 	andl	r8,0x60,COH
8000c076:	e0 48 00 20 	cp.w	r8,32
8000c07a:	c2 31       	brne	8000c0c0 <udi_msc_setup+0xb8>
8000c07c:	49 38       	lddpc	r8,8000c0c8 <udi_msc_setup+0xc0>
8000c07e:	11 98       	ld.ub	r8,r8[0x1]
8000c080:	e0 48 00 ff 	cp.w	r8,255
8000c084:	c1 e1       	brne	8000c0c0 <udi_msc_setup+0xb8>
8000c086:	49 18       	lddpc	r8,8000c0c8 <udi_msc_setup+0xc0>
8000c088:	90 38       	ld.sh	r8,r8[0x6]
8000c08a:	58 08       	cp.w	r8,0
8000c08c:	c0 30       	breq	8000c092 <udi_msc_setup+0x8a>
8000c08e:	30 08       	mov	r8,0
8000c090:	c1 98       	rjmp	8000c0c2 <udi_msc_setup+0xba>
8000c092:	48 e8       	lddpc	r8,8000c0c8 <udi_msc_setup+0xc0>
8000c094:	90 18       	ld.sh	r8,r8[0x2]
8000c096:	58 08       	cp.w	r8,0
8000c098:	c0 30       	breq	8000c09e <udi_msc_setup+0x96>
8000c09a:	30 08       	mov	r8,0
8000c09c:	c1 38       	rjmp	8000c0c2 <udi_msc_setup+0xba>
8000c09e:	48 d9       	lddpc	r9,8000c0d0 <udi_msc_setup+0xc8>
8000c0a0:	30 08       	mov	r8,0
8000c0a2:	b2 88       	st.b	r9[0x0],r8
8000c0a4:	48 c9       	lddpc	r9,8000c0d4 <udi_msc_setup+0xcc>
8000c0a6:	30 08       	mov	r8,0
8000c0a8:	b2 88       	st.b	r9[0x0],r8
8000c0aa:	30 2c       	mov	r12,2
8000c0ac:	f0 1f 00 0b 	mcall	8000c0d8 <udi_msc_setup+0xd0>
8000c0b0:	e0 6c 00 81 	mov	r12,129
8000c0b4:	f0 1f 00 09 	mcall	8000c0d8 <udi_msc_setup+0xd0>
8000c0b8:	f0 1f 00 09 	mcall	8000c0dc <udi_msc_setup+0xd4>
8000c0bc:	30 18       	mov	r8,1
8000c0be:	c0 28       	rjmp	8000c0c2 <udi_msc_setup+0xba>
8000c0c0:	30 08       	mov	r8,0
8000c0c2:	10 9c       	mov	r12,r8
8000c0c4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0c8:	00 00       	add	r0,r0
8000c0ca:	0d b8       	ld.ub	r8,r6[0x3]
8000c0cc:	00 00       	add	r0,r0
8000c0ce:	08 84       	andn	r4,r4
8000c0d0:	00 00       	add	r0,r0
8000c0d2:	08 9c       	mov	r12,r4
8000c0d4:	00 00       	add	r0,r0
8000c0d6:	08 9d       	mov	sp,r4
8000c0d8:	80 00       	ld.sh	r0,r0[0x0]
8000c0da:	a2 5c       	st.h	r1[0xa],r12
8000c0dc:	80 00       	ld.sh	r0,r0[0x0]
8000c0de:	c1 64       	brge	8000c10a <udi_msc_cbw_invalid+0x1a>

8000c0e0 <udi_msc_getsetting>:
8000c0e0:	eb cd 40 80 	pushm	r7,lr
8000c0e4:	1a 97       	mov	r7,sp
8000c0e6:	30 08       	mov	r8,0
8000c0e8:	10 9c       	mov	r12,r8
8000c0ea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0ee:	d7 03       	nop

8000c0f0 <udi_msc_cbw_invalid>:
8000c0f0:	eb cd 40 80 	pushm	r7,lr
8000c0f4:	1a 97       	mov	r7,sp
8000c0f6:	48 a8       	lddpc	r8,8000c11c <udi_msc_cbw_invalid+0x2c>
8000c0f8:	11 88       	ld.ub	r8,r8[0x0]
8000c0fa:	ec 18 00 01 	eorl	r8,0x1
8000c0fe:	5c 58       	castu.b	r8
8000c100:	c0 a1       	brne	8000c114 <udi_msc_cbw_invalid+0x24>
8000c102:	30 2c       	mov	r12,2
8000c104:	f0 1f 00 07 	mcall	8000c120 <udi_msc_cbw_invalid+0x30>
8000c108:	fe cb 00 18 	sub	r11,pc,24
8000c10c:	30 2c       	mov	r12,2
8000c10e:	f0 1f 00 06 	mcall	8000c124 <udi_msc_cbw_invalid+0x34>
8000c112:	c0 28       	rjmp	8000c116 <udi_msc_cbw_invalid+0x26>
8000c114:	d7 03       	nop
8000c116:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c11a:	00 00       	add	r0,r0
8000c11c:	00 00       	add	r0,r0
8000c11e:	08 9c       	mov	r12,r4
8000c120:	80 00       	ld.sh	r0,r0[0x0]
8000c122:	9e e4       	ld.uh	r4,pc[0xc]
8000c124:	80 00       	ld.sh	r0,r0[0x0]
8000c126:	a2 f8       	st.b	r1[0x7],r8

8000c128 <udi_msc_csw_invalid>:
8000c128:	eb cd 40 80 	pushm	r7,lr
8000c12c:	1a 97       	mov	r7,sp
8000c12e:	48 b8       	lddpc	r8,8000c158 <udi_msc_csw_invalid+0x30>
8000c130:	11 88       	ld.ub	r8,r8[0x0]
8000c132:	ec 18 00 01 	eorl	r8,0x1
8000c136:	5c 58       	castu.b	r8
8000c138:	c0 c1       	brne	8000c150 <udi_msc_csw_invalid+0x28>
8000c13a:	e0 6c 00 81 	mov	r12,129
8000c13e:	f0 1f 00 08 	mcall	8000c15c <udi_msc_csw_invalid+0x34>
8000c142:	fe cb 00 1a 	sub	r11,pc,26
8000c146:	e0 6c 00 81 	mov	r12,129
8000c14a:	f0 1f 00 06 	mcall	8000c160 <udi_msc_csw_invalid+0x38>
8000c14e:	c0 28       	rjmp	8000c152 <udi_msc_csw_invalid+0x2a>
8000c150:	d7 03       	nop
8000c152:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c156:	00 00       	add	r0,r0
8000c158:	00 00       	add	r0,r0
8000c15a:	08 9c       	mov	r12,r4
8000c15c:	80 00       	ld.sh	r0,r0[0x0]
8000c15e:	9e e4       	ld.uh	r4,pc[0xc]
8000c160:	80 00       	ld.sh	r0,r0[0x0]
8000c162:	a2 f8       	st.b	r1[0x7],r8

8000c164 <udi_msc_cbw_wait>:
8000c164:	eb cd 40 80 	pushm	r7,lr
8000c168:	1a 97       	mov	r7,sp
8000c16a:	48 aa       	lddpc	r10,8000c190 <udi_msc_cbw_wait+0x2c>
8000c16c:	48 a8       	lddpc	r8,8000c194 <udi_msc_cbw_wait+0x30>
8000c16e:	31 f9       	mov	r9,31
8000c170:	30 1b       	mov	r11,1
8000c172:	30 2c       	mov	r12,2
8000c174:	f0 1f 00 09 	mcall	8000c198 <udi_msc_cbw_wait+0x34>
8000c178:	18 98       	mov	r8,r12
8000c17a:	ec 18 00 01 	eorl	r8,0x1
8000c17e:	5c 58       	castu.b	r8
8000c180:	c0 60       	breq	8000c18c <udi_msc_cbw_wait+0x28>
8000c182:	fe cb 00 1e 	sub	r11,pc,30
8000c186:	30 2c       	mov	r12,2
8000c188:	f0 1f 00 05 	mcall	8000c19c <udi_msc_cbw_wait+0x38>
8000c18c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c190:	00 00       	add	r0,r0
8000c192:	08 64       	and	r4,r4
8000c194:	80 00       	ld.sh	r0,r0[0x0]
8000c196:	c1 a0       	breq	8000c1ca <udi_msc_cbw_received+0x2a>
8000c198:	80 00       	ld.sh	r0,r0[0x0]
8000c19a:	a1 38       	mul	r8,r0
8000c19c:	80 00       	ld.sh	r0,r0[0x0]
8000c19e:	a2 f8       	st.b	r1[0x7],r8

8000c1a0 <udi_msc_cbw_received>:
8000c1a0:	eb cd 40 80 	pushm	r7,lr
8000c1a4:	1a 97       	mov	r7,sp
8000c1a6:	20 3d       	sub	sp,12
8000c1a8:	ef 4c ff fc 	st.w	r7[-4],r12
8000c1ac:	ef 4b ff f8 	st.w	r7[-8],r11
8000c1b0:	14 98       	mov	r8,r10
8000c1b2:	ef 68 ff f4 	st.b	r7[-12],r8
8000c1b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c1ba:	58 08       	cp.w	r8,0
8000c1bc:	c6 11       	brne	8000c27e <udi_msc_cbw_received+0xde>
8000c1be:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c1c2:	59 f8       	cp.w	r8,31
8000c1c4:	c0 91       	brne	8000c1d6 <udi_msc_cbw_received+0x36>
8000c1c6:	4b 18       	lddpc	r8,8000c288 <udi_msc_cbw_received+0xe8>
8000c1c8:	70 08       	ld.w	r8,r8[0x0]
8000c1ca:	e0 69 42 43 	mov	r9,16963
8000c1ce:	ea 19 55 53 	orh	r9,0x5553
8000c1d2:	12 38       	cp.w	r8,r9
8000c1d4:	c0 90       	breq	8000c1e6 <udi_msc_cbw_received+0x46>
8000c1d6:	4a e9       	lddpc	r9,8000c28c <udi_msc_cbw_received+0xec>
8000c1d8:	30 18       	mov	r8,1
8000c1da:	b2 88       	st.b	r9[0x0],r8
8000c1dc:	f0 1f 00 2d 	mcall	8000c290 <udi_msc_cbw_received+0xf0>
8000c1e0:	f0 1f 00 2d 	mcall	8000c294 <udi_msc_cbw_received+0xf4>
8000c1e4:	c4 e8       	rjmp	8000c280 <udi_msc_cbw_received+0xe0>
8000c1e6:	4a 98       	lddpc	r8,8000c288 <udi_msc_cbw_received+0xe8>
8000c1e8:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000c1ec:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000c1f0:	4a 69       	lddpc	r9,8000c288 <udi_msc_cbw_received+0xe8>
8000c1f2:	f3 68 00 0d 	st.b	r9[13],r8
8000c1f6:	4a 58       	lddpc	r8,8000c288 <udi_msc_cbw_received+0xe8>
8000c1f8:	f1 39 00 0d 	ld.ub	r9,r8[13]
8000c1fc:	4a 78       	lddpc	r8,8000c298 <udi_msc_cbw_received+0xf8>
8000c1fe:	11 88       	ld.ub	r8,r8[0x0]
8000c200:	f0 09 18 00 	cp.b	r9,r8
8000c204:	e0 88 00 07 	brls	8000c212 <udi_msc_cbw_received+0x72>
8000c208:	f0 1f 00 25 	mcall	8000c29c <udi_msc_cbw_received+0xfc>
8000c20c:	f0 1f 00 25 	mcall	8000c2a0 <udi_msc_cbw_received+0x100>
8000c210:	c3 88       	rjmp	8000c280 <udi_msc_cbw_received+0xe0>
8000c212:	49 e8       	lddpc	r8,8000c288 <udi_msc_cbw_received+0xe8>
8000c214:	70 28       	ld.w	r8,r8[0x8]
8000c216:	5c b8       	swap.b	r8
8000c218:	10 99       	mov	r9,r8
8000c21a:	4a 38       	lddpc	r8,8000c2a4 <udi_msc_cbw_received+0x104>
8000c21c:	91 29       	st.w	r8[0x8],r9
8000c21e:	49 b8       	lddpc	r8,8000c288 <udi_msc_cbw_received+0xe8>
8000c220:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000c224:	e0 48 00 5a 	cp.w	r8,90
8000c228:	e0 8b 00 26 	brhi	8000c274 <udi_msc_cbw_received+0xd4>
8000c22c:	49 f9       	lddpc	r9,8000c2a8 <udi_msc_cbw_received+0x108>
8000c22e:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
8000c232:	f0 1f 00 1f 	mcall	8000c2ac <udi_msc_cbw_received+0x10c>
8000c236:	c2 58       	rjmp	8000c280 <udi_msc_cbw_received+0xe0>
8000c238:	f0 1f 00 1e 	mcall	8000c2b0 <udi_msc_cbw_received+0x110>
8000c23c:	c2 28       	rjmp	8000c280 <udi_msc_cbw_received+0xe0>
8000c23e:	30 0c       	mov	r12,0
8000c240:	f0 1f 00 1d 	mcall	8000c2b4 <udi_msc_cbw_received+0x114>
8000c244:	c1 e8       	rjmp	8000c280 <udi_msc_cbw_received+0xe0>
8000c246:	30 1c       	mov	r12,1
8000c248:	f0 1f 00 1b 	mcall	8000c2b4 <udi_msc_cbw_received+0x114>
8000c24c:	c1 a8       	rjmp	8000c280 <udi_msc_cbw_received+0xe0>
8000c24e:	f0 1f 00 1b 	mcall	8000c2b8 <udi_msc_cbw_received+0x118>
8000c252:	c1 78       	rjmp	8000c280 <udi_msc_cbw_received+0xe0>
8000c254:	f0 1f 00 1a 	mcall	8000c2bc <udi_msc_cbw_received+0x11c>
8000c258:	c1 48       	rjmp	8000c280 <udi_msc_cbw_received+0xe0>
8000c25a:	f0 1f 00 1a 	mcall	8000c2c0 <udi_msc_cbw_received+0x120>
8000c25e:	f0 1f 00 11 	mcall	8000c2a0 <udi_msc_cbw_received+0x100>
8000c262:	c0 f8       	rjmp	8000c280 <udi_msc_cbw_received+0xe0>
8000c264:	30 1c       	mov	r12,1
8000c266:	f0 1f 00 18 	mcall	8000c2c4 <udi_msc_cbw_received+0x124>
8000c26a:	c0 b8       	rjmp	8000c280 <udi_msc_cbw_received+0xe0>
8000c26c:	30 0c       	mov	r12,0
8000c26e:	f0 1f 00 16 	mcall	8000c2c4 <udi_msc_cbw_received+0x124>
8000c272:	c0 78       	rjmp	8000c280 <udi_msc_cbw_received+0xe0>
8000c274:	f0 1f 00 15 	mcall	8000c2c8 <udi_msc_cbw_received+0x128>
8000c278:	f0 1f 00 0a 	mcall	8000c2a0 <udi_msc_cbw_received+0x100>
8000c27c:	c0 28       	rjmp	8000c280 <udi_msc_cbw_received+0xe0>
8000c27e:	d7 03       	nop
8000c280:	2f dd       	sub	sp,-12
8000c282:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c286:	00 00       	add	r0,r0
8000c288:	00 00       	add	r0,r0
8000c28a:	08 64       	and	r4,r4
8000c28c:	00 00       	add	r0,r0
8000c28e:	08 9c       	mov	r12,r4
8000c290:	80 00       	ld.sh	r0,r0[0x0]
8000c292:	c0 f0       	breq	8000c2b0 <udi_msc_cbw_received+0x110>
8000c294:	80 00       	ld.sh	r0,r0[0x0]
8000c296:	c1 28       	rjmp	8000c2ba <udi_msc_cbw_received+0x11a>
8000c298:	00 00       	add	r0,r0
8000c29a:	08 84       	andn	r4,r4
8000c29c:	80 00       	ld.sh	r0,r0[0x0]
8000c29e:	c5 c8       	rjmp	8000c356 <udi_msc_data_send+0x2a>
8000c2a0:	80 00       	ld.sh	r0,r0[0x0]
8000c2a2:	c3 c8       	rjmp	8000c31a <udi_msc_cbw_validate+0x4e>
8000c2a4:	00 00       	add	r0,r0
8000c2a6:	01 50       	ld.sh	r0,--r0
8000c2a8:	80 00       	ld.sh	r0,r0[0x0]
8000c2aa:	ee 5c 80 00 	cp.w	r12,1015808
8000c2ae:	c6 00       	breq	8000c36e <udi_msc_data_send+0x42>
8000c2b0:	80 00       	ld.sh	r0,r0[0x0]
8000c2b2:	c6 64       	brge	8000c37e <udi_msc_data_sent+0x2>
8000c2b4:	80 00       	ld.sh	r0,r0[0x0]
8000c2b6:	c7 fc       	rcall	8000c3b4 <udi_msc_data_sent+0x38>
8000c2b8:	80 00       	ld.sh	r0,r0[0x0]
8000c2ba:	c7 d4       	brge	8000c3b4 <udi_msc_data_sent+0x38>
8000c2bc:	80 00       	ld.sh	r0,r0[0x0]
8000c2be:	c9 4c       	rcall	8000c3e6 <udi_msc_csw_process+0x1e>
8000c2c0:	80 00       	ld.sh	r0,r0[0x0]
8000c2c2:	c5 3c       	rcall	8000c368 <udi_msc_data_send+0x3c>
8000c2c4:	80 00       	ld.sh	r0,r0[0x0]
8000c2c6:	c9 e8       	rjmp	8000c402 <udi_msc_csw_process+0x3a>
8000c2c8:	80 00       	ld.sh	r0,r0[0x0]
8000c2ca:	c5 e4       	brge	8000c386 <udi_msc_data_sent+0xa>

8000c2cc <udi_msc_cbw_validate>:
8000c2cc:	eb cd 40 80 	pushm	r7,lr
8000c2d0:	1a 97       	mov	r7,sp
8000c2d2:	20 2d       	sub	sp,8
8000c2d4:	ef 4c ff fc 	st.w	r7[-4],r12
8000c2d8:	16 98       	mov	r8,r11
8000c2da:	ef 68 ff f8 	st.b	r7[-8],r8
8000c2de:	49 08       	lddpc	r8,8000c31c <udi_msc_cbw_validate+0x50>
8000c2e0:	f1 39 00 0c 	ld.ub	r9,r8[12]
8000c2e4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c2e8:	f3 e8 20 08 	eor	r8,r9,r8
8000c2ec:	5c 58       	castu.b	r8
8000c2ee:	10 99       	mov	r9,r8
8000c2f0:	30 08       	mov	r8,0
8000c2f2:	f0 09 18 00 	cp.b	r9,r8
8000c2f6:	c0 75       	brlt	8000c304 <udi_msc_cbw_validate+0x38>
8000c2f8:	48 a8       	lddpc	r8,8000c320 <udi_msc_cbw_validate+0x54>
8000c2fa:	70 29       	ld.w	r9,r8[0x8]
8000c2fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c300:	10 39       	cp.w	r9,r8
8000c302:	c0 72       	brcc	8000c310 <udi_msc_cbw_validate+0x44>
8000c304:	f0 1f 00 08 	mcall	8000c324 <udi_msc_cbw_validate+0x58>
8000c308:	f0 1f 00 08 	mcall	8000c328 <udi_msc_cbw_validate+0x5c>
8000c30c:	30 08       	mov	r8,0
8000c30e:	c0 28       	rjmp	8000c312 <udi_msc_cbw_validate+0x46>
8000c310:	30 18       	mov	r8,1
8000c312:	10 9c       	mov	r12,r8
8000c314:	2f ed       	sub	sp,-8
8000c316:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c31a:	00 00       	add	r0,r0
8000c31c:	00 00       	add	r0,r0
8000c31e:	08 64       	and	r4,r4
8000c320:	00 00       	add	r0,r0
8000c322:	01 50       	ld.sh	r0,--r0
8000c324:	80 00       	ld.sh	r0,r0[0x0]
8000c326:	c5 c8       	rjmp	8000c3de <udi_msc_csw_process+0x16>
8000c328:	80 00       	ld.sh	r0,r0[0x0]
8000c32a:	c3 c8       	rjmp	8000c3a2 <udi_msc_data_sent+0x26>

8000c32c <udi_msc_data_send>:
8000c32c:	eb cd 40 80 	pushm	r7,lr
8000c330:	1a 97       	mov	r7,sp
8000c332:	20 2d       	sub	sp,8
8000c334:	ef 4c ff fc 	st.w	r7[-4],r12
8000c338:	16 98       	mov	r8,r11
8000c33a:	ef 68 ff f8 	st.b	r7[-8],r8
8000c33e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c342:	48 b8       	lddpc	r8,8000c36c <udi_msc_data_send+0x40>
8000c344:	ee fa ff fc 	ld.w	r10,r7[-4]
8000c348:	30 1b       	mov	r11,1
8000c34a:	e0 6c 00 81 	mov	r12,129
8000c34e:	f0 1f 00 09 	mcall	8000c370 <udi_msc_data_send+0x44>
8000c352:	18 98       	mov	r8,r12
8000c354:	ec 18 00 01 	eorl	r8,0x1
8000c358:	5c 58       	castu.b	r8
8000c35a:	c0 50       	breq	8000c364 <udi_msc_data_send+0x38>
8000c35c:	f0 1f 00 06 	mcall	8000c374 <udi_msc_data_send+0x48>
8000c360:	f0 1f 00 06 	mcall	8000c378 <udi_msc_data_send+0x4c>
8000c364:	2f ed       	sub	sp,-8
8000c366:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c36a:	00 00       	add	r0,r0
8000c36c:	80 00       	ld.sh	r0,r0[0x0]
8000c36e:	c3 7c       	rcall	8000c3dc <udi_msc_csw_process+0x14>
8000c370:	80 00       	ld.sh	r0,r0[0x0]
8000c372:	a1 38       	mul	r8,r0
8000c374:	80 00       	ld.sh	r0,r0[0x0]
8000c376:	c5 94       	brge	8000c428 <udi_msc_csw_send+0x4>
8000c378:	80 00       	ld.sh	r0,r0[0x0]
8000c37a:	c3 c8       	rjmp	8000c3f2 <udi_msc_csw_process+0x2a>

8000c37c <udi_msc_data_sent>:
8000c37c:	eb cd 40 80 	pushm	r7,lr
8000c380:	1a 97       	mov	r7,sp
8000c382:	20 3d       	sub	sp,12
8000c384:	ef 4c ff fc 	st.w	r7[-4],r12
8000c388:	ef 4b ff f8 	st.w	r7[-8],r11
8000c38c:	14 98       	mov	r8,r10
8000c38e:	ef 68 ff f4 	st.b	r7[-12],r8
8000c392:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c396:	58 08       	cp.w	r8,0
8000c398:	c0 d1       	brne	8000c3b2 <udi_msc_data_sent+0x36>
8000c39a:	f0 1f 00 09 	mcall	8000c3bc <udi_msc_data_sent+0x40>
8000c39e:	48 98       	lddpc	r8,8000c3c0 <udi_msc_data_sent+0x44>
8000c3a0:	70 29       	ld.w	r9,r8[0x8]
8000c3a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c3a6:	10 19       	sub	r9,r8
8000c3a8:	48 68       	lddpc	r8,8000c3c0 <udi_msc_data_sent+0x44>
8000c3aa:	91 29       	st.w	r8[0x8],r9
8000c3ac:	f0 1f 00 06 	mcall	8000c3c4 <udi_msc_data_sent+0x48>
8000c3b0:	c0 28       	rjmp	8000c3b4 <udi_msc_data_sent+0x38>
8000c3b2:	d7 03       	nop
8000c3b4:	2f dd       	sub	sp,-12
8000c3b6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3ba:	00 00       	add	r0,r0
8000c3bc:	80 00       	ld.sh	r0,r0[0x0]
8000c3be:	c5 3c       	rcall	8000c464 <udi_msc_csw_send+0x40>
8000c3c0:	00 00       	add	r0,r0
8000c3c2:	01 50       	ld.sh	r0,--r0
8000c3c4:	80 00       	ld.sh	r0,r0[0x0]
8000c3c6:	c3 c8       	rjmp	8000c43e <udi_msc_csw_send+0x1a>

8000c3c8 <udi_msc_csw_process>:
8000c3c8:	eb cd 40 80 	pushm	r7,lr
8000c3cc:	1a 97       	mov	r7,sp
8000c3ce:	49 28       	lddpc	r8,8000c414 <udi_msc_csw_process+0x4c>
8000c3d0:	70 28       	ld.w	r8,r8[0x8]
8000c3d2:	58 08       	cp.w	r8,0
8000c3d4:	c1 10       	breq	8000c3f6 <udi_msc_csw_process+0x2e>
8000c3d6:	49 18       	lddpc	r8,8000c418 <udi_msc_csw_process+0x50>
8000c3d8:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000c3dc:	10 99       	mov	r9,r8
8000c3de:	30 08       	mov	r8,0
8000c3e0:	f0 09 18 00 	cp.b	r9,r8
8000c3e4:	c0 64       	brge	8000c3f0 <udi_msc_csw_process+0x28>
8000c3e6:	e0 6c 00 81 	mov	r12,129
8000c3ea:	f0 1f 00 0d 	mcall	8000c41c <udi_msc_csw_process+0x54>
8000c3ee:	c0 48       	rjmp	8000c3f6 <udi_msc_csw_process+0x2e>
8000c3f0:	30 2c       	mov	r12,2
8000c3f2:	f0 1f 00 0b 	mcall	8000c41c <udi_msc_csw_process+0x54>
8000c3f6:	48 98       	lddpc	r8,8000c418 <udi_msc_csw_process+0x50>
8000c3f8:	70 19       	ld.w	r9,r8[0x4]
8000c3fa:	48 78       	lddpc	r8,8000c414 <udi_msc_csw_process+0x4c>
8000c3fc:	91 19       	st.w	r8[0x4],r9
8000c3fe:	48 68       	lddpc	r8,8000c414 <udi_msc_csw_process+0x4c>
8000c400:	70 28       	ld.w	r8,r8[0x8]
8000c402:	5c b8       	swap.b	r8
8000c404:	10 99       	mov	r9,r8
8000c406:	48 48       	lddpc	r8,8000c414 <udi_msc_csw_process+0x4c>
8000c408:	91 29       	st.w	r8[0x8],r9
8000c40a:	f0 1f 00 06 	mcall	8000c420 <udi_msc_csw_process+0x58>
8000c40e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c412:	00 00       	add	r0,r0
8000c414:	00 00       	add	r0,r0
8000c416:	01 50       	ld.sh	r0,--r0
8000c418:	00 00       	add	r0,r0
8000c41a:	08 64       	and	r4,r4
8000c41c:	80 00       	ld.sh	r0,r0[0x0]
8000c41e:	9e e4       	ld.uh	r4,pc[0xc]
8000c420:	80 00       	ld.sh	r0,r0[0x0]
8000c422:	c4 24       	brge	8000c4a6 <udi_msc_clear_sense+0x1a>

8000c424 <udi_msc_csw_send>:
8000c424:	eb cd 40 80 	pushm	r7,lr
8000c428:	1a 97       	mov	r7,sp
8000c42a:	48 ba       	lddpc	r10,8000c454 <udi_msc_csw_send+0x30>
8000c42c:	48 b8       	lddpc	r8,8000c458 <udi_msc_csw_send+0x34>
8000c42e:	30 d9       	mov	r9,13
8000c430:	30 0b       	mov	r11,0
8000c432:	e0 6c 00 81 	mov	r12,129
8000c436:	f0 1f 00 0a 	mcall	8000c45c <udi_msc_csw_send+0x38>
8000c43a:	18 98       	mov	r8,r12
8000c43c:	ec 18 00 01 	eorl	r8,0x1
8000c440:	5c 58       	castu.b	r8
8000c442:	c0 60       	breq	8000c44e <udi_msc_csw_send+0x2a>
8000c444:	48 7b       	lddpc	r11,8000c460 <udi_msc_csw_send+0x3c>
8000c446:	e0 6c 00 81 	mov	r12,129
8000c44a:	f0 1f 00 07 	mcall	8000c464 <udi_msc_csw_send+0x40>
8000c44e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c452:	00 00       	add	r0,r0
8000c454:	00 00       	add	r0,r0
8000c456:	01 50       	ld.sh	r0,--r0
8000c458:	80 00       	ld.sh	r0,r0[0x0]
8000c45a:	c4 68       	rjmp	8000c4e6 <udi_msc_sense_fail+0x32>
8000c45c:	80 00       	ld.sh	r0,r0[0x0]
8000c45e:	a1 38       	mul	r8,r0
8000c460:	80 00       	ld.sh	r0,r0[0x0]
8000c462:	c4 24       	brge	8000c4e6 <udi_msc_sense_fail+0x32>
8000c464:	80 00       	ld.sh	r0,r0[0x0]
8000c466:	a2 f8       	st.b	r1[0x7],r8

8000c468 <udi_msc_csw_sent>:
8000c468:	eb cd 40 80 	pushm	r7,lr
8000c46c:	1a 97       	mov	r7,sp
8000c46e:	20 3d       	sub	sp,12
8000c470:	ef 4c ff fc 	st.w	r7[-4],r12
8000c474:	ef 4b ff f8 	st.w	r7[-8],r11
8000c478:	14 98       	mov	r8,r10
8000c47a:	ef 68 ff f4 	st.b	r7[-12],r8
8000c47e:	f0 1f 00 03 	mcall	8000c488 <udi_msc_csw_sent+0x20>
8000c482:	2f dd       	sub	sp,-12
8000c484:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c488:	80 00       	ld.sh	r0,r0[0x0]
8000c48a:	c1 64       	brge	8000c4b6 <udi_msc_sense_fail+0x2>

8000c48c <udi_msc_clear_sense>:
8000c48c:	eb cd 40 80 	pushm	r7,lr
8000c490:	1a 97       	mov	r7,sp
8000c492:	31 2a       	mov	r10,18
8000c494:	30 0b       	mov	r11,0
8000c496:	48 6c       	lddpc	r12,8000c4ac <udi_msc_clear_sense+0x20>
8000c498:	f0 1f 00 06 	mcall	8000c4b0 <udi_msc_clear_sense+0x24>
8000c49c:	48 49       	lddpc	r9,8000c4ac <udi_msc_clear_sense+0x20>
8000c49e:	3f 08       	mov	r8,-16
8000c4a0:	b2 88       	st.b	r9[0x0],r8
8000c4a2:	48 39       	lddpc	r9,8000c4ac <udi_msc_clear_sense+0x20>
8000c4a4:	30 a8       	mov	r8,10
8000c4a6:	b2 f8       	st.b	r9[0x7],r8
8000c4a8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c4ac:	00 00       	add	r0,r0
8000c4ae:	08 88       	andn	r8,r4
8000c4b0:	80 00       	ld.sh	r0,r0[0x0]
8000c4b2:	e4 92 eb cd 	brhs	800c9c4c <_data_lma+0xbac84>

8000c4b4 <udi_msc_sense_fail>:
8000c4b4:	eb cd 40 80 	pushm	r7,lr
8000c4b8:	1a 97       	mov	r7,sp
8000c4ba:	20 3d       	sub	sp,12
8000c4bc:	18 99       	mov	r9,r12
8000c4be:	16 98       	mov	r8,r11
8000c4c0:	ef 4a ff f4 	st.w	r7[-12],r10
8000c4c4:	ef 69 ff fc 	st.b	r7[-4],r9
8000c4c8:	ef 58 ff f8 	st.h	r7[-8],r8
8000c4cc:	f0 1f 00 19 	mcall	8000c530 <udi_msc_sense_fail+0x7c>
8000c4d0:	49 99       	lddpc	r9,8000c534 <udi_msc_sense_fail+0x80>
8000c4d2:	30 18       	mov	r8,1
8000c4d4:	f3 68 00 0c 	st.b	r9[12],r8
8000c4d8:	49 89       	lddpc	r9,8000c538 <udi_msc_sense_fail+0x84>
8000c4da:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c4de:	b2 a8       	st.b	r9[0x2],r8
8000c4e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4e4:	b9 88       	lsr	r8,0x18
8000c4e6:	5c 58       	castu.b	r8
8000c4e8:	49 49       	lddpc	r9,8000c538 <udi_msc_sense_fail+0x84>
8000c4ea:	b2 b8       	st.b	r9[0x3],r8
8000c4ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4f0:	b1 88       	lsr	r8,0x10
8000c4f2:	5c 58       	castu.b	r8
8000c4f4:	49 19       	lddpc	r9,8000c538 <udi_msc_sense_fail+0x84>
8000c4f6:	b2 c8       	st.b	r9[0x4],r8
8000c4f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4fc:	a9 88       	lsr	r8,0x8
8000c4fe:	5c 58       	castu.b	r8
8000c500:	48 e9       	lddpc	r9,8000c538 <udi_msc_sense_fail+0x84>
8000c502:	b2 d8       	st.b	r9[0x5],r8
8000c504:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c508:	5c 58       	castu.b	r8
8000c50a:	48 c9       	lddpc	r9,8000c538 <udi_msc_sense_fail+0x84>
8000c50c:	b2 e8       	st.b	r9[0x6],r8
8000c50e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000c512:	a9 88       	lsr	r8,0x8
8000c514:	5c 88       	casts.h	r8
8000c516:	5c 58       	castu.b	r8
8000c518:	48 89       	lddpc	r9,8000c538 <udi_msc_sense_fail+0x84>
8000c51a:	f3 68 00 0c 	st.b	r9[12],r8
8000c51e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000c522:	5c 58       	castu.b	r8
8000c524:	48 59       	lddpc	r9,8000c538 <udi_msc_sense_fail+0x84>
8000c526:	f3 68 00 0d 	st.b	r9[13],r8
8000c52a:	2f dd       	sub	sp,-12
8000c52c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c530:	80 00       	ld.sh	r0,r0[0x0]
8000c532:	c4 8c       	rcall	8000c5c2 <udi_msc_sense_fail_protected+0x16>
8000c534:	00 00       	add	r0,r0
8000c536:	01 50       	ld.sh	r0,--r0
8000c538:	00 00       	add	r0,r0
8000c53a:	08 88       	andn	r8,r4

8000c53c <udi_msc_sense_pass>:
8000c53c:	eb cd 40 80 	pushm	r7,lr
8000c540:	1a 97       	mov	r7,sp
8000c542:	f0 1f 00 05 	mcall	8000c554 <udi_msc_sense_pass+0x18>
8000c546:	48 59       	lddpc	r9,8000c558 <udi_msc_sense_pass+0x1c>
8000c548:	30 08       	mov	r8,0
8000c54a:	f3 68 00 0c 	st.b	r9[12],r8
8000c54e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c552:	00 00       	add	r0,r0
8000c554:	80 00       	ld.sh	r0,r0[0x0]
8000c556:	c4 8c       	rcall	8000c5e6 <udi_msc_sense_command_invalid+0x2>
8000c558:	00 00       	add	r0,r0
8000c55a:	01 50       	ld.sh	r0,--r0

8000c55c <udi_msc_sense_fail_not_present>:
8000c55c:	eb cd 40 80 	pushm	r7,lr
8000c560:	1a 97       	mov	r7,sp
8000c562:	30 0a       	mov	r10,0
8000c564:	e0 6b 3a 00 	mov	r11,14848
8000c568:	30 2c       	mov	r12,2
8000c56a:	f0 1f 00 03 	mcall	8000c574 <udi_msc_sense_fail_not_present+0x18>
8000c56e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c572:	00 00       	add	r0,r0
8000c574:	80 00       	ld.sh	r0,r0[0x0]
8000c576:	c4 b4       	brge	8000c60c <udi_msc_spc_requestsense+0xc>

8000c578 <udi_msc_sense_fail_busy_or_change>:
8000c578:	eb cd 40 80 	pushm	r7,lr
8000c57c:	1a 97       	mov	r7,sp
8000c57e:	30 0a       	mov	r10,0
8000c580:	e0 6b 28 00 	mov	r11,10240
8000c584:	30 6c       	mov	r12,6
8000c586:	f0 1f 00 03 	mcall	8000c590 <udi_msc_sense_fail_busy_or_change+0x18>
8000c58a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c58e:	00 00       	add	r0,r0
8000c590:	80 00       	ld.sh	r0,r0[0x0]
8000c592:	c4 b4       	brge	8000c628 <udi_msc_spc_requestsense+0x28>

8000c594 <udi_msc_sense_fail_hardware>:
8000c594:	eb cd 40 80 	pushm	r7,lr
8000c598:	1a 97       	mov	r7,sp
8000c59a:	30 0a       	mov	r10,0
8000c59c:	30 0b       	mov	r11,0
8000c59e:	30 4c       	mov	r12,4
8000c5a0:	f0 1f 00 02 	mcall	8000c5a8 <udi_msc_sense_fail_hardware+0x14>
8000c5a4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5a8:	80 00       	ld.sh	r0,r0[0x0]
8000c5aa:	c4 b4       	brge	8000c640 <udi_msc_spc_requestsense+0x40>

8000c5ac <udi_msc_sense_fail_protected>:
8000c5ac:	eb cd 40 80 	pushm	r7,lr
8000c5b0:	1a 97       	mov	r7,sp
8000c5b2:	30 0a       	mov	r10,0
8000c5b4:	e0 6b 27 00 	mov	r11,9984
8000c5b8:	30 7c       	mov	r12,7
8000c5ba:	f0 1f 00 03 	mcall	8000c5c4 <udi_msc_sense_fail_protected+0x18>
8000c5be:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5c2:	00 00       	add	r0,r0
8000c5c4:	80 00       	ld.sh	r0,r0[0x0]
8000c5c6:	c4 b4       	brge	8000c65c <udi_msc_spc_requestsense+0x5c>

8000c5c8 <udi_msc_sense_fail_cdb_invalid>:
8000c5c8:	eb cd 40 80 	pushm	r7,lr
8000c5cc:	1a 97       	mov	r7,sp
8000c5ce:	30 0a       	mov	r10,0
8000c5d0:	e0 6b 24 00 	mov	r11,9216
8000c5d4:	30 5c       	mov	r12,5
8000c5d6:	f0 1f 00 03 	mcall	8000c5e0 <udi_msc_sense_fail_cdb_invalid+0x18>
8000c5da:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5de:	00 00       	add	r0,r0
8000c5e0:	80 00       	ld.sh	r0,r0[0x0]
8000c5e2:	c4 b4       	brge	8000c678 <udi_msc_spc_inquiry+0x14>

8000c5e4 <udi_msc_sense_command_invalid>:
8000c5e4:	eb cd 40 80 	pushm	r7,lr
8000c5e8:	1a 97       	mov	r7,sp
8000c5ea:	30 0a       	mov	r10,0
8000c5ec:	e0 6b 20 00 	mov	r11,8192
8000c5f0:	30 5c       	mov	r12,5
8000c5f2:	f0 1f 00 03 	mcall	8000c5fc <udi_msc_sense_command_invalid+0x18>
8000c5f6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5fa:	00 00       	add	r0,r0
8000c5fc:	80 00       	ld.sh	r0,r0[0x0]
8000c5fe:	c4 b4       	brge	8000c694 <udi_msc_spc_inquiry+0x30>

8000c600 <udi_msc_spc_requestsense>:
8000c600:	eb cd 40 80 	pushm	r7,lr
8000c604:	1a 97       	mov	r7,sp
8000c606:	20 1d       	sub	sp,4
8000c608:	49 38       	lddpc	r8,8000c654 <udi_msc_spc_requestsense+0x54>
8000c60a:	f1 38 00 13 	ld.ub	r8,r8[19]
8000c60e:	ef 68 ff ff 	st.b	r7[-1],r8
8000c612:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c616:	31 28       	mov	r8,18
8000c618:	f0 09 18 00 	cp.b	r9,r8
8000c61c:	e0 88 00 05 	brls	8000c626 <udi_msc_spc_requestsense+0x26>
8000c620:	31 28       	mov	r8,18
8000c622:	ef 68 ff ff 	st.b	r7[-1],r8
8000c626:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c62a:	e0 6b 00 80 	mov	r11,128
8000c62e:	10 9c       	mov	r12,r8
8000c630:	f0 1f 00 0a 	mcall	8000c658 <udi_msc_spc_requestsense+0x58>
8000c634:	18 98       	mov	r8,r12
8000c636:	ec 18 00 01 	eorl	r8,0x1
8000c63a:	5c 58       	castu.b	r8
8000c63c:	c0 81       	brne	8000c64c <udi_msc_spc_requestsense+0x4c>
8000c63e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c642:	10 9b       	mov	r11,r8
8000c644:	48 6c       	lddpc	r12,8000c65c <udi_msc_spc_requestsense+0x5c>
8000c646:	f0 1f 00 07 	mcall	8000c660 <udi_msc_spc_requestsense+0x60>
8000c64a:	c0 28       	rjmp	8000c64e <udi_msc_spc_requestsense+0x4e>
8000c64c:	d7 03       	nop
8000c64e:	2f fd       	sub	sp,-4
8000c650:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c654:	00 00       	add	r0,r0
8000c656:	08 64       	and	r4,r4
8000c658:	80 00       	ld.sh	r0,r0[0x0]
8000c65a:	c2 cc       	rcall	8000c6b2 <udi_msc_spc_inquiry+0x4e>
8000c65c:	00 00       	add	r0,r0
8000c65e:	08 88       	andn	r8,r4
8000c660:	80 00       	ld.sh	r0,r0[0x0]
8000c662:	c3 2c       	rcall	8000c6c6 <udi_msc_spc_inquiry+0x62>

8000c664 <udi_msc_spc_inquiry>:
8000c664:	eb cd 40 80 	pushm	r7,lr
8000c668:	1a 97       	mov	r7,sp
8000c66a:	20 1d       	sub	sp,4
8000c66c:	4b e8       	lddpc	r8,8000c764 <udi_msc_spc_inquiry+0x100>
8000c66e:	f1 38 00 13 	ld.ub	r8,r8[19]
8000c672:	ef 68 ff fe 	st.b	r7[-2],r8
8000c676:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c67a:	32 48       	mov	r8,36
8000c67c:	f0 09 18 00 	cp.b	r9,r8
8000c680:	e0 88 00 05 	brls	8000c68a <udi_msc_spc_inquiry+0x26>
8000c684:	32 48       	mov	r8,36
8000c686:	ef 68 ff fe 	st.b	r7[-2],r8
8000c68a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c68e:	e0 6b 00 80 	mov	r11,128
8000c692:	10 9c       	mov	r12,r8
8000c694:	f0 1f 00 35 	mcall	8000c768 <udi_msc_spc_inquiry+0x104>
8000c698:	18 98       	mov	r8,r12
8000c69a:	ec 18 00 01 	eorl	r8,0x1
8000c69e:	5c 58       	castu.b	r8
8000c6a0:	c5 e1       	brne	8000c75c <udi_msc_spc_inquiry+0xf8>
8000c6a2:	4b 18       	lddpc	r8,8000c764 <udi_msc_spc_inquiry+0x100>
8000c6a4:	f1 38 00 10 	ld.ub	r8,r8[16]
8000c6a8:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000c6ac:	c0 61       	brne	8000c6b8 <udi_msc_spc_inquiry+0x54>
8000c6ae:	4a e8       	lddpc	r8,8000c764 <udi_msc_spc_inquiry+0x100>
8000c6b0:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c6b4:	58 08       	cp.w	r8,0
8000c6b6:	c0 60       	breq	8000c6c2 <udi_msc_spc_inquiry+0x5e>
8000c6b8:	f0 1f 00 2d 	mcall	8000c76c <udi_msc_spc_inquiry+0x108>
8000c6bc:	f0 1f 00 2d 	mcall	8000c770 <udi_msc_spc_inquiry+0x10c>
8000c6c0:	c4 f8       	rjmp	8000c75e <udi_msc_spc_inquiry+0xfa>
8000c6c2:	4a 98       	lddpc	r8,8000c764 <udi_msc_spc_inquiry+0x100>
8000c6c4:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000c6c8:	10 9c       	mov	r12,r8
8000c6ca:	f0 1f 00 2b 	mcall	8000c774 <udi_msc_spc_inquiry+0x110>
8000c6ce:	18 98       	mov	r8,r12
8000c6d0:	f0 c9 ff ff 	sub	r9,r8,-1
8000c6d4:	4a 98       	lddpc	r8,8000c778 <udi_msc_spc_inquiry+0x114>
8000c6d6:	2f 08       	sub	r8,-16
8000c6d8:	31 0a       	mov	r10,16
8000c6da:	12 9b       	mov	r11,r9
8000c6dc:	10 9c       	mov	r12,r8
8000c6de:	f0 1f 00 28 	mcall	8000c77c <udi_msc_spc_inquiry+0x118>
8000c6e2:	30 08       	mov	r8,0
8000c6e4:	ef 68 ff ff 	st.b	r7[-1],r8
8000c6e8:	c1 a8       	rjmp	8000c71c <udi_msc_spc_inquiry+0xb8>
8000c6ea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c6ee:	4a 39       	lddpc	r9,8000c778 <udi_msc_spc_inquiry+0x114>
8000c6f0:	f2 08 00 08 	add	r8,r9,r8
8000c6f4:	f1 38 00 10 	ld.ub	r8,r8[16]
8000c6f8:	58 08       	cp.w	r8,0
8000c6fa:	c2 40       	breq	8000c742 <udi_msc_spc_inquiry+0xde>
8000c6fc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c700:	49 e9       	lddpc	r9,8000c778 <udi_msc_spc_inquiry+0x114>
8000c702:	f2 08 00 08 	add	r8,r9,r8
8000c706:	f1 39 00 10 	ld.ub	r9,r8[16]
8000c70a:	32 28       	mov	r8,34
8000c70c:	f0 09 18 00 	cp.b	r9,r8
8000c710:	c1 90       	breq	8000c742 <udi_msc_spc_inquiry+0xde>
8000c712:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c716:	2f f8       	sub	r8,-1
8000c718:	ef 68 ff ff 	st.b	r7[-1],r8
8000c71c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c720:	31 08       	mov	r8,16
8000c722:	f0 09 18 00 	cp.b	r9,r8
8000c726:	ce 21       	brne	8000c6ea <udi_msc_spc_inquiry+0x86>
8000c728:	c0 d8       	rjmp	8000c742 <udi_msc_spc_inquiry+0xde>
8000c72a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c72e:	49 39       	lddpc	r9,8000c778 <udi_msc_spc_inquiry+0x114>
8000c730:	10 09       	add	r9,r8
8000c732:	32 08       	mov	r8,32
8000c734:	f3 68 00 10 	st.b	r9[16],r8
8000c738:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c73c:	2f f8       	sub	r8,-1
8000c73e:	ef 68 ff ff 	st.b	r7[-1],r8
8000c742:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c746:	31 08       	mov	r8,16
8000c748:	f0 09 18 00 	cp.b	r9,r8
8000c74c:	ce f1       	brne	8000c72a <udi_msc_spc_inquiry+0xc6>
8000c74e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c752:	10 9b       	mov	r11,r8
8000c754:	48 9c       	lddpc	r12,8000c778 <udi_msc_spc_inquiry+0x114>
8000c756:	f0 1f 00 0b 	mcall	8000c780 <udi_msc_spc_inquiry+0x11c>
8000c75a:	c0 28       	rjmp	8000c75e <udi_msc_spc_inquiry+0xfa>
8000c75c:	d7 03       	nop
8000c75e:	2f fd       	sub	sp,-4
8000c760:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c764:	00 00       	add	r0,r0
8000c766:	08 64       	and	r4,r4
8000c768:	80 00       	ld.sh	r0,r0[0x0]
8000c76a:	c2 cc       	rcall	8000c7c2 <udi_msc_spc_testunitready_global+0x3e>
8000c76c:	80 00       	ld.sh	r0,r0[0x0]
8000c76e:	c5 c8       	rjmp	8000c826 <udi_msc_spc_mode_sense+0x2a>
8000c770:	80 00       	ld.sh	r0,r0[0x0]
8000c772:	c3 c8       	rjmp	8000c7ea <udi_msc_spc_testunitready+0x16>
8000c774:	80 00       	ld.sh	r0,r0[0x0]
8000c776:	bd 3c       	mul	r12,lr
8000c778:	00 00       	add	r0,r0
8000c77a:	01 64       	ld.uh	r4,--r0
8000c77c:	80 00       	ld.sh	r0,r0[0x0]
8000c77e:	e3 4a 80 00 	st.w	r1[-32768],r10
8000c782:	c3 2c       	rcall	8000c7e6 <udi_msc_spc_testunitready+0x12>

8000c784 <udi_msc_spc_testunitready_global>:
8000c784:	eb cd 40 80 	pushm	r7,lr
8000c788:	1a 97       	mov	r7,sp
8000c78a:	48 e8       	lddpc	r8,8000c7c0 <udi_msc_spc_testunitready_global+0x3c>
8000c78c:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000c790:	10 9c       	mov	r12,r8
8000c792:	f0 1f 00 0d 	mcall	8000c7c4 <udi_msc_spc_testunitready_global+0x40>
8000c796:	18 98       	mov	r8,r12
8000c798:	58 28       	cp.w	r8,2
8000c79a:	c0 a0       	breq	8000c7ae <udi_msc_spc_testunitready_global+0x2a>
8000c79c:	58 38       	cp.w	r8,3
8000c79e:	c0 50       	breq	8000c7a8 <udi_msc_spc_testunitready_global+0x24>
8000c7a0:	58 08       	cp.w	r8,0
8000c7a2:	c0 91       	brne	8000c7b4 <udi_msc_spc_testunitready_global+0x30>
8000c7a4:	30 18       	mov	r8,1
8000c7a6:	c0 a8       	rjmp	8000c7ba <udi_msc_spc_testunitready_global+0x36>
8000c7a8:	f0 1f 00 08 	mcall	8000c7c8 <udi_msc_spc_testunitready_global+0x44>
8000c7ac:	c0 68       	rjmp	8000c7b8 <udi_msc_spc_testunitready_global+0x34>
8000c7ae:	f0 1f 00 08 	mcall	8000c7cc <udi_msc_spc_testunitready_global+0x48>
8000c7b2:	c0 38       	rjmp	8000c7b8 <udi_msc_spc_testunitready_global+0x34>
8000c7b4:	f0 1f 00 07 	mcall	8000c7d0 <udi_msc_spc_testunitready_global+0x4c>
8000c7b8:	30 08       	mov	r8,0
8000c7ba:	10 9c       	mov	r12,r8
8000c7bc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c7c0:	00 00       	add	r0,r0
8000c7c2:	08 64       	and	r4,r4
8000c7c4:	80 00       	ld.sh	r0,r0[0x0]
8000c7c6:	bc 4c       	st.h	lr[0x8],r12
8000c7c8:	80 00       	ld.sh	r0,r0[0x0]
8000c7ca:	c5 78       	rjmp	8000c878 <udi_msc_spc_mode_sense+0x7c>
8000c7cc:	80 00       	ld.sh	r0,r0[0x0]
8000c7ce:	c5 5c       	rcall	8000c878 <udi_msc_spc_mode_sense+0x7c>
8000c7d0:	80 00       	ld.sh	r0,r0[0x0]
8000c7d2:	c5 94       	brge	8000c884 <udi_msc_spc_mode_sense+0x88>

8000c7d4 <udi_msc_spc_testunitready>:
8000c7d4:	eb cd 40 80 	pushm	r7,lr
8000c7d8:	1a 97       	mov	r7,sp
8000c7da:	f0 1f 00 06 	mcall	8000c7f0 <udi_msc_spc_testunitready+0x1c>
8000c7de:	18 98       	mov	r8,r12
8000c7e0:	58 08       	cp.w	r8,0
8000c7e2:	c0 30       	breq	8000c7e8 <udi_msc_spc_testunitready+0x14>
8000c7e4:	f0 1f 00 04 	mcall	8000c7f4 <udi_msc_spc_testunitready+0x20>
8000c7e8:	f0 1f 00 04 	mcall	8000c7f8 <udi_msc_spc_testunitready+0x24>
8000c7ec:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c7f0:	80 00       	ld.sh	r0,r0[0x0]
8000c7f2:	c7 84       	brge	8000c8e2 <udi_msc_spc_mode_sense+0xe6>
8000c7f4:	80 00       	ld.sh	r0,r0[0x0]
8000c7f6:	c5 3c       	rcall	8000c89c <udi_msc_spc_mode_sense+0xa0>
8000c7f8:	80 00       	ld.sh	r0,r0[0x0]
8000c7fa:	c3 c8       	rjmp	8000c872 <udi_msc_spc_mode_sense+0x76>

8000c7fc <udi_msc_spc_mode_sense>:
8000c7fc:	eb cd 40 80 	pushm	r7,lr
8000c800:	1a 97       	mov	r7,sp
8000c802:	20 3d       	sub	sp,12
8000c804:	18 98       	mov	r8,r12
8000c806:	ef 68 ff f4 	st.b	r7[-12],r8
8000c80a:	31 4a       	mov	r10,20
8000c80c:	30 0b       	mov	r11,0
8000c80e:	4c ac       	lddpc	r12,8000c934 <udi_msc_spc_mode_sense+0x138>
8000c810:	f0 1f 00 4a 	mcall	8000c938 <udi_msc_spc_mode_sense+0x13c>
8000c814:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000c818:	30 08       	mov	r8,0
8000c81a:	f0 09 18 00 	cp.b	r9,r8
8000c81e:	c0 e0       	breq	8000c83a <udi_msc_spc_mode_sense+0x3e>
8000c820:	4c 78       	lddpc	r8,8000c93c <udi_msc_spc_mode_sense+0x140>
8000c822:	f1 38 00 17 	ld.ub	r8,r8[23]
8000c826:	ef 68 ff fa 	st.b	r7[-6],r8
8000c82a:	4c 38       	lddpc	r8,8000c934 <udi_msc_spc_mode_sense+0x138>
8000c82c:	2f 88       	sub	r8,-8
8000c82e:	ef 48 ff fc 	st.w	r7[-4],r8
8000c832:	30 88       	mov	r8,8
8000c834:	ef 68 ff f8 	st.b	r7[-8],r8
8000c838:	c0 d8       	rjmp	8000c852 <udi_msc_spc_mode_sense+0x56>
8000c83a:	4c 18       	lddpc	r8,8000c93c <udi_msc_spc_mode_sense+0x140>
8000c83c:	f1 38 00 13 	ld.ub	r8,r8[19]
8000c840:	ef 68 ff fa 	st.b	r7[-6],r8
8000c844:	4b c8       	lddpc	r8,8000c934 <udi_msc_spc_mode_sense+0x138>
8000c846:	2f c8       	sub	r8,-4
8000c848:	ef 48 ff fc 	st.w	r7[-4],r8
8000c84c:	30 48       	mov	r8,4
8000c84e:	ef 68 ff f8 	st.b	r7[-8],r8
8000c852:	4b b8       	lddpc	r8,8000c93c <udi_msc_spc_mode_sense+0x140>
8000c854:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c858:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000c85c:	ef 68 ff f9 	st.b	r7[-7],r8
8000c860:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000c864:	31 c8       	mov	r8,28
8000c866:	f0 09 18 00 	cp.b	r9,r8
8000c86a:	c0 70       	breq	8000c878 <udi_msc_spc_mode_sense+0x7c>
8000c86c:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000c870:	33 f8       	mov	r8,63
8000c872:	f0 09 18 00 	cp.b	r9,r8
8000c876:	c1 21       	brne	8000c89a <udi_msc_spc_mode_sense+0x9e>
8000c878:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c87c:	31 c8       	mov	r8,28
8000c87e:	b2 88       	st.b	r9[0x0],r8
8000c880:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c884:	30 a8       	mov	r8,10
8000c886:	b2 98       	st.b	r9[0x1],r8
8000c888:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c88c:	30 58       	mov	r8,5
8000c88e:	b2 b8       	st.b	r9[0x3],r8
8000c890:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c894:	2f 48       	sub	r8,-12
8000c896:	ef 68 ff f8 	st.b	r7[-8],r8
8000c89a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000c89e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c8a2:	f0 09 18 00 	cp.b	r9,r8
8000c8a6:	e0 88 00 06 	brls	8000c8b2 <udi_msc_spc_mode_sense+0xb6>
8000c8aa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c8ae:	ef 68 ff fa 	st.b	r7[-6],r8
8000c8b2:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000c8b6:	e0 6b 00 80 	mov	r11,128
8000c8ba:	10 9c       	mov	r12,r8
8000c8bc:	f0 1f 00 21 	mcall	8000c940 <udi_msc_spc_mode_sense+0x144>
8000c8c0:	18 98       	mov	r8,r12
8000c8c2:	ec 18 00 01 	eorl	r8,0x1
8000c8c6:	5c 58       	castu.b	r8
8000c8c8:	c3 21       	brne	8000c92c <udi_msc_spc_mode_sense+0x130>
8000c8ca:	49 d8       	lddpc	r8,8000c93c <udi_msc_spc_mode_sense+0x140>
8000c8cc:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000c8d0:	10 9c       	mov	r12,r8
8000c8d2:	f0 1f 00 1d 	mcall	8000c944 <udi_msc_spc_mode_sense+0x148>
8000c8d6:	18 98       	mov	r8,r12
8000c8d8:	58 08       	cp.w	r8,0
8000c8da:	c0 40       	breq	8000c8e2 <udi_msc_spc_mode_sense+0xe6>
8000c8dc:	e0 68 00 80 	mov	r8,128
8000c8e0:	c0 28       	rjmp	8000c8e4 <udi_msc_spc_mode_sense+0xe8>
8000c8e2:	30 08       	mov	r8,0
8000c8e4:	ef 68 ff fb 	st.b	r7[-5],r8
8000c8e8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000c8ec:	30 08       	mov	r8,0
8000c8ee:	f0 09 18 00 	cp.b	r9,r8
8000c8f2:	c0 c0       	breq	8000c90a <udi_msc_spc_mode_sense+0x10e>
8000c8f4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c8f8:	20 28       	sub	r8,2
8000c8fa:	5c 88       	casts.h	r8
8000c8fc:	48 e9       	lddpc	r9,8000c934 <udi_msc_spc_mode_sense+0x138>
8000c8fe:	b2 08       	st.h	r9[0x0],r8
8000c900:	48 d9       	lddpc	r9,8000c934 <udi_msc_spc_mode_sense+0x138>
8000c902:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c906:	b2 b8       	st.b	r9[0x3],r8
8000c908:	c0 b8       	rjmp	8000c91e <udi_msc_spc_mode_sense+0x122>
8000c90a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c90e:	20 18       	sub	r8,1
8000c910:	5c 58       	castu.b	r8
8000c912:	48 99       	lddpc	r9,8000c934 <udi_msc_spc_mode_sense+0x138>
8000c914:	b2 88       	st.b	r9[0x0],r8
8000c916:	48 89       	lddpc	r9,8000c934 <udi_msc_spc_mode_sense+0x138>
8000c918:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c91c:	b2 a8       	st.b	r9[0x2],r8
8000c91e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000c922:	10 9b       	mov	r11,r8
8000c924:	48 4c       	lddpc	r12,8000c934 <udi_msc_spc_mode_sense+0x138>
8000c926:	f0 1f 00 09 	mcall	8000c948 <udi_msc_spc_mode_sense+0x14c>
8000c92a:	c0 28       	rjmp	8000c92e <udi_msc_spc_mode_sense+0x132>
8000c92c:	d7 03       	nop
8000c92e:	2f dd       	sub	sp,-12
8000c930:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c934:	00 00       	add	r0,r0
8000c936:	08 b0       	st.h	r4++,r0
8000c938:	80 00       	ld.sh	r0,r0[0x0]
8000c93a:	e4 92 00 00 	brhs	800ac93a <_data_lma+0x9d972>
8000c93e:	08 64       	and	r4,r4
8000c940:	80 00       	ld.sh	r0,r0[0x0]
8000c942:	c2 cc       	rcall	8000c99a <udi_msc_sbc_read_capacity+0x4e>
8000c944:	80 00       	ld.sh	r0,r0[0x0]
8000c946:	bc ec       	st.b	lr[0x6],r12
8000c948:	80 00       	ld.sh	r0,r0[0x0]
8000c94a:	c3 2c       	rcall	8000c9ae <udi_msc_sbc_read_capacity+0x62>

8000c94c <udi_msc_sbc_read_capacity>:
8000c94c:	eb cd 40 80 	pushm	r7,lr
8000c950:	1a 97       	mov	r7,sp
8000c952:	e0 6b 00 80 	mov	r11,128
8000c956:	30 8c       	mov	r12,8
8000c958:	f0 1f 00 1b 	mcall	8000c9c4 <udi_msc_sbc_read_capacity+0x78>
8000c95c:	18 98       	mov	r8,r12
8000c95e:	ec 18 00 01 	eorl	r8,0x1
8000c962:	5c 58       	castu.b	r8
8000c964:	c2 d1       	brne	8000c9be <udi_msc_sbc_read_capacity+0x72>
8000c966:	49 98       	lddpc	r8,8000c9c8 <udi_msc_sbc_read_capacity+0x7c>
8000c968:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000c96c:	49 8b       	lddpc	r11,8000c9cc <udi_msc_sbc_read_capacity+0x80>
8000c96e:	10 9c       	mov	r12,r8
8000c970:	f0 1f 00 18 	mcall	8000c9d0 <udi_msc_sbc_read_capacity+0x84>
8000c974:	18 98       	mov	r8,r12
8000c976:	58 28       	cp.w	r8,2
8000c978:	c1 80       	breq	8000c9a8 <udi_msc_sbc_read_capacity+0x5c>
8000c97a:	58 38       	cp.w	r8,3
8000c97c:	c1 10       	breq	8000c99e <udi_msc_sbc_read_capacity+0x52>
8000c97e:	58 08       	cp.w	r8,0
8000c980:	c1 91       	brne	8000c9b2 <udi_msc_sbc_read_capacity+0x66>
8000c982:	49 38       	lddpc	r8,8000c9cc <udi_msc_sbc_read_capacity+0x80>
8000c984:	e0 69 02 00 	mov	r9,512
8000c988:	91 19       	st.w	r8[0x4],r9
8000c98a:	49 18       	lddpc	r8,8000c9cc <udi_msc_sbc_read_capacity+0x80>
8000c98c:	70 09       	ld.w	r9,r8[0x0]
8000c98e:	49 08       	lddpc	r8,8000c9cc <udi_msc_sbc_read_capacity+0x80>
8000c990:	91 09       	st.w	r8[0x0],r9
8000c992:	48 f8       	lddpc	r8,8000c9cc <udi_msc_sbc_read_capacity+0x80>
8000c994:	30 8b       	mov	r11,8
8000c996:	10 9c       	mov	r12,r8
8000c998:	f0 1f 00 0f 	mcall	8000c9d4 <udi_msc_sbc_read_capacity+0x88>
8000c99c:	c1 28       	rjmp	8000c9c0 <udi_msc_sbc_read_capacity+0x74>
8000c99e:	f0 1f 00 0f 	mcall	8000c9d8 <udi_msc_sbc_read_capacity+0x8c>
8000c9a2:	f0 1f 00 0f 	mcall	8000c9dc <udi_msc_sbc_read_capacity+0x90>
8000c9a6:	c0 d8       	rjmp	8000c9c0 <udi_msc_sbc_read_capacity+0x74>
8000c9a8:	f0 1f 00 0e 	mcall	8000c9e0 <udi_msc_sbc_read_capacity+0x94>
8000c9ac:	f0 1f 00 0c 	mcall	8000c9dc <udi_msc_sbc_read_capacity+0x90>
8000c9b0:	c0 88       	rjmp	8000c9c0 <udi_msc_sbc_read_capacity+0x74>
8000c9b2:	f0 1f 00 0d 	mcall	8000c9e4 <udi_msc_sbc_read_capacity+0x98>
8000c9b6:	f0 1f 00 0a 	mcall	8000c9dc <udi_msc_sbc_read_capacity+0x90>
8000c9ba:	d7 03       	nop
8000c9bc:	c0 28       	rjmp	8000c9c0 <udi_msc_sbc_read_capacity+0x74>
8000c9be:	d7 03       	nop
8000c9c0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9c4:	80 00       	ld.sh	r0,r0[0x0]
8000c9c6:	c2 cc       	rcall	8000ca1e <udi_msc_sbc_trans+0x36>
8000c9c8:	00 00       	add	r0,r0
8000c9ca:	08 64       	and	r4,r4
8000c9cc:	00 00       	add	r0,r0
8000c9ce:	08 a8       	st.w	r4++,r8
8000c9d0:	80 00       	ld.sh	r0,r0[0x0]
8000c9d2:	bc 98       	st.b	lr[0x1],r8
8000c9d4:	80 00       	ld.sh	r0,r0[0x0]
8000c9d6:	c3 2c       	rcall	8000ca3a <udi_msc_sbc_trans+0x52>
8000c9d8:	80 00       	ld.sh	r0,r0[0x0]
8000c9da:	c5 78       	rjmp	8000ca88 <udi_msc_sbc_trans+0xa0>
8000c9dc:	80 00       	ld.sh	r0,r0[0x0]
8000c9de:	c3 c8       	rjmp	8000ca56 <udi_msc_sbc_trans+0x6e>
8000c9e0:	80 00       	ld.sh	r0,r0[0x0]
8000c9e2:	c5 5c       	rcall	8000ca8c <udi_msc_sbc_trans+0xa4>
8000c9e4:	80 00       	ld.sh	r0,r0[0x0]
8000c9e6:	c5 94       	brge	8000ca98 <udi_msc_sbc_trans+0xb0>

8000c9e8 <udi_msc_sbc_trans>:
8000c9e8:	eb cd 40 80 	pushm	r7,lr
8000c9ec:	1a 97       	mov	r7,sp
8000c9ee:	20 2d       	sub	sp,8
8000c9f0:	18 98       	mov	r8,r12
8000c9f2:	ef 68 ff f8 	st.b	r7[-8],r8
8000c9f6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c9fa:	ec 18 00 01 	eorl	r8,0x1
8000c9fe:	5c 58       	castu.b	r8
8000ca00:	c0 f0       	breq	8000ca1e <udi_msc_sbc_trans+0x36>
8000ca02:	4a e8       	lddpc	r8,8000cab8 <udi_msc_sbc_trans+0xd0>
8000ca04:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ca08:	10 9c       	mov	r12,r8
8000ca0a:	f0 1f 00 2d 	mcall	8000cabc <udi_msc_sbc_trans+0xd4>
8000ca0e:	18 98       	mov	r8,r12
8000ca10:	58 08       	cp.w	r8,0
8000ca12:	c0 60       	breq	8000ca1e <udi_msc_sbc_trans+0x36>
8000ca14:	f0 1f 00 2b 	mcall	8000cac0 <udi_msc_sbc_trans+0xd8>
8000ca18:	f0 1f 00 2b 	mcall	8000cac4 <udi_msc_sbc_trans+0xdc>
8000ca1c:	c4 a8       	rjmp	8000cab0 <udi_msc_sbc_trans+0xc8>
8000ca1e:	4a b9       	lddpc	r9,8000cac8 <udi_msc_sbc_trans+0xe0>
8000ca20:	4a 68       	lddpc	r8,8000cab8 <udi_msc_sbc_trans+0xd0>
8000ca22:	f1 38 00 11 	ld.ub	r8,r8[17]
8000ca26:	b2 88       	st.b	r9[0x0],r8
8000ca28:	4a 88       	lddpc	r8,8000cac8 <udi_msc_sbc_trans+0xe0>
8000ca2a:	f0 c9 ff ff 	sub	r9,r8,-1
8000ca2e:	4a 38       	lddpc	r8,8000cab8 <udi_msc_sbc_trans+0xd0>
8000ca30:	f1 38 00 12 	ld.ub	r8,r8[18]
8000ca34:	b2 88       	st.b	r9[0x0],r8
8000ca36:	4a 58       	lddpc	r8,8000cac8 <udi_msc_sbc_trans+0xe0>
8000ca38:	f0 c9 ff fe 	sub	r9,r8,-2
8000ca3c:	49 f8       	lddpc	r8,8000cab8 <udi_msc_sbc_trans+0xd0>
8000ca3e:	f1 38 00 13 	ld.ub	r8,r8[19]
8000ca42:	b2 88       	st.b	r9[0x0],r8
8000ca44:	4a 18       	lddpc	r8,8000cac8 <udi_msc_sbc_trans+0xe0>
8000ca46:	f0 c9 ff fd 	sub	r9,r8,-3
8000ca4a:	49 c8       	lddpc	r8,8000cab8 <udi_msc_sbc_trans+0xd0>
8000ca4c:	f1 38 00 14 	ld.ub	r8,r8[20]
8000ca50:	b2 88       	st.b	r9[0x0],r8
8000ca52:	49 f9       	lddpc	r9,8000cacc <udi_msc_sbc_trans+0xe4>
8000ca54:	49 98       	lddpc	r8,8000cab8 <udi_msc_sbc_trans+0xd0>
8000ca56:	f1 38 00 16 	ld.ub	r8,r8[22]
8000ca5a:	b2 88       	st.b	r9[0x0],r8
8000ca5c:	49 c8       	lddpc	r8,8000cacc <udi_msc_sbc_trans+0xe4>
8000ca5e:	f0 c9 ff ff 	sub	r9,r8,-1
8000ca62:	49 68       	lddpc	r8,8000cab8 <udi_msc_sbc_trans+0xd0>
8000ca64:	f1 38 00 17 	ld.ub	r8,r8[23]
8000ca68:	b2 88       	st.b	r9[0x0],r8
8000ca6a:	49 98       	lddpc	r8,8000cacc <udi_msc_sbc_trans+0xe4>
8000ca6c:	90 08       	ld.sh	r8,r8[0x0]
8000ca6e:	5c 78       	castu.h	r8
8000ca70:	a9 78       	lsl	r8,0x9
8000ca72:	ef 48 ff fc 	st.w	r7[-4],r8
8000ca76:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ca7a:	30 08       	mov	r8,0
8000ca7c:	f0 09 18 00 	cp.b	r9,r8
8000ca80:	c0 40       	breq	8000ca88 <udi_msc_sbc_trans+0xa0>
8000ca82:	e0 68 00 80 	mov	r8,128
8000ca86:	c0 28       	rjmp	8000ca8a <udi_msc_sbc_trans+0xa2>
8000ca88:	30 08       	mov	r8,0
8000ca8a:	10 9b       	mov	r11,r8
8000ca8c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ca90:	f0 1f 00 10 	mcall	8000cad0 <udi_msc_sbc_trans+0xe8>
8000ca94:	18 98       	mov	r8,r12
8000ca96:	ec 18 00 01 	eorl	r8,0x1
8000ca9a:	5c 58       	castu.b	r8
8000ca9c:	c0 91       	brne	8000caae <udi_msc_sbc_trans+0xc6>
8000ca9e:	48 e9       	lddpc	r9,8000cad4 <udi_msc_sbc_trans+0xec>
8000caa0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000caa4:	b2 88       	st.b	r9[0x0],r8
8000caa6:	48 d9       	lddpc	r9,8000cad8 <udi_msc_sbc_trans+0xf0>
8000caa8:	30 18       	mov	r8,1
8000caaa:	b2 88       	st.b	r9[0x0],r8
8000caac:	c0 28       	rjmp	8000cab0 <udi_msc_sbc_trans+0xc8>
8000caae:	d7 03       	nop
8000cab0:	2f ed       	sub	sp,-8
8000cab2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cab6:	00 00       	add	r0,r0
8000cab8:	00 00       	add	r0,r0
8000caba:	08 64       	and	r4,r4
8000cabc:	80 00       	ld.sh	r0,r0[0x0]
8000cabe:	bc ec       	st.b	lr[0x6],r12
8000cac0:	80 00       	ld.sh	r0,r0[0x0]
8000cac2:	c5 ac       	rcall	8000cb76 <udi_msc_process_trans+0x9a>
8000cac4:	80 00       	ld.sh	r0,r0[0x0]
8000cac6:	c3 c8       	rjmp	8000cb3e <udi_msc_process_trans+0x62>
8000cac8:	00 00       	add	r0,r0
8000caca:	08 a0       	st.w	r4++,r0
8000cacc:	00 00       	add	r0,r0
8000cace:	08 a4       	st.w	r4++,r4
8000cad0:	80 00       	ld.sh	r0,r0[0x0]
8000cad2:	c2 cc       	rcall	8000cb2a <udi_msc_process_trans+0x4e>
8000cad4:	00 00       	add	r0,r0
8000cad6:	08 9e       	mov	lr,r4
8000cad8:	00 00       	add	r0,r0
8000cada:	08 9d       	mov	sp,r4

8000cadc <udi_msc_process_trans>:
8000cadc:	eb cd 40 80 	pushm	r7,lr
8000cae0:	1a 97       	mov	r7,sp
8000cae2:	20 1d       	sub	sp,4
8000cae4:	4a 58       	lddpc	r8,8000cb78 <udi_msc_process_trans+0x9c>
8000cae6:	11 88       	ld.ub	r8,r8[0x0]
8000cae8:	ec 18 00 01 	eorl	r8,0x1
8000caec:	5c 58       	castu.b	r8
8000caee:	c0 30       	breq	8000caf4 <udi_msc_process_trans+0x18>
8000caf0:	30 08       	mov	r8,0
8000caf2:	c3 f8       	rjmp	8000cb70 <udi_msc_process_trans+0x94>
8000caf4:	4a 19       	lddpc	r9,8000cb78 <udi_msc_process_trans+0x9c>
8000caf6:	30 08       	mov	r8,0
8000caf8:	b2 88       	st.b	r9[0x0],r8
8000cafa:	4a 18       	lddpc	r8,8000cb7c <udi_msc_process_trans+0xa0>
8000cafc:	11 88       	ld.ub	r8,r8[0x0]
8000cafe:	58 08       	cp.w	r8,0
8000cb00:	c1 20       	breq	8000cb24 <udi_msc_process_trans+0x48>
8000cb02:	4a 08       	lddpc	r8,8000cb80 <udi_msc_process_trans+0xa4>
8000cb04:	90 08       	ld.sh	r8,r8[0x0]
8000cb06:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000cb0a:	49 f8       	lddpc	r8,8000cb84 <udi_msc_process_trans+0xa8>
8000cb0c:	70 09       	ld.w	r9,r8[0x0]
8000cb0e:	49 f8       	lddpc	r8,8000cb88 <udi_msc_process_trans+0xac>
8000cb10:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cb14:	12 9b       	mov	r11,r9
8000cb16:	10 9c       	mov	r12,r8
8000cb18:	f0 1f 00 1d 	mcall	8000cb8c <udi_msc_process_trans+0xb0>
8000cb1c:	18 98       	mov	r8,r12
8000cb1e:	ef 48 ff fc 	st.w	r7[-4],r8
8000cb22:	c1 18       	rjmp	8000cb44 <udi_msc_process_trans+0x68>
8000cb24:	49 78       	lddpc	r8,8000cb80 <udi_msc_process_trans+0xa4>
8000cb26:	90 08       	ld.sh	r8,r8[0x0]
8000cb28:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000cb2c:	49 68       	lddpc	r8,8000cb84 <udi_msc_process_trans+0xa8>
8000cb2e:	70 09       	ld.w	r9,r8[0x0]
8000cb30:	49 68       	lddpc	r8,8000cb88 <udi_msc_process_trans+0xac>
8000cb32:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cb36:	12 9b       	mov	r11,r9
8000cb38:	10 9c       	mov	r12,r8
8000cb3a:	f0 1f 00 16 	mcall	8000cb90 <udi_msc_process_trans+0xb4>
8000cb3e:	18 98       	mov	r8,r12
8000cb40:	ef 48 ff fc 	st.w	r7[-4],r8
8000cb44:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cb48:	58 28       	cp.w	r8,2
8000cb4a:	c0 b0       	breq	8000cb60 <udi_msc_process_trans+0x84>
8000cb4c:	58 38       	cp.w	r8,3
8000cb4e:	c0 60       	breq	8000cb5a <udi_msc_process_trans+0x7e>
8000cb50:	58 08       	cp.w	r8,0
8000cb52:	c0 a1       	brne	8000cb66 <udi_msc_process_trans+0x8a>
8000cb54:	f0 1f 00 10 	mcall	8000cb94 <udi_msc_process_trans+0xb8>
8000cb58:	c0 98       	rjmp	8000cb6a <udi_msc_process_trans+0x8e>
8000cb5a:	f0 1f 00 10 	mcall	8000cb98 <udi_msc_process_trans+0xbc>
8000cb5e:	c0 68       	rjmp	8000cb6a <udi_msc_process_trans+0x8e>
8000cb60:	f0 1f 00 0f 	mcall	8000cb9c <udi_msc_process_trans+0xc0>
8000cb64:	c0 38       	rjmp	8000cb6a <udi_msc_process_trans+0x8e>
8000cb66:	f0 1f 00 0f 	mcall	8000cba0 <udi_msc_process_trans+0xc4>
8000cb6a:	f0 1f 00 0f 	mcall	8000cba4 <udi_msc_process_trans+0xc8>
8000cb6e:	30 18       	mov	r8,1
8000cb70:	10 9c       	mov	r12,r8
8000cb72:	2f fd       	sub	sp,-4
8000cb74:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb78:	00 00       	add	r0,r0
8000cb7a:	08 9d       	mov	sp,r4
8000cb7c:	00 00       	add	r0,r0
8000cb7e:	08 9e       	mov	lr,r4
8000cb80:	00 00       	add	r0,r0
8000cb82:	08 a4       	st.w	r4++,r4
8000cb84:	00 00       	add	r0,r0
8000cb86:	08 a0       	st.w	r4++,r0
8000cb88:	00 00       	add	r0,r0
8000cb8a:	08 64       	and	r4,r4
8000cb8c:	80 00       	ld.sh	r0,r0[0x0]
8000cb8e:	bd 80       	lsr	r0,0x1c
8000cb90:	80 00       	ld.sh	r0,r0[0x0]
8000cb92:	bd f4       	*unknown*
8000cb94:	80 00       	ld.sh	r0,r0[0x0]
8000cb96:	c5 3c       	rcall	8000cc3c <udi_msc_trans_block+0x5c>
8000cb98:	80 00       	ld.sh	r0,r0[0x0]
8000cb9a:	c5 78       	rjmp	8000cc48 <udi_msc_trans_block+0x68>
8000cb9c:	80 00       	ld.sh	r0,r0[0x0]
8000cb9e:	c5 5c       	rcall	8000cc48 <udi_msc_trans_block+0x68>
8000cba0:	80 00       	ld.sh	r0,r0[0x0]
8000cba2:	c5 94       	brge	8000cc54 <udi_msc_trans_block+0x74>
8000cba4:	80 00       	ld.sh	r0,r0[0x0]
8000cba6:	c3 c8       	rjmp	8000cc1e <udi_msc_trans_block+0x3e>

8000cba8 <udi_msc_trans_ack>:
8000cba8:	eb cd 40 80 	pushm	r7,lr
8000cbac:	1a 97       	mov	r7,sp
8000cbae:	20 3d       	sub	sp,12
8000cbb0:	ef 4c ff fc 	st.w	r7[-4],r12
8000cbb4:	ef 4b ff f8 	st.w	r7[-8],r11
8000cbb8:	14 98       	mov	r8,r10
8000cbba:	ef 68 ff f4 	st.b	r7[-12],r8
8000cbbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cbc2:	58 08       	cp.w	r8,0
8000cbc4:	5f 18       	srne	r8
8000cbc6:	5c 58       	castu.b	r8
8000cbc8:	48 49       	lddpc	r9,8000cbd8 <udi_msc_trans_ack+0x30>
8000cbca:	b2 88       	st.b	r9[0x0],r8
8000cbcc:	48 49       	lddpc	r9,8000cbdc <udi_msc_trans_ack+0x34>
8000cbce:	30 18       	mov	r8,1
8000cbd0:	b2 88       	st.b	r9[0x0],r8
8000cbd2:	2f dd       	sub	sp,-12
8000cbd4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cbd8:	00 00       	add	r0,r0
8000cbda:	0d d7       	ld.ub	r7,r6[0x5]
8000cbdc:	00 00       	add	r0,r0
8000cbde:	01 60       	ld.uh	r0,--r0

8000cbe0 <udi_msc_trans_block>:
8000cbe0:	eb cd 40 80 	pushm	r7,lr
8000cbe4:	1a 97       	mov	r7,sp
8000cbe6:	20 4d       	sub	sp,16
8000cbe8:	18 98       	mov	r8,r12
8000cbea:	ef 4b ff f8 	st.w	r7[-8],r11
8000cbee:	ef 4a ff f4 	st.w	r7[-12],r10
8000cbf2:	ef 49 ff f0 	st.w	r7[-16],r9
8000cbf6:	ef 68 ff fc 	st.b	r7[-4],r8
8000cbfa:	4a e8       	lddpc	r8,8000ccb0 <udi_msc_trans_block+0xd0>
8000cbfc:	11 88       	ld.ub	r8,r8[0x0]
8000cbfe:	5c 58       	castu.b	r8
8000cc00:	ec 18 00 01 	eorl	r8,0x1
8000cc04:	5c 58       	castu.b	r8
8000cc06:	c0 30       	breq	8000cc0c <udi_msc_trans_block+0x2c>
8000cc08:	30 08       	mov	r8,0
8000cc0a:	c4 f8       	rjmp	8000cca8 <udi_msc_trans_block+0xc8>
8000cc0c:	4a 99       	lddpc	r9,8000ccb0 <udi_msc_trans_block+0xd0>
8000cc0e:	30 08       	mov	r8,0
8000cc10:	b2 88       	st.b	r9[0x0],r8
8000cc12:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000cc16:	58 08       	cp.w	r8,0
8000cc18:	c0 40       	breq	8000cc20 <udi_msc_trans_block+0x40>
8000cc1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000cc1e:	c0 28       	rjmp	8000cc22 <udi_msc_trans_block+0x42>
8000cc20:	4a 58       	lddpc	r8,8000ccb4 <udi_msc_trans_block+0xd4>
8000cc22:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000cc26:	30 09       	mov	r9,0
8000cc28:	f2 0a 18 00 	cp.b	r10,r9
8000cc2c:	c0 40       	breq	8000cc34 <udi_msc_trans_block+0x54>
8000cc2e:	e0 6c 00 81 	mov	r12,129
8000cc32:	c0 28       	rjmp	8000cc36 <udi_msc_trans_block+0x56>
8000cc34:	30 2c       	mov	r12,2
8000cc36:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000cc3a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000cc3e:	30 0b       	mov	r11,0
8000cc40:	f0 1f 00 1e 	mcall	8000ccb8 <udi_msc_trans_block+0xd8>
8000cc44:	18 98       	mov	r8,r12
8000cc46:	ec 18 00 01 	eorl	r8,0x1
8000cc4a:	5c 58       	castu.b	r8
8000cc4c:	c0 60       	breq	8000cc58 <udi_msc_trans_block+0x78>
8000cc4e:	49 99       	lddpc	r9,8000ccb0 <udi_msc_trans_block+0xd0>
8000cc50:	30 18       	mov	r8,1
8000cc52:	b2 88       	st.b	r9[0x0],r8
8000cc54:	30 08       	mov	r8,0
8000cc56:	c2 98       	rjmp	8000cca8 <udi_msc_trans_block+0xc8>
8000cc58:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000cc5c:	58 08       	cp.w	r8,0
8000cc5e:	c1 d1       	brne	8000cc98 <udi_msc_trans_block+0xb8>
8000cc60:	49 48       	lddpc	r8,8000ccb0 <udi_msc_trans_block+0xd0>
8000cc62:	11 88       	ld.ub	r8,r8[0x0]
8000cc64:	5c 58       	castu.b	r8
8000cc66:	ec 18 00 01 	eorl	r8,0x1
8000cc6a:	5c 58       	castu.b	r8
8000cc6c:	cf a1       	brne	8000cc60 <udi_msc_trans_block+0x80>
8000cc6e:	49 48       	lddpc	r8,8000ccbc <udi_msc_trans_block+0xdc>
8000cc70:	11 88       	ld.ub	r8,r8[0x0]
8000cc72:	5c 58       	castu.b	r8
8000cc74:	c0 30       	breq	8000cc7a <udi_msc_trans_block+0x9a>
8000cc76:	30 08       	mov	r8,0
8000cc78:	c1 88       	rjmp	8000cca8 <udi_msc_trans_block+0xc8>
8000cc7a:	49 28       	lddpc	r8,8000ccc0 <udi_msc_trans_block+0xe0>
8000cc7c:	70 29       	ld.w	r9,r8[0x8]
8000cc7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cc82:	10 19       	sub	r9,r8
8000cc84:	48 f8       	lddpc	r8,8000ccc0 <udi_msc_trans_block+0xe0>
8000cc86:	91 29       	st.w	r8[0x8],r9
8000cc88:	48 d8       	lddpc	r8,8000ccbc <udi_msc_trans_block+0xdc>
8000cc8a:	11 88       	ld.ub	r8,r8[0x0]
8000cc8c:	5c 58       	castu.b	r8
8000cc8e:	ec 18 00 01 	eorl	r8,0x1
8000cc92:	5c 58       	castu.b	r8
8000cc94:	5c 58       	castu.b	r8
8000cc96:	c0 98       	rjmp	8000cca8 <udi_msc_trans_block+0xc8>
8000cc98:	48 a8       	lddpc	r8,8000ccc0 <udi_msc_trans_block+0xe0>
8000cc9a:	70 29       	ld.w	r9,r8[0x8]
8000cc9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cca0:	10 19       	sub	r9,r8
8000cca2:	48 88       	lddpc	r8,8000ccc0 <udi_msc_trans_block+0xe0>
8000cca4:	91 29       	st.w	r8[0x8],r9
8000cca6:	30 18       	mov	r8,1
8000cca8:	10 9c       	mov	r12,r8
8000ccaa:	2f cd       	sub	sp,-16
8000ccac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccb0:	00 00       	add	r0,r0
8000ccb2:	01 60       	ld.uh	r0,--r0
8000ccb4:	80 00       	ld.sh	r0,r0[0x0]
8000ccb6:	cb a8       	rjmp	8000ce2a <udc_update_iface_desc+0x86>
8000ccb8:	80 00       	ld.sh	r0,r0[0x0]
8000ccba:	a1 38       	mul	r8,r0
8000ccbc:	00 00       	add	r0,r0
8000ccbe:	0d d7       	ld.ub	r7,r6[0x5]
8000ccc0:	00 00       	add	r0,r0
8000ccc2:	01 50       	ld.sh	r0,--r0
8000ccc4:	36 39       	mov	r9,99
8000ccc6:	36 39       	mov	r9,99
8000ccc8:	36 39       	mov	r9,99
8000ccca:	36 39       	mov	r9,99
8000cccc:	36 39       	mov	r9,99
8000ccce:	36 39       	mov	r9,99
8000ccd0:	00 00       	add	r0,r0
	...

8000ccd4 <udc_get_string_serial_name>:
8000ccd4:	eb cd 40 80 	pushm	r7,lr
8000ccd8:	1a 97       	mov	r7,sp
8000ccda:	48 38       	lddpc	r8,8000cce4 <udc_get_string_serial_name+0x10>
8000ccdc:	10 9c       	mov	r12,r8
8000ccde:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cce2:	00 00       	add	r0,r0
8000cce4:	80 00       	ld.sh	r0,r0[0x0]
8000cce6:	cc c4       	brge	8000cc7e <udi_msc_trans_block+0x9e>

8000cce8 <udc_get_eof_conf>:
8000cce8:	eb cd 40 80 	pushm	r7,lr
8000ccec:	1a 97       	mov	r7,sp
8000ccee:	48 b8       	lddpc	r8,8000cd18 <udc_get_eof_conf+0x30>
8000ccf0:	70 08       	ld.w	r8,r8[0x0]
8000ccf2:	70 09       	ld.w	r9,r8[0x0]
8000ccf4:	48 98       	lddpc	r8,8000cd18 <udc_get_eof_conf+0x30>
8000ccf6:	70 08       	ld.w	r8,r8[0x0]
8000ccf8:	70 08       	ld.w	r8,r8[0x0]
8000ccfa:	11 aa       	ld.ub	r10,r8[0x2]
8000ccfc:	a9 6a       	lsl	r10,0x8
8000ccfe:	11 b8       	ld.ub	r8,r8[0x3]
8000cd00:	14 48       	or	r8,r10
8000cd02:	5c 88       	casts.h	r8
8000cd04:	5c 88       	casts.h	r8
8000cd06:	5c c8       	swap.bh	r8
8000cd08:	5c 88       	casts.h	r8
8000cd0a:	5c 78       	castu.h	r8
8000cd0c:	f2 08 00 08 	add	r8,r9,r8
8000cd10:	10 9c       	mov	r12,r8
8000cd12:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd16:	00 00       	add	r0,r0
8000cd18:	00 00       	add	r0,r0
8000cd1a:	08 c8       	st.b	r4++,r8

8000cd1c <udc_next_desc_in_iface>:
8000cd1c:	eb cd 40 80 	pushm	r7,lr
8000cd20:	1a 97       	mov	r7,sp
8000cd22:	20 3d       	sub	sp,12
8000cd24:	ef 4c ff f8 	st.w	r7[-8],r12
8000cd28:	16 98       	mov	r8,r11
8000cd2a:	ef 68 ff f4 	st.b	r7[-12],r8
8000cd2e:	f0 1f 00 1d 	mcall	8000cda0 <udc_next_desc_in_iface+0x84>
8000cd32:	18 98       	mov	r8,r12
8000cd34:	ef 48 ff fc 	st.w	r7[-4],r8
8000cd38:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cd3c:	11 88       	ld.ub	r8,r8[0x0]
8000cd3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000cd42:	f2 08 00 08 	add	r8,r9,r8
8000cd46:	ef 48 ff f8 	st.w	r7[-8],r8
8000cd4a:	c1 c8       	rjmp	8000cd82 <udc_next_desc_in_iface+0x66>
8000cd4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cd50:	11 99       	ld.ub	r9,r8[0x1]
8000cd52:	30 48       	mov	r8,4
8000cd54:	f0 09 18 00 	cp.b	r9,r8
8000cd58:	c1 d0       	breq	8000cd92 <udc_next_desc_in_iface+0x76>
8000cd5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cd5e:	11 98       	ld.ub	r8,r8[0x1]
8000cd60:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cd64:	f0 09 18 00 	cp.b	r9,r8
8000cd68:	c0 41       	brne	8000cd70 <udc_next_desc_in_iface+0x54>
8000cd6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cd6e:	c1 48       	rjmp	8000cd96 <udc_next_desc_in_iface+0x7a>
8000cd70:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cd74:	11 88       	ld.ub	r8,r8[0x0]
8000cd76:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000cd7a:	f2 08 00 08 	add	r8,r9,r8
8000cd7e:	ef 48 ff f8 	st.w	r7[-8],r8
8000cd82:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cd86:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cd8a:	10 39       	cp.w	r9,r8
8000cd8c:	fe 9b ff e0 	brhi	8000cd4c <udc_next_desc_in_iface+0x30>
8000cd90:	c0 28       	rjmp	8000cd94 <udc_next_desc_in_iface+0x78>
8000cd92:	d7 03       	nop
8000cd94:	30 08       	mov	r8,0
8000cd96:	10 9c       	mov	r12,r8
8000cd98:	2f dd       	sub	sp,-12
8000cd9a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd9e:	00 00       	add	r0,r0
8000cda0:	80 00       	ld.sh	r0,r0[0x0]
8000cda2:	cc e8       	rjmp	8000cf3e <udc_iface_enable+0x26>

8000cda4 <udc_update_iface_desc>:
8000cda4:	eb cd 40 80 	pushm	r7,lr
8000cda8:	1a 97       	mov	r7,sp
8000cdaa:	20 3d       	sub	sp,12
8000cdac:	18 99       	mov	r9,r12
8000cdae:	16 98       	mov	r8,r11
8000cdb0:	ef 69 ff f8 	st.b	r7[-8],r9
8000cdb4:	ef 68 ff f4 	st.b	r7[-12],r8
8000cdb8:	4a 58       	lddpc	r8,8000ce4c <udc_update_iface_desc+0xa8>
8000cdba:	11 88       	ld.ub	r8,r8[0x0]
8000cdbc:	58 08       	cp.w	r8,0
8000cdbe:	c0 31       	brne	8000cdc4 <udc_update_iface_desc+0x20>
8000cdc0:	30 08       	mov	r8,0
8000cdc2:	c4 18       	rjmp	8000ce44 <udc_update_iface_desc+0xa0>
8000cdc4:	4a 38       	lddpc	r8,8000ce50 <udc_update_iface_desc+0xac>
8000cdc6:	70 08       	ld.w	r8,r8[0x0]
8000cdc8:	70 08       	ld.w	r8,r8[0x0]
8000cdca:	11 c8       	ld.ub	r8,r8[0x4]
8000cdcc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000cdd0:	f0 09 18 00 	cp.b	r9,r8
8000cdd4:	c0 33       	brcs	8000cdda <udc_update_iface_desc+0x36>
8000cdd6:	30 08       	mov	r8,0
8000cdd8:	c3 68       	rjmp	8000ce44 <udc_update_iface_desc+0xa0>
8000cdda:	49 e8       	lddpc	r8,8000ce50 <udc_update_iface_desc+0xac>
8000cddc:	70 08       	ld.w	r8,r8[0x0]
8000cdde:	70 08       	ld.w	r8,r8[0x0]
8000cde0:	10 99       	mov	r9,r8
8000cde2:	49 d8       	lddpc	r8,8000ce54 <udc_update_iface_desc+0xb0>
8000cde4:	91 09       	st.w	r8[0x0],r9
8000cde6:	f0 1f 00 1d 	mcall	8000ce58 <udc_update_iface_desc+0xb4>
8000cdea:	18 98       	mov	r8,r12
8000cdec:	ef 48 ff fc 	st.w	r7[-4],r8
8000cdf0:	c2 28       	rjmp	8000ce34 <udc_update_iface_desc+0x90>
8000cdf2:	49 98       	lddpc	r8,8000ce54 <udc_update_iface_desc+0xb0>
8000cdf4:	70 08       	ld.w	r8,r8[0x0]
8000cdf6:	11 99       	ld.ub	r9,r8[0x1]
8000cdf8:	30 48       	mov	r8,4
8000cdfa:	f0 09 18 00 	cp.b	r9,r8
8000cdfe:	c1 31       	brne	8000ce24 <udc_update_iface_desc+0x80>
8000ce00:	49 58       	lddpc	r8,8000ce54 <udc_update_iface_desc+0xb0>
8000ce02:	70 08       	ld.w	r8,r8[0x0]
8000ce04:	11 a8       	ld.ub	r8,r8[0x2]
8000ce06:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ce0a:	f0 09 18 00 	cp.b	r9,r8
8000ce0e:	c0 b1       	brne	8000ce24 <udc_update_iface_desc+0x80>
8000ce10:	49 18       	lddpc	r8,8000ce54 <udc_update_iface_desc+0xb0>
8000ce12:	70 08       	ld.w	r8,r8[0x0]
8000ce14:	11 b8       	ld.ub	r8,r8[0x3]
8000ce16:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000ce1a:	f0 09 18 00 	cp.b	r9,r8
8000ce1e:	c0 31       	brne	8000ce24 <udc_update_iface_desc+0x80>
8000ce20:	30 18       	mov	r8,1
8000ce22:	c1 18       	rjmp	8000ce44 <udc_update_iface_desc+0xa0>
8000ce24:	48 c8       	lddpc	r8,8000ce54 <udc_update_iface_desc+0xb0>
8000ce26:	70 09       	ld.w	r9,r8[0x0]
8000ce28:	48 b8       	lddpc	r8,8000ce54 <udc_update_iface_desc+0xb0>
8000ce2a:	70 08       	ld.w	r8,r8[0x0]
8000ce2c:	11 88       	ld.ub	r8,r8[0x0]
8000ce2e:	10 09       	add	r9,r8
8000ce30:	48 98       	lddpc	r8,8000ce54 <udc_update_iface_desc+0xb0>
8000ce32:	91 09       	st.w	r8[0x0],r9
8000ce34:	48 88       	lddpc	r8,8000ce54 <udc_update_iface_desc+0xb0>
8000ce36:	70 08       	ld.w	r8,r8[0x0]
8000ce38:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ce3c:	10 39       	cp.w	r9,r8
8000ce3e:	fe 9b ff da 	brhi	8000cdf2 <udc_update_iface_desc+0x4e>
8000ce42:	30 08       	mov	r8,0
8000ce44:	10 9c       	mov	r12,r8
8000ce46:	2f dd       	sub	sp,-12
8000ce48:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ce4c:	00 00       	add	r0,r0
8000ce4e:	08 c6       	st.b	r4++,r6
8000ce50:	00 00       	add	r0,r0
8000ce52:	08 c8       	st.b	r4++,r8
8000ce54:	00 00       	add	r0,r0
8000ce56:	08 cc       	st.b	r4++,r12
8000ce58:	80 00       	ld.sh	r0,r0[0x0]
8000ce5a:	cc e8       	rjmp	8000cff6 <udc_reset+0x2>

8000ce5c <udc_iface_disable>:
8000ce5c:	eb cd 40 80 	pushm	r7,lr
8000ce60:	1a 97       	mov	r7,sp
8000ce62:	20 3d       	sub	sp,12
8000ce64:	18 98       	mov	r8,r12
8000ce66:	ef 68 ff f4 	st.b	r7[-12],r8
8000ce6a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000ce6e:	30 0b       	mov	r11,0
8000ce70:	10 9c       	mov	r12,r8
8000ce72:	f0 1f 00 25 	mcall	8000cf04 <udc_iface_disable+0xa8>
8000ce76:	18 98       	mov	r8,r12
8000ce78:	ec 18 00 01 	eorl	r8,0x1
8000ce7c:	5c 58       	castu.b	r8
8000ce7e:	c0 30       	breq	8000ce84 <udc_iface_disable+0x28>
8000ce80:	30 08       	mov	r8,0
8000ce82:	c3 d8       	rjmp	8000cefc <udc_iface_disable+0xa0>
8000ce84:	4a 18       	lddpc	r8,8000cf08 <udc_iface_disable+0xac>
8000ce86:	70 08       	ld.w	r8,r8[0x0]
8000ce88:	70 19       	ld.w	r9,r8[0x4]
8000ce8a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000ce8e:	a3 68       	lsl	r8,0x2
8000ce90:	f2 08 00 08 	add	r8,r9,r8
8000ce94:	70 08       	ld.w	r8,r8[0x0]
8000ce96:	ef 48 ff f8 	st.w	r7[-8],r8
8000ce9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ce9e:	70 38       	ld.w	r8,r8[0xc]
8000cea0:	5d 18       	icall	r8
8000cea2:	18 98       	mov	r8,r12
8000cea4:	10 99       	mov	r9,r8
8000cea6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000ceaa:	12 9b       	mov	r11,r9
8000ceac:	10 9c       	mov	r12,r8
8000ceae:	f0 1f 00 16 	mcall	8000cf04 <udc_iface_disable+0xa8>
8000ceb2:	18 98       	mov	r8,r12
8000ceb4:	ec 18 00 01 	eorl	r8,0x1
8000ceb8:	5c 58       	castu.b	r8
8000ceba:	c0 30       	breq	8000cec0 <udc_iface_disable+0x64>
8000cebc:	30 08       	mov	r8,0
8000cebe:	c1 f8       	rjmp	8000cefc <udc_iface_disable+0xa0>
8000cec0:	49 38       	lddpc	r8,8000cf0c <udc_iface_disable+0xb0>
8000cec2:	70 08       	ld.w	r8,r8[0x0]
8000cec4:	ef 48 ff fc 	st.w	r7[-4],r8
8000cec8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cecc:	30 5b       	mov	r11,5
8000cece:	10 9c       	mov	r12,r8
8000ced0:	f0 1f 00 10 	mcall	8000cf10 <udc_iface_disable+0xb4>
8000ced4:	18 98       	mov	r8,r12
8000ced6:	ef 48 ff fc 	st.w	r7[-4],r8
8000ceda:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cede:	58 08       	cp.w	r8,0
8000cee0:	c0 71       	brne	8000ceee <udc_iface_disable+0x92>
8000cee2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cee6:	70 18       	ld.w	r8,r8[0x4]
8000cee8:	5d 18       	icall	r8
8000ceea:	30 18       	mov	r8,1
8000ceec:	c0 88       	rjmp	8000cefc <udc_iface_disable+0xa0>
8000ceee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cef2:	11 a8       	ld.ub	r8,r8[0x2]
8000cef4:	10 9c       	mov	r12,r8
8000cef6:	f0 1f 00 08 	mcall	8000cf14 <udc_iface_disable+0xb8>
8000cefa:	ce 7b       	rjmp	8000cec8 <udc_iface_disable+0x6c>
8000cefc:	10 9c       	mov	r12,r8
8000cefe:	2f dd       	sub	sp,-12
8000cf00:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cf04:	80 00       	ld.sh	r0,r0[0x0]
8000cf06:	cd a4       	brge	8000ceba <udc_iface_disable+0x5e>
8000cf08:	00 00       	add	r0,r0
8000cf0a:	08 c8       	st.b	r4++,r8
8000cf0c:	00 00       	add	r0,r0
8000cf0e:	08 cc       	st.b	r4++,r12
8000cf10:	80 00       	ld.sh	r0,r0[0x0]
8000cf12:	cd 1c       	rcall	8000d0b4 <udc_sof_notify+0x5c>
8000cf14:	80 00       	ld.sh	r0,r0[0x0]
8000cf16:	9e 18       	ld.sh	r8,pc[0x2]

8000cf18 <udc_iface_enable>:
8000cf18:	eb cd 40 80 	pushm	r7,lr
8000cf1c:	1a 97       	mov	r7,sp
8000cf1e:	20 3d       	sub	sp,12
8000cf20:	18 99       	mov	r9,r12
8000cf22:	16 98       	mov	r8,r11
8000cf24:	ef 69 ff f8 	st.b	r7[-8],r9
8000cf28:	ef 68 ff f4 	st.b	r7[-12],r8
8000cf2c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cf30:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cf34:	12 9b       	mov	r11,r9
8000cf36:	10 9c       	mov	r12,r8
8000cf38:	f0 1f 00 25 	mcall	8000cfcc <udc_iface_enable+0xb4>
8000cf3c:	18 98       	mov	r8,r12
8000cf3e:	ec 18 00 01 	eorl	r8,0x1
8000cf42:	5c 58       	castu.b	r8
8000cf44:	c0 30       	breq	8000cf4a <udc_iface_enable+0x32>
8000cf46:	30 08       	mov	r8,0
8000cf48:	c3 e8       	rjmp	8000cfc4 <udc_iface_enable+0xac>
8000cf4a:	4a 28       	lddpc	r8,8000cfd0 <udc_iface_enable+0xb8>
8000cf4c:	70 08       	ld.w	r8,r8[0x0]
8000cf4e:	ef 48 ff fc 	st.w	r7[-4],r8
8000cf52:	c0 28       	rjmp	8000cf56 <udc_iface_enable+0x3e>
8000cf54:	d7 03       	nop
8000cf56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cf5a:	30 5b       	mov	r11,5
8000cf5c:	10 9c       	mov	r12,r8
8000cf5e:	f0 1f 00 1e 	mcall	8000cfd4 <udc_iface_enable+0xbc>
8000cf62:	18 98       	mov	r8,r12
8000cf64:	ef 48 ff fc 	st.w	r7[-4],r8
8000cf68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cf6c:	58 08       	cp.w	r8,0
8000cf6e:	c0 e1       	brne	8000cf8a <udc_iface_enable+0x72>
8000cf70:	49 a8       	lddpc	r8,8000cfd8 <udc_iface_enable+0xc0>
8000cf72:	70 08       	ld.w	r8,r8[0x0]
8000cf74:	70 19       	ld.w	r9,r8[0x4]
8000cf76:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cf7a:	a3 68       	lsl	r8,0x2
8000cf7c:	f2 08 00 08 	add	r8,r9,r8
8000cf80:	70 08       	ld.w	r8,r8[0x0]
8000cf82:	70 08       	ld.w	r8,r8[0x0]
8000cf84:	5d 18       	icall	r8
8000cf86:	18 98       	mov	r8,r12
8000cf88:	c1 e8       	rjmp	8000cfc4 <udc_iface_enable+0xac>
8000cf8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cf8e:	11 c9       	ld.ub	r9,r8[0x4]
8000cf90:	a9 69       	lsl	r9,0x8
8000cf92:	11 d8       	ld.ub	r8,r8[0x5]
8000cf94:	12 48       	or	r8,r9
8000cf96:	5c 88       	casts.h	r8
8000cf98:	5c 88       	casts.h	r8
8000cf9a:	5c c8       	swap.bh	r8
8000cf9c:	5c 88       	casts.h	r8
8000cf9e:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000cfa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cfa6:	11 b8       	ld.ub	r8,r8[0x3]
8000cfa8:	10 99       	mov	r9,r8
8000cfaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cfae:	11 a8       	ld.ub	r8,r8[0x2]
8000cfb0:	12 9b       	mov	r11,r9
8000cfb2:	10 9c       	mov	r12,r8
8000cfb4:	f0 1f 00 0a 	mcall	8000cfdc <udc_iface_enable+0xc4>
8000cfb8:	18 98       	mov	r8,r12
8000cfba:	ec 18 00 01 	eorl	r8,0x1
8000cfbe:	5c 58       	castu.b	r8
8000cfc0:	cc a0       	breq	8000cf54 <udc_iface_enable+0x3c>
8000cfc2:	30 08       	mov	r8,0
8000cfc4:	10 9c       	mov	r12,r8
8000cfc6:	2f dd       	sub	sp,-12
8000cfc8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cfcc:	80 00       	ld.sh	r0,r0[0x0]
8000cfce:	cd a4       	brge	8000cf82 <udc_iface_enable+0x6a>
8000cfd0:	00 00       	add	r0,r0
8000cfd2:	08 cc       	st.b	r4++,r12
8000cfd4:	80 00       	ld.sh	r0,r0[0x0]
8000cfd6:	cd 1c       	rcall	8000d178 <udc_req_std_dev_clear_feature+0x24>
8000cfd8:	00 00       	add	r0,r0
8000cfda:	08 c8       	st.b	r4++,r8
8000cfdc:	80 00       	ld.sh	r0,r0[0x0]
8000cfde:	9a c8       	ld.uh	r8,sp[0x8]

8000cfe0 <udc_start>:
8000cfe0:	eb cd 40 80 	pushm	r7,lr
8000cfe4:	1a 97       	mov	r7,sp
8000cfe6:	f0 1f 00 03 	mcall	8000cff0 <udc_start+0x10>
8000cfea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cfee:	00 00       	add	r0,r0
8000cff0:	80 00       	ld.sh	r0,r0[0x0]
8000cff2:	97 f4       	st.w	r11[0x3c],r4

8000cff4 <udc_reset>:
8000cff4:	eb cd 40 80 	pushm	r7,lr
8000cff8:	1a 97       	mov	r7,sp
8000cffa:	20 1d       	sub	sp,4
8000cffc:	49 38       	lddpc	r8,8000d048 <udc_reset+0x54>
8000cffe:	11 88       	ld.ub	r8,r8[0x0]
8000d000:	58 08       	cp.w	r8,0
8000d002:	c1 80       	breq	8000d032 <udc_reset+0x3e>
8000d004:	30 08       	mov	r8,0
8000d006:	ef 68 ff ff 	st.b	r7[-1],r8
8000d00a:	c0 b8       	rjmp	8000d020 <udc_reset+0x2c>
8000d00c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d010:	10 9c       	mov	r12,r8
8000d012:	f0 1f 00 0f 	mcall	8000d04c <udc_reset+0x58>
8000d016:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d01a:	2f f8       	sub	r8,-1
8000d01c:	ef 68 ff ff 	st.b	r7[-1],r8
8000d020:	48 c8       	lddpc	r8,8000d050 <udc_reset+0x5c>
8000d022:	70 08       	ld.w	r8,r8[0x0]
8000d024:	70 08       	ld.w	r8,r8[0x0]
8000d026:	11 c8       	ld.ub	r8,r8[0x4]
8000d028:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d02c:	f0 09 18 00 	cp.b	r9,r8
8000d030:	ce e3       	brcs	8000d00c <udc_reset+0x18>
8000d032:	48 69       	lddpc	r9,8000d048 <udc_reset+0x54>
8000d034:	30 08       	mov	r8,0
8000d036:	b2 88       	st.b	r9[0x0],r8
8000d038:	48 79       	lddpc	r9,8000d054 <udc_reset+0x60>
8000d03a:	e0 68 01 00 	mov	r8,256
8000d03e:	b2 08       	st.h	r9[0x0],r8
8000d040:	2f fd       	sub	sp,-4
8000d042:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d046:	00 00       	add	r0,r0
8000d048:	00 00       	add	r0,r0
8000d04a:	08 c6       	st.b	r4++,r6
8000d04c:	80 00       	ld.sh	r0,r0[0x0]
8000d04e:	ce 5c       	rcall	8000d218 <udc_req_std_dev_set_feature+0x48>
8000d050:	00 00       	add	r0,r0
8000d052:	08 c8       	st.b	r4++,r8
8000d054:	00 00       	add	r0,r0
8000d056:	08 c4       	st.b	r4++,r4

8000d058 <udc_sof_notify>:
8000d058:	eb cd 40 80 	pushm	r7,lr
8000d05c:	1a 97       	mov	r7,sp
8000d05e:	20 1d       	sub	sp,4
8000d060:	49 88       	lddpc	r8,8000d0c0 <udc_sof_notify+0x68>
8000d062:	11 88       	ld.ub	r8,r8[0x0]
8000d064:	58 08       	cp.w	r8,0
8000d066:	c2 a0       	breq	8000d0ba <udc_sof_notify+0x62>
8000d068:	30 08       	mov	r8,0
8000d06a:	ef 68 ff ff 	st.b	r7[-1],r8
8000d06e:	c1 d8       	rjmp	8000d0a8 <udc_sof_notify+0x50>
8000d070:	49 58       	lddpc	r8,8000d0c4 <udc_sof_notify+0x6c>
8000d072:	70 08       	ld.w	r8,r8[0x0]
8000d074:	70 19       	ld.w	r9,r8[0x4]
8000d076:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d07a:	a3 68       	lsl	r8,0x2
8000d07c:	f2 08 00 08 	add	r8,r9,r8
8000d080:	70 08       	ld.w	r8,r8[0x0]
8000d082:	70 48       	ld.w	r8,r8[0x10]
8000d084:	58 08       	cp.w	r8,0
8000d086:	c0 c0       	breq	8000d09e <udc_sof_notify+0x46>
8000d088:	48 f8       	lddpc	r8,8000d0c4 <udc_sof_notify+0x6c>
8000d08a:	70 08       	ld.w	r8,r8[0x0]
8000d08c:	70 19       	ld.w	r9,r8[0x4]
8000d08e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d092:	a3 68       	lsl	r8,0x2
8000d094:	f2 08 00 08 	add	r8,r9,r8
8000d098:	70 08       	ld.w	r8,r8[0x0]
8000d09a:	70 48       	ld.w	r8,r8[0x10]
8000d09c:	5d 18       	icall	r8
8000d09e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d0a2:	2f f8       	sub	r8,-1
8000d0a4:	ef 68 ff ff 	st.b	r7[-1],r8
8000d0a8:	48 78       	lddpc	r8,8000d0c4 <udc_sof_notify+0x6c>
8000d0aa:	70 08       	ld.w	r8,r8[0x0]
8000d0ac:	70 08       	ld.w	r8,r8[0x0]
8000d0ae:	11 c8       	ld.ub	r8,r8[0x4]
8000d0b0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d0b4:	f0 09 18 00 	cp.b	r9,r8
8000d0b8:	cd c3       	brcs	8000d070 <udc_sof_notify+0x18>
8000d0ba:	2f fd       	sub	sp,-4
8000d0bc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d0c0:	00 00       	add	r0,r0
8000d0c2:	08 c6       	st.b	r4++,r6
8000d0c4:	00 00       	add	r0,r0
8000d0c6:	08 c8       	st.b	r4++,r8

8000d0c8 <udc_req_std_dev_get_status>:
8000d0c8:	eb cd 40 80 	pushm	r7,lr
8000d0cc:	1a 97       	mov	r7,sp
8000d0ce:	48 98       	lddpc	r8,8000d0f0 <udc_req_std_dev_get_status+0x28>
8000d0d0:	90 39       	ld.sh	r9,r8[0x6]
8000d0d2:	30 28       	mov	r8,2
8000d0d4:	f0 09 19 00 	cp.h	r9,r8
8000d0d8:	c0 30       	breq	8000d0de <udc_req_std_dev_get_status+0x16>
8000d0da:	30 08       	mov	r8,0
8000d0dc:	c0 78       	rjmp	8000d0ea <udc_req_std_dev_get_status+0x22>
8000d0de:	48 68       	lddpc	r8,8000d0f4 <udc_req_std_dev_get_status+0x2c>
8000d0e0:	30 2b       	mov	r11,2
8000d0e2:	10 9c       	mov	r12,r8
8000d0e4:	f0 1f 00 05 	mcall	8000d0f8 <udc_req_std_dev_get_status+0x30>
8000d0e8:	30 18       	mov	r8,1
8000d0ea:	10 9c       	mov	r12,r8
8000d0ec:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d0f0:	00 00       	add	r0,r0
8000d0f2:	0d b8       	ld.ub	r8,r6[0x3]
8000d0f4:	00 00       	add	r0,r0
8000d0f6:	08 c4       	st.b	r4++,r4
8000d0f8:	80 00       	ld.sh	r0,r0[0x0]
8000d0fa:	9a 9c       	ld.uh	r12,sp[0x2]

8000d0fc <udc_req_std_ep_get_status>:
8000d0fc:	eb cd 40 80 	pushm	r7,lr
8000d100:	1a 97       	mov	r7,sp
8000d102:	49 18       	lddpc	r8,8000d144 <udc_req_std_ep_get_status+0x48>
8000d104:	90 39       	ld.sh	r9,r8[0x6]
8000d106:	30 28       	mov	r8,2
8000d108:	f0 09 19 00 	cp.h	r9,r8
8000d10c:	c0 30       	breq	8000d112 <udc_req_std_ep_get_status+0x16>
8000d10e:	30 08       	mov	r8,0
8000d110:	c1 68       	rjmp	8000d13c <udc_req_std_ep_get_status+0x40>
8000d112:	48 d8       	lddpc	r8,8000d144 <udc_req_std_ep_get_status+0x48>
8000d114:	90 28       	ld.sh	r8,r8[0x4]
8000d116:	5c 58       	castu.b	r8
8000d118:	10 9c       	mov	r12,r8
8000d11a:	f0 1f 00 0c 	mcall	8000d148 <udc_req_std_ep_get_status+0x4c>
8000d11e:	18 98       	mov	r8,r12
8000d120:	58 08       	cp.w	r8,0
8000d122:	c0 40       	breq	8000d12a <udc_req_std_ep_get_status+0x2e>
8000d124:	e0 68 01 00 	mov	r8,256
8000d128:	c0 28       	rjmp	8000d12c <udc_req_std_ep_get_status+0x30>
8000d12a:	30 08       	mov	r8,0
8000d12c:	48 89       	lddpc	r9,8000d14c <udc_req_std_ep_get_status+0x50>
8000d12e:	b2 08       	st.h	r9[0x0],r8
8000d130:	48 78       	lddpc	r8,8000d14c <udc_req_std_ep_get_status+0x50>
8000d132:	30 2b       	mov	r11,2
8000d134:	10 9c       	mov	r12,r8
8000d136:	f0 1f 00 07 	mcall	8000d150 <udc_req_std_ep_get_status+0x54>
8000d13a:	30 18       	mov	r8,1
8000d13c:	10 9c       	mov	r12,r8
8000d13e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d142:	00 00       	add	r0,r0
8000d144:	00 00       	add	r0,r0
8000d146:	0d b8       	ld.ub	r8,r6[0x3]
8000d148:	80 00       	ld.sh	r0,r0[0x0]
8000d14a:	9e b4       	ld.uh	r4,pc[0x6]
8000d14c:	00 00       	add	r0,r0
8000d14e:	08 d2       	st.w	--r4,r2
8000d150:	80 00       	ld.sh	r0,r0[0x0]
8000d152:	9a 9c       	ld.uh	r12,sp[0x2]

8000d154 <udc_req_std_dev_clear_feature>:
8000d154:	eb cd 40 80 	pushm	r7,lr
8000d158:	1a 97       	mov	r7,sp
8000d15a:	48 d8       	lddpc	r8,8000d18c <udc_req_std_dev_clear_feature+0x38>
8000d15c:	90 38       	ld.sh	r8,r8[0x6]
8000d15e:	58 08       	cp.w	r8,0
8000d160:	c0 30       	breq	8000d166 <udc_req_std_dev_clear_feature+0x12>
8000d162:	30 08       	mov	r8,0
8000d164:	c1 08       	rjmp	8000d184 <udc_req_std_dev_clear_feature+0x30>
8000d166:	48 a8       	lddpc	r8,8000d18c <udc_req_std_dev_clear_feature+0x38>
8000d168:	90 19       	ld.sh	r9,r8[0x2]
8000d16a:	30 18       	mov	r8,1
8000d16c:	f0 09 19 00 	cp.h	r9,r8
8000d170:	c0 91       	brne	8000d182 <udc_req_std_dev_clear_feature+0x2e>
8000d172:	48 88       	lddpc	r8,8000d190 <udc_req_std_dev_clear_feature+0x3c>
8000d174:	90 08       	ld.sh	r8,r8[0x0]
8000d176:	a9 d8       	cbr	r8,0x9
8000d178:	5c 88       	casts.h	r8
8000d17a:	48 69       	lddpc	r9,8000d190 <udc_req_std_dev_clear_feature+0x3c>
8000d17c:	b2 08       	st.h	r9[0x0],r8
8000d17e:	30 18       	mov	r8,1
8000d180:	c0 28       	rjmp	8000d184 <udc_req_std_dev_clear_feature+0x30>
8000d182:	30 08       	mov	r8,0
8000d184:	10 9c       	mov	r12,r8
8000d186:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d18a:	00 00       	add	r0,r0
8000d18c:	00 00       	add	r0,r0
8000d18e:	0d b8       	ld.ub	r8,r6[0x3]
8000d190:	00 00       	add	r0,r0
8000d192:	08 c4       	st.b	r4++,r4

8000d194 <udc_req_std_ep_clear_feature>:
8000d194:	eb cd 40 80 	pushm	r7,lr
8000d198:	1a 97       	mov	r7,sp
8000d19a:	48 c8       	lddpc	r8,8000d1c8 <udc_req_std_ep_clear_feature+0x34>
8000d19c:	90 38       	ld.sh	r8,r8[0x6]
8000d19e:	58 08       	cp.w	r8,0
8000d1a0:	c0 30       	breq	8000d1a6 <udc_req_std_ep_clear_feature+0x12>
8000d1a2:	30 08       	mov	r8,0
8000d1a4:	c0 e8       	rjmp	8000d1c0 <udc_req_std_ep_clear_feature+0x2c>
8000d1a6:	48 98       	lddpc	r8,8000d1c8 <udc_req_std_ep_clear_feature+0x34>
8000d1a8:	90 18       	ld.sh	r8,r8[0x2]
8000d1aa:	58 08       	cp.w	r8,0
8000d1ac:	c0 91       	brne	8000d1be <udc_req_std_ep_clear_feature+0x2a>
8000d1ae:	48 78       	lddpc	r8,8000d1c8 <udc_req_std_ep_clear_feature+0x34>
8000d1b0:	90 28       	ld.sh	r8,r8[0x4]
8000d1b2:	5c 58       	castu.b	r8
8000d1b4:	10 9c       	mov	r12,r8
8000d1b6:	f0 1f 00 06 	mcall	8000d1cc <udc_req_std_ep_clear_feature+0x38>
8000d1ba:	18 98       	mov	r8,r12
8000d1bc:	c0 28       	rjmp	8000d1c0 <udc_req_std_ep_clear_feature+0x2c>
8000d1be:	30 08       	mov	r8,0
8000d1c0:	10 9c       	mov	r12,r8
8000d1c2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d1c6:	00 00       	add	r0,r0
8000d1c8:	00 00       	add	r0,r0
8000d1ca:	0d b8       	ld.ub	r8,r6[0x3]
8000d1cc:	80 00       	ld.sh	r0,r0[0x0]
8000d1ce:	9f f8       	st.w	pc[0x3c],r8

8000d1d0 <udc_req_std_dev_set_feature>:
8000d1d0:	eb cd 40 80 	pushm	r7,lr
8000d1d4:	1a 97       	mov	r7,sp
8000d1d6:	4a 78       	lddpc	r8,8000d270 <udc_req_std_dev_set_feature+0xa0>
8000d1d8:	90 38       	ld.sh	r8,r8[0x6]
8000d1da:	58 08       	cp.w	r8,0
8000d1dc:	c0 30       	breq	8000d1e2 <udc_req_std_dev_set_feature+0x12>
8000d1de:	30 08       	mov	r8,0
8000d1e0:	c4 48       	rjmp	8000d268 <udc_req_std_dev_set_feature+0x98>
8000d1e2:	4a 48       	lddpc	r8,8000d270 <udc_req_std_dev_set_feature+0xa0>
8000d1e4:	90 18       	ld.sh	r8,r8[0x2]
8000d1e6:	5c 78       	castu.h	r8
8000d1e8:	58 18       	cp.w	r8,1
8000d1ea:	c0 40       	breq	8000d1f2 <udc_req_std_dev_set_feature+0x22>
8000d1ec:	58 28       	cp.w	r8,2
8000d1ee:	c0 40       	breq	8000d1f6 <udc_req_std_dev_set_feature+0x26>
8000d1f0:	c3 b8       	rjmp	8000d266 <udc_req_std_dev_set_feature+0x96>
8000d1f2:	30 08       	mov	r8,0
8000d1f4:	c3 a8       	rjmp	8000d268 <udc_req_std_dev_set_feature+0x98>
8000d1f6:	f0 1f 00 20 	mcall	8000d274 <udc_req_std_dev_set_feature+0xa4>
8000d1fa:	18 98       	mov	r8,r12
8000d1fc:	ec 18 00 01 	eorl	r8,0x1
8000d200:	5c 58       	castu.b	r8
8000d202:	c2 f1       	brne	8000d260 <udc_req_std_dev_set_feature+0x90>
8000d204:	49 b8       	lddpc	r8,8000d270 <udc_req_std_dev_set_feature+0xa0>
8000d206:	90 28       	ld.sh	r8,r8[0x4]
8000d208:	5c 78       	castu.h	r8
8000d20a:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d20e:	c2 b1       	brne	8000d264 <udc_req_std_dev_set_feature+0x94>
8000d210:	f0 1f 00 1a 	mcall	8000d278 <udc_req_std_dev_set_feature+0xa8>
8000d214:	49 78       	lddpc	r8,8000d270 <udc_req_std_dev_set_feature+0xa0>
8000d216:	90 28       	ld.sh	r8,r8[0x4]
8000d218:	5c 78       	castu.h	r8
8000d21a:	a9 88       	lsr	r8,0x8
8000d21c:	5c 88       	casts.h	r8
8000d21e:	5c 78       	castu.h	r8
8000d220:	58 28       	cp.w	r8,2
8000d222:	c1 00       	breq	8000d242 <udc_req_std_dev_set_feature+0x72>
8000d224:	e0 89 00 05 	brgt	8000d22e <udc_req_std_dev_set_feature+0x5e>
8000d228:	58 18       	cp.w	r8,1
8000d22a:	c0 70       	breq	8000d238 <udc_req_std_dev_set_feature+0x68>
8000d22c:	c1 d8       	rjmp	8000d266 <udc_req_std_dev_set_feature+0x96>
8000d22e:	58 38       	cp.w	r8,3
8000d230:	c0 e0       	breq	8000d24c <udc_req_std_dev_set_feature+0x7c>
8000d232:	58 48       	cp.w	r8,4
8000d234:	c1 10       	breq	8000d256 <udc_req_std_dev_set_feature+0x86>
8000d236:	c1 88       	rjmp	8000d266 <udc_req_std_dev_set_feature+0x96>
8000d238:	48 e8       	lddpc	r8,8000d270 <udc_req_std_dev_set_feature+0xa0>
8000d23a:	49 19       	lddpc	r9,8000d27c <udc_req_std_dev_set_feature+0xac>
8000d23c:	91 49       	st.w	r8[0x10],r9
8000d23e:	30 18       	mov	r8,1
8000d240:	c1 48       	rjmp	8000d268 <udc_req_std_dev_set_feature+0x98>
8000d242:	48 c8       	lddpc	r8,8000d270 <udc_req_std_dev_set_feature+0xa0>
8000d244:	48 f9       	lddpc	r9,8000d280 <udc_req_std_dev_set_feature+0xb0>
8000d246:	91 49       	st.w	r8[0x10],r9
8000d248:	30 18       	mov	r8,1
8000d24a:	c0 f8       	rjmp	8000d268 <udc_req_std_dev_set_feature+0x98>
8000d24c:	48 98       	lddpc	r8,8000d270 <udc_req_std_dev_set_feature+0xa0>
8000d24e:	48 e9       	lddpc	r9,8000d284 <udc_req_std_dev_set_feature+0xb4>
8000d250:	91 49       	st.w	r8[0x10],r9
8000d252:	30 18       	mov	r8,1
8000d254:	c0 a8       	rjmp	8000d268 <udc_req_std_dev_set_feature+0x98>
8000d256:	48 78       	lddpc	r8,8000d270 <udc_req_std_dev_set_feature+0xa0>
8000d258:	48 c9       	lddpc	r9,8000d288 <udc_req_std_dev_set_feature+0xb8>
8000d25a:	91 49       	st.w	r8[0x10],r9
8000d25c:	30 18       	mov	r8,1
8000d25e:	c0 58       	rjmp	8000d268 <udc_req_std_dev_set_feature+0x98>
8000d260:	d7 03       	nop
8000d262:	c0 28       	rjmp	8000d266 <udc_req_std_dev_set_feature+0x96>
8000d264:	d7 03       	nop
8000d266:	30 08       	mov	r8,0
8000d268:	10 9c       	mov	r12,r8
8000d26a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d26e:	00 00       	add	r0,r0
8000d270:	00 00       	add	r0,r0
8000d272:	0d b8       	ld.ub	r8,r6[0x3]
8000d274:	80 00       	ld.sh	r0,r0[0x0]
8000d276:	9a 00       	ld.sh	r0,sp[0x0]
8000d278:	80 00       	ld.sh	r0,r0[0x0]
8000d27a:	cf f4       	brge	8000d278 <udc_req_std_dev_set_feature+0xa8>
8000d27c:	80 00       	ld.sh	r0,r0[0x0]
8000d27e:	a3 bc       	sbr	r12,0x3
8000d280:	80 00       	ld.sh	r0,r0[0x0]
8000d282:	a3 e6       	*unknown*
8000d284:	80 00       	ld.sh	r0,r0[0x0]
8000d286:	a4 10       	st.h	r2[0x2],r0
8000d288:	80 00       	ld.sh	r0,r0[0x0]
8000d28a:	a4 2c       	st.h	r2[0x4],r12

8000d28c <udc_req_std_ep_set_feature>:
8000d28c:	eb cd 40 80 	pushm	r7,lr
8000d290:	1a 97       	mov	r7,sp
8000d292:	48 f8       	lddpc	r8,8000d2cc <udc_req_std_ep_set_feature+0x40>
8000d294:	90 38       	ld.sh	r8,r8[0x6]
8000d296:	58 08       	cp.w	r8,0
8000d298:	c0 30       	breq	8000d29e <udc_req_std_ep_set_feature+0x12>
8000d29a:	30 08       	mov	r8,0
8000d29c:	c1 48       	rjmp	8000d2c4 <udc_req_std_ep_set_feature+0x38>
8000d29e:	48 c8       	lddpc	r8,8000d2cc <udc_req_std_ep_set_feature+0x40>
8000d2a0:	90 18       	ld.sh	r8,r8[0x2]
8000d2a2:	58 08       	cp.w	r8,0
8000d2a4:	c0 f1       	brne	8000d2c2 <udc_req_std_ep_set_feature+0x36>
8000d2a6:	48 a8       	lddpc	r8,8000d2cc <udc_req_std_ep_set_feature+0x40>
8000d2a8:	90 28       	ld.sh	r8,r8[0x4]
8000d2aa:	5c 58       	castu.b	r8
8000d2ac:	10 9c       	mov	r12,r8
8000d2ae:	f0 1f 00 09 	mcall	8000d2d0 <udc_req_std_ep_set_feature+0x44>
8000d2b2:	48 78       	lddpc	r8,8000d2cc <udc_req_std_ep_set_feature+0x40>
8000d2b4:	90 28       	ld.sh	r8,r8[0x4]
8000d2b6:	5c 58       	castu.b	r8
8000d2b8:	10 9c       	mov	r12,r8
8000d2ba:	f0 1f 00 07 	mcall	8000d2d4 <udc_req_std_ep_set_feature+0x48>
8000d2be:	18 98       	mov	r8,r12
8000d2c0:	c0 28       	rjmp	8000d2c4 <udc_req_std_ep_set_feature+0x38>
8000d2c2:	30 08       	mov	r8,0
8000d2c4:	10 9c       	mov	r12,r8
8000d2c6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d2ca:	00 00       	add	r0,r0
8000d2cc:	00 00       	add	r0,r0
8000d2ce:	0d b8       	ld.ub	r8,r6[0x3]
8000d2d0:	80 00       	ld.sh	r0,r0[0x0]
8000d2d2:	a2 5c       	st.h	r1[0xa],r12
8000d2d4:	80 00       	ld.sh	r0,r0[0x0]
8000d2d6:	9e e4       	ld.uh	r4,pc[0xc]

8000d2d8 <udc_valid_address>:
8000d2d8:	eb cd 40 80 	pushm	r7,lr
8000d2dc:	1a 97       	mov	r7,sp
8000d2de:	48 68       	lddpc	r8,8000d2f4 <udc_valid_address+0x1c>
8000d2e0:	90 18       	ld.sh	r8,r8[0x2]
8000d2e2:	5c 58       	castu.b	r8
8000d2e4:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000d2e8:	10 9c       	mov	r12,r8
8000d2ea:	f0 1f 00 04 	mcall	8000d2f8 <udc_valid_address+0x20>
8000d2ee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d2f2:	00 00       	add	r0,r0
8000d2f4:	00 00       	add	r0,r0
8000d2f6:	0d b8       	ld.ub	r8,r6[0x3]
8000d2f8:	80 00       	ld.sh	r0,r0[0x0]
8000d2fa:	9a 1c       	ld.sh	r12,sp[0x2]

8000d2fc <udc_req_std_dev_set_address>:
8000d2fc:	eb cd 40 80 	pushm	r7,lr
8000d300:	1a 97       	mov	r7,sp
8000d302:	48 78       	lddpc	r8,8000d31c <udc_req_std_dev_set_address+0x20>
8000d304:	90 38       	ld.sh	r8,r8[0x6]
8000d306:	58 08       	cp.w	r8,0
8000d308:	c0 30       	breq	8000d30e <udc_req_std_dev_set_address+0x12>
8000d30a:	30 08       	mov	r8,0
8000d30c:	c0 58       	rjmp	8000d316 <udc_req_std_dev_set_address+0x1a>
8000d30e:	48 48       	lddpc	r8,8000d31c <udc_req_std_dev_set_address+0x20>
8000d310:	48 49       	lddpc	r9,8000d320 <udc_req_std_dev_set_address+0x24>
8000d312:	91 49       	st.w	r8[0x10],r9
8000d314:	30 18       	mov	r8,1
8000d316:	10 9c       	mov	r12,r8
8000d318:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d31c:	00 00       	add	r0,r0
8000d31e:	0d b8       	ld.ub	r8,r6[0x3]
8000d320:	80 00       	ld.sh	r0,r0[0x0]
8000d322:	d2 d8       	*unknown*

8000d324 <udc_req_std_dev_get_str_desc>:
8000d324:	eb cd 40 80 	pushm	r7,lr
8000d328:	1a 97       	mov	r7,sp
8000d32a:	20 3d       	sub	sp,12
8000d32c:	30 08       	mov	r8,0
8000d32e:	ef 68 ff ff 	st.b	r7[-1],r8
8000d332:	4b 68       	lddpc	r8,8000d408 <udc_req_std_dev_get_str_desc+0xe4>
8000d334:	90 18       	ld.sh	r8,r8[0x2]
8000d336:	5c 78       	castu.h	r8
8000d338:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d33c:	58 18       	cp.w	r8,1
8000d33e:	c1 00       	breq	8000d35e <udc_req_std_dev_get_str_desc+0x3a>
8000d340:	e0 89 00 05 	brgt	8000d34a <udc_req_std_dev_get_str_desc+0x26>
8000d344:	58 08       	cp.w	r8,0
8000d346:	c0 70       	breq	8000d354 <udc_req_std_dev_get_str_desc+0x30>
8000d348:	c2 28       	rjmp	8000d38c <udc_req_std_dev_get_str_desc+0x68>
8000d34a:	58 28       	cp.w	r8,2
8000d34c:	c1 00       	breq	8000d36c <udc_req_std_dev_get_str_desc+0x48>
8000d34e:	58 38       	cp.w	r8,3
8000d350:	c1 50       	breq	8000d37a <udc_req_std_dev_get_str_desc+0x56>
8000d352:	c1 d8       	rjmp	8000d38c <udc_req_std_dev_get_str_desc+0x68>
8000d354:	30 4b       	mov	r11,4
8000d356:	4a ec       	lddpc	r12,8000d40c <udc_req_std_dev_get_str_desc+0xe8>
8000d358:	f0 1f 00 2e 	mcall	8000d410 <udc_req_std_dev_get_str_desc+0xec>
8000d35c:	c1 a8       	rjmp	8000d390 <udc_req_std_dev_get_str_desc+0x6c>
8000d35e:	30 78       	mov	r8,7
8000d360:	ef 68 ff ff 	st.b	r7[-1],r8
8000d364:	4a c8       	lddpc	r8,8000d414 <udc_req_std_dev_get_str_desc+0xf0>
8000d366:	ef 48 ff f8 	st.w	r7[-8],r8
8000d36a:	c1 38       	rjmp	8000d390 <udc_req_std_dev_get_str_desc+0x6c>
8000d36c:	30 78       	mov	r8,7
8000d36e:	ef 68 ff ff 	st.b	r7[-1],r8
8000d372:	4a a8       	lddpc	r8,8000d418 <udc_req_std_dev_get_str_desc+0xf4>
8000d374:	ef 48 ff f8 	st.w	r7[-8],r8
8000d378:	c0 c8       	rjmp	8000d390 <udc_req_std_dev_get_str_desc+0x6c>
8000d37a:	30 c8       	mov	r8,12
8000d37c:	ef 68 ff ff 	st.b	r7[-1],r8
8000d380:	f0 1f 00 27 	mcall	8000d41c <udc_req_std_dev_get_str_desc+0xf8>
8000d384:	18 98       	mov	r8,r12
8000d386:	ef 48 ff f8 	st.w	r7[-8],r8
8000d38a:	c0 38       	rjmp	8000d390 <udc_req_std_dev_get_str_desc+0x6c>
8000d38c:	30 08       	mov	r8,0
8000d38e:	c3 88       	rjmp	8000d3fe <udc_req_std_dev_get_str_desc+0xda>
8000d390:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d394:	30 08       	mov	r8,0
8000d396:	f0 09 18 00 	cp.b	r9,r8
8000d39a:	c3 10       	breq	8000d3fc <udc_req_std_dev_get_str_desc+0xd8>
8000d39c:	30 08       	mov	r8,0
8000d39e:	ef 68 ff f7 	st.b	r7[-9],r8
8000d3a2:	c1 88       	rjmp	8000d3d2 <udc_req_std_dev_get_str_desc+0xae>
8000d3a4:	ef 3b ff f7 	ld.ub	r11,r7[-9]
8000d3a8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000d3ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d3b0:	f2 08 00 08 	add	r8,r9,r8
8000d3b4:	11 88       	ld.ub	r8,r8[0x0]
8000d3b6:	5c c8       	swap.bh	r8
8000d3b8:	5c 88       	casts.h	r8
8000d3ba:	10 99       	mov	r9,r8
8000d3bc:	49 9a       	lddpc	r10,8000d420 <udc_req_std_dev_get_str_desc+0xfc>
8000d3be:	f6 08 15 01 	lsl	r8,r11,0x1
8000d3c2:	f4 08 00 08 	add	r8,r10,r8
8000d3c6:	b0 19       	st.h	r8[0x2],r9
8000d3c8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000d3cc:	2f f8       	sub	r8,-1
8000d3ce:	ef 68 ff f7 	st.b	r7[-9],r8
8000d3d2:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000d3d6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d3da:	f0 09 18 00 	cp.b	r9,r8
8000d3de:	ce 33       	brcs	8000d3a4 <udc_req_std_dev_get_str_desc+0x80>
8000d3e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d3e4:	2f f8       	sub	r8,-1
8000d3e6:	5c 58       	castu.b	r8
8000d3e8:	a1 78       	lsl	r8,0x1
8000d3ea:	5c 58       	castu.b	r8
8000d3ec:	48 d9       	lddpc	r9,8000d420 <udc_req_std_dev_get_str_desc+0xfc>
8000d3ee:	b2 88       	st.b	r9[0x0],r8
8000d3f0:	48 c8       	lddpc	r8,8000d420 <udc_req_std_dev_get_str_desc+0xfc>
8000d3f2:	11 88       	ld.ub	r8,r8[0x0]
8000d3f4:	10 9b       	mov	r11,r8
8000d3f6:	48 bc       	lddpc	r12,8000d420 <udc_req_std_dev_get_str_desc+0xfc>
8000d3f8:	f0 1f 00 06 	mcall	8000d410 <udc_req_std_dev_get_str_desc+0xec>
8000d3fc:	30 18       	mov	r8,1
8000d3fe:	10 9c       	mov	r12,r8
8000d400:	2f dd       	sub	sp,-12
8000d402:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d406:	00 00       	add	r0,r0
8000d408:	00 00       	add	r0,r0
8000d40a:	0d b8       	ld.ub	r8,r6[0x3]
8000d40c:	00 00       	add	r0,r0
8000d40e:	02 10       	sub	r0,r1
8000d410:	80 00       	ld.sh	r0,r0[0x0]
8000d412:	9a 9c       	ld.uh	r12,sp[0x2]
8000d414:	00 00       	add	r0,r0
8000d416:	02 14       	sub	r4,r1
8000d418:	00 00       	add	r0,r0
8000d41a:	02 1c       	sub	r12,r1
8000d41c:	80 00       	ld.sh	r0,r0[0x0]
8000d41e:	cc d4       	brge	8000d3b8 <udc_req_std_dev_get_str_desc+0x94>
8000d420:	00 00       	add	r0,r0
8000d422:	02 24       	rsub	r4,r1

8000d424 <udc_req_std_dev_get_descriptor>:
8000d424:	eb cd 40 80 	pushm	r7,lr
8000d428:	1a 97       	mov	r7,sp
8000d42a:	20 1d       	sub	sp,4
8000d42c:	fe f8 02 40 	ld.w	r8,pc[576]
8000d430:	90 18       	ld.sh	r8,r8[0x2]
8000d432:	ef 68 ff ff 	st.b	r7[-1],r8
8000d436:	fe f8 02 36 	ld.w	r8,pc[566]
8000d43a:	90 18       	ld.sh	r8,r8[0x2]
8000d43c:	5c 78       	castu.h	r8
8000d43e:	a9 88       	lsr	r8,0x8
8000d440:	5c 88       	casts.h	r8
8000d442:	5c 58       	castu.b	r8
8000d444:	58 38       	cp.w	r8,3
8000d446:	e0 80 00 f7 	breq	8000d634 <udc_req_std_dev_get_descriptor+0x210>
8000d44a:	e0 89 00 07 	brgt	8000d458 <udc_req_std_dev_get_descriptor+0x34>
8000d44e:	58 18       	cp.w	r8,1
8000d450:	c0 b0       	breq	8000d466 <udc_req_std_dev_get_descriptor+0x42>
8000d452:	58 28       	cp.w	r8,2
8000d454:	c2 70       	breq	8000d4a2 <udc_req_std_dev_get_descriptor+0x7e>
8000d456:	cf 88       	rjmp	8000d646 <udc_req_std_dev_get_descriptor+0x222>
8000d458:	58 68       	cp.w	r8,6
8000d45a:	e0 80 00 82 	breq	8000d55e <udc_req_std_dev_get_descriptor+0x13a>
8000d45e:	58 78       	cp.w	r8,7
8000d460:	e0 80 00 8a 	breq	8000d574 <udc_req_std_dev_get_descriptor+0x150>
8000d464:	cf 18       	rjmp	8000d646 <udc_req_std_dev_get_descriptor+0x222>
8000d466:	f0 1f 00 83 	mcall	8000d670 <udc_req_std_dev_get_descriptor+0x24c>
8000d46a:	18 98       	mov	r8,r12
8000d46c:	ec 18 00 01 	eorl	r8,0x1
8000d470:	5c 58       	castu.b	r8
8000d472:	c0 d0       	breq	8000d48c <udc_req_std_dev_get_descriptor+0x68>
8000d474:	fe f8 02 00 	ld.w	r8,pc[512]
8000d478:	70 28       	ld.w	r8,r8[0x8]
8000d47a:	11 88       	ld.ub	r8,r8[0x0]
8000d47c:	10 99       	mov	r9,r8
8000d47e:	4f e8       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d480:	70 28       	ld.w	r8,r8[0x8]
8000d482:	12 9b       	mov	r11,r9
8000d484:	10 9c       	mov	r12,r8
8000d486:	f0 1f 00 7d 	mcall	8000d678 <udc_req_std_dev_get_descriptor+0x254>
8000d48a:	ce 18       	rjmp	8000d64c <udc_req_std_dev_get_descriptor+0x228>
8000d48c:	4f a8       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d48e:	70 08       	ld.w	r8,r8[0x0]
8000d490:	11 88       	ld.ub	r8,r8[0x0]
8000d492:	10 99       	mov	r9,r8
8000d494:	4f 88       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d496:	70 08       	ld.w	r8,r8[0x0]
8000d498:	12 9b       	mov	r11,r9
8000d49a:	10 9c       	mov	r12,r8
8000d49c:	f0 1f 00 77 	mcall	8000d678 <udc_req_std_dev_get_descriptor+0x254>
8000d4a0:	cd 68       	rjmp	8000d64c <udc_req_std_dev_get_descriptor+0x228>
8000d4a2:	f0 1f 00 74 	mcall	8000d670 <udc_req_std_dev_get_descriptor+0x24c>
8000d4a6:	18 98       	mov	r8,r12
8000d4a8:	58 08       	cp.w	r8,0
8000d4aa:	c2 b0       	breq	8000d500 <udc_req_std_dev_get_descriptor+0xdc>
8000d4ac:	4f 28       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d4ae:	70 28       	ld.w	r8,r8[0x8]
8000d4b0:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d4b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d4b8:	f0 09 18 00 	cp.b	r9,r8
8000d4bc:	c0 33       	brcs	8000d4c2 <udc_req_std_dev_get_descriptor+0x9e>
8000d4be:	30 08       	mov	r8,0
8000d4c0:	cd 28       	rjmp	8000d664 <udc_req_std_dev_get_descriptor+0x240>
8000d4c2:	4e d8       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d4c4:	70 49       	ld.w	r9,r8[0x10]
8000d4c6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d4ca:	a3 78       	lsl	r8,0x3
8000d4cc:	f2 08 00 08 	add	r8,r9,r8
8000d4d0:	70 08       	ld.w	r8,r8[0x0]
8000d4d2:	11 a9       	ld.ub	r9,r8[0x2]
8000d4d4:	a9 69       	lsl	r9,0x8
8000d4d6:	11 b8       	ld.ub	r8,r8[0x3]
8000d4d8:	12 48       	or	r8,r9
8000d4da:	5c 88       	casts.h	r8
8000d4dc:	5c 88       	casts.h	r8
8000d4de:	5c c8       	swap.bh	r8
8000d4e0:	5c 88       	casts.h	r8
8000d4e2:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000d4e6:	4e 48       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d4e8:	70 4a       	ld.w	r10,r8[0x10]
8000d4ea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d4ee:	a3 78       	lsl	r8,0x3
8000d4f0:	f4 08 00 08 	add	r8,r10,r8
8000d4f4:	70 08       	ld.w	r8,r8[0x0]
8000d4f6:	12 9b       	mov	r11,r9
8000d4f8:	10 9c       	mov	r12,r8
8000d4fa:	f0 1f 00 60 	mcall	8000d678 <udc_req_std_dev_get_descriptor+0x254>
8000d4fe:	c2 a8       	rjmp	8000d552 <udc_req_std_dev_get_descriptor+0x12e>
8000d500:	4d d8       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d502:	70 08       	ld.w	r8,r8[0x0]
8000d504:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d508:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d50c:	f0 09 18 00 	cp.b	r9,r8
8000d510:	c0 33       	brcs	8000d516 <udc_req_std_dev_get_descriptor+0xf2>
8000d512:	30 08       	mov	r8,0
8000d514:	ca 88       	rjmp	8000d664 <udc_req_std_dev_get_descriptor+0x240>
8000d516:	4d 88       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d518:	70 19       	ld.w	r9,r8[0x4]
8000d51a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d51e:	a3 78       	lsl	r8,0x3
8000d520:	f2 08 00 08 	add	r8,r9,r8
8000d524:	70 08       	ld.w	r8,r8[0x0]
8000d526:	11 a9       	ld.ub	r9,r8[0x2]
8000d528:	a9 69       	lsl	r9,0x8
8000d52a:	11 b8       	ld.ub	r8,r8[0x3]
8000d52c:	12 48       	or	r8,r9
8000d52e:	5c 88       	casts.h	r8
8000d530:	5c 88       	casts.h	r8
8000d532:	5c c8       	swap.bh	r8
8000d534:	5c 88       	casts.h	r8
8000d536:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000d53a:	4c f8       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d53c:	70 1a       	ld.w	r10,r8[0x4]
8000d53e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d542:	a3 78       	lsl	r8,0x3
8000d544:	f4 08 00 08 	add	r8,r10,r8
8000d548:	70 08       	ld.w	r8,r8[0x0]
8000d54a:	12 9b       	mov	r11,r9
8000d54c:	10 9c       	mov	r12,r8
8000d54e:	f0 1f 00 4b 	mcall	8000d678 <udc_req_std_dev_get_descriptor+0x254>
8000d552:	4c 78       	lddpc	r8,8000d66c <udc_req_std_dev_get_descriptor+0x248>
8000d554:	70 28       	ld.w	r8,r8[0x8]
8000d556:	10 99       	mov	r9,r8
8000d558:	30 28       	mov	r8,2
8000d55a:	b2 98       	st.b	r9[0x1],r8
8000d55c:	c7 88       	rjmp	8000d64c <udc_req_std_dev_get_descriptor+0x228>
8000d55e:	4c 68       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d560:	70 38       	ld.w	r8,r8[0xc]
8000d562:	11 88       	ld.ub	r8,r8[0x0]
8000d564:	10 99       	mov	r9,r8
8000d566:	4c 48       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d568:	70 38       	ld.w	r8,r8[0xc]
8000d56a:	12 9b       	mov	r11,r9
8000d56c:	10 9c       	mov	r12,r8
8000d56e:	f0 1f 00 43 	mcall	8000d678 <udc_req_std_dev_get_descriptor+0x254>
8000d572:	c6 d8       	rjmp	8000d64c <udc_req_std_dev_get_descriptor+0x228>
8000d574:	f0 1f 00 3f 	mcall	8000d670 <udc_req_std_dev_get_descriptor+0x24c>
8000d578:	18 98       	mov	r8,r12
8000d57a:	ec 18 00 01 	eorl	r8,0x1
8000d57e:	5c 58       	castu.b	r8
8000d580:	c2 b0       	breq	8000d5d6 <udc_req_std_dev_get_descriptor+0x1b2>
8000d582:	4b d8       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d584:	70 28       	ld.w	r8,r8[0x8]
8000d586:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d58a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d58e:	f0 09 18 00 	cp.b	r9,r8
8000d592:	c0 33       	brcs	8000d598 <udc_req_std_dev_get_descriptor+0x174>
8000d594:	30 08       	mov	r8,0
8000d596:	c6 78       	rjmp	8000d664 <udc_req_std_dev_get_descriptor+0x240>
8000d598:	4b 78       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d59a:	70 49       	ld.w	r9,r8[0x10]
8000d59c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d5a0:	a3 78       	lsl	r8,0x3
8000d5a2:	f2 08 00 08 	add	r8,r9,r8
8000d5a6:	70 08       	ld.w	r8,r8[0x0]
8000d5a8:	11 a9       	ld.ub	r9,r8[0x2]
8000d5aa:	a9 69       	lsl	r9,0x8
8000d5ac:	11 b8       	ld.ub	r8,r8[0x3]
8000d5ae:	12 48       	or	r8,r9
8000d5b0:	5c 88       	casts.h	r8
8000d5b2:	5c 88       	casts.h	r8
8000d5b4:	5c c8       	swap.bh	r8
8000d5b6:	5c 88       	casts.h	r8
8000d5b8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000d5bc:	4a e8       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d5be:	70 4a       	ld.w	r10,r8[0x10]
8000d5c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d5c4:	a3 78       	lsl	r8,0x3
8000d5c6:	f4 08 00 08 	add	r8,r10,r8
8000d5ca:	70 08       	ld.w	r8,r8[0x0]
8000d5cc:	12 9b       	mov	r11,r9
8000d5ce:	10 9c       	mov	r12,r8
8000d5d0:	f0 1f 00 2a 	mcall	8000d678 <udc_req_std_dev_get_descriptor+0x254>
8000d5d4:	c2 a8       	rjmp	8000d628 <udc_req_std_dev_get_descriptor+0x204>
8000d5d6:	4a 88       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d5d8:	70 08       	ld.w	r8,r8[0x0]
8000d5da:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d5de:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d5e2:	f0 09 18 00 	cp.b	r9,r8
8000d5e6:	c0 33       	brcs	8000d5ec <udc_req_std_dev_get_descriptor+0x1c8>
8000d5e8:	30 08       	mov	r8,0
8000d5ea:	c3 d8       	rjmp	8000d664 <udc_req_std_dev_get_descriptor+0x240>
8000d5ec:	4a 28       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d5ee:	70 19       	ld.w	r9,r8[0x4]
8000d5f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d5f4:	a3 78       	lsl	r8,0x3
8000d5f6:	f2 08 00 08 	add	r8,r9,r8
8000d5fa:	70 08       	ld.w	r8,r8[0x0]
8000d5fc:	11 a9       	ld.ub	r9,r8[0x2]
8000d5fe:	a9 69       	lsl	r9,0x8
8000d600:	11 b8       	ld.ub	r8,r8[0x3]
8000d602:	12 48       	or	r8,r9
8000d604:	5c 88       	casts.h	r8
8000d606:	5c 88       	casts.h	r8
8000d608:	5c c8       	swap.bh	r8
8000d60a:	5c 88       	casts.h	r8
8000d60c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000d610:	49 98       	lddpc	r8,8000d674 <udc_req_std_dev_get_descriptor+0x250>
8000d612:	70 1a       	ld.w	r10,r8[0x4]
8000d614:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d618:	a3 78       	lsl	r8,0x3
8000d61a:	f4 08 00 08 	add	r8,r10,r8
8000d61e:	70 08       	ld.w	r8,r8[0x0]
8000d620:	12 9b       	mov	r11,r9
8000d622:	10 9c       	mov	r12,r8
8000d624:	f0 1f 00 15 	mcall	8000d678 <udc_req_std_dev_get_descriptor+0x254>
8000d628:	49 18       	lddpc	r8,8000d66c <udc_req_std_dev_get_descriptor+0x248>
8000d62a:	70 28       	ld.w	r8,r8[0x8]
8000d62c:	10 99       	mov	r9,r8
8000d62e:	30 78       	mov	r8,7
8000d630:	b2 98       	st.b	r9[0x1],r8
8000d632:	c0 d8       	rjmp	8000d64c <udc_req_std_dev_get_descriptor+0x228>
8000d634:	f0 1f 00 12 	mcall	8000d67c <udc_req_std_dev_get_descriptor+0x258>
8000d638:	18 98       	mov	r8,r12
8000d63a:	ec 18 00 01 	eorl	r8,0x1
8000d63e:	5c 58       	castu.b	r8
8000d640:	c0 50       	breq	8000d64a <udc_req_std_dev_get_descriptor+0x226>
8000d642:	30 08       	mov	r8,0
8000d644:	c1 08       	rjmp	8000d664 <udc_req_std_dev_get_descriptor+0x240>
8000d646:	30 08       	mov	r8,0
8000d648:	c0 e8       	rjmp	8000d664 <udc_req_std_dev_get_descriptor+0x240>
8000d64a:	d7 03       	nop
8000d64c:	48 88       	lddpc	r8,8000d66c <udc_req_std_dev_get_descriptor+0x248>
8000d64e:	90 39       	ld.sh	r9,r8[0x6]
8000d650:	48 78       	lddpc	r8,8000d66c <udc_req_std_dev_get_descriptor+0x248>
8000d652:	90 68       	ld.sh	r8,r8[0xc]
8000d654:	f0 09 19 00 	cp.h	r9,r8
8000d658:	c0 52       	brcc	8000d662 <udc_req_std_dev_get_descriptor+0x23e>
8000d65a:	48 58       	lddpc	r8,8000d66c <udc_req_std_dev_get_descriptor+0x248>
8000d65c:	90 38       	ld.sh	r8,r8[0x6]
8000d65e:	48 49       	lddpc	r9,8000d66c <udc_req_std_dev_get_descriptor+0x248>
8000d660:	b2 68       	st.h	r9[0xc],r8
8000d662:	30 18       	mov	r8,1
8000d664:	10 9c       	mov	r12,r8
8000d666:	2f fd       	sub	sp,-4
8000d668:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d66c:	00 00       	add	r0,r0
8000d66e:	0d b8       	ld.ub	r8,r6[0x3]
8000d670:	80 00       	ld.sh	r0,r0[0x0]
8000d672:	9a 00       	ld.sh	r0,sp[0x0]
8000d674:	00 00       	add	r0,r0
8000d676:	01 fc       	ld.ub	r12,r0[0x7]
8000d678:	80 00       	ld.sh	r0,r0[0x0]
8000d67a:	9a 9c       	ld.uh	r12,sp[0x2]
8000d67c:	80 00       	ld.sh	r0,r0[0x0]
8000d67e:	d3 24       	*unknown*

8000d680 <udc_req_std_dev_get_configuration>:
8000d680:	eb cd 40 80 	pushm	r7,lr
8000d684:	1a 97       	mov	r7,sp
8000d686:	48 98       	lddpc	r8,8000d6a8 <udc_req_std_dev_get_configuration+0x28>
8000d688:	90 39       	ld.sh	r9,r8[0x6]
8000d68a:	30 18       	mov	r8,1
8000d68c:	f0 09 19 00 	cp.h	r9,r8
8000d690:	c0 30       	breq	8000d696 <udc_req_std_dev_get_configuration+0x16>
8000d692:	30 08       	mov	r8,0
8000d694:	c0 68       	rjmp	8000d6a0 <udc_req_std_dev_get_configuration+0x20>
8000d696:	30 1b       	mov	r11,1
8000d698:	48 5c       	lddpc	r12,8000d6ac <udc_req_std_dev_get_configuration+0x2c>
8000d69a:	f0 1f 00 06 	mcall	8000d6b0 <udc_req_std_dev_get_configuration+0x30>
8000d69e:	30 18       	mov	r8,1
8000d6a0:	10 9c       	mov	r12,r8
8000d6a2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d6a6:	00 00       	add	r0,r0
8000d6a8:	00 00       	add	r0,r0
8000d6aa:	0d b8       	ld.ub	r8,r6[0x3]
8000d6ac:	00 00       	add	r0,r0
8000d6ae:	08 c6       	st.b	r4++,r6
8000d6b0:	80 00       	ld.sh	r0,r0[0x0]
8000d6b2:	9a 9c       	ld.uh	r12,sp[0x2]

8000d6b4 <udc_req_std_dev_set_configuration>:
8000d6b4:	eb cd 40 80 	pushm	r7,lr
8000d6b8:	1a 97       	mov	r7,sp
8000d6ba:	20 1d       	sub	sp,4
8000d6bc:	4b c8       	lddpc	r8,8000d7ac <udc_req_std_dev_set_configuration+0xf8>
8000d6be:	90 38       	ld.sh	r8,r8[0x6]
8000d6c0:	58 08       	cp.w	r8,0
8000d6c2:	c0 30       	breq	8000d6c8 <udc_req_std_dev_set_configuration+0x14>
8000d6c4:	30 08       	mov	r8,0
8000d6c6:	c6 f8       	rjmp	8000d7a4 <udc_req_std_dev_set_configuration+0xf0>
8000d6c8:	f0 1f 00 3a 	mcall	8000d7b0 <udc_req_std_dev_set_configuration+0xfc>
8000d6cc:	18 98       	mov	r8,r12
8000d6ce:	58 08       	cp.w	r8,0
8000d6d0:	c0 31       	brne	8000d6d6 <udc_req_std_dev_set_configuration+0x22>
8000d6d2:	30 08       	mov	r8,0
8000d6d4:	c6 88       	rjmp	8000d7a4 <udc_req_std_dev_set_configuration+0xf0>
8000d6d6:	f0 1f 00 38 	mcall	8000d7b4 <udc_req_std_dev_set_configuration+0x100>
8000d6da:	18 98       	mov	r8,r12
8000d6dc:	58 08       	cp.w	r8,0
8000d6de:	c0 f0       	breq	8000d6fc <udc_req_std_dev_set_configuration+0x48>
8000d6e0:	4b 38       	lddpc	r8,8000d7ac <udc_req_std_dev_set_configuration+0xf8>
8000d6e2:	90 18       	ld.sh	r8,r8[0x2]
8000d6e4:	5c 78       	castu.h	r8
8000d6e6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d6ea:	4b 48       	lddpc	r8,8000d7b8 <udc_req_std_dev_set_configuration+0x104>
8000d6ec:	70 28       	ld.w	r8,r8[0x8]
8000d6ee:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d6f2:	10 39       	cp.w	r9,r8
8000d6f4:	e0 8a 00 12 	brle	8000d718 <udc_req_std_dev_set_configuration+0x64>
8000d6f8:	30 08       	mov	r8,0
8000d6fa:	c5 58       	rjmp	8000d7a4 <udc_req_std_dev_set_configuration+0xf0>
8000d6fc:	4a c8       	lddpc	r8,8000d7ac <udc_req_std_dev_set_configuration+0xf8>
8000d6fe:	90 18       	ld.sh	r8,r8[0x2]
8000d700:	5c 78       	castu.h	r8
8000d702:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d706:	4a d8       	lddpc	r8,8000d7b8 <udc_req_std_dev_set_configuration+0x104>
8000d708:	70 08       	ld.w	r8,r8[0x0]
8000d70a:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d70e:	10 39       	cp.w	r9,r8
8000d710:	e0 8a 00 05 	brle	8000d71a <udc_req_std_dev_set_configuration+0x66>
8000d714:	30 08       	mov	r8,0
8000d716:	c4 78       	rjmp	8000d7a4 <udc_req_std_dev_set_configuration+0xf0>
8000d718:	d7 03       	nop
8000d71a:	f0 1f 00 29 	mcall	8000d7bc <udc_req_std_dev_set_configuration+0x108>
8000d71e:	4a 48       	lddpc	r8,8000d7ac <udc_req_std_dev_set_configuration+0xf8>
8000d720:	90 18       	ld.sh	r8,r8[0x2]
8000d722:	5c 58       	castu.b	r8
8000d724:	4a 79       	lddpc	r9,8000d7c0 <udc_req_std_dev_set_configuration+0x10c>
8000d726:	b2 88       	st.b	r9[0x0],r8
8000d728:	4a 68       	lddpc	r8,8000d7c0 <udc_req_std_dev_set_configuration+0x10c>
8000d72a:	11 88       	ld.ub	r8,r8[0x0]
8000d72c:	58 08       	cp.w	r8,0
8000d72e:	c0 31       	brne	8000d734 <udc_req_std_dev_set_configuration+0x80>
8000d730:	30 18       	mov	r8,1
8000d732:	c3 98       	rjmp	8000d7a4 <udc_req_std_dev_set_configuration+0xf0>
8000d734:	f0 1f 00 20 	mcall	8000d7b4 <udc_req_std_dev_set_configuration+0x100>
8000d738:	18 98       	mov	r8,r12
8000d73a:	58 08       	cp.w	r8,0
8000d73c:	c0 b0       	breq	8000d752 <udc_req_std_dev_set_configuration+0x9e>
8000d73e:	49 f8       	lddpc	r8,8000d7b8 <udc_req_std_dev_set_configuration+0x104>
8000d740:	70 49       	ld.w	r9,r8[0x10]
8000d742:	4a 08       	lddpc	r8,8000d7c0 <udc_req_std_dev_set_configuration+0x10c>
8000d744:	11 88       	ld.ub	r8,r8[0x0]
8000d746:	20 18       	sub	r8,1
8000d748:	a3 78       	lsl	r8,0x3
8000d74a:	10 09       	add	r9,r8
8000d74c:	49 e8       	lddpc	r8,8000d7c4 <udc_req_std_dev_set_configuration+0x110>
8000d74e:	91 09       	st.w	r8[0x0],r9
8000d750:	c0 a8       	rjmp	8000d764 <udc_req_std_dev_set_configuration+0xb0>
8000d752:	49 a8       	lddpc	r8,8000d7b8 <udc_req_std_dev_set_configuration+0x104>
8000d754:	70 19       	ld.w	r9,r8[0x4]
8000d756:	49 b8       	lddpc	r8,8000d7c0 <udc_req_std_dev_set_configuration+0x10c>
8000d758:	11 88       	ld.ub	r8,r8[0x0]
8000d75a:	20 18       	sub	r8,1
8000d75c:	a3 78       	lsl	r8,0x3
8000d75e:	10 09       	add	r9,r8
8000d760:	49 98       	lddpc	r8,8000d7c4 <udc_req_std_dev_set_configuration+0x110>
8000d762:	91 09       	st.w	r8[0x0],r9
8000d764:	30 08       	mov	r8,0
8000d766:	ef 68 ff ff 	st.b	r7[-1],r8
8000d76a:	c1 38       	rjmp	8000d790 <udc_req_std_dev_set_configuration+0xdc>
8000d76c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d770:	30 0b       	mov	r11,0
8000d772:	10 9c       	mov	r12,r8
8000d774:	f0 1f 00 15 	mcall	8000d7c8 <udc_req_std_dev_set_configuration+0x114>
8000d778:	18 98       	mov	r8,r12
8000d77a:	ec 18 00 01 	eorl	r8,0x1
8000d77e:	5c 58       	castu.b	r8
8000d780:	c0 30       	breq	8000d786 <udc_req_std_dev_set_configuration+0xd2>
8000d782:	30 08       	mov	r8,0
8000d784:	c1 08       	rjmp	8000d7a4 <udc_req_std_dev_set_configuration+0xf0>
8000d786:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d78a:	2f f8       	sub	r8,-1
8000d78c:	ef 68 ff ff 	st.b	r7[-1],r8
8000d790:	48 d8       	lddpc	r8,8000d7c4 <udc_req_std_dev_set_configuration+0x110>
8000d792:	70 08       	ld.w	r8,r8[0x0]
8000d794:	70 08       	ld.w	r8,r8[0x0]
8000d796:	11 c8       	ld.ub	r8,r8[0x4]
8000d798:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d79c:	f0 09 18 00 	cp.b	r9,r8
8000d7a0:	ce 63       	brcs	8000d76c <udc_req_std_dev_set_configuration+0xb8>
8000d7a2:	30 18       	mov	r8,1
8000d7a4:	10 9c       	mov	r12,r8
8000d7a6:	2f fd       	sub	sp,-4
8000d7a8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d7ac:	00 00       	add	r0,r0
8000d7ae:	0d b8       	ld.ub	r8,r6[0x3]
8000d7b0:	80 00       	ld.sh	r0,r0[0x0]
8000d7b2:	9a 6a       	ld.sh	r10,sp[0xc]
8000d7b4:	80 00       	ld.sh	r0,r0[0x0]
8000d7b6:	9a 00       	ld.sh	r0,sp[0x0]
8000d7b8:	00 00       	add	r0,r0
8000d7ba:	01 fc       	ld.ub	r12,r0[0x7]
8000d7bc:	80 00       	ld.sh	r0,r0[0x0]
8000d7be:	cf f4       	brge	8000d7bc <udc_req_std_dev_set_configuration+0x108>
8000d7c0:	00 00       	add	r0,r0
8000d7c2:	08 c6       	st.b	r4++,r6
8000d7c4:	00 00       	add	r0,r0
8000d7c6:	08 c8       	st.b	r4++,r8
8000d7c8:	80 00       	ld.sh	r0,r0[0x0]
8000d7ca:	cf 18       	rjmp	8000d9ac <udc_reqstd+0xc0>

8000d7cc <udc_req_std_iface_get_setting>:
8000d7cc:	eb cd 40 80 	pushm	r7,lr
8000d7d0:	1a 97       	mov	r7,sp
8000d7d2:	20 2d       	sub	sp,8
8000d7d4:	4a 38       	lddpc	r8,8000d860 <udc_req_std_iface_get_setting+0x94>
8000d7d6:	90 39       	ld.sh	r9,r8[0x6]
8000d7d8:	30 18       	mov	r8,1
8000d7da:	f0 09 19 00 	cp.h	r9,r8
8000d7de:	c0 30       	breq	8000d7e4 <udc_req_std_iface_get_setting+0x18>
8000d7e0:	30 08       	mov	r8,0
8000d7e2:	c3 a8       	rjmp	8000d856 <udc_req_std_iface_get_setting+0x8a>
8000d7e4:	4a 08       	lddpc	r8,8000d864 <udc_req_std_iface_get_setting+0x98>
8000d7e6:	11 88       	ld.ub	r8,r8[0x0]
8000d7e8:	58 08       	cp.w	r8,0
8000d7ea:	c0 31       	brne	8000d7f0 <udc_req_std_iface_get_setting+0x24>
8000d7ec:	30 08       	mov	r8,0
8000d7ee:	c3 48       	rjmp	8000d856 <udc_req_std_iface_get_setting+0x8a>
8000d7f0:	49 c8       	lddpc	r8,8000d860 <udc_req_std_iface_get_setting+0x94>
8000d7f2:	90 28       	ld.sh	r8,r8[0x4]
8000d7f4:	ef 68 ff fb 	st.b	r7[-5],r8
8000d7f8:	49 c8       	lddpc	r8,8000d868 <udc_req_std_iface_get_setting+0x9c>
8000d7fa:	70 08       	ld.w	r8,r8[0x0]
8000d7fc:	70 08       	ld.w	r8,r8[0x0]
8000d7fe:	11 c8       	ld.ub	r8,r8[0x4]
8000d800:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000d804:	f0 09 18 00 	cp.b	r9,r8
8000d808:	c0 33       	brcs	8000d80e <udc_req_std_iface_get_setting+0x42>
8000d80a:	30 08       	mov	r8,0
8000d80c:	c2 58       	rjmp	8000d856 <udc_req_std_iface_get_setting+0x8a>
8000d80e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000d812:	30 0b       	mov	r11,0
8000d814:	10 9c       	mov	r12,r8
8000d816:	f0 1f 00 16 	mcall	8000d86c <udc_req_std_iface_get_setting+0xa0>
8000d81a:	18 98       	mov	r8,r12
8000d81c:	ec 18 00 01 	eorl	r8,0x1
8000d820:	5c 58       	castu.b	r8
8000d822:	c0 30       	breq	8000d828 <udc_req_std_iface_get_setting+0x5c>
8000d824:	30 08       	mov	r8,0
8000d826:	c1 88       	rjmp	8000d856 <udc_req_std_iface_get_setting+0x8a>
8000d828:	49 08       	lddpc	r8,8000d868 <udc_req_std_iface_get_setting+0x9c>
8000d82a:	70 08       	ld.w	r8,r8[0x0]
8000d82c:	70 19       	ld.w	r9,r8[0x4]
8000d82e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000d832:	a3 68       	lsl	r8,0x2
8000d834:	f2 08 00 08 	add	r8,r9,r8
8000d838:	70 08       	ld.w	r8,r8[0x0]
8000d83a:	ef 48 ff fc 	st.w	r7[-4],r8
8000d83e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d842:	70 38       	ld.w	r8,r8[0xc]
8000d844:	5d 18       	icall	r8
8000d846:	18 98       	mov	r8,r12
8000d848:	48 a9       	lddpc	r9,8000d870 <udc_req_std_iface_get_setting+0xa4>
8000d84a:	b2 88       	st.b	r9[0x0],r8
8000d84c:	30 1b       	mov	r11,1
8000d84e:	48 9c       	lddpc	r12,8000d870 <udc_req_std_iface_get_setting+0xa4>
8000d850:	f0 1f 00 09 	mcall	8000d874 <udc_req_std_iface_get_setting+0xa8>
8000d854:	30 18       	mov	r8,1
8000d856:	10 9c       	mov	r12,r8
8000d858:	2f ed       	sub	sp,-8
8000d85a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d85e:	00 00       	add	r0,r0
8000d860:	00 00       	add	r0,r0
8000d862:	0d b8       	ld.ub	r8,r6[0x3]
8000d864:	00 00       	add	r0,r0
8000d866:	08 c6       	st.b	r4++,r6
8000d868:	00 00       	add	r0,r0
8000d86a:	08 c8       	st.b	r4++,r8
8000d86c:	80 00       	ld.sh	r0,r0[0x0]
8000d86e:	cd a4       	brge	8000d822 <udc_req_std_iface_get_setting+0x56>
8000d870:	00 00       	add	r0,r0
8000d872:	08 d0       	st.w	--r4,r0
8000d874:	80 00       	ld.sh	r0,r0[0x0]
8000d876:	9a 9c       	ld.uh	r12,sp[0x2]

8000d878 <udc_req_std_iface_set_setting>:
8000d878:	eb cd 40 80 	pushm	r7,lr
8000d87c:	1a 97       	mov	r7,sp
8000d87e:	20 1d       	sub	sp,4
8000d880:	49 78       	lddpc	r8,8000d8dc <udc_req_std_iface_set_setting+0x64>
8000d882:	90 38       	ld.sh	r8,r8[0x6]
8000d884:	58 08       	cp.w	r8,0
8000d886:	c0 30       	breq	8000d88c <udc_req_std_iface_set_setting+0x14>
8000d888:	30 08       	mov	r8,0
8000d88a:	c2 48       	rjmp	8000d8d2 <udc_req_std_iface_set_setting+0x5a>
8000d88c:	49 58       	lddpc	r8,8000d8e0 <udc_req_std_iface_set_setting+0x68>
8000d88e:	11 88       	ld.ub	r8,r8[0x0]
8000d890:	58 08       	cp.w	r8,0
8000d892:	c0 31       	brne	8000d898 <udc_req_std_iface_set_setting+0x20>
8000d894:	30 08       	mov	r8,0
8000d896:	c1 e8       	rjmp	8000d8d2 <udc_req_std_iface_set_setting+0x5a>
8000d898:	49 18       	lddpc	r8,8000d8dc <udc_req_std_iface_set_setting+0x64>
8000d89a:	90 28       	ld.sh	r8,r8[0x4]
8000d89c:	ef 68 ff fe 	st.b	r7[-2],r8
8000d8a0:	48 f8       	lddpc	r8,8000d8dc <udc_req_std_iface_set_setting+0x64>
8000d8a2:	90 18       	ld.sh	r8,r8[0x2]
8000d8a4:	ef 68 ff ff 	st.b	r7[-1],r8
8000d8a8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000d8ac:	10 9c       	mov	r12,r8
8000d8ae:	f0 1f 00 0e 	mcall	8000d8e4 <udc_req_std_iface_set_setting+0x6c>
8000d8b2:	18 98       	mov	r8,r12
8000d8b4:	ec 18 00 01 	eorl	r8,0x1
8000d8b8:	5c 58       	castu.b	r8
8000d8ba:	c0 30       	breq	8000d8c0 <udc_req_std_iface_set_setting+0x48>
8000d8bc:	30 08       	mov	r8,0
8000d8be:	c0 a8       	rjmp	8000d8d2 <udc_req_std_iface_set_setting+0x5a>
8000d8c0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d8c4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000d8c8:	12 9b       	mov	r11,r9
8000d8ca:	10 9c       	mov	r12,r8
8000d8cc:	f0 1f 00 07 	mcall	8000d8e8 <udc_req_std_iface_set_setting+0x70>
8000d8d0:	18 98       	mov	r8,r12
8000d8d2:	10 9c       	mov	r12,r8
8000d8d4:	2f fd       	sub	sp,-4
8000d8d6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d8da:	00 00       	add	r0,r0
8000d8dc:	00 00       	add	r0,r0
8000d8de:	0d b8       	ld.ub	r8,r6[0x3]
8000d8e0:	00 00       	add	r0,r0
8000d8e2:	08 c6       	st.b	r4++,r6
8000d8e4:	80 00       	ld.sh	r0,r0[0x0]
8000d8e6:	ce 5c       	rcall	8000dab0 <udc_req_iface+0x70>
8000d8e8:	80 00       	ld.sh	r0,r0[0x0]
8000d8ea:	cf 18       	rjmp	8000dacc <udc_req_iface+0x8c>

8000d8ec <udc_reqstd>:
8000d8ec:	eb cd 40 80 	pushm	r7,lr
8000d8f0:	1a 97       	mov	r7,sp
8000d8f2:	4c 78       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d8f4:	11 88       	ld.ub	r8,r8[0x0]
8000d8f6:	10 99       	mov	r9,r8
8000d8f8:	30 08       	mov	r8,0
8000d8fa:	f0 09 18 00 	cp.b	r9,r8
8000d8fe:	c3 c4       	brge	8000d976 <udc_reqstd+0x8a>
8000d900:	4c 38       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d902:	90 38       	ld.sh	r8,r8[0x6]
8000d904:	58 08       	cp.w	r8,0
8000d906:	c0 31       	brne	8000d90c <udc_reqstd+0x20>
8000d908:	30 08       	mov	r8,0
8000d90a:	c7 e8       	rjmp	8000da06 <udc_reqstd+0x11a>
8000d90c:	4c 08       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d90e:	11 88       	ld.ub	r8,r8[0x0]
8000d910:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000d914:	c1 51       	brne	8000d93e <udc_reqstd+0x52>
8000d916:	4b e8       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d918:	11 98       	ld.ub	r8,r8[0x1]
8000d91a:	58 68       	cp.w	r8,6
8000d91c:	c0 90       	breq	8000d92e <udc_reqstd+0x42>
8000d91e:	58 88       	cp.w	r8,8
8000d920:	c0 b0       	breq	8000d936 <udc_reqstd+0x4a>
8000d922:	58 08       	cp.w	r8,0
8000d924:	c0 d1       	brne	8000d93e <udc_reqstd+0x52>
8000d926:	f0 1f 00 3b 	mcall	8000da10 <udc_reqstd+0x124>
8000d92a:	18 98       	mov	r8,r12
8000d92c:	c6 d8       	rjmp	8000da06 <udc_reqstd+0x11a>
8000d92e:	f0 1f 00 3a 	mcall	8000da14 <udc_reqstd+0x128>
8000d932:	18 98       	mov	r8,r12
8000d934:	c6 98       	rjmp	8000da06 <udc_reqstd+0x11a>
8000d936:	f0 1f 00 39 	mcall	8000da18 <udc_reqstd+0x12c>
8000d93a:	18 98       	mov	r8,r12
8000d93c:	c6 58       	rjmp	8000da06 <udc_reqstd+0x11a>
8000d93e:	4b 48       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d940:	11 88       	ld.ub	r8,r8[0x0]
8000d942:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000d946:	58 18       	cp.w	r8,1
8000d948:	c0 91       	brne	8000d95a <udc_reqstd+0x6e>
8000d94a:	4b 18       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d94c:	11 98       	ld.ub	r8,r8[0x1]
8000d94e:	58 a8       	cp.w	r8,10
8000d950:	c0 51       	brne	8000d95a <udc_reqstd+0x6e>
8000d952:	f0 1f 00 33 	mcall	8000da1c <udc_reqstd+0x130>
8000d956:	18 98       	mov	r8,r12
8000d958:	c5 78       	rjmp	8000da06 <udc_reqstd+0x11a>
8000d95a:	4a d8       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d95c:	11 88       	ld.ub	r8,r8[0x0]
8000d95e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000d962:	58 28       	cp.w	r8,2
8000d964:	c4 f1       	brne	8000da02 <udc_reqstd+0x116>
8000d966:	4a a8       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d968:	11 98       	ld.ub	r8,r8[0x1]
8000d96a:	58 08       	cp.w	r8,0
8000d96c:	c4 c1       	brne	8000da04 <udc_reqstd+0x118>
8000d96e:	f0 1f 00 2d 	mcall	8000da20 <udc_reqstd+0x134>
8000d972:	18 98       	mov	r8,r12
8000d974:	c4 98       	rjmp	8000da06 <udc_reqstd+0x11a>
8000d976:	4a 68       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d978:	11 88       	ld.ub	r8,r8[0x0]
8000d97a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000d97e:	c1 f1       	brne	8000d9bc <udc_reqstd+0xd0>
8000d980:	4a 38       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d982:	11 98       	ld.ub	r8,r8[0x1]
8000d984:	58 38       	cp.w	r8,3
8000d986:	c1 30       	breq	8000d9ac <udc_reqstd+0xc0>
8000d988:	e0 89 00 05 	brgt	8000d992 <udc_reqstd+0xa6>
8000d98c:	58 18       	cp.w	r8,1
8000d98e:	c0 b0       	breq	8000d9a4 <udc_reqstd+0xb8>
8000d990:	c1 68       	rjmp	8000d9bc <udc_reqstd+0xd0>
8000d992:	58 58       	cp.w	r8,5
8000d994:	c0 40       	breq	8000d99c <udc_reqstd+0xb0>
8000d996:	58 98       	cp.w	r8,9
8000d998:	c0 e0       	breq	8000d9b4 <udc_reqstd+0xc8>
8000d99a:	c1 18       	rjmp	8000d9bc <udc_reqstd+0xd0>
8000d99c:	f0 1f 00 22 	mcall	8000da24 <udc_reqstd+0x138>
8000d9a0:	18 98       	mov	r8,r12
8000d9a2:	c3 28       	rjmp	8000da06 <udc_reqstd+0x11a>
8000d9a4:	f0 1f 00 21 	mcall	8000da28 <udc_reqstd+0x13c>
8000d9a8:	18 98       	mov	r8,r12
8000d9aa:	c2 e8       	rjmp	8000da06 <udc_reqstd+0x11a>
8000d9ac:	f0 1f 00 20 	mcall	8000da2c <udc_reqstd+0x140>
8000d9b0:	18 98       	mov	r8,r12
8000d9b2:	c2 a8       	rjmp	8000da06 <udc_reqstd+0x11a>
8000d9b4:	f0 1f 00 1f 	mcall	8000da30 <udc_reqstd+0x144>
8000d9b8:	18 98       	mov	r8,r12
8000d9ba:	c2 68       	rjmp	8000da06 <udc_reqstd+0x11a>
8000d9bc:	49 48       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d9be:	11 88       	ld.ub	r8,r8[0x0]
8000d9c0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000d9c4:	58 18       	cp.w	r8,1
8000d9c6:	c0 91       	brne	8000d9d8 <udc_reqstd+0xec>
8000d9c8:	49 18       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d9ca:	11 98       	ld.ub	r8,r8[0x1]
8000d9cc:	58 b8       	cp.w	r8,11
8000d9ce:	c0 51       	brne	8000d9d8 <udc_reqstd+0xec>
8000d9d0:	f0 1f 00 19 	mcall	8000da34 <udc_reqstd+0x148>
8000d9d4:	18 98       	mov	r8,r12
8000d9d6:	c1 88       	rjmp	8000da06 <udc_reqstd+0x11a>
8000d9d8:	48 d8       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d9da:	11 88       	ld.ub	r8,r8[0x0]
8000d9dc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000d9e0:	58 28       	cp.w	r8,2
8000d9e2:	c1 11       	brne	8000da04 <udc_reqstd+0x118>
8000d9e4:	48 a8       	lddpc	r8,8000da0c <udc_reqstd+0x120>
8000d9e6:	11 98       	ld.ub	r8,r8[0x1]
8000d9e8:	58 18       	cp.w	r8,1
8000d9ea:	c0 40       	breq	8000d9f2 <udc_reqstd+0x106>
8000d9ec:	58 38       	cp.w	r8,3
8000d9ee:	c0 60       	breq	8000d9fa <udc_reqstd+0x10e>
8000d9f0:	c0 a8       	rjmp	8000da04 <udc_reqstd+0x118>
8000d9f2:	f0 1f 00 12 	mcall	8000da38 <udc_reqstd+0x14c>
8000d9f6:	18 98       	mov	r8,r12
8000d9f8:	c0 78       	rjmp	8000da06 <udc_reqstd+0x11a>
8000d9fa:	f0 1f 00 11 	mcall	8000da3c <udc_reqstd+0x150>
8000d9fe:	18 98       	mov	r8,r12
8000da00:	c0 38       	rjmp	8000da06 <udc_reqstd+0x11a>
8000da02:	d7 03       	nop
8000da04:	30 08       	mov	r8,0
8000da06:	10 9c       	mov	r12,r8
8000da08:	e3 cd 80 80 	ldm	sp++,r7,pc
8000da0c:	00 00       	add	r0,r0
8000da0e:	0d b8       	ld.ub	r8,r6[0x3]
8000da10:	80 00       	ld.sh	r0,r0[0x0]
8000da12:	d0 c8       	*unknown*
8000da14:	80 00       	ld.sh	r0,r0[0x0]
8000da16:	d4 24       	*unknown*
8000da18:	80 00       	ld.sh	r0,r0[0x0]
8000da1a:	d6 80       	acall	0x1a0
8000da1c:	80 00       	ld.sh	r0,r0[0x0]
8000da1e:	d7 cc       	*unknown*
8000da20:	80 00       	ld.sh	r0,r0[0x0]
8000da22:	d0 fc       	*unknown*
8000da24:	80 00       	ld.sh	r0,r0[0x0]
8000da26:	d2 fc       	*unknown*
8000da28:	80 00       	ld.sh	r0,r0[0x0]
8000da2a:	d1 54       	*unknown*
8000da2c:	80 00       	ld.sh	r0,r0[0x0]
8000da2e:	d1 d0       	acall	0x74
8000da30:	80 00       	ld.sh	r0,r0[0x0]
8000da32:	d6 b4       	*unknown*
8000da34:	80 00       	ld.sh	r0,r0[0x0]
8000da36:	d8 78       	*unknown*
8000da38:	80 00       	ld.sh	r0,r0[0x0]
8000da3a:	d1 94       	*unknown*
8000da3c:	80 00       	ld.sh	r0,r0[0x0]
8000da3e:	d2 8c       	*unknown*

8000da40 <udc_req_iface>:
8000da40:	eb cd 40 80 	pushm	r7,lr
8000da44:	1a 97       	mov	r7,sp
8000da46:	20 2d       	sub	sp,8
8000da48:	4a 58       	lddpc	r8,8000dadc <udc_req_iface+0x9c>
8000da4a:	11 88       	ld.ub	r8,r8[0x0]
8000da4c:	58 08       	cp.w	r8,0
8000da4e:	c0 31       	brne	8000da54 <udc_req_iface+0x14>
8000da50:	30 08       	mov	r8,0
8000da52:	c4 08       	rjmp	8000dad2 <udc_req_iface+0x92>
8000da54:	4a 38       	lddpc	r8,8000dae0 <udc_req_iface+0xa0>
8000da56:	90 28       	ld.sh	r8,r8[0x4]
8000da58:	ef 68 ff fb 	st.b	r7[-5],r8
8000da5c:	4a 28       	lddpc	r8,8000dae4 <udc_req_iface+0xa4>
8000da5e:	70 08       	ld.w	r8,r8[0x0]
8000da60:	70 08       	ld.w	r8,r8[0x0]
8000da62:	11 c8       	ld.ub	r8,r8[0x4]
8000da64:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000da68:	f0 09 18 00 	cp.b	r9,r8
8000da6c:	c0 33       	brcs	8000da72 <udc_req_iface+0x32>
8000da6e:	30 08       	mov	r8,0
8000da70:	c3 18       	rjmp	8000dad2 <udc_req_iface+0x92>
8000da72:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000da76:	30 0b       	mov	r11,0
8000da78:	10 9c       	mov	r12,r8
8000da7a:	f0 1f 00 1c 	mcall	8000dae8 <udc_req_iface+0xa8>
8000da7e:	18 98       	mov	r8,r12
8000da80:	ec 18 00 01 	eorl	r8,0x1
8000da84:	5c 58       	castu.b	r8
8000da86:	c0 30       	breq	8000da8c <udc_req_iface+0x4c>
8000da88:	30 08       	mov	r8,0
8000da8a:	c2 48       	rjmp	8000dad2 <udc_req_iface+0x92>
8000da8c:	49 68       	lddpc	r8,8000dae4 <udc_req_iface+0xa4>
8000da8e:	70 08       	ld.w	r8,r8[0x0]
8000da90:	70 19       	ld.w	r9,r8[0x4]
8000da92:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000da96:	a3 68       	lsl	r8,0x2
8000da98:	f2 08 00 08 	add	r8,r9,r8
8000da9c:	70 08       	ld.w	r8,r8[0x0]
8000da9e:	ef 48 ff fc 	st.w	r7[-4],r8
8000daa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000daa6:	70 38       	ld.w	r8,r8[0xc]
8000daa8:	5d 18       	icall	r8
8000daaa:	18 98       	mov	r8,r12
8000daac:	10 99       	mov	r9,r8
8000daae:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dab2:	12 9b       	mov	r11,r9
8000dab4:	10 9c       	mov	r12,r8
8000dab6:	f0 1f 00 0d 	mcall	8000dae8 <udc_req_iface+0xa8>
8000daba:	18 98       	mov	r8,r12
8000dabc:	ec 18 00 01 	eorl	r8,0x1
8000dac0:	5c 58       	castu.b	r8
8000dac2:	c0 30       	breq	8000dac8 <udc_req_iface+0x88>
8000dac4:	30 08       	mov	r8,0
8000dac6:	c0 68       	rjmp	8000dad2 <udc_req_iface+0x92>
8000dac8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dacc:	70 28       	ld.w	r8,r8[0x8]
8000dace:	5d 18       	icall	r8
8000dad0:	18 98       	mov	r8,r12
8000dad2:	10 9c       	mov	r12,r8
8000dad4:	2f ed       	sub	sp,-8
8000dad6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dada:	00 00       	add	r0,r0
8000dadc:	00 00       	add	r0,r0
8000dade:	08 c6       	st.b	r4++,r6
8000dae0:	00 00       	add	r0,r0
8000dae2:	0d b8       	ld.ub	r8,r6[0x3]
8000dae4:	00 00       	add	r0,r0
8000dae6:	08 c8       	st.b	r4++,r8
8000dae8:	80 00       	ld.sh	r0,r0[0x0]
8000daea:	cd a4       	brge	8000da9e <udc_req_iface+0x5e>

8000daec <udc_process_setup>:
8000daec:	eb cd 40 80 	pushm	r7,lr
8000daf0:	1a 97       	mov	r7,sp
8000daf2:	49 a9       	lddpc	r9,8000db58 <udc_process_setup+0x6c>
8000daf4:	30 08       	mov	r8,0
8000daf6:	b2 68       	st.h	r9[0xc],r8
8000daf8:	49 88       	lddpc	r8,8000db58 <udc_process_setup+0x6c>
8000dafa:	30 09       	mov	r9,0
8000dafc:	91 49       	st.w	r8[0x10],r9
8000dafe:	49 78       	lddpc	r8,8000db58 <udc_process_setup+0x6c>
8000db00:	30 09       	mov	r9,0
8000db02:	91 59       	st.w	r8[0x14],r9
8000db04:	49 58       	lddpc	r8,8000db58 <udc_process_setup+0x6c>
8000db06:	11 88       	ld.ub	r8,r8[0x0]
8000db08:	10 99       	mov	r9,r8
8000db0a:	30 08       	mov	r8,0
8000db0c:	f0 09 18 00 	cp.b	r9,r8
8000db10:	c0 74       	brge	8000db1e <udc_process_setup+0x32>
8000db12:	49 28       	lddpc	r8,8000db58 <udc_process_setup+0x6c>
8000db14:	90 38       	ld.sh	r8,r8[0x6]
8000db16:	58 08       	cp.w	r8,0
8000db18:	c0 31       	brne	8000db1e <udc_process_setup+0x32>
8000db1a:	30 08       	mov	r8,0
8000db1c:	c1 b8       	rjmp	8000db52 <udc_process_setup+0x66>
8000db1e:	48 f8       	lddpc	r8,8000db58 <udc_process_setup+0x6c>
8000db20:	11 88       	ld.ub	r8,r8[0x0]
8000db22:	e2 18 00 60 	andl	r8,0x60,COH
8000db26:	c0 81       	brne	8000db36 <udc_process_setup+0x4a>
8000db28:	f0 1f 00 0d 	mcall	8000db5c <udc_process_setup+0x70>
8000db2c:	18 98       	mov	r8,r12
8000db2e:	58 08       	cp.w	r8,0
8000db30:	c0 30       	breq	8000db36 <udc_process_setup+0x4a>
8000db32:	30 18       	mov	r8,1
8000db34:	c0 f8       	rjmp	8000db52 <udc_process_setup+0x66>
8000db36:	48 98       	lddpc	r8,8000db58 <udc_process_setup+0x6c>
8000db38:	11 88       	ld.ub	r8,r8[0x0]
8000db3a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000db3e:	58 18       	cp.w	r8,1
8000db40:	c0 81       	brne	8000db50 <udc_process_setup+0x64>
8000db42:	f0 1f 00 08 	mcall	8000db60 <udc_process_setup+0x74>
8000db46:	18 98       	mov	r8,r12
8000db48:	58 08       	cp.w	r8,0
8000db4a:	c0 30       	breq	8000db50 <udc_process_setup+0x64>
8000db4c:	30 18       	mov	r8,1
8000db4e:	c0 28       	rjmp	8000db52 <udc_process_setup+0x66>
8000db50:	30 08       	mov	r8,0
8000db52:	10 9c       	mov	r12,r8
8000db54:	e3 cd 80 80 	ldm	sp++,r7,pc
8000db58:	00 00       	add	r0,r0
8000db5a:	0d b8       	ld.ub	r8,r6[0x3]
8000db5c:	80 00       	ld.sh	r0,r0[0x0]
8000db5e:	d8 ec       	*unknown*
8000db60:	80 00       	ld.sh	r0,r0[0x0]
8000db62:	da 40       	acall	0x290

8000db64 <pm_sleep>:
#else
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
8000db64:	eb cd 40 80 	pushm	r7,lr
8000db68:	1a 97       	mov	r7,sp
8000db6a:	20 1d       	sub	sp,4
8000db6c:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (sleep_mode) {
8000db70:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000db74:	58 58       	cp.w	r8,5
8000db76:	c4 30       	breq	8000dbfc <pm_sleep+0x98>
8000db78:	e0 89 00 10 	brgt	8000db98 <pm_sleep+0x34>
8000db7c:	58 28       	cp.w	r8,2
8000db7e:	c2 d0       	breq	8000dbd8 <pm_sleep+0x74>
8000db80:	e0 89 00 07 	brgt	8000db8e <pm_sleep+0x2a>
8000db84:	58 08       	cp.w	r8,0
8000db86:	c1 d0       	breq	8000dbc0 <pm_sleep+0x5c>
8000db88:	58 18       	cp.w	r8,1
8000db8a:	c2 10       	breq	8000dbcc <pm_sleep+0x68>
8000db8c:	c3 d8       	rjmp	8000dc06 <pm_sleep+0xa2>
8000db8e:	58 38       	cp.w	r8,3
8000db90:	c2 a0       	breq	8000dbe4 <pm_sleep+0x80>
8000db92:	58 48       	cp.w	r8,4
8000db94:	c2 e0       	breq	8000dbf0 <pm_sleep+0x8c>
8000db96:	c3 88       	rjmp	8000dc06 <pm_sleep+0xa2>
8000db98:	e0 48 00 82 	cp.w	r8,130
8000db9c:	c2 10       	breq	8000dbde <pm_sleep+0x7a>
8000db9e:	e0 89 00 09 	brgt	8000dbb0 <pm_sleep+0x4c>
8000dba2:	e0 48 00 80 	cp.w	r8,128
8000dba6:	c1 00       	breq	8000dbc6 <pm_sleep+0x62>
8000dba8:	e0 48 00 81 	cp.w	r8,129
8000dbac:	c1 30       	breq	8000dbd2 <pm_sleep+0x6e>
8000dbae:	c2 c8       	rjmp	8000dc06 <pm_sleep+0xa2>
8000dbb0:	e0 48 00 84 	cp.w	r8,132
8000dbb4:	c2 10       	breq	8000dbf6 <pm_sleep+0x92>
8000dbb6:	c1 a5       	brlt	8000dbea <pm_sleep+0x86>
8000dbb8:	e0 48 00 85 	cp.w	r8,133
8000dbbc:	c2 30       	breq	8000dc02 <pm_sleep+0x9e>
8000dbbe:	c2 48       	rjmp	8000dc06 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
8000dbc0:	e9 b0 00 00 	sleep	0x0
		break;
8000dbc4:	c2 18       	rjmp	8000dc06 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
8000dbc6:	e9 b0 00 80 	sleep	0x80
		break;
8000dbca:	c1 e8       	rjmp	8000dc06 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
8000dbcc:	e9 b0 00 01 	sleep	0x1
		break;
8000dbd0:	c1 b8       	rjmp	8000dc06 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
8000dbd2:	e9 b0 00 81 	sleep	0x81
		break;
8000dbd6:	c1 88       	rjmp	8000dc06 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
8000dbd8:	e9 b0 00 02 	sleep	0x2
		break;
8000dbdc:	c1 58       	rjmp	8000dc06 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
8000dbde:	e9 b0 00 82 	sleep	0x82
		break;
8000dbe2:	c1 28       	rjmp	8000dc06 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
8000dbe4:	e9 b0 00 03 	sleep	0x3
		break;
8000dbe8:	c0 f8       	rjmp	8000dc06 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
8000dbea:	e9 b0 00 83 	sleep	0x83
		break;
8000dbee:	c0 c8       	rjmp	8000dc06 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
8000dbf0:	e9 b0 00 04 	sleep	0x4
		break;
8000dbf4:	c0 98       	rjmp	8000dc06 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000dbf6:	e9 b0 00 84 	sleep	0x84
		break;
8000dbfa:	c0 68       	rjmp	8000dc06 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
8000dbfc:	e9 b0 00 05 	sleep	0x5
		break;
8000dc00:	c0 38       	rjmp	8000dc06 <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
8000dc02:	e9 b0 00 85 	sleep	0x85
		break;
#endif
	default:
		break;
	}
}
8000dc06:	2f fd       	sub	sp,-4
8000dc08:	e3 cd 80 80 	ldm	sp++,r7,pc

8000dc0c <sleepmgr_sleep>:
//! @}



static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
8000dc0c:	eb cd 40 80 	pushm	r7,lr
8000dc10:	1a 97       	mov	r7,sp
8000dc12:	20 1d       	sub	sp,4
8000dc14:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
8000dc18:	d3 03       	ssrf	0x10

	// Atomically enable the global interrupts and enter the sleep mode.
	pm_sleep(AVR32_PM_SMODE_GMCLEAR_MASK | (sleep_mode-1));
8000dc1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dc1e:	20 18       	sub	r8,1
8000dc20:	a7 b8       	sbr	r8,0x7
8000dc22:	10 9c       	mov	r12,r8
8000dc24:	f0 1f 00 03 	mcall	8000dc30 <sleepmgr_sleep+0x24>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
8000dc28:	2f fd       	sub	sp,-4
8000dc2a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dc2e:	00 00       	add	r0,r0
8000dc30:	80 00       	ld.sh	r0,r0[0x0]
8000dc32:	db 64       	*unknown*

8000dc34 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8000dc34:	eb cd 40 80 	pushm	r7,lr
8000dc38:	1a 97       	mov	r7,sp
8000dc3a:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000dc3c:	30 08       	mov	r8,0
8000dc3e:	ef 68 ff ff 	st.b	r7[-1],r8
8000dc42:	c0 c8       	rjmp	8000dc5a <sleepmgr_init+0x26>
		sleepmgr_locks[i] = 0;
8000dc44:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dc48:	48 ba       	lddpc	r10,8000dc74 <sleepmgr_init+0x40>
8000dc4a:	30 08       	mov	r8,0
8000dc4c:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000dc50:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dc54:	2f f8       	sub	r8,-1
8000dc56:	ef 68 ff ff 	st.b	r7[-1],r8
8000dc5a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dc5e:	30 58       	mov	r8,5
8000dc60:	f0 09 18 00 	cp.b	r9,r8
8000dc64:	fe 98 ff f0 	brls	8000dc44 <sleepmgr_init+0x10>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8000dc68:	48 39       	lddpc	r9,8000dc74 <sleepmgr_init+0x40>
8000dc6a:	30 18       	mov	r8,1
8000dc6c:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000dc6e:	2f fd       	sub	sp,-4
8000dc70:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dc74:	00 00       	add	r0,r0
8000dc76:	0d d0       	ld.ub	r0,r6[0x5]

8000dc78 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
8000dc78:	eb cd 40 80 	pushm	r7,lr
8000dc7c:	1a 97       	mov	r7,sp
8000dc7e:	20 2d       	sub	sp,8
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
8000dc80:	30 08       	mov	r8,0
8000dc82:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
8000dc86:	48 d8       	lddpc	r8,8000dcb8 <sleepmgr_get_sleep_mode+0x40>
8000dc88:	ef 48 ff fc 	st.w	r7[-4],r8

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000dc8c:	c0 b8       	rjmp	8000dca2 <sleepmgr_get_sleep_mode+0x2a>
		lock_ptr++;
8000dc8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dc92:	2f f8       	sub	r8,-1
8000dc94:	ef 48 ff fc 	st.w	r7[-4],r8
		sleep_mode++;
8000dc98:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dc9c:	2f f8       	sub	r8,-1
8000dc9e:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000dca2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dca6:	11 88       	ld.ub	r8,r8[0x0]
8000dca8:	58 08       	cp.w	r8,0
8000dcaa:	cf 20       	breq	8000dc8e <sleepmgr_get_sleep_mode+0x16>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
8000dcac:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000dcb0:	10 9c       	mov	r12,r8
8000dcb2:	2f ed       	sub	sp,-8
8000dcb4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dcb8:	00 00       	add	r0,r0
8000dcba:	0d d0       	ld.ub	r0,r6[0x5]

8000dcbc <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
8000dcbc:	eb cd 40 80 	pushm	r7,lr
8000dcc0:	1a 97       	mov	r7,sp
8000dcc2:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
8000dcc4:	d3 03       	ssrf	0x10

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
8000dcc6:	f0 1f 00 0a 	mcall	8000dcec <sleepmgr_enter_sleep+0x30>
8000dcca:	18 98       	mov	r8,r12
8000dccc:	ef 48 ff fc 	st.w	r7[-4],r8
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
8000dcd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dcd4:	58 08       	cp.w	r8,0
8000dcd6:	c0 31       	brne	8000dcdc <sleepmgr_enter_sleep+0x20>
		cpu_irq_enable();
8000dcd8:	d5 03       	csrf	0x10
		return;
8000dcda:	c0 58       	rjmp	8000dce4 <sleepmgr_enter_sleep+0x28>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
8000dcdc:	ee fc ff fc 	ld.w	r12,r7[-4]
8000dce0:	f0 1f 00 04 	mcall	8000dcf0 <sleepmgr_enter_sleep+0x34>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000dce4:	2f fd       	sub	sp,-4
8000dce6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dcea:	00 00       	add	r0,r0
8000dcec:	80 00       	ld.sh	r0,r0[0x0]
8000dcee:	dc 78       	*unknown*
8000dcf0:	80 00       	ld.sh	r0,r0[0x0]
8000dcf2:	dc 0c       	*unknown*

8000dcf4 <udc_include_vbus_monitoring>:
 *        // Start USB \n
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
8000dcf4:	eb cd 40 80 	pushm	r7,lr
8000dcf8:	1a 97       	mov	r7,sp
	return udd_include_vbus_monitoring();
8000dcfa:	f0 1f 00 04 	mcall	8000dd08 <udc_include_vbus_monitoring+0x14>
8000dcfe:	18 98       	mov	r8,r12
}
8000dd00:	10 9c       	mov	r12,r8
8000dd02:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dd06:	00 00       	add	r0,r0
8000dd08:	80 00       	ld.sh	r0,r0[0x0]
8000dd0a:	97 e4       	st.w	r11[0x38],r4

8000dd0c <udc_attach>:
 * \warning If a VBus control is included in driver,
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
8000dd0c:	eb cd 40 80 	pushm	r7,lr
8000dd10:	1a 97       	mov	r7,sp
	udd_attach();
8000dd12:	f0 1f 00 03 	mcall	8000dd1c <udc_attach+0x10>
}
8000dd16:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dd1a:	00 00       	add	r0,r0
8000dd1c:	80 00       	ld.sh	r0,r0[0x0]
8000dd1e:	99 14       	st.w	r12[0x4],r4

8000dd20 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
8000dd20:	eb cd 40 80 	pushm	r7,lr
8000dd24:	1a 97       	mov	r7,sp
	udd_detach();
8000dd26:	f0 1f 00 03 	mcall	8000dd30 <udc_detach+0x10>
}
8000dd2a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dd2e:	00 00       	add	r0,r0
8000dd30:	80 00       	ld.sh	r0,r0[0x0]
8000dd32:	99 c0       	st.w	r12[0x30],r0

8000dd34 <main>:
static bool main_b_msc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
8000dd34:	eb cd 40 80 	pushm	r7,lr
8000dd38:	1a 97       	mov	r7,sp
8000dd3a:	20 1d       	sub	sp,4
	uint8_t i = 0;
8000dd3c:	30 08       	mov	r8,0
8000dd3e:	ef 68 ff ff 	st.b	r7[-1],r8
	irq_initialize_vectors();
8000dd42:	f0 1f 00 25 	mcall	8000ddd4 <main+0xa0>
	cpu_irq_enable();
8000dd46:	d5 03       	csrf	0x10

	// Initialize the sleep manager
	sleepmgr_init();
8000dd48:	f0 1f 00 24 	mcall	8000ddd8 <main+0xa4>

	sysclk_init();
8000dd4c:	f0 1f 00 24 	mcall	8000dddc <main+0xa8>
	board_init();
8000dd50:	f0 1f 00 24 	mcall	8000dde0 <main+0xac>

	ui_init();
8000dd54:	f0 1f 00 24 	mcall	8000dde4 <main+0xb0>
	ui_powerdown();
8000dd58:	f0 1f 00 24 	mcall	8000dde8 <main+0xb4>

	memories_initialization();
8000dd5c:	f0 1f 00 24 	mcall	8000ddec <main+0xb8>

	// Initialize LCD
	et024006_Init( FOSC0, FOSC0 );
8000dd60:	e0 6b 1b 00 	mov	r11,6912
8000dd64:	ea 1b 00 b7 	orh	r11,0xb7
8000dd68:	e0 6c 1b 00 	mov	r12,6912
8000dd6c:	ea 1c 00 b7 	orh	r12,0xb7
8000dd70:	f0 1f 00 20 	mcall	8000ddf0 <main+0xbc>
	gpio_set_gpio_pin(ET024006DHU_BL_PIN);
8000dd74:	30 9c       	mov	r12,9
8000dd76:	f0 1f 00 20 	mcall	8000ddf4 <main+0xc0>
	
	//et024006_PrintConsole("Welcome Eric", BLACK, -1);
	//clear_lcd
	et024006_DrawFilledRect(1, 1, ET024006_WIDTH, ET024006_HEIGHT, BLACK);
8000dd7a:	30 08       	mov	r8,0
8000dd7c:	e0 69 00 f0 	mov	r9,240
8000dd80:	e0 6a 01 40 	mov	r10,320
8000dd84:	30 1b       	mov	r11,1
8000dd86:	30 1c       	mov	r12,1
8000dd88:	f0 1f 00 1c 	mcall	8000ddf8 <main+0xc4>
	
	// Initialize AES module
	aes_task();
8000dd8c:	f0 1f 00 1c 	mcall	8000ddfc <main+0xc8>

	// Start TC
	tc_task();
8000dd90:	f0 1f 00 1c 	mcall	8000de00 <main+0xcc>

	// Start USB stack to authorize VBus monitoring
	udc_start();
8000dd94:	f0 1f 00 1c 	mcall	8000de04 <main+0xd0>

	if (!udc_include_vbus_monitoring()) {
8000dd98:	f0 1f 00 1c 	mcall	8000de08 <main+0xd4>
8000dd9c:	18 98       	mov	r8,r12
8000dd9e:	ec 18 00 01 	eorl	r8,0x1
8000dda2:	5c 58       	castu.b	r8
8000dda4:	c0 60       	breq	8000ddb0 <main+0x7c>
		// VBUS monitoring is not available on this product
		// thereby VBUS has to be considered as present
		main_vbus_action(true);
8000dda6:	30 1c       	mov	r12,1
8000dda8:	f0 1f 00 19 	mcall	8000de0c <main+0xd8>
8000ddac:	c0 28       	rjmp	8000ddb0 <main+0x7c>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000ddae:	d7 03       	nop

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true)
	{
		if (main_b_msc_enable)
8000ddb0:	49 88       	lddpc	r8,8000de10 <main+0xdc>
8000ddb2:	11 88       	ld.ub	r8,r8[0x0]
8000ddb4:	58 08       	cp.w	r8,0
8000ddb6:	c0 b0       	breq	8000ddcc <main+0x98>
		{
			if (!udi_msc_process_trans())
8000ddb8:	f0 1f 00 17 	mcall	8000de14 <main+0xe0>
8000ddbc:	18 98       	mov	r8,r12
8000ddbe:	ec 18 00 01 	eorl	r8,0x1
8000ddc2:	5c 58       	castu.b	r8
8000ddc4:	cf 50       	breq	8000ddae <main+0x7a>
			{
				sleepmgr_enter_sleep();
8000ddc6:	f0 1f 00 15 	mcall	8000de18 <main+0xe4>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000ddca:	cf 3b       	rjmp	8000ddb0 <main+0x7c>
				sleepmgr_enter_sleep();
			}
		}
		else
		{
			sleepmgr_enter_sleep();
8000ddcc:	f0 1f 00 13 	mcall	8000de18 <main+0xe4>
		}
		//main_process_mode();
	}
8000ddd0:	cf 0b       	rjmp	8000ddb0 <main+0x7c>
8000ddd2:	00 00       	add	r0,r0
8000ddd4:	80 00       	ld.sh	r0,r0[0x0]
8000ddd6:	8b 1c       	st.w	r5[0x4],r12
8000ddd8:	80 00       	ld.sh	r0,r0[0x0]
8000ddda:	dc 34       	*unknown*
8000dddc:	80 00       	ld.sh	r0,r0[0x0]
8000ddde:	bb e0       	*unknown*
8000dde0:	80 00       	ld.sh	r0,r0[0x0]
8000dde2:	41 c0       	lddsp	r0,sp[0x70]
8000dde4:	80 00       	ld.sh	r0,r0[0x0]
8000dde6:	be 68       	st.h	pc[0xc],r8
8000dde8:	80 00       	ld.sh	r0,r0[0x0]
8000ddea:	be 88       	st.b	pc[0x0],r8
8000ddec:	80 00       	ld.sh	r0,r0[0x0]
8000ddee:	df 94       	*unknown*
8000ddf0:	80 00       	ld.sh	r0,r0[0x0]
8000ddf2:	43 a8       	lddsp	r8,sp[0xe8]
8000ddf4:	80 00       	ld.sh	r0,r0[0x0]
8000ddf6:	89 56       	st.w	r4[0x14],r6
8000ddf8:	80 00       	ld.sh	r0,r0[0x0]
8000ddfa:	44 20       	lddsp	r0,sp[0x108]
8000ddfc:	80 00       	ld.sh	r0,r0[0x0]
8000ddfe:	3f 30       	mov	r0,-13
8000de00:	80 00       	ld.sh	r0,r0[0x0]
8000de02:	3e 90       	mov	r0,-23
8000de04:	80 00       	ld.sh	r0,r0[0x0]
8000de06:	cf e0       	breq	8000de02 <main+0xce>
8000de08:	80 00       	ld.sh	r0,r0[0x0]
8000de0a:	dc f4       	*unknown*
8000de0c:	80 00       	ld.sh	r0,r0[0x0]
8000de0e:	de 1c       	*unknown*
8000de10:	00 00       	add	r0,r0
8000de12:	08 d4       	st.w	--r4,r4
8000de14:	80 00       	ld.sh	r0,r0[0x0]
8000de16:	ca dc       	rcall	8000df70 <sysclk_get_pbb_hz+0x14>
8000de18:	80 00       	ld.sh	r0,r0[0x0]
8000de1a:	dc bc       	*unknown*

8000de1c <main_vbus_action>:
}

void main_vbus_action(bool b_high)
{
8000de1c:	eb cd 40 80 	pushm	r7,lr
8000de20:	1a 97       	mov	r7,sp
8000de22:	20 1d       	sub	sp,4
8000de24:	18 98       	mov	r8,r12
8000de26:	ef 68 ff fc 	st.b	r7[-4],r8
	if (b_high) {
8000de2a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000de2e:	30 08       	mov	r8,0
8000de30:	f0 09 18 00 	cp.b	r9,r8
8000de34:	c0 40       	breq	8000de3c <main_vbus_action+0x20>
		// Attach USB Device
		udc_attach();
8000de36:	f0 1f 00 05 	mcall	8000de48 <main_vbus_action+0x2c>
8000de3a:	c0 38       	rjmp	8000de40 <main_vbus_action+0x24>
	} else {
		// VBUS not present
		udc_detach();
8000de3c:	f0 1f 00 04 	mcall	8000de4c <main_vbus_action+0x30>
	}
}
8000de40:	2f fd       	sub	sp,-4
8000de42:	e3 cd 80 80 	ldm	sp++,r7,pc
8000de46:	00 00       	add	r0,r0
8000de48:	80 00       	ld.sh	r0,r0[0x0]
8000de4a:	dd 0c       	*unknown*
8000de4c:	80 00       	ld.sh	r0,r0[0x0]
8000de4e:	dd 20       	acall	0x348

8000de50 <main_suspend_action>:

void main_suspend_action(void)
{
8000de50:	eb cd 40 80 	pushm	r7,lr
8000de54:	1a 97       	mov	r7,sp
	ui_powerdown();
8000de56:	f0 1f 00 03 	mcall	8000de60 <main_suspend_action+0x10>
}
8000de5a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000de5e:	00 00       	add	r0,r0
8000de60:	80 00       	ld.sh	r0,r0[0x0]
8000de62:	be 88       	st.b	pc[0x0],r8

8000de64 <main_resume_action>:

void main_resume_action(void)
{
8000de64:	eb cd 40 80 	pushm	r7,lr
8000de68:	1a 97       	mov	r7,sp
	ui_wakeup();
8000de6a:	f0 1f 00 03 	mcall	8000de74 <main_resume_action+0x10>
}
8000de6e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000de72:	00 00       	add	r0,r0
8000de74:	80 00       	ld.sh	r0,r0[0x0]
8000de76:	be a4       	st.b	pc[0x2],r4

8000de78 <main_sof_action>:

void main_sof_action(void)
{
8000de78:	eb cd 40 80 	pushm	r7,lr
8000de7c:	1a 97       	mov	r7,sp
	if (!main_b_msc_enable)
8000de7e:	48 a8       	lddpc	r8,8000dea4 <main_sof_action+0x2c>
8000de80:	11 88       	ld.ub	r8,r8[0x0]
8000de82:	ec 18 00 01 	eorl	r8,0x1
8000de86:	5c 58       	castu.b	r8
8000de88:	c0 a1       	brne	8000de9c <main_sof_action+0x24>
		return;
	ui_process(udd_get_frame_number());
8000de8a:	f0 1f 00 08 	mcall	8000dea8 <main_sof_action+0x30>
8000de8e:	18 98       	mov	r8,r12
8000de90:	5c 88       	casts.h	r8
8000de92:	5c 78       	castu.h	r8
8000de94:	10 9c       	mov	r12,r8
8000de96:	f0 1f 00 06 	mcall	8000deac <main_sof_action+0x34>
8000de9a:	c0 28       	rjmp	8000de9e <main_sof_action+0x26>
}

void main_sof_action(void)
{
	if (!main_b_msc_enable)
		return;
8000de9c:	d7 03       	nop
	ui_process(udd_get_frame_number());
}
8000de9e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dea2:	00 00       	add	r0,r0
8000dea4:	00 00       	add	r0,r0
8000dea6:	08 d4       	st.w	--r4,r4
8000dea8:	80 00       	ld.sh	r0,r0[0x0]
8000deaa:	9a 82       	ld.uh	r2,sp[0x0]
8000deac:	80 00       	ld.sh	r0,r0[0x0]
8000deae:	bf 08       	ld.d	r8,pc

8000deb0 <main_msc_enable>:

bool main_msc_enable(void)
{
8000deb0:	eb cd 40 80 	pushm	r7,lr
8000deb4:	1a 97       	mov	r7,sp
	main_b_msc_enable = true;
8000deb6:	48 49       	lddpc	r9,8000dec4 <main_msc_enable+0x14>
8000deb8:	30 18       	mov	r8,1
8000deba:	b2 88       	st.b	r9[0x0],r8
	return true;
8000debc:	30 18       	mov	r8,1
}
8000debe:	10 9c       	mov	r12,r8
8000dec0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dec4:	00 00       	add	r0,r0
8000dec6:	08 d4       	st.w	--r4,r4

8000dec8 <main_msc_disable>:

void main_msc_disable(void)
{
8000dec8:	eb cd 40 80 	pushm	r7,lr
8000decc:	1a 97       	mov	r7,sp
	main_b_msc_enable = false;
8000dece:	48 39       	lddpc	r9,8000ded8 <main_msc_disable+0x10>
8000ded0:	30 08       	mov	r8,0
8000ded2:	b2 88       	st.b	r9[0x0],r8
}
8000ded4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ded8:	00 00       	add	r0,r0
8000deda:	08 d4       	st.w	--r4,r4

8000dedc <osc_get_rate>:
8000dedc:	eb cd 40 80 	pushm	r7,lr
8000dee0:	1a 97       	mov	r7,sp
8000dee2:	20 1d       	sub	sp,4
8000dee4:	18 98       	mov	r8,r12
8000dee6:	ef 68 ff fc 	st.b	r7[-4],r8
8000deea:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000deee:	58 18       	cp.w	r8,1
8000def0:	c0 a0       	breq	8000df04 <osc_get_rate+0x28>
8000def2:	58 28       	cp.w	r8,2
8000def4:	c0 d0       	breq	8000df0e <osc_get_rate+0x32>
8000def6:	58 08       	cp.w	r8,0
8000def8:	c0 e1       	brne	8000df14 <osc_get_rate+0x38>
8000defa:	e0 68 1b 00 	mov	r8,6912
8000defe:	ea 18 00 b7 	orh	r8,0xb7
8000df02:	c0 a8       	rjmp	8000df16 <osc_get_rate+0x3a>
8000df04:	e0 68 44 00 	mov	r8,17408
8000df08:	ea 18 00 ac 	orh	r8,0xac
8000df0c:	c0 58       	rjmp	8000df16 <osc_get_rate+0x3a>
8000df0e:	e0 68 80 00 	mov	r8,32768
8000df12:	c0 28       	rjmp	8000df16 <osc_get_rate+0x3a>
8000df14:	30 08       	mov	r8,0
8000df16:	10 9c       	mov	r12,r8
8000df18:	2f fd       	sub	sp,-4
8000df1a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df1e:	d7 03       	nop

8000df20 <sysclk_get_main_hz>:
8000df20:	eb cd 40 80 	pushm	r7,lr
8000df24:	1a 97       	mov	r7,sp
8000df26:	30 0c       	mov	r12,0
8000df28:	f0 1f 00 06 	mcall	8000df40 <sysclk_get_main_hz+0x20>
8000df2c:	18 99       	mov	r9,r12
8000df2e:	12 98       	mov	r8,r9
8000df30:	a3 68       	lsl	r8,0x2
8000df32:	12 08       	add	r8,r9
8000df34:	a1 78       	lsl	r8,0x1
8000df36:	12 08       	add	r8,r9
8000df38:	a1 98       	lsr	r8,0x1
8000df3a:	10 9c       	mov	r12,r8
8000df3c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df40:	80 00       	ld.sh	r0,r0[0x0]
8000df42:	de dc       	*unknown*

8000df44 <sysclk_get_cpu_hz>:
8000df44:	eb cd 40 80 	pushm	r7,lr
8000df48:	1a 97       	mov	r7,sp
8000df4a:	f0 1f 00 04 	mcall	8000df58 <sysclk_get_cpu_hz+0x14>
8000df4e:	18 98       	mov	r8,r12
8000df50:	10 9c       	mov	r12,r8
8000df52:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df56:	00 00       	add	r0,r0
8000df58:	80 00       	ld.sh	r0,r0[0x0]
8000df5a:	df 20       	acall	0x3c8

8000df5c <sysclk_get_pbb_hz>:
8000df5c:	eb cd 40 80 	pushm	r7,lr
8000df60:	1a 97       	mov	r7,sp
8000df62:	f0 1f 00 04 	mcall	8000df70 <sysclk_get_pbb_hz+0x14>
8000df66:	18 98       	mov	r8,r12
8000df68:	10 9c       	mov	r12,r8
8000df6a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df6e:	00 00       	add	r0,r0
8000df70:	80 00       	ld.sh	r0,r0[0x0]
8000df72:	df 20       	acall	0x3c8

8000df74 <sysclk_enable_hsb_module>:
8000df74:	eb cd 40 80 	pushm	r7,lr
8000df78:	1a 97       	mov	r7,sp
8000df7a:	20 1d       	sub	sp,4
8000df7c:	ef 4c ff fc 	st.w	r7[-4],r12
8000df80:	ee fb ff fc 	ld.w	r11,r7[-4]
8000df84:	30 1c       	mov	r12,1
8000df86:	f0 1f 00 03 	mcall	8000df90 <sysclk_enable_hsb_module+0x1c>
8000df8a:	2f fd       	sub	sp,-4
8000df8c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df90:	80 00       	ld.sh	r0,r0[0x0]
8000df92:	ba b8       	st.b	sp[0x3],r8

8000df94 <memories_initialization>:
8000df94:	eb cd 40 c0 	pushm	r6-r7,lr
8000df98:	1a 97       	mov	r7,sp
8000df9a:	20 2d       	sub	sp,8
8000df9c:	30 0c       	mov	r12,0
8000df9e:	f0 1f 00 42 	mcall	8000e0a4 <memories_initialization+0x110>
8000dfa2:	fe 68 10 00 	mov	r8,-126976
8000dfa6:	71 08       	ld.w	r8,r8[0x40]
8000dfa8:	ef 48 ff fc 	st.w	r7[-4],r8
8000dfac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dfb0:	30 19       	mov	r9,1
8000dfb2:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000dfb6:	ef 48 ff fc 	st.w	r7[-4],r8
8000dfba:	fe 68 10 00 	mov	r8,-126976
8000dfbe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000dfc2:	f1 49 00 40 	st.w	r8[64],r9
8000dfc6:	fe 68 10 00 	mov	r8,-126976
8000dfca:	71 48       	ld.w	r8,r8[0x50]
8000dfcc:	ef 48 ff fc 	st.w	r7[-4],r8
8000dfd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dfd4:	30 19       	mov	r9,1
8000dfd6:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000dfda:	ef 48 ff fc 	st.w	r7[-4],r8
8000dfde:	fe 68 10 00 	mov	r8,-126976
8000dfe2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000dfe6:	f1 49 00 50 	st.w	r8[80],r9
8000dfea:	fe 68 10 00 	mov	r8,-126976
8000dfee:	71 68       	ld.w	r8,r8[0x58]
8000dff0:	ef 48 ff fc 	st.w	r7[-4],r8
8000dff4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dff8:	30 19       	mov	r9,1
8000dffa:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000dffe:	ef 48 ff fc 	st.w	r7[-4],r8
8000e002:	fe 68 10 00 	mov	r8,-126976
8000e006:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e00a:	f1 49 00 58 	st.w	r8[88],r9
8000e00e:	fe 68 10 00 	mov	r8,-126976
8000e012:	70 68       	ld.w	r8,r8[0x18]
8000e014:	ef 48 ff f8 	st.w	r7[-8],r8
8000e018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e01c:	30 09       	mov	r9,0
8000e01e:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000e022:	ef 48 ff f8 	st.w	r7[-8],r8
8000e026:	fe 68 10 00 	mov	r8,-126976
8000e02a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e02e:	91 69       	st.w	r8[0x18],r9
8000e030:	fe 68 10 00 	mov	r8,-126976
8000e034:	71 58       	ld.w	r8,r8[0x54]
8000e036:	ef 48 ff fc 	st.w	r7[-4],r8
8000e03a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e03e:	30 69       	mov	r9,6
8000e040:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
8000e044:	ef 48 ff fc 	st.w	r7[-4],r8
8000e048:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e04c:	30 29       	mov	r9,2
8000e04e:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e052:	ef 48 ff fc 	st.w	r7[-4],r8
8000e056:	fe 68 10 00 	mov	r8,-126976
8000e05a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e05e:	f1 49 00 54 	st.w	r8[84],r9
8000e062:	30 6c       	mov	r12,6
8000e064:	f0 1f 00 10 	mcall	8000e0a4 <memories_initialization+0x110>
8000e068:	30 7c       	mov	r12,7
8000e06a:	f0 1f 00 10 	mcall	8000e0a8 <memories_initialization+0x114>
8000e06e:	f0 1f 00 10 	mcall	8000e0ac <memories_initialization+0x118>
8000e072:	18 98       	mov	r8,r12
8000e074:	10 96       	mov	r6,r8
8000e076:	f0 1f 00 0f 	mcall	8000e0b0 <memories_initialization+0x11c>
8000e07a:	18 98       	mov	r8,r12
8000e07c:	0c 9a       	mov	r10,r6
8000e07e:	10 9b       	mov	r11,r8
8000e080:	30 0c       	mov	r12,0
8000e082:	f0 1f 00 0d 	mcall	8000e0b4 <memories_initialization+0x120>
8000e086:	f0 1f 00 0a 	mcall	8000e0ac <memories_initialization+0x118>
8000e08a:	18 98       	mov	r8,r12
8000e08c:	10 96       	mov	r6,r8
8000e08e:	f0 1f 00 09 	mcall	8000e0b0 <memories_initialization+0x11c>
8000e092:	18 98       	mov	r8,r12
8000e094:	0c 9a       	mov	r10,r6
8000e096:	10 9b       	mov	r11,r8
8000e098:	30 1c       	mov	r12,1
8000e09a:	f0 1f 00 07 	mcall	8000e0b4 <memories_initialization+0x120>
8000e09e:	2f ed       	sub	sp,-8
8000e0a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e0a4:	80 00       	ld.sh	r0,r0[0x0]
8000e0a6:	bb 2c       	st.d	sp++,r12
8000e0a8:	80 00       	ld.sh	r0,r0[0x0]
8000e0aa:	df 74       	*unknown*
8000e0ac:	80 00       	ld.sh	r0,r0[0x0]
8000e0ae:	df 44       	*unknown*
8000e0b0:	80 00       	ld.sh	r0,r0[0x0]
8000e0b2:	df 5c       	*unknown*
8000e0b4:	80 00       	ld.sh	r0,r0[0x0]
8000e0b6:	64 98       	ld.w	r8,r2[0x24]

8000e0b8 <__avr32_udiv64>:
8000e0b8:	d4 31       	pushm	r0-r7,lr
8000e0ba:	1a 97       	mov	r7,sp
8000e0bc:	20 2d       	sub	sp,8
8000e0be:	10 9e       	mov	lr,r8
8000e0c0:	12 95       	mov	r5,r9
8000e0c2:	14 96       	mov	r6,r10
8000e0c4:	58 09       	cp.w	r9,0
8000e0c6:	c4 91       	brne	8000e158 <__avr32_udiv64+0xa0>
8000e0c8:	16 38       	cp.w	r8,r11
8000e0ca:	e0 88 00 57 	brls	8000e178 <__avr32_udiv64+0xc0>
8000e0ce:	f0 08 12 00 	clz	r8,r8
8000e0d2:	c0 d0       	breq	8000e0ec <__avr32_udiv64+0x34>
8000e0d4:	f6 08 09 4b 	lsl	r11,r11,r8
8000e0d8:	f0 09 11 20 	rsub	r9,r8,32
8000e0dc:	fc 08 09 4e 	lsl	lr,lr,r8
8000e0e0:	f4 09 0a 49 	lsr	r9,r10,r9
8000e0e4:	f4 08 09 46 	lsl	r6,r10,r8
8000e0e8:	f3 eb 10 0b 	or	r11,r9,r11
8000e0ec:	fc 05 16 10 	lsr	r5,lr,0x10
8000e0f0:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
8000e0f4:	f6 05 0d 0a 	divu	r10,r11,r5
8000e0f8:	ec 08 16 10 	lsr	r8,r6,0x10
8000e0fc:	14 99       	mov	r9,r10
8000e0fe:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e102:	b9 3a       	mul	r10,r12
8000e104:	10 3a       	cp.w	r10,r8
8000e106:	e0 88 00 0c 	brls	8000e11e <__avr32_udiv64+0x66>
8000e10a:	20 19       	sub	r9,1
8000e10c:	1c 08       	add	r8,lr
8000e10e:	10 3e       	cp.w	lr,r8
8000e110:	e0 8b 00 07 	brhi	8000e11e <__avr32_udiv64+0x66>
8000e114:	10 3a       	cp.w	r10,r8
8000e116:	f7 b9 0b 01 	subhi	r9,1
8000e11a:	f1 de eb 08 	addhi	r8,r8,lr
8000e11e:	f0 0a 01 0b 	sub	r11,r8,r10
8000e122:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e126:	f6 05 0d 0a 	divu	r10,r11,r5
8000e12a:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000e12e:	14 98       	mov	r8,r10
8000e130:	f4 0c 02 4c 	mul	r12,r10,r12
8000e134:	0c 3c       	cp.w	r12,r6
8000e136:	e0 88 00 0a 	brls	8000e14a <__avr32_udiv64+0x92>
8000e13a:	20 18       	sub	r8,1
8000e13c:	1c 06       	add	r6,lr
8000e13e:	0c 3e       	cp.w	lr,r6
8000e140:	e0 8b 00 05 	brhi	8000e14a <__avr32_udiv64+0x92>
8000e144:	0c 3c       	cp.w	r12,r6
8000e146:	f7 b8 0b 01 	subhi	r8,1
8000e14a:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000e14e:	30 0c       	mov	r12,0
8000e150:	16 9a       	mov	r10,r11
8000e152:	18 9b       	mov	r11,r12
8000e154:	2f ed       	sub	sp,-8
8000e156:	d8 32       	popm	r0-r7,pc
8000e158:	16 39       	cp.w	r9,r11
8000e15a:	e0 8b 00 51 	brhi	8000e1fc <__avr32_udiv64+0x144>
8000e15e:	f2 0c 12 00 	clz	r12,r9
8000e162:	c5 31       	brne	8000e208 <__avr32_udiv64+0x150>
8000e164:	14 38       	cp.w	r8,r10
8000e166:	5f 89       	srls	r9
8000e168:	16 35       	cp.w	r5,r11
8000e16a:	5f 38       	srlo	r8
8000e16c:	10 49       	or	r9,r8
8000e16e:	f8 09 18 00 	cp.b	r9,r12
8000e172:	c4 50       	breq	8000e1fc <__avr32_udiv64+0x144>
8000e174:	30 1b       	mov	r11,1
8000e176:	c4 58       	rjmp	8000e200 <__avr32_udiv64+0x148>
8000e178:	58 08       	cp.w	r8,0
8000e17a:	c0 51       	brne	8000e184 <__avr32_udiv64+0xcc>
8000e17c:	30 19       	mov	r9,1
8000e17e:	f2 08 0d 08 	divu	r8,r9,r8
8000e182:	10 9e       	mov	lr,r8
8000e184:	fc 08 12 00 	clz	r8,lr
8000e188:	e0 81 00 91 	brne	8000e2aa <__avr32_udiv64+0x1f2>
8000e18c:	1c 1b       	sub	r11,lr
8000e18e:	fc 05 16 10 	lsr	r5,lr,0x10
8000e192:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e196:	30 1c       	mov	r12,1
8000e198:	f6 05 0d 0a 	divu	r10,r11,r5
8000e19c:	ec 08 16 10 	lsr	r8,r6,0x10
8000e1a0:	f4 09 02 43 	mul	r3,r10,r9
8000e1a4:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e1a8:	14 9b       	mov	r11,r10
8000e1aa:	10 33       	cp.w	r3,r8
8000e1ac:	e0 88 00 0c 	brls	8000e1c4 <__avr32_udiv64+0x10c>
8000e1b0:	20 1b       	sub	r11,1
8000e1b2:	1c 08       	add	r8,lr
8000e1b4:	10 3e       	cp.w	lr,r8
8000e1b6:	e0 8b 00 07 	brhi	8000e1c4 <__avr32_udiv64+0x10c>
8000e1ba:	10 33       	cp.w	r3,r8
8000e1bc:	f7 bb 0b 01 	subhi	r11,1
8000e1c0:	f1 de eb 08 	addhi	r8,r8,lr
8000e1c4:	f0 03 01 03 	sub	r3,r8,r3
8000e1c8:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e1cc:	e6 05 0d 02 	divu	r2,r3,r5
8000e1d0:	ed e3 11 06 	or	r6,r6,r3<<0x10
8000e1d4:	04 98       	mov	r8,r2
8000e1d6:	e4 09 02 49 	mul	r9,r2,r9
8000e1da:	0c 39       	cp.w	r9,r6
8000e1dc:	e0 88 00 0a 	brls	8000e1f0 <__avr32_udiv64+0x138>
8000e1e0:	20 18       	sub	r8,1
8000e1e2:	1c 06       	add	r6,lr
8000e1e4:	0c 3e       	cp.w	lr,r6
8000e1e6:	e0 8b 00 05 	brhi	8000e1f0 <__avr32_udiv64+0x138>
8000e1ea:	0c 39       	cp.w	r9,r6
8000e1ec:	f7 b8 0b 01 	subhi	r8,1
8000e1f0:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000e1f4:	16 9a       	mov	r10,r11
8000e1f6:	18 9b       	mov	r11,r12
8000e1f8:	2f ed       	sub	sp,-8
8000e1fa:	d8 32       	popm	r0-r7,pc
8000e1fc:	30 0b       	mov	r11,0
8000e1fe:	16 9c       	mov	r12,r11
8000e200:	16 9a       	mov	r10,r11
8000e202:	18 9b       	mov	r11,r12
8000e204:	2f ed       	sub	sp,-8
8000e206:	d8 32       	popm	r0-r7,pc
8000e208:	f2 0c 09 45 	lsl	r5,r9,r12
8000e20c:	f8 0e 11 20 	rsub	lr,r12,32
8000e210:	f0 0c 09 43 	lsl	r3,r8,r12
8000e214:	f4 0e 0a 46 	lsr	r6,r10,lr
8000e218:	f0 0e 0a 48 	lsr	r8,r8,lr
8000e21c:	f6 0e 0a 4e 	lsr	lr,r11,lr
8000e220:	0a 48       	or	r8,r5
8000e222:	f0 01 16 10 	lsr	r1,r8,0x10
8000e226:	fc 01 0d 04 	divu	r4,lr,r1
8000e22a:	ee e5 ff f8 	st.d	r7[-8],r4
8000e22e:	f6 0c 09 49 	lsl	r9,r11,r12
8000e232:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000e236:	ed e9 10 09 	or	r9,r6,r9
8000e23a:	08 96       	mov	r6,r4
8000e23c:	f2 0e 16 10 	lsr	lr,r9,0x10
8000e240:	ee f4 ff f8 	ld.w	r4,r7[-8]
8000e244:	ec 05 02 4b 	mul	r11,r6,r5
8000e248:	fd e4 11 0e 	or	lr,lr,r4<<0x10
8000e24c:	1c 3b       	cp.w	r11,lr
8000e24e:	e0 88 00 07 	brls	8000e25c <__avr32_udiv64+0x1a4>
8000e252:	20 16       	sub	r6,1
8000e254:	10 0e       	add	lr,r8
8000e256:	1c 38       	cp.w	r8,lr
8000e258:	e0 88 00 6d 	brls	8000e332 <__avr32_udiv64+0x27a>
8000e25c:	16 1e       	sub	lr,r11
8000e25e:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000e262:	fc 01 0d 00 	divu	r0,lr,r1
8000e266:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000e26a:	00 9b       	mov	r11,r0
8000e26c:	e0 05 02 4e 	mul	lr,r0,r5
8000e270:	12 3e       	cp.w	lr,r9
8000e272:	e0 88 00 07 	brls	8000e280 <__avr32_udiv64+0x1c8>
8000e276:	20 1b       	sub	r11,1
8000e278:	10 09       	add	r9,r8
8000e27a:	12 38       	cp.w	r8,r9
8000e27c:	e0 88 00 55 	brls	8000e326 <__avr32_udiv64+0x26e>
8000e280:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
8000e284:	1c 19       	sub	r9,lr
8000e286:	f6 03 06 42 	mulu.d	r2,r11,r3
8000e28a:	06 39       	cp.w	r9,r3
8000e28c:	c0 93       	brcs	8000e29e <__avr32_udiv64+0x1e6>
8000e28e:	5f 09       	sreq	r9
8000e290:	f4 0c 09 4c 	lsl	r12,r10,r12
8000e294:	04 3c       	cp.w	r12,r2
8000e296:	5f 38       	srlo	r8
8000e298:	f3 e8 00 08 	and	r8,r9,r8
8000e29c:	c0 20       	breq	8000e2a0 <__avr32_udiv64+0x1e8>
8000e29e:	20 1b       	sub	r11,1
8000e2a0:	30 0c       	mov	r12,0
8000e2a2:	16 9a       	mov	r10,r11
8000e2a4:	18 9b       	mov	r11,r12
8000e2a6:	2f ed       	sub	sp,-8
8000e2a8:	d8 32       	popm	r0-r7,pc
8000e2aa:	f6 08 09 49 	lsl	r9,r11,r8
8000e2ae:	fc 08 09 4e 	lsl	lr,lr,r8
8000e2b2:	f0 01 11 20 	rsub	r1,r8,32
8000e2b6:	fc 05 16 10 	lsr	r5,lr,0x10
8000e2ba:	f4 01 0a 42 	lsr	r2,r10,r1
8000e2be:	f6 01 0a 41 	lsr	r1,r11,r1
8000e2c2:	12 42       	or	r2,r9
8000e2c4:	e2 05 0d 00 	divu	r0,r1,r5
8000e2c8:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e2cc:	e4 06 16 10 	lsr	r6,r2,0x10
8000e2d0:	00 93       	mov	r3,r0
8000e2d2:	ed e1 11 06 	or	r6,r6,r1<<0x10
8000e2d6:	e0 09 02 4c 	mul	r12,r0,r9
8000e2da:	0c 3c       	cp.w	r12,r6
8000e2dc:	e0 88 00 07 	brls	8000e2ea <__avr32_udiv64+0x232>
8000e2e0:	20 13       	sub	r3,1
8000e2e2:	1c 06       	add	r6,lr
8000e2e4:	0c 3e       	cp.w	lr,r6
8000e2e6:	e0 88 00 2c 	brls	8000e33e <__avr32_udiv64+0x286>
8000e2ea:	ec 0c 01 01 	sub	r1,r6,r12
8000e2ee:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000e2f2:	e2 05 0d 00 	divu	r0,r1,r5
8000e2f6:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000e2fa:	00 9c       	mov	r12,r0
8000e2fc:	e0 09 02 41 	mul	r1,r0,r9
8000e300:	16 31       	cp.w	r1,r11
8000e302:	e0 88 00 0c 	brls	8000e31a <__avr32_udiv64+0x262>
8000e306:	20 1c       	sub	r12,1
8000e308:	1c 0b       	add	r11,lr
8000e30a:	16 3e       	cp.w	lr,r11
8000e30c:	e0 8b 00 07 	brhi	8000e31a <__avr32_udiv64+0x262>
8000e310:	16 31       	cp.w	r1,r11
8000e312:	f7 bc 0b 01 	subhi	r12,1
8000e316:	f7 de eb 0b 	addhi	r11,r11,lr
8000e31a:	f4 08 09 46 	lsl	r6,r10,r8
8000e31e:	02 1b       	sub	r11,r1
8000e320:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
8000e324:	c3 ab       	rjmp	8000e198 <__avr32_udiv64+0xe0>
8000e326:	12 3e       	cp.w	lr,r9
8000e328:	f3 d8 eb 09 	addhi	r9,r9,r8
8000e32c:	f7 bb 0b 01 	subhi	r11,1
8000e330:	ca 8b       	rjmp	8000e280 <__avr32_udiv64+0x1c8>
8000e332:	1c 3b       	cp.w	r11,lr
8000e334:	f7 b6 0b 01 	subhi	r6,1
8000e338:	fd d8 eb 0e 	addhi	lr,lr,r8
8000e33c:	c9 0b       	rjmp	8000e25c <__avr32_udiv64+0x1a4>
8000e33e:	0c 3c       	cp.w	r12,r6
8000e340:	f7 b3 0b 01 	subhi	r3,1
8000e344:	ed de eb 06 	addhi	r6,r6,lr
8000e348:	cd 1b       	rjmp	8000e2ea <__avr32_udiv64+0x232>

8000e34a <memcpy>:
8000e34a:	58 8a       	cp.w	r10,8
8000e34c:	c2 f5       	brlt	8000e3aa <memcpy+0x60>
8000e34e:	f9 eb 10 09 	or	r9,r12,r11
8000e352:	e2 19 00 03 	andl	r9,0x3,COH
8000e356:	e0 81 00 97 	brne	8000e484 <memcpy+0x13a>
8000e35a:	e0 4a 00 20 	cp.w	r10,32
8000e35e:	c3 b4       	brge	8000e3d4 <memcpy+0x8a>
8000e360:	f4 08 14 02 	asr	r8,r10,0x2
8000e364:	f0 09 11 08 	rsub	r9,r8,8
8000e368:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000e36c:	76 69       	ld.w	r9,r11[0x18]
8000e36e:	99 69       	st.w	r12[0x18],r9
8000e370:	76 59       	ld.w	r9,r11[0x14]
8000e372:	99 59       	st.w	r12[0x14],r9
8000e374:	76 49       	ld.w	r9,r11[0x10]
8000e376:	99 49       	st.w	r12[0x10],r9
8000e378:	76 39       	ld.w	r9,r11[0xc]
8000e37a:	99 39       	st.w	r12[0xc],r9
8000e37c:	76 29       	ld.w	r9,r11[0x8]
8000e37e:	99 29       	st.w	r12[0x8],r9
8000e380:	76 19       	ld.w	r9,r11[0x4]
8000e382:	99 19       	st.w	r12[0x4],r9
8000e384:	76 09       	ld.w	r9,r11[0x0]
8000e386:	99 09       	st.w	r12[0x0],r9
8000e388:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000e38c:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000e390:	e0 1a 00 03 	andl	r10,0x3
8000e394:	f4 0a 11 04 	rsub	r10,r10,4
8000e398:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000e39c:	17 a9       	ld.ub	r9,r11[0x2]
8000e39e:	b0 a9       	st.b	r8[0x2],r9
8000e3a0:	17 99       	ld.ub	r9,r11[0x1]
8000e3a2:	b0 99       	st.b	r8[0x1],r9
8000e3a4:	17 89       	ld.ub	r9,r11[0x0]
8000e3a6:	b0 89       	st.b	r8[0x0],r9
8000e3a8:	5e fc       	retal	r12
8000e3aa:	f4 0a 11 09 	rsub	r10,r10,9
8000e3ae:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000e3b2:	17 f9       	ld.ub	r9,r11[0x7]
8000e3b4:	b8 f9       	st.b	r12[0x7],r9
8000e3b6:	17 e9       	ld.ub	r9,r11[0x6]
8000e3b8:	b8 e9       	st.b	r12[0x6],r9
8000e3ba:	17 d9       	ld.ub	r9,r11[0x5]
8000e3bc:	b8 d9       	st.b	r12[0x5],r9
8000e3be:	17 c9       	ld.ub	r9,r11[0x4]
8000e3c0:	b8 c9       	st.b	r12[0x4],r9
8000e3c2:	17 b9       	ld.ub	r9,r11[0x3]
8000e3c4:	b8 b9       	st.b	r12[0x3],r9
8000e3c6:	17 a9       	ld.ub	r9,r11[0x2]
8000e3c8:	b8 a9       	st.b	r12[0x2],r9
8000e3ca:	17 99       	ld.ub	r9,r11[0x1]
8000e3cc:	b8 99       	st.b	r12[0x1],r9
8000e3ce:	17 89       	ld.ub	r9,r11[0x0]
8000e3d0:	b8 89       	st.b	r12[0x0],r9
8000e3d2:	5e fc       	retal	r12
8000e3d4:	eb cd 40 c0 	pushm	r6-r7,lr
8000e3d8:	18 99       	mov	r9,r12
8000e3da:	22 0a       	sub	r10,32
8000e3dc:	b7 07       	ld.d	r6,r11++
8000e3de:	b3 26       	st.d	r9++,r6
8000e3e0:	b7 07       	ld.d	r6,r11++
8000e3e2:	b3 26       	st.d	r9++,r6
8000e3e4:	b7 07       	ld.d	r6,r11++
8000e3e6:	b3 26       	st.d	r9++,r6
8000e3e8:	b7 07       	ld.d	r6,r11++
8000e3ea:	b3 26       	st.d	r9++,r6
8000e3ec:	22 0a       	sub	r10,32
8000e3ee:	cf 74       	brge	8000e3dc <memcpy+0x92>
8000e3f0:	2f 0a       	sub	r10,-16
8000e3f2:	c0 65       	brlt	8000e3fe <memcpy+0xb4>
8000e3f4:	b7 07       	ld.d	r6,r11++
8000e3f6:	b3 26       	st.d	r9++,r6
8000e3f8:	b7 07       	ld.d	r6,r11++
8000e3fa:	b3 26       	st.d	r9++,r6
8000e3fc:	21 0a       	sub	r10,16
8000e3fe:	5c 3a       	neg	r10
8000e400:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000e404:	d7 03       	nop
8000e406:	d7 03       	nop
8000e408:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000e40c:	f3 66 00 0e 	st.b	r9[14],r6
8000e410:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000e414:	f3 66 00 0d 	st.b	r9[13],r6
8000e418:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000e41c:	f3 66 00 0c 	st.b	r9[12],r6
8000e420:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000e424:	f3 66 00 0b 	st.b	r9[11],r6
8000e428:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000e42c:	f3 66 00 0a 	st.b	r9[10],r6
8000e430:	f7 36 00 09 	ld.ub	r6,r11[9]
8000e434:	f3 66 00 09 	st.b	r9[9],r6
8000e438:	f7 36 00 08 	ld.ub	r6,r11[8]
8000e43c:	f3 66 00 08 	st.b	r9[8],r6
8000e440:	f7 36 00 07 	ld.ub	r6,r11[7]
8000e444:	f3 66 00 07 	st.b	r9[7],r6
8000e448:	f7 36 00 06 	ld.ub	r6,r11[6]
8000e44c:	f3 66 00 06 	st.b	r9[6],r6
8000e450:	f7 36 00 05 	ld.ub	r6,r11[5]
8000e454:	f3 66 00 05 	st.b	r9[5],r6
8000e458:	f7 36 00 04 	ld.ub	r6,r11[4]
8000e45c:	f3 66 00 04 	st.b	r9[4],r6
8000e460:	f7 36 00 03 	ld.ub	r6,r11[3]
8000e464:	f3 66 00 03 	st.b	r9[3],r6
8000e468:	f7 36 00 02 	ld.ub	r6,r11[2]
8000e46c:	f3 66 00 02 	st.b	r9[2],r6
8000e470:	f7 36 00 01 	ld.ub	r6,r11[1]
8000e474:	f3 66 00 01 	st.b	r9[1],r6
8000e478:	f7 36 00 00 	ld.ub	r6,r11[0]
8000e47c:	f3 66 00 00 	st.b	r9[0],r6
8000e480:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e484:	20 1a       	sub	r10,1
8000e486:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000e48a:	f8 0a 0b 09 	st.b	r12[r10],r9
8000e48e:	cf b1       	brne	8000e484 <memcpy+0x13a>
8000e490:	5e fc       	retal	r12

8000e492 <memset>:
8000e492:	18 98       	mov	r8,r12
8000e494:	c0 38       	rjmp	8000e49a <memset+0x8>
8000e496:	10 cb       	st.b	r8++,r11
8000e498:	20 1a       	sub	r10,1
8000e49a:	58 0a       	cp.w	r10,0
8000e49c:	cf d1       	brne	8000e496 <memset+0x4>
8000e49e:	5e fc       	retal	r12

Disassembly of section .exception:

8000e600 <_evba>:
8000e600:	c0 08       	rjmp	8000e600 <_evba>
	...

8000e604 <_handle_TLB_Multiple_Hit>:
8000e604:	c0 08       	rjmp	8000e604 <_handle_TLB_Multiple_Hit>
	...

8000e608 <_handle_Bus_Error_Data_Fetch>:
8000e608:	c0 08       	rjmp	8000e608 <_handle_Bus_Error_Data_Fetch>
	...

8000e60c <_handle_Bus_Error_Instruction_Fetch>:
8000e60c:	c0 08       	rjmp	8000e60c <_handle_Bus_Error_Instruction_Fetch>
	...

8000e610 <_handle_NMI>:
8000e610:	c0 08       	rjmp	8000e610 <_handle_NMI>
	...

8000e614 <_handle_Instruction_Address>:
8000e614:	c0 08       	rjmp	8000e614 <_handle_Instruction_Address>
	...

8000e618 <_handle_ITLB_Protection>:
8000e618:	c0 08       	rjmp	8000e618 <_handle_ITLB_Protection>
	...

8000e61c <_handle_Breakpoint>:
8000e61c:	c0 08       	rjmp	8000e61c <_handle_Breakpoint>
	...

8000e620 <_handle_Illegal_Opcode>:
8000e620:	c0 08       	rjmp	8000e620 <_handle_Illegal_Opcode>
	...

8000e624 <_handle_Unimplemented_Instruction>:
8000e624:	c0 08       	rjmp	8000e624 <_handle_Unimplemented_Instruction>
	...

8000e628 <_handle_Privilege_Violation>:
8000e628:	c0 08       	rjmp	8000e628 <_handle_Privilege_Violation>
	...

8000e62c <_handle_Floating_Point>:
8000e62c:	c0 08       	rjmp	8000e62c <_handle_Floating_Point>
	...

8000e630 <_handle_Coprocessor_Absent>:
8000e630:	c0 08       	rjmp	8000e630 <_handle_Coprocessor_Absent>
	...

8000e634 <_handle_Data_Address_Read>:
8000e634:	c0 08       	rjmp	8000e634 <_handle_Data_Address_Read>
	...

8000e638 <_handle_Data_Address_Write>:
8000e638:	c0 08       	rjmp	8000e638 <_handle_Data_Address_Write>
	...

8000e63c <_handle_DTLB_Protection_Read>:
8000e63c:	c0 08       	rjmp	8000e63c <_handle_DTLB_Protection_Read>
	...

8000e640 <_handle_DTLB_Protection_Write>:
8000e640:	c0 08       	rjmp	8000e640 <_handle_DTLB_Protection_Write>
	...

8000e644 <_handle_DTLB_Modified>:
8000e644:	c0 08       	rjmp	8000e644 <_handle_DTLB_Modified>
	...

8000e650 <_handle_ITLB_Miss>:
8000e650:	c0 08       	rjmp	8000e650 <_handle_ITLB_Miss>
	...

8000e660 <_handle_DTLB_Miss_Read>:
8000e660:	c0 08       	rjmp	8000e660 <_handle_DTLB_Miss_Read>
	...

8000e670 <_handle_DTLB_Miss_Write>:
8000e670:	c0 08       	rjmp	8000e670 <_handle_DTLB_Miss_Write>
	...

8000e700 <_handle_Supervisor_Call>:
8000e700:	c0 08       	rjmp	8000e700 <_handle_Supervisor_Call>
8000e702:	d7 03       	nop

8000e704 <_int0>:
8000e704:	30 0c       	mov	r12,0
8000e706:	fe b0 d1 c9 	rcall	80008a98 <_get_interrupt_handler>
8000e70a:	58 0c       	cp.w	r12,0
8000e70c:	f8 0f 17 10 	movne	pc,r12
8000e710:	d6 03       	rete

8000e712 <_int1>:
8000e712:	30 1c       	mov	r12,1
8000e714:	fe b0 d1 c2 	rcall	80008a98 <_get_interrupt_handler>
8000e718:	58 0c       	cp.w	r12,0
8000e71a:	f8 0f 17 10 	movne	pc,r12
8000e71e:	d6 03       	rete

8000e720 <_int2>:
8000e720:	30 2c       	mov	r12,2
8000e722:	fe b0 d1 bb 	rcall	80008a98 <_get_interrupt_handler>
8000e726:	58 0c       	cp.w	r12,0
8000e728:	f8 0f 17 10 	movne	pc,r12
8000e72c:	d6 03       	rete

8000e72e <_int3>:
8000e72e:	30 3c       	mov	r12,3
8000e730:	fe b0 d1 b4 	rcall	80008a98 <_get_interrupt_handler>
8000e734:	58 0c       	cp.w	r12,0
8000e736:	f8 0f 17 10 	movne	pc,r12
8000e73a:	d6 03       	rete
8000e73c:	d7 03       	nop
8000e73e:	d7 03       	nop
8000e740:	d7 03       	nop
8000e742:	d7 03       	nop
8000e744:	d7 03       	nop
8000e746:	d7 03       	nop
8000e748:	d7 03       	nop
8000e74a:	d7 03       	nop
8000e74c:	d7 03       	nop
8000e74e:	d7 03       	nop
8000e750:	d7 03       	nop
8000e752:	d7 03       	nop
8000e754:	d7 03       	nop
8000e756:	d7 03       	nop
8000e758:	d7 03       	nop
8000e75a:	d7 03       	nop
8000e75c:	d7 03       	nop
8000e75e:	d7 03       	nop
8000e760:	d7 03       	nop
8000e762:	d7 03       	nop
8000e764:	d7 03       	nop
8000e766:	d7 03       	nop
8000e768:	d7 03       	nop
8000e76a:	d7 03       	nop
8000e76c:	d7 03       	nop
8000e76e:	d7 03       	nop
8000e770:	d7 03       	nop
8000e772:	d7 03       	nop
8000e774:	d7 03       	nop
8000e776:	d7 03       	nop
8000e778:	d7 03       	nop
8000e77a:	d7 03       	nop
8000e77c:	d7 03       	nop
8000e77e:	d7 03       	nop
8000e780:	d7 03       	nop
8000e782:	d7 03       	nop
8000e784:	d7 03       	nop
8000e786:	d7 03       	nop
8000e788:	d7 03       	nop
8000e78a:	d7 03       	nop
8000e78c:	d7 03       	nop
8000e78e:	d7 03       	nop
8000e790:	d7 03       	nop
8000e792:	d7 03       	nop
8000e794:	d7 03       	nop
8000e796:	d7 03       	nop
8000e798:	d7 03       	nop
8000e79a:	d7 03       	nop
8000e79c:	d7 03       	nop
8000e79e:	d7 03       	nop
8000e7a0:	d7 03       	nop
8000e7a2:	d7 03       	nop
8000e7a4:	d7 03       	nop
8000e7a6:	d7 03       	nop
8000e7a8:	d7 03       	nop
8000e7aa:	d7 03       	nop
8000e7ac:	d7 03       	nop
8000e7ae:	d7 03       	nop
8000e7b0:	d7 03       	nop
8000e7b2:	d7 03       	nop
8000e7b4:	d7 03       	nop
8000e7b6:	d7 03       	nop
8000e7b8:	d7 03       	nop
8000e7ba:	d7 03       	nop
8000e7bc:	d7 03       	nop
8000e7be:	d7 03       	nop
8000e7c0:	d7 03       	nop
8000e7c2:	d7 03       	nop
8000e7c4:	d7 03       	nop
8000e7c6:	d7 03       	nop
8000e7c8:	d7 03       	nop
8000e7ca:	d7 03       	nop
8000e7cc:	d7 03       	nop
8000e7ce:	d7 03       	nop
8000e7d0:	d7 03       	nop
8000e7d2:	d7 03       	nop
8000e7d4:	d7 03       	nop
8000e7d6:	d7 03       	nop
8000e7d8:	d7 03       	nop
8000e7da:	d7 03       	nop
8000e7dc:	d7 03       	nop
8000e7de:	d7 03       	nop
8000e7e0:	d7 03       	nop
8000e7e2:	d7 03       	nop
8000e7e4:	d7 03       	nop
8000e7e6:	d7 03       	nop
8000e7e8:	d7 03       	nop
8000e7ea:	d7 03       	nop
8000e7ec:	d7 03       	nop
8000e7ee:	d7 03       	nop
8000e7f0:	d7 03       	nop
8000e7f2:	d7 03       	nop
8000e7f4:	d7 03       	nop
8000e7f6:	d7 03       	nop
8000e7f8:	d7 03       	nop
8000e7fa:	d7 03       	nop
8000e7fc:	d7 03       	nop
8000e7fe:	d7 03       	nop
