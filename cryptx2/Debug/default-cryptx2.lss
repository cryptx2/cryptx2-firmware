
default-cryptx2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c7dc  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000e800  8000e800  0000ec00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000004c0  8000ea00  8000ea00  0000ee00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         0000023c  00000008  8000eec0  0000f408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  00000244  8000f0fc  0000f644  2**0
                  ALLOC
  8 .bss          00000da0  00000248  00000248  00000000  2**2
                  ALLOC
  9 .heap         0000e018  00000fe8  00000fe8  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000f644  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001368  00000000  00000000  0000f678  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00002a56  00000000  00000000  000109e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00025ebb  00000000  00000000  00013436  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000035d4  00000000  00000000  000392f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007642  00000000  00000000  0003c8c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003b44  00000000  00000000  00043f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a0d8  00000000  00000000  00047a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00005d04  00000000  00000000  00051b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .flash_nvram  000000c4  8003fe00  8000f0fc  0000fa00  2**2
                  ALLOC
 21 .debug_ranges 00001328  00000000  00000000  00057828  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	b6 ec       	st.b	r11[0x6],r12

Disassembly of section .text:

80002008 <crcInit>:
 * Returns:		None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 3d       	sub	sp,12


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
80002010:	30 08       	mov	r8,0
80002012:	ef 48 ff f8 	st.w	r7[-8],r8
80002016:	c3 78       	rjmp	80002084 <crcInit+0x7c>
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
80002018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000201c:	5c 88       	casts.h	r8
8000201e:	a9 68       	lsl	r8,0x8
80002020:	ef 58 ff f6 	st.h	r7[-10],r8

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
80002024:	30 88       	mov	r8,8
80002026:	ef 68 ff ff 	st.b	r7[-1],r8
8000202a:	c1 b8       	rjmp	80002060 <crcInit+0x58>
        {
            /*
             * Try to divide the current data bit.
             */			
            if (remainder & TOPBIT)
8000202c:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80002030:	30 08       	mov	r8,0
80002032:	f0 09 19 00 	cp.h	r9,r8
80002036:	c0 b4       	brge	8000204c <crcInit+0x44>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
80002038:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000203c:	a1 78       	lsl	r8,0x1
8000203e:	5c 88       	casts.h	r8
80002040:	ec 18 10 21 	eorl	r8,0x1021
80002044:	5c 88       	casts.h	r8
80002046:	ef 58 ff f6 	st.h	r7[-10],r8
8000204a:	c0 68       	rjmp	80002056 <crcInit+0x4e>
            }
            else
            {
                remainder = (remainder << 1);
8000204c:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002050:	a1 78       	lsl	r8,0x1
80002052:	ef 58 ff f6 	st.h	r7[-10],r8
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
80002056:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000205a:	20 18       	sub	r8,1
8000205c:	ef 68 ff ff 	st.b	r7[-1],r8
80002060:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002064:	30 08       	mov	r8,0
80002066:	f0 09 18 00 	cp.b	r9,r8
8000206a:	ce 11       	brne	8000202c <crcInit+0x24>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
8000206c:	ee fa ff f8 	ld.w	r10,r7[-8]
80002070:	48 a9       	lddpc	r9,80002098 <crcInit+0x90>
80002072:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002076:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
8000207a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000207e:	2f f8       	sub	r8,-1
80002080:	ef 48 ff f8 	st.w	r7[-8],r8
80002084:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002088:	e0 48 00 ff 	cp.w	r8,255
8000208c:	fe 9a ff c6 	brle	80002018 <crcInit+0x10>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
80002090:	2f dd       	sub	sp,-12
80002092:	e3 cd 80 80 	ldm	sp++,r7,pc
80002096:	00 00       	add	r0,r0
80002098:	00 00       	add	r0,r0
8000209a:	08 1a       	sub	r10,r4

8000209c <crcFast>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
8000209c:	eb cd 40 80 	pushm	r7,lr
800020a0:	1a 97       	mov	r7,sp
800020a2:	20 4d       	sub	sp,16
800020a4:	ef 4c ff f4 	st.w	r7[-12],r12
800020a8:	ef 4b ff f0 	st.w	r7[-16],r11
    crc	           remainder = INITIAL_REMAINDER;
800020ac:	3f f8       	mov	r8,-1
800020ae:	ef 58 ff f8 	st.h	r7[-8],r8


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
800020b2:	30 08       	mov	r8,0
800020b4:	ef 48 ff fc 	st.w	r7[-4],r8
800020b8:	c2 68       	rjmp	80002104 <crcFast+0x68>
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
800020ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800020c2:	f2 08 00 08 	add	r8,r9,r8
800020c6:	11 89       	ld.ub	r9,r8[0x0]
800020c8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800020cc:	a9 88       	lsr	r8,0x8
800020ce:	5c 88       	casts.h	r8
800020d0:	5c 58       	castu.b	r8
800020d2:	f3 e8 20 08 	eor	r8,r9,r8
800020d6:	ef 68 ff fb 	st.b	r7[-5],r8
  		remainder = crcTable[data] ^ (remainder << 8);
800020da:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800020de:	49 08       	lddpc	r8,8000211c <crcFast+0x80>
800020e0:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800020e4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800020e8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800020ec:	a9 68       	lsl	r8,0x8
800020ee:	5c 88       	casts.h	r8
800020f0:	f3 e8 20 08 	eor	r8,r9,r8
800020f4:	5c 88       	casts.h	r8
800020f6:	ef 58 ff f8 	st.h	r7[-8],r8


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
800020fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020fe:	2f f8       	sub	r8,-1
80002100:	ef 48 ff fc 	st.w	r7[-4],r8
80002104:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002108:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000210c:	10 39       	cp.w	r9,r8
8000210e:	cd 65       	brlt	800020ba <crcFast+0x1e>
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
80002110:	ef 08 ff f8 	ld.sh	r8,r7[-8]

}   /* crcFast() */
80002114:	10 9c       	mov	r12,r8
80002116:	2f cd       	sub	sp,-16
80002118:	e3 cd 80 80 	ldm	sp++,r7,pc
8000211c:	00 00       	add	r0,r0
8000211e:	08 1a       	sub	r10,r4

80002120 <hmac_sha256_init>:

/* HMAC-SHA-256 functions */

void hmac_sha256_init(hmac_sha256_ctx *ctx, const unsigned char *key,
                      unsigned int key_size)
{
80002120:	eb cd 40 80 	pushm	r7,lr
80002124:	1a 97       	mov	r7,sp
80002126:	20 fd       	sub	sp,60
80002128:	ef 4c ff cc 	st.w	r7[-52],r12
8000212c:	ef 4b ff c8 	st.w	r7[-56],r11
80002130:	ef 4a ff c4 	st.w	r7[-60],r10

    const unsigned char *key_used;
    unsigned char key_temp[SHA256_DIGEST_SIZE];
    int i;

    if (key_size == SHA256_BLOCK_SIZE) {
80002134:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002138:	e0 48 00 40 	cp.w	r8,64
8000213c:	c0 91       	brne	8000214e <hmac_sha256_init+0x2e>
        key_used = key;
8000213e:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002142:	ef 48 ff f8 	st.w	r7[-8],r8
        num = SHA256_BLOCK_SIZE;
80002146:	34 08       	mov	r8,64
80002148:	ef 48 ff f4 	st.w	r7[-12],r8
8000214c:	c4 28       	rjmp	800021d0 <hmac_sha256_init+0xb0>
    } else {
        if (key_size > SHA256_BLOCK_SIZE){
8000214e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002152:	e0 48 00 40 	cp.w	r8,64
80002156:	e0 88 00 13 	brls	8000217c <hmac_sha256_init+0x5c>
            num = SHA256_DIGEST_SIZE;
8000215a:	32 08       	mov	r8,32
8000215c:	ef 48 ff f4 	st.w	r7[-12],r8
            sha256(key, key_size, key_temp);
80002160:	ee c8 00 30 	sub	r8,r7,48
80002164:	10 9a       	mov	r10,r8
80002166:	ee fb ff c4 	ld.w	r11,r7[-60]
8000216a:	ee fc ff c8 	ld.w	r12,r7[-56]
8000216e:	f0 1f 00 54 	mcall	800022bc <hmac_sha256_init+0x19c>
            key_used = key_temp;
80002172:	ee c8 00 30 	sub	r8,r7,48
80002176:	ef 48 ff f8 	st.w	r7[-8],r8
8000217a:	c0 98       	rjmp	8000218c <hmac_sha256_init+0x6c>
        } else { /* key_size > SHA256_BLOCK_SIZE */
            key_used = key;
8000217c:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002180:	ef 48 ff f8 	st.w	r7[-8],r8
            num = key_size;
80002184:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002188:	ef 48 ff f4 	st.w	r7[-12],r8
        }
        fill = SHA256_BLOCK_SIZE - num;
8000218c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002190:	f0 08 11 40 	rsub	r8,r8,64
80002194:	ef 48 ff f0 	st.w	r7[-16],r8

        memset(ctx->block_ipad + num, 0x36, fill);
80002198:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000219c:	f0 c9 fd 60 	sub	r9,r8,-672
800021a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021a4:	f2 08 00 08 	add	r8,r9,r8
800021a8:	ee fa ff f0 	ld.w	r10,r7[-16]
800021ac:	33 6b       	mov	r11,54
800021ae:	10 9c       	mov	r12,r8
800021b0:	f0 1f 00 44 	mcall	800022c0 <hmac_sha256_init+0x1a0>
        memset(ctx->block_opad + num, 0x5c, fill);
800021b4:	ee f8 ff cc 	ld.w	r8,r7[-52]
800021b8:	f0 c9 fd 20 	sub	r9,r8,-736
800021bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021c0:	f2 08 00 08 	add	r8,r9,r8
800021c4:	ee fa ff f0 	ld.w	r10,r7[-16]
800021c8:	35 cb       	mov	r11,92
800021ca:	10 9c       	mov	r12,r8
800021cc:	f0 1f 00 3d 	mcall	800022c0 <hmac_sha256_init+0x1a0>
    }

    for (i = 0; i < (int) num; i++) {
800021d0:	30 08       	mov	r8,0
800021d2:	ef 48 ff fc 	st.w	r7[-4],r8
800021d6:	c2 a8       	rjmp	8000222a <hmac_sha256_init+0x10a>
        ctx->block_ipad[i] = key_used[i] ^ 0x36;
800021d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800021dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021e0:	ee fa ff f8 	ld.w	r10,r7[-8]
800021e4:	f4 08 00 08 	add	r8,r10,r8
800021e8:	11 88       	ld.ub	r8,r8[0x0]
800021ea:	ec 18 00 36 	eorl	r8,0x36
800021ee:	5c 58       	castu.b	r8
800021f0:	ee fa ff cc 	ld.w	r10,r7[-52]
800021f4:	f4 09 00 09 	add	r9,r10,r9
800021f8:	f3 68 02 a0 	st.b	r9[672],r8
        ctx->block_opad[i] = key_used[i] ^ 0x5c;
800021fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002200:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002204:	ee fa ff f8 	ld.w	r10,r7[-8]
80002208:	f4 08 00 08 	add	r8,r10,r8
8000220c:	11 88       	ld.ub	r8,r8[0x0]
8000220e:	ec 18 00 5c 	eorl	r8,0x5c
80002212:	5c 58       	castu.b	r8
80002214:	ee fa ff cc 	ld.w	r10,r7[-52]
80002218:	f4 09 00 09 	add	r9,r10,r9
8000221c:	f3 68 02 e0 	st.b	r9[736],r8

        memset(ctx->block_ipad + num, 0x36, fill);
        memset(ctx->block_opad + num, 0x5c, fill);
    }

    for (i = 0; i < (int) num; i++) {
80002220:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002224:	2f f8       	sub	r8,-1
80002226:	ef 48 ff fc 	st.w	r7[-4],r8
8000222a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000222e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002232:	10 39       	cp.w	r9,r8
80002234:	fe 99 ff d2 	brgt	800021d8 <hmac_sha256_init+0xb8>
        ctx->block_ipad[i] = key_used[i] ^ 0x36;
        ctx->block_opad[i] = key_used[i] ^ 0x5c;
    }

    sha256_init(&ctx->ctx_inside);
80002238:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000223c:	10 9c       	mov	r12,r8
8000223e:	f0 1f 00 22 	mcall	800022c4 <hmac_sha256_init+0x1a4>
    sha256_update(&ctx->ctx_inside, ctx->block_ipad, SHA256_BLOCK_SIZE);
80002242:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002246:	f0 c9 fd 60 	sub	r9,r8,-672
8000224a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000224e:	34 0a       	mov	r10,64
80002250:	12 9b       	mov	r11,r9
80002252:	10 9c       	mov	r12,r8
80002254:	f0 1f 00 1d 	mcall	800022c8 <hmac_sha256_init+0x1a8>

    sha256_init(&ctx->ctx_outside);
80002258:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000225c:	f0 c8 ff 58 	sub	r8,r8,-168
80002260:	10 9c       	mov	r12,r8
80002262:	f0 1f 00 19 	mcall	800022c4 <hmac_sha256_init+0x1a4>
    sha256_update(&ctx->ctx_outside, ctx->block_opad,
80002266:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000226a:	f0 c9 fd 20 	sub	r9,r8,-736
8000226e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002272:	f0 c8 ff 58 	sub	r8,r8,-168
80002276:	34 0a       	mov	r10,64
80002278:	12 9b       	mov	r11,r9
8000227a:	10 9c       	mov	r12,r8
8000227c:	f0 1f 00 13 	mcall	800022c8 <hmac_sha256_init+0x1a8>
                  SHA256_BLOCK_SIZE);

    /* for hmac_reinit */
    memcpy(&ctx->ctx_inside_reinit, &ctx->ctx_inside,
80002280:	ee f9 ff cc 	ld.w	r9,r7[-52]
80002284:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002288:	f0 c8 fe b0 	sub	r8,r8,-336
8000228c:	e0 6a 00 a8 	mov	r10,168
80002290:	12 9b       	mov	r11,r9
80002292:	10 9c       	mov	r12,r8
80002294:	f0 1f 00 0e 	mcall	800022cc <hmac_sha256_init+0x1ac>
           sizeof(sha256_ctx));
    memcpy(&ctx->ctx_outside_reinit, &ctx->ctx_outside,
80002298:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000229c:	f0 c9 ff 58 	sub	r9,r8,-168
800022a0:	ee f8 ff cc 	ld.w	r8,r7[-52]
800022a4:	f0 c8 fe 08 	sub	r8,r8,-504
800022a8:	e0 6a 00 a8 	mov	r10,168
800022ac:	12 9b       	mov	r11,r9
800022ae:	10 9c       	mov	r12,r8
800022b0:	f0 1f 00 07 	mcall	800022cc <hmac_sha256_init+0x1ac>
           sizeof(sha256_ctx));
}
800022b4:	2f 1d       	sub	sp,-60
800022b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800022ba:	00 00       	add	r0,r0
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	27 5c       	sub	r12,117
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	e7 d6 80 00 	ldswp.w	r6,r3[0]
800022c6:	27 b0       	sub	r0,123
800022c8:	80 00       	ld.sh	r0,r0[0x0]
800022ca:	28 0c       	sub	r12,-128
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	e6 8e eb cd 	brqs	800dfa68 <Stored_values_flash+0x9fc68>

800022d0 <hmac_sha256_update>:
           sizeof(sha256_ctx));
}

void hmac_sha256_update(hmac_sha256_ctx *ctx, const unsigned char *message,
                        unsigned int message_len)
{
800022d0:	eb cd 40 80 	pushm	r7,lr
800022d4:	1a 97       	mov	r7,sp
800022d6:	20 3d       	sub	sp,12
800022d8:	ef 4c ff fc 	st.w	r7[-4],r12
800022dc:	ef 4b ff f8 	st.w	r7[-8],r11
800022e0:	ef 4a ff f4 	st.w	r7[-12],r10
    sha256_update(&ctx->ctx_inside, message, message_len);
800022e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022e8:	ee fa ff f4 	ld.w	r10,r7[-12]
800022ec:	ee fb ff f8 	ld.w	r11,r7[-8]
800022f0:	10 9c       	mov	r12,r8
800022f2:	f0 1f 00 03 	mcall	800022fc <hmac_sha256_update+0x2c>
}
800022f6:	2f dd       	sub	sp,-12
800022f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800022fc:	80 00       	ld.sh	r0,r0[0x0]
800022fe:	28 0c       	sub	r12,-128

80002300 <hmac_sha256_final>:

void hmac_sha256_final(hmac_sha256_ctx *ctx, unsigned char *mac,
                       unsigned int mac_size)
{
80002300:	eb cd 40 80 	pushm	r7,lr
80002304:	1a 97       	mov	r7,sp
80002306:	21 3d       	sub	sp,76
80002308:	ef 4c ff bc 	st.w	r7[-68],r12
8000230c:	ef 4b ff b8 	st.w	r7[-72],r11
80002310:	ef 4a ff b4 	st.w	r7[-76],r10
    unsigned char digest_inside[SHA256_DIGEST_SIZE];
    unsigned char mac_temp[SHA256_DIGEST_SIZE];

    sha256_final(&ctx->ctx_inside, digest_inside);
80002314:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002318:	ee c9 00 20 	sub	r9,r7,32
8000231c:	12 9b       	mov	r11,r9
8000231e:	10 9c       	mov	r12,r8
80002320:	f0 1f 00 12 	mcall	80002368 <hmac_sha256_final+0x68>
    sha256_update(&ctx->ctx_outside, digest_inside, SHA256_DIGEST_SIZE);
80002324:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002328:	f0 c8 ff 58 	sub	r8,r8,-168
8000232c:	ee c9 00 20 	sub	r9,r7,32
80002330:	32 0a       	mov	r10,32
80002332:	12 9b       	mov	r11,r9
80002334:	10 9c       	mov	r12,r8
80002336:	f0 1f 00 0e 	mcall	8000236c <hmac_sha256_final+0x6c>
    sha256_final(&ctx->ctx_outside, mac_temp);
8000233a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000233e:	f0 c8 ff 58 	sub	r8,r8,-168
80002342:	ee c9 00 40 	sub	r9,r7,64
80002346:	12 9b       	mov	r11,r9
80002348:	10 9c       	mov	r12,r8
8000234a:	f0 1f 00 08 	mcall	80002368 <hmac_sha256_final+0x68>
    memcpy(mac, mac_temp, mac_size);
8000234e:	ee c8 00 40 	sub	r8,r7,64
80002352:	ee fa ff b4 	ld.w	r10,r7[-76]
80002356:	10 9b       	mov	r11,r8
80002358:	ee fc ff b8 	ld.w	r12,r7[-72]
8000235c:	f0 1f 00 05 	mcall	80002370 <hmac_sha256_final+0x70>
}
80002360:	2e dd       	sub	sp,-76
80002362:	e3 cd 80 80 	ldm	sp++,r7,pc
80002366:	00 00       	add	r0,r0
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	29 34       	sub	r4,-109
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	28 0c       	sub	r12,-128
80002370:	80 00       	ld.sh	r0,r0[0x0]
80002372:	e6 8e eb cd 	brqs	800dfb0c <Stored_values_flash+0x9fd0c>

80002374 <hmac_sha256>:

void hmac_sha256(const unsigned char *key, unsigned int key_size,
          const unsigned char *message, unsigned int message_len,
          unsigned char *mac, unsigned mac_size)
{
80002374:	eb cd 40 c0 	pushm	r6-r7,lr
80002378:	1a 97       	mov	r7,sp
8000237a:	fa cd 03 34 	sub	sp,sp,820
8000237e:	ee c6 ff f4 	sub	r6,r7,-12
80002382:	ef 4c fc dc 	st.w	r7[-804],r12
80002386:	ef 4b fc d8 	st.w	r7[-808],r11
8000238a:	ef 4a fc d4 	st.w	r7[-812],r10
8000238e:	ef 49 fc d0 	st.w	r7[-816],r9
80002392:	ef 48 fc cc 	st.w	r7[-820],r8
    hmac_sha256_ctx ctx;

    hmac_sha256_init(&ctx, key, key_size);
80002396:	ee c8 03 20 	sub	r8,r7,800
8000239a:	ee fa fc d8 	ld.w	r10,r7[-808]
8000239e:	ee fb fc dc 	ld.w	r11,r7[-804]
800023a2:	10 9c       	mov	r12,r8
800023a4:	f0 1f 00 0c 	mcall	800023d4 <hmac_sha256+0x60>
    hmac_sha256_update(&ctx, message, message_len);
800023a8:	ee c8 03 20 	sub	r8,r7,800
800023ac:	ee fa fc d0 	ld.w	r10,r7[-816]
800023b0:	ee fb fc d4 	ld.w	r11,r7[-812]
800023b4:	10 9c       	mov	r12,r8
800023b6:	f0 1f 00 09 	mcall	800023d8 <hmac_sha256+0x64>
    hmac_sha256_final(&ctx, mac, mac_size);
800023ba:	ee c8 03 20 	sub	r8,r7,800
800023be:	6c 0a       	ld.w	r10,r6[0x0]
800023c0:	ee fb fc cc 	ld.w	r11,r7[-820]
800023c4:	10 9c       	mov	r12,r8
800023c6:	f0 1f 00 06 	mcall	800023dc <hmac_sha256+0x68>
}
800023ca:	fe 3d fc cc 	sub	sp,-820
800023ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023d2:	00 00       	add	r0,r0
800023d4:	80 00       	ld.sh	r0,r0[0x0]
800023d6:	21 20       	sub	r0,18
800023d8:	80 00       	ld.sh	r0,r0[0x0]
800023da:	22 d0       	sub	r0,45
800023dc:	80 00       	ld.sh	r0,r0[0x0]
800023de:	23 00       	sub	r0,48

800023e0 <sha256_transf>:

/* SHA-256 functions */

void sha256_transf(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int block_nb)
{
800023e0:	eb cd 40 80 	pushm	r7,lr
800023e4:	1a 97       	mov	r7,sp
800023e6:	fa cd 01 40 	sub	sp,sp,320
800023ea:	ef 4c fe c8 	st.w	r7[-312],r12
800023ee:	ef 4b fe c4 	st.w	r7[-316],r11
800023f2:	ef 4a fe c0 	st.w	r7[-320],r10

#ifndef UNROLL_LOOPS
    int j;
#endif

    for (i = 0; i < (int) block_nb; i++) {
800023f6:	30 08       	mov	r8,0
800023f8:	ef 48 ff f8 	st.w	r7[-8],r8
800023fc:	ca 49       	rjmp	80002744 <sha256_transf+0x364>
        sub_block = message + (i << 6);
800023fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002402:	a7 68       	lsl	r8,0x6
80002404:	ee f9 fe c4 	ld.w	r9,r7[-316]
80002408:	f2 08 00 08 	add	r8,r9,r8
8000240c:	ef 48 ff f4 	st.w	r7[-12],r8

#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
80002410:	30 08       	mov	r8,0
80002412:	ef 48 ff fc 	st.w	r7[-4],r8
80002416:	c3 98       	rjmp	80002488 <sha256_transf+0xa8>
            PACK32(&sub_block[j << 2], &w[j]);
80002418:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000241c:	f0 09 15 02 	lsl	r9,r8,0x2
80002420:	ee c8 01 14 	sub	r8,r7,276
80002424:	12 08       	add	r8,r9
80002426:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000242a:	a3 69       	lsl	r9,0x2
8000242c:	2f d9       	sub	r9,-3
8000242e:	ee fa ff f4 	ld.w	r10,r7[-12]
80002432:	f4 09 00 09 	add	r9,r10,r9
80002436:	13 89       	ld.ub	r9,r9[0x0]
80002438:	12 9a       	mov	r10,r9
8000243a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000243e:	a3 69       	lsl	r9,0x2
80002440:	2f e9       	sub	r9,-2
80002442:	ee fb ff f4 	ld.w	r11,r7[-12]
80002446:	f6 09 00 09 	add	r9,r11,r9
8000244a:	13 89       	ld.ub	r9,r9[0x0]
8000244c:	a9 69       	lsl	r9,0x8
8000244e:	12 4a       	or	r10,r9
80002450:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002454:	a3 69       	lsl	r9,0x2
80002456:	2f f9       	sub	r9,-1
80002458:	ee fb ff f4 	ld.w	r11,r7[-12]
8000245c:	f6 09 00 09 	add	r9,r11,r9
80002460:	13 89       	ld.ub	r9,r9[0x0]
80002462:	b1 69       	lsl	r9,0x10
80002464:	12 4a       	or	r10,r9
80002466:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000246a:	a3 69       	lsl	r9,0x2
8000246c:	ee fb ff f4 	ld.w	r11,r7[-12]
80002470:	f6 09 00 09 	add	r9,r11,r9
80002474:	13 89       	ld.ub	r9,r9[0x0]
80002476:	b9 69       	lsl	r9,0x18
80002478:	f5 e9 10 09 	or	r9,r10,r9
8000247c:	91 09       	st.w	r8[0x0],r9

    for (i = 0; i < (int) block_nb; i++) {
        sub_block = message + (i << 6);

#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
8000247e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002482:	2f f8       	sub	r8,-1
80002484:	ef 48 ff fc 	st.w	r7[-4],r8
80002488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000248c:	58 f8       	cp.w	r8,15
8000248e:	fe 9a ff c5 	brle	80002418 <sha256_transf+0x38>
            PACK32(&sub_block[j << 2], &w[j]);
        }

        for (j = 16; j < 64; j++) {
80002492:	31 08       	mov	r8,16
80002494:	ef 48 ff fc 	st.w	r7[-4],r8
80002498:	c6 c8       	rjmp	80002570 <sha256_transf+0x190>
            SHA256_SCR(j);
8000249a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000249e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024a2:	20 28       	sub	r8,2
800024a4:	a3 68       	lsl	r8,0x2
800024a6:	ee 08 00 08 	add	r8,r7,r8
800024aa:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024ae:	f0 0b 16 11 	lsr	r11,r8,0x11
800024b2:	f0 09 15 0f 	lsl	r9,r8,0xf
800024b6:	16 49       	or	r9,r11
800024b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024bc:	20 28       	sub	r8,2
800024be:	a3 68       	lsl	r8,0x2
800024c0:	ee 08 00 08 	add	r8,r7,r8
800024c4:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024c8:	f0 0b 16 13 	lsr	r11,r8,0x13
800024cc:	ad 78       	lsl	r8,0xd
800024ce:	16 48       	or	r8,r11
800024d0:	10 59       	eor	r9,r8
800024d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024d6:	20 28       	sub	r8,2
800024d8:	a3 68       	lsl	r8,0x2
800024da:	ee 08 00 08 	add	r8,r7,r8
800024de:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024e2:	ab 88       	lsr	r8,0xa
800024e4:	10 59       	eor	r9,r8
800024e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024ea:	20 78       	sub	r8,7
800024ec:	a3 68       	lsl	r8,0x2
800024ee:	ee 08 00 08 	add	r8,r7,r8
800024f2:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800024f6:	f2 08 00 0b 	add	r11,r9,r8
800024fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024fe:	20 f8       	sub	r8,15
80002500:	a3 68       	lsl	r8,0x2
80002502:	ee 08 00 08 	add	r8,r7,r8
80002506:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000250a:	f0 0c 16 07 	lsr	r12,r8,0x7
8000250e:	f0 09 15 19 	lsl	r9,r8,0x19
80002512:	18 49       	or	r9,r12
80002514:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002518:	20 f8       	sub	r8,15
8000251a:	a3 68       	lsl	r8,0x2
8000251c:	ee 08 00 08 	add	r8,r7,r8
80002520:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002524:	f0 0c 16 12 	lsr	r12,r8,0x12
80002528:	af 68       	lsl	r8,0xe
8000252a:	18 48       	or	r8,r12
8000252c:	10 59       	eor	r9,r8
8000252e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002532:	20 f8       	sub	r8,15
80002534:	a3 68       	lsl	r8,0x2
80002536:	ee 08 00 08 	add	r8,r7,r8
8000253a:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000253e:	a3 98       	lsr	r8,0x3
80002540:	f3 e8 20 08 	eor	r8,r9,r8
80002544:	f6 08 00 09 	add	r9,r11,r8
80002548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000254c:	21 08       	sub	r8,16
8000254e:	a3 68       	lsl	r8,0x2
80002550:	ee 08 00 08 	add	r8,r7,r8
80002554:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002558:	10 09       	add	r9,r8
8000255a:	f4 08 15 02 	lsl	r8,r10,0x2
8000255e:	ee 08 00 08 	add	r8,r7,r8
80002562:	f1 49 fe ec 	st.w	r8[-276],r9
#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
            PACK32(&sub_block[j << 2], &w[j]);
        }

        for (j = 16; j < 64; j++) {
80002566:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000256a:	2f f8       	sub	r8,-1
8000256c:	ef 48 ff fc 	st.w	r7[-4],r8
80002570:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002574:	e0 48 00 3f 	cp.w	r8,63
80002578:	fe 9a ff 91 	brle	8000249a <sha256_transf+0xba>
            SHA256_SCR(j);
        }

        for (j = 0; j < 8; j++) {
8000257c:	30 08       	mov	r8,0
8000257e:	ef 48 ff fc 	st.w	r7[-4],r8
80002582:	c1 48       	rjmp	800025aa <sha256_transf+0x1ca>
            wv[j] = ctx->h[j];
80002584:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002588:	ee fa ff fc 	ld.w	r10,r7[-4]
8000258c:	ee f9 fe c8 	ld.w	r9,r7[-312]
80002590:	2d ea       	sub	r10,-34
80002592:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80002596:	a3 68       	lsl	r8,0x2
80002598:	ee 08 00 08 	add	r8,r7,r8
8000259c:	f1 49 fe cc 	st.w	r8[-308],r9

        for (j = 16; j < 64; j++) {
            SHA256_SCR(j);
        }

        for (j = 0; j < 8; j++) {
800025a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025a4:	2f f8       	sub	r8,-1
800025a6:	ef 48 ff fc 	st.w	r7[-4],r8
800025aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025ae:	58 78       	cp.w	r8,7
800025b0:	fe 9a ff ea 	brle	80002584 <sha256_transf+0x1a4>
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
800025b4:	30 08       	mov	r8,0
800025b6:	ef 48 ff fc 	st.w	r7[-4],r8
800025ba:	c9 68       	rjmp	800026e6 <sha256_transf+0x306>
            t1 = wv[7] + SHA256_F2(wv[4]) + CH(wv[4], wv[5], wv[6])
800025bc:	ee fa fe e8 	ld.w	r10,r7[-280]
800025c0:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025c4:	f0 0b 16 06 	lsr	r11,r8,0x6
800025c8:	f0 09 15 1a 	lsl	r9,r8,0x1a
800025cc:	16 49       	or	r9,r11
800025ce:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025d2:	f0 0b 16 0b 	lsr	r11,r8,0xb
800025d6:	b5 78       	lsl	r8,0x15
800025d8:	16 48       	or	r8,r11
800025da:	10 59       	eor	r9,r8
800025dc:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025e0:	f0 0b 16 19 	lsr	r11,r8,0x19
800025e4:	a7 78       	lsl	r8,0x7
800025e6:	16 48       	or	r8,r11
800025e8:	f3 e8 20 08 	eor	r8,r9,r8
800025ec:	f4 08 00 09 	add	r9,r10,r8
800025f0:	ee fa fe dc 	ld.w	r10,r7[-292]
800025f4:	ee f8 fe e0 	ld.w	r8,r7[-288]
800025f8:	10 6a       	and	r10,r8
800025fa:	ee f8 fe dc 	ld.w	r8,r7[-292]
800025fe:	f0 0b 11 ff 	rsub	r11,r8,-1
80002602:	ee f8 fe e4 	ld.w	r8,r7[-284]
80002606:	f7 e8 00 08 	and	r8,r11,r8
8000260a:	f5 e8 20 08 	eor	r8,r10,r8
                + sha256_k[j] + w[j];
8000260e:	10 09       	add	r9,r8
80002610:	ee fa ff fc 	ld.w	r10,r7[-4]
80002614:	4d 18       	lddpc	r8,80002758 <sha256_transf+0x378>
80002616:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000261a:	10 09       	add	r9,r8
8000261c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002620:	a3 68       	lsl	r8,0x2
80002622:	ee 08 00 08 	add	r8,r7,r8
80002626:	f0 f8 fe ec 	ld.w	r8,r8[-276]
        for (j = 0; j < 8; j++) {
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
            t1 = wv[7] + SHA256_F2(wv[4]) + CH(wv[4], wv[5], wv[6])
8000262a:	f2 08 00 08 	add	r8,r9,r8
8000262e:	ef 48 ff ec 	st.w	r7[-20],r8
                + sha256_k[j] + w[j];
            t2 = SHA256_F1(wv[0]) + MAJ(wv[0], wv[1], wv[2]);
80002632:	ee f8 fe cc 	ld.w	r8,r7[-308]
80002636:	f0 0a 16 02 	lsr	r10,r8,0x2
8000263a:	f0 09 15 1e 	lsl	r9,r8,0x1e
8000263e:	14 49       	or	r9,r10
80002640:	ee f8 fe cc 	ld.w	r8,r7[-308]
80002644:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002648:	b3 78       	lsl	r8,0x13
8000264a:	14 48       	or	r8,r10
8000264c:	10 59       	eor	r9,r8
8000264e:	ee f8 fe cc 	ld.w	r8,r7[-308]
80002652:	f0 0a 16 16 	lsr	r10,r8,0x16
80002656:	ab 68       	lsl	r8,0xa
80002658:	14 48       	or	r8,r10
8000265a:	10 59       	eor	r9,r8
8000265c:	ee fa fe cc 	ld.w	r10,r7[-308]
80002660:	ee f8 fe d0 	ld.w	r8,r7[-304]
80002664:	10 6a       	and	r10,r8
80002666:	ee fb fe cc 	ld.w	r11,r7[-308]
8000266a:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000266e:	f7 e8 00 08 	and	r8,r11,r8
80002672:	10 5a       	eor	r10,r8
80002674:	ee fb fe d0 	ld.w	r11,r7[-304]
80002678:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000267c:	f7 e8 00 08 	and	r8,r11,r8
80002680:	f5 e8 20 08 	eor	r8,r10,r8
80002684:	f2 08 00 08 	add	r8,r9,r8
80002688:	ef 48 ff f0 	st.w	r7[-16],r8
            wv[7] = wv[6];
8000268c:	ee f8 fe e4 	ld.w	r8,r7[-284]
80002690:	ef 48 fe e8 	st.w	r7[-280],r8
            wv[6] = wv[5];
80002694:	ee f8 fe e0 	ld.w	r8,r7[-288]
80002698:	ef 48 fe e4 	st.w	r7[-284],r8
            wv[5] = wv[4];
8000269c:	ee f8 fe dc 	ld.w	r8,r7[-292]
800026a0:	ef 48 fe e0 	st.w	r7[-288],r8
            wv[4] = wv[3] + t1;
800026a4:	ee f9 fe d8 	ld.w	r9,r7[-296]
800026a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800026ac:	f2 08 00 08 	add	r8,r9,r8
800026b0:	ef 48 fe dc 	st.w	r7[-292],r8
            wv[3] = wv[2];
800026b4:	ee f8 fe d4 	ld.w	r8,r7[-300]
800026b8:	ef 48 fe d8 	st.w	r7[-296],r8
            wv[2] = wv[1];
800026bc:	ee f8 fe d0 	ld.w	r8,r7[-304]
800026c0:	ef 48 fe d4 	st.w	r7[-300],r8
            wv[1] = wv[0];
800026c4:	ee f8 fe cc 	ld.w	r8,r7[-308]
800026c8:	ef 48 fe d0 	st.w	r7[-304],r8
            wv[0] = t1 + t2;
800026cc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800026d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800026d4:	f2 08 00 08 	add	r8,r9,r8
800026d8:	ef 48 fe cc 	st.w	r7[-308],r8

        for (j = 0; j < 8; j++) {
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
800026dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026e0:	2f f8       	sub	r8,-1
800026e2:	ef 48 ff fc 	st.w	r7[-4],r8
800026e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026ea:	e0 48 00 3f 	cp.w	r8,63
800026ee:	fe 9a ff 67 	brle	800025bc <sha256_transf+0x1dc>
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }

        for (j = 0; j < 8; j++) {
800026f2:	30 08       	mov	r8,0
800026f4:	ef 48 ff fc 	st.w	r7[-4],r8
800026f8:	c1 c8       	rjmp	80002730 <sha256_transf+0x350>
            ctx->h[j] += wv[j];
800026fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800026fe:	ee fa ff fc 	ld.w	r10,r7[-4]
80002702:	ee f8 fe c8 	ld.w	r8,r7[-312]
80002706:	2d ea       	sub	r10,-34
80002708:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000270c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002710:	a3 68       	lsl	r8,0x2
80002712:	ee 08 00 08 	add	r8,r7,r8
80002716:	f0 f8 fe cc 	ld.w	r8,r8[-308]
8000271a:	10 0a       	add	r10,r8
8000271c:	ee f8 fe c8 	ld.w	r8,r7[-312]
80002720:	2d e9       	sub	r9,-34
80002722:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }

        for (j = 0; j < 8; j++) {
80002726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000272a:	2f f8       	sub	r8,-1
8000272c:	ef 48 ff fc 	st.w	r7[-4],r8
80002730:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002734:	58 78       	cp.w	r8,7
80002736:	fe 9a ff e2 	brle	800026fa <sha256_transf+0x31a>

#ifndef UNROLL_LOOPS
    int j;
#endif

    for (i = 0; i < (int) block_nb; i++) {
8000273a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000273e:	2f f8       	sub	r8,-1
80002740:	ef 48 ff f8 	st.w	r7[-8],r8
80002744:	ee f9 fe c0 	ld.w	r9,r7[-320]
80002748:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000274c:	10 39       	cp.w	r9,r8
8000274e:	fe 99 fe 58 	brgt	800023fe <sha256_transf+0x1e>
        ctx->h[2] += wv[2]; ctx->h[3] += wv[3];
        ctx->h[4] += wv[4]; ctx->h[5] += wv[5];
        ctx->h[6] += wv[6]; ctx->h[7] += wv[7];
#endif /* !UNROLL_LOOPS */
    }
}
80002752:	2b 0d       	sub	sp,-320
80002754:	e3 cd 80 80 	ldm	sp++,r7,pc
80002758:	00 00       	add	r0,r0
8000275a:	00 28       	rsub	r8,r0

8000275c <sha256>:

void sha256(const unsigned char *message, unsigned int len, unsigned char *digest)
{
8000275c:	eb cd 40 80 	pushm	r7,lr
80002760:	1a 97       	mov	r7,sp
80002762:	fa cd 00 b4 	sub	sp,sp,180
80002766:	ef 4c ff 54 	st.w	r7[-172],r12
8000276a:	ef 4b ff 50 	st.w	r7[-176],r11
8000276e:	ef 4a ff 4c 	st.w	r7[-180],r10
    sha256_ctx ctx;

    sha256_init(&ctx);
80002772:	ee c8 00 a8 	sub	r8,r7,168
80002776:	10 9c       	mov	r12,r8
80002778:	f0 1f 00 0b 	mcall	800027a4 <sha256+0x48>
    sha256_update(&ctx, message, len);
8000277c:	ee c8 00 a8 	sub	r8,r7,168
80002780:	ee fa ff 50 	ld.w	r10,r7[-176]
80002784:	ee fb ff 54 	ld.w	r11,r7[-172]
80002788:	10 9c       	mov	r12,r8
8000278a:	f0 1f 00 08 	mcall	800027a8 <sha256+0x4c>
    sha256_final(&ctx, digest);
8000278e:	ee c8 00 a8 	sub	r8,r7,168
80002792:	ee fb ff 4c 	ld.w	r11,r7[-180]
80002796:	10 9c       	mov	r12,r8
80002798:	f0 1f 00 05 	mcall	800027ac <sha256+0x50>
}
8000279c:	2d 3d       	sub	sp,-180
8000279e:	e3 cd 80 80 	ldm	sp++,r7,pc
800027a2:	00 00       	add	r0,r0
800027a4:	80 00       	ld.sh	r0,r0[0x0]
800027a6:	27 b0       	sub	r0,123
800027a8:	80 00       	ld.sh	r0,r0[0x0]
800027aa:	28 0c       	sub	r12,-128
800027ac:	80 00       	ld.sh	r0,r0[0x0]
800027ae:	29 34       	sub	r4,-109

800027b0 <sha256_init>:

void sha256_init(sha256_ctx *ctx)
{
800027b0:	eb cd 40 80 	pushm	r7,lr
800027b4:	1a 97       	mov	r7,sp
800027b6:	20 2d       	sub	sp,8
800027b8:	ef 4c ff f8 	st.w	r7[-8],r12
#ifndef UNROLL_LOOPS
    int i;
    for (i = 0; i < 8; i++) {
800027bc:	30 08       	mov	r8,0
800027be:	ef 48 ff fc 	st.w	r7[-4],r8
800027c2:	c1 28       	rjmp	800027e6 <sha256_init+0x36>
        ctx->h[i] = sha256_h0[i];
800027c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027c8:	ee fa ff fc 	ld.w	r10,r7[-4]
800027cc:	48 f8       	lddpc	r8,80002808 <sha256_init+0x58>
800027ce:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800027d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027d6:	2d e9       	sub	r9,-34
800027d8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

void sha256_init(sha256_ctx *ctx)
{
#ifndef UNROLL_LOOPS
    int i;
    for (i = 0; i < 8; i++) {
800027dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800027e0:	2f f8       	sub	r8,-1
800027e2:	ef 48 ff fc 	st.w	r7[-4],r8
800027e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800027ea:	58 78       	cp.w	r8,7
800027ec:	fe 9a ff ec 	brle	800027c4 <sha256_init+0x14>
    ctx->h[2] = sha256_h0[2]; ctx->h[3] = sha256_h0[3];
    ctx->h[4] = sha256_h0[4]; ctx->h[5] = sha256_h0[5];
    ctx->h[6] = sha256_h0[6]; ctx->h[7] = sha256_h0[7];
#endif /* !UNROLL_LOOPS */

    ctx->len = 0;
800027f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027f4:	30 09       	mov	r9,0
800027f6:	91 19       	st.w	r8[0x4],r9
    ctx->tot_len = 0;
800027f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027fc:	30 09       	mov	r9,0
800027fe:	91 09       	st.w	r8[0x0],r9
}
80002800:	2f ed       	sub	sp,-8
80002802:	e3 cd 80 80 	ldm	sp++,r7,pc
80002806:	00 00       	add	r0,r0
80002808:	00 00       	add	r0,r0
8000280a:	00 08       	add	r8,r0

8000280c <sha256_update>:

void sha256_update(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int len)
{
8000280c:	eb cd 40 80 	pushm	r7,lr
80002810:	1a 97       	mov	r7,sp
80002812:	20 8d       	sub	sp,32
80002814:	ef 4c ff e8 	st.w	r7[-24],r12
80002818:	ef 4b ff e4 	st.w	r7[-28],r11
8000281c:	ef 4a ff e0 	st.w	r7[-32],r10
    unsigned int block_nb;
    unsigned int new_len, rem_len, tmp_len;
    const unsigned char *shifted_message;

    tmp_len = SHA256_BLOCK_SIZE - ctx->len;
80002820:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002824:	70 18       	ld.w	r8,r8[0x4]
80002826:	f0 08 11 40 	rsub	r8,r8,64
8000282a:	ef 48 ff f8 	st.w	r7[-8],r8
    rem_len = len < tmp_len ? len : tmp_len;
8000282e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002832:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002836:	ee fa ff f8 	ld.w	r10,r7[-8]
8000283a:	10 3a       	cp.w	r10,r8
8000283c:	f2 08 17 80 	movls	r8,r9
80002840:	ef 48 ff f4 	st.w	r7[-12],r8

    memcpy(&ctx->block[ctx->len], message, rem_len);
80002844:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002848:	f0 c9 ff f8 	sub	r9,r8,-8
8000284c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002850:	70 18       	ld.w	r8,r8[0x4]
80002852:	f2 08 00 08 	add	r8,r9,r8
80002856:	ee fa ff f4 	ld.w	r10,r7[-12]
8000285a:	ee fb ff e4 	ld.w	r11,r7[-28]
8000285e:	10 9c       	mov	r12,r8
80002860:	f0 1f 00 33 	mcall	8000292c <sha256_update+0x120>

    if (ctx->len + len < SHA256_BLOCK_SIZE) {
80002864:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002868:	70 19       	ld.w	r9,r8[0x4]
8000286a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000286e:	f2 08 00 08 	add	r8,r9,r8
80002872:	e0 48 00 3f 	cp.w	r8,63
80002876:	e0 8b 00 0c 	brhi	8000288e <sha256_update+0x82>
        ctx->len += len;
8000287a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000287e:	70 19       	ld.w	r9,r8[0x4]
80002880:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002884:	10 09       	add	r9,r8
80002886:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000288a:	91 19       	st.w	r8[0x4],r9
        return;
8000288c:	c4 c8       	rjmp	80002924 <sha256_update+0x118>
    }

    new_len = len - rem_len;
8000288e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80002892:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002896:	f2 08 01 08 	sub	r8,r9,r8
8000289a:	ef 48 ff f0 	st.w	r7[-16],r8
    block_nb = new_len / SHA256_BLOCK_SIZE;
8000289e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028a2:	a7 88       	lsr	r8,0x6
800028a4:	ef 48 ff ec 	st.w	r7[-20],r8

    shifted_message = message + rem_len;
800028a8:	ee f9 ff e4 	ld.w	r9,r7[-28]
800028ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028b0:	f2 08 00 08 	add	r8,r9,r8
800028b4:	ef 48 ff fc 	st.w	r7[-4],r8

    sha256_transf(ctx, ctx->block, 1);
800028b8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800028bc:	2f 88       	sub	r8,-8
800028be:	30 1a       	mov	r10,1
800028c0:	10 9b       	mov	r11,r8
800028c2:	ee fc ff e8 	ld.w	r12,r7[-24]
800028c6:	f0 1f 00 1b 	mcall	80002930 <sha256_update+0x124>
    sha256_transf(ctx, shifted_message, block_nb);
800028ca:	ee fa ff ec 	ld.w	r10,r7[-20]
800028ce:	ee fb ff fc 	ld.w	r11,r7[-4]
800028d2:	ee fc ff e8 	ld.w	r12,r7[-24]
800028d6:	f0 1f 00 17 	mcall	80002930 <sha256_update+0x124>

    rem_len = new_len % SHA256_BLOCK_SIZE;
800028da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028de:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800028e2:	ef 48 ff f4 	st.w	r7[-12],r8

    memcpy(ctx->block, &shifted_message[block_nb << 6],
800028e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028ea:	a7 68       	lsl	r8,0x6
800028ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800028f0:	10 09       	add	r9,r8
800028f2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800028f6:	2f 88       	sub	r8,-8
800028f8:	ee fa ff f4 	ld.w	r10,r7[-12]
800028fc:	12 9b       	mov	r11,r9
800028fe:	10 9c       	mov	r12,r8
80002900:	f0 1f 00 0b 	mcall	8000292c <sha256_update+0x120>
           rem_len);

    ctx->len = rem_len;
80002904:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002908:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000290c:	91 19       	st.w	r8[0x4],r9
    ctx->tot_len += (block_nb + 1) << 6;
8000290e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002912:	70 09       	ld.w	r9,r8[0x0]
80002914:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002918:	2f f8       	sub	r8,-1
8000291a:	a7 68       	lsl	r8,0x6
8000291c:	10 09       	add	r9,r8
8000291e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002922:	91 09       	st.w	r8[0x0],r9
}
80002924:	2f 8d       	sub	sp,-32
80002926:	e3 cd 80 80 	ldm	sp++,r7,pc
8000292a:	00 00       	add	r0,r0
8000292c:	80 00       	ld.sh	r0,r0[0x0]
8000292e:	e6 8e 80 00 	brqs	800d292e <Stored_values_flash+0x92b2e>
80002932:	23 e0       	sub	r0,62

80002934 <sha256_final>:

void sha256_final(sha256_ctx *ctx, unsigned char *digest)
{
80002934:	eb cd 40 80 	pushm	r7,lr
80002938:	1a 97       	mov	r7,sp
8000293a:	20 6d       	sub	sp,24
8000293c:	ef 4c ff ec 	st.w	r7[-20],r12
80002940:	ef 4b ff e8 	st.w	r7[-24],r11
#ifndef UNROLL_LOOPS
    int i;
#endif

    block_nb = (1 + ((SHA256_BLOCK_SIZE - 9)
                     < (ctx->len % SHA256_BLOCK_SIZE)));
80002944:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002948:	70 18       	ld.w	r8,r8[0x4]
8000294a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6

#ifndef UNROLL_LOOPS
    int i;
#endif

    block_nb = (1 + ((SHA256_BLOCK_SIZE - 9)
8000294e:	e0 48 00 37 	cp.w	r8,55
80002952:	e0 88 00 04 	brls	8000295a <sha256_final+0x26>
80002956:	30 28       	mov	r8,2
80002958:	c0 28       	rjmp	8000295c <sha256_final+0x28>
8000295a:	30 18       	mov	r8,1
8000295c:	ef 48 ff f0 	st.w	r7[-16],r8
                     < (ctx->len % SHA256_BLOCK_SIZE)));

    len_b = (ctx->tot_len + ctx->len) << 3;
80002960:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002964:	70 09       	ld.w	r9,r8[0x0]
80002966:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000296a:	70 18       	ld.w	r8,r8[0x4]
8000296c:	f2 08 00 08 	add	r8,r9,r8
80002970:	a3 78       	lsl	r8,0x3
80002972:	ef 48 ff f8 	st.w	r7[-8],r8
    pm_len = block_nb << 6;
80002976:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000297a:	a7 68       	lsl	r8,0x6
8000297c:	ef 48 ff f4 	st.w	r7[-12],r8

    memset(ctx->block + ctx->len, 0, pm_len - ctx->len);
80002980:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002984:	70 18       	ld.w	r8,r8[0x4]
80002986:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000298a:	10 19       	sub	r9,r8
8000298c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002990:	f0 ca ff f8 	sub	r10,r8,-8
80002994:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002998:	70 18       	ld.w	r8,r8[0x4]
8000299a:	f4 08 00 08 	add	r8,r10,r8
8000299e:	12 9a       	mov	r10,r9
800029a0:	30 0b       	mov	r11,0
800029a2:	10 9c       	mov	r12,r8
800029a4:	f0 1f 00 4e 	mcall	80002adc <sha256_final+0x1a8>
    ctx->block[ctx->len] = 0x80;
800029a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029ac:	70 18       	ld.w	r8,r8[0x4]
800029ae:	ee f9 ff ec 	ld.w	r9,r7[-20]
800029b2:	10 09       	add	r9,r8
800029b4:	38 08       	mov	r8,-128
800029b6:	f3 68 00 08 	st.b	r9[8],r8
    UNPACK32(len_b, ctx->block + pm_len - 4);
800029ba:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029be:	f0 c9 ff f8 	sub	r9,r8,-8
800029c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029c6:	20 18       	sub	r8,1
800029c8:	10 09       	add	r9,r8
800029ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029ce:	5c 58       	castu.b	r8
800029d0:	b2 88       	st.b	r9[0x0],r8
800029d2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029d6:	f0 c9 ff f8 	sub	r9,r8,-8
800029da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029de:	20 28       	sub	r8,2
800029e0:	10 09       	add	r9,r8
800029e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029e6:	a9 88       	lsr	r8,0x8
800029e8:	5c 58       	castu.b	r8
800029ea:	b2 88       	st.b	r9[0x0],r8
800029ec:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029f0:	f0 c9 ff f8 	sub	r9,r8,-8
800029f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029f8:	20 38       	sub	r8,3
800029fa:	10 09       	add	r9,r8
800029fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a00:	b1 88       	lsr	r8,0x10
80002a02:	5c 58       	castu.b	r8
80002a04:	b2 88       	st.b	r9[0x0],r8
80002a06:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a0a:	f0 c9 ff f8 	sub	r9,r8,-8
80002a0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002a12:	20 48       	sub	r8,4
80002a14:	10 09       	add	r9,r8
80002a16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a1a:	b9 88       	lsr	r8,0x18
80002a1c:	5c 58       	castu.b	r8
80002a1e:	b2 88       	st.b	r9[0x0],r8

    sha256_transf(ctx, ctx->block, block_nb);
80002a20:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a24:	2f 88       	sub	r8,-8
80002a26:	ee fa ff f0 	ld.w	r10,r7[-16]
80002a2a:	10 9b       	mov	r11,r8
80002a2c:	ee fc ff ec 	ld.w	r12,r7[-20]
80002a30:	f0 1f 00 2c 	mcall	80002ae0 <sha256_final+0x1ac>

#ifndef UNROLL_LOOPS
    for (i = 0 ; i < 8; i++) {
80002a34:	30 08       	mov	r8,0
80002a36:	ef 48 ff fc 	st.w	r7[-4],r8
80002a3a:	c4 88       	rjmp	80002aca <sha256_final+0x196>
        UNPACK32(ctx->h[i], &digest[i << 2]);
80002a3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a40:	a3 68       	lsl	r8,0x2
80002a42:	2f d8       	sub	r8,-3
80002a44:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002a48:	10 09       	add	r9,r8
80002a4a:	ee fa ff fc 	ld.w	r10,r7[-4]
80002a4e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a52:	2d ea       	sub	r10,-34
80002a54:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002a58:	5c 58       	castu.b	r8
80002a5a:	b2 88       	st.b	r9[0x0],r8
80002a5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a60:	a3 68       	lsl	r8,0x2
80002a62:	2f e8       	sub	r8,-2
80002a64:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002a68:	10 09       	add	r9,r8
80002a6a:	ee fa ff fc 	ld.w	r10,r7[-4]
80002a6e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a72:	2d ea       	sub	r10,-34
80002a74:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002a78:	a9 88       	lsr	r8,0x8
80002a7a:	5c 58       	castu.b	r8
80002a7c:	b2 88       	st.b	r9[0x0],r8
80002a7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a82:	a3 68       	lsl	r8,0x2
80002a84:	2f f8       	sub	r8,-1
80002a86:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002a8a:	10 09       	add	r9,r8
80002a8c:	ee fa ff fc 	ld.w	r10,r7[-4]
80002a90:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a94:	2d ea       	sub	r10,-34
80002a96:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002a9a:	b1 88       	lsr	r8,0x10
80002a9c:	5c 58       	castu.b	r8
80002a9e:	b2 88       	st.b	r9[0x0],r8
80002aa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002aa4:	a3 68       	lsl	r8,0x2
80002aa6:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002aaa:	10 09       	add	r9,r8
80002aac:	ee fa ff fc 	ld.w	r10,r7[-4]
80002ab0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002ab4:	2d ea       	sub	r10,-34
80002ab6:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002aba:	b9 88       	lsr	r8,0x18
80002abc:	5c 58       	castu.b	r8
80002abe:	b2 88       	st.b	r9[0x0],r8
    UNPACK32(len_b, ctx->block + pm_len - 4);

    sha256_transf(ctx, ctx->block, block_nb);

#ifndef UNROLL_LOOPS
    for (i = 0 ; i < 8; i++) {
80002ac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ac4:	2f f8       	sub	r8,-1
80002ac6:	ef 48 ff fc 	st.w	r7[-4],r8
80002aca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ace:	58 78       	cp.w	r8,7
80002ad0:	fe 9a ff b6 	brle	80002a3c <sha256_final+0x108>
   UNPACK32(ctx->h[4], &digest[16]);
   UNPACK32(ctx->h[5], &digest[20]);
   UNPACK32(ctx->h[6], &digest[24]);
   UNPACK32(ctx->h[7], &digest[28]);
#endif /* !UNROLL_LOOPS */
}
80002ad4:	2f ad       	sub	sp,-24
80002ad6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ada:	00 00       	add	r0,r0
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	e7 d6 80 00 	ldswp.w	r6,r3[0]
80002ae2:	23 e0       	sub	r0,62

80002ae4 <pbkdf2_func>:

volatile uint256_t var_Password;


void pbkdf2_func(uint8_t *password, uint8_t *derived_key)
{
80002ae4:	eb cd 40 80 	pushm	r7,lr
80002ae8:	1a 97       	mov	r7,sp
80002aea:	fa cd 00 98 	sub	sp,sp,152
80002aee:	ef 4c ff 6c 	st.w	r7[-148],r12
80002af2:	ef 4b ff 68 	st.w	r7[-152],r11
	unsigned short int iteration_count;
	unsigned char mac[hLen];
	unsigned char Ubuffer[hLen+4] = {0};
80002af6:	ee c8 00 50 	sub	r8,r7,80
80002afa:	30 0a       	mov	r10,0
80002afc:	30 0b       	mov	r11,0
80002afe:	f0 eb 00 00 	st.d	r8[0],r10
80002b02:	2f 88       	sub	r8,-8
80002b04:	30 0a       	mov	r10,0
80002b06:	30 0b       	mov	r11,0
80002b08:	f0 eb 00 00 	st.d	r8[0],r10
80002b0c:	2f 88       	sub	r8,-8
80002b0e:	30 0a       	mov	r10,0
80002b10:	30 0b       	mov	r11,0
80002b12:	f0 eb 00 00 	st.d	r8[0],r10
80002b16:	2f 88       	sub	r8,-8
80002b18:	30 0a       	mov	r10,0
80002b1a:	30 0b       	mov	r11,0
80002b1c:	f0 eb 00 00 	st.d	r8[0],r10
80002b20:	2f 88       	sub	r8,-8
80002b22:	30 09       	mov	r9,0
80002b24:	91 09       	st.w	r8[0x0],r9
80002b26:	2f c8       	sub	r8,-4
	unsigned char Tbuffer[hLen] = {0};
80002b28:	ee c8 00 70 	sub	r8,r7,112
80002b2c:	30 0a       	mov	r10,0
80002b2e:	30 0b       	mov	r11,0
80002b30:	f0 eb 00 00 	st.d	r8[0],r10
80002b34:	2f 88       	sub	r8,-8
80002b36:	30 0a       	mov	r10,0
80002b38:	30 0b       	mov	r11,0
80002b3a:	f0 eb 00 00 	st.d	r8[0],r10
80002b3e:	2f 88       	sub	r8,-8
80002b40:	30 0a       	mov	r10,0
80002b42:	30 0b       	mov	r11,0
80002b44:	f0 eb 00 00 	st.d	r8[0],r10
80002b48:	2f 88       	sub	r8,-8
80002b4a:	30 0a       	mov	r10,0
80002b4c:	30 0b       	mov	r11,0
80002b4e:	f0 eb 00 00 	st.d	r8[0],r10
80002b52:	2f 88       	sub	r8,-8
	unsigned char Fbuffer[hLen] = {0};
80002b54:	ee c8 00 90 	sub	r8,r7,144
80002b58:	30 0a       	mov	r10,0
80002b5a:	30 0b       	mov	r11,0
80002b5c:	f0 eb 00 00 	st.d	r8[0],r10
80002b60:	2f 88       	sub	r8,-8
80002b62:	30 0a       	mov	r10,0
80002b64:	30 0b       	mov	r11,0
80002b66:	f0 eb 00 00 	st.d	r8[0],r10
80002b6a:	2f 88       	sub	r8,-8
80002b6c:	30 0a       	mov	r10,0
80002b6e:	30 0b       	mov	r11,0
80002b70:	f0 eb 00 00 	st.d	r8[0],r10
80002b74:	2f 88       	sub	r8,-8
80002b76:	30 0a       	mov	r10,0
80002b78:	30 0b       	mov	r11,0
80002b7a:	f0 eb 00 00 	st.d	r8[0],r10
80002b7e:	2f 88       	sub	r8,-8
	unsigned char total_blocks = hLen / hLen, block_num = 1;
80002b80:	30 18       	mov	r8,1
80002b82:	ef 68 ff f6 	st.b	r7[-10],r8
80002b86:	30 18       	mov	r8,1
80002b88:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char *Salt = (unsigned char *)Stored_values_ram.salt;
80002b8c:	4e 68       	lddpc	r8,80002d24 <pbkdf2_func+0x240>
80002b8e:	f0 c8 ff 60 	sub	r8,r8,-160
80002b92:	ef 48 ff f8 	st.w	r7[-8],r8
	
	while (block_num <= total_blocks)
80002b96:	cb b8       	rjmp	80002d0c <pbkdf2_func+0x228>
	{
		iteration_count = 0;
80002b98:	30 08       	mov	r8,0
80002b9a:	ef 58 ff f4 	st.h	r7[-12],r8
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002b9e:	c9 a8       	rjmp	80002cd2 <pbkdf2_func+0x1ee>
		{
			unsigned short int i;
			if (iteration_count == 0)
80002ba0:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002ba4:	30 08       	mov	r8,0
80002ba6:	f0 09 19 00 	cp.h	r9,r8
80002baa:	c5 e1       	brne	80002c66 <pbkdf2_func+0x182>
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002bac:	30 08       	mov	r8,0
80002bae:	ef 58 ff fe 	st.h	r7[-2],r8
80002bb2:	c1 38       	rjmp	80002bd8 <pbkdf2_func+0xf4>
				{
					Ubuffer[i] = Salt[i];
80002bb4:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002bb8:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002bbc:	ee fa ff f8 	ld.w	r10,r7[-8]
80002bc0:	f4 08 00 08 	add	r8,r10,r8
80002bc4:	11 88       	ld.ub	r8,r8[0x0]
80002bc6:	ee 09 00 09 	add	r9,r7,r9
80002bca:	f3 68 ff b0 	st.b	r9[-80],r8
		{
			unsigned short int i;
			if (iteration_count == 0)
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002bce:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002bd2:	2f f8       	sub	r8,-1
80002bd4:	ef 58 ff fe 	st.h	r7[-2],r8
80002bd8:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80002bdc:	31 f8       	mov	r8,31
80002bde:	f0 09 19 00 	cp.h	r9,r8
80002be2:	fe 98 ff e9 	brls	80002bb4 <pbkdf2_func+0xd0>
				{
					Ubuffer[i] = Salt[i];
				}
				Ubuffer[i++] = (block_num >> 24) & 0xFF;
80002be6:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002bea:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002bee:	b9 48       	asr	r8,0x18
80002bf0:	5c 58       	castu.b	r8
80002bf2:	ee 09 00 09 	add	r9,r7,r9
80002bf6:	f3 68 ff b0 	st.b	r9[-80],r8
80002bfa:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002bfe:	2f f8       	sub	r8,-1
80002c00:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 16) & 0xFF;
80002c04:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002c08:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002c0c:	b1 48       	asr	r8,0x10
80002c0e:	5c 58       	castu.b	r8
80002c10:	ee 09 00 09 	add	r9,r7,r9
80002c14:	f3 68 ff b0 	st.b	r9[-80],r8
80002c18:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002c1c:	2f f8       	sub	r8,-1
80002c1e:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 8) & 0xFF;
80002c22:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002c26:	ee 08 00 09 	add	r9,r7,r8
80002c2a:	30 08       	mov	r8,0
80002c2c:	f3 68 ff b0 	st.b	r9[-80],r8
80002c30:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002c34:	2f f8       	sub	r8,-1
80002c36:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i] = (block_num >> 0) & 0xFF;
80002c3a:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002c3e:	ee 08 00 09 	add	r9,r7,r8
80002c42:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002c46:	f3 68 ff b0 	st.b	r9[-80],r8
				hmac_sha256(password, 32, Ubuffer, 36, mac, 32);
80002c4a:	ee c8 00 2c 	sub	r8,r7,44
80002c4e:	ee ca 00 50 	sub	r10,r7,80
80002c52:	32 09       	mov	r9,32
80002c54:	1a d9       	st.w	--sp,r9
80002c56:	32 49       	mov	r9,36
80002c58:	32 0b       	mov	r11,32
80002c5a:	ee fc ff 6c 	ld.w	r12,r7[-148]
80002c5e:	f0 1f 00 33 	mcall	80002d28 <pbkdf2_func+0x244>
80002c62:	2f fd       	sub	sp,-4
80002c64:	c0 d8       	rjmp	80002c7e <pbkdf2_func+0x19a>
			}
			else
			{
				hmac_sha256((const unsigned char *)var_Password.index, 32, Ubuffer, 32, mac, 32);
80002c66:	4b 2c       	lddpc	r12,80002d2c <pbkdf2_func+0x248>
80002c68:	ee c8 00 2c 	sub	r8,r7,44
80002c6c:	ee ca 00 50 	sub	r10,r7,80
80002c70:	32 09       	mov	r9,32
80002c72:	1a d9       	st.w	--sp,r9
80002c74:	32 09       	mov	r9,32
80002c76:	32 0b       	mov	r11,32
80002c78:	f0 1f 00 2c 	mcall	80002d28 <pbkdf2_func+0x244>
80002c7c:	2f fd       	sub	sp,-4
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
80002c7e:	ee c9 00 2c 	sub	r9,r7,44
80002c82:	ee c8 00 90 	sub	r8,r7,144
80002c86:	30 8a       	mov	r10,8
80002c88:	12 9b       	mov	r11,r9
80002c8a:	10 9c       	mov	r12,r8
80002c8c:	f0 1f 00 29 	mcall	80002d30 <pbkdf2_func+0x24c>
			
			for (i = 0; i < hLen; i++)
80002c90:	30 08       	mov	r8,0
80002c92:	ef 58 ff fc 	st.h	r7[-4],r8
80002c96:	c1 28       	rjmp	80002cba <pbkdf2_func+0x1d6>
			{
				Ubuffer[i] = mac[i];
80002c98:	ef 19 ff fc 	ld.uh	r9,r7[-4]
80002c9c:	ef 18 ff fc 	ld.uh	r8,r7[-4]
80002ca0:	ee 08 00 08 	add	r8,r7,r8
80002ca4:	f1 38 ff d4 	ld.ub	r8,r8[-44]
80002ca8:	ee 09 00 09 	add	r9,r7,r9
80002cac:	f3 68 ff b0 	st.b	r9[-80],r8
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
			
			for (i = 0; i < hLen; i++)
80002cb0:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80002cb4:	2f f8       	sub	r8,-1
80002cb6:	ef 58 ff fc 	st.h	r7[-4],r8
80002cba:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80002cbe:	31 f8       	mov	r8,31
80002cc0:	f0 09 19 00 	cp.h	r9,r8
80002cc4:	fe 98 ff ea 	brls	80002c98 <pbkdf2_func+0x1b4>
			{
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
80002cc8:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80002ccc:	2f f8       	sub	r8,-1
80002cce:	ef 58 ff f4 	st.h	r7[-12],r8
	unsigned char *Salt = (unsigned char *)Stored_values_ram.salt;
	
	while (block_num <= total_blocks)
	{
		iteration_count = 0;
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002cd2:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002cd6:	e0 68 01 f3 	mov	r8,499
80002cda:	f0 09 19 00 	cp.h	r9,r8
80002cde:	fe 98 ff 61 	brls	80002ba0 <pbkdf2_func+0xbc>
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
80002ce2:	ee c9 00 90 	sub	r9,r7,144
80002ce6:	ee f8 ff 68 	ld.w	r8,r7[-152]
80002cea:	30 8a       	mov	r10,8
80002cec:	12 9b       	mov	r11,r9
80002cee:	10 9c       	mov	r12,r8
80002cf0:	f0 1f 00 10 	mcall	80002d30 <pbkdf2_func+0x24c>
		memset(Fbuffer, 0, 32);		
80002cf4:	ee c8 00 90 	sub	r8,r7,144
80002cf8:	32 0a       	mov	r10,32
80002cfa:	30 0b       	mov	r11,0
80002cfc:	10 9c       	mov	r12,r8
80002cfe:	f0 1f 00 0e 	mcall	80002d34 <pbkdf2_func+0x250>
		block_num++;
80002d02:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002d06:	2f f8       	sub	r8,-1
80002d08:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char Tbuffer[hLen] = {0};
	unsigned char Fbuffer[hLen] = {0};
	unsigned char total_blocks = hLen / hLen, block_num = 1;
	unsigned char *Salt = (unsigned char *)Stored_values_ram.salt;
	
	while (block_num <= total_blocks)
80002d0c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80002d10:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80002d14:	f0 09 18 00 	cp.b	r9,r8
80002d18:	fe 98 ff 40 	brls	80002b98 <pbkdf2_func+0xb4>
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
		memset(Fbuffer, 0, 32);		
		block_num++;
	}
80002d1c:	2d ad       	sub	sp,-152
80002d1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d22:	00 00       	add	r0,r0
80002d24:	00 00       	add	r0,r0
80002d26:	0a 3c       	cp.w	r12,r5
80002d28:	80 00       	ld.sh	r0,r0[0x0]
80002d2a:	23 74       	sub	r4,55
80002d2c:	00 00       	add	r0,r0
80002d2e:	0a 1c       	sub	r12,r5
80002d30:	80 00       	ld.sh	r0,r0[0x0]
80002d32:	2e 6c       	sub	r12,-26
80002d34:	80 00       	ld.sh	r0,r0[0x0]
80002d36:	e7 d6       	*unknown*

80002d38 <encrypt_password>:
volatile uint256_t var_Salt;
volatile uint8_t DK_aes_key[32] = {0};


void encrypt_password(uint32_t *password, uint32_t *digest)
{
80002d38:	eb cd 40 80 	pushm	r7,lr
80002d3c:	1a 97       	mov	r7,sp
80002d3e:	20 2d       	sub	sp,8
80002d40:	ef 4c ff fc 	st.w	r7[-4],r12
80002d44:	ef 4b ff f8 	st.w	r7[-8],r11
	//uint8_t temp_dk[32] = {0};
	pbkdf2_func((uint8_t *)password, DK_aes_key);
80002d48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002d4c:	48 cb       	lddpc	r11,80002d7c <encrypt_password+0x44>
80002d4e:	10 9c       	mov	r12,r8
80002d50:	f0 1f 00 0c 	mcall	80002d80 <encrypt_password+0x48>
	sha256(DK_aes_key, 32, (uint8_t *)digest);
80002d54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d58:	10 9a       	mov	r10,r8
80002d5a:	32 0b       	mov	r11,32
80002d5c:	48 8c       	lddpc	r12,80002d7c <encrypt_password+0x44>
80002d5e:	f0 1f 00 0a 	mcall	80002d84 <encrypt_password+0x4c>
	apply_aes_encryption(&AVR32_AES, digest, 0, 32, 0x00000000);
80002d62:	30 08       	mov	r8,0
80002d64:	32 09       	mov	r9,32
80002d66:	30 0a       	mov	r10,0
80002d68:	ee fb ff f8 	ld.w	r11,r7[-8]
80002d6c:	fc 7c 00 00 	mov	r12,-196608
80002d70:	f0 1f 00 06 	mcall	80002d88 <encrypt_password+0x50>
}
80002d74:	2f ed       	sub	sp,-8
80002d76:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d7a:	00 00       	add	r0,r0
80002d7c:	00 00       	add	r0,r0
80002d7e:	02 94       	mov	r4,r1
80002d80:	80 00       	ld.sh	r0,r0[0x0]
80002d82:	2a e4       	sub	r4,-82
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	27 5c       	sub	r12,117
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	46 54       	lddsp	r4,sp[0x194]

80002d8c <random_lcg>:


uint32_t random_lcg (void)
{
80002d8c:	eb cd 40 80 	pushm	r7,lr
80002d90:	1a 97       	mov	r7,sp
	rseed = (rseed * 1103515245 + 12345) & RAND_MAX;
80002d92:	48 a8       	lddpc	r8,80002db8 <random_lcg+0x2c>
80002d94:	70 09       	ld.w	r9,r8[0x0]
80002d96:	e0 68 4e 6d 	mov	r8,20077
80002d9a:	ea 18 41 c6 	orh	r8,0x41c6
80002d9e:	f2 08 02 48 	mul	r8,r9,r8
80002da2:	f0 c8 cf c7 	sub	r8,r8,-12345
80002da6:	f3 d8 c0 1f 	bfextu	r9,r8,0x0,0x1f
80002daa:	48 48       	lddpc	r8,80002db8 <random_lcg+0x2c>
80002dac:	91 09       	st.w	r8[0x0],r9
	return rseed;
80002dae:	48 38       	lddpc	r8,80002db8 <random_lcg+0x2c>
80002db0:	70 08       	ld.w	r8,r8[0x0]
}
80002db2:	10 9c       	mov	r12,r8
80002db4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002db8:	00 00       	add	r0,r0
80002dba:	02 8c       	andn	r12,r1

80002dbc <calculate_salt>:

//void random_256 ()

void calculate_salt(void)
{
80002dbc:	eb cd 40 80 	pushm	r7,lr
80002dc0:	1a 97       	mov	r7,sp
80002dc2:	20 1d       	sub	sp,4
	uint32_t random_value = 0;
80002dc4:	30 08       	mov	r8,0
80002dc6:	ef 48 ff fc 	st.w	r7[-4],r8
	calculate_hash(pass_code, 8, var_Hkey.index); // Calculates sha256 of the keys pressed in var_W*10 msec interval and stores it in var_Hkey
80002dca:	49 e9       	lddpc	r9,80002e40 <calculate_salt+0x84>
80002dcc:	49 e8       	lddpc	r8,80002e44 <calculate_salt+0x88>
80002dce:	70 08       	ld.w	r8,r8[0x0]
80002dd0:	12 9a       	mov	r10,r9
80002dd2:	30 8b       	mov	r11,8
80002dd4:	10 9c       	mov	r12,r8
80002dd6:	f0 1f 00 1d 	mcall	80002e48 <calculate_salt+0x8c>
 	
	random_value = random_lcg();	
80002dda:	f0 1f 00 1d 	mcall	80002e4c <calculate_salt+0x90>
80002dde:	18 98       	mov	r8,r12
80002de0:	ef 48 ff fc 	st.w	r7[-4],r8
	
	calculate_hash(&random_value, 1, var_R.index);
80002de4:	49 b9       	lddpc	r9,80002e50 <calculate_salt+0x94>
80002de6:	ee c8 00 04 	sub	r8,r7,4
80002dea:	12 9a       	mov	r10,r9
80002dec:	30 1b       	mov	r11,1
80002dee:	10 9c       	mov	r12,r8
80002df0:	f0 1f 00 16 	mcall	80002e48 <calculate_salt+0x8c>
	
	xor_func(var_R.index, var_Hkey.index, 8);
80002df4:	49 39       	lddpc	r9,80002e40 <calculate_salt+0x84>
80002df6:	49 78       	lddpc	r8,80002e50 <calculate_salt+0x94>
80002df8:	30 8a       	mov	r10,8
80002dfa:	12 9b       	mov	r11,r9
80002dfc:	10 9c       	mov	r12,r8
80002dfe:	f0 1f 00 16 	mcall	80002e54 <calculate_salt+0x98>
	
	calculate_hash(var_R.index, 8, var_T.index);
80002e02:	49 69       	lddpc	r9,80002e58 <calculate_salt+0x9c>
80002e04:	49 38       	lddpc	r8,80002e50 <calculate_salt+0x94>
80002e06:	12 9a       	mov	r10,r9
80002e08:	30 8b       	mov	r11,8
80002e0a:	10 9c       	mov	r12,r8
80002e0c:	f0 1f 00 0f 	mcall	80002e48 <calculate_salt+0x8c>
 	
	xor_func(var_Salt.index, var_T.index, 8);
80002e10:	49 29       	lddpc	r9,80002e58 <calculate_salt+0x9c>
80002e12:	49 38       	lddpc	r8,80002e5c <calculate_salt+0xa0>
80002e14:	30 8a       	mov	r10,8
80002e16:	12 9b       	mov	r11,r9
80002e18:	10 9c       	mov	r12,r8
80002e1a:	f0 1f 00 0f 	mcall	80002e54 <calculate_salt+0x98>
	
	if (enter_button_status == THIRD_TIME_PRESSED)
80002e1e:	49 18       	lddpc	r8,80002e60 <calculate_salt+0xa4>
80002e20:	11 88       	ld.ub	r8,r8[0x0]
80002e22:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002e26:	30 68       	mov	r8,6
80002e28:	f0 09 18 00 	cp.b	r9,r8
80002e2c:	c0 41       	brne	80002e34 <calculate_salt+0x78>
	{
		save_salt_to_mcu();
80002e2e:	f0 1f 00 0e 	mcall	80002e64 <calculate_salt+0xa8>
80002e32:	c0 38       	rjmp	80002e38 <calculate_salt+0x7c>
	}
	else
	{
		Start_W_timer();	
80002e34:	f0 1f 00 0d 	mcall	80002e68 <calculate_salt+0xac>
	}
	
}
80002e38:	2f fd       	sub	sp,-4
80002e3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e3e:	00 00       	add	r0,r0
80002e40:	00 00       	add	r0,r0
80002e42:	0b 00       	ld.w	r0,r5++
80002e44:	00 00       	add	r0,r0
80002e46:	0b 80       	ld.ub	r0,r5[0x0]
80002e48:	80 00       	ld.sh	r0,r0[0x0]
80002e4a:	30 a8       	mov	r8,10
80002e4c:	80 00       	ld.sh	r0,r0[0x0]
80002e4e:	2d 8c       	sub	r12,-40
80002e50:	00 00       	add	r0,r0
80002e52:	0b 40       	ld.w	r0,--r5
80002e54:	80 00       	ld.sh	r0,r0[0x0]
80002e56:	2e 6c       	sub	r12,-26
80002e58:	00 00       	add	r0,r0
80002e5a:	0b 20       	ld.uh	r0,r5++
80002e5c:	00 00       	add	r0,r0
80002e5e:	0b 60       	ld.uh	r0,--r5
80002e60:	00 00       	add	r0,r0
80002e62:	03 fa       	ld.ub	r10,r1[0x7]
80002e64:	80 00       	ld.sh	r0,r0[0x0]
80002e66:	2e d8       	sub	r8,-19
80002e68:	80 00       	ld.sh	r0,r0[0x0]
80002e6a:	30 3c       	mov	r12,3

80002e6c <xor_func>:

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
80002e6c:	eb cd 40 80 	pushm	r7,lr
80002e70:	1a 97       	mov	r7,sp
80002e72:	20 4d       	sub	sp,16
80002e74:	ef 4c ff f8 	st.w	r7[-8],r12
80002e78:	ef 4b ff f4 	st.w	r7[-12],r11
80002e7c:	14 98       	mov	r8,r10
80002e7e:	ef 68 ff f0 	st.b	r7[-16],r8
	unsigned char i = 0;
80002e82:	30 08       	mov	r8,0
80002e84:	ef 68 ff ff 	st.b	r7[-1],r8
	while (i++ < len)
80002e88:	c1 58       	rjmp	80002eb2 <xor_func+0x46>
	{
		*value1 = *value1 ^ *value2;
80002e8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002e8e:	70 09       	ld.w	r9,r8[0x0]
80002e90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e94:	70 08       	ld.w	r8,r8[0x0]
80002e96:	10 59       	eor	r9,r8
80002e98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002e9c:	91 09       	st.w	r8[0x0],r9
		value1++;	value2++;
80002e9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ea2:	2f c8       	sub	r8,-4
80002ea4:	ef 48 ff f8 	st.w	r7[-8],r8
80002ea8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002eac:	2f c8       	sub	r8,-4
80002eae:	ef 48 ff f4 	st.w	r7[-12],r8
}

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
	unsigned char i = 0;
	while (i++ < len)
80002eb2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002eb6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002eba:	f0 09 18 00 	cp.b	r9,r8
80002ebe:	5f 38       	srlo	r8
80002ec0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002ec4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002ec8:	2f f8       	sub	r8,-1
80002eca:	ef 68 ff ff 	st.b	r7[-1],r8
80002ece:	58 09       	cp.w	r9,0
80002ed0:	cd d1       	brne	80002e8a <xor_func+0x1e>
	{
		*value1 = *value1 ^ *value2;
		value1++;	value2++;
	}
}
80002ed2:	2f cd       	sub	sp,-16
80002ed4:	e3 cd 80 80 	ldm	sp++,r7,pc

80002ed8 <save_salt_to_mcu>:

void save_salt_to_mcu(void)
{
80002ed8:	eb cd 40 80 	pushm	r7,lr
80002edc:	1a 97       	mov	r7,sp
80002ede:	20 9d       	sub	sp,36
	//volatile salt_t *salt = &SALT_STRUCT;
	uint32_t temp_encypted_password[8] = {0};
80002ee0:	ee c8 00 24 	sub	r8,r7,36
80002ee4:	30 0a       	mov	r10,0
80002ee6:	30 0b       	mov	r11,0
80002ee8:	f0 eb 00 00 	st.d	r8[0],r10
80002eec:	2f 88       	sub	r8,-8
80002eee:	30 0a       	mov	r10,0
80002ef0:	30 0b       	mov	r11,0
80002ef2:	f0 eb 00 00 	st.d	r8[0],r10
80002ef6:	2f 88       	sub	r8,-8
80002ef8:	30 0a       	mov	r10,0
80002efa:	30 0b       	mov	r11,0
80002efc:	f0 eb 00 00 	st.d	r8[0],r10
80002f00:	2f 88       	sub	r8,-8
80002f02:	30 0a       	mov	r10,0
80002f04:	30 0b       	mov	r11,0
80002f06:	f0 eb 00 00 	st.d	r8[0],r10
80002f0a:	2f 88       	sub	r8,-8
	uint8_t i;
	
	memcpy((uint8_t *)Stored_values_ram.salt, (const uint8_t *)var_Salt.index, 32);
80002f0c:	48 e8       	lddpc	r8,80002f44 <save_salt_to_mcu+0x6c>
80002f0e:	f0 c8 ff 60 	sub	r8,r8,-160
80002f12:	32 0a       	mov	r10,32
80002f14:	48 db       	lddpc	r11,80002f48 <save_salt_to_mcu+0x70>
80002f16:	10 9c       	mov	r12,r8
80002f18:	f0 1f 00 0d 	mcall	80002f4c <save_salt_to_mcu+0x74>
	encrypt_password(temp_password1, temp_encypted_password);
80002f1c:	ee c8 00 24 	sub	r8,r7,36
80002f20:	10 9b       	mov	r11,r8
80002f22:	48 cc       	lddpc	r12,80002f50 <save_salt_to_mcu+0x78>
80002f24:	f0 1f 00 0c 	mcall	80002f54 <save_salt_to_mcu+0x7c>
	memcpy((uint8_t *)Stored_values_ram.unlock_password, (const uint8_t *)temp_encypted_password, 32);	
80002f28:	ee c8 00 24 	sub	r8,r7,36
80002f2c:	32 0a       	mov	r10,32
80002f2e:	10 9b       	mov	r11,r8
80002f30:	48 5c       	lddpc	r12,80002f44 <save_salt_to_mcu+0x6c>
80002f32:	f0 1f 00 07 	mcall	80002f4c <save_salt_to_mcu+0x74>
	Calculate_block_crc();
80002f36:	f0 1f 00 09 	mcall	80002f58 <save_salt_to_mcu+0x80>
	Update_stored_values();
80002f3a:	f0 1f 00 09 	mcall	80002f5c <save_salt_to_mcu+0x84>
	
}
80002f3e:	2f 7d       	sub	sp,-36
80002f40:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f44:	00 00       	add	r0,r0
80002f46:	0a 3c       	cp.w	r12,r5
80002f48:	00 00       	add	r0,r0
80002f4a:	0b 60       	ld.uh	r0,--r5
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	e6 8e 00 00 	brqs	800c2f4e <Stored_values_flash+0x8314e>
80002f52:	02 68       	and	r8,r1
80002f54:	80 00       	ld.sh	r0,r0[0x0]
80002f56:	2d 38       	sub	r8,-45
80002f58:	80 00       	ld.sh	r0,r0[0x0]
80002f5a:	30 80       	mov	r0,8
80002f5c:	80 00       	ld.sh	r0,r0[0x0]
80002f5e:	2f f4       	sub	r4,-1

80002f60 <save_sequence_to_mcu>:

void save_sequence_to_mcu(void)
{
80002f60:	eb cd 40 80 	pushm	r7,lr
80002f64:	1a 97       	mov	r7,sp
80002f66:	20 8d       	sub	sp,32
	uint32_t temp_digest[8];
	
	hash_the_password(temp_password1, temp_digest);
80002f68:	ee c8 00 20 	sub	r8,r7,32
80002f6c:	10 9b       	mov	r11,r8
80002f6e:	48 ac       	lddpc	r12,80002f94 <save_sequence_to_mcu+0x34>
80002f70:	f0 1f 00 0a 	mcall	80002f98 <save_sequence_to_mcu+0x38>
	memcpy_ram2ram((uint8_t *)Stored_values_ram.device_id_confirm, (const uint8_t *)temp_digest, 32);
80002f74:	ee c9 00 20 	sub	r9,r7,32
80002f78:	48 98       	lddpc	r8,80002f9c <save_sequence_to_mcu+0x3c>
80002f7a:	2a 08       	sub	r8,-96
80002f7c:	32 0a       	mov	r10,32
80002f7e:	12 9b       	mov	r11,r9
80002f80:	10 9c       	mov	r12,r8
80002f82:	f0 1f 00 08 	mcall	80002fa0 <save_sequence_to_mcu+0x40>
	Calculate_block_crc();
80002f86:	f0 1f 00 08 	mcall	80002fa4 <save_sequence_to_mcu+0x44>
	Update_stored_values();
80002f8a:	f0 1f 00 08 	mcall	80002fa8 <save_sequence_to_mcu+0x48>
}
80002f8e:	2f 8d       	sub	sp,-32
80002f90:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f94:	00 00       	add	r0,r0
80002f96:	02 68       	and	r8,r1
80002f98:	80 00       	ld.sh	r0,r0[0x0]
80002f9a:	2f ac       	sub	r12,-6
80002f9c:	00 00       	add	r0,r0
80002f9e:	0a 3c       	cp.w	r12,r5
80002fa0:	80 00       	ld.sh	r0,r0[0x0]
80002fa2:	e6 8e 80 00 	brqs	800d2fa2 <Stored_values_flash+0x931a2>
80002fa6:	30 80       	mov	r0,8
80002fa8:	80 00       	ld.sh	r0,r0[0x0]
80002faa:	2f f4       	sub	r4,-1

80002fac <hash_the_password>:

void hash_the_password(uint32_t *password, uint32_t *digest)
{
80002fac:	eb cd 40 80 	pushm	r7,lr
80002fb0:	1a 97       	mov	r7,sp
80002fb2:	20 2d       	sub	sp,8
80002fb4:	ef 4c ff fc 	st.w	r7[-4],r12
80002fb8:	ef 4b ff f8 	st.w	r7[-8],r11
	xor_func(password, Stored_values_ram.salt, 8);
80002fbc:	48 b8       	lddpc	r8,80002fe8 <hash_the_password+0x3c>
80002fbe:	f0 c8 ff 60 	sub	r8,r8,-160
80002fc2:	30 8a       	mov	r10,8
80002fc4:	10 9b       	mov	r11,r8
80002fc6:	ee fc ff fc 	ld.w	r12,r7[-4]
80002fca:	f0 1f 00 09 	mcall	80002fec <hash_the_password+0x40>
	sha256((uint8_t *)password, 32, (uint8_t *)digest);	
80002fce:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002fd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002fd6:	12 9a       	mov	r10,r9
80002fd8:	32 0b       	mov	r11,32
80002fda:	10 9c       	mov	r12,r8
80002fdc:	f0 1f 00 05 	mcall	80002ff0 <hash_the_password+0x44>
}
80002fe0:	2f ed       	sub	sp,-8
80002fe2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fe6:	00 00       	add	r0,r0
80002fe8:	00 00       	add	r0,r0
80002fea:	0a 3c       	cp.w	r12,r5
80002fec:	80 00       	ld.sh	r0,r0[0x0]
80002fee:	2e 6c       	sub	r12,-26
80002ff0:	80 00       	ld.sh	r0,r0[0x0]
80002ff2:	27 5c       	sub	r12,117

80002ff4 <Update_stored_values>:

void Update_stored_values(void)
{
80002ff4:	eb cd 40 80 	pushm	r7,lr
80002ff8:	1a 97       	mov	r7,sp
	flashc_memcpy((void *)&Stored_values_flash, (void *)&Stored_values_ram, sizeof(Stored_values_ram), true);
80002ffa:	30 19       	mov	r9,1
80002ffc:	e0 6a 00 c4 	mov	r10,196
80003000:	48 3b       	lddpc	r11,8000300c <Update_stored_values+0x18>
80003002:	48 4c       	lddpc	r12,80003010 <Update_stored_values+0x1c>
80003004:	f0 1f 00 04 	mcall	80003014 <Update_stored_values+0x20>
}
80003008:	e3 cd 80 80 	ldm	sp++,r7,pc
8000300c:	00 00       	add	r0,r0
8000300e:	0a 3c       	cp.w	r12,r5
80003010:	80 03       	ld.sh	r3,r0[0x0]
80003012:	fe 00       	*unknown*
80003014:	80 00       	ld.sh	r0,r0[0x0]
80003016:	86 a4       	ld.uh	r4,r3[0x4]

80003018 <Load_stored_values>:

void Load_stored_values(void)
{
80003018:	eb cd 40 80 	pushm	r7,lr
8000301c:	1a 97       	mov	r7,sp
	memcpy_code2ram((void *)&Stored_values_ram, (uint8_t *)&Stored_values_flash, sizeof(Stored_values_ram));
8000301e:	e0 6a 00 c4 	mov	r10,196
80003022:	48 4b       	lddpc	r11,80003030 <Load_stored_values+0x18>
80003024:	48 4c       	lddpc	r12,80003034 <Load_stored_values+0x1c>
80003026:	f0 1f 00 05 	mcall	80003038 <Load_stored_values+0x20>
}
8000302a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000302e:	00 00       	add	r0,r0
80003030:	80 03       	ld.sh	r3,r0[0x0]
80003032:	fe 00 00 00 	add	r0,pc,r0
80003036:	0a 3c       	cp.w	r12,r5
80003038:	80 00       	ld.sh	r0,r0[0x0]
8000303a:	e6 8e eb cd 	brqs	800e07d4 <Stored_values_flash+0xa09d4>

8000303c <Start_W_timer>:

void Start_W_timer(void)
{
8000303c:	eb cd 40 80 	pushm	r7,lr
80003040:	1a 97       	mov	r7,sp
	var_W = random_lcg() % 500 + 50;
80003042:	f0 1f 00 0d 	mcall	80003074 <Start_W_timer+0x38>
80003046:	18 9a       	mov	r10,r12
80003048:	e0 68 4d d3 	mov	r8,19923
8000304c:	ea 18 10 62 	orh	r8,0x1062
80003050:	f4 08 06 48 	mulu.d	r8,r10,r8
80003054:	f2 08 16 05 	lsr	r8,r9,0x5
80003058:	e0 69 01 f4 	mov	r9,500
8000305c:	b3 38       	mul	r8,r9
8000305e:	f4 08 01 08 	sub	r8,r10,r8
80003062:	f0 c9 ff ce 	sub	r9,r8,-50
80003066:	48 58       	lddpc	r8,80003078 <Start_W_timer+0x3c>
80003068:	91 09       	st.w	r8[0x0],r9
	var_W_ticks = 0;	
8000306a:	48 58       	lddpc	r8,8000307c <Start_W_timer+0x40>
8000306c:	30 09       	mov	r9,0
8000306e:	91 09       	st.w	r8[0x0],r9
}
80003070:	e3 cd 80 80 	ldm	sp++,r7,pc
80003074:	80 00       	ld.sh	r0,r0[0x0]
80003076:	2d 8c       	sub	r12,-40
80003078:	00 00       	add	r0,r0
8000307a:	01 28       	ld.uh	r8,r0++
8000307c:	00 00       	add	r0,r0
8000307e:	02 90       	mov	r0,r1

80003080 <Calculate_block_crc>:

void Calculate_block_crc(void)
{
80003080:	eb cd 40 80 	pushm	r7,lr
80003084:	1a 97       	mov	r7,sp
	Stored_values_ram.block_crc = crcFast((const uint8_t *)&Stored_values_ram, sizeof(Stored_values_ram) - 2);
80003086:	48 78       	lddpc	r8,800030a0 <Calculate_block_crc+0x20>
80003088:	e0 6b 00 c2 	mov	r11,194
8000308c:	10 9c       	mov	r12,r8
8000308e:	f0 1f 00 06 	mcall	800030a4 <Calculate_block_crc+0x24>
80003092:	18 98       	mov	r8,r12
80003094:	5c 88       	casts.h	r8
80003096:	48 39       	lddpc	r9,800030a0 <Calculate_block_crc+0x20>
80003098:	f3 58 00 c0 	st.h	r9[192],r8
8000309c:	e3 cd 80 80 	ldm	sp++,r7,pc
800030a0:	00 00       	add	r0,r0
800030a2:	0a 3c       	cp.w	r12,r5
800030a4:	80 00       	ld.sh	r0,r0[0x0]
800030a6:	20 9c       	sub	r12,9

800030a8 <calculate_hash>:
unsigned long Rotate_right (unsigned long number, int bits);



 void calculate_hash (uint32_t *input_array, uint8_t length, uint32_t *output_array)
 {
800030a8:	eb cd 40 c0 	pushm	r6-r7,lr
800030ac:	1a 97       	mov	r7,sp
800030ae:	20 ed       	sub	sp,56
800030b0:	ef 4c ff d0 	st.w	r7[-48],r12
800030b4:	16 98       	mov	r8,r11
800030b6:	ef 4a ff c8 	st.w	r7[-56],r10
800030ba:	ef 68 ff cc 	st.b	r7[-52],r8
	 int i;
	 unsigned long int S0, S1;
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
800030be:	fe f8 03 8a 	ld.w	r8,pc[906]
800030c2:	ef 48 ff e0 	st.w	r7[-32],r8
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
800030c6:	fe f8 03 86 	ld.w	r8,pc[902]
800030ca:	ef 48 ff ec 	st.w	r7[-20],r8
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
800030ce:	30 08       	mov	r8,0
800030d0:	ef 48 ff d4 	st.w	r7[-44],r8
800030d4:	c1 68       	rjmp	80003100 <calculate_hash+0x58>
	 {
		 Key_ptr[i] = input_array[i];
800030d6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030da:	a3 68       	lsl	r8,0x2
800030dc:	ee f9 ff e0 	ld.w	r9,r7[-32]
800030e0:	f2 08 00 08 	add	r8,r9,r8
800030e4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800030e8:	a3 69       	lsl	r9,0x2
800030ea:	ee fa ff d0 	ld.w	r10,r7[-48]
800030ee:	f4 09 00 09 	add	r9,r10,r9
800030f2:	72 09       	ld.w	r9,r9[0x0]
800030f4:	91 09       	st.w	r8[0x0],r9
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
800030f6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030fa:	2f f8       	sub	r8,-1
800030fc:	ef 48 ff d4 	st.w	r7[-44],r8
80003100:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80003104:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003108:	10 39       	cp.w	r9,r8
8000310a:	fe 99 ff e6 	brgt	800030d6 <calculate_hash+0x2e>
	 {
		 Key_ptr[i] = input_array[i];
	 }
	 
	 PadtheMessage(length << 2);
8000310e:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80003112:	a3 68       	lsl	r8,0x2
80003114:	5c 58       	castu.b	r8
80003116:	10 9c       	mov	r12,r8
80003118:	f0 1f 00 ce 	mcall	80003450 <calculate_hash+0x3a8>
	 
	 
	 W = Message_Schedule_W;
8000311c:	fe f8 03 38 	ld.w	r8,pc[824]
80003120:	ef 48 ff e4 	st.w	r7[-28],r8
	 M = (unsigned long int *)Padded_Message;
80003124:	fe f8 03 24 	ld.w	r8,pc[804]
80003128:	ef 48 ff e8 	st.w	r7[-24],r8
	 for (i = 0; i < 16; i++)
8000312c:	30 08       	mov	r8,0
8000312e:	ef 48 ff d4 	st.w	r7[-44],r8
80003132:	c1 68       	rjmp	8000315e <calculate_hash+0xb6>
	 {
		W[i] = M[i];
80003134:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003138:	a3 68       	lsl	r8,0x2
8000313a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000313e:	f2 08 00 08 	add	r8,r9,r8
80003142:	ee f9 ff d4 	ld.w	r9,r7[-44]
80003146:	a3 69       	lsl	r9,0x2
80003148:	ee fa ff e8 	ld.w	r10,r7[-24]
8000314c:	f4 09 00 09 	add	r9,r10,r9
80003150:	72 09       	ld.w	r9,r9[0x0]
80003152:	91 09       	st.w	r8[0x0],r9
	 PadtheMessage(length << 2);
	 
	 
	 W = Message_Schedule_W;
	 M = (unsigned long int *)Padded_Message;
	 for (i = 0; i < 16; i++)
80003154:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003158:	2f f8       	sub	r8,-1
8000315a:	ef 48 ff d4 	st.w	r7[-44],r8
8000315e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003162:	58 f8       	cp.w	r8,15
80003164:	fe 9a ff e8 	brle	80003134 <calculate_hash+0x8c>
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
80003168:	31 08       	mov	r8,16
8000316a:	ef 48 ff d4 	st.w	r7[-44],r8
8000316e:	c7 58       	rjmp	80003258 <calculate_hash+0x1b0>
	 {
		 S0 = Rotate_right(Message_Schedule_W[i - 15], 7) XOR Rotate_right(Message_Schedule_W[i - 15], 18) XOR (Message_Schedule_W[i - 15] >> 3);
80003170:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003174:	f0 c9 00 0f 	sub	r9,r8,15
80003178:	fe f8 02 dc 	ld.w	r8,pc[732]
8000317c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003180:	30 7b       	mov	r11,7
80003182:	10 9c       	mov	r12,r8
80003184:	f0 1f 00 b5 	mcall	80003458 <calculate_hash+0x3b0>
80003188:	18 96       	mov	r6,r12
8000318a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000318e:	f0 c9 00 0f 	sub	r9,r8,15
80003192:	fe f8 02 c2 	ld.w	r8,pc[706]
80003196:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000319a:	31 2b       	mov	r11,18
8000319c:	10 9c       	mov	r12,r8
8000319e:	f0 1f 00 af 	mcall	80003458 <calculate_hash+0x3b0>
800031a2:	18 98       	mov	r8,r12
800031a4:	ed e8 20 09 	eor	r9,r6,r8
800031a8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031ac:	f0 ca 00 0f 	sub	r10,r8,15
800031b0:	fe f8 02 a4 	ld.w	r8,pc[676]
800031b4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800031b8:	a3 98       	lsr	r8,0x3
800031ba:	f3 e8 20 08 	eor	r8,r9,r8
800031be:	ef 48 ff d8 	st.w	r7[-40],r8
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
800031c2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031c6:	f0 c9 00 02 	sub	r9,r8,2
800031ca:	fe f8 02 8a 	ld.w	r8,pc[650]
800031ce:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800031d2:	31 1b       	mov	r11,17
800031d4:	10 9c       	mov	r12,r8
800031d6:	f0 1f 00 a1 	mcall	80003458 <calculate_hash+0x3b0>
800031da:	18 96       	mov	r6,r12
800031dc:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031e0:	f0 c9 00 02 	sub	r9,r8,2
800031e4:	fe f8 02 70 	ld.w	r8,pc[624]
800031e8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800031ec:	31 3b       	mov	r11,19
800031ee:	10 9c       	mov	r12,r8
800031f0:	f0 1f 00 9a 	mcall	80003458 <calculate_hash+0x3b0>
800031f4:	18 98       	mov	r8,r12
800031f6:	ed e8 20 09 	eor	r9,r6,r8
800031fa:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031fe:	f0 ca 00 02 	sub	r10,r8,2
80003202:	fe f8 02 52 	ld.w	r8,pc[594]
80003206:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000320a:	ab 88       	lsr	r8,0xa
8000320c:	f3 e8 20 08 	eor	r8,r9,r8
80003210:	ef 48 ff dc 	st.w	r7[-36],r8
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
80003214:	ee f9 ff d4 	ld.w	r9,r7[-44]
80003218:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000321c:	f0 ca 00 10 	sub	r10,r8,16
80003220:	fe f8 02 34 	ld.w	r8,pc[564]
80003224:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80003228:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000322c:	10 0a       	add	r10,r8
8000322e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003232:	f0 cb 00 07 	sub	r11,r8,7
80003236:	fe f8 02 1e 	ld.w	r8,pc[542]
8000323a:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000323e:	10 0a       	add	r10,r8
80003240:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003244:	10 0a       	add	r10,r8
80003246:	fe f8 02 0e 	ld.w	r8,pc[526]
8000324a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
8000324e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003252:	2f f8       	sub	r8,-1
80003254:	ef 48 ff d4 	st.w	r7[-44],r8
80003258:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000325c:	e0 48 00 3f 	cp.w	r8,63
80003260:	fe 9a ff 88 	brle	80003170 <calculate_hash+0xc8>
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
80003264:	30 08       	mov	r8,0
80003266:	ef 48 ff d4 	st.w	r7[-44],r8
8000326a:	c1 38       	rjmp	80003290 <calculate_hash+0x1e8>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
8000326c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003270:	a3 68       	lsl	r8,0x2
80003272:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003276:	f2 08 00 08 	add	r8,r9,r8
8000327a:	ee fa ff d4 	ld.w	r10,r7[-44]
8000327e:	4f 89       	lddpc	r9,8000345c <calculate_hash+0x3b4>
80003280:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80003284:	91 09       	st.w	r8[0x0],r9
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
80003286:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000328a:	2f f8       	sub	r8,-1
8000328c:	ef 48 ff d4 	st.w	r7[-44],r8
80003290:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003294:	58 78       	cp.w	r8,7
80003296:	fe 9a ff eb 	brle	8000326c <calculate_hash+0x1c4>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
8000329a:	30 08       	mov	r8,0
8000329c:	ef 48 ff d4 	st.w	r7[-44],r8
800032a0:	ca 68       	rjmp	800033ec <calculate_hash+0x344>
	 {
		 unsigned long int maj, t2, ch, t1;
		 S0 = Rotate_right(chunk.a, 2) XOR Rotate_right(chunk.a, 13) XOR Rotate_right(chunk.a, 22);
800032a2:	4e b8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800032a4:	70 08       	ld.w	r8,r8[0x0]
800032a6:	30 2b       	mov	r11,2
800032a8:	10 9c       	mov	r12,r8
800032aa:	f0 1f 00 6c 	mcall	80003458 <calculate_hash+0x3b0>
800032ae:	18 96       	mov	r6,r12
800032b0:	4e 78       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800032b2:	70 08       	ld.w	r8,r8[0x0]
800032b4:	30 db       	mov	r11,13
800032b6:	10 9c       	mov	r12,r8
800032b8:	f0 1f 00 68 	mcall	80003458 <calculate_hash+0x3b0>
800032bc:	18 98       	mov	r8,r12
800032be:	10 56       	eor	r6,r8
800032c0:	4e 38       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800032c2:	70 08       	ld.w	r8,r8[0x0]
800032c4:	31 6b       	mov	r11,22
800032c6:	10 9c       	mov	r12,r8
800032c8:	f0 1f 00 64 	mcall	80003458 <calculate_hash+0x3b0>
800032cc:	18 98       	mov	r8,r12
800032ce:	ed e8 20 08 	eor	r8,r6,r8
800032d2:	ef 48 ff d8 	st.w	r7[-40],r8
		 maj = (chunk.a & chunk.b) XOR (chunk.a & chunk.c) XOR (chunk.b & chunk.c);
800032d6:	4d e8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800032d8:	70 09       	ld.w	r9,r8[0x0]
800032da:	4d d8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800032dc:	70 18       	ld.w	r8,r8[0x4]
800032de:	10 69       	and	r9,r8
800032e0:	4d b8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800032e2:	70 0a       	ld.w	r10,r8[0x0]
800032e4:	4d a8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800032e6:	70 28       	ld.w	r8,r8[0x8]
800032e8:	f5 e8 00 08 	and	r8,r10,r8
800032ec:	10 59       	eor	r9,r8
800032ee:	4d 88       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800032f0:	70 1a       	ld.w	r10,r8[0x4]
800032f2:	4d 78       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800032f4:	70 28       	ld.w	r8,r8[0x8]
800032f6:	f5 e8 00 08 	and	r8,r10,r8
800032fa:	f3 e8 20 08 	eor	r8,r9,r8
800032fe:	ef 48 ff f0 	st.w	r7[-16],r8
		 t2 = S0 + maj;
80003302:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003306:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000330a:	f2 08 00 08 	add	r8,r9,r8
8000330e:	ef 48 ff f4 	st.w	r7[-12],r8
		 S1 = Rotate_right(chunk.e, 6) XOR Rotate_right(chunk.e, 11) XOR Rotate_right(chunk.e, 25);
80003312:	4c f8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
80003314:	70 48       	ld.w	r8,r8[0x10]
80003316:	30 6b       	mov	r11,6
80003318:	10 9c       	mov	r12,r8
8000331a:	f0 1f 00 50 	mcall	80003458 <calculate_hash+0x3b0>
8000331e:	18 96       	mov	r6,r12
80003320:	4c b8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
80003322:	70 48       	ld.w	r8,r8[0x10]
80003324:	30 bb       	mov	r11,11
80003326:	10 9c       	mov	r12,r8
80003328:	f0 1f 00 4c 	mcall	80003458 <calculate_hash+0x3b0>
8000332c:	18 98       	mov	r8,r12
8000332e:	10 56       	eor	r6,r8
80003330:	4c 78       	lddpc	r8,8000344c <calculate_hash+0x3a4>
80003332:	70 48       	ld.w	r8,r8[0x10]
80003334:	31 9b       	mov	r11,25
80003336:	10 9c       	mov	r12,r8
80003338:	f0 1f 00 48 	mcall	80003458 <calculate_hash+0x3b0>
8000333c:	18 98       	mov	r8,r12
8000333e:	ed e8 20 08 	eor	r8,r6,r8
80003342:	ef 48 ff dc 	st.w	r7[-36],r8
		 ch = (chunk.e & chunk.f) XOR ((~chunk.e) & chunk.g);
80003346:	4c 28       	lddpc	r8,8000344c <calculate_hash+0x3a4>
80003348:	70 49       	ld.w	r9,r8[0x10]
8000334a:	4c 18       	lddpc	r8,8000344c <calculate_hash+0x3a4>
8000334c:	70 58       	ld.w	r8,r8[0x14]
8000334e:	10 69       	and	r9,r8
80003350:	4b f8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
80003352:	70 48       	ld.w	r8,r8[0x10]
80003354:	f0 0a 11 ff 	rsub	r10,r8,-1
80003358:	4b d8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
8000335a:	70 68       	ld.w	r8,r8[0x18]
8000335c:	f5 e8 00 08 	and	r8,r10,r8
80003360:	f3 e8 20 08 	eor	r8,r9,r8
80003364:	ef 48 ff f8 	st.w	r7[-8],r8
		 t1 = chunk.h + S1 + ch + Hash_Constant[i] + Message_Schedule_W[i];
80003368:	4b 98       	lddpc	r8,8000344c <calculate_hash+0x3a4>
8000336a:	70 79       	ld.w	r9,r8[0x1c]
8000336c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003370:	10 09       	add	r9,r8
80003372:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003376:	10 09       	add	r9,r8
80003378:	ee fa ff d4 	ld.w	r10,r7[-44]
8000337c:	4b 98       	lddpc	r8,80003460 <calculate_hash+0x3b8>
8000337e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003382:	10 09       	add	r9,r8
80003384:	ee fa ff d4 	ld.w	r10,r7[-44]
80003388:	4b 38       	lddpc	r8,80003454 <calculate_hash+0x3ac>
8000338a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000338e:	f2 08 00 08 	add	r8,r9,r8
80003392:	ef 48 ff fc 	st.w	r7[-4],r8
		 
		 chunk.h = chunk.g;
80003396:	4a e8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
80003398:	70 69       	ld.w	r9,r8[0x18]
8000339a:	4a d8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
8000339c:	91 79       	st.w	r8[0x1c],r9
		 chunk.g = chunk.f;
8000339e:	4a c8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800033a0:	70 59       	ld.w	r9,r8[0x14]
800033a2:	4a b8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800033a4:	91 69       	st.w	r8[0x18],r9
		 chunk.f = chunk.e;
800033a6:	4a a8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800033a8:	70 49       	ld.w	r9,r8[0x10]
800033aa:	4a 98       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800033ac:	91 59       	st.w	r8[0x14],r9
		 chunk.e = chunk.d + t1;
800033ae:	4a 88       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800033b0:	70 39       	ld.w	r9,r8[0xc]
800033b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033b6:	10 09       	add	r9,r8
800033b8:	4a 58       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800033ba:	91 49       	st.w	r8[0x10],r9
		 chunk.d = chunk.c;
800033bc:	4a 48       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800033be:	70 29       	ld.w	r9,r8[0x8]
800033c0:	4a 38       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800033c2:	91 39       	st.w	r8[0xc],r9
		 chunk.c = chunk.b;
800033c4:	4a 28       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800033c6:	70 19       	ld.w	r9,r8[0x4]
800033c8:	4a 18       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800033ca:	91 29       	st.w	r8[0x8],r9
		 chunk.b = chunk.a;
800033cc:	4a 08       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800033ce:	70 09       	ld.w	r9,r8[0x0]
800033d0:	49 f8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800033d2:	91 19       	st.w	r8[0x4],r9
		 chunk.a = t1 + t2;
800033d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800033d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800033dc:	10 09       	add	r9,r8
800033de:	49 c8       	lddpc	r8,8000344c <calculate_hash+0x3a4>
800033e0:	91 09       	st.w	r8[0x0],r9
	 for (i = 0; i < 8; i++)
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
800033e2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800033e6:	2f f8       	sub	r8,-1
800033e8:	ef 48 ff d4 	st.w	r7[-44],r8
800033ec:	ee f8 ff d4 	ld.w	r8,r7[-44]
800033f0:	e0 48 00 3f 	cp.w	r8,63
800033f4:	fe 9a ff 57 	brle	800032a2 <calculate_hash+0x1fa>
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
800033f8:	30 08       	mov	r8,0
800033fa:	ef 48 ff d4 	st.w	r7[-44],r8
800033fe:	c1 d8       	rjmp	80003438 <calculate_hash+0x390>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
80003400:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003404:	a3 68       	lsl	r8,0x2
80003406:	ee f9 ff c8 	ld.w	r9,r7[-56]
8000340a:	f2 08 00 08 	add	r8,r9,r8
8000340e:	ee fa ff d4 	ld.w	r10,r7[-44]
80003412:	49 39       	lddpc	r9,8000345c <calculate_hash+0x3b4>
80003414:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80003418:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000341c:	a3 69       	lsl	r9,0x2
8000341e:	ee fb ff ec 	ld.w	r11,r7[-20]
80003422:	f6 09 00 09 	add	r9,r11,r9
80003426:	72 09       	ld.w	r9,r9[0x0]
80003428:	f4 09 00 09 	add	r9,r10,r9
8000342c:	91 09       	st.w	r8[0x0],r9
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
8000342e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003432:	2f f8       	sub	r8,-1
80003434:	ef 48 ff d4 	st.w	r7[-44],r8
80003438:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000343c:	58 78       	cp.w	r8,7
8000343e:	fe 9a ff e1 	brle	80003400 <calculate_hash+0x358>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
	 }
 }
80003442:	2f 2d       	sub	sp,-56
80003444:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003448:	00 00       	add	r0,r0
8000344a:	02 b4       	st.h	r1++,r4
8000344c:	00 00       	add	r0,r0
8000344e:	0b 84       	ld.ub	r4,r5[0x0]
80003450:	80 00       	ld.sh	r0,r0[0x0]
80003452:	34 64       	mov	r4,70
80003454:	00 00       	add	r0,r0
80003456:	02 f4       	st.b	--r1,r4
80003458:	80 00       	ld.sh	r0,r0[0x0]
8000345a:	34 dc       	mov	r12,77
8000345c:	80 00       	ld.sh	r0,r0[0x0]
8000345e:	ea 20 80 00 	sub	r0,688128
80003462:	ea 40 eb cd 	cp.w	r0,715725

80003464 <PadtheMessage>:


 void PadtheMessage(uint8_t message_length)
 {
80003464:	eb cd 40 80 	pushm	r7,lr
80003468:	1a 97       	mov	r7,sp
8000346a:	20 3d       	sub	sp,12
8000346c:	18 98       	mov	r8,r12
8000346e:	ef 68 ff f4 	st.b	r7[-12],r8
	 unsigned char i;
	 unsigned short int message_length_bits;
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];
80003472:	49 a8       	lddpc	r8,800034d8 <PadtheMessage+0x74>
80003474:	ef 48 ff fc 	st.w	r7[-4],r8

	 message_length_bits = message_length << 3;
80003478:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000347c:	a3 78       	lsl	r8,0x3
8000347e:	ef 58 ff fa 	st.h	r7[-6],r8
	 Padded_Message[message_length++] = 0x80;
80003482:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003486:	49 5a       	lddpc	r10,800034d8 <PadtheMessage+0x74>
80003488:	38 08       	mov	r8,-128
8000348a:	f4 09 0b 08 	st.b	r10[r9],r8
8000348e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003492:	2f f8       	sub	r8,-1
80003494:	ef 68 ff f4 	st.b	r7[-12],r8

	 for (i = message_length; i < 64; i++)
80003498:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000349c:	ef 68 ff f9 	st.b	r7[-7],r8
800034a0:	c0 c8       	rjmp	800034b8 <PadtheMessage+0x54>
	 {
		Padded_Message[i] = 0x00;
800034a2:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800034a6:	48 da       	lddpc	r10,800034d8 <PadtheMessage+0x74>
800034a8:	30 08       	mov	r8,0
800034aa:	f4 09 0b 08 	st.b	r10[r9],r8
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];

	 message_length_bits = message_length << 3;
	 Padded_Message[message_length++] = 0x80;

	 for (i = message_length; i < 64; i++)
800034ae:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800034b2:	2f f8       	sub	r8,-1
800034b4:	ef 68 ff f9 	st.b	r7[-7],r8
800034b8:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800034bc:	33 f8       	mov	r8,63
800034be:	f0 09 18 00 	cp.b	r9,r8
800034c2:	fe 98 ff f0 	brls	800034a2 <PadtheMessage+0x3e>
	 {
		Padded_Message[i] = 0x00;
	 }

	 //ptrPadded_Message = (unsigned long int *)&Padded_Message[60];
	 ptrPadded_Message[15] = (unsigned long int)message_length_bits;
800034c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034ca:	2c 48       	sub	r8,-60
800034cc:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800034d0:	91 09       	st.w	r8[0x0],r9
	 //Padded_Message[62] = *((unsigned char *)&message_length_bits);
	 //Padded_Message[63] = *((unsigned char *)&message_length_bits + 1);
 }
800034d2:	2f dd       	sub	sp,-12
800034d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800034d8:	00 00       	add	r0,r0
800034da:	02 b4       	st.h	r1++,r4

800034dc <Rotate_right>:

 unsigned long int Rotate_right (unsigned long int number, int bits)
 {
800034dc:	eb cd 40 80 	pushm	r7,lr
800034e0:	1a 97       	mov	r7,sp
800034e2:	20 3d       	sub	sp,12
800034e4:	ef 4c ff f8 	st.w	r7[-8],r12
800034e8:	ef 4b ff f4 	st.w	r7[-12],r11
	 unsigned long int bit_mask = ((unsigned long int)2 << bits) - 1;
800034ec:	30 29       	mov	r9,2
800034ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034f2:	f2 08 09 48 	lsl	r8,r9,r8
800034f6:	20 18       	sub	r8,1
800034f8:	ef 48 ff fc 	st.w	r7[-4],r8
	 return ((number >> bits) | ((number & bit_mask) << (32 - bits)));
800034fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003500:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003504:	f2 08 0a 49 	lsr	r9,r9,r8
80003508:	ee fa ff f8 	ld.w	r10,r7[-8]
8000350c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003510:	10 6a       	and	r10,r8
80003512:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003516:	f0 08 11 20 	rsub	r8,r8,32
8000351a:	f4 08 09 48 	lsl	r8,r10,r8
8000351e:	f3 e8 10 08 	or	r8,r9,r8
 }
80003522:	10 9c       	mov	r12,r8
80003524:	2f dd       	sub	sp,-12
80003526:	e3 cd 80 80 	ldm	sp++,r7,pc
8000352a:	d7 03       	nop

8000352c <Init_System_Status>:

volatile system_status_t stSystemStatus;


void Init_System_Status(void)
{
8000352c:	eb cd 40 80 	pushm	r7,lr
80003530:	1a 97       	mov	r7,sp
	stSystemStatus.stored_value_crc_status = 0;
80003532:	48 e9       	lddpc	r9,80003568 <Init_System_Status+0x3c>
80003534:	72 08       	ld.w	r8,r9[0x0]
80003536:	30 0a       	mov	r10,0
80003538:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000353c:	93 08       	st.w	r9[0x0],r8
	stSystemStatus.unlock_password_status = 0;
8000353e:	48 b9       	lddpc	r9,80003568 <Init_System_Status+0x3c>
80003540:	72 08       	ld.w	r8,r9[0x0]
80003542:	30 0a       	mov	r10,0
80003544:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80003548:	93 08       	st.w	r9[0x0],r8
	stSystemStatus.read_only_mode_0_status = 0;
8000354a:	48 89       	lddpc	r9,80003568 <Init_System_Status+0x3c>
8000354c:	72 08       	ld.w	r8,r9[0x0]
8000354e:	30 0a       	mov	r10,0
80003550:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80003554:	93 08       	st.w	r9[0x0],r8
	stSystemStatus.read_only_mode_1_status = 0;
80003556:	48 59       	lddpc	r9,80003568 <Init_System_Status+0x3c>
80003558:	72 08       	ld.w	r8,r9[0x0]
8000355a:	30 0a       	mov	r10,0
8000355c:	f1 da d3 81 	bfins	r8,r10,0x1c,0x1
80003560:	93 08       	st.w	r9[0x0],r8
}
80003562:	e3 cd 80 80 	ldm	sp++,r7,pc
80003566:	00 00       	add	r0,r0
80003568:	00 00       	add	r0,r0
8000356a:	0b a4       	ld.ub	r4,r5[0x2]

8000356c <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000356c:	eb cd 40 80 	pushm	r7,lr
80003570:	1a 97       	mov	r7,sp
80003572:	20 1d       	sub	sp,4
80003574:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003578:	ee fb ff fc 	ld.w	r11,r7[-4]
8000357c:	30 1c       	mov	r12,1
8000357e:	f0 1f 00 03 	mcall	80003588 <sysclk_enable_hsb_module+0x1c>
}
80003582:	2f fd       	sub	sp,-4
80003584:	e3 cd 80 80 	ldm	sp++,r7,pc
80003588:	80 00       	ld.sh	r0,r0[0x0]
8000358a:	bd ac       	sbr	r12,0x1c

8000358c <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
8000358c:	eb cd 40 80 	pushm	r7,lr
80003590:	1a 97       	mov	r7,sp
80003592:	20 1d       	sub	sp,4
80003594:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003598:	ee fb ff fc 	ld.w	r11,r7[-4]
8000359c:	30 2c       	mov	r12,2
8000359e:	f0 1f 00 03 	mcall	800035a8 <sysclk_enable_pba_module+0x1c>
}
800035a2:	2f fd       	sub	sp,-4
800035a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800035a8:	80 00       	ld.sh	r0,r0[0x0]
800035aa:	bd ac       	sbr	r12,0x1c

800035ac <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
800035ac:	eb cd 40 80 	pushm	r7,lr
800035b0:	1a 97       	mov	r7,sp
800035b2:	20 1d       	sub	sp,4
800035b4:	ef 4c ff fc 	st.w	r7[-4],r12
	switch ((uintptr_t)module) {
800035b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035bc:	fe 58 14 00 	cp.w	r8,-60416
800035c0:	e0 80 00 a5 	breq	8000370a <sysclk_enable_peripheral_clock+0x15e>
800035c4:	e0 8b 00 40 	brhi	80003644 <sysclk_enable_peripheral_clock+0x98>
800035c8:	fe 48 24 00 	cp.w	r8,-121856
800035cc:	e0 80 00 d9 	breq	8000377e <sysclk_enable_peripheral_clock+0x1d2>
800035d0:	e0 8b 00 1e 	brhi	8000360c <sysclk_enable_peripheral_clock+0x60>
800035d4:	fe 48 10 00 	cp.w	r8,-126976
800035d8:	e0 80 00 b9 	breq	8000374a <sysclk_enable_peripheral_clock+0x19e>
800035dc:	e0 8b 00 0b 	brhi	800035f2 <sysclk_enable_peripheral_clock+0x46>
800035e0:	fc 58 00 00 	cp.w	r8,-196608
800035e4:	e0 80 00 e0 	breq	800037a4 <sysclk_enable_peripheral_clock+0x1f8>
800035e8:	fe 48 00 00 	cp.w	r8,-131072
800035ec:	e0 80 00 b3 	breq	80003752 <sysclk_enable_peripheral_clock+0x1a6>
		break;
#endif

	default:
		Assert(false);
		return;
800035f0:	cd e8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800035f2:	fe 48 1c 00 	cp.w	r8,-123904
800035f6:	e0 80 00 bc 	breq	8000376e <sysclk_enable_peripheral_clock+0x1c2>
800035fa:	fe 48 20 00 	cp.w	r8,-122880
800035fe:	e0 80 00 bc 	breq	80003776 <sysclk_enable_peripheral_clock+0x1ca>
80003602:	fe 48 14 00 	cp.w	r8,-125952
80003606:	e0 80 00 ad 	breq	80003760 <sysclk_enable_peripheral_clock+0x1b4>
		break;
#endif

	default:
		Assert(false);
		return;
8000360a:	cd 18       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000360c:	fe 58 00 00 	cp.w	r8,-65536
80003610:	c5 60       	breq	800036bc <sysclk_enable_peripheral_clock+0x110>
80003612:	e0 8b 00 0f 	brhi	80003630 <sysclk_enable_peripheral_clock+0x84>
80003616:	fe 48 40 00 	cp.w	r8,-114688
8000361a:	e0 80 00 b6 	breq	80003786 <sysclk_enable_peripheral_clock+0x1da>
8000361e:	fe 48 80 00 	cp.w	r8,-98304
80003622:	e0 80 00 bd 	breq	8000379c <sysclk_enable_peripheral_clock+0x1f0>
80003626:	fe 48 28 00 	cp.w	r8,-120832
8000362a:	e0 80 00 b2 	breq	8000378e <sysclk_enable_peripheral_clock+0x1e2>
		break;
#endif

	default:
		Assert(false);
		return;
8000362e:	cb f8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003630:	fe 58 0c 00 	cp.w	r8,-62464
80003634:	c4 b0       	breq	800036ca <sysclk_enable_peripheral_clock+0x11e>
80003636:	fe 58 10 00 	cp.w	r8,-61440
8000363a:	c3 d0       	breq	800036b4 <sysclk_enable_peripheral_clock+0x108>
8000363c:	fe 58 08 00 	cp.w	r8,-63488
80003640:	c3 60       	breq	800036ac <sysclk_enable_peripheral_clock+0x100>
		break;
#endif

	default:
		Assert(false);
		return;
80003642:	cb 58       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003644:	fe 58 30 00 	cp.w	r8,-53248
80003648:	c5 50       	breq	800036f2 <sysclk_enable_peripheral_clock+0x146>
8000364a:	e0 8b 00 18 	brhi	8000367a <sysclk_enable_peripheral_clock+0xce>
8000364e:	fe 58 20 00 	cp.w	r8,-57344
80003652:	c6 80       	breq	80003722 <sysclk_enable_peripheral_clock+0x176>
80003654:	e0 8b 00 09 	brhi	80003666 <sysclk_enable_peripheral_clock+0xba>
80003658:	fe 58 18 00 	cp.w	r8,-59392
8000365c:	c5 b0       	breq	80003712 <sysclk_enable_peripheral_clock+0x166>
8000365e:	fe 58 1c 00 	cp.w	r8,-58368
80003662:	c5 c0       	breq	8000371a <sysclk_enable_peripheral_clock+0x16e>
		break;
#endif

	default:
		Assert(false);
		return;
80003664:	ca 48       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003666:	fe 58 28 00 	cp.w	r8,-55296
8000366a:	c3 c0       	breq	800036e2 <sysclk_enable_peripheral_clock+0x136>
8000366c:	fe 58 2c 00 	cp.w	r8,-54272
80003670:	c3 d0       	breq	800036ea <sysclk_enable_peripheral_clock+0x13e>
80003672:	fe 58 24 00 	cp.w	r8,-56320
80003676:	c3 20       	breq	800036da <sysclk_enable_peripheral_clock+0x12e>
		break;
#endif

	default:
		Assert(false);
		return;
80003678:	c9 a8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000367a:	fe 58 40 00 	cp.w	r8,-49152
8000367e:	c6 20       	breq	80003742 <sysclk_enable_peripheral_clock+0x196>
80003680:	e0 8b 00 0c 	brhi	80003698 <sysclk_enable_peripheral_clock+0xec>
80003684:	fe 58 38 00 	cp.w	r8,-51200
80003688:	c5 50       	breq	80003732 <sysclk_enable_peripheral_clock+0x186>
8000368a:	fe 58 3c 00 	cp.w	r8,-50176
8000368e:	c2 20       	breq	800036d2 <sysclk_enable_peripheral_clock+0x126>
80003690:	fe 58 34 00 	cp.w	r8,-52224
80003694:	c4 b0       	breq	8000372a <sysclk_enable_peripheral_clock+0x17e>
		break;
#endif

	default:
		Assert(false);
		return;
80003696:	c8 b8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003698:	fe 58 50 00 	cp.w	r8,-45056
8000369c:	c2 f0       	breq	800036fa <sysclk_enable_peripheral_clock+0x14e>
8000369e:	fe 58 54 00 	cp.w	r8,-44032
800036a2:	c3 00       	breq	80003702 <sysclk_enable_peripheral_clock+0x156>
800036a4:	fe 58 44 00 	cp.w	r8,-48128
800036a8:	c4 90       	breq	8000373a <sysclk_enable_peripheral_clock+0x18e>
		break;
#endif

	default:
		Assert(false);
		return;
800036aa:	c8 18       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
	case AVR32_INTC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_INTC);
800036ac:	30 0c       	mov	r12,0
800036ae:	f0 1f 00 42 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
800036b2:	c7 d8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_GPIO_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_GPIO);
800036b4:	30 1c       	mov	r12,1
800036b6:	f0 1f 00 40 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
800036ba:	c7 98       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PDCA_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
800036bc:	30 4c       	mov	r12,4
800036be:	f0 1f 00 3f 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pba_module(SYSCLK_PDCA_PB);
800036c2:	30 2c       	mov	r12,2
800036c4:	f0 1f 00 3c 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
800036c8:	c7 28       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PM);
800036ca:	30 3c       	mov	r12,3
800036cc:	f0 1f 00 3a 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
800036d0:	c6 e8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ADC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ADC);
800036d2:	30 4c       	mov	r12,4
800036d4:	f0 1f 00 38 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
800036d8:	c6 a8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI0);
800036da:	30 5c       	mov	r12,5
800036dc:	f0 1f 00 36 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
800036e0:	c6 68       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
800036e2:	30 6c       	mov	r12,6
800036e4:	f0 1f 00 34 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
800036e8:	c6 28       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
800036ea:	30 7c       	mov	r12,7
800036ec:	f0 1f 00 32 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
800036f0:	c5 e8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
800036f2:	30 8c       	mov	r12,8
800036f4:	f0 1f 00 30 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
800036f8:	c5 a8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
800036fa:	30 9c       	mov	r12,9
800036fc:	f0 1f 00 2e 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
80003700:	c5 68       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
80003702:	30 ac       	mov	r12,10
80003704:	f0 1f 00 2c 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
80003708:	c5 28       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART0);
8000370a:	30 bc       	mov	r12,11
8000370c:	f0 1f 00 2a 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
80003710:	c4 e8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART1);
80003712:	30 cc       	mov	r12,12
80003714:	f0 1f 00 28 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
80003718:	c4 a8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART2_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
8000371a:	30 dc       	mov	r12,13
8000371c:	f0 1f 00 26 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
80003720:	c4 68       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART3_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART3);
80003722:	30 ec       	mov	r12,14
80003724:	f0 1f 00 24 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
80003728:	c4 28       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SSC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SSC);
8000372a:	30 fc       	mov	r12,15
8000372c:	f0 1f 00 22 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
80003730:	c3 e8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC0);
80003732:	31 0c       	mov	r12,16
80003734:	f0 1f 00 20 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
80003738:	c3 a8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC1);
8000373a:	31 1c       	mov	r12,17
8000373c:	f0 1f 00 1e 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
80003740:	c3 68       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ABDAC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DAC);
80003742:	31 2c       	mov	r12,18
80003744:	f0 1f 00 1c 	mcall	800037b4 <sysclk_enable_peripheral_clock+0x208>
		break;
80003748:	c3 28       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_HMATRIX_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
8000374a:	30 0c       	mov	r12,0
8000374c:	f0 1f 00 1c 	mcall	800037bc <sysclk_enable_peripheral_clock+0x210>
		break;
80003750:	c2 e8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USBB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
80003752:	30 3c       	mov	r12,3
80003754:	f0 1f 00 19 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80003758:	30 1c       	mov	r12,1
8000375a:	f0 1f 00 19 	mcall	800037bc <sysclk_enable_peripheral_clock+0x210>
		break;
8000375e:	c2 78       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_FLASHC_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_FLASHC_DATA);
80003760:	30 0c       	mov	r12,0
80003762:	f0 1f 00 16 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_FLASHC_REGS);
80003766:	30 2c       	mov	r12,2
80003768:	f0 1f 00 15 	mcall	800037bc <sysclk_enable_peripheral_clock+0x210>
		break;
8000376c:	c2 08       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SMC_REGS);
8000376e:	30 3c       	mov	r12,3
80003770:	f0 1f 00 13 	mcall	800037bc <sysclk_enable_peripheral_clock+0x210>
		break;
80003774:	c1 c8       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SDRAMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SDRAMC_REGS);
80003776:	30 4c       	mov	r12,4
80003778:	f0 1f 00 11 	mcall	800037bc <sysclk_enable_peripheral_clock+0x210>
		break;
8000377c:	c1 88       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ECCHRS_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_ECC);
8000377e:	30 5c       	mov	r12,5
80003780:	f0 1f 00 0f 	mcall	800037bc <sysclk_enable_peripheral_clock+0x210>
		break;
80003784:	c1 48       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MCI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MCI);
80003786:	30 6c       	mov	r12,6
80003788:	f0 1f 00 0d 	mcall	800037bc <sysclk_enable_peripheral_clock+0x210>
		break;
8000378c:	c1 08       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_BUSMON_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_BUSMON_HSB);
8000378e:	30 8c       	mov	r12,8
80003790:	f0 1f 00 0a 	mcall	800037b8 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_BUSMON);
80003794:	30 7c       	mov	r12,7
80003796:	f0 1f 00 0a 	mcall	800037bc <sysclk_enable_peripheral_clock+0x210>
		break;
8000379a:	c0 98       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MSI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MSI);
8000379c:	30 8c       	mov	r12,8
8000379e:	f0 1f 00 08 	mcall	800037bc <sysclk_enable_peripheral_clock+0x210>
		break;
800037a2:	c0 58       	rjmp	800037ac <sysclk_enable_peripheral_clock+0x200>

#if defined(AVR32_AES_ADDRESS)
	case AVR32_AES_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_AES);
800037a4:	30 9c       	mov	r12,9
800037a6:	f0 1f 00 06 	mcall	800037bc <sysclk_enable_peripheral_clock+0x210>
		break;
800037aa:	d7 03       	nop

	default:
		Assert(false);
		return;
	}
}
800037ac:	2f fd       	sub	sp,-4
800037ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800037b2:	00 00       	add	r0,r0
800037b4:	80 00       	ld.sh	r0,r0[0x0]
800037b6:	35 8c       	mov	r12,88
800037b8:	80 00       	ld.sh	r0,r0[0x0]
800037ba:	35 6c       	mov	r12,86
800037bc:	80 00       	ld.sh	r0,r0[0x0]
800037be:	be 20       	st.h	pc[0x4],r0

800037c0 <tc_irq>:
 * The ISR handles RC compare interrupt and sets the update_timer flag to
 * update the timer value.
 */
__attribute__((__interrupt__))
static void tc_irq(void)
{
800037c0:	eb cd 40 80 	pushm	r7,lr
800037c4:	1a 97       	mov	r7,sp
	// Increment the ms seconds counter
	tc_tick++;
800037c6:	4a e8       	lddpc	r8,8000387c <tc_irq+0xbc>
800037c8:	70 08       	ld.w	r8,r8[0x0]
800037ca:	f0 c9 ff ff 	sub	r9,r8,-1
800037ce:	4a c8       	lddpc	r8,8000387c <tc_irq+0xbc>
800037d0:	91 09       	st.w	r8[0x0],r9
	 * in the Watch Window.
	 */

	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
800037d2:	30 0b       	mov	r11,0
800037d4:	fe 7c 38 00 	mov	r12,-51200
800037d8:	f0 1f 00 2a 	mcall	80003880 <tc_irq+0xc0>

	if (entry_mode_status == NO_MODE_SELECTED)
800037dc:	4a a8       	lddpc	r8,80003884 <tc_irq+0xc4>
800037de:	11 88       	ld.ub	r8,r8[0x0]
800037e0:	5c 58       	castu.b	r8
800037e2:	c1 51       	brne	8000380c <tc_irq+0x4c>
	{
		if (check_programming_mode_entry_sequence() == true)
800037e4:	f0 1f 00 29 	mcall	80003888 <tc_irq+0xc8>
800037e8:	18 98       	mov	r8,r12
800037ea:	58 08       	cp.w	r8,0
800037ec:	c0 50       	breq	800037f6 <tc_irq+0x36>
		{
			entry_mode_status = PROGRAMMING_MODE;
800037ee:	4a 69       	lddpc	r9,80003884 <tc_irq+0xc4>
800037f0:	30 18       	mov	r8,1
800037f2:	b2 88       	st.b	r9[0x0],r8
800037f4:	c0 c8       	rjmp	8000380c <tc_irq+0x4c>
		}
		else if (check_normal_mode_entry_sequence() == true)
800037f6:	f0 1f 00 26 	mcall	8000388c <tc_irq+0xcc>
800037fa:	18 98       	mov	r8,r12
800037fc:	58 08       	cp.w	r8,0
800037fe:	c0 70       	breq	8000380c <tc_irq+0x4c>
		{
			entry_mode_status = NORMAL_MODE;
80003800:	4a 19       	lddpc	r9,80003884 <tc_irq+0xc4>
80003802:	30 28       	mov	r8,2
80003804:	b2 88       	st.b	r9[0x0],r8
			pass_code = temp_password;
80003806:	4a 38       	lddpc	r8,80003890 <tc_irq+0xd0>
80003808:	4a 39       	lddpc	r9,80003894 <tc_irq+0xd4>
8000380a:	91 09       	st.w	r8[0x0],r9
		}
	}
	
	if (entry_mode_status == PROGRAMMING_MODE)
8000380c:	49 e8       	lddpc	r8,80003884 <tc_irq+0xc4>
8000380e:	11 88       	ld.ub	r8,r8[0x0]
80003810:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003814:	30 18       	mov	r8,1
80003816:	f0 09 18 00 	cp.b	r9,r8
8000381a:	c1 71       	brne	80003848 <tc_irq+0x88>
	{
		if (!mode_selected)
8000381c:	49 f8       	lddpc	r8,80003898 <tc_irq+0xd8>
8000381e:	11 88       	ld.ub	r8,r8[0x0]
80003820:	5c 58       	castu.b	r8
80003822:	ec 18 00 01 	eorl	r8,0x1
80003826:	5c 58       	castu.b	r8
80003828:	c0 40       	breq	80003830 <tc_irq+0x70>
		{
			check_for_mode_selected();
8000382a:	f0 1f 00 1d 	mcall	8000389c <tc_irq+0xdc>
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
			{
				entry_mode_status = NO_MODE_SELECTED;
8000382e:	c1 98       	rjmp	80003860 <tc_irq+0xa0>
		{
			check_for_mode_selected();
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
80003830:	f0 1f 00 1c 	mcall	800038a0 <tc_irq+0xe0>
80003834:	18 98       	mov	r8,r12
80003836:	10 99       	mov	r9,r8
80003838:	30 18       	mov	r8,1
8000383a:	f0 09 18 00 	cp.b	r9,r8
8000383e:	c1 01       	brne	8000385e <tc_irq+0x9e>
			{
				entry_mode_status = NO_MODE_SELECTED;
80003840:	49 19       	lddpc	r9,80003884 <tc_irq+0xc4>
80003842:	30 08       	mov	r8,0
80003844:	b2 88       	st.b	r9[0x0],r8
80003846:	c0 d8       	rjmp	80003860 <tc_irq+0xa0>
			}
		}
	}

	else if (entry_mode_status == NORMAL_MODE)
80003848:	48 f8       	lddpc	r8,80003884 <tc_irq+0xc4>
8000384a:	11 88       	ld.ub	r8,r8[0x0]
8000384c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003850:	30 28       	mov	r8,2
80003852:	f0 09 18 00 	cp.b	r9,r8
80003856:	c0 51       	brne	80003860 <tc_irq+0xa0>
	{
		read_password();
80003858:	f0 1f 00 13 	mcall	800038a4 <tc_irq+0xe4>
8000385c:	c0 28       	rjmp	80003860 <tc_irq+0xa0>
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
			{
				entry_mode_status = NO_MODE_SELECTED;
8000385e:	d7 03       	nop
	else if (entry_mode_status == NORMAL_MODE)
	{
		read_password();
	}
	
	check_to_toggle_read_only_mode();
80003860:	f0 1f 00 12 	mcall	800038a8 <tc_irq+0xe8>
	//if (is_button_released() == true)
	//{
		//Read_button();	
	//}

	update_leds();
80003864:	f0 1f 00 12 	mcall	800038ac <tc_irq+0xec>



	// specify that an interrupt has been raised
	update_timer = true;
80003868:	49 29       	lddpc	r9,800038b0 <tc_irq+0xf0>
8000386a:	30 18       	mov	r8,1
8000386c:	b2 88       	st.b	r9[0x0],r8
	// Toggle the GPIO line
	gpio_tgl_gpio_pin(EXAMPLE_TOGGLE_PIN);
8000386e:	30 3c       	mov	r12,3
80003870:	f0 1f 00 11 	mcall	800038b4 <tc_irq+0xf4>
}
80003874:	e3 cd 40 80 	ldm	sp++,r7,lr
80003878:	d6 03       	rete
8000387a:	00 00       	add	r0,r0
8000387c:	00 00       	add	r0,r0
8000387e:	03 f4       	ld.ub	r4,r1[0x7]
80003880:	80 00       	ld.sh	r0,r0[0x0]
80003882:	97 5e       	st.w	r11[0x14],lr
80003884:	00 00       	add	r0,r0
80003886:	03 fc       	ld.ub	r12,r1[0x7]
80003888:	80 00       	ld.sh	r0,r0[0x0]
8000388a:	3e e4       	mov	r4,-18
8000388c:	80 00       	ld.sh	r0,r0[0x0]
8000388e:	3f 70       	mov	r0,-9
80003890:	00 00       	add	r0,r0
80003892:	0b 80       	ld.ub	r0,r5[0x0]
80003894:	00 00       	add	r0,r0
80003896:	02 48       	or	r8,r1
80003898:	00 00       	add	r0,r0
8000389a:	03 f8       	ld.ub	r8,r1[0x7]
8000389c:	80 00       	ld.sh	r0,r0[0x0]
8000389e:	40 8c       	lddsp	r12,sp[0x20]
800038a0:	80 00       	ld.sh	r0,r0[0x0]
800038a2:	40 a0       	lddsp	r0,sp[0x28]
800038a4:	80 00       	ld.sh	r0,r0[0x0]
800038a6:	42 5c       	lddsp	r12,sp[0x94]
800038a8:	80 00       	ld.sh	r0,r0[0x0]
800038aa:	38 b8       	mov	r8,-117
800038ac:	80 00       	ld.sh	r0,r0[0x0]
800038ae:	43 54       	lddsp	r4,sp[0xd4]
800038b0:	00 00       	add	r0,r0
800038b2:	01 2c       	ld.uh	r12,r0++
800038b4:	80 00       	ld.sh	r0,r0[0x0]
800038b6:	8d 1a       	st.w	r6[0x4],r10

800038b8 <check_to_toggle_read_only_mode>:

void check_to_toggle_read_only_mode(void)
{
800038b8:	eb cd 40 80 	pushm	r7,lr
800038bc:	1a 97       	mov	r7,sp
800038be:	20 1d       	sub	sp,4
	if (stSystemStatus.unlock_password_status == 1)
800038c0:	49 f8       	lddpc	r8,8000393c <check_to_toggle_read_only_mode+0x84>
800038c2:	70 08       	ld.w	r8,r8[0x0]
800038c4:	e6 18 40 00 	andh	r8,0x4000,COH
800038c8:	c3 70       	breq	80003936 <check_to_toggle_read_only_mode+0x7e>
	{
		uint8_t button_value = button_pressed();
800038ca:	f0 1f 00 1e 	mcall	80003940 <check_to_toggle_read_only_mode+0x88>
800038ce:	18 98       	mov	r8,r12
800038d0:	ef 68 ff ff 	st.b	r7[-1],r8
		if (button_value == PUSH_BUTTON1)
800038d4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800038d8:	30 08       	mov	r8,0
800038da:	f0 09 18 00 	cp.b	r9,r8
800038de:	c1 41       	brne	80003906 <check_to_toggle_read_only_mode+0x4e>
		{
			stSystemStatus.read_only_mode_0_status ^= 1;
800038e0:	49 78       	lddpc	r8,8000393c <check_to_toggle_read_only_mode+0x84>
800038e2:	70 08       	ld.w	r8,r8[0x0]
800038e4:	f1 d8 c3 a1 	bfextu	r8,r8,0x1d,0x1
800038e8:	5c 58       	castu.b	r8
800038ea:	ec 18 00 01 	eorl	r8,0x1
800038ee:	5c 58       	castu.b	r8
800038f0:	5c 58       	castu.b	r8
800038f2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800038f6:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800038fa:	49 19       	lddpc	r9,8000393c <check_to_toggle_read_only_mode+0x84>
800038fc:	72 08       	ld.w	r8,r9[0x0]
800038fe:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80003902:	93 08       	st.w	r9[0x0],r8
80003904:	c1 98       	rjmp	80003936 <check_to_toggle_read_only_mode+0x7e>
		}
		else if (button_value == PUSH_BUTTON2)
80003906:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000390a:	30 18       	mov	r8,1
8000390c:	f0 09 18 00 	cp.b	r9,r8
80003910:	c1 31       	brne	80003936 <check_to_toggle_read_only_mode+0x7e>
		{
			stSystemStatus.read_only_mode_1_status ^= 1;
80003912:	48 b8       	lddpc	r8,8000393c <check_to_toggle_read_only_mode+0x84>
80003914:	70 08       	ld.w	r8,r8[0x0]
80003916:	f1 d8 c3 81 	bfextu	r8,r8,0x1c,0x1
8000391a:	5c 58       	castu.b	r8
8000391c:	ec 18 00 01 	eorl	r8,0x1
80003920:	5c 58       	castu.b	r8
80003922:	5c 58       	castu.b	r8
80003924:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003928:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8000392c:	48 49       	lddpc	r9,8000393c <check_to_toggle_read_only_mode+0x84>
8000392e:	72 08       	ld.w	r8,r9[0x0]
80003930:	f1 da d3 81 	bfins	r8,r10,0x1c,0x1
80003934:	93 08       	st.w	r9[0x0],r8
		}
	}
}
80003936:	2f fd       	sub	sp,-4
80003938:	e3 cd 80 80 	ldm	sp++,r7,pc
8000393c:	00 00       	add	r0,r0
8000393e:	0b a4       	ld.ub	r4,r5[0x2]
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	3a f0       	mov	r0,-81

80003944 <is_button_released>:

bool is_button_released(void)
{
80003944:	eb cd 40 80 	pushm	r7,lr
80003948:	1a 97       	mov	r7,sp
	if ((check_all_buttons_high() == true) && (button_released == false))
8000394a:	f0 1f 00 0b 	mcall	80003974 <is_button_released+0x30>
8000394e:	18 98       	mov	r8,r12
80003950:	58 08       	cp.w	r8,0
80003952:	c0 b0       	breq	80003968 <is_button_released+0x24>
80003954:	48 98       	lddpc	r8,80003978 <is_button_released+0x34>
80003956:	11 88       	ld.ub	r8,r8[0x0]
80003958:	5c 58       	castu.b	r8
8000395a:	ec 18 00 01 	eorl	r8,0x1
8000395e:	5c 58       	castu.b	r8
80003960:	c0 40       	breq	80003968 <is_button_released+0x24>
	{
		button_released = true;
80003962:	48 69       	lddpc	r9,80003978 <is_button_released+0x34>
80003964:	30 18       	mov	r8,1
80003966:	b2 88       	st.b	r9[0x0],r8
	}
	return button_released;
80003968:	48 48       	lddpc	r8,80003978 <is_button_released+0x34>
8000396a:	11 88       	ld.ub	r8,r8[0x0]
8000396c:	5c 58       	castu.b	r8
}
8000396e:	10 9c       	mov	r12,r8
80003970:	e3 cd 80 80 	ldm	sp++,r7,pc
80003974:	80 00       	ld.sh	r0,r0[0x0]
80003976:	3b c8       	mov	r8,-68
80003978:	00 00       	add	r0,r0
8000397a:	01 2d       	ld.uh	sp,r0++

8000397c <Read_button>:

void Read_button(void)
{
8000397c:	eb cd 40 80 	pushm	r7,lr
80003980:	1a 97       	mov	r7,sp
80003982:	20 1d       	sub	sp,4
	uint8_t button_value = 0;
80003984:	30 08       	mov	r8,0
80003986:	ef 68 ff ff 	st.b	r7[-1],r8
	
	button_value = button_pressed();
8000398a:	f0 1f 00 4f 	mcall	80003ac4 <Read_button+0x148>
8000398e:	18 98       	mov	r8,r12
80003990:	ef 68 ff ff 	st.b	r7[-1],r8
	switch (button_value)
80003994:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003998:	58 48       	cp.w	r8,4
8000399a:	c0 50       	breq	800039a4 <Read_button+0x28>
8000399c:	e0 48 00 ff 	cp.w	r8,255
800039a0:	c6 d0       	breq	80003a7a <Read_button+0xfe>
800039a2:	c2 88       	rjmp	800039f2 <Read_button+0x76>
	{
		case ENTER_BUTTON:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
800039a4:	4c 98       	lddpc	r8,80003ac8 <Read_button+0x14c>
800039a6:	11 88       	ld.ub	r8,r8[0x0]
800039a8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800039ac:	30 18       	mov	r8,1
800039ae:	f0 09 18 00 	cp.b	r9,r8
800039b2:	c0 d1       	brne	800039cc <Read_button+0x50>
			{
				if (mode_selected)
800039b4:	4c 68       	lddpc	r8,80003acc <Read_button+0x150>
800039b6:	11 88       	ld.ub	r8,r8[0x0]
800039b8:	5c 58       	castu.b	r8
800039ba:	c6 20       	breq	80003a7e <Read_button+0x102>
				{
					enter_button_status++;
800039bc:	4c 58       	lddpc	r8,80003ad0 <Read_button+0x154>
800039be:	11 88       	ld.ub	r8,r8[0x0]
800039c0:	5c 58       	castu.b	r8
800039c2:	2f f8       	sub	r8,-1
800039c4:	5c 58       	castu.b	r8
800039c6:	4c 39       	lddpc	r9,80003ad0 <Read_button+0x154>
800039c8:	b2 88       	st.b	r9[0x0],r8
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
			{
				normal_mode_password_entered = true;
			}
			break;
800039ca:	c5 f8       	rjmp	80003a88 <Read_button+0x10c>
				if (mode_selected)
				{
					enter_button_status++;
				}
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
800039cc:	4b f8       	lddpc	r8,80003ac8 <Read_button+0x14c>
800039ce:	11 88       	ld.ub	r8,r8[0x0]
800039d0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800039d4:	30 28       	mov	r8,2
800039d6:	f0 09 18 00 	cp.b	r9,r8
800039da:	c5 41       	brne	80003a82 <Read_button+0x106>
800039dc:	4b e8       	lddpc	r8,80003ad4 <Read_button+0x158>
800039de:	11 88       	ld.ub	r8,r8[0x0]
800039e0:	5c 58       	castu.b	r8
800039e2:	ec 18 00 01 	eorl	r8,0x1
800039e6:	5c 58       	castu.b	r8
800039e8:	c4 f0       	breq	80003a86 <Read_button+0x10a>
			{
				normal_mode_password_entered = true;
800039ea:	4b b9       	lddpc	r9,80003ad4 <Read_button+0x158>
800039ec:	30 18       	mov	r8,1
800039ee:	b2 88       	st.b	r9[0x0],r8
			}
			break;
800039f0:	c4 c8       	rjmp	80003a88 <Read_button+0x10c>
		case NO_BUTTON:
		break;
		
		default:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
800039f2:	4b 68       	lddpc	r8,80003ac8 <Read_button+0x14c>
800039f4:	11 88       	ld.ub	r8,r8[0x0]
800039f6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800039fa:	30 18       	mov	r8,1
800039fc:	f0 09 18 00 	cp.b	r9,r8
80003a00:	c2 f1       	brne	80003a5e <Read_button+0xe2>
			{
				if (mode_selected)
80003a02:	4b 38       	lddpc	r8,80003acc <Read_button+0x150>
80003a04:	11 88       	ld.ub	r8,r8[0x0]
80003a06:	5c 58       	castu.b	r8
80003a08:	c2 30       	breq	80003a4e <Read_button+0xd2>
				{
					switch (mode_chosen)
80003a0a:	4b 48       	lddpc	r8,80003ad8 <Read_button+0x15c>
80003a0c:	11 88       	ld.ub	r8,r8[0x0]
80003a0e:	5c 58       	castu.b	r8
80003a10:	c0 40       	breq	80003a18 <Read_button+0x9c>
80003a12:	58 38       	cp.w	r8,3
80003a14:	c0 90       	breq	80003a26 <Read_button+0xaa>
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003a16:	c3 98       	rjmp	80003a88 <Read_button+0x10c>
				if (mode_selected)
				{
					switch (mode_chosen)
					{
					case _UNLOCK_PASSWORD:
						store_passcode((uint32_t)button_value);
80003a18:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a1c:	10 9c       	mov	r12,r8
80003a1e:	f0 1f 00 30 	mcall	80003adc <Read_button+0x160>
						break;
80003a22:	d7 03       	nop
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003a24:	c3 28       	rjmp	80003a88 <Read_button+0x10c>
					{
					case _UNLOCK_PASSWORD:
						store_passcode((uint32_t)button_value);
						break;
					case _DEVICE_ID_CONFIRM:
						if (enter_button_status == WAITING_FOR_USER_INPUT)
80003a26:	4a b8       	lddpc	r8,80003ad0 <Read_button+0x154>
80003a28:	11 88       	ld.ub	r8,r8[0x0]
80003a2a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003a2e:	30 58       	mov	r8,5
80003a30:	f0 09 18 00 	cp.b	r9,r8
80003a34:	c0 71       	brne	80003a42 <Read_button+0xc6>
						{
							store_sequence(button_value);
80003a36:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a3a:	10 9c       	mov	r12,r8
80003a3c:	f0 1f 00 29 	mcall	80003ae0 <Read_button+0x164>
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003a40:	c2 48       	rjmp	80003a88 <Read_button+0x10c>
						{
							store_sequence(button_value);
						}
						else
						{
							store_passcode((uint32_t)button_value);
80003a42:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a46:	10 9c       	mov	r12,r8
80003a48:	f0 1f 00 25 	mcall	80003adc <Read_button+0x160>
					
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003a4c:	c1 e8       	rjmp	80003a88 <Read_button+0x10c>
					}
					
				}
				else
				{
					mode_chosen = button_value;
80003a4e:	4a 39       	lddpc	r9,80003ad8 <Read_button+0x15c>
80003a50:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a54:	b2 88       	st.b	r9[0x0],r8
					mode_selected = true;
80003a56:	49 e9       	lddpc	r9,80003acc <Read_button+0x150>
80003a58:	30 18       	mov	r8,1
80003a5a:	b2 88       	st.b	r9[0x0],r8
80003a5c:	c1 68       	rjmp	80003a88 <Read_button+0x10c>
				}
			}
			else if (entry_mode_status == NORMAL_MODE)
80003a5e:	49 b8       	lddpc	r8,80003ac8 <Read_button+0x14c>
80003a60:	11 88       	ld.ub	r8,r8[0x0]
80003a62:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003a66:	30 28       	mov	r8,2
80003a68:	f0 09 18 00 	cp.b	r9,r8
80003a6c:	c0 e1       	brne	80003a88 <Read_button+0x10c>
			{
				store_passcode((uint32_t)button_value);
80003a6e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a72:	10 9c       	mov	r12,r8
80003a74:	f0 1f 00 1a 	mcall	80003adc <Read_button+0x160>
80003a78:	c0 88       	rjmp	80003a88 <Read_button+0x10c>
				normal_mode_password_entered = true;
			}
			break;
		}
		case NO_BUTTON:
		break;
80003a7a:	d7 03       	nop
80003a7c:	c0 68       	rjmp	80003a88 <Read_button+0x10c>
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
			{
				normal_mode_password_entered = true;
			}
			break;
80003a7e:	d7 03       	nop
80003a80:	c0 48       	rjmp	80003a88 <Read_button+0x10c>
80003a82:	d7 03       	nop
80003a84:	c0 28       	rjmp	80003a88 <Read_button+0x10c>
80003a86:	d7 03       	nop
			}

		}
	}	

	if (mode_chosen == _UNLOCK_PASSWORD && enter_button_status == WAITING_FOR_USER_INPUT)
80003a88:	49 48       	lddpc	r8,80003ad8 <Read_button+0x15c>
80003a8a:	11 88       	ld.ub	r8,r8[0x0]
80003a8c:	5c 58       	castu.b	r8
80003a8e:	c1 81       	brne	80003abe <Read_button+0x142>
80003a90:	49 08       	lddpc	r8,80003ad0 <Read_button+0x154>
80003a92:	11 88       	ld.ub	r8,r8[0x0]
80003a94:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003a98:	30 58       	mov	r8,5
80003a9a:	f0 09 18 00 	cp.b	r9,r8
80003a9e:	c1 01       	brne	80003abe <Read_button+0x142>
	{
		if (var_W_ticks++ > var_W)
80003aa0:	49 18       	lddpc	r8,80003ae4 <Read_button+0x168>
80003aa2:	70 08       	ld.w	r8,r8[0x0]
80003aa4:	49 19       	lddpc	r9,80003ae8 <Read_button+0x16c>
80003aa6:	72 09       	ld.w	r9,r9[0x0]
80003aa8:	12 38       	cp.w	r8,r9
80003aaa:	5f b9       	srhi	r9
80003aac:	5c 59       	castu.b	r9
80003aae:	f0 ca ff ff 	sub	r10,r8,-1
80003ab2:	48 d8       	lddpc	r8,80003ae4 <Read_button+0x168>
80003ab4:	91 0a       	st.w	r8[0x0],r10
80003ab6:	58 09       	cp.w	r9,0
80003ab8:	c0 30       	breq	80003abe <Read_button+0x142>
		{
			calculate_salt();
80003aba:	f0 1f 00 0d 	mcall	80003aec <Read_button+0x170>
		}
	}	
}
80003abe:	2f fd       	sub	sp,-4
80003ac0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ac4:	80 00       	ld.sh	r0,r0[0x0]
80003ac6:	3a f0       	mov	r0,-81
80003ac8:	00 00       	add	r0,r0
80003aca:	03 fc       	ld.ub	r12,r1[0x7]
80003acc:	00 00       	add	r0,r0
80003ace:	03 f8       	ld.ub	r8,r1[0x7]
80003ad0:	00 00       	add	r0,r0
80003ad2:	03 fa       	ld.ub	r10,r1[0x7]
80003ad4:	00 00       	add	r0,r0
80003ad6:	03 f9       	ld.ub	r9,r1[0x7]
80003ad8:	00 00       	add	r0,r0
80003ada:	01 2e       	ld.uh	lr,r0++
80003adc:	80 00       	ld.sh	r0,r0[0x0]
80003ade:	3d 00       	mov	r0,-48
80003ae0:	80 00       	ld.sh	r0,r0[0x0]
80003ae2:	3d 88       	mov	r8,-40
80003ae4:	00 00       	add	r0,r0
80003ae6:	02 90       	mov	r0,r1
80003ae8:	00 00       	add	r0,r0
80003aea:	01 28       	ld.uh	r8,r0++
80003aec:	80 00       	ld.sh	r0,r0[0x0]
80003aee:	2d bc       	sub	r12,-37

80003af0 <button_pressed>:

uint8_t button_pressed (void)
{
80003af0:	eb cd 40 80 	pushm	r7,lr
80003af4:	1a 97       	mov	r7,sp
	
	is_button_released();
80003af6:	f0 1f 00 2a 	mcall	80003b9c <button_pressed+0xac>

	if (button_released)
80003afa:	4a a8       	lddpc	r8,80003ba0 <button_pressed+0xb0>
80003afc:	11 88       	ld.ub	r8,r8[0x0]
80003afe:	5c 58       	castu.b	r8
80003b00:	c4 90       	breq	80003b92 <button_pressed+0xa2>
	{		
		if (read_push_button(PB1, (uint8_t *)&PB1_Counter))
80003b02:	4a 9b       	lddpc	r11,80003ba4 <button_pressed+0xb4>
80003b04:	30 ac       	mov	r12,10
80003b06:	f0 1f 00 29 	mcall	80003ba8 <button_pressed+0xb8>
80003b0a:	18 98       	mov	r8,r12
80003b0c:	58 08       	cp.w	r8,0
80003b0e:	c0 90       	breq	80003b20 <button_pressed+0x30>
		{
			LED_On(LED0);
80003b10:	30 1c       	mov	r12,1
80003b12:	f0 1f 00 27 	mcall	80003bac <button_pressed+0xbc>
			LED_Off(LED1 | LED2 | LED3);
80003b16:	30 ec       	mov	r12,14
80003b18:	f0 1f 00 26 	mcall	80003bb0 <button_pressed+0xc0>
			//store_passcode(0L);
			return PUSH_BUTTON1;
80003b1c:	30 08       	mov	r8,0
80003b1e:	c3 c8       	rjmp	80003b96 <button_pressed+0xa6>
		}
		else if (read_push_button(PB2, (uint8_t *)&PB2_Counter))
80003b20:	4a 5b       	lddpc	r11,80003bb4 <button_pressed+0xc4>
80003b22:	30 bc       	mov	r12,11
80003b24:	f0 1f 00 21 	mcall	80003ba8 <button_pressed+0xb8>
80003b28:	18 98       	mov	r8,r12
80003b2a:	58 08       	cp.w	r8,0
80003b2c:	c0 90       	breq	80003b3e <button_pressed+0x4e>
		{
			LED_On(LED1);
80003b2e:	30 2c       	mov	r12,2
80003b30:	f0 1f 00 1f 	mcall	80003bac <button_pressed+0xbc>
			LED_Off(LED0 | LED2 | LED3);
80003b34:	30 dc       	mov	r12,13
80003b36:	f0 1f 00 1f 	mcall	80003bb0 <button_pressed+0xc0>
			//store_passcode(1L);
			return PUSH_BUTTON2;
80003b3a:	30 18       	mov	r8,1
80003b3c:	c2 d8       	rjmp	80003b96 <button_pressed+0xa6>
		}
		else if (read_push_button(PB3, (uint8_t *)&PB3_Counter))
80003b3e:	49 fb       	lddpc	r11,80003bb8 <button_pressed+0xc8>
80003b40:	30 cc       	mov	r12,12
80003b42:	f0 1f 00 1a 	mcall	80003ba8 <button_pressed+0xb8>
80003b46:	18 98       	mov	r8,r12
80003b48:	58 08       	cp.w	r8,0
80003b4a:	c0 90       	breq	80003b5c <button_pressed+0x6c>
		{
			LED_On(LED2);
80003b4c:	30 4c       	mov	r12,4
80003b4e:	f0 1f 00 18 	mcall	80003bac <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED3);
80003b52:	30 bc       	mov	r12,11
80003b54:	f0 1f 00 17 	mcall	80003bb0 <button_pressed+0xc0>
			//store_passcode(2L);
			return PUSH_BUTTON3;
80003b58:	30 28       	mov	r8,2
80003b5a:	c1 e8       	rjmp	80003b96 <button_pressed+0xa6>
		}
		else if (read_push_button(PB4, (uint8_t *)&PB4_Counter))
80003b5c:	49 8b       	lddpc	r11,80003bbc <button_pressed+0xcc>
80003b5e:	30 dc       	mov	r12,13
80003b60:	f0 1f 00 12 	mcall	80003ba8 <button_pressed+0xb8>
80003b64:	18 98       	mov	r8,r12
80003b66:	58 08       	cp.w	r8,0
80003b68:	c0 90       	breq	80003b7a <button_pressed+0x8a>
		{
			LED_On(LED3);
80003b6a:	30 8c       	mov	r12,8
80003b6c:	f0 1f 00 10 	mcall	80003bac <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED2);
80003b70:	30 7c       	mov	r12,7
80003b72:	f0 1f 00 10 	mcall	80003bb0 <button_pressed+0xc0>
			//store_passcode(3L);
			return PUSH_BUTTON4;
80003b76:	30 38       	mov	r8,3
80003b78:	c0 f8       	rjmp	80003b96 <button_pressed+0xa6>
		}
		else if (read_push_button(PB_ENTER, (uint8_t *)&PB5_Counter))
80003b7a:	49 2b       	lddpc	r11,80003bc0 <button_pressed+0xd0>
80003b7c:	32 ac       	mov	r12,42
80003b7e:	f0 1f 00 0b 	mcall	80003ba8 <button_pressed+0xb8>
80003b82:	18 98       	mov	r8,r12
80003b84:	58 08       	cp.w	r8,0
80003b86:	c0 60       	breq	80003b92 <button_pressed+0xa2>
		{
			device_unlocked = true;
80003b88:	48 f9       	lddpc	r9,80003bc4 <button_pressed+0xd4>
80003b8a:	30 18       	mov	r8,1
80003b8c:	b2 88       	st.b	r9[0x0],r8
			return ENTER_BUTTON;
80003b8e:	30 48       	mov	r8,4
80003b90:	c0 38       	rjmp	80003b96 <button_pressed+0xa6>
		}
	}
	return NO_BUTTON;
80003b92:	e0 68 00 ff 	mov	r8,255
}
80003b96:	10 9c       	mov	r12,r8
80003b98:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b9c:	80 00       	ld.sh	r0,r0[0x0]
80003b9e:	39 44       	mov	r4,-108
80003ba0:	00 00       	add	r0,r0
80003ba2:	01 2d       	ld.uh	sp,r0++
80003ba4:	00 00       	add	r0,r0
80003ba6:	04 20       	rsub	r0,r2
80003ba8:	80 00       	ld.sh	r0,r0[0x0]
80003baa:	3c 48       	mov	r8,-60
80003bac:	80 00       	ld.sh	r0,r0[0x0]
80003bae:	49 d0       	lddpc	r0,80003c20 <check_all_buttons_high+0x58>
80003bb0:	80 00       	ld.sh	r0,r0[0x0]
80003bb2:	49 18       	lddpc	r8,80003bf4 <check_all_buttons_high+0x2c>
80003bb4:	00 00       	add	r0,r0
80003bb6:	04 21       	rsub	r1,r2
80003bb8:	00 00       	add	r0,r0
80003bba:	04 22       	rsub	r2,r2
80003bbc:	00 00       	add	r0,r0
80003bbe:	04 23       	rsub	r3,r2
80003bc0:	00 00       	add	r0,r0
80003bc2:	04 24       	rsub	r4,r2
80003bc4:	00 00       	add	r0,r0
80003bc6:	02 88       	andn	r8,r1

80003bc8 <check_all_buttons_high>:

bool check_all_buttons_high(void)
{
80003bc8:	eb cd 40 80 	pushm	r7,lr
80003bcc:	1a 97       	mov	r7,sp
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003bce:	30 ac       	mov	r12,10
80003bd0:	f0 1f 00 1c 	mcall	80003c40 <check_all_buttons_high+0x78>
80003bd4:	18 98       	mov	r8,r12
80003bd6:	58 18       	cp.w	r8,1
80003bd8:	c2 b1       	brne	80003c2e <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
80003bda:	30 bc       	mov	r12,11
80003bdc:	f0 1f 00 19 	mcall	80003c40 <check_all_buttons_high+0x78>
80003be0:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003be2:	58 18       	cp.w	r8,1
80003be4:	c2 51       	brne	80003c2e <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
80003be6:	30 cc       	mov	r12,12
80003be8:	f0 1f 00 16 	mcall	80003c40 <check_all_buttons_high+0x78>
80003bec:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003bee:	58 18       	cp.w	r8,1
80003bf0:	c1 f1       	brne	80003c2e <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
80003bf2:	30 dc       	mov	r12,13
80003bf4:	f0 1f 00 13 	mcall	80003c40 <check_all_buttons_high+0x78>
80003bf8:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003bfa:	58 18       	cp.w	r8,1
80003bfc:	c1 91       	brne	80003c2e <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
		&& (gpio_get_pin_value(ENTER_BUTTON) == 1))
80003bfe:	30 4c       	mov	r12,4
80003c00:	f0 1f 00 10 	mcall	80003c40 <check_all_buttons_high+0x78>
80003c04:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003c06:	58 18       	cp.w	r8,1
80003c08:	c1 31       	brne	80003c2e <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
		&& (gpio_get_pin_value(ENTER_BUTTON) == 1))
	{
		if (button_released_iteration++ > 4)
80003c0a:	48 f8       	lddpc	r8,80003c44 <check_all_buttons_high+0x7c>
80003c0c:	11 88       	ld.ub	r8,r8[0x0]
80003c0e:	30 49       	mov	r9,4
80003c10:	f2 08 18 00 	cp.b	r8,r9
80003c14:	5f b9       	srhi	r9
80003c16:	5c 59       	castu.b	r9
80003c18:	2f f8       	sub	r8,-1
80003c1a:	5c 58       	castu.b	r8
80003c1c:	48 aa       	lddpc	r10,80003c44 <check_all_buttons_high+0x7c>
80003c1e:	b4 88       	st.b	r10[0x0],r8
80003c20:	58 09       	cp.w	r9,0
80003c22:	c0 a0       	breq	80003c36 <check_all_buttons_high+0x6e>
		{
			button_released_iteration = 0;
80003c24:	48 89       	lddpc	r9,80003c44 <check_all_buttons_high+0x7c>
80003c26:	30 08       	mov	r8,0
80003c28:	b2 88       	st.b	r9[0x0],r8
			return true;
80003c2a:	30 18       	mov	r8,1
80003c2c:	c0 78       	rjmp	80003c3a <check_all_buttons_high+0x72>
		}
	}
	else
	{
		button_released_iteration = 0;
80003c2e:	48 69       	lddpc	r9,80003c44 <check_all_buttons_high+0x7c>
80003c30:	30 08       	mov	r8,0
80003c32:	b2 88       	st.b	r9[0x0],r8
80003c34:	c0 28       	rjmp	80003c38 <check_all_buttons_high+0x70>

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003c36:	d7 03       	nop
	else
	{
		button_released_iteration = 0;
	}

	return false;
80003c38:	30 08       	mov	r8,0
}
80003c3a:	10 9c       	mov	r12,r8
80003c3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c40:	80 00       	ld.sh	r0,r0[0x0]
80003c42:	8c 10       	ld.sh	r0,r6[0x2]
80003c44:	00 00       	add	r0,r0
80003c46:	04 2f       	rsub	pc,r2

80003c48 <read_push_button>:

bool read_push_button(uint32_t pin, uint8_t *counter)
{
80003c48:	eb cd 40 80 	pushm	r7,lr
80003c4c:	1a 97       	mov	r7,sp
80003c4e:	20 3d       	sub	sp,12
80003c50:	ef 4c ff f8 	st.w	r7[-8],r12
80003c54:	ef 4b ff f4 	st.w	r7[-12],r11
	bool button_status = false;
80003c58:	30 08       	mov	r8,0
80003c5a:	ef 68 ff ff 	st.b	r7[-1],r8

	if (gpio_get_pin_value(pin) == 0)
80003c5e:	ee fc ff f8 	ld.w	r12,r7[-8]
80003c62:	f0 1f 00 18 	mcall	80003cc0 <read_push_button+0x78>
80003c66:	18 98       	mov	r8,r12
80003c68:	58 08       	cp.w	r8,0
80003c6a:	c1 c1       	brne	80003ca2 <read_push_button+0x5a>
	{
		(*counter)++;
80003c6c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003c70:	11 88       	ld.ub	r8,r8[0x0]
80003c72:	2f f8       	sub	r8,-1
80003c74:	5c 58       	castu.b	r8
80003c76:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003c7a:	b2 88       	st.b	r9[0x0],r8
		if (*counter >= 3)
80003c7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003c80:	11 89       	ld.ub	r9,r8[0x0]
80003c82:	30 28       	mov	r8,2
80003c84:	f0 09 18 00 	cp.b	r9,r8
80003c88:	e0 88 00 15 	brls	80003cb2 <read_push_button+0x6a>
		{
			button_status = true;
80003c8c:	30 18       	mov	r8,1
80003c8e:	ef 68 ff ff 	st.b	r7[-1],r8
			//if (enter_pressed)
			//{
				//enter_pressed = false;	
				//Start_W_timer();
			//}
			*counter = 0;
80003c92:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003c96:	30 08       	mov	r8,0
80003c98:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003c9a:	48 b9       	lddpc	r9,80003cc4 <read_push_button+0x7c>
80003c9c:	30 08       	mov	r8,0
80003c9e:	b2 88       	st.b	r9[0x0],r8
80003ca0:	c0 a8       	rjmp	80003cb4 <read_push_button+0x6c>
		}
	}
	else
	{
		button_status = false;
80003ca2:	30 08       	mov	r8,0
80003ca4:	ef 68 ff ff 	st.b	r7[-1],r8
		*counter = 0;
80003ca8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003cac:	30 08       	mov	r8,0
80003cae:	b2 88       	st.b	r9[0x0],r8
80003cb0:	c0 28       	rjmp	80003cb4 <read_push_button+0x6c>
			//{
				//enter_pressed = false;	
				//Start_W_timer();
			//}
			*counter = 0;
			button_released = false;
80003cb2:	d7 03       	nop
	else
	{
		button_status = false;
		*counter = 0;
	}
	return button_status;	
80003cb4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80003cb8:	10 9c       	mov	r12,r8
80003cba:	2f dd       	sub	sp,-12
80003cbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cc0:	80 00       	ld.sh	r0,r0[0x0]
80003cc2:	8c 10       	ld.sh	r0,r6[0x2]
80003cc4:	00 00       	add	r0,r0
80003cc6:	01 2d       	ld.uh	sp,r0++

80003cc8 <push_buttons_init>:

void push_buttons_init(void)
{
80003cc8:	eb cd 40 80 	pushm	r7,lr
80003ccc:	1a 97       	mov	r7,sp
	gpio_configure_pin(PB1,GPIO_DIR_INPUT);
80003cce:	30 0b       	mov	r11,0
80003cd0:	30 ac       	mov	r12,10
80003cd2:	f0 1f 00 0b 	mcall	80003cfc <push_buttons_init+0x34>
	gpio_configure_pin(PB2,GPIO_DIR_INPUT);
80003cd6:	30 0b       	mov	r11,0
80003cd8:	30 bc       	mov	r12,11
80003cda:	f0 1f 00 09 	mcall	80003cfc <push_buttons_init+0x34>
	gpio_configure_pin(PB3,GPIO_DIR_INPUT);
80003cde:	30 0b       	mov	r11,0
80003ce0:	30 cc       	mov	r12,12
80003ce2:	f0 1f 00 07 	mcall	80003cfc <push_buttons_init+0x34>
	gpio_configure_pin(PB4,GPIO_DIR_INPUT);
80003ce6:	30 0b       	mov	r11,0
80003ce8:	30 dc       	mov	r12,13
80003cea:	f0 1f 00 05 	mcall	80003cfc <push_buttons_init+0x34>
	gpio_configure_pin(PB_ENTER,GPIO_DIR_INPUT);
80003cee:	30 0b       	mov	r11,0
80003cf0:	32 ac       	mov	r12,42
80003cf2:	f0 1f 00 03 	mcall	80003cfc <push_buttons_init+0x34>
}
80003cf6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cfa:	00 00       	add	r0,r0
80003cfc:	80 00       	ld.sh	r0,r0[0x0]
80003cfe:	8a 62       	ld.sh	r2,r5[0xc]

80003d00 <store_passcode>:

void store_passcode(uint32_t value)
{
80003d00:	eb cd 40 80 	pushm	r7,lr
80003d04:	1a 97       	mov	r7,sp
80003d06:	20 2d       	sub	sp,8
80003d08:	ef 4c ff f8 	st.w	r7[-8],r12
	unsigned char index = 0;
80003d0c:	30 08       	mov	r8,0
80003d0e:	ef 68 ff ff 	st.b	r7[-1],r8
	index = passcode_byte_index >> 4;
80003d12:	49 c8       	lddpc	r8,80003d80 <store_passcode+0x80>
80003d14:	11 88       	ld.ub	r8,r8[0x0]
80003d16:	5c 58       	castu.b	r8
80003d18:	a5 88       	lsr	r8,0x4
80003d1a:	ef 68 ff ff 	st.b	r7[-1],r8
	pass_code[index] = pass_code[index] | (value << ((passcode_byte_index & 0x0000000F) << 1));
80003d1e:	49 a8       	lddpc	r8,80003d84 <store_passcode+0x84>
80003d20:	70 09       	ld.w	r9,r8[0x0]
80003d22:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003d26:	a3 68       	lsl	r8,0x2
80003d28:	10 09       	add	r9,r8
80003d2a:	49 78       	lddpc	r8,80003d84 <store_passcode+0x84>
80003d2c:	70 0a       	ld.w	r10,r8[0x0]
80003d2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003d32:	a3 68       	lsl	r8,0x2
80003d34:	f4 08 00 08 	add	r8,r10,r8
80003d38:	70 0a       	ld.w	r10,r8[0x0]
80003d3a:	49 28       	lddpc	r8,80003d80 <store_passcode+0x80>
80003d3c:	11 88       	ld.ub	r8,r8[0x0]
80003d3e:	5c 58       	castu.b	r8
80003d40:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003d44:	a1 78       	lsl	r8,0x1
80003d46:	ee fb ff f8 	ld.w	r11,r7[-8]
80003d4a:	f6 08 09 48 	lsl	r8,r11,r8
80003d4e:	f5 e8 10 08 	or	r8,r10,r8
80003d52:	93 08       	st.w	r9[0x0],r8
	if (++passcode_byte_index >= 128)
80003d54:	48 b8       	lddpc	r8,80003d80 <store_passcode+0x80>
80003d56:	11 88       	ld.ub	r8,r8[0x0]
80003d58:	5c 58       	castu.b	r8
80003d5a:	2f f8       	sub	r8,-1
80003d5c:	5c 58       	castu.b	r8
80003d5e:	48 99       	lddpc	r9,80003d80 <store_passcode+0x80>
80003d60:	b2 88       	st.b	r9[0x0],r8
80003d62:	48 88       	lddpc	r8,80003d80 <store_passcode+0x80>
80003d64:	11 88       	ld.ub	r8,r8[0x0]
80003d66:	5c 58       	castu.b	r8
80003d68:	10 99       	mov	r9,r8
80003d6a:	30 08       	mov	r8,0
80003d6c:	f0 09 18 00 	cp.b	r9,r8
80003d70:	c0 44       	brge	80003d78 <store_passcode+0x78>
	{
		passcode_byte_index = 0;
80003d72:	48 49       	lddpc	r9,80003d80 <store_passcode+0x80>
80003d74:	30 08       	mov	r8,0
80003d76:	b2 88       	st.b	r9[0x0],r8
	}
	//inter_key_delay = ENABLED;
}
80003d78:	2f ed       	sub	sp,-8
80003d7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d7e:	00 00       	add	r0,r0
80003d80:	00 00       	add	r0,r0
80003d82:	02 89       	andn	r9,r1
80003d84:	00 00       	add	r0,r0
80003d86:	0b 80       	ld.ub	r0,r5[0x0]

80003d88 <store_sequence>:

void store_sequence(uint8_t value)
{
80003d88:	eb cd 40 80 	pushm	r7,lr
80003d8c:	1a 97       	mov	r7,sp
80003d8e:	20 4d       	sub	sp,16
80003d90:	18 98       	mov	r8,r12
80003d92:	ef 68 ff f0 	st.b	r7[-16],r8
	static uint8_t frame_number = 0;
	uint8_t temp1, temp2, temp3;
	uint8_t shift_value = value * 2;
80003d96:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003d9a:	a1 78       	lsl	r8,0x1
80003d9c:	ef 68 ff f9 	st.b	r7[-7],r8
	uint8_t button_bit_mask = 0x03 << shift_value;
80003da0:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003da4:	30 39       	mov	r9,3
80003da6:	f2 08 09 48 	lsl	r8,r9,r8
80003daa:	ef 68 ff fa 	st.b	r7[-6],r8
	uint8_t increment_bit_mask = 0x01 << shift_value;
80003dae:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003db2:	30 19       	mov	r9,1
80003db4:	f2 08 09 48 	lsl	r8,r9,r8
80003db8:	ef 68 ff fb 	st.b	r7[-5],r8
	
	switch (value)
80003dbc:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003dc0:	58 08       	cp.w	r8,0
80003dc2:	e0 85 00 85 	brlt	80003ecc <store_sequence+0x144>
80003dc6:	58 28       	cp.w	r8,2
80003dc8:	e0 8a 00 05 	brle	80003dd2 <store_sequence+0x4a>
80003dcc:	58 38       	cp.w	r8,3
80003dce:	c6 70       	breq	80003e9c <store_sequence+0x114>
80003dd0:	c7 e8       	rjmp	80003ecc <store_sequence+0x144>
	{
	case 0:
	case 1:
	case 2:
		temp1 = Stored_values_ram.device_id_sequence[frame_number] & button_bit_mask;
80003dd2:	4c 18       	lddpc	r8,80003ed4 <store_sequence+0x14c>
80003dd4:	11 88       	ld.ub	r8,r8[0x0]
80003dd6:	4c 19       	lddpc	r9,80003ed8 <store_sequence+0x150>
80003dd8:	f2 08 00 08 	add	r8,r9,r8
80003ddc:	f1 38 00 80 	ld.ub	r8,r8[128]
80003de0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003de4:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80003de8:	f3 e8 00 08 	and	r8,r9,r8
80003dec:	ef 68 ff f6 	st.b	r7[-10],r8
		temp1 = temp1 + increment_bit_mask;
80003df0:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80003df4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003df8:	f2 08 00 08 	add	r8,r9,r8
80003dfc:	ef 68 ff f6 	st.b	r7[-10],r8
		temp1 = temp1 & button_bit_mask;
80003e00:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80003e04:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80003e08:	f3 e8 00 08 	and	r8,r9,r8
80003e0c:	ef 68 ff f6 	st.b	r7[-10],r8
		LED_Off(0x0000000f);
80003e10:	30 fc       	mov	r12,15
80003e12:	f0 1f 00 33 	mcall	80003edc <store_sequence+0x154>
		if (temp1)
80003e16:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80003e1a:	30 08       	mov	r8,0
80003e1c:	f0 09 18 00 	cp.b	r9,r8
80003e20:	c1 b0       	breq	80003e56 <store_sequence+0xce>
		{
			uint32_t led_bit_mask = 0;
80003e22:	30 08       	mov	r8,0
80003e24:	ef 48 ff fc 	st.w	r7[-4],r8
			led_bit_mask = ((uint32_t)1L << (value * 3)) << ((temp1 >> shift_value) - 1);
80003e28:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003e2c:	12 98       	mov	r8,r9
80003e2e:	a1 78       	lsl	r8,0x1
80003e30:	12 08       	add	r8,r9
80003e32:	30 19       	mov	r9,1
80003e34:	f2 08 09 49 	lsl	r9,r9,r8
80003e38:	ef 3a ff f6 	ld.ub	r10,r7[-10]
80003e3c:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003e40:	f4 08 08 48 	asr	r8,r10,r8
80003e44:	20 18       	sub	r8,1
80003e46:	f2 08 09 48 	lsl	r8,r9,r8
80003e4a:	ef 48 ff fc 	st.w	r7[-4],r8
			LED_On(led_bit_mask);
80003e4e:	ee fc ff fc 	ld.w	r12,r7[-4]
80003e52:	f0 1f 00 24 	mcall	80003ee0 <store_sequence+0x158>
		}				
		temp2 = Stored_values_ram.device_id_sequence[frame_number] & ~button_bit_mask;
80003e56:	4a 08       	lddpc	r8,80003ed4 <store_sequence+0x14c>
80003e58:	11 88       	ld.ub	r8,r8[0x0]
80003e5a:	4a 09       	lddpc	r9,80003ed8 <store_sequence+0x150>
80003e5c:	f2 08 00 08 	add	r8,r9,r8
80003e60:	f1 38 00 80 	ld.ub	r8,r8[128]
80003e64:	5c 58       	castu.b	r8
80003e66:	10 99       	mov	r9,r8
80003e68:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80003e6c:	5c d8       	com	r8
80003e6e:	5c 58       	castu.b	r8
80003e70:	f3 e8 00 08 	and	r8,r9,r8
80003e74:	5c 58       	castu.b	r8
80003e76:	ef 68 ff f7 	st.b	r7[-9],r8
		//temp2 = ~temp2;
		temp3 = temp1 | temp2;
80003e7a:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80003e7e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003e82:	f3 e8 10 08 	or	r8,r9,r8
80003e86:	ef 68 ff f8 	st.b	r7[-8],r8
		Stored_values_ram.device_id_sequence[frame_number] = temp3;
80003e8a:	49 38       	lddpc	r8,80003ed4 <store_sequence+0x14c>
80003e8c:	11 88       	ld.ub	r8,r8[0x0]
80003e8e:	49 39       	lddpc	r9,80003ed8 <store_sequence+0x150>
80003e90:	10 09       	add	r9,r8
80003e92:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003e96:	f3 68 00 80 	st.b	r9[128],r8
		break;
80003e9a:	c1 98       	rjmp	80003ecc <store_sequence+0x144>
	case 3:
		Stored_values_ram.device_id_sequence[frame_number++] |= 0xC0;
80003e9c:	48 e8       	lddpc	r8,80003ed4 <store_sequence+0x14c>
80003e9e:	11 88       	ld.ub	r8,r8[0x0]
80003ea0:	10 99       	mov	r9,r8
80003ea2:	12 9a       	mov	r10,r9
80003ea4:	48 db       	lddpc	r11,80003ed8 <store_sequence+0x150>
80003ea6:	f6 09 00 09 	add	r9,r11,r9
80003eaa:	f3 39 00 80 	ld.ub	r9,r9[128]
80003eae:	5c 59       	castu.b	r9
80003eb0:	ea 19 ff ff 	orh	r9,0xffff
80003eb4:	e8 19 ff c0 	orl	r9,0xffc0
80003eb8:	5c 59       	castu.b	r9
80003eba:	48 8b       	lddpc	r11,80003ed8 <store_sequence+0x150>
80003ebc:	f6 0a 00 0a 	add	r10,r11,r10
80003ec0:	f5 69 00 80 	st.b	r10[128],r9
80003ec4:	2f f8       	sub	r8,-1
80003ec6:	5c 58       	castu.b	r8
80003ec8:	48 39       	lddpc	r9,80003ed4 <store_sequence+0x14c>
80003eca:	b2 88       	st.b	r9[0x0],r8
		break;
	}	
}
80003ecc:	2f cd       	sub	sp,-16
80003ece:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ed2:	00 00       	add	r0,r0
80003ed4:	00 00       	add	r0,r0
80003ed6:	04 2e       	rsub	lr,r2
80003ed8:	00 00       	add	r0,r0
80003eda:	0a 3c       	cp.w	r12,r5
80003edc:	80 00       	ld.sh	r0,r0[0x0]
80003ede:	49 18       	lddpc	r8,80003f20 <check_programming_mode_entry_sequence+0x3c>
80003ee0:	80 00       	ld.sh	r0,r0[0x0]
80003ee2:	49 d0       	lddpc	r0,80003f54 <check_programming_mode_entry_sequence+0x70>

80003ee4 <check_programming_mode_entry_sequence>:

bool check_programming_mode_entry_sequence(void)
{
80003ee4:	eb cd 40 80 	pushm	r7,lr
80003ee8:	1a 97       	mov	r7,sp
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
		&& gpio_get_pin_value(PB3) == 0
80003eea:	30 ac       	mov	r12,10
80003eec:	f0 1f 00 1e 	mcall	80003f64 <check_programming_mode_entry_sequence+0x80>
80003ef0:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003ef2:	58 08       	cp.w	r8,0
80003ef4:	c2 e1       	brne	80003f50 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
80003ef6:	30 cc       	mov	r12,12
80003ef8:	f0 1f 00 1b 	mcall	80003f64 <check_programming_mode_entry_sequence+0x80>
80003efc:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003efe:	58 08       	cp.w	r8,0
80003f00:	c2 81       	brne	80003f50 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
80003f02:	30 dc       	mov	r12,13
80003f04:	f0 1f 00 18 	mcall	80003f64 <check_programming_mode_entry_sequence+0x80>
80003f08:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003f0a:	58 08       	cp.w	r8,0
80003f0c:	c2 21       	brne	80003f50 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003f0e:	30 bc       	mov	r12,11
80003f10:	f0 1f 00 15 	mcall	80003f64 <check_programming_mode_entry_sequence+0x80>
80003f14:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003f16:	58 18       	cp.w	r8,1
80003f18:	c1 c1       	brne	80003f50 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003f1a:	30 4c       	mov	r12,4
80003f1c:	f0 1f 00 12 	mcall	80003f64 <check_programming_mode_entry_sequence+0x80>
80003f20:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003f22:	58 18       	cp.w	r8,1
80003f24:	c1 61       	brne	80003f50 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
	{
		if (programming_mode_sequence_counter++ >= 100)
80003f26:	49 18       	lddpc	r8,80003f68 <check_programming_mode_entry_sequence+0x84>
80003f28:	90 08       	ld.sh	r8,r8[0x0]
80003f2a:	36 39       	mov	r9,99
80003f2c:	f2 08 19 00 	cp.h	r8,r9
80003f30:	5f b9       	srhi	r9
80003f32:	5c 59       	castu.b	r9
80003f34:	2f f8       	sub	r8,-1
80003f36:	5c 88       	casts.h	r8
80003f38:	48 ca       	lddpc	r10,80003f68 <check_programming_mode_entry_sequence+0x84>
80003f3a:	b4 08       	st.h	r10[0x0],r8
80003f3c:	58 09       	cp.w	r9,0
80003f3e:	c0 d0       	breq	80003f58 <check_programming_mode_entry_sequence+0x74>
		{
			programming_mode_sequence_counter = 0;
80003f40:	48 a9       	lddpc	r9,80003f68 <check_programming_mode_entry_sequence+0x84>
80003f42:	30 08       	mov	r8,0
80003f44:	b2 08       	st.h	r9[0x0],r8
			button_released = false;
80003f46:	48 a9       	lddpc	r9,80003f6c <check_programming_mode_entry_sequence+0x88>
80003f48:	30 08       	mov	r8,0
80003f4a:	b2 88       	st.b	r9[0x0],r8
			return true;
80003f4c:	30 18       	mov	r8,1
80003f4e:	c0 78       	rjmp	80003f5c <check_programming_mode_entry_sequence+0x78>
		}
	}
	else
	{
		programming_mode_sequence_counter = 0;
80003f50:	48 69       	lddpc	r9,80003f68 <check_programming_mode_entry_sequence+0x84>
80003f52:	30 08       	mov	r8,0
80003f54:	b2 08       	st.h	r9[0x0],r8
80003f56:	c0 28       	rjmp	80003f5a <check_programming_mode_entry_sequence+0x76>
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003f58:	d7 03       	nop
	}
	else
	{
		programming_mode_sequence_counter = 0;
	}
	return false;
80003f5a:	30 08       	mov	r8,0
}
80003f5c:	10 9c       	mov	r12,r8
80003f5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f62:	00 00       	add	r0,r0
80003f64:	80 00       	ld.sh	r0,r0[0x0]
80003f66:	8c 10       	ld.sh	r0,r6[0x2]
80003f68:	00 00       	add	r0,r0
80003f6a:	04 2c       	rsub	r12,r2
80003f6c:	00 00       	add	r0,r0
80003f6e:	01 2d       	ld.uh	sp,r0++

80003f70 <check_normal_mode_entry_sequence>:

bool check_normal_mode_entry_sequence(void)
{
80003f70:	eb cd 40 80 	pushm	r7,lr
80003f74:	1a 97       	mov	r7,sp
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
		&& gpio_get_pin_value(PB4) == 0
80003f76:	30 4c       	mov	r12,4
80003f78:	f0 1f 00 40 	mcall	80004078 <check_normal_mode_entry_sequence+0x108>
80003f7c:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003f7e:	58 08       	cp.w	r8,0
80003f80:	c3 41       	brne	80003fe8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
80003f82:	30 dc       	mov	r12,13
80003f84:	f0 1f 00 3d 	mcall	80004078 <check_normal_mode_entry_sequence+0x108>
80003f88:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003f8a:	58 08       	cp.w	r8,0
80003f8c:	c2 e1       	brne	80003fe8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
80003f8e:	30 ac       	mov	r12,10
80003f90:	f0 1f 00 3a 	mcall	80004078 <check_normal_mode_entry_sequence+0x108>
80003f94:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003f96:	58 18       	cp.w	r8,1
80003f98:	c2 81       	brne	80003fe8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003f9a:	30 bc       	mov	r12,11
80003f9c:	f0 1f 00 37 	mcall	80004078 <check_normal_mode_entry_sequence+0x108>
80003fa0:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003fa2:	58 18       	cp.w	r8,1
80003fa4:	c2 21       	brne	80003fe8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003fa6:	30 cc       	mov	r12,12
80003fa8:	f0 1f 00 34 	mcall	80004078 <check_normal_mode_entry_sequence+0x108>
80003fac:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003fae:	58 18       	cp.w	r8,1
80003fb0:	c1 c1       	brne	80003fe8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
	{
		normal_mode_unlock_device_sequence_counter = 0;
80003fb2:	4b 39       	lddpc	r9,8000407c <check_normal_mode_entry_sequence+0x10c>
80003fb4:	30 08       	mov	r8,0
80003fb6:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_device_id_sequence_counter++ >= 200)
80003fb8:	4b 28       	lddpc	r8,80004080 <check_normal_mode_entry_sequence+0x110>
80003fba:	11 88       	ld.ub	r8,r8[0x0]
80003fbc:	3c 79       	mov	r9,-57
80003fbe:	f2 08 18 00 	cp.b	r8,r9
80003fc2:	5f b9       	srhi	r9
80003fc4:	5c 59       	castu.b	r9
80003fc6:	2f f8       	sub	r8,-1
80003fc8:	5c 58       	castu.b	r8
80003fca:	4a ea       	lddpc	r10,80004080 <check_normal_mode_entry_sequence+0x110>
80003fcc:	b4 88       	st.b	r10[0x0],r8
80003fce:	58 09       	cp.w	r9,0
80003fd0:	c4 c0       	breq	80004068 <check_normal_mode_entry_sequence+0xf8>
		{
			normal_mode_device_id_sequence_counter = 0;
80003fd2:	4a c9       	lddpc	r9,80004080 <check_normal_mode_entry_sequence+0x110>
80003fd4:	30 08       	mov	r8,0
80003fd6:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003fd8:	4a b9       	lddpc	r9,80004084 <check_normal_mode_entry_sequence+0x114>
80003fda:	30 08       	mov	r8,0
80003fdc:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = DEVICE_ID;
80003fde:	4a b9       	lddpc	r9,80004088 <check_normal_mode_entry_sequence+0x118>
80003fe0:	30 38       	mov	r8,3
80003fe2:	b2 88       	st.b	r9[0x0],r8
			return true;
80003fe4:	30 18       	mov	r8,1
80003fe6:	c4 58       	rjmp	80004070 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
			&& gpio_get_pin_value(PB2) == 0
80003fe8:	30 4c       	mov	r12,4
80003fea:	f0 1f 00 24 	mcall	80004078 <check_normal_mode_entry_sequence+0x108>
80003fee:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003ff0:	58 08       	cp.w	r8,0
80003ff2:	c3 41       	brne	8000405a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
80003ff4:	30 bc       	mov	r12,11
80003ff6:	f0 1f 00 21 	mcall	80004078 <check_normal_mode_entry_sequence+0x108>
80003ffa:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003ffc:	58 08       	cp.w	r8,0
80003ffe:	c2 e1       	brne	8000405a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
80004000:	30 ac       	mov	r12,10
80004002:	f0 1f 00 1e 	mcall	80004078 <check_normal_mode_entry_sequence+0x108>
80004006:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80004008:	58 18       	cp.w	r8,1
8000400a:	c2 81       	brne	8000405a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
8000400c:	30 cc       	mov	r12,12
8000400e:	f0 1f 00 1b 	mcall	80004078 <check_normal_mode_entry_sequence+0x108>
80004012:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80004014:	58 18       	cp.w	r8,1
80004016:	c2 21       	brne	8000405a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80004018:	30 dc       	mov	r12,13
8000401a:	f0 1f 00 18 	mcall	80004078 <check_normal_mode_entry_sequence+0x108>
8000401e:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80004020:	58 18       	cp.w	r8,1
80004022:	c1 c1       	brne	8000405a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
	{
		normal_mode_device_id_sequence_counter = 0;
80004024:	49 79       	lddpc	r9,80004080 <check_normal_mode_entry_sequence+0x110>
80004026:	30 08       	mov	r8,0
80004028:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_unlock_device_sequence_counter++ >= 200)
8000402a:	49 58       	lddpc	r8,8000407c <check_normal_mode_entry_sequence+0x10c>
8000402c:	11 88       	ld.ub	r8,r8[0x0]
8000402e:	3c 79       	mov	r9,-57
80004030:	f2 08 18 00 	cp.b	r8,r9
80004034:	5f b9       	srhi	r9
80004036:	5c 59       	castu.b	r9
80004038:	2f f8       	sub	r8,-1
8000403a:	5c 58       	castu.b	r8
8000403c:	49 0a       	lddpc	r10,8000407c <check_normal_mode_entry_sequence+0x10c>
8000403e:	b4 88       	st.b	r10[0x0],r8
80004040:	58 09       	cp.w	r9,0
80004042:	c1 50       	breq	8000406c <check_normal_mode_entry_sequence+0xfc>
		{
			normal_mode_unlock_device_sequence_counter = 0;
80004044:	48 e9       	lddpc	r9,8000407c <check_normal_mode_entry_sequence+0x10c>
80004046:	30 08       	mov	r8,0
80004048:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
8000404a:	48 f9       	lddpc	r9,80004084 <check_normal_mode_entry_sequence+0x114>
8000404c:	30 08       	mov	r8,0
8000404e:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = UNLOCK_CRYPTX2;
80004050:	48 e9       	lddpc	r9,80004088 <check_normal_mode_entry_sequence+0x118>
80004052:	30 48       	mov	r8,4
80004054:	b2 88       	st.b	r9[0x0],r8
			return true;
80004056:	30 18       	mov	r8,1
80004058:	c0 c8       	rjmp	80004070 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else
	{
		normal_mode_device_id_sequence_counter = 0;
8000405a:	48 a9       	lddpc	r9,80004080 <check_normal_mode_entry_sequence+0x110>
8000405c:	30 08       	mov	r8,0
8000405e:	b2 88       	st.b	r9[0x0],r8
		normal_mode_unlock_device_sequence_counter = 0;
80004060:	48 79       	lddpc	r9,8000407c <check_normal_mode_entry_sequence+0x10c>
80004062:	30 08       	mov	r8,0
80004064:	b2 88       	st.b	r9[0x0],r8
80004066:	c0 48       	rjmp	8000406e <check_normal_mode_entry_sequence+0xfe>
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80004068:	d7 03       	nop
8000406a:	c0 28       	rjmp	8000406e <check_normal_mode_entry_sequence+0xfe>
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
8000406c:	d7 03       	nop
	else
	{
		normal_mode_device_id_sequence_counter = 0;
		normal_mode_unlock_device_sequence_counter = 0;
	}
	return false;
8000406e:	30 08       	mov	r8,0
}
80004070:	10 9c       	mov	r12,r8
80004072:	e3 cd 80 80 	ldm	sp++,r7,pc
80004076:	00 00       	add	r0,r0
80004078:	80 00       	ld.sh	r0,r0[0x0]
8000407a:	8c 10       	ld.sh	r0,r6[0x2]
8000407c:	00 00       	add	r0,r0
8000407e:	04 2a       	rsub	r10,r2
80004080:	00 00       	add	r0,r0
80004082:	04 2b       	rsub	r11,r2
80004084:	00 00       	add	r0,r0
80004086:	01 2d       	ld.uh	sp,r0++
80004088:	00 00       	add	r0,r0
8000408a:	03 fb       	ld.ub	r11,r1[0x7]

8000408c <check_for_mode_selected>:

void check_for_mode_selected(void)
{
8000408c:	eb cd 40 80 	pushm	r7,lr
80004090:	1a 97       	mov	r7,sp
	Read_button();
80004092:	f0 1f 00 03 	mcall	8000409c <check_for_mode_selected+0x10>
}
80004096:	e3 cd 80 80 	ldm	sp++,r7,pc
8000409a:	00 00       	add	r0,r0
8000409c:	80 00       	ld.sh	r0,r0[0x0]
8000409e:	39 7c       	mov	r12,-105

800040a0 <process_selected_mode>:

uint8_t process_selected_mode(void)
{
800040a0:	eb cd 40 80 	pushm	r7,lr
800040a4:	1a 97       	mov	r7,sp
800040a6:	20 1d       	sub	sp,4
	uint8_t return_value = FAILED;
800040a8:	30 08       	mov	r8,0
800040aa:	ef 68 ff ff 	st.b	r7[-1],r8
	
	
	
	if (enter_button_status == READY_TO_TRIGGER)
800040ae:	4c 88       	lddpc	r8,800041cc <process_selected_mode+0x12c>
800040b0:	11 88       	ld.ub	r8,r8[0x0]
800040b2:	5c 58       	castu.b	r8
800040b4:	c0 b1       	brne	800040ca <process_selected_mode+0x2a>
	{
		pass_code = temp_password;
800040b6:	4c 78       	lddpc	r8,800041d0 <process_selected_mode+0x130>
800040b8:	4c 79       	lddpc	r9,800041d4 <process_selected_mode+0x134>
800040ba:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
800040bc:	4c 79       	lddpc	r9,800041d8 <process_selected_mode+0x138>
800040be:	30 08       	mov	r8,0
800040c0:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_FIRST_PRESS;
800040c2:	4c 39       	lddpc	r9,800041cc <process_selected_mode+0x12c>
800040c4:	30 18       	mov	r8,1
800040c6:	b2 88       	st.b	r9[0x0],r8
800040c8:	c7 a8       	rjmp	800041bc <process_selected_mode+0x11c>
	}
	else if (enter_button_status == FIRST_TIME_PRESSED)
800040ca:	4c 18       	lddpc	r8,800041cc <process_selected_mode+0x12c>
800040cc:	11 88       	ld.ub	r8,r8[0x0]
800040ce:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800040d2:	30 28       	mov	r8,2
800040d4:	f0 09 18 00 	cp.b	r9,r8
800040d8:	c0 e1       	brne	800040f4 <process_selected_mode+0x54>
	{
		store_passcode(3L);
800040da:	30 3c       	mov	r12,3
800040dc:	f0 1f 00 40 	mcall	800041dc <process_selected_mode+0x13c>
		pass_code = temp_password1;
800040e0:	4b c8       	lddpc	r8,800041d0 <process_selected_mode+0x130>
800040e2:	4c 09       	lddpc	r9,800041e0 <process_selected_mode+0x140>
800040e4:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
800040e6:	4b d9       	lddpc	r9,800041d8 <process_selected_mode+0x138>
800040e8:	30 08       	mov	r8,0
800040ea:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_SECOND_PRESS;
800040ec:	4b 89       	lddpc	r9,800041cc <process_selected_mode+0x12c>
800040ee:	30 38       	mov	r8,3
800040f0:	b2 88       	st.b	r9[0x0],r8
800040f2:	c6 58       	rjmp	800041bc <process_selected_mode+0x11c>
	}
	else if (enter_button_status == SECOND_TIME_PRESSED)
800040f4:	4b 68       	lddpc	r8,800041cc <process_selected_mode+0x12c>
800040f6:	11 88       	ld.ub	r8,r8[0x0]
800040f8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800040fc:	30 48       	mov	r8,4
800040fe:	f0 09 18 00 	cp.b	r9,r8
80004102:	c3 11       	brne	80004164 <process_selected_mode+0xc4>
	{
		store_passcode(3L);
80004104:	30 3c       	mov	r12,3
80004106:	f0 1f 00 36 	mcall	800041dc <process_selected_mode+0x13c>
		if (compare_entered_passwords() == true)
8000410a:	f0 1f 00 37 	mcall	800041e4 <process_selected_mode+0x144>
8000410e:	18 98       	mov	r8,r12
80004110:	58 08       	cp.w	r8,0
80004112:	c5 00       	breq	800041b2 <process_selected_mode+0x112>
		{
			memset((uint8_t *)temp_password, 0, 32);
80004114:	32 0a       	mov	r10,32
80004116:	30 0b       	mov	r11,0
80004118:	4a fc       	lddpc	r12,800041d4 <process_selected_mode+0x134>
8000411a:	f0 1f 00 34 	mcall	800041e8 <process_selected_mode+0x148>
			pass_code = temp_password;
8000411e:	4a d8       	lddpc	r8,800041d0 <process_selected_mode+0x130>
80004120:	4a d9       	lddpc	r9,800041d4 <process_selected_mode+0x134>
80004122:	91 09       	st.w	r8[0x0],r9
			passcode_byte_index = 0;
80004124:	4a d9       	lddpc	r9,800041d8 <process_selected_mode+0x138>
80004126:	30 08       	mov	r8,0
80004128:	b2 88       	st.b	r9[0x0],r8
			enter_button_status = WAITING_FOR_USER_INPUT;
8000412a:	4a 99       	lddpc	r9,800041cc <process_selected_mode+0x12c>
8000412c:	30 58       	mov	r8,5
8000412e:	b2 88       	st.b	r9[0x0],r8
			switch (mode_chosen)
80004130:	4a f8       	lddpc	r8,800041ec <process_selected_mode+0x14c>
80004132:	11 88       	ld.ub	r8,r8[0x0]
80004134:	5c 58       	castu.b	r8
80004136:	58 18       	cp.w	r8,1
80004138:	c3 f0       	breq	800041b6 <process_selected_mode+0x116>
8000413a:	e0 89 00 05 	brgt	80004144 <process_selected_mode+0xa4>
8000413e:	58 08       	cp.w	r8,0
80004140:	c0 70       	breq	8000414e <process_selected_mode+0xae>
			case _HIDDEN_DATA_UNLOCK_PASSWORD:
				break;
			case _PANIC_MODE:
				break;
			case _DEVICE_ID_CONFIRM:
				memset((uint8_t *)Stored_values_ram.device_id_sequence, 0, 32);
80004142:	c3 d8       	rjmp	800041bc <process_selected_mode+0x11c>
		{
			memset((uint8_t *)temp_password, 0, 32);
			pass_code = temp_password;
			passcode_byte_index = 0;
			enter_button_status = WAITING_FOR_USER_INPUT;
			switch (mode_chosen)
80004144:	58 28       	cp.w	r8,2
80004146:	c3 a0       	breq	800041ba <process_selected_mode+0x11a>
80004148:	58 38       	cp.w	r8,3
8000414a:	c0 50       	breq	80004154 <process_selected_mode+0xb4>
			case _HIDDEN_DATA_UNLOCK_PASSWORD:
				break;
			case _PANIC_MODE:
				break;
			case _DEVICE_ID_CONFIRM:
				memset((uint8_t *)Stored_values_ram.device_id_sequence, 0, 32);
8000414c:	c3 88       	rjmp	800041bc <process_selected_mode+0x11c>
			passcode_byte_index = 0;
			enter_button_status = WAITING_FOR_USER_INPUT;
			switch (mode_chosen)
			{
			case _UNLOCK_PASSWORD:
				Start_W_timer();			
8000414e:	f0 1f 00 29 	mcall	800041f0 <process_selected_mode+0x150>
				break;
80004152:	c3 58       	rjmp	800041bc <process_selected_mode+0x11c>
			case _HIDDEN_DATA_UNLOCK_PASSWORD:
				break;
			case _PANIC_MODE:
				break;
			case _DEVICE_ID_CONFIRM:
				memset((uint8_t *)Stored_values_ram.device_id_sequence, 0, 32);
80004154:	4a 88       	lddpc	r8,800041f4 <process_selected_mode+0x154>
80004156:	28 08       	sub	r8,-128
80004158:	32 0a       	mov	r10,32
8000415a:	30 0b       	mov	r11,0
8000415c:	10 9c       	mov	r12,r8
8000415e:	f0 1f 00 23 	mcall	800041e8 <process_selected_mode+0x148>
80004162:	c2 d8       	rjmp	800041bc <process_selected_mode+0x11c>
				break;	
			}

		}
	}
	else if (enter_button_status == THIRD_TIME_PRESSED)
80004164:	49 a8       	lddpc	r8,800041cc <process_selected_mode+0x12c>
80004166:	11 88       	ld.ub	r8,r8[0x0]
80004168:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000416c:	30 68       	mov	r8,6
8000416e:	f0 09 18 00 	cp.b	r9,r8
80004172:	c2 51       	brne	800041bc <process_selected_mode+0x11c>
	{
		
		switch (mode_chosen)
80004174:	49 e8       	lddpc	r8,800041ec <process_selected_mode+0x14c>
80004176:	11 88       	ld.ub	r8,r8[0x0]
80004178:	5c 58       	castu.b	r8
8000417a:	58 18       	cp.w	r8,1
8000417c:	c1 40       	breq	800041a4 <process_selected_mode+0x104>
8000417e:	e0 89 00 05 	brgt	80004188 <process_selected_mode+0xe8>
80004182:	58 08       	cp.w	r8,0
80004184:	c0 70       	breq	80004192 <process_selected_mode+0xf2>
80004186:	c1 28       	rjmp	800041aa <process_selected_mode+0x10a>
80004188:	58 28       	cp.w	r8,2
8000418a:	c0 f0       	breq	800041a8 <process_selected_mode+0x108>
8000418c:	58 38       	cp.w	r8,3
8000418e:	c0 80       	breq	8000419e <process_selected_mode+0xfe>
80004190:	c0 d8       	rjmp	800041aa <process_selected_mode+0x10a>
		{
		case _UNLOCK_PASSWORD:
			store_passcode(3L);
80004192:	30 3c       	mov	r12,3
80004194:	f0 1f 00 12 	mcall	800041dc <process_selected_mode+0x13c>
			calculate_salt();
80004198:	f0 1f 00 18 	mcall	800041f8 <process_selected_mode+0x158>
			break;
8000419c:	c0 78       	rjmp	800041aa <process_selected_mode+0x10a>
		case _HIDDEN_DATA_UNLOCK_PASSWORD:
			break;
		case _PANIC_MODE:
			break;
		case _DEVICE_ID_CONFIRM:
			save_sequence_to_mcu();
8000419e:	f0 1f 00 18 	mcall	800041fc <process_selected_mode+0x15c>
800041a2:	c0 48       	rjmp	800041aa <process_selected_mode+0x10a>
		case _UNLOCK_PASSWORD:
			store_passcode(3L);
			calculate_salt();
			break;
		case _HIDDEN_DATA_UNLOCK_PASSWORD:
			break;
800041a4:	d7 03       	nop
800041a6:	c0 28       	rjmp	800041aa <process_selected_mode+0x10a>
		case _PANIC_MODE:
			break;
800041a8:	d7 03       	nop
		case _DEVICE_ID_CONFIRM:
			save_sequence_to_mcu();
			break;
		}
		
		return_value = SUCCESSFUL;
800041aa:	30 18       	mov	r8,1
800041ac:	ef 68 ff ff 	st.b	r7[-1],r8
800041b0:	c0 68       	rjmp	800041bc <process_selected_mode+0x11c>
			case _HIDDEN_DATA_UNLOCK_PASSWORD:
				break;
			case _PANIC_MODE:
				break;
			case _DEVICE_ID_CONFIRM:
				memset((uint8_t *)Stored_values_ram.device_id_sequence, 0, 32);
800041b2:	d7 03       	nop
800041b4:	c0 48       	rjmp	800041bc <process_selected_mode+0x11c>
			{
			case _UNLOCK_PASSWORD:
				Start_W_timer();			
				break;
			case _HIDDEN_DATA_UNLOCK_PASSWORD:
				break;
800041b6:	d7 03       	nop
800041b8:	c0 28       	rjmp	800041bc <process_selected_mode+0x11c>
			case _PANIC_MODE:
				break;
800041ba:	d7 03       	nop
		}
		
		return_value = SUCCESSFUL;
	}

	Read_button();
800041bc:	f0 1f 00 11 	mcall	80004200 <process_selected_mode+0x160>
	
	return return_value;
800041c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800041c4:	10 9c       	mov	r12,r8
800041c6:	2f fd       	sub	sp,-4
800041c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800041cc:	00 00       	add	r0,r0
800041ce:	03 fa       	ld.ub	r10,r1[0x7]
800041d0:	00 00       	add	r0,r0
800041d2:	0b 80       	ld.ub	r0,r5[0x0]
800041d4:	00 00       	add	r0,r0
800041d6:	02 48       	or	r8,r1
800041d8:	00 00       	add	r0,r0
800041da:	02 89       	andn	r9,r1
800041dc:	80 00       	ld.sh	r0,r0[0x0]
800041de:	3d 00       	mov	r0,-48
800041e0:	00 00       	add	r0,r0
800041e2:	02 68       	and	r8,r1
800041e4:	80 00       	ld.sh	r0,r0[0x0]
800041e6:	42 04       	lddsp	r4,sp[0x80]
800041e8:	80 00       	ld.sh	r0,r0[0x0]
800041ea:	e7 d6 00 00 	ldins.h	r6:b,r3[0]
800041ee:	01 2e       	ld.uh	lr,r0++
800041f0:	80 00       	ld.sh	r0,r0[0x0]
800041f2:	30 3c       	mov	r12,3
800041f4:	00 00       	add	r0,r0
800041f6:	0a 3c       	cp.w	r12,r5
800041f8:	80 00       	ld.sh	r0,r0[0x0]
800041fa:	2d bc       	sub	r12,-37
800041fc:	80 00       	ld.sh	r0,r0[0x0]
800041fe:	2f 60       	sub	r0,-10
80004200:	80 00       	ld.sh	r0,r0[0x0]
80004202:	39 7c       	mov	r12,-105

80004204 <compare_entered_passwords>:

bool compare_entered_passwords(void)
{
80004204:	eb cd 40 80 	pushm	r7,lr
80004208:	1a 97       	mov	r7,sp
8000420a:	20 1d       	sub	sp,4
	uint8_t i = 0;
8000420c:	30 08       	mov	r8,0
8000420e:	ef 68 ff ff 	st.b	r7[-1],r8
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
80004212:	c1 48       	rjmp	8000423a <compare_entered_passwords+0x36>
	{
		if (temp_password[i] != temp_password1[i])
80004214:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004218:	48 f8       	lddpc	r8,80004254 <compare_entered_passwords+0x50>
8000421a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000421e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80004222:	48 e8       	lddpc	r8,80004258 <compare_entered_passwords+0x54>
80004224:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80004228:	10 39       	cp.w	r9,r8
8000422a:	c0 30       	breq	80004230 <compare_entered_passwords+0x2c>
		{
			return false;
8000422c:	30 08       	mov	r8,0
8000422e:	c0 e8       	rjmp	8000424a <compare_entered_passwords+0x46>
		}
		i++;
80004230:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004234:	2f f8       	sub	r8,-1
80004236:	ef 68 ff ff 	st.b	r7[-1],r8

bool compare_entered_passwords(void)
{
	uint8_t i = 0;
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
8000423a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000423e:	30 78       	mov	r8,7
80004240:	f0 09 18 00 	cp.b	r9,r8
80004244:	fe 98 ff e8 	brls	80004214 <compare_entered_passwords+0x10>
		{
			return false;
		}
		i++;
	}
	return true;
80004248:	30 18       	mov	r8,1
}
8000424a:	10 9c       	mov	r12,r8
8000424c:	2f fd       	sub	sp,-4
8000424e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004252:	00 00       	add	r0,r0
80004254:	00 00       	add	r0,r0
80004256:	02 48       	or	r8,r1
80004258:	00 00       	add	r0,r0
8000425a:	02 68       	and	r8,r1

8000425c <read_password>:

void read_password(void)
{
8000425c:	eb cd 40 80 	pushm	r7,lr
80004260:	1a 97       	mov	r7,sp
	Read_button();
80004262:	f0 1f 00 0a 	mcall	80004288 <read_password+0x2c>
	if (normal_mode_password_entered == true)
80004266:	48 a8       	lddpc	r8,8000428c <read_password+0x30>
80004268:	11 88       	ld.ub	r8,r8[0x0]
8000426a:	5c 58       	castu.b	r8
8000426c:	c0 c0       	breq	80004284 <read_password+0x28>
	{
		if (compare_with_saved_password() == true)
8000426e:	f0 1f 00 09 	mcall	80004290 <read_password+0x34>
80004272:	18 98       	mov	r8,r12
80004274:	58 08       	cp.w	r8,0
80004276:	c0 70       	breq	80004284 <read_password+0x28>
		{
			stSystemStatus.unlock_password_status = 1;
80004278:	48 79       	lddpc	r9,80004294 <read_password+0x38>
8000427a:	72 08       	ld.w	r8,r9[0x0]
8000427c:	30 1a       	mov	r10,1
8000427e:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80004282:	93 08       	st.w	r9[0x0],r8
		}
	}
}
80004284:	e3 cd 80 80 	ldm	sp++,r7,pc
80004288:	80 00       	ld.sh	r0,r0[0x0]
8000428a:	39 7c       	mov	r12,-105
8000428c:	00 00       	add	r0,r0
8000428e:	03 f9       	ld.ub	r9,r1[0x7]
80004290:	80 00       	ld.sh	r0,r0[0x0]
80004292:	42 98       	lddsp	r8,sp[0xa4]
80004294:	00 00       	add	r0,r0
80004296:	0b a4       	ld.ub	r4,r5[0x2]

80004298 <compare_with_saved_password>:

bool compare_with_saved_password(void)
{
80004298:	eb cd 40 80 	pushm	r7,lr
8000429c:	1a 97       	mov	r7,sp
8000429e:	20 ad       	sub	sp,40
	uint8_t i = 0; 
800042a0:	30 08       	mov	r8,0
800042a2:	ef 68 ff fb 	st.b	r7[-5],r8
	uint32_t temp_digest[8], *temp_stored_password;

	if (normal_mode_chosen == DEVICE_ID)
800042a6:	4a 78       	lddpc	r8,80004340 <compare_with_saved_password+0xa8>
800042a8:	11 88       	ld.ub	r8,r8[0x0]
800042aa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800042ae:	30 38       	mov	r8,3
800042b0:	f0 09 18 00 	cp.b	r9,r8
800042b4:	c0 c1       	brne	800042cc <compare_with_saved_password+0x34>
	{
		hash_the_password(temp_password, temp_digest);
800042b6:	ee c8 00 28 	sub	r8,r7,40
800042ba:	10 9b       	mov	r11,r8
800042bc:	4a 2c       	lddpc	r12,80004344 <compare_with_saved_password+0xac>
800042be:	f0 1f 00 23 	mcall	80004348 <compare_with_saved_password+0xb0>
		temp_stored_password = Stored_values_ram.device_id_confirm;
800042c2:	4a 38       	lddpc	r8,8000434c <compare_with_saved_password+0xb4>
800042c4:	2a 08       	sub	r8,-96
800042c6:	ef 48 ff fc 	st.w	r7[-4],r8
800042ca:	c1 28       	rjmp	800042ee <compare_with_saved_password+0x56>
	}
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
800042cc:	49 d8       	lddpc	r8,80004340 <compare_with_saved_password+0xa8>
800042ce:	11 88       	ld.ub	r8,r8[0x0]
800042d0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800042d4:	30 48       	mov	r8,4
800042d6:	f0 09 18 00 	cp.b	r9,r8
800042da:	c0 a1       	brne	800042ee <compare_with_saved_password+0x56>
	{
		encrypt_password(temp_password, temp_digest);
800042dc:	ee c8 00 28 	sub	r8,r7,40
800042e0:	10 9b       	mov	r11,r8
800042e2:	49 9c       	lddpc	r12,80004344 <compare_with_saved_password+0xac>
800042e4:	f0 1f 00 1b 	mcall	80004350 <compare_with_saved_password+0xb8>
		temp_stored_password = (uint32_t *)Stored_values_ram.unlock_password;
800042e8:	49 98       	lddpc	r8,8000434c <compare_with_saved_password+0xb4>
800042ea:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	i = 0;
800042ee:	30 08       	mov	r8,0
800042f0:	ef 68 ff fb 	st.b	r7[-5],r8
	while (i < 8)
800042f4:	c1 98       	rjmp	80004326 <compare_with_saved_password+0x8e>
	{
		if (temp_stored_password[i] != temp_digest[i])
800042f6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800042fa:	a3 68       	lsl	r8,0x2
800042fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004300:	f2 08 00 08 	add	r8,r9,r8
80004304:	70 09       	ld.w	r9,r8[0x0]
80004306:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000430a:	a3 68       	lsl	r8,0x2
8000430c:	ee 08 00 08 	add	r8,r7,r8
80004310:	f0 f8 ff d8 	ld.w	r8,r8[-40]
80004314:	10 39       	cp.w	r9,r8
80004316:	c0 30       	breq	8000431c <compare_with_saved_password+0x84>
		{
			return false;
80004318:	30 08       	mov	r8,0
8000431a:	c0 e8       	rjmp	80004336 <compare_with_saved_password+0x9e>
		}
		i++;
8000431c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004320:	2f f8       	sub	r8,-1
80004322:	ef 68 ff fb 	st.b	r7[-5],r8
	{
		encrypt_password(temp_password, temp_digest);
		temp_stored_password = (uint32_t *)Stored_values_ram.unlock_password;
	}
	i = 0;
	while (i < 8)
80004326:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000432a:	30 78       	mov	r8,7
8000432c:	f0 09 18 00 	cp.b	r9,r8
80004330:	fe 98 ff e3 	brls	800042f6 <compare_with_saved_password+0x5e>
		{
			return false;
		}
		i++;
	}
	return true;
80004334:	30 18       	mov	r8,1
}
80004336:	10 9c       	mov	r12,r8
80004338:	2f 6d       	sub	sp,-40
8000433a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000433e:	00 00       	add	r0,r0
80004340:	00 00       	add	r0,r0
80004342:	03 fb       	ld.ub	r11,r1[0x7]
80004344:	00 00       	add	r0,r0
80004346:	02 48       	or	r8,r1
80004348:	80 00       	ld.sh	r0,r0[0x0]
8000434a:	2f ac       	sub	r12,-6
8000434c:	00 00       	add	r0,r0
8000434e:	0a 3c       	cp.w	r12,r5
80004350:	80 00       	ld.sh	r0,r0[0x0]
80004352:	2d 38       	sub	r8,-45

80004354 <update_leds>:
#define		SD1				0
#define		MODE			1
#define		SD2				2

void update_leds(void)
{
80004354:	eb cd 40 80 	pushm	r7,lr
80004358:	1a 97       	mov	r7,sp
	static uint8_t led_bit_mask = 0;
	static uint8_t current_bit_mask = 3;
	static uint8_t device_id_byte = 0;
	static uint8_t device_id_byte_index = 0;
	
	if (led_on_time && led_off_time)
8000435a:	4d 78       	lddpc	r8,800044b4 <update_leds+0x160>
8000435c:	11 88       	ld.ub	r8,r8[0x0]
8000435e:	58 08       	cp.w	r8,0
80004360:	c1 10       	breq	80004382 <update_leds+0x2e>
80004362:	4d 68       	lddpc	r8,800044b8 <update_leds+0x164>
80004364:	11 88       	ld.ub	r8,r8[0x0]
80004366:	58 08       	cp.w	r8,0
80004368:	c0 d0       	breq	80004382 <update_leds+0x2e>
	{
		LED_On(led_bit_mask);
8000436a:	4d 58       	lddpc	r8,800044bc <update_leds+0x168>
8000436c:	11 88       	ld.ub	r8,r8[0x0]
8000436e:	10 9c       	mov	r12,r8
80004370:	f0 1f 00 54 	mcall	800044c0 <update_leds+0x16c>
		led_on_time--;
80004374:	4d 08       	lddpc	r8,800044b4 <update_leds+0x160>
80004376:	11 88       	ld.ub	r8,r8[0x0]
80004378:	20 18       	sub	r8,1
8000437a:	5c 58       	castu.b	r8
8000437c:	4c e9       	lddpc	r9,800044b4 <update_leds+0x160>
8000437e:	b2 88       	st.b	r9[0x0],r8
	static uint8_t led_bit_mask = 0;
	static uint8_t current_bit_mask = 3;
	static uint8_t device_id_byte = 0;
	static uint8_t device_id_byte_index = 0;
	
	if (led_on_time && led_off_time)
80004380:	c9 88       	rjmp	800044b0 <update_leds+0x15c>
	{
		LED_On(led_bit_mask);
		led_on_time--;
	}
	else if (led_on_time == 0 && led_off_time)
80004382:	4c d8       	lddpc	r8,800044b4 <update_leds+0x160>
80004384:	11 88       	ld.ub	r8,r8[0x0]
80004386:	58 08       	cp.w	r8,0
80004388:	c1 11       	brne	800043aa <update_leds+0x56>
8000438a:	4c c8       	lddpc	r8,800044b8 <update_leds+0x164>
8000438c:	11 88       	ld.ub	r8,r8[0x0]
8000438e:	58 08       	cp.w	r8,0
80004390:	c0 d0       	breq	800043aa <update_leds+0x56>
	{
		LED_Off(led_bit_mask);
80004392:	4c b8       	lddpc	r8,800044bc <update_leds+0x168>
80004394:	11 88       	ld.ub	r8,r8[0x0]
80004396:	10 9c       	mov	r12,r8
80004398:	f0 1f 00 4b 	mcall	800044c4 <update_leds+0x170>
		led_off_time--;
8000439c:	4c 78       	lddpc	r8,800044b8 <update_leds+0x164>
8000439e:	11 88       	ld.ub	r8,r8[0x0]
800043a0:	20 18       	sub	r8,1
800043a2:	5c 58       	castu.b	r8
800043a4:	4c 59       	lddpc	r9,800044b8 <update_leds+0x164>
800043a6:	b2 88       	st.b	r9[0x0],r8
	if (led_on_time && led_off_time)
	{
		LED_On(led_bit_mask);
		led_on_time--;
	}
	else if (led_on_time == 0 && led_off_time)
800043a8:	c8 48       	rjmp	800044b0 <update_leds+0x15c>
		LED_Off(led_bit_mask);
		led_off_time--;
	}
	else
	{
		led_bit_mask = 0;
800043aa:	4c 59       	lddpc	r9,800044bc <update_leds+0x168>
800043ac:	30 08       	mov	r8,0
800043ae:	b2 88       	st.b	r9[0x0],r8
		switch (current_bit_mask)
800043b0:	4c 68       	lddpc	r8,800044c8 <update_leds+0x174>
800043b2:	11 88       	ld.ub	r8,r8[0x0]
800043b4:	58 18       	cp.w	r8,1
800043b6:	c2 10       	breq	800043f8 <update_leds+0xa4>
800043b8:	58 28       	cp.w	r8,2
800043ba:	c4 20       	breq	8000443e <update_leds+0xea>
800043bc:	58 08       	cp.w	r8,0
800043be:	c6 31       	brne	80004484 <update_leds+0x130>
		{
			case SD1:
				if (device_id_byte & 0x03)
800043c0:	4c 38       	lddpc	r8,800044cc <update_leds+0x178>
800043c2:	11 88       	ld.ub	r8,r8[0x0]
800043c4:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800043c8:	c1 10       	breq	800043ea <update_leds+0x96>
				{
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 0);
800043ca:	4c 18       	lddpc	r8,800044cc <update_leds+0x178>
800043cc:	11 88       	ld.ub	r8,r8[0x0]
800043ce:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800043d2:	30 19       	mov	r9,1
800043d4:	f2 08 09 48 	lsl	r8,r9,r8
800043d8:	5c 58       	castu.b	r8
800043da:	4b 99       	lddpc	r9,800044bc <update_leds+0x168>
800043dc:	b2 88       	st.b	r9[0x0],r8
					led_on_time = 50;
800043de:	4b 69       	lddpc	r9,800044b4 <update_leds+0x160>
800043e0:	33 28       	mov	r8,50
800043e2:	b2 88       	st.b	r9[0x0],r8
					led_off_time = 10;		
800043e4:	4b 59       	lddpc	r9,800044b8 <update_leds+0x164>
800043e6:	30 a8       	mov	r8,10
800043e8:	b2 88       	st.b	r9[0x0],r8
				}
				current_bit_mask++;			
800043ea:	4b 88       	lddpc	r8,800044c8 <update_leds+0x174>
800043ec:	11 88       	ld.ub	r8,r8[0x0]
800043ee:	2f f8       	sub	r8,-1
800043f0:	5c 58       	castu.b	r8
800043f2:	4b 69       	lddpc	r9,800044c8 <update_leds+0x174>
800043f4:	b2 88       	st.b	r9[0x0],r8
				break;
800043f6:	c5 d8       	rjmp	800044b0 <update_leds+0x15c>
			case MODE:
				device_id_byte >>= 2;
800043f8:	4b 58       	lddpc	r8,800044cc <update_leds+0x178>
800043fa:	11 88       	ld.ub	r8,r8[0x0]
800043fc:	a3 88       	lsr	r8,0x2
800043fe:	5c 58       	castu.b	r8
80004400:	4b 39       	lddpc	r9,800044cc <update_leds+0x178>
80004402:	b2 88       	st.b	r9[0x0],r8
				if (device_id_byte & 0x03)
80004404:	4b 28       	lddpc	r8,800044cc <update_leds+0x178>
80004406:	11 88       	ld.ub	r8,r8[0x0]
80004408:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000440c:	c4 f0       	breq	800044aa <update_leds+0x156>
				{
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 3);
8000440e:	4b 08       	lddpc	r8,800044cc <update_leds+0x178>
80004410:	11 88       	ld.ub	r8,r8[0x0]
80004412:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004416:	2f d8       	sub	r8,-3
80004418:	30 19       	mov	r9,1
8000441a:	f2 08 09 48 	lsl	r8,r9,r8
8000441e:	5c 58       	castu.b	r8
80004420:	4a 79       	lddpc	r9,800044bc <update_leds+0x168>
80004422:	b2 88       	st.b	r9[0x0],r8
					led_on_time = 50;
80004424:	4a 49       	lddpc	r9,800044b4 <update_leds+0x160>
80004426:	33 28       	mov	r8,50
80004428:	b2 88       	st.b	r9[0x0],r8
					led_off_time = 10;
8000442a:	4a 49       	lddpc	r9,800044b8 <update_leds+0x164>
8000442c:	30 a8       	mov	r8,10
8000442e:	b2 88       	st.b	r9[0x0],r8
					current_bit_mask++;
80004430:	4a 68       	lddpc	r8,800044c8 <update_leds+0x174>
80004432:	11 88       	ld.ub	r8,r8[0x0]
80004434:	2f f8       	sub	r8,-1
80004436:	5c 58       	castu.b	r8
80004438:	4a 49       	lddpc	r9,800044c8 <update_leds+0x174>
8000443a:	b2 88       	st.b	r9[0x0],r8
				}				
				break;
8000443c:	c3 a8       	rjmp	800044b0 <update_leds+0x15c>
			case SD2:
				device_id_byte >>= 4;
8000443e:	4a 48       	lddpc	r8,800044cc <update_leds+0x178>
80004440:	11 88       	ld.ub	r8,r8[0x0]
80004442:	a5 88       	lsr	r8,0x4
80004444:	5c 58       	castu.b	r8
80004446:	4a 29       	lddpc	r9,800044cc <update_leds+0x178>
80004448:	b2 88       	st.b	r9[0x0],r8
				if (device_id_byte & 0x03)
8000444a:	4a 18       	lddpc	r8,800044cc <update_leds+0x178>
8000444c:	11 88       	ld.ub	r8,r8[0x0]
8000444e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004452:	c2 e0       	breq	800044ae <update_leds+0x15a>
				{
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 6);
80004454:	49 e8       	lddpc	r8,800044cc <update_leds+0x178>
80004456:	11 88       	ld.ub	r8,r8[0x0]
80004458:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000445c:	2f a8       	sub	r8,-6
8000445e:	30 19       	mov	r9,1
80004460:	f2 08 09 48 	lsl	r8,r9,r8
80004464:	5c 58       	castu.b	r8
80004466:	49 69       	lddpc	r9,800044bc <update_leds+0x168>
80004468:	b2 88       	st.b	r9[0x0],r8
					led_on_time = 50;
8000446a:	49 39       	lddpc	r9,800044b4 <update_leds+0x160>
8000446c:	33 28       	mov	r8,50
8000446e:	b2 88       	st.b	r9[0x0],r8
					led_off_time = 10;					
80004470:	49 29       	lddpc	r9,800044b8 <update_leds+0x164>
80004472:	30 a8       	mov	r8,10
80004474:	b2 88       	st.b	r9[0x0],r8
					current_bit_mask++;
80004476:	49 58       	lddpc	r8,800044c8 <update_leds+0x174>
80004478:	11 88       	ld.ub	r8,r8[0x0]
8000447a:	2f f8       	sub	r8,-1
8000447c:	5c 58       	castu.b	r8
8000447e:	49 39       	lddpc	r9,800044c8 <update_leds+0x174>
80004480:	b2 88       	st.b	r9[0x0],r8
				}
				break;
80004482:	c1 78       	rjmp	800044b0 <update_leds+0x15c>
			default:
			{
				device_id_byte = Stored_values_ram.device_id_sequence[device_id_byte_index++];
80004484:	49 38       	lddpc	r8,800044d0 <update_leds+0x17c>
80004486:	11 88       	ld.ub	r8,r8[0x0]
80004488:	10 99       	mov	r9,r8
8000448a:	49 3a       	lddpc	r10,800044d4 <update_leds+0x180>
8000448c:	f4 09 00 09 	add	r9,r10,r9
80004490:	f3 39 00 80 	ld.ub	r9,r9[128]
80004494:	5c 59       	castu.b	r9
80004496:	48 ea       	lddpc	r10,800044cc <update_leds+0x178>
80004498:	b4 89       	st.b	r10[0x0],r9
8000449a:	2f f8       	sub	r8,-1
8000449c:	5c 58       	castu.b	r8
8000449e:	48 d9       	lddpc	r9,800044d0 <update_leds+0x17c>
800044a0:	b2 88       	st.b	r9[0x0],r8
				current_bit_mask = SD1;
800044a2:	48 a9       	lddpc	r9,800044c8 <update_leds+0x174>
800044a4:	30 08       	mov	r8,0
800044a6:	b2 88       	st.b	r9[0x0],r8
800044a8:	c0 48       	rjmp	800044b0 <update_leds+0x15c>
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 3);
					led_on_time = 50;
					led_off_time = 10;
					current_bit_mask++;
				}				
				break;
800044aa:	d7 03       	nop
800044ac:	c0 28       	rjmp	800044b0 <update_leds+0x15c>
					led_bit_mask = 1 << ((device_id_byte & 0x03) + 6);
					led_on_time = 50;
					led_off_time = 10;					
					current_bit_mask++;
				}
				break;
800044ae:	d7 03       	nop
				device_id_byte = Stored_values_ram.device_id_sequence[device_id_byte_index++];
				current_bit_mask = SD1;
			}
		}
	}
}
800044b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800044b4:	00 00       	add	r0,r0
800044b6:	04 25       	rsub	r5,r2
800044b8:	00 00       	add	r0,r0
800044ba:	04 26       	rsub	r6,r2
800044bc:	00 00       	add	r0,r0
800044be:	04 27       	rsub	r7,r2
800044c0:	80 00       	ld.sh	r0,r0[0x0]
800044c2:	49 d0       	lddpc	r0,80004534 <tc_init+0x5c>
800044c4:	80 00       	ld.sh	r0,r0[0x0]
800044c6:	49 18       	lddpc	r8,80004508 <tc_init+0x30>
800044c8:	00 00       	add	r0,r0
800044ca:	01 2f       	ld.uh	pc,r0++
800044cc:	00 00       	add	r0,r0
800044ce:	04 28       	rsub	r8,r2
800044d0:	00 00       	add	r0,r0
800044d2:	04 29       	rsub	r9,r2
800044d4:	00 00       	add	r0,r0
800044d6:	0a 3c       	cp.w	r12,r5

800044d8 <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
static void tc_init(volatile avr32_tc_t *tc)
{
800044d8:	eb cd 40 80 	pushm	r7,lr
800044dc:	1a 97       	mov	r7,sp
800044de:	20 2d       	sub	sp,8
800044e0:	ef 4c ff f8 	st.w	r7[-8],r12
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
800044e4:	49 0b       	lddpc	r11,80004524 <tc_init+0x4c>
800044e6:	ee fc ff f8 	ld.w	r12,r7[-8]
800044ea:	f0 1f 00 10 	mcall	80004528 <tc_init+0x50>
	 * Set the compare triggers.
	 * We configure it to count every 10 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 10 ms, hence RC = (fPBA / 8) / 100
	 * to get an interrupt every 10 ms.
	 */
	temp_value = tc_write_rc(tc, EXAMPLE_TC_CHANNEL, 20625 /*(sysclk_get_pba_hz() / 8 / 100)*/);
800044ee:	e0 6a 50 91 	mov	r10,20625
800044f2:	30 0b       	mov	r11,0
800044f4:	ee fc ff f8 	ld.w	r12,r7[-8]
800044f8:	f0 1f 00 0d 	mcall	8000452c <tc_init+0x54>
800044fc:	18 98       	mov	r8,r12
800044fe:	5c 88       	casts.h	r8
80004500:	5c 78       	castu.h	r8
80004502:	ef 48 ff fc 	st.w	r7[-4],r8
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80004506:	48 ba       	lddpc	r10,80004530 <tc_init+0x58>
80004508:	30 0b       	mov	r11,0
8000450a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000450e:	f0 1f 00 0a 	mcall	80004534 <tc_init+0x5c>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80004512:	30 0b       	mov	r11,0
80004514:	ee fc ff f8 	ld.w	r12,r7[-8]
80004518:	f0 1f 00 08 	mcall	80004538 <tc_init+0x60>
}
8000451c:	2f ed       	sub	sp,-8
8000451e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004522:	00 00       	add	r0,r0
80004524:	80 00       	ld.sh	r0,r0[0x0]
80004526:	eb 40 80 00 	st.w	r5[-32768],r0
8000452a:	95 d0       	st.w	r10[0x34],r0
8000452c:	80 00       	ld.sh	r0,r0[0x0]
8000452e:	97 98       	st.w	r11[0x24],r8
80004530:	80 00       	ld.sh	r0,r0[0x0]
80004532:	eb 48 80 00 	st.w	r5[-32768],r8
80004536:	93 e8       	st.w	r9[0x38],r8
80004538:	80 00       	ld.sh	r0,r0[0x0]
8000453a:	97 24       	st.w	r11[0x8],r4

8000453c <tc_task>:
 * - Register the TC interrupt
 * - Configure, enable the CPCS (RC compare match) interrupt,
 * - and start a TC channel in waveform mode
 */
void tc_task (void)
{
8000453c:	eb cd 40 80 	pushm	r7,lr
80004540:	1a 97       	mov	r7,sp
80004542:	20 1d       	sub	sp,4
	volatile avr32_tc_t *tc = EXAMPLE_TC;
80004544:	fe 78 38 00 	mov	r8,-51200
80004548:	ef 48 ff fc 	st.w	r7[-4],r8
	 * peripheral clocks, except for the peripheral clocks explicitly
	 * enabled in conf_clock.h.
	 */
	//sysclk_init();
	// Enable the clock to the selected example Timer/counter peripheral module.
	sysclk_enable_peripheral_clock(EXAMPLE_TC);
8000454c:	fe 7c 38 00 	mov	r12,-51200
80004550:	f0 1f 00 0c 	mcall	80004580 <tc_task+0x44>
	// Disable the interrupts
	cpu_irq_disable();
80004554:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	//INTC_init_interrupts();
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80004556:	30 0a       	mov	r10,0
80004558:	e0 6b 01 c0 	mov	r11,448
8000455c:	48 ac       	lddpc	r12,80004584 <tc_task+0x48>
8000455e:	f0 1f 00 0b 	mcall	80004588 <tc_task+0x4c>
	// Enable the interrupts
	cpu_irq_enable();
80004562:	d5 03       	csrf	0x10
	// Initialize the timer module
	tc_init(tc);
80004564:	ee fc ff fc 	ld.w	r12,r7[-4]
80004568:	f0 1f 00 09 	mcall	8000458c <tc_task+0x50>
	// Initialize push buttons
	push_buttons_init();
8000456c:	f0 1f 00 09 	mcall	80004590 <tc_task+0x54>

    calculate_hash((uint32_t *)CipherKey256, 8, CipherKey256_hash);
80004570:	48 9a       	lddpc	r10,80004594 <tc_task+0x58>
80004572:	30 8b       	mov	r11,8
80004574:	48 9c       	lddpc	r12,80004598 <tc_task+0x5c>
80004576:	f0 1f 00 0a 	mcall	8000459c <tc_task+0x60>
			 //*/
			 //// Reset the timer update flag to wait till next timer interrupt
			//update_timer = false;
		//}
	//}
}
8000457a:	2f fd       	sub	sp,-4
8000457c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004580:	80 00       	ld.sh	r0,r0[0x0]
80004582:	35 ac       	mov	r12,90
80004584:	80 00       	ld.sh	r0,r0[0x0]
80004586:	37 c0       	mov	r0,124
80004588:	80 00       	ld.sh	r0,r0[0x0]
8000458a:	8e a8       	ld.uh	r8,r7[0x4]
8000458c:	80 00       	ld.sh	r0,r0[0x0]
8000458e:	44 d8       	lddsp	r8,sp[0x134]
80004590:	80 00       	ld.sh	r0,r0[0x0]
80004592:	3c c8       	mov	r8,-52
80004594:	00 00       	add	r0,r0
80004596:	04 00       	add	r0,r2
80004598:	80 00       	ld.sh	r0,r0[0x0]
8000459a:	ea 00       	*unknown*
8000459c:	80 00       	ld.sh	r0,r0[0x0]
8000459e:	30 a8       	mov	r8,10

800045a0 <init_hmatrix>:


/*! \brief Initializes the HSB bus matrix.
 */
static void init_hmatrix(void)
{
800045a0:	eb cd 40 80 	pushm	r7,lr
800045a4:	1a 97       	mov	r7,sp
800045a6:	20 1d       	sub	sp,4
  // Set flashc master type to last default to save one cycle for
  // each branch.
  avr32_hmatrix_scfg_t scfg;

  scfg = AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH];
800045a8:	fe 68 10 00 	mov	r8,-126976
800045ac:	71 08       	ld.w	r8,r8[0x40]
800045ae:	ef 48 ff fc 	st.w	r7[-4],r8
  scfg.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
800045b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045b6:	30 19       	mov	r9,1
800045b8:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
800045bc:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH] = scfg;
800045c0:	fe 68 10 00 	mov	r8,-126976
800045c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800045c8:	f1 49 00 40 	st.w	r8[64],r9
}
800045cc:	2f fd       	sub	sp,-4
800045ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800045d2:	d7 03       	nop

800045d4 <aes_task>:
 * 8N1.
 * Then it sets up the interrupt handler and waits for a USART interrupt to
 * trigger.
 */
void aes_task (void)
{
800045d4:	eb cd 40 80 	pushm	r7,lr
800045d8:	1a 97       	mov	r7,sp
  init_hmatrix();
800045da:	f0 1f 00 03 	mcall	800045e4 <aes_task+0x10>
}
800045de:	e3 cd 80 80 	ldm	sp++,r7,pc
800045e2:	00 00       	add	r0,r0
800045e4:	80 00       	ld.sh	r0,r0[0x0]
800045e6:	45 a0       	lddsp	r0,sp[0x168]

800045e8 <aes_init>:
	0x5A43D875,	// AES-CTR IV (BYTE2)
	0x00000001	// COUNTER
};

void aes_init (unsigned char Processing_Mode)
{
800045e8:	eb cd 40 80 	pushm	r7,lr
800045ec:	1a 97       	mov	r7,sp
800045ee:	20 3d       	sub	sp,12
800045f0:	18 98       	mov	r8,r12
800045f2:	ef 68 ff f4 	st.b	r7[-12],r8
	  aes_config_t    AesConf;        // AES config structure
	  // Configure the AES.
	  AesConf.ProcessingMode = Processing_Mode;   // Cipher
800045f6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800045fa:	ef 68 ff f8 	st.b	r7[-8],r8
	  AesConf.ProcessingDelay = 0;                // No delay: best performance
800045fe:	30 08       	mov	r8,0
80004600:	ef 68 ff f9 	st.b	r7[-7],r8
	  AesConf.StartMode = AES_START_MODE_AUTO;    // Manual mode
80004604:	30 18       	mov	r8,1
80004606:	ef 68 ff fa 	st.b	r7[-6],r8
	  AesConf.KeySize = AES_KEY_SIZE_256;         // 256bit cryptographic key
8000460a:	30 28       	mov	r8,2
8000460c:	ef 68 ff fb 	st.b	r7[-5],r8
	  AesConf.OpMode = AES_CBC_MODE;              // CTR cipher mode
80004610:	30 18       	mov	r8,1
80004612:	ef 68 ff fc 	st.b	r7[-4],r8
	  AesConf.LodMode = 0;                        // LODMODE == 0 : the DATRDY flag
80004616:	30 08       	mov	r8,0
80004618:	ef 68 ff fd 	st.b	r7[-3],r8
	  // is cleared when one of the output data registers is read (because we're in
	  // manual mode).
	  AesConf.CFBSize = 0;                        // Don't-care because we're using the CTR mode.
8000461c:	30 08       	mov	r8,0
8000461e:	ef 68 ff fe 	st.b	r7[-2],r8
	  AesConf.CounterMeasureMask = 0;             // Disable all counter measures.
80004622:	30 08       	mov	r8,0
80004624:	ef 68 ff ff 	st.b	r7[-1],r8
	  aes_configure(&AVR32_AES, &AesConf);
80004628:	ee c8 00 08 	sub	r8,r7,8
8000462c:	10 9b       	mov	r11,r8
8000462e:	fc 7c 00 00 	mov	r12,-196608
80004632:	f0 1f 00 06 	mcall	80004648 <aes_init+0x60>
	  aes_set_key(&AVR32_AES, CipherKey256);
80004636:	48 6b       	lddpc	r11,8000464c <aes_init+0x64>
80004638:	fc 7c 00 00 	mov	r12,-196608
8000463c:	f0 1f 00 05 	mcall	80004650 <aes_init+0x68>

	  //ccountt0 = Get_system_register(AVR32_COUNT);
	  // Start encryption.
	  //aes_start(&AVR32_AES);

}
80004640:	2f dd       	sub	sp,-12
80004642:	e3 cd 80 80 	ldm	sp++,r7,pc
80004646:	00 00       	add	r0,r0
80004648:	80 00       	ld.sh	r0,r0[0x0]
8000464a:	7e 64       	ld.w	r4,pc[0x18]
8000464c:	80 00       	ld.sh	r0,r0[0x0]
8000464e:	ea 00       	*unknown*
80004650:	80 00       	ld.sh	r0,r0[0x0]
80004652:	7e f4       	ld.w	r4,pc[0x3c]

80004654 <apply_aes_encryption>:
uint32_t aes_out_data[128] = {0};

void apply_aes_encryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint32_t *aes_key, uint16_t len, uint32_t sector_id)
{
80004654:	eb cd 40 80 	pushm	r7,lr
80004658:	1a 97       	mov	r7,sp
8000465a:	20 7d       	sub	sp,28
8000465c:	ef 4c ff f4 	st.w	r7[-12],r12
80004660:	ef 4b ff f0 	st.w	r7[-16],r11
80004664:	ef 4a ff ec 	st.w	r7[-20],r10
80004668:	ef 48 ff e4 	st.w	r7[-28],r8
8000466c:	12 98       	mov	r8,r9
8000466e:	ef 58 ff e8 	st.h	r7[-24],r8
	uint8_t i, loop_counter;
	uint32_t temp;
	
	if (aes_key == 0)
80004672:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004676:	58 08       	cp.w	r8,0
80004678:	c0 41       	brne	80004680 <apply_aes_encryption+0x2c>
	{
		aes_key = (uint32_t *)DK_aes_key;
8000467a:	4b a8       	lddpc	r8,80004760 <apply_aes_encryption+0x10c>
8000467c:	ef 48 ff ec 	st.w	r7[-20],r8
	}
	temp = aes_key[0];
80004680:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004684:	70 08       	ld.w	r8,r8[0x0]
80004686:	ef 48 ff fc 	st.w	r7[-4],r8

	aes_key[0] = aes_key[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
8000468a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000468e:	70 09       	ld.w	r9,r8[0x0]
80004690:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004694:	10 59       	eor	r9,r8
80004696:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000469a:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
							 
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);	
	aes_set_initvector(&AVR32_AES, (unsigned long int *)aes_key);	
8000469c:	ee fb ff ec 	ld.w	r11,r7[-20]
800046a0:	fc 7c 00 00 	mov	r12,-196608
800046a4:	f0 1f 00 30 	mcall	80004764 <apply_aes_encryption+0x110>
	
	aes_key[0] = temp;
800046a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800046ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800046b0:	91 09       	st.w	r8[0x0],r9
	
	loop_counter = len >> 2;
800046b2:	ef 18 ff e8 	ld.uh	r8,r7[-24]
800046b6:	a3 88       	lsr	r8,0x2
800046b8:	5c 88       	casts.h	r8
800046ba:	ef 68 ff fb 	st.b	r7[-5],r8
		
	for (i = 0; i < loop_counter; i+=4)
800046be:	30 08       	mov	r8,0
800046c0:	ef 68 ff fa 	st.b	r7[-6],r8
800046c4:	c2 78       	rjmp	80004712 <apply_aes_encryption+0xbe>
	{
		aes_init(AES_PMODE_CIPHER);
800046c6:	30 1c       	mov	r12,1
800046c8:	f0 1f 00 28 	mcall	80004768 <apply_aes_encryption+0x114>
			
		aes_write_inputdata(aes, &aes_in_data_t[i]);
800046cc:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800046d0:	a3 68       	lsl	r8,0x2
800046d2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800046d6:	f2 08 00 08 	add	r8,r9,r8
800046da:	10 9b       	mov	r11,r8
800046dc:	ee fc ff f4 	ld.w	r12,r7[-12]
800046e0:	f0 1f 00 23 	mcall	8000476c <apply_aes_encryption+0x118>

		while (!(aes->isr & 0x00000001));
800046e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046e8:	70 78       	ld.w	r8,r8[0x1c]
800046ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800046ee:	cf b0       	breq	800046e4 <apply_aes_encryption+0x90>

		aes_read_outputdata(aes, &aes_out_data[i]);
800046f0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800046f4:	f0 09 15 02 	lsl	r9,r8,0x2
800046f8:	49 e8       	lddpc	r8,80004770 <apply_aes_encryption+0x11c>
800046fa:	f2 08 00 08 	add	r8,r9,r8
800046fe:	10 9b       	mov	r11,r8
80004700:	ee fc ff f4 	ld.w	r12,r7[-12]
80004704:	f0 1f 00 1c 	mcall	80004774 <apply_aes_encryption+0x120>
	
	aes_key[0] = temp;
	
	loop_counter = len >> 2;
		
	for (i = 0; i < loop_counter; i+=4)
80004708:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000470c:	2f c8       	sub	r8,-4
8000470e:	ef 68 ff fa 	st.b	r7[-6],r8
80004712:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80004716:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000471a:	f0 09 18 00 	cp.b	r9,r8
8000471e:	cd 43       	brcs	800046c6 <apply_aes_encryption+0x72>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
80004720:	30 08       	mov	r8,0
80004722:	ef 68 ff fa 	st.b	r7[-6],r8
80004726:	c1 38       	rjmp	8000474c <apply_aes_encryption+0xf8>
	{
		aes_in_data_t[i] = aes_out_data[i];
80004728:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000472c:	a3 68       	lsl	r8,0x2
8000472e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004732:	f2 08 00 08 	add	r8,r9,r8
80004736:	ef 3a ff fa 	ld.ub	r10,r7[-6]
8000473a:	48 e9       	lddpc	r9,80004770 <apply_aes_encryption+0x11c>
8000473c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80004740:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
80004742:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004746:	2f f8       	sub	r8,-1
80004748:	ef 68 ff fa 	st.b	r7[-6],r8
8000474c:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80004750:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004754:	f0 09 18 00 	cp.b	r9,r8
80004758:	ce 83       	brcs	80004728 <apply_aes_encryption+0xd4>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
8000475a:	2f 9d       	sub	sp,-28
8000475c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004760:	00 00       	add	r0,r0
80004762:	02 94       	mov	r4,r1
80004764:	80 00       	ld.sh	r0,r0[0x0]
80004766:	7f 82       	ld.w	r2,pc[0x60]
80004768:	80 00       	ld.sh	r0,r0[0x0]
8000476a:	45 e8       	lddsp	r8,sp[0x178]
8000476c:	80 00       	ld.sh	r0,r0[0x0]
8000476e:	7f de       	ld.w	lr,pc[0x74]
80004770:	00 00       	add	r0,r0
80004772:	04 30       	cp.w	r0,r2
80004774:	80 00       	ld.sh	r0,r0[0x0]
80004776:	80 76       	ld.sh	r6,r0[0xe]

80004778 <apply_aes_decryption>:


void apply_aes_decryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint32_t *aes_key, uint16_t len, uint32_t sector_id)
{
80004778:	eb cd 40 80 	pushm	r7,lr
8000477c:	1a 97       	mov	r7,sp
8000477e:	20 7d       	sub	sp,28
80004780:	ef 4c ff f4 	st.w	r7[-12],r12
80004784:	ef 4b ff f0 	st.w	r7[-16],r11
80004788:	ef 4a ff ec 	st.w	r7[-20],r10
8000478c:	ef 48 ff e4 	st.w	r7[-28],r8
80004790:	12 98       	mov	r8,r9
80004792:	ef 58 ff e8 	st.h	r7[-24],r8
	
	uint8_t i, loop_counter;
	uint32_t temp;

	if (aes_key == 0)
80004796:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000479a:	58 08       	cp.w	r8,0
8000479c:	c0 41       	brne	800047a4 <apply_aes_decryption+0x2c>
	{
		aes_key = (uint32_t *)DK_aes_key;
8000479e:	4b a8       	lddpc	r8,80004884 <apply_aes_decryption+0x10c>
800047a0:	ef 48 ff ec 	st.w	r7[-20],r8
	}
	
	temp = aes_key[0];
800047a4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047a8:	70 08       	ld.w	r8,r8[0x0]
800047aa:	ef 48 ff fc 	st.w	r7[-4],r8

	aes_key[0] = aes_key[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
800047ae:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047b2:	70 09       	ld.w	r9,r8[0x0]
800047b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800047b8:	10 59       	eor	r9,r8
800047ba:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047be:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
	
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);
	aes_set_initvector(&AVR32_AES, (unsigned long int *)aes_key);
800047c0:	ee fb ff ec 	ld.w	r11,r7[-20]
800047c4:	fc 7c 00 00 	mov	r12,-196608
800047c8:	f0 1f 00 30 	mcall	80004888 <apply_aes_decryption+0x110>
	
	aes_key[0] = temp;
800047cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800047d4:	91 09       	st.w	r8[0x0],r9

	loop_counter = len >> 2;
800047d6:	ef 18 ff e8 	ld.uh	r8,r7[-24]
800047da:	a3 88       	lsr	r8,0x2
800047dc:	5c 88       	casts.h	r8
800047de:	ef 68 ff fb 	st.b	r7[-5],r8

	for (i = 0; i < loop_counter; i+=4)
800047e2:	30 08       	mov	r8,0
800047e4:	ef 68 ff fa 	st.b	r7[-6],r8
800047e8:	c2 78       	rjmp	80004836 <apply_aes_decryption+0xbe>
	{
		aes_init(AES_PMODE_DECIPHER);
800047ea:	30 0c       	mov	r12,0
800047ec:	f0 1f 00 28 	mcall	8000488c <apply_aes_decryption+0x114>

		aes_write_inputdata(aes, &aes_in_data_t[i]);
800047f0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800047f4:	a3 68       	lsl	r8,0x2
800047f6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800047fa:	f2 08 00 08 	add	r8,r9,r8
800047fe:	10 9b       	mov	r11,r8
80004800:	ee fc ff f4 	ld.w	r12,r7[-12]
80004804:	f0 1f 00 23 	mcall	80004890 <apply_aes_decryption+0x118>

		while (!(aes->isr & 0x00000001));
80004808:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000480c:	70 78       	ld.w	r8,r8[0x1c]
8000480e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004812:	cf b0       	breq	80004808 <apply_aes_decryption+0x90>

		aes_read_outputdata(aes, &aes_out_data[i]);
80004814:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004818:	f0 09 15 02 	lsl	r9,r8,0x2
8000481c:	49 e8       	lddpc	r8,80004894 <apply_aes_decryption+0x11c>
8000481e:	f2 08 00 08 	add	r8,r9,r8
80004822:	10 9b       	mov	r11,r8
80004824:	ee fc ff f4 	ld.w	r12,r7[-12]
80004828:	f0 1f 00 1c 	mcall	80004898 <apply_aes_decryption+0x120>
	
	aes_key[0] = temp;

	loop_counter = len >> 2;

	for (i = 0; i < loop_counter; i+=4)
8000482c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004830:	2f c8       	sub	r8,-4
80004832:	ef 68 ff fa 	st.b	r7[-6],r8
80004836:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000483a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000483e:	f0 09 18 00 	cp.b	r9,r8
80004842:	cd 43       	brcs	800047ea <apply_aes_decryption+0x72>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < loop_counter; i++)
80004844:	30 08       	mov	r8,0
80004846:	ef 68 ff fa 	st.b	r7[-6],r8
8000484a:	c1 38       	rjmp	80004870 <apply_aes_decryption+0xf8>
	{
		aes_in_data_t[i] = aes_out_data[i];
8000484c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004850:	a3 68       	lsl	r8,0x2
80004852:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004856:	f2 08 00 08 	add	r8,r9,r8
8000485a:	ef 3a ff fa 	ld.ub	r10,r7[-6]
8000485e:	48 e9       	lddpc	r9,80004894 <apply_aes_decryption+0x11c>
80004860:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80004864:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < loop_counter; i++)
80004866:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000486a:	2f f8       	sub	r8,-1
8000486c:	ef 68 ff fa 	st.b	r7[-6],r8
80004870:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80004874:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004878:	f0 09 18 00 	cp.b	r9,r8
8000487c:	ce 83       	brcs	8000484c <apply_aes_decryption+0xd4>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
8000487e:	2f 9d       	sub	sp,-28
80004880:	e3 cd 80 80 	ldm	sp++,r7,pc
80004884:	00 00       	add	r0,r0
80004886:	02 94       	mov	r4,r1
80004888:	80 00       	ld.sh	r0,r0[0x0]
8000488a:	7f 82       	ld.w	r2,pc[0x60]
8000488c:	80 00       	ld.sh	r0,r0[0x0]
8000488e:	45 e8       	lddsp	r8,sp[0x178]
80004890:	80 00       	ld.sh	r0,r0[0x0]
80004892:	7f de       	ld.w	lr,pc[0x74]
80004894:	00 00       	add	r0,r0
80004896:	04 30       	cp.w	r0,r2
80004898:	80 00       	ld.sh	r0,r0[0x0]
8000489a:	80 76       	ld.sh	r6,r0[0xe]

8000489c <board_init>:
#if defined (CONF_BOARD_AT45DBX)
# define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
8000489c:	eb cd 40 80 	pushm	r7,lr
800048a0:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800048a2:	30 3b       	mov	r11,3
800048a4:	34 3c       	mov	r12,67
800048a6:	f0 1f 00 17 	mcall	80004900 <board_init+0x64>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800048aa:	30 3b       	mov	r11,3
800048ac:	36 5c       	mov	r12,101
800048ae:	f0 1f 00 15 	mcall	80004900 <board_init+0x64>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800048b2:	30 3b       	mov	r11,3
800048b4:	36 9c       	mov	r12,105
800048b6:	f0 1f 00 13 	mcall	80004900 <board_init+0x64>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800048ba:	30 3b       	mov	r11,3
800048bc:	36 6c       	mov	r12,102
800048be:	f0 1f 00 11 	mcall	80004900 <board_init+0x64>

	gpio_configure_pin(GPIO_PUSH_BUTTON_SW2,GPIO_DIR_INPUT);
800048c2:	30 0b       	mov	r11,0
800048c4:	32 ac       	mov	r12,42
800048c6:	f0 1f 00 0f 	mcall	80004900 <board_init+0x64>
# define AT45DBX_ENABLE_NPCS_PIN(NPCS, unused) \
	{AT45DBX_SPI_NPCS##NPCS##_PIN, AT45DBX_SPI_NPCS##NPCS##_FUNCTION},
	MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
# undef AT45DBX_ENABLE_NPCS_PIN
	};
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
800048ca:	30 4b       	mov	r11,4
800048cc:	48 ec       	lddpc	r12,80004904 <board_init+0x68>
800048ce:	f0 1f 00 0f 	mcall	80004908 <board_init+0x6c>
		{SD_SLOT_4BITS_DATA1_PIN, SD_SLOT_4BITS_DATA1_FUNCTION},
		{SD_SLOT_4BITS_DATA2_PIN, SD_SLOT_4BITS_DATA2_FUNCTION},
		{SD_SLOT_4BITS_DATA3_PIN, SD_SLOT_4BITS_DATA3_FUNCTION}
	};
	// Configure Slot 0 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP,
800048d2:	30 ab       	mov	r11,10
800048d4:	48 ec       	lddpc	r12,8000490c <board_init+0x70>
800048d6:	f0 1f 00 0d 	mcall	80004908 <board_init+0x6c>
			sizeof(SD_MMC_MCI_GPIO_MAP) / sizeof(SD_MMC_MCI_GPIO_MAP[0]));
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_CARD_DETECT);
800048da:	32 bc       	mov	r12,43
800048dc:	f0 1f 00 0d 	mcall	80004910 <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_WRITE_PROTECT);
800048e0:	36 cc       	mov	r12,108
800048e2:	f0 1f 00 0c 	mcall	80004910 <board_init+0x74>

	// Configure Slot 1 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP_1,
800048e6:	30 6b       	mov	r11,6
800048e8:	48 bc       	lddpc	r12,80004914 <board_init+0x78>
800048ea:	f0 1f 00 08 	mcall	80004908 <board_init+0x6c>
	sizeof(SD_MMC_MCI_GPIO_MAP_1) / sizeof(SD_MMC_MCI_GPIO_MAP_1[0]));
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_CARD_DETECT);
800048ee:	32 8c       	mov	r12,40
800048f0:	f0 1f 00 08 	mcall	80004910 <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_WRITE_PROTECT);
800048f4:	32 6c       	mov	r12,38
800048f6:	f0 1f 00 07 	mcall	80004910 <board_init+0x74>
		{AVR32_USART3_TXD_0_3_PIN, AVR32_USART3_TXD_0_3_FUNCTION },
	};
	gpio_enable_module(COMPORT3_GPIO_MAP,
			sizeof(COMPORT3_GPIO_MAP) / sizeof(COMPORT3_GPIO_MAP[0]));
#endif
}
800048fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800048fe:	00 00       	add	r0,r0
80004900:	80 00       	ld.sh	r0,r0[0x0]
80004902:	8a 62       	ld.sh	r2,r5[0xc]
80004904:	80 00       	ld.sh	r0,r0[0x0]
80004906:	eb 4c 80 00 	st.w	r5[-32768],r12
8000490a:	88 54       	ld.sh	r4,r4[0xa]
8000490c:	80 00       	ld.sh	r0,r0[0x0]
8000490e:	eb 54 80 00 	st.h	r5[-32768],r4
80004912:	8a 28       	ld.sh	r8,r5[0x4]
80004914:	80 00       	ld.sh	r0,r0[0x0]
80004916:	eb 68 eb cd 	st.b	r5[-5171],r8

80004918 <LED_Off>:
  return Tst_bits(LED_State, leds);
}


void LED_Off(U32 leds)
{
80004918:	eb cd 40 80 	pushm	r7,lr
8000491c:	1a 97       	mov	r7,sp
8000491e:	20 4d       	sub	sp,16
80004920:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80004924:	4a 98       	lddpc	r8,800049c8 <LED_Off+0xb0>
80004926:	21 08       	sub	r8,16
80004928:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000492c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004930:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004934:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80004938:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000493c:	f0 09 11 ff 	rsub	r9,r8,-1
80004940:	4a 38       	lddpc	r8,800049cc <LED_Off+0xb4>
80004942:	70 08       	ld.w	r8,r8[0x0]
80004944:	10 69       	and	r9,r8
80004946:	4a 28       	lddpc	r8,800049cc <LED_Off+0xb4>
80004948:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000494a:	c3 78       	rjmp	800049b8 <LED_Off+0xa0>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
8000494c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004950:	5c 98       	brev	r8
80004952:	f0 08 12 00 	clz	r8,r8
80004956:	5c 58       	castu.b	r8
80004958:	2f f8       	sub	r8,-1
8000495a:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8000495e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004962:	a5 68       	lsl	r8,0x4
80004964:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004968:	f2 08 00 08 	add	r8,r9,r8
8000496c:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80004970:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004974:	70 08       	ld.w	r8,r8[0x0]
80004976:	a9 68       	lsl	r8,0x8
80004978:	e0 28 f0 00 	sub	r8,61440
8000497c:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80004980:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004984:	70 19       	ld.w	r9,r8[0x4]
80004986:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000498a:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000498e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004992:	70 19       	ld.w	r9,r8[0x4]
80004994:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004998:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000499c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049a0:	70 19       	ld.w	r9,r8[0x4]
800049a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049a6:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
800049a8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800049ac:	ee f9 ff f0 	ld.w	r9,r7[-16]
800049b0:	f2 08 0a 48 	lsr	r8,r9,r8
800049b4:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800049b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800049bc:	58 08       	cp.w	r8,0
800049be:	cc 71       	brne	8000494c <LED_Off+0x34>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800049c0:	2f cd       	sub	sp,-16
800049c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800049c6:	00 00       	add	r0,r0
800049c8:	80 00       	ld.sh	r0,r0[0x0]
800049ca:	eb 74 00 00 	stcond	r5[0],r4
800049ce:	01 30       	ld.ub	r0,r0++

800049d0 <LED_On>:


void LED_On(U32 leds)
{
800049d0:	eb cd 40 80 	pushm	r7,lr
800049d4:	1a 97       	mov	r7,sp
800049d6:	20 4d       	sub	sp,16
800049d8:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
800049dc:	4a 88       	lddpc	r8,80004a7c <LED_On+0xac>
800049de:	21 08       	sub	r8,16
800049e0:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800049e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800049e8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800049ec:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
800049f0:	4a 48       	lddpc	r8,80004a80 <LED_On+0xb0>
800049f2:	70 09       	ld.w	r9,r8[0x0]
800049f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800049f8:	10 49       	or	r9,r8
800049fa:	4a 28       	lddpc	r8,80004a80 <LED_On+0xb0>
800049fc:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800049fe:	c3 78       	rjmp	80004a6c <LED_On+0x9c>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80004a00:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004a04:	5c 98       	brev	r8
80004a06:	f0 08 12 00 	clz	r8,r8
80004a0a:	5c 58       	castu.b	r8
80004a0c:	2f f8       	sub	r8,-1
80004a0e:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80004a12:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004a16:	a5 68       	lsl	r8,0x4
80004a18:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004a1c:	f2 08 00 08 	add	r8,r9,r8
80004a20:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80004a24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a28:	70 08       	ld.w	r8,r8[0x0]
80004a2a:	a9 68       	lsl	r8,0x8
80004a2c:	e0 28 f0 00 	sub	r8,61440
80004a30:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80004a34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a38:	70 19       	ld.w	r9,r8[0x4]
80004a3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a3e:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80004a42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a46:	70 19       	ld.w	r9,r8[0x4]
80004a48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a4c:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80004a50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a54:	70 19       	ld.w	r9,r8[0x4]
80004a56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a5a:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80004a5c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004a60:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004a64:	f2 08 0a 48 	lsr	r8,r9,r8
80004a68:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80004a6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004a70:	58 08       	cp.w	r8,0
80004a72:	cc 71       	brne	80004a00 <LED_On+0x30>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
80004a74:	2f cd       	sub	sp,-16
80004a76:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a7a:	00 00       	add	r0,r0
80004a7c:	80 00       	ld.sh	r0,r0[0x0]
80004a7e:	eb 74 00 00 	stcond	r5[0],r4
80004a82:	01 30       	ld.ub	r0,r0++

80004a84 <et024006_Init>:
 *  @param cpu_hz CPU speed in Hz. This is needed for power up timings.
 *  @param hsb_hz HSB bus speed in Hz. This parameter is needed to set up the SMC.
 *  If SPI mode is used then this parameter is ignored.
 */
void et024006_Init( unsigned long cpu_hz, unsigned long hsb_hz )
{
80004a84:	eb cd 40 80 	pushm	r7,lr
80004a88:	1a 97       	mov	r7,sp
80004a8a:	20 2d       	sub	sp,8
80004a8c:	ef 4c ff fc 	st.w	r7[-4],r12
80004a90:	ef 4b ff f8 	st.w	r7[-8],r11
  tft_data.cpu_hz = cpu_hz;
80004a94:	49 08       	lddpc	r8,80004ad4 <et024006_Init+0x50>
80004a96:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004a9a:	91 09       	st.w	r8[0x0],r9
  tft_data.hsb_hz = hsb_hz;
80004a9c:	48 e8       	lddpc	r8,80004ad4 <et024006_Init+0x50>
80004a9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004aa2:	91 19       	st.w	r8[0x4],r9

#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_SPI)
  et024006_InitSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
80004aa4:	48 c8       	lddpc	r8,80004ad4 <et024006_Init+0x50>
80004aa6:	70 18       	ld.w	r8,r8[0x4]
80004aa8:	10 9c       	mov	r12,r8
80004aaa:	f0 1f 00 0c 	mcall	80004ad8 <et024006_Init+0x54>
#endif
  et024006_SetupInterface();
80004aae:	f0 1f 00 0c 	mcall	80004adc <et024006_Init+0x58>
  et024006_ResetDisplay();
80004ab2:	f0 1f 00 0c 	mcall	80004ae0 <et024006_Init+0x5c>
  et024006_AdjustGamma();
80004ab6:	f0 1f 00 0c 	mcall	80004ae4 <et024006_Init+0x60>
  et024006_GeneralSettings();
80004aba:	f0 1f 00 0c 	mcall	80004ae8 <et024006_Init+0x64>
  et024006_InterfaceSettings();
80004abe:	f0 1f 00 0c 	mcall	80004aec <et024006_Init+0x68>
  et024006_PowerSettings();
80004ac2:	f0 1f 00 0c 	mcall	80004af0 <et024006_Init+0x6c>
  et024006_PowerUp();
80004ac6:	f0 1f 00 0c 	mcall	80004af4 <et024006_Init+0x70>
  et024006_PowerOn();
80004aca:	f0 1f 00 0c 	mcall	80004af8 <et024006_Init+0x74>
}
80004ace:	2f ed       	sub	sp,-8
80004ad0:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ad4:	00 00       	add	r0,r0
80004ad6:	06 30       	cp.w	r0,r3
80004ad8:	80 00       	ld.sh	r0,r0[0x0]
80004ada:	81 10       	st.w	r0[0x4],r0
80004adc:	80 00       	ld.sh	r0,r0[0x0]
80004ade:	4d f4       	lddpc	r4,80004c58 <et024006_SetLimits+0x66>
80004ae0:	80 00       	ld.sh	r0,r0[0x0]
80004ae2:	4e 20       	lddpc	r0,80004c68 <et024006_SetLimits+0x76>
80004ae4:	80 00       	ld.sh	r0,r0[0x0]
80004ae6:	50 e0       	stdsp	sp[0x38],r0
80004ae8:	80 00       	ld.sh	r0,r0[0x0]
80004aea:	52 6e       	stdsp	sp[0x98],lr
80004aec:	80 00       	ld.sh	r0,r0[0x0]
80004aee:	56 0a       	stdsp	sp[0x180],r10
80004af0:	80 00       	ld.sh	r0,r0[0x0]
80004af2:	54 7c       	stdsp	sp[0x11c],r12
80004af4:	80 00       	ld.sh	r0,r0[0x0]
80004af6:	56 38       	stdsp	sp[0x18c],r8
80004af8:	80 00       	ld.sh	r0,r0[0x0]
80004afa:	5d 6c       	*unknown*

80004afc <et024006_DrawFilledRect>:
  }
}


void et024006_DrawFilledRect( uint16_t x, uint16_t y, uint16_t width, uint16_t height, et024006_color_t color )
{
80004afc:	eb cd 40 80 	pushm	r7,lr
80004b00:	1a 97       	mov	r7,sp
80004b02:	20 7d       	sub	sp,28
80004b04:	ef 5c ff f4 	st.h	r7[-12],r12
80004b08:	ef 5b ff f0 	st.h	r7[-16],r11
80004b0c:	ef 5a ff ec 	st.h	r7[-20],r10
80004b10:	ef 59 ff e8 	st.h	r7[-24],r9
80004b14:	ef 58 ff e4 	st.h	r7[-28],r8
  Assert( y < ET024006_HEIGHT );
  Assert( width > 0 );
  Assert( height > 0 );

  // Compute bottom right point.
  uint16_t x2 = x + width - 1;
80004b18:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80004b1c:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80004b20:	f2 08 00 08 	add	r8,r9,r8
80004b24:	5c 88       	casts.h	r8
80004b26:	20 18       	sub	r8,1
80004b28:	ef 58 ff f8 	st.h	r7[-8],r8
  uint16_t y2 = y + height - 1;
80004b2c:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80004b30:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80004b34:	f2 08 00 08 	add	r8,r9,r8
80004b38:	5c 88       	casts.h	r8
80004b3a:	20 18       	sub	r8,1
80004b3c:	ef 58 ff fa 	st.h	r7[-6],r8
  // More sanity check.
  Assert( x2 < ET024006_WIDTH );
  Assert( y2 < ET024006_HEIGHT );

  // Set up draw area and copy pixel color until area is full.
  et024006_SetLimits( x, y, x2, y2 );
80004b40:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80004b44:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80004b48:	ef 1b ff f0 	ld.uh	r11,r7[-16]
80004b4c:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80004b50:	10 9c       	mov	r12,r8
80004b52:	f0 1f 00 0b 	mcall	80004b7c <et024006_DrawFilledRect+0x80>
  uint32_t count = (uint32_t) width * height;
80004b56:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80004b5a:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80004b5e:	f2 08 02 48 	mul	r8,r9,r8
80004b62:	ef 48 ff fc 	st.w	r7[-4],r8
  et024006_DuplicatePixel( color, count );
80004b66:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80004b6a:	ee fb ff fc 	ld.w	r11,r7[-4]
80004b6e:	10 9c       	mov	r12,r8
80004b70:	f0 1f 00 04 	mcall	80004b80 <et024006_DrawFilledRect+0x84>
}
80004b74:	2f 9d       	sub	sp,-28
80004b76:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b7a:	00 00       	add	r0,r0
80004b7c:	80 00       	ld.sh	r0,r0[0x0]
80004b7e:	4b f2       	lddpc	r2,80004c78 <et024006_SetLimits+0x86>
80004b80:	80 00       	ld.sh	r0,r0[0x0]
80004b82:	4d 48       	lddpc	r8,80004cd0 <et024006_SetLimits+0xde>

80004b84 <et024006_SetRegister>:
#endif

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
80004b84:	eb cd 40 80 	pushm	r7,lr
80004b88:	1a 97       	mov	r7,sp
80004b8a:	20 3d       	sub	sp,12
80004b8c:	18 99       	mov	r9,r12
80004b8e:	16 98       	mov	r8,r11
80004b90:	ef 69 ff f8 	st.b	r7[-8],r9
80004b94:	ef 68 ff f4 	st.b	r7[-12],r8
  uint8_t value = et024006_ReadRegister( address );
80004b98:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004b9c:	ef 68 ff fd 	st.b	r7[-3],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ uint8_t et024006_ReadRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004ba0:	fc 19 c0 00 	movh	r9,0xc000
80004ba4:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004ba8:	b2 08       	st.h	r9[0x0],r8
  return *ET024006_PARAM_ADDR;
80004baa:	fc 18 c0 20 	movh	r8,0xc020
80004bae:	90 08       	ld.sh	r8,r8[0x0]
80004bb0:	5c 88       	casts.h	r8
80004bb2:	5c 58       	castu.b	r8

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
80004bb4:	ef 68 ff fc 	st.b	r7[-4],r8
  value |= bitmask;
80004bb8:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004bbc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004bc0:	f3 e8 10 08 	or	r8,r9,r8
80004bc4:	ef 68 ff fc 	st.b	r7[-4],r8
  et024006_WriteRegister( address, value );
80004bc8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004bcc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80004bd0:	ef 69 ff ff 	st.b	r7[-1],r9
80004bd4:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004bd8:	fc 19 c0 00 	movh	r9,0xc000
80004bdc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004be0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004be2:	fc 19 c0 20 	movh	r9,0xc020
80004be6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004bea:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
  value |= bitmask;
  et024006_WriteRegister( address, value );
}
80004bec:	2f dd       	sub	sp,-12
80004bee:	e3 cd 80 80 	ldm	sp++,r7,pc

80004bf2 <et024006_SetLimits>:
/*! \brief Sets the display limits according to the corner coordinates.
 *  Writing to the display will result in writing to the area specified through
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
80004bf2:	eb cd 40 80 	pushm	r7,lr
80004bf6:	1a 97       	mov	r7,sp
80004bf8:	20 8d       	sub	sp,32
80004bfa:	12 98       	mov	r8,r9
80004bfc:	18 99       	mov	r9,r12
80004bfe:	ef 59 ff ec 	st.h	r7[-20],r9
80004c02:	16 99       	mov	r9,r11
80004c04:	ef 59 ff e8 	st.h	r7[-24],r9
80004c08:	14 99       	mov	r9,r10
80004c0a:	ef 59 ff e4 	st.h	r7[-28],r9
80004c0e:	ef 58 ff e0 	st.h	r7[-32],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
80004c12:	ef 18 ff ec 	ld.uh	r8,r7[-20]
80004c16:	a9 88       	lsr	r8,0x8
80004c18:	5c 88       	casts.h	r8
80004c1a:	5c 58       	castu.b	r8
80004c1c:	30 29       	mov	r9,2
80004c1e:	ef 69 ff f1 	st.b	r7[-15],r9
80004c22:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004c26:	fc 19 c0 00 	movh	r9,0xc000
80004c2a:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80004c2e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004c30:	fc 19 c0 20 	movh	r9,0xc020
80004c34:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80004c38:	b2 08       	st.h	r9[0x0],r8
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
80004c3a:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80004c3e:	5c 58       	castu.b	r8
80004c40:	30 39       	mov	r9,3
80004c42:	ef 69 ff f3 	st.b	r7[-13],r9
80004c46:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004c4a:	fc 19 c0 00 	movh	r9,0xc000
80004c4e:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80004c52:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004c54:	fc 19 c0 20 	movh	r9,0xc020
80004c58:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80004c5c:	b2 08       	st.h	r9[0x0],r8
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
80004c5e:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80004c62:	a9 88       	lsr	r8,0x8
80004c64:	5c 88       	casts.h	r8
80004c66:	5c 58       	castu.b	r8
80004c68:	30 49       	mov	r9,4
80004c6a:	ef 69 ff f5 	st.b	r7[-11],r9
80004c6e:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004c72:	fc 19 c0 00 	movh	r9,0xc000
80004c76:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004c7a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004c7c:	fc 19 c0 20 	movh	r9,0xc020
80004c80:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004c84:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
80004c86:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80004c8a:	5c 58       	castu.b	r8
80004c8c:	30 59       	mov	r9,5
80004c8e:	ef 69 ff f7 	st.b	r7[-9],r9
80004c92:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004c96:	fc 19 c0 00 	movh	r9,0xc000
80004c9a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004c9e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004ca0:	fc 19 c0 20 	movh	r9,0xc020
80004ca4:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004ca8:	b2 08       	st.h	r9[0x0],r8
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
80004caa:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80004cae:	a9 88       	lsr	r8,0x8
80004cb0:	5c 88       	casts.h	r8
80004cb2:	5c 58       	castu.b	r8
80004cb4:	30 69       	mov	r9,6
80004cb6:	ef 69 ff f9 	st.b	r7[-7],r9
80004cba:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004cbe:	fc 19 c0 00 	movh	r9,0xc000
80004cc2:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004cc6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004cc8:	fc 19 c0 20 	movh	r9,0xc020
80004ccc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004cd0:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
80004cd2:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80004cd6:	5c 58       	castu.b	r8
80004cd8:	30 79       	mov	r9,7
80004cda:	ef 69 ff fb 	st.b	r7[-5],r9
80004cde:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004ce2:	fc 19 c0 00 	movh	r9,0xc000
80004ce6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004cea:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004cec:	fc 19 c0 20 	movh	r9,0xc020
80004cf0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004cf4:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
80004cf6:	ef 18 ff e0 	ld.uh	r8,r7[-32]
80004cfa:	a9 88       	lsr	r8,0x8
80004cfc:	5c 88       	casts.h	r8
80004cfe:	5c 58       	castu.b	r8
80004d00:	30 89       	mov	r9,8
80004d02:	ef 69 ff fd 	st.b	r7[-3],r9
80004d06:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004d0a:	fc 19 c0 00 	movh	r9,0xc000
80004d0e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004d12:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004d14:	fc 19 c0 20 	movh	r9,0xc020
80004d18:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004d1c:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
80004d1e:	ef 08 ff e0 	ld.sh	r8,r7[-32]
80004d22:	5c 58       	castu.b	r8
80004d24:	30 99       	mov	r9,9
80004d26:	ef 69 ff ff 	st.b	r7[-1],r9
80004d2a:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004d2e:	fc 19 c0 00 	movh	r9,0xc000
80004d32:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004d36:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004d38:	fc 19 c0 20 	movh	r9,0xc020
80004d3c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004d40:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
}
80004d42:	2f 8d       	sub	sp,-32
80004d44:	e3 cd 80 80 	ldm	sp++,r7,pc

80004d48 <et024006_DuplicatePixel>:


/* --- Pixel block operations --- */

static void et024006_DuplicatePixel( et024006_color_t color, uint32_t count )
{
80004d48:	eb cd 40 80 	pushm	r7,lr
80004d4c:	1a 97       	mov	r7,sp
80004d4e:	20 3d       	sub	sp,12
80004d50:	18 98       	mov	r8,r12
80004d52:	ef 4b ff f4 	st.w	r7[-12],r11
80004d56:	ef 58 ff f8 	st.h	r7[-8],r8
80004d5a:	32 28       	mov	r8,34
80004d5c:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004d60:	fc 19 c0 00 	movh	r9,0xc000
80004d64:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004d68:	b2 08       	st.h	r9[0x0],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80004d6a:	c2 e8       	rjmp	80004dc6 <et024006_DuplicatePixel+0x7e>
    *ET024006_PARAM_ADDR = color;
80004d6c:	fc 19 c0 20 	movh	r9,0xc020
80004d70:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d74:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004d76:	fc 19 c0 20 	movh	r9,0xc020
80004d7a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d7e:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004d80:	fc 19 c0 20 	movh	r9,0xc020
80004d84:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d88:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004d8a:	fc 19 c0 20 	movh	r9,0xc020
80004d8e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d92:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004d94:	fc 19 c0 20 	movh	r9,0xc020
80004d98:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004d9c:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004d9e:	fc 19 c0 20 	movh	r9,0xc020
80004da2:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004da6:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004da8:	fc 19 c0 20 	movh	r9,0xc020
80004dac:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004db0:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004db2:	fc 19 c0 20 	movh	r9,0xc020
80004db6:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004dba:	b2 08       	st.h	r9[0x0],r8
    count-=8;
80004dbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004dc0:	20 88       	sub	r8,8
80004dc2:	ef 48 ff f4 	st.w	r7[-12],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80004dc6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004dca:	58 78       	cp.w	r8,7
80004dcc:	fe 9b ff d0 	brhi	80004d6c <et024006_DuplicatePixel+0x24>
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80004dd0:	c0 b8       	rjmp	80004de6 <et024006_DuplicatePixel+0x9e>
    *ET024006_PARAM_ADDR = color;
80004dd2:	fc 19 c0 20 	movh	r9,0xc020
80004dd6:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004dda:	b2 08       	st.h	r9[0x0],r8
    --count;
80004ddc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004de0:	20 18       	sub	r8,1
80004de2:	ef 48 ff f4 	st.w	r7[-12],r8
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80004de6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004dea:	58 08       	cp.w	r8,0
80004dec:	cf 31       	brne	80004dd2 <et024006_DuplicatePixel+0x8a>
    }
  }

  et024006_DeselectSPI();
#endif
}
80004dee:	2f dd       	sub	sp,-12
80004df0:	e3 cd 80 80 	ldm	sp++,r7,pc

80004df4 <et024006_SetupInterface>:
                SPI_MASTER_bm);          // in master mode
}
#endif

static void et024006_SetupInterface( void )
{
80004df4:	eb cd 40 80 	pushm	r7,lr
80004df8:	1a 97       	mov	r7,sp

  // et024006_TE (tearing sync) signal from display is input
  // without any pull resistors
  gpio_enable_gpio_pin(ET024006DHU_TE_PIN);
80004dfa:	30 0c       	mov	r12,0
80004dfc:	f0 1f 00 06 	mcall	80004e14 <et024006_SetupInterface+0x20>

  // Backlight pin (PWM) for display is output
  gpio_enable_module_pin(ET024006DHU_BL_PIN, ET024006DHU_BL_FUNCTION);
80004e00:	30 2b       	mov	r11,2
80004e02:	30 9c       	mov	r12,9
80004e04:	f0 1f 00 05 	mcall	80004e18 <et024006_SetupInterface+0x24>
  // Turns backlight ON
  /*TODO Add backlight driver */

  // Reset pin for display is output
  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80004e08:	34 2c       	mov	r12,66
80004e0a:	f0 1f 00 05 	mcall	80004e1c <et024006_SetupInterface+0x28>
}
80004e0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e12:	00 00       	add	r0,r0
80004e14:	80 00       	ld.sh	r0,r0[0x0]
80004e16:	89 d8       	st.w	r4[0x34],r8
80004e18:	80 00       	ld.sh	r0,r0[0x0]
80004e1a:	88 c8       	ld.uh	r8,r4[0x8]
80004e1c:	80 00       	ld.sh	r0,r0[0x0]
80004e1e:	8c 4a       	ld.sh	r10,r6[0x8]

80004e20 <et024006_ResetDisplay>:

/*! \brief Does a hard reset of the display.
 */
static void et024006_ResetDisplay( void )
{
80004e20:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80004e24:	1a 97       	mov	r7,sp
80004e26:	21 ad       	sub	sp,104
  // clear reset line
  gpio_clr_gpio_pin(ET024006DHU_RESET_PIN);
80004e28:	34 2c       	mov	r12,66
80004e2a:	f0 1f 00 aa 	mcall	800050d0 <et024006_ResetDisplay+0x2b0>
  // 50us delay
  cpu_delay_us( 50, tft_data.cpu_hz );
80004e2e:	fe f8 02 a6 	ld.w	r8,pc[678]
80004e32:	70 08       	ld.w	r8,r8[0x0]
80004e34:	33 29       	mov	r9,50
80004e36:	ef 49 ff c4 	st.w	r7[-60],r9
80004e3a:	ef 48 ff c0 	st.w	r7[-64],r8
80004e3e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80004e42:	ef 48 ff cc 	st.w	r7[-52],r8
80004e46:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004e4a:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80004e4e:	ee fc ff cc 	ld.w	r12,r7[-52]
80004e52:	ef 4c ff a4 	st.w	r7[-92],r12
80004e56:	30 0b       	mov	r11,0
80004e58:	ef 4b ff a0 	st.w	r7[-96],r11
80004e5c:	ee f9 ff c8 	ld.w	r9,r7[-56]
80004e60:	ef 49 ff 9c 	st.w	r7[-100],r9
80004e64:	30 08       	mov	r8,0
80004e66:	ef 48 ff 98 	st.w	r7[-104],r8
80004e6a:	ee fa ff a0 	ld.w	r10,r7[-96]
80004e6e:	ee fc ff 9c 	ld.w	r12,r7[-100]
80004e72:	b9 3a       	mul	r10,r12
80004e74:	ee f8 ff 98 	ld.w	r8,r7[-104]
80004e78:	ee fb ff a4 	ld.w	r11,r7[-92]
80004e7c:	b7 38       	mul	r8,r11
80004e7e:	10 0a       	add	r10,r8
80004e80:	ee fc ff a4 	ld.w	r12,r7[-92]
80004e84:	ee fb ff 9c 	ld.w	r11,r7[-100]
80004e88:	f8 0b 06 48 	mulu.d	r8,r12,r11
80004e8c:	12 0a       	add	r10,r9
80004e8e:	14 99       	mov	r9,r10
80004e90:	ee 7a 42 3f 	mov	r10,999999
80004e94:	30 0b       	mov	r11,0
80004e96:	f0 0a 00 0a 	add	r10,r8,r10
80004e9a:	f2 0b 00 4b 	adc	r11,r9,r11
80004e9e:	ee 78 42 40 	mov	r8,1000000
80004ea2:	30 09       	mov	r9,0
80004ea4:	f0 1f 00 8d 	mcall	800050d8 <et024006_ResetDisplay+0x2b8>
80004ea8:	14 98       	mov	r8,r10
80004eaa:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80004eac:	ef 48 ff d4 	st.w	r7[-44],r8
80004eb0:	ee c8 00 58 	sub	r8,r7,88
80004eb4:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004eb8:	e1 b8 00 42 	mfsr	r8,0x108
80004ebc:	10 99       	mov	r9,r8
80004ebe:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004ec2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004ec4:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004ec8:	70 09       	ld.w	r9,r8[0x0]
80004eca:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004ece:	10 09       	add	r9,r8
80004ed0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004ed4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004ed6:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004eda:	30 08       	mov	r8,0
80004edc:	f3 68 00 08 	st.b	r9[8],r8
80004ee0:	ee c8 00 58 	sub	r8,r7,88
80004ee4:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004ee8:	e1 b8 00 42 	mfsr	r8,0x108
80004eec:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004ef0:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004ef4:	f1 39 00 08 	ld.ub	r9,r8[8]
80004ef8:	30 28       	mov	r8,2
80004efa:	f0 09 18 00 	cp.b	r9,r8
80004efe:	c0 31       	brne	80004f04 <et024006_ResetDisplay+0xe4>
    return false;
80004f00:	30 08       	mov	r8,0
80004f02:	c4 38       	rjmp	80004f88 <et024006_ResetDisplay+0x168>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004f04:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f08:	f1 39 00 08 	ld.ub	r9,r8[8]
80004f0c:	30 18       	mov	r8,1
80004f0e:	f0 09 18 00 	cp.b	r9,r8
80004f12:	c0 31       	brne	80004f18 <et024006_ResetDisplay+0xf8>
    return true;
80004f14:	30 18       	mov	r8,1
80004f16:	c3 98       	rjmp	80004f88 <et024006_ResetDisplay+0x168>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004f18:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f1c:	70 09       	ld.w	r9,r8[0x0]
80004f1e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f22:	70 18       	ld.w	r8,r8[0x4]
80004f24:	10 39       	cp.w	r9,r8
80004f26:	e0 88 00 1a 	brls	80004f5a <et024006_ResetDisplay+0x13a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004f2a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f2e:	70 08       	ld.w	r8,r8[0x0]
80004f30:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004f34:	10 39       	cp.w	r9,r8
80004f36:	c1 02       	brcc	80004f56 <et024006_ResetDisplay+0x136>
80004f38:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f3c:	70 18       	ld.w	r8,r8[0x4]
80004f3e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004f42:	10 39       	cp.w	r9,r8
80004f44:	e0 88 00 09 	brls	80004f56 <et024006_ResetDisplay+0x136>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004f48:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004f4c:	30 18       	mov	r8,1
80004f4e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004f52:	30 18       	mov	r8,1
80004f54:	c1 a8       	rjmp	80004f88 <et024006_ResetDisplay+0x168>
    }
    return false;
80004f56:	30 08       	mov	r8,0
80004f58:	c1 88       	rjmp	80004f88 <et024006_ResetDisplay+0x168>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004f5a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f5e:	70 08       	ld.w	r8,r8[0x0]
80004f60:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004f64:	10 39       	cp.w	r9,r8
80004f66:	c0 93       	brcs	80004f78 <et024006_ResetDisplay+0x158>
80004f68:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f6c:	70 18       	ld.w	r8,r8[0x4]
80004f6e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004f72:	10 39       	cp.w	r9,r8
80004f74:	e0 88 00 09 	brls	80004f86 <et024006_ResetDisplay+0x166>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004f78:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004f7c:	30 18       	mov	r8,1
80004f7e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004f82:	30 18       	mov	r8,1
80004f84:	c0 28       	rjmp	80004f88 <et024006_ResetDisplay+0x168>
    }
    return false;
80004f86:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004f88:	58 08       	cp.w	r8,0
80004f8a:	ca b0       	breq	80004ee0 <et024006_ResetDisplay+0xc0>

  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80004f8c:	34 2c       	mov	r12,66
80004f8e:	f0 1f 00 54 	mcall	800050dc <et024006_ResetDisplay+0x2bc>
  // 5ms delay
  cpu_delay_ms( 5, tft_data.cpu_hz );
80004f92:	4d 18       	lddpc	r8,800050d4 <et024006_ResetDisplay+0x2b4>
80004f94:	70 08       	ld.w	r8,r8[0x0]
80004f96:	30 59       	mov	r9,5
80004f98:	ef 49 ff e4 	st.w	r7[-28],r9
80004f9c:	ef 48 ff e0 	st.w	r7[-32],r8
80004fa0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004fa4:	ef 48 ff ec 	st.w	r7[-20],r8
80004fa8:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004fac:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004fb0:	ee f0 ff ec 	ld.w	r0,r7[-20]
80004fb4:	30 01       	mov	r1,0
80004fb6:	ee f2 ff e8 	ld.w	r2,r7[-24]
80004fba:	30 03       	mov	r3,0
80004fbc:	e2 02 02 4a 	mul	r10,r1,r2
80004fc0:	e6 00 02 48 	mul	r8,r3,r0
80004fc4:	10 0a       	add	r10,r8
80004fc6:	e0 02 06 48 	mulu.d	r8,r0,r2
80004fca:	12 0a       	add	r10,r9
80004fcc:	14 99       	mov	r9,r10
80004fce:	e0 6a 03 e7 	mov	r10,999
80004fd2:	30 0b       	mov	r11,0
80004fd4:	f0 0a 00 0a 	add	r10,r8,r10
80004fd8:	f2 0b 00 4b 	adc	r11,r9,r11
80004fdc:	e0 68 03 e8 	mov	r8,1000
80004fe0:	30 09       	mov	r9,0
80004fe2:	f0 1f 00 3e 	mcall	800050d8 <et024006_ResetDisplay+0x2b8>
80004fe6:	14 98       	mov	r8,r10
80004fe8:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004fea:	ef 48 ff f4 	st.w	r7[-12],r8
80004fee:	ee c8 00 4c 	sub	r8,r7,76
80004ff2:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004ff6:	e1 b8 00 42 	mfsr	r8,0x108
80004ffa:	10 99       	mov	r9,r8
80004ffc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005000:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005002:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005006:	70 09       	ld.w	r9,r8[0x0]
80005008:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000500c:	10 09       	add	r9,r8
8000500e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005012:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005014:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005018:	30 08       	mov	r8,0
8000501a:	f3 68 00 08 	st.b	r9[8],r8
8000501e:	ee c8 00 4c 	sub	r8,r7,76
80005022:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005026:	e1 b8 00 42 	mfsr	r8,0x108
8000502a:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000502e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005032:	f1 39 00 08 	ld.ub	r9,r8[8]
80005036:	30 28       	mov	r8,2
80005038:	f0 09 18 00 	cp.b	r9,r8
8000503c:	c0 31       	brne	80005042 <et024006_ResetDisplay+0x222>
    return false;
8000503e:	30 08       	mov	r8,0
80005040:	c4 38       	rjmp	800050c6 <et024006_ResetDisplay+0x2a6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005042:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005046:	f1 39 00 08 	ld.ub	r9,r8[8]
8000504a:	30 18       	mov	r8,1
8000504c:	f0 09 18 00 	cp.b	r9,r8
80005050:	c0 31       	brne	80005056 <et024006_ResetDisplay+0x236>
    return true;
80005052:	30 18       	mov	r8,1
80005054:	c3 98       	rjmp	800050c6 <et024006_ResetDisplay+0x2a6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005056:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000505a:	70 09       	ld.w	r9,r8[0x0]
8000505c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005060:	70 18       	ld.w	r8,r8[0x4]
80005062:	10 39       	cp.w	r9,r8
80005064:	e0 88 00 1a 	brls	80005098 <et024006_ResetDisplay+0x278>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005068:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000506c:	70 08       	ld.w	r8,r8[0x0]
8000506e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005072:	10 39       	cp.w	r9,r8
80005074:	c1 02       	brcc	80005094 <et024006_ResetDisplay+0x274>
80005076:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000507a:	70 18       	ld.w	r8,r8[0x4]
8000507c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005080:	10 39       	cp.w	r9,r8
80005082:	e0 88 00 09 	brls	80005094 <et024006_ResetDisplay+0x274>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005086:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000508a:	30 18       	mov	r8,1
8000508c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005090:	30 18       	mov	r8,1
80005092:	c1 a8       	rjmp	800050c6 <et024006_ResetDisplay+0x2a6>
    }
    return false;
80005094:	30 08       	mov	r8,0
80005096:	c1 88       	rjmp	800050c6 <et024006_ResetDisplay+0x2a6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005098:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000509c:	70 08       	ld.w	r8,r8[0x0]
8000509e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800050a2:	10 39       	cp.w	r9,r8
800050a4:	c0 93       	brcs	800050b6 <et024006_ResetDisplay+0x296>
800050a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050aa:	70 18       	ld.w	r8,r8[0x4]
800050ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800050b0:	10 39       	cp.w	r9,r8
800050b2:	e0 88 00 09 	brls	800050c4 <et024006_ResetDisplay+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800050b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800050ba:	30 18       	mov	r8,1
800050bc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800050c0:	30 18       	mov	r8,1
800050c2:	c0 28       	rjmp	800050c6 <et024006_ResetDisplay+0x2a6>
    }
    return false;
800050c4:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800050c6:	58 08       	cp.w	r8,0
800050c8:	ca b0       	breq	8000501e <et024006_ResetDisplay+0x1fe>
}
800050ca:	2e 6d       	sub	sp,-104
800050cc:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800050d0:	80 00       	ld.sh	r0,r0[0x0]
800050d2:	8c b2       	ld.uh	r2,r6[0x6]
800050d4:	00 00       	add	r0,r0
800050d6:	06 30       	cp.w	r0,r3
800050d8:	80 00       	ld.sh	r0,r0[0x0]
800050da:	e3 fc 80 00 	ld.wls	r12,r1[0x0]
800050de:	8c 4a       	ld.sh	r10,r6[0x8]

800050e0 <et024006_AdjustGamma>:
/*! \brief Display gamma setup.
 *
 * Parameters are provided by EDT for the display.
 */
static void et024006_AdjustGamma( void )
{
800050e0:	eb cd 40 80 	pushm	r7,lr
800050e4:	1a 97       	mov	r7,sp
800050e6:	20 6d       	sub	sp,24
800050e8:	34 68       	mov	r8,70
800050ea:	ef 68 ff e9 	st.b	r7[-23],r8
800050ee:	39 48       	mov	r8,-108
800050f0:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800050f4:	fc 19 c0 00 	movh	r9,0xc000
800050f8:	ef 38 ff e9 	ld.ub	r8,r7[-23]
800050fc:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800050fe:	fc 19 c0 20 	movh	r9,0xc020
80005102:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80005106:	b2 08       	st.h	r9[0x0],r8
80005108:	34 78       	mov	r8,71
8000510a:	ef 68 ff eb 	st.b	r7[-21],r8
8000510e:	34 18       	mov	r8,65
80005110:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005114:	fc 19 c0 00 	movh	r9,0xc000
80005118:	ef 38 ff eb 	ld.ub	r8,r7[-21]
8000511c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000511e:	fc 19 c0 20 	movh	r9,0xc020
80005122:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80005126:	b2 08       	st.h	r9[0x0],r8
80005128:	34 88       	mov	r8,72
8000512a:	ef 68 ff ed 	st.b	r7[-19],r8
8000512e:	30 08       	mov	r8,0
80005130:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005134:	fc 19 c0 00 	movh	r9,0xc000
80005138:	ef 38 ff ed 	ld.ub	r8,r7[-19]
8000513c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000513e:	fc 19 c0 20 	movh	r9,0xc020
80005142:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005146:	b2 08       	st.h	r9[0x0],r8
80005148:	34 98       	mov	r8,73
8000514a:	ef 68 ff ef 	st.b	r7[-17],r8
8000514e:	33 38       	mov	r8,51
80005150:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005154:	fc 19 c0 00 	movh	r9,0xc000
80005158:	ef 38 ff ef 	ld.ub	r8,r7[-17]
8000515c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000515e:	fc 19 c0 20 	movh	r9,0xc020
80005162:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80005166:	b2 08       	st.h	r9[0x0],r8
80005168:	34 a8       	mov	r8,74
8000516a:	ef 68 ff f1 	st.b	r7[-15],r8
8000516e:	32 58       	mov	r8,37
80005170:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005174:	fc 19 c0 00 	movh	r9,0xc000
80005178:	ef 38 ff f1 	ld.ub	r8,r7[-15]
8000517c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000517e:	fc 19 c0 20 	movh	r9,0xc020
80005182:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005186:	b2 08       	st.h	r9[0x0],r8
80005188:	34 b8       	mov	r8,75
8000518a:	ef 68 ff f3 	st.b	r7[-13],r8
8000518e:	34 58       	mov	r8,69
80005190:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005194:	fc 19 c0 00 	movh	r9,0xc000
80005198:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000519c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000519e:	fc 19 c0 20 	movh	r9,0xc020
800051a2:	ef 38 ff f2 	ld.ub	r8,r7[-14]
800051a6:	b2 08       	st.h	r9[0x0],r8
800051a8:	34 c8       	mov	r8,76
800051aa:	ef 68 ff f5 	st.b	r7[-11],r8
800051ae:	34 48       	mov	r8,68
800051b0:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051b4:	fc 19 c0 00 	movh	r9,0xc000
800051b8:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800051bc:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051be:	fc 19 c0 20 	movh	r9,0xc020
800051c2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800051c6:	b2 08       	st.h	r9[0x0],r8
800051c8:	34 d8       	mov	r8,77
800051ca:	ef 68 ff f7 	st.b	r7[-9],r8
800051ce:	37 78       	mov	r8,119
800051d0:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051d4:	fc 19 c0 00 	movh	r9,0xc000
800051d8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800051dc:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051de:	fc 19 c0 20 	movh	r9,0xc020
800051e2:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800051e6:	b2 08       	st.h	r9[0x0],r8
800051e8:	34 e8       	mov	r8,78
800051ea:	ef 68 ff f9 	st.b	r7[-7],r8
800051ee:	31 28       	mov	r8,18
800051f0:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051f4:	fc 19 c0 00 	movh	r9,0xc000
800051f8:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800051fc:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051fe:	fc 19 c0 20 	movh	r9,0xc020
80005202:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005206:	b2 08       	st.h	r9[0x0],r8
80005208:	34 f8       	mov	r8,79
8000520a:	ef 68 ff fb 	st.b	r7[-5],r8
8000520e:	3c c8       	mov	r8,-52
80005210:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005214:	fc 19 c0 00 	movh	r9,0xc000
80005218:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000521c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000521e:	fc 19 c0 20 	movh	r9,0xc020
80005222:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80005226:	b2 08       	st.h	r9[0x0],r8
80005228:	35 08       	mov	r8,80
8000522a:	ef 68 ff fd 	st.b	r7[-3],r8
8000522e:	34 68       	mov	r8,70
80005230:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005234:	fc 19 c0 00 	movh	r9,0xc000
80005238:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000523c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000523e:	fc 19 c0 20 	movh	r9,0xc020
80005242:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005246:	b2 08       	st.h	r9[0x0],r8
80005248:	35 18       	mov	r8,81
8000524a:	ef 68 ff ff 	st.b	r7[-1],r8
8000524e:	38 28       	mov	r8,-126
80005250:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005254:	fc 19 c0 00 	movh	r9,0xc000
80005258:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000525c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000525e:	fc 19 c0 20 	movh	r9,0xc020
80005262:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005266:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_GAMMACTRL8, 0x77 );
  et024006_WriteRegister( HIMAX_GAMMACTRL9, 0x12 );
  et024006_WriteRegister( HIMAX_GAMMACTRL10, 0xCC );
  et024006_WriteRegister( HIMAX_GAMMACTRL11, 0x46 );
  et024006_WriteRegister( HIMAX_GAMMACTRL12, 0x82 );
}
80005268:	2f ad       	sub	sp,-24
8000526a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000526e <et024006_GeneralSettings>:
/*! \brief General display settings.
 *
 * This are settings provided by EDT and are optimised for the display.
 */
static void et024006_GeneralSettings(void)
{
8000526e:	eb cd 40 80 	pushm	r7,lr
80005272:	1a 97       	mov	r7,sp
80005274:	20 8d       	sub	sp,32
80005276:	30 18       	mov	r8,1
80005278:	ef 68 ff e1 	st.b	r7[-31],r8
8000527c:	30 68       	mov	r8,6
8000527e:	ef 68 ff e0 	st.b	r7[-32],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005282:	fc 19 c0 00 	movh	r9,0xc000
80005286:	ef 38 ff e1 	ld.ub	r8,r7[-31]
8000528a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000528c:	fc 19 c0 20 	movh	r9,0xc020
80005290:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80005294:	b2 08       	st.h	r9[0x0],r8
80005296:	33 a8       	mov	r8,58
80005298:	ef 68 ff e3 	st.b	r7[-29],r8
8000529c:	30 18       	mov	r8,1
8000529e:	ef 68 ff e2 	st.b	r7[-30],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052a2:	fc 19 c0 00 	movh	r9,0xc000
800052a6:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800052aa:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052ac:	fc 19 c0 20 	movh	r9,0xc020
800052b0:	ef 38 ff e2 	ld.ub	r8,r7[-30]
800052b4:	b2 08       	st.h	r9[0x0],r8
800052b6:	33 b8       	mov	r8,59
800052b8:	ef 68 ff e5 	st.b	r7[-27],r8
800052bc:	30 18       	mov	r8,1
800052be:	ef 68 ff e4 	st.b	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052c2:	fc 19 c0 00 	movh	r9,0xc000
800052c6:	ef 38 ff e5 	ld.ub	r8,r7[-27]
800052ca:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052cc:	fc 19 c0 20 	movh	r9,0xc020
800052d0:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800052d4:	b2 08       	st.h	r9[0x0],r8
800052d6:	33 c8       	mov	r8,60
800052d8:	ef 68 ff e7 	st.b	r7[-25],r8
800052dc:	3f 08       	mov	r8,-16
800052de:	ef 68 ff e6 	st.b	r7[-26],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052e2:	fc 19 c0 00 	movh	r9,0xc000
800052e6:	ef 38 ff e7 	ld.ub	r8,r7[-25]
800052ea:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052ec:	fc 19 c0 20 	movh	r9,0xc020
800052f0:	ef 38 ff e6 	ld.ub	r8,r7[-26]
800052f4:	b2 08       	st.h	r9[0x0],r8
800052f6:	33 d8       	mov	r8,61
800052f8:	ef 68 ff e9 	st.b	r7[-23],r8
800052fc:	30 08       	mov	r8,0
800052fe:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005302:	fc 19 c0 00 	movh	r9,0xc000
80005306:	ef 38 ff e9 	ld.ub	r8,r7[-23]
8000530a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000530c:	fc 19 c0 20 	movh	r9,0xc020
80005310:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80005314:	b2 08       	st.h	r9[0x0],r8
80005316:	33 e8       	mov	r8,62
80005318:	ef 68 ff eb 	st.b	r7[-21],r8
8000531c:	33 88       	mov	r8,56
8000531e:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005322:	fc 19 c0 00 	movh	r9,0xc000
80005326:	ef 38 ff eb 	ld.ub	r8,r7[-21]
8000532a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000532c:	fc 19 c0 20 	movh	r9,0xc020
80005330:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80005334:	b2 08       	st.h	r9[0x0],r8
80005336:	34 08       	mov	r8,64
80005338:	ef 68 ff ed 	st.b	r7[-19],r8
8000533c:	30 f8       	mov	r8,15
8000533e:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005342:	fc 19 c0 00 	movh	r9,0xc000
80005346:	ef 38 ff ed 	ld.ub	r8,r7[-19]
8000534a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000534c:	fc 19 c0 20 	movh	r9,0xc020
80005350:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005354:	b2 08       	st.h	r9[0x0],r8
80005356:	34 18       	mov	r8,65
80005358:	ef 68 ff ef 	st.b	r7[-17],r8
8000535c:	3f 08       	mov	r8,-16
8000535e:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005362:	fc 19 c0 00 	movh	r9,0xc000
80005366:	ef 38 ff ef 	ld.ub	r8,r7[-17]
8000536a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000536c:	fc 19 c0 20 	movh	r9,0xc020
80005370:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80005374:	b2 08       	st.h	r9[0x0],r8
80005376:	32 78       	mov	r8,39
80005378:	ef 68 ff f1 	st.b	r7[-15],r8
8000537c:	30 28       	mov	r8,2
8000537e:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005382:	fc 19 c0 00 	movh	r9,0xc000
80005386:	ef 38 ff f1 	ld.ub	r8,r7[-15]
8000538a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000538c:	fc 19 c0 20 	movh	r9,0xc020
80005390:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005394:	b2 08       	st.h	r9[0x0],r8
80005396:	32 88       	mov	r8,40
80005398:	ef 68 ff f3 	st.b	r7[-13],r8
8000539c:	30 28       	mov	r8,2
8000539e:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053a2:	fc 19 c0 00 	movh	r9,0xc000
800053a6:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800053aa:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053ac:	fc 19 c0 20 	movh	r9,0xc020
800053b0:	ef 38 ff f2 	ld.ub	r8,r7[-14]
800053b4:	b2 08       	st.h	r9[0x0],r8
800053b6:	32 98       	mov	r8,41
800053b8:	ef 68 ff f5 	st.b	r7[-11],r8
800053bc:	30 28       	mov	r8,2
800053be:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053c2:	fc 19 c0 00 	movh	r9,0xc000
800053c6:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800053ca:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053cc:	fc 19 c0 20 	movh	r9,0xc020
800053d0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800053d4:	b2 08       	st.h	r9[0x0],r8
800053d6:	32 a8       	mov	r8,42
800053d8:	ef 68 ff f7 	st.b	r7[-9],r8
800053dc:	30 28       	mov	r8,2
800053de:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053e2:	fc 19 c0 00 	movh	r9,0xc000
800053e6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800053ea:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053ec:	fc 19 c0 20 	movh	r9,0xc020
800053f0:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800053f4:	b2 08       	st.h	r9[0x0],r8
800053f6:	32 c8       	mov	r8,44
800053f8:	ef 68 ff f9 	st.b	r7[-7],r8
800053fc:	30 28       	mov	r8,2
800053fe:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005402:	fc 19 c0 00 	movh	r9,0xc000
80005406:	ef 38 ff f9 	ld.ub	r8,r7[-7]
8000540a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000540c:	fc 19 c0 20 	movh	r9,0xc020
80005410:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005414:	b2 08       	st.h	r9[0x0],r8
80005416:	32 d8       	mov	r8,45
80005418:	ef 68 ff fb 	st.b	r7[-5],r8
8000541c:	30 28       	mov	r8,2
8000541e:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005422:	fc 19 c0 00 	movh	r9,0xc000
80005426:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000542a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000542c:	fc 19 c0 20 	movh	r9,0xc020
80005430:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80005434:	b2 08       	st.h	r9[0x0],r8
80005436:	31 98       	mov	r8,25
80005438:	ef 68 ff fd 	st.b	r7[-3],r8
8000543c:	34 98       	mov	r8,73
8000543e:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005442:	fc 19 c0 00 	movh	r9,0xc000
80005446:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000544a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000544c:	fc 19 c0 20 	movh	r9,0xc020
80005450:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005454:	b2 08       	st.h	r9[0x0],r8
80005456:	39 38       	mov	r8,-109
80005458:	ef 68 ff ff 	st.b	r7[-1],r8
8000545c:	30 88       	mov	r8,8
8000545e:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005462:	fc 19 c0 00 	movh	r9,0xc000
80005466:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000546a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000546c:	fc 19 c0 20 	movh	r9,0xc020
80005470:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005474:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL6, 0x02 );
  et024006_WriteRegister( HIMAX_DISPCTRL7, 0x02 );

  et024006_WriteRegister( HIMAX_OSCCTRL1, 0x49 );
  et024006_WriteRegister( HIMAX_OSCCTRL3, 0x08 );
}
80005476:	2f 8d       	sub	sp,-32
80005478:	e3 cd 80 80 	ldm	sp++,r7,pc

8000547c <et024006_PowerSettings>:
/*! \brief Power setup.
 *
 * Sets basic DC/DC and VCOM parameters.
 */
static void et024006_PowerSettings(void)
{
8000547c:	eb cd 40 80 	pushm	r7,lr
80005480:	1a 97       	mov	r7,sp
80005482:	20 6d       	sub	sp,24
80005484:	32 38       	mov	r8,35
80005486:	ef 68 ff e9 	st.b	r7[-23],r8
8000548a:	39 58       	mov	r8,-107
8000548c:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005490:	fc 19 c0 00 	movh	r9,0xc000
80005494:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80005498:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000549a:	fc 19 c0 20 	movh	r9,0xc020
8000549e:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800054a2:	b2 08       	st.h	r9[0x0],r8
800054a4:	32 48       	mov	r8,36
800054a6:	ef 68 ff eb 	st.b	r7[-21],r8
800054aa:	39 58       	mov	r8,-107
800054ac:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800054b0:	fc 19 c0 00 	movh	r9,0xc000
800054b4:	ef 38 ff eb 	ld.ub	r8,r7[-21]
800054b8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800054ba:	fc 19 c0 20 	movh	r9,0xc020
800054be:	ef 38 ff ea 	ld.ub	r8,r7[-22]
800054c2:	b2 08       	st.h	r9[0x0],r8
800054c4:	32 58       	mov	r8,37
800054c6:	ef 68 ff ed 	st.b	r7[-19],r8
800054ca:	3f f8       	mov	r8,-1
800054cc:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800054d0:	fc 19 c0 00 	movh	r9,0xc000
800054d4:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800054d8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800054da:	fc 19 c0 20 	movh	r9,0xc020
800054de:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800054e2:	b2 08       	st.h	r9[0x0],r8
800054e4:	39 08       	mov	r8,-112
800054e6:	ef 68 ff ef 	st.b	r7[-17],r8
800054ea:	37 f8       	mov	r8,127
800054ec:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800054f0:	fc 19 c0 00 	movh	r9,0xc000
800054f4:	ef 38 ff ef 	ld.ub	r8,r7[-17]
800054f8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800054fa:	fc 19 c0 20 	movh	r9,0xc020
800054fe:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80005502:	b2 08       	st.h	r9[0x0],r8
80005504:	33 58       	mov	r8,53
80005506:	ef 68 ff f1 	st.b	r7[-15],r8
8000550a:	33 88       	mov	r8,56
8000550c:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005510:	fc 19 c0 00 	movh	r9,0xc000
80005514:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80005518:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000551a:	fc 19 c0 20 	movh	r9,0xc020
8000551e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005522:	b2 08       	st.h	r9[0x0],r8
80005524:	33 68       	mov	r8,54
80005526:	ef 68 ff f3 	st.b	r7[-13],r8
8000552a:	37 88       	mov	r8,120
8000552c:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005530:	fc 19 c0 00 	movh	r9,0xc000
80005534:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80005538:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000553a:	fc 19 c0 20 	movh	r9,0xc020
8000553e:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80005542:	b2 08       	st.h	r9[0x0],r8
80005544:	31 d8       	mov	r8,29
80005546:	ef 68 ff f5 	st.b	r7[-11],r8
8000554a:	30 78       	mov	r8,7
8000554c:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005550:	fc 19 c0 00 	movh	r9,0xc000
80005554:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005558:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000555a:	fc 19 c0 20 	movh	r9,0xc020
8000555e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005562:	b2 08       	st.h	r9[0x0],r8
80005564:	31 e8       	mov	r8,30
80005566:	ef 68 ff f7 	st.b	r7[-9],r8
8000556a:	30 08       	mov	r8,0
8000556c:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005570:	fc 19 c0 00 	movh	r9,0xc000
80005574:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005578:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000557a:	fc 19 c0 20 	movh	r9,0xc020
8000557e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80005582:	b2 08       	st.h	r9[0x0],r8
80005584:	31 f8       	mov	r8,31
80005586:	ef 68 ff f9 	st.b	r7[-7],r8
8000558a:	30 48       	mov	r8,4
8000558c:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005590:	fc 19 c0 00 	movh	r9,0xc000
80005594:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80005598:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000559a:	fc 19 c0 20 	movh	r9,0xc020
8000559e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800055a2:	b2 08       	st.h	r9[0x0],r8
800055a4:	32 08       	mov	r8,32
800055a6:	ef 68 ff fb 	st.b	r7[-5],r8
800055aa:	34 08       	mov	r8,64
800055ac:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800055b0:	fc 19 c0 00 	movh	r9,0xc000
800055b4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800055b8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800055ba:	fc 19 c0 20 	movh	r9,0xc020
800055be:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800055c2:	b2 08       	st.h	r9[0x0],r8
800055c4:	34 48       	mov	r8,68
800055c6:	ef 68 ff fd 	st.b	r7[-3],r8
800055ca:	33 88       	mov	r8,56
800055cc:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800055d0:	fc 19 c0 00 	movh	r9,0xc000
800055d4:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800055d8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800055da:	fc 19 c0 20 	movh	r9,0xc020
800055de:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800055e2:	b2 08       	st.h	r9[0x0],r8
800055e4:	34 58       	mov	r8,69
800055e6:	ef 68 ff ff 	st.b	r7[-1],r8
800055ea:	31 28       	mov	r8,18
800055ec:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800055f0:	fc 19 c0 00 	movh	r9,0xc000
800055f4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800055f8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800055fa:	fc 19 c0 20 	movh	r9,0xc020
800055fe:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005602:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL4, 0x00 );
  et024006_WriteRegister( HIMAX_POWERCTRL5, 0x04 );
  et024006_WriteRegister( HIMAX_POWERCTRL6, 0x40 );
  et024006_WriteRegister( HIMAX_VCOMCTRL2, 0x38 );
  et024006_WriteRegister( HIMAX_VCOMCTRL3, 0x12 );
}
80005604:	2f ad       	sub	sp,-24
80005606:	e3 cd 80 80 	ldm	sp++,r7,pc

8000560a <et024006_InterfaceSettings>:
/*! \brief Sets display interface.
 *
 * Configures screen orientation and color mode.
 */
static void et024006_InterfaceSettings(void)
{
8000560a:	eb cd 40 80 	pushm	r7,lr
8000560e:	1a 97       	mov	r7,sp
80005610:	20 1d       	sub	sp,4
80005612:	31 68       	mov	r8,22
80005614:	ef 68 ff ff 	st.b	r7[-1],r8
80005618:	36 88       	mov	r8,104
8000561a:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000561e:	fc 19 c0 00 	movh	r9,0xc000
80005622:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005626:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005628:	fc 19 c0 20 	movh	r9,0xc020
8000562c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005630:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_MEMACCESSCTRL,
    (1 << HIMAX_MX)
    | (1 << HIMAX_MV)
    | (1 << HIMAX_BGR) );

}
80005632:	2f fd       	sub	sp,-4
80005634:	e3 cd 80 80 	ldm	sp++,r7,pc

80005638 <et024006_PowerUp>:
/*! \brief Power up display.
 *
 * Turns on DC/DC converters.
 */
static void et024006_PowerUp(void)
{
80005638:	eb cd 40 8f 	pushm	r0-r3,r7,lr
8000563c:	1a 97       	mov	r7,sp
8000563e:	fa cd 01 24 	sub	sp,sp,292
  cpu_delay_ms( 10, tft_data.cpu_hz );
80005642:	fe f8 07 22 	ld.w	r8,pc[1826]
80005646:	70 09       	ld.w	r9,r8[0x0]
80005648:	30 a8       	mov	r8,10
8000564a:	ef 48 ff 54 	st.w	r7[-172],r8
8000564e:	ef 49 ff 50 	st.w	r7[-176],r9
80005652:	ee f8 ff 54 	ld.w	r8,r7[-172]
80005656:	ef 48 ff 5c 	st.w	r7[-164],r8
8000565a:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000565e:	ef 48 ff 58 	st.w	r7[-168],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005662:	ee f2 ff 5c 	ld.w	r2,r7[-164]
80005666:	30 03       	mov	r3,0
80005668:	ee fa ff 58 	ld.w	r10,r7[-168]
8000566c:	30 0b       	mov	r11,0
8000566e:	e6 0a 02 49 	mul	r9,r3,r10
80005672:	f6 02 02 48 	mul	r8,r11,r2
80005676:	10 09       	add	r9,r8
80005678:	e4 0a 06 4a 	mulu.d	r10,r2,r10
8000567c:	16 09       	add	r9,r11
8000567e:	12 9b       	mov	r11,r9
80005680:	e0 68 03 e7 	mov	r8,999
80005684:	30 09       	mov	r9,0
80005686:	10 0a       	add	r10,r8
80005688:	f6 09 00 4b 	adc	r11,r11,r9
8000568c:	e0 68 03 e8 	mov	r8,1000
80005690:	30 09       	mov	r9,0
80005692:	f0 1f 01 b6 	mcall	80005d68 <et024006_PowerUp+0x730>
80005696:	14 98       	mov	r8,r10
80005698:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000569a:	ef 48 ff 64 	st.w	r7[-156],r8
8000569e:	ee c8 00 ec 	sub	r8,r7,236
800056a2:	ef 48 ff 60 	st.w	r7[-160],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800056a6:	e1 b8 00 42 	mfsr	r8,0x108
800056aa:	10 99       	mov	r9,r8
800056ac:	ee f8 ff 60 	ld.w	r8,r7[-160]
800056b0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800056b2:	ee f8 ff 60 	ld.w	r8,r7[-160]
800056b6:	70 09       	ld.w	r9,r8[0x0]
800056b8:	ee f8 ff 64 	ld.w	r8,r7[-156]
800056bc:	10 09       	add	r9,r8
800056be:	ee f8 ff 60 	ld.w	r8,r7[-160]
800056c2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800056c4:	ee f9 ff 60 	ld.w	r9,r7[-160]
800056c8:	30 08       	mov	r8,0
800056ca:	f3 68 00 08 	st.b	r9[8],r8
800056ce:	ee c8 00 ec 	sub	r8,r7,236
800056d2:	ef 48 ff 68 	st.w	r7[-152],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800056d6:	e1 b8 00 42 	mfsr	r8,0x108
800056da:	ef 48 ff 6c 	st.w	r7[-148],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800056de:	ee f8 ff 68 	ld.w	r8,r7[-152]
800056e2:	f1 39 00 08 	ld.ub	r9,r8[8]
800056e6:	30 28       	mov	r8,2
800056e8:	f0 09 18 00 	cp.b	r9,r8
800056ec:	c0 31       	brne	800056f2 <et024006_PowerUp+0xba>
    return false;
800056ee:	30 08       	mov	r8,0
800056f0:	c4 38       	rjmp	80005776 <et024006_PowerUp+0x13e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800056f2:	ee f8 ff 68 	ld.w	r8,r7[-152]
800056f6:	f1 39 00 08 	ld.ub	r9,r8[8]
800056fa:	30 18       	mov	r8,1
800056fc:	f0 09 18 00 	cp.b	r9,r8
80005700:	c0 31       	brne	80005706 <et024006_PowerUp+0xce>
    return true;
80005702:	30 18       	mov	r8,1
80005704:	c3 98       	rjmp	80005776 <et024006_PowerUp+0x13e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005706:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000570a:	70 09       	ld.w	r9,r8[0x0]
8000570c:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005710:	70 18       	ld.w	r8,r8[0x4]
80005712:	10 39       	cp.w	r9,r8
80005714:	e0 88 00 1a 	brls	80005748 <et024006_PowerUp+0x110>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005718:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000571c:	70 09       	ld.w	r9,r8[0x0]
8000571e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80005722:	12 38       	cp.w	r8,r9
80005724:	c1 02       	brcc	80005744 <et024006_PowerUp+0x10c>
80005726:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000572a:	70 19       	ld.w	r9,r8[0x4]
8000572c:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80005730:	12 38       	cp.w	r8,r9
80005732:	e0 88 00 09 	brls	80005744 <et024006_PowerUp+0x10c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005736:	ee f9 ff 68 	ld.w	r9,r7[-152]
8000573a:	30 18       	mov	r8,1
8000573c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005740:	30 18       	mov	r8,1
80005742:	c1 a8       	rjmp	80005776 <et024006_PowerUp+0x13e>
    }
    return false;
80005744:	30 08       	mov	r8,0
80005746:	c1 88       	rjmp	80005776 <et024006_PowerUp+0x13e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005748:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000574c:	70 09       	ld.w	r9,r8[0x0]
8000574e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80005752:	12 38       	cp.w	r8,r9
80005754:	c0 93       	brcs	80005766 <et024006_PowerUp+0x12e>
80005756:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000575a:	70 19       	ld.w	r9,r8[0x4]
8000575c:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80005760:	12 38       	cp.w	r8,r9
80005762:	e0 88 00 09 	brls	80005774 <et024006_PowerUp+0x13c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005766:	ee f9 ff 68 	ld.w	r9,r7[-152]
8000576a:	30 18       	mov	r8,1
8000576c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005770:	30 18       	mov	r8,1
80005772:	c0 28       	rjmp	80005776 <et024006_PowerUp+0x13e>
    }
    return false;
80005774:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005776:	58 08       	cp.w	r8,0
80005778:	ca b0       	breq	800056ce <et024006_PowerUp+0x96>
8000577a:	31 c8       	mov	r8,28
8000577c:	ef 68 ff 73 	st.b	r7[-141],r8
80005780:	30 48       	mov	r8,4
80005782:	ef 68 ff 72 	st.b	r7[-142],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005786:	fc 19 c0 00 	movh	r9,0xc000
8000578a:	ef 38 ff 73 	ld.ub	r8,r7[-141]
8000578e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005790:	fc 19 c0 20 	movh	r9,0xc020
80005794:	ef 38 ff 72 	ld.ub	r8,r7[-142]
80005798:	b2 08       	st.h	r9[0x0],r8
static void et024006_PowerUp(void)
{
  cpu_delay_ms( 10, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
8000579a:	fe f8 05 ca 	ld.w	r8,pc[1482]
8000579e:	70 09       	ld.w	r9,r8[0x0]
800057a0:	31 48       	mov	r8,20
800057a2:	ef 48 ff 78 	st.w	r7[-136],r8
800057a6:	ef 49 ff 74 	st.w	r7[-140],r9
800057aa:	ee f8 ff 78 	ld.w	r8,r7[-136]
800057ae:	ef 48 ff 80 	st.w	r7[-128],r8
800057b2:	ee f8 ff 74 	ld.w	r8,r7[-140]
800057b6:	ef 48 ff 7c 	st.w	r7[-132],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800057ba:	ee fc ff 80 	ld.w	r12,r7[-128]
800057be:	ef 4c fe e0 	st.w	r7[-288],r12
800057c2:	30 0b       	mov	r11,0
800057c4:	ef 4b fe dc 	st.w	r7[-292],r11
800057c8:	ee f0 ff 7c 	ld.w	r0,r7[-132]
800057cc:	30 01       	mov	r1,0
800057ce:	ee f9 fe dc 	ld.w	r9,r7[-292]
800057d2:	a1 39       	mul	r9,r0
800057d4:	ee fa fe e0 	ld.w	r10,r7[-288]
800057d8:	e2 0a 02 48 	mul	r8,r1,r10
800057dc:	10 09       	add	r9,r8
800057de:	ee f8 fe e0 	ld.w	r8,r7[-288]
800057e2:	f0 00 06 4a 	mulu.d	r10,r8,r0
800057e6:	16 09       	add	r9,r11
800057e8:	12 9b       	mov	r11,r9
800057ea:	e0 68 03 e7 	mov	r8,999
800057ee:	30 09       	mov	r9,0
800057f0:	10 0a       	add	r10,r8
800057f2:	f6 09 00 4b 	adc	r11,r11,r9
800057f6:	e0 68 03 e8 	mov	r8,1000
800057fa:	30 09       	mov	r9,0
800057fc:	f0 1f 01 5b 	mcall	80005d68 <et024006_PowerUp+0x730>
80005800:	14 98       	mov	r8,r10
80005802:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005804:	ef 48 ff 88 	st.w	r7[-120],r8
80005808:	ee c8 00 e0 	sub	r8,r7,224
8000580c:	ef 48 ff 84 	st.w	r7[-124],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005810:	e1 b8 00 42 	mfsr	r8,0x108
80005814:	10 99       	mov	r9,r8
80005816:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000581a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000581c:	ee f8 ff 84 	ld.w	r8,r7[-124]
80005820:	70 09       	ld.w	r9,r8[0x0]
80005822:	ee f8 ff 88 	ld.w	r8,r7[-120]
80005826:	10 09       	add	r9,r8
80005828:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000582c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000582e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80005832:	30 08       	mov	r8,0
80005834:	f3 68 00 08 	st.b	r9[8],r8
80005838:	ee c8 00 e0 	sub	r8,r7,224
8000583c:	ef 48 ff 8c 	st.w	r7[-116],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005840:	e1 b8 00 42 	mfsr	r8,0x108
80005844:	ef 48 ff 90 	st.w	r7[-112],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005848:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000584c:	f1 39 00 08 	ld.ub	r9,r8[8]
80005850:	30 28       	mov	r8,2
80005852:	f0 09 18 00 	cp.b	r9,r8
80005856:	c0 31       	brne	8000585c <et024006_PowerUp+0x224>
    return false;
80005858:	30 08       	mov	r8,0
8000585a:	c4 38       	rjmp	800058e0 <et024006_PowerUp+0x2a8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000585c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005860:	f1 39 00 08 	ld.ub	r9,r8[8]
80005864:	30 18       	mov	r8,1
80005866:	f0 09 18 00 	cp.b	r9,r8
8000586a:	c0 31       	brne	80005870 <et024006_PowerUp+0x238>
    return true;
8000586c:	30 18       	mov	r8,1
8000586e:	c3 98       	rjmp	800058e0 <et024006_PowerUp+0x2a8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005870:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005874:	70 09       	ld.w	r9,r8[0x0]
80005876:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000587a:	70 18       	ld.w	r8,r8[0x4]
8000587c:	10 39       	cp.w	r9,r8
8000587e:	e0 88 00 1a 	brls	800058b2 <et024006_PowerUp+0x27a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005882:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005886:	70 08       	ld.w	r8,r8[0x0]
80005888:	ee f9 ff 90 	ld.w	r9,r7[-112]
8000588c:	10 39       	cp.w	r9,r8
8000588e:	c1 02       	brcc	800058ae <et024006_PowerUp+0x276>
80005890:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005894:	70 18       	ld.w	r8,r8[0x4]
80005896:	ee f9 ff 90 	ld.w	r9,r7[-112]
8000589a:	10 39       	cp.w	r9,r8
8000589c:	e0 88 00 09 	brls	800058ae <et024006_PowerUp+0x276>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800058a0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800058a4:	30 18       	mov	r8,1
800058a6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800058aa:	30 18       	mov	r8,1
800058ac:	c1 a8       	rjmp	800058e0 <et024006_PowerUp+0x2a8>
    }
    return false;
800058ae:	30 08       	mov	r8,0
800058b0:	c1 88       	rjmp	800058e0 <et024006_PowerUp+0x2a8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800058b2:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800058b6:	70 08       	ld.w	r8,r8[0x0]
800058b8:	ee f9 ff 90 	ld.w	r9,r7[-112]
800058bc:	10 39       	cp.w	r9,r8
800058be:	c0 93       	brcs	800058d0 <et024006_PowerUp+0x298>
800058c0:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800058c4:	70 18       	ld.w	r8,r8[0x4]
800058c6:	ee f9 ff 90 	ld.w	r9,r7[-112]
800058ca:	10 39       	cp.w	r9,r8
800058cc:	e0 88 00 09 	brls	800058de <et024006_PowerUp+0x2a6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800058d0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800058d4:	30 18       	mov	r8,1
800058d6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800058da:	30 18       	mov	r8,1
800058dc:	c0 28       	rjmp	800058e0 <et024006_PowerUp+0x2a8>
    }
    return false;
800058de:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800058e0:	58 08       	cp.w	r8,0
800058e2:	ca b0       	breq	80005838 <et024006_PowerUp+0x200>
800058e4:	34 38       	mov	r8,67
800058e6:	ef 68 ff 97 	st.b	r7[-105],r8
800058ea:	38 08       	mov	r8,-128
800058ec:	ef 68 ff 96 	st.b	r7[-106],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800058f0:	fc 19 c0 00 	movh	r9,0xc000
800058f4:	ef 38 ff 97 	ld.ub	r8,r7[-105]
800058f8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800058fa:	fc 19 c0 20 	movh	r9,0xc020
800058fe:	ef 38 ff 96 	ld.ub	r8,r7[-106]
80005902:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
80005904:	fe f8 04 60 	ld.w	r8,pc[1120]
80005908:	70 08       	ld.w	r8,r8[0x0]
8000590a:	30 59       	mov	r9,5
8000590c:	ef 49 ff 9c 	st.w	r7[-100],r9
80005910:	ef 48 ff 98 	st.w	r7[-104],r8
80005914:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80005918:	ef 48 ff a4 	st.w	r7[-92],r8
8000591c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80005920:	ef 48 ff a0 	st.w	r7[-96],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005924:	ee fc ff a4 	ld.w	r12,r7[-92]
80005928:	ef 4c fe f0 	st.w	r7[-272],r12
8000592c:	30 0b       	mov	r11,0
8000592e:	ef 4b fe ec 	st.w	r7[-276],r11
80005932:	ee fa ff a0 	ld.w	r10,r7[-96]
80005936:	ef 4a fe e8 	st.w	r7[-280],r10
8000593a:	30 09       	mov	r9,0
8000593c:	ef 49 fe e4 	st.w	r7[-284],r9
80005940:	ee fa fe ec 	ld.w	r10,r7[-276]
80005944:	ee f8 fe e8 	ld.w	r8,r7[-280]
80005948:	b1 3a       	mul	r10,r8
8000594a:	ee f8 fe e4 	ld.w	r8,r7[-284]
8000594e:	ee fc fe f0 	ld.w	r12,r7[-272]
80005952:	b9 38       	mul	r8,r12
80005954:	10 0a       	add	r10,r8
80005956:	ee fb fe f0 	ld.w	r11,r7[-272]
8000595a:	ee fc fe e8 	ld.w	r12,r7[-280]
8000595e:	f6 0c 06 48 	mulu.d	r8,r11,r12
80005962:	12 0a       	add	r10,r9
80005964:	14 99       	mov	r9,r10
80005966:	e0 6a 03 e7 	mov	r10,999
8000596a:	30 0b       	mov	r11,0
8000596c:	f0 0a 00 0a 	add	r10,r8,r10
80005970:	f2 0b 00 4b 	adc	r11,r9,r11
80005974:	e0 68 03 e8 	mov	r8,1000
80005978:	30 09       	mov	r9,0
8000597a:	f0 1f 00 fc 	mcall	80005d68 <et024006_PowerUp+0x730>
8000597e:	14 98       	mov	r8,r10
80005980:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005982:	ef 48 ff ac 	st.w	r7[-84],r8
80005986:	ee c8 00 d4 	sub	r8,r7,212
8000598a:	ef 48 ff a8 	st.w	r7[-88],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000598e:	e1 b8 00 42 	mfsr	r8,0x108
80005992:	10 99       	mov	r9,r8
80005994:	ee f8 ff a8 	ld.w	r8,r7[-88]
80005998:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000599a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000599e:	70 09       	ld.w	r9,r8[0x0]
800059a0:	ee f8 ff ac 	ld.w	r8,r7[-84]
800059a4:	10 09       	add	r9,r8
800059a6:	ee f8 ff a8 	ld.w	r8,r7[-88]
800059aa:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800059ac:	ee f9 ff a8 	ld.w	r9,r7[-88]
800059b0:	30 08       	mov	r8,0
800059b2:	f3 68 00 08 	st.b	r9[8],r8
800059b6:	ee c8 00 d4 	sub	r8,r7,212
800059ba:	ef 48 ff b0 	st.w	r7[-80],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800059be:	e1 b8 00 42 	mfsr	r8,0x108
800059c2:	ef 48 ff b4 	st.w	r7[-76],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800059c6:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059ca:	f1 39 00 08 	ld.ub	r9,r8[8]
800059ce:	30 28       	mov	r8,2
800059d0:	f0 09 18 00 	cp.b	r9,r8
800059d4:	c0 31       	brne	800059da <et024006_PowerUp+0x3a2>
    return false;
800059d6:	30 08       	mov	r8,0
800059d8:	c4 38       	rjmp	80005a5e <et024006_PowerUp+0x426>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800059da:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059de:	f1 39 00 08 	ld.ub	r9,r8[8]
800059e2:	30 18       	mov	r8,1
800059e4:	f0 09 18 00 	cp.b	r9,r8
800059e8:	c0 31       	brne	800059ee <et024006_PowerUp+0x3b6>
    return true;
800059ea:	30 18       	mov	r8,1
800059ec:	c3 98       	rjmp	80005a5e <et024006_PowerUp+0x426>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800059ee:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059f2:	70 09       	ld.w	r9,r8[0x0]
800059f4:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059f8:	70 18       	ld.w	r8,r8[0x4]
800059fa:	10 39       	cp.w	r9,r8
800059fc:	e0 88 00 1a 	brls	80005a30 <et024006_PowerUp+0x3f8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005a00:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a04:	70 08       	ld.w	r8,r8[0x0]
80005a06:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005a0a:	10 39       	cp.w	r9,r8
80005a0c:	c1 02       	brcc	80005a2c <et024006_PowerUp+0x3f4>
80005a0e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a12:	70 18       	ld.w	r8,r8[0x4]
80005a14:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005a18:	10 39       	cp.w	r9,r8
80005a1a:	e0 88 00 09 	brls	80005a2c <et024006_PowerUp+0x3f4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005a1e:	ee f9 ff b0 	ld.w	r9,r7[-80]
80005a22:	30 18       	mov	r8,1
80005a24:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005a28:	30 18       	mov	r8,1
80005a2a:	c1 a8       	rjmp	80005a5e <et024006_PowerUp+0x426>
    }
    return false;
80005a2c:	30 08       	mov	r8,0
80005a2e:	c1 88       	rjmp	80005a5e <et024006_PowerUp+0x426>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005a30:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a34:	70 08       	ld.w	r8,r8[0x0]
80005a36:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005a3a:	10 39       	cp.w	r9,r8
80005a3c:	c0 93       	brcs	80005a4e <et024006_PowerUp+0x416>
80005a3e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a42:	70 18       	ld.w	r8,r8[0x4]
80005a44:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005a48:	10 39       	cp.w	r9,r8
80005a4a:	e0 88 00 09 	brls	80005a5c <et024006_PowerUp+0x424>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005a4e:	ee f9 ff b0 	ld.w	r9,r7[-80]
80005a52:	30 18       	mov	r8,1
80005a54:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005a58:	30 18       	mov	r8,1
80005a5a:	c0 28       	rjmp	80005a5e <et024006_PowerUp+0x426>
    }
    return false;
80005a5c:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005a5e:	58 08       	cp.w	r8,0
80005a60:	ca b0       	breq	800059b6 <et024006_PowerUp+0x37e>
80005a62:	31 b8       	mov	r8,27
80005a64:	ef 68 ff bb 	st.b	r7[-69],r8
80005a68:	30 88       	mov	r8,8
80005a6a:	ef 68 ff ba 	st.b	r7[-70],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005a6e:	fc 19 c0 00 	movh	r9,0xc000
80005a72:	ef 38 ff bb 	ld.ub	r8,r7[-69]
80005a76:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005a78:	fc 19 c0 20 	movh	r9,0xc020
80005a7c:	ef 38 ff ba 	ld.ub	r8,r7[-70]
80005a80:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_DK) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
80005a82:	fe f8 02 e2 	ld.w	r8,pc[738]
80005a86:	70 08       	ld.w	r8,r8[0x0]
80005a88:	32 89       	mov	r9,40
80005a8a:	ef 49 ff c0 	st.w	r7[-64],r9
80005a8e:	ef 48 ff bc 	st.w	r7[-68],r8
80005a92:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005a96:	ef 48 ff c8 	st.w	r7[-56],r8
80005a9a:	ee f8 ff bc 	ld.w	r8,r7[-68]
80005a9e:	ef 48 ff c4 	st.w	r7[-60],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005aa2:	ee fb ff c8 	ld.w	r11,r7[-56]
80005aa6:	ef 4b ff 00 	st.w	r7[-256],r11
80005aaa:	30 0a       	mov	r10,0
80005aac:	ef 4a fe fc 	st.w	r7[-260],r10
80005ab0:	ee f9 ff c4 	ld.w	r9,r7[-60]
80005ab4:	ef 49 fe f8 	st.w	r7[-264],r9
80005ab8:	30 08       	mov	r8,0
80005aba:	ef 48 fe f4 	st.w	r7[-268],r8
80005abe:	ee fa fe fc 	ld.w	r10,r7[-260]
80005ac2:	ee fc fe f8 	ld.w	r12,r7[-264]
80005ac6:	b9 3a       	mul	r10,r12
80005ac8:	ee f8 fe f4 	ld.w	r8,r7[-268]
80005acc:	ee fb ff 00 	ld.w	r11,r7[-256]
80005ad0:	b7 38       	mul	r8,r11
80005ad2:	10 0a       	add	r10,r8
80005ad4:	ee fc ff 00 	ld.w	r12,r7[-256]
80005ad8:	ee fb fe f8 	ld.w	r11,r7[-264]
80005adc:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005ae0:	12 0a       	add	r10,r9
80005ae2:	14 99       	mov	r9,r10
80005ae4:	e0 6a 03 e7 	mov	r10,999
80005ae8:	30 0b       	mov	r11,0
80005aea:	f0 0a 00 0a 	add	r10,r8,r10
80005aee:	f2 0b 00 4b 	adc	r11,r9,r11
80005af2:	e0 68 03 e8 	mov	r8,1000
80005af6:	30 09       	mov	r9,0
80005af8:	f0 1f 00 9c 	mcall	80005d68 <et024006_PowerUp+0x730>
80005afc:	14 98       	mov	r8,r10
80005afe:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005b00:	ef 48 ff d0 	st.w	r7[-48],r8
80005b04:	ee c8 00 c8 	sub	r8,r7,200
80005b08:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005b0c:	e1 b8 00 42 	mfsr	r8,0x108
80005b10:	10 99       	mov	r9,r8
80005b12:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005b16:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005b18:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005b1c:	70 09       	ld.w	r9,r8[0x0]
80005b1e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005b22:	10 09       	add	r9,r8
80005b24:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005b28:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005b2a:	ee f9 ff cc 	ld.w	r9,r7[-52]
80005b2e:	30 08       	mov	r8,0
80005b30:	f3 68 00 08 	st.b	r9[8],r8
80005b34:	ee c8 00 c8 	sub	r8,r7,200
80005b38:	ef 48 ff d4 	st.w	r7[-44],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005b3c:	e1 b8 00 42 	mfsr	r8,0x108
80005b40:	ef 48 ff d8 	st.w	r7[-40],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005b44:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b48:	f1 39 00 08 	ld.ub	r9,r8[8]
80005b4c:	30 28       	mov	r8,2
80005b4e:	f0 09 18 00 	cp.b	r9,r8
80005b52:	c0 31       	brne	80005b58 <et024006_PowerUp+0x520>
    return false;
80005b54:	30 08       	mov	r8,0
80005b56:	c4 38       	rjmp	80005bdc <et024006_PowerUp+0x5a4>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005b58:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b5c:	f1 39 00 08 	ld.ub	r9,r8[8]
80005b60:	30 18       	mov	r8,1
80005b62:	f0 09 18 00 	cp.b	r9,r8
80005b66:	c0 31       	brne	80005b6c <et024006_PowerUp+0x534>
    return true;
80005b68:	30 18       	mov	r8,1
80005b6a:	c3 98       	rjmp	80005bdc <et024006_PowerUp+0x5a4>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005b6c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b70:	70 09       	ld.w	r9,r8[0x0]
80005b72:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b76:	70 18       	ld.w	r8,r8[0x4]
80005b78:	10 39       	cp.w	r9,r8
80005b7a:	e0 88 00 1a 	brls	80005bae <et024006_PowerUp+0x576>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005b7e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b82:	70 08       	ld.w	r8,r8[0x0]
80005b84:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005b88:	10 39       	cp.w	r9,r8
80005b8a:	c1 02       	brcc	80005baa <et024006_PowerUp+0x572>
80005b8c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b90:	70 18       	ld.w	r8,r8[0x4]
80005b92:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005b96:	10 39       	cp.w	r9,r8
80005b98:	e0 88 00 09 	brls	80005baa <et024006_PowerUp+0x572>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005b9c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005ba0:	30 18       	mov	r8,1
80005ba2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005ba6:	30 18       	mov	r8,1
80005ba8:	c1 a8       	rjmp	80005bdc <et024006_PowerUp+0x5a4>
    }
    return false;
80005baa:	30 08       	mov	r8,0
80005bac:	c1 88       	rjmp	80005bdc <et024006_PowerUp+0x5a4>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005bae:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005bb2:	70 08       	ld.w	r8,r8[0x0]
80005bb4:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005bb8:	10 39       	cp.w	r9,r8
80005bba:	c0 93       	brcs	80005bcc <et024006_PowerUp+0x594>
80005bbc:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005bc0:	70 18       	ld.w	r8,r8[0x4]
80005bc2:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005bc6:	10 39       	cp.w	r9,r8
80005bc8:	e0 88 00 09 	brls	80005bda <et024006_PowerUp+0x5a2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005bcc:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005bd0:	30 18       	mov	r8,1
80005bd2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005bd6:	30 18       	mov	r8,1
80005bd8:	c0 28       	rjmp	80005bdc <et024006_PowerUp+0x5a4>
    }
    return false;
80005bda:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005bdc:	58 08       	cp.w	r8,0
80005bde:	ca b0       	breq	80005b34 <et024006_PowerUp+0x4fc>
80005be0:	31 b8       	mov	r8,27
80005be2:	ef 68 ff df 	st.b	r7[-33],r8
80005be6:	31 08       	mov	r8,16
80005be8:	ef 68 ff de 	st.b	r7[-34],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005bec:	fc 19 c0 00 	movh	r9,0xc000
80005bf0:	ef 38 ff df 	ld.ub	r8,r7[-33]
80005bf4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005bf6:	fc 19 c0 20 	movh	r9,0xc020
80005bfa:	ef 38 ff de 	ld.ub	r8,r7[-34]
80005bfe:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_PON) );

  // In case the et024006_DisplayOn function is called right after
  cpu_delay_ms( 40, tft_data.cpu_hz );
80005c00:	4d 98       	lddpc	r8,80005d64 <et024006_PowerUp+0x72c>
80005c02:	70 08       	ld.w	r8,r8[0x0]
80005c04:	32 89       	mov	r9,40
80005c06:	ef 49 ff e4 	st.w	r7[-28],r9
80005c0a:	ef 48 ff e0 	st.w	r7[-32],r8
80005c0e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005c12:	ef 48 ff ec 	st.w	r7[-20],r8
80005c16:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005c1a:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005c1e:	ee fa ff ec 	ld.w	r10,r7[-20]
80005c22:	ef 4a ff 10 	st.w	r7[-240],r10
80005c26:	30 09       	mov	r9,0
80005c28:	ef 49 ff 0c 	st.w	r7[-244],r9
80005c2c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005c30:	ef 48 ff 08 	st.w	r7[-248],r8
80005c34:	30 0c       	mov	r12,0
80005c36:	ef 4c ff 04 	st.w	r7[-252],r12
80005c3a:	ee fa ff 0c 	ld.w	r10,r7[-244]
80005c3e:	ee fb ff 08 	ld.w	r11,r7[-248]
80005c42:	b7 3a       	mul	r10,r11
80005c44:	ee f8 ff 04 	ld.w	r8,r7[-252]
80005c48:	ee f9 ff 10 	ld.w	r9,r7[-240]
80005c4c:	b3 38       	mul	r8,r9
80005c4e:	10 0a       	add	r10,r8
80005c50:	ee fc ff 10 	ld.w	r12,r7[-240]
80005c54:	ee fb ff 08 	ld.w	r11,r7[-248]
80005c58:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005c5c:	12 0a       	add	r10,r9
80005c5e:	14 99       	mov	r9,r10
80005c60:	e0 6a 03 e7 	mov	r10,999
80005c64:	30 0b       	mov	r11,0
80005c66:	f0 0a 00 0a 	add	r10,r8,r10
80005c6a:	f2 0b 00 4b 	adc	r11,r9,r11
80005c6e:	e0 68 03 e8 	mov	r8,1000
80005c72:	30 09       	mov	r9,0
80005c74:	f0 1f 00 3d 	mcall	80005d68 <et024006_PowerUp+0x730>
80005c78:	14 98       	mov	r8,r10
80005c7a:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005c7c:	ef 48 ff f4 	st.w	r7[-12],r8
80005c80:	ee c8 00 bc 	sub	r8,r7,188
80005c84:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005c88:	e1 b8 00 42 	mfsr	r8,0x108
80005c8c:	10 99       	mov	r9,r8
80005c8e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005c92:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005c94:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005c98:	70 09       	ld.w	r9,r8[0x0]
80005c9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005c9e:	10 09       	add	r9,r8
80005ca0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005ca4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005ca6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005caa:	30 08       	mov	r8,0
80005cac:	f3 68 00 08 	st.b	r9[8],r8
80005cb0:	ee c8 00 bc 	sub	r8,r7,188
80005cb4:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005cb8:	e1 b8 00 42 	mfsr	r8,0x108
80005cbc:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005cc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cc4:	f1 39 00 08 	ld.ub	r9,r8[8]
80005cc8:	30 28       	mov	r8,2
80005cca:	f0 09 18 00 	cp.b	r9,r8
80005cce:	c0 31       	brne	80005cd4 <et024006_PowerUp+0x69c>
    return false;
80005cd0:	30 08       	mov	r8,0
80005cd2:	c4 38       	rjmp	80005d58 <et024006_PowerUp+0x720>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005cd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cd8:	f1 39 00 08 	ld.ub	r9,r8[8]
80005cdc:	30 18       	mov	r8,1
80005cde:	f0 09 18 00 	cp.b	r9,r8
80005ce2:	c0 31       	brne	80005ce8 <et024006_PowerUp+0x6b0>
    return true;
80005ce4:	30 18       	mov	r8,1
80005ce6:	c3 98       	rjmp	80005d58 <et024006_PowerUp+0x720>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005ce8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cec:	70 09       	ld.w	r9,r8[0x0]
80005cee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cf2:	70 18       	ld.w	r8,r8[0x4]
80005cf4:	10 39       	cp.w	r9,r8
80005cf6:	e0 88 00 1a 	brls	80005d2a <et024006_PowerUp+0x6f2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005cfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cfe:	70 08       	ld.w	r8,r8[0x0]
80005d00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d04:	10 39       	cp.w	r9,r8
80005d06:	c1 02       	brcc	80005d26 <et024006_PowerUp+0x6ee>
80005d08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d0c:	70 18       	ld.w	r8,r8[0x4]
80005d0e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d12:	10 39       	cp.w	r9,r8
80005d14:	e0 88 00 09 	brls	80005d26 <et024006_PowerUp+0x6ee>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005d18:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005d1c:	30 18       	mov	r8,1
80005d1e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005d22:	30 18       	mov	r8,1
80005d24:	c1 a8       	rjmp	80005d58 <et024006_PowerUp+0x720>
    }
    return false;
80005d26:	30 08       	mov	r8,0
80005d28:	c1 88       	rjmp	80005d58 <et024006_PowerUp+0x720>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005d2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d2e:	70 08       	ld.w	r8,r8[0x0]
80005d30:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d34:	10 39       	cp.w	r9,r8
80005d36:	c0 93       	brcs	80005d48 <et024006_PowerUp+0x710>
80005d38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d3c:	70 18       	ld.w	r8,r8[0x4]
80005d3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d42:	10 39       	cp.w	r9,r8
80005d44:	e0 88 00 09 	brls	80005d56 <et024006_PowerUp+0x71e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005d48:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005d4c:	30 18       	mov	r8,1
80005d4e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005d52:	30 18       	mov	r8,1
80005d54:	c0 28       	rjmp	80005d58 <et024006_PowerUp+0x720>
    }
    return false;
80005d56:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005d58:	58 08       	cp.w	r8,0
80005d5a:	ca b0       	breq	80005cb0 <et024006_PowerUp+0x678>
}
80005d5c:	2b 7d       	sub	sp,-292
80005d5e:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005d62:	00 00       	add	r0,r0
80005d64:	00 00       	add	r0,r0
80005d66:	06 30       	cp.w	r0,r3
80005d68:	80 00       	ld.sh	r0,r0[0x0]
80005d6a:	e3 fc eb cd 	st.wqs	r1[0x734],r12

80005d6c <et024006_PowerOn>:


/*! \brief Turns the display on.
 */
static void et024006_PowerOn( void )
{
80005d6c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005d70:	1a 97       	mov	r7,sp
80005d72:	21 9d       	sub	sp,100
80005d74:	32 6c       	mov	r12,38
80005d76:	ef 6c ff b7 	st.b	r7[-73],r12
80005d7a:	30 4c       	mov	r12,4
80005d7c:	ef 6c ff b6 	st.b	r7[-74],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005d80:	fc 1e c0 00 	movh	lr,0xc000
80005d84:	ef 3c ff b7 	ld.ub	r12,r7[-73]
80005d88:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005d8a:	fc 1e c0 20 	movh	lr,0xc020
80005d8e:	ef 3c ff b6 	ld.ub	r12,r7[-74]
80005d92:	bc 0c       	st.h	lr[0x0],r12
 */
static void et024006_PowerOn( void )
{
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_D0) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
80005d94:	fe fc 02 e0 	ld.w	r12,pc[736]
80005d98:	78 0c       	ld.w	r12,r12[0x0]
80005d9a:	32 8e       	mov	lr,40
80005d9c:	ef 4e ff bc 	st.w	r7[-68],lr
80005da0:	ef 4c ff b8 	st.w	r7[-72],r12
80005da4:	ee fc ff bc 	ld.w	r12,r7[-68]
80005da8:	ef 4c ff c4 	st.w	r7[-60],r12
80005dac:	ee fc ff b8 	ld.w	r12,r7[-72]
80005db0:	ef 4c ff c0 	st.w	r7[-64],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005db4:	ee fa ff c4 	ld.w	r10,r7[-60]
80005db8:	30 0b       	mov	r11,0
80005dba:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005dbe:	30 09       	mov	r9,0
80005dc0:	f6 08 02 4c 	mul	r12,r11,r8
80005dc4:	f2 0a 02 4e 	mul	lr,r9,r10
80005dc8:	1c 0c       	add	r12,lr
80005dca:	f4 08 06 48 	mulu.d	r8,r10,r8
80005dce:	12 0c       	add	r12,r9
80005dd0:	18 99       	mov	r9,r12
80005dd2:	e0 6a 03 e7 	mov	r10,999
80005dd6:	30 0b       	mov	r11,0
80005dd8:	f0 0a 00 0a 	add	r10,r8,r10
80005ddc:	f2 0b 00 4b 	adc	r11,r9,r11
80005de0:	e0 68 03 e8 	mov	r8,1000
80005de4:	30 09       	mov	r9,0
80005de6:	f0 1f 00 a5 	mcall	80006078 <et024006_PowerOn+0x30c>
80005dea:	14 98       	mov	r8,r10
80005dec:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005dee:	ef 48 ff cc 	st.w	r7[-52],r8
80005df2:	ee c8 00 64 	sub	r8,r7,100
80005df6:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005dfa:	e1 b8 00 42 	mfsr	r8,0x108
80005dfe:	10 99       	mov	r9,r8
80005e00:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005e04:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005e06:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005e0a:	70 09       	ld.w	r9,r8[0x0]
80005e0c:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005e10:	10 09       	add	r9,r8
80005e12:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005e16:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005e18:	ee f9 ff c8 	ld.w	r9,r7[-56]
80005e1c:	30 08       	mov	r8,0
80005e1e:	f3 68 00 08 	st.b	r9[8],r8
80005e22:	ee c8 00 64 	sub	r8,r7,100
80005e26:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005e2a:	e1 b8 00 42 	mfsr	r8,0x108
80005e2e:	ef 48 ff d4 	st.w	r7[-44],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005e32:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e36:	f1 39 00 08 	ld.ub	r9,r8[8]
80005e3a:	30 28       	mov	r8,2
80005e3c:	f0 09 18 00 	cp.b	r9,r8
80005e40:	c0 31       	brne	80005e46 <et024006_PowerOn+0xda>
    return false;
80005e42:	30 08       	mov	r8,0
80005e44:	c4 38       	rjmp	80005eca <et024006_PowerOn+0x15e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005e46:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e4a:	f1 39 00 08 	ld.ub	r9,r8[8]
80005e4e:	30 18       	mov	r8,1
80005e50:	f0 09 18 00 	cp.b	r9,r8
80005e54:	c0 31       	brne	80005e5a <et024006_PowerOn+0xee>
    return true;
80005e56:	30 18       	mov	r8,1
80005e58:	c3 98       	rjmp	80005eca <et024006_PowerOn+0x15e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005e5a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e5e:	70 09       	ld.w	r9,r8[0x0]
80005e60:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e64:	70 18       	ld.w	r8,r8[0x4]
80005e66:	10 39       	cp.w	r9,r8
80005e68:	e0 88 00 1a 	brls	80005e9c <et024006_PowerOn+0x130>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005e6c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e70:	70 08       	ld.w	r8,r8[0x0]
80005e72:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005e76:	10 39       	cp.w	r9,r8
80005e78:	c1 02       	brcc	80005e98 <et024006_PowerOn+0x12c>
80005e7a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005e7e:	70 18       	ld.w	r8,r8[0x4]
80005e80:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005e84:	10 39       	cp.w	r9,r8
80005e86:	e0 88 00 09 	brls	80005e98 <et024006_PowerOn+0x12c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005e8a:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005e8e:	30 18       	mov	r8,1
80005e90:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005e94:	30 18       	mov	r8,1
80005e96:	c1 a8       	rjmp	80005eca <et024006_PowerOn+0x15e>
    }
    return false;
80005e98:	30 08       	mov	r8,0
80005e9a:	c1 88       	rjmp	80005eca <et024006_PowerOn+0x15e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005e9c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005ea0:	70 08       	ld.w	r8,r8[0x0]
80005ea2:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005ea6:	10 39       	cp.w	r9,r8
80005ea8:	c0 93       	brcs	80005eba <et024006_PowerOn+0x14e>
80005eaa:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005eae:	70 18       	ld.w	r8,r8[0x4]
80005eb0:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005eb4:	10 39       	cp.w	r9,r8
80005eb6:	e0 88 00 09 	brls	80005ec8 <et024006_PowerOn+0x15c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005eba:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005ebe:	30 18       	mov	r8,1
80005ec0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005ec4:	30 18       	mov	r8,1
80005ec6:	c0 28       	rjmp	80005eca <et024006_PowerOn+0x15e>
    }
    return false;
80005ec8:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005eca:	58 08       	cp.w	r8,0
80005ecc:	ca b0       	breq	80005e22 <et024006_PowerOn+0xb6>
80005ece:	32 68       	mov	r8,38
80005ed0:	ef 68 ff d9 	st.b	r7[-39],r8
80005ed4:	32 48       	mov	r8,36
80005ed6:	ef 68 ff d8 	st.b	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005eda:	fc 19 c0 00 	movh	r9,0xc000
80005ede:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80005ee2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005ee4:	fc 19 c0 20 	movh	r9,0xc020
80005ee8:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80005eec:	b2 08       	st.h	r9[0x0],r8
80005eee:	32 68       	mov	r8,38
80005ef0:	ef 68 ff db 	st.b	r7[-37],r8
80005ef4:	32 c8       	mov	r8,44
80005ef6:	ef 68 ff da 	st.b	r7[-38],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005efa:	fc 19 c0 00 	movh	r9,0xc000
80005efe:	ef 38 ff db 	ld.ub	r8,r7[-37]
80005f02:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005f04:	fc 19 c0 20 	movh	r9,0xc020
80005f08:	ef 38 ff da 	ld.ub	r8,r7[-38]
80005f0c:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D0) );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  cpu_delay_ms( 40, tft_data.cpu_hz );
80005f0e:	4d a8       	lddpc	r8,80006074 <et024006_PowerOn+0x308>
80005f10:	70 08       	ld.w	r8,r8[0x0]
80005f12:	32 89       	mov	r9,40
80005f14:	ef 49 ff e0 	st.w	r7[-32],r9
80005f18:	ef 48 ff dc 	st.w	r7[-36],r8
80005f1c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005f20:	ef 48 ff e8 	st.w	r7[-24],r8
80005f24:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005f28:	ef 48 ff e4 	st.w	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005f2c:	ee f0 ff e8 	ld.w	r0,r7[-24]
80005f30:	30 01       	mov	r1,0
80005f32:	ee f2 ff e4 	ld.w	r2,r7[-28]
80005f36:	30 03       	mov	r3,0
80005f38:	e2 02 02 4a 	mul	r10,r1,r2
80005f3c:	e6 00 02 48 	mul	r8,r3,r0
80005f40:	10 0a       	add	r10,r8
80005f42:	e0 02 06 48 	mulu.d	r8,r0,r2
80005f46:	12 0a       	add	r10,r9
80005f48:	14 99       	mov	r9,r10
80005f4a:	e0 6a 03 e7 	mov	r10,999
80005f4e:	30 0b       	mov	r11,0
80005f50:	f0 0a 00 0a 	add	r10,r8,r10
80005f54:	f2 0b 00 4b 	adc	r11,r9,r11
80005f58:	e0 68 03 e8 	mov	r8,1000
80005f5c:	30 09       	mov	r9,0
80005f5e:	f0 1f 00 47 	mcall	80006078 <et024006_PowerOn+0x30c>
80005f62:	14 98       	mov	r8,r10
80005f64:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005f66:	ef 48 ff f0 	st.w	r7[-16],r8
80005f6a:	ee c8 00 58 	sub	r8,r7,88
80005f6e:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005f72:	e1 b8 00 42 	mfsr	r8,0x108
80005f76:	10 99       	mov	r9,r8
80005f78:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005f7c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005f7e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005f82:	70 09       	ld.w	r9,r8[0x0]
80005f84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f88:	10 09       	add	r9,r8
80005f8a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005f8e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005f90:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005f94:	30 08       	mov	r8,0
80005f96:	f3 68 00 08 	st.b	r9[8],r8
80005f9a:	ee c8 00 58 	sub	r8,r7,88
80005f9e:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005fa2:	e1 b8 00 42 	mfsr	r8,0x108
80005fa6:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005faa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fae:	f1 39 00 08 	ld.ub	r9,r8[8]
80005fb2:	30 28       	mov	r8,2
80005fb4:	f0 09 18 00 	cp.b	r9,r8
80005fb8:	c0 31       	brne	80005fbe <et024006_PowerOn+0x252>
    return false;
80005fba:	30 08       	mov	r8,0
80005fbc:	c4 38       	rjmp	80006042 <et024006_PowerOn+0x2d6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005fbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fc2:	f1 39 00 08 	ld.ub	r9,r8[8]
80005fc6:	30 18       	mov	r8,1
80005fc8:	f0 09 18 00 	cp.b	r9,r8
80005fcc:	c0 31       	brne	80005fd2 <et024006_PowerOn+0x266>
    return true;
80005fce:	30 18       	mov	r8,1
80005fd0:	c3 98       	rjmp	80006042 <et024006_PowerOn+0x2d6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005fd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fd6:	70 09       	ld.w	r9,r8[0x0]
80005fd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fdc:	70 18       	ld.w	r8,r8[0x4]
80005fde:	10 39       	cp.w	r9,r8
80005fe0:	e0 88 00 1a 	brls	80006014 <et024006_PowerOn+0x2a8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005fe4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fe8:	70 08       	ld.w	r8,r8[0x0]
80005fea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005fee:	10 39       	cp.w	r9,r8
80005ff0:	c1 02       	brcc	80006010 <et024006_PowerOn+0x2a4>
80005ff2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005ff6:	70 18       	ld.w	r8,r8[0x4]
80005ff8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005ffc:	10 39       	cp.w	r9,r8
80005ffe:	e0 88 00 09 	brls	80006010 <et024006_PowerOn+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006002:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006006:	30 18       	mov	r8,1
80006008:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000600c:	30 18       	mov	r8,1
8000600e:	c1 a8       	rjmp	80006042 <et024006_PowerOn+0x2d6>
    }
    return false;
80006010:	30 08       	mov	r8,0
80006012:	c1 88       	rjmp	80006042 <et024006_PowerOn+0x2d6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006014:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006018:	70 08       	ld.w	r8,r8[0x0]
8000601a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000601e:	10 39       	cp.w	r9,r8
80006020:	c0 93       	brcs	80006032 <et024006_PowerOn+0x2c6>
80006022:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006026:	70 18       	ld.w	r8,r8[0x4]
80006028:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000602c:	10 39       	cp.w	r9,r8
8000602e:	e0 88 00 09 	brls	80006040 <et024006_PowerOn+0x2d4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006032:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006036:	30 18       	mov	r8,1
80006038:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000603c:	30 18       	mov	r8,1
8000603e:	c0 28       	rjmp	80006042 <et024006_PowerOn+0x2d6>
    }
    return false;
80006040:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006042:	58 08       	cp.w	r8,0
80006044:	ca b0       	breq	80005f9a <et024006_PowerOn+0x22e>
80006046:	32 68       	mov	r8,38
80006048:	ef 68 ff ff 	st.b	r7[-1],r8
8000604c:	33 c8       	mov	r8,60
8000604e:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80006052:	fc 19 c0 00 	movh	r9,0xc000
80006056:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000605a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000605c:	fc 19 c0 20 	movh	r9,0xc020
80006060:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006064:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON)| (1 << HIMAX_DTE) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  et024006_SetRegister( HIMAX_INTERNAL28, (1 << HIMAX_TEON) );
80006066:	30 8b       	mov	r11,8
80006068:	37 0c       	mov	r12,112
8000606a:	f0 1f 00 05 	mcall	8000607c <et024006_PowerOn+0x310>
}
8000606e:	2e 7d       	sub	sp,-100
80006070:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80006074:	00 00       	add	r0,r0
80006076:	06 30       	cp.w	r0,r3
80006078:	80 00       	ld.sh	r0,r0[0x0]
8000607a:	e3 fc 80 00 	ld.wls	r12,r1[0x0]
8000607e:	4b 84       	lddpc	r4,8000615c <sd_mmc_mci_get_csd+0x24>

80006080 <is_sd_mmc_mci_card_present>:


//_____ D E F I N I T I O N S ______________________________________________

bool is_sd_mmc_mci_card_present(uint8_t slot)
{
80006080:	eb cd 40 80 	pushm	r7,lr
80006084:	1a 97       	mov	r7,sp
80006086:	20 1d       	sub	sp,4
80006088:	18 98       	mov	r8,r12
8000608a:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
8000608e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006092:	30 18       	mov	r8,1
80006094:	f0 09 18 00 	cp.b	r9,r8
80006098:	e0 88 00 04 	brls	800060a0 <is_sd_mmc_mci_card_present+0x20>
    return false;
8000609c:	30 08       	mov	r8,0
8000609e:	c1 88       	rjmp	800060ce <is_sd_mmc_mci_card_present+0x4e>

  switch(slot)
800060a0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800060a4:	58 08       	cp.w	r8,0
800060a6:	c0 b0       	breq	800060bc <is_sd_mmc_mci_card_present+0x3c>
800060a8:	58 18       	cp.w	r8,1
800060aa:	c1 11       	brne	800060cc <is_sd_mmc_mci_card_present+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_CARD_DETECT)==SD_SLOT_4BITS_CARD_DETECT_VALUE);
800060ac:	32 8c       	mov	r12,40
800060ae:	f0 1f 00 0b 	mcall	800060d8 <is_sd_mmc_mci_card_present+0x58>
800060b2:	18 98       	mov	r8,r12
800060b4:	58 08       	cp.w	r8,0
800060b6:	5f 08       	sreq	r8
800060b8:	5c 58       	castu.b	r8
800060ba:	c0 a8       	rjmp	800060ce <is_sd_mmc_mci_card_present+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_CARD_DETECT)==SD_SLOT_8BITS_CARD_DETECT_VALUE);
800060bc:	32 bc       	mov	r12,43
800060be:	f0 1f 00 07 	mcall	800060d8 <is_sd_mmc_mci_card_present+0x58>
800060c2:	18 98       	mov	r8,r12
800060c4:	58 08       	cp.w	r8,0
800060c6:	5f 08       	sreq	r8
800060c8:	5c 58       	castu.b	r8
800060ca:	c0 28       	rjmp	800060ce <is_sd_mmc_mci_card_present+0x4e>
  }

  return false;
800060cc:	30 08       	mov	r8,0
}
800060ce:	10 9c       	mov	r12,r8
800060d0:	2f fd       	sub	sp,-4
800060d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800060d6:	00 00       	add	r0,r0
800060d8:	80 00       	ld.sh	r0,r0[0x0]
800060da:	8c 10       	ld.sh	r0,r6[0x2]

800060dc <is_sd_mmc_mci_card_protected>:

bool is_sd_mmc_mci_card_protected(uint8_t slot)
{
800060dc:	eb cd 40 80 	pushm	r7,lr
800060e0:	1a 97       	mov	r7,sp
800060e2:	20 1d       	sub	sp,4
800060e4:	18 98       	mov	r8,r12
800060e6:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
800060ea:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800060ee:	30 18       	mov	r8,1
800060f0:	f0 09 18 00 	cp.b	r9,r8
800060f4:	e0 88 00 04 	brls	800060fc <is_sd_mmc_mci_card_protected+0x20>
    return false;
800060f8:	30 08       	mov	r8,0
800060fa:	c1 88       	rjmp	8000612a <is_sd_mmc_mci_card_protected+0x4e>

  switch(slot)
800060fc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006100:	58 08       	cp.w	r8,0
80006102:	c0 b0       	breq	80006118 <is_sd_mmc_mci_card_protected+0x3c>
80006104:	58 18       	cp.w	r8,1
80006106:	c1 11       	brne	80006128 <is_sd_mmc_mci_card_protected+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_WRITE_PROTECT)==SD_SLOT_4BITS_WRITE_PROTECT_VALUE);
80006108:	32 6c       	mov	r12,38
8000610a:	f0 1f 00 0b 	mcall	80006134 <is_sd_mmc_mci_card_protected+0x58>
8000610e:	18 98       	mov	r8,r12
80006110:	58 18       	cp.w	r8,1
80006112:	5f 08       	sreq	r8
80006114:	5c 58       	castu.b	r8
80006116:	c0 a8       	rjmp	8000612a <is_sd_mmc_mci_card_protected+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_WRITE_PROTECT)==SD_SLOT_8BITS_WRITE_PROTECT_VALUE);
80006118:	36 cc       	mov	r12,108
8000611a:	f0 1f 00 07 	mcall	80006134 <is_sd_mmc_mci_card_protected+0x58>
8000611e:	18 98       	mov	r8,r12
80006120:	58 18       	cp.w	r8,1
80006122:	5f 08       	sreq	r8
80006124:	5c 58       	castu.b	r8
80006126:	c0 28       	rjmp	8000612a <is_sd_mmc_mci_card_protected+0x4e>
  }

  return false;
80006128:	30 08       	mov	r8,0
}
8000612a:	10 9c       	mov	r12,r8
8000612c:	2f fd       	sub	sp,-4
8000612e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006132:	00 00       	add	r0,r0
80006134:	80 00       	ld.sh	r0,r0[0x0]
80006136:	8c 10       	ld.sh	r0,r6[0x2]

80006138 <sd_mmc_mci_get_csd>:

static bool  sd_mmc_mci_get_csd(uint8_t slot)
{
80006138:	eb cd 40 80 	pushm	r7,lr
8000613c:	1a 97       	mov	r7,sp
8000613e:	20 fd       	sub	sp,60
80006140:	18 98       	mov	r8,r12
80006142:	ef 68 ff c4 	st.b	r7[-60],r8

  uint32_t max_Read_DataBlock_Length;
  uint32_t mult;
  uint32_t blocknr;
  uint8_t tmp;
  const uint16_t freq_unit[4] = {10, 100, 1000, 10000};
80006146:	fe f9 02 b2 	ld.w	r9,pc[690]
8000614a:	ee c8 00 28 	sub	r8,r7,40
8000614e:	30 8a       	mov	r10,8
80006150:	12 9b       	mov	r11,r9
80006152:	10 9c       	mov	r12,r8
80006154:	f0 1f 00 aa 	mcall	800063fc <sd_mmc_mci_get_csd+0x2c4>
  const uint8_t mult_fact[16] = {0, 10, 12, 13, 15, 20, 26, 30, 35, 40, 45, 52, 55, 60, 70, 80}; // MMC tabs...
80006158:	fe f8 02 a8 	ld.w	r8,pc[680]
8000615c:	ee ca 00 38 	sub	r10,r7,56
80006160:	10 9b       	mov	r11,r8
80006162:	f6 e8 00 00 	ld.d	r8,r11[0]
80006166:	f4 e9 00 00 	st.d	r10[0],r8
8000616a:	f6 e8 00 08 	ld.d	r8,r11[8]
8000616e:	f4 e9 00 08 	st.d	r10[8],r8

  if (slot > MCI_LAST_SLOTS)
80006172:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006176:	30 18       	mov	r8,1
80006178:	f0 09 18 00 	cp.b	r9,r8
8000617c:	e0 88 00 04 	brls	80006184 <sd_mmc_mci_get_csd+0x4c>
    return false;
80006180:	30 08       	mov	r8,0
80006182:	c3 69       	rjmp	800063ee <sd_mmc_mci_get_csd+0x2b6>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006184:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006188:	fe f9 02 7c 	ld.w	r9,pc[636]
8000618c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006190:	10 9a       	mov	r10,r8
80006192:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006196:	fe f8 02 72 	ld.w	r8,pc[626]
8000619a:	70 08       	ld.w	r8,r8[0x0]
8000619c:	12 9b       	mov	r11,r9
8000619e:	10 9c       	mov	r12,r8
800061a0:	f0 1f 00 9b 	mcall	8000640c <sd_mmc_mci_get_csd+0x2d4>

  //-- (CMD9)
  if (mci_send_cmd(mci, SD_MMC_SEND_CSD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800061a4:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800061a8:	fe f8 02 68 	ld.w	r8,pc[616]
800061ac:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800061b0:	fe f8 02 58 	ld.w	r8,pc[600]
800061b4:	70 08       	ld.w	r8,r8[0x0]
800061b6:	12 9a       	mov	r10,r9
800061b8:	e0 6b 10 89 	mov	r11,4233
800061bc:	10 9c       	mov	r12,r8
800061be:	f0 1f 00 96 	mcall	80006414 <sd_mmc_mci_get_csd+0x2dc>
800061c2:	18 98       	mov	r8,r12
800061c4:	58 08       	cp.w	r8,0
800061c6:	c0 30       	breq	800061cc <sd_mmc_mci_get_csd+0x94>
    return false;
800061c8:	30 08       	mov	r8,0
800061ca:	c1 29       	rjmp	800063ee <sd_mmc_mci_get_csd+0x2b6>


  csd.csd[0] = mci_read_response(mci);
800061cc:	fe f8 02 3c 	ld.w	r8,pc[572]
800061d0:	70 08       	ld.w	r8,r8[0x0]
800061d2:	10 9c       	mov	r12,r8
800061d4:	f0 1f 00 91 	mcall	80006418 <sd_mmc_mci_get_csd+0x2e0>
800061d8:	18 98       	mov	r8,r12
800061da:	ef 48 ff e0 	st.w	r7[-32],r8
  csd.csd[1] = mci_read_response(mci);
800061de:	fe f8 02 2a 	ld.w	r8,pc[554]
800061e2:	70 08       	ld.w	r8,r8[0x0]
800061e4:	10 9c       	mov	r12,r8
800061e6:	f0 1f 00 8d 	mcall	80006418 <sd_mmc_mci_get_csd+0x2e0>
800061ea:	18 98       	mov	r8,r12
800061ec:	ef 48 ff e4 	st.w	r7[-28],r8
  csd.csd[2] = mci_read_response(mci);
800061f0:	fe f8 02 18 	ld.w	r8,pc[536]
800061f4:	70 08       	ld.w	r8,r8[0x0]
800061f6:	10 9c       	mov	r12,r8
800061f8:	f0 1f 00 88 	mcall	80006418 <sd_mmc_mci_get_csd+0x2e0>
800061fc:	18 98       	mov	r8,r12
800061fe:	ef 48 ff e8 	st.w	r7[-24],r8
  csd.csd[3] = mci_read_response(mci);
80006202:	fe f8 02 06 	ld.w	r8,pc[518]
80006206:	70 08       	ld.w	r8,r8[0x0]
80006208:	10 9c       	mov	r12,r8
8000620a:	f0 1f 00 84 	mcall	80006418 <sd_mmc_mci_get_csd+0x2e0>
8000620e:	18 98       	mov	r8,r12
80006210:	ef 48 ff ec 	st.w	r7[-20],r8

  //-- Read "System specification version", only available on MMC card
  // field: SPEC_VERS (only on MMC)
  if (MMC_CARD & g_card_type[slot]) // TO BE ADDED
80006214:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006218:	fe f9 02 04 	ld.w	r9,pc[516]
8000621c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006220:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006224:	5c 58       	castu.b	r8
80006226:	c1 40       	breq	8000624e <sd_mmc_mci_get_csd+0x116>
  {
    if (CSD_SPEC_VER_4_0 == (MSB0(csd.csd[0]) & CSD_MSK_SPEC_VER))
80006228:	ee c8 00 20 	sub	r8,r7,32
8000622c:	11 88       	ld.ub	r8,r8[0x0]
8000622e:	e2 18 00 3c 	andl	r8,0x3c,COH
80006232:	59 08       	cp.w	r8,16
80006234:	c0 d1       	brne	8000624e <sd_mmc_mci_get_csd+0x116>
    {
      g_card_type[slot] |= MMC_CARD_V4;
80006236:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000623a:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8000623e:	4f 8a       	lddpc	r10,8000641c <sd_mmc_mci_get_csd+0x2e4>
80006240:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006244:	a3 a8       	sbr	r8,0x2
80006246:	5c 58       	castu.b	r8
80006248:	4f 5a       	lddpc	r10,8000641c <sd_mmc_mci_get_csd+0x2e4>
8000624a:	f4 09 0b 08 	st.b	r10[r9],r8
    }
  }

  //-- Compute MMC/SD speed
  // field: TRAN_SPEED (CSD V1 & V2 are the same)
  g_card_freq[slot]  = mult_fact[csd.csd_v1.tranSpeed >> 3]; // Get Multiplier factor
8000624e:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80006252:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80006256:	a3 98       	lsr	r8,0x3
80006258:	5c 58       	castu.b	r8
8000625a:	ee 08 00 08 	add	r8,r7,r8
8000625e:	f1 38 ff c8 	ld.ub	r8,r8[-56]
80006262:	4f 09       	lddpc	r9,80006420 <sd_mmc_mci_get_csd+0x2e8>
80006264:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  if (SD_CARD & g_card_type[slot])
80006268:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8000626c:	4e c9       	lddpc	r9,8000641c <sd_mmc_mci_get_csd+0x2e4>
8000626e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006272:	e2 18 00 02 	andl	r8,0x2,COH
80006276:	c2 00       	breq	800062b6 <sd_mmc_mci_get_csd+0x17e>
  {
    // SD card don't have same frequency that MMC card
    if( 26 == g_card_freq[slot] )
80006278:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000627c:	4e 98       	lddpc	r8,80006420 <sd_mmc_mci_get_csd+0x2e8>
8000627e:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80006282:	31 a8       	mov	r8,26
80006284:	f0 09 19 00 	cp.h	r9,r8
80006288:	c0 81       	brne	80006298 <sd_mmc_mci_get_csd+0x160>
    {
      g_card_freq[slot] = 25;
8000628a:	ef 3a ff c4 	ld.ub	r10,r7[-60]
8000628e:	4e 59       	lddpc	r9,80006420 <sd_mmc_mci_get_csd+0x2e8>
80006290:	31 98       	mov	r8,25
80006292:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
80006296:	c1 08       	rjmp	800062b6 <sd_mmc_mci_get_csd+0x17e>
    }
    else if( 52 == g_card_freq[slot] )
80006298:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000629c:	4e 18       	lddpc	r8,80006420 <sd_mmc_mci_get_csd+0x2e8>
8000629e:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800062a2:	33 48       	mov	r8,52
800062a4:	f0 09 19 00 	cp.h	r9,r8
800062a8:	c0 71       	brne	800062b6 <sd_mmc_mci_get_csd+0x17e>
    {
      g_card_freq[slot] = 50;
800062aa:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800062ae:	4d d9       	lddpc	r9,80006420 <sd_mmc_mci_get_csd+0x2e8>
800062b0:	33 28       	mov	r8,50
800062b2:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
    }
  }
  g_card_freq[slot] *= freq_unit[ csd.csd_v1.tranSpeed&0x07 ]; // Get transfer rate unit
800062b6:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800062ba:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800062be:	4d 98       	lddpc	r8,80006420 <sd_mmc_mci_get_csd+0x2e8>
800062c0:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800062c4:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800062c8:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800062cc:	a1 78       	lsl	r8,0x1
800062ce:	ee 08 00 08 	add	r8,r7,r8
800062d2:	f1 08 ff d8 	ld.sh	r8,r8[-40]
800062d6:	f2 08 02 48 	mul	r8,r9,r8
800062da:	5c 88       	casts.h	r8
800062dc:	4d 19       	lddpc	r9,80006420 <sd_mmc_mci_get_csd+0x2e8>
800062de:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

  //-- Compute card size in number of block
  // field: WRITE_BL_LEN, READ_BL_LEN, C_SIZE (CSD V1 & V2 are not the same)
  if (SD_CARD_HC & g_card_type[slot])
800062e2:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800062e6:	4c e9       	lddpc	r9,8000641c <sd_mmc_mci_get_csd+0x2e4>
800062e8:	f2 08 07 08 	ld.ub	r8,r9[r8]
800062ec:	e2 18 00 10 	andl	r8,0x10,COH
800062f0:	c2 10       	breq	80006332 <sd_mmc_mci_get_csd+0x1fa>
  {
    g_card_size[slot] = (csd.csd_v2.deviceSizeH<<16)+(csd.csd_v2.deviceSizeL&0xFFff);
800062f2:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800062f6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800062fa:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800062fe:	5c 58       	castu.b	r8
80006300:	f0 0a 15 10 	lsl	r10,r8,0x10
80006304:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80006308:	5c 78       	castu.h	r8
8000630a:	f4 08 00 08 	add	r8,r10,r8
8000630e:	10 9a       	mov	r10,r8
80006310:	4c 58       	lddpc	r8,80006424 <sd_mmc_mci_get_csd+0x2ec>
80006312:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

    // memory capacity = (C_SIZE+1) * 1K sector
    g_card_size[slot] = (g_card_size[slot] + 1) << 10;  // unit 512B
80006316:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000631a:	ef 3a ff c4 	ld.ub	r10,r7[-60]
8000631e:	4c 28       	lddpc	r8,80006424 <sd_mmc_mci_get_csd+0x2ec>
80006320:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80006324:	2f f8       	sub	r8,-1
80006326:	f0 0a 15 0a 	lsl	r10,r8,0xa
8000632a:	4b f8       	lddpc	r8,80006424 <sd_mmc_mci_get_csd+0x2ec>
8000632c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80006330:	c5 e8       	rjmp	800063ec <sd_mmc_mci_get_csd+0x2b4>
  }
  else
  {
    // Check block size
    tmp = csd.csd_v1.writeBlLen; // WRITE_BL_LEN
80006332:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006336:	f1 d8 c2 c4 	bfextu	r8,r8,0x16,0x4
8000633a:	5c 58       	castu.b	r8
8000633c:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
80006340:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006344:	30 88       	mov	r8,8
80006346:	f0 09 18 00 	cp.b	r9,r8
8000634a:	e0 8b 00 04 	brhi	80006352 <sd_mmc_mci_get_csd+0x21a>
      return false;  // block size < 512B not supported by firmware
8000634e:	30 08       	mov	r8,0
80006350:	c4 f8       	rjmp	800063ee <sd_mmc_mci_get_csd+0x2b6>

    tmp = csd.csd_v1.readBlLen; // READ_BL_LEN
80006352:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006356:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
8000635a:	5c 58       	castu.b	r8
8000635c:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
80006360:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006364:	30 88       	mov	r8,8
80006366:	f0 09 18 00 	cp.b	r9,r8
8000636a:	e0 8b 00 04 	brhi	80006372 <sd_mmc_mci_get_csd+0x23a>
      return false;  // block size < 512B not supported by firmware
8000636e:	30 08       	mov	r8,0
80006370:	c3 f8       	rjmp	800063ee <sd_mmc_mci_get_csd+0x2b6>

    //// Compute Memory Capacity
    // compute MULT
    mult = 1 << (csd.csd_v1.cSizeMult + 2);
80006372:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006376:	f1 d8 c1 e3 	bfextu	r8,r8,0xf,0x3
8000637a:	5c 58       	castu.b	r8
8000637c:	2f e8       	sub	r8,-2
8000637e:	30 19       	mov	r9,1
80006380:	f2 08 09 48 	lsl	r8,r9,r8
80006384:	ef 48 ff f4 	st.w	r7[-12],r8
    max_Read_DataBlock_Length = 1<<csd.csd_v1.readBlLen;
80006388:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000638c:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
80006390:	5c 58       	castu.b	r8
80006392:	30 19       	mov	r9,1
80006394:	f2 08 09 48 	lsl	r8,r9,r8
80006398:	ef 48 ff f0 	st.w	r7[-16],r8
    // compute MSB of C_SIZE
    blocknr = csd.csd_v1.deviceSizeH << 2;
8000639c:	ee f8 ff e4 	ld.w	r8,r7[-28]
800063a0:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
800063a4:	5c 88       	casts.h	r8
800063a6:	5c 78       	castu.h	r8
800063a8:	a3 68       	lsl	r8,0x2
800063aa:	ef 48 ff f8 	st.w	r7[-8],r8
    // compute MULT * (LSB of C-SIZE + MSB already computed + 1) = BLOCKNR
    blocknr = mult * ( blocknr + csd.csd_v1.deviceSizeL + 1 );
800063ae:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063b2:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
800063b6:	5c 58       	castu.b	r8
800063b8:	10 99       	mov	r9,r8
800063ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063be:	f2 08 00 08 	add	r8,r9,r8
800063c2:	f0 c9 ff ff 	sub	r9,r8,-1
800063c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800063ca:	f2 08 02 48 	mul	r8,r9,r8
800063ce:	ef 48 ff f8 	st.w	r7[-8],r8
    g_card_size[slot] = ((max_Read_DataBlock_Length * blocknr)/512);
800063d2:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800063d6:	ee fa ff f0 	ld.w	r10,r7[-16]
800063da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063de:	f4 08 02 48 	mul	r8,r10,r8
800063e2:	f0 0a 16 09 	lsr	r10,r8,0x9
800063e6:	49 08       	lddpc	r8,80006424 <sd_mmc_mci_get_csd+0x2ec>
800063e8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  }

  return true;
800063ec:	30 18       	mov	r8,1
}
800063ee:	10 9c       	mov	r12,r8
800063f0:	2f 1d       	sub	sp,-60
800063f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800063f6:	00 00       	add	r0,r0
800063f8:	80 00       	ld.sh	r0,r0[0x0]
800063fa:	eb b4       	*unknown*
800063fc:	80 00       	ld.sh	r0,r0[0x0]
800063fe:	e6 8e 80 00 	brqs	800d63fe <Stored_values_flash+0x965fe>
80006402:	eb bc       	*unknown*
80006404:	00 00       	add	r0,r0
80006406:	0d b8       	ld.ub	r8,r6[0x3]
80006408:	00 00       	add	r0,r0
8000640a:	01 34       	ld.ub	r4,r0++
8000640c:	80 00       	ld.sh	r0,r0[0x0]
8000640e:	93 7c       	st.w	r9[0x1c],r12
80006410:	00 00       	add	r0,r0
80006412:	0b a8       	ld.ub	r8,r5[0x2]
80006414:	80 00       	ld.sh	r0,r0[0x0]
80006416:	91 e4       	st.w	r8[0x38],r4
80006418:	80 00       	ld.sh	r0,r0[0x0]
8000641a:	93 1c       	st.w	r9[0x4],r12
8000641c:	00 00       	add	r0,r0
8000641e:	0f c0       	ld.ub	r0,r7[0x4]
80006420:	00 00       	add	r0,r0
80006422:	0d ba       	ld.ub	r10,r6[0x3]
80006424:	00 00       	add	r0,r0
80006426:	0b b0       	ld.ub	r0,r5[0x3]

80006428 <sd_mmc_get_ext_csd>:

static bool  sd_mmc_get_ext_csd( uint8_t slot )
{
80006428:	eb cd 40 80 	pushm	r7,lr
8000642c:	1a 97       	mov	r7,sp
8000642e:	20 ad       	sub	sp,40
80006430:	18 98       	mov	r8,r12
80006432:	ef 68 ff d8 	st.b	r7[-40],r8
  uint8_t  i;
  uint32_t val;

  if (slot > MCI_LAST_SLOTS)
80006436:	ef 39 ff d8 	ld.ub	r9,r7[-40]
8000643a:	30 18       	mov	r8,1
8000643c:	f0 09 18 00 	cp.b	r9,r8
80006440:	e0 88 00 04 	brls	80006448 <sd_mmc_get_ext_csd+0x20>
    return false;
80006444:	30 08       	mov	r8,0
80006446:	cb e8       	rjmp	800065c2 <sd_mmc_get_ext_csd+0x19a>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006448:	ef 38 ff d8 	ld.ub	r8,r7[-40]
8000644c:	4e 09       	lddpc	r9,800065cc <sd_mmc_get_ext_csd+0x1a4>
8000644e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006452:	10 9a       	mov	r10,r8
80006454:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006458:	4d e8       	lddpc	r8,800065d0 <sd_mmc_get_ext_csd+0x1a8>
8000645a:	70 08       	ld.w	r8,r8[0x0]
8000645c:	12 9b       	mov	r11,r9
8000645e:	10 9c       	mov	r12,r8
80006460:	f0 1f 00 5d 	mcall	800065d4 <sd_mmc_get_ext_csd+0x1ac>

  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE); // Ext CSD = 512B size
80006464:	4d b8       	lddpc	r8,800065d0 <sd_mmc_get_ext_csd+0x1a8>
80006466:	70 08       	ld.w	r8,r8[0x0]
80006468:	e0 6b 02 00 	mov	r11,512
8000646c:	10 9c       	mov	r12,r8
8000646e:	f0 1f 00 5b 	mcall	800065d8 <sd_mmc_get_ext_csd+0x1b0>
  mci_set_block_count(mci, 1);
80006472:	4d 88       	lddpc	r8,800065d0 <sd_mmc_get_ext_csd+0x1a8>
80006474:	70 08       	ld.w	r8,r8[0x0]
80006476:	30 1b       	mov	r11,1
80006478:	10 9c       	mov	r12,r8
8000647a:	f0 1f 00 59 	mcall	800065dc <sd_mmc_get_ext_csd+0x1b4>

  //** (CMD8)
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
8000647e:	4d 58       	lddpc	r8,800065d0 <sd_mmc_get_ext_csd+0x1a8>
80006480:	70 08       	ld.w	r8,r8[0x0]
80006482:	30 0a       	mov	r10,0
80006484:	e4 7b 10 48 	mov	r11,331848
80006488:	10 9c       	mov	r12,r8
8000648a:	f0 1f 00 56 	mcall	800065e0 <sd_mmc_get_ext_csd+0x1b8>
8000648e:	18 98       	mov	r8,r12
80006490:	58 08       	cp.w	r8,0
80006492:	c0 30       	breq	80006498 <sd_mmc_get_ext_csd+0x70>
    return false;
80006494:	30 08       	mov	r8,0
80006496:	c9 68       	rjmp	800065c2 <sd_mmc_get_ext_csd+0x19a>

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
80006498:	34 08       	mov	r8,64
8000649a:	ef 68 ff e3 	st.b	r7[-29],r8
8000649e:	c8 a8       	rjmp	800065b2 <sd_mmc_get_ext_csd+0x18a>
  {
    while(!(mci_rx_ready(mci)));
800064a0:	4c c8       	lddpc	r8,800065d0 <sd_mmc_get_ext_csd+0x1a8>
800064a2:	70 08       	ld.w	r8,r8[0x0]
800064a4:	ef 48 ff e4 	st.w	r7[-28],r8
800064a8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800064ac:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800064b0:	4c d8       	lddpc	r8,800065e4 <sd_mmc_get_ext_csd+0x1bc>
800064b2:	70 08       	ld.w	r8,r8[0x0]
800064b4:	10 99       	mov	r9,r8
800064b6:	e6 19 01 e0 	andh	r9,0x1e0,COH
800064ba:	ee f8 ff e8 	ld.w	r8,r7[-24]
800064be:	71 08       	ld.w	r8,r8[0x40]
800064c0:	f3 e8 10 08 	or	r8,r9,r8
800064c4:	10 99       	mov	r9,r8
800064c6:	4c 88       	lddpc	r8,800065e4 <sd_mmc_get_ext_csd+0x1bc>
800064c8:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800064ca:	4c 78       	lddpc	r8,800065e4 <sd_mmc_get_ext_csd+0x1bc>
800064cc:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
800064ce:	e2 18 00 02 	andl	r8,0x2,COH
800064d2:	5f 18       	srne	r8
800064d4:	58 08       	cp.w	r8,0
800064d6:	ce 50       	breq	800064a0 <sd_mmc_get_ext_csd+0x78>
    mci_rd_data(mci);
800064d8:	4b e8       	lddpc	r8,800065d0 <sd_mmc_get_ext_csd+0x1a8>
800064da:	70 08       	ld.w	r8,r8[0x0]
800064dc:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
800064e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800064e4:	70 c8       	ld.w	r8,r8[0x30]
    while(!(mci_rx_ready(mci)));
800064e6:	4b b8       	lddpc	r8,800065d0 <sd_mmc_get_ext_csd+0x1a8>
800064e8:	70 08       	ld.w	r8,r8[0x0]
800064ea:	ef 48 ff f0 	st.w	r7[-16],r8
800064ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800064f2:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800064f6:	4b c8       	lddpc	r8,800065e4 <sd_mmc_get_ext_csd+0x1bc>
800064f8:	70 08       	ld.w	r8,r8[0x0]
800064fa:	10 99       	mov	r9,r8
800064fc:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006500:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006504:	71 08       	ld.w	r8,r8[0x40]
80006506:	f3 e8 10 08 	or	r8,r9,r8
8000650a:	10 99       	mov	r9,r8
8000650c:	4b 68       	lddpc	r8,800065e4 <sd_mmc_get_ext_csd+0x1bc>
8000650e:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006510:	4b 58       	lddpc	r8,800065e4 <sd_mmc_get_ext_csd+0x1bc>
80006512:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006514:	e2 18 00 02 	andl	r8,0x2,COH
80006518:	5f 18       	srne	r8
8000651a:	58 08       	cp.w	r8,0
8000651c:	ce 50       	breq	800064e6 <sd_mmc_get_ext_csd+0xbe>
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
8000651e:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80006522:	32 68       	mov	r8,38
80006524:	f0 09 18 00 	cp.b	r9,r8
80006528:	c1 c1       	brne	80006560 <sd_mmc_get_ext_csd+0x138>
8000652a:	ef 38 ff d8 	ld.ub	r8,r7[-40]
8000652e:	4a f9       	lddpc	r9,800065e8 <sd_mmc_get_ext_csd+0x1c0>
80006530:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006534:	e2 18 00 20 	andl	r8,0x20,COH
80006538:	c1 40       	breq	80006560 <sd_mmc_get_ext_csd+0x138>
    {
      // If MMC HC then read Sector Count. Byte 212 is LSB, Byte 215 is MSB.
      val = mci_rd_data(mci);
8000653a:	4a 68       	lddpc	r8,800065d0 <sd_mmc_get_ext_csd+0x1a8>
8000653c:	70 08       	ld.w	r8,r8[0x0]
8000653e:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006542:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006546:	70 c8       	ld.w	r8,r8[0x30]
80006548:	ef 48 ff dc 	st.w	r7[-36],r8
      g_card_size[slot] = swap32(val);
8000654c:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006550:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006554:	5c b8       	swap.b	r8
80006556:	10 9a       	mov	r10,r8
80006558:	4a 58       	lddpc	r8,800065ec <sd_mmc_get_ext_csd+0x1c4>
8000655a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  for (i = (512L/8); i!=0; i--)
  {
    while(!(mci_rx_ready(mci)));
    mci_rd_data(mci);
    while(!(mci_rx_ready(mci)));
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
8000655e:	c2 58       	rjmp	800065a8 <sd_mmc_get_ext_csd+0x180>
      val = mci_rd_data(mci);
      g_card_size[slot] = swap32(val);
    }
    else
    {
      val = mci_rd_data(mci);
80006560:	49 c8       	lddpc	r8,800065d0 <sd_mmc_get_ext_csd+0x1a8>
80006562:	70 08       	ld.w	r8,r8[0x0]
80006564:	ef 48 ff fc 	st.w	r7[-4],r8
80006568:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000656c:	70 c8       	ld.w	r8,r8[0x30]
8000656e:	ef 48 ff dc 	st.w	r7[-36],r8
      if( (64-24) == i )
80006572:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80006576:	32 88       	mov	r8,40
80006578:	f0 09 18 00 	cp.b	r9,r8
8000657c:	c1 61       	brne	800065a8 <sd_mmc_get_ext_csd+0x180>
      {  // Read byte at offset 196
        if( MSB0(val) & 0x02 )
8000657e:	ee c8 00 24 	sub	r8,r7,36
80006582:	11 88       	ld.ub	r8,r8[0x0]
80006584:	e2 18 00 02 	andl	r8,0x2,COH
80006588:	c0 90       	breq	8000659a <sd_mmc_get_ext_csd+0x172>
          g_card_freq[slot] = 52*1000;
8000658a:	ef 3a ff d8 	ld.ub	r10,r7[-40]
8000658e:	49 99       	lddpc	r9,800065f0 <sd_mmc_get_ext_csd+0x1c8>
80006590:	fe 78 cb 20 	mov	r8,-13536
80006594:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
80006598:	c0 88       	rjmp	800065a8 <sd_mmc_get_ext_csd+0x180>
        else
          g_card_freq[slot] = 26*1000;
8000659a:	ef 3a ff d8 	ld.ub	r10,r7[-40]
8000659e:	49 59       	lddpc	r9,800065f0 <sd_mmc_get_ext_csd+0x1c8>
800065a0:	e0 68 65 90 	mov	r8,26000
800065a4:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
    return false;

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
800065a8:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800065ac:	20 18       	sub	r8,1
800065ae:	ef 68 ff e3 	st.b	r7[-29],r8
800065b2:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800065b6:	30 08       	mov	r8,0
800065b8:	f0 09 18 00 	cp.b	r9,r8
800065bc:	fe 91 ff 72 	brne	800064a0 <sd_mmc_get_ext_csd+0x78>
          g_card_freq[slot] = 26*1000;
      }
    }
  }

   return true;
800065c0:	30 18       	mov	r8,1
}
800065c2:	10 9c       	mov	r12,r8
800065c4:	2f 6d       	sub	sp,-40
800065c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800065ca:	00 00       	add	r0,r0
800065cc:	00 00       	add	r0,r0
800065ce:	0d b8       	ld.ub	r8,r6[0x3]
800065d0:	00 00       	add	r0,r0
800065d2:	01 34       	ld.ub	r4,r0++
800065d4:	80 00       	ld.sh	r0,r0[0x0]
800065d6:	93 7c       	st.w	r9[0x1c],r12
800065d8:	80 00       	ld.sh	r0,r0[0x0]
800065da:	91 64       	st.w	r8[0x18],r4
800065dc:	80 00       	ld.sh	r0,r0[0x0]
800065de:	91 ae       	st.w	r8[0x28],lr
800065e0:	80 00       	ld.sh	r0,r0[0x0]
800065e2:	91 e4       	st.w	r8[0x38],r4
800065e4:	00 00       	add	r0,r0
800065e6:	07 68       	ld.uh	r8,--r3
800065e8:	00 00       	add	r0,r0
800065ea:	0f c0       	ld.ub	r0,r7[0x4]
800065ec:	00 00       	add	r0,r0
800065ee:	0b b0       	ld.ub	r0,r5[0x3]
800065f0:	00 00       	add	r0,r0
800065f2:	0d ba       	ld.ub	r10,r6[0x3]

800065f4 <sd_mmc_set_block_len>:

static bool  sd_mmc_set_block_len(uint8_t slot, uint16_t length )
{
800065f4:	eb cd 40 80 	pushm	r7,lr
800065f8:	1a 97       	mov	r7,sp
800065fa:	20 2d       	sub	sp,8
800065fc:	18 99       	mov	r9,r12
800065fe:	16 98       	mov	r8,r11
80006600:	ef 69 ff fc 	st.b	r7[-4],r9
80006604:	ef 58 ff f8 	st.h	r7[-8],r8
  if (slot > MCI_LAST_SLOTS)
80006608:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000660c:	30 18       	mov	r8,1
8000660e:	f0 09 18 00 	cp.b	r9,r8
80006612:	e0 88 00 04 	brls	8000661a <sd_mmc_set_block_len+0x26>
    return false;
80006616:	30 08       	mov	r8,0
80006618:	c3 c8       	rjmp	80006690 <sd_mmc_set_block_len+0x9c>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000661a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000661e:	49 f9       	lddpc	r9,80006698 <sd_mmc_set_block_len+0xa4>
80006620:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006624:	10 9a       	mov	r10,r8
80006626:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000662a:	49 d8       	lddpc	r8,8000669c <sd_mmc_set_block_len+0xa8>
8000662c:	70 08       	ld.w	r8,r8[0x0]
8000662e:	12 9b       	mov	r11,r9
80006630:	10 9c       	mov	r12,r8
80006632:	f0 1f 00 1c 	mcall	800066a0 <sd_mmc_set_block_len+0xac>

  if(mci_send_cmd(mci, SD_MMC_SET_BLOCKLEN_CMD, length)!=MCI_SUCCESS)
80006636:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8000663a:	49 98       	lddpc	r8,8000669c <sd_mmc_set_block_len+0xa8>
8000663c:	70 08       	ld.w	r8,r8[0x0]
8000663e:	12 9a       	mov	r10,r9
80006640:	e0 6b 10 50 	mov	r11,4176
80006644:	10 9c       	mov	r12,r8
80006646:	f0 1f 00 18 	mcall	800066a4 <sd_mmc_set_block_len+0xb0>
8000664a:	18 98       	mov	r8,r12
8000664c:	58 08       	cp.w	r8,0
8000664e:	c0 30       	breq	80006654 <sd_mmc_set_block_len+0x60>
    return false;
80006650:	30 08       	mov	r8,0
80006652:	c1 f8       	rjmp	80006690 <sd_mmc_set_block_len+0x9c>

  // check response, card must be in TRAN state
  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
80006654:	49 28       	lddpc	r8,8000669c <sd_mmc_set_block_len+0xa8>
80006656:	70 08       	ld.w	r8,r8[0x0]
80006658:	10 9c       	mov	r12,r8
8000665a:	f0 1f 00 14 	mcall	800066a8 <sd_mmc_set_block_len+0xb4>
8000665e:	18 98       	mov	r8,r12
80006660:	e4 18 e0 02 	andh	r8,0xe002
80006664:	e0 18 0e 00 	andl	r8,0xe00
80006668:	e0 48 08 00 	cp.w	r8,2048
8000666c:	c0 30       	breq	80006672 <sd_mmc_set_block_len+0x7e>
    return false;
8000666e:	30 08       	mov	r8,0
80006670:	c1 08       	rjmp	80006690 <sd_mmc_set_block_len+0x9c>

  mci_set_block_size(mci, length);
80006672:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80006676:	48 a8       	lddpc	r8,8000669c <sd_mmc_set_block_len+0xa8>
80006678:	70 08       	ld.w	r8,r8[0x0]
8000667a:	12 9b       	mov	r11,r9
8000667c:	10 9c       	mov	r12,r8
8000667e:	f0 1f 00 0c 	mcall	800066ac <sd_mmc_set_block_len+0xb8>
  mci_set_block_count(mci, 1);
80006682:	48 78       	lddpc	r8,8000669c <sd_mmc_set_block_len+0xa8>
80006684:	70 08       	ld.w	r8,r8[0x0]
80006686:	30 1b       	mov	r11,1
80006688:	10 9c       	mov	r12,r8
8000668a:	f0 1f 00 0a 	mcall	800066b0 <sd_mmc_set_block_len+0xbc>
  return true;
8000668e:	30 18       	mov	r8,1
}
80006690:	10 9c       	mov	r12,r8
80006692:	2f ed       	sub	sp,-8
80006694:	e3 cd 80 80 	ldm	sp++,r7,pc
80006698:	00 00       	add	r0,r0
8000669a:	0d b8       	ld.ub	r8,r6[0x3]
8000669c:	00 00       	add	r0,r0
8000669e:	01 34       	ld.ub	r4,r0++
800066a0:	80 00       	ld.sh	r0,r0[0x0]
800066a2:	93 7c       	st.w	r9[0x1c],r12
800066a4:	80 00       	ld.sh	r0,r0[0x0]
800066a6:	91 e4       	st.w	r8[0x38],r4
800066a8:	80 00       	ld.sh	r0,r0[0x0]
800066aa:	93 1c       	st.w	r9[0x4],r12
800066ac:	80 00       	ld.sh	r0,r0[0x0]
800066ae:	91 64       	st.w	r8[0x18],r4
800066b0:	80 00       	ld.sh	r0,r0[0x0]
800066b2:	91 ae       	st.w	r8[0x28],lr

800066b4 <sd_mmc_mci_init>:

bool sd_mmc_mci_init(unsigned char card_slot, long pbb_hz, long cpu_hz)
{
800066b4:	eb cd 40 80 	pushm	r7,lr
800066b8:	1a 97       	mov	r7,sp
800066ba:	20 5d       	sub	sp,20
800066bc:	18 98       	mov	r8,r12
800066be:	ef 4b ff f0 	st.w	r7[-16],r11
800066c2:	ef 4a ff ec 	st.w	r7[-20],r10
800066c6:	ef 68 ff f4 	st.b	r7[-12],r8
    unsigned long                 scfg;
    avr32_hmatrix_scfg_t          SCFG;
  } u_avr32_hmatrix_scfg;

  // For the USBB DMA HMATRIX master, use infinite length burst.
  u_avr32_hmatrix_mcfg.mcfg = AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
800066ca:	fe 68 10 00 	mov	r8,-126976
800066ce:	70 68       	ld.w	r8,r8[0x18]
800066d0:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_hmatrix_mcfg.MCFG.ulbt = AVR32_HMATRIX_ULBT_INFINITE;
800066d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800066d8:	30 09       	mov	r9,0
800066da:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800066de:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] = u_avr32_hmatrix_mcfg.mcfg;
800066e2:	fe 68 10 00 	mov	r8,-126976
800066e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800066ea:	91 69       	st.w	r8[0x18],r9

  // For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
  u_avr32_hmatrix_scfg.scfg = AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
800066ec:	fe 68 10 00 	mov	r8,-126976
800066f0:	71 58       	ld.w	r8,r8[0x54]
800066f2:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.fixed_defmstr = AVR32_HMATRIX_MASTER_USBB_DMA;
800066f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066fa:	30 69       	mov	r9,6
800066fc:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
80006700:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
80006704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006708:	30 29       	mov	r9,2
8000670a:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000670e:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] = u_avr32_hmatrix_scfg.scfg;
80006712:	fe 68 10 00 	mov	r8,-126976
80006716:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000671a:	f1 49 00 54 	st.w	r8[84],r9

  g_pbb_hz = pbb_hz;
8000671e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006722:	49 08       	lddpc	r8,80006760 <sd_mmc_mci_init+0xac>
80006724:	91 09       	st.w	r8[0x0],r9
  g_cpu_hz = cpu_hz;
80006726:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000672a:	48 f8       	lddpc	r8,80006764 <sd_mmc_mci_init+0xb0>
8000672c:	91 09       	st.w	r8[0x0],r9

  // Init MCI controller
  if (mci_init(mci, card_slot, pbb_hz)!=MCI_SUCCESS)
8000672e:	ee fa ff f0 	ld.w	r10,r7[-16]
80006732:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006736:	48 d8       	lddpc	r8,80006768 <sd_mmc_mci_init+0xb4>
80006738:	70 08       	ld.w	r8,r8[0x0]
8000673a:	12 9b       	mov	r11,r9
8000673c:	10 9c       	mov	r12,r8
8000673e:	f0 1f 00 0c 	mcall	8000676c <sd_mmc_mci_init+0xb8>
80006742:	18 98       	mov	r8,r12
80006744:	58 08       	cp.w	r8,0
80006746:	c0 30       	breq	8000674c <sd_mmc_mci_init+0x98>
    return false;
80006748:	30 08       	mov	r8,0
8000674a:	c0 78       	rjmp	80006758 <sd_mmc_mci_init+0xa4>

  // Default card initialization. This can be removed since the card init will
  // automatically be done when needed.
  sd_mmc_mci_card_init(card_slot);
8000674c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006750:	10 9c       	mov	r12,r8
80006752:	f0 1f 00 08 	mcall	80006770 <sd_mmc_mci_init+0xbc>
  return true;
80006756:	30 18       	mov	r8,1
}
80006758:	10 9c       	mov	r12,r8
8000675a:	2f bd       	sub	sp,-20
8000675c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006760:	00 00       	add	r0,r0
80006762:	06 3c       	cp.w	r12,r3
80006764:	00 00       	add	r0,r0
80006766:	06 40       	or	r0,r3
80006768:	00 00       	add	r0,r0
8000676a:	01 34       	ld.ub	r4,r0++
8000676c:	80 00       	ld.sh	r0,r0[0x0]
8000676e:	90 b0       	ld.uh	r0,r8[0x6]
80006770:	80 00       	ld.sh	r0,r0[0x0]
80006772:	67 74       	ld.w	r4,r3[0x5c]

80006774 <sd_mmc_mci_card_init>:

bool sd_mmc_mci_card_init(unsigned char slot)
{
80006774:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
80006778:	1a 97       	mov	r7,sp
8000677a:	21 7d       	sub	sp,92
8000677c:	18 98       	mov	r8,r12
8000677e:	ef 68 ff a4 	st.b	r7[-92],r8
  uint32_t response;

  if (true == sd_mmc_mci_init_done[slot])
80006782:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006786:	fe f9 08 7a 	ld.w	r9,pc[2170]
8000678a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000678e:	58 08       	cp.w	r8,0
80006790:	c0 40       	breq	80006798 <sd_mmc_mci_card_init+0x24>
    return true;
80006792:	30 18       	mov	r8,1
80006794:	e0 8f 04 31 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>

  // Default card is not known.
  g_card_type[slot] = UNKNOWN_CARD;
80006798:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000679c:	fe fa 08 68 	ld.w	r10,pc[2152]
800067a0:	30 08       	mov	r8,0
800067a2:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default bus size is 1 bit.
  g_card_bus_width[slot] = MCI_BUS_SIZE_1_BIT;
800067a6:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800067aa:	fe fa 08 5e 	ld.w	r10,pc[2142]
800067ae:	30 08       	mov	r8,0
800067b0:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default card speed and disable High Speed mode.
  mci_init(mci, slot, g_pbb_hz);
800067b4:	fe f8 08 58 	ld.w	r8,pc[2136]
800067b8:	70 0a       	ld.w	r10,r8[0x0]
800067ba:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800067be:	fe f8 08 52 	ld.w	r8,pc[2130]
800067c2:	70 08       	ld.w	r8,r8[0x0]
800067c4:	12 9b       	mov	r11,r9
800067c6:	10 9c       	mov	r12,r8
800067c8:	f0 1f 02 13 	mcall	80007014 <sd_mmc_mci_card_init+0x8a0>

  // Wait for 1ms, then wait for 74 more clock cycles (see MMC norms)
  if (mci_send_cmd(mci, SD_MMC_INIT_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800067cc:	fe f8 08 44 	ld.w	r8,pc[2116]
800067d0:	70 08       	ld.w	r8,r8[0x0]
800067d2:	3f fa       	mov	r10,-1
800067d4:	e0 6b 01 00 	mov	r11,256
800067d8:	10 9c       	mov	r12,r8
800067da:	f0 1f 02 10 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
800067de:	18 98       	mov	r8,r12
800067e0:	58 08       	cp.w	r8,0
800067e2:	c0 40       	breq	800067ea <sd_mmc_mci_card_init+0x76>
    return false;
800067e4:	30 08       	mov	r8,0
800067e6:	e0 8f 04 08 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>

  //-- (CMD0)
  // Set card in idle state
  if (mci_send_cmd(mci, SD_MMC_GO_IDLE_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800067ea:	fe f8 08 26 	ld.w	r8,pc[2086]
800067ee:	70 08       	ld.w	r8,r8[0x0]
800067f0:	3f fa       	mov	r10,-1
800067f2:	30 0b       	mov	r11,0
800067f4:	10 9c       	mov	r12,r8
800067f6:	f0 1f 02 09 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
800067fa:	18 98       	mov	r8,r12
800067fc:	58 08       	cp.w	r8,0
800067fe:	c0 50       	breq	80006808 <sd_mmc_mci_card_init+0x94>
    return false;
80006800:	30 08       	mov	r8,0
80006802:	e0 8f 03 fa 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>
    response = mci_read_response(mci);
    if( !(response & OCR_MSK_BUSY) )
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
80006806:	d7 03       	nop
    return false;

sd_mmc_init_step1:
  // (CMD1)
  // To send its Operating Conditions Register contents command only supported by MMC card
  if(mci_send_cmd(mci, SD_MMC_MMC_SEND_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_ALL|OCR_MSK_HC)==MCI_SUCCESS)
80006808:	fe f8 08 08 	ld.w	r8,pc[2056]
8000680c:	70 08       	ld.w	r8,r8[0x0]
8000680e:	e0 6a 80 00 	mov	r10,32768
80006812:	ea 1a c0 ff 	orh	r10,0xc0ff
80006816:	e0 6b 08 41 	mov	r11,2113
8000681a:	10 9c       	mov	r12,r8
8000681c:	f0 1f 01 ff 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
80006820:	18 98       	mov	r8,r12
80006822:	58 08       	cp.w	r8,0
80006824:	c2 a1       	brne	80006878 <sd_mmc_mci_card_init+0x104>
  {
    // MMC cards always respond to MMC_SEND_OP_COND
    g_card_type[slot] = MMC_CARD;
80006826:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000682a:	fe fa 07 da 	ld.w	r10,pc[2010]
8000682e:	30 18       	mov	r8,1
80006830:	f4 09 0b 08 	st.b	r10[r9],r8
    response = mci_read_response(mci);
80006834:	fe f8 07 dc 	ld.w	r8,pc[2012]
80006838:	70 08       	ld.w	r8,r8[0x0]
8000683a:	10 9c       	mov	r12,r8
8000683c:	f0 1f 01 f8 	mcall	8000701c <sd_mmc_mci_card_init+0x8a8>
80006840:	18 98       	mov	r8,r12
80006842:	ef 48 ff c0 	st.w	r7[-64],r8
    if( !(response & OCR_MSK_BUSY) )
80006846:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000684a:	58 08       	cp.w	r8,0
8000684c:	cd d4       	brge	80006806 <sd_mmc_mci_card_init+0x92>
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
8000684e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006852:	e6 18 40 00 	andh	r8,0x4000,COH
80006856:	e0 80 00 97 	breq	80006984 <sd_mmc_mci_card_init+0x210>
    {
      g_card_type[slot] |= MMC_CARD_HC;
8000685a:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000685e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006862:	fe fa 07 a2 	ld.w	r10,pc[1954]
80006866:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000686a:	a5 b8       	sbr	r8,0x5
8000686c:	5c 58       	castu.b	r8
8000686e:	fe fa 07 96 	ld.w	r10,pc[1942]
80006872:	f4 09 0b 08 	st.b	r10[r9],r8
80006876:	c8 88       	rjmp	80006986 <sd_mmc_mci_card_init+0x212>
    }
  }
  else
  {
    // SD cards do not respond to MMC_SEND_OP_COND
    g_card_type[slot] = SD_CARD;
80006878:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000687c:	fe fa 07 88 	ld.w	r10,pc[1928]
80006880:	30 28       	mov	r8,2
80006882:	f4 09 0b 08 	st.b	r10[r9],r8

    //-- (CMD8)
    // enables to expand new functionality to some existing commands supported only by SD HC card
    if (mci_send_cmd(mci, SD_MMC_SD_SEND_IF_COND_CMD, 0x000001AA)==MCI_SUCCESS)
80006886:	fe f8 07 8a 	ld.w	r8,pc[1930]
8000688a:	70 08       	ld.w	r8,r8[0x0]
8000688c:	e0 6a 01 aa 	mov	r10,426
80006890:	e0 6b 10 48 	mov	r11,4168
80006894:	10 9c       	mov	r12,r8
80006896:	f0 1f 01 e1 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
8000689a:	18 98       	mov	r8,r12
8000689c:	58 08       	cp.w	r8,0
8000689e:	c1 b1       	brne	800068d4 <sd_mmc_mci_card_init+0x160>
    {
      // It is a SD HC
      if( 0x000001AA == mci_read_response(mci))
800068a0:	fe f8 07 70 	ld.w	r8,pc[1904]
800068a4:	70 08       	ld.w	r8,r8[0x0]
800068a6:	10 9c       	mov	r12,r8
800068a8:	f0 1f 01 dd 	mcall	8000701c <sd_mmc_mci_card_init+0x8a8>
800068ac:	18 98       	mov	r8,r12
800068ae:	e0 48 01 aa 	cp.w	r8,426
800068b2:	c1 11       	brne	800068d4 <sd_mmc_mci_card_init+0x160>
      {
        g_card_type[slot] |= SD_CARD_V2;
800068b4:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800068b8:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800068bc:	fe fa 07 48 	ld.w	r10,pc[1864]
800068c0:	f4 08 07 08 	ld.ub	r8,r10[r8]
800068c4:	a3 b8       	sbr	r8,0x3
800068c6:	5c 58       	castu.b	r8
800068c8:	fe fa 07 3c 	ld.w	r10,pc[1852]
800068cc:	f4 09 0b 08 	st.b	r10[r9],r8
800068d0:	c0 28       	rjmp	800068d4 <sd_mmc_mci_card_init+0x160>
    response = mci_read_response(mci);

    if( !(response & OCR_MSK_BUSY) )
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
800068d2:	d7 03       	nop

sd_mmc_init_step2:
    //-- (CMD55)
    // Indicates to the card that the next command is an application specific command rather than a standard command
    // CMD55 shall always precede ACMD41
    if (mci_send_cmd(mci, SD_MMC_APP_CMD, 0)!=MCI_SUCCESS)
800068d4:	fe f8 07 3c 	ld.w	r8,pc[1852]
800068d8:	70 08       	ld.w	r8,r8[0x0]
800068da:	30 0a       	mov	r10,0
800068dc:	e0 6b 10 77 	mov	r11,4215
800068e0:	10 9c       	mov	r12,r8
800068e2:	f0 1f 01 ce 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
800068e6:	18 98       	mov	r8,r12
800068e8:	58 08       	cp.w	r8,0
800068ea:	c0 40       	breq	800068f2 <sd_mmc_mci_card_init+0x17e>
      return false;
800068ec:	30 08       	mov	r8,0
800068ee:	e0 8f 03 84 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>

    //-- (ACMD41)
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
800068f2:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800068f6:	fe f9 07 0e 	ld.w	r9,pc[1806]
800068fa:	f2 08 07 08 	ld.ub	r8,r9[r8]
800068fe:	e2 18 00 08 	andl	r8,0x8,COH
80006902:	c1 00       	breq	80006922 <sd_mmc_mci_card_init+0x1ae>
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
80006904:	fe f8 07 0c 	ld.w	r8,pc[1804]
80006908:	70 08       	ld.w	r8,r8[0x0]
8000690a:	fc 1a c0 10 	movh	r10,0xc010
8000690e:	36 9b       	mov	r11,105
80006910:	10 9c       	mov	r12,r8
80006912:	f0 1f 01 c2 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
80006916:	18 98       	mov	r8,r12
80006918:	58 08       	cp.w	r8,0
8000691a:	c1 30       	breq	80006940 <sd_mmc_mci_card_init+0x1cc>
        return false;
8000691c:	30 08       	mov	r8,0
8000691e:	e0 8f 03 6c 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>
    }
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
80006922:	fe f8 06 ee 	ld.w	r8,pc[1774]
80006926:	70 08       	ld.w	r8,r8[0x0]
80006928:	fc 1a 80 10 	movh	r10,0x8010
8000692c:	36 9b       	mov	r11,105
8000692e:	10 9c       	mov	r12,r8
80006930:	f0 1f 01 ba 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
80006934:	18 98       	mov	r8,r12
80006936:	58 08       	cp.w	r8,0
80006938:	c0 50       	breq	80006942 <sd_mmc_mci_card_init+0x1ce>
        return false;
8000693a:	30 08       	mov	r8,0
8000693c:	e0 8f 03 5d 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
        return false;
80006940:	d7 03       	nop
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
        return false;
    }
    response = mci_read_response(mci);
80006942:	fe f8 06 ce 	ld.w	r8,pc[1742]
80006946:	70 08       	ld.w	r8,r8[0x0]
80006948:	10 9c       	mov	r12,r8
8000694a:	f0 1f 01 b5 	mcall	8000701c <sd_mmc_mci_card_init+0x8a8>
8000694e:	18 98       	mov	r8,r12
80006950:	ef 48 ff c0 	st.w	r7[-64],r8

    if( !(response & OCR_MSK_BUSY) )
80006954:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006958:	58 08       	cp.w	r8,0
8000695a:	cb c4       	brge	800068d2 <sd_mmc_mci_card_init+0x15e>
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
    }
    // Card read then check HC type
    if (response & OCR_MSK_HC)
8000695c:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006960:	e6 18 40 00 	andh	r8,0x4000,COH
80006964:	c1 10       	breq	80006986 <sd_mmc_mci_card_init+0x212>
    {
      g_card_type[slot] |= SD_CARD_HC;  // Card SD High Capacity
80006966:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000696a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000696e:	fe fa 06 96 	ld.w	r10,pc[1686]
80006972:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006976:	a5 a8       	sbr	r8,0x4
80006978:	5c 58       	castu.b	r8
8000697a:	fe fa 06 8a 	ld.w	r10,pc[1674]
8000697e:	f4 09 0b 08 	st.b	r10[r9],r8
80006982:	c0 28       	rjmp	80006986 <sd_mmc_mci_card_init+0x212>
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
    {
      g_card_type[slot] |= MMC_CARD_HC;
80006984:	d7 03       	nop

  // Here card ready and type (MMC <V4, MMC V4, MMC HC, SD V1, SD V2 HC) detected

  //-- (CMD2)
  // Send CID
  if (mci_send_cmd(mci, SD_MMC_ALL_SEND_CID_CMD, 0)!=MCI_SUCCESS)
80006986:	fe f8 06 8a 	ld.w	r8,pc[1674]
8000698a:	70 08       	ld.w	r8,r8[0x0]
8000698c:	30 0a       	mov	r10,0
8000698e:	e0 6b 00 82 	mov	r11,130
80006992:	10 9c       	mov	r12,r8
80006994:	f0 1f 01 a1 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
80006998:	18 98       	mov	r8,r12
8000699a:	58 08       	cp.w	r8,0
8000699c:	c0 40       	breq	800069a4 <sd_mmc_mci_card_init+0x230>
    return false;
8000699e:	30 08       	mov	r8,0
800069a0:	e0 8f 03 2b 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>

  //-- (CMD3)
  // Set relative address
  if(MMC_CARD & g_card_type[slot])
800069a4:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800069a8:	fe f9 06 5c 	ld.w	r9,pc[1628]
800069ac:	f2 08 07 08 	ld.ub	r8,r9[r8]
800069b0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800069b4:	5c 58       	castu.b	r8
800069b6:	c1 90       	breq	800069e8 <sd_mmc_mci_card_init+0x274>
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
800069b8:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800069bc:	fe f8 06 64 	ld.w	r8,pc[1636]
800069c0:	e0 7a ff ff 	mov	r10,131071
800069c4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
800069c8:	fe f8 06 48 	ld.w	r8,pc[1608]
800069cc:	70 08       	ld.w	r8,r8[0x0]
800069ce:	e0 7a ff ff 	mov	r10,131071
800069d2:	e0 6b 10 43 	mov	r11,4163
800069d6:	10 9c       	mov	r12,r8
800069d8:	f0 1f 01 90 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
800069dc:	18 98       	mov	r8,r12
800069de:	58 08       	cp.w	r8,0
800069e0:	c1 30       	breq	80006a06 <sd_mmc_mci_card_init+0x292>
      return false;
800069e2:	30 08       	mov	r8,0
800069e4:	e0 8f 03 09 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>
  }
  else
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
800069e8:	fe f8 06 28 	ld.w	r8,pc[1576]
800069ec:	70 08       	ld.w	r8,r8[0x0]
800069ee:	30 0a       	mov	r10,0
800069f0:	e0 6b 10 43 	mov	r11,4163
800069f4:	10 9c       	mov	r12,r8
800069f6:	f0 1f 01 89 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
800069fa:	18 98       	mov	r8,r12
800069fc:	58 08       	cp.w	r8,0
800069fe:	c0 50       	breq	80006a08 <sd_mmc_mci_card_init+0x294>
      return false;
80006a00:	30 08       	mov	r8,0
80006a02:	e0 8f 02 fa 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>
  if(MMC_CARD & g_card_type[slot])
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
      return false;
80006a06:	d7 03       	nop
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
      return false;
  }
  if (SD_CARD & g_card_type[slot])
80006a08:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a0c:	fe f9 05 f8 	ld.w	r9,pc[1528]
80006a10:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006a14:	e2 18 00 02 	andl	r8,0x2,COH
80006a18:	c1 10       	breq	80006a3a <sd_mmc_mci_card_init+0x2c6>
  {
    // For SD  card, you receive address of card
    g_card_rca[slot] = mci_read_response(mci) & RCA_MSK_ADR ;
80006a1a:	ef 36 ff a4 	ld.ub	r6,r7[-92]
80006a1e:	fe f8 05 f2 	ld.w	r8,pc[1522]
80006a22:	70 08       	ld.w	r8,r8[0x0]
80006a24:	10 9c       	mov	r12,r8
80006a26:	f0 1f 01 7e 	mcall	8000701c <sd_mmc_mci_card_init+0x8a8>
80006a2a:	18 98       	mov	r8,r12
80006a2c:	10 99       	mov	r9,r8
80006a2e:	e0 19 00 00 	andl	r9,0x0
80006a32:	fe f8 05 ee 	ld.w	r8,pc[1518]
80006a36:	f0 06 09 29 	st.w	r8[r6<<0x2],r9
  }


  //-- (CMD9)
  // Read & analyze CSD register
  if (sd_mmc_mci_get_csd(slot)!=true)
80006a3a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a3e:	10 9c       	mov	r12,r8
80006a40:	f0 1f 01 79 	mcall	80007024 <sd_mmc_mci_card_init+0x8b0>
80006a44:	18 98       	mov	r8,r12
80006a46:	ec 18 00 01 	eorl	r8,0x1
80006a4a:	5c 58       	castu.b	r8
80006a4c:	c0 40       	breq	80006a54 <sd_mmc_mci_card_init+0x2e0>
    return false;
80006a4e:	30 08       	mov	r8,0
80006a50:	e0 8f 02 d3 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>


  //-- (CMD7)-R1b
  // select card
  if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006a54:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006a58:	fe f8 05 c8 	ld.w	r8,pc[1480]
80006a5c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006a60:	fe f8 05 b0 	ld.w	r8,pc[1456]
80006a64:	70 08       	ld.w	r8,r8[0x0]
80006a66:	12 9a       	mov	r10,r9
80006a68:	e0 6b 10 c7 	mov	r11,4295
80006a6c:	10 9c       	mov	r12,r8
80006a6e:	f0 1f 01 6b 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
80006a72:	18 98       	mov	r8,r12
80006a74:	58 08       	cp.w	r8,0
80006a76:	c0 40       	breq	80006a7e <sd_mmc_mci_card_init+0x30a>
    return false;
80006a78:	30 08       	mov	r8,0
80006a7a:	e0 8f 02 be 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>

  // Wait end of busy
  mci_wait_busy_signal(mci);// read busy state on DAT0
80006a7e:	fe f8 05 92 	ld.w	r8,pc[1426]
80006a82:	70 08       	ld.w	r8,r8[0x0]
80006a84:	10 9c       	mov	r12,r8
80006a86:	f0 1f 01 69 	mcall	80007028 <sd_mmc_mci_card_init+0x8b4>

  // Get clock by checking the extended CSD register
  if (MMC_CARD_V4 & g_card_type[slot])
80006a8a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a8e:	fe f9 05 76 	ld.w	r9,pc[1398]
80006a92:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006a96:	e2 18 00 04 	andl	r8,0x4,COH
80006a9a:	c0 e0       	breq	80006ab6 <sd_mmc_mci_card_init+0x342>
  {
    // Get clock (MMC V4) and size (MMC V4 HC) by checking the extended CSD register
      //-- (CMD8)
    if (sd_mmc_get_ext_csd(slot)!=true)
80006a9c:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006aa0:	10 9c       	mov	r12,r8
80006aa2:	f0 1f 01 63 	mcall	8000702c <sd_mmc_mci_card_init+0x8b8>
80006aa6:	18 98       	mov	r8,r12
80006aa8:	ec 18 00 01 	eorl	r8,0x1
80006aac:	5c 58       	castu.b	r8
80006aae:	c0 40       	breq	80006ab6 <sd_mmc_mci_card_init+0x342>
         return false;
80006ab0:	30 08       	mov	r8,0
80006ab2:	e0 8f 02 a2 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>
  }


#if (SD_4_BIT == ENABLE)
  // set bus size
  if (SD_CARD & g_card_type[slot])
80006ab6:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006aba:	fe f9 05 4a 	ld.w	r9,pc[1354]
80006abe:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006ac2:	e2 18 00 02 	andl	r8,0x2,COH
80006ac6:	c4 00       	breq	80006b46 <sd_mmc_mci_card_init+0x3d2>
  {
    // set 4-bit bus for SD Card
    //-- (CMD55)
    if(mci_send_cmd(mci, SD_MMC_APP_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006ac8:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006acc:	fe f8 05 54 	ld.w	r8,pc[1364]
80006ad0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006ad4:	fe f8 05 3c 	ld.w	r8,pc[1340]
80006ad8:	70 08       	ld.w	r8,r8[0x0]
80006ada:	12 9a       	mov	r10,r9
80006adc:	e0 6b 10 77 	mov	r11,4215
80006ae0:	10 9c       	mov	r12,r8
80006ae2:	f0 1f 01 4e 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
80006ae6:	18 98       	mov	r8,r12
80006ae8:	58 08       	cp.w	r8,0
80006aea:	c0 40       	breq	80006af2 <sd_mmc_mci_card_init+0x37e>
      return false;
80006aec:	30 08       	mov	r8,0
80006aee:	e0 8f 02 84 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>

    //-- (CMD6)
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
80006af2:	fe f8 05 1e 	ld.w	r8,pc[1310]
80006af6:	70 08       	ld.w	r8,r8[0x0]
80006af8:	30 2a       	mov	r10,2
80006afa:	e0 6b 10 46 	mov	r11,4166
80006afe:	10 9c       	mov	r12,r8
80006b00:	f0 1f 01 46 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
80006b04:	18 98       	mov	r8,r12
80006b06:	58 08       	cp.w	r8,0
80006b08:	c0 40       	breq	80006b10 <sd_mmc_mci_card_init+0x39c>
      return false;
80006b0a:	30 08       	mov	r8,0
80006b0c:	e0 8f 02 75 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
80006b10:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006b14:	fe fa 04 f4 	ld.w	r10,pc[1268]
80006b18:	30 28       	mov	r8,2
80006b1a:	f4 09 0b 08 	st.b	r10[r9],r8
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
80006b1e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006b22:	fe f9 04 e6 	ld.w	r9,pc[1254]
80006b26:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006b2a:	10 99       	mov	r9,r8
80006b2c:	fe f8 04 e4 	ld.w	r8,pc[1252]
80006b30:	70 08       	ld.w	r8,r8[0x0]
80006b32:	12 9b       	mov	r11,r9
80006b34:	10 9c       	mov	r12,r8
80006b36:	f0 1f 01 3f 	mcall	80007030 <sd_mmc_mci_card_init+0x8bc>
80006b3a:	18 98       	mov	r8,r12
80006b3c:	58 08       	cp.w	r8,0
80006b3e:	c4 00       	breq	80006bbe <sd_mmc_mci_card_init+0x44a>
      return false;
80006b40:	30 08       	mov	r8,0
80006b42:	e0 8f 02 5a 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>
  }
  else // MMC bus width management
  {
    // set 8-bit bus for MMC Card
    if (MMC_CARD_V4 & g_card_type[slot])
80006b46:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006b4a:	fe f9 04 ba 	ld.w	r9,pc[1210]
80006b4e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006b52:	e2 18 00 04 	andl	r8,0x4,COH
80006b56:	c3 50       	breq	80006bc0 <sd_mmc_mci_card_init+0x44c>
    {
      //-- (CMD6)-R1b
      // set 8-bit bus width (appeared from V4.0 specification)
      if (mci_send_cmd( mci,
80006b58:	fe f8 04 b8 	ld.w	r8,pc[1208]
80006b5c:	70 08       	ld.w	r8,r8[0x0]
80006b5e:	e0 6a 02 03 	mov	r10,515
80006b62:	ea 1a 03 b7 	orh	r10,0x3b7
80006b66:	e0 6b 10 c6 	mov	r11,4294
80006b6a:	10 9c       	mov	r12,r8
80006b6c:	f0 1f 01 2b 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
80006b70:	18 98       	mov	r8,r12
80006b72:	58 08       	cp.w	r8,0
80006b74:	c0 40       	breq	80006b7c <sd_mmc_mci_card_init+0x408>
                        ( (uint32_t)MMC_SWITCH_WRITE     <<24)|
                          ((uint32_t)MMC_SWITCH_BUS_WIDTH<<16)|
                          ((uint32_t)MMC_SWITCH_VAL_8BIT << 8)|
                          ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
80006b76:	30 08       	mov	r8,0
80006b78:	e0 8f 02 3f 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006b7c:	fe f8 04 94 	ld.w	r8,pc[1172]
80006b80:	70 08       	ld.w	r8,r8[0x0]
80006b82:	10 9c       	mov	r12,r8
80006b84:	f0 1f 01 29 	mcall	80007028 <sd_mmc_mci_card_init+0x8b4>
      g_card_bus_width[slot] = MCI_BUS_SIZE_8_BIT;
80006b88:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006b8c:	fe fa 04 7c 	ld.w	r10,pc[1148]
80006b90:	30 38       	mov	r8,3
80006b92:	f4 09 0b 08 	st.b	r10[r9],r8
      if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
80006b96:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006b9a:	fe f9 04 6e 	ld.w	r9,pc[1134]
80006b9e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006ba2:	10 99       	mov	r9,r8
80006ba4:	fe f8 04 6c 	ld.w	r8,pc[1132]
80006ba8:	70 08       	ld.w	r8,r8[0x0]
80006baa:	12 9b       	mov	r11,r9
80006bac:	10 9c       	mov	r12,r8
80006bae:	f0 1f 01 21 	mcall	80007030 <sd_mmc_mci_card_init+0x8bc>
80006bb2:	18 98       	mov	r8,r12
80006bb4:	58 08       	cp.w	r8,0
80006bb6:	c0 50       	breq	80006bc0 <sd_mmc_mci_card_init+0x44c>
       return false;
80006bb8:	30 08       	mov	r8,0
80006bba:	e0 8f 02 1e 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
      return false;

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
      return false;
80006bbe:	d7 03       	nop
       return false;
    }
  }
#endif

   if (MMC_CARD_V4 & g_card_type[slot])
80006bc0:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006bc4:	fe f9 04 40 	ld.w	r9,pc[1088]
80006bc8:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006bcc:	e2 18 00 04 	andl	r8,0x4,COH
80006bd0:	c1 90       	breq	80006c02 <sd_mmc_mci_card_init+0x48e>
   {
      //-- (CMD6)-R1b
      // set high speed interface timing
      if (mci_send_cmd( mci,
80006bd2:	fe f8 04 3e 	ld.w	r8,pc[1086]
80006bd6:	70 08       	ld.w	r8,r8[0x0]
80006bd8:	e0 6a 01 03 	mov	r10,259
80006bdc:	ea 1a 03 b9 	orh	r10,0x3b9
80006be0:	e0 6b 10 c6 	mov	r11,4294
80006be4:	10 9c       	mov	r12,r8
80006be6:	f0 1f 01 0d 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
80006bea:	18 98       	mov	r8,r12
80006bec:	58 08       	cp.w	r8,0
80006bee:	c0 40       	breq	80006bf6 <sd_mmc_mci_card_init+0x482>
                        ((uint32_t)MMC_SWITCH_WRITE     <<24)|
                        ((uint32_t)MMC_SWITCH_HIGH_SPEED<<16)|
                        ((uint32_t)MMC_SWITCH_VAL_HS    << 8)|
                        ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
80006bf0:	30 08       	mov	r8,0
80006bf2:	e0 8f 02 02 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);
80006bf6:	fe f8 04 1a 	ld.w	r8,pc[1050]
80006bfa:	70 08       	ld.w	r8,r8[0x0]
80006bfc:	10 9c       	mov	r12,r8
80006bfe:	f0 1f 01 0b 	mcall	80007028 <sd_mmc_mci_card_init+0x8b4>
   }


   if( SD_CARD_V2 & g_card_type[slot] )
80006c02:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006c06:	fe f9 03 fe 	ld.w	r9,pc[1022]
80006c0a:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006c0e:	e2 18 00 08 	andl	r8,0x8,COH
80006c12:	e0 80 01 ae 	breq	80006f6e <sd_mmc_mci_card_init+0x7fa>
#define SDMMC_SWITCH_FUNC_G3_KEEP     (0xf << 8)  /**< Group 3 No influence */
#define SDMMC_SWITCH_FUNC_G4_KEEP     (0xf << 12) /**< Group 4 No influence */
#define SDMMC_SWITCH_FUNC_G5_KEEP     (0xf << 16) /**< Group 5 No influence */
#define SDMMC_SWITCH_FUNC_G6_KEEP     (0xf << 20) /**< Group 6 No influence */

      mci_set_block_size(mci, 512/8); // CMD6 512 bits status
80006c16:	fe f8 03 fa 	ld.w	r8,pc[1018]
80006c1a:	70 08       	ld.w	r8,r8[0x0]
80006c1c:	34 0b       	mov	r11,64
80006c1e:	10 9c       	mov	r12,r8
80006c20:	f0 1f 01 05 	mcall	80007034 <sd_mmc_mci_card_init+0x8c0>
      mci_set_block_count(mci, 1);
80006c24:	fe f8 03 ec 	ld.w	r8,pc[1004]
80006c28:	70 08       	ld.w	r8,r8[0x0]
80006c2a:	30 1b       	mov	r11,1
80006c2c:	10 9c       	mov	r12,r8
80006c2e:	f0 1f 01 03 	mcall	80007038 <sd_mmc_mci_card_init+0x8c4>

      //-- (CMD6)
      // Check if we can enter into the High Speed mode.
      if (mci_send_cmd( mci
80006c32:	fe f8 03 de 	ld.w	r8,pc[990]
80006c36:	70 08       	ld.w	r8,r8[0x0]
80006c38:	30 1a       	mov	r10,1
80006c3a:	e4 7b 10 46 	mov	r11,331846
80006c3e:	10 9c       	mov	r12,r8
80006c40:	f0 1f 00 f6 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
80006c44:	18 98       	mov	r8,r12
80006c46:	58 08       	cp.w	r8,0
80006c48:	c0 40       	breq	80006c50 <sd_mmc_mci_card_init+0x4dc>
                      , SD_SWITCH_FUNC
                      , SDMMC_SWITCH_FUNC_MODE_CHECK | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006c4a:	30 08       	mov	r8,0
80006c4c:	e0 8f 01 d5 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006c50:	fe f8 03 c0 	ld.w	r8,pc[960]
80006c54:	70 08       	ld.w	r8,r8[0x0]
80006c56:	10 9c       	mov	r12,r8
80006c58:	f0 1f 00 f4 	mcall	80007028 <sd_mmc_mci_card_init+0x8b4>

      bool b_hs_supported=false;
80006c5c:	30 08       	mov	r8,0
80006c5e:	ef 68 ff c5 	st.b	r7[-59],r8
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006c62:	30 08       	mov	r8,0
80006c64:	ef 68 ff c6 	st.b	r7[-58],r8
80006c68:	c4 18       	rjmp	80006cea <sd_mmc_mci_card_init+0x576>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006c6a:	fe f8 03 a6 	ld.w	r8,pc[934]
80006c6e:	70 08       	ld.w	r8,r8[0x0]
80006c70:	ef 48 ff c8 	st.w	r7[-56],r8
80006c74:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006c78:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006c7c:	fe f8 03 c0 	ld.w	r8,pc[960]
80006c80:	70 08       	ld.w	r8,r8[0x0]
80006c82:	10 99       	mov	r9,r8
80006c84:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006c88:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006c8c:	71 08       	ld.w	r8,r8[0x40]
80006c8e:	f3 e8 10 08 	or	r8,r9,r8
80006c92:	10 99       	mov	r9,r8
80006c94:	fe f8 03 a8 	ld.w	r8,pc[936]
80006c98:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006c9a:	fe f8 03 a2 	ld.w	r8,pc[930]
80006c9e:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006ca0:	e2 18 00 02 	andl	r8,0x2,COH
80006ca4:	5f 18       	srne	r8
80006ca6:	58 08       	cp.w	r8,0
80006ca8:	ce 10       	breq	80006c6a <sd_mmc_mci_card_init+0x4f6>
          data = mci_rd_data(mci);
80006caa:	fe f8 03 66 	ld.w	r8,pc[870]
80006cae:	70 08       	ld.w	r8,r8[0x0]
80006cb0:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006cb4:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006cb8:	70 c8       	ld.w	r8,r8[0x30]
80006cba:	ef 48 ff ac 	st.w	r7[-84],r8
          if(i==16)
80006cbe:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006cc2:	31 08       	mov	r8,16
80006cc4:	f0 09 18 00 	cp.b	r9,r8
80006cc8:	c0 c1       	brne	80006ce0 <sd_mmc_mci_card_init+0x56c>
          {
            if(((data>>24)&0xf)==1)
80006cca:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006cce:	b9 88       	lsr	r8,0x18
80006cd0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006cd4:	58 18       	cp.w	r8,1
80006cd6:	c1 21       	brne	80006cfa <sd_mmc_mci_card_init+0x586>
              b_hs_supported = true;
80006cd8:	30 18       	mov	r8,1
80006cda:	ef 68 ff c5 	st.b	r7[-59],r8
            break;
80006cde:	c0 f8       	rjmp	80006cfc <sd_mmc_mci_card_init+0x588>
      mci_wait_busy_signal(mci);// read busy state on DAT0

      bool b_hs_supported=false;
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006ce0:	ef 38 ff c6 	ld.ub	r8,r7[-58]
80006ce4:	2f c8       	sub	r8,-4
80006ce6:	ef 68 ff c6 	st.b	r7[-58],r8
80006cea:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006cee:	33 f8       	mov	r8,63
80006cf0:	f0 09 18 00 	cp.b	r9,r8
80006cf4:	fe 98 ff bb 	brls	80006c6a <sd_mmc_mci_card_init+0x4f6>
80006cf8:	c0 28       	rjmp	80006cfc <sd_mmc_mci_card_init+0x588>
          data = mci_rd_data(mci);
          if(i==16)
          {
            if(((data>>24)&0xf)==1)
              b_hs_supported = true;
            break;
80006cfa:	d7 03       	nop
          }
        }
      }

      if (b_hs_supported==false )
80006cfc:	ef 38 ff c5 	ld.ub	r8,r7[-59]
80006d00:	ec 18 00 01 	eorl	r8,0x1
80006d04:	5c 58       	castu.b	r8
80006d06:	e0 81 01 33 	brne	80006f6c <sd_mmc_mci_card_init+0x7f8>
        goto sd_mmc_init_step3;

      if (mci_send_cmd( mci
80006d0a:	fe f8 03 06 	ld.w	r8,pc[774]
80006d0e:	70 08       	ld.w	r8,r8[0x0]
80006d10:	e0 6a ff f1 	mov	r10,65521
80006d14:	ea 1a 80 ff 	orh	r10,0x80ff
80006d18:	e4 7b 10 46 	mov	r11,331846
80006d1c:	10 9c       	mov	r12,r8
80006d1e:	f0 1f 00 bf 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
80006d22:	18 98       	mov	r8,r12
80006d24:	58 08       	cp.w	r8,0
80006d26:	c0 40       	breq	80006d2e <sd_mmc_mci_card_init+0x5ba>
                      | SDMMC_SWITCH_FUNC_G3_KEEP
                      | SDMMC_SWITCH_FUNC_G2_KEEP
                      | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006d28:	30 08       	mov	r8,0
80006d2a:	e0 8f 01 66 	bral	80006ff6 <sd_mmc_mci_card_init+0x882>
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006d2e:	30 08       	mov	r8,0
80006d30:	ef 68 ff c7 	st.b	r7[-57],r8
80006d34:	c3 08       	rjmp	80006d94 <sd_mmc_mci_card_init+0x620>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006d36:	fe f8 02 da 	ld.w	r8,pc[730]
80006d3a:	70 08       	ld.w	r8,r8[0x0]
80006d3c:	ef 48 ff d4 	st.w	r7[-44],r8
80006d40:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006d44:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006d48:	fe f8 02 f4 	ld.w	r8,pc[756]
80006d4c:	70 08       	ld.w	r8,r8[0x0]
80006d4e:	10 99       	mov	r9,r8
80006d50:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006d54:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006d58:	71 08       	ld.w	r8,r8[0x40]
80006d5a:	f3 e8 10 08 	or	r8,r9,r8
80006d5e:	10 99       	mov	r9,r8
80006d60:	fe f8 02 dc 	ld.w	r8,pc[732]
80006d64:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006d66:	fe f8 02 d6 	ld.w	r8,pc[726]
80006d6a:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006d6c:	e2 18 00 02 	andl	r8,0x2,COH
80006d70:	5f 18       	srne	r8
80006d72:	58 08       	cp.w	r8,0
80006d74:	ce 10       	breq	80006d36 <sd_mmc_mci_card_init+0x5c2>
          data = mci_rd_data(mci);
80006d76:	fe f8 02 9a 	ld.w	r8,pc[666]
80006d7a:	70 08       	ld.w	r8,r8[0x0]
80006d7c:	ef 48 ff dc 	st.w	r7[-36],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006d80:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006d84:	70 c8       	ld.w	r8,r8[0x30]
80006d86:	ef 48 ff a8 	st.w	r7[-88],r8
      {
        return false;
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006d8a:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006d8e:	2f c8       	sub	r8,-4
80006d90:	ef 68 ff c7 	st.b	r7[-57],r8
80006d94:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006d98:	33 f8       	mov	r8,63
80006d9a:	f0 09 18 00 	cp.b	r9,r8
80006d9e:	fe 98 ff cc 	brls	80006d36 <sd_mmc_mci_card_init+0x5c2>

      /* A 8 cycle delay is required after switch command
       * @ 200KHz clock this should be 40 uS, but we use
       * 80 to handle imprecise clock setting.
       */
      cpu_delay_us(80, g_cpu_hz);
80006da2:	fe f8 02 9e 	ld.w	r8,pc[670]
80006da6:	70 08       	ld.w	r8,r8[0x0]
80006da8:	35 09       	mov	r9,80
80006daa:	ef 49 ff e4 	st.w	r7[-28],r9
80006dae:	ef 48 ff e0 	st.w	r7[-32],r8
80006db2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006db6:	ef 48 ff ec 	st.w	r7[-20],r8
80006dba:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006dbe:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80006dc2:	ee f0 ff ec 	ld.w	r0,r7[-20]
80006dc6:	30 01       	mov	r1,0
80006dc8:	ee f2 ff e8 	ld.w	r2,r7[-24]
80006dcc:	30 03       	mov	r3,0
80006dce:	e2 02 02 4a 	mul	r10,r1,r2
80006dd2:	e6 00 02 48 	mul	r8,r3,r0
80006dd6:	10 0a       	add	r10,r8
80006dd8:	e0 02 06 48 	mulu.d	r8,r0,r2
80006ddc:	12 0a       	add	r10,r9
80006dde:	14 99       	mov	r9,r10
80006de0:	ee 7a 42 3f 	mov	r10,999999
80006de4:	30 0b       	mov	r11,0
80006de6:	f0 0a 00 0a 	add	r10,r8,r10
80006dea:	f2 0b 00 4b 	adc	r11,r9,r11
80006dee:	ee 78 42 40 	mov	r8,1000000
80006df2:	30 09       	mov	r9,0
80006df4:	f0 1f 00 94 	mcall	80007044 <sd_mmc_mci_card_init+0x8d0>
80006df8:	14 98       	mov	r8,r10
80006dfa:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80006dfc:	ef 48 ff f4 	st.w	r7[-12],r8
80006e00:	ee c8 00 50 	sub	r8,r7,80
80006e04:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006e08:	e1 b8 00 42 	mfsr	r8,0x108
80006e0c:	10 99       	mov	r9,r8
80006e0e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e12:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006e14:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e18:	70 09       	ld.w	r9,r8[0x0]
80006e1a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006e1e:	10 09       	add	r9,r8
80006e20:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e24:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006e26:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006e2a:	30 08       	mov	r8,0
80006e2c:	f3 68 00 08 	st.b	r9[8],r8
80006e30:	ee c8 00 50 	sub	r8,r7,80
80006e34:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006e38:	e1 b8 00 42 	mfsr	r8,0x108
80006e3c:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006e40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e44:	f1 39 00 08 	ld.ub	r9,r8[8]
80006e48:	30 28       	mov	r8,2
80006e4a:	f0 09 18 00 	cp.b	r9,r8
80006e4e:	c0 31       	brne	80006e54 <sd_mmc_mci_card_init+0x6e0>
    return false;
80006e50:	30 08       	mov	r8,0
80006e52:	c4 38       	rjmp	80006ed8 <sd_mmc_mci_card_init+0x764>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006e54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e58:	f1 39 00 08 	ld.ub	r9,r8[8]
80006e5c:	30 18       	mov	r8,1
80006e5e:	f0 09 18 00 	cp.b	r9,r8
80006e62:	c0 31       	brne	80006e68 <sd_mmc_mci_card_init+0x6f4>
    return true;
80006e64:	30 18       	mov	r8,1
80006e66:	c3 98       	rjmp	80006ed8 <sd_mmc_mci_card_init+0x764>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006e68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e6c:	70 09       	ld.w	r9,r8[0x0]
80006e6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e72:	70 18       	ld.w	r8,r8[0x4]
80006e74:	10 39       	cp.w	r9,r8
80006e76:	e0 88 00 1a 	brls	80006eaa <sd_mmc_mci_card_init+0x736>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006e7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e7e:	70 08       	ld.w	r8,r8[0x0]
80006e80:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006e84:	10 39       	cp.w	r9,r8
80006e86:	c1 02       	brcc	80006ea6 <sd_mmc_mci_card_init+0x732>
80006e88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e8c:	70 18       	ld.w	r8,r8[0x4]
80006e8e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006e92:	10 39       	cp.w	r9,r8
80006e94:	e0 88 00 09 	brls	80006ea6 <sd_mmc_mci_card_init+0x732>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006e98:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006e9c:	30 18       	mov	r8,1
80006e9e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006ea2:	30 18       	mov	r8,1
80006ea4:	c1 a8       	rjmp	80006ed8 <sd_mmc_mci_card_init+0x764>
    }
    return false;
80006ea6:	30 08       	mov	r8,0
80006ea8:	c1 88       	rjmp	80006ed8 <sd_mmc_mci_card_init+0x764>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006eaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006eae:	70 08       	ld.w	r8,r8[0x0]
80006eb0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006eb4:	10 39       	cp.w	r9,r8
80006eb6:	c0 93       	brcs	80006ec8 <sd_mmc_mci_card_init+0x754>
80006eb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ebc:	70 18       	ld.w	r8,r8[0x4]
80006ebe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006ec2:	10 39       	cp.w	r9,r8
80006ec4:	e0 88 00 09 	brls	80006ed6 <sd_mmc_mci_card_init+0x762>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006ec8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006ecc:	30 18       	mov	r8,1
80006ece:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006ed2:	30 18       	mov	r8,1
80006ed4:	c0 28       	rjmp	80006ed8 <sd_mmc_mci_card_init+0x764>
    }
    return false;
80006ed6:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006ed8:	58 08       	cp.w	r8,0
80006eda:	ca b0       	breq	80006e30 <sd_mmc_mci_card_init+0x6bc>
      union u_cfg{
        unsigned long     cfg;
        avr32_mci_cfg_t   CFG;
      };
      union u_cfg val;
      val.cfg = mci->cfg;
80006edc:	4c d8       	lddpc	r8,80007010 <sd_mmc_mci_card_init+0x89c>
80006ede:	70 08       	ld.w	r8,r8[0x0]
80006ee0:	71 58       	ld.w	r8,r8[0x54]
80006ee2:	ef 48 ff bc 	st.w	r7[-68],r8
      val.CFG.hsmode = 1;
80006ee6:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006eea:	30 19       	mov	r9,1
80006eec:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80006ef0:	ef 48 ff bc 	st.w	r7[-68],r8
      mci->cfg = val.cfg;
80006ef4:	4c 78       	lddpc	r8,80007010 <sd_mmc_mci_card_init+0x89c>
80006ef6:	70 08       	ld.w	r8,r8[0x0]
80006ef8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80006efc:	f1 49 00 54 	st.w	r8[84],r9

      // deselect card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, 0)!=MCI_SUCCESS)
80006f00:	4c 48       	lddpc	r8,80007010 <sd_mmc_mci_card_init+0x89c>
80006f02:	70 08       	ld.w	r8,r8[0x0]
80006f04:	30 0a       	mov	r10,0
80006f06:	e0 6b 10 c7 	mov	r11,4295
80006f0a:	10 9c       	mov	r12,r8
80006f0c:	f0 1f 00 43 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
80006f10:	18 98       	mov	r8,r12
80006f12:	58 08       	cp.w	r8,0
80006f14:	c0 30       	breq	80006f1a <sd_mmc_mci_card_init+0x7a6>
        return false;
80006f16:	30 08       	mov	r8,0
80006f18:	c6 f8       	rjmp	80006ff6 <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006f1a:	4b e8       	lddpc	r8,80007010 <sd_mmc_mci_card_init+0x89c>
80006f1c:	70 08       	ld.w	r8,r8[0x0]
80006f1e:	10 9c       	mov	r12,r8
80006f20:	f0 1f 00 42 	mcall	80007028 <sd_mmc_mci_card_init+0x8b4>

      //-- (CMD9)
      // Read & analyze CSD register
      if (sd_mmc_mci_get_csd(slot)!=true)
80006f24:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006f28:	10 9c       	mov	r12,r8
80006f2a:	f0 1f 00 3f 	mcall	80007024 <sd_mmc_mci_card_init+0x8b0>
80006f2e:	18 98       	mov	r8,r12
80006f30:	ec 18 00 01 	eorl	r8,0x1
80006f34:	5c 58       	castu.b	r8
80006f36:	c0 30       	breq	80006f3c <sd_mmc_mci_card_init+0x7c8>
        return false;
80006f38:	30 08       	mov	r8,0
80006f3a:	c5 e8       	rjmp	80006ff6 <sd_mmc_mci_card_init+0x882>

      // select card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006f3c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006f40:	4b 88       	lddpc	r8,80007020 <sd_mmc_mci_card_init+0x8ac>
80006f42:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006f46:	4b 38       	lddpc	r8,80007010 <sd_mmc_mci_card_init+0x89c>
80006f48:	70 08       	ld.w	r8,r8[0x0]
80006f4a:	12 9a       	mov	r10,r9
80006f4c:	e0 6b 10 c7 	mov	r11,4295
80006f50:	10 9c       	mov	r12,r8
80006f52:	f0 1f 00 32 	mcall	80007018 <sd_mmc_mci_card_init+0x8a4>
80006f56:	18 98       	mov	r8,r12
80006f58:	58 08       	cp.w	r8,0
80006f5a:	c0 30       	breq	80006f60 <sd_mmc_mci_card_init+0x7ec>
        return false;
80006f5c:	30 08       	mov	r8,0
80006f5e:	c4 c8       	rjmp	80006ff6 <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006f60:	4a c8       	lddpc	r8,80007010 <sd_mmc_mci_card_init+0x89c>
80006f62:	70 08       	ld.w	r8,r8[0x0]
80006f64:	10 9c       	mov	r12,r8
80006f66:	f0 1f 00 31 	mcall	80007028 <sd_mmc_mci_card_init+0x8b4>
80006f6a:	c0 28       	rjmp	80006f6e <sd_mmc_mci_card_init+0x7fa>
          }
        }
      }

      if (b_hs_supported==false )
        goto sd_mmc_init_step3;
80006f6c:	d7 03       	nop
      mci_wait_busy_signal(mci);// read busy state on DAT0
  }

sd_mmc_init_step3:
  // Set clock
  mci_set_speed(mci, g_pbb_hz, g_card_freq[slot]*1000);
80006f6e:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006f72:	4b 68       	lddpc	r8,80007048 <sd_mmc_mci_card_init+0x8d4>
80006f74:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006f78:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80006f7c:	e0 68 03 e8 	mov	r8,1000
80006f80:	f2 08 02 48 	mul	r8,r9,r8
80006f84:	10 9a       	mov	r10,r8
80006f86:	4a 28       	lddpc	r8,8000700c <sd_mmc_mci_card_init+0x898>
80006f88:	70 09       	ld.w	r9,r8[0x0]
80006f8a:	4a 28       	lddpc	r8,80007010 <sd_mmc_mci_card_init+0x89c>
80006f8c:	70 08       	ld.w	r8,r8[0x0]
80006f8e:	12 9b       	mov	r11,r9
80006f90:	10 9c       	mov	r12,r8
80006f92:	f0 1f 00 2f 	mcall	8000704c <sd_mmc_mci_card_init+0x8d8>

  //-- (CMD13)
  // Check if card is ready, the card must be in TRAN state
  if(sd_mmc_mci_cmd_send_status(slot)!=true)
80006f96:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006f9a:	10 9c       	mov	r12,r8
80006f9c:	f0 1f 00 2d 	mcall	80007050 <sd_mmc_mci_card_init+0x8dc>
80006fa0:	18 98       	mov	r8,r12
80006fa2:	ec 18 00 01 	eorl	r8,0x1
80006fa6:	5c 58       	castu.b	r8
80006fa8:	c0 30       	breq	80006fae <sd_mmc_mci_card_init+0x83a>
    return false;
80006faa:	30 08       	mov	r8,0
80006fac:	c2 58       	rjmp	80006ff6 <sd_mmc_mci_card_init+0x882>

  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
80006fae:	49 98       	lddpc	r8,80007010 <sd_mmc_mci_card_init+0x89c>
80006fb0:	70 08       	ld.w	r8,r8[0x0]
80006fb2:	10 9c       	mov	r12,r8
80006fb4:	f0 1f 00 1a 	mcall	8000701c <sd_mmc_mci_card_init+0x8a8>
80006fb8:	18 98       	mov	r8,r12
80006fba:	e4 18 e0 02 	andh	r8,0xe002
80006fbe:	e0 18 0e 00 	andl	r8,0xe00
80006fc2:	e0 48 08 00 	cp.w	r8,2048
80006fc6:	c0 30       	breq	80006fcc <sd_mmc_mci_card_init+0x858>
    return false;
80006fc8:	30 08       	mov	r8,0
80006fca:	c1 68       	rjmp	80006ff6 <sd_mmc_mci_card_init+0x882>

  //-- (CMD16)
  // Set the card block length to 512B
  if (sd_mmc_set_block_len (slot, SD_MMC_SECTOR_SIZE)!=true)
80006fcc:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006fd0:	e0 6b 02 00 	mov	r11,512
80006fd4:	10 9c       	mov	r12,r8
80006fd6:	f0 1f 00 20 	mcall	80007054 <sd_mmc_mci_card_init+0x8e0>
80006fda:	18 98       	mov	r8,r12
80006fdc:	ec 18 00 01 	eorl	r8,0x1
80006fe0:	5c 58       	castu.b	r8
80006fe2:	c0 30       	breq	80006fe8 <sd_mmc_mci_card_init+0x874>
    return false;
80006fe4:	30 08       	mov	r8,0
80006fe6:	c0 88       	rjmp	80006ff6 <sd_mmc_mci_card_init+0x882>

  // USB Test Unit Attention requires a state "busy" between "not present" and "ready" state
  // otherwise never report card change
  sd_mmc_mci_init_done[slot] = true;
80006fe8:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006fec:	48 5a       	lddpc	r10,80007000 <sd_mmc_mci_card_init+0x88c>
80006fee:	30 18       	mov	r8,1
80006ff0:	f4 09 0b 08 	st.b	r10[r9],r8

  return true;
80006ff4:	30 18       	mov	r8,1
}
80006ff6:	10 9c       	mov	r12,r8
80006ff8:	2e 9d       	sub	sp,-92
80006ffa:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80006ffe:	00 00       	add	r0,r0
80007000:	00 00       	add	r0,r0
80007002:	06 38       	cp.w	r8,r3
80007004:	00 00       	add	r0,r0
80007006:	0f c0       	ld.ub	r0,r7[0x4]
80007008:	00 00       	add	r0,r0
8000700a:	0d b8       	ld.ub	r8,r6[0x3]
8000700c:	00 00       	add	r0,r0
8000700e:	06 3c       	cp.w	r12,r3
80007010:	00 00       	add	r0,r0
80007012:	01 34       	ld.ub	r4,r0++
80007014:	80 00       	ld.sh	r0,r0[0x0]
80007016:	90 b0       	ld.uh	r0,r8[0x6]
80007018:	80 00       	ld.sh	r0,r0[0x0]
8000701a:	91 e4       	st.w	r8[0x38],r4
8000701c:	80 00       	ld.sh	r0,r0[0x0]
8000701e:	93 1c       	st.w	r9[0x4],r12
80007020:	00 00       	add	r0,r0
80007022:	0b a8       	ld.ub	r8,r5[0x2]
80007024:	80 00       	ld.sh	r0,r0[0x0]
80007026:	61 38       	ld.w	r8,r0[0x4c]
80007028:	80 00       	ld.sh	r0,r0[0x0]
8000702a:	93 38       	st.w	r9[0xc],r8
8000702c:	80 00       	ld.sh	r0,r0[0x0]
8000702e:	64 28       	ld.w	r8,r2[0x8]
80007030:	80 00       	ld.sh	r0,r0[0x0]
80007032:	92 bc       	ld.uh	r12,r9[0x6]
80007034:	80 00       	ld.sh	r0,r0[0x0]
80007036:	91 64       	st.w	r8[0x18],r4
80007038:	80 00       	ld.sh	r0,r0[0x0]
8000703a:	91 ae       	st.w	r8[0x28],lr
8000703c:	00 00       	add	r0,r0
8000703e:	07 68       	ld.uh	r8,--r3
80007040:	00 00       	add	r0,r0
80007042:	06 40       	or	r0,r3
80007044:	80 00       	ld.sh	r0,r0[0x0]
80007046:	e3 fc 00 00 	ld.weq	r12,r1[0x0]
8000704a:	0d ba       	ld.ub	r10,r6[0x3]
8000704c:	80 00       	ld.sh	r0,r0[0x0]
8000704e:	8f cc       	st.w	r7[0x30],r12
80007050:	80 00       	ld.sh	r0,r0[0x0]
80007052:	79 6c       	ld.w	r12,r12[0x58]
80007054:	80 00       	ld.sh	r0,r0[0x0]
80007056:	65 f4       	ld.w	r4,r2[0x7c]

80007058 <dma_mci_2_ram>:
    return true;
}
#endif

static void dma_mci_2_ram(void *ram, size_t size)
{
80007058:	eb cd 40 80 	pushm	r7,lr
8000705c:	1a 97       	mov	r7,sp
8000705e:	20 3d       	sub	sp,12
80007060:	ef 4c ff f8 	st.w	r7[-8],r12
80007064:	ef 4b ff f4 	st.w	r7[-12],r11
  int *pRam = ram;
80007068:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000706c:	ef 48 ff fc 	st.w	r7[-4],r8

  // Src Address: the MCI registers.
  AVR32_DMACA.sar1 = (uint32_t)&AVR32_MCI.fifo;
80007070:	fc 18 ff 10 	movh	r8,0xff10
80007074:	fe 69 42 00 	mov	r9,-114176
80007078:	f1 49 00 58 	st.w	r8[88],r9

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;
8000707c:	fc 18 ff 10 	movh	r8,0xff10
80007080:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007084:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80007088:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
8000708c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007090:	a3 89       	lsr	r9,0x2

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80007092:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80007096:	fc 18 ff 10 	movh	r8,0xff10
8000709a:	e0 69 02 02 	mov	r9,514
8000709e:	f1 49 03 a0 	st.w	r8[928],r9
}
800070a2:	2f dd       	sub	sp,-12
800070a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800070a8 <is_dma_mci_2_ram_complete>:

static bool is_dma_mci_2_ram_complete( void )
{
800070a8:	eb cd 40 80 	pushm	r7,lr
800070ac:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
800070ae:	fc 18 ff 10 	movh	r8,0xff10
800070b2:	f0 f8 03 a0 	ld.w	r8,r8[928]
800070b6:	e2 18 00 02 	andl	r8,0x2,COH
800070ba:	c0 30       	breq	800070c0 <is_dma_mci_2_ram_complete+0x18>
    return false;
800070bc:	30 08       	mov	r8,0
800070be:	c0 28       	rjmp	800070c2 <is_dma_mci_2_ram_complete+0x1a>

  return true;
800070c0:	30 18       	mov	r8,1
}
800070c2:	10 9c       	mov	r12,r8
800070c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800070c8 <dma_ram_2_mci>:
    return true;
}
#endif

static void dma_ram_2_mci(const void *ram, size_t size)
{
800070c8:	eb cd 40 80 	pushm	r7,lr
800070cc:	1a 97       	mov	r7,sp
800070ce:	20 3d       	sub	sp,12
800070d0:	ef 4c ff f8 	st.w	r7[-8],r12
800070d4:	ef 4b ff f4 	st.w	r7[-12],r11
  const unsigned int *pRam = ram;
800070d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070dc:	ef 48 ff fc 	st.w	r7[-4],r8

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.sar1 = (unsigned long)pRam;
800070e0:	fc 18 ff 10 	movh	r8,0xff10
800070e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800070e8:	f1 49 00 58 	st.w	r8[88],r9

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;
800070ec:	fc 18 ff 10 	movh	r8,0xff10
800070f0:	fe 69 42 00 	mov	r9,-114176
800070f4:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
800070f8:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
800070fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007100:	a3 89       	lsr	r9,0x2

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80007102:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80007106:	fc 18 ff 10 	movh	r8,0xff10
8000710a:	e0 69 02 02 	mov	r9,514
8000710e:	f1 49 03 a0 	st.w	r8[928],r9
}
80007112:	2f dd       	sub	sp,-12
80007114:	e3 cd 80 80 	ldm	sp++,r7,pc

80007118 <is_dma_ram_2_mci_complete>:

static bool is_dma_ram_2_mci_complete( void )
{
80007118:	eb cd 40 80 	pushm	r7,lr
8000711c:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
8000711e:	fc 18 ff 10 	movh	r8,0xff10
80007122:	f0 f8 03 a0 	ld.w	r8,r8[928]
80007126:	e2 18 00 02 	andl	r8,0x2,COH
8000712a:	c0 30       	breq	80007130 <is_dma_ram_2_mci_complete+0x18>
    return false;
8000712c:	30 08       	mov	r8,0
8000712e:	c0 28       	rjmp	80007132 <is_dma_ram_2_mci_complete+0x1a>

  return true;
80007130:	30 18       	mov	r8,1
}
80007132:	10 9c       	mov	r12,r8
80007134:	e3 cd 80 80 	ldm	sp++,r7,pc

80007138 <sd_mmc_mci_mem_check>:

  return true;
}

bool sd_mmc_mci_mem_check(uint8_t slot)
{
80007138:	eb cd 40 80 	pushm	r7,lr
8000713c:	1a 97       	mov	r7,sp
8000713e:	20 2d       	sub	sp,8
80007140:	18 98       	mov	r8,r12
80007142:	ef 68 ff f8 	st.b	r7[-8],r8
  uint8_t timeout_init = 0;
80007146:	30 08       	mov	r8,0
80007148:	ef 68 ff ff 	st.b	r7[-1],r8

  if (slot > MCI_LAST_SLOTS)
8000714c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007150:	30 18       	mov	r8,1
80007152:	f0 09 18 00 	cp.b	r9,r8
80007156:	e0 88 00 04 	brls	8000715e <sd_mmc_mci_mem_check+0x26>
    return false;
8000715a:	30 08       	mov	r8,0
8000715c:	c4 d8       	rjmp	800071f6 <sd_mmc_mci_mem_check+0xbe>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000715e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007162:	4a 89       	lddpc	r9,80007200 <sd_mmc_mci_mem_check+0xc8>
80007164:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007168:	10 9a       	mov	r10,r8
8000716a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000716e:	4a 68       	lddpc	r8,80007204 <sd_mmc_mci_mem_check+0xcc>
80007170:	70 08       	ld.w	r8,r8[0x0]
80007172:	12 9b       	mov	r11,r9
80007174:	10 9c       	mov	r12,r8
80007176:	f0 1f 00 25 	mcall	80007208 <sd_mmc_mci_mem_check+0xd0>

  // Check card presence
  if (is_sd_mmc_mci_card_present(slot) == false)
8000717a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000717e:	10 9c       	mov	r12,r8
80007180:	f0 1f 00 23 	mcall	8000720c <sd_mmc_mci_mem_check+0xd4>
80007184:	18 98       	mov	r8,r12
80007186:	ec 18 00 01 	eorl	r8,0x1
8000718a:	5c 58       	castu.b	r8
8000718c:	c0 90       	breq	8000719e <sd_mmc_mci_mem_check+0x66>
  {
    sd_mmc_mci_init_done[slot] = false;
8000718e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007192:	4a 0a       	lddpc	r10,80007210 <sd_mmc_mci_mem_check+0xd8>
80007194:	30 08       	mov	r8,0
80007196:	f4 09 0b 08 	st.b	r10[r9],r8
    return false;
8000719a:	30 08       	mov	r8,0
8000719c:	c2 d8       	rjmp	800071f6 <sd_mmc_mci_mem_check+0xbe>
  }

  if (sd_mmc_mci_init_done[slot] == false)
8000719e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800071a2:	49 c9       	lddpc	r9,80007210 <sd_mmc_mci_mem_check+0xd8>
800071a4:	f2 08 07 08 	ld.ub	r8,r9[r8]
800071a8:	ec 18 00 01 	eorl	r8,0x1
800071ac:	5c 58       	castu.b	r8
800071ae:	c1 a0       	breq	800071e2 <sd_mmc_mci_mem_check+0xaa>
  {
    while (sd_mmc_mci_card_init(slot)!=true)
800071b0:	c0 f8       	rjmp	800071ce <sd_mmc_mci_mem_check+0x96>
    {
      timeout_init++;
800071b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800071b6:	2f f8       	sub	r8,-1
800071b8:	ef 68 ff ff 	st.b	r7[-1],r8
      if (timeout_init>10) return false;
800071bc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800071c0:	30 a8       	mov	r8,10
800071c2:	f0 09 18 00 	cp.b	r9,r8
800071c6:	e0 88 00 04 	brls	800071ce <sd_mmc_mci_mem_check+0x96>
800071ca:	30 08       	mov	r8,0
800071cc:	c1 58       	rjmp	800071f6 <sd_mmc_mci_mem_check+0xbe>
    return false;
  }

  if (sd_mmc_mci_init_done[slot] == false)
  {
    while (sd_mmc_mci_card_init(slot)!=true)
800071ce:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800071d2:	10 9c       	mov	r12,r8
800071d4:	f0 1f 00 10 	mcall	80007214 <sd_mmc_mci_mem_check+0xdc>
800071d8:	18 98       	mov	r8,r12
800071da:	ec 18 00 01 	eorl	r8,0x1
800071de:	5c 58       	castu.b	r8
800071e0:	ce 91       	brne	800071b2 <sd_mmc_mci_mem_check+0x7a>
    {
      timeout_init++;
      if (timeout_init>10) return false;
    }
  }
  if (sd_mmc_mci_init_done[slot] == true)
800071e2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800071e6:	48 b9       	lddpc	r9,80007210 <sd_mmc_mci_mem_check+0xd8>
800071e8:	f2 08 07 08 	ld.ub	r8,r9[r8]
800071ec:	58 08       	cp.w	r8,0
800071ee:	c0 30       	breq	800071f4 <sd_mmc_mci_mem_check+0xbc>
    return true;
800071f0:	30 18       	mov	r8,1
800071f2:	c0 28       	rjmp	800071f6 <sd_mmc_mci_mem_check+0xbe>
  else
    return false;
800071f4:	30 08       	mov	r8,0
}
800071f6:	10 9c       	mov	r12,r8
800071f8:	2f ed       	sub	sp,-8
800071fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800071fe:	00 00       	add	r0,r0
80007200:	00 00       	add	r0,r0
80007202:	0d b8       	ld.ub	r8,r6[0x3]
80007204:	00 00       	add	r0,r0
80007206:	01 34       	ld.ub	r4,r0++
80007208:	80 00       	ld.sh	r0,r0[0x0]
8000720a:	93 7c       	st.w	r9[0x1c],r12
8000720c:	80 00       	ld.sh	r0,r0[0x0]
8000720e:	60 80       	ld.w	r0,r0[0x20]
80007210:	00 00       	add	r0,r0
80007212:	06 38       	cp.w	r8,r3
80007214:	80 00       	ld.sh	r0,r0[0x0]
80007216:	67 74       	ld.w	r4,r3[0x5c]

80007218 <sd_mmc_mci_dma_read_open>:

  return true;
}

bool sd_mmc_mci_dma_read_open(uint8_t slot, uint32_t pos, void* ram, uint16_t nb_sector)
{
80007218:	eb cd 40 80 	pushm	r7,lr
8000721c:	1a 97       	mov	r7,sp
8000721e:	20 5d       	sub	sp,20
80007220:	ef 4b ff f4 	st.w	r7[-12],r11
80007224:	ef 4a ff f0 	st.w	r7[-16],r10
80007228:	12 98       	mov	r8,r9
8000722a:	18 99       	mov	r9,r12
8000722c:	ef 69 ff f8 	st.b	r7[-8],r9
80007230:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
80007234:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007238:	30 18       	mov	r8,1
8000723a:	f0 09 18 00 	cp.b	r9,r8
8000723e:	e0 88 00 04 	brls	80007246 <sd_mmc_mci_dma_read_open+0x2e>
    return false;
80007242:	30 08       	mov	r8,0
80007244:	c9 a8       	rjmp	80007378 <sd_mmc_mci_dma_read_open+0x160>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80007246:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000724a:	4c e9       	lddpc	r9,80007380 <sd_mmc_mci_dma_read_open+0x168>
8000724c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007250:	10 9a       	mov	r10,r8
80007252:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007256:	4c c8       	lddpc	r8,80007384 <sd_mmc_mci_dma_read_open+0x16c>
80007258:	70 08       	ld.w	r8,r8[0x0]
8000725a:	12 9b       	mov	r11,r9
8000725c:	10 9c       	mov	r12,r8
8000725e:	f0 1f 00 4b 	mcall	80007388 <sd_mmc_mci_dma_read_open+0x170>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
80007262:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007266:	4c a8       	lddpc	r8,8000738c <sd_mmc_mci_dma_read_open+0x174>
80007268:	ee fa ff f4 	ld.w	r10,r7[-12]
8000726c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
80007270:	4c 58       	lddpc	r8,80007384 <sd_mmc_mci_dma_read_open+0x16c>
80007272:	70 08       	ld.w	r8,r8[0x0]
80007274:	10 9c       	mov	r12,r8
80007276:	f0 1f 00 47 	mcall	80007390 <sd_mmc_mci_dma_read_open+0x178>

  addr =  gl_ptr_mem[slot];
8000727a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000727e:	4c 48       	lddpc	r8,8000738c <sd_mmc_mci_dma_read_open+0x174>
80007280:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007284:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
80007288:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000728c:	4c 29       	lddpc	r9,80007394 <sd_mmc_mci_dma_read_open+0x17c>
8000728e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007292:	e2 18 00 10 	andl	r8,0x10,COH
80007296:	c0 e1       	brne	800072b2 <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
80007298:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000729c:	4b e9       	lddpc	r9,80007394 <sd_mmc_mci_dma_read_open+0x17c>
8000729e:	f2 08 07 08 	ld.ub	r8,r9[r8]
800072a2:	e2 18 00 20 	andl	r8,0x20,COH
  // wait for MMC not busy
  mci_wait_busy_signal(mci);

  addr =  gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800072a6:	c0 61       	brne	800072b2 <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
800072a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800072ac:	a9 78       	lsl	r8,0x9
800072ae:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  //** (CMD13)
  // Necessary to clear flag error "ADDRESS_OUT_OF_RANGE" (ID LABO = MMC15)
  if(mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800072b2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800072b6:	4b 98       	lddpc	r8,80007398 <sd_mmc_mci_dma_read_open+0x180>
800072b8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800072bc:	4b 28       	lddpc	r8,80007384 <sd_mmc_mci_dma_read_open+0x16c>
800072be:	70 08       	ld.w	r8,r8[0x0]
800072c0:	12 9a       	mov	r10,r9
800072c2:	e0 6b 10 4d 	mov	r11,4173
800072c6:	10 9c       	mov	r12,r8
800072c8:	f0 1f 00 35 	mcall	8000739c <sd_mmc_mci_dma_read_open+0x184>
800072cc:	18 98       	mov	r8,r12
800072ce:	58 08       	cp.w	r8,0
800072d0:	c0 30       	breq	800072d6 <sd_mmc_mci_dma_read_open+0xbe>
  {
    return false;
800072d2:	30 08       	mov	r8,0
800072d4:	c5 28       	rjmp	80007378 <sd_mmc_mci_dma_read_open+0x160>
  }

  // Request Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
800072d6:	4a c8       	lddpc	r8,80007384 <sd_mmc_mci_dma_read_open+0x16c>
800072d8:	70 08       	ld.w	r8,r8[0x0]
800072da:	e0 6b 02 00 	mov	r11,512
800072de:	10 9c       	mov	r12,r8
800072e0:	f0 1f 00 30 	mcall	800073a0 <sd_mmc_mci_dma_read_open+0x188>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
800072e4:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800072e8:	4a 78       	lddpc	r8,80007384 <sd_mmc_mci_dma_read_open+0x16c>
800072ea:	70 08       	ld.w	r8,r8[0x0]
800072ec:	12 9b       	mov	r11,r9
800072ee:	10 9c       	mov	r12,r8
800072f0:	f0 1f 00 2d 	mcall	800073a4 <sd_mmc_mci_dma_read_open+0x18c>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
800072f4:	fc 18 ff 10 	movh	r8,0xff10
800072f8:	30 19       	mov	r9,1
800072fa:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
800072fe:	fe 68 40 00 	mov	r8,-114688
80007302:	30 09       	mov	r9,0
80007304:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
80007308:	fc 18 ff 10 	movh	r8,0xff10
8000730c:	30 09       	mov	r9,0
8000730e:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
80007312:	fc 18 ff 10 	movh	r8,0xff10
80007316:	e0 69 d8 24 	mov	r9,55332
8000731a:	ea 19 00 a0 	orh	r9,0xa0
8000731e:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
80007322:	fc 18 ff 10 	movh	r8,0xff10
80007326:	30 09       	mov	r9,0
80007328:	f1 49 00 98 	st.w	r8[152],r9
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: ignored because the dst is memory.
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: hw handshaking
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
8000732c:	fc 18 ff 10 	movh	r8,0xff10
80007330:	e0 69 01 00 	mov	r9,256
80007334:	f1 49 00 9c 	st.w	r8[156],r9
    (0                      << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf: ignored because the dst is memory.
    (AVR32_DMACA_CH_MMCI_RX << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf:
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
80007338:	fe 68 40 00 	mov	r8,-114688
8000733c:	e0 69 01 30 	mov	r9,304
80007340:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD17)
  if(mci_send_cmd(mci, SD_MMC_READ_MULTIPLE_BLOCK_CMD, addr)!=MCI_SUCCESS)
80007344:	49 08       	lddpc	r8,80007384 <sd_mmc_mci_dma_read_open+0x16c>
80007346:	70 08       	ld.w	r8,r8[0x0]
80007348:	ee fa ff fc 	ld.w	r10,r7[-4]
8000734c:	ec 7b 10 52 	mov	r11,856146
80007350:	10 9c       	mov	r12,r8
80007352:	f0 1f 00 13 	mcall	8000739c <sd_mmc_mci_dma_read_open+0x184>
80007356:	18 98       	mov	r8,r12
80007358:	58 08       	cp.w	r8,0
8000735a:	c0 30       	breq	80007360 <sd_mmc_mci_dma_read_open+0x148>
  {
    return false;
8000735c:	30 08       	mov	r8,0
8000735e:	c0 d8       	rjmp	80007378 <sd_mmc_mci_dma_read_open+0x160>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
80007360:	48 98       	lddpc	r8,80007384 <sd_mmc_mci_dma_read_open+0x16c>
80007362:	70 08       	ld.w	r8,r8[0x0]
80007364:	10 9c       	mov	r12,r8
80007366:	f0 1f 00 11 	mcall	800073a8 <sd_mmc_mci_dma_read_open+0x190>
8000736a:	18 98       	mov	r8,r12
8000736c:	e6 18 f0 50 	andh	r8,0xf050,COH
80007370:	c0 30       	breq	80007376 <sd_mmc_mci_dma_read_open+0x15e>
  {
    return false;
80007372:	30 08       	mov	r8,0
80007374:	c0 28       	rjmp	80007378 <sd_mmc_mci_dma_read_open+0x160>
  }

  return true;
80007376:	30 18       	mov	r8,1
}
80007378:	10 9c       	mov	r12,r8
8000737a:	2f bd       	sub	sp,-20
8000737c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007380:	00 00       	add	r0,r0
80007382:	0d b8       	ld.ub	r8,r6[0x3]
80007384:	00 00       	add	r0,r0
80007386:	01 34       	ld.ub	r4,r0++
80007388:	80 00       	ld.sh	r0,r0[0x0]
8000738a:	93 7c       	st.w	r9[0x1c],r12
8000738c:	00 00       	add	r0,r0
8000738e:	06 44       	or	r4,r3
80007390:	80 00       	ld.sh	r0,r0[0x0]
80007392:	93 38       	st.w	r9[0xc],r8
80007394:	00 00       	add	r0,r0
80007396:	0f c0       	ld.ub	r0,r7[0x4]
80007398:	00 00       	add	r0,r0
8000739a:	0b a8       	ld.ub	r8,r5[0x2]
8000739c:	80 00       	ld.sh	r0,r0[0x0]
8000739e:	91 e4       	st.w	r8[0x38],r4
800073a0:	80 00       	ld.sh	r0,r0[0x0]
800073a2:	91 64       	st.w	r8[0x18],r4
800073a4:	80 00       	ld.sh	r0,r0[0x0]
800073a6:	91 ae       	st.w	r8[0x28],lr
800073a8:	80 00       	ld.sh	r0,r0[0x0]
800073aa:	93 1c       	st.w	r9[0x4],r12

800073ac <sd_mmc_mci_read_close>:

bool sd_mmc_mci_read_close (uint8_t slot)
{
800073ac:	eb cd 40 80 	pushm	r7,lr
800073b0:	1a 97       	mov	r7,sp
800073b2:	20 3d       	sub	sp,12
800073b4:	18 98       	mov	r8,r12
800073b6:	ef 68 ff f4 	st.b	r7[-12],r8
  if( (mci_crc_error(mci)) )
800073ba:	4a 08       	lddpc	r8,80007438 <sd_mmc_mci_read_close+0x8c>
800073bc:	70 08       	ld.w	r8,r8[0x0]
800073be:	ef 48 ff f8 	st.w	r7[-8],r8
800073c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800073c6:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800073ca:	49 d8       	lddpc	r8,8000743c <sd_mmc_mci_read_close+0x90>
800073cc:	70 08       	ld.w	r8,r8[0x0]
800073ce:	10 99       	mov	r9,r8
800073d0:	e6 19 01 e0 	andh	r9,0x1e0,COH
800073d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800073d8:	71 08       	ld.w	r8,r8[0x40]
800073da:	f3 e8 10 08 	or	r8,r9,r8
800073de:	10 99       	mov	r9,r8
800073e0:	49 78       	lddpc	r8,8000743c <sd_mmc_mci_read_close+0x90>
800073e2:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800073e4:	49 68       	lddpc	r8,8000743c <sd_mmc_mci_read_close+0x90>
800073e6:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
800073e8:	e6 18 00 20 	andh	r8,0x20,COH
800073ec:	c0 90       	breq	800073fe <sd_mmc_mci_read_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
800073ee:	49 48       	lddpc	r8,8000743c <sd_mmc_mci_read_close+0x90>
800073f0:	70 08       	ld.w	r8,r8[0x0]
800073f2:	10 99       	mov	r9,r8
800073f4:	b5 d9       	cbr	r9,0x15
800073f6:	49 28       	lddpc	r8,8000743c <sd_mmc_mci_read_close+0x90>
800073f8:	91 09       	st.w	r8[0x0],r9
    return true;
800073fa:	30 18       	mov	r8,1
800073fc:	c0 28       	rjmp	80007400 <sd_mmc_mci_read_close+0x54>
  }
  else
    return false;
800073fe:	30 08       	mov	r8,0
80007400:	58 08       	cp.w	r8,0
80007402:	c0 30       	breq	80007408 <sd_mmc_mci_read_close+0x5c>
  {
    return false;  // An CRC error has been seen
80007404:	30 08       	mov	r8,0
80007406:	c1 48       	rjmp	8000742e <sd_mmc_mci_read_close+0x82>
  }

  mci_wait_busy_signal(mci);
80007408:	48 c8       	lddpc	r8,80007438 <sd_mmc_mci_read_close+0x8c>
8000740a:	70 08       	ld.w	r8,r8[0x0]
8000740c:	10 9c       	mov	r12,r8
8000740e:	f0 1f 00 0d 	mcall	80007440 <sd_mmc_mci_read_close+0x94>

  if( mci_send_cmd( mci, SD_MMC_STOP_READ_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
80007412:	48 a8       	lddpc	r8,80007438 <sd_mmc_mci_read_close+0x8c>
80007414:	70 08       	ld.w	r8,r8[0x0]
80007416:	3f fa       	mov	r10,-1
80007418:	e2 6b 10 4c 	mov	r11,135244
8000741c:	10 9c       	mov	r12,r8
8000741e:	f0 1f 00 0a 	mcall	80007444 <sd_mmc_mci_read_close+0x98>
80007422:	18 98       	mov	r8,r12
80007424:	58 08       	cp.w	r8,0
80007426:	c0 30       	breq	8000742c <sd_mmc_mci_read_close+0x80>
    return false;
80007428:	30 08       	mov	r8,0
8000742a:	c0 28       	rjmp	8000742e <sd_mmc_mci_read_close+0x82>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  return true;
8000742c:	30 18       	mov	r8,1
}
8000742e:	10 9c       	mov	r12,r8
80007430:	2f dd       	sub	sp,-12
80007432:	e3 cd 80 80 	ldm	sp++,r7,pc
80007436:	00 00       	add	r0,r0
80007438:	00 00       	add	r0,r0
8000743a:	01 34       	ld.ub	r4,r0++
8000743c:	00 00       	add	r0,r0
8000743e:	07 68       	ld.uh	r8,--r3
80007440:	80 00       	ld.sh	r0,r0[0x0]
80007442:	93 38       	st.w	r9[0xc],r8
80007444:	80 00       	ld.sh	r0,r0[0x0]
80007446:	91 e4       	st.w	r8[0x38],r4

80007448 <sd_mmc_mci_dma_write_open>:

  return true;
}

bool sd_mmc_mci_dma_write_open (uint8_t slot, uint32_t pos, const void* ram, uint16_t nb_sector)
{
80007448:	eb cd 40 80 	pushm	r7,lr
8000744c:	1a 97       	mov	r7,sp
8000744e:	20 5d       	sub	sp,20
80007450:	ef 4b ff f4 	st.w	r7[-12],r11
80007454:	ef 4a ff f0 	st.w	r7[-16],r10
80007458:	12 98       	mov	r8,r9
8000745a:	18 99       	mov	r9,r12
8000745c:	ef 69 ff f8 	st.b	r7[-8],r9
80007460:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
80007464:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007468:	30 18       	mov	r8,1
8000746a:	f0 09 18 00 	cp.b	r9,r8
8000746e:	e0 88 00 04 	brls	80007476 <sd_mmc_mci_dma_write_open+0x2e>
    return false;
80007472:	30 08       	mov	r8,0
80007474:	c8 88       	rjmp	80007584 <sd_mmc_mci_dma_write_open+0x13c>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80007476:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000747a:	4c 59       	lddpc	r9,8000758c <sd_mmc_mci_dma_write_open+0x144>
8000747c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007480:	10 9a       	mov	r10,r8
80007482:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007486:	4c 38       	lddpc	r8,80007590 <sd_mmc_mci_dma_write_open+0x148>
80007488:	70 08       	ld.w	r8,r8[0x0]
8000748a:	12 9b       	mov	r11,r9
8000748c:	10 9c       	mov	r12,r8
8000748e:	f0 1f 00 42 	mcall	80007594 <sd_mmc_mci_dma_write_open+0x14c>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
80007492:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007496:	4c 18       	lddpc	r8,80007598 <sd_mmc_mci_dma_write_open+0x150>
80007498:	ee fa ff f4 	ld.w	r10,r7[-12]
8000749c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
800074a0:	4b c8       	lddpc	r8,80007590 <sd_mmc_mci_dma_write_open+0x148>
800074a2:	70 08       	ld.w	r8,r8[0x0]
800074a4:	10 9c       	mov	r12,r8
800074a6:	f0 1f 00 3e 	mcall	8000759c <sd_mmc_mci_dma_write_open+0x154>
      return false;
   }
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
800074aa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800074ae:	4b b8       	lddpc	r8,80007598 <sd_mmc_mci_dma_write_open+0x150>
800074b0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800074b4:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800074b8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800074bc:	4b 99       	lddpc	r9,800075a0 <sd_mmc_mci_dma_write_open+0x158>
800074be:	f2 08 07 08 	ld.ub	r8,r9[r8]
800074c2:	e2 18 00 10 	andl	r8,0x10,COH
800074c6:	c0 e1       	brne	800074e2 <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
800074c8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800074cc:	4b 59       	lddpc	r9,800075a0 <sd_mmc_mci_dma_write_open+0x158>
800074ce:	f2 08 07 08 	ld.ub	r8,r9[r8]
800074d2:	e2 18 00 20 	andl	r8,0x20,COH
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800074d6:	c0 61       	brne	800074e2 <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
800074d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800074dc:	a9 78       	lsl	r8,0x9
800074de:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  // Set Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
800074e2:	4a c8       	lddpc	r8,80007590 <sd_mmc_mci_dma_write_open+0x148>
800074e4:	70 08       	ld.w	r8,r8[0x0]
800074e6:	e0 6b 02 00 	mov	r11,512
800074ea:	10 9c       	mov	r12,r8
800074ec:	f0 1f 00 2e 	mcall	800075a4 <sd_mmc_mci_dma_write_open+0x15c>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
800074f0:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800074f4:	4a 78       	lddpc	r8,80007590 <sd_mmc_mci_dma_write_open+0x148>
800074f6:	70 08       	ld.w	r8,r8[0x0]
800074f8:	12 9b       	mov	r11,r9
800074fa:	10 9c       	mov	r12,r8
800074fc:	f0 1f 00 2b 	mcall	800075a8 <sd_mmc_mci_dma_write_open+0x160>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
80007500:	fc 18 ff 10 	movh	r8,0xff10
80007504:	30 19       	mov	r9,1
80007506:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
8000750a:	fe 68 40 00 	mov	r8,-114688
8000750e:	30 09       	mov	r9,0
80007510:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
80007514:	fc 18 ff 10 	movh	r8,0xff10
80007518:	30 09       	mov	r9,0
8000751a:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
8000751e:	fc 18 ff 10 	movh	r8,0xff10
80007522:	e0 69 d8 24 	mov	r9,55332
80007526:	ea 19 02 10 	orh	r9,0x210
8000752a:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
8000752e:	fc 18 ff 10 	movh	r8,0xff10
80007532:	30 09       	mov	r9,0
80007534:	f1 49 00 98 	st.w	r8[152],r9
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: hw handshaking
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80007538:	fc 18 ff 10 	movh	r8,0xff10
8000753c:	e0 69 18 00 	mov	r9,6144
80007540:	f1 49 00 9c 	st.w	r8[156],r9
    (AVR32_DMACA_CH_MMCI_TX << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf:
    (0                      << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
80007544:	fe 68 40 00 	mov	r8,-114688
80007548:	e0 69 01 30 	mov	r9,304
8000754c:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD24)
  if(mci_send_cmd(mci, SD_MMC_WRITE_MULTIPLE_BLOCK_CMD, addr )!=MCI_SUCCESS)
80007550:	49 08       	lddpc	r8,80007590 <sd_mmc_mci_dma_write_open+0x148>
80007552:	70 08       	ld.w	r8,r8[0x0]
80007554:	ee fa ff fc 	ld.w	r10,r7[-4]
80007558:	e8 7b 10 59 	mov	r11,594009
8000755c:	10 9c       	mov	r12,r8
8000755e:	f0 1f 00 14 	mcall	800075ac <sd_mmc_mci_dma_write_open+0x164>
80007562:	18 98       	mov	r8,r12
80007564:	58 08       	cp.w	r8,0
80007566:	c0 30       	breq	8000756c <sd_mmc_mci_dma_write_open+0x124>
  {
    return false;
80007568:	30 08       	mov	r8,0
8000756a:	c0 d8       	rjmp	80007584 <sd_mmc_mci_dma_write_open+0x13c>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
8000756c:	48 98       	lddpc	r8,80007590 <sd_mmc_mci_dma_write_open+0x148>
8000756e:	70 08       	ld.w	r8,r8[0x0]
80007570:	10 9c       	mov	r12,r8
80007572:	f0 1f 00 10 	mcall	800075b0 <sd_mmc_mci_dma_write_open+0x168>
80007576:	18 98       	mov	r8,r12
80007578:	e6 18 f0 50 	andh	r8,0xf050,COH
8000757c:	c0 30       	breq	80007582 <sd_mmc_mci_dma_write_open+0x13a>
  {
    return false;
8000757e:	30 08       	mov	r8,0
80007580:	c0 28       	rjmp	80007584 <sd_mmc_mci_dma_write_open+0x13c>
  }

  return true;
80007582:	30 18       	mov	r8,1
}
80007584:	10 9c       	mov	r12,r8
80007586:	2f bd       	sub	sp,-20
80007588:	e3 cd 80 80 	ldm	sp++,r7,pc
8000758c:	00 00       	add	r0,r0
8000758e:	0d b8       	ld.ub	r8,r6[0x3]
80007590:	00 00       	add	r0,r0
80007592:	01 34       	ld.ub	r4,r0++
80007594:	80 00       	ld.sh	r0,r0[0x0]
80007596:	93 7c       	st.w	r9[0x1c],r12
80007598:	00 00       	add	r0,r0
8000759a:	06 44       	or	r4,r3
8000759c:	80 00       	ld.sh	r0,r0[0x0]
8000759e:	93 38       	st.w	r9[0xc],r8
800075a0:	00 00       	add	r0,r0
800075a2:	0f c0       	ld.ub	r0,r7[0x4]
800075a4:	80 00       	ld.sh	r0,r0[0x0]
800075a6:	91 64       	st.w	r8[0x18],r4
800075a8:	80 00       	ld.sh	r0,r0[0x0]
800075aa:	91 ae       	st.w	r8[0x28],lr
800075ac:	80 00       	ld.sh	r0,r0[0x0]
800075ae:	91 e4       	st.w	r8[0x38],r4
800075b0:	80 00       	ld.sh	r0,r0[0x0]
800075b2:	93 1c       	st.w	r9[0x4],r12

800075b4 <sd_mmc_mci_write_close>:

bool sd_mmc_mci_write_close (uint8_t slot)
{
800075b4:	eb cd 40 80 	pushm	r7,lr
800075b8:	1a 97       	mov	r7,sp
800075ba:	20 5d       	sub	sp,20
800075bc:	18 98       	mov	r8,r12
800075be:	ef 68 ff ec 	st.b	r7[-20],r8
  if( (mci_crc_error(mci)) )
800075c2:	4b 58       	lddpc	r8,80007694 <sd_mmc_mci_write_close+0xe0>
800075c4:	70 08       	ld.w	r8,r8[0x0]
800075c6:	ef 48 ff f0 	st.w	r7[-16],r8
800075ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800075ce:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800075d2:	4b 28       	lddpc	r8,80007698 <sd_mmc_mci_write_close+0xe4>
800075d4:	70 08       	ld.w	r8,r8[0x0]
800075d6:	10 99       	mov	r9,r8
800075d8:	e6 19 01 e0 	andh	r9,0x1e0,COH
800075dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800075e0:	71 08       	ld.w	r8,r8[0x40]
800075e2:	f3 e8 10 08 	or	r8,r9,r8
800075e6:	10 99       	mov	r9,r8
800075e8:	4a c8       	lddpc	r8,80007698 <sd_mmc_mci_write_close+0xe4>
800075ea:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800075ec:	4a b8       	lddpc	r8,80007698 <sd_mmc_mci_write_close+0xe4>
800075ee:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
800075f0:	e6 18 00 20 	andh	r8,0x20,COH
800075f4:	c0 90       	breq	80007606 <sd_mmc_mci_write_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
800075f6:	4a 98       	lddpc	r8,80007698 <sd_mmc_mci_write_close+0xe4>
800075f8:	70 08       	ld.w	r8,r8[0x0]
800075fa:	10 99       	mov	r9,r8
800075fc:	b5 d9       	cbr	r9,0x15
800075fe:	4a 78       	lddpc	r8,80007698 <sd_mmc_mci_write_close+0xe4>
80007600:	91 09       	st.w	r8[0x0],r9
    return true;
80007602:	30 18       	mov	r8,1
80007604:	c0 28       	rjmp	80007608 <sd_mmc_mci_write_close+0x54>
  }
  else
    return false;
80007606:	30 08       	mov	r8,0
80007608:	58 08       	cp.w	r8,0
8000760a:	c0 30       	breq	80007610 <sd_mmc_mci_write_close+0x5c>
  {
    return false;  // An CRC error has been seen
8000760c:	30 08       	mov	r8,0
8000760e:	c3 e8       	rjmp	8000768a <sd_mmc_mci_write_close+0xd6>
  }

  while(!(mci_data_block_ended(mci)));
80007610:	4a 18       	lddpc	r8,80007694 <sd_mmc_mci_write_close+0xe0>
80007612:	70 08       	ld.w	r8,r8[0x0]
80007614:	ef 48 ff f8 	st.w	r7[-8],r8
80007618:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000761c:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80007620:	49 e8       	lddpc	r8,80007698 <sd_mmc_mci_write_close+0xe4>
80007622:	70 08       	ld.w	r8,r8[0x0]
80007624:	10 99       	mov	r9,r8
80007626:	e6 19 01 e0 	andh	r9,0x1e0,COH
8000762a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000762e:	71 08       	ld.w	r8,r8[0x40]
80007630:	f3 e8 10 08 	or	r8,r9,r8
80007634:	10 99       	mov	r9,r8
80007636:	49 98       	lddpc	r8,80007698 <sd_mmc_mci_write_close+0xe4>
80007638:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
8000763a:	49 88       	lddpc	r8,80007698 <sd_mmc_mci_write_close+0xe4>
8000763c:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_data_block_ended(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_XFRDONE_MASK) != 0;
8000763e:	e6 18 08 00 	andh	r8,0x800,COH
80007642:	5f 18       	srne	r8
80007644:	58 08       	cp.w	r8,0
80007646:	ce 50       	breq	80007610 <sd_mmc_mci_write_close+0x5c>

  if( mci_send_cmd( mci, SD_MMC_STOP_WRITE_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
80007648:	49 38       	lddpc	r8,80007694 <sd_mmc_mci_write_close+0xe0>
8000764a:	70 08       	ld.w	r8,r8[0x0]
8000764c:	3f fa       	mov	r10,-1
8000764e:	e2 6b 10 cc 	mov	r11,135372
80007652:	10 9c       	mov	r12,r8
80007654:	f0 1f 00 12 	mcall	8000769c <sd_mmc_mci_write_close+0xe8>
80007658:	18 98       	mov	r8,r12
8000765a:	58 08       	cp.w	r8,0
8000765c:	c0 30       	breq	80007662 <sd_mmc_mci_write_close+0xae>
  {
    return false;
8000765e:	30 08       	mov	r8,0
80007660:	c1 58       	rjmp	8000768a <sd_mmc_mci_write_close+0xd6>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  if( slot==SD_SLOT_4BITS )
80007662:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80007666:	30 18       	mov	r8,1
80007668:	f0 09 18 00 	cp.b	r9,r8
8000766c:	c0 81       	brne	8000767c <sd_mmc_mci_write_close+0xc8>
  {
    while(!(gpio_get_pin_value(SD_SLOT_4BITS_DATA0_PIN)));                             // Wait until the card is ready.
8000766e:	31 3c       	mov	r12,19
80007670:	f0 1f 00 0c 	mcall	800076a0 <sd_mmc_mci_write_close+0xec>
80007674:	18 98       	mov	r8,r12
80007676:	58 08       	cp.w	r8,0
80007678:	cf b0       	breq	8000766e <sd_mmc_mci_write_close+0xba>
8000767a:	c0 78       	rjmp	80007688 <sd_mmc_mci_write_close+0xd4>
  }
  else
  {
    while(!(gpio_get_pin_value(SD_SLOT_8BITS_DATA0_PIN)));                             // Wait until the card is ready.
8000767c:	31 dc       	mov	r12,29
8000767e:	f0 1f 00 09 	mcall	800076a0 <sd_mmc_mci_write_close+0xec>
80007682:	18 98       	mov	r8,r12
80007684:	58 08       	cp.w	r8,0
80007686:	cf b0       	breq	8000767c <sd_mmc_mci_write_close+0xc8>
  }
  return true;
80007688:	30 18       	mov	r8,1
}
8000768a:	10 9c       	mov	r12,r8
8000768c:	2f bd       	sub	sp,-20
8000768e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007692:	00 00       	add	r0,r0
80007694:	00 00       	add	r0,r0
80007696:	01 34       	ld.ub	r4,r0++
80007698:	00 00       	add	r0,r0
8000769a:	07 68       	ld.uh	r8,--r3
8000769c:	80 00       	ld.sh	r0,r0[0x0]
8000769e:	91 e4       	st.w	r8[0x38],r4
800076a0:	80 00       	ld.sh	r0,r0[0x0]
800076a2:	8c 10       	ld.sh	r0,r6[0x2]

800076a4 <sd_mmc_mci_read_multiple_sector>:
		*dest++ = *source++;
	}
}

bool sd_mmc_mci_read_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
800076a4:	eb cd 40 80 	pushm	r7,lr
800076a8:	1a 97       	mov	r7,sp
800076aa:	20 4d       	sub	sp,16
800076ac:	18 99       	mov	r9,r12
800076ae:	16 98       	mov	r8,r11
800076b0:	ef 4a ff f0 	st.w	r7[-16],r10
800076b4:	ef 69 ff f8 	st.b	r7[-8],r9
800076b8:	ef 58 ff f4 	st.h	r7[-12],r8
  bool b_first_step=true;
800076bc:	30 18       	mov	r8,1
800076be:	ef 68 ff fc 	st.b	r7[-4],r8
  uint8_t   buffer_id=0;
800076c2:	30 08       	mov	r8,0
800076c4:	ef 68 ff fd 	st.b	r7[-3],r8
  uint16_t sector_index = 0;
800076c8:	30 08       	mov	r8,0
800076ca:	ef 58 ff fe 	st.h	r7[-2],r8
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
800076ce:	c5 48       	rjmp	80007776 <sd_mmc_mci_read_multiple_sector+0xd2>
  {
    // (re)load first stage.
    dma_mci_2_ram((0==(buffer_id++%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
800076d0:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800076d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800076d8:	5f 08       	sreq	r8
800076da:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800076de:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800076e2:	2f f8       	sub	r8,-1
800076e4:	ef 68 ff fd 	st.b	r7[-3],r8
800076e8:	58 09       	cp.w	r9,0
800076ea:	c0 30       	breq	800076f0 <sd_mmc_mci_read_multiple_sector+0x4c>
800076ec:	4c 18       	lddpc	r8,800077f0 <sd_mmc_mci_read_multiple_sector+0x14c>
800076ee:	c0 28       	rjmp	800076f2 <sd_mmc_mci_read_multiple_sector+0x4e>
800076f0:	4c 18       	lddpc	r8,800077f4 <sd_mmc_mci_read_multiple_sector+0x150>
800076f2:	e0 6b 02 00 	mov	r11,512
800076f6:	10 9c       	mov	r12,r8
800076f8:	f0 1f 00 40 	mcall	800077f8 <sd_mmc_mci_read_multiple_sector+0x154>

    // (re)load second stage.
    if( !b_first_step )
800076fc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007700:	ec 18 00 01 	eorl	r8,0x1
80007704:	5c 58       	castu.b	r8
80007706:	c2 e0       	breq	80007762 <sd_mmc_mci_read_multiple_sector+0xbe>
	{
      apply_aes_decryption(&AVR32_AES, (0==(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 0, 512, addr /*+ sector_index * 512L*/);
80007708:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000770c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007710:	c0 31       	brne	80007716 <sd_mmc_mci_read_multiple_sector+0x72>
80007712:	4b 8b       	lddpc	r11,800077f0 <sd_mmc_mci_read_multiple_sector+0x14c>
80007714:	c0 28       	rjmp	80007718 <sd_mmc_mci_read_multiple_sector+0x74>
80007716:	4b 8b       	lddpc	r11,800077f4 <sd_mmc_mci_read_multiple_sector+0x150>
80007718:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000771c:	e0 69 02 00 	mov	r9,512
80007720:	30 0a       	mov	r10,0
80007722:	fc 7c 00 00 	mov	r12,-196608
80007726:	f0 1f 00 36 	mcall	800077fc <sd_mmc_mci_read_multiple_sector+0x158>
	  addr = addr + 512L; //sector_index++;
8000772a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000772e:	f0 c8 fe 00 	sub	r8,r8,-512
80007732:	ef 48 ff f0 	st.w	r7[-16],r8
	  if (!udi_msc_trans_block(true, (0==(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
80007736:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000773a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000773e:	c0 31       	brne	80007744 <sd_mmc_mci_read_multiple_sector+0xa0>
80007740:	4a c8       	lddpc	r8,800077f0 <sd_mmc_mci_read_multiple_sector+0x14c>
80007742:	c0 28       	rjmp	80007746 <sd_mmc_mci_read_multiple_sector+0xa2>
80007744:	4a c8       	lddpc	r8,800077f4 <sd_mmc_mci_read_multiple_sector+0x150>
80007746:	30 09       	mov	r9,0
80007748:	e0 6a 02 00 	mov	r10,512
8000774c:	10 9b       	mov	r11,r8
8000774e:	30 1c       	mov	r12,1
80007750:	f0 1f 00 2c 	mcall	80007800 <sd_mmc_mci_read_multiple_sector+0x15c>
80007754:	18 98       	mov	r8,r12
80007756:	ec 18 00 01 	eorl	r8,0x1
8000775a:	5c 58       	castu.b	r8
8000775c:	c0 30       	breq	80007762 <sd_mmc_mci_read_multiple_sector+0xbe>
	  {
    	    return false;
8000775e:	30 08       	mov	r8,0
80007760:	c4 48       	rjmp	800077e8 <sd_mmc_mci_read_multiple_sector+0x144>
      }

    }
    b_first_step = false;
80007762:	30 08       	mov	r8,0
80007764:	ef 68 ff fc 	st.b	r7[-4],r8
    // Wait completion of DMACA stage.
    while( !is_dma_mci_2_ram_complete() );
80007768:	f0 1f 00 27 	mcall	80007804 <sd_mmc_mci_read_multiple_sector+0x160>
8000776c:	18 98       	mov	r8,r12
8000776e:	ec 18 00 01 	eorl	r8,0x1
80007772:	5c 58       	castu.b	r8
80007774:	cf a1       	brne	80007768 <sd_mmc_mci_read_multiple_sector+0xc4>
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
80007776:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8000777a:	30 08       	mov	r8,0
8000777c:	f0 09 19 00 	cp.h	r9,r8
80007780:	5f 18       	srne	r8
80007782:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007786:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000778a:	20 18       	sub	r8,1
8000778c:	ef 58 ff f4 	st.h	r7[-12],r8
80007790:	58 09       	cp.w	r9,0
80007792:	c9 f1       	brne	800076d0 <sd_mmc_mci_read_multiple_sector+0x2c>
    while( !is_dma_mci_2_ram_complete() );

  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_decryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 0, 512, addr /*+ sector_index * 512L*/);
80007794:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80007798:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000779c:	5c 58       	castu.b	r8
8000779e:	c0 30       	breq	800077a4 <sd_mmc_mci_read_multiple_sector+0x100>
800077a0:	49 4b       	lddpc	r11,800077f0 <sd_mmc_mci_read_multiple_sector+0x14c>
800077a2:	c0 28       	rjmp	800077a6 <sd_mmc_mci_read_multiple_sector+0x102>
800077a4:	49 4b       	lddpc	r11,800077f4 <sd_mmc_mci_read_multiple_sector+0x150>
800077a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800077aa:	e0 69 02 00 	mov	r9,512
800077ae:	30 0a       	mov	r10,0
800077b0:	fc 7c 00 00 	mov	r12,-196608
800077b4:	f0 1f 00 12 	mcall	800077fc <sd_mmc_mci_read_multiple_sector+0x158>
  if (!udi_msc_trans_block(true, (0!=(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
800077b8:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800077bc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800077c0:	5c 58       	castu.b	r8
800077c2:	c0 30       	breq	800077c8 <sd_mmc_mci_read_multiple_sector+0x124>
800077c4:	48 b8       	lddpc	r8,800077f0 <sd_mmc_mci_read_multiple_sector+0x14c>
800077c6:	c0 28       	rjmp	800077ca <sd_mmc_mci_read_multiple_sector+0x126>
800077c8:	48 b8       	lddpc	r8,800077f4 <sd_mmc_mci_read_multiple_sector+0x150>
800077ca:	30 09       	mov	r9,0
800077cc:	e0 6a 02 00 	mov	r10,512
800077d0:	10 9b       	mov	r11,r8
800077d2:	30 1c       	mov	r12,1
800077d4:	f0 1f 00 0b 	mcall	80007800 <sd_mmc_mci_read_multiple_sector+0x15c>
800077d8:	18 98       	mov	r8,r12
800077da:	ec 18 00 01 	eorl	r8,0x1
800077de:	5c 58       	castu.b	r8
800077e0:	c0 30       	breq	800077e6 <sd_mmc_mci_read_multiple_sector+0x142>
    return false;
800077e2:	30 08       	mov	r8,0
800077e4:	c0 28       	rjmp	800077e8 <sd_mmc_mci_read_multiple_sector+0x144>

  return true;
800077e6:	30 18       	mov	r8,1
}
800077e8:	10 9c       	mov	r12,r8
800077ea:	2f cd       	sub	sp,-16
800077ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800077f0:	00 00       	add	r0,r0
800077f2:	0d c0       	ld.ub	r0,r6[0x4]
800077f4:	00 00       	add	r0,r0
800077f6:	0b b8       	ld.ub	r8,r5[0x3]
800077f8:	80 00       	ld.sh	r0,r0[0x0]
800077fa:	70 58       	ld.w	r8,r8[0x14]
800077fc:	80 00       	ld.sh	r0,r0[0x0]
800077fe:	47 78       	lddsp	r8,sp[0x1dc]
80007800:	80 00       	ld.sh	r0,r0[0x0]
80007802:	ce d4       	brge	800077dc <sd_mmc_mci_read_multiple_sector+0x138>
80007804:	80 00       	ld.sh	r0,r0[0x0]
80007806:	70 a8       	ld.w	r8,r8[0x28]

80007808 <sd_mmc_mci_write_multiple_sector>:



bool sd_mmc_mci_write_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
80007808:	eb cd 40 80 	pushm	r7,lr
8000780c:	1a 97       	mov	r7,sp
8000780e:	20 4d       	sub	sp,16
80007810:	18 99       	mov	r9,r12
80007812:	16 98       	mov	r8,r11
80007814:	ef 4a ff f0 	st.w	r7[-16],r10
80007818:	ef 69 ff f8 	st.b	r7[-8],r9
8000781c:	ef 58 ff f4 	st.h	r7[-12],r8
  bool b_first_step=true;
80007820:	30 18       	mov	r8,1
80007822:	ef 68 ff fc 	st.b	r7[-4],r8
  uint8_t   buffer_id=0;
80007826:	30 08       	mov	r8,0
80007828:	ef 68 ff fd 	st.b	r7[-3],r8
  uint16_t sector_index = 0;
8000782c:	30 08       	mov	r8,0
8000782e:	ef 58 ff fe 	st.h	r7[-2],r8
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
80007832:	c5 58       	rjmp	800078dc <sd_mmc_mci_write_multiple_sector+0xd4>

    // (re)load second stage.
    if( !b_first_step )
80007834:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007838:	ec 18 00 01 	eorl	r8,0x1
8000783c:	5c 58       	castu.b	r8
8000783e:	c2 70       	breq	8000788c <sd_mmc_mci_write_multiple_sector+0x84>
	{
	  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 0, 512, addr /*+ sector_index * 512L*/);
80007840:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80007844:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007848:	5c 58       	castu.b	r8
8000784a:	c0 30       	breq	80007850 <sd_mmc_mci_write_multiple_sector+0x48>
8000784c:	4c 2b       	lddpc	r11,80007954 <sd_mmc_mci_write_multiple_sector+0x14c>
8000784e:	c0 28       	rjmp	80007852 <sd_mmc_mci_write_multiple_sector+0x4a>
80007850:	4c 2b       	lddpc	r11,80007958 <sd_mmc_mci_write_multiple_sector+0x150>
80007852:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007856:	e0 69 02 00 	mov	r9,512
8000785a:	30 0a       	mov	r10,0
8000785c:	fc 7c 00 00 	mov	r12,-196608
80007860:	f0 1f 00 3f 	mcall	8000795c <sd_mmc_mci_write_multiple_sector+0x154>
	  addr = addr + 512L; //sector_index++;
80007864:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007868:	f0 c8 fe 00 	sub	r8,r8,-512
8000786c:	ef 48 ff f0 	st.w	r7[-16],r8
      dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80007870:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80007874:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007878:	5c 58       	castu.b	r8
8000787a:	c0 30       	breq	80007880 <sd_mmc_mci_write_multiple_sector+0x78>
8000787c:	4b 68       	lddpc	r8,80007954 <sd_mmc_mci_write_multiple_sector+0x14c>
8000787e:	c0 28       	rjmp	80007882 <sd_mmc_mci_write_multiple_sector+0x7a>
80007880:	4b 68       	lddpc	r8,80007958 <sd_mmc_mci_write_multiple_sector+0x150>
80007882:	e0 6b 02 00 	mov	r11,512
80007886:	10 9c       	mov	r12,r8
80007888:	f0 1f 00 36 	mcall	80007960 <sd_mmc_mci_write_multiple_sector+0x158>
    }
    udi_msc_trans_block(false, (0==(buffer_id++%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL);
8000788c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80007890:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007894:	5f 08       	sreq	r8
80007896:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000789a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000789e:	2f f8       	sub	r8,-1
800078a0:	ef 68 ff fd 	st.b	r7[-3],r8
800078a4:	58 09       	cp.w	r9,0
800078a6:	c0 30       	breq	800078ac <sd_mmc_mci_write_multiple_sector+0xa4>
800078a8:	4a b8       	lddpc	r8,80007954 <sd_mmc_mci_write_multiple_sector+0x14c>
800078aa:	c0 28       	rjmp	800078ae <sd_mmc_mci_write_multiple_sector+0xa6>
800078ac:	4a b8       	lddpc	r8,80007958 <sd_mmc_mci_write_multiple_sector+0x150>
800078ae:	30 09       	mov	r9,0
800078b0:	e0 6a 02 00 	mov	r10,512
800078b4:	10 9b       	mov	r11,r8
800078b6:	30 0c       	mov	r12,0
800078b8:	f0 1f 00 2b 	mcall	80007964 <sd_mmc_mci_write_multiple_sector+0x15c>
    if( !b_first_step ) {
800078bc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800078c0:	ec 18 00 01 	eorl	r8,0x1
800078c4:	5c 58       	castu.b	r8
800078c6:	c0 80       	breq	800078d6 <sd_mmc_mci_write_multiple_sector+0xce>
      // Wait completion of DMACA stage.
      while( !is_dma_ram_2_mci_complete() );
800078c8:	f0 1f 00 28 	mcall	80007968 <sd_mmc_mci_write_multiple_sector+0x160>
800078cc:	18 98       	mov	r8,r12
800078ce:	ec 18 00 01 	eorl	r8,0x1
800078d2:	5c 58       	castu.b	r8
800078d4:	cf a1       	brne	800078c8 <sd_mmc_mci_write_multiple_sector+0xc0>
    }
    b_first_step=false;
800078d6:	30 08       	mov	r8,0
800078d8:	ef 68 ff fc 	st.b	r7[-4],r8
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
800078dc:	ef 09 ff f4 	ld.sh	r9,r7[-12]
800078e0:	30 08       	mov	r8,0
800078e2:	f0 09 19 00 	cp.h	r9,r8
800078e6:	5f 18       	srne	r8
800078e8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800078ec:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800078f0:	20 18       	sub	r8,1
800078f2:	ef 58 ff f4 	st.h	r7[-12],r8
800078f6:	58 09       	cp.w	r9,0
800078f8:	c9 e1       	brne	80007834 <sd_mmc_mci_write_multiple_sector+0x2c>
    }
    b_first_step=false;
  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 0, 512, addr /*+ sector_index * 512L*/);
800078fa:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800078fe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007902:	5c 58       	castu.b	r8
80007904:	c0 30       	breq	8000790a <sd_mmc_mci_write_multiple_sector+0x102>
80007906:	49 4b       	lddpc	r11,80007954 <sd_mmc_mci_write_multiple_sector+0x14c>
80007908:	c0 28       	rjmp	8000790c <sd_mmc_mci_write_multiple_sector+0x104>
8000790a:	49 4b       	lddpc	r11,80007958 <sd_mmc_mci_write_multiple_sector+0x150>
8000790c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007910:	e0 69 02 00 	mov	r9,512
80007914:	30 0a       	mov	r10,0
80007916:	fc 7c 00 00 	mov	r12,-196608
8000791a:	f0 1f 00 11 	mcall	8000795c <sd_mmc_mci_write_multiple_sector+0x154>
  dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
8000791e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80007922:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007926:	5c 58       	castu.b	r8
80007928:	c0 30       	breq	8000792e <sd_mmc_mci_write_multiple_sector+0x126>
8000792a:	48 b8       	lddpc	r8,80007954 <sd_mmc_mci_write_multiple_sector+0x14c>
8000792c:	c0 28       	rjmp	80007930 <sd_mmc_mci_write_multiple_sector+0x128>
8000792e:	48 b8       	lddpc	r8,80007958 <sd_mmc_mci_write_multiple_sector+0x150>
80007930:	e0 6b 02 00 	mov	r11,512
80007934:	10 9c       	mov	r12,r8
80007936:	f0 1f 00 0b 	mcall	80007960 <sd_mmc_mci_write_multiple_sector+0x158>
  while( !is_dma_ram_2_mci_complete() );
8000793a:	f0 1f 00 0c 	mcall	80007968 <sd_mmc_mci_write_multiple_sector+0x160>
8000793e:	18 98       	mov	r8,r12
80007940:	ec 18 00 01 	eorl	r8,0x1
80007944:	5c 58       	castu.b	r8
80007946:	cf a1       	brne	8000793a <sd_mmc_mci_write_multiple_sector+0x132>
  return true;
80007948:	30 18       	mov	r8,1
}
8000794a:	10 9c       	mov	r12,r8
8000794c:	2f cd       	sub	sp,-16
8000794e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007952:	00 00       	add	r0,r0
80007954:	00 00       	add	r0,r0
80007956:	0d c0       	ld.ub	r0,r6[0x4]
80007958:	00 00       	add	r0,r0
8000795a:	0b b8       	ld.ub	r8,r5[0x3]
8000795c:	80 00       	ld.sh	r0,r0[0x0]
8000795e:	46 54       	lddsp	r4,sp[0x194]
80007960:	80 00       	ld.sh	r0,r0[0x0]
80007962:	70 c8       	ld.w	r8,r8[0x30]
80007964:	80 00       	ld.sh	r0,r0[0x0]
80007966:	ce d4       	brge	80007940 <sd_mmc_mci_write_multiple_sector+0x138>
80007968:	80 00       	ld.sh	r0,r0[0x0]
8000796a:	71 18       	ld.w	r8,r8[0x44]

8000796c <sd_mmc_mci_cmd_send_status>:
   return true;
}
#endif      // end FUNC_MMC_CARD_SECU

bool  sd_mmc_mci_cmd_send_status(uint8_t slot)
{
8000796c:	eb cd 40 80 	pushm	r7,lr
80007970:	1a 97       	mov	r7,sp
80007972:	20 1d       	sub	sp,4
80007974:	18 98       	mov	r8,r12
80007976:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
8000797a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000797e:	30 18       	mov	r8,1
80007980:	f0 09 18 00 	cp.b	r9,r8
80007984:	e0 88 00 04 	brls	8000798c <sd_mmc_mci_cmd_send_status+0x20>
    return false;
80007988:	30 08       	mov	r8,0
8000798a:	c2 28       	rjmp	800079ce <sd_mmc_mci_cmd_send_status+0x62>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000798c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007990:	49 29       	lddpc	r9,800079d8 <sd_mmc_mci_cmd_send_status+0x6c>
80007992:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007996:	10 9a       	mov	r10,r8
80007998:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000799c:	49 08       	lddpc	r8,800079dc <sd_mmc_mci_cmd_send_status+0x70>
8000799e:	70 08       	ld.w	r8,r8[0x0]
800079a0:	12 9b       	mov	r11,r9
800079a2:	10 9c       	mov	r12,r8
800079a4:	f0 1f 00 0f 	mcall	800079e0 <sd_mmc_mci_cmd_send_status+0x74>

  if (mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800079a8:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800079ac:	48 e8       	lddpc	r8,800079e4 <sd_mmc_mci_cmd_send_status+0x78>
800079ae:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800079b2:	48 b8       	lddpc	r8,800079dc <sd_mmc_mci_cmd_send_status+0x70>
800079b4:	70 08       	ld.w	r8,r8[0x0]
800079b6:	12 9a       	mov	r10,r9
800079b8:	e0 6b 10 4d 	mov	r11,4173
800079bc:	10 9c       	mov	r12,r8
800079be:	f0 1f 00 0b 	mcall	800079e8 <sd_mmc_mci_cmd_send_status+0x7c>
800079c2:	18 98       	mov	r8,r12
800079c4:	58 08       	cp.w	r8,0
800079c6:	c0 30       	breq	800079cc <sd_mmc_mci_cmd_send_status+0x60>
    return false;
800079c8:	30 08       	mov	r8,0
800079ca:	c0 28       	rjmp	800079ce <sd_mmc_mci_cmd_send_status+0x62>

  return true;
800079cc:	30 18       	mov	r8,1
}
800079ce:	10 9c       	mov	r12,r8
800079d0:	2f fd       	sub	sp,-4
800079d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800079d6:	00 00       	add	r0,r0
800079d8:	00 00       	add	r0,r0
800079da:	0d b8       	ld.ub	r8,r6[0x3]
800079dc:	00 00       	add	r0,r0
800079de:	01 34       	ld.ub	r4,r0++
800079e0:	80 00       	ld.sh	r0,r0[0x0]
800079e2:	93 7c       	st.w	r9[0x1c],r12
800079e4:	00 00       	add	r0,r0
800079e6:	0b a8       	ld.ub	r8,r5[0x2]
800079e8:	80 00       	ld.sh	r0,r0[0x0]
800079ea:	91 e4       	st.w	r8[0x38],r4

800079ec <sd_mmc_mci_test_unit_ready>:
 */
//! @{


Ctrl_status sd_mmc_mci_test_unit_ready(uint8_t slot)
{
800079ec:	eb cd 40 80 	pushm	r7,lr
800079f0:	1a 97       	mov	r7,sp
800079f2:	20 1d       	sub	sp,4
800079f4:	18 98       	mov	r8,r12
800079f6:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS) return CTRL_FAIL;
800079fa:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800079fe:	30 18       	mov	r8,1
80007a00:	f0 09 18 00 	cp.b	r9,r8
80007a04:	e0 88 00 04 	brls	80007a0c <sd_mmc_mci_test_unit_ready+0x20>
80007a08:	30 18       	mov	r8,1
80007a0a:	c4 d8       	rjmp	80007aa4 <sd_mmc_mci_test_unit_ready+0xb8>

  Sd_mmc_mci_access_signal_on();
  switch (sd_mmc_mci_presence_status[slot])
80007a0c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007a10:	4a 79       	lddpc	r9,80007aac <sd_mmc_mci_test_unit_ready+0xc0>
80007a12:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007a16:	58 18       	cp.w	r8,1
80007a18:	c1 d0       	breq	80007a52 <sd_mmc_mci_test_unit_ready+0x66>
80007a1a:	58 28       	cp.w	r8,2
80007a1c:	c3 50       	breq	80007a86 <sd_mmc_mci_test_unit_ready+0x9a>
80007a1e:	58 08       	cp.w	r8,0
80007a20:	c3 b1       	brne	80007a96 <sd_mmc_mci_test_unit_ready+0xaa>
  {
    case SD_MMC_REMOVED:
      sd_mmc_mci_init_done[slot] = false;
80007a22:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007a26:	4a 3a       	lddpc	r10,80007ab0 <sd_mmc_mci_test_unit_ready+0xc4>
80007a28:	30 08       	mov	r8,0
80007a2a:	f4 09 0b 08 	st.b	r10[r9],r8
      if (sd_mmc_mci_mem_check(slot))
80007a2e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007a32:	10 9c       	mov	r12,r8
80007a34:	f0 1f 00 20 	mcall	80007ab4 <sd_mmc_mci_test_unit_ready+0xc8>
80007a38:	18 98       	mov	r8,r12
80007a3a:	58 08       	cp.w	r8,0
80007a3c:	c0 90       	breq	80007a4e <sd_mmc_mci_test_unit_ready+0x62>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_INSERTED;
80007a3e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007a42:	49 ba       	lddpc	r10,80007aac <sd_mmc_mci_test_unit_ready+0xc0>
80007a44:	30 18       	mov	r8,1
80007a46:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
80007a4a:	30 38       	mov	r8,3
80007a4c:	c2 c8       	rjmp	80007aa4 <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
80007a4e:	30 28       	mov	r8,2
80007a50:	c2 a8       	rjmp	80007aa4 <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_INSERTED:
      if (!sd_mmc_mci_mem_check(slot))
80007a52:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007a56:	10 9c       	mov	r12,r8
80007a58:	f0 1f 00 17 	mcall	80007ab4 <sd_mmc_mci_test_unit_ready+0xc8>
80007a5c:	18 98       	mov	r8,r12
80007a5e:	ec 18 00 01 	eorl	r8,0x1
80007a62:	5c 58       	castu.b	r8
80007a64:	c0 f0       	breq	80007a82 <sd_mmc_mci_test_unit_ready+0x96>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVING;
80007a66:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007a6a:	49 1a       	lddpc	r10,80007aac <sd_mmc_mci_test_unit_ready+0xc0>
80007a6c:	30 28       	mov	r8,2
80007a6e:	f4 09 0b 08 	st.b	r10[r9],r8
        sd_mmc_mci_init_done[slot] = false;
80007a72:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007a76:	48 fa       	lddpc	r10,80007ab0 <sd_mmc_mci_test_unit_ready+0xc4>
80007a78:	30 08       	mov	r8,0
80007a7a:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
80007a7e:	30 38       	mov	r8,3
80007a80:	c1 28       	rjmp	80007aa4 <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_GOOD;
80007a82:	30 08       	mov	r8,0
80007a84:	c1 08       	rjmp	80007aa4 <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_REMOVING:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
80007a86:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007a8a:	48 9a       	lddpc	r10,80007aac <sd_mmc_mci_test_unit_ready+0xc0>
80007a8c:	30 08       	mov	r8,0
80007a8e:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
80007a92:	30 28       	mov	r8,2
80007a94:	c0 88       	rjmp	80007aa4 <sd_mmc_mci_test_unit_ready+0xb8>

    default:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
80007a96:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007a9a:	48 5a       	lddpc	r10,80007aac <sd_mmc_mci_test_unit_ready+0xc0>
80007a9c:	30 08       	mov	r8,0
80007a9e:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_BUSY;
80007aa2:	30 38       	mov	r8,3
  }
}
80007aa4:	10 9c       	mov	r12,r8
80007aa6:	2f fd       	sub	sp,-4
80007aa8:	e3 cd 80 80 	ldm	sp++,r7,pc
80007aac:	00 00       	add	r0,r0
80007aae:	01 38       	ld.ub	r8,r0++
80007ab0:	00 00       	add	r0,r0
80007ab2:	06 38       	cp.w	r8,r3
80007ab4:	80 00       	ld.sh	r0,r0[0x0]
80007ab6:	71 38       	ld.w	r8,r8[0x4c]

80007ab8 <sd_mmc_mci_test_unit_ready_0>:


Ctrl_status sd_mmc_mci_test_unit_ready_0(void)
{
80007ab8:	eb cd 40 80 	pushm	r7,lr
80007abc:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(0);
80007abe:	30 0c       	mov	r12,0
80007ac0:	f0 1f 00 03 	mcall	80007acc <sd_mmc_mci_test_unit_ready_0+0x14>
80007ac4:	18 98       	mov	r8,r12
}
80007ac6:	10 9c       	mov	r12,r8
80007ac8:	e3 cd 80 80 	ldm	sp++,r7,pc
80007acc:	80 00       	ld.sh	r0,r0[0x0]
80007ace:	79 ec       	ld.w	r12,r12[0x78]

80007ad0 <sd_mmc_mci_test_unit_ready_1>:


Ctrl_status sd_mmc_mci_test_unit_ready_1(void)
{
80007ad0:	eb cd 40 80 	pushm	r7,lr
80007ad4:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(1);
80007ad6:	30 1c       	mov	r12,1
80007ad8:	f0 1f 00 03 	mcall	80007ae4 <sd_mmc_mci_test_unit_ready_1+0x14>
80007adc:	18 98       	mov	r8,r12
}
80007ade:	10 9c       	mov	r12,r8
80007ae0:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ae4:	80 00       	ld.sh	r0,r0[0x0]
80007ae6:	79 ec       	ld.w	r12,r12[0x78]

80007ae8 <sd_mmc_mci_read_capacity>:


Ctrl_status sd_mmc_mci_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
80007ae8:	eb cd 40 80 	pushm	r7,lr
80007aec:	1a 97       	mov	r7,sp
80007aee:	20 2d       	sub	sp,8
80007af0:	18 98       	mov	r8,r12
80007af2:	ef 4b ff f8 	st.w	r7[-8],r11
80007af6:	ef 68 ff fc 	st.b	r7[-4],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80007afa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007afe:	10 9c       	mov	r12,r8
80007b00:	f0 1f 00 0c 	mcall	80007b30 <sd_mmc_mci_read_capacity+0x48>
80007b04:	18 98       	mov	r8,r12
80007b06:	ec 18 00 01 	eorl	r8,0x1
80007b0a:	5c 58       	castu.b	r8
80007b0c:	c0 30       	breq	80007b12 <sd_mmc_mci_read_capacity+0x2a>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80007b0e:	30 28       	mov	r8,2
80007b10:	c0 c8       	rjmp	80007b28 <sd_mmc_mci_read_capacity+0x40>
   }
   *nb_sector = g_card_size[slot]-1;
80007b12:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b16:	48 88       	lddpc	r8,80007b34 <sd_mmc_mci_read_capacity+0x4c>
80007b18:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007b1c:	f0 c9 00 01 	sub	r9,r8,1
80007b20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b24:	91 09       	st.w	r8[0x0],r9
   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80007b26:	30 08       	mov	r8,0
}
80007b28:	10 9c       	mov	r12,r8
80007b2a:	2f ed       	sub	sp,-8
80007b2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b30:	80 00       	ld.sh	r0,r0[0x0]
80007b32:	71 38       	ld.w	r8,r8[0x4c]
80007b34:	00 00       	add	r0,r0
80007b36:	0b b0       	ld.ub	r0,r5[0x3]

80007b38 <sd_mmc_mci_read_capacity_0>:


Ctrl_status sd_mmc_mci_read_capacity_0(uint32_t *nb_sector)
{
80007b38:	eb cd 40 80 	pushm	r7,lr
80007b3c:	1a 97       	mov	r7,sp
80007b3e:	20 1d       	sub	sp,4
80007b40:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(0, nb_sector);
80007b44:	ee fb ff fc 	ld.w	r11,r7[-4]
80007b48:	30 0c       	mov	r12,0
80007b4a:	f0 1f 00 04 	mcall	80007b58 <sd_mmc_mci_read_capacity_0+0x20>
80007b4e:	18 98       	mov	r8,r12
}
80007b50:	10 9c       	mov	r12,r8
80007b52:	2f fd       	sub	sp,-4
80007b54:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b58:	80 00       	ld.sh	r0,r0[0x0]
80007b5a:	7a e8       	ld.w	r8,sp[0x38]

80007b5c <sd_mmc_mci_read_capacity_1>:


Ctrl_status sd_mmc_mci_read_capacity_1(uint32_t *nb_sector)
{
80007b5c:	eb cd 40 80 	pushm	r7,lr
80007b60:	1a 97       	mov	r7,sp
80007b62:	20 1d       	sub	sp,4
80007b64:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(1, nb_sector);
80007b68:	ee fb ff fc 	ld.w	r11,r7[-4]
80007b6c:	30 1c       	mov	r12,1
80007b6e:	f0 1f 00 04 	mcall	80007b7c <sd_mmc_mci_read_capacity_1+0x20>
80007b72:	18 98       	mov	r8,r12
}
80007b74:	10 9c       	mov	r12,r8
80007b76:	2f fd       	sub	sp,-4
80007b78:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b7c:	80 00       	ld.sh	r0,r0[0x0]
80007b7e:	7a e8       	ld.w	r8,sp[0x38]

80007b80 <sd_mmc_mci_wr_protect>:


bool sd_mmc_mci_wr_protect(uint8_t slot)
{
80007b80:	eb cd 40 80 	pushm	r7,lr
80007b84:	1a 97       	mov	r7,sp
80007b86:	20 1d       	sub	sp,4
80007b88:	18 98       	mov	r8,r12
80007b8a:	ef 68 ff fc 	st.b	r7[-4],r8
  return is_sd_mmc_mci_card_protected(slot);
80007b8e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007b92:	10 9c       	mov	r12,r8
80007b94:	f0 1f 00 04 	mcall	80007ba4 <sd_mmc_mci_wr_protect+0x24>
80007b98:	18 98       	mov	r8,r12
}
80007b9a:	10 9c       	mov	r12,r8
80007b9c:	2f fd       	sub	sp,-4
80007b9e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ba2:	00 00       	add	r0,r0
80007ba4:	80 00       	ld.sh	r0,r0[0x0]
80007ba6:	60 dc       	ld.w	r12,r0[0x34]

80007ba8 <sd_mmc_mci_wr_protect_0>:


bool sd_mmc_mci_wr_protect_0(void)
{
80007ba8:	eb cd 40 80 	pushm	r7,lr
80007bac:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(0);
80007bae:	30 0c       	mov	r12,0
80007bb0:	f0 1f 00 03 	mcall	80007bbc <sd_mmc_mci_wr_protect_0+0x14>
80007bb4:	18 98       	mov	r8,r12
}
80007bb6:	10 9c       	mov	r12,r8
80007bb8:	e3 cd 80 80 	ldm	sp++,r7,pc
80007bbc:	80 00       	ld.sh	r0,r0[0x0]
80007bbe:	7b 80       	ld.w	r0,sp[0x60]

80007bc0 <sd_mmc_mci_wr_protect_1>:


bool sd_mmc_mci_wr_protect_1(void)
{
80007bc0:	eb cd 40 80 	pushm	r7,lr
80007bc4:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(1);
80007bc6:	30 1c       	mov	r12,1
80007bc8:	f0 1f 00 03 	mcall	80007bd4 <sd_mmc_mci_wr_protect_1+0x14>
80007bcc:	18 98       	mov	r8,r12
}
80007bce:	10 9c       	mov	r12,r8
80007bd0:	e3 cd 80 80 	ldm	sp++,r7,pc
80007bd4:	80 00       	ld.sh	r0,r0[0x0]
80007bd6:	7b 80       	ld.w	r0,sp[0x60]

80007bd8 <sd_mmc_mci_removal>:


bool sd_mmc_mci_removal(uint8_t slot)
{
80007bd8:	eb cd 40 80 	pushm	r7,lr
80007bdc:	1a 97       	mov	r7,sp
80007bde:	20 1d       	sub	sp,4
80007be0:	18 98       	mov	r8,r12
80007be2:	ef 68 ff fc 	st.b	r7[-4],r8
  return false;
80007be6:	30 08       	mov	r8,0
}
80007be8:	10 9c       	mov	r12,r8
80007bea:	2f fd       	sub	sp,-4
80007bec:	e3 cd 80 80 	ldm	sp++,r7,pc

80007bf0 <sd_mmc_mci_removal_0>:


bool sd_mmc_mci_removal_0(void)
{
80007bf0:	eb cd 40 80 	pushm	r7,lr
80007bf4:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(0);
80007bf6:	30 0c       	mov	r12,0
80007bf8:	f0 1f 00 03 	mcall	80007c04 <sd_mmc_mci_removal_0+0x14>
80007bfc:	18 98       	mov	r8,r12
}
80007bfe:	10 9c       	mov	r12,r8
80007c00:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c04:	80 00       	ld.sh	r0,r0[0x0]
80007c06:	7b d8       	ld.w	r8,sp[0x74]

80007c08 <sd_mmc_mci_removal_1>:


bool sd_mmc_mci_removal_1(void)
{
80007c08:	eb cd 40 80 	pushm	r7,lr
80007c0c:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(1);
80007c0e:	30 1c       	mov	r12,1
80007c10:	f0 1f 00 03 	mcall	80007c1c <sd_mmc_mci_removal_1+0x14>
80007c14:	18 98       	mov	r8,r12
}
80007c16:	10 9c       	mov	r12,r8
80007c18:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c1c:	80 00       	ld.sh	r0,r0[0x0]
80007c1e:	7b d8       	ld.w	r8,sp[0x74]

80007c20 <sd_mmc_mci_usb_read_10>:
 */
//! @{


Ctrl_status sd_mmc_mci_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
80007c20:	eb cd 40 80 	pushm	r7,lr
80007c24:	1a 97       	mov	r7,sp
80007c26:	20 3d       	sub	sp,12
80007c28:	18 99       	mov	r9,r12
80007c2a:	ef 4b ff f8 	st.w	r7[-8],r11
80007c2e:	14 98       	mov	r8,r10
80007c30:	ef 69 ff fc 	st.b	r7[-4],r9
80007c34:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80007c38:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007c3c:	10 9c       	mov	r12,r8
80007c3e:	f0 1f 00 1f 	mcall	80007cb8 <sd_mmc_mci_usb_read_10+0x98>
80007c42:	18 98       	mov	r8,r12
80007c44:	ec 18 00 01 	eorl	r8,0x1
80007c48:	5c 58       	castu.b	r8
80007c4a:	c0 30       	breq	80007c50 <sd_mmc_mci_usb_read_10+0x30>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80007c4c:	30 28       	mov	r8,2
80007c4e:	c3 08       	rjmp	80007cae <sd_mmc_mci_usb_read_10+0x8e>
   }

   if( !sd_mmc_mci_dma_read_open(slot, addr, NULL, nb_sector) )
80007c50:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007c54:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007c58:	30 0a       	mov	r10,0
80007c5a:	ee fb ff f8 	ld.w	r11,r7[-8]
80007c5e:	10 9c       	mov	r12,r8
80007c60:	f0 1f 00 17 	mcall	80007cbc <sd_mmc_mci_usb_read_10+0x9c>
80007c64:	18 98       	mov	r8,r12
80007c66:	ec 18 00 01 	eorl	r8,0x1
80007c6a:	5c 58       	castu.b	r8
80007c6c:	c0 30       	breq	80007c72 <sd_mmc_mci_usb_read_10+0x52>
     return CTRL_FAIL;
80007c6e:	30 18       	mov	r8,1
80007c70:	c1 f8       	rjmp	80007cae <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_multiple_sector(slot, nb_sector, addr) )
80007c72:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007c76:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007c7a:	ee fa ff f8 	ld.w	r10,r7[-8]
80007c7e:	12 9b       	mov	r11,r9
80007c80:	10 9c       	mov	r12,r8
80007c82:	f0 1f 00 10 	mcall	80007cc0 <sd_mmc_mci_usb_read_10+0xa0>
80007c86:	18 98       	mov	r8,r12
80007c88:	ec 18 00 01 	eorl	r8,0x1
80007c8c:	5c 58       	castu.b	r8
80007c8e:	c0 30       	breq	80007c94 <sd_mmc_mci_usb_read_10+0x74>
     return CTRL_FAIL;
80007c90:	30 18       	mov	r8,1
80007c92:	c0 e8       	rjmp	80007cae <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_close(slot) )
80007c94:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007c98:	10 9c       	mov	r12,r8
80007c9a:	f0 1f 00 0b 	mcall	80007cc4 <sd_mmc_mci_usb_read_10+0xa4>
80007c9e:	18 98       	mov	r8,r12
80007ca0:	ec 18 00 01 	eorl	r8,0x1
80007ca4:	5c 58       	castu.b	r8
80007ca6:	c0 30       	breq	80007cac <sd_mmc_mci_usb_read_10+0x8c>
     return CTRL_FAIL;
80007ca8:	30 18       	mov	r8,1
80007caa:	c0 28       	rjmp	80007cae <sd_mmc_mci_usb_read_10+0x8e>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80007cac:	30 08       	mov	r8,0
}
80007cae:	10 9c       	mov	r12,r8
80007cb0:	2f dd       	sub	sp,-12
80007cb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80007cb6:	00 00       	add	r0,r0
80007cb8:	80 00       	ld.sh	r0,r0[0x0]
80007cba:	71 38       	ld.w	r8,r8[0x4c]
80007cbc:	80 00       	ld.sh	r0,r0[0x0]
80007cbe:	72 18       	ld.w	r8,r9[0x4]
80007cc0:	80 00       	ld.sh	r0,r0[0x0]
80007cc2:	76 a4       	ld.w	r4,r11[0x28]
80007cc4:	80 00       	ld.sh	r0,r0[0x0]
80007cc6:	73 ac       	ld.w	r12,r9[0x68]

80007cc8 <sd_mmc_mci_usb_read_10_0>:


Ctrl_status sd_mmc_mci_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
80007cc8:	eb cd 40 80 	pushm	r7,lr
80007ccc:	1a 97       	mov	r7,sp
80007cce:	20 2d       	sub	sp,8
80007cd0:	ef 4c ff fc 	st.w	r7[-4],r12
80007cd4:	16 98       	mov	r8,r11
80007cd6:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(0, addr, nb_sector);
80007cda:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007cde:	10 9a       	mov	r10,r8
80007ce0:	ee fb ff fc 	ld.w	r11,r7[-4]
80007ce4:	30 0c       	mov	r12,0
80007ce6:	f0 1f 00 04 	mcall	80007cf4 <sd_mmc_mci_usb_read_10_0+0x2c>
80007cea:	18 98       	mov	r8,r12
}
80007cec:	10 9c       	mov	r12,r8
80007cee:	2f ed       	sub	sp,-8
80007cf0:	e3 cd 80 80 	ldm	sp++,r7,pc
80007cf4:	80 00       	ld.sh	r0,r0[0x0]
80007cf6:	7c 20       	ld.w	r0,lr[0x8]

80007cf8 <sd_mmc_mci_usb_read_10_1>:


Ctrl_status sd_mmc_mci_usb_read_10_1(uint32_t addr, uint16_t nb_sector)
{
80007cf8:	eb cd 40 80 	pushm	r7,lr
80007cfc:	1a 97       	mov	r7,sp
80007cfe:	20 2d       	sub	sp,8
80007d00:	ef 4c ff fc 	st.w	r7[-4],r12
80007d04:	16 98       	mov	r8,r11
80007d06:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(1, addr, nb_sector);
80007d0a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007d0e:	10 9a       	mov	r10,r8
80007d10:	ee fb ff fc 	ld.w	r11,r7[-4]
80007d14:	30 1c       	mov	r12,1
80007d16:	f0 1f 00 04 	mcall	80007d24 <sd_mmc_mci_usb_read_10_1+0x2c>
80007d1a:	18 98       	mov	r8,r12
}
80007d1c:	10 9c       	mov	r12,r8
80007d1e:	2f ed       	sub	sp,-8
80007d20:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d24:	80 00       	ld.sh	r0,r0[0x0]
80007d26:	7c 20       	ld.w	r0,lr[0x8]

80007d28 <sd_mmc_mci_usb_write_10>:
#endif
}


Ctrl_status sd_mmc_mci_usb_write_10(uint8_t slot,uint32_t addr, uint16_t nb_sector)
{
80007d28:	eb cd 40 80 	pushm	r7,lr
80007d2c:	1a 97       	mov	r7,sp
80007d2e:	20 3d       	sub	sp,12
80007d30:	18 99       	mov	r9,r12
80007d32:	ef 4b ff f8 	st.w	r7[-8],r11
80007d36:	14 98       	mov	r8,r10
80007d38:	ef 69 ff fc 	st.b	r7[-4],r9
80007d3c:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) || stSystemStatus.unlock_password_status == 0)
80007d40:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007d44:	10 9c       	mov	r12,r8
80007d46:	f0 1f 00 21 	mcall	80007dc8 <sd_mmc_mci_usb_write_10+0xa0>
80007d4a:	18 98       	mov	r8,r12
80007d4c:	ec 18 00 01 	eorl	r8,0x1
80007d50:	5c 58       	castu.b	r8
80007d52:	c0 61       	brne	80007d5e <sd_mmc_mci_usb_write_10+0x36>
80007d54:	49 e8       	lddpc	r8,80007dcc <sd_mmc_mci_usb_write_10+0xa4>
80007d56:	70 08       	ld.w	r8,r8[0x0]
80007d58:	e6 18 40 00 	andh	r8,0x4000,COH
80007d5c:	c0 31       	brne	80007d62 <sd_mmc_mci_usb_write_10+0x3a>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80007d5e:	30 28       	mov	r8,2
80007d60:	c3 08       	rjmp	80007dc0 <sd_mmc_mci_usb_write_10+0x98>
   }

   if( !sd_mmc_mci_dma_write_open(slot, addr, NULL, nb_sector) )
80007d62:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007d66:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007d6a:	30 0a       	mov	r10,0
80007d6c:	ee fb ff f8 	ld.w	r11,r7[-8]
80007d70:	10 9c       	mov	r12,r8
80007d72:	f0 1f 00 18 	mcall	80007dd0 <sd_mmc_mci_usb_write_10+0xa8>
80007d76:	18 98       	mov	r8,r12
80007d78:	ec 18 00 01 	eorl	r8,0x1
80007d7c:	5c 58       	castu.b	r8
80007d7e:	c0 30       	breq	80007d84 <sd_mmc_mci_usb_write_10+0x5c>
     return CTRL_FAIL;
80007d80:	30 18       	mov	r8,1
80007d82:	c1 f8       	rjmp	80007dc0 <sd_mmc_mci_usb_write_10+0x98>

   if( !sd_mmc_mci_write_multiple_sector(slot, nb_sector, addr) )
80007d84:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007d88:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007d8c:	ee fa ff f8 	ld.w	r10,r7[-8]
80007d90:	12 9b       	mov	r11,r9
80007d92:	10 9c       	mov	r12,r8
80007d94:	f0 1f 00 10 	mcall	80007dd4 <sd_mmc_mci_usb_write_10+0xac>
80007d98:	18 98       	mov	r8,r12
80007d9a:	ec 18 00 01 	eorl	r8,0x1
80007d9e:	5c 58       	castu.b	r8
80007da0:	c0 30       	breq	80007da6 <sd_mmc_mci_usb_write_10+0x7e>
     return CTRL_FAIL;
80007da2:	30 18       	mov	r8,1
80007da4:	c0 e8       	rjmp	80007dc0 <sd_mmc_mci_usb_write_10+0x98>

   if( !sd_mmc_mci_write_close(slot) )
80007da6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007daa:	10 9c       	mov	r12,r8
80007dac:	f0 1f 00 0b 	mcall	80007dd8 <sd_mmc_mci_usb_write_10+0xb0>
80007db0:	18 98       	mov	r8,r12
80007db2:	ec 18 00 01 	eorl	r8,0x1
80007db6:	5c 58       	castu.b	r8
80007db8:	c0 30       	breq	80007dbe <sd_mmc_mci_usb_write_10+0x96>
     return CTRL_FAIL;
80007dba:	30 18       	mov	r8,1
80007dbc:	c0 28       	rjmp	80007dc0 <sd_mmc_mci_usb_write_10+0x98>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80007dbe:	30 08       	mov	r8,0

}
80007dc0:	10 9c       	mov	r12,r8
80007dc2:	2f dd       	sub	sp,-12
80007dc4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007dc8:	80 00       	ld.sh	r0,r0[0x0]
80007dca:	71 38       	ld.w	r8,r8[0x4c]
80007dcc:	00 00       	add	r0,r0
80007dce:	0b a4       	ld.ub	r4,r5[0x2]
80007dd0:	80 00       	ld.sh	r0,r0[0x0]
80007dd2:	74 48       	ld.w	r8,r10[0x10]
80007dd4:	80 00       	ld.sh	r0,r0[0x0]
80007dd6:	78 08       	ld.w	r8,r12[0x0]
80007dd8:	80 00       	ld.sh	r0,r0[0x0]
80007dda:	75 b4       	ld.w	r4,r10[0x6c]

80007ddc <sd_mmc_mci_usb_write_10_0>:


Ctrl_status sd_mmc_mci_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
80007ddc:	eb cd 40 80 	pushm	r7,lr
80007de0:	1a 97       	mov	r7,sp
80007de2:	20 2d       	sub	sp,8
80007de4:	ef 4c ff fc 	st.w	r7[-4],r12
80007de8:	16 98       	mov	r8,r11
80007dea:	ef 58 ff f8 	st.h	r7[-8],r8
	if (stSystemStatus.read_only_mode_0_status == 0)
80007dee:	48 b8       	lddpc	r8,80007e18 <sd_mmc_mci_usb_write_10_0+0x3c>
80007df0:	70 08       	ld.w	r8,r8[0x0]
80007df2:	e6 18 20 00 	andh	r8,0x2000,COH
80007df6:	c0 31       	brne	80007dfc <sd_mmc_mci_usb_write_10_0+0x20>
	{
		return CTRL_FAIL;
80007df8:	30 18       	mov	r8,1
80007dfa:	c0 a8       	rjmp	80007e0e <sd_mmc_mci_usb_write_10_0+0x32>
	}
	else
	{		
		return sd_mmc_mci_usb_write_10(0, addr, nb_sector);
80007dfc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007e00:	10 9a       	mov	r10,r8
80007e02:	ee fb ff fc 	ld.w	r11,r7[-4]
80007e06:	30 0c       	mov	r12,0
80007e08:	f0 1f 00 05 	mcall	80007e1c <sd_mmc_mci_usb_write_10_0+0x40>
80007e0c:	18 98       	mov	r8,r12
	}		
}
80007e0e:	10 9c       	mov	r12,r8
80007e10:	2f ed       	sub	sp,-8
80007e12:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e16:	00 00       	add	r0,r0
80007e18:	00 00       	add	r0,r0
80007e1a:	0b a4       	ld.ub	r4,r5[0x2]
80007e1c:	80 00       	ld.sh	r0,r0[0x0]
80007e1e:	7d 28       	ld.w	r8,lr[0x48]

80007e20 <sd_mmc_mci_usb_write_10_1>:


Ctrl_status sd_mmc_mci_usb_write_10_1(uint32_t addr, uint16_t nb_sector)
{
80007e20:	eb cd 40 80 	pushm	r7,lr
80007e24:	1a 97       	mov	r7,sp
80007e26:	20 2d       	sub	sp,8
80007e28:	ef 4c ff fc 	st.w	r7[-4],r12
80007e2c:	16 98       	mov	r8,r11
80007e2e:	ef 58 ff f8 	st.h	r7[-8],r8
	if (stSystemStatus.read_only_mode_1_status == 0)
80007e32:	48 b8       	lddpc	r8,80007e5c <sd_mmc_mci_usb_write_10_1+0x3c>
80007e34:	70 08       	ld.w	r8,r8[0x0]
80007e36:	e6 18 10 00 	andh	r8,0x1000,COH
80007e3a:	c0 31       	brne	80007e40 <sd_mmc_mci_usb_write_10_1+0x20>
	{
		return CTRL_FAIL;
80007e3c:	30 18       	mov	r8,1
80007e3e:	c0 a8       	rjmp	80007e52 <sd_mmc_mci_usb_write_10_1+0x32>
	}
	else
	{		
		return sd_mmc_mci_usb_write_10(1, addr, nb_sector);
80007e40:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007e44:	10 9a       	mov	r10,r8
80007e46:	ee fb ff fc 	ld.w	r11,r7[-4]
80007e4a:	30 1c       	mov	r12,1
80007e4c:	f0 1f 00 05 	mcall	80007e60 <sd_mmc_mci_usb_write_10_1+0x40>
80007e50:	18 98       	mov	r8,r12
	}		
}
80007e52:	10 9c       	mov	r12,r8
80007e54:	2f ed       	sub	sp,-8
80007e56:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e5a:	00 00       	add	r0,r0
80007e5c:	00 00       	add	r0,r0
80007e5e:	0b a4       	ld.ub	r4,r5[0x2]
80007e60:	80 00       	ld.sh	r0,r0[0x0]
80007e62:	7d 28       	ld.w	r8,lr[0x48]

80007e64 <aes_configure>:




void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
80007e64:	eb cd 40 80 	pushm	r7,lr
80007e68:	1a 97       	mov	r7,sp
80007e6a:	20 2d       	sub	sp,8
80007e6c:	ef 4c ff fc 	st.w	r7[-4],r12
80007e70:	ef 4b ff f8 	st.w	r7[-8],r11
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
80007e74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e78:	11 88       	ld.ub	r8,r8[0x0]
80007e7a:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
            ((pAesConfig->ProcessingDelay << AVR32_AES_MR_PROCDLY_OFFSET) & AVR32_AES_MR_PROCDLY_MASK) |
80007e7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e82:	11 98       	ld.ub	r8,r8[0x1]
80007e84:	a5 68       	lsl	r8,0x4
80007e86:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80007e8a:	10 49       	or	r9,r8
            ((pAesConfig->StartMode << AVR32_AES_MR_SMOD_OFFSET) & AVR32_AES_MR_SMOD_MASK) |
80007e8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e90:	11 a8       	ld.ub	r8,r8[0x2]
80007e92:	a9 68       	lsl	r8,0x8
80007e94:	e2 18 03 00 	andl	r8,0x300,COH
80007e98:	10 49       	or	r9,r8
            ((pAesConfig->KeySize << AVR32_AES_MR_KEYSIZE_OFFSET) & AVR32_AES_MR_KEYSIZE_MASK) |
80007e9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e9e:	11 b8       	ld.ub	r8,r8[0x3]
80007ea0:	ab 68       	lsl	r8,0xa
80007ea2:	e2 18 0c 00 	andl	r8,0xc00,COH
80007ea6:	10 49       	or	r9,r8
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
80007ea8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007eac:	11 c8       	ld.ub	r8,r8[0x4]
80007eae:	ad 68       	lsl	r8,0xc
80007eb0:	e2 18 70 00 	andl	r8,0x7000,COH
80007eb4:	10 49       	or	r9,r8
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
80007eb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007eba:	11 d8       	ld.ub	r8,r8[0x5]
80007ebc:	af 78       	lsl	r8,0xf
80007ebe:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80007ec2:	10 49       	or	r9,r8
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
80007ec4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ec8:	11 e8       	ld.ub	r8,r8[0x6]
80007eca:	b1 68       	lsl	r8,0x10
80007ecc:	e6 18 00 07 	andh	r8,0x7,COH
80007ed0:	10 49       	or	r9,r8
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
80007ed2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ed6:	11 f8       	ld.ub	r8,r8[0x7]
80007ed8:	b9 68       	lsl	r8,0x18
80007eda:	e6 18 1f 00 	andh	r8,0x1f00,COH
80007ede:	f3 e8 10 08 	or	r8,r9,r8



void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
80007ee2:	ea 18 00 e0 	orh	r8,0xe0
80007ee6:	10 99       	mov	r9,r8
80007ee8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007eec:	91 19       	st.w	r8[0x4],r9
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
            ((AES_CKEY << AVR32_AES_MR_CKEY_OFFSET) & AVR32_AES_MR_CKEY_MASK);
}
80007eee:	2f ed       	sub	sp,-8
80007ef0:	e3 cd 80 80 	ldm	sp++,r7,pc

80007ef4 <aes_set_key>:
  return(aes->isr);
}


void aes_set_key( volatile avr32_aes_t *aes, const unsigned long int *pKey)
{
80007ef4:	eb cd 40 80 	pushm	r7,lr
80007ef8:	1a 97       	mov	r7,sp
80007efa:	20 4d       	sub	sp,16
80007efc:	ef 4c ff f4 	st.w	r7[-12],r12
80007f00:	ef 4b ff f0 	st.w	r7[-16],r11
  unsigned long int volatile *pTempo = &(aes->keyw1r);
80007f04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007f08:	2e 08       	sub	r8,-32
80007f0a:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char       keylen = 0;
80007f0e:	30 08       	mov	r8,0
80007f10:	ef 68 ff ff 	st.b	r7[-1],r8


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
80007f14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007f18:	70 18       	ld.w	r8,r8[0x4]
80007f1a:	e2 18 0c 00 	andl	r8,0xc00,COH
80007f1e:	ab 88       	lsr	r8,0xa
80007f20:	58 18       	cp.w	r8,1
80007f22:	c0 90       	breq	80007f34 <aes_set_key+0x40>
80007f24:	c0 43       	brcs	80007f2c <aes_set_key+0x38>
80007f26:	58 28       	cp.w	r8,2
80007f28:	c0 a0       	breq	80007f3c <aes_set_key+0x48>
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
80007f2a:	c2 38       	rjmp	80007f70 <aes_set_key+0x7c>


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
  {
    case 0: // 128bit cryptographic key
      keylen = 4;
80007f2c:	30 48       	mov	r8,4
80007f2e:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
80007f32:	c0 98       	rjmp	80007f44 <aes_set_key+0x50>
    case 1: // 192bit cryptographic key
      keylen = 6;
80007f34:	30 68       	mov	r8,6
80007f36:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
80007f3a:	c0 58       	rjmp	80007f44 <aes_set_key+0x50>
    case 2: // 256bit cryptographic key
      keylen = 8;
80007f3c:	30 88       	mov	r8,8
80007f3e:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
80007f42:	c1 78       	rjmp	80007f70 <aes_set_key+0x7c>
80007f44:	c1 68       	rjmp	80007f70 <aes_set_key+0x7c>
    *pTempo++ = *pKey++;
80007f46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f4a:	70 09       	ld.w	r9,r8[0x0]
80007f4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f50:	91 09       	st.w	r8[0x0],r9
80007f52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f56:	2f c8       	sub	r8,-4
80007f58:	ef 48 ff f8 	st.w	r7[-8],r8
80007f5c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f60:	2f c8       	sub	r8,-4
80007f62:	ef 48 ff f0 	st.w	r7[-16],r8
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
80007f66:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007f6a:	20 18       	sub	r8,1
80007f6c:	ef 68 ff ff 	st.b	r7[-1],r8
80007f70:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007f74:	30 08       	mov	r8,0
80007f76:	f0 09 18 00 	cp.b	r9,r8
80007f7a:	ce 61       	brne	80007f46 <aes_set_key+0x52>
    *pTempo++ = *pKey++;
}
80007f7c:	2f cd       	sub	sp,-16
80007f7e:	e3 cd 80 80 	ldm	sp++,r7,pc

80007f82 <aes_set_initvector>:


void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
80007f82:	eb cd 40 80 	pushm	r7,lr
80007f86:	1a 97       	mov	r7,sp
80007f88:	20 4d       	sub	sp,16
80007f8a:	ef 4c ff f4 	st.w	r7[-12],r12
80007f8e:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->iv1r);
80007f92:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007f96:	2a 08       	sub	r8,-96
80007f98:	ef 48 ff f8 	st.w	r7[-8],r8
  int i;

  for(i=0; i<4; i++)
80007f9c:	30 08       	mov	r8,0
80007f9e:	ef 48 ff fc 	st.w	r7[-4],r8
80007fa2:	c1 68       	rjmp	80007fce <aes_set_initvector+0x4c>
    *pTempo++ = *pVector++;
80007fa4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007fa8:	70 09       	ld.w	r9,r8[0x0]
80007faa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fae:	91 09       	st.w	r8[0x0],r9
80007fb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fb4:	2f c8       	sub	r8,-4
80007fb6:	ef 48 ff f8 	st.w	r7[-8],r8
80007fba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007fbe:	2f c8       	sub	r8,-4
80007fc0:	ef 48 ff f0 	st.w	r7[-16],r8
void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
  volatile uint32_t *pTempo = &(aes->iv1r);
  int i;

  for(i=0; i<4; i++)
80007fc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007fc8:	2f f8       	sub	r8,-1
80007fca:	ef 48 ff fc 	st.w	r7[-4],r8
80007fce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007fd2:	58 38       	cp.w	r8,3
80007fd4:	fe 9a ff e8 	brle	80007fa4 <aes_set_initvector+0x22>
    *pTempo++ = *pVector++;
}
80007fd8:	2f cd       	sub	sp,-16
80007fda:	e3 cd 80 80 	ldm	sp++,r7,pc

80007fde <aes_write_inputdata>:


void aes_write_inputdata( volatile avr32_aes_t *aes, uint32_t *pIn)
{
80007fde:	eb cd 40 80 	pushm	r7,lr
80007fe2:	1a 97       	mov	r7,sp
80007fe4:	20 4d       	sub	sp,16
80007fe6:	ef 4c ff f4 	st.w	r7[-12],r12
80007fea:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->idata1r);
80007fee:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007ff2:	2c 08       	sub	r8,-64
80007ff4:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char inlen = 4;
80007ff8:	30 48       	mov	r8,4
80007ffa:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
80007ffe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008002:	70 18       	ld.w	r8,r8[0x4]
80008004:	e2 18 70 00 	andl	r8,0x7000,COH
80008008:	ad 88       	lsr	r8,0xc
8000800a:	58 38       	cp.w	r8,3
8000800c:	c2 c1       	brne	80008064 <aes_write_inputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
8000800e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008012:	70 18       	ld.w	r8,r8[0x4]
80008014:	e6 18 00 07 	andh	r8,0x7,COH
80008018:	b1 88       	lsr	r8,0x10
8000801a:	58 18       	cp.w	r8,1
8000801c:	c0 60       	breq	80008028 <aes_write_inputdata+0x4a>
8000801e:	c2 33       	brcs	80008064 <aes_write_inputdata+0x86>
80008020:	58 48       	cp.w	r8,4
80008022:	e0 8b 00 21 	brhi	80008064 <aes_write_inputdata+0x86>
80008026:	c0 68       	rjmp	80008032 <aes_write_inputdata+0x54>
    {
      case 1: // 64bit CFB data size
        inlen = 2;
80008028:	30 28       	mov	r8,2
8000802a:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
8000802e:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
80008030:	c1 a8       	rjmp	80008064 <aes_write_inputdata+0x86>
        inlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        inlen = 1;
80008032:	30 18       	mov	r8,1
80008034:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
80008038:	c1 68       	rjmp	80008064 <aes_write_inputdata+0x86>
    *pTempo++ = *pIn++;
8000803a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000803e:	70 09       	ld.w	r9,r8[0x0]
80008040:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008044:	91 09       	st.w	r8[0x0],r9
80008046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000804a:	2f c8       	sub	r8,-4
8000804c:	ef 48 ff f8 	st.w	r7[-8],r8
80008050:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008054:	2f c8       	sub	r8,-4
80008056:	ef 48 ff f0 	st.w	r7[-16],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
8000805a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000805e:	20 18       	sub	r8,1
80008060:	ef 68 ff ff 	st.b	r7[-1],r8
80008064:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008068:	30 08       	mov	r8,0
8000806a:	f0 09 18 00 	cp.b	r9,r8
8000806e:	ce 61       	brne	8000803a <aes_write_inputdata+0x5c>
    *pTempo++ = *pIn++;
}
80008070:	2f cd       	sub	sp,-16
80008072:	e3 cd 80 80 	ldm	sp++,r7,pc

80008076 <aes_read_outputdata>:


void aes_read_outputdata( volatile avr32_aes_t *aes, uint32_t *pOut)
{
80008076:	eb cd 40 80 	pushm	r7,lr
8000807a:	1a 97       	mov	r7,sp
8000807c:	20 4d       	sub	sp,16
8000807e:	ef 4c ff f4 	st.w	r7[-12],r12
80008082:	ef 4b ff f0 	st.w	r7[-16],r11
  const volatile uint32_t *pTempo = &(aes->odata1r);
80008086:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000808a:	2b 08       	sub	r8,-80
8000808c:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char outlen = 4;
80008090:	30 48       	mov	r8,4
80008092:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
80008096:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000809a:	70 18       	ld.w	r8,r8[0x4]
8000809c:	e2 18 70 00 	andl	r8,0x7000,COH
800080a0:	ad 88       	lsr	r8,0xc
800080a2:	58 38       	cp.w	r8,3
800080a4:	c2 c1       	brne	800080fc <aes_read_outputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
800080a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800080aa:	70 18       	ld.w	r8,r8[0x4]
800080ac:	e6 18 00 07 	andh	r8,0x7,COH
800080b0:	b1 88       	lsr	r8,0x10
800080b2:	58 18       	cp.w	r8,1
800080b4:	c0 60       	breq	800080c0 <aes_read_outputdata+0x4a>
800080b6:	c2 33       	brcs	800080fc <aes_read_outputdata+0x86>
800080b8:	58 48       	cp.w	r8,4
800080ba:	e0 8b 00 21 	brhi	800080fc <aes_read_outputdata+0x86>
800080be:	c0 68       	rjmp	800080ca <aes_read_outputdata+0x54>
    {
      case 1: // 64bit CFB data size
        outlen = 2;
800080c0:	30 28       	mov	r8,2
800080c2:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
800080c6:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
800080c8:	c1 a8       	rjmp	800080fc <aes_read_outputdata+0x86>
        outlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        outlen = 1;
800080ca:	30 18       	mov	r8,1
800080cc:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
800080d0:	c1 68       	rjmp	800080fc <aes_read_outputdata+0x86>
    *pOut++ = *pTempo++;
800080d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080d6:	70 09       	ld.w	r9,r8[0x0]
800080d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800080dc:	91 09       	st.w	r8[0x0],r9
800080de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800080e2:	2f c8       	sub	r8,-4
800080e4:	ef 48 ff f0 	st.w	r7[-16],r8
800080e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080ec:	2f c8       	sub	r8,-4
800080ee:	ef 48 ff f8 	st.w	r7[-8],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
800080f2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800080f6:	20 18       	sub	r8,1
800080f8:	ef 68 ff ff 	st.b	r7[-1],r8
800080fc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008100:	30 08       	mov	r8,0
80008102:	f0 09 18 00 	cp.b	r9,r8
80008106:	ce 61       	brne	800080d2 <aes_read_outputdata+0x5c>
    *pOut++ = *pTempo++;
}
80008108:	2f cd       	sub	sp,-16
8000810a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000810e:	d7 03       	nop

80008110 <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
80008110:	eb cd 40 80 	pushm	r7,lr
80008114:	1a 97       	mov	r7,sp
80008116:	20 cd       	sub	sp,48
80008118:	ef 4c ff d0 	st.w	r7[-48],r12
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
8000811c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80008120:	ee 7a 42 3f 	mov	r10,999999
80008124:	f0 0a 00 09 	add	r9,r8,r10
80008128:	e0 68 de 83 	mov	r8,56963
8000812c:	ea 18 43 1b 	orh	r8,0x431b
80008130:	f2 08 06 48 	mulu.d	r8,r9,r8
80008134:	f2 08 16 12 	lsr	r8,r9,0x12
80008138:	ef 48 ff d4 	st.w	r7[-44],r8
//! Whether to use the NCS0 pin
#ifdef SMC_USE_NCS0
  #include SMC_COMPONENT_CS0

  // Setup SMC for NCS0
  SMC_CS_SETUP(0)
8000813c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008140:	12 98       	mov	r8,r9
80008142:	a3 68       	lsl	r8,0x2
80008144:	12 08       	add	r8,r9
80008146:	a3 68       	lsl	r8,0x2
80008148:	f0 c9 fc 19 	sub	r9,r8,-999
8000814c:	e0 68 4d d3 	mov	r8,19923
80008150:	ea 18 10 62 	orh	r8,0x1062
80008154:	f2 08 06 48 	mulu.d	r8,r9,r8
80008158:	f2 08 16 06 	lsr	r8,r9,0x6
8000815c:	ef 48 ff d8 	st.w	r7[-40],r8
80008160:	30 08       	mov	r8,0
80008162:	ef 48 ff dc 	st.w	r7[-36],r8
80008166:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000816a:	12 98       	mov	r8,r9
8000816c:	a5 68       	lsl	r8,0x4
8000816e:	12 18       	sub	r8,r9
80008170:	a1 78       	lsl	r8,0x1
80008172:	f0 c9 fc 19 	sub	r9,r8,-999
80008176:	e0 68 4d d3 	mov	r8,19923
8000817a:	ea 18 10 62 	orh	r8,0x1062
8000817e:	f2 08 06 48 	mulu.d	r8,r9,r8
80008182:	f2 08 16 06 	lsr	r8,r9,0x6
80008186:	ef 48 ff e0 	st.w	r7[-32],r8
8000818a:	30 08       	mov	r8,0
8000818c:	ef 48 ff e4 	st.w	r7[-28],r8
80008190:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008194:	12 98       	mov	r8,r9
80008196:	a5 68       	lsl	r8,0x4
80008198:	12 18       	sub	r8,r9
8000819a:	a3 68       	lsl	r8,0x2
8000819c:	f0 c9 fc 19 	sub	r9,r8,-999
800081a0:	e0 68 4d d3 	mov	r8,19923
800081a4:	ea 18 10 62 	orh	r8,0x1062
800081a8:	f2 08 06 48 	mulu.d	r8,r9,r8
800081ac:	f2 08 16 06 	lsr	r8,r9,0x6
800081b0:	ef 48 ff e8 	st.w	r7[-24],r8
800081b4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800081b8:	f0 08 10 5a 	mul	r8,r8,90
800081bc:	f0 c9 fc 19 	sub	r9,r8,-999
800081c0:	e0 68 4d d3 	mov	r8,19923
800081c4:	ea 18 10 62 	orh	r8,0x1062
800081c8:	f2 08 06 48 	mulu.d	r8,r9,r8
800081cc:	f2 08 16 06 	lsr	r8,r9,0x6
800081d0:	ef 48 ff ec 	st.w	r7[-20],r8
800081d4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800081d8:	e0 68 00 d2 	mov	r8,210
800081dc:	f2 08 02 48 	mul	r8,r9,r8
800081e0:	f0 c9 fc 19 	sub	r9,r8,-999
800081e4:	e0 68 4d d3 	mov	r8,19923
800081e8:	ea 18 10 62 	orh	r8,0x1062
800081ec:	f2 08 06 48 	mulu.d	r8,r9,r8
800081f0:	f2 08 16 06 	lsr	r8,r9,0x6
800081f4:	ef 48 ff f0 	st.w	r7[-16],r8
800081f8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800081fc:	12 98       	mov	r8,r9
800081fe:	a5 68       	lsl	r8,0x4
80008200:	12 18       	sub	r8,r9
80008202:	a5 68       	lsl	r8,0x4
80008204:	f0 c9 fc 19 	sub	r9,r8,-999
80008208:	e0 68 4d d3 	mov	r8,19923
8000820c:	ea 18 10 62 	orh	r8,0x1062
80008210:	f2 08 06 48 	mulu.d	r8,r9,r8
80008214:	f2 08 16 06 	lsr	r8,r9,0x6
80008218:	ef 48 ff f4 	st.w	r7[-12],r8
8000821c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008220:	f0 08 10 64 	mul	r8,r8,100
80008224:	f0 c9 fc 19 	sub	r9,r8,-999
80008228:	e0 68 4d d3 	mov	r8,19923
8000822c:	ea 18 10 62 	orh	r8,0x1062
80008230:	f2 08 06 48 	mulu.d	r8,r9,r8
80008234:	f2 08 16 06 	lsr	r8,r9,0x6
80008238:	ef 48 ff f8 	st.w	r7[-8],r8
8000823c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008240:	e0 68 01 0e 	mov	r8,270
80008244:	f2 08 02 48 	mul	r8,r9,r8
80008248:	f0 c9 fc 19 	sub	r9,r8,-999
8000824c:	e0 68 4d d3 	mov	r8,19923
80008250:	ea 18 10 62 	orh	r8,0x1062
80008254:	f2 08 06 48 	mulu.d	r8,r9,r8
80008258:	f2 08 16 06 	lsr	r8,r9,0x6
8000825c:	ef 48 ff fc 	st.w	r7[-4],r8
80008260:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008264:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008268:	10 09       	add	r9,r8
8000826a:	ee fa ff e0 	ld.w	r10,r7[-32]
8000826e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008272:	f4 08 00 08 	add	r8,r10,r8
80008276:	10 39       	cp.w	r9,r8
80008278:	c0 c2       	brcc	80008290 <smc_init+0x180>
8000827a:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000827e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008282:	10 09       	add	r9,r8
80008284:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008288:	f2 08 01 08 	sub	r8,r9,r8
8000828c:	ef 48 ff f4 	st.w	r7[-12],r8
80008290:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008294:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008298:	10 09       	add	r9,r8
8000829a:	ee fa ff d8 	ld.w	r10,r7[-40]
8000829e:	ee f8 ff e8 	ld.w	r8,r7[-24]
800082a2:	f4 08 00 08 	add	r8,r10,r8
800082a6:	10 39       	cp.w	r9,r8
800082a8:	c0 c2       	brcc	800082c0 <smc_init+0x1b0>
800082aa:	ee f9 ff d8 	ld.w	r9,r7[-40]
800082ae:	ee f8 ff e8 	ld.w	r8,r7[-24]
800082b2:	10 09       	add	r9,r8
800082b4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800082b8:	f2 08 01 08 	sub	r8,r9,r8
800082bc:	ef 48 ff ec 	st.w	r7[-20],r8
800082c0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800082c4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800082c8:	10 09       	add	r9,r8
800082ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082ce:	10 39       	cp.w	r9,r8
800082d0:	e0 88 00 0a 	brls	800082e4 <smc_init+0x1d4>
800082d4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800082d8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800082dc:	f2 08 00 08 	add	r8,r9,r8
800082e0:	ef 48 ff f8 	st.w	r7[-8],r8
800082e4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800082e8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800082ec:	10 09       	add	r9,r8
800082ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082f2:	10 39       	cp.w	r9,r8
800082f4:	e0 88 00 0a 	brls	80008308 <smc_init+0x1f8>
800082f8:	ee f9 ff d8 	ld.w	r9,r7[-40]
800082fc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008300:	f2 08 00 08 	add	r8,r9,r8
80008304:	ef 48 ff f8 	st.w	r7[-8],r8
80008308:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000830c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008310:	10 09       	add	r9,r8
80008312:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008316:	10 39       	cp.w	r9,r8
80008318:	e0 88 00 0a 	brls	8000832c <smc_init+0x21c>
8000831c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008320:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008324:	f2 08 00 08 	add	r8,r9,r8
80008328:	ef 48 ff fc 	st.w	r7[-4],r8
8000832c:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008330:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008334:	10 09       	add	r9,r8
80008336:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000833a:	10 39       	cp.w	r9,r8
8000833c:	e0 88 00 0a 	brls	80008350 <smc_init+0x240>
80008340:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008344:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008348:	f2 08 00 08 	add	r8,r9,r8
8000834c:	ef 48 ff fc 	st.w	r7[-4],r8
80008350:	fe 68 1c 00 	mov	r8,-123904
80008354:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008358:	f2 0a 15 08 	lsl	r10,r9,0x8
8000835c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80008360:	12 4a       	or	r10,r9
80008362:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008366:	b1 69       	lsl	r9,0x10
80008368:	12 4a       	or	r10,r9
8000836a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000836e:	b9 69       	lsl	r9,0x18
80008370:	f5 e9 10 09 	or	r9,r10,r9
80008374:	91 09       	st.w	r8[0x0],r9
80008376:	fe 68 1c 00 	mov	r8,-123904
8000837a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000837e:	f2 0a 15 08 	lsl	r10,r9,0x8
80008382:	ee f9 ff e8 	ld.w	r9,r7[-24]
80008386:	12 4a       	or	r10,r9
80008388:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000838c:	b1 69       	lsl	r9,0x10
8000838e:	12 4a       	or	r10,r9
80008390:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008394:	b9 69       	lsl	r9,0x18
80008396:	f5 e9 10 09 	or	r9,r10,r9
8000839a:	91 19       	st.w	r8[0x4],r9
8000839c:	fe 68 1c 00 	mov	r8,-123904
800083a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800083a4:	f2 0a 15 10 	lsl	r10,r9,0x10
800083a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800083ac:	f5 e9 10 09 	or	r9,r10,r9
800083b0:	91 29       	st.w	r8[0x8],r9
800083b2:	fe 68 1c 00 	mov	r8,-123904
800083b6:	e0 69 10 03 	mov	r9,4099
800083ba:	91 39       	st.w	r8[0xc],r9
800083bc:	48 49       	lddpc	r9,800083cc <smc_init+0x2bc>
800083be:	30 18       	mov	r8,1
800083c0:	b2 88       	st.b	r9[0x0],r8
  #undef NCS_CONTROLLED_READ
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
800083c2:	f0 1f 00 04 	mcall	800083d0 <smc_init+0x2c0>
}
800083c6:	2f 4d       	sub	sp,-48
800083c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800083cc:	00 00       	add	r0,r0
800083ce:	06 4c       	or	r12,r3
800083d0:	80 00       	ld.sh	r0,r0[0x0]
800083d2:	83 d4       	st.w	r1[0x34],r4

800083d4 <smc_enable_muxed_pins>:

/*! \brief Puts the multiplexed MCU pins used for the SMC
 *
 */
static void smc_enable_muxed_pins(void)
{
800083d4:	eb cd 40 80 	pushm	r7,lr
800083d8:	1a 97       	mov	r7,sp
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
800083da:	31 4b       	mov	r11,20
800083dc:	48 3c       	lddpc	r12,800083e8 <smc_enable_muxed_pins+0x14>
800083de:	f0 1f 00 04 	mcall	800083ec <smc_enable_muxed_pins+0x18>
}
800083e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800083e6:	00 00       	add	r0,r0
800083e8:	80 00       	ld.sh	r0,r0[0x0]
800083ea:	eb cc 80 00 	stm	--r12,pc
800083ee:	88 54       	ld.sh	r4,r4[0xa]

800083f0 <flashc_set_wait_state>:
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
800083f0:	eb cd 40 80 	pushm	r7,lr
800083f4:	1a 97       	mov	r7,sp
800083f6:	20 2d       	sub	sp,8
800083f8:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800083fc:	fe 68 14 00 	mov	r8,-125952
80008400:	70 08       	ld.w	r8,r8[0x0]
80008402:	30 09       	mov	r9,0
80008404:	ef 49 ff fc 	st.w	r7[-4],r9
80008408:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000840c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008410:	5c 58       	castu.b	r8
80008412:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008416:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000841a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000841e:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80008422:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80008426:	fe 68 14 00 	mov	r8,-125952
8000842a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000842e:	91 09       	st.w	r8[0x0],r9
}
80008430:	2f ed       	sub	sp,-8
80008432:	e3 cd 80 80 	ldm	sp++,r7,pc
80008436:	d7 03       	nop

80008438 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80008438:	eb cd 40 80 	pushm	r7,lr
8000843c:	1a 97       	mov	r7,sp
8000843e:	20 1d       	sub	sp,4
80008440:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80008444:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008448:	e0 69 50 ff 	mov	r9,20735
8000844c:	ea 19 02 25 	orh	r9,0x225
80008450:	12 38       	cp.w	r8,r9
80008452:	e0 88 00 06 	brls	8000845e <flashc_set_bus_freq+0x26>
		// Set 1 WS.
		flashc_set_wait_state(1);
80008456:	30 1c       	mov	r12,1
80008458:	f0 1f 00 05 	mcall	8000846c <flashc_set_bus_freq+0x34>
8000845c:	c0 48       	rjmp	80008464 <flashc_set_bus_freq+0x2c>
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
8000845e:	30 0c       	mov	r12,0
80008460:	f0 1f 00 03 	mcall	8000846c <flashc_set_bus_freq+0x34>
	}
}
80008464:	2f fd       	sub	sp,-4
80008466:	e3 cd 80 80 	ldm	sp++,r7,pc
8000846a:	00 00       	add	r0,r0
8000846c:	80 00       	ld.sh	r0,r0[0x0]
8000846e:	83 f0       	st.w	r1[0x3c],r0

80008470 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
80008470:	eb cd 40 80 	pushm	r7,lr
80008474:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80008476:	fe 68 14 00 	mov	r8,-125952
8000847a:	70 28       	ld.w	r8,r8[0x8]
8000847c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008480:	5c 58       	castu.b	r8
}
80008482:	10 9c       	mov	r12,r8
80008484:	e3 cd 80 80 	ldm	sp++,r7,pc

80008488 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80008488:	eb cd 40 80 	pushm	r7,lr
8000848c:	1a 97       	mov	r7,sp
	while (!flashc_is_ready());
8000848e:	f0 1f 00 05 	mcall	800084a0 <flashc_default_wait_until_ready+0x18>
80008492:	18 98       	mov	r8,r12
80008494:	ec 18 00 01 	eorl	r8,0x1
80008498:	5c 58       	castu.b	r8
8000849a:	cf a1       	brne	8000848e <flashc_default_wait_until_ready+0x6>
}
8000849c:	e3 cd 80 80 	ldm	sp++,r7,pc
800084a0:	80 00       	ld.sh	r0,r0[0x0]
800084a2:	84 70       	ld.sh	r0,r2[0xe]

800084a4 <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
800084a4:	eb cd 40 80 	pushm	r7,lr
800084a8:	1a 97       	mov	r7,sp
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800084aa:	fe 68 14 00 	mov	r8,-125952
800084ae:	70 28       	ld.w	r8,r8[0x8]
800084b0:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHC_FSR_PROGE_MASK);
}
800084b4:	10 9c       	mov	r12,r8
800084b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800084ba:	d7 03       	nop

800084bc <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
800084bc:	eb cd 40 80 	pushm	r7,lr
800084c0:	1a 97       	mov	r7,sp
800084c2:	20 3d       	sub	sp,12
800084c4:	ef 4c ff f8 	st.w	r7[-8],r12
800084c8:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
800084cc:	49 b8       	lddpc	r8,80008538 <flashc_issue_command+0x7c>
800084ce:	70 08       	ld.w	r8,r8[0x0]
800084d0:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
800084d2:	fe 68 14 00 	mov	r8,-125952
800084d6:	70 18       	ld.w	r8,r8[0x4]
800084d8:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800084dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800084e0:	5c 58       	castu.b	r8
800084e2:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800084e6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800084ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800084ee:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
800084f2:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
800084f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084fa:	58 08       	cp.w	r8,0
800084fc:	c0 b5       	brlt	80008512 <flashc_issue_command+0x56>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
800084fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008502:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80008506:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000850a:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
8000850e:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80008512:	3a 58       	mov	r8,-91
80008514:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80008518:	fe 68 14 00 	mov	r8,-125952
8000851c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008520:	91 19       	st.w	r8[0x4],r9
	flashc_error_status = flashc_get_error_status();
80008522:	f0 1f 00 07 	mcall	8000853c <flashc_issue_command+0x80>
80008526:	18 99       	mov	r9,r12
80008528:	48 68       	lddpc	r8,80008540 <flashc_issue_command+0x84>
8000852a:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
8000852c:	48 38       	lddpc	r8,80008538 <flashc_issue_command+0x7c>
8000852e:	70 08       	ld.w	r8,r8[0x0]
80008530:	5d 18       	icall	r8
}
80008532:	2f dd       	sub	sp,-12
80008534:	e3 cd 80 80 	ldm	sp++,r7,pc
80008538:	00 00       	add	r0,r0
8000853a:	01 3c       	ld.ub	r12,r0++
8000853c:	80 00       	ld.sh	r0,r0[0x0]
8000853e:	84 a4       	ld.uh	r4,r2[0x4]
80008540:	00 00       	add	r0,r0
80008542:	06 54       	eor	r4,r3

80008544 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80008544:	eb cd 40 80 	pushm	r7,lr
80008548:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
8000854a:	3f fb       	mov	r11,-1
8000854c:	30 3c       	mov	r12,3
8000854e:	f0 1f 00 03 	mcall	80008558 <flashc_clear_page_buffer+0x14>
}
80008552:	e3 cd 80 80 	ldm	sp++,r7,pc
80008556:	00 00       	add	r0,r0
80008558:	80 00       	ld.sh	r0,r0[0x0]
8000855a:	84 bc       	ld.uh	r12,r2[0x6]

8000855c <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
8000855c:	eb cd 40 80 	pushm	r7,lr
80008560:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80008562:	fe 68 14 00 	mov	r8,-125952
80008566:	70 28       	ld.w	r8,r8[0x8]
80008568:	e2 18 00 20 	andl	r8,0x20,COH
8000856c:	5f 18       	srne	r8
8000856e:	5c 58       	castu.b	r8
}
80008570:	10 9c       	mov	r12,r8
80008572:	e3 cd 80 80 	ldm	sp++,r7,pc
80008576:	d7 03       	nop

80008578 <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80008578:	eb cd 40 80 	pushm	r7,lr
8000857c:	1a 97       	mov	r7,sp
8000857e:	20 1d       	sub	sp,4
80008580:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80008584:	ee fb ff fc 	ld.w	r11,r7[-4]
80008588:	30 cc       	mov	r12,12
8000858a:	f0 1f 00 05 	mcall	8000859c <flashc_quick_page_read+0x24>
	return flashc_is_page_erased();
8000858e:	f0 1f 00 05 	mcall	800085a0 <flashc_quick_page_read+0x28>
80008592:	18 98       	mov	r8,r12
}
80008594:	10 9c       	mov	r12,r8
80008596:	2f fd       	sub	sp,-4
80008598:	e3 cd 80 80 	ldm	sp++,r7,pc
8000859c:	80 00       	ld.sh	r0,r0[0x0]
8000859e:	84 bc       	ld.uh	r12,r2[0x6]
800085a0:	80 00       	ld.sh	r0,r0[0x0]
800085a2:	85 5c       	st.w	r2[0x14],r12

800085a4 <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
800085a4:	eb cd 40 80 	pushm	r7,lr
800085a8:	1a 97       	mov	r7,sp
800085aa:	20 4d       	sub	sp,16
800085ac:	ef 4c ff f4 	st.w	r7[-12],r12
800085b0:	16 98       	mov	r8,r11
800085b2:	ef 68 ff f0 	st.b	r7[-16],r8
	bool page_erased = true;
800085b6:	30 18       	mov	r8,1
800085b8:	ef 68 ff fb 	st.b	r7[-5],r8

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
800085bc:	ee fb ff f4 	ld.w	r11,r7[-12]
800085c0:	30 2c       	mov	r12,2
800085c2:	f0 1f 00 10 	mcall	80008600 <flashc_erase_page+0x5c>
	if (check) {
800085c6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800085ca:	30 08       	mov	r8,0
800085cc:	f0 09 18 00 	cp.b	r9,r8
800085d0:	c1 20       	breq	800085f4 <flashc_erase_page+0x50>
		unsigned int error_status = flashc_error_status;
800085d2:	48 d8       	lddpc	r8,80008604 <flashc_erase_page+0x60>
800085d4:	70 08       	ld.w	r8,r8[0x0]
800085d6:	ef 48 ff fc 	st.w	r7[-4],r8
		page_erased = flashc_quick_page_read(-1);
800085da:	3f fc       	mov	r12,-1
800085dc:	f0 1f 00 0b 	mcall	80008608 <flashc_erase_page+0x64>
800085e0:	18 98       	mov	r8,r12
800085e2:	ef 68 ff fb 	st.b	r7[-5],r8
		flashc_error_status |= error_status;
800085e6:	48 88       	lddpc	r8,80008604 <flashc_erase_page+0x60>
800085e8:	70 09       	ld.w	r9,r8[0x0]
800085ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085ee:	10 49       	or	r9,r8
800085f0:	48 58       	lddpc	r8,80008604 <flashc_erase_page+0x60>
800085f2:	91 09       	st.w	r8[0x0],r9
	}
	return page_erased;
800085f4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
800085f8:	10 9c       	mov	r12,r8
800085fa:	2f cd       	sub	sp,-16
800085fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80008600:	80 00       	ld.sh	r0,r0[0x0]
80008602:	84 bc       	ld.uh	r12,r2[0x6]
80008604:	00 00       	add	r0,r0
80008606:	06 54       	eor	r4,r3
80008608:	80 00       	ld.sh	r0,r0[0x0]
8000860a:	85 78       	st.w	r2[0x1c],r8

8000860c <flashc_write_page>:
	return all_pages_erased;
}


void flashc_write_page(int page_number)
{
8000860c:	eb cd 40 80 	pushm	r7,lr
80008610:	1a 97       	mov	r7,sp
80008612:	20 1d       	sub	sp,4
80008614:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80008618:	ee fb ff fc 	ld.w	r11,r7[-4]
8000861c:	30 1c       	mov	r12,1
8000861e:	f0 1f 00 03 	mcall	80008628 <flashc_write_page+0x1c>
}
80008622:	2f fd       	sub	sp,-4
80008624:	e3 cd 80 80 	ldm	sp++,r7,pc
80008628:	80 00       	ld.sh	r0,r0[0x0]
8000862a:	84 bc       	ld.uh	r12,r2[0x6]

8000862c <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
8000862c:	eb cd 40 80 	pushm	r7,lr
80008630:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80008632:	3f fb       	mov	r11,-1
80008634:	30 fc       	mov	r12,15
80008636:	f0 1f 00 05 	mcall	80008648 <flashc_quick_user_page_read+0x1c>
	return flashc_is_page_erased();
8000863a:	f0 1f 00 05 	mcall	8000864c <flashc_quick_user_page_read+0x20>
8000863e:	18 98       	mov	r8,r12
}
80008640:	10 9c       	mov	r12,r8
80008642:	e3 cd 80 80 	ldm	sp++,r7,pc
80008646:	00 00       	add	r0,r0
80008648:	80 00       	ld.sh	r0,r0[0x0]
8000864a:	84 bc       	ld.uh	r12,r2[0x6]
8000864c:	80 00       	ld.sh	r0,r0[0x0]
8000864e:	85 5c       	st.w	r2[0x14],r12

80008650 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80008650:	eb cd 40 80 	pushm	r7,lr
80008654:	1a 97       	mov	r7,sp
80008656:	20 1d       	sub	sp,4
80008658:	18 98       	mov	r8,r12
8000865a:	ef 68 ff fc 	st.b	r7[-4],r8
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
8000865e:	3f fb       	mov	r11,-1
80008660:	30 ec       	mov	r12,14
80008662:	f0 1f 00 09 	mcall	80008684 <flashc_erase_user_page+0x34>
	return (check) ? flashc_quick_user_page_read() : true;
80008666:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000866a:	30 08       	mov	r8,0
8000866c:	f0 09 18 00 	cp.b	r9,r8
80008670:	c0 50       	breq	8000867a <flashc_erase_user_page+0x2a>
80008672:	f0 1f 00 06 	mcall	80008688 <flashc_erase_user_page+0x38>
80008676:	18 98       	mov	r8,r12
80008678:	c0 28       	rjmp	8000867c <flashc_erase_user_page+0x2c>
8000867a:	30 18       	mov	r8,1
}
8000867c:	10 9c       	mov	r12,r8
8000867e:	2f fd       	sub	sp,-4
80008680:	e3 cd 80 80 	ldm	sp++,r7,pc
80008684:	80 00       	ld.sh	r0,r0[0x0]
80008686:	84 bc       	ld.uh	r12,r2[0x6]
80008688:	80 00       	ld.sh	r0,r0[0x0]
8000868a:	86 2c       	ld.sh	r12,r3[0x4]

8000868c <flashc_write_user_page>:


void flashc_write_user_page(void)
{
8000868c:	eb cd 40 80 	pushm	r7,lr
80008690:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80008692:	3f fb       	mov	r11,-1
80008694:	30 dc       	mov	r12,13
80008696:	f0 1f 00 03 	mcall	800086a0 <flashc_write_user_page+0x14>
}
8000869a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000869e:	00 00       	add	r0,r0
800086a0:	80 00       	ld.sh	r0,r0[0x0]
800086a2:	84 bc       	ld.uh	r12,r2[0x6]

800086a4 <flashc_memcpy>:
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
800086a4:	eb cd 40 80 	pushm	r7,lr
800086a8:	1a 97       	mov	r7,sp
800086aa:	20 bd       	sub	sp,44
800086ac:	ef 4c ff e0 	st.w	r7[-32],r12
800086b0:	ef 4b ff dc 	st.w	r7[-36],r11
800086b4:	ef 4a ff d8 	st.w	r7[-40],r10
800086b8:	12 98       	mov	r8,r9
800086ba:	ef 68 ff d4 	st.b	r7[-44],r8
	uint16_t page_pos;
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
800086be:	30 08       	mov	r8,0
800086c0:	ef 48 ff f0 	st.w	r7[-16],r8
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
800086c4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800086c8:	ef 48 ff f8 	st.w	r7[-8],r8
	const uint8_t* src_buf=(const uint8_t*)src;
800086cc:	ee f8 ff dc 	ld.w	r8,r7[-36]
800086d0:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
800086d4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800086d8:	e0 69 ff ff 	mov	r9,65535
800086dc:	ea 19 80 7f 	orh	r9,0x807f
800086e0:	12 38       	cp.w	r8,r9
800086e2:	5f b8       	srhi	r8
800086e4:	ef 68 ff ef 	st.b	r7[-17],r8

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
800086e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800086ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800086f0:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800086f4:	f2 08 01 08 	sub	r8,r9,r8
800086f8:	ef 48 ff f4 	st.w	r7[-12],r8

	while (nbytes) {
800086fc:	c9 18       	rjmp	8000881e <flashc_memcpy+0x17a>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
800086fe:	f0 1f 00 50 	mcall	8000883c <flashc_memcpy+0x198>
		error_status |= flashc_error_status;
80008702:	4d 08       	lddpc	r8,80008840 <flashc_memcpy+0x19c>
80008704:	70 08       	ld.w	r8,r8[0x0]
80008706:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000870a:	f3 e8 10 08 	or	r8,r9,r8
8000870e:	ef 48 ff f0 	st.w	r7[-16],r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
80008712:	30 08       	mov	r8,0
80008714:	ef 58 ff ec 	st.h	r7[-20],r8
80008718:	c4 b8       	rjmp	800087ae <flashc_memcpy+0x10a>
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
8000871a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000871e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008722:	ee e9 ff e4 	st.d	r7[-28],r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80008726:	30 08       	mov	r8,0
80008728:	ef 68 ff ee 	st.b	r7[-18],r8
8000872c:	c2 d8       	rjmp	80008786 <flashc_memcpy+0xe2>
				if (nbytes && (flash_add == dest_add)) {
8000872e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008732:	58 08       	cp.w	r8,0
80008734:	c1 f0       	breq	80008772 <flashc_memcpy+0xce>
80008736:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000873a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000873e:	10 39       	cp.w	r9,r8
80008740:	c1 91       	brne	80008772 <flashc_memcpy+0xce>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80008742:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008746:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000874a:	11 88       	ld.ub	r8,r8[0x0]
8000874c:	ee 09 00 09 	add	r9,r7,r9
80008750:	f3 68 ff e4 	st.b	r9[-28],r8
80008754:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008758:	2f f8       	sub	r8,-1
8000875a:	ef 48 ff fc 	st.w	r7[-4],r8
					dest_add++;
8000875e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008762:	2f f8       	sub	r8,-1
80008764:	ef 48 ff f8 	st.w	r7[-8],r8
					nbytes--;
80008768:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000876c:	20 18       	sub	r8,1
8000876e:	ef 48 ff d8 	st.w	r7[-40],r8
				}
				flash_add++;
80008772:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008776:	2f f8       	sub	r8,-1
80008778:	ef 48 ff f4 	st.w	r7[-12],r8
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
8000877c:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80008780:	2f f8       	sub	r8,-1
80008782:	ef 68 ff ee 	st.b	r7[-18],r8
80008786:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000878a:	30 78       	mov	r8,7
8000878c:	f0 09 18 00 	cp.b	r9,r8
80008790:	fe 98 ff cf 	brls	8000872e <flashc_memcpy+0x8a>
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
80008794:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008798:	20 88       	sub	r8,8
8000879a:	10 9a       	mov	r10,r8
8000879c:	ee e8 ff e4 	ld.d	r8,r7[-28]
800087a0:	f4 e9 00 00 	st.d	r10[0],r8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
800087a4:	ef 08 ff ec 	ld.sh	r8,r7[-20]
800087a8:	2f 88       	sub	r8,-8
800087aa:	ef 58 ff ec 	st.h	r7[-20],r8
800087ae:	ef 09 ff ec 	ld.sh	r9,r7[-20]
800087b2:	e0 68 01 ff 	mov	r8,511
800087b6:	f0 09 19 00 	cp.h	r9,r8
800087ba:	fe 98 ff b0 	brls	8000871a <flashc_memcpy+0x76>
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
800087be:	ef 39 ff d4 	ld.ub	r9,r7[-44]
800087c2:	30 08       	mov	r8,0
800087c4:	f0 09 18 00 	cp.b	r9,r8
800087c8:	c1 70       	breq	800087f6 <flashc_memcpy+0x152>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
800087ca:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800087ce:	30 08       	mov	r8,0
800087d0:	f0 09 18 00 	cp.b	r9,r8
800087d4:	c0 50       	breq	800087de <flashc_memcpy+0x13a>
800087d6:	30 0c       	mov	r12,0
800087d8:	f0 1f 00 1b 	mcall	80008844 <flashc_memcpy+0x1a0>
800087dc:	c0 58       	rjmp	800087e6 <flashc_memcpy+0x142>
800087de:	30 0b       	mov	r11,0
800087e0:	3f fc       	mov	r12,-1
800087e2:	f0 1f 00 1a 	mcall	80008848 <flashc_memcpy+0x1a4>
			error_status |= flashc_error_status;
800087e6:	49 78       	lddpc	r8,80008840 <flashc_memcpy+0x19c>
800087e8:	70 08       	ld.w	r8,r8[0x0]
800087ea:	ee f9 ff f0 	ld.w	r9,r7[-16]
800087ee:	f3 e8 10 08 	or	r8,r9,r8
800087f2:	ef 48 ff f0 	st.w	r7[-16],r8
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
800087f6:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800087fa:	30 08       	mov	r8,0
800087fc:	f0 09 18 00 	cp.b	r9,r8
80008800:	c0 40       	breq	80008808 <flashc_memcpy+0x164>
80008802:	f0 1f 00 13 	mcall	8000884c <flashc_memcpy+0x1a8>
80008806:	c0 48       	rjmp	8000880e <flashc_memcpy+0x16a>
80008808:	3f fc       	mov	r12,-1
8000880a:	f0 1f 00 12 	mcall	80008850 <flashc_memcpy+0x1ac>
		error_status |= flashc_error_status;
8000880e:	48 d8       	lddpc	r8,80008840 <flashc_memcpy+0x19c>
80008810:	70 08       	ld.w	r8,r8[0x0]
80008812:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008816:	f3 e8 10 08 	or	r8,r9,r8
8000881a:	ef 48 ff f0 	st.w	r7[-16],r8

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
8000881e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008822:	58 08       	cp.w	r8,0
80008824:	fe 91 ff 6d 	brne	800086fe <flashc_memcpy+0x5a>
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
80008828:	48 68       	lddpc	r8,80008840 <flashc_memcpy+0x19c>
8000882a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000882e:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
80008830:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
80008834:	10 9c       	mov	r12,r8
80008836:	2f 5d       	sub	sp,-44
80008838:	e3 cd 80 80 	ldm	sp++,r7,pc
8000883c:	80 00       	ld.sh	r0,r0[0x0]
8000883e:	85 44       	st.w	r2[0x10],r4
80008840:	00 00       	add	r0,r0
80008842:	06 54       	eor	r4,r3
80008844:	80 00       	ld.sh	r0,r0[0x0]
80008846:	86 50       	ld.sh	r0,r3[0xa]
80008848:	80 00       	ld.sh	r0,r0[0x0]
8000884a:	85 a4       	st.w	r2[0x28],r4
8000884c:	80 00       	ld.sh	r0,r0[0x0]
8000884e:	86 8c       	ld.uh	r12,r3[0x0]
80008850:	80 00       	ld.sh	r0,r0[0x0]
80008852:	86 0c       	ld.sh	r12,r3[0x0]

80008854 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80008854:	eb cd 40 80 	pushm	r7,lr
80008858:	1a 97       	mov	r7,sp
8000885a:	20 4d       	sub	sp,16
8000885c:	ef 4c ff f4 	st.w	r7[-12],r12
80008860:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
80008864:	30 08       	mov	r8,0
80008866:	ef 48 ff f8 	st.w	r7[-8],r8
  uint32_t i;

  for (i = 0; i < size; i++)
8000886a:	30 08       	mov	r8,0
8000886c:	ef 48 ff fc 	st.w	r7[-4],r8
80008870:	c1 d8       	rjmp	800088aa <gpio_enable_module+0x56>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80008872:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008876:	11 98       	ld.ub	r8,r8[0x1]
80008878:	10 99       	mov	r9,r8
8000887a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000887e:	11 88       	ld.ub	r8,r8[0x0]
80008880:	12 9b       	mov	r11,r9
80008882:	10 9c       	mov	r12,r8
80008884:	f0 1f 00 10 	mcall	800088c4 <gpio_enable_module+0x70>
80008888:	18 98       	mov	r8,r12
8000888a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000888e:	f3 e8 10 08 	or	r8,r9,r8
80008892:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
80008896:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000889a:	2f e8       	sub	r8,-2
8000889c:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800088a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800088a4:	2f f8       	sub	r8,-1
800088a6:	ef 48 ff fc 	st.w	r7[-4],r8
800088aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800088ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800088b2:	10 39       	cp.w	r9,r8
800088b4:	cd f3       	brcs	80008872 <gpio_enable_module+0x1e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
800088b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800088ba:	10 9c       	mov	r12,r8
800088bc:	2f cd       	sub	sp,-16
800088be:	e3 cd 80 80 	ldm	sp++,r7,pc
800088c2:	00 00       	add	r0,r0
800088c4:	80 00       	ld.sh	r0,r0[0x0]
800088c6:	88 c8       	ld.uh	r8,r4[0x8]

800088c8 <gpio_enable_module_pin>:


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800088c8:	eb cd 40 80 	pushm	r7,lr
800088cc:	1a 97       	mov	r7,sp
800088ce:	20 3d       	sub	sp,12
800088d0:	ef 4c ff f8 	st.w	r7[-8],r12
800088d4:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800088d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800088dc:	a5 98       	lsr	r8,0x5
800088de:	a9 68       	lsl	r8,0x8
800088e0:	e0 28 f0 00 	sub	r8,61440
800088e4:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
800088e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800088ec:	58 18       	cp.w	r8,1
800088ee:	c1 e0       	breq	8000892a <gpio_enable_module_pin+0x62>
800088f0:	c0 63       	brcs	800088fc <gpio_enable_module_pin+0x34>
800088f2:	58 28       	cp.w	r8,2
800088f4:	c3 20       	breq	80008958 <gpio_enable_module_pin+0x90>
800088f6:	58 38       	cp.w	r8,3
800088f8:	c4 70       	breq	80008986 <gpio_enable_module_pin+0xbe>
800088fa:	c5 d8       	rjmp	800089b4 <gpio_enable_module_pin+0xec>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800088fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008900:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008904:	30 19       	mov	r9,1
80008906:	f2 08 09 48 	lsl	r8,r9,r8
8000890a:	10 99       	mov	r9,r8
8000890c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008910:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80008912:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008916:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000891a:	30 19       	mov	r9,1
8000891c:	f2 08 09 48 	lsl	r8,r9,r8
80008920:	10 99       	mov	r9,r8
80008922:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008926:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008928:	c4 88       	rjmp	800089b8 <gpio_enable_module_pin+0xf0>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000892a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000892e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008932:	30 19       	mov	r9,1
80008934:	f2 08 09 48 	lsl	r8,r9,r8
80008938:	10 99       	mov	r9,r8
8000893a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000893e:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80008940:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008944:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008948:	30 19       	mov	r9,1
8000894a:	f2 08 09 48 	lsl	r8,r9,r8
8000894e:	10 99       	mov	r9,r8
80008950:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008954:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008956:	c3 18       	rjmp	800089b8 <gpio_enable_module_pin+0xf0>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80008958:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000895c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008960:	30 19       	mov	r9,1
80008962:	f2 08 09 48 	lsl	r8,r9,r8
80008966:	10 99       	mov	r9,r8
80008968:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000896c:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000896e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008972:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008976:	30 19       	mov	r9,1
80008978:	f2 08 09 48 	lsl	r8,r9,r8
8000897c:	10 99       	mov	r9,r8
8000897e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008982:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008984:	c1 a8       	rjmp	800089b8 <gpio_enable_module_pin+0xf0>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80008986:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000898a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000898e:	30 19       	mov	r9,1
80008990:	f2 08 09 48 	lsl	r8,r9,r8
80008994:	10 99       	mov	r9,r8
80008996:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000899a:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000899c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089a0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800089a4:	30 19       	mov	r9,1
800089a6:	f2 08 09 48 	lsl	r8,r9,r8
800089aa:	10 99       	mov	r9,r8
800089ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800089b0:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
800089b2:	c0 38       	rjmp	800089b8 <gpio_enable_module_pin+0xf0>
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
800089b4:	30 18       	mov	r8,1
800089b6:	c0 d8       	rjmp	800089d0 <gpio_enable_module_pin+0x108>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800089b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089bc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800089c0:	30 19       	mov	r9,1
800089c2:	f2 08 09 48 	lsl	r8,r9,r8
800089c6:	10 99       	mov	r9,r8
800089c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800089cc:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
800089ce:	30 08       	mov	r8,0
}
800089d0:	10 9c       	mov	r12,r8
800089d2:	2f dd       	sub	sp,-12
800089d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800089d8 <gpio_enable_gpio_pin>:
  }
}


void gpio_enable_gpio_pin(uint32_t pin)
{
800089d8:	eb cd 40 80 	pushm	r7,lr
800089dc:	1a 97       	mov	r7,sp
800089de:	20 2d       	sub	sp,8
800089e0:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800089e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089e8:	a5 98       	lsr	r8,0x5
800089ea:	a9 68       	lsl	r8,0x8
800089ec:	e0 28 f0 00 	sub	r8,61440
800089f0:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
800089f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800089fc:	30 19       	mov	r9,1
800089fe:	f2 08 09 48 	lsl	r8,r9,r8
80008a02:	10 99       	mov	r9,r8
80008a04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a08:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
80008a0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a10:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a14:	30 19       	mov	r9,1
80008a16:	f2 08 09 48 	lsl	r8,r9,r8
80008a1a:	10 99       	mov	r9,r8
80008a1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a20:	91 19       	st.w	r8[0x4],r9
}
80008a22:	2f ed       	sub	sp,-8
80008a24:	e3 cd 80 80 	ldm	sp++,r7,pc

80008a28 <gpio_enable_pin_pull_up>:

#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
80008a28:	eb cd 40 80 	pushm	r7,lr
80008a2c:	1a 97       	mov	r7,sp
80008a2e:	20 2d       	sub	sp,8
80008a30:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008a34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a38:	a5 98       	lsr	r8,0x5
80008a3a:	a9 68       	lsl	r8,0x8
80008a3c:	e0 28 f0 00 	sub	r8,61440
80008a40:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80008a44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a48:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a4c:	30 19       	mov	r9,1
80008a4e:	f2 08 09 48 	lsl	r8,r9,r8
80008a52:	10 99       	mov	r9,r8
80008a54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a58:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80008a5c:	2f ed       	sub	sp,-8
80008a5e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008a62 <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80008a62:	eb cd 40 80 	pushm	r7,lr
80008a66:	1a 97       	mov	r7,sp
80008a68:	20 3d       	sub	sp,12
80008a6a:	ef 4c ff f8 	st.w	r7[-8],r12
80008a6e:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008a72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a76:	a5 98       	lsr	r8,0x5
80008a78:	a9 68       	lsl	r8,0x8
80008a7a:	e0 28 f0 00 	sub	r8,61440
80008a7e:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
80008a82:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008a86:	e2 18 00 04 	andl	r8,0x4,COH
80008a8a:	c0 e0       	breq	80008aa6 <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
80008a8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a90:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a94:	30 19       	mov	r9,1
80008a96:	f2 08 09 48 	lsl	r8,r9,r8
80008a9a:	10 99       	mov	r9,r8
80008a9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008aa0:	f1 49 00 74 	st.w	r8[116],r9
80008aa4:	c0 d8       	rjmp	80008abe <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80008aa6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008aaa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008aae:	30 19       	mov	r9,1
80008ab0:	f2 08 09 48 	lsl	r8,r9,r8
80008ab4:	10 99       	mov	r9,r8
80008ab6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008aba:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80008abe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008ac2:	e2 18 00 80 	andl	r8,0x80,COH
80008ac6:	c5 a0       	breq	80008b7a <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
80008ac8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008acc:	e2 18 01 80 	andl	r8,0x180,COH
80008ad0:	c1 a0       	breq	80008b04 <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80008ad2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ad6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ada:	30 19       	mov	r9,1
80008adc:	f2 08 09 48 	lsl	r8,r9,r8
80008ae0:	10 99       	mov	r9,r8
80008ae2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ae6:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80008aea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008aee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008af2:	30 19       	mov	r9,1
80008af4:	f2 08 09 48 	lsl	r8,r9,r8
80008af8:	10 99       	mov	r9,r8
80008afa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008afe:	f1 49 00 b8 	st.w	r8[184],r9
80008b02:	c3 c8       	rjmp	80008b7a <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
80008b04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008b08:	e2 18 02 80 	andl	r8,0x280,COH
80008b0c:	c1 a0       	breq	80008b40 <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80008b0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b12:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b16:	30 19       	mov	r9,1
80008b18:	f2 08 09 48 	lsl	r8,r9,r8
80008b1c:	10 99       	mov	r9,r8
80008b1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b22:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80008b26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b2a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b2e:	30 19       	mov	r9,1
80008b30:	f2 08 09 48 	lsl	r8,r9,r8
80008b34:	10 99       	mov	r9,r8
80008b36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b3a:	f1 49 00 b8 	st.w	r8[184],r9
80008b3e:	c1 e8       	rjmp	80008b7a <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
80008b40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008b44:	e2 18 03 80 	andl	r8,0x380,COH
80008b48:	c1 90       	breq	80008b7a <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80008b4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b4e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b52:	30 19       	mov	r9,1
80008b54:	f2 08 09 48 	lsl	r8,r9,r8
80008b58:	10 99       	mov	r9,r8
80008b5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b5e:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80008b62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b66:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b6a:	30 19       	mov	r9,1
80008b6c:	f2 08 09 48 	lsl	r8,r9,r8
80008b70:	10 99       	mov	r9,r8
80008b72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b76:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80008b7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008b7e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008b82:	5c 58       	castu.b	r8
80008b84:	c2 c0       	breq	80008bdc <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
80008b86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008b8a:	e2 18 00 02 	andl	r8,0x2,COH
80008b8e:	c0 e0       	breq	80008baa <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80008b90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b94:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b98:	30 19       	mov	r9,1
80008b9a:	f2 08 09 48 	lsl	r8,r9,r8
80008b9e:	10 99       	mov	r9,r8
80008ba0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ba4:	f1 49 00 54 	st.w	r8[84],r9
80008ba8:	c0 d8       	rjmp	80008bc2 <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80008baa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008bb2:	30 19       	mov	r9,1
80008bb4:	f2 08 09 48 	lsl	r8,r9,r8
80008bb8:	10 99       	mov	r9,r8
80008bba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bbe:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80008bc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bc6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008bca:	30 19       	mov	r9,1
80008bcc:	f2 08 09 48 	lsl	r8,r9,r8
80008bd0:	10 99       	mov	r9,r8
80008bd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bd6:	f1 49 00 44 	st.w	r8[68],r9
80008bda:	c0 d8       	rjmp	80008bf4 <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80008bdc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008be0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008be4:	30 19       	mov	r9,1
80008be6:	f2 08 09 48 	lsl	r8,r9,r8
80008bea:	10 99       	mov	r9,r8
80008bec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bf0:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80008bf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bf8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008bfc:	30 19       	mov	r9,1
80008bfe:	f2 08 09 48 	lsl	r8,r9,r8
80008c02:	10 99       	mov	r9,r8
80008c04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c08:	91 19       	st.w	r8[0x4],r9
}
80008c0a:	2f dd       	sub	sp,-12
80008c0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80008c10 <gpio_get_pin_value>:
    /* Enable GPIO */
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
80008c10:	eb cd 40 80 	pushm	r7,lr
80008c14:	1a 97       	mov	r7,sp
80008c16:	20 2d       	sub	sp,8
80008c18:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008c1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c20:	a5 98       	lsr	r8,0x5
80008c22:	a9 68       	lsl	r8,0x8
80008c24:	e0 28 f0 00 	sub	r8,61440
80008c28:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80008c2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c30:	71 89       	ld.w	r9,r8[0x60]
80008c32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c36:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c3a:	f2 08 0a 48 	lsr	r8,r9,r8
80008c3e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80008c42:	10 9c       	mov	r12,r8
80008c44:	2f ed       	sub	sp,-8
80008c46:	e3 cd 80 80 	ldm	sp++,r7,pc

80008c4a <gpio_set_gpio_pin>:
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
}


void gpio_set_gpio_pin(uint32_t pin)
{
80008c4a:	eb cd 40 80 	pushm	r7,lr
80008c4e:	1a 97       	mov	r7,sp
80008c50:	20 2d       	sub	sp,8
80008c52:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008c56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c5a:	a5 98       	lsr	r8,0x5
80008c5c:	a9 68       	lsl	r8,0x8
80008c5e:	e0 28 f0 00 	sub	r8,61440
80008c62:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80008c66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c6a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c6e:	30 19       	mov	r9,1
80008c70:	f2 08 09 48 	lsl	r8,r9,r8
80008c74:	10 99       	mov	r9,r8
80008c76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c7a:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80008c7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c86:	30 19       	mov	r9,1
80008c88:	f2 08 09 48 	lsl	r8,r9,r8
80008c8c:	10 99       	mov	r9,r8
80008c8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c92:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80008c96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c9a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c9e:	30 19       	mov	r9,1
80008ca0:	f2 08 09 48 	lsl	r8,r9,r8
80008ca4:	10 99       	mov	r9,r8
80008ca6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008caa:	91 19       	st.w	r8[0x4],r9
}
80008cac:	2f ed       	sub	sp,-8
80008cae:	e3 cd 80 80 	ldm	sp++,r7,pc

80008cb2 <gpio_clr_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
80008cb2:	eb cd 40 80 	pushm	r7,lr
80008cb6:	1a 97       	mov	r7,sp
80008cb8:	20 2d       	sub	sp,8
80008cba:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008cbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008cc2:	a5 98       	lsr	r8,0x5
80008cc4:	a9 68       	lsl	r8,0x8
80008cc6:	e0 28 f0 00 	sub	r8,61440
80008cca:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80008cce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008cd2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008cd6:	30 19       	mov	r9,1
80008cd8:	f2 08 09 48 	lsl	r8,r9,r8
80008cdc:	10 99       	mov	r9,r8
80008cde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ce2:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80008ce6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008cea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008cee:	30 19       	mov	r9,1
80008cf0:	f2 08 09 48 	lsl	r8,r9,r8
80008cf4:	10 99       	mov	r9,r8
80008cf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cfa:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80008cfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d02:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d06:	30 19       	mov	r9,1
80008d08:	f2 08 09 48 	lsl	r8,r9,r8
80008d0c:	10 99       	mov	r9,r8
80008d0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d12:	91 19       	st.w	r8[0x4],r9
}
80008d14:	2f ed       	sub	sp,-8
80008d16:	e3 cd 80 80 	ldm	sp++,r7,pc

80008d1a <gpio_tgl_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
80008d1a:	eb cd 40 80 	pushm	r7,lr
80008d1e:	1a 97       	mov	r7,sp
80008d20:	20 2d       	sub	sp,8
80008d22:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008d26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d2a:	a5 98       	lsr	r8,0x5
80008d2c:	a9 68       	lsl	r8,0x8
80008d2e:	e0 28 f0 00 	sub	r8,61440
80008d32:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
80008d36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d3a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d3e:	30 19       	mov	r9,1
80008d40:	f2 08 09 48 	lsl	r8,r9,r8
80008d44:	10 99       	mov	r9,r8
80008d46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d4a:	f1 49 00 5c 	st.w	r8[92],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80008d4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d52:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d56:	30 19       	mov	r9,1
80008d58:	f2 08 09 48 	lsl	r8,r9,r8
80008d5c:	10 99       	mov	r9,r8
80008d5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d62:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80008d66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d6a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d6e:	30 19       	mov	r9,1
80008d70:	f2 08 09 48 	lsl	r8,r9,r8
80008d74:	10 99       	mov	r9,r8
80008d76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d7a:	91 19       	st.w	r8[0x4],r9
}
80008d7c:	2f ed       	sub	sp,-8
80008d7e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008d82 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80008d82:	eb cd 40 80 	pushm	r7,lr
80008d86:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80008d88:	c0 08       	rjmp	80008d88 <_unhandled_interrupt+0x6>
80008d8a:	d7 03       	nop

80008d8c <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80008d8c:	eb cd 40 80 	pushm	r7,lr
80008d90:	1a 97       	mov	r7,sp
80008d92:	20 3d       	sub	sp,12
80008d94:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80008d98:	fe 78 08 00 	mov	r8,-63488
80008d9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008da0:	f2 09 11 03 	rsub	r9,r9,3
80008da4:	28 09       	sub	r9,-128
80008da6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008daa:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80008dae:	fe 78 08 00 	mov	r8,-63488
80008db2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008db6:	2c 09       	sub	r9,-64
80008db8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008dbc:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80008dc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dc4:	58 08       	cp.w	r8,0
80008dc6:	c1 30       	breq	80008dec <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80008dc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008dcc:	48 b8       	lddpc	r8,80008df8 <_get_interrupt_handler+0x6c>
80008dce:	a1 79       	lsl	r9,0x1
80008dd0:	2f f9       	sub	r9,-1
80008dd2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008dd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dda:	f0 08 12 00 	clz	r8,r8
80008dde:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80008de2:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80008de4:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80008de8:	70 08       	ld.w	r8,r8[0x0]
80008dea:	c0 28       	rjmp	80008dee <_get_interrupt_handler+0x62>
80008dec:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80008dee:	10 9c       	mov	r12,r8
80008df0:	2f dd       	sub	sp,-12
80008df2:	e3 cd 80 80 	ldm	sp++,r7,pc
80008df6:	00 00       	add	r0,r0
80008df8:	80 00       	ld.sh	r0,r0[0x0]
80008dfa:	eb f4 eb cd 	st.wqs	r5[0x734],r4

80008dfc <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80008dfc:	eb cd 40 80 	pushm	r7,lr
80008e00:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80008e02:	48 38       	lddpc	r8,80008e0c <INTC_init_evba+0x10>
80008e04:	e3 b8 00 01 	mtsr	0x4,r8
}
80008e08:	e3 cd 80 80 	ldm	sp++,r7,pc
80008e0c:	80 00       	ld.sh	r0,r0[0x0]
80008e0e:	e8 00       	*unknown*

80008e10 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80008e10:	eb cd 40 80 	pushm	r7,lr
80008e14:	1a 97       	mov	r7,sp
80008e16:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80008e18:	f0 1f 00 1f 	mcall	80008e94 <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80008e1c:	30 08       	mov	r8,0
80008e1e:	ef 48 ff f8 	st.w	r7[-8],r8
80008e22:	c3 18       	rjmp	80008e84 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80008e24:	30 08       	mov	r8,0
80008e26:	ef 48 ff fc 	st.w	r7[-4],r8
80008e2a:	c1 48       	rjmp	80008e52 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80008e2c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008e30:	49 a8       	lddpc	r8,80008e98 <INTC_init_interrupts+0x88>
80008e32:	a1 79       	lsl	r9,0x1
80008e34:	2f f9       	sub	r9,-1
80008e36:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008e3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e3e:	a3 68       	lsl	r8,0x2
80008e40:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80008e44:	49 69       	lddpc	r9,80008e9c <INTC_init_interrupts+0x8c>
80008e46:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80008e48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e4c:	2f f8       	sub	r8,-1
80008e4e:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80008e52:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008e56:	49 18       	lddpc	r8,80008e98 <INTC_init_interrupts+0x88>
80008e58:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80008e5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e60:	10 39       	cp.w	r9,r8
80008e62:	fe 9b ff e5 	brhi	80008e2c <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80008e66:	fe 78 08 00 	mov	r8,-63488
80008e6a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008e6e:	48 db       	lddpc	r11,80008ea0 <INTC_init_interrupts+0x90>
80008e70:	48 da       	lddpc	r10,80008ea4 <INTC_init_interrupts+0x94>
80008e72:	f6 0a 01 0a 	sub	r10,r11,r10
80008e76:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80008e7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e7e:	2f f8       	sub	r8,-1
80008e80:	ef 48 ff f8 	st.w	r7[-8],r8
80008e84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e88:	59 d8       	cp.w	r8,29
80008e8a:	fe 98 ff cd 	brls	80008e24 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80008e8e:	2f ed       	sub	sp,-8
80008e90:	e3 cd 80 80 	ldm	sp++,r7,pc
80008e94:	80 00       	ld.sh	r0,r0[0x0]
80008e96:	8d fc       	st.w	r6[0x3c],r12
80008e98:	80 00       	ld.sh	r0,r0[0x0]
80008e9a:	eb f4 80 00 	ld.wls	r4,r5[0x0]
80008e9e:	8d 82       	st.w	r6[0x20],r2
80008ea0:	80 00       	ld.sh	r0,r0[0x0]
80008ea2:	e9 04 80 00 	ld.sh	r4,r4[-32768]
80008ea6:	e8 00       	*unknown*

80008ea8 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80008ea8:	eb cd 40 80 	pushm	r7,lr
80008eac:	1a 97       	mov	r7,sp
80008eae:	20 4d       	sub	sp,16
80008eb0:	ef 4c ff f8 	st.w	r7[-8],r12
80008eb4:	ef 4b ff f4 	st.w	r7[-12],r11
80008eb8:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80008ebc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008ec0:	a5 98       	lsr	r8,0x5
80008ec2:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80008ec6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008eca:	4a 78       	lddpc	r8,80008f64 <INTC_register_interrupt+0xbc>
80008ecc:	a1 79       	lsl	r9,0x1
80008ece:	2f f9       	sub	r9,-1
80008ed0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008ed4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008ed8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008edc:	a3 68       	lsl	r8,0x2
80008ede:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80008ee2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008ee6:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80008ee8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008eec:	58 08       	cp.w	r8,0
80008eee:	c0 c1       	brne	80008f06 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80008ef0:	fe 78 08 00 	mov	r8,-63488
80008ef4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008ef8:	49 cb       	lddpc	r11,80008f68 <INTC_register_interrupt+0xc0>
80008efa:	49 da       	lddpc	r10,80008f6c <INTC_register_interrupt+0xc4>
80008efc:	f6 0a 01 0a 	sub	r10,r11,r10
80008f00:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80008f04:	c2 d8       	rjmp	80008f5e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80008f06:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008f0a:	58 18       	cp.w	r8,1
80008f0c:	c0 d1       	brne	80008f26 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80008f0e:	fe 78 08 00 	mov	r8,-63488
80008f12:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008f16:	49 7b       	lddpc	r11,80008f70 <INTC_register_interrupt+0xc8>
80008f18:	49 5a       	lddpc	r10,80008f6c <INTC_register_interrupt+0xc4>
80008f1a:	f6 0a 01 0a 	sub	r10,r11,r10
80008f1e:	bf aa       	sbr	r10,0x1e
80008f20:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80008f24:	c1 d8       	rjmp	80008f5e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80008f26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008f2a:	58 28       	cp.w	r8,2
80008f2c:	c0 d1       	brne	80008f46 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80008f2e:	fe 78 08 00 	mov	r8,-63488
80008f32:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008f36:	49 0b       	lddpc	r11,80008f74 <INTC_register_interrupt+0xcc>
80008f38:	48 da       	lddpc	r10,80008f6c <INTC_register_interrupt+0xc4>
80008f3a:	f6 0a 01 0a 	sub	r10,r11,r10
80008f3e:	bf ba       	sbr	r10,0x1f
80008f40:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80008f44:	c0 d8       	rjmp	80008f5e <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80008f46:	fe 78 08 00 	mov	r8,-63488
80008f4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008f4e:	48 bb       	lddpc	r11,80008f78 <INTC_register_interrupt+0xd0>
80008f50:	48 7a       	lddpc	r10,80008f6c <INTC_register_interrupt+0xc4>
80008f52:	f6 0a 01 0a 	sub	r10,r11,r10
80008f56:	ea 1a c0 00 	orh	r10,0xc000
80008f5a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80008f5e:	2f cd       	sub	sp,-16
80008f60:	e3 cd 80 80 	ldm	sp++,r7,pc
80008f64:	80 00       	ld.sh	r0,r0[0x0]
80008f66:	eb f4 80 00 	ld.wls	r4,r5[0x0]
80008f6a:	e9 04 80 00 	ld.sh	r4,r4[-32768]
80008f6e:	e8 00       	*unknown*
80008f70:	80 00       	ld.sh	r0,r0[0x0]
80008f72:	e9 12 80 00 	ld.uh	r2,r4[-32768]
80008f76:	e9 20 80 00 	ld.sb	r0,r4[-32768]
80008f7a:	e9 2e eb cd 	ld.sb	lr,r4[-5171]

80008f7c <mci_reset>:


int shadow_sr=0;

void mci_reset(volatile avr32_mci_t *mci)
{
80008f7c:	eb cd 40 80 	pushm	r7,lr
80008f80:	1a 97       	mov	r7,sp
80008f82:	20 1d       	sub	sp,4
80008f84:	ef 4c ff fc 	st.w	r7[-4],r12
  mci->cr = (1<<AVR32_MCI_CR_SWRST);
80008f88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f8c:	e0 69 00 80 	mov	r9,128
80008f90:	91 09       	st.w	r8[0x0],r9
}
80008f92:	2f fd       	sub	sp,-4
80008f94:	e3 cd 80 80 	ldm	sp++,r7,pc

80008f98 <mci_disable>:

void mci_disable(volatile avr32_mci_t *mci)
{
80008f98:	eb cd 40 80 	pushm	r7,lr
80008f9c:	1a 97       	mov	r7,sp
80008f9e:	20 1d       	sub	sp,4
80008fa0:	ef 4c ff fc 	st.w	r7[-4],r12
  // Disable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIDIS) | (1<<AVR32_MCI_CR_PWSDIS);
80008fa4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fa8:	30 a9       	mov	r9,10
80008faa:	91 09       	st.w	r8[0x0],r9
}
80008fac:	2f fd       	sub	sp,-4
80008fae:	e3 cd 80 80 	ldm	sp++,r7,pc

80008fb2 <mci_enable>:

void mci_enable(volatile avr32_mci_t *mci)
{
80008fb2:	eb cd 40 80 	pushm	r7,lr
80008fb6:	1a 97       	mov	r7,sp
80008fb8:	20 1d       	sub	sp,4
80008fba:	ef 4c ff fc 	st.w	r7[-4],r12
  // Enable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIEN) | (1<<AVR32_MCI_CR_PWSEN);
80008fbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fc2:	30 59       	mov	r9,5
80008fc4:	91 09       	st.w	r8[0x0],r9
}
80008fc6:	2f fd       	sub	sp,-4
80008fc8:	e3 cd 80 80 	ldm	sp++,r7,pc

80008fcc <mci_set_speed>:
}

void mci_set_speed(volatile avr32_mci_t *mci,
                   uint32_t pbb_hz,
                   uint32_t card_speed)
{
80008fcc:	eb cd 40 80 	pushm	r7,lr
80008fd0:	1a 97       	mov	r7,sp
80008fd2:	20 7d       	sub	sp,28
80008fd4:	ef 4c ff ec 	st.w	r7[-20],r12
80008fd8:	ef 4b ff e8 	st.w	r7[-24],r11
80008fdc:	ef 4a ff e4 	st.w	r7[-28],r10
    avr32_mci_cfg_t   CFG;
  };
  union u_cfg val;

  // Get the Mode Register
  mci_mode_register = mci->mr;
80008fe0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008fe4:	70 18       	ld.w	r8,r8[0x4]
80008fe6:	ef 48 ff f4 	st.w	r7[-12],r8

  if (card_speed > AVR32_MCI_HSDIS_MAX_FREQ)
80008fea:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008fee:	e0 69 78 40 	mov	r9,30784
80008ff2:	ea 19 01 7d 	orh	r9,0x17d
80008ff6:	12 38       	cp.w	r8,r9
80008ff8:	e0 88 00 14 	brls	80009020 <mci_set_speed+0x54>
  { // Use of the High Speed mode of the MCI macro.
    val.cfg = mci->cfg;
80008ffc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009000:	71 58       	ld.w	r8,r8[0x54]
80009002:	ef 48 ff f0 	st.w	r7[-16],r8
    val.CFG.hsmode = 1;
80009006:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000900a:	30 19       	mov	r9,1
8000900c:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80009010:	ef 48 ff f0 	st.w	r7[-16],r8
    mci->cfg = val.cfg;
80009014:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009018:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000901c:	f1 49 00 54 	st.w	r8[84],r9
  }

  // Multimedia Card Interface clock (MCCK or MCI_CK) is Master Clock (MCK)
  // divided by (2*(CLKDIV+1))
  if (card_speed > 0)
80009020:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009024:	58 08       	cp.w	r8,0
80009026:	c2 90       	breq	80009078 <mci_set_speed+0xac>
  {
    clkdiv = pbb_hz / (card_speed * 2);
80009028:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000902c:	f0 09 15 01 	lsl	r9,r8,0x1
80009030:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009034:	f0 09 0d 08 	divu	r8,r8,r9
80009038:	ef 48 ff f8 	st.w	r7[-8],r8
    rest   = pbb_hz % (card_speed * 2);
8000903c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009040:	f0 09 15 01 	lsl	r9,r8,0x1
80009044:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009048:	f0 09 0d 08 	divu	r8,r8,r9
8000904c:	12 98       	mov	r8,r9
8000904e:	ef 48 ff fc 	st.w	r7[-4],r8
    if (rest)
80009052:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009056:	58 08       	cp.w	r8,0
80009058:	c0 60       	breq	80009064 <mci_set_speed+0x98>
    { // Ensure that the card_speed can not be higher than expected.
      clkdiv += 1;
8000905a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000905e:	2f f8       	sub	r8,-1
80009060:	ef 48 ff f8 	st.w	r7[-8],r8
    }

    if (clkdiv > 0)
80009064:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009068:	58 08       	cp.w	r8,0
8000906a:	c0 b0       	breq	80009080 <mci_set_speed+0xb4>
    {
      clkdiv -= 1;
8000906c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009070:	20 18       	sub	r8,1
80009072:	ef 48 ff f8 	st.w	r7[-8],r8
80009076:	c0 68       	rjmp	80009082 <mci_set_speed+0xb6>
    }
  }
  else
  {
    clkdiv = 0;
80009078:	30 08       	mov	r8,0
8000907a:	ef 48 ff f8 	st.w	r7[-8],r8
8000907e:	c0 28       	rjmp	80009082 <mci_set_speed+0xb6>
      clkdiv += 1;
    }

    if (clkdiv > 0)
    {
      clkdiv -= 1;
80009080:	d7 03       	nop
  {
    clkdiv = 0;
  }

  // Write new configuration
  mci_mode_register &= ~AVR32_MCI_MR_CLKDIV_MASK; // Clear previous value
80009082:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009086:	e0 18 ff 00 	andl	r8,0xff00
8000908a:	ef 48 ff f4 	st.w	r7[-12],r8
  mci_mode_register |= clkdiv; // Set the new one
8000908e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009092:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009096:	f3 e8 10 08 	or	r8,r9,r8
8000909a:	ef 48 ff f4 	st.w	r7[-12],r8
  mci->mr = mci_mode_register;
8000909e:	ee f8 ff ec 	ld.w	r8,r7[-20]
800090a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800090a6:	91 19       	st.w	r8[0x4],r9
}
800090a8:	2f 9d       	sub	sp,-28
800090aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800090ae:	d7 03       	nop

800090b0 <mci_init>:

int mci_init(volatile avr32_mci_t *mci,
              uint8_t card_slot,
              uint32_t pbb_hz)
{
800090b0:	eb cd 40 80 	pushm	r7,lr
800090b4:	1a 97       	mov	r7,sp
800090b6:	20 3d       	sub	sp,12
800090b8:	ef 4c ff fc 	st.w	r7[-4],r12
800090bc:	16 98       	mov	r8,r11
800090be:	ef 4a ff f4 	st.w	r7[-12],r10
800090c2:	ef 68 ff f8 	st.b	r7[-8],r8
  if (card_slot>MCI_LAST_SLOTS)
800090c6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800090ca:	30 18       	mov	r8,1
800090cc:	f0 09 18 00 	cp.b	r9,r8
800090d0:	e0 88 00 04 	brls	800090d8 <mci_init+0x28>
    return MCI_INVALID_INPUT;
800090d4:	30 18       	mov	r8,1
800090d6:	c3 98       	rjmp	80009148 <mci_init+0x98>

  // Initialize all bits of the shadow status register.
  shadow_sr=0;
800090d8:	49 e8       	lddpc	r8,80009150 <mci_init+0xa0>
800090da:	30 09       	mov	r9,0
800090dc:	91 09       	st.w	r8[0x0],r9

  // Reset the MCI
  mci_reset(mci);
800090de:	ee fc ff fc 	ld.w	r12,r7[-4]
800090e2:	f0 1f 00 1d 	mcall	80009154 <mci_init+0xa4>

  // Disable the MCI
  mci_disable(mci);
800090e6:	ee fc ff fc 	ld.w	r12,r7[-4]
800090ea:	f0 1f 00 1c 	mcall	80009158 <mci_init+0xa8>

  // Disable all the interrupts
  mci->idr = 0xffffffff;
800090ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090f2:	3f f9       	mov	r9,-1
800090f4:	f1 49 00 48 	st.w	r8[72],r9

  // Setup configuration register
  mci->cfg = 0;
800090f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090fc:	30 09       	mov	r9,0
800090fe:	f1 49 00 54 	st.w	r8[84],r9

  // Clear Mode register
  mci->mr = 0;
80009102:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009106:	30 09       	mov	r9,0
80009108:	91 19       	st.w	r8[0x4],r9

  // Set the Data Timeout Register to 1 Mega Cycles
  mci->dtor = (MCI_DEFAULT_DTOREG);
8000910a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000910e:	37 29       	mov	r9,114
80009110:	91 29       	st.w	r8[0x8],r9

  // Set the Mode Register
  mci_set_speed(mci, pbb_hz, MCI_DEFAULT_SPEED_HZ);
80009112:	e2 7a 0d 40 	mov	r10,200000
80009116:	ee fb ff f4 	ld.w	r11,r7[-12]
8000911a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000911e:	f0 1f 00 10 	mcall	8000915c <mci_init+0xac>
  mci->mr |= ((MCI_DEFAULT_PWSDIV<<AVR32_MCI_MR_PWSDIV) | AVR32_MCI_MR_RDPROOF_MASK | AVR32_MCI_MR_WRPROOF_MASK);
80009122:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009126:	70 18       	ld.w	r8,r8[0x4]
80009128:	10 99       	mov	r9,r8
8000912a:	e8 19 1f 00 	orl	r9,0x1f00
8000912e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009132:	91 19       	st.w	r8[0x4],r9

  // Set the SD/MMC Card Register
  mci->sdcr = (MCI_BUS_SIZE_1_BIT>>AVR32_MCI_SDCR_SDCBUS_OFFSET)|(card_slot>>AVR32_MCI_SDCR_SDCSEL_OFFSET);
80009134:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009138:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000913c:	91 39       	st.w	r8[0xc],r9

  // Enable the MCI and the Power Saving
  mci_enable(mci);
8000913e:	ee fc ff fc 	ld.w	r12,r7[-4]
80009142:	f0 1f 00 08 	mcall	80009160 <mci_init+0xb0>

  return MCI_SUCCESS;
80009146:	30 08       	mov	r8,0
}
80009148:	10 9c       	mov	r12,r8
8000914a:	2f dd       	sub	sp,-12
8000914c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009150:	00 00       	add	r0,r0
80009152:	07 68       	ld.uh	r8,--r3
80009154:	80 00       	ld.sh	r0,r0[0x0]
80009156:	8f 7c       	st.w	r7[0x1c],r12
80009158:	80 00       	ld.sh	r0,r0[0x0]
8000915a:	8f 98       	st.w	r7[0x24],r8
8000915c:	80 00       	ld.sh	r0,r0[0x0]
8000915e:	8f cc       	st.w	r7[0x30],r12
80009160:	80 00       	ld.sh	r0,r0[0x0]
80009162:	8f b2       	st.w	r7[0x2c],r2

80009164 <mci_set_block_size>:

void mci_set_block_size(volatile avr32_mci_t *mci,
                        uint16_t length)
{
80009164:	eb cd 40 80 	pushm	r7,lr
80009168:	1a 97       	mov	r7,sp
8000916a:	20 3d       	sub	sp,12
8000916c:	ef 4c ff f8 	st.w	r7[-8],r12
80009170:	16 98       	mov	r8,r11
80009172:	ef 58 ff f4 	st.h	r7[-12],r8
  uint32_t mci_mode_register;

  mci_mode_register = mci->mr;
80009176:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000917a:	70 18       	ld.w	r8,r8[0x4]
8000917c:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register &= ~AVR32_MCI_MR_BLKLEN_MASK; // Clear previous BLKLEN
80009180:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009184:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80009188:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register |= (length<<AVR32_MCI_MR_BLKLEN_OFFSET); // Set the new value
8000918c:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80009190:	b1 68       	lsl	r8,0x10
80009192:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009196:	f3 e8 10 08 	or	r8,r9,r8
8000919a:	ef 48 ff fc 	st.w	r7[-4],r8

  mci->mr = mci_mode_register;
8000919e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800091a6:	91 19       	st.w	r8[0x4],r9
}
800091a8:	2f dd       	sub	sp,-12
800091aa:	e3 cd 80 80 	ldm	sp++,r7,pc

800091ae <mci_set_block_count>:

void mci_set_block_count(volatile avr32_mci_t *mci,
                         uint16_t cnt)
{
800091ae:	eb cd 40 80 	pushm	r7,lr
800091b2:	1a 97       	mov	r7,sp
800091b4:	20 3d       	sub	sp,12
800091b6:	ef 4c ff f8 	st.w	r7[-8],r12
800091ba:	16 98       	mov	r8,r11
800091bc:	ef 58 ff f4 	st.h	r7[-12],r8
    uint32_t          blkr;
    avr32_mci_blkr_t  BLKR;
  };
  union u_blkr val;

  val.blkr = mci->blkr;
800091c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091c4:	70 68       	ld.w	r8,r8[0x18]
800091c6:	ef 48 ff fc 	st.w	r7[-4],r8
  val.BLKR.bcnt = cnt;
800091ca:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800091ce:	ef 58 ff fe 	st.h	r7[-2],r8
  mci->blkr = val.blkr;
800091d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800091d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091da:	91 69       	st.w	r8[0x18],r9
}
800091dc:	2f dd       	sub	sp,-12
800091de:	e3 cd 80 80 	ldm	sp++,r7,pc
800091e2:	d7 03       	nop

800091e4 <mci_send_cmd>:

int mci_send_cmd(volatile avr32_mci_t *mci,
                 unsigned int cmd,
                 unsigned int arg)
{
800091e4:	eb cd 40 80 	pushm	r7,lr
800091e8:	1a 97       	mov	r7,sp
800091ea:	20 7d       	sub	sp,28
800091ec:	ef 4c ff ec 	st.w	r7[-20],r12
800091f0:	ef 4b ff e8 	st.w	r7[-24],r11
800091f4:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int	error;

  // Send the command
  mci->argr = arg;
800091f8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800091fc:	ee f9 ff e4 	ld.w	r9,r7[-28]
80009200:	91 49       	st.w	r8[0x10],r9
  mci->cmdr = cmd;
80009202:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009206:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000920a:	91 59       	st.w	r8[0x14],r9
8000920c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009210:	ef 48 ff f4 	st.w	r7[-12],r8
80009214:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009218:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
8000921c:	4a 78       	lddpc	r8,800092b8 <mci_send_cmd+0xd4>
8000921e:	70 08       	ld.w	r8,r8[0x0]
80009220:	10 99       	mov	r9,r8
80009222:	e6 19 01 e0 	andh	r9,0x1e0,COH
80009226:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000922a:	71 08       	ld.w	r8,r8[0x40]
8000922c:	f3 e8 10 08 	or	r8,r9,r8
80009230:	10 99       	mov	r9,r8
80009232:	4a 28       	lddpc	r8,800092b8 <mci_send_cmd+0xd4>
80009234:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80009236:	4a 18       	lddpc	r8,800092b8 <mci_send_cmd+0xd4>
80009238:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_cmd_ready(volatile avr32_mci_t *mci)
{
  return ((mci_get_sr(mci)&AVR32_MCI_SR_CMDRDY_MASK) != 0);
8000923a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // wait for CMDRDY Status flag to read the response
  while( !(mci_cmd_ready(mci)) );
8000923e:	ce 70       	breq	8000920c <mci_send_cmd+0x28>
80009240:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009244:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80009248:	49 c8       	lddpc	r8,800092b8 <mci_send_cmd+0xd4>
8000924a:	70 08       	ld.w	r8,r8[0x0]
8000924c:	10 99       	mov	r9,r8
8000924e:	e6 19 01 e0 	andh	r9,0x1e0,COH
80009252:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009256:	71 08       	ld.w	r8,r8[0x40]
80009258:	f3 e8 10 08 	or	r8,r9,r8
8000925c:	10 99       	mov	r9,r8
8000925e:	49 78       	lddpc	r8,800092b8 <mci_send_cmd+0xd4>
80009260:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80009262:	49 68       	lddpc	r8,800092b8 <mci_send_cmd+0xd4>
80009264:	70 08       	ld.w	r8,r8[0x0]

  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
80009266:	e6 18 c0 7f 	andh	r8,0xc07f,COH
8000926a:	ef 48 ff f0 	st.w	r7[-16],r8
  if(error != 0 )
8000926e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009272:	58 08       	cp.w	r8,0
80009274:	c1 d0       	breq	800092ae <mci_send_cmd+0xca>
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
80009276:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000927a:	e0 48 00 69 	cp.w	r8,105
8000927e:	c0 f0       	breq	8000929c <mci_send_cmd+0xb8>
80009280:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009284:	e0 48 08 41 	cp.w	r8,2113
80009288:	c0 a0       	breq	8000929c <mci_send_cmd+0xb8>
    {
      if( error != AVR32_MCI_SR_RTOE_MASK )
8000928a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000928e:	fc 19 00 10 	movh	r9,0x10
80009292:	12 38       	cp.w	r8,r9
80009294:	c0 c0       	breq	800092ac <mci_send_cmd+0xc8>
        // filter RTOE error which happens when using the HS mode
        return error;
80009296:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000929a:	c0 b8       	rjmp	800092b0 <mci_send_cmd+0xcc>
    }
    else
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
8000929c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800092a0:	e4 48 00 00 	cp.w	r8,262144
800092a4:	c0 50       	breq	800092ae <mci_send_cmd+0xca>
        return error;
800092a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800092aa:	c0 38       	rjmp	800092b0 <mci_send_cmd+0xcc>
  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
  if(error != 0 )
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
800092ac:	d7 03       	nop
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
        return error;
    }
  }
  return MCI_SUCCESS;
800092ae:	30 08       	mov	r8,0

}
800092b0:	10 9c       	mov	r12,r8
800092b2:	2f 9d       	sub	sp,-28
800092b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800092b8:	00 00       	add	r0,r0
800092ba:	07 68       	ld.uh	r8,--r3

800092bc <mci_set_bus_size>:

int mci_set_bus_size(volatile avr32_mci_t *mci,
                     uint8_t busWidth)
{
800092bc:	eb cd 40 80 	pushm	r7,lr
800092c0:	1a 97       	mov	r7,sp
800092c2:	20 3d       	sub	sp,12
800092c4:	ef 4c ff f8 	st.w	r7[-8],r12
800092c8:	16 98       	mov	r8,r11
800092ca:	ef 68 ff f4 	st.b	r7[-12],r8
  uint32_t mci_sdcr_register;

  if (busWidth > MCI_BUS_SIZE_8_BIT)
800092ce:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800092d2:	30 38       	mov	r8,3
800092d4:	f0 09 18 00 	cp.b	r9,r8
800092d8:	e0 88 00 04 	brls	800092e0 <mci_set_bus_size+0x24>
    return MCI_INVALID_INPUT;
800092dc:	30 18       	mov	r8,1
800092de:	c1 b8       	rjmp	80009314 <mci_set_bus_size+0x58>

  mci_sdcr_register = mci->sdcr;
800092e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092e4:	70 38       	ld.w	r8,r8[0xc]
800092e6:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register &= ~AVR32_MCI_SDCR_SDCBUS_MASK; // Clear previous buswidth
800092ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800092ee:	e0 18 ff 3f 	andl	r8,0xff3f
800092f2:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register |= (busWidth<<AVR32_MCI_SDCR_SDCBUS_OFFSET);
800092f6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800092fa:	a7 68       	lsl	r8,0x6
800092fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009300:	f3 e8 10 08 	or	r8,r9,r8
80009304:	ef 48 ff fc 	st.w	r7[-4],r8
  mci->sdcr = mci_sdcr_register;
80009308:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000930c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009310:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
80009312:	30 08       	mov	r8,0
}
80009314:	10 9c       	mov	r12,r8
80009316:	2f dd       	sub	sp,-12
80009318:	e3 cd 80 80 	ldm	sp++,r7,pc

8000931c <mci_read_response>:


unsigned int mci_read_response(volatile avr32_mci_t *mci)
{
8000931c:	eb cd 40 80 	pushm	r7,lr
80009320:	1a 97       	mov	r7,sp
80009322:	20 1d       	sub	sp,4
80009324:	ef 4c ff fc 	st.w	r7[-4],r12
  return mci->rspr0;
80009328:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000932c:	70 88       	ld.w	r8,r8[0x20]
}
8000932e:	10 9c       	mov	r12,r8
80009330:	2f fd       	sub	sp,-4
80009332:	e3 cd 80 80 	ldm	sp++,r7,pc
80009336:	d7 03       	nop

80009338 <mci_wait_busy_signal>:

void mci_wait_busy_signal(volatile avr32_mci_t *mci)
{
80009338:	eb cd 40 80 	pushm	r7,lr
8000933c:	1a 97       	mov	r7,sp
8000933e:	20 2d       	sub	sp,8
80009340:	ef 4c ff f8 	st.w	r7[-8],r12
80009344:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009348:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
8000934c:	48 b8       	lddpc	r8,80009378 <mci_wait_busy_signal+0x40>
8000934e:	70 08       	ld.w	r8,r8[0x0]
80009350:	10 99       	mov	r9,r8
80009352:	e6 19 01 e0 	andh	r9,0x1e0,COH
80009356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000935a:	71 08       	ld.w	r8,r8[0x40]
8000935c:	f3 e8 10 08 	or	r8,r9,r8
80009360:	10 99       	mov	r9,r8
80009362:	48 68       	lddpc	r8,80009378 <mci_wait_busy_signal+0x40>
80009364:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80009366:	48 58       	lddpc	r8,80009378 <mci_wait_busy_signal+0x40>
80009368:	70 08       	ld.w	r8,r8[0x0]
  while(!(mci_get_sr(mci)&AVR32_MCI_SR_NOTBUSY_MASK));
8000936a:	e2 18 00 20 	andl	r8,0x20,COH
8000936e:	ce b0       	breq	80009344 <mci_wait_busy_signal+0xc>
}
80009370:	2f ed       	sub	sp,-8
80009372:	e3 cd 80 80 	ldm	sp++,r7,pc
80009376:	00 00       	add	r0,r0
80009378:	00 00       	add	r0,r0
8000937a:	07 68       	ld.uh	r8,--r3

8000937c <mci_select_card>:

int mci_select_card(volatile avr32_mci_t *mci,
                    uint8_t card_slot,
                    uint8_t bus_width)
{
8000937c:	eb cd 40 80 	pushm	r7,lr
80009380:	1a 97       	mov	r7,sp
80009382:	20 3d       	sub	sp,12
80009384:	ef 4c ff fc 	st.w	r7[-4],r12
80009388:	16 99       	mov	r9,r11
8000938a:	14 98       	mov	r8,r10
8000938c:	ef 69 ff f8 	st.b	r7[-8],r9
80009390:	ef 68 ff f4 	st.b	r7[-12],r8
  if (card_slot > MCI_LAST_SLOTS)
80009394:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009398:	30 18       	mov	r8,1
8000939a:	f0 09 18 00 	cp.b	r9,r8
8000939e:	e0 88 00 04 	brls	800093a6 <mci_select_card+0x2a>
    return MCI_INVALID_INPUT;
800093a2:	30 18       	mov	r8,1
800093a4:	c0 e8       	rjmp	800093c0 <mci_select_card+0x44>

  // Select the card slot and bus width
  mci->sdcr = (bus_width<<AVR32_MCI_SDCR_SDCBUS_OFFSET) | (card_slot<<AVR32_MCI_SDCR_SDCSEL_OFFSET);
800093a6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800093aa:	f0 09 15 06 	lsl	r9,r8,0x6
800093ae:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800093b2:	f3 e8 10 08 	or	r8,r9,r8
800093b6:	10 99       	mov	r9,r8
800093b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093bc:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
800093be:	30 08       	mov	r8,0
}
800093c0:	10 9c       	mov	r12,r8
800093c2:	2f dd       	sub	sp,-12
800093c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800093c8 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800093c8:	eb cd 40 80 	pushm	r7,lr
800093cc:	1a 97       	mov	r7,sp
800093ce:	20 1d       	sub	sp,4
800093d0:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800093d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093d8:	e6 18 00 01 	andh	r8,0x1,COH
800093dc:	5f 08       	sreq	r8
800093de:	5c 58       	castu.b	r8
}
800093e0:	10 9c       	mov	r12,r8
800093e2:	2f fd       	sub	sp,-4
800093e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800093e8 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
800093e8:	eb cd 40 80 	pushm	r7,lr
800093ec:	1a 97       	mov	r7,sp
800093ee:	20 4d       	sub	sp,16
800093f0:	ef 4c ff f8 	st.w	r7[-8],r12
800093f4:	ef 4b ff f4 	st.w	r7[-12],r11
800093f8:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800093fc:	e1 b8 00 00 	mfsr	r8,0x0
80009400:	10 9c       	mov	r12,r8
80009402:	f0 1f 00 73 	mcall	800095cc <tc_configure_interrupts+0x1e4>
80009406:	18 98       	mov	r8,r12
80009408:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000940c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009410:	58 28       	cp.w	r8,2
80009412:	e0 88 00 04 	brls	8000941a <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
80009416:	3f f8       	mov	r8,-1
80009418:	cd 68       	rjmp	800095c4 <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
8000941a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000941e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009422:	70 08       	ld.w	r8,r8[0x0]
80009424:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80009428:	5c 58       	castu.b	r8
8000942a:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
8000942e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009432:	70 08       	ld.w	r8,r8[0x0]
80009434:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80009438:	5c 58       	castu.b	r8
8000943a:	a7 68       	lsl	r8,0x6
8000943c:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
8000943e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009442:	70 08       	ld.w	r8,r8[0x0]
80009444:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80009448:	5c 58       	castu.b	r8
8000944a:	a5 78       	lsl	r8,0x5
8000944c:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
8000944e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009452:	70 08       	ld.w	r8,r8[0x0]
80009454:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80009458:	5c 58       	castu.b	r8
8000945a:	a5 68       	lsl	r8,0x4
8000945c:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
8000945e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009462:	70 08       	ld.w	r8,r8[0x0]
80009464:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80009468:	5c 58       	castu.b	r8
8000946a:	a3 78       	lsl	r8,0x3
8000946c:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
8000946e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009472:	70 08       	ld.w	r8,r8[0x0]
80009474:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80009478:	5c 58       	castu.b	r8
8000947a:	a3 68       	lsl	r8,0x2
8000947c:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
8000947e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009482:	70 08       	ld.w	r8,r8[0x0]
80009484:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80009488:	5c 58       	castu.b	r8
8000948a:	a1 78       	lsl	r8,0x1
8000948c:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
8000948e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009492:	70 08       	ld.w	r8,r8[0x0]
80009494:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009498:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
8000949a:	f3 e8 10 08 	or	r8,r9,r8
8000949e:	10 99       	mov	r9,r8
800094a0:	ee fa ff f8 	ld.w	r10,r7[-8]
800094a4:	f6 08 15 06 	lsl	r8,r11,0x6
800094a8:	f4 08 00 08 	add	r8,r10,r8
800094ac:	2d c8       	sub	r8,-36
800094ae:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
800094b0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800094b4:	30 08       	mov	r8,0
800094b6:	f0 09 18 00 	cp.b	r9,r8
800094ba:	c0 20       	breq	800094be <tc_configure_interrupts+0xd6>
800094bc:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800094be:	ee fb ff f4 	ld.w	r11,r7[-12]
800094c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800094c6:	70 08       	ld.w	r8,r8[0x0]
800094c8:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800094cc:	5c 58       	castu.b	r8
800094ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800094d2:	c0 41       	brne	800094da <tc_configure_interrupts+0xf2>
800094d4:	e0 69 00 80 	mov	r9,128
800094d8:	c0 28       	rjmp	800094dc <tc_configure_interrupts+0xf4>
800094da:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
800094dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800094e0:	70 08       	ld.w	r8,r8[0x0]
800094e2:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800094e6:	5c 58       	castu.b	r8
800094e8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800094ec:	c0 31       	brne	800094f2 <tc_configure_interrupts+0x10a>
800094ee:	34 08       	mov	r8,64
800094f0:	c0 28       	rjmp	800094f4 <tc_configure_interrupts+0x10c>
800094f2:	30 08       	mov	r8,0
800094f4:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
800094f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800094fa:	70 08       	ld.w	r8,r8[0x0]
800094fc:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80009500:	5c 58       	castu.b	r8
80009502:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009506:	c0 31       	brne	8000950c <tc_configure_interrupts+0x124>
80009508:	32 08       	mov	r8,32
8000950a:	c0 28       	rjmp	8000950e <tc_configure_interrupts+0x126>
8000950c:	30 08       	mov	r8,0
8000950e:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80009510:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009514:	70 08       	ld.w	r8,r8[0x0]
80009516:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
8000951a:	5c 58       	castu.b	r8
8000951c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009520:	c0 31       	brne	80009526 <tc_configure_interrupts+0x13e>
80009522:	31 08       	mov	r8,16
80009524:	c0 28       	rjmp	80009528 <tc_configure_interrupts+0x140>
80009526:	30 08       	mov	r8,0
80009528:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
8000952a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000952e:	70 08       	ld.w	r8,r8[0x0]
80009530:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80009534:	5c 58       	castu.b	r8
80009536:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000953a:	c0 31       	brne	80009540 <tc_configure_interrupts+0x158>
8000953c:	30 88       	mov	r8,8
8000953e:	c0 28       	rjmp	80009542 <tc_configure_interrupts+0x15a>
80009540:	30 08       	mov	r8,0
80009542:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80009544:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009548:	70 08       	ld.w	r8,r8[0x0]
8000954a:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
8000954e:	5c 58       	castu.b	r8
80009550:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009554:	c0 31       	brne	8000955a <tc_configure_interrupts+0x172>
80009556:	30 48       	mov	r8,4
80009558:	c0 28       	rjmp	8000955c <tc_configure_interrupts+0x174>
8000955a:	30 08       	mov	r8,0
8000955c:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
8000955e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009562:	70 08       	ld.w	r8,r8[0x0]
80009564:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80009568:	5c 58       	castu.b	r8
8000956a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000956e:	c0 31       	brne	80009574 <tc_configure_interrupts+0x18c>
80009570:	30 28       	mov	r8,2
80009572:	c0 28       	rjmp	80009576 <tc_configure_interrupts+0x18e>
80009574:	30 08       	mov	r8,0
80009576:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
80009578:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000957c:	70 08       	ld.w	r8,r8[0x0]
8000957e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009582:	5c 58       	castu.b	r8
80009584:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009588:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000958a:	f3 e8 10 08 	or	r8,r9,r8
8000958e:	10 99       	mov	r9,r8
80009590:	ee fa ff f8 	ld.w	r10,r7[-8]
80009594:	f6 08 15 06 	lsl	r8,r11,0x6
80009598:	f4 08 00 08 	add	r8,r10,r8
8000959c:	2d 88       	sub	r8,-40
8000959e:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800095a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800095a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800095a8:	a1 78       	lsl	r8,0x1
800095aa:	2f f8       	sub	r8,-1
800095ac:	a5 78       	lsl	r8,0x5
800095ae:	f2 08 00 08 	add	r8,r9,r8
800095b2:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800095b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800095b8:	30 08       	mov	r8,0
800095ba:	f0 09 18 00 	cp.b	r9,r8
800095be:	c0 20       	breq	800095c2 <tc_configure_interrupts+0x1da>
800095c0:	d5 03       	csrf	0x10

  return 0;
800095c2:	30 08       	mov	r8,0
}
800095c4:	10 9c       	mov	r12,r8
800095c6:	2f cd       	sub	sp,-16
800095c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800095cc:	80 00       	ld.sh	r0,r0[0x0]
800095ce:	93 c8       	st.w	r9[0x30],r8

800095d0 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
800095d0:	eb cd 40 80 	pushm	r7,lr
800095d4:	1a 97       	mov	r7,sp
800095d6:	20 2d       	sub	sp,8
800095d8:	ef 4c ff fc 	st.w	r7[-4],r12
800095dc:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800095e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095e4:	70 08       	ld.w	r8,r8[0x0]
800095e6:	58 28       	cp.w	r8,2
800095e8:	e0 88 00 04 	brls	800095f0 <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
800095ec:	3f f8       	mov	r8,-1
800095ee:	c9 78       	rjmp	8000971c <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800095f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095f4:	70 09       	ld.w	r9,r8[0x0]
800095f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095fa:	70 18       	ld.w	r8,r8[0x4]
800095fc:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
80009600:	5c 58       	castu.b	r8
80009602:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
80009606:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000960a:	70 18       	ld.w	r8,r8[0x4]
8000960c:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
80009610:	5c 58       	castu.b	r8
80009612:	bd 68       	lsl	r8,0x1c
80009614:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
80009616:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000961a:	70 18       	ld.w	r8,r8[0x4]
8000961c:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
80009620:	5c 58       	castu.b	r8
80009622:	bb 68       	lsl	r8,0x1a
80009624:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
80009626:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000962a:	70 18       	ld.w	r8,r8[0x4]
8000962c:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
80009630:	5c 58       	castu.b	r8
80009632:	b9 68       	lsl	r8,0x18
80009634:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
80009636:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000963a:	70 18       	ld.w	r8,r8[0x4]
8000963c:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
80009640:	5c 58       	castu.b	r8
80009642:	b7 68       	lsl	r8,0x16
80009644:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
80009646:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000964a:	70 18       	ld.w	r8,r8[0x4]
8000964c:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
80009650:	5c 58       	castu.b	r8
80009652:	b5 68       	lsl	r8,0x14
80009654:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
80009656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000965a:	70 18       	ld.w	r8,r8[0x4]
8000965c:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
80009660:	5c 58       	castu.b	r8
80009662:	b3 68       	lsl	r8,0x12
80009664:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
80009666:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000966a:	70 18       	ld.w	r8,r8[0x4]
8000966c:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80009670:	5c 58       	castu.b	r8
80009672:	b1 68       	lsl	r8,0x10
80009674:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
80009678:	10 9a       	mov	r10,r8
8000967a:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
8000967c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009680:	70 18       	ld.w	r8,r8[0x4]
80009682:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
80009686:	5c 58       	castu.b	r8
80009688:	ad 78       	lsl	r8,0xd
8000968a:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
8000968c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009690:	70 18       	ld.w	r8,r8[0x4]
80009692:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
80009696:	5c 58       	castu.b	r8
80009698:	ad 68       	lsl	r8,0xc
8000969a:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
8000969c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800096a0:	70 18       	ld.w	r8,r8[0x4]
800096a2:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
800096a6:	5c 58       	castu.b	r8
800096a8:	ab 68       	lsl	r8,0xa
800096aa:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
800096ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800096b0:	70 18       	ld.w	r8,r8[0x4]
800096b2:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
800096b6:	5c 58       	castu.b	r8
800096b8:	a9 68       	lsl	r8,0x8
800096ba:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
800096bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800096c0:	70 18       	ld.w	r8,r8[0x4]
800096c2:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800096c6:	5c 58       	castu.b	r8
800096c8:	a7 78       	lsl	r8,0x7
800096ca:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
800096cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800096d0:	70 18       	ld.w	r8,r8[0x4]
800096d2:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800096d6:	5c 58       	castu.b	r8
800096d8:	a7 68       	lsl	r8,0x6
800096da:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
800096dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800096e0:	70 18       	ld.w	r8,r8[0x4]
800096e2:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
800096e6:	5c 58       	castu.b	r8
800096e8:	a5 68       	lsl	r8,0x4
800096ea:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
800096ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800096f0:	70 18       	ld.w	r8,r8[0x4]
800096f2:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800096f6:	5c 58       	castu.b	r8
800096f8:	a3 78       	lsl	r8,0x3
800096fa:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
800096fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009700:	70 18       	ld.w	r8,r8[0x4]
80009702:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80009706:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80009708:	f5 e8 10 08 	or	r8,r10,r8
8000970c:	10 9a       	mov	r10,r8
8000970e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009712:	a5 69       	lsl	r9,0x4
80009714:	2f f9       	sub	r9,-1
80009716:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
8000971a:	30 08       	mov	r8,0
}
8000971c:	10 9c       	mov	r12,r8
8000971e:	2f ed       	sub	sp,-8
80009720:	e3 cd 80 80 	ldm	sp++,r7,pc

80009724 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80009724:	eb cd 40 80 	pushm	r7,lr
80009728:	1a 97       	mov	r7,sp
8000972a:	20 2d       	sub	sp,8
8000972c:	ef 4c ff fc 	st.w	r7[-4],r12
80009730:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80009734:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009738:	58 28       	cp.w	r8,2
8000973a:	e0 88 00 04 	brls	80009742 <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
8000973e:	3f f8       	mov	r8,-1
80009740:	c0 b8       	rjmp	80009756 <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80009742:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009746:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000974a:	a7 68       	lsl	r8,0x6
8000974c:	f2 08 00 08 	add	r8,r9,r8
80009750:	30 59       	mov	r9,5
80009752:	91 09       	st.w	r8[0x0],r9

  return 0;
80009754:	30 08       	mov	r8,0
}
80009756:	10 9c       	mov	r12,r8
80009758:	2f ed       	sub	sp,-8
8000975a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000975e <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
8000975e:	eb cd 40 80 	pushm	r7,lr
80009762:	1a 97       	mov	r7,sp
80009764:	20 2d       	sub	sp,8
80009766:	ef 4c ff fc 	st.w	r7[-4],r12
8000976a:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000976e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009772:	58 28       	cp.w	r8,2
80009774:	e0 88 00 04 	brls	8000977c <tc_read_sr+0x1e>
    return TC_INVALID_ARGUMENT;
80009778:	3f f8       	mov	r8,-1
8000977a:	c0 b8       	rjmp	80009790 <tc_read_sr+0x32>

  return tc->channel[channel].sr;
8000977c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009780:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009784:	a1 78       	lsl	r8,0x1
80009786:	2f f8       	sub	r8,-1
80009788:	a5 78       	lsl	r8,0x5
8000978a:	f2 08 00 08 	add	r8,r9,r8
8000978e:	70 08       	ld.w	r8,r8[0x0]
}
80009790:	10 9c       	mov	r12,r8
80009792:	2f ed       	sub	sp,-8
80009794:	e3 cd 80 80 	ldm	sp++,r7,pc

80009798 <tc_write_rc>:
  return value;
}


uint16_t tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, uint16_t value)
{
80009798:	eb cd 40 80 	pushm	r7,lr
8000979c:	1a 97       	mov	r7,sp
8000979e:	20 3d       	sub	sp,12
800097a0:	ef 4c ff fc 	st.w	r7[-4],r12
800097a4:	ef 4b ff f8 	st.w	r7[-8],r11
800097a8:	14 98       	mov	r8,r10
800097aa:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800097ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097b2:	58 28       	cp.w	r8,2
800097b4:	e0 88 00 04 	brls	800097bc <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
800097b8:	3f f8       	mov	r8,-1
800097ba:	c2 78       	rjmp	80009808 <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800097bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800097c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800097c4:	a5 69       	lsl	r9,0x4
800097c6:	2f f9       	sub	r9,-1
800097c8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800097cc:	e2 18 80 00 	andl	r8,0x8000,COH
800097d0:	c1 a0       	breq	80009804 <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
800097d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800097da:	ee fa ff fc 	ld.w	r10,r7[-4]
800097de:	a7 69       	lsl	r9,0x6
800097e0:	f4 09 00 09 	add	r9,r10,r9
800097e4:	2e 49       	sub	r9,-28
800097e6:	72 09       	ld.w	r9,r9[0x0]
800097e8:	12 9a       	mov	r10,r9
800097ea:	e0 1a 00 00 	andl	r10,0x0
800097ee:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800097f2:	f5 e9 10 09 	or	r9,r10,r9
800097f6:	ee fa ff fc 	ld.w	r10,r7[-4]
800097fa:	a7 68       	lsl	r8,0x6
800097fc:	f4 08 00 08 	add	r8,r10,r8
80009800:	2e 48       	sub	r8,-28
80009802:	91 09       	st.w	r8[0x0],r9

  return value;
80009804:	ef 08 ff f4 	ld.sh	r8,r7[-12]
}
80009808:	10 9c       	mov	r12,r8
8000980a:	2f dd       	sub	sp,-12
8000980c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009810 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80009810:	eb cd 40 80 	pushm	r7,lr
80009814:	1a 97       	mov	r7,sp
80009816:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80009818:	e1 b8 00 00 	mfsr	r8,0x0
8000981c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80009820:	d3 03       	ssrf	0x10

	return flags;
80009822:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80009826:	10 9c       	mov	r12,r8
80009828:	2f fd       	sub	sp,-4
8000982a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000982e <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8000982e:	eb cd 40 80 	pushm	r7,lr
80009832:	1a 97       	mov	r7,sp
80009834:	20 1d       	sub	sp,4
80009836:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000983a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000983e:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80009842:	2f fd       	sub	sp,-4
80009844:	e3 cd 80 80 	ldm	sp++,r7,pc

80009848 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
80009848:	eb cd 40 80 	pushm	r7,lr
8000984c:	1a 97       	mov	r7,sp
8000984e:	20 2d       	sub	sp,8
80009850:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
80009854:	f0 1f 00 0b 	mcall	80009880 <sleepmgr_lock_mode+0x38>
80009858:	18 98       	mov	r8,r12
8000985a:	ef 48 ff fc 	st.w	r7[-4],r8

	++sleepmgr_locks[mode];
8000985e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009862:	48 99       	lddpc	r9,80009884 <sleepmgr_lock_mode+0x3c>
80009864:	f2 08 07 09 	ld.ub	r9,r9[r8]
80009868:	2f f9       	sub	r9,-1
8000986a:	5c 59       	castu.b	r9
8000986c:	48 6a       	lddpc	r10,80009884 <sleepmgr_lock_mode+0x3c>
8000986e:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
80009872:	ee fc ff fc 	ld.w	r12,r7[-4]
80009876:	f0 1f 00 05 	mcall	80009888 <sleepmgr_lock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000987a:	2f ed       	sub	sp,-8
8000987c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009880:	80 00       	ld.sh	r0,r0[0x0]
80009882:	98 10       	ld.sh	r0,r12[0x2]
80009884:	00 00       	add	r0,r0
80009886:	0f dc       	ld.ub	r12,r7[0x5]
80009888:	80 00       	ld.sh	r0,r0[0x0]
8000988a:	98 2e       	ld.sh	lr,r12[0x4]

8000988c <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
8000988c:	eb cd 40 80 	pushm	r7,lr
80009890:	1a 97       	mov	r7,sp
80009892:	20 2d       	sub	sp,8
80009894:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();
80009898:	f0 1f 00 0b 	mcall	800098c4 <sleepmgr_unlock_mode+0x38>
8000989c:	18 98       	mov	r8,r12
8000989e:	ef 48 ff fc 	st.w	r7[-4],r8

	--sleepmgr_locks[mode];
800098a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098a6:	48 99       	lddpc	r9,800098c8 <sleepmgr_unlock_mode+0x3c>
800098a8:	f2 08 07 09 	ld.ub	r9,r9[r8]
800098ac:	20 19       	sub	r9,1
800098ae:	5c 59       	castu.b	r9
800098b0:	48 6a       	lddpc	r10,800098c8 <sleepmgr_unlock_mode+0x3c>
800098b2:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
800098b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800098ba:	f0 1f 00 05 	mcall	800098cc <sleepmgr_unlock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
800098be:	2f ed       	sub	sp,-8
800098c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800098c4:	80 00       	ld.sh	r0,r0[0x0]
800098c6:	98 10       	ld.sh	r0,r12[0x2]
800098c8:	00 00       	add	r0,r0
800098ca:	0f dc       	ld.ub	r12,r7[0x5]
800098cc:	80 00       	ld.sh	r0,r0[0x0]
800098ce:	98 2e       	ld.sh	lr,r12[0x4]

800098d0 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
800098d0:	eb cd 40 80 	pushm	r7,lr
800098d4:	1a 97       	mov	r7,sp
800098d6:	20 1d       	sub	sp,4
800098d8:	18 98       	mov	r8,r12
800098da:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!b_idle && udd_b_idle) {
800098de:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800098e2:	ec 18 00 01 	eorl	r8,0x1
800098e6:	5c 58       	castu.b	r8
800098e8:	c0 80       	breq	800098f8 <udd_sleep_mode+0x28>
800098ea:	48 f8       	lddpc	r8,80009924 <udd_sleep_mode+0x54>
800098ec:	11 88       	ld.ub	r8,r8[0x0]
800098ee:	58 08       	cp.w	r8,0
800098f0:	c0 40       	breq	800098f8 <udd_sleep_mode+0x28>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
800098f2:	30 1c       	mov	r12,1
800098f4:	f0 1f 00 0d 	mcall	80009928 <udd_sleep_mode+0x58>
	}
	if (b_idle && !udd_b_idle) {
800098f8:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800098fc:	30 08       	mov	r8,0
800098fe:	f0 09 18 00 	cp.b	r9,r8
80009902:	c0 a0       	breq	80009916 <udd_sleep_mode+0x46>
80009904:	48 88       	lddpc	r8,80009924 <udd_sleep_mode+0x54>
80009906:	11 88       	ld.ub	r8,r8[0x0]
80009908:	ec 18 00 01 	eorl	r8,0x1
8000990c:	5c 58       	castu.b	r8
8000990e:	c0 40       	breq	80009916 <udd_sleep_mode+0x46>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
80009910:	30 1c       	mov	r12,1
80009912:	f0 1f 00 07 	mcall	8000992c <udd_sleep_mode+0x5c>
	}
	udd_b_idle = b_idle;
80009916:	48 49       	lddpc	r9,80009924 <udd_sleep_mode+0x54>
80009918:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000991c:	b2 88       	st.b	r9[0x0],r8
}
8000991e:	2f fd       	sub	sp,-4
80009920:	e3 cd 80 80 	ldm	sp++,r7,pc
80009924:	00 00       	add	r0,r0
80009926:	07 6c       	ld.uh	r12,--r3
80009928:	80 00       	ld.sh	r0,r0[0x0]
8000992a:	98 8c       	ld.uh	r12,r12[0x0]
8000992c:	80 00       	ld.sh	r0,r0[0x0]
8000992e:	98 48       	ld.sh	r8,r12[0x8]

80009930 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
80009930:	eb cd 40 80 	pushm	r7,lr
80009934:	1a 97       	mov	r7,sp
	if (Is_udd_sof()) {
80009936:	fe 68 00 04 	mov	r8,-131068
8000993a:	70 08       	ld.w	r8,r8[0x0]
8000993c:	e2 18 00 04 	andl	r8,0x4,COH
80009940:	c1 10       	breq	80009962 <udd_interrupt+0x32>
		udd_ack_sof();
80009942:	fe 68 00 08 	mov	r8,-131064
80009946:	30 49       	mov	r9,4
80009948:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
8000994a:	fe 68 08 04 	mov	r8,-129020
8000994e:	70 08       	ld.w	r8,r8[0x0]
80009950:	e2 18 30 00 	andl	r8,0x3000,COH
80009954:	ad 88       	lsr	r8,0xc
80009956:	c0 31       	brne	8000995c <udd_interrupt+0x2c>
			udc_sof_notify();
80009958:	f0 1f 00 54 	mcall	80009aa8 <udd_interrupt+0x178>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
8000995c:	f0 1f 00 54 	mcall	80009aac <udd_interrupt+0x17c>
#endif
		goto udd_interrupt_end;
80009960:	c9 d8       	rjmp	80009a9a <udd_interrupt+0x16a>
	}
	if (Is_udd_msof()) {
80009962:	fe 68 00 04 	mov	r8,-131068
80009966:	70 08       	ld.w	r8,r8[0x0]
80009968:	e2 18 00 02 	andl	r8,0x2,COH
8000996c:	c0 80       	breq	8000997c <udd_interrupt+0x4c>
		udd_ack_msof();
8000996e:	fe 68 00 08 	mov	r8,-131064
80009972:	30 29       	mov	r9,2
80009974:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80009976:	f0 1f 00 4d 	mcall	80009aa8 <udd_interrupt+0x178>
		goto udd_interrupt_end;
8000997a:	c9 08       	rjmp	80009a9a <udd_interrupt+0x16a>
	}

	if (udd_ctrl_interrupt())
8000997c:	f0 1f 00 4d 	mcall	80009ab0 <udd_interrupt+0x180>
80009980:	18 98       	mov	r8,r12
80009982:	58 08       	cp.w	r8,0
80009984:	e0 81 00 88 	brne	80009a94 <udd_interrupt+0x164>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
80009988:	f0 1f 00 4b 	mcall	80009ab4 <udd_interrupt+0x184>
8000998c:	18 98       	mov	r8,r12
8000998e:	58 08       	cp.w	r8,0
80009990:	e0 81 00 84 	brne	80009a98 <udd_interrupt+0x168>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80009994:	fe 68 00 04 	mov	r8,-131068
80009998:	70 08       	ld.w	r8,r8[0x0]
8000999a:	e2 18 00 08 	andl	r8,0x8,COH
8000999e:	c0 e0       	breq	800099ba <udd_interrupt+0x8a>
		udd_ack_reset();
800099a0:	fe 68 00 08 	mov	r8,-131064
800099a4:	30 89       	mov	r9,8
800099a6:	91 09       	st.w	r8[0x0],r9
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
800099a8:	f0 1f 00 44 	mcall	80009ab8 <udd_interrupt+0x188>
#endif
		// Reset USB Device Stack Core
		udc_reset();
800099ac:	f0 1f 00 44 	mcall	80009abc <udd_interrupt+0x18c>
		// Reset endpoint control
		udd_reset_ep_ctrl();
800099b0:	f0 1f 00 44 	mcall	80009ac0 <udd_interrupt+0x190>
		// Reset endpoint control management
		udd_ctrl_init();
800099b4:	f0 1f 00 44 	mcall	80009ac4 <udd_interrupt+0x194>
		goto udd_interrupt_end;
800099b8:	c7 18       	rjmp	80009a9a <udd_interrupt+0x16a>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
800099ba:	fe 68 00 10 	mov	r8,-131056
800099be:	70 08       	ld.w	r8,r8[0x0]
800099c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800099c4:	5c 58       	castu.b	r8
800099c6:	c2 40       	breq	80009a0e <udd_interrupt+0xde>
800099c8:	fe 68 00 04 	mov	r8,-131068
800099cc:	70 08       	ld.w	r8,r8[0x0]
800099ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800099d2:	5c 58       	castu.b	r8
800099d4:	c1 d0       	breq	80009a0e <udd_interrupt+0xde>
		otg_unfreeze_clock();
800099d6:	fe 68 08 00 	mov	r8,-129024
800099da:	fe 69 08 00 	mov	r9,-129024
800099de:	72 09       	ld.w	r9,r9[0x0]
800099e0:	af c9       	cbr	r9,0xe
800099e2:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
800099e4:	fe 68 00 14 	mov	r8,-131052
800099e8:	30 19       	mov	r9,1
800099ea:	91 09       	st.w	r8[0x0],r9
		udd_enable_wake_up_interrupt();
800099ec:	fe 68 00 18 	mov	r8,-131048
800099f0:	31 09       	mov	r9,16
800099f2:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
800099f4:	fe 68 08 00 	mov	r8,-129024
800099f8:	fe 69 08 00 	mov	r9,-129024
800099fc:	72 09       	ld.w	r9,r9[0x0]
800099fe:	af a9       	sbr	r9,0xe
80009a00:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80009a02:	30 0c       	mov	r12,0
80009a04:	f0 1f 00 31 	mcall	80009ac8 <udd_interrupt+0x198>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
80009a08:	f0 1f 00 31 	mcall	80009acc <udd_interrupt+0x19c>
#endif
		goto udd_interrupt_end;
80009a0c:	c4 78       	rjmp	80009a9a <udd_interrupt+0x16a>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80009a0e:	fe 68 00 10 	mov	r8,-131056
80009a12:	70 08       	ld.w	r8,r8[0x0]
80009a14:	e2 18 00 10 	andl	r8,0x10,COH
80009a18:	c1 c0       	breq	80009a50 <udd_interrupt+0x120>
80009a1a:	fe 68 00 04 	mov	r8,-131068
80009a1e:	70 08       	ld.w	r8,r8[0x0]
80009a20:	e2 18 00 10 	andl	r8,0x10,COH
80009a24:	c1 60       	breq	80009a50 <udd_interrupt+0x120>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80009a26:	fe 68 08 00 	mov	r8,-129024
80009a2a:	fe 69 08 00 	mov	r9,-129024
80009a2e:	72 09       	ld.w	r9,r9[0x0]
80009a30:	af c9       	cbr	r9,0xe
80009a32:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80009a34:	fe 68 00 14 	mov	r8,-131052
80009a38:	31 09       	mov	r9,16
80009a3a:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
80009a3c:	fe 68 00 18 	mov	r8,-131048
80009a40:	30 19       	mov	r9,1
80009a42:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(true); // Enter in IDLE mode
80009a44:	30 1c       	mov	r12,1
80009a46:	f0 1f 00 21 	mcall	80009ac8 <udd_interrupt+0x198>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
80009a4a:	f0 1f 00 22 	mcall	80009ad0 <udd_interrupt+0x1a0>
#endif
		goto udd_interrupt_end;
80009a4e:	c2 68       	rjmp	80009a9a <udd_interrupt+0x16a>
	}

	if (Is_otg_vbus_transition()) {
80009a50:	fe 68 08 04 	mov	r8,-129020
80009a54:	70 08       	ld.w	r8,r8[0x0]
80009a56:	e2 18 00 02 	andl	r8,0x2,COH
80009a5a:	c2 00       	breq	80009a9a <udd_interrupt+0x16a>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
80009a5c:	fe 68 08 00 	mov	r8,-129024
80009a60:	fe 69 08 00 	mov	r9,-129024
80009a64:	72 09       	ld.w	r9,r9[0x0]
80009a66:	af c9       	cbr	r9,0xe
80009a68:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80009a6a:	fe 68 08 08 	mov	r8,-129016
80009a6e:	30 29       	mov	r9,2
80009a70:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock();
80009a72:	fe 68 08 00 	mov	r8,-129024
80009a76:	fe 69 08 00 	mov	r9,-129024
80009a7a:	72 09       	ld.w	r9,r9[0x0]
80009a7c:	af a9       	sbr	r9,0xe
80009a7e:	91 09       	st.w	r8[0x0],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
80009a80:	fe 68 08 04 	mov	r8,-129020
80009a84:	70 08       	ld.w	r8,r8[0x0]
80009a86:	e2 18 08 00 	andl	r8,0x800,COH
80009a8a:	5f 18       	srne	r8
80009a8c:	10 9c       	mov	r12,r8
80009a8e:	f0 1f 00 12 	mcall	80009ad4 <udd_interrupt+0x1a4>
80009a92:	c0 48       	rjmp	80009a9a <udd_interrupt+0x16a>
		udc_sof_notify();
		goto udd_interrupt_end;
	}

	if (udd_ctrl_interrupt())
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
80009a94:	d7 03       	nop
80009a96:	c0 28       	rjmp	80009a9a <udd_interrupt+0x16a>

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
80009a98:	d7 03       	nop
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80009a9a:	fe 68 00 00 	mov	r8,-131072
80009a9e:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80009aa2:	e3 cd 40 80 	ldm	sp++,r7,lr
80009aa6:	d6 03       	rete
80009aa8:	80 00       	ld.sh	r0,r0[0x0]
80009aaa:	d3 4c       	*unknown*
80009aac:	80 00       	ld.sh	r0,r0[0x0]
80009aae:	e1 bc       	*unknown*
80009ab0:	80 00       	ld.sh	r0,r0[0x0]
80009ab2:	b0 24       	st.h	r8[0x4],r4
80009ab4:	80 00       	ld.sh	r0,r0[0x0]
80009ab6:	b4 d8       	st.b	r10[0x5],r8
80009ab8:	80 00       	ld.sh	r0,r0[0x0]
80009aba:	b1 58       	asr	r8,0x11
80009abc:	80 00       	ld.sh	r0,r0[0x0]
80009abe:	d2 e8       	*unknown*
80009ac0:	80 00       	ld.sh	r0,r0[0x0]
80009ac2:	a8 a4       	st.b	r4[0x2],r4
80009ac4:	80 00       	ld.sh	r0,r0[0x0]
80009ac6:	a9 88       	lsr	r8,0x8
80009ac8:	80 00       	ld.sh	r0,r0[0x0]
80009aca:	98 d0       	ld.uh	r0,r12[0xa]
80009acc:	80 00       	ld.sh	r0,r0[0x0]
80009ace:	e1 94       	*unknown*
80009ad0:	80 00       	ld.sh	r0,r0[0x0]
80009ad2:	e1 a8 80 00 	cop	cp4,cr0,cr0,cr0,0x10
80009ad6:	e1 60 eb cd 	st.b	r0[-5171],r0

80009ad8 <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
80009ad8:	eb cd 40 80 	pushm	r7,lr
80009adc:	1a 97       	mov	r7,sp
	return true;
80009ade:	30 18       	mov	r8,1
}
80009ae0:	10 9c       	mov	r12,r8
80009ae2:	e3 cd 80 80 	ldm	sp++,r7,pc
80009ae6:	d7 03       	nop

80009ae8 <udd_enable>:


void udd_enable(void)
{
80009ae8:	eb cd 40 80 	pushm	r7,lr
80009aec:	1a 97       	mov	r7,sp
80009aee:	20 2d       	sub	sp,8
	irqflags_t flags;

	flags = cpu_irq_save();
80009af0:	f0 1f 00 3e 	mcall	80009be8 <udd_enable+0x100>
80009af4:	18 98       	mov	r8,r12
80009af6:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
80009afa:	f0 1f 00 3d 	mcall	80009bec <udd_enable+0x104>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
80009afe:	30 0a       	mov	r10,0
80009b00:	e0 6b 02 20 	mov	r11,544
80009b04:	4b bc       	lddpc	r12,80009bf0 <udd_enable+0x108>
80009b06:	f0 1f 00 3c 	mcall	80009bf4 <udd_enable+0x10c>
80009b0a:	30 18       	mov	r8,1
80009b0c:	ef 48 ff fc 	st.w	r7[-4],r8
#if defined (__GNUC__)
__attribute__((__always_inline__))
#endif
static inline void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80009b10:	fe 78 0c 00 	mov	r8,-62464
80009b14:	fe 79 0c 00 	mov	r9,-62464
80009b18:	f2 fa 01 44 	ld.w	r10,r9[324]
80009b1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009b20:	f5 e9 10 09 	or	r9,r10,r9
80009b24:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
80009b28:	fe 68 08 00 	mov	r8,-129024
80009b2c:	fe 69 08 00 	mov	r9,-129024
80009b30:	72 09       	ld.w	r9,r9[0x0]
80009b32:	b9 c9       	cbr	r9,0x18
80009b34:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
80009b36:	fe 68 08 00 	mov	r8,-129024
80009b3a:	fe 69 08 00 	mov	r9,-129024
80009b3e:	72 09       	ld.w	r9,r9[0x0]
80009b40:	b9 b9       	sbr	r9,0x19
80009b42:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80009b44:	fe 68 08 00 	mov	r8,-129024
80009b48:	fe 69 08 00 	mov	r9,-129024
80009b4c:	72 09       	ld.w	r9,r9[0x0]
80009b4e:	ad a9       	sbr	r9,0xc
80009b50:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80009b52:	fe 68 08 00 	mov	r8,-129024
80009b56:	fe 69 08 00 	mov	r9,-129024
80009b5a:	72 09       	ld.w	r9,r9[0x0]
80009b5c:	af b9       	sbr	r9,0xf
80009b5e:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80009b60:	fe 68 08 00 	mov	r8,-129024
80009b64:	fe 69 08 00 	mov	r9,-129024
80009b68:	72 09       	ld.w	r9,r9[0x0]
80009b6a:	af c9       	cbr	r9,0xe
80009b6c:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
80009b6e:	fe 68 08 00 	mov	r8,-129024
80009b72:	70 08       	ld.w	r8,r8[0x0]

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
80009b74:	f0 1f 00 21 	mcall	80009bf8 <udd_enable+0x110>

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80009b78:	fe 68 00 00 	mov	r8,-131072
80009b7c:	fe 69 00 00 	mov	r9,-131072
80009b80:	72 09       	ld.w	r9,r9[0x0]
80009b82:	ad c9       	cbr	r9,0xc
80009b84:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
80009b86:	fe 68 00 00 	mov	r8,-131072
80009b8a:	fe 69 00 00 	mov	r9,-131072
80009b8e:	72 09       	ld.w	r9,r9[0x0]
80009b90:	e0 19 f3 ff 	andl	r9,0xf3ff
80009b94:	91 09       	st.w	r8[0x0],r9
#  else
	udd_high_speed_disable();
#  endif
#endif
	otg_ack_vbus_transition();
80009b96:	fe 68 08 08 	mov	r8,-129016
80009b9a:	30 29       	mov	r9,2
80009b9c:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80009b9e:	fe 68 08 04 	mov	r8,-129020
80009ba2:	70 08       	ld.w	r8,r8[0x0]
80009ba4:	e2 18 08 00 	andl	r8,0x800,COH
80009ba8:	c0 50       	breq	80009bb2 <udd_enable+0xca>
		otg_raise_vbus_transition();
80009baa:	fe 68 08 0c 	mov	r8,-129012
80009bae:	30 29       	mov	r9,2
80009bb0:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80009bb2:	fe 68 08 00 	mov	r8,-129024
80009bb6:	fe 69 08 00 	mov	r9,-129024
80009bba:	72 09       	ld.w	r9,r9[0x0]
80009bbc:	a1 b9       	sbr	r9,0x1
80009bbe:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80009bc0:	fe 68 08 00 	mov	r8,-129024
80009bc4:	fe 69 08 00 	mov	r9,-129024
80009bc8:	72 09       	ld.w	r9,r9[0x0]
80009bca:	af a9       	sbr	r9,0xe
80009bcc:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80009bce:	48 c9       	lddpc	r9,80009bfc <udd_enable+0x114>
80009bd0:	30 08       	mov	r8,0
80009bd2:	b2 88       	st.b	r9[0x0],r8
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
80009bd4:	30 3c       	mov	r12,3
80009bd6:	f0 1f 00 0b 	mcall	80009c00 <udd_enable+0x118>
#endif

	cpu_irq_restore(flags);
80009bda:	ee fc ff f8 	ld.w	r12,r7[-8]
80009bde:	f0 1f 00 0a 	mcall	80009c04 <udd_enable+0x11c>
}
80009be2:	2f ed       	sub	sp,-8
80009be4:	e3 cd 80 80 	ldm	sp++,r7,pc
80009be8:	80 00       	ld.sh	r0,r0[0x0]
80009bea:	98 10       	ld.sh	r0,r12[0x2]
80009bec:	80 00       	ld.sh	r0,r0[0x0]
80009bee:	be a8       	st.b	pc[0x2],r8
80009bf0:	80 00       	ld.sh	r0,r0[0x0]
80009bf2:	99 30       	st.w	r12[0xc],r0
80009bf4:	80 00       	ld.sh	r0,r0[0x0]
80009bf6:	8e a8       	ld.uh	r8,r7[0x4]
80009bf8:	80 00       	ld.sh	r0,r0[0x0]
80009bfa:	b0 ec       	st.b	r8[0x6],r12
80009bfc:	00 00       	add	r0,r0
80009bfe:	07 6c       	ld.uh	r12,--r3
80009c00:	80 00       	ld.sh	r0,r0[0x0]
80009c02:	98 48       	ld.sh	r8,r12[0x8]
80009c04:	80 00       	ld.sh	r0,r0[0x0]
80009c06:	98 2e       	ld.sh	lr,r12[0x4]

80009c08 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80009c08:	eb cd 40 80 	pushm	r7,lr
80009c0c:	1a 97       	mov	r7,sp
80009c0e:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
80009c10:	f0 1f 00 26 	mcall	80009ca8 <udd_attach+0xa0>
80009c14:	18 98       	mov	r8,r12
80009c16:	ef 48 ff fc 	st.w	r7[-4],r8

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80009c1a:	30 1c       	mov	r12,1
80009c1c:	f0 1f 00 24 	mcall	80009cac <udd_attach+0xa4>
	otg_unfreeze_clock();
80009c20:	fe 68 08 00 	mov	r8,-129024
80009c24:	fe 69 08 00 	mov	r9,-129024
80009c28:	72 09       	ld.w	r9,r9[0x0]
80009c2a:	af c9       	cbr	r9,0xe
80009c2c:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );

	// Authorize attach if Vbus is present
	udd_attach_device();
80009c2e:	fe 68 00 00 	mov	r8,-131072
80009c32:	fe 69 00 00 	mov	r9,-131072
80009c36:	72 09       	ld.w	r9,r9[0x0]
80009c38:	a9 c9       	cbr	r9,0x8
80009c3a:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
80009c3c:	fe 68 00 18 	mov	r8,-131048
80009c40:	30 89       	mov	r9,8
80009c42:	91 09       	st.w	r8[0x0],r9
	udd_enable_suspend_interrupt();
80009c44:	fe 68 00 18 	mov	r8,-131048
80009c48:	30 19       	mov	r9,1
80009c4a:	91 09       	st.w	r8[0x0],r9
	udd_enable_wake_up_interrupt();
80009c4c:	fe 68 00 18 	mov	r8,-131048
80009c50:	31 09       	mov	r9,16
80009c52:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80009c54:	fe 68 00 18 	mov	r8,-131048
80009c58:	30 49       	mov	r9,4
80009c5a:	91 09       	st.w	r8[0x0],r9
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
80009c5c:	fe 68 00 18 	mov	r8,-131048
80009c60:	30 29       	mov	r9,2
80009c62:	91 09       	st.w	r8[0x0],r9
#endif
	// Reset following interrupts flag
	udd_ack_reset();
80009c64:	fe 68 00 08 	mov	r8,-131064
80009c68:	30 89       	mov	r9,8
80009c6a:	91 09       	st.w	r8[0x0],r9
	udd_ack_sof();
80009c6c:	fe 68 00 08 	mov	r8,-131064
80009c70:	30 49       	mov	r9,4
80009c72:	91 09       	st.w	r8[0x0],r9
	udd_ack_msof();
80009c74:	fe 68 00 08 	mov	r8,-131064
80009c78:	30 29       	mov	r9,2
80009c7a:	91 09       	st.w	r8[0x0],r9

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80009c7c:	fe 68 00 08 	mov	r8,-131064
80009c80:	30 19       	mov	r9,1
80009c82:	91 09       	st.w	r8[0x0],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80009c84:	fe 68 00 08 	mov	r8,-131064
80009c88:	31 09       	mov	r9,16
80009c8a:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80009c8c:	fe 68 08 00 	mov	r8,-129024
80009c90:	fe 69 08 00 	mov	r9,-129024
80009c94:	72 09       	ld.w	r9,r9[0x0]
80009c96:	af a9       	sbr	r9,0xe
80009c98:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009c9a:	ee fc ff fc 	ld.w	r12,r7[-4]
80009c9e:	f0 1f 00 05 	mcall	80009cb0 <udd_attach+0xa8>
}
80009ca2:	2f fd       	sub	sp,-4
80009ca4:	e3 cd 80 80 	ldm	sp++,r7,pc
80009ca8:	80 00       	ld.sh	r0,r0[0x0]
80009caa:	98 10       	ld.sh	r0,r12[0x2]
80009cac:	80 00       	ld.sh	r0,r0[0x0]
80009cae:	98 d0       	ld.uh	r0,r12[0xa]
80009cb0:	80 00       	ld.sh	r0,r0[0x0]
80009cb2:	98 2e       	ld.sh	lr,r12[0x4]

80009cb4 <udd_detach>:


void udd_detach(void)
{
80009cb4:	eb cd 40 80 	pushm	r7,lr
80009cb8:	1a 97       	mov	r7,sp
	otg_unfreeze_clock();
80009cba:	fe 68 08 00 	mov	r8,-129024
80009cbe:	fe 69 08 00 	mov	r9,-129024
80009cc2:	72 09       	ld.w	r9,r9[0x0]
80009cc4:	af c9       	cbr	r9,0xe
80009cc6:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
80009cc8:	fe 68 00 00 	mov	r8,-131072
80009ccc:	fe 69 00 00 	mov	r9,-131072
80009cd0:	72 09       	ld.w	r9,r9[0x0]
80009cd2:	a9 a9       	sbr	r9,0x8
80009cd4:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80009cd6:	fe 68 08 00 	mov	r8,-129024
80009cda:	fe 69 08 00 	mov	r9,-129024
80009cde:	72 09       	ld.w	r9,r9[0x0]
80009ce0:	af a9       	sbr	r9,0xe
80009ce2:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80009ce4:	30 0c       	mov	r12,0
80009ce6:	f0 1f 00 03 	mcall	80009cf0 <udd_detach+0x3c>
}
80009cea:	e3 cd 80 80 	ldm	sp++,r7,pc
80009cee:	00 00       	add	r0,r0
80009cf0:	80 00       	ld.sh	r0,r0[0x0]
80009cf2:	98 d0       	ld.uh	r0,r12[0xa]

80009cf4 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
80009cf4:	eb cd 40 80 	pushm	r7,lr
80009cf8:	1a 97       	mov	r7,sp
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
80009cfa:	fe 68 08 04 	mov	r8,-129020
80009cfe:	70 08       	ld.w	r8,r8[0x0]
80009d00:	e2 18 30 00 	andl	r8,0x3000,COH
80009d04:	ad 88       	lsr	r8,0xc
80009d06:	5f 18       	srne	r8
80009d08:	5c 58       	castu.b	r8
#else
	return false;
#endif
}
80009d0a:	10 9c       	mov	r12,r8
80009d0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009d10 <udd_set_address>:


void udd_set_address(uint8_t address)
{
80009d10:	eb cd 40 80 	pushm	r7,lr
80009d14:	1a 97       	mov	r7,sp
80009d16:	20 1d       	sub	sp,4
80009d18:	18 98       	mov	r8,r12
80009d1a:	ef 68 ff fc 	st.b	r7[-4],r8
	udd_disable_address();
80009d1e:	fe 68 00 00 	mov	r8,-131072
80009d22:	fe 69 00 00 	mov	r9,-131072
80009d26:	72 09       	ld.w	r9,r9[0x0]
80009d28:	a7 d9       	cbr	r9,0x7
80009d2a:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80009d2c:	fe 68 00 00 	mov	r8,-131072
80009d30:	fe 69 00 00 	mov	r9,-131072
80009d34:	72 09       	ld.w	r9,r9[0x0]
80009d36:	12 9a       	mov	r10,r9
80009d38:	e0 1a ff 80 	andl	r10,0xff80
80009d3c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009d40:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
80009d44:	f5 e9 10 09 	or	r9,r10,r9
80009d48:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80009d4a:	fe 68 00 00 	mov	r8,-131072
80009d4e:	fe 69 00 00 	mov	r9,-131072
80009d52:	72 09       	ld.w	r9,r9[0x0]
80009d54:	a7 b9       	sbr	r9,0x7
80009d56:	91 09       	st.w	r8[0x0],r9
}
80009d58:	2f fd       	sub	sp,-4
80009d5a:	e3 cd 80 80 	ldm	sp++,r7,pc

80009d5e <udd_getaddress>:


uint8_t udd_getaddress(void)
{
80009d5e:	eb cd 40 80 	pushm	r7,lr
80009d62:	1a 97       	mov	r7,sp
	return udd_get_configured_address();
80009d64:	fe 68 00 00 	mov	r8,-131072
80009d68:	70 08       	ld.w	r8,r8[0x0]
80009d6a:	5c 58       	castu.b	r8
80009d6c:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
}
80009d70:	10 9c       	mov	r12,r8
80009d72:	e3 cd 80 80 	ldm	sp++,r7,pc

80009d76 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
80009d76:	eb cd 40 80 	pushm	r7,lr
80009d7a:	1a 97       	mov	r7,sp
	return udd_frame_number();
80009d7c:	fe 68 00 20 	mov	r8,-131040
80009d80:	70 08       	ld.w	r8,r8[0x0]
80009d82:	e2 18 3f f8 	andl	r8,0x3ff8,COH
80009d86:	a3 98       	lsr	r8,0x3
80009d88:	5c 88       	casts.h	r8
}
80009d8a:	10 9c       	mov	r12,r8
80009d8c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009d90 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
80009d90:	eb cd 40 80 	pushm	r7,lr
80009d94:	1a 97       	mov	r7,sp
80009d96:	20 2d       	sub	sp,8
80009d98:	ef 4c ff fc 	st.w	r7[-4],r12
80009d9c:	16 98       	mov	r8,r11
80009d9e:	ef 58 ff f8 	st.h	r7[-8],r8
	udd_g_ctrlreq.payload = payload;
80009da2:	48 68       	lddpc	r8,80009db8 <udd_set_setup_payload+0x28>
80009da4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009da8:	91 29       	st.w	r8[0x8],r9
	udd_g_ctrlreq.payload_size = payload_size;
80009daa:	48 49       	lddpc	r9,80009db8 <udd_set_setup_payload+0x28>
80009dac:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80009db0:	b2 68       	st.h	r9[0xc],r8
}
80009db2:	2f ed       	sub	sp,-8
80009db4:	e3 cd 80 80 	ldm	sp++,r7,pc
80009db8:	00 00       	add	r0,r0
80009dba:	0f c4       	ld.ub	r4,r7[0x4]

80009dbc <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80009dbc:	eb cd 40 80 	pushm	r7,lr
80009dc0:	1a 97       	mov	r7,sp
80009dc2:	20 dd       	sub	sp,52
80009dc4:	16 99       	mov	r9,r11
80009dc6:	14 98       	mov	r8,r10
80009dc8:	18 9a       	mov	r10,r12
80009dca:	ef 6a ff d4 	st.b	r7[-44],r10
80009dce:	ef 69 ff d0 	st.b	r7[-48],r9
80009dd2:	ef 58 ff cc 	st.h	r7[-52],r8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
80009dd6:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009dda:	a7 98       	lsr	r8,0x7
80009ddc:	ef 68 ff db 	st.b	r7[-37],r8
	ep = ep & USB_EP_ADDR_MASK;
80009de0:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009de4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009de8:	ef 68 ff d4 	st.b	r7[-44],r8

	if (ep > USB_DEVICE_MAX_EP) {
80009dec:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80009df0:	30 28       	mov	r8,2
80009df2:	f0 09 18 00 	cp.b	r9,r8
80009df6:	e0 88 00 04 	brls	80009dfe <udd_ep_alloc+0x42>
		return false;
80009dfa:	30 08       	mov	r8,0
80009dfc:	c7 f9       	rjmp	8000a0fa <udd_ep_alloc+0x33e>
	}
	if (Is_udd_endpoint_enabled(ep)) {
80009dfe:	fe 68 00 00 	mov	r8,-131072
80009e02:	70 79       	ld.w	r9,r8[0x1c]
80009e04:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009e08:	30 1a       	mov	r10,1
80009e0a:	f4 08 09 48 	lsl	r8,r10,r8
80009e0e:	f3 e8 00 08 	and	r8,r9,r8
80009e12:	c0 30       	breq	80009e18 <udd_ep_alloc+0x5c>
		return false;
80009e14:	30 08       	mov	r8,0
80009e16:	c7 29       	rjmp	8000a0fa <udd_ep_alloc+0x33e>
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80009e18:	ef 38 ff d0 	ld.ub	r8,r7[-48]
80009e1c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80009e20:	58 28       	cp.w	r8,2
80009e22:	c0 d0       	breq	80009e3c <udd_ep_alloc+0x80>
80009e24:	58 38       	cp.w	r8,3
80009e26:	c0 70       	breq	80009e34 <udd_ep_alloc+0x78>
80009e28:	58 18       	cp.w	r8,1
80009e2a:	c0 d1       	brne	80009e44 <udd_ep_alloc+0x88>
	case USB_EP_TYPE_ISOCHRONOUS:
		bank = UDD_ISOCHRONOUS_NB_BANK(ep);
80009e2c:	30 28       	mov	r8,2
80009e2e:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009e32:	c0 b8       	rjmp	80009e48 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_INTERRUPT:
		bank = UDD_INTERRUPT_NB_BANK(ep);
80009e34:	30 18       	mov	r8,1
80009e36:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009e3a:	c0 78       	rjmp	80009e48 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_BULK:
		bank = UDD_BULK_NB_BANK(ep);
80009e3c:	30 28       	mov	r8,2
80009e3e:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009e42:	c0 38       	rjmp	80009e48 <udd_ep_alloc+0x8c>
	default:
		Assert(false);
		return false;
80009e44:	30 08       	mov	r8,0
80009e46:	c5 a9       	rjmp	8000a0fa <udd_ep_alloc+0x33e>
	}
	switch(bank) {
80009e48:	ef 38 ff de 	ld.ub	r8,r7[-34]
80009e4c:	58 28       	cp.w	r8,2
80009e4e:	c0 90       	breq	80009e60 <udd_ep_alloc+0xa4>
80009e50:	58 38       	cp.w	r8,3
80009e52:	c0 b0       	breq	80009e68 <udd_ep_alloc+0xac>
80009e54:	58 18       	cp.w	r8,1
80009e56:	c0 d1       	brne	80009e70 <udd_ep_alloc+0xb4>
	case 1:
		bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
80009e58:	30 08       	mov	r8,0
80009e5a:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009e5e:	c0 b8       	rjmp	80009e74 <udd_ep_alloc+0xb8>
	case 2:
		bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
80009e60:	30 18       	mov	r8,1
80009e62:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009e66:	c0 78       	rjmp	80009e74 <udd_ep_alloc+0xb8>
	case 3:
		bank = AVR32_USBB_UECFG0_EPBK_TRIPLE;
80009e68:	30 28       	mov	r8,2
80009e6a:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009e6e:	c0 38       	rjmp	80009e74 <udd_ep_alloc+0xb8>
	default:
		Assert(false);
		return false;
80009e70:	30 08       	mov	r8,0
80009e72:	c4 49       	rjmp	8000a0fa <udd_ep_alloc+0x33e>
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80009e74:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009e78:	a3 68       	lsl	r8,0x2
80009e7a:	e0 38 ff 00 	sub	r8,130816
80009e7e:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80009e82:	a3 69       	lsl	r9,0x2
80009e84:	e0 39 ff 00 	sub	r9,130816
80009e88:	72 09       	ld.w	r9,r9[0x0]
80009e8a:	12 9a       	mov	r10,r9
80009e8c:	e0 1a e6 83 	andl	r10,0xe683
80009e90:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80009e94:	ab 79       	lsl	r9,0xb
80009e96:	12 9b       	mov	r11,r9
80009e98:	e2 1b 18 00 	andl	r11,0x1800,COH
80009e9c:	ef 39 ff db 	ld.ub	r9,r7[-37]
80009ea0:	a9 69       	lsl	r9,0x8
80009ea2:	e2 19 01 00 	andl	r9,0x100,COH
80009ea6:	12 4b       	or	r11,r9
80009ea8:	ef 19 ff cc 	ld.uh	r9,r7[-52]
80009eac:	ef 49 ff f0 	st.w	r7[-16],r9
80009eb0:	30 89       	mov	r9,8
80009eb2:	ef 49 ff f4 	st.w	r7[-12],r9
80009eb6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009eba:	ee fc ff f4 	ld.w	r12,r7[-12]
80009ebe:	f2 0c 0c 49 	max	r9,r9,r12
80009ec2:	ef 49 ff ec 	st.w	r7[-20],r9
80009ec6:	ee f9 ff ec 	ld.w	r9,r7[-20]
80009eca:	ef 49 ff e4 	st.w	r7[-28],r9
80009ece:	e0 69 04 00 	mov	r9,1024
80009ed2:	ef 49 ff e8 	st.w	r7[-24],r9
80009ed6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80009eda:	ee fc ff e8 	ld.w	r12,r7[-24]
80009ede:	f2 0c 0d 49 	min	r9,r9,r12
80009ee2:	ef 49 ff e0 	st.w	r7[-32],r9
80009ee6:	ee f9 ff e0 	ld.w	r9,r7[-32]
80009eea:	a1 79       	lsl	r9,0x1
80009eec:	20 19       	sub	r9,1
80009eee:	f2 09 12 00 	clz	r9,r9
80009ef2:	f2 09 11 1c 	rsub	r9,r9,28
80009ef6:	a5 69       	lsl	r9,0x4
80009ef8:	12 4b       	or	r11,r9
80009efa:	ef 39 ff de 	ld.ub	r9,r7[-34]
80009efe:	a3 69       	lsl	r9,0x2
80009f00:	e2 19 00 0c 	andl	r9,0xc,COH
80009f04:	f7 e9 10 09 	or	r9,r11,r9
80009f08:	e2 19 19 7c 	andl	r9,0x197c,COH
80009f0c:	f5 e9 10 09 	or	r9,r10,r9
80009f10:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80009f12:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009f16:	30 19       	mov	r9,1
80009f18:	f2 08 09 48 	lsl	r8,r9,r8
80009f1c:	ef 58 ff dc 	st.h	r7[-36],r8

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80009f20:	30 28       	mov	r8,2
80009f22:	ef 68 ff df 	st.b	r7[-33],r8
80009f26:	c3 a8       	rjmp	80009f9a <udd_ep_alloc+0x1de>
		if (Is_udd_endpoint_enabled(i)) {
80009f28:	fe 68 00 00 	mov	r8,-131072
80009f2c:	70 79       	ld.w	r9,r8[0x1c]
80009f2e:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009f32:	30 1a       	mov	r10,1
80009f34:	f4 08 09 48 	lsl	r8,r10,r8
80009f38:	f3 e8 00 08 	and	r8,r9,r8
80009f3c:	c2 a0       	breq	80009f90 <udd_ep_alloc+0x1d4>
			ep_allocated |= 1 << i;
80009f3e:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009f42:	30 19       	mov	r9,1
80009f44:	f2 08 09 48 	lsl	r8,r9,r8
80009f48:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80009f4c:	ef 08 ff dc 	ld.sh	r8,r7[-36]
80009f50:	f3 e8 10 08 	or	r8,r9,r8
80009f54:	5c 88       	casts.h	r8
80009f56:	ef 58 ff dc 	st.h	r7[-36],r8
			udd_disable_endpoint(i);
80009f5a:	fe 68 00 00 	mov	r8,-131072
80009f5e:	fe 69 00 00 	mov	r9,-131072
80009f62:	72 7a       	ld.w	r10,r9[0x1c]
80009f64:	ef 39 ff df 	ld.ub	r9,r7[-33]
80009f68:	30 1b       	mov	r11,1
80009f6a:	f6 09 09 49 	lsl	r9,r11,r9
80009f6e:	5c d9       	com	r9
80009f70:	f5 e9 00 09 	and	r9,r10,r9
80009f74:	91 79       	st.w	r8[0x1c],r9
			udd_unallocate_memory(i);
80009f76:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009f7a:	a3 68       	lsl	r8,0x2
80009f7c:	e0 38 ff 00 	sub	r8,130816
80009f80:	ef 39 ff df 	ld.ub	r9,r7[-33]
80009f84:	a3 69       	lsl	r9,0x2
80009f86:	e0 39 ff 00 	sub	r9,130816
80009f8a:	72 09       	ld.w	r9,r9[0x0]
80009f8c:	a1 d9       	cbr	r9,0x1
80009f8e:	91 09       	st.w	r8[0x0],r9
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80009f90:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009f94:	20 18       	sub	r8,1
80009f96:	ef 68 ff df 	st.b	r7[-33],r8
80009f9a:	ef 39 ff df 	ld.ub	r9,r7[-33]
80009f9e:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009fa2:	f0 09 18 00 	cp.b	r9,r8
80009fa6:	fe 9b ff c1 	brhi	80009f28 <udd_ep_alloc+0x16c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80009faa:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009fae:	ef 68 ff df 	st.b	r7[-33],r8
80009fb2:	c9 c8       	rjmp	8000a0ea <udd_ep_alloc+0x32e>
		if (ep_allocated & (1 << i)) {
80009fb4:	ef 19 ff dc 	ld.uh	r9,r7[-36]
80009fb8:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009fbc:	f2 08 08 48 	asr	r8,r9,r8
80009fc0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009fc4:	5c 58       	castu.b	r8
80009fc6:	e0 80 00 8d 	breq	8000a0e0 <udd_ep_alloc+0x324>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
80009fca:	ef 38 ff df 	ld.ub	r8,r7[-33]
80009fce:	f0 c9 00 01 	sub	r9,r8,1
80009fd2:	12 98       	mov	r8,r9
80009fd4:	a3 68       	lsl	r8,0x2
80009fd6:	12 08       	add	r8,r9
80009fd8:	a3 68       	lsl	r8,0x2
80009fda:	10 99       	mov	r9,r8
80009fdc:	4c a8       	lddpc	r8,8000a104 <udd_ep_alloc+0x348>
80009fde:	f2 08 00 08 	add	r8,r9,r8
80009fe2:	ef 48 ff f8 	st.w	r7[-8],r8
			bool b_restart = ptr_job->busy;
80009fe6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009fea:	70 08       	ld.w	r8,r8[0x0]
80009fec:	e6 18 80 00 	andh	r8,0x8000,COH
80009ff0:	5f 18       	srne	r8
80009ff2:	ef 68 ff ff 	st.b	r7[-1],r8
			ptr_job->busy = false;
80009ff6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009ffa:	72 08       	ld.w	r8,r9[0x0]
80009ffc:	30 0a       	mov	r10,0
80009ffe:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a002:	93 08       	st.w	r9[0x0],r8

			udd_allocate_memory(i);
8000a004:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a008:	a3 68       	lsl	r8,0x2
8000a00a:	e0 38 ff 00 	sub	r8,130816
8000a00e:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a012:	a3 69       	lsl	r9,0x2
8000a014:	e0 39 ff 00 	sub	r9,130816
8000a018:	72 09       	ld.w	r9,r9[0x0]
8000a01a:	a1 b9       	sbr	r9,0x1
8000a01c:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint(i);
8000a01e:	fe 68 00 00 	mov	r8,-131072
8000a022:	fe 69 00 00 	mov	r9,-131072
8000a026:	72 7a       	ld.w	r10,r9[0x1c]
8000a028:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a02c:	30 1b       	mov	r11,1
8000a02e:	f6 09 09 49 	lsl	r9,r11,r9
8000a032:	f5 e9 10 09 	or	r9,r10,r9
8000a036:	91 79       	st.w	r8[0x1c],r9
			if (!Is_udd_endpoint_configured(i)) {
8000a038:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a03c:	a3 68       	lsl	r8,0x2
8000a03e:	e0 38 fe d0 	sub	r8,130768
8000a042:	70 08       	ld.w	r8,r8[0x0]
8000a044:	e6 18 00 04 	andh	r8,0x4,COH
8000a048:	c2 61       	brne	8000a094 <udd_ep_alloc+0x2d8>
				if (NULL == ptr_job->call_trans) {
8000a04a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a04e:	70 48       	ld.w	r8,r8[0x10]
8000a050:	58 08       	cp.w	r8,0
8000a052:	c0 31       	brne	8000a058 <udd_ep_alloc+0x29c>
					return false;
8000a054:	30 08       	mov	r8,0
8000a056:	c5 28       	rjmp	8000a0fa <udd_ep_alloc+0x33e>
				}
				if (Is_udd_endpoint_in(i)) {
8000a058:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a05c:	a3 68       	lsl	r8,0x2
8000a05e:	e0 38 ff 00 	sub	r8,130816
8000a062:	70 08       	ld.w	r8,r8[0x0]
8000a064:	e2 18 01 00 	andl	r8,0x100,COH
8000a068:	c0 90       	breq	8000a07a <udd_ep_alloc+0x2be>
					i |= USB_EP_DIR_IN;
8000a06a:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a06e:	ea 18 ff ff 	orh	r8,0xffff
8000a072:	e8 18 ff 80 	orl	r8,0xff80
8000a076:	ef 68 ff df 	st.b	r7[-33],r8
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
8000a07a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a07e:	70 48       	ld.w	r8,r8[0x10]
8000a080:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000a084:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a088:	72 29       	ld.w	r9,r9[0x8]
8000a08a:	12 9b       	mov	r11,r9
8000a08c:	30 1c       	mov	r12,1
8000a08e:	5d 18       	icall	r8
						ptr_job->buf_size, i);
				return false;
8000a090:	30 08       	mov	r8,0
8000a092:	c3 48       	rjmp	8000a0fa <udd_ep_alloc+0x33e>
			}
			udd_enable_endpoint_bank_autoswitch(i);
8000a094:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a098:	a3 68       	lsl	r8,0x2
8000a09a:	e0 38 ff 00 	sub	r8,130816
8000a09e:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a0a2:	a3 69       	lsl	r9,0x2
8000a0a4:	e0 39 ff 00 	sub	r9,130816
8000a0a8:	72 09       	ld.w	r9,r9[0x0]
8000a0aa:	a9 b9       	sbr	r9,0x9
8000a0ac:	91 09       	st.w	r8[0x0],r9
			if (b_restart) {
8000a0ae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a0b2:	30 08       	mov	r8,0
8000a0b4:	f0 09 18 00 	cp.b	r9,r8
8000a0b8:	c1 40       	breq	8000a0e0 <udd_ep_alloc+0x324>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
8000a0ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a0be:	70 48       	ld.w	r8,r8[0x10]
8000a0c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a0c4:	72 29       	ld.w	r9,r9[0x8]
8000a0c6:	ee fa ff f8 	ld.w	r10,r7[-8]
8000a0ca:	74 1a       	ld.w	r10,r10[0x4]
8000a0cc:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a0d0:	76 0b       	ld.w	r11,r11[0x0]
8000a0d2:	e6 1b 40 00 	andh	r11,0x4000,COH
8000a0d6:	5f 1b       	srne	r11
8000a0d8:	ef 3c ff df 	ld.ub	r12,r7[-33]
8000a0dc:	f0 1f 00 0b 	mcall	8000a108 <udd_ep_alloc+0x34c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000a0e0:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a0e4:	2f f8       	sub	r8,-1
8000a0e6:	ef 68 ff df 	st.b	r7[-33],r8
8000a0ea:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a0ee:	30 28       	mov	r8,2
8000a0f0:	f0 09 18 00 	cp.b	r9,r8
8000a0f4:	fe 98 ff 60 	brls	80009fb4 <udd_ep_alloc+0x1f8>
						ptr_job->buf_size,
						ptr_job->call_trans);
			}
		}
	}
	return true;
8000a0f8:	30 18       	mov	r8,1
}
8000a0fa:	10 9c       	mov	r12,r8
8000a0fc:	2f 3d       	sub	sp,-52
8000a0fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a102:	00 00       	add	r0,r0
8000a104:	00 00       	add	r0,r0
8000a106:	07 78       	ld.ub	r8,--r3
8000a108:	80 00       	ld.sh	r0,r0[0x0]
8000a10a:	a4 2c       	st.h	r2[0x4],r12

8000a10c <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
8000a10c:	eb cd 40 80 	pushm	r7,lr
8000a110:	1a 97       	mov	r7,sp
8000a112:	20 2d       	sub	sp,8
8000a114:	18 98       	mov	r8,r12
8000a116:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a11a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a11e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a122:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
8000a126:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a12a:	30 28       	mov	r8,2
8000a12c:	f0 09 18 00 	cp.b	r9,r8
8000a130:	e0 8b 00 33 	brhi	8000a196 <udd_ep_free+0x8a>
		return;
	}
	udd_disable_endpoint(index);
8000a134:	fe 68 00 00 	mov	r8,-131072
8000a138:	fe 69 00 00 	mov	r9,-131072
8000a13c:	72 7a       	ld.w	r10,r9[0x1c]
8000a13e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a142:	30 1b       	mov	r11,1
8000a144:	f6 09 09 49 	lsl	r9,r11,r9
8000a148:	5c d9       	com	r9
8000a14a:	f5 e9 00 09 	and	r9,r10,r9
8000a14e:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
8000a150:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a154:	a3 68       	lsl	r8,0x2
8000a156:	e0 38 ff 00 	sub	r8,130816
8000a15a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a15e:	a3 69       	lsl	r9,0x2
8000a160:	e0 39 ff 00 	sub	r9,130816
8000a164:	72 09       	ld.w	r9,r9[0x0]
8000a166:	a1 d9       	cbr	r9,0x1
8000a168:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
8000a16a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a16e:	10 9c       	mov	r12,r8
8000a170:	f0 1f 00 0c 	mcall	8000a1a0 <udd_ep_free+0x94>
	udd_ep_job[index - 1].stall_requested = false;
8000a174:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a178:	f0 c9 00 01 	sub	r9,r8,1
8000a17c:	48 aa       	lddpc	r10,8000a1a4 <udd_ep_free+0x98>
8000a17e:	12 98       	mov	r8,r9
8000a180:	a3 68       	lsl	r8,0x2
8000a182:	12 08       	add	r8,r9
8000a184:	a3 68       	lsl	r8,0x2
8000a186:	f4 08 00 09 	add	r9,r10,r8
8000a18a:	72 08       	ld.w	r8,r9[0x0]
8000a18c:	30 0a       	mov	r10,0
8000a18e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a192:	93 08       	st.w	r9[0x0],r8
8000a194:	c0 28       	rjmp	8000a198 <udd_ep_free+0x8c>
void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index) {
		return;
8000a196:	d7 03       	nop
	}
	udd_disable_endpoint(index);
	udd_unallocate_memory(index);
	udd_ep_abort_job(ep);
	udd_ep_job[index - 1].stall_requested = false;
}
8000a198:	2f ed       	sub	sp,-8
8000a19a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a19e:	00 00       	add	r0,r0
8000a1a0:	80 00       	ld.sh	r0,r0[0x0]
8000a1a2:	b1 b4       	sbr	r4,0x11
8000a1a4:	00 00       	add	r0,r0
8000a1a6:	07 78       	ld.ub	r8,--r3

8000a1a8 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
8000a1a8:	eb cd 40 80 	pushm	r7,lr
8000a1ac:	1a 97       	mov	r7,sp
8000a1ae:	20 1d       	sub	sp,4
8000a1b0:	18 98       	mov	r8,r12
8000a1b2:	ef 68 ff fc 	st.b	r7[-4],r8
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
8000a1b6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a1ba:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a1be:	a3 68       	lsl	r8,0x2
8000a1c0:	e0 38 fe 40 	sub	r8,130624
8000a1c4:	70 08       	ld.w	r8,r8[0x0]
8000a1c6:	e6 18 00 08 	andh	r8,0x8,COH
8000a1ca:	5f 18       	srne	r8
8000a1cc:	5c 58       	castu.b	r8
}
8000a1ce:	10 9c       	mov	r12,r8
8000a1d0:	2f fd       	sub	sp,-4
8000a1d2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a1d6:	d7 03       	nop

8000a1d8 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
8000a1d8:	eb cd 40 80 	pushm	r7,lr
8000a1dc:	1a 97       	mov	r7,sp
8000a1de:	20 3d       	sub	sp,12
8000a1e0:	18 98       	mov	r8,r12
8000a1e2:	ef 68 ff f4 	st.b	r7[-12],r8
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a1e6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a1ea:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a1ee:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
8000a1f2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a1f6:	30 28       	mov	r8,2
8000a1f8:	f0 09 18 00 	cp.b	r9,r8
8000a1fc:	e0 88 00 04 	brls	8000a204 <udd_ep_set_halt+0x2c>
		return false;
8000a200:	30 08       	mov	r8,0
8000a202:	c6 f8       	rjmp	8000a2e0 <udd_ep_set_halt+0x108>
	}

	ptr_job = &udd_ep_job[index - 1];
8000a204:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a208:	f0 c9 00 01 	sub	r9,r8,1
8000a20c:	12 98       	mov	r8,r9
8000a20e:	a3 68       	lsl	r8,0x2
8000a210:	12 08       	add	r8,r9
8000a212:	a3 68       	lsl	r8,0x2
8000a214:	10 99       	mov	r9,r8
8000a216:	4b 58       	lddpc	r8,8000a2e8 <udd_ep_set_halt+0x110>
8000a218:	f2 08 00 08 	add	r8,r9,r8
8000a21c:	ef 48 ff f8 	st.w	r7[-8],r8

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
8000a220:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a224:	a3 68       	lsl	r8,0x2
8000a226:	e0 38 fe 40 	sub	r8,130624
8000a22a:	70 08       	ld.w	r8,r8[0x0]
8000a22c:	e6 18 00 08 	andh	r8,0x8,COH
8000a230:	c0 71       	brne	8000a23e <udd_ep_set_halt+0x66>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
8000a232:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a236:	70 08       	ld.w	r8,r8[0x0]
8000a238:	e6 18 20 00 	andh	r8,0x2000,COH
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
8000a23c:	c0 30       	breq	8000a242 <udd_ep_set_halt+0x6a>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
8000a23e:	30 18       	mov	r8,1
8000a240:	c5 08       	rjmp	8000a2e0 <udd_ep_set_halt+0x108>
	}

	if (ptr_job->busy == true) {
8000a242:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a246:	70 08       	ld.w	r8,r8[0x0]
8000a248:	e6 18 80 00 	andh	r8,0x8000,COH
8000a24c:	c0 30       	breq	8000a252 <udd_ep_set_halt+0x7a>
		return false; // Job on going, stall impossible
8000a24e:	30 08       	mov	r8,0
8000a250:	c4 88       	rjmp	8000a2e0 <udd_ep_set_halt+0x108>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
8000a252:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a256:	30 08       	mov	r8,0
8000a258:	f0 09 18 00 	cp.b	r9,r8
8000a25c:	c2 54       	brge	8000a2a6 <udd_ep_set_halt+0xce>
8000a25e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a262:	a3 68       	lsl	r8,0x2
8000a264:	e0 38 fe d0 	sub	r8,130768
8000a268:	70 08       	ld.w	r8,r8[0x0]
8000a26a:	e2 18 30 00 	andl	r8,0x3000,COH
8000a26e:	ad 88       	lsr	r8,0xc
8000a270:	c1 b0       	breq	8000a2a6 <udd_ep_set_halt+0xce>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
8000a272:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a276:	72 08       	ld.w	r8,r9[0x0]
8000a278:	30 1a       	mov	r10,1
8000a27a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a27e:	93 08       	st.w	r9[0x0],r8
			udd_enable_bank_interrupt(index);
8000a280:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a284:	a3 68       	lsl	r8,0x2
8000a286:	e0 38 fe 10 	sub	r8,130576
8000a28a:	e0 69 10 00 	mov	r9,4096
8000a28e:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(index);
8000a290:	fe 68 00 00 	mov	r8,-131072
8000a294:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a298:	e0 6a 10 00 	mov	r10,4096
8000a29c:	f4 09 09 49 	lsl	r9,r10,r9
8000a2a0:	91 69       	st.w	r8[0x18],r9
			return true;
8000a2a2:	30 18       	mov	r8,1
8000a2a4:	c1 e8       	rjmp	8000a2e0 <udd_ep_set_halt+0x108>
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
8000a2a6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2aa:	a3 68       	lsl	r8,0x2
8000a2ac:	e0 38 ff 00 	sub	r8,130816
8000a2b0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a2b4:	a3 69       	lsl	r9,0x2
8000a2b6:	e0 39 ff 00 	sub	r9,130816
8000a2ba:	72 09       	ld.w	r9,r9[0x0]
8000a2bc:	a9 d9       	cbr	r9,0x9
8000a2be:	91 09       	st.w	r8[0x0],r9
	udd_ack_stall(index);
8000a2c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2c4:	a3 68       	lsl	r8,0x2
8000a2c6:	e0 38 fe a0 	sub	r8,130720
8000a2ca:	34 09       	mov	r9,64
8000a2cc:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(index);
8000a2ce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2d2:	a3 68       	lsl	r8,0x2
8000a2d4:	e0 38 fe 10 	sub	r8,130576
8000a2d8:	e8 69 00 00 	mov	r9,524288
8000a2dc:	91 09       	st.w	r8[0x0],r9
	return true;
8000a2de:	30 18       	mov	r8,1
}
8000a2e0:	10 9c       	mov	r12,r8
8000a2e2:	2f dd       	sub	sp,-12
8000a2e4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a2e8:	00 00       	add	r0,r0
8000a2ea:	07 78       	ld.ub	r8,--r3

8000a2ec <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
8000a2ec:	eb cd 40 80 	pushm	r7,lr
8000a2f0:	1a 97       	mov	r7,sp
8000a2f2:	20 3d       	sub	sp,12
8000a2f4:	18 98       	mov	r8,r12
8000a2f6:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_stall_cleared = false;
8000a2fa:	30 08       	mov	r8,0
8000a2fc:	ef 68 ff fb 	st.b	r7[-5],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000a300:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a304:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a308:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep)
8000a30c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a310:	30 28       	mov	r8,2
8000a312:	f0 09 18 00 	cp.b	r9,r8
8000a316:	e0 88 00 04 	brls	8000a31e <udd_ep_clear_halt+0x32>
		return false;
8000a31a:	30 08       	mov	r8,0
8000a31c:	c8 18       	rjmp	8000a41e <udd_ep_clear_halt+0x132>
	ptr_job = &udd_ep_job[ep - 1];
8000a31e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a322:	f0 c9 00 01 	sub	r9,r8,1
8000a326:	12 98       	mov	r8,r9
8000a328:	a3 68       	lsl	r8,0x2
8000a32a:	12 08       	add	r8,r9
8000a32c:	a3 68       	lsl	r8,0x2
8000a32e:	10 99       	mov	r9,r8
8000a330:	4b e8       	lddpc	r8,8000a428 <udd_ep_clear_halt+0x13c>
8000a332:	f2 08 00 08 	add	r8,r9,r8
8000a336:	ef 48 ff fc 	st.w	r7[-4],r8

	if (ptr_job->stall_requested) {
8000a33a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a33e:	70 08       	ld.w	r8,r8[0x0]
8000a340:	e6 18 20 00 	andh	r8,0x2000,COH
8000a344:	c1 c0       	breq	8000a37c <udd_ep_clear_halt+0x90>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
8000a346:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a34a:	72 08       	ld.w	r8,r9[0x0]
8000a34c:	30 0a       	mov	r10,0
8000a34e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a352:	93 08       	st.w	r9[0x0],r8
		udd_disable_bank_interrupt(ep);
8000a354:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a358:	a3 68       	lsl	r8,0x2
8000a35a:	e0 38 fd e0 	sub	r8,130528
8000a35e:	e0 69 10 00 	mov	r9,4096
8000a362:	91 09       	st.w	r8[0x0],r9
		udd_disable_endpoint_interrupt(ep);
8000a364:	fe 68 00 00 	mov	r8,-131072
8000a368:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a36c:	e0 6a 10 00 	mov	r10,4096
8000a370:	f4 09 09 49 	lsl	r9,r10,r9
8000a374:	91 59       	st.w	r8[0x14],r9
		b_stall_cleared = true;
8000a376:	30 18       	mov	r8,1
8000a378:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
8000a37c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a380:	a3 68       	lsl	r8,0x2
8000a382:	e0 38 fe 40 	sub	r8,130624
8000a386:	70 08       	ld.w	r8,r8[0x0]
8000a388:	e6 18 00 08 	andh	r8,0x8,COH
8000a38c:	c3 10       	breq	8000a3ee <udd_ep_clear_halt+0x102>
		if (Is_udd_stall(ep)) {
8000a38e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a392:	a3 68       	lsl	r8,0x2
8000a394:	e0 38 fe d0 	sub	r8,130768
8000a398:	70 08       	ld.w	r8,r8[0x0]
8000a39a:	e2 18 00 40 	andl	r8,0x40,COH
8000a39e:	c1 00       	breq	8000a3be <udd_ep_clear_halt+0xd2>
			udd_ack_stall(ep);
8000a3a0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a3a4:	a3 68       	lsl	r8,0x2
8000a3a6:	e0 38 fe a0 	sub	r8,130720
8000a3aa:	34 09       	mov	r9,64
8000a3ac:	91 09       	st.w	r8[0x0],r9
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
8000a3ae:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a3b2:	a3 68       	lsl	r8,0x2
8000a3b4:	e0 38 fe 10 	sub	r8,130576
8000a3b8:	e4 69 00 00 	mov	r9,262144
8000a3bc:	91 09       	st.w	r8[0x0],r9
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
8000a3be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a3c2:	a3 68       	lsl	r8,0x2
8000a3c4:	e0 38 fd e0 	sub	r8,130528
8000a3c8:	e8 69 00 00 	mov	r9,524288
8000a3cc:	91 09       	st.w	r8[0x0],r9
		udd_enable_endpoint_bank_autoswitch(ep);
8000a3ce:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a3d2:	a3 68       	lsl	r8,0x2
8000a3d4:	e0 38 ff 00 	sub	r8,130816
8000a3d8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a3dc:	a3 69       	lsl	r9,0x2
8000a3de:	e0 39 ff 00 	sub	r9,130816
8000a3e2:	72 09       	ld.w	r9,r9[0x0]
8000a3e4:	a9 b9       	sbr	r9,0x9
8000a3e6:	91 09       	st.w	r8[0x0],r9
		b_stall_cleared = true;
8000a3e8:	30 18       	mov	r8,1
8000a3ea:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (b_stall_cleared) {
8000a3ee:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000a3f2:	30 08       	mov	r8,0
8000a3f4:	f0 09 18 00 	cp.b	r9,r8
8000a3f8:	c1 20       	breq	8000a41c <udd_ep_clear_halt+0x130>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
8000a3fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3fe:	70 08       	ld.w	r8,r8[0x0]
8000a400:	e6 18 80 00 	andh	r8,0x8000,COH
8000a404:	c0 c0       	breq	8000a41c <udd_ep_clear_halt+0x130>
			ptr_job->busy = false;
8000a406:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a40a:	72 08       	ld.w	r8,r9[0x0]
8000a40c:	30 0a       	mov	r10,0
8000a40e:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a412:	93 08       	st.w	r9[0x0],r8
			ptr_job->call_nohalt();
8000a414:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a418:	70 48       	ld.w	r8,r8[0x10]
8000a41a:	5d 18       	icall	r8
		}
	}
	return true;
8000a41c:	30 18       	mov	r8,1
}
8000a41e:	10 9c       	mov	r12,r8
8000a420:	2f dd       	sub	sp,-12
8000a422:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a426:	00 00       	add	r0,r0
8000a428:	00 00       	add	r0,r0
8000a42a:	07 78       	ld.ub	r8,--r3

8000a42c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
8000a42c:	eb cd 40 80 	pushm	r7,lr
8000a430:	1a 97       	mov	r7,sp
8000a432:	20 7d       	sub	sp,28
8000a434:	ef 4a ff ec 	st.w	r7[-20],r10
8000a438:	ef 49 ff e8 	st.w	r7[-24],r9
8000a43c:	ef 48 ff e4 	st.w	r7[-28],r8
8000a440:	18 98       	mov	r8,r12
8000a442:	ef 68 ff f4 	st.b	r7[-12],r8
8000a446:	16 98       	mov	r8,r11
8000a448:	ef 68 ff f0 	st.b	r7[-16],r8
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
8000a44c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a450:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a454:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep) {
8000a458:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a45c:	30 28       	mov	r8,2
8000a45e:	f0 09 18 00 	cp.b	r9,r8
8000a462:	e0 88 00 04 	brls	8000a46a <udd_ep_run+0x3e>
		return false;
8000a466:	30 08       	mov	r8,0
8000a468:	c6 88       	rjmp	8000a538 <udd_ep_run+0x10c>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000a46a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a46e:	f0 c9 00 01 	sub	r9,r8,1
8000a472:	12 98       	mov	r8,r9
8000a474:	a3 68       	lsl	r8,0x2
8000a476:	12 08       	add	r8,r9
8000a478:	a3 68       	lsl	r8,0x2
8000a47a:	10 99       	mov	r9,r8
8000a47c:	4b 18       	lddpc	r8,8000a540 <udd_ep_run+0x114>
8000a47e:	f2 08 00 08 	add	r8,r9,r8
8000a482:	ef 48 ff f8 	st.w	r7[-8],r8

	if ((!Is_udd_endpoint_enabled(ep))
8000a486:	fe 68 00 00 	mov	r8,-131072
8000a48a:	70 79       	ld.w	r9,r8[0x1c]
8000a48c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a490:	30 1a       	mov	r10,1
8000a492:	f4 08 09 48 	lsl	r8,r10,r8
8000a496:	f3 e8 00 08 	and	r8,r9,r8
8000a49a:	c1 00       	breq	8000a4ba <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
8000a49c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a4a0:	a3 68       	lsl	r8,0x2
8000a4a2:	e0 38 fe 40 	sub	r8,130624
8000a4a6:	70 08       	ld.w	r8,r8[0x0]
8000a4a8:	e6 18 00 08 	andh	r8,0x8,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000a4ac:	c0 71       	brne	8000a4ba <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
8000a4ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4b2:	70 08       	ld.w	r8,r8[0x0]
8000a4b4:	e6 18 20 00 	andh	r8,0x2000,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000a4b8:	c0 30       	breq	8000a4be <udd_ep_run+0x92>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
8000a4ba:	30 08       	mov	r8,0
8000a4bc:	c3 e8       	rjmp	8000a538 <udd_ep_run+0x10c>
	}

	flags = cpu_irq_save();
8000a4be:	f0 1f 00 22 	mcall	8000a544 <udd_ep_run+0x118>
8000a4c2:	18 98       	mov	r8,r12
8000a4c4:	ef 48 ff fc 	st.w	r7[-4],r8
	if (ptr_job->busy == true) {
8000a4c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4cc:	70 08       	ld.w	r8,r8[0x0]
8000a4ce:	e6 18 80 00 	andh	r8,0x8000,COH
8000a4d2:	c0 70       	breq	8000a4e0 <udd_ep_run+0xb4>
		cpu_irq_restore(flags);
8000a4d4:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a4d8:	f0 1f 00 1c 	mcall	8000a548 <udd_ep_run+0x11c>
		return false; // Job already on going
8000a4dc:	30 08       	mov	r8,0
8000a4de:	c2 d8       	rjmp	8000a538 <udd_ep_run+0x10c>
	}
	ptr_job->busy = true;
8000a4e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a4e4:	72 08       	ld.w	r8,r9[0x0]
8000a4e6:	30 1a       	mov	r10,1
8000a4e8:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a4ec:	93 08       	st.w	r9[0x0],r8
	cpu_irq_restore(flags);
8000a4ee:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a4f2:	f0 1f 00 16 	mcall	8000a548 <udd_ep_run+0x11c>

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
8000a4f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4fa:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a4fe:	91 19       	st.w	r8[0x4],r9
	ptr_job->buf_size = buf_size;
8000a500:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a504:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a508:	91 29       	st.w	r8[0x8],r9
	ptr_job->nb_trans = 0;
8000a50a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a50e:	30 09       	mov	r9,0
8000a510:	91 39       	st.w	r8[0xc],r9
	ptr_job->call_trans = callback;
8000a512:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a516:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a51a:	91 49       	st.w	r8[0x10],r9
	ptr_job->b_shortpacket = b_shortpacket;
8000a51c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a520:	72 08       	ld.w	r8,r9[0x0]
8000a522:	ef 3a ff f0 	ld.ub	r10,r7[-16]
8000a526:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000a52a:	93 08       	st.w	r9[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
8000a52c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a530:	10 9c       	mov	r12,r8
8000a532:	f0 1f 00 07 	mcall	8000a54c <udd_ep_run+0x120>
	return true;
8000a536:	30 18       	mov	r8,1
}
8000a538:	10 9c       	mov	r12,r8
8000a53a:	2f 9d       	sub	sp,-28
8000a53c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a540:	00 00       	add	r0,r0
8000a542:	07 78       	ld.ub	r8,--r3
8000a544:	80 00       	ld.sh	r0,r0[0x0]
8000a546:	98 10       	ld.sh	r0,r12[0x2]
8000a548:	80 00       	ld.sh	r0,r0[0x0]
8000a54a:	98 2e       	ld.sh	lr,r12[0x4]
8000a54c:	80 00       	ld.sh	r0,r0[0x0]
8000a54e:	b2 84       	st.b	r9[0x0],r4

8000a550 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
8000a550:	eb cd 40 80 	pushm	r7,lr
8000a554:	1a 97       	mov	r7,sp
8000a556:	20 2d       	sub	sp,8
8000a558:	18 98       	mov	r8,r12
8000a55a:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a55e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a562:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a566:	ef 68 ff ff 	st.b	r7[-1],r8

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
8000a56a:	fe 68 00 00 	mov	r8,-131072
8000a56e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a572:	20 19       	sub	r9,1
8000a574:	fc 1a 02 00 	movh	r10,0x200
8000a578:	f4 09 09 49 	lsl	r9,r10,r9
8000a57c:	91 59       	st.w	r8[0x14],r9
	udd_endpoint_dma_set_control(index, 0);
8000a57e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a582:	a5 68       	lsl	r8,0x4
8000a584:	e0 38 fd 00 	sub	r8,130304
8000a588:	30 09       	mov	r9,0
8000a58a:	91 29       	st.w	r8[0x8],r9
	// Kill banks
	udd_disable_endpoint_interrupt(index);
8000a58c:	fe 68 00 00 	mov	r8,-131072
8000a590:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a594:	e0 6a 10 00 	mov	r10,4096
8000a598:	f4 09 09 49 	lsl	r9,r10,r9
8000a59c:	91 59       	st.w	r8[0x14],r9
	while (udd_nb_busy_bank(index)) {
8000a59e:	c1 28       	rjmp	8000a5c2 <udd_ep_abort+0x72>
		udd_kill_last_in_bank(index);
8000a5a0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a5a4:	a3 68       	lsl	r8,0x2
8000a5a6:	e0 38 fe 10 	sub	r8,130576
8000a5aa:	e0 69 20 00 	mov	r9,8192
8000a5ae:	91 09       	st.w	r8[0x0],r9
		while(Is_udd_killing_last_in_bank(index));
8000a5b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a5b4:	a3 68       	lsl	r8,0x2
8000a5b6:	e0 38 fe 40 	sub	r8,130624
8000a5ba:	70 08       	ld.w	r8,r8[0x0]
8000a5bc:	e2 18 20 00 	andl	r8,0x2000,COH
8000a5c0:	cf 81       	brne	8000a5b0 <udd_ep_abort+0x60>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
8000a5c2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a5c6:	a3 68       	lsl	r8,0x2
8000a5c8:	e0 38 fe d0 	sub	r8,130768
8000a5cc:	70 08       	ld.w	r8,r8[0x0]
8000a5ce:	e2 18 30 00 	andl	r8,0x3000,COH
8000a5d2:	ad 88       	lsr	r8,0xc
8000a5d4:	ce 61       	brne	8000a5a0 <udd_ep_abort+0x50>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
8000a5d6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a5da:	10 9c       	mov	r12,r8
8000a5dc:	f0 1f 00 03 	mcall	8000a5e8 <udd_ep_abort+0x98>
}
8000a5e0:	2f ed       	sub	sp,-8
8000a5e2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a5e6:	00 00       	add	r0,r0
8000a5e8:	80 00       	ld.sh	r0,r0[0x0]
8000a5ea:	b1 b4       	sbr	r4,0x11

8000a5ec <udd_ep_wait_stall_clear>:


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
8000a5ec:	eb cd 40 80 	pushm	r7,lr
8000a5f0:	1a 97       	mov	r7,sp
8000a5f2:	20 3d       	sub	sp,12
8000a5f4:	18 98       	mov	r8,r12
8000a5f6:	ef 4b ff f4 	st.w	r7[-12],r11
8000a5fa:	ef 68 ff f8 	st.b	r7[-8],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000a5fe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a602:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a606:	ef 68 ff f8 	st.b	r7[-8],r8
	if (USB_DEVICE_MAX_EP < ep) {
8000a60a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000a60e:	30 28       	mov	r8,2
8000a610:	f0 09 18 00 	cp.b	r9,r8
8000a614:	e0 88 00 04 	brls	8000a61c <udd_ep_wait_stall_clear+0x30>
		return false;
8000a618:	30 08       	mov	r8,0
8000a61a:	c4 48       	rjmp	8000a6a2 <udd_ep_wait_stall_clear+0xb6>
	}

	ptr_job = &udd_ep_job[ep - 1];
8000a61c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a620:	f0 c9 00 01 	sub	r9,r8,1
8000a624:	12 98       	mov	r8,r9
8000a626:	a3 68       	lsl	r8,0x2
8000a628:	12 08       	add	r8,r9
8000a62a:	a3 68       	lsl	r8,0x2
8000a62c:	10 99       	mov	r9,r8
8000a62e:	4a 08       	lddpc	r8,8000a6ac <udd_ep_wait_stall_clear+0xc0>
8000a630:	f2 08 00 08 	add	r8,r9,r8
8000a634:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!Is_udd_endpoint_enabled(ep)) {
8000a638:	fe 68 00 00 	mov	r8,-131072
8000a63c:	70 79       	ld.w	r9,r8[0x1c]
8000a63e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a642:	30 1a       	mov	r10,1
8000a644:	f4 08 09 48 	lsl	r8,r10,r8
8000a648:	f3 e8 00 08 	and	r8,r9,r8
8000a64c:	c0 31       	brne	8000a652 <udd_ep_wait_stall_clear+0x66>
		return false; // Endpoint not enabled
8000a64e:	30 08       	mov	r8,0
8000a650:	c2 98       	rjmp	8000a6a2 <udd_ep_wait_stall_clear+0xb6>
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
8000a652:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a656:	70 08       	ld.w	r8,r8[0x0]
8000a658:	e6 18 80 00 	andh	r8,0x8000,COH
8000a65c:	c0 30       	breq	8000a662 <udd_ep_wait_stall_clear+0x76>
		return false; // Job already on going
8000a65e:	30 08       	mov	r8,0
8000a660:	c2 18       	rjmp	8000a6a2 <udd_ep_wait_stall_clear+0xb6>
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000a662:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a666:	a3 68       	lsl	r8,0x2
8000a668:	e0 38 fe 40 	sub	r8,130624
8000a66c:	70 08       	ld.w	r8,r8[0x0]
8000a66e:	e6 18 00 08 	andh	r8,0x8,COH
8000a672:	c0 71       	brne	8000a680 <udd_ep_wait_stall_clear+0x94>
			|| ptr_job->stall_requested) {
8000a674:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a678:	70 08       	ld.w	r8,r8[0x0]
8000a67a:	e6 18 20 00 	andh	r8,0x2000,COH
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000a67e:	c0 e0       	breq	8000a69a <udd_ep_wait_stall_clear+0xae>
			|| ptr_job->stall_requested) {
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
8000a680:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a684:	72 08       	ld.w	r8,r9[0x0]
8000a686:	30 1a       	mov	r10,1
8000a688:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a68c:	93 08       	st.w	r9[0x0],r8
		ptr_job->call_nohalt = callback;
8000a68e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a692:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a696:	91 49       	st.w	r8[0x10],r9
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000a698:	c0 48       	rjmp	8000a6a0 <udd_ep_wait_stall_clear+0xb4>
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
8000a69a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a69e:	5d 18       	icall	r8
	}
	return true;
8000a6a0:	30 18       	mov	r8,1
}
8000a6a2:	10 9c       	mov	r12,r8
8000a6a4:	2f dd       	sub	sp,-12
8000a6a6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a6aa:	00 00       	add	r0,r0
8000a6ac:	00 00       	add	r0,r0
8000a6ae:	07 78       	ld.ub	r8,--r3

8000a6b0 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
8000a6b0:	eb cd 40 80 	pushm	r7,lr
8000a6b4:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000a6b6:	fe 68 00 00 	mov	r8,-131072
8000a6ba:	fe 69 00 00 	mov	r9,-131072
8000a6be:	72 09       	ld.w	r9,r9[0x0]
8000a6c0:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a6c4:	ab b9       	sbr	r9,0xb
8000a6c6:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_j();
8000a6c8:	fe 68 00 00 	mov	r8,-131072
8000a6cc:	fe 69 00 00 	mov	r9,-131072
8000a6d0:	72 09       	ld.w	r9,r9[0x0]
8000a6d2:	ad b9       	sbr	r9,0xd
8000a6d4:	91 09       	st.w	r8[0x0],r9
}
8000a6d6:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a6da <udd_test_mode_k>:


void udd_test_mode_k(void)
{
8000a6da:	eb cd 40 80 	pushm	r7,lr
8000a6de:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000a6e0:	fe 68 00 00 	mov	r8,-131072
8000a6e4:	fe 69 00 00 	mov	r9,-131072
8000a6e8:	72 09       	ld.w	r9,r9[0x0]
8000a6ea:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a6ee:	ab b9       	sbr	r9,0xb
8000a6f0:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_k();
8000a6f2:	fe 68 00 00 	mov	r8,-131072
8000a6f6:	fe 69 00 00 	mov	r9,-131072
8000a6fa:	72 09       	ld.w	r9,r9[0x0]
8000a6fc:	af a9       	sbr	r9,0xe
8000a6fe:	91 09       	st.w	r8[0x0],r9
}
8000a700:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a704 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
8000a704:	eb cd 40 80 	pushm	r7,lr
8000a708:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000a70a:	fe 68 00 00 	mov	r8,-131072
8000a70e:	fe 69 00 00 	mov	r9,-131072
8000a712:	72 09       	ld.w	r9,r9[0x0]
8000a714:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a718:	ab b9       	sbr	r9,0xb
8000a71a:	91 09       	st.w	r8[0x0],r9
}
8000a71c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a720 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
8000a720:	eb cd 40 80 	pushm	r7,lr
8000a724:	1a 97       	mov	r7,sp
8000a726:	21 7d       	sub	sp,92
				0xFF, 0xFF,
		// S, 111111S, {0111111S * 7}
		0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD,
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};
8000a728:	4d c9       	lddpc	r9,8000a898 <udd_test_mode_packet+0x178>
8000a72a:	ee c8 00 5c 	sub	r8,r7,92
8000a72e:	f2 ea 00 00 	ld.d	r10,r9[0]
8000a732:	f0 eb 00 00 	st.d	r8[0],r10
8000a736:	f2 ea 00 08 	ld.d	r10,r9[8]
8000a73a:	f0 eb 00 08 	st.d	r8[8],r10
8000a73e:	f2 ea 00 10 	ld.d	r10,r9[16]
8000a742:	f0 eb 00 10 	st.d	r8[16],r10
8000a746:	f2 ea 00 18 	ld.d	r10,r9[24]
8000a74a:	f0 eb 00 18 	st.d	r8[24],r10
8000a74e:	f2 ea 00 20 	ld.d	r10,r9[32]
8000a752:	f0 eb 00 20 	st.d	r8[32],r10
8000a756:	f2 ea 00 28 	ld.d	r10,r9[40]
8000a75a:	f0 eb 00 28 	st.d	r8[40],r10
8000a75e:	72 ca       	ld.w	r10,r9[0x30]
8000a760:	91 ca       	st.w	r8[0x30],r10
8000a762:	f3 39 00 34 	ld.ub	r9,r9[52]
8000a766:	f1 69 00 34 	st.b	r8[52],r9

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
8000a76a:	fe 68 00 00 	mov	r8,-131072
8000a76e:	fe 69 00 00 	mov	r9,-131072
8000a772:	72 79       	ld.w	r9,r9[0x1c]
8000a774:	a1 c9       	cbr	r9,0x0
8000a776:	91 79       	st.w	r8[0x1c],r9
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
8000a778:	fe 68 01 00 	mov	r8,-130816
8000a77c:	fe 69 01 00 	mov	r9,-130816
8000a780:	72 09       	ld.w	r9,r9[0x0]
8000a782:	12 9a       	mov	r10,r9
8000a784:	e0 1a e6 83 	andl	r10,0xe683
8000a788:	34 09       	mov	r9,64
8000a78a:	ef 49 ff f8 	st.w	r7[-8],r9
8000a78e:	30 89       	mov	r9,8
8000a790:	ef 49 ff fc 	st.w	r7[-4],r9
8000a794:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a798:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a79c:	f2 0b 0c 49 	max	r9,r9,r11
8000a7a0:	ef 49 ff f4 	st.w	r7[-12],r9
8000a7a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a7a8:	ef 49 ff ec 	st.w	r7[-20],r9
8000a7ac:	e0 69 04 00 	mov	r9,1024
8000a7b0:	ef 49 ff f0 	st.w	r7[-16],r9
8000a7b4:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a7b8:	ee fb ff f0 	ld.w	r11,r7[-16]
8000a7bc:	f2 0b 0d 49 	min	r9,r9,r11
8000a7c0:	ef 49 ff e8 	st.w	r7[-24],r9
8000a7c4:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a7c8:	a1 79       	lsl	r9,0x1
8000a7ca:	20 19       	sub	r9,1
8000a7cc:	f2 09 12 00 	clz	r9,r9
8000a7d0:	f2 09 11 1c 	rsub	r9,r9,28
8000a7d4:	a5 69       	lsl	r9,0x4
8000a7d6:	e2 19 08 7c 	andl	r9,0x87c,COH
8000a7da:	f5 e9 10 09 	or	r9,r10,r9
8000a7de:	e8 19 11 00 	orl	r9,0x1100
8000a7e2:	91 09       	st.w	r8[0x0],r9
			64, AVR32_USBB_UECFG0_EPBK_SINGLE);
	udd_allocate_memory(0);
8000a7e4:	fe 68 01 00 	mov	r8,-130816
8000a7e8:	fe 69 01 00 	mov	r9,-130816
8000a7ec:	72 09       	ld.w	r9,r9[0x0]
8000a7ee:	a1 b9       	sbr	r9,0x1
8000a7f0:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
8000a7f2:	fe 68 00 00 	mov	r8,-131072
8000a7f6:	fe 69 00 00 	mov	r9,-131072
8000a7fa:	72 79       	ld.w	r9,r9[0x1c]
8000a7fc:	a1 a9       	sbr	r9,0x0
8000a7fe:	91 79       	st.w	r8[0x1c],r9

	udd_enable_hs_test_mode();
8000a800:	fe 68 00 00 	mov	r8,-131072
8000a804:	fe 69 00 00 	mov	r9,-131072
8000a808:	72 09       	ld.w	r9,r9[0x0]
8000a80a:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a80e:	ab b9       	sbr	r9,0xb
8000a810:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_packet();
8000a812:	fe 68 00 00 	mov	r8,-131072
8000a816:	fe 69 00 00 	mov	r9,-131072
8000a81a:	72 09       	ld.w	r9,r9[0x0]
8000a81c:	af b9       	sbr	r9,0xf
8000a81e:	91 09       	st.w	r8[0x0],r9

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000a820:	fc 18 e0 00 	movh	r8,0xe000
8000a824:	ef 48 ff dc 	st.w	r7[-36],r8
	ptr_src = test_packet;
8000a828:	ee c8 00 5c 	sub	r8,r7,92
8000a82c:	ef 48 ff e0 	st.w	r7[-32],r8

	for (i = 0; i < sizeof(test_packet); i++) {
8000a830:	30 08       	mov	r8,0
8000a832:	ef 68 ff db 	st.b	r7[-37],r8
8000a836:	c1 68       	rjmp	8000a862 <udd_test_mode_packet+0x142>
		*ptr_dest++ = *ptr_src++;
8000a838:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a83c:	11 88       	ld.ub	r8,r8[0x0]
8000a83e:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000a842:	b2 88       	st.b	r9[0x0],r8
8000a844:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a848:	2f f8       	sub	r8,-1
8000a84a:	ef 48 ff dc 	st.w	r7[-36],r8
8000a84e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a852:	2f f8       	sub	r8,-1
8000a854:	ef 48 ff e0 	st.w	r7[-32],r8

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
8000a858:	ef 38 ff db 	ld.ub	r8,r7[-37]
8000a85c:	2f f8       	sub	r8,-1
8000a85e:	ef 68 ff db 	st.b	r7[-37],r8
8000a862:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000a866:	33 48       	mov	r8,52
8000a868:	f0 09 18 00 	cp.b	r9,r8
8000a86c:	fe 98 ff e6 	brls	8000a838 <udd_test_mode_packet+0x118>
		*ptr_dest++ = *ptr_src++;
	}
	flags = cpu_irq_save();
8000a870:	f0 1f 00 0b 	mcall	8000a89c <udd_test_mode_packet+0x17c>
8000a874:	18 98       	mov	r8,r12
8000a876:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_in_send_interrupt(0);
8000a87a:	fe 68 01 f0 	mov	r8,-130576
8000a87e:	30 19       	mov	r9,1
8000a880:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000a882:	ee fc ff e4 	ld.w	r12,r7[-28]
8000a886:	f0 1f 00 07 	mcall	8000a8a0 <udd_test_mode_packet+0x180>

	udd_ack_in_send(0);
8000a88a:	fe 68 01 60 	mov	r8,-130720
8000a88e:	30 19       	mov	r9,1
8000a890:	91 09       	st.w	r8[0x0],r9
}
8000a892:	2e 9d       	sub	sp,-92
8000a894:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a898:	80 00       	ld.sh	r0,r0[0x0]
8000a89a:	ec e4 80 00 	ld.d	r4,r6[-32768]
8000a89e:	98 10       	ld.sh	r0,r12[0x2]
8000a8a0:	80 00       	ld.sh	r0,r0[0x0]
8000a8a2:	98 2e       	ld.sh	lr,r12[0x4]

8000a8a4 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
8000a8a4:	eb cd 40 80 	pushm	r7,lr
8000a8a8:	1a 97       	mov	r7,sp
8000a8aa:	20 7d       	sub	sp,28
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
8000a8ac:	fe 68 00 00 	mov	r8,-131072
8000a8b0:	fe 69 00 00 	mov	r9,-131072
8000a8b4:	72 09       	ld.w	r9,r9[0x0]
8000a8b6:	e0 19 ff 80 	andl	r9,0xff80
8000a8ba:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000a8bc:	fe 68 00 00 	mov	r8,-131072
8000a8c0:	fe 69 00 00 	mov	r9,-131072
8000a8c4:	72 09       	ld.w	r9,r9[0x0]
8000a8c6:	a7 b9       	sbr	r9,0x7
8000a8c8:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
8000a8ca:	fe 68 01 00 	mov	r8,-130816
8000a8ce:	fe 69 01 00 	mov	r9,-130816
8000a8d2:	72 09       	ld.w	r9,r9[0x0]
8000a8d4:	12 9a       	mov	r10,r9
8000a8d6:	e0 1a e6 83 	andl	r10,0xe683
8000a8da:	34 09       	mov	r9,64
8000a8dc:	ef 49 ff f8 	st.w	r7[-8],r9
8000a8e0:	30 89       	mov	r9,8
8000a8e2:	ef 49 ff fc 	st.w	r7[-4],r9
8000a8e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a8ea:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a8ee:	f2 0b 0c 49 	max	r9,r9,r11
8000a8f2:	ef 49 ff f4 	st.w	r7[-12],r9
8000a8f6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a8fa:	ef 49 ff ec 	st.w	r7[-20],r9
8000a8fe:	e0 69 04 00 	mov	r9,1024
8000a902:	ef 49 ff f0 	st.w	r7[-16],r9
8000a906:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a90a:	ee fb ff f0 	ld.w	r11,r7[-16]
8000a90e:	f2 0b 0d 49 	min	r9,r9,r11
8000a912:	ef 49 ff e8 	st.w	r7[-24],r9
8000a916:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a91a:	a1 79       	lsl	r9,0x1
8000a91c:	20 19       	sub	r9,1
8000a91e:	f2 09 12 00 	clz	r9,r9
8000a922:	f2 09 11 1c 	rsub	r9,r9,28
8000a926:	a5 69       	lsl	r9,0x4
8000a928:	e2 19 19 7c 	andl	r9,0x197c,COH
8000a92c:	f5 e9 10 09 	or	r9,r10,r9
8000a930:	91 09       	st.w	r8[0x0],r9
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
8000a932:	fe 68 01 00 	mov	r8,-130816
8000a936:	fe 69 01 00 	mov	r9,-130816
8000a93a:	72 09       	ld.w	r9,r9[0x0]
8000a93c:	a1 b9       	sbr	r9,0x1
8000a93e:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
8000a940:	fe 68 00 00 	mov	r8,-131072
8000a944:	fe 69 00 00 	mov	r9,-131072
8000a948:	72 79       	ld.w	r9,r9[0x1c]
8000a94a:	a1 a9       	sbr	r9,0x0
8000a94c:	91 79       	st.w	r8[0x1c],r9
	flags = cpu_irq_save();
8000a94e:	f0 1f 00 0d 	mcall	8000a980 <udd_reset_ep_ctrl+0xdc>
8000a952:	18 98       	mov	r8,r12
8000a954:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_setup_received_interrupt(0);
8000a958:	fe 68 01 f0 	mov	r8,-130576
8000a95c:	30 49       	mov	r9,4
8000a95e:	91 09       	st.w	r8[0x0],r9
	udd_enable_out_received_interrupt(0);
8000a960:	fe 68 01 f0 	mov	r8,-130576
8000a964:	30 29       	mov	r9,2
8000a966:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint_interrupt(0);
8000a968:	fe 68 00 00 	mov	r8,-131072
8000a96c:	e0 69 10 00 	mov	r9,4096
8000a970:	91 69       	st.w	r8[0x18],r9
	cpu_irq_restore(flags);
8000a972:	ee fc ff e4 	ld.w	r12,r7[-28]
8000a976:	f0 1f 00 04 	mcall	8000a984 <udd_reset_ep_ctrl+0xe0>
}
8000a97a:	2f 9d       	sub	sp,-28
8000a97c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a980:	80 00       	ld.sh	r0,r0[0x0]
8000a982:	98 10       	ld.sh	r0,r12[0x2]
8000a984:	80 00       	ld.sh	r0,r0[0x0]
8000a986:	98 2e       	ld.sh	lr,r12[0x4]

8000a988 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
8000a988:	eb cd 40 80 	pushm	r7,lr
8000a98c:	1a 97       	mov	r7,sp
8000a98e:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
8000a990:	f0 1f 00 10 	mcall	8000a9d0 <udd_ctrl_init+0x48>
8000a994:	18 98       	mov	r8,r12
8000a996:	ef 48 ff fc 	st.w	r7[-4],r8
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
8000a99a:	fe 68 02 20 	mov	r8,-130528
8000a99e:	30 19       	mov	r9,1
8000a9a0:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000a9a2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a9a6:	f0 1f 00 0c 	mcall	8000a9d4 <udd_ctrl_init+0x4c>

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
8000a9aa:	fe 68 01 60 	mov	r8,-130720
8000a9ae:	30 29       	mov	r9,2
8000a9b0:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
8000a9b2:	48 a8       	lddpc	r8,8000a9d8 <udd_ctrl_init+0x50>
8000a9b4:	30 09       	mov	r9,0
8000a9b6:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000a9b8:	48 88       	lddpc	r8,8000a9d8 <udd_ctrl_init+0x50>
8000a9ba:	30 09       	mov	r9,0
8000a9bc:	91 59       	st.w	r8[0x14],r9
	udd_g_ctrlreq.payload_size = 0;
8000a9be:	48 79       	lddpc	r9,8000a9d8 <udd_ctrl_init+0x50>
8000a9c0:	30 08       	mov	r8,0
8000a9c2:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
8000a9c4:	48 68       	lddpc	r8,8000a9dc <udd_ctrl_init+0x54>
8000a9c6:	30 09       	mov	r9,0
8000a9c8:	91 09       	st.w	r8[0x0],r9
}
8000a9ca:	2f fd       	sub	sp,-4
8000a9cc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9d0:	80 00       	ld.sh	r0,r0[0x0]
8000a9d2:	98 10       	ld.sh	r0,r12[0x2]
8000a9d4:	80 00       	ld.sh	r0,r0[0x0]
8000a9d6:	98 2e       	ld.sh	lr,r12[0x4]
8000a9d8:	00 00       	add	r0,r0
8000a9da:	0f c4       	ld.ub	r4,r7[0x4]
8000a9dc:	00 00       	add	r0,r0
8000a9de:	07 70       	ld.ub	r0,--r3

8000a9e0 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
8000a9e0:	eb cd 40 80 	pushm	r7,lr
8000a9e4:	1a 97       	mov	r7,sp
8000a9e6:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
8000a9e8:	4c b8       	lddpc	r8,8000ab14 <udd_ctrl_setup_received+0x134>
8000a9ea:	70 08       	ld.w	r8,r8[0x0]
8000a9ec:	58 08       	cp.w	r8,0
8000a9ee:	c0 50       	breq	8000a9f8 <udd_ctrl_setup_received+0x18>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
8000a9f0:	f0 1f 00 4a 	mcall	8000ab18 <udd_ctrl_setup_received+0x138>

		// Reinitializes control endpoint management
		udd_ctrl_init();
8000a9f4:	f0 1f 00 4a 	mcall	8000ab1c <udd_ctrl_setup_received+0x13c>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
8000a9f8:	fe 68 01 30 	mov	r8,-130768
8000a9fc:	70 08       	ld.w	r8,r8[0x0]
8000a9fe:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000aa02:	b5 88       	lsr	r8,0x14
8000aa04:	58 88       	cp.w	r8,8
8000aa06:	c0 80       	breq	8000aa16 <udd_ctrl_setup_received+0x36>
		udd_ctrl_stall_data();
8000aa08:	f0 1f 00 46 	mcall	8000ab20 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
8000aa0c:	fe 68 01 60 	mov	r8,-130720
8000aa10:	30 49       	mov	r9,4
8000aa12:	91 09       	st.w	r8[0x0],r9
		return; // Error data number doesn't correspond to SETUP packet
8000aa14:	c7 d8       	rjmp	8000ab0e <udd_ctrl_setup_received+0x12e>
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
8000aa16:	fc 18 e0 00 	movh	r8,0xe000
8000aa1a:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < 8; i++) {
8000aa1e:	30 08       	mov	r8,0
8000aa20:	ef 68 ff fb 	st.b	r7[-5],r8
8000aa24:	c1 38       	rjmp	8000aa4a <udd_ctrl_setup_received+0x6a>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
8000aa26:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000aa2a:	4b f8       	lddpc	r8,8000ab24 <udd_ctrl_setup_received+0x144>
8000aa2c:	10 09       	add	r9,r8
8000aa2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aa32:	11 88       	ld.ub	r8,r8[0x0]
8000aa34:	b2 88       	st.b	r9[0x0],r8
8000aa36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aa3a:	2f f8       	sub	r8,-1
8000aa3c:	ef 48 ff fc 	st.w	r7[-4],r8
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
8000aa40:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000aa44:	2f f8       	sub	r8,-1
8000aa46:	ef 68 ff fb 	st.b	r7[-5],r8
8000aa4a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000aa4e:	30 78       	mov	r8,7
8000aa50:	f0 09 18 00 	cp.b	r9,r8
8000aa54:	fe 98 ff e9 	brls	8000aa26 <udd_ctrl_setup_received+0x46>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
8000aa58:	4b 38       	lddpc	r8,8000ab24 <udd_ctrl_setup_received+0x144>
8000aa5a:	90 18       	ld.sh	r8,r8[0x2]
8000aa5c:	5c 88       	casts.h	r8
8000aa5e:	5c c8       	swap.bh	r8
8000aa60:	5c 88       	casts.h	r8
8000aa62:	4b 19       	lddpc	r9,8000ab24 <udd_ctrl_setup_received+0x144>
8000aa64:	b2 18       	st.h	r9[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
8000aa66:	4b 08       	lddpc	r8,8000ab24 <udd_ctrl_setup_received+0x144>
8000aa68:	90 28       	ld.sh	r8,r8[0x4]
8000aa6a:	5c 88       	casts.h	r8
8000aa6c:	5c c8       	swap.bh	r8
8000aa6e:	5c 88       	casts.h	r8
8000aa70:	4a d9       	lddpc	r9,8000ab24 <udd_ctrl_setup_received+0x144>
8000aa72:	b2 28       	st.h	r9[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
8000aa74:	4a c8       	lddpc	r8,8000ab24 <udd_ctrl_setup_received+0x144>
8000aa76:	90 38       	ld.sh	r8,r8[0x6]
8000aa78:	5c 88       	casts.h	r8
8000aa7a:	5c c8       	swap.bh	r8
8000aa7c:	5c 88       	casts.h	r8
8000aa7e:	4a a9       	lddpc	r9,8000ab24 <udd_ctrl_setup_received+0x144>
8000aa80:	b2 38       	st.h	r9[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
8000aa82:	f0 1f 00 2a 	mcall	8000ab28 <udd_ctrl_setup_received+0x148>
8000aa86:	18 98       	mov	r8,r12
8000aa88:	ec 18 00 01 	eorl	r8,0x1
8000aa8c:	5c 58       	castu.b	r8
8000aa8e:	c0 80       	breq	8000aa9e <udd_ctrl_setup_received+0xbe>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
8000aa90:	f0 1f 00 24 	mcall	8000ab20 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
8000aa94:	fe 68 01 60 	mov	r8,-130720
8000aa98:	30 49       	mov	r9,4
8000aa9a:	91 09       	st.w	r8[0x0],r9
		return;
8000aa9c:	c3 98       	rjmp	8000ab0e <udd_ctrl_setup_received+0x12e>
	}
	udd_ack_setup_received(0);
8000aa9e:	fe 68 01 60 	mov	r8,-130720
8000aaa2:	30 49       	mov	r9,4
8000aaa4:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
8000aaa6:	4a 08       	lddpc	r8,8000ab24 <udd_ctrl_setup_received+0x144>
8000aaa8:	11 88       	ld.ub	r8,r8[0x0]
8000aaaa:	10 99       	mov	r9,r8
8000aaac:	30 08       	mov	r8,0
8000aaae:	f0 09 18 00 	cp.b	r9,r8
8000aab2:	c0 d4       	brge	8000aacc <udd_ctrl_setup_received+0xec>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
8000aab4:	49 e9       	lddpc	r9,8000ab2c <udd_ctrl_setup_received+0x14c>
8000aab6:	30 08       	mov	r8,0
8000aab8:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000aaba:	49 e9       	lddpc	r9,8000ab30 <udd_ctrl_setup_received+0x150>
8000aabc:	30 08       	mov	r8,0
8000aabe:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
8000aac0:	49 58       	lddpc	r8,8000ab14 <udd_ctrl_setup_received+0x134>
8000aac2:	30 29       	mov	r9,2
8000aac4:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
8000aac6:	f0 1f 00 1c 	mcall	8000ab34 <udd_ctrl_setup_received+0x154>
8000aaca:	c2 28       	rjmp	8000ab0e <udd_ctrl_setup_received+0x12e>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
8000aacc:	49 68       	lddpc	r8,8000ab24 <udd_ctrl_setup_received+0x144>
8000aace:	90 38       	ld.sh	r8,r8[0x6]
8000aad0:	58 08       	cp.w	r8,0
8000aad2:	c0 41       	brne	8000aada <udd_ctrl_setup_received+0xfa>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
8000aad4:	f0 1f 00 19 	mcall	8000ab38 <udd_ctrl_setup_received+0x158>
			return;
8000aad8:	c1 b8       	rjmp	8000ab0e <udd_ctrl_setup_received+0x12e>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
8000aada:	49 59       	lddpc	r9,8000ab2c <udd_ctrl_setup_received+0x14c>
8000aadc:	30 08       	mov	r8,0
8000aade:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000aae0:	49 49       	lddpc	r9,8000ab30 <udd_ctrl_setup_received+0x150>
8000aae2:	30 08       	mov	r8,0
8000aae4:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
8000aae6:	48 c8       	lddpc	r8,8000ab14 <udd_ctrl_setup_received+0x134>
8000aae8:	30 19       	mov	r9,1
8000aaea:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
8000aaec:	fe 68 01 60 	mov	r8,-130720
8000aaf0:	31 09       	mov	r9,16
8000aaf2:	91 09       	st.w	r8[0x0],r9
		flags = cpu_irq_save();
8000aaf4:	f0 1f 00 12 	mcall	8000ab3c <udd_ctrl_setup_received+0x15c>
8000aaf8:	18 98       	mov	r8,r12
8000aafa:	ef 48 ff f4 	st.w	r7[-12],r8
		udd_enable_nak_in_interrupt(0);
8000aafe:	fe 68 01 f0 	mov	r8,-130576
8000ab02:	31 09       	mov	r9,16
8000ab04:	91 09       	st.w	r8[0x0],r9
		cpu_irq_restore(flags);
8000ab06:	ee fc ff f4 	ld.w	r12,r7[-12]
8000ab0a:	f0 1f 00 0e 	mcall	8000ab40 <udd_ctrl_setup_received+0x160>
	}
}
8000ab0e:	2f dd       	sub	sp,-12
8000ab10:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab14:	00 00       	add	r0,r0
8000ab16:	07 70       	ld.ub	r0,--r3
8000ab18:	80 00       	ld.sh	r0,r0[0x0]
8000ab1a:	b0 08       	st.h	r8[0x0],r8
8000ab1c:	80 00       	ld.sh	r0,r0[0x0]
8000ab1e:	a9 88       	lsr	r8,0x8
8000ab20:	80 00       	ld.sh	r0,r0[0x0]
8000ab22:	af 50       	asr	r0,0xf
8000ab24:	00 00       	add	r0,r0
8000ab26:	0f c4       	ld.ub	r4,r7[0x4]
8000ab28:	80 00       	ld.sh	r0,r0[0x0]
8000ab2a:	dd e0       	acall	0x378
8000ab2c:	00 00       	add	r0,r0
8000ab2e:	07 74       	ld.ub	r4,--r3
8000ab30:	00 00       	add	r0,r0
8000ab32:	07 76       	ld.ub	r6,--r3
8000ab34:	80 00       	ld.sh	r0,r0[0x0]
8000ab36:	ab 44       	asr	r4,0xa
8000ab38:	80 00       	ld.sh	r0,r0[0x0]
8000ab3a:	af 70       	lsl	r0,0xf
8000ab3c:	80 00       	ld.sh	r0,r0[0x0]
8000ab3e:	98 10       	ld.sh	r0,r12[0x2]
8000ab40:	80 00       	ld.sh	r0,r0[0x0]
8000ab42:	98 2e       	ld.sh	lr,r12[0x4]

8000ab44 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
8000ab44:	eb cd 40 80 	pushm	r7,lr
8000ab48:	1a 97       	mov	r7,sp
8000ab4a:	20 4d       	sub	sp,16
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
8000ab4c:	f0 1f 00 5c 	mcall	8000acbc <udd_ctrl_in_sent+0x178>
8000ab50:	18 98       	mov	r8,r12
8000ab52:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_disable_in_send_interrupt(0);
8000ab56:	fe 68 02 20 	mov	r8,-130528
8000ab5a:	30 19       	mov	r9,1
8000ab5c:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000ab5e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ab62:	f0 1f 00 58 	mcall	8000acc0 <udd_ctrl_in_sent+0x17c>

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000ab66:	4d 88       	lddpc	r8,8000acc4 <udd_ctrl_in_sent+0x180>
8000ab68:	70 08       	ld.w	r8,r8[0x0]
8000ab6a:	58 38       	cp.w	r8,3
8000ab6c:	c0 61       	brne	8000ab78 <udd_ctrl_in_sent+0x34>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
8000ab6e:	f0 1f 00 57 	mcall	8000acc8 <udd_ctrl_in_sent+0x184>
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000ab72:	f0 1f 00 57 	mcall	8000accc <udd_ctrl_in_sent+0x188>
		return;
8000ab76:	c9 f8       	rjmp	8000acb4 <udd_ctrl_in_sent+0x170>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000ab78:	4d 68       	lddpc	r8,8000acd0 <udd_ctrl_in_sent+0x18c>
8000ab7a:	90 69       	ld.sh	r9,r8[0xc]
8000ab7c:	4d 68       	lddpc	r8,8000acd4 <udd_ctrl_in_sent+0x190>
8000ab7e:	90 08       	ld.sh	r8,r8[0x0]
8000ab80:	10 19       	sub	r9,r8
8000ab82:	ef 59 ff f0 	st.h	r7[-16],r9
	if (0 == nb_remain) {
8000ab86:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ab8a:	30 08       	mov	r8,0
8000ab8c:	f0 09 19 00 	cp.h	r9,r8
8000ab90:	c2 b1       	brne	8000abe6 <udd_ctrl_in_sent+0xa2>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000ab92:	4d 28       	lddpc	r8,8000acd8 <udd_ctrl_in_sent+0x194>
8000ab94:	90 09       	ld.sh	r9,r8[0x0]
8000ab96:	4d 08       	lddpc	r8,8000acd4 <udd_ctrl_in_sent+0x190>
8000ab98:	90 08       	ld.sh	r8,r8[0x0]
8000ab9a:	f2 08 00 08 	add	r8,r9,r8
8000ab9e:	5c 88       	casts.h	r8
8000aba0:	4c e9       	lddpc	r9,8000acd8 <udd_ctrl_in_sent+0x194>
8000aba2:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
8000aba4:	4c b8       	lddpc	r8,8000acd0 <udd_ctrl_in_sent+0x18c>
8000aba6:	90 39       	ld.sh	r9,r8[0x6]
8000aba8:	4c c8       	lddpc	r8,8000acd8 <udd_ctrl_in_sent+0x194>
8000abaa:	90 08       	ld.sh	r8,r8[0x0]
8000abac:	f0 09 19 00 	cp.h	r9,r8
8000abb0:	c0 50       	breq	8000abba <udd_ctrl_in_sent+0x76>
8000abb2:	4c b8       	lddpc	r8,8000acdc <udd_ctrl_in_sent+0x198>
8000abb4:	11 88       	ld.ub	r8,r8[0x0]
8000abb6:	58 08       	cp.w	r8,0
8000abb8:	c0 40       	breq	8000abc0 <udd_ctrl_in_sent+0x7c>
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
8000abba:	f0 1f 00 4a 	mcall	8000ace0 <udd_ctrl_in_sent+0x19c>
			return;
8000abbe:	c7 b8       	rjmp	8000acb4 <udd_ctrl_in_sent+0x170>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
8000abc0:	4c 48       	lddpc	r8,8000acd0 <udd_ctrl_in_sent+0x18c>
8000abc2:	70 58       	ld.w	r8,r8[0x14]
8000abc4:	58 08       	cp.w	r8,0
8000abc6:	c1 00       	breq	8000abe6 <udd_ctrl_in_sent+0xa2>
8000abc8:	4c 28       	lddpc	r8,8000acd0 <udd_ctrl_in_sent+0x18c>
8000abca:	70 58       	ld.w	r8,r8[0x14]
8000abcc:	5d 18       	icall	r8
8000abce:	18 98       	mov	r8,r12
8000abd0:	ec 18 00 01 	eorl	r8,0x1
8000abd4:	5c 58       	castu.b	r8
8000abd6:	c0 81       	brne	8000abe6 <udd_ctrl_in_sent+0xa2>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
8000abd8:	4b f9       	lddpc	r9,8000acd4 <udd_ctrl_in_sent+0x190>
8000abda:	30 08       	mov	r8,0
8000abdc:	b2 08       	st.h	r9[0x0],r8
			nb_remain = udd_g_ctrlreq.payload_size;
8000abde:	4b d8       	lddpc	r8,8000acd0 <udd_ctrl_in_sent+0x18c>
8000abe0:	90 68       	ld.sh	r8,r8[0xc]
8000abe2:	ef 58 ff f0 	st.h	r7[-16],r8
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
8000abe6:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000abea:	33 f8       	mov	r8,63
8000abec:	f0 09 19 00 	cp.h	r9,r8
8000abf0:	e0 88 00 09 	brls	8000ac02 <udd_ctrl_in_sent+0xbe>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
8000abf4:	34 08       	mov	r8,64
8000abf6:	ef 58 ff f0 	st.h	r7[-16],r8
		b_shortpacket = false;
8000abfa:	4b 99       	lddpc	r9,8000acdc <udd_ctrl_in_sent+0x198>
8000abfc:	30 08       	mov	r8,0
8000abfe:	b2 88       	st.b	r9[0x0],r8
8000ac00:	c0 48       	rjmp	8000ac08 <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
8000ac02:	4b 79       	lddpc	r9,8000acdc <udd_ctrl_in_sent+0x198>
8000ac04:	30 18       	mov	r8,1
8000ac06:	b2 88       	st.b	r9[0x0],r8
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000ac08:	fc 18 e0 00 	movh	r8,0xe000
8000ac0c:	ef 48 ff f4 	st.w	r7[-12],r8
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000ac10:	4b 08       	lddpc	r8,8000acd0 <udd_ctrl_in_sent+0x18c>
8000ac12:	70 29       	ld.w	r9,r8[0x8]
8000ac14:	4b 08       	lddpc	r8,8000acd4 <udd_ctrl_in_sent+0x190>
8000ac16:	90 08       	ld.sh	r8,r8[0x0]
8000ac18:	5c 78       	castu.h	r8
8000ac1a:	f2 08 00 08 	add	r8,r9,r8
8000ac1e:	ef 48 ff f8 	st.w	r7[-8],r8
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
8000ac22:	f0 1f 00 27 	mcall	8000acbc <udd_ctrl_in_sent+0x178>
8000ac26:	18 98       	mov	r8,r12
8000ac28:	ef 48 ff fc 	st.w	r7[-4],r8
	if (Is_udd_out_received(0)) {
8000ac2c:	fe 68 01 30 	mov	r8,-130768
8000ac30:	70 08       	ld.w	r8,r8[0x0]
8000ac32:	e2 18 00 02 	andl	r8,0x2,COH
8000ac36:	c0 90       	breq	8000ac48 <udd_ctrl_in_sent+0x104>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
8000ac38:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ac3c:	f0 1f 00 21 	mcall	8000acc0 <udd_ctrl_in_sent+0x17c>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000ac40:	4a 18       	lddpc	r8,8000acc4 <udd_ctrl_in_sent+0x180>
8000ac42:	30 49       	mov	r9,4
8000ac44:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
8000ac46:	c3 78       	rjmp	8000acb4 <udd_ctrl_in_sent+0x170>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000ac48:	30 08       	mov	r8,0
8000ac4a:	ef 68 ff f3 	st.b	r7[-13],r8
8000ac4e:	c1 68       	rjmp	8000ac7a <udd_ctrl_in_sent+0x136>
		*ptr_dest++ = *ptr_src++;
8000ac50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ac54:	11 88       	ld.ub	r8,r8[0x0]
8000ac56:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ac5a:	b2 88       	st.b	r9[0x0],r8
8000ac5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ac60:	2f f8       	sub	r8,-1
8000ac62:	ef 48 ff f4 	st.w	r7[-12],r8
8000ac66:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ac6a:	2f f8       	sub	r8,-1
8000ac6c:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000ac70:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000ac74:	2f f8       	sub	r8,-1
8000ac76:	ef 68 ff f3 	st.b	r7[-13],r8
8000ac7a:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000ac7e:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ac82:	f0 09 19 00 	cp.h	r9,r8
8000ac86:	fe 9b ff e5 	brhi	8000ac50 <udd_ctrl_in_sent+0x10c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
8000ac8a:	49 38       	lddpc	r8,8000acd4 <udd_ctrl_in_sent+0x190>
8000ac8c:	90 08       	ld.sh	r8,r8[0x0]
8000ac8e:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ac92:	f2 08 00 08 	add	r8,r9,r8
8000ac96:	5c 88       	casts.h	r8
8000ac98:	48 f9       	lddpc	r9,8000acd4 <udd_ctrl_in_sent+0x190>
8000ac9a:	b2 08       	st.h	r9[0x0],r8

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
8000ac9c:	fe 68 01 60 	mov	r8,-130720
8000aca0:	30 19       	mov	r9,1
8000aca2:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
8000aca4:	fe 68 01 f0 	mov	r8,-130576
8000aca8:	30 19       	mov	r9,1
8000acaa:	91 09       	st.w	r8[0x0],r9
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
8000acac:	ee fc ff fc 	ld.w	r12,r7[-4]
8000acb0:	f0 1f 00 04 	mcall	8000acc0 <udd_ctrl_in_sent+0x17c>
}
8000acb4:	2f cd       	sub	sp,-16
8000acb6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000acba:	00 00       	add	r0,r0
8000acbc:	80 00       	ld.sh	r0,r0[0x0]
8000acbe:	98 10       	ld.sh	r0,r12[0x2]
8000acc0:	80 00       	ld.sh	r0,r0[0x0]
8000acc2:	98 2e       	ld.sh	lr,r12[0x4]
8000acc4:	00 00       	add	r0,r0
8000acc6:	07 70       	ld.ub	r0,--r3
8000acc8:	80 00       	ld.sh	r0,r0[0x0]
8000acca:	b0 08       	st.h	r8[0x0],r8
8000accc:	80 00       	ld.sh	r0,r0[0x0]
8000acce:	a9 88       	lsr	r8,0x8
8000acd0:	00 00       	add	r0,r0
8000acd2:	0f c4       	ld.ub	r4,r7[0x4]
8000acd4:	00 00       	add	r0,r0
8000acd6:	07 76       	ld.ub	r6,--r3
8000acd8:	00 00       	add	r0,r0
8000acda:	07 74       	ld.ub	r4,--r3
8000acdc:	00 00       	add	r0,r0
8000acde:	07 a0       	ld.ub	r0,r3[0x2]
8000ace0:	80 00       	ld.sh	r0,r0[0x0]
8000ace2:	af c4       	cbr	r4,0xe

8000ace4 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
8000ace4:	eb cd 40 80 	pushm	r7,lr
8000ace8:	1a 97       	mov	r7,sp
8000acea:	20 4d       	sub	sp,16
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
8000acec:	4f 18       	lddpc	r8,8000aeb0 <udd_ctrl_out_received+0x1cc>
8000acee:	70 08       	ld.w	r8,r8[0x0]
8000acf0:	58 18       	cp.w	r8,1
8000acf2:	c1 10       	breq	8000ad14 <udd_ctrl_out_received+0x30>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000acf4:	4e f8       	lddpc	r8,8000aeb0 <udd_ctrl_out_received+0x1cc>
8000acf6:	70 08       	ld.w	r8,r8[0x0]
8000acf8:	58 28       	cp.w	r8,2
8000acfa:	c0 50       	breq	8000ad04 <udd_ctrl_out_received+0x20>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
8000acfc:	4e d8       	lddpc	r8,8000aeb0 <udd_ctrl_out_received+0x1cc>
8000acfe:	70 08       	ld.w	r8,r8[0x0]
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000ad00:	58 48       	cp.w	r8,4
8000ad02:	c0 41       	brne	8000ad0a <udd_ctrl_out_received+0x26>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
8000ad04:	f0 1f 00 6c 	mcall	8000aeb4 <udd_ctrl_out_received+0x1d0>
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000ad08:	c0 38       	rjmp	8000ad0e <udd_ctrl_out_received+0x2a>
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
8000ad0a:	f0 1f 00 6c 	mcall	8000aeb8 <udd_ctrl_out_received+0x1d4>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000ad0e:	f0 1f 00 6c 	mcall	8000aebc <udd_ctrl_out_received+0x1d8>
		return;
8000ad12:	cc b8       	rjmp	8000aea8 <udd_ctrl_out_received+0x1c4>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
8000ad14:	fe 68 01 30 	mov	r8,-130768
8000ad18:	70 08       	ld.w	r8,r8[0x0]
8000ad1a:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000ad1e:	b5 88       	lsr	r8,0x14
8000ad20:	ef 58 ff f6 	st.h	r7[-10],r8
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
8000ad24:	4e 78       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1dc>
8000ad26:	90 68       	ld.sh	r8,r8[0xc]
8000ad28:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000ad2c:	4e 68       	lddpc	r8,8000aec4 <udd_ctrl_out_received+0x1e0>
8000ad2e:	90 08       	ld.sh	r8,r8[0x0]
8000ad30:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000ad34:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000ad38:	f4 08 00 08 	add	r8,r10,r8
8000ad3c:	10 39       	cp.w	r9,r8
8000ad3e:	c0 84       	brge	8000ad4e <udd_ctrl_out_received+0x6a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
8000ad40:	4e 08       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1dc>
8000ad42:	90 69       	ld.sh	r9,r8[0xc]
8000ad44:	4e 08       	lddpc	r8,8000aec4 <udd_ctrl_out_received+0x1e0>
8000ad46:	90 08       	ld.sh	r8,r8[0x0]
8000ad48:	10 19       	sub	r9,r8
8000ad4a:	ef 59 ff f6 	st.h	r7[-10],r9
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000ad4e:	fc 18 e0 00 	movh	r8,0xe000
8000ad52:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000ad56:	4d b8       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1dc>
8000ad58:	70 29       	ld.w	r9,r8[0x8]
8000ad5a:	4d b8       	lddpc	r8,8000aec4 <udd_ctrl_out_received+0x1e0>
8000ad5c:	90 08       	ld.sh	r8,r8[0x0]
8000ad5e:	5c 78       	castu.h	r8
8000ad60:	f2 08 00 08 	add	r8,r9,r8
8000ad64:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < nb_data; i++) {
8000ad68:	30 08       	mov	r8,0
8000ad6a:	ef 68 ff f5 	st.b	r7[-11],r8
8000ad6e:	c1 68       	rjmp	8000ad9a <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = *ptr_src++;
8000ad70:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ad74:	11 88       	ld.ub	r8,r8[0x0]
8000ad76:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ad7a:	b2 88       	st.b	r9[0x0],r8
8000ad7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad80:	2f f8       	sub	r8,-1
8000ad82:	ef 48 ff fc 	st.w	r7[-4],r8
8000ad86:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ad8a:	2f f8       	sub	r8,-1
8000ad8c:	ef 48 ff f8 	st.w	r7[-8],r8
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
8000ad90:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000ad94:	2f f8       	sub	r8,-1
8000ad96:	ef 68 ff f5 	st.b	r7[-11],r8
8000ad9a:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000ad9e:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000ada2:	f0 09 19 00 	cp.h	r9,r8
8000ada6:	fe 9b ff e5 	brhi	8000ad70 <udd_ctrl_out_received+0x8c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
8000adaa:	4c 78       	lddpc	r8,8000aec4 <udd_ctrl_out_received+0x1e0>
8000adac:	90 08       	ld.sh	r8,r8[0x0]
8000adae:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000adb2:	f2 08 00 08 	add	r8,r9,r8
8000adb6:	5c 88       	casts.h	r8
8000adb8:	4c 39       	lddpc	r9,8000aec4 <udd_ctrl_out_received+0x1e0>
8000adba:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000adbc:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000adc0:	34 08       	mov	r8,64
8000adc2:	f0 09 19 00 	cp.h	r9,r8
8000adc6:	c1 11       	brne	8000ade8 <udd_ctrl_out_received+0x104>
			|| (udd_g_ctrlreq.req.wLength <=
8000adc8:	4b e8       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1dc>
8000adca:	90 38       	ld.sh	r8,r8[0x6]
8000adcc:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
					(udd_ctrl_prev_payload_nb_trans +
8000add0:	4b e8       	lddpc	r8,8000aec8 <udd_ctrl_out_received+0x1e4>
8000add2:	90 08       	ld.sh	r8,r8[0x0]
8000add4:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000add8:	4b b8       	lddpc	r8,8000aec4 <udd_ctrl_out_received+0x1e0>
8000adda:	90 08       	ld.sh	r8,r8[0x0]
8000addc:	5c 78       	castu.h	r8
8000adde:	f4 08 00 08 	add	r8,r10,r8
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000ade2:	10 39       	cp.w	r9,r8
8000ade4:	e0 89 00 20 	brgt	8000ae24 <udd_ctrl_out_received+0x140>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
8000ade8:	4b 78       	lddpc	r8,8000aec4 <udd_ctrl_out_received+0x1e0>
8000adea:	90 08       	ld.sh	r8,r8[0x0]
8000adec:	4b 59       	lddpc	r9,8000aec0 <udd_ctrl_out_received+0x1dc>
8000adee:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
8000adf0:	4b 48       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1dc>
8000adf2:	70 58       	ld.w	r8,r8[0x14]
8000adf4:	58 08       	cp.w	r8,0
8000adf6:	c1 00       	breq	8000ae16 <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
8000adf8:	4b 28       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1dc>
8000adfa:	70 58       	ld.w	r8,r8[0x14]
8000adfc:	5d 18       	icall	r8
8000adfe:	18 98       	mov	r8,r12
8000ae00:	ec 18 00 01 	eorl	r8,0x1
8000ae04:	5c 58       	castu.b	r8
8000ae06:	c0 80       	breq	8000ae16 <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
8000ae08:	f0 1f 00 2c 	mcall	8000aeb8 <udd_ctrl_out_received+0x1d4>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
8000ae0c:	fe 68 01 60 	mov	r8,-130720
8000ae10:	30 29       	mov	r9,2
8000ae12:	91 09       	st.w	r8[0x0],r9
				return;
8000ae14:	c4 a8       	rjmp	8000aea8 <udd_ctrl_out_received+0x1c4>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
8000ae16:	fe 68 01 60 	mov	r8,-130720
8000ae1a:	30 29       	mov	r9,2
8000ae1c:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
8000ae1e:	f0 1f 00 2c 	mcall	8000aecc <udd_ctrl_out_received+0x1e8>
		return;
8000ae22:	c4 38       	rjmp	8000aea8 <udd_ctrl_out_received+0x1c4>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
8000ae24:	4a 78       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1dc>
8000ae26:	90 69       	ld.sh	r9,r8[0xc]
8000ae28:	4a 78       	lddpc	r8,8000aec4 <udd_ctrl_out_received+0x1e0>
8000ae2a:	90 08       	ld.sh	r8,r8[0x0]
8000ae2c:	f0 09 19 00 	cp.h	r9,r8
8000ae30:	c2 71       	brne	8000ae7e <udd_ctrl_out_received+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
8000ae32:	4a 48       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1dc>
8000ae34:	70 58       	ld.w	r8,r8[0x14]
8000ae36:	58 08       	cp.w	r8,0
8000ae38:	c0 81       	brne	8000ae48 <udd_ctrl_out_received+0x164>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
8000ae3a:	f0 1f 00 20 	mcall	8000aeb8 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000ae3e:	fe 68 01 60 	mov	r8,-130720
8000ae42:	30 29       	mov	r9,2
8000ae44:	91 09       	st.w	r8[0x0],r9
			return;
8000ae46:	c3 18       	rjmp	8000aea8 <udd_ctrl_out_received+0x1c4>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
8000ae48:	49 e8       	lddpc	r8,8000aec0 <udd_ctrl_out_received+0x1dc>
8000ae4a:	70 58       	ld.w	r8,r8[0x14]
8000ae4c:	5d 18       	icall	r8
8000ae4e:	18 98       	mov	r8,r12
8000ae50:	ec 18 00 01 	eorl	r8,0x1
8000ae54:	5c 58       	castu.b	r8
8000ae56:	c0 80       	breq	8000ae66 <udd_ctrl_out_received+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
8000ae58:	f0 1f 00 18 	mcall	8000aeb8 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000ae5c:	fe 68 01 60 	mov	r8,-130720
8000ae60:	30 29       	mov	r9,2
8000ae62:	91 09       	st.w	r8[0x0],r9
			return;
8000ae64:	c2 28       	rjmp	8000aea8 <udd_ctrl_out_received+0x1c4>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000ae66:	49 98       	lddpc	r8,8000aec8 <udd_ctrl_out_received+0x1e4>
8000ae68:	90 09       	ld.sh	r9,r8[0x0]
8000ae6a:	49 78       	lddpc	r8,8000aec4 <udd_ctrl_out_received+0x1e0>
8000ae6c:	90 08       	ld.sh	r8,r8[0x0]
8000ae6e:	f2 08 00 08 	add	r8,r9,r8
8000ae72:	5c 88       	casts.h	r8
8000ae74:	49 59       	lddpc	r9,8000aec8 <udd_ctrl_out_received+0x1e4>
8000ae76:	b2 08       	st.h	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
8000ae78:	49 39       	lddpc	r9,8000aec4 <udd_ctrl_out_received+0x1e0>
8000ae7a:	30 08       	mov	r8,0
8000ae7c:	b2 08       	st.h	r9[0x0],r8
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
8000ae7e:	fe 68 01 60 	mov	r8,-130720
8000ae82:	30 29       	mov	r9,2
8000ae84:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
8000ae86:	fe 68 01 60 	mov	r8,-130720
8000ae8a:	31 09       	mov	r9,16
8000ae8c:	91 09       	st.w	r8[0x0],r9
	flags = cpu_irq_save();
8000ae8e:	f0 1f 00 11 	mcall	8000aed0 <udd_ctrl_out_received+0x1ec>
8000ae92:	18 98       	mov	r8,r12
8000ae94:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_enable_nak_in_interrupt(0);
8000ae98:	fe 68 01 f0 	mov	r8,-130576
8000ae9c:	31 09       	mov	r9,16
8000ae9e:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000aea0:	ee fc ff f0 	ld.w	r12,r7[-16]
8000aea4:	f0 1f 00 0c 	mcall	8000aed4 <udd_ctrl_out_received+0x1f0>
}
8000aea8:	2f cd       	sub	sp,-16
8000aeaa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aeae:	00 00       	add	r0,r0
8000aeb0:	00 00       	add	r0,r0
8000aeb2:	07 70       	ld.ub	r0,--r3
8000aeb4:	80 00       	ld.sh	r0,r0[0x0]
8000aeb6:	b0 08       	st.h	r8[0x0],r8
8000aeb8:	80 00       	ld.sh	r0,r0[0x0]
8000aeba:	af 50       	asr	r0,0xf
8000aebc:	80 00       	ld.sh	r0,r0[0x0]
8000aebe:	a9 88       	lsr	r8,0x8
8000aec0:	00 00       	add	r0,r0
8000aec2:	0f c4       	ld.ub	r4,r7[0x4]
8000aec4:	00 00       	add	r0,r0
8000aec6:	07 76       	ld.ub	r6,--r3
8000aec8:	00 00       	add	r0,r0
8000aeca:	07 74       	ld.ub	r4,--r3
8000aecc:	80 00       	ld.sh	r0,r0[0x0]
8000aece:	af 70       	lsl	r0,0xf
8000aed0:	80 00       	ld.sh	r0,r0[0x0]
8000aed2:	98 10       	ld.sh	r0,r12[0x2]
8000aed4:	80 00       	ld.sh	r0,r0[0x0]
8000aed6:	98 2e       	ld.sh	lr,r12[0x4]

8000aed8 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
8000aed8:	eb cd 40 80 	pushm	r7,lr
8000aedc:	1a 97       	mov	r7,sp
	if (Is_udd_out_received(0))
8000aede:	fe 68 01 30 	mov	r8,-130768
8000aee2:	70 08       	ld.w	r8,r8[0x0]
8000aee4:	e2 18 00 02 	andl	r8,0x2,COH
8000aee8:	c1 21       	brne	8000af0c <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
8000aeea:	48 b8       	lddpc	r8,8000af14 <udd_ctrl_underflow+0x3c>
8000aeec:	70 08       	ld.w	r8,r8[0x0]
8000aeee:	58 18       	cp.w	r8,1
8000aef0:	c0 41       	brne	8000aef8 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
8000aef2:	f0 1f 00 0a 	mcall	8000af18 <udd_ctrl_underflow+0x40>
8000aef6:	c0 c8       	rjmp	8000af0e <udd_ctrl_underflow+0x36>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
8000aef8:	48 78       	lddpc	r8,8000af14 <udd_ctrl_underflow+0x3c>
8000aefa:	70 08       	ld.w	r8,r8[0x0]
8000aefc:	58 48       	cp.w	r8,4
8000aefe:	c0 81       	brne	8000af0e <udd_ctrl_underflow+0x36>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
8000af00:	fe 68 01 f0 	mov	r8,-130576
8000af04:	e8 69 00 00 	mov	r9,524288
8000af08:	91 09       	st.w	r8[0x0],r9
8000af0a:	c0 28       	rjmp	8000af0e <udd_ctrl_underflow+0x36>


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
		return; // underflow ignored if OUT data is received
8000af0c:	d7 03       	nop
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
	}
}
8000af0e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af12:	00 00       	add	r0,r0
8000af14:	00 00       	add	r0,r0
8000af16:	07 70       	ld.ub	r0,--r3
8000af18:	80 00       	ld.sh	r0,r0[0x0]
8000af1a:	af 70       	lsl	r0,0xf

8000af1c <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
8000af1c:	eb cd 40 80 	pushm	r7,lr
8000af20:	1a 97       	mov	r7,sp
	if (Is_udd_in_send(0))
8000af22:	fe 68 01 30 	mov	r8,-130768
8000af26:	70 08       	ld.w	r8,r8[0x0]
8000af28:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000af2c:	5c 58       	castu.b	r8
8000af2e:	c0 b1       	brne	8000af44 <udd_ctrl_overflow+0x28>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000af30:	48 78       	lddpc	r8,8000af4c <udd_ctrl_overflow+0x30>
8000af32:	70 08       	ld.w	r8,r8[0x0]
8000af34:	58 38       	cp.w	r8,3
8000af36:	c0 81       	brne	8000af46 <udd_ctrl_overflow+0x2a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
8000af38:	fe 68 01 f0 	mov	r8,-130576
8000af3c:	e8 69 00 00 	mov	r9,524288
8000af40:	91 09       	st.w	r8[0x0],r9
8000af42:	c0 28       	rjmp	8000af46 <udd_ctrl_overflow+0x2a>


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
		return; // overflow ignored if IN data is received
8000af44:	d7 03       	nop
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
8000af46:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af4a:	00 00       	add	r0,r0
8000af4c:	00 00       	add	r0,r0
8000af4e:	07 70       	ld.ub	r0,--r3

8000af50 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
8000af50:	eb cd 40 80 	pushm	r7,lr
8000af54:	1a 97       	mov	r7,sp
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
8000af56:	48 68       	lddpc	r8,8000af6c <udd_ctrl_stall_data+0x1c>
8000af58:	30 59       	mov	r9,5
8000af5a:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
8000af5c:	fe 68 01 f0 	mov	r8,-130576
8000af60:	e8 69 00 00 	mov	r9,524288
8000af64:	91 09       	st.w	r8[0x0],r9
}
8000af66:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af6a:	00 00       	add	r0,r0
8000af6c:	00 00       	add	r0,r0
8000af6e:	07 70       	ld.ub	r0,--r3

8000af70 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
8000af70:	eb cd 40 80 	pushm	r7,lr
8000af74:	1a 97       	mov	r7,sp
8000af76:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
8000af78:	49 08       	lddpc	r8,8000afb8 <udd_ctrl_send_zlp_in+0x48>
8000af7a:	30 39       	mov	r9,3
8000af7c:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
8000af7e:	f0 1f 00 10 	mcall	8000afbc <udd_ctrl_send_zlp_in+0x4c>
8000af82:	18 98       	mov	r8,r12
8000af84:	ef 48 ff fc 	st.w	r7[-4],r8
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
8000af88:	fe 68 01 60 	mov	r8,-130720
8000af8c:	30 19       	mov	r9,1
8000af8e:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
8000af90:	fe 68 01 f0 	mov	r8,-130576
8000af94:	30 19       	mov	r9,1
8000af96:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
8000af98:	fe 68 01 60 	mov	r8,-130720
8000af9c:	30 89       	mov	r9,8
8000af9e:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_out_interrupt(0);
8000afa0:	fe 68 01 f0 	mov	r8,-130576
8000afa4:	30 89       	mov	r9,8
8000afa6:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000afa8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000afac:	f0 1f 00 05 	mcall	8000afc0 <udd_ctrl_send_zlp_in+0x50>
}
8000afb0:	2f fd       	sub	sp,-4
8000afb2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000afb6:	00 00       	add	r0,r0
8000afb8:	00 00       	add	r0,r0
8000afba:	07 70       	ld.ub	r0,--r3
8000afbc:	80 00       	ld.sh	r0,r0[0x0]
8000afbe:	98 10       	ld.sh	r0,r12[0x2]
8000afc0:	80 00       	ld.sh	r0,r0[0x0]
8000afc2:	98 2e       	ld.sh	lr,r12[0x4]

8000afc4 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
8000afc4:	eb cd 40 80 	pushm	r7,lr
8000afc8:	1a 97       	mov	r7,sp
8000afca:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000afcc:	48 c8       	lddpc	r8,8000affc <udd_ctrl_send_zlp_out+0x38>
8000afce:	30 49       	mov	r9,4
8000afd0:	91 09       	st.w	r8[0x0],r9
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
8000afd2:	f0 1f 00 0c 	mcall	8000b000 <udd_ctrl_send_zlp_out+0x3c>
8000afd6:	18 98       	mov	r8,r12
8000afd8:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_ack_nak_in(0);
8000afdc:	fe 68 01 60 	mov	r8,-130720
8000afe0:	31 09       	mov	r9,16
8000afe2:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_in_interrupt(0);
8000afe4:	fe 68 01 f0 	mov	r8,-130576
8000afe8:	31 09       	mov	r9,16
8000afea:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000afec:	ee fc ff fc 	ld.w	r12,r7[-4]
8000aff0:	f0 1f 00 05 	mcall	8000b004 <udd_ctrl_send_zlp_out+0x40>
}
8000aff4:	2f fd       	sub	sp,-4
8000aff6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000affa:	00 00       	add	r0,r0
8000affc:	00 00       	add	r0,r0
8000affe:	07 70       	ld.ub	r0,--r3
8000b000:	80 00       	ld.sh	r0,r0[0x0]
8000b002:	98 10       	ld.sh	r0,r12[0x2]
8000b004:	80 00       	ld.sh	r0,r0[0x0]
8000b006:	98 2e       	ld.sh	lr,r12[0x4]

8000b008 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
8000b008:	eb cd 40 80 	pushm	r7,lr
8000b00c:	1a 97       	mov	r7,sp
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000b00e:	48 58       	lddpc	r8,8000b020 <udd_ctrl_endofrequest+0x18>
8000b010:	70 48       	ld.w	r8,r8[0x10]
8000b012:	58 08       	cp.w	r8,0
8000b014:	c0 40       	breq	8000b01c <udd_ctrl_endofrequest+0x14>
		udd_g_ctrlreq.callback();
8000b016:	48 38       	lddpc	r8,8000b020 <udd_ctrl_endofrequest+0x18>
8000b018:	70 48       	ld.w	r8,r8[0x10]
8000b01a:	5d 18       	icall	r8
	}
}
8000b01c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b020:	00 00       	add	r0,r0
8000b022:	0f c4       	ld.ub	r4,r7[0x4]

8000b024 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
8000b024:	eb cd 40 80 	pushm	r7,lr
8000b028:	1a 97       	mov	r7,sp

	if (!Is_udd_endpoint_interrupt(0))
8000b02a:	fe 68 00 00 	mov	r8,-131072
8000b02e:	70 18       	ld.w	r8,r8[0x4]
8000b030:	e2 18 10 00 	andl	r8,0x1000,COH
8000b034:	c0 31       	brne	8000b03a <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
8000b036:	30 08       	mov	r8,0
8000b038:	c4 c8       	rjmp	8000b0d0 <udd_ctrl_interrupt+0xac>

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
8000b03a:	fe 68 02 20 	mov	r8,-130528
8000b03e:	31 09       	mov	r9,16
8000b040:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
8000b042:	fe 68 02 20 	mov	r8,-130528
8000b046:	30 89       	mov	r9,8
8000b048:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
8000b04a:	fe 68 01 30 	mov	r8,-130768
8000b04e:	70 08       	ld.w	r8,r8[0x0]
8000b050:	e2 18 00 04 	andl	r8,0x4,COH
8000b054:	c0 50       	breq	8000b05e <udd_ctrl_interrupt+0x3a>
		// SETUP packet received
		udd_ctrl_setup_received();
8000b056:	f0 1f 00 21 	mcall	8000b0d8 <udd_ctrl_interrupt+0xb4>
		return true;
8000b05a:	30 18       	mov	r8,1
8000b05c:	c3 a8       	rjmp	8000b0d0 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
8000b05e:	fe 68 01 30 	mov	r8,-130768
8000b062:	70 08       	ld.w	r8,r8[0x0]
8000b064:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b068:	5c 58       	castu.b	r8
8000b06a:	c0 c0       	breq	8000b082 <udd_ctrl_interrupt+0x5e>
8000b06c:	fe 68 01 c0 	mov	r8,-130624
8000b070:	70 08       	ld.w	r8,r8[0x0]
8000b072:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b076:	5c 58       	castu.b	r8
8000b078:	c0 50       	breq	8000b082 <udd_ctrl_interrupt+0x5e>
		// IN packet sent
		udd_ctrl_in_sent();
8000b07a:	f0 1f 00 19 	mcall	8000b0dc <udd_ctrl_interrupt+0xb8>
		return true;
8000b07e:	30 18       	mov	r8,1
8000b080:	c2 88       	rjmp	8000b0d0 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_out_received(0)) {
8000b082:	fe 68 01 30 	mov	r8,-130768
8000b086:	70 08       	ld.w	r8,r8[0x0]
8000b088:	e2 18 00 02 	andl	r8,0x2,COH
8000b08c:	c0 50       	breq	8000b096 <udd_ctrl_interrupt+0x72>
		// OUT packet received
		udd_ctrl_out_received();
8000b08e:	f0 1f 00 15 	mcall	8000b0e0 <udd_ctrl_interrupt+0xbc>
		return true;
8000b092:	30 18       	mov	r8,1
8000b094:	c1 e8       	rjmp	8000b0d0 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_out(0)) {
8000b096:	fe 68 01 30 	mov	r8,-130768
8000b09a:	70 08       	ld.w	r8,r8[0x0]
8000b09c:	e2 18 00 08 	andl	r8,0x8,COH
8000b0a0:	c0 90       	breq	8000b0b2 <udd_ctrl_interrupt+0x8e>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
8000b0a2:	fe 68 01 60 	mov	r8,-130720
8000b0a6:	30 89       	mov	r9,8
8000b0a8:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_overflow();
8000b0aa:	f0 1f 00 0f 	mcall	8000b0e4 <udd_ctrl_interrupt+0xc0>
		return true;
8000b0ae:	30 18       	mov	r8,1
8000b0b0:	c1 08       	rjmp	8000b0d0 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_in(0)) {
8000b0b2:	fe 68 01 30 	mov	r8,-130768
8000b0b6:	70 08       	ld.w	r8,r8[0x0]
8000b0b8:	e2 18 00 10 	andl	r8,0x10,COH
8000b0bc:	c0 90       	breq	8000b0ce <udd_ctrl_interrupt+0xaa>
		// Underflow on IN packet
		udd_ack_nak_in(0);
8000b0be:	fe 68 01 60 	mov	r8,-130720
8000b0c2:	31 09       	mov	r9,16
8000b0c4:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_underflow();
8000b0c6:	f0 1f 00 09 	mcall	8000b0e8 <udd_ctrl_interrupt+0xc4>
		return true;
8000b0ca:	30 18       	mov	r8,1
8000b0cc:	c0 28       	rjmp	8000b0d0 <udd_ctrl_interrupt+0xac>
	}
	return false;
8000b0ce:	30 08       	mov	r8,0
}
8000b0d0:	10 9c       	mov	r12,r8
8000b0d2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b0d6:	00 00       	add	r0,r0
8000b0d8:	80 00       	ld.sh	r0,r0[0x0]
8000b0da:	a9 e0       	*unknown*
8000b0dc:	80 00       	ld.sh	r0,r0[0x0]
8000b0de:	ab 44       	asr	r4,0xa
8000b0e0:	80 00       	ld.sh	r0,r0[0x0]
8000b0e2:	ac e4       	st.b	r6[0x6],r4
8000b0e4:	80 00       	ld.sh	r0,r0[0x0]
8000b0e6:	af 1c       	ld.d	r12,--r7
8000b0e8:	80 00       	ld.sh	r0,r0[0x0]
8000b0ea:	ae d8       	st.b	r7[0x5],r8

8000b0ec <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
8000b0ec:	eb cd 40 80 	pushm	r7,lr
8000b0f0:	1a 97       	mov	r7,sp
8000b0f2:	20 1d       	sub	sp,4
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b0f4:	30 08       	mov	r8,0
8000b0f6:	ef 68 ff ff 	st.b	r7[-1],r8
8000b0fa:	c2 28       	rjmp	8000b13e <udd_ep_job_table_reset+0x52>
		udd_ep_job[i].busy = false;
8000b0fc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b100:	49 5a       	lddpc	r10,8000b154 <udd_ep_job_table_reset+0x68>
8000b102:	12 98       	mov	r8,r9
8000b104:	a3 68       	lsl	r8,0x2
8000b106:	12 08       	add	r8,r9
8000b108:	a3 68       	lsl	r8,0x2
8000b10a:	f4 08 00 09 	add	r9,r10,r8
8000b10e:	72 08       	ld.w	r8,r9[0x0]
8000b110:	30 0a       	mov	r10,0
8000b112:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b116:	93 08       	st.w	r9[0x0],r8
		udd_ep_job[i].stall_requested = false;
8000b118:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b11c:	48 ea       	lddpc	r10,8000b154 <udd_ep_job_table_reset+0x68>
8000b11e:	12 98       	mov	r8,r9
8000b120:	a3 68       	lsl	r8,0x2
8000b122:	12 08       	add	r8,r9
8000b124:	a3 68       	lsl	r8,0x2
8000b126:	f4 08 00 09 	add	r9,r10,r8
8000b12a:	72 08       	ld.w	r8,r9[0x0]
8000b12c:	30 0a       	mov	r10,0
8000b12e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000b132:	93 08       	st.w	r9[0x0],r8
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b134:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b138:	2f f8       	sub	r8,-1
8000b13a:	ef 68 ff ff 	st.b	r7[-1],r8
8000b13e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b142:	30 18       	mov	r8,1
8000b144:	f0 09 18 00 	cp.b	r9,r8
8000b148:	fe 98 ff da 	brls	8000b0fc <udd_ep_job_table_reset+0x10>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].stall_requested = false;
	}
}
8000b14c:	2f fd       	sub	sp,-4
8000b14e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b152:	00 00       	add	r0,r0
8000b154:	00 00       	add	r0,r0
8000b156:	07 78       	ld.ub	r8,--r3

8000b158 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
8000b158:	eb cd 40 80 	pushm	r7,lr
8000b15c:	1a 97       	mov	r7,sp
8000b15e:	20 1d       	sub	sp,4
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b160:	30 08       	mov	r8,0
8000b162:	ef 68 ff ff 	st.b	r7[-1],r8
8000b166:	c1 98       	rjmp	8000b198 <udd_ep_job_table_kill+0x40>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
8000b168:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b16c:	2f f8       	sub	r8,-1
8000b16e:	5c 58       	castu.b	r8
8000b170:	10 9a       	mov	r10,r8
8000b172:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b176:	12 98       	mov	r8,r9
8000b178:	a3 68       	lsl	r8,0x2
8000b17a:	12 08       	add	r8,r9
8000b17c:	a3 68       	lsl	r8,0x2
8000b17e:	10 99       	mov	r9,r8
8000b180:	48 b8       	lddpc	r8,8000b1ac <udd_ep_job_table_kill+0x54>
8000b182:	f2 08 00 08 	add	r8,r9,r8
8000b186:	30 1b       	mov	r11,1
8000b188:	10 9c       	mov	r12,r8
8000b18a:	f0 1f 00 0a 	mcall	8000b1b0 <udd_ep_job_table_kill+0x58>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b18e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b192:	2f f8       	sub	r8,-1
8000b194:	ef 68 ff ff 	st.b	r7[-1],r8
8000b198:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b19c:	30 18       	mov	r8,1
8000b19e:	f0 09 18 00 	cp.b	r9,r8
8000b1a2:	fe 98 ff e3 	brls	8000b168 <udd_ep_job_table_kill+0x10>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
	}
}
8000b1a6:	2f fd       	sub	sp,-4
8000b1a8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b1ac:	00 00       	add	r0,r0
8000b1ae:	07 78       	ld.ub	r8,--r3
8000b1b0:	80 00       	ld.sh	r0,r0[0x0]
8000b1b2:	b2 00       	st.h	r9[0x0],r0

8000b1b4 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
8000b1b4:	eb cd 40 80 	pushm	r7,lr
8000b1b8:	1a 97       	mov	r7,sp
8000b1ba:	20 1d       	sub	sp,4
8000b1bc:	18 98       	mov	r8,r12
8000b1be:	ef 68 ff fc 	st.b	r7[-4],r8
	ep &= USB_EP_ADDR_MASK;
8000b1c2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b1c6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000b1ca:	ef 68 ff fc 	st.b	r7[-4],r8

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
8000b1ce:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000b1d2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b1d6:	f0 c9 00 01 	sub	r9,r8,1
8000b1da:	12 98       	mov	r8,r9
8000b1dc:	a3 68       	lsl	r8,0x2
8000b1de:	12 08       	add	r8,r9
8000b1e0:	a3 68       	lsl	r8,0x2
8000b1e2:	10 99       	mov	r9,r8
8000b1e4:	48 58       	lddpc	r8,8000b1f8 <udd_ep_abort_job+0x44>
8000b1e6:	f2 08 00 08 	add	r8,r9,r8
8000b1ea:	30 1b       	mov	r11,1
8000b1ec:	10 9c       	mov	r12,r8
8000b1ee:	f0 1f 00 04 	mcall	8000b1fc <udd_ep_abort_job+0x48>
}
8000b1f2:	2f fd       	sub	sp,-4
8000b1f4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b1f8:	00 00       	add	r0,r0
8000b1fa:	07 78       	ld.ub	r8,--r3
8000b1fc:	80 00       	ld.sh	r0,r0[0x0]
8000b1fe:	b2 00       	st.h	r9[0x0],r0

8000b200 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
8000b200:	eb cd 40 80 	pushm	r7,lr
8000b204:	1a 97       	mov	r7,sp
8000b206:	20 3d       	sub	sp,12
8000b208:	ef 4c ff fc 	st.w	r7[-4],r12
8000b20c:	16 99       	mov	r9,r11
8000b20e:	14 98       	mov	r8,r10
8000b210:	ef 69 ff f8 	st.b	r7[-8],r9
8000b214:	ef 68 ff f4 	st.b	r7[-12],r8
	if (ptr_job->busy == false) {
8000b218:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b21c:	70 08       	ld.w	r8,r8[0x0]
8000b21e:	e6 18 80 00 	andh	r8,0x8000,COH
8000b222:	c2 b0       	breq	8000b278 <udd_ep_finish_job+0x78>
		return; // No on-going job
	}
	ptr_job->busy = false;
8000b224:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b228:	72 08       	ld.w	r8,r9[0x0]
8000b22a:	30 0a       	mov	r10,0
8000b22c:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b230:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans) {
8000b232:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b236:	70 48       	ld.w	r8,r8[0x10]
8000b238:	58 08       	cp.w	r8,0
8000b23a:	c2 10       	breq	8000b27c <udd_ep_finish_job+0x7c>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
8000b23c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b240:	a3 68       	lsl	r8,0x2
8000b242:	e0 38 ff 00 	sub	r8,130816
8000b246:	70 08       	ld.w	r8,r8[0x0]
8000b248:	e2 18 01 00 	andl	r8,0x100,COH
8000b24c:	c0 90       	breq	8000b25e <udd_ep_finish_job+0x5e>
		ep_num |= USB_EP_DIR_IN;
8000b24e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b252:	ea 18 ff ff 	orh	r8,0xffff
8000b256:	e8 18 ff 80 	orl	r8,0xff80
8000b25a:	ef 68 ff f4 	st.b	r7[-12],r8
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
8000b25e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b262:	70 48       	ld.w	r8,r8[0x10]
8000b264:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b268:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b26c:	72 2b       	ld.w	r11,r9[0x8]
8000b26e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000b272:	12 9c       	mov	r12,r9
8000b274:	5d 18       	icall	r8
8000b276:	c0 48       	rjmp	8000b27e <udd_ep_finish_job+0x7e>


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
		return; // No on-going job
8000b278:	d7 03       	nop
8000b27a:	c0 28       	rjmp	8000b27e <udd_ep_finish_job+0x7e>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
		return; // No callback linked to job
8000b27c:	d7 03       	nop
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
8000b27e:	2f dd       	sub	sp,-12
8000b280:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b284 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
8000b284:	eb cd 40 80 	pushm	r7,lr
8000b288:	1a 97       	mov	r7,sp
8000b28a:	20 5d       	sub	sp,20
8000b28c:	18 98       	mov	r8,r12
8000b28e:	ef 68 ff ec 	st.b	r7[-20],r8
	uint32_t udd_dma_ctrl = 0;
8000b292:	30 08       	mov	r8,0
8000b294:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000b298:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b29c:	f0 c9 00 01 	sub	r9,r8,1
8000b2a0:	12 98       	mov	r8,r9
8000b2a2:	a3 68       	lsl	r8,0x2
8000b2a4:	12 08       	add	r8,r9
8000b2a6:	a3 68       	lsl	r8,0x2
8000b2a8:	10 99       	mov	r9,r8
8000b2aa:	fe f8 02 1e 	ld.w	r8,pc[542]
8000b2ae:	f2 08 00 08 	add	r8,r9,r8
8000b2b2:	ef 48 ff f4 	st.w	r7[-12],r8

	if (!ptr_job->busy) {
8000b2b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2ba:	70 08       	ld.w	r8,r8[0x0]
8000b2bc:	e6 18 80 00 	andh	r8,0x8000,COH
8000b2c0:	e0 80 01 00 	breq	8000b4c0 <udd_ep_trans_done+0x23c>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
8000b2c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2c8:	70 39       	ld.w	r9,r8[0xc]
8000b2ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2ce:	70 28       	ld.w	r8,r8[0x8]
8000b2d0:	10 39       	cp.w	r9,r8
8000b2d2:	e0 80 00 b7 	breq	8000b440 <udd_ep_trans_done+0x1bc>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
8000b2d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2da:	70 29       	ld.w	r9,r8[0x8]
8000b2dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2e0:	70 38       	ld.w	r8,r8[0xc]
8000b2e2:	10 19       	sub	r9,r8
8000b2e4:	ef 49 ff f8 	st.w	r7[-8],r9

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
8000b2e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b2ec:	e0 58 00 00 	cp.w	r8,65536
8000b2f0:	e0 88 00 0a 	brls	8000b304 <udd_ep_trans_done+0x80>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
8000b2f4:	e0 78 00 00 	mov	r8,65536
8000b2f8:	ef 48 ff f8 	st.w	r7[-8],r8

			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
8000b2fc:	30 08       	mov	r8,0
8000b2fe:	ef 48 ff f0 	st.w	r7[-16],r8
8000b302:	c0 68       	rjmp	8000b30e <udd_ep_trans_done+0x8a>
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
8000b304:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b308:	b1 68       	lsl	r8,0x10
8000b30a:	ef 48 ff f0 	st.w	r7[-16],r8
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
8000b30e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b312:	a3 68       	lsl	r8,0x2
8000b314:	e0 38 ff 00 	sub	r8,130816
8000b318:	70 08       	ld.w	r8,r8[0x0]
8000b31a:	e2 18 01 00 	andl	r8,0x100,COH
8000b31e:	c2 10       	breq	8000b360 <udd_ep_trans_done+0xdc>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
8000b320:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b324:	a3 68       	lsl	r8,0x2
8000b326:	e0 38 ff 00 	sub	r8,130816
8000b32a:	70 08       	ld.w	r8,r8[0x0]
8000b32c:	e2 18 00 70 	andl	r8,0x70,COH
8000b330:	a5 88       	lsr	r8,0x4
8000b332:	30 89       	mov	r9,8
8000b334:	f2 08 09 48 	lsl	r8,r9,r8
8000b338:	20 18       	sub	r8,1
8000b33a:	10 99       	mov	r9,r8
8000b33c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b340:	f3 e8 00 08 	and	r8,r9,r8
8000b344:	c3 10       	breq	8000b3a6 <udd_ep_trans_done+0x122>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
8000b346:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b34a:	a3 b8       	sbr	r8,0x3
8000b34c:	ef 48 ff f0 	st.w	r7[-16],r8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
8000b350:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b354:	72 08       	ld.w	r8,r9[0x0]
8000b356:	30 0a       	mov	r10,0
8000b358:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000b35c:	93 08       	st.w	r9[0x0],r8
8000b35e:	c2 58       	rjmp	8000b3a8 <udd_ep_trans_done+0x124>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000b360:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b364:	a3 68       	lsl	r8,0x2
8000b366:	e0 38 ff 00 	sub	r8,130816
8000b36a:	70 08       	ld.w	r8,r8[0x0]
8000b36c:	e2 18 18 00 	andl	r8,0x1800,COH
8000b370:	ab 98       	lsr	r8,0xb
8000b372:	58 18       	cp.w	r8,1
8000b374:	c1 21       	brne	8000b398 <udd_ep_trans_done+0x114>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
8000b376:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b37a:	a3 68       	lsl	r8,0x2
8000b37c:	e0 38 ff 00 	sub	r8,130816
8000b380:	70 08       	ld.w	r8,r8[0x0]
8000b382:	e2 18 00 70 	andl	r8,0x70,COH
8000b386:	a5 88       	lsr	r8,0x4
8000b388:	30 89       	mov	r9,8
8000b38a:	f2 08 09 48 	lsl	r8,r9,r8
8000b38e:	10 99       	mov	r9,r8
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000b390:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b394:	10 39       	cp.w	r9,r8
8000b396:	c0 93       	brcs	8000b3a8 <udd_ep_trans_done+0x124>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
8000b398:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b39c:	e8 18 00 14 	orl	r8,0x14
8000b3a0:	ef 48 ff f0 	st.w	r7[-16],r8
8000b3a4:	c0 28       	rjmp	8000b3a8 <udd_ep_trans_done+0x124>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
8000b3a6:	d7 03       	nop
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
8000b3a8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b3ac:	a5 68       	lsl	r8,0x4
8000b3ae:	e0 38 fd 00 	sub	r8,130304
8000b3b2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b3b6:	72 1a       	ld.w	r10,r9[0x4]
8000b3b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b3bc:	72 39       	ld.w	r9,r9[0xc]
8000b3be:	f4 09 00 09 	add	r9,r10,r9
8000b3c2:	91 19       	st.w	r8[0x4],r9
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
8000b3c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b3c8:	e8 18 00 21 	orl	r8,0x21
8000b3cc:	ef 48 ff f0 	st.w	r7[-16],r8
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
8000b3d0:	f0 1f 00 3f 	mcall	8000b4cc <udd_ep_trans_done+0x248>
8000b3d4:	18 98       	mov	r8,r12
8000b3d6:	ef 48 ff fc 	st.w	r7[-4],r8
		if ( !(udd_endpoint_dma_get_status(ep)
8000b3da:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b3de:	a5 68       	lsl	r8,0x4
8000b3e0:	e0 38 fd 00 	sub	r8,130304
8000b3e4:	70 38       	ld.w	r8,r8[0xc]
8000b3e6:	e2 18 00 10 	andl	r8,0x10,COH
8000b3ea:	c2 11       	brne	8000b42c <udd_ep_trans_done+0x1a8>
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
8000b3ec:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b3f0:	a5 68       	lsl	r8,0x4
8000b3f2:	e0 38 fd 00 	sub	r8,130304
8000b3f6:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000b3fa:	91 29       	st.w	r8[0x8],r9
			ptr_job->nb_trans += next_trans;
8000b3fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b400:	70 39       	ld.w	r9,r8[0xc]
8000b402:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b406:	10 09       	add	r9,r8
8000b408:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b40c:	91 39       	st.w	r8[0xc],r9
			udd_enable_endpoint_dma_interrupt(ep);
8000b40e:	fe 68 00 00 	mov	r8,-131072
8000b412:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b416:	20 19       	sub	r9,1
8000b418:	fc 1a 02 00 	movh	r10,0x200
8000b41c:	f4 09 09 49 	lsl	r9,r10,r9
8000b420:	91 69       	st.w	r8[0x18],r9
			cpu_irq_restore(flags);
8000b422:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b426:	f0 1f 00 2b 	mcall	8000b4d0 <udd_ep_trans_done+0x24c>
			return;
8000b42a:	c4 c8       	rjmp	8000b4c2 <udd_ep_trans_done+0x23e>
		}
		cpu_irq_restore(flags);
8000b42c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b430:	f0 1f 00 28 	mcall	8000b4d0 <udd_ep_trans_done+0x24c>

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
8000b434:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b438:	70 39       	ld.w	r9,r8[0xc]
8000b43a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b43e:	91 29       	st.w	r8[0x8],r9
	}
	if (Is_udd_endpoint_in(ep)) {
8000b440:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b444:	a3 68       	lsl	r8,0x2
8000b446:	e0 38 ff 00 	sub	r8,130816
8000b44a:	70 08       	ld.w	r8,r8[0x0]
8000b44c:	e2 18 01 00 	andl	r8,0x100,COH
8000b450:	c2 f0       	breq	8000b4ae <udd_ep_trans_done+0x22a>
		if (ptr_job->b_shortpacket) {
8000b452:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b456:	70 08       	ld.w	r8,r8[0x0]
8000b458:	e6 18 40 00 	andh	r8,0x4000,COH
8000b45c:	c2 90       	breq	8000b4ae <udd_ep_trans_done+0x22a>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
8000b45e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b462:	a3 68       	lsl	r8,0x2
8000b464:	e0 38 fe a0 	sub	r8,130720
8000b468:	30 19       	mov	r9,1
8000b46a:	91 09       	st.w	r8[0x0],r9
			if (Is_udd_write_enabled(ep)) {
8000b46c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b470:	a3 68       	lsl	r8,0x2
8000b472:	e0 38 fe d0 	sub	r8,130768
8000b476:	70 08       	ld.w	r8,r8[0x0]
8000b478:	e6 18 00 01 	andh	r8,0x1,COH
8000b47c:	c0 80       	breq	8000b48c <udd_ep_trans_done+0x208>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
8000b47e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b482:	a3 68       	lsl	r8,0x2
8000b484:	e0 38 fe 70 	sub	r8,130672
8000b488:	30 19       	mov	r9,1
8000b48a:	91 09       	st.w	r8[0x0],r9
			}
			udd_enable_in_send_interrupt(ep);
8000b48c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b490:	a3 68       	lsl	r8,0x2
8000b492:	e0 38 fe 10 	sub	r8,130576
8000b496:	30 19       	mov	r9,1
8000b498:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(ep);
8000b49a:	fe 68 00 00 	mov	r8,-131072
8000b49e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b4a2:	e0 6a 10 00 	mov	r10,4096
8000b4a6:	f4 09 09 49 	lsl	r9,r10,r9
8000b4aa:	91 69       	st.w	r8[0x18],r9
			return;
8000b4ac:	c0 b8       	rjmp	8000b4c2 <udd_ep_trans_done+0x23e>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
8000b4ae:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b4b2:	10 9a       	mov	r10,r8
8000b4b4:	30 0b       	mov	r11,0
8000b4b6:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b4ba:	f0 1f 00 07 	mcall	8000b4d4 <udd_ep_trans_done+0x250>
8000b4be:	c0 28       	rjmp	8000b4c2 <udd_ep_trans_done+0x23e>

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
8000b4c0:	d7 03       	nop
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
8000b4c2:	2f bd       	sub	sp,-20
8000b4c4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b4c8:	00 00       	add	r0,r0
8000b4ca:	07 78       	ld.ub	r8,--r3
8000b4cc:	80 00       	ld.sh	r0,r0[0x0]
8000b4ce:	98 10       	ld.sh	r0,r12[0x2]
8000b4d0:	80 00       	ld.sh	r0,r0[0x0]
8000b4d2:	98 2e       	ld.sh	lr,r12[0x4]
8000b4d4:	80 00       	ld.sh	r0,r0[0x0]
8000b4d6:	b2 00       	st.h	r9[0x0],r0

8000b4d8 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
8000b4d8:	eb cd 40 80 	pushm	r7,lr
8000b4dc:	1a 97       	mov	r7,sp
8000b4de:	20 3d       	sub	sp,12
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000b4e0:	30 18       	mov	r8,1
8000b4e2:	ef 68 ff f7 	st.b	r7[-9],r8
8000b4e6:	cf 18       	rjmp	8000b6c8 <udd_ep_interrupt+0x1f0>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
8000b4e8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b4ec:	f0 c9 00 01 	sub	r9,r8,1
8000b4f0:	12 98       	mov	r8,r9
8000b4f2:	a3 68       	lsl	r8,0x2
8000b4f4:	12 08       	add	r8,r9
8000b4f6:	a3 68       	lsl	r8,0x2
8000b4f8:	10 99       	mov	r9,r8
8000b4fa:	4f a8       	lddpc	r8,8000b6e0 <udd_ep_interrupt+0x208>
8000b4fc:	f2 08 00 08 	add	r8,r9,r8
8000b500:	ef 48 ff f8 	st.w	r7[-8],r8

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000b504:	fe 68 00 00 	mov	r8,-131072
8000b508:	70 49       	ld.w	r9,r8[0x10]
8000b50a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b50e:	20 18       	sub	r8,1
8000b510:	fc 1a 02 00 	movh	r10,0x200
8000b514:	f4 08 09 48 	lsl	r8,r10,r8
8000b518:	f3 e8 00 08 	and	r8,r9,r8
8000b51c:	c4 70       	breq	8000b5aa <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
8000b51e:	fe 68 00 00 	mov	r8,-131072
8000b522:	70 19       	ld.w	r9,r8[0x4]
8000b524:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b528:	20 18       	sub	r8,1
8000b52a:	fc 1a 02 00 	movh	r10,0x200
8000b52e:	f4 08 09 48 	lsl	r8,r10,r8
8000b532:	f3 e8 00 08 	and	r8,r9,r8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000b536:	c3 a0       	breq	8000b5aa <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
8000b538:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b53c:	a5 68       	lsl	r8,0x4
8000b53e:	e0 38 fd 00 	sub	r8,130304
8000b542:	70 38       	ld.w	r8,r8[0xc]
8000b544:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b548:	5c 58       	castu.b	r8
8000b54a:	c0 30       	breq	8000b550 <udd_ep_interrupt+0x78>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
8000b54c:	30 18       	mov	r8,1
8000b54e:	cc 58       	rjmp	8000b6d8 <udd_ep_interrupt+0x200>
			}
			udd_disable_endpoint_dma_interrupt(ep);
8000b550:	fe 68 00 00 	mov	r8,-131072
8000b554:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b558:	20 19       	sub	r9,1
8000b55a:	fc 1a 02 00 	movh	r10,0x200
8000b55e:	f4 09 09 49 	lsl	r9,r10,r9
8000b562:	91 59       	st.w	r8[0x14],r9
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
8000b564:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b568:	a5 68       	lsl	r8,0x4
8000b56a:	e0 38 fd 00 	sub	r8,130304
8000b56e:	70 38       	ld.w	r8,r8[0xc]
8000b570:	b1 88       	lsr	r8,0x10
8000b572:	ef 48 ff fc 	st.w	r7[-4],r8
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
8000b576:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b57a:	58 08       	cp.w	r8,0
8000b57c:	c1 00       	breq	8000b59c <udd_ep_interrupt+0xc4>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
8000b57e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b582:	70 39       	ld.w	r9,r8[0xc]
8000b584:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b588:	10 19       	sub	r9,r8
8000b58a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b58e:	91 39       	st.w	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
8000b590:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b594:	70 39       	ld.w	r9,r8[0xc]
8000b596:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b59a:	91 29       	st.w	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
8000b59c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b5a0:	10 9c       	mov	r12,r8
8000b5a2:	f0 1f 00 51 	mcall	8000b6e4 <udd_ep_interrupt+0x20c>
			return true;
8000b5a6:	30 18       	mov	r8,1
8000b5a8:	c9 88       	rjmp	8000b6d8 <udd_ep_interrupt+0x200>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
8000b5aa:	fe 68 00 00 	mov	r8,-131072
8000b5ae:	70 49       	ld.w	r9,r8[0x10]
8000b5b0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b5b4:	e0 6a 10 00 	mov	r10,4096
8000b5b8:	f4 08 09 48 	lsl	r8,r10,r8
8000b5bc:	f3 e8 00 08 	and	r8,r9,r8
8000b5c0:	c7 f0       	breq	8000b6be <udd_ep_interrupt+0x1e6>
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
8000b5c2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b5c6:	a3 68       	lsl	r8,0x2
8000b5c8:	e0 38 fe 40 	sub	r8,130624
8000b5cc:	70 08       	ld.w	r8,r8[0x0]
8000b5ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b5d2:	5c 58       	castu.b	r8
8000b5d4:	c2 b0       	breq	8000b62a <udd_ep_interrupt+0x152>
8000b5d6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b5da:	a3 68       	lsl	r8,0x2
8000b5dc:	e0 38 fe d0 	sub	r8,130768
8000b5e0:	70 08       	ld.w	r8,r8[0x0]
8000b5e2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b5e6:	5c 58       	castu.b	r8
8000b5e8:	c2 10       	breq	8000b62a <udd_ep_interrupt+0x152>
				udd_disable_in_send_interrupt(ep);
8000b5ea:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b5ee:	a3 68       	lsl	r8,0x2
8000b5f0:	e0 38 fd e0 	sub	r8,130528
8000b5f4:	30 19       	mov	r9,1
8000b5f6:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000b5f8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b5fc:	a3 68       	lsl	r8,0x2
8000b5fe:	e0 38 fe a0 	sub	r8,130720
8000b602:	30 19       	mov	r9,1
8000b604:	91 09       	st.w	r8[0x0],r9
				udd_ack_fifocon(ep);
8000b606:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b60a:	a3 68       	lsl	r8,0x2
8000b60c:	e0 38 fd e0 	sub	r8,130528
8000b610:	e0 69 40 00 	mov	r9,16384
8000b614:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false, ep);
8000b616:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b61a:	10 9a       	mov	r10,r8
8000b61c:	30 0b       	mov	r11,0
8000b61e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b622:	f0 1f 00 32 	mcall	8000b6e8 <udd_ep_interrupt+0x210>
				return true;
8000b626:	30 18       	mov	r8,1
8000b628:	c5 88       	rjmp	8000b6d8 <udd_ep_interrupt+0x200>
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
8000b62a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b62e:	a3 68       	lsl	r8,0x2
8000b630:	e0 38 fe 40 	sub	r8,130624
8000b634:	70 08       	ld.w	r8,r8[0x0]
8000b636:	e2 18 10 00 	andl	r8,0x1000,COH
8000b63a:	c4 20       	breq	8000b6be <udd_ep_interrupt+0x1e6>
8000b63c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b640:	a3 68       	lsl	r8,0x2
8000b642:	e0 38 fe d0 	sub	r8,130768
8000b646:	70 08       	ld.w	r8,r8[0x0]
8000b648:	e2 18 30 00 	andl	r8,0x3000,COH
8000b64c:	ad 88       	lsr	r8,0xc
8000b64e:	c3 81       	brne	8000b6be <udd_ep_interrupt+0x1e6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
8000b650:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b654:	a3 68       	lsl	r8,0x2
8000b656:	e0 38 fd e0 	sub	r8,130528
8000b65a:	e0 69 10 00 	mov	r9,4096
8000b65e:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
8000b660:	fe 68 00 00 	mov	r8,-131072
8000b664:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b668:	e0 6a 10 00 	mov	r10,4096
8000b66c:	f4 09 09 49 	lsl	r9,r10,r9
8000b670:	91 59       	st.w	r8[0x14],r9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
8000b672:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b676:	72 08       	ld.w	r8,r9[0x0]
8000b678:	30 0a       	mov	r10,0
8000b67a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000b67e:	93 08       	st.w	r9[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
8000b680:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b684:	a3 68       	lsl	r8,0x2
8000b686:	e0 38 ff 00 	sub	r8,130816
8000b68a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b68e:	a3 69       	lsl	r9,0x2
8000b690:	e0 39 ff 00 	sub	r9,130816
8000b694:	72 09       	ld.w	r9,r9[0x0]
8000b696:	a9 d9       	cbr	r9,0x9
8000b698:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
8000b69a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b69e:	a3 68       	lsl	r8,0x2
8000b6a0:	e0 38 fe 10 	sub	r8,130576
8000b6a4:	e8 69 00 00 	mov	r9,524288
8000b6a8:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
8000b6aa:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b6ae:	a3 68       	lsl	r8,0x2
8000b6b0:	e0 38 fe 10 	sub	r8,130576
8000b6b4:	e4 69 00 00 	mov	r9,262144
8000b6b8:	91 09       	st.w	r8[0x0],r9
				return true;
8000b6ba:	30 18       	mov	r8,1
8000b6bc:	c0 e8       	rjmp	8000b6d8 <udd_ep_interrupt+0x200>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000b6be:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b6c2:	2f f8       	sub	r8,-1
8000b6c4:	ef 68 ff f7 	st.b	r7[-9],r8
8000b6c8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b6cc:	30 28       	mov	r8,2
8000b6ce:	f0 09 18 00 	cp.b	r9,r8
8000b6d2:	fe 98 ff 0b 	brls	8000b4e8 <udd_ep_interrupt+0x10>
				udd_reset_data_toggle(ep);
				return true;
			}
		}
	}
	return false;
8000b6d6:	30 08       	mov	r8,0
}
8000b6d8:	10 9c       	mov	r12,r8
8000b6da:	2f dd       	sub	sp,-12
8000b6dc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b6e0:	00 00       	add	r0,r0
8000b6e2:	07 78       	ld.ub	r8,--r3
8000b6e4:	80 00       	ld.sh	r0,r0[0x0]
8000b6e6:	b2 84       	st.b	r9[0x0],r4
8000b6e8:	80 00       	ld.sh	r0,r0[0x0]
8000b6ea:	b2 00       	st.h	r9[0x0],r0

8000b6ec <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000b6ec:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000b6f0:	fe c0 ce f0 	sub	r0,pc,-12560

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
8000b6f4:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000b6f8:	d5 53       	csrf	0x15
  cp      r0, r1
8000b6fa:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
8000b6fc:	e0 61 02 48 	mov	r1,584
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
8000b700:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000b702:	c0 72       	brcc	8000b710 <idata_load_loop_end>
  cp      r0, r1
8000b704:	fe c2 c8 44 	sub	r2,pc,-14268

8000b708 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000b708:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
8000b70a:	a1 24       	st.d	r0++,r4
  cp      r0, r1
8000b70c:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000b70e:	cf d3       	brcs	8000b708 <idata_load_loop>

8000b710 <idata_load_loop_end>:
  mov     r2, 0
8000b710:	e0 60 02 48 	mov	r0,584
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000b714:	e0 61 0f e8 	mov	r1,4072
  cp      r0, r1
  brlo    udata_clear_loop
8000b718:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000b71a:	c0 62       	brcc	8000b726 <udata_clear_loop_end>
8000b71c:	30 02       	mov	r2,0
8000b71e:	30 03       	mov	r3,0

8000b720 <udata_clear_loop>:
8000b720:	a1 22       	st.d	r0++,r2
8000b722:	02 30       	cp.w	r0,r1
8000b724:	cf e3       	brcs	8000b720 <udata_clear_loop>

8000b726 <udata_clear_loop_end>:
8000b726:	fe cf d6 fe 	sub	pc,pc,-10498
8000b72a:	d7 03       	nop

8000b72c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8000b72c:	eb cd 40 80 	pushm	r7,lr
8000b730:	1a 97       	mov	r7,sp
8000b732:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000b734:	e1 b8 00 00 	mfsr	r8,0x0
8000b738:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8000b73c:	d3 03       	ssrf	0x10

	return flags;
8000b73e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000b742:	10 9c       	mov	r12,r8
8000b744:	2f fd       	sub	sp,-4
8000b746:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b74a <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8000b74a:	eb cd 40 80 	pushm	r7,lr
8000b74e:	1a 97       	mov	r7,sp
8000b750:	20 1d       	sub	sp,4
8000b752:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000b756:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b75a:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8000b75e:	2f fd       	sub	sp,-4
8000b760:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b764 <osc_enable>:
#include <stdbool.h>
#include <stdint.h>
#include <avr32/io.h>

static inline void osc_enable(uint8_t id)
{
8000b764:	eb cd 40 80 	pushm	r7,lr
8000b768:	1a 97       	mov	r7,sp
8000b76a:	20 3d       	sub	sp,12
8000b76c:	18 98       	mov	r8,r12
8000b76e:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();
8000b772:	f0 1f 00 2b 	mcall	8000b81c <osc_enable+0xb8>
8000b776:	18 98       	mov	r8,r12
8000b778:	ef 48 ff f8 	st.w	r7[-8],r8

	switch (id) {
8000b77c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b780:	58 18       	cp.w	r8,1
8000b782:	c1 c0       	breq	8000b7ba <osc_enable+0x56>
8000b784:	58 28       	cp.w	r8,2
8000b786:	c3 10       	breq	8000b7e8 <osc_enable+0x84>
8000b788:	58 08       	cp.w	r8,0
8000b78a:	c4 21       	brne	8000b80e <osc_enable+0xaa>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
8000b78c:	e0 68 03 00 	mov	r8,768
8000b790:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
8000b794:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b798:	e8 18 00 07 	orl	r8,0x7
8000b79c:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl0 = oscctrl;
8000b7a0:	fe 78 0c 00 	mov	r8,-62464
8000b7a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b7a8:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
8000b7aa:	fe 78 0c 00 	mov	r8,-62464
8000b7ae:	fe 79 0c 00 	mov	r9,-62464
8000b7b2:	72 09       	ld.w	r9,r9[0x0]
8000b7b4:	a3 a9       	sbr	r9,0x2
8000b7b6:	91 09       	st.w	r8[0x0],r9
		break;
8000b7b8:	c2 b8       	rjmp	8000b80e <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		oscctrl = OSC1_STARTUP_VALUE <<
8000b7ba:	e0 68 03 00 	mov	r8,768
8000b7be:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL1_STARTUP_OFFSET;
		oscctrl |= OSC1_MODE_VALUE << AVR32_PM_OSCCTRL1_MODE_OFFSET;
8000b7c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b7c6:	e8 18 00 07 	orl	r8,0x7
8000b7ca:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl1 = oscctrl;
8000b7ce:	fe 78 0c 00 	mov	r8,-62464
8000b7d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b7d6:	91 b9       	st.w	r8[0x2c],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC1EN;
8000b7d8:	fe 78 0c 00 	mov	r8,-62464
8000b7dc:	fe 79 0c 00 	mov	r9,-62464
8000b7e0:	72 09       	ld.w	r9,r9[0x0]
8000b7e2:	a3 b9       	sbr	r9,0x3
8000b7e4:	91 09       	st.w	r8[0x0],r9
		break;
8000b7e6:	c1 48       	rjmp	8000b80e <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
8000b7e8:	e2 68 00 00 	mov	r8,131072
8000b7ec:	ef 48 ff fc 	st.w	r7[-4],r8
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
8000b7f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b7f4:	a9 a8       	sbr	r8,0x8
8000b7f6:	ef 48 ff fc 	st.w	r7[-4],r8
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
8000b7fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b7fe:	a1 a8       	sbr	r8,0x0
8000b800:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl32 = oscctrl;
8000b804:	fe 78 0c 00 	mov	r8,-62464
8000b808:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b80c:	91 c9       	st.w	r8[0x30],r9
	default:
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
8000b80e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b812:	f0 1f 00 04 	mcall	8000b820 <osc_enable+0xbc>
}
8000b816:	2f dd       	sub	sp,-12
8000b818:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b81c:	80 00       	ld.sh	r0,r0[0x0]
8000b81e:	b7 2c       	st.d	r11++,r12
8000b820:	80 00       	ld.sh	r0,r0[0x0]
8000b822:	b7 4a       	asr	r10,0x16

8000b824 <osc_is_ready>:
	}
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
8000b824:	eb cd 40 80 	pushm	r7,lr
8000b828:	1a 97       	mov	r7,sp
8000b82a:	20 1d       	sub	sp,4
8000b82c:	18 98       	mov	r8,r12
8000b82e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000b832:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b836:	58 18       	cp.w	r8,1
8000b838:	c0 d0       	breq	8000b852 <osc_is_ready+0x2e>
8000b83a:	58 28       	cp.w	r8,2
8000b83c:	c1 30       	breq	8000b862 <osc_is_ready+0x3e>
8000b83e:	58 08       	cp.w	r8,0
8000b840:	c1 91       	brne	8000b872 <osc_is_ready+0x4e>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
8000b842:	fe 78 0c 00 	mov	r8,-62464
8000b846:	71 58       	ld.w	r8,r8[0x54]
8000b848:	e2 18 00 80 	andl	r8,0x80,COH
8000b84c:	5f 18       	srne	r8
8000b84e:	5c 58       	castu.b	r8
8000b850:	c1 28       	rjmp	8000b874 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC1RDY));
8000b852:	fe 78 0c 00 	mov	r8,-62464
8000b856:	71 58       	ld.w	r8,r8[0x54]
8000b858:	e2 18 01 00 	andl	r8,0x100,COH
8000b85c:	5f 18       	srne	r8
8000b85e:	5c 58       	castu.b	r8
8000b860:	c0 a8       	rjmp	8000b874 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC32RDY));
8000b862:	fe 78 0c 00 	mov	r8,-62464
8000b866:	71 58       	ld.w	r8,r8[0x54]
8000b868:	e2 18 02 00 	andl	r8,0x200,COH
8000b86c:	5f 18       	srne	r8
8000b86e:	5c 58       	castu.b	r8
8000b870:	c0 28       	rjmp	8000b874 <osc_is_ready+0x50>
#endif

	default:
		/* unhandled_case(id); */
		return false;
8000b872:	30 08       	mov	r8,0
	}
}
8000b874:	10 9c       	mov	r12,r8
8000b876:	2f fd       	sub	sp,-4
8000b878:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b87c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
8000b87c:	eb cd 40 80 	pushm	r7,lr
8000b880:	1a 97       	mov	r7,sp
8000b882:	20 1d       	sub	sp,4
8000b884:	18 98       	mov	r8,r12
8000b886:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000b88a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b88e:	58 18       	cp.w	r8,1
8000b890:	c0 a0       	breq	8000b8a4 <osc_get_rate+0x28>
8000b892:	58 28       	cp.w	r8,2
8000b894:	c0 d0       	breq	8000b8ae <osc_get_rate+0x32>
8000b896:	58 08       	cp.w	r8,0
8000b898:	c0 e1       	brne	8000b8b4 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000b89a:	e0 68 1b 00 	mov	r8,6912
8000b89e:	ea 18 00 b7 	orh	r8,0xb7
8000b8a2:	c0 a8       	rjmp	8000b8b6 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000b8a4:	e0 68 44 00 	mov	r8,17408
8000b8a8:	ea 18 00 ac 	orh	r8,0xac
8000b8ac:	c0 58       	rjmp	8000b8b6 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000b8ae:	e0 68 80 00 	mov	r8,32768
8000b8b2:	c0 28       	rjmp	8000b8b6 <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000b8b4:	30 08       	mov	r8,0
	}
}
8000b8b6:	10 9c       	mov	r12,r8
8000b8b8:	2f fd       	sub	sp,-4
8000b8ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b8be:	d7 03       	nop

8000b8c0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8000b8c0:	eb cd 40 80 	pushm	r7,lr
8000b8c4:	1a 97       	mov	r7,sp
8000b8c6:	20 1d       	sub	sp,4
8000b8c8:	18 98       	mov	r8,r12
8000b8ca:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8000b8ce:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b8d2:	10 9c       	mov	r12,r8
8000b8d4:	f0 1f 00 05 	mcall	8000b8e8 <osc_wait_ready+0x28>
8000b8d8:	18 98       	mov	r8,r12
8000b8da:	ec 18 00 01 	eorl	r8,0x1
8000b8de:	5c 58       	castu.b	r8
8000b8e0:	cf 71       	brne	8000b8ce <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
8000b8e2:	2f fd       	sub	sp,-4
8000b8e4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b8e8:	80 00       	ld.sh	r0,r0[0x0]
8000b8ea:	b8 24       	st.h	r12[0x4],r4

8000b8ec <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8000b8ec:	eb cd 40 80 	pushm	r7,lr
8000b8f0:	1a 97       	mov	r7,sp
8000b8f2:	20 2d       	sub	sp,8
8000b8f4:	ef 4c ff fc 	st.w	r7[-4],r12
8000b8f8:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
8000b8fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b900:	70 09       	ld.w	r9,r8[0x0]
8000b902:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b906:	2f e8       	sub	r8,-2
8000b908:	30 1a       	mov	r10,1
8000b90a:	f4 08 09 48 	lsl	r8,r10,r8
8000b90e:	10 49       	or	r9,r8
8000b910:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b914:	91 09       	st.w	r8[0x0],r9
}
8000b916:	2f ed       	sub	sp,-8
8000b918:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b91c <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8000b91c:	eb cd 40 80 	pushm	r7,lr
8000b920:	1a 97       	mov	r7,sp
8000b922:	20 5d       	sub	sp,20
8000b924:	ef 4c ff f8 	st.w	r7[-8],r12
8000b928:	ef 4b ff f4 	st.w	r7[-12],r11
8000b92c:	ef 4a ff f0 	st.w	r7[-16],r10
8000b930:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8000b934:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b938:	5c 58       	castu.b	r8
8000b93a:	10 9c       	mov	r12,r8
8000b93c:	f0 1f 00 2e 	mcall	8000b9f4 <pll_config_init+0xd8>
8000b940:	18 99       	mov	r9,r12
8000b942:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b946:	f2 08 02 48 	mul	r8,r9,r8
8000b94a:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8000b94e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b952:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000b956:	f0 09 0d 08 	divu	r8,r8,r9
8000b95a:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8000b95e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b962:	30 09       	mov	r9,0
8000b964:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8000b966:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b96a:	e0 69 b3 ff 	mov	r9,46079
8000b96e:	ea 19 04 c4 	orh	r9,0x4c4
8000b972:	12 38       	cp.w	r8,r9
8000b974:	e0 8b 00 16 	brhi	8000b9a0 <pll_config_init+0x84>
8000b978:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b97c:	58 88       	cp.w	r8,8
8000b97e:	e0 8b 00 11 	brhi	8000b9a0 <pll_config_init+0x84>
		mul *= 2;
8000b982:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b986:	a1 78       	lsl	r8,0x1
8000b988:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8000b98c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b990:	a1 78       	lsl	r8,0x1
8000b992:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8000b996:	30 1b       	mov	r11,1
8000b998:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b99c:	f0 1f 00 17 	mcall	8000b9f8 <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8000b9a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b9a4:	e0 69 fe 7f 	mov	r9,65151
8000b9a8:	ea 19 0a 21 	orh	r9,0xa21
8000b9ac:	12 38       	cp.w	r8,r9
8000b9ae:	e0 8b 00 07 	brhi	8000b9bc <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8000b9b2:	30 0b       	mov	r11,0
8000b9b4:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b9b8:	f0 1f 00 10 	mcall	8000b9f8 <pll_config_init+0xdc>

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000b9bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b9c0:	70 09       	ld.w	r9,r8[0x0]
8000b9c2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b9c6:	20 18       	sub	r8,1
8000b9c8:	f0 0a 15 10 	lsl	r10,r8,0x10
			| (div << AVR32_PM_PLL0_PLLDIV)
8000b9cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b9d0:	a9 68       	lsl	r8,0x8
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
8000b9d2:	10 4a       	or	r10,r8
			| (src << AVR32_PM_PLL0_PLLOSC);
8000b9d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b9d8:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000b9da:	f5 e8 10 08 	or	r8,r10,r8
8000b9de:	f3 e8 10 08 	or	r8,r9,r8
8000b9e2:	10 99       	mov	r9,r8
8000b9e4:	ea 19 3f 00 	orh	r9,0x3f00
8000b9e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b9ec:	91 09       	st.w	r8[0x0],r9
			| (div << AVR32_PM_PLL0_PLLDIV)
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
			| (src << AVR32_PM_PLL0_PLLOSC);
}
8000b9ee:	2f bd       	sub	sp,-20
8000b9f0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b9f4:	80 00       	ld.sh	r0,r0[0x0]
8000b9f6:	b8 7c       	st.h	r12[0xe],r12
8000b9f8:	80 00       	ld.sh	r0,r0[0x0]
8000b9fa:	b8 ec       	st.b	r12[0x6],r12

8000b9fc <pll_enable>:
	AVR32_PM.pll[pll_id] = cfg->ctrl;
}

static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
8000b9fc:	eb cd 40 80 	pushm	r7,lr
8000ba00:	1a 97       	mov	r7,sp
8000ba02:	20 2d       	sub	sp,8
8000ba04:	ef 4c ff fc 	st.w	r7[-4],r12
8000ba08:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
8000ba0c:	fe 78 0c 00 	mov	r8,-62464
8000ba10:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ba14:	ee fa ff fc 	ld.w	r10,r7[-4]
8000ba18:	74 0a       	ld.w	r10,r10[0x0]
8000ba1a:	a1 aa       	sbr	r10,0x0
8000ba1c:	2f 89       	sub	r9,-8
8000ba1e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000ba22:	2f ed       	sub	sp,-8
8000ba24:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ba28 <pll_is_locked>:

	AVR32_PM.pll[pll_id] = 0;
}

static inline bool pll_is_locked(unsigned int pll_id)
{
8000ba28:	eb cd 40 80 	pushm	r7,lr
8000ba2c:	1a 97       	mov	r7,sp
8000ba2e:	20 1d       	sub	sp,4
8000ba30:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
8000ba34:	fe 78 0c 00 	mov	r8,-62464
8000ba38:	71 59       	ld.w	r9,r8[0x54]
8000ba3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba3e:	30 1a       	mov	r10,1
8000ba40:	f4 08 09 48 	lsl	r8,r10,r8
8000ba44:	f3 e8 00 08 	and	r8,r9,r8
8000ba48:	5f 18       	srne	r8
8000ba4a:	5c 58       	castu.b	r8
}
8000ba4c:	10 9c       	mov	r12,r8
8000ba4e:	2f fd       	sub	sp,-4
8000ba50:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ba54 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
8000ba54:	eb cd 40 80 	pushm	r7,lr
8000ba58:	1a 97       	mov	r7,sp
8000ba5a:	20 1d       	sub	sp,4
8000ba5c:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000ba60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba64:	58 08       	cp.w	r8,0
8000ba66:	c0 40       	breq	8000ba6e <pll_enable_source+0x1a>
8000ba68:	58 18       	cp.w	r8,1
8000ba6a:	c1 10       	breq	8000ba8c <pll_enable_source+0x38>
8000ba6c:	c2 08       	rjmp	8000baac <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000ba6e:	30 0c       	mov	r12,0
8000ba70:	f0 1f 00 11 	mcall	8000bab4 <pll_enable_source+0x60>
8000ba74:	18 98       	mov	r8,r12
8000ba76:	ec 18 00 01 	eorl	r8,0x1
8000ba7a:	5c 58       	castu.b	r8
8000ba7c:	c1 70       	breq	8000baaa <pll_enable_source+0x56>
			osc_enable(OSC_ID_OSC0);
8000ba7e:	30 0c       	mov	r12,0
8000ba80:	f0 1f 00 0e 	mcall	8000bab8 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC0);
8000ba84:	30 0c       	mov	r12,0
8000ba86:	f0 1f 00 0e 	mcall	8000babc <pll_enable_source+0x68>
		}
		break;
8000ba8a:	c1 18       	rjmp	8000baac <pll_enable_source+0x58>

	case PLL_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000ba8c:	30 1c       	mov	r12,1
8000ba8e:	f0 1f 00 0a 	mcall	8000bab4 <pll_enable_source+0x60>
8000ba92:	18 98       	mov	r8,r12
8000ba94:	ec 18 00 01 	eorl	r8,0x1
8000ba98:	5c 58       	castu.b	r8
8000ba9a:	c0 90       	breq	8000baac <pll_enable_source+0x58>
			osc_enable(OSC_ID_OSC1);
8000ba9c:	30 1c       	mov	r12,1
8000ba9e:	f0 1f 00 07 	mcall	8000bab8 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC1);
8000baa2:	30 1c       	mov	r12,1
8000baa4:	f0 1f 00 06 	mcall	8000babc <pll_enable_source+0x68>
8000baa8:	c0 28       	rjmp	8000baac <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000baaa:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000baac:	2f fd       	sub	sp,-4
8000baae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bab2:	00 00       	add	r0,r0
8000bab4:	80 00       	ld.sh	r0,r0[0x0]
8000bab6:	b8 24       	st.h	r12[0x4],r4
8000bab8:	80 00       	ld.sh	r0,r0[0x0]
8000baba:	b7 64       	lsl	r4,0x16
8000babc:	80 00       	ld.sh	r0,r0[0x0]
8000babe:	b8 c0       	st.b	r12[0x4],r0

8000bac0 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
8000bac0:	eb cd 40 80 	pushm	r7,lr
8000bac4:	1a 97       	mov	r7,sp
8000bac6:	20 2d       	sub	sp,8
8000bac8:	ef 4c ff f8 	st.w	r7[-8],r12
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
8000bacc:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bad0:	f0 1f 00 15 	mcall	8000bb24 <pll_enable_config_defaults+0x64>
8000bad4:	18 98       	mov	r8,r12
8000bad6:	58 08       	cp.w	r8,0
8000bad8:	c2 11       	brne	8000bb1a <pll_enable_config_defaults+0x5a>
		return; // Pll already running
	}
	switch (pll_id) {
8000bada:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bade:	58 08       	cp.w	r8,0
8000bae0:	c0 c1       	brne	8000baf8 <pll_enable_config_defaults+0x38>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
8000bae2:	30 0c       	mov	r12,0
8000bae4:	f0 1f 00 11 	mcall	8000bb28 <pll_enable_config_defaults+0x68>
		pll_config_init(&pllcfg,
8000bae8:	ee c8 00 04 	sub	r8,r7,4
8000baec:	30 b9       	mov	r9,11
8000baee:	30 2a       	mov	r10,2
8000baf0:	30 0b       	mov	r11,0
8000baf2:	10 9c       	mov	r12,r8
8000baf4:	f0 1f 00 0e 	mcall	8000bb2c <pll_enable_config_defaults+0x6c>
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
8000baf8:	ee c8 00 04 	sub	r8,r7,4
8000bafc:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bb00:	10 9c       	mov	r12,r8
8000bb02:	f0 1f 00 0c 	mcall	8000bb30 <pll_enable_config_defaults+0x70>
	while (!pll_is_locked(pll_id));
8000bb06:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bb0a:	f0 1f 00 07 	mcall	8000bb24 <pll_enable_config_defaults+0x64>
8000bb0e:	18 98       	mov	r8,r12
8000bb10:	ec 18 00 01 	eorl	r8,0x1
8000bb14:	5c 58       	castu.b	r8
8000bb16:	cf 81       	brne	8000bb06 <pll_enable_config_defaults+0x46>
8000bb18:	c0 28       	rjmp	8000bb1c <pll_enable_config_defaults+0x5c>
static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
		return; // Pll already running
8000bb1a:	d7 03       	nop
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
}
8000bb1c:	2f ed       	sub	sp,-8
8000bb1e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb22:	00 00       	add	r0,r0
8000bb24:	80 00       	ld.sh	r0,r0[0x0]
8000bb26:	ba 28       	st.h	sp[0x4],r8
8000bb28:	80 00       	ld.sh	r0,r0[0x0]
8000bb2a:	ba 54       	st.h	sp[0xa],r4
8000bb2c:	80 00       	ld.sh	r0,r0[0x0]
8000bb2e:	b9 1c       	ld.d	r12,--r12
8000bb30:	80 00       	ld.sh	r0,r0[0x0]
8000bb32:	b9 fc       	*unknown*

8000bb34 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8000bb34:	eb cd 40 80 	pushm	r7,lr
8000bb38:	1a 97       	mov	r7,sp
8000bb3a:	20 2d       	sub	sp,8
8000bb3c:	ef 4c ff fc 	st.w	r7[-4],r12
8000bb40:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8000bb44:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb48:	30 09       	mov	r9,0
8000bb4a:	91 09       	st.w	r8[0x0],r9
}
8000bb4c:	2f ed       	sub	sp,-8
8000bb4e:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bb52 <genclk_config_set_source>:
	AVR32_PM.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8000bb52:	eb cd 40 80 	pushm	r7,lr
8000bb56:	1a 97       	mov	r7,sp
8000bb58:	20 3d       	sub	sp,12
8000bb5a:	ef 4c ff f8 	st.w	r7[-8],r12
8000bb5e:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t mask;

	mask = AVR32_PM_GCCTRL_OSCSEL_MASK | AVR32_PM_GCCTRL_PLLSEL_MASK;
8000bb62:	30 38       	mov	r8,3
8000bb64:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(!(src & ~mask));

	cfg->ctrl = (cfg->ctrl & ~mask) | (src << AVR32_PM_GCCTRL_OSCSEL);
8000bb68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb6c:	70 09       	ld.w	r9,r8[0x0]
8000bb6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb72:	5c d8       	com	r8
8000bb74:	10 69       	and	r9,r8
8000bb76:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb7a:	10 49       	or	r9,r8
8000bb7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb80:	91 09       	st.w	r8[0x0],r9
}
8000bb82:	2f dd       	sub	sp,-12
8000bb84:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bb88 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8000bb88:	eb cd 40 80 	pushm	r7,lr
8000bb8c:	1a 97       	mov	r7,sp
8000bb8e:	20 2d       	sub	sp,8
8000bb90:	ef 4c ff fc 	st.w	r7[-4],r12
8000bb94:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert((divider > 0) && (divider <= GENCLK_DIV_MAX));

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_PM_GCCTRL_DIVEN_MASK | AVR32_PM_GCCTRL_DIV_MASK);
8000bb98:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb9c:	70 08       	ld.w	r8,r8[0x0]
8000bb9e:	10 99       	mov	r9,r8
8000bba0:	e0 19 00 ef 	andl	r9,0xef
8000bba4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bba8:	91 09       	st.w	r8[0x0],r9

	if (divider > 1) {
8000bbaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bbae:	58 18       	cp.w	r8,1
8000bbb0:	e0 88 00 17 	brls	8000bbde <genclk_config_set_divider+0x56>
		cfg->ctrl |= 1U << AVR32_PM_GCCTRL_DIVEN;
8000bbb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbb8:	70 08       	ld.w	r8,r8[0x0]
8000bbba:	10 99       	mov	r9,r8
8000bbbc:	a5 a9       	sbr	r9,0x4
8000bbbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbc2:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_PM_GCCTRL_DIV;
8000bbc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbc8:	70 09       	ld.w	r9,r8[0x0]
8000bbca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bbce:	2f f8       	sub	r8,-1
8000bbd0:	a1 98       	lsr	r8,0x1
8000bbd2:	20 18       	sub	r8,1
8000bbd4:	a9 68       	lsl	r8,0x8
8000bbd6:	10 49       	or	r9,r8
8000bbd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbdc:	91 09       	st.w	r8[0x0],r9
	}
}
8000bbde:	2f ed       	sub	sp,-8
8000bbe0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bbe4 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8000bbe4:	eb cd 40 80 	pushm	r7,lr
8000bbe8:	1a 97       	mov	r7,sp
8000bbea:	20 2d       	sub	sp,8
8000bbec:	ef 4c ff fc 	st.w	r7[-4],r12
8000bbf0:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
8000bbf4:	fe 78 0c 00 	mov	r8,-62464
8000bbf8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bbfc:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bc00:	74 0a       	ld.w	r10,r10[0x0]
8000bc02:	a3 aa       	sbr	r10,0x2
8000bc04:	2e 89       	sub	r9,-24
8000bc06:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000bc0a:	2f ed       	sub	sp,-8
8000bc0c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bc10 <genclk_enable_source>:
{
	AVR32_PM.gcctrl[id] = 0;
}

static inline void genclk_enable_source(enum genclk_source src)
{
8000bc10:	eb cd 40 80 	pushm	r7,lr
8000bc14:	1a 97       	mov	r7,sp
8000bc16:	20 1d       	sub	sp,4
8000bc18:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000bc1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc20:	58 18       	cp.w	r8,1
8000bc22:	c1 40       	breq	8000bc4a <genclk_enable_source+0x3a>
8000bc24:	c0 43       	brcs	8000bc2c <genclk_enable_source+0x1c>
8000bc26:	58 28       	cp.w	r8,2
8000bc28:	c2 00       	breq	8000bc68 <genclk_enable_source+0x58>
8000bc2a:	c2 68       	rjmp	8000bc76 <genclk_enable_source+0x66>
#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000bc2c:	30 0c       	mov	r12,0
8000bc2e:	f0 1f 00 14 	mcall	8000bc7c <genclk_enable_source+0x6c>
8000bc32:	18 98       	mov	r8,r12
8000bc34:	ec 18 00 01 	eorl	r8,0x1
8000bc38:	5c 58       	castu.b	r8
8000bc3a:	c1 b0       	breq	8000bc70 <genclk_enable_source+0x60>
			osc_enable(OSC_ID_OSC0);
8000bc3c:	30 0c       	mov	r12,0
8000bc3e:	f0 1f 00 11 	mcall	8000bc80 <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC0);
8000bc42:	30 0c       	mov	r12,0
8000bc44:	f0 1f 00 10 	mcall	8000bc84 <genclk_enable_source+0x74>
		}
		break;
8000bc48:	c1 78       	rjmp	8000bc76 <genclk_enable_source+0x66>
#endif

#ifdef BOARD_OSC1_HZ
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000bc4a:	30 1c       	mov	r12,1
8000bc4c:	f0 1f 00 0c 	mcall	8000bc7c <genclk_enable_source+0x6c>
8000bc50:	18 98       	mov	r8,r12
8000bc52:	ec 18 00 01 	eorl	r8,0x1
8000bc56:	5c 58       	castu.b	r8
8000bc58:	c0 e0       	breq	8000bc74 <genclk_enable_source+0x64>
			osc_enable(OSC_ID_OSC1);
8000bc5a:	30 1c       	mov	r12,1
8000bc5c:	f0 1f 00 09 	mcall	8000bc80 <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC1);
8000bc60:	30 1c       	mov	r12,1
8000bc62:	f0 1f 00 09 	mcall	8000bc84 <genclk_enable_source+0x74>
		}
		break;
8000bc66:	c0 88       	rjmp	8000bc76 <genclk_enable_source+0x66>
#endif

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000bc68:	30 0c       	mov	r12,0
8000bc6a:	f0 1f 00 08 	mcall	8000bc88 <genclk_enable_source+0x78>
8000bc6e:	c0 48       	rjmp	8000bc76 <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000bc70:	d7 03       	nop
8000bc72:	c0 28       	rjmp	8000bc76 <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
			osc_enable(OSC_ID_OSC1);
			osc_wait_ready(OSC_ID_OSC1);
		}
		break;
8000bc74:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000bc76:	2f fd       	sub	sp,-4
8000bc78:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc7c:	80 00       	ld.sh	r0,r0[0x0]
8000bc7e:	b8 24       	st.h	r12[0x4],r4
8000bc80:	80 00       	ld.sh	r0,r0[0x0]
8000bc82:	b7 64       	lsl	r4,0x16
8000bc84:	80 00       	ld.sh	r0,r0[0x0]
8000bc86:	b8 c0       	st.b	r12[0x4],r0
8000bc88:	80 00       	ld.sh	r0,r0[0x0]
8000bc8a:	ba c0       	st.b	sp[0x4],r0

8000bc8c <genclk_enable_config>:
 * \param id      The ID of the generic clock.
 * \param src     The source clock of the generic clock.
 * \param divider The divider used to generate the generic clock.
 */
static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
8000bc8c:	eb cd 40 80 	pushm	r7,lr
8000bc90:	1a 97       	mov	r7,sp
8000bc92:	20 4d       	sub	sp,16
8000bc94:	ef 4c ff f8 	st.w	r7[-8],r12
8000bc98:	ef 4b ff f4 	st.w	r7[-12],r11
8000bc9c:	ef 4a ff f0 	st.w	r7[-16],r10
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, id);
8000bca0:	ee c8 00 04 	sub	r8,r7,4
8000bca4:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bca8:	10 9c       	mov	r12,r8
8000bcaa:	f0 1f 00 10 	mcall	8000bce8 <genclk_enable_config+0x5c>
	genclk_enable_source(src);
8000bcae:	ee fc ff f4 	ld.w	r12,r7[-12]
8000bcb2:	f0 1f 00 0f 	mcall	8000bcec <genclk_enable_config+0x60>
	genclk_config_set_source(&gcfg, src);
8000bcb6:	ee c8 00 04 	sub	r8,r7,4
8000bcba:	ee fb ff f4 	ld.w	r11,r7[-12]
8000bcbe:	10 9c       	mov	r12,r8
8000bcc0:	f0 1f 00 0c 	mcall	8000bcf0 <genclk_enable_config+0x64>
	genclk_config_set_divider(&gcfg, divider);
8000bcc4:	ee c8 00 04 	sub	r8,r7,4
8000bcc8:	ee fb ff f0 	ld.w	r11,r7[-16]
8000bccc:	10 9c       	mov	r12,r8
8000bcce:	f0 1f 00 0a 	mcall	8000bcf4 <genclk_enable_config+0x68>
	genclk_enable(&gcfg, id);
8000bcd2:	ee c8 00 04 	sub	r8,r7,4
8000bcd6:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bcda:	10 9c       	mov	r12,r8
8000bcdc:	f0 1f 00 07 	mcall	8000bcf8 <genclk_enable_config+0x6c>
}
8000bce0:	2f cd       	sub	sp,-16
8000bce2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bce6:	00 00       	add	r0,r0
8000bce8:	80 00       	ld.sh	r0,r0[0x0]
8000bcea:	bb 34       	mul	r4,sp
8000bcec:	80 00       	ld.sh	r0,r0[0x0]
8000bcee:	bc 10       	st.h	lr[0x2],r0
8000bcf0:	80 00       	ld.sh	r0,r0[0x0]
8000bcf2:	bb 52       	asr	r2,0x1b
8000bcf4:	80 00       	ld.sh	r0,r0[0x0]
8000bcf6:	bb 88       	lsr	r8,0x1a
8000bcf8:	80 00       	ld.sh	r0,r0[0x0]
8000bcfa:	bb e4       	*unknown*

8000bcfc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000bcfc:	eb cd 40 80 	pushm	r7,lr
8000bd00:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000bd02:	30 0c       	mov	r12,0
8000bd04:	f0 1f 00 06 	mcall	8000bd1c <sysclk_get_main_hz+0x20>
8000bd08:	18 99       	mov	r9,r12
8000bd0a:	12 98       	mov	r8,r9
8000bd0c:	a3 68       	lsl	r8,0x2
8000bd0e:	12 08       	add	r8,r9
8000bd10:	a1 78       	lsl	r8,0x1
8000bd12:	12 08       	add	r8,r9
8000bd14:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000bd16:	10 9c       	mov	r12,r8
8000bd18:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd1c:	80 00       	ld.sh	r0,r0[0x0]
8000bd1e:	b8 7c       	st.h	r12[0xe],r12

8000bd20 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000bd20:	eb cd 40 80 	pushm	r7,lr
8000bd24:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000bd26:	f0 1f 00 04 	mcall	8000bd34 <sysclk_get_cpu_hz+0x14>
8000bd2a:	18 98       	mov	r8,r12
}
8000bd2c:	10 9c       	mov	r12,r8
8000bd2e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd32:	00 00       	add	r0,r0
8000bd34:	80 00       	ld.sh	r0,r0[0x0]
8000bd36:	bc fc       	st.b	lr[0x7],r12

8000bd38 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000bd38:	eb cd 40 80 	pushm	r7,lr
8000bd3c:	1a 97       	mov	r7,sp
8000bd3e:	20 1d       	sub	sp,4
8000bd40:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000bd44:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bd48:	30 1c       	mov	r12,1
8000bd4a:	f0 1f 00 03 	mcall	8000bd54 <sysclk_enable_hsb_module+0x1c>
}
8000bd4e:	2f fd       	sub	sp,-4
8000bd50:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd54:	80 00       	ld.sh	r0,r0[0x0]
8000bd56:	bd ac       	sbr	r12,0x1c

8000bd58 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint_fast8_t src)
{
8000bd58:	eb cd 40 80 	pushm	r7,lr
8000bd5c:	1a 97       	mov	r7,sp
8000bd5e:	20 3d       	sub	sp,12
8000bd60:	ef 4c ff f4 	st.w	r7[-12],r12
	irqflags_t flags;
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
8000bd64:	f0 1f 00 10 	mcall	8000bda4 <sysclk_set_source+0x4c>
8000bd68:	18 98       	mov	r8,r12
8000bd6a:	ef 48 ff f8 	st.w	r7[-8],r8
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
8000bd6e:	fe 78 0c 00 	mov	r8,-62464
8000bd72:	70 08       	ld.w	r8,r8[0x0]
8000bd74:	e0 18 ff fc 	andl	r8,0xfffc
8000bd78:	ef 48 ff fc 	st.w	r7[-4],r8
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
8000bd7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bd80:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd84:	f3 e8 10 08 	or	r8,r9,r8
8000bd88:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.mcctrl = mcctrl;
8000bd8c:	fe 78 0c 00 	mov	r8,-62464
8000bd90:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bd94:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000bd96:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bd9a:	f0 1f 00 04 	mcall	8000bda8 <sysclk_set_source+0x50>
}
8000bd9e:	2f dd       	sub	sp,-12
8000bda0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bda4:	80 00       	ld.sh	r0,r0[0x0]
8000bda6:	b7 2c       	st.d	r11++,r12
8000bda8:	80 00       	ld.sh	r0,r0[0x0]
8000bdaa:	b7 4a       	asr	r10,0x16

8000bdac <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8000bdac:	eb cd 40 80 	pushm	r7,lr
8000bdb0:	1a 97       	mov	r7,sp
8000bdb2:	20 4d       	sub	sp,16
8000bdb4:	ef 4c ff f4 	st.w	r7[-12],r12
8000bdb8:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8000bdbc:	f0 1f 00 17 	mcall	8000be18 <sysclk_priv_enable_module+0x6c>
8000bdc0:	18 98       	mov	r8,r12
8000bdc2:	ef 48 ff f8 	st.w	r7[-8],r8

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000bdc6:	fe 78 0c 00 	mov	r8,-62464
8000bdca:	71 58       	ld.w	r8,r8[0x54]
8000bdcc:	e2 18 00 40 	andl	r8,0x40,COH
8000bdd0:	cf b0       	breq	8000bdc6 <sysclk_priv_enable_module+0x1a>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000bdd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bdd6:	a3 68       	lsl	r8,0x2
8000bdd8:	e0 28 f3 f8 	sub	r8,62456
8000bddc:	70 08       	ld.w	r8,r8[0x0]
8000bdde:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8000bde2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bde6:	30 19       	mov	r9,1
8000bde8:	f2 08 09 48 	lsl	r8,r9,r8
8000bdec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bdf0:	f3 e8 10 08 	or	r8,r9,r8
8000bdf4:	ef 48 ff fc 	st.w	r7[-4],r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000bdf8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bdfc:	a3 68       	lsl	r8,0x2
8000bdfe:	e0 28 f3 f8 	sub	r8,62456
8000be02:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000be06:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8000be08:	ee fc ff f8 	ld.w	r12,r7[-8]
8000be0c:	f0 1f 00 04 	mcall	8000be1c <sysclk_priv_enable_module+0x70>
}
8000be10:	2f cd       	sub	sp,-16
8000be12:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be16:	00 00       	add	r0,r0
8000be18:	80 00       	ld.sh	r0,r0[0x0]
8000be1a:	b7 2c       	st.d	r11++,r12
8000be1c:	80 00       	ld.sh	r0,r0[0x0]
8000be1e:	b7 4a       	asr	r10,0x16

8000be20 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
8000be20:	eb cd 40 80 	pushm	r7,lr
8000be24:	1a 97       	mov	r7,sp
8000be26:	20 3d       	sub	sp,12
8000be28:	ef 4c ff f4 	st.w	r7[-12],r12
	unsigned int pbus_id = 0;
8000be2c:	30 08       	mov	r8,0
8000be2e:	ef 48 ff f8 	st.w	r7[-8],r8
	irqflags_t   flags;

	/* The AES module is on PBC, others are on PBB */
	if (index == SYSCLK_AES)
8000be32:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000be36:	58 98       	cp.w	r8,9
8000be38:	c0 41       	brne	8000be40 <sysclk_enable_pbb_module+0x20>
		pbus_id = 1;
8000be3a:	30 18       	mov	r8,1
8000be3c:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
8000be40:	f0 1f 00 15 	mcall	8000be94 <sysclk_enable_pbb_module+0x74>
8000be44:	18 98       	mov	r8,r12
8000be46:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!sysclk_bus_refcount[pbus_id])
8000be4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be4e:	49 39       	lddpc	r9,8000be98 <sysclk_enable_pbb_module+0x78>
8000be50:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000be54:	58 08       	cp.w	r8,0
8000be56:	c0 91       	brne	8000be68 <sysclk_enable_pbb_module+0x48>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
8000be58:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be5c:	a1 78       	lsl	r8,0x1
8000be5e:	2f f8       	sub	r8,-1
8000be60:	a1 78       	lsl	r8,0x1
8000be62:	10 9c       	mov	r12,r8
8000be64:	f0 1f 00 0e 	mcall	8000be9c <sysclk_enable_pbb_module+0x7c>
	sysclk_bus_refcount[pbus_id]++;
8000be68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000be6c:	48 b9       	lddpc	r9,8000be98 <sysclk_enable_pbb_module+0x78>
8000be6e:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000be72:	2f f9       	sub	r9,-1
8000be74:	5c 59       	castu.b	r9
8000be76:	48 9a       	lddpc	r10,8000be98 <sysclk_enable_pbb_module+0x78>
8000be78:	f4 08 0b 09 	st.b	r10[r8],r9

	cpu_irq_restore(flags);
8000be7c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000be80:	f0 1f 00 08 	mcall	8000bea0 <sysclk_enable_pbb_module+0x80>

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
8000be84:	ee fb ff f4 	ld.w	r11,r7[-12]
8000be88:	30 3c       	mov	r12,3
8000be8a:	f0 1f 00 07 	mcall	8000bea4 <sysclk_enable_pbb_module+0x84>
}
8000be8e:	2f dd       	sub	sp,-12
8000be90:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be94:	80 00       	ld.sh	r0,r0[0x0]
8000be96:	b7 2c       	st.d	r11++,r12
8000be98:	00 00       	add	r0,r0
8000be9a:	07 a4       	ld.ub	r4,r3[0x2]
8000be9c:	80 00       	ld.sh	r0,r0[0x0]
8000be9e:	bd 38       	mul	r8,lr
8000bea0:	80 00       	ld.sh	r0,r0[0x0]
8000bea2:	b7 4a       	asr	r10,0x16
8000bea4:	80 00       	ld.sh	r0,r0[0x0]
8000bea6:	bd ac       	sbr	r12,0x1c

8000bea8 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8000bea8:	eb cd 40 80 	pushm	r7,lr
8000beac:	1a 97       	mov	r7,sp
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
8000beae:	30 1c       	mov	r12,1
8000beb0:	f0 1f 00 06 	mcall	8000bec8 <sysclk_enable_usb+0x20>
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000beb4:	30 3c       	mov	r12,3
8000beb6:	f0 1f 00 06 	mcall	8000becc <sysclk_enable_usb+0x24>
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
8000beba:	30 1a       	mov	r10,1
8000bebc:	30 0b       	mov	r11,0
8000bebe:	30 4c       	mov	r12,4
8000bec0:	f0 1f 00 04 	mcall	8000bed0 <sysclk_enable_usb+0x28>
}
8000bec4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bec8:	80 00       	ld.sh	r0,r0[0x0]
8000beca:	be 20       	st.h	pc[0x4],r0
8000becc:	80 00       	ld.sh	r0,r0[0x0]
8000bece:	bd 38       	mul	r8,lr
8000bed0:	80 00       	ld.sh	r0,r0[0x0]
8000bed2:	bc 8c       	st.b	lr[0x0],r12

8000bed4 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8000bed4:	eb cd 40 80 	pushm	r7,lr
8000bed8:	1a 97       	mov	r7,sp
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000beda:	30 0c       	mov	r12,0
8000bedc:	f0 1f 00 07 	mcall	8000bef8 <sysclk_init+0x24>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
8000bee0:	f0 1f 00 07 	mcall	8000befc <sysclk_init+0x28>
8000bee4:	18 98       	mov	r8,r12
8000bee6:	10 9c       	mov	r12,r8
8000bee8:	f0 1f 00 06 	mcall	8000bf00 <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_PLL0);
8000beec:	30 2c       	mov	r12,2
8000beee:	f0 1f 00 06 	mcall	8000bf04 <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000bef2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bef6:	00 00       	add	r0,r0
8000bef8:	80 00       	ld.sh	r0,r0[0x0]
8000befa:	ba c0       	st.b	sp[0x4],r0
8000befc:	80 00       	ld.sh	r0,r0[0x0]
8000befe:	bd 20       	st.d	lr++,r0
8000bf00:	80 00       	ld.sh	r0,r0[0x0]
8000bf02:	84 38       	ld.sh	r8,r2[0x6]
8000bf04:	80 00       	ld.sh	r0,r0[0x0]
8000bf06:	bd 58       	asr	r8,0x1d
8000bf08:	22 53       	sub	r3,37
8000bf0a:	44 20       	lddsp	r0,sp[0x108]
8000bf0c:	43 61       	lddsp	r1,sp[0xd8]
8000bf0e:	72 64       	ld.w	r4,r9[0x18]
8000bf10:	20 53       	sub	r3,5
8000bf12:	6c 6f       	ld.w	pc,r6[0x18]
8000bf14:	74 20       	ld.w	r0,r10[0x8]
8000bf16:	30 22       	mov	r2,2
8000bf18:	00 00       	add	r0,r0
8000bf1a:	00 00       	add	r0,r0
8000bf1c:	22 53       	sub	r3,37
8000bf1e:	44 20       	lddsp	r0,sp[0x108]
8000bf20:	43 61       	lddsp	r1,sp[0xd8]
8000bf22:	72 64       	ld.w	r4,r9[0x18]
8000bf24:	20 53       	sub	r3,5
8000bf26:	6c 6f       	ld.w	pc,r6[0x18]
8000bf28:	74 20       	ld.w	r0,r10[0x8]
8000bf2a:	31 22       	mov	r2,18
8000bf2c:	00 00       	add	r0,r0
	...

8000bf30 <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
8000bf30:	eb cd 40 80 	pushm	r7,lr
8000bf34:	1a 97       	mov	r7,sp

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
8000bf36:	30 28       	mov	r8,2
#endif
}
8000bf38:	10 9c       	mov	r12,r8
8000bf3a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf3e:	d7 03       	nop

8000bf40 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
8000bf40:	eb cd 40 80 	pushm	r7,lr
8000bf44:	1a 97       	mov	r7,sp
8000bf46:	20 2d       	sub	sp,8
8000bf48:	18 98       	mov	r8,r12
8000bf4a:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000bf4e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bf52:	30 18       	mov	r8,1
8000bf54:	f0 09 18 00 	cp.b	r9,r8
8000bf58:	e0 8b 00 0f 	brhi	8000bf76 <mem_test_unit_ready+0x36>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
8000bf5c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bf60:	48 aa       	lddpc	r10,8000bf88 <mem_test_unit_ready+0x48>
8000bf62:	12 98       	mov	r8,r9
8000bf64:	a3 78       	lsl	r8,0x3
8000bf66:	12 18       	sub	r8,r9
8000bf68:	a3 68       	lsl	r8,0x2
8000bf6a:	f4 08 00 08 	add	r8,r10,r8
8000bf6e:	70 08       	ld.w	r8,r8[0x0]
8000bf70:	5d 18       	icall	r8
8000bf72:	18 98       	mov	r8,r12
8000bf74:	c0 28       	rjmp	8000bf78 <mem_test_unit_ready+0x38>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000bf76:	30 18       	mov	r8,1
8000bf78:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000bf7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000bf80:	10 9c       	mov	r12,r8
8000bf82:	2f ed       	sub	sp,-8
8000bf84:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf88:	80 00       	ld.sh	r0,r0[0x0]
8000bf8a:	ed 1c eb cd 	ld.uh	r12,r6[-5171]

8000bf8c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
8000bf8c:	eb cd 40 80 	pushm	r7,lr
8000bf90:	1a 97       	mov	r7,sp
8000bf92:	20 3d       	sub	sp,12
8000bf94:	18 98       	mov	r8,r12
8000bf96:	ef 4b ff f4 	st.w	r7[-12],r11
8000bf9a:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000bf9e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bfa2:	30 18       	mov	r8,1
8000bfa4:	f0 09 18 00 	cp.b	r9,r8
8000bfa8:	e0 8b 00 10 	brhi	8000bfc8 <mem_read_capacity+0x3c>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
8000bfac:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bfb0:	48 ba       	lddpc	r10,8000bfdc <mem_read_capacity+0x50>
8000bfb2:	12 98       	mov	r8,r9
8000bfb4:	a3 78       	lsl	r8,0x3
8000bfb6:	12 18       	sub	r8,r9
8000bfb8:	2f f8       	sub	r8,-1
8000bfba:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
8000bfbe:	ee fc ff f4 	ld.w	r12,r7[-12]
8000bfc2:	5d 18       	icall	r8
8000bfc4:	18 98       	mov	r8,r12
8000bfc6:	c0 28       	rjmp	8000bfca <mem_read_capacity+0x3e>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000bfc8:	30 18       	mov	r8,1
8000bfca:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000bfce:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000bfd2:	10 9c       	mov	r12,r8
8000bfd4:	2f dd       	sub	sp,-12
8000bfd6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bfda:	00 00       	add	r0,r0
8000bfdc:	80 00       	ld.sh	r0,r0[0x0]
8000bfde:	ed 1c eb cd 	ld.uh	r12,r6[-5171]

8000bfe0 <mem_wr_protect>:
  return sector_size;
}


bool mem_wr_protect(U8 lun)
{
8000bfe0:	eb cd 40 80 	pushm	r7,lr
8000bfe4:	1a 97       	mov	r7,sp
8000bfe6:	20 2d       	sub	sp,8
8000bfe8:	18 98       	mov	r8,r12
8000bfea:	ef 68 ff f8 	st.b	r7[-8],r8
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000bfee:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bff2:	30 18       	mov	r8,1
8000bff4:	f0 09 18 00 	cp.b	r9,r8
8000bff8:	e0 8b 00 10 	brhi	8000c018 <mem_wr_protect+0x38>
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
8000bffc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c000:	48 ba       	lddpc	r10,8000c02c <mem_wr_protect+0x4c>
8000c002:	12 98       	mov	r8,r9
8000c004:	a3 78       	lsl	r8,0x3
8000c006:	12 18       	sub	r8,r9
8000c008:	a3 68       	lsl	r8,0x2
8000c00a:	f4 08 00 08 	add	r8,r10,r8
8000c00e:	2f 88       	sub	r8,-8
8000c010:	70 08       	ld.w	r8,r8[0x0]
8000c012:	5d 18       	icall	r8
8000c014:	18 98       	mov	r8,r12
8000c016:	c0 28       	rjmp	8000c01a <mem_wr_protect+0x3a>
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000c018:	30 18       	mov	r8,1
8000c01a:	ef 68 ff ff 	st.b	r7[-1],r8
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
8000c01e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000c022:	10 9c       	mov	r12,r8
8000c024:	2f ed       	sub	sp,-8
8000c026:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c02a:	00 00       	add	r0,r0
8000c02c:	80 00       	ld.sh	r0,r0[0x0]
8000c02e:	ed 1c eb cd 	ld.uh	r12,r6[-5171]

8000c030 <mem_name>:
  return removal;
}


const char *mem_name(U8 lun)
{
8000c030:	eb cd 40 80 	pushm	r7,lr
8000c034:	1a 97       	mov	r7,sp
8000c036:	20 1d       	sub	sp,4
8000c038:	18 98       	mov	r8,r12
8000c03a:	ef 68 ff fc 	st.b	r7[-4],r8
  return
8000c03e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c042:	30 18       	mov	r8,1
8000c044:	f0 09 18 00 	cp.b	r9,r8
8000c048:	e0 8b 00 0e 	brhi	8000c064 <mem_name+0x34>
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
8000c04c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
}


const char *mem_name(U8 lun)
{
  return
8000c050:	48 8a       	lddpc	r10,8000c070 <mem_name+0x40>
8000c052:	12 98       	mov	r8,r9
8000c054:	a3 78       	lsl	r8,0x3
8000c056:	12 18       	sub	r8,r9
8000c058:	a3 68       	lsl	r8,0x2
8000c05a:	f4 08 00 08 	add	r8,r10,r8
8000c05e:	2e 88       	sub	r8,-24
8000c060:	70 08       	ld.w	r8,r8[0x0]
8000c062:	c0 28       	rjmp	8000c066 <mem_name+0x36>
8000c064:	30 08       	mov	r8,0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
8000c066:	10 9c       	mov	r12,r8
8000c068:	2f fd       	sub	sp,-4
8000c06a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c06e:	00 00       	add	r0,r0
8000c070:	80 00       	ld.sh	r0,r0[0x0]
8000c072:	ed 1c eb cd 	ld.uh	r12,r6[-5171]

8000c074 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
8000c074:	eb cd 40 80 	pushm	r7,lr
8000c078:	1a 97       	mov	r7,sp
8000c07a:	20 4d       	sub	sp,16
8000c07c:	18 99       	mov	r9,r12
8000c07e:	ef 4b ff f4 	st.w	r7[-12],r11
8000c082:	14 98       	mov	r8,r10
8000c084:	ef 69 ff f8 	st.b	r7[-8],r9
8000c088:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
8000c08c:	f0 1f 00 14 	mcall	8000c0dc <memory_2_usb+0x68>
  status =
8000c090:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c094:	30 18       	mov	r8,1
8000c096:	f0 09 18 00 	cp.b	r9,r8
8000c09a:	e0 8b 00 15 	brhi	8000c0c4 <memory_2_usb+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
8000c09e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c0a2:	49 0a       	lddpc	r10,8000c0e0 <memory_2_usb+0x6c>
8000c0a4:	12 98       	mov	r8,r9
8000c0a6:	a3 78       	lsl	r8,0x3
8000c0a8:	12 18       	sub	r8,r9
8000c0aa:	a3 68       	lsl	r8,0x2
8000c0ac:	f4 08 00 08 	add	r8,r10,r8
8000c0b0:	2f 08       	sub	r8,-16
8000c0b2:	70 08       	ld.w	r8,r8[0x0]
8000c0b4:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c0b8:	12 9b       	mov	r11,r9
8000c0ba:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c0be:	5d 18       	icall	r8
8000c0c0:	18 98       	mov	r8,r12
8000c0c2:	c0 28       	rjmp	8000c0c6 <memory_2_usb+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
8000c0c4:	30 18       	mov	r8,1
8000c0c6:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
8000c0ca:	f0 1f 00 07 	mcall	8000c0e4 <memory_2_usb+0x70>

  Ctrl_access_unlock();

  return status;
8000c0ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c0d2:	10 9c       	mov	r12,r8
8000c0d4:	2f cd       	sub	sp,-16
8000c0d6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0da:	00 00       	add	r0,r0
8000c0dc:	80 00       	ld.sh	r0,r0[0x0]
8000c0de:	c1 ac       	rcall	8000c112 <usb_2_memory+0x2a>
8000c0e0:	80 00       	ld.sh	r0,r0[0x0]
8000c0e2:	ed 1c 80 00 	ld.uh	r12,r6[-32768]
8000c0e6:	c1 c0       	breq	8000c11e <usb_2_memory+0x36>

8000c0e8 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
8000c0e8:	eb cd 40 80 	pushm	r7,lr
8000c0ec:	1a 97       	mov	r7,sp
8000c0ee:	20 4d       	sub	sp,16
8000c0f0:	18 99       	mov	r9,r12
8000c0f2:	ef 4b ff f4 	st.w	r7[-12],r11
8000c0f6:	14 98       	mov	r8,r10
8000c0f8:	ef 69 ff f8 	st.b	r7[-8],r9
8000c0fc:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
8000c100:	f0 1f 00 14 	mcall	8000c150 <usb_2_memory+0x68>
  status =
8000c104:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c108:	30 18       	mov	r8,1
8000c10a:	f0 09 18 00 	cp.b	r9,r8
8000c10e:	e0 8b 00 15 	brhi	8000c138 <usb_2_memory+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
8000c112:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c116:	49 0a       	lddpc	r10,8000c154 <usb_2_memory+0x6c>
8000c118:	12 98       	mov	r8,r9
8000c11a:	a3 78       	lsl	r8,0x3
8000c11c:	12 18       	sub	r8,r9
8000c11e:	a3 68       	lsl	r8,0x2
8000c120:	f4 08 00 08 	add	r8,r10,r8
8000c124:	2e c8       	sub	r8,-20
8000c126:	70 08       	ld.w	r8,r8[0x0]
8000c128:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c12c:	12 9b       	mov	r11,r9
8000c12e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c132:	5d 18       	icall	r8
8000c134:	18 98       	mov	r8,r12
8000c136:	c0 28       	rjmp	8000c13a <usb_2_memory+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
8000c138:	30 18       	mov	r8,1
8000c13a:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
8000c13e:	f0 1f 00 07 	mcall	8000c158 <usb_2_memory+0x70>

  Ctrl_access_unlock();

  return status;
8000c142:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c146:	10 9c       	mov	r12,r8
8000c148:	2f cd       	sub	sp,-16
8000c14a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c14e:	00 00       	add	r0,r0
8000c150:	80 00       	ld.sh	r0,r0[0x0]
8000c152:	c1 d4       	brge	8000c18c <ui_powerdown+0x10>
8000c154:	80 00       	ld.sh	r0,r0[0x0]
8000c156:	ed 1c 80 00 	ld.uh	r12,r6[-32768]
8000c15a:	c1 e8       	rjmp	8000c196 <ui_powerdown+0x1a>

8000c15c <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
8000c15c:	eb cd 40 80 	pushm	r7,lr
8000c160:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000c162:	30 1c       	mov	r12,1
8000c164:	f0 1f 00 04 	mcall	8000c174 <ui_init+0x18>
	LED_Off(LED1);
8000c168:	30 2c       	mov	r12,2
8000c16a:	f0 1f 00 04 	mcall	8000c178 <ui_init+0x1c>
}
8000c16e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c172:	00 00       	add	r0,r0
8000c174:	80 00       	ld.sh	r0,r0[0x0]
8000c176:	49 d0       	lddpc	r0,8000c1e8 <ui_stop_write>
8000c178:	80 00       	ld.sh	r0,r0[0x0]
8000c17a:	49 18       	lddpc	r8,8000c1bc <ui_start_read+0x10>

8000c17c <ui_powerdown>:

void ui_powerdown(void)
{
8000c17c:	eb cd 40 80 	pushm	r7,lr
8000c180:	1a 97       	mov	r7,sp
	LED_Off(LED0);
8000c182:	30 1c       	mov	r12,1
8000c184:	f0 1f 00 04 	mcall	8000c194 <ui_powerdown+0x18>
	LED_Off(LED1);
8000c188:	30 2c       	mov	r12,2
8000c18a:	f0 1f 00 03 	mcall	8000c194 <ui_powerdown+0x18>
}
8000c18e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c192:	00 00       	add	r0,r0
8000c194:	80 00       	ld.sh	r0,r0[0x0]
8000c196:	49 18       	lddpc	r8,8000c1d8 <ui_start_write+0x4>

8000c198 <ui_wakeup>:

void ui_wakeup(void)
{
8000c198:	eb cd 40 80 	pushm	r7,lr
8000c19c:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000c19e:	30 1c       	mov	r12,1
8000c1a0:	f0 1f 00 02 	mcall	8000c1a8 <ui_wakeup+0x10>
}
8000c1a4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1a8:	80 00       	ld.sh	r0,r0[0x0]
8000c1aa:	49 d0       	lddpc	r0,8000c21c <ui_process+0x20>

8000c1ac <ui_start_read>:

void ui_start_read(void)
{
8000c1ac:	eb cd 40 80 	pushm	r7,lr
8000c1b0:	1a 97       	mov	r7,sp
	LED_On(LED2);
8000c1b2:	30 4c       	mov	r12,4
8000c1b4:	f0 1f 00 02 	mcall	8000c1bc <ui_start_read+0x10>
}
8000c1b8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1bc:	80 00       	ld.sh	r0,r0[0x0]
8000c1be:	49 d0       	lddpc	r0,8000c230 <ui_process+0x34>

8000c1c0 <ui_stop_read>:

void ui_stop_read(void)
{
8000c1c0:	eb cd 40 80 	pushm	r7,lr
8000c1c4:	1a 97       	mov	r7,sp
	LED_Off(LED2);
8000c1c6:	30 4c       	mov	r12,4
8000c1c8:	f0 1f 00 02 	mcall	8000c1d0 <ui_stop_read+0x10>
}
8000c1cc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1d0:	80 00       	ld.sh	r0,r0[0x0]
8000c1d2:	49 18       	lddpc	r8,8000c214 <ui_process+0x18>

8000c1d4 <ui_start_write>:

void ui_start_write(void)
{
8000c1d4:	eb cd 40 80 	pushm	r7,lr
8000c1d8:	1a 97       	mov	r7,sp
	LED_On(LED3);
8000c1da:	30 8c       	mov	r12,8
8000c1dc:	f0 1f 00 02 	mcall	8000c1e4 <ui_start_write+0x10>
}
8000c1e0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1e4:	80 00       	ld.sh	r0,r0[0x0]
8000c1e6:	49 d0       	lddpc	r0,8000c258 <ui_process+0x5c>

8000c1e8 <ui_stop_write>:

void ui_stop_write(void)
{
8000c1e8:	eb cd 40 80 	pushm	r7,lr
8000c1ec:	1a 97       	mov	r7,sp
	LED_Off(LED3);
8000c1ee:	30 8c       	mov	r12,8
8000c1f0:	f0 1f 00 02 	mcall	8000c1f8 <ui_stop_write+0x10>
}
8000c1f4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1f8:	80 00       	ld.sh	r0,r0[0x0]
8000c1fa:	49 18       	lddpc	r8,8000c23c <ui_process+0x40>

8000c1fc <ui_process>:

void ui_process(uint16_t framenumber)
{
8000c1fc:	eb cd 40 80 	pushm	r7,lr
8000c200:	1a 97       	mov	r7,sp
8000c202:	20 1d       	sub	sp,4
8000c204:	18 98       	mov	r8,r12
8000c206:	ef 58 ff fc 	st.h	r7[-4],r8
	if ((framenumber % 1000) == 0) {
8000c20a:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c20e:	e0 68 4d d3 	mov	r8,19923
8000c212:	ea 18 10 62 	orh	r8,0x1062
8000c216:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c21a:	a7 89       	lsr	r9,0x6
8000c21c:	e0 68 03 e8 	mov	r8,1000
8000c220:	f2 08 02 48 	mul	r8,r9,r8
8000c224:	f4 08 01 08 	sub	r8,r10,r8
8000c228:	5c 88       	casts.h	r8
8000c22a:	c0 41       	brne	8000c232 <ui_process+0x36>
		LED_On(LED1);
8000c22c:	30 2c       	mov	r12,2
8000c22e:	f0 1f 00 10 	mcall	8000c26c <ui_process+0x70>
	}
	if ((framenumber % 1000) == 500) {
8000c232:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c236:	e0 68 4d d3 	mov	r8,19923
8000c23a:	ea 18 10 62 	orh	r8,0x1062
8000c23e:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c242:	a7 89       	lsr	r9,0x6
8000c244:	e0 68 03 e8 	mov	r8,1000
8000c248:	f2 08 02 48 	mul	r8,r9,r8
8000c24c:	f4 08 01 08 	sub	r8,r10,r8
8000c250:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000c254:	e0 68 01 f4 	mov	r8,500
8000c258:	f0 09 19 00 	cp.h	r9,r8
8000c25c:	c0 41       	brne	8000c264 <ui_process+0x68>
		LED_Off(LED1);
8000c25e:	30 2c       	mov	r12,2
8000c260:	f0 1f 00 04 	mcall	8000c270 <ui_process+0x74>
	}
}
8000c264:	2f fd       	sub	sp,-4
8000c266:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c26a:	00 00       	add	r0,r0
8000c26c:	80 00       	ld.sh	r0,r0[0x0]
8000c26e:	49 d0       	lddpc	r0,8000c2e0 <udi_msc_disable>
8000c270:	80 00       	ld.sh	r0,r0[0x0]
8000c272:	49 18       	lddpc	r8,8000c2b4 <udi_msc_enable+0x40>

8000c274 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
8000c274:	eb cd 40 80 	pushm	r7,lr
8000c278:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000c27a:	49 49       	lddpc	r9,8000c2c8 <udi_msc_enable+0x54>
8000c27c:	30 08       	mov	r8,0
8000c27e:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_cbw_invalid = false;
8000c280:	49 39       	lddpc	r9,8000c2cc <udi_msc_enable+0x58>
8000c282:	30 08       	mov	r8,0
8000c284:	b2 88       	st.b	r9[0x0],r8
	udi_msc_nb_lun = get_nb_lun();
8000c286:	f0 1f 00 13 	mcall	8000c2d0 <udi_msc_enable+0x5c>
8000c28a:	18 98       	mov	r8,r12
8000c28c:	49 29       	lddpc	r9,8000c2d4 <udi_msc_enable+0x60>
8000c28e:	b2 88       	st.b	r9[0x0],r8
	if (0 == udi_msc_nb_lun)
8000c290:	49 18       	lddpc	r8,8000c2d4 <udi_msc_enable+0x60>
8000c292:	11 88       	ld.ub	r8,r8[0x0]
8000c294:	58 08       	cp.w	r8,0
8000c296:	c0 31       	brne	8000c29c <udi_msc_enable+0x28>
		return false;	// No lun available, then not authorize to enable interface
8000c298:	30 08       	mov	r8,0
8000c29a:	c1 38       	rjmp	8000c2c0 <udi_msc_enable+0x4c>
	udi_msc_nb_lun--;
8000c29c:	48 e8       	lddpc	r8,8000c2d4 <udi_msc_enable+0x60>
8000c29e:	11 88       	ld.ub	r8,r8[0x0]
8000c2a0:	20 18       	sub	r8,1
8000c2a2:	5c 58       	castu.b	r8
8000c2a4:	48 c9       	lddpc	r9,8000c2d4 <udi_msc_enable+0x60>
8000c2a6:	b2 88       	st.b	r9[0x0],r8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
8000c2a8:	f0 1f 00 0c 	mcall	8000c2d8 <udi_msc_enable+0x64>
8000c2ac:	18 98       	mov	r8,r12
8000c2ae:	ec 18 00 01 	eorl	r8,0x1
8000c2b2:	5c 58       	castu.b	r8
8000c2b4:	c0 30       	breq	8000c2ba <udi_msc_enable+0x46>
		return false;
8000c2b6:	30 08       	mov	r8,0
8000c2b8:	c0 48       	rjmp	8000c2c0 <udi_msc_enable+0x4c>
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
8000c2ba:	f0 1f 00 09 	mcall	8000c2dc <udi_msc_enable+0x68>
	return true;
8000c2be:	30 18       	mov	r8,1
}
8000c2c0:	10 9c       	mov	r12,r8
8000c2c2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2c6:	00 00       	add	r0,r0
8000c2c8:	00 00       	add	r0,r0
8000c2ca:	07 e1       	ld.ub	r1,r3[0x6]
8000c2cc:	00 00       	add	r0,r0
8000c2ce:	07 e0       	ld.ub	r0,r3[0x6]
8000c2d0:	80 00       	ld.sh	r0,r0[0x0]
8000c2d2:	bf 30       	mul	r0,pc
8000c2d4:	00 00       	add	r0,r0
8000c2d6:	07 c8       	ld.ub	r8,r3[0x4]
8000c2d8:	80 00       	ld.sh	r0,r0[0x0]
8000c2da:	e1 f4 80 00 	ld.wls	r4,r0[0x0]
8000c2de:	c4 58       	rjmp	8000c368 <udi_msc_setup+0x6c>

8000c2e0 <udi_msc_disable>:


void udi_msc_disable(void)
{
8000c2e0:	eb cd 40 80 	pushm	r7,lr
8000c2e4:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000c2e6:	48 49       	lddpc	r9,8000c2f4 <udi_msc_disable+0x14>
8000c2e8:	30 08       	mov	r8,0
8000c2ea:	b2 88       	st.b	r9[0x0],r8
	UDI_MSC_DISABLE_EXT();
8000c2ec:	f0 1f 00 03 	mcall	8000c2f8 <udi_msc_disable+0x18>
}
8000c2f0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2f4:	00 00       	add	r0,r0
8000c2f6:	07 e1       	ld.ub	r1,r3[0x6]
8000c2f8:	80 00       	ld.sh	r0,r0[0x0]
8000c2fa:	e2 0c       	*unknown*

8000c2fc <udi_msc_setup>:


bool udi_msc_setup(void)
{
8000c2fc:	eb cd 40 80 	pushm	r7,lr
8000c300:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000c302:	4a f8       	lddpc	r8,8000c3bc <udi_msc_setup+0xc0>
8000c304:	11 88       	ld.ub	r8,r8[0x0]
8000c306:	10 99       	mov	r9,r8
8000c308:	30 08       	mov	r8,0
8000c30a:	f0 09 18 00 	cp.b	r9,r8
8000c30e:	c2 34       	brge	8000c354 <udi_msc_setup+0x58>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000c310:	4a b8       	lddpc	r8,8000c3bc <udi_msc_setup+0xc0>
8000c312:	11 88       	ld.ub	r8,r8[0x0]
8000c314:	e2 18 00 60 	andl	r8,0x60,COH
8000c318:	e0 48 00 20 	cp.w	r8,32
8000c31c:	c1 c1       	brne	8000c354 <udi_msc_setup+0x58>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000c31e:	4a 88       	lddpc	r8,8000c3bc <udi_msc_setup+0xc0>
8000c320:	11 98       	ld.ub	r8,r8[0x1]
8000c322:	e0 48 00 fe 	cp.w	r8,254
8000c326:	c1 71       	brne	8000c354 <udi_msc_setup+0x58>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
8000c328:	4a 58       	lddpc	r8,8000c3bc <udi_msc_setup+0xc0>
8000c32a:	90 39       	ld.sh	r9,r8[0x6]
8000c32c:	30 18       	mov	r8,1
8000c32e:	f0 09 19 00 	cp.h	r9,r8
8000c332:	c0 30       	breq	8000c338 <udi_msc_setup+0x3c>
					return false;	// Error for USB host
8000c334:	30 08       	mov	r8,0
8000c336:	c4 08       	rjmp	8000c3b6 <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000c338:	4a 18       	lddpc	r8,8000c3bc <udi_msc_setup+0xc0>
8000c33a:	90 18       	ld.sh	r8,r8[0x2]
8000c33c:	58 08       	cp.w	r8,0
8000c33e:	c0 30       	breq	8000c344 <udi_msc_setup+0x48>
					return false;
8000c340:	30 08       	mov	r8,0
8000c342:	c3 a8       	rjmp	8000c3b6 <udi_msc_setup+0xba>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
8000c344:	49 e8       	lddpc	r8,8000c3bc <udi_msc_setup+0xc0>
8000c346:	49 f9       	lddpc	r9,8000c3c0 <udi_msc_setup+0xc4>
8000c348:	91 29       	st.w	r8[0x8],r9
				udd_g_ctrlreq.payload_size = 1;
8000c34a:	49 d9       	lddpc	r9,8000c3bc <udi_msc_setup+0xc0>
8000c34c:	30 18       	mov	r8,1
8000c34e:	b2 68       	st.h	r9[0xc],r8
				return true;
8000c350:	30 18       	mov	r8,1
8000c352:	c3 28       	rjmp	8000c3b6 <udi_msc_setup+0xba>
			}
		}
	}
	if (Udd_setup_is_out()) {
8000c354:	49 a8       	lddpc	r8,8000c3bc <udi_msc_setup+0xc0>
8000c356:	11 88       	ld.ub	r8,r8[0x0]
8000c358:	10 99       	mov	r9,r8
8000c35a:	30 08       	mov	r8,0
8000c35c:	f0 09 18 00 	cp.b	r9,r8
8000c360:	c2 a5       	brlt	8000c3b4 <udi_msc_setup+0xb8>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000c362:	49 78       	lddpc	r8,8000c3bc <udi_msc_setup+0xc0>
8000c364:	11 88       	ld.ub	r8,r8[0x0]
8000c366:	e2 18 00 60 	andl	r8,0x60,COH
8000c36a:	e0 48 00 20 	cp.w	r8,32
8000c36e:	c2 31       	brne	8000c3b4 <udi_msc_setup+0xb8>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000c370:	49 38       	lddpc	r8,8000c3bc <udi_msc_setup+0xc0>
8000c372:	11 98       	ld.ub	r8,r8[0x1]
8000c374:	e0 48 00 ff 	cp.w	r8,255
8000c378:	c1 e1       	brne	8000c3b4 <udi_msc_setup+0xb8>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
8000c37a:	49 18       	lddpc	r8,8000c3bc <udi_msc_setup+0xc0>
8000c37c:	90 38       	ld.sh	r8,r8[0x6]
8000c37e:	58 08       	cp.w	r8,0
8000c380:	c0 30       	breq	8000c386 <udi_msc_setup+0x8a>
					return false;
8000c382:	30 08       	mov	r8,0
8000c384:	c1 98       	rjmp	8000c3b6 <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000c386:	48 e8       	lddpc	r8,8000c3bc <udi_msc_setup+0xc0>
8000c388:	90 18       	ld.sh	r8,r8[0x2]
8000c38a:	58 08       	cp.w	r8,0
8000c38c:	c0 30       	breq	8000c392 <udi_msc_setup+0x96>
					return false;
8000c38e:	30 08       	mov	r8,0
8000c390:	c1 38       	rjmp	8000c3b6 <udi_msc_setup+0xba>
				udi_msc_b_cbw_invalid = false;
8000c392:	48 d9       	lddpc	r9,8000c3c4 <udi_msc_setup+0xc8>
8000c394:	30 08       	mov	r8,0
8000c396:	b2 88       	st.b	r9[0x0],r8
				udi_msc_b_trans_req = false;
8000c398:	48 c9       	lddpc	r9,8000c3c8 <udi_msc_setup+0xcc>
8000c39a:	30 08       	mov	r8,0
8000c39c:	b2 88       	st.b	r9[0x0],r8
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
8000c39e:	30 2c       	mov	r12,2
8000c3a0:	f0 1f 00 0b 	mcall	8000c3cc <udi_msc_setup+0xd0>
				udd_ep_abort(UDI_MSC_EP_IN);
8000c3a4:	e0 6c 00 81 	mov	r12,129
8000c3a8:	f0 1f 00 09 	mcall	8000c3cc <udi_msc_setup+0xd0>
				// Restart by CBW wait
				udi_msc_cbw_wait();
8000c3ac:	f0 1f 00 09 	mcall	8000c3d0 <udi_msc_setup+0xd4>
				return true;
8000c3b0:	30 18       	mov	r8,1
8000c3b2:	c0 28       	rjmp	8000c3b6 <udi_msc_setup+0xba>
			}
		}
	}
	return false;	// Not supported request
8000c3b4:	30 08       	mov	r8,0
}
8000c3b6:	10 9c       	mov	r12,r8
8000c3b8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3bc:	00 00       	add	r0,r0
8000c3be:	0f c4       	ld.ub	r4,r7[0x4]
8000c3c0:	00 00       	add	r0,r0
8000c3c2:	07 c8       	ld.ub	r8,r3[0x4]
8000c3c4:	00 00       	add	r0,r0
8000c3c6:	07 e0       	ld.ub	r0,r3[0x6]
8000c3c8:	00 00       	add	r0,r0
8000c3ca:	07 e1       	ld.ub	r1,r3[0x6]
8000c3cc:	80 00       	ld.sh	r0,r0[0x0]
8000c3ce:	a5 50       	asr	r0,0x5
8000c3d0:	80 00       	ld.sh	r0,r0[0x0]
8000c3d2:	c4 58       	rjmp	8000c45c <udi_msc_cbw_wait+0x4>

8000c3d4 <udi_msc_getsetting>:

uint8_t udi_msc_getsetting(void)
{
8000c3d4:	eb cd 40 80 	pushm	r7,lr
8000c3d8:	1a 97       	mov	r7,sp
	return 0;	// MSC don't have multiple alternate setting
8000c3da:	30 08       	mov	r8,0
}
8000c3dc:	10 9c       	mov	r12,r8
8000c3de:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3e2:	d7 03       	nop

8000c3e4 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
8000c3e4:	eb cd 40 80 	pushm	r7,lr
8000c3e8:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000c3ea:	48 a8       	lddpc	r8,8000c410 <udi_msc_cbw_invalid+0x2c>
8000c3ec:	11 88       	ld.ub	r8,r8[0x0]
8000c3ee:	ec 18 00 01 	eorl	r8,0x1
8000c3f2:	5c 58       	castu.b	r8
8000c3f4:	c0 a1       	brne	8000c408 <udi_msc_cbw_invalid+0x24>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
8000c3f6:	30 2c       	mov	r12,2
8000c3f8:	f0 1f 00 07 	mcall	8000c414 <udi_msc_cbw_invalid+0x30>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
8000c3fc:	fe cb 00 18 	sub	r11,pc,24
8000c400:	30 2c       	mov	r12,2
8000c402:	f0 1f 00 06 	mcall	8000c418 <udi_msc_cbw_invalid+0x34>
8000c406:	c0 28       	rjmp	8000c40a <udi_msc_cbw_invalid+0x26>
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000c408:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_OUT);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
}
8000c40a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c40e:	00 00       	add	r0,r0
8000c410:	00 00       	add	r0,r0
8000c412:	07 e0       	ld.ub	r0,r3[0x6]
8000c414:	80 00       	ld.sh	r0,r0[0x0]
8000c416:	a1 d8       	cbr	r8,0x1
8000c418:	80 00       	ld.sh	r0,r0[0x0]
8000c41a:	a5 ec       	*unknown*

8000c41c <udi_msc_csw_invalid>:

static void udi_msc_csw_invalid(void)
{
8000c41c:	eb cd 40 80 	pushm	r7,lr
8000c420:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000c422:	48 b8       	lddpc	r8,8000c44c <udi_msc_csw_invalid+0x30>
8000c424:	11 88       	ld.ub	r8,r8[0x0]
8000c426:	ec 18 00 01 	eorl	r8,0x1
8000c42a:	5c 58       	castu.b	r8
8000c42c:	c0 c1       	brne	8000c444 <udi_msc_csw_invalid+0x28>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
8000c42e:	e0 6c 00 81 	mov	r12,129
8000c432:	f0 1f 00 08 	mcall	8000c450 <udi_msc_csw_invalid+0x34>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
8000c436:	fe cb 00 1a 	sub	r11,pc,26
8000c43a:	e0 6c 00 81 	mov	r12,129
8000c43e:	f0 1f 00 06 	mcall	8000c454 <udi_msc_csw_invalid+0x38>
8000c442:	c0 28       	rjmp	8000c446 <udi_msc_csw_invalid+0x2a>
}

static void udi_msc_csw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000c444:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_IN);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}
8000c446:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c44a:	00 00       	add	r0,r0
8000c44c:	00 00       	add	r0,r0
8000c44e:	07 e0       	ld.ub	r0,r3[0x6]
8000c450:	80 00       	ld.sh	r0,r0[0x0]
8000c452:	a1 d8       	cbr	r8,0x1
8000c454:	80 00       	ld.sh	r0,r0[0x0]
8000c456:	a5 ec       	*unknown*

8000c458 <udi_msc_cbw_wait>:

static void udi_msc_cbw_wait(void)
{
8000c458:	eb cd 40 80 	pushm	r7,lr
8000c45c:	1a 97       	mov	r7,sp
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
8000c45e:	48 aa       	lddpc	r10,8000c484 <udi_msc_cbw_wait+0x2c>
8000c460:	48 a8       	lddpc	r8,8000c488 <udi_msc_cbw_wait+0x30>
8000c462:	31 f9       	mov	r9,31
8000c464:	30 1b       	mov	r11,1
8000c466:	30 2c       	mov	r12,2
8000c468:	f0 1f 00 09 	mcall	8000c48c <udi_msc_cbw_wait+0x34>
8000c46c:	18 98       	mov	r8,r12
8000c46e:	ec 18 00 01 	eorl	r8,0x1
8000c472:	5c 58       	castu.b	r8
8000c474:	c0 60       	breq	8000c480 <udi_msc_cbw_wait+0x28>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
8000c476:	fe cb 00 1e 	sub	r11,pc,30
8000c47a:	30 2c       	mov	r12,2
8000c47c:	f0 1f 00 05 	mcall	8000c490 <udi_msc_cbw_wait+0x38>
	}
}
8000c480:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c484:	00 00       	add	r0,r0
8000c486:	07 a8       	ld.ub	r8,r3[0x2]
8000c488:	80 00       	ld.sh	r0,r0[0x0]
8000c48a:	c4 94       	brge	8000c51c <udi_msc_cbw_received+0x88>
8000c48c:	80 00       	ld.sh	r0,r0[0x0]
8000c48e:	a4 2c       	st.h	r2[0x4],r12
8000c490:	80 00       	ld.sh	r0,r0[0x0]
8000c492:	a5 ec       	*unknown*

8000c494 <udi_msc_cbw_received>:


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
8000c494:	eb cd 40 80 	pushm	r7,lr
8000c498:	1a 97       	mov	r7,sp
8000c49a:	20 3d       	sub	sp,12
8000c49c:	ef 4c ff fc 	st.w	r7[-4],r12
8000c4a0:	ef 4b ff f8 	st.w	r7[-8],r11
8000c4a4:	14 98       	mov	r8,r10
8000c4a6:	ef 68 ff f4 	st.b	r7[-12],r8
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
8000c4aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c4ae:	58 08       	cp.w	r8,0
8000c4b0:	c6 11       	brne	8000c572 <udi_msc_cbw_received+0xde>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000c4b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c4b6:	59 f8       	cp.w	r8,31
8000c4b8:	c0 91       	brne	8000c4ca <udi_msc_cbw_received+0x36>
			|| (udi_msc_cbw.dCBWSignature !=
8000c4ba:	4b 18       	lddpc	r8,8000c57c <udi_msc_cbw_received+0xe8>
8000c4bc:	70 08       	ld.w	r8,r8[0x0]
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000c4be:	e0 69 42 43 	mov	r9,16963
8000c4c2:	ea 19 55 53 	orh	r9,0x5553
8000c4c6:	12 38       	cp.w	r8,r9
8000c4c8:	c0 90       	breq	8000c4da <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
8000c4ca:	4a e9       	lddpc	r9,8000c580 <udi_msc_cbw_received+0xec>
8000c4cc:	30 18       	mov	r8,1
8000c4ce:	b2 88       	st.b	r9[0x0],r8
		udi_msc_cbw_invalid();
8000c4d0:	f0 1f 00 2d 	mcall	8000c584 <udi_msc_cbw_received+0xf0>
		udi_msc_csw_invalid();
8000c4d4:	f0 1f 00 2d 	mcall	8000c588 <udi_msc_cbw_received+0xf4>
		return;
8000c4d8:	c4 e8       	rjmp	8000c574 <udi_msc_cbw_received+0xe0>
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
8000c4da:	4a 98       	lddpc	r8,8000c57c <udi_msc_cbw_received+0xe8>
8000c4dc:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000c4e0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000c4e4:	4a 69       	lddpc	r9,8000c57c <udi_msc_cbw_received+0xe8>
8000c4e6:	f3 68 00 0d 	st.b	r9[13],r8
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
8000c4ea:	4a 58       	lddpc	r8,8000c57c <udi_msc_cbw_received+0xe8>
8000c4ec:	f1 39 00 0d 	ld.ub	r9,r8[13]
8000c4f0:	4a 78       	lddpc	r8,8000c58c <udi_msc_cbw_received+0xf8>
8000c4f2:	11 88       	ld.ub	r8,r8[0x0]
8000c4f4:	f0 09 18 00 	cp.b	r9,r8
8000c4f8:	e0 88 00 07 	brls	8000c506 <udi_msc_cbw_received+0x72>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
8000c4fc:	f0 1f 00 25 	mcall	8000c590 <udi_msc_cbw_received+0xfc>
		udi_msc_csw_process();
8000c500:	f0 1f 00 25 	mcall	8000c594 <udi_msc_cbw_received+0x100>
		return;
8000c504:	c3 88       	rjmp	8000c574 <udi_msc_cbw_received+0xe0>
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
8000c506:	49 e8       	lddpc	r8,8000c57c <udi_msc_cbw_received+0xe8>
8000c508:	70 28       	ld.w	r8,r8[0x8]
8000c50a:	5c b8       	swap.b	r8
8000c50c:	10 99       	mov	r9,r8
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
8000c50e:	4a 38       	lddpc	r8,8000c598 <udi_msc_cbw_received+0x104>
8000c510:	91 29       	st.w	r8[0x8],r9
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
8000c512:	49 b8       	lddpc	r8,8000c57c <udi_msc_cbw_received+0xe8>
8000c514:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000c518:	e0 48 00 5a 	cp.w	r8,90
8000c51c:	e0 8b 00 26 	brhi	8000c568 <udi_msc_cbw_received+0xd4>
8000c520:	49 f9       	lddpc	r9,8000c59c <udi_msc_cbw_received+0x108>
8000c522:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case SPC_REQUEST_SENSE:
		udi_msc_spc_requestsense();
8000c526:	f0 1f 00 1f 	mcall	8000c5a0 <udi_msc_cbw_received+0x10c>
		break;
8000c52a:	c2 58       	rjmp	8000c574 <udi_msc_cbw_received+0xe0>

	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
8000c52c:	f0 1f 00 1e 	mcall	8000c5a4 <udi_msc_cbw_received+0x110>
		break;
8000c530:	c2 28       	rjmp	8000c574 <udi_msc_cbw_received+0xe0>

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
8000c532:	30 0c       	mov	r12,0
8000c534:	f0 1f 00 1d 	mcall	8000c5a8 <udi_msc_cbw_received+0x114>
		break;
8000c538:	c1 e8       	rjmp	8000c574 <udi_msc_cbw_received+0xe0>
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
8000c53a:	30 1c       	mov	r12,1
8000c53c:	f0 1f 00 1b 	mcall	8000c5a8 <udi_msc_cbw_received+0x114>
		break;
8000c540:	c1 a8       	rjmp	8000c574 <udi_msc_cbw_received+0xe0>

	case SPC_TEST_UNIT_READY:
		udi_msc_spc_testunitready();
8000c542:	f0 1f 00 1b 	mcall	8000c5ac <udi_msc_cbw_received+0x118>
		break;
8000c546:	c1 78       	rjmp	8000c574 <udi_msc_cbw_received+0xe0>

	case SBC_READ_CAPACITY10:
		udi_msc_sbc_read_capacity();
8000c548:	f0 1f 00 1a 	mcall	8000c5b0 <udi_msc_cbw_received+0x11c>
		break;
8000c54c:	c1 48       	rjmp	8000c574 <udi_msc_cbw_received+0xe0>
	case SBC_START_STOP_UNIT:
		// Accepts request to support plug/plug in case of card reader
	case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
8000c54e:	f0 1f 00 1a 	mcall	8000c5b4 <udi_msc_cbw_received+0x120>
		udi_msc_csw_process();
8000c552:	f0 1f 00 11 	mcall	8000c594 <udi_msc_cbw_received+0x100>
		break;
8000c556:	c0 f8       	rjmp	8000c574 <udi_msc_cbw_received+0xe0>

	case SBC_READ10:
		udi_msc_sbc_trans(true);
8000c558:	30 1c       	mov	r12,1
8000c55a:	f0 1f 00 18 	mcall	8000c5b8 <udi_msc_cbw_received+0x124>
		break;
8000c55e:	c0 b8       	rjmp	8000c574 <udi_msc_cbw_received+0xe0>

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
8000c560:	30 0c       	mov	r12,0
8000c562:	f0 1f 00 16 	mcall	8000c5b8 <udi_msc_cbw_received+0x124>
		break;
8000c566:	c0 78       	rjmp	8000c574 <udi_msc_cbw_received+0xe0>

	default:
		udi_msc_sense_command_invalid();
8000c568:	f0 1f 00 15 	mcall	8000c5bc <udi_msc_cbw_received+0x128>
		udi_msc_csw_process();
8000c56c:	f0 1f 00 0a 	mcall	8000c594 <udi_msc_cbw_received+0x100>
8000c570:	c0 28       	rjmp	8000c574 <udi_msc_cbw_received+0xe0>
{
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
		// Transfer aborted
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000c572:	d7 03       	nop
	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
		break;
	}
}
8000c574:	2f dd       	sub	sp,-12
8000c576:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c57a:	00 00       	add	r0,r0
8000c57c:	00 00       	add	r0,r0
8000c57e:	07 a8       	ld.ub	r8,r3[0x2]
8000c580:	00 00       	add	r0,r0
8000c582:	07 e0       	ld.ub	r0,r3[0x6]
8000c584:	80 00       	ld.sh	r0,r0[0x0]
8000c586:	c3 e4       	brge	8000c602 <udi_msc_cbw_validate+0x42>
8000c588:	80 00       	ld.sh	r0,r0[0x0]
8000c58a:	c4 1c       	rcall	8000c60c <udi_msc_cbw_validate+0x4c>
8000c58c:	00 00       	add	r0,r0
8000c58e:	07 c8       	ld.ub	r8,r3[0x4]
8000c590:	80 00       	ld.sh	r0,r0[0x0]
8000c592:	c8 bc       	rcall	8000c6a8 <udi_msc_data_sent+0x38>
8000c594:	80 00       	ld.sh	r0,r0[0x0]
8000c596:	c6 bc       	rcall	8000c66c <udi_msc_data_send+0x4c>
8000c598:	00 00       	add	r0,r0
8000c59a:	01 54       	ld.sh	r4,--r0
8000c59c:	80 00       	ld.sh	r0,r0[0x0]
8000c59e:	ed 54 80 00 	st.h	r6[-32768],r4
8000c5a2:	c8 f4       	brge	8000c4c0 <udi_msc_cbw_received+0x2c>
8000c5a4:	80 00       	ld.sh	r0,r0[0x0]
8000c5a6:	c9 58       	rjmp	8000c6d0 <udi_msc_csw_process+0x14>
8000c5a8:	80 00       	ld.sh	r0,r0[0x0]
8000c5aa:	ca f0       	breq	8000c508 <udi_msc_cbw_received+0x74>
8000c5ac:	80 00       	ld.sh	r0,r0[0x0]
8000c5ae:	ca c8       	rjmp	8000c706 <udi_msc_csw_process+0x4a>
8000c5b0:	80 00       	ld.sh	r0,r0[0x0]
8000c5b2:	cc 40       	breq	8000c53a <udi_msc_cbw_received+0xa6>
8000c5b4:	80 00       	ld.sh	r0,r0[0x0]
8000c5b6:	c8 30       	breq	8000c4bc <udi_msc_cbw_received+0x28>
8000c5b8:	80 00       	ld.sh	r0,r0[0x0]
8000c5ba:	cc dc       	rcall	8000c754 <udi_msc_csw_send+0x3c>
8000c5bc:	80 00       	ld.sh	r0,r0[0x0]
8000c5be:	c8 d8       	rjmp	8000c6d8 <udi_msc_csw_process+0x1c>

8000c5c0 <udi_msc_cbw_validate>:


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
8000c5c0:	eb cd 40 80 	pushm	r7,lr
8000c5c4:	1a 97       	mov	r7,sp
8000c5c6:	20 2d       	sub	sp,8
8000c5c8:	ef 4c ff fc 	st.w	r7[-4],r12
8000c5cc:	16 98       	mov	r8,r11
8000c5ce:	ef 68 ff f8 	st.b	r7[-8],r8
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000c5d2:	49 08       	lddpc	r8,8000c610 <udi_msc_cbw_validate+0x50>
8000c5d4:	f1 39 00 0c 	ld.ub	r9,r8[12]
8000c5d8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c5dc:	f3 e8 20 08 	eor	r8,r9,r8
8000c5e0:	5c 58       	castu.b	r8
8000c5e2:	10 99       	mov	r9,r8
8000c5e4:	30 08       	mov	r8,0
8000c5e6:	f0 09 18 00 	cp.b	r9,r8
8000c5ea:	c0 75       	brlt	8000c5f8 <udi_msc_cbw_validate+0x38>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
8000c5ec:	48 a8       	lddpc	r8,8000c614 <udi_msc_cbw_validate+0x54>
8000c5ee:	70 29       	ld.w	r9,r8[0x8]
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000c5f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c5f4:	10 39       	cp.w	r9,r8
8000c5f6:	c0 72       	brcc	8000c604 <udi_msc_cbw_validate+0x44>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
		udi_msc_sense_fail_cdb_invalid();
8000c5f8:	f0 1f 00 08 	mcall	8000c618 <udi_msc_cbw_validate+0x58>
		udi_msc_csw_process();
8000c5fc:	f0 1f 00 08 	mcall	8000c61c <udi_msc_cbw_validate+0x5c>
		return false;
8000c600:	30 08       	mov	r8,0
8000c602:	c0 28       	rjmp	8000c606 <udi_msc_cbw_validate+0x46>
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
8000c604:	30 18       	mov	r8,1
}
8000c606:	10 9c       	mov	r12,r8
8000c608:	2f ed       	sub	sp,-8
8000c60a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c60e:	00 00       	add	r0,r0
8000c610:	00 00       	add	r0,r0
8000c612:	07 a8       	ld.ub	r8,r3[0x2]
8000c614:	00 00       	add	r0,r0
8000c616:	01 54       	ld.sh	r4,--r0
8000c618:	80 00       	ld.sh	r0,r0[0x0]
8000c61a:	c8 bc       	rcall	8000c730 <udi_msc_csw_send+0x18>
8000c61c:	80 00       	ld.sh	r0,r0[0x0]
8000c61e:	c6 bc       	rcall	8000c6f4 <udi_msc_csw_process+0x38>

8000c620 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
8000c620:	eb cd 40 80 	pushm	r7,lr
8000c624:	1a 97       	mov	r7,sp
8000c626:	20 2d       	sub	sp,8
8000c628:	ef 4c ff fc 	st.w	r7[-4],r12
8000c62c:	16 98       	mov	r8,r11
8000c62e:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
8000c632:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c636:	48 b8       	lddpc	r8,8000c660 <udi_msc_data_send+0x40>
8000c638:	ee fa ff fc 	ld.w	r10,r7[-4]
8000c63c:	30 1b       	mov	r11,1
8000c63e:	e0 6c 00 81 	mov	r12,129
8000c642:	f0 1f 00 09 	mcall	8000c664 <udi_msc_data_send+0x44>
8000c646:	18 98       	mov	r8,r12
8000c648:	ec 18 00 01 	eorl	r8,0x1
8000c64c:	5c 58       	castu.b	r8
8000c64e:	c0 50       	breq	8000c658 <udi_msc_data_send+0x38>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
8000c650:	f0 1f 00 06 	mcall	8000c668 <udi_msc_data_send+0x48>
		udi_msc_csw_process();
8000c654:	f0 1f 00 06 	mcall	8000c66c <udi_msc_data_send+0x4c>
	}
}
8000c658:	2f ed       	sub	sp,-8
8000c65a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c65e:	00 00       	add	r0,r0
8000c660:	80 00       	ld.sh	r0,r0[0x0]
8000c662:	c6 70       	breq	8000c730 <udi_msc_csw_send+0x18>
8000c664:	80 00       	ld.sh	r0,r0[0x0]
8000c666:	a4 2c       	st.h	r2[0x4],r12
8000c668:	80 00       	ld.sh	r0,r0[0x0]
8000c66a:	c8 88       	rjmp	8000c77a <udi_msc_csw_sent+0x1e>
8000c66c:	80 00       	ld.sh	r0,r0[0x0]
8000c66e:	c6 bc       	rcall	8000c744 <udi_msc_csw_send+0x2c>

8000c670 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000c670:	eb cd 40 80 	pushm	r7,lr
8000c674:	1a 97       	mov	r7,sp
8000c676:	20 3d       	sub	sp,12
8000c678:	ef 4c ff fc 	st.w	r7[-4],r12
8000c67c:	ef 4b ff f8 	st.w	r7[-8],r11
8000c680:	14 98       	mov	r8,r10
8000c682:	ef 68 ff f4 	st.b	r7[-12],r8
	if (UDD_EP_TRANSFER_OK != status) {
8000c686:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c68a:	58 08       	cp.w	r8,0
8000c68c:	c0 d1       	brne	8000c6a6 <udi_msc_data_sent+0x36>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
8000c68e:	f0 1f 00 09 	mcall	8000c6b0 <udi_msc_data_sent+0x40>
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
8000c692:	48 98       	lddpc	r8,8000c6b4 <udi_msc_data_sent+0x44>
8000c694:	70 29       	ld.w	r9,r8[0x8]
8000c696:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c69a:	10 19       	sub	r9,r8
8000c69c:	48 68       	lddpc	r8,8000c6b4 <udi_msc_data_sent+0x44>
8000c69e:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_process();
8000c6a0:	f0 1f 00 06 	mcall	8000c6b8 <udi_msc_data_sent+0x48>
8000c6a4:	c0 28       	rjmp	8000c6a8 <udi_msc_data_sent+0x38>
		udd_ep_id_t ep)
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000c6a6:	d7 03       	nop
	// Update sense data
	udi_msc_sense_pass();
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
	udi_msc_csw_process();
}
8000c6a8:	2f dd       	sub	sp,-12
8000c6aa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c6ae:	00 00       	add	r0,r0
8000c6b0:	80 00       	ld.sh	r0,r0[0x0]
8000c6b2:	c8 30       	breq	8000c5b8 <udi_msc_cbw_received+0x124>
8000c6b4:	00 00       	add	r0,r0
8000c6b6:	01 54       	ld.sh	r4,--r0
8000c6b8:	80 00       	ld.sh	r0,r0[0x0]
8000c6ba:	c6 bc       	rcall	8000c790 <udi_msc_clear_sense+0x10>

8000c6bc <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
8000c6bc:	eb cd 40 80 	pushm	r7,lr
8000c6c0:	1a 97       	mov	r7,sp
	if (0 != udi_msc_csw.dCSWDataResidue) {
8000c6c2:	49 28       	lddpc	r8,8000c708 <udi_msc_csw_process+0x4c>
8000c6c4:	70 28       	ld.w	r8,r8[0x8]
8000c6c6:	58 08       	cp.w	r8,0
8000c6c8:	c1 10       	breq	8000c6ea <udi_msc_csw_process+0x2e>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
8000c6ca:	49 18       	lddpc	r8,8000c70c <udi_msc_csw_process+0x50>
8000c6cc:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000c6d0:	10 99       	mov	r9,r8
8000c6d2:	30 08       	mov	r8,0
8000c6d4:	f0 09 18 00 	cp.b	r9,r8
8000c6d8:	c0 64       	brge	8000c6e4 <udi_msc_csw_process+0x28>
			udd_ep_set_halt(UDI_MSC_EP_IN);
8000c6da:	e0 6c 00 81 	mov	r12,129
8000c6de:	f0 1f 00 0d 	mcall	8000c710 <udi_msc_csw_process+0x54>
8000c6e2:	c0 48       	rjmp	8000c6ea <udi_msc_csw_process+0x2e>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
8000c6e4:	30 2c       	mov	r12,2
8000c6e6:	f0 1f 00 0b 	mcall	8000c710 <udi_msc_csw_process+0x54>
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
8000c6ea:	48 98       	lddpc	r8,8000c70c <udi_msc_csw_process+0x50>
8000c6ec:	70 19       	ld.w	r9,r8[0x4]
8000c6ee:	48 78       	lddpc	r8,8000c708 <udi_msc_csw_process+0x4c>
8000c6f0:	91 19       	st.w	r8[0x4],r9
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
8000c6f2:	48 68       	lddpc	r8,8000c708 <udi_msc_csw_process+0x4c>
8000c6f4:	70 28       	ld.w	r8,r8[0x8]
8000c6f6:	5c b8       	swap.b	r8
8000c6f8:	10 99       	mov	r9,r8
8000c6fa:	48 48       	lddpc	r8,8000c708 <udi_msc_csw_process+0x4c>
8000c6fc:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_send();
8000c6fe:	f0 1f 00 06 	mcall	8000c714 <udi_msc_csw_process+0x58>
}
8000c702:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c706:	00 00       	add	r0,r0
8000c708:	00 00       	add	r0,r0
8000c70a:	01 54       	ld.sh	r4,--r0
8000c70c:	00 00       	add	r0,r0
8000c70e:	07 a8       	ld.ub	r8,r3[0x2]
8000c710:	80 00       	ld.sh	r0,r0[0x0]
8000c712:	a1 d8       	cbr	r8,0x1
8000c714:	80 00       	ld.sh	r0,r0[0x0]
8000c716:	c7 18       	rjmp	8000c7f8 <udi_msc_sense_fail+0x50>

8000c718 <udi_msc_csw_send>:


void udi_msc_csw_send(void)
{
8000c718:	eb cd 40 80 	pushm	r7,lr
8000c71c:	1a 97       	mov	r7,sp
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
8000c71e:	48 ba       	lddpc	r10,8000c748 <udi_msc_csw_send+0x30>
8000c720:	48 b8       	lddpc	r8,8000c74c <udi_msc_csw_send+0x34>
8000c722:	30 d9       	mov	r9,13
8000c724:	30 0b       	mov	r11,0
8000c726:	e0 6c 00 81 	mov	r12,129
8000c72a:	f0 1f 00 0a 	mcall	8000c750 <udi_msc_csw_send+0x38>
8000c72e:	18 98       	mov	r8,r12
8000c730:	ec 18 00 01 	eorl	r8,0x1
8000c734:	5c 58       	castu.b	r8
8000c736:	c0 60       	breq	8000c742 <udi_msc_csw_send+0x2a>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
8000c738:	48 7b       	lddpc	r11,8000c754 <udi_msc_csw_send+0x3c>
8000c73a:	e0 6c 00 81 	mov	r12,129
8000c73e:	f0 1f 00 07 	mcall	8000c758 <udi_msc_csw_send+0x40>
	}
}
8000c742:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c746:	00 00       	add	r0,r0
8000c748:	00 00       	add	r0,r0
8000c74a:	01 54       	ld.sh	r4,--r0
8000c74c:	80 00       	ld.sh	r0,r0[0x0]
8000c74e:	c7 5c       	rcall	8000c838 <udi_msc_sense_pass+0x8>
8000c750:	80 00       	ld.sh	r0,r0[0x0]
8000c752:	a4 2c       	st.h	r2[0x4],r12
8000c754:	80 00       	ld.sh	r0,r0[0x0]
8000c756:	c7 18       	rjmp	8000c838 <udi_msc_sense_pass+0x8>
8000c758:	80 00       	ld.sh	r0,r0[0x0]
8000c75a:	a5 ec       	*unknown*

8000c75c <udi_msc_csw_sent>:


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000c75c:	eb cd 40 80 	pushm	r7,lr
8000c760:	1a 97       	mov	r7,sp
8000c762:	20 3d       	sub	sp,12
8000c764:	ef 4c ff fc 	st.w	r7[-4],r12
8000c768:	ef 4b ff f8 	st.w	r7[-8],r11
8000c76c:	14 98       	mov	r8,r10
8000c76e:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
8000c772:	f0 1f 00 03 	mcall	8000c77c <udi_msc_csw_sent+0x20>
}
8000c776:	2f dd       	sub	sp,-12
8000c778:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c77c:	80 00       	ld.sh	r0,r0[0x0]
8000c77e:	c4 58       	rjmp	8000c808 <udi_msc_sense_fail+0x60>

8000c780 <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
8000c780:	eb cd 40 80 	pushm	r7,lr
8000c784:	1a 97       	mov	r7,sp
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
8000c786:	31 2a       	mov	r10,18
8000c788:	30 0b       	mov	r11,0
8000c78a:	48 6c       	lddpc	r12,8000c7a0 <udi_msc_clear_sense+0x20>
8000c78c:	f0 1f 00 06 	mcall	8000c7a4 <udi_msc_clear_sense+0x24>
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
8000c790:	48 49       	lddpc	r9,8000c7a0 <udi_msc_clear_sense+0x20>
8000c792:	3f 08       	mov	r8,-16
8000c794:	b2 88       	st.b	r9[0x0],r8
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
8000c796:	48 39       	lddpc	r9,8000c7a0 <udi_msc_clear_sense+0x20>
8000c798:	30 a8       	mov	r8,10
8000c79a:	b2 f8       	st.b	r9[0x7],r8
}
8000c79c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c7a0:	00 00       	add	r0,r0
8000c7a2:	07 cc       	ld.ub	r12,r3[0x4]
8000c7a4:	80 00       	ld.sh	r0,r0[0x0]
8000c7a6:	e7 d6       	*unknown*

8000c7a8 <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
8000c7a8:	eb cd 40 80 	pushm	r7,lr
8000c7ac:	1a 97       	mov	r7,sp
8000c7ae:	20 3d       	sub	sp,12
8000c7b0:	18 99       	mov	r9,r12
8000c7b2:	16 98       	mov	r8,r11
8000c7b4:	ef 4a ff f4 	st.w	r7[-12],r10
8000c7b8:	ef 69 ff fc 	st.b	r7[-4],r9
8000c7bc:	ef 58 ff f8 	st.h	r7[-8],r8
	udi_msc_clear_sense();
8000c7c0:	f0 1f 00 19 	mcall	8000c824 <udi_msc_sense_fail+0x7c>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
8000c7c4:	49 99       	lddpc	r9,8000c828 <udi_msc_sense_fail+0x80>
8000c7c6:	30 18       	mov	r8,1
8000c7c8:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.sense_flag_key = sense_key;
8000c7cc:	49 89       	lddpc	r9,8000c82c <udi_msc_sense_fail+0x84>
8000c7ce:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c7d2:	b2 a8       	st.b	r9[0x2],r8
	udi_msc_sense.information[0] = lba >> 24;
8000c7d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c7d8:	b9 88       	lsr	r8,0x18
8000c7da:	5c 58       	castu.b	r8
8000c7dc:	49 49       	lddpc	r9,8000c82c <udi_msc_sense_fail+0x84>
8000c7de:	b2 b8       	st.b	r9[0x3],r8
	udi_msc_sense.information[1] = lba >> 16;
8000c7e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c7e4:	b1 88       	lsr	r8,0x10
8000c7e6:	5c 58       	castu.b	r8
8000c7e8:	49 19       	lddpc	r9,8000c82c <udi_msc_sense_fail+0x84>
8000c7ea:	b2 c8       	st.b	r9[0x4],r8
	udi_msc_sense.information[2] = lba >> 8;
8000c7ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c7f0:	a9 88       	lsr	r8,0x8
8000c7f2:	5c 58       	castu.b	r8
8000c7f4:	48 e9       	lddpc	r9,8000c82c <udi_msc_sense_fail+0x84>
8000c7f6:	b2 d8       	st.b	r9[0x5],r8
	udi_msc_sense.information[3] = lba;
8000c7f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c7fc:	5c 58       	castu.b	r8
8000c7fe:	48 c9       	lddpc	r9,8000c82c <udi_msc_sense_fail+0x84>
8000c800:	b2 e8       	st.b	r9[0x6],r8
	udi_msc_sense.AddSenseCode = add_sense >> 8;
8000c802:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000c806:	a9 88       	lsr	r8,0x8
8000c808:	5c 88       	casts.h	r8
8000c80a:	5c 58       	castu.b	r8
8000c80c:	48 89       	lddpc	r9,8000c82c <udi_msc_sense_fail+0x84>
8000c80e:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
8000c812:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000c816:	5c 58       	castu.b	r8
8000c818:	48 59       	lddpc	r9,8000c82c <udi_msc_sense_fail+0x84>
8000c81a:	f3 68 00 0d 	st.b	r9[13],r8
}
8000c81e:	2f dd       	sub	sp,-12
8000c820:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c824:	80 00       	ld.sh	r0,r0[0x0]
8000c826:	c7 80       	breq	8000c916 <udi_msc_spc_requestsense+0x22>
8000c828:	00 00       	add	r0,r0
8000c82a:	01 54       	ld.sh	r4,--r0
8000c82c:	00 00       	add	r0,r0
8000c82e:	07 cc       	ld.ub	r12,r3[0x4]

8000c830 <udi_msc_sense_pass>:

static void udi_msc_sense_pass(void)
{
8000c830:	eb cd 40 80 	pushm	r7,lr
8000c834:	1a 97       	mov	r7,sp
	udi_msc_clear_sense();
8000c836:	f0 1f 00 05 	mcall	8000c848 <udi_msc_sense_pass+0x18>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
8000c83a:	48 59       	lddpc	r9,8000c84c <udi_msc_sense_pass+0x1c>
8000c83c:	30 08       	mov	r8,0
8000c83e:	f3 68 00 0c 	st.b	r9[12],r8
}
8000c842:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c846:	00 00       	add	r0,r0
8000c848:	80 00       	ld.sh	r0,r0[0x0]
8000c84a:	c7 80       	breq	8000c93a <udi_msc_spc_requestsense+0x46>
8000c84c:	00 00       	add	r0,r0
8000c84e:	01 54       	ld.sh	r4,--r0

8000c850 <udi_msc_sense_fail_not_present>:


static void udi_msc_sense_fail_not_present(void)
{
8000c850:	eb cd 40 80 	pushm	r7,lr
8000c854:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
8000c856:	30 0a       	mov	r10,0
8000c858:	e0 6b 3a 00 	mov	r11,14848
8000c85c:	30 2c       	mov	r12,2
8000c85e:	f0 1f 00 03 	mcall	8000c868 <udi_msc_sense_fail_not_present+0x18>
}
8000c862:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c866:	00 00       	add	r0,r0
8000c868:	80 00       	ld.sh	r0,r0[0x0]
8000c86a:	c7 a8       	rjmp	8000c95e <udi_msc_spc_inquiry+0x6>

8000c86c <udi_msc_sense_fail_busy_or_change>:

static void udi_msc_sense_fail_busy_or_change(void)
{
8000c86c:	eb cd 40 80 	pushm	r7,lr
8000c870:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
8000c872:	30 0a       	mov	r10,0
8000c874:	e0 6b 28 00 	mov	r11,10240
8000c878:	30 6c       	mov	r12,6
8000c87a:	f0 1f 00 03 	mcall	8000c884 <udi_msc_sense_fail_busy_or_change+0x18>
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}
8000c87e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c882:	00 00       	add	r0,r0
8000c884:	80 00       	ld.sh	r0,r0[0x0]
8000c886:	c7 a8       	rjmp	8000c97a <udi_msc_spc_inquiry+0x22>

8000c888 <udi_msc_sense_fail_hardware>:

static void udi_msc_sense_fail_hardware(void)
{
8000c888:	eb cd 40 80 	pushm	r7,lr
8000c88c:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
8000c88e:	30 0a       	mov	r10,0
8000c890:	30 0b       	mov	r11,0
8000c892:	30 4c       	mov	r12,4
8000c894:	f0 1f 00 02 	mcall	8000c89c <udi_msc_sense_fail_hardware+0x14>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}
8000c898:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c89c:	80 00       	ld.sh	r0,r0[0x0]
8000c89e:	c7 a8       	rjmp	8000c992 <udi_msc_spc_inquiry+0x3a>

8000c8a0 <udi_msc_sense_fail_protected>:

static void udi_msc_sense_fail_protected(void)
{
8000c8a0:	eb cd 40 80 	pushm	r7,lr
8000c8a4:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
8000c8a6:	30 0a       	mov	r10,0
8000c8a8:	e0 6b 27 00 	mov	r11,9984
8000c8ac:	30 7c       	mov	r12,7
8000c8ae:	f0 1f 00 03 	mcall	8000c8b8 <udi_msc_sense_fail_protected+0x18>
}
8000c8b2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8b6:	00 00       	add	r0,r0
8000c8b8:	80 00       	ld.sh	r0,r0[0x0]
8000c8ba:	c7 a8       	rjmp	8000c9ae <udi_msc_spc_inquiry+0x56>

8000c8bc <udi_msc_sense_fail_cdb_invalid>:

static void udi_msc_sense_fail_cdb_invalid(void)
{
8000c8bc:	eb cd 40 80 	pushm	r7,lr
8000c8c0:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000c8c2:	30 0a       	mov	r10,0
8000c8c4:	e0 6b 24 00 	mov	r11,9216
8000c8c8:	30 5c       	mov	r12,5
8000c8ca:	f0 1f 00 03 	mcall	8000c8d4 <udi_msc_sense_fail_cdb_invalid+0x18>
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
8000c8ce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8d2:	00 00       	add	r0,r0
8000c8d4:	80 00       	ld.sh	r0,r0[0x0]
8000c8d6:	c7 a8       	rjmp	8000c9ca <udi_msc_spc_inquiry+0x72>

8000c8d8 <udi_msc_sense_command_invalid>:

static void udi_msc_sense_command_invalid(void)
{
8000c8d8:	eb cd 40 80 	pushm	r7,lr
8000c8dc:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000c8de:	30 0a       	mov	r10,0
8000c8e0:	e0 6b 20 00 	mov	r11,8192
8000c8e4:	30 5c       	mov	r12,5
8000c8e6:	f0 1f 00 03 	mcall	8000c8f0 <udi_msc_sense_command_invalid+0x18>
			SCSI_ASC_INVALID_COMMAND_OPERATION_CODE, 0);
}
8000c8ea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8ee:	00 00       	add	r0,r0
8000c8f0:	80 00       	ld.sh	r0,r0[0x0]
8000c8f2:	c7 a8       	rjmp	8000c9e6 <udi_msc_spc_inquiry+0x8e>

8000c8f4 <udi_msc_spc_requestsense>:

//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
8000c8f4:	eb cd 40 80 	pushm	r7,lr
8000c8f8:	1a 97       	mov	r7,sp
8000c8fa:	20 1d       	sub	sp,4
	uint8_t length = udi_msc_cbw.CDB[4];
8000c8fc:	49 38       	lddpc	r8,8000c948 <udi_msc_spc_requestsense+0x54>
8000c8fe:	f1 38 00 13 	ld.ub	r8,r8[19]
8000c902:	ef 68 ff ff 	st.b	r7[-1],r8

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
8000c906:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c90a:	31 28       	mov	r8,18
8000c90c:	f0 09 18 00 	cp.b	r9,r8
8000c910:	e0 88 00 05 	brls	8000c91a <udi_msc_spc_requestsense+0x26>
		length = sizeof(udi_msc_sense);
8000c914:	31 28       	mov	r8,18
8000c916:	ef 68 ff ff 	st.b	r7[-1],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000c91a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c91e:	e0 6b 00 80 	mov	r11,128
8000c922:	10 9c       	mov	r12,r8
8000c924:	f0 1f 00 0a 	mcall	8000c94c <udi_msc_spc_requestsense+0x58>
8000c928:	18 98       	mov	r8,r12
8000c92a:	ec 18 00 01 	eorl	r8,0x1
8000c92e:	5c 58       	castu.b	r8
8000c930:	c0 81       	brne	8000c940 <udi_msc_spc_requestsense+0x4c>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
8000c932:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c936:	10 9b       	mov	r11,r8
8000c938:	48 6c       	lddpc	r12,8000c950 <udi_msc_spc_requestsense+0x5c>
8000c93a:	f0 1f 00 07 	mcall	8000c954 <udi_msc_spc_requestsense+0x60>
8000c93e:	c0 28       	rjmp	8000c942 <udi_msc_spc_requestsense+0x4e>
	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000c940:	d7 03       	nop
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
}
8000c942:	2f fd       	sub	sp,-4
8000c944:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c948:	00 00       	add	r0,r0
8000c94a:	07 a8       	ld.ub	r8,r3[0x2]
8000c94c:	80 00       	ld.sh	r0,r0[0x0]
8000c94e:	c5 c0       	breq	8000ca06 <udi_msc_spc_inquiry+0xae>
8000c950:	00 00       	add	r0,r0
8000c952:	07 cc       	ld.ub	r12,r3[0x4]
8000c954:	80 00       	ld.sh	r0,r0[0x0]
8000c956:	c6 20       	breq	8000ca1a <udi_msc_spc_inquiry+0xc2>

8000c958 <udi_msc_spc_inquiry>:


static void udi_msc_spc_inquiry(void)
{
8000c958:	eb cd 40 80 	pushm	r7,lr
8000c95c:	1a 97       	mov	r7,sp
8000c95e:	20 1d       	sub	sp,4
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
8000c960:	4b e8       	lddpc	r8,8000ca58 <udi_msc_spc_inquiry+0x100>
8000c962:	f1 38 00 13 	ld.ub	r8,r8[19]
8000c966:	ef 68 ff fe 	st.b	r7[-2],r8

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
8000c96a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c96e:	32 48       	mov	r8,36
8000c970:	f0 09 18 00 	cp.b	r9,r8
8000c974:	e0 88 00 05 	brls	8000c97e <udi_msc_spc_inquiry+0x26>
		length = sizeof(udi_msc_inquiry_data);
8000c978:	32 48       	mov	r8,36
8000c97a:	ef 68 ff fe 	st.b	r7[-2],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000c97e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c982:	e0 6b 00 80 	mov	r11,128
8000c986:	10 9c       	mov	r12,r8
8000c988:	f0 1f 00 35 	mcall	8000ca5c <udi_msc_spc_inquiry+0x104>
8000c98c:	18 98       	mov	r8,r12
8000c98e:	ec 18 00 01 	eorl	r8,0x1
8000c992:	5c 58       	castu.b	r8
8000c994:	c5 e1       	brne	8000ca50 <udi_msc_spc_inquiry+0xf8>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000c996:	4b 18       	lddpc	r8,8000ca58 <udi_msc_spc_inquiry+0x100>
8000c998:	f1 38 00 10 	ld.ub	r8,r8[16]
8000c99c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000c9a0:	c0 61       	brne	8000c9ac <udi_msc_spc_inquiry+0x54>
			|| (0 != udi_msc_cbw.CDB[2])) {
8000c9a2:	4a e8       	lddpc	r8,8000ca58 <udi_msc_spc_inquiry+0x100>
8000c9a4:	f1 38 00 11 	ld.ub	r8,r8[17]
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000c9a8:	58 08       	cp.w	r8,0
8000c9aa:	c0 60       	breq	8000c9b6 <udi_msc_spc_inquiry+0x5e>
			|| (0 != udi_msc_cbw.CDB[2])) {
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
8000c9ac:	f0 1f 00 2d 	mcall	8000ca60 <udi_msc_spc_inquiry+0x108>
		udi_msc_csw_process();
8000c9b0:	f0 1f 00 2d 	mcall	8000ca64 <udi_msc_spc_inquiry+0x10c>
		return;
8000c9b4:	c4 f8       	rjmp	8000ca52 <udi_msc_spc_inquiry+0xfa>
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
8000c9b6:	4a 98       	lddpc	r8,8000ca58 <udi_msc_spc_inquiry+0x100>
8000c9b8:	f1 38 00 0d 	ld.ub	r8,r8[13]
		return;
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
8000c9bc:	10 9c       	mov	r12,r8
8000c9be:	f0 1f 00 2b 	mcall	8000ca68 <udi_msc_spc_inquiry+0x110>
8000c9c2:	18 98       	mov	r8,r12
8000c9c4:	f0 c9 ff ff 	sub	r9,r8,-1
8000c9c8:	4a 98       	lddpc	r8,8000ca6c <udi_msc_spc_inquiry+0x114>
8000c9ca:	2f 08       	sub	r8,-16
8000c9cc:	31 0a       	mov	r10,16
8000c9ce:	12 9b       	mov	r11,r9
8000c9d0:	10 9c       	mov	r12,r8
8000c9d2:	f0 1f 00 28 	mcall	8000ca70 <udi_msc_spc_inquiry+0x118>
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
8000c9d6:	30 08       	mov	r8,0
8000c9d8:	ef 68 ff ff 	st.b	r7[-1],r8
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000c9dc:	c1 a8       	rjmp	8000ca10 <udi_msc_spc_inquiry+0xb8>
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000c9de:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c9e2:	4a 39       	lddpc	r9,8000ca6c <udi_msc_spc_inquiry+0x114>
8000c9e4:	f2 08 00 08 	add	r8,r9,r8
8000c9e8:	f1 38 00 10 	ld.ub	r8,r8[16]
8000c9ec:	58 08       	cp.w	r8,0
8000c9ee:	c2 40       	breq	8000ca36 <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
8000c9f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c9f4:	49 e9       	lddpc	r9,8000ca6c <udi_msc_spc_inquiry+0x114>
8000c9f6:	f2 08 00 08 	add	r8,r9,r8
8000c9fa:	f1 39 00 10 	ld.ub	r9,r8[16]
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000c9fe:	32 28       	mov	r8,34
8000ca00:	f0 09 18 00 	cp.b	r9,r8
8000ca04:	c1 90       	breq	8000ca36 <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
8000ca06:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ca0a:	2f f8       	sub	r8,-1
8000ca0c:	ef 68 ff ff 	st.b	r7[-1],r8
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000ca10:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ca14:	31 08       	mov	r8,16
8000ca16:	f0 09 18 00 	cp.b	r9,r8
8000ca1a:	ce 21       	brne	8000c9de <udi_msc_spc_inquiry+0x86>
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000ca1c:	c0 d8       	rjmp	8000ca36 <udi_msc_spc_inquiry+0xde>
		udi_msc_inquiry_data.product_id[i] = ' ';
8000ca1e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ca22:	49 39       	lddpc	r9,8000ca6c <udi_msc_spc_inquiry+0x114>
8000ca24:	10 09       	add	r9,r8
8000ca26:	32 08       	mov	r8,32
8000ca28:	f3 68 00 10 	st.b	r9[16],r8
		i++;
8000ca2c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ca30:	2f f8       	sub	r8,-1
8000ca32:	ef 68 ff ff 	st.b	r7[-1],r8
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000ca36:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ca3a:	31 08       	mov	r8,16
8000ca3c:	f0 09 18 00 	cp.b	r9,r8
8000ca40:	ce f1       	brne	8000ca1e <udi_msc_spc_inquiry+0xc6>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
8000ca42:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000ca46:	10 9b       	mov	r11,r8
8000ca48:	48 9c       	lddpc	r12,8000ca6c <udi_msc_spc_inquiry+0x114>
8000ca4a:	f0 1f 00 0b 	mcall	8000ca74 <udi_msc_spc_inquiry+0x11c>
8000ca4e:	c0 28       	rjmp	8000ca52 <udi_msc_spc_inquiry+0xfa>
	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000ca50:	d7 03       	nop
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
}
8000ca52:	2f fd       	sub	sp,-4
8000ca54:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca58:	00 00       	add	r0,r0
8000ca5a:	07 a8       	ld.ub	r8,r3[0x2]
8000ca5c:	80 00       	ld.sh	r0,r0[0x0]
8000ca5e:	c5 c0       	breq	8000cb16 <udi_msc_spc_mode_sense+0x26>
8000ca60:	80 00       	ld.sh	r0,r0[0x0]
8000ca62:	c8 bc       	rcall	8000cb78 <udi_msc_spc_mode_sense+0x88>
8000ca64:	80 00       	ld.sh	r0,r0[0x0]
8000ca66:	c6 bc       	rcall	8000cb3c <udi_msc_spc_mode_sense+0x4c>
8000ca68:	80 00       	ld.sh	r0,r0[0x0]
8000ca6a:	c0 30       	breq	8000ca70 <udi_msc_spc_inquiry+0x118>
8000ca6c:	00 00       	add	r0,r0
8000ca6e:	01 68       	ld.uh	r8,--r0
8000ca70:	80 00       	ld.sh	r0,r0[0x0]
8000ca72:	e6 8e 80 00 	brqs	800dca72 <Stored_values_flash+0x9cc72>
8000ca76:	c6 20       	breq	8000cb3a <udi_msc_spc_mode_sense+0x4a>

8000ca78 <udi_msc_spc_testunitready_global>:


static bool udi_msc_spc_testunitready_global(void)
{
8000ca78:	eb cd 40 80 	pushm	r7,lr
8000ca7c:	1a 97       	mov	r7,sp
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
8000ca7e:	48 e8       	lddpc	r8,8000cab4 <udi_msc_spc_testunitready_global+0x3c>
8000ca80:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ca84:	10 9c       	mov	r12,r8
8000ca86:	f0 1f 00 0d 	mcall	8000cab8 <udi_msc_spc_testunitready_global+0x40>
8000ca8a:	18 98       	mov	r8,r12
8000ca8c:	58 28       	cp.w	r8,2
8000ca8e:	c0 a0       	breq	8000caa2 <udi_msc_spc_testunitready_global+0x2a>
8000ca90:	58 38       	cp.w	r8,3
8000ca92:	c0 50       	breq	8000ca9c <udi_msc_spc_testunitready_global+0x24>
8000ca94:	58 08       	cp.w	r8,0
8000ca96:	c0 91       	brne	8000caa8 <udi_msc_spc_testunitready_global+0x30>
	case CTRL_GOOD:
		return true;	// Don't change sense data
8000ca98:	30 18       	mov	r8,1
8000ca9a:	c0 a8       	rjmp	8000caae <udi_msc_spc_testunitready_global+0x36>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000ca9c:	f0 1f 00 08 	mcall	8000cabc <udi_msc_spc_testunitready_global+0x44>
		break;
8000caa0:	c0 68       	rjmp	8000caac <udi_msc_spc_testunitready_global+0x34>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000caa2:	f0 1f 00 08 	mcall	8000cac0 <udi_msc_spc_testunitready_global+0x48>
		break;
8000caa6:	c0 38       	rjmp	8000caac <udi_msc_spc_testunitready_global+0x34>
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
8000caa8:	f0 1f 00 07 	mcall	8000cac4 <udi_msc_spc_testunitready_global+0x4c>
		break;
	}
	return false;
8000caac:	30 08       	mov	r8,0
}
8000caae:	10 9c       	mov	r12,r8
8000cab0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cab4:	00 00       	add	r0,r0
8000cab6:	07 a8       	ld.ub	r8,r3[0x2]
8000cab8:	80 00       	ld.sh	r0,r0[0x0]
8000caba:	bf 40       	asr	r0,0x1e
8000cabc:	80 00       	ld.sh	r0,r0[0x0]
8000cabe:	c8 6c       	rcall	8000cbca <udi_msc_spc_mode_sense+0xda>
8000cac0:	80 00       	ld.sh	r0,r0[0x0]
8000cac2:	c8 50       	breq	8000c9cc <udi_msc_spc_inquiry+0x74>
8000cac4:	80 00       	ld.sh	r0,r0[0x0]
8000cac6:	c8 88       	rjmp	8000cbd6 <udi_msc_spc_mode_sense+0xe6>

8000cac8 <udi_msc_spc_testunitready>:


static void udi_msc_spc_testunitready(void)
{
8000cac8:	eb cd 40 80 	pushm	r7,lr
8000cacc:	1a 97       	mov	r7,sp
	if (udi_msc_spc_testunitready_global()) {
8000cace:	f0 1f 00 06 	mcall	8000cae4 <udi_msc_spc_testunitready+0x1c>
8000cad2:	18 98       	mov	r8,r12
8000cad4:	58 08       	cp.w	r8,0
8000cad6:	c0 30       	breq	8000cadc <udi_msc_spc_testunitready+0x14>
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
8000cad8:	f0 1f 00 04 	mcall	8000cae8 <udi_msc_spc_testunitready+0x20>
	}
	// Send status in CSW packet
	udi_msc_csw_process();
8000cadc:	f0 1f 00 04 	mcall	8000caec <udi_msc_spc_testunitready+0x24>
}
8000cae0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cae4:	80 00       	ld.sh	r0,r0[0x0]
8000cae6:	ca 78       	rjmp	8000cc34 <udi_msc_spc_mode_sense+0x144>
8000cae8:	80 00       	ld.sh	r0,r0[0x0]
8000caea:	c8 30       	breq	8000c9f0 <udi_msc_spc_inquiry+0x98>
8000caec:	80 00       	ld.sh	r0,r0[0x0]
8000caee:	c6 bc       	rcall	8000cbc4 <udi_msc_spc_mode_sense+0xd4>

8000caf0 <udi_msc_spc_mode_sense>:


static void udi_msc_spc_mode_sense(bool b_sense10)
{
8000caf0:	eb cd 40 80 	pushm	r7,lr
8000caf4:	1a 97       	mov	r7,sp
8000caf6:	20 3d       	sub	sp,12
8000caf8:	18 98       	mov	r8,r12
8000cafa:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
8000cafe:	31 4a       	mov	r10,20
8000cb00:	30 0b       	mov	r11,0
8000cb02:	4c ac       	lddpc	r12,8000cc28 <udi_msc_spc_mode_sense+0x138>
8000cb04:	f0 1f 00 4a 	mcall	8000cc2c <udi_msc_spc_mode_sense+0x13c>

	// Initialize process
	if (b_sense10) {
8000cb08:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cb0c:	30 08       	mov	r8,0
8000cb0e:	f0 09 18 00 	cp.b	r9,r8
8000cb12:	c0 e0       	breq	8000cb2e <udi_msc_spc_mode_sense+0x3e>
		request_lgt = udi_msc_cbw.CDB[8];
8000cb14:	4c 78       	lddpc	r8,8000cc30 <udi_msc_spc_mode_sense+0x140>
8000cb16:	f1 38 00 17 	ld.ub	r8,r8[23]
8000cb1a:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s10.sense_data;
8000cb1e:	4c 38       	lddpc	r8,8000cc28 <udi_msc_spc_mode_sense+0x138>
8000cb20:	2f 88       	sub	r8,-8
8000cb22:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
8000cb26:	30 88       	mov	r8,8
8000cb28:	ef 68 ff f8 	st.b	r7[-8],r8
8000cb2c:	c0 d8       	rjmp	8000cb46 <udi_msc_spc_mode_sense+0x56>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
8000cb2e:	4c 18       	lddpc	r8,8000cc30 <udi_msc_spc_mode_sense+0x140>
8000cb30:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cb34:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s6.sense_data;
8000cb38:	4b c8       	lddpc	r8,8000cc28 <udi_msc_spc_mode_sense+0x138>
8000cb3a:	2f c8       	sub	r8,-4
8000cb3c:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
8000cb40:	30 48       	mov	r8,4
8000cb42:	ef 68 ff f8 	st.b	r7[-8],r8
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
8000cb46:	4b b8       	lddpc	r8,8000cc30 <udi_msc_spc_mode_sense+0x140>
8000cb48:	f1 38 00 11 	ld.ub	r8,r8[17]
8000cb4c:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000cb50:	ef 68 ff f9 	st.b	r7[-7],r8
	if ((SCSI_MS_MODE_INFEXP == mode)
8000cb54:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000cb58:	31 c8       	mov	r8,28
8000cb5a:	f0 09 18 00 	cp.b	r9,r8
8000cb5e:	c0 70       	breq	8000cb6c <udi_msc_spc_mode_sense+0x7c>
8000cb60:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000cb64:	33 f8       	mov	r8,63
8000cb66:	f0 09 18 00 	cp.b	r9,r8
8000cb6a:	c1 21       	brne	8000cb8e <udi_msc_spc_mode_sense+0x9e>
			|| (SCSI_MS_MODE_ALL == mode)) {
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
8000cb6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cb70:	31 c8       	mov	r8,28
8000cb72:	b2 88       	st.b	r9[0x0],r8
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
8000cb74:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cb78:	30 a8       	mov	r8,10
8000cb7a:	b2 98       	st.b	r9[0x1],r8
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
8000cb7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cb80:	30 58       	mov	r8,5
8000cb82:	b2 b8       	st.b	r9[0x3],r8
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
8000cb84:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cb88:	2f 48       	sub	r8,-12
8000cb8a:	ef 68 ff f8 	st.b	r7[-8],r8
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
8000cb8e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000cb92:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cb96:	f0 09 18 00 	cp.b	r9,r8
8000cb9a:	e0 88 00 06 	brls	8000cba6 <udi_msc_spc_mode_sense+0xb6>
		request_lgt = data_sense_lgt;
8000cb9e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cba2:	ef 68 ff fa 	st.b	r7[-6],r8
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
8000cba6:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000cbaa:	e0 6b 00 80 	mov	r11,128
8000cbae:	10 9c       	mov	r12,r8
8000cbb0:	f0 1f 00 21 	mcall	8000cc34 <udi_msc_spc_mode_sense+0x144>
8000cbb4:	18 98       	mov	r8,r12
8000cbb6:	ec 18 00 01 	eorl	r8,0x1
8000cbba:	5c 58       	castu.b	r8
8000cbbc:	c3 21       	brne	8000cc20 <udi_msc_spc_mode_sense+0x130>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
8000cbbe:	49 d8       	lddpc	r8,8000cc30 <udi_msc_spc_mode_sense+0x140>
8000cbc0:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cbc4:	10 9c       	mov	r12,r8
8000cbc6:	f0 1f 00 1d 	mcall	8000cc38 <udi_msc_spc_mode_sense+0x148>
8000cbca:	18 98       	mov	r8,r12
8000cbcc:	58 08       	cp.w	r8,0
8000cbce:	c0 40       	breq	8000cbd6 <udi_msc_spc_mode_sense+0xe6>
8000cbd0:	e0 68 00 80 	mov	r8,128
8000cbd4:	c0 28       	rjmp	8000cbd8 <udi_msc_spc_mode_sense+0xe8>
8000cbd6:	30 08       	mov	r8,0
8000cbd8:	ef 68 ff fb 	st.b	r7[-5],r8

	if (b_sense10) {
8000cbdc:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cbe0:	30 08       	mov	r8,0
8000cbe2:	f0 09 18 00 	cp.b	r9,r8
8000cbe6:	c0 c0       	breq	8000cbfe <udi_msc_spc_mode_sense+0x10e>
		sense.s10.header.mode_data_length =
8000cbe8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cbec:	20 28       	sub	r8,2
8000cbee:	5c 88       	casts.h	r8
8000cbf0:	48 e9       	lddpc	r9,8000cc28 <udi_msc_spc_mode_sense+0x138>
8000cbf2:	b2 08       	st.h	r9[0x0],r8
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
8000cbf4:	48 d9       	lddpc	r9,8000cc28 <udi_msc_spc_mode_sense+0x138>
8000cbf6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000cbfa:	b2 b8       	st.b	r9[0x3],r8
8000cbfc:	c0 b8       	rjmp	8000cc12 <udi_msc_spc_mode_sense+0x122>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
8000cbfe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cc02:	20 18       	sub	r8,1
8000cc04:	5c 58       	castu.b	r8
8000cc06:	48 99       	lddpc	r9,8000cc28 <udi_msc_spc_mode_sense+0x138>
8000cc08:	b2 88       	st.b	r9[0x0],r8
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
8000cc0a:	48 89       	lddpc	r9,8000cc28 <udi_msc_spc_mode_sense+0x138>
8000cc0c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000cc10:	b2 a8       	st.b	r9[0x2],r8
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
8000cc12:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000cc16:	10 9b       	mov	r11,r8
8000cc18:	48 4c       	lddpc	r12,8000cc28 <udi_msc_spc_mode_sense+0x138>
8000cc1a:	f0 1f 00 09 	mcall	8000cc3c <udi_msc_spc_mode_sense+0x14c>
8000cc1e:	c0 28       	rjmp	8000cc22 <udi_msc_spc_mode_sense+0x132>
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
		return;
8000cc20:	d7 03       	nop
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
}
8000cc22:	2f dd       	sub	sp,-12
8000cc24:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc28:	00 00       	add	r0,r0
8000cc2a:	07 f4       	ld.ub	r4,r3[0x7]
8000cc2c:	80 00       	ld.sh	r0,r0[0x0]
8000cc2e:	e7 d6 00 00 	ldins.h	r6:b,r3[0]
8000cc32:	07 a8       	ld.ub	r8,r3[0x2]
8000cc34:	80 00       	ld.sh	r0,r0[0x0]
8000cc36:	c5 c0       	breq	8000ccee <udi_msc_sbc_trans+0x12>
8000cc38:	80 00       	ld.sh	r0,r0[0x0]
8000cc3a:	bf e0       	*unknown*
8000cc3c:	80 00       	ld.sh	r0,r0[0x0]
8000cc3e:	c6 20       	breq	8000cd02 <udi_msc_sbc_trans+0x26>

8000cc40 <udi_msc_sbc_read_capacity>:


static void udi_msc_sbc_read_capacity(void)
{
8000cc40:	eb cd 40 80 	pushm	r7,lr
8000cc44:	1a 97       	mov	r7,sp
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
8000cc46:	e0 6b 00 80 	mov	r11,128
8000cc4a:	30 8c       	mov	r12,8
8000cc4c:	f0 1f 00 1b 	mcall	8000ccb8 <udi_msc_sbc_read_capacity+0x78>
8000cc50:	18 98       	mov	r8,r12
8000cc52:	ec 18 00 01 	eorl	r8,0x1
8000cc56:	5c 58       	castu.b	r8
8000cc58:	c2 d1       	brne	8000ccb2 <udi_msc_sbc_read_capacity+0x72>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
8000cc5a:	49 98       	lddpc	r8,8000ccbc <udi_msc_sbc_read_capacity+0x7c>
8000cc5c:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cc60:	49 8b       	lddpc	r11,8000ccc0 <udi_msc_sbc_read_capacity+0x80>
8000cc62:	10 9c       	mov	r12,r8
8000cc64:	f0 1f 00 18 	mcall	8000ccc4 <udi_msc_sbc_read_capacity+0x84>
8000cc68:	18 98       	mov	r8,r12
					&udi_msc_capacity.max_lba)) {
8000cc6a:	58 28       	cp.w	r8,2
8000cc6c:	c1 80       	breq	8000cc9c <udi_msc_sbc_read_capacity+0x5c>
8000cc6e:	58 38       	cp.w	r8,3
8000cc70:	c1 10       	breq	8000cc92 <udi_msc_sbc_read_capacity+0x52>
8000cc72:	58 08       	cp.w	r8,0
8000cc74:	c1 91       	brne	8000cca6 <udi_msc_sbc_read_capacity+0x66>
		udi_msc_csw_process();
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
8000cc76:	49 38       	lddpc	r8,8000ccc0 <udi_msc_sbc_read_capacity+0x80>
8000cc78:	e0 69 02 00 	mov	r9,512
8000cc7c:	91 19       	st.w	r8[0x4],r9
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
8000cc7e:	49 18       	lddpc	r8,8000ccc0 <udi_msc_sbc_read_capacity+0x80>
8000cc80:	70 09       	ld.w	r9,r8[0x0]
8000cc82:	49 08       	lddpc	r8,8000ccc0 <udi_msc_sbc_read_capacity+0x80>
8000cc84:	91 09       	st.w	r8[0x0],r9
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
8000cc86:	48 f8       	lddpc	r8,8000ccc0 <udi_msc_sbc_read_capacity+0x80>
8000cc88:	30 8b       	mov	r11,8
8000cc8a:	10 9c       	mov	r12,r8
8000cc8c:	f0 1f 00 0f 	mcall	8000ccc8 <udi_msc_sbc_read_capacity+0x88>
8000cc90:	c1 28       	rjmp	8000ccb4 <udi_msc_sbc_read_capacity+0x74>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000cc92:	f0 1f 00 0f 	mcall	8000cccc <udi_msc_sbc_read_capacity+0x8c>
		udi_msc_csw_process();
8000cc96:	f0 1f 00 0f 	mcall	8000ccd0 <udi_msc_sbc_read_capacity+0x90>
		return;
8000cc9a:	c0 d8       	rjmp	8000ccb4 <udi_msc_sbc_read_capacity+0x74>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000cc9c:	f0 1f 00 0e 	mcall	8000ccd4 <udi_msc_sbc_read_capacity+0x94>
		udi_msc_csw_process();
8000cca0:	f0 1f 00 0c 	mcall	8000ccd0 <udi_msc_sbc_read_capacity+0x90>
		return;
8000cca4:	c0 88       	rjmp	8000ccb4 <udi_msc_sbc_read_capacity+0x74>
	default:
		udi_msc_sense_fail_hardware();
8000cca6:	f0 1f 00 0d 	mcall	8000ccd8 <udi_msc_sbc_read_capacity+0x98>
		udi_msc_csw_process();
8000ccaa:	f0 1f 00 0a 	mcall	8000ccd0 <udi_msc_sbc_read_capacity+0x90>
		return;
8000ccae:	d7 03       	nop
8000ccb0:	c0 28       	rjmp	8000ccb4 <udi_msc_sbc_read_capacity+0x74>
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
					USB_CBW_DIRECTION_IN))
		return;
8000ccb2:	d7 03       	nop
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
			sizeof(udi_msc_capacity));
}
8000ccb4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccb8:	80 00       	ld.sh	r0,r0[0x0]
8000ccba:	c5 c0       	breq	8000cd72 <udi_msc_sbc_trans+0x96>
8000ccbc:	00 00       	add	r0,r0
8000ccbe:	07 a8       	ld.ub	r8,r3[0x2]
8000ccc0:	00 00       	add	r0,r0
8000ccc2:	07 ec       	ld.ub	r12,r3[0x6]
8000ccc4:	80 00       	ld.sh	r0,r0[0x0]
8000ccc6:	bf 8c       	lsr	r12,0x1e
8000ccc8:	80 00       	ld.sh	r0,r0[0x0]
8000ccca:	c6 20       	breq	8000cd8e <udi_msc_sbc_trans+0xb2>
8000cccc:	80 00       	ld.sh	r0,r0[0x0]
8000ccce:	c8 6c       	rcall	8000cdda <udi_msc_process_trans+0xa>
8000ccd0:	80 00       	ld.sh	r0,r0[0x0]
8000ccd2:	c6 bc       	rcall	8000cda8 <udi_msc_sbc_trans+0xcc>
8000ccd4:	80 00       	ld.sh	r0,r0[0x0]
8000ccd6:	c8 50       	breq	8000cbe0 <udi_msc_spc_mode_sense+0xf0>
8000ccd8:	80 00       	ld.sh	r0,r0[0x0]
8000ccda:	c8 88       	rjmp	8000cdea <udi_msc_process_trans+0x1a>

8000ccdc <udi_msc_sbc_trans>:


static void udi_msc_sbc_trans(bool b_read)
{
8000ccdc:	eb cd 40 80 	pushm	r7,lr
8000cce0:	1a 97       	mov	r7,sp
8000cce2:	20 2d       	sub	sp,8
8000cce4:	18 98       	mov	r8,r12
8000cce6:	ef 68 ff f8 	st.b	r7[-8],r8
	uint32_t trans_size;

	if (!b_read) {
8000ccea:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ccee:	ec 18 00 01 	eorl	r8,0x1
8000ccf2:	5c 58       	castu.b	r8
8000ccf4:	c0 f0       	breq	8000cd12 <udi_msc_sbc_trans+0x36>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
8000ccf6:	4a e8       	lddpc	r8,8000cdac <udi_msc_sbc_trans+0xd0>
8000ccf8:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ccfc:	10 9c       	mov	r12,r8
8000ccfe:	f0 1f 00 2d 	mcall	8000cdb0 <udi_msc_sbc_trans+0xd4>
8000cd02:	18 98       	mov	r8,r12
8000cd04:	58 08       	cp.w	r8,0
8000cd06:	c0 60       	breq	8000cd12 <udi_msc_sbc_trans+0x36>
			// Write not authorized
			udi_msc_sense_fail_protected();
8000cd08:	f0 1f 00 2b 	mcall	8000cdb4 <udi_msc_sbc_trans+0xd8>
			udi_msc_csw_process();
8000cd0c:	f0 1f 00 2b 	mcall	8000cdb8 <udi_msc_sbc_trans+0xdc>
			return;
8000cd10:	c4 a8       	rjmp	8000cda4 <udi_msc_sbc_trans+0xc8>
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
8000cd12:	4a b9       	lddpc	r9,8000cdbc <udi_msc_sbc_trans+0xe0>
8000cd14:	4a 68       	lddpc	r8,8000cdac <udi_msc_sbc_trans+0xd0>
8000cd16:	f1 38 00 11 	ld.ub	r8,r8[17]
8000cd1a:	b2 88       	st.b	r9[0x0],r8
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
8000cd1c:	4a 88       	lddpc	r8,8000cdbc <udi_msc_sbc_trans+0xe0>
8000cd1e:	f0 c9 ff ff 	sub	r9,r8,-1
8000cd22:	4a 38       	lddpc	r8,8000cdac <udi_msc_sbc_trans+0xd0>
8000cd24:	f1 38 00 12 	ld.ub	r8,r8[18]
8000cd28:	b2 88       	st.b	r9[0x0],r8
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
8000cd2a:	4a 58       	lddpc	r8,8000cdbc <udi_msc_sbc_trans+0xe0>
8000cd2c:	f0 c9 ff fe 	sub	r9,r8,-2
8000cd30:	49 f8       	lddpc	r8,8000cdac <udi_msc_sbc_trans+0xd0>
8000cd32:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cd36:	b2 88       	st.b	r9[0x0],r8
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
8000cd38:	4a 18       	lddpc	r8,8000cdbc <udi_msc_sbc_trans+0xe0>
8000cd3a:	f0 c9 ff fd 	sub	r9,r8,-3
8000cd3e:	49 c8       	lddpc	r8,8000cdac <udi_msc_sbc_trans+0xd0>
8000cd40:	f1 38 00 14 	ld.ub	r8,r8[20]
8000cd44:	b2 88       	st.b	r9[0x0],r8
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
8000cd46:	49 f9       	lddpc	r9,8000cdc0 <udi_msc_sbc_trans+0xe4>
8000cd48:	49 98       	lddpc	r8,8000cdac <udi_msc_sbc_trans+0xd0>
8000cd4a:	f1 38 00 16 	ld.ub	r8,r8[22]
8000cd4e:	b2 88       	st.b	r9[0x0],r8
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
8000cd50:	49 c8       	lddpc	r8,8000cdc0 <udi_msc_sbc_trans+0xe4>
8000cd52:	f0 c9 ff ff 	sub	r9,r8,-1
8000cd56:	49 68       	lddpc	r8,8000cdac <udi_msc_sbc_trans+0xd0>
8000cd58:	f1 38 00 17 	ld.ub	r8,r8[23]
8000cd5c:	b2 88       	st.b	r9[0x0],r8

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
8000cd5e:	49 98       	lddpc	r8,8000cdc0 <udi_msc_sbc_trans+0xe4>
8000cd60:	90 08       	ld.sh	r8,r8[0x0]
8000cd62:	5c 78       	castu.h	r8
8000cd64:	a9 78       	lsl	r8,0x9
8000cd66:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udi_msc_cbw_validate(trans_size,
8000cd6a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000cd6e:	30 08       	mov	r8,0
8000cd70:	f0 09 18 00 	cp.b	r9,r8
8000cd74:	c0 40       	breq	8000cd7c <udi_msc_sbc_trans+0xa0>
8000cd76:	e0 68 00 80 	mov	r8,128
8000cd7a:	c0 28       	rjmp	8000cd7e <udi_msc_sbc_trans+0xa2>
8000cd7c:	30 08       	mov	r8,0
8000cd7e:	10 9b       	mov	r11,r8
8000cd80:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cd84:	f0 1f 00 10 	mcall	8000cdc4 <udi_msc_sbc_trans+0xe8>
8000cd88:	18 98       	mov	r8,r12
8000cd8a:	ec 18 00 01 	eorl	r8,0x1
8000cd8e:	5c 58       	castu.b	r8
8000cd90:	c0 91       	brne	8000cda2 <udi_msc_sbc_trans+0xc6>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
8000cd92:	48 e9       	lddpc	r9,8000cdc8 <udi_msc_sbc_trans+0xec>
8000cd94:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cd98:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_trans_req = true;
8000cd9a:	48 d9       	lddpc	r9,8000cdcc <udi_msc_sbc_trans+0xf0>
8000cd9c:	30 18       	mov	r8,1
8000cd9e:	b2 88       	st.b	r9[0x0],r8
8000cda0:	c0 28       	rjmp	8000cda4 <udi_msc_sbc_trans+0xc8>
	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
	if (!udi_msc_cbw_validate(trans_size,
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;
8000cda2:	d7 03       	nop

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
	udi_msc_b_trans_req = true;
	UDI_MSC_NOTIFY_TRANS_EXT();
}
8000cda4:	2f ed       	sub	sp,-8
8000cda6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cdaa:	00 00       	add	r0,r0
8000cdac:	00 00       	add	r0,r0
8000cdae:	07 a8       	ld.ub	r8,r3[0x2]
8000cdb0:	80 00       	ld.sh	r0,r0[0x0]
8000cdb2:	bf e0       	*unknown*
8000cdb4:	80 00       	ld.sh	r0,r0[0x0]
8000cdb6:	c8 a0       	breq	8000ccca <udi_msc_sbc_read_capacity+0x8a>
8000cdb8:	80 00       	ld.sh	r0,r0[0x0]
8000cdba:	c6 bc       	rcall	8000ce90 <udi_msc_process_trans+0xc0>
8000cdbc:	00 00       	add	r0,r0
8000cdbe:	07 e4       	ld.ub	r4,r3[0x6]
8000cdc0:	00 00       	add	r0,r0
8000cdc2:	07 e8       	ld.ub	r8,r3[0x6]
8000cdc4:	80 00       	ld.sh	r0,r0[0x0]
8000cdc6:	c5 c0       	breq	8000ce7e <udi_msc_process_trans+0xae>
8000cdc8:	00 00       	add	r0,r0
8000cdca:	07 e2       	ld.ub	r2,r3[0x6]
8000cdcc:	00 00       	add	r0,r0
8000cdce:	07 e1       	ld.ub	r1,r3[0x6]

8000cdd0 <udi_msc_process_trans>:


bool udi_msc_process_trans(void)
{
8000cdd0:	eb cd 40 80 	pushm	r7,lr
8000cdd4:	1a 97       	mov	r7,sp
8000cdd6:	20 1d       	sub	sp,4
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
8000cdd8:	4a 58       	lddpc	r8,8000ce6c <udi_msc_process_trans+0x9c>
8000cdda:	11 88       	ld.ub	r8,r8[0x0]
8000cddc:	ec 18 00 01 	eorl	r8,0x1
8000cde0:	5c 58       	castu.b	r8
8000cde2:	c0 30       	breq	8000cde8 <udi_msc_process_trans+0x18>
		return false;	// No Transfer request to do
8000cde4:	30 08       	mov	r8,0
8000cde6:	c3 f8       	rjmp	8000ce64 <udi_msc_process_trans+0x94>
	udi_msc_b_trans_req = false;
8000cde8:	4a 19       	lddpc	r9,8000ce6c <udi_msc_process_trans+0x9c>
8000cdea:	30 08       	mov	r8,0
8000cdec:	b2 88       	st.b	r9[0x0],r8

	// Start transfer
	if (udi_msc_b_read) {
8000cdee:	4a 18       	lddpc	r8,8000ce70 <udi_msc_process_trans+0xa0>
8000cdf0:	11 88       	ld.ub	r8,r8[0x0]
8000cdf2:	58 08       	cp.w	r8,0
8000cdf4:	c1 20       	breq	8000ce18 <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000cdf6:	4a 08       	lddpc	r8,8000ce74 <udi_msc_process_trans+0xa4>
8000cdf8:	90 08       	ld.sh	r8,r8[0x0]
8000cdfa:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000cdfe:	49 f8       	lddpc	r8,8000ce78 <udi_msc_process_trans+0xa8>
8000ce00:	70 09       	ld.w	r9,r8[0x0]
8000ce02:	49 f8       	lddpc	r8,8000ce7c <udi_msc_process_trans+0xac>
8000ce04:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ce08:	12 9b       	mov	r11,r9
8000ce0a:	10 9c       	mov	r12,r8
8000ce0c:	f0 1f 00 1d 	mcall	8000ce80 <udi_msc_process_trans+0xb0>
8000ce10:	18 98       	mov	r8,r12
8000ce12:	ef 48 ff fc 	st.w	r7[-4],r8
8000ce16:	c1 18       	rjmp	8000ce38 <udi_msc_process_trans+0x68>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000ce18:	49 78       	lddpc	r8,8000ce74 <udi_msc_process_trans+0xa4>
8000ce1a:	90 08       	ld.sh	r8,r8[0x0]
8000ce1c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000ce20:	49 68       	lddpc	r8,8000ce78 <udi_msc_process_trans+0xa8>
8000ce22:	70 09       	ld.w	r9,r8[0x0]
8000ce24:	49 68       	lddpc	r8,8000ce7c <udi_msc_process_trans+0xac>
8000ce26:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ce2a:	12 9b       	mov	r11,r9
8000ce2c:	10 9c       	mov	r12,r8
8000ce2e:	f0 1f 00 16 	mcall	8000ce84 <udi_msc_process_trans+0xb4>
8000ce32:	18 98       	mov	r8,r12
8000ce34:	ef 48 ff fc 	st.w	r7[-4],r8
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
8000ce38:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ce3c:	58 28       	cp.w	r8,2
8000ce3e:	c0 b0       	breq	8000ce54 <udi_msc_process_trans+0x84>
8000ce40:	58 38       	cp.w	r8,3
8000ce42:	c0 60       	breq	8000ce4e <udi_msc_process_trans+0x7e>
8000ce44:	58 08       	cp.w	r8,0
8000ce46:	c0 a1       	brne	8000ce5a <udi_msc_process_trans+0x8a>
	case CTRL_GOOD:
		udi_msc_sense_pass();
8000ce48:	f0 1f 00 10 	mcall	8000ce88 <udi_msc_process_trans+0xb8>
		break;
8000ce4c:	c0 98       	rjmp	8000ce5e <udi_msc_process_trans+0x8e>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000ce4e:	f0 1f 00 10 	mcall	8000ce8c <udi_msc_process_trans+0xbc>
		break;
8000ce52:	c0 68       	rjmp	8000ce5e <udi_msc_process_trans+0x8e>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000ce54:	f0 1f 00 0f 	mcall	8000ce90 <udi_msc_process_trans+0xc0>
		break;
8000ce58:	c0 38       	rjmp	8000ce5e <udi_msc_process_trans+0x8e>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
8000ce5a:	f0 1f 00 0f 	mcall	8000ce94 <udi_msc_process_trans+0xc4>
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
8000ce5e:	f0 1f 00 0f 	mcall	8000ce98 <udi_msc_process_trans+0xc8>
	return true;
8000ce62:	30 18       	mov	r8,1
}
8000ce64:	10 9c       	mov	r12,r8
8000ce66:	2f fd       	sub	sp,-4
8000ce68:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ce6c:	00 00       	add	r0,r0
8000ce6e:	07 e1       	ld.ub	r1,r3[0x6]
8000ce70:	00 00       	add	r0,r0
8000ce72:	07 e2       	ld.ub	r2,r3[0x6]
8000ce74:	00 00       	add	r0,r0
8000ce76:	07 e8       	ld.ub	r8,r3[0x6]
8000ce78:	00 00       	add	r0,r0
8000ce7a:	07 e4       	ld.ub	r4,r3[0x6]
8000ce7c:	00 00       	add	r0,r0
8000ce7e:	07 a8       	ld.ub	r8,r3[0x2]
8000ce80:	80 00       	ld.sh	r0,r0[0x0]
8000ce82:	c0 74       	brge	8000ce90 <udi_msc_process_trans+0xc0>
8000ce84:	80 00       	ld.sh	r0,r0[0x0]
8000ce86:	c0 e8       	rjmp	8000cea2 <udi_msc_trans_ack+0x6>
8000ce88:	80 00       	ld.sh	r0,r0[0x0]
8000ce8a:	c8 30       	breq	8000cd90 <udi_msc_sbc_trans+0xb4>
8000ce8c:	80 00       	ld.sh	r0,r0[0x0]
8000ce8e:	c8 6c       	rcall	8000cf9a <udi_msc_trans_block+0xc6>
8000ce90:	80 00       	ld.sh	r0,r0[0x0]
8000ce92:	c8 50       	breq	8000cd9c <udi_msc_sbc_trans+0xc0>
8000ce94:	80 00       	ld.sh	r0,r0[0x0]
8000ce96:	c8 88       	rjmp	8000cfa6 <udi_msc_trans_block+0xd2>
8000ce98:	80 00       	ld.sh	r0,r0[0x0]
8000ce9a:	c6 bc       	rcall	8000cf70 <udi_msc_trans_block+0x9c>

8000ce9c <udi_msc_trans_ack>:


static void udi_msc_trans_ack(udd_ep_status_t status, iram_size_t n,
		udd_ep_id_t ep)
{
8000ce9c:	eb cd 40 80 	pushm	r7,lr
8000cea0:	1a 97       	mov	r7,sp
8000cea2:	20 3d       	sub	sp,12
8000cea4:	ef 4c ff fc 	st.w	r7[-4],r12
8000cea8:	ef 4b ff f8 	st.w	r7[-8],r11
8000ceac:	14 98       	mov	r8,r10
8000ceae:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
8000ceb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ceb6:	58 08       	cp.w	r8,0
8000ceb8:	5f 18       	srne	r8
8000ceba:	5c 58       	castu.b	r8
8000cebc:	48 49       	lddpc	r9,8000cecc <udi_msc_trans_ack+0x30>
8000cebe:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_ack_trans = true;
8000cec0:	48 49       	lddpc	r9,8000ced0 <udi_msc_trans_ack+0x34>
8000cec2:	30 18       	mov	r8,1
8000cec4:	b2 88       	st.b	r9[0x0],r8
}
8000cec6:	2f dd       	sub	sp,-12
8000cec8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cecc:	00 00       	add	r0,r0
8000cece:	0f e3       	ld.ub	r3,r7[0x6]
8000ced0:	00 00       	add	r0,r0
8000ced2:	01 64       	ld.uh	r4,--r0

8000ced4 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
8000ced4:	eb cd 40 80 	pushm	r7,lr
8000ced8:	1a 97       	mov	r7,sp
8000ceda:	20 4d       	sub	sp,16
8000cedc:	18 98       	mov	r8,r12
8000cede:	ef 4b ff f8 	st.w	r7[-8],r11
8000cee2:	ef 4a ff f4 	st.w	r7[-12],r10
8000cee6:	ef 49 ff f0 	st.w	r7[-16],r9
8000ceea:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!udi_msc_b_ack_trans)
8000ceee:	4a e8       	lddpc	r8,8000cfa4 <udi_msc_trans_block+0xd0>
8000cef0:	11 88       	ld.ub	r8,r8[0x0]
8000cef2:	5c 58       	castu.b	r8
8000cef4:	ec 18 00 01 	eorl	r8,0x1
8000cef8:	5c 58       	castu.b	r8
8000cefa:	c0 30       	breq	8000cf00 <udi_msc_trans_block+0x2c>
		return false;	// No possible, transfer on going
8000cefc:	30 08       	mov	r8,0
8000cefe:	c4 f8       	rjmp	8000cf9c <udi_msc_trans_block+0xc8>

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
8000cf00:	4a 99       	lddpc	r9,8000cfa4 <udi_msc_trans_block+0xd0>
8000cf02:	30 08       	mov	r8,0
8000cf04:	b2 88       	st.b	r9[0x0],r8
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
8000cf06:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000cf0a:	58 08       	cp.w	r8,0
8000cf0c:	c0 40       	breq	8000cf14 <udi_msc_trans_block+0x40>
8000cf0e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000cf12:	c0 28       	rjmp	8000cf16 <udi_msc_trans_block+0x42>
8000cf14:	4a 58       	lddpc	r8,8000cfa8 <udi_msc_trans_block+0xd4>
8000cf16:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000cf1a:	30 09       	mov	r9,0
8000cf1c:	f2 0a 18 00 	cp.b	r10,r9
8000cf20:	c0 40       	breq	8000cf28 <udi_msc_trans_block+0x54>
8000cf22:	e0 6c 00 81 	mov	r12,129
8000cf26:	c0 28       	rjmp	8000cf2a <udi_msc_trans_block+0x56>
8000cf28:	30 2c       	mov	r12,2
8000cf2a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000cf2e:	ee fa ff f8 	ld.w	r10,r7[-8]
8000cf32:	30 0b       	mov	r11,0
8000cf34:	f0 1f 00 1e 	mcall	8000cfac <udi_msc_trans_block+0xd8>
8000cf38:	18 98       	mov	r8,r12
8000cf3a:	ec 18 00 01 	eorl	r8,0x1
8000cf3e:	5c 58       	castu.b	r8
8000cf40:	c0 60       	breq	8000cf4c <udi_msc_trans_block+0x78>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
8000cf42:	49 99       	lddpc	r9,8000cfa4 <udi_msc_trans_block+0xd0>
8000cf44:	30 18       	mov	r8,1
8000cf46:	b2 88       	st.b	r9[0x0],r8
		return false;
8000cf48:	30 08       	mov	r8,0
8000cf4a:	c2 98       	rjmp	8000cf9c <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
8000cf4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000cf50:	58 08       	cp.w	r8,0
8000cf52:	c1 d1       	brne	8000cf8c <udi_msc_trans_block+0xb8>
		while (!udi_msc_b_ack_trans);
8000cf54:	49 48       	lddpc	r8,8000cfa4 <udi_msc_trans_block+0xd0>
8000cf56:	11 88       	ld.ub	r8,r8[0x0]
8000cf58:	5c 58       	castu.b	r8
8000cf5a:	ec 18 00 01 	eorl	r8,0x1
8000cf5e:	5c 58       	castu.b	r8
8000cf60:	cf a1       	brne	8000cf54 <udi_msc_trans_block+0x80>
		if (udi_msc_b_abort_trans) {
8000cf62:	49 48       	lddpc	r8,8000cfb0 <udi_msc_trans_block+0xdc>
8000cf64:	11 88       	ld.ub	r8,r8[0x0]
8000cf66:	5c 58       	castu.b	r8
8000cf68:	c0 30       	breq	8000cf6e <udi_msc_trans_block+0x9a>
			return false;
8000cf6a:	30 08       	mov	r8,0
8000cf6c:	c1 88       	rjmp	8000cf9c <udi_msc_trans_block+0xc8>
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
8000cf6e:	49 28       	lddpc	r8,8000cfb4 <udi_msc_trans_block+0xe0>
8000cf70:	70 29       	ld.w	r9,r8[0x8]
8000cf72:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cf76:	10 19       	sub	r9,r8
8000cf78:	48 f8       	lddpc	r8,8000cfb4 <udi_msc_trans_block+0xe0>
8000cf7a:	91 29       	st.w	r8[0x8],r9
		return (!udi_msc_b_abort_trans);
8000cf7c:	48 d8       	lddpc	r8,8000cfb0 <udi_msc_trans_block+0xdc>
8000cf7e:	11 88       	ld.ub	r8,r8[0x0]
8000cf80:	5c 58       	castu.b	r8
8000cf82:	ec 18 00 01 	eorl	r8,0x1
8000cf86:	5c 58       	castu.b	r8
8000cf88:	5c 58       	castu.b	r8
8000cf8a:	c0 98       	rjmp	8000cf9c <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
8000cf8c:	48 a8       	lddpc	r8,8000cfb4 <udi_msc_trans_block+0xe0>
8000cf8e:	70 29       	ld.w	r9,r8[0x8]
8000cf90:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cf94:	10 19       	sub	r9,r8
8000cf96:	48 88       	lddpc	r8,8000cfb4 <udi_msc_trans_block+0xe0>
8000cf98:	91 29       	st.w	r8[0x8],r9
	return true;
8000cf9a:	30 18       	mov	r8,1
}
8000cf9c:	10 9c       	mov	r12,r8
8000cf9e:	2f cd       	sub	sp,-16
8000cfa0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cfa4:	00 00       	add	r0,r0
8000cfa6:	01 64       	ld.uh	r4,--r0
8000cfa8:	80 00       	ld.sh	r0,r0[0x0]
8000cfaa:	ce 9c       	rcall	8000d17c <udc_iface_disable+0x2c>
8000cfac:	80 00       	ld.sh	r0,r0[0x0]
8000cfae:	a4 2c       	st.h	r2[0x4],r12
8000cfb0:	00 00       	add	r0,r0
8000cfb2:	0f e3       	ld.ub	r3,r7[0x6]
8000cfb4:	00 00       	add	r0,r0
8000cfb6:	01 54       	ld.sh	r4,--r0
8000cfb8:	36 39       	mov	r9,99
8000cfba:	36 39       	mov	r9,99
8000cfbc:	36 39       	mov	r9,99
8000cfbe:	36 39       	mov	r9,99
8000cfc0:	36 39       	mov	r9,99
8000cfc2:	36 39       	mov	r9,99
8000cfc4:	00 00       	add	r0,r0
	...

8000cfc8 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
8000cfc8:	eb cd 40 80 	pushm	r7,lr
8000cfcc:	1a 97       	mov	r7,sp
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
8000cfce:	48 38       	lddpc	r8,8000cfd8 <udc_get_string_serial_name+0x10>
	}
8000cfd0:	10 9c       	mov	r12,r8
8000cfd2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cfd6:	00 00       	add	r0,r0
8000cfd8:	80 00       	ld.sh	r0,r0[0x0]
8000cfda:	cf b8       	rjmp	8000d1d0 <udc_iface_disable+0x80>

8000cfdc <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
8000cfdc:	eb cd 40 80 	pushm	r7,lr
8000cfe0:	1a 97       	mov	r7,sp
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
8000cfe2:	48 b8       	lddpc	r8,8000d00c <udc_get_eof_conf+0x30>
8000cfe4:	70 08       	ld.w	r8,r8[0x0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000cfe6:	70 09       	ld.w	r9,r8[0x0]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000cfe8:	48 98       	lddpc	r8,8000d00c <udc_get_eof_conf+0x30>
8000cfea:	70 08       	ld.w	r8,r8[0x0]
8000cfec:	70 08       	ld.w	r8,r8[0x0]
8000cfee:	11 aa       	ld.ub	r10,r8[0x2]
8000cff0:	a9 6a       	lsl	r10,0x8
8000cff2:	11 b8       	ld.ub	r8,r8[0x3]
8000cff4:	14 48       	or	r8,r10
8000cff6:	5c 88       	casts.h	r8
8000cff8:	5c 88       	casts.h	r8
8000cffa:	5c c8       	swap.bh	r8
8000cffc:	5c 88       	casts.h	r8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000cffe:	5c 78       	castu.h	r8
8000d000:	f2 08 00 08 	add	r8,r9,r8
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
8000d004:	10 9c       	mov	r12,r8
8000d006:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d00a:	00 00       	add	r0,r0
8000d00c:	00 00       	add	r0,r0
8000d00e:	08 0c       	add	r12,r4

8000d010 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
8000d010:	eb cd 40 80 	pushm	r7,lr
8000d014:	1a 97       	mov	r7,sp
8000d016:	20 3d       	sub	sp,12
8000d018:	ef 4c ff f8 	st.w	r7[-8],r12
8000d01c:	16 98       	mov	r8,r11
8000d01e:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
8000d022:	f0 1f 00 1d 	mcall	8000d094 <udc_next_desc_in_iface+0x84>
8000d026:	18 98       	mov	r8,r12
8000d028:	ef 48 ff fc 	st.w	r7[-4],r8
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000d02c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d030:	11 88       	ld.ub	r8,r8[0x0]
8000d032:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d036:	f2 08 00 08 	add	r8,r9,r8
8000d03a:	ef 48 ff f8 	st.w	r7[-8],r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000d03e:	c1 c8       	rjmp	8000d076 <udc_next_desc_in_iface+0x66>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
8000d040:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d044:	11 99       	ld.ub	r9,r8[0x1]
8000d046:	30 48       	mov	r8,4
8000d048:	f0 09 18 00 	cp.b	r9,r8
8000d04c:	c1 d0       	breq	8000d086 <udc_next_desc_in_iface+0x76>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
8000d04e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d052:	11 98       	ld.ub	r8,r8[0x1]
8000d054:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d058:	f0 09 18 00 	cp.b	r9,r8
8000d05c:	c0 41       	brne	8000d064 <udc_next_desc_in_iface+0x54>
			return desc; // Specific descriptor found
8000d05e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d062:	c1 48       	rjmp	8000d08a <udc_next_desc_in_iface+0x7a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000d064:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d068:	11 88       	ld.ub	r8,r8[0x0]
8000d06a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d06e:	f2 08 00 08 	add	r8,r9,r8
8000d072:	ef 48 ff f8 	st.w	r7[-8],r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000d076:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d07a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d07e:	10 39       	cp.w	r9,r8
8000d080:	fe 9b ff e0 	brhi	8000d040 <udc_next_desc_in_iface+0x30>
8000d084:	c0 28       	rjmp	8000d088 <udc_next_desc_in_iface+0x78>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
8000d086:	d7 03       	nop
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
8000d088:	30 08       	mov	r8,0
}
8000d08a:	10 9c       	mov	r12,r8
8000d08c:	2f dd       	sub	sp,-12
8000d08e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d092:	00 00       	add	r0,r0
8000d094:	80 00       	ld.sh	r0,r0[0x0]
8000d096:	cf dc       	rcall	8000d290 <udc_iface_enable+0x84>

8000d098 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
8000d098:	eb cd 40 80 	pushm	r7,lr
8000d09c:	1a 97       	mov	r7,sp
8000d09e:	20 3d       	sub	sp,12
8000d0a0:	18 99       	mov	r9,r12
8000d0a2:	16 98       	mov	r8,r11
8000d0a4:	ef 69 ff f8 	st.b	r7[-8],r9
8000d0a8:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
8000d0ac:	4a 58       	lddpc	r8,8000d140 <udc_update_iface_desc+0xa8>
8000d0ae:	11 88       	ld.ub	r8,r8[0x0]
8000d0b0:	58 08       	cp.w	r8,0
8000d0b2:	c0 31       	brne	8000d0b8 <udc_update_iface_desc+0x20>
		return false;
8000d0b4:	30 08       	mov	r8,0
8000d0b6:	c4 18       	rjmp	8000d138 <udc_update_iface_desc+0xa0>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000d0b8:	4a 38       	lddpc	r8,8000d144 <udc_update_iface_desc+0xac>
8000d0ba:	70 08       	ld.w	r8,r8[0x0]
8000d0bc:	70 08       	ld.w	r8,r8[0x0]
8000d0be:	11 c8       	ld.ub	r8,r8[0x4]
8000d0c0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d0c4:	f0 09 18 00 	cp.b	r9,r8
8000d0c8:	c0 33       	brcs	8000d0ce <udc_update_iface_desc+0x36>
		return false;
8000d0ca:	30 08       	mov	r8,0
8000d0cc:	c3 68       	rjmp	8000d138 <udc_update_iface_desc+0xa0>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
8000d0ce:	49 e8       	lddpc	r8,8000d144 <udc_update_iface_desc+0xac>
8000d0d0:	70 08       	ld.w	r8,r8[0x0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000d0d2:	70 08       	ld.w	r8,r8[0x0]
8000d0d4:	10 99       	mov	r9,r8
8000d0d6:	49 d8       	lddpc	r8,8000d148 <udc_update_iface_desc+0xb0>
8000d0d8:	91 09       	st.w	r8[0x0],r9
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000d0da:	f0 1f 00 1d 	mcall	8000d14c <udc_update_iface_desc+0xb4>
8000d0de:	18 98       	mov	r8,r12
8000d0e0:	ef 48 ff fc 	st.w	r7[-4],r8
	while (ptr_end_desc >
8000d0e4:	c2 28       	rjmp	8000d128 <udc_update_iface_desc+0x90>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000d0e6:	49 98       	lddpc	r8,8000d148 <udc_update_iface_desc+0xb0>
8000d0e8:	70 08       	ld.w	r8,r8[0x0]
8000d0ea:	11 99       	ld.ub	r9,r8[0x1]
8000d0ec:	30 48       	mov	r8,4
8000d0ee:	f0 09 18 00 	cp.b	r9,r8
8000d0f2:	c1 31       	brne	8000d118 <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000d0f4:	49 58       	lddpc	r8,8000d148 <udc_update_iface_desc+0xb0>
8000d0f6:	70 08       	ld.w	r8,r8[0x0]
8000d0f8:	11 a8       	ld.ub	r8,r8[0x2]
8000d0fa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d0fe:	f0 09 18 00 	cp.b	r9,r8
8000d102:	c0 b1       	brne	8000d118 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
8000d104:	49 18       	lddpc	r8,8000d148 <udc_update_iface_desc+0xb0>
8000d106:	70 08       	ld.w	r8,r8[0x0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
					(setting_num ==
8000d108:	11 b8       	ld.ub	r8,r8[0x3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000d10a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d10e:	f0 09 18 00 	cp.b	r9,r8
8000d112:	c0 31       	brne	8000d118 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
8000d114:	30 18       	mov	r8,1
8000d116:	c1 18       	rjmp	8000d138 <udc_update_iface_desc+0xa0>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000d118:	48 c8       	lddpc	r8,8000d148 <udc_update_iface_desc+0xb0>
8000d11a:	70 09       	ld.w	r9,r8[0x0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
8000d11c:	48 b8       	lddpc	r8,8000d148 <udc_update_iface_desc+0xb0>
8000d11e:	70 08       	ld.w	r8,r8[0x0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000d120:	11 88       	ld.ub	r8,r8[0x0]
8000d122:	10 09       	add	r9,r8
8000d124:	48 98       	lddpc	r8,8000d148 <udc_update_iface_desc+0xb0>
8000d126:	91 09       	st.w	r8[0x0],r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000d128:	48 88       	lddpc	r8,8000d148 <udc_update_iface_desc+0xb0>
8000d12a:	70 08       	ld.w	r8,r8[0x0]
8000d12c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d130:	10 39       	cp.w	r9,r8
8000d132:	fe 9b ff da 	brhi	8000d0e6 <udc_update_iface_desc+0x4e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
8000d136:	30 08       	mov	r8,0
}
8000d138:	10 9c       	mov	r12,r8
8000d13a:	2f dd       	sub	sp,-12
8000d13c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d140:	00 00       	add	r0,r0
8000d142:	08 0a       	add	r10,r4
8000d144:	00 00       	add	r0,r0
8000d146:	08 0c       	add	r12,r4
8000d148:	00 00       	add	r0,r0
8000d14a:	08 10       	sub	r0,r4
8000d14c:	80 00       	ld.sh	r0,r0[0x0]
8000d14e:	cf dc       	rcall	8000d348 <udc_reset+0x60>

8000d150 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
8000d150:	eb cd 40 80 	pushm	r7,lr
8000d154:	1a 97       	mov	r7,sp
8000d156:	20 3d       	sub	sp,12
8000d158:	18 98       	mov	r8,r12
8000d15a:	ef 68 ff f4 	st.b	r7[-12],r8
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000d15e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d162:	30 0b       	mov	r11,0
8000d164:	10 9c       	mov	r12,r8
8000d166:	f0 1f 00 25 	mcall	8000d1f8 <udc_iface_disable+0xa8>
8000d16a:	18 98       	mov	r8,r12
8000d16c:	ec 18 00 01 	eorl	r8,0x1
8000d170:	5c 58       	castu.b	r8
8000d172:	c0 30       	breq	8000d178 <udc_iface_disable+0x28>
		return false;
8000d174:	30 08       	mov	r8,0
8000d176:	c3 d8       	rjmp	8000d1f0 <udc_iface_disable+0xa0>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000d178:	4a 18       	lddpc	r8,8000d1fc <udc_iface_disable+0xac>
8000d17a:	70 08       	ld.w	r8,r8[0x0]
8000d17c:	70 19       	ld.w	r9,r8[0x4]
8000d17e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d182:	a3 68       	lsl	r8,0x2
8000d184:	f2 08 00 08 	add	r8,r9,r8
8000d188:	70 08       	ld.w	r8,r8[0x0]
8000d18a:	ef 48 ff f8 	st.w	r7[-8],r8

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000d18e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d192:	70 38       	ld.w	r8,r8[0xc]
8000d194:	5d 18       	icall	r8
8000d196:	18 98       	mov	r8,r12
8000d198:	10 99       	mov	r9,r8
8000d19a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d19e:	12 9b       	mov	r11,r9
8000d1a0:	10 9c       	mov	r12,r8
8000d1a2:	f0 1f 00 16 	mcall	8000d1f8 <udc_iface_disable+0xa8>
8000d1a6:	18 98       	mov	r8,r12
8000d1a8:	ec 18 00 01 	eorl	r8,0x1
8000d1ac:	5c 58       	castu.b	r8
8000d1ae:	c0 30       	breq	8000d1b4 <udc_iface_disable+0x64>
		return false;
8000d1b0:	30 08       	mov	r8,0
8000d1b2:	c1 f8       	rjmp	8000d1f0 <udc_iface_disable+0xa0>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000d1b4:	49 38       	lddpc	r8,8000d200 <udc_iface_disable+0xb0>
8000d1b6:	70 08       	ld.w	r8,r8[0x0]
8000d1b8:	ef 48 ff fc 	st.w	r7[-4],r8
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000d1bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d1c0:	30 5b       	mov	r11,5
8000d1c2:	10 9c       	mov	r12,r8
8000d1c4:	f0 1f 00 10 	mcall	8000d204 <udc_iface_disable+0xb4>
8000d1c8:	18 98       	mov	r8,r12
8000d1ca:	ef 48 ff fc 	st.w	r7[-4],r8
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
8000d1ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d1d2:	58 08       	cp.w	r8,0
8000d1d4:	c0 71       	brne	8000d1e2 <udc_iface_disable+0x92>
		}
	}
#endif

	// Disable interface
	udi_api->disable();
8000d1d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d1da:	70 18       	ld.w	r8,r8[0x4]
8000d1dc:	5d 18       	icall	r8
	return true;
8000d1de:	30 18       	mov	r8,1
8000d1e0:	c0 88       	rjmp	8000d1f0 <udc_iface_disable+0xa0>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000d1e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d1e6:	11 a8       	ld.ub	r8,r8[0x2]
8000d1e8:	10 9c       	mov	r12,r8
8000d1ea:	f0 1f 00 08 	mcall	8000d208 <udc_iface_disable+0xb8>
		}
8000d1ee:	ce 7b       	rjmp	8000d1bc <udc_iface_disable+0x6c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
8000d1f0:	10 9c       	mov	r12,r8
8000d1f2:	2f dd       	sub	sp,-12
8000d1f4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d1f8:	80 00       	ld.sh	r0,r0[0x0]
8000d1fa:	d0 98       	*unknown*
8000d1fc:	00 00       	add	r0,r0
8000d1fe:	08 0c       	add	r12,r4
8000d200:	00 00       	add	r0,r0
8000d202:	08 10       	sub	r0,r4
8000d204:	80 00       	ld.sh	r0,r0[0x0]
8000d206:	d0 10       	acall	0x4
8000d208:	80 00       	ld.sh	r0,r0[0x0]
8000d20a:	a1 0c       	ld.d	r12,r0

8000d20c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
8000d20c:	eb cd 40 80 	pushm	r7,lr
8000d210:	1a 97       	mov	r7,sp
8000d212:	20 3d       	sub	sp,12
8000d214:	18 99       	mov	r9,r12
8000d216:	16 98       	mov	r8,r11
8000d218:	ef 69 ff f8 	st.b	r7[-8],r9
8000d21c:	ef 68 ff f4 	st.b	r7[-12],r8
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
8000d220:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d224:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d228:	12 9b       	mov	r11,r9
8000d22a:	10 9c       	mov	r12,r8
8000d22c:	f0 1f 00 25 	mcall	8000d2c0 <udc_iface_enable+0xb4>
8000d230:	18 98       	mov	r8,r12
8000d232:	ec 18 00 01 	eorl	r8,0x1
8000d236:	5c 58       	castu.b	r8
8000d238:	c0 30       	breq	8000d23e <udc_iface_enable+0x32>
		return false;
8000d23a:	30 08       	mov	r8,0
8000d23c:	c3 e8       	rjmp	8000d2b8 <udc_iface_enable+0xac>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000d23e:	4a 28       	lddpc	r8,8000d2c4 <udc_iface_enable+0xb8>
8000d240:	70 08       	ld.w	r8,r8[0x0]
8000d242:	ef 48 ff fc 	st.w	r7[-4],r8
8000d246:	c0 28       	rjmp	8000d24a <udc_iface_enable+0x3e>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
		}
	}
8000d248:	d7 03       	nop

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000d24a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d24e:	30 5b       	mov	r11,5
8000d250:	10 9c       	mov	r12,r8
8000d252:	f0 1f 00 1e 	mcall	8000d2c8 <udc_iface_enable+0xbc>
8000d256:	18 98       	mov	r8,r12
8000d258:	ef 48 ff fc 	st.w	r7[-4],r8
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
8000d25c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d260:	58 08       	cp.w	r8,0
8000d262:	c0 e1       	brne	8000d27e <udc_iface_enable+0x72>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000d264:	49 a8       	lddpc	r8,8000d2cc <udc_iface_enable+0xc0>
8000d266:	70 08       	ld.w	r8,r8[0x0]
8000d268:	70 19       	ld.w	r9,r8[0x4]
8000d26a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d26e:	a3 68       	lsl	r8,0x2
8000d270:	f2 08 00 08 	add	r8,r9,r8
8000d274:	70 08       	ld.w	r8,r8[0x0]
8000d276:	70 08       	ld.w	r8,r8[0x0]
8000d278:	5d 18       	icall	r8
8000d27a:	18 98       	mov	r8,r12
8000d27c:	c1 e8       	rjmp	8000d2b8 <udc_iface_enable+0xac>
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
8000d27e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d282:	11 c9       	ld.ub	r9,r8[0x4]
8000d284:	a9 69       	lsl	r9,0x8
8000d286:	11 d8       	ld.ub	r8,r8[0x5]
8000d288:	12 48       	or	r8,r9
8000d28a:	5c 88       	casts.h	r8
8000d28c:	5c 88       	casts.h	r8
8000d28e:	5c c8       	swap.bh	r8
8000d290:	5c 88       	casts.h	r8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000d292:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
				ep_desc->bmAttributes,
8000d296:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d29a:	11 b8       	ld.ub	r8,r8[0x3]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000d29c:	10 99       	mov	r9,r8
8000d29e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d2a2:	11 a8       	ld.ub	r8,r8[0x2]
8000d2a4:	12 9b       	mov	r11,r9
8000d2a6:	10 9c       	mov	r12,r8
8000d2a8:	f0 1f 00 0a 	mcall	8000d2d0 <udc_iface_enable+0xc4>
8000d2ac:	18 98       	mov	r8,r12
8000d2ae:	ec 18 00 01 	eorl	r8,0x1
8000d2b2:	5c 58       	castu.b	r8
8000d2b4:	cc a0       	breq	8000d248 <udc_iface_enable+0x3c>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
8000d2b6:	30 08       	mov	r8,0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
8000d2b8:	10 9c       	mov	r12,r8
8000d2ba:	2f dd       	sub	sp,-12
8000d2bc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d2c0:	80 00       	ld.sh	r0,r0[0x0]
8000d2c2:	d0 98       	*unknown*
8000d2c4:	00 00       	add	r0,r0
8000d2c6:	08 10       	sub	r0,r4
8000d2c8:	80 00       	ld.sh	r0,r0[0x0]
8000d2ca:	d0 10       	acall	0x4
8000d2cc:	00 00       	add	r0,r0
8000d2ce:	08 0c       	add	r12,r4
8000d2d0:	80 00       	ld.sh	r0,r0[0x0]
8000d2d2:	9d bc       	st.w	lr[0x2c],r12

8000d2d4 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
8000d2d4:	eb cd 40 80 	pushm	r7,lr
8000d2d8:	1a 97       	mov	r7,sp
	udd_enable();
8000d2da:	f0 1f 00 03 	mcall	8000d2e4 <udc_start+0x10>
}
8000d2de:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d2e2:	00 00       	add	r0,r0
8000d2e4:	80 00       	ld.sh	r0,r0[0x0]
8000d2e6:	9a e8       	ld.uh	r8,sp[0xc]

8000d2e8 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
8000d2e8:	eb cd 40 80 	pushm	r7,lr
8000d2ec:	1a 97       	mov	r7,sp
8000d2ee:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000d2f0:	49 38       	lddpc	r8,8000d33c <udc_reset+0x54>
8000d2f2:	11 88       	ld.ub	r8,r8[0x0]
8000d2f4:	58 08       	cp.w	r8,0
8000d2f6:	c1 80       	breq	8000d326 <udc_reset+0x3e>
		for (iface_num = 0;
8000d2f8:	30 08       	mov	r8,0
8000d2fa:	ef 68 ff ff 	st.b	r7[-1],r8
8000d2fe:	c0 b8       	rjmp	8000d314 <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
8000d300:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d304:	10 9c       	mov	r12,r8
8000d306:	f0 1f 00 0f 	mcall	8000d340 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000d30a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d30e:	2f f8       	sub	r8,-1
8000d310:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000d314:	48 c8       	lddpc	r8,8000d344 <udc_reset+0x5c>
8000d316:	70 08       	ld.w	r8,r8[0x0]
8000d318:	70 08       	ld.w	r8,r8[0x0]
8000d31a:	11 c8       	ld.ub	r8,r8[0x4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000d31c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d320:	f0 09 18 00 	cp.b	r9,r8
8000d324:	ce e3       	brcs	8000d300 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
8000d326:	48 69       	lddpc	r9,8000d33c <udc_reset+0x54>
8000d328:	30 08       	mov	r8,0
8000d32a:	b2 88       	st.b	r9[0x0],r8
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
8000d32c:	48 79       	lddpc	r9,8000d348 <udc_reset+0x60>
8000d32e:	e0 68 01 00 	mov	r8,256
8000d332:	b2 08       	st.h	r9[0x0],r8
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
8000d334:	2f fd       	sub	sp,-4
8000d336:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d33a:	00 00       	add	r0,r0
8000d33c:	00 00       	add	r0,r0
8000d33e:	08 0a       	add	r10,r4
8000d340:	80 00       	ld.sh	r0,r0[0x0]
8000d342:	d1 50       	acall	0x54
8000d344:	00 00       	add	r0,r0
8000d346:	08 0c       	add	r12,r4
8000d348:	00 00       	add	r0,r0
8000d34a:	08 08       	add	r8,r4

8000d34c <udc_sof_notify>:

void udc_sof_notify(void)
{
8000d34c:	eb cd 40 80 	pushm	r7,lr
8000d350:	1a 97       	mov	r7,sp
8000d352:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000d354:	49 88       	lddpc	r8,8000d3b4 <udc_sof_notify+0x68>
8000d356:	11 88       	ld.ub	r8,r8[0x0]
8000d358:	58 08       	cp.w	r8,0
8000d35a:	c2 a0       	breq	8000d3ae <udc_sof_notify+0x62>
		for (iface_num = 0;
8000d35c:	30 08       	mov	r8,0
8000d35e:	ef 68 ff ff 	st.b	r7[-1],r8
8000d362:	c1 d8       	rjmp	8000d39c <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
8000d364:	49 58       	lddpc	r8,8000d3b8 <udc_sof_notify+0x6c>
8000d366:	70 08       	ld.w	r8,r8[0x0]
8000d368:	70 19       	ld.w	r9,r8[0x4]
8000d36a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d36e:	a3 68       	lsl	r8,0x2
8000d370:	f2 08 00 08 	add	r8,r9,r8
8000d374:	70 08       	ld.w	r8,r8[0x0]
8000d376:	70 48       	ld.w	r8,r8[0x10]
8000d378:	58 08       	cp.w	r8,0
8000d37a:	c0 c0       	breq	8000d392 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
8000d37c:	48 f8       	lddpc	r8,8000d3b8 <udc_sof_notify+0x6c>
8000d37e:	70 08       	ld.w	r8,r8[0x0]
8000d380:	70 19       	ld.w	r9,r8[0x4]
8000d382:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d386:	a3 68       	lsl	r8,0x2
8000d388:	f2 08 00 08 	add	r8,r9,r8
8000d38c:	70 08       	ld.w	r8,r8[0x0]
8000d38e:	70 48       	ld.w	r8,r8[0x10]
8000d390:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000d392:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d396:	2f f8       	sub	r8,-1
8000d398:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000d39c:	48 78       	lddpc	r8,8000d3b8 <udc_sof_notify+0x6c>
8000d39e:	70 08       	ld.w	r8,r8[0x0]
8000d3a0:	70 08       	ld.w	r8,r8[0x0]
8000d3a2:	11 c8       	ld.ub	r8,r8[0x4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000d3a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d3a8:	f0 09 18 00 	cp.b	r9,r8
8000d3ac:	cd c3       	brcs	8000d364 <udc_sof_notify+0x18>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
8000d3ae:	2f fd       	sub	sp,-4
8000d3b0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d3b4:	00 00       	add	r0,r0
8000d3b6:	08 0a       	add	r10,r4
8000d3b8:	00 00       	add	r0,r0
8000d3ba:	08 0c       	add	r12,r4

8000d3bc <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
8000d3bc:	eb cd 40 80 	pushm	r7,lr
8000d3c0:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
8000d3c2:	48 98       	lddpc	r8,8000d3e4 <udc_req_std_dev_get_status+0x28>
8000d3c4:	90 39       	ld.sh	r9,r8[0x6]
8000d3c6:	30 28       	mov	r8,2
8000d3c8:	f0 09 19 00 	cp.h	r9,r8
8000d3cc:	c0 30       	breq	8000d3d2 <udc_req_std_dev_get_status+0x16>
		return false;
8000d3ce:	30 08       	mov	r8,0
8000d3d0:	c0 78       	rjmp	8000d3de <udc_req_std_dev_get_status+0x22>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
8000d3d2:	48 68       	lddpc	r8,8000d3e8 <udc_req_std_dev_get_status+0x2c>
8000d3d4:	30 2b       	mov	r11,2
8000d3d6:	10 9c       	mov	r12,r8
8000d3d8:	f0 1f 00 05 	mcall	8000d3ec <udc_req_std_dev_get_status+0x30>
			sizeof(udc_device_status));
	return true;
8000d3dc:	30 18       	mov	r8,1
}
8000d3de:	10 9c       	mov	r12,r8
8000d3e0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d3e4:	00 00       	add	r0,r0
8000d3e6:	0f c4       	ld.ub	r4,r7[0x4]
8000d3e8:	00 00       	add	r0,r0
8000d3ea:	08 08       	add	r8,r4
8000d3ec:	80 00       	ld.sh	r0,r0[0x0]
8000d3ee:	9d 90       	st.w	lr[0x24],r0

8000d3f0 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
8000d3f0:	eb cd 40 80 	pushm	r7,lr
8000d3f4:	1a 97       	mov	r7,sp
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
8000d3f6:	49 18       	lddpc	r8,8000d438 <udc_req_std_ep_get_status+0x48>
8000d3f8:	90 39       	ld.sh	r9,r8[0x6]
8000d3fa:	30 28       	mov	r8,2
8000d3fc:	f0 09 19 00 	cp.h	r9,r8
8000d400:	c0 30       	breq	8000d406 <udc_req_std_ep_get_status+0x16>
		return false;
8000d402:	30 08       	mov	r8,0
8000d404:	c1 68       	rjmp	8000d430 <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000d406:	48 d8       	lddpc	r8,8000d438 <udc_req_std_ep_get_status+0x48>
8000d408:	90 28       	ld.sh	r8,r8[0x4]
8000d40a:	5c 58       	castu.b	r8
8000d40c:	10 9c       	mov	r12,r8
8000d40e:	f0 1f 00 0c 	mcall	8000d43c <udc_req_std_ep_get_status+0x4c>
8000d412:	18 98       	mov	r8,r12
8000d414:	58 08       	cp.w	r8,0
8000d416:	c0 40       	breq	8000d41e <udc_req_std_ep_get_status+0x2e>
8000d418:	e0 68 01 00 	mov	r8,256
8000d41c:	c0 28       	rjmp	8000d420 <udc_req_std_ep_get_status+0x30>
8000d41e:	30 08       	mov	r8,0
8000d420:	48 89       	lddpc	r9,8000d440 <udc_req_std_ep_get_status+0x50>
8000d422:	b2 08       	st.h	r9[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
8000d424:	48 78       	lddpc	r8,8000d440 <udc_req_std_ep_get_status+0x50>
8000d426:	30 2b       	mov	r11,2
8000d428:	10 9c       	mov	r12,r8
8000d42a:	f0 1f 00 07 	mcall	8000d444 <udc_req_std_ep_get_status+0x54>
			sizeof(udc_ep_status));
	return true;
8000d42e:	30 18       	mov	r8,1
}
8000d430:	10 9c       	mov	r12,r8
8000d432:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d436:	00 00       	add	r0,r0
8000d438:	00 00       	add	r0,r0
8000d43a:	0f c4       	ld.ub	r4,r7[0x4]
8000d43c:	80 00       	ld.sh	r0,r0[0x0]
8000d43e:	a1 a8       	sbr	r8,0x0
8000d440:	00 00       	add	r0,r0
8000d442:	08 16       	sub	r6,r4
8000d444:	80 00       	ld.sh	r0,r0[0x0]
8000d446:	9d 90       	st.w	lr[0x24],r0

8000d448 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
8000d448:	eb cd 40 80 	pushm	r7,lr
8000d44c:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d44e:	48 d8       	lddpc	r8,8000d480 <udc_req_std_dev_clear_feature+0x38>
8000d450:	90 38       	ld.sh	r8,r8[0x6]
8000d452:	58 08       	cp.w	r8,0
8000d454:	c0 30       	breq	8000d45a <udc_req_std_dev_clear_feature+0x12>
		return false;
8000d456:	30 08       	mov	r8,0
8000d458:	c1 08       	rjmp	8000d478 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000d45a:	48 a8       	lddpc	r8,8000d480 <udc_req_std_dev_clear_feature+0x38>
8000d45c:	90 19       	ld.sh	r9,r8[0x2]
8000d45e:	30 18       	mov	r8,1
8000d460:	f0 09 19 00 	cp.h	r9,r8
8000d464:	c0 91       	brne	8000d476 <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
8000d466:	48 88       	lddpc	r8,8000d484 <udc_req_std_dev_clear_feature+0x3c>
8000d468:	90 08       	ld.sh	r8,r8[0x0]
8000d46a:	a9 d8       	cbr	r8,0x9
8000d46c:	5c 88       	casts.h	r8
8000d46e:	48 69       	lddpc	r9,8000d484 <udc_req_std_dev_clear_feature+0x3c>
8000d470:	b2 08       	st.h	r9[0x0],r8
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
8000d472:	30 18       	mov	r8,1
8000d474:	c0 28       	rjmp	8000d478 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
8000d476:	30 08       	mov	r8,0
}
8000d478:	10 9c       	mov	r12,r8
8000d47a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d47e:	00 00       	add	r0,r0
8000d480:	00 00       	add	r0,r0
8000d482:	0f c4       	ld.ub	r4,r7[0x4]
8000d484:	00 00       	add	r0,r0
8000d486:	08 08       	add	r8,r4

8000d488 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
8000d488:	eb cd 40 80 	pushm	r7,lr
8000d48c:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d48e:	48 c8       	lddpc	r8,8000d4bc <udc_req_std_ep_clear_feature+0x34>
8000d490:	90 38       	ld.sh	r8,r8[0x6]
8000d492:	58 08       	cp.w	r8,0
8000d494:	c0 30       	breq	8000d49a <udc_req_std_ep_clear_feature+0x12>
		return false;
8000d496:	30 08       	mov	r8,0
8000d498:	c0 e8       	rjmp	8000d4b4 <udc_req_std_ep_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000d49a:	48 98       	lddpc	r8,8000d4bc <udc_req_std_ep_clear_feature+0x34>
8000d49c:	90 18       	ld.sh	r8,r8[0x2]
8000d49e:	58 08       	cp.w	r8,0
8000d4a0:	c0 91       	brne	8000d4b2 <udc_req_std_ep_clear_feature+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000d4a2:	48 78       	lddpc	r8,8000d4bc <udc_req_std_ep_clear_feature+0x34>
8000d4a4:	90 28       	ld.sh	r8,r8[0x4]
8000d4a6:	5c 58       	castu.b	r8
8000d4a8:	10 9c       	mov	r12,r8
8000d4aa:	f0 1f 00 06 	mcall	8000d4c0 <udc_req_std_ep_clear_feature+0x38>
8000d4ae:	18 98       	mov	r8,r12
8000d4b0:	c0 28       	rjmp	8000d4b4 <udc_req_std_ep_clear_feature+0x2c>
	}
	return false;
8000d4b2:	30 08       	mov	r8,0
}
8000d4b4:	10 9c       	mov	r12,r8
8000d4b6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d4ba:	00 00       	add	r0,r0
8000d4bc:	00 00       	add	r0,r0
8000d4be:	0f c4       	ld.ub	r4,r7[0x4]
8000d4c0:	80 00       	ld.sh	r0,r0[0x0]
8000d4c2:	a2 ec       	st.b	r1[0x6],r12

8000d4c4 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
8000d4c4:	eb cd 40 80 	pushm	r7,lr
8000d4c8:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d4ca:	4a 78       	lddpc	r8,8000d564 <udc_req_std_dev_set_feature+0xa0>
8000d4cc:	90 38       	ld.sh	r8,r8[0x6]
8000d4ce:	58 08       	cp.w	r8,0
8000d4d0:	c0 30       	breq	8000d4d6 <udc_req_std_dev_set_feature+0x12>
		return false;
8000d4d2:	30 08       	mov	r8,0
8000d4d4:	c4 48       	rjmp	8000d55c <udc_req_std_dev_set_feature+0x98>
	}

	switch (udd_g_ctrlreq.req.wValue) {
8000d4d6:	4a 48       	lddpc	r8,8000d564 <udc_req_std_dev_set_feature+0xa0>
8000d4d8:	90 18       	ld.sh	r8,r8[0x2]
8000d4da:	5c 78       	castu.h	r8
8000d4dc:	58 18       	cp.w	r8,1
8000d4de:	c0 40       	breq	8000d4e6 <udc_req_std_dev_set_feature+0x22>
8000d4e0:	58 28       	cp.w	r8,2
8000d4e2:	c0 40       	breq	8000d4ea <udc_req_std_dev_set_feature+0x26>
8000d4e4:	c3 b8       	rjmp	8000d55a <udc_req_std_dev_set_feature+0x96>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
8000d4e6:	30 08       	mov	r8,0
8000d4e8:	c3 a8       	rjmp	8000d55c <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
8000d4ea:	f0 1f 00 20 	mcall	8000d568 <udc_req_std_dev_set_feature+0xa4>
8000d4ee:	18 98       	mov	r8,r12
8000d4f0:	ec 18 00 01 	eorl	r8,0x1
8000d4f4:	5c 58       	castu.b	r8
8000d4f6:	c2 f1       	brne	8000d554 <udc_req_std_dev_set_feature+0x90>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
8000d4f8:	49 b8       	lddpc	r8,8000d564 <udc_req_std_dev_set_feature+0xa0>
8000d4fa:	90 28       	ld.sh	r8,r8[0x4]
8000d4fc:	5c 78       	castu.h	r8
8000d4fe:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d502:	c2 b1       	brne	8000d558 <udc_req_std_dev_set_feature+0x94>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
8000d504:	f0 1f 00 1a 	mcall	8000d56c <udc_req_std_dev_set_feature+0xa8>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
8000d508:	49 78       	lddpc	r8,8000d564 <udc_req_std_dev_set_feature+0xa0>
8000d50a:	90 28       	ld.sh	r8,r8[0x4]
8000d50c:	5c 78       	castu.h	r8
8000d50e:	a9 88       	lsr	r8,0x8
8000d510:	5c 88       	casts.h	r8
8000d512:	5c 78       	castu.h	r8
8000d514:	58 28       	cp.w	r8,2
8000d516:	c1 00       	breq	8000d536 <udc_req_std_dev_set_feature+0x72>
8000d518:	e0 89 00 05 	brgt	8000d522 <udc_req_std_dev_set_feature+0x5e>
8000d51c:	58 18       	cp.w	r8,1
8000d51e:	c0 70       	breq	8000d52c <udc_req_std_dev_set_feature+0x68>
8000d520:	c1 d8       	rjmp	8000d55a <udc_req_std_dev_set_feature+0x96>
8000d522:	58 38       	cp.w	r8,3
8000d524:	c0 e0       	breq	8000d540 <udc_req_std_dev_set_feature+0x7c>
8000d526:	58 48       	cp.w	r8,4
8000d528:	c1 10       	breq	8000d54a <udc_req_std_dev_set_feature+0x86>
8000d52a:	c1 88       	rjmp	8000d55a <udc_req_std_dev_set_feature+0x96>
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
8000d52c:	48 e8       	lddpc	r8,8000d564 <udc_req_std_dev_set_feature+0xa0>
8000d52e:	49 19       	lddpc	r9,8000d570 <udc_req_std_dev_set_feature+0xac>
8000d530:	91 49       	st.w	r8[0x10],r9
			return true;
8000d532:	30 18       	mov	r8,1
8000d534:	c1 48       	rjmp	8000d55c <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
8000d536:	48 c8       	lddpc	r8,8000d564 <udc_req_std_dev_set_feature+0xa0>
8000d538:	48 f9       	lddpc	r9,8000d574 <udc_req_std_dev_set_feature+0xb0>
8000d53a:	91 49       	st.w	r8[0x10],r9
			return true;
8000d53c:	30 18       	mov	r8,1
8000d53e:	c0 f8       	rjmp	8000d55c <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
8000d540:	48 98       	lddpc	r8,8000d564 <udc_req_std_dev_set_feature+0xa0>
8000d542:	48 e9       	lddpc	r9,8000d578 <udc_req_std_dev_set_feature+0xb4>
8000d544:	91 49       	st.w	r8[0x10],r9
			return true;
8000d546:	30 18       	mov	r8,1
8000d548:	c0 a8       	rjmp	8000d55c <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
8000d54a:	48 78       	lddpc	r8,8000d564 <udc_req_std_dev_set_feature+0xa0>
8000d54c:	48 c9       	lddpc	r9,8000d57c <udc_req_std_dev_set_feature+0xb8>
8000d54e:	91 49       	st.w	r8[0x10],r9
			return true;
8000d550:	30 18       	mov	r8,1
8000d552:	c0 58       	rjmp	8000d55c <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
			break;
8000d554:	d7 03       	nop
8000d556:	c0 28       	rjmp	8000d55a <udc_req_std_dev_set_feature+0x96>
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
			break;
8000d558:	d7 03       	nop
		break;
#endif
	default:
		break;
	}
	return false;
8000d55a:	30 08       	mov	r8,0
}
8000d55c:	10 9c       	mov	r12,r8
8000d55e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d562:	00 00       	add	r0,r0
8000d564:	00 00       	add	r0,r0
8000d566:	0f c4       	ld.ub	r4,r7[0x4]
8000d568:	80 00       	ld.sh	r0,r0[0x0]
8000d56a:	9c f4       	ld.uh	r4,lr[0xe]
8000d56c:	80 00       	ld.sh	r0,r0[0x0]
8000d56e:	d2 e8       	*unknown*
8000d570:	80 00       	ld.sh	r0,r0[0x0]
8000d572:	a6 b0       	st.b	r3[0x3],r0
8000d574:	80 00       	ld.sh	r0,r0[0x0]
8000d576:	a6 da       	st.b	r3[0x5],r10
8000d578:	80 00       	ld.sh	r0,r0[0x0]
8000d57a:	a7 04       	ld.d	r4,r3
8000d57c:	80 00       	ld.sh	r0,r0[0x0]
8000d57e:	a7 20       	st.d	r3++,r0

8000d580 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
8000d580:	eb cd 40 80 	pushm	r7,lr
8000d584:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d586:	48 f8       	lddpc	r8,8000d5c0 <udc_req_std_ep_set_feature+0x40>
8000d588:	90 38       	ld.sh	r8,r8[0x6]
8000d58a:	58 08       	cp.w	r8,0
8000d58c:	c0 30       	breq	8000d592 <udc_req_std_ep_set_feature+0x12>
		return false;
8000d58e:	30 08       	mov	r8,0
8000d590:	c1 48       	rjmp	8000d5b8 <udc_req_std_ep_set_feature+0x38>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000d592:	48 c8       	lddpc	r8,8000d5c0 <udc_req_std_ep_set_feature+0x40>
8000d594:	90 18       	ld.sh	r8,r8[0x2]
8000d596:	58 08       	cp.w	r8,0
8000d598:	c0 f1       	brne	8000d5b6 <udc_req_std_ep_set_feature+0x36>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
8000d59a:	48 a8       	lddpc	r8,8000d5c0 <udc_req_std_ep_set_feature+0x40>
8000d59c:	90 28       	ld.sh	r8,r8[0x4]
8000d59e:	5c 58       	castu.b	r8
8000d5a0:	10 9c       	mov	r12,r8
8000d5a2:	f0 1f 00 09 	mcall	8000d5c4 <udc_req_std_ep_set_feature+0x44>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000d5a6:	48 78       	lddpc	r8,8000d5c0 <udc_req_std_ep_set_feature+0x40>
8000d5a8:	90 28       	ld.sh	r8,r8[0x4]
8000d5aa:	5c 58       	castu.b	r8
8000d5ac:	10 9c       	mov	r12,r8
8000d5ae:	f0 1f 00 07 	mcall	8000d5c8 <udc_req_std_ep_set_feature+0x48>
8000d5b2:	18 98       	mov	r8,r12
8000d5b4:	c0 28       	rjmp	8000d5b8 <udc_req_std_ep_set_feature+0x38>
	}
	return false;
8000d5b6:	30 08       	mov	r8,0
}
8000d5b8:	10 9c       	mov	r12,r8
8000d5ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d5be:	00 00       	add	r0,r0
8000d5c0:	00 00       	add	r0,r0
8000d5c2:	0f c4       	ld.ub	r4,r7[0x4]
8000d5c4:	80 00       	ld.sh	r0,r0[0x0]
8000d5c6:	a5 50       	asr	r0,0x5
8000d5c8:	80 00       	ld.sh	r0,r0[0x0]
8000d5ca:	a1 d8       	cbr	r8,0x1

8000d5cc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
8000d5cc:	eb cd 40 80 	pushm	r7,lr
8000d5d0:	1a 97       	mov	r7,sp
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
8000d5d2:	48 68       	lddpc	r8,8000d5e8 <udc_valid_address+0x1c>
8000d5d4:	90 18       	ld.sh	r8,r8[0x2]
8000d5d6:	5c 58       	castu.b	r8
8000d5d8:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000d5dc:	10 9c       	mov	r12,r8
8000d5de:	f0 1f 00 04 	mcall	8000d5ec <udc_valid_address+0x20>
}
8000d5e2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d5e6:	00 00       	add	r0,r0
8000d5e8:	00 00       	add	r0,r0
8000d5ea:	0f c4       	ld.ub	r4,r7[0x4]
8000d5ec:	80 00       	ld.sh	r0,r0[0x0]
8000d5ee:	9d 10       	st.w	lr[0x4],r0

8000d5f0 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
8000d5f0:	eb cd 40 80 	pushm	r7,lr
8000d5f4:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d5f6:	48 78       	lddpc	r8,8000d610 <udc_req_std_dev_set_address+0x20>
8000d5f8:	90 38       	ld.sh	r8,r8[0x6]
8000d5fa:	58 08       	cp.w	r8,0
8000d5fc:	c0 30       	breq	8000d602 <udc_req_std_dev_set_address+0x12>
		return false;
8000d5fe:	30 08       	mov	r8,0
8000d600:	c0 58       	rjmp	8000d60a <udc_req_std_dev_set_address+0x1a>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000d602:	48 48       	lddpc	r8,8000d610 <udc_req_std_dev_set_address+0x20>
8000d604:	48 49       	lddpc	r9,8000d614 <udc_req_std_dev_set_address+0x24>
8000d606:	91 49       	st.w	r8[0x10],r9
	return true;
8000d608:	30 18       	mov	r8,1
}
8000d60a:	10 9c       	mov	r12,r8
8000d60c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d610:	00 00       	add	r0,r0
8000d612:	0f c4       	ld.ub	r4,r7[0x4]
8000d614:	80 00       	ld.sh	r0,r0[0x0]
8000d616:	d5 cc       	*unknown*

8000d618 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
8000d618:	eb cd 40 80 	pushm	r7,lr
8000d61c:	1a 97       	mov	r7,sp
8000d61e:	20 3d       	sub	sp,12
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
8000d620:	30 08       	mov	r8,0
8000d622:	ef 68 ff ff 	st.b	r7[-1],r8

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
8000d626:	4b 68       	lddpc	r8,8000d6fc <udc_req_std_dev_get_str_desc+0xe4>
8000d628:	90 18       	ld.sh	r8,r8[0x2]
8000d62a:	5c 78       	castu.h	r8
8000d62c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d630:	58 18       	cp.w	r8,1
8000d632:	c1 00       	breq	8000d652 <udc_req_std_dev_get_str_desc+0x3a>
8000d634:	e0 89 00 05 	brgt	8000d63e <udc_req_std_dev_get_str_desc+0x26>
8000d638:	58 08       	cp.w	r8,0
8000d63a:	c0 70       	breq	8000d648 <udc_req_std_dev_get_str_desc+0x30>
8000d63c:	c2 28       	rjmp	8000d680 <udc_req_std_dev_get_str_desc+0x68>
8000d63e:	58 28       	cp.w	r8,2
8000d640:	c1 00       	breq	8000d660 <udc_req_std_dev_get_str_desc+0x48>
8000d642:	58 38       	cp.w	r8,3
8000d644:	c1 50       	breq	8000d66e <udc_req_std_dev_get_str_desc+0x56>
8000d646:	c1 d8       	rjmp	8000d680 <udc_req_std_dev_get_str_desc+0x68>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
8000d648:	30 4b       	mov	r11,4
8000d64a:	4a ec       	lddpc	r12,8000d700 <udc_req_std_dev_get_str_desc+0xe8>
8000d64c:	f0 1f 00 2e 	mcall	8000d704 <udc_req_std_dev_get_str_desc+0xec>
				sizeof(udc_string_desc_languageid));
		break;
8000d650:	c1 a8       	rjmp	8000d684 <udc_req_std_dev_get_str_desc+0x6c>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
8000d652:	30 78       	mov	r8,7
8000d654:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_manufacturer_name;
8000d658:	4a c8       	lddpc	r8,8000d708 <udc_req_std_dev_get_str_desc+0xf0>
8000d65a:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000d65e:	c1 38       	rjmp	8000d684 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
8000d660:	30 78       	mov	r8,7
8000d662:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_product_name;
8000d666:	4a a8       	lddpc	r8,8000d70c <udc_req_std_dev_get_str_desc+0xf4>
8000d668:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000d66c:	c0 c8       	rjmp	8000d684 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
8000d66e:	30 c8       	mov	r8,12
8000d670:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_get_string_serial_name();
8000d674:	f0 1f 00 27 	mcall	8000d710 <udc_req_std_dev_get_str_desc+0xf8>
8000d678:	18 98       	mov	r8,r12
8000d67a:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000d67e:	c0 38       	rjmp	8000d684 <udc_req_std_dev_get_str_desc+0x6c>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
8000d680:	30 08       	mov	r8,0
8000d682:	c3 88       	rjmp	8000d6f2 <udc_req_std_dev_get_str_desc+0xda>
	}

	if (str_length) {
8000d684:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d688:	30 08       	mov	r8,0
8000d68a:	f0 09 18 00 	cp.b	r9,r8
8000d68e:	c3 10       	breq	8000d6f0 <udc_req_std_dev_get_str_desc+0xd8>
		for(i = 0; i < str_length; i++) {
8000d690:	30 08       	mov	r8,0
8000d692:	ef 68 ff f7 	st.b	r7[-9],r8
8000d696:	c1 88       	rjmp	8000d6c6 <udc_req_std_dev_get_str_desc+0xae>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
8000d698:	ef 3b ff f7 	ld.ub	r11,r7[-9]
8000d69c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000d6a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d6a4:	f2 08 00 08 	add	r8,r9,r8
8000d6a8:	11 88       	ld.ub	r8,r8[0x0]
8000d6aa:	5c c8       	swap.bh	r8
8000d6ac:	5c 88       	casts.h	r8
8000d6ae:	10 99       	mov	r9,r8
8000d6b0:	49 9a       	lddpc	r10,8000d714 <udc_req_std_dev_get_str_desc+0xfc>
8000d6b2:	f6 08 15 01 	lsl	r8,r11,0x1
8000d6b6:	f4 08 00 08 	add	r8,r10,r8
8000d6ba:	b0 19       	st.h	r8[0x2],r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
8000d6bc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000d6c0:	2f f8       	sub	r8,-1
8000d6c2:	ef 68 ff f7 	st.b	r7[-9],r8
8000d6c6:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000d6ca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d6ce:	f0 09 18 00 	cp.b	r9,r8
8000d6d2:	ce 33       	brcs	8000d698 <udc_req_std_dev_get_str_desc+0x80>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
8000d6d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d6d8:	2f f8       	sub	r8,-1
8000d6da:	5c 58       	castu.b	r8
8000d6dc:	a1 78       	lsl	r8,0x1
8000d6de:	5c 58       	castu.b	r8
8000d6e0:	48 d9       	lddpc	r9,8000d714 <udc_req_std_dev_get_str_desc+0xfc>
8000d6e2:	b2 88       	st.b	r9[0x0],r8
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
8000d6e4:	48 c8       	lddpc	r8,8000d714 <udc_req_std_dev_get_str_desc+0xfc>
8000d6e6:	11 88       	ld.ub	r8,r8[0x0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
8000d6e8:	10 9b       	mov	r11,r8
8000d6ea:	48 bc       	lddpc	r12,8000d714 <udc_req_std_dev_get_str_desc+0xfc>
8000d6ec:	f0 1f 00 06 	mcall	8000d704 <udc_req_std_dev_get_str_desc+0xec>
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
8000d6f0:	30 18       	mov	r8,1
}
8000d6f2:	10 9c       	mov	r12,r8
8000d6f4:	2f dd       	sub	sp,-12
8000d6f6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d6fa:	00 00       	add	r0,r0
8000d6fc:	00 00       	add	r0,r0
8000d6fe:	0f c4       	ld.ub	r4,r7[0x4]
8000d700:	00 00       	add	r0,r0
8000d702:	02 14       	sub	r4,r1
8000d704:	80 00       	ld.sh	r0,r0[0x0]
8000d706:	9d 90       	st.w	lr[0x24],r0
8000d708:	00 00       	add	r0,r0
8000d70a:	02 18       	sub	r8,r1
8000d70c:	00 00       	add	r0,r0
8000d70e:	02 20       	rsub	r0,r1
8000d710:	80 00       	ld.sh	r0,r0[0x0]
8000d712:	cf c8       	rjmp	8000d90a <udc_req_std_dev_get_descriptor+0x1f2>
8000d714:	00 00       	add	r0,r0
8000d716:	02 28       	rsub	r8,r1

8000d718 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
8000d718:	eb cd 40 80 	pushm	r7,lr
8000d71c:	1a 97       	mov	r7,sp
8000d71e:	20 1d       	sub	sp,4
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000d720:	fe f8 02 40 	ld.w	r8,pc[576]
8000d724:	90 18       	ld.sh	r8,r8[0x2]
8000d726:	ef 68 ff ff 	st.b	r7[-1],r8

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
8000d72a:	fe f8 02 36 	ld.w	r8,pc[566]
8000d72e:	90 18       	ld.sh	r8,r8[0x2]
8000d730:	5c 78       	castu.h	r8
8000d732:	a9 88       	lsr	r8,0x8
8000d734:	5c 88       	casts.h	r8
8000d736:	5c 58       	castu.b	r8
8000d738:	58 38       	cp.w	r8,3
8000d73a:	e0 80 00 f7 	breq	8000d928 <udc_req_std_dev_get_descriptor+0x210>
8000d73e:	e0 89 00 07 	brgt	8000d74c <udc_req_std_dev_get_descriptor+0x34>
8000d742:	58 18       	cp.w	r8,1
8000d744:	c0 b0       	breq	8000d75a <udc_req_std_dev_get_descriptor+0x42>
8000d746:	58 28       	cp.w	r8,2
8000d748:	c2 70       	breq	8000d796 <udc_req_std_dev_get_descriptor+0x7e>
8000d74a:	cf 88       	rjmp	8000d93a <udc_req_std_dev_get_descriptor+0x222>
8000d74c:	58 68       	cp.w	r8,6
8000d74e:	e0 80 00 82 	breq	8000d852 <udc_req_std_dev_get_descriptor+0x13a>
8000d752:	58 78       	cp.w	r8,7
8000d754:	e0 80 00 8a 	breq	8000d868 <udc_req_std_dev_get_descriptor+0x150>
8000d758:	cf 18       	rjmp	8000d93a <udc_req_std_dev_get_descriptor+0x222>
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
8000d75a:	f0 1f 00 83 	mcall	8000d964 <udc_req_std_dev_get_descriptor+0x24c>
8000d75e:	18 98       	mov	r8,r12
8000d760:	ec 18 00 01 	eorl	r8,0x1
8000d764:	5c 58       	castu.b	r8
8000d766:	c0 d0       	breq	8000d780 <udc_req_std_dev_get_descriptor+0x68>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
8000d768:	fe f8 02 00 	ld.w	r8,pc[512]
8000d76c:	70 28       	ld.w	r8,r8[0x8]
8000d76e:	11 88       	ld.ub	r8,r8[0x0]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
8000d770:	10 99       	mov	r9,r8
8000d772:	4f e8       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d774:	70 28       	ld.w	r8,r8[0x8]
8000d776:	12 9b       	mov	r11,r9
8000d778:	10 9c       	mov	r12,r8
8000d77a:	f0 1f 00 7d 	mcall	8000d96c <udc_req_std_dev_get_descriptor+0x254>
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000d77e:	ce 18       	rjmp	8000d940 <udc_req_std_dev_get_descriptor+0x228>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
8000d780:	4f a8       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d782:	70 08       	ld.w	r8,r8[0x0]
8000d784:	11 88       	ld.ub	r8,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
8000d786:	10 99       	mov	r9,r8
8000d788:	4f 88       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d78a:	70 08       	ld.w	r8,r8[0x0]
8000d78c:	12 9b       	mov	r11,r9
8000d78e:	10 9c       	mov	r12,r8
8000d790:	f0 1f 00 77 	mcall	8000d96c <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000d794:	cd 68       	rjmp	8000d940 <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
8000d796:	f0 1f 00 74 	mcall	8000d964 <udc_req_std_dev_get_descriptor+0x24c>
8000d79a:	18 98       	mov	r8,r12
8000d79c:	58 08       	cp.w	r8,0
8000d79e:	c2 b0       	breq	8000d7f4 <udc_req_std_dev_get_descriptor+0xdc>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000d7a0:	4f 28       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d7a2:	70 28       	ld.w	r8,r8[0x8]
8000d7a4:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d7a8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d7ac:	f0 09 18 00 	cp.b	r9,r8
8000d7b0:	c0 33       	brcs	8000d7b6 <udc_req_std_dev_get_descriptor+0x9e>
					bNumConfigurations) {
				return false;
8000d7b2:	30 08       	mov	r8,0
8000d7b4:	cd 28       	rjmp	8000d958 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000d7b6:	4e d8       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d7b8:	70 49       	ld.w	r9,r8[0x10]
8000d7ba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d7be:	a3 78       	lsl	r8,0x3
8000d7c0:	f2 08 00 08 	add	r8,r9,r8
8000d7c4:	70 08       	ld.w	r8,r8[0x0]
8000d7c6:	11 a9       	ld.ub	r9,r8[0x2]
8000d7c8:	a9 69       	lsl	r9,0x8
8000d7ca:	11 b8       	ld.ub	r8,r8[0x3]
8000d7cc:	12 48       	or	r8,r9
8000d7ce:	5c 88       	casts.h	r8
8000d7d0:	5c 88       	casts.h	r8
8000d7d2:	5c c8       	swap.bh	r8
8000d7d4:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d7d6:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000d7da:	4e 48       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d7dc:	70 4a       	ld.w	r10,r8[0x10]
8000d7de:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d7e2:	a3 78       	lsl	r8,0x3
8000d7e4:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d7e8:	70 08       	ld.w	r8,r8[0x0]
8000d7ea:	12 9b       	mov	r11,r9
8000d7ec:	10 9c       	mov	r12,r8
8000d7ee:	f0 1f 00 60 	mcall	8000d96c <udc_req_std_dev_get_descriptor+0x254>
8000d7f2:	c2 a8       	rjmp	8000d846 <udc_req_std_dev_get_descriptor+0x12e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000d7f4:	4d d8       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d7f6:	70 08       	ld.w	r8,r8[0x0]
8000d7f8:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d7fc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d800:	f0 09 18 00 	cp.b	r9,r8
8000d804:	c0 33       	brcs	8000d80a <udc_req_std_dev_get_descriptor+0xf2>
					bNumConfigurations) {
				return false;
8000d806:	30 08       	mov	r8,0
8000d808:	ca 88       	rjmp	8000d958 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000d80a:	4d 88       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d80c:	70 19       	ld.w	r9,r8[0x4]
8000d80e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d812:	a3 78       	lsl	r8,0x3
8000d814:	f2 08 00 08 	add	r8,r9,r8
8000d818:	70 08       	ld.w	r8,r8[0x0]
8000d81a:	11 a9       	ld.ub	r9,r8[0x2]
8000d81c:	a9 69       	lsl	r9,0x8
8000d81e:	11 b8       	ld.ub	r8,r8[0x3]
8000d820:	12 48       	or	r8,r9
8000d822:	5c 88       	casts.h	r8
8000d824:	5c 88       	casts.h	r8
8000d826:	5c c8       	swap.bh	r8
8000d828:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d82a:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000d82e:	4c f8       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d830:	70 1a       	ld.w	r10,r8[0x4]
8000d832:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d836:	a3 78       	lsl	r8,0x3
8000d838:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d83c:	70 08       	ld.w	r8,r8[0x0]
8000d83e:	12 9b       	mov	r11,r9
8000d840:	10 9c       	mov	r12,r8
8000d842:	f0 1f 00 4b 	mcall	8000d96c <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000d846:	4c 78       	lddpc	r8,8000d960 <udc_req_std_dev_get_descriptor+0x248>
8000d848:	70 28       	ld.w	r8,r8[0x8]
8000d84a:	10 99       	mov	r9,r8
8000d84c:	30 28       	mov	r8,2
8000d84e:	b2 98       	st.b	r9[0x1],r8
				USB_DT_CONFIGURATION;
		break;
8000d850:	c7 88       	rjmp	8000d940 <udc_req_std_dev_get_descriptor+0x228>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
8000d852:	4c 68       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d854:	70 38       	ld.w	r8,r8[0xc]
8000d856:	11 88       	ld.ub	r8,r8[0x0]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
8000d858:	10 99       	mov	r9,r8
8000d85a:	4c 48       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d85c:	70 38       	ld.w	r8,r8[0xc]
8000d85e:	12 9b       	mov	r11,r9
8000d860:	10 9c       	mov	r12,r8
8000d862:	f0 1f 00 43 	mcall	8000d96c <udc_req_std_dev_get_descriptor+0x254>
				udc_config.qualifier->bLength);
		break;
8000d866:	c6 d8       	rjmp	8000d940 <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
8000d868:	f0 1f 00 3f 	mcall	8000d964 <udc_req_std_dev_get_descriptor+0x24c>
8000d86c:	18 98       	mov	r8,r12
8000d86e:	ec 18 00 01 	eorl	r8,0x1
8000d872:	5c 58       	castu.b	r8
8000d874:	c2 b0       	breq	8000d8ca <udc_req_std_dev_get_descriptor+0x1b2>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000d876:	4b d8       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d878:	70 28       	ld.w	r8,r8[0x8]
8000d87a:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d87e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d882:	f0 09 18 00 	cp.b	r9,r8
8000d886:	c0 33       	brcs	8000d88c <udc_req_std_dev_get_descriptor+0x174>
					bNumConfigurations) {
				return false;
8000d888:	30 08       	mov	r8,0
8000d88a:	c6 78       	rjmp	8000d958 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000d88c:	4b 78       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d88e:	70 49       	ld.w	r9,r8[0x10]
8000d890:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d894:	a3 78       	lsl	r8,0x3
8000d896:	f2 08 00 08 	add	r8,r9,r8
8000d89a:	70 08       	ld.w	r8,r8[0x0]
8000d89c:	11 a9       	ld.ub	r9,r8[0x2]
8000d89e:	a9 69       	lsl	r9,0x8
8000d8a0:	11 b8       	ld.ub	r8,r8[0x3]
8000d8a2:	12 48       	or	r8,r9
8000d8a4:	5c 88       	casts.h	r8
8000d8a6:	5c 88       	casts.h	r8
8000d8a8:	5c c8       	swap.bh	r8
8000d8aa:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d8ac:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000d8b0:	4a e8       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d8b2:	70 4a       	ld.w	r10,r8[0x10]
8000d8b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d8b8:	a3 78       	lsl	r8,0x3
8000d8ba:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d8be:	70 08       	ld.w	r8,r8[0x0]
8000d8c0:	12 9b       	mov	r11,r9
8000d8c2:	10 9c       	mov	r12,r8
8000d8c4:	f0 1f 00 2a 	mcall	8000d96c <udc_req_std_dev_get_descriptor+0x254>
8000d8c8:	c2 a8       	rjmp	8000d91c <udc_req_std_dev_get_descriptor+0x204>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000d8ca:	4a 88       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d8cc:	70 08       	ld.w	r8,r8[0x0]
8000d8ce:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d8d2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d8d6:	f0 09 18 00 	cp.b	r9,r8
8000d8da:	c0 33       	brcs	8000d8e0 <udc_req_std_dev_get_descriptor+0x1c8>
					bNumConfigurations) {
				return false;
8000d8dc:	30 08       	mov	r8,0
8000d8de:	c3 d8       	rjmp	8000d958 <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000d8e0:	4a 28       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d8e2:	70 19       	ld.w	r9,r8[0x4]
8000d8e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d8e8:	a3 78       	lsl	r8,0x3
8000d8ea:	f2 08 00 08 	add	r8,r9,r8
8000d8ee:	70 08       	ld.w	r8,r8[0x0]
8000d8f0:	11 a9       	ld.ub	r9,r8[0x2]
8000d8f2:	a9 69       	lsl	r9,0x8
8000d8f4:	11 b8       	ld.ub	r8,r8[0x3]
8000d8f6:	12 48       	or	r8,r9
8000d8f8:	5c 88       	casts.h	r8
8000d8fa:	5c 88       	casts.h	r8
8000d8fc:	5c c8       	swap.bh	r8
8000d8fe:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d900:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000d904:	49 98       	lddpc	r8,8000d968 <udc_req_std_dev_get_descriptor+0x250>
8000d906:	70 1a       	ld.w	r10,r8[0x4]
8000d908:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d90c:	a3 78       	lsl	r8,0x3
8000d90e:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d912:	70 08       	ld.w	r8,r8[0x0]
8000d914:	12 9b       	mov	r11,r9
8000d916:	10 9c       	mov	r12,r8
8000d918:	f0 1f 00 15 	mcall	8000d96c <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000d91c:	49 18       	lddpc	r8,8000d960 <udc_req_std_dev_get_descriptor+0x248>
8000d91e:	70 28       	ld.w	r8,r8[0x8]
8000d920:	10 99       	mov	r9,r8
8000d922:	30 78       	mov	r8,7
8000d924:	b2 98       	st.b	r9[0x1],r8
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
8000d926:	c0 d8       	rjmp	8000d940 <udc_req_std_dev_get_descriptor+0x228>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
8000d928:	f0 1f 00 12 	mcall	8000d970 <udc_req_std_dev_get_descriptor+0x258>
8000d92c:	18 98       	mov	r8,r12
8000d92e:	ec 18 00 01 	eorl	r8,0x1
8000d932:	5c 58       	castu.b	r8
8000d934:	c0 50       	breq	8000d93e <udc_req_std_dev_get_descriptor+0x226>
			return false;
8000d936:	30 08       	mov	r8,0
8000d938:	c1 08       	rjmp	8000d958 <udc_req_std_dev_get_descriptor+0x240>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
8000d93a:	30 08       	mov	r8,0
8000d93c:	c0 e8       	rjmp	8000d958 <udc_req_std_dev_get_descriptor+0x240>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
8000d93e:	d7 03       	nop
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
8000d940:	48 88       	lddpc	r8,8000d960 <udc_req_std_dev_get_descriptor+0x248>
8000d942:	90 39       	ld.sh	r9,r8[0x6]
8000d944:	48 78       	lddpc	r8,8000d960 <udc_req_std_dev_get_descriptor+0x248>
8000d946:	90 68       	ld.sh	r8,r8[0xc]
8000d948:	f0 09 19 00 	cp.h	r9,r8
8000d94c:	c0 52       	brcc	8000d956 <udc_req_std_dev_get_descriptor+0x23e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000d94e:	48 58       	lddpc	r8,8000d960 <udc_req_std_dev_get_descriptor+0x248>
8000d950:	90 38       	ld.sh	r8,r8[0x6]
8000d952:	48 49       	lddpc	r9,8000d960 <udc_req_std_dev_get_descriptor+0x248>
8000d954:	b2 68       	st.h	r9[0xc],r8
	}
	return true;
8000d956:	30 18       	mov	r8,1
}
8000d958:	10 9c       	mov	r12,r8
8000d95a:	2f fd       	sub	sp,-4
8000d95c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d960:	00 00       	add	r0,r0
8000d962:	0f c4       	ld.ub	r4,r7[0x4]
8000d964:	80 00       	ld.sh	r0,r0[0x0]
8000d966:	9c f4       	ld.uh	r4,lr[0xe]
8000d968:	00 00       	add	r0,r0
8000d96a:	02 00       	add	r0,r1
8000d96c:	80 00       	ld.sh	r0,r0[0x0]
8000d96e:	9d 90       	st.w	lr[0x24],r0
8000d970:	80 00       	ld.sh	r0,r0[0x0]
8000d972:	d6 18       	*unknown*

8000d974 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
8000d974:	eb cd 40 80 	pushm	r7,lr
8000d978:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != 1) {
8000d97a:	48 98       	lddpc	r8,8000d99c <udc_req_std_dev_get_configuration+0x28>
8000d97c:	90 39       	ld.sh	r9,r8[0x6]
8000d97e:	30 18       	mov	r8,1
8000d980:	f0 09 19 00 	cp.h	r9,r8
8000d984:	c0 30       	breq	8000d98a <udc_req_std_dev_get_configuration+0x16>
		return false;
8000d986:	30 08       	mov	r8,0
8000d988:	c0 68       	rjmp	8000d994 <udc_req_std_dev_get_configuration+0x20>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
8000d98a:	30 1b       	mov	r11,1
8000d98c:	48 5c       	lddpc	r12,8000d9a0 <udc_req_std_dev_get_configuration+0x2c>
8000d98e:	f0 1f 00 06 	mcall	8000d9a4 <udc_req_std_dev_get_configuration+0x30>
	return true;
8000d992:	30 18       	mov	r8,1
}
8000d994:	10 9c       	mov	r12,r8
8000d996:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d99a:	00 00       	add	r0,r0
8000d99c:	00 00       	add	r0,r0
8000d99e:	0f c4       	ld.ub	r4,r7[0x4]
8000d9a0:	00 00       	add	r0,r0
8000d9a2:	08 0a       	add	r10,r4
8000d9a4:	80 00       	ld.sh	r0,r0[0x0]
8000d9a6:	9d 90       	st.w	lr[0x24],r0

8000d9a8 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
8000d9a8:	eb cd 40 80 	pushm	r7,lr
8000d9ac:	1a 97       	mov	r7,sp
8000d9ae:	20 1d       	sub	sp,4
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
8000d9b0:	4b c8       	lddpc	r8,8000daa0 <udc_req_std_dev_set_configuration+0xf8>
8000d9b2:	90 38       	ld.sh	r8,r8[0x6]
8000d9b4:	58 08       	cp.w	r8,0
8000d9b6:	c0 30       	breq	8000d9bc <udc_req_std_dev_set_configuration+0x14>
		return false;
8000d9b8:	30 08       	mov	r8,0
8000d9ba:	c6 f8       	rjmp	8000da98 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
8000d9bc:	f0 1f 00 3a 	mcall	8000daa4 <udc_req_std_dev_set_configuration+0xfc>
8000d9c0:	18 98       	mov	r8,r12
8000d9c2:	58 08       	cp.w	r8,0
8000d9c4:	c0 31       	brne	8000d9ca <udc_req_std_dev_set_configuration+0x22>
		return false;
8000d9c6:	30 08       	mov	r8,0
8000d9c8:	c6 88       	rjmp	8000da98 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000d9ca:	f0 1f 00 38 	mcall	8000daa8 <udc_req_std_dev_set_configuration+0x100>
8000d9ce:	18 98       	mov	r8,r12
8000d9d0:	58 08       	cp.w	r8,0
8000d9d2:	c0 f0       	breq	8000d9f0 <udc_req_std_dev_set_configuration+0x48>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000d9d4:	4b 38       	lddpc	r8,8000daa0 <udc_req_std_dev_set_configuration+0xf8>
8000d9d6:	90 18       	ld.sh	r8,r8[0x2]
8000d9d8:	5c 78       	castu.h	r8
8000d9da:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_hs->bNumConfigurations) {
8000d9de:	4b 48       	lddpc	r8,8000daac <udc_req_std_dev_set_configuration+0x104>
8000d9e0:	70 28       	ld.w	r8,r8[0x8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000d9e2:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d9e6:	10 39       	cp.w	r9,r8
8000d9e8:	e0 8a 00 12 	brle	8000da0c <udc_req_std_dev_set_configuration+0x64>
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000d9ec:	30 08       	mov	r8,0
8000d9ee:	c5 58       	rjmp	8000da98 <udc_req_std_dev_set_configuration+0xf0>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000d9f0:	4a c8       	lddpc	r8,8000daa0 <udc_req_std_dev_set_configuration+0xf8>
8000d9f2:	90 18       	ld.sh	r8,r8[0x2]
8000d9f4:	5c 78       	castu.h	r8
8000d9f6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_lsfs->bNumConfigurations) {
8000d9fa:	4a d8       	lddpc	r8,8000daac <udc_req_std_dev_set_configuration+0x104>
8000d9fc:	70 08       	ld.w	r8,r8[0x0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000d9fe:	f1 38 00 11 	ld.ub	r8,r8[17]
8000da02:	10 39       	cp.w	r9,r8
8000da04:	e0 8a 00 05 	brle	8000da0e <udc_req_std_dev_set_configuration+0x66>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
8000da08:	30 08       	mov	r8,0
8000da0a:	c4 78       	rjmp	8000da98 <udc_req_std_dev_set_configuration+0xf0>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000da0c:	d7 03       	nop
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
8000da0e:	f0 1f 00 29 	mcall	8000dab0 <udc_req_std_dev_set_configuration+0x108>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
8000da12:	4a 48       	lddpc	r8,8000daa0 <udc_req_std_dev_set_configuration+0xf8>
8000da14:	90 18       	ld.sh	r8,r8[0x2]
8000da16:	5c 58       	castu.b	r8
8000da18:	4a 79       	lddpc	r9,8000dab4 <udc_req_std_dev_set_configuration+0x10c>
8000da1a:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
8000da1c:	4a 68       	lddpc	r8,8000dab4 <udc_req_std_dev_set_configuration+0x10c>
8000da1e:	11 88       	ld.ub	r8,r8[0x0]
8000da20:	58 08       	cp.w	r8,0
8000da22:	c0 31       	brne	8000da28 <udc_req_std_dev_set_configuration+0x80>
		return true; // Default empty configuration requested
8000da24:	30 18       	mov	r8,1
8000da26:	c3 98       	rjmp	8000da98 <udc_req_std_dev_set_configuration+0xf0>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000da28:	f0 1f 00 20 	mcall	8000daa8 <udc_req_std_dev_set_configuration+0x100>
8000da2c:	18 98       	mov	r8,r12
8000da2e:	58 08       	cp.w	r8,0
8000da30:	c0 b0       	breq	8000da46 <udc_req_std_dev_set_configuration+0x9e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
8000da32:	49 f8       	lddpc	r8,8000daac <udc_req_std_dev_set_configuration+0x104>
8000da34:	70 49       	ld.w	r9,r8[0x10]
8000da36:	4a 08       	lddpc	r8,8000dab4 <udc_req_std_dev_set_configuration+0x10c>
8000da38:	11 88       	ld.ub	r8,r8[0x0]
8000da3a:	20 18       	sub	r8,1
8000da3c:	a3 78       	lsl	r8,0x3
8000da3e:	10 09       	add	r9,r8
8000da40:	49 e8       	lddpc	r8,8000dab8 <udc_req_std_dev_set_configuration+0x110>
8000da42:	91 09       	st.w	r8[0x0],r9
8000da44:	c0 a8       	rjmp	8000da58 <udc_req_std_dev_set_configuration+0xb0>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
8000da46:	49 a8       	lddpc	r8,8000daac <udc_req_std_dev_set_configuration+0x104>
8000da48:	70 19       	ld.w	r9,r8[0x4]
8000da4a:	49 b8       	lddpc	r8,8000dab4 <udc_req_std_dev_set_configuration+0x10c>
8000da4c:	11 88       	ld.ub	r8,r8[0x0]
8000da4e:	20 18       	sub	r8,1
8000da50:	a3 78       	lsl	r8,0x3
8000da52:	10 09       	add	r9,r8
8000da54:	49 98       	lddpc	r8,8000dab8 <udc_req_std_dev_set_configuration+0x110>
8000da56:	91 09       	st.w	r8[0x0],r9
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000da58:	30 08       	mov	r8,0
8000da5a:	ef 68 ff ff 	st.b	r7[-1],r8
8000da5e:	c1 38       	rjmp	8000da84 <udc_req_std_dev_set_configuration+0xdc>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
8000da60:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000da64:	30 0b       	mov	r11,0
8000da66:	10 9c       	mov	r12,r8
8000da68:	f0 1f 00 15 	mcall	8000dabc <udc_req_std_dev_set_configuration+0x114>
8000da6c:	18 98       	mov	r8,r12
8000da6e:	ec 18 00 01 	eorl	r8,0x1
8000da72:	5c 58       	castu.b	r8
8000da74:	c0 30       	breq	8000da7a <udc_req_std_dev_set_configuration+0xd2>
			return false;
8000da76:	30 08       	mov	r8,0
8000da78:	c1 08       	rjmp	8000da98 <udc_req_std_dev_set_configuration+0xf0>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000da7a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000da7e:	2f f8       	sub	r8,-1
8000da80:	ef 68 ff ff 	st.b	r7[-1],r8
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000da84:	48 d8       	lddpc	r8,8000dab8 <udc_req_std_dev_set_configuration+0x110>
8000da86:	70 08       	ld.w	r8,r8[0x0]
8000da88:	70 08       	ld.w	r8,r8[0x0]
8000da8a:	11 c8       	ld.ub	r8,r8[0x4]
8000da8c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000da90:	f0 09 18 00 	cp.b	r9,r8
8000da94:	ce 63       	brcs	8000da60 <udc_req_std_dev_set_configuration+0xb8>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
8000da96:	30 18       	mov	r8,1
}
8000da98:	10 9c       	mov	r12,r8
8000da9a:	2f fd       	sub	sp,-4
8000da9c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000daa0:	00 00       	add	r0,r0
8000daa2:	0f c4       	ld.ub	r4,r7[0x4]
8000daa4:	80 00       	ld.sh	r0,r0[0x0]
8000daa6:	9d 5e       	st.w	lr[0x14],lr
8000daa8:	80 00       	ld.sh	r0,r0[0x0]
8000daaa:	9c f4       	ld.uh	r4,lr[0xe]
8000daac:	00 00       	add	r0,r0
8000daae:	02 00       	add	r0,r1
8000dab0:	80 00       	ld.sh	r0,r0[0x0]
8000dab2:	d2 e8       	*unknown*
8000dab4:	00 00       	add	r0,r0
8000dab6:	08 0a       	add	r10,r4
8000dab8:	00 00       	add	r0,r0
8000daba:	08 0c       	add	r12,r4
8000dabc:	80 00       	ld.sh	r0,r0[0x0]
8000dabe:	d2 0c       	*unknown*

8000dac0 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
8000dac0:	eb cd 40 80 	pushm	r7,lr
8000dac4:	1a 97       	mov	r7,sp
8000dac6:	20 2d       	sub	sp,8
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
8000dac8:	4a 38       	lddpc	r8,8000db54 <udc_req_std_iface_get_setting+0x94>
8000daca:	90 39       	ld.sh	r9,r8[0x6]
8000dacc:	30 18       	mov	r8,1
8000dace:	f0 09 19 00 	cp.h	r9,r8
8000dad2:	c0 30       	breq	8000dad8 <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
8000dad4:	30 08       	mov	r8,0
8000dad6:	c3 a8       	rjmp	8000db4a <udc_req_std_iface_get_setting+0x8a>
	}
	if (!udc_num_configuration) {
8000dad8:	4a 08       	lddpc	r8,8000db58 <udc_req_std_iface_get_setting+0x98>
8000dada:	11 88       	ld.ub	r8,r8[0x0]
8000dadc:	58 08       	cp.w	r8,0
8000dade:	c0 31       	brne	8000dae4 <udc_req_std_iface_get_setting+0x24>
		return false; // The device is not is configured state yet
8000dae0:	30 08       	mov	r8,0
8000dae2:	c3 48       	rjmp	8000db4a <udc_req_std_iface_get_setting+0x8a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000dae4:	49 c8       	lddpc	r8,8000db54 <udc_req_std_iface_get_setting+0x94>
8000dae6:	90 28       	ld.sh	r8,r8[0x4]
8000dae8:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000daec:	49 c8       	lddpc	r8,8000db5c <udc_req_std_iface_get_setting+0x9c>
8000daee:	70 08       	ld.w	r8,r8[0x0]
8000daf0:	70 08       	ld.w	r8,r8[0x0]
8000daf2:	11 c8       	ld.ub	r8,r8[0x4]
8000daf4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000daf8:	f0 09 18 00 	cp.b	r9,r8
8000dafc:	c0 33       	brcs	8000db02 <udc_req_std_iface_get_setting+0x42>
		return false;
8000dafe:	30 08       	mov	r8,0
8000db00:	c2 58       	rjmp	8000db4a <udc_req_std_iface_get_setting+0x8a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000db02:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000db06:	30 0b       	mov	r11,0
8000db08:	10 9c       	mov	r12,r8
8000db0a:	f0 1f 00 16 	mcall	8000db60 <udc_req_std_iface_get_setting+0xa0>
8000db0e:	18 98       	mov	r8,r12
8000db10:	ec 18 00 01 	eorl	r8,0x1
8000db14:	5c 58       	castu.b	r8
8000db16:	c0 30       	breq	8000db1c <udc_req_std_iface_get_setting+0x5c>
		return false;
8000db18:	30 08       	mov	r8,0
8000db1a:	c1 88       	rjmp	8000db4a <udc_req_std_iface_get_setting+0x8a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000db1c:	49 08       	lddpc	r8,8000db5c <udc_req_std_iface_get_setting+0x9c>
8000db1e:	70 08       	ld.w	r8,r8[0x0]
8000db20:	70 19       	ld.w	r9,r8[0x4]
8000db22:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000db26:	a3 68       	lsl	r8,0x2
8000db28:	f2 08 00 08 	add	r8,r9,r8
8000db2c:	70 08       	ld.w	r8,r8[0x0]
8000db2e:	ef 48 ff fc 	st.w	r7[-4],r8
	udc_iface_setting = udi_api->getsetting();
8000db32:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000db36:	70 38       	ld.w	r8,r8[0xc]
8000db38:	5d 18       	icall	r8
8000db3a:	18 98       	mov	r8,r12
8000db3c:	48 a9       	lddpc	r9,8000db64 <udc_req_std_iface_get_setting+0xa4>
8000db3e:	b2 88       	st.b	r9[0x0],r8

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
8000db40:	30 1b       	mov	r11,1
8000db42:	48 9c       	lddpc	r12,8000db64 <udc_req_std_iface_get_setting+0xa4>
8000db44:	f0 1f 00 09 	mcall	8000db68 <udc_req_std_iface_get_setting+0xa8>
	return true;
8000db48:	30 18       	mov	r8,1
}
8000db4a:	10 9c       	mov	r12,r8
8000db4c:	2f ed       	sub	sp,-8
8000db4e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000db52:	00 00       	add	r0,r0
8000db54:	00 00       	add	r0,r0
8000db56:	0f c4       	ld.ub	r4,r7[0x4]
8000db58:	00 00       	add	r0,r0
8000db5a:	08 0a       	add	r10,r4
8000db5c:	00 00       	add	r0,r0
8000db5e:	08 0c       	add	r12,r4
8000db60:	80 00       	ld.sh	r0,r0[0x0]
8000db62:	d0 98       	*unknown*
8000db64:	00 00       	add	r0,r0
8000db66:	08 14       	sub	r4,r4
8000db68:	80 00       	ld.sh	r0,r0[0x0]
8000db6a:	9d 90       	st.w	lr[0x24],r0

8000db6c <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
8000db6c:	eb cd 40 80 	pushm	r7,lr
8000db70:	1a 97       	mov	r7,sp
8000db72:	20 1d       	sub	sp,4
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
8000db74:	49 78       	lddpc	r8,8000dbd0 <udc_req_std_iface_set_setting+0x64>
8000db76:	90 38       	ld.sh	r8,r8[0x6]
8000db78:	58 08       	cp.w	r8,0
8000db7a:	c0 30       	breq	8000db80 <udc_req_std_iface_set_setting+0x14>
		return false; // Error in request
8000db7c:	30 08       	mov	r8,0
8000db7e:	c2 48       	rjmp	8000dbc6 <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
8000db80:	49 58       	lddpc	r8,8000dbd4 <udc_req_std_iface_set_setting+0x68>
8000db82:	11 88       	ld.ub	r8,r8[0x0]
8000db84:	58 08       	cp.w	r8,0
8000db86:	c0 31       	brne	8000db8c <udc_req_std_iface_set_setting+0x20>
		return false; // The device is not is configured state yet
8000db88:	30 08       	mov	r8,0
8000db8a:	c1 e8       	rjmp	8000dbc6 <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000db8c:	49 18       	lddpc	r8,8000dbd0 <udc_req_std_iface_set_setting+0x64>
8000db8e:	90 28       	ld.sh	r8,r8[0x4]
8000db90:	ef 68 ff fe 	st.b	r7[-2],r8
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
8000db94:	48 f8       	lddpc	r8,8000dbd0 <udc_req_std_iface_set_setting+0x64>
8000db96:	90 18       	ld.sh	r8,r8[0x2]
8000db98:	ef 68 ff ff 	st.b	r7[-1],r8

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
8000db9c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000dba0:	10 9c       	mov	r12,r8
8000dba2:	f0 1f 00 0e 	mcall	8000dbd8 <udc_req_std_iface_set_setting+0x6c>
8000dba6:	18 98       	mov	r8,r12
8000dba8:	ec 18 00 01 	eorl	r8,0x1
8000dbac:	5c 58       	castu.b	r8
8000dbae:	c0 30       	breq	8000dbb4 <udc_req_std_iface_set_setting+0x48>
		return false;
8000dbb0:	30 08       	mov	r8,0
8000dbb2:	c0 a8       	rjmp	8000dbc6 <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
8000dbb4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dbb8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000dbbc:	12 9b       	mov	r11,r9
8000dbbe:	10 9c       	mov	r12,r8
8000dbc0:	f0 1f 00 07 	mcall	8000dbdc <udc_req_std_iface_set_setting+0x70>
8000dbc4:	18 98       	mov	r8,r12
}
8000dbc6:	10 9c       	mov	r12,r8
8000dbc8:	2f fd       	sub	sp,-4
8000dbca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dbce:	00 00       	add	r0,r0
8000dbd0:	00 00       	add	r0,r0
8000dbd2:	0f c4       	ld.ub	r4,r7[0x4]
8000dbd4:	00 00       	add	r0,r0
8000dbd6:	08 0a       	add	r10,r4
8000dbd8:	80 00       	ld.sh	r0,r0[0x0]
8000dbda:	d1 50       	acall	0x54
8000dbdc:	80 00       	ld.sh	r0,r0[0x0]
8000dbde:	d2 0c       	*unknown*

8000dbe0 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
8000dbe0:	eb cd 40 80 	pushm	r7,lr
8000dbe4:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000dbe6:	4c 78       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dbe8:	11 88       	ld.ub	r8,r8[0x0]
8000dbea:	10 99       	mov	r9,r8
8000dbec:	30 08       	mov	r8,0
8000dbee:	f0 09 18 00 	cp.b	r9,r8
8000dbf2:	c3 c4       	brge	8000dc6a <udc_reqstd+0x8a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
8000dbf4:	4c 38       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dbf6:	90 38       	ld.sh	r8,r8[0x6]
8000dbf8:	58 08       	cp.w	r8,0
8000dbfa:	c0 31       	brne	8000dc00 <udc_reqstd+0x20>
			return false; // Error for USB host
8000dbfc:	30 08       	mov	r8,0
8000dbfe:	c7 e8       	rjmp	8000dcfa <udc_reqstd+0x11a>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000dc00:	4c 08       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dc02:	11 88       	ld.ub	r8,r8[0x0]
8000dc04:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc08:	c1 51       	brne	8000dc32 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dc0a:	4b e8       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dc0c:	11 98       	ld.ub	r8,r8[0x1]
8000dc0e:	58 68       	cp.w	r8,6
8000dc10:	c0 90       	breq	8000dc22 <udc_reqstd+0x42>
8000dc12:	58 88       	cp.w	r8,8
8000dc14:	c0 b0       	breq	8000dc2a <udc_reqstd+0x4a>
8000dc16:	58 08       	cp.w	r8,0
8000dc18:	c0 d1       	brne	8000dc32 <udc_reqstd+0x52>
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
8000dc1a:	f0 1f 00 3b 	mcall	8000dd04 <udc_reqstd+0x124>
8000dc1e:	18 98       	mov	r8,r12
8000dc20:	c6 d8       	rjmp	8000dcfa <udc_reqstd+0x11a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
8000dc22:	f0 1f 00 3a 	mcall	8000dd08 <udc_reqstd+0x128>
8000dc26:	18 98       	mov	r8,r12
8000dc28:	c6 98       	rjmp	8000dcfa <udc_reqstd+0x11a>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
8000dc2a:	f0 1f 00 39 	mcall	8000dd0c <udc_reqstd+0x12c>
8000dc2e:	18 98       	mov	r8,r12
8000dc30:	c6 58       	rjmp	8000dcfa <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000dc32:	4b 48       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dc34:	11 88       	ld.ub	r8,r8[0x0]
8000dc36:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc3a:	58 18       	cp.w	r8,1
8000dc3c:	c0 91       	brne	8000dc4e <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dc3e:	4b 18       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dc40:	11 98       	ld.ub	r8,r8[0x1]
8000dc42:	58 a8       	cp.w	r8,10
8000dc44:	c0 51       	brne	8000dc4e <udc_reqstd+0x6e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
8000dc46:	f0 1f 00 33 	mcall	8000dd10 <udc_reqstd+0x130>
8000dc4a:	18 98       	mov	r8,r12
8000dc4c:	c5 78       	rjmp	8000dcfa <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000dc4e:	4a d8       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dc50:	11 88       	ld.ub	r8,r8[0x0]
8000dc52:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc56:	58 28       	cp.w	r8,2
8000dc58:	c4 f1       	brne	8000dcf6 <udc_reqstd+0x116>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dc5a:	4a a8       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dc5c:	11 98       	ld.ub	r8,r8[0x1]
8000dc5e:	58 08       	cp.w	r8,0
8000dc60:	c4 c1       	brne	8000dcf8 <udc_reqstd+0x118>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000dc62:	f0 1f 00 2d 	mcall	8000dd14 <udc_reqstd+0x134>
8000dc66:	18 98       	mov	r8,r12
8000dc68:	c4 98       	rjmp	8000dcfa <udc_reqstd+0x11a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000dc6a:	4a 68       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dc6c:	11 88       	ld.ub	r8,r8[0x0]
8000dc6e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc72:	c1 f1       	brne	8000dcb0 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dc74:	4a 38       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dc76:	11 98       	ld.ub	r8,r8[0x1]
8000dc78:	58 38       	cp.w	r8,3
8000dc7a:	c1 30       	breq	8000dca0 <udc_reqstd+0xc0>
8000dc7c:	e0 89 00 05 	brgt	8000dc86 <udc_reqstd+0xa6>
8000dc80:	58 18       	cp.w	r8,1
8000dc82:	c0 b0       	breq	8000dc98 <udc_reqstd+0xb8>
8000dc84:	c1 68       	rjmp	8000dcb0 <udc_reqstd+0xd0>
8000dc86:	58 58       	cp.w	r8,5
8000dc88:	c0 40       	breq	8000dc90 <udc_reqstd+0xb0>
8000dc8a:	58 98       	cp.w	r8,9
8000dc8c:	c0 e0       	breq	8000dca8 <udc_reqstd+0xc8>
8000dc8e:	c1 18       	rjmp	8000dcb0 <udc_reqstd+0xd0>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
8000dc90:	f0 1f 00 22 	mcall	8000dd18 <udc_reqstd+0x138>
8000dc94:	18 98       	mov	r8,r12
8000dc96:	c3 28       	rjmp	8000dcfa <udc_reqstd+0x11a>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
8000dc98:	f0 1f 00 21 	mcall	8000dd1c <udc_reqstd+0x13c>
8000dc9c:	18 98       	mov	r8,r12
8000dc9e:	c2 e8       	rjmp	8000dcfa <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
8000dca0:	f0 1f 00 20 	mcall	8000dd20 <udc_reqstd+0x140>
8000dca4:	18 98       	mov	r8,r12
8000dca6:	c2 a8       	rjmp	8000dcfa <udc_reqstd+0x11a>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
8000dca8:	f0 1f 00 1f 	mcall	8000dd24 <udc_reqstd+0x144>
8000dcac:	18 98       	mov	r8,r12
8000dcae:	c2 68       	rjmp	8000dcfa <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000dcb0:	49 48       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dcb2:	11 88       	ld.ub	r8,r8[0x0]
8000dcb4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dcb8:	58 18       	cp.w	r8,1
8000dcba:	c0 91       	brne	8000dccc <udc_reqstd+0xec>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dcbc:	49 18       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dcbe:	11 98       	ld.ub	r8,r8[0x1]
8000dcc0:	58 b8       	cp.w	r8,11
8000dcc2:	c0 51       	brne	8000dccc <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
8000dcc4:	f0 1f 00 19 	mcall	8000dd28 <udc_reqstd+0x148>
8000dcc8:	18 98       	mov	r8,r12
8000dcca:	c1 88       	rjmp	8000dcfa <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000dccc:	48 d8       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dcce:	11 88       	ld.ub	r8,r8[0x0]
8000dcd0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dcd4:	58 28       	cp.w	r8,2
8000dcd6:	c1 11       	brne	8000dcf8 <udc_reqstd+0x118>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dcd8:	48 a8       	lddpc	r8,8000dd00 <udc_reqstd+0x120>
8000dcda:	11 98       	ld.ub	r8,r8[0x1]
8000dcdc:	58 18       	cp.w	r8,1
8000dcde:	c0 40       	breq	8000dce6 <udc_reqstd+0x106>
8000dce0:	58 38       	cp.w	r8,3
8000dce2:	c0 60       	breq	8000dcee <udc_reqstd+0x10e>
8000dce4:	c0 a8       	rjmp	8000dcf8 <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
8000dce6:	f0 1f 00 12 	mcall	8000dd2c <udc_reqstd+0x14c>
8000dcea:	18 98       	mov	r8,r12
8000dcec:	c0 78       	rjmp	8000dcfa <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
8000dcee:	f0 1f 00 11 	mcall	8000dd30 <udc_reqstd+0x150>
8000dcf2:	18 98       	mov	r8,r12
8000dcf4:	c0 38       	rjmp	8000dcfa <udc_reqstd+0x11a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000dcf6:	d7 03       	nop
				break;
			}
		}
#endif
	}
	return false;
8000dcf8:	30 08       	mov	r8,0
}
8000dcfa:	10 9c       	mov	r12,r8
8000dcfc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dd00:	00 00       	add	r0,r0
8000dd02:	0f c4       	ld.ub	r4,r7[0x4]
8000dd04:	80 00       	ld.sh	r0,r0[0x0]
8000dd06:	d3 bc       	*unknown*
8000dd08:	80 00       	ld.sh	r0,r0[0x0]
8000dd0a:	d7 18       	*unknown*
8000dd0c:	80 00       	ld.sh	r0,r0[0x0]
8000dd0e:	d9 74       	*unknown*
8000dd10:	80 00       	ld.sh	r0,r0[0x0]
8000dd12:	da c0       	acall	0x2b0
8000dd14:	80 00       	ld.sh	r0,r0[0x0]
8000dd16:	d3 f0       	acall	0xfc
8000dd18:	80 00       	ld.sh	r0,r0[0x0]
8000dd1a:	d5 f0       	acall	0x17c
8000dd1c:	80 00       	ld.sh	r0,r0[0x0]
8000dd1e:	d4 48       	*unknown*
8000dd20:	80 00       	ld.sh	r0,r0[0x0]
8000dd22:	d4 c4       	*unknown*
8000dd24:	80 00       	ld.sh	r0,r0[0x0]
8000dd26:	d9 a8       	*unknown*
8000dd28:	80 00       	ld.sh	r0,r0[0x0]
8000dd2a:	db 6c       	*unknown*
8000dd2c:	80 00       	ld.sh	r0,r0[0x0]
8000dd2e:	d4 88       	*unknown*
8000dd30:	80 00       	ld.sh	r0,r0[0x0]
8000dd32:	d5 80       	acall	0x160

8000dd34 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
8000dd34:	eb cd 40 80 	pushm	r7,lr
8000dd38:	1a 97       	mov	r7,sp
8000dd3a:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000dd3c:	4a 58       	lddpc	r8,8000ddd0 <udc_req_iface+0x9c>
8000dd3e:	11 88       	ld.ub	r8,r8[0x0]
8000dd40:	58 08       	cp.w	r8,0
8000dd42:	c0 31       	brne	8000dd48 <udc_req_iface+0x14>
		return false; // The device is not is configured state yet
8000dd44:	30 08       	mov	r8,0
8000dd46:	c4 08       	rjmp	8000ddc6 <udc_req_iface+0x92>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000dd48:	4a 38       	lddpc	r8,8000ddd4 <udc_req_iface+0xa0>
8000dd4a:	90 28       	ld.sh	r8,r8[0x4]
8000dd4c:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000dd50:	4a 28       	lddpc	r8,8000ddd8 <udc_req_iface+0xa4>
8000dd52:	70 08       	ld.w	r8,r8[0x0]
8000dd54:	70 08       	ld.w	r8,r8[0x0]
8000dd56:	11 c8       	ld.ub	r8,r8[0x4]
8000dd58:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000dd5c:	f0 09 18 00 	cp.b	r9,r8
8000dd60:	c0 33       	brcs	8000dd66 <udc_req_iface+0x32>
		return false;
8000dd62:	30 08       	mov	r8,0
8000dd64:	c3 18       	rjmp	8000ddc6 <udc_req_iface+0x92>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000dd66:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dd6a:	30 0b       	mov	r11,0
8000dd6c:	10 9c       	mov	r12,r8
8000dd6e:	f0 1f 00 1c 	mcall	8000dddc <udc_req_iface+0xa8>
8000dd72:	18 98       	mov	r8,r12
8000dd74:	ec 18 00 01 	eorl	r8,0x1
8000dd78:	5c 58       	castu.b	r8
8000dd7a:	c0 30       	breq	8000dd80 <udc_req_iface+0x4c>
		return false;
8000dd7c:	30 08       	mov	r8,0
8000dd7e:	c2 48       	rjmp	8000ddc6 <udc_req_iface+0x92>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000dd80:	49 68       	lddpc	r8,8000ddd8 <udc_req_iface+0xa4>
8000dd82:	70 08       	ld.w	r8,r8[0x0]
8000dd84:	70 19       	ld.w	r9,r8[0x4]
8000dd86:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dd8a:	a3 68       	lsl	r8,0x2
8000dd8c:	f2 08 00 08 	add	r8,r9,r8
8000dd90:	70 08       	ld.w	r8,r8[0x0]
8000dd92:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000dd96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dd9a:	70 38       	ld.w	r8,r8[0xc]
8000dd9c:	5d 18       	icall	r8
8000dd9e:	18 98       	mov	r8,r12
8000dda0:	10 99       	mov	r9,r8
8000dda2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dda6:	12 9b       	mov	r11,r9
8000dda8:	10 9c       	mov	r12,r8
8000ddaa:	f0 1f 00 0d 	mcall	8000dddc <udc_req_iface+0xa8>
8000ddae:	18 98       	mov	r8,r12
8000ddb0:	ec 18 00 01 	eorl	r8,0x1
8000ddb4:	5c 58       	castu.b	r8
8000ddb6:	c0 30       	breq	8000ddbc <udc_req_iface+0x88>
		return false;
8000ddb8:	30 08       	mov	r8,0
8000ddba:	c0 68       	rjmp	8000ddc6 <udc_req_iface+0x92>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
8000ddbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ddc0:	70 28       	ld.w	r8,r8[0x8]
8000ddc2:	5d 18       	icall	r8
8000ddc4:	18 98       	mov	r8,r12
}
8000ddc6:	10 9c       	mov	r12,r8
8000ddc8:	2f ed       	sub	sp,-8
8000ddca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ddce:	00 00       	add	r0,r0
8000ddd0:	00 00       	add	r0,r0
8000ddd2:	08 0a       	add	r10,r4
8000ddd4:	00 00       	add	r0,r0
8000ddd6:	0f c4       	ld.ub	r4,r7[0x4]
8000ddd8:	00 00       	add	r0,r0
8000ddda:	08 0c       	add	r12,r4
8000dddc:	80 00       	ld.sh	r0,r0[0x0]
8000ddde:	d0 98       	*unknown*

8000dde0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
8000dde0:	eb cd 40 80 	pushm	r7,lr
8000dde4:	1a 97       	mov	r7,sp
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
8000dde6:	49 a9       	lddpc	r9,8000de4c <udc_process_setup+0x6c>
8000dde8:	30 08       	mov	r8,0
8000ddea:	b2 68       	st.h	r9[0xc],r8
	udd_g_ctrlreq.callback = NULL;
8000ddec:	49 88       	lddpc	r8,8000de4c <udc_process_setup+0x6c>
8000ddee:	30 09       	mov	r9,0
8000ddf0:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000ddf2:	49 78       	lddpc	r8,8000de4c <udc_process_setup+0x6c>
8000ddf4:	30 09       	mov	r9,0
8000ddf6:	91 59       	st.w	r8[0x14],r9

	if (Udd_setup_is_in()) {
8000ddf8:	49 58       	lddpc	r8,8000de4c <udc_process_setup+0x6c>
8000ddfa:	11 88       	ld.ub	r8,r8[0x0]
8000ddfc:	10 99       	mov	r9,r8
8000ddfe:	30 08       	mov	r8,0
8000de00:	f0 09 18 00 	cp.b	r9,r8
8000de04:	c0 74       	brge	8000de12 <udc_process_setup+0x32>
		if (udd_g_ctrlreq.req.wLength == 0) {
8000de06:	49 28       	lddpc	r8,8000de4c <udc_process_setup+0x6c>
8000de08:	90 38       	ld.sh	r8,r8[0x6]
8000de0a:	58 08       	cp.w	r8,0
8000de0c:	c0 31       	brne	8000de12 <udc_process_setup+0x32>
			return false; // Error from USB host
8000de0e:	30 08       	mov	r8,0
8000de10:	c1 b8       	rjmp	8000de46 <udc_process_setup+0x66>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
8000de12:	48 f8       	lddpc	r8,8000de4c <udc_process_setup+0x6c>
8000de14:	11 88       	ld.ub	r8,r8[0x0]
8000de16:	e2 18 00 60 	andl	r8,0x60,COH
8000de1a:	c0 81       	brne	8000de2a <udc_process_setup+0x4a>
		if (udc_reqstd()) {
8000de1c:	f0 1f 00 0d 	mcall	8000de50 <udc_process_setup+0x70>
8000de20:	18 98       	mov	r8,r12
8000de22:	58 08       	cp.w	r8,0
8000de24:	c0 30       	breq	8000de2a <udc_process_setup+0x4a>
			return true;
8000de26:	30 18       	mov	r8,1
8000de28:	c0 f8       	rjmp	8000de46 <udc_process_setup+0x66>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
8000de2a:	48 98       	lddpc	r8,8000de4c <udc_process_setup+0x6c>
8000de2c:	11 88       	ld.ub	r8,r8[0x0]
8000de2e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de32:	58 18       	cp.w	r8,1
8000de34:	c0 81       	brne	8000de44 <udc_process_setup+0x64>
		if (udc_req_iface()) {
8000de36:	f0 1f 00 08 	mcall	8000de54 <udc_process_setup+0x74>
8000de3a:	18 98       	mov	r8,r12
8000de3c:	58 08       	cp.w	r8,0
8000de3e:	c0 30       	breq	8000de44 <udc_process_setup+0x64>
			return true;
8000de40:	30 18       	mov	r8,1
8000de42:	c0 28       	rjmp	8000de46 <udc_process_setup+0x66>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
8000de44:	30 08       	mov	r8,0
#endif
}
8000de46:	10 9c       	mov	r12,r8
8000de48:	e3 cd 80 80 	ldm	sp++,r7,pc
8000de4c:	00 00       	add	r0,r0
8000de4e:	0f c4       	ld.ub	r4,r7[0x4]
8000de50:	80 00       	ld.sh	r0,r0[0x0]
8000de52:	db e0       	acall	0x2f8
8000de54:	80 00       	ld.sh	r0,r0[0x0]
8000de56:	dd 34       	*unknown*

8000de58 <pm_sleep>:
#else
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
8000de58:	eb cd 40 80 	pushm	r7,lr
8000de5c:	1a 97       	mov	r7,sp
8000de5e:	20 1d       	sub	sp,4
8000de60:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (sleep_mode) {
8000de64:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de68:	58 58       	cp.w	r8,5
8000de6a:	c4 30       	breq	8000def0 <pm_sleep+0x98>
8000de6c:	e0 89 00 10 	brgt	8000de8c <pm_sleep+0x34>
8000de70:	58 28       	cp.w	r8,2
8000de72:	c2 d0       	breq	8000decc <pm_sleep+0x74>
8000de74:	e0 89 00 07 	brgt	8000de82 <pm_sleep+0x2a>
8000de78:	58 08       	cp.w	r8,0
8000de7a:	c1 d0       	breq	8000deb4 <pm_sleep+0x5c>
8000de7c:	58 18       	cp.w	r8,1
8000de7e:	c2 10       	breq	8000dec0 <pm_sleep+0x68>
8000de80:	c3 d8       	rjmp	8000defa <pm_sleep+0xa2>
8000de82:	58 38       	cp.w	r8,3
8000de84:	c2 a0       	breq	8000ded8 <pm_sleep+0x80>
8000de86:	58 48       	cp.w	r8,4
8000de88:	c2 e0       	breq	8000dee4 <pm_sleep+0x8c>
8000de8a:	c3 88       	rjmp	8000defa <pm_sleep+0xa2>
8000de8c:	e0 48 00 82 	cp.w	r8,130
8000de90:	c2 10       	breq	8000ded2 <pm_sleep+0x7a>
8000de92:	e0 89 00 09 	brgt	8000dea4 <pm_sleep+0x4c>
8000de96:	e0 48 00 80 	cp.w	r8,128
8000de9a:	c1 00       	breq	8000deba <pm_sleep+0x62>
8000de9c:	e0 48 00 81 	cp.w	r8,129
8000dea0:	c1 30       	breq	8000dec6 <pm_sleep+0x6e>
8000dea2:	c2 c8       	rjmp	8000defa <pm_sleep+0xa2>
8000dea4:	e0 48 00 84 	cp.w	r8,132
8000dea8:	c2 10       	breq	8000deea <pm_sleep+0x92>
8000deaa:	c1 a5       	brlt	8000dede <pm_sleep+0x86>
8000deac:	e0 48 00 85 	cp.w	r8,133
8000deb0:	c2 30       	breq	8000def6 <pm_sleep+0x9e>
8000deb2:	c2 48       	rjmp	8000defa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
8000deb4:	e9 b0 00 00 	sleep	0x0
		break;
8000deb8:	c2 18       	rjmp	8000defa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
8000deba:	e9 b0 00 80 	sleep	0x80
		break;
8000debe:	c1 e8       	rjmp	8000defa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
8000dec0:	e9 b0 00 01 	sleep	0x1
		break;
8000dec4:	c1 b8       	rjmp	8000defa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
8000dec6:	e9 b0 00 81 	sleep	0x81
		break;
8000deca:	c1 88       	rjmp	8000defa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
8000decc:	e9 b0 00 02 	sleep	0x2
		break;
8000ded0:	c1 58       	rjmp	8000defa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
8000ded2:	e9 b0 00 82 	sleep	0x82
		break;
8000ded6:	c1 28       	rjmp	8000defa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
8000ded8:	e9 b0 00 03 	sleep	0x3
		break;
8000dedc:	c0 f8       	rjmp	8000defa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
8000dede:	e9 b0 00 83 	sleep	0x83
		break;
8000dee2:	c0 c8       	rjmp	8000defa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
8000dee4:	e9 b0 00 04 	sleep	0x4
		break;
8000dee8:	c0 98       	rjmp	8000defa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000deea:	e9 b0 00 84 	sleep	0x84
		break;
8000deee:	c0 68       	rjmp	8000defa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
8000def0:	e9 b0 00 05 	sleep	0x5
		break;
8000def4:	c0 38       	rjmp	8000defa <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
8000def6:	e9 b0 00 85 	sleep	0x85
		break;
#endif
	default:
		break;
	}
}
8000defa:	2f fd       	sub	sp,-4
8000defc:	e3 cd 80 80 	ldm	sp++,r7,pc

8000df00 <sleepmgr_sleep>:
//! @}



static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
8000df00:	eb cd 40 80 	pushm	r7,lr
8000df04:	1a 97       	mov	r7,sp
8000df06:	20 1d       	sub	sp,4
8000df08:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
8000df0c:	d3 03       	ssrf	0x10

	// Atomically enable the global interrupts and enter the sleep mode.
	pm_sleep(AVR32_PM_SMODE_GMCLEAR_MASK | (sleep_mode-1));
8000df0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df12:	20 18       	sub	r8,1
8000df14:	a7 b8       	sbr	r8,0x7
8000df16:	10 9c       	mov	r12,r8
8000df18:	f0 1f 00 03 	mcall	8000df24 <sleepmgr_sleep+0x24>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
8000df1c:	2f fd       	sub	sp,-4
8000df1e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df22:	00 00       	add	r0,r0
8000df24:	80 00       	ld.sh	r0,r0[0x0]
8000df26:	de 58       	*unknown*

8000df28 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8000df28:	eb cd 40 80 	pushm	r7,lr
8000df2c:	1a 97       	mov	r7,sp
8000df2e:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000df30:	30 08       	mov	r8,0
8000df32:	ef 68 ff ff 	st.b	r7[-1],r8
8000df36:	c0 c8       	rjmp	8000df4e <sleepmgr_init+0x26>
		sleepmgr_locks[i] = 0;
8000df38:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000df3c:	48 ba       	lddpc	r10,8000df68 <sleepmgr_init+0x40>
8000df3e:	30 08       	mov	r8,0
8000df40:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000df44:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000df48:	2f f8       	sub	r8,-1
8000df4a:	ef 68 ff ff 	st.b	r7[-1],r8
8000df4e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000df52:	30 58       	mov	r8,5
8000df54:	f0 09 18 00 	cp.b	r9,r8
8000df58:	fe 98 ff f0 	brls	8000df38 <sleepmgr_init+0x10>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8000df5c:	48 39       	lddpc	r9,8000df68 <sleepmgr_init+0x40>
8000df5e:	30 18       	mov	r8,1
8000df60:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000df62:	2f fd       	sub	sp,-4
8000df64:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df68:	00 00       	add	r0,r0
8000df6a:	0f dc       	ld.ub	r12,r7[0x5]

8000df6c <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
8000df6c:	eb cd 40 80 	pushm	r7,lr
8000df70:	1a 97       	mov	r7,sp
8000df72:	20 2d       	sub	sp,8
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
8000df74:	30 08       	mov	r8,0
8000df76:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
8000df7a:	48 d8       	lddpc	r8,8000dfac <sleepmgr_get_sleep_mode+0x40>
8000df7c:	ef 48 ff fc 	st.w	r7[-4],r8

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000df80:	c0 b8       	rjmp	8000df96 <sleepmgr_get_sleep_mode+0x2a>
		lock_ptr++;
8000df82:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df86:	2f f8       	sub	r8,-1
8000df88:	ef 48 ff fc 	st.w	r7[-4],r8
		sleep_mode++;
8000df8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000df90:	2f f8       	sub	r8,-1
8000df92:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000df96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df9a:	11 88       	ld.ub	r8,r8[0x0]
8000df9c:	58 08       	cp.w	r8,0
8000df9e:	cf 20       	breq	8000df82 <sleepmgr_get_sleep_mode+0x16>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
8000dfa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000dfa4:	10 9c       	mov	r12,r8
8000dfa6:	2f ed       	sub	sp,-8
8000dfa8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dfac:	00 00       	add	r0,r0
8000dfae:	0f dc       	ld.ub	r12,r7[0x5]

8000dfb0 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
8000dfb0:	eb cd 40 80 	pushm	r7,lr
8000dfb4:	1a 97       	mov	r7,sp
8000dfb6:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
8000dfb8:	d3 03       	ssrf	0x10

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
8000dfba:	f0 1f 00 0a 	mcall	8000dfe0 <sleepmgr_enter_sleep+0x30>
8000dfbe:	18 98       	mov	r8,r12
8000dfc0:	ef 48 ff fc 	st.w	r7[-4],r8
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
8000dfc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dfc8:	58 08       	cp.w	r8,0
8000dfca:	c0 31       	brne	8000dfd0 <sleepmgr_enter_sleep+0x20>
		cpu_irq_enable();
8000dfcc:	d5 03       	csrf	0x10
		return;
8000dfce:	c0 58       	rjmp	8000dfd8 <sleepmgr_enter_sleep+0x28>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
8000dfd0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000dfd4:	f0 1f 00 04 	mcall	8000dfe4 <sleepmgr_enter_sleep+0x34>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000dfd8:	2f fd       	sub	sp,-4
8000dfda:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dfde:	00 00       	add	r0,r0
8000dfe0:	80 00       	ld.sh	r0,r0[0x0]
8000dfe2:	df 6c       	*unknown*
8000dfe4:	80 00       	ld.sh	r0,r0[0x0]
8000dfe6:	df 00       	acall	0x3c0

8000dfe8 <udc_include_vbus_monitoring>:
 *        // Start USB \n
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
8000dfe8:	eb cd 40 80 	pushm	r7,lr
8000dfec:	1a 97       	mov	r7,sp
	return udd_include_vbus_monitoring();
8000dfee:	f0 1f 00 04 	mcall	8000dffc <udc_include_vbus_monitoring+0x14>
8000dff2:	18 98       	mov	r8,r12
}
8000dff4:	10 9c       	mov	r12,r8
8000dff6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dffa:	00 00       	add	r0,r0
8000dffc:	80 00       	ld.sh	r0,r0[0x0]
8000dffe:	9a d8       	ld.uh	r8,sp[0xa]

8000e000 <udc_attach>:
 * \warning If a VBus control is included in driver,
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
8000e000:	eb cd 40 80 	pushm	r7,lr
8000e004:	1a 97       	mov	r7,sp
	udd_attach();
8000e006:	f0 1f 00 03 	mcall	8000e010 <udc_attach+0x10>
}
8000e00a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e00e:	00 00       	add	r0,r0
8000e010:	80 00       	ld.sh	r0,r0[0x0]
8000e012:	9c 08       	ld.sh	r8,lr[0x0]

8000e014 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
8000e014:	eb cd 40 80 	pushm	r7,lr
8000e018:	1a 97       	mov	r7,sp
	udd_detach();
8000e01a:	f0 1f 00 03 	mcall	8000e024 <udc_detach+0x10>
}
8000e01e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e022:	00 00       	add	r0,r0
8000e024:	80 00       	ld.sh	r0,r0[0x0]
8000e026:	9c b4       	ld.uh	r4,lr[0x6]

8000e028 <main>:
static bool main_b_msc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
8000e028:	eb cd 40 80 	pushm	r7,lr
8000e02c:	1a 97       	mov	r7,sp
8000e02e:	20 1d       	sub	sp,4
	uint8_t i = 0;
8000e030:	30 08       	mov	r8,0
8000e032:	ef 68 ff ff 	st.b	r7[-1],r8
	irq_initialize_vectors();
8000e036:	f0 1f 00 33 	mcall	8000e100 <main+0xd8>
	cpu_irq_enable();
8000e03a:	d5 03       	csrf	0x10

	// Initialize the sleep manager
	sleepmgr_init();
8000e03c:	f0 1f 00 32 	mcall	8000e104 <main+0xdc>

	sysclk_init();
8000e040:	f0 1f 00 32 	mcall	8000e108 <main+0xe0>
	board_init();
8000e044:	f0 1f 00 32 	mcall	8000e10c <main+0xe4>

	ui_init();
8000e048:	f0 1f 00 32 	mcall	8000e110 <main+0xe8>
	ui_powerdown();
8000e04c:	f0 1f 00 32 	mcall	8000e114 <main+0xec>

	memories_initialization();
8000e050:	f0 1f 00 32 	mcall	8000e118 <main+0xf0>

	// Initialize LCD
	et024006_Init( FOSC0, FOSC0 );
8000e054:	e0 6b 1b 00 	mov	r11,6912
8000e058:	ea 1b 00 b7 	orh	r11,0xb7
8000e05c:	e0 6c 1b 00 	mov	r12,6912
8000e060:	ea 1c 00 b7 	orh	r12,0xb7
8000e064:	f0 1f 00 2e 	mcall	8000e11c <main+0xf4>
	gpio_set_gpio_pin(ET024006DHU_BL_PIN);
8000e068:	30 9c       	mov	r12,9
8000e06a:	f0 1f 00 2e 	mcall	8000e120 <main+0xf8>
	
	//et024006_PrintConsole("Welcome Eric", BLACK, -1);
	//clear_lcd
	et024006_DrawFilledRect(1, 1, ET024006_WIDTH, ET024006_HEIGHT, BLACK);
8000e06e:	30 08       	mov	r8,0
8000e070:	e0 69 00 f0 	mov	r9,240
8000e074:	e0 6a 01 40 	mov	r10,320
8000e078:	30 1b       	mov	r11,1
8000e07a:	30 1c       	mov	r12,1
8000e07c:	f0 1f 00 2a 	mcall	8000e124 <main+0xfc>
	
	// Initialize AES module
	aes_task();
8000e080:	f0 1f 00 2a 	mcall	8000e128 <main+0x100>

	// Start TC
	tc_task();
8000e084:	f0 1f 00 2a 	mcall	8000e12c <main+0x104>

	Init_System_Status();
8000e088:	f0 1f 00 2a 	mcall	8000e130 <main+0x108>
	// Initialize crc for fast calculations
	crcInit();
8000e08c:	f0 1f 00 2a 	mcall	8000e134 <main+0x10c>
		
	// Read the stored values from the flash
	Load_stored_values();
8000e090:	f0 1f 00 2a 	mcall	8000e138 <main+0x110>
	
	if (crcFast((uint8_t *)&Stored_values_ram, sizeof(Stored_values_ram) - 2) == Stored_values_ram.block_crc)
8000e094:	4a a8       	lddpc	r8,8000e13c <main+0x114>
8000e096:	e0 6b 00 c2 	mov	r11,194
8000e09a:	10 9c       	mov	r12,r8
8000e09c:	f0 1f 00 29 	mcall	8000e140 <main+0x118>
8000e0a0:	18 98       	mov	r8,r12
8000e0a2:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000e0a6:	4a 68       	lddpc	r8,8000e13c <main+0x114>
8000e0a8:	f1 08 00 c0 	ld.sh	r8,r8[192]
8000e0ac:	5c 88       	casts.h	r8
8000e0ae:	f0 09 19 00 	cp.h	r9,r8
8000e0b2:	c0 71       	brne	8000e0c0 <main+0x98>
	{
		stSystemStatus.stored_value_crc_status = 1;
8000e0b4:	4a 49       	lddpc	r9,8000e144 <main+0x11c>
8000e0b6:	72 08       	ld.w	r8,r9[0x0]
8000e0b8:	30 1a       	mov	r10,1
8000e0ba:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000e0be:	93 08       	st.w	r9[0x0],r8
	}
	//Stored_values_ram.salt[5] = 0x4d68ab23;
	
	//Update_stored_values();
	// Start USB stack to authorize VBus monitoring
	udc_start();
8000e0c0:	f0 1f 00 22 	mcall	8000e148 <main+0x120>

	if (!udc_include_vbus_monitoring()) {
8000e0c4:	f0 1f 00 22 	mcall	8000e14c <main+0x124>
8000e0c8:	18 98       	mov	r8,r12
8000e0ca:	ec 18 00 01 	eorl	r8,0x1
8000e0ce:	5c 58       	castu.b	r8
8000e0d0:	c0 60       	breq	8000e0dc <main+0xb4>
		// VBUS monitoring is not available on this product
		// thereby VBUS has to be considered as present
		main_vbus_action(true);
8000e0d2:	30 1c       	mov	r12,1
8000e0d4:	f0 1f 00 1f 	mcall	8000e150 <main+0x128>
8000e0d8:	c0 28       	rjmp	8000e0dc <main+0xb4>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e0da:	d7 03       	nop

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true)
	{
		if (main_b_msc_enable)
8000e0dc:	49 e8       	lddpc	r8,8000e154 <main+0x12c>
8000e0de:	11 88       	ld.ub	r8,r8[0x0]
8000e0e0:	58 08       	cp.w	r8,0
8000e0e2:	c0 b0       	breq	8000e0f8 <main+0xd0>
		{
			if (!udi_msc_process_trans())
8000e0e4:	f0 1f 00 1d 	mcall	8000e158 <main+0x130>
8000e0e8:	18 98       	mov	r8,r12
8000e0ea:	ec 18 00 01 	eorl	r8,0x1
8000e0ee:	5c 58       	castu.b	r8
8000e0f0:	cf 50       	breq	8000e0da <main+0xb2>
			{
				sleepmgr_enter_sleep();
8000e0f2:	f0 1f 00 1b 	mcall	8000e15c <main+0x134>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e0f6:	cf 3b       	rjmp	8000e0dc <main+0xb4>
				sleepmgr_enter_sleep();
			}
		}
		else
		{
			sleepmgr_enter_sleep();
8000e0f8:	f0 1f 00 19 	mcall	8000e15c <main+0x134>
		}
		//main_process_mode();
	}
8000e0fc:	cf 0b       	rjmp	8000e0dc <main+0xb4>
8000e0fe:	00 00       	add	r0,r0
8000e100:	80 00       	ld.sh	r0,r0[0x0]
8000e102:	8e 10       	ld.sh	r0,r7[0x2]
8000e104:	80 00       	ld.sh	r0,r0[0x0]
8000e106:	df 28       	*unknown*
8000e108:	80 00       	ld.sh	r0,r0[0x0]
8000e10a:	be d4       	st.b	pc[0x5],r4
8000e10c:	80 00       	ld.sh	r0,r0[0x0]
8000e10e:	48 9c       	lddpc	r12,8000e130 <main+0x108>
8000e110:	80 00       	ld.sh	r0,r0[0x0]
8000e112:	c1 5c       	rcall	8000e13c <main+0x114>
8000e114:	80 00       	ld.sh	r0,r0[0x0]
8000e116:	c1 7c       	rcall	8000e144 <main+0x11c>
8000e118:	80 00       	ld.sh	r0,r0[0x0]
8000e11a:	e2 d8 80 00 	satsub.w	r8,r1,-32768
8000e11e:	4a 84       	lddpc	r4,8000e1bc <main_sof_action>
8000e120:	80 00       	ld.sh	r0,r0[0x0]
8000e122:	8c 4a       	ld.sh	r10,r6[0x8]
8000e124:	80 00       	ld.sh	r0,r0[0x0]
8000e126:	4a fc       	lddpc	r12,8000e1e0 <main_sof_action+0x24>
8000e128:	80 00       	ld.sh	r0,r0[0x0]
8000e12a:	45 d4       	lddsp	r4,sp[0x174]
8000e12c:	80 00       	ld.sh	r0,r0[0x0]
8000e12e:	45 3c       	lddsp	r12,sp[0x14c]
8000e130:	80 00       	ld.sh	r0,r0[0x0]
8000e132:	35 2c       	mov	r12,82
8000e134:	80 00       	ld.sh	r0,r0[0x0]
8000e136:	20 08       	sub	r8,0
8000e138:	80 00       	ld.sh	r0,r0[0x0]
8000e13a:	30 18       	mov	r8,1
8000e13c:	00 00       	add	r0,r0
8000e13e:	0a 3c       	cp.w	r12,r5
8000e140:	80 00       	ld.sh	r0,r0[0x0]
8000e142:	20 9c       	sub	r12,9
8000e144:	00 00       	add	r0,r0
8000e146:	0b a4       	ld.ub	r4,r5[0x2]
8000e148:	80 00       	ld.sh	r0,r0[0x0]
8000e14a:	d2 d4       	*unknown*
8000e14c:	80 00       	ld.sh	r0,r0[0x0]
8000e14e:	df e8       	*unknown*
8000e150:	80 00       	ld.sh	r0,r0[0x0]
8000e152:	e1 60 00 00 	st.b	r0[0],r0
8000e156:	08 18       	sub	r8,r4
8000e158:	80 00       	ld.sh	r0,r0[0x0]
8000e15a:	cd d0       	breq	8000e114 <main+0xec>
8000e15c:	80 00       	ld.sh	r0,r0[0x0]
8000e15e:	df b0       	acall	0x3ec

8000e160 <main_vbus_action>:
}

void main_vbus_action(bool b_high)
{
8000e160:	eb cd 40 80 	pushm	r7,lr
8000e164:	1a 97       	mov	r7,sp
8000e166:	20 1d       	sub	sp,4
8000e168:	18 98       	mov	r8,r12
8000e16a:	ef 68 ff fc 	st.b	r7[-4],r8
	if (b_high) {
8000e16e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000e172:	30 08       	mov	r8,0
8000e174:	f0 09 18 00 	cp.b	r9,r8
8000e178:	c0 40       	breq	8000e180 <main_vbus_action+0x20>
		// Attach USB Device
		udc_attach();
8000e17a:	f0 1f 00 05 	mcall	8000e18c <main_vbus_action+0x2c>
8000e17e:	c0 38       	rjmp	8000e184 <main_vbus_action+0x24>
	} else {
		// VBUS not present
		udc_detach();
8000e180:	f0 1f 00 04 	mcall	8000e190 <main_vbus_action+0x30>
	}
}
8000e184:	2f fd       	sub	sp,-4
8000e186:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e18a:	00 00       	add	r0,r0
8000e18c:	80 00       	ld.sh	r0,r0[0x0]
8000e18e:	e0 00       	*unknown*
8000e190:	80 00       	ld.sh	r0,r0[0x0]
8000e192:	e0 14 eb cd 	andl	r4,0xebcd

8000e194 <main_suspend_action>:

void main_suspend_action(void)
{
8000e194:	eb cd 40 80 	pushm	r7,lr
8000e198:	1a 97       	mov	r7,sp
	ui_powerdown();
8000e19a:	f0 1f 00 03 	mcall	8000e1a4 <main_suspend_action+0x10>
}
8000e19e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e1a2:	00 00       	add	r0,r0
8000e1a4:	80 00       	ld.sh	r0,r0[0x0]
8000e1a6:	c1 7c       	rcall	8000e1d4 <main_sof_action+0x18>

8000e1a8 <main_resume_action>:

void main_resume_action(void)
{
8000e1a8:	eb cd 40 80 	pushm	r7,lr
8000e1ac:	1a 97       	mov	r7,sp
	ui_wakeup();
8000e1ae:	f0 1f 00 03 	mcall	8000e1b8 <main_resume_action+0x10>
}
8000e1b2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e1b6:	00 00       	add	r0,r0
8000e1b8:	80 00       	ld.sh	r0,r0[0x0]
8000e1ba:	c1 98       	rjmp	8000e1ec <main_sof_action+0x30>

8000e1bc <main_sof_action>:

void main_sof_action(void)
{
8000e1bc:	eb cd 40 80 	pushm	r7,lr
8000e1c0:	1a 97       	mov	r7,sp
	if (!main_b_msc_enable)
8000e1c2:	48 a8       	lddpc	r8,8000e1e8 <main_sof_action+0x2c>
8000e1c4:	11 88       	ld.ub	r8,r8[0x0]
8000e1c6:	ec 18 00 01 	eorl	r8,0x1
8000e1ca:	5c 58       	castu.b	r8
8000e1cc:	c0 a1       	brne	8000e1e0 <main_sof_action+0x24>
		return;
	ui_process(udd_get_frame_number());
8000e1ce:	f0 1f 00 08 	mcall	8000e1ec <main_sof_action+0x30>
8000e1d2:	18 98       	mov	r8,r12
8000e1d4:	5c 88       	casts.h	r8
8000e1d6:	5c 78       	castu.h	r8
8000e1d8:	10 9c       	mov	r12,r8
8000e1da:	f0 1f 00 06 	mcall	8000e1f0 <main_sof_action+0x34>
8000e1de:	c0 28       	rjmp	8000e1e2 <main_sof_action+0x26>
}

void main_sof_action(void)
{
	if (!main_b_msc_enable)
		return;
8000e1e0:	d7 03       	nop
	ui_process(udd_get_frame_number());
}
8000e1e2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e1e6:	00 00       	add	r0,r0
8000e1e8:	00 00       	add	r0,r0
8000e1ea:	08 18       	sub	r8,r4
8000e1ec:	80 00       	ld.sh	r0,r0[0x0]
8000e1ee:	9d 76       	st.w	lr[0x1c],r6
8000e1f0:	80 00       	ld.sh	r0,r0[0x0]
8000e1f2:	c1 fc       	rcall	8000e230 <osc_get_rate+0x10>

8000e1f4 <main_msc_enable>:

bool main_msc_enable(void)
{
8000e1f4:	eb cd 40 80 	pushm	r7,lr
8000e1f8:	1a 97       	mov	r7,sp
	main_b_msc_enable = true;
8000e1fa:	48 49       	lddpc	r9,8000e208 <main_msc_enable+0x14>
8000e1fc:	30 18       	mov	r8,1
8000e1fe:	b2 88       	st.b	r9[0x0],r8
	return true;
8000e200:	30 18       	mov	r8,1
}
8000e202:	10 9c       	mov	r12,r8
8000e204:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e208:	00 00       	add	r0,r0
8000e20a:	08 18       	sub	r8,r4

8000e20c <main_msc_disable>:

void main_msc_disable(void)
{
8000e20c:	eb cd 40 80 	pushm	r7,lr
8000e210:	1a 97       	mov	r7,sp
	main_b_msc_enable = false;
8000e212:	48 39       	lddpc	r9,8000e21c <main_msc_disable+0x10>
8000e214:	30 08       	mov	r8,0
8000e216:	b2 88       	st.b	r9[0x0],r8
}
8000e218:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e21c:	00 00       	add	r0,r0
8000e21e:	08 18       	sub	r8,r4

8000e220 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
8000e220:	eb cd 40 80 	pushm	r7,lr
8000e224:	1a 97       	mov	r7,sp
8000e226:	20 1d       	sub	sp,4
8000e228:	18 98       	mov	r8,r12
8000e22a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000e22e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000e232:	58 18       	cp.w	r8,1
8000e234:	c0 a0       	breq	8000e248 <osc_get_rate+0x28>
8000e236:	58 28       	cp.w	r8,2
8000e238:	c0 d0       	breq	8000e252 <osc_get_rate+0x32>
8000e23a:	58 08       	cp.w	r8,0
8000e23c:	c0 e1       	brne	8000e258 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000e23e:	e0 68 1b 00 	mov	r8,6912
8000e242:	ea 18 00 b7 	orh	r8,0xb7
8000e246:	c0 a8       	rjmp	8000e25a <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000e248:	e0 68 44 00 	mov	r8,17408
8000e24c:	ea 18 00 ac 	orh	r8,0xac
8000e250:	c0 58       	rjmp	8000e25a <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000e252:	e0 68 80 00 	mov	r8,32768
8000e256:	c0 28       	rjmp	8000e25a <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000e258:	30 08       	mov	r8,0
	}
}
8000e25a:	10 9c       	mov	r12,r8
8000e25c:	2f fd       	sub	sp,-4
8000e25e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e262:	d7 03       	nop

8000e264 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000e264:	eb cd 40 80 	pushm	r7,lr
8000e268:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000e26a:	30 0c       	mov	r12,0
8000e26c:	f0 1f 00 06 	mcall	8000e284 <sysclk_get_main_hz+0x20>
8000e270:	18 99       	mov	r9,r12
8000e272:	12 98       	mov	r8,r9
8000e274:	a3 68       	lsl	r8,0x2
8000e276:	12 08       	add	r8,r9
8000e278:	a1 78       	lsl	r8,0x1
8000e27a:	12 08       	add	r8,r9
8000e27c:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000e27e:	10 9c       	mov	r12,r8
8000e280:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e284:	80 00       	ld.sh	r0,r0[0x0]
8000e286:	e2 20 eb cd 	sub	r0,191437

8000e288 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000e288:	eb cd 40 80 	pushm	r7,lr
8000e28c:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000e28e:	f0 1f 00 04 	mcall	8000e29c <sysclk_get_cpu_hz+0x14>
8000e292:	18 98       	mov	r8,r12
}
8000e294:	10 9c       	mov	r12,r8
8000e296:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e29a:	00 00       	add	r0,r0
8000e29c:	80 00       	ld.sh	r0,r0[0x0]
8000e29e:	e2 64 eb cd 	mov	r4,191437

8000e2a0 <sysclk_get_pbb_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus B clock
 *
 * \return Frequency of the Peripheral Bus B clock, in Hz.
 */
static inline uint32_t sysclk_get_pbb_hz(void)
{
8000e2a0:	eb cd 40 80 	pushm	r7,lr
8000e2a4:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBB_DIV;
8000e2a6:	f0 1f 00 04 	mcall	8000e2b4 <sysclk_get_pbb_hz+0x14>
8000e2aa:	18 98       	mov	r8,r12
}
8000e2ac:	10 9c       	mov	r12,r8
8000e2ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e2b2:	00 00       	add	r0,r0
8000e2b4:	80 00       	ld.sh	r0,r0[0x0]
8000e2b6:	e2 64 eb cd 	mov	r4,191437

8000e2b8 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000e2b8:	eb cd 40 80 	pushm	r7,lr
8000e2bc:	1a 97       	mov	r7,sp
8000e2be:	20 1d       	sub	sp,4
8000e2c0:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000e2c4:	ee fb ff fc 	ld.w	r11,r7[-4]
8000e2c8:	30 1c       	mov	r12,1
8000e2ca:	f0 1f 00 03 	mcall	8000e2d4 <sysclk_enable_hsb_module+0x1c>
}
8000e2ce:	2f fd       	sub	sp,-4
8000e2d0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e2d4:	80 00       	ld.sh	r0,r0[0x0]
8000e2d6:	bd ac       	sbr	r12,0x1c

8000e2d8 <memories_initialization>:
# include "spi.h"
# include "conf_sd_mmc_spi.h"
#endif

void memories_initialization(void)
{
8000e2d8:	eb cd 40 c0 	pushm	r6-r7,lr
8000e2dc:	1a 97       	mov	r7,sp
8000e2de:	20 2d       	sub	sp,8
	union {
		unsigned long scfg;
		avr32_hmatrix_scfg_t SCFG;
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);
8000e2e0:	30 0c       	mov	r12,0
8000e2e2:	f0 1f 00 42 	mcall	8000e3e8 <memories_initialization+0x110>

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
8000e2e6:	fe 68 10 00 	mov	r8,-126976
8000e2ea:	71 08       	ld.w	r8,r8[0x40]
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e2ec:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e2f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e2f4:	30 19       	mov	r9,1
8000e2f6:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e2fa:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000e2fe:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e302:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000e306:	f1 49 00 40 	st.w	r8[64],r9
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
8000e30a:	fe 68 10 00 	mov	r8,-126976
8000e30e:	71 48       	ld.w	r8,r8[0x50]
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e310:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e314:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e318:	30 19       	mov	r9,1
8000e31a:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e31e:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000e322:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e326:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000e32a:	f1 49 00 50 	st.w	r8[80],r9
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
8000e32e:	fe 68 10 00 	mov	r8,-126976
8000e332:	71 68       	ld.w	r8,r8[0x58]
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e334:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e338:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e33c:	30 19       	mov	r9,1
8000e33e:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e342:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000e346:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e34a:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000e34e:	f1 49 00 58 	st.w	r8[88],r9
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
8000e352:	fe 68 10 00 	mov	r8,-126976
8000e356:	70 68       	ld.w	r8,r8[0x18]
		unsigned long                 mcfg;
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
8000e358:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
8000e35c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e360:	30 09       	mov	r9,0
8000e362:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000e366:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000e36a:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_mcfg.mcfg;
8000e36e:	ee f9 ff f8 	ld.w	r9,r7[-8]
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000e372:	91 69       	st.w	r8[0x18],r9
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
8000e374:	fe 68 10 00 	mov	r8,-126976
8000e378:	71 58       	ld.w	r8,r8[0x54]
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
8000e37a:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
8000e37e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e382:	30 69       	mov	r9,6
8000e384:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
8000e388:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e38c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e390:	30 29       	mov	r9,2
8000e392:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e396:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000e39a:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e39e:	ee f9 ff fc 	ld.w	r9,r7[-4]
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000e3a2:	f1 49 00 54 	st.w	r8[84],r9
#endif

//#if ((defined SD_MMC_MCI_0_MEM) && (SD_MMC_MCI_0_MEM == ENABLE)) \
	//|| ((defined SD_MMC_MCI_1_MEM) && (SD_MMC_MCI_1_MEM == ENABLE))
#if ((defined (SD_MMC_MCI_0_MEM) || defined(SD_MMC_MCI_1_MEM) ) && (SD_MMC_MCI_0_MEM == ENABLE || SD_MMC_MCI_1_MEM == ENABLE))	
	sysclk_enable_pbb_module(SYSCLK_MCI);
8000e3a6:	30 6c       	mov	r12,6
8000e3a8:	f0 1f 00 10 	mcall	8000e3e8 <memories_initialization+0x110>
	sysclk_enable_hsb_module(SYSCLK_DMACA);
8000e3ac:	30 7c       	mov	r12,7
8000e3ae:	f0 1f 00 10 	mcall	8000e3ec <memories_initialization+0x114>
#if SD_MMC_MCI_0_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_8BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000e3b2:	f0 1f 00 10 	mcall	8000e3f0 <memories_initialization+0x118>
8000e3b6:	18 98       	mov	r8,r12
8000e3b8:	10 96       	mov	r6,r8
8000e3ba:	f0 1f 00 0f 	mcall	8000e3f4 <memories_initialization+0x11c>
8000e3be:	18 98       	mov	r8,r12
8000e3c0:	0c 9a       	mov	r10,r6
8000e3c2:	10 9b       	mov	r11,r8
8000e3c4:	30 0c       	mov	r12,0
8000e3c6:	f0 1f 00 0d 	mcall	8000e3f8 <memories_initialization+0x120>
#endif
#if SD_MMC_MCI_1_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_4BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000e3ca:	f0 1f 00 0a 	mcall	8000e3f0 <memories_initialization+0x118>
8000e3ce:	18 98       	mov	r8,r12
8000e3d0:	10 96       	mov	r6,r8
8000e3d2:	f0 1f 00 09 	mcall	8000e3f4 <memories_initialization+0x11c>
8000e3d6:	18 98       	mov	r8,r12
8000e3d8:	0c 9a       	mov	r10,r6
8000e3da:	10 9b       	mov	r11,r8
8000e3dc:	30 1c       	mov	r12,1
8000e3de:	f0 1f 00 07 	mcall	8000e3f8 <memories_initialization+0x120>

	// Initialize SD/MMC with SPI PB clock.
	sd_mmc_spi_init(spiOptions,sysclk_get_pba_hz());
#endif  // SD_MMC_SPI_MEM == ENABLE

}
8000e3e2:	2f ed       	sub	sp,-8
8000e3e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e3e8:	80 00       	ld.sh	r0,r0[0x0]
8000e3ea:	be 20       	st.h	pc[0x4],r0
8000e3ec:	80 00       	ld.sh	r0,r0[0x0]
8000e3ee:	e2 b8       	*unknown*
8000e3f0:	80 00       	ld.sh	r0,r0[0x0]
8000e3f2:	e2 88 80 00 	brls	8005e3f2 <Stored_values_flash+0x1e5f2>
8000e3f6:	e2 a0 80 00 	rcall	8005e3f6 <Stored_values_flash+0x1e5f6>
8000e3fa:	66 b4       	ld.w	r4,r3[0x2c]

8000e3fc <__avr32_udiv64>:
8000e3fc:	d4 31       	pushm	r0-r7,lr
8000e3fe:	1a 97       	mov	r7,sp
8000e400:	20 2d       	sub	sp,8
8000e402:	10 9e       	mov	lr,r8
8000e404:	12 95       	mov	r5,r9
8000e406:	14 96       	mov	r6,r10
8000e408:	58 09       	cp.w	r9,0
8000e40a:	c4 91       	brne	8000e49c <__avr32_udiv64+0xa0>
8000e40c:	16 38       	cp.w	r8,r11
8000e40e:	e0 88 00 57 	brls	8000e4bc <__avr32_udiv64+0xc0>
8000e412:	f0 08 12 00 	clz	r8,r8
8000e416:	c0 d0       	breq	8000e430 <__avr32_udiv64+0x34>
8000e418:	f6 08 09 4b 	lsl	r11,r11,r8
8000e41c:	f0 09 11 20 	rsub	r9,r8,32
8000e420:	fc 08 09 4e 	lsl	lr,lr,r8
8000e424:	f4 09 0a 49 	lsr	r9,r10,r9
8000e428:	f4 08 09 46 	lsl	r6,r10,r8
8000e42c:	f3 eb 10 0b 	or	r11,r9,r11
8000e430:	fc 05 16 10 	lsr	r5,lr,0x10
8000e434:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
8000e438:	f6 05 0d 0a 	divu	r10,r11,r5
8000e43c:	ec 08 16 10 	lsr	r8,r6,0x10
8000e440:	14 99       	mov	r9,r10
8000e442:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e446:	b9 3a       	mul	r10,r12
8000e448:	10 3a       	cp.w	r10,r8
8000e44a:	e0 88 00 0c 	brls	8000e462 <__avr32_udiv64+0x66>
8000e44e:	20 19       	sub	r9,1
8000e450:	1c 08       	add	r8,lr
8000e452:	10 3e       	cp.w	lr,r8
8000e454:	e0 8b 00 07 	brhi	8000e462 <__avr32_udiv64+0x66>
8000e458:	10 3a       	cp.w	r10,r8
8000e45a:	f7 b9 0b 01 	subhi	r9,1
8000e45e:	f1 de eb 08 	addhi	r8,r8,lr
8000e462:	f0 0a 01 0b 	sub	r11,r8,r10
8000e466:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e46a:	f6 05 0d 0a 	divu	r10,r11,r5
8000e46e:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000e472:	14 98       	mov	r8,r10
8000e474:	f4 0c 02 4c 	mul	r12,r10,r12
8000e478:	0c 3c       	cp.w	r12,r6
8000e47a:	e0 88 00 0a 	brls	8000e48e <__avr32_udiv64+0x92>
8000e47e:	20 18       	sub	r8,1
8000e480:	1c 06       	add	r6,lr
8000e482:	0c 3e       	cp.w	lr,r6
8000e484:	e0 8b 00 05 	brhi	8000e48e <__avr32_udiv64+0x92>
8000e488:	0c 3c       	cp.w	r12,r6
8000e48a:	f7 b8 0b 01 	subhi	r8,1
8000e48e:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000e492:	30 0c       	mov	r12,0
8000e494:	16 9a       	mov	r10,r11
8000e496:	18 9b       	mov	r11,r12
8000e498:	2f ed       	sub	sp,-8
8000e49a:	d8 32       	popm	r0-r7,pc
8000e49c:	16 39       	cp.w	r9,r11
8000e49e:	e0 8b 00 51 	brhi	8000e540 <__avr32_udiv64+0x144>
8000e4a2:	f2 0c 12 00 	clz	r12,r9
8000e4a6:	c5 31       	brne	8000e54c <__avr32_udiv64+0x150>
8000e4a8:	14 38       	cp.w	r8,r10
8000e4aa:	5f 89       	srls	r9
8000e4ac:	16 35       	cp.w	r5,r11
8000e4ae:	5f 38       	srlo	r8
8000e4b0:	10 49       	or	r9,r8
8000e4b2:	f8 09 18 00 	cp.b	r9,r12
8000e4b6:	c4 50       	breq	8000e540 <__avr32_udiv64+0x144>
8000e4b8:	30 1b       	mov	r11,1
8000e4ba:	c4 58       	rjmp	8000e544 <__avr32_udiv64+0x148>
8000e4bc:	58 08       	cp.w	r8,0
8000e4be:	c0 51       	brne	8000e4c8 <__avr32_udiv64+0xcc>
8000e4c0:	30 19       	mov	r9,1
8000e4c2:	f2 08 0d 08 	divu	r8,r9,r8
8000e4c6:	10 9e       	mov	lr,r8
8000e4c8:	fc 08 12 00 	clz	r8,lr
8000e4cc:	e0 81 00 91 	brne	8000e5ee <__avr32_udiv64+0x1f2>
8000e4d0:	1c 1b       	sub	r11,lr
8000e4d2:	fc 05 16 10 	lsr	r5,lr,0x10
8000e4d6:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e4da:	30 1c       	mov	r12,1
8000e4dc:	f6 05 0d 0a 	divu	r10,r11,r5
8000e4e0:	ec 08 16 10 	lsr	r8,r6,0x10
8000e4e4:	f4 09 02 43 	mul	r3,r10,r9
8000e4e8:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e4ec:	14 9b       	mov	r11,r10
8000e4ee:	10 33       	cp.w	r3,r8
8000e4f0:	e0 88 00 0c 	brls	8000e508 <__avr32_udiv64+0x10c>
8000e4f4:	20 1b       	sub	r11,1
8000e4f6:	1c 08       	add	r8,lr
8000e4f8:	10 3e       	cp.w	lr,r8
8000e4fa:	e0 8b 00 07 	brhi	8000e508 <__avr32_udiv64+0x10c>
8000e4fe:	10 33       	cp.w	r3,r8
8000e500:	f7 bb 0b 01 	subhi	r11,1
8000e504:	f1 de eb 08 	addhi	r8,r8,lr
8000e508:	f0 03 01 03 	sub	r3,r8,r3
8000e50c:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e510:	e6 05 0d 02 	divu	r2,r3,r5
8000e514:	ed e3 11 06 	or	r6,r6,r3<<0x10
8000e518:	04 98       	mov	r8,r2
8000e51a:	e4 09 02 49 	mul	r9,r2,r9
8000e51e:	0c 39       	cp.w	r9,r6
8000e520:	e0 88 00 0a 	brls	8000e534 <__avr32_udiv64+0x138>
8000e524:	20 18       	sub	r8,1
8000e526:	1c 06       	add	r6,lr
8000e528:	0c 3e       	cp.w	lr,r6
8000e52a:	e0 8b 00 05 	brhi	8000e534 <__avr32_udiv64+0x138>
8000e52e:	0c 39       	cp.w	r9,r6
8000e530:	f7 b8 0b 01 	subhi	r8,1
8000e534:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000e538:	16 9a       	mov	r10,r11
8000e53a:	18 9b       	mov	r11,r12
8000e53c:	2f ed       	sub	sp,-8
8000e53e:	d8 32       	popm	r0-r7,pc
8000e540:	30 0b       	mov	r11,0
8000e542:	16 9c       	mov	r12,r11
8000e544:	16 9a       	mov	r10,r11
8000e546:	18 9b       	mov	r11,r12
8000e548:	2f ed       	sub	sp,-8
8000e54a:	d8 32       	popm	r0-r7,pc
8000e54c:	f2 0c 09 45 	lsl	r5,r9,r12
8000e550:	f8 0e 11 20 	rsub	lr,r12,32
8000e554:	f0 0c 09 43 	lsl	r3,r8,r12
8000e558:	f4 0e 0a 46 	lsr	r6,r10,lr
8000e55c:	f0 0e 0a 48 	lsr	r8,r8,lr
8000e560:	f6 0e 0a 4e 	lsr	lr,r11,lr
8000e564:	0a 48       	or	r8,r5
8000e566:	f0 01 16 10 	lsr	r1,r8,0x10
8000e56a:	fc 01 0d 04 	divu	r4,lr,r1
8000e56e:	ee e5 ff f8 	st.d	r7[-8],r4
8000e572:	f6 0c 09 49 	lsl	r9,r11,r12
8000e576:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000e57a:	ed e9 10 09 	or	r9,r6,r9
8000e57e:	08 96       	mov	r6,r4
8000e580:	f2 0e 16 10 	lsr	lr,r9,0x10
8000e584:	ee f4 ff f8 	ld.w	r4,r7[-8]
8000e588:	ec 05 02 4b 	mul	r11,r6,r5
8000e58c:	fd e4 11 0e 	or	lr,lr,r4<<0x10
8000e590:	1c 3b       	cp.w	r11,lr
8000e592:	e0 88 00 07 	brls	8000e5a0 <__avr32_udiv64+0x1a4>
8000e596:	20 16       	sub	r6,1
8000e598:	10 0e       	add	lr,r8
8000e59a:	1c 38       	cp.w	r8,lr
8000e59c:	e0 88 00 6d 	brls	8000e676 <__avr32_udiv64+0x27a>
8000e5a0:	16 1e       	sub	lr,r11
8000e5a2:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000e5a6:	fc 01 0d 00 	divu	r0,lr,r1
8000e5aa:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000e5ae:	00 9b       	mov	r11,r0
8000e5b0:	e0 05 02 4e 	mul	lr,r0,r5
8000e5b4:	12 3e       	cp.w	lr,r9
8000e5b6:	e0 88 00 07 	brls	8000e5c4 <__avr32_udiv64+0x1c8>
8000e5ba:	20 1b       	sub	r11,1
8000e5bc:	10 09       	add	r9,r8
8000e5be:	12 38       	cp.w	r8,r9
8000e5c0:	e0 88 00 55 	brls	8000e66a <__avr32_udiv64+0x26e>
8000e5c4:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
8000e5c8:	1c 19       	sub	r9,lr
8000e5ca:	f6 03 06 42 	mulu.d	r2,r11,r3
8000e5ce:	06 39       	cp.w	r9,r3
8000e5d0:	c0 93       	brcs	8000e5e2 <__avr32_udiv64+0x1e6>
8000e5d2:	5f 09       	sreq	r9
8000e5d4:	f4 0c 09 4c 	lsl	r12,r10,r12
8000e5d8:	04 3c       	cp.w	r12,r2
8000e5da:	5f 38       	srlo	r8
8000e5dc:	f3 e8 00 08 	and	r8,r9,r8
8000e5e0:	c0 20       	breq	8000e5e4 <__avr32_udiv64+0x1e8>
8000e5e2:	20 1b       	sub	r11,1
8000e5e4:	30 0c       	mov	r12,0
8000e5e6:	16 9a       	mov	r10,r11
8000e5e8:	18 9b       	mov	r11,r12
8000e5ea:	2f ed       	sub	sp,-8
8000e5ec:	d8 32       	popm	r0-r7,pc
8000e5ee:	f6 08 09 49 	lsl	r9,r11,r8
8000e5f2:	fc 08 09 4e 	lsl	lr,lr,r8
8000e5f6:	f0 01 11 20 	rsub	r1,r8,32
8000e5fa:	fc 05 16 10 	lsr	r5,lr,0x10
8000e5fe:	f4 01 0a 42 	lsr	r2,r10,r1
8000e602:	f6 01 0a 41 	lsr	r1,r11,r1
8000e606:	12 42       	or	r2,r9
8000e608:	e2 05 0d 00 	divu	r0,r1,r5
8000e60c:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e610:	e4 06 16 10 	lsr	r6,r2,0x10
8000e614:	00 93       	mov	r3,r0
8000e616:	ed e1 11 06 	or	r6,r6,r1<<0x10
8000e61a:	e0 09 02 4c 	mul	r12,r0,r9
8000e61e:	0c 3c       	cp.w	r12,r6
8000e620:	e0 88 00 07 	brls	8000e62e <__avr32_udiv64+0x232>
8000e624:	20 13       	sub	r3,1
8000e626:	1c 06       	add	r6,lr
8000e628:	0c 3e       	cp.w	lr,r6
8000e62a:	e0 88 00 2c 	brls	8000e682 <__avr32_udiv64+0x286>
8000e62e:	ec 0c 01 01 	sub	r1,r6,r12
8000e632:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000e636:	e2 05 0d 00 	divu	r0,r1,r5
8000e63a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000e63e:	00 9c       	mov	r12,r0
8000e640:	e0 09 02 41 	mul	r1,r0,r9
8000e644:	16 31       	cp.w	r1,r11
8000e646:	e0 88 00 0c 	brls	8000e65e <__avr32_udiv64+0x262>
8000e64a:	20 1c       	sub	r12,1
8000e64c:	1c 0b       	add	r11,lr
8000e64e:	16 3e       	cp.w	lr,r11
8000e650:	e0 8b 00 07 	brhi	8000e65e <__avr32_udiv64+0x262>
8000e654:	16 31       	cp.w	r1,r11
8000e656:	f7 bc 0b 01 	subhi	r12,1
8000e65a:	f7 de eb 0b 	addhi	r11,r11,lr
8000e65e:	f4 08 09 46 	lsl	r6,r10,r8
8000e662:	02 1b       	sub	r11,r1
8000e664:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
8000e668:	c3 ab       	rjmp	8000e4dc <__avr32_udiv64+0xe0>
8000e66a:	12 3e       	cp.w	lr,r9
8000e66c:	f3 d8 eb 09 	addhi	r9,r9,r8
8000e670:	f7 bb 0b 01 	subhi	r11,1
8000e674:	ca 8b       	rjmp	8000e5c4 <__avr32_udiv64+0x1c8>
8000e676:	1c 3b       	cp.w	r11,lr
8000e678:	f7 b6 0b 01 	subhi	r6,1
8000e67c:	fd d8 eb 0e 	addhi	lr,lr,r8
8000e680:	c9 0b       	rjmp	8000e5a0 <__avr32_udiv64+0x1a4>
8000e682:	0c 3c       	cp.w	r12,r6
8000e684:	f7 b3 0b 01 	subhi	r3,1
8000e688:	ed de eb 06 	addhi	r6,r6,lr
8000e68c:	cd 1b       	rjmp	8000e62e <__avr32_udiv64+0x232>

8000e68e <memcpy>:
8000e68e:	58 8a       	cp.w	r10,8
8000e690:	c2 f5       	brlt	8000e6ee <memcpy+0x60>
8000e692:	f9 eb 10 09 	or	r9,r12,r11
8000e696:	e2 19 00 03 	andl	r9,0x3,COH
8000e69a:	e0 81 00 97 	brne	8000e7c8 <memcpy+0x13a>
8000e69e:	e0 4a 00 20 	cp.w	r10,32
8000e6a2:	c3 b4       	brge	8000e718 <memcpy+0x8a>
8000e6a4:	f4 08 14 02 	asr	r8,r10,0x2
8000e6a8:	f0 09 11 08 	rsub	r9,r8,8
8000e6ac:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000e6b0:	76 69       	ld.w	r9,r11[0x18]
8000e6b2:	99 69       	st.w	r12[0x18],r9
8000e6b4:	76 59       	ld.w	r9,r11[0x14]
8000e6b6:	99 59       	st.w	r12[0x14],r9
8000e6b8:	76 49       	ld.w	r9,r11[0x10]
8000e6ba:	99 49       	st.w	r12[0x10],r9
8000e6bc:	76 39       	ld.w	r9,r11[0xc]
8000e6be:	99 39       	st.w	r12[0xc],r9
8000e6c0:	76 29       	ld.w	r9,r11[0x8]
8000e6c2:	99 29       	st.w	r12[0x8],r9
8000e6c4:	76 19       	ld.w	r9,r11[0x4]
8000e6c6:	99 19       	st.w	r12[0x4],r9
8000e6c8:	76 09       	ld.w	r9,r11[0x0]
8000e6ca:	99 09       	st.w	r12[0x0],r9
8000e6cc:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000e6d0:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000e6d4:	e0 1a 00 03 	andl	r10,0x3
8000e6d8:	f4 0a 11 04 	rsub	r10,r10,4
8000e6dc:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000e6e0:	17 a9       	ld.ub	r9,r11[0x2]
8000e6e2:	b0 a9       	st.b	r8[0x2],r9
8000e6e4:	17 99       	ld.ub	r9,r11[0x1]
8000e6e6:	b0 99       	st.b	r8[0x1],r9
8000e6e8:	17 89       	ld.ub	r9,r11[0x0]
8000e6ea:	b0 89       	st.b	r8[0x0],r9
8000e6ec:	5e fc       	retal	r12
8000e6ee:	f4 0a 11 09 	rsub	r10,r10,9
8000e6f2:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000e6f6:	17 f9       	ld.ub	r9,r11[0x7]
8000e6f8:	b8 f9       	st.b	r12[0x7],r9
8000e6fa:	17 e9       	ld.ub	r9,r11[0x6]
8000e6fc:	b8 e9       	st.b	r12[0x6],r9
8000e6fe:	17 d9       	ld.ub	r9,r11[0x5]
8000e700:	b8 d9       	st.b	r12[0x5],r9
8000e702:	17 c9       	ld.ub	r9,r11[0x4]
8000e704:	b8 c9       	st.b	r12[0x4],r9
8000e706:	17 b9       	ld.ub	r9,r11[0x3]
8000e708:	b8 b9       	st.b	r12[0x3],r9
8000e70a:	17 a9       	ld.ub	r9,r11[0x2]
8000e70c:	b8 a9       	st.b	r12[0x2],r9
8000e70e:	17 99       	ld.ub	r9,r11[0x1]
8000e710:	b8 99       	st.b	r12[0x1],r9
8000e712:	17 89       	ld.ub	r9,r11[0x0]
8000e714:	b8 89       	st.b	r12[0x0],r9
8000e716:	5e fc       	retal	r12
8000e718:	eb cd 40 c0 	pushm	r6-r7,lr
8000e71c:	18 99       	mov	r9,r12
8000e71e:	22 0a       	sub	r10,32
8000e720:	b7 07       	ld.d	r6,r11++
8000e722:	b3 26       	st.d	r9++,r6
8000e724:	b7 07       	ld.d	r6,r11++
8000e726:	b3 26       	st.d	r9++,r6
8000e728:	b7 07       	ld.d	r6,r11++
8000e72a:	b3 26       	st.d	r9++,r6
8000e72c:	b7 07       	ld.d	r6,r11++
8000e72e:	b3 26       	st.d	r9++,r6
8000e730:	22 0a       	sub	r10,32
8000e732:	cf 74       	brge	8000e720 <memcpy+0x92>
8000e734:	2f 0a       	sub	r10,-16
8000e736:	c0 65       	brlt	8000e742 <memcpy+0xb4>
8000e738:	b7 07       	ld.d	r6,r11++
8000e73a:	b3 26       	st.d	r9++,r6
8000e73c:	b7 07       	ld.d	r6,r11++
8000e73e:	b3 26       	st.d	r9++,r6
8000e740:	21 0a       	sub	r10,16
8000e742:	5c 3a       	neg	r10
8000e744:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000e748:	d7 03       	nop
8000e74a:	d7 03       	nop
8000e74c:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000e750:	f3 66 00 0e 	st.b	r9[14],r6
8000e754:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000e758:	f3 66 00 0d 	st.b	r9[13],r6
8000e75c:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000e760:	f3 66 00 0c 	st.b	r9[12],r6
8000e764:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000e768:	f3 66 00 0b 	st.b	r9[11],r6
8000e76c:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000e770:	f3 66 00 0a 	st.b	r9[10],r6
8000e774:	f7 36 00 09 	ld.ub	r6,r11[9]
8000e778:	f3 66 00 09 	st.b	r9[9],r6
8000e77c:	f7 36 00 08 	ld.ub	r6,r11[8]
8000e780:	f3 66 00 08 	st.b	r9[8],r6
8000e784:	f7 36 00 07 	ld.ub	r6,r11[7]
8000e788:	f3 66 00 07 	st.b	r9[7],r6
8000e78c:	f7 36 00 06 	ld.ub	r6,r11[6]
8000e790:	f3 66 00 06 	st.b	r9[6],r6
8000e794:	f7 36 00 05 	ld.ub	r6,r11[5]
8000e798:	f3 66 00 05 	st.b	r9[5],r6
8000e79c:	f7 36 00 04 	ld.ub	r6,r11[4]
8000e7a0:	f3 66 00 04 	st.b	r9[4],r6
8000e7a4:	f7 36 00 03 	ld.ub	r6,r11[3]
8000e7a8:	f3 66 00 03 	st.b	r9[3],r6
8000e7ac:	f7 36 00 02 	ld.ub	r6,r11[2]
8000e7b0:	f3 66 00 02 	st.b	r9[2],r6
8000e7b4:	f7 36 00 01 	ld.ub	r6,r11[1]
8000e7b8:	f3 66 00 01 	st.b	r9[1],r6
8000e7bc:	f7 36 00 00 	ld.ub	r6,r11[0]
8000e7c0:	f3 66 00 00 	st.b	r9[0],r6
8000e7c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e7c8:	20 1a       	sub	r10,1
8000e7ca:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000e7ce:	f8 0a 0b 09 	st.b	r12[r10],r9
8000e7d2:	cf b1       	brne	8000e7c8 <memcpy+0x13a>
8000e7d4:	5e fc       	retal	r12

8000e7d6 <memset>:
8000e7d6:	18 98       	mov	r8,r12
8000e7d8:	c0 38       	rjmp	8000e7de <memset+0x8>
8000e7da:	10 cb       	st.b	r8++,r11
8000e7dc:	20 1a       	sub	r10,1
8000e7de:	58 0a       	cp.w	r10,0
8000e7e0:	cf d1       	brne	8000e7da <memset+0x4>
8000e7e2:	5e fc       	retal	r12

Disassembly of section .exception:

8000e800 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000e800:	c0 08       	rjmp	8000e800 <_evba>
	...

8000e804 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000e804:	c0 08       	rjmp	8000e804 <_handle_TLB_Multiple_Hit>
	...

8000e808 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000e808:	c0 08       	rjmp	8000e808 <_handle_Bus_Error_Data_Fetch>
	...

8000e80c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000e80c:	c0 08       	rjmp	8000e80c <_handle_Bus_Error_Instruction_Fetch>
	...

8000e810 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000e810:	c0 08       	rjmp	8000e810 <_handle_NMI>
	...

8000e814 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000e814:	c0 08       	rjmp	8000e814 <_handle_Instruction_Address>
	...

8000e818 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000e818:	c0 08       	rjmp	8000e818 <_handle_ITLB_Protection>
	...

8000e81c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000e81c:	c0 08       	rjmp	8000e81c <_handle_Breakpoint>
	...

8000e820 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000e820:	c0 08       	rjmp	8000e820 <_handle_Illegal_Opcode>
	...

8000e824 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000e824:	c0 08       	rjmp	8000e824 <_handle_Unimplemented_Instruction>
	...

8000e828 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000e828:	c0 08       	rjmp	8000e828 <_handle_Privilege_Violation>
	...

8000e82c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000e82c:	c0 08       	rjmp	8000e82c <_handle_Floating_Point>
	...

8000e830 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000e830:	c0 08       	rjmp	8000e830 <_handle_Coprocessor_Absent>
	...

8000e834 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000e834:	c0 08       	rjmp	8000e834 <_handle_Data_Address_Read>
	...

8000e838 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000e838:	c0 08       	rjmp	8000e838 <_handle_Data_Address_Write>
	...

8000e83c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000e83c:	c0 08       	rjmp	8000e83c <_handle_DTLB_Protection_Read>
	...

8000e840 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000e840:	c0 08       	rjmp	8000e840 <_handle_DTLB_Protection_Write>
	...

8000e844 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000e844:	c0 08       	rjmp	8000e844 <_handle_DTLB_Modified>
	...

8000e850 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000e850:	c0 08       	rjmp	8000e850 <_handle_ITLB_Miss>
	...

8000e860 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000e860:	c0 08       	rjmp	8000e860 <_handle_DTLB_Miss_Read>
	...

8000e870 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000e870:	c0 08       	rjmp	8000e870 <_handle_DTLB_Miss_Write>
	...

8000e900 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000e900:	c0 08       	rjmp	8000e900 <_handle_Supervisor_Call>
8000e902:	d7 03       	nop

8000e904 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000e904:	30 0c       	mov	r12,0
8000e906:	fe b0 d2 43 	rcall	80008d8c <_get_interrupt_handler>
8000e90a:	58 0c       	cp.w	r12,0
8000e90c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000e910:	d6 03       	rete

8000e912 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000e912:	30 1c       	mov	r12,1
8000e914:	fe b0 d2 3c 	rcall	80008d8c <_get_interrupt_handler>
8000e918:	58 0c       	cp.w	r12,0
8000e91a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000e91e:	d6 03       	rete

8000e920 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000e920:	30 2c       	mov	r12,2
8000e922:	fe b0 d2 35 	rcall	80008d8c <_get_interrupt_handler>
8000e926:	58 0c       	cp.w	r12,0
8000e928:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000e92c:	d6 03       	rete

8000e92e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000e92e:	30 3c       	mov	r12,3
8000e930:	fe b0 d2 2e 	rcall	80008d8c <_get_interrupt_handler>
8000e934:	58 0c       	cp.w	r12,0
8000e936:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000e93a:	d6 03       	rete
8000e93c:	d7 03       	nop
8000e93e:	d7 03       	nop
8000e940:	d7 03       	nop
8000e942:	d7 03       	nop
8000e944:	d7 03       	nop
8000e946:	d7 03       	nop
8000e948:	d7 03       	nop
8000e94a:	d7 03       	nop
8000e94c:	d7 03       	nop
8000e94e:	d7 03       	nop
8000e950:	d7 03       	nop
8000e952:	d7 03       	nop
8000e954:	d7 03       	nop
8000e956:	d7 03       	nop
8000e958:	d7 03       	nop
8000e95a:	d7 03       	nop
8000e95c:	d7 03       	nop
8000e95e:	d7 03       	nop
8000e960:	d7 03       	nop
8000e962:	d7 03       	nop
8000e964:	d7 03       	nop
8000e966:	d7 03       	nop
8000e968:	d7 03       	nop
8000e96a:	d7 03       	nop
8000e96c:	d7 03       	nop
8000e96e:	d7 03       	nop
8000e970:	d7 03       	nop
8000e972:	d7 03       	nop
8000e974:	d7 03       	nop
8000e976:	d7 03       	nop
8000e978:	d7 03       	nop
8000e97a:	d7 03       	nop
8000e97c:	d7 03       	nop
8000e97e:	d7 03       	nop
8000e980:	d7 03       	nop
8000e982:	d7 03       	nop
8000e984:	d7 03       	nop
8000e986:	d7 03       	nop
8000e988:	d7 03       	nop
8000e98a:	d7 03       	nop
8000e98c:	d7 03       	nop
8000e98e:	d7 03       	nop
8000e990:	d7 03       	nop
8000e992:	d7 03       	nop
8000e994:	d7 03       	nop
8000e996:	d7 03       	nop
8000e998:	d7 03       	nop
8000e99a:	d7 03       	nop
8000e99c:	d7 03       	nop
8000e99e:	d7 03       	nop
8000e9a0:	d7 03       	nop
8000e9a2:	d7 03       	nop
8000e9a4:	d7 03       	nop
8000e9a6:	d7 03       	nop
8000e9a8:	d7 03       	nop
8000e9aa:	d7 03       	nop
8000e9ac:	d7 03       	nop
8000e9ae:	d7 03       	nop
8000e9b0:	d7 03       	nop
8000e9b2:	d7 03       	nop
8000e9b4:	d7 03       	nop
8000e9b6:	d7 03       	nop
8000e9b8:	d7 03       	nop
8000e9ba:	d7 03       	nop
8000e9bc:	d7 03       	nop
8000e9be:	d7 03       	nop
8000e9c0:	d7 03       	nop
8000e9c2:	d7 03       	nop
8000e9c4:	d7 03       	nop
8000e9c6:	d7 03       	nop
8000e9c8:	d7 03       	nop
8000e9ca:	d7 03       	nop
8000e9cc:	d7 03       	nop
8000e9ce:	d7 03       	nop
8000e9d0:	d7 03       	nop
8000e9d2:	d7 03       	nop
8000e9d4:	d7 03       	nop
8000e9d6:	d7 03       	nop
8000e9d8:	d7 03       	nop
8000e9da:	d7 03       	nop
8000e9dc:	d7 03       	nop
8000e9de:	d7 03       	nop
8000e9e0:	d7 03       	nop
8000e9e2:	d7 03       	nop
8000e9e4:	d7 03       	nop
8000e9e6:	d7 03       	nop
8000e9e8:	d7 03       	nop
8000e9ea:	d7 03       	nop
8000e9ec:	d7 03       	nop
8000e9ee:	d7 03       	nop
8000e9f0:	d7 03       	nop
8000e9f2:	d7 03       	nop
8000e9f4:	d7 03       	nop
8000e9f6:	d7 03       	nop
8000e9f8:	d7 03       	nop
8000e9fa:	d7 03       	nop
8000e9fc:	d7 03       	nop
8000e9fe:	d7 03       	nop
