
default-cryptx2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c8e8  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000ea00  8000ea00  0000ee00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007c8  8000ec00  8000ec00  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         0000023c  00000008  8000f3c8  0000f808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  00000244  8000f604  0000fa44  2**0
                  ALLOC
  8 .bss          00000bc0  00000248  00000248  00000000  2**2
                  ALLOC
  9 .heap         0000e1f8  00000e08  00000e08  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000fa44  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000012d8  00000000  00000000  0000fa78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00002922  00000000  00000000  00010d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000256a8  00000000  00000000  00013672  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003400  00000000  00000000  00038d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000742e  00000000  00000000  0003c11a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000039e4  00000000  00000000  00043548  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00009ee2  00000000  00000000  00046f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00005b00  00000000  00000000  00050e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .flash_nvram  000000a0  8003fe00  8000f604  0000fe00  2**2
                  ALLOC
 21 .debug_ranges 000012a8  00000000  00000000  00056910  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	b8 40       	st.h	r12[0x8],r0

Disassembly of section .text:

80002008 <hmac_sha256_init>:
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 fd       	sub	sp,60
80002010:	ef 4c ff cc 	st.w	r7[-52],r12
80002014:	ef 4b ff c8 	st.w	r7[-56],r11
80002018:	ef 4a ff c4 	st.w	r7[-60],r10
8000201c:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002020:	e0 48 00 40 	cp.w	r8,64
80002024:	c0 91       	brne	80002036 <hmac_sha256_init+0x2e>
80002026:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000202a:	ef 48 ff f8 	st.w	r7[-8],r8
8000202e:	34 08       	mov	r8,64
80002030:	ef 48 ff f4 	st.w	r7[-12],r8
80002034:	c4 28       	rjmp	800020b8 <hmac_sha256_init+0xb0>
80002036:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000203a:	e0 48 00 40 	cp.w	r8,64
8000203e:	e0 88 00 13 	brls	80002064 <hmac_sha256_init+0x5c>
80002042:	32 08       	mov	r8,32
80002044:	ef 48 ff f4 	st.w	r7[-12],r8
80002048:	ee c8 00 30 	sub	r8,r7,48
8000204c:	10 9a       	mov	r10,r8
8000204e:	ee fb ff c4 	ld.w	r11,r7[-60]
80002052:	ee fc ff c8 	ld.w	r12,r7[-56]
80002056:	f0 1f 00 54 	mcall	800021a4 <hmac_sha256_init+0x19c>
8000205a:	ee c8 00 30 	sub	r8,r7,48
8000205e:	ef 48 ff f8 	st.w	r7[-8],r8
80002062:	c0 98       	rjmp	80002074 <hmac_sha256_init+0x6c>
80002064:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002068:	ef 48 ff f8 	st.w	r7[-8],r8
8000206c:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002070:	ef 48 ff f4 	st.w	r7[-12],r8
80002074:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002078:	f0 08 11 40 	rsub	r8,r8,64
8000207c:	ef 48 ff f0 	st.w	r7[-16],r8
80002080:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002084:	f0 c9 fd 60 	sub	r9,r8,-672
80002088:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000208c:	f2 08 00 08 	add	r8,r9,r8
80002090:	ee fa ff f0 	ld.w	r10,r7[-16]
80002094:	33 6b       	mov	r11,54
80002096:	10 9c       	mov	r12,r8
80002098:	f0 1f 00 44 	mcall	800021a8 <hmac_sha256_init+0x1a0>
8000209c:	ee f8 ff cc 	ld.w	r8,r7[-52]
800020a0:	f0 c9 fd 20 	sub	r9,r8,-736
800020a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800020a8:	f2 08 00 08 	add	r8,r9,r8
800020ac:	ee fa ff f0 	ld.w	r10,r7[-16]
800020b0:	35 cb       	mov	r11,92
800020b2:	10 9c       	mov	r12,r8
800020b4:	f0 1f 00 3d 	mcall	800021a8 <hmac_sha256_init+0x1a0>
800020b8:	30 08       	mov	r8,0
800020ba:	ef 48 ff fc 	st.w	r7[-4],r8
800020be:	c2 a8       	rjmp	80002112 <hmac_sha256_init+0x10a>
800020c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020c8:	ee fa ff f8 	ld.w	r10,r7[-8]
800020cc:	f4 08 00 08 	add	r8,r10,r8
800020d0:	11 88       	ld.ub	r8,r8[0x0]
800020d2:	ec 18 00 36 	eorl	r8,0x36
800020d6:	5c 58       	castu.b	r8
800020d8:	ee fa ff cc 	ld.w	r10,r7[-52]
800020dc:	f4 09 00 09 	add	r9,r10,r9
800020e0:	f3 68 02 a0 	st.b	r9[672],r8
800020e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020ec:	ee fa ff f8 	ld.w	r10,r7[-8]
800020f0:	f4 08 00 08 	add	r8,r10,r8
800020f4:	11 88       	ld.ub	r8,r8[0x0]
800020f6:	ec 18 00 5c 	eorl	r8,0x5c
800020fa:	5c 58       	castu.b	r8
800020fc:	ee fa ff cc 	ld.w	r10,r7[-52]
80002100:	f4 09 00 09 	add	r9,r10,r9
80002104:	f3 68 02 e0 	st.b	r9[736],r8
80002108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000210c:	2f f8       	sub	r8,-1
8000210e:	ef 48 ff fc 	st.w	r7[-4],r8
80002112:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000211a:	10 39       	cp.w	r9,r8
8000211c:	fe 99 ff d2 	brgt	800020c0 <hmac_sha256_init+0xb8>
80002120:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002124:	10 9c       	mov	r12,r8
80002126:	f0 1f 00 22 	mcall	800021ac <hmac_sha256_init+0x1a4>
8000212a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000212e:	f0 c9 fd 60 	sub	r9,r8,-672
80002132:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002136:	34 0a       	mov	r10,64
80002138:	12 9b       	mov	r11,r9
8000213a:	10 9c       	mov	r12,r8
8000213c:	f0 1f 00 1d 	mcall	800021b0 <hmac_sha256_init+0x1a8>
80002140:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002144:	f0 c8 ff 58 	sub	r8,r8,-168
80002148:	10 9c       	mov	r12,r8
8000214a:	f0 1f 00 19 	mcall	800021ac <hmac_sha256_init+0x1a4>
8000214e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002152:	f0 c9 fd 20 	sub	r9,r8,-736
80002156:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000215a:	f0 c8 ff 58 	sub	r8,r8,-168
8000215e:	34 0a       	mov	r10,64
80002160:	12 9b       	mov	r11,r9
80002162:	10 9c       	mov	r12,r8
80002164:	f0 1f 00 13 	mcall	800021b0 <hmac_sha256_init+0x1a8>
80002168:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000216c:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002170:	f0 c8 fe b0 	sub	r8,r8,-336
80002174:	e0 6a 00 a8 	mov	r10,168
80002178:	12 9b       	mov	r11,r9
8000217a:	10 9c       	mov	r12,r8
8000217c:	f0 1f 00 0e 	mcall	800021b4 <hmac_sha256_init+0x1ac>
80002180:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002184:	f0 c9 ff 58 	sub	r9,r8,-168
80002188:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000218c:	f0 c8 fe 08 	sub	r8,r8,-504
80002190:	e0 6a 00 a8 	mov	r10,168
80002194:	12 9b       	mov	r11,r9
80002196:	10 9c       	mov	r12,r8
80002198:	f0 1f 00 07 	mcall	800021b4 <hmac_sha256_init+0x1ac>
8000219c:	2f 1d       	sub	sp,-60
8000219e:	e3 cd 80 80 	ldm	sp++,r7,pc
800021a2:	00 00       	add	r0,r0
800021a4:	80 00       	ld.sh	r0,r0[0x0]
800021a6:	26 44       	sub	r4,100
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	e8 e2 80 00 	ld.d	r2,r4[-32768]
800021ae:	26 98       	sub	r8,105
800021b0:	80 00       	ld.sh	r0,r0[0x0]
800021b2:	26 f4       	sub	r4,111
800021b4:	80 00       	ld.sh	r0,r0[0x0]
800021b6:	e7 9a       	*unknown*

800021b8 <hmac_sha256_update>:
800021b8:	eb cd 40 80 	pushm	r7,lr
800021bc:	1a 97       	mov	r7,sp
800021be:	20 3d       	sub	sp,12
800021c0:	ef 4c ff fc 	st.w	r7[-4],r12
800021c4:	ef 4b ff f8 	st.w	r7[-8],r11
800021c8:	ef 4a ff f4 	st.w	r7[-12],r10
800021cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d0:	ee fa ff f4 	ld.w	r10,r7[-12]
800021d4:	ee fb ff f8 	ld.w	r11,r7[-8]
800021d8:	10 9c       	mov	r12,r8
800021da:	f0 1f 00 03 	mcall	800021e4 <hmac_sha256_update+0x2c>
800021de:	2f dd       	sub	sp,-12
800021e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	26 f4       	sub	r4,111

800021e8 <hmac_sha256_final>:
800021e8:	eb cd 40 80 	pushm	r7,lr
800021ec:	1a 97       	mov	r7,sp
800021ee:	21 3d       	sub	sp,76
800021f0:	ef 4c ff bc 	st.w	r7[-68],r12
800021f4:	ef 4b ff b8 	st.w	r7[-72],r11
800021f8:	ef 4a ff b4 	st.w	r7[-76],r10
800021fc:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002200:	ee c9 00 20 	sub	r9,r7,32
80002204:	12 9b       	mov	r11,r9
80002206:	10 9c       	mov	r12,r8
80002208:	f0 1f 00 12 	mcall	80002250 <hmac_sha256_final+0x68>
8000220c:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002210:	f0 c8 ff 58 	sub	r8,r8,-168
80002214:	ee c9 00 20 	sub	r9,r7,32
80002218:	32 0a       	mov	r10,32
8000221a:	12 9b       	mov	r11,r9
8000221c:	10 9c       	mov	r12,r8
8000221e:	f0 1f 00 0e 	mcall	80002254 <hmac_sha256_final+0x6c>
80002222:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002226:	f0 c8 ff 58 	sub	r8,r8,-168
8000222a:	ee c9 00 40 	sub	r9,r7,64
8000222e:	12 9b       	mov	r11,r9
80002230:	10 9c       	mov	r12,r8
80002232:	f0 1f 00 08 	mcall	80002250 <hmac_sha256_final+0x68>
80002236:	ee c8 00 40 	sub	r8,r7,64
8000223a:	ee fa ff b4 	ld.w	r10,r7[-76]
8000223e:	10 9b       	mov	r11,r8
80002240:	ee fc ff b8 	ld.w	r12,r7[-72]
80002244:	f0 1f 00 05 	mcall	80002258 <hmac_sha256_final+0x70>
80002248:	2e dd       	sub	sp,-76
8000224a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000224e:	00 00       	add	r0,r0
80002250:	80 00       	ld.sh	r0,r0[0x0]
80002252:	28 1c       	sub	r12,-127
80002254:	80 00       	ld.sh	r0,r0[0x0]
80002256:	26 f4       	sub	r4,111
80002258:	80 00       	ld.sh	r0,r0[0x0]
8000225a:	e7 9a       	*unknown*

8000225c <hmac_sha256>:
8000225c:	eb cd 40 c0 	pushm	r6-r7,lr
80002260:	1a 97       	mov	r7,sp
80002262:	fa cd 03 34 	sub	sp,sp,820
80002266:	ee c6 ff f4 	sub	r6,r7,-12
8000226a:	ef 4c fc dc 	st.w	r7[-804],r12
8000226e:	ef 4b fc d8 	st.w	r7[-808],r11
80002272:	ef 4a fc d4 	st.w	r7[-812],r10
80002276:	ef 49 fc d0 	st.w	r7[-816],r9
8000227a:	ef 48 fc cc 	st.w	r7[-820],r8
8000227e:	ee c8 03 20 	sub	r8,r7,800
80002282:	ee fa fc d8 	ld.w	r10,r7[-808]
80002286:	ee fb fc dc 	ld.w	r11,r7[-804]
8000228a:	10 9c       	mov	r12,r8
8000228c:	f0 1f 00 0c 	mcall	800022bc <hmac_sha256+0x60>
80002290:	ee c8 03 20 	sub	r8,r7,800
80002294:	ee fa fc d0 	ld.w	r10,r7[-816]
80002298:	ee fb fc d4 	ld.w	r11,r7[-812]
8000229c:	10 9c       	mov	r12,r8
8000229e:	f0 1f 00 09 	mcall	800022c0 <hmac_sha256+0x64>
800022a2:	ee c8 03 20 	sub	r8,r7,800
800022a6:	6c 0a       	ld.w	r10,r6[0x0]
800022a8:	ee fb fc cc 	ld.w	r11,r7[-820]
800022ac:	10 9c       	mov	r12,r8
800022ae:	f0 1f 00 06 	mcall	800022c4 <hmac_sha256+0x68>
800022b2:	fe 3d fc cc 	sub	sp,-820
800022b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022ba:	00 00       	add	r0,r0
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	20 08       	sub	r8,0
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	21 b8       	sub	r8,27
800022c4:	80 00       	ld.sh	r0,r0[0x0]
800022c6:	21 e8       	sub	r8,30

800022c8 <sha256_transf>:
800022c8:	eb cd 40 80 	pushm	r7,lr
800022cc:	1a 97       	mov	r7,sp
800022ce:	fa cd 01 40 	sub	sp,sp,320
800022d2:	ef 4c fe c8 	st.w	r7[-312],r12
800022d6:	ef 4b fe c4 	st.w	r7[-316],r11
800022da:	ef 4a fe c0 	st.w	r7[-320],r10
800022de:	30 08       	mov	r8,0
800022e0:	ef 48 ff f8 	st.w	r7[-8],r8
800022e4:	ca 49       	rjmp	8000262c <sha256_transf+0x364>
800022e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022ea:	a7 68       	lsl	r8,0x6
800022ec:	ee f9 fe c4 	ld.w	r9,r7[-316]
800022f0:	f2 08 00 08 	add	r8,r9,r8
800022f4:	ef 48 ff f4 	st.w	r7[-12],r8
800022f8:	30 08       	mov	r8,0
800022fa:	ef 48 ff fc 	st.w	r7[-4],r8
800022fe:	c3 98       	rjmp	80002370 <sha256_transf+0xa8>
80002300:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002304:	f0 09 15 02 	lsl	r9,r8,0x2
80002308:	ee c8 01 14 	sub	r8,r7,276
8000230c:	12 08       	add	r8,r9
8000230e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002312:	a3 69       	lsl	r9,0x2
80002314:	2f d9       	sub	r9,-3
80002316:	ee fa ff f4 	ld.w	r10,r7[-12]
8000231a:	f4 09 00 09 	add	r9,r10,r9
8000231e:	13 89       	ld.ub	r9,r9[0x0]
80002320:	12 9a       	mov	r10,r9
80002322:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002326:	a3 69       	lsl	r9,0x2
80002328:	2f e9       	sub	r9,-2
8000232a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000232e:	f6 09 00 09 	add	r9,r11,r9
80002332:	13 89       	ld.ub	r9,r9[0x0]
80002334:	a9 69       	lsl	r9,0x8
80002336:	12 4a       	or	r10,r9
80002338:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000233c:	a3 69       	lsl	r9,0x2
8000233e:	2f f9       	sub	r9,-1
80002340:	ee fb ff f4 	ld.w	r11,r7[-12]
80002344:	f6 09 00 09 	add	r9,r11,r9
80002348:	13 89       	ld.ub	r9,r9[0x0]
8000234a:	b1 69       	lsl	r9,0x10
8000234c:	12 4a       	or	r10,r9
8000234e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002352:	a3 69       	lsl	r9,0x2
80002354:	ee fb ff f4 	ld.w	r11,r7[-12]
80002358:	f6 09 00 09 	add	r9,r11,r9
8000235c:	13 89       	ld.ub	r9,r9[0x0]
8000235e:	b9 69       	lsl	r9,0x18
80002360:	f5 e9 10 09 	or	r9,r10,r9
80002364:	91 09       	st.w	r8[0x0],r9
80002366:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000236a:	2f f8       	sub	r8,-1
8000236c:	ef 48 ff fc 	st.w	r7[-4],r8
80002370:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002374:	58 f8       	cp.w	r8,15
80002376:	fe 9a ff c5 	brle	80002300 <sha256_transf+0x38>
8000237a:	31 08       	mov	r8,16
8000237c:	ef 48 ff fc 	st.w	r7[-4],r8
80002380:	c6 c8       	rjmp	80002458 <sha256_transf+0x190>
80002382:	ee fa ff fc 	ld.w	r10,r7[-4]
80002386:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000238a:	20 28       	sub	r8,2
8000238c:	a3 68       	lsl	r8,0x2
8000238e:	ee 08 00 08 	add	r8,r7,r8
80002392:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002396:	f0 0b 16 11 	lsr	r11,r8,0x11
8000239a:	f0 09 15 0f 	lsl	r9,r8,0xf
8000239e:	16 49       	or	r9,r11
800023a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023a4:	20 28       	sub	r8,2
800023a6:	a3 68       	lsl	r8,0x2
800023a8:	ee 08 00 08 	add	r8,r7,r8
800023ac:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023b0:	f0 0b 16 13 	lsr	r11,r8,0x13
800023b4:	ad 78       	lsl	r8,0xd
800023b6:	16 48       	or	r8,r11
800023b8:	10 59       	eor	r9,r8
800023ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023be:	20 28       	sub	r8,2
800023c0:	a3 68       	lsl	r8,0x2
800023c2:	ee 08 00 08 	add	r8,r7,r8
800023c6:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023ca:	ab 88       	lsr	r8,0xa
800023cc:	10 59       	eor	r9,r8
800023ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023d2:	20 78       	sub	r8,7
800023d4:	a3 68       	lsl	r8,0x2
800023d6:	ee 08 00 08 	add	r8,r7,r8
800023da:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023de:	f2 08 00 0b 	add	r11,r9,r8
800023e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023e6:	20 f8       	sub	r8,15
800023e8:	a3 68       	lsl	r8,0x2
800023ea:	ee 08 00 08 	add	r8,r7,r8
800023ee:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023f2:	f0 0c 16 07 	lsr	r12,r8,0x7
800023f6:	f0 09 15 19 	lsl	r9,r8,0x19
800023fa:	18 49       	or	r9,r12
800023fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002400:	20 f8       	sub	r8,15
80002402:	a3 68       	lsl	r8,0x2
80002404:	ee 08 00 08 	add	r8,r7,r8
80002408:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000240c:	f0 0c 16 12 	lsr	r12,r8,0x12
80002410:	af 68       	lsl	r8,0xe
80002412:	18 48       	or	r8,r12
80002414:	10 59       	eor	r9,r8
80002416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000241a:	20 f8       	sub	r8,15
8000241c:	a3 68       	lsl	r8,0x2
8000241e:	ee 08 00 08 	add	r8,r7,r8
80002422:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002426:	a3 98       	lsr	r8,0x3
80002428:	f3 e8 20 08 	eor	r8,r9,r8
8000242c:	f6 08 00 09 	add	r9,r11,r8
80002430:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002434:	21 08       	sub	r8,16
80002436:	a3 68       	lsl	r8,0x2
80002438:	ee 08 00 08 	add	r8,r7,r8
8000243c:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002440:	10 09       	add	r9,r8
80002442:	f4 08 15 02 	lsl	r8,r10,0x2
80002446:	ee 08 00 08 	add	r8,r7,r8
8000244a:	f1 49 fe ec 	st.w	r8[-276],r9
8000244e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002452:	2f f8       	sub	r8,-1
80002454:	ef 48 ff fc 	st.w	r7[-4],r8
80002458:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000245c:	e0 48 00 3f 	cp.w	r8,63
80002460:	fe 9a ff 91 	brle	80002382 <sha256_transf+0xba>
80002464:	30 08       	mov	r8,0
80002466:	ef 48 ff fc 	st.w	r7[-4],r8
8000246a:	c1 48       	rjmp	80002492 <sha256_transf+0x1ca>
8000246c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002470:	ee fa ff fc 	ld.w	r10,r7[-4]
80002474:	ee f9 fe c8 	ld.w	r9,r7[-312]
80002478:	2d ea       	sub	r10,-34
8000247a:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000247e:	a3 68       	lsl	r8,0x2
80002480:	ee 08 00 08 	add	r8,r7,r8
80002484:	f1 49 fe cc 	st.w	r8[-308],r9
80002488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000248c:	2f f8       	sub	r8,-1
8000248e:	ef 48 ff fc 	st.w	r7[-4],r8
80002492:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002496:	58 78       	cp.w	r8,7
80002498:	fe 9a ff ea 	brle	8000246c <sha256_transf+0x1a4>
8000249c:	30 08       	mov	r8,0
8000249e:	ef 48 ff fc 	st.w	r7[-4],r8
800024a2:	c9 68       	rjmp	800025ce <sha256_transf+0x306>
800024a4:	ee fa fe e8 	ld.w	r10,r7[-280]
800024a8:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024ac:	f0 0b 16 06 	lsr	r11,r8,0x6
800024b0:	f0 09 15 1a 	lsl	r9,r8,0x1a
800024b4:	16 49       	or	r9,r11
800024b6:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024ba:	f0 0b 16 0b 	lsr	r11,r8,0xb
800024be:	b5 78       	lsl	r8,0x15
800024c0:	16 48       	or	r8,r11
800024c2:	10 59       	eor	r9,r8
800024c4:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024c8:	f0 0b 16 19 	lsr	r11,r8,0x19
800024cc:	a7 78       	lsl	r8,0x7
800024ce:	16 48       	or	r8,r11
800024d0:	f3 e8 20 08 	eor	r8,r9,r8
800024d4:	f4 08 00 09 	add	r9,r10,r8
800024d8:	ee fa fe dc 	ld.w	r10,r7[-292]
800024dc:	ee f8 fe e0 	ld.w	r8,r7[-288]
800024e0:	10 6a       	and	r10,r8
800024e2:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024e6:	f0 0b 11 ff 	rsub	r11,r8,-1
800024ea:	ee f8 fe e4 	ld.w	r8,r7[-284]
800024ee:	f7 e8 00 08 	and	r8,r11,r8
800024f2:	f5 e8 20 08 	eor	r8,r10,r8
800024f6:	10 09       	add	r9,r8
800024f8:	ee fa ff fc 	ld.w	r10,r7[-4]
800024fc:	4d 18       	lddpc	r8,80002640 <sha256_transf+0x378>
800024fe:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002502:	10 09       	add	r9,r8
80002504:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002508:	a3 68       	lsl	r8,0x2
8000250a:	ee 08 00 08 	add	r8,r7,r8
8000250e:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002512:	f2 08 00 08 	add	r8,r9,r8
80002516:	ef 48 ff ec 	st.w	r7[-20],r8
8000251a:	ee f8 fe cc 	ld.w	r8,r7[-308]
8000251e:	f0 0a 16 02 	lsr	r10,r8,0x2
80002522:	f0 09 15 1e 	lsl	r9,r8,0x1e
80002526:	14 49       	or	r9,r10
80002528:	ee f8 fe cc 	ld.w	r8,r7[-308]
8000252c:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002530:	b3 78       	lsl	r8,0x13
80002532:	14 48       	or	r8,r10
80002534:	10 59       	eor	r9,r8
80002536:	ee f8 fe cc 	ld.w	r8,r7[-308]
8000253a:	f0 0a 16 16 	lsr	r10,r8,0x16
8000253e:	ab 68       	lsl	r8,0xa
80002540:	14 48       	or	r8,r10
80002542:	10 59       	eor	r9,r8
80002544:	ee fa fe cc 	ld.w	r10,r7[-308]
80002548:	ee f8 fe d0 	ld.w	r8,r7[-304]
8000254c:	10 6a       	and	r10,r8
8000254e:	ee fb fe cc 	ld.w	r11,r7[-308]
80002552:	ee f8 fe d4 	ld.w	r8,r7[-300]
80002556:	f7 e8 00 08 	and	r8,r11,r8
8000255a:	10 5a       	eor	r10,r8
8000255c:	ee fb fe d0 	ld.w	r11,r7[-304]
80002560:	ee f8 fe d4 	ld.w	r8,r7[-300]
80002564:	f7 e8 00 08 	and	r8,r11,r8
80002568:	f5 e8 20 08 	eor	r8,r10,r8
8000256c:	f2 08 00 08 	add	r8,r9,r8
80002570:	ef 48 ff f0 	st.w	r7[-16],r8
80002574:	ee f8 fe e4 	ld.w	r8,r7[-284]
80002578:	ef 48 fe e8 	st.w	r7[-280],r8
8000257c:	ee f8 fe e0 	ld.w	r8,r7[-288]
80002580:	ef 48 fe e4 	st.w	r7[-284],r8
80002584:	ee f8 fe dc 	ld.w	r8,r7[-292]
80002588:	ef 48 fe e0 	st.w	r7[-288],r8
8000258c:	ee f9 fe d8 	ld.w	r9,r7[-296]
80002590:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002594:	f2 08 00 08 	add	r8,r9,r8
80002598:	ef 48 fe dc 	st.w	r7[-292],r8
8000259c:	ee f8 fe d4 	ld.w	r8,r7[-300]
800025a0:	ef 48 fe d8 	st.w	r7[-296],r8
800025a4:	ee f8 fe d0 	ld.w	r8,r7[-304]
800025a8:	ef 48 fe d4 	st.w	r7[-300],r8
800025ac:	ee f8 fe cc 	ld.w	r8,r7[-308]
800025b0:	ef 48 fe d0 	st.w	r7[-304],r8
800025b4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800025b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800025bc:	f2 08 00 08 	add	r8,r9,r8
800025c0:	ef 48 fe cc 	st.w	r7[-308],r8
800025c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025c8:	2f f8       	sub	r8,-1
800025ca:	ef 48 ff fc 	st.w	r7[-4],r8
800025ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025d2:	e0 48 00 3f 	cp.w	r8,63
800025d6:	fe 9a ff 67 	brle	800024a4 <sha256_transf+0x1dc>
800025da:	30 08       	mov	r8,0
800025dc:	ef 48 ff fc 	st.w	r7[-4],r8
800025e0:	c1 c8       	rjmp	80002618 <sha256_transf+0x350>
800025e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800025e6:	ee fa ff fc 	ld.w	r10,r7[-4]
800025ea:	ee f8 fe c8 	ld.w	r8,r7[-312]
800025ee:	2d ea       	sub	r10,-34
800025f0:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800025f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025f8:	a3 68       	lsl	r8,0x2
800025fa:	ee 08 00 08 	add	r8,r7,r8
800025fe:	f0 f8 fe cc 	ld.w	r8,r8[-308]
80002602:	10 0a       	add	r10,r8
80002604:	ee f8 fe c8 	ld.w	r8,r7[-312]
80002608:	2d e9       	sub	r9,-34
8000260a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000260e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002612:	2f f8       	sub	r8,-1
80002614:	ef 48 ff fc 	st.w	r7[-4],r8
80002618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000261c:	58 78       	cp.w	r8,7
8000261e:	fe 9a ff e2 	brle	800025e2 <sha256_transf+0x31a>
80002622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002626:	2f f8       	sub	r8,-1
80002628:	ef 48 ff f8 	st.w	r7[-8],r8
8000262c:	ee f9 fe c0 	ld.w	r9,r7[-320]
80002630:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002634:	10 39       	cp.w	r9,r8
80002636:	fe 99 fe 58 	brgt	800022e6 <sha256_transf+0x1e>
8000263a:	2b 0d       	sub	sp,-320
8000263c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002640:	00 00       	add	r0,r0
80002642:	00 28       	rsub	r8,r0

80002644 <sha256>:
80002644:	eb cd 40 80 	pushm	r7,lr
80002648:	1a 97       	mov	r7,sp
8000264a:	fa cd 00 b4 	sub	sp,sp,180
8000264e:	ef 4c ff 54 	st.w	r7[-172],r12
80002652:	ef 4b ff 50 	st.w	r7[-176],r11
80002656:	ef 4a ff 4c 	st.w	r7[-180],r10
8000265a:	ee c8 00 a8 	sub	r8,r7,168
8000265e:	10 9c       	mov	r12,r8
80002660:	f0 1f 00 0b 	mcall	8000268c <sha256+0x48>
80002664:	ee c8 00 a8 	sub	r8,r7,168
80002668:	ee fa ff 50 	ld.w	r10,r7[-176]
8000266c:	ee fb ff 54 	ld.w	r11,r7[-172]
80002670:	10 9c       	mov	r12,r8
80002672:	f0 1f 00 08 	mcall	80002690 <sha256+0x4c>
80002676:	ee c8 00 a8 	sub	r8,r7,168
8000267a:	ee fb ff 4c 	ld.w	r11,r7[-180]
8000267e:	10 9c       	mov	r12,r8
80002680:	f0 1f 00 05 	mcall	80002694 <sha256+0x50>
80002684:	2d 3d       	sub	sp,-180
80002686:	e3 cd 80 80 	ldm	sp++,r7,pc
8000268a:	00 00       	add	r0,r0
8000268c:	80 00       	ld.sh	r0,r0[0x0]
8000268e:	26 98       	sub	r8,105
80002690:	80 00       	ld.sh	r0,r0[0x0]
80002692:	26 f4       	sub	r4,111
80002694:	80 00       	ld.sh	r0,r0[0x0]
80002696:	28 1c       	sub	r12,-127

80002698 <sha256_init>:
80002698:	eb cd 40 80 	pushm	r7,lr
8000269c:	1a 97       	mov	r7,sp
8000269e:	20 2d       	sub	sp,8
800026a0:	ef 4c ff f8 	st.w	r7[-8],r12
800026a4:	30 08       	mov	r8,0
800026a6:	ef 48 ff fc 	st.w	r7[-4],r8
800026aa:	c1 28       	rjmp	800026ce <sha256_init+0x36>
800026ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800026b0:	ee fa ff fc 	ld.w	r10,r7[-4]
800026b4:	48 f8       	lddpc	r8,800026f0 <sha256_init+0x58>
800026b6:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800026ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026be:	2d e9       	sub	r9,-34
800026c0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800026c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026c8:	2f f8       	sub	r8,-1
800026ca:	ef 48 ff fc 	st.w	r7[-4],r8
800026ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026d2:	58 78       	cp.w	r8,7
800026d4:	fe 9a ff ec 	brle	800026ac <sha256_init+0x14>
800026d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026dc:	30 09       	mov	r9,0
800026de:	91 19       	st.w	r8[0x4],r9
800026e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026e4:	30 09       	mov	r9,0
800026e6:	91 09       	st.w	r8[0x0],r9
800026e8:	2f ed       	sub	sp,-8
800026ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800026ee:	00 00       	add	r0,r0
800026f0:	00 00       	add	r0,r0
800026f2:	00 08       	add	r8,r0

800026f4 <sha256_update>:
800026f4:	eb cd 40 80 	pushm	r7,lr
800026f8:	1a 97       	mov	r7,sp
800026fa:	20 8d       	sub	sp,32
800026fc:	ef 4c ff e8 	st.w	r7[-24],r12
80002700:	ef 4b ff e4 	st.w	r7[-28],r11
80002704:	ef 4a ff e0 	st.w	r7[-32],r10
80002708:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000270c:	70 18       	ld.w	r8,r8[0x4]
8000270e:	f0 08 11 40 	rsub	r8,r8,64
80002712:	ef 48 ff f8 	st.w	r7[-8],r8
80002716:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000271a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000271e:	ee fa ff f8 	ld.w	r10,r7[-8]
80002722:	10 3a       	cp.w	r10,r8
80002724:	f2 08 17 80 	movls	r8,r9
80002728:	ef 48 ff f4 	st.w	r7[-12],r8
8000272c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002730:	f0 c9 ff f8 	sub	r9,r8,-8
80002734:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002738:	70 18       	ld.w	r8,r8[0x4]
8000273a:	f2 08 00 08 	add	r8,r9,r8
8000273e:	ee fa ff f4 	ld.w	r10,r7[-12]
80002742:	ee fb ff e4 	ld.w	r11,r7[-28]
80002746:	10 9c       	mov	r12,r8
80002748:	f0 1f 00 33 	mcall	80002814 <sha256_update+0x120>
8000274c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002750:	70 19       	ld.w	r9,r8[0x4]
80002752:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002756:	f2 08 00 08 	add	r8,r9,r8
8000275a:	e0 48 00 3f 	cp.w	r8,63
8000275e:	e0 8b 00 0c 	brhi	80002776 <sha256_update+0x82>
80002762:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002766:	70 19       	ld.w	r9,r8[0x4]
80002768:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000276c:	10 09       	add	r9,r8
8000276e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002772:	91 19       	st.w	r8[0x4],r9
80002774:	c4 c8       	rjmp	8000280c <sha256_update+0x118>
80002776:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000277a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000277e:	f2 08 01 08 	sub	r8,r9,r8
80002782:	ef 48 ff f0 	st.w	r7[-16],r8
80002786:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000278a:	a7 88       	lsr	r8,0x6
8000278c:	ef 48 ff ec 	st.w	r7[-20],r8
80002790:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002794:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002798:	f2 08 00 08 	add	r8,r9,r8
8000279c:	ef 48 ff fc 	st.w	r7[-4],r8
800027a0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027a4:	2f 88       	sub	r8,-8
800027a6:	30 1a       	mov	r10,1
800027a8:	10 9b       	mov	r11,r8
800027aa:	ee fc ff e8 	ld.w	r12,r7[-24]
800027ae:	f0 1f 00 1b 	mcall	80002818 <sha256_update+0x124>
800027b2:	ee fa ff ec 	ld.w	r10,r7[-20]
800027b6:	ee fb ff fc 	ld.w	r11,r7[-4]
800027ba:	ee fc ff e8 	ld.w	r12,r7[-24]
800027be:	f0 1f 00 17 	mcall	80002818 <sha256_update+0x124>
800027c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027c6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800027ca:	ef 48 ff f4 	st.w	r7[-12],r8
800027ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800027d2:	a7 68       	lsl	r8,0x6
800027d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027d8:	10 09       	add	r9,r8
800027da:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027de:	2f 88       	sub	r8,-8
800027e0:	ee fa ff f4 	ld.w	r10,r7[-12]
800027e4:	12 9b       	mov	r11,r9
800027e6:	10 9c       	mov	r12,r8
800027e8:	f0 1f 00 0b 	mcall	80002814 <sha256_update+0x120>
800027ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800027f4:	91 19       	st.w	r8[0x4],r9
800027f6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027fa:	70 09       	ld.w	r9,r8[0x0]
800027fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002800:	2f f8       	sub	r8,-1
80002802:	a7 68       	lsl	r8,0x6
80002804:	10 09       	add	r9,r8
80002806:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000280a:	91 09       	st.w	r8[0x0],r9
8000280c:	2f 8d       	sub	sp,-32
8000280e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002812:	00 00       	add	r0,r0
80002814:	80 00       	ld.sh	r0,r0[0x0]
80002816:	e7 9a       	*unknown*
80002818:	80 00       	ld.sh	r0,r0[0x0]
8000281a:	22 c8       	sub	r8,44

8000281c <sha256_final>:
8000281c:	eb cd 40 80 	pushm	r7,lr
80002820:	1a 97       	mov	r7,sp
80002822:	20 6d       	sub	sp,24
80002824:	ef 4c ff ec 	st.w	r7[-20],r12
80002828:	ef 4b ff e8 	st.w	r7[-24],r11
8000282c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002830:	70 18       	ld.w	r8,r8[0x4]
80002832:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002836:	e0 48 00 37 	cp.w	r8,55
8000283a:	e0 88 00 04 	brls	80002842 <sha256_final+0x26>
8000283e:	30 28       	mov	r8,2
80002840:	c0 28       	rjmp	80002844 <sha256_final+0x28>
80002842:	30 18       	mov	r8,1
80002844:	ef 48 ff f0 	st.w	r7[-16],r8
80002848:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000284c:	70 09       	ld.w	r9,r8[0x0]
8000284e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002852:	70 18       	ld.w	r8,r8[0x4]
80002854:	f2 08 00 08 	add	r8,r9,r8
80002858:	a3 78       	lsl	r8,0x3
8000285a:	ef 48 ff f8 	st.w	r7[-8],r8
8000285e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002862:	a7 68       	lsl	r8,0x6
80002864:	ef 48 ff f4 	st.w	r7[-12],r8
80002868:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000286c:	70 18       	ld.w	r8,r8[0x4]
8000286e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002872:	10 19       	sub	r9,r8
80002874:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002878:	f0 ca ff f8 	sub	r10,r8,-8
8000287c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002880:	70 18       	ld.w	r8,r8[0x4]
80002882:	f4 08 00 08 	add	r8,r10,r8
80002886:	12 9a       	mov	r10,r9
80002888:	30 0b       	mov	r11,0
8000288a:	10 9c       	mov	r12,r8
8000288c:	f0 1f 00 4e 	mcall	800029c4 <sha256_final+0x1a8>
80002890:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002894:	70 18       	ld.w	r8,r8[0x4]
80002896:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000289a:	10 09       	add	r9,r8
8000289c:	38 08       	mov	r8,-128
8000289e:	f3 68 00 08 	st.b	r9[8],r8
800028a2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028a6:	f0 c9 ff f8 	sub	r9,r8,-8
800028aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028ae:	20 18       	sub	r8,1
800028b0:	10 09       	add	r9,r8
800028b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028b6:	5c 58       	castu.b	r8
800028b8:	b2 88       	st.b	r9[0x0],r8
800028ba:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028be:	f0 c9 ff f8 	sub	r9,r8,-8
800028c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028c6:	20 28       	sub	r8,2
800028c8:	10 09       	add	r9,r8
800028ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028ce:	a9 88       	lsr	r8,0x8
800028d0:	5c 58       	castu.b	r8
800028d2:	b2 88       	st.b	r9[0x0],r8
800028d4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028d8:	f0 c9 ff f8 	sub	r9,r8,-8
800028dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028e0:	20 38       	sub	r8,3
800028e2:	10 09       	add	r9,r8
800028e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028e8:	b1 88       	lsr	r8,0x10
800028ea:	5c 58       	castu.b	r8
800028ec:	b2 88       	st.b	r9[0x0],r8
800028ee:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028f2:	f0 c9 ff f8 	sub	r9,r8,-8
800028f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028fa:	20 48       	sub	r8,4
800028fc:	10 09       	add	r9,r8
800028fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002902:	b9 88       	lsr	r8,0x18
80002904:	5c 58       	castu.b	r8
80002906:	b2 88       	st.b	r9[0x0],r8
80002908:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000290c:	2f 88       	sub	r8,-8
8000290e:	ee fa ff f0 	ld.w	r10,r7[-16]
80002912:	10 9b       	mov	r11,r8
80002914:	ee fc ff ec 	ld.w	r12,r7[-20]
80002918:	f0 1f 00 2c 	mcall	800029c8 <sha256_final+0x1ac>
8000291c:	30 08       	mov	r8,0
8000291e:	ef 48 ff fc 	st.w	r7[-4],r8
80002922:	c4 88       	rjmp	800029b2 <sha256_final+0x196>
80002924:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002928:	a3 68       	lsl	r8,0x2
8000292a:	2f d8       	sub	r8,-3
8000292c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002930:	10 09       	add	r9,r8
80002932:	ee fa ff fc 	ld.w	r10,r7[-4]
80002936:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000293a:	2d ea       	sub	r10,-34
8000293c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002940:	5c 58       	castu.b	r8
80002942:	b2 88       	st.b	r9[0x0],r8
80002944:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002948:	a3 68       	lsl	r8,0x2
8000294a:	2f e8       	sub	r8,-2
8000294c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002950:	10 09       	add	r9,r8
80002952:	ee fa ff fc 	ld.w	r10,r7[-4]
80002956:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000295a:	2d ea       	sub	r10,-34
8000295c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002960:	a9 88       	lsr	r8,0x8
80002962:	5c 58       	castu.b	r8
80002964:	b2 88       	st.b	r9[0x0],r8
80002966:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000296a:	a3 68       	lsl	r8,0x2
8000296c:	2f f8       	sub	r8,-1
8000296e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002972:	10 09       	add	r9,r8
80002974:	ee fa ff fc 	ld.w	r10,r7[-4]
80002978:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000297c:	2d ea       	sub	r10,-34
8000297e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002982:	b1 88       	lsr	r8,0x10
80002984:	5c 58       	castu.b	r8
80002986:	b2 88       	st.b	r9[0x0],r8
80002988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000298c:	a3 68       	lsl	r8,0x2
8000298e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002992:	10 09       	add	r9,r8
80002994:	ee fa ff fc 	ld.w	r10,r7[-4]
80002998:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000299c:	2d ea       	sub	r10,-34
8000299e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800029a2:	b9 88       	lsr	r8,0x18
800029a4:	5c 58       	castu.b	r8
800029a6:	b2 88       	st.b	r9[0x0],r8
800029a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029ac:	2f f8       	sub	r8,-1
800029ae:	ef 48 ff fc 	st.w	r7[-4],r8
800029b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029b6:	58 78       	cp.w	r8,7
800029b8:	fe 9a ff b6 	brle	80002924 <sha256_final+0x108>
800029bc:	2f ad       	sub	sp,-24
800029be:	e3 cd 80 80 	ldm	sp++,r7,pc
800029c2:	00 00       	add	r0,r0
800029c4:	80 00       	ld.sh	r0,r0[0x0]
800029c6:	e8 e2 80 00 	ld.d	r2,r4[-32768]
800029ca:	22 c8       	sub	r8,44

800029cc <pbkdf2_func>:

volatile uint256_t var_Password;


void pbkdf2_func(uint8_t *password, uint8_t *derived_key)
{
800029cc:	eb cd 40 80 	pushm	r7,lr
800029d0:	1a 97       	mov	r7,sp
800029d2:	fa cd 00 98 	sub	sp,sp,152
800029d6:	ef 4c ff 6c 	st.w	r7[-148],r12
800029da:	ef 4b ff 68 	st.w	r7[-152],r11
	unsigned short int iteration_count;
	unsigned char mac[hLen];
	unsigned char Ubuffer[hLen+4] = {0};
800029de:	ee c8 00 50 	sub	r8,r7,80
800029e2:	30 0a       	mov	r10,0
800029e4:	30 0b       	mov	r11,0
800029e6:	f0 eb 00 00 	st.d	r8[0],r10
800029ea:	2f 88       	sub	r8,-8
800029ec:	30 0a       	mov	r10,0
800029ee:	30 0b       	mov	r11,0
800029f0:	f0 eb 00 00 	st.d	r8[0],r10
800029f4:	2f 88       	sub	r8,-8
800029f6:	30 0a       	mov	r10,0
800029f8:	30 0b       	mov	r11,0
800029fa:	f0 eb 00 00 	st.d	r8[0],r10
800029fe:	2f 88       	sub	r8,-8
80002a00:	30 0a       	mov	r10,0
80002a02:	30 0b       	mov	r11,0
80002a04:	f0 eb 00 00 	st.d	r8[0],r10
80002a08:	2f 88       	sub	r8,-8
80002a0a:	30 09       	mov	r9,0
80002a0c:	91 09       	st.w	r8[0x0],r9
80002a0e:	2f c8       	sub	r8,-4
	unsigned char Tbuffer[hLen] = {0};
80002a10:	ee c8 00 70 	sub	r8,r7,112
80002a14:	30 0a       	mov	r10,0
80002a16:	30 0b       	mov	r11,0
80002a18:	f0 eb 00 00 	st.d	r8[0],r10
80002a1c:	2f 88       	sub	r8,-8
80002a1e:	30 0a       	mov	r10,0
80002a20:	30 0b       	mov	r11,0
80002a22:	f0 eb 00 00 	st.d	r8[0],r10
80002a26:	2f 88       	sub	r8,-8
80002a28:	30 0a       	mov	r10,0
80002a2a:	30 0b       	mov	r11,0
80002a2c:	f0 eb 00 00 	st.d	r8[0],r10
80002a30:	2f 88       	sub	r8,-8
80002a32:	30 0a       	mov	r10,0
80002a34:	30 0b       	mov	r11,0
80002a36:	f0 eb 00 00 	st.d	r8[0],r10
80002a3a:	2f 88       	sub	r8,-8
	unsigned char Fbuffer[hLen] = {0};
80002a3c:	ee c8 00 90 	sub	r8,r7,144
80002a40:	30 0a       	mov	r10,0
80002a42:	30 0b       	mov	r11,0
80002a44:	f0 eb 00 00 	st.d	r8[0],r10
80002a48:	2f 88       	sub	r8,-8
80002a4a:	30 0a       	mov	r10,0
80002a4c:	30 0b       	mov	r11,0
80002a4e:	f0 eb 00 00 	st.d	r8[0],r10
80002a52:	2f 88       	sub	r8,-8
80002a54:	30 0a       	mov	r10,0
80002a56:	30 0b       	mov	r11,0
80002a58:	f0 eb 00 00 	st.d	r8[0],r10
80002a5c:	2f 88       	sub	r8,-8
80002a5e:	30 0a       	mov	r10,0
80002a60:	30 0b       	mov	r11,0
80002a62:	f0 eb 00 00 	st.d	r8[0],r10
80002a66:	2f 88       	sub	r8,-8
	unsigned char total_blocks = hLen / hLen, block_num = 1;
80002a68:	30 18       	mov	r8,1
80002a6a:	ef 68 ff f6 	st.b	r7[-10],r8
80002a6e:	30 18       	mov	r8,1
80002a70:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char *Salt = (unsigned char *)var_Salt.index;
80002a74:	4e 58       	lddpc	r8,80002c08 <pbkdf2_func+0x23c>
80002a76:	ef 48 ff f8 	st.w	r7[-8],r8
	
	while (block_num <= total_blocks)
80002a7a:	cb b8       	rjmp	80002bf0 <pbkdf2_func+0x224>
	{
		iteration_count = 0;
80002a7c:	30 08       	mov	r8,0
80002a7e:	ef 58 ff f4 	st.h	r7[-12],r8
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002a82:	c9 a8       	rjmp	80002bb6 <pbkdf2_func+0x1ea>
		{
			unsigned short int i;
			if (iteration_count == 0)
80002a84:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002a88:	30 08       	mov	r8,0
80002a8a:	f0 09 19 00 	cp.h	r9,r8
80002a8e:	c5 e1       	brne	80002b4a <pbkdf2_func+0x17e>
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002a90:	30 08       	mov	r8,0
80002a92:	ef 58 ff fe 	st.h	r7[-2],r8
80002a96:	c1 38       	rjmp	80002abc <pbkdf2_func+0xf0>
				{
					Ubuffer[i] = Salt[i];
80002a98:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002a9c:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002aa0:	ee fa ff f8 	ld.w	r10,r7[-8]
80002aa4:	f4 08 00 08 	add	r8,r10,r8
80002aa8:	11 88       	ld.ub	r8,r8[0x0]
80002aaa:	ee 09 00 09 	add	r9,r7,r9
80002aae:	f3 68 ff b0 	st.b	r9[-80],r8
		{
			unsigned short int i;
			if (iteration_count == 0)
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002ab2:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002ab6:	2f f8       	sub	r8,-1
80002ab8:	ef 58 ff fe 	st.h	r7[-2],r8
80002abc:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80002ac0:	31 f8       	mov	r8,31
80002ac2:	f0 09 19 00 	cp.h	r9,r8
80002ac6:	fe 98 ff e9 	brls	80002a98 <pbkdf2_func+0xcc>
				{
					Ubuffer[i] = Salt[i];
				}
				Ubuffer[i++] = (block_num >> 24) & 0xFF;
80002aca:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002ace:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002ad2:	b9 48       	asr	r8,0x18
80002ad4:	5c 58       	castu.b	r8
80002ad6:	ee 09 00 09 	add	r9,r7,r9
80002ada:	f3 68 ff b0 	st.b	r9[-80],r8
80002ade:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002ae2:	2f f8       	sub	r8,-1
80002ae4:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 16) & 0xFF;
80002ae8:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002aec:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002af0:	b1 48       	asr	r8,0x10
80002af2:	5c 58       	castu.b	r8
80002af4:	ee 09 00 09 	add	r9,r7,r9
80002af8:	f3 68 ff b0 	st.b	r9[-80],r8
80002afc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002b00:	2f f8       	sub	r8,-1
80002b02:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 8) & 0xFF;
80002b06:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002b0a:	ee 08 00 09 	add	r9,r7,r8
80002b0e:	30 08       	mov	r8,0
80002b10:	f3 68 ff b0 	st.b	r9[-80],r8
80002b14:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002b18:	2f f8       	sub	r8,-1
80002b1a:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i] = (block_num >> 0) & 0xFF;
80002b1e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002b22:	ee 08 00 09 	add	r9,r7,r8
80002b26:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002b2a:	f3 68 ff b0 	st.b	r9[-80],r8
				hmac_sha256(password, 32, Ubuffer, 36, mac, 32);
80002b2e:	ee c8 00 2c 	sub	r8,r7,44
80002b32:	ee ca 00 50 	sub	r10,r7,80
80002b36:	32 09       	mov	r9,32
80002b38:	1a d9       	st.w	--sp,r9
80002b3a:	32 49       	mov	r9,36
80002b3c:	32 0b       	mov	r11,32
80002b3e:	ee fc ff 6c 	ld.w	r12,r7[-148]
80002b42:	f0 1f 00 33 	mcall	80002c0c <pbkdf2_func+0x240>
80002b46:	2f fd       	sub	sp,-4
80002b48:	c0 d8       	rjmp	80002b62 <pbkdf2_func+0x196>
			}
			else
			{
				hmac_sha256((const unsigned char *)var_Password.index, 32, Ubuffer, 32, mac, 32);
80002b4a:	4b 2c       	lddpc	r12,80002c10 <pbkdf2_func+0x244>
80002b4c:	ee c8 00 2c 	sub	r8,r7,44
80002b50:	ee ca 00 50 	sub	r10,r7,80
80002b54:	32 09       	mov	r9,32
80002b56:	1a d9       	st.w	--sp,r9
80002b58:	32 09       	mov	r9,32
80002b5a:	32 0b       	mov	r11,32
80002b5c:	f0 1f 00 2c 	mcall	80002c0c <pbkdf2_func+0x240>
80002b60:	2f fd       	sub	sp,-4
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
80002b62:	ee c9 00 2c 	sub	r9,r7,44
80002b66:	ee c8 00 90 	sub	r8,r7,144
80002b6a:	30 8a       	mov	r10,8
80002b6c:	12 9b       	mov	r11,r9
80002b6e:	10 9c       	mov	r12,r8
80002b70:	f0 1f 00 29 	mcall	80002c14 <pbkdf2_func+0x248>
			
			for (i = 0; i < hLen; i++)
80002b74:	30 08       	mov	r8,0
80002b76:	ef 58 ff fc 	st.h	r7[-4],r8
80002b7a:	c1 28       	rjmp	80002b9e <pbkdf2_func+0x1d2>
			{
				Ubuffer[i] = mac[i];
80002b7c:	ef 19 ff fc 	ld.uh	r9,r7[-4]
80002b80:	ef 18 ff fc 	ld.uh	r8,r7[-4]
80002b84:	ee 08 00 08 	add	r8,r7,r8
80002b88:	f1 38 ff d4 	ld.ub	r8,r8[-44]
80002b8c:	ee 09 00 09 	add	r9,r7,r9
80002b90:	f3 68 ff b0 	st.b	r9[-80],r8
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
			
			for (i = 0; i < hLen; i++)
80002b94:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80002b98:	2f f8       	sub	r8,-1
80002b9a:	ef 58 ff fc 	st.h	r7[-4],r8
80002b9e:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80002ba2:	31 f8       	mov	r8,31
80002ba4:	f0 09 19 00 	cp.h	r9,r8
80002ba8:	fe 98 ff ea 	brls	80002b7c <pbkdf2_func+0x1b0>
			{
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
80002bac:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80002bb0:	2f f8       	sub	r8,-1
80002bb2:	ef 58 ff f4 	st.h	r7[-12],r8
	unsigned char *Salt = (unsigned char *)var_Salt.index;
	
	while (block_num <= total_blocks)
	{
		iteration_count = 0;
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002bb6:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002bba:	e0 68 01 f3 	mov	r8,499
80002bbe:	f0 09 19 00 	cp.h	r9,r8
80002bc2:	fe 98 ff 61 	brls	80002a84 <pbkdf2_func+0xb8>
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
80002bc6:	ee c9 00 90 	sub	r9,r7,144
80002bca:	ee f8 ff 68 	ld.w	r8,r7[-152]
80002bce:	30 8a       	mov	r10,8
80002bd0:	12 9b       	mov	r11,r9
80002bd2:	10 9c       	mov	r12,r8
80002bd4:	f0 1f 00 10 	mcall	80002c14 <pbkdf2_func+0x248>
		memset(Fbuffer, 0, 32);		
80002bd8:	ee c8 00 90 	sub	r8,r7,144
80002bdc:	32 0a       	mov	r10,32
80002bde:	30 0b       	mov	r11,0
80002be0:	10 9c       	mov	r12,r8
80002be2:	f0 1f 00 0e 	mcall	80002c18 <pbkdf2_func+0x24c>
		block_num++;
80002be6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002bea:	2f f8       	sub	r8,-1
80002bec:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char Tbuffer[hLen] = {0};
	unsigned char Fbuffer[hLen] = {0};
	unsigned char total_blocks = hLen / hLen, block_num = 1;
	unsigned char *Salt = (unsigned char *)var_Salt.index;
	
	while (block_num <= total_blocks)
80002bf0:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80002bf4:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80002bf8:	f0 09 18 00 	cp.b	r9,r8
80002bfc:	fe 98 ff 40 	brls	80002a7c <pbkdf2_func+0xb0>
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
		memset(Fbuffer, 0, 32);		
		block_num++;
	}
80002c00:	2d ad       	sub	sp,-152
80002c02:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c06:	00 00       	add	r0,r0
80002c08:	00 00       	add	r0,r0
80002c0a:	09 84       	ld.ub	r4,r4[0x0]
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	22 5c       	sub	r12,37
80002c10:	00 00       	add	r0,r0
80002c12:	08 64       	and	r4,r4
80002c14:	80 00       	ld.sh	r0,r0[0x0]
80002c16:	2d ac       	sub	r12,-38
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	e8 e2 eb cd 	ld.d	r2,r4[-5171]

80002c1c <encrypt_password>:
volatile uint32_t var_W_ticks = 0;
volatile uint256_t var_Salt;


uint32_t * encrypt_password(uint32_t *password)
{
80002c1c:	eb cd 40 80 	pushm	r7,lr
80002c20:	1a 97       	mov	r7,sp
80002c22:	21 1d       	sub	sp,68
80002c24:	ef 4c ff bc 	st.w	r7[-68],r12
	uint8_t temp_dk[32] = {0}, temp_dk_digest[32] = {0};
80002c28:	ee c8 00 20 	sub	r8,r7,32
80002c2c:	30 0a       	mov	r10,0
80002c2e:	30 0b       	mov	r11,0
80002c30:	f0 eb 00 00 	st.d	r8[0],r10
80002c34:	2f 88       	sub	r8,-8
80002c36:	30 0a       	mov	r10,0
80002c38:	30 0b       	mov	r11,0
80002c3a:	f0 eb 00 00 	st.d	r8[0],r10
80002c3e:	2f 88       	sub	r8,-8
80002c40:	30 0a       	mov	r10,0
80002c42:	30 0b       	mov	r11,0
80002c44:	f0 eb 00 00 	st.d	r8[0],r10
80002c48:	2f 88       	sub	r8,-8
80002c4a:	30 0a       	mov	r10,0
80002c4c:	30 0b       	mov	r11,0
80002c4e:	f0 eb 00 00 	st.d	r8[0],r10
80002c52:	2f 88       	sub	r8,-8
80002c54:	ee c8 00 40 	sub	r8,r7,64
80002c58:	30 0a       	mov	r10,0
80002c5a:	30 0b       	mov	r11,0
80002c5c:	f0 eb 00 00 	st.d	r8[0],r10
80002c60:	2f 88       	sub	r8,-8
80002c62:	30 0a       	mov	r10,0
80002c64:	30 0b       	mov	r11,0
80002c66:	f0 eb 00 00 	st.d	r8[0],r10
80002c6a:	2f 88       	sub	r8,-8
80002c6c:	30 0a       	mov	r10,0
80002c6e:	30 0b       	mov	r11,0
80002c70:	f0 eb 00 00 	st.d	r8[0],r10
80002c74:	2f 88       	sub	r8,-8
80002c76:	30 0a       	mov	r10,0
80002c78:	30 0b       	mov	r11,0
80002c7a:	f0 eb 00 00 	st.d	r8[0],r10
80002c7e:	2f 88       	sub	r8,-8
	pbkdf2_func((uint8_t *)password, temp_dk);
80002c80:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002c84:	ee c9 00 20 	sub	r9,r7,32
80002c88:	12 9b       	mov	r11,r9
80002c8a:	10 9c       	mov	r12,r8
80002c8c:	f0 1f 00 0d 	mcall	80002cc0 <encrypt_password+0xa4>
	sha256(temp_dk, 32, temp_dk_digest);
80002c90:	ee c9 00 40 	sub	r9,r7,64
80002c94:	ee c8 00 20 	sub	r8,r7,32
80002c98:	12 9a       	mov	r10,r9
80002c9a:	32 0b       	mov	r11,32
80002c9c:	10 9c       	mov	r12,r8
80002c9e:	f0 1f 00 0a 	mcall	80002cc4 <encrypt_password+0xa8>
	apply_aes_encryption(&AVR32_AES, (uint32_t *)temp_dk_digest, 32, 0x00000000);
80002ca2:	ee c8 00 40 	sub	r8,r7,64
80002ca6:	30 09       	mov	r9,0
80002ca8:	32 0a       	mov	r10,32
80002caa:	10 9b       	mov	r11,r8
80002cac:	fc 7c 00 00 	mov	r12,-196608
80002cb0:	f0 1f 00 06 	mcall	80002cc8 <encrypt_password+0xac>
	return (uint32_t *)temp_dk_digest;	
80002cb4:	ee c8 00 40 	sub	r8,r7,64
}
80002cb8:	10 9c       	mov	r12,r8
80002cba:	2e fd       	sub	sp,-68
80002cbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cc0:	80 00       	ld.sh	r0,r0[0x0]
80002cc2:	29 cc       	sub	r12,-100
80002cc4:	80 00       	ld.sh	r0,r0[0x0]
80002cc6:	26 44       	sub	r4,100
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	40 14       	lddsp	r4,sp[0x4]

80002ccc <random_lcg>:


uint32_t random_lcg (void)
{
80002ccc:	eb cd 40 80 	pushm	r7,lr
80002cd0:	1a 97       	mov	r7,sp
	rseed = (rseed * 1103515245 + 12345) & RAND_MAX;
80002cd2:	48 a8       	lddpc	r8,80002cf8 <random_lcg+0x2c>
80002cd4:	70 09       	ld.w	r9,r8[0x0]
80002cd6:	e0 68 4e 6d 	mov	r8,20077
80002cda:	ea 18 41 c6 	orh	r8,0x41c6
80002cde:	f2 08 02 48 	mul	r8,r9,r8
80002ce2:	f0 c8 cf c7 	sub	r8,r8,-12345
80002ce6:	f3 d8 c0 1f 	bfextu	r9,r8,0x0,0x1f
80002cea:	48 48       	lddpc	r8,80002cf8 <random_lcg+0x2c>
80002cec:	91 09       	st.w	r8[0x0],r9
	return rseed;
80002cee:	48 38       	lddpc	r8,80002cf8 <random_lcg+0x2c>
80002cf0:	70 08       	ld.w	r8,r8[0x0]
}
80002cf2:	10 9c       	mov	r12,r8
80002cf4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cf8:	00 00       	add	r0,r0
80002cfa:	02 8c       	andn	r12,r1

80002cfc <calculate_salt>:

//void random_256 ()

void calculate_salt(void)
{
80002cfc:	eb cd 40 80 	pushm	r7,lr
80002d00:	1a 97       	mov	r7,sp
80002d02:	20 1d       	sub	sp,4
	uint32_t random_value = 0;
80002d04:	30 08       	mov	r8,0
80002d06:	ef 48 ff fc 	st.w	r7[-4],r8
	calculate_hash(pass_code, 8, var_Hkey.index); // Calculates sha256 of the keys pressed in var_W*10 msec interval and stores it in var_Hkey
80002d0a:	49 e9       	lddpc	r9,80002d80 <calculate_salt+0x84>
80002d0c:	49 e8       	lddpc	r8,80002d84 <calculate_salt+0x88>
80002d0e:	70 08       	ld.w	r8,r8[0x0]
80002d10:	12 9a       	mov	r10,r9
80002d12:	30 8b       	mov	r11,8
80002d14:	10 9c       	mov	r12,r8
80002d16:	f0 1f 00 1d 	mcall	80002d88 <calculate_salt+0x8c>
 	
	random_value = random_lcg();	
80002d1a:	f0 1f 00 1d 	mcall	80002d8c <calculate_salt+0x90>
80002d1e:	18 98       	mov	r8,r12
80002d20:	ef 48 ff fc 	st.w	r7[-4],r8
	
	calculate_hash(&random_value, 1, var_R.index);
80002d24:	49 b9       	lddpc	r9,80002d90 <calculate_salt+0x94>
80002d26:	ee c8 00 04 	sub	r8,r7,4
80002d2a:	12 9a       	mov	r10,r9
80002d2c:	30 1b       	mov	r11,1
80002d2e:	10 9c       	mov	r12,r8
80002d30:	f0 1f 00 16 	mcall	80002d88 <calculate_salt+0x8c>
	
	xor_func(var_R.index, var_Hkey.index, 8);
80002d34:	49 39       	lddpc	r9,80002d80 <calculate_salt+0x84>
80002d36:	49 78       	lddpc	r8,80002d90 <calculate_salt+0x94>
80002d38:	30 8a       	mov	r10,8
80002d3a:	12 9b       	mov	r11,r9
80002d3c:	10 9c       	mov	r12,r8
80002d3e:	f0 1f 00 16 	mcall	80002d94 <calculate_salt+0x98>
	
	calculate_hash(var_R.index, 8, var_T.index);
80002d42:	49 69       	lddpc	r9,80002d98 <calculate_salt+0x9c>
80002d44:	49 38       	lddpc	r8,80002d90 <calculate_salt+0x94>
80002d46:	12 9a       	mov	r10,r9
80002d48:	30 8b       	mov	r11,8
80002d4a:	10 9c       	mov	r12,r8
80002d4c:	f0 1f 00 0f 	mcall	80002d88 <calculate_salt+0x8c>
 	
	xor_func(var_Salt.index, var_T.index, 8);
80002d50:	49 29       	lddpc	r9,80002d98 <calculate_salt+0x9c>
80002d52:	49 38       	lddpc	r8,80002d9c <calculate_salt+0xa0>
80002d54:	30 8a       	mov	r10,8
80002d56:	12 9b       	mov	r11,r9
80002d58:	10 9c       	mov	r12,r8
80002d5a:	f0 1f 00 0f 	mcall	80002d94 <calculate_salt+0x98>
	
	if (enter_button_status == PASSCODE_FOR_SALT_ENTERED)
80002d5e:	49 18       	lddpc	r8,80002da0 <calculate_salt+0xa4>
80002d60:	11 88       	ld.ub	r8,r8[0x0]
80002d62:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002d66:	30 68       	mov	r8,6
80002d68:	f0 09 18 00 	cp.b	r9,r8
80002d6c:	c0 41       	brne	80002d74 <calculate_salt+0x78>
	{
		save_salt_to_mcu();
80002d6e:	f0 1f 00 0e 	mcall	80002da4 <calculate_salt+0xa8>
80002d72:	c0 38       	rjmp	80002d78 <calculate_salt+0x7c>
	}
	else
	{
		Start_W_timer();	
80002d74:	f0 1f 00 0d 	mcall	80002da8 <calculate_salt+0xac>
	}
	
}
80002d78:	2f fd       	sub	sp,-4
80002d7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d7e:	00 00       	add	r0,r0
80002d80:	00 00       	add	r0,r0
80002d82:	09 24       	ld.uh	r4,r4++
80002d84:	00 00       	add	r0,r0
80002d86:	09 a4       	ld.ub	r4,r4[0x2]
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	2e e0       	sub	r0,-18
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	2c cc       	sub	r12,-52
80002d90:	00 00       	add	r0,r0
80002d92:	09 64       	ld.uh	r4,--r4
80002d94:	80 00       	ld.sh	r0,r0[0x0]
80002d96:	2d ac       	sub	r12,-38
80002d98:	00 00       	add	r0,r0
80002d9a:	09 44       	ld.w	r4,--r4
80002d9c:	00 00       	add	r0,r0
80002d9e:	09 84       	ld.ub	r4,r4[0x0]
80002da0:	00 00       	add	r0,r0
80002da2:	03 da       	ld.ub	r10,r1[0x5]
80002da4:	80 00       	ld.sh	r0,r0[0x0]
80002da6:	2e 18       	sub	r8,-31
80002da8:	80 00       	ld.sh	r0,r0[0x0]
80002daa:	2e 9c       	sub	r12,-23

80002dac <xor_func>:

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
80002dac:	eb cd 40 80 	pushm	r7,lr
80002db0:	1a 97       	mov	r7,sp
80002db2:	20 4d       	sub	sp,16
80002db4:	ef 4c ff f8 	st.w	r7[-8],r12
80002db8:	ef 4b ff f4 	st.w	r7[-12],r11
80002dbc:	14 98       	mov	r8,r10
80002dbe:	ef 68 ff f0 	st.b	r7[-16],r8
	unsigned char i = 0;
80002dc2:	30 08       	mov	r8,0
80002dc4:	ef 68 ff ff 	st.b	r7[-1],r8
	while (i++ < len)
80002dc8:	c1 58       	rjmp	80002df2 <xor_func+0x46>
	{
		*value1 = *value1 ^ *value2;
80002dca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dce:	70 09       	ld.w	r9,r8[0x0]
80002dd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002dd4:	70 08       	ld.w	r8,r8[0x0]
80002dd6:	10 59       	eor	r9,r8
80002dd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ddc:	91 09       	st.w	r8[0x0],r9
		value1++;	value2++;
80002dde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002de2:	2f c8       	sub	r8,-4
80002de4:	ef 48 ff f8 	st.w	r7[-8],r8
80002de8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002dec:	2f c8       	sub	r8,-4
80002dee:	ef 48 ff f4 	st.w	r7[-12],r8
}

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
	unsigned char i = 0;
	while (i++ < len)
80002df2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002df6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002dfa:	f0 09 18 00 	cp.b	r9,r8
80002dfe:	5f 38       	srlo	r8
80002e00:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002e04:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e08:	2f f8       	sub	r8,-1
80002e0a:	ef 68 ff ff 	st.b	r7[-1],r8
80002e0e:	58 09       	cp.w	r9,0
80002e10:	cd d1       	brne	80002dca <xor_func+0x1e>
	{
		*value1 = *value1 ^ *value2;
		value1++;	value2++;
	}
}
80002e12:	2f cd       	sub	sp,-16
80002e14:	e3 cd 80 80 	ldm	sp++,r7,pc

80002e18 <save_salt_to_mcu>:

void save_salt_to_mcu(void)
{
80002e18:	eb cd 40 80 	pushm	r7,lr
80002e1c:	1a 97       	mov	r7,sp
80002e1e:	20 2d       	sub	sp,8
	//volatile salt_t *salt = &SALT_STRUCT;
	uint32_t *temp_encypted_password;
	uint8_t i;
	
	temp_encypted_password = encrypt_password(temp_password1);
80002e20:	48 fc       	lddpc	r12,80002e5c <save_salt_to_mcu+0x44>
80002e22:	f0 1f 00 10 	mcall	80002e60 <save_salt_to_mcu+0x48>
80002e26:	18 98       	mov	r8,r12
80002e28:	ef 48 ff f8 	st.w	r7[-8],r8
	memcpy((uint8_t *)Stored_values_ram.unlock_password, (const uint8_t *)temp_encypted_password, 32);
80002e2c:	32 0a       	mov	r10,32
80002e2e:	ee fb ff f8 	ld.w	r11,r7[-8]
80002e32:	48 dc       	lddpc	r12,80002e64 <save_salt_to_mcu+0x4c>
80002e34:	f0 1f 00 0d 	mcall	80002e68 <save_salt_to_mcu+0x50>
	memcpy((uint8_t *)Stored_values_ram.salt, (const uint8_t *)var_Salt.index, 32);
80002e38:	48 b8       	lddpc	r8,80002e64 <save_salt_to_mcu+0x4c>
80002e3a:	28 08       	sub	r8,-128
80002e3c:	32 0a       	mov	r10,32
80002e3e:	48 cb       	lddpc	r11,80002e6c <save_salt_to_mcu+0x54>
80002e40:	10 9c       	mov	r12,r8
80002e42:	f0 1f 00 0a 	mcall	80002e68 <save_salt_to_mcu+0x50>
	
	flashc_memcpy((void *)&Stored_values_flash, (void *)&Stored_values_ram, sizeof(Stored_values_ram), true);
80002e46:	30 19       	mov	r9,1
80002e48:	e0 6a 00 a0 	mov	r10,160
80002e4c:	48 6b       	lddpc	r11,80002e64 <save_salt_to_mcu+0x4c>
80002e4e:	48 9c       	lddpc	r12,80002e70 <save_salt_to_mcu+0x58>
80002e50:	f0 1f 00 09 	mcall	80002e74 <save_salt_to_mcu+0x5c>
}
80002e54:	2f ed       	sub	sp,-8
80002e56:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e5a:	00 00       	add	r0,r0
80002e5c:	00 00       	add	r0,r0
80002e5e:	02 68       	and	r8,r1
80002e60:	80 00       	ld.sh	r0,r0[0x0]
80002e62:	2c 1c       	sub	r12,-63
80002e64:	00 00       	add	r0,r0
80002e66:	08 84       	andn	r4,r4
80002e68:	80 00       	ld.sh	r0,r0[0x0]
80002e6a:	e7 9a       	*unknown*
80002e6c:	00 00       	add	r0,r0
80002e6e:	09 84       	ld.ub	r4,r4[0x0]
80002e70:	80 03       	ld.sh	r3,r0[0x0]
80002e72:	fe 00       	*unknown*
80002e74:	80 00       	ld.sh	r0,r0[0x0]
80002e76:	87 f8       	st.w	r3[0x3c],r8

80002e78 <Load_stored_values>:

void Load_stored_values(void)
{
80002e78:	eb cd 40 80 	pushm	r7,lr
80002e7c:	1a 97       	mov	r7,sp
	memcpy_code2ram((void *)&Stored_values_ram, (uint8_t *)&Stored_values_flash, sizeof(Stored_values_ram));
80002e7e:	e0 6a 00 a0 	mov	r10,160
80002e82:	48 4b       	lddpc	r11,80002e90 <Load_stored_values+0x18>
80002e84:	48 4c       	lddpc	r12,80002e94 <Load_stored_values+0x1c>
80002e86:	f0 1f 00 05 	mcall	80002e98 <Load_stored_values+0x20>
}
80002e8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e8e:	00 00       	add	r0,r0
80002e90:	80 03       	ld.sh	r3,r0[0x0]
80002e92:	fe 00 00 00 	add	r0,pc,r0
80002e96:	08 84       	andn	r4,r4
80002e98:	80 00       	ld.sh	r0,r0[0x0]
80002e9a:	e7 9a       	*unknown*

80002e9c <Start_W_timer>:

void Start_W_timer(void)
{
80002e9c:	eb cd 40 80 	pushm	r7,lr
80002ea0:	1a 97       	mov	r7,sp
	var_W = random_lcg() % 500 + 50;
80002ea2:	f0 1f 00 0d 	mcall	80002ed4 <Start_W_timer+0x38>
80002ea6:	18 9a       	mov	r10,r12
80002ea8:	e0 68 4d d3 	mov	r8,19923
80002eac:	ea 18 10 62 	orh	r8,0x1062
80002eb0:	f4 08 06 48 	mulu.d	r8,r10,r8
80002eb4:	f2 08 16 05 	lsr	r8,r9,0x5
80002eb8:	e0 69 01 f4 	mov	r9,500
80002ebc:	b3 38       	mul	r8,r9
80002ebe:	f4 08 01 08 	sub	r8,r10,r8
80002ec2:	f0 c9 ff ce 	sub	r9,r8,-50
80002ec6:	48 58       	lddpc	r8,80002ed8 <Start_W_timer+0x3c>
80002ec8:	91 09       	st.w	r8[0x0],r9
	var_W_ticks = 0;	
80002eca:	48 58       	lddpc	r8,80002edc <Start_W_timer+0x40>
80002ecc:	30 09       	mov	r9,0
80002ece:	91 09       	st.w	r8[0x0],r9
80002ed0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ed4:	80 00       	ld.sh	r0,r0[0x0]
80002ed6:	2c cc       	sub	r12,-52
80002ed8:	00 00       	add	r0,r0
80002eda:	01 28       	ld.uh	r8,r0++
80002edc:	00 00       	add	r0,r0
80002ede:	02 90       	mov	r0,r1

80002ee0 <calculate_hash>:
unsigned long Rotate_right (unsigned long number, int bits);



 void calculate_hash (uint32_t *input_array, uint8_t length, uint32_t *output_array)
 {
80002ee0:	eb cd 40 c0 	pushm	r6-r7,lr
80002ee4:	1a 97       	mov	r7,sp
80002ee6:	20 ed       	sub	sp,56
80002ee8:	ef 4c ff d0 	st.w	r7[-48],r12
80002eec:	16 98       	mov	r8,r11
80002eee:	ef 4a ff c8 	st.w	r7[-56],r10
80002ef2:	ef 68 ff cc 	st.b	r7[-52],r8
	 int i;
	 unsigned long int S0, S1;
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
80002ef6:	fe f8 03 8a 	ld.w	r8,pc[906]
80002efa:	ef 48 ff e0 	st.w	r7[-32],r8
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
80002efe:	fe f8 03 86 	ld.w	r8,pc[902]
80002f02:	ef 48 ff ec 	st.w	r7[-20],r8
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
80002f06:	30 08       	mov	r8,0
80002f08:	ef 48 ff d4 	st.w	r7[-44],r8
80002f0c:	c1 68       	rjmp	80002f38 <calculate_hash+0x58>
	 {
		 Key_ptr[i] = input_array[i];
80002f0e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f12:	a3 68       	lsl	r8,0x2
80002f14:	ee f9 ff e0 	ld.w	r9,r7[-32]
80002f18:	f2 08 00 08 	add	r8,r9,r8
80002f1c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002f20:	a3 69       	lsl	r9,0x2
80002f22:	ee fa ff d0 	ld.w	r10,r7[-48]
80002f26:	f4 09 00 09 	add	r9,r10,r9
80002f2a:	72 09       	ld.w	r9,r9[0x0]
80002f2c:	91 09       	st.w	r8[0x0],r9
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
80002f2e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f32:	2f f8       	sub	r8,-1
80002f34:	ef 48 ff d4 	st.w	r7[-44],r8
80002f38:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80002f3c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f40:	10 39       	cp.w	r9,r8
80002f42:	fe 99 ff e6 	brgt	80002f0e <calculate_hash+0x2e>
	 {
		 Key_ptr[i] = input_array[i];
	 }
	 
	 PadtheMessage(length << 2);
80002f46:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80002f4a:	a3 68       	lsl	r8,0x2
80002f4c:	5c 58       	castu.b	r8
80002f4e:	10 9c       	mov	r12,r8
80002f50:	f0 1f 00 ce 	mcall	80003288 <calculate_hash+0x3a8>
	 
	 
	 W = Message_Schedule_W;
80002f54:	fe f8 03 38 	ld.w	r8,pc[824]
80002f58:	ef 48 ff e4 	st.w	r7[-28],r8
	 M = (unsigned long int *)Padded_Message;
80002f5c:	fe f8 03 24 	ld.w	r8,pc[804]
80002f60:	ef 48 ff e8 	st.w	r7[-24],r8
	 for (i = 0; i < 16; i++)
80002f64:	30 08       	mov	r8,0
80002f66:	ef 48 ff d4 	st.w	r7[-44],r8
80002f6a:	c1 68       	rjmp	80002f96 <calculate_hash+0xb6>
	 {
		W[i] = M[i];
80002f6c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f70:	a3 68       	lsl	r8,0x2
80002f72:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002f76:	f2 08 00 08 	add	r8,r9,r8
80002f7a:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002f7e:	a3 69       	lsl	r9,0x2
80002f80:	ee fa ff e8 	ld.w	r10,r7[-24]
80002f84:	f4 09 00 09 	add	r9,r10,r9
80002f88:	72 09       	ld.w	r9,r9[0x0]
80002f8a:	91 09       	st.w	r8[0x0],r9
	 PadtheMessage(length << 2);
	 
	 
	 W = Message_Schedule_W;
	 M = (unsigned long int *)Padded_Message;
	 for (i = 0; i < 16; i++)
80002f8c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f90:	2f f8       	sub	r8,-1
80002f92:	ef 48 ff d4 	st.w	r7[-44],r8
80002f96:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f9a:	58 f8       	cp.w	r8,15
80002f9c:	fe 9a ff e8 	brle	80002f6c <calculate_hash+0x8c>
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
80002fa0:	31 08       	mov	r8,16
80002fa2:	ef 48 ff d4 	st.w	r7[-44],r8
80002fa6:	c7 58       	rjmp	80003090 <calculate_hash+0x1b0>
	 {
		 S0 = Rotate_right(Message_Schedule_W[i - 15], 7) XOR Rotate_right(Message_Schedule_W[i - 15], 18) XOR (Message_Schedule_W[i - 15] >> 3);
80002fa8:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fac:	f0 c9 00 0f 	sub	r9,r8,15
80002fb0:	fe f8 02 dc 	ld.w	r8,pc[732]
80002fb4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002fb8:	30 7b       	mov	r11,7
80002fba:	10 9c       	mov	r12,r8
80002fbc:	f0 1f 00 b5 	mcall	80003290 <calculate_hash+0x3b0>
80002fc0:	18 96       	mov	r6,r12
80002fc2:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fc6:	f0 c9 00 0f 	sub	r9,r8,15
80002fca:	fe f8 02 c2 	ld.w	r8,pc[706]
80002fce:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002fd2:	31 2b       	mov	r11,18
80002fd4:	10 9c       	mov	r12,r8
80002fd6:	f0 1f 00 af 	mcall	80003290 <calculate_hash+0x3b0>
80002fda:	18 98       	mov	r8,r12
80002fdc:	ed e8 20 09 	eor	r9,r6,r8
80002fe0:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fe4:	f0 ca 00 0f 	sub	r10,r8,15
80002fe8:	fe f8 02 a4 	ld.w	r8,pc[676]
80002fec:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002ff0:	a3 98       	lsr	r8,0x3
80002ff2:	f3 e8 20 08 	eor	r8,r9,r8
80002ff6:	ef 48 ff d8 	st.w	r7[-40],r8
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
80002ffa:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ffe:	f0 c9 00 02 	sub	r9,r8,2
80003002:	fe f8 02 8a 	ld.w	r8,pc[650]
80003006:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000300a:	31 1b       	mov	r11,17
8000300c:	10 9c       	mov	r12,r8
8000300e:	f0 1f 00 a1 	mcall	80003290 <calculate_hash+0x3b0>
80003012:	18 96       	mov	r6,r12
80003014:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003018:	f0 c9 00 02 	sub	r9,r8,2
8000301c:	fe f8 02 70 	ld.w	r8,pc[624]
80003020:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003024:	31 3b       	mov	r11,19
80003026:	10 9c       	mov	r12,r8
80003028:	f0 1f 00 9a 	mcall	80003290 <calculate_hash+0x3b0>
8000302c:	18 98       	mov	r8,r12
8000302e:	ed e8 20 09 	eor	r9,r6,r8
80003032:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003036:	f0 ca 00 02 	sub	r10,r8,2
8000303a:	fe f8 02 52 	ld.w	r8,pc[594]
8000303e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003042:	ab 88       	lsr	r8,0xa
80003044:	f3 e8 20 08 	eor	r8,r9,r8
80003048:	ef 48 ff dc 	st.w	r7[-36],r8
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
8000304c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80003050:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003054:	f0 ca 00 10 	sub	r10,r8,16
80003058:	fe f8 02 34 	ld.w	r8,pc[564]
8000305c:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80003060:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003064:	10 0a       	add	r10,r8
80003066:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000306a:	f0 cb 00 07 	sub	r11,r8,7
8000306e:	fe f8 02 1e 	ld.w	r8,pc[542]
80003072:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
80003076:	10 0a       	add	r10,r8
80003078:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000307c:	10 0a       	add	r10,r8
8000307e:	fe f8 02 0e 	ld.w	r8,pc[526]
80003082:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
80003086:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000308a:	2f f8       	sub	r8,-1
8000308c:	ef 48 ff d4 	st.w	r7[-44],r8
80003090:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003094:	e0 48 00 3f 	cp.w	r8,63
80003098:	fe 9a ff 88 	brle	80002fa8 <calculate_hash+0xc8>
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
8000309c:	30 08       	mov	r8,0
8000309e:	ef 48 ff d4 	st.w	r7[-44],r8
800030a2:	c1 38       	rjmp	800030c8 <calculate_hash+0x1e8>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
800030a4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030a8:	a3 68       	lsl	r8,0x2
800030aa:	ee f9 ff ec 	ld.w	r9,r7[-20]
800030ae:	f2 08 00 08 	add	r8,r9,r8
800030b2:	ee fa ff d4 	ld.w	r10,r7[-44]
800030b6:	4f 89       	lddpc	r9,80003294 <calculate_hash+0x3b4>
800030b8:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800030bc:	91 09       	st.w	r8[0x0],r9
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
800030be:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030c2:	2f f8       	sub	r8,-1
800030c4:	ef 48 ff d4 	st.w	r7[-44],r8
800030c8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030cc:	58 78       	cp.w	r8,7
800030ce:	fe 9a ff eb 	brle	800030a4 <calculate_hash+0x1c4>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
800030d2:	30 08       	mov	r8,0
800030d4:	ef 48 ff d4 	st.w	r7[-44],r8
800030d8:	ca 68       	rjmp	80003224 <calculate_hash+0x344>
	 {
		 unsigned long int maj, t2, ch, t1;
		 S0 = Rotate_right(chunk.a, 2) XOR Rotate_right(chunk.a, 13) XOR Rotate_right(chunk.a, 22);
800030da:	4e b8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800030dc:	70 08       	ld.w	r8,r8[0x0]
800030de:	30 2b       	mov	r11,2
800030e0:	10 9c       	mov	r12,r8
800030e2:	f0 1f 00 6c 	mcall	80003290 <calculate_hash+0x3b0>
800030e6:	18 96       	mov	r6,r12
800030e8:	4e 78       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800030ea:	70 08       	ld.w	r8,r8[0x0]
800030ec:	30 db       	mov	r11,13
800030ee:	10 9c       	mov	r12,r8
800030f0:	f0 1f 00 68 	mcall	80003290 <calculate_hash+0x3b0>
800030f4:	18 98       	mov	r8,r12
800030f6:	10 56       	eor	r6,r8
800030f8:	4e 38       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800030fa:	70 08       	ld.w	r8,r8[0x0]
800030fc:	31 6b       	mov	r11,22
800030fe:	10 9c       	mov	r12,r8
80003100:	f0 1f 00 64 	mcall	80003290 <calculate_hash+0x3b0>
80003104:	18 98       	mov	r8,r12
80003106:	ed e8 20 08 	eor	r8,r6,r8
8000310a:	ef 48 ff d8 	st.w	r7[-40],r8
		 maj = (chunk.a & chunk.b) XOR (chunk.a & chunk.c) XOR (chunk.b & chunk.c);
8000310e:	4d e8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
80003110:	70 09       	ld.w	r9,r8[0x0]
80003112:	4d d8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
80003114:	70 18       	ld.w	r8,r8[0x4]
80003116:	10 69       	and	r9,r8
80003118:	4d b8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
8000311a:	70 0a       	ld.w	r10,r8[0x0]
8000311c:	4d a8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
8000311e:	70 28       	ld.w	r8,r8[0x8]
80003120:	f5 e8 00 08 	and	r8,r10,r8
80003124:	10 59       	eor	r9,r8
80003126:	4d 88       	lddpc	r8,80003284 <calculate_hash+0x3a4>
80003128:	70 1a       	ld.w	r10,r8[0x4]
8000312a:	4d 78       	lddpc	r8,80003284 <calculate_hash+0x3a4>
8000312c:	70 28       	ld.w	r8,r8[0x8]
8000312e:	f5 e8 00 08 	and	r8,r10,r8
80003132:	f3 e8 20 08 	eor	r8,r9,r8
80003136:	ef 48 ff f0 	st.w	r7[-16],r8
		 t2 = S0 + maj;
8000313a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000313e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003142:	f2 08 00 08 	add	r8,r9,r8
80003146:	ef 48 ff f4 	st.w	r7[-12],r8
		 S1 = Rotate_right(chunk.e, 6) XOR Rotate_right(chunk.e, 11) XOR Rotate_right(chunk.e, 25);
8000314a:	4c f8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
8000314c:	70 48       	ld.w	r8,r8[0x10]
8000314e:	30 6b       	mov	r11,6
80003150:	10 9c       	mov	r12,r8
80003152:	f0 1f 00 50 	mcall	80003290 <calculate_hash+0x3b0>
80003156:	18 96       	mov	r6,r12
80003158:	4c b8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
8000315a:	70 48       	ld.w	r8,r8[0x10]
8000315c:	30 bb       	mov	r11,11
8000315e:	10 9c       	mov	r12,r8
80003160:	f0 1f 00 4c 	mcall	80003290 <calculate_hash+0x3b0>
80003164:	18 98       	mov	r8,r12
80003166:	10 56       	eor	r6,r8
80003168:	4c 78       	lddpc	r8,80003284 <calculate_hash+0x3a4>
8000316a:	70 48       	ld.w	r8,r8[0x10]
8000316c:	31 9b       	mov	r11,25
8000316e:	10 9c       	mov	r12,r8
80003170:	f0 1f 00 48 	mcall	80003290 <calculate_hash+0x3b0>
80003174:	18 98       	mov	r8,r12
80003176:	ed e8 20 08 	eor	r8,r6,r8
8000317a:	ef 48 ff dc 	st.w	r7[-36],r8
		 ch = (chunk.e & chunk.f) XOR ((~chunk.e) & chunk.g);
8000317e:	4c 28       	lddpc	r8,80003284 <calculate_hash+0x3a4>
80003180:	70 49       	ld.w	r9,r8[0x10]
80003182:	4c 18       	lddpc	r8,80003284 <calculate_hash+0x3a4>
80003184:	70 58       	ld.w	r8,r8[0x14]
80003186:	10 69       	and	r9,r8
80003188:	4b f8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
8000318a:	70 48       	ld.w	r8,r8[0x10]
8000318c:	f0 0a 11 ff 	rsub	r10,r8,-1
80003190:	4b d8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
80003192:	70 68       	ld.w	r8,r8[0x18]
80003194:	f5 e8 00 08 	and	r8,r10,r8
80003198:	f3 e8 20 08 	eor	r8,r9,r8
8000319c:	ef 48 ff f8 	st.w	r7[-8],r8
		 t1 = chunk.h + S1 + ch + Hash_Constant[i] + Message_Schedule_W[i];
800031a0:	4b 98       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800031a2:	70 79       	ld.w	r9,r8[0x1c]
800031a4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800031a8:	10 09       	add	r9,r8
800031aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031ae:	10 09       	add	r9,r8
800031b0:	ee fa ff d4 	ld.w	r10,r7[-44]
800031b4:	4b 98       	lddpc	r8,80003298 <calculate_hash+0x3b8>
800031b6:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800031ba:	10 09       	add	r9,r8
800031bc:	ee fa ff d4 	ld.w	r10,r7[-44]
800031c0:	4b 38       	lddpc	r8,8000328c <calculate_hash+0x3ac>
800031c2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800031c6:	f2 08 00 08 	add	r8,r9,r8
800031ca:	ef 48 ff fc 	st.w	r7[-4],r8
		 
		 chunk.h = chunk.g;
800031ce:	4a e8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800031d0:	70 69       	ld.w	r9,r8[0x18]
800031d2:	4a d8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800031d4:	91 79       	st.w	r8[0x1c],r9
		 chunk.g = chunk.f;
800031d6:	4a c8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800031d8:	70 59       	ld.w	r9,r8[0x14]
800031da:	4a b8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800031dc:	91 69       	st.w	r8[0x18],r9
		 chunk.f = chunk.e;
800031de:	4a a8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800031e0:	70 49       	ld.w	r9,r8[0x10]
800031e2:	4a 98       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800031e4:	91 59       	st.w	r8[0x14],r9
		 chunk.e = chunk.d + t1;
800031e6:	4a 88       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800031e8:	70 39       	ld.w	r9,r8[0xc]
800031ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031ee:	10 09       	add	r9,r8
800031f0:	4a 58       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800031f2:	91 49       	st.w	r8[0x10],r9
		 chunk.d = chunk.c;
800031f4:	4a 48       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800031f6:	70 29       	ld.w	r9,r8[0x8]
800031f8:	4a 38       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800031fa:	91 39       	st.w	r8[0xc],r9
		 chunk.c = chunk.b;
800031fc:	4a 28       	lddpc	r8,80003284 <calculate_hash+0x3a4>
800031fe:	70 19       	ld.w	r9,r8[0x4]
80003200:	4a 18       	lddpc	r8,80003284 <calculate_hash+0x3a4>
80003202:	91 29       	st.w	r8[0x8],r9
		 chunk.b = chunk.a;
80003204:	4a 08       	lddpc	r8,80003284 <calculate_hash+0x3a4>
80003206:	70 09       	ld.w	r9,r8[0x0]
80003208:	49 f8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
8000320a:	91 19       	st.w	r8[0x4],r9
		 chunk.a = t1 + t2;
8000320c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003210:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003214:	10 09       	add	r9,r8
80003216:	49 c8       	lddpc	r8,80003284 <calculate_hash+0x3a4>
80003218:	91 09       	st.w	r8[0x0],r9
	 for (i = 0; i < 8; i++)
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
8000321a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000321e:	2f f8       	sub	r8,-1
80003220:	ef 48 ff d4 	st.w	r7[-44],r8
80003224:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003228:	e0 48 00 3f 	cp.w	r8,63
8000322c:	fe 9a ff 57 	brle	800030da <calculate_hash+0x1fa>
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
80003230:	30 08       	mov	r8,0
80003232:	ef 48 ff d4 	st.w	r7[-44],r8
80003236:	c1 d8       	rjmp	80003270 <calculate_hash+0x390>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
80003238:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000323c:	a3 68       	lsl	r8,0x2
8000323e:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003242:	f2 08 00 08 	add	r8,r9,r8
80003246:	ee fa ff d4 	ld.w	r10,r7[-44]
8000324a:	49 39       	lddpc	r9,80003294 <calculate_hash+0x3b4>
8000324c:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80003250:	ee f9 ff d4 	ld.w	r9,r7[-44]
80003254:	a3 69       	lsl	r9,0x2
80003256:	ee fb ff ec 	ld.w	r11,r7[-20]
8000325a:	f6 09 00 09 	add	r9,r11,r9
8000325e:	72 09       	ld.w	r9,r9[0x0]
80003260:	f4 09 00 09 	add	r9,r10,r9
80003264:	91 09       	st.w	r8[0x0],r9
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
80003266:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000326a:	2f f8       	sub	r8,-1
8000326c:	ef 48 ff d4 	st.w	r7[-44],r8
80003270:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003274:	58 78       	cp.w	r8,7
80003276:	fe 9a ff e1 	brle	80003238 <calculate_hash+0x358>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
	 }
 }
8000327a:	2f 2d       	sub	sp,-56
8000327c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003280:	00 00       	add	r0,r0
80003282:	02 94       	mov	r4,r1
80003284:	00 00       	add	r0,r0
80003286:	09 a8       	ld.ub	r8,r4[0x2]
80003288:	80 00       	ld.sh	r0,r0[0x0]
8000328a:	32 9c       	mov	r12,41
8000328c:	00 00       	add	r0,r0
8000328e:	02 d4       	st.w	--r1,r4
80003290:	80 00       	ld.sh	r0,r0[0x0]
80003292:	33 14       	mov	r4,49
80003294:	80 00       	ld.sh	r0,r0[0x0]
80003296:	ec 20 80 00 	sub	r0,819200
8000329a:	ec 40 eb cd 	cp.w	r0,846797

8000329c <PadtheMessage>:


 void PadtheMessage(uint8_t message_length)
 {
8000329c:	eb cd 40 80 	pushm	r7,lr
800032a0:	1a 97       	mov	r7,sp
800032a2:	20 3d       	sub	sp,12
800032a4:	18 98       	mov	r8,r12
800032a6:	ef 68 ff f4 	st.b	r7[-12],r8
	 unsigned char i;
	 unsigned short int message_length_bits;
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];
800032aa:	49 a8       	lddpc	r8,80003310 <PadtheMessage+0x74>
800032ac:	ef 48 ff fc 	st.w	r7[-4],r8

	 message_length_bits = message_length << 3;
800032b0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800032b4:	a3 78       	lsl	r8,0x3
800032b6:	ef 58 ff fa 	st.h	r7[-6],r8
	 Padded_Message[message_length++] = 0x80;
800032ba:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800032be:	49 5a       	lddpc	r10,80003310 <PadtheMessage+0x74>
800032c0:	38 08       	mov	r8,-128
800032c2:	f4 09 0b 08 	st.b	r10[r9],r8
800032c6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800032ca:	2f f8       	sub	r8,-1
800032cc:	ef 68 ff f4 	st.b	r7[-12],r8

	 for (i = message_length; i < 64; i++)
800032d0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800032d4:	ef 68 ff f9 	st.b	r7[-7],r8
800032d8:	c0 c8       	rjmp	800032f0 <PadtheMessage+0x54>
	 {
		Padded_Message[i] = 0x00;
800032da:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800032de:	48 da       	lddpc	r10,80003310 <PadtheMessage+0x74>
800032e0:	30 08       	mov	r8,0
800032e2:	f4 09 0b 08 	st.b	r10[r9],r8
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];

	 message_length_bits = message_length << 3;
	 Padded_Message[message_length++] = 0x80;

	 for (i = message_length; i < 64; i++)
800032e6:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800032ea:	2f f8       	sub	r8,-1
800032ec:	ef 68 ff f9 	st.b	r7[-7],r8
800032f0:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800032f4:	33 f8       	mov	r8,63
800032f6:	f0 09 18 00 	cp.b	r9,r8
800032fa:	fe 98 ff f0 	brls	800032da <PadtheMessage+0x3e>
	 {
		Padded_Message[i] = 0x00;
	 }

	 //ptrPadded_Message = (unsigned long int *)&Padded_Message[60];
	 ptrPadded_Message[15] = (unsigned long int)message_length_bits;
800032fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003302:	2c 48       	sub	r8,-60
80003304:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80003308:	91 09       	st.w	r8[0x0],r9
	 //Padded_Message[62] = *((unsigned char *)&message_length_bits);
	 //Padded_Message[63] = *((unsigned char *)&message_length_bits + 1);
 }
8000330a:	2f dd       	sub	sp,-12
8000330c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003310:	00 00       	add	r0,r0
80003312:	02 94       	mov	r4,r1

80003314 <Rotate_right>:

 unsigned long int Rotate_right (unsigned long int number, int bits)
 {
80003314:	eb cd 40 80 	pushm	r7,lr
80003318:	1a 97       	mov	r7,sp
8000331a:	20 3d       	sub	sp,12
8000331c:	ef 4c ff f8 	st.w	r7[-8],r12
80003320:	ef 4b ff f4 	st.w	r7[-12],r11
	 unsigned long int bit_mask = ((unsigned long int)2 << bits) - 1;
80003324:	30 29       	mov	r9,2
80003326:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000332a:	f2 08 09 48 	lsl	r8,r9,r8
8000332e:	20 18       	sub	r8,1
80003330:	ef 48 ff fc 	st.w	r7[-4],r8
	 return ((number >> bits) | ((number & bit_mask) << (32 - bits)));
80003334:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003338:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000333c:	f2 08 0a 49 	lsr	r9,r9,r8
80003340:	ee fa ff f8 	ld.w	r10,r7[-8]
80003344:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003348:	10 6a       	and	r10,r8
8000334a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000334e:	f0 08 11 20 	rsub	r8,r8,32
80003352:	f4 08 09 48 	lsl	r8,r10,r8
80003356:	f3 e8 10 08 	or	r8,r9,r8
 }
8000335a:	10 9c       	mov	r12,r8
8000335c:	2f dd       	sub	sp,-12
8000335e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003362:	d7 03       	nop

80003364 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
80003364:	eb cd 40 80 	pushm	r7,lr
80003368:	1a 97       	mov	r7,sp
8000336a:	20 1d       	sub	sp,4
8000336c:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003370:	ee fb ff fc 	ld.w	r11,r7[-4]
80003374:	30 1c       	mov	r12,1
80003376:	f0 1f 00 03 	mcall	80003380 <sysclk_enable_hsb_module+0x1c>
}
8000337a:	2f fd       	sub	sp,-4
8000337c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003380:	80 00       	ld.sh	r0,r0[0x0]
80003382:	bf 00       	ld.d	r0,pc

80003384 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80003384:	eb cd 40 80 	pushm	r7,lr
80003388:	1a 97       	mov	r7,sp
8000338a:	20 1d       	sub	sp,4
8000338c:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003390:	ee fb ff fc 	ld.w	r11,r7[-4]
80003394:	30 2c       	mov	r12,2
80003396:	f0 1f 00 03 	mcall	800033a0 <sysclk_enable_pba_module+0x1c>
}
8000339a:	2f fd       	sub	sp,-4
8000339c:	e3 cd 80 80 	ldm	sp++,r7,pc
800033a0:	80 00       	ld.sh	r0,r0[0x0]
800033a2:	bf 00       	ld.d	r0,pc

800033a4 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
800033a4:	eb cd 40 80 	pushm	r7,lr
800033a8:	1a 97       	mov	r7,sp
800033aa:	20 1d       	sub	sp,4
800033ac:	ef 4c ff fc 	st.w	r7[-4],r12
	switch ((uintptr_t)module) {
800033b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033b4:	fe 58 14 00 	cp.w	r8,-60416
800033b8:	e0 80 00 a5 	breq	80003502 <sysclk_enable_peripheral_clock+0x15e>
800033bc:	e0 8b 00 40 	brhi	8000343c <sysclk_enable_peripheral_clock+0x98>
800033c0:	fe 48 24 00 	cp.w	r8,-121856
800033c4:	e0 80 00 d9 	breq	80003576 <sysclk_enable_peripheral_clock+0x1d2>
800033c8:	e0 8b 00 1e 	brhi	80003404 <sysclk_enable_peripheral_clock+0x60>
800033cc:	fe 48 10 00 	cp.w	r8,-126976
800033d0:	e0 80 00 b9 	breq	80003542 <sysclk_enable_peripheral_clock+0x19e>
800033d4:	e0 8b 00 0b 	brhi	800033ea <sysclk_enable_peripheral_clock+0x46>
800033d8:	fc 58 00 00 	cp.w	r8,-196608
800033dc:	e0 80 00 e0 	breq	8000359c <sysclk_enable_peripheral_clock+0x1f8>
800033e0:	fe 48 00 00 	cp.w	r8,-131072
800033e4:	e0 80 00 b3 	breq	8000354a <sysclk_enable_peripheral_clock+0x1a6>
		break;
#endif

	default:
		Assert(false);
		return;
800033e8:	cd e8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800033ea:	fe 48 1c 00 	cp.w	r8,-123904
800033ee:	e0 80 00 bc 	breq	80003566 <sysclk_enable_peripheral_clock+0x1c2>
800033f2:	fe 48 20 00 	cp.w	r8,-122880
800033f6:	e0 80 00 bc 	breq	8000356e <sysclk_enable_peripheral_clock+0x1ca>
800033fa:	fe 48 14 00 	cp.w	r8,-125952
800033fe:	e0 80 00 ad 	breq	80003558 <sysclk_enable_peripheral_clock+0x1b4>
		break;
#endif

	default:
		Assert(false);
		return;
80003402:	cd 18       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003404:	fe 58 00 00 	cp.w	r8,-65536
80003408:	c5 60       	breq	800034b4 <sysclk_enable_peripheral_clock+0x110>
8000340a:	e0 8b 00 0f 	brhi	80003428 <sysclk_enable_peripheral_clock+0x84>
8000340e:	fe 48 40 00 	cp.w	r8,-114688
80003412:	e0 80 00 b6 	breq	8000357e <sysclk_enable_peripheral_clock+0x1da>
80003416:	fe 48 80 00 	cp.w	r8,-98304
8000341a:	e0 80 00 bd 	breq	80003594 <sysclk_enable_peripheral_clock+0x1f0>
8000341e:	fe 48 28 00 	cp.w	r8,-120832
80003422:	e0 80 00 b2 	breq	80003586 <sysclk_enable_peripheral_clock+0x1e2>
		break;
#endif

	default:
		Assert(false);
		return;
80003426:	cb f8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003428:	fe 58 0c 00 	cp.w	r8,-62464
8000342c:	c4 b0       	breq	800034c2 <sysclk_enable_peripheral_clock+0x11e>
8000342e:	fe 58 10 00 	cp.w	r8,-61440
80003432:	c3 d0       	breq	800034ac <sysclk_enable_peripheral_clock+0x108>
80003434:	fe 58 08 00 	cp.w	r8,-63488
80003438:	c3 60       	breq	800034a4 <sysclk_enable_peripheral_clock+0x100>
		break;
#endif

	default:
		Assert(false);
		return;
8000343a:	cb 58       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000343c:	fe 58 30 00 	cp.w	r8,-53248
80003440:	c5 50       	breq	800034ea <sysclk_enable_peripheral_clock+0x146>
80003442:	e0 8b 00 18 	brhi	80003472 <sysclk_enable_peripheral_clock+0xce>
80003446:	fe 58 20 00 	cp.w	r8,-57344
8000344a:	c6 80       	breq	8000351a <sysclk_enable_peripheral_clock+0x176>
8000344c:	e0 8b 00 09 	brhi	8000345e <sysclk_enable_peripheral_clock+0xba>
80003450:	fe 58 18 00 	cp.w	r8,-59392
80003454:	c5 b0       	breq	8000350a <sysclk_enable_peripheral_clock+0x166>
80003456:	fe 58 1c 00 	cp.w	r8,-58368
8000345a:	c5 c0       	breq	80003512 <sysclk_enable_peripheral_clock+0x16e>
		break;
#endif

	default:
		Assert(false);
		return;
8000345c:	ca 48       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000345e:	fe 58 28 00 	cp.w	r8,-55296
80003462:	c3 c0       	breq	800034da <sysclk_enable_peripheral_clock+0x136>
80003464:	fe 58 2c 00 	cp.w	r8,-54272
80003468:	c3 d0       	breq	800034e2 <sysclk_enable_peripheral_clock+0x13e>
8000346a:	fe 58 24 00 	cp.w	r8,-56320
8000346e:	c3 20       	breq	800034d2 <sysclk_enable_peripheral_clock+0x12e>
		break;
#endif

	default:
		Assert(false);
		return;
80003470:	c9 a8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003472:	fe 58 40 00 	cp.w	r8,-49152
80003476:	c6 20       	breq	8000353a <sysclk_enable_peripheral_clock+0x196>
80003478:	e0 8b 00 0c 	brhi	80003490 <sysclk_enable_peripheral_clock+0xec>
8000347c:	fe 58 38 00 	cp.w	r8,-51200
80003480:	c5 50       	breq	8000352a <sysclk_enable_peripheral_clock+0x186>
80003482:	fe 58 3c 00 	cp.w	r8,-50176
80003486:	c2 20       	breq	800034ca <sysclk_enable_peripheral_clock+0x126>
80003488:	fe 58 34 00 	cp.w	r8,-52224
8000348c:	c4 b0       	breq	80003522 <sysclk_enable_peripheral_clock+0x17e>
		break;
#endif

	default:
		Assert(false);
		return;
8000348e:	c8 b8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003490:	fe 58 50 00 	cp.w	r8,-45056
80003494:	c2 f0       	breq	800034f2 <sysclk_enable_peripheral_clock+0x14e>
80003496:	fe 58 54 00 	cp.w	r8,-44032
8000349a:	c3 00       	breq	800034fa <sysclk_enable_peripheral_clock+0x156>
8000349c:	fe 58 44 00 	cp.w	r8,-48128
800034a0:	c4 90       	breq	80003532 <sysclk_enable_peripheral_clock+0x18e>
		break;
#endif

	default:
		Assert(false);
		return;
800034a2:	c8 18       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
	case AVR32_INTC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_INTC);
800034a4:	30 0c       	mov	r12,0
800034a6:	f0 1f 00 42 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
800034aa:	c7 d8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_GPIO_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_GPIO);
800034ac:	30 1c       	mov	r12,1
800034ae:	f0 1f 00 40 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
800034b2:	c7 98       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PDCA_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
800034b4:	30 4c       	mov	r12,4
800034b6:	f0 1f 00 3f 	mcall	800035b0 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pba_module(SYSCLK_PDCA_PB);
800034ba:	30 2c       	mov	r12,2
800034bc:	f0 1f 00 3c 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
800034c0:	c7 28       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PM);
800034c2:	30 3c       	mov	r12,3
800034c4:	f0 1f 00 3a 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
800034c8:	c6 e8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ADC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ADC);
800034ca:	30 4c       	mov	r12,4
800034cc:	f0 1f 00 38 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
800034d0:	c6 a8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI0);
800034d2:	30 5c       	mov	r12,5
800034d4:	f0 1f 00 36 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
800034d8:	c6 68       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
800034da:	30 6c       	mov	r12,6
800034dc:	f0 1f 00 34 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
800034e0:	c6 28       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
800034e2:	30 7c       	mov	r12,7
800034e4:	f0 1f 00 32 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
800034e8:	c5 e8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
800034ea:	30 8c       	mov	r12,8
800034ec:	f0 1f 00 30 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
800034f0:	c5 a8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
800034f2:	30 9c       	mov	r12,9
800034f4:	f0 1f 00 2e 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
800034f8:	c5 68       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
800034fa:	30 ac       	mov	r12,10
800034fc:	f0 1f 00 2c 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
80003500:	c5 28       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART0);
80003502:	30 bc       	mov	r12,11
80003504:	f0 1f 00 2a 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
80003508:	c4 e8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART1);
8000350a:	30 cc       	mov	r12,12
8000350c:	f0 1f 00 28 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
80003510:	c4 a8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART2_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
80003512:	30 dc       	mov	r12,13
80003514:	f0 1f 00 26 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
80003518:	c4 68       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART3_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART3);
8000351a:	30 ec       	mov	r12,14
8000351c:	f0 1f 00 24 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
80003520:	c4 28       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SSC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SSC);
80003522:	30 fc       	mov	r12,15
80003524:	f0 1f 00 22 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
80003528:	c3 e8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC0);
8000352a:	31 0c       	mov	r12,16
8000352c:	f0 1f 00 20 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
80003530:	c3 a8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC1);
80003532:	31 1c       	mov	r12,17
80003534:	f0 1f 00 1e 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
80003538:	c3 68       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ABDAC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DAC);
8000353a:	31 2c       	mov	r12,18
8000353c:	f0 1f 00 1c 	mcall	800035ac <sysclk_enable_peripheral_clock+0x208>
		break;
80003540:	c3 28       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_HMATRIX_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
80003542:	30 0c       	mov	r12,0
80003544:	f0 1f 00 1c 	mcall	800035b4 <sysclk_enable_peripheral_clock+0x210>
		break;
80003548:	c2 e8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USBB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000354a:	30 3c       	mov	r12,3
8000354c:	f0 1f 00 19 	mcall	800035b0 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80003550:	30 1c       	mov	r12,1
80003552:	f0 1f 00 19 	mcall	800035b4 <sysclk_enable_peripheral_clock+0x210>
		break;
80003556:	c2 78       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_FLASHC_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_FLASHC_DATA);
80003558:	30 0c       	mov	r12,0
8000355a:	f0 1f 00 16 	mcall	800035b0 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_FLASHC_REGS);
8000355e:	30 2c       	mov	r12,2
80003560:	f0 1f 00 15 	mcall	800035b4 <sysclk_enable_peripheral_clock+0x210>
		break;
80003564:	c2 08       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SMC_REGS);
80003566:	30 3c       	mov	r12,3
80003568:	f0 1f 00 13 	mcall	800035b4 <sysclk_enable_peripheral_clock+0x210>
		break;
8000356c:	c1 c8       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SDRAMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SDRAMC_REGS);
8000356e:	30 4c       	mov	r12,4
80003570:	f0 1f 00 11 	mcall	800035b4 <sysclk_enable_peripheral_clock+0x210>
		break;
80003574:	c1 88       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ECCHRS_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_ECC);
80003576:	30 5c       	mov	r12,5
80003578:	f0 1f 00 0f 	mcall	800035b4 <sysclk_enable_peripheral_clock+0x210>
		break;
8000357c:	c1 48       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MCI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MCI);
8000357e:	30 6c       	mov	r12,6
80003580:	f0 1f 00 0d 	mcall	800035b4 <sysclk_enable_peripheral_clock+0x210>
		break;
80003584:	c1 08       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_BUSMON_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_BUSMON_HSB);
80003586:	30 8c       	mov	r12,8
80003588:	f0 1f 00 0a 	mcall	800035b0 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_BUSMON);
8000358c:	30 7c       	mov	r12,7
8000358e:	f0 1f 00 0a 	mcall	800035b4 <sysclk_enable_peripheral_clock+0x210>
		break;
80003592:	c0 98       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MSI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MSI);
80003594:	30 8c       	mov	r12,8
80003596:	f0 1f 00 08 	mcall	800035b4 <sysclk_enable_peripheral_clock+0x210>
		break;
8000359a:	c0 58       	rjmp	800035a4 <sysclk_enable_peripheral_clock+0x200>

#if defined(AVR32_AES_ADDRESS)
	case AVR32_AES_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_AES);
8000359c:	30 9c       	mov	r12,9
8000359e:	f0 1f 00 06 	mcall	800035b4 <sysclk_enable_peripheral_clock+0x210>
		break;
800035a2:	d7 03       	nop

	default:
		Assert(false);
		return;
	}
}
800035a4:	2f fd       	sub	sp,-4
800035a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800035aa:	00 00       	add	r0,r0
800035ac:	80 00       	ld.sh	r0,r0[0x0]
800035ae:	33 84       	mov	r4,56
800035b0:	80 00       	ld.sh	r0,r0[0x0]
800035b2:	33 64       	mov	r4,54
800035b4:	80 00       	ld.sh	r0,r0[0x0]
800035b6:	bf 74       	lsl	r4,0x1f

800035b8 <tc_irq>:
 * The ISR handles RC compare interrupt and sets the update_timer flag to
 * update the timer value.
 */
__attribute__((__interrupt__))
static void tc_irq(void)
{
800035b8:	eb cd 40 80 	pushm	r7,lr
800035bc:	1a 97       	mov	r7,sp
	// Increment the ms seconds counter
	tc_tick++;
800035be:	4a 68       	lddpc	r8,80003654 <tc_irq+0x9c>
800035c0:	70 08       	ld.w	r8,r8[0x0]
800035c2:	f0 c9 ff ff 	sub	r9,r8,-1
800035c6:	4a 48       	lddpc	r8,80003654 <tc_irq+0x9c>
800035c8:	91 09       	st.w	r8[0x0],r9
	 * in the Watch Window.
	 */

	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
800035ca:	30 0b       	mov	r11,0
800035cc:	fe 7c 38 00 	mov	r12,-51200
800035d0:	f0 1f 00 22 	mcall	80003658 <tc_irq+0xa0>

	if (entry_mode_status == NO_MODE_SELECTED)
800035d4:	4a 28       	lddpc	r8,8000365c <tc_irq+0xa4>
800035d6:	11 88       	ld.ub	r8,r8[0x0]
800035d8:	5c 58       	castu.b	r8
800035da:	c1 51       	brne	80003604 <tc_irq+0x4c>
	{
		if (check_programming_mode_entry_sequence() == true)
800035dc:	f0 1f 00 21 	mcall	80003660 <tc_irq+0xa8>
800035e0:	18 98       	mov	r8,r12
800035e2:	58 08       	cp.w	r8,0
800035e4:	c0 50       	breq	800035ee <tc_irq+0x36>
		{
			entry_mode_status = PROGRAMMING_MODE;
800035e6:	49 e9       	lddpc	r9,8000365c <tc_irq+0xa4>
800035e8:	30 18       	mov	r8,1
800035ea:	b2 88       	st.b	r9[0x0],r8
800035ec:	c0 c8       	rjmp	80003604 <tc_irq+0x4c>
		}
		else if (check_normal_mode_entry_sequence() == true)
800035ee:	f0 1f 00 1e 	mcall	80003664 <tc_irq+0xac>
800035f2:	18 98       	mov	r8,r12
800035f4:	58 08       	cp.w	r8,0
800035f6:	c0 70       	breq	80003604 <tc_irq+0x4c>
		{
			entry_mode_status = NORMAL_MODE;
800035f8:	49 99       	lddpc	r9,8000365c <tc_irq+0xa4>
800035fa:	30 28       	mov	r8,2
800035fc:	b2 88       	st.b	r9[0x0],r8
			pass_code = temp_password;
800035fe:	49 b8       	lddpc	r8,80003668 <tc_irq+0xb0>
80003600:	49 b9       	lddpc	r9,8000366c <tc_irq+0xb4>
80003602:	91 09       	st.w	r8[0x0],r9
		}
	}
	
	if (entry_mode_status == PROGRAMMING_MODE)
80003604:	49 68       	lddpc	r8,8000365c <tc_irq+0xa4>
80003606:	11 88       	ld.ub	r8,r8[0x0]
80003608:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000360c:	30 18       	mov	r8,1
8000360e:	f0 09 18 00 	cp.b	r9,r8
80003612:	c0 e1       	brne	8000362e <tc_irq+0x76>
	{
		if (!mode_selected)
80003614:	49 78       	lddpc	r8,80003670 <tc_irq+0xb8>
80003616:	11 88       	ld.ub	r8,r8[0x0]
80003618:	5c 58       	castu.b	r8
8000361a:	ec 18 00 01 	eorl	r8,0x1
8000361e:	5c 58       	castu.b	r8
80003620:	c0 40       	breq	80003628 <tc_irq+0x70>
		{
			check_for_mode_selected();
80003622:	f0 1f 00 15 	mcall	80003674 <tc_irq+0xbc>
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
80003626:	c0 e8       	rjmp	80003642 <tc_irq+0x8a>
80003628:	f0 1f 00 14 	mcall	80003678 <tc_irq+0xc0>
8000362c:	c0 b8       	rjmp	80003642 <tc_irq+0x8a>
				//save_to_mcu_flash();
			}
		}
	}

	else if (entry_mode_status == NORMAL_MODE)
8000362e:	48 c8       	lddpc	r8,8000365c <tc_irq+0xa4>
80003630:	11 88       	ld.ub	r8,r8[0x0]
80003632:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003636:	30 28       	mov	r8,2
80003638:	f0 09 18 00 	cp.b	r9,r8
8000363c:	c0 31       	brne	80003642 <tc_irq+0x8a>
	{
		read_password();
8000363e:	f0 1f 00 10 	mcall	8000367c <tc_irq+0xc4>
	



	// specify that an interrupt has been raised
	update_timer = true;
80003642:	49 09       	lddpc	r9,80003680 <tc_irq+0xc8>
80003644:	30 18       	mov	r8,1
80003646:	b2 88       	st.b	r9[0x0],r8
	// Toggle the GPIO line
	gpio_tgl_gpio_pin(EXAMPLE_TOGGLE_PIN);
80003648:	30 3c       	mov	r12,3
8000364a:	f0 1f 00 0f 	mcall	80003684 <tc_irq+0xcc>
}
8000364e:	e3 cd 40 80 	ldm	sp++,r7,lr
80003652:	d6 03       	rete
80003654:	00 00       	add	r0,r0
80003656:	03 d4       	ld.ub	r4,r1[0x5]
80003658:	80 00       	ld.sh	r0,r0[0x0]
8000365a:	98 b2       	ld.uh	r2,r12[0x6]
8000365c:	00 00       	add	r0,r0
8000365e:	03 dc       	ld.ub	r12,r1[0x5]
80003660:	80 00       	ld.sh	r0,r0[0x0]
80003662:	3a 88       	mov	r8,-88
80003664:	80 00       	ld.sh	r0,r0[0x0]
80003666:	3b 14       	mov	r4,-79
80003668:	00 00       	add	r0,r0
8000366a:	09 a4       	ld.ub	r4,r4[0x2]
8000366c:	00 00       	add	r0,r0
8000366e:	02 48       	or	r8,r1
80003670:	00 00       	add	r0,r0
80003672:	03 d8       	ld.ub	r8,r1[0x5]
80003674:	80 00       	ld.sh	r0,r0[0x0]
80003676:	3c 30       	mov	r0,-61
80003678:	80 00       	ld.sh	r0,r0[0x0]
8000367a:	3c 44       	mov	r4,-60
8000367c:	80 00       	ld.sh	r0,r0[0x0]
8000367e:	3d 94       	mov	r4,-39
80003680:	00 00       	add	r0,r0
80003682:	01 2c       	ld.uh	r12,r0++
80003684:	80 00       	ld.sh	r0,r0[0x0]
80003686:	8e 6e       	ld.sh	lr,r7[0xc]

80003688 <is_button_released>:

bool is_button_released(void)
{
80003688:	eb cd 40 80 	pushm	r7,lr
8000368c:	1a 97       	mov	r7,sp
	if ((check_all_buttons_high() == true) && (button_released == false))
8000368e:	f0 1f 00 0b 	mcall	800036b8 <is_button_released+0x30>
80003692:	18 98       	mov	r8,r12
80003694:	58 08       	cp.w	r8,0
80003696:	c0 b0       	breq	800036ac <is_button_released+0x24>
80003698:	48 98       	lddpc	r8,800036bc <is_button_released+0x34>
8000369a:	11 88       	ld.ub	r8,r8[0x0]
8000369c:	5c 58       	castu.b	r8
8000369e:	ec 18 00 01 	eorl	r8,0x1
800036a2:	5c 58       	castu.b	r8
800036a4:	c0 40       	breq	800036ac <is_button_released+0x24>
	{
		button_released = true;
800036a6:	48 69       	lddpc	r9,800036bc <is_button_released+0x34>
800036a8:	30 18       	mov	r8,1
800036aa:	b2 88       	st.b	r9[0x0],r8
	}
	return button_released;
800036ac:	48 48       	lddpc	r8,800036bc <is_button_released+0x34>
800036ae:	11 88       	ld.ub	r8,r8[0x0]
800036b0:	5c 58       	castu.b	r8
}
800036b2:	10 9c       	mov	r12,r8
800036b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800036b8:	80 00       	ld.sh	r0,r0[0x0]
800036ba:	38 c8       	mov	r8,-116
800036bc:	00 00       	add	r0,r0
800036be:	01 2d       	ld.uh	sp,r0++

800036c0 <Read_button>:

void Read_button(void)
{
800036c0:	eb cd 40 80 	pushm	r7,lr
800036c4:	1a 97       	mov	r7,sp
800036c6:	20 1d       	sub	sp,4
	uint8_t button_value = 0;
800036c8:	30 08       	mov	r8,0
800036ca:	ef 68 ff ff 	st.b	r7[-1],r8
	
	button_value = button_pressed();
800036ce:	f0 1f 00 3f 	mcall	800037c8 <Read_button+0x108>
800036d2:	18 98       	mov	r8,r12
800036d4:	ef 68 ff ff 	st.b	r7[-1],r8
	switch (button_value)
800036d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036dc:	58 48       	cp.w	r8,4
800036de:	c0 50       	breq	800036e8 <Read_button+0x28>
800036e0:	e0 48 00 ff 	cp.w	r8,255
800036e4:	c5 10       	breq	80003786 <Read_button+0xc6>
800036e6:	c2 88       	rjmp	80003736 <Read_button+0x76>
	{
		case ENTER_BUTTON:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
800036e8:	4b 98       	lddpc	r8,800037cc <Read_button+0x10c>
800036ea:	11 88       	ld.ub	r8,r8[0x0]
800036ec:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800036f0:	30 18       	mov	r8,1
800036f2:	f0 09 18 00 	cp.b	r9,r8
800036f6:	c0 d1       	brne	80003710 <Read_button+0x50>
			{
				if (mode_selected)
800036f8:	4b 68       	lddpc	r8,800037d0 <Read_button+0x110>
800036fa:	11 88       	ld.ub	r8,r8[0x0]
800036fc:	5c 58       	castu.b	r8
800036fe:	c4 60       	breq	8000378a <Read_button+0xca>
				{
					enter_button_status++;
80003700:	4b 58       	lddpc	r8,800037d4 <Read_button+0x114>
80003702:	11 88       	ld.ub	r8,r8[0x0]
80003704:	5c 58       	castu.b	r8
80003706:	2f f8       	sub	r8,-1
80003708:	5c 58       	castu.b	r8
8000370a:	4b 39       	lddpc	r9,800037d4 <Read_button+0x114>
8000370c:	b2 88       	st.b	r9[0x0],r8
			{
				normal_mode_password_entered = true;
			}

			
			break;
8000370e:	c4 38       	rjmp	80003794 <Read_button+0xd4>
				//else
				//{
					//mode_selected = true;
				//}
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
80003710:	4a f8       	lddpc	r8,800037cc <Read_button+0x10c>
80003712:	11 88       	ld.ub	r8,r8[0x0]
80003714:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003718:	30 28       	mov	r8,2
8000371a:	f0 09 18 00 	cp.b	r9,r8
8000371e:	c3 81       	brne	8000378e <Read_button+0xce>
80003720:	4a e8       	lddpc	r8,800037d8 <Read_button+0x118>
80003722:	11 88       	ld.ub	r8,r8[0x0]
80003724:	5c 58       	castu.b	r8
80003726:	ec 18 00 01 	eorl	r8,0x1
8000372a:	5c 58       	castu.b	r8
8000372c:	c3 30       	breq	80003792 <Read_button+0xd2>
			{
				normal_mode_password_entered = true;
8000372e:	4a b9       	lddpc	r9,800037d8 <Read_button+0x118>
80003730:	30 18       	mov	r8,1
80003732:	b2 88       	st.b	r9[0x0],r8
			}

			
			break;
80003734:	c3 08       	rjmp	80003794 <Read_button+0xd4>
		case NO_BUTTON:
		break;
		
		default:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
80003736:	4a 68       	lddpc	r8,800037cc <Read_button+0x10c>
80003738:	11 88       	ld.ub	r8,r8[0x0]
8000373a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000373e:	30 18       	mov	r8,1
80003740:	f0 09 18 00 	cp.b	r9,r8
80003744:	c1 31       	brne	8000376a <Read_button+0xaa>
			{
				if (mode_selected)
80003746:	4a 38       	lddpc	r8,800037d0 <Read_button+0x110>
80003748:	11 88       	ld.ub	r8,r8[0x0]
8000374a:	5c 58       	castu.b	r8
8000374c:	c0 70       	breq	8000375a <Read_button+0x9a>
				{
					store_passcode((uint32_t)button_value);
8000374e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003752:	10 9c       	mov	r12,r8
80003754:	f0 1f 00 22 	mcall	800037dc <Read_button+0x11c>
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003758:	c1 e8       	rjmp	80003794 <Read_button+0xd4>
				{
					store_passcode((uint32_t)button_value);
				}
				else
				{
					mode_chosen = button_value;
8000375a:	4a 29       	lddpc	r9,800037e0 <Read_button+0x120>
8000375c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003760:	b2 88       	st.b	r9[0x0],r8
					mode_selected = true;
80003762:	49 c9       	lddpc	r9,800037d0 <Read_button+0x110>
80003764:	30 18       	mov	r8,1
80003766:	b2 88       	st.b	r9[0x0],r8
80003768:	c1 68       	rjmp	80003794 <Read_button+0xd4>
				}
			}
			else if (entry_mode_status == NORMAL_MODE)
8000376a:	49 98       	lddpc	r8,800037cc <Read_button+0x10c>
8000376c:	11 88       	ld.ub	r8,r8[0x0]
8000376e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003772:	30 28       	mov	r8,2
80003774:	f0 09 18 00 	cp.b	r9,r8
80003778:	c0 e1       	brne	80003794 <Read_button+0xd4>
			{
				store_passcode((uint32_t)button_value);
8000377a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000377e:	10 9c       	mov	r12,r8
80003780:	f0 1f 00 17 	mcall	800037dc <Read_button+0x11c>
80003784:	c0 88       	rjmp	80003794 <Read_button+0xd4>

			
			break;
		}
		case NO_BUTTON:
		break;
80003786:	d7 03       	nop
80003788:	c0 68       	rjmp	80003794 <Read_button+0xd4>
			{
				normal_mode_password_entered = true;
			}

			
			break;
8000378a:	d7 03       	nop
8000378c:	c0 48       	rjmp	80003794 <Read_button+0xd4>
8000378e:	d7 03       	nop
80003790:	c0 28       	rjmp	80003794 <Read_button+0xd4>
80003792:	d7 03       	nop
			}

		}
	}	

	if (enter_button_status == WAITING_FOR_PASSCODE_SALT_ENTRY)
80003794:	49 08       	lddpc	r8,800037d4 <Read_button+0x114>
80003796:	11 88       	ld.ub	r8,r8[0x0]
80003798:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000379c:	30 58       	mov	r8,5
8000379e:	f0 09 18 00 	cp.b	r9,r8
800037a2:	c1 01       	brne	800037c2 <Read_button+0x102>
	{
		if (var_W_ticks++ > var_W)
800037a4:	49 08       	lddpc	r8,800037e4 <Read_button+0x124>
800037a6:	70 08       	ld.w	r8,r8[0x0]
800037a8:	49 09       	lddpc	r9,800037e8 <Read_button+0x128>
800037aa:	72 09       	ld.w	r9,r9[0x0]
800037ac:	12 38       	cp.w	r8,r9
800037ae:	5f b9       	srhi	r9
800037b0:	5c 59       	castu.b	r9
800037b2:	f0 ca ff ff 	sub	r10,r8,-1
800037b6:	48 c8       	lddpc	r8,800037e4 <Read_button+0x124>
800037b8:	91 0a       	st.w	r8[0x0],r10
800037ba:	58 09       	cp.w	r9,0
800037bc:	c0 30       	breq	800037c2 <Read_button+0x102>
		{
			calculate_salt();
800037be:	f0 1f 00 0c 	mcall	800037ec <Read_button+0x12c>
		}
	}	
}
800037c2:	2f fd       	sub	sp,-4
800037c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800037c8:	80 00       	ld.sh	r0,r0[0x0]
800037ca:	37 f0       	mov	r0,127
800037cc:	00 00       	add	r0,r0
800037ce:	03 dc       	ld.ub	r12,r1[0x5]
800037d0:	00 00       	add	r0,r0
800037d2:	03 d8       	ld.ub	r8,r1[0x5]
800037d4:	00 00       	add	r0,r0
800037d6:	03 da       	ld.ub	r10,r1[0x5]
800037d8:	00 00       	add	r0,r0
800037da:	03 d9       	ld.ub	r9,r1[0x5]
800037dc:	80 00       	ld.sh	r0,r0[0x0]
800037de:	3a 00       	mov	r0,-96
800037e0:	00 00       	add	r0,r0
800037e2:	01 2e       	ld.uh	lr,r0++
800037e4:	00 00       	add	r0,r0
800037e6:	02 90       	mov	r0,r1
800037e8:	00 00       	add	r0,r0
800037ea:	01 28       	ld.uh	r8,r0++
800037ec:	80 00       	ld.sh	r0,r0[0x0]
800037ee:	2c fc       	sub	r12,-49

800037f0 <button_pressed>:

uint8_t button_pressed (void)
{
800037f0:	eb cd 40 80 	pushm	r7,lr
800037f4:	1a 97       	mov	r7,sp
	
	is_button_released();
800037f6:	f0 1f 00 2a 	mcall	8000389c <button_pressed+0xac>

	if (button_released)
800037fa:	4a a8       	lddpc	r8,800038a0 <button_pressed+0xb0>
800037fc:	11 88       	ld.ub	r8,r8[0x0]
800037fe:	5c 58       	castu.b	r8
80003800:	c4 90       	breq	80003892 <button_pressed+0xa2>
	{		
		if (read_push_button(PB1, (uint8_t *)&PB1_Counter))
80003802:	4a 9b       	lddpc	r11,800038a4 <button_pressed+0xb4>
80003804:	30 ac       	mov	r12,10
80003806:	f0 1f 00 29 	mcall	800038a8 <button_pressed+0xb8>
8000380a:	18 98       	mov	r8,r12
8000380c:	58 08       	cp.w	r8,0
8000380e:	c0 90       	breq	80003820 <button_pressed+0x30>
		{
			LED_On(LED0);
80003810:	30 1c       	mov	r12,1
80003812:	f0 1f 00 27 	mcall	800038ac <button_pressed+0xbc>
			LED_Off(LED1 | LED2 | LED3);
80003816:	30 ec       	mov	r12,14
80003818:	f0 1f 00 26 	mcall	800038b0 <button_pressed+0xc0>
			//store_passcode(0L);
			return PUSH_BUTTON1;
8000381c:	30 08       	mov	r8,0
8000381e:	c3 c8       	rjmp	80003896 <button_pressed+0xa6>
		}
		else if (read_push_button(PB2, (uint8_t *)&PB2_Counter))
80003820:	4a 5b       	lddpc	r11,800038b4 <button_pressed+0xc4>
80003822:	30 bc       	mov	r12,11
80003824:	f0 1f 00 21 	mcall	800038a8 <button_pressed+0xb8>
80003828:	18 98       	mov	r8,r12
8000382a:	58 08       	cp.w	r8,0
8000382c:	c0 90       	breq	8000383e <button_pressed+0x4e>
		{
			LED_On(LED1);
8000382e:	30 2c       	mov	r12,2
80003830:	f0 1f 00 1f 	mcall	800038ac <button_pressed+0xbc>
			LED_Off(LED0 | LED2 | LED3);
80003834:	30 dc       	mov	r12,13
80003836:	f0 1f 00 1f 	mcall	800038b0 <button_pressed+0xc0>
			//store_passcode(1L);
			return PUSH_BUTTON2;
8000383a:	30 18       	mov	r8,1
8000383c:	c2 d8       	rjmp	80003896 <button_pressed+0xa6>
		}
		else if (read_push_button(PB3, (uint8_t *)&PB3_Counter))
8000383e:	49 fb       	lddpc	r11,800038b8 <button_pressed+0xc8>
80003840:	30 cc       	mov	r12,12
80003842:	f0 1f 00 1a 	mcall	800038a8 <button_pressed+0xb8>
80003846:	18 98       	mov	r8,r12
80003848:	58 08       	cp.w	r8,0
8000384a:	c0 90       	breq	8000385c <button_pressed+0x6c>
		{
			LED_On(LED2);
8000384c:	30 4c       	mov	r12,4
8000384e:	f0 1f 00 18 	mcall	800038ac <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED3);
80003852:	30 bc       	mov	r12,11
80003854:	f0 1f 00 17 	mcall	800038b0 <button_pressed+0xc0>
			//store_passcode(2L);
			return PUSH_BUTTON3;
80003858:	30 28       	mov	r8,2
8000385a:	c1 e8       	rjmp	80003896 <button_pressed+0xa6>
		}
		else if (read_push_button(PB4, (uint8_t *)&PB4_Counter))
8000385c:	49 8b       	lddpc	r11,800038bc <button_pressed+0xcc>
8000385e:	30 dc       	mov	r12,13
80003860:	f0 1f 00 12 	mcall	800038a8 <button_pressed+0xb8>
80003864:	18 98       	mov	r8,r12
80003866:	58 08       	cp.w	r8,0
80003868:	c0 90       	breq	8000387a <button_pressed+0x8a>
		{
			LED_On(LED3);
8000386a:	30 8c       	mov	r12,8
8000386c:	f0 1f 00 10 	mcall	800038ac <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED2);
80003870:	30 7c       	mov	r12,7
80003872:	f0 1f 00 10 	mcall	800038b0 <button_pressed+0xc0>
			//store_passcode(3L);
			return PUSH_BUTTON4;
80003876:	30 38       	mov	r8,3
80003878:	c0 f8       	rjmp	80003896 <button_pressed+0xa6>
		}
		else if (read_push_button(PB_ENTER, (uint8_t *)&PB5_Counter))
8000387a:	49 2b       	lddpc	r11,800038c0 <button_pressed+0xd0>
8000387c:	32 ac       	mov	r12,42
8000387e:	f0 1f 00 0b 	mcall	800038a8 <button_pressed+0xb8>
80003882:	18 98       	mov	r8,r12
80003884:	58 08       	cp.w	r8,0
80003886:	c0 60       	breq	80003892 <button_pressed+0xa2>
		{
			device_unlocked = true;
80003888:	48 f9       	lddpc	r9,800038c4 <button_pressed+0xd4>
8000388a:	30 18       	mov	r8,1
8000388c:	b2 88       	st.b	r9[0x0],r8
			return ENTER_BUTTON;
8000388e:	30 48       	mov	r8,4
80003890:	c0 38       	rjmp	80003896 <button_pressed+0xa6>
		}
	}
	return NO_BUTTON;
80003892:	e0 68 00 ff 	mov	r8,255
}
80003896:	10 9c       	mov	r12,r8
80003898:	e3 cd 80 80 	ldm	sp++,r7,pc
8000389c:	80 00       	ld.sh	r0,r0[0x0]
8000389e:	36 88       	mov	r8,104
800038a0:	00 00       	add	r0,r0
800038a2:	01 2d       	ld.uh	sp,r0++
800038a4:	00 00       	add	r0,r0
800038a6:	04 00       	add	r0,r2
800038a8:	80 00       	ld.sh	r0,r0[0x0]
800038aa:	39 48       	mov	r8,-108
800038ac:	80 00       	ld.sh	r0,r0[0x0]
800038ae:	43 58       	lddsp	r8,sp[0xd4]
800038b0:	80 00       	ld.sh	r0,r0[0x0]
800038b2:	42 a0       	lddsp	r0,sp[0xa8]
800038b4:	00 00       	add	r0,r0
800038b6:	04 01       	add	r1,r2
800038b8:	00 00       	add	r0,r0
800038ba:	04 02       	add	r2,r2
800038bc:	00 00       	add	r0,r0
800038be:	04 03       	add	r3,r2
800038c0:	00 00       	add	r0,r0
800038c2:	04 04       	add	r4,r2
800038c4:	00 00       	add	r0,r0
800038c6:	02 88       	andn	r8,r1

800038c8 <check_all_buttons_high>:

bool check_all_buttons_high(void)
{
800038c8:	eb cd 40 80 	pushm	r7,lr
800038cc:	1a 97       	mov	r7,sp
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
800038ce:	30 ac       	mov	r12,10
800038d0:	f0 1f 00 1c 	mcall	80003940 <check_all_buttons_high+0x78>
800038d4:	18 98       	mov	r8,r12
800038d6:	58 18       	cp.w	r8,1
800038d8:	c2 b1       	brne	8000392e <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
800038da:	30 bc       	mov	r12,11
800038dc:	f0 1f 00 19 	mcall	80003940 <check_all_buttons_high+0x78>
800038e0:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
800038e2:	58 18       	cp.w	r8,1
800038e4:	c2 51       	brne	8000392e <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
800038e6:	30 cc       	mov	r12,12
800038e8:	f0 1f 00 16 	mcall	80003940 <check_all_buttons_high+0x78>
800038ec:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
800038ee:	58 18       	cp.w	r8,1
800038f0:	c1 f1       	brne	8000392e <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
800038f2:	30 dc       	mov	r12,13
800038f4:	f0 1f 00 13 	mcall	80003940 <check_all_buttons_high+0x78>
800038f8:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
800038fa:	58 18       	cp.w	r8,1
800038fc:	c1 91       	brne	8000392e <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
		&& (gpio_get_pin_value(ENTER_BUTTON) == 1))
800038fe:	30 4c       	mov	r12,4
80003900:	f0 1f 00 10 	mcall	80003940 <check_all_buttons_high+0x78>
80003904:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003906:	58 18       	cp.w	r8,1
80003908:	c1 31       	brne	8000392e <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
		&& (gpio_get_pin_value(ENTER_BUTTON) == 1))
	{
		if (button_released_iteration++ > 4)
8000390a:	48 f8       	lddpc	r8,80003944 <check_all_buttons_high+0x7c>
8000390c:	11 88       	ld.ub	r8,r8[0x0]
8000390e:	30 49       	mov	r9,4
80003910:	f2 08 18 00 	cp.b	r8,r9
80003914:	5f b9       	srhi	r9
80003916:	5c 59       	castu.b	r9
80003918:	2f f8       	sub	r8,-1
8000391a:	5c 58       	castu.b	r8
8000391c:	48 aa       	lddpc	r10,80003944 <check_all_buttons_high+0x7c>
8000391e:	b4 88       	st.b	r10[0x0],r8
80003920:	58 09       	cp.w	r9,0
80003922:	c0 a0       	breq	80003936 <check_all_buttons_high+0x6e>
		{
			button_released_iteration = 0;
80003924:	48 89       	lddpc	r9,80003944 <check_all_buttons_high+0x7c>
80003926:	30 08       	mov	r8,0
80003928:	b2 88       	st.b	r9[0x0],r8
			return true;
8000392a:	30 18       	mov	r8,1
8000392c:	c0 78       	rjmp	8000393a <check_all_buttons_high+0x72>
		}
	}
	else
	{
		button_released_iteration = 0;
8000392e:	48 69       	lddpc	r9,80003944 <check_all_buttons_high+0x7c>
80003930:	30 08       	mov	r8,0
80003932:	b2 88       	st.b	r9[0x0],r8
80003934:	c0 28       	rjmp	80003938 <check_all_buttons_high+0x70>

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003936:	d7 03       	nop
	else
	{
		button_released_iteration = 0;
	}

	return false;
80003938:	30 08       	mov	r8,0
}
8000393a:	10 9c       	mov	r12,r8
8000393c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	8d 64       	st.w	r6[0x18],r4
80003944:	00 00       	add	r0,r0
80003946:	04 0a       	add	r10,r2

80003948 <read_push_button>:

bool read_push_button(uint32_t pin, uint8_t *counter)
{
80003948:	eb cd 40 80 	pushm	r7,lr
8000394c:	1a 97       	mov	r7,sp
8000394e:	20 3d       	sub	sp,12
80003950:	ef 4c ff f8 	st.w	r7[-8],r12
80003954:	ef 4b ff f4 	st.w	r7[-12],r11
	bool button_status = false;
80003958:	30 08       	mov	r8,0
8000395a:	ef 68 ff ff 	st.b	r7[-1],r8

	if (gpio_get_pin_value(pin) == 0)
8000395e:	ee fc ff f8 	ld.w	r12,r7[-8]
80003962:	f0 1f 00 18 	mcall	800039c0 <read_push_button+0x78>
80003966:	18 98       	mov	r8,r12
80003968:	58 08       	cp.w	r8,0
8000396a:	c1 c1       	brne	800039a2 <read_push_button+0x5a>
	{
		(*counter)++;
8000396c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003970:	11 88       	ld.ub	r8,r8[0x0]
80003972:	2f f8       	sub	r8,-1
80003974:	5c 58       	castu.b	r8
80003976:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000397a:	b2 88       	st.b	r9[0x0],r8
		if (*counter >= 3)
8000397c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003980:	11 89       	ld.ub	r9,r8[0x0]
80003982:	30 28       	mov	r8,2
80003984:	f0 09 18 00 	cp.b	r9,r8
80003988:	e0 88 00 15 	brls	800039b2 <read_push_button+0x6a>
		{
			button_status = true;
8000398c:	30 18       	mov	r8,1
8000398e:	ef 68 ff ff 	st.b	r7[-1],r8
			//if (enter_pressed)
			//{
				//enter_pressed = false;	
				//Start_W_timer();
			//}
			*counter = 0;
80003992:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003996:	30 08       	mov	r8,0
80003998:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
8000399a:	48 b9       	lddpc	r9,800039c4 <read_push_button+0x7c>
8000399c:	30 08       	mov	r8,0
8000399e:	b2 88       	st.b	r9[0x0],r8
800039a0:	c0 a8       	rjmp	800039b4 <read_push_button+0x6c>
		}
	}
	else
	{
		button_status = false;
800039a2:	30 08       	mov	r8,0
800039a4:	ef 68 ff ff 	st.b	r7[-1],r8
		*counter = 0;
800039a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800039ac:	30 08       	mov	r8,0
800039ae:	b2 88       	st.b	r9[0x0],r8
800039b0:	c0 28       	rjmp	800039b4 <read_push_button+0x6c>
			//{
				//enter_pressed = false;	
				//Start_W_timer();
			//}
			*counter = 0;
			button_released = false;
800039b2:	d7 03       	nop
	else
	{
		button_status = false;
		*counter = 0;
	}
	return button_status;	
800039b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800039b8:	10 9c       	mov	r12,r8
800039ba:	2f dd       	sub	sp,-12
800039bc:	e3 cd 80 80 	ldm	sp++,r7,pc
800039c0:	80 00       	ld.sh	r0,r0[0x0]
800039c2:	8d 64       	st.w	r6[0x18],r4
800039c4:	00 00       	add	r0,r0
800039c6:	01 2d       	ld.uh	sp,r0++

800039c8 <push_buttons_init>:

void push_buttons_init(void)
{
800039c8:	eb cd 40 80 	pushm	r7,lr
800039cc:	1a 97       	mov	r7,sp
	gpio_configure_pin(PB1,GPIO_DIR_INPUT);
800039ce:	30 0b       	mov	r11,0
800039d0:	30 ac       	mov	r12,10
800039d2:	f0 1f 00 0b 	mcall	800039fc <push_buttons_init+0x34>
	gpio_configure_pin(PB2,GPIO_DIR_INPUT);
800039d6:	30 0b       	mov	r11,0
800039d8:	30 bc       	mov	r12,11
800039da:	f0 1f 00 09 	mcall	800039fc <push_buttons_init+0x34>
	gpio_configure_pin(PB3,GPIO_DIR_INPUT);
800039de:	30 0b       	mov	r11,0
800039e0:	30 cc       	mov	r12,12
800039e2:	f0 1f 00 07 	mcall	800039fc <push_buttons_init+0x34>
	gpio_configure_pin(PB4,GPIO_DIR_INPUT);
800039e6:	30 0b       	mov	r11,0
800039e8:	30 dc       	mov	r12,13
800039ea:	f0 1f 00 05 	mcall	800039fc <push_buttons_init+0x34>
	gpio_configure_pin(PB_ENTER,GPIO_DIR_INPUT);
800039ee:	30 0b       	mov	r11,0
800039f0:	32 ac       	mov	r12,42
800039f2:	f0 1f 00 03 	mcall	800039fc <push_buttons_init+0x34>
}
800039f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800039fa:	00 00       	add	r0,r0
800039fc:	80 00       	ld.sh	r0,r0[0x0]
800039fe:	8b b6       	st.w	r5[0x2c],r6

80003a00 <store_passcode>:

void store_passcode(uint32_t value)
{
80003a00:	eb cd 40 80 	pushm	r7,lr
80003a04:	1a 97       	mov	r7,sp
80003a06:	20 2d       	sub	sp,8
80003a08:	ef 4c ff f8 	st.w	r7[-8],r12
	unsigned char index = 0;
80003a0c:	30 08       	mov	r8,0
80003a0e:	ef 68 ff ff 	st.b	r7[-1],r8
	index = passcode_byte_index >> 4;
80003a12:	49 c8       	lddpc	r8,80003a80 <store_passcode+0x80>
80003a14:	11 88       	ld.ub	r8,r8[0x0]
80003a16:	5c 58       	castu.b	r8
80003a18:	a5 88       	lsr	r8,0x4
80003a1a:	ef 68 ff ff 	st.b	r7[-1],r8
	pass_code[index] = pass_code[index] | (value << ((passcode_byte_index & 0x0000000F) << 1));
80003a1e:	49 a8       	lddpc	r8,80003a84 <store_passcode+0x84>
80003a20:	70 09       	ld.w	r9,r8[0x0]
80003a22:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a26:	a3 68       	lsl	r8,0x2
80003a28:	10 09       	add	r9,r8
80003a2a:	49 78       	lddpc	r8,80003a84 <store_passcode+0x84>
80003a2c:	70 0a       	ld.w	r10,r8[0x0]
80003a2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a32:	a3 68       	lsl	r8,0x2
80003a34:	f4 08 00 08 	add	r8,r10,r8
80003a38:	70 0a       	ld.w	r10,r8[0x0]
80003a3a:	49 28       	lddpc	r8,80003a80 <store_passcode+0x80>
80003a3c:	11 88       	ld.ub	r8,r8[0x0]
80003a3e:	5c 58       	castu.b	r8
80003a40:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003a44:	a1 78       	lsl	r8,0x1
80003a46:	ee fb ff f8 	ld.w	r11,r7[-8]
80003a4a:	f6 08 09 48 	lsl	r8,r11,r8
80003a4e:	f5 e8 10 08 	or	r8,r10,r8
80003a52:	93 08       	st.w	r9[0x0],r8
	if (++passcode_byte_index >= 128)
80003a54:	48 b8       	lddpc	r8,80003a80 <store_passcode+0x80>
80003a56:	11 88       	ld.ub	r8,r8[0x0]
80003a58:	5c 58       	castu.b	r8
80003a5a:	2f f8       	sub	r8,-1
80003a5c:	5c 58       	castu.b	r8
80003a5e:	48 99       	lddpc	r9,80003a80 <store_passcode+0x80>
80003a60:	b2 88       	st.b	r9[0x0],r8
80003a62:	48 88       	lddpc	r8,80003a80 <store_passcode+0x80>
80003a64:	11 88       	ld.ub	r8,r8[0x0]
80003a66:	5c 58       	castu.b	r8
80003a68:	10 99       	mov	r9,r8
80003a6a:	30 08       	mov	r8,0
80003a6c:	f0 09 18 00 	cp.b	r9,r8
80003a70:	c0 44       	brge	80003a78 <store_passcode+0x78>
	{
		passcode_byte_index = 0;
80003a72:	48 49       	lddpc	r9,80003a80 <store_passcode+0x80>
80003a74:	30 08       	mov	r8,0
80003a76:	b2 88       	st.b	r9[0x0],r8
	}
	//inter_key_delay = ENABLED;
}
80003a78:	2f ed       	sub	sp,-8
80003a7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a7e:	00 00       	add	r0,r0
80003a80:	00 00       	add	r0,r0
80003a82:	02 89       	andn	r9,r1
80003a84:	00 00       	add	r0,r0
80003a86:	09 a4       	ld.ub	r4,r4[0x2]

80003a88 <check_programming_mode_entry_sequence>:

bool check_programming_mode_entry_sequence(void)
{
80003a88:	eb cd 40 80 	pushm	r7,lr
80003a8c:	1a 97       	mov	r7,sp
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
		&& gpio_get_pin_value(PB3) == 0
80003a8e:	30 ac       	mov	r12,10
80003a90:	f0 1f 00 1e 	mcall	80003b08 <check_programming_mode_entry_sequence+0x80>
80003a94:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003a96:	58 08       	cp.w	r8,0
80003a98:	c2 e1       	brne	80003af4 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
80003a9a:	30 cc       	mov	r12,12
80003a9c:	f0 1f 00 1b 	mcall	80003b08 <check_programming_mode_entry_sequence+0x80>
80003aa0:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003aa2:	58 08       	cp.w	r8,0
80003aa4:	c2 81       	brne	80003af4 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
80003aa6:	30 dc       	mov	r12,13
80003aa8:	f0 1f 00 18 	mcall	80003b08 <check_programming_mode_entry_sequence+0x80>
80003aac:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003aae:	58 08       	cp.w	r8,0
80003ab0:	c2 21       	brne	80003af4 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003ab2:	30 bc       	mov	r12,11
80003ab4:	f0 1f 00 15 	mcall	80003b08 <check_programming_mode_entry_sequence+0x80>
80003ab8:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003aba:	58 18       	cp.w	r8,1
80003abc:	c1 c1       	brne	80003af4 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003abe:	30 4c       	mov	r12,4
80003ac0:	f0 1f 00 12 	mcall	80003b08 <check_programming_mode_entry_sequence+0x80>
80003ac4:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003ac6:	58 18       	cp.w	r8,1
80003ac8:	c1 61       	brne	80003af4 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
	{
		if (programming_mode_sequence_counter++ >= 100)
80003aca:	49 18       	lddpc	r8,80003b0c <check_programming_mode_entry_sequence+0x84>
80003acc:	90 08       	ld.sh	r8,r8[0x0]
80003ace:	36 39       	mov	r9,99
80003ad0:	f2 08 19 00 	cp.h	r8,r9
80003ad4:	5f b9       	srhi	r9
80003ad6:	5c 59       	castu.b	r9
80003ad8:	2f f8       	sub	r8,-1
80003ada:	5c 88       	casts.h	r8
80003adc:	48 ca       	lddpc	r10,80003b0c <check_programming_mode_entry_sequence+0x84>
80003ade:	b4 08       	st.h	r10[0x0],r8
80003ae0:	58 09       	cp.w	r9,0
80003ae2:	c0 d0       	breq	80003afc <check_programming_mode_entry_sequence+0x74>
		{
			programming_mode_sequence_counter = 0;
80003ae4:	48 a9       	lddpc	r9,80003b0c <check_programming_mode_entry_sequence+0x84>
80003ae6:	30 08       	mov	r8,0
80003ae8:	b2 08       	st.h	r9[0x0],r8
			button_released = false;
80003aea:	48 a9       	lddpc	r9,80003b10 <check_programming_mode_entry_sequence+0x88>
80003aec:	30 08       	mov	r8,0
80003aee:	b2 88       	st.b	r9[0x0],r8
			return true;
80003af0:	30 18       	mov	r8,1
80003af2:	c0 78       	rjmp	80003b00 <check_programming_mode_entry_sequence+0x78>
		}
	}
	else
	{
		programming_mode_sequence_counter = 0;
80003af4:	48 69       	lddpc	r9,80003b0c <check_programming_mode_entry_sequence+0x84>
80003af6:	30 08       	mov	r8,0
80003af8:	b2 08       	st.h	r9[0x0],r8
80003afa:	c0 28       	rjmp	80003afe <check_programming_mode_entry_sequence+0x76>
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003afc:	d7 03       	nop
	}
	else
	{
		programming_mode_sequence_counter = 0;
	}
	return false;
80003afe:	30 08       	mov	r8,0
}
80003b00:	10 9c       	mov	r12,r8
80003b02:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b06:	00 00       	add	r0,r0
80003b08:	80 00       	ld.sh	r0,r0[0x0]
80003b0a:	8d 64       	st.w	r6[0x18],r4
80003b0c:	00 00       	add	r0,r0
80003b0e:	04 08       	add	r8,r2
80003b10:	00 00       	add	r0,r0
80003b12:	01 2d       	ld.uh	sp,r0++

80003b14 <check_normal_mode_entry_sequence>:

bool check_normal_mode_entry_sequence(void)
{
80003b14:	eb cd 40 80 	pushm	r7,lr
80003b18:	1a 97       	mov	r7,sp
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
		&& gpio_get_pin_value(PB4) == 0
80003b1a:	30 4c       	mov	r12,4
80003b1c:	f0 1f 00 40 	mcall	80003c1c <check_normal_mode_entry_sequence+0x108>
80003b20:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b22:	58 08       	cp.w	r8,0
80003b24:	c3 41       	brne	80003b8c <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
80003b26:	30 dc       	mov	r12,13
80003b28:	f0 1f 00 3d 	mcall	80003c1c <check_normal_mode_entry_sequence+0x108>
80003b2c:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b2e:	58 08       	cp.w	r8,0
80003b30:	c2 e1       	brne	80003b8c <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
80003b32:	30 ac       	mov	r12,10
80003b34:	f0 1f 00 3a 	mcall	80003c1c <check_normal_mode_entry_sequence+0x108>
80003b38:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b3a:	58 18       	cp.w	r8,1
80003b3c:	c2 81       	brne	80003b8c <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003b3e:	30 bc       	mov	r12,11
80003b40:	f0 1f 00 37 	mcall	80003c1c <check_normal_mode_entry_sequence+0x108>
80003b44:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b46:	58 18       	cp.w	r8,1
80003b48:	c2 21       	brne	80003b8c <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003b4a:	30 cc       	mov	r12,12
80003b4c:	f0 1f 00 34 	mcall	80003c1c <check_normal_mode_entry_sequence+0x108>
80003b50:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b52:	58 18       	cp.w	r8,1
80003b54:	c1 c1       	brne	80003b8c <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
	{
		normal_mode_unlock_device_sequence_counter = 0;
80003b56:	4b 39       	lddpc	r9,80003c20 <check_normal_mode_entry_sequence+0x10c>
80003b58:	30 08       	mov	r8,0
80003b5a:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_device_id_sequence_counter++ >= 200)
80003b5c:	4b 28       	lddpc	r8,80003c24 <check_normal_mode_entry_sequence+0x110>
80003b5e:	11 88       	ld.ub	r8,r8[0x0]
80003b60:	3c 79       	mov	r9,-57
80003b62:	f2 08 18 00 	cp.b	r8,r9
80003b66:	5f b9       	srhi	r9
80003b68:	5c 59       	castu.b	r9
80003b6a:	2f f8       	sub	r8,-1
80003b6c:	5c 58       	castu.b	r8
80003b6e:	4a ea       	lddpc	r10,80003c24 <check_normal_mode_entry_sequence+0x110>
80003b70:	b4 88       	st.b	r10[0x0],r8
80003b72:	58 09       	cp.w	r9,0
80003b74:	c4 c0       	breq	80003c0c <check_normal_mode_entry_sequence+0xf8>
		{
			normal_mode_device_id_sequence_counter = 0;
80003b76:	4a c9       	lddpc	r9,80003c24 <check_normal_mode_entry_sequence+0x110>
80003b78:	30 08       	mov	r8,0
80003b7a:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003b7c:	4a b9       	lddpc	r9,80003c28 <check_normal_mode_entry_sequence+0x114>
80003b7e:	30 08       	mov	r8,0
80003b80:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = DEVICE_ID;
80003b82:	4a b9       	lddpc	r9,80003c2c <check_normal_mode_entry_sequence+0x118>
80003b84:	30 38       	mov	r8,3
80003b86:	b2 88       	st.b	r9[0x0],r8
			return true;
80003b88:	30 18       	mov	r8,1
80003b8a:	c4 58       	rjmp	80003c14 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
			&& gpio_get_pin_value(PB2) == 0
80003b8c:	30 4c       	mov	r12,4
80003b8e:	f0 1f 00 24 	mcall	80003c1c <check_normal_mode_entry_sequence+0x108>
80003b92:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003b94:	58 08       	cp.w	r8,0
80003b96:	c3 41       	brne	80003bfe <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
80003b98:	30 bc       	mov	r12,11
80003b9a:	f0 1f 00 21 	mcall	80003c1c <check_normal_mode_entry_sequence+0x108>
80003b9e:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003ba0:	58 08       	cp.w	r8,0
80003ba2:	c2 e1       	brne	80003bfe <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
80003ba4:	30 ac       	mov	r12,10
80003ba6:	f0 1f 00 1e 	mcall	80003c1c <check_normal_mode_entry_sequence+0x108>
80003baa:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003bac:	58 18       	cp.w	r8,1
80003bae:	c2 81       	brne	80003bfe <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003bb0:	30 cc       	mov	r12,12
80003bb2:	f0 1f 00 1b 	mcall	80003c1c <check_normal_mode_entry_sequence+0x108>
80003bb6:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003bb8:	58 18       	cp.w	r8,1
80003bba:	c2 21       	brne	80003bfe <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003bbc:	30 dc       	mov	r12,13
80003bbe:	f0 1f 00 18 	mcall	80003c1c <check_normal_mode_entry_sequence+0x108>
80003bc2:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003bc4:	58 18       	cp.w	r8,1
80003bc6:	c1 c1       	brne	80003bfe <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
	{
		normal_mode_device_id_sequence_counter = 0;
80003bc8:	49 79       	lddpc	r9,80003c24 <check_normal_mode_entry_sequence+0x110>
80003bca:	30 08       	mov	r8,0
80003bcc:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_unlock_device_sequence_counter++ >= 200)
80003bce:	49 58       	lddpc	r8,80003c20 <check_normal_mode_entry_sequence+0x10c>
80003bd0:	11 88       	ld.ub	r8,r8[0x0]
80003bd2:	3c 79       	mov	r9,-57
80003bd4:	f2 08 18 00 	cp.b	r8,r9
80003bd8:	5f b9       	srhi	r9
80003bda:	5c 59       	castu.b	r9
80003bdc:	2f f8       	sub	r8,-1
80003bde:	5c 58       	castu.b	r8
80003be0:	49 0a       	lddpc	r10,80003c20 <check_normal_mode_entry_sequence+0x10c>
80003be2:	b4 88       	st.b	r10[0x0],r8
80003be4:	58 09       	cp.w	r9,0
80003be6:	c1 50       	breq	80003c10 <check_normal_mode_entry_sequence+0xfc>
		{
			normal_mode_unlock_device_sequence_counter = 0;
80003be8:	48 e9       	lddpc	r9,80003c20 <check_normal_mode_entry_sequence+0x10c>
80003bea:	30 08       	mov	r8,0
80003bec:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003bee:	48 f9       	lddpc	r9,80003c28 <check_normal_mode_entry_sequence+0x114>
80003bf0:	30 08       	mov	r8,0
80003bf2:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = UNLOCK_CRYPTX2;
80003bf4:	48 e9       	lddpc	r9,80003c2c <check_normal_mode_entry_sequence+0x118>
80003bf6:	30 48       	mov	r8,4
80003bf8:	b2 88       	st.b	r9[0x0],r8
			return true;
80003bfa:	30 18       	mov	r8,1
80003bfc:	c0 c8       	rjmp	80003c14 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else
	{
		normal_mode_device_id_sequence_counter = 0;
80003bfe:	48 a9       	lddpc	r9,80003c24 <check_normal_mode_entry_sequence+0x110>
80003c00:	30 08       	mov	r8,0
80003c02:	b2 88       	st.b	r9[0x0],r8
		normal_mode_unlock_device_sequence_counter = 0;
80003c04:	48 79       	lddpc	r9,80003c20 <check_normal_mode_entry_sequence+0x10c>
80003c06:	30 08       	mov	r8,0
80003c08:	b2 88       	st.b	r9[0x0],r8
80003c0a:	c0 48       	rjmp	80003c12 <check_normal_mode_entry_sequence+0xfe>
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003c0c:	d7 03       	nop
80003c0e:	c0 28       	rjmp	80003c12 <check_normal_mode_entry_sequence+0xfe>
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003c10:	d7 03       	nop
	else
	{
		normal_mode_device_id_sequence_counter = 0;
		normal_mode_unlock_device_sequence_counter = 0;
	}
	return false;
80003c12:	30 08       	mov	r8,0
}
80003c14:	10 9c       	mov	r12,r8
80003c16:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c1a:	00 00       	add	r0,r0
80003c1c:	80 00       	ld.sh	r0,r0[0x0]
80003c1e:	8d 64       	st.w	r6[0x18],r4
80003c20:	00 00       	add	r0,r0
80003c22:	04 05       	add	r5,r2
80003c24:	00 00       	add	r0,r0
80003c26:	04 06       	add	r6,r2
80003c28:	00 00       	add	r0,r0
80003c2a:	01 2d       	ld.uh	sp,r0++
80003c2c:	00 00       	add	r0,r0
80003c2e:	03 db       	ld.ub	r11,r1[0x5]

80003c30 <check_for_mode_selected>:

void check_for_mode_selected(void)
{
80003c30:	eb cd 40 80 	pushm	r7,lr
80003c34:	1a 97       	mov	r7,sp
	Read_button();
80003c36:	f0 1f 00 03 	mcall	80003c40 <check_for_mode_selected+0x10>
}
80003c3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c3e:	00 00       	add	r0,r0
80003c40:	80 00       	ld.sh	r0,r0[0x0]
80003c42:	36 c0       	mov	r0,108

80003c44 <process_selected_mode>:

uint8_t process_selected_mode(void)
{
80003c44:	eb cd 40 80 	pushm	r7,lr
80003c48:	1a 97       	mov	r7,sp
80003c4a:	20 1d       	sub	sp,4
	uint8_t return_value = FAILED;
80003c4c:	30 08       	mov	r8,0
80003c4e:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (enter_button_status == READY_TO_TRIGGER)
80003c52:	4b 08       	lddpc	r8,80003d10 <process_selected_mode+0xcc>
80003c54:	11 88       	ld.ub	r8,r8[0x0]
80003c56:	5c 58       	castu.b	r8
80003c58:	c0 b1       	brne	80003c6e <process_selected_mode+0x2a>
	{
		pass_code = temp_password;
80003c5a:	4a f8       	lddpc	r8,80003d14 <process_selected_mode+0xd0>
80003c5c:	4a f9       	lddpc	r9,80003d18 <process_selected_mode+0xd4>
80003c5e:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
80003c60:	4a f9       	lddpc	r9,80003d1c <process_selected_mode+0xd8>
80003c62:	30 08       	mov	r8,0
80003c64:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_FIRST_PRESS;
80003c66:	4a b9       	lddpc	r9,80003d10 <process_selected_mode+0xcc>
80003c68:	30 18       	mov	r8,1
80003c6a:	b2 88       	st.b	r9[0x0],r8
80003c6c:	c4 98       	rjmp	80003cfe <process_selected_mode+0xba>
	}
	else if (enter_button_status == FIRST_TIME_PRESSED)
80003c6e:	4a 98       	lddpc	r8,80003d10 <process_selected_mode+0xcc>
80003c70:	11 88       	ld.ub	r8,r8[0x0]
80003c72:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003c76:	30 28       	mov	r8,2
80003c78:	f0 09 18 00 	cp.b	r9,r8
80003c7c:	c0 e1       	brne	80003c98 <process_selected_mode+0x54>
	{
		store_passcode(3L);
80003c7e:	30 3c       	mov	r12,3
80003c80:	f0 1f 00 28 	mcall	80003d20 <process_selected_mode+0xdc>
		pass_code = temp_password1;
80003c84:	4a 48       	lddpc	r8,80003d14 <process_selected_mode+0xd0>
80003c86:	4a 89       	lddpc	r9,80003d24 <process_selected_mode+0xe0>
80003c88:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
80003c8a:	4a 59       	lddpc	r9,80003d1c <process_selected_mode+0xd8>
80003c8c:	30 08       	mov	r8,0
80003c8e:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_SECOND_PRESS;
80003c90:	4a 09       	lddpc	r9,80003d10 <process_selected_mode+0xcc>
80003c92:	30 38       	mov	r8,3
80003c94:	b2 88       	st.b	r9[0x0],r8
80003c96:	c3 48       	rjmp	80003cfe <process_selected_mode+0xba>
	}
	else if (enter_button_status == SECOND_TIME_PRESSED)
80003c98:	49 e8       	lddpc	r8,80003d10 <process_selected_mode+0xcc>
80003c9a:	11 88       	ld.ub	r8,r8[0x0]
80003c9c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003ca0:	30 48       	mov	r8,4
80003ca2:	f0 09 18 00 	cp.b	r9,r8
80003ca6:	c1 a1       	brne	80003cda <process_selected_mode+0x96>
	{
		store_passcode(3L);
80003ca8:	30 3c       	mov	r12,3
80003caa:	f0 1f 00 1e 	mcall	80003d20 <process_selected_mode+0xdc>
		if (compare_entered_passwords() == true)
80003cae:	f0 1f 00 1f 	mcall	80003d28 <process_selected_mode+0xe4>
80003cb2:	18 98       	mov	r8,r12
80003cb4:	58 08       	cp.w	r8,0
80003cb6:	c2 30       	breq	80003cfc <process_selected_mode+0xb8>
		{
			memset((uint8_t *)temp_password, 0, 32);
80003cb8:	32 0a       	mov	r10,32
80003cba:	30 0b       	mov	r11,0
80003cbc:	49 7c       	lddpc	r12,80003d18 <process_selected_mode+0xd4>
80003cbe:	f0 1f 00 1c 	mcall	80003d2c <process_selected_mode+0xe8>
			pass_code = temp_password;
80003cc2:	49 58       	lddpc	r8,80003d14 <process_selected_mode+0xd0>
80003cc4:	49 59       	lddpc	r9,80003d18 <process_selected_mode+0xd4>
80003cc6:	91 09       	st.w	r8[0x0],r9
			passcode_byte_index = 0;
80003cc8:	49 59       	lddpc	r9,80003d1c <process_selected_mode+0xd8>
80003cca:	30 08       	mov	r8,0
80003ccc:	b2 88       	st.b	r9[0x0],r8
			enter_button_status = WAITING_FOR_PASSCODE_SALT_ENTRY;
80003cce:	49 19       	lddpc	r9,80003d10 <process_selected_mode+0xcc>
80003cd0:	30 58       	mov	r8,5
80003cd2:	b2 88       	st.b	r9[0x0],r8
			Start_W_timer();
80003cd4:	f0 1f 00 17 	mcall	80003d30 <process_selected_mode+0xec>
80003cd8:	c1 38       	rjmp	80003cfe <process_selected_mode+0xba>
		}
	}
	else if (enter_button_status == PASSCODE_FOR_SALT_ENTERED)
80003cda:	48 e8       	lddpc	r8,80003d10 <process_selected_mode+0xcc>
80003cdc:	11 88       	ld.ub	r8,r8[0x0]
80003cde:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003ce2:	30 68       	mov	r8,6
80003ce4:	f0 09 18 00 	cp.b	r9,r8
80003ce8:	c0 b1       	brne	80003cfe <process_selected_mode+0xba>
	{
		store_passcode(3L);
80003cea:	30 3c       	mov	r12,3
80003cec:	f0 1f 00 0d 	mcall	80003d20 <process_selected_mode+0xdc>
		calculate_salt();
80003cf0:	f0 1f 00 11 	mcall	80003d34 <process_selected_mode+0xf0>
		return_value = SUCCESSFUL;
80003cf4:	30 18       	mov	r8,1
80003cf6:	ef 68 ff ff 	st.b	r7[-1],r8
80003cfa:	c0 28       	rjmp	80003cfe <process_selected_mode+0xba>
		{
			memset((uint8_t *)temp_password, 0, 32);
			pass_code = temp_password;
			passcode_byte_index = 0;
			enter_button_status = WAITING_FOR_PASSCODE_SALT_ENTRY;
			Start_W_timer();
80003cfc:	d7 03       	nop
		store_passcode(3L);
		calculate_salt();
		return_value = SUCCESSFUL;
	}

	Read_button();
80003cfe:	f0 1f 00 0f 	mcall	80003d38 <process_selected_mode+0xf4>
	return return_value;
80003d02:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80003d06:	10 9c       	mov	r12,r8
80003d08:	2f fd       	sub	sp,-4
80003d0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d0e:	00 00       	add	r0,r0
80003d10:	00 00       	add	r0,r0
80003d12:	03 da       	ld.ub	r10,r1[0x5]
80003d14:	00 00       	add	r0,r0
80003d16:	09 a4       	ld.ub	r4,r4[0x2]
80003d18:	00 00       	add	r0,r0
80003d1a:	02 48       	or	r8,r1
80003d1c:	00 00       	add	r0,r0
80003d1e:	02 89       	andn	r9,r1
80003d20:	80 00       	ld.sh	r0,r0[0x0]
80003d22:	3a 00       	mov	r0,-96
80003d24:	00 00       	add	r0,r0
80003d26:	02 68       	and	r8,r1
80003d28:	80 00       	ld.sh	r0,r0[0x0]
80003d2a:	3d 3c       	mov	r12,-45
80003d2c:	80 00       	ld.sh	r0,r0[0x0]
80003d2e:	e8 e2 80 00 	ld.d	r2,r4[-32768]
80003d32:	2e 9c       	sub	r12,-23
80003d34:	80 00       	ld.sh	r0,r0[0x0]
80003d36:	2c fc       	sub	r12,-49
80003d38:	80 00       	ld.sh	r0,r0[0x0]
80003d3a:	36 c0       	mov	r0,108

80003d3c <compare_entered_passwords>:

bool compare_entered_passwords(void)
{
80003d3c:	eb cd 40 80 	pushm	r7,lr
80003d40:	1a 97       	mov	r7,sp
80003d42:	20 1d       	sub	sp,4
	uint8_t i = 0;
80003d44:	30 08       	mov	r8,0
80003d46:	ef 68 ff ff 	st.b	r7[-1],r8
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
80003d4a:	c1 48       	rjmp	80003d72 <compare_entered_passwords+0x36>
	{
		if (temp_password[i] != temp_password1[i])
80003d4c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003d50:	48 f8       	lddpc	r8,80003d8c <compare_entered_passwords+0x50>
80003d52:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003d56:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003d5a:	48 e8       	lddpc	r8,80003d90 <compare_entered_passwords+0x54>
80003d5c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003d60:	10 39       	cp.w	r9,r8
80003d62:	c0 30       	breq	80003d68 <compare_entered_passwords+0x2c>
		{
			return false;
80003d64:	30 08       	mov	r8,0
80003d66:	c0 e8       	rjmp	80003d82 <compare_entered_passwords+0x46>
		}
		i++;
80003d68:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003d6c:	2f f8       	sub	r8,-1
80003d6e:	ef 68 ff ff 	st.b	r7[-1],r8

bool compare_entered_passwords(void)
{
	uint8_t i = 0;
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
80003d72:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003d76:	30 78       	mov	r8,7
80003d78:	f0 09 18 00 	cp.b	r9,r8
80003d7c:	fe 98 ff e8 	brls	80003d4c <compare_entered_passwords+0x10>
		{
			return false;
		}
		i++;
	}
	return true;
80003d80:	30 18       	mov	r8,1
}
80003d82:	10 9c       	mov	r12,r8
80003d84:	2f fd       	sub	sp,-4
80003d86:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d8a:	00 00       	add	r0,r0
80003d8c:	00 00       	add	r0,r0
80003d8e:	02 48       	or	r8,r1
80003d90:	00 00       	add	r0,r0
80003d92:	02 68       	and	r8,r1

80003d94 <read_password>:

void read_password(void)
{
80003d94:	eb cd 40 80 	pushm	r7,lr
80003d98:	1a 97       	mov	r7,sp
	Read_button();
80003d9a:	f0 1f 00 06 	mcall	80003db0 <read_password+0x1c>
	if (normal_mode_password_entered == true)
80003d9e:	48 68       	lddpc	r8,80003db4 <read_password+0x20>
80003da0:	11 88       	ld.ub	r8,r8[0x0]
80003da2:	5c 58       	castu.b	r8
80003da4:	c0 30       	breq	80003daa <read_password+0x16>
	{
		compare_with_saved_password();
80003da6:	f0 1f 00 05 	mcall	80003db8 <read_password+0x24>
	}
}
80003daa:	e3 cd 80 80 	ldm	sp++,r7,pc
80003dae:	00 00       	add	r0,r0
80003db0:	80 00       	ld.sh	r0,r0[0x0]
80003db2:	36 c0       	mov	r0,108
80003db4:	00 00       	add	r0,r0
80003db6:	03 d9       	ld.ub	r9,r1[0x5]
80003db8:	80 00       	ld.sh	r0,r0[0x0]
80003dba:	3d bc       	mov	r12,-37

80003dbc <compare_with_saved_password>:

bool compare_with_saved_password(void)
{
80003dbc:	eb cd 40 80 	pushm	r7,lr
80003dc0:	1a 97       	mov	r7,sp
80003dc2:	20 2d       	sub	sp,8
	uint8_t i = 0; 
80003dc4:	30 08       	mov	r8,0
80003dc6:	ef 68 ff fb 	st.b	r7[-5],r8
	uint32_t *temp_stored_password;

	temp_stored_password = encrypt_password((uint32_t *)temp_password);
80003dca:	4b 0c       	lddpc	r12,80003e88 <compare_with_saved_password+0xcc>
80003dcc:	f0 1f 00 30 	mcall	80003e8c <compare_with_saved_password+0xd0>
80003dd0:	18 98       	mov	r8,r12
80003dd2:	ef 48 ff fc 	st.w	r7[-4],r8

	while (i < 8)
80003dd6:	c1 38       	rjmp	80003dfc <compare_with_saved_password+0x40>
	{
		temp_password[i] = temp_stored_password[i];
80003dd8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003ddc:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003de0:	a3 68       	lsl	r8,0x2
80003de2:	ee fa ff fc 	ld.w	r10,r7[-4]
80003de6:	f4 08 00 08 	add	r8,r10,r8
80003dea:	70 0a       	ld.w	r10,r8[0x0]
80003dec:	4a 78       	lddpc	r8,80003e88 <compare_with_saved_password+0xcc>
80003dee:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		i++;
80003df2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003df6:	2f f8       	sub	r8,-1
80003df8:	ef 68 ff fb 	st.b	r7[-5],r8
	uint8_t i = 0; 
	uint32_t *temp_stored_password;

	temp_stored_password = encrypt_password((uint32_t *)temp_password);

	while (i < 8)
80003dfc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003e00:	30 78       	mov	r8,7
80003e02:	f0 09 18 00 	cp.b	r9,r8
80003e06:	fe 98 ff e9 	brls	80003dd8 <compare_with_saved_password+0x1c>
	{
		temp_password[i] = temp_stored_password[i];
		i++;
	}
	if (normal_mode_chosen == DEVICE_ID)
80003e0a:	4a 28       	lddpc	r8,80003e90 <compare_with_saved_password+0xd4>
80003e0c:	11 88       	ld.ub	r8,r8[0x0]
80003e0e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003e12:	30 38       	mov	r8,3
80003e14:	f0 09 18 00 	cp.b	r9,r8
80003e18:	c0 61       	brne	80003e24 <compare_with_saved_password+0x68>
	{
		temp_stored_password = (uint32_t *)Stored_values_ram.device_id_confirm;
80003e1a:	49 f8       	lddpc	r8,80003e94 <compare_with_saved_password+0xd8>
80003e1c:	2a 08       	sub	r8,-96
80003e1e:	ef 48 ff fc 	st.w	r7[-4],r8
80003e22:	c0 c8       	rjmp	80003e3a <compare_with_saved_password+0x7e>
	}
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
80003e24:	49 b8       	lddpc	r8,80003e90 <compare_with_saved_password+0xd4>
80003e26:	11 88       	ld.ub	r8,r8[0x0]
80003e28:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003e2c:	30 48       	mov	r8,4
80003e2e:	f0 09 18 00 	cp.b	r9,r8
80003e32:	c0 41       	brne	80003e3a <compare_with_saved_password+0x7e>
	{
		temp_stored_password = (uint32_t *)Stored_values_ram.unlock_password;
80003e34:	49 88       	lddpc	r8,80003e94 <compare_with_saved_password+0xd8>
80003e36:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	i = 0;
80003e3a:	30 08       	mov	r8,0
80003e3c:	ef 68 ff fb 	st.b	r7[-5],r8
	while (i < 8)
80003e40:	c1 78       	rjmp	80003e6e <compare_with_saved_password+0xb2>
	{
		if (temp_stored_password[i] != temp_password[i])
80003e42:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003e46:	a3 68       	lsl	r8,0x2
80003e48:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003e4c:	f2 08 00 08 	add	r8,r9,r8
80003e50:	70 09       	ld.w	r9,r8[0x0]
80003e52:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80003e56:	48 d8       	lddpc	r8,80003e88 <compare_with_saved_password+0xcc>
80003e58:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003e5c:	10 39       	cp.w	r9,r8
80003e5e:	c0 30       	breq	80003e64 <compare_with_saved_password+0xa8>
		{
			return false;
80003e60:	30 08       	mov	r8,0
80003e62:	c0 e8       	rjmp	80003e7e <compare_with_saved_password+0xc2>
		}
		i++;
80003e64:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003e68:	2f f8       	sub	r8,-1
80003e6a:	ef 68 ff fb 	st.b	r7[-5],r8
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
	{
		temp_stored_password = (uint32_t *)Stored_values_ram.unlock_password;
	}
	i = 0;
	while (i < 8)
80003e6e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003e72:	30 78       	mov	r8,7
80003e74:	f0 09 18 00 	cp.b	r9,r8
80003e78:	fe 98 ff e5 	brls	80003e42 <compare_with_saved_password+0x86>
		{
			return false;
		}
		i++;
	}
	return true;
80003e7c:	30 18       	mov	r8,1
}
80003e7e:	10 9c       	mov	r12,r8
80003e80:	2f ed       	sub	sp,-8
80003e82:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e86:	00 00       	add	r0,r0
80003e88:	00 00       	add	r0,r0
80003e8a:	02 48       	or	r8,r1
80003e8c:	80 00       	ld.sh	r0,r0[0x0]
80003e8e:	2c 1c       	sub	r12,-63
80003e90:	00 00       	add	r0,r0
80003e92:	03 db       	ld.ub	r11,r1[0x5]
80003e94:	00 00       	add	r0,r0
80003e96:	08 84       	andn	r4,r4

80003e98 <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
static void tc_init(volatile avr32_tc_t *tc)
{
80003e98:	eb cd 40 80 	pushm	r7,lr
80003e9c:	1a 97       	mov	r7,sp
80003e9e:	20 2d       	sub	sp,8
80003ea0:	ef 4c ff f8 	st.w	r7[-8],r12
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80003ea4:	49 0b       	lddpc	r11,80003ee4 <tc_init+0x4c>
80003ea6:	ee fc ff f8 	ld.w	r12,r7[-8]
80003eaa:	f0 1f 00 10 	mcall	80003ee8 <tc_init+0x50>
	 * Set the compare triggers.
	 * We configure it to count every 10 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 10 ms, hence RC = (fPBA / 8) / 100
	 * to get an interrupt every 10 ms.
	 */
	temp_value = tc_write_rc(tc, EXAMPLE_TC_CHANNEL, 20625 /*(sysclk_get_pba_hz() / 8 / 100)*/);
80003eae:	e0 6a 50 91 	mov	r10,20625
80003eb2:	30 0b       	mov	r11,0
80003eb4:	ee fc ff f8 	ld.w	r12,r7[-8]
80003eb8:	f0 1f 00 0d 	mcall	80003eec <tc_init+0x54>
80003ebc:	18 98       	mov	r8,r12
80003ebe:	5c 88       	casts.h	r8
80003ec0:	5c 78       	castu.h	r8
80003ec2:	ef 48 ff fc 	st.w	r7[-4],r8
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80003ec6:	48 ba       	lddpc	r10,80003ef0 <tc_init+0x58>
80003ec8:	30 0b       	mov	r11,0
80003eca:	ee fc ff f8 	ld.w	r12,r7[-8]
80003ece:	f0 1f 00 0a 	mcall	80003ef4 <tc_init+0x5c>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80003ed2:	30 0b       	mov	r11,0
80003ed4:	ee fc ff f8 	ld.w	r12,r7[-8]
80003ed8:	f0 1f 00 08 	mcall	80003ef8 <tc_init+0x60>
}
80003edc:	2f ed       	sub	sp,-8
80003ede:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ee2:	00 00       	add	r0,r0
80003ee4:	80 00       	ld.sh	r0,r0[0x0]
80003ee6:	ed 40 80 00 	st.w	r6[-32768],r0
80003eea:	97 24       	st.w	r11[0x8],r4
80003eec:	80 00       	ld.sh	r0,r0[0x0]
80003eee:	98 ec       	ld.uh	r12,r12[0xc]
80003ef0:	80 00       	ld.sh	r0,r0[0x0]
80003ef2:	ed 48 80 00 	st.w	r6[-32768],r8
80003ef6:	95 3c       	st.w	r10[0xc],r12
80003ef8:	80 00       	ld.sh	r0,r0[0x0]
80003efa:	98 78       	ld.sh	r8,r12[0xe]

80003efc <tc_task>:
 * - Register the TC interrupt
 * - Configure, enable the CPCS (RC compare match) interrupt,
 * - and start a TC channel in waveform mode
 */
void tc_task (void)
{
80003efc:	eb cd 40 80 	pushm	r7,lr
80003f00:	1a 97       	mov	r7,sp
80003f02:	20 1d       	sub	sp,4
	volatile avr32_tc_t *tc = EXAMPLE_TC;
80003f04:	fe 78 38 00 	mov	r8,-51200
80003f08:	ef 48 ff fc 	st.w	r7[-4],r8
	 * peripheral clocks, except for the peripheral clocks explicitly
	 * enabled in conf_clock.h.
	 */
	//sysclk_init();
	// Enable the clock to the selected example Timer/counter peripheral module.
	sysclk_enable_peripheral_clock(EXAMPLE_TC);
80003f0c:	fe 7c 38 00 	mov	r12,-51200
80003f10:	f0 1f 00 0c 	mcall	80003f40 <tc_task+0x44>
	// Disable the interrupts
	cpu_irq_disable();
80003f14:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	//INTC_init_interrupts();
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80003f16:	30 0a       	mov	r10,0
80003f18:	e0 6b 01 c0 	mov	r11,448
80003f1c:	48 ac       	lddpc	r12,80003f44 <tc_task+0x48>
80003f1e:	f0 1f 00 0b 	mcall	80003f48 <tc_task+0x4c>
	// Enable the interrupts
	cpu_irq_enable();
80003f22:	d5 03       	csrf	0x10
	// Initialize the timer module
	tc_init(tc);
80003f24:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f28:	f0 1f 00 09 	mcall	80003f4c <tc_task+0x50>
	// Initialize push buttons
	push_buttons_init();
80003f2c:	f0 1f 00 09 	mcall	80003f50 <tc_task+0x54>

    calculate_hash((uint32_t *)CipherKey256, 8, CipherKey256_hash);
80003f30:	48 9a       	lddpc	r10,80003f54 <tc_task+0x58>
80003f32:	30 8b       	mov	r11,8
80003f34:	48 9c       	lddpc	r12,80003f58 <tc_task+0x5c>
80003f36:	f0 1f 00 0a 	mcall	80003f5c <tc_task+0x60>
			 //*/
			 //// Reset the timer update flag to wait till next timer interrupt
			//update_timer = false;
		//}
	//}
}
80003f3a:	2f fd       	sub	sp,-4
80003f3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f40:	80 00       	ld.sh	r0,r0[0x0]
80003f42:	33 a4       	mov	r4,58
80003f44:	80 00       	ld.sh	r0,r0[0x0]
80003f46:	35 b8       	mov	r8,91
80003f48:	80 00       	ld.sh	r0,r0[0x0]
80003f4a:	8f fc       	st.w	r7[0x3c],r12
80003f4c:	80 00       	ld.sh	r0,r0[0x0]
80003f4e:	3e 98       	mov	r8,-23
80003f50:	80 00       	ld.sh	r0,r0[0x0]
80003f52:	39 c8       	mov	r8,-100
80003f54:	00 00       	add	r0,r0
80003f56:	03 e0       	ld.ub	r0,r1[0x6]
80003f58:	80 00       	ld.sh	r0,r0[0x0]
80003f5a:	ec 00       	*unknown*
80003f5c:	80 00       	ld.sh	r0,r0[0x0]
80003f5e:	2e e0       	sub	r0,-18

80003f60 <init_hmatrix>:
80003f60:	eb cd 40 80 	pushm	r7,lr
80003f64:	1a 97       	mov	r7,sp
80003f66:	20 1d       	sub	sp,4
80003f68:	fe 68 10 00 	mov	r8,-126976
80003f6c:	71 08       	ld.w	r8,r8[0x40]
80003f6e:	ef 48 ff fc 	st.w	r7[-4],r8
80003f72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f76:	30 19       	mov	r9,1
80003f78:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
80003f7c:	ef 48 ff fc 	st.w	r7[-4],r8
80003f80:	fe 68 10 00 	mov	r8,-126976
80003f84:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003f88:	f1 49 00 40 	st.w	r8[64],r9
80003f8c:	2f fd       	sub	sp,-4
80003f8e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f92:	d7 03       	nop

80003f94 <aes_task>:
80003f94:	eb cd 40 80 	pushm	r7,lr
80003f98:	1a 97       	mov	r7,sp
80003f9a:	f0 1f 00 03 	mcall	80003fa4 <aes_task+0x10>
80003f9e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fa2:	00 00       	add	r0,r0
80003fa4:	80 00       	ld.sh	r0,r0[0x0]
80003fa6:	3f 60       	mov	r0,-10

80003fa8 <aes_init>:
80003fa8:	eb cd 40 80 	pushm	r7,lr
80003fac:	1a 97       	mov	r7,sp
80003fae:	20 3d       	sub	sp,12
80003fb0:	18 98       	mov	r8,r12
80003fb2:	ef 68 ff f4 	st.b	r7[-12],r8
80003fb6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003fba:	ef 68 ff f8 	st.b	r7[-8],r8
80003fbe:	30 08       	mov	r8,0
80003fc0:	ef 68 ff f9 	st.b	r7[-7],r8
80003fc4:	30 18       	mov	r8,1
80003fc6:	ef 68 ff fa 	st.b	r7[-6],r8
80003fca:	30 28       	mov	r8,2
80003fcc:	ef 68 ff fb 	st.b	r7[-5],r8
80003fd0:	30 18       	mov	r8,1
80003fd2:	ef 68 ff fc 	st.b	r7[-4],r8
80003fd6:	30 08       	mov	r8,0
80003fd8:	ef 68 ff fd 	st.b	r7[-3],r8
80003fdc:	30 08       	mov	r8,0
80003fde:	ef 68 ff fe 	st.b	r7[-2],r8
80003fe2:	30 08       	mov	r8,0
80003fe4:	ef 68 ff ff 	st.b	r7[-1],r8
80003fe8:	ee c8 00 08 	sub	r8,r7,8
80003fec:	10 9b       	mov	r11,r8
80003fee:	fc 7c 00 00 	mov	r12,-196608
80003ff2:	f0 1f 00 06 	mcall	80004008 <aes_init+0x60>
80003ff6:	48 6b       	lddpc	r11,8000400c <aes_init+0x64>
80003ff8:	fc 7c 00 00 	mov	r12,-196608
80003ffc:	f0 1f 00 05 	mcall	80004010 <aes_init+0x68>
80004000:	2f dd       	sub	sp,-12
80004002:	e3 cd 80 80 	ldm	sp++,r7,pc
80004006:	00 00       	add	r0,r0
80004008:	80 00       	ld.sh	r0,r0[0x0]
8000400a:	7f b8       	ld.w	r8,pc[0x6c]
8000400c:	80 00       	ld.sh	r0,r0[0x0]
8000400e:	ec 00       	*unknown*
80004010:	80 00       	ld.sh	r0,r0[0x0]
80004012:	80 48       	ld.sh	r8,r0[0x8]

80004014 <apply_aes_encryption>:
80004014:	eb cd 40 80 	pushm	r7,lr
80004018:	1a 97       	mov	r7,sp
8000401a:	20 6d       	sub	sp,24
8000401c:	ef 4c ff f4 	st.w	r7[-12],r12
80004020:	ef 4b ff f0 	st.w	r7[-16],r11
80004024:	14 98       	mov	r8,r10
80004026:	ef 49 ff e8 	st.w	r7[-24],r9
8000402a:	ef 58 ff ec 	st.h	r7[-20],r8
8000402e:	4b 68       	lddpc	r8,80004104 <apply_aes_encryption+0xf0>
80004030:	70 08       	ld.w	r8,r8[0x0]
80004032:	ef 48 ff fc 	st.w	r7[-4],r8
80004036:	4b 48       	lddpc	r8,80004104 <apply_aes_encryption+0xf0>
80004038:	70 09       	ld.w	r9,r8[0x0]
8000403a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000403e:	10 59       	eor	r9,r8
80004040:	4b 18       	lddpc	r8,80004104 <apply_aes_encryption+0xf0>
80004042:	91 09       	st.w	r8[0x0],r9
80004044:	4b 0b       	lddpc	r11,80004104 <apply_aes_encryption+0xf0>
80004046:	fc 7c 00 00 	mov	r12,-196608
8000404a:	f0 1f 00 30 	mcall	80004108 <apply_aes_encryption+0xf4>
8000404e:	4a e8       	lddpc	r8,80004104 <apply_aes_encryption+0xf0>
80004050:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004054:	91 09       	st.w	r8[0x0],r9
80004056:	ef 18 ff ec 	ld.uh	r8,r7[-20]
8000405a:	a3 88       	lsr	r8,0x2
8000405c:	5c 88       	casts.h	r8
8000405e:	ef 68 ff fb 	st.b	r7[-5],r8
80004062:	30 08       	mov	r8,0
80004064:	ef 68 ff fa 	st.b	r7[-6],r8
80004068:	c2 78       	rjmp	800040b6 <apply_aes_encryption+0xa2>
8000406a:	30 1c       	mov	r12,1
8000406c:	f0 1f 00 28 	mcall	8000410c <apply_aes_encryption+0xf8>
80004070:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004074:	a3 68       	lsl	r8,0x2
80004076:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000407a:	f2 08 00 08 	add	r8,r9,r8
8000407e:	10 9b       	mov	r11,r8
80004080:	ee fc ff f4 	ld.w	r12,r7[-12]
80004084:	f0 1f 00 23 	mcall	80004110 <apply_aes_encryption+0xfc>
80004088:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000408c:	70 78       	ld.w	r8,r8[0x1c]
8000408e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004092:	cf b0       	breq	80004088 <apply_aes_encryption+0x74>
80004094:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004098:	f0 09 15 02 	lsl	r9,r8,0x2
8000409c:	49 e8       	lddpc	r8,80004114 <apply_aes_encryption+0x100>
8000409e:	f2 08 00 08 	add	r8,r9,r8
800040a2:	10 9b       	mov	r11,r8
800040a4:	ee fc ff f4 	ld.w	r12,r7[-12]
800040a8:	f0 1f 00 1c 	mcall	80004118 <apply_aes_encryption+0x104>
800040ac:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800040b0:	2f c8       	sub	r8,-4
800040b2:	ef 68 ff fa 	st.b	r7[-6],r8
800040b6:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800040ba:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800040be:	f0 09 18 00 	cp.b	r9,r8
800040c2:	cd 43       	brcs	8000406a <apply_aes_encryption+0x56>
800040c4:	30 08       	mov	r8,0
800040c6:	ef 68 ff fa 	st.b	r7[-6],r8
800040ca:	c1 38       	rjmp	800040f0 <apply_aes_encryption+0xdc>
800040cc:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800040d0:	a3 68       	lsl	r8,0x2
800040d2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800040d6:	f2 08 00 08 	add	r8,r9,r8
800040da:	ef 3a ff fa 	ld.ub	r10,r7[-6]
800040de:	48 e9       	lddpc	r9,80004114 <apply_aes_encryption+0x100>
800040e0:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800040e4:	91 09       	st.w	r8[0x0],r9
800040e6:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800040ea:	2f f8       	sub	r8,-1
800040ec:	ef 68 ff fa 	st.b	r7[-6],r8
800040f0:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800040f4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800040f8:	f0 09 18 00 	cp.b	r9,r8
800040fc:	ce 83       	brcs	800040cc <apply_aes_encryption+0xb8>
800040fe:	2f ad       	sub	sp,-24
80004100:	e3 cd 80 80 	ldm	sp++,r7,pc
80004104:	00 00       	add	r0,r0
80004106:	03 e0       	ld.ub	r0,r1[0x6]
80004108:	80 00       	ld.sh	r0,r0[0x0]
8000410a:	80 d6       	ld.uh	r6,r0[0xa]
8000410c:	80 00       	ld.sh	r0,r0[0x0]
8000410e:	3f a8       	mov	r8,-6
80004110:	80 00       	ld.sh	r0,r0[0x0]
80004112:	81 32       	st.w	r0[0xc],r2
80004114:	00 00       	add	r0,r0
80004116:	04 0c       	add	r12,r2
80004118:	80 00       	ld.sh	r0,r0[0x0]
8000411a:	81 ca       	st.w	r0[0x30],r10

8000411c <apply_aes_decryption>:
8000411c:	eb cd 40 80 	pushm	r7,lr
80004120:	1a 97       	mov	r7,sp
80004122:	20 6d       	sub	sp,24
80004124:	ef 4c ff f4 	st.w	r7[-12],r12
80004128:	ef 4b ff f0 	st.w	r7[-16],r11
8000412c:	14 98       	mov	r8,r10
8000412e:	ef 49 ff e8 	st.w	r7[-24],r9
80004132:	ef 58 ff ec 	st.h	r7[-20],r8
80004136:	4b 68       	lddpc	r8,8000420c <apply_aes_decryption+0xf0>
80004138:	70 08       	ld.w	r8,r8[0x0]
8000413a:	ef 48 ff fc 	st.w	r7[-4],r8
8000413e:	4b 48       	lddpc	r8,8000420c <apply_aes_decryption+0xf0>
80004140:	70 09       	ld.w	r9,r8[0x0]
80004142:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004146:	10 59       	eor	r9,r8
80004148:	4b 18       	lddpc	r8,8000420c <apply_aes_decryption+0xf0>
8000414a:	91 09       	st.w	r8[0x0],r9
8000414c:	4b 0b       	lddpc	r11,8000420c <apply_aes_decryption+0xf0>
8000414e:	fc 7c 00 00 	mov	r12,-196608
80004152:	f0 1f 00 30 	mcall	80004210 <apply_aes_decryption+0xf4>
80004156:	4a e8       	lddpc	r8,8000420c <apply_aes_decryption+0xf0>
80004158:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000415c:	91 09       	st.w	r8[0x0],r9
8000415e:	ef 18 ff ec 	ld.uh	r8,r7[-20]
80004162:	a3 88       	lsr	r8,0x2
80004164:	5c 88       	casts.h	r8
80004166:	ef 68 ff fb 	st.b	r7[-5],r8
8000416a:	30 08       	mov	r8,0
8000416c:	ef 68 ff fa 	st.b	r7[-6],r8
80004170:	c2 78       	rjmp	800041be <apply_aes_decryption+0xa2>
80004172:	30 0c       	mov	r12,0
80004174:	f0 1f 00 28 	mcall	80004214 <apply_aes_decryption+0xf8>
80004178:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000417c:	a3 68       	lsl	r8,0x2
8000417e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004182:	f2 08 00 08 	add	r8,r9,r8
80004186:	10 9b       	mov	r11,r8
80004188:	ee fc ff f4 	ld.w	r12,r7[-12]
8000418c:	f0 1f 00 23 	mcall	80004218 <apply_aes_decryption+0xfc>
80004190:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004194:	70 78       	ld.w	r8,r8[0x1c]
80004196:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000419a:	cf b0       	breq	80004190 <apply_aes_decryption+0x74>
8000419c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800041a0:	f0 09 15 02 	lsl	r9,r8,0x2
800041a4:	49 e8       	lddpc	r8,8000421c <apply_aes_decryption+0x100>
800041a6:	f2 08 00 08 	add	r8,r9,r8
800041aa:	10 9b       	mov	r11,r8
800041ac:	ee fc ff f4 	ld.w	r12,r7[-12]
800041b0:	f0 1f 00 1c 	mcall	80004220 <apply_aes_decryption+0x104>
800041b4:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800041b8:	2f c8       	sub	r8,-4
800041ba:	ef 68 ff fa 	st.b	r7[-6],r8
800041be:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800041c2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800041c6:	f0 09 18 00 	cp.b	r9,r8
800041ca:	cd 43       	brcs	80004172 <apply_aes_decryption+0x56>
800041cc:	30 08       	mov	r8,0
800041ce:	ef 68 ff fa 	st.b	r7[-6],r8
800041d2:	c1 38       	rjmp	800041f8 <apply_aes_decryption+0xdc>
800041d4:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800041d8:	a3 68       	lsl	r8,0x2
800041da:	ee f9 ff f0 	ld.w	r9,r7[-16]
800041de:	f2 08 00 08 	add	r8,r9,r8
800041e2:	ef 3a ff fa 	ld.ub	r10,r7[-6]
800041e6:	48 e9       	lddpc	r9,8000421c <apply_aes_decryption+0x100>
800041e8:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800041ec:	91 09       	st.w	r8[0x0],r9
800041ee:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800041f2:	2f f8       	sub	r8,-1
800041f4:	ef 68 ff fa 	st.b	r7[-6],r8
800041f8:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800041fc:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004200:	f0 09 18 00 	cp.b	r9,r8
80004204:	ce 83       	brcs	800041d4 <apply_aes_decryption+0xb8>
80004206:	2f ad       	sub	sp,-24
80004208:	e3 cd 80 80 	ldm	sp++,r7,pc
8000420c:	00 00       	add	r0,r0
8000420e:	03 e0       	ld.ub	r0,r1[0x6]
80004210:	80 00       	ld.sh	r0,r0[0x0]
80004212:	80 d6       	ld.uh	r6,r0[0xa]
80004214:	80 00       	ld.sh	r0,r0[0x0]
80004216:	3f a8       	mov	r8,-6
80004218:	80 00       	ld.sh	r0,r0[0x0]
8000421a:	81 32       	st.w	r0[0xc],r2
8000421c:	00 00       	add	r0,r0
8000421e:	04 0c       	add	r12,r2
80004220:	80 00       	ld.sh	r0,r0[0x0]
80004222:	81 ca       	st.w	r0[0x30],r10

80004224 <board_init>:
80004224:	eb cd 40 80 	pushm	r7,lr
80004228:	1a 97       	mov	r7,sp
8000422a:	30 3b       	mov	r11,3
8000422c:	34 3c       	mov	r12,67
8000422e:	f0 1f 00 17 	mcall	80004288 <board_init+0x64>
80004232:	30 3b       	mov	r11,3
80004234:	36 5c       	mov	r12,101
80004236:	f0 1f 00 15 	mcall	80004288 <board_init+0x64>
8000423a:	30 3b       	mov	r11,3
8000423c:	36 9c       	mov	r12,105
8000423e:	f0 1f 00 13 	mcall	80004288 <board_init+0x64>
80004242:	30 3b       	mov	r11,3
80004244:	36 6c       	mov	r12,102
80004246:	f0 1f 00 11 	mcall	80004288 <board_init+0x64>
8000424a:	30 0b       	mov	r11,0
8000424c:	32 ac       	mov	r12,42
8000424e:	f0 1f 00 0f 	mcall	80004288 <board_init+0x64>
80004252:	30 4b       	mov	r11,4
80004254:	48 ec       	lddpc	r12,8000428c <board_init+0x68>
80004256:	f0 1f 00 0f 	mcall	80004290 <board_init+0x6c>
8000425a:	30 ab       	mov	r11,10
8000425c:	48 ec       	lddpc	r12,80004294 <board_init+0x70>
8000425e:	f0 1f 00 0d 	mcall	80004290 <board_init+0x6c>
80004262:	32 bc       	mov	r12,43
80004264:	f0 1f 00 0d 	mcall	80004298 <board_init+0x74>
80004268:	36 cc       	mov	r12,108
8000426a:	f0 1f 00 0c 	mcall	80004298 <board_init+0x74>
8000426e:	30 6b       	mov	r11,6
80004270:	48 bc       	lddpc	r12,8000429c <board_init+0x78>
80004272:	f0 1f 00 08 	mcall	80004290 <board_init+0x6c>
80004276:	32 8c       	mov	r12,40
80004278:	f0 1f 00 08 	mcall	80004298 <board_init+0x74>
8000427c:	32 6c       	mov	r12,38
8000427e:	f0 1f 00 07 	mcall	80004298 <board_init+0x74>
80004282:	e3 cd 80 80 	ldm	sp++,r7,pc
80004286:	00 00       	add	r0,r0
80004288:	80 00       	ld.sh	r0,r0[0x0]
8000428a:	8b b6       	st.w	r5[0x2c],r6
8000428c:	80 00       	ld.sh	r0,r0[0x0]
8000428e:	ed 4c 80 00 	st.w	r6[-32768],r12
80004292:	89 a8       	st.w	r4[0x28],r8
80004294:	80 00       	ld.sh	r0,r0[0x0]
80004296:	ed 54 80 00 	st.h	r6[-32768],r4
8000429a:	8b 7c       	st.w	r5[0x1c],r12
8000429c:	80 00       	ld.sh	r0,r0[0x0]
8000429e:	ed 68 eb cd 	st.b	r6[-5171],r8

800042a0 <LED_Off>:
800042a0:	eb cd 40 80 	pushm	r7,lr
800042a4:	1a 97       	mov	r7,sp
800042a6:	20 4d       	sub	sp,16
800042a8:	ef 4c ff f0 	st.w	r7[-16],r12
800042ac:	4a 98       	lddpc	r8,80004350 <LED_Off+0xb0>
800042ae:	21 08       	sub	r8,16
800042b0:	ef 48 ff f4 	st.w	r7[-12],r8
800042b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042b8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800042bc:	ef 48 ff f0 	st.w	r7[-16],r8
800042c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042c4:	f0 09 11 ff 	rsub	r9,r8,-1
800042c8:	4a 38       	lddpc	r8,80004354 <LED_Off+0xb4>
800042ca:	70 08       	ld.w	r8,r8[0x0]
800042cc:	10 69       	and	r9,r8
800042ce:	4a 28       	lddpc	r8,80004354 <LED_Off+0xb4>
800042d0:	91 09       	st.w	r8[0x0],r9
800042d2:	c3 78       	rjmp	80004340 <LED_Off+0xa0>
800042d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042d8:	5c 98       	brev	r8
800042da:	f0 08 12 00 	clz	r8,r8
800042de:	5c 58       	castu.b	r8
800042e0:	2f f8       	sub	r8,-1
800042e2:	ef 68 ff ff 	st.b	r7[-1],r8
800042e6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800042ea:	a5 68       	lsl	r8,0x4
800042ec:	ee f9 ff f4 	ld.w	r9,r7[-12]
800042f0:	f2 08 00 08 	add	r8,r9,r8
800042f4:	ef 48 ff f4 	st.w	r7[-12],r8
800042f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042fc:	70 08       	ld.w	r8,r8[0x0]
800042fe:	a9 68       	lsl	r8,0x8
80004300:	e0 28 f0 00 	sub	r8,61440
80004304:	ef 48 ff f8 	st.w	r7[-8],r8
80004308:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000430c:	70 19       	ld.w	r9,r8[0x4]
8000430e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004312:	f1 49 00 54 	st.w	r8[84],r9
80004316:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000431a:	70 19       	ld.w	r9,r8[0x4]
8000431c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004320:	f1 49 00 44 	st.w	r8[68],r9
80004324:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004328:	70 19       	ld.w	r9,r8[0x4]
8000432a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000432e:	91 19       	st.w	r8[0x4],r9
80004330:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004334:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004338:	f2 08 0a 48 	lsr	r8,r9,r8
8000433c:	ef 48 ff f0 	st.w	r7[-16],r8
80004340:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004344:	58 08       	cp.w	r8,0
80004346:	cc 71       	brne	800042d4 <LED_Off+0x34>
80004348:	2f cd       	sub	sp,-16
8000434a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000434e:	00 00       	add	r0,r0
80004350:	80 00       	ld.sh	r0,r0[0x0]
80004352:	ed 74 00 00 	stcond	r6[0],r4
80004356:	01 30       	ld.ub	r0,r0++

80004358 <LED_On>:
80004358:	eb cd 40 80 	pushm	r7,lr
8000435c:	1a 97       	mov	r7,sp
8000435e:	20 4d       	sub	sp,16
80004360:	ef 4c ff f0 	st.w	r7[-16],r12
80004364:	4a 88       	lddpc	r8,80004404 <LED_On+0xac>
80004366:	21 08       	sub	r8,16
80004368:	ef 48 ff f4 	st.w	r7[-12],r8
8000436c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004370:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004374:	ef 48 ff f0 	st.w	r7[-16],r8
80004378:	4a 48       	lddpc	r8,80004408 <LED_On+0xb0>
8000437a:	70 09       	ld.w	r9,r8[0x0]
8000437c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004380:	10 49       	or	r9,r8
80004382:	4a 28       	lddpc	r8,80004408 <LED_On+0xb0>
80004384:	91 09       	st.w	r8[0x0],r9
80004386:	c3 78       	rjmp	800043f4 <LED_On+0x9c>
80004388:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000438c:	5c 98       	brev	r8
8000438e:	f0 08 12 00 	clz	r8,r8
80004392:	5c 58       	castu.b	r8
80004394:	2f f8       	sub	r8,-1
80004396:	ef 68 ff ff 	st.b	r7[-1],r8
8000439a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000439e:	a5 68       	lsl	r8,0x4
800043a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800043a4:	f2 08 00 08 	add	r8,r9,r8
800043a8:	ef 48 ff f4 	st.w	r7[-12],r8
800043ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800043b0:	70 08       	ld.w	r8,r8[0x0]
800043b2:	a9 68       	lsl	r8,0x8
800043b4:	e0 28 f0 00 	sub	r8,61440
800043b8:	ef 48 ff f8 	st.w	r7[-8],r8
800043bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800043c0:	70 19       	ld.w	r9,r8[0x4]
800043c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043c6:	f1 49 00 58 	st.w	r8[88],r9
800043ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800043ce:	70 19       	ld.w	r9,r8[0x4]
800043d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043d4:	f1 49 00 44 	st.w	r8[68],r9
800043d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800043dc:	70 19       	ld.w	r9,r8[0x4]
800043de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043e2:	91 19       	st.w	r8[0x4],r9
800043e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800043e8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800043ec:	f2 08 0a 48 	lsr	r8,r9,r8
800043f0:	ef 48 ff f0 	st.w	r7[-16],r8
800043f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800043f8:	58 08       	cp.w	r8,0
800043fa:	cc 71       	brne	80004388 <LED_On+0x30>
800043fc:	2f cd       	sub	sp,-16
800043fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80004402:	00 00       	add	r0,r0
80004404:	80 00       	ld.sh	r0,r0[0x0]
80004406:	ed 74 00 00 	stcond	r6[0],r4
8000440a:	01 30       	ld.ub	r0,r0++

8000440c <et024006_Init>:
8000440c:	eb cd 40 80 	pushm	r7,lr
80004410:	1a 97       	mov	r7,sp
80004412:	20 2d       	sub	sp,8
80004414:	ef 4c ff fc 	st.w	r7[-4],r12
80004418:	ef 4b ff f8 	st.w	r7[-8],r11
8000441c:	49 08       	lddpc	r8,8000445c <et024006_Init+0x50>
8000441e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004422:	91 09       	st.w	r8[0x0],r9
80004424:	48 e8       	lddpc	r8,8000445c <et024006_Init+0x50>
80004426:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000442a:	91 19       	st.w	r8[0x4],r9
8000442c:	48 c8       	lddpc	r8,8000445c <et024006_Init+0x50>
8000442e:	70 18       	ld.w	r8,r8[0x4]
80004430:	10 9c       	mov	r12,r8
80004432:	f0 1f 00 0c 	mcall	80004460 <et024006_Init+0x54>
80004436:	f0 1f 00 0c 	mcall	80004464 <et024006_Init+0x58>
8000443a:	f0 1f 00 0c 	mcall	80004468 <et024006_Init+0x5c>
8000443e:	f0 1f 00 0c 	mcall	8000446c <et024006_Init+0x60>
80004442:	f0 1f 00 0c 	mcall	80004470 <et024006_Init+0x64>
80004446:	f0 1f 00 0c 	mcall	80004474 <et024006_Init+0x68>
8000444a:	f0 1f 00 0c 	mcall	80004478 <et024006_Init+0x6c>
8000444e:	f0 1f 00 0c 	mcall	8000447c <et024006_Init+0x70>
80004452:	f0 1f 00 0c 	mcall	80004480 <et024006_Init+0x74>
80004456:	2f ed       	sub	sp,-8
80004458:	e3 cd 80 80 	ldm	sp++,r7,pc
8000445c:	00 00       	add	r0,r0
8000445e:	06 0c       	add	r12,r3
80004460:	80 00       	ld.sh	r0,r0[0x0]
80004462:	82 64       	ld.sh	r4,r1[0xc]
80004464:	80 00       	ld.sh	r0,r0[0x0]
80004466:	4c 10       	lddpc	r0,80004568 <et024006_PrintString+0x5c>
80004468:	80 00       	ld.sh	r0,r0[0x0]
8000446a:	4c 3c       	lddpc	r12,80004574 <et024006_PrintString+0x68>
8000446c:	80 00       	ld.sh	r0,r0[0x0]
8000446e:	4e fc       	lddpc	r12,80004628 <et024006_PrintString+0x11c>
80004470:	80 00       	ld.sh	r0,r0[0x0]
80004472:	50 8a       	stdsp	sp[0x20],r10
80004474:	80 00       	ld.sh	r0,r0[0x0]
80004476:	54 26       	stdsp	sp[0x108],r6
80004478:	80 00       	ld.sh	r0,r0[0x0]
8000447a:	52 98       	stdsp	sp[0xa4],r8
8000447c:	80 00       	ld.sh	r0,r0[0x0]
8000447e:	54 54       	stdsp	sp[0x114],r4
80004480:	80 00       	ld.sh	r0,r0[0x0]
80004482:	5b 88       	cp.w	r8,-8

80004484 <et024006_DrawFilledRect>:
80004484:	eb cd 40 80 	pushm	r7,lr
80004488:	1a 97       	mov	r7,sp
8000448a:	20 7d       	sub	sp,28
8000448c:	ef 5c ff f4 	st.h	r7[-12],r12
80004490:	ef 5b ff f0 	st.h	r7[-16],r11
80004494:	ef 5a ff ec 	st.h	r7[-20],r10
80004498:	ef 59 ff e8 	st.h	r7[-24],r9
8000449c:	ef 58 ff e4 	st.h	r7[-28],r8
800044a0:	ef 09 ff f4 	ld.sh	r9,r7[-12]
800044a4:	ef 08 ff ec 	ld.sh	r8,r7[-20]
800044a8:	f2 08 00 08 	add	r8,r9,r8
800044ac:	5c 88       	casts.h	r8
800044ae:	20 18       	sub	r8,1
800044b0:	ef 58 ff f8 	st.h	r7[-8],r8
800044b4:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800044b8:	ef 08 ff e8 	ld.sh	r8,r7[-24]
800044bc:	f2 08 00 08 	add	r8,r9,r8
800044c0:	5c 88       	casts.h	r8
800044c2:	20 18       	sub	r8,1
800044c4:	ef 58 ff fa 	st.h	r7[-6],r8
800044c8:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800044cc:	ef 1a ff f8 	ld.uh	r10,r7[-8]
800044d0:	ef 1b ff f0 	ld.uh	r11,r7[-16]
800044d4:	ef 18 ff f4 	ld.uh	r8,r7[-12]
800044d8:	10 9c       	mov	r12,r8
800044da:	f0 1f 00 0b 	mcall	80004504 <et024006_DrawFilledRect+0x80>
800044de:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800044e2:	ef 18 ff e8 	ld.uh	r8,r7[-24]
800044e6:	f2 08 02 48 	mul	r8,r9,r8
800044ea:	ef 48 ff fc 	st.w	r7[-4],r8
800044ee:	ef 18 ff e4 	ld.uh	r8,r7[-28]
800044f2:	ee fb ff fc 	ld.w	r11,r7[-4]
800044f6:	10 9c       	mov	r12,r8
800044f8:	f0 1f 00 04 	mcall	80004508 <et024006_DrawFilledRect+0x84>
800044fc:	2f 9d       	sub	sp,-28
800044fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80004502:	00 00       	add	r0,r0
80004504:	80 00       	ld.sh	r0,r0[0x0]
80004506:	49 0a       	lddpc	r10,80004544 <et024006_PrintString+0x38>
80004508:	80 00       	ld.sh	r0,r0[0x0]
8000450a:	4b 64       	lddpc	r4,800045e0 <et024006_PrintString+0xd4>

8000450c <et024006_PrintString>:
8000450c:	eb cd 40 c0 	pushm	r6-r7,lr
80004510:	1a 97       	mov	r7,sp
80004512:	20 9d       	sub	sp,36
80004514:	ee c6 ff f4 	sub	r6,r7,-12
80004518:	ef 4c ff ec 	st.w	r7[-20],r12
8000451c:	ef 4b ff e8 	st.w	r7[-24],r11
80004520:	ef 5a ff e4 	st.h	r7[-28],r10
80004524:	ef 59 ff e0 	st.h	r7[-32],r9
80004528:	ef 58 ff dc 	st.h	r7[-36],r8
8000452c:	30 08       	mov	r8,0
8000452e:	ef 68 ff f4 	st.b	r7[-12],r8
80004532:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80004536:	ef 58 ff fc 	st.h	r7[-4],r8
8000453a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000453e:	11 88       	ld.ub	r8,r8[0x0]
80004540:	58 08       	cp.w	r8,0
80004542:	e0 80 01 a4 	breq	8000488a <et024006_PrintString+0x37e>
80004546:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000454a:	ef 48 ff f8 	st.w	r7[-8],r8
8000454e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004552:	11 88       	ld.ub	r8,r8[0x0]
80004554:	ef 68 ff f5 	st.b	r7[-11],r8
80004558:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000455c:	2f f8       	sub	r8,-1
8000455e:	ef 48 ff f8 	st.w	r7[-8],r8
80004562:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004566:	11 88       	ld.ub	r8,r8[0x0]
80004568:	ef 68 ff f6 	st.b	r7[-10],r8
8000456c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004570:	2f f8       	sub	r8,-1
80004572:	ef 48 ff f8 	st.w	r7[-8],r8
80004576:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000457a:	11 88       	ld.ub	r8,r8[0x0]
8000457c:	ef 68 ff f7 	st.b	r7[-9],r8
80004580:	6c 08       	ld.w	r8,r6[0x0]
80004582:	5b f8       	cp.w	r8,-1
80004584:	e0 81 00 c8 	brne	80004714 <et024006_PrintString+0x208>
80004588:	e0 69 00 ef 	mov	r9,239
8000458c:	e0 6a 01 3f 	mov	r10,319
80004590:	30 0b       	mov	r11,0
80004592:	30 0c       	mov	r12,0
80004594:	f0 1f 00 c0 	mcall	80004894 <et024006_PrintString+0x388>
80004598:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000459c:	11 89       	ld.ub	r9,r8[0x0]
8000459e:	30 a8       	mov	r8,10
800045a0:	f0 09 18 00 	cp.b	r9,r8
800045a4:	c1 31       	brne	800045ca <et024006_PrintString+0xbe>
800045a6:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800045aa:	ef 58 ff e4 	st.h	r7[-28],r8
800045ae:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800045b2:	ef 09 ff e0 	ld.sh	r9,r7[-32]
800045b6:	f2 08 00 08 	add	r8,r9,r8
800045ba:	ef 58 ff e0 	st.h	r7[-32],r8
800045be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045c2:	2f f8       	sub	r8,-1
800045c4:	ef 48 ff ec 	st.w	r7[-20],r8
800045c8:	c9 f8       	rjmp	80004706 <et024006_PrintString+0x1fa>
800045ca:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045ce:	11 89       	ld.ub	r9,r8[0x0]
800045d0:	30 98       	mov	r8,9
800045d2:	f0 09 18 00 	cp.b	r9,r8
800045d6:	c0 f1       	brne	800045f4 <et024006_PrintString+0xe8>
800045d8:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800045dc:	ef 09 ff e4 	ld.sh	r9,r7[-28]
800045e0:	f2 08 00 08 	add	r8,r9,r8
800045e4:	ef 58 ff e4 	st.h	r7[-28],r8
800045e8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045ec:	2f f8       	sub	r8,-1
800045ee:	ef 48 ff ec 	st.w	r7[-20],r8
800045f2:	c8 a8       	rjmp	80004706 <et024006_PrintString+0x1fa>
800045f4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045f8:	11 89       	ld.ub	r9,r8[0x0]
800045fa:	31 f8       	mov	r8,31
800045fc:	f0 09 18 00 	cp.b	r9,r8
80004600:	e0 88 00 1d 	brls	8000463a <et024006_PrintString+0x12e>
80004604:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004608:	11 88       	ld.ub	r8,r8[0x0]
8000460a:	10 99       	mov	r9,r8
8000460c:	30 08       	mov	r8,0
8000460e:	f0 09 18 00 	cp.b	r9,r8
80004612:	c1 45       	brlt	8000463a <et024006_PrintString+0x12e>
80004614:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80004618:	ef 3a ff f7 	ld.ub	r10,r7[-9]
8000461c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004620:	11 88       	ld.ub	r8,r8[0x0]
80004622:	22 08       	sub	r8,32
80004624:	f4 08 02 48 	mul	r8,r10,r8
80004628:	f2 08 00 08 	add	r8,r9,r8
8000462c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004630:	f2 08 00 08 	add	r8,r9,r8
80004634:	ef 48 ff f8 	st.w	r7[-8],r8
80004638:	c1 28       	rjmp	8000465c <et024006_PrintString+0x150>
8000463a:	ef 3a ff f7 	ld.ub	r10,r7[-9]
8000463e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80004642:	12 98       	mov	r8,r9
80004644:	a1 78       	lsl	r8,0x1
80004646:	12 08       	add	r8,r9
80004648:	a5 78       	lsl	r8,0x5
8000464a:	12 18       	sub	r8,r9
8000464c:	f4 08 00 08 	add	r8,r10,r8
80004650:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004654:	f2 08 00 08 	add	r8,r9,r8
80004658:	ef 48 ff f8 	st.w	r7[-8],r8
8000465c:	ef 08 ff e0 	ld.sh	r8,r7[-32]
80004660:	ef 58 ff f0 	st.h	r7[-16],r8
80004664:	c3 a8       	rjmp	800046d8 <et024006_PrintString+0x1cc>
80004666:	38 08       	mov	r8,-128
80004668:	ef 68 ff f4 	st.b	r7[-12],r8
8000466c:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80004670:	ef 58 ff f2 	st.h	r7[-14],r8
80004674:	c1 e8       	rjmp	800046b0 <et024006_PrintString+0x1a4>
80004676:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000467a:	11 89       	ld.ub	r9,r8[0x0]
8000467c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004680:	f3 e8 00 08 	and	r8,r9,r8
80004684:	5c 58       	castu.b	r8
80004686:	c0 b0       	breq	8000469c <et024006_PrintString+0x190>
80004688:	ef 1a ff dc 	ld.uh	r10,r7[-36]
8000468c:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80004690:	ef 18 ff f2 	ld.uh	r8,r7[-14]
80004694:	12 9b       	mov	r11,r9
80004696:	10 9c       	mov	r12,r8
80004698:	f0 1f 00 80 	mcall	80004898 <et024006_PrintString+0x38c>
8000469c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800046a0:	a1 98       	lsr	r8,0x1
800046a2:	ef 68 ff f4 	st.b	r7[-12],r8
800046a6:	ef 08 ff f2 	ld.sh	r8,r7[-14]
800046aa:	2f f8       	sub	r8,-1
800046ac:	ef 58 ff f2 	st.h	r7[-14],r8
800046b0:	ef 19 ff f2 	ld.uh	r9,r7[-14]
800046b4:	ef 1a ff e4 	ld.uh	r10,r7[-28]
800046b8:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800046bc:	f4 08 00 08 	add	r8,r10,r8
800046c0:	10 39       	cp.w	r9,r8
800046c2:	cd a5       	brlt	80004676 <et024006_PrintString+0x16a>
800046c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046c8:	2f f8       	sub	r8,-1
800046ca:	ef 48 ff f8 	st.w	r7[-8],r8
800046ce:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800046d2:	2f f8       	sub	r8,-1
800046d4:	ef 58 ff f0 	st.h	r7[-16],r8
800046d8:	ef 19 ff f0 	ld.uh	r9,r7[-16]
800046dc:	ef 1a ff e0 	ld.uh	r10,r7[-32]
800046e0:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800046e4:	f4 08 00 08 	add	r8,r10,r8
800046e8:	10 39       	cp.w	r9,r8
800046ea:	cb e5       	brlt	80004666 <et024006_PrintString+0x15a>
800046ec:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800046f0:	ef 09 ff e4 	ld.sh	r9,r7[-28]
800046f4:	f2 08 00 08 	add	r8,r9,r8
800046f8:	ef 58 ff e4 	st.h	r7[-28],r8
800046fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004700:	2f f8       	sub	r8,-1
80004702:	ef 48 ff ec 	st.w	r7[-20],r8
80004706:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000470a:	11 88       	ld.ub	r8,r8[0x0]
8000470c:	58 08       	cp.w	r8,0
8000470e:	fe 91 ff 45 	brne	80004598 <et024006_PrintString+0x8c>
80004712:	cb d8       	rjmp	8000488c <et024006_PrintString+0x380>
80004714:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004718:	11 89       	ld.ub	r9,r8[0x0]
8000471a:	30 a8       	mov	r8,10
8000471c:	f0 09 18 00 	cp.b	r9,r8
80004720:	c1 31       	brne	80004746 <et024006_PrintString+0x23a>
80004722:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80004726:	ef 58 ff e4 	st.h	r7[-28],r8
8000472a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000472e:	ef 09 ff e0 	ld.sh	r9,r7[-32]
80004732:	f2 08 00 08 	add	r8,r9,r8
80004736:	ef 58 ff e0 	st.h	r7[-32],r8
8000473a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000473e:	2f f8       	sub	r8,-1
80004740:	ef 48 ff ec 	st.w	r7[-20],r8
80004744:	c9 c8       	rjmp	8000487c <et024006_PrintString+0x370>
80004746:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000474a:	11 89       	ld.ub	r9,r8[0x0]
8000474c:	30 98       	mov	r8,9
8000474e:	f0 09 18 00 	cp.b	r9,r8
80004752:	c0 f1       	brne	80004770 <et024006_PrintString+0x264>
80004754:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004758:	ef 09 ff e4 	ld.sh	r9,r7[-28]
8000475c:	f2 08 00 08 	add	r8,r9,r8
80004760:	ef 58 ff e4 	st.h	r7[-28],r8
80004764:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004768:	2f f8       	sub	r8,-1
8000476a:	ef 48 ff ec 	st.w	r7[-20],r8
8000476e:	c8 78       	rjmp	8000487c <et024006_PrintString+0x370>
80004770:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80004774:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80004778:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000477c:	11 88       	ld.ub	r8,r8[0x0]
8000477e:	22 08       	sub	r8,32
80004780:	f4 08 02 48 	mul	r8,r10,r8
80004784:	f2 08 00 08 	add	r8,r9,r8
80004788:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000478c:	f2 08 00 08 	add	r8,r9,r8
80004790:	ef 48 ff f8 	st.w	r7[-8],r8
80004794:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004798:	ef 09 ff e0 	ld.sh	r9,r7[-32]
8000479c:	f2 08 00 08 	add	r8,r9,r8
800047a0:	5c 88       	casts.h	r8
800047a2:	20 18       	sub	r8,1
800047a4:	5c 88       	casts.h	r8
800047a6:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
800047aa:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800047ae:	ef 09 ff e4 	ld.sh	r9,r7[-28]
800047b2:	f2 08 00 08 	add	r8,r9,r8
800047b6:	5c 88       	casts.h	r8
800047b8:	20 18       	sub	r8,1
800047ba:	5c 88       	casts.h	r8
800047bc:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800047c0:	ef 1b ff e0 	ld.uh	r11,r7[-32]
800047c4:	ef 18 ff e4 	ld.uh	r8,r7[-28]
800047c8:	18 99       	mov	r9,r12
800047ca:	10 9c       	mov	r12,r8
800047cc:	f0 1f 00 32 	mcall	80004894 <et024006_PrintString+0x388>
800047d0:	32 28       	mov	r8,34
800047d2:	ef 68 ff ff 	st.b	r7[-1],r8
800047d6:	fc 19 c0 00 	movh	r9,0xc000
800047da:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800047de:	b2 08       	st.h	r9[0x0],r8
800047e0:	30 08       	mov	r8,0
800047e2:	ef 58 ff f0 	st.h	r7[-16],r8
800047e6:	c3 78       	rjmp	80004854 <et024006_PrintString+0x348>
800047e8:	38 08       	mov	r8,-128
800047ea:	ef 68 ff f4 	st.b	r7[-12],r8
800047ee:	30 08       	mov	r8,0
800047f0:	ef 58 ff f2 	st.h	r7[-14],r8
800047f4:	c1 f8       	rjmp	80004832 <et024006_PrintString+0x326>
800047f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047fa:	11 89       	ld.ub	r9,r8[0x0]
800047fc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004800:	f3 e8 00 08 	and	r8,r9,r8
80004804:	5c 58       	castu.b	r8
80004806:	c0 70       	breq	80004814 <et024006_PrintString+0x308>
80004808:	fc 19 c0 20 	movh	r9,0xc020
8000480c:	ef 08 ff dc 	ld.sh	r8,r7[-36]
80004810:	b2 08       	st.h	r9[0x0],r8
80004812:	c0 68       	rjmp	8000481e <et024006_PrintString+0x312>
80004814:	fc 19 c0 20 	movh	r9,0xc020
80004818:	6c 08       	ld.w	r8,r6[0x0]
8000481a:	5c 88       	casts.h	r8
8000481c:	b2 08       	st.h	r9[0x0],r8
8000481e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004822:	a1 98       	lsr	r8,0x1
80004824:	ef 68 ff f4 	st.b	r7[-12],r8
80004828:	ef 08 ff f2 	ld.sh	r8,r7[-14]
8000482c:	2f f8       	sub	r8,-1
8000482e:	ef 58 ff f2 	st.h	r7[-14],r8
80004832:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004836:	ef 09 ff f2 	ld.sh	r9,r7[-14]
8000483a:	f0 09 19 00 	cp.h	r9,r8
8000483e:	cd c3       	brcs	800047f6 <et024006_PrintString+0x2ea>
80004840:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004844:	2f f8       	sub	r8,-1
80004846:	ef 48 ff f8 	st.w	r7[-8],r8
8000484a:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000484e:	2f f8       	sub	r8,-1
80004850:	ef 58 ff f0 	st.h	r7[-16],r8
80004854:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004858:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000485c:	f0 09 19 00 	cp.h	r9,r8
80004860:	cc 43       	brcs	800047e8 <et024006_PrintString+0x2dc>
80004862:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004866:	ef 09 ff e4 	ld.sh	r9,r7[-28]
8000486a:	f2 08 00 08 	add	r8,r9,r8
8000486e:	ef 58 ff e4 	st.h	r7[-28],r8
80004872:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004876:	2f f8       	sub	r8,-1
80004878:	ef 48 ff ec 	st.w	r7[-20],r8
8000487c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004880:	11 88       	ld.ub	r8,r8[0x0]
80004882:	58 08       	cp.w	r8,0
80004884:	fe 91 ff 48 	brne	80004714 <et024006_PrintString+0x208>
80004888:	c0 28       	rjmp	8000488c <et024006_PrintString+0x380>
8000488a:	d7 03       	nop
8000488c:	2f 7d       	sub	sp,-36
8000488e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004892:	00 00       	add	r0,r0
80004894:	80 00       	ld.sh	r0,r0[0x0]
80004896:	49 0a       	lddpc	r10,800048d4 <et024006_SetRegister+0x38>
80004898:	80 00       	ld.sh	r0,r0[0x0]
8000489a:	4b 14       	lddpc	r4,8000495c <et024006_SetLimits+0x52>

8000489c <et024006_SetRegister>:
8000489c:	eb cd 40 80 	pushm	r7,lr
800048a0:	1a 97       	mov	r7,sp
800048a2:	20 3d       	sub	sp,12
800048a4:	18 99       	mov	r9,r12
800048a6:	16 98       	mov	r8,r11
800048a8:	ef 69 ff f8 	st.b	r7[-8],r9
800048ac:	ef 68 ff f4 	st.b	r7[-12],r8
800048b0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800048b4:	ef 68 ff fd 	st.b	r7[-3],r8
800048b8:	fc 19 c0 00 	movh	r9,0xc000
800048bc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800048c0:	b2 08       	st.h	r9[0x0],r8
800048c2:	fc 18 c0 20 	movh	r8,0xc020
800048c6:	90 08       	ld.sh	r8,r8[0x0]
800048c8:	5c 88       	casts.h	r8
800048ca:	5c 58       	castu.b	r8
800048cc:	ef 68 ff fc 	st.b	r7[-4],r8
800048d0:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800048d4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800048d8:	f3 e8 10 08 	or	r8,r9,r8
800048dc:	ef 68 ff fc 	st.b	r7[-4],r8
800048e0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800048e4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800048e8:	ef 69 ff ff 	st.b	r7[-1],r9
800048ec:	ef 68 ff fe 	st.b	r7[-2],r8
800048f0:	fc 19 c0 00 	movh	r9,0xc000
800048f4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800048f8:	b2 08       	st.h	r9[0x0],r8
800048fa:	fc 19 c0 20 	movh	r9,0xc020
800048fe:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004902:	b2 08       	st.h	r9[0x0],r8
80004904:	2f dd       	sub	sp,-12
80004906:	e3 cd 80 80 	ldm	sp++,r7,pc

8000490a <et024006_SetLimits>:
8000490a:	eb cd 40 80 	pushm	r7,lr
8000490e:	1a 97       	mov	r7,sp
80004910:	20 8d       	sub	sp,32
80004912:	12 98       	mov	r8,r9
80004914:	18 99       	mov	r9,r12
80004916:	ef 59 ff ec 	st.h	r7[-20],r9
8000491a:	16 99       	mov	r9,r11
8000491c:	ef 59 ff e8 	st.h	r7[-24],r9
80004920:	14 99       	mov	r9,r10
80004922:	ef 59 ff e4 	st.h	r7[-28],r9
80004926:	ef 58 ff e0 	st.h	r7[-32],r8
8000492a:	ef 18 ff ec 	ld.uh	r8,r7[-20]
8000492e:	a9 88       	lsr	r8,0x8
80004930:	5c 88       	casts.h	r8
80004932:	5c 58       	castu.b	r8
80004934:	30 29       	mov	r9,2
80004936:	ef 69 ff f1 	st.b	r7[-15],r9
8000493a:	ef 68 ff f0 	st.b	r7[-16],r8
8000493e:	fc 19 c0 00 	movh	r9,0xc000
80004942:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80004946:	b2 08       	st.h	r9[0x0],r8
80004948:	fc 19 c0 20 	movh	r9,0xc020
8000494c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80004950:	b2 08       	st.h	r9[0x0],r8
80004952:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80004956:	5c 58       	castu.b	r8
80004958:	30 39       	mov	r9,3
8000495a:	ef 69 ff f3 	st.b	r7[-13],r9
8000495e:	ef 68 ff f2 	st.b	r7[-14],r8
80004962:	fc 19 c0 00 	movh	r9,0xc000
80004966:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000496a:	b2 08       	st.h	r9[0x0],r8
8000496c:	fc 19 c0 20 	movh	r9,0xc020
80004970:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80004974:	b2 08       	st.h	r9[0x0],r8
80004976:	ef 18 ff e4 	ld.uh	r8,r7[-28]
8000497a:	a9 88       	lsr	r8,0x8
8000497c:	5c 88       	casts.h	r8
8000497e:	5c 58       	castu.b	r8
80004980:	30 49       	mov	r9,4
80004982:	ef 69 ff f5 	st.b	r7[-11],r9
80004986:	ef 68 ff f4 	st.b	r7[-12],r8
8000498a:	fc 19 c0 00 	movh	r9,0xc000
8000498e:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004992:	b2 08       	st.h	r9[0x0],r8
80004994:	fc 19 c0 20 	movh	r9,0xc020
80004998:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000499c:	b2 08       	st.h	r9[0x0],r8
8000499e:	ef 08 ff e4 	ld.sh	r8,r7[-28]
800049a2:	5c 58       	castu.b	r8
800049a4:	30 59       	mov	r9,5
800049a6:	ef 69 ff f7 	st.b	r7[-9],r9
800049aa:	ef 68 ff f6 	st.b	r7[-10],r8
800049ae:	fc 19 c0 00 	movh	r9,0xc000
800049b2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800049b6:	b2 08       	st.h	r9[0x0],r8
800049b8:	fc 19 c0 20 	movh	r9,0xc020
800049bc:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800049c0:	b2 08       	st.h	r9[0x0],r8
800049c2:	ef 18 ff e8 	ld.uh	r8,r7[-24]
800049c6:	a9 88       	lsr	r8,0x8
800049c8:	5c 88       	casts.h	r8
800049ca:	5c 58       	castu.b	r8
800049cc:	30 69       	mov	r9,6
800049ce:	ef 69 ff f9 	st.b	r7[-7],r9
800049d2:	ef 68 ff f8 	st.b	r7[-8],r8
800049d6:	fc 19 c0 00 	movh	r9,0xc000
800049da:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800049de:	b2 08       	st.h	r9[0x0],r8
800049e0:	fc 19 c0 20 	movh	r9,0xc020
800049e4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800049e8:	b2 08       	st.h	r9[0x0],r8
800049ea:	ef 08 ff e8 	ld.sh	r8,r7[-24]
800049ee:	5c 58       	castu.b	r8
800049f0:	30 79       	mov	r9,7
800049f2:	ef 69 ff fb 	st.b	r7[-5],r9
800049f6:	ef 68 ff fa 	st.b	r7[-6],r8
800049fa:	fc 19 c0 00 	movh	r9,0xc000
800049fe:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004a02:	b2 08       	st.h	r9[0x0],r8
80004a04:	fc 19 c0 20 	movh	r9,0xc020
80004a08:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004a0c:	b2 08       	st.h	r9[0x0],r8
80004a0e:	ef 18 ff e0 	ld.uh	r8,r7[-32]
80004a12:	a9 88       	lsr	r8,0x8
80004a14:	5c 88       	casts.h	r8
80004a16:	5c 58       	castu.b	r8
80004a18:	30 89       	mov	r9,8
80004a1a:	ef 69 ff fd 	st.b	r7[-3],r9
80004a1e:	ef 68 ff fc 	st.b	r7[-4],r8
80004a22:	fc 19 c0 00 	movh	r9,0xc000
80004a26:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004a2a:	b2 08       	st.h	r9[0x0],r8
80004a2c:	fc 19 c0 20 	movh	r9,0xc020
80004a30:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004a34:	b2 08       	st.h	r9[0x0],r8
80004a36:	ef 08 ff e0 	ld.sh	r8,r7[-32]
80004a3a:	5c 58       	castu.b	r8
80004a3c:	30 99       	mov	r9,9
80004a3e:	ef 69 ff ff 	st.b	r7[-1],r9
80004a42:	ef 68 ff fe 	st.b	r7[-2],r8
80004a46:	fc 19 c0 00 	movh	r9,0xc000
80004a4a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004a4e:	b2 08       	st.h	r9[0x0],r8
80004a50:	fc 19 c0 20 	movh	r9,0xc020
80004a54:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004a58:	b2 08       	st.h	r9[0x0],r8
80004a5a:	2f 8d       	sub	sp,-32
80004a5c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004a60 <et024006_SetQuickLimits>:
80004a60:	eb cd 40 80 	pushm	r7,lr
80004a64:	1a 97       	mov	r7,sp
80004a66:	20 4d       	sub	sp,16
80004a68:	18 99       	mov	r9,r12
80004a6a:	16 98       	mov	r8,r11
80004a6c:	ef 59 ff f4 	st.h	r7[-12],r9
80004a70:	ef 58 ff f0 	st.h	r7[-16],r8
80004a74:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80004a78:	a9 88       	lsr	r8,0x8
80004a7a:	5c 88       	casts.h	r8
80004a7c:	5c 58       	castu.b	r8
80004a7e:	30 29       	mov	r9,2
80004a80:	ef 69 ff f9 	st.b	r7[-7],r9
80004a84:	ef 68 ff f8 	st.b	r7[-8],r8
80004a88:	fc 19 c0 00 	movh	r9,0xc000
80004a8c:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004a90:	b2 08       	st.h	r9[0x0],r8
80004a92:	fc 19 c0 20 	movh	r9,0xc020
80004a96:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004a9a:	b2 08       	st.h	r9[0x0],r8
80004a9c:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80004aa0:	5c 58       	castu.b	r8
80004aa2:	30 39       	mov	r9,3
80004aa4:	ef 69 ff fb 	st.b	r7[-5],r9
80004aa8:	ef 68 ff fa 	st.b	r7[-6],r8
80004aac:	fc 19 c0 00 	movh	r9,0xc000
80004ab0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004ab4:	b2 08       	st.h	r9[0x0],r8
80004ab6:	fc 19 c0 20 	movh	r9,0xc020
80004aba:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004abe:	b2 08       	st.h	r9[0x0],r8
80004ac0:	ef 18 ff f0 	ld.uh	r8,r7[-16]
80004ac4:	a9 88       	lsr	r8,0x8
80004ac6:	5c 88       	casts.h	r8
80004ac8:	5c 58       	castu.b	r8
80004aca:	30 69       	mov	r9,6
80004acc:	ef 69 ff fd 	st.b	r7[-3],r9
80004ad0:	ef 68 ff fc 	st.b	r7[-4],r8
80004ad4:	fc 19 c0 00 	movh	r9,0xc000
80004ad8:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004adc:	b2 08       	st.h	r9[0x0],r8
80004ade:	fc 19 c0 20 	movh	r9,0xc020
80004ae2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004ae6:	b2 08       	st.h	r9[0x0],r8
80004ae8:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004aec:	5c 58       	castu.b	r8
80004aee:	30 79       	mov	r9,7
80004af0:	ef 69 ff ff 	st.b	r7[-1],r9
80004af4:	ef 68 ff fe 	st.b	r7[-2],r8
80004af8:	fc 19 c0 00 	movh	r9,0xc000
80004afc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004b00:	b2 08       	st.h	r9[0x0],r8
80004b02:	fc 19 c0 20 	movh	r9,0xc020
80004b06:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004b0a:	b2 08       	st.h	r9[0x0],r8
80004b0c:	2f cd       	sub	sp,-16
80004b0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b12:	d7 03       	nop

80004b14 <et024006_DrawQuickPixel>:
80004b14:	eb cd 40 80 	pushm	r7,lr
80004b18:	1a 97       	mov	r7,sp
80004b1a:	20 4d       	sub	sp,16
80004b1c:	16 99       	mov	r9,r11
80004b1e:	14 98       	mov	r8,r10
80004b20:	18 9a       	mov	r10,r12
80004b22:	ef 5a ff f8 	st.h	r7[-8],r10
80004b26:	ef 59 ff f4 	st.h	r7[-12],r9
80004b2a:	ef 58 ff f0 	st.h	r7[-16],r8
80004b2e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80004b32:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80004b36:	12 9b       	mov	r11,r9
80004b38:	10 9c       	mov	r12,r8
80004b3a:	f0 1f 00 0a 	mcall	80004b60 <et024006_DrawQuickPixel+0x4c>
80004b3e:	32 28       	mov	r8,34
80004b40:	ef 68 ff ff 	st.b	r7[-1],r8
80004b44:	fc 19 c0 00 	movh	r9,0xc000
80004b48:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004b4c:	b2 08       	st.h	r9[0x0],r8
80004b4e:	fc 19 c0 20 	movh	r9,0xc020
80004b52:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004b56:	b2 08       	st.h	r9[0x0],r8
80004b58:	2f cd       	sub	sp,-16
80004b5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b5e:	00 00       	add	r0,r0
80004b60:	80 00       	ld.sh	r0,r0[0x0]
80004b62:	4a 60       	lddpc	r0,80004bf8 <et024006_DuplicatePixel+0x94>

80004b64 <et024006_DuplicatePixel>:
80004b64:	eb cd 40 80 	pushm	r7,lr
80004b68:	1a 97       	mov	r7,sp
80004b6a:	20 3d       	sub	sp,12
80004b6c:	18 98       	mov	r8,r12
80004b6e:	ef 4b ff f4 	st.w	r7[-12],r11
80004b72:	ef 58 ff f8 	st.h	r7[-8],r8
80004b76:	32 28       	mov	r8,34
80004b78:	ef 68 ff ff 	st.b	r7[-1],r8
80004b7c:	fc 19 c0 00 	movh	r9,0xc000
80004b80:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004b84:	b2 08       	st.h	r9[0x0],r8
80004b86:	c2 e8       	rjmp	80004be2 <et024006_DuplicatePixel+0x7e>
80004b88:	fc 19 c0 20 	movh	r9,0xc020
80004b8c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b90:	b2 08       	st.h	r9[0x0],r8
80004b92:	fc 19 c0 20 	movh	r9,0xc020
80004b96:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b9a:	b2 08       	st.h	r9[0x0],r8
80004b9c:	fc 19 c0 20 	movh	r9,0xc020
80004ba0:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004ba4:	b2 08       	st.h	r9[0x0],r8
80004ba6:	fc 19 c0 20 	movh	r9,0xc020
80004baa:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bae:	b2 08       	st.h	r9[0x0],r8
80004bb0:	fc 19 c0 20 	movh	r9,0xc020
80004bb4:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bb8:	b2 08       	st.h	r9[0x0],r8
80004bba:	fc 19 c0 20 	movh	r9,0xc020
80004bbe:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bc2:	b2 08       	st.h	r9[0x0],r8
80004bc4:	fc 19 c0 20 	movh	r9,0xc020
80004bc8:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bcc:	b2 08       	st.h	r9[0x0],r8
80004bce:	fc 19 c0 20 	movh	r9,0xc020
80004bd2:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bd6:	b2 08       	st.h	r9[0x0],r8
80004bd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bdc:	20 88       	sub	r8,8
80004bde:	ef 48 ff f4 	st.w	r7[-12],r8
80004be2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004be6:	58 78       	cp.w	r8,7
80004be8:	fe 9b ff d0 	brhi	80004b88 <et024006_DuplicatePixel+0x24>
80004bec:	c0 b8       	rjmp	80004c02 <et024006_DuplicatePixel+0x9e>
80004bee:	fc 19 c0 20 	movh	r9,0xc020
80004bf2:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bf6:	b2 08       	st.h	r9[0x0],r8
80004bf8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bfc:	20 18       	sub	r8,1
80004bfe:	ef 48 ff f4 	st.w	r7[-12],r8
80004c02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c06:	58 08       	cp.w	r8,0
80004c08:	cf 31       	brne	80004bee <et024006_DuplicatePixel+0x8a>
80004c0a:	2f dd       	sub	sp,-12
80004c0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004c10 <et024006_SetupInterface>:
80004c10:	eb cd 40 80 	pushm	r7,lr
80004c14:	1a 97       	mov	r7,sp
80004c16:	30 0c       	mov	r12,0
80004c18:	f0 1f 00 06 	mcall	80004c30 <et024006_SetupInterface+0x20>
80004c1c:	30 2b       	mov	r11,2
80004c1e:	30 9c       	mov	r12,9
80004c20:	f0 1f 00 05 	mcall	80004c34 <et024006_SetupInterface+0x24>
80004c24:	34 2c       	mov	r12,66
80004c26:	f0 1f 00 05 	mcall	80004c38 <et024006_SetupInterface+0x28>
80004c2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c2e:	00 00       	add	r0,r0
80004c30:	80 00       	ld.sh	r0,r0[0x0]
80004c32:	8b 2c       	st.w	r5[0x8],r12
80004c34:	80 00       	ld.sh	r0,r0[0x0]
80004c36:	8a 1c       	ld.sh	r12,r5[0x2]
80004c38:	80 00       	ld.sh	r0,r0[0x0]
80004c3a:	8d 9e       	st.w	r6[0x24],lr

80004c3c <et024006_ResetDisplay>:
80004c3c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80004c40:	1a 97       	mov	r7,sp
80004c42:	21 ad       	sub	sp,104
80004c44:	34 2c       	mov	r12,66
80004c46:	f0 1f 00 aa 	mcall	80004eec <et024006_ResetDisplay+0x2b0>
80004c4a:	fe f8 02 a6 	ld.w	r8,pc[678]
80004c4e:	70 08       	ld.w	r8,r8[0x0]
80004c50:	33 29       	mov	r9,50
80004c52:	ef 49 ff c4 	st.w	r7[-60],r9
80004c56:	ef 48 ff c0 	st.w	r7[-64],r8
80004c5a:	ee f8 ff c4 	ld.w	r8,r7[-60]
80004c5e:	ef 48 ff cc 	st.w	r7[-52],r8
80004c62:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004c66:	ef 48 ff c8 	st.w	r7[-56],r8
80004c6a:	ee fc ff cc 	ld.w	r12,r7[-52]
80004c6e:	ef 4c ff a4 	st.w	r7[-92],r12
80004c72:	30 0b       	mov	r11,0
80004c74:	ef 4b ff a0 	st.w	r7[-96],r11
80004c78:	ee f9 ff c8 	ld.w	r9,r7[-56]
80004c7c:	ef 49 ff 9c 	st.w	r7[-100],r9
80004c80:	30 08       	mov	r8,0
80004c82:	ef 48 ff 98 	st.w	r7[-104],r8
80004c86:	ee fa ff a0 	ld.w	r10,r7[-96]
80004c8a:	ee fc ff 9c 	ld.w	r12,r7[-100]
80004c8e:	b9 3a       	mul	r10,r12
80004c90:	ee f8 ff 98 	ld.w	r8,r7[-104]
80004c94:	ee fb ff a4 	ld.w	r11,r7[-92]
80004c98:	b7 38       	mul	r8,r11
80004c9a:	10 0a       	add	r10,r8
80004c9c:	ee fc ff a4 	ld.w	r12,r7[-92]
80004ca0:	ee fb ff 9c 	ld.w	r11,r7[-100]
80004ca4:	f8 0b 06 48 	mulu.d	r8,r12,r11
80004ca8:	12 0a       	add	r10,r9
80004caa:	14 99       	mov	r9,r10
80004cac:	ee 7a 42 3f 	mov	r10,999999
80004cb0:	30 0b       	mov	r11,0
80004cb2:	f0 0a 00 0a 	add	r10,r8,r10
80004cb6:	f2 0b 00 4b 	adc	r11,r9,r11
80004cba:	ee 78 42 40 	mov	r8,1000000
80004cbe:	30 09       	mov	r9,0
80004cc0:	f0 1f 00 8d 	mcall	80004ef4 <et024006_ResetDisplay+0x2b8>
80004cc4:	14 98       	mov	r8,r10
80004cc6:	16 99       	mov	r9,r11
80004cc8:	ef 48 ff d4 	st.w	r7[-44],r8
80004ccc:	ee c8 00 58 	sub	r8,r7,88
80004cd0:	ef 48 ff d0 	st.w	r7[-48],r8
80004cd4:	e1 b8 00 42 	mfsr	r8,0x108
80004cd8:	10 99       	mov	r9,r8
80004cda:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004cde:	91 09       	st.w	r8[0x0],r9
80004ce0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004ce4:	70 09       	ld.w	r9,r8[0x0]
80004ce6:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004cea:	10 09       	add	r9,r8
80004cec:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004cf0:	91 19       	st.w	r8[0x4],r9
80004cf2:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004cf6:	30 08       	mov	r8,0
80004cf8:	f3 68 00 08 	st.b	r9[8],r8
80004cfc:	ee c8 00 58 	sub	r8,r7,88
80004d00:	ef 48 ff d8 	st.w	r7[-40],r8
80004d04:	e1 b8 00 42 	mfsr	r8,0x108
80004d08:	ef 48 ff dc 	st.w	r7[-36],r8
80004d0c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d10:	f1 39 00 08 	ld.ub	r9,r8[8]
80004d14:	30 28       	mov	r8,2
80004d16:	f0 09 18 00 	cp.b	r9,r8
80004d1a:	c0 31       	brne	80004d20 <et024006_ResetDisplay+0xe4>
80004d1c:	30 08       	mov	r8,0
80004d1e:	c4 38       	rjmp	80004da4 <et024006_ResetDisplay+0x168>
80004d20:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d24:	f1 39 00 08 	ld.ub	r9,r8[8]
80004d28:	30 18       	mov	r8,1
80004d2a:	f0 09 18 00 	cp.b	r9,r8
80004d2e:	c0 31       	brne	80004d34 <et024006_ResetDisplay+0xf8>
80004d30:	30 18       	mov	r8,1
80004d32:	c3 98       	rjmp	80004da4 <et024006_ResetDisplay+0x168>
80004d34:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d38:	70 09       	ld.w	r9,r8[0x0]
80004d3a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d3e:	70 18       	ld.w	r8,r8[0x4]
80004d40:	10 39       	cp.w	r9,r8
80004d42:	e0 88 00 1a 	brls	80004d76 <et024006_ResetDisplay+0x13a>
80004d46:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d4a:	70 08       	ld.w	r8,r8[0x0]
80004d4c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004d50:	10 39       	cp.w	r9,r8
80004d52:	c1 02       	brcc	80004d72 <et024006_ResetDisplay+0x136>
80004d54:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d58:	70 18       	ld.w	r8,r8[0x4]
80004d5a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004d5e:	10 39       	cp.w	r9,r8
80004d60:	e0 88 00 09 	brls	80004d72 <et024006_ResetDisplay+0x136>
80004d64:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004d68:	30 18       	mov	r8,1
80004d6a:	f3 68 00 08 	st.b	r9[8],r8
80004d6e:	30 18       	mov	r8,1
80004d70:	c1 a8       	rjmp	80004da4 <et024006_ResetDisplay+0x168>
80004d72:	30 08       	mov	r8,0
80004d74:	c1 88       	rjmp	80004da4 <et024006_ResetDisplay+0x168>
80004d76:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d7a:	70 08       	ld.w	r8,r8[0x0]
80004d7c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004d80:	10 39       	cp.w	r9,r8
80004d82:	c0 93       	brcs	80004d94 <et024006_ResetDisplay+0x158>
80004d84:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d88:	70 18       	ld.w	r8,r8[0x4]
80004d8a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004d8e:	10 39       	cp.w	r9,r8
80004d90:	e0 88 00 09 	brls	80004da2 <et024006_ResetDisplay+0x166>
80004d94:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004d98:	30 18       	mov	r8,1
80004d9a:	f3 68 00 08 	st.b	r9[8],r8
80004d9e:	30 18       	mov	r8,1
80004da0:	c0 28       	rjmp	80004da4 <et024006_ResetDisplay+0x168>
80004da2:	30 08       	mov	r8,0
80004da4:	58 08       	cp.w	r8,0
80004da6:	ca b0       	breq	80004cfc <et024006_ResetDisplay+0xc0>
80004da8:	34 2c       	mov	r12,66
80004daa:	f0 1f 00 54 	mcall	80004ef8 <et024006_ResetDisplay+0x2bc>
80004dae:	4d 18       	lddpc	r8,80004ef0 <et024006_ResetDisplay+0x2b4>
80004db0:	70 08       	ld.w	r8,r8[0x0]
80004db2:	30 59       	mov	r9,5
80004db4:	ef 49 ff e4 	st.w	r7[-28],r9
80004db8:	ef 48 ff e0 	st.w	r7[-32],r8
80004dbc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004dc0:	ef 48 ff ec 	st.w	r7[-20],r8
80004dc4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004dc8:	ef 48 ff e8 	st.w	r7[-24],r8
80004dcc:	ee f0 ff ec 	ld.w	r0,r7[-20]
80004dd0:	30 01       	mov	r1,0
80004dd2:	ee f2 ff e8 	ld.w	r2,r7[-24]
80004dd6:	30 03       	mov	r3,0
80004dd8:	e2 02 02 4a 	mul	r10,r1,r2
80004ddc:	e6 00 02 48 	mul	r8,r3,r0
80004de0:	10 0a       	add	r10,r8
80004de2:	e0 02 06 48 	mulu.d	r8,r0,r2
80004de6:	12 0a       	add	r10,r9
80004de8:	14 99       	mov	r9,r10
80004dea:	e0 6a 03 e7 	mov	r10,999
80004dee:	30 0b       	mov	r11,0
80004df0:	f0 0a 00 0a 	add	r10,r8,r10
80004df4:	f2 0b 00 4b 	adc	r11,r9,r11
80004df8:	e0 68 03 e8 	mov	r8,1000
80004dfc:	30 09       	mov	r9,0
80004dfe:	f0 1f 00 3e 	mcall	80004ef4 <et024006_ResetDisplay+0x2b8>
80004e02:	14 98       	mov	r8,r10
80004e04:	16 99       	mov	r9,r11
80004e06:	ef 48 ff f4 	st.w	r7[-12],r8
80004e0a:	ee c8 00 4c 	sub	r8,r7,76
80004e0e:	ef 48 ff f0 	st.w	r7[-16],r8
80004e12:	e1 b8 00 42 	mfsr	r8,0x108
80004e16:	10 99       	mov	r9,r8
80004e18:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004e1c:	91 09       	st.w	r8[0x0],r9
80004e1e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004e22:	70 09       	ld.w	r9,r8[0x0]
80004e24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e28:	10 09       	add	r9,r8
80004e2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004e2e:	91 19       	st.w	r8[0x4],r9
80004e30:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004e34:	30 08       	mov	r8,0
80004e36:	f3 68 00 08 	st.b	r9[8],r8
80004e3a:	ee c8 00 4c 	sub	r8,r7,76
80004e3e:	ef 48 ff f8 	st.w	r7[-8],r8
80004e42:	e1 b8 00 42 	mfsr	r8,0x108
80004e46:	ef 48 ff fc 	st.w	r7[-4],r8
80004e4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e4e:	f1 39 00 08 	ld.ub	r9,r8[8]
80004e52:	30 28       	mov	r8,2
80004e54:	f0 09 18 00 	cp.b	r9,r8
80004e58:	c0 31       	brne	80004e5e <et024006_ResetDisplay+0x222>
80004e5a:	30 08       	mov	r8,0
80004e5c:	c4 38       	rjmp	80004ee2 <et024006_ResetDisplay+0x2a6>
80004e5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e62:	f1 39 00 08 	ld.ub	r9,r8[8]
80004e66:	30 18       	mov	r8,1
80004e68:	f0 09 18 00 	cp.b	r9,r8
80004e6c:	c0 31       	brne	80004e72 <et024006_ResetDisplay+0x236>
80004e6e:	30 18       	mov	r8,1
80004e70:	c3 98       	rjmp	80004ee2 <et024006_ResetDisplay+0x2a6>
80004e72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e76:	70 09       	ld.w	r9,r8[0x0]
80004e78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e7c:	70 18       	ld.w	r8,r8[0x4]
80004e7e:	10 39       	cp.w	r9,r8
80004e80:	e0 88 00 1a 	brls	80004eb4 <et024006_ResetDisplay+0x278>
80004e84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e88:	70 08       	ld.w	r8,r8[0x0]
80004e8a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004e8e:	10 39       	cp.w	r9,r8
80004e90:	c1 02       	brcc	80004eb0 <et024006_ResetDisplay+0x274>
80004e92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e96:	70 18       	ld.w	r8,r8[0x4]
80004e98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004e9c:	10 39       	cp.w	r9,r8
80004e9e:	e0 88 00 09 	brls	80004eb0 <et024006_ResetDisplay+0x274>
80004ea2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004ea6:	30 18       	mov	r8,1
80004ea8:	f3 68 00 08 	st.b	r9[8],r8
80004eac:	30 18       	mov	r8,1
80004eae:	c1 a8       	rjmp	80004ee2 <et024006_ResetDisplay+0x2a6>
80004eb0:	30 08       	mov	r8,0
80004eb2:	c1 88       	rjmp	80004ee2 <et024006_ResetDisplay+0x2a6>
80004eb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004eb8:	70 08       	ld.w	r8,r8[0x0]
80004eba:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004ebe:	10 39       	cp.w	r9,r8
80004ec0:	c0 93       	brcs	80004ed2 <et024006_ResetDisplay+0x296>
80004ec2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ec6:	70 18       	ld.w	r8,r8[0x4]
80004ec8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004ecc:	10 39       	cp.w	r9,r8
80004ece:	e0 88 00 09 	brls	80004ee0 <et024006_ResetDisplay+0x2a4>
80004ed2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004ed6:	30 18       	mov	r8,1
80004ed8:	f3 68 00 08 	st.b	r9[8],r8
80004edc:	30 18       	mov	r8,1
80004ede:	c0 28       	rjmp	80004ee2 <et024006_ResetDisplay+0x2a6>
80004ee0:	30 08       	mov	r8,0
80004ee2:	58 08       	cp.w	r8,0
80004ee4:	ca b0       	breq	80004e3a <et024006_ResetDisplay+0x1fe>
80004ee6:	2e 6d       	sub	sp,-104
80004ee8:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80004eec:	80 00       	ld.sh	r0,r0[0x0]
80004eee:	8e 06       	ld.sh	r6,r7[0x0]
80004ef0:	00 00       	add	r0,r0
80004ef2:	06 0c       	add	r12,r3
80004ef4:	80 00       	ld.sh	r0,r0[0x0]
80004ef6:	e5 08 80 00 	ld.sh	r8,r2[-32768]
80004efa:	8d 9e       	st.w	r6[0x24],lr

80004efc <et024006_AdjustGamma>:
80004efc:	eb cd 40 80 	pushm	r7,lr
80004f00:	1a 97       	mov	r7,sp
80004f02:	20 6d       	sub	sp,24
80004f04:	34 68       	mov	r8,70
80004f06:	ef 68 ff e9 	st.b	r7[-23],r8
80004f0a:	39 48       	mov	r8,-108
80004f0c:	ef 68 ff e8 	st.b	r7[-24],r8
80004f10:	fc 19 c0 00 	movh	r9,0xc000
80004f14:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80004f18:	b2 08       	st.h	r9[0x0],r8
80004f1a:	fc 19 c0 20 	movh	r9,0xc020
80004f1e:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80004f22:	b2 08       	st.h	r9[0x0],r8
80004f24:	34 78       	mov	r8,71
80004f26:	ef 68 ff eb 	st.b	r7[-21],r8
80004f2a:	34 18       	mov	r8,65
80004f2c:	ef 68 ff ea 	st.b	r7[-22],r8
80004f30:	fc 19 c0 00 	movh	r9,0xc000
80004f34:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80004f38:	b2 08       	st.h	r9[0x0],r8
80004f3a:	fc 19 c0 20 	movh	r9,0xc020
80004f3e:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80004f42:	b2 08       	st.h	r9[0x0],r8
80004f44:	34 88       	mov	r8,72
80004f46:	ef 68 ff ed 	st.b	r7[-19],r8
80004f4a:	30 08       	mov	r8,0
80004f4c:	ef 68 ff ec 	st.b	r7[-20],r8
80004f50:	fc 19 c0 00 	movh	r9,0xc000
80004f54:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004f58:	b2 08       	st.h	r9[0x0],r8
80004f5a:	fc 19 c0 20 	movh	r9,0xc020
80004f5e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80004f62:	b2 08       	st.h	r9[0x0],r8
80004f64:	34 98       	mov	r8,73
80004f66:	ef 68 ff ef 	st.b	r7[-17],r8
80004f6a:	33 38       	mov	r8,51
80004f6c:	ef 68 ff ee 	st.b	r7[-18],r8
80004f70:	fc 19 c0 00 	movh	r9,0xc000
80004f74:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80004f78:	b2 08       	st.h	r9[0x0],r8
80004f7a:	fc 19 c0 20 	movh	r9,0xc020
80004f7e:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004f82:	b2 08       	st.h	r9[0x0],r8
80004f84:	34 a8       	mov	r8,74
80004f86:	ef 68 ff f1 	st.b	r7[-15],r8
80004f8a:	32 58       	mov	r8,37
80004f8c:	ef 68 ff f0 	st.b	r7[-16],r8
80004f90:	fc 19 c0 00 	movh	r9,0xc000
80004f94:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80004f98:	b2 08       	st.h	r9[0x0],r8
80004f9a:	fc 19 c0 20 	movh	r9,0xc020
80004f9e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80004fa2:	b2 08       	st.h	r9[0x0],r8
80004fa4:	34 b8       	mov	r8,75
80004fa6:	ef 68 ff f3 	st.b	r7[-13],r8
80004faa:	34 58       	mov	r8,69
80004fac:	ef 68 ff f2 	st.b	r7[-14],r8
80004fb0:	fc 19 c0 00 	movh	r9,0xc000
80004fb4:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80004fb8:	b2 08       	st.h	r9[0x0],r8
80004fba:	fc 19 c0 20 	movh	r9,0xc020
80004fbe:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80004fc2:	b2 08       	st.h	r9[0x0],r8
80004fc4:	34 c8       	mov	r8,76
80004fc6:	ef 68 ff f5 	st.b	r7[-11],r8
80004fca:	34 48       	mov	r8,68
80004fcc:	ef 68 ff f4 	st.b	r7[-12],r8
80004fd0:	fc 19 c0 00 	movh	r9,0xc000
80004fd4:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004fd8:	b2 08       	st.h	r9[0x0],r8
80004fda:	fc 19 c0 20 	movh	r9,0xc020
80004fde:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004fe2:	b2 08       	st.h	r9[0x0],r8
80004fe4:	34 d8       	mov	r8,77
80004fe6:	ef 68 ff f7 	st.b	r7[-9],r8
80004fea:	37 78       	mov	r8,119
80004fec:	ef 68 ff f6 	st.b	r7[-10],r8
80004ff0:	fc 19 c0 00 	movh	r9,0xc000
80004ff4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004ff8:	b2 08       	st.h	r9[0x0],r8
80004ffa:	fc 19 c0 20 	movh	r9,0xc020
80004ffe:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80005002:	b2 08       	st.h	r9[0x0],r8
80005004:	34 e8       	mov	r8,78
80005006:	ef 68 ff f9 	st.b	r7[-7],r8
8000500a:	31 28       	mov	r8,18
8000500c:	ef 68 ff f8 	st.b	r7[-8],r8
80005010:	fc 19 c0 00 	movh	r9,0xc000
80005014:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80005018:	b2 08       	st.h	r9[0x0],r8
8000501a:	fc 19 c0 20 	movh	r9,0xc020
8000501e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005022:	b2 08       	st.h	r9[0x0],r8
80005024:	34 f8       	mov	r8,79
80005026:	ef 68 ff fb 	st.b	r7[-5],r8
8000502a:	3c c8       	mov	r8,-52
8000502c:	ef 68 ff fa 	st.b	r7[-6],r8
80005030:	fc 19 c0 00 	movh	r9,0xc000
80005034:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005038:	b2 08       	st.h	r9[0x0],r8
8000503a:	fc 19 c0 20 	movh	r9,0xc020
8000503e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80005042:	b2 08       	st.h	r9[0x0],r8
80005044:	35 08       	mov	r8,80
80005046:	ef 68 ff fd 	st.b	r7[-3],r8
8000504a:	34 68       	mov	r8,70
8000504c:	ef 68 ff fc 	st.b	r7[-4],r8
80005050:	fc 19 c0 00 	movh	r9,0xc000
80005054:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005058:	b2 08       	st.h	r9[0x0],r8
8000505a:	fc 19 c0 20 	movh	r9,0xc020
8000505e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005062:	b2 08       	st.h	r9[0x0],r8
80005064:	35 18       	mov	r8,81
80005066:	ef 68 ff ff 	st.b	r7[-1],r8
8000506a:	38 28       	mov	r8,-126
8000506c:	ef 68 ff fe 	st.b	r7[-2],r8
80005070:	fc 19 c0 00 	movh	r9,0xc000
80005074:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005078:	b2 08       	st.h	r9[0x0],r8
8000507a:	fc 19 c0 20 	movh	r9,0xc020
8000507e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005082:	b2 08       	st.h	r9[0x0],r8
80005084:	2f ad       	sub	sp,-24
80005086:	e3 cd 80 80 	ldm	sp++,r7,pc

8000508a <et024006_GeneralSettings>:
8000508a:	eb cd 40 80 	pushm	r7,lr
8000508e:	1a 97       	mov	r7,sp
80005090:	20 8d       	sub	sp,32
80005092:	30 18       	mov	r8,1
80005094:	ef 68 ff e1 	st.b	r7[-31],r8
80005098:	30 68       	mov	r8,6
8000509a:	ef 68 ff e0 	st.b	r7[-32],r8
8000509e:	fc 19 c0 00 	movh	r9,0xc000
800050a2:	ef 38 ff e1 	ld.ub	r8,r7[-31]
800050a6:	b2 08       	st.h	r9[0x0],r8
800050a8:	fc 19 c0 20 	movh	r9,0xc020
800050ac:	ef 38 ff e0 	ld.ub	r8,r7[-32]
800050b0:	b2 08       	st.h	r9[0x0],r8
800050b2:	33 a8       	mov	r8,58
800050b4:	ef 68 ff e3 	st.b	r7[-29],r8
800050b8:	30 18       	mov	r8,1
800050ba:	ef 68 ff e2 	st.b	r7[-30],r8
800050be:	fc 19 c0 00 	movh	r9,0xc000
800050c2:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800050c6:	b2 08       	st.h	r9[0x0],r8
800050c8:	fc 19 c0 20 	movh	r9,0xc020
800050cc:	ef 38 ff e2 	ld.ub	r8,r7[-30]
800050d0:	b2 08       	st.h	r9[0x0],r8
800050d2:	33 b8       	mov	r8,59
800050d4:	ef 68 ff e5 	st.b	r7[-27],r8
800050d8:	30 18       	mov	r8,1
800050da:	ef 68 ff e4 	st.b	r7[-28],r8
800050de:	fc 19 c0 00 	movh	r9,0xc000
800050e2:	ef 38 ff e5 	ld.ub	r8,r7[-27]
800050e6:	b2 08       	st.h	r9[0x0],r8
800050e8:	fc 19 c0 20 	movh	r9,0xc020
800050ec:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800050f0:	b2 08       	st.h	r9[0x0],r8
800050f2:	33 c8       	mov	r8,60
800050f4:	ef 68 ff e7 	st.b	r7[-25],r8
800050f8:	3f 08       	mov	r8,-16
800050fa:	ef 68 ff e6 	st.b	r7[-26],r8
800050fe:	fc 19 c0 00 	movh	r9,0xc000
80005102:	ef 38 ff e7 	ld.ub	r8,r7[-25]
80005106:	b2 08       	st.h	r9[0x0],r8
80005108:	fc 19 c0 20 	movh	r9,0xc020
8000510c:	ef 38 ff e6 	ld.ub	r8,r7[-26]
80005110:	b2 08       	st.h	r9[0x0],r8
80005112:	33 d8       	mov	r8,61
80005114:	ef 68 ff e9 	st.b	r7[-23],r8
80005118:	30 08       	mov	r8,0
8000511a:	ef 68 ff e8 	st.b	r7[-24],r8
8000511e:	fc 19 c0 00 	movh	r9,0xc000
80005122:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80005126:	b2 08       	st.h	r9[0x0],r8
80005128:	fc 19 c0 20 	movh	r9,0xc020
8000512c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80005130:	b2 08       	st.h	r9[0x0],r8
80005132:	33 e8       	mov	r8,62
80005134:	ef 68 ff eb 	st.b	r7[-21],r8
80005138:	33 88       	mov	r8,56
8000513a:	ef 68 ff ea 	st.b	r7[-22],r8
8000513e:	fc 19 c0 00 	movh	r9,0xc000
80005142:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80005146:	b2 08       	st.h	r9[0x0],r8
80005148:	fc 19 c0 20 	movh	r9,0xc020
8000514c:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80005150:	b2 08       	st.h	r9[0x0],r8
80005152:	34 08       	mov	r8,64
80005154:	ef 68 ff ed 	st.b	r7[-19],r8
80005158:	30 f8       	mov	r8,15
8000515a:	ef 68 ff ec 	st.b	r7[-20],r8
8000515e:	fc 19 c0 00 	movh	r9,0xc000
80005162:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005166:	b2 08       	st.h	r9[0x0],r8
80005168:	fc 19 c0 20 	movh	r9,0xc020
8000516c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005170:	b2 08       	st.h	r9[0x0],r8
80005172:	34 18       	mov	r8,65
80005174:	ef 68 ff ef 	st.b	r7[-17],r8
80005178:	3f 08       	mov	r8,-16
8000517a:	ef 68 ff ee 	st.b	r7[-18],r8
8000517e:	fc 19 c0 00 	movh	r9,0xc000
80005182:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80005186:	b2 08       	st.h	r9[0x0],r8
80005188:	fc 19 c0 20 	movh	r9,0xc020
8000518c:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80005190:	b2 08       	st.h	r9[0x0],r8
80005192:	32 78       	mov	r8,39
80005194:	ef 68 ff f1 	st.b	r7[-15],r8
80005198:	30 28       	mov	r8,2
8000519a:	ef 68 ff f0 	st.b	r7[-16],r8
8000519e:	fc 19 c0 00 	movh	r9,0xc000
800051a2:	ef 38 ff f1 	ld.ub	r8,r7[-15]
800051a6:	b2 08       	st.h	r9[0x0],r8
800051a8:	fc 19 c0 20 	movh	r9,0xc020
800051ac:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800051b0:	b2 08       	st.h	r9[0x0],r8
800051b2:	32 88       	mov	r8,40
800051b4:	ef 68 ff f3 	st.b	r7[-13],r8
800051b8:	30 28       	mov	r8,2
800051ba:	ef 68 ff f2 	st.b	r7[-14],r8
800051be:	fc 19 c0 00 	movh	r9,0xc000
800051c2:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800051c6:	b2 08       	st.h	r9[0x0],r8
800051c8:	fc 19 c0 20 	movh	r9,0xc020
800051cc:	ef 38 ff f2 	ld.ub	r8,r7[-14]
800051d0:	b2 08       	st.h	r9[0x0],r8
800051d2:	32 98       	mov	r8,41
800051d4:	ef 68 ff f5 	st.b	r7[-11],r8
800051d8:	30 28       	mov	r8,2
800051da:	ef 68 ff f4 	st.b	r7[-12],r8
800051de:	fc 19 c0 00 	movh	r9,0xc000
800051e2:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800051e6:	b2 08       	st.h	r9[0x0],r8
800051e8:	fc 19 c0 20 	movh	r9,0xc020
800051ec:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800051f0:	b2 08       	st.h	r9[0x0],r8
800051f2:	32 a8       	mov	r8,42
800051f4:	ef 68 ff f7 	st.b	r7[-9],r8
800051f8:	30 28       	mov	r8,2
800051fa:	ef 68 ff f6 	st.b	r7[-10],r8
800051fe:	fc 19 c0 00 	movh	r9,0xc000
80005202:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005206:	b2 08       	st.h	r9[0x0],r8
80005208:	fc 19 c0 20 	movh	r9,0xc020
8000520c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80005210:	b2 08       	st.h	r9[0x0],r8
80005212:	32 c8       	mov	r8,44
80005214:	ef 68 ff f9 	st.b	r7[-7],r8
80005218:	30 28       	mov	r8,2
8000521a:	ef 68 ff f8 	st.b	r7[-8],r8
8000521e:	fc 19 c0 00 	movh	r9,0xc000
80005222:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80005226:	b2 08       	st.h	r9[0x0],r8
80005228:	fc 19 c0 20 	movh	r9,0xc020
8000522c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005230:	b2 08       	st.h	r9[0x0],r8
80005232:	32 d8       	mov	r8,45
80005234:	ef 68 ff fb 	st.b	r7[-5],r8
80005238:	30 28       	mov	r8,2
8000523a:	ef 68 ff fa 	st.b	r7[-6],r8
8000523e:	fc 19 c0 00 	movh	r9,0xc000
80005242:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005246:	b2 08       	st.h	r9[0x0],r8
80005248:	fc 19 c0 20 	movh	r9,0xc020
8000524c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80005250:	b2 08       	st.h	r9[0x0],r8
80005252:	31 98       	mov	r8,25
80005254:	ef 68 ff fd 	st.b	r7[-3],r8
80005258:	34 98       	mov	r8,73
8000525a:	ef 68 ff fc 	st.b	r7[-4],r8
8000525e:	fc 19 c0 00 	movh	r9,0xc000
80005262:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005266:	b2 08       	st.h	r9[0x0],r8
80005268:	fc 19 c0 20 	movh	r9,0xc020
8000526c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005270:	b2 08       	st.h	r9[0x0],r8
80005272:	39 38       	mov	r8,-109
80005274:	ef 68 ff ff 	st.b	r7[-1],r8
80005278:	30 88       	mov	r8,8
8000527a:	ef 68 ff fe 	st.b	r7[-2],r8
8000527e:	fc 19 c0 00 	movh	r9,0xc000
80005282:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005286:	b2 08       	st.h	r9[0x0],r8
80005288:	fc 19 c0 20 	movh	r9,0xc020
8000528c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005290:	b2 08       	st.h	r9[0x0],r8
80005292:	2f 8d       	sub	sp,-32
80005294:	e3 cd 80 80 	ldm	sp++,r7,pc

80005298 <et024006_PowerSettings>:
80005298:	eb cd 40 80 	pushm	r7,lr
8000529c:	1a 97       	mov	r7,sp
8000529e:	20 6d       	sub	sp,24
800052a0:	32 38       	mov	r8,35
800052a2:	ef 68 ff e9 	st.b	r7[-23],r8
800052a6:	39 58       	mov	r8,-107
800052a8:	ef 68 ff e8 	st.b	r7[-24],r8
800052ac:	fc 19 c0 00 	movh	r9,0xc000
800052b0:	ef 38 ff e9 	ld.ub	r8,r7[-23]
800052b4:	b2 08       	st.h	r9[0x0],r8
800052b6:	fc 19 c0 20 	movh	r9,0xc020
800052ba:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800052be:	b2 08       	st.h	r9[0x0],r8
800052c0:	32 48       	mov	r8,36
800052c2:	ef 68 ff eb 	st.b	r7[-21],r8
800052c6:	39 58       	mov	r8,-107
800052c8:	ef 68 ff ea 	st.b	r7[-22],r8
800052cc:	fc 19 c0 00 	movh	r9,0xc000
800052d0:	ef 38 ff eb 	ld.ub	r8,r7[-21]
800052d4:	b2 08       	st.h	r9[0x0],r8
800052d6:	fc 19 c0 20 	movh	r9,0xc020
800052da:	ef 38 ff ea 	ld.ub	r8,r7[-22]
800052de:	b2 08       	st.h	r9[0x0],r8
800052e0:	32 58       	mov	r8,37
800052e2:	ef 68 ff ed 	st.b	r7[-19],r8
800052e6:	3f f8       	mov	r8,-1
800052e8:	ef 68 ff ec 	st.b	r7[-20],r8
800052ec:	fc 19 c0 00 	movh	r9,0xc000
800052f0:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800052f4:	b2 08       	st.h	r9[0x0],r8
800052f6:	fc 19 c0 20 	movh	r9,0xc020
800052fa:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800052fe:	b2 08       	st.h	r9[0x0],r8
80005300:	39 08       	mov	r8,-112
80005302:	ef 68 ff ef 	st.b	r7[-17],r8
80005306:	37 f8       	mov	r8,127
80005308:	ef 68 ff ee 	st.b	r7[-18],r8
8000530c:	fc 19 c0 00 	movh	r9,0xc000
80005310:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80005314:	b2 08       	st.h	r9[0x0],r8
80005316:	fc 19 c0 20 	movh	r9,0xc020
8000531a:	ef 38 ff ee 	ld.ub	r8,r7[-18]
8000531e:	b2 08       	st.h	r9[0x0],r8
80005320:	33 58       	mov	r8,53
80005322:	ef 68 ff f1 	st.b	r7[-15],r8
80005326:	33 88       	mov	r8,56
80005328:	ef 68 ff f0 	st.b	r7[-16],r8
8000532c:	fc 19 c0 00 	movh	r9,0xc000
80005330:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80005334:	b2 08       	st.h	r9[0x0],r8
80005336:	fc 19 c0 20 	movh	r9,0xc020
8000533a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000533e:	b2 08       	st.h	r9[0x0],r8
80005340:	33 68       	mov	r8,54
80005342:	ef 68 ff f3 	st.b	r7[-13],r8
80005346:	37 88       	mov	r8,120
80005348:	ef 68 ff f2 	st.b	r7[-14],r8
8000534c:	fc 19 c0 00 	movh	r9,0xc000
80005350:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80005354:	b2 08       	st.h	r9[0x0],r8
80005356:	fc 19 c0 20 	movh	r9,0xc020
8000535a:	ef 38 ff f2 	ld.ub	r8,r7[-14]
8000535e:	b2 08       	st.h	r9[0x0],r8
80005360:	31 d8       	mov	r8,29
80005362:	ef 68 ff f5 	st.b	r7[-11],r8
80005366:	30 78       	mov	r8,7
80005368:	ef 68 ff f4 	st.b	r7[-12],r8
8000536c:	fc 19 c0 00 	movh	r9,0xc000
80005370:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005374:	b2 08       	st.h	r9[0x0],r8
80005376:	fc 19 c0 20 	movh	r9,0xc020
8000537a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000537e:	b2 08       	st.h	r9[0x0],r8
80005380:	31 e8       	mov	r8,30
80005382:	ef 68 ff f7 	st.b	r7[-9],r8
80005386:	30 08       	mov	r8,0
80005388:	ef 68 ff f6 	st.b	r7[-10],r8
8000538c:	fc 19 c0 00 	movh	r9,0xc000
80005390:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005394:	b2 08       	st.h	r9[0x0],r8
80005396:	fc 19 c0 20 	movh	r9,0xc020
8000539a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000539e:	b2 08       	st.h	r9[0x0],r8
800053a0:	31 f8       	mov	r8,31
800053a2:	ef 68 ff f9 	st.b	r7[-7],r8
800053a6:	30 48       	mov	r8,4
800053a8:	ef 68 ff f8 	st.b	r7[-8],r8
800053ac:	fc 19 c0 00 	movh	r9,0xc000
800053b0:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800053b4:	b2 08       	st.h	r9[0x0],r8
800053b6:	fc 19 c0 20 	movh	r9,0xc020
800053ba:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800053be:	b2 08       	st.h	r9[0x0],r8
800053c0:	32 08       	mov	r8,32
800053c2:	ef 68 ff fb 	st.b	r7[-5],r8
800053c6:	34 08       	mov	r8,64
800053c8:	ef 68 ff fa 	st.b	r7[-6],r8
800053cc:	fc 19 c0 00 	movh	r9,0xc000
800053d0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800053d4:	b2 08       	st.h	r9[0x0],r8
800053d6:	fc 19 c0 20 	movh	r9,0xc020
800053da:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800053de:	b2 08       	st.h	r9[0x0],r8
800053e0:	34 48       	mov	r8,68
800053e2:	ef 68 ff fd 	st.b	r7[-3],r8
800053e6:	33 88       	mov	r8,56
800053e8:	ef 68 ff fc 	st.b	r7[-4],r8
800053ec:	fc 19 c0 00 	movh	r9,0xc000
800053f0:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800053f4:	b2 08       	st.h	r9[0x0],r8
800053f6:	fc 19 c0 20 	movh	r9,0xc020
800053fa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800053fe:	b2 08       	st.h	r9[0x0],r8
80005400:	34 58       	mov	r8,69
80005402:	ef 68 ff ff 	st.b	r7[-1],r8
80005406:	31 28       	mov	r8,18
80005408:	ef 68 ff fe 	st.b	r7[-2],r8
8000540c:	fc 19 c0 00 	movh	r9,0xc000
80005410:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005414:	b2 08       	st.h	r9[0x0],r8
80005416:	fc 19 c0 20 	movh	r9,0xc020
8000541a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000541e:	b2 08       	st.h	r9[0x0],r8
80005420:	2f ad       	sub	sp,-24
80005422:	e3 cd 80 80 	ldm	sp++,r7,pc

80005426 <et024006_InterfaceSettings>:
80005426:	eb cd 40 80 	pushm	r7,lr
8000542a:	1a 97       	mov	r7,sp
8000542c:	20 1d       	sub	sp,4
8000542e:	31 68       	mov	r8,22
80005430:	ef 68 ff ff 	st.b	r7[-1],r8
80005434:	36 88       	mov	r8,104
80005436:	ef 68 ff fe 	st.b	r7[-2],r8
8000543a:	fc 19 c0 00 	movh	r9,0xc000
8000543e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005442:	b2 08       	st.h	r9[0x0],r8
80005444:	fc 19 c0 20 	movh	r9,0xc020
80005448:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000544c:	b2 08       	st.h	r9[0x0],r8
8000544e:	2f fd       	sub	sp,-4
80005450:	e3 cd 80 80 	ldm	sp++,r7,pc

80005454 <et024006_PowerUp>:
80005454:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005458:	1a 97       	mov	r7,sp
8000545a:	fa cd 01 24 	sub	sp,sp,292
8000545e:	fe f8 07 22 	ld.w	r8,pc[1826]
80005462:	70 09       	ld.w	r9,r8[0x0]
80005464:	30 a8       	mov	r8,10
80005466:	ef 48 ff 54 	st.w	r7[-172],r8
8000546a:	ef 49 ff 50 	st.w	r7[-176],r9
8000546e:	ee f8 ff 54 	ld.w	r8,r7[-172]
80005472:	ef 48 ff 5c 	st.w	r7[-164],r8
80005476:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000547a:	ef 48 ff 58 	st.w	r7[-168],r8
8000547e:	ee f2 ff 5c 	ld.w	r2,r7[-164]
80005482:	30 03       	mov	r3,0
80005484:	ee fa ff 58 	ld.w	r10,r7[-168]
80005488:	30 0b       	mov	r11,0
8000548a:	e6 0a 02 49 	mul	r9,r3,r10
8000548e:	f6 02 02 48 	mul	r8,r11,r2
80005492:	10 09       	add	r9,r8
80005494:	e4 0a 06 4a 	mulu.d	r10,r2,r10
80005498:	16 09       	add	r9,r11
8000549a:	12 9b       	mov	r11,r9
8000549c:	e0 68 03 e7 	mov	r8,999
800054a0:	30 09       	mov	r9,0
800054a2:	10 0a       	add	r10,r8
800054a4:	f6 09 00 4b 	adc	r11,r11,r9
800054a8:	e0 68 03 e8 	mov	r8,1000
800054ac:	30 09       	mov	r9,0
800054ae:	f0 1f 01 b6 	mcall	80005b84 <et024006_PowerUp+0x730>
800054b2:	14 98       	mov	r8,r10
800054b4:	16 99       	mov	r9,r11
800054b6:	ef 48 ff 64 	st.w	r7[-156],r8
800054ba:	ee c8 00 ec 	sub	r8,r7,236
800054be:	ef 48 ff 60 	st.w	r7[-160],r8
800054c2:	e1 b8 00 42 	mfsr	r8,0x108
800054c6:	10 99       	mov	r9,r8
800054c8:	ee f8 ff 60 	ld.w	r8,r7[-160]
800054cc:	91 09       	st.w	r8[0x0],r9
800054ce:	ee f8 ff 60 	ld.w	r8,r7[-160]
800054d2:	70 09       	ld.w	r9,r8[0x0]
800054d4:	ee f8 ff 64 	ld.w	r8,r7[-156]
800054d8:	10 09       	add	r9,r8
800054da:	ee f8 ff 60 	ld.w	r8,r7[-160]
800054de:	91 19       	st.w	r8[0x4],r9
800054e0:	ee f9 ff 60 	ld.w	r9,r7[-160]
800054e4:	30 08       	mov	r8,0
800054e6:	f3 68 00 08 	st.b	r9[8],r8
800054ea:	ee c8 00 ec 	sub	r8,r7,236
800054ee:	ef 48 ff 68 	st.w	r7[-152],r8
800054f2:	e1 b8 00 42 	mfsr	r8,0x108
800054f6:	ef 48 ff 6c 	st.w	r7[-148],r8
800054fa:	ee f8 ff 68 	ld.w	r8,r7[-152]
800054fe:	f1 39 00 08 	ld.ub	r9,r8[8]
80005502:	30 28       	mov	r8,2
80005504:	f0 09 18 00 	cp.b	r9,r8
80005508:	c0 31       	brne	8000550e <et024006_PowerUp+0xba>
8000550a:	30 08       	mov	r8,0
8000550c:	c4 38       	rjmp	80005592 <et024006_PowerUp+0x13e>
8000550e:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005512:	f1 39 00 08 	ld.ub	r9,r8[8]
80005516:	30 18       	mov	r8,1
80005518:	f0 09 18 00 	cp.b	r9,r8
8000551c:	c0 31       	brne	80005522 <et024006_PowerUp+0xce>
8000551e:	30 18       	mov	r8,1
80005520:	c3 98       	rjmp	80005592 <et024006_PowerUp+0x13e>
80005522:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005526:	70 09       	ld.w	r9,r8[0x0]
80005528:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000552c:	70 18       	ld.w	r8,r8[0x4]
8000552e:	10 39       	cp.w	r9,r8
80005530:	e0 88 00 1a 	brls	80005564 <et024006_PowerUp+0x110>
80005534:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005538:	70 09       	ld.w	r9,r8[0x0]
8000553a:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000553e:	12 38       	cp.w	r8,r9
80005540:	c1 02       	brcc	80005560 <et024006_PowerUp+0x10c>
80005542:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005546:	70 19       	ld.w	r9,r8[0x4]
80005548:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000554c:	12 38       	cp.w	r8,r9
8000554e:	e0 88 00 09 	brls	80005560 <et024006_PowerUp+0x10c>
80005552:	ee f9 ff 68 	ld.w	r9,r7[-152]
80005556:	30 18       	mov	r8,1
80005558:	f3 68 00 08 	st.b	r9[8],r8
8000555c:	30 18       	mov	r8,1
8000555e:	c1 a8       	rjmp	80005592 <et024006_PowerUp+0x13e>
80005560:	30 08       	mov	r8,0
80005562:	c1 88       	rjmp	80005592 <et024006_PowerUp+0x13e>
80005564:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005568:	70 09       	ld.w	r9,r8[0x0]
8000556a:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000556e:	12 38       	cp.w	r8,r9
80005570:	c0 93       	brcs	80005582 <et024006_PowerUp+0x12e>
80005572:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005576:	70 19       	ld.w	r9,r8[0x4]
80005578:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000557c:	12 38       	cp.w	r8,r9
8000557e:	e0 88 00 09 	brls	80005590 <et024006_PowerUp+0x13c>
80005582:	ee f9 ff 68 	ld.w	r9,r7[-152]
80005586:	30 18       	mov	r8,1
80005588:	f3 68 00 08 	st.b	r9[8],r8
8000558c:	30 18       	mov	r8,1
8000558e:	c0 28       	rjmp	80005592 <et024006_PowerUp+0x13e>
80005590:	30 08       	mov	r8,0
80005592:	58 08       	cp.w	r8,0
80005594:	ca b0       	breq	800054ea <et024006_PowerUp+0x96>
80005596:	31 c8       	mov	r8,28
80005598:	ef 68 ff 73 	st.b	r7[-141],r8
8000559c:	30 48       	mov	r8,4
8000559e:	ef 68 ff 72 	st.b	r7[-142],r8
800055a2:	fc 19 c0 00 	movh	r9,0xc000
800055a6:	ef 38 ff 73 	ld.ub	r8,r7[-141]
800055aa:	b2 08       	st.h	r9[0x0],r8
800055ac:	fc 19 c0 20 	movh	r9,0xc020
800055b0:	ef 38 ff 72 	ld.ub	r8,r7[-142]
800055b4:	b2 08       	st.h	r9[0x0],r8
800055b6:	fe f8 05 ca 	ld.w	r8,pc[1482]
800055ba:	70 09       	ld.w	r9,r8[0x0]
800055bc:	31 48       	mov	r8,20
800055be:	ef 48 ff 78 	st.w	r7[-136],r8
800055c2:	ef 49 ff 74 	st.w	r7[-140],r9
800055c6:	ee f8 ff 78 	ld.w	r8,r7[-136]
800055ca:	ef 48 ff 80 	st.w	r7[-128],r8
800055ce:	ee f8 ff 74 	ld.w	r8,r7[-140]
800055d2:	ef 48 ff 7c 	st.w	r7[-132],r8
800055d6:	ee fc ff 80 	ld.w	r12,r7[-128]
800055da:	ef 4c fe e0 	st.w	r7[-288],r12
800055de:	30 0b       	mov	r11,0
800055e0:	ef 4b fe dc 	st.w	r7[-292],r11
800055e4:	ee f0 ff 7c 	ld.w	r0,r7[-132]
800055e8:	30 01       	mov	r1,0
800055ea:	ee f9 fe dc 	ld.w	r9,r7[-292]
800055ee:	a1 39       	mul	r9,r0
800055f0:	ee fa fe e0 	ld.w	r10,r7[-288]
800055f4:	e2 0a 02 48 	mul	r8,r1,r10
800055f8:	10 09       	add	r9,r8
800055fa:	ee f8 fe e0 	ld.w	r8,r7[-288]
800055fe:	f0 00 06 4a 	mulu.d	r10,r8,r0
80005602:	16 09       	add	r9,r11
80005604:	12 9b       	mov	r11,r9
80005606:	e0 68 03 e7 	mov	r8,999
8000560a:	30 09       	mov	r9,0
8000560c:	10 0a       	add	r10,r8
8000560e:	f6 09 00 4b 	adc	r11,r11,r9
80005612:	e0 68 03 e8 	mov	r8,1000
80005616:	30 09       	mov	r9,0
80005618:	f0 1f 01 5b 	mcall	80005b84 <et024006_PowerUp+0x730>
8000561c:	14 98       	mov	r8,r10
8000561e:	16 99       	mov	r9,r11
80005620:	ef 48 ff 88 	st.w	r7[-120],r8
80005624:	ee c8 00 e0 	sub	r8,r7,224
80005628:	ef 48 ff 84 	st.w	r7[-124],r8
8000562c:	e1 b8 00 42 	mfsr	r8,0x108
80005630:	10 99       	mov	r9,r8
80005632:	ee f8 ff 84 	ld.w	r8,r7[-124]
80005636:	91 09       	st.w	r8[0x0],r9
80005638:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000563c:	70 09       	ld.w	r9,r8[0x0]
8000563e:	ee f8 ff 88 	ld.w	r8,r7[-120]
80005642:	10 09       	add	r9,r8
80005644:	ee f8 ff 84 	ld.w	r8,r7[-124]
80005648:	91 19       	st.w	r8[0x4],r9
8000564a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000564e:	30 08       	mov	r8,0
80005650:	f3 68 00 08 	st.b	r9[8],r8
80005654:	ee c8 00 e0 	sub	r8,r7,224
80005658:	ef 48 ff 8c 	st.w	r7[-116],r8
8000565c:	e1 b8 00 42 	mfsr	r8,0x108
80005660:	ef 48 ff 90 	st.w	r7[-112],r8
80005664:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005668:	f1 39 00 08 	ld.ub	r9,r8[8]
8000566c:	30 28       	mov	r8,2
8000566e:	f0 09 18 00 	cp.b	r9,r8
80005672:	c0 31       	brne	80005678 <et024006_PowerUp+0x224>
80005674:	30 08       	mov	r8,0
80005676:	c4 38       	rjmp	800056fc <et024006_PowerUp+0x2a8>
80005678:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000567c:	f1 39 00 08 	ld.ub	r9,r8[8]
80005680:	30 18       	mov	r8,1
80005682:	f0 09 18 00 	cp.b	r9,r8
80005686:	c0 31       	brne	8000568c <et024006_PowerUp+0x238>
80005688:	30 18       	mov	r8,1
8000568a:	c3 98       	rjmp	800056fc <et024006_PowerUp+0x2a8>
8000568c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005690:	70 09       	ld.w	r9,r8[0x0]
80005692:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005696:	70 18       	ld.w	r8,r8[0x4]
80005698:	10 39       	cp.w	r9,r8
8000569a:	e0 88 00 1a 	brls	800056ce <et024006_PowerUp+0x27a>
8000569e:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800056a2:	70 08       	ld.w	r8,r8[0x0]
800056a4:	ee f9 ff 90 	ld.w	r9,r7[-112]
800056a8:	10 39       	cp.w	r9,r8
800056aa:	c1 02       	brcc	800056ca <et024006_PowerUp+0x276>
800056ac:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800056b0:	70 18       	ld.w	r8,r8[0x4]
800056b2:	ee f9 ff 90 	ld.w	r9,r7[-112]
800056b6:	10 39       	cp.w	r9,r8
800056b8:	e0 88 00 09 	brls	800056ca <et024006_PowerUp+0x276>
800056bc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800056c0:	30 18       	mov	r8,1
800056c2:	f3 68 00 08 	st.b	r9[8],r8
800056c6:	30 18       	mov	r8,1
800056c8:	c1 a8       	rjmp	800056fc <et024006_PowerUp+0x2a8>
800056ca:	30 08       	mov	r8,0
800056cc:	c1 88       	rjmp	800056fc <et024006_PowerUp+0x2a8>
800056ce:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800056d2:	70 08       	ld.w	r8,r8[0x0]
800056d4:	ee f9 ff 90 	ld.w	r9,r7[-112]
800056d8:	10 39       	cp.w	r9,r8
800056da:	c0 93       	brcs	800056ec <et024006_PowerUp+0x298>
800056dc:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800056e0:	70 18       	ld.w	r8,r8[0x4]
800056e2:	ee f9 ff 90 	ld.w	r9,r7[-112]
800056e6:	10 39       	cp.w	r9,r8
800056e8:	e0 88 00 09 	brls	800056fa <et024006_PowerUp+0x2a6>
800056ec:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800056f0:	30 18       	mov	r8,1
800056f2:	f3 68 00 08 	st.b	r9[8],r8
800056f6:	30 18       	mov	r8,1
800056f8:	c0 28       	rjmp	800056fc <et024006_PowerUp+0x2a8>
800056fa:	30 08       	mov	r8,0
800056fc:	58 08       	cp.w	r8,0
800056fe:	ca b0       	breq	80005654 <et024006_PowerUp+0x200>
80005700:	34 38       	mov	r8,67
80005702:	ef 68 ff 97 	st.b	r7[-105],r8
80005706:	38 08       	mov	r8,-128
80005708:	ef 68 ff 96 	st.b	r7[-106],r8
8000570c:	fc 19 c0 00 	movh	r9,0xc000
80005710:	ef 38 ff 97 	ld.ub	r8,r7[-105]
80005714:	b2 08       	st.h	r9[0x0],r8
80005716:	fc 19 c0 20 	movh	r9,0xc020
8000571a:	ef 38 ff 96 	ld.ub	r8,r7[-106]
8000571e:	b2 08       	st.h	r9[0x0],r8
80005720:	fe f8 04 60 	ld.w	r8,pc[1120]
80005724:	70 08       	ld.w	r8,r8[0x0]
80005726:	30 59       	mov	r9,5
80005728:	ef 49 ff 9c 	st.w	r7[-100],r9
8000572c:	ef 48 ff 98 	st.w	r7[-104],r8
80005730:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80005734:	ef 48 ff a4 	st.w	r7[-92],r8
80005738:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000573c:	ef 48 ff a0 	st.w	r7[-96],r8
80005740:	ee fc ff a4 	ld.w	r12,r7[-92]
80005744:	ef 4c fe f0 	st.w	r7[-272],r12
80005748:	30 0b       	mov	r11,0
8000574a:	ef 4b fe ec 	st.w	r7[-276],r11
8000574e:	ee fa ff a0 	ld.w	r10,r7[-96]
80005752:	ef 4a fe e8 	st.w	r7[-280],r10
80005756:	30 09       	mov	r9,0
80005758:	ef 49 fe e4 	st.w	r7[-284],r9
8000575c:	ee fa fe ec 	ld.w	r10,r7[-276]
80005760:	ee f8 fe e8 	ld.w	r8,r7[-280]
80005764:	b1 3a       	mul	r10,r8
80005766:	ee f8 fe e4 	ld.w	r8,r7[-284]
8000576a:	ee fc fe f0 	ld.w	r12,r7[-272]
8000576e:	b9 38       	mul	r8,r12
80005770:	10 0a       	add	r10,r8
80005772:	ee fb fe f0 	ld.w	r11,r7[-272]
80005776:	ee fc fe e8 	ld.w	r12,r7[-280]
8000577a:	f6 0c 06 48 	mulu.d	r8,r11,r12
8000577e:	12 0a       	add	r10,r9
80005780:	14 99       	mov	r9,r10
80005782:	e0 6a 03 e7 	mov	r10,999
80005786:	30 0b       	mov	r11,0
80005788:	f0 0a 00 0a 	add	r10,r8,r10
8000578c:	f2 0b 00 4b 	adc	r11,r9,r11
80005790:	e0 68 03 e8 	mov	r8,1000
80005794:	30 09       	mov	r9,0
80005796:	f0 1f 00 fc 	mcall	80005b84 <et024006_PowerUp+0x730>
8000579a:	14 98       	mov	r8,r10
8000579c:	16 99       	mov	r9,r11
8000579e:	ef 48 ff ac 	st.w	r7[-84],r8
800057a2:	ee c8 00 d4 	sub	r8,r7,212
800057a6:	ef 48 ff a8 	st.w	r7[-88],r8
800057aa:	e1 b8 00 42 	mfsr	r8,0x108
800057ae:	10 99       	mov	r9,r8
800057b0:	ee f8 ff a8 	ld.w	r8,r7[-88]
800057b4:	91 09       	st.w	r8[0x0],r9
800057b6:	ee f8 ff a8 	ld.w	r8,r7[-88]
800057ba:	70 09       	ld.w	r9,r8[0x0]
800057bc:	ee f8 ff ac 	ld.w	r8,r7[-84]
800057c0:	10 09       	add	r9,r8
800057c2:	ee f8 ff a8 	ld.w	r8,r7[-88]
800057c6:	91 19       	st.w	r8[0x4],r9
800057c8:	ee f9 ff a8 	ld.w	r9,r7[-88]
800057cc:	30 08       	mov	r8,0
800057ce:	f3 68 00 08 	st.b	r9[8],r8
800057d2:	ee c8 00 d4 	sub	r8,r7,212
800057d6:	ef 48 ff b0 	st.w	r7[-80],r8
800057da:	e1 b8 00 42 	mfsr	r8,0x108
800057de:	ef 48 ff b4 	st.w	r7[-76],r8
800057e2:	ee f8 ff b0 	ld.w	r8,r7[-80]
800057e6:	f1 39 00 08 	ld.ub	r9,r8[8]
800057ea:	30 28       	mov	r8,2
800057ec:	f0 09 18 00 	cp.b	r9,r8
800057f0:	c0 31       	brne	800057f6 <et024006_PowerUp+0x3a2>
800057f2:	30 08       	mov	r8,0
800057f4:	c4 38       	rjmp	8000587a <et024006_PowerUp+0x426>
800057f6:	ee f8 ff b0 	ld.w	r8,r7[-80]
800057fa:	f1 39 00 08 	ld.ub	r9,r8[8]
800057fe:	30 18       	mov	r8,1
80005800:	f0 09 18 00 	cp.b	r9,r8
80005804:	c0 31       	brne	8000580a <et024006_PowerUp+0x3b6>
80005806:	30 18       	mov	r8,1
80005808:	c3 98       	rjmp	8000587a <et024006_PowerUp+0x426>
8000580a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000580e:	70 09       	ld.w	r9,r8[0x0]
80005810:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005814:	70 18       	ld.w	r8,r8[0x4]
80005816:	10 39       	cp.w	r9,r8
80005818:	e0 88 00 1a 	brls	8000584c <et024006_PowerUp+0x3f8>
8000581c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005820:	70 08       	ld.w	r8,r8[0x0]
80005822:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005826:	10 39       	cp.w	r9,r8
80005828:	c1 02       	brcc	80005848 <et024006_PowerUp+0x3f4>
8000582a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000582e:	70 18       	ld.w	r8,r8[0x4]
80005830:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005834:	10 39       	cp.w	r9,r8
80005836:	e0 88 00 09 	brls	80005848 <et024006_PowerUp+0x3f4>
8000583a:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000583e:	30 18       	mov	r8,1
80005840:	f3 68 00 08 	st.b	r9[8],r8
80005844:	30 18       	mov	r8,1
80005846:	c1 a8       	rjmp	8000587a <et024006_PowerUp+0x426>
80005848:	30 08       	mov	r8,0
8000584a:	c1 88       	rjmp	8000587a <et024006_PowerUp+0x426>
8000584c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005850:	70 08       	ld.w	r8,r8[0x0]
80005852:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005856:	10 39       	cp.w	r9,r8
80005858:	c0 93       	brcs	8000586a <et024006_PowerUp+0x416>
8000585a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000585e:	70 18       	ld.w	r8,r8[0x4]
80005860:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005864:	10 39       	cp.w	r9,r8
80005866:	e0 88 00 09 	brls	80005878 <et024006_PowerUp+0x424>
8000586a:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000586e:	30 18       	mov	r8,1
80005870:	f3 68 00 08 	st.b	r9[8],r8
80005874:	30 18       	mov	r8,1
80005876:	c0 28       	rjmp	8000587a <et024006_PowerUp+0x426>
80005878:	30 08       	mov	r8,0
8000587a:	58 08       	cp.w	r8,0
8000587c:	ca b0       	breq	800057d2 <et024006_PowerUp+0x37e>
8000587e:	31 b8       	mov	r8,27
80005880:	ef 68 ff bb 	st.b	r7[-69],r8
80005884:	30 88       	mov	r8,8
80005886:	ef 68 ff ba 	st.b	r7[-70],r8
8000588a:	fc 19 c0 00 	movh	r9,0xc000
8000588e:	ef 38 ff bb 	ld.ub	r8,r7[-69]
80005892:	b2 08       	st.h	r9[0x0],r8
80005894:	fc 19 c0 20 	movh	r9,0xc020
80005898:	ef 38 ff ba 	ld.ub	r8,r7[-70]
8000589c:	b2 08       	st.h	r9[0x0],r8
8000589e:	fe f8 02 e2 	ld.w	r8,pc[738]
800058a2:	70 08       	ld.w	r8,r8[0x0]
800058a4:	32 89       	mov	r9,40
800058a6:	ef 49 ff c0 	st.w	r7[-64],r9
800058aa:	ef 48 ff bc 	st.w	r7[-68],r8
800058ae:	ee f8 ff c0 	ld.w	r8,r7[-64]
800058b2:	ef 48 ff c8 	st.w	r7[-56],r8
800058b6:	ee f8 ff bc 	ld.w	r8,r7[-68]
800058ba:	ef 48 ff c4 	st.w	r7[-60],r8
800058be:	ee fb ff c8 	ld.w	r11,r7[-56]
800058c2:	ef 4b ff 00 	st.w	r7[-256],r11
800058c6:	30 0a       	mov	r10,0
800058c8:	ef 4a fe fc 	st.w	r7[-260],r10
800058cc:	ee f9 ff c4 	ld.w	r9,r7[-60]
800058d0:	ef 49 fe f8 	st.w	r7[-264],r9
800058d4:	30 08       	mov	r8,0
800058d6:	ef 48 fe f4 	st.w	r7[-268],r8
800058da:	ee fa fe fc 	ld.w	r10,r7[-260]
800058de:	ee fc fe f8 	ld.w	r12,r7[-264]
800058e2:	b9 3a       	mul	r10,r12
800058e4:	ee f8 fe f4 	ld.w	r8,r7[-268]
800058e8:	ee fb ff 00 	ld.w	r11,r7[-256]
800058ec:	b7 38       	mul	r8,r11
800058ee:	10 0a       	add	r10,r8
800058f0:	ee fc ff 00 	ld.w	r12,r7[-256]
800058f4:	ee fb fe f8 	ld.w	r11,r7[-264]
800058f8:	f8 0b 06 48 	mulu.d	r8,r12,r11
800058fc:	12 0a       	add	r10,r9
800058fe:	14 99       	mov	r9,r10
80005900:	e0 6a 03 e7 	mov	r10,999
80005904:	30 0b       	mov	r11,0
80005906:	f0 0a 00 0a 	add	r10,r8,r10
8000590a:	f2 0b 00 4b 	adc	r11,r9,r11
8000590e:	e0 68 03 e8 	mov	r8,1000
80005912:	30 09       	mov	r9,0
80005914:	f0 1f 00 9c 	mcall	80005b84 <et024006_PowerUp+0x730>
80005918:	14 98       	mov	r8,r10
8000591a:	16 99       	mov	r9,r11
8000591c:	ef 48 ff d0 	st.w	r7[-48],r8
80005920:	ee c8 00 c8 	sub	r8,r7,200
80005924:	ef 48 ff cc 	st.w	r7[-52],r8
80005928:	e1 b8 00 42 	mfsr	r8,0x108
8000592c:	10 99       	mov	r9,r8
8000592e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005932:	91 09       	st.w	r8[0x0],r9
80005934:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005938:	70 09       	ld.w	r9,r8[0x0]
8000593a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000593e:	10 09       	add	r9,r8
80005940:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005944:	91 19       	st.w	r8[0x4],r9
80005946:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000594a:	30 08       	mov	r8,0
8000594c:	f3 68 00 08 	st.b	r9[8],r8
80005950:	ee c8 00 c8 	sub	r8,r7,200
80005954:	ef 48 ff d4 	st.w	r7[-44],r8
80005958:	e1 b8 00 42 	mfsr	r8,0x108
8000595c:	ef 48 ff d8 	st.w	r7[-40],r8
80005960:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005964:	f1 39 00 08 	ld.ub	r9,r8[8]
80005968:	30 28       	mov	r8,2
8000596a:	f0 09 18 00 	cp.b	r9,r8
8000596e:	c0 31       	brne	80005974 <et024006_PowerUp+0x520>
80005970:	30 08       	mov	r8,0
80005972:	c4 38       	rjmp	800059f8 <et024006_PowerUp+0x5a4>
80005974:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005978:	f1 39 00 08 	ld.ub	r9,r8[8]
8000597c:	30 18       	mov	r8,1
8000597e:	f0 09 18 00 	cp.b	r9,r8
80005982:	c0 31       	brne	80005988 <et024006_PowerUp+0x534>
80005984:	30 18       	mov	r8,1
80005986:	c3 98       	rjmp	800059f8 <et024006_PowerUp+0x5a4>
80005988:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000598c:	70 09       	ld.w	r9,r8[0x0]
8000598e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005992:	70 18       	ld.w	r8,r8[0x4]
80005994:	10 39       	cp.w	r9,r8
80005996:	e0 88 00 1a 	brls	800059ca <et024006_PowerUp+0x576>
8000599a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000599e:	70 08       	ld.w	r8,r8[0x0]
800059a0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800059a4:	10 39       	cp.w	r9,r8
800059a6:	c1 02       	brcc	800059c6 <et024006_PowerUp+0x572>
800059a8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800059ac:	70 18       	ld.w	r8,r8[0x4]
800059ae:	ee f9 ff d8 	ld.w	r9,r7[-40]
800059b2:	10 39       	cp.w	r9,r8
800059b4:	e0 88 00 09 	brls	800059c6 <et024006_PowerUp+0x572>
800059b8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800059bc:	30 18       	mov	r8,1
800059be:	f3 68 00 08 	st.b	r9[8],r8
800059c2:	30 18       	mov	r8,1
800059c4:	c1 a8       	rjmp	800059f8 <et024006_PowerUp+0x5a4>
800059c6:	30 08       	mov	r8,0
800059c8:	c1 88       	rjmp	800059f8 <et024006_PowerUp+0x5a4>
800059ca:	ee f8 ff d4 	ld.w	r8,r7[-44]
800059ce:	70 08       	ld.w	r8,r8[0x0]
800059d0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800059d4:	10 39       	cp.w	r9,r8
800059d6:	c0 93       	brcs	800059e8 <et024006_PowerUp+0x594>
800059d8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800059dc:	70 18       	ld.w	r8,r8[0x4]
800059de:	ee f9 ff d8 	ld.w	r9,r7[-40]
800059e2:	10 39       	cp.w	r9,r8
800059e4:	e0 88 00 09 	brls	800059f6 <et024006_PowerUp+0x5a2>
800059e8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800059ec:	30 18       	mov	r8,1
800059ee:	f3 68 00 08 	st.b	r9[8],r8
800059f2:	30 18       	mov	r8,1
800059f4:	c0 28       	rjmp	800059f8 <et024006_PowerUp+0x5a4>
800059f6:	30 08       	mov	r8,0
800059f8:	58 08       	cp.w	r8,0
800059fa:	ca b0       	breq	80005950 <et024006_PowerUp+0x4fc>
800059fc:	31 b8       	mov	r8,27
800059fe:	ef 68 ff df 	st.b	r7[-33],r8
80005a02:	31 08       	mov	r8,16
80005a04:	ef 68 ff de 	st.b	r7[-34],r8
80005a08:	fc 19 c0 00 	movh	r9,0xc000
80005a0c:	ef 38 ff df 	ld.ub	r8,r7[-33]
80005a10:	b2 08       	st.h	r9[0x0],r8
80005a12:	fc 19 c0 20 	movh	r9,0xc020
80005a16:	ef 38 ff de 	ld.ub	r8,r7[-34]
80005a1a:	b2 08       	st.h	r9[0x0],r8
80005a1c:	4d 98       	lddpc	r8,80005b80 <et024006_PowerUp+0x72c>
80005a1e:	70 08       	ld.w	r8,r8[0x0]
80005a20:	32 89       	mov	r9,40
80005a22:	ef 49 ff e4 	st.w	r7[-28],r9
80005a26:	ef 48 ff e0 	st.w	r7[-32],r8
80005a2a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005a2e:	ef 48 ff ec 	st.w	r7[-20],r8
80005a32:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005a36:	ef 48 ff e8 	st.w	r7[-24],r8
80005a3a:	ee fa ff ec 	ld.w	r10,r7[-20]
80005a3e:	ef 4a ff 10 	st.w	r7[-240],r10
80005a42:	30 09       	mov	r9,0
80005a44:	ef 49 ff 0c 	st.w	r7[-244],r9
80005a48:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005a4c:	ef 48 ff 08 	st.w	r7[-248],r8
80005a50:	30 0c       	mov	r12,0
80005a52:	ef 4c ff 04 	st.w	r7[-252],r12
80005a56:	ee fa ff 0c 	ld.w	r10,r7[-244]
80005a5a:	ee fb ff 08 	ld.w	r11,r7[-248]
80005a5e:	b7 3a       	mul	r10,r11
80005a60:	ee f8 ff 04 	ld.w	r8,r7[-252]
80005a64:	ee f9 ff 10 	ld.w	r9,r7[-240]
80005a68:	b3 38       	mul	r8,r9
80005a6a:	10 0a       	add	r10,r8
80005a6c:	ee fc ff 10 	ld.w	r12,r7[-240]
80005a70:	ee fb ff 08 	ld.w	r11,r7[-248]
80005a74:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005a78:	12 0a       	add	r10,r9
80005a7a:	14 99       	mov	r9,r10
80005a7c:	e0 6a 03 e7 	mov	r10,999
80005a80:	30 0b       	mov	r11,0
80005a82:	f0 0a 00 0a 	add	r10,r8,r10
80005a86:	f2 0b 00 4b 	adc	r11,r9,r11
80005a8a:	e0 68 03 e8 	mov	r8,1000
80005a8e:	30 09       	mov	r9,0
80005a90:	f0 1f 00 3d 	mcall	80005b84 <et024006_PowerUp+0x730>
80005a94:	14 98       	mov	r8,r10
80005a96:	16 99       	mov	r9,r11
80005a98:	ef 48 ff f4 	st.w	r7[-12],r8
80005a9c:	ee c8 00 bc 	sub	r8,r7,188
80005aa0:	ef 48 ff f0 	st.w	r7[-16],r8
80005aa4:	e1 b8 00 42 	mfsr	r8,0x108
80005aa8:	10 99       	mov	r9,r8
80005aaa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005aae:	91 09       	st.w	r8[0x0],r9
80005ab0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005ab4:	70 09       	ld.w	r9,r8[0x0]
80005ab6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005aba:	10 09       	add	r9,r8
80005abc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005ac0:	91 19       	st.w	r8[0x4],r9
80005ac2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005ac6:	30 08       	mov	r8,0
80005ac8:	f3 68 00 08 	st.b	r9[8],r8
80005acc:	ee c8 00 bc 	sub	r8,r7,188
80005ad0:	ef 48 ff f8 	st.w	r7[-8],r8
80005ad4:	e1 b8 00 42 	mfsr	r8,0x108
80005ad8:	ef 48 ff fc 	st.w	r7[-4],r8
80005adc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ae0:	f1 39 00 08 	ld.ub	r9,r8[8]
80005ae4:	30 28       	mov	r8,2
80005ae6:	f0 09 18 00 	cp.b	r9,r8
80005aea:	c0 31       	brne	80005af0 <et024006_PowerUp+0x69c>
80005aec:	30 08       	mov	r8,0
80005aee:	c4 38       	rjmp	80005b74 <et024006_PowerUp+0x720>
80005af0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005af4:	f1 39 00 08 	ld.ub	r9,r8[8]
80005af8:	30 18       	mov	r8,1
80005afa:	f0 09 18 00 	cp.b	r9,r8
80005afe:	c0 31       	brne	80005b04 <et024006_PowerUp+0x6b0>
80005b00:	30 18       	mov	r8,1
80005b02:	c3 98       	rjmp	80005b74 <et024006_PowerUp+0x720>
80005b04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b08:	70 09       	ld.w	r9,r8[0x0]
80005b0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b0e:	70 18       	ld.w	r8,r8[0x4]
80005b10:	10 39       	cp.w	r9,r8
80005b12:	e0 88 00 1a 	brls	80005b46 <et024006_PowerUp+0x6f2>
80005b16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b1a:	70 08       	ld.w	r8,r8[0x0]
80005b1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b20:	10 39       	cp.w	r9,r8
80005b22:	c1 02       	brcc	80005b42 <et024006_PowerUp+0x6ee>
80005b24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b28:	70 18       	ld.w	r8,r8[0x4]
80005b2a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b2e:	10 39       	cp.w	r9,r8
80005b30:	e0 88 00 09 	brls	80005b42 <et024006_PowerUp+0x6ee>
80005b34:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b38:	30 18       	mov	r8,1
80005b3a:	f3 68 00 08 	st.b	r9[8],r8
80005b3e:	30 18       	mov	r8,1
80005b40:	c1 a8       	rjmp	80005b74 <et024006_PowerUp+0x720>
80005b42:	30 08       	mov	r8,0
80005b44:	c1 88       	rjmp	80005b74 <et024006_PowerUp+0x720>
80005b46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b4a:	70 08       	ld.w	r8,r8[0x0]
80005b4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b50:	10 39       	cp.w	r9,r8
80005b52:	c0 93       	brcs	80005b64 <et024006_PowerUp+0x710>
80005b54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b58:	70 18       	ld.w	r8,r8[0x4]
80005b5a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b5e:	10 39       	cp.w	r9,r8
80005b60:	e0 88 00 09 	brls	80005b72 <et024006_PowerUp+0x71e>
80005b64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b68:	30 18       	mov	r8,1
80005b6a:	f3 68 00 08 	st.b	r9[8],r8
80005b6e:	30 18       	mov	r8,1
80005b70:	c0 28       	rjmp	80005b74 <et024006_PowerUp+0x720>
80005b72:	30 08       	mov	r8,0
80005b74:	58 08       	cp.w	r8,0
80005b76:	ca b0       	breq	80005acc <et024006_PowerUp+0x678>
80005b78:	2b 7d       	sub	sp,-292
80005b7a:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005b7e:	00 00       	add	r0,r0
80005b80:	00 00       	add	r0,r0
80005b82:	06 0c       	add	r12,r3
80005b84:	80 00       	ld.sh	r0,r0[0x0]
80005b86:	e5 08 eb cd 	ld.sh	r8,r2[-5171]

80005b88 <et024006_PowerOn>:
80005b88:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005b8c:	1a 97       	mov	r7,sp
80005b8e:	21 9d       	sub	sp,100
80005b90:	32 6c       	mov	r12,38
80005b92:	ef 6c ff b7 	st.b	r7[-73],r12
80005b96:	30 4c       	mov	r12,4
80005b98:	ef 6c ff b6 	st.b	r7[-74],r12
80005b9c:	fc 1e c0 00 	movh	lr,0xc000
80005ba0:	ef 3c ff b7 	ld.ub	r12,r7[-73]
80005ba4:	bc 0c       	st.h	lr[0x0],r12
80005ba6:	fc 1e c0 20 	movh	lr,0xc020
80005baa:	ef 3c ff b6 	ld.ub	r12,r7[-74]
80005bae:	bc 0c       	st.h	lr[0x0],r12
80005bb0:	fe fc 02 e0 	ld.w	r12,pc[736]
80005bb4:	78 0c       	ld.w	r12,r12[0x0]
80005bb6:	32 8e       	mov	lr,40
80005bb8:	ef 4e ff bc 	st.w	r7[-68],lr
80005bbc:	ef 4c ff b8 	st.w	r7[-72],r12
80005bc0:	ee fc ff bc 	ld.w	r12,r7[-68]
80005bc4:	ef 4c ff c4 	st.w	r7[-60],r12
80005bc8:	ee fc ff b8 	ld.w	r12,r7[-72]
80005bcc:	ef 4c ff c0 	st.w	r7[-64],r12
80005bd0:	ee fa ff c4 	ld.w	r10,r7[-60]
80005bd4:	30 0b       	mov	r11,0
80005bd6:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005bda:	30 09       	mov	r9,0
80005bdc:	f6 08 02 4c 	mul	r12,r11,r8
80005be0:	f2 0a 02 4e 	mul	lr,r9,r10
80005be4:	1c 0c       	add	r12,lr
80005be6:	f4 08 06 48 	mulu.d	r8,r10,r8
80005bea:	12 0c       	add	r12,r9
80005bec:	18 99       	mov	r9,r12
80005bee:	e0 6a 03 e7 	mov	r10,999
80005bf2:	30 0b       	mov	r11,0
80005bf4:	f0 0a 00 0a 	add	r10,r8,r10
80005bf8:	f2 0b 00 4b 	adc	r11,r9,r11
80005bfc:	e0 68 03 e8 	mov	r8,1000
80005c00:	30 09       	mov	r9,0
80005c02:	f0 1f 00 a5 	mcall	80005e94 <et024006_PowerOn+0x30c>
80005c06:	14 98       	mov	r8,r10
80005c08:	16 99       	mov	r9,r11
80005c0a:	ef 48 ff cc 	st.w	r7[-52],r8
80005c0e:	ee c8 00 64 	sub	r8,r7,100
80005c12:	ef 48 ff c8 	st.w	r7[-56],r8
80005c16:	e1 b8 00 42 	mfsr	r8,0x108
80005c1a:	10 99       	mov	r9,r8
80005c1c:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005c20:	91 09       	st.w	r8[0x0],r9
80005c22:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005c26:	70 09       	ld.w	r9,r8[0x0]
80005c28:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005c2c:	10 09       	add	r9,r8
80005c2e:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005c32:	91 19       	st.w	r8[0x4],r9
80005c34:	ee f9 ff c8 	ld.w	r9,r7[-56]
80005c38:	30 08       	mov	r8,0
80005c3a:	f3 68 00 08 	st.b	r9[8],r8
80005c3e:	ee c8 00 64 	sub	r8,r7,100
80005c42:	ef 48 ff d0 	st.w	r7[-48],r8
80005c46:	e1 b8 00 42 	mfsr	r8,0x108
80005c4a:	ef 48 ff d4 	st.w	r7[-44],r8
80005c4e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c52:	f1 39 00 08 	ld.ub	r9,r8[8]
80005c56:	30 28       	mov	r8,2
80005c58:	f0 09 18 00 	cp.b	r9,r8
80005c5c:	c0 31       	brne	80005c62 <et024006_PowerOn+0xda>
80005c5e:	30 08       	mov	r8,0
80005c60:	c4 38       	rjmp	80005ce6 <et024006_PowerOn+0x15e>
80005c62:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c66:	f1 39 00 08 	ld.ub	r9,r8[8]
80005c6a:	30 18       	mov	r8,1
80005c6c:	f0 09 18 00 	cp.b	r9,r8
80005c70:	c0 31       	brne	80005c76 <et024006_PowerOn+0xee>
80005c72:	30 18       	mov	r8,1
80005c74:	c3 98       	rjmp	80005ce6 <et024006_PowerOn+0x15e>
80005c76:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c7a:	70 09       	ld.w	r9,r8[0x0]
80005c7c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c80:	70 18       	ld.w	r8,r8[0x4]
80005c82:	10 39       	cp.w	r9,r8
80005c84:	e0 88 00 1a 	brls	80005cb8 <et024006_PowerOn+0x130>
80005c88:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c8c:	70 08       	ld.w	r8,r8[0x0]
80005c8e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005c92:	10 39       	cp.w	r9,r8
80005c94:	c1 02       	brcc	80005cb4 <et024006_PowerOn+0x12c>
80005c96:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c9a:	70 18       	ld.w	r8,r8[0x4]
80005c9c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005ca0:	10 39       	cp.w	r9,r8
80005ca2:	e0 88 00 09 	brls	80005cb4 <et024006_PowerOn+0x12c>
80005ca6:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005caa:	30 18       	mov	r8,1
80005cac:	f3 68 00 08 	st.b	r9[8],r8
80005cb0:	30 18       	mov	r8,1
80005cb2:	c1 a8       	rjmp	80005ce6 <et024006_PowerOn+0x15e>
80005cb4:	30 08       	mov	r8,0
80005cb6:	c1 88       	rjmp	80005ce6 <et024006_PowerOn+0x15e>
80005cb8:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005cbc:	70 08       	ld.w	r8,r8[0x0]
80005cbe:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005cc2:	10 39       	cp.w	r9,r8
80005cc4:	c0 93       	brcs	80005cd6 <et024006_PowerOn+0x14e>
80005cc6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005cca:	70 18       	ld.w	r8,r8[0x4]
80005ccc:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005cd0:	10 39       	cp.w	r9,r8
80005cd2:	e0 88 00 09 	brls	80005ce4 <et024006_PowerOn+0x15c>
80005cd6:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005cda:	30 18       	mov	r8,1
80005cdc:	f3 68 00 08 	st.b	r9[8],r8
80005ce0:	30 18       	mov	r8,1
80005ce2:	c0 28       	rjmp	80005ce6 <et024006_PowerOn+0x15e>
80005ce4:	30 08       	mov	r8,0
80005ce6:	58 08       	cp.w	r8,0
80005ce8:	ca b0       	breq	80005c3e <et024006_PowerOn+0xb6>
80005cea:	32 68       	mov	r8,38
80005cec:	ef 68 ff d9 	st.b	r7[-39],r8
80005cf0:	32 48       	mov	r8,36
80005cf2:	ef 68 ff d8 	st.b	r7[-40],r8
80005cf6:	fc 19 c0 00 	movh	r9,0xc000
80005cfa:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80005cfe:	b2 08       	st.h	r9[0x0],r8
80005d00:	fc 19 c0 20 	movh	r9,0xc020
80005d04:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80005d08:	b2 08       	st.h	r9[0x0],r8
80005d0a:	32 68       	mov	r8,38
80005d0c:	ef 68 ff db 	st.b	r7[-37],r8
80005d10:	32 c8       	mov	r8,44
80005d12:	ef 68 ff da 	st.b	r7[-38],r8
80005d16:	fc 19 c0 00 	movh	r9,0xc000
80005d1a:	ef 38 ff db 	ld.ub	r8,r7[-37]
80005d1e:	b2 08       	st.h	r9[0x0],r8
80005d20:	fc 19 c0 20 	movh	r9,0xc020
80005d24:	ef 38 ff da 	ld.ub	r8,r7[-38]
80005d28:	b2 08       	st.h	r9[0x0],r8
80005d2a:	4d a8       	lddpc	r8,80005e90 <et024006_PowerOn+0x308>
80005d2c:	70 08       	ld.w	r8,r8[0x0]
80005d2e:	32 89       	mov	r9,40
80005d30:	ef 49 ff e0 	st.w	r7[-32],r9
80005d34:	ef 48 ff dc 	st.w	r7[-36],r8
80005d38:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005d3c:	ef 48 ff e8 	st.w	r7[-24],r8
80005d40:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005d44:	ef 48 ff e4 	st.w	r7[-28],r8
80005d48:	ee f0 ff e8 	ld.w	r0,r7[-24]
80005d4c:	30 01       	mov	r1,0
80005d4e:	ee f2 ff e4 	ld.w	r2,r7[-28]
80005d52:	30 03       	mov	r3,0
80005d54:	e2 02 02 4a 	mul	r10,r1,r2
80005d58:	e6 00 02 48 	mul	r8,r3,r0
80005d5c:	10 0a       	add	r10,r8
80005d5e:	e0 02 06 48 	mulu.d	r8,r0,r2
80005d62:	12 0a       	add	r10,r9
80005d64:	14 99       	mov	r9,r10
80005d66:	e0 6a 03 e7 	mov	r10,999
80005d6a:	30 0b       	mov	r11,0
80005d6c:	f0 0a 00 0a 	add	r10,r8,r10
80005d70:	f2 0b 00 4b 	adc	r11,r9,r11
80005d74:	e0 68 03 e8 	mov	r8,1000
80005d78:	30 09       	mov	r9,0
80005d7a:	f0 1f 00 47 	mcall	80005e94 <et024006_PowerOn+0x30c>
80005d7e:	14 98       	mov	r8,r10
80005d80:	16 99       	mov	r9,r11
80005d82:	ef 48 ff f0 	st.w	r7[-16],r8
80005d86:	ee c8 00 58 	sub	r8,r7,88
80005d8a:	ef 48 ff ec 	st.w	r7[-20],r8
80005d8e:	e1 b8 00 42 	mfsr	r8,0x108
80005d92:	10 99       	mov	r9,r8
80005d94:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005d98:	91 09       	st.w	r8[0x0],r9
80005d9a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005d9e:	70 09       	ld.w	r9,r8[0x0]
80005da0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005da4:	10 09       	add	r9,r8
80005da6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005daa:	91 19       	st.w	r8[0x4],r9
80005dac:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005db0:	30 08       	mov	r8,0
80005db2:	f3 68 00 08 	st.b	r9[8],r8
80005db6:	ee c8 00 58 	sub	r8,r7,88
80005dba:	ef 48 ff f4 	st.w	r7[-12],r8
80005dbe:	e1 b8 00 42 	mfsr	r8,0x108
80005dc2:	ef 48 ff f8 	st.w	r7[-8],r8
80005dc6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005dca:	f1 39 00 08 	ld.ub	r9,r8[8]
80005dce:	30 28       	mov	r8,2
80005dd0:	f0 09 18 00 	cp.b	r9,r8
80005dd4:	c0 31       	brne	80005dda <et024006_PowerOn+0x252>
80005dd6:	30 08       	mov	r8,0
80005dd8:	c4 38       	rjmp	80005e5e <et024006_PowerOn+0x2d6>
80005dda:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005dde:	f1 39 00 08 	ld.ub	r9,r8[8]
80005de2:	30 18       	mov	r8,1
80005de4:	f0 09 18 00 	cp.b	r9,r8
80005de8:	c0 31       	brne	80005dee <et024006_PowerOn+0x266>
80005dea:	30 18       	mov	r8,1
80005dec:	c3 98       	rjmp	80005e5e <et024006_PowerOn+0x2d6>
80005dee:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005df2:	70 09       	ld.w	r9,r8[0x0]
80005df4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005df8:	70 18       	ld.w	r8,r8[0x4]
80005dfa:	10 39       	cp.w	r9,r8
80005dfc:	e0 88 00 1a 	brls	80005e30 <et024006_PowerOn+0x2a8>
80005e00:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e04:	70 08       	ld.w	r8,r8[0x0]
80005e06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e0a:	10 39       	cp.w	r9,r8
80005e0c:	c1 02       	brcc	80005e2c <et024006_PowerOn+0x2a4>
80005e0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e12:	70 18       	ld.w	r8,r8[0x4]
80005e14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e18:	10 39       	cp.w	r9,r8
80005e1a:	e0 88 00 09 	brls	80005e2c <et024006_PowerOn+0x2a4>
80005e1e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005e22:	30 18       	mov	r8,1
80005e24:	f3 68 00 08 	st.b	r9[8],r8
80005e28:	30 18       	mov	r8,1
80005e2a:	c1 a8       	rjmp	80005e5e <et024006_PowerOn+0x2d6>
80005e2c:	30 08       	mov	r8,0
80005e2e:	c1 88       	rjmp	80005e5e <et024006_PowerOn+0x2d6>
80005e30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e34:	70 08       	ld.w	r8,r8[0x0]
80005e36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e3a:	10 39       	cp.w	r9,r8
80005e3c:	c0 93       	brcs	80005e4e <et024006_PowerOn+0x2c6>
80005e3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e42:	70 18       	ld.w	r8,r8[0x4]
80005e44:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e48:	10 39       	cp.w	r9,r8
80005e4a:	e0 88 00 09 	brls	80005e5c <et024006_PowerOn+0x2d4>
80005e4e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005e52:	30 18       	mov	r8,1
80005e54:	f3 68 00 08 	st.b	r9[8],r8
80005e58:	30 18       	mov	r8,1
80005e5a:	c0 28       	rjmp	80005e5e <et024006_PowerOn+0x2d6>
80005e5c:	30 08       	mov	r8,0
80005e5e:	58 08       	cp.w	r8,0
80005e60:	ca b0       	breq	80005db6 <et024006_PowerOn+0x22e>
80005e62:	32 68       	mov	r8,38
80005e64:	ef 68 ff ff 	st.b	r7[-1],r8
80005e68:	33 c8       	mov	r8,60
80005e6a:	ef 68 ff fe 	st.b	r7[-2],r8
80005e6e:	fc 19 c0 00 	movh	r9,0xc000
80005e72:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005e76:	b2 08       	st.h	r9[0x0],r8
80005e78:	fc 19 c0 20 	movh	r9,0xc020
80005e7c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005e80:	b2 08       	st.h	r9[0x0],r8
80005e82:	30 8b       	mov	r11,8
80005e84:	37 0c       	mov	r12,112
80005e86:	f0 1f 00 05 	mcall	80005e98 <et024006_PowerOn+0x310>
80005e8a:	2e 7d       	sub	sp,-100
80005e8c:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005e90:	00 00       	add	r0,r0
80005e92:	06 0c       	add	r12,r3
80005e94:	80 00       	ld.sh	r0,r0[0x0]
80005e96:	e5 08 80 00 	ld.sh	r8,r2[-32768]
80005e9a:	48 9c       	lddpc	r12,80005ebc <et024006_PowerOn+0x334>
80005e9c:	20 44       	sub	r4,4
80005e9e:	65 63       	ld.w	r3,r2[0x58]
80005ea0:	69 70       	ld.w	r0,r4[0x5c]
80005ea2:	68 65       	ld.w	r5,r4[0x18]
80005ea4:	72 65       	ld.w	r5,r9[0x18]
80005ea6:	64 20       	ld.w	r0,r2[0x8]
80005ea8:	00 00       	add	r0,r0
80005eaa:	00 00       	add	r0,r0
80005eac:	20 73       	sub	r3,7
80005eae:	65 63       	ld.w	r3,r2[0x58]
80005eb0:	74 6f       	ld.w	pc,r10[0x18]
80005eb2:	72 73       	ld.w	r3,r9[0x1c]
80005eb4:	00 00       	add	r0,r0
80005eb6:	00 00       	add	r0,r0
80005eb8:	20 45       	sub	r5,4
80005eba:	6e 63       	ld.w	r3,r7[0x18]
80005ebc:	69 70       	ld.w	r0,r4[0x5c]
80005ebe:	68 65       	ld.w	r5,r4[0x18]
80005ec0:	72 65       	ld.w	r5,r9[0x18]
80005ec2:	64 20       	ld.w	r0,r2[0x8]
80005ec4:	00 00       	add	r0,r0
	...

80005ec8 <is_sd_mmc_mci_card_present>:
80005ec8:	eb cd 40 80 	pushm	r7,lr
80005ecc:	1a 97       	mov	r7,sp
80005ece:	20 1d       	sub	sp,4
80005ed0:	18 98       	mov	r8,r12
80005ed2:	ef 68 ff fc 	st.b	r7[-4],r8
80005ed6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80005eda:	30 18       	mov	r8,1
80005edc:	f0 09 18 00 	cp.b	r9,r8
80005ee0:	e0 88 00 04 	brls	80005ee8 <is_sd_mmc_mci_card_present+0x20>
80005ee4:	30 08       	mov	r8,0
80005ee6:	c1 88       	rjmp	80005f16 <is_sd_mmc_mci_card_present+0x4e>
80005ee8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005eec:	58 08       	cp.w	r8,0
80005eee:	c0 b0       	breq	80005f04 <is_sd_mmc_mci_card_present+0x3c>
80005ef0:	58 18       	cp.w	r8,1
80005ef2:	c1 11       	brne	80005f14 <is_sd_mmc_mci_card_present+0x4c>
80005ef4:	32 8c       	mov	r12,40
80005ef6:	f0 1f 00 0b 	mcall	80005f20 <is_sd_mmc_mci_card_present+0x58>
80005efa:	18 98       	mov	r8,r12
80005efc:	58 08       	cp.w	r8,0
80005efe:	5f 08       	sreq	r8
80005f00:	5c 58       	castu.b	r8
80005f02:	c0 a8       	rjmp	80005f16 <is_sd_mmc_mci_card_present+0x4e>
80005f04:	32 bc       	mov	r12,43
80005f06:	f0 1f 00 07 	mcall	80005f20 <is_sd_mmc_mci_card_present+0x58>
80005f0a:	18 98       	mov	r8,r12
80005f0c:	58 08       	cp.w	r8,0
80005f0e:	5f 08       	sreq	r8
80005f10:	5c 58       	castu.b	r8
80005f12:	c0 28       	rjmp	80005f16 <is_sd_mmc_mci_card_present+0x4e>
80005f14:	30 08       	mov	r8,0
80005f16:	10 9c       	mov	r12,r8
80005f18:	2f fd       	sub	sp,-4
80005f1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f1e:	00 00       	add	r0,r0
80005f20:	80 00       	ld.sh	r0,r0[0x0]
80005f22:	8d 64       	st.w	r6[0x18],r4

80005f24 <is_sd_mmc_mci_card_protected>:
80005f24:	eb cd 40 80 	pushm	r7,lr
80005f28:	1a 97       	mov	r7,sp
80005f2a:	20 1d       	sub	sp,4
80005f2c:	18 98       	mov	r8,r12
80005f2e:	ef 68 ff fc 	st.b	r7[-4],r8
80005f32:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80005f36:	30 18       	mov	r8,1
80005f38:	f0 09 18 00 	cp.b	r9,r8
80005f3c:	e0 88 00 04 	brls	80005f44 <is_sd_mmc_mci_card_protected+0x20>
80005f40:	30 08       	mov	r8,0
80005f42:	c1 88       	rjmp	80005f72 <is_sd_mmc_mci_card_protected+0x4e>
80005f44:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005f48:	58 08       	cp.w	r8,0
80005f4a:	c0 b0       	breq	80005f60 <is_sd_mmc_mci_card_protected+0x3c>
80005f4c:	58 18       	cp.w	r8,1
80005f4e:	c1 11       	brne	80005f70 <is_sd_mmc_mci_card_protected+0x4c>
80005f50:	32 6c       	mov	r12,38
80005f52:	f0 1f 00 0b 	mcall	80005f7c <is_sd_mmc_mci_card_protected+0x58>
80005f56:	18 98       	mov	r8,r12
80005f58:	58 18       	cp.w	r8,1
80005f5a:	5f 08       	sreq	r8
80005f5c:	5c 58       	castu.b	r8
80005f5e:	c0 a8       	rjmp	80005f72 <is_sd_mmc_mci_card_protected+0x4e>
80005f60:	36 cc       	mov	r12,108
80005f62:	f0 1f 00 07 	mcall	80005f7c <is_sd_mmc_mci_card_protected+0x58>
80005f66:	18 98       	mov	r8,r12
80005f68:	58 18       	cp.w	r8,1
80005f6a:	5f 08       	sreq	r8
80005f6c:	5c 58       	castu.b	r8
80005f6e:	c0 28       	rjmp	80005f72 <is_sd_mmc_mci_card_protected+0x4e>
80005f70:	30 08       	mov	r8,0
80005f72:	10 9c       	mov	r12,r8
80005f74:	2f fd       	sub	sp,-4
80005f76:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f7a:	00 00       	add	r0,r0
80005f7c:	80 00       	ld.sh	r0,r0[0x0]
80005f7e:	8d 64       	st.w	r6[0x18],r4

80005f80 <sd_mmc_mci_get_csd>:
80005f80:	eb cd 40 80 	pushm	r7,lr
80005f84:	1a 97       	mov	r7,sp
80005f86:	20 fd       	sub	sp,60
80005f88:	18 98       	mov	r8,r12
80005f8a:	ef 68 ff c4 	st.b	r7[-60],r8
80005f8e:	fe f9 02 b2 	ld.w	r9,pc[690]
80005f92:	ee c8 00 28 	sub	r8,r7,40
80005f96:	30 8a       	mov	r10,8
80005f98:	12 9b       	mov	r11,r9
80005f9a:	10 9c       	mov	r12,r8
80005f9c:	f0 1f 00 aa 	mcall	80006244 <sd_mmc_mci_get_csd+0x2c4>
80005fa0:	fe f8 02 a8 	ld.w	r8,pc[680]
80005fa4:	ee ca 00 38 	sub	r10,r7,56
80005fa8:	10 9b       	mov	r11,r8
80005faa:	f6 e8 00 00 	ld.d	r8,r11[0]
80005fae:	f4 e9 00 00 	st.d	r10[0],r8
80005fb2:	f6 e8 00 08 	ld.d	r8,r11[8]
80005fb6:	f4 e9 00 08 	st.d	r10[8],r8
80005fba:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80005fbe:	30 18       	mov	r8,1
80005fc0:	f0 09 18 00 	cp.b	r9,r8
80005fc4:	e0 88 00 04 	brls	80005fcc <sd_mmc_mci_get_csd+0x4c>
80005fc8:	30 08       	mov	r8,0
80005fca:	c3 69       	rjmp	80006236 <sd_mmc_mci_get_csd+0x2b6>
80005fcc:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80005fd0:	fe f9 02 7c 	ld.w	r9,pc[636]
80005fd4:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005fd8:	10 9a       	mov	r10,r8
80005fda:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80005fde:	fe f8 02 72 	ld.w	r8,pc[626]
80005fe2:	70 08       	ld.w	r8,r8[0x0]
80005fe4:	12 9b       	mov	r11,r9
80005fe6:	10 9c       	mov	r12,r8
80005fe8:	f0 1f 00 9b 	mcall	80006254 <sd_mmc_mci_get_csd+0x2d4>
80005fec:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80005ff0:	fe f8 02 68 	ld.w	r8,pc[616]
80005ff4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005ff8:	fe f8 02 58 	ld.w	r8,pc[600]
80005ffc:	70 08       	ld.w	r8,r8[0x0]
80005ffe:	12 9a       	mov	r10,r9
80006000:	e0 6b 10 89 	mov	r11,4233
80006004:	10 9c       	mov	r12,r8
80006006:	f0 1f 00 96 	mcall	8000625c <sd_mmc_mci_get_csd+0x2dc>
8000600a:	18 98       	mov	r8,r12
8000600c:	58 08       	cp.w	r8,0
8000600e:	c0 30       	breq	80006014 <sd_mmc_mci_get_csd+0x94>
80006010:	30 08       	mov	r8,0
80006012:	c1 29       	rjmp	80006236 <sd_mmc_mci_get_csd+0x2b6>
80006014:	fe f8 02 3c 	ld.w	r8,pc[572]
80006018:	70 08       	ld.w	r8,r8[0x0]
8000601a:	10 9c       	mov	r12,r8
8000601c:	f0 1f 00 91 	mcall	80006260 <sd_mmc_mci_get_csd+0x2e0>
80006020:	18 98       	mov	r8,r12
80006022:	ef 48 ff e0 	st.w	r7[-32],r8
80006026:	fe f8 02 2a 	ld.w	r8,pc[554]
8000602a:	70 08       	ld.w	r8,r8[0x0]
8000602c:	10 9c       	mov	r12,r8
8000602e:	f0 1f 00 8d 	mcall	80006260 <sd_mmc_mci_get_csd+0x2e0>
80006032:	18 98       	mov	r8,r12
80006034:	ef 48 ff e4 	st.w	r7[-28],r8
80006038:	fe f8 02 18 	ld.w	r8,pc[536]
8000603c:	70 08       	ld.w	r8,r8[0x0]
8000603e:	10 9c       	mov	r12,r8
80006040:	f0 1f 00 88 	mcall	80006260 <sd_mmc_mci_get_csd+0x2e0>
80006044:	18 98       	mov	r8,r12
80006046:	ef 48 ff e8 	st.w	r7[-24],r8
8000604a:	fe f8 02 06 	ld.w	r8,pc[518]
8000604e:	70 08       	ld.w	r8,r8[0x0]
80006050:	10 9c       	mov	r12,r8
80006052:	f0 1f 00 84 	mcall	80006260 <sd_mmc_mci_get_csd+0x2e0>
80006056:	18 98       	mov	r8,r12
80006058:	ef 48 ff ec 	st.w	r7[-20],r8
8000605c:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006060:	fe f9 02 04 	ld.w	r9,pc[516]
80006064:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006068:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000606c:	5c 58       	castu.b	r8
8000606e:	c1 40       	breq	80006096 <sd_mmc_mci_get_csd+0x116>
80006070:	ee c8 00 20 	sub	r8,r7,32
80006074:	11 88       	ld.ub	r8,r8[0x0]
80006076:	e2 18 00 3c 	andl	r8,0x3c,COH
8000607a:	59 08       	cp.w	r8,16
8000607c:	c0 d1       	brne	80006096 <sd_mmc_mci_get_csd+0x116>
8000607e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006082:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80006086:	4f 8a       	lddpc	r10,80006264 <sd_mmc_mci_get_csd+0x2e4>
80006088:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000608c:	a3 a8       	sbr	r8,0x2
8000608e:	5c 58       	castu.b	r8
80006090:	4f 5a       	lddpc	r10,80006264 <sd_mmc_mci_get_csd+0x2e4>
80006092:	f4 09 0b 08 	st.b	r10[r9],r8
80006096:	ef 3a ff c4 	ld.ub	r10,r7[-60]
8000609a:	ef 38 ff e3 	ld.ub	r8,r7[-29]
8000609e:	a3 98       	lsr	r8,0x3
800060a0:	5c 58       	castu.b	r8
800060a2:	ee 08 00 08 	add	r8,r7,r8
800060a6:	f1 38 ff c8 	ld.ub	r8,r8[-56]
800060aa:	4f 09       	lddpc	r9,80006268 <sd_mmc_mci_get_csd+0x2e8>
800060ac:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
800060b0:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800060b4:	4e c9       	lddpc	r9,80006264 <sd_mmc_mci_get_csd+0x2e4>
800060b6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800060ba:	e2 18 00 02 	andl	r8,0x2,COH
800060be:	c2 00       	breq	800060fe <sd_mmc_mci_get_csd+0x17e>
800060c0:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800060c4:	4e 98       	lddpc	r8,80006268 <sd_mmc_mci_get_csd+0x2e8>
800060c6:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800060ca:	31 a8       	mov	r8,26
800060cc:	f0 09 19 00 	cp.h	r9,r8
800060d0:	c0 81       	brne	800060e0 <sd_mmc_mci_get_csd+0x160>
800060d2:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800060d6:	4e 59       	lddpc	r9,80006268 <sd_mmc_mci_get_csd+0x2e8>
800060d8:	31 98       	mov	r8,25
800060da:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
800060de:	c1 08       	rjmp	800060fe <sd_mmc_mci_get_csd+0x17e>
800060e0:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800060e4:	4e 18       	lddpc	r8,80006268 <sd_mmc_mci_get_csd+0x2e8>
800060e6:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800060ea:	33 48       	mov	r8,52
800060ec:	f0 09 19 00 	cp.h	r9,r8
800060f0:	c0 71       	brne	800060fe <sd_mmc_mci_get_csd+0x17e>
800060f2:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800060f6:	4d d9       	lddpc	r9,80006268 <sd_mmc_mci_get_csd+0x2e8>
800060f8:	33 28       	mov	r8,50
800060fa:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
800060fe:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80006102:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006106:	4d 98       	lddpc	r8,80006268 <sd_mmc_mci_get_csd+0x2e8>
80006108:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
8000610c:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80006110:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80006114:	a1 78       	lsl	r8,0x1
80006116:	ee 08 00 08 	add	r8,r7,r8
8000611a:	f1 08 ff d8 	ld.sh	r8,r8[-40]
8000611e:	f2 08 02 48 	mul	r8,r9,r8
80006122:	5c 88       	casts.h	r8
80006124:	4d 19       	lddpc	r9,80006268 <sd_mmc_mci_get_csd+0x2e8>
80006126:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
8000612a:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8000612e:	4c e9       	lddpc	r9,80006264 <sd_mmc_mci_get_csd+0x2e4>
80006130:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006134:	e2 18 00 10 	andl	r8,0x10,COH
80006138:	c2 10       	breq	8000617a <sd_mmc_mci_get_csd+0x1fa>
8000613a:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000613e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006142:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80006146:	5c 58       	castu.b	r8
80006148:	f0 0a 15 10 	lsl	r10,r8,0x10
8000614c:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80006150:	5c 78       	castu.h	r8
80006152:	f4 08 00 08 	add	r8,r10,r8
80006156:	10 9a       	mov	r10,r8
80006158:	4c 58       	lddpc	r8,8000626c <sd_mmc_mci_get_csd+0x2ec>
8000615a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000615e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006162:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80006166:	4c 28       	lddpc	r8,8000626c <sd_mmc_mci_get_csd+0x2ec>
80006168:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000616c:	2f f8       	sub	r8,-1
8000616e:	f0 0a 15 0a 	lsl	r10,r8,0xa
80006172:	4b f8       	lddpc	r8,8000626c <sd_mmc_mci_get_csd+0x2ec>
80006174:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80006178:	c5 e8       	rjmp	80006234 <sd_mmc_mci_get_csd+0x2b4>
8000617a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000617e:	f1 d8 c2 c4 	bfextu	r8,r8,0x16,0x4
80006182:	5c 58       	castu.b	r8
80006184:	ef 68 ff ff 	st.b	r7[-1],r8
80006188:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000618c:	30 88       	mov	r8,8
8000618e:	f0 09 18 00 	cp.b	r9,r8
80006192:	e0 8b 00 04 	brhi	8000619a <sd_mmc_mci_get_csd+0x21a>
80006196:	30 08       	mov	r8,0
80006198:	c4 f8       	rjmp	80006236 <sd_mmc_mci_get_csd+0x2b6>
8000619a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000619e:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
800061a2:	5c 58       	castu.b	r8
800061a4:	ef 68 ff ff 	st.b	r7[-1],r8
800061a8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800061ac:	30 88       	mov	r8,8
800061ae:	f0 09 18 00 	cp.b	r9,r8
800061b2:	e0 8b 00 04 	brhi	800061ba <sd_mmc_mci_get_csd+0x23a>
800061b6:	30 08       	mov	r8,0
800061b8:	c3 f8       	rjmp	80006236 <sd_mmc_mci_get_csd+0x2b6>
800061ba:	ee f8 ff e8 	ld.w	r8,r7[-24]
800061be:	f1 d8 c1 e3 	bfextu	r8,r8,0xf,0x3
800061c2:	5c 58       	castu.b	r8
800061c4:	2f e8       	sub	r8,-2
800061c6:	30 19       	mov	r9,1
800061c8:	f2 08 09 48 	lsl	r8,r9,r8
800061cc:	ef 48 ff f4 	st.w	r7[-12],r8
800061d0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800061d4:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
800061d8:	5c 58       	castu.b	r8
800061da:	30 19       	mov	r9,1
800061dc:	f2 08 09 48 	lsl	r8,r9,r8
800061e0:	ef 48 ff f0 	st.w	r7[-16],r8
800061e4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800061e8:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
800061ec:	5c 88       	casts.h	r8
800061ee:	5c 78       	castu.h	r8
800061f0:	a3 68       	lsl	r8,0x2
800061f2:	ef 48 ff f8 	st.w	r7[-8],r8
800061f6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800061fa:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
800061fe:	5c 58       	castu.b	r8
80006200:	10 99       	mov	r9,r8
80006202:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006206:	f2 08 00 08 	add	r8,r9,r8
8000620a:	f0 c9 ff ff 	sub	r9,r8,-1
8000620e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006212:	f2 08 02 48 	mul	r8,r9,r8
80006216:	ef 48 ff f8 	st.w	r7[-8],r8
8000621a:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000621e:	ee fa ff f0 	ld.w	r10,r7[-16]
80006222:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006226:	f4 08 02 48 	mul	r8,r10,r8
8000622a:	f0 0a 16 09 	lsr	r10,r8,0x9
8000622e:	49 08       	lddpc	r8,8000626c <sd_mmc_mci_get_csd+0x2ec>
80006230:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80006234:	30 18       	mov	r8,1
80006236:	10 9c       	mov	r12,r8
80006238:	2f 1d       	sub	sp,-60
8000623a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000623e:	00 00       	add	r0,r0
80006240:	80 00       	ld.sh	r0,r0[0x0]
80006242:	f0 bc       	*unknown*
80006244:	80 00       	ld.sh	r0,r0[0x0]
80006246:	e7 9a       	*unknown*
80006248:	80 00       	ld.sh	r0,r0[0x0]
8000624a:	f0 c4 00 00 	sub	r4,r8,0
8000624e:	0b d8       	ld.ub	r8,r5[0x5]
80006250:	00 00       	add	r0,r0
80006252:	01 34       	ld.ub	r4,r0++
80006254:	80 00       	ld.sh	r0,r0[0x0]
80006256:	94 d0       	ld.uh	r0,r10[0xa]
80006258:	00 00       	add	r0,r0
8000625a:	09 c8       	ld.ub	r8,r4[0x4]
8000625c:	80 00       	ld.sh	r0,r0[0x0]
8000625e:	93 38       	st.w	r9[0xc],r8
80006260:	80 00       	ld.sh	r0,r0[0x0]
80006262:	94 70       	ld.sh	r0,r10[0xe]
80006264:	00 00       	add	r0,r0
80006266:	0d e0       	ld.ub	r0,r6[0x6]
80006268:	00 00       	add	r0,r0
8000626a:	0b da       	ld.ub	r10,r5[0x5]
8000626c:	00 00       	add	r0,r0
8000626e:	09 d0       	ld.ub	r0,r4[0x5]

80006270 <sd_mmc_get_ext_csd>:
80006270:	eb cd 40 80 	pushm	r7,lr
80006274:	1a 97       	mov	r7,sp
80006276:	20 ad       	sub	sp,40
80006278:	18 98       	mov	r8,r12
8000627a:	ef 68 ff d8 	st.b	r7[-40],r8
8000627e:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006282:	30 18       	mov	r8,1
80006284:	f0 09 18 00 	cp.b	r9,r8
80006288:	e0 88 00 04 	brls	80006290 <sd_mmc_get_ext_csd+0x20>
8000628c:	30 08       	mov	r8,0
8000628e:	cb e8       	rjmp	8000640a <sd_mmc_get_ext_csd+0x19a>
80006290:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80006294:	4e 09       	lddpc	r9,80006414 <sd_mmc_get_ext_csd+0x1a4>
80006296:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000629a:	10 9a       	mov	r10,r8
8000629c:	ef 39 ff d8 	ld.ub	r9,r7[-40]
800062a0:	4d e8       	lddpc	r8,80006418 <sd_mmc_get_ext_csd+0x1a8>
800062a2:	70 08       	ld.w	r8,r8[0x0]
800062a4:	12 9b       	mov	r11,r9
800062a6:	10 9c       	mov	r12,r8
800062a8:	f0 1f 00 5d 	mcall	8000641c <sd_mmc_get_ext_csd+0x1ac>
800062ac:	4d b8       	lddpc	r8,80006418 <sd_mmc_get_ext_csd+0x1a8>
800062ae:	70 08       	ld.w	r8,r8[0x0]
800062b0:	e0 6b 02 00 	mov	r11,512
800062b4:	10 9c       	mov	r12,r8
800062b6:	f0 1f 00 5b 	mcall	80006420 <sd_mmc_get_ext_csd+0x1b0>
800062ba:	4d 88       	lddpc	r8,80006418 <sd_mmc_get_ext_csd+0x1a8>
800062bc:	70 08       	ld.w	r8,r8[0x0]
800062be:	30 1b       	mov	r11,1
800062c0:	10 9c       	mov	r12,r8
800062c2:	f0 1f 00 59 	mcall	80006424 <sd_mmc_get_ext_csd+0x1b4>
800062c6:	4d 58       	lddpc	r8,80006418 <sd_mmc_get_ext_csd+0x1a8>
800062c8:	70 08       	ld.w	r8,r8[0x0]
800062ca:	30 0a       	mov	r10,0
800062cc:	e4 7b 10 48 	mov	r11,331848
800062d0:	10 9c       	mov	r12,r8
800062d2:	f0 1f 00 56 	mcall	80006428 <sd_mmc_get_ext_csd+0x1b8>
800062d6:	18 98       	mov	r8,r12
800062d8:	58 08       	cp.w	r8,0
800062da:	c0 30       	breq	800062e0 <sd_mmc_get_ext_csd+0x70>
800062dc:	30 08       	mov	r8,0
800062de:	c9 68       	rjmp	8000640a <sd_mmc_get_ext_csd+0x19a>
800062e0:	34 08       	mov	r8,64
800062e2:	ef 68 ff e3 	st.b	r7[-29],r8
800062e6:	c8 a8       	rjmp	800063fa <sd_mmc_get_ext_csd+0x18a>
800062e8:	4c c8       	lddpc	r8,80006418 <sd_mmc_get_ext_csd+0x1a8>
800062ea:	70 08       	ld.w	r8,r8[0x0]
800062ec:	ef 48 ff e4 	st.w	r7[-28],r8
800062f0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800062f4:	ef 48 ff e8 	st.w	r7[-24],r8
800062f8:	4c d8       	lddpc	r8,8000642c <sd_mmc_get_ext_csd+0x1bc>
800062fa:	70 08       	ld.w	r8,r8[0x0]
800062fc:	10 99       	mov	r9,r8
800062fe:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006302:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006306:	71 08       	ld.w	r8,r8[0x40]
80006308:	f3 e8 10 08 	or	r8,r9,r8
8000630c:	10 99       	mov	r9,r8
8000630e:	4c 88       	lddpc	r8,8000642c <sd_mmc_get_ext_csd+0x1bc>
80006310:	91 09       	st.w	r8[0x0],r9
80006312:	4c 78       	lddpc	r8,8000642c <sd_mmc_get_ext_csd+0x1bc>
80006314:	70 08       	ld.w	r8,r8[0x0]
80006316:	e2 18 00 02 	andl	r8,0x2,COH
8000631a:	5f 18       	srne	r8
8000631c:	58 08       	cp.w	r8,0
8000631e:	ce 50       	breq	800062e8 <sd_mmc_get_ext_csd+0x78>
80006320:	4b e8       	lddpc	r8,80006418 <sd_mmc_get_ext_csd+0x1a8>
80006322:	70 08       	ld.w	r8,r8[0x0]
80006324:	ef 48 ff ec 	st.w	r7[-20],r8
80006328:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000632c:	70 c8       	ld.w	r8,r8[0x30]
8000632e:	4b b8       	lddpc	r8,80006418 <sd_mmc_get_ext_csd+0x1a8>
80006330:	70 08       	ld.w	r8,r8[0x0]
80006332:	ef 48 ff f0 	st.w	r7[-16],r8
80006336:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000633a:	ef 48 ff f4 	st.w	r7[-12],r8
8000633e:	4b c8       	lddpc	r8,8000642c <sd_mmc_get_ext_csd+0x1bc>
80006340:	70 08       	ld.w	r8,r8[0x0]
80006342:	10 99       	mov	r9,r8
80006344:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006348:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000634c:	71 08       	ld.w	r8,r8[0x40]
8000634e:	f3 e8 10 08 	or	r8,r9,r8
80006352:	10 99       	mov	r9,r8
80006354:	4b 68       	lddpc	r8,8000642c <sd_mmc_get_ext_csd+0x1bc>
80006356:	91 09       	st.w	r8[0x0],r9
80006358:	4b 58       	lddpc	r8,8000642c <sd_mmc_get_ext_csd+0x1bc>
8000635a:	70 08       	ld.w	r8,r8[0x0]
8000635c:	e2 18 00 02 	andl	r8,0x2,COH
80006360:	5f 18       	srne	r8
80006362:	58 08       	cp.w	r8,0
80006364:	ce 50       	breq	8000632e <sd_mmc_get_ext_csd+0xbe>
80006366:	ef 39 ff e3 	ld.ub	r9,r7[-29]
8000636a:	32 68       	mov	r8,38
8000636c:	f0 09 18 00 	cp.b	r9,r8
80006370:	c1 c1       	brne	800063a8 <sd_mmc_get_ext_csd+0x138>
80006372:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80006376:	4a f9       	lddpc	r9,80006430 <sd_mmc_get_ext_csd+0x1c0>
80006378:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000637c:	e2 18 00 20 	andl	r8,0x20,COH
80006380:	c1 40       	breq	800063a8 <sd_mmc_get_ext_csd+0x138>
80006382:	4a 68       	lddpc	r8,80006418 <sd_mmc_get_ext_csd+0x1a8>
80006384:	70 08       	ld.w	r8,r8[0x0]
80006386:	ef 48 ff f8 	st.w	r7[-8],r8
8000638a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000638e:	70 c8       	ld.w	r8,r8[0x30]
80006390:	ef 48 ff dc 	st.w	r7[-36],r8
80006394:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80006398:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000639c:	5c b8       	swap.b	r8
8000639e:	10 9a       	mov	r10,r8
800063a0:	4a 58       	lddpc	r8,80006434 <sd_mmc_get_ext_csd+0x1c4>
800063a2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800063a6:	c2 58       	rjmp	800063f0 <sd_mmc_get_ext_csd+0x180>
800063a8:	49 c8       	lddpc	r8,80006418 <sd_mmc_get_ext_csd+0x1a8>
800063aa:	70 08       	ld.w	r8,r8[0x0]
800063ac:	ef 48 ff fc 	st.w	r7[-4],r8
800063b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063b4:	70 c8       	ld.w	r8,r8[0x30]
800063b6:	ef 48 ff dc 	st.w	r7[-36],r8
800063ba:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800063be:	32 88       	mov	r8,40
800063c0:	f0 09 18 00 	cp.b	r9,r8
800063c4:	c1 61       	brne	800063f0 <sd_mmc_get_ext_csd+0x180>
800063c6:	ee c8 00 24 	sub	r8,r7,36
800063ca:	11 88       	ld.ub	r8,r8[0x0]
800063cc:	e2 18 00 02 	andl	r8,0x2,COH
800063d0:	c0 90       	breq	800063e2 <sd_mmc_get_ext_csd+0x172>
800063d2:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800063d6:	49 99       	lddpc	r9,80006438 <sd_mmc_get_ext_csd+0x1c8>
800063d8:	fe 78 cb 20 	mov	r8,-13536
800063dc:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
800063e0:	c0 88       	rjmp	800063f0 <sd_mmc_get_ext_csd+0x180>
800063e2:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800063e6:	49 59       	lddpc	r9,80006438 <sd_mmc_get_ext_csd+0x1c8>
800063e8:	e0 68 65 90 	mov	r8,26000
800063ec:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
800063f0:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800063f4:	20 18       	sub	r8,1
800063f6:	ef 68 ff e3 	st.b	r7[-29],r8
800063fa:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800063fe:	30 08       	mov	r8,0
80006400:	f0 09 18 00 	cp.b	r9,r8
80006404:	fe 91 ff 72 	brne	800062e8 <sd_mmc_get_ext_csd+0x78>
80006408:	30 18       	mov	r8,1
8000640a:	10 9c       	mov	r12,r8
8000640c:	2f 6d       	sub	sp,-40
8000640e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006412:	00 00       	add	r0,r0
80006414:	00 00       	add	r0,r0
80006416:	0b d8       	ld.ub	r8,r5[0x5]
80006418:	00 00       	add	r0,r0
8000641a:	01 34       	ld.ub	r4,r0++
8000641c:	80 00       	ld.sh	r0,r0[0x0]
8000641e:	94 d0       	ld.uh	r0,r10[0xa]
80006420:	80 00       	ld.sh	r0,r0[0x0]
80006422:	92 b8       	ld.uh	r8,r9[0x6]
80006424:	80 00       	ld.sh	r0,r0[0x0]
80006426:	93 02       	st.w	r9[0x0],r2
80006428:	80 00       	ld.sh	r0,r0[0x0]
8000642a:	93 38       	st.w	r9[0xc],r8
8000642c:	00 00       	add	r0,r0
8000642e:	07 b0       	ld.ub	r0,r3[0x3]
80006430:	00 00       	add	r0,r0
80006432:	0d e0       	ld.ub	r0,r6[0x6]
80006434:	00 00       	add	r0,r0
80006436:	09 d0       	ld.ub	r0,r4[0x5]
80006438:	00 00       	add	r0,r0
8000643a:	0b da       	ld.ub	r10,r5[0x5]

8000643c <sd_mmc_set_block_len>:
8000643c:	eb cd 40 80 	pushm	r7,lr
80006440:	1a 97       	mov	r7,sp
80006442:	20 2d       	sub	sp,8
80006444:	18 99       	mov	r9,r12
80006446:	16 98       	mov	r8,r11
80006448:	ef 69 ff fc 	st.b	r7[-4],r9
8000644c:	ef 58 ff f8 	st.h	r7[-8],r8
80006450:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006454:	30 18       	mov	r8,1
80006456:	f0 09 18 00 	cp.b	r9,r8
8000645a:	e0 88 00 04 	brls	80006462 <sd_mmc_set_block_len+0x26>
8000645e:	30 08       	mov	r8,0
80006460:	c3 c8       	rjmp	800064d8 <sd_mmc_set_block_len+0x9c>
80006462:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006466:	49 f9       	lddpc	r9,800064e0 <sd_mmc_set_block_len+0xa4>
80006468:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000646c:	10 9a       	mov	r10,r8
8000646e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006472:	49 d8       	lddpc	r8,800064e4 <sd_mmc_set_block_len+0xa8>
80006474:	70 08       	ld.w	r8,r8[0x0]
80006476:	12 9b       	mov	r11,r9
80006478:	10 9c       	mov	r12,r8
8000647a:	f0 1f 00 1c 	mcall	800064e8 <sd_mmc_set_block_len+0xac>
8000647e:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80006482:	49 98       	lddpc	r8,800064e4 <sd_mmc_set_block_len+0xa8>
80006484:	70 08       	ld.w	r8,r8[0x0]
80006486:	12 9a       	mov	r10,r9
80006488:	e0 6b 10 50 	mov	r11,4176
8000648c:	10 9c       	mov	r12,r8
8000648e:	f0 1f 00 18 	mcall	800064ec <sd_mmc_set_block_len+0xb0>
80006492:	18 98       	mov	r8,r12
80006494:	58 08       	cp.w	r8,0
80006496:	c0 30       	breq	8000649c <sd_mmc_set_block_len+0x60>
80006498:	30 08       	mov	r8,0
8000649a:	c1 f8       	rjmp	800064d8 <sd_mmc_set_block_len+0x9c>
8000649c:	49 28       	lddpc	r8,800064e4 <sd_mmc_set_block_len+0xa8>
8000649e:	70 08       	ld.w	r8,r8[0x0]
800064a0:	10 9c       	mov	r12,r8
800064a2:	f0 1f 00 14 	mcall	800064f0 <sd_mmc_set_block_len+0xb4>
800064a6:	18 98       	mov	r8,r12
800064a8:	e4 18 e0 02 	andh	r8,0xe002
800064ac:	e0 18 0e 00 	andl	r8,0xe00
800064b0:	e0 48 08 00 	cp.w	r8,2048
800064b4:	c0 30       	breq	800064ba <sd_mmc_set_block_len+0x7e>
800064b6:	30 08       	mov	r8,0
800064b8:	c1 08       	rjmp	800064d8 <sd_mmc_set_block_len+0x9c>
800064ba:	ef 19 ff f8 	ld.uh	r9,r7[-8]
800064be:	48 a8       	lddpc	r8,800064e4 <sd_mmc_set_block_len+0xa8>
800064c0:	70 08       	ld.w	r8,r8[0x0]
800064c2:	12 9b       	mov	r11,r9
800064c4:	10 9c       	mov	r12,r8
800064c6:	f0 1f 00 0c 	mcall	800064f4 <sd_mmc_set_block_len+0xb8>
800064ca:	48 78       	lddpc	r8,800064e4 <sd_mmc_set_block_len+0xa8>
800064cc:	70 08       	ld.w	r8,r8[0x0]
800064ce:	30 1b       	mov	r11,1
800064d0:	10 9c       	mov	r12,r8
800064d2:	f0 1f 00 0a 	mcall	800064f8 <sd_mmc_set_block_len+0xbc>
800064d6:	30 18       	mov	r8,1
800064d8:	10 9c       	mov	r12,r8
800064da:	2f ed       	sub	sp,-8
800064dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800064e0:	00 00       	add	r0,r0
800064e2:	0b d8       	ld.ub	r8,r5[0x5]
800064e4:	00 00       	add	r0,r0
800064e6:	01 34       	ld.ub	r4,r0++
800064e8:	80 00       	ld.sh	r0,r0[0x0]
800064ea:	94 d0       	ld.uh	r0,r10[0xa]
800064ec:	80 00       	ld.sh	r0,r0[0x0]
800064ee:	93 38       	st.w	r9[0xc],r8
800064f0:	80 00       	ld.sh	r0,r0[0x0]
800064f2:	94 70       	ld.sh	r0,r10[0xe]
800064f4:	80 00       	ld.sh	r0,r0[0x0]
800064f6:	92 b8       	ld.uh	r8,r9[0x6]
800064f8:	80 00       	ld.sh	r0,r0[0x0]
800064fa:	93 02       	st.w	r9[0x0],r2

800064fc <sd_mmc_mci_init>:
800064fc:	eb cd 40 80 	pushm	r7,lr
80006500:	1a 97       	mov	r7,sp
80006502:	20 5d       	sub	sp,20
80006504:	18 98       	mov	r8,r12
80006506:	ef 4b ff f0 	st.w	r7[-16],r11
8000650a:	ef 4a ff ec 	st.w	r7[-20],r10
8000650e:	ef 68 ff f4 	st.b	r7[-12],r8
80006512:	fe 68 10 00 	mov	r8,-126976
80006516:	70 68       	ld.w	r8,r8[0x18]
80006518:	ef 48 ff fc 	st.w	r7[-4],r8
8000651c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006520:	30 09       	mov	r9,0
80006522:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80006526:	ef 48 ff fc 	st.w	r7[-4],r8
8000652a:	fe 68 10 00 	mov	r8,-126976
8000652e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006532:	91 69       	st.w	r8[0x18],r9
80006534:	fe 68 10 00 	mov	r8,-126976
80006538:	71 58       	ld.w	r8,r8[0x54]
8000653a:	ef 48 ff f8 	st.w	r7[-8],r8
8000653e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006542:	30 69       	mov	r9,6
80006544:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
80006548:	ef 48 ff f8 	st.w	r7[-8],r8
8000654c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006550:	30 29       	mov	r9,2
80006552:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
80006556:	ef 48 ff f8 	st.w	r7[-8],r8
8000655a:	fe 68 10 00 	mov	r8,-126976
8000655e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006562:	f1 49 00 54 	st.w	r8[84],r9
80006566:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000656a:	49 08       	lddpc	r8,800065a8 <sd_mmc_mci_init+0xac>
8000656c:	91 09       	st.w	r8[0x0],r9
8000656e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006572:	48 f8       	lddpc	r8,800065ac <sd_mmc_mci_init+0xb0>
80006574:	91 09       	st.w	r8[0x0],r9
80006576:	ee fa ff f0 	ld.w	r10,r7[-16]
8000657a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000657e:	48 d8       	lddpc	r8,800065b0 <sd_mmc_mci_init+0xb4>
80006580:	70 08       	ld.w	r8,r8[0x0]
80006582:	12 9b       	mov	r11,r9
80006584:	10 9c       	mov	r12,r8
80006586:	f0 1f 00 0c 	mcall	800065b4 <sd_mmc_mci_init+0xb8>
8000658a:	18 98       	mov	r8,r12
8000658c:	58 08       	cp.w	r8,0
8000658e:	c0 30       	breq	80006594 <sd_mmc_mci_init+0x98>
80006590:	30 08       	mov	r8,0
80006592:	c0 78       	rjmp	800065a0 <sd_mmc_mci_init+0xa4>
80006594:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006598:	10 9c       	mov	r12,r8
8000659a:	f0 1f 00 08 	mcall	800065b8 <sd_mmc_mci_init+0xbc>
8000659e:	30 18       	mov	r8,1
800065a0:	10 9c       	mov	r12,r8
800065a2:	2f bd       	sub	sp,-20
800065a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800065a8:	00 00       	add	r0,r0
800065aa:	06 18       	sub	r8,r3
800065ac:	00 00       	add	r0,r0
800065ae:	06 1c       	sub	r12,r3
800065b0:	00 00       	add	r0,r0
800065b2:	01 34       	ld.ub	r4,r0++
800065b4:	80 00       	ld.sh	r0,r0[0x0]
800065b6:	92 04       	ld.sh	r4,r9[0x0]
800065b8:	80 00       	ld.sh	r0,r0[0x0]
800065ba:	65 bc       	ld.w	r12,r2[0x6c]

800065bc <sd_mmc_mci_card_init>:
800065bc:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
800065c0:	1a 97       	mov	r7,sp
800065c2:	21 7d       	sub	sp,92
800065c4:	18 98       	mov	r8,r12
800065c6:	ef 68 ff a4 	st.b	r7[-92],r8
800065ca:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800065ce:	fe f9 08 7a 	ld.w	r9,pc[2170]
800065d2:	f2 08 07 08 	ld.ub	r8,r9[r8]
800065d6:	58 08       	cp.w	r8,0
800065d8:	c0 40       	breq	800065e0 <sd_mmc_mci_card_init+0x24>
800065da:	30 18       	mov	r8,1
800065dc:	e0 8f 04 31 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
800065e0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800065e4:	fe fa 08 68 	ld.w	r10,pc[2152]
800065e8:	30 08       	mov	r8,0
800065ea:	f4 09 0b 08 	st.b	r10[r9],r8
800065ee:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800065f2:	fe fa 08 5e 	ld.w	r10,pc[2142]
800065f6:	30 08       	mov	r8,0
800065f8:	f4 09 0b 08 	st.b	r10[r9],r8
800065fc:	fe f8 08 58 	ld.w	r8,pc[2136]
80006600:	70 0a       	ld.w	r10,r8[0x0]
80006602:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006606:	fe f8 08 52 	ld.w	r8,pc[2130]
8000660a:	70 08       	ld.w	r8,r8[0x0]
8000660c:	12 9b       	mov	r11,r9
8000660e:	10 9c       	mov	r12,r8
80006610:	f0 1f 02 13 	mcall	80006e5c <sd_mmc_mci_card_init+0x8a0>
80006614:	fe f8 08 44 	ld.w	r8,pc[2116]
80006618:	70 08       	ld.w	r8,r8[0x0]
8000661a:	3f fa       	mov	r10,-1
8000661c:	e0 6b 01 00 	mov	r11,256
80006620:	10 9c       	mov	r12,r8
80006622:	f0 1f 02 10 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
80006626:	18 98       	mov	r8,r12
80006628:	58 08       	cp.w	r8,0
8000662a:	c0 40       	breq	80006632 <sd_mmc_mci_card_init+0x76>
8000662c:	30 08       	mov	r8,0
8000662e:	e0 8f 04 08 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
80006632:	fe f8 08 26 	ld.w	r8,pc[2086]
80006636:	70 08       	ld.w	r8,r8[0x0]
80006638:	3f fa       	mov	r10,-1
8000663a:	30 0b       	mov	r11,0
8000663c:	10 9c       	mov	r12,r8
8000663e:	f0 1f 02 09 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
80006642:	18 98       	mov	r8,r12
80006644:	58 08       	cp.w	r8,0
80006646:	c0 50       	breq	80006650 <sd_mmc_mci_card_init+0x94>
80006648:	30 08       	mov	r8,0
8000664a:	e0 8f 03 fa 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
8000664e:	d7 03       	nop
80006650:	fe f8 08 08 	ld.w	r8,pc[2056]
80006654:	70 08       	ld.w	r8,r8[0x0]
80006656:	e0 6a 80 00 	mov	r10,32768
8000665a:	ea 1a c0 ff 	orh	r10,0xc0ff
8000665e:	e0 6b 08 41 	mov	r11,2113
80006662:	10 9c       	mov	r12,r8
80006664:	f0 1f 01 ff 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
80006668:	18 98       	mov	r8,r12
8000666a:	58 08       	cp.w	r8,0
8000666c:	c2 a1       	brne	800066c0 <sd_mmc_mci_card_init+0x104>
8000666e:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006672:	fe fa 07 da 	ld.w	r10,pc[2010]
80006676:	30 18       	mov	r8,1
80006678:	f4 09 0b 08 	st.b	r10[r9],r8
8000667c:	fe f8 07 dc 	ld.w	r8,pc[2012]
80006680:	70 08       	ld.w	r8,r8[0x0]
80006682:	10 9c       	mov	r12,r8
80006684:	f0 1f 01 f8 	mcall	80006e64 <sd_mmc_mci_card_init+0x8a8>
80006688:	18 98       	mov	r8,r12
8000668a:	ef 48 ff c0 	st.w	r7[-64],r8
8000668e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006692:	58 08       	cp.w	r8,0
80006694:	cd d4       	brge	8000664e <sd_mmc_mci_card_init+0x92>
80006696:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000669a:	e6 18 40 00 	andh	r8,0x4000,COH
8000669e:	e0 80 00 97 	breq	800067cc <sd_mmc_mci_card_init+0x210>
800066a2:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800066a6:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800066aa:	fe fa 07 a2 	ld.w	r10,pc[1954]
800066ae:	f4 08 07 08 	ld.ub	r8,r10[r8]
800066b2:	a5 b8       	sbr	r8,0x5
800066b4:	5c 58       	castu.b	r8
800066b6:	fe fa 07 96 	ld.w	r10,pc[1942]
800066ba:	f4 09 0b 08 	st.b	r10[r9],r8
800066be:	c8 88       	rjmp	800067ce <sd_mmc_mci_card_init+0x212>
800066c0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800066c4:	fe fa 07 88 	ld.w	r10,pc[1928]
800066c8:	30 28       	mov	r8,2
800066ca:	f4 09 0b 08 	st.b	r10[r9],r8
800066ce:	fe f8 07 8a 	ld.w	r8,pc[1930]
800066d2:	70 08       	ld.w	r8,r8[0x0]
800066d4:	e0 6a 01 aa 	mov	r10,426
800066d8:	e0 6b 10 48 	mov	r11,4168
800066dc:	10 9c       	mov	r12,r8
800066de:	f0 1f 01 e1 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
800066e2:	18 98       	mov	r8,r12
800066e4:	58 08       	cp.w	r8,0
800066e6:	c1 b1       	brne	8000671c <sd_mmc_mci_card_init+0x160>
800066e8:	fe f8 07 70 	ld.w	r8,pc[1904]
800066ec:	70 08       	ld.w	r8,r8[0x0]
800066ee:	10 9c       	mov	r12,r8
800066f0:	f0 1f 01 dd 	mcall	80006e64 <sd_mmc_mci_card_init+0x8a8>
800066f4:	18 98       	mov	r8,r12
800066f6:	e0 48 01 aa 	cp.w	r8,426
800066fa:	c1 11       	brne	8000671c <sd_mmc_mci_card_init+0x160>
800066fc:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006700:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006704:	fe fa 07 48 	ld.w	r10,pc[1864]
80006708:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000670c:	a3 b8       	sbr	r8,0x3
8000670e:	5c 58       	castu.b	r8
80006710:	fe fa 07 3c 	ld.w	r10,pc[1852]
80006714:	f4 09 0b 08 	st.b	r10[r9],r8
80006718:	c0 28       	rjmp	8000671c <sd_mmc_mci_card_init+0x160>
8000671a:	d7 03       	nop
8000671c:	fe f8 07 3c 	ld.w	r8,pc[1852]
80006720:	70 08       	ld.w	r8,r8[0x0]
80006722:	30 0a       	mov	r10,0
80006724:	e0 6b 10 77 	mov	r11,4215
80006728:	10 9c       	mov	r12,r8
8000672a:	f0 1f 01 ce 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
8000672e:	18 98       	mov	r8,r12
80006730:	58 08       	cp.w	r8,0
80006732:	c0 40       	breq	8000673a <sd_mmc_mci_card_init+0x17e>
80006734:	30 08       	mov	r8,0
80006736:	e0 8f 03 84 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
8000673a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000673e:	fe f9 07 0e 	ld.w	r9,pc[1806]
80006742:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006746:	e2 18 00 08 	andl	r8,0x8,COH
8000674a:	c1 00       	breq	8000676a <sd_mmc_mci_card_init+0x1ae>
8000674c:	fe f8 07 0c 	ld.w	r8,pc[1804]
80006750:	70 08       	ld.w	r8,r8[0x0]
80006752:	fc 1a c0 10 	movh	r10,0xc010
80006756:	36 9b       	mov	r11,105
80006758:	10 9c       	mov	r12,r8
8000675a:	f0 1f 01 c2 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
8000675e:	18 98       	mov	r8,r12
80006760:	58 08       	cp.w	r8,0
80006762:	c1 30       	breq	80006788 <sd_mmc_mci_card_init+0x1cc>
80006764:	30 08       	mov	r8,0
80006766:	e0 8f 03 6c 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
8000676a:	fe f8 06 ee 	ld.w	r8,pc[1774]
8000676e:	70 08       	ld.w	r8,r8[0x0]
80006770:	fc 1a 80 10 	movh	r10,0x8010
80006774:	36 9b       	mov	r11,105
80006776:	10 9c       	mov	r12,r8
80006778:	f0 1f 01 ba 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
8000677c:	18 98       	mov	r8,r12
8000677e:	58 08       	cp.w	r8,0
80006780:	c0 50       	breq	8000678a <sd_mmc_mci_card_init+0x1ce>
80006782:	30 08       	mov	r8,0
80006784:	e0 8f 03 5d 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
80006788:	d7 03       	nop
8000678a:	fe f8 06 ce 	ld.w	r8,pc[1742]
8000678e:	70 08       	ld.w	r8,r8[0x0]
80006790:	10 9c       	mov	r12,r8
80006792:	f0 1f 01 b5 	mcall	80006e64 <sd_mmc_mci_card_init+0x8a8>
80006796:	18 98       	mov	r8,r12
80006798:	ef 48 ff c0 	st.w	r7[-64],r8
8000679c:	ee f8 ff c0 	ld.w	r8,r7[-64]
800067a0:	58 08       	cp.w	r8,0
800067a2:	cb c4       	brge	8000671a <sd_mmc_mci_card_init+0x15e>
800067a4:	ee f8 ff c0 	ld.w	r8,r7[-64]
800067a8:	e6 18 40 00 	andh	r8,0x4000,COH
800067ac:	c1 10       	breq	800067ce <sd_mmc_mci_card_init+0x212>
800067ae:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800067b2:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800067b6:	fe fa 06 96 	ld.w	r10,pc[1686]
800067ba:	f4 08 07 08 	ld.ub	r8,r10[r8]
800067be:	a5 a8       	sbr	r8,0x4
800067c0:	5c 58       	castu.b	r8
800067c2:	fe fa 06 8a 	ld.w	r10,pc[1674]
800067c6:	f4 09 0b 08 	st.b	r10[r9],r8
800067ca:	c0 28       	rjmp	800067ce <sd_mmc_mci_card_init+0x212>
800067cc:	d7 03       	nop
800067ce:	fe f8 06 8a 	ld.w	r8,pc[1674]
800067d2:	70 08       	ld.w	r8,r8[0x0]
800067d4:	30 0a       	mov	r10,0
800067d6:	e0 6b 00 82 	mov	r11,130
800067da:	10 9c       	mov	r12,r8
800067dc:	f0 1f 01 a1 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
800067e0:	18 98       	mov	r8,r12
800067e2:	58 08       	cp.w	r8,0
800067e4:	c0 40       	breq	800067ec <sd_mmc_mci_card_init+0x230>
800067e6:	30 08       	mov	r8,0
800067e8:	e0 8f 03 2b 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
800067ec:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800067f0:	fe f9 06 5c 	ld.w	r9,pc[1628]
800067f4:	f2 08 07 08 	ld.ub	r8,r9[r8]
800067f8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800067fc:	5c 58       	castu.b	r8
800067fe:	c1 90       	breq	80006830 <sd_mmc_mci_card_init+0x274>
80006800:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006804:	fe f8 06 64 	ld.w	r8,pc[1636]
80006808:	e0 7a ff ff 	mov	r10,131071
8000680c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80006810:	fe f8 06 48 	ld.w	r8,pc[1608]
80006814:	70 08       	ld.w	r8,r8[0x0]
80006816:	e0 7a ff ff 	mov	r10,131071
8000681a:	e0 6b 10 43 	mov	r11,4163
8000681e:	10 9c       	mov	r12,r8
80006820:	f0 1f 01 90 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
80006824:	18 98       	mov	r8,r12
80006826:	58 08       	cp.w	r8,0
80006828:	c1 30       	breq	8000684e <sd_mmc_mci_card_init+0x292>
8000682a:	30 08       	mov	r8,0
8000682c:	e0 8f 03 09 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
80006830:	fe f8 06 28 	ld.w	r8,pc[1576]
80006834:	70 08       	ld.w	r8,r8[0x0]
80006836:	30 0a       	mov	r10,0
80006838:	e0 6b 10 43 	mov	r11,4163
8000683c:	10 9c       	mov	r12,r8
8000683e:	f0 1f 01 89 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
80006842:	18 98       	mov	r8,r12
80006844:	58 08       	cp.w	r8,0
80006846:	c0 50       	breq	80006850 <sd_mmc_mci_card_init+0x294>
80006848:	30 08       	mov	r8,0
8000684a:	e0 8f 02 fa 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
8000684e:	d7 03       	nop
80006850:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006854:	fe f9 05 f8 	ld.w	r9,pc[1528]
80006858:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000685c:	e2 18 00 02 	andl	r8,0x2,COH
80006860:	c1 10       	breq	80006882 <sd_mmc_mci_card_init+0x2c6>
80006862:	ef 36 ff a4 	ld.ub	r6,r7[-92]
80006866:	fe f8 05 f2 	ld.w	r8,pc[1522]
8000686a:	70 08       	ld.w	r8,r8[0x0]
8000686c:	10 9c       	mov	r12,r8
8000686e:	f0 1f 01 7e 	mcall	80006e64 <sd_mmc_mci_card_init+0x8a8>
80006872:	18 98       	mov	r8,r12
80006874:	10 99       	mov	r9,r8
80006876:	e0 19 00 00 	andl	r9,0x0
8000687a:	fe f8 05 ee 	ld.w	r8,pc[1518]
8000687e:	f0 06 09 29 	st.w	r8[r6<<0x2],r9
80006882:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006886:	10 9c       	mov	r12,r8
80006888:	f0 1f 01 79 	mcall	80006e6c <sd_mmc_mci_card_init+0x8b0>
8000688c:	18 98       	mov	r8,r12
8000688e:	ec 18 00 01 	eorl	r8,0x1
80006892:	5c 58       	castu.b	r8
80006894:	c0 40       	breq	8000689c <sd_mmc_mci_card_init+0x2e0>
80006896:	30 08       	mov	r8,0
80006898:	e0 8f 02 d3 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
8000689c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800068a0:	fe f8 05 c8 	ld.w	r8,pc[1480]
800068a4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800068a8:	fe f8 05 b0 	ld.w	r8,pc[1456]
800068ac:	70 08       	ld.w	r8,r8[0x0]
800068ae:	12 9a       	mov	r10,r9
800068b0:	e0 6b 10 c7 	mov	r11,4295
800068b4:	10 9c       	mov	r12,r8
800068b6:	f0 1f 01 6b 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
800068ba:	18 98       	mov	r8,r12
800068bc:	58 08       	cp.w	r8,0
800068be:	c0 40       	breq	800068c6 <sd_mmc_mci_card_init+0x30a>
800068c0:	30 08       	mov	r8,0
800068c2:	e0 8f 02 be 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
800068c6:	fe f8 05 92 	ld.w	r8,pc[1426]
800068ca:	70 08       	ld.w	r8,r8[0x0]
800068cc:	10 9c       	mov	r12,r8
800068ce:	f0 1f 01 69 	mcall	80006e70 <sd_mmc_mci_card_init+0x8b4>
800068d2:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800068d6:	fe f9 05 76 	ld.w	r9,pc[1398]
800068da:	f2 08 07 08 	ld.ub	r8,r9[r8]
800068de:	e2 18 00 04 	andl	r8,0x4,COH
800068e2:	c0 e0       	breq	800068fe <sd_mmc_mci_card_init+0x342>
800068e4:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800068e8:	10 9c       	mov	r12,r8
800068ea:	f0 1f 01 63 	mcall	80006e74 <sd_mmc_mci_card_init+0x8b8>
800068ee:	18 98       	mov	r8,r12
800068f0:	ec 18 00 01 	eorl	r8,0x1
800068f4:	5c 58       	castu.b	r8
800068f6:	c0 40       	breq	800068fe <sd_mmc_mci_card_init+0x342>
800068f8:	30 08       	mov	r8,0
800068fa:	e0 8f 02 a2 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
800068fe:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006902:	fe f9 05 4a 	ld.w	r9,pc[1354]
80006906:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000690a:	e2 18 00 02 	andl	r8,0x2,COH
8000690e:	c4 00       	breq	8000698e <sd_mmc_mci_card_init+0x3d2>
80006910:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006914:	fe f8 05 54 	ld.w	r8,pc[1364]
80006918:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000691c:	fe f8 05 3c 	ld.w	r8,pc[1340]
80006920:	70 08       	ld.w	r8,r8[0x0]
80006922:	12 9a       	mov	r10,r9
80006924:	e0 6b 10 77 	mov	r11,4215
80006928:	10 9c       	mov	r12,r8
8000692a:	f0 1f 01 4e 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
8000692e:	18 98       	mov	r8,r12
80006930:	58 08       	cp.w	r8,0
80006932:	c0 40       	breq	8000693a <sd_mmc_mci_card_init+0x37e>
80006934:	30 08       	mov	r8,0
80006936:	e0 8f 02 84 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
8000693a:	fe f8 05 1e 	ld.w	r8,pc[1310]
8000693e:	70 08       	ld.w	r8,r8[0x0]
80006940:	30 2a       	mov	r10,2
80006942:	e0 6b 10 46 	mov	r11,4166
80006946:	10 9c       	mov	r12,r8
80006948:	f0 1f 01 46 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
8000694c:	18 98       	mov	r8,r12
8000694e:	58 08       	cp.w	r8,0
80006950:	c0 40       	breq	80006958 <sd_mmc_mci_card_init+0x39c>
80006952:	30 08       	mov	r8,0
80006954:	e0 8f 02 75 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
80006958:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000695c:	fe fa 04 f4 	ld.w	r10,pc[1268]
80006960:	30 28       	mov	r8,2
80006962:	f4 09 0b 08 	st.b	r10[r9],r8
80006966:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000696a:	fe f9 04 e6 	ld.w	r9,pc[1254]
8000696e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006972:	10 99       	mov	r9,r8
80006974:	fe f8 04 e4 	ld.w	r8,pc[1252]
80006978:	70 08       	ld.w	r8,r8[0x0]
8000697a:	12 9b       	mov	r11,r9
8000697c:	10 9c       	mov	r12,r8
8000697e:	f0 1f 01 3f 	mcall	80006e78 <sd_mmc_mci_card_init+0x8bc>
80006982:	18 98       	mov	r8,r12
80006984:	58 08       	cp.w	r8,0
80006986:	c4 00       	breq	80006a06 <sd_mmc_mci_card_init+0x44a>
80006988:	30 08       	mov	r8,0
8000698a:	e0 8f 02 5a 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
8000698e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006992:	fe f9 04 ba 	ld.w	r9,pc[1210]
80006996:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000699a:	e2 18 00 04 	andl	r8,0x4,COH
8000699e:	c3 50       	breq	80006a08 <sd_mmc_mci_card_init+0x44c>
800069a0:	fe f8 04 b8 	ld.w	r8,pc[1208]
800069a4:	70 08       	ld.w	r8,r8[0x0]
800069a6:	e0 6a 02 03 	mov	r10,515
800069aa:	ea 1a 03 b7 	orh	r10,0x3b7
800069ae:	e0 6b 10 c6 	mov	r11,4294
800069b2:	10 9c       	mov	r12,r8
800069b4:	f0 1f 01 2b 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
800069b8:	18 98       	mov	r8,r12
800069ba:	58 08       	cp.w	r8,0
800069bc:	c0 40       	breq	800069c4 <sd_mmc_mci_card_init+0x408>
800069be:	30 08       	mov	r8,0
800069c0:	e0 8f 02 3f 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
800069c4:	fe f8 04 94 	ld.w	r8,pc[1172]
800069c8:	70 08       	ld.w	r8,r8[0x0]
800069ca:	10 9c       	mov	r12,r8
800069cc:	f0 1f 01 29 	mcall	80006e70 <sd_mmc_mci_card_init+0x8b4>
800069d0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800069d4:	fe fa 04 7c 	ld.w	r10,pc[1148]
800069d8:	30 38       	mov	r8,3
800069da:	f4 09 0b 08 	st.b	r10[r9],r8
800069de:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800069e2:	fe f9 04 6e 	ld.w	r9,pc[1134]
800069e6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800069ea:	10 99       	mov	r9,r8
800069ec:	fe f8 04 6c 	ld.w	r8,pc[1132]
800069f0:	70 08       	ld.w	r8,r8[0x0]
800069f2:	12 9b       	mov	r11,r9
800069f4:	10 9c       	mov	r12,r8
800069f6:	f0 1f 01 21 	mcall	80006e78 <sd_mmc_mci_card_init+0x8bc>
800069fa:	18 98       	mov	r8,r12
800069fc:	58 08       	cp.w	r8,0
800069fe:	c0 50       	breq	80006a08 <sd_mmc_mci_card_init+0x44c>
80006a00:	30 08       	mov	r8,0
80006a02:	e0 8f 02 1e 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
80006a06:	d7 03       	nop
80006a08:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a0c:	fe f9 04 40 	ld.w	r9,pc[1088]
80006a10:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006a14:	e2 18 00 04 	andl	r8,0x4,COH
80006a18:	c1 90       	breq	80006a4a <sd_mmc_mci_card_init+0x48e>
80006a1a:	fe f8 04 3e 	ld.w	r8,pc[1086]
80006a1e:	70 08       	ld.w	r8,r8[0x0]
80006a20:	e0 6a 01 03 	mov	r10,259
80006a24:	ea 1a 03 b9 	orh	r10,0x3b9
80006a28:	e0 6b 10 c6 	mov	r11,4294
80006a2c:	10 9c       	mov	r12,r8
80006a2e:	f0 1f 01 0d 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
80006a32:	18 98       	mov	r8,r12
80006a34:	58 08       	cp.w	r8,0
80006a36:	c0 40       	breq	80006a3e <sd_mmc_mci_card_init+0x482>
80006a38:	30 08       	mov	r8,0
80006a3a:	e0 8f 02 02 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
80006a3e:	fe f8 04 1a 	ld.w	r8,pc[1050]
80006a42:	70 08       	ld.w	r8,r8[0x0]
80006a44:	10 9c       	mov	r12,r8
80006a46:	f0 1f 01 0b 	mcall	80006e70 <sd_mmc_mci_card_init+0x8b4>
80006a4a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a4e:	fe f9 03 fe 	ld.w	r9,pc[1022]
80006a52:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006a56:	e2 18 00 08 	andl	r8,0x8,COH
80006a5a:	e0 80 01 ae 	breq	80006db6 <sd_mmc_mci_card_init+0x7fa>
80006a5e:	fe f8 03 fa 	ld.w	r8,pc[1018]
80006a62:	70 08       	ld.w	r8,r8[0x0]
80006a64:	34 0b       	mov	r11,64
80006a66:	10 9c       	mov	r12,r8
80006a68:	f0 1f 01 05 	mcall	80006e7c <sd_mmc_mci_card_init+0x8c0>
80006a6c:	fe f8 03 ec 	ld.w	r8,pc[1004]
80006a70:	70 08       	ld.w	r8,r8[0x0]
80006a72:	30 1b       	mov	r11,1
80006a74:	10 9c       	mov	r12,r8
80006a76:	f0 1f 01 03 	mcall	80006e80 <sd_mmc_mci_card_init+0x8c4>
80006a7a:	fe f8 03 de 	ld.w	r8,pc[990]
80006a7e:	70 08       	ld.w	r8,r8[0x0]
80006a80:	30 1a       	mov	r10,1
80006a82:	e4 7b 10 46 	mov	r11,331846
80006a86:	10 9c       	mov	r12,r8
80006a88:	f0 1f 00 f6 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
80006a8c:	18 98       	mov	r8,r12
80006a8e:	58 08       	cp.w	r8,0
80006a90:	c0 40       	breq	80006a98 <sd_mmc_mci_card_init+0x4dc>
80006a92:	30 08       	mov	r8,0
80006a94:	e0 8f 01 d5 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
80006a98:	fe f8 03 c0 	ld.w	r8,pc[960]
80006a9c:	70 08       	ld.w	r8,r8[0x0]
80006a9e:	10 9c       	mov	r12,r8
80006aa0:	f0 1f 00 f4 	mcall	80006e70 <sd_mmc_mci_card_init+0x8b4>
80006aa4:	30 08       	mov	r8,0
80006aa6:	ef 68 ff c5 	st.b	r7[-59],r8
80006aaa:	30 08       	mov	r8,0
80006aac:	ef 68 ff c6 	st.b	r7[-58],r8
80006ab0:	c4 18       	rjmp	80006b32 <sd_mmc_mci_card_init+0x576>
80006ab2:	fe f8 03 a6 	ld.w	r8,pc[934]
80006ab6:	70 08       	ld.w	r8,r8[0x0]
80006ab8:	ef 48 ff c8 	st.w	r7[-56],r8
80006abc:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006ac0:	ef 48 ff cc 	st.w	r7[-52],r8
80006ac4:	fe f8 03 c0 	ld.w	r8,pc[960]
80006ac8:	70 08       	ld.w	r8,r8[0x0]
80006aca:	10 99       	mov	r9,r8
80006acc:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006ad0:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006ad4:	71 08       	ld.w	r8,r8[0x40]
80006ad6:	f3 e8 10 08 	or	r8,r9,r8
80006ada:	10 99       	mov	r9,r8
80006adc:	fe f8 03 a8 	ld.w	r8,pc[936]
80006ae0:	91 09       	st.w	r8[0x0],r9
80006ae2:	fe f8 03 a2 	ld.w	r8,pc[930]
80006ae6:	70 08       	ld.w	r8,r8[0x0]
80006ae8:	e2 18 00 02 	andl	r8,0x2,COH
80006aec:	5f 18       	srne	r8
80006aee:	58 08       	cp.w	r8,0
80006af0:	ce 10       	breq	80006ab2 <sd_mmc_mci_card_init+0x4f6>
80006af2:	fe f8 03 66 	ld.w	r8,pc[870]
80006af6:	70 08       	ld.w	r8,r8[0x0]
80006af8:	ef 48 ff d0 	st.w	r7[-48],r8
80006afc:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006b00:	70 c8       	ld.w	r8,r8[0x30]
80006b02:	ef 48 ff ac 	st.w	r7[-84],r8
80006b06:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006b0a:	31 08       	mov	r8,16
80006b0c:	f0 09 18 00 	cp.b	r9,r8
80006b10:	c0 c1       	brne	80006b28 <sd_mmc_mci_card_init+0x56c>
80006b12:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006b16:	b9 88       	lsr	r8,0x18
80006b18:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006b1c:	58 18       	cp.w	r8,1
80006b1e:	c1 21       	brne	80006b42 <sd_mmc_mci_card_init+0x586>
80006b20:	30 18       	mov	r8,1
80006b22:	ef 68 ff c5 	st.b	r7[-59],r8
80006b26:	c0 f8       	rjmp	80006b44 <sd_mmc_mci_card_init+0x588>
80006b28:	ef 38 ff c6 	ld.ub	r8,r7[-58]
80006b2c:	2f c8       	sub	r8,-4
80006b2e:	ef 68 ff c6 	st.b	r7[-58],r8
80006b32:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006b36:	33 f8       	mov	r8,63
80006b38:	f0 09 18 00 	cp.b	r9,r8
80006b3c:	fe 98 ff bb 	brls	80006ab2 <sd_mmc_mci_card_init+0x4f6>
80006b40:	c0 28       	rjmp	80006b44 <sd_mmc_mci_card_init+0x588>
80006b42:	d7 03       	nop
80006b44:	ef 38 ff c5 	ld.ub	r8,r7[-59]
80006b48:	ec 18 00 01 	eorl	r8,0x1
80006b4c:	5c 58       	castu.b	r8
80006b4e:	e0 81 01 33 	brne	80006db4 <sd_mmc_mci_card_init+0x7f8>
80006b52:	fe f8 03 06 	ld.w	r8,pc[774]
80006b56:	70 08       	ld.w	r8,r8[0x0]
80006b58:	e0 6a ff f1 	mov	r10,65521
80006b5c:	ea 1a 80 ff 	orh	r10,0x80ff
80006b60:	e4 7b 10 46 	mov	r11,331846
80006b64:	10 9c       	mov	r12,r8
80006b66:	f0 1f 00 bf 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
80006b6a:	18 98       	mov	r8,r12
80006b6c:	58 08       	cp.w	r8,0
80006b6e:	c0 40       	breq	80006b76 <sd_mmc_mci_card_init+0x5ba>
80006b70:	30 08       	mov	r8,0
80006b72:	e0 8f 01 66 	bral	80006e3e <sd_mmc_mci_card_init+0x882>
80006b76:	30 08       	mov	r8,0
80006b78:	ef 68 ff c7 	st.b	r7[-57],r8
80006b7c:	c3 08       	rjmp	80006bdc <sd_mmc_mci_card_init+0x620>
80006b7e:	fe f8 02 da 	ld.w	r8,pc[730]
80006b82:	70 08       	ld.w	r8,r8[0x0]
80006b84:	ef 48 ff d4 	st.w	r7[-44],r8
80006b88:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006b8c:	ef 48 ff d8 	st.w	r7[-40],r8
80006b90:	fe f8 02 f4 	ld.w	r8,pc[756]
80006b94:	70 08       	ld.w	r8,r8[0x0]
80006b96:	10 99       	mov	r9,r8
80006b98:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006b9c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006ba0:	71 08       	ld.w	r8,r8[0x40]
80006ba2:	f3 e8 10 08 	or	r8,r9,r8
80006ba6:	10 99       	mov	r9,r8
80006ba8:	fe f8 02 dc 	ld.w	r8,pc[732]
80006bac:	91 09       	st.w	r8[0x0],r9
80006bae:	fe f8 02 d6 	ld.w	r8,pc[726]
80006bb2:	70 08       	ld.w	r8,r8[0x0]
80006bb4:	e2 18 00 02 	andl	r8,0x2,COH
80006bb8:	5f 18       	srne	r8
80006bba:	58 08       	cp.w	r8,0
80006bbc:	ce 10       	breq	80006b7e <sd_mmc_mci_card_init+0x5c2>
80006bbe:	fe f8 02 9a 	ld.w	r8,pc[666]
80006bc2:	70 08       	ld.w	r8,r8[0x0]
80006bc4:	ef 48 ff dc 	st.w	r7[-36],r8
80006bc8:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006bcc:	70 c8       	ld.w	r8,r8[0x30]
80006bce:	ef 48 ff a8 	st.w	r7[-88],r8
80006bd2:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006bd6:	2f c8       	sub	r8,-4
80006bd8:	ef 68 ff c7 	st.b	r7[-57],r8
80006bdc:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006be0:	33 f8       	mov	r8,63
80006be2:	f0 09 18 00 	cp.b	r9,r8
80006be6:	fe 98 ff cc 	brls	80006b7e <sd_mmc_mci_card_init+0x5c2>
80006bea:	fe f8 02 9e 	ld.w	r8,pc[670]
80006bee:	70 08       	ld.w	r8,r8[0x0]
80006bf0:	35 09       	mov	r9,80
80006bf2:	ef 49 ff e4 	st.w	r7[-28],r9
80006bf6:	ef 48 ff e0 	st.w	r7[-32],r8
80006bfa:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006bfe:	ef 48 ff ec 	st.w	r7[-20],r8
80006c02:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006c06:	ef 48 ff e8 	st.w	r7[-24],r8
80006c0a:	ee f0 ff ec 	ld.w	r0,r7[-20]
80006c0e:	30 01       	mov	r1,0
80006c10:	ee f2 ff e8 	ld.w	r2,r7[-24]
80006c14:	30 03       	mov	r3,0
80006c16:	e2 02 02 4a 	mul	r10,r1,r2
80006c1a:	e6 00 02 48 	mul	r8,r3,r0
80006c1e:	10 0a       	add	r10,r8
80006c20:	e0 02 06 48 	mulu.d	r8,r0,r2
80006c24:	12 0a       	add	r10,r9
80006c26:	14 99       	mov	r9,r10
80006c28:	ee 7a 42 3f 	mov	r10,999999
80006c2c:	30 0b       	mov	r11,0
80006c2e:	f0 0a 00 0a 	add	r10,r8,r10
80006c32:	f2 0b 00 4b 	adc	r11,r9,r11
80006c36:	ee 78 42 40 	mov	r8,1000000
80006c3a:	30 09       	mov	r9,0
80006c3c:	f0 1f 00 94 	mcall	80006e8c <sd_mmc_mci_card_init+0x8d0>
80006c40:	14 98       	mov	r8,r10
80006c42:	16 99       	mov	r9,r11
80006c44:	ef 48 ff f4 	st.w	r7[-12],r8
80006c48:	ee c8 00 50 	sub	r8,r7,80
80006c4c:	ef 48 ff f0 	st.w	r7[-16],r8
80006c50:	e1 b8 00 42 	mfsr	r8,0x108
80006c54:	10 99       	mov	r9,r8
80006c56:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006c5a:	91 09       	st.w	r8[0x0],r9
80006c5c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006c60:	70 09       	ld.w	r9,r8[0x0]
80006c62:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006c66:	10 09       	add	r9,r8
80006c68:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006c6c:	91 19       	st.w	r8[0x4],r9
80006c6e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006c72:	30 08       	mov	r8,0
80006c74:	f3 68 00 08 	st.b	r9[8],r8
80006c78:	ee c8 00 50 	sub	r8,r7,80
80006c7c:	ef 48 ff f8 	st.w	r7[-8],r8
80006c80:	e1 b8 00 42 	mfsr	r8,0x108
80006c84:	ef 48 ff fc 	st.w	r7[-4],r8
80006c88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c8c:	f1 39 00 08 	ld.ub	r9,r8[8]
80006c90:	30 28       	mov	r8,2
80006c92:	f0 09 18 00 	cp.b	r9,r8
80006c96:	c0 31       	brne	80006c9c <sd_mmc_mci_card_init+0x6e0>
80006c98:	30 08       	mov	r8,0
80006c9a:	c4 38       	rjmp	80006d20 <sd_mmc_mci_card_init+0x764>
80006c9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ca0:	f1 39 00 08 	ld.ub	r9,r8[8]
80006ca4:	30 18       	mov	r8,1
80006ca6:	f0 09 18 00 	cp.b	r9,r8
80006caa:	c0 31       	brne	80006cb0 <sd_mmc_mci_card_init+0x6f4>
80006cac:	30 18       	mov	r8,1
80006cae:	c3 98       	rjmp	80006d20 <sd_mmc_mci_card_init+0x764>
80006cb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006cb4:	70 09       	ld.w	r9,r8[0x0]
80006cb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006cba:	70 18       	ld.w	r8,r8[0x4]
80006cbc:	10 39       	cp.w	r9,r8
80006cbe:	e0 88 00 1a 	brls	80006cf2 <sd_mmc_mci_card_init+0x736>
80006cc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006cc6:	70 08       	ld.w	r8,r8[0x0]
80006cc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006ccc:	10 39       	cp.w	r9,r8
80006cce:	c1 02       	brcc	80006cee <sd_mmc_mci_card_init+0x732>
80006cd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006cd4:	70 18       	ld.w	r8,r8[0x4]
80006cd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006cda:	10 39       	cp.w	r9,r8
80006cdc:	e0 88 00 09 	brls	80006cee <sd_mmc_mci_card_init+0x732>
80006ce0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006ce4:	30 18       	mov	r8,1
80006ce6:	f3 68 00 08 	st.b	r9[8],r8
80006cea:	30 18       	mov	r8,1
80006cec:	c1 a8       	rjmp	80006d20 <sd_mmc_mci_card_init+0x764>
80006cee:	30 08       	mov	r8,0
80006cf0:	c1 88       	rjmp	80006d20 <sd_mmc_mci_card_init+0x764>
80006cf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006cf6:	70 08       	ld.w	r8,r8[0x0]
80006cf8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006cfc:	10 39       	cp.w	r9,r8
80006cfe:	c0 93       	brcs	80006d10 <sd_mmc_mci_card_init+0x754>
80006d00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d04:	70 18       	ld.w	r8,r8[0x4]
80006d06:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006d0a:	10 39       	cp.w	r9,r8
80006d0c:	e0 88 00 09 	brls	80006d1e <sd_mmc_mci_card_init+0x762>
80006d10:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006d14:	30 18       	mov	r8,1
80006d16:	f3 68 00 08 	st.b	r9[8],r8
80006d1a:	30 18       	mov	r8,1
80006d1c:	c0 28       	rjmp	80006d20 <sd_mmc_mci_card_init+0x764>
80006d1e:	30 08       	mov	r8,0
80006d20:	58 08       	cp.w	r8,0
80006d22:	ca b0       	breq	80006c78 <sd_mmc_mci_card_init+0x6bc>
80006d24:	4c d8       	lddpc	r8,80006e58 <sd_mmc_mci_card_init+0x89c>
80006d26:	70 08       	ld.w	r8,r8[0x0]
80006d28:	71 58       	ld.w	r8,r8[0x54]
80006d2a:	ef 48 ff bc 	st.w	r7[-68],r8
80006d2e:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006d32:	30 19       	mov	r9,1
80006d34:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80006d38:	ef 48 ff bc 	st.w	r7[-68],r8
80006d3c:	4c 78       	lddpc	r8,80006e58 <sd_mmc_mci_card_init+0x89c>
80006d3e:	70 08       	ld.w	r8,r8[0x0]
80006d40:	ee f9 ff bc 	ld.w	r9,r7[-68]
80006d44:	f1 49 00 54 	st.w	r8[84],r9
80006d48:	4c 48       	lddpc	r8,80006e58 <sd_mmc_mci_card_init+0x89c>
80006d4a:	70 08       	ld.w	r8,r8[0x0]
80006d4c:	30 0a       	mov	r10,0
80006d4e:	e0 6b 10 c7 	mov	r11,4295
80006d52:	10 9c       	mov	r12,r8
80006d54:	f0 1f 00 43 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
80006d58:	18 98       	mov	r8,r12
80006d5a:	58 08       	cp.w	r8,0
80006d5c:	c0 30       	breq	80006d62 <sd_mmc_mci_card_init+0x7a6>
80006d5e:	30 08       	mov	r8,0
80006d60:	c6 f8       	rjmp	80006e3e <sd_mmc_mci_card_init+0x882>
80006d62:	4b e8       	lddpc	r8,80006e58 <sd_mmc_mci_card_init+0x89c>
80006d64:	70 08       	ld.w	r8,r8[0x0]
80006d66:	10 9c       	mov	r12,r8
80006d68:	f0 1f 00 42 	mcall	80006e70 <sd_mmc_mci_card_init+0x8b4>
80006d6c:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006d70:	10 9c       	mov	r12,r8
80006d72:	f0 1f 00 3f 	mcall	80006e6c <sd_mmc_mci_card_init+0x8b0>
80006d76:	18 98       	mov	r8,r12
80006d78:	ec 18 00 01 	eorl	r8,0x1
80006d7c:	5c 58       	castu.b	r8
80006d7e:	c0 30       	breq	80006d84 <sd_mmc_mci_card_init+0x7c8>
80006d80:	30 08       	mov	r8,0
80006d82:	c5 e8       	rjmp	80006e3e <sd_mmc_mci_card_init+0x882>
80006d84:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006d88:	4b 88       	lddpc	r8,80006e68 <sd_mmc_mci_card_init+0x8ac>
80006d8a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006d8e:	4b 38       	lddpc	r8,80006e58 <sd_mmc_mci_card_init+0x89c>
80006d90:	70 08       	ld.w	r8,r8[0x0]
80006d92:	12 9a       	mov	r10,r9
80006d94:	e0 6b 10 c7 	mov	r11,4295
80006d98:	10 9c       	mov	r12,r8
80006d9a:	f0 1f 00 32 	mcall	80006e60 <sd_mmc_mci_card_init+0x8a4>
80006d9e:	18 98       	mov	r8,r12
80006da0:	58 08       	cp.w	r8,0
80006da2:	c0 30       	breq	80006da8 <sd_mmc_mci_card_init+0x7ec>
80006da4:	30 08       	mov	r8,0
80006da6:	c4 c8       	rjmp	80006e3e <sd_mmc_mci_card_init+0x882>
80006da8:	4a c8       	lddpc	r8,80006e58 <sd_mmc_mci_card_init+0x89c>
80006daa:	70 08       	ld.w	r8,r8[0x0]
80006dac:	10 9c       	mov	r12,r8
80006dae:	f0 1f 00 31 	mcall	80006e70 <sd_mmc_mci_card_init+0x8b4>
80006db2:	c0 28       	rjmp	80006db6 <sd_mmc_mci_card_init+0x7fa>
80006db4:	d7 03       	nop
80006db6:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006dba:	4b 68       	lddpc	r8,80006e90 <sd_mmc_mci_card_init+0x8d4>
80006dbc:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006dc0:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80006dc4:	e0 68 03 e8 	mov	r8,1000
80006dc8:	f2 08 02 48 	mul	r8,r9,r8
80006dcc:	10 9a       	mov	r10,r8
80006dce:	4a 28       	lddpc	r8,80006e54 <sd_mmc_mci_card_init+0x898>
80006dd0:	70 09       	ld.w	r9,r8[0x0]
80006dd2:	4a 28       	lddpc	r8,80006e58 <sd_mmc_mci_card_init+0x89c>
80006dd4:	70 08       	ld.w	r8,r8[0x0]
80006dd6:	12 9b       	mov	r11,r9
80006dd8:	10 9c       	mov	r12,r8
80006dda:	f0 1f 00 2f 	mcall	80006e94 <sd_mmc_mci_card_init+0x8d8>
80006dde:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006de2:	10 9c       	mov	r12,r8
80006de4:	f0 1f 00 2d 	mcall	80006e98 <sd_mmc_mci_card_init+0x8dc>
80006de8:	18 98       	mov	r8,r12
80006dea:	ec 18 00 01 	eorl	r8,0x1
80006dee:	5c 58       	castu.b	r8
80006df0:	c0 30       	breq	80006df6 <sd_mmc_mci_card_init+0x83a>
80006df2:	30 08       	mov	r8,0
80006df4:	c2 58       	rjmp	80006e3e <sd_mmc_mci_card_init+0x882>
80006df6:	49 98       	lddpc	r8,80006e58 <sd_mmc_mci_card_init+0x89c>
80006df8:	70 08       	ld.w	r8,r8[0x0]
80006dfa:	10 9c       	mov	r12,r8
80006dfc:	f0 1f 00 1a 	mcall	80006e64 <sd_mmc_mci_card_init+0x8a8>
80006e00:	18 98       	mov	r8,r12
80006e02:	e4 18 e0 02 	andh	r8,0xe002
80006e06:	e0 18 0e 00 	andl	r8,0xe00
80006e0a:	e0 48 08 00 	cp.w	r8,2048
80006e0e:	c0 30       	breq	80006e14 <sd_mmc_mci_card_init+0x858>
80006e10:	30 08       	mov	r8,0
80006e12:	c1 68       	rjmp	80006e3e <sd_mmc_mci_card_init+0x882>
80006e14:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006e18:	e0 6b 02 00 	mov	r11,512
80006e1c:	10 9c       	mov	r12,r8
80006e1e:	f0 1f 00 20 	mcall	80006e9c <sd_mmc_mci_card_init+0x8e0>
80006e22:	18 98       	mov	r8,r12
80006e24:	ec 18 00 01 	eorl	r8,0x1
80006e28:	5c 58       	castu.b	r8
80006e2a:	c0 30       	breq	80006e30 <sd_mmc_mci_card_init+0x874>
80006e2c:	30 08       	mov	r8,0
80006e2e:	c0 88       	rjmp	80006e3e <sd_mmc_mci_card_init+0x882>
80006e30:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006e34:	48 5a       	lddpc	r10,80006e48 <sd_mmc_mci_card_init+0x88c>
80006e36:	30 18       	mov	r8,1
80006e38:	f4 09 0b 08 	st.b	r10[r9],r8
80006e3c:	30 18       	mov	r8,1
80006e3e:	10 9c       	mov	r12,r8
80006e40:	2e 9d       	sub	sp,-92
80006e42:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80006e46:	00 00       	add	r0,r0
80006e48:	00 00       	add	r0,r0
80006e4a:	06 14       	sub	r4,r3
80006e4c:	00 00       	add	r0,r0
80006e4e:	0d e0       	ld.ub	r0,r6[0x6]
80006e50:	00 00       	add	r0,r0
80006e52:	0b d8       	ld.ub	r8,r5[0x5]
80006e54:	00 00       	add	r0,r0
80006e56:	06 18       	sub	r8,r3
80006e58:	00 00       	add	r0,r0
80006e5a:	01 34       	ld.ub	r4,r0++
80006e5c:	80 00       	ld.sh	r0,r0[0x0]
80006e5e:	92 04       	ld.sh	r4,r9[0x0]
80006e60:	80 00       	ld.sh	r0,r0[0x0]
80006e62:	93 38       	st.w	r9[0xc],r8
80006e64:	80 00       	ld.sh	r0,r0[0x0]
80006e66:	94 70       	ld.sh	r0,r10[0xe]
80006e68:	00 00       	add	r0,r0
80006e6a:	09 c8       	ld.ub	r8,r4[0x4]
80006e6c:	80 00       	ld.sh	r0,r0[0x0]
80006e6e:	5f 80       	srls	r0
80006e70:	80 00       	ld.sh	r0,r0[0x0]
80006e72:	94 8c       	ld.uh	r12,r10[0x0]
80006e74:	80 00       	ld.sh	r0,r0[0x0]
80006e76:	62 70       	ld.w	r0,r1[0x1c]
80006e78:	80 00       	ld.sh	r0,r0[0x0]
80006e7a:	94 10       	ld.sh	r0,r10[0x2]
80006e7c:	80 00       	ld.sh	r0,r0[0x0]
80006e7e:	92 b8       	ld.uh	r8,r9[0x6]
80006e80:	80 00       	ld.sh	r0,r0[0x0]
80006e82:	93 02       	st.w	r9[0x0],r2
80006e84:	00 00       	add	r0,r0
80006e86:	07 b0       	ld.ub	r0,r3[0x3]
80006e88:	00 00       	add	r0,r0
80006e8a:	06 1c       	sub	r12,r3
80006e8c:	80 00       	ld.sh	r0,r0[0x0]
80006e8e:	e5 08 00 00 	ld.sh	r8,r2[0]
80006e92:	0b da       	ld.ub	r10,r5[0x5]
80006e94:	80 00       	ld.sh	r0,r0[0x0]
80006e96:	91 20       	st.w	r8[0x8],r0
80006e98:	80 00       	ld.sh	r0,r0[0x0]
80006e9a:	7a f4       	ld.w	r4,sp[0x3c]
80006e9c:	80 00       	ld.sh	r0,r0[0x0]
80006e9e:	64 3c       	ld.w	r12,r2[0xc]

80006ea0 <dma_mci_2_ram>:
80006ea0:	eb cd 40 80 	pushm	r7,lr
80006ea4:	1a 97       	mov	r7,sp
80006ea6:	20 3d       	sub	sp,12
80006ea8:	ef 4c ff f8 	st.w	r7[-8],r12
80006eac:	ef 4b ff f4 	st.w	r7[-12],r11
80006eb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006eb4:	ef 48 ff fc 	st.w	r7[-4],r8
80006eb8:	fc 18 ff 10 	movh	r8,0xff10
80006ebc:	fe 69 42 00 	mov	r9,-114176
80006ec0:	f1 49 00 58 	st.w	r8[88],r9
80006ec4:	fc 18 ff 10 	movh	r8,0xff10
80006ec8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006ecc:	f1 49 00 60 	st.w	r8[96],r9
80006ed0:	fc 18 ff 10 	movh	r8,0xff10
80006ed4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006ed8:	a3 89       	lsr	r9,0x2
80006eda:	f1 49 00 74 	st.w	r8[116],r9
80006ede:	fc 18 ff 10 	movh	r8,0xff10
80006ee2:	e0 69 02 02 	mov	r9,514
80006ee6:	f1 49 03 a0 	st.w	r8[928],r9
80006eea:	2f dd       	sub	sp,-12
80006eec:	e3 cd 80 80 	ldm	sp++,r7,pc

80006ef0 <is_dma_mci_2_ram_complete>:
80006ef0:	eb cd 40 80 	pushm	r7,lr
80006ef4:	1a 97       	mov	r7,sp
80006ef6:	fc 18 ff 10 	movh	r8,0xff10
80006efa:	f0 f8 03 a0 	ld.w	r8,r8[928]
80006efe:	e2 18 00 02 	andl	r8,0x2,COH
80006f02:	c0 30       	breq	80006f08 <is_dma_mci_2_ram_complete+0x18>
80006f04:	30 08       	mov	r8,0
80006f06:	c0 28       	rjmp	80006f0a <is_dma_mci_2_ram_complete+0x1a>
80006f08:	30 18       	mov	r8,1
80006f0a:	10 9c       	mov	r12,r8
80006f0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80006f10 <dma_ram_2_mci>:
80006f10:	eb cd 40 80 	pushm	r7,lr
80006f14:	1a 97       	mov	r7,sp
80006f16:	20 3d       	sub	sp,12
80006f18:	ef 4c ff f8 	st.w	r7[-8],r12
80006f1c:	ef 4b ff f4 	st.w	r7[-12],r11
80006f20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006f24:	ef 48 ff fc 	st.w	r7[-4],r8
80006f28:	fc 18 ff 10 	movh	r8,0xff10
80006f2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006f30:	f1 49 00 58 	st.w	r8[88],r9
80006f34:	fc 18 ff 10 	movh	r8,0xff10
80006f38:	fe 69 42 00 	mov	r9,-114176
80006f3c:	f1 49 00 60 	st.w	r8[96],r9
80006f40:	fc 18 ff 10 	movh	r8,0xff10
80006f44:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006f48:	a3 89       	lsr	r9,0x2
80006f4a:	f1 49 00 74 	st.w	r8[116],r9
80006f4e:	fc 18 ff 10 	movh	r8,0xff10
80006f52:	e0 69 02 02 	mov	r9,514
80006f56:	f1 49 03 a0 	st.w	r8[928],r9
80006f5a:	2f dd       	sub	sp,-12
80006f5c:	e3 cd 80 80 	ldm	sp++,r7,pc

80006f60 <is_dma_ram_2_mci_complete>:
80006f60:	eb cd 40 80 	pushm	r7,lr
80006f64:	1a 97       	mov	r7,sp
80006f66:	fc 18 ff 10 	movh	r8,0xff10
80006f6a:	f0 f8 03 a0 	ld.w	r8,r8[928]
80006f6e:	e2 18 00 02 	andl	r8,0x2,COH
80006f72:	c0 30       	breq	80006f78 <is_dma_ram_2_mci_complete+0x18>
80006f74:	30 08       	mov	r8,0
80006f76:	c0 28       	rjmp	80006f7a <is_dma_ram_2_mci_complete+0x1a>
80006f78:	30 18       	mov	r8,1
80006f7a:	10 9c       	mov	r12,r8
80006f7c:	e3 cd 80 80 	ldm	sp++,r7,pc

80006f80 <sd_mmc_mci_mem_check>:
80006f80:	eb cd 40 80 	pushm	r7,lr
80006f84:	1a 97       	mov	r7,sp
80006f86:	20 2d       	sub	sp,8
80006f88:	18 98       	mov	r8,r12
80006f8a:	ef 68 ff f8 	st.b	r7[-8],r8
80006f8e:	30 08       	mov	r8,0
80006f90:	ef 68 ff ff 	st.b	r7[-1],r8
80006f94:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006f98:	30 18       	mov	r8,1
80006f9a:	f0 09 18 00 	cp.b	r9,r8
80006f9e:	e0 88 00 04 	brls	80006fa6 <sd_mmc_mci_mem_check+0x26>
80006fa2:	30 08       	mov	r8,0
80006fa4:	c4 d8       	rjmp	8000703e <sd_mmc_mci_mem_check+0xbe>
80006fa6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006faa:	4a 89       	lddpc	r9,80007048 <sd_mmc_mci_mem_check+0xc8>
80006fac:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006fb0:	10 9a       	mov	r10,r8
80006fb2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006fb6:	4a 68       	lddpc	r8,8000704c <sd_mmc_mci_mem_check+0xcc>
80006fb8:	70 08       	ld.w	r8,r8[0x0]
80006fba:	12 9b       	mov	r11,r9
80006fbc:	10 9c       	mov	r12,r8
80006fbe:	f0 1f 00 25 	mcall	80007050 <sd_mmc_mci_mem_check+0xd0>
80006fc2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006fc6:	10 9c       	mov	r12,r8
80006fc8:	f0 1f 00 23 	mcall	80007054 <sd_mmc_mci_mem_check+0xd4>
80006fcc:	18 98       	mov	r8,r12
80006fce:	ec 18 00 01 	eorl	r8,0x1
80006fd2:	5c 58       	castu.b	r8
80006fd4:	c0 90       	breq	80006fe6 <sd_mmc_mci_mem_check+0x66>
80006fd6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006fda:	4a 0a       	lddpc	r10,80007058 <sd_mmc_mci_mem_check+0xd8>
80006fdc:	30 08       	mov	r8,0
80006fde:	f4 09 0b 08 	st.b	r10[r9],r8
80006fe2:	30 08       	mov	r8,0
80006fe4:	c2 d8       	rjmp	8000703e <sd_mmc_mci_mem_check+0xbe>
80006fe6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006fea:	49 c9       	lddpc	r9,80007058 <sd_mmc_mci_mem_check+0xd8>
80006fec:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006ff0:	ec 18 00 01 	eorl	r8,0x1
80006ff4:	5c 58       	castu.b	r8
80006ff6:	c1 a0       	breq	8000702a <sd_mmc_mci_mem_check+0xaa>
80006ff8:	c0 f8       	rjmp	80007016 <sd_mmc_mci_mem_check+0x96>
80006ffa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006ffe:	2f f8       	sub	r8,-1
80007000:	ef 68 ff ff 	st.b	r7[-1],r8
80007004:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007008:	30 a8       	mov	r8,10
8000700a:	f0 09 18 00 	cp.b	r9,r8
8000700e:	e0 88 00 04 	brls	80007016 <sd_mmc_mci_mem_check+0x96>
80007012:	30 08       	mov	r8,0
80007014:	c1 58       	rjmp	8000703e <sd_mmc_mci_mem_check+0xbe>
80007016:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000701a:	10 9c       	mov	r12,r8
8000701c:	f0 1f 00 10 	mcall	8000705c <sd_mmc_mci_mem_check+0xdc>
80007020:	18 98       	mov	r8,r12
80007022:	ec 18 00 01 	eorl	r8,0x1
80007026:	5c 58       	castu.b	r8
80007028:	ce 91       	brne	80006ffa <sd_mmc_mci_mem_check+0x7a>
8000702a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000702e:	48 b9       	lddpc	r9,80007058 <sd_mmc_mci_mem_check+0xd8>
80007030:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007034:	58 08       	cp.w	r8,0
80007036:	c0 30       	breq	8000703c <sd_mmc_mci_mem_check+0xbc>
80007038:	30 18       	mov	r8,1
8000703a:	c0 28       	rjmp	8000703e <sd_mmc_mci_mem_check+0xbe>
8000703c:	30 08       	mov	r8,0
8000703e:	10 9c       	mov	r12,r8
80007040:	2f ed       	sub	sp,-8
80007042:	e3 cd 80 80 	ldm	sp++,r7,pc
80007046:	00 00       	add	r0,r0
80007048:	00 00       	add	r0,r0
8000704a:	0b d8       	ld.ub	r8,r5[0x5]
8000704c:	00 00       	add	r0,r0
8000704e:	01 34       	ld.ub	r4,r0++
80007050:	80 00       	ld.sh	r0,r0[0x0]
80007052:	94 d0       	ld.uh	r0,r10[0xa]
80007054:	80 00       	ld.sh	r0,r0[0x0]
80007056:	5e c8       	retvs	r8
80007058:	00 00       	add	r0,r0
8000705a:	06 14       	sub	r4,r3
8000705c:	80 00       	ld.sh	r0,r0[0x0]
8000705e:	65 bc       	ld.w	r12,r2[0x6c]

80007060 <sd_mmc_mci_dma_read_open>:
80007060:	eb cd 40 80 	pushm	r7,lr
80007064:	1a 97       	mov	r7,sp
80007066:	20 5d       	sub	sp,20
80007068:	ef 4b ff f4 	st.w	r7[-12],r11
8000706c:	ef 4a ff f0 	st.w	r7[-16],r10
80007070:	12 98       	mov	r8,r9
80007072:	18 99       	mov	r9,r12
80007074:	ef 69 ff f8 	st.b	r7[-8],r9
80007078:	ef 58 ff ec 	st.h	r7[-20],r8
8000707c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007080:	30 18       	mov	r8,1
80007082:	f0 09 18 00 	cp.b	r9,r8
80007086:	e0 88 00 04 	brls	8000708e <sd_mmc_mci_dma_read_open+0x2e>
8000708a:	30 08       	mov	r8,0
8000708c:	c9 a8       	rjmp	800071c0 <sd_mmc_mci_dma_read_open+0x160>
8000708e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007092:	4c e9       	lddpc	r9,800071c8 <sd_mmc_mci_dma_read_open+0x168>
80007094:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007098:	10 9a       	mov	r10,r8
8000709a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000709e:	4c c8       	lddpc	r8,800071cc <sd_mmc_mci_dma_read_open+0x16c>
800070a0:	70 08       	ld.w	r8,r8[0x0]
800070a2:	12 9b       	mov	r11,r9
800070a4:	10 9c       	mov	r12,r8
800070a6:	f0 1f 00 4b 	mcall	800071d0 <sd_mmc_mci_dma_read_open+0x170>
800070aa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800070ae:	4c a8       	lddpc	r8,800071d4 <sd_mmc_mci_dma_read_open+0x174>
800070b0:	ee fa ff f4 	ld.w	r10,r7[-12]
800070b4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800070b8:	4c 58       	lddpc	r8,800071cc <sd_mmc_mci_dma_read_open+0x16c>
800070ba:	70 08       	ld.w	r8,r8[0x0]
800070bc:	10 9c       	mov	r12,r8
800070be:	f0 1f 00 47 	mcall	800071d8 <sd_mmc_mci_dma_read_open+0x178>
800070c2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800070c6:	4c 48       	lddpc	r8,800071d4 <sd_mmc_mci_dma_read_open+0x174>
800070c8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800070cc:	ef 48 ff fc 	st.w	r7[-4],r8
800070d0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800070d4:	4c 29       	lddpc	r9,800071dc <sd_mmc_mci_dma_read_open+0x17c>
800070d6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800070da:	e2 18 00 10 	andl	r8,0x10,COH
800070de:	c0 e1       	brne	800070fa <sd_mmc_mci_dma_read_open+0x9a>
800070e0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800070e4:	4b e9       	lddpc	r9,800071dc <sd_mmc_mci_dma_read_open+0x17c>
800070e6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800070ea:	e2 18 00 20 	andl	r8,0x20,COH
800070ee:	c0 61       	brne	800070fa <sd_mmc_mci_dma_read_open+0x9a>
800070f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800070f4:	a9 78       	lsl	r8,0x9
800070f6:	ef 48 ff fc 	st.w	r7[-4],r8
800070fa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800070fe:	4b 98       	lddpc	r8,800071e0 <sd_mmc_mci_dma_read_open+0x180>
80007100:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80007104:	4b 28       	lddpc	r8,800071cc <sd_mmc_mci_dma_read_open+0x16c>
80007106:	70 08       	ld.w	r8,r8[0x0]
80007108:	12 9a       	mov	r10,r9
8000710a:	e0 6b 10 4d 	mov	r11,4173
8000710e:	10 9c       	mov	r12,r8
80007110:	f0 1f 00 35 	mcall	800071e4 <sd_mmc_mci_dma_read_open+0x184>
80007114:	18 98       	mov	r8,r12
80007116:	58 08       	cp.w	r8,0
80007118:	c0 30       	breq	8000711e <sd_mmc_mci_dma_read_open+0xbe>
8000711a:	30 08       	mov	r8,0
8000711c:	c5 28       	rjmp	800071c0 <sd_mmc_mci_dma_read_open+0x160>
8000711e:	4a c8       	lddpc	r8,800071cc <sd_mmc_mci_dma_read_open+0x16c>
80007120:	70 08       	ld.w	r8,r8[0x0]
80007122:	e0 6b 02 00 	mov	r11,512
80007126:	10 9c       	mov	r12,r8
80007128:	f0 1f 00 30 	mcall	800071e8 <sd_mmc_mci_dma_read_open+0x188>
8000712c:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80007130:	4a 78       	lddpc	r8,800071cc <sd_mmc_mci_dma_read_open+0x16c>
80007132:	70 08       	ld.w	r8,r8[0x0]
80007134:	12 9b       	mov	r11,r9
80007136:	10 9c       	mov	r12,r8
80007138:	f0 1f 00 2d 	mcall	800071ec <sd_mmc_mci_dma_read_open+0x18c>
8000713c:	fc 18 ff 10 	movh	r8,0xff10
80007140:	30 19       	mov	r9,1
80007142:	f1 49 03 98 	st.w	r8[920],r9
80007146:	fe 68 40 00 	mov	r8,-114688
8000714a:	30 09       	mov	r9,0
8000714c:	f1 49 00 50 	st.w	r8[80],r9
80007150:	fc 18 ff 10 	movh	r8,0xff10
80007154:	30 09       	mov	r9,0
80007156:	f1 49 00 68 	st.w	r8[104],r9
8000715a:	fc 18 ff 10 	movh	r8,0xff10
8000715e:	e0 69 d8 24 	mov	r9,55332
80007162:	ea 19 00 a0 	orh	r9,0xa0
80007166:	f1 49 00 70 	st.w	r8[112],r9
8000716a:	fc 18 ff 10 	movh	r8,0xff10
8000716e:	30 09       	mov	r9,0
80007170:	f1 49 00 98 	st.w	r8[152],r9
80007174:	fc 18 ff 10 	movh	r8,0xff10
80007178:	e0 69 01 00 	mov	r9,256
8000717c:	f1 49 00 9c 	st.w	r8[156],r9
80007180:	fe 68 40 00 	mov	r8,-114688
80007184:	e0 69 01 30 	mov	r9,304
80007188:	f1 49 00 50 	st.w	r8[80],r9
8000718c:	49 08       	lddpc	r8,800071cc <sd_mmc_mci_dma_read_open+0x16c>
8000718e:	70 08       	ld.w	r8,r8[0x0]
80007190:	ee fa ff fc 	ld.w	r10,r7[-4]
80007194:	ec 7b 10 52 	mov	r11,856146
80007198:	10 9c       	mov	r12,r8
8000719a:	f0 1f 00 13 	mcall	800071e4 <sd_mmc_mci_dma_read_open+0x184>
8000719e:	18 98       	mov	r8,r12
800071a0:	58 08       	cp.w	r8,0
800071a2:	c0 30       	breq	800071a8 <sd_mmc_mci_dma_read_open+0x148>
800071a4:	30 08       	mov	r8,0
800071a6:	c0 d8       	rjmp	800071c0 <sd_mmc_mci_dma_read_open+0x160>
800071a8:	48 98       	lddpc	r8,800071cc <sd_mmc_mci_dma_read_open+0x16c>
800071aa:	70 08       	ld.w	r8,r8[0x0]
800071ac:	10 9c       	mov	r12,r8
800071ae:	f0 1f 00 11 	mcall	800071f0 <sd_mmc_mci_dma_read_open+0x190>
800071b2:	18 98       	mov	r8,r12
800071b4:	e6 18 f0 50 	andh	r8,0xf050,COH
800071b8:	c0 30       	breq	800071be <sd_mmc_mci_dma_read_open+0x15e>
800071ba:	30 08       	mov	r8,0
800071bc:	c0 28       	rjmp	800071c0 <sd_mmc_mci_dma_read_open+0x160>
800071be:	30 18       	mov	r8,1
800071c0:	10 9c       	mov	r12,r8
800071c2:	2f bd       	sub	sp,-20
800071c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800071c8:	00 00       	add	r0,r0
800071ca:	0b d8       	ld.ub	r8,r5[0x5]
800071cc:	00 00       	add	r0,r0
800071ce:	01 34       	ld.ub	r4,r0++
800071d0:	80 00       	ld.sh	r0,r0[0x0]
800071d2:	94 d0       	ld.uh	r0,r10[0xa]
800071d4:	00 00       	add	r0,r0
800071d6:	06 20       	rsub	r0,r3
800071d8:	80 00       	ld.sh	r0,r0[0x0]
800071da:	94 8c       	ld.uh	r12,r10[0x0]
800071dc:	00 00       	add	r0,r0
800071de:	0d e0       	ld.ub	r0,r6[0x6]
800071e0:	00 00       	add	r0,r0
800071e2:	09 c8       	ld.ub	r8,r4[0x4]
800071e4:	80 00       	ld.sh	r0,r0[0x0]
800071e6:	93 38       	st.w	r9[0xc],r8
800071e8:	80 00       	ld.sh	r0,r0[0x0]
800071ea:	92 b8       	ld.uh	r8,r9[0x6]
800071ec:	80 00       	ld.sh	r0,r0[0x0]
800071ee:	93 02       	st.w	r9[0x0],r2
800071f0:	80 00       	ld.sh	r0,r0[0x0]
800071f2:	94 70       	ld.sh	r0,r10[0xe]

800071f4 <sd_mmc_mci_read_close>:
800071f4:	eb cd 40 80 	pushm	r7,lr
800071f8:	1a 97       	mov	r7,sp
800071fa:	20 3d       	sub	sp,12
800071fc:	18 98       	mov	r8,r12
800071fe:	ef 68 ff f4 	st.b	r7[-12],r8
80007202:	4a 08       	lddpc	r8,80007280 <sd_mmc_mci_read_close+0x8c>
80007204:	70 08       	ld.w	r8,r8[0x0]
80007206:	ef 48 ff f8 	st.w	r7[-8],r8
8000720a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000720e:	ef 48 ff fc 	st.w	r7[-4],r8
80007212:	49 d8       	lddpc	r8,80007284 <sd_mmc_mci_read_close+0x90>
80007214:	70 08       	ld.w	r8,r8[0x0]
80007216:	10 99       	mov	r9,r8
80007218:	e6 19 01 e0 	andh	r9,0x1e0,COH
8000721c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007220:	71 08       	ld.w	r8,r8[0x40]
80007222:	f3 e8 10 08 	or	r8,r9,r8
80007226:	10 99       	mov	r9,r8
80007228:	49 78       	lddpc	r8,80007284 <sd_mmc_mci_read_close+0x90>
8000722a:	91 09       	st.w	r8[0x0],r9
8000722c:	49 68       	lddpc	r8,80007284 <sd_mmc_mci_read_close+0x90>
8000722e:	70 08       	ld.w	r8,r8[0x0]
80007230:	e6 18 00 20 	andh	r8,0x20,COH
80007234:	c0 90       	breq	80007246 <sd_mmc_mci_read_close+0x52>
80007236:	49 48       	lddpc	r8,80007284 <sd_mmc_mci_read_close+0x90>
80007238:	70 08       	ld.w	r8,r8[0x0]
8000723a:	10 99       	mov	r9,r8
8000723c:	b5 d9       	cbr	r9,0x15
8000723e:	49 28       	lddpc	r8,80007284 <sd_mmc_mci_read_close+0x90>
80007240:	91 09       	st.w	r8[0x0],r9
80007242:	30 18       	mov	r8,1
80007244:	c0 28       	rjmp	80007248 <sd_mmc_mci_read_close+0x54>
80007246:	30 08       	mov	r8,0
80007248:	58 08       	cp.w	r8,0
8000724a:	c0 30       	breq	80007250 <sd_mmc_mci_read_close+0x5c>
8000724c:	30 08       	mov	r8,0
8000724e:	c1 48       	rjmp	80007276 <sd_mmc_mci_read_close+0x82>
80007250:	48 c8       	lddpc	r8,80007280 <sd_mmc_mci_read_close+0x8c>
80007252:	70 08       	ld.w	r8,r8[0x0]
80007254:	10 9c       	mov	r12,r8
80007256:	f0 1f 00 0d 	mcall	80007288 <sd_mmc_mci_read_close+0x94>
8000725a:	48 a8       	lddpc	r8,80007280 <sd_mmc_mci_read_close+0x8c>
8000725c:	70 08       	ld.w	r8,r8[0x0]
8000725e:	3f fa       	mov	r10,-1
80007260:	e2 6b 10 4c 	mov	r11,135244
80007264:	10 9c       	mov	r12,r8
80007266:	f0 1f 00 0a 	mcall	8000728c <sd_mmc_mci_read_close+0x98>
8000726a:	18 98       	mov	r8,r12
8000726c:	58 08       	cp.w	r8,0
8000726e:	c0 30       	breq	80007274 <sd_mmc_mci_read_close+0x80>
80007270:	30 08       	mov	r8,0
80007272:	c0 28       	rjmp	80007276 <sd_mmc_mci_read_close+0x82>
80007274:	30 18       	mov	r8,1
80007276:	10 9c       	mov	r12,r8
80007278:	2f dd       	sub	sp,-12
8000727a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000727e:	00 00       	add	r0,r0
80007280:	00 00       	add	r0,r0
80007282:	01 34       	ld.ub	r4,r0++
80007284:	00 00       	add	r0,r0
80007286:	07 b0       	ld.ub	r0,r3[0x3]
80007288:	80 00       	ld.sh	r0,r0[0x0]
8000728a:	94 8c       	ld.uh	r12,r10[0x0]
8000728c:	80 00       	ld.sh	r0,r0[0x0]
8000728e:	93 38       	st.w	r9[0xc],r8

80007290 <sd_mmc_mci_dma_write_open>:
80007290:	eb cd 40 80 	pushm	r7,lr
80007294:	1a 97       	mov	r7,sp
80007296:	20 5d       	sub	sp,20
80007298:	ef 4b ff f4 	st.w	r7[-12],r11
8000729c:	ef 4a ff f0 	st.w	r7[-16],r10
800072a0:	12 98       	mov	r8,r9
800072a2:	18 99       	mov	r9,r12
800072a4:	ef 69 ff f8 	st.b	r7[-8],r9
800072a8:	ef 58 ff ec 	st.h	r7[-20],r8
800072ac:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800072b0:	30 18       	mov	r8,1
800072b2:	f0 09 18 00 	cp.b	r9,r8
800072b6:	e0 88 00 04 	brls	800072be <sd_mmc_mci_dma_write_open+0x2e>
800072ba:	30 08       	mov	r8,0
800072bc:	c8 88       	rjmp	800073cc <sd_mmc_mci_dma_write_open+0x13c>
800072be:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800072c2:	4c 59       	lddpc	r9,800073d4 <sd_mmc_mci_dma_write_open+0x144>
800072c4:	f2 08 07 08 	ld.ub	r8,r9[r8]
800072c8:	10 9a       	mov	r10,r8
800072ca:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800072ce:	4c 38       	lddpc	r8,800073d8 <sd_mmc_mci_dma_write_open+0x148>
800072d0:	70 08       	ld.w	r8,r8[0x0]
800072d2:	12 9b       	mov	r11,r9
800072d4:	10 9c       	mov	r12,r8
800072d6:	f0 1f 00 42 	mcall	800073dc <sd_mmc_mci_dma_write_open+0x14c>
800072da:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800072de:	4c 18       	lddpc	r8,800073e0 <sd_mmc_mci_dma_write_open+0x150>
800072e0:	ee fa ff f4 	ld.w	r10,r7[-12]
800072e4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800072e8:	4b c8       	lddpc	r8,800073d8 <sd_mmc_mci_dma_write_open+0x148>
800072ea:	70 08       	ld.w	r8,r8[0x0]
800072ec:	10 9c       	mov	r12,r8
800072ee:	f0 1f 00 3e 	mcall	800073e4 <sd_mmc_mci_dma_write_open+0x154>
800072f2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800072f6:	4b b8       	lddpc	r8,800073e0 <sd_mmc_mci_dma_write_open+0x150>
800072f8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800072fc:	ef 48 ff fc 	st.w	r7[-4],r8
80007300:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007304:	4b 99       	lddpc	r9,800073e8 <sd_mmc_mci_dma_write_open+0x158>
80007306:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000730a:	e2 18 00 10 	andl	r8,0x10,COH
8000730e:	c0 e1       	brne	8000732a <sd_mmc_mci_dma_write_open+0x9a>
80007310:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007314:	4b 59       	lddpc	r9,800073e8 <sd_mmc_mci_dma_write_open+0x158>
80007316:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000731a:	e2 18 00 20 	andl	r8,0x20,COH
8000731e:	c0 61       	brne	8000732a <sd_mmc_mci_dma_write_open+0x9a>
80007320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007324:	a9 78       	lsl	r8,0x9
80007326:	ef 48 ff fc 	st.w	r7[-4],r8
8000732a:	4a c8       	lddpc	r8,800073d8 <sd_mmc_mci_dma_write_open+0x148>
8000732c:	70 08       	ld.w	r8,r8[0x0]
8000732e:	e0 6b 02 00 	mov	r11,512
80007332:	10 9c       	mov	r12,r8
80007334:	f0 1f 00 2e 	mcall	800073ec <sd_mmc_mci_dma_write_open+0x15c>
80007338:	ef 19 ff ec 	ld.uh	r9,r7[-20]
8000733c:	4a 78       	lddpc	r8,800073d8 <sd_mmc_mci_dma_write_open+0x148>
8000733e:	70 08       	ld.w	r8,r8[0x0]
80007340:	12 9b       	mov	r11,r9
80007342:	10 9c       	mov	r12,r8
80007344:	f0 1f 00 2b 	mcall	800073f0 <sd_mmc_mci_dma_write_open+0x160>
80007348:	fc 18 ff 10 	movh	r8,0xff10
8000734c:	30 19       	mov	r9,1
8000734e:	f1 49 03 98 	st.w	r8[920],r9
80007352:	fe 68 40 00 	mov	r8,-114688
80007356:	30 09       	mov	r9,0
80007358:	f1 49 00 50 	st.w	r8[80],r9
8000735c:	fc 18 ff 10 	movh	r8,0xff10
80007360:	30 09       	mov	r9,0
80007362:	f1 49 00 68 	st.w	r8[104],r9
80007366:	fc 18 ff 10 	movh	r8,0xff10
8000736a:	e0 69 d8 24 	mov	r9,55332
8000736e:	ea 19 02 10 	orh	r9,0x210
80007372:	f1 49 00 70 	st.w	r8[112],r9
80007376:	fc 18 ff 10 	movh	r8,0xff10
8000737a:	30 09       	mov	r9,0
8000737c:	f1 49 00 98 	st.w	r8[152],r9
80007380:	fc 18 ff 10 	movh	r8,0xff10
80007384:	e0 69 18 00 	mov	r9,6144
80007388:	f1 49 00 9c 	st.w	r8[156],r9
8000738c:	fe 68 40 00 	mov	r8,-114688
80007390:	e0 69 01 30 	mov	r9,304
80007394:	f1 49 00 50 	st.w	r8[80],r9
80007398:	49 08       	lddpc	r8,800073d8 <sd_mmc_mci_dma_write_open+0x148>
8000739a:	70 08       	ld.w	r8,r8[0x0]
8000739c:	ee fa ff fc 	ld.w	r10,r7[-4]
800073a0:	e8 7b 10 59 	mov	r11,594009
800073a4:	10 9c       	mov	r12,r8
800073a6:	f0 1f 00 14 	mcall	800073f4 <sd_mmc_mci_dma_write_open+0x164>
800073aa:	18 98       	mov	r8,r12
800073ac:	58 08       	cp.w	r8,0
800073ae:	c0 30       	breq	800073b4 <sd_mmc_mci_dma_write_open+0x124>
800073b0:	30 08       	mov	r8,0
800073b2:	c0 d8       	rjmp	800073cc <sd_mmc_mci_dma_write_open+0x13c>
800073b4:	48 98       	lddpc	r8,800073d8 <sd_mmc_mci_dma_write_open+0x148>
800073b6:	70 08       	ld.w	r8,r8[0x0]
800073b8:	10 9c       	mov	r12,r8
800073ba:	f0 1f 00 10 	mcall	800073f8 <sd_mmc_mci_dma_write_open+0x168>
800073be:	18 98       	mov	r8,r12
800073c0:	e6 18 f0 50 	andh	r8,0xf050,COH
800073c4:	c0 30       	breq	800073ca <sd_mmc_mci_dma_write_open+0x13a>
800073c6:	30 08       	mov	r8,0
800073c8:	c0 28       	rjmp	800073cc <sd_mmc_mci_dma_write_open+0x13c>
800073ca:	30 18       	mov	r8,1
800073cc:	10 9c       	mov	r12,r8
800073ce:	2f bd       	sub	sp,-20
800073d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800073d4:	00 00       	add	r0,r0
800073d6:	0b d8       	ld.ub	r8,r5[0x5]
800073d8:	00 00       	add	r0,r0
800073da:	01 34       	ld.ub	r4,r0++
800073dc:	80 00       	ld.sh	r0,r0[0x0]
800073de:	94 d0       	ld.uh	r0,r10[0xa]
800073e0:	00 00       	add	r0,r0
800073e2:	06 20       	rsub	r0,r3
800073e4:	80 00       	ld.sh	r0,r0[0x0]
800073e6:	94 8c       	ld.uh	r12,r10[0x0]
800073e8:	00 00       	add	r0,r0
800073ea:	0d e0       	ld.ub	r0,r6[0x6]
800073ec:	80 00       	ld.sh	r0,r0[0x0]
800073ee:	92 b8       	ld.uh	r8,r9[0x6]
800073f0:	80 00       	ld.sh	r0,r0[0x0]
800073f2:	93 02       	st.w	r9[0x0],r2
800073f4:	80 00       	ld.sh	r0,r0[0x0]
800073f6:	93 38       	st.w	r9[0xc],r8
800073f8:	80 00       	ld.sh	r0,r0[0x0]
800073fa:	94 70       	ld.sh	r0,r10[0xe]

800073fc <sd_mmc_mci_write_close>:
800073fc:	eb cd 40 80 	pushm	r7,lr
80007400:	1a 97       	mov	r7,sp
80007402:	20 5d       	sub	sp,20
80007404:	18 98       	mov	r8,r12
80007406:	ef 68 ff ec 	st.b	r7[-20],r8
8000740a:	4b 58       	lddpc	r8,800074dc <sd_mmc_mci_write_close+0xe0>
8000740c:	70 08       	ld.w	r8,r8[0x0]
8000740e:	ef 48 ff f0 	st.w	r7[-16],r8
80007412:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007416:	ef 48 ff f4 	st.w	r7[-12],r8
8000741a:	4b 28       	lddpc	r8,800074e0 <sd_mmc_mci_write_close+0xe4>
8000741c:	70 08       	ld.w	r8,r8[0x0]
8000741e:	10 99       	mov	r9,r8
80007420:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007424:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007428:	71 08       	ld.w	r8,r8[0x40]
8000742a:	f3 e8 10 08 	or	r8,r9,r8
8000742e:	10 99       	mov	r9,r8
80007430:	4a c8       	lddpc	r8,800074e0 <sd_mmc_mci_write_close+0xe4>
80007432:	91 09       	st.w	r8[0x0],r9
80007434:	4a b8       	lddpc	r8,800074e0 <sd_mmc_mci_write_close+0xe4>
80007436:	70 08       	ld.w	r8,r8[0x0]
80007438:	e6 18 00 20 	andh	r8,0x20,COH
8000743c:	c0 90       	breq	8000744e <sd_mmc_mci_write_close+0x52>
8000743e:	4a 98       	lddpc	r8,800074e0 <sd_mmc_mci_write_close+0xe4>
80007440:	70 08       	ld.w	r8,r8[0x0]
80007442:	10 99       	mov	r9,r8
80007444:	b5 d9       	cbr	r9,0x15
80007446:	4a 78       	lddpc	r8,800074e0 <sd_mmc_mci_write_close+0xe4>
80007448:	91 09       	st.w	r8[0x0],r9
8000744a:	30 18       	mov	r8,1
8000744c:	c0 28       	rjmp	80007450 <sd_mmc_mci_write_close+0x54>
8000744e:	30 08       	mov	r8,0
80007450:	58 08       	cp.w	r8,0
80007452:	c0 30       	breq	80007458 <sd_mmc_mci_write_close+0x5c>
80007454:	30 08       	mov	r8,0
80007456:	c3 e8       	rjmp	800074d2 <sd_mmc_mci_write_close+0xd6>
80007458:	4a 18       	lddpc	r8,800074dc <sd_mmc_mci_write_close+0xe0>
8000745a:	70 08       	ld.w	r8,r8[0x0]
8000745c:	ef 48 ff f8 	st.w	r7[-8],r8
80007460:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007464:	ef 48 ff fc 	st.w	r7[-4],r8
80007468:	49 e8       	lddpc	r8,800074e0 <sd_mmc_mci_write_close+0xe4>
8000746a:	70 08       	ld.w	r8,r8[0x0]
8000746c:	10 99       	mov	r9,r8
8000746e:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007472:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007476:	71 08       	ld.w	r8,r8[0x40]
80007478:	f3 e8 10 08 	or	r8,r9,r8
8000747c:	10 99       	mov	r9,r8
8000747e:	49 98       	lddpc	r8,800074e0 <sd_mmc_mci_write_close+0xe4>
80007480:	91 09       	st.w	r8[0x0],r9
80007482:	49 88       	lddpc	r8,800074e0 <sd_mmc_mci_write_close+0xe4>
80007484:	70 08       	ld.w	r8,r8[0x0]
80007486:	e6 18 08 00 	andh	r8,0x800,COH
8000748a:	5f 18       	srne	r8
8000748c:	58 08       	cp.w	r8,0
8000748e:	ce 50       	breq	80007458 <sd_mmc_mci_write_close+0x5c>
80007490:	49 38       	lddpc	r8,800074dc <sd_mmc_mci_write_close+0xe0>
80007492:	70 08       	ld.w	r8,r8[0x0]
80007494:	3f fa       	mov	r10,-1
80007496:	e2 6b 10 cc 	mov	r11,135372
8000749a:	10 9c       	mov	r12,r8
8000749c:	f0 1f 00 12 	mcall	800074e4 <sd_mmc_mci_write_close+0xe8>
800074a0:	18 98       	mov	r8,r12
800074a2:	58 08       	cp.w	r8,0
800074a4:	c0 30       	breq	800074aa <sd_mmc_mci_write_close+0xae>
800074a6:	30 08       	mov	r8,0
800074a8:	c1 58       	rjmp	800074d2 <sd_mmc_mci_write_close+0xd6>
800074aa:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800074ae:	30 18       	mov	r8,1
800074b0:	f0 09 18 00 	cp.b	r9,r8
800074b4:	c0 81       	brne	800074c4 <sd_mmc_mci_write_close+0xc8>
800074b6:	31 3c       	mov	r12,19
800074b8:	f0 1f 00 0c 	mcall	800074e8 <sd_mmc_mci_write_close+0xec>
800074bc:	18 98       	mov	r8,r12
800074be:	58 08       	cp.w	r8,0
800074c0:	cf b0       	breq	800074b6 <sd_mmc_mci_write_close+0xba>
800074c2:	c0 78       	rjmp	800074d0 <sd_mmc_mci_write_close+0xd4>
800074c4:	31 dc       	mov	r12,29
800074c6:	f0 1f 00 09 	mcall	800074e8 <sd_mmc_mci_write_close+0xec>
800074ca:	18 98       	mov	r8,r12
800074cc:	58 08       	cp.w	r8,0
800074ce:	cf b0       	breq	800074c4 <sd_mmc_mci_write_close+0xc8>
800074d0:	30 18       	mov	r8,1
800074d2:	10 9c       	mov	r12,r8
800074d4:	2f bd       	sub	sp,-20
800074d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800074da:	00 00       	add	r0,r0
800074dc:	00 00       	add	r0,r0
800074de:	01 34       	ld.ub	r4,r0++
800074e0:	00 00       	add	r0,r0
800074e2:	07 b0       	ld.ub	r0,r3[0x3]
800074e4:	80 00       	ld.sh	r0,r0[0x0]
800074e6:	93 38       	st.w	r9[0xc],r8
800074e8:	80 00       	ld.sh	r0,r0[0x0]
800074ea:	8d 64       	st.w	r6[0x18],r4

800074ec <int2alpha>:
800074ec:	eb cd 40 80 	pushm	r7,lr
800074f0:	1a 97       	mov	r7,sp
800074f2:	20 5d       	sub	sp,20
800074f4:	18 98       	mov	r8,r12
800074f6:	ef 4b ff ec 	st.w	r7[-20],r11
800074fa:	ef 58 ff f0 	st.h	r7[-16],r8
800074fe:	30 08       	mov	r8,0
80007500:	ef 68 ff fe 	st.b	r7[-2],r8
80007504:	30 08       	mov	r8,0
80007506:	ef 68 ff ff 	st.b	r7[-1],r8
8000750a:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000750e:	30 08       	mov	r8,0
80007510:	f0 09 19 00 	cp.h	r9,r8
80007514:	c2 c1       	brne	8000756c <int2alpha+0x80>
80007516:	c5 68       	rjmp	800075c2 <int2alpha+0xd6>
80007518:	ef 3b ff fe 	ld.ub	r11,r7[-2]
8000751c:	ef 1a ff f0 	ld.uh	r10,r7[-16]
80007520:	e0 68 cc cd 	mov	r8,52429
80007524:	ea 18 cc cc 	orh	r8,0xcccc
80007528:	f4 08 06 48 	mulu.d	r8,r10,r8
8000752c:	a3 99       	lsr	r9,0x3
8000752e:	12 98       	mov	r8,r9
80007530:	a3 68       	lsl	r8,0x2
80007532:	12 08       	add	r8,r9
80007534:	a1 78       	lsl	r8,0x1
80007536:	f4 08 01 08 	sub	r8,r10,r8
8000753a:	5c 88       	casts.h	r8
8000753c:	5c 58       	castu.b	r8
8000753e:	2d 08       	sub	r8,-48
80007540:	5c 58       	castu.b	r8
80007542:	ee 0b 00 09 	add	r9,r7,r11
80007546:	f3 68 ff f4 	st.b	r9[-12],r8
8000754a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000754e:	2f f8       	sub	r8,-1
80007550:	ef 68 ff fe 	st.b	r7[-2],r8
80007554:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80007558:	e0 68 cc cd 	mov	r8,52429
8000755c:	ea 18 cc cc 	orh	r8,0xcccc
80007560:	f2 08 06 48 	mulu.d	r8,r9,r8
80007564:	f2 08 16 03 	lsr	r8,r9,0x3
80007568:	ef 58 ff f0 	st.h	r7[-16],r8
8000756c:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007570:	30 08       	mov	r8,0
80007572:	f0 09 19 00 	cp.h	r9,r8
80007576:	cd 11       	brne	80007518 <int2alpha+0x2c>
80007578:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000757c:	ef 68 ff ff 	st.b	r7[-1],r8
80007580:	30 08       	mov	r8,0
80007582:	ef 68 ff fe 	st.b	r7[-2],r8
80007586:	c1 78       	rjmp	800075b4 <int2alpha+0xc8>
80007588:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000758c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007590:	10 09       	add	r9,r8
80007592:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80007596:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000759a:	f4 08 01 08 	sub	r8,r10,r8
8000759e:	20 18       	sub	r8,1
800075a0:	ee 08 00 08 	add	r8,r7,r8
800075a4:	f1 38 ff f4 	ld.ub	r8,r8[-12]
800075a8:	b2 88       	st.b	r9[0x0],r8
800075aa:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800075ae:	2f f8       	sub	r8,-1
800075b0:	ef 68 ff fe 	st.b	r7[-2],r8
800075b4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800075b8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800075bc:	f0 09 18 00 	cp.b	r9,r8
800075c0:	ce 43       	brcs	80007588 <int2alpha+0x9c>
800075c2:	2f bd       	sub	sp,-20
800075c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800075c8 <string_len>:
800075c8:	eb cd 40 80 	pushm	r7,lr
800075cc:	1a 97       	mov	r7,sp
800075ce:	20 2d       	sub	sp,8
800075d0:	ef 4c ff f8 	st.w	r7[-8],r12
800075d4:	30 08       	mov	r8,0
800075d6:	ef 68 ff ff 	st.b	r7[-1],r8
800075da:	c0 68       	rjmp	800075e6 <string_len+0x1e>
800075dc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800075e0:	2f f8       	sub	r8,-1
800075e2:	ef 68 ff ff 	st.b	r7[-1],r8
800075e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800075ea:	11 89       	ld.ub	r9,r8[0x0]
800075ec:	30 08       	mov	r8,0
800075ee:	f0 09 18 00 	cp.b	r9,r8
800075f2:	5f 18       	srne	r8
800075f4:	5c 58       	castu.b	r8
800075f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800075fa:	2f f9       	sub	r9,-1
800075fc:	ef 49 ff f8 	st.w	r7[-8],r9
80007600:	58 08       	cp.w	r8,0
80007602:	ce d1       	brne	800075dc <string_len+0x14>
80007604:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007608:	10 9c       	mov	r12,r8
8000760a:	2f ed       	sub	sp,-8
8000760c:	e3 cd 80 80 	ldm	sp++,r7,pc

80007610 <string_cat>:
80007610:	eb cd 40 80 	pushm	r7,lr
80007614:	1a 97       	mov	r7,sp
80007616:	20 2d       	sub	sp,8
80007618:	ef 4c ff fc 	st.w	r7[-4],r12
8000761c:	ef 4b ff f8 	st.w	r7[-8],r11
80007620:	c1 18       	rjmp	80007642 <string_cat+0x32>
80007622:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007626:	11 88       	ld.ub	r8,r8[0x0]
80007628:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000762c:	b2 88       	st.b	r9[0x0],r8
8000762e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007632:	2f f8       	sub	r8,-1
80007634:	ef 48 ff f8 	st.w	r7[-8],r8
80007638:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000763c:	2f f8       	sub	r8,-1
8000763e:	ef 48 ff fc 	st.w	r7[-4],r8
80007642:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007646:	11 88       	ld.ub	r8,r8[0x0]
80007648:	58 08       	cp.w	r8,0
8000764a:	ce c1       	brne	80007622 <string_cat+0x12>
8000764c:	2f ed       	sub	sp,-8
8000764e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007652:	d7 03       	nop

80007654 <sd_mmc_mci_read_multiple_sector>:
80007654:	eb cd 40 80 	pushm	r7,lr
80007658:	1a 97       	mov	r7,sp
8000765a:	20 5d       	sub	sp,20
8000765c:	18 99       	mov	r9,r12
8000765e:	16 98       	mov	r8,r11
80007660:	ef 4a ff ec 	st.w	r7[-20],r10
80007664:	ef 69 ff f4 	st.b	r7[-12],r9
80007668:	ef 58 ff f0 	st.h	r7[-16],r8
8000766c:	30 18       	mov	r8,1
8000766e:	ef 68 ff fa 	st.b	r7[-6],r8
80007672:	30 08       	mov	r8,0
80007674:	ef 68 ff fb 	st.b	r7[-5],r8
80007678:	30 08       	mov	r8,0
8000767a:	ef 58 ff fc 	st.h	r7[-4],r8
8000767e:	30 08       	mov	r8,0
80007680:	ef 68 ff ff 	st.b	r7[-1],r8
80007684:	c0 c8       	rjmp	8000769c <sd_mmc_mci_read_multiple_sector+0x48>
80007686:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000768a:	4f 6a       	lddpc	r10,80007860 <sd_mmc_mci_read_multiple_sector+0x20c>
8000768c:	30 08       	mov	r8,0
8000768e:	f4 09 0b 08 	st.b	r10[r9],r8
80007692:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007696:	2f f8       	sub	r8,-1
80007698:	ef 68 ff ff 	st.b	r7[-1],r8
8000769c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800076a0:	36 38       	mov	r8,99
800076a2:	f0 09 18 00 	cp.b	r9,r8
800076a6:	fe 98 ff f0 	brls	80007686 <sd_mmc_mci_read_multiple_sector+0x32>
800076aa:	4e f8       	lddpc	r8,80007864 <sd_mmc_mci_read_multiple_sector+0x210>
800076ac:	90 08       	ld.sh	r8,r8[0x0]
800076ae:	2f f8       	sub	r8,-1
800076b0:	5c 88       	casts.h	r8
800076b2:	4e d9       	lddpc	r9,80007864 <sd_mmc_mci_read_multiple_sector+0x210>
800076b4:	b2 08       	st.h	r9[0x0],r8
800076b6:	4e d9       	lddpc	r9,80007868 <sd_mmc_mci_read_multiple_sector+0x214>
800076b8:	30 08       	mov	r8,0
800076ba:	b2 08       	st.h	r9[0x0],r8
800076bc:	4e c8       	lddpc	r8,8000786c <sd_mmc_mci_read_multiple_sector+0x218>
800076be:	90 08       	ld.sh	r8,r8[0x0]
800076c0:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800076c4:	f2 08 00 08 	add	r8,r9,r8
800076c8:	5c 88       	casts.h	r8
800076ca:	4e 99       	lddpc	r9,8000786c <sd_mmc_mci_read_multiple_sector+0x218>
800076cc:	b2 08       	st.h	r9[0x0],r8
800076ce:	4e 68       	lddpc	r8,80007864 <sd_mmc_mci_read_multiple_sector+0x210>
800076d0:	90 08       	ld.sh	r8,r8[0x0]
800076d2:	5c 78       	castu.h	r8
800076d4:	4e 3b       	lddpc	r11,80007860 <sd_mmc_mci_read_multiple_sector+0x20c>
800076d6:	10 9c       	mov	r12,r8
800076d8:	f0 1f 00 66 	mcall	80007870 <sd_mmc_mci_read_multiple_sector+0x21c>
800076dc:	4e 1c       	lddpc	r12,80007860 <sd_mmc_mci_read_multiple_sector+0x20c>
800076de:	f0 1f 00 66 	mcall	80007874 <sd_mmc_mci_read_multiple_sector+0x220>
800076e2:	18 98       	mov	r8,r12
800076e4:	10 99       	mov	r9,r8
800076e6:	4d f8       	lddpc	r8,80007860 <sd_mmc_mci_read_multiple_sector+0x20c>
800076e8:	f2 08 00 08 	add	r8,r9,r8
800076ec:	10 9b       	mov	r11,r8
800076ee:	4e 3c       	lddpc	r12,80007878 <sd_mmc_mci_read_multiple_sector+0x224>
800076f0:	f0 1f 00 63 	mcall	8000787c <sd_mmc_mci_read_multiple_sector+0x228>
800076f4:	4d bc       	lddpc	r12,80007860 <sd_mmc_mci_read_multiple_sector+0x20c>
800076f6:	f0 1f 00 60 	mcall	80007874 <sd_mmc_mci_read_multiple_sector+0x220>
800076fa:	18 98       	mov	r8,r12
800076fc:	10 99       	mov	r9,r8
800076fe:	4d 98       	lddpc	r8,80007860 <sd_mmc_mci_read_multiple_sector+0x20c>
80007700:	10 09       	add	r9,r8
80007702:	4d b8       	lddpc	r8,8000786c <sd_mmc_mci_read_multiple_sector+0x218>
80007704:	90 08       	ld.sh	r8,r8[0x0]
80007706:	5c 78       	castu.h	r8
80007708:	12 9b       	mov	r11,r9
8000770a:	10 9c       	mov	r12,r8
8000770c:	f0 1f 00 59 	mcall	80007870 <sd_mmc_mci_read_multiple_sector+0x21c>
80007710:	4d 4c       	lddpc	r12,80007860 <sd_mmc_mci_read_multiple_sector+0x20c>
80007712:	f0 1f 00 59 	mcall	80007874 <sd_mmc_mci_read_multiple_sector+0x220>
80007716:	18 98       	mov	r8,r12
80007718:	10 99       	mov	r9,r8
8000771a:	4d 28       	lddpc	r8,80007860 <sd_mmc_mci_read_multiple_sector+0x20c>
8000771c:	f2 08 00 08 	add	r8,r9,r8
80007720:	10 9b       	mov	r11,r8
80007722:	4d 8c       	lddpc	r12,80007880 <sd_mmc_mci_read_multiple_sector+0x22c>
80007724:	f0 1f 00 56 	mcall	8000787c <sd_mmc_mci_read_multiple_sector+0x228>
80007728:	4d 7b       	lddpc	r11,80007884 <sd_mmc_mci_read_multiple_sector+0x230>
8000772a:	30 08       	mov	r8,0
8000772c:	1a d8       	st.w	--sp,r8
8000772e:	e0 68 ff ff 	mov	r8,65535
80007732:	31 e9       	mov	r9,30
80007734:	30 aa       	mov	r10,10
80007736:	4c bc       	lddpc	r12,80007860 <sd_mmc_mci_read_multiple_sector+0x20c>
80007738:	f0 1f 00 54 	mcall	80007888 <sd_mmc_mci_read_multiple_sector+0x234>
8000773c:	2f fd       	sub	sp,-4
8000773e:	c5 48       	rjmp	800077e6 <sd_mmc_mci_read_multiple_sector+0x192>
80007740:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007744:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007748:	5f 08       	sreq	r8
8000774a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000774e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007752:	2f f8       	sub	r8,-1
80007754:	ef 68 ff fb 	st.b	r7[-5],r8
80007758:	58 09       	cp.w	r9,0
8000775a:	c0 30       	breq	80007760 <sd_mmc_mci_read_multiple_sector+0x10c>
8000775c:	4c c8       	lddpc	r8,8000788c <sd_mmc_mci_read_multiple_sector+0x238>
8000775e:	c0 28       	rjmp	80007762 <sd_mmc_mci_read_multiple_sector+0x10e>
80007760:	4c c8       	lddpc	r8,80007890 <sd_mmc_mci_read_multiple_sector+0x23c>
80007762:	e0 6b 02 00 	mov	r11,512
80007766:	10 9c       	mov	r12,r8
80007768:	f0 1f 00 4b 	mcall	80007894 <sd_mmc_mci_read_multiple_sector+0x240>
8000776c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007770:	ec 18 00 01 	eorl	r8,0x1
80007774:	5c 58       	castu.b	r8
80007776:	c2 e0       	breq	800077d2 <sd_mmc_mci_read_multiple_sector+0x17e>
80007778:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000777c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007780:	c0 31       	brne	80007786 <sd_mmc_mci_read_multiple_sector+0x132>
80007782:	4c 38       	lddpc	r8,8000788c <sd_mmc_mci_read_multiple_sector+0x238>
80007784:	c0 28       	rjmp	80007788 <sd_mmc_mci_read_multiple_sector+0x134>
80007786:	4c 38       	lddpc	r8,80007890 <sd_mmc_mci_read_multiple_sector+0x23c>
80007788:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000778c:	e0 6a 02 00 	mov	r10,512
80007790:	10 9b       	mov	r11,r8
80007792:	fc 7c 00 00 	mov	r12,-196608
80007796:	f0 1f 00 41 	mcall	80007898 <sd_mmc_mci_read_multiple_sector+0x244>
8000779a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000779e:	f0 c8 fe 00 	sub	r8,r8,-512
800077a2:	ef 48 ff ec 	st.w	r7[-20],r8
800077a6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800077aa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800077ae:	c0 31       	brne	800077b4 <sd_mmc_mci_read_multiple_sector+0x160>
800077b0:	4b 78       	lddpc	r8,8000788c <sd_mmc_mci_read_multiple_sector+0x238>
800077b2:	c0 28       	rjmp	800077b6 <sd_mmc_mci_read_multiple_sector+0x162>
800077b4:	4b 78       	lddpc	r8,80007890 <sd_mmc_mci_read_multiple_sector+0x23c>
800077b6:	30 09       	mov	r9,0
800077b8:	e0 6a 02 00 	mov	r10,512
800077bc:	10 9b       	mov	r11,r8
800077be:	30 1c       	mov	r12,1
800077c0:	f0 1f 00 37 	mcall	8000789c <sd_mmc_mci_read_multiple_sector+0x248>
800077c4:	18 98       	mov	r8,r12
800077c6:	ec 18 00 01 	eorl	r8,0x1
800077ca:	5c 58       	castu.b	r8
800077cc:	c0 30       	breq	800077d2 <sd_mmc_mci_read_multiple_sector+0x17e>
800077ce:	30 08       	mov	r8,0
800077d0:	c4 48       	rjmp	80007858 <sd_mmc_mci_read_multiple_sector+0x204>
800077d2:	30 08       	mov	r8,0
800077d4:	ef 68 ff fa 	st.b	r7[-6],r8
800077d8:	f0 1f 00 32 	mcall	800078a0 <sd_mmc_mci_read_multiple_sector+0x24c>
800077dc:	18 98       	mov	r8,r12
800077de:	ec 18 00 01 	eorl	r8,0x1
800077e2:	5c 58       	castu.b	r8
800077e4:	cf a1       	brne	800077d8 <sd_mmc_mci_read_multiple_sector+0x184>
800077e6:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800077ea:	30 08       	mov	r8,0
800077ec:	f0 09 19 00 	cp.h	r9,r8
800077f0:	5f 18       	srne	r8
800077f2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800077f6:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800077fa:	20 18       	sub	r8,1
800077fc:	ef 58 ff f0 	st.h	r7[-16],r8
80007800:	58 09       	cp.w	r9,0
80007802:	c9 f1       	brne	80007740 <sd_mmc_mci_read_multiple_sector+0xec>
80007804:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007808:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000780c:	5c 58       	castu.b	r8
8000780e:	c0 30       	breq	80007814 <sd_mmc_mci_read_multiple_sector+0x1c0>
80007810:	49 f8       	lddpc	r8,8000788c <sd_mmc_mci_read_multiple_sector+0x238>
80007812:	c0 28       	rjmp	80007816 <sd_mmc_mci_read_multiple_sector+0x1c2>
80007814:	49 f8       	lddpc	r8,80007890 <sd_mmc_mci_read_multiple_sector+0x23c>
80007816:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000781a:	e0 6a 02 00 	mov	r10,512
8000781e:	10 9b       	mov	r11,r8
80007820:	fc 7c 00 00 	mov	r12,-196608
80007824:	f0 1f 00 1d 	mcall	80007898 <sd_mmc_mci_read_multiple_sector+0x244>
80007828:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000782c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007830:	5c 58       	castu.b	r8
80007832:	c0 30       	breq	80007838 <sd_mmc_mci_read_multiple_sector+0x1e4>
80007834:	49 68       	lddpc	r8,8000788c <sd_mmc_mci_read_multiple_sector+0x238>
80007836:	c0 28       	rjmp	8000783a <sd_mmc_mci_read_multiple_sector+0x1e6>
80007838:	49 68       	lddpc	r8,80007890 <sd_mmc_mci_read_multiple_sector+0x23c>
8000783a:	30 09       	mov	r9,0
8000783c:	e0 6a 02 00 	mov	r10,512
80007840:	10 9b       	mov	r11,r8
80007842:	30 1c       	mov	r12,1
80007844:	f0 1f 00 16 	mcall	8000789c <sd_mmc_mci_read_multiple_sector+0x248>
80007848:	18 98       	mov	r8,r12
8000784a:	ec 18 00 01 	eorl	r8,0x1
8000784e:	5c 58       	castu.b	r8
80007850:	c0 30       	breq	80007856 <sd_mmc_mci_read_multiple_sector+0x202>
80007852:	30 08       	mov	r8,0
80007854:	c0 28       	rjmp	80007858 <sd_mmc_mci_read_multiple_sector+0x204>
80007856:	30 18       	mov	r8,1
80007858:	10 9c       	mov	r12,r8
8000785a:	2f bd       	sub	sp,-20
8000785c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007860:	00 00       	add	r0,r0
80007862:	06 28       	rsub	r8,r3
80007864:	00 00       	add	r0,r0
80007866:	06 90       	mov	r0,r3
80007868:	00 00       	add	r0,r0
8000786a:	06 8c       	andn	r12,r3
8000786c:	00 00       	add	r0,r0
8000786e:	06 8e       	andn	lr,r3
80007870:	80 00       	ld.sh	r0,r0[0x0]
80007872:	74 ec       	ld.w	r12,r10[0x38]
80007874:	80 00       	ld.sh	r0,r0[0x0]
80007876:	75 c8       	ld.w	r8,r10[0x70]
80007878:	80 00       	ld.sh	r0,r0[0x0]
8000787a:	5e 9c       	retgt	r12
8000787c:	80 00       	ld.sh	r0,r0[0x0]
8000787e:	76 10       	ld.w	r0,r11[0x4]
80007880:	80 00       	ld.sh	r0,r0[0x0]
80007882:	5e ac       	retle	r12
80007884:	80 00       	ld.sh	r0,r0[0x0]
80007886:	ed b4       	*unknown*
80007888:	80 00       	ld.sh	r0,r0[0x0]
8000788a:	45 0c       	lddsp	r12,sp[0x140]
8000788c:	00 00       	add	r0,r0
8000788e:	0b e0       	ld.ub	r0,r5[0x6]
80007890:	00 00       	add	r0,r0
80007892:	09 d8       	ld.ub	r8,r4[0x5]
80007894:	80 00       	ld.sh	r0,r0[0x0]
80007896:	6e a0       	ld.w	r0,r7[0x28]
80007898:	80 00       	ld.sh	r0,r0[0x0]
8000789a:	41 1c       	lddsp	r12,sp[0x44]
8000789c:	80 00       	ld.sh	r0,r0[0x0]
8000789e:	d0 28       	*unknown*
800078a0:	80 00       	ld.sh	r0,r0[0x0]
800078a2:	6e f0       	ld.w	r0,r7[0x3c]

800078a4 <sd_mmc_mci_write_multiple_sector>:
800078a4:	eb cd 40 80 	pushm	r7,lr
800078a8:	1a 97       	mov	r7,sp
800078aa:	20 5d       	sub	sp,20
800078ac:	18 99       	mov	r9,r12
800078ae:	16 98       	mov	r8,r11
800078b0:	ef 4a ff ec 	st.w	r7[-20],r10
800078b4:	ef 69 ff f4 	st.b	r7[-12],r9
800078b8:	ef 58 ff f0 	st.h	r7[-16],r8
800078bc:	30 18       	mov	r8,1
800078be:	ef 68 ff fa 	st.b	r7[-6],r8
800078c2:	30 08       	mov	r8,0
800078c4:	ef 68 ff fb 	st.b	r7[-5],r8
800078c8:	30 08       	mov	r8,0
800078ca:	ef 58 ff fc 	st.h	r7[-4],r8
800078ce:	30 08       	mov	r8,0
800078d0:	ef 68 ff ff 	st.b	r7[-1],r8
800078d4:	c0 c8       	rjmp	800078ec <sd_mmc_mci_write_multiple_sector+0x48>
800078d6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800078da:	4f 6a       	lddpc	r10,80007ab0 <sd_mmc_mci_write_multiple_sector+0x20c>
800078dc:	30 08       	mov	r8,0
800078de:	f4 09 0b 08 	st.b	r10[r9],r8
800078e2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800078e6:	2f f8       	sub	r8,-1
800078e8:	ef 68 ff ff 	st.b	r7[-1],r8
800078ec:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800078f0:	36 38       	mov	r8,99
800078f2:	f0 09 18 00 	cp.b	r9,r8
800078f6:	fe 98 ff f0 	brls	800078d6 <sd_mmc_mci_write_multiple_sector+0x32>
800078fa:	4e f8       	lddpc	r8,80007ab4 <sd_mmc_mci_write_multiple_sector+0x210>
800078fc:	90 08       	ld.sh	r8,r8[0x0]
800078fe:	2f f8       	sub	r8,-1
80007900:	5c 88       	casts.h	r8
80007902:	4e d9       	lddpc	r9,80007ab4 <sd_mmc_mci_write_multiple_sector+0x210>
80007904:	b2 08       	st.h	r9[0x0],r8
80007906:	4e d9       	lddpc	r9,80007ab8 <sd_mmc_mci_write_multiple_sector+0x214>
80007908:	30 08       	mov	r8,0
8000790a:	b2 08       	st.h	r9[0x0],r8
8000790c:	4e c8       	lddpc	r8,80007abc <sd_mmc_mci_write_multiple_sector+0x218>
8000790e:	90 08       	ld.sh	r8,r8[0x0]
80007910:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007914:	f2 08 00 08 	add	r8,r9,r8
80007918:	5c 88       	casts.h	r8
8000791a:	4e 99       	lddpc	r9,80007abc <sd_mmc_mci_write_multiple_sector+0x218>
8000791c:	b2 08       	st.h	r9[0x0],r8
8000791e:	4e 68       	lddpc	r8,80007ab4 <sd_mmc_mci_write_multiple_sector+0x210>
80007920:	90 08       	ld.sh	r8,r8[0x0]
80007922:	5c 78       	castu.h	r8
80007924:	4e 3b       	lddpc	r11,80007ab0 <sd_mmc_mci_write_multiple_sector+0x20c>
80007926:	10 9c       	mov	r12,r8
80007928:	f0 1f 00 66 	mcall	80007ac0 <sd_mmc_mci_write_multiple_sector+0x21c>
8000792c:	4e 1c       	lddpc	r12,80007ab0 <sd_mmc_mci_write_multiple_sector+0x20c>
8000792e:	f0 1f 00 66 	mcall	80007ac4 <sd_mmc_mci_write_multiple_sector+0x220>
80007932:	18 98       	mov	r8,r12
80007934:	10 99       	mov	r9,r8
80007936:	4d f8       	lddpc	r8,80007ab0 <sd_mmc_mci_write_multiple_sector+0x20c>
80007938:	f2 08 00 08 	add	r8,r9,r8
8000793c:	10 9b       	mov	r11,r8
8000793e:	4e 3c       	lddpc	r12,80007ac8 <sd_mmc_mci_write_multiple_sector+0x224>
80007940:	f0 1f 00 63 	mcall	80007acc <sd_mmc_mci_write_multiple_sector+0x228>
80007944:	4d bc       	lddpc	r12,80007ab0 <sd_mmc_mci_write_multiple_sector+0x20c>
80007946:	f0 1f 00 60 	mcall	80007ac4 <sd_mmc_mci_write_multiple_sector+0x220>
8000794a:	18 98       	mov	r8,r12
8000794c:	10 99       	mov	r9,r8
8000794e:	4d 98       	lddpc	r8,80007ab0 <sd_mmc_mci_write_multiple_sector+0x20c>
80007950:	10 09       	add	r9,r8
80007952:	4d b8       	lddpc	r8,80007abc <sd_mmc_mci_write_multiple_sector+0x218>
80007954:	90 08       	ld.sh	r8,r8[0x0]
80007956:	5c 78       	castu.h	r8
80007958:	12 9b       	mov	r11,r9
8000795a:	10 9c       	mov	r12,r8
8000795c:	f0 1f 00 59 	mcall	80007ac0 <sd_mmc_mci_write_multiple_sector+0x21c>
80007960:	4d 4c       	lddpc	r12,80007ab0 <sd_mmc_mci_write_multiple_sector+0x20c>
80007962:	f0 1f 00 59 	mcall	80007ac4 <sd_mmc_mci_write_multiple_sector+0x220>
80007966:	18 98       	mov	r8,r12
80007968:	10 99       	mov	r9,r8
8000796a:	4d 28       	lddpc	r8,80007ab0 <sd_mmc_mci_write_multiple_sector+0x20c>
8000796c:	f2 08 00 08 	add	r8,r9,r8
80007970:	10 9b       	mov	r11,r8
80007972:	4d 8c       	lddpc	r12,80007ad0 <sd_mmc_mci_write_multiple_sector+0x22c>
80007974:	f0 1f 00 56 	mcall	80007acc <sd_mmc_mci_write_multiple_sector+0x228>
80007978:	4d 7b       	lddpc	r11,80007ad4 <sd_mmc_mci_write_multiple_sector+0x230>
8000797a:	30 08       	mov	r8,0
8000797c:	1a d8       	st.w	--sp,r8
8000797e:	e0 68 ff ff 	mov	r8,65535
80007982:	33 29       	mov	r9,50
80007984:	30 aa       	mov	r10,10
80007986:	4c bc       	lddpc	r12,80007ab0 <sd_mmc_mci_write_multiple_sector+0x20c>
80007988:	f0 1f 00 54 	mcall	80007ad8 <sd_mmc_mci_write_multiple_sector+0x234>
8000798c:	2f fd       	sub	sp,-4
8000798e:	c5 58       	rjmp	80007a38 <sd_mmc_mci_write_multiple_sector+0x194>
80007990:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007994:	ec 18 00 01 	eorl	r8,0x1
80007998:	5c 58       	castu.b	r8
8000799a:	c2 70       	breq	800079e8 <sd_mmc_mci_write_multiple_sector+0x144>
8000799c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800079a0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079a4:	5c 58       	castu.b	r8
800079a6:	c0 30       	breq	800079ac <sd_mmc_mci_write_multiple_sector+0x108>
800079a8:	4c d8       	lddpc	r8,80007adc <sd_mmc_mci_write_multiple_sector+0x238>
800079aa:	c0 28       	rjmp	800079ae <sd_mmc_mci_write_multiple_sector+0x10a>
800079ac:	4c d8       	lddpc	r8,80007ae0 <sd_mmc_mci_write_multiple_sector+0x23c>
800079ae:	ee f9 ff ec 	ld.w	r9,r7[-20]
800079b2:	e0 6a 02 00 	mov	r10,512
800079b6:	10 9b       	mov	r11,r8
800079b8:	fc 7c 00 00 	mov	r12,-196608
800079bc:	f0 1f 00 4a 	mcall	80007ae4 <sd_mmc_mci_write_multiple_sector+0x240>
800079c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800079c4:	f0 c8 fe 00 	sub	r8,r8,-512
800079c8:	ef 48 ff ec 	st.w	r7[-20],r8
800079cc:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800079d0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079d4:	5c 58       	castu.b	r8
800079d6:	c0 30       	breq	800079dc <sd_mmc_mci_write_multiple_sector+0x138>
800079d8:	4c 18       	lddpc	r8,80007adc <sd_mmc_mci_write_multiple_sector+0x238>
800079da:	c0 28       	rjmp	800079de <sd_mmc_mci_write_multiple_sector+0x13a>
800079dc:	4c 18       	lddpc	r8,80007ae0 <sd_mmc_mci_write_multiple_sector+0x23c>
800079de:	e0 6b 02 00 	mov	r11,512
800079e2:	10 9c       	mov	r12,r8
800079e4:	f0 1f 00 41 	mcall	80007ae8 <sd_mmc_mci_write_multiple_sector+0x244>
800079e8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800079ec:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079f0:	5f 08       	sreq	r8
800079f2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800079f6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800079fa:	2f f8       	sub	r8,-1
800079fc:	ef 68 ff fb 	st.b	r7[-5],r8
80007a00:	58 09       	cp.w	r9,0
80007a02:	c0 30       	breq	80007a08 <sd_mmc_mci_write_multiple_sector+0x164>
80007a04:	4b 68       	lddpc	r8,80007adc <sd_mmc_mci_write_multiple_sector+0x238>
80007a06:	c0 28       	rjmp	80007a0a <sd_mmc_mci_write_multiple_sector+0x166>
80007a08:	4b 68       	lddpc	r8,80007ae0 <sd_mmc_mci_write_multiple_sector+0x23c>
80007a0a:	30 09       	mov	r9,0
80007a0c:	e0 6a 02 00 	mov	r10,512
80007a10:	10 9b       	mov	r11,r8
80007a12:	30 0c       	mov	r12,0
80007a14:	f0 1f 00 36 	mcall	80007aec <sd_mmc_mci_write_multiple_sector+0x248>
80007a18:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007a1c:	ec 18 00 01 	eorl	r8,0x1
80007a20:	5c 58       	castu.b	r8
80007a22:	c0 80       	breq	80007a32 <sd_mmc_mci_write_multiple_sector+0x18e>
80007a24:	f0 1f 00 33 	mcall	80007af0 <sd_mmc_mci_write_multiple_sector+0x24c>
80007a28:	18 98       	mov	r8,r12
80007a2a:	ec 18 00 01 	eorl	r8,0x1
80007a2e:	5c 58       	castu.b	r8
80007a30:	cf a1       	brne	80007a24 <sd_mmc_mci_write_multiple_sector+0x180>
80007a32:	30 08       	mov	r8,0
80007a34:	ef 68 ff fa 	st.b	r7[-6],r8
80007a38:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007a3c:	30 08       	mov	r8,0
80007a3e:	f0 09 19 00 	cp.h	r9,r8
80007a42:	5f 18       	srne	r8
80007a44:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007a48:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80007a4c:	20 18       	sub	r8,1
80007a4e:	ef 58 ff f0 	st.h	r7[-16],r8
80007a52:	58 09       	cp.w	r9,0
80007a54:	c9 e1       	brne	80007990 <sd_mmc_mci_write_multiple_sector+0xec>
80007a56:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007a5a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007a5e:	5c 58       	castu.b	r8
80007a60:	c0 30       	breq	80007a66 <sd_mmc_mci_write_multiple_sector+0x1c2>
80007a62:	49 f8       	lddpc	r8,80007adc <sd_mmc_mci_write_multiple_sector+0x238>
80007a64:	c0 28       	rjmp	80007a68 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007a66:	49 f8       	lddpc	r8,80007ae0 <sd_mmc_mci_write_multiple_sector+0x23c>
80007a68:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007a6c:	e0 6a 02 00 	mov	r10,512
80007a70:	10 9b       	mov	r11,r8
80007a72:	fc 7c 00 00 	mov	r12,-196608
80007a76:	f0 1f 00 1c 	mcall	80007ae4 <sd_mmc_mci_write_multiple_sector+0x240>
80007a7a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007a7e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007a82:	5c 58       	castu.b	r8
80007a84:	c0 30       	breq	80007a8a <sd_mmc_mci_write_multiple_sector+0x1e6>
80007a86:	49 68       	lddpc	r8,80007adc <sd_mmc_mci_write_multiple_sector+0x238>
80007a88:	c0 28       	rjmp	80007a8c <sd_mmc_mci_write_multiple_sector+0x1e8>
80007a8a:	49 68       	lddpc	r8,80007ae0 <sd_mmc_mci_write_multiple_sector+0x23c>
80007a8c:	e0 6b 02 00 	mov	r11,512
80007a90:	10 9c       	mov	r12,r8
80007a92:	f0 1f 00 16 	mcall	80007ae8 <sd_mmc_mci_write_multiple_sector+0x244>
80007a96:	f0 1f 00 17 	mcall	80007af0 <sd_mmc_mci_write_multiple_sector+0x24c>
80007a9a:	18 98       	mov	r8,r12
80007a9c:	ec 18 00 01 	eorl	r8,0x1
80007aa0:	5c 58       	castu.b	r8
80007aa2:	cf a1       	brne	80007a96 <sd_mmc_mci_write_multiple_sector+0x1f2>
80007aa4:	30 18       	mov	r8,1
80007aa6:	10 9c       	mov	r12,r8
80007aa8:	2f bd       	sub	sp,-20
80007aaa:	e3 cd 80 80 	ldm	sp++,r7,pc
80007aae:	00 00       	add	r0,r0
80007ab0:	00 00       	add	r0,r0
80007ab2:	06 28       	rsub	r8,r3
80007ab4:	00 00       	add	r0,r0
80007ab6:	06 90       	mov	r0,r3
80007ab8:	00 00       	add	r0,r0
80007aba:	06 8e       	andn	lr,r3
80007abc:	00 00       	add	r0,r0
80007abe:	06 8c       	andn	r12,r3
80007ac0:	80 00       	ld.sh	r0,r0[0x0]
80007ac2:	74 ec       	ld.w	r12,r10[0x38]
80007ac4:	80 00       	ld.sh	r0,r0[0x0]
80007ac6:	75 c8       	ld.w	r8,r10[0x70]
80007ac8:	80 00       	ld.sh	r0,r0[0x0]
80007aca:	5e b8       	rethi	r8
80007acc:	80 00       	ld.sh	r0,r0[0x0]
80007ace:	76 10       	ld.w	r0,r11[0x4]
80007ad0:	80 00       	ld.sh	r0,r0[0x0]
80007ad2:	5e ac       	retle	r12
80007ad4:	80 00       	ld.sh	r0,r0[0x0]
80007ad6:	ed b4       	*unknown*
80007ad8:	80 00       	ld.sh	r0,r0[0x0]
80007ada:	45 0c       	lddsp	r12,sp[0x140]
80007adc:	00 00       	add	r0,r0
80007ade:	0b e0       	ld.ub	r0,r5[0x6]
80007ae0:	00 00       	add	r0,r0
80007ae2:	09 d8       	ld.ub	r8,r4[0x5]
80007ae4:	80 00       	ld.sh	r0,r0[0x0]
80007ae6:	40 14       	lddsp	r4,sp[0x4]
80007ae8:	80 00       	ld.sh	r0,r0[0x0]
80007aea:	6f 10       	ld.w	r0,r7[0x44]
80007aec:	80 00       	ld.sh	r0,r0[0x0]
80007aee:	d0 28       	*unknown*
80007af0:	80 00       	ld.sh	r0,r0[0x0]
80007af2:	6f 60       	ld.w	r0,r7[0x58]

80007af4 <sd_mmc_mci_cmd_send_status>:
80007af4:	eb cd 40 80 	pushm	r7,lr
80007af8:	1a 97       	mov	r7,sp
80007afa:	20 1d       	sub	sp,4
80007afc:	18 98       	mov	r8,r12
80007afe:	ef 68 ff fc 	st.b	r7[-4],r8
80007b02:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b06:	30 18       	mov	r8,1
80007b08:	f0 09 18 00 	cp.b	r9,r8
80007b0c:	e0 88 00 04 	brls	80007b14 <sd_mmc_mci_cmd_send_status+0x20>
80007b10:	30 08       	mov	r8,0
80007b12:	c2 28       	rjmp	80007b56 <sd_mmc_mci_cmd_send_status+0x62>
80007b14:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007b18:	49 29       	lddpc	r9,80007b60 <sd_mmc_mci_cmd_send_status+0x6c>
80007b1a:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007b1e:	10 9a       	mov	r10,r8
80007b20:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b24:	49 08       	lddpc	r8,80007b64 <sd_mmc_mci_cmd_send_status+0x70>
80007b26:	70 08       	ld.w	r8,r8[0x0]
80007b28:	12 9b       	mov	r11,r9
80007b2a:	10 9c       	mov	r12,r8
80007b2c:	f0 1f 00 0f 	mcall	80007b68 <sd_mmc_mci_cmd_send_status+0x74>
80007b30:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b34:	48 e8       	lddpc	r8,80007b6c <sd_mmc_mci_cmd_send_status+0x78>
80007b36:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80007b3a:	48 b8       	lddpc	r8,80007b64 <sd_mmc_mci_cmd_send_status+0x70>
80007b3c:	70 08       	ld.w	r8,r8[0x0]
80007b3e:	12 9a       	mov	r10,r9
80007b40:	e0 6b 10 4d 	mov	r11,4173
80007b44:	10 9c       	mov	r12,r8
80007b46:	f0 1f 00 0b 	mcall	80007b70 <sd_mmc_mci_cmd_send_status+0x7c>
80007b4a:	18 98       	mov	r8,r12
80007b4c:	58 08       	cp.w	r8,0
80007b4e:	c0 30       	breq	80007b54 <sd_mmc_mci_cmd_send_status+0x60>
80007b50:	30 08       	mov	r8,0
80007b52:	c0 28       	rjmp	80007b56 <sd_mmc_mci_cmd_send_status+0x62>
80007b54:	30 18       	mov	r8,1
80007b56:	10 9c       	mov	r12,r8
80007b58:	2f fd       	sub	sp,-4
80007b5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b5e:	00 00       	add	r0,r0
80007b60:	00 00       	add	r0,r0
80007b62:	0b d8       	ld.ub	r8,r5[0x5]
80007b64:	00 00       	add	r0,r0
80007b66:	01 34       	ld.ub	r4,r0++
80007b68:	80 00       	ld.sh	r0,r0[0x0]
80007b6a:	94 d0       	ld.uh	r0,r10[0xa]
80007b6c:	00 00       	add	r0,r0
80007b6e:	09 c8       	ld.ub	r8,r4[0x4]
80007b70:	80 00       	ld.sh	r0,r0[0x0]
80007b72:	93 38       	st.w	r9[0xc],r8

80007b74 <sd_mmc_mci_test_unit_ready>:
 */
//! @{


Ctrl_status sd_mmc_mci_test_unit_ready(uint8_t slot)
{
80007b74:	eb cd 40 80 	pushm	r7,lr
80007b78:	1a 97       	mov	r7,sp
80007b7a:	20 1d       	sub	sp,4
80007b7c:	18 98       	mov	r8,r12
80007b7e:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS) return CTRL_FAIL;
80007b82:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b86:	30 18       	mov	r8,1
80007b88:	f0 09 18 00 	cp.b	r9,r8
80007b8c:	e0 88 00 04 	brls	80007b94 <sd_mmc_mci_test_unit_ready+0x20>
80007b90:	30 18       	mov	r8,1
80007b92:	c4 d8       	rjmp	80007c2c <sd_mmc_mci_test_unit_ready+0xb8>

  Sd_mmc_mci_access_signal_on();
  switch (sd_mmc_mci_presence_status[slot])
80007b94:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007b98:	4a 79       	lddpc	r9,80007c34 <sd_mmc_mci_test_unit_ready+0xc0>
80007b9a:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007b9e:	58 18       	cp.w	r8,1
80007ba0:	c1 d0       	breq	80007bda <sd_mmc_mci_test_unit_ready+0x66>
80007ba2:	58 28       	cp.w	r8,2
80007ba4:	c3 50       	breq	80007c0e <sd_mmc_mci_test_unit_ready+0x9a>
80007ba6:	58 08       	cp.w	r8,0
80007ba8:	c3 b1       	brne	80007c1e <sd_mmc_mci_test_unit_ready+0xaa>
  {
    case SD_MMC_REMOVED:
      sd_mmc_mci_init_done[slot] = false;
80007baa:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007bae:	4a 3a       	lddpc	r10,80007c38 <sd_mmc_mci_test_unit_ready+0xc4>
80007bb0:	30 08       	mov	r8,0
80007bb2:	f4 09 0b 08 	st.b	r10[r9],r8
      if (sd_mmc_mci_mem_check(slot))
80007bb6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007bba:	10 9c       	mov	r12,r8
80007bbc:	f0 1f 00 20 	mcall	80007c3c <sd_mmc_mci_test_unit_ready+0xc8>
80007bc0:	18 98       	mov	r8,r12
80007bc2:	58 08       	cp.w	r8,0
80007bc4:	c0 90       	breq	80007bd6 <sd_mmc_mci_test_unit_ready+0x62>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_INSERTED;
80007bc6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007bca:	49 ba       	lddpc	r10,80007c34 <sd_mmc_mci_test_unit_ready+0xc0>
80007bcc:	30 18       	mov	r8,1
80007bce:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
80007bd2:	30 38       	mov	r8,3
80007bd4:	c2 c8       	rjmp	80007c2c <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
80007bd6:	30 28       	mov	r8,2
80007bd8:	c2 a8       	rjmp	80007c2c <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_INSERTED:
      if (!sd_mmc_mci_mem_check(slot))
80007bda:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007bde:	10 9c       	mov	r12,r8
80007be0:	f0 1f 00 17 	mcall	80007c3c <sd_mmc_mci_test_unit_ready+0xc8>
80007be4:	18 98       	mov	r8,r12
80007be6:	ec 18 00 01 	eorl	r8,0x1
80007bea:	5c 58       	castu.b	r8
80007bec:	c0 f0       	breq	80007c0a <sd_mmc_mci_test_unit_ready+0x96>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVING;
80007bee:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007bf2:	49 1a       	lddpc	r10,80007c34 <sd_mmc_mci_test_unit_ready+0xc0>
80007bf4:	30 28       	mov	r8,2
80007bf6:	f4 09 0b 08 	st.b	r10[r9],r8
        sd_mmc_mci_init_done[slot] = false;
80007bfa:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007bfe:	48 fa       	lddpc	r10,80007c38 <sd_mmc_mci_test_unit_ready+0xc4>
80007c00:	30 08       	mov	r8,0
80007c02:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
80007c06:	30 38       	mov	r8,3
80007c08:	c1 28       	rjmp	80007c2c <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_GOOD;
80007c0a:	30 08       	mov	r8,0
80007c0c:	c1 08       	rjmp	80007c2c <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_REMOVING:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
80007c0e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c12:	48 9a       	lddpc	r10,80007c34 <sd_mmc_mci_test_unit_ready+0xc0>
80007c14:	30 08       	mov	r8,0
80007c16:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
80007c1a:	30 28       	mov	r8,2
80007c1c:	c0 88       	rjmp	80007c2c <sd_mmc_mci_test_unit_ready+0xb8>

    default:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
80007c1e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c22:	48 5a       	lddpc	r10,80007c34 <sd_mmc_mci_test_unit_ready+0xc0>
80007c24:	30 08       	mov	r8,0
80007c26:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_BUSY;
80007c2a:	30 38       	mov	r8,3
  }
}
80007c2c:	10 9c       	mov	r12,r8
80007c2e:	2f fd       	sub	sp,-4
80007c30:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c34:	00 00       	add	r0,r0
80007c36:	01 38       	ld.ub	r8,r0++
80007c38:	00 00       	add	r0,r0
80007c3a:	06 14       	sub	r4,r3
80007c3c:	80 00       	ld.sh	r0,r0[0x0]
80007c3e:	6f 80       	ld.w	r0,r7[0x60]

80007c40 <sd_mmc_mci_test_unit_ready_0>:


Ctrl_status sd_mmc_mci_test_unit_ready_0(void)
{
80007c40:	eb cd 40 80 	pushm	r7,lr
80007c44:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(0);
80007c46:	30 0c       	mov	r12,0
80007c48:	f0 1f 00 03 	mcall	80007c54 <sd_mmc_mci_test_unit_ready_0+0x14>
80007c4c:	18 98       	mov	r8,r12
}
80007c4e:	10 9c       	mov	r12,r8
80007c50:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c54:	80 00       	ld.sh	r0,r0[0x0]
80007c56:	7b 74       	ld.w	r4,sp[0x5c]

80007c58 <sd_mmc_mci_test_unit_ready_1>:


Ctrl_status sd_mmc_mci_test_unit_ready_1(void)
{
80007c58:	eb cd 40 80 	pushm	r7,lr
80007c5c:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(1);
80007c5e:	30 1c       	mov	r12,1
80007c60:	f0 1f 00 03 	mcall	80007c6c <sd_mmc_mci_test_unit_ready_1+0x14>
80007c64:	18 98       	mov	r8,r12
}
80007c66:	10 9c       	mov	r12,r8
80007c68:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c6c:	80 00       	ld.sh	r0,r0[0x0]
80007c6e:	7b 74       	ld.w	r4,sp[0x5c]

80007c70 <sd_mmc_mci_read_capacity>:


Ctrl_status sd_mmc_mci_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
80007c70:	eb cd 40 80 	pushm	r7,lr
80007c74:	1a 97       	mov	r7,sp
80007c76:	20 2d       	sub	sp,8
80007c78:	18 98       	mov	r8,r12
80007c7a:	ef 4b ff f8 	st.w	r7[-8],r11
80007c7e:	ef 68 ff fc 	st.b	r7[-4],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80007c82:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007c86:	10 9c       	mov	r12,r8
80007c88:	f0 1f 00 0c 	mcall	80007cb8 <sd_mmc_mci_read_capacity+0x48>
80007c8c:	18 98       	mov	r8,r12
80007c8e:	ec 18 00 01 	eorl	r8,0x1
80007c92:	5c 58       	castu.b	r8
80007c94:	c0 30       	breq	80007c9a <sd_mmc_mci_read_capacity+0x2a>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80007c96:	30 28       	mov	r8,2
80007c98:	c0 c8       	rjmp	80007cb0 <sd_mmc_mci_read_capacity+0x40>
   }
   *nb_sector = g_card_size[slot]-1;
80007c9a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c9e:	48 88       	lddpc	r8,80007cbc <sd_mmc_mci_read_capacity+0x4c>
80007ca0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007ca4:	f0 c9 00 01 	sub	r9,r8,1
80007ca8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007cac:	91 09       	st.w	r8[0x0],r9
   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80007cae:	30 08       	mov	r8,0
}
80007cb0:	10 9c       	mov	r12,r8
80007cb2:	2f ed       	sub	sp,-8
80007cb4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007cb8:	80 00       	ld.sh	r0,r0[0x0]
80007cba:	6f 80       	ld.w	r0,r7[0x60]
80007cbc:	00 00       	add	r0,r0
80007cbe:	09 d0       	ld.ub	r0,r4[0x5]

80007cc0 <sd_mmc_mci_read_capacity_0>:


Ctrl_status sd_mmc_mci_read_capacity_0(uint32_t *nb_sector)
{
80007cc0:	eb cd 40 80 	pushm	r7,lr
80007cc4:	1a 97       	mov	r7,sp
80007cc6:	20 1d       	sub	sp,4
80007cc8:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(0, nb_sector);
80007ccc:	ee fb ff fc 	ld.w	r11,r7[-4]
80007cd0:	30 0c       	mov	r12,0
80007cd2:	f0 1f 00 04 	mcall	80007ce0 <sd_mmc_mci_read_capacity_0+0x20>
80007cd6:	18 98       	mov	r8,r12
}
80007cd8:	10 9c       	mov	r12,r8
80007cda:	2f fd       	sub	sp,-4
80007cdc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ce0:	80 00       	ld.sh	r0,r0[0x0]
80007ce2:	7c 70       	ld.w	r0,lr[0x1c]

80007ce4 <sd_mmc_mci_read_capacity_1>:


Ctrl_status sd_mmc_mci_read_capacity_1(uint32_t *nb_sector)
{
80007ce4:	eb cd 40 80 	pushm	r7,lr
80007ce8:	1a 97       	mov	r7,sp
80007cea:	20 1d       	sub	sp,4
80007cec:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(1, nb_sector);
80007cf0:	ee fb ff fc 	ld.w	r11,r7[-4]
80007cf4:	30 1c       	mov	r12,1
80007cf6:	f0 1f 00 04 	mcall	80007d04 <sd_mmc_mci_read_capacity_1+0x20>
80007cfa:	18 98       	mov	r8,r12
}
80007cfc:	10 9c       	mov	r12,r8
80007cfe:	2f fd       	sub	sp,-4
80007d00:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d04:	80 00       	ld.sh	r0,r0[0x0]
80007d06:	7c 70       	ld.w	r0,lr[0x1c]

80007d08 <sd_mmc_mci_wr_protect>:


bool sd_mmc_mci_wr_protect(uint8_t slot)
{
80007d08:	eb cd 40 80 	pushm	r7,lr
80007d0c:	1a 97       	mov	r7,sp
80007d0e:	20 1d       	sub	sp,4
80007d10:	18 98       	mov	r8,r12
80007d12:	ef 68 ff fc 	st.b	r7[-4],r8
  return is_sd_mmc_mci_card_protected(slot);
80007d16:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007d1a:	10 9c       	mov	r12,r8
80007d1c:	f0 1f 00 04 	mcall	80007d2c <sd_mmc_mci_wr_protect+0x24>
80007d20:	18 98       	mov	r8,r12
}
80007d22:	10 9c       	mov	r12,r8
80007d24:	2f fd       	sub	sp,-4
80007d26:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d2a:	00 00       	add	r0,r0
80007d2c:	80 00       	ld.sh	r0,r0[0x0]
80007d2e:	5f 24       	srhs	r4

80007d30 <sd_mmc_mci_wr_protect_0>:


bool sd_mmc_mci_wr_protect_0(void)
{
80007d30:	eb cd 40 80 	pushm	r7,lr
80007d34:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(0);
80007d36:	30 0c       	mov	r12,0
80007d38:	f0 1f 00 03 	mcall	80007d44 <sd_mmc_mci_wr_protect_0+0x14>
80007d3c:	18 98       	mov	r8,r12
}
80007d3e:	10 9c       	mov	r12,r8
80007d40:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d44:	80 00       	ld.sh	r0,r0[0x0]
80007d46:	7d 08       	ld.w	r8,lr[0x40]

80007d48 <sd_mmc_mci_wr_protect_1>:


bool sd_mmc_mci_wr_protect_1(void)
{
80007d48:	eb cd 40 80 	pushm	r7,lr
80007d4c:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(1);
80007d4e:	30 1c       	mov	r12,1
80007d50:	f0 1f 00 03 	mcall	80007d5c <sd_mmc_mci_wr_protect_1+0x14>
80007d54:	18 98       	mov	r8,r12
}
80007d56:	10 9c       	mov	r12,r8
80007d58:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d5c:	80 00       	ld.sh	r0,r0[0x0]
80007d5e:	7d 08       	ld.w	r8,lr[0x40]

80007d60 <sd_mmc_mci_removal>:


bool sd_mmc_mci_removal(uint8_t slot)
{
80007d60:	eb cd 40 80 	pushm	r7,lr
80007d64:	1a 97       	mov	r7,sp
80007d66:	20 1d       	sub	sp,4
80007d68:	18 98       	mov	r8,r12
80007d6a:	ef 68 ff fc 	st.b	r7[-4],r8
  return false;
80007d6e:	30 08       	mov	r8,0
}
80007d70:	10 9c       	mov	r12,r8
80007d72:	2f fd       	sub	sp,-4
80007d74:	e3 cd 80 80 	ldm	sp++,r7,pc

80007d78 <sd_mmc_mci_removal_0>:


bool sd_mmc_mci_removal_0(void)
{
80007d78:	eb cd 40 80 	pushm	r7,lr
80007d7c:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(0);
80007d7e:	30 0c       	mov	r12,0
80007d80:	f0 1f 00 03 	mcall	80007d8c <sd_mmc_mci_removal_0+0x14>
80007d84:	18 98       	mov	r8,r12
}
80007d86:	10 9c       	mov	r12,r8
80007d88:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d8c:	80 00       	ld.sh	r0,r0[0x0]
80007d8e:	7d 60       	ld.w	r0,lr[0x58]

80007d90 <sd_mmc_mci_removal_1>:


bool sd_mmc_mci_removal_1(void)
{
80007d90:	eb cd 40 80 	pushm	r7,lr
80007d94:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(1);
80007d96:	30 1c       	mov	r12,1
80007d98:	f0 1f 00 03 	mcall	80007da4 <sd_mmc_mci_removal_1+0x14>
80007d9c:	18 98       	mov	r8,r12
}
80007d9e:	10 9c       	mov	r12,r8
80007da0:	e3 cd 80 80 	ldm	sp++,r7,pc
80007da4:	80 00       	ld.sh	r0,r0[0x0]
80007da6:	7d 60       	ld.w	r0,lr[0x58]

80007da8 <sd_mmc_mci_usb_read_10>:
 */
//! @{


Ctrl_status sd_mmc_mci_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
80007da8:	eb cd 40 80 	pushm	r7,lr
80007dac:	1a 97       	mov	r7,sp
80007dae:	20 3d       	sub	sp,12
80007db0:	18 99       	mov	r9,r12
80007db2:	ef 4b ff f8 	st.w	r7[-8],r11
80007db6:	14 98       	mov	r8,r10
80007db8:	ef 69 ff fc 	st.b	r7[-4],r9
80007dbc:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80007dc0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007dc4:	10 9c       	mov	r12,r8
80007dc6:	f0 1f 00 1f 	mcall	80007e40 <sd_mmc_mci_usb_read_10+0x98>
80007dca:	18 98       	mov	r8,r12
80007dcc:	ec 18 00 01 	eorl	r8,0x1
80007dd0:	5c 58       	castu.b	r8
80007dd2:	c0 30       	breq	80007dd8 <sd_mmc_mci_usb_read_10+0x30>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80007dd4:	30 28       	mov	r8,2
80007dd6:	c3 08       	rjmp	80007e36 <sd_mmc_mci_usb_read_10+0x8e>
   }

   if( !sd_mmc_mci_dma_read_open(slot, addr, NULL, nb_sector) )
80007dd8:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007ddc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007de0:	30 0a       	mov	r10,0
80007de2:	ee fb ff f8 	ld.w	r11,r7[-8]
80007de6:	10 9c       	mov	r12,r8
80007de8:	f0 1f 00 17 	mcall	80007e44 <sd_mmc_mci_usb_read_10+0x9c>
80007dec:	18 98       	mov	r8,r12
80007dee:	ec 18 00 01 	eorl	r8,0x1
80007df2:	5c 58       	castu.b	r8
80007df4:	c0 30       	breq	80007dfa <sd_mmc_mci_usb_read_10+0x52>
     return CTRL_FAIL;
80007df6:	30 18       	mov	r8,1
80007df8:	c1 f8       	rjmp	80007e36 <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_multiple_sector(slot, nb_sector, addr) )
80007dfa:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007dfe:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007e02:	ee fa ff f8 	ld.w	r10,r7[-8]
80007e06:	12 9b       	mov	r11,r9
80007e08:	10 9c       	mov	r12,r8
80007e0a:	f0 1f 00 10 	mcall	80007e48 <sd_mmc_mci_usb_read_10+0xa0>
80007e0e:	18 98       	mov	r8,r12
80007e10:	ec 18 00 01 	eorl	r8,0x1
80007e14:	5c 58       	castu.b	r8
80007e16:	c0 30       	breq	80007e1c <sd_mmc_mci_usb_read_10+0x74>
     return CTRL_FAIL;
80007e18:	30 18       	mov	r8,1
80007e1a:	c0 e8       	rjmp	80007e36 <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_close(slot) )
80007e1c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007e20:	10 9c       	mov	r12,r8
80007e22:	f0 1f 00 0b 	mcall	80007e4c <sd_mmc_mci_usb_read_10+0xa4>
80007e26:	18 98       	mov	r8,r12
80007e28:	ec 18 00 01 	eorl	r8,0x1
80007e2c:	5c 58       	castu.b	r8
80007e2e:	c0 30       	breq	80007e34 <sd_mmc_mci_usb_read_10+0x8c>
     return CTRL_FAIL;
80007e30:	30 18       	mov	r8,1
80007e32:	c0 28       	rjmp	80007e36 <sd_mmc_mci_usb_read_10+0x8e>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80007e34:	30 08       	mov	r8,0
}
80007e36:	10 9c       	mov	r12,r8
80007e38:	2f dd       	sub	sp,-12
80007e3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e3e:	00 00       	add	r0,r0
80007e40:	80 00       	ld.sh	r0,r0[0x0]
80007e42:	6f 80       	ld.w	r0,r7[0x60]
80007e44:	80 00       	ld.sh	r0,r0[0x0]
80007e46:	70 60       	ld.w	r0,r8[0x18]
80007e48:	80 00       	ld.sh	r0,r0[0x0]
80007e4a:	76 54       	ld.w	r4,r11[0x14]
80007e4c:	80 00       	ld.sh	r0,r0[0x0]
80007e4e:	71 f4       	ld.w	r4,r8[0x7c]

80007e50 <sd_mmc_mci_usb_read_10_0>:


Ctrl_status sd_mmc_mci_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
80007e50:	eb cd 40 80 	pushm	r7,lr
80007e54:	1a 97       	mov	r7,sp
80007e56:	20 2d       	sub	sp,8
80007e58:	ef 4c ff fc 	st.w	r7[-4],r12
80007e5c:	16 98       	mov	r8,r11
80007e5e:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(0, addr, nb_sector);
80007e62:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007e66:	10 9a       	mov	r10,r8
80007e68:	ee fb ff fc 	ld.w	r11,r7[-4]
80007e6c:	30 0c       	mov	r12,0
80007e6e:	f0 1f 00 04 	mcall	80007e7c <sd_mmc_mci_usb_read_10_0+0x2c>
80007e72:	18 98       	mov	r8,r12
}
80007e74:	10 9c       	mov	r12,r8
80007e76:	2f ed       	sub	sp,-8
80007e78:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e7c:	80 00       	ld.sh	r0,r0[0x0]
80007e7e:	7d a8       	ld.w	r8,lr[0x68]

80007e80 <sd_mmc_mci_usb_read_10_1>:


Ctrl_status sd_mmc_mci_usb_read_10_1(uint32_t addr, uint16_t nb_sector)
{
80007e80:	eb cd 40 80 	pushm	r7,lr
80007e84:	1a 97       	mov	r7,sp
80007e86:	20 2d       	sub	sp,8
80007e88:	ef 4c ff fc 	st.w	r7[-4],r12
80007e8c:	16 98       	mov	r8,r11
80007e8e:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(1, addr, nb_sector);
80007e92:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007e96:	10 9a       	mov	r10,r8
80007e98:	ee fb ff fc 	ld.w	r11,r7[-4]
80007e9c:	30 1c       	mov	r12,1
80007e9e:	f0 1f 00 04 	mcall	80007eac <sd_mmc_mci_usb_read_10_1+0x2c>
80007ea2:	18 98       	mov	r8,r12
}
80007ea4:	10 9c       	mov	r12,r8
80007ea6:	2f ed       	sub	sp,-8
80007ea8:	e3 cd 80 80 	ldm	sp++,r7,pc
80007eac:	80 00       	ld.sh	r0,r0[0x0]
80007eae:	7d a8       	ld.w	r8,lr[0x68]

80007eb0 <sd_mmc_mci_usb_write_10>:
#endif
}


Ctrl_status sd_mmc_mci_usb_write_10(uint8_t slot,uint32_t addr, uint16_t nb_sector)
{
80007eb0:	eb cd 40 80 	pushm	r7,lr
80007eb4:	1a 97       	mov	r7,sp
80007eb6:	20 3d       	sub	sp,12
80007eb8:	18 99       	mov	r9,r12
80007eba:	ef 4b ff f8 	st.w	r7[-8],r11
80007ebe:	14 98       	mov	r8,r10
80007ec0:	ef 69 ff fc 	st.b	r7[-4],r9
80007ec4:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80007ec8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007ecc:	10 9c       	mov	r12,r8
80007ece:	f0 1f 00 1f 	mcall	80007f48 <sd_mmc_mci_usb_write_10+0x98>
80007ed2:	18 98       	mov	r8,r12
80007ed4:	ec 18 00 01 	eorl	r8,0x1
80007ed8:	5c 58       	castu.b	r8
80007eda:	c0 30       	breq	80007ee0 <sd_mmc_mci_usb_write_10+0x30>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80007edc:	30 28       	mov	r8,2
80007ede:	c3 08       	rjmp	80007f3e <sd_mmc_mci_usb_write_10+0x8e>
   }

   if( !sd_mmc_mci_dma_write_open(slot, addr, NULL, nb_sector) )
80007ee0:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007ee4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007ee8:	30 0a       	mov	r10,0
80007eea:	ee fb ff f8 	ld.w	r11,r7[-8]
80007eee:	10 9c       	mov	r12,r8
80007ef0:	f0 1f 00 17 	mcall	80007f4c <sd_mmc_mci_usb_write_10+0x9c>
80007ef4:	18 98       	mov	r8,r12
80007ef6:	ec 18 00 01 	eorl	r8,0x1
80007efa:	5c 58       	castu.b	r8
80007efc:	c0 30       	breq	80007f02 <sd_mmc_mci_usb_write_10+0x52>
     return CTRL_FAIL;
80007efe:	30 18       	mov	r8,1
80007f00:	c1 f8       	rjmp	80007f3e <sd_mmc_mci_usb_write_10+0x8e>

   if( !sd_mmc_mci_write_multiple_sector(slot, nb_sector, addr) )
80007f02:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007f06:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007f0a:	ee fa ff f8 	ld.w	r10,r7[-8]
80007f0e:	12 9b       	mov	r11,r9
80007f10:	10 9c       	mov	r12,r8
80007f12:	f0 1f 00 10 	mcall	80007f50 <sd_mmc_mci_usb_write_10+0xa0>
80007f16:	18 98       	mov	r8,r12
80007f18:	ec 18 00 01 	eorl	r8,0x1
80007f1c:	5c 58       	castu.b	r8
80007f1e:	c0 30       	breq	80007f24 <sd_mmc_mci_usb_write_10+0x74>
     return CTRL_FAIL;
80007f20:	30 18       	mov	r8,1
80007f22:	c0 e8       	rjmp	80007f3e <sd_mmc_mci_usb_write_10+0x8e>

   if( !sd_mmc_mci_write_close(slot) )
80007f24:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007f28:	10 9c       	mov	r12,r8
80007f2a:	f0 1f 00 0b 	mcall	80007f54 <sd_mmc_mci_usb_write_10+0xa4>
80007f2e:	18 98       	mov	r8,r12
80007f30:	ec 18 00 01 	eorl	r8,0x1
80007f34:	5c 58       	castu.b	r8
80007f36:	c0 30       	breq	80007f3c <sd_mmc_mci_usb_write_10+0x8c>
     return CTRL_FAIL;
80007f38:	30 18       	mov	r8,1
80007f3a:	c0 28       	rjmp	80007f3e <sd_mmc_mci_usb_write_10+0x8e>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80007f3c:	30 08       	mov	r8,0

}
80007f3e:	10 9c       	mov	r12,r8
80007f40:	2f dd       	sub	sp,-12
80007f42:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f46:	00 00       	add	r0,r0
80007f48:	80 00       	ld.sh	r0,r0[0x0]
80007f4a:	6f 80       	ld.w	r0,r7[0x60]
80007f4c:	80 00       	ld.sh	r0,r0[0x0]
80007f4e:	72 90       	ld.w	r0,r9[0x24]
80007f50:	80 00       	ld.sh	r0,r0[0x0]
80007f52:	78 a4       	ld.w	r4,r12[0x28]
80007f54:	80 00       	ld.sh	r0,r0[0x0]
80007f56:	73 fc       	ld.w	r12,r9[0x7c]

80007f58 <sd_mmc_mci_usb_write_10_0>:


Ctrl_status sd_mmc_mci_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
80007f58:	eb cd 40 80 	pushm	r7,lr
80007f5c:	1a 97       	mov	r7,sp
80007f5e:	20 2d       	sub	sp,8
80007f60:	ef 4c ff fc 	st.w	r7[-4],r12
80007f64:	16 98       	mov	r8,r11
80007f66:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_write_10(0, addr, nb_sector);
80007f6a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007f6e:	10 9a       	mov	r10,r8
80007f70:	ee fb ff fc 	ld.w	r11,r7[-4]
80007f74:	30 0c       	mov	r12,0
80007f76:	f0 1f 00 04 	mcall	80007f84 <sd_mmc_mci_usb_write_10_0+0x2c>
80007f7a:	18 98       	mov	r8,r12
}
80007f7c:	10 9c       	mov	r12,r8
80007f7e:	2f ed       	sub	sp,-8
80007f80:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f84:	80 00       	ld.sh	r0,r0[0x0]
80007f86:	7e b0       	ld.w	r0,pc[0x2c]

80007f88 <sd_mmc_mci_usb_write_10_1>:


Ctrl_status sd_mmc_mci_usb_write_10_1(uint32_t addr, uint16_t nb_sector)
{
80007f88:	eb cd 40 80 	pushm	r7,lr
80007f8c:	1a 97       	mov	r7,sp
80007f8e:	20 2d       	sub	sp,8
80007f90:	ef 4c ff fc 	st.w	r7[-4],r12
80007f94:	16 98       	mov	r8,r11
80007f96:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_write_10(1, addr, nb_sector);
80007f9a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007f9e:	10 9a       	mov	r10,r8
80007fa0:	ee fb ff fc 	ld.w	r11,r7[-4]
80007fa4:	30 1c       	mov	r12,1
80007fa6:	f0 1f 00 04 	mcall	80007fb4 <sd_mmc_mci_usb_write_10_1+0x2c>
80007faa:	18 98       	mov	r8,r12
}
80007fac:	10 9c       	mov	r12,r8
80007fae:	2f ed       	sub	sp,-8
80007fb0:	e3 cd 80 80 	ldm	sp++,r7,pc
80007fb4:	80 00       	ld.sh	r0,r0[0x0]
80007fb6:	7e b0       	ld.w	r0,pc[0x2c]

80007fb8 <aes_configure>:




void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
80007fb8:	eb cd 40 80 	pushm	r7,lr
80007fbc:	1a 97       	mov	r7,sp
80007fbe:	20 2d       	sub	sp,8
80007fc0:	ef 4c ff fc 	st.w	r7[-4],r12
80007fc4:	ef 4b ff f8 	st.w	r7[-8],r11
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
80007fc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fcc:	11 88       	ld.ub	r8,r8[0x0]
80007fce:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
            ((pAesConfig->ProcessingDelay << AVR32_AES_MR_PROCDLY_OFFSET) & AVR32_AES_MR_PROCDLY_MASK) |
80007fd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fd6:	11 98       	ld.ub	r8,r8[0x1]
80007fd8:	a5 68       	lsl	r8,0x4
80007fda:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80007fde:	10 49       	or	r9,r8
            ((pAesConfig->StartMode << AVR32_AES_MR_SMOD_OFFSET) & AVR32_AES_MR_SMOD_MASK) |
80007fe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fe4:	11 a8       	ld.ub	r8,r8[0x2]
80007fe6:	a9 68       	lsl	r8,0x8
80007fe8:	e2 18 03 00 	andl	r8,0x300,COH
80007fec:	10 49       	or	r9,r8
            ((pAesConfig->KeySize << AVR32_AES_MR_KEYSIZE_OFFSET) & AVR32_AES_MR_KEYSIZE_MASK) |
80007fee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ff2:	11 b8       	ld.ub	r8,r8[0x3]
80007ff4:	ab 68       	lsl	r8,0xa
80007ff6:	e2 18 0c 00 	andl	r8,0xc00,COH
80007ffa:	10 49       	or	r9,r8
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
80007ffc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008000:	11 c8       	ld.ub	r8,r8[0x4]
80008002:	ad 68       	lsl	r8,0xc
80008004:	e2 18 70 00 	andl	r8,0x7000,COH
80008008:	10 49       	or	r9,r8
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
8000800a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000800e:	11 d8       	ld.ub	r8,r8[0x5]
80008010:	af 78       	lsl	r8,0xf
80008012:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008016:	10 49       	or	r9,r8
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
80008018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000801c:	11 e8       	ld.ub	r8,r8[0x6]
8000801e:	b1 68       	lsl	r8,0x10
80008020:	e6 18 00 07 	andh	r8,0x7,COH
80008024:	10 49       	or	r9,r8
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
80008026:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000802a:	11 f8       	ld.ub	r8,r8[0x7]
8000802c:	b9 68       	lsl	r8,0x18
8000802e:	e6 18 1f 00 	andh	r8,0x1f00,COH
80008032:	f3 e8 10 08 	or	r8,r9,r8



void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
80008036:	ea 18 00 e0 	orh	r8,0xe0
8000803a:	10 99       	mov	r9,r8
8000803c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008040:	91 19       	st.w	r8[0x4],r9
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
            ((AES_CKEY << AVR32_AES_MR_CKEY_OFFSET) & AVR32_AES_MR_CKEY_MASK);
}
80008042:	2f ed       	sub	sp,-8
80008044:	e3 cd 80 80 	ldm	sp++,r7,pc

80008048 <aes_set_key>:
  return(aes->isr);
}


void aes_set_key( volatile avr32_aes_t *aes, const unsigned long int *pKey)
{
80008048:	eb cd 40 80 	pushm	r7,lr
8000804c:	1a 97       	mov	r7,sp
8000804e:	20 4d       	sub	sp,16
80008050:	ef 4c ff f4 	st.w	r7[-12],r12
80008054:	ef 4b ff f0 	st.w	r7[-16],r11
  unsigned long int volatile *pTempo = &(aes->keyw1r);
80008058:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000805c:	2e 08       	sub	r8,-32
8000805e:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char       keylen = 0;
80008062:	30 08       	mov	r8,0
80008064:	ef 68 ff ff 	st.b	r7[-1],r8


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
80008068:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000806c:	70 18       	ld.w	r8,r8[0x4]
8000806e:	e2 18 0c 00 	andl	r8,0xc00,COH
80008072:	ab 88       	lsr	r8,0xa
80008074:	58 18       	cp.w	r8,1
80008076:	c0 90       	breq	80008088 <aes_set_key+0x40>
80008078:	c0 43       	brcs	80008080 <aes_set_key+0x38>
8000807a:	58 28       	cp.w	r8,2
8000807c:	c0 a0       	breq	80008090 <aes_set_key+0x48>
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
8000807e:	c2 38       	rjmp	800080c4 <aes_set_key+0x7c>


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
  {
    case 0: // 128bit cryptographic key
      keylen = 4;
80008080:	30 48       	mov	r8,4
80008082:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
80008086:	c0 98       	rjmp	80008098 <aes_set_key+0x50>
    case 1: // 192bit cryptographic key
      keylen = 6;
80008088:	30 68       	mov	r8,6
8000808a:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
8000808e:	c0 58       	rjmp	80008098 <aes_set_key+0x50>
    case 2: // 256bit cryptographic key
      keylen = 8;
80008090:	30 88       	mov	r8,8
80008092:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
80008096:	c1 78       	rjmp	800080c4 <aes_set_key+0x7c>
80008098:	c1 68       	rjmp	800080c4 <aes_set_key+0x7c>
    *pTempo++ = *pKey++;
8000809a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000809e:	70 09       	ld.w	r9,r8[0x0]
800080a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080a4:	91 09       	st.w	r8[0x0],r9
800080a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080aa:	2f c8       	sub	r8,-4
800080ac:	ef 48 ff f8 	st.w	r7[-8],r8
800080b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800080b4:	2f c8       	sub	r8,-4
800080b6:	ef 48 ff f0 	st.w	r7[-16],r8
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
800080ba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800080be:	20 18       	sub	r8,1
800080c0:	ef 68 ff ff 	st.b	r7[-1],r8
800080c4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800080c8:	30 08       	mov	r8,0
800080ca:	f0 09 18 00 	cp.b	r9,r8
800080ce:	ce 61       	brne	8000809a <aes_set_key+0x52>
    *pTempo++ = *pKey++;
}
800080d0:	2f cd       	sub	sp,-16
800080d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800080d6 <aes_set_initvector>:


void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
800080d6:	eb cd 40 80 	pushm	r7,lr
800080da:	1a 97       	mov	r7,sp
800080dc:	20 4d       	sub	sp,16
800080de:	ef 4c ff f4 	st.w	r7[-12],r12
800080e2:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->iv1r);
800080e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800080ea:	2a 08       	sub	r8,-96
800080ec:	ef 48 ff f8 	st.w	r7[-8],r8
  int i;

  for(i=0; i<4; i++)
800080f0:	30 08       	mov	r8,0
800080f2:	ef 48 ff fc 	st.w	r7[-4],r8
800080f6:	c1 68       	rjmp	80008122 <aes_set_initvector+0x4c>
    *pTempo++ = *pVector++;
800080f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800080fc:	70 09       	ld.w	r9,r8[0x0]
800080fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008102:	91 09       	st.w	r8[0x0],r9
80008104:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008108:	2f c8       	sub	r8,-4
8000810a:	ef 48 ff f8 	st.w	r7[-8],r8
8000810e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008112:	2f c8       	sub	r8,-4
80008114:	ef 48 ff f0 	st.w	r7[-16],r8
void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
  volatile uint32_t *pTempo = &(aes->iv1r);
  int i;

  for(i=0; i<4; i++)
80008118:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000811c:	2f f8       	sub	r8,-1
8000811e:	ef 48 ff fc 	st.w	r7[-4],r8
80008122:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008126:	58 38       	cp.w	r8,3
80008128:	fe 9a ff e8 	brle	800080f8 <aes_set_initvector+0x22>
    *pTempo++ = *pVector++;
}
8000812c:	2f cd       	sub	sp,-16
8000812e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008132 <aes_write_inputdata>:


void aes_write_inputdata( volatile avr32_aes_t *aes, uint32_t *pIn)
{
80008132:	eb cd 40 80 	pushm	r7,lr
80008136:	1a 97       	mov	r7,sp
80008138:	20 4d       	sub	sp,16
8000813a:	ef 4c ff f4 	st.w	r7[-12],r12
8000813e:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->idata1r);
80008142:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008146:	2c 08       	sub	r8,-64
80008148:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char inlen = 4;
8000814c:	30 48       	mov	r8,4
8000814e:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
80008152:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008156:	70 18       	ld.w	r8,r8[0x4]
80008158:	e2 18 70 00 	andl	r8,0x7000,COH
8000815c:	ad 88       	lsr	r8,0xc
8000815e:	58 38       	cp.w	r8,3
80008160:	c2 c1       	brne	800081b8 <aes_write_inputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
80008162:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008166:	70 18       	ld.w	r8,r8[0x4]
80008168:	e6 18 00 07 	andh	r8,0x7,COH
8000816c:	b1 88       	lsr	r8,0x10
8000816e:	58 18       	cp.w	r8,1
80008170:	c0 60       	breq	8000817c <aes_write_inputdata+0x4a>
80008172:	c2 33       	brcs	800081b8 <aes_write_inputdata+0x86>
80008174:	58 48       	cp.w	r8,4
80008176:	e0 8b 00 21 	brhi	800081b8 <aes_write_inputdata+0x86>
8000817a:	c0 68       	rjmp	80008186 <aes_write_inputdata+0x54>
    {
      case 1: // 64bit CFB data size
        inlen = 2;
8000817c:	30 28       	mov	r8,2
8000817e:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
80008182:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
80008184:	c1 a8       	rjmp	800081b8 <aes_write_inputdata+0x86>
        inlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        inlen = 1;
80008186:	30 18       	mov	r8,1
80008188:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
8000818c:	c1 68       	rjmp	800081b8 <aes_write_inputdata+0x86>
    *pTempo++ = *pIn++;
8000818e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008192:	70 09       	ld.w	r9,r8[0x0]
80008194:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008198:	91 09       	st.w	r8[0x0],r9
8000819a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000819e:	2f c8       	sub	r8,-4
800081a0:	ef 48 ff f8 	st.w	r7[-8],r8
800081a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800081a8:	2f c8       	sub	r8,-4
800081aa:	ef 48 ff f0 	st.w	r7[-16],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
800081ae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800081b2:	20 18       	sub	r8,1
800081b4:	ef 68 ff ff 	st.b	r7[-1],r8
800081b8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800081bc:	30 08       	mov	r8,0
800081be:	f0 09 18 00 	cp.b	r9,r8
800081c2:	ce 61       	brne	8000818e <aes_write_inputdata+0x5c>
    *pTempo++ = *pIn++;
}
800081c4:	2f cd       	sub	sp,-16
800081c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800081ca <aes_read_outputdata>:


void aes_read_outputdata( volatile avr32_aes_t *aes, uint32_t *pOut)
{
800081ca:	eb cd 40 80 	pushm	r7,lr
800081ce:	1a 97       	mov	r7,sp
800081d0:	20 4d       	sub	sp,16
800081d2:	ef 4c ff f4 	st.w	r7[-12],r12
800081d6:	ef 4b ff f0 	st.w	r7[-16],r11
  const volatile uint32_t *pTempo = &(aes->odata1r);
800081da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800081de:	2b 08       	sub	r8,-80
800081e0:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char outlen = 4;
800081e4:	30 48       	mov	r8,4
800081e6:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
800081ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800081ee:	70 18       	ld.w	r8,r8[0x4]
800081f0:	e2 18 70 00 	andl	r8,0x7000,COH
800081f4:	ad 88       	lsr	r8,0xc
800081f6:	58 38       	cp.w	r8,3
800081f8:	c2 c1       	brne	80008250 <aes_read_outputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
800081fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800081fe:	70 18       	ld.w	r8,r8[0x4]
80008200:	e6 18 00 07 	andh	r8,0x7,COH
80008204:	b1 88       	lsr	r8,0x10
80008206:	58 18       	cp.w	r8,1
80008208:	c0 60       	breq	80008214 <aes_read_outputdata+0x4a>
8000820a:	c2 33       	brcs	80008250 <aes_read_outputdata+0x86>
8000820c:	58 48       	cp.w	r8,4
8000820e:	e0 8b 00 21 	brhi	80008250 <aes_read_outputdata+0x86>
80008212:	c0 68       	rjmp	8000821e <aes_read_outputdata+0x54>
    {
      case 1: // 64bit CFB data size
        outlen = 2;
80008214:	30 28       	mov	r8,2
80008216:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
8000821a:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
8000821c:	c1 a8       	rjmp	80008250 <aes_read_outputdata+0x86>
        outlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        outlen = 1;
8000821e:	30 18       	mov	r8,1
80008220:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80008224:	c1 68       	rjmp	80008250 <aes_read_outputdata+0x86>
    *pOut++ = *pTempo++;
80008226:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000822a:	70 09       	ld.w	r9,r8[0x0]
8000822c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008230:	91 09       	st.w	r8[0x0],r9
80008232:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008236:	2f c8       	sub	r8,-4
80008238:	ef 48 ff f0 	st.w	r7[-16],r8
8000823c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008240:	2f c8       	sub	r8,-4
80008242:	ef 48 ff f8 	st.w	r7[-8],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80008246:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000824a:	20 18       	sub	r8,1
8000824c:	ef 68 ff ff 	st.b	r7[-1],r8
80008250:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008254:	30 08       	mov	r8,0
80008256:	f0 09 18 00 	cp.b	r9,r8
8000825a:	ce 61       	brne	80008226 <aes_read_outputdata+0x5c>
    *pOut++ = *pTempo++;
}
8000825c:	2f cd       	sub	sp,-16
8000825e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008262:	d7 03       	nop

80008264 <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
80008264:	eb cd 40 80 	pushm	r7,lr
80008268:	1a 97       	mov	r7,sp
8000826a:	20 cd       	sub	sp,48
8000826c:	ef 4c ff d0 	st.w	r7[-48],r12
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80008270:	ee f8 ff d0 	ld.w	r8,r7[-48]
80008274:	ee 7a 42 3f 	mov	r10,999999
80008278:	f0 0a 00 09 	add	r9,r8,r10
8000827c:	e0 68 de 83 	mov	r8,56963
80008280:	ea 18 43 1b 	orh	r8,0x431b
80008284:	f2 08 06 48 	mulu.d	r8,r9,r8
80008288:	f2 08 16 12 	lsr	r8,r9,0x12
8000828c:	ef 48 ff d4 	st.w	r7[-44],r8
//! Whether to use the NCS0 pin
#ifdef SMC_USE_NCS0
  #include SMC_COMPONENT_CS0

  // Setup SMC for NCS0
  SMC_CS_SETUP(0)
80008290:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008294:	12 98       	mov	r8,r9
80008296:	a3 68       	lsl	r8,0x2
80008298:	12 08       	add	r8,r9
8000829a:	a3 68       	lsl	r8,0x2
8000829c:	f0 c9 fc 19 	sub	r9,r8,-999
800082a0:	e0 68 4d d3 	mov	r8,19923
800082a4:	ea 18 10 62 	orh	r8,0x1062
800082a8:	f2 08 06 48 	mulu.d	r8,r9,r8
800082ac:	f2 08 16 06 	lsr	r8,r9,0x6
800082b0:	ef 48 ff d8 	st.w	r7[-40],r8
800082b4:	30 08       	mov	r8,0
800082b6:	ef 48 ff dc 	st.w	r7[-36],r8
800082ba:	ee f9 ff d4 	ld.w	r9,r7[-44]
800082be:	12 98       	mov	r8,r9
800082c0:	a5 68       	lsl	r8,0x4
800082c2:	12 18       	sub	r8,r9
800082c4:	a1 78       	lsl	r8,0x1
800082c6:	f0 c9 fc 19 	sub	r9,r8,-999
800082ca:	e0 68 4d d3 	mov	r8,19923
800082ce:	ea 18 10 62 	orh	r8,0x1062
800082d2:	f2 08 06 48 	mulu.d	r8,r9,r8
800082d6:	f2 08 16 06 	lsr	r8,r9,0x6
800082da:	ef 48 ff e0 	st.w	r7[-32],r8
800082de:	30 08       	mov	r8,0
800082e0:	ef 48 ff e4 	st.w	r7[-28],r8
800082e4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800082e8:	12 98       	mov	r8,r9
800082ea:	a5 68       	lsl	r8,0x4
800082ec:	12 18       	sub	r8,r9
800082ee:	a3 68       	lsl	r8,0x2
800082f0:	f0 c9 fc 19 	sub	r9,r8,-999
800082f4:	e0 68 4d d3 	mov	r8,19923
800082f8:	ea 18 10 62 	orh	r8,0x1062
800082fc:	f2 08 06 48 	mulu.d	r8,r9,r8
80008300:	f2 08 16 06 	lsr	r8,r9,0x6
80008304:	ef 48 ff e8 	st.w	r7[-24],r8
80008308:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000830c:	f0 08 10 5a 	mul	r8,r8,90
80008310:	f0 c9 fc 19 	sub	r9,r8,-999
80008314:	e0 68 4d d3 	mov	r8,19923
80008318:	ea 18 10 62 	orh	r8,0x1062
8000831c:	f2 08 06 48 	mulu.d	r8,r9,r8
80008320:	f2 08 16 06 	lsr	r8,r9,0x6
80008324:	ef 48 ff ec 	st.w	r7[-20],r8
80008328:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000832c:	e0 68 00 d2 	mov	r8,210
80008330:	f2 08 02 48 	mul	r8,r9,r8
80008334:	f0 c9 fc 19 	sub	r9,r8,-999
80008338:	e0 68 4d d3 	mov	r8,19923
8000833c:	ea 18 10 62 	orh	r8,0x1062
80008340:	f2 08 06 48 	mulu.d	r8,r9,r8
80008344:	f2 08 16 06 	lsr	r8,r9,0x6
80008348:	ef 48 ff f0 	st.w	r7[-16],r8
8000834c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008350:	12 98       	mov	r8,r9
80008352:	a5 68       	lsl	r8,0x4
80008354:	12 18       	sub	r8,r9
80008356:	a5 68       	lsl	r8,0x4
80008358:	f0 c9 fc 19 	sub	r9,r8,-999
8000835c:	e0 68 4d d3 	mov	r8,19923
80008360:	ea 18 10 62 	orh	r8,0x1062
80008364:	f2 08 06 48 	mulu.d	r8,r9,r8
80008368:	f2 08 16 06 	lsr	r8,r9,0x6
8000836c:	ef 48 ff f4 	st.w	r7[-12],r8
80008370:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008374:	f0 08 10 64 	mul	r8,r8,100
80008378:	f0 c9 fc 19 	sub	r9,r8,-999
8000837c:	e0 68 4d d3 	mov	r8,19923
80008380:	ea 18 10 62 	orh	r8,0x1062
80008384:	f2 08 06 48 	mulu.d	r8,r9,r8
80008388:	f2 08 16 06 	lsr	r8,r9,0x6
8000838c:	ef 48 ff f8 	st.w	r7[-8],r8
80008390:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008394:	e0 68 01 0e 	mov	r8,270
80008398:	f2 08 02 48 	mul	r8,r9,r8
8000839c:	f0 c9 fc 19 	sub	r9,r8,-999
800083a0:	e0 68 4d d3 	mov	r8,19923
800083a4:	ea 18 10 62 	orh	r8,0x1062
800083a8:	f2 08 06 48 	mulu.d	r8,r9,r8
800083ac:	f2 08 16 06 	lsr	r8,r9,0x6
800083b0:	ef 48 ff fc 	st.w	r7[-4],r8
800083b4:	ee f9 ff e4 	ld.w	r9,r7[-28]
800083b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800083bc:	10 09       	add	r9,r8
800083be:	ee fa ff e0 	ld.w	r10,r7[-32]
800083c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800083c6:	f4 08 00 08 	add	r8,r10,r8
800083ca:	10 39       	cp.w	r9,r8
800083cc:	c0 c2       	brcc	800083e4 <smc_init+0x180>
800083ce:	ee f9 ff e0 	ld.w	r9,r7[-32]
800083d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800083d6:	10 09       	add	r9,r8
800083d8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800083dc:	f2 08 01 08 	sub	r8,r9,r8
800083e0:	ef 48 ff f4 	st.w	r7[-12],r8
800083e4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800083e8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800083ec:	10 09       	add	r9,r8
800083ee:	ee fa ff d8 	ld.w	r10,r7[-40]
800083f2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800083f6:	f4 08 00 08 	add	r8,r10,r8
800083fa:	10 39       	cp.w	r9,r8
800083fc:	c0 c2       	brcc	80008414 <smc_init+0x1b0>
800083fe:	ee f9 ff d8 	ld.w	r9,r7[-40]
80008402:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008406:	10 09       	add	r9,r8
80008408:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000840c:	f2 08 01 08 	sub	r8,r9,r8
80008410:	ef 48 ff ec 	st.w	r7[-20],r8
80008414:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008418:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000841c:	10 09       	add	r9,r8
8000841e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008422:	10 39       	cp.w	r9,r8
80008424:	e0 88 00 0a 	brls	80008438 <smc_init+0x1d4>
80008428:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000842c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008430:	f2 08 00 08 	add	r8,r9,r8
80008434:	ef 48 ff f8 	st.w	r7[-8],r8
80008438:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000843c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008440:	10 09       	add	r9,r8
80008442:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008446:	10 39       	cp.w	r9,r8
80008448:	e0 88 00 0a 	brls	8000845c <smc_init+0x1f8>
8000844c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80008450:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008454:	f2 08 00 08 	add	r8,r9,r8
80008458:	ef 48 ff f8 	st.w	r7[-8],r8
8000845c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008460:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008464:	10 09       	add	r9,r8
80008466:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000846a:	10 39       	cp.w	r9,r8
8000846c:	e0 88 00 0a 	brls	80008480 <smc_init+0x21c>
80008470:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008474:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008478:	f2 08 00 08 	add	r8,r9,r8
8000847c:	ef 48 ff fc 	st.w	r7[-4],r8
80008480:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008484:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008488:	10 09       	add	r9,r8
8000848a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000848e:	10 39       	cp.w	r9,r8
80008490:	e0 88 00 0a 	brls	800084a4 <smc_init+0x240>
80008494:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008498:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000849c:	f2 08 00 08 	add	r8,r9,r8
800084a0:	ef 48 ff fc 	st.w	r7[-4],r8
800084a4:	fe 68 1c 00 	mov	r8,-123904
800084a8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800084ac:	f2 0a 15 08 	lsl	r10,r9,0x8
800084b0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800084b4:	12 4a       	or	r10,r9
800084b6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800084ba:	b1 69       	lsl	r9,0x10
800084bc:	12 4a       	or	r10,r9
800084be:	ee f9 ff e4 	ld.w	r9,r7[-28]
800084c2:	b9 69       	lsl	r9,0x18
800084c4:	f5 e9 10 09 	or	r9,r10,r9
800084c8:	91 09       	st.w	r8[0x0],r9
800084ca:	fe 68 1c 00 	mov	r8,-123904
800084ce:	ee f9 ff ec 	ld.w	r9,r7[-20]
800084d2:	f2 0a 15 08 	lsl	r10,r9,0x8
800084d6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800084da:	12 4a       	or	r10,r9
800084dc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800084e0:	b1 69       	lsl	r9,0x10
800084e2:	12 4a       	or	r10,r9
800084e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800084e8:	b9 69       	lsl	r9,0x18
800084ea:	f5 e9 10 09 	or	r9,r10,r9
800084ee:	91 19       	st.w	r8[0x4],r9
800084f0:	fe 68 1c 00 	mov	r8,-123904
800084f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800084f8:	f2 0a 15 10 	lsl	r10,r9,0x10
800084fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008500:	f5 e9 10 09 	or	r9,r10,r9
80008504:	91 29       	st.w	r8[0x8],r9
80008506:	fe 68 1c 00 	mov	r8,-123904
8000850a:	e0 69 10 03 	mov	r9,4099
8000850e:	91 39       	st.w	r8[0xc],r9
80008510:	48 49       	lddpc	r9,80008520 <smc_init+0x2bc>
80008512:	30 18       	mov	r8,1
80008514:	b2 88       	st.b	r9[0x0],r8
  #undef NCS_CONTROLLED_READ
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
80008516:	f0 1f 00 04 	mcall	80008524 <smc_init+0x2c0>
}
8000851a:	2f 4d       	sub	sp,-48
8000851c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008520:	00 00       	add	r0,r0
80008522:	06 94       	mov	r4,r3
80008524:	80 00       	ld.sh	r0,r0[0x0]
80008526:	85 28       	st.w	r2[0x8],r8

80008528 <smc_enable_muxed_pins>:

/*! \brief Puts the multiplexed MCU pins used for the SMC
 *
 */
static void smc_enable_muxed_pins(void)
{
80008528:	eb cd 40 80 	pushm	r7,lr
8000852c:	1a 97       	mov	r7,sp
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
8000852e:	31 4b       	mov	r11,20
80008530:	48 3c       	lddpc	r12,8000853c <smc_enable_muxed_pins+0x14>
80008532:	f0 1f 00 04 	mcall	80008540 <smc_enable_muxed_pins+0x18>
}
80008536:	e3 cd 80 80 	ldm	sp++,r7,pc
8000853a:	00 00       	add	r0,r0
8000853c:	80 00       	ld.sh	r0,r0[0x0]
8000853e:	f0 d4 80 00 	satsub.w	r4,r8,-32768
80008542:	89 a8       	st.w	r4[0x28],r8

80008544 <flashc_set_wait_state>:
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
80008544:	eb cd 40 80 	pushm	r7,lr
80008548:	1a 97       	mov	r7,sp
8000854a:	20 2d       	sub	sp,8
8000854c:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80008550:	fe 68 14 00 	mov	r8,-125952
80008554:	70 08       	ld.w	r8,r8[0x0]
80008556:	30 09       	mov	r9,0
80008558:	ef 49 ff fc 	st.w	r7[-4],r9
8000855c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80008560:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008564:	5c 58       	castu.b	r8
80008566:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000856a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000856e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008572:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80008576:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000857a:	fe 68 14 00 	mov	r8,-125952
8000857e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008582:	91 09       	st.w	r8[0x0],r9
}
80008584:	2f ed       	sub	sp,-8
80008586:	e3 cd 80 80 	ldm	sp++,r7,pc
8000858a:	d7 03       	nop

8000858c <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
8000858c:	eb cd 40 80 	pushm	r7,lr
80008590:	1a 97       	mov	r7,sp
80008592:	20 1d       	sub	sp,4
80008594:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80008598:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000859c:	e0 69 50 ff 	mov	r9,20735
800085a0:	ea 19 02 25 	orh	r9,0x225
800085a4:	12 38       	cp.w	r8,r9
800085a6:	e0 88 00 06 	brls	800085b2 <flashc_set_bus_freq+0x26>
		// Set 1 WS.
		flashc_set_wait_state(1);
800085aa:	30 1c       	mov	r12,1
800085ac:	f0 1f 00 05 	mcall	800085c0 <flashc_set_bus_freq+0x34>
800085b0:	c0 48       	rjmp	800085b8 <flashc_set_bus_freq+0x2c>
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
800085b2:	30 0c       	mov	r12,0
800085b4:	f0 1f 00 03 	mcall	800085c0 <flashc_set_bus_freq+0x34>
	}
}
800085b8:	2f fd       	sub	sp,-4
800085ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800085be:	00 00       	add	r0,r0
800085c0:	80 00       	ld.sh	r0,r0[0x0]
800085c2:	85 44       	st.w	r2[0x10],r4

800085c4 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
800085c4:	eb cd 40 80 	pushm	r7,lr
800085c8:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
800085ca:	fe 68 14 00 	mov	r8,-125952
800085ce:	70 28       	ld.w	r8,r8[0x8]
800085d0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800085d4:	5c 58       	castu.b	r8
}
800085d6:	10 9c       	mov	r12,r8
800085d8:	e3 cd 80 80 	ldm	sp++,r7,pc

800085dc <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
800085dc:	eb cd 40 80 	pushm	r7,lr
800085e0:	1a 97       	mov	r7,sp
	while (!flashc_is_ready());
800085e2:	f0 1f 00 05 	mcall	800085f4 <flashc_default_wait_until_ready+0x18>
800085e6:	18 98       	mov	r8,r12
800085e8:	ec 18 00 01 	eorl	r8,0x1
800085ec:	5c 58       	castu.b	r8
800085ee:	cf a1       	brne	800085e2 <flashc_default_wait_until_ready+0x6>
}
800085f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800085f4:	80 00       	ld.sh	r0,r0[0x0]
800085f6:	85 c4       	st.w	r2[0x30],r4

800085f8 <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
800085f8:	eb cd 40 80 	pushm	r7,lr
800085fc:	1a 97       	mov	r7,sp
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800085fe:	fe 68 14 00 	mov	r8,-125952
80008602:	70 28       	ld.w	r8,r8[0x8]
80008604:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHC_FSR_PROGE_MASK);
}
80008608:	10 9c       	mov	r12,r8
8000860a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000860e:	d7 03       	nop

80008610 <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80008610:	eb cd 40 80 	pushm	r7,lr
80008614:	1a 97       	mov	r7,sp
80008616:	20 3d       	sub	sp,12
80008618:	ef 4c ff f8 	st.w	r7[-8],r12
8000861c:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80008620:	49 b8       	lddpc	r8,8000868c <flashc_issue_command+0x7c>
80008622:	70 08       	ld.w	r8,r8[0x0]
80008624:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80008626:	fe 68 14 00 	mov	r8,-125952
8000862a:	70 18       	ld.w	r8,r8[0x4]
8000862c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80008630:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008634:	5c 58       	castu.b	r8
80008636:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000863a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000863e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008642:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80008646:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
8000864a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000864e:	58 08       	cp.w	r8,0
80008650:	c0 b5       	brlt	80008666 <flashc_issue_command+0x56>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80008652:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008656:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000865a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000865e:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80008662:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80008666:	3a 58       	mov	r8,-91
80008668:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
8000866c:	fe 68 14 00 	mov	r8,-125952
80008670:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008674:	91 19       	st.w	r8[0x4],r9
	flashc_error_status = flashc_get_error_status();
80008676:	f0 1f 00 07 	mcall	80008690 <flashc_issue_command+0x80>
8000867a:	18 99       	mov	r9,r12
8000867c:	48 68       	lddpc	r8,80008694 <flashc_issue_command+0x84>
8000867e:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
80008680:	48 38       	lddpc	r8,8000868c <flashc_issue_command+0x7c>
80008682:	70 08       	ld.w	r8,r8[0x0]
80008684:	5d 18       	icall	r8
}
80008686:	2f dd       	sub	sp,-12
80008688:	e3 cd 80 80 	ldm	sp++,r7,pc
8000868c:	00 00       	add	r0,r0
8000868e:	01 3c       	ld.ub	r12,r0++
80008690:	80 00       	ld.sh	r0,r0[0x0]
80008692:	85 f8       	st.w	r2[0x3c],r8
80008694:	00 00       	add	r0,r0
80008696:	06 9c       	mov	r12,r3

80008698 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80008698:	eb cd 40 80 	pushm	r7,lr
8000869c:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
8000869e:	3f fb       	mov	r11,-1
800086a0:	30 3c       	mov	r12,3
800086a2:	f0 1f 00 03 	mcall	800086ac <flashc_clear_page_buffer+0x14>
}
800086a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800086aa:	00 00       	add	r0,r0
800086ac:	80 00       	ld.sh	r0,r0[0x0]
800086ae:	86 10       	ld.sh	r0,r3[0x2]

800086b0 <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
800086b0:	eb cd 40 80 	pushm	r7,lr
800086b4:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
800086b6:	fe 68 14 00 	mov	r8,-125952
800086ba:	70 28       	ld.w	r8,r8[0x8]
800086bc:	e2 18 00 20 	andl	r8,0x20,COH
800086c0:	5f 18       	srne	r8
800086c2:	5c 58       	castu.b	r8
}
800086c4:	10 9c       	mov	r12,r8
800086c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800086ca:	d7 03       	nop

800086cc <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
800086cc:	eb cd 40 80 	pushm	r7,lr
800086d0:	1a 97       	mov	r7,sp
800086d2:	20 1d       	sub	sp,4
800086d4:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
800086d8:	ee fb ff fc 	ld.w	r11,r7[-4]
800086dc:	30 cc       	mov	r12,12
800086de:	f0 1f 00 05 	mcall	800086f0 <flashc_quick_page_read+0x24>
	return flashc_is_page_erased();
800086e2:	f0 1f 00 05 	mcall	800086f4 <flashc_quick_page_read+0x28>
800086e6:	18 98       	mov	r8,r12
}
800086e8:	10 9c       	mov	r12,r8
800086ea:	2f fd       	sub	sp,-4
800086ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800086f0:	80 00       	ld.sh	r0,r0[0x0]
800086f2:	86 10       	ld.sh	r0,r3[0x2]
800086f4:	80 00       	ld.sh	r0,r0[0x0]
800086f6:	86 b0       	ld.uh	r0,r3[0x6]

800086f8 <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
800086f8:	eb cd 40 80 	pushm	r7,lr
800086fc:	1a 97       	mov	r7,sp
800086fe:	20 4d       	sub	sp,16
80008700:	ef 4c ff f4 	st.w	r7[-12],r12
80008704:	16 98       	mov	r8,r11
80008706:	ef 68 ff f0 	st.b	r7[-16],r8
	bool page_erased = true;
8000870a:	30 18       	mov	r8,1
8000870c:	ef 68 ff fb 	st.b	r7[-5],r8

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80008710:	ee fb ff f4 	ld.w	r11,r7[-12]
80008714:	30 2c       	mov	r12,2
80008716:	f0 1f 00 10 	mcall	80008754 <flashc_erase_page+0x5c>
	if (check) {
8000871a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000871e:	30 08       	mov	r8,0
80008720:	f0 09 18 00 	cp.b	r9,r8
80008724:	c1 20       	breq	80008748 <flashc_erase_page+0x50>
		unsigned int error_status = flashc_error_status;
80008726:	48 d8       	lddpc	r8,80008758 <flashc_erase_page+0x60>
80008728:	70 08       	ld.w	r8,r8[0x0]
8000872a:	ef 48 ff fc 	st.w	r7[-4],r8
		page_erased = flashc_quick_page_read(-1);
8000872e:	3f fc       	mov	r12,-1
80008730:	f0 1f 00 0b 	mcall	8000875c <flashc_erase_page+0x64>
80008734:	18 98       	mov	r8,r12
80008736:	ef 68 ff fb 	st.b	r7[-5],r8
		flashc_error_status |= error_status;
8000873a:	48 88       	lddpc	r8,80008758 <flashc_erase_page+0x60>
8000873c:	70 09       	ld.w	r9,r8[0x0]
8000873e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008742:	10 49       	or	r9,r8
80008744:	48 58       	lddpc	r8,80008758 <flashc_erase_page+0x60>
80008746:	91 09       	st.w	r8[0x0],r9
	}
	return page_erased;
80008748:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
8000874c:	10 9c       	mov	r12,r8
8000874e:	2f cd       	sub	sp,-16
80008750:	e3 cd 80 80 	ldm	sp++,r7,pc
80008754:	80 00       	ld.sh	r0,r0[0x0]
80008756:	86 10       	ld.sh	r0,r3[0x2]
80008758:	00 00       	add	r0,r0
8000875a:	06 9c       	mov	r12,r3
8000875c:	80 00       	ld.sh	r0,r0[0x0]
8000875e:	86 cc       	ld.uh	r12,r3[0x8]

80008760 <flashc_write_page>:
	return all_pages_erased;
}


void flashc_write_page(int page_number)
{
80008760:	eb cd 40 80 	pushm	r7,lr
80008764:	1a 97       	mov	r7,sp
80008766:	20 1d       	sub	sp,4
80008768:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
8000876c:	ee fb ff fc 	ld.w	r11,r7[-4]
80008770:	30 1c       	mov	r12,1
80008772:	f0 1f 00 03 	mcall	8000877c <flashc_write_page+0x1c>
}
80008776:	2f fd       	sub	sp,-4
80008778:	e3 cd 80 80 	ldm	sp++,r7,pc
8000877c:	80 00       	ld.sh	r0,r0[0x0]
8000877e:	86 10       	ld.sh	r0,r3[0x2]

80008780 <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80008780:	eb cd 40 80 	pushm	r7,lr
80008784:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80008786:	3f fb       	mov	r11,-1
80008788:	30 fc       	mov	r12,15
8000878a:	f0 1f 00 05 	mcall	8000879c <flashc_quick_user_page_read+0x1c>
	return flashc_is_page_erased();
8000878e:	f0 1f 00 05 	mcall	800087a0 <flashc_quick_user_page_read+0x20>
80008792:	18 98       	mov	r8,r12
}
80008794:	10 9c       	mov	r12,r8
80008796:	e3 cd 80 80 	ldm	sp++,r7,pc
8000879a:	00 00       	add	r0,r0
8000879c:	80 00       	ld.sh	r0,r0[0x0]
8000879e:	86 10       	ld.sh	r0,r3[0x2]
800087a0:	80 00       	ld.sh	r0,r0[0x0]
800087a2:	86 b0       	ld.uh	r0,r3[0x6]

800087a4 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
800087a4:	eb cd 40 80 	pushm	r7,lr
800087a8:	1a 97       	mov	r7,sp
800087aa:	20 1d       	sub	sp,4
800087ac:	18 98       	mov	r8,r12
800087ae:	ef 68 ff fc 	st.b	r7[-4],r8
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
800087b2:	3f fb       	mov	r11,-1
800087b4:	30 ec       	mov	r12,14
800087b6:	f0 1f 00 09 	mcall	800087d8 <flashc_erase_user_page+0x34>
	return (check) ? flashc_quick_user_page_read() : true;
800087ba:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800087be:	30 08       	mov	r8,0
800087c0:	f0 09 18 00 	cp.b	r9,r8
800087c4:	c0 50       	breq	800087ce <flashc_erase_user_page+0x2a>
800087c6:	f0 1f 00 06 	mcall	800087dc <flashc_erase_user_page+0x38>
800087ca:	18 98       	mov	r8,r12
800087cc:	c0 28       	rjmp	800087d0 <flashc_erase_user_page+0x2c>
800087ce:	30 18       	mov	r8,1
}
800087d0:	10 9c       	mov	r12,r8
800087d2:	2f fd       	sub	sp,-4
800087d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800087d8:	80 00       	ld.sh	r0,r0[0x0]
800087da:	86 10       	ld.sh	r0,r3[0x2]
800087dc:	80 00       	ld.sh	r0,r0[0x0]
800087de:	87 80       	st.w	r3[0x20],r0

800087e0 <flashc_write_user_page>:


void flashc_write_user_page(void)
{
800087e0:	eb cd 40 80 	pushm	r7,lr
800087e4:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
800087e6:	3f fb       	mov	r11,-1
800087e8:	30 dc       	mov	r12,13
800087ea:	f0 1f 00 03 	mcall	800087f4 <flashc_write_user_page+0x14>
}
800087ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800087f2:	00 00       	add	r0,r0
800087f4:	80 00       	ld.sh	r0,r0[0x0]
800087f6:	86 10       	ld.sh	r0,r3[0x2]

800087f8 <flashc_memcpy>:
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
800087f8:	eb cd 40 80 	pushm	r7,lr
800087fc:	1a 97       	mov	r7,sp
800087fe:	20 bd       	sub	sp,44
80008800:	ef 4c ff e0 	st.w	r7[-32],r12
80008804:	ef 4b ff dc 	st.w	r7[-36],r11
80008808:	ef 4a ff d8 	st.w	r7[-40],r10
8000880c:	12 98       	mov	r8,r9
8000880e:	ef 68 ff d4 	st.b	r7[-44],r8
	uint16_t page_pos;
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
80008812:	30 08       	mov	r8,0
80008814:	ef 48 ff f0 	st.w	r7[-16],r8
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
80008818:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000881c:	ef 48 ff f8 	st.w	r7[-8],r8
	const uint8_t* src_buf=(const uint8_t*)src;
80008820:	ee f8 ff dc 	ld.w	r8,r7[-36]
80008824:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
80008828:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000882c:	e0 69 ff ff 	mov	r9,65535
80008830:	ea 19 80 7f 	orh	r9,0x807f
80008834:	12 38       	cp.w	r8,r9
80008836:	5f b8       	srhi	r8
80008838:	ef 68 ff ef 	st.b	r7[-17],r8

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
8000883c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008840:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008844:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80008848:	f2 08 01 08 	sub	r8,r9,r8
8000884c:	ef 48 ff f4 	st.w	r7[-12],r8

	while (nbytes) {
80008850:	c9 18       	rjmp	80008972 <flashc_memcpy+0x17a>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
80008852:	f0 1f 00 50 	mcall	80008990 <flashc_memcpy+0x198>
		error_status |= flashc_error_status;
80008856:	4d 08       	lddpc	r8,80008994 <flashc_memcpy+0x19c>
80008858:	70 08       	ld.w	r8,r8[0x0]
8000885a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000885e:	f3 e8 10 08 	or	r8,r9,r8
80008862:	ef 48 ff f0 	st.w	r7[-16],r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
80008866:	30 08       	mov	r8,0
80008868:	ef 58 ff ec 	st.h	r7[-20],r8
8000886c:	c4 b8       	rjmp	80008902 <flashc_memcpy+0x10a>
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
8000886e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008872:	f0 e8 00 00 	ld.d	r8,r8[0]
80008876:	ee e9 ff e4 	st.d	r7[-28],r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
8000887a:	30 08       	mov	r8,0
8000887c:	ef 68 ff ee 	st.b	r7[-18],r8
80008880:	c2 d8       	rjmp	800088da <flashc_memcpy+0xe2>
				if (nbytes && (flash_add == dest_add)) {
80008882:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008886:	58 08       	cp.w	r8,0
80008888:	c1 f0       	breq	800088c6 <flashc_memcpy+0xce>
8000888a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000888e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008892:	10 39       	cp.w	r9,r8
80008894:	c1 91       	brne	800088c6 <flashc_memcpy+0xce>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80008896:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000889a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000889e:	11 88       	ld.ub	r8,r8[0x0]
800088a0:	ee 09 00 09 	add	r9,r7,r9
800088a4:	f3 68 ff e4 	st.b	r9[-28],r8
800088a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800088ac:	2f f8       	sub	r8,-1
800088ae:	ef 48 ff fc 	st.w	r7[-4],r8
					dest_add++;
800088b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800088b6:	2f f8       	sub	r8,-1
800088b8:	ef 48 ff f8 	st.w	r7[-8],r8
					nbytes--;
800088bc:	ee f8 ff d8 	ld.w	r8,r7[-40]
800088c0:	20 18       	sub	r8,1
800088c2:	ef 48 ff d8 	st.w	r7[-40],r8
				}
				flash_add++;
800088c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800088ca:	2f f8       	sub	r8,-1
800088cc:	ef 48 ff f4 	st.w	r7[-12],r8
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
800088d0:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800088d4:	2f f8       	sub	r8,-1
800088d6:	ef 68 ff ee 	st.b	r7[-18],r8
800088da:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800088de:	30 78       	mov	r8,7
800088e0:	f0 09 18 00 	cp.b	r9,r8
800088e4:	fe 98 ff cf 	brls	80008882 <flashc_memcpy+0x8a>
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
800088e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800088ec:	20 88       	sub	r8,8
800088ee:	10 9a       	mov	r10,r8
800088f0:	ee e8 ff e4 	ld.d	r8,r7[-28]
800088f4:	f4 e9 00 00 	st.d	r10[0],r8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
800088f8:	ef 08 ff ec 	ld.sh	r8,r7[-20]
800088fc:	2f 88       	sub	r8,-8
800088fe:	ef 58 ff ec 	st.h	r7[-20],r8
80008902:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80008906:	e0 68 01 ff 	mov	r8,511
8000890a:	f0 09 19 00 	cp.h	r9,r8
8000890e:	fe 98 ff b0 	brls	8000886e <flashc_memcpy+0x76>
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
80008912:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80008916:	30 08       	mov	r8,0
80008918:	f0 09 18 00 	cp.b	r9,r8
8000891c:	c1 70       	breq	8000894a <flashc_memcpy+0x152>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
8000891e:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80008922:	30 08       	mov	r8,0
80008924:	f0 09 18 00 	cp.b	r9,r8
80008928:	c0 50       	breq	80008932 <flashc_memcpy+0x13a>
8000892a:	30 0c       	mov	r12,0
8000892c:	f0 1f 00 1b 	mcall	80008998 <flashc_memcpy+0x1a0>
80008930:	c0 58       	rjmp	8000893a <flashc_memcpy+0x142>
80008932:	30 0b       	mov	r11,0
80008934:	3f fc       	mov	r12,-1
80008936:	f0 1f 00 1a 	mcall	8000899c <flashc_memcpy+0x1a4>
			error_status |= flashc_error_status;
8000893a:	49 78       	lddpc	r8,80008994 <flashc_memcpy+0x19c>
8000893c:	70 08       	ld.w	r8,r8[0x0]
8000893e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008942:	f3 e8 10 08 	or	r8,r9,r8
80008946:	ef 48 ff f0 	st.w	r7[-16],r8
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
8000894a:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000894e:	30 08       	mov	r8,0
80008950:	f0 09 18 00 	cp.b	r9,r8
80008954:	c0 40       	breq	8000895c <flashc_memcpy+0x164>
80008956:	f0 1f 00 13 	mcall	800089a0 <flashc_memcpy+0x1a8>
8000895a:	c0 48       	rjmp	80008962 <flashc_memcpy+0x16a>
8000895c:	3f fc       	mov	r12,-1
8000895e:	f0 1f 00 12 	mcall	800089a4 <flashc_memcpy+0x1ac>
		error_status |= flashc_error_status;
80008962:	48 d8       	lddpc	r8,80008994 <flashc_memcpy+0x19c>
80008964:	70 08       	ld.w	r8,r8[0x0]
80008966:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000896a:	f3 e8 10 08 	or	r8,r9,r8
8000896e:	ef 48 ff f0 	st.w	r7[-16],r8

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80008972:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008976:	58 08       	cp.w	r8,0
80008978:	fe 91 ff 6d 	brne	80008852 <flashc_memcpy+0x5a>
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
8000897c:	48 68       	lddpc	r8,80008994 <flashc_memcpy+0x19c>
8000897e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008982:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
80008984:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
80008988:	10 9c       	mov	r12,r8
8000898a:	2f 5d       	sub	sp,-44
8000898c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008990:	80 00       	ld.sh	r0,r0[0x0]
80008992:	86 98       	ld.uh	r8,r3[0x2]
80008994:	00 00       	add	r0,r0
80008996:	06 9c       	mov	r12,r3
80008998:	80 00       	ld.sh	r0,r0[0x0]
8000899a:	87 a4       	st.w	r3[0x28],r4
8000899c:	80 00       	ld.sh	r0,r0[0x0]
8000899e:	86 f8       	ld.uh	r8,r3[0xe]
800089a0:	80 00       	ld.sh	r0,r0[0x0]
800089a2:	87 e0       	st.w	r3[0x38],r0
800089a4:	80 00       	ld.sh	r0,r0[0x0]
800089a6:	87 60       	st.w	r3[0x18],r0

800089a8 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800089a8:	eb cd 40 80 	pushm	r7,lr
800089ac:	1a 97       	mov	r7,sp
800089ae:	20 4d       	sub	sp,16
800089b0:	ef 4c ff f4 	st.w	r7[-12],r12
800089b4:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
800089b8:	30 08       	mov	r8,0
800089ba:	ef 48 ff f8 	st.w	r7[-8],r8
  uint32_t i;

  for (i = 0; i < size; i++)
800089be:	30 08       	mov	r8,0
800089c0:	ef 48 ff fc 	st.w	r7[-4],r8
800089c4:	c1 d8       	rjmp	800089fe <gpio_enable_module+0x56>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800089c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800089ca:	11 98       	ld.ub	r8,r8[0x1]
800089cc:	10 99       	mov	r9,r8
800089ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
800089d2:	11 88       	ld.ub	r8,r8[0x0]
800089d4:	12 9b       	mov	r11,r9
800089d6:	10 9c       	mov	r12,r8
800089d8:	f0 1f 00 10 	mcall	80008a18 <gpio_enable_module+0x70>
800089dc:	18 98       	mov	r8,r12
800089de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800089e2:	f3 e8 10 08 	or	r8,r9,r8
800089e6:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
800089ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800089ee:	2f e8       	sub	r8,-2
800089f0:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800089f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800089f8:	2f f8       	sub	r8,-1
800089fa:	ef 48 ff fc 	st.w	r7[-4],r8
800089fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008a02:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008a06:	10 39       	cp.w	r9,r8
80008a08:	cd f3       	brcs	800089c6 <gpio_enable_module+0x1e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
80008a0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80008a0e:	10 9c       	mov	r12,r8
80008a10:	2f cd       	sub	sp,-16
80008a12:	e3 cd 80 80 	ldm	sp++,r7,pc
80008a16:	00 00       	add	r0,r0
80008a18:	80 00       	ld.sh	r0,r0[0x0]
80008a1a:	8a 1c       	ld.sh	r12,r5[0x2]

80008a1c <gpio_enable_module_pin>:


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80008a1c:	eb cd 40 80 	pushm	r7,lr
80008a20:	1a 97       	mov	r7,sp
80008a22:	20 3d       	sub	sp,12
80008a24:	ef 4c ff f8 	st.w	r7[-8],r12
80008a28:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008a2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a30:	a5 98       	lsr	r8,0x5
80008a32:	a9 68       	lsl	r8,0x8
80008a34:	e0 28 f0 00 	sub	r8,61440
80008a38:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
80008a3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008a40:	58 18       	cp.w	r8,1
80008a42:	c1 e0       	breq	80008a7e <gpio_enable_module_pin+0x62>
80008a44:	c0 63       	brcs	80008a50 <gpio_enable_module_pin+0x34>
80008a46:	58 28       	cp.w	r8,2
80008a48:	c3 20       	breq	80008aac <gpio_enable_module_pin+0x90>
80008a4a:	58 38       	cp.w	r8,3
80008a4c:	c4 70       	breq	80008ada <gpio_enable_module_pin+0xbe>
80008a4e:	c5 d8       	rjmp	80008b08 <gpio_enable_module_pin+0xec>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80008a50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a54:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a58:	30 19       	mov	r9,1
80008a5a:	f2 08 09 48 	lsl	r8,r9,r8
80008a5e:	10 99       	mov	r9,r8
80008a60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a64:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80008a66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a6a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a6e:	30 19       	mov	r9,1
80008a70:	f2 08 09 48 	lsl	r8,r9,r8
80008a74:	10 99       	mov	r9,r8
80008a76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a7a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008a7c:	c4 88       	rjmp	80008b0c <gpio_enable_module_pin+0xf0>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80008a7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a86:	30 19       	mov	r9,1
80008a88:	f2 08 09 48 	lsl	r8,r9,r8
80008a8c:	10 99       	mov	r9,r8
80008a8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a92:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80008a94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a98:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a9c:	30 19       	mov	r9,1
80008a9e:	f2 08 09 48 	lsl	r8,r9,r8
80008aa2:	10 99       	mov	r9,r8
80008aa4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008aa8:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008aaa:	c3 18       	rjmp	80008b0c <gpio_enable_module_pin+0xf0>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80008aac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ab0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ab4:	30 19       	mov	r9,1
80008ab6:	f2 08 09 48 	lsl	r8,r9,r8
80008aba:	10 99       	mov	r9,r8
80008abc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ac0:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80008ac2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ac6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008aca:	30 19       	mov	r9,1
80008acc:	f2 08 09 48 	lsl	r8,r9,r8
80008ad0:	10 99       	mov	r9,r8
80008ad2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ad6:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008ad8:	c1 a8       	rjmp	80008b0c <gpio_enable_module_pin+0xf0>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80008ada:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ade:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ae2:	30 19       	mov	r9,1
80008ae4:	f2 08 09 48 	lsl	r8,r9,r8
80008ae8:	10 99       	mov	r9,r8
80008aea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008aee:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80008af0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008af4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008af8:	30 19       	mov	r9,1
80008afa:	f2 08 09 48 	lsl	r8,r9,r8
80008afe:	10 99       	mov	r9,r8
80008b00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b04:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80008b06:	c0 38       	rjmp	80008b0c <gpio_enable_module_pin+0xf0>
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
80008b08:	30 18       	mov	r8,1
80008b0a:	c0 d8       	rjmp	80008b24 <gpio_enable_module_pin+0x108>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80008b0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b10:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b14:	30 19       	mov	r9,1
80008b16:	f2 08 09 48 	lsl	r8,r9,r8
80008b1a:	10 99       	mov	r9,r8
80008b1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b20:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
80008b22:	30 08       	mov	r8,0
}
80008b24:	10 9c       	mov	r12,r8
80008b26:	2f dd       	sub	sp,-12
80008b28:	e3 cd 80 80 	ldm	sp++,r7,pc

80008b2c <gpio_enable_gpio_pin>:
  }
}


void gpio_enable_gpio_pin(uint32_t pin)
{
80008b2c:	eb cd 40 80 	pushm	r7,lr
80008b30:	1a 97       	mov	r7,sp
80008b32:	20 2d       	sub	sp,8
80008b34:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008b38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b3c:	a5 98       	lsr	r8,0x5
80008b3e:	a9 68       	lsl	r8,0x8
80008b40:	e0 28 f0 00 	sub	r8,61440
80008b44:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
80008b48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b4c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b50:	30 19       	mov	r9,1
80008b52:	f2 08 09 48 	lsl	r8,r9,r8
80008b56:	10 99       	mov	r9,r8
80008b58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b5c:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
80008b60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b64:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b68:	30 19       	mov	r9,1
80008b6a:	f2 08 09 48 	lsl	r8,r9,r8
80008b6e:	10 99       	mov	r9,r8
80008b70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b74:	91 19       	st.w	r8[0x4],r9
}
80008b76:	2f ed       	sub	sp,-8
80008b78:	e3 cd 80 80 	ldm	sp++,r7,pc

80008b7c <gpio_enable_pin_pull_up>:

#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
80008b7c:	eb cd 40 80 	pushm	r7,lr
80008b80:	1a 97       	mov	r7,sp
80008b82:	20 2d       	sub	sp,8
80008b84:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008b88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b8c:	a5 98       	lsr	r8,0x5
80008b8e:	a9 68       	lsl	r8,0x8
80008b90:	e0 28 f0 00 	sub	r8,61440
80008b94:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80008b98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b9c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ba0:	30 19       	mov	r9,1
80008ba2:	f2 08 09 48 	lsl	r8,r9,r8
80008ba6:	10 99       	mov	r9,r8
80008ba8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bac:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80008bb0:	2f ed       	sub	sp,-8
80008bb2:	e3 cd 80 80 	ldm	sp++,r7,pc

80008bb6 <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80008bb6:	eb cd 40 80 	pushm	r7,lr
80008bba:	1a 97       	mov	r7,sp
80008bbc:	20 3d       	sub	sp,12
80008bbe:	ef 4c ff f8 	st.w	r7[-8],r12
80008bc2:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008bc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bca:	a5 98       	lsr	r8,0x5
80008bcc:	a9 68       	lsl	r8,0x8
80008bce:	e0 28 f0 00 	sub	r8,61440
80008bd2:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
80008bd6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008bda:	e2 18 00 04 	andl	r8,0x4,COH
80008bde:	c0 e0       	breq	80008bfa <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
80008be0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008be4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008be8:	30 19       	mov	r9,1
80008bea:	f2 08 09 48 	lsl	r8,r9,r8
80008bee:	10 99       	mov	r9,r8
80008bf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bf4:	f1 49 00 74 	st.w	r8[116],r9
80008bf8:	c0 d8       	rjmp	80008c12 <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80008bfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bfe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c02:	30 19       	mov	r9,1
80008c04:	f2 08 09 48 	lsl	r8,r9,r8
80008c08:	10 99       	mov	r9,r8
80008c0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c0e:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80008c12:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008c16:	e2 18 00 80 	andl	r8,0x80,COH
80008c1a:	c5 a0       	breq	80008cce <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
80008c1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008c20:	e2 18 01 80 	andl	r8,0x180,COH
80008c24:	c1 a0       	breq	80008c58 <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80008c26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c2a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c2e:	30 19       	mov	r9,1
80008c30:	f2 08 09 48 	lsl	r8,r9,r8
80008c34:	10 99       	mov	r9,r8
80008c36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c3a:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80008c3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c42:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c46:	30 19       	mov	r9,1
80008c48:	f2 08 09 48 	lsl	r8,r9,r8
80008c4c:	10 99       	mov	r9,r8
80008c4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c52:	f1 49 00 b8 	st.w	r8[184],r9
80008c56:	c3 c8       	rjmp	80008cce <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
80008c58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008c5c:	e2 18 02 80 	andl	r8,0x280,COH
80008c60:	c1 a0       	breq	80008c94 <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80008c62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c66:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c6a:	30 19       	mov	r9,1
80008c6c:	f2 08 09 48 	lsl	r8,r9,r8
80008c70:	10 99       	mov	r9,r8
80008c72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c76:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80008c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c7e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c82:	30 19       	mov	r9,1
80008c84:	f2 08 09 48 	lsl	r8,r9,r8
80008c88:	10 99       	mov	r9,r8
80008c8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c8e:	f1 49 00 b8 	st.w	r8[184],r9
80008c92:	c1 e8       	rjmp	80008cce <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
80008c94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008c98:	e2 18 03 80 	andl	r8,0x380,COH
80008c9c:	c1 90       	breq	80008cce <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80008c9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ca2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ca6:	30 19       	mov	r9,1
80008ca8:	f2 08 09 48 	lsl	r8,r9,r8
80008cac:	10 99       	mov	r9,r8
80008cae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cb2:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80008cb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008cba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008cbe:	30 19       	mov	r9,1
80008cc0:	f2 08 09 48 	lsl	r8,r9,r8
80008cc4:	10 99       	mov	r9,r8
80008cc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cca:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80008cce:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008cd2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008cd6:	5c 58       	castu.b	r8
80008cd8:	c2 c0       	breq	80008d30 <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
80008cda:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008cde:	e2 18 00 02 	andl	r8,0x2,COH
80008ce2:	c0 e0       	breq	80008cfe <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80008ce4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ce8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008cec:	30 19       	mov	r9,1
80008cee:	f2 08 09 48 	lsl	r8,r9,r8
80008cf2:	10 99       	mov	r9,r8
80008cf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cf8:	f1 49 00 54 	st.w	r8[84],r9
80008cfc:	c0 d8       	rjmp	80008d16 <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80008cfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d02:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d06:	30 19       	mov	r9,1
80008d08:	f2 08 09 48 	lsl	r8,r9,r8
80008d0c:	10 99       	mov	r9,r8
80008d0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d12:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80008d16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d1a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d1e:	30 19       	mov	r9,1
80008d20:	f2 08 09 48 	lsl	r8,r9,r8
80008d24:	10 99       	mov	r9,r8
80008d26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d2a:	f1 49 00 44 	st.w	r8[68],r9
80008d2e:	c0 d8       	rjmp	80008d48 <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80008d30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d38:	30 19       	mov	r9,1
80008d3a:	f2 08 09 48 	lsl	r8,r9,r8
80008d3e:	10 99       	mov	r9,r8
80008d40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d44:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80008d48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d4c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d50:	30 19       	mov	r9,1
80008d52:	f2 08 09 48 	lsl	r8,r9,r8
80008d56:	10 99       	mov	r9,r8
80008d58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d5c:	91 19       	st.w	r8[0x4],r9
}
80008d5e:	2f dd       	sub	sp,-12
80008d60:	e3 cd 80 80 	ldm	sp++,r7,pc

80008d64 <gpio_get_pin_value>:
    /* Enable GPIO */
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
80008d64:	eb cd 40 80 	pushm	r7,lr
80008d68:	1a 97       	mov	r7,sp
80008d6a:	20 2d       	sub	sp,8
80008d6c:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008d70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d74:	a5 98       	lsr	r8,0x5
80008d76:	a9 68       	lsl	r8,0x8
80008d78:	e0 28 f0 00 	sub	r8,61440
80008d7c:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80008d80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d84:	71 89       	ld.w	r9,r8[0x60]
80008d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d8a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d8e:	f2 08 0a 48 	lsr	r8,r9,r8
80008d92:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80008d96:	10 9c       	mov	r12,r8
80008d98:	2f ed       	sub	sp,-8
80008d9a:	e3 cd 80 80 	ldm	sp++,r7,pc

80008d9e <gpio_set_gpio_pin>:
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
}


void gpio_set_gpio_pin(uint32_t pin)
{
80008d9e:	eb cd 40 80 	pushm	r7,lr
80008da2:	1a 97       	mov	r7,sp
80008da4:	20 2d       	sub	sp,8
80008da6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008daa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008dae:	a5 98       	lsr	r8,0x5
80008db0:	a9 68       	lsl	r8,0x8
80008db2:	e0 28 f0 00 	sub	r8,61440
80008db6:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80008dba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008dbe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008dc2:	30 19       	mov	r9,1
80008dc4:	f2 08 09 48 	lsl	r8,r9,r8
80008dc8:	10 99       	mov	r9,r8
80008dca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dce:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80008dd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008dd6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008dda:	30 19       	mov	r9,1
80008ddc:	f2 08 09 48 	lsl	r8,r9,r8
80008de0:	10 99       	mov	r9,r8
80008de2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008de6:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80008dea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008dee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008df2:	30 19       	mov	r9,1
80008df4:	f2 08 09 48 	lsl	r8,r9,r8
80008df8:	10 99       	mov	r9,r8
80008dfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dfe:	91 19       	st.w	r8[0x4],r9
}
80008e00:	2f ed       	sub	sp,-8
80008e02:	e3 cd 80 80 	ldm	sp++,r7,pc

80008e06 <gpio_clr_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
80008e06:	eb cd 40 80 	pushm	r7,lr
80008e0a:	1a 97       	mov	r7,sp
80008e0c:	20 2d       	sub	sp,8
80008e0e:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008e12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e16:	a5 98       	lsr	r8,0x5
80008e18:	a9 68       	lsl	r8,0x8
80008e1a:	e0 28 f0 00 	sub	r8,61440
80008e1e:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80008e22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e26:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e2a:	30 19       	mov	r9,1
80008e2c:	f2 08 09 48 	lsl	r8,r9,r8
80008e30:	10 99       	mov	r9,r8
80008e32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e36:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80008e3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e3e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e42:	30 19       	mov	r9,1
80008e44:	f2 08 09 48 	lsl	r8,r9,r8
80008e48:	10 99       	mov	r9,r8
80008e4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e4e:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80008e52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e56:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e5a:	30 19       	mov	r9,1
80008e5c:	f2 08 09 48 	lsl	r8,r9,r8
80008e60:	10 99       	mov	r9,r8
80008e62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e66:	91 19       	st.w	r8[0x4],r9
}
80008e68:	2f ed       	sub	sp,-8
80008e6a:	e3 cd 80 80 	ldm	sp++,r7,pc

80008e6e <gpio_tgl_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
80008e6e:	eb cd 40 80 	pushm	r7,lr
80008e72:	1a 97       	mov	r7,sp
80008e74:	20 2d       	sub	sp,8
80008e76:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80008e7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e7e:	a5 98       	lsr	r8,0x5
80008e80:	a9 68       	lsl	r8,0x8
80008e82:	e0 28 f0 00 	sub	r8,61440
80008e86:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
80008e8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e8e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e92:	30 19       	mov	r9,1
80008e94:	f2 08 09 48 	lsl	r8,r9,r8
80008e98:	10 99       	mov	r9,r8
80008e9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e9e:	f1 49 00 5c 	st.w	r8[92],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80008ea2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ea6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008eaa:	30 19       	mov	r9,1
80008eac:	f2 08 09 48 	lsl	r8,r9,r8
80008eb0:	10 99       	mov	r9,r8
80008eb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008eb6:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80008eba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ebe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ec2:	30 19       	mov	r9,1
80008ec4:	f2 08 09 48 	lsl	r8,r9,r8
80008ec8:	10 99       	mov	r9,r8
80008eca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ece:	91 19       	st.w	r8[0x4],r9
}
80008ed0:	2f ed       	sub	sp,-8
80008ed2:	e3 cd 80 80 	ldm	sp++,r7,pc

80008ed6 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80008ed6:	eb cd 40 80 	pushm	r7,lr
80008eda:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80008edc:	c0 08       	rjmp	80008edc <_unhandled_interrupt+0x6>
80008ede:	d7 03       	nop

80008ee0 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80008ee0:	eb cd 40 80 	pushm	r7,lr
80008ee4:	1a 97       	mov	r7,sp
80008ee6:	20 3d       	sub	sp,12
80008ee8:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80008eec:	fe 78 08 00 	mov	r8,-63488
80008ef0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008ef4:	f2 09 11 03 	rsub	r9,r9,3
80008ef8:	28 09       	sub	r9,-128
80008efa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008efe:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80008f02:	fe 78 08 00 	mov	r8,-63488
80008f06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008f0a:	2c 09       	sub	r9,-64
80008f0c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008f10:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80008f14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f18:	58 08       	cp.w	r8,0
80008f1a:	c1 30       	breq	80008f40 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80008f1c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008f20:	48 b8       	lddpc	r8,80008f4c <_get_interrupt_handler+0x6c>
80008f22:	a1 79       	lsl	r9,0x1
80008f24:	2f f9       	sub	r9,-1
80008f26:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008f2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f2e:	f0 08 12 00 	clz	r8,r8
80008f32:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80008f36:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80008f38:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80008f3c:	70 08       	ld.w	r8,r8[0x0]
80008f3e:	c0 28       	rjmp	80008f42 <_get_interrupt_handler+0x62>
80008f40:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80008f42:	10 9c       	mov	r12,r8
80008f44:	2f dd       	sub	sp,-12
80008f46:	e3 cd 80 80 	ldm	sp++,r7,pc
80008f4a:	00 00       	add	r0,r0
80008f4c:	80 00       	ld.sh	r0,r0[0x0]
80008f4e:	f0 fc eb cd 	ld.w	r12,r8[-5171]

80008f50 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80008f50:	eb cd 40 80 	pushm	r7,lr
80008f54:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80008f56:	48 38       	lddpc	r8,80008f60 <INTC_init_evba+0x10>
80008f58:	e3 b8 00 01 	mtsr	0x4,r8
}
80008f5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008f60:	80 00       	ld.sh	r0,r0[0x0]
80008f62:	ea 00       	*unknown*

80008f64 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80008f64:	eb cd 40 80 	pushm	r7,lr
80008f68:	1a 97       	mov	r7,sp
80008f6a:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80008f6c:	f0 1f 00 1f 	mcall	80008fe8 <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80008f70:	30 08       	mov	r8,0
80008f72:	ef 48 ff f8 	st.w	r7[-8],r8
80008f76:	c3 18       	rjmp	80008fd8 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80008f78:	30 08       	mov	r8,0
80008f7a:	ef 48 ff fc 	st.w	r7[-4],r8
80008f7e:	c1 48       	rjmp	80008fa6 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80008f80:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008f84:	49 a8       	lddpc	r8,80008fec <INTC_init_interrupts+0x88>
80008f86:	a1 79       	lsl	r9,0x1
80008f88:	2f f9       	sub	r9,-1
80008f8a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008f8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f92:	a3 68       	lsl	r8,0x2
80008f94:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80008f98:	49 69       	lddpc	r9,80008ff0 <INTC_init_interrupts+0x8c>
80008f9a:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80008f9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fa0:	2f f8       	sub	r8,-1
80008fa2:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80008fa6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008faa:	49 18       	lddpc	r8,80008fec <INTC_init_interrupts+0x88>
80008fac:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80008fb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fb4:	10 39       	cp.w	r9,r8
80008fb6:	fe 9b ff e5 	brhi	80008f80 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80008fba:	fe 78 08 00 	mov	r8,-63488
80008fbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008fc2:	48 db       	lddpc	r11,80008ff4 <INTC_init_interrupts+0x90>
80008fc4:	48 da       	lddpc	r10,80008ff8 <INTC_init_interrupts+0x94>
80008fc6:	f6 0a 01 0a 	sub	r10,r11,r10
80008fca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80008fce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fd2:	2f f8       	sub	r8,-1
80008fd4:	ef 48 ff f8 	st.w	r7[-8],r8
80008fd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fdc:	59 d8       	cp.w	r8,29
80008fde:	fe 98 ff cd 	brls	80008f78 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80008fe2:	2f ed       	sub	sp,-8
80008fe4:	e3 cd 80 80 	ldm	sp++,r7,pc
80008fe8:	80 00       	ld.sh	r0,r0[0x0]
80008fea:	8f 50       	st.w	r7[0x14],r0
80008fec:	80 00       	ld.sh	r0,r0[0x0]
80008fee:	f0 fc 80 00 	ld.w	r12,r8[-32768]
80008ff2:	8e d6       	ld.uh	r6,r7[0xa]
80008ff4:	80 00       	ld.sh	r0,r0[0x0]
80008ff6:	eb 04 80 00 	ld.sh	r4,r5[-32768]
80008ffa:	ea 00       	*unknown*

80008ffc <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80008ffc:	eb cd 40 80 	pushm	r7,lr
80009000:	1a 97       	mov	r7,sp
80009002:	20 4d       	sub	sp,16
80009004:	ef 4c ff f8 	st.w	r7[-8],r12
80009008:	ef 4b ff f4 	st.w	r7[-12],r11
8000900c:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80009010:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009014:	a5 98       	lsr	r8,0x5
80009016:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000901a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000901e:	4a 78       	lddpc	r8,800090b8 <INTC_register_interrupt+0xbc>
80009020:	a1 79       	lsl	r9,0x1
80009022:	2f f9       	sub	r9,-1
80009024:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80009028:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000902c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80009030:	a3 68       	lsl	r8,0x2
80009032:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80009036:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000903a:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000903c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009040:	58 08       	cp.w	r8,0
80009042:	c0 c1       	brne	8000905a <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80009044:	fe 78 08 00 	mov	r8,-63488
80009048:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000904c:	49 cb       	lddpc	r11,800090bc <INTC_register_interrupt+0xc0>
8000904e:	49 da       	lddpc	r10,800090c0 <INTC_register_interrupt+0xc4>
80009050:	f6 0a 01 0a 	sub	r10,r11,r10
80009054:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80009058:	c2 d8       	rjmp	800090b2 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
8000905a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000905e:	58 18       	cp.w	r8,1
80009060:	c0 d1       	brne	8000907a <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80009062:	fe 78 08 00 	mov	r8,-63488
80009066:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000906a:	49 7b       	lddpc	r11,800090c4 <INTC_register_interrupt+0xc8>
8000906c:	49 5a       	lddpc	r10,800090c0 <INTC_register_interrupt+0xc4>
8000906e:	f6 0a 01 0a 	sub	r10,r11,r10
80009072:	bf aa       	sbr	r10,0x1e
80009074:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80009078:	c1 d8       	rjmp	800090b2 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
8000907a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000907e:	58 28       	cp.w	r8,2
80009080:	c0 d1       	brne	8000909a <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80009082:	fe 78 08 00 	mov	r8,-63488
80009086:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000908a:	49 0b       	lddpc	r11,800090c8 <INTC_register_interrupt+0xcc>
8000908c:	48 da       	lddpc	r10,800090c0 <INTC_register_interrupt+0xc4>
8000908e:	f6 0a 01 0a 	sub	r10,r11,r10
80009092:	bf ba       	sbr	r10,0x1f
80009094:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80009098:	c0 d8       	rjmp	800090b2 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000909a:	fe 78 08 00 	mov	r8,-63488
8000909e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800090a2:	48 bb       	lddpc	r11,800090cc <INTC_register_interrupt+0xd0>
800090a4:	48 7a       	lddpc	r10,800090c0 <INTC_register_interrupt+0xc4>
800090a6:	f6 0a 01 0a 	sub	r10,r11,r10
800090aa:	ea 1a c0 00 	orh	r10,0xc000
800090ae:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
800090b2:	2f cd       	sub	sp,-16
800090b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800090b8:	80 00       	ld.sh	r0,r0[0x0]
800090ba:	f0 fc 80 00 	ld.w	r12,r8[-32768]
800090be:	eb 04 80 00 	ld.sh	r4,r5[-32768]
800090c2:	ea 00       	*unknown*
800090c4:	80 00       	ld.sh	r0,r0[0x0]
800090c6:	eb 12 80 00 	ld.uh	r2,r5[-32768]
800090ca:	eb 20 80 00 	ld.sb	r0,r5[-32768]
800090ce:	eb 2e eb cd 	ld.sb	lr,r5[-5171]

800090d0 <mci_reset>:


int shadow_sr=0;

void mci_reset(volatile avr32_mci_t *mci)
{
800090d0:	eb cd 40 80 	pushm	r7,lr
800090d4:	1a 97       	mov	r7,sp
800090d6:	20 1d       	sub	sp,4
800090d8:	ef 4c ff fc 	st.w	r7[-4],r12
  mci->cr = (1<<AVR32_MCI_CR_SWRST);
800090dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090e0:	e0 69 00 80 	mov	r9,128
800090e4:	91 09       	st.w	r8[0x0],r9
}
800090e6:	2f fd       	sub	sp,-4
800090e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800090ec <mci_disable>:

void mci_disable(volatile avr32_mci_t *mci)
{
800090ec:	eb cd 40 80 	pushm	r7,lr
800090f0:	1a 97       	mov	r7,sp
800090f2:	20 1d       	sub	sp,4
800090f4:	ef 4c ff fc 	st.w	r7[-4],r12
  // Disable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIDIS) | (1<<AVR32_MCI_CR_PWSDIS);
800090f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800090fc:	30 a9       	mov	r9,10
800090fe:	91 09       	st.w	r8[0x0],r9
}
80009100:	2f fd       	sub	sp,-4
80009102:	e3 cd 80 80 	ldm	sp++,r7,pc

80009106 <mci_enable>:

void mci_enable(volatile avr32_mci_t *mci)
{
80009106:	eb cd 40 80 	pushm	r7,lr
8000910a:	1a 97       	mov	r7,sp
8000910c:	20 1d       	sub	sp,4
8000910e:	ef 4c ff fc 	st.w	r7[-4],r12
  // Enable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIEN) | (1<<AVR32_MCI_CR_PWSEN);
80009112:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009116:	30 59       	mov	r9,5
80009118:	91 09       	st.w	r8[0x0],r9
}
8000911a:	2f fd       	sub	sp,-4
8000911c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009120 <mci_set_speed>:
}

void mci_set_speed(volatile avr32_mci_t *mci,
                   uint32_t pbb_hz,
                   uint32_t card_speed)
{
80009120:	eb cd 40 80 	pushm	r7,lr
80009124:	1a 97       	mov	r7,sp
80009126:	20 7d       	sub	sp,28
80009128:	ef 4c ff ec 	st.w	r7[-20],r12
8000912c:	ef 4b ff e8 	st.w	r7[-24],r11
80009130:	ef 4a ff e4 	st.w	r7[-28],r10
    avr32_mci_cfg_t   CFG;
  };
  union u_cfg val;

  // Get the Mode Register
  mci_mode_register = mci->mr;
80009134:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009138:	70 18       	ld.w	r8,r8[0x4]
8000913a:	ef 48 ff f4 	st.w	r7[-12],r8

  if (card_speed > AVR32_MCI_HSDIS_MAX_FREQ)
8000913e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009142:	e0 69 78 40 	mov	r9,30784
80009146:	ea 19 01 7d 	orh	r9,0x17d
8000914a:	12 38       	cp.w	r8,r9
8000914c:	e0 88 00 14 	brls	80009174 <mci_set_speed+0x54>
  { // Use of the High Speed mode of the MCI macro.
    val.cfg = mci->cfg;
80009150:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009154:	71 58       	ld.w	r8,r8[0x54]
80009156:	ef 48 ff f0 	st.w	r7[-16],r8
    val.CFG.hsmode = 1;
8000915a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000915e:	30 19       	mov	r9,1
80009160:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80009164:	ef 48 ff f0 	st.w	r7[-16],r8
    mci->cfg = val.cfg;
80009168:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000916c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009170:	f1 49 00 54 	st.w	r8[84],r9
  }

  // Multimedia Card Interface clock (MCCK or MCI_CK) is Master Clock (MCK)
  // divided by (2*(CLKDIV+1))
  if (card_speed > 0)
80009174:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009178:	58 08       	cp.w	r8,0
8000917a:	c2 90       	breq	800091cc <mci_set_speed+0xac>
  {
    clkdiv = pbb_hz / (card_speed * 2);
8000917c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009180:	f0 09 15 01 	lsl	r9,r8,0x1
80009184:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009188:	f0 09 0d 08 	divu	r8,r8,r9
8000918c:	ef 48 ff f8 	st.w	r7[-8],r8
    rest   = pbb_hz % (card_speed * 2);
80009190:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009194:	f0 09 15 01 	lsl	r9,r8,0x1
80009198:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000919c:	f0 09 0d 08 	divu	r8,r8,r9
800091a0:	12 98       	mov	r8,r9
800091a2:	ef 48 ff fc 	st.w	r7[-4],r8
    if (rest)
800091a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800091aa:	58 08       	cp.w	r8,0
800091ac:	c0 60       	breq	800091b8 <mci_set_speed+0x98>
    { // Ensure that the card_speed can not be higher than expected.
      clkdiv += 1;
800091ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091b2:	2f f8       	sub	r8,-1
800091b4:	ef 48 ff f8 	st.w	r7[-8],r8
    }

    if (clkdiv > 0)
800091b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091bc:	58 08       	cp.w	r8,0
800091be:	c0 b0       	breq	800091d4 <mci_set_speed+0xb4>
    {
      clkdiv -= 1;
800091c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091c4:	20 18       	sub	r8,1
800091c6:	ef 48 ff f8 	st.w	r7[-8],r8
800091ca:	c0 68       	rjmp	800091d6 <mci_set_speed+0xb6>
    }
  }
  else
  {
    clkdiv = 0;
800091cc:	30 08       	mov	r8,0
800091ce:	ef 48 ff f8 	st.w	r7[-8],r8
800091d2:	c0 28       	rjmp	800091d6 <mci_set_speed+0xb6>
      clkdiv += 1;
    }

    if (clkdiv > 0)
    {
      clkdiv -= 1;
800091d4:	d7 03       	nop
  {
    clkdiv = 0;
  }

  // Write new configuration
  mci_mode_register &= ~AVR32_MCI_MR_CLKDIV_MASK; // Clear previous value
800091d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800091da:	e0 18 ff 00 	andl	r8,0xff00
800091de:	ef 48 ff f4 	st.w	r7[-12],r8
  mci_mode_register |= clkdiv; // Set the new one
800091e2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800091e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091ea:	f3 e8 10 08 	or	r8,r9,r8
800091ee:	ef 48 ff f4 	st.w	r7[-12],r8
  mci->mr = mci_mode_register;
800091f2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800091f6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800091fa:	91 19       	st.w	r8[0x4],r9
}
800091fc:	2f 9d       	sub	sp,-28
800091fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80009202:	d7 03       	nop

80009204 <mci_init>:

int mci_init(volatile avr32_mci_t *mci,
              uint8_t card_slot,
              uint32_t pbb_hz)
{
80009204:	eb cd 40 80 	pushm	r7,lr
80009208:	1a 97       	mov	r7,sp
8000920a:	20 3d       	sub	sp,12
8000920c:	ef 4c ff fc 	st.w	r7[-4],r12
80009210:	16 98       	mov	r8,r11
80009212:	ef 4a ff f4 	st.w	r7[-12],r10
80009216:	ef 68 ff f8 	st.b	r7[-8],r8
  if (card_slot>MCI_LAST_SLOTS)
8000921a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000921e:	30 18       	mov	r8,1
80009220:	f0 09 18 00 	cp.b	r9,r8
80009224:	e0 88 00 04 	brls	8000922c <mci_init+0x28>
    return MCI_INVALID_INPUT;
80009228:	30 18       	mov	r8,1
8000922a:	c3 98       	rjmp	8000929c <mci_init+0x98>

  // Initialize all bits of the shadow status register.
  shadow_sr=0;
8000922c:	49 e8       	lddpc	r8,800092a4 <mci_init+0xa0>
8000922e:	30 09       	mov	r9,0
80009230:	91 09       	st.w	r8[0x0],r9

  // Reset the MCI
  mci_reset(mci);
80009232:	ee fc ff fc 	ld.w	r12,r7[-4]
80009236:	f0 1f 00 1d 	mcall	800092a8 <mci_init+0xa4>

  // Disable the MCI
  mci_disable(mci);
8000923a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000923e:	f0 1f 00 1c 	mcall	800092ac <mci_init+0xa8>

  // Disable all the interrupts
  mci->idr = 0xffffffff;
80009242:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009246:	3f f9       	mov	r9,-1
80009248:	f1 49 00 48 	st.w	r8[72],r9

  // Setup configuration register
  mci->cfg = 0;
8000924c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009250:	30 09       	mov	r9,0
80009252:	f1 49 00 54 	st.w	r8[84],r9

  // Clear Mode register
  mci->mr = 0;
80009256:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000925a:	30 09       	mov	r9,0
8000925c:	91 19       	st.w	r8[0x4],r9

  // Set the Data Timeout Register to 1 Mega Cycles
  mci->dtor = (MCI_DEFAULT_DTOREG);
8000925e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009262:	37 29       	mov	r9,114
80009264:	91 29       	st.w	r8[0x8],r9

  // Set the Mode Register
  mci_set_speed(mci, pbb_hz, MCI_DEFAULT_SPEED_HZ);
80009266:	e2 7a 0d 40 	mov	r10,200000
8000926a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000926e:	ee fc ff fc 	ld.w	r12,r7[-4]
80009272:	f0 1f 00 10 	mcall	800092b0 <mci_init+0xac>
  mci->mr |= ((MCI_DEFAULT_PWSDIV<<AVR32_MCI_MR_PWSDIV) | AVR32_MCI_MR_RDPROOF_MASK | AVR32_MCI_MR_WRPROOF_MASK);
80009276:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000927a:	70 18       	ld.w	r8,r8[0x4]
8000927c:	10 99       	mov	r9,r8
8000927e:	e8 19 1f 00 	orl	r9,0x1f00
80009282:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009286:	91 19       	st.w	r8[0x4],r9

  // Set the SD/MMC Card Register
  mci->sdcr = (MCI_BUS_SIZE_1_BIT>>AVR32_MCI_SDCR_SDCBUS_OFFSET)|(card_slot>>AVR32_MCI_SDCR_SDCSEL_OFFSET);
80009288:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000928c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009290:	91 39       	st.w	r8[0xc],r9

  // Enable the MCI and the Power Saving
  mci_enable(mci);
80009292:	ee fc ff fc 	ld.w	r12,r7[-4]
80009296:	f0 1f 00 08 	mcall	800092b4 <mci_init+0xb0>

  return MCI_SUCCESS;
8000929a:	30 08       	mov	r8,0
}
8000929c:	10 9c       	mov	r12,r8
8000929e:	2f dd       	sub	sp,-12
800092a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800092a4:	00 00       	add	r0,r0
800092a6:	07 b0       	ld.ub	r0,r3[0x3]
800092a8:	80 00       	ld.sh	r0,r0[0x0]
800092aa:	90 d0       	ld.uh	r0,r8[0xa]
800092ac:	80 00       	ld.sh	r0,r0[0x0]
800092ae:	90 ec       	ld.uh	r12,r8[0xc]
800092b0:	80 00       	ld.sh	r0,r0[0x0]
800092b2:	91 20       	st.w	r8[0x8],r0
800092b4:	80 00       	ld.sh	r0,r0[0x0]
800092b6:	91 06       	st.w	r8[0x0],r6

800092b8 <mci_set_block_size>:

void mci_set_block_size(volatile avr32_mci_t *mci,
                        uint16_t length)
{
800092b8:	eb cd 40 80 	pushm	r7,lr
800092bc:	1a 97       	mov	r7,sp
800092be:	20 3d       	sub	sp,12
800092c0:	ef 4c ff f8 	st.w	r7[-8],r12
800092c4:	16 98       	mov	r8,r11
800092c6:	ef 58 ff f4 	st.h	r7[-12],r8
  uint32_t mci_mode_register;

  mci_mode_register = mci->mr;
800092ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092ce:	70 18       	ld.w	r8,r8[0x4]
800092d0:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register &= ~AVR32_MCI_MR_BLKLEN_MASK; // Clear previous BLKLEN
800092d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800092d8:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800092dc:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register |= (length<<AVR32_MCI_MR_BLKLEN_OFFSET); // Set the new value
800092e0:	ef 18 ff f4 	ld.uh	r8,r7[-12]
800092e4:	b1 68       	lsl	r8,0x10
800092e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800092ea:	f3 e8 10 08 	or	r8,r9,r8
800092ee:	ef 48 ff fc 	st.w	r7[-4],r8

  mci->mr = mci_mode_register;
800092f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800092fa:	91 19       	st.w	r8[0x4],r9
}
800092fc:	2f dd       	sub	sp,-12
800092fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80009302 <mci_set_block_count>:

void mci_set_block_count(volatile avr32_mci_t *mci,
                         uint16_t cnt)
{
80009302:	eb cd 40 80 	pushm	r7,lr
80009306:	1a 97       	mov	r7,sp
80009308:	20 3d       	sub	sp,12
8000930a:	ef 4c ff f8 	st.w	r7[-8],r12
8000930e:	16 98       	mov	r8,r11
80009310:	ef 58 ff f4 	st.h	r7[-12],r8
    uint32_t          blkr;
    avr32_mci_blkr_t  BLKR;
  };
  union u_blkr val;

  val.blkr = mci->blkr;
80009314:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009318:	70 68       	ld.w	r8,r8[0x18]
8000931a:	ef 48 ff fc 	st.w	r7[-4],r8
  val.BLKR.bcnt = cnt;
8000931e:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80009322:	ef 58 ff fe 	st.h	r7[-2],r8
  mci->blkr = val.blkr;
80009326:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000932a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000932e:	91 69       	st.w	r8[0x18],r9
}
80009330:	2f dd       	sub	sp,-12
80009332:	e3 cd 80 80 	ldm	sp++,r7,pc
80009336:	d7 03       	nop

80009338 <mci_send_cmd>:

int mci_send_cmd(volatile avr32_mci_t *mci,
                 unsigned int cmd,
                 unsigned int arg)
{
80009338:	eb cd 40 80 	pushm	r7,lr
8000933c:	1a 97       	mov	r7,sp
8000933e:	20 7d       	sub	sp,28
80009340:	ef 4c ff ec 	st.w	r7[-20],r12
80009344:	ef 4b ff e8 	st.w	r7[-24],r11
80009348:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int	error;

  // Send the command
  mci->argr = arg;
8000934c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009350:	ee f9 ff e4 	ld.w	r9,r7[-28]
80009354:	91 49       	st.w	r8[0x10],r9
  mci->cmdr = cmd;
80009356:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000935a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000935e:	91 59       	st.w	r8[0x14],r9
80009360:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009364:	ef 48 ff f4 	st.w	r7[-12],r8
80009368:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000936c:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80009370:	4a 78       	lddpc	r8,8000940c <mci_send_cmd+0xd4>
80009372:	70 08       	ld.w	r8,r8[0x0]
80009374:	10 99       	mov	r9,r8
80009376:	e6 19 01 e0 	andh	r9,0x1e0,COH
8000937a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000937e:	71 08       	ld.w	r8,r8[0x40]
80009380:	f3 e8 10 08 	or	r8,r9,r8
80009384:	10 99       	mov	r9,r8
80009386:	4a 28       	lddpc	r8,8000940c <mci_send_cmd+0xd4>
80009388:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
8000938a:	4a 18       	lddpc	r8,8000940c <mci_send_cmd+0xd4>
8000938c:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_cmd_ready(volatile avr32_mci_t *mci)
{
  return ((mci_get_sr(mci)&AVR32_MCI_SR_CMDRDY_MASK) != 0);
8000938e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // wait for CMDRDY Status flag to read the response
  while( !(mci_cmd_ready(mci)) );
80009392:	ce 70       	breq	80009360 <mci_send_cmd+0x28>
80009394:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009398:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
8000939c:	49 c8       	lddpc	r8,8000940c <mci_send_cmd+0xd4>
8000939e:	70 08       	ld.w	r8,r8[0x0]
800093a0:	10 99       	mov	r9,r8
800093a2:	e6 19 01 e0 	andh	r9,0x1e0,COH
800093a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093aa:	71 08       	ld.w	r8,r8[0x40]
800093ac:	f3 e8 10 08 	or	r8,r9,r8
800093b0:	10 99       	mov	r9,r8
800093b2:	49 78       	lddpc	r8,8000940c <mci_send_cmd+0xd4>
800093b4:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800093b6:	49 68       	lddpc	r8,8000940c <mci_send_cmd+0xd4>
800093b8:	70 08       	ld.w	r8,r8[0x0]

  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
800093ba:	e6 18 c0 7f 	andh	r8,0xc07f,COH
800093be:	ef 48 ff f0 	st.w	r7[-16],r8
  if(error != 0 )
800093c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800093c6:	58 08       	cp.w	r8,0
800093c8:	c1 d0       	breq	80009402 <mci_send_cmd+0xca>
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
800093ca:	ee f8 ff e8 	ld.w	r8,r7[-24]
800093ce:	e0 48 00 69 	cp.w	r8,105
800093d2:	c0 f0       	breq	800093f0 <mci_send_cmd+0xb8>
800093d4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800093d8:	e0 48 08 41 	cp.w	r8,2113
800093dc:	c0 a0       	breq	800093f0 <mci_send_cmd+0xb8>
    {
      if( error != AVR32_MCI_SR_RTOE_MASK )
800093de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800093e2:	fc 19 00 10 	movh	r9,0x10
800093e6:	12 38       	cp.w	r8,r9
800093e8:	c0 c0       	breq	80009400 <mci_send_cmd+0xc8>
        // filter RTOE error which happens when using the HS mode
        return error;
800093ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800093ee:	c0 b8       	rjmp	80009404 <mci_send_cmd+0xcc>
    }
    else
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
800093f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800093f4:	e4 48 00 00 	cp.w	r8,262144
800093f8:	c0 50       	breq	80009402 <mci_send_cmd+0xca>
        return error;
800093fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800093fe:	c0 38       	rjmp	80009404 <mci_send_cmd+0xcc>
  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
  if(error != 0 )
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
80009400:	d7 03       	nop
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
        return error;
    }
  }
  return MCI_SUCCESS;
80009402:	30 08       	mov	r8,0

}
80009404:	10 9c       	mov	r12,r8
80009406:	2f 9d       	sub	sp,-28
80009408:	e3 cd 80 80 	ldm	sp++,r7,pc
8000940c:	00 00       	add	r0,r0
8000940e:	07 b0       	ld.ub	r0,r3[0x3]

80009410 <mci_set_bus_size>:

int mci_set_bus_size(volatile avr32_mci_t *mci,
                     uint8_t busWidth)
{
80009410:	eb cd 40 80 	pushm	r7,lr
80009414:	1a 97       	mov	r7,sp
80009416:	20 3d       	sub	sp,12
80009418:	ef 4c ff f8 	st.w	r7[-8],r12
8000941c:	16 98       	mov	r8,r11
8000941e:	ef 68 ff f4 	st.b	r7[-12],r8
  uint32_t mci_sdcr_register;

  if (busWidth > MCI_BUS_SIZE_8_BIT)
80009422:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009426:	30 38       	mov	r8,3
80009428:	f0 09 18 00 	cp.b	r9,r8
8000942c:	e0 88 00 04 	brls	80009434 <mci_set_bus_size+0x24>
    return MCI_INVALID_INPUT;
80009430:	30 18       	mov	r8,1
80009432:	c1 b8       	rjmp	80009468 <mci_set_bus_size+0x58>

  mci_sdcr_register = mci->sdcr;
80009434:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009438:	70 38       	ld.w	r8,r8[0xc]
8000943a:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register &= ~AVR32_MCI_SDCR_SDCBUS_MASK; // Clear previous buswidth
8000943e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009442:	e0 18 ff 3f 	andl	r8,0xff3f
80009446:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register |= (busWidth<<AVR32_MCI_SDCR_SDCBUS_OFFSET);
8000944a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000944e:	a7 68       	lsl	r8,0x6
80009450:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009454:	f3 e8 10 08 	or	r8,r9,r8
80009458:	ef 48 ff fc 	st.w	r7[-4],r8
  mci->sdcr = mci_sdcr_register;
8000945c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009460:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009464:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
80009466:	30 08       	mov	r8,0
}
80009468:	10 9c       	mov	r12,r8
8000946a:	2f dd       	sub	sp,-12
8000946c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009470 <mci_read_response>:


unsigned int mci_read_response(volatile avr32_mci_t *mci)
{
80009470:	eb cd 40 80 	pushm	r7,lr
80009474:	1a 97       	mov	r7,sp
80009476:	20 1d       	sub	sp,4
80009478:	ef 4c ff fc 	st.w	r7[-4],r12
  return mci->rspr0;
8000947c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009480:	70 88       	ld.w	r8,r8[0x20]
}
80009482:	10 9c       	mov	r12,r8
80009484:	2f fd       	sub	sp,-4
80009486:	e3 cd 80 80 	ldm	sp++,r7,pc
8000948a:	d7 03       	nop

8000948c <mci_wait_busy_signal>:

void mci_wait_busy_signal(volatile avr32_mci_t *mci)
{
8000948c:	eb cd 40 80 	pushm	r7,lr
80009490:	1a 97       	mov	r7,sp
80009492:	20 2d       	sub	sp,8
80009494:	ef 4c ff f8 	st.w	r7[-8],r12
80009498:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000949c:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800094a0:	48 b8       	lddpc	r8,800094cc <mci_wait_busy_signal+0x40>
800094a2:	70 08       	ld.w	r8,r8[0x0]
800094a4:	10 99       	mov	r9,r8
800094a6:	e6 19 01 e0 	andh	r9,0x1e0,COH
800094aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800094ae:	71 08       	ld.w	r8,r8[0x40]
800094b0:	f3 e8 10 08 	or	r8,r9,r8
800094b4:	10 99       	mov	r9,r8
800094b6:	48 68       	lddpc	r8,800094cc <mci_wait_busy_signal+0x40>
800094b8:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800094ba:	48 58       	lddpc	r8,800094cc <mci_wait_busy_signal+0x40>
800094bc:	70 08       	ld.w	r8,r8[0x0]
  while(!(mci_get_sr(mci)&AVR32_MCI_SR_NOTBUSY_MASK));
800094be:	e2 18 00 20 	andl	r8,0x20,COH
800094c2:	ce b0       	breq	80009498 <mci_wait_busy_signal+0xc>
}
800094c4:	2f ed       	sub	sp,-8
800094c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800094ca:	00 00       	add	r0,r0
800094cc:	00 00       	add	r0,r0
800094ce:	07 b0       	ld.ub	r0,r3[0x3]

800094d0 <mci_select_card>:

int mci_select_card(volatile avr32_mci_t *mci,
                    uint8_t card_slot,
                    uint8_t bus_width)
{
800094d0:	eb cd 40 80 	pushm	r7,lr
800094d4:	1a 97       	mov	r7,sp
800094d6:	20 3d       	sub	sp,12
800094d8:	ef 4c ff fc 	st.w	r7[-4],r12
800094dc:	16 99       	mov	r9,r11
800094de:	14 98       	mov	r8,r10
800094e0:	ef 69 ff f8 	st.b	r7[-8],r9
800094e4:	ef 68 ff f4 	st.b	r7[-12],r8
  if (card_slot > MCI_LAST_SLOTS)
800094e8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800094ec:	30 18       	mov	r8,1
800094ee:	f0 09 18 00 	cp.b	r9,r8
800094f2:	e0 88 00 04 	brls	800094fa <mci_select_card+0x2a>
    return MCI_INVALID_INPUT;
800094f6:	30 18       	mov	r8,1
800094f8:	c0 e8       	rjmp	80009514 <mci_select_card+0x44>

  // Select the card slot and bus width
  mci->sdcr = (bus_width<<AVR32_MCI_SDCR_SDCBUS_OFFSET) | (card_slot<<AVR32_MCI_SDCR_SDCSEL_OFFSET);
800094fa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800094fe:	f0 09 15 06 	lsl	r9,r8,0x6
80009502:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009506:	f3 e8 10 08 	or	r8,r9,r8
8000950a:	10 99       	mov	r9,r8
8000950c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009510:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
80009512:	30 08       	mov	r8,0
}
80009514:	10 9c       	mov	r12,r8
80009516:	2f dd       	sub	sp,-12
80009518:	e3 cd 80 80 	ldm	sp++,r7,pc

8000951c <cpu_irq_is_enabled_flags>:
8000951c:	eb cd 40 80 	pushm	r7,lr
80009520:	1a 97       	mov	r7,sp
80009522:	20 1d       	sub	sp,4
80009524:	ef 4c ff fc 	st.w	r7[-4],r12
80009528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000952c:	e6 18 00 01 	andh	r8,0x1,COH
80009530:	5f 08       	sreq	r8
80009532:	5c 58       	castu.b	r8
80009534:	10 9c       	mov	r12,r8
80009536:	2f fd       	sub	sp,-4
80009538:	e3 cd 80 80 	ldm	sp++,r7,pc

8000953c <tc_configure_interrupts>:
8000953c:	eb cd 40 80 	pushm	r7,lr
80009540:	1a 97       	mov	r7,sp
80009542:	20 4d       	sub	sp,16
80009544:	ef 4c ff f8 	st.w	r7[-8],r12
80009548:	ef 4b ff f4 	st.w	r7[-12],r11
8000954c:	ef 4a ff f0 	st.w	r7[-16],r10
80009550:	e1 b8 00 00 	mfsr	r8,0x0
80009554:	10 9c       	mov	r12,r8
80009556:	f0 1f 00 73 	mcall	80009720 <tc_configure_interrupts+0x1e4>
8000955a:	18 98       	mov	r8,r12
8000955c:	ef 68 ff ff 	st.b	r7[-1],r8
80009560:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009564:	58 28       	cp.w	r8,2
80009566:	e0 88 00 04 	brls	8000956e <tc_configure_interrupts+0x32>
8000956a:	3f f8       	mov	r8,-1
8000956c:	cd 68       	rjmp	80009718 <tc_configure_interrupts+0x1dc>
8000956e:	ee fb ff f4 	ld.w	r11,r7[-12]
80009572:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009576:	70 08       	ld.w	r8,r8[0x0]
80009578:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
8000957c:	5c 58       	castu.b	r8
8000957e:	f0 09 15 07 	lsl	r9,r8,0x7
80009582:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009586:	70 08       	ld.w	r8,r8[0x0]
80009588:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
8000958c:	5c 58       	castu.b	r8
8000958e:	a7 68       	lsl	r8,0x6
80009590:	10 49       	or	r9,r8
80009592:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009596:	70 08       	ld.w	r8,r8[0x0]
80009598:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
8000959c:	5c 58       	castu.b	r8
8000959e:	a5 78       	lsl	r8,0x5
800095a0:	10 49       	or	r9,r8
800095a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800095a6:	70 08       	ld.w	r8,r8[0x0]
800095a8:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
800095ac:	5c 58       	castu.b	r8
800095ae:	a5 68       	lsl	r8,0x4
800095b0:	10 49       	or	r9,r8
800095b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800095b6:	70 08       	ld.w	r8,r8[0x0]
800095b8:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800095bc:	5c 58       	castu.b	r8
800095be:	a3 78       	lsl	r8,0x3
800095c0:	10 49       	or	r9,r8
800095c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800095c6:	70 08       	ld.w	r8,r8[0x0]
800095c8:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800095cc:	5c 58       	castu.b	r8
800095ce:	a3 68       	lsl	r8,0x2
800095d0:	10 49       	or	r9,r8
800095d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800095d6:	70 08       	ld.w	r8,r8[0x0]
800095d8:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800095dc:	5c 58       	castu.b	r8
800095de:	a1 78       	lsl	r8,0x1
800095e0:	10 49       	or	r9,r8
800095e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800095e6:	70 08       	ld.w	r8,r8[0x0]
800095e8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800095ec:	5c 58       	castu.b	r8
800095ee:	f3 e8 10 08 	or	r8,r9,r8
800095f2:	10 99       	mov	r9,r8
800095f4:	ee fa ff f8 	ld.w	r10,r7[-8]
800095f8:	f6 08 15 06 	lsl	r8,r11,0x6
800095fc:	f4 08 00 08 	add	r8,r10,r8
80009600:	2d c8       	sub	r8,-36
80009602:	91 09       	st.w	r8[0x0],r9
80009604:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009608:	30 08       	mov	r8,0
8000960a:	f0 09 18 00 	cp.b	r9,r8
8000960e:	c0 20       	breq	80009612 <tc_configure_interrupts+0xd6>
80009610:	d3 03       	ssrf	0x10
80009612:	ee fb ff f4 	ld.w	r11,r7[-12]
80009616:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000961a:	70 08       	ld.w	r8,r8[0x0]
8000961c:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80009620:	5c 58       	castu.b	r8
80009622:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009626:	c0 41       	brne	8000962e <tc_configure_interrupts+0xf2>
80009628:	e0 69 00 80 	mov	r9,128
8000962c:	c0 28       	rjmp	80009630 <tc_configure_interrupts+0xf4>
8000962e:	30 09       	mov	r9,0
80009630:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009634:	70 08       	ld.w	r8,r8[0x0]
80009636:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
8000963a:	5c 58       	castu.b	r8
8000963c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009640:	c0 31       	brne	80009646 <tc_configure_interrupts+0x10a>
80009642:	34 08       	mov	r8,64
80009644:	c0 28       	rjmp	80009648 <tc_configure_interrupts+0x10c>
80009646:	30 08       	mov	r8,0
80009648:	10 49       	or	r9,r8
8000964a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000964e:	70 08       	ld.w	r8,r8[0x0]
80009650:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80009654:	5c 58       	castu.b	r8
80009656:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000965a:	c0 31       	brne	80009660 <tc_configure_interrupts+0x124>
8000965c:	32 08       	mov	r8,32
8000965e:	c0 28       	rjmp	80009662 <tc_configure_interrupts+0x126>
80009660:	30 08       	mov	r8,0
80009662:	10 49       	or	r9,r8
80009664:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009668:	70 08       	ld.w	r8,r8[0x0]
8000966a:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
8000966e:	5c 58       	castu.b	r8
80009670:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009674:	c0 31       	brne	8000967a <tc_configure_interrupts+0x13e>
80009676:	31 08       	mov	r8,16
80009678:	c0 28       	rjmp	8000967c <tc_configure_interrupts+0x140>
8000967a:	30 08       	mov	r8,0
8000967c:	10 49       	or	r9,r8
8000967e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009682:	70 08       	ld.w	r8,r8[0x0]
80009684:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80009688:	5c 58       	castu.b	r8
8000968a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000968e:	c0 31       	brne	80009694 <tc_configure_interrupts+0x158>
80009690:	30 88       	mov	r8,8
80009692:	c0 28       	rjmp	80009696 <tc_configure_interrupts+0x15a>
80009694:	30 08       	mov	r8,0
80009696:	10 49       	or	r9,r8
80009698:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000969c:	70 08       	ld.w	r8,r8[0x0]
8000969e:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800096a2:	5c 58       	castu.b	r8
800096a4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800096a8:	c0 31       	brne	800096ae <tc_configure_interrupts+0x172>
800096aa:	30 48       	mov	r8,4
800096ac:	c0 28       	rjmp	800096b0 <tc_configure_interrupts+0x174>
800096ae:	30 08       	mov	r8,0
800096b0:	10 49       	or	r9,r8
800096b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096b6:	70 08       	ld.w	r8,r8[0x0]
800096b8:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800096bc:	5c 58       	castu.b	r8
800096be:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800096c2:	c0 31       	brne	800096c8 <tc_configure_interrupts+0x18c>
800096c4:	30 28       	mov	r8,2
800096c6:	c0 28       	rjmp	800096ca <tc_configure_interrupts+0x18e>
800096c8:	30 08       	mov	r8,0
800096ca:	10 49       	or	r9,r8
800096cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096d0:	70 08       	ld.w	r8,r8[0x0]
800096d2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800096d6:	5c 58       	castu.b	r8
800096d8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800096dc:	5f 08       	sreq	r8
800096de:	f3 e8 10 08 	or	r8,r9,r8
800096e2:	10 99       	mov	r9,r8
800096e4:	ee fa ff f8 	ld.w	r10,r7[-8]
800096e8:	f6 08 15 06 	lsl	r8,r11,0x6
800096ec:	f4 08 00 08 	add	r8,r10,r8
800096f0:	2d 88       	sub	r8,-40
800096f2:	91 09       	st.w	r8[0x0],r9
800096f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800096f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800096fc:	a1 78       	lsl	r8,0x1
800096fe:	2f f8       	sub	r8,-1
80009700:	a5 78       	lsl	r8,0x5
80009702:	f2 08 00 08 	add	r8,r9,r8
80009706:	70 08       	ld.w	r8,r8[0x0]
80009708:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000970c:	30 08       	mov	r8,0
8000970e:	f0 09 18 00 	cp.b	r9,r8
80009712:	c0 20       	breq	80009716 <tc_configure_interrupts+0x1da>
80009714:	d5 03       	csrf	0x10
80009716:	30 08       	mov	r8,0
80009718:	10 9c       	mov	r12,r8
8000971a:	2f cd       	sub	sp,-16
8000971c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009720:	80 00       	ld.sh	r0,r0[0x0]
80009722:	95 1c       	st.w	r10[0x4],r12

80009724 <tc_init_waveform>:
80009724:	eb cd 40 80 	pushm	r7,lr
80009728:	1a 97       	mov	r7,sp
8000972a:	20 2d       	sub	sp,8
8000972c:	ef 4c ff fc 	st.w	r7[-4],r12
80009730:	ef 4b ff f8 	st.w	r7[-8],r11
80009734:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009738:	70 08       	ld.w	r8,r8[0x0]
8000973a:	58 28       	cp.w	r8,2
8000973c:	e0 88 00 04 	brls	80009744 <tc_init_waveform+0x20>
80009740:	3f f8       	mov	r8,-1
80009742:	c9 78       	rjmp	80009870 <tc_init_waveform+0x14c>
80009744:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009748:	70 09       	ld.w	r9,r8[0x0]
8000974a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000974e:	70 18       	ld.w	r8,r8[0x4]
80009750:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
80009754:	5c 58       	castu.b	r8
80009756:	f0 0a 15 1e 	lsl	r10,r8,0x1e
8000975a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000975e:	70 18       	ld.w	r8,r8[0x4]
80009760:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
80009764:	5c 58       	castu.b	r8
80009766:	bd 68       	lsl	r8,0x1c
80009768:	10 4a       	or	r10,r8
8000976a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000976e:	70 18       	ld.w	r8,r8[0x4]
80009770:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
80009774:	5c 58       	castu.b	r8
80009776:	bb 68       	lsl	r8,0x1a
80009778:	10 4a       	or	r10,r8
8000977a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000977e:	70 18       	ld.w	r8,r8[0x4]
80009780:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
80009784:	5c 58       	castu.b	r8
80009786:	b9 68       	lsl	r8,0x18
80009788:	10 4a       	or	r10,r8
8000978a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000978e:	70 18       	ld.w	r8,r8[0x4]
80009790:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
80009794:	5c 58       	castu.b	r8
80009796:	b7 68       	lsl	r8,0x16
80009798:	10 4a       	or	r10,r8
8000979a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000979e:	70 18       	ld.w	r8,r8[0x4]
800097a0:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
800097a4:	5c 58       	castu.b	r8
800097a6:	b5 68       	lsl	r8,0x14
800097a8:	10 4a       	or	r10,r8
800097aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097ae:	70 18       	ld.w	r8,r8[0x4]
800097b0:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
800097b4:	5c 58       	castu.b	r8
800097b6:	b3 68       	lsl	r8,0x12
800097b8:	10 4a       	or	r10,r8
800097ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097be:	70 18       	ld.w	r8,r8[0x4]
800097c0:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800097c4:	5c 58       	castu.b	r8
800097c6:	b1 68       	lsl	r8,0x10
800097c8:	f5 e8 10 08 	or	r8,r10,r8
800097cc:	10 9a       	mov	r10,r8
800097ce:	af ba       	sbr	r10,0xf
800097d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097d4:	70 18       	ld.w	r8,r8[0x4]
800097d6:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
800097da:	5c 58       	castu.b	r8
800097dc:	ad 78       	lsl	r8,0xd
800097de:	10 4a       	or	r10,r8
800097e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097e4:	70 18       	ld.w	r8,r8[0x4]
800097e6:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
800097ea:	5c 58       	castu.b	r8
800097ec:	ad 68       	lsl	r8,0xc
800097ee:	10 4a       	or	r10,r8
800097f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097f4:	70 18       	ld.w	r8,r8[0x4]
800097f6:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
800097fa:	5c 58       	castu.b	r8
800097fc:	ab 68       	lsl	r8,0xa
800097fe:	10 4a       	or	r10,r8
80009800:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009804:	70 18       	ld.w	r8,r8[0x4]
80009806:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
8000980a:	5c 58       	castu.b	r8
8000980c:	a9 68       	lsl	r8,0x8
8000980e:	10 4a       	or	r10,r8
80009810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009814:	70 18       	ld.w	r8,r8[0x4]
80009816:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
8000981a:	5c 58       	castu.b	r8
8000981c:	a7 78       	lsl	r8,0x7
8000981e:	10 4a       	or	r10,r8
80009820:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009824:	70 18       	ld.w	r8,r8[0x4]
80009826:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
8000982a:	5c 58       	castu.b	r8
8000982c:	a7 68       	lsl	r8,0x6
8000982e:	10 4a       	or	r10,r8
80009830:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009834:	70 18       	ld.w	r8,r8[0x4]
80009836:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
8000983a:	5c 58       	castu.b	r8
8000983c:	a5 68       	lsl	r8,0x4
8000983e:	10 4a       	or	r10,r8
80009840:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009844:	70 18       	ld.w	r8,r8[0x4]
80009846:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
8000984a:	5c 58       	castu.b	r8
8000984c:	a3 78       	lsl	r8,0x3
8000984e:	10 4a       	or	r10,r8
80009850:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009854:	70 18       	ld.w	r8,r8[0x4]
80009856:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000985a:	5c 58       	castu.b	r8
8000985c:	f5 e8 10 08 	or	r8,r10,r8
80009860:	10 9a       	mov	r10,r8
80009862:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009866:	a5 69       	lsl	r9,0x4
80009868:	2f f9       	sub	r9,-1
8000986a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000986e:	30 08       	mov	r8,0
80009870:	10 9c       	mov	r12,r8
80009872:	2f ed       	sub	sp,-8
80009874:	e3 cd 80 80 	ldm	sp++,r7,pc

80009878 <tc_start>:
80009878:	eb cd 40 80 	pushm	r7,lr
8000987c:	1a 97       	mov	r7,sp
8000987e:	20 2d       	sub	sp,8
80009880:	ef 4c ff fc 	st.w	r7[-4],r12
80009884:	ef 4b ff f8 	st.w	r7[-8],r11
80009888:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000988c:	58 28       	cp.w	r8,2
8000988e:	e0 88 00 04 	brls	80009896 <tc_start+0x1e>
80009892:	3f f8       	mov	r8,-1
80009894:	c0 b8       	rjmp	800098aa <tc_start+0x32>
80009896:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000989a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000989e:	a7 68       	lsl	r8,0x6
800098a0:	f2 08 00 08 	add	r8,r9,r8
800098a4:	30 59       	mov	r9,5
800098a6:	91 09       	st.w	r8[0x0],r9
800098a8:	30 08       	mov	r8,0
800098aa:	10 9c       	mov	r12,r8
800098ac:	2f ed       	sub	sp,-8
800098ae:	e3 cd 80 80 	ldm	sp++,r7,pc

800098b2 <tc_read_sr>:
800098b2:	eb cd 40 80 	pushm	r7,lr
800098b6:	1a 97       	mov	r7,sp
800098b8:	20 2d       	sub	sp,8
800098ba:	ef 4c ff fc 	st.w	r7[-4],r12
800098be:	ef 4b ff f8 	st.w	r7[-8],r11
800098c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098c6:	58 28       	cp.w	r8,2
800098c8:	e0 88 00 04 	brls	800098d0 <tc_read_sr+0x1e>
800098cc:	3f f8       	mov	r8,-1
800098ce:	c0 b8       	rjmp	800098e4 <tc_read_sr+0x32>
800098d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800098d8:	a1 78       	lsl	r8,0x1
800098da:	2f f8       	sub	r8,-1
800098dc:	a5 78       	lsl	r8,0x5
800098de:	f2 08 00 08 	add	r8,r9,r8
800098e2:	70 08       	ld.w	r8,r8[0x0]
800098e4:	10 9c       	mov	r12,r8
800098e6:	2f ed       	sub	sp,-8
800098e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800098ec <tc_write_rc>:
800098ec:	eb cd 40 80 	pushm	r7,lr
800098f0:	1a 97       	mov	r7,sp
800098f2:	20 3d       	sub	sp,12
800098f4:	ef 4c ff fc 	st.w	r7[-4],r12
800098f8:	ef 4b ff f8 	st.w	r7[-8],r11
800098fc:	14 98       	mov	r8,r10
800098fe:	ef 58 ff f4 	st.h	r7[-12],r8
80009902:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009906:	58 28       	cp.w	r8,2
80009908:	e0 88 00 04 	brls	80009910 <tc_write_rc+0x24>
8000990c:	3f f8       	mov	r8,-1
8000990e:	c2 78       	rjmp	8000995c <tc_write_rc+0x70>
80009910:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009914:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009918:	a5 69       	lsl	r9,0x4
8000991a:	2f f9       	sub	r9,-1
8000991c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80009920:	e2 18 80 00 	andl	r8,0x8000,COH
80009924:	c1 a0       	breq	80009958 <tc_write_rc+0x6c>
80009926:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000992a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000992e:	ee fa ff fc 	ld.w	r10,r7[-4]
80009932:	a7 69       	lsl	r9,0x6
80009934:	f4 09 00 09 	add	r9,r10,r9
80009938:	2e 49       	sub	r9,-28
8000993a:	72 09       	ld.w	r9,r9[0x0]
8000993c:	12 9a       	mov	r10,r9
8000993e:	e0 1a 00 00 	andl	r10,0x0
80009942:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80009946:	f5 e9 10 09 	or	r9,r10,r9
8000994a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000994e:	a7 68       	lsl	r8,0x6
80009950:	f4 08 00 08 	add	r8,r10,r8
80009954:	2e 48       	sub	r8,-28
80009956:	91 09       	st.w	r8[0x0],r9
80009958:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000995c:	10 9c       	mov	r12,r8
8000995e:	2f dd       	sub	sp,-12
80009960:	e3 cd 80 80 	ldm	sp++,r7,pc

80009964 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80009964:	eb cd 40 80 	pushm	r7,lr
80009968:	1a 97       	mov	r7,sp
8000996a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000996c:	e1 b8 00 00 	mfsr	r8,0x0
80009970:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80009974:	d3 03       	ssrf	0x10

	return flags;
80009976:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000997a:	10 9c       	mov	r12,r8
8000997c:	2f fd       	sub	sp,-4
8000997e:	e3 cd 80 80 	ldm	sp++,r7,pc

80009982 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
80009982:	eb cd 40 80 	pushm	r7,lr
80009986:	1a 97       	mov	r7,sp
80009988:	20 1d       	sub	sp,4
8000998a:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000998e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009992:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80009996:	2f fd       	sub	sp,-4
80009998:	e3 cd 80 80 	ldm	sp++,r7,pc

8000999c <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
8000999c:	eb cd 40 80 	pushm	r7,lr
800099a0:	1a 97       	mov	r7,sp
800099a2:	20 2d       	sub	sp,8
800099a4:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
800099a8:	f0 1f 00 0b 	mcall	800099d4 <sleepmgr_lock_mode+0x38>
800099ac:	18 98       	mov	r8,r12
800099ae:	ef 48 ff fc 	st.w	r7[-4],r8

	++sleepmgr_locks[mode];
800099b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800099b6:	48 99       	lddpc	r9,800099d8 <sleepmgr_lock_mode+0x3c>
800099b8:	f2 08 07 09 	ld.ub	r9,r9[r8]
800099bc:	2f f9       	sub	r9,-1
800099be:	5c 59       	castu.b	r9
800099c0:	48 6a       	lddpc	r10,800099d8 <sleepmgr_lock_mode+0x3c>
800099c2:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
800099c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800099ca:	f0 1f 00 05 	mcall	800099dc <sleepmgr_lock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
800099ce:	2f ed       	sub	sp,-8
800099d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800099d4:	80 00       	ld.sh	r0,r0[0x0]
800099d6:	99 64       	st.w	r12[0x18],r4
800099d8:	00 00       	add	r0,r0
800099da:	0d fc       	ld.ub	r12,r6[0x7]
800099dc:	80 00       	ld.sh	r0,r0[0x0]
800099de:	99 82       	st.w	r12[0x20],r2

800099e0 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
800099e0:	eb cd 40 80 	pushm	r7,lr
800099e4:	1a 97       	mov	r7,sp
800099e6:	20 2d       	sub	sp,8
800099e8:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();
800099ec:	f0 1f 00 0b 	mcall	80009a18 <sleepmgr_unlock_mode+0x38>
800099f0:	18 98       	mov	r8,r12
800099f2:	ef 48 ff fc 	st.w	r7[-4],r8

	--sleepmgr_locks[mode];
800099f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800099fa:	48 99       	lddpc	r9,80009a1c <sleepmgr_unlock_mode+0x3c>
800099fc:	f2 08 07 09 	ld.ub	r9,r9[r8]
80009a00:	20 19       	sub	r9,1
80009a02:	5c 59       	castu.b	r9
80009a04:	48 6a       	lddpc	r10,80009a1c <sleepmgr_unlock_mode+0x3c>
80009a06:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
80009a0a:	ee fc ff fc 	ld.w	r12,r7[-4]
80009a0e:	f0 1f 00 05 	mcall	80009a20 <sleepmgr_unlock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
80009a12:	2f ed       	sub	sp,-8
80009a14:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a18:	80 00       	ld.sh	r0,r0[0x0]
80009a1a:	99 64       	st.w	r12[0x18],r4
80009a1c:	00 00       	add	r0,r0
80009a1e:	0d fc       	ld.ub	r12,r6[0x7]
80009a20:	80 00       	ld.sh	r0,r0[0x0]
80009a22:	99 82       	st.w	r12[0x20],r2

80009a24 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
80009a24:	eb cd 40 80 	pushm	r7,lr
80009a28:	1a 97       	mov	r7,sp
80009a2a:	20 1d       	sub	sp,4
80009a2c:	18 98       	mov	r8,r12
80009a2e:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!b_idle && udd_b_idle) {
80009a32:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009a36:	ec 18 00 01 	eorl	r8,0x1
80009a3a:	5c 58       	castu.b	r8
80009a3c:	c0 80       	breq	80009a4c <udd_sleep_mode+0x28>
80009a3e:	48 f8       	lddpc	r8,80009a78 <udd_sleep_mode+0x54>
80009a40:	11 88       	ld.ub	r8,r8[0x0]
80009a42:	58 08       	cp.w	r8,0
80009a44:	c0 40       	breq	80009a4c <udd_sleep_mode+0x28>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
80009a46:	30 1c       	mov	r12,1
80009a48:	f0 1f 00 0d 	mcall	80009a7c <udd_sleep_mode+0x58>
	}
	if (b_idle && !udd_b_idle) {
80009a4c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009a50:	30 08       	mov	r8,0
80009a52:	f0 09 18 00 	cp.b	r9,r8
80009a56:	c0 a0       	breq	80009a6a <udd_sleep_mode+0x46>
80009a58:	48 88       	lddpc	r8,80009a78 <udd_sleep_mode+0x54>
80009a5a:	11 88       	ld.ub	r8,r8[0x0]
80009a5c:	ec 18 00 01 	eorl	r8,0x1
80009a60:	5c 58       	castu.b	r8
80009a62:	c0 40       	breq	80009a6a <udd_sleep_mode+0x46>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
80009a64:	30 1c       	mov	r12,1
80009a66:	f0 1f 00 07 	mcall	80009a80 <udd_sleep_mode+0x5c>
	}
	udd_b_idle = b_idle;
80009a6a:	48 49       	lddpc	r9,80009a78 <udd_sleep_mode+0x54>
80009a6c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009a70:	b2 88       	st.b	r9[0x0],r8
}
80009a72:	2f fd       	sub	sp,-4
80009a74:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a78:	00 00       	add	r0,r0
80009a7a:	07 b4       	ld.ub	r4,r3[0x3]
80009a7c:	80 00       	ld.sh	r0,r0[0x0]
80009a7e:	99 e0       	st.w	r12[0x38],r0
80009a80:	80 00       	ld.sh	r0,r0[0x0]
80009a82:	99 9c       	st.w	r12[0x24],r12

80009a84 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
80009a84:	eb cd 40 80 	pushm	r7,lr
80009a88:	1a 97       	mov	r7,sp
	if (Is_udd_sof()) {
80009a8a:	fe 68 00 04 	mov	r8,-131068
80009a8e:	70 08       	ld.w	r8,r8[0x0]
80009a90:	e2 18 00 04 	andl	r8,0x4,COH
80009a94:	c1 10       	breq	80009ab6 <udd_interrupt+0x32>
		udd_ack_sof();
80009a96:	fe 68 00 08 	mov	r8,-131064
80009a9a:	30 49       	mov	r9,4
80009a9c:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
80009a9e:	fe 68 08 04 	mov	r8,-129020
80009aa2:	70 08       	ld.w	r8,r8[0x0]
80009aa4:	e2 18 30 00 	andl	r8,0x3000,COH
80009aa8:	ad 88       	lsr	r8,0xc
80009aaa:	c0 31       	brne	80009ab0 <udd_interrupt+0x2c>
			udc_sof_notify();
80009aac:	f0 1f 00 54 	mcall	80009bfc <udd_interrupt+0x178>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
80009ab0:	f0 1f 00 54 	mcall	80009c00 <udd_interrupt+0x17c>
#endif
		goto udd_interrupt_end;
80009ab4:	c9 d8       	rjmp	80009bee <udd_interrupt+0x16a>
	}
	if (Is_udd_msof()) {
80009ab6:	fe 68 00 04 	mov	r8,-131068
80009aba:	70 08       	ld.w	r8,r8[0x0]
80009abc:	e2 18 00 02 	andl	r8,0x2,COH
80009ac0:	c0 80       	breq	80009ad0 <udd_interrupt+0x4c>
		udd_ack_msof();
80009ac2:	fe 68 00 08 	mov	r8,-131064
80009ac6:	30 29       	mov	r9,2
80009ac8:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80009aca:	f0 1f 00 4d 	mcall	80009bfc <udd_interrupt+0x178>
		goto udd_interrupt_end;
80009ace:	c9 08       	rjmp	80009bee <udd_interrupt+0x16a>
	}

	if (udd_ctrl_interrupt())
80009ad0:	f0 1f 00 4d 	mcall	80009c04 <udd_interrupt+0x180>
80009ad4:	18 98       	mov	r8,r12
80009ad6:	58 08       	cp.w	r8,0
80009ad8:	e0 81 00 88 	brne	80009be8 <udd_interrupt+0x164>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
80009adc:	f0 1f 00 4b 	mcall	80009c08 <udd_interrupt+0x184>
80009ae0:	18 98       	mov	r8,r12
80009ae2:	58 08       	cp.w	r8,0
80009ae4:	e0 81 00 84 	brne	80009bec <udd_interrupt+0x168>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80009ae8:	fe 68 00 04 	mov	r8,-131068
80009aec:	70 08       	ld.w	r8,r8[0x0]
80009aee:	e2 18 00 08 	andl	r8,0x8,COH
80009af2:	c0 e0       	breq	80009b0e <udd_interrupt+0x8a>
		udd_ack_reset();
80009af4:	fe 68 00 08 	mov	r8,-131064
80009af8:	30 89       	mov	r9,8
80009afa:	91 09       	st.w	r8[0x0],r9
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
80009afc:	f0 1f 00 44 	mcall	80009c0c <udd_interrupt+0x188>
#endif
		// Reset USB Device Stack Core
		udc_reset();
80009b00:	f0 1f 00 44 	mcall	80009c10 <udd_interrupt+0x18c>
		// Reset endpoint control
		udd_reset_ep_ctrl();
80009b04:	f0 1f 00 44 	mcall	80009c14 <udd_interrupt+0x190>
		// Reset endpoint control management
		udd_ctrl_init();
80009b08:	f0 1f 00 44 	mcall	80009c18 <udd_interrupt+0x194>
		goto udd_interrupt_end;
80009b0c:	c7 18       	rjmp	80009bee <udd_interrupt+0x16a>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80009b0e:	fe 68 00 10 	mov	r8,-131056
80009b12:	70 08       	ld.w	r8,r8[0x0]
80009b14:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009b18:	5c 58       	castu.b	r8
80009b1a:	c2 40       	breq	80009b62 <udd_interrupt+0xde>
80009b1c:	fe 68 00 04 	mov	r8,-131068
80009b20:	70 08       	ld.w	r8,r8[0x0]
80009b22:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009b26:	5c 58       	castu.b	r8
80009b28:	c1 d0       	breq	80009b62 <udd_interrupt+0xde>
		otg_unfreeze_clock();
80009b2a:	fe 68 08 00 	mov	r8,-129024
80009b2e:	fe 69 08 00 	mov	r9,-129024
80009b32:	72 09       	ld.w	r9,r9[0x0]
80009b34:	af c9       	cbr	r9,0xe
80009b36:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80009b38:	fe 68 00 14 	mov	r8,-131052
80009b3c:	30 19       	mov	r9,1
80009b3e:	91 09       	st.w	r8[0x0],r9
		udd_enable_wake_up_interrupt();
80009b40:	fe 68 00 18 	mov	r8,-131048
80009b44:	31 09       	mov	r9,16
80009b46:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
80009b48:	fe 68 08 00 	mov	r8,-129024
80009b4c:	fe 69 08 00 	mov	r9,-129024
80009b50:	72 09       	ld.w	r9,r9[0x0]
80009b52:	af a9       	sbr	r9,0xe
80009b54:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80009b56:	30 0c       	mov	r12,0
80009b58:	f0 1f 00 31 	mcall	80009c1c <udd_interrupt+0x198>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
80009b5c:	f0 1f 00 31 	mcall	80009c20 <udd_interrupt+0x19c>
#endif
		goto udd_interrupt_end;
80009b60:	c4 78       	rjmp	80009bee <udd_interrupt+0x16a>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80009b62:	fe 68 00 10 	mov	r8,-131056
80009b66:	70 08       	ld.w	r8,r8[0x0]
80009b68:	e2 18 00 10 	andl	r8,0x10,COH
80009b6c:	c1 c0       	breq	80009ba4 <udd_interrupt+0x120>
80009b6e:	fe 68 00 04 	mov	r8,-131068
80009b72:	70 08       	ld.w	r8,r8[0x0]
80009b74:	e2 18 00 10 	andl	r8,0x10,COH
80009b78:	c1 60       	breq	80009ba4 <udd_interrupt+0x120>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80009b7a:	fe 68 08 00 	mov	r8,-129024
80009b7e:	fe 69 08 00 	mov	r9,-129024
80009b82:	72 09       	ld.w	r9,r9[0x0]
80009b84:	af c9       	cbr	r9,0xe
80009b86:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80009b88:	fe 68 00 14 	mov	r8,-131052
80009b8c:	31 09       	mov	r9,16
80009b8e:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
80009b90:	fe 68 00 18 	mov	r8,-131048
80009b94:	30 19       	mov	r9,1
80009b96:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(true); // Enter in IDLE mode
80009b98:	30 1c       	mov	r12,1
80009b9a:	f0 1f 00 21 	mcall	80009c1c <udd_interrupt+0x198>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
80009b9e:	f0 1f 00 22 	mcall	80009c24 <udd_interrupt+0x1a0>
#endif
		goto udd_interrupt_end;
80009ba2:	c2 68       	rjmp	80009bee <udd_interrupt+0x16a>
	}

	if (Is_otg_vbus_transition()) {
80009ba4:	fe 68 08 04 	mov	r8,-129020
80009ba8:	70 08       	ld.w	r8,r8[0x0]
80009baa:	e2 18 00 02 	andl	r8,0x2,COH
80009bae:	c2 00       	breq	80009bee <udd_interrupt+0x16a>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
80009bb0:	fe 68 08 00 	mov	r8,-129024
80009bb4:	fe 69 08 00 	mov	r9,-129024
80009bb8:	72 09       	ld.w	r9,r9[0x0]
80009bba:	af c9       	cbr	r9,0xe
80009bbc:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80009bbe:	fe 68 08 08 	mov	r8,-129016
80009bc2:	30 29       	mov	r9,2
80009bc4:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock();
80009bc6:	fe 68 08 00 	mov	r8,-129024
80009bca:	fe 69 08 00 	mov	r9,-129024
80009bce:	72 09       	ld.w	r9,r9[0x0]
80009bd0:	af a9       	sbr	r9,0xe
80009bd2:	91 09       	st.w	r8[0x0],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
80009bd4:	fe 68 08 04 	mov	r8,-129020
80009bd8:	70 08       	ld.w	r8,r8[0x0]
80009bda:	e2 18 08 00 	andl	r8,0x800,COH
80009bde:	5f 18       	srne	r8
80009be0:	10 9c       	mov	r12,r8
80009be2:	f0 1f 00 12 	mcall	80009c28 <udd_interrupt+0x1a4>
80009be6:	c0 48       	rjmp	80009bee <udd_interrupt+0x16a>
		udc_sof_notify();
		goto udd_interrupt_end;
	}

	if (udd_ctrl_interrupt())
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
80009be8:	d7 03       	nop
80009bea:	c0 28       	rjmp	80009bee <udd_interrupt+0x16a>

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
80009bec:	d7 03       	nop
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80009bee:	fe 68 00 00 	mov	r8,-131072
80009bf2:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80009bf6:	e3 cd 40 80 	ldm	sp++,r7,lr
80009bfa:	d6 03       	rete
80009bfc:	80 00       	ld.sh	r0,r0[0x0]
80009bfe:	d4 a0       	acall	0x128
80009c00:	80 00       	ld.sh	r0,r0[0x0]
80009c02:	e2 c8 80 00 	sub	r8,r1,-32768
80009c06:	b1 78       	lsl	r8,0x11
80009c08:	80 00       	ld.sh	r0,r0[0x0]
80009c0a:	b6 2c       	st.h	r11[0x4],r12
80009c0c:	80 00       	ld.sh	r0,r0[0x0]
80009c0e:	b2 ac       	st.b	r9[0x2],r12
80009c10:	80 00       	ld.sh	r0,r0[0x0]
80009c12:	d4 3c       	*unknown*
80009c14:	80 00       	ld.sh	r0,r0[0x0]
80009c16:	a9 f8       	*unknown*
80009c18:	80 00       	ld.sh	r0,r0[0x0]
80009c1a:	aa dc       	st.b	r5[0x5],r12
80009c1c:	80 00       	ld.sh	r0,r0[0x0]
80009c1e:	9a 24       	ld.sh	r4,sp[0x4]
80009c20:	80 00       	ld.sh	r0,r0[0x0]
80009c22:	e2 a0 80 00 	rcall	80059c22 <Stored_values_flash+0x19e22>
80009c26:	e2 b4       	*unknown*
80009c28:	80 00       	ld.sh	r0,r0[0x0]
80009c2a:	e2 6c eb cd 	mov	r12,191437

80009c2c <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
80009c2c:	eb cd 40 80 	pushm	r7,lr
80009c30:	1a 97       	mov	r7,sp
	return true;
80009c32:	30 18       	mov	r8,1
}
80009c34:	10 9c       	mov	r12,r8
80009c36:	e3 cd 80 80 	ldm	sp++,r7,pc
80009c3a:	d7 03       	nop

80009c3c <udd_enable>:


void udd_enable(void)
{
80009c3c:	eb cd 40 80 	pushm	r7,lr
80009c40:	1a 97       	mov	r7,sp
80009c42:	20 2d       	sub	sp,8
	irqflags_t flags;

	flags = cpu_irq_save();
80009c44:	f0 1f 00 3e 	mcall	80009d3c <udd_enable+0x100>
80009c48:	18 98       	mov	r8,r12
80009c4a:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
80009c4e:	f0 1f 00 3d 	mcall	80009d40 <udd_enable+0x104>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
80009c52:	30 0a       	mov	r10,0
80009c54:	e0 6b 02 20 	mov	r11,544
80009c58:	4b bc       	lddpc	r12,80009d44 <udd_enable+0x108>
80009c5a:	f0 1f 00 3c 	mcall	80009d48 <udd_enable+0x10c>
80009c5e:	30 18       	mov	r8,1
80009c60:	ef 48 ff fc 	st.w	r7[-4],r8
#if defined (__GNUC__)
__attribute__((__always_inline__))
#endif
static inline void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80009c64:	fe 78 0c 00 	mov	r8,-62464
80009c68:	fe 79 0c 00 	mov	r9,-62464
80009c6c:	f2 fa 01 44 	ld.w	r10,r9[324]
80009c70:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009c74:	f5 e9 10 09 	or	r9,r10,r9
80009c78:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
80009c7c:	fe 68 08 00 	mov	r8,-129024
80009c80:	fe 69 08 00 	mov	r9,-129024
80009c84:	72 09       	ld.w	r9,r9[0x0]
80009c86:	b9 c9       	cbr	r9,0x18
80009c88:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
80009c8a:	fe 68 08 00 	mov	r8,-129024
80009c8e:	fe 69 08 00 	mov	r9,-129024
80009c92:	72 09       	ld.w	r9,r9[0x0]
80009c94:	b9 b9       	sbr	r9,0x19
80009c96:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80009c98:	fe 68 08 00 	mov	r8,-129024
80009c9c:	fe 69 08 00 	mov	r9,-129024
80009ca0:	72 09       	ld.w	r9,r9[0x0]
80009ca2:	ad a9       	sbr	r9,0xc
80009ca4:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80009ca6:	fe 68 08 00 	mov	r8,-129024
80009caa:	fe 69 08 00 	mov	r9,-129024
80009cae:	72 09       	ld.w	r9,r9[0x0]
80009cb0:	af b9       	sbr	r9,0xf
80009cb2:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80009cb4:	fe 68 08 00 	mov	r8,-129024
80009cb8:	fe 69 08 00 	mov	r9,-129024
80009cbc:	72 09       	ld.w	r9,r9[0x0]
80009cbe:	af c9       	cbr	r9,0xe
80009cc0:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
80009cc2:	fe 68 08 00 	mov	r8,-129024
80009cc6:	70 08       	ld.w	r8,r8[0x0]

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
80009cc8:	f0 1f 00 21 	mcall	80009d4c <udd_enable+0x110>

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80009ccc:	fe 68 00 00 	mov	r8,-131072
80009cd0:	fe 69 00 00 	mov	r9,-131072
80009cd4:	72 09       	ld.w	r9,r9[0x0]
80009cd6:	ad c9       	cbr	r9,0xc
80009cd8:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
80009cda:	fe 68 00 00 	mov	r8,-131072
80009cde:	fe 69 00 00 	mov	r9,-131072
80009ce2:	72 09       	ld.w	r9,r9[0x0]
80009ce4:	e0 19 f3 ff 	andl	r9,0xf3ff
80009ce8:	91 09       	st.w	r8[0x0],r9
#  else
	udd_high_speed_disable();
#  endif
#endif
	otg_ack_vbus_transition();
80009cea:	fe 68 08 08 	mov	r8,-129016
80009cee:	30 29       	mov	r9,2
80009cf0:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80009cf2:	fe 68 08 04 	mov	r8,-129020
80009cf6:	70 08       	ld.w	r8,r8[0x0]
80009cf8:	e2 18 08 00 	andl	r8,0x800,COH
80009cfc:	c0 50       	breq	80009d06 <udd_enable+0xca>
		otg_raise_vbus_transition();
80009cfe:	fe 68 08 0c 	mov	r8,-129012
80009d02:	30 29       	mov	r9,2
80009d04:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80009d06:	fe 68 08 00 	mov	r8,-129024
80009d0a:	fe 69 08 00 	mov	r9,-129024
80009d0e:	72 09       	ld.w	r9,r9[0x0]
80009d10:	a1 b9       	sbr	r9,0x1
80009d12:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80009d14:	fe 68 08 00 	mov	r8,-129024
80009d18:	fe 69 08 00 	mov	r9,-129024
80009d1c:	72 09       	ld.w	r9,r9[0x0]
80009d1e:	af a9       	sbr	r9,0xe
80009d20:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80009d22:	48 c9       	lddpc	r9,80009d50 <udd_enable+0x114>
80009d24:	30 08       	mov	r8,0
80009d26:	b2 88       	st.b	r9[0x0],r8
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
80009d28:	30 3c       	mov	r12,3
80009d2a:	f0 1f 00 0b 	mcall	80009d54 <udd_enable+0x118>
#endif

	cpu_irq_restore(flags);
80009d2e:	ee fc ff f8 	ld.w	r12,r7[-8]
80009d32:	f0 1f 00 0a 	mcall	80009d58 <udd_enable+0x11c>
}
80009d36:	2f ed       	sub	sp,-8
80009d38:	e3 cd 80 80 	ldm	sp++,r7,pc
80009d3c:	80 00       	ld.sh	r0,r0[0x0]
80009d3e:	99 64       	st.w	r12[0x18],r4
80009d40:	80 00       	ld.sh	r0,r0[0x0]
80009d42:	bf fc       	*unknown*
80009d44:	80 00       	ld.sh	r0,r0[0x0]
80009d46:	9a 84       	ld.uh	r4,sp[0x0]
80009d48:	80 00       	ld.sh	r0,r0[0x0]
80009d4a:	8f fc       	st.w	r7[0x3c],r12
80009d4c:	80 00       	ld.sh	r0,r0[0x0]
80009d4e:	b2 40       	st.h	r9[0x8],r0
80009d50:	00 00       	add	r0,r0
80009d52:	07 b4       	ld.ub	r4,r3[0x3]
80009d54:	80 00       	ld.sh	r0,r0[0x0]
80009d56:	99 9c       	st.w	r12[0x24],r12
80009d58:	80 00       	ld.sh	r0,r0[0x0]
80009d5a:	99 82       	st.w	r12[0x20],r2

80009d5c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80009d5c:	eb cd 40 80 	pushm	r7,lr
80009d60:	1a 97       	mov	r7,sp
80009d62:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
80009d64:	f0 1f 00 26 	mcall	80009dfc <udd_attach+0xa0>
80009d68:	18 98       	mov	r8,r12
80009d6a:	ef 48 ff fc 	st.w	r7[-4],r8

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80009d6e:	30 1c       	mov	r12,1
80009d70:	f0 1f 00 24 	mcall	80009e00 <udd_attach+0xa4>
	otg_unfreeze_clock();
80009d74:	fe 68 08 00 	mov	r8,-129024
80009d78:	fe 69 08 00 	mov	r9,-129024
80009d7c:	72 09       	ld.w	r9,r9[0x0]
80009d7e:	af c9       	cbr	r9,0xe
80009d80:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );

	// Authorize attach if Vbus is present
	udd_attach_device();
80009d82:	fe 68 00 00 	mov	r8,-131072
80009d86:	fe 69 00 00 	mov	r9,-131072
80009d8a:	72 09       	ld.w	r9,r9[0x0]
80009d8c:	a9 c9       	cbr	r9,0x8
80009d8e:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
80009d90:	fe 68 00 18 	mov	r8,-131048
80009d94:	30 89       	mov	r9,8
80009d96:	91 09       	st.w	r8[0x0],r9
	udd_enable_suspend_interrupt();
80009d98:	fe 68 00 18 	mov	r8,-131048
80009d9c:	30 19       	mov	r9,1
80009d9e:	91 09       	st.w	r8[0x0],r9
	udd_enable_wake_up_interrupt();
80009da0:	fe 68 00 18 	mov	r8,-131048
80009da4:	31 09       	mov	r9,16
80009da6:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80009da8:	fe 68 00 18 	mov	r8,-131048
80009dac:	30 49       	mov	r9,4
80009dae:	91 09       	st.w	r8[0x0],r9
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
80009db0:	fe 68 00 18 	mov	r8,-131048
80009db4:	30 29       	mov	r9,2
80009db6:	91 09       	st.w	r8[0x0],r9
#endif
	// Reset following interrupts flag
	udd_ack_reset();
80009db8:	fe 68 00 08 	mov	r8,-131064
80009dbc:	30 89       	mov	r9,8
80009dbe:	91 09       	st.w	r8[0x0],r9
	udd_ack_sof();
80009dc0:	fe 68 00 08 	mov	r8,-131064
80009dc4:	30 49       	mov	r9,4
80009dc6:	91 09       	st.w	r8[0x0],r9
	udd_ack_msof();
80009dc8:	fe 68 00 08 	mov	r8,-131064
80009dcc:	30 29       	mov	r9,2
80009dce:	91 09       	st.w	r8[0x0],r9

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80009dd0:	fe 68 00 08 	mov	r8,-131064
80009dd4:	30 19       	mov	r9,1
80009dd6:	91 09       	st.w	r8[0x0],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80009dd8:	fe 68 00 08 	mov	r8,-131064
80009ddc:	31 09       	mov	r9,16
80009dde:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80009de0:	fe 68 08 00 	mov	r8,-129024
80009de4:	fe 69 08 00 	mov	r9,-129024
80009de8:	72 09       	ld.w	r9,r9[0x0]
80009dea:	af a9       	sbr	r9,0xe
80009dec:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009dee:	ee fc ff fc 	ld.w	r12,r7[-4]
80009df2:	f0 1f 00 05 	mcall	80009e04 <udd_attach+0xa8>
}
80009df6:	2f fd       	sub	sp,-4
80009df8:	e3 cd 80 80 	ldm	sp++,r7,pc
80009dfc:	80 00       	ld.sh	r0,r0[0x0]
80009dfe:	99 64       	st.w	r12[0x18],r4
80009e00:	80 00       	ld.sh	r0,r0[0x0]
80009e02:	9a 24       	ld.sh	r4,sp[0x4]
80009e04:	80 00       	ld.sh	r0,r0[0x0]
80009e06:	99 82       	st.w	r12[0x20],r2

80009e08 <udd_detach>:


void udd_detach(void)
{
80009e08:	eb cd 40 80 	pushm	r7,lr
80009e0c:	1a 97       	mov	r7,sp
	otg_unfreeze_clock();
80009e0e:	fe 68 08 00 	mov	r8,-129024
80009e12:	fe 69 08 00 	mov	r9,-129024
80009e16:	72 09       	ld.w	r9,r9[0x0]
80009e18:	af c9       	cbr	r9,0xe
80009e1a:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
80009e1c:	fe 68 00 00 	mov	r8,-131072
80009e20:	fe 69 00 00 	mov	r9,-131072
80009e24:	72 09       	ld.w	r9,r9[0x0]
80009e26:	a9 a9       	sbr	r9,0x8
80009e28:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80009e2a:	fe 68 08 00 	mov	r8,-129024
80009e2e:	fe 69 08 00 	mov	r9,-129024
80009e32:	72 09       	ld.w	r9,r9[0x0]
80009e34:	af a9       	sbr	r9,0xe
80009e36:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80009e38:	30 0c       	mov	r12,0
80009e3a:	f0 1f 00 03 	mcall	80009e44 <udd_detach+0x3c>
}
80009e3e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009e42:	00 00       	add	r0,r0
80009e44:	80 00       	ld.sh	r0,r0[0x0]
80009e46:	9a 24       	ld.sh	r4,sp[0x4]

80009e48 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
80009e48:	eb cd 40 80 	pushm	r7,lr
80009e4c:	1a 97       	mov	r7,sp
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
80009e4e:	fe 68 08 04 	mov	r8,-129020
80009e52:	70 08       	ld.w	r8,r8[0x0]
80009e54:	e2 18 30 00 	andl	r8,0x3000,COH
80009e58:	ad 88       	lsr	r8,0xc
80009e5a:	5f 18       	srne	r8
80009e5c:	5c 58       	castu.b	r8
#else
	return false;
#endif
}
80009e5e:	10 9c       	mov	r12,r8
80009e60:	e3 cd 80 80 	ldm	sp++,r7,pc

80009e64 <udd_set_address>:


void udd_set_address(uint8_t address)
{
80009e64:	eb cd 40 80 	pushm	r7,lr
80009e68:	1a 97       	mov	r7,sp
80009e6a:	20 1d       	sub	sp,4
80009e6c:	18 98       	mov	r8,r12
80009e6e:	ef 68 ff fc 	st.b	r7[-4],r8
	udd_disable_address();
80009e72:	fe 68 00 00 	mov	r8,-131072
80009e76:	fe 69 00 00 	mov	r9,-131072
80009e7a:	72 09       	ld.w	r9,r9[0x0]
80009e7c:	a7 d9       	cbr	r9,0x7
80009e7e:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80009e80:	fe 68 00 00 	mov	r8,-131072
80009e84:	fe 69 00 00 	mov	r9,-131072
80009e88:	72 09       	ld.w	r9,r9[0x0]
80009e8a:	12 9a       	mov	r10,r9
80009e8c:	e0 1a ff 80 	andl	r10,0xff80
80009e90:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009e94:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
80009e98:	f5 e9 10 09 	or	r9,r10,r9
80009e9c:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80009e9e:	fe 68 00 00 	mov	r8,-131072
80009ea2:	fe 69 00 00 	mov	r9,-131072
80009ea6:	72 09       	ld.w	r9,r9[0x0]
80009ea8:	a7 b9       	sbr	r9,0x7
80009eaa:	91 09       	st.w	r8[0x0],r9
}
80009eac:	2f fd       	sub	sp,-4
80009eae:	e3 cd 80 80 	ldm	sp++,r7,pc

80009eb2 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
80009eb2:	eb cd 40 80 	pushm	r7,lr
80009eb6:	1a 97       	mov	r7,sp
	return udd_get_configured_address();
80009eb8:	fe 68 00 00 	mov	r8,-131072
80009ebc:	70 08       	ld.w	r8,r8[0x0]
80009ebe:	5c 58       	castu.b	r8
80009ec0:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
}
80009ec4:	10 9c       	mov	r12,r8
80009ec6:	e3 cd 80 80 	ldm	sp++,r7,pc

80009eca <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
80009eca:	eb cd 40 80 	pushm	r7,lr
80009ece:	1a 97       	mov	r7,sp
	return udd_frame_number();
80009ed0:	fe 68 00 20 	mov	r8,-131040
80009ed4:	70 08       	ld.w	r8,r8[0x0]
80009ed6:	e2 18 3f f8 	andl	r8,0x3ff8,COH
80009eda:	a3 98       	lsr	r8,0x3
80009edc:	5c 88       	casts.h	r8
}
80009ede:	10 9c       	mov	r12,r8
80009ee0:	e3 cd 80 80 	ldm	sp++,r7,pc

80009ee4 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
80009ee4:	eb cd 40 80 	pushm	r7,lr
80009ee8:	1a 97       	mov	r7,sp
80009eea:	20 2d       	sub	sp,8
80009eec:	ef 4c ff fc 	st.w	r7[-4],r12
80009ef0:	16 98       	mov	r8,r11
80009ef2:	ef 58 ff f8 	st.h	r7[-8],r8
	udd_g_ctrlreq.payload = payload;
80009ef6:	48 68       	lddpc	r8,80009f0c <udd_set_setup_payload+0x28>
80009ef8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009efc:	91 29       	st.w	r8[0x8],r9
	udd_g_ctrlreq.payload_size = payload_size;
80009efe:	48 49       	lddpc	r9,80009f0c <udd_set_setup_payload+0x28>
80009f00:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80009f04:	b2 68       	st.h	r9[0xc],r8
}
80009f06:	2f ed       	sub	sp,-8
80009f08:	e3 cd 80 80 	ldm	sp++,r7,pc
80009f0c:	00 00       	add	r0,r0
80009f0e:	0d e4       	ld.ub	r4,r6[0x6]

80009f10 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80009f10:	eb cd 40 80 	pushm	r7,lr
80009f14:	1a 97       	mov	r7,sp
80009f16:	20 dd       	sub	sp,52
80009f18:	16 99       	mov	r9,r11
80009f1a:	14 98       	mov	r8,r10
80009f1c:	18 9a       	mov	r10,r12
80009f1e:	ef 6a ff d4 	st.b	r7[-44],r10
80009f22:	ef 69 ff d0 	st.b	r7[-48],r9
80009f26:	ef 58 ff cc 	st.h	r7[-52],r8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
80009f2a:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009f2e:	a7 98       	lsr	r8,0x7
80009f30:	ef 68 ff db 	st.b	r7[-37],r8
	ep = ep & USB_EP_ADDR_MASK;
80009f34:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009f38:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009f3c:	ef 68 ff d4 	st.b	r7[-44],r8

	if (ep > USB_DEVICE_MAX_EP) {
80009f40:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80009f44:	30 28       	mov	r8,2
80009f46:	f0 09 18 00 	cp.b	r9,r8
80009f4a:	e0 88 00 04 	brls	80009f52 <udd_ep_alloc+0x42>
		return false;
80009f4e:	30 08       	mov	r8,0
80009f50:	c7 f9       	rjmp	8000a24e <udd_ep_alloc+0x33e>
	}
	if (Is_udd_endpoint_enabled(ep)) {
80009f52:	fe 68 00 00 	mov	r8,-131072
80009f56:	70 79       	ld.w	r9,r8[0x1c]
80009f58:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009f5c:	30 1a       	mov	r10,1
80009f5e:	f4 08 09 48 	lsl	r8,r10,r8
80009f62:	f3 e8 00 08 	and	r8,r9,r8
80009f66:	c0 30       	breq	80009f6c <udd_ep_alloc+0x5c>
		return false;
80009f68:	30 08       	mov	r8,0
80009f6a:	c7 29       	rjmp	8000a24e <udd_ep_alloc+0x33e>
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80009f6c:	ef 38 ff d0 	ld.ub	r8,r7[-48]
80009f70:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80009f74:	58 28       	cp.w	r8,2
80009f76:	c0 d0       	breq	80009f90 <udd_ep_alloc+0x80>
80009f78:	58 38       	cp.w	r8,3
80009f7a:	c0 70       	breq	80009f88 <udd_ep_alloc+0x78>
80009f7c:	58 18       	cp.w	r8,1
80009f7e:	c0 d1       	brne	80009f98 <udd_ep_alloc+0x88>
	case USB_EP_TYPE_ISOCHRONOUS:
		bank = UDD_ISOCHRONOUS_NB_BANK(ep);
80009f80:	30 28       	mov	r8,2
80009f82:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009f86:	c0 b8       	rjmp	80009f9c <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_INTERRUPT:
		bank = UDD_INTERRUPT_NB_BANK(ep);
80009f88:	30 18       	mov	r8,1
80009f8a:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009f8e:	c0 78       	rjmp	80009f9c <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_BULK:
		bank = UDD_BULK_NB_BANK(ep);
80009f90:	30 28       	mov	r8,2
80009f92:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009f96:	c0 38       	rjmp	80009f9c <udd_ep_alloc+0x8c>
	default:
		Assert(false);
		return false;
80009f98:	30 08       	mov	r8,0
80009f9a:	c5 a9       	rjmp	8000a24e <udd_ep_alloc+0x33e>
	}
	switch(bank) {
80009f9c:	ef 38 ff de 	ld.ub	r8,r7[-34]
80009fa0:	58 28       	cp.w	r8,2
80009fa2:	c0 90       	breq	80009fb4 <udd_ep_alloc+0xa4>
80009fa4:	58 38       	cp.w	r8,3
80009fa6:	c0 b0       	breq	80009fbc <udd_ep_alloc+0xac>
80009fa8:	58 18       	cp.w	r8,1
80009faa:	c0 d1       	brne	80009fc4 <udd_ep_alloc+0xb4>
	case 1:
		bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
80009fac:	30 08       	mov	r8,0
80009fae:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009fb2:	c0 b8       	rjmp	80009fc8 <udd_ep_alloc+0xb8>
	case 2:
		bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
80009fb4:	30 18       	mov	r8,1
80009fb6:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009fba:	c0 78       	rjmp	80009fc8 <udd_ep_alloc+0xb8>
	case 3:
		bank = AVR32_USBB_UECFG0_EPBK_TRIPLE;
80009fbc:	30 28       	mov	r8,2
80009fbe:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80009fc2:	c0 38       	rjmp	80009fc8 <udd_ep_alloc+0xb8>
	default:
		Assert(false);
		return false;
80009fc4:	30 08       	mov	r8,0
80009fc6:	c4 49       	rjmp	8000a24e <udd_ep_alloc+0x33e>
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80009fc8:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009fcc:	a3 68       	lsl	r8,0x2
80009fce:	e0 38 ff 00 	sub	r8,130816
80009fd2:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80009fd6:	a3 69       	lsl	r9,0x2
80009fd8:	e0 39 ff 00 	sub	r9,130816
80009fdc:	72 09       	ld.w	r9,r9[0x0]
80009fde:	12 9a       	mov	r10,r9
80009fe0:	e0 1a e6 83 	andl	r10,0xe683
80009fe4:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80009fe8:	ab 79       	lsl	r9,0xb
80009fea:	12 9b       	mov	r11,r9
80009fec:	e2 1b 18 00 	andl	r11,0x1800,COH
80009ff0:	ef 39 ff db 	ld.ub	r9,r7[-37]
80009ff4:	a9 69       	lsl	r9,0x8
80009ff6:	e2 19 01 00 	andl	r9,0x100,COH
80009ffa:	12 4b       	or	r11,r9
80009ffc:	ef 19 ff cc 	ld.uh	r9,r7[-52]
8000a000:	ef 49 ff f0 	st.w	r7[-16],r9
8000a004:	30 89       	mov	r9,8
8000a006:	ef 49 ff f4 	st.w	r7[-12],r9
8000a00a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a00e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000a012:	f2 0c 0c 49 	max	r9,r9,r12
8000a016:	ef 49 ff ec 	st.w	r7[-20],r9
8000a01a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a01e:	ef 49 ff e4 	st.w	r7[-28],r9
8000a022:	e0 69 04 00 	mov	r9,1024
8000a026:	ef 49 ff e8 	st.w	r7[-24],r9
8000a02a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a02e:	ee fc ff e8 	ld.w	r12,r7[-24]
8000a032:	f2 0c 0d 49 	min	r9,r9,r12
8000a036:	ef 49 ff e0 	st.w	r7[-32],r9
8000a03a:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000a03e:	a1 79       	lsl	r9,0x1
8000a040:	20 19       	sub	r9,1
8000a042:	f2 09 12 00 	clz	r9,r9
8000a046:	f2 09 11 1c 	rsub	r9,r9,28
8000a04a:	a5 69       	lsl	r9,0x4
8000a04c:	12 4b       	or	r11,r9
8000a04e:	ef 39 ff de 	ld.ub	r9,r7[-34]
8000a052:	a3 69       	lsl	r9,0x2
8000a054:	e2 19 00 0c 	andl	r9,0xc,COH
8000a058:	f7 e9 10 09 	or	r9,r11,r9
8000a05c:	e2 19 19 7c 	andl	r9,0x197c,COH
8000a060:	f5 e9 10 09 	or	r9,r10,r9
8000a064:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
8000a066:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a06a:	30 19       	mov	r9,1
8000a06c:	f2 08 09 48 	lsl	r8,r9,r8
8000a070:	ef 58 ff dc 	st.h	r7[-36],r8

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
8000a074:	30 28       	mov	r8,2
8000a076:	ef 68 ff df 	st.b	r7[-33],r8
8000a07a:	c3 a8       	rjmp	8000a0ee <udd_ep_alloc+0x1de>
		if (Is_udd_endpoint_enabled(i)) {
8000a07c:	fe 68 00 00 	mov	r8,-131072
8000a080:	70 79       	ld.w	r9,r8[0x1c]
8000a082:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a086:	30 1a       	mov	r10,1
8000a088:	f4 08 09 48 	lsl	r8,r10,r8
8000a08c:	f3 e8 00 08 	and	r8,r9,r8
8000a090:	c2 a0       	breq	8000a0e4 <udd_ep_alloc+0x1d4>
			ep_allocated |= 1 << i;
8000a092:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a096:	30 19       	mov	r9,1
8000a098:	f2 08 09 48 	lsl	r8,r9,r8
8000a09c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000a0a0:	ef 08 ff dc 	ld.sh	r8,r7[-36]
8000a0a4:	f3 e8 10 08 	or	r8,r9,r8
8000a0a8:	5c 88       	casts.h	r8
8000a0aa:	ef 58 ff dc 	st.h	r7[-36],r8
			udd_disable_endpoint(i);
8000a0ae:	fe 68 00 00 	mov	r8,-131072
8000a0b2:	fe 69 00 00 	mov	r9,-131072
8000a0b6:	72 7a       	ld.w	r10,r9[0x1c]
8000a0b8:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a0bc:	30 1b       	mov	r11,1
8000a0be:	f6 09 09 49 	lsl	r9,r11,r9
8000a0c2:	5c d9       	com	r9
8000a0c4:	f5 e9 00 09 	and	r9,r10,r9
8000a0c8:	91 79       	st.w	r8[0x1c],r9
			udd_unallocate_memory(i);
8000a0ca:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a0ce:	a3 68       	lsl	r8,0x2
8000a0d0:	e0 38 ff 00 	sub	r8,130816
8000a0d4:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a0d8:	a3 69       	lsl	r9,0x2
8000a0da:	e0 39 ff 00 	sub	r9,130816
8000a0de:	72 09       	ld.w	r9,r9[0x0]
8000a0e0:	a1 d9       	cbr	r9,0x1
8000a0e2:	91 09       	st.w	r8[0x0],r9
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
8000a0e4:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a0e8:	20 18       	sub	r8,1
8000a0ea:	ef 68 ff df 	st.b	r7[-33],r8
8000a0ee:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a0f2:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a0f6:	f0 09 18 00 	cp.b	r9,r8
8000a0fa:	fe 9b ff c1 	brhi	8000a07c <udd_ep_alloc+0x16c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000a0fe:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a102:	ef 68 ff df 	st.b	r7[-33],r8
8000a106:	c9 c8       	rjmp	8000a23e <udd_ep_alloc+0x32e>
		if (ep_allocated & (1 << i)) {
8000a108:	ef 19 ff dc 	ld.uh	r9,r7[-36]
8000a10c:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a110:	f2 08 08 48 	asr	r8,r9,r8
8000a114:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a118:	5c 58       	castu.b	r8
8000a11a:	e0 80 00 8d 	breq	8000a234 <udd_ep_alloc+0x324>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
8000a11e:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a122:	f0 c9 00 01 	sub	r9,r8,1
8000a126:	12 98       	mov	r8,r9
8000a128:	a3 68       	lsl	r8,0x2
8000a12a:	12 08       	add	r8,r9
8000a12c:	a3 68       	lsl	r8,0x2
8000a12e:	10 99       	mov	r9,r8
8000a130:	4c a8       	lddpc	r8,8000a258 <udd_ep_alloc+0x348>
8000a132:	f2 08 00 08 	add	r8,r9,r8
8000a136:	ef 48 ff f8 	st.w	r7[-8],r8
			bool b_restart = ptr_job->busy;
8000a13a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a13e:	70 08       	ld.w	r8,r8[0x0]
8000a140:	e6 18 80 00 	andh	r8,0x8000,COH
8000a144:	5f 18       	srne	r8
8000a146:	ef 68 ff ff 	st.b	r7[-1],r8
			ptr_job->busy = false;
8000a14a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a14e:	72 08       	ld.w	r8,r9[0x0]
8000a150:	30 0a       	mov	r10,0
8000a152:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a156:	93 08       	st.w	r9[0x0],r8

			udd_allocate_memory(i);
8000a158:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a15c:	a3 68       	lsl	r8,0x2
8000a15e:	e0 38 ff 00 	sub	r8,130816
8000a162:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a166:	a3 69       	lsl	r9,0x2
8000a168:	e0 39 ff 00 	sub	r9,130816
8000a16c:	72 09       	ld.w	r9,r9[0x0]
8000a16e:	a1 b9       	sbr	r9,0x1
8000a170:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint(i);
8000a172:	fe 68 00 00 	mov	r8,-131072
8000a176:	fe 69 00 00 	mov	r9,-131072
8000a17a:	72 7a       	ld.w	r10,r9[0x1c]
8000a17c:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a180:	30 1b       	mov	r11,1
8000a182:	f6 09 09 49 	lsl	r9,r11,r9
8000a186:	f5 e9 10 09 	or	r9,r10,r9
8000a18a:	91 79       	st.w	r8[0x1c],r9
			if (!Is_udd_endpoint_configured(i)) {
8000a18c:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a190:	a3 68       	lsl	r8,0x2
8000a192:	e0 38 fe d0 	sub	r8,130768
8000a196:	70 08       	ld.w	r8,r8[0x0]
8000a198:	e6 18 00 04 	andh	r8,0x4,COH
8000a19c:	c2 61       	brne	8000a1e8 <udd_ep_alloc+0x2d8>
				if (NULL == ptr_job->call_trans) {
8000a19e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a1a2:	70 48       	ld.w	r8,r8[0x10]
8000a1a4:	58 08       	cp.w	r8,0
8000a1a6:	c0 31       	brne	8000a1ac <udd_ep_alloc+0x29c>
					return false;
8000a1a8:	30 08       	mov	r8,0
8000a1aa:	c5 28       	rjmp	8000a24e <udd_ep_alloc+0x33e>
				}
				if (Is_udd_endpoint_in(i)) {
8000a1ac:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a1b0:	a3 68       	lsl	r8,0x2
8000a1b2:	e0 38 ff 00 	sub	r8,130816
8000a1b6:	70 08       	ld.w	r8,r8[0x0]
8000a1b8:	e2 18 01 00 	andl	r8,0x100,COH
8000a1bc:	c0 90       	breq	8000a1ce <udd_ep_alloc+0x2be>
					i |= USB_EP_DIR_IN;
8000a1be:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a1c2:	ea 18 ff ff 	orh	r8,0xffff
8000a1c6:	e8 18 ff 80 	orl	r8,0xff80
8000a1ca:	ef 68 ff df 	st.b	r7[-33],r8
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
8000a1ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a1d2:	70 48       	ld.w	r8,r8[0x10]
8000a1d4:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000a1d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a1dc:	72 29       	ld.w	r9,r9[0x8]
8000a1de:	12 9b       	mov	r11,r9
8000a1e0:	30 1c       	mov	r12,1
8000a1e2:	5d 18       	icall	r8
						ptr_job->buf_size, i);
				return false;
8000a1e4:	30 08       	mov	r8,0
8000a1e6:	c3 48       	rjmp	8000a24e <udd_ep_alloc+0x33e>
			}
			udd_enable_endpoint_bank_autoswitch(i);
8000a1e8:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a1ec:	a3 68       	lsl	r8,0x2
8000a1ee:	e0 38 ff 00 	sub	r8,130816
8000a1f2:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a1f6:	a3 69       	lsl	r9,0x2
8000a1f8:	e0 39 ff 00 	sub	r9,130816
8000a1fc:	72 09       	ld.w	r9,r9[0x0]
8000a1fe:	a9 b9       	sbr	r9,0x9
8000a200:	91 09       	st.w	r8[0x0],r9
			if (b_restart) {
8000a202:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a206:	30 08       	mov	r8,0
8000a208:	f0 09 18 00 	cp.b	r9,r8
8000a20c:	c1 40       	breq	8000a234 <udd_ep_alloc+0x324>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
8000a20e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a212:	70 48       	ld.w	r8,r8[0x10]
8000a214:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a218:	72 29       	ld.w	r9,r9[0x8]
8000a21a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000a21e:	74 1a       	ld.w	r10,r10[0x4]
8000a220:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a224:	76 0b       	ld.w	r11,r11[0x0]
8000a226:	e6 1b 40 00 	andh	r11,0x4000,COH
8000a22a:	5f 1b       	srne	r11
8000a22c:	ef 3c ff df 	ld.ub	r12,r7[-33]
8000a230:	f0 1f 00 0b 	mcall	8000a25c <udd_ep_alloc+0x34c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000a234:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a238:	2f f8       	sub	r8,-1
8000a23a:	ef 68 ff df 	st.b	r7[-33],r8
8000a23e:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a242:	30 28       	mov	r8,2
8000a244:	f0 09 18 00 	cp.b	r9,r8
8000a248:	fe 98 ff 60 	brls	8000a108 <udd_ep_alloc+0x1f8>
						ptr_job->buf_size,
						ptr_job->call_trans);
			}
		}
	}
	return true;
8000a24c:	30 18       	mov	r8,1
}
8000a24e:	10 9c       	mov	r12,r8
8000a250:	2f 3d       	sub	sp,-52
8000a252:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a256:	00 00       	add	r0,r0
8000a258:	00 00       	add	r0,r0
8000a25a:	07 c0       	ld.ub	r0,r3[0x4]
8000a25c:	80 00       	ld.sh	r0,r0[0x0]
8000a25e:	a5 80       	lsr	r0,0x4

8000a260 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
8000a260:	eb cd 40 80 	pushm	r7,lr
8000a264:	1a 97       	mov	r7,sp
8000a266:	20 2d       	sub	sp,8
8000a268:	18 98       	mov	r8,r12
8000a26a:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a26e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a272:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a276:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
8000a27a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a27e:	30 28       	mov	r8,2
8000a280:	f0 09 18 00 	cp.b	r9,r8
8000a284:	e0 8b 00 33 	brhi	8000a2ea <udd_ep_free+0x8a>
		return;
	}
	udd_disable_endpoint(index);
8000a288:	fe 68 00 00 	mov	r8,-131072
8000a28c:	fe 69 00 00 	mov	r9,-131072
8000a290:	72 7a       	ld.w	r10,r9[0x1c]
8000a292:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a296:	30 1b       	mov	r11,1
8000a298:	f6 09 09 49 	lsl	r9,r11,r9
8000a29c:	5c d9       	com	r9
8000a29e:	f5 e9 00 09 	and	r9,r10,r9
8000a2a2:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
8000a2a4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2a8:	a3 68       	lsl	r8,0x2
8000a2aa:	e0 38 ff 00 	sub	r8,130816
8000a2ae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a2b2:	a3 69       	lsl	r9,0x2
8000a2b4:	e0 39 ff 00 	sub	r9,130816
8000a2b8:	72 09       	ld.w	r9,r9[0x0]
8000a2ba:	a1 d9       	cbr	r9,0x1
8000a2bc:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
8000a2be:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a2c2:	10 9c       	mov	r12,r8
8000a2c4:	f0 1f 00 0c 	mcall	8000a2f4 <udd_ep_free+0x94>
	udd_ep_job[index - 1].stall_requested = false;
8000a2c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2cc:	f0 c9 00 01 	sub	r9,r8,1
8000a2d0:	48 aa       	lddpc	r10,8000a2f8 <udd_ep_free+0x98>
8000a2d2:	12 98       	mov	r8,r9
8000a2d4:	a3 68       	lsl	r8,0x2
8000a2d6:	12 08       	add	r8,r9
8000a2d8:	a3 68       	lsl	r8,0x2
8000a2da:	f4 08 00 09 	add	r9,r10,r8
8000a2de:	72 08       	ld.w	r8,r9[0x0]
8000a2e0:	30 0a       	mov	r10,0
8000a2e2:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a2e6:	93 08       	st.w	r9[0x0],r8
8000a2e8:	c0 28       	rjmp	8000a2ec <udd_ep_free+0x8c>
void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index) {
		return;
8000a2ea:	d7 03       	nop
	}
	udd_disable_endpoint(index);
	udd_unallocate_memory(index);
	udd_ep_abort_job(ep);
	udd_ep_job[index - 1].stall_requested = false;
}
8000a2ec:	2f ed       	sub	sp,-8
8000a2ee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a2f2:	00 00       	add	r0,r0
8000a2f4:	80 00       	ld.sh	r0,r0[0x0]
8000a2f6:	b3 08       	ld.d	r8,r9
8000a2f8:	00 00       	add	r0,r0
8000a2fa:	07 c0       	ld.ub	r0,r3[0x4]

8000a2fc <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
8000a2fc:	eb cd 40 80 	pushm	r7,lr
8000a300:	1a 97       	mov	r7,sp
8000a302:	20 1d       	sub	sp,4
8000a304:	18 98       	mov	r8,r12
8000a306:	ef 68 ff fc 	st.b	r7[-4],r8
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
8000a30a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a30e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a312:	a3 68       	lsl	r8,0x2
8000a314:	e0 38 fe 40 	sub	r8,130624
8000a318:	70 08       	ld.w	r8,r8[0x0]
8000a31a:	e6 18 00 08 	andh	r8,0x8,COH
8000a31e:	5f 18       	srne	r8
8000a320:	5c 58       	castu.b	r8
}
8000a322:	10 9c       	mov	r12,r8
8000a324:	2f fd       	sub	sp,-4
8000a326:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a32a:	d7 03       	nop

8000a32c <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
8000a32c:	eb cd 40 80 	pushm	r7,lr
8000a330:	1a 97       	mov	r7,sp
8000a332:	20 3d       	sub	sp,12
8000a334:	18 98       	mov	r8,r12
8000a336:	ef 68 ff f4 	st.b	r7[-12],r8
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a33a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a33e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a342:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
8000a346:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a34a:	30 28       	mov	r8,2
8000a34c:	f0 09 18 00 	cp.b	r9,r8
8000a350:	e0 88 00 04 	brls	8000a358 <udd_ep_set_halt+0x2c>
		return false;
8000a354:	30 08       	mov	r8,0
8000a356:	c6 f8       	rjmp	8000a434 <udd_ep_set_halt+0x108>
	}

	ptr_job = &udd_ep_job[index - 1];
8000a358:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a35c:	f0 c9 00 01 	sub	r9,r8,1
8000a360:	12 98       	mov	r8,r9
8000a362:	a3 68       	lsl	r8,0x2
8000a364:	12 08       	add	r8,r9
8000a366:	a3 68       	lsl	r8,0x2
8000a368:	10 99       	mov	r9,r8
8000a36a:	4b 58       	lddpc	r8,8000a43c <udd_ep_set_halt+0x110>
8000a36c:	f2 08 00 08 	add	r8,r9,r8
8000a370:	ef 48 ff f8 	st.w	r7[-8],r8

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
8000a374:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a378:	a3 68       	lsl	r8,0x2
8000a37a:	e0 38 fe 40 	sub	r8,130624
8000a37e:	70 08       	ld.w	r8,r8[0x0]
8000a380:	e6 18 00 08 	andh	r8,0x8,COH
8000a384:	c0 71       	brne	8000a392 <udd_ep_set_halt+0x66>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
8000a386:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a38a:	70 08       	ld.w	r8,r8[0x0]
8000a38c:	e6 18 20 00 	andh	r8,0x2000,COH
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
8000a390:	c0 30       	breq	8000a396 <udd_ep_set_halt+0x6a>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
8000a392:	30 18       	mov	r8,1
8000a394:	c5 08       	rjmp	8000a434 <udd_ep_set_halt+0x108>
	}

	if (ptr_job->busy == true) {
8000a396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a39a:	70 08       	ld.w	r8,r8[0x0]
8000a39c:	e6 18 80 00 	andh	r8,0x8000,COH
8000a3a0:	c0 30       	breq	8000a3a6 <udd_ep_set_halt+0x7a>
		return false; // Job on going, stall impossible
8000a3a2:	30 08       	mov	r8,0
8000a3a4:	c4 88       	rjmp	8000a434 <udd_ep_set_halt+0x108>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
8000a3a6:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a3aa:	30 08       	mov	r8,0
8000a3ac:	f0 09 18 00 	cp.b	r9,r8
8000a3b0:	c2 54       	brge	8000a3fa <udd_ep_set_halt+0xce>
8000a3b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a3b6:	a3 68       	lsl	r8,0x2
8000a3b8:	e0 38 fe d0 	sub	r8,130768
8000a3bc:	70 08       	ld.w	r8,r8[0x0]
8000a3be:	e2 18 30 00 	andl	r8,0x3000,COH
8000a3c2:	ad 88       	lsr	r8,0xc
8000a3c4:	c1 b0       	breq	8000a3fa <udd_ep_set_halt+0xce>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
8000a3c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a3ca:	72 08       	ld.w	r8,r9[0x0]
8000a3cc:	30 1a       	mov	r10,1
8000a3ce:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a3d2:	93 08       	st.w	r9[0x0],r8
			udd_enable_bank_interrupt(index);
8000a3d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a3d8:	a3 68       	lsl	r8,0x2
8000a3da:	e0 38 fe 10 	sub	r8,130576
8000a3de:	e0 69 10 00 	mov	r9,4096
8000a3e2:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(index);
8000a3e4:	fe 68 00 00 	mov	r8,-131072
8000a3e8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a3ec:	e0 6a 10 00 	mov	r10,4096
8000a3f0:	f4 09 09 49 	lsl	r9,r10,r9
8000a3f4:	91 69       	st.w	r8[0x18],r9
			return true;
8000a3f6:	30 18       	mov	r8,1
8000a3f8:	c1 e8       	rjmp	8000a434 <udd_ep_set_halt+0x108>
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
8000a3fa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a3fe:	a3 68       	lsl	r8,0x2
8000a400:	e0 38 ff 00 	sub	r8,130816
8000a404:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a408:	a3 69       	lsl	r9,0x2
8000a40a:	e0 39 ff 00 	sub	r9,130816
8000a40e:	72 09       	ld.w	r9,r9[0x0]
8000a410:	a9 d9       	cbr	r9,0x9
8000a412:	91 09       	st.w	r8[0x0],r9
	udd_ack_stall(index);
8000a414:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a418:	a3 68       	lsl	r8,0x2
8000a41a:	e0 38 fe a0 	sub	r8,130720
8000a41e:	34 09       	mov	r9,64
8000a420:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(index);
8000a422:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a426:	a3 68       	lsl	r8,0x2
8000a428:	e0 38 fe 10 	sub	r8,130576
8000a42c:	e8 69 00 00 	mov	r9,524288
8000a430:	91 09       	st.w	r8[0x0],r9
	return true;
8000a432:	30 18       	mov	r8,1
}
8000a434:	10 9c       	mov	r12,r8
8000a436:	2f dd       	sub	sp,-12
8000a438:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a43c:	00 00       	add	r0,r0
8000a43e:	07 c0       	ld.ub	r0,r3[0x4]

8000a440 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
8000a440:	eb cd 40 80 	pushm	r7,lr
8000a444:	1a 97       	mov	r7,sp
8000a446:	20 3d       	sub	sp,12
8000a448:	18 98       	mov	r8,r12
8000a44a:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_stall_cleared = false;
8000a44e:	30 08       	mov	r8,0
8000a450:	ef 68 ff fb 	st.b	r7[-5],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000a454:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a458:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a45c:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep)
8000a460:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a464:	30 28       	mov	r8,2
8000a466:	f0 09 18 00 	cp.b	r9,r8
8000a46a:	e0 88 00 04 	brls	8000a472 <udd_ep_clear_halt+0x32>
		return false;
8000a46e:	30 08       	mov	r8,0
8000a470:	c8 18       	rjmp	8000a572 <udd_ep_clear_halt+0x132>
	ptr_job = &udd_ep_job[ep - 1];
8000a472:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a476:	f0 c9 00 01 	sub	r9,r8,1
8000a47a:	12 98       	mov	r8,r9
8000a47c:	a3 68       	lsl	r8,0x2
8000a47e:	12 08       	add	r8,r9
8000a480:	a3 68       	lsl	r8,0x2
8000a482:	10 99       	mov	r9,r8
8000a484:	4b e8       	lddpc	r8,8000a57c <udd_ep_clear_halt+0x13c>
8000a486:	f2 08 00 08 	add	r8,r9,r8
8000a48a:	ef 48 ff fc 	st.w	r7[-4],r8

	if (ptr_job->stall_requested) {
8000a48e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a492:	70 08       	ld.w	r8,r8[0x0]
8000a494:	e6 18 20 00 	andh	r8,0x2000,COH
8000a498:	c1 c0       	breq	8000a4d0 <udd_ep_clear_halt+0x90>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
8000a49a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a49e:	72 08       	ld.w	r8,r9[0x0]
8000a4a0:	30 0a       	mov	r10,0
8000a4a2:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a4a6:	93 08       	st.w	r9[0x0],r8
		udd_disable_bank_interrupt(ep);
8000a4a8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a4ac:	a3 68       	lsl	r8,0x2
8000a4ae:	e0 38 fd e0 	sub	r8,130528
8000a4b2:	e0 69 10 00 	mov	r9,4096
8000a4b6:	91 09       	st.w	r8[0x0],r9
		udd_disable_endpoint_interrupt(ep);
8000a4b8:	fe 68 00 00 	mov	r8,-131072
8000a4bc:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a4c0:	e0 6a 10 00 	mov	r10,4096
8000a4c4:	f4 09 09 49 	lsl	r9,r10,r9
8000a4c8:	91 59       	st.w	r8[0x14],r9
		b_stall_cleared = true;
8000a4ca:	30 18       	mov	r8,1
8000a4cc:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
8000a4d0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a4d4:	a3 68       	lsl	r8,0x2
8000a4d6:	e0 38 fe 40 	sub	r8,130624
8000a4da:	70 08       	ld.w	r8,r8[0x0]
8000a4dc:	e6 18 00 08 	andh	r8,0x8,COH
8000a4e0:	c3 10       	breq	8000a542 <udd_ep_clear_halt+0x102>
		if (Is_udd_stall(ep)) {
8000a4e2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a4e6:	a3 68       	lsl	r8,0x2
8000a4e8:	e0 38 fe d0 	sub	r8,130768
8000a4ec:	70 08       	ld.w	r8,r8[0x0]
8000a4ee:	e2 18 00 40 	andl	r8,0x40,COH
8000a4f2:	c1 00       	breq	8000a512 <udd_ep_clear_halt+0xd2>
			udd_ack_stall(ep);
8000a4f4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a4f8:	a3 68       	lsl	r8,0x2
8000a4fa:	e0 38 fe a0 	sub	r8,130720
8000a4fe:	34 09       	mov	r9,64
8000a500:	91 09       	st.w	r8[0x0],r9
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
8000a502:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a506:	a3 68       	lsl	r8,0x2
8000a508:	e0 38 fe 10 	sub	r8,130576
8000a50c:	e4 69 00 00 	mov	r9,262144
8000a510:	91 09       	st.w	r8[0x0],r9
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
8000a512:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a516:	a3 68       	lsl	r8,0x2
8000a518:	e0 38 fd e0 	sub	r8,130528
8000a51c:	e8 69 00 00 	mov	r9,524288
8000a520:	91 09       	st.w	r8[0x0],r9
		udd_enable_endpoint_bank_autoswitch(ep);
8000a522:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a526:	a3 68       	lsl	r8,0x2
8000a528:	e0 38 ff 00 	sub	r8,130816
8000a52c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a530:	a3 69       	lsl	r9,0x2
8000a532:	e0 39 ff 00 	sub	r9,130816
8000a536:	72 09       	ld.w	r9,r9[0x0]
8000a538:	a9 b9       	sbr	r9,0x9
8000a53a:	91 09       	st.w	r8[0x0],r9
		b_stall_cleared = true;
8000a53c:	30 18       	mov	r8,1
8000a53e:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (b_stall_cleared) {
8000a542:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000a546:	30 08       	mov	r8,0
8000a548:	f0 09 18 00 	cp.b	r9,r8
8000a54c:	c1 20       	breq	8000a570 <udd_ep_clear_halt+0x130>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
8000a54e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a552:	70 08       	ld.w	r8,r8[0x0]
8000a554:	e6 18 80 00 	andh	r8,0x8000,COH
8000a558:	c0 c0       	breq	8000a570 <udd_ep_clear_halt+0x130>
			ptr_job->busy = false;
8000a55a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a55e:	72 08       	ld.w	r8,r9[0x0]
8000a560:	30 0a       	mov	r10,0
8000a562:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a566:	93 08       	st.w	r9[0x0],r8
			ptr_job->call_nohalt();
8000a568:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a56c:	70 48       	ld.w	r8,r8[0x10]
8000a56e:	5d 18       	icall	r8
		}
	}
	return true;
8000a570:	30 18       	mov	r8,1
}
8000a572:	10 9c       	mov	r12,r8
8000a574:	2f dd       	sub	sp,-12
8000a576:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a57a:	00 00       	add	r0,r0
8000a57c:	00 00       	add	r0,r0
8000a57e:	07 c0       	ld.ub	r0,r3[0x4]

8000a580 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
8000a580:	eb cd 40 80 	pushm	r7,lr
8000a584:	1a 97       	mov	r7,sp
8000a586:	20 7d       	sub	sp,28
8000a588:	ef 4a ff ec 	st.w	r7[-20],r10
8000a58c:	ef 49 ff e8 	st.w	r7[-24],r9
8000a590:	ef 48 ff e4 	st.w	r7[-28],r8
8000a594:	18 98       	mov	r8,r12
8000a596:	ef 68 ff f4 	st.b	r7[-12],r8
8000a59a:	16 98       	mov	r8,r11
8000a59c:	ef 68 ff f0 	st.b	r7[-16],r8
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
8000a5a0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a5a4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a5a8:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep) {
8000a5ac:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a5b0:	30 28       	mov	r8,2
8000a5b2:	f0 09 18 00 	cp.b	r9,r8
8000a5b6:	e0 88 00 04 	brls	8000a5be <udd_ep_run+0x3e>
		return false;
8000a5ba:	30 08       	mov	r8,0
8000a5bc:	c6 88       	rjmp	8000a68c <udd_ep_run+0x10c>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000a5be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a5c2:	f0 c9 00 01 	sub	r9,r8,1
8000a5c6:	12 98       	mov	r8,r9
8000a5c8:	a3 68       	lsl	r8,0x2
8000a5ca:	12 08       	add	r8,r9
8000a5cc:	a3 68       	lsl	r8,0x2
8000a5ce:	10 99       	mov	r9,r8
8000a5d0:	4b 18       	lddpc	r8,8000a694 <udd_ep_run+0x114>
8000a5d2:	f2 08 00 08 	add	r8,r9,r8
8000a5d6:	ef 48 ff f8 	st.w	r7[-8],r8

	if ((!Is_udd_endpoint_enabled(ep))
8000a5da:	fe 68 00 00 	mov	r8,-131072
8000a5de:	70 79       	ld.w	r9,r8[0x1c]
8000a5e0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a5e4:	30 1a       	mov	r10,1
8000a5e6:	f4 08 09 48 	lsl	r8,r10,r8
8000a5ea:	f3 e8 00 08 	and	r8,r9,r8
8000a5ee:	c1 00       	breq	8000a60e <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
8000a5f0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a5f4:	a3 68       	lsl	r8,0x2
8000a5f6:	e0 38 fe 40 	sub	r8,130624
8000a5fa:	70 08       	ld.w	r8,r8[0x0]
8000a5fc:	e6 18 00 08 	andh	r8,0x8,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000a600:	c0 71       	brne	8000a60e <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
8000a602:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a606:	70 08       	ld.w	r8,r8[0x0]
8000a608:	e6 18 20 00 	andh	r8,0x2000,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000a60c:	c0 30       	breq	8000a612 <udd_ep_run+0x92>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
8000a60e:	30 08       	mov	r8,0
8000a610:	c3 e8       	rjmp	8000a68c <udd_ep_run+0x10c>
	}

	flags = cpu_irq_save();
8000a612:	f0 1f 00 22 	mcall	8000a698 <udd_ep_run+0x118>
8000a616:	18 98       	mov	r8,r12
8000a618:	ef 48 ff fc 	st.w	r7[-4],r8
	if (ptr_job->busy == true) {
8000a61c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a620:	70 08       	ld.w	r8,r8[0x0]
8000a622:	e6 18 80 00 	andh	r8,0x8000,COH
8000a626:	c0 70       	breq	8000a634 <udd_ep_run+0xb4>
		cpu_irq_restore(flags);
8000a628:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a62c:	f0 1f 00 1c 	mcall	8000a69c <udd_ep_run+0x11c>
		return false; // Job already on going
8000a630:	30 08       	mov	r8,0
8000a632:	c2 d8       	rjmp	8000a68c <udd_ep_run+0x10c>
	}
	ptr_job->busy = true;
8000a634:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a638:	72 08       	ld.w	r8,r9[0x0]
8000a63a:	30 1a       	mov	r10,1
8000a63c:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a640:	93 08       	st.w	r9[0x0],r8
	cpu_irq_restore(flags);
8000a642:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a646:	f0 1f 00 16 	mcall	8000a69c <udd_ep_run+0x11c>

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
8000a64a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a64e:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a652:	91 19       	st.w	r8[0x4],r9
	ptr_job->buf_size = buf_size;
8000a654:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a658:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a65c:	91 29       	st.w	r8[0x8],r9
	ptr_job->nb_trans = 0;
8000a65e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a662:	30 09       	mov	r9,0
8000a664:	91 39       	st.w	r8[0xc],r9
	ptr_job->call_trans = callback;
8000a666:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a66a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a66e:	91 49       	st.w	r8[0x10],r9
	ptr_job->b_shortpacket = b_shortpacket;
8000a670:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a674:	72 08       	ld.w	r8,r9[0x0]
8000a676:	ef 3a ff f0 	ld.ub	r10,r7[-16]
8000a67a:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000a67e:	93 08       	st.w	r9[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
8000a680:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a684:	10 9c       	mov	r12,r8
8000a686:	f0 1f 00 07 	mcall	8000a6a0 <udd_ep_run+0x120>
	return true;
8000a68a:	30 18       	mov	r8,1
}
8000a68c:	10 9c       	mov	r12,r8
8000a68e:	2f 9d       	sub	sp,-28
8000a690:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a694:	00 00       	add	r0,r0
8000a696:	07 c0       	ld.ub	r0,r3[0x4]
8000a698:	80 00       	ld.sh	r0,r0[0x0]
8000a69a:	99 64       	st.w	r12[0x18],r4
8000a69c:	80 00       	ld.sh	r0,r0[0x0]
8000a69e:	99 82       	st.w	r12[0x20],r2
8000a6a0:	80 00       	ld.sh	r0,r0[0x0]
8000a6a2:	b3 d8       	cbr	r8,0x13

8000a6a4 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
8000a6a4:	eb cd 40 80 	pushm	r7,lr
8000a6a8:	1a 97       	mov	r7,sp
8000a6aa:	20 2d       	sub	sp,8
8000a6ac:	18 98       	mov	r8,r12
8000a6ae:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000a6b2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a6b6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a6ba:	ef 68 ff ff 	st.b	r7[-1],r8

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
8000a6be:	fe 68 00 00 	mov	r8,-131072
8000a6c2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a6c6:	20 19       	sub	r9,1
8000a6c8:	fc 1a 02 00 	movh	r10,0x200
8000a6cc:	f4 09 09 49 	lsl	r9,r10,r9
8000a6d0:	91 59       	st.w	r8[0x14],r9
	udd_endpoint_dma_set_control(index, 0);
8000a6d2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a6d6:	a5 68       	lsl	r8,0x4
8000a6d8:	e0 38 fd 00 	sub	r8,130304
8000a6dc:	30 09       	mov	r9,0
8000a6de:	91 29       	st.w	r8[0x8],r9
	// Kill banks
	udd_disable_endpoint_interrupt(index);
8000a6e0:	fe 68 00 00 	mov	r8,-131072
8000a6e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a6e8:	e0 6a 10 00 	mov	r10,4096
8000a6ec:	f4 09 09 49 	lsl	r9,r10,r9
8000a6f0:	91 59       	st.w	r8[0x14],r9
	while (udd_nb_busy_bank(index)) {
8000a6f2:	c1 28       	rjmp	8000a716 <udd_ep_abort+0x72>
		udd_kill_last_in_bank(index);
8000a6f4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a6f8:	a3 68       	lsl	r8,0x2
8000a6fa:	e0 38 fe 10 	sub	r8,130576
8000a6fe:	e0 69 20 00 	mov	r9,8192
8000a702:	91 09       	st.w	r8[0x0],r9
		while(Is_udd_killing_last_in_bank(index));
8000a704:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a708:	a3 68       	lsl	r8,0x2
8000a70a:	e0 38 fe 40 	sub	r8,130624
8000a70e:	70 08       	ld.w	r8,r8[0x0]
8000a710:	e2 18 20 00 	andl	r8,0x2000,COH
8000a714:	cf 81       	brne	8000a704 <udd_ep_abort+0x60>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
8000a716:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a71a:	a3 68       	lsl	r8,0x2
8000a71c:	e0 38 fe d0 	sub	r8,130768
8000a720:	70 08       	ld.w	r8,r8[0x0]
8000a722:	e2 18 30 00 	andl	r8,0x3000,COH
8000a726:	ad 88       	lsr	r8,0xc
8000a728:	ce 61       	brne	8000a6f4 <udd_ep_abort+0x50>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
8000a72a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a72e:	10 9c       	mov	r12,r8
8000a730:	f0 1f 00 03 	mcall	8000a73c <udd_ep_abort+0x98>
}
8000a734:	2f ed       	sub	sp,-8
8000a736:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a73a:	00 00       	add	r0,r0
8000a73c:	80 00       	ld.sh	r0,r0[0x0]
8000a73e:	b3 08       	ld.d	r8,r9

8000a740 <udd_ep_wait_stall_clear>:


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
8000a740:	eb cd 40 80 	pushm	r7,lr
8000a744:	1a 97       	mov	r7,sp
8000a746:	20 3d       	sub	sp,12
8000a748:	18 98       	mov	r8,r12
8000a74a:	ef 4b ff f4 	st.w	r7[-12],r11
8000a74e:	ef 68 ff f8 	st.b	r7[-8],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000a752:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a756:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a75a:	ef 68 ff f8 	st.b	r7[-8],r8
	if (USB_DEVICE_MAX_EP < ep) {
8000a75e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000a762:	30 28       	mov	r8,2
8000a764:	f0 09 18 00 	cp.b	r9,r8
8000a768:	e0 88 00 04 	brls	8000a770 <udd_ep_wait_stall_clear+0x30>
		return false;
8000a76c:	30 08       	mov	r8,0
8000a76e:	c4 48       	rjmp	8000a7f6 <udd_ep_wait_stall_clear+0xb6>
	}

	ptr_job = &udd_ep_job[ep - 1];
8000a770:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a774:	f0 c9 00 01 	sub	r9,r8,1
8000a778:	12 98       	mov	r8,r9
8000a77a:	a3 68       	lsl	r8,0x2
8000a77c:	12 08       	add	r8,r9
8000a77e:	a3 68       	lsl	r8,0x2
8000a780:	10 99       	mov	r9,r8
8000a782:	4a 08       	lddpc	r8,8000a800 <udd_ep_wait_stall_clear+0xc0>
8000a784:	f2 08 00 08 	add	r8,r9,r8
8000a788:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!Is_udd_endpoint_enabled(ep)) {
8000a78c:	fe 68 00 00 	mov	r8,-131072
8000a790:	70 79       	ld.w	r9,r8[0x1c]
8000a792:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a796:	30 1a       	mov	r10,1
8000a798:	f4 08 09 48 	lsl	r8,r10,r8
8000a79c:	f3 e8 00 08 	and	r8,r9,r8
8000a7a0:	c0 31       	brne	8000a7a6 <udd_ep_wait_stall_clear+0x66>
		return false; // Endpoint not enabled
8000a7a2:	30 08       	mov	r8,0
8000a7a4:	c2 98       	rjmp	8000a7f6 <udd_ep_wait_stall_clear+0xb6>
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
8000a7a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a7aa:	70 08       	ld.w	r8,r8[0x0]
8000a7ac:	e6 18 80 00 	andh	r8,0x8000,COH
8000a7b0:	c0 30       	breq	8000a7b6 <udd_ep_wait_stall_clear+0x76>
		return false; // Job already on going
8000a7b2:	30 08       	mov	r8,0
8000a7b4:	c2 18       	rjmp	8000a7f6 <udd_ep_wait_stall_clear+0xb6>
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000a7b6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a7ba:	a3 68       	lsl	r8,0x2
8000a7bc:	e0 38 fe 40 	sub	r8,130624
8000a7c0:	70 08       	ld.w	r8,r8[0x0]
8000a7c2:	e6 18 00 08 	andh	r8,0x8,COH
8000a7c6:	c0 71       	brne	8000a7d4 <udd_ep_wait_stall_clear+0x94>
			|| ptr_job->stall_requested) {
8000a7c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a7cc:	70 08       	ld.w	r8,r8[0x0]
8000a7ce:	e6 18 20 00 	andh	r8,0x2000,COH
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000a7d2:	c0 e0       	breq	8000a7ee <udd_ep_wait_stall_clear+0xae>
			|| ptr_job->stall_requested) {
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
8000a7d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a7d8:	72 08       	ld.w	r8,r9[0x0]
8000a7da:	30 1a       	mov	r10,1
8000a7dc:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a7e0:	93 08       	st.w	r9[0x0],r8
		ptr_job->call_nohalt = callback;
8000a7e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a7e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a7ea:	91 49       	st.w	r8[0x10],r9
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000a7ec:	c0 48       	rjmp	8000a7f4 <udd_ep_wait_stall_clear+0xb4>
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
8000a7ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a7f2:	5d 18       	icall	r8
	}
	return true;
8000a7f4:	30 18       	mov	r8,1
}
8000a7f6:	10 9c       	mov	r12,r8
8000a7f8:	2f dd       	sub	sp,-12
8000a7fa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a7fe:	00 00       	add	r0,r0
8000a800:	00 00       	add	r0,r0
8000a802:	07 c0       	ld.ub	r0,r3[0x4]

8000a804 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
8000a804:	eb cd 40 80 	pushm	r7,lr
8000a808:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000a80a:	fe 68 00 00 	mov	r8,-131072
8000a80e:	fe 69 00 00 	mov	r9,-131072
8000a812:	72 09       	ld.w	r9,r9[0x0]
8000a814:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a818:	ab b9       	sbr	r9,0xb
8000a81a:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_j();
8000a81c:	fe 68 00 00 	mov	r8,-131072
8000a820:	fe 69 00 00 	mov	r9,-131072
8000a824:	72 09       	ld.w	r9,r9[0x0]
8000a826:	ad b9       	sbr	r9,0xd
8000a828:	91 09       	st.w	r8[0x0],r9
}
8000a82a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a82e <udd_test_mode_k>:


void udd_test_mode_k(void)
{
8000a82e:	eb cd 40 80 	pushm	r7,lr
8000a832:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000a834:	fe 68 00 00 	mov	r8,-131072
8000a838:	fe 69 00 00 	mov	r9,-131072
8000a83c:	72 09       	ld.w	r9,r9[0x0]
8000a83e:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a842:	ab b9       	sbr	r9,0xb
8000a844:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_k();
8000a846:	fe 68 00 00 	mov	r8,-131072
8000a84a:	fe 69 00 00 	mov	r9,-131072
8000a84e:	72 09       	ld.w	r9,r9[0x0]
8000a850:	af a9       	sbr	r9,0xe
8000a852:	91 09       	st.w	r8[0x0],r9
}
8000a854:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a858 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
8000a858:	eb cd 40 80 	pushm	r7,lr
8000a85c:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
8000a85e:	fe 68 00 00 	mov	r8,-131072
8000a862:	fe 69 00 00 	mov	r9,-131072
8000a866:	72 09       	ld.w	r9,r9[0x0]
8000a868:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a86c:	ab b9       	sbr	r9,0xb
8000a86e:	91 09       	st.w	r8[0x0],r9
}
8000a870:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a874 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
8000a874:	eb cd 40 80 	pushm	r7,lr
8000a878:	1a 97       	mov	r7,sp
8000a87a:	21 7d       	sub	sp,92
				0xFF, 0xFF,
		// S, 111111S, {0111111S * 7}
		0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD,
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};
8000a87c:	4d c9       	lddpc	r9,8000a9ec <udd_test_mode_packet+0x178>
8000a87e:	ee c8 00 5c 	sub	r8,r7,92
8000a882:	f2 ea 00 00 	ld.d	r10,r9[0]
8000a886:	f0 eb 00 00 	st.d	r8[0],r10
8000a88a:	f2 ea 00 08 	ld.d	r10,r9[8]
8000a88e:	f0 eb 00 08 	st.d	r8[8],r10
8000a892:	f2 ea 00 10 	ld.d	r10,r9[16]
8000a896:	f0 eb 00 10 	st.d	r8[16],r10
8000a89a:	f2 ea 00 18 	ld.d	r10,r9[24]
8000a89e:	f0 eb 00 18 	st.d	r8[24],r10
8000a8a2:	f2 ea 00 20 	ld.d	r10,r9[32]
8000a8a6:	f0 eb 00 20 	st.d	r8[32],r10
8000a8aa:	f2 ea 00 28 	ld.d	r10,r9[40]
8000a8ae:	f0 eb 00 28 	st.d	r8[40],r10
8000a8b2:	72 ca       	ld.w	r10,r9[0x30]
8000a8b4:	91 ca       	st.w	r8[0x30],r10
8000a8b6:	f3 39 00 34 	ld.ub	r9,r9[52]
8000a8ba:	f1 69 00 34 	st.b	r8[52],r9

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
8000a8be:	fe 68 00 00 	mov	r8,-131072
8000a8c2:	fe 69 00 00 	mov	r9,-131072
8000a8c6:	72 79       	ld.w	r9,r9[0x1c]
8000a8c8:	a1 c9       	cbr	r9,0x0
8000a8ca:	91 79       	st.w	r8[0x1c],r9
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
8000a8cc:	fe 68 01 00 	mov	r8,-130816
8000a8d0:	fe 69 01 00 	mov	r9,-130816
8000a8d4:	72 09       	ld.w	r9,r9[0x0]
8000a8d6:	12 9a       	mov	r10,r9
8000a8d8:	e0 1a e6 83 	andl	r10,0xe683
8000a8dc:	34 09       	mov	r9,64
8000a8de:	ef 49 ff f8 	st.w	r7[-8],r9
8000a8e2:	30 89       	mov	r9,8
8000a8e4:	ef 49 ff fc 	st.w	r7[-4],r9
8000a8e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a8ec:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a8f0:	f2 0b 0c 49 	max	r9,r9,r11
8000a8f4:	ef 49 ff f4 	st.w	r7[-12],r9
8000a8f8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a8fc:	ef 49 ff ec 	st.w	r7[-20],r9
8000a900:	e0 69 04 00 	mov	r9,1024
8000a904:	ef 49 ff f0 	st.w	r7[-16],r9
8000a908:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a90c:	ee fb ff f0 	ld.w	r11,r7[-16]
8000a910:	f2 0b 0d 49 	min	r9,r9,r11
8000a914:	ef 49 ff e8 	st.w	r7[-24],r9
8000a918:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a91c:	a1 79       	lsl	r9,0x1
8000a91e:	20 19       	sub	r9,1
8000a920:	f2 09 12 00 	clz	r9,r9
8000a924:	f2 09 11 1c 	rsub	r9,r9,28
8000a928:	a5 69       	lsl	r9,0x4
8000a92a:	e2 19 08 7c 	andl	r9,0x87c,COH
8000a92e:	f5 e9 10 09 	or	r9,r10,r9
8000a932:	e8 19 11 00 	orl	r9,0x1100
8000a936:	91 09       	st.w	r8[0x0],r9
			64, AVR32_USBB_UECFG0_EPBK_SINGLE);
	udd_allocate_memory(0);
8000a938:	fe 68 01 00 	mov	r8,-130816
8000a93c:	fe 69 01 00 	mov	r9,-130816
8000a940:	72 09       	ld.w	r9,r9[0x0]
8000a942:	a1 b9       	sbr	r9,0x1
8000a944:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
8000a946:	fe 68 00 00 	mov	r8,-131072
8000a94a:	fe 69 00 00 	mov	r9,-131072
8000a94e:	72 79       	ld.w	r9,r9[0x1c]
8000a950:	a1 a9       	sbr	r9,0x0
8000a952:	91 79       	st.w	r8[0x1c],r9

	udd_enable_hs_test_mode();
8000a954:	fe 68 00 00 	mov	r8,-131072
8000a958:	fe 69 00 00 	mov	r9,-131072
8000a95c:	72 09       	ld.w	r9,r9[0x0]
8000a95e:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a962:	ab b9       	sbr	r9,0xb
8000a964:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_packet();
8000a966:	fe 68 00 00 	mov	r8,-131072
8000a96a:	fe 69 00 00 	mov	r9,-131072
8000a96e:	72 09       	ld.w	r9,r9[0x0]
8000a970:	af b9       	sbr	r9,0xf
8000a972:	91 09       	st.w	r8[0x0],r9

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000a974:	fc 18 e0 00 	movh	r8,0xe000
8000a978:	ef 48 ff dc 	st.w	r7[-36],r8
	ptr_src = test_packet;
8000a97c:	ee c8 00 5c 	sub	r8,r7,92
8000a980:	ef 48 ff e0 	st.w	r7[-32],r8

	for (i = 0; i < sizeof(test_packet); i++) {
8000a984:	30 08       	mov	r8,0
8000a986:	ef 68 ff db 	st.b	r7[-37],r8
8000a98a:	c1 68       	rjmp	8000a9b6 <udd_test_mode_packet+0x142>
		*ptr_dest++ = *ptr_src++;
8000a98c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a990:	11 88       	ld.ub	r8,r8[0x0]
8000a992:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000a996:	b2 88       	st.b	r9[0x0],r8
8000a998:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a99c:	2f f8       	sub	r8,-1
8000a99e:	ef 48 ff dc 	st.w	r7[-36],r8
8000a9a2:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a9a6:	2f f8       	sub	r8,-1
8000a9a8:	ef 48 ff e0 	st.w	r7[-32],r8

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
8000a9ac:	ef 38 ff db 	ld.ub	r8,r7[-37]
8000a9b0:	2f f8       	sub	r8,-1
8000a9b2:	ef 68 ff db 	st.b	r7[-37],r8
8000a9b6:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000a9ba:	33 48       	mov	r8,52
8000a9bc:	f0 09 18 00 	cp.b	r9,r8
8000a9c0:	fe 98 ff e6 	brls	8000a98c <udd_test_mode_packet+0x118>
		*ptr_dest++ = *ptr_src++;
	}
	flags = cpu_irq_save();
8000a9c4:	f0 1f 00 0b 	mcall	8000a9f0 <udd_test_mode_packet+0x17c>
8000a9c8:	18 98       	mov	r8,r12
8000a9ca:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_in_send_interrupt(0);
8000a9ce:	fe 68 01 f0 	mov	r8,-130576
8000a9d2:	30 19       	mov	r9,1
8000a9d4:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000a9d6:	ee fc ff e4 	ld.w	r12,r7[-28]
8000a9da:	f0 1f 00 07 	mcall	8000a9f4 <udd_test_mode_packet+0x180>

	udd_ack_in_send(0);
8000a9de:	fe 68 01 60 	mov	r8,-130720
8000a9e2:	30 19       	mov	r9,1
8000a9e4:	91 09       	st.w	r8[0x0],r9
}
8000a9e6:	2e 9d       	sub	sp,-92
8000a9e8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9ec:	80 00       	ld.sh	r0,r0[0x0]
8000a9ee:	f1 ec 80 00 	sthh.w	r0[r0],r8:b,r12:b
8000a9f2:	99 64       	st.w	r12[0x18],r4
8000a9f4:	80 00       	ld.sh	r0,r0[0x0]
8000a9f6:	99 82       	st.w	r12[0x20],r2

8000a9f8 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
8000a9f8:	eb cd 40 80 	pushm	r7,lr
8000a9fc:	1a 97       	mov	r7,sp
8000a9fe:	20 7d       	sub	sp,28
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
8000aa00:	fe 68 00 00 	mov	r8,-131072
8000aa04:	fe 69 00 00 	mov	r9,-131072
8000aa08:	72 09       	ld.w	r9,r9[0x0]
8000aa0a:	e0 19 ff 80 	andl	r9,0xff80
8000aa0e:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000aa10:	fe 68 00 00 	mov	r8,-131072
8000aa14:	fe 69 00 00 	mov	r9,-131072
8000aa18:	72 09       	ld.w	r9,r9[0x0]
8000aa1a:	a7 b9       	sbr	r9,0x7
8000aa1c:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
8000aa1e:	fe 68 01 00 	mov	r8,-130816
8000aa22:	fe 69 01 00 	mov	r9,-130816
8000aa26:	72 09       	ld.w	r9,r9[0x0]
8000aa28:	12 9a       	mov	r10,r9
8000aa2a:	e0 1a e6 83 	andl	r10,0xe683
8000aa2e:	34 09       	mov	r9,64
8000aa30:	ef 49 ff f8 	st.w	r7[-8],r9
8000aa34:	30 89       	mov	r9,8
8000aa36:	ef 49 ff fc 	st.w	r7[-4],r9
8000aa3a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000aa3e:	ee fb ff fc 	ld.w	r11,r7[-4]
8000aa42:	f2 0b 0c 49 	max	r9,r9,r11
8000aa46:	ef 49 ff f4 	st.w	r7[-12],r9
8000aa4a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000aa4e:	ef 49 ff ec 	st.w	r7[-20],r9
8000aa52:	e0 69 04 00 	mov	r9,1024
8000aa56:	ef 49 ff f0 	st.w	r7[-16],r9
8000aa5a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000aa5e:	ee fb ff f0 	ld.w	r11,r7[-16]
8000aa62:	f2 0b 0d 49 	min	r9,r9,r11
8000aa66:	ef 49 ff e8 	st.w	r7[-24],r9
8000aa6a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000aa6e:	a1 79       	lsl	r9,0x1
8000aa70:	20 19       	sub	r9,1
8000aa72:	f2 09 12 00 	clz	r9,r9
8000aa76:	f2 09 11 1c 	rsub	r9,r9,28
8000aa7a:	a5 69       	lsl	r9,0x4
8000aa7c:	e2 19 19 7c 	andl	r9,0x197c,COH
8000aa80:	f5 e9 10 09 	or	r9,r10,r9
8000aa84:	91 09       	st.w	r8[0x0],r9
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
8000aa86:	fe 68 01 00 	mov	r8,-130816
8000aa8a:	fe 69 01 00 	mov	r9,-130816
8000aa8e:	72 09       	ld.w	r9,r9[0x0]
8000aa90:	a1 b9       	sbr	r9,0x1
8000aa92:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
8000aa94:	fe 68 00 00 	mov	r8,-131072
8000aa98:	fe 69 00 00 	mov	r9,-131072
8000aa9c:	72 79       	ld.w	r9,r9[0x1c]
8000aa9e:	a1 a9       	sbr	r9,0x0
8000aaa0:	91 79       	st.w	r8[0x1c],r9
	flags = cpu_irq_save();
8000aaa2:	f0 1f 00 0d 	mcall	8000aad4 <udd_reset_ep_ctrl+0xdc>
8000aaa6:	18 98       	mov	r8,r12
8000aaa8:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_setup_received_interrupt(0);
8000aaac:	fe 68 01 f0 	mov	r8,-130576
8000aab0:	30 49       	mov	r9,4
8000aab2:	91 09       	st.w	r8[0x0],r9
	udd_enable_out_received_interrupt(0);
8000aab4:	fe 68 01 f0 	mov	r8,-130576
8000aab8:	30 29       	mov	r9,2
8000aaba:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint_interrupt(0);
8000aabc:	fe 68 00 00 	mov	r8,-131072
8000aac0:	e0 69 10 00 	mov	r9,4096
8000aac4:	91 69       	st.w	r8[0x18],r9
	cpu_irq_restore(flags);
8000aac6:	ee fc ff e4 	ld.w	r12,r7[-28]
8000aaca:	f0 1f 00 04 	mcall	8000aad8 <udd_reset_ep_ctrl+0xe0>
}
8000aace:	2f 9d       	sub	sp,-28
8000aad0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aad4:	80 00       	ld.sh	r0,r0[0x0]
8000aad6:	99 64       	st.w	r12[0x18],r4
8000aad8:	80 00       	ld.sh	r0,r0[0x0]
8000aada:	99 82       	st.w	r12[0x20],r2

8000aadc <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
8000aadc:	eb cd 40 80 	pushm	r7,lr
8000aae0:	1a 97       	mov	r7,sp
8000aae2:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
8000aae4:	f0 1f 00 10 	mcall	8000ab24 <udd_ctrl_init+0x48>
8000aae8:	18 98       	mov	r8,r12
8000aaea:	ef 48 ff fc 	st.w	r7[-4],r8
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
8000aaee:	fe 68 02 20 	mov	r8,-130528
8000aaf2:	30 19       	mov	r9,1
8000aaf4:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000aaf6:	ee fc ff fc 	ld.w	r12,r7[-4]
8000aafa:	f0 1f 00 0c 	mcall	8000ab28 <udd_ctrl_init+0x4c>

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
8000aafe:	fe 68 01 60 	mov	r8,-130720
8000ab02:	30 29       	mov	r9,2
8000ab04:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
8000ab06:	48 a8       	lddpc	r8,8000ab2c <udd_ctrl_init+0x50>
8000ab08:	30 09       	mov	r9,0
8000ab0a:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000ab0c:	48 88       	lddpc	r8,8000ab2c <udd_ctrl_init+0x50>
8000ab0e:	30 09       	mov	r9,0
8000ab10:	91 59       	st.w	r8[0x14],r9
	udd_g_ctrlreq.payload_size = 0;
8000ab12:	48 79       	lddpc	r9,8000ab2c <udd_ctrl_init+0x50>
8000ab14:	30 08       	mov	r8,0
8000ab16:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
8000ab18:	48 68       	lddpc	r8,8000ab30 <udd_ctrl_init+0x54>
8000ab1a:	30 09       	mov	r9,0
8000ab1c:	91 09       	st.w	r8[0x0],r9
}
8000ab1e:	2f fd       	sub	sp,-4
8000ab20:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab24:	80 00       	ld.sh	r0,r0[0x0]
8000ab26:	99 64       	st.w	r12[0x18],r4
8000ab28:	80 00       	ld.sh	r0,r0[0x0]
8000ab2a:	99 82       	st.w	r12[0x20],r2
8000ab2c:	00 00       	add	r0,r0
8000ab2e:	0d e4       	ld.ub	r4,r6[0x6]
8000ab30:	00 00       	add	r0,r0
8000ab32:	07 b8       	ld.ub	r8,r3[0x3]

8000ab34 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
8000ab34:	eb cd 40 80 	pushm	r7,lr
8000ab38:	1a 97       	mov	r7,sp
8000ab3a:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
8000ab3c:	4c b8       	lddpc	r8,8000ac68 <udd_ctrl_setup_received+0x134>
8000ab3e:	70 08       	ld.w	r8,r8[0x0]
8000ab40:	58 08       	cp.w	r8,0
8000ab42:	c0 50       	breq	8000ab4c <udd_ctrl_setup_received+0x18>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
8000ab44:	f0 1f 00 4a 	mcall	8000ac6c <udd_ctrl_setup_received+0x138>

		// Reinitializes control endpoint management
		udd_ctrl_init();
8000ab48:	f0 1f 00 4a 	mcall	8000ac70 <udd_ctrl_setup_received+0x13c>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
8000ab4c:	fe 68 01 30 	mov	r8,-130768
8000ab50:	70 08       	ld.w	r8,r8[0x0]
8000ab52:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000ab56:	b5 88       	lsr	r8,0x14
8000ab58:	58 88       	cp.w	r8,8
8000ab5a:	c0 80       	breq	8000ab6a <udd_ctrl_setup_received+0x36>
		udd_ctrl_stall_data();
8000ab5c:	f0 1f 00 46 	mcall	8000ac74 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
8000ab60:	fe 68 01 60 	mov	r8,-130720
8000ab64:	30 49       	mov	r9,4
8000ab66:	91 09       	st.w	r8[0x0],r9
		return; // Error data number doesn't correspond to SETUP packet
8000ab68:	c7 d8       	rjmp	8000ac62 <udd_ctrl_setup_received+0x12e>
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
8000ab6a:	fc 18 e0 00 	movh	r8,0xe000
8000ab6e:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < 8; i++) {
8000ab72:	30 08       	mov	r8,0
8000ab74:	ef 68 ff fb 	st.b	r7[-5],r8
8000ab78:	c1 38       	rjmp	8000ab9e <udd_ctrl_setup_received+0x6a>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
8000ab7a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000ab7e:	4b f8       	lddpc	r8,8000ac78 <udd_ctrl_setup_received+0x144>
8000ab80:	10 09       	add	r9,r8
8000ab82:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab86:	11 88       	ld.ub	r8,r8[0x0]
8000ab88:	b2 88       	st.b	r9[0x0],r8
8000ab8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab8e:	2f f8       	sub	r8,-1
8000ab90:	ef 48 ff fc 	st.w	r7[-4],r8
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
8000ab94:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000ab98:	2f f8       	sub	r8,-1
8000ab9a:	ef 68 ff fb 	st.b	r7[-5],r8
8000ab9e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000aba2:	30 78       	mov	r8,7
8000aba4:	f0 09 18 00 	cp.b	r9,r8
8000aba8:	fe 98 ff e9 	brls	8000ab7a <udd_ctrl_setup_received+0x46>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
8000abac:	4b 38       	lddpc	r8,8000ac78 <udd_ctrl_setup_received+0x144>
8000abae:	90 18       	ld.sh	r8,r8[0x2]
8000abb0:	5c 88       	casts.h	r8
8000abb2:	5c c8       	swap.bh	r8
8000abb4:	5c 88       	casts.h	r8
8000abb6:	4b 19       	lddpc	r9,8000ac78 <udd_ctrl_setup_received+0x144>
8000abb8:	b2 18       	st.h	r9[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
8000abba:	4b 08       	lddpc	r8,8000ac78 <udd_ctrl_setup_received+0x144>
8000abbc:	90 28       	ld.sh	r8,r8[0x4]
8000abbe:	5c 88       	casts.h	r8
8000abc0:	5c c8       	swap.bh	r8
8000abc2:	5c 88       	casts.h	r8
8000abc4:	4a d9       	lddpc	r9,8000ac78 <udd_ctrl_setup_received+0x144>
8000abc6:	b2 28       	st.h	r9[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
8000abc8:	4a c8       	lddpc	r8,8000ac78 <udd_ctrl_setup_received+0x144>
8000abca:	90 38       	ld.sh	r8,r8[0x6]
8000abcc:	5c 88       	casts.h	r8
8000abce:	5c c8       	swap.bh	r8
8000abd0:	5c 88       	casts.h	r8
8000abd2:	4a a9       	lddpc	r9,8000ac78 <udd_ctrl_setup_received+0x144>
8000abd4:	b2 38       	st.h	r9[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
8000abd6:	f0 1f 00 2a 	mcall	8000ac7c <udd_ctrl_setup_received+0x148>
8000abda:	18 98       	mov	r8,r12
8000abdc:	ec 18 00 01 	eorl	r8,0x1
8000abe0:	5c 58       	castu.b	r8
8000abe2:	c0 80       	breq	8000abf2 <udd_ctrl_setup_received+0xbe>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
8000abe4:	f0 1f 00 24 	mcall	8000ac74 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
8000abe8:	fe 68 01 60 	mov	r8,-130720
8000abec:	30 49       	mov	r9,4
8000abee:	91 09       	st.w	r8[0x0],r9
		return;
8000abf0:	c3 98       	rjmp	8000ac62 <udd_ctrl_setup_received+0x12e>
	}
	udd_ack_setup_received(0);
8000abf2:	fe 68 01 60 	mov	r8,-130720
8000abf6:	30 49       	mov	r9,4
8000abf8:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
8000abfa:	4a 08       	lddpc	r8,8000ac78 <udd_ctrl_setup_received+0x144>
8000abfc:	11 88       	ld.ub	r8,r8[0x0]
8000abfe:	10 99       	mov	r9,r8
8000ac00:	30 08       	mov	r8,0
8000ac02:	f0 09 18 00 	cp.b	r9,r8
8000ac06:	c0 d4       	brge	8000ac20 <udd_ctrl_setup_received+0xec>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
8000ac08:	49 e9       	lddpc	r9,8000ac80 <udd_ctrl_setup_received+0x14c>
8000ac0a:	30 08       	mov	r8,0
8000ac0c:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000ac0e:	49 e9       	lddpc	r9,8000ac84 <udd_ctrl_setup_received+0x150>
8000ac10:	30 08       	mov	r8,0
8000ac12:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
8000ac14:	49 58       	lddpc	r8,8000ac68 <udd_ctrl_setup_received+0x134>
8000ac16:	30 29       	mov	r9,2
8000ac18:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
8000ac1a:	f0 1f 00 1c 	mcall	8000ac88 <udd_ctrl_setup_received+0x154>
8000ac1e:	c2 28       	rjmp	8000ac62 <udd_ctrl_setup_received+0x12e>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
8000ac20:	49 68       	lddpc	r8,8000ac78 <udd_ctrl_setup_received+0x144>
8000ac22:	90 38       	ld.sh	r8,r8[0x6]
8000ac24:	58 08       	cp.w	r8,0
8000ac26:	c0 41       	brne	8000ac2e <udd_ctrl_setup_received+0xfa>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
8000ac28:	f0 1f 00 19 	mcall	8000ac8c <udd_ctrl_setup_received+0x158>
			return;
8000ac2c:	c1 b8       	rjmp	8000ac62 <udd_ctrl_setup_received+0x12e>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
8000ac2e:	49 59       	lddpc	r9,8000ac80 <udd_ctrl_setup_received+0x14c>
8000ac30:	30 08       	mov	r8,0
8000ac32:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000ac34:	49 49       	lddpc	r9,8000ac84 <udd_ctrl_setup_received+0x150>
8000ac36:	30 08       	mov	r8,0
8000ac38:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
8000ac3a:	48 c8       	lddpc	r8,8000ac68 <udd_ctrl_setup_received+0x134>
8000ac3c:	30 19       	mov	r9,1
8000ac3e:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
8000ac40:	fe 68 01 60 	mov	r8,-130720
8000ac44:	31 09       	mov	r9,16
8000ac46:	91 09       	st.w	r8[0x0],r9
		flags = cpu_irq_save();
8000ac48:	f0 1f 00 12 	mcall	8000ac90 <udd_ctrl_setup_received+0x15c>
8000ac4c:	18 98       	mov	r8,r12
8000ac4e:	ef 48 ff f4 	st.w	r7[-12],r8
		udd_enable_nak_in_interrupt(0);
8000ac52:	fe 68 01 f0 	mov	r8,-130576
8000ac56:	31 09       	mov	r9,16
8000ac58:	91 09       	st.w	r8[0x0],r9
		cpu_irq_restore(flags);
8000ac5a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000ac5e:	f0 1f 00 0e 	mcall	8000ac94 <udd_ctrl_setup_received+0x160>
	}
}
8000ac62:	2f dd       	sub	sp,-12
8000ac64:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac68:	00 00       	add	r0,r0
8000ac6a:	07 b8       	ld.ub	r8,r3[0x3]
8000ac6c:	80 00       	ld.sh	r0,r0[0x0]
8000ac6e:	b1 5c       	asr	r12,0x11
8000ac70:	80 00       	ld.sh	r0,r0[0x0]
8000ac72:	aa dc       	st.b	r5[0x5],r12
8000ac74:	80 00       	ld.sh	r0,r0[0x0]
8000ac76:	b0 a4       	st.b	r8[0x2],r4
8000ac78:	00 00       	add	r0,r0
8000ac7a:	0d e4       	ld.ub	r4,r6[0x6]
8000ac7c:	80 00       	ld.sh	r0,r0[0x0]
8000ac7e:	df 34       	*unknown*
8000ac80:	00 00       	add	r0,r0
8000ac82:	07 bc       	ld.ub	r12,r3[0x3]
8000ac84:	00 00       	add	r0,r0
8000ac86:	07 be       	ld.ub	lr,r3[0x3]
8000ac88:	80 00       	ld.sh	r0,r0[0x0]
8000ac8a:	ac 98       	st.b	r6[0x1],r8
8000ac8c:	80 00       	ld.sh	r0,r0[0x0]
8000ac8e:	b0 c4       	st.b	r8[0x4],r4
8000ac90:	80 00       	ld.sh	r0,r0[0x0]
8000ac92:	99 64       	st.w	r12[0x18],r4
8000ac94:	80 00       	ld.sh	r0,r0[0x0]
8000ac96:	99 82       	st.w	r12[0x20],r2

8000ac98 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
8000ac98:	eb cd 40 80 	pushm	r7,lr
8000ac9c:	1a 97       	mov	r7,sp
8000ac9e:	20 4d       	sub	sp,16
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
8000aca0:	f0 1f 00 5c 	mcall	8000ae10 <udd_ctrl_in_sent+0x178>
8000aca4:	18 98       	mov	r8,r12
8000aca6:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_disable_in_send_interrupt(0);
8000acaa:	fe 68 02 20 	mov	r8,-130528
8000acae:	30 19       	mov	r9,1
8000acb0:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000acb2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000acb6:	f0 1f 00 58 	mcall	8000ae14 <udd_ctrl_in_sent+0x17c>

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000acba:	4d 88       	lddpc	r8,8000ae18 <udd_ctrl_in_sent+0x180>
8000acbc:	70 08       	ld.w	r8,r8[0x0]
8000acbe:	58 38       	cp.w	r8,3
8000acc0:	c0 61       	brne	8000accc <udd_ctrl_in_sent+0x34>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
8000acc2:	f0 1f 00 57 	mcall	8000ae1c <udd_ctrl_in_sent+0x184>
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000acc6:	f0 1f 00 57 	mcall	8000ae20 <udd_ctrl_in_sent+0x188>
		return;
8000acca:	c9 f8       	rjmp	8000ae08 <udd_ctrl_in_sent+0x170>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000accc:	4d 68       	lddpc	r8,8000ae24 <udd_ctrl_in_sent+0x18c>
8000acce:	90 69       	ld.sh	r9,r8[0xc]
8000acd0:	4d 68       	lddpc	r8,8000ae28 <udd_ctrl_in_sent+0x190>
8000acd2:	90 08       	ld.sh	r8,r8[0x0]
8000acd4:	10 19       	sub	r9,r8
8000acd6:	ef 59 ff f0 	st.h	r7[-16],r9
	if (0 == nb_remain) {
8000acda:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000acde:	30 08       	mov	r8,0
8000ace0:	f0 09 19 00 	cp.h	r9,r8
8000ace4:	c2 b1       	brne	8000ad3a <udd_ctrl_in_sent+0xa2>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000ace6:	4d 28       	lddpc	r8,8000ae2c <udd_ctrl_in_sent+0x194>
8000ace8:	90 09       	ld.sh	r9,r8[0x0]
8000acea:	4d 08       	lddpc	r8,8000ae28 <udd_ctrl_in_sent+0x190>
8000acec:	90 08       	ld.sh	r8,r8[0x0]
8000acee:	f2 08 00 08 	add	r8,r9,r8
8000acf2:	5c 88       	casts.h	r8
8000acf4:	4c e9       	lddpc	r9,8000ae2c <udd_ctrl_in_sent+0x194>
8000acf6:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
8000acf8:	4c b8       	lddpc	r8,8000ae24 <udd_ctrl_in_sent+0x18c>
8000acfa:	90 39       	ld.sh	r9,r8[0x6]
8000acfc:	4c c8       	lddpc	r8,8000ae2c <udd_ctrl_in_sent+0x194>
8000acfe:	90 08       	ld.sh	r8,r8[0x0]
8000ad00:	f0 09 19 00 	cp.h	r9,r8
8000ad04:	c0 50       	breq	8000ad0e <udd_ctrl_in_sent+0x76>
8000ad06:	4c b8       	lddpc	r8,8000ae30 <udd_ctrl_in_sent+0x198>
8000ad08:	11 88       	ld.ub	r8,r8[0x0]
8000ad0a:	58 08       	cp.w	r8,0
8000ad0c:	c0 40       	breq	8000ad14 <udd_ctrl_in_sent+0x7c>
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
8000ad0e:	f0 1f 00 4a 	mcall	8000ae34 <udd_ctrl_in_sent+0x19c>
			return;
8000ad12:	c7 b8       	rjmp	8000ae08 <udd_ctrl_in_sent+0x170>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
8000ad14:	4c 48       	lddpc	r8,8000ae24 <udd_ctrl_in_sent+0x18c>
8000ad16:	70 58       	ld.w	r8,r8[0x14]
8000ad18:	58 08       	cp.w	r8,0
8000ad1a:	c1 00       	breq	8000ad3a <udd_ctrl_in_sent+0xa2>
8000ad1c:	4c 28       	lddpc	r8,8000ae24 <udd_ctrl_in_sent+0x18c>
8000ad1e:	70 58       	ld.w	r8,r8[0x14]
8000ad20:	5d 18       	icall	r8
8000ad22:	18 98       	mov	r8,r12
8000ad24:	ec 18 00 01 	eorl	r8,0x1
8000ad28:	5c 58       	castu.b	r8
8000ad2a:	c0 81       	brne	8000ad3a <udd_ctrl_in_sent+0xa2>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
8000ad2c:	4b f9       	lddpc	r9,8000ae28 <udd_ctrl_in_sent+0x190>
8000ad2e:	30 08       	mov	r8,0
8000ad30:	b2 08       	st.h	r9[0x0],r8
			nb_remain = udd_g_ctrlreq.payload_size;
8000ad32:	4b d8       	lddpc	r8,8000ae24 <udd_ctrl_in_sent+0x18c>
8000ad34:	90 68       	ld.sh	r8,r8[0xc]
8000ad36:	ef 58 ff f0 	st.h	r7[-16],r8
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
8000ad3a:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ad3e:	33 f8       	mov	r8,63
8000ad40:	f0 09 19 00 	cp.h	r9,r8
8000ad44:	e0 88 00 09 	brls	8000ad56 <udd_ctrl_in_sent+0xbe>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
8000ad48:	34 08       	mov	r8,64
8000ad4a:	ef 58 ff f0 	st.h	r7[-16],r8
		b_shortpacket = false;
8000ad4e:	4b 99       	lddpc	r9,8000ae30 <udd_ctrl_in_sent+0x198>
8000ad50:	30 08       	mov	r8,0
8000ad52:	b2 88       	st.b	r9[0x0],r8
8000ad54:	c0 48       	rjmp	8000ad5c <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
8000ad56:	4b 79       	lddpc	r9,8000ae30 <udd_ctrl_in_sent+0x198>
8000ad58:	30 18       	mov	r8,1
8000ad5a:	b2 88       	st.b	r9[0x0],r8
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000ad5c:	fc 18 e0 00 	movh	r8,0xe000
8000ad60:	ef 48 ff f4 	st.w	r7[-12],r8
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000ad64:	4b 08       	lddpc	r8,8000ae24 <udd_ctrl_in_sent+0x18c>
8000ad66:	70 29       	ld.w	r9,r8[0x8]
8000ad68:	4b 08       	lddpc	r8,8000ae28 <udd_ctrl_in_sent+0x190>
8000ad6a:	90 08       	ld.sh	r8,r8[0x0]
8000ad6c:	5c 78       	castu.h	r8
8000ad6e:	f2 08 00 08 	add	r8,r9,r8
8000ad72:	ef 48 ff f8 	st.w	r7[-8],r8
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
8000ad76:	f0 1f 00 27 	mcall	8000ae10 <udd_ctrl_in_sent+0x178>
8000ad7a:	18 98       	mov	r8,r12
8000ad7c:	ef 48 ff fc 	st.w	r7[-4],r8
	if (Is_udd_out_received(0)) {
8000ad80:	fe 68 01 30 	mov	r8,-130768
8000ad84:	70 08       	ld.w	r8,r8[0x0]
8000ad86:	e2 18 00 02 	andl	r8,0x2,COH
8000ad8a:	c0 90       	breq	8000ad9c <udd_ctrl_in_sent+0x104>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
8000ad8c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ad90:	f0 1f 00 21 	mcall	8000ae14 <udd_ctrl_in_sent+0x17c>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000ad94:	4a 18       	lddpc	r8,8000ae18 <udd_ctrl_in_sent+0x180>
8000ad96:	30 49       	mov	r9,4
8000ad98:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
8000ad9a:	c3 78       	rjmp	8000ae08 <udd_ctrl_in_sent+0x170>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000ad9c:	30 08       	mov	r8,0
8000ad9e:	ef 68 ff f3 	st.b	r7[-13],r8
8000ada2:	c1 68       	rjmp	8000adce <udd_ctrl_in_sent+0x136>
		*ptr_dest++ = *ptr_src++;
8000ada4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ada8:	11 88       	ld.ub	r8,r8[0x0]
8000adaa:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000adae:	b2 88       	st.b	r9[0x0],r8
8000adb0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000adb4:	2f f8       	sub	r8,-1
8000adb6:	ef 48 ff f4 	st.w	r7[-12],r8
8000adba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000adbe:	2f f8       	sub	r8,-1
8000adc0:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000adc4:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000adc8:	2f f8       	sub	r8,-1
8000adca:	ef 68 ff f3 	st.b	r7[-13],r8
8000adce:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000add2:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000add6:	f0 09 19 00 	cp.h	r9,r8
8000adda:	fe 9b ff e5 	brhi	8000ada4 <udd_ctrl_in_sent+0x10c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
8000adde:	49 38       	lddpc	r8,8000ae28 <udd_ctrl_in_sent+0x190>
8000ade0:	90 08       	ld.sh	r8,r8[0x0]
8000ade2:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ade6:	f2 08 00 08 	add	r8,r9,r8
8000adea:	5c 88       	casts.h	r8
8000adec:	48 f9       	lddpc	r9,8000ae28 <udd_ctrl_in_sent+0x190>
8000adee:	b2 08       	st.h	r9[0x0],r8

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
8000adf0:	fe 68 01 60 	mov	r8,-130720
8000adf4:	30 19       	mov	r9,1
8000adf6:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
8000adf8:	fe 68 01 f0 	mov	r8,-130576
8000adfc:	30 19       	mov	r9,1
8000adfe:	91 09       	st.w	r8[0x0],r9
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
8000ae00:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ae04:	f0 1f 00 04 	mcall	8000ae14 <udd_ctrl_in_sent+0x17c>
}
8000ae08:	2f cd       	sub	sp,-16
8000ae0a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ae0e:	00 00       	add	r0,r0
8000ae10:	80 00       	ld.sh	r0,r0[0x0]
8000ae12:	99 64       	st.w	r12[0x18],r4
8000ae14:	80 00       	ld.sh	r0,r0[0x0]
8000ae16:	99 82       	st.w	r12[0x20],r2
8000ae18:	00 00       	add	r0,r0
8000ae1a:	07 b8       	ld.ub	r8,r3[0x3]
8000ae1c:	80 00       	ld.sh	r0,r0[0x0]
8000ae1e:	b1 5c       	asr	r12,0x11
8000ae20:	80 00       	ld.sh	r0,r0[0x0]
8000ae22:	aa dc       	st.b	r5[0x5],r12
8000ae24:	00 00       	add	r0,r0
8000ae26:	0d e4       	ld.ub	r4,r6[0x6]
8000ae28:	00 00       	add	r0,r0
8000ae2a:	07 be       	ld.ub	lr,r3[0x3]
8000ae2c:	00 00       	add	r0,r0
8000ae2e:	07 bc       	ld.ub	r12,r3[0x3]
8000ae30:	00 00       	add	r0,r0
8000ae32:	07 e8       	ld.ub	r8,r3[0x6]
8000ae34:	80 00       	ld.sh	r0,r0[0x0]
8000ae36:	b1 18       	ld.d	r8,--r8

8000ae38 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
8000ae38:	eb cd 40 80 	pushm	r7,lr
8000ae3c:	1a 97       	mov	r7,sp
8000ae3e:	20 4d       	sub	sp,16
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
8000ae40:	4f 18       	lddpc	r8,8000b004 <udd_ctrl_out_received+0x1cc>
8000ae42:	70 08       	ld.w	r8,r8[0x0]
8000ae44:	58 18       	cp.w	r8,1
8000ae46:	c1 10       	breq	8000ae68 <udd_ctrl_out_received+0x30>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000ae48:	4e f8       	lddpc	r8,8000b004 <udd_ctrl_out_received+0x1cc>
8000ae4a:	70 08       	ld.w	r8,r8[0x0]
8000ae4c:	58 28       	cp.w	r8,2
8000ae4e:	c0 50       	breq	8000ae58 <udd_ctrl_out_received+0x20>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
8000ae50:	4e d8       	lddpc	r8,8000b004 <udd_ctrl_out_received+0x1cc>
8000ae52:	70 08       	ld.w	r8,r8[0x0]
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000ae54:	58 48       	cp.w	r8,4
8000ae56:	c0 41       	brne	8000ae5e <udd_ctrl_out_received+0x26>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
8000ae58:	f0 1f 00 6c 	mcall	8000b008 <udd_ctrl_out_received+0x1d0>
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000ae5c:	c0 38       	rjmp	8000ae62 <udd_ctrl_out_received+0x2a>
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
8000ae5e:	f0 1f 00 6c 	mcall	8000b00c <udd_ctrl_out_received+0x1d4>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000ae62:	f0 1f 00 6c 	mcall	8000b010 <udd_ctrl_out_received+0x1d8>
		return;
8000ae66:	cc b8       	rjmp	8000affc <udd_ctrl_out_received+0x1c4>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
8000ae68:	fe 68 01 30 	mov	r8,-130768
8000ae6c:	70 08       	ld.w	r8,r8[0x0]
8000ae6e:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000ae72:	b5 88       	lsr	r8,0x14
8000ae74:	ef 58 ff f6 	st.h	r7[-10],r8
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
8000ae78:	4e 78       	lddpc	r8,8000b014 <udd_ctrl_out_received+0x1dc>
8000ae7a:	90 68       	ld.sh	r8,r8[0xc]
8000ae7c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000ae80:	4e 68       	lddpc	r8,8000b018 <udd_ctrl_out_received+0x1e0>
8000ae82:	90 08       	ld.sh	r8,r8[0x0]
8000ae84:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000ae88:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000ae8c:	f4 08 00 08 	add	r8,r10,r8
8000ae90:	10 39       	cp.w	r9,r8
8000ae92:	c0 84       	brge	8000aea2 <udd_ctrl_out_received+0x6a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
8000ae94:	4e 08       	lddpc	r8,8000b014 <udd_ctrl_out_received+0x1dc>
8000ae96:	90 69       	ld.sh	r9,r8[0xc]
8000ae98:	4e 08       	lddpc	r8,8000b018 <udd_ctrl_out_received+0x1e0>
8000ae9a:	90 08       	ld.sh	r8,r8[0x0]
8000ae9c:	10 19       	sub	r9,r8
8000ae9e:	ef 59 ff f6 	st.h	r7[-10],r9
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
8000aea2:	fc 18 e0 00 	movh	r8,0xe000
8000aea6:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000aeaa:	4d b8       	lddpc	r8,8000b014 <udd_ctrl_out_received+0x1dc>
8000aeac:	70 29       	ld.w	r9,r8[0x8]
8000aeae:	4d b8       	lddpc	r8,8000b018 <udd_ctrl_out_received+0x1e0>
8000aeb0:	90 08       	ld.sh	r8,r8[0x0]
8000aeb2:	5c 78       	castu.h	r8
8000aeb4:	f2 08 00 08 	add	r8,r9,r8
8000aeb8:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < nb_data; i++) {
8000aebc:	30 08       	mov	r8,0
8000aebe:	ef 68 ff f5 	st.b	r7[-11],r8
8000aec2:	c1 68       	rjmp	8000aeee <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = *ptr_src++;
8000aec4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aec8:	11 88       	ld.ub	r8,r8[0x0]
8000aeca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aece:	b2 88       	st.b	r9[0x0],r8
8000aed0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aed4:	2f f8       	sub	r8,-1
8000aed6:	ef 48 ff fc 	st.w	r7[-4],r8
8000aeda:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aede:	2f f8       	sub	r8,-1
8000aee0:	ef 48 ff f8 	st.w	r7[-8],r8
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
8000aee4:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000aee8:	2f f8       	sub	r8,-1
8000aeea:	ef 68 ff f5 	st.b	r7[-11],r8
8000aeee:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000aef2:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000aef6:	f0 09 19 00 	cp.h	r9,r8
8000aefa:	fe 9b ff e5 	brhi	8000aec4 <udd_ctrl_out_received+0x8c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
8000aefe:	4c 78       	lddpc	r8,8000b018 <udd_ctrl_out_received+0x1e0>
8000af00:	90 08       	ld.sh	r8,r8[0x0]
8000af02:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000af06:	f2 08 00 08 	add	r8,r9,r8
8000af0a:	5c 88       	casts.h	r8
8000af0c:	4c 39       	lddpc	r9,8000b018 <udd_ctrl_out_received+0x1e0>
8000af0e:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000af10:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000af14:	34 08       	mov	r8,64
8000af16:	f0 09 19 00 	cp.h	r9,r8
8000af1a:	c1 11       	brne	8000af3c <udd_ctrl_out_received+0x104>
			|| (udd_g_ctrlreq.req.wLength <=
8000af1c:	4b e8       	lddpc	r8,8000b014 <udd_ctrl_out_received+0x1dc>
8000af1e:	90 38       	ld.sh	r8,r8[0x6]
8000af20:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
					(udd_ctrl_prev_payload_nb_trans +
8000af24:	4b e8       	lddpc	r8,8000b01c <udd_ctrl_out_received+0x1e4>
8000af26:	90 08       	ld.sh	r8,r8[0x0]
8000af28:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000af2c:	4b b8       	lddpc	r8,8000b018 <udd_ctrl_out_received+0x1e0>
8000af2e:	90 08       	ld.sh	r8,r8[0x0]
8000af30:	5c 78       	castu.h	r8
8000af32:	f4 08 00 08 	add	r8,r10,r8
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000af36:	10 39       	cp.w	r9,r8
8000af38:	e0 89 00 20 	brgt	8000af78 <udd_ctrl_out_received+0x140>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
8000af3c:	4b 78       	lddpc	r8,8000b018 <udd_ctrl_out_received+0x1e0>
8000af3e:	90 08       	ld.sh	r8,r8[0x0]
8000af40:	4b 59       	lddpc	r9,8000b014 <udd_ctrl_out_received+0x1dc>
8000af42:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
8000af44:	4b 48       	lddpc	r8,8000b014 <udd_ctrl_out_received+0x1dc>
8000af46:	70 58       	ld.w	r8,r8[0x14]
8000af48:	58 08       	cp.w	r8,0
8000af4a:	c1 00       	breq	8000af6a <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
8000af4c:	4b 28       	lddpc	r8,8000b014 <udd_ctrl_out_received+0x1dc>
8000af4e:	70 58       	ld.w	r8,r8[0x14]
8000af50:	5d 18       	icall	r8
8000af52:	18 98       	mov	r8,r12
8000af54:	ec 18 00 01 	eorl	r8,0x1
8000af58:	5c 58       	castu.b	r8
8000af5a:	c0 80       	breq	8000af6a <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
8000af5c:	f0 1f 00 2c 	mcall	8000b00c <udd_ctrl_out_received+0x1d4>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
8000af60:	fe 68 01 60 	mov	r8,-130720
8000af64:	30 29       	mov	r9,2
8000af66:	91 09       	st.w	r8[0x0],r9
				return;
8000af68:	c4 a8       	rjmp	8000affc <udd_ctrl_out_received+0x1c4>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
8000af6a:	fe 68 01 60 	mov	r8,-130720
8000af6e:	30 29       	mov	r9,2
8000af70:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
8000af72:	f0 1f 00 2c 	mcall	8000b020 <udd_ctrl_out_received+0x1e8>
		return;
8000af76:	c4 38       	rjmp	8000affc <udd_ctrl_out_received+0x1c4>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
8000af78:	4a 78       	lddpc	r8,8000b014 <udd_ctrl_out_received+0x1dc>
8000af7a:	90 69       	ld.sh	r9,r8[0xc]
8000af7c:	4a 78       	lddpc	r8,8000b018 <udd_ctrl_out_received+0x1e0>
8000af7e:	90 08       	ld.sh	r8,r8[0x0]
8000af80:	f0 09 19 00 	cp.h	r9,r8
8000af84:	c2 71       	brne	8000afd2 <udd_ctrl_out_received+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
8000af86:	4a 48       	lddpc	r8,8000b014 <udd_ctrl_out_received+0x1dc>
8000af88:	70 58       	ld.w	r8,r8[0x14]
8000af8a:	58 08       	cp.w	r8,0
8000af8c:	c0 81       	brne	8000af9c <udd_ctrl_out_received+0x164>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
8000af8e:	f0 1f 00 20 	mcall	8000b00c <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000af92:	fe 68 01 60 	mov	r8,-130720
8000af96:	30 29       	mov	r9,2
8000af98:	91 09       	st.w	r8[0x0],r9
			return;
8000af9a:	c3 18       	rjmp	8000affc <udd_ctrl_out_received+0x1c4>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
8000af9c:	49 e8       	lddpc	r8,8000b014 <udd_ctrl_out_received+0x1dc>
8000af9e:	70 58       	ld.w	r8,r8[0x14]
8000afa0:	5d 18       	icall	r8
8000afa2:	18 98       	mov	r8,r12
8000afa4:	ec 18 00 01 	eorl	r8,0x1
8000afa8:	5c 58       	castu.b	r8
8000afaa:	c0 80       	breq	8000afba <udd_ctrl_out_received+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
8000afac:	f0 1f 00 18 	mcall	8000b00c <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000afb0:	fe 68 01 60 	mov	r8,-130720
8000afb4:	30 29       	mov	r9,2
8000afb6:	91 09       	st.w	r8[0x0],r9
			return;
8000afb8:	c2 28       	rjmp	8000affc <udd_ctrl_out_received+0x1c4>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000afba:	49 98       	lddpc	r8,8000b01c <udd_ctrl_out_received+0x1e4>
8000afbc:	90 09       	ld.sh	r9,r8[0x0]
8000afbe:	49 78       	lddpc	r8,8000b018 <udd_ctrl_out_received+0x1e0>
8000afc0:	90 08       	ld.sh	r8,r8[0x0]
8000afc2:	f2 08 00 08 	add	r8,r9,r8
8000afc6:	5c 88       	casts.h	r8
8000afc8:	49 59       	lddpc	r9,8000b01c <udd_ctrl_out_received+0x1e4>
8000afca:	b2 08       	st.h	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
8000afcc:	49 39       	lddpc	r9,8000b018 <udd_ctrl_out_received+0x1e0>
8000afce:	30 08       	mov	r8,0
8000afd0:	b2 08       	st.h	r9[0x0],r8
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
8000afd2:	fe 68 01 60 	mov	r8,-130720
8000afd6:	30 29       	mov	r9,2
8000afd8:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
8000afda:	fe 68 01 60 	mov	r8,-130720
8000afde:	31 09       	mov	r9,16
8000afe0:	91 09       	st.w	r8[0x0],r9
	flags = cpu_irq_save();
8000afe2:	f0 1f 00 11 	mcall	8000b024 <udd_ctrl_out_received+0x1ec>
8000afe6:	18 98       	mov	r8,r12
8000afe8:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_enable_nak_in_interrupt(0);
8000afec:	fe 68 01 f0 	mov	r8,-130576
8000aff0:	31 09       	mov	r9,16
8000aff2:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000aff4:	ee fc ff f0 	ld.w	r12,r7[-16]
8000aff8:	f0 1f 00 0c 	mcall	8000b028 <udd_ctrl_out_received+0x1f0>
}
8000affc:	2f cd       	sub	sp,-16
8000affe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b002:	00 00       	add	r0,r0
8000b004:	00 00       	add	r0,r0
8000b006:	07 b8       	ld.ub	r8,r3[0x3]
8000b008:	80 00       	ld.sh	r0,r0[0x0]
8000b00a:	b1 5c       	asr	r12,0x11
8000b00c:	80 00       	ld.sh	r0,r0[0x0]
8000b00e:	b0 a4       	st.b	r8[0x2],r4
8000b010:	80 00       	ld.sh	r0,r0[0x0]
8000b012:	aa dc       	st.b	r5[0x5],r12
8000b014:	00 00       	add	r0,r0
8000b016:	0d e4       	ld.ub	r4,r6[0x6]
8000b018:	00 00       	add	r0,r0
8000b01a:	07 be       	ld.ub	lr,r3[0x3]
8000b01c:	00 00       	add	r0,r0
8000b01e:	07 bc       	ld.ub	r12,r3[0x3]
8000b020:	80 00       	ld.sh	r0,r0[0x0]
8000b022:	b0 c4       	st.b	r8[0x4],r4
8000b024:	80 00       	ld.sh	r0,r0[0x0]
8000b026:	99 64       	st.w	r12[0x18],r4
8000b028:	80 00       	ld.sh	r0,r0[0x0]
8000b02a:	99 82       	st.w	r12[0x20],r2

8000b02c <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
8000b02c:	eb cd 40 80 	pushm	r7,lr
8000b030:	1a 97       	mov	r7,sp
	if (Is_udd_out_received(0))
8000b032:	fe 68 01 30 	mov	r8,-130768
8000b036:	70 08       	ld.w	r8,r8[0x0]
8000b038:	e2 18 00 02 	andl	r8,0x2,COH
8000b03c:	c1 21       	brne	8000b060 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
8000b03e:	48 b8       	lddpc	r8,8000b068 <udd_ctrl_underflow+0x3c>
8000b040:	70 08       	ld.w	r8,r8[0x0]
8000b042:	58 18       	cp.w	r8,1
8000b044:	c0 41       	brne	8000b04c <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
8000b046:	f0 1f 00 0a 	mcall	8000b06c <udd_ctrl_underflow+0x40>
8000b04a:	c0 c8       	rjmp	8000b062 <udd_ctrl_underflow+0x36>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
8000b04c:	48 78       	lddpc	r8,8000b068 <udd_ctrl_underflow+0x3c>
8000b04e:	70 08       	ld.w	r8,r8[0x0]
8000b050:	58 48       	cp.w	r8,4
8000b052:	c0 81       	brne	8000b062 <udd_ctrl_underflow+0x36>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
8000b054:	fe 68 01 f0 	mov	r8,-130576
8000b058:	e8 69 00 00 	mov	r9,524288
8000b05c:	91 09       	st.w	r8[0x0],r9
8000b05e:	c0 28       	rjmp	8000b062 <udd_ctrl_underflow+0x36>


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
		return; // underflow ignored if OUT data is received
8000b060:	d7 03       	nop
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
	}
}
8000b062:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b066:	00 00       	add	r0,r0
8000b068:	00 00       	add	r0,r0
8000b06a:	07 b8       	ld.ub	r8,r3[0x3]
8000b06c:	80 00       	ld.sh	r0,r0[0x0]
8000b06e:	b0 c4       	st.b	r8[0x4],r4

8000b070 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
8000b070:	eb cd 40 80 	pushm	r7,lr
8000b074:	1a 97       	mov	r7,sp
	if (Is_udd_in_send(0))
8000b076:	fe 68 01 30 	mov	r8,-130768
8000b07a:	70 08       	ld.w	r8,r8[0x0]
8000b07c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b080:	5c 58       	castu.b	r8
8000b082:	c0 b1       	brne	8000b098 <udd_ctrl_overflow+0x28>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000b084:	48 78       	lddpc	r8,8000b0a0 <udd_ctrl_overflow+0x30>
8000b086:	70 08       	ld.w	r8,r8[0x0]
8000b088:	58 38       	cp.w	r8,3
8000b08a:	c0 81       	brne	8000b09a <udd_ctrl_overflow+0x2a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
8000b08c:	fe 68 01 f0 	mov	r8,-130576
8000b090:	e8 69 00 00 	mov	r9,524288
8000b094:	91 09       	st.w	r8[0x0],r9
8000b096:	c0 28       	rjmp	8000b09a <udd_ctrl_overflow+0x2a>


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
		return; // overflow ignored if IN data is received
8000b098:	d7 03       	nop
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
8000b09a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b09e:	00 00       	add	r0,r0
8000b0a0:	00 00       	add	r0,r0
8000b0a2:	07 b8       	ld.ub	r8,r3[0x3]

8000b0a4 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
8000b0a4:	eb cd 40 80 	pushm	r7,lr
8000b0a8:	1a 97       	mov	r7,sp
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
8000b0aa:	48 68       	lddpc	r8,8000b0c0 <udd_ctrl_stall_data+0x1c>
8000b0ac:	30 59       	mov	r9,5
8000b0ae:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
8000b0b0:	fe 68 01 f0 	mov	r8,-130576
8000b0b4:	e8 69 00 00 	mov	r9,524288
8000b0b8:	91 09       	st.w	r8[0x0],r9
}
8000b0ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b0be:	00 00       	add	r0,r0
8000b0c0:	00 00       	add	r0,r0
8000b0c2:	07 b8       	ld.ub	r8,r3[0x3]

8000b0c4 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
8000b0c4:	eb cd 40 80 	pushm	r7,lr
8000b0c8:	1a 97       	mov	r7,sp
8000b0ca:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
8000b0cc:	49 08       	lddpc	r8,8000b10c <udd_ctrl_send_zlp_in+0x48>
8000b0ce:	30 39       	mov	r9,3
8000b0d0:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
8000b0d2:	f0 1f 00 10 	mcall	8000b110 <udd_ctrl_send_zlp_in+0x4c>
8000b0d6:	18 98       	mov	r8,r12
8000b0d8:	ef 48 ff fc 	st.w	r7[-4],r8
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
8000b0dc:	fe 68 01 60 	mov	r8,-130720
8000b0e0:	30 19       	mov	r9,1
8000b0e2:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
8000b0e4:	fe 68 01 f0 	mov	r8,-130576
8000b0e8:	30 19       	mov	r9,1
8000b0ea:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
8000b0ec:	fe 68 01 60 	mov	r8,-130720
8000b0f0:	30 89       	mov	r9,8
8000b0f2:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_out_interrupt(0);
8000b0f4:	fe 68 01 f0 	mov	r8,-130576
8000b0f8:	30 89       	mov	r9,8
8000b0fa:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000b0fc:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b100:	f0 1f 00 05 	mcall	8000b114 <udd_ctrl_send_zlp_in+0x50>
}
8000b104:	2f fd       	sub	sp,-4
8000b106:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b10a:	00 00       	add	r0,r0
8000b10c:	00 00       	add	r0,r0
8000b10e:	07 b8       	ld.ub	r8,r3[0x3]
8000b110:	80 00       	ld.sh	r0,r0[0x0]
8000b112:	99 64       	st.w	r12[0x18],r4
8000b114:	80 00       	ld.sh	r0,r0[0x0]
8000b116:	99 82       	st.w	r12[0x20],r2

8000b118 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
8000b118:	eb cd 40 80 	pushm	r7,lr
8000b11c:	1a 97       	mov	r7,sp
8000b11e:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000b120:	48 c8       	lddpc	r8,8000b150 <udd_ctrl_send_zlp_out+0x38>
8000b122:	30 49       	mov	r9,4
8000b124:	91 09       	st.w	r8[0x0],r9
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
8000b126:	f0 1f 00 0c 	mcall	8000b154 <udd_ctrl_send_zlp_out+0x3c>
8000b12a:	18 98       	mov	r8,r12
8000b12c:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_ack_nak_in(0);
8000b130:	fe 68 01 60 	mov	r8,-130720
8000b134:	31 09       	mov	r9,16
8000b136:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_in_interrupt(0);
8000b138:	fe 68 01 f0 	mov	r8,-130576
8000b13c:	31 09       	mov	r9,16
8000b13e:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000b140:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b144:	f0 1f 00 05 	mcall	8000b158 <udd_ctrl_send_zlp_out+0x40>
}
8000b148:	2f fd       	sub	sp,-4
8000b14a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b14e:	00 00       	add	r0,r0
8000b150:	00 00       	add	r0,r0
8000b152:	07 b8       	ld.ub	r8,r3[0x3]
8000b154:	80 00       	ld.sh	r0,r0[0x0]
8000b156:	99 64       	st.w	r12[0x18],r4
8000b158:	80 00       	ld.sh	r0,r0[0x0]
8000b15a:	99 82       	st.w	r12[0x20],r2

8000b15c <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
8000b15c:	eb cd 40 80 	pushm	r7,lr
8000b160:	1a 97       	mov	r7,sp
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000b162:	48 58       	lddpc	r8,8000b174 <udd_ctrl_endofrequest+0x18>
8000b164:	70 48       	ld.w	r8,r8[0x10]
8000b166:	58 08       	cp.w	r8,0
8000b168:	c0 40       	breq	8000b170 <udd_ctrl_endofrequest+0x14>
		udd_g_ctrlreq.callback();
8000b16a:	48 38       	lddpc	r8,8000b174 <udd_ctrl_endofrequest+0x18>
8000b16c:	70 48       	ld.w	r8,r8[0x10]
8000b16e:	5d 18       	icall	r8
	}
}
8000b170:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b174:	00 00       	add	r0,r0
8000b176:	0d e4       	ld.ub	r4,r6[0x6]

8000b178 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
8000b178:	eb cd 40 80 	pushm	r7,lr
8000b17c:	1a 97       	mov	r7,sp

	if (!Is_udd_endpoint_interrupt(0))
8000b17e:	fe 68 00 00 	mov	r8,-131072
8000b182:	70 18       	ld.w	r8,r8[0x4]
8000b184:	e2 18 10 00 	andl	r8,0x1000,COH
8000b188:	c0 31       	brne	8000b18e <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
8000b18a:	30 08       	mov	r8,0
8000b18c:	c4 c8       	rjmp	8000b224 <udd_ctrl_interrupt+0xac>

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
8000b18e:	fe 68 02 20 	mov	r8,-130528
8000b192:	31 09       	mov	r9,16
8000b194:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
8000b196:	fe 68 02 20 	mov	r8,-130528
8000b19a:	30 89       	mov	r9,8
8000b19c:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
8000b19e:	fe 68 01 30 	mov	r8,-130768
8000b1a2:	70 08       	ld.w	r8,r8[0x0]
8000b1a4:	e2 18 00 04 	andl	r8,0x4,COH
8000b1a8:	c0 50       	breq	8000b1b2 <udd_ctrl_interrupt+0x3a>
		// SETUP packet received
		udd_ctrl_setup_received();
8000b1aa:	f0 1f 00 21 	mcall	8000b22c <udd_ctrl_interrupt+0xb4>
		return true;
8000b1ae:	30 18       	mov	r8,1
8000b1b0:	c3 a8       	rjmp	8000b224 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
8000b1b2:	fe 68 01 30 	mov	r8,-130768
8000b1b6:	70 08       	ld.w	r8,r8[0x0]
8000b1b8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b1bc:	5c 58       	castu.b	r8
8000b1be:	c0 c0       	breq	8000b1d6 <udd_ctrl_interrupt+0x5e>
8000b1c0:	fe 68 01 c0 	mov	r8,-130624
8000b1c4:	70 08       	ld.w	r8,r8[0x0]
8000b1c6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b1ca:	5c 58       	castu.b	r8
8000b1cc:	c0 50       	breq	8000b1d6 <udd_ctrl_interrupt+0x5e>
		// IN packet sent
		udd_ctrl_in_sent();
8000b1ce:	f0 1f 00 19 	mcall	8000b230 <udd_ctrl_interrupt+0xb8>
		return true;
8000b1d2:	30 18       	mov	r8,1
8000b1d4:	c2 88       	rjmp	8000b224 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_out_received(0)) {
8000b1d6:	fe 68 01 30 	mov	r8,-130768
8000b1da:	70 08       	ld.w	r8,r8[0x0]
8000b1dc:	e2 18 00 02 	andl	r8,0x2,COH
8000b1e0:	c0 50       	breq	8000b1ea <udd_ctrl_interrupt+0x72>
		// OUT packet received
		udd_ctrl_out_received();
8000b1e2:	f0 1f 00 15 	mcall	8000b234 <udd_ctrl_interrupt+0xbc>
		return true;
8000b1e6:	30 18       	mov	r8,1
8000b1e8:	c1 e8       	rjmp	8000b224 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_out(0)) {
8000b1ea:	fe 68 01 30 	mov	r8,-130768
8000b1ee:	70 08       	ld.w	r8,r8[0x0]
8000b1f0:	e2 18 00 08 	andl	r8,0x8,COH
8000b1f4:	c0 90       	breq	8000b206 <udd_ctrl_interrupt+0x8e>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
8000b1f6:	fe 68 01 60 	mov	r8,-130720
8000b1fa:	30 89       	mov	r9,8
8000b1fc:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_overflow();
8000b1fe:	f0 1f 00 0f 	mcall	8000b238 <udd_ctrl_interrupt+0xc0>
		return true;
8000b202:	30 18       	mov	r8,1
8000b204:	c1 08       	rjmp	8000b224 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_in(0)) {
8000b206:	fe 68 01 30 	mov	r8,-130768
8000b20a:	70 08       	ld.w	r8,r8[0x0]
8000b20c:	e2 18 00 10 	andl	r8,0x10,COH
8000b210:	c0 90       	breq	8000b222 <udd_ctrl_interrupt+0xaa>
		// Underflow on IN packet
		udd_ack_nak_in(0);
8000b212:	fe 68 01 60 	mov	r8,-130720
8000b216:	31 09       	mov	r9,16
8000b218:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_underflow();
8000b21a:	f0 1f 00 09 	mcall	8000b23c <udd_ctrl_interrupt+0xc4>
		return true;
8000b21e:	30 18       	mov	r8,1
8000b220:	c0 28       	rjmp	8000b224 <udd_ctrl_interrupt+0xac>
	}
	return false;
8000b222:	30 08       	mov	r8,0
}
8000b224:	10 9c       	mov	r12,r8
8000b226:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b22a:	00 00       	add	r0,r0
8000b22c:	80 00       	ld.sh	r0,r0[0x0]
8000b22e:	ab 34       	mul	r4,r5
8000b230:	80 00       	ld.sh	r0,r0[0x0]
8000b232:	ac 98       	st.b	r6[0x1],r8
8000b234:	80 00       	ld.sh	r0,r0[0x0]
8000b236:	ae 38       	st.h	r7[0x6],r8
8000b238:	80 00       	ld.sh	r0,r0[0x0]
8000b23a:	b0 70       	st.h	r8[0xe],r0
8000b23c:	80 00       	ld.sh	r0,r0[0x0]
8000b23e:	b0 2c       	st.h	r8[0x4],r12

8000b240 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
8000b240:	eb cd 40 80 	pushm	r7,lr
8000b244:	1a 97       	mov	r7,sp
8000b246:	20 1d       	sub	sp,4
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b248:	30 08       	mov	r8,0
8000b24a:	ef 68 ff ff 	st.b	r7[-1],r8
8000b24e:	c2 28       	rjmp	8000b292 <udd_ep_job_table_reset+0x52>
		udd_ep_job[i].busy = false;
8000b250:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b254:	49 5a       	lddpc	r10,8000b2a8 <udd_ep_job_table_reset+0x68>
8000b256:	12 98       	mov	r8,r9
8000b258:	a3 68       	lsl	r8,0x2
8000b25a:	12 08       	add	r8,r9
8000b25c:	a3 68       	lsl	r8,0x2
8000b25e:	f4 08 00 09 	add	r9,r10,r8
8000b262:	72 08       	ld.w	r8,r9[0x0]
8000b264:	30 0a       	mov	r10,0
8000b266:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b26a:	93 08       	st.w	r9[0x0],r8
		udd_ep_job[i].stall_requested = false;
8000b26c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b270:	48 ea       	lddpc	r10,8000b2a8 <udd_ep_job_table_reset+0x68>
8000b272:	12 98       	mov	r8,r9
8000b274:	a3 68       	lsl	r8,0x2
8000b276:	12 08       	add	r8,r9
8000b278:	a3 68       	lsl	r8,0x2
8000b27a:	f4 08 00 09 	add	r9,r10,r8
8000b27e:	72 08       	ld.w	r8,r9[0x0]
8000b280:	30 0a       	mov	r10,0
8000b282:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000b286:	93 08       	st.w	r9[0x0],r8
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b288:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b28c:	2f f8       	sub	r8,-1
8000b28e:	ef 68 ff ff 	st.b	r7[-1],r8
8000b292:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b296:	30 18       	mov	r8,1
8000b298:	f0 09 18 00 	cp.b	r9,r8
8000b29c:	fe 98 ff da 	brls	8000b250 <udd_ep_job_table_reset+0x10>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].stall_requested = false;
	}
}
8000b2a0:	2f fd       	sub	sp,-4
8000b2a2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b2a6:	00 00       	add	r0,r0
8000b2a8:	00 00       	add	r0,r0
8000b2aa:	07 c0       	ld.ub	r0,r3[0x4]

8000b2ac <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
8000b2ac:	eb cd 40 80 	pushm	r7,lr
8000b2b0:	1a 97       	mov	r7,sp
8000b2b2:	20 1d       	sub	sp,4
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b2b4:	30 08       	mov	r8,0
8000b2b6:	ef 68 ff ff 	st.b	r7[-1],r8
8000b2ba:	c1 98       	rjmp	8000b2ec <udd_ep_job_table_kill+0x40>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
8000b2bc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b2c0:	2f f8       	sub	r8,-1
8000b2c2:	5c 58       	castu.b	r8
8000b2c4:	10 9a       	mov	r10,r8
8000b2c6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b2ca:	12 98       	mov	r8,r9
8000b2cc:	a3 68       	lsl	r8,0x2
8000b2ce:	12 08       	add	r8,r9
8000b2d0:	a3 68       	lsl	r8,0x2
8000b2d2:	10 99       	mov	r9,r8
8000b2d4:	48 b8       	lddpc	r8,8000b300 <udd_ep_job_table_kill+0x54>
8000b2d6:	f2 08 00 08 	add	r8,r9,r8
8000b2da:	30 1b       	mov	r11,1
8000b2dc:	10 9c       	mov	r12,r8
8000b2de:	f0 1f 00 0a 	mcall	8000b304 <udd_ep_job_table_kill+0x58>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000b2e2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b2e6:	2f f8       	sub	r8,-1
8000b2e8:	ef 68 ff ff 	st.b	r7[-1],r8
8000b2ec:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b2f0:	30 18       	mov	r8,1
8000b2f2:	f0 09 18 00 	cp.b	r9,r8
8000b2f6:	fe 98 ff e3 	brls	8000b2bc <udd_ep_job_table_kill+0x10>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
	}
}
8000b2fa:	2f fd       	sub	sp,-4
8000b2fc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b300:	00 00       	add	r0,r0
8000b302:	07 c0       	ld.ub	r0,r3[0x4]
8000b304:	80 00       	ld.sh	r0,r0[0x0]
8000b306:	b3 54       	asr	r4,0x13

8000b308 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
8000b308:	eb cd 40 80 	pushm	r7,lr
8000b30c:	1a 97       	mov	r7,sp
8000b30e:	20 1d       	sub	sp,4
8000b310:	18 98       	mov	r8,r12
8000b312:	ef 68 ff fc 	st.b	r7[-4],r8
	ep &= USB_EP_ADDR_MASK;
8000b316:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b31a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000b31e:	ef 68 ff fc 	st.b	r7[-4],r8

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
8000b322:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000b326:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b32a:	f0 c9 00 01 	sub	r9,r8,1
8000b32e:	12 98       	mov	r8,r9
8000b330:	a3 68       	lsl	r8,0x2
8000b332:	12 08       	add	r8,r9
8000b334:	a3 68       	lsl	r8,0x2
8000b336:	10 99       	mov	r9,r8
8000b338:	48 58       	lddpc	r8,8000b34c <udd_ep_abort_job+0x44>
8000b33a:	f2 08 00 08 	add	r8,r9,r8
8000b33e:	30 1b       	mov	r11,1
8000b340:	10 9c       	mov	r12,r8
8000b342:	f0 1f 00 04 	mcall	8000b350 <udd_ep_abort_job+0x48>
}
8000b346:	2f fd       	sub	sp,-4
8000b348:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b34c:	00 00       	add	r0,r0
8000b34e:	07 c0       	ld.ub	r0,r3[0x4]
8000b350:	80 00       	ld.sh	r0,r0[0x0]
8000b352:	b3 54       	asr	r4,0x13

8000b354 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
8000b354:	eb cd 40 80 	pushm	r7,lr
8000b358:	1a 97       	mov	r7,sp
8000b35a:	20 3d       	sub	sp,12
8000b35c:	ef 4c ff fc 	st.w	r7[-4],r12
8000b360:	16 99       	mov	r9,r11
8000b362:	14 98       	mov	r8,r10
8000b364:	ef 69 ff f8 	st.b	r7[-8],r9
8000b368:	ef 68 ff f4 	st.b	r7[-12],r8
	if (ptr_job->busy == false) {
8000b36c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b370:	70 08       	ld.w	r8,r8[0x0]
8000b372:	e6 18 80 00 	andh	r8,0x8000,COH
8000b376:	c2 b0       	breq	8000b3cc <udd_ep_finish_job+0x78>
		return; // No on-going job
	}
	ptr_job->busy = false;
8000b378:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b37c:	72 08       	ld.w	r8,r9[0x0]
8000b37e:	30 0a       	mov	r10,0
8000b380:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b384:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans) {
8000b386:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b38a:	70 48       	ld.w	r8,r8[0x10]
8000b38c:	58 08       	cp.w	r8,0
8000b38e:	c2 10       	breq	8000b3d0 <udd_ep_finish_job+0x7c>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
8000b390:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b394:	a3 68       	lsl	r8,0x2
8000b396:	e0 38 ff 00 	sub	r8,130816
8000b39a:	70 08       	ld.w	r8,r8[0x0]
8000b39c:	e2 18 01 00 	andl	r8,0x100,COH
8000b3a0:	c0 90       	breq	8000b3b2 <udd_ep_finish_job+0x5e>
		ep_num |= USB_EP_DIR_IN;
8000b3a2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b3a6:	ea 18 ff ff 	orh	r8,0xffff
8000b3aa:	e8 18 ff 80 	orl	r8,0xff80
8000b3ae:	ef 68 ff f4 	st.b	r7[-12],r8
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
8000b3b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b3b6:	70 48       	ld.w	r8,r8[0x10]
8000b3b8:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b3bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b3c0:	72 2b       	ld.w	r11,r9[0x8]
8000b3c2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000b3c6:	12 9c       	mov	r12,r9
8000b3c8:	5d 18       	icall	r8
8000b3ca:	c0 48       	rjmp	8000b3d2 <udd_ep_finish_job+0x7e>


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
		return; // No on-going job
8000b3cc:	d7 03       	nop
8000b3ce:	c0 28       	rjmp	8000b3d2 <udd_ep_finish_job+0x7e>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
		return; // No callback linked to job
8000b3d0:	d7 03       	nop
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
8000b3d2:	2f dd       	sub	sp,-12
8000b3d4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b3d8 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
8000b3d8:	eb cd 40 80 	pushm	r7,lr
8000b3dc:	1a 97       	mov	r7,sp
8000b3de:	20 5d       	sub	sp,20
8000b3e0:	18 98       	mov	r8,r12
8000b3e2:	ef 68 ff ec 	st.b	r7[-20],r8
	uint32_t udd_dma_ctrl = 0;
8000b3e6:	30 08       	mov	r8,0
8000b3e8:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000b3ec:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b3f0:	f0 c9 00 01 	sub	r9,r8,1
8000b3f4:	12 98       	mov	r8,r9
8000b3f6:	a3 68       	lsl	r8,0x2
8000b3f8:	12 08       	add	r8,r9
8000b3fa:	a3 68       	lsl	r8,0x2
8000b3fc:	10 99       	mov	r9,r8
8000b3fe:	fe f8 02 1e 	ld.w	r8,pc[542]
8000b402:	f2 08 00 08 	add	r8,r9,r8
8000b406:	ef 48 ff f4 	st.w	r7[-12],r8

	if (!ptr_job->busy) {
8000b40a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b40e:	70 08       	ld.w	r8,r8[0x0]
8000b410:	e6 18 80 00 	andh	r8,0x8000,COH
8000b414:	e0 80 01 00 	breq	8000b614 <udd_ep_trans_done+0x23c>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
8000b418:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b41c:	70 39       	ld.w	r9,r8[0xc]
8000b41e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b422:	70 28       	ld.w	r8,r8[0x8]
8000b424:	10 39       	cp.w	r9,r8
8000b426:	e0 80 00 b7 	breq	8000b594 <udd_ep_trans_done+0x1bc>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
8000b42a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b42e:	70 29       	ld.w	r9,r8[0x8]
8000b430:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b434:	70 38       	ld.w	r8,r8[0xc]
8000b436:	10 19       	sub	r9,r8
8000b438:	ef 49 ff f8 	st.w	r7[-8],r9

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
8000b43c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b440:	e0 58 00 00 	cp.w	r8,65536
8000b444:	e0 88 00 0a 	brls	8000b458 <udd_ep_trans_done+0x80>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
8000b448:	e0 78 00 00 	mov	r8,65536
8000b44c:	ef 48 ff f8 	st.w	r7[-8],r8

			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
8000b450:	30 08       	mov	r8,0
8000b452:	ef 48 ff f0 	st.w	r7[-16],r8
8000b456:	c0 68       	rjmp	8000b462 <udd_ep_trans_done+0x8a>
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
8000b458:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b45c:	b1 68       	lsl	r8,0x10
8000b45e:	ef 48 ff f0 	st.w	r7[-16],r8
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
8000b462:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b466:	a3 68       	lsl	r8,0x2
8000b468:	e0 38 ff 00 	sub	r8,130816
8000b46c:	70 08       	ld.w	r8,r8[0x0]
8000b46e:	e2 18 01 00 	andl	r8,0x100,COH
8000b472:	c2 10       	breq	8000b4b4 <udd_ep_trans_done+0xdc>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
8000b474:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b478:	a3 68       	lsl	r8,0x2
8000b47a:	e0 38 ff 00 	sub	r8,130816
8000b47e:	70 08       	ld.w	r8,r8[0x0]
8000b480:	e2 18 00 70 	andl	r8,0x70,COH
8000b484:	a5 88       	lsr	r8,0x4
8000b486:	30 89       	mov	r9,8
8000b488:	f2 08 09 48 	lsl	r8,r9,r8
8000b48c:	20 18       	sub	r8,1
8000b48e:	10 99       	mov	r9,r8
8000b490:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b494:	f3 e8 00 08 	and	r8,r9,r8
8000b498:	c3 10       	breq	8000b4fa <udd_ep_trans_done+0x122>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
8000b49a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b49e:	a3 b8       	sbr	r8,0x3
8000b4a0:	ef 48 ff f0 	st.w	r7[-16],r8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
8000b4a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b4a8:	72 08       	ld.w	r8,r9[0x0]
8000b4aa:	30 0a       	mov	r10,0
8000b4ac:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000b4b0:	93 08       	st.w	r9[0x0],r8
8000b4b2:	c2 58       	rjmp	8000b4fc <udd_ep_trans_done+0x124>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000b4b4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b4b8:	a3 68       	lsl	r8,0x2
8000b4ba:	e0 38 ff 00 	sub	r8,130816
8000b4be:	70 08       	ld.w	r8,r8[0x0]
8000b4c0:	e2 18 18 00 	andl	r8,0x1800,COH
8000b4c4:	ab 98       	lsr	r8,0xb
8000b4c6:	58 18       	cp.w	r8,1
8000b4c8:	c1 21       	brne	8000b4ec <udd_ep_trans_done+0x114>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
8000b4ca:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b4ce:	a3 68       	lsl	r8,0x2
8000b4d0:	e0 38 ff 00 	sub	r8,130816
8000b4d4:	70 08       	ld.w	r8,r8[0x0]
8000b4d6:	e2 18 00 70 	andl	r8,0x70,COH
8000b4da:	a5 88       	lsr	r8,0x4
8000b4dc:	30 89       	mov	r9,8
8000b4de:	f2 08 09 48 	lsl	r8,r9,r8
8000b4e2:	10 99       	mov	r9,r8
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000b4e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b4e8:	10 39       	cp.w	r9,r8
8000b4ea:	c0 93       	brcs	8000b4fc <udd_ep_trans_done+0x124>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
8000b4ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b4f0:	e8 18 00 14 	orl	r8,0x14
8000b4f4:	ef 48 ff f0 	st.w	r7[-16],r8
8000b4f8:	c0 28       	rjmp	8000b4fc <udd_ep_trans_done+0x124>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
8000b4fa:	d7 03       	nop
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
8000b4fc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b500:	a5 68       	lsl	r8,0x4
8000b502:	e0 38 fd 00 	sub	r8,130304
8000b506:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b50a:	72 1a       	ld.w	r10,r9[0x4]
8000b50c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b510:	72 39       	ld.w	r9,r9[0xc]
8000b512:	f4 09 00 09 	add	r9,r10,r9
8000b516:	91 19       	st.w	r8[0x4],r9
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
8000b518:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b51c:	e8 18 00 21 	orl	r8,0x21
8000b520:	ef 48 ff f0 	st.w	r7[-16],r8
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
8000b524:	f0 1f 00 3f 	mcall	8000b620 <udd_ep_trans_done+0x248>
8000b528:	18 98       	mov	r8,r12
8000b52a:	ef 48 ff fc 	st.w	r7[-4],r8
		if ( !(udd_endpoint_dma_get_status(ep)
8000b52e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b532:	a5 68       	lsl	r8,0x4
8000b534:	e0 38 fd 00 	sub	r8,130304
8000b538:	70 38       	ld.w	r8,r8[0xc]
8000b53a:	e2 18 00 10 	andl	r8,0x10,COH
8000b53e:	c2 11       	brne	8000b580 <udd_ep_trans_done+0x1a8>
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
8000b540:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b544:	a5 68       	lsl	r8,0x4
8000b546:	e0 38 fd 00 	sub	r8,130304
8000b54a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000b54e:	91 29       	st.w	r8[0x8],r9
			ptr_job->nb_trans += next_trans;
8000b550:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b554:	70 39       	ld.w	r9,r8[0xc]
8000b556:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b55a:	10 09       	add	r9,r8
8000b55c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b560:	91 39       	st.w	r8[0xc],r9
			udd_enable_endpoint_dma_interrupt(ep);
8000b562:	fe 68 00 00 	mov	r8,-131072
8000b566:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b56a:	20 19       	sub	r9,1
8000b56c:	fc 1a 02 00 	movh	r10,0x200
8000b570:	f4 09 09 49 	lsl	r9,r10,r9
8000b574:	91 69       	st.w	r8[0x18],r9
			cpu_irq_restore(flags);
8000b576:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b57a:	f0 1f 00 2b 	mcall	8000b624 <udd_ep_trans_done+0x24c>
			return;
8000b57e:	c4 c8       	rjmp	8000b616 <udd_ep_trans_done+0x23e>
		}
		cpu_irq_restore(flags);
8000b580:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b584:	f0 1f 00 28 	mcall	8000b624 <udd_ep_trans_done+0x24c>

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
8000b588:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b58c:	70 39       	ld.w	r9,r8[0xc]
8000b58e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b592:	91 29       	st.w	r8[0x8],r9
	}
	if (Is_udd_endpoint_in(ep)) {
8000b594:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b598:	a3 68       	lsl	r8,0x2
8000b59a:	e0 38 ff 00 	sub	r8,130816
8000b59e:	70 08       	ld.w	r8,r8[0x0]
8000b5a0:	e2 18 01 00 	andl	r8,0x100,COH
8000b5a4:	c2 f0       	breq	8000b602 <udd_ep_trans_done+0x22a>
		if (ptr_job->b_shortpacket) {
8000b5a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b5aa:	70 08       	ld.w	r8,r8[0x0]
8000b5ac:	e6 18 40 00 	andh	r8,0x4000,COH
8000b5b0:	c2 90       	breq	8000b602 <udd_ep_trans_done+0x22a>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
8000b5b2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b5b6:	a3 68       	lsl	r8,0x2
8000b5b8:	e0 38 fe a0 	sub	r8,130720
8000b5bc:	30 19       	mov	r9,1
8000b5be:	91 09       	st.w	r8[0x0],r9
			if (Is_udd_write_enabled(ep)) {
8000b5c0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b5c4:	a3 68       	lsl	r8,0x2
8000b5c6:	e0 38 fe d0 	sub	r8,130768
8000b5ca:	70 08       	ld.w	r8,r8[0x0]
8000b5cc:	e6 18 00 01 	andh	r8,0x1,COH
8000b5d0:	c0 80       	breq	8000b5e0 <udd_ep_trans_done+0x208>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
8000b5d2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b5d6:	a3 68       	lsl	r8,0x2
8000b5d8:	e0 38 fe 70 	sub	r8,130672
8000b5dc:	30 19       	mov	r9,1
8000b5de:	91 09       	st.w	r8[0x0],r9
			}
			udd_enable_in_send_interrupt(ep);
8000b5e0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b5e4:	a3 68       	lsl	r8,0x2
8000b5e6:	e0 38 fe 10 	sub	r8,130576
8000b5ea:	30 19       	mov	r9,1
8000b5ec:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(ep);
8000b5ee:	fe 68 00 00 	mov	r8,-131072
8000b5f2:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b5f6:	e0 6a 10 00 	mov	r10,4096
8000b5fa:	f4 09 09 49 	lsl	r9,r10,r9
8000b5fe:	91 69       	st.w	r8[0x18],r9
			return;
8000b600:	c0 b8       	rjmp	8000b616 <udd_ep_trans_done+0x23e>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
8000b602:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b606:	10 9a       	mov	r10,r8
8000b608:	30 0b       	mov	r11,0
8000b60a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b60e:	f0 1f 00 07 	mcall	8000b628 <udd_ep_trans_done+0x250>
8000b612:	c0 28       	rjmp	8000b616 <udd_ep_trans_done+0x23e>

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
8000b614:	d7 03       	nop
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
8000b616:	2f bd       	sub	sp,-20
8000b618:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b61c:	00 00       	add	r0,r0
8000b61e:	07 c0       	ld.ub	r0,r3[0x4]
8000b620:	80 00       	ld.sh	r0,r0[0x0]
8000b622:	99 64       	st.w	r12[0x18],r4
8000b624:	80 00       	ld.sh	r0,r0[0x0]
8000b626:	99 82       	st.w	r12[0x20],r2
8000b628:	80 00       	ld.sh	r0,r0[0x0]
8000b62a:	b3 54       	asr	r4,0x13

8000b62c <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
8000b62c:	eb cd 40 80 	pushm	r7,lr
8000b630:	1a 97       	mov	r7,sp
8000b632:	20 3d       	sub	sp,12
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000b634:	30 18       	mov	r8,1
8000b636:	ef 68 ff f7 	st.b	r7[-9],r8
8000b63a:	cf 18       	rjmp	8000b81c <udd_ep_interrupt+0x1f0>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
8000b63c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b640:	f0 c9 00 01 	sub	r9,r8,1
8000b644:	12 98       	mov	r8,r9
8000b646:	a3 68       	lsl	r8,0x2
8000b648:	12 08       	add	r8,r9
8000b64a:	a3 68       	lsl	r8,0x2
8000b64c:	10 99       	mov	r9,r8
8000b64e:	4f a8       	lddpc	r8,8000b834 <udd_ep_interrupt+0x208>
8000b650:	f2 08 00 08 	add	r8,r9,r8
8000b654:	ef 48 ff f8 	st.w	r7[-8],r8

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000b658:	fe 68 00 00 	mov	r8,-131072
8000b65c:	70 49       	ld.w	r9,r8[0x10]
8000b65e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b662:	20 18       	sub	r8,1
8000b664:	fc 1a 02 00 	movh	r10,0x200
8000b668:	f4 08 09 48 	lsl	r8,r10,r8
8000b66c:	f3 e8 00 08 	and	r8,r9,r8
8000b670:	c4 70       	breq	8000b6fe <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
8000b672:	fe 68 00 00 	mov	r8,-131072
8000b676:	70 19       	ld.w	r9,r8[0x4]
8000b678:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b67c:	20 18       	sub	r8,1
8000b67e:	fc 1a 02 00 	movh	r10,0x200
8000b682:	f4 08 09 48 	lsl	r8,r10,r8
8000b686:	f3 e8 00 08 	and	r8,r9,r8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000b68a:	c3 a0       	breq	8000b6fe <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
8000b68c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b690:	a5 68       	lsl	r8,0x4
8000b692:	e0 38 fd 00 	sub	r8,130304
8000b696:	70 38       	ld.w	r8,r8[0xc]
8000b698:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b69c:	5c 58       	castu.b	r8
8000b69e:	c0 30       	breq	8000b6a4 <udd_ep_interrupt+0x78>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
8000b6a0:	30 18       	mov	r8,1
8000b6a2:	cc 58       	rjmp	8000b82c <udd_ep_interrupt+0x200>
			}
			udd_disable_endpoint_dma_interrupt(ep);
8000b6a4:	fe 68 00 00 	mov	r8,-131072
8000b6a8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b6ac:	20 19       	sub	r9,1
8000b6ae:	fc 1a 02 00 	movh	r10,0x200
8000b6b2:	f4 09 09 49 	lsl	r9,r10,r9
8000b6b6:	91 59       	st.w	r8[0x14],r9
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
8000b6b8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b6bc:	a5 68       	lsl	r8,0x4
8000b6be:	e0 38 fd 00 	sub	r8,130304
8000b6c2:	70 38       	ld.w	r8,r8[0xc]
8000b6c4:	b1 88       	lsr	r8,0x10
8000b6c6:	ef 48 ff fc 	st.w	r7[-4],r8
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
8000b6ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b6ce:	58 08       	cp.w	r8,0
8000b6d0:	c1 00       	breq	8000b6f0 <udd_ep_interrupt+0xc4>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
8000b6d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b6d6:	70 39       	ld.w	r9,r8[0xc]
8000b6d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b6dc:	10 19       	sub	r9,r8
8000b6de:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b6e2:	91 39       	st.w	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
8000b6e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b6e8:	70 39       	ld.w	r9,r8[0xc]
8000b6ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b6ee:	91 29       	st.w	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
8000b6f0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b6f4:	10 9c       	mov	r12,r8
8000b6f6:	f0 1f 00 51 	mcall	8000b838 <udd_ep_interrupt+0x20c>
			return true;
8000b6fa:	30 18       	mov	r8,1
8000b6fc:	c9 88       	rjmp	8000b82c <udd_ep_interrupt+0x200>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
8000b6fe:	fe 68 00 00 	mov	r8,-131072
8000b702:	70 49       	ld.w	r9,r8[0x10]
8000b704:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b708:	e0 6a 10 00 	mov	r10,4096
8000b70c:	f4 08 09 48 	lsl	r8,r10,r8
8000b710:	f3 e8 00 08 	and	r8,r9,r8
8000b714:	c7 f0       	breq	8000b812 <udd_ep_interrupt+0x1e6>
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
8000b716:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b71a:	a3 68       	lsl	r8,0x2
8000b71c:	e0 38 fe 40 	sub	r8,130624
8000b720:	70 08       	ld.w	r8,r8[0x0]
8000b722:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b726:	5c 58       	castu.b	r8
8000b728:	c2 b0       	breq	8000b77e <udd_ep_interrupt+0x152>
8000b72a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b72e:	a3 68       	lsl	r8,0x2
8000b730:	e0 38 fe d0 	sub	r8,130768
8000b734:	70 08       	ld.w	r8,r8[0x0]
8000b736:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b73a:	5c 58       	castu.b	r8
8000b73c:	c2 10       	breq	8000b77e <udd_ep_interrupt+0x152>
				udd_disable_in_send_interrupt(ep);
8000b73e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b742:	a3 68       	lsl	r8,0x2
8000b744:	e0 38 fd e0 	sub	r8,130528
8000b748:	30 19       	mov	r9,1
8000b74a:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000b74c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b750:	a3 68       	lsl	r8,0x2
8000b752:	e0 38 fe a0 	sub	r8,130720
8000b756:	30 19       	mov	r9,1
8000b758:	91 09       	st.w	r8[0x0],r9
				udd_ack_fifocon(ep);
8000b75a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b75e:	a3 68       	lsl	r8,0x2
8000b760:	e0 38 fd e0 	sub	r8,130528
8000b764:	e0 69 40 00 	mov	r9,16384
8000b768:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false, ep);
8000b76a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b76e:	10 9a       	mov	r10,r8
8000b770:	30 0b       	mov	r11,0
8000b772:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b776:	f0 1f 00 32 	mcall	8000b83c <udd_ep_interrupt+0x210>
				return true;
8000b77a:	30 18       	mov	r8,1
8000b77c:	c5 88       	rjmp	8000b82c <udd_ep_interrupt+0x200>
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
8000b77e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b782:	a3 68       	lsl	r8,0x2
8000b784:	e0 38 fe 40 	sub	r8,130624
8000b788:	70 08       	ld.w	r8,r8[0x0]
8000b78a:	e2 18 10 00 	andl	r8,0x1000,COH
8000b78e:	c4 20       	breq	8000b812 <udd_ep_interrupt+0x1e6>
8000b790:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b794:	a3 68       	lsl	r8,0x2
8000b796:	e0 38 fe d0 	sub	r8,130768
8000b79a:	70 08       	ld.w	r8,r8[0x0]
8000b79c:	e2 18 30 00 	andl	r8,0x3000,COH
8000b7a0:	ad 88       	lsr	r8,0xc
8000b7a2:	c3 81       	brne	8000b812 <udd_ep_interrupt+0x1e6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
8000b7a4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b7a8:	a3 68       	lsl	r8,0x2
8000b7aa:	e0 38 fd e0 	sub	r8,130528
8000b7ae:	e0 69 10 00 	mov	r9,4096
8000b7b2:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
8000b7b4:	fe 68 00 00 	mov	r8,-131072
8000b7b8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b7bc:	e0 6a 10 00 	mov	r10,4096
8000b7c0:	f4 09 09 49 	lsl	r9,r10,r9
8000b7c4:	91 59       	st.w	r8[0x14],r9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
8000b7c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b7ca:	72 08       	ld.w	r8,r9[0x0]
8000b7cc:	30 0a       	mov	r10,0
8000b7ce:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000b7d2:	93 08       	st.w	r9[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
8000b7d4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b7d8:	a3 68       	lsl	r8,0x2
8000b7da:	e0 38 ff 00 	sub	r8,130816
8000b7de:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b7e2:	a3 69       	lsl	r9,0x2
8000b7e4:	e0 39 ff 00 	sub	r9,130816
8000b7e8:	72 09       	ld.w	r9,r9[0x0]
8000b7ea:	a9 d9       	cbr	r9,0x9
8000b7ec:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
8000b7ee:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b7f2:	a3 68       	lsl	r8,0x2
8000b7f4:	e0 38 fe 10 	sub	r8,130576
8000b7f8:	e8 69 00 00 	mov	r9,524288
8000b7fc:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
8000b7fe:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b802:	a3 68       	lsl	r8,0x2
8000b804:	e0 38 fe 10 	sub	r8,130576
8000b808:	e4 69 00 00 	mov	r9,262144
8000b80c:	91 09       	st.w	r8[0x0],r9
				return true;
8000b80e:	30 18       	mov	r8,1
8000b810:	c0 e8       	rjmp	8000b82c <udd_ep_interrupt+0x200>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000b812:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b816:	2f f8       	sub	r8,-1
8000b818:	ef 68 ff f7 	st.b	r7[-9],r8
8000b81c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b820:	30 28       	mov	r8,2
8000b822:	f0 09 18 00 	cp.b	r9,r8
8000b826:	fe 98 ff 0b 	brls	8000b63c <udd_ep_interrupt+0x10>
				udd_reset_data_toggle(ep);
				return true;
			}
		}
	}
	return false;
8000b82a:	30 08       	mov	r8,0
}
8000b82c:	10 9c       	mov	r12,r8
8000b82e:	2f dd       	sub	sp,-12
8000b830:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b834:	00 00       	add	r0,r0
8000b836:	07 c0       	ld.ub	r0,r3[0x4]
8000b838:	80 00       	ld.sh	r0,r0[0x0]
8000b83a:	b3 d8       	cbr	r8,0x13
8000b83c:	80 00       	ld.sh	r0,r0[0x0]
8000b83e:	b3 54       	asr	r4,0x13

8000b840 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000b840:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000b844:	fe c0 ce 44 	sub	r0,pc,-12732

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
8000b848:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000b84c:	d5 53       	csrf	0x15
  cp      r0, r1
8000b84e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
8000b850:	e0 61 02 48 	mov	r1,584
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
8000b854:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000b856:	c0 72       	brcc	8000b864 <idata_load_loop_end>
  cp      r0, r1
8000b858:	fe c2 c4 90 	sub	r2,pc,-15216

8000b85c <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000b85c:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
8000b85e:	a1 24       	st.d	r0++,r4
  cp      r0, r1
8000b860:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000b862:	cf d3       	brcs	8000b85c <idata_load_loop>

8000b864 <idata_load_loop_end>:
  mov     r2, 0
8000b864:	e0 60 02 48 	mov	r0,584
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000b868:	e0 61 0e 08 	mov	r1,3592
  cp      r0, r1
  brlo    udata_clear_loop
8000b86c:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000b86e:	c0 62       	brcc	8000b87a <udata_clear_loop_end>
8000b870:	30 02       	mov	r2,0
8000b872:	30 03       	mov	r3,0

8000b874 <udata_clear_loop>:
8000b874:	a1 22       	st.d	r0++,r2
8000b876:	02 30       	cp.w	r0,r1
8000b878:	cf e3       	brcs	8000b874 <udata_clear_loop>

8000b87a <udata_clear_loop_end>:
8000b87a:	fe cf d6 fe 	sub	pc,pc,-10498
8000b87e:	d7 03       	nop

8000b880 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8000b880:	eb cd 40 80 	pushm	r7,lr
8000b884:	1a 97       	mov	r7,sp
8000b886:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000b888:	e1 b8 00 00 	mfsr	r8,0x0
8000b88c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8000b890:	d3 03       	ssrf	0x10

	return flags;
8000b892:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000b896:	10 9c       	mov	r12,r8
8000b898:	2f fd       	sub	sp,-4
8000b89a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b89e <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8000b89e:	eb cd 40 80 	pushm	r7,lr
8000b8a2:	1a 97       	mov	r7,sp
8000b8a4:	20 1d       	sub	sp,4
8000b8a6:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000b8aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8ae:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8000b8b2:	2f fd       	sub	sp,-4
8000b8b4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b8b8 <osc_enable>:
#include <stdbool.h>
#include <stdint.h>
#include <avr32/io.h>

static inline void osc_enable(uint8_t id)
{
8000b8b8:	eb cd 40 80 	pushm	r7,lr
8000b8bc:	1a 97       	mov	r7,sp
8000b8be:	20 3d       	sub	sp,12
8000b8c0:	18 98       	mov	r8,r12
8000b8c2:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();
8000b8c6:	f0 1f 00 2b 	mcall	8000b970 <osc_enable+0xb8>
8000b8ca:	18 98       	mov	r8,r12
8000b8cc:	ef 48 ff f8 	st.w	r7[-8],r8

	switch (id) {
8000b8d0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b8d4:	58 18       	cp.w	r8,1
8000b8d6:	c1 c0       	breq	8000b90e <osc_enable+0x56>
8000b8d8:	58 28       	cp.w	r8,2
8000b8da:	c3 10       	breq	8000b93c <osc_enable+0x84>
8000b8dc:	58 08       	cp.w	r8,0
8000b8de:	c4 21       	brne	8000b962 <osc_enable+0xaa>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
8000b8e0:	e0 68 03 00 	mov	r8,768
8000b8e4:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
8000b8e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8ec:	e8 18 00 07 	orl	r8,0x7
8000b8f0:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl0 = oscctrl;
8000b8f4:	fe 78 0c 00 	mov	r8,-62464
8000b8f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b8fc:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
8000b8fe:	fe 78 0c 00 	mov	r8,-62464
8000b902:	fe 79 0c 00 	mov	r9,-62464
8000b906:	72 09       	ld.w	r9,r9[0x0]
8000b908:	a3 a9       	sbr	r9,0x2
8000b90a:	91 09       	st.w	r8[0x0],r9
		break;
8000b90c:	c2 b8       	rjmp	8000b962 <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		oscctrl = OSC1_STARTUP_VALUE <<
8000b90e:	e0 68 03 00 	mov	r8,768
8000b912:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL1_STARTUP_OFFSET;
		oscctrl |= OSC1_MODE_VALUE << AVR32_PM_OSCCTRL1_MODE_OFFSET;
8000b916:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b91a:	e8 18 00 07 	orl	r8,0x7
8000b91e:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl1 = oscctrl;
8000b922:	fe 78 0c 00 	mov	r8,-62464
8000b926:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b92a:	91 b9       	st.w	r8[0x2c],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC1EN;
8000b92c:	fe 78 0c 00 	mov	r8,-62464
8000b930:	fe 79 0c 00 	mov	r9,-62464
8000b934:	72 09       	ld.w	r9,r9[0x0]
8000b936:	a3 b9       	sbr	r9,0x3
8000b938:	91 09       	st.w	r8[0x0],r9
		break;
8000b93a:	c1 48       	rjmp	8000b962 <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
8000b93c:	e2 68 00 00 	mov	r8,131072
8000b940:	ef 48 ff fc 	st.w	r7[-4],r8
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
8000b944:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b948:	a9 a8       	sbr	r8,0x8
8000b94a:	ef 48 ff fc 	st.w	r7[-4],r8
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
8000b94e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b952:	a1 a8       	sbr	r8,0x0
8000b954:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl32 = oscctrl;
8000b958:	fe 78 0c 00 	mov	r8,-62464
8000b95c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b960:	91 c9       	st.w	r8[0x30],r9
	default:
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
8000b962:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b966:	f0 1f 00 04 	mcall	8000b974 <osc_enable+0xbc>
}
8000b96a:	2f dd       	sub	sp,-12
8000b96c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b970:	80 00       	ld.sh	r0,r0[0x0]
8000b972:	b8 80       	st.b	r12[0x0],r0
8000b974:	80 00       	ld.sh	r0,r0[0x0]
8000b976:	b8 9e       	st.b	r12[0x1],lr

8000b978 <osc_is_ready>:
	}
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
8000b978:	eb cd 40 80 	pushm	r7,lr
8000b97c:	1a 97       	mov	r7,sp
8000b97e:	20 1d       	sub	sp,4
8000b980:	18 98       	mov	r8,r12
8000b982:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000b986:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b98a:	58 18       	cp.w	r8,1
8000b98c:	c0 d0       	breq	8000b9a6 <osc_is_ready+0x2e>
8000b98e:	58 28       	cp.w	r8,2
8000b990:	c1 30       	breq	8000b9b6 <osc_is_ready+0x3e>
8000b992:	58 08       	cp.w	r8,0
8000b994:	c1 91       	brne	8000b9c6 <osc_is_ready+0x4e>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
8000b996:	fe 78 0c 00 	mov	r8,-62464
8000b99a:	71 58       	ld.w	r8,r8[0x54]
8000b99c:	e2 18 00 80 	andl	r8,0x80,COH
8000b9a0:	5f 18       	srne	r8
8000b9a2:	5c 58       	castu.b	r8
8000b9a4:	c1 28       	rjmp	8000b9c8 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC1RDY));
8000b9a6:	fe 78 0c 00 	mov	r8,-62464
8000b9aa:	71 58       	ld.w	r8,r8[0x54]
8000b9ac:	e2 18 01 00 	andl	r8,0x100,COH
8000b9b0:	5f 18       	srne	r8
8000b9b2:	5c 58       	castu.b	r8
8000b9b4:	c0 a8       	rjmp	8000b9c8 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC32RDY));
8000b9b6:	fe 78 0c 00 	mov	r8,-62464
8000b9ba:	71 58       	ld.w	r8,r8[0x54]
8000b9bc:	e2 18 02 00 	andl	r8,0x200,COH
8000b9c0:	5f 18       	srne	r8
8000b9c2:	5c 58       	castu.b	r8
8000b9c4:	c0 28       	rjmp	8000b9c8 <osc_is_ready+0x50>
#endif

	default:
		/* unhandled_case(id); */
		return false;
8000b9c6:	30 08       	mov	r8,0
	}
}
8000b9c8:	10 9c       	mov	r12,r8
8000b9ca:	2f fd       	sub	sp,-4
8000b9cc:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b9d0 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
8000b9d0:	eb cd 40 80 	pushm	r7,lr
8000b9d4:	1a 97       	mov	r7,sp
8000b9d6:	20 1d       	sub	sp,4
8000b9d8:	18 98       	mov	r8,r12
8000b9da:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000b9de:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b9e2:	58 18       	cp.w	r8,1
8000b9e4:	c0 a0       	breq	8000b9f8 <osc_get_rate+0x28>
8000b9e6:	58 28       	cp.w	r8,2
8000b9e8:	c0 d0       	breq	8000ba02 <osc_get_rate+0x32>
8000b9ea:	58 08       	cp.w	r8,0
8000b9ec:	c0 e1       	brne	8000ba08 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000b9ee:	e0 68 1b 00 	mov	r8,6912
8000b9f2:	ea 18 00 b7 	orh	r8,0xb7
8000b9f6:	c0 a8       	rjmp	8000ba0a <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000b9f8:	e0 68 44 00 	mov	r8,17408
8000b9fc:	ea 18 00 ac 	orh	r8,0xac
8000ba00:	c0 58       	rjmp	8000ba0a <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000ba02:	e0 68 80 00 	mov	r8,32768
8000ba06:	c0 28       	rjmp	8000ba0a <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000ba08:	30 08       	mov	r8,0
	}
}
8000ba0a:	10 9c       	mov	r12,r8
8000ba0c:	2f fd       	sub	sp,-4
8000ba0e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ba12:	d7 03       	nop

8000ba14 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8000ba14:	eb cd 40 80 	pushm	r7,lr
8000ba18:	1a 97       	mov	r7,sp
8000ba1a:	20 1d       	sub	sp,4
8000ba1c:	18 98       	mov	r8,r12
8000ba1e:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8000ba22:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ba26:	10 9c       	mov	r12,r8
8000ba28:	f0 1f 00 05 	mcall	8000ba3c <osc_wait_ready+0x28>
8000ba2c:	18 98       	mov	r8,r12
8000ba2e:	ec 18 00 01 	eorl	r8,0x1
8000ba32:	5c 58       	castu.b	r8
8000ba34:	cf 71       	brne	8000ba22 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
8000ba36:	2f fd       	sub	sp,-4
8000ba38:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ba3c:	80 00       	ld.sh	r0,r0[0x0]
8000ba3e:	b9 78       	lsl	r8,0x19

8000ba40 <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8000ba40:	eb cd 40 80 	pushm	r7,lr
8000ba44:	1a 97       	mov	r7,sp
8000ba46:	20 2d       	sub	sp,8
8000ba48:	ef 4c ff fc 	st.w	r7[-4],r12
8000ba4c:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
8000ba50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba54:	70 09       	ld.w	r9,r8[0x0]
8000ba56:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ba5a:	2f e8       	sub	r8,-2
8000ba5c:	30 1a       	mov	r10,1
8000ba5e:	f4 08 09 48 	lsl	r8,r10,r8
8000ba62:	10 49       	or	r9,r8
8000ba64:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba68:	91 09       	st.w	r8[0x0],r9
}
8000ba6a:	2f ed       	sub	sp,-8
8000ba6c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ba70 <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8000ba70:	eb cd 40 80 	pushm	r7,lr
8000ba74:	1a 97       	mov	r7,sp
8000ba76:	20 5d       	sub	sp,20
8000ba78:	ef 4c ff f8 	st.w	r7[-8],r12
8000ba7c:	ef 4b ff f4 	st.w	r7[-12],r11
8000ba80:	ef 4a ff f0 	st.w	r7[-16],r10
8000ba84:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8000ba88:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ba8c:	5c 58       	castu.b	r8
8000ba8e:	10 9c       	mov	r12,r8
8000ba90:	f0 1f 00 2e 	mcall	8000bb48 <pll_config_init+0xd8>
8000ba94:	18 99       	mov	r9,r12
8000ba96:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000ba9a:	f2 08 02 48 	mul	r8,r9,r8
8000ba9e:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8000baa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000baa6:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000baaa:	f0 09 0d 08 	divu	r8,r8,r9
8000baae:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8000bab2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bab6:	30 09       	mov	r9,0
8000bab8:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8000baba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000babe:	e0 69 b3 ff 	mov	r9,46079
8000bac2:	ea 19 04 c4 	orh	r9,0x4c4
8000bac6:	12 38       	cp.w	r8,r9
8000bac8:	e0 8b 00 16 	brhi	8000baf4 <pll_config_init+0x84>
8000bacc:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bad0:	58 88       	cp.w	r8,8
8000bad2:	e0 8b 00 11 	brhi	8000baf4 <pll_config_init+0x84>
		mul *= 2;
8000bad6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bada:	a1 78       	lsl	r8,0x1
8000badc:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8000bae0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bae4:	a1 78       	lsl	r8,0x1
8000bae6:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8000baea:	30 1b       	mov	r11,1
8000baec:	ee fc ff f8 	ld.w	r12,r7[-8]
8000baf0:	f0 1f 00 17 	mcall	8000bb4c <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8000baf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000baf8:	e0 69 fe 7f 	mov	r9,65151
8000bafc:	ea 19 0a 21 	orh	r9,0xa21
8000bb00:	12 38       	cp.w	r8,r9
8000bb02:	e0 8b 00 07 	brhi	8000bb10 <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8000bb06:	30 0b       	mov	r11,0
8000bb08:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bb0c:	f0 1f 00 10 	mcall	8000bb4c <pll_config_init+0xdc>

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000bb10:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb14:	70 09       	ld.w	r9,r8[0x0]
8000bb16:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bb1a:	20 18       	sub	r8,1
8000bb1c:	f0 0a 15 10 	lsl	r10,r8,0x10
			| (div << AVR32_PM_PLL0_PLLDIV)
8000bb20:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bb24:	a9 68       	lsl	r8,0x8
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
8000bb26:	10 4a       	or	r10,r8
			| (src << AVR32_PM_PLL0_PLLOSC);
8000bb28:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb2c:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000bb2e:	f5 e8 10 08 	or	r8,r10,r8
8000bb32:	f3 e8 10 08 	or	r8,r9,r8
8000bb36:	10 99       	mov	r9,r8
8000bb38:	ea 19 3f 00 	orh	r9,0x3f00
8000bb3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb40:	91 09       	st.w	r8[0x0],r9
			| (div << AVR32_PM_PLL0_PLLDIV)
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
			| (src << AVR32_PM_PLL0_PLLOSC);
}
8000bb42:	2f bd       	sub	sp,-20
8000bb44:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb48:	80 00       	ld.sh	r0,r0[0x0]
8000bb4a:	b9 d0       	cbr	r0,0x19
8000bb4c:	80 00       	ld.sh	r0,r0[0x0]
8000bb4e:	ba 40       	st.h	sp[0x8],r0

8000bb50 <pll_enable>:
	AVR32_PM.pll[pll_id] = cfg->ctrl;
}

static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
8000bb50:	eb cd 40 80 	pushm	r7,lr
8000bb54:	1a 97       	mov	r7,sp
8000bb56:	20 2d       	sub	sp,8
8000bb58:	ef 4c ff fc 	st.w	r7[-4],r12
8000bb5c:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
8000bb60:	fe 78 0c 00 	mov	r8,-62464
8000bb64:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bb68:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bb6c:	74 0a       	ld.w	r10,r10[0x0]
8000bb6e:	a1 aa       	sbr	r10,0x0
8000bb70:	2f 89       	sub	r9,-8
8000bb72:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000bb76:	2f ed       	sub	sp,-8
8000bb78:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bb7c <pll_is_locked>:

	AVR32_PM.pll[pll_id] = 0;
}

static inline bool pll_is_locked(unsigned int pll_id)
{
8000bb7c:	eb cd 40 80 	pushm	r7,lr
8000bb80:	1a 97       	mov	r7,sp
8000bb82:	20 1d       	sub	sp,4
8000bb84:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
8000bb88:	fe 78 0c 00 	mov	r8,-62464
8000bb8c:	71 59       	ld.w	r9,r8[0x54]
8000bb8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb92:	30 1a       	mov	r10,1
8000bb94:	f4 08 09 48 	lsl	r8,r10,r8
8000bb98:	f3 e8 00 08 	and	r8,r9,r8
8000bb9c:	5f 18       	srne	r8
8000bb9e:	5c 58       	castu.b	r8
}
8000bba0:	10 9c       	mov	r12,r8
8000bba2:	2f fd       	sub	sp,-4
8000bba4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bba8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
8000bba8:	eb cd 40 80 	pushm	r7,lr
8000bbac:	1a 97       	mov	r7,sp
8000bbae:	20 1d       	sub	sp,4
8000bbb0:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000bbb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbb8:	58 08       	cp.w	r8,0
8000bbba:	c0 40       	breq	8000bbc2 <pll_enable_source+0x1a>
8000bbbc:	58 18       	cp.w	r8,1
8000bbbe:	c1 10       	breq	8000bbe0 <pll_enable_source+0x38>
8000bbc0:	c2 08       	rjmp	8000bc00 <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000bbc2:	30 0c       	mov	r12,0
8000bbc4:	f0 1f 00 11 	mcall	8000bc08 <pll_enable_source+0x60>
8000bbc8:	18 98       	mov	r8,r12
8000bbca:	ec 18 00 01 	eorl	r8,0x1
8000bbce:	5c 58       	castu.b	r8
8000bbd0:	c1 70       	breq	8000bbfe <pll_enable_source+0x56>
			osc_enable(OSC_ID_OSC0);
8000bbd2:	30 0c       	mov	r12,0
8000bbd4:	f0 1f 00 0e 	mcall	8000bc0c <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC0);
8000bbd8:	30 0c       	mov	r12,0
8000bbda:	f0 1f 00 0e 	mcall	8000bc10 <pll_enable_source+0x68>
		}
		break;
8000bbde:	c1 18       	rjmp	8000bc00 <pll_enable_source+0x58>

	case PLL_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000bbe0:	30 1c       	mov	r12,1
8000bbe2:	f0 1f 00 0a 	mcall	8000bc08 <pll_enable_source+0x60>
8000bbe6:	18 98       	mov	r8,r12
8000bbe8:	ec 18 00 01 	eorl	r8,0x1
8000bbec:	5c 58       	castu.b	r8
8000bbee:	c0 90       	breq	8000bc00 <pll_enable_source+0x58>
			osc_enable(OSC_ID_OSC1);
8000bbf0:	30 1c       	mov	r12,1
8000bbf2:	f0 1f 00 07 	mcall	8000bc0c <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC1);
8000bbf6:	30 1c       	mov	r12,1
8000bbf8:	f0 1f 00 06 	mcall	8000bc10 <pll_enable_source+0x68>
8000bbfc:	c0 28       	rjmp	8000bc00 <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000bbfe:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000bc00:	2f fd       	sub	sp,-4
8000bc02:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc06:	00 00       	add	r0,r0
8000bc08:	80 00       	ld.sh	r0,r0[0x0]
8000bc0a:	b9 78       	lsl	r8,0x19
8000bc0c:	80 00       	ld.sh	r0,r0[0x0]
8000bc0e:	b8 b8       	st.b	r12[0x3],r8
8000bc10:	80 00       	ld.sh	r0,r0[0x0]
8000bc12:	ba 14       	st.h	sp[0x2],r4

8000bc14 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
8000bc14:	eb cd 40 80 	pushm	r7,lr
8000bc18:	1a 97       	mov	r7,sp
8000bc1a:	20 2d       	sub	sp,8
8000bc1c:	ef 4c ff f8 	st.w	r7[-8],r12
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
8000bc20:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bc24:	f0 1f 00 15 	mcall	8000bc78 <pll_enable_config_defaults+0x64>
8000bc28:	18 98       	mov	r8,r12
8000bc2a:	58 08       	cp.w	r8,0
8000bc2c:	c2 11       	brne	8000bc6e <pll_enable_config_defaults+0x5a>
		return; // Pll already running
	}
	switch (pll_id) {
8000bc2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bc32:	58 08       	cp.w	r8,0
8000bc34:	c0 c1       	brne	8000bc4c <pll_enable_config_defaults+0x38>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
8000bc36:	30 0c       	mov	r12,0
8000bc38:	f0 1f 00 11 	mcall	8000bc7c <pll_enable_config_defaults+0x68>
		pll_config_init(&pllcfg,
8000bc3c:	ee c8 00 04 	sub	r8,r7,4
8000bc40:	30 b9       	mov	r9,11
8000bc42:	30 2a       	mov	r10,2
8000bc44:	30 0b       	mov	r11,0
8000bc46:	10 9c       	mov	r12,r8
8000bc48:	f0 1f 00 0e 	mcall	8000bc80 <pll_enable_config_defaults+0x6c>
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
8000bc4c:	ee c8 00 04 	sub	r8,r7,4
8000bc50:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bc54:	10 9c       	mov	r12,r8
8000bc56:	f0 1f 00 0c 	mcall	8000bc84 <pll_enable_config_defaults+0x70>
	while (!pll_is_locked(pll_id));
8000bc5a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bc5e:	f0 1f 00 07 	mcall	8000bc78 <pll_enable_config_defaults+0x64>
8000bc62:	18 98       	mov	r8,r12
8000bc64:	ec 18 00 01 	eorl	r8,0x1
8000bc68:	5c 58       	castu.b	r8
8000bc6a:	cf 81       	brne	8000bc5a <pll_enable_config_defaults+0x46>
8000bc6c:	c0 28       	rjmp	8000bc70 <pll_enable_config_defaults+0x5c>
static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
		return; // Pll already running
8000bc6e:	d7 03       	nop
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
}
8000bc70:	2f ed       	sub	sp,-8
8000bc72:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc76:	00 00       	add	r0,r0
8000bc78:	80 00       	ld.sh	r0,r0[0x0]
8000bc7a:	bb 7c       	lsl	r12,0x1b
8000bc7c:	80 00       	ld.sh	r0,r0[0x0]
8000bc7e:	bb a8       	sbr	r8,0x1a
8000bc80:	80 00       	ld.sh	r0,r0[0x0]
8000bc82:	ba 70       	st.h	sp[0xe],r0
8000bc84:	80 00       	ld.sh	r0,r0[0x0]
8000bc86:	bb 50       	asr	r0,0x1b

8000bc88 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8000bc88:	eb cd 40 80 	pushm	r7,lr
8000bc8c:	1a 97       	mov	r7,sp
8000bc8e:	20 2d       	sub	sp,8
8000bc90:	ef 4c ff fc 	st.w	r7[-4],r12
8000bc94:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8000bc98:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc9c:	30 09       	mov	r9,0
8000bc9e:	91 09       	st.w	r8[0x0],r9
}
8000bca0:	2f ed       	sub	sp,-8
8000bca2:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bca6 <genclk_config_set_source>:
	AVR32_PM.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8000bca6:	eb cd 40 80 	pushm	r7,lr
8000bcaa:	1a 97       	mov	r7,sp
8000bcac:	20 3d       	sub	sp,12
8000bcae:	ef 4c ff f8 	st.w	r7[-8],r12
8000bcb2:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t mask;

	mask = AVR32_PM_GCCTRL_OSCSEL_MASK | AVR32_PM_GCCTRL_PLLSEL_MASK;
8000bcb6:	30 38       	mov	r8,3
8000bcb8:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(!(src & ~mask));

	cfg->ctrl = (cfg->ctrl & ~mask) | (src << AVR32_PM_GCCTRL_OSCSEL);
8000bcbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bcc0:	70 09       	ld.w	r9,r8[0x0]
8000bcc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcc6:	5c d8       	com	r8
8000bcc8:	10 69       	and	r9,r8
8000bcca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bcce:	10 49       	or	r9,r8
8000bcd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bcd4:	91 09       	st.w	r8[0x0],r9
}
8000bcd6:	2f dd       	sub	sp,-12
8000bcd8:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bcdc <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8000bcdc:	eb cd 40 80 	pushm	r7,lr
8000bce0:	1a 97       	mov	r7,sp
8000bce2:	20 2d       	sub	sp,8
8000bce4:	ef 4c ff fc 	st.w	r7[-4],r12
8000bce8:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert((divider > 0) && (divider <= GENCLK_DIV_MAX));

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_PM_GCCTRL_DIVEN_MASK | AVR32_PM_GCCTRL_DIV_MASK);
8000bcec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcf0:	70 08       	ld.w	r8,r8[0x0]
8000bcf2:	10 99       	mov	r9,r8
8000bcf4:	e0 19 00 ef 	andl	r9,0xef
8000bcf8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcfc:	91 09       	st.w	r8[0x0],r9

	if (divider > 1) {
8000bcfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bd02:	58 18       	cp.w	r8,1
8000bd04:	e0 88 00 17 	brls	8000bd32 <genclk_config_set_divider+0x56>
		cfg->ctrl |= 1U << AVR32_PM_GCCTRL_DIVEN;
8000bd08:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd0c:	70 08       	ld.w	r8,r8[0x0]
8000bd0e:	10 99       	mov	r9,r8
8000bd10:	a5 a9       	sbr	r9,0x4
8000bd12:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd16:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_PM_GCCTRL_DIV;
8000bd18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd1c:	70 09       	ld.w	r9,r8[0x0]
8000bd1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bd22:	2f f8       	sub	r8,-1
8000bd24:	a1 98       	lsr	r8,0x1
8000bd26:	20 18       	sub	r8,1
8000bd28:	a9 68       	lsl	r8,0x8
8000bd2a:	10 49       	or	r9,r8
8000bd2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd30:	91 09       	st.w	r8[0x0],r9
	}
}
8000bd32:	2f ed       	sub	sp,-8
8000bd34:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bd38 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8000bd38:	eb cd 40 80 	pushm	r7,lr
8000bd3c:	1a 97       	mov	r7,sp
8000bd3e:	20 2d       	sub	sp,8
8000bd40:	ef 4c ff fc 	st.w	r7[-4],r12
8000bd44:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
8000bd48:	fe 78 0c 00 	mov	r8,-62464
8000bd4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bd50:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bd54:	74 0a       	ld.w	r10,r10[0x0]
8000bd56:	a3 aa       	sbr	r10,0x2
8000bd58:	2e 89       	sub	r9,-24
8000bd5a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000bd5e:	2f ed       	sub	sp,-8
8000bd60:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bd64 <genclk_enable_source>:
{
	AVR32_PM.gcctrl[id] = 0;
}

static inline void genclk_enable_source(enum genclk_source src)
{
8000bd64:	eb cd 40 80 	pushm	r7,lr
8000bd68:	1a 97       	mov	r7,sp
8000bd6a:	20 1d       	sub	sp,4
8000bd6c:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000bd70:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd74:	58 18       	cp.w	r8,1
8000bd76:	c1 40       	breq	8000bd9e <genclk_enable_source+0x3a>
8000bd78:	c0 43       	brcs	8000bd80 <genclk_enable_source+0x1c>
8000bd7a:	58 28       	cp.w	r8,2
8000bd7c:	c2 00       	breq	8000bdbc <genclk_enable_source+0x58>
8000bd7e:	c2 68       	rjmp	8000bdca <genclk_enable_source+0x66>
#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000bd80:	30 0c       	mov	r12,0
8000bd82:	f0 1f 00 14 	mcall	8000bdd0 <genclk_enable_source+0x6c>
8000bd86:	18 98       	mov	r8,r12
8000bd88:	ec 18 00 01 	eorl	r8,0x1
8000bd8c:	5c 58       	castu.b	r8
8000bd8e:	c1 b0       	breq	8000bdc4 <genclk_enable_source+0x60>
			osc_enable(OSC_ID_OSC0);
8000bd90:	30 0c       	mov	r12,0
8000bd92:	f0 1f 00 11 	mcall	8000bdd4 <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC0);
8000bd96:	30 0c       	mov	r12,0
8000bd98:	f0 1f 00 10 	mcall	8000bdd8 <genclk_enable_source+0x74>
		}
		break;
8000bd9c:	c1 78       	rjmp	8000bdca <genclk_enable_source+0x66>
#endif

#ifdef BOARD_OSC1_HZ
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000bd9e:	30 1c       	mov	r12,1
8000bda0:	f0 1f 00 0c 	mcall	8000bdd0 <genclk_enable_source+0x6c>
8000bda4:	18 98       	mov	r8,r12
8000bda6:	ec 18 00 01 	eorl	r8,0x1
8000bdaa:	5c 58       	castu.b	r8
8000bdac:	c0 e0       	breq	8000bdc8 <genclk_enable_source+0x64>
			osc_enable(OSC_ID_OSC1);
8000bdae:	30 1c       	mov	r12,1
8000bdb0:	f0 1f 00 09 	mcall	8000bdd4 <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC1);
8000bdb4:	30 1c       	mov	r12,1
8000bdb6:	f0 1f 00 09 	mcall	8000bdd8 <genclk_enable_source+0x74>
		}
		break;
8000bdba:	c0 88       	rjmp	8000bdca <genclk_enable_source+0x66>
#endif

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000bdbc:	30 0c       	mov	r12,0
8000bdbe:	f0 1f 00 08 	mcall	8000bddc <genclk_enable_source+0x78>
8000bdc2:	c0 48       	rjmp	8000bdca <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000bdc4:	d7 03       	nop
8000bdc6:	c0 28       	rjmp	8000bdca <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
			osc_enable(OSC_ID_OSC1);
			osc_wait_ready(OSC_ID_OSC1);
		}
		break;
8000bdc8:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000bdca:	2f fd       	sub	sp,-4
8000bdcc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bdd0:	80 00       	ld.sh	r0,r0[0x0]
8000bdd2:	b9 78       	lsl	r8,0x19
8000bdd4:	80 00       	ld.sh	r0,r0[0x0]
8000bdd6:	b8 b8       	st.b	r12[0x3],r8
8000bdd8:	80 00       	ld.sh	r0,r0[0x0]
8000bdda:	ba 14       	st.h	sp[0x2],r4
8000bddc:	80 00       	ld.sh	r0,r0[0x0]
8000bdde:	bc 14       	st.h	lr[0x2],r4

8000bde0 <genclk_enable_config>:
 * \param id      The ID of the generic clock.
 * \param src     The source clock of the generic clock.
 * \param divider The divider used to generate the generic clock.
 */
static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
8000bde0:	eb cd 40 80 	pushm	r7,lr
8000bde4:	1a 97       	mov	r7,sp
8000bde6:	20 4d       	sub	sp,16
8000bde8:	ef 4c ff f8 	st.w	r7[-8],r12
8000bdec:	ef 4b ff f4 	st.w	r7[-12],r11
8000bdf0:	ef 4a ff f0 	st.w	r7[-16],r10
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, id);
8000bdf4:	ee c8 00 04 	sub	r8,r7,4
8000bdf8:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bdfc:	10 9c       	mov	r12,r8
8000bdfe:	f0 1f 00 10 	mcall	8000be3c <genclk_enable_config+0x5c>
	genclk_enable_source(src);
8000be02:	ee fc ff f4 	ld.w	r12,r7[-12]
8000be06:	f0 1f 00 0f 	mcall	8000be40 <genclk_enable_config+0x60>
	genclk_config_set_source(&gcfg, src);
8000be0a:	ee c8 00 04 	sub	r8,r7,4
8000be0e:	ee fb ff f4 	ld.w	r11,r7[-12]
8000be12:	10 9c       	mov	r12,r8
8000be14:	f0 1f 00 0c 	mcall	8000be44 <genclk_enable_config+0x64>
	genclk_config_set_divider(&gcfg, divider);
8000be18:	ee c8 00 04 	sub	r8,r7,4
8000be1c:	ee fb ff f0 	ld.w	r11,r7[-16]
8000be20:	10 9c       	mov	r12,r8
8000be22:	f0 1f 00 0a 	mcall	8000be48 <genclk_enable_config+0x68>
	genclk_enable(&gcfg, id);
8000be26:	ee c8 00 04 	sub	r8,r7,4
8000be2a:	ee fb ff f8 	ld.w	r11,r7[-8]
8000be2e:	10 9c       	mov	r12,r8
8000be30:	f0 1f 00 07 	mcall	8000be4c <genclk_enable_config+0x6c>
}
8000be34:	2f cd       	sub	sp,-16
8000be36:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be3a:	00 00       	add	r0,r0
8000be3c:	80 00       	ld.sh	r0,r0[0x0]
8000be3e:	bc 88       	st.b	lr[0x0],r8
8000be40:	80 00       	ld.sh	r0,r0[0x0]
8000be42:	bd 64       	lsl	r4,0x1c
8000be44:	80 00       	ld.sh	r0,r0[0x0]
8000be46:	bc a6       	st.b	lr[0x2],r6
8000be48:	80 00       	ld.sh	r0,r0[0x0]
8000be4a:	bc dc       	st.b	lr[0x5],r12
8000be4c:	80 00       	ld.sh	r0,r0[0x0]
8000be4e:	bd 38       	mul	r8,lr

8000be50 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000be50:	eb cd 40 80 	pushm	r7,lr
8000be54:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000be56:	30 0c       	mov	r12,0
8000be58:	f0 1f 00 06 	mcall	8000be70 <sysclk_get_main_hz+0x20>
8000be5c:	18 99       	mov	r9,r12
8000be5e:	12 98       	mov	r8,r9
8000be60:	a3 68       	lsl	r8,0x2
8000be62:	12 08       	add	r8,r9
8000be64:	a1 78       	lsl	r8,0x1
8000be66:	12 08       	add	r8,r9
8000be68:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000be6a:	10 9c       	mov	r12,r8
8000be6c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be70:	80 00       	ld.sh	r0,r0[0x0]
8000be72:	b9 d0       	cbr	r0,0x19

8000be74 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000be74:	eb cd 40 80 	pushm	r7,lr
8000be78:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000be7a:	f0 1f 00 04 	mcall	8000be88 <sysclk_get_cpu_hz+0x14>
8000be7e:	18 98       	mov	r8,r12
}
8000be80:	10 9c       	mov	r12,r8
8000be82:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be86:	00 00       	add	r0,r0
8000be88:	80 00       	ld.sh	r0,r0[0x0]
8000be8a:	be 50       	st.h	pc[0xa],r0

8000be8c <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000be8c:	eb cd 40 80 	pushm	r7,lr
8000be90:	1a 97       	mov	r7,sp
8000be92:	20 1d       	sub	sp,4
8000be94:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000be98:	ee fb ff fc 	ld.w	r11,r7[-4]
8000be9c:	30 1c       	mov	r12,1
8000be9e:	f0 1f 00 03 	mcall	8000bea8 <sysclk_enable_hsb_module+0x1c>
}
8000bea2:	2f fd       	sub	sp,-4
8000bea4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bea8:	80 00       	ld.sh	r0,r0[0x0]
8000beaa:	bf 00       	ld.d	r0,pc

8000beac <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint_fast8_t src)
{
8000beac:	eb cd 40 80 	pushm	r7,lr
8000beb0:	1a 97       	mov	r7,sp
8000beb2:	20 3d       	sub	sp,12
8000beb4:	ef 4c ff f4 	st.w	r7[-12],r12
	irqflags_t flags;
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
8000beb8:	f0 1f 00 10 	mcall	8000bef8 <sysclk_set_source+0x4c>
8000bebc:	18 98       	mov	r8,r12
8000bebe:	ef 48 ff f8 	st.w	r7[-8],r8
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
8000bec2:	fe 78 0c 00 	mov	r8,-62464
8000bec6:	70 08       	ld.w	r8,r8[0x0]
8000bec8:	e0 18 ff fc 	andl	r8,0xfffc
8000becc:	ef 48 ff fc 	st.w	r7[-4],r8
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
8000bed0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bed4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bed8:	f3 e8 10 08 	or	r8,r9,r8
8000bedc:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.mcctrl = mcctrl;
8000bee0:	fe 78 0c 00 	mov	r8,-62464
8000bee4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bee8:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000beea:	ee fc ff f8 	ld.w	r12,r7[-8]
8000beee:	f0 1f 00 04 	mcall	8000befc <sysclk_set_source+0x50>
}
8000bef2:	2f dd       	sub	sp,-12
8000bef4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bef8:	80 00       	ld.sh	r0,r0[0x0]
8000befa:	b8 80       	st.b	r12[0x0],r0
8000befc:	80 00       	ld.sh	r0,r0[0x0]
8000befe:	b8 9e       	st.b	r12[0x1],lr

8000bf00 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8000bf00:	eb cd 40 80 	pushm	r7,lr
8000bf04:	1a 97       	mov	r7,sp
8000bf06:	20 4d       	sub	sp,16
8000bf08:	ef 4c ff f4 	st.w	r7[-12],r12
8000bf0c:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8000bf10:	f0 1f 00 17 	mcall	8000bf6c <sysclk_priv_enable_module+0x6c>
8000bf14:	18 98       	mov	r8,r12
8000bf16:	ef 48 ff f8 	st.w	r7[-8],r8

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000bf1a:	fe 78 0c 00 	mov	r8,-62464
8000bf1e:	71 58       	ld.w	r8,r8[0x54]
8000bf20:	e2 18 00 40 	andl	r8,0x40,COH
8000bf24:	cf b0       	breq	8000bf1a <sysclk_priv_enable_module+0x1a>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000bf26:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf2a:	a3 68       	lsl	r8,0x2
8000bf2c:	e0 28 f3 f8 	sub	r8,62456
8000bf30:	70 08       	ld.w	r8,r8[0x0]
8000bf32:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8000bf36:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bf3a:	30 19       	mov	r9,1
8000bf3c:	f2 08 09 48 	lsl	r8,r9,r8
8000bf40:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bf44:	f3 e8 10 08 	or	r8,r9,r8
8000bf48:	ef 48 ff fc 	st.w	r7[-4],r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000bf4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf50:	a3 68       	lsl	r8,0x2
8000bf52:	e0 28 f3 f8 	sub	r8,62456
8000bf56:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bf5a:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8000bf5c:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bf60:	f0 1f 00 04 	mcall	8000bf70 <sysclk_priv_enable_module+0x70>
}
8000bf64:	2f cd       	sub	sp,-16
8000bf66:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf6a:	00 00       	add	r0,r0
8000bf6c:	80 00       	ld.sh	r0,r0[0x0]
8000bf6e:	b8 80       	st.b	r12[0x0],r0
8000bf70:	80 00       	ld.sh	r0,r0[0x0]
8000bf72:	b8 9e       	st.b	r12[0x1],lr

8000bf74 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
8000bf74:	eb cd 40 80 	pushm	r7,lr
8000bf78:	1a 97       	mov	r7,sp
8000bf7a:	20 3d       	sub	sp,12
8000bf7c:	ef 4c ff f4 	st.w	r7[-12],r12
	unsigned int pbus_id = 0;
8000bf80:	30 08       	mov	r8,0
8000bf82:	ef 48 ff f8 	st.w	r7[-8],r8
	irqflags_t   flags;

	/* The AES module is on PBC, others are on PBB */
	if (index == SYSCLK_AES)
8000bf86:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf8a:	58 98       	cp.w	r8,9
8000bf8c:	c0 41       	brne	8000bf94 <sysclk_enable_pbb_module+0x20>
		pbus_id = 1;
8000bf8e:	30 18       	mov	r8,1
8000bf90:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
8000bf94:	f0 1f 00 15 	mcall	8000bfe8 <sysclk_enable_pbb_module+0x74>
8000bf98:	18 98       	mov	r8,r12
8000bf9a:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!sysclk_bus_refcount[pbus_id])
8000bf9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bfa2:	49 39       	lddpc	r9,8000bfec <sysclk_enable_pbb_module+0x78>
8000bfa4:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000bfa8:	58 08       	cp.w	r8,0
8000bfaa:	c0 91       	brne	8000bfbc <sysclk_enable_pbb_module+0x48>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
8000bfac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bfb0:	a1 78       	lsl	r8,0x1
8000bfb2:	2f f8       	sub	r8,-1
8000bfb4:	a1 78       	lsl	r8,0x1
8000bfb6:	10 9c       	mov	r12,r8
8000bfb8:	f0 1f 00 0e 	mcall	8000bff0 <sysclk_enable_pbb_module+0x7c>
	sysclk_bus_refcount[pbus_id]++;
8000bfbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bfc0:	48 b9       	lddpc	r9,8000bfec <sysclk_enable_pbb_module+0x78>
8000bfc2:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000bfc6:	2f f9       	sub	r9,-1
8000bfc8:	5c 59       	castu.b	r9
8000bfca:	48 9a       	lddpc	r10,8000bfec <sysclk_enable_pbb_module+0x78>
8000bfcc:	f4 08 0b 09 	st.b	r10[r8],r9

	cpu_irq_restore(flags);
8000bfd0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000bfd4:	f0 1f 00 08 	mcall	8000bff4 <sysclk_enable_pbb_module+0x80>

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
8000bfd8:	ee fb ff f4 	ld.w	r11,r7[-12]
8000bfdc:	30 3c       	mov	r12,3
8000bfde:	f0 1f 00 07 	mcall	8000bff8 <sysclk_enable_pbb_module+0x84>
}
8000bfe2:	2f dd       	sub	sp,-12
8000bfe4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bfe8:	80 00       	ld.sh	r0,r0[0x0]
8000bfea:	b8 80       	st.b	r12[0x0],r0
8000bfec:	00 00       	add	r0,r0
8000bfee:	07 ec       	ld.ub	r12,r3[0x6]
8000bff0:	80 00       	ld.sh	r0,r0[0x0]
8000bff2:	be 8c       	st.b	pc[0x0],r12
8000bff4:	80 00       	ld.sh	r0,r0[0x0]
8000bff6:	b8 9e       	st.b	r12[0x1],lr
8000bff8:	80 00       	ld.sh	r0,r0[0x0]
8000bffa:	bf 00       	ld.d	r0,pc

8000bffc <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8000bffc:	eb cd 40 80 	pushm	r7,lr
8000c000:	1a 97       	mov	r7,sp
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
8000c002:	30 1c       	mov	r12,1
8000c004:	f0 1f 00 06 	mcall	8000c01c <sysclk_enable_usb+0x20>
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000c008:	30 3c       	mov	r12,3
8000c00a:	f0 1f 00 06 	mcall	8000c020 <sysclk_enable_usb+0x24>
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
8000c00e:	30 1a       	mov	r10,1
8000c010:	30 0b       	mov	r11,0
8000c012:	30 4c       	mov	r12,4
8000c014:	f0 1f 00 04 	mcall	8000c024 <sysclk_enable_usb+0x28>
}
8000c018:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c01c:	80 00       	ld.sh	r0,r0[0x0]
8000c01e:	bf 74       	lsl	r4,0x1f
8000c020:	80 00       	ld.sh	r0,r0[0x0]
8000c022:	be 8c       	st.b	pc[0x0],r12
8000c024:	80 00       	ld.sh	r0,r0[0x0]
8000c026:	bd e0       	*unknown*

8000c028 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8000c028:	eb cd 40 80 	pushm	r7,lr
8000c02c:	1a 97       	mov	r7,sp
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000c02e:	30 0c       	mov	r12,0
8000c030:	f0 1f 00 07 	mcall	8000c04c <sysclk_init+0x24>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
8000c034:	f0 1f 00 07 	mcall	8000c050 <sysclk_init+0x28>
8000c038:	18 98       	mov	r8,r12
8000c03a:	10 9c       	mov	r12,r8
8000c03c:	f0 1f 00 06 	mcall	8000c054 <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_PLL0);
8000c040:	30 2c       	mov	r12,2
8000c042:	f0 1f 00 06 	mcall	8000c058 <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000c046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c04a:	00 00       	add	r0,r0
8000c04c:	80 00       	ld.sh	r0,r0[0x0]
8000c04e:	bc 14       	st.h	lr[0x2],r4
8000c050:	80 00       	ld.sh	r0,r0[0x0]
8000c052:	be 74       	st.h	pc[0xe],r4
8000c054:	80 00       	ld.sh	r0,r0[0x0]
8000c056:	85 8c       	st.w	r2[0x20],r12
8000c058:	80 00       	ld.sh	r0,r0[0x0]
8000c05a:	be ac       	st.b	pc[0x2],r12
8000c05c:	22 53       	sub	r3,37
8000c05e:	44 20       	lddsp	r0,sp[0x108]
8000c060:	43 61       	lddsp	r1,sp[0xd8]
8000c062:	72 64       	ld.w	r4,r9[0x18]
8000c064:	20 53       	sub	r3,5
8000c066:	6c 6f       	ld.w	pc,r6[0x18]
8000c068:	74 20       	ld.w	r0,r10[0x8]
8000c06a:	30 22       	mov	r2,2
8000c06c:	00 00       	add	r0,r0
8000c06e:	00 00       	add	r0,r0
8000c070:	22 53       	sub	r3,37
8000c072:	44 20       	lddsp	r0,sp[0x108]
8000c074:	43 61       	lddsp	r1,sp[0xd8]
8000c076:	72 64       	ld.w	r4,r9[0x18]
8000c078:	20 53       	sub	r3,5
8000c07a:	6c 6f       	ld.w	pc,r6[0x18]
8000c07c:	74 20       	ld.w	r0,r10[0x8]
8000c07e:	31 22       	mov	r2,18
8000c080:	00 00       	add	r0,r0
	...

8000c084 <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
8000c084:	eb cd 40 80 	pushm	r7,lr
8000c088:	1a 97       	mov	r7,sp

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
8000c08a:	30 28       	mov	r8,2
#endif
}
8000c08c:	10 9c       	mov	r12,r8
8000c08e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c092:	d7 03       	nop

8000c094 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
8000c094:	eb cd 40 80 	pushm	r7,lr
8000c098:	1a 97       	mov	r7,sp
8000c09a:	20 2d       	sub	sp,8
8000c09c:	18 98       	mov	r8,r12
8000c09e:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000c0a2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c0a6:	30 18       	mov	r8,1
8000c0a8:	f0 09 18 00 	cp.b	r9,r8
8000c0ac:	e0 8b 00 0f 	brhi	8000c0ca <mem_test_unit_ready+0x36>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
8000c0b0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c0b4:	48 aa       	lddpc	r10,8000c0dc <mem_test_unit_ready+0x48>
8000c0b6:	12 98       	mov	r8,r9
8000c0b8:	a3 78       	lsl	r8,0x3
8000c0ba:	12 18       	sub	r8,r9
8000c0bc:	a3 68       	lsl	r8,0x2
8000c0be:	f4 08 00 08 	add	r8,r10,r8
8000c0c2:	70 08       	ld.w	r8,r8[0x0]
8000c0c4:	5d 18       	icall	r8
8000c0c6:	18 98       	mov	r8,r12
8000c0c8:	c0 28       	rjmp	8000c0cc <mem_test_unit_ready+0x38>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000c0ca:	30 18       	mov	r8,1
8000c0cc:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000c0d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c0d4:	10 9c       	mov	r12,r8
8000c0d6:	2f ed       	sub	sp,-8
8000c0d8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0dc:	80 00       	ld.sh	r0,r0[0x0]
8000c0de:	f2 24 eb cd 	sub	r4,-857139

8000c0e0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
8000c0e0:	eb cd 40 80 	pushm	r7,lr
8000c0e4:	1a 97       	mov	r7,sp
8000c0e6:	20 3d       	sub	sp,12
8000c0e8:	18 98       	mov	r8,r12
8000c0ea:	ef 4b ff f4 	st.w	r7[-12],r11
8000c0ee:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000c0f2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c0f6:	30 18       	mov	r8,1
8000c0f8:	f0 09 18 00 	cp.b	r9,r8
8000c0fc:	e0 8b 00 10 	brhi	8000c11c <mem_read_capacity+0x3c>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
8000c100:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c104:	48 ba       	lddpc	r10,8000c130 <mem_read_capacity+0x50>
8000c106:	12 98       	mov	r8,r9
8000c108:	a3 78       	lsl	r8,0x3
8000c10a:	12 18       	sub	r8,r9
8000c10c:	2f f8       	sub	r8,-1
8000c10e:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
8000c112:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c116:	5d 18       	icall	r8
8000c118:	18 98       	mov	r8,r12
8000c11a:	c0 28       	rjmp	8000c11e <mem_read_capacity+0x3e>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000c11c:	30 18       	mov	r8,1
8000c11e:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000c122:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c126:	10 9c       	mov	r12,r8
8000c128:	2f dd       	sub	sp,-12
8000c12a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c12e:	00 00       	add	r0,r0
8000c130:	80 00       	ld.sh	r0,r0[0x0]
8000c132:	f2 24 eb cd 	sub	r4,-857139

8000c134 <mem_wr_protect>:
  return sector_size;
}


bool mem_wr_protect(U8 lun)
{
8000c134:	eb cd 40 80 	pushm	r7,lr
8000c138:	1a 97       	mov	r7,sp
8000c13a:	20 2d       	sub	sp,8
8000c13c:	18 98       	mov	r8,r12
8000c13e:	ef 68 ff f8 	st.b	r7[-8],r8
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000c142:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c146:	30 18       	mov	r8,1
8000c148:	f0 09 18 00 	cp.b	r9,r8
8000c14c:	e0 8b 00 10 	brhi	8000c16c <mem_wr_protect+0x38>
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
8000c150:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c154:	48 ba       	lddpc	r10,8000c180 <mem_wr_protect+0x4c>
8000c156:	12 98       	mov	r8,r9
8000c158:	a3 78       	lsl	r8,0x3
8000c15a:	12 18       	sub	r8,r9
8000c15c:	a3 68       	lsl	r8,0x2
8000c15e:	f4 08 00 08 	add	r8,r10,r8
8000c162:	2f 88       	sub	r8,-8
8000c164:	70 08       	ld.w	r8,r8[0x0]
8000c166:	5d 18       	icall	r8
8000c168:	18 98       	mov	r8,r12
8000c16a:	c0 28       	rjmp	8000c16e <mem_wr_protect+0x3a>
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000c16c:	30 18       	mov	r8,1
8000c16e:	ef 68 ff ff 	st.b	r7[-1],r8
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
8000c172:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000c176:	10 9c       	mov	r12,r8
8000c178:	2f ed       	sub	sp,-8
8000c17a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c17e:	00 00       	add	r0,r0
8000c180:	80 00       	ld.sh	r0,r0[0x0]
8000c182:	f2 24 eb cd 	sub	r4,-857139

8000c184 <mem_name>:
  return removal;
}


const char *mem_name(U8 lun)
{
8000c184:	eb cd 40 80 	pushm	r7,lr
8000c188:	1a 97       	mov	r7,sp
8000c18a:	20 1d       	sub	sp,4
8000c18c:	18 98       	mov	r8,r12
8000c18e:	ef 68 ff fc 	st.b	r7[-4],r8
  return
8000c192:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c196:	30 18       	mov	r8,1
8000c198:	f0 09 18 00 	cp.b	r9,r8
8000c19c:	e0 8b 00 0e 	brhi	8000c1b8 <mem_name+0x34>
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
8000c1a0:	ef 39 ff fc 	ld.ub	r9,r7[-4]
}


const char *mem_name(U8 lun)
{
  return
8000c1a4:	48 8a       	lddpc	r10,8000c1c4 <mem_name+0x40>
8000c1a6:	12 98       	mov	r8,r9
8000c1a8:	a3 78       	lsl	r8,0x3
8000c1aa:	12 18       	sub	r8,r9
8000c1ac:	a3 68       	lsl	r8,0x2
8000c1ae:	f4 08 00 08 	add	r8,r10,r8
8000c1b2:	2e 88       	sub	r8,-24
8000c1b4:	70 08       	ld.w	r8,r8[0x0]
8000c1b6:	c0 28       	rjmp	8000c1ba <mem_name+0x36>
8000c1b8:	30 08       	mov	r8,0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
8000c1ba:	10 9c       	mov	r12,r8
8000c1bc:	2f fd       	sub	sp,-4
8000c1be:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1c2:	00 00       	add	r0,r0
8000c1c4:	80 00       	ld.sh	r0,r0[0x0]
8000c1c6:	f2 24 eb cd 	sub	r4,-857139

8000c1c8 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
8000c1c8:	eb cd 40 80 	pushm	r7,lr
8000c1cc:	1a 97       	mov	r7,sp
8000c1ce:	20 4d       	sub	sp,16
8000c1d0:	18 99       	mov	r9,r12
8000c1d2:	ef 4b ff f4 	st.w	r7[-12],r11
8000c1d6:	14 98       	mov	r8,r10
8000c1d8:	ef 69 ff f8 	st.b	r7[-8],r9
8000c1dc:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
8000c1e0:	f0 1f 00 14 	mcall	8000c230 <memory_2_usb+0x68>
  status =
8000c1e4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c1e8:	30 18       	mov	r8,1
8000c1ea:	f0 09 18 00 	cp.b	r9,r8
8000c1ee:	e0 8b 00 15 	brhi	8000c218 <memory_2_usb+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
8000c1f2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c1f6:	49 0a       	lddpc	r10,8000c234 <memory_2_usb+0x6c>
8000c1f8:	12 98       	mov	r8,r9
8000c1fa:	a3 78       	lsl	r8,0x3
8000c1fc:	12 18       	sub	r8,r9
8000c1fe:	a3 68       	lsl	r8,0x2
8000c200:	f4 08 00 08 	add	r8,r10,r8
8000c204:	2f 08       	sub	r8,-16
8000c206:	70 08       	ld.w	r8,r8[0x0]
8000c208:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c20c:	12 9b       	mov	r11,r9
8000c20e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c212:	5d 18       	icall	r8
8000c214:	18 98       	mov	r8,r12
8000c216:	c0 28       	rjmp	8000c21a <memory_2_usb+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
8000c218:	30 18       	mov	r8,1
8000c21a:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
8000c21e:	f0 1f 00 07 	mcall	8000c238 <memory_2_usb+0x70>

  Ctrl_access_unlock();

  return status;
8000c222:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c226:	10 9c       	mov	r12,r8
8000c228:	2f cd       	sub	sp,-16
8000c22a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c22e:	00 00       	add	r0,r0
8000c230:	80 00       	ld.sh	r0,r0[0x0]
8000c232:	c3 00       	breq	8000c292 <usb_2_memory+0x56>
8000c234:	80 00       	ld.sh	r0,r0[0x0]
8000c236:	f2 24 80 00 	sub	r4,-884736
8000c23a:	c3 14       	brge	8000c29c <usb_2_memory+0x60>

8000c23c <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
8000c23c:	eb cd 40 80 	pushm	r7,lr
8000c240:	1a 97       	mov	r7,sp
8000c242:	20 4d       	sub	sp,16
8000c244:	18 99       	mov	r9,r12
8000c246:	ef 4b ff f4 	st.w	r7[-12],r11
8000c24a:	14 98       	mov	r8,r10
8000c24c:	ef 69 ff f8 	st.b	r7[-8],r9
8000c250:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
8000c254:	f0 1f 00 14 	mcall	8000c2a4 <usb_2_memory+0x68>
  status =
8000c258:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c25c:	30 18       	mov	r8,1
8000c25e:	f0 09 18 00 	cp.b	r9,r8
8000c262:	e0 8b 00 15 	brhi	8000c28c <usb_2_memory+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
8000c266:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c26a:	49 0a       	lddpc	r10,8000c2a8 <usb_2_memory+0x6c>
8000c26c:	12 98       	mov	r8,r9
8000c26e:	a3 78       	lsl	r8,0x3
8000c270:	12 18       	sub	r8,r9
8000c272:	a3 68       	lsl	r8,0x2
8000c274:	f4 08 00 08 	add	r8,r10,r8
8000c278:	2e c8       	sub	r8,-20
8000c27a:	70 08       	ld.w	r8,r8[0x0]
8000c27c:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c280:	12 9b       	mov	r11,r9
8000c282:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c286:	5d 18       	icall	r8
8000c288:	18 98       	mov	r8,r12
8000c28a:	c0 28       	rjmp	8000c28e <usb_2_memory+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
8000c28c:	30 18       	mov	r8,1
8000c28e:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
8000c292:	f0 1f 00 07 	mcall	8000c2ac <usb_2_memory+0x70>

  Ctrl_access_unlock();

  return status;
8000c296:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c29a:	10 9c       	mov	r12,r8
8000c29c:	2f cd       	sub	sp,-16
8000c29e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2a2:	00 00       	add	r0,r0
8000c2a4:	80 00       	ld.sh	r0,r0[0x0]
8000c2a6:	c3 28       	rjmp	8000c30a <ui_start_read+0xa>
8000c2a8:	80 00       	ld.sh	r0,r0[0x0]
8000c2aa:	f2 24 80 00 	sub	r4,-884736
8000c2ae:	c3 3c       	rcall	8000c314 <ui_stop_read>

8000c2b0 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
8000c2b0:	eb cd 40 80 	pushm	r7,lr
8000c2b4:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000c2b6:	30 1c       	mov	r12,1
8000c2b8:	f0 1f 00 04 	mcall	8000c2c8 <ui_init+0x18>
	LED_Off(LED1);
8000c2bc:	30 2c       	mov	r12,2
8000c2be:	f0 1f 00 04 	mcall	8000c2cc <ui_init+0x1c>
}
8000c2c2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2c6:	00 00       	add	r0,r0
8000c2c8:	80 00       	ld.sh	r0,r0[0x0]
8000c2ca:	43 58       	lddsp	r8,sp[0xd4]
8000c2cc:	80 00       	ld.sh	r0,r0[0x0]
8000c2ce:	42 a0       	lddsp	r0,sp[0xa8]

8000c2d0 <ui_powerdown>:

void ui_powerdown(void)
{
8000c2d0:	eb cd 40 80 	pushm	r7,lr
8000c2d4:	1a 97       	mov	r7,sp
	LED_Off(LED0);
8000c2d6:	30 1c       	mov	r12,1
8000c2d8:	f0 1f 00 04 	mcall	8000c2e8 <ui_powerdown+0x18>
	LED_Off(LED1);
8000c2dc:	30 2c       	mov	r12,2
8000c2de:	f0 1f 00 03 	mcall	8000c2e8 <ui_powerdown+0x18>
}
8000c2e2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2e6:	00 00       	add	r0,r0
8000c2e8:	80 00       	ld.sh	r0,r0[0x0]
8000c2ea:	42 a0       	lddsp	r0,sp[0xa8]

8000c2ec <ui_wakeup>:

void ui_wakeup(void)
{
8000c2ec:	eb cd 40 80 	pushm	r7,lr
8000c2f0:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000c2f2:	30 1c       	mov	r12,1
8000c2f4:	f0 1f 00 02 	mcall	8000c2fc <ui_wakeup+0x10>
}
8000c2f8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2fc:	80 00       	ld.sh	r0,r0[0x0]
8000c2fe:	43 58       	lddsp	r8,sp[0xd4]

8000c300 <ui_start_read>:

void ui_start_read(void)
{
8000c300:	eb cd 40 80 	pushm	r7,lr
8000c304:	1a 97       	mov	r7,sp
	LED_On(LED2);
8000c306:	30 4c       	mov	r12,4
8000c308:	f0 1f 00 02 	mcall	8000c310 <ui_start_read+0x10>
}
8000c30c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c310:	80 00       	ld.sh	r0,r0[0x0]
8000c312:	43 58       	lddsp	r8,sp[0xd4]

8000c314 <ui_stop_read>:

void ui_stop_read(void)
{
8000c314:	eb cd 40 80 	pushm	r7,lr
8000c318:	1a 97       	mov	r7,sp
	LED_Off(LED2);
8000c31a:	30 4c       	mov	r12,4
8000c31c:	f0 1f 00 02 	mcall	8000c324 <ui_stop_read+0x10>
}
8000c320:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c324:	80 00       	ld.sh	r0,r0[0x0]
8000c326:	42 a0       	lddsp	r0,sp[0xa8]

8000c328 <ui_start_write>:

void ui_start_write(void)
{
8000c328:	eb cd 40 80 	pushm	r7,lr
8000c32c:	1a 97       	mov	r7,sp
	LED_On(LED3);
8000c32e:	30 8c       	mov	r12,8
8000c330:	f0 1f 00 02 	mcall	8000c338 <ui_start_write+0x10>
}
8000c334:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c338:	80 00       	ld.sh	r0,r0[0x0]
8000c33a:	43 58       	lddsp	r8,sp[0xd4]

8000c33c <ui_stop_write>:

void ui_stop_write(void)
{
8000c33c:	eb cd 40 80 	pushm	r7,lr
8000c340:	1a 97       	mov	r7,sp
	LED_Off(LED3);
8000c342:	30 8c       	mov	r12,8
8000c344:	f0 1f 00 02 	mcall	8000c34c <ui_stop_write+0x10>
}
8000c348:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c34c:	80 00       	ld.sh	r0,r0[0x0]
8000c34e:	42 a0       	lddsp	r0,sp[0xa8]

8000c350 <ui_process>:

void ui_process(uint16_t framenumber)
{
8000c350:	eb cd 40 80 	pushm	r7,lr
8000c354:	1a 97       	mov	r7,sp
8000c356:	20 1d       	sub	sp,4
8000c358:	18 98       	mov	r8,r12
8000c35a:	ef 58 ff fc 	st.h	r7[-4],r8
	if ((framenumber % 1000) == 0) {
8000c35e:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c362:	e0 68 4d d3 	mov	r8,19923
8000c366:	ea 18 10 62 	orh	r8,0x1062
8000c36a:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c36e:	a7 89       	lsr	r9,0x6
8000c370:	e0 68 03 e8 	mov	r8,1000
8000c374:	f2 08 02 48 	mul	r8,r9,r8
8000c378:	f4 08 01 08 	sub	r8,r10,r8
8000c37c:	5c 88       	casts.h	r8
8000c37e:	c0 41       	brne	8000c386 <ui_process+0x36>
		LED_On(LED1);
8000c380:	30 2c       	mov	r12,2
8000c382:	f0 1f 00 10 	mcall	8000c3c0 <ui_process+0x70>
	}
	if ((framenumber % 1000) == 500) {
8000c386:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c38a:	e0 68 4d d3 	mov	r8,19923
8000c38e:	ea 18 10 62 	orh	r8,0x1062
8000c392:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c396:	a7 89       	lsr	r9,0x6
8000c398:	e0 68 03 e8 	mov	r8,1000
8000c39c:	f2 08 02 48 	mul	r8,r9,r8
8000c3a0:	f4 08 01 08 	sub	r8,r10,r8
8000c3a4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000c3a8:	e0 68 01 f4 	mov	r8,500
8000c3ac:	f0 09 19 00 	cp.h	r9,r8
8000c3b0:	c0 41       	brne	8000c3b8 <ui_process+0x68>
		LED_Off(LED1);
8000c3b2:	30 2c       	mov	r12,2
8000c3b4:	f0 1f 00 04 	mcall	8000c3c4 <ui_process+0x74>
	}
}
8000c3b8:	2f fd       	sub	sp,-4
8000c3ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3be:	00 00       	add	r0,r0
8000c3c0:	80 00       	ld.sh	r0,r0[0x0]
8000c3c2:	43 58       	lddsp	r8,sp[0xd4]
8000c3c4:	80 00       	ld.sh	r0,r0[0x0]
8000c3c6:	42 a0       	lddsp	r0,sp[0xa8]

8000c3c8 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
8000c3c8:	eb cd 40 80 	pushm	r7,lr
8000c3cc:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000c3ce:	49 49       	lddpc	r9,8000c41c <udi_msc_enable+0x54>
8000c3d0:	30 08       	mov	r8,0
8000c3d2:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_cbw_invalid = false;
8000c3d4:	49 39       	lddpc	r9,8000c420 <udi_msc_enable+0x58>
8000c3d6:	30 08       	mov	r8,0
8000c3d8:	b2 88       	st.b	r9[0x0],r8
	udi_msc_nb_lun = get_nb_lun();
8000c3da:	f0 1f 00 13 	mcall	8000c424 <udi_msc_enable+0x5c>
8000c3de:	18 98       	mov	r8,r12
8000c3e0:	49 29       	lddpc	r9,8000c428 <udi_msc_enable+0x60>
8000c3e2:	b2 88       	st.b	r9[0x0],r8
	if (0 == udi_msc_nb_lun)
8000c3e4:	49 18       	lddpc	r8,8000c428 <udi_msc_enable+0x60>
8000c3e6:	11 88       	ld.ub	r8,r8[0x0]
8000c3e8:	58 08       	cp.w	r8,0
8000c3ea:	c0 31       	brne	8000c3f0 <udi_msc_enable+0x28>
		return false;	// No lun available, then not authorize to enable interface
8000c3ec:	30 08       	mov	r8,0
8000c3ee:	c1 38       	rjmp	8000c414 <udi_msc_enable+0x4c>
	udi_msc_nb_lun--;
8000c3f0:	48 e8       	lddpc	r8,8000c428 <udi_msc_enable+0x60>
8000c3f2:	11 88       	ld.ub	r8,r8[0x0]
8000c3f4:	20 18       	sub	r8,1
8000c3f6:	5c 58       	castu.b	r8
8000c3f8:	48 c9       	lddpc	r9,8000c428 <udi_msc_enable+0x60>
8000c3fa:	b2 88       	st.b	r9[0x0],r8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
8000c3fc:	f0 1f 00 0c 	mcall	8000c42c <udi_msc_enable+0x64>
8000c400:	18 98       	mov	r8,r12
8000c402:	ec 18 00 01 	eorl	r8,0x1
8000c406:	5c 58       	castu.b	r8
8000c408:	c0 30       	breq	8000c40e <udi_msc_enable+0x46>
		return false;
8000c40a:	30 08       	mov	r8,0
8000c40c:	c0 48       	rjmp	8000c414 <udi_msc_enable+0x4c>
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
8000c40e:	f0 1f 00 09 	mcall	8000c430 <udi_msc_enable+0x68>
	return true;
8000c412:	30 18       	mov	r8,1
}
8000c414:	10 9c       	mov	r12,r8
8000c416:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c41a:	00 00       	add	r0,r0
8000c41c:	00 00       	add	r0,r0
8000c41e:	08 29       	rsub	r9,r4
8000c420:	00 00       	add	r0,r0
8000c422:	08 28       	rsub	r8,r4
8000c424:	80 00       	ld.sh	r0,r0[0x0]
8000c426:	c0 84       	brge	8000c436 <udi_msc_disable+0x2>
8000c428:	00 00       	add	r0,r0
8000c42a:	08 10       	sub	r0,r4
8000c42c:	80 00       	ld.sh	r0,r0[0x0]
8000c42e:	e3 00 80 00 	ld.sh	r0,r1[-32768]
8000c432:	c5 ac       	rcall	8000c4e6 <udi_msc_setup+0x96>

8000c434 <udi_msc_disable>:


void udi_msc_disable(void)
{
8000c434:	eb cd 40 80 	pushm	r7,lr
8000c438:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000c43a:	48 49       	lddpc	r9,8000c448 <udi_msc_disable+0x14>
8000c43c:	30 08       	mov	r8,0
8000c43e:	b2 88       	st.b	r9[0x0],r8
	UDI_MSC_DISABLE_EXT();
8000c440:	f0 1f 00 03 	mcall	8000c44c <udi_msc_disable+0x18>
}
8000c444:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c448:	00 00       	add	r0,r0
8000c44a:	08 29       	rsub	r9,r4
8000c44c:	80 00       	ld.sh	r0,r0[0x0]
8000c44e:	e3 18 eb cd 	ld.uh	r8,r1[-5171]

8000c450 <udi_msc_setup>:


bool udi_msc_setup(void)
{
8000c450:	eb cd 40 80 	pushm	r7,lr
8000c454:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000c456:	4a f8       	lddpc	r8,8000c510 <udi_msc_setup+0xc0>
8000c458:	11 88       	ld.ub	r8,r8[0x0]
8000c45a:	10 99       	mov	r9,r8
8000c45c:	30 08       	mov	r8,0
8000c45e:	f0 09 18 00 	cp.b	r9,r8
8000c462:	c2 34       	brge	8000c4a8 <udi_msc_setup+0x58>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000c464:	4a b8       	lddpc	r8,8000c510 <udi_msc_setup+0xc0>
8000c466:	11 88       	ld.ub	r8,r8[0x0]
8000c468:	e2 18 00 60 	andl	r8,0x60,COH
8000c46c:	e0 48 00 20 	cp.w	r8,32
8000c470:	c1 c1       	brne	8000c4a8 <udi_msc_setup+0x58>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000c472:	4a 88       	lddpc	r8,8000c510 <udi_msc_setup+0xc0>
8000c474:	11 98       	ld.ub	r8,r8[0x1]
8000c476:	e0 48 00 fe 	cp.w	r8,254
8000c47a:	c1 71       	brne	8000c4a8 <udi_msc_setup+0x58>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
8000c47c:	4a 58       	lddpc	r8,8000c510 <udi_msc_setup+0xc0>
8000c47e:	90 39       	ld.sh	r9,r8[0x6]
8000c480:	30 18       	mov	r8,1
8000c482:	f0 09 19 00 	cp.h	r9,r8
8000c486:	c0 30       	breq	8000c48c <udi_msc_setup+0x3c>
					return false;	// Error for USB host
8000c488:	30 08       	mov	r8,0
8000c48a:	c4 08       	rjmp	8000c50a <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000c48c:	4a 18       	lddpc	r8,8000c510 <udi_msc_setup+0xc0>
8000c48e:	90 18       	ld.sh	r8,r8[0x2]
8000c490:	58 08       	cp.w	r8,0
8000c492:	c0 30       	breq	8000c498 <udi_msc_setup+0x48>
					return false;
8000c494:	30 08       	mov	r8,0
8000c496:	c3 a8       	rjmp	8000c50a <udi_msc_setup+0xba>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
8000c498:	49 e8       	lddpc	r8,8000c510 <udi_msc_setup+0xc0>
8000c49a:	49 f9       	lddpc	r9,8000c514 <udi_msc_setup+0xc4>
8000c49c:	91 29       	st.w	r8[0x8],r9
				udd_g_ctrlreq.payload_size = 1;
8000c49e:	49 d9       	lddpc	r9,8000c510 <udi_msc_setup+0xc0>
8000c4a0:	30 18       	mov	r8,1
8000c4a2:	b2 68       	st.h	r9[0xc],r8
				return true;
8000c4a4:	30 18       	mov	r8,1
8000c4a6:	c3 28       	rjmp	8000c50a <udi_msc_setup+0xba>
			}
		}
	}
	if (Udd_setup_is_out()) {
8000c4a8:	49 a8       	lddpc	r8,8000c510 <udi_msc_setup+0xc0>
8000c4aa:	11 88       	ld.ub	r8,r8[0x0]
8000c4ac:	10 99       	mov	r9,r8
8000c4ae:	30 08       	mov	r8,0
8000c4b0:	f0 09 18 00 	cp.b	r9,r8
8000c4b4:	c2 a5       	brlt	8000c508 <udi_msc_setup+0xb8>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000c4b6:	49 78       	lddpc	r8,8000c510 <udi_msc_setup+0xc0>
8000c4b8:	11 88       	ld.ub	r8,r8[0x0]
8000c4ba:	e2 18 00 60 	andl	r8,0x60,COH
8000c4be:	e0 48 00 20 	cp.w	r8,32
8000c4c2:	c2 31       	brne	8000c508 <udi_msc_setup+0xb8>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000c4c4:	49 38       	lddpc	r8,8000c510 <udi_msc_setup+0xc0>
8000c4c6:	11 98       	ld.ub	r8,r8[0x1]
8000c4c8:	e0 48 00 ff 	cp.w	r8,255
8000c4cc:	c1 e1       	brne	8000c508 <udi_msc_setup+0xb8>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
8000c4ce:	49 18       	lddpc	r8,8000c510 <udi_msc_setup+0xc0>
8000c4d0:	90 38       	ld.sh	r8,r8[0x6]
8000c4d2:	58 08       	cp.w	r8,0
8000c4d4:	c0 30       	breq	8000c4da <udi_msc_setup+0x8a>
					return false;
8000c4d6:	30 08       	mov	r8,0
8000c4d8:	c1 98       	rjmp	8000c50a <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000c4da:	48 e8       	lddpc	r8,8000c510 <udi_msc_setup+0xc0>
8000c4dc:	90 18       	ld.sh	r8,r8[0x2]
8000c4de:	58 08       	cp.w	r8,0
8000c4e0:	c0 30       	breq	8000c4e6 <udi_msc_setup+0x96>
					return false;
8000c4e2:	30 08       	mov	r8,0
8000c4e4:	c1 38       	rjmp	8000c50a <udi_msc_setup+0xba>
				udi_msc_b_cbw_invalid = false;
8000c4e6:	48 d9       	lddpc	r9,8000c518 <udi_msc_setup+0xc8>
8000c4e8:	30 08       	mov	r8,0
8000c4ea:	b2 88       	st.b	r9[0x0],r8
				udi_msc_b_trans_req = false;
8000c4ec:	48 c9       	lddpc	r9,8000c51c <udi_msc_setup+0xcc>
8000c4ee:	30 08       	mov	r8,0
8000c4f0:	b2 88       	st.b	r9[0x0],r8
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
8000c4f2:	30 2c       	mov	r12,2
8000c4f4:	f0 1f 00 0b 	mcall	8000c520 <udi_msc_setup+0xd0>
				udd_ep_abort(UDI_MSC_EP_IN);
8000c4f8:	e0 6c 00 81 	mov	r12,129
8000c4fc:	f0 1f 00 09 	mcall	8000c520 <udi_msc_setup+0xd0>
				// Restart by CBW wait
				udi_msc_cbw_wait();
8000c500:	f0 1f 00 09 	mcall	8000c524 <udi_msc_setup+0xd4>
				return true;
8000c504:	30 18       	mov	r8,1
8000c506:	c0 28       	rjmp	8000c50a <udi_msc_setup+0xba>
			}
		}
	}
	return false;	// Not supported request
8000c508:	30 08       	mov	r8,0
}
8000c50a:	10 9c       	mov	r12,r8
8000c50c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c510:	00 00       	add	r0,r0
8000c512:	0d e4       	ld.ub	r4,r6[0x6]
8000c514:	00 00       	add	r0,r0
8000c516:	08 10       	sub	r0,r4
8000c518:	00 00       	add	r0,r0
8000c51a:	08 28       	rsub	r8,r4
8000c51c:	00 00       	add	r0,r0
8000c51e:	08 29       	rsub	r9,r4
8000c520:	80 00       	ld.sh	r0,r0[0x0]
8000c522:	a6 a4       	st.b	r3[0x2],r4
8000c524:	80 00       	ld.sh	r0,r0[0x0]
8000c526:	c5 ac       	rcall	8000c5da <udi_msc_cbw_wait+0x2e>

8000c528 <udi_msc_getsetting>:

uint8_t udi_msc_getsetting(void)
{
8000c528:	eb cd 40 80 	pushm	r7,lr
8000c52c:	1a 97       	mov	r7,sp
	return 0;	// MSC don't have multiple alternate setting
8000c52e:	30 08       	mov	r8,0
}
8000c530:	10 9c       	mov	r12,r8
8000c532:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c536:	d7 03       	nop

8000c538 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
8000c538:	eb cd 40 80 	pushm	r7,lr
8000c53c:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000c53e:	48 a8       	lddpc	r8,8000c564 <udi_msc_cbw_invalid+0x2c>
8000c540:	11 88       	ld.ub	r8,r8[0x0]
8000c542:	ec 18 00 01 	eorl	r8,0x1
8000c546:	5c 58       	castu.b	r8
8000c548:	c0 a1       	brne	8000c55c <udi_msc_cbw_invalid+0x24>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
8000c54a:	30 2c       	mov	r12,2
8000c54c:	f0 1f 00 07 	mcall	8000c568 <udi_msc_cbw_invalid+0x30>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
8000c550:	fe cb 00 18 	sub	r11,pc,24
8000c554:	30 2c       	mov	r12,2
8000c556:	f0 1f 00 06 	mcall	8000c56c <udi_msc_cbw_invalid+0x34>
8000c55a:	c0 28       	rjmp	8000c55e <udi_msc_cbw_invalid+0x26>
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000c55c:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_OUT);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
}
8000c55e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c562:	00 00       	add	r0,r0
8000c564:	00 00       	add	r0,r0
8000c566:	08 28       	rsub	r8,r4
8000c568:	80 00       	ld.sh	r0,r0[0x0]
8000c56a:	a3 2c       	st.d	r1++,r12
8000c56c:	80 00       	ld.sh	r0,r0[0x0]
8000c56e:	a7 40       	asr	r0,0x6

8000c570 <udi_msc_csw_invalid>:

static void udi_msc_csw_invalid(void)
{
8000c570:	eb cd 40 80 	pushm	r7,lr
8000c574:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000c576:	48 b8       	lddpc	r8,8000c5a0 <udi_msc_csw_invalid+0x30>
8000c578:	11 88       	ld.ub	r8,r8[0x0]
8000c57a:	ec 18 00 01 	eorl	r8,0x1
8000c57e:	5c 58       	castu.b	r8
8000c580:	c0 c1       	brne	8000c598 <udi_msc_csw_invalid+0x28>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
8000c582:	e0 6c 00 81 	mov	r12,129
8000c586:	f0 1f 00 08 	mcall	8000c5a4 <udi_msc_csw_invalid+0x34>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
8000c58a:	fe cb 00 1a 	sub	r11,pc,26
8000c58e:	e0 6c 00 81 	mov	r12,129
8000c592:	f0 1f 00 06 	mcall	8000c5a8 <udi_msc_csw_invalid+0x38>
8000c596:	c0 28       	rjmp	8000c59a <udi_msc_csw_invalid+0x2a>
}

static void udi_msc_csw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000c598:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_IN);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}
8000c59a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c59e:	00 00       	add	r0,r0
8000c5a0:	00 00       	add	r0,r0
8000c5a2:	08 28       	rsub	r8,r4
8000c5a4:	80 00       	ld.sh	r0,r0[0x0]
8000c5a6:	a3 2c       	st.d	r1++,r12
8000c5a8:	80 00       	ld.sh	r0,r0[0x0]
8000c5aa:	a7 40       	asr	r0,0x6

8000c5ac <udi_msc_cbw_wait>:

static void udi_msc_cbw_wait(void)
{
8000c5ac:	eb cd 40 80 	pushm	r7,lr
8000c5b0:	1a 97       	mov	r7,sp
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
8000c5b2:	48 aa       	lddpc	r10,8000c5d8 <udi_msc_cbw_wait+0x2c>
8000c5b4:	48 a8       	lddpc	r8,8000c5dc <udi_msc_cbw_wait+0x30>
8000c5b6:	31 f9       	mov	r9,31
8000c5b8:	30 1b       	mov	r11,1
8000c5ba:	30 2c       	mov	r12,2
8000c5bc:	f0 1f 00 09 	mcall	8000c5e0 <udi_msc_cbw_wait+0x34>
8000c5c0:	18 98       	mov	r8,r12
8000c5c2:	ec 18 00 01 	eorl	r8,0x1
8000c5c6:	5c 58       	castu.b	r8
8000c5c8:	c0 60       	breq	8000c5d4 <udi_msc_cbw_wait+0x28>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
8000c5ca:	fe cb 00 1e 	sub	r11,pc,30
8000c5ce:	30 2c       	mov	r12,2
8000c5d0:	f0 1f 00 05 	mcall	8000c5e4 <udi_msc_cbw_wait+0x38>
	}
}
8000c5d4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5d8:	00 00       	add	r0,r0
8000c5da:	07 f0       	ld.ub	r0,r3[0x7]
8000c5dc:	80 00       	ld.sh	r0,r0[0x0]
8000c5de:	c5 e8       	rjmp	8000c69a <udi_msc_cbw_received+0xb2>
8000c5e0:	80 00       	ld.sh	r0,r0[0x0]
8000c5e2:	a5 80       	lsr	r0,0x4
8000c5e4:	80 00       	ld.sh	r0,r0[0x0]
8000c5e6:	a7 40       	asr	r0,0x6

8000c5e8 <udi_msc_cbw_received>:


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
8000c5e8:	eb cd 40 80 	pushm	r7,lr
8000c5ec:	1a 97       	mov	r7,sp
8000c5ee:	20 3d       	sub	sp,12
8000c5f0:	ef 4c ff fc 	st.w	r7[-4],r12
8000c5f4:	ef 4b ff f8 	st.w	r7[-8],r11
8000c5f8:	14 98       	mov	r8,r10
8000c5fa:	ef 68 ff f4 	st.b	r7[-12],r8
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
8000c5fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c602:	58 08       	cp.w	r8,0
8000c604:	c6 11       	brne	8000c6c6 <udi_msc_cbw_received+0xde>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000c606:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c60a:	59 f8       	cp.w	r8,31
8000c60c:	c0 91       	brne	8000c61e <udi_msc_cbw_received+0x36>
			|| (udi_msc_cbw.dCBWSignature !=
8000c60e:	4b 18       	lddpc	r8,8000c6d0 <udi_msc_cbw_received+0xe8>
8000c610:	70 08       	ld.w	r8,r8[0x0]
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000c612:	e0 69 42 43 	mov	r9,16963
8000c616:	ea 19 55 53 	orh	r9,0x5553
8000c61a:	12 38       	cp.w	r8,r9
8000c61c:	c0 90       	breq	8000c62e <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
8000c61e:	4a e9       	lddpc	r9,8000c6d4 <udi_msc_cbw_received+0xec>
8000c620:	30 18       	mov	r8,1
8000c622:	b2 88       	st.b	r9[0x0],r8
		udi_msc_cbw_invalid();
8000c624:	f0 1f 00 2d 	mcall	8000c6d8 <udi_msc_cbw_received+0xf0>
		udi_msc_csw_invalid();
8000c628:	f0 1f 00 2d 	mcall	8000c6dc <udi_msc_cbw_received+0xf4>
		return;
8000c62c:	c4 e8       	rjmp	8000c6c8 <udi_msc_cbw_received+0xe0>
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
8000c62e:	4a 98       	lddpc	r8,8000c6d0 <udi_msc_cbw_received+0xe8>
8000c630:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000c634:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000c638:	4a 69       	lddpc	r9,8000c6d0 <udi_msc_cbw_received+0xe8>
8000c63a:	f3 68 00 0d 	st.b	r9[13],r8
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
8000c63e:	4a 58       	lddpc	r8,8000c6d0 <udi_msc_cbw_received+0xe8>
8000c640:	f1 39 00 0d 	ld.ub	r9,r8[13]
8000c644:	4a 78       	lddpc	r8,8000c6e0 <udi_msc_cbw_received+0xf8>
8000c646:	11 88       	ld.ub	r8,r8[0x0]
8000c648:	f0 09 18 00 	cp.b	r9,r8
8000c64c:	e0 88 00 07 	brls	8000c65a <udi_msc_cbw_received+0x72>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
8000c650:	f0 1f 00 25 	mcall	8000c6e4 <udi_msc_cbw_received+0xfc>
		udi_msc_csw_process();
8000c654:	f0 1f 00 25 	mcall	8000c6e8 <udi_msc_cbw_received+0x100>
		return;
8000c658:	c3 88       	rjmp	8000c6c8 <udi_msc_cbw_received+0xe0>
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
8000c65a:	49 e8       	lddpc	r8,8000c6d0 <udi_msc_cbw_received+0xe8>
8000c65c:	70 28       	ld.w	r8,r8[0x8]
8000c65e:	5c b8       	swap.b	r8
8000c660:	10 99       	mov	r9,r8
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
8000c662:	4a 38       	lddpc	r8,8000c6ec <udi_msc_cbw_received+0x104>
8000c664:	91 29       	st.w	r8[0x8],r9
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
8000c666:	49 b8       	lddpc	r8,8000c6d0 <udi_msc_cbw_received+0xe8>
8000c668:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000c66c:	e0 48 00 5a 	cp.w	r8,90
8000c670:	e0 8b 00 26 	brhi	8000c6bc <udi_msc_cbw_received+0xd4>
8000c674:	49 f9       	lddpc	r9,8000c6f0 <udi_msc_cbw_received+0x108>
8000c676:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case SPC_REQUEST_SENSE:
		udi_msc_spc_requestsense();
8000c67a:	f0 1f 00 1f 	mcall	8000c6f4 <udi_msc_cbw_received+0x10c>
		break;
8000c67e:	c2 58       	rjmp	8000c6c8 <udi_msc_cbw_received+0xe0>

	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
8000c680:	f0 1f 00 1e 	mcall	8000c6f8 <udi_msc_cbw_received+0x110>
		break;
8000c684:	c2 28       	rjmp	8000c6c8 <udi_msc_cbw_received+0xe0>

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
8000c686:	30 0c       	mov	r12,0
8000c688:	f0 1f 00 1d 	mcall	8000c6fc <udi_msc_cbw_received+0x114>
		break;
8000c68c:	c1 e8       	rjmp	8000c6c8 <udi_msc_cbw_received+0xe0>
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
8000c68e:	30 1c       	mov	r12,1
8000c690:	f0 1f 00 1b 	mcall	8000c6fc <udi_msc_cbw_received+0x114>
		break;
8000c694:	c1 a8       	rjmp	8000c6c8 <udi_msc_cbw_received+0xe0>

	case SPC_TEST_UNIT_READY:
		udi_msc_spc_testunitready();
8000c696:	f0 1f 00 1b 	mcall	8000c700 <udi_msc_cbw_received+0x118>
		break;
8000c69a:	c1 78       	rjmp	8000c6c8 <udi_msc_cbw_received+0xe0>

	case SBC_READ_CAPACITY10:
		udi_msc_sbc_read_capacity();
8000c69c:	f0 1f 00 1a 	mcall	8000c704 <udi_msc_cbw_received+0x11c>
		break;
8000c6a0:	c1 48       	rjmp	8000c6c8 <udi_msc_cbw_received+0xe0>
	case SBC_START_STOP_UNIT:
		// Accepts request to support plug/plug in case of card reader
	case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
8000c6a2:	f0 1f 00 1a 	mcall	8000c708 <udi_msc_cbw_received+0x120>
		udi_msc_csw_process();
8000c6a6:	f0 1f 00 11 	mcall	8000c6e8 <udi_msc_cbw_received+0x100>
		break;
8000c6aa:	c0 f8       	rjmp	8000c6c8 <udi_msc_cbw_received+0xe0>

	case SBC_READ10:
		udi_msc_sbc_trans(true);
8000c6ac:	30 1c       	mov	r12,1
8000c6ae:	f0 1f 00 18 	mcall	8000c70c <udi_msc_cbw_received+0x124>
		break;
8000c6b2:	c0 b8       	rjmp	8000c6c8 <udi_msc_cbw_received+0xe0>

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
8000c6b4:	30 0c       	mov	r12,0
8000c6b6:	f0 1f 00 16 	mcall	8000c70c <udi_msc_cbw_received+0x124>
		break;
8000c6ba:	c0 78       	rjmp	8000c6c8 <udi_msc_cbw_received+0xe0>

	default:
		udi_msc_sense_command_invalid();
8000c6bc:	f0 1f 00 15 	mcall	8000c710 <udi_msc_cbw_received+0x128>
		udi_msc_csw_process();
8000c6c0:	f0 1f 00 0a 	mcall	8000c6e8 <udi_msc_cbw_received+0x100>
8000c6c4:	c0 28       	rjmp	8000c6c8 <udi_msc_cbw_received+0xe0>
{
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
		// Transfer aborted
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000c6c6:	d7 03       	nop
	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
		break;
	}
}
8000c6c8:	2f dd       	sub	sp,-12
8000c6ca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c6ce:	00 00       	add	r0,r0
8000c6d0:	00 00       	add	r0,r0
8000c6d2:	07 f0       	ld.ub	r0,r3[0x7]
8000c6d4:	00 00       	add	r0,r0
8000c6d6:	08 28       	rsub	r8,r4
8000c6d8:	80 00       	ld.sh	r0,r0[0x0]
8000c6da:	c5 38       	rjmp	8000c780 <udi_msc_data_send+0xc>
8000c6dc:	80 00       	ld.sh	r0,r0[0x0]
8000c6de:	c5 70       	breq	8000c78c <udi_msc_data_send+0x18>
8000c6e0:	00 00       	add	r0,r0
8000c6e2:	08 10       	sub	r0,r4
8000c6e4:	80 00       	ld.sh	r0,r0[0x0]
8000c6e6:	ca 10       	breq	8000c628 <udi_msc_cbw_received+0x40>
8000c6e8:	80 00       	ld.sh	r0,r0[0x0]
8000c6ea:	c8 10       	breq	8000c5ec <udi_msc_cbw_received+0x4>
8000c6ec:	00 00       	add	r0,r0
8000c6ee:	01 54       	ld.sh	r4,--r0
8000c6f0:	80 00       	ld.sh	r0,r0[0x0]
8000c6f2:	f2 5c 80 00 	cp.w	r12,-819200
8000c6f6:	ca 48       	rjmp	8000c83e <udi_msc_csw_process+0x2e>
8000c6f8:	80 00       	ld.sh	r0,r0[0x0]
8000c6fa:	ca ac       	rcall	8000c84e <udi_msc_csw_process+0x3e>
8000c6fc:	80 00       	ld.sh	r0,r0[0x0]
8000c6fe:	cc 44       	brge	8000c686 <udi_msc_cbw_received+0x9e>
8000c700:	80 00       	ld.sh	r0,r0[0x0]
8000c702:	cc 1c       	rcall	8000c884 <udi_msc_csw_send+0x18>
8000c704:	80 00       	ld.sh	r0,r0[0x0]
8000c706:	cd 94       	brge	8000c6b8 <udi_msc_cbw_received+0xd0>
8000c708:	80 00       	ld.sh	r0,r0[0x0]
8000c70a:	c9 84       	brge	8000c63a <udi_msc_cbw_received+0x52>
8000c70c:	80 00       	ld.sh	r0,r0[0x0]
8000c70e:	ce 30       	breq	8000c6d4 <udi_msc_cbw_received+0xec>
8000c710:	80 00       	ld.sh	r0,r0[0x0]
8000c712:	ca 2c       	rcall	8000c856 <udi_msc_csw_process+0x46>

8000c714 <udi_msc_cbw_validate>:


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
8000c714:	eb cd 40 80 	pushm	r7,lr
8000c718:	1a 97       	mov	r7,sp
8000c71a:	20 2d       	sub	sp,8
8000c71c:	ef 4c ff fc 	st.w	r7[-4],r12
8000c720:	16 98       	mov	r8,r11
8000c722:	ef 68 ff f8 	st.b	r7[-8],r8
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000c726:	49 08       	lddpc	r8,8000c764 <udi_msc_cbw_validate+0x50>
8000c728:	f1 39 00 0c 	ld.ub	r9,r8[12]
8000c72c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c730:	f3 e8 20 08 	eor	r8,r9,r8
8000c734:	5c 58       	castu.b	r8
8000c736:	10 99       	mov	r9,r8
8000c738:	30 08       	mov	r8,0
8000c73a:	f0 09 18 00 	cp.b	r9,r8
8000c73e:	c0 75       	brlt	8000c74c <udi_msc_cbw_validate+0x38>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
8000c740:	48 a8       	lddpc	r8,8000c768 <udi_msc_cbw_validate+0x54>
8000c742:	70 29       	ld.w	r9,r8[0x8]
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000c744:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c748:	10 39       	cp.w	r9,r8
8000c74a:	c0 72       	brcc	8000c758 <udi_msc_cbw_validate+0x44>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
		udi_msc_sense_fail_cdb_invalid();
8000c74c:	f0 1f 00 08 	mcall	8000c76c <udi_msc_cbw_validate+0x58>
		udi_msc_csw_process();
8000c750:	f0 1f 00 08 	mcall	8000c770 <udi_msc_cbw_validate+0x5c>
		return false;
8000c754:	30 08       	mov	r8,0
8000c756:	c0 28       	rjmp	8000c75a <udi_msc_cbw_validate+0x46>
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
8000c758:	30 18       	mov	r8,1
}
8000c75a:	10 9c       	mov	r12,r8
8000c75c:	2f ed       	sub	sp,-8
8000c75e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c762:	00 00       	add	r0,r0
8000c764:	00 00       	add	r0,r0
8000c766:	07 f0       	ld.ub	r0,r3[0x7]
8000c768:	00 00       	add	r0,r0
8000c76a:	01 54       	ld.sh	r4,--r0
8000c76c:	80 00       	ld.sh	r0,r0[0x0]
8000c76e:	ca 10       	breq	8000c6b0 <udi_msc_cbw_received+0xc8>
8000c770:	80 00       	ld.sh	r0,r0[0x0]
8000c772:	c8 10       	breq	8000c674 <udi_msc_cbw_received+0x8c>

8000c774 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
8000c774:	eb cd 40 80 	pushm	r7,lr
8000c778:	1a 97       	mov	r7,sp
8000c77a:	20 2d       	sub	sp,8
8000c77c:	ef 4c ff fc 	st.w	r7[-4],r12
8000c780:	16 98       	mov	r8,r11
8000c782:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
8000c786:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c78a:	48 b8       	lddpc	r8,8000c7b4 <udi_msc_data_send+0x40>
8000c78c:	ee fa ff fc 	ld.w	r10,r7[-4]
8000c790:	30 1b       	mov	r11,1
8000c792:	e0 6c 00 81 	mov	r12,129
8000c796:	f0 1f 00 09 	mcall	8000c7b8 <udi_msc_data_send+0x44>
8000c79a:	18 98       	mov	r8,r12
8000c79c:	ec 18 00 01 	eorl	r8,0x1
8000c7a0:	5c 58       	castu.b	r8
8000c7a2:	c0 50       	breq	8000c7ac <udi_msc_data_send+0x38>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
8000c7a4:	f0 1f 00 06 	mcall	8000c7bc <udi_msc_data_send+0x48>
		udi_msc_csw_process();
8000c7a8:	f0 1f 00 06 	mcall	8000c7c0 <udi_msc_data_send+0x4c>
	}
}
8000c7ac:	2f ed       	sub	sp,-8
8000c7ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c7b2:	00 00       	add	r0,r0
8000c7b4:	80 00       	ld.sh	r0,r0[0x0]
8000c7b6:	c7 c4       	brge	8000c8ae <udi_msc_csw_send+0x42>
8000c7b8:	80 00       	ld.sh	r0,r0[0x0]
8000c7ba:	a5 80       	lsr	r0,0x4
8000c7bc:	80 00       	ld.sh	r0,r0[0x0]
8000c7be:	c9 dc       	rcall	8000c8f8 <udi_msc_clear_sense+0x24>
8000c7c0:	80 00       	ld.sh	r0,r0[0x0]
8000c7c2:	c8 10       	breq	8000c6c4 <udi_msc_cbw_received+0xdc>

8000c7c4 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000c7c4:	eb cd 40 80 	pushm	r7,lr
8000c7c8:	1a 97       	mov	r7,sp
8000c7ca:	20 3d       	sub	sp,12
8000c7cc:	ef 4c ff fc 	st.w	r7[-4],r12
8000c7d0:	ef 4b ff f8 	st.w	r7[-8],r11
8000c7d4:	14 98       	mov	r8,r10
8000c7d6:	ef 68 ff f4 	st.b	r7[-12],r8
	if (UDD_EP_TRANSFER_OK != status) {
8000c7da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c7de:	58 08       	cp.w	r8,0
8000c7e0:	c0 d1       	brne	8000c7fa <udi_msc_data_sent+0x36>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
8000c7e2:	f0 1f 00 09 	mcall	8000c804 <udi_msc_data_sent+0x40>
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
8000c7e6:	48 98       	lddpc	r8,8000c808 <udi_msc_data_sent+0x44>
8000c7e8:	70 29       	ld.w	r9,r8[0x8]
8000c7ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c7ee:	10 19       	sub	r9,r8
8000c7f0:	48 68       	lddpc	r8,8000c808 <udi_msc_data_sent+0x44>
8000c7f2:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_process();
8000c7f4:	f0 1f 00 06 	mcall	8000c80c <udi_msc_data_sent+0x48>
8000c7f8:	c0 28       	rjmp	8000c7fc <udi_msc_data_sent+0x38>
		udd_ep_id_t ep)
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000c7fa:	d7 03       	nop
	// Update sense data
	udi_msc_sense_pass();
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
	udi_msc_csw_process();
}
8000c7fc:	2f dd       	sub	sp,-12
8000c7fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c802:	00 00       	add	r0,r0
8000c804:	80 00       	ld.sh	r0,r0[0x0]
8000c806:	c9 84       	brge	8000c736 <udi_msc_cbw_validate+0x22>
8000c808:	00 00       	add	r0,r0
8000c80a:	01 54       	ld.sh	r4,--r0
8000c80c:	80 00       	ld.sh	r0,r0[0x0]
8000c80e:	c8 10       	breq	8000c710 <udi_msc_cbw_received+0x128>

8000c810 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
8000c810:	eb cd 40 80 	pushm	r7,lr
8000c814:	1a 97       	mov	r7,sp
	if (0 != udi_msc_csw.dCSWDataResidue) {
8000c816:	49 28       	lddpc	r8,8000c85c <udi_msc_csw_process+0x4c>
8000c818:	70 28       	ld.w	r8,r8[0x8]
8000c81a:	58 08       	cp.w	r8,0
8000c81c:	c1 10       	breq	8000c83e <udi_msc_csw_process+0x2e>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
8000c81e:	49 18       	lddpc	r8,8000c860 <udi_msc_csw_process+0x50>
8000c820:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000c824:	10 99       	mov	r9,r8
8000c826:	30 08       	mov	r8,0
8000c828:	f0 09 18 00 	cp.b	r9,r8
8000c82c:	c0 64       	brge	8000c838 <udi_msc_csw_process+0x28>
			udd_ep_set_halt(UDI_MSC_EP_IN);
8000c82e:	e0 6c 00 81 	mov	r12,129
8000c832:	f0 1f 00 0d 	mcall	8000c864 <udi_msc_csw_process+0x54>
8000c836:	c0 48       	rjmp	8000c83e <udi_msc_csw_process+0x2e>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
8000c838:	30 2c       	mov	r12,2
8000c83a:	f0 1f 00 0b 	mcall	8000c864 <udi_msc_csw_process+0x54>
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
8000c83e:	48 98       	lddpc	r8,8000c860 <udi_msc_csw_process+0x50>
8000c840:	70 19       	ld.w	r9,r8[0x4]
8000c842:	48 78       	lddpc	r8,8000c85c <udi_msc_csw_process+0x4c>
8000c844:	91 19       	st.w	r8[0x4],r9
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
8000c846:	48 68       	lddpc	r8,8000c85c <udi_msc_csw_process+0x4c>
8000c848:	70 28       	ld.w	r8,r8[0x8]
8000c84a:	5c b8       	swap.b	r8
8000c84c:	10 99       	mov	r9,r8
8000c84e:	48 48       	lddpc	r8,8000c85c <udi_msc_csw_process+0x4c>
8000c850:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_send();
8000c852:	f0 1f 00 06 	mcall	8000c868 <udi_msc_csw_process+0x58>
}
8000c856:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c85a:	00 00       	add	r0,r0
8000c85c:	00 00       	add	r0,r0
8000c85e:	01 54       	ld.sh	r4,--r0
8000c860:	00 00       	add	r0,r0
8000c862:	07 f0       	ld.ub	r0,r3[0x7]
8000c864:	80 00       	ld.sh	r0,r0[0x0]
8000c866:	a3 2c       	st.d	r1++,r12
8000c868:	80 00       	ld.sh	r0,r0[0x0]
8000c86a:	c8 6c       	rcall	8000c976 <udi_msc_sense_fail+0x7a>

8000c86c <udi_msc_csw_send>:


void udi_msc_csw_send(void)
{
8000c86c:	eb cd 40 80 	pushm	r7,lr
8000c870:	1a 97       	mov	r7,sp
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
8000c872:	48 ba       	lddpc	r10,8000c89c <udi_msc_csw_send+0x30>
8000c874:	48 b8       	lddpc	r8,8000c8a0 <udi_msc_csw_send+0x34>
8000c876:	30 d9       	mov	r9,13
8000c878:	30 0b       	mov	r11,0
8000c87a:	e0 6c 00 81 	mov	r12,129
8000c87e:	f0 1f 00 0a 	mcall	8000c8a4 <udi_msc_csw_send+0x38>
8000c882:	18 98       	mov	r8,r12
8000c884:	ec 18 00 01 	eorl	r8,0x1
8000c888:	5c 58       	castu.b	r8
8000c88a:	c0 60       	breq	8000c896 <udi_msc_csw_send+0x2a>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
8000c88c:	48 7b       	lddpc	r11,8000c8a8 <udi_msc_csw_send+0x3c>
8000c88e:	e0 6c 00 81 	mov	r12,129
8000c892:	f0 1f 00 07 	mcall	8000c8ac <udi_msc_csw_send+0x40>
	}
}
8000c896:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c89a:	00 00       	add	r0,r0
8000c89c:	00 00       	add	r0,r0
8000c89e:	01 54       	ld.sh	r4,--r0
8000c8a0:	80 00       	ld.sh	r0,r0[0x0]
8000c8a2:	c8 b0       	breq	8000c7b8 <udi_msc_data_send+0x44>
8000c8a4:	80 00       	ld.sh	r0,r0[0x0]
8000c8a6:	a5 80       	lsr	r0,0x4
8000c8a8:	80 00       	ld.sh	r0,r0[0x0]
8000c8aa:	c8 6c       	rcall	8000c9b6 <udi_msc_sense_fail_not_present+0x12>
8000c8ac:	80 00       	ld.sh	r0,r0[0x0]
8000c8ae:	a7 40       	asr	r0,0x6

8000c8b0 <udi_msc_csw_sent>:


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000c8b0:	eb cd 40 80 	pushm	r7,lr
8000c8b4:	1a 97       	mov	r7,sp
8000c8b6:	20 3d       	sub	sp,12
8000c8b8:	ef 4c ff fc 	st.w	r7[-4],r12
8000c8bc:	ef 4b ff f8 	st.w	r7[-8],r11
8000c8c0:	14 98       	mov	r8,r10
8000c8c2:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
8000c8c6:	f0 1f 00 03 	mcall	8000c8d0 <udi_msc_csw_sent+0x20>
}
8000c8ca:	2f dd       	sub	sp,-12
8000c8cc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8d0:	80 00       	ld.sh	r0,r0[0x0]
8000c8d2:	c5 ac       	rcall	8000c986 <udi_msc_sense_pass+0x2>

8000c8d4 <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
8000c8d4:	eb cd 40 80 	pushm	r7,lr
8000c8d8:	1a 97       	mov	r7,sp
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
8000c8da:	31 2a       	mov	r10,18
8000c8dc:	30 0b       	mov	r11,0
8000c8de:	48 6c       	lddpc	r12,8000c8f4 <udi_msc_clear_sense+0x20>
8000c8e0:	f0 1f 00 06 	mcall	8000c8f8 <udi_msc_clear_sense+0x24>
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
8000c8e4:	48 49       	lddpc	r9,8000c8f4 <udi_msc_clear_sense+0x20>
8000c8e6:	3f 08       	mov	r8,-16
8000c8e8:	b2 88       	st.b	r9[0x0],r8
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
8000c8ea:	48 39       	lddpc	r9,8000c8f4 <udi_msc_clear_sense+0x20>
8000c8ec:	30 a8       	mov	r8,10
8000c8ee:	b2 f8       	st.b	r9[0x7],r8
}
8000c8f0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8f4:	00 00       	add	r0,r0
8000c8f6:	08 14       	sub	r4,r4
8000c8f8:	80 00       	ld.sh	r0,r0[0x0]
8000c8fa:	e8 e2 eb cd 	ld.d	r2,r4[-5171]

8000c8fc <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
8000c8fc:	eb cd 40 80 	pushm	r7,lr
8000c900:	1a 97       	mov	r7,sp
8000c902:	20 3d       	sub	sp,12
8000c904:	18 99       	mov	r9,r12
8000c906:	16 98       	mov	r8,r11
8000c908:	ef 4a ff f4 	st.w	r7[-12],r10
8000c90c:	ef 69 ff fc 	st.b	r7[-4],r9
8000c910:	ef 58 ff f8 	st.h	r7[-8],r8
	udi_msc_clear_sense();
8000c914:	f0 1f 00 19 	mcall	8000c978 <udi_msc_sense_fail+0x7c>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
8000c918:	49 99       	lddpc	r9,8000c97c <udi_msc_sense_fail+0x80>
8000c91a:	30 18       	mov	r8,1
8000c91c:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.sense_flag_key = sense_key;
8000c920:	49 89       	lddpc	r9,8000c980 <udi_msc_sense_fail+0x84>
8000c922:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c926:	b2 a8       	st.b	r9[0x2],r8
	udi_msc_sense.information[0] = lba >> 24;
8000c928:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c92c:	b9 88       	lsr	r8,0x18
8000c92e:	5c 58       	castu.b	r8
8000c930:	49 49       	lddpc	r9,8000c980 <udi_msc_sense_fail+0x84>
8000c932:	b2 b8       	st.b	r9[0x3],r8
	udi_msc_sense.information[1] = lba >> 16;
8000c934:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c938:	b1 88       	lsr	r8,0x10
8000c93a:	5c 58       	castu.b	r8
8000c93c:	49 19       	lddpc	r9,8000c980 <udi_msc_sense_fail+0x84>
8000c93e:	b2 c8       	st.b	r9[0x4],r8
	udi_msc_sense.information[2] = lba >> 8;
8000c940:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c944:	a9 88       	lsr	r8,0x8
8000c946:	5c 58       	castu.b	r8
8000c948:	48 e9       	lddpc	r9,8000c980 <udi_msc_sense_fail+0x84>
8000c94a:	b2 d8       	st.b	r9[0x5],r8
	udi_msc_sense.information[3] = lba;
8000c94c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c950:	5c 58       	castu.b	r8
8000c952:	48 c9       	lddpc	r9,8000c980 <udi_msc_sense_fail+0x84>
8000c954:	b2 e8       	st.b	r9[0x6],r8
	udi_msc_sense.AddSenseCode = add_sense >> 8;
8000c956:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000c95a:	a9 88       	lsr	r8,0x8
8000c95c:	5c 88       	casts.h	r8
8000c95e:	5c 58       	castu.b	r8
8000c960:	48 89       	lddpc	r9,8000c980 <udi_msc_sense_fail+0x84>
8000c962:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
8000c966:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000c96a:	5c 58       	castu.b	r8
8000c96c:	48 59       	lddpc	r9,8000c980 <udi_msc_sense_fail+0x84>
8000c96e:	f3 68 00 0d 	st.b	r9[13],r8
}
8000c972:	2f dd       	sub	sp,-12
8000c974:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c978:	80 00       	ld.sh	r0,r0[0x0]
8000c97a:	c8 d4       	brge	8000c894 <udi_msc_csw_send+0x28>
8000c97c:	00 00       	add	r0,r0
8000c97e:	01 54       	ld.sh	r4,--r0
8000c980:	00 00       	add	r0,r0
8000c982:	08 14       	sub	r4,r4

8000c984 <udi_msc_sense_pass>:

static void udi_msc_sense_pass(void)
{
8000c984:	eb cd 40 80 	pushm	r7,lr
8000c988:	1a 97       	mov	r7,sp
	udi_msc_clear_sense();
8000c98a:	f0 1f 00 05 	mcall	8000c99c <udi_msc_sense_pass+0x18>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
8000c98e:	48 59       	lddpc	r9,8000c9a0 <udi_msc_sense_pass+0x1c>
8000c990:	30 08       	mov	r8,0
8000c992:	f3 68 00 0c 	st.b	r9[12],r8
}
8000c996:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c99a:	00 00       	add	r0,r0
8000c99c:	80 00       	ld.sh	r0,r0[0x0]
8000c99e:	c8 d4       	brge	8000c8b8 <udi_msc_csw_sent+0x8>
8000c9a0:	00 00       	add	r0,r0
8000c9a2:	01 54       	ld.sh	r4,--r0

8000c9a4 <udi_msc_sense_fail_not_present>:


static void udi_msc_sense_fail_not_present(void)
{
8000c9a4:	eb cd 40 80 	pushm	r7,lr
8000c9a8:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
8000c9aa:	30 0a       	mov	r10,0
8000c9ac:	e0 6b 3a 00 	mov	r11,14848
8000c9b0:	30 2c       	mov	r12,2
8000c9b2:	f0 1f 00 03 	mcall	8000c9bc <udi_msc_sense_fail_not_present+0x18>
}
8000c9b6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9ba:	00 00       	add	r0,r0
8000c9bc:	80 00       	ld.sh	r0,r0[0x0]
8000c9be:	c8 fc       	rcall	8000cadc <udi_msc_spc_inquiry+0x30>

8000c9c0 <udi_msc_sense_fail_busy_or_change>:

static void udi_msc_sense_fail_busy_or_change(void)
{
8000c9c0:	eb cd 40 80 	pushm	r7,lr
8000c9c4:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
8000c9c6:	30 0a       	mov	r10,0
8000c9c8:	e0 6b 28 00 	mov	r11,10240
8000c9cc:	30 6c       	mov	r12,6
8000c9ce:	f0 1f 00 03 	mcall	8000c9d8 <udi_msc_sense_fail_busy_or_change+0x18>
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}
8000c9d2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9d6:	00 00       	add	r0,r0
8000c9d8:	80 00       	ld.sh	r0,r0[0x0]
8000c9da:	c8 fc       	rcall	8000caf8 <udi_msc_spc_inquiry+0x4c>

8000c9dc <udi_msc_sense_fail_hardware>:

static void udi_msc_sense_fail_hardware(void)
{
8000c9dc:	eb cd 40 80 	pushm	r7,lr
8000c9e0:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
8000c9e2:	30 0a       	mov	r10,0
8000c9e4:	30 0b       	mov	r11,0
8000c9e6:	30 4c       	mov	r12,4
8000c9e8:	f0 1f 00 02 	mcall	8000c9f0 <udi_msc_sense_fail_hardware+0x14>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}
8000c9ec:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9f0:	80 00       	ld.sh	r0,r0[0x0]
8000c9f2:	c8 fc       	rcall	8000cb10 <udi_msc_spc_inquiry+0x64>

8000c9f4 <udi_msc_sense_fail_protected>:

static void udi_msc_sense_fail_protected(void)
{
8000c9f4:	eb cd 40 80 	pushm	r7,lr
8000c9f8:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
8000c9fa:	30 0a       	mov	r10,0
8000c9fc:	e0 6b 27 00 	mov	r11,9984
8000ca00:	30 7c       	mov	r12,7
8000ca02:	f0 1f 00 03 	mcall	8000ca0c <udi_msc_sense_fail_protected+0x18>
}
8000ca06:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca0a:	00 00       	add	r0,r0
8000ca0c:	80 00       	ld.sh	r0,r0[0x0]
8000ca0e:	c8 fc       	rcall	8000cb2c <udi_msc_spc_inquiry+0x80>

8000ca10 <udi_msc_sense_fail_cdb_invalid>:

static void udi_msc_sense_fail_cdb_invalid(void)
{
8000ca10:	eb cd 40 80 	pushm	r7,lr
8000ca14:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000ca16:	30 0a       	mov	r10,0
8000ca18:	e0 6b 24 00 	mov	r11,9216
8000ca1c:	30 5c       	mov	r12,5
8000ca1e:	f0 1f 00 03 	mcall	8000ca28 <udi_msc_sense_fail_cdb_invalid+0x18>
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
8000ca22:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca26:	00 00       	add	r0,r0
8000ca28:	80 00       	ld.sh	r0,r0[0x0]
8000ca2a:	c8 fc       	rcall	8000cb48 <udi_msc_spc_inquiry+0x9c>

8000ca2c <udi_msc_sense_command_invalid>:

static void udi_msc_sense_command_invalid(void)
{
8000ca2c:	eb cd 40 80 	pushm	r7,lr
8000ca30:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000ca32:	30 0a       	mov	r10,0
8000ca34:	e0 6b 20 00 	mov	r11,8192
8000ca38:	30 5c       	mov	r12,5
8000ca3a:	f0 1f 00 03 	mcall	8000ca44 <udi_msc_sense_command_invalid+0x18>
			SCSI_ASC_INVALID_COMMAND_OPERATION_CODE, 0);
}
8000ca3e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca42:	00 00       	add	r0,r0
8000ca44:	80 00       	ld.sh	r0,r0[0x0]
8000ca46:	c8 fc       	rcall	8000cb64 <udi_msc_spc_inquiry+0xb8>

8000ca48 <udi_msc_spc_requestsense>:

//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
8000ca48:	eb cd 40 80 	pushm	r7,lr
8000ca4c:	1a 97       	mov	r7,sp
8000ca4e:	20 1d       	sub	sp,4
	uint8_t length = udi_msc_cbw.CDB[4];
8000ca50:	49 38       	lddpc	r8,8000ca9c <udi_msc_spc_requestsense+0x54>
8000ca52:	f1 38 00 13 	ld.ub	r8,r8[19]
8000ca56:	ef 68 ff ff 	st.b	r7[-1],r8

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
8000ca5a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ca5e:	31 28       	mov	r8,18
8000ca60:	f0 09 18 00 	cp.b	r9,r8
8000ca64:	e0 88 00 05 	brls	8000ca6e <udi_msc_spc_requestsense+0x26>
		length = sizeof(udi_msc_sense);
8000ca68:	31 28       	mov	r8,18
8000ca6a:	ef 68 ff ff 	st.b	r7[-1],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000ca6e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ca72:	e0 6b 00 80 	mov	r11,128
8000ca76:	10 9c       	mov	r12,r8
8000ca78:	f0 1f 00 0a 	mcall	8000caa0 <udi_msc_spc_requestsense+0x58>
8000ca7c:	18 98       	mov	r8,r12
8000ca7e:	ec 18 00 01 	eorl	r8,0x1
8000ca82:	5c 58       	castu.b	r8
8000ca84:	c0 81       	brne	8000ca94 <udi_msc_spc_requestsense+0x4c>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
8000ca86:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ca8a:	10 9b       	mov	r11,r8
8000ca8c:	48 6c       	lddpc	r12,8000caa4 <udi_msc_spc_requestsense+0x5c>
8000ca8e:	f0 1f 00 07 	mcall	8000caa8 <udi_msc_spc_requestsense+0x60>
8000ca92:	c0 28       	rjmp	8000ca96 <udi_msc_spc_requestsense+0x4e>
	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000ca94:	d7 03       	nop
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
}
8000ca96:	2f fd       	sub	sp,-4
8000ca98:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca9c:	00 00       	add	r0,r0
8000ca9e:	07 f0       	ld.ub	r0,r3[0x7]
8000caa0:	80 00       	ld.sh	r0,r0[0x0]
8000caa2:	c7 14       	brge	8000cb84 <udi_msc_spc_inquiry+0xd8>
8000caa4:	00 00       	add	r0,r0
8000caa6:	08 14       	sub	r4,r4
8000caa8:	80 00       	ld.sh	r0,r0[0x0]
8000caaa:	c7 74       	brge	8000cb98 <udi_msc_spc_inquiry+0xec>

8000caac <udi_msc_spc_inquiry>:


static void udi_msc_spc_inquiry(void)
{
8000caac:	eb cd 40 80 	pushm	r7,lr
8000cab0:	1a 97       	mov	r7,sp
8000cab2:	20 1d       	sub	sp,4
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
8000cab4:	4b e8       	lddpc	r8,8000cbac <udi_msc_spc_inquiry+0x100>
8000cab6:	f1 38 00 13 	ld.ub	r8,r8[19]
8000caba:	ef 68 ff fe 	st.b	r7[-2],r8

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
8000cabe:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000cac2:	32 48       	mov	r8,36
8000cac4:	f0 09 18 00 	cp.b	r9,r8
8000cac8:	e0 88 00 05 	brls	8000cad2 <udi_msc_spc_inquiry+0x26>
		length = sizeof(udi_msc_inquiry_data);
8000cacc:	32 48       	mov	r8,36
8000cace:	ef 68 ff fe 	st.b	r7[-2],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000cad2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000cad6:	e0 6b 00 80 	mov	r11,128
8000cada:	10 9c       	mov	r12,r8
8000cadc:	f0 1f 00 35 	mcall	8000cbb0 <udi_msc_spc_inquiry+0x104>
8000cae0:	18 98       	mov	r8,r12
8000cae2:	ec 18 00 01 	eorl	r8,0x1
8000cae6:	5c 58       	castu.b	r8
8000cae8:	c5 e1       	brne	8000cba4 <udi_msc_spc_inquiry+0xf8>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000caea:	4b 18       	lddpc	r8,8000cbac <udi_msc_spc_inquiry+0x100>
8000caec:	f1 38 00 10 	ld.ub	r8,r8[16]
8000caf0:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000caf4:	c0 61       	brne	8000cb00 <udi_msc_spc_inquiry+0x54>
			|| (0 != udi_msc_cbw.CDB[2])) {
8000caf6:	4a e8       	lddpc	r8,8000cbac <udi_msc_spc_inquiry+0x100>
8000caf8:	f1 38 00 11 	ld.ub	r8,r8[17]
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000cafc:	58 08       	cp.w	r8,0
8000cafe:	c0 60       	breq	8000cb0a <udi_msc_spc_inquiry+0x5e>
			|| (0 != udi_msc_cbw.CDB[2])) {
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
8000cb00:	f0 1f 00 2d 	mcall	8000cbb4 <udi_msc_spc_inquiry+0x108>
		udi_msc_csw_process();
8000cb04:	f0 1f 00 2d 	mcall	8000cbb8 <udi_msc_spc_inquiry+0x10c>
		return;
8000cb08:	c4 f8       	rjmp	8000cba6 <udi_msc_spc_inquiry+0xfa>
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
8000cb0a:	4a 98       	lddpc	r8,8000cbac <udi_msc_spc_inquiry+0x100>
8000cb0c:	f1 38 00 0d 	ld.ub	r8,r8[13]
		return;
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
8000cb10:	10 9c       	mov	r12,r8
8000cb12:	f0 1f 00 2b 	mcall	8000cbbc <udi_msc_spc_inquiry+0x110>
8000cb16:	18 98       	mov	r8,r12
8000cb18:	f0 c9 ff ff 	sub	r9,r8,-1
8000cb1c:	4a 98       	lddpc	r8,8000cbc0 <udi_msc_spc_inquiry+0x114>
8000cb1e:	2f 08       	sub	r8,-16
8000cb20:	31 0a       	mov	r10,16
8000cb22:	12 9b       	mov	r11,r9
8000cb24:	10 9c       	mov	r12,r8
8000cb26:	f0 1f 00 28 	mcall	8000cbc4 <udi_msc_spc_inquiry+0x118>
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
8000cb2a:	30 08       	mov	r8,0
8000cb2c:	ef 68 ff ff 	st.b	r7[-1],r8
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000cb30:	c1 a8       	rjmp	8000cb64 <udi_msc_spc_inquiry+0xb8>
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000cb32:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cb36:	4a 39       	lddpc	r9,8000cbc0 <udi_msc_spc_inquiry+0x114>
8000cb38:	f2 08 00 08 	add	r8,r9,r8
8000cb3c:	f1 38 00 10 	ld.ub	r8,r8[16]
8000cb40:	58 08       	cp.w	r8,0
8000cb42:	c2 40       	breq	8000cb8a <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
8000cb44:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cb48:	49 e9       	lddpc	r9,8000cbc0 <udi_msc_spc_inquiry+0x114>
8000cb4a:	f2 08 00 08 	add	r8,r9,r8
8000cb4e:	f1 39 00 10 	ld.ub	r9,r8[16]
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000cb52:	32 28       	mov	r8,34
8000cb54:	f0 09 18 00 	cp.b	r9,r8
8000cb58:	c1 90       	breq	8000cb8a <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
8000cb5a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cb5e:	2f f8       	sub	r8,-1
8000cb60:	ef 68 ff ff 	st.b	r7[-1],r8
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000cb64:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000cb68:	31 08       	mov	r8,16
8000cb6a:	f0 09 18 00 	cp.b	r9,r8
8000cb6e:	ce 21       	brne	8000cb32 <udi_msc_spc_inquiry+0x86>
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000cb70:	c0 d8       	rjmp	8000cb8a <udi_msc_spc_inquiry+0xde>
		udi_msc_inquiry_data.product_id[i] = ' ';
8000cb72:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cb76:	49 39       	lddpc	r9,8000cbc0 <udi_msc_spc_inquiry+0x114>
8000cb78:	10 09       	add	r9,r8
8000cb7a:	32 08       	mov	r8,32
8000cb7c:	f3 68 00 10 	st.b	r9[16],r8
		i++;
8000cb80:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cb84:	2f f8       	sub	r8,-1
8000cb86:	ef 68 ff ff 	st.b	r7[-1],r8
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000cb8a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000cb8e:	31 08       	mov	r8,16
8000cb90:	f0 09 18 00 	cp.b	r9,r8
8000cb94:	ce f1       	brne	8000cb72 <udi_msc_spc_inquiry+0xc6>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
8000cb96:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000cb9a:	10 9b       	mov	r11,r8
8000cb9c:	48 9c       	lddpc	r12,8000cbc0 <udi_msc_spc_inquiry+0x114>
8000cb9e:	f0 1f 00 0b 	mcall	8000cbc8 <udi_msc_spc_inquiry+0x11c>
8000cba2:	c0 28       	rjmp	8000cba6 <udi_msc_spc_inquiry+0xfa>
	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000cba4:	d7 03       	nop
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
}
8000cba6:	2f fd       	sub	sp,-4
8000cba8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cbac:	00 00       	add	r0,r0
8000cbae:	07 f0       	ld.ub	r0,r3[0x7]
8000cbb0:	80 00       	ld.sh	r0,r0[0x0]
8000cbb2:	c7 14       	brge	8000cc94 <udi_msc_spc_mode_sense+0x50>
8000cbb4:	80 00       	ld.sh	r0,r0[0x0]
8000cbb6:	ca 10       	breq	8000caf8 <udi_msc_spc_inquiry+0x4c>
8000cbb8:	80 00       	ld.sh	r0,r0[0x0]
8000cbba:	c8 10       	breq	8000cabc <udi_msc_spc_inquiry+0x10>
8000cbbc:	80 00       	ld.sh	r0,r0[0x0]
8000cbbe:	c1 84       	brge	8000cbee <udi_msc_spc_testunitready_global+0x22>
8000cbc0:	00 00       	add	r0,r0
8000cbc2:	01 68       	ld.uh	r8,--r0
8000cbc4:	80 00       	ld.sh	r0,r0[0x0]
8000cbc6:	e7 9a       	*unknown*
8000cbc8:	80 00       	ld.sh	r0,r0[0x0]
8000cbca:	c7 74       	brge	8000ccb8 <udi_msc_spc_mode_sense+0x74>

8000cbcc <udi_msc_spc_testunitready_global>:


static bool udi_msc_spc_testunitready_global(void)
{
8000cbcc:	eb cd 40 80 	pushm	r7,lr
8000cbd0:	1a 97       	mov	r7,sp
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
8000cbd2:	48 e8       	lddpc	r8,8000cc08 <udi_msc_spc_testunitready_global+0x3c>
8000cbd4:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cbd8:	10 9c       	mov	r12,r8
8000cbda:	f0 1f 00 0d 	mcall	8000cc0c <udi_msc_spc_testunitready_global+0x40>
8000cbde:	18 98       	mov	r8,r12
8000cbe0:	58 28       	cp.w	r8,2
8000cbe2:	c0 a0       	breq	8000cbf6 <udi_msc_spc_testunitready_global+0x2a>
8000cbe4:	58 38       	cp.w	r8,3
8000cbe6:	c0 50       	breq	8000cbf0 <udi_msc_spc_testunitready_global+0x24>
8000cbe8:	58 08       	cp.w	r8,0
8000cbea:	c0 91       	brne	8000cbfc <udi_msc_spc_testunitready_global+0x30>
	case CTRL_GOOD:
		return true;	// Don't change sense data
8000cbec:	30 18       	mov	r8,1
8000cbee:	c0 a8       	rjmp	8000cc02 <udi_msc_spc_testunitready_global+0x36>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000cbf0:	f0 1f 00 08 	mcall	8000cc10 <udi_msc_spc_testunitready_global+0x44>
		break;
8000cbf4:	c0 68       	rjmp	8000cc00 <udi_msc_spc_testunitready_global+0x34>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000cbf6:	f0 1f 00 08 	mcall	8000cc14 <udi_msc_spc_testunitready_global+0x48>
		break;
8000cbfa:	c0 38       	rjmp	8000cc00 <udi_msc_spc_testunitready_global+0x34>
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
8000cbfc:	f0 1f 00 07 	mcall	8000cc18 <udi_msc_spc_testunitready_global+0x4c>
		break;
	}
	return false;
8000cc00:	30 08       	mov	r8,0
}
8000cc02:	10 9c       	mov	r12,r8
8000cc04:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc08:	00 00       	add	r0,r0
8000cc0a:	07 f0       	ld.ub	r0,r3[0x7]
8000cc0c:	80 00       	ld.sh	r0,r0[0x0]
8000cc0e:	c0 94       	brge	8000cc20 <udi_msc_spc_testunitready+0x4>
8000cc10:	80 00       	ld.sh	r0,r0[0x0]
8000cc12:	c9 c0       	breq	8000cb4a <udi_msc_spc_inquiry+0x9e>
8000cc14:	80 00       	ld.sh	r0,r0[0x0]
8000cc16:	c9 a4       	brge	8000cb4a <udi_msc_spc_inquiry+0x9e>
8000cc18:	80 00       	ld.sh	r0,r0[0x0]
8000cc1a:	c9 dc       	rcall	8000cd54 <udi_msc_spc_mode_sense+0x110>

8000cc1c <udi_msc_spc_testunitready>:


static void udi_msc_spc_testunitready(void)
{
8000cc1c:	eb cd 40 80 	pushm	r7,lr
8000cc20:	1a 97       	mov	r7,sp
	if (udi_msc_spc_testunitready_global()) {
8000cc22:	f0 1f 00 06 	mcall	8000cc38 <udi_msc_spc_testunitready+0x1c>
8000cc26:	18 98       	mov	r8,r12
8000cc28:	58 08       	cp.w	r8,0
8000cc2a:	c0 30       	breq	8000cc30 <udi_msc_spc_testunitready+0x14>
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
8000cc2c:	f0 1f 00 04 	mcall	8000cc3c <udi_msc_spc_testunitready+0x20>
	}
	// Send status in CSW packet
	udi_msc_csw_process();
8000cc30:	f0 1f 00 04 	mcall	8000cc40 <udi_msc_spc_testunitready+0x24>
}
8000cc34:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc38:	80 00       	ld.sh	r0,r0[0x0]
8000cc3a:	cb cc       	rcall	8000cdb2 <udi_msc_sbc_read_capacity+0x1e>
8000cc3c:	80 00       	ld.sh	r0,r0[0x0]
8000cc3e:	c9 84       	brge	8000cb6e <udi_msc_spc_inquiry+0xc2>
8000cc40:	80 00       	ld.sh	r0,r0[0x0]
8000cc42:	c8 10       	breq	8000cb44 <udi_msc_spc_inquiry+0x98>

8000cc44 <udi_msc_spc_mode_sense>:


static void udi_msc_spc_mode_sense(bool b_sense10)
{
8000cc44:	eb cd 40 80 	pushm	r7,lr
8000cc48:	1a 97       	mov	r7,sp
8000cc4a:	20 3d       	sub	sp,12
8000cc4c:	18 98       	mov	r8,r12
8000cc4e:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
8000cc52:	31 4a       	mov	r10,20
8000cc54:	30 0b       	mov	r11,0
8000cc56:	4c ac       	lddpc	r12,8000cd7c <udi_msc_spc_mode_sense+0x138>
8000cc58:	f0 1f 00 4a 	mcall	8000cd80 <udi_msc_spc_mode_sense+0x13c>

	// Initialize process
	if (b_sense10) {
8000cc5c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cc60:	30 08       	mov	r8,0
8000cc62:	f0 09 18 00 	cp.b	r9,r8
8000cc66:	c0 e0       	breq	8000cc82 <udi_msc_spc_mode_sense+0x3e>
		request_lgt = udi_msc_cbw.CDB[8];
8000cc68:	4c 78       	lddpc	r8,8000cd84 <udi_msc_spc_mode_sense+0x140>
8000cc6a:	f1 38 00 17 	ld.ub	r8,r8[23]
8000cc6e:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s10.sense_data;
8000cc72:	4c 38       	lddpc	r8,8000cd7c <udi_msc_spc_mode_sense+0x138>
8000cc74:	2f 88       	sub	r8,-8
8000cc76:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
8000cc7a:	30 88       	mov	r8,8
8000cc7c:	ef 68 ff f8 	st.b	r7[-8],r8
8000cc80:	c0 d8       	rjmp	8000cc9a <udi_msc_spc_mode_sense+0x56>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
8000cc82:	4c 18       	lddpc	r8,8000cd84 <udi_msc_spc_mode_sense+0x140>
8000cc84:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cc88:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s6.sense_data;
8000cc8c:	4b c8       	lddpc	r8,8000cd7c <udi_msc_spc_mode_sense+0x138>
8000cc8e:	2f c8       	sub	r8,-4
8000cc90:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
8000cc94:	30 48       	mov	r8,4
8000cc96:	ef 68 ff f8 	st.b	r7[-8],r8
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
8000cc9a:	4b b8       	lddpc	r8,8000cd84 <udi_msc_spc_mode_sense+0x140>
8000cc9c:	f1 38 00 11 	ld.ub	r8,r8[17]
8000cca0:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000cca4:	ef 68 ff f9 	st.b	r7[-7],r8
	if ((SCSI_MS_MODE_INFEXP == mode)
8000cca8:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000ccac:	31 c8       	mov	r8,28
8000ccae:	f0 09 18 00 	cp.b	r9,r8
8000ccb2:	c0 70       	breq	8000ccc0 <udi_msc_spc_mode_sense+0x7c>
8000ccb4:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000ccb8:	33 f8       	mov	r8,63
8000ccba:	f0 09 18 00 	cp.b	r9,r8
8000ccbe:	c1 21       	brne	8000cce2 <udi_msc_spc_mode_sense+0x9e>
			|| (SCSI_MS_MODE_ALL == mode)) {
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
8000ccc0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ccc4:	31 c8       	mov	r8,28
8000ccc6:	b2 88       	st.b	r9[0x0],r8
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
8000ccc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cccc:	30 a8       	mov	r8,10
8000ccce:	b2 98       	st.b	r9[0x1],r8
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
8000ccd0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ccd4:	30 58       	mov	r8,5
8000ccd6:	b2 b8       	st.b	r9[0x3],r8
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
8000ccd8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ccdc:	2f 48       	sub	r8,-12
8000ccde:	ef 68 ff f8 	st.b	r7[-8],r8
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
8000cce2:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000cce6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ccea:	f0 09 18 00 	cp.b	r9,r8
8000ccee:	e0 88 00 06 	brls	8000ccfa <udi_msc_spc_mode_sense+0xb6>
		request_lgt = data_sense_lgt;
8000ccf2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ccf6:	ef 68 ff fa 	st.b	r7[-6],r8
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
8000ccfa:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000ccfe:	e0 6b 00 80 	mov	r11,128
8000cd02:	10 9c       	mov	r12,r8
8000cd04:	f0 1f 00 21 	mcall	8000cd88 <udi_msc_spc_mode_sense+0x144>
8000cd08:	18 98       	mov	r8,r12
8000cd0a:	ec 18 00 01 	eorl	r8,0x1
8000cd0e:	5c 58       	castu.b	r8
8000cd10:	c3 21       	brne	8000cd74 <udi_msc_spc_mode_sense+0x130>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
8000cd12:	49 d8       	lddpc	r8,8000cd84 <udi_msc_spc_mode_sense+0x140>
8000cd14:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cd18:	10 9c       	mov	r12,r8
8000cd1a:	f0 1f 00 1d 	mcall	8000cd8c <udi_msc_spc_mode_sense+0x148>
8000cd1e:	18 98       	mov	r8,r12
8000cd20:	58 08       	cp.w	r8,0
8000cd22:	c0 40       	breq	8000cd2a <udi_msc_spc_mode_sense+0xe6>
8000cd24:	e0 68 00 80 	mov	r8,128
8000cd28:	c0 28       	rjmp	8000cd2c <udi_msc_spc_mode_sense+0xe8>
8000cd2a:	30 08       	mov	r8,0
8000cd2c:	ef 68 ff fb 	st.b	r7[-5],r8

	if (b_sense10) {
8000cd30:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cd34:	30 08       	mov	r8,0
8000cd36:	f0 09 18 00 	cp.b	r9,r8
8000cd3a:	c0 c0       	breq	8000cd52 <udi_msc_spc_mode_sense+0x10e>
		sense.s10.header.mode_data_length =
8000cd3c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cd40:	20 28       	sub	r8,2
8000cd42:	5c 88       	casts.h	r8
8000cd44:	48 e9       	lddpc	r9,8000cd7c <udi_msc_spc_mode_sense+0x138>
8000cd46:	b2 08       	st.h	r9[0x0],r8
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
8000cd48:	48 d9       	lddpc	r9,8000cd7c <udi_msc_spc_mode_sense+0x138>
8000cd4a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000cd4e:	b2 b8       	st.b	r9[0x3],r8
8000cd50:	c0 b8       	rjmp	8000cd66 <udi_msc_spc_mode_sense+0x122>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
8000cd52:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cd56:	20 18       	sub	r8,1
8000cd58:	5c 58       	castu.b	r8
8000cd5a:	48 99       	lddpc	r9,8000cd7c <udi_msc_spc_mode_sense+0x138>
8000cd5c:	b2 88       	st.b	r9[0x0],r8
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
8000cd5e:	48 89       	lddpc	r9,8000cd7c <udi_msc_spc_mode_sense+0x138>
8000cd60:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000cd64:	b2 a8       	st.b	r9[0x2],r8
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
8000cd66:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000cd6a:	10 9b       	mov	r11,r8
8000cd6c:	48 4c       	lddpc	r12,8000cd7c <udi_msc_spc_mode_sense+0x138>
8000cd6e:	f0 1f 00 09 	mcall	8000cd90 <udi_msc_spc_mode_sense+0x14c>
8000cd72:	c0 28       	rjmp	8000cd76 <udi_msc_spc_mode_sense+0x132>
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
		return;
8000cd74:	d7 03       	nop
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
}
8000cd76:	2f dd       	sub	sp,-12
8000cd78:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd7c:	00 00       	add	r0,r0
8000cd7e:	08 3c       	cp.w	r12,r4
8000cd80:	80 00       	ld.sh	r0,r0[0x0]
8000cd82:	e8 e2 00 00 	ld.d	r2,r4[0]
8000cd86:	07 f0       	ld.ub	r0,r3[0x7]
8000cd88:	80 00       	ld.sh	r0,r0[0x0]
8000cd8a:	c7 14       	brge	8000ce6c <udi_msc_sbc_trans+0x3c>
8000cd8c:	80 00       	ld.sh	r0,r0[0x0]
8000cd8e:	c1 34       	brge	8000cdb4 <udi_msc_sbc_read_capacity+0x20>
8000cd90:	80 00       	ld.sh	r0,r0[0x0]
8000cd92:	c7 74       	brge	8000ce80 <udi_msc_sbc_trans+0x50>

8000cd94 <udi_msc_sbc_read_capacity>:


static void udi_msc_sbc_read_capacity(void)
{
8000cd94:	eb cd 40 80 	pushm	r7,lr
8000cd98:	1a 97       	mov	r7,sp
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
8000cd9a:	e0 6b 00 80 	mov	r11,128
8000cd9e:	30 8c       	mov	r12,8
8000cda0:	f0 1f 00 1b 	mcall	8000ce0c <udi_msc_sbc_read_capacity+0x78>
8000cda4:	18 98       	mov	r8,r12
8000cda6:	ec 18 00 01 	eorl	r8,0x1
8000cdaa:	5c 58       	castu.b	r8
8000cdac:	c2 d1       	brne	8000ce06 <udi_msc_sbc_read_capacity+0x72>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
8000cdae:	49 98       	lddpc	r8,8000ce10 <udi_msc_sbc_read_capacity+0x7c>
8000cdb0:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cdb4:	49 8b       	lddpc	r11,8000ce14 <udi_msc_sbc_read_capacity+0x80>
8000cdb6:	10 9c       	mov	r12,r8
8000cdb8:	f0 1f 00 18 	mcall	8000ce18 <udi_msc_sbc_read_capacity+0x84>
8000cdbc:	18 98       	mov	r8,r12
					&udi_msc_capacity.max_lba)) {
8000cdbe:	58 28       	cp.w	r8,2
8000cdc0:	c1 80       	breq	8000cdf0 <udi_msc_sbc_read_capacity+0x5c>
8000cdc2:	58 38       	cp.w	r8,3
8000cdc4:	c1 10       	breq	8000cde6 <udi_msc_sbc_read_capacity+0x52>
8000cdc6:	58 08       	cp.w	r8,0
8000cdc8:	c1 91       	brne	8000cdfa <udi_msc_sbc_read_capacity+0x66>
		udi_msc_csw_process();
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
8000cdca:	49 38       	lddpc	r8,8000ce14 <udi_msc_sbc_read_capacity+0x80>
8000cdcc:	e0 69 02 00 	mov	r9,512
8000cdd0:	91 19       	st.w	r8[0x4],r9
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
8000cdd2:	49 18       	lddpc	r8,8000ce14 <udi_msc_sbc_read_capacity+0x80>
8000cdd4:	70 09       	ld.w	r9,r8[0x0]
8000cdd6:	49 08       	lddpc	r8,8000ce14 <udi_msc_sbc_read_capacity+0x80>
8000cdd8:	91 09       	st.w	r8[0x0],r9
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
8000cdda:	48 f8       	lddpc	r8,8000ce14 <udi_msc_sbc_read_capacity+0x80>
8000cddc:	30 8b       	mov	r11,8
8000cdde:	10 9c       	mov	r12,r8
8000cde0:	f0 1f 00 0f 	mcall	8000ce1c <udi_msc_sbc_read_capacity+0x88>
8000cde4:	c1 28       	rjmp	8000ce08 <udi_msc_sbc_read_capacity+0x74>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000cde6:	f0 1f 00 0f 	mcall	8000ce20 <udi_msc_sbc_read_capacity+0x8c>
		udi_msc_csw_process();
8000cdea:	f0 1f 00 0f 	mcall	8000ce24 <udi_msc_sbc_read_capacity+0x90>
		return;
8000cdee:	c0 d8       	rjmp	8000ce08 <udi_msc_sbc_read_capacity+0x74>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000cdf0:	f0 1f 00 0e 	mcall	8000ce28 <udi_msc_sbc_read_capacity+0x94>
		udi_msc_csw_process();
8000cdf4:	f0 1f 00 0c 	mcall	8000ce24 <udi_msc_sbc_read_capacity+0x90>
		return;
8000cdf8:	c0 88       	rjmp	8000ce08 <udi_msc_sbc_read_capacity+0x74>
	default:
		udi_msc_sense_fail_hardware();
8000cdfa:	f0 1f 00 0d 	mcall	8000ce2c <udi_msc_sbc_read_capacity+0x98>
		udi_msc_csw_process();
8000cdfe:	f0 1f 00 0a 	mcall	8000ce24 <udi_msc_sbc_read_capacity+0x90>
		return;
8000ce02:	d7 03       	nop
8000ce04:	c0 28       	rjmp	8000ce08 <udi_msc_sbc_read_capacity+0x74>
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
					USB_CBW_DIRECTION_IN))
		return;
8000ce06:	d7 03       	nop
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
			sizeof(udi_msc_capacity));
}
8000ce08:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ce0c:	80 00       	ld.sh	r0,r0[0x0]
8000ce0e:	c7 14       	brge	8000cef0 <udi_msc_sbc_trans+0xc0>
8000ce10:	00 00       	add	r0,r0
8000ce12:	07 f0       	ld.ub	r0,r3[0x7]
8000ce14:	00 00       	add	r0,r0
8000ce16:	08 34       	cp.w	r4,r4
8000ce18:	80 00       	ld.sh	r0,r0[0x0]
8000ce1a:	c0 e0       	breq	8000ce36 <udi_msc_sbc_trans+0x6>
8000ce1c:	80 00       	ld.sh	r0,r0[0x0]
8000ce1e:	c7 74       	brge	8000cf0c <udi_msc_sbc_trans+0xdc>
8000ce20:	80 00       	ld.sh	r0,r0[0x0]
8000ce22:	c9 c0       	breq	8000cd5a <udi_msc_spc_mode_sense+0x116>
8000ce24:	80 00       	ld.sh	r0,r0[0x0]
8000ce26:	c8 10       	breq	8000cd28 <udi_msc_spc_mode_sense+0xe4>
8000ce28:	80 00       	ld.sh	r0,r0[0x0]
8000ce2a:	c9 a4       	brge	8000cd5e <udi_msc_spc_mode_sense+0x11a>
8000ce2c:	80 00       	ld.sh	r0,r0[0x0]
8000ce2e:	c9 dc       	rcall	8000cf68 <udi_msc_process_trans+0x44>

8000ce30 <udi_msc_sbc_trans>:


static void udi_msc_sbc_trans(bool b_read)
{
8000ce30:	eb cd 40 80 	pushm	r7,lr
8000ce34:	1a 97       	mov	r7,sp
8000ce36:	20 2d       	sub	sp,8
8000ce38:	18 98       	mov	r8,r12
8000ce3a:	ef 68 ff f8 	st.b	r7[-8],r8
	uint32_t trans_size;

	if (!b_read) {
8000ce3e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ce42:	ec 18 00 01 	eorl	r8,0x1
8000ce46:	5c 58       	castu.b	r8
8000ce48:	c0 f0       	breq	8000ce66 <udi_msc_sbc_trans+0x36>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
8000ce4a:	4a e8       	lddpc	r8,8000cf00 <udi_msc_sbc_trans+0xd0>
8000ce4c:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ce50:	10 9c       	mov	r12,r8
8000ce52:	f0 1f 00 2d 	mcall	8000cf04 <udi_msc_sbc_trans+0xd4>
8000ce56:	18 98       	mov	r8,r12
8000ce58:	58 08       	cp.w	r8,0
8000ce5a:	c0 60       	breq	8000ce66 <udi_msc_sbc_trans+0x36>
			// Write not authorized
			udi_msc_sense_fail_protected();
8000ce5c:	f0 1f 00 2b 	mcall	8000cf08 <udi_msc_sbc_trans+0xd8>
			udi_msc_csw_process();
8000ce60:	f0 1f 00 2b 	mcall	8000cf0c <udi_msc_sbc_trans+0xdc>
			return;
8000ce64:	c4 a8       	rjmp	8000cef8 <udi_msc_sbc_trans+0xc8>
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
8000ce66:	4a b9       	lddpc	r9,8000cf10 <udi_msc_sbc_trans+0xe0>
8000ce68:	4a 68       	lddpc	r8,8000cf00 <udi_msc_sbc_trans+0xd0>
8000ce6a:	f1 38 00 11 	ld.ub	r8,r8[17]
8000ce6e:	b2 88       	st.b	r9[0x0],r8
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
8000ce70:	4a 88       	lddpc	r8,8000cf10 <udi_msc_sbc_trans+0xe0>
8000ce72:	f0 c9 ff ff 	sub	r9,r8,-1
8000ce76:	4a 38       	lddpc	r8,8000cf00 <udi_msc_sbc_trans+0xd0>
8000ce78:	f1 38 00 12 	ld.ub	r8,r8[18]
8000ce7c:	b2 88       	st.b	r9[0x0],r8
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
8000ce7e:	4a 58       	lddpc	r8,8000cf10 <udi_msc_sbc_trans+0xe0>
8000ce80:	f0 c9 ff fe 	sub	r9,r8,-2
8000ce84:	49 f8       	lddpc	r8,8000cf00 <udi_msc_sbc_trans+0xd0>
8000ce86:	f1 38 00 13 	ld.ub	r8,r8[19]
8000ce8a:	b2 88       	st.b	r9[0x0],r8
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
8000ce8c:	4a 18       	lddpc	r8,8000cf10 <udi_msc_sbc_trans+0xe0>
8000ce8e:	f0 c9 ff fd 	sub	r9,r8,-3
8000ce92:	49 c8       	lddpc	r8,8000cf00 <udi_msc_sbc_trans+0xd0>
8000ce94:	f1 38 00 14 	ld.ub	r8,r8[20]
8000ce98:	b2 88       	st.b	r9[0x0],r8
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
8000ce9a:	49 f9       	lddpc	r9,8000cf14 <udi_msc_sbc_trans+0xe4>
8000ce9c:	49 98       	lddpc	r8,8000cf00 <udi_msc_sbc_trans+0xd0>
8000ce9e:	f1 38 00 16 	ld.ub	r8,r8[22]
8000cea2:	b2 88       	st.b	r9[0x0],r8
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
8000cea4:	49 c8       	lddpc	r8,8000cf14 <udi_msc_sbc_trans+0xe4>
8000cea6:	f0 c9 ff ff 	sub	r9,r8,-1
8000ceaa:	49 68       	lddpc	r8,8000cf00 <udi_msc_sbc_trans+0xd0>
8000ceac:	f1 38 00 17 	ld.ub	r8,r8[23]
8000ceb0:	b2 88       	st.b	r9[0x0],r8

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
8000ceb2:	49 98       	lddpc	r8,8000cf14 <udi_msc_sbc_trans+0xe4>
8000ceb4:	90 08       	ld.sh	r8,r8[0x0]
8000ceb6:	5c 78       	castu.h	r8
8000ceb8:	a9 78       	lsl	r8,0x9
8000ceba:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udi_msc_cbw_validate(trans_size,
8000cebe:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000cec2:	30 08       	mov	r8,0
8000cec4:	f0 09 18 00 	cp.b	r9,r8
8000cec8:	c0 40       	breq	8000ced0 <udi_msc_sbc_trans+0xa0>
8000ceca:	e0 68 00 80 	mov	r8,128
8000cece:	c0 28       	rjmp	8000ced2 <udi_msc_sbc_trans+0xa2>
8000ced0:	30 08       	mov	r8,0
8000ced2:	10 9b       	mov	r11,r8
8000ced4:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ced8:	f0 1f 00 10 	mcall	8000cf18 <udi_msc_sbc_trans+0xe8>
8000cedc:	18 98       	mov	r8,r12
8000cede:	ec 18 00 01 	eorl	r8,0x1
8000cee2:	5c 58       	castu.b	r8
8000cee4:	c0 91       	brne	8000cef6 <udi_msc_sbc_trans+0xc6>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
8000cee6:	48 e9       	lddpc	r9,8000cf1c <udi_msc_sbc_trans+0xec>
8000cee8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ceec:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_trans_req = true;
8000ceee:	48 d9       	lddpc	r9,8000cf20 <udi_msc_sbc_trans+0xf0>
8000cef0:	30 18       	mov	r8,1
8000cef2:	b2 88       	st.b	r9[0x0],r8
8000cef4:	c0 28       	rjmp	8000cef8 <udi_msc_sbc_trans+0xc8>
	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
	if (!udi_msc_cbw_validate(trans_size,
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;
8000cef6:	d7 03       	nop

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
	udi_msc_b_trans_req = true;
	UDI_MSC_NOTIFY_TRANS_EXT();
}
8000cef8:	2f ed       	sub	sp,-8
8000cefa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cefe:	00 00       	add	r0,r0
8000cf00:	00 00       	add	r0,r0
8000cf02:	07 f0       	ld.ub	r0,r3[0x7]
8000cf04:	80 00       	ld.sh	r0,r0[0x0]
8000cf06:	c1 34       	brge	8000cf2c <udi_msc_process_trans+0x8>
8000cf08:	80 00       	ld.sh	r0,r0[0x0]
8000cf0a:	c9 f4       	brge	8000ce48 <udi_msc_sbc_trans+0x18>
8000cf0c:	80 00       	ld.sh	r0,r0[0x0]
8000cf0e:	c8 10       	breq	8000ce10 <udi_msc_sbc_read_capacity+0x7c>
8000cf10:	00 00       	add	r0,r0
8000cf12:	08 2c       	rsub	r12,r4
8000cf14:	00 00       	add	r0,r0
8000cf16:	08 30       	cp.w	r0,r4
8000cf18:	80 00       	ld.sh	r0,r0[0x0]
8000cf1a:	c7 14       	brge	8000cffc <udi_msc_trans_ack+0xc>
8000cf1c:	00 00       	add	r0,r0
8000cf1e:	08 2a       	rsub	r10,r4
8000cf20:	00 00       	add	r0,r0
8000cf22:	08 29       	rsub	r9,r4

8000cf24 <udi_msc_process_trans>:


bool udi_msc_process_trans(void)
{
8000cf24:	eb cd 40 80 	pushm	r7,lr
8000cf28:	1a 97       	mov	r7,sp
8000cf2a:	20 1d       	sub	sp,4
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
8000cf2c:	4a 58       	lddpc	r8,8000cfc0 <udi_msc_process_trans+0x9c>
8000cf2e:	11 88       	ld.ub	r8,r8[0x0]
8000cf30:	ec 18 00 01 	eorl	r8,0x1
8000cf34:	5c 58       	castu.b	r8
8000cf36:	c0 30       	breq	8000cf3c <udi_msc_process_trans+0x18>
		return false;	// No Transfer request to do
8000cf38:	30 08       	mov	r8,0
8000cf3a:	c3 f8       	rjmp	8000cfb8 <udi_msc_process_trans+0x94>
	udi_msc_b_trans_req = false;
8000cf3c:	4a 19       	lddpc	r9,8000cfc0 <udi_msc_process_trans+0x9c>
8000cf3e:	30 08       	mov	r8,0
8000cf40:	b2 88       	st.b	r9[0x0],r8

	// Start transfer
	if (udi_msc_b_read) {
8000cf42:	4a 18       	lddpc	r8,8000cfc4 <udi_msc_process_trans+0xa0>
8000cf44:	11 88       	ld.ub	r8,r8[0x0]
8000cf46:	58 08       	cp.w	r8,0
8000cf48:	c1 20       	breq	8000cf6c <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000cf4a:	4a 08       	lddpc	r8,8000cfc8 <udi_msc_process_trans+0xa4>
8000cf4c:	90 08       	ld.sh	r8,r8[0x0]
8000cf4e:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000cf52:	49 f8       	lddpc	r8,8000cfcc <udi_msc_process_trans+0xa8>
8000cf54:	70 09       	ld.w	r9,r8[0x0]
8000cf56:	49 f8       	lddpc	r8,8000cfd0 <udi_msc_process_trans+0xac>
8000cf58:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cf5c:	12 9b       	mov	r11,r9
8000cf5e:	10 9c       	mov	r12,r8
8000cf60:	f0 1f 00 1d 	mcall	8000cfd4 <udi_msc_process_trans+0xb0>
8000cf64:	18 98       	mov	r8,r12
8000cf66:	ef 48 ff fc 	st.w	r7[-4],r8
8000cf6a:	c1 18       	rjmp	8000cf8c <udi_msc_process_trans+0x68>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000cf6c:	49 78       	lddpc	r8,8000cfc8 <udi_msc_process_trans+0xa4>
8000cf6e:	90 08       	ld.sh	r8,r8[0x0]
8000cf70:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000cf74:	49 68       	lddpc	r8,8000cfcc <udi_msc_process_trans+0xa8>
8000cf76:	70 09       	ld.w	r9,r8[0x0]
8000cf78:	49 68       	lddpc	r8,8000cfd0 <udi_msc_process_trans+0xac>
8000cf7a:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cf7e:	12 9b       	mov	r11,r9
8000cf80:	10 9c       	mov	r12,r8
8000cf82:	f0 1f 00 16 	mcall	8000cfd8 <udi_msc_process_trans+0xb4>
8000cf86:	18 98       	mov	r8,r12
8000cf88:	ef 48 ff fc 	st.w	r7[-4],r8
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
8000cf8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cf90:	58 28       	cp.w	r8,2
8000cf92:	c0 b0       	breq	8000cfa8 <udi_msc_process_trans+0x84>
8000cf94:	58 38       	cp.w	r8,3
8000cf96:	c0 60       	breq	8000cfa2 <udi_msc_process_trans+0x7e>
8000cf98:	58 08       	cp.w	r8,0
8000cf9a:	c0 a1       	brne	8000cfae <udi_msc_process_trans+0x8a>
	case CTRL_GOOD:
		udi_msc_sense_pass();
8000cf9c:	f0 1f 00 10 	mcall	8000cfdc <udi_msc_process_trans+0xb8>
		break;
8000cfa0:	c0 98       	rjmp	8000cfb2 <udi_msc_process_trans+0x8e>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000cfa2:	f0 1f 00 10 	mcall	8000cfe0 <udi_msc_process_trans+0xbc>
		break;
8000cfa6:	c0 68       	rjmp	8000cfb2 <udi_msc_process_trans+0x8e>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000cfa8:	f0 1f 00 0f 	mcall	8000cfe4 <udi_msc_process_trans+0xc0>
		break;
8000cfac:	c0 38       	rjmp	8000cfb2 <udi_msc_process_trans+0x8e>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
8000cfae:	f0 1f 00 0f 	mcall	8000cfe8 <udi_msc_process_trans+0xc4>
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
8000cfb2:	f0 1f 00 0f 	mcall	8000cfec <udi_msc_process_trans+0xc8>
	return true;
8000cfb6:	30 18       	mov	r8,1
}
8000cfb8:	10 9c       	mov	r12,r8
8000cfba:	2f fd       	sub	sp,-4
8000cfbc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cfc0:	00 00       	add	r0,r0
8000cfc2:	08 29       	rsub	r9,r4
8000cfc4:	00 00       	add	r0,r0
8000cfc6:	08 2a       	rsub	r10,r4
8000cfc8:	00 00       	add	r0,r0
8000cfca:	08 30       	cp.w	r0,r4
8000cfcc:	00 00       	add	r0,r0
8000cfce:	08 2c       	rsub	r12,r4
8000cfd0:	00 00       	add	r0,r0
8000cfd2:	07 f0       	ld.ub	r0,r3[0x7]
8000cfd4:	80 00       	ld.sh	r0,r0[0x0]
8000cfd6:	c1 c8       	rjmp	8000d00e <udi_msc_trans_ack+0x1e>
8000cfd8:	80 00       	ld.sh	r0,r0[0x0]
8000cfda:	c2 3c       	rcall	8000d020 <udi_msc_trans_ack+0x30>
8000cfdc:	80 00       	ld.sh	r0,r0[0x0]
8000cfde:	c9 84       	brge	8000cf0e <udi_msc_sbc_trans+0xde>
8000cfe0:	80 00       	ld.sh	r0,r0[0x0]
8000cfe2:	c9 c0       	breq	8000cf1a <udi_msc_sbc_trans+0xea>
8000cfe4:	80 00       	ld.sh	r0,r0[0x0]
8000cfe6:	c9 a4       	brge	8000cf1a <udi_msc_sbc_trans+0xea>
8000cfe8:	80 00       	ld.sh	r0,r0[0x0]
8000cfea:	c9 dc       	rcall	8000d124 <udc_get_string_serial_name+0x8>
8000cfec:	80 00       	ld.sh	r0,r0[0x0]
8000cfee:	c8 10       	breq	8000cef0 <udi_msc_sbc_trans+0xc0>

8000cff0 <udi_msc_trans_ack>:


static void udi_msc_trans_ack(udd_ep_status_t status, iram_size_t n,
		udd_ep_id_t ep)
{
8000cff0:	eb cd 40 80 	pushm	r7,lr
8000cff4:	1a 97       	mov	r7,sp
8000cff6:	20 3d       	sub	sp,12
8000cff8:	ef 4c ff fc 	st.w	r7[-4],r12
8000cffc:	ef 4b ff f8 	st.w	r7[-8],r11
8000d000:	14 98       	mov	r8,r10
8000d002:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
8000d006:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d00a:	58 08       	cp.w	r8,0
8000d00c:	5f 18       	srne	r8
8000d00e:	5c 58       	castu.b	r8
8000d010:	48 49       	lddpc	r9,8000d020 <udi_msc_trans_ack+0x30>
8000d012:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_ack_trans = true;
8000d014:	48 49       	lddpc	r9,8000d024 <udi_msc_trans_ack+0x34>
8000d016:	30 18       	mov	r8,1
8000d018:	b2 88       	st.b	r9[0x0],r8
}
8000d01a:	2f dd       	sub	sp,-12
8000d01c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d020:	00 00       	add	r0,r0
8000d022:	0e 03       	add	r3,r7
8000d024:	00 00       	add	r0,r0
8000d026:	01 64       	ld.uh	r4,--r0

8000d028 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
8000d028:	eb cd 40 80 	pushm	r7,lr
8000d02c:	1a 97       	mov	r7,sp
8000d02e:	20 4d       	sub	sp,16
8000d030:	18 98       	mov	r8,r12
8000d032:	ef 4b ff f8 	st.w	r7[-8],r11
8000d036:	ef 4a ff f4 	st.w	r7[-12],r10
8000d03a:	ef 49 ff f0 	st.w	r7[-16],r9
8000d03e:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!udi_msc_b_ack_trans)
8000d042:	4a e8       	lddpc	r8,8000d0f8 <udi_msc_trans_block+0xd0>
8000d044:	11 88       	ld.ub	r8,r8[0x0]
8000d046:	5c 58       	castu.b	r8
8000d048:	ec 18 00 01 	eorl	r8,0x1
8000d04c:	5c 58       	castu.b	r8
8000d04e:	c0 30       	breq	8000d054 <udi_msc_trans_block+0x2c>
		return false;	// No possible, transfer on going
8000d050:	30 08       	mov	r8,0
8000d052:	c4 f8       	rjmp	8000d0f0 <udi_msc_trans_block+0xc8>

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
8000d054:	4a 99       	lddpc	r9,8000d0f8 <udi_msc_trans_block+0xd0>
8000d056:	30 08       	mov	r8,0
8000d058:	b2 88       	st.b	r9[0x0],r8
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
8000d05a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d05e:	58 08       	cp.w	r8,0
8000d060:	c0 40       	breq	8000d068 <udi_msc_trans_block+0x40>
8000d062:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d066:	c0 28       	rjmp	8000d06a <udi_msc_trans_block+0x42>
8000d068:	4a 58       	lddpc	r8,8000d0fc <udi_msc_trans_block+0xd4>
8000d06a:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000d06e:	30 09       	mov	r9,0
8000d070:	f2 0a 18 00 	cp.b	r10,r9
8000d074:	c0 40       	breq	8000d07c <udi_msc_trans_block+0x54>
8000d076:	e0 6c 00 81 	mov	r12,129
8000d07a:	c0 28       	rjmp	8000d07e <udi_msc_trans_block+0x56>
8000d07c:	30 2c       	mov	r12,2
8000d07e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d082:	ee fa ff f8 	ld.w	r10,r7[-8]
8000d086:	30 0b       	mov	r11,0
8000d088:	f0 1f 00 1e 	mcall	8000d100 <udi_msc_trans_block+0xd8>
8000d08c:	18 98       	mov	r8,r12
8000d08e:	ec 18 00 01 	eorl	r8,0x1
8000d092:	5c 58       	castu.b	r8
8000d094:	c0 60       	breq	8000d0a0 <udi_msc_trans_block+0x78>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
8000d096:	49 99       	lddpc	r9,8000d0f8 <udi_msc_trans_block+0xd0>
8000d098:	30 18       	mov	r8,1
8000d09a:	b2 88       	st.b	r9[0x0],r8
		return false;
8000d09c:	30 08       	mov	r8,0
8000d09e:	c2 98       	rjmp	8000d0f0 <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
8000d0a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d0a4:	58 08       	cp.w	r8,0
8000d0a6:	c1 d1       	brne	8000d0e0 <udi_msc_trans_block+0xb8>
		while (!udi_msc_b_ack_trans);
8000d0a8:	49 48       	lddpc	r8,8000d0f8 <udi_msc_trans_block+0xd0>
8000d0aa:	11 88       	ld.ub	r8,r8[0x0]
8000d0ac:	5c 58       	castu.b	r8
8000d0ae:	ec 18 00 01 	eorl	r8,0x1
8000d0b2:	5c 58       	castu.b	r8
8000d0b4:	cf a1       	brne	8000d0a8 <udi_msc_trans_block+0x80>
		if (udi_msc_b_abort_trans) {
8000d0b6:	49 48       	lddpc	r8,8000d104 <udi_msc_trans_block+0xdc>
8000d0b8:	11 88       	ld.ub	r8,r8[0x0]
8000d0ba:	5c 58       	castu.b	r8
8000d0bc:	c0 30       	breq	8000d0c2 <udi_msc_trans_block+0x9a>
			return false;
8000d0be:	30 08       	mov	r8,0
8000d0c0:	c1 88       	rjmp	8000d0f0 <udi_msc_trans_block+0xc8>
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
8000d0c2:	49 28       	lddpc	r8,8000d108 <udi_msc_trans_block+0xe0>
8000d0c4:	70 29       	ld.w	r9,r8[0x8]
8000d0c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d0ca:	10 19       	sub	r9,r8
8000d0cc:	48 f8       	lddpc	r8,8000d108 <udi_msc_trans_block+0xe0>
8000d0ce:	91 29       	st.w	r8[0x8],r9
		return (!udi_msc_b_abort_trans);
8000d0d0:	48 d8       	lddpc	r8,8000d104 <udi_msc_trans_block+0xdc>
8000d0d2:	11 88       	ld.ub	r8,r8[0x0]
8000d0d4:	5c 58       	castu.b	r8
8000d0d6:	ec 18 00 01 	eorl	r8,0x1
8000d0da:	5c 58       	castu.b	r8
8000d0dc:	5c 58       	castu.b	r8
8000d0de:	c0 98       	rjmp	8000d0f0 <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
8000d0e0:	48 a8       	lddpc	r8,8000d108 <udi_msc_trans_block+0xe0>
8000d0e2:	70 29       	ld.w	r9,r8[0x8]
8000d0e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d0e8:	10 19       	sub	r9,r8
8000d0ea:	48 88       	lddpc	r8,8000d108 <udi_msc_trans_block+0xe0>
8000d0ec:	91 29       	st.w	r8[0x8],r9
	return true;
8000d0ee:	30 18       	mov	r8,1
}
8000d0f0:	10 9c       	mov	r12,r8
8000d0f2:	2f cd       	sub	sp,-16
8000d0f4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d0f8:	00 00       	add	r0,r0
8000d0fa:	01 64       	ld.uh	r4,--r0
8000d0fc:	80 00       	ld.sh	r0,r0[0x0]
8000d0fe:	cf f0       	breq	8000d0fc <udi_msc_trans_block+0xd4>
8000d100:	80 00       	ld.sh	r0,r0[0x0]
8000d102:	a5 80       	lsr	r0,0x4
8000d104:	00 00       	add	r0,r0
8000d106:	0e 03       	add	r3,r7
8000d108:	00 00       	add	r0,r0
8000d10a:	01 54       	ld.sh	r4,--r0
8000d10c:	36 39       	mov	r9,99
8000d10e:	36 39       	mov	r9,99
8000d110:	36 39       	mov	r9,99
8000d112:	36 39       	mov	r9,99
8000d114:	36 39       	mov	r9,99
8000d116:	36 39       	mov	r9,99
8000d118:	00 00       	add	r0,r0
	...

8000d11c <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
8000d11c:	eb cd 40 80 	pushm	r7,lr
8000d120:	1a 97       	mov	r7,sp
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
8000d122:	48 38       	lddpc	r8,8000d12c <udc_get_string_serial_name+0x10>
	}
8000d124:	10 9c       	mov	r12,r8
8000d126:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d12a:	00 00       	add	r0,r0
8000d12c:	80 00       	ld.sh	r0,r0[0x0]
8000d12e:	d1 0c       	*unknown*

8000d130 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
8000d130:	eb cd 40 80 	pushm	r7,lr
8000d134:	1a 97       	mov	r7,sp
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
8000d136:	48 b8       	lddpc	r8,8000d160 <udc_get_eof_conf+0x30>
8000d138:	70 08       	ld.w	r8,r8[0x0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000d13a:	70 09       	ld.w	r9,r8[0x0]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000d13c:	48 98       	lddpc	r8,8000d160 <udc_get_eof_conf+0x30>
8000d13e:	70 08       	ld.w	r8,r8[0x0]
8000d140:	70 08       	ld.w	r8,r8[0x0]
8000d142:	11 aa       	ld.ub	r10,r8[0x2]
8000d144:	a9 6a       	lsl	r10,0x8
8000d146:	11 b8       	ld.ub	r8,r8[0x3]
8000d148:	14 48       	or	r8,r10
8000d14a:	5c 88       	casts.h	r8
8000d14c:	5c 88       	casts.h	r8
8000d14e:	5c c8       	swap.bh	r8
8000d150:	5c 88       	casts.h	r8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000d152:	5c 78       	castu.h	r8
8000d154:	f2 08 00 08 	add	r8,r9,r8
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
8000d158:	10 9c       	mov	r12,r8
8000d15a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d15e:	00 00       	add	r0,r0
8000d160:	00 00       	add	r0,r0
8000d162:	08 54       	eor	r4,r4

8000d164 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
8000d164:	eb cd 40 80 	pushm	r7,lr
8000d168:	1a 97       	mov	r7,sp
8000d16a:	20 3d       	sub	sp,12
8000d16c:	ef 4c ff f8 	st.w	r7[-8],r12
8000d170:	16 98       	mov	r8,r11
8000d172:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
8000d176:	f0 1f 00 1d 	mcall	8000d1e8 <udc_next_desc_in_iface+0x84>
8000d17a:	18 98       	mov	r8,r12
8000d17c:	ef 48 ff fc 	st.w	r7[-4],r8
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000d180:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d184:	11 88       	ld.ub	r8,r8[0x0]
8000d186:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d18a:	f2 08 00 08 	add	r8,r9,r8
8000d18e:	ef 48 ff f8 	st.w	r7[-8],r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000d192:	c1 c8       	rjmp	8000d1ca <udc_next_desc_in_iface+0x66>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
8000d194:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d198:	11 99       	ld.ub	r9,r8[0x1]
8000d19a:	30 48       	mov	r8,4
8000d19c:	f0 09 18 00 	cp.b	r9,r8
8000d1a0:	c1 d0       	breq	8000d1da <udc_next_desc_in_iface+0x76>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
8000d1a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d1a6:	11 98       	ld.ub	r8,r8[0x1]
8000d1a8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d1ac:	f0 09 18 00 	cp.b	r9,r8
8000d1b0:	c0 41       	brne	8000d1b8 <udc_next_desc_in_iface+0x54>
			return desc; // Specific descriptor found
8000d1b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d1b6:	c1 48       	rjmp	8000d1de <udc_next_desc_in_iface+0x7a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000d1b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d1bc:	11 88       	ld.ub	r8,r8[0x0]
8000d1be:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d1c2:	f2 08 00 08 	add	r8,r9,r8
8000d1c6:	ef 48 ff f8 	st.w	r7[-8],r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000d1ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d1ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d1d2:	10 39       	cp.w	r9,r8
8000d1d4:	fe 9b ff e0 	brhi	8000d194 <udc_next_desc_in_iface+0x30>
8000d1d8:	c0 28       	rjmp	8000d1dc <udc_next_desc_in_iface+0x78>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
8000d1da:	d7 03       	nop
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
8000d1dc:	30 08       	mov	r8,0
}
8000d1de:	10 9c       	mov	r12,r8
8000d1e0:	2f dd       	sub	sp,-12
8000d1e2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d1e6:	00 00       	add	r0,r0
8000d1e8:	80 00       	ld.sh	r0,r0[0x0]
8000d1ea:	d1 30       	acall	0x4c

8000d1ec <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
8000d1ec:	eb cd 40 80 	pushm	r7,lr
8000d1f0:	1a 97       	mov	r7,sp
8000d1f2:	20 3d       	sub	sp,12
8000d1f4:	18 99       	mov	r9,r12
8000d1f6:	16 98       	mov	r8,r11
8000d1f8:	ef 69 ff f8 	st.b	r7[-8],r9
8000d1fc:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
8000d200:	4a 58       	lddpc	r8,8000d294 <udc_update_iface_desc+0xa8>
8000d202:	11 88       	ld.ub	r8,r8[0x0]
8000d204:	58 08       	cp.w	r8,0
8000d206:	c0 31       	brne	8000d20c <udc_update_iface_desc+0x20>
		return false;
8000d208:	30 08       	mov	r8,0
8000d20a:	c4 18       	rjmp	8000d28c <udc_update_iface_desc+0xa0>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000d20c:	4a 38       	lddpc	r8,8000d298 <udc_update_iface_desc+0xac>
8000d20e:	70 08       	ld.w	r8,r8[0x0]
8000d210:	70 08       	ld.w	r8,r8[0x0]
8000d212:	11 c8       	ld.ub	r8,r8[0x4]
8000d214:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d218:	f0 09 18 00 	cp.b	r9,r8
8000d21c:	c0 33       	brcs	8000d222 <udc_update_iface_desc+0x36>
		return false;
8000d21e:	30 08       	mov	r8,0
8000d220:	c3 68       	rjmp	8000d28c <udc_update_iface_desc+0xa0>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
8000d222:	49 e8       	lddpc	r8,8000d298 <udc_update_iface_desc+0xac>
8000d224:	70 08       	ld.w	r8,r8[0x0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000d226:	70 08       	ld.w	r8,r8[0x0]
8000d228:	10 99       	mov	r9,r8
8000d22a:	49 d8       	lddpc	r8,8000d29c <udc_update_iface_desc+0xb0>
8000d22c:	91 09       	st.w	r8[0x0],r9
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000d22e:	f0 1f 00 1d 	mcall	8000d2a0 <udc_update_iface_desc+0xb4>
8000d232:	18 98       	mov	r8,r12
8000d234:	ef 48 ff fc 	st.w	r7[-4],r8
	while (ptr_end_desc >
8000d238:	c2 28       	rjmp	8000d27c <udc_update_iface_desc+0x90>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000d23a:	49 98       	lddpc	r8,8000d29c <udc_update_iface_desc+0xb0>
8000d23c:	70 08       	ld.w	r8,r8[0x0]
8000d23e:	11 99       	ld.ub	r9,r8[0x1]
8000d240:	30 48       	mov	r8,4
8000d242:	f0 09 18 00 	cp.b	r9,r8
8000d246:	c1 31       	brne	8000d26c <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000d248:	49 58       	lddpc	r8,8000d29c <udc_update_iface_desc+0xb0>
8000d24a:	70 08       	ld.w	r8,r8[0x0]
8000d24c:	11 a8       	ld.ub	r8,r8[0x2]
8000d24e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d252:	f0 09 18 00 	cp.b	r9,r8
8000d256:	c0 b1       	brne	8000d26c <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
8000d258:	49 18       	lddpc	r8,8000d29c <udc_update_iface_desc+0xb0>
8000d25a:	70 08       	ld.w	r8,r8[0x0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
					(setting_num ==
8000d25c:	11 b8       	ld.ub	r8,r8[0x3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000d25e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d262:	f0 09 18 00 	cp.b	r9,r8
8000d266:	c0 31       	brne	8000d26c <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
8000d268:	30 18       	mov	r8,1
8000d26a:	c1 18       	rjmp	8000d28c <udc_update_iface_desc+0xa0>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000d26c:	48 c8       	lddpc	r8,8000d29c <udc_update_iface_desc+0xb0>
8000d26e:	70 09       	ld.w	r9,r8[0x0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
8000d270:	48 b8       	lddpc	r8,8000d29c <udc_update_iface_desc+0xb0>
8000d272:	70 08       	ld.w	r8,r8[0x0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000d274:	11 88       	ld.ub	r8,r8[0x0]
8000d276:	10 09       	add	r9,r8
8000d278:	48 98       	lddpc	r8,8000d29c <udc_update_iface_desc+0xb0>
8000d27a:	91 09       	st.w	r8[0x0],r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000d27c:	48 88       	lddpc	r8,8000d29c <udc_update_iface_desc+0xb0>
8000d27e:	70 08       	ld.w	r8,r8[0x0]
8000d280:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d284:	10 39       	cp.w	r9,r8
8000d286:	fe 9b ff da 	brhi	8000d23a <udc_update_iface_desc+0x4e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
8000d28a:	30 08       	mov	r8,0
}
8000d28c:	10 9c       	mov	r12,r8
8000d28e:	2f dd       	sub	sp,-12
8000d290:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d294:	00 00       	add	r0,r0
8000d296:	08 52       	eor	r2,r4
8000d298:	00 00       	add	r0,r0
8000d29a:	08 54       	eor	r4,r4
8000d29c:	00 00       	add	r0,r0
8000d29e:	08 58       	eor	r8,r4
8000d2a0:	80 00       	ld.sh	r0,r0[0x0]
8000d2a2:	d1 30       	acall	0x4c

8000d2a4 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
8000d2a4:	eb cd 40 80 	pushm	r7,lr
8000d2a8:	1a 97       	mov	r7,sp
8000d2aa:	20 3d       	sub	sp,12
8000d2ac:	18 98       	mov	r8,r12
8000d2ae:	ef 68 ff f4 	st.b	r7[-12],r8
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000d2b2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d2b6:	30 0b       	mov	r11,0
8000d2b8:	10 9c       	mov	r12,r8
8000d2ba:	f0 1f 00 25 	mcall	8000d34c <udc_iface_disable+0xa8>
8000d2be:	18 98       	mov	r8,r12
8000d2c0:	ec 18 00 01 	eorl	r8,0x1
8000d2c4:	5c 58       	castu.b	r8
8000d2c6:	c0 30       	breq	8000d2cc <udc_iface_disable+0x28>
		return false;
8000d2c8:	30 08       	mov	r8,0
8000d2ca:	c3 d8       	rjmp	8000d344 <udc_iface_disable+0xa0>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000d2cc:	4a 18       	lddpc	r8,8000d350 <udc_iface_disable+0xac>
8000d2ce:	70 08       	ld.w	r8,r8[0x0]
8000d2d0:	70 19       	ld.w	r9,r8[0x4]
8000d2d2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d2d6:	a3 68       	lsl	r8,0x2
8000d2d8:	f2 08 00 08 	add	r8,r9,r8
8000d2dc:	70 08       	ld.w	r8,r8[0x0]
8000d2de:	ef 48 ff f8 	st.w	r7[-8],r8

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000d2e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d2e6:	70 38       	ld.w	r8,r8[0xc]
8000d2e8:	5d 18       	icall	r8
8000d2ea:	18 98       	mov	r8,r12
8000d2ec:	10 99       	mov	r9,r8
8000d2ee:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d2f2:	12 9b       	mov	r11,r9
8000d2f4:	10 9c       	mov	r12,r8
8000d2f6:	f0 1f 00 16 	mcall	8000d34c <udc_iface_disable+0xa8>
8000d2fa:	18 98       	mov	r8,r12
8000d2fc:	ec 18 00 01 	eorl	r8,0x1
8000d300:	5c 58       	castu.b	r8
8000d302:	c0 30       	breq	8000d308 <udc_iface_disable+0x64>
		return false;
8000d304:	30 08       	mov	r8,0
8000d306:	c1 f8       	rjmp	8000d344 <udc_iface_disable+0xa0>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000d308:	49 38       	lddpc	r8,8000d354 <udc_iface_disable+0xb0>
8000d30a:	70 08       	ld.w	r8,r8[0x0]
8000d30c:	ef 48 ff fc 	st.w	r7[-4],r8
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000d310:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d314:	30 5b       	mov	r11,5
8000d316:	10 9c       	mov	r12,r8
8000d318:	f0 1f 00 10 	mcall	8000d358 <udc_iface_disable+0xb4>
8000d31c:	18 98       	mov	r8,r12
8000d31e:	ef 48 ff fc 	st.w	r7[-4],r8
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
8000d322:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d326:	58 08       	cp.w	r8,0
8000d328:	c0 71       	brne	8000d336 <udc_iface_disable+0x92>
		}
	}
#endif

	// Disable interface
	udi_api->disable();
8000d32a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d32e:	70 18       	ld.w	r8,r8[0x4]
8000d330:	5d 18       	icall	r8
	return true;
8000d332:	30 18       	mov	r8,1
8000d334:	c0 88       	rjmp	8000d344 <udc_iface_disable+0xa0>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000d336:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d33a:	11 a8       	ld.ub	r8,r8[0x2]
8000d33c:	10 9c       	mov	r12,r8
8000d33e:	f0 1f 00 08 	mcall	8000d35c <udc_iface_disable+0xb8>
		}
8000d342:	ce 7b       	rjmp	8000d310 <udc_iface_disable+0x6c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
8000d344:	10 9c       	mov	r12,r8
8000d346:	2f dd       	sub	sp,-12
8000d348:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d34c:	80 00       	ld.sh	r0,r0[0x0]
8000d34e:	d1 ec       	*unknown*
8000d350:	00 00       	add	r0,r0
8000d352:	08 54       	eor	r4,r4
8000d354:	00 00       	add	r0,r0
8000d356:	08 58       	eor	r8,r4
8000d358:	80 00       	ld.sh	r0,r0[0x0]
8000d35a:	d1 64       	*unknown*
8000d35c:	80 00       	ld.sh	r0,r0[0x0]
8000d35e:	a2 60       	st.h	r1[0xc],r0

8000d360 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
8000d360:	eb cd 40 80 	pushm	r7,lr
8000d364:	1a 97       	mov	r7,sp
8000d366:	20 3d       	sub	sp,12
8000d368:	18 99       	mov	r9,r12
8000d36a:	16 98       	mov	r8,r11
8000d36c:	ef 69 ff f8 	st.b	r7[-8],r9
8000d370:	ef 68 ff f4 	st.b	r7[-12],r8
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
8000d374:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d378:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d37c:	12 9b       	mov	r11,r9
8000d37e:	10 9c       	mov	r12,r8
8000d380:	f0 1f 00 25 	mcall	8000d414 <udc_iface_enable+0xb4>
8000d384:	18 98       	mov	r8,r12
8000d386:	ec 18 00 01 	eorl	r8,0x1
8000d38a:	5c 58       	castu.b	r8
8000d38c:	c0 30       	breq	8000d392 <udc_iface_enable+0x32>
		return false;
8000d38e:	30 08       	mov	r8,0
8000d390:	c3 e8       	rjmp	8000d40c <udc_iface_enable+0xac>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000d392:	4a 28       	lddpc	r8,8000d418 <udc_iface_enable+0xb8>
8000d394:	70 08       	ld.w	r8,r8[0x0]
8000d396:	ef 48 ff fc 	st.w	r7[-4],r8
8000d39a:	c0 28       	rjmp	8000d39e <udc_iface_enable+0x3e>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
		}
	}
8000d39c:	d7 03       	nop

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000d39e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d3a2:	30 5b       	mov	r11,5
8000d3a4:	10 9c       	mov	r12,r8
8000d3a6:	f0 1f 00 1e 	mcall	8000d41c <udc_iface_enable+0xbc>
8000d3aa:	18 98       	mov	r8,r12
8000d3ac:	ef 48 ff fc 	st.w	r7[-4],r8
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
8000d3b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d3b4:	58 08       	cp.w	r8,0
8000d3b6:	c0 e1       	brne	8000d3d2 <udc_iface_enable+0x72>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000d3b8:	49 a8       	lddpc	r8,8000d420 <udc_iface_enable+0xc0>
8000d3ba:	70 08       	ld.w	r8,r8[0x0]
8000d3bc:	70 19       	ld.w	r9,r8[0x4]
8000d3be:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d3c2:	a3 68       	lsl	r8,0x2
8000d3c4:	f2 08 00 08 	add	r8,r9,r8
8000d3c8:	70 08       	ld.w	r8,r8[0x0]
8000d3ca:	70 08       	ld.w	r8,r8[0x0]
8000d3cc:	5d 18       	icall	r8
8000d3ce:	18 98       	mov	r8,r12
8000d3d0:	c1 e8       	rjmp	8000d40c <udc_iface_enable+0xac>
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
8000d3d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d3d6:	11 c9       	ld.ub	r9,r8[0x4]
8000d3d8:	a9 69       	lsl	r9,0x8
8000d3da:	11 d8       	ld.ub	r8,r8[0x5]
8000d3dc:	12 48       	or	r8,r9
8000d3de:	5c 88       	casts.h	r8
8000d3e0:	5c 88       	casts.h	r8
8000d3e2:	5c c8       	swap.bh	r8
8000d3e4:	5c 88       	casts.h	r8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000d3e6:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
				ep_desc->bmAttributes,
8000d3ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d3ee:	11 b8       	ld.ub	r8,r8[0x3]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000d3f0:	10 99       	mov	r9,r8
8000d3f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d3f6:	11 a8       	ld.ub	r8,r8[0x2]
8000d3f8:	12 9b       	mov	r11,r9
8000d3fa:	10 9c       	mov	r12,r8
8000d3fc:	f0 1f 00 0a 	mcall	8000d424 <udc_iface_enable+0xc4>
8000d400:	18 98       	mov	r8,r12
8000d402:	ec 18 00 01 	eorl	r8,0x1
8000d406:	5c 58       	castu.b	r8
8000d408:	cc a0       	breq	8000d39c <udc_iface_enable+0x3c>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
8000d40a:	30 08       	mov	r8,0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
8000d40c:	10 9c       	mov	r12,r8
8000d40e:	2f dd       	sub	sp,-12
8000d410:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d414:	80 00       	ld.sh	r0,r0[0x0]
8000d416:	d1 ec       	*unknown*
8000d418:	00 00       	add	r0,r0
8000d41a:	08 58       	eor	r8,r4
8000d41c:	80 00       	ld.sh	r0,r0[0x0]
8000d41e:	d1 64       	*unknown*
8000d420:	00 00       	add	r0,r0
8000d422:	08 54       	eor	r4,r4
8000d424:	80 00       	ld.sh	r0,r0[0x0]
8000d426:	9f 10       	st.w	pc[0x4],r0

8000d428 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
8000d428:	eb cd 40 80 	pushm	r7,lr
8000d42c:	1a 97       	mov	r7,sp
	udd_enable();
8000d42e:	f0 1f 00 03 	mcall	8000d438 <udc_start+0x10>
}
8000d432:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d436:	00 00       	add	r0,r0
8000d438:	80 00       	ld.sh	r0,r0[0x0]
8000d43a:	9c 3c       	ld.sh	r12,lr[0x6]

8000d43c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
8000d43c:	eb cd 40 80 	pushm	r7,lr
8000d440:	1a 97       	mov	r7,sp
8000d442:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000d444:	49 38       	lddpc	r8,8000d490 <udc_reset+0x54>
8000d446:	11 88       	ld.ub	r8,r8[0x0]
8000d448:	58 08       	cp.w	r8,0
8000d44a:	c1 80       	breq	8000d47a <udc_reset+0x3e>
		for (iface_num = 0;
8000d44c:	30 08       	mov	r8,0
8000d44e:	ef 68 ff ff 	st.b	r7[-1],r8
8000d452:	c0 b8       	rjmp	8000d468 <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
8000d454:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d458:	10 9c       	mov	r12,r8
8000d45a:	f0 1f 00 0f 	mcall	8000d494 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000d45e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d462:	2f f8       	sub	r8,-1
8000d464:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000d468:	48 c8       	lddpc	r8,8000d498 <udc_reset+0x5c>
8000d46a:	70 08       	ld.w	r8,r8[0x0]
8000d46c:	70 08       	ld.w	r8,r8[0x0]
8000d46e:	11 c8       	ld.ub	r8,r8[0x4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000d470:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d474:	f0 09 18 00 	cp.b	r9,r8
8000d478:	ce e3       	brcs	8000d454 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
8000d47a:	48 69       	lddpc	r9,8000d490 <udc_reset+0x54>
8000d47c:	30 08       	mov	r8,0
8000d47e:	b2 88       	st.b	r9[0x0],r8
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
8000d480:	48 79       	lddpc	r9,8000d49c <udc_reset+0x60>
8000d482:	e0 68 01 00 	mov	r8,256
8000d486:	b2 08       	st.h	r9[0x0],r8
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
8000d488:	2f fd       	sub	sp,-4
8000d48a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d48e:	00 00       	add	r0,r0
8000d490:	00 00       	add	r0,r0
8000d492:	08 52       	eor	r2,r4
8000d494:	80 00       	ld.sh	r0,r0[0x0]
8000d496:	d2 a4       	*unknown*
8000d498:	00 00       	add	r0,r0
8000d49a:	08 54       	eor	r4,r4
8000d49c:	00 00       	add	r0,r0
8000d49e:	08 50       	eor	r0,r4

8000d4a0 <udc_sof_notify>:

void udc_sof_notify(void)
{
8000d4a0:	eb cd 40 80 	pushm	r7,lr
8000d4a4:	1a 97       	mov	r7,sp
8000d4a6:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000d4a8:	49 88       	lddpc	r8,8000d508 <udc_sof_notify+0x68>
8000d4aa:	11 88       	ld.ub	r8,r8[0x0]
8000d4ac:	58 08       	cp.w	r8,0
8000d4ae:	c2 a0       	breq	8000d502 <udc_sof_notify+0x62>
		for (iface_num = 0;
8000d4b0:	30 08       	mov	r8,0
8000d4b2:	ef 68 ff ff 	st.b	r7[-1],r8
8000d4b6:	c1 d8       	rjmp	8000d4f0 <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
8000d4b8:	49 58       	lddpc	r8,8000d50c <udc_sof_notify+0x6c>
8000d4ba:	70 08       	ld.w	r8,r8[0x0]
8000d4bc:	70 19       	ld.w	r9,r8[0x4]
8000d4be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d4c2:	a3 68       	lsl	r8,0x2
8000d4c4:	f2 08 00 08 	add	r8,r9,r8
8000d4c8:	70 08       	ld.w	r8,r8[0x0]
8000d4ca:	70 48       	ld.w	r8,r8[0x10]
8000d4cc:	58 08       	cp.w	r8,0
8000d4ce:	c0 c0       	breq	8000d4e6 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
8000d4d0:	48 f8       	lddpc	r8,8000d50c <udc_sof_notify+0x6c>
8000d4d2:	70 08       	ld.w	r8,r8[0x0]
8000d4d4:	70 19       	ld.w	r9,r8[0x4]
8000d4d6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d4da:	a3 68       	lsl	r8,0x2
8000d4dc:	f2 08 00 08 	add	r8,r9,r8
8000d4e0:	70 08       	ld.w	r8,r8[0x0]
8000d4e2:	70 48       	ld.w	r8,r8[0x10]
8000d4e4:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000d4e6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d4ea:	2f f8       	sub	r8,-1
8000d4ec:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000d4f0:	48 78       	lddpc	r8,8000d50c <udc_sof_notify+0x6c>
8000d4f2:	70 08       	ld.w	r8,r8[0x0]
8000d4f4:	70 08       	ld.w	r8,r8[0x0]
8000d4f6:	11 c8       	ld.ub	r8,r8[0x4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000d4f8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d4fc:	f0 09 18 00 	cp.b	r9,r8
8000d500:	cd c3       	brcs	8000d4b8 <udc_sof_notify+0x18>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
8000d502:	2f fd       	sub	sp,-4
8000d504:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d508:	00 00       	add	r0,r0
8000d50a:	08 52       	eor	r2,r4
8000d50c:	00 00       	add	r0,r0
8000d50e:	08 54       	eor	r4,r4

8000d510 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
8000d510:	eb cd 40 80 	pushm	r7,lr
8000d514:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
8000d516:	48 98       	lddpc	r8,8000d538 <udc_req_std_dev_get_status+0x28>
8000d518:	90 39       	ld.sh	r9,r8[0x6]
8000d51a:	30 28       	mov	r8,2
8000d51c:	f0 09 19 00 	cp.h	r9,r8
8000d520:	c0 30       	breq	8000d526 <udc_req_std_dev_get_status+0x16>
		return false;
8000d522:	30 08       	mov	r8,0
8000d524:	c0 78       	rjmp	8000d532 <udc_req_std_dev_get_status+0x22>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
8000d526:	48 68       	lddpc	r8,8000d53c <udc_req_std_dev_get_status+0x2c>
8000d528:	30 2b       	mov	r11,2
8000d52a:	10 9c       	mov	r12,r8
8000d52c:	f0 1f 00 05 	mcall	8000d540 <udc_req_std_dev_get_status+0x30>
			sizeof(udc_device_status));
	return true;
8000d530:	30 18       	mov	r8,1
}
8000d532:	10 9c       	mov	r12,r8
8000d534:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d538:	00 00       	add	r0,r0
8000d53a:	0d e4       	ld.ub	r4,r6[0x6]
8000d53c:	00 00       	add	r0,r0
8000d53e:	08 50       	eor	r0,r4
8000d540:	80 00       	ld.sh	r0,r0[0x0]
8000d542:	9e e4       	ld.uh	r4,pc[0xc]

8000d544 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
8000d544:	eb cd 40 80 	pushm	r7,lr
8000d548:	1a 97       	mov	r7,sp
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
8000d54a:	49 18       	lddpc	r8,8000d58c <udc_req_std_ep_get_status+0x48>
8000d54c:	90 39       	ld.sh	r9,r8[0x6]
8000d54e:	30 28       	mov	r8,2
8000d550:	f0 09 19 00 	cp.h	r9,r8
8000d554:	c0 30       	breq	8000d55a <udc_req_std_ep_get_status+0x16>
		return false;
8000d556:	30 08       	mov	r8,0
8000d558:	c1 68       	rjmp	8000d584 <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000d55a:	48 d8       	lddpc	r8,8000d58c <udc_req_std_ep_get_status+0x48>
8000d55c:	90 28       	ld.sh	r8,r8[0x4]
8000d55e:	5c 58       	castu.b	r8
8000d560:	10 9c       	mov	r12,r8
8000d562:	f0 1f 00 0c 	mcall	8000d590 <udc_req_std_ep_get_status+0x4c>
8000d566:	18 98       	mov	r8,r12
8000d568:	58 08       	cp.w	r8,0
8000d56a:	c0 40       	breq	8000d572 <udc_req_std_ep_get_status+0x2e>
8000d56c:	e0 68 01 00 	mov	r8,256
8000d570:	c0 28       	rjmp	8000d574 <udc_req_std_ep_get_status+0x30>
8000d572:	30 08       	mov	r8,0
8000d574:	48 89       	lddpc	r9,8000d594 <udc_req_std_ep_get_status+0x50>
8000d576:	b2 08       	st.h	r9[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
8000d578:	48 78       	lddpc	r8,8000d594 <udc_req_std_ep_get_status+0x50>
8000d57a:	30 2b       	mov	r11,2
8000d57c:	10 9c       	mov	r12,r8
8000d57e:	f0 1f 00 07 	mcall	8000d598 <udc_req_std_ep_get_status+0x54>
			sizeof(udc_ep_status));
	return true;
8000d582:	30 18       	mov	r8,1
}
8000d584:	10 9c       	mov	r12,r8
8000d586:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d58a:	00 00       	add	r0,r0
8000d58c:	00 00       	add	r0,r0
8000d58e:	0d e4       	ld.ub	r4,r6[0x6]
8000d590:	80 00       	ld.sh	r0,r0[0x0]
8000d592:	a2 fc       	st.b	r1[0x7],r12
8000d594:	00 00       	add	r0,r0
8000d596:	08 5e       	eor	lr,r4
8000d598:	80 00       	ld.sh	r0,r0[0x0]
8000d59a:	9e e4       	ld.uh	r4,pc[0xc]

8000d59c <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
8000d59c:	eb cd 40 80 	pushm	r7,lr
8000d5a0:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d5a2:	48 d8       	lddpc	r8,8000d5d4 <udc_req_std_dev_clear_feature+0x38>
8000d5a4:	90 38       	ld.sh	r8,r8[0x6]
8000d5a6:	58 08       	cp.w	r8,0
8000d5a8:	c0 30       	breq	8000d5ae <udc_req_std_dev_clear_feature+0x12>
		return false;
8000d5aa:	30 08       	mov	r8,0
8000d5ac:	c1 08       	rjmp	8000d5cc <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000d5ae:	48 a8       	lddpc	r8,8000d5d4 <udc_req_std_dev_clear_feature+0x38>
8000d5b0:	90 19       	ld.sh	r9,r8[0x2]
8000d5b2:	30 18       	mov	r8,1
8000d5b4:	f0 09 19 00 	cp.h	r9,r8
8000d5b8:	c0 91       	brne	8000d5ca <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
8000d5ba:	48 88       	lddpc	r8,8000d5d8 <udc_req_std_dev_clear_feature+0x3c>
8000d5bc:	90 08       	ld.sh	r8,r8[0x0]
8000d5be:	a9 d8       	cbr	r8,0x9
8000d5c0:	5c 88       	casts.h	r8
8000d5c2:	48 69       	lddpc	r9,8000d5d8 <udc_req_std_dev_clear_feature+0x3c>
8000d5c4:	b2 08       	st.h	r9[0x0],r8
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
8000d5c6:	30 18       	mov	r8,1
8000d5c8:	c0 28       	rjmp	8000d5cc <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
8000d5ca:	30 08       	mov	r8,0
}
8000d5cc:	10 9c       	mov	r12,r8
8000d5ce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d5d2:	00 00       	add	r0,r0
8000d5d4:	00 00       	add	r0,r0
8000d5d6:	0d e4       	ld.ub	r4,r6[0x6]
8000d5d8:	00 00       	add	r0,r0
8000d5da:	08 50       	eor	r0,r4

8000d5dc <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
8000d5dc:	eb cd 40 80 	pushm	r7,lr
8000d5e0:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d5e2:	48 c8       	lddpc	r8,8000d610 <udc_req_std_ep_clear_feature+0x34>
8000d5e4:	90 38       	ld.sh	r8,r8[0x6]
8000d5e6:	58 08       	cp.w	r8,0
8000d5e8:	c0 30       	breq	8000d5ee <udc_req_std_ep_clear_feature+0x12>
		return false;
8000d5ea:	30 08       	mov	r8,0
8000d5ec:	c0 e8       	rjmp	8000d608 <udc_req_std_ep_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000d5ee:	48 98       	lddpc	r8,8000d610 <udc_req_std_ep_clear_feature+0x34>
8000d5f0:	90 18       	ld.sh	r8,r8[0x2]
8000d5f2:	58 08       	cp.w	r8,0
8000d5f4:	c0 91       	brne	8000d606 <udc_req_std_ep_clear_feature+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000d5f6:	48 78       	lddpc	r8,8000d610 <udc_req_std_ep_clear_feature+0x34>
8000d5f8:	90 28       	ld.sh	r8,r8[0x4]
8000d5fa:	5c 58       	castu.b	r8
8000d5fc:	10 9c       	mov	r12,r8
8000d5fe:	f0 1f 00 06 	mcall	8000d614 <udc_req_std_ep_clear_feature+0x38>
8000d602:	18 98       	mov	r8,r12
8000d604:	c0 28       	rjmp	8000d608 <udc_req_std_ep_clear_feature+0x2c>
	}
	return false;
8000d606:	30 08       	mov	r8,0
}
8000d608:	10 9c       	mov	r12,r8
8000d60a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d60e:	00 00       	add	r0,r0
8000d610:	00 00       	add	r0,r0
8000d612:	0d e4       	ld.ub	r4,r6[0x6]
8000d614:	80 00       	ld.sh	r0,r0[0x0]
8000d616:	a4 40       	st.h	r2[0x8],r0

8000d618 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
8000d618:	eb cd 40 80 	pushm	r7,lr
8000d61c:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d61e:	4a 78       	lddpc	r8,8000d6b8 <udc_req_std_dev_set_feature+0xa0>
8000d620:	90 38       	ld.sh	r8,r8[0x6]
8000d622:	58 08       	cp.w	r8,0
8000d624:	c0 30       	breq	8000d62a <udc_req_std_dev_set_feature+0x12>
		return false;
8000d626:	30 08       	mov	r8,0
8000d628:	c4 48       	rjmp	8000d6b0 <udc_req_std_dev_set_feature+0x98>
	}

	switch (udd_g_ctrlreq.req.wValue) {
8000d62a:	4a 48       	lddpc	r8,8000d6b8 <udc_req_std_dev_set_feature+0xa0>
8000d62c:	90 18       	ld.sh	r8,r8[0x2]
8000d62e:	5c 78       	castu.h	r8
8000d630:	58 18       	cp.w	r8,1
8000d632:	c0 40       	breq	8000d63a <udc_req_std_dev_set_feature+0x22>
8000d634:	58 28       	cp.w	r8,2
8000d636:	c0 40       	breq	8000d63e <udc_req_std_dev_set_feature+0x26>
8000d638:	c3 b8       	rjmp	8000d6ae <udc_req_std_dev_set_feature+0x96>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
8000d63a:	30 08       	mov	r8,0
8000d63c:	c3 a8       	rjmp	8000d6b0 <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
8000d63e:	f0 1f 00 20 	mcall	8000d6bc <udc_req_std_dev_set_feature+0xa4>
8000d642:	18 98       	mov	r8,r12
8000d644:	ec 18 00 01 	eorl	r8,0x1
8000d648:	5c 58       	castu.b	r8
8000d64a:	c2 f1       	brne	8000d6a8 <udc_req_std_dev_set_feature+0x90>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
8000d64c:	49 b8       	lddpc	r8,8000d6b8 <udc_req_std_dev_set_feature+0xa0>
8000d64e:	90 28       	ld.sh	r8,r8[0x4]
8000d650:	5c 78       	castu.h	r8
8000d652:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d656:	c2 b1       	brne	8000d6ac <udc_req_std_dev_set_feature+0x94>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
8000d658:	f0 1f 00 1a 	mcall	8000d6c0 <udc_req_std_dev_set_feature+0xa8>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
8000d65c:	49 78       	lddpc	r8,8000d6b8 <udc_req_std_dev_set_feature+0xa0>
8000d65e:	90 28       	ld.sh	r8,r8[0x4]
8000d660:	5c 78       	castu.h	r8
8000d662:	a9 88       	lsr	r8,0x8
8000d664:	5c 88       	casts.h	r8
8000d666:	5c 78       	castu.h	r8
8000d668:	58 28       	cp.w	r8,2
8000d66a:	c1 00       	breq	8000d68a <udc_req_std_dev_set_feature+0x72>
8000d66c:	e0 89 00 05 	brgt	8000d676 <udc_req_std_dev_set_feature+0x5e>
8000d670:	58 18       	cp.w	r8,1
8000d672:	c0 70       	breq	8000d680 <udc_req_std_dev_set_feature+0x68>
8000d674:	c1 d8       	rjmp	8000d6ae <udc_req_std_dev_set_feature+0x96>
8000d676:	58 38       	cp.w	r8,3
8000d678:	c0 e0       	breq	8000d694 <udc_req_std_dev_set_feature+0x7c>
8000d67a:	58 48       	cp.w	r8,4
8000d67c:	c1 10       	breq	8000d69e <udc_req_std_dev_set_feature+0x86>
8000d67e:	c1 88       	rjmp	8000d6ae <udc_req_std_dev_set_feature+0x96>
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
8000d680:	48 e8       	lddpc	r8,8000d6b8 <udc_req_std_dev_set_feature+0xa0>
8000d682:	49 19       	lddpc	r9,8000d6c4 <udc_req_std_dev_set_feature+0xac>
8000d684:	91 49       	st.w	r8[0x10],r9
			return true;
8000d686:	30 18       	mov	r8,1
8000d688:	c1 48       	rjmp	8000d6b0 <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
8000d68a:	48 c8       	lddpc	r8,8000d6b8 <udc_req_std_dev_set_feature+0xa0>
8000d68c:	48 f9       	lddpc	r9,8000d6c8 <udc_req_std_dev_set_feature+0xb0>
8000d68e:	91 49       	st.w	r8[0x10],r9
			return true;
8000d690:	30 18       	mov	r8,1
8000d692:	c0 f8       	rjmp	8000d6b0 <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
8000d694:	48 98       	lddpc	r8,8000d6b8 <udc_req_std_dev_set_feature+0xa0>
8000d696:	48 e9       	lddpc	r9,8000d6cc <udc_req_std_dev_set_feature+0xb4>
8000d698:	91 49       	st.w	r8[0x10],r9
			return true;
8000d69a:	30 18       	mov	r8,1
8000d69c:	c0 a8       	rjmp	8000d6b0 <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
8000d69e:	48 78       	lddpc	r8,8000d6b8 <udc_req_std_dev_set_feature+0xa0>
8000d6a0:	48 c9       	lddpc	r9,8000d6d0 <udc_req_std_dev_set_feature+0xb8>
8000d6a2:	91 49       	st.w	r8[0x10],r9
			return true;
8000d6a4:	30 18       	mov	r8,1
8000d6a6:	c0 58       	rjmp	8000d6b0 <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
			break;
8000d6a8:	d7 03       	nop
8000d6aa:	c0 28       	rjmp	8000d6ae <udc_req_std_dev_set_feature+0x96>
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
			break;
8000d6ac:	d7 03       	nop
		break;
#endif
	default:
		break;
	}
	return false;
8000d6ae:	30 08       	mov	r8,0
}
8000d6b0:	10 9c       	mov	r12,r8
8000d6b2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d6b6:	00 00       	add	r0,r0
8000d6b8:	00 00       	add	r0,r0
8000d6ba:	0d e4       	ld.ub	r4,r6[0x6]
8000d6bc:	80 00       	ld.sh	r0,r0[0x0]
8000d6be:	9e 48       	ld.sh	r8,pc[0x8]
8000d6c0:	80 00       	ld.sh	r0,r0[0x0]
8000d6c2:	d4 3c       	*unknown*
8000d6c4:	80 00       	ld.sh	r0,r0[0x0]
8000d6c6:	a8 04       	st.h	r4[0x0],r4
8000d6c8:	80 00       	ld.sh	r0,r0[0x0]
8000d6ca:	a8 2e       	st.h	r4[0x4],lr
8000d6cc:	80 00       	ld.sh	r0,r0[0x0]
8000d6ce:	a8 58       	st.h	r4[0xa],r8
8000d6d0:	80 00       	ld.sh	r0,r0[0x0]
8000d6d2:	a8 74       	st.h	r4[0xe],r4

8000d6d4 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
8000d6d4:	eb cd 40 80 	pushm	r7,lr
8000d6d8:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d6da:	48 f8       	lddpc	r8,8000d714 <udc_req_std_ep_set_feature+0x40>
8000d6dc:	90 38       	ld.sh	r8,r8[0x6]
8000d6de:	58 08       	cp.w	r8,0
8000d6e0:	c0 30       	breq	8000d6e6 <udc_req_std_ep_set_feature+0x12>
		return false;
8000d6e2:	30 08       	mov	r8,0
8000d6e4:	c1 48       	rjmp	8000d70c <udc_req_std_ep_set_feature+0x38>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000d6e6:	48 c8       	lddpc	r8,8000d714 <udc_req_std_ep_set_feature+0x40>
8000d6e8:	90 18       	ld.sh	r8,r8[0x2]
8000d6ea:	58 08       	cp.w	r8,0
8000d6ec:	c0 f1       	brne	8000d70a <udc_req_std_ep_set_feature+0x36>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
8000d6ee:	48 a8       	lddpc	r8,8000d714 <udc_req_std_ep_set_feature+0x40>
8000d6f0:	90 28       	ld.sh	r8,r8[0x4]
8000d6f2:	5c 58       	castu.b	r8
8000d6f4:	10 9c       	mov	r12,r8
8000d6f6:	f0 1f 00 09 	mcall	8000d718 <udc_req_std_ep_set_feature+0x44>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000d6fa:	48 78       	lddpc	r8,8000d714 <udc_req_std_ep_set_feature+0x40>
8000d6fc:	90 28       	ld.sh	r8,r8[0x4]
8000d6fe:	5c 58       	castu.b	r8
8000d700:	10 9c       	mov	r12,r8
8000d702:	f0 1f 00 07 	mcall	8000d71c <udc_req_std_ep_set_feature+0x48>
8000d706:	18 98       	mov	r8,r12
8000d708:	c0 28       	rjmp	8000d70c <udc_req_std_ep_set_feature+0x38>
	}
	return false;
8000d70a:	30 08       	mov	r8,0
}
8000d70c:	10 9c       	mov	r12,r8
8000d70e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d712:	00 00       	add	r0,r0
8000d714:	00 00       	add	r0,r0
8000d716:	0d e4       	ld.ub	r4,r6[0x6]
8000d718:	80 00       	ld.sh	r0,r0[0x0]
8000d71a:	a6 a4       	st.b	r3[0x2],r4
8000d71c:	80 00       	ld.sh	r0,r0[0x0]
8000d71e:	a3 2c       	st.d	r1++,r12

8000d720 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
8000d720:	eb cd 40 80 	pushm	r7,lr
8000d724:	1a 97       	mov	r7,sp
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
8000d726:	48 68       	lddpc	r8,8000d73c <udc_valid_address+0x1c>
8000d728:	90 18       	ld.sh	r8,r8[0x2]
8000d72a:	5c 58       	castu.b	r8
8000d72c:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000d730:	10 9c       	mov	r12,r8
8000d732:	f0 1f 00 04 	mcall	8000d740 <udc_valid_address+0x20>
}
8000d736:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d73a:	00 00       	add	r0,r0
8000d73c:	00 00       	add	r0,r0
8000d73e:	0d e4       	ld.ub	r4,r6[0x6]
8000d740:	80 00       	ld.sh	r0,r0[0x0]
8000d742:	9e 64       	ld.sh	r4,pc[0xc]

8000d744 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
8000d744:	eb cd 40 80 	pushm	r7,lr
8000d748:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000d74a:	48 78       	lddpc	r8,8000d764 <udc_req_std_dev_set_address+0x20>
8000d74c:	90 38       	ld.sh	r8,r8[0x6]
8000d74e:	58 08       	cp.w	r8,0
8000d750:	c0 30       	breq	8000d756 <udc_req_std_dev_set_address+0x12>
		return false;
8000d752:	30 08       	mov	r8,0
8000d754:	c0 58       	rjmp	8000d75e <udc_req_std_dev_set_address+0x1a>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000d756:	48 48       	lddpc	r8,8000d764 <udc_req_std_dev_set_address+0x20>
8000d758:	48 49       	lddpc	r9,8000d768 <udc_req_std_dev_set_address+0x24>
8000d75a:	91 49       	st.w	r8[0x10],r9
	return true;
8000d75c:	30 18       	mov	r8,1
}
8000d75e:	10 9c       	mov	r12,r8
8000d760:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d764:	00 00       	add	r0,r0
8000d766:	0d e4       	ld.ub	r4,r6[0x6]
8000d768:	80 00       	ld.sh	r0,r0[0x0]
8000d76a:	d7 20       	acall	0x1c8

8000d76c <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
8000d76c:	eb cd 40 80 	pushm	r7,lr
8000d770:	1a 97       	mov	r7,sp
8000d772:	20 3d       	sub	sp,12
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
8000d774:	30 08       	mov	r8,0
8000d776:	ef 68 ff ff 	st.b	r7[-1],r8

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
8000d77a:	4b 68       	lddpc	r8,8000d850 <udc_req_std_dev_get_str_desc+0xe4>
8000d77c:	90 18       	ld.sh	r8,r8[0x2]
8000d77e:	5c 78       	castu.h	r8
8000d780:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d784:	58 18       	cp.w	r8,1
8000d786:	c1 00       	breq	8000d7a6 <udc_req_std_dev_get_str_desc+0x3a>
8000d788:	e0 89 00 05 	brgt	8000d792 <udc_req_std_dev_get_str_desc+0x26>
8000d78c:	58 08       	cp.w	r8,0
8000d78e:	c0 70       	breq	8000d79c <udc_req_std_dev_get_str_desc+0x30>
8000d790:	c2 28       	rjmp	8000d7d4 <udc_req_std_dev_get_str_desc+0x68>
8000d792:	58 28       	cp.w	r8,2
8000d794:	c1 00       	breq	8000d7b4 <udc_req_std_dev_get_str_desc+0x48>
8000d796:	58 38       	cp.w	r8,3
8000d798:	c1 50       	breq	8000d7c2 <udc_req_std_dev_get_str_desc+0x56>
8000d79a:	c1 d8       	rjmp	8000d7d4 <udc_req_std_dev_get_str_desc+0x68>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
8000d79c:	30 4b       	mov	r11,4
8000d79e:	4a ec       	lddpc	r12,8000d854 <udc_req_std_dev_get_str_desc+0xe8>
8000d7a0:	f0 1f 00 2e 	mcall	8000d858 <udc_req_std_dev_get_str_desc+0xec>
				sizeof(udc_string_desc_languageid));
		break;
8000d7a4:	c1 a8       	rjmp	8000d7d8 <udc_req_std_dev_get_str_desc+0x6c>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
8000d7a6:	30 78       	mov	r8,7
8000d7a8:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_manufacturer_name;
8000d7ac:	4a c8       	lddpc	r8,8000d85c <udc_req_std_dev_get_str_desc+0xf0>
8000d7ae:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000d7b2:	c1 38       	rjmp	8000d7d8 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
8000d7b4:	30 78       	mov	r8,7
8000d7b6:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_product_name;
8000d7ba:	4a a8       	lddpc	r8,8000d860 <udc_req_std_dev_get_str_desc+0xf4>
8000d7bc:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000d7c0:	c0 c8       	rjmp	8000d7d8 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
8000d7c2:	30 c8       	mov	r8,12
8000d7c4:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_get_string_serial_name();
8000d7c8:	f0 1f 00 27 	mcall	8000d864 <udc_req_std_dev_get_str_desc+0xf8>
8000d7cc:	18 98       	mov	r8,r12
8000d7ce:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000d7d2:	c0 38       	rjmp	8000d7d8 <udc_req_std_dev_get_str_desc+0x6c>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
8000d7d4:	30 08       	mov	r8,0
8000d7d6:	c3 88       	rjmp	8000d846 <udc_req_std_dev_get_str_desc+0xda>
	}

	if (str_length) {
8000d7d8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d7dc:	30 08       	mov	r8,0
8000d7de:	f0 09 18 00 	cp.b	r9,r8
8000d7e2:	c3 10       	breq	8000d844 <udc_req_std_dev_get_str_desc+0xd8>
		for(i = 0; i < str_length; i++) {
8000d7e4:	30 08       	mov	r8,0
8000d7e6:	ef 68 ff f7 	st.b	r7[-9],r8
8000d7ea:	c1 88       	rjmp	8000d81a <udc_req_std_dev_get_str_desc+0xae>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
8000d7ec:	ef 3b ff f7 	ld.ub	r11,r7[-9]
8000d7f0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000d7f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d7f8:	f2 08 00 08 	add	r8,r9,r8
8000d7fc:	11 88       	ld.ub	r8,r8[0x0]
8000d7fe:	5c c8       	swap.bh	r8
8000d800:	5c 88       	casts.h	r8
8000d802:	10 99       	mov	r9,r8
8000d804:	49 9a       	lddpc	r10,8000d868 <udc_req_std_dev_get_str_desc+0xfc>
8000d806:	f6 08 15 01 	lsl	r8,r11,0x1
8000d80a:	f4 08 00 08 	add	r8,r10,r8
8000d80e:	b0 19       	st.h	r8[0x2],r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
8000d810:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000d814:	2f f8       	sub	r8,-1
8000d816:	ef 68 ff f7 	st.b	r7[-9],r8
8000d81a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000d81e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d822:	f0 09 18 00 	cp.b	r9,r8
8000d826:	ce 33       	brcs	8000d7ec <udc_req_std_dev_get_str_desc+0x80>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
8000d828:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d82c:	2f f8       	sub	r8,-1
8000d82e:	5c 58       	castu.b	r8
8000d830:	a1 78       	lsl	r8,0x1
8000d832:	5c 58       	castu.b	r8
8000d834:	48 d9       	lddpc	r9,8000d868 <udc_req_std_dev_get_str_desc+0xfc>
8000d836:	b2 88       	st.b	r9[0x0],r8
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
8000d838:	48 c8       	lddpc	r8,8000d868 <udc_req_std_dev_get_str_desc+0xfc>
8000d83a:	11 88       	ld.ub	r8,r8[0x0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
8000d83c:	10 9b       	mov	r11,r8
8000d83e:	48 bc       	lddpc	r12,8000d868 <udc_req_std_dev_get_str_desc+0xfc>
8000d840:	f0 1f 00 06 	mcall	8000d858 <udc_req_std_dev_get_str_desc+0xec>
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
8000d844:	30 18       	mov	r8,1
}
8000d846:	10 9c       	mov	r12,r8
8000d848:	2f dd       	sub	sp,-12
8000d84a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d84e:	00 00       	add	r0,r0
8000d850:	00 00       	add	r0,r0
8000d852:	0d e4       	ld.ub	r4,r6[0x6]
8000d854:	00 00       	add	r0,r0
8000d856:	02 14       	sub	r4,r1
8000d858:	80 00       	ld.sh	r0,r0[0x0]
8000d85a:	9e e4       	ld.uh	r4,pc[0xc]
8000d85c:	00 00       	add	r0,r0
8000d85e:	02 18       	sub	r8,r1
8000d860:	00 00       	add	r0,r0
8000d862:	02 20       	rsub	r0,r1
8000d864:	80 00       	ld.sh	r0,r0[0x0]
8000d866:	d1 1c       	*unknown*
8000d868:	00 00       	add	r0,r0
8000d86a:	02 28       	rsub	r8,r1

8000d86c <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
8000d86c:	eb cd 40 80 	pushm	r7,lr
8000d870:	1a 97       	mov	r7,sp
8000d872:	20 1d       	sub	sp,4
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000d874:	fe f8 02 40 	ld.w	r8,pc[576]
8000d878:	90 18       	ld.sh	r8,r8[0x2]
8000d87a:	ef 68 ff ff 	st.b	r7[-1],r8

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
8000d87e:	fe f8 02 36 	ld.w	r8,pc[566]
8000d882:	90 18       	ld.sh	r8,r8[0x2]
8000d884:	5c 78       	castu.h	r8
8000d886:	a9 88       	lsr	r8,0x8
8000d888:	5c 88       	casts.h	r8
8000d88a:	5c 58       	castu.b	r8
8000d88c:	58 38       	cp.w	r8,3
8000d88e:	e0 80 00 f7 	breq	8000da7c <udc_req_std_dev_get_descriptor+0x210>
8000d892:	e0 89 00 07 	brgt	8000d8a0 <udc_req_std_dev_get_descriptor+0x34>
8000d896:	58 18       	cp.w	r8,1
8000d898:	c0 b0       	breq	8000d8ae <udc_req_std_dev_get_descriptor+0x42>
8000d89a:	58 28       	cp.w	r8,2
8000d89c:	c2 70       	breq	8000d8ea <udc_req_std_dev_get_descriptor+0x7e>
8000d89e:	cf 88       	rjmp	8000da8e <udc_req_std_dev_get_descriptor+0x222>
8000d8a0:	58 68       	cp.w	r8,6
8000d8a2:	e0 80 00 82 	breq	8000d9a6 <udc_req_std_dev_get_descriptor+0x13a>
8000d8a6:	58 78       	cp.w	r8,7
8000d8a8:	e0 80 00 8a 	breq	8000d9bc <udc_req_std_dev_get_descriptor+0x150>
8000d8ac:	cf 18       	rjmp	8000da8e <udc_req_std_dev_get_descriptor+0x222>
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
8000d8ae:	f0 1f 00 83 	mcall	8000dab8 <udc_req_std_dev_get_descriptor+0x24c>
8000d8b2:	18 98       	mov	r8,r12
8000d8b4:	ec 18 00 01 	eorl	r8,0x1
8000d8b8:	5c 58       	castu.b	r8
8000d8ba:	c0 d0       	breq	8000d8d4 <udc_req_std_dev_get_descriptor+0x68>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
8000d8bc:	fe f8 02 00 	ld.w	r8,pc[512]
8000d8c0:	70 28       	ld.w	r8,r8[0x8]
8000d8c2:	11 88       	ld.ub	r8,r8[0x0]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
8000d8c4:	10 99       	mov	r9,r8
8000d8c6:	4f e8       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000d8c8:	70 28       	ld.w	r8,r8[0x8]
8000d8ca:	12 9b       	mov	r11,r9
8000d8cc:	10 9c       	mov	r12,r8
8000d8ce:	f0 1f 00 7d 	mcall	8000dac0 <udc_req_std_dev_get_descriptor+0x254>
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000d8d2:	ce 18       	rjmp	8000da94 <udc_req_std_dev_get_descriptor+0x228>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
8000d8d4:	4f a8       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000d8d6:	70 08       	ld.w	r8,r8[0x0]
8000d8d8:	11 88       	ld.ub	r8,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
8000d8da:	10 99       	mov	r9,r8
8000d8dc:	4f 88       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000d8de:	70 08       	ld.w	r8,r8[0x0]
8000d8e0:	12 9b       	mov	r11,r9
8000d8e2:	10 9c       	mov	r12,r8
8000d8e4:	f0 1f 00 77 	mcall	8000dac0 <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000d8e8:	cd 68       	rjmp	8000da94 <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
8000d8ea:	f0 1f 00 74 	mcall	8000dab8 <udc_req_std_dev_get_descriptor+0x24c>
8000d8ee:	18 98       	mov	r8,r12
8000d8f0:	58 08       	cp.w	r8,0
8000d8f2:	c2 b0       	breq	8000d948 <udc_req_std_dev_get_descriptor+0xdc>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000d8f4:	4f 28       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000d8f6:	70 28       	ld.w	r8,r8[0x8]
8000d8f8:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d8fc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d900:	f0 09 18 00 	cp.b	r9,r8
8000d904:	c0 33       	brcs	8000d90a <udc_req_std_dev_get_descriptor+0x9e>
					bNumConfigurations) {
				return false;
8000d906:	30 08       	mov	r8,0
8000d908:	cd 28       	rjmp	8000daac <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000d90a:	4e d8       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000d90c:	70 49       	ld.w	r9,r8[0x10]
8000d90e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d912:	a3 78       	lsl	r8,0x3
8000d914:	f2 08 00 08 	add	r8,r9,r8
8000d918:	70 08       	ld.w	r8,r8[0x0]
8000d91a:	11 a9       	ld.ub	r9,r8[0x2]
8000d91c:	a9 69       	lsl	r9,0x8
8000d91e:	11 b8       	ld.ub	r8,r8[0x3]
8000d920:	12 48       	or	r8,r9
8000d922:	5c 88       	casts.h	r8
8000d924:	5c 88       	casts.h	r8
8000d926:	5c c8       	swap.bh	r8
8000d928:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d92a:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000d92e:	4e 48       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000d930:	70 4a       	ld.w	r10,r8[0x10]
8000d932:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d936:	a3 78       	lsl	r8,0x3
8000d938:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d93c:	70 08       	ld.w	r8,r8[0x0]
8000d93e:	12 9b       	mov	r11,r9
8000d940:	10 9c       	mov	r12,r8
8000d942:	f0 1f 00 60 	mcall	8000dac0 <udc_req_std_dev_get_descriptor+0x254>
8000d946:	c2 a8       	rjmp	8000d99a <udc_req_std_dev_get_descriptor+0x12e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000d948:	4d d8       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000d94a:	70 08       	ld.w	r8,r8[0x0]
8000d94c:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d950:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d954:	f0 09 18 00 	cp.b	r9,r8
8000d958:	c0 33       	brcs	8000d95e <udc_req_std_dev_get_descriptor+0xf2>
					bNumConfigurations) {
				return false;
8000d95a:	30 08       	mov	r8,0
8000d95c:	ca 88       	rjmp	8000daac <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000d95e:	4d 88       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000d960:	70 19       	ld.w	r9,r8[0x4]
8000d962:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d966:	a3 78       	lsl	r8,0x3
8000d968:	f2 08 00 08 	add	r8,r9,r8
8000d96c:	70 08       	ld.w	r8,r8[0x0]
8000d96e:	11 a9       	ld.ub	r9,r8[0x2]
8000d970:	a9 69       	lsl	r9,0x8
8000d972:	11 b8       	ld.ub	r8,r8[0x3]
8000d974:	12 48       	or	r8,r9
8000d976:	5c 88       	casts.h	r8
8000d978:	5c 88       	casts.h	r8
8000d97a:	5c c8       	swap.bh	r8
8000d97c:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d97e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000d982:	4c f8       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000d984:	70 1a       	ld.w	r10,r8[0x4]
8000d986:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d98a:	a3 78       	lsl	r8,0x3
8000d98c:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000d990:	70 08       	ld.w	r8,r8[0x0]
8000d992:	12 9b       	mov	r11,r9
8000d994:	10 9c       	mov	r12,r8
8000d996:	f0 1f 00 4b 	mcall	8000dac0 <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000d99a:	4c 78       	lddpc	r8,8000dab4 <udc_req_std_dev_get_descriptor+0x248>
8000d99c:	70 28       	ld.w	r8,r8[0x8]
8000d99e:	10 99       	mov	r9,r8
8000d9a0:	30 28       	mov	r8,2
8000d9a2:	b2 98       	st.b	r9[0x1],r8
				USB_DT_CONFIGURATION;
		break;
8000d9a4:	c7 88       	rjmp	8000da94 <udc_req_std_dev_get_descriptor+0x228>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
8000d9a6:	4c 68       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000d9a8:	70 38       	ld.w	r8,r8[0xc]
8000d9aa:	11 88       	ld.ub	r8,r8[0x0]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
8000d9ac:	10 99       	mov	r9,r8
8000d9ae:	4c 48       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000d9b0:	70 38       	ld.w	r8,r8[0xc]
8000d9b2:	12 9b       	mov	r11,r9
8000d9b4:	10 9c       	mov	r12,r8
8000d9b6:	f0 1f 00 43 	mcall	8000dac0 <udc_req_std_dev_get_descriptor+0x254>
				udc_config.qualifier->bLength);
		break;
8000d9ba:	c6 d8       	rjmp	8000da94 <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
8000d9bc:	f0 1f 00 3f 	mcall	8000dab8 <udc_req_std_dev_get_descriptor+0x24c>
8000d9c0:	18 98       	mov	r8,r12
8000d9c2:	ec 18 00 01 	eorl	r8,0x1
8000d9c6:	5c 58       	castu.b	r8
8000d9c8:	c2 b0       	breq	8000da1e <udc_req_std_dev_get_descriptor+0x1b2>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000d9ca:	4b d8       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000d9cc:	70 28       	ld.w	r8,r8[0x8]
8000d9ce:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d9d2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d9d6:	f0 09 18 00 	cp.b	r9,r8
8000d9da:	c0 33       	brcs	8000d9e0 <udc_req_std_dev_get_descriptor+0x174>
					bNumConfigurations) {
				return false;
8000d9dc:	30 08       	mov	r8,0
8000d9de:	c6 78       	rjmp	8000daac <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000d9e0:	4b 78       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000d9e2:	70 49       	ld.w	r9,r8[0x10]
8000d9e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d9e8:	a3 78       	lsl	r8,0x3
8000d9ea:	f2 08 00 08 	add	r8,r9,r8
8000d9ee:	70 08       	ld.w	r8,r8[0x0]
8000d9f0:	11 a9       	ld.ub	r9,r8[0x2]
8000d9f2:	a9 69       	lsl	r9,0x8
8000d9f4:	11 b8       	ld.ub	r8,r8[0x3]
8000d9f6:	12 48       	or	r8,r9
8000d9f8:	5c 88       	casts.h	r8
8000d9fa:	5c 88       	casts.h	r8
8000d9fc:	5c c8       	swap.bh	r8
8000d9fe:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000da00:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000da04:	4a e8       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000da06:	70 4a       	ld.w	r10,r8[0x10]
8000da08:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000da0c:	a3 78       	lsl	r8,0x3
8000da0e:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000da12:	70 08       	ld.w	r8,r8[0x0]
8000da14:	12 9b       	mov	r11,r9
8000da16:	10 9c       	mov	r12,r8
8000da18:	f0 1f 00 2a 	mcall	8000dac0 <udc_req_std_dev_get_descriptor+0x254>
8000da1c:	c2 a8       	rjmp	8000da70 <udc_req_std_dev_get_descriptor+0x204>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000da1e:	4a 88       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000da20:	70 08       	ld.w	r8,r8[0x0]
8000da22:	f1 38 00 11 	ld.ub	r8,r8[17]
8000da26:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000da2a:	f0 09 18 00 	cp.b	r9,r8
8000da2e:	c0 33       	brcs	8000da34 <udc_req_std_dev_get_descriptor+0x1c8>
					bNumConfigurations) {
				return false;
8000da30:	30 08       	mov	r8,0
8000da32:	c3 d8       	rjmp	8000daac <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000da34:	4a 28       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000da36:	70 19       	ld.w	r9,r8[0x4]
8000da38:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000da3c:	a3 78       	lsl	r8,0x3
8000da3e:	f2 08 00 08 	add	r8,r9,r8
8000da42:	70 08       	ld.w	r8,r8[0x0]
8000da44:	11 a9       	ld.ub	r9,r8[0x2]
8000da46:	a9 69       	lsl	r9,0x8
8000da48:	11 b8       	ld.ub	r8,r8[0x3]
8000da4a:	12 48       	or	r8,r9
8000da4c:	5c 88       	casts.h	r8
8000da4e:	5c 88       	casts.h	r8
8000da50:	5c c8       	swap.bh	r8
8000da52:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000da54:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000da58:	49 98       	lddpc	r8,8000dabc <udc_req_std_dev_get_descriptor+0x250>
8000da5a:	70 1a       	ld.w	r10,r8[0x4]
8000da5c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000da60:	a3 78       	lsl	r8,0x3
8000da62:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000da66:	70 08       	ld.w	r8,r8[0x0]
8000da68:	12 9b       	mov	r11,r9
8000da6a:	10 9c       	mov	r12,r8
8000da6c:	f0 1f 00 15 	mcall	8000dac0 <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000da70:	49 18       	lddpc	r8,8000dab4 <udc_req_std_dev_get_descriptor+0x248>
8000da72:	70 28       	ld.w	r8,r8[0x8]
8000da74:	10 99       	mov	r9,r8
8000da76:	30 78       	mov	r8,7
8000da78:	b2 98       	st.b	r9[0x1],r8
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
8000da7a:	c0 d8       	rjmp	8000da94 <udc_req_std_dev_get_descriptor+0x228>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
8000da7c:	f0 1f 00 12 	mcall	8000dac4 <udc_req_std_dev_get_descriptor+0x258>
8000da80:	18 98       	mov	r8,r12
8000da82:	ec 18 00 01 	eorl	r8,0x1
8000da86:	5c 58       	castu.b	r8
8000da88:	c0 50       	breq	8000da92 <udc_req_std_dev_get_descriptor+0x226>
			return false;
8000da8a:	30 08       	mov	r8,0
8000da8c:	c1 08       	rjmp	8000daac <udc_req_std_dev_get_descriptor+0x240>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
8000da8e:	30 08       	mov	r8,0
8000da90:	c0 e8       	rjmp	8000daac <udc_req_std_dev_get_descriptor+0x240>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
8000da92:	d7 03       	nop
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
8000da94:	48 88       	lddpc	r8,8000dab4 <udc_req_std_dev_get_descriptor+0x248>
8000da96:	90 39       	ld.sh	r9,r8[0x6]
8000da98:	48 78       	lddpc	r8,8000dab4 <udc_req_std_dev_get_descriptor+0x248>
8000da9a:	90 68       	ld.sh	r8,r8[0xc]
8000da9c:	f0 09 19 00 	cp.h	r9,r8
8000daa0:	c0 52       	brcc	8000daaa <udc_req_std_dev_get_descriptor+0x23e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000daa2:	48 58       	lddpc	r8,8000dab4 <udc_req_std_dev_get_descriptor+0x248>
8000daa4:	90 38       	ld.sh	r8,r8[0x6]
8000daa6:	48 49       	lddpc	r9,8000dab4 <udc_req_std_dev_get_descriptor+0x248>
8000daa8:	b2 68       	st.h	r9[0xc],r8
	}
	return true;
8000daaa:	30 18       	mov	r8,1
}
8000daac:	10 9c       	mov	r12,r8
8000daae:	2f fd       	sub	sp,-4
8000dab0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dab4:	00 00       	add	r0,r0
8000dab6:	0d e4       	ld.ub	r4,r6[0x6]
8000dab8:	80 00       	ld.sh	r0,r0[0x0]
8000daba:	9e 48       	ld.sh	r8,pc[0x8]
8000dabc:	00 00       	add	r0,r0
8000dabe:	02 00       	add	r0,r1
8000dac0:	80 00       	ld.sh	r0,r0[0x0]
8000dac2:	9e e4       	ld.uh	r4,pc[0xc]
8000dac4:	80 00       	ld.sh	r0,r0[0x0]
8000dac6:	d7 6c       	*unknown*

8000dac8 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
8000dac8:	eb cd 40 80 	pushm	r7,lr
8000dacc:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != 1) {
8000dace:	48 98       	lddpc	r8,8000daf0 <udc_req_std_dev_get_configuration+0x28>
8000dad0:	90 39       	ld.sh	r9,r8[0x6]
8000dad2:	30 18       	mov	r8,1
8000dad4:	f0 09 19 00 	cp.h	r9,r8
8000dad8:	c0 30       	breq	8000dade <udc_req_std_dev_get_configuration+0x16>
		return false;
8000dada:	30 08       	mov	r8,0
8000dadc:	c0 68       	rjmp	8000dae8 <udc_req_std_dev_get_configuration+0x20>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
8000dade:	30 1b       	mov	r11,1
8000dae0:	48 5c       	lddpc	r12,8000daf4 <udc_req_std_dev_get_configuration+0x2c>
8000dae2:	f0 1f 00 06 	mcall	8000daf8 <udc_req_std_dev_get_configuration+0x30>
	return true;
8000dae6:	30 18       	mov	r8,1
}
8000dae8:	10 9c       	mov	r12,r8
8000daea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000daee:	00 00       	add	r0,r0
8000daf0:	00 00       	add	r0,r0
8000daf2:	0d e4       	ld.ub	r4,r6[0x6]
8000daf4:	00 00       	add	r0,r0
8000daf6:	08 52       	eor	r2,r4
8000daf8:	80 00       	ld.sh	r0,r0[0x0]
8000dafa:	9e e4       	ld.uh	r4,pc[0xc]

8000dafc <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
8000dafc:	eb cd 40 80 	pushm	r7,lr
8000db00:	1a 97       	mov	r7,sp
8000db02:	20 1d       	sub	sp,4
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
8000db04:	4b c8       	lddpc	r8,8000dbf4 <udc_req_std_dev_set_configuration+0xf8>
8000db06:	90 38       	ld.sh	r8,r8[0x6]
8000db08:	58 08       	cp.w	r8,0
8000db0a:	c0 30       	breq	8000db10 <udc_req_std_dev_set_configuration+0x14>
		return false;
8000db0c:	30 08       	mov	r8,0
8000db0e:	c6 f8       	rjmp	8000dbec <udc_req_std_dev_set_configuration+0xf0>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
8000db10:	f0 1f 00 3a 	mcall	8000dbf8 <udc_req_std_dev_set_configuration+0xfc>
8000db14:	18 98       	mov	r8,r12
8000db16:	58 08       	cp.w	r8,0
8000db18:	c0 31       	brne	8000db1e <udc_req_std_dev_set_configuration+0x22>
		return false;
8000db1a:	30 08       	mov	r8,0
8000db1c:	c6 88       	rjmp	8000dbec <udc_req_std_dev_set_configuration+0xf0>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000db1e:	f0 1f 00 38 	mcall	8000dbfc <udc_req_std_dev_set_configuration+0x100>
8000db22:	18 98       	mov	r8,r12
8000db24:	58 08       	cp.w	r8,0
8000db26:	c0 f0       	breq	8000db44 <udc_req_std_dev_set_configuration+0x48>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000db28:	4b 38       	lddpc	r8,8000dbf4 <udc_req_std_dev_set_configuration+0xf8>
8000db2a:	90 18       	ld.sh	r8,r8[0x2]
8000db2c:	5c 78       	castu.h	r8
8000db2e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_hs->bNumConfigurations) {
8000db32:	4b 48       	lddpc	r8,8000dc00 <udc_req_std_dev_set_configuration+0x104>
8000db34:	70 28       	ld.w	r8,r8[0x8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000db36:	f1 38 00 11 	ld.ub	r8,r8[17]
8000db3a:	10 39       	cp.w	r9,r8
8000db3c:	e0 8a 00 12 	brle	8000db60 <udc_req_std_dev_set_configuration+0x64>
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000db40:	30 08       	mov	r8,0
8000db42:	c5 58       	rjmp	8000dbec <udc_req_std_dev_set_configuration+0xf0>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000db44:	4a c8       	lddpc	r8,8000dbf4 <udc_req_std_dev_set_configuration+0xf8>
8000db46:	90 18       	ld.sh	r8,r8[0x2]
8000db48:	5c 78       	castu.h	r8
8000db4a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_lsfs->bNumConfigurations) {
8000db4e:	4a d8       	lddpc	r8,8000dc00 <udc_req_std_dev_set_configuration+0x104>
8000db50:	70 08       	ld.w	r8,r8[0x0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000db52:	f1 38 00 11 	ld.ub	r8,r8[17]
8000db56:	10 39       	cp.w	r9,r8
8000db58:	e0 8a 00 05 	brle	8000db62 <udc_req_std_dev_set_configuration+0x66>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
8000db5c:	30 08       	mov	r8,0
8000db5e:	c4 78       	rjmp	8000dbec <udc_req_std_dev_set_configuration+0xf0>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000db60:	d7 03       	nop
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
8000db62:	f0 1f 00 29 	mcall	8000dc04 <udc_req_std_dev_set_configuration+0x108>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
8000db66:	4a 48       	lddpc	r8,8000dbf4 <udc_req_std_dev_set_configuration+0xf8>
8000db68:	90 18       	ld.sh	r8,r8[0x2]
8000db6a:	5c 58       	castu.b	r8
8000db6c:	4a 79       	lddpc	r9,8000dc08 <udc_req_std_dev_set_configuration+0x10c>
8000db6e:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
8000db70:	4a 68       	lddpc	r8,8000dc08 <udc_req_std_dev_set_configuration+0x10c>
8000db72:	11 88       	ld.ub	r8,r8[0x0]
8000db74:	58 08       	cp.w	r8,0
8000db76:	c0 31       	brne	8000db7c <udc_req_std_dev_set_configuration+0x80>
		return true; // Default empty configuration requested
8000db78:	30 18       	mov	r8,1
8000db7a:	c3 98       	rjmp	8000dbec <udc_req_std_dev_set_configuration+0xf0>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000db7c:	f0 1f 00 20 	mcall	8000dbfc <udc_req_std_dev_set_configuration+0x100>
8000db80:	18 98       	mov	r8,r12
8000db82:	58 08       	cp.w	r8,0
8000db84:	c0 b0       	breq	8000db9a <udc_req_std_dev_set_configuration+0x9e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
8000db86:	49 f8       	lddpc	r8,8000dc00 <udc_req_std_dev_set_configuration+0x104>
8000db88:	70 49       	ld.w	r9,r8[0x10]
8000db8a:	4a 08       	lddpc	r8,8000dc08 <udc_req_std_dev_set_configuration+0x10c>
8000db8c:	11 88       	ld.ub	r8,r8[0x0]
8000db8e:	20 18       	sub	r8,1
8000db90:	a3 78       	lsl	r8,0x3
8000db92:	10 09       	add	r9,r8
8000db94:	49 e8       	lddpc	r8,8000dc0c <udc_req_std_dev_set_configuration+0x110>
8000db96:	91 09       	st.w	r8[0x0],r9
8000db98:	c0 a8       	rjmp	8000dbac <udc_req_std_dev_set_configuration+0xb0>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
8000db9a:	49 a8       	lddpc	r8,8000dc00 <udc_req_std_dev_set_configuration+0x104>
8000db9c:	70 19       	ld.w	r9,r8[0x4]
8000db9e:	49 b8       	lddpc	r8,8000dc08 <udc_req_std_dev_set_configuration+0x10c>
8000dba0:	11 88       	ld.ub	r8,r8[0x0]
8000dba2:	20 18       	sub	r8,1
8000dba4:	a3 78       	lsl	r8,0x3
8000dba6:	10 09       	add	r9,r8
8000dba8:	49 98       	lddpc	r8,8000dc0c <udc_req_std_dev_set_configuration+0x110>
8000dbaa:	91 09       	st.w	r8[0x0],r9
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000dbac:	30 08       	mov	r8,0
8000dbae:	ef 68 ff ff 	st.b	r7[-1],r8
8000dbb2:	c1 38       	rjmp	8000dbd8 <udc_req_std_dev_set_configuration+0xdc>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
8000dbb4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dbb8:	30 0b       	mov	r11,0
8000dbba:	10 9c       	mov	r12,r8
8000dbbc:	f0 1f 00 15 	mcall	8000dc10 <udc_req_std_dev_set_configuration+0x114>
8000dbc0:	18 98       	mov	r8,r12
8000dbc2:	ec 18 00 01 	eorl	r8,0x1
8000dbc6:	5c 58       	castu.b	r8
8000dbc8:	c0 30       	breq	8000dbce <udc_req_std_dev_set_configuration+0xd2>
			return false;
8000dbca:	30 08       	mov	r8,0
8000dbcc:	c1 08       	rjmp	8000dbec <udc_req_std_dev_set_configuration+0xf0>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000dbce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dbd2:	2f f8       	sub	r8,-1
8000dbd4:	ef 68 ff ff 	st.b	r7[-1],r8
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000dbd8:	48 d8       	lddpc	r8,8000dc0c <udc_req_std_dev_set_configuration+0x110>
8000dbda:	70 08       	ld.w	r8,r8[0x0]
8000dbdc:	70 08       	ld.w	r8,r8[0x0]
8000dbde:	11 c8       	ld.ub	r8,r8[0x4]
8000dbe0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dbe4:	f0 09 18 00 	cp.b	r9,r8
8000dbe8:	ce 63       	brcs	8000dbb4 <udc_req_std_dev_set_configuration+0xb8>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
8000dbea:	30 18       	mov	r8,1
}
8000dbec:	10 9c       	mov	r12,r8
8000dbee:	2f fd       	sub	sp,-4
8000dbf0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dbf4:	00 00       	add	r0,r0
8000dbf6:	0d e4       	ld.ub	r4,r6[0x6]
8000dbf8:	80 00       	ld.sh	r0,r0[0x0]
8000dbfa:	9e b2       	ld.uh	r2,pc[0x6]
8000dbfc:	80 00       	ld.sh	r0,r0[0x0]
8000dbfe:	9e 48       	ld.sh	r8,pc[0x8]
8000dc00:	00 00       	add	r0,r0
8000dc02:	02 00       	add	r0,r1
8000dc04:	80 00       	ld.sh	r0,r0[0x0]
8000dc06:	d4 3c       	*unknown*
8000dc08:	00 00       	add	r0,r0
8000dc0a:	08 52       	eor	r2,r4
8000dc0c:	00 00       	add	r0,r0
8000dc0e:	08 54       	eor	r4,r4
8000dc10:	80 00       	ld.sh	r0,r0[0x0]
8000dc12:	d3 60       	acall	0xd8

8000dc14 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
8000dc14:	eb cd 40 80 	pushm	r7,lr
8000dc18:	1a 97       	mov	r7,sp
8000dc1a:	20 2d       	sub	sp,8
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
8000dc1c:	4a 38       	lddpc	r8,8000dca8 <udc_req_std_iface_get_setting+0x94>
8000dc1e:	90 39       	ld.sh	r9,r8[0x6]
8000dc20:	30 18       	mov	r8,1
8000dc22:	f0 09 19 00 	cp.h	r9,r8
8000dc26:	c0 30       	breq	8000dc2c <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
8000dc28:	30 08       	mov	r8,0
8000dc2a:	c3 a8       	rjmp	8000dc9e <udc_req_std_iface_get_setting+0x8a>
	}
	if (!udc_num_configuration) {
8000dc2c:	4a 08       	lddpc	r8,8000dcac <udc_req_std_iface_get_setting+0x98>
8000dc2e:	11 88       	ld.ub	r8,r8[0x0]
8000dc30:	58 08       	cp.w	r8,0
8000dc32:	c0 31       	brne	8000dc38 <udc_req_std_iface_get_setting+0x24>
		return false; // The device is not is configured state yet
8000dc34:	30 08       	mov	r8,0
8000dc36:	c3 48       	rjmp	8000dc9e <udc_req_std_iface_get_setting+0x8a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000dc38:	49 c8       	lddpc	r8,8000dca8 <udc_req_std_iface_get_setting+0x94>
8000dc3a:	90 28       	ld.sh	r8,r8[0x4]
8000dc3c:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000dc40:	49 c8       	lddpc	r8,8000dcb0 <udc_req_std_iface_get_setting+0x9c>
8000dc42:	70 08       	ld.w	r8,r8[0x0]
8000dc44:	70 08       	ld.w	r8,r8[0x0]
8000dc46:	11 c8       	ld.ub	r8,r8[0x4]
8000dc48:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000dc4c:	f0 09 18 00 	cp.b	r9,r8
8000dc50:	c0 33       	brcs	8000dc56 <udc_req_std_iface_get_setting+0x42>
		return false;
8000dc52:	30 08       	mov	r8,0
8000dc54:	c2 58       	rjmp	8000dc9e <udc_req_std_iface_get_setting+0x8a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000dc56:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dc5a:	30 0b       	mov	r11,0
8000dc5c:	10 9c       	mov	r12,r8
8000dc5e:	f0 1f 00 16 	mcall	8000dcb4 <udc_req_std_iface_get_setting+0xa0>
8000dc62:	18 98       	mov	r8,r12
8000dc64:	ec 18 00 01 	eorl	r8,0x1
8000dc68:	5c 58       	castu.b	r8
8000dc6a:	c0 30       	breq	8000dc70 <udc_req_std_iface_get_setting+0x5c>
		return false;
8000dc6c:	30 08       	mov	r8,0
8000dc6e:	c1 88       	rjmp	8000dc9e <udc_req_std_iface_get_setting+0x8a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000dc70:	49 08       	lddpc	r8,8000dcb0 <udc_req_std_iface_get_setting+0x9c>
8000dc72:	70 08       	ld.w	r8,r8[0x0]
8000dc74:	70 19       	ld.w	r9,r8[0x4]
8000dc76:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dc7a:	a3 68       	lsl	r8,0x2
8000dc7c:	f2 08 00 08 	add	r8,r9,r8
8000dc80:	70 08       	ld.w	r8,r8[0x0]
8000dc82:	ef 48 ff fc 	st.w	r7[-4],r8
	udc_iface_setting = udi_api->getsetting();
8000dc86:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dc8a:	70 38       	ld.w	r8,r8[0xc]
8000dc8c:	5d 18       	icall	r8
8000dc8e:	18 98       	mov	r8,r12
8000dc90:	48 a9       	lddpc	r9,8000dcb8 <udc_req_std_iface_get_setting+0xa4>
8000dc92:	b2 88       	st.b	r9[0x0],r8

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
8000dc94:	30 1b       	mov	r11,1
8000dc96:	48 9c       	lddpc	r12,8000dcb8 <udc_req_std_iface_get_setting+0xa4>
8000dc98:	f0 1f 00 09 	mcall	8000dcbc <udc_req_std_iface_get_setting+0xa8>
	return true;
8000dc9c:	30 18       	mov	r8,1
}
8000dc9e:	10 9c       	mov	r12,r8
8000dca0:	2f ed       	sub	sp,-8
8000dca2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dca6:	00 00       	add	r0,r0
8000dca8:	00 00       	add	r0,r0
8000dcaa:	0d e4       	ld.ub	r4,r6[0x6]
8000dcac:	00 00       	add	r0,r0
8000dcae:	08 52       	eor	r2,r4
8000dcb0:	00 00       	add	r0,r0
8000dcb2:	08 54       	eor	r4,r4
8000dcb4:	80 00       	ld.sh	r0,r0[0x0]
8000dcb6:	d1 ec       	*unknown*
8000dcb8:	00 00       	add	r0,r0
8000dcba:	08 5c       	eor	r12,r4
8000dcbc:	80 00       	ld.sh	r0,r0[0x0]
8000dcbe:	9e e4       	ld.uh	r4,pc[0xc]

8000dcc0 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
8000dcc0:	eb cd 40 80 	pushm	r7,lr
8000dcc4:	1a 97       	mov	r7,sp
8000dcc6:	20 1d       	sub	sp,4
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
8000dcc8:	49 78       	lddpc	r8,8000dd24 <udc_req_std_iface_set_setting+0x64>
8000dcca:	90 38       	ld.sh	r8,r8[0x6]
8000dccc:	58 08       	cp.w	r8,0
8000dcce:	c0 30       	breq	8000dcd4 <udc_req_std_iface_set_setting+0x14>
		return false; // Error in request
8000dcd0:	30 08       	mov	r8,0
8000dcd2:	c2 48       	rjmp	8000dd1a <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
8000dcd4:	49 58       	lddpc	r8,8000dd28 <udc_req_std_iface_set_setting+0x68>
8000dcd6:	11 88       	ld.ub	r8,r8[0x0]
8000dcd8:	58 08       	cp.w	r8,0
8000dcda:	c0 31       	brne	8000dce0 <udc_req_std_iface_set_setting+0x20>
		return false; // The device is not is configured state yet
8000dcdc:	30 08       	mov	r8,0
8000dcde:	c1 e8       	rjmp	8000dd1a <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000dce0:	49 18       	lddpc	r8,8000dd24 <udc_req_std_iface_set_setting+0x64>
8000dce2:	90 28       	ld.sh	r8,r8[0x4]
8000dce4:	ef 68 ff fe 	st.b	r7[-2],r8
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
8000dce8:	48 f8       	lddpc	r8,8000dd24 <udc_req_std_iface_set_setting+0x64>
8000dcea:	90 18       	ld.sh	r8,r8[0x2]
8000dcec:	ef 68 ff ff 	st.b	r7[-1],r8

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
8000dcf0:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000dcf4:	10 9c       	mov	r12,r8
8000dcf6:	f0 1f 00 0e 	mcall	8000dd2c <udc_req_std_iface_set_setting+0x6c>
8000dcfa:	18 98       	mov	r8,r12
8000dcfc:	ec 18 00 01 	eorl	r8,0x1
8000dd00:	5c 58       	castu.b	r8
8000dd02:	c0 30       	breq	8000dd08 <udc_req_std_iface_set_setting+0x48>
		return false;
8000dd04:	30 08       	mov	r8,0
8000dd06:	c0 a8       	rjmp	8000dd1a <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
8000dd08:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dd0c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000dd10:	12 9b       	mov	r11,r9
8000dd12:	10 9c       	mov	r12,r8
8000dd14:	f0 1f 00 07 	mcall	8000dd30 <udc_req_std_iface_set_setting+0x70>
8000dd18:	18 98       	mov	r8,r12
}
8000dd1a:	10 9c       	mov	r12,r8
8000dd1c:	2f fd       	sub	sp,-4
8000dd1e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dd22:	00 00       	add	r0,r0
8000dd24:	00 00       	add	r0,r0
8000dd26:	0d e4       	ld.ub	r4,r6[0x6]
8000dd28:	00 00       	add	r0,r0
8000dd2a:	08 52       	eor	r2,r4
8000dd2c:	80 00       	ld.sh	r0,r0[0x0]
8000dd2e:	d2 a4       	*unknown*
8000dd30:	80 00       	ld.sh	r0,r0[0x0]
8000dd32:	d3 60       	acall	0xd8

8000dd34 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
8000dd34:	eb cd 40 80 	pushm	r7,lr
8000dd38:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000dd3a:	4c 78       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000dd3c:	11 88       	ld.ub	r8,r8[0x0]
8000dd3e:	10 99       	mov	r9,r8
8000dd40:	30 08       	mov	r8,0
8000dd42:	f0 09 18 00 	cp.b	r9,r8
8000dd46:	c3 c4       	brge	8000ddbe <udc_reqstd+0x8a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
8000dd48:	4c 38       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000dd4a:	90 38       	ld.sh	r8,r8[0x6]
8000dd4c:	58 08       	cp.w	r8,0
8000dd4e:	c0 31       	brne	8000dd54 <udc_reqstd+0x20>
			return false; // Error for USB host
8000dd50:	30 08       	mov	r8,0
8000dd52:	c7 e8       	rjmp	8000de4e <udc_reqstd+0x11a>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000dd54:	4c 08       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000dd56:	11 88       	ld.ub	r8,r8[0x0]
8000dd58:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dd5c:	c1 51       	brne	8000dd86 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dd5e:	4b e8       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000dd60:	11 98       	ld.ub	r8,r8[0x1]
8000dd62:	58 68       	cp.w	r8,6
8000dd64:	c0 90       	breq	8000dd76 <udc_reqstd+0x42>
8000dd66:	58 88       	cp.w	r8,8
8000dd68:	c0 b0       	breq	8000dd7e <udc_reqstd+0x4a>
8000dd6a:	58 08       	cp.w	r8,0
8000dd6c:	c0 d1       	brne	8000dd86 <udc_reqstd+0x52>
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
8000dd6e:	f0 1f 00 3b 	mcall	8000de58 <udc_reqstd+0x124>
8000dd72:	18 98       	mov	r8,r12
8000dd74:	c6 d8       	rjmp	8000de4e <udc_reqstd+0x11a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
8000dd76:	f0 1f 00 3a 	mcall	8000de5c <udc_reqstd+0x128>
8000dd7a:	18 98       	mov	r8,r12
8000dd7c:	c6 98       	rjmp	8000de4e <udc_reqstd+0x11a>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
8000dd7e:	f0 1f 00 39 	mcall	8000de60 <udc_reqstd+0x12c>
8000dd82:	18 98       	mov	r8,r12
8000dd84:	c6 58       	rjmp	8000de4e <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000dd86:	4b 48       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000dd88:	11 88       	ld.ub	r8,r8[0x0]
8000dd8a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dd8e:	58 18       	cp.w	r8,1
8000dd90:	c0 91       	brne	8000dda2 <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000dd92:	4b 18       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000dd94:	11 98       	ld.ub	r8,r8[0x1]
8000dd96:	58 a8       	cp.w	r8,10
8000dd98:	c0 51       	brne	8000dda2 <udc_reqstd+0x6e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
8000dd9a:	f0 1f 00 33 	mcall	8000de64 <udc_reqstd+0x130>
8000dd9e:	18 98       	mov	r8,r12
8000dda0:	c5 78       	rjmp	8000de4e <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000dda2:	4a d8       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000dda4:	11 88       	ld.ub	r8,r8[0x0]
8000dda6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000ddaa:	58 28       	cp.w	r8,2
8000ddac:	c4 f1       	brne	8000de4a <udc_reqstd+0x116>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000ddae:	4a a8       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000ddb0:	11 98       	ld.ub	r8,r8[0x1]
8000ddb2:	58 08       	cp.w	r8,0
8000ddb4:	c4 c1       	brne	8000de4c <udc_reqstd+0x118>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000ddb6:	f0 1f 00 2d 	mcall	8000de68 <udc_reqstd+0x134>
8000ddba:	18 98       	mov	r8,r12
8000ddbc:	c4 98       	rjmp	8000de4e <udc_reqstd+0x11a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000ddbe:	4a 68       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000ddc0:	11 88       	ld.ub	r8,r8[0x0]
8000ddc2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000ddc6:	c1 f1       	brne	8000de04 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000ddc8:	4a 38       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000ddca:	11 98       	ld.ub	r8,r8[0x1]
8000ddcc:	58 38       	cp.w	r8,3
8000ddce:	c1 30       	breq	8000ddf4 <udc_reqstd+0xc0>
8000ddd0:	e0 89 00 05 	brgt	8000ddda <udc_reqstd+0xa6>
8000ddd4:	58 18       	cp.w	r8,1
8000ddd6:	c0 b0       	breq	8000ddec <udc_reqstd+0xb8>
8000ddd8:	c1 68       	rjmp	8000de04 <udc_reqstd+0xd0>
8000ddda:	58 58       	cp.w	r8,5
8000dddc:	c0 40       	breq	8000dde4 <udc_reqstd+0xb0>
8000ddde:	58 98       	cp.w	r8,9
8000dde0:	c0 e0       	breq	8000ddfc <udc_reqstd+0xc8>
8000dde2:	c1 18       	rjmp	8000de04 <udc_reqstd+0xd0>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
8000dde4:	f0 1f 00 22 	mcall	8000de6c <udc_reqstd+0x138>
8000dde8:	18 98       	mov	r8,r12
8000ddea:	c3 28       	rjmp	8000de4e <udc_reqstd+0x11a>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
8000ddec:	f0 1f 00 21 	mcall	8000de70 <udc_reqstd+0x13c>
8000ddf0:	18 98       	mov	r8,r12
8000ddf2:	c2 e8       	rjmp	8000de4e <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
8000ddf4:	f0 1f 00 20 	mcall	8000de74 <udc_reqstd+0x140>
8000ddf8:	18 98       	mov	r8,r12
8000ddfa:	c2 a8       	rjmp	8000de4e <udc_reqstd+0x11a>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
8000ddfc:	f0 1f 00 1f 	mcall	8000de78 <udc_reqstd+0x144>
8000de00:	18 98       	mov	r8,r12
8000de02:	c2 68       	rjmp	8000de4e <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000de04:	49 48       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000de06:	11 88       	ld.ub	r8,r8[0x0]
8000de08:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de0c:	58 18       	cp.w	r8,1
8000de0e:	c0 91       	brne	8000de20 <udc_reqstd+0xec>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000de10:	49 18       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000de12:	11 98       	ld.ub	r8,r8[0x1]
8000de14:	58 b8       	cp.w	r8,11
8000de16:	c0 51       	brne	8000de20 <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
8000de18:	f0 1f 00 19 	mcall	8000de7c <udc_reqstd+0x148>
8000de1c:	18 98       	mov	r8,r12
8000de1e:	c1 88       	rjmp	8000de4e <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000de20:	48 d8       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000de22:	11 88       	ld.ub	r8,r8[0x0]
8000de24:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de28:	58 28       	cp.w	r8,2
8000de2a:	c1 11       	brne	8000de4c <udc_reqstd+0x118>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000de2c:	48 a8       	lddpc	r8,8000de54 <udc_reqstd+0x120>
8000de2e:	11 98       	ld.ub	r8,r8[0x1]
8000de30:	58 18       	cp.w	r8,1
8000de32:	c0 40       	breq	8000de3a <udc_reqstd+0x106>
8000de34:	58 38       	cp.w	r8,3
8000de36:	c0 60       	breq	8000de42 <udc_reqstd+0x10e>
8000de38:	c0 a8       	rjmp	8000de4c <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
8000de3a:	f0 1f 00 12 	mcall	8000de80 <udc_reqstd+0x14c>
8000de3e:	18 98       	mov	r8,r12
8000de40:	c0 78       	rjmp	8000de4e <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
8000de42:	f0 1f 00 11 	mcall	8000de84 <udc_reqstd+0x150>
8000de46:	18 98       	mov	r8,r12
8000de48:	c0 38       	rjmp	8000de4e <udc_reqstd+0x11a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000de4a:	d7 03       	nop
				break;
			}
		}
#endif
	}
	return false;
8000de4c:	30 08       	mov	r8,0
}
8000de4e:	10 9c       	mov	r12,r8
8000de50:	e3 cd 80 80 	ldm	sp++,r7,pc
8000de54:	00 00       	add	r0,r0
8000de56:	0d e4       	ld.ub	r4,r6[0x6]
8000de58:	80 00       	ld.sh	r0,r0[0x0]
8000de5a:	d5 10       	acall	0x144
8000de5c:	80 00       	ld.sh	r0,r0[0x0]
8000de5e:	d8 6c       	*unknown*
8000de60:	80 00       	ld.sh	r0,r0[0x0]
8000de62:	da c8       	*unknown*
8000de64:	80 00       	ld.sh	r0,r0[0x0]
8000de66:	dc 14       	*unknown*
8000de68:	80 00       	ld.sh	r0,r0[0x0]
8000de6a:	d5 44       	*unknown*
8000de6c:	80 00       	ld.sh	r0,r0[0x0]
8000de6e:	d7 44       	*unknown*
8000de70:	80 00       	ld.sh	r0,r0[0x0]
8000de72:	d5 9c       	*unknown*
8000de74:	80 00       	ld.sh	r0,r0[0x0]
8000de76:	d6 18       	*unknown*
8000de78:	80 00       	ld.sh	r0,r0[0x0]
8000de7a:	da fc       	*unknown*
8000de7c:	80 00       	ld.sh	r0,r0[0x0]
8000de7e:	dc c0       	acall	0x330
8000de80:	80 00       	ld.sh	r0,r0[0x0]
8000de82:	d5 dc       	*unknown*
8000de84:	80 00       	ld.sh	r0,r0[0x0]
8000de86:	d6 d4       	*unknown*

8000de88 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
8000de88:	eb cd 40 80 	pushm	r7,lr
8000de8c:	1a 97       	mov	r7,sp
8000de8e:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000de90:	4a 58       	lddpc	r8,8000df24 <udc_req_iface+0x9c>
8000de92:	11 88       	ld.ub	r8,r8[0x0]
8000de94:	58 08       	cp.w	r8,0
8000de96:	c0 31       	brne	8000de9c <udc_req_iface+0x14>
		return false; // The device is not is configured state yet
8000de98:	30 08       	mov	r8,0
8000de9a:	c4 08       	rjmp	8000df1a <udc_req_iface+0x92>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000de9c:	4a 38       	lddpc	r8,8000df28 <udc_req_iface+0xa0>
8000de9e:	90 28       	ld.sh	r8,r8[0x4]
8000dea0:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000dea4:	4a 28       	lddpc	r8,8000df2c <udc_req_iface+0xa4>
8000dea6:	70 08       	ld.w	r8,r8[0x0]
8000dea8:	70 08       	ld.w	r8,r8[0x0]
8000deaa:	11 c8       	ld.ub	r8,r8[0x4]
8000deac:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000deb0:	f0 09 18 00 	cp.b	r9,r8
8000deb4:	c0 33       	brcs	8000deba <udc_req_iface+0x32>
		return false;
8000deb6:	30 08       	mov	r8,0
8000deb8:	c3 18       	rjmp	8000df1a <udc_req_iface+0x92>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000deba:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000debe:	30 0b       	mov	r11,0
8000dec0:	10 9c       	mov	r12,r8
8000dec2:	f0 1f 00 1c 	mcall	8000df30 <udc_req_iface+0xa8>
8000dec6:	18 98       	mov	r8,r12
8000dec8:	ec 18 00 01 	eorl	r8,0x1
8000decc:	5c 58       	castu.b	r8
8000dece:	c0 30       	breq	8000ded4 <udc_req_iface+0x4c>
		return false;
8000ded0:	30 08       	mov	r8,0
8000ded2:	c2 48       	rjmp	8000df1a <udc_req_iface+0x92>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000ded4:	49 68       	lddpc	r8,8000df2c <udc_req_iface+0xa4>
8000ded6:	70 08       	ld.w	r8,r8[0x0]
8000ded8:	70 19       	ld.w	r9,r8[0x4]
8000deda:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dede:	a3 68       	lsl	r8,0x2
8000dee0:	f2 08 00 08 	add	r8,r9,r8
8000dee4:	70 08       	ld.w	r8,r8[0x0]
8000dee6:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000deea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000deee:	70 38       	ld.w	r8,r8[0xc]
8000def0:	5d 18       	icall	r8
8000def2:	18 98       	mov	r8,r12
8000def4:	10 99       	mov	r9,r8
8000def6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000defa:	12 9b       	mov	r11,r9
8000defc:	10 9c       	mov	r12,r8
8000defe:	f0 1f 00 0d 	mcall	8000df30 <udc_req_iface+0xa8>
8000df02:	18 98       	mov	r8,r12
8000df04:	ec 18 00 01 	eorl	r8,0x1
8000df08:	5c 58       	castu.b	r8
8000df0a:	c0 30       	breq	8000df10 <udc_req_iface+0x88>
		return false;
8000df0c:	30 08       	mov	r8,0
8000df0e:	c0 68       	rjmp	8000df1a <udc_req_iface+0x92>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
8000df10:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df14:	70 28       	ld.w	r8,r8[0x8]
8000df16:	5d 18       	icall	r8
8000df18:	18 98       	mov	r8,r12
}
8000df1a:	10 9c       	mov	r12,r8
8000df1c:	2f ed       	sub	sp,-8
8000df1e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df22:	00 00       	add	r0,r0
8000df24:	00 00       	add	r0,r0
8000df26:	08 52       	eor	r2,r4
8000df28:	00 00       	add	r0,r0
8000df2a:	0d e4       	ld.ub	r4,r6[0x6]
8000df2c:	00 00       	add	r0,r0
8000df2e:	08 54       	eor	r4,r4
8000df30:	80 00       	ld.sh	r0,r0[0x0]
8000df32:	d1 ec       	*unknown*

8000df34 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
8000df34:	eb cd 40 80 	pushm	r7,lr
8000df38:	1a 97       	mov	r7,sp
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
8000df3a:	49 a9       	lddpc	r9,8000dfa0 <udc_process_setup+0x6c>
8000df3c:	30 08       	mov	r8,0
8000df3e:	b2 68       	st.h	r9[0xc],r8
	udd_g_ctrlreq.callback = NULL;
8000df40:	49 88       	lddpc	r8,8000dfa0 <udc_process_setup+0x6c>
8000df42:	30 09       	mov	r9,0
8000df44:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000df46:	49 78       	lddpc	r8,8000dfa0 <udc_process_setup+0x6c>
8000df48:	30 09       	mov	r9,0
8000df4a:	91 59       	st.w	r8[0x14],r9

	if (Udd_setup_is_in()) {
8000df4c:	49 58       	lddpc	r8,8000dfa0 <udc_process_setup+0x6c>
8000df4e:	11 88       	ld.ub	r8,r8[0x0]
8000df50:	10 99       	mov	r9,r8
8000df52:	30 08       	mov	r8,0
8000df54:	f0 09 18 00 	cp.b	r9,r8
8000df58:	c0 74       	brge	8000df66 <udc_process_setup+0x32>
		if (udd_g_ctrlreq.req.wLength == 0) {
8000df5a:	49 28       	lddpc	r8,8000dfa0 <udc_process_setup+0x6c>
8000df5c:	90 38       	ld.sh	r8,r8[0x6]
8000df5e:	58 08       	cp.w	r8,0
8000df60:	c0 31       	brne	8000df66 <udc_process_setup+0x32>
			return false; // Error from USB host
8000df62:	30 08       	mov	r8,0
8000df64:	c1 b8       	rjmp	8000df9a <udc_process_setup+0x66>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
8000df66:	48 f8       	lddpc	r8,8000dfa0 <udc_process_setup+0x6c>
8000df68:	11 88       	ld.ub	r8,r8[0x0]
8000df6a:	e2 18 00 60 	andl	r8,0x60,COH
8000df6e:	c0 81       	brne	8000df7e <udc_process_setup+0x4a>
		if (udc_reqstd()) {
8000df70:	f0 1f 00 0d 	mcall	8000dfa4 <udc_process_setup+0x70>
8000df74:	18 98       	mov	r8,r12
8000df76:	58 08       	cp.w	r8,0
8000df78:	c0 30       	breq	8000df7e <udc_process_setup+0x4a>
			return true;
8000df7a:	30 18       	mov	r8,1
8000df7c:	c0 f8       	rjmp	8000df9a <udc_process_setup+0x66>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
8000df7e:	48 98       	lddpc	r8,8000dfa0 <udc_process_setup+0x6c>
8000df80:	11 88       	ld.ub	r8,r8[0x0]
8000df82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000df86:	58 18       	cp.w	r8,1
8000df88:	c0 81       	brne	8000df98 <udc_process_setup+0x64>
		if (udc_req_iface()) {
8000df8a:	f0 1f 00 08 	mcall	8000dfa8 <udc_process_setup+0x74>
8000df8e:	18 98       	mov	r8,r12
8000df90:	58 08       	cp.w	r8,0
8000df92:	c0 30       	breq	8000df98 <udc_process_setup+0x64>
			return true;
8000df94:	30 18       	mov	r8,1
8000df96:	c0 28       	rjmp	8000df9a <udc_process_setup+0x66>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
8000df98:	30 08       	mov	r8,0
#endif
}
8000df9a:	10 9c       	mov	r12,r8
8000df9c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dfa0:	00 00       	add	r0,r0
8000dfa2:	0d e4       	ld.ub	r4,r6[0x6]
8000dfa4:	80 00       	ld.sh	r0,r0[0x0]
8000dfa6:	dd 34       	*unknown*
8000dfa8:	80 00       	ld.sh	r0,r0[0x0]
8000dfaa:	de 88       	*unknown*

8000dfac <pm_sleep>:
#else
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
8000dfac:	eb cd 40 80 	pushm	r7,lr
8000dfb0:	1a 97       	mov	r7,sp
8000dfb2:	20 1d       	sub	sp,4
8000dfb4:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (sleep_mode) {
8000dfb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dfbc:	58 58       	cp.w	r8,5
8000dfbe:	c4 30       	breq	8000e044 <pm_sleep+0x98>
8000dfc0:	e0 89 00 10 	brgt	8000dfe0 <pm_sleep+0x34>
8000dfc4:	58 28       	cp.w	r8,2
8000dfc6:	c2 d0       	breq	8000e020 <pm_sleep+0x74>
8000dfc8:	e0 89 00 07 	brgt	8000dfd6 <pm_sleep+0x2a>
8000dfcc:	58 08       	cp.w	r8,0
8000dfce:	c1 d0       	breq	8000e008 <pm_sleep+0x5c>
8000dfd0:	58 18       	cp.w	r8,1
8000dfd2:	c2 10       	breq	8000e014 <pm_sleep+0x68>
8000dfd4:	c3 d8       	rjmp	8000e04e <pm_sleep+0xa2>
8000dfd6:	58 38       	cp.w	r8,3
8000dfd8:	c2 a0       	breq	8000e02c <pm_sleep+0x80>
8000dfda:	58 48       	cp.w	r8,4
8000dfdc:	c2 e0       	breq	8000e038 <pm_sleep+0x8c>
8000dfde:	c3 88       	rjmp	8000e04e <pm_sleep+0xa2>
8000dfe0:	e0 48 00 82 	cp.w	r8,130
8000dfe4:	c2 10       	breq	8000e026 <pm_sleep+0x7a>
8000dfe6:	e0 89 00 09 	brgt	8000dff8 <pm_sleep+0x4c>
8000dfea:	e0 48 00 80 	cp.w	r8,128
8000dfee:	c1 00       	breq	8000e00e <pm_sleep+0x62>
8000dff0:	e0 48 00 81 	cp.w	r8,129
8000dff4:	c1 30       	breq	8000e01a <pm_sleep+0x6e>
8000dff6:	c2 c8       	rjmp	8000e04e <pm_sleep+0xa2>
8000dff8:	e0 48 00 84 	cp.w	r8,132
8000dffc:	c2 10       	breq	8000e03e <pm_sleep+0x92>
8000dffe:	c1 a5       	brlt	8000e032 <pm_sleep+0x86>
8000e000:	e0 48 00 85 	cp.w	r8,133
8000e004:	c2 30       	breq	8000e04a <pm_sleep+0x9e>
8000e006:	c2 48       	rjmp	8000e04e <pm_sleep+0xa2>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
8000e008:	e9 b0 00 00 	sleep	0x0
		break;
8000e00c:	c2 18       	rjmp	8000e04e <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
8000e00e:	e9 b0 00 80 	sleep	0x80
		break;
8000e012:	c1 e8       	rjmp	8000e04e <pm_sleep+0xa2>
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
8000e014:	e9 b0 00 01 	sleep	0x1
		break;
8000e018:	c1 b8       	rjmp	8000e04e <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
8000e01a:	e9 b0 00 81 	sleep	0x81
		break;
8000e01e:	c1 88       	rjmp	8000e04e <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
8000e020:	e9 b0 00 02 	sleep	0x2
		break;
8000e024:	c1 58       	rjmp	8000e04e <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
8000e026:	e9 b0 00 82 	sleep	0x82
		break;
8000e02a:	c1 28       	rjmp	8000e04e <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
8000e02c:	e9 b0 00 03 	sleep	0x3
		break;
8000e030:	c0 f8       	rjmp	8000e04e <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
8000e032:	e9 b0 00 83 	sleep	0x83
		break;
8000e036:	c0 c8       	rjmp	8000e04e <pm_sleep+0xa2>
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
8000e038:	e9 b0 00 04 	sleep	0x4
		break;
8000e03c:	c0 98       	rjmp	8000e04e <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000e03e:	e9 b0 00 84 	sleep	0x84
		break;
8000e042:	c0 68       	rjmp	8000e04e <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
8000e044:	e9 b0 00 05 	sleep	0x5
		break;
8000e048:	c0 38       	rjmp	8000e04e <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
8000e04a:	e9 b0 00 85 	sleep	0x85
		break;
#endif
	default:
		break;
	}
}
8000e04e:	2f fd       	sub	sp,-4
8000e050:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e054 <sleepmgr_sleep>:
//! @}



static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
8000e054:	eb cd 40 80 	pushm	r7,lr
8000e058:	1a 97       	mov	r7,sp
8000e05a:	20 1d       	sub	sp,4
8000e05c:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
8000e060:	d3 03       	ssrf	0x10

	// Atomically enable the global interrupts and enter the sleep mode.
	pm_sleep(AVR32_PM_SMODE_GMCLEAR_MASK | (sleep_mode-1));
8000e062:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e066:	20 18       	sub	r8,1
8000e068:	a7 b8       	sbr	r8,0x7
8000e06a:	10 9c       	mov	r12,r8
8000e06c:	f0 1f 00 03 	mcall	8000e078 <sleepmgr_sleep+0x24>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
8000e070:	2f fd       	sub	sp,-4
8000e072:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e076:	00 00       	add	r0,r0
8000e078:	80 00       	ld.sh	r0,r0[0x0]
8000e07a:	df ac       	*unknown*

8000e07c <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8000e07c:	eb cd 40 80 	pushm	r7,lr
8000e080:	1a 97       	mov	r7,sp
8000e082:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000e084:	30 08       	mov	r8,0
8000e086:	ef 68 ff ff 	st.b	r7[-1],r8
8000e08a:	c0 c8       	rjmp	8000e0a2 <sleepmgr_init+0x26>
		sleepmgr_locks[i] = 0;
8000e08c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000e090:	48 ba       	lddpc	r10,8000e0bc <sleepmgr_init+0x40>
8000e092:	30 08       	mov	r8,0
8000e094:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000e098:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e09c:	2f f8       	sub	r8,-1
8000e09e:	ef 68 ff ff 	st.b	r7[-1],r8
8000e0a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000e0a6:	30 58       	mov	r8,5
8000e0a8:	f0 09 18 00 	cp.b	r9,r8
8000e0ac:	fe 98 ff f0 	brls	8000e08c <sleepmgr_init+0x10>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8000e0b0:	48 39       	lddpc	r9,8000e0bc <sleepmgr_init+0x40>
8000e0b2:	30 18       	mov	r8,1
8000e0b4:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000e0b6:	2f fd       	sub	sp,-4
8000e0b8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e0bc:	00 00       	add	r0,r0
8000e0be:	0d fc       	ld.ub	r12,r6[0x7]

8000e0c0 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
8000e0c0:	eb cd 40 80 	pushm	r7,lr
8000e0c4:	1a 97       	mov	r7,sp
8000e0c6:	20 2d       	sub	sp,8
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
8000e0c8:	30 08       	mov	r8,0
8000e0ca:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
8000e0ce:	48 d8       	lddpc	r8,8000e100 <sleepmgr_get_sleep_mode+0x40>
8000e0d0:	ef 48 ff fc 	st.w	r7[-4],r8

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000e0d4:	c0 b8       	rjmp	8000e0ea <sleepmgr_get_sleep_mode+0x2a>
		lock_ptr++;
8000e0d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e0da:	2f f8       	sub	r8,-1
8000e0dc:	ef 48 ff fc 	st.w	r7[-4],r8
		sleep_mode++;
8000e0e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e0e4:	2f f8       	sub	r8,-1
8000e0e6:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000e0ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e0ee:	11 88       	ld.ub	r8,r8[0x0]
8000e0f0:	58 08       	cp.w	r8,0
8000e0f2:	cf 20       	breq	8000e0d6 <sleepmgr_get_sleep_mode+0x16>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
8000e0f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000e0f8:	10 9c       	mov	r12,r8
8000e0fa:	2f ed       	sub	sp,-8
8000e0fc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e100:	00 00       	add	r0,r0
8000e102:	0d fc       	ld.ub	r12,r6[0x7]

8000e104 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
8000e104:	eb cd 40 80 	pushm	r7,lr
8000e108:	1a 97       	mov	r7,sp
8000e10a:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
8000e10c:	d3 03       	ssrf	0x10

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
8000e10e:	f0 1f 00 0a 	mcall	8000e134 <sleepmgr_enter_sleep+0x30>
8000e112:	18 98       	mov	r8,r12
8000e114:	ef 48 ff fc 	st.w	r7[-4],r8
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
8000e118:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e11c:	58 08       	cp.w	r8,0
8000e11e:	c0 31       	brne	8000e124 <sleepmgr_enter_sleep+0x20>
		cpu_irq_enable();
8000e120:	d5 03       	csrf	0x10
		return;
8000e122:	c0 58       	rjmp	8000e12c <sleepmgr_enter_sleep+0x28>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
8000e124:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e128:	f0 1f 00 04 	mcall	8000e138 <sleepmgr_enter_sleep+0x34>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000e12c:	2f fd       	sub	sp,-4
8000e12e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e132:	00 00       	add	r0,r0
8000e134:	80 00       	ld.sh	r0,r0[0x0]
8000e136:	e0 c0 80 00 	sub	r0,r0,-32768
8000e13a:	e0 54 eb cd 	cp.w	r4,125901

8000e13c <udc_include_vbus_monitoring>:
 *        // Start USB \n
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
8000e13c:	eb cd 40 80 	pushm	r7,lr
8000e140:	1a 97       	mov	r7,sp
	return udd_include_vbus_monitoring();
8000e142:	f0 1f 00 04 	mcall	8000e150 <udc_include_vbus_monitoring+0x14>
8000e146:	18 98       	mov	r8,r12
}
8000e148:	10 9c       	mov	r12,r8
8000e14a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e14e:	00 00       	add	r0,r0
8000e150:	80 00       	ld.sh	r0,r0[0x0]
8000e152:	9c 2c       	ld.sh	r12,lr[0x4]

8000e154 <udc_attach>:
 * \warning If a VBus control is included in driver,
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
8000e154:	eb cd 40 80 	pushm	r7,lr
8000e158:	1a 97       	mov	r7,sp
	udd_attach();
8000e15a:	f0 1f 00 03 	mcall	8000e164 <udc_attach+0x10>
}
8000e15e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e162:	00 00       	add	r0,r0
8000e164:	80 00       	ld.sh	r0,r0[0x0]
8000e166:	9d 5c       	st.w	lr[0x14],r12

8000e168 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
8000e168:	eb cd 40 80 	pushm	r7,lr
8000e16c:	1a 97       	mov	r7,sp
	udd_detach();
8000e16e:	f0 1f 00 03 	mcall	8000e178 <udc_detach+0x10>
}
8000e172:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e176:	00 00       	add	r0,r0
8000e178:	80 00       	ld.sh	r0,r0[0x0]
8000e17a:	9e 08       	ld.sh	r8,pc[0x0]

8000e17c <main>:
static bool main_b_msc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
8000e17c:	eb cd 40 80 	pushm	r7,lr
8000e180:	1a 97       	mov	r7,sp
8000e182:	20 1d       	sub	sp,4
	uint8_t i = 0;
8000e184:	30 08       	mov	r8,0
8000e186:	ef 68 ff ff 	st.b	r7[-1],r8
	irq_initialize_vectors();
8000e18a:	f0 1f 00 26 	mcall	8000e220 <main+0xa4>
	cpu_irq_enable();
8000e18e:	d5 03       	csrf	0x10

	// Initialize the sleep manager
	sleepmgr_init();
8000e190:	f0 1f 00 25 	mcall	8000e224 <main+0xa8>

	sysclk_init();
8000e194:	f0 1f 00 25 	mcall	8000e228 <main+0xac>
	board_init();
8000e198:	f0 1f 00 25 	mcall	8000e22c <main+0xb0>

	ui_init();
8000e19c:	f0 1f 00 25 	mcall	8000e230 <main+0xb4>
	ui_powerdown();
8000e1a0:	f0 1f 00 25 	mcall	8000e234 <main+0xb8>

	memories_initialization();
8000e1a4:	f0 1f 00 25 	mcall	8000e238 <main+0xbc>

	// Initialize LCD
	et024006_Init( FOSC0, FOSC0 );
8000e1a8:	e0 6b 1b 00 	mov	r11,6912
8000e1ac:	ea 1b 00 b7 	orh	r11,0xb7
8000e1b0:	e0 6c 1b 00 	mov	r12,6912
8000e1b4:	ea 1c 00 b7 	orh	r12,0xb7
8000e1b8:	f0 1f 00 21 	mcall	8000e23c <main+0xc0>
	gpio_set_gpio_pin(ET024006DHU_BL_PIN);
8000e1bc:	30 9c       	mov	r12,9
8000e1be:	f0 1f 00 21 	mcall	8000e240 <main+0xc4>
	
	//et024006_PrintConsole("Welcome Eric", BLACK, -1);
	//clear_lcd
	et024006_DrawFilledRect(1, 1, ET024006_WIDTH, ET024006_HEIGHT, BLACK);
8000e1c2:	30 08       	mov	r8,0
8000e1c4:	e0 69 00 f0 	mov	r9,240
8000e1c8:	e0 6a 01 40 	mov	r10,320
8000e1cc:	30 1b       	mov	r11,1
8000e1ce:	30 1c       	mov	r12,1
8000e1d0:	f0 1f 00 1d 	mcall	8000e244 <main+0xc8>
	
	// Initialize AES module
	aes_task();
8000e1d4:	f0 1f 00 1d 	mcall	8000e248 <main+0xcc>

	// Start TC
	tc_task();
8000e1d8:	f0 1f 00 1d 	mcall	8000e24c <main+0xd0>

	// Read the stored values from the flash
	Load_stored_values();
8000e1dc:	f0 1f 00 1d 	mcall	8000e250 <main+0xd4>
	// Start USB stack to authorize VBus monitoring
	udc_start();
8000e1e0:	f0 1f 00 1d 	mcall	8000e254 <main+0xd8>

	if (!udc_include_vbus_monitoring()) {
8000e1e4:	f0 1f 00 1d 	mcall	8000e258 <main+0xdc>
8000e1e8:	18 98       	mov	r8,r12
8000e1ea:	ec 18 00 01 	eorl	r8,0x1
8000e1ee:	5c 58       	castu.b	r8
8000e1f0:	c0 60       	breq	8000e1fc <main+0x80>
		// VBUS monitoring is not available on this product
		// thereby VBUS has to be considered as present
		main_vbus_action(true);
8000e1f2:	30 1c       	mov	r12,1
8000e1f4:	f0 1f 00 1a 	mcall	8000e25c <main+0xe0>
8000e1f8:	c0 28       	rjmp	8000e1fc <main+0x80>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e1fa:	d7 03       	nop

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true)
	{
		if (main_b_msc_enable)
8000e1fc:	49 98       	lddpc	r8,8000e260 <main+0xe4>
8000e1fe:	11 88       	ld.ub	r8,r8[0x0]
8000e200:	58 08       	cp.w	r8,0
8000e202:	c0 b0       	breq	8000e218 <main+0x9c>
		{
			if (!udi_msc_process_trans())
8000e204:	f0 1f 00 18 	mcall	8000e264 <main+0xe8>
8000e208:	18 98       	mov	r8,r12
8000e20a:	ec 18 00 01 	eorl	r8,0x1
8000e20e:	5c 58       	castu.b	r8
8000e210:	cf 50       	breq	8000e1fa <main+0x7e>
			{
				sleepmgr_enter_sleep();
8000e212:	f0 1f 00 16 	mcall	8000e268 <main+0xec>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e216:	cf 3b       	rjmp	8000e1fc <main+0x80>
				sleepmgr_enter_sleep();
			}
		}
		else
		{
			sleepmgr_enter_sleep();
8000e218:	f0 1f 00 14 	mcall	8000e268 <main+0xec>
		}
		//main_process_mode();
	}
8000e21c:	cf 0b       	rjmp	8000e1fc <main+0x80>
8000e21e:	00 00       	add	r0,r0
8000e220:	80 00       	ld.sh	r0,r0[0x0]
8000e222:	8f 64       	st.w	r7[0x18],r4
8000e224:	80 00       	ld.sh	r0,r0[0x0]
8000e226:	e0 7c 80 00 	mov	r12,98304
8000e22a:	c0 28       	rjmp	8000e22e <main+0xb2>
8000e22c:	80 00       	ld.sh	r0,r0[0x0]
8000e22e:	42 24       	lddsp	r4,sp[0x88]
8000e230:	80 00       	ld.sh	r0,r0[0x0]
8000e232:	c2 b0       	breq	8000e288 <main_vbus_action+0x1c>
8000e234:	80 00       	ld.sh	r0,r0[0x0]
8000e236:	c2 d0       	breq	8000e290 <main_vbus_action+0x24>
8000e238:	80 00       	ld.sh	r0,r0[0x0]
8000e23a:	e3 e4 80 00 	sthh.w	r0[r0],r1:b,r4:b
8000e23e:	44 0c       	lddsp	r12,sp[0x100]
8000e240:	80 00       	ld.sh	r0,r0[0x0]
8000e242:	8d 9e       	st.w	r6[0x24],lr
8000e244:	80 00       	ld.sh	r0,r0[0x0]
8000e246:	44 84       	lddsp	r4,sp[0x120]
8000e248:	80 00       	ld.sh	r0,r0[0x0]
8000e24a:	3f 94       	mov	r4,-7
8000e24c:	80 00       	ld.sh	r0,r0[0x0]
8000e24e:	3e fc       	mov	r12,-17
8000e250:	80 00       	ld.sh	r0,r0[0x0]
8000e252:	2e 78       	sub	r8,-25
8000e254:	80 00       	ld.sh	r0,r0[0x0]
8000e256:	d4 28       	*unknown*
8000e258:	80 00       	ld.sh	r0,r0[0x0]
8000e25a:	e1 3c 80 00 	ld.ub	r12,r0[-32768]
8000e25e:	e2 6c 00 00 	mov	r12,131072
8000e262:	08 60       	and	r0,r4
8000e264:	80 00       	ld.sh	r0,r0[0x0]
8000e266:	cf 24       	brge	8000e24a <main+0xce>
8000e268:	80 00       	ld.sh	r0,r0[0x0]
8000e26a:	e1 04 eb cd 	ld.sh	r4,r0[-5171]

8000e26c <main_vbus_action>:
}

void main_vbus_action(bool b_high)
{
8000e26c:	eb cd 40 80 	pushm	r7,lr
8000e270:	1a 97       	mov	r7,sp
8000e272:	20 1d       	sub	sp,4
8000e274:	18 98       	mov	r8,r12
8000e276:	ef 68 ff fc 	st.b	r7[-4],r8
	if (b_high) {
8000e27a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000e27e:	30 08       	mov	r8,0
8000e280:	f0 09 18 00 	cp.b	r9,r8
8000e284:	c0 40       	breq	8000e28c <main_vbus_action+0x20>
		// Attach USB Device
		udc_attach();
8000e286:	f0 1f 00 05 	mcall	8000e298 <main_vbus_action+0x2c>
8000e28a:	c0 38       	rjmp	8000e290 <main_vbus_action+0x24>
	} else {
		// VBUS not present
		udc_detach();
8000e28c:	f0 1f 00 04 	mcall	8000e29c <main_vbus_action+0x30>
	}
}
8000e290:	2f fd       	sub	sp,-4
8000e292:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e296:	00 00       	add	r0,r0
8000e298:	80 00       	ld.sh	r0,r0[0x0]
8000e29a:	e1 54 80 00 	st.h	r0[-32768],r4
8000e29e:	e1 68 eb cd 	st.b	r0[-5171],r8

8000e2a0 <main_suspend_action>:

void main_suspend_action(void)
{
8000e2a0:	eb cd 40 80 	pushm	r7,lr
8000e2a4:	1a 97       	mov	r7,sp
	ui_powerdown();
8000e2a6:	f0 1f 00 03 	mcall	8000e2b0 <main_suspend_action+0x10>
}
8000e2aa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e2ae:	00 00       	add	r0,r0
8000e2b0:	80 00       	ld.sh	r0,r0[0x0]
8000e2b2:	c2 d0       	breq	8000e30c <main_msc_enable+0xc>

8000e2b4 <main_resume_action>:

void main_resume_action(void)
{
8000e2b4:	eb cd 40 80 	pushm	r7,lr
8000e2b8:	1a 97       	mov	r7,sp
	ui_wakeup();
8000e2ba:	f0 1f 00 03 	mcall	8000e2c4 <main_resume_action+0x10>
}
8000e2be:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e2c2:	00 00       	add	r0,r0
8000e2c4:	80 00       	ld.sh	r0,r0[0x0]
8000e2c6:	c2 ec       	rcall	8000e322 <main_msc_disable+0xa>

8000e2c8 <main_sof_action>:

void main_sof_action(void)
{
8000e2c8:	eb cd 40 80 	pushm	r7,lr
8000e2cc:	1a 97       	mov	r7,sp
	if (!main_b_msc_enable)
8000e2ce:	48 a8       	lddpc	r8,8000e2f4 <main_sof_action+0x2c>
8000e2d0:	11 88       	ld.ub	r8,r8[0x0]
8000e2d2:	ec 18 00 01 	eorl	r8,0x1
8000e2d6:	5c 58       	castu.b	r8
8000e2d8:	c0 a1       	brne	8000e2ec <main_sof_action+0x24>
		return;
	ui_process(udd_get_frame_number());
8000e2da:	f0 1f 00 08 	mcall	8000e2f8 <main_sof_action+0x30>
8000e2de:	18 98       	mov	r8,r12
8000e2e0:	5c 88       	casts.h	r8
8000e2e2:	5c 78       	castu.h	r8
8000e2e4:	10 9c       	mov	r12,r8
8000e2e6:	f0 1f 00 06 	mcall	8000e2fc <main_sof_action+0x34>
8000e2ea:	c0 28       	rjmp	8000e2ee <main_sof_action+0x26>
}

void main_sof_action(void)
{
	if (!main_b_msc_enable)
		return;
8000e2ec:	d7 03       	nop
	ui_process(udd_get_frame_number());
}
8000e2ee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e2f2:	00 00       	add	r0,r0
8000e2f4:	00 00       	add	r0,r0
8000e2f6:	08 60       	and	r0,r4
8000e2f8:	80 00       	ld.sh	r0,r0[0x0]
8000e2fa:	9e ca       	ld.uh	r10,pc[0x8]
8000e2fc:	80 00       	ld.sh	r0,r0[0x0]
8000e2fe:	c3 50       	breq	8000e368 <osc_get_rate+0x3c>

8000e300 <main_msc_enable>:

bool main_msc_enable(void)
{
8000e300:	eb cd 40 80 	pushm	r7,lr
8000e304:	1a 97       	mov	r7,sp
	main_b_msc_enable = true;
8000e306:	48 49       	lddpc	r9,8000e314 <main_msc_enable+0x14>
8000e308:	30 18       	mov	r8,1
8000e30a:	b2 88       	st.b	r9[0x0],r8
	return true;
8000e30c:	30 18       	mov	r8,1
}
8000e30e:	10 9c       	mov	r12,r8
8000e310:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e314:	00 00       	add	r0,r0
8000e316:	08 60       	and	r0,r4

8000e318 <main_msc_disable>:

void main_msc_disable(void)
{
8000e318:	eb cd 40 80 	pushm	r7,lr
8000e31c:	1a 97       	mov	r7,sp
	main_b_msc_enable = false;
8000e31e:	48 39       	lddpc	r9,8000e328 <main_msc_disable+0x10>
8000e320:	30 08       	mov	r8,0
8000e322:	b2 88       	st.b	r9[0x0],r8
}
8000e324:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e328:	00 00       	add	r0,r0
8000e32a:	08 60       	and	r0,r4

8000e32c <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
8000e32c:	eb cd 40 80 	pushm	r7,lr
8000e330:	1a 97       	mov	r7,sp
8000e332:	20 1d       	sub	sp,4
8000e334:	18 98       	mov	r8,r12
8000e336:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000e33a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000e33e:	58 18       	cp.w	r8,1
8000e340:	c0 a0       	breq	8000e354 <osc_get_rate+0x28>
8000e342:	58 28       	cp.w	r8,2
8000e344:	c0 d0       	breq	8000e35e <osc_get_rate+0x32>
8000e346:	58 08       	cp.w	r8,0
8000e348:	c0 e1       	brne	8000e364 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000e34a:	e0 68 1b 00 	mov	r8,6912
8000e34e:	ea 18 00 b7 	orh	r8,0xb7
8000e352:	c0 a8       	rjmp	8000e366 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000e354:	e0 68 44 00 	mov	r8,17408
8000e358:	ea 18 00 ac 	orh	r8,0xac
8000e35c:	c0 58       	rjmp	8000e366 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000e35e:	e0 68 80 00 	mov	r8,32768
8000e362:	c0 28       	rjmp	8000e366 <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000e364:	30 08       	mov	r8,0
	}
}
8000e366:	10 9c       	mov	r12,r8
8000e368:	2f fd       	sub	sp,-4
8000e36a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e36e:	d7 03       	nop

8000e370 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000e370:	eb cd 40 80 	pushm	r7,lr
8000e374:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000e376:	30 0c       	mov	r12,0
8000e378:	f0 1f 00 06 	mcall	8000e390 <sysclk_get_main_hz+0x20>
8000e37c:	18 99       	mov	r9,r12
8000e37e:	12 98       	mov	r8,r9
8000e380:	a3 68       	lsl	r8,0x2
8000e382:	12 08       	add	r8,r9
8000e384:	a1 78       	lsl	r8,0x1
8000e386:	12 08       	add	r8,r9
8000e388:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000e38a:	10 9c       	mov	r12,r8
8000e38c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e390:	80 00       	ld.sh	r0,r0[0x0]
8000e392:	e3 2c eb cd 	ld.sb	r12,r1[-5171]

8000e394 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000e394:	eb cd 40 80 	pushm	r7,lr
8000e398:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000e39a:	f0 1f 00 04 	mcall	8000e3a8 <sysclk_get_cpu_hz+0x14>
8000e39e:	18 98       	mov	r8,r12
}
8000e3a0:	10 9c       	mov	r12,r8
8000e3a2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e3a6:	00 00       	add	r0,r0
8000e3a8:	80 00       	ld.sh	r0,r0[0x0]
8000e3aa:	e3 70 eb cd 	stcond	r1[-5171],r0

8000e3ac <sysclk_get_pbb_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus B clock
 *
 * \return Frequency of the Peripheral Bus B clock, in Hz.
 */
static inline uint32_t sysclk_get_pbb_hz(void)
{
8000e3ac:	eb cd 40 80 	pushm	r7,lr
8000e3b0:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBB_DIV;
8000e3b2:	f0 1f 00 04 	mcall	8000e3c0 <sysclk_get_pbb_hz+0x14>
8000e3b6:	18 98       	mov	r8,r12
}
8000e3b8:	10 9c       	mov	r12,r8
8000e3ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e3be:	00 00       	add	r0,r0
8000e3c0:	80 00       	ld.sh	r0,r0[0x0]
8000e3c2:	e3 70 eb cd 	stcond	r1[-5171],r0

8000e3c4 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000e3c4:	eb cd 40 80 	pushm	r7,lr
8000e3c8:	1a 97       	mov	r7,sp
8000e3ca:	20 1d       	sub	sp,4
8000e3cc:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000e3d0:	ee fb ff fc 	ld.w	r11,r7[-4]
8000e3d4:	30 1c       	mov	r12,1
8000e3d6:	f0 1f 00 03 	mcall	8000e3e0 <sysclk_enable_hsb_module+0x1c>
}
8000e3da:	2f fd       	sub	sp,-4
8000e3dc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e3e0:	80 00       	ld.sh	r0,r0[0x0]
8000e3e2:	bf 00       	ld.d	r0,pc

8000e3e4 <memories_initialization>:
# include "spi.h"
# include "conf_sd_mmc_spi.h"
#endif

void memories_initialization(void)
{
8000e3e4:	eb cd 40 c0 	pushm	r6-r7,lr
8000e3e8:	1a 97       	mov	r7,sp
8000e3ea:	20 2d       	sub	sp,8
	union {
		unsigned long scfg;
		avr32_hmatrix_scfg_t SCFG;
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);
8000e3ec:	30 0c       	mov	r12,0
8000e3ee:	f0 1f 00 42 	mcall	8000e4f4 <memories_initialization+0x110>

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
8000e3f2:	fe 68 10 00 	mov	r8,-126976
8000e3f6:	71 08       	ld.w	r8,r8[0x40]
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e3f8:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e3fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e400:	30 19       	mov	r9,1
8000e402:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e406:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000e40a:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e40e:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000e412:	f1 49 00 40 	st.w	r8[64],r9
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
8000e416:	fe 68 10 00 	mov	r8,-126976
8000e41a:	71 48       	ld.w	r8,r8[0x50]
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e41c:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e420:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e424:	30 19       	mov	r9,1
8000e426:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e42a:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000e42e:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e432:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000e436:	f1 49 00 50 	st.w	r8[80],r9
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
8000e43a:	fe 68 10 00 	mov	r8,-126976
8000e43e:	71 68       	ld.w	r8,r8[0x58]
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000e440:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e444:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e448:	30 19       	mov	r9,1
8000e44a:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e44e:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000e452:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e456:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000e45a:	f1 49 00 58 	st.w	r8[88],r9
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
8000e45e:	fe 68 10 00 	mov	r8,-126976
8000e462:	70 68       	ld.w	r8,r8[0x18]
		unsigned long                 mcfg;
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
8000e464:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
8000e468:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e46c:	30 09       	mov	r9,0
8000e46e:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000e472:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000e476:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_mcfg.mcfg;
8000e47a:	ee f9 ff f8 	ld.w	r9,r7[-8]
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000e47e:	91 69       	st.w	r8[0x18],r9
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
8000e480:	fe 68 10 00 	mov	r8,-126976
8000e484:	71 58       	ld.w	r8,r8[0x54]
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
8000e486:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
8000e48a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e48e:	30 69       	mov	r9,6
8000e490:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
8000e494:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000e498:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e49c:	30 29       	mov	r9,2
8000e49e:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e4a2:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000e4a6:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000e4aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000e4ae:	f1 49 00 54 	st.w	r8[84],r9
#endif

//#if ((defined SD_MMC_MCI_0_MEM) && (SD_MMC_MCI_0_MEM == ENABLE)) \
	//|| ((defined SD_MMC_MCI_1_MEM) && (SD_MMC_MCI_1_MEM == ENABLE))
#if ((defined (SD_MMC_MCI_0_MEM) || defined(SD_MMC_MCI_1_MEM) ) && (SD_MMC_MCI_0_MEM == ENABLE || SD_MMC_MCI_1_MEM == ENABLE))	
	sysclk_enable_pbb_module(SYSCLK_MCI);
8000e4b2:	30 6c       	mov	r12,6
8000e4b4:	f0 1f 00 10 	mcall	8000e4f4 <memories_initialization+0x110>
	sysclk_enable_hsb_module(SYSCLK_DMACA);
8000e4b8:	30 7c       	mov	r12,7
8000e4ba:	f0 1f 00 10 	mcall	8000e4f8 <memories_initialization+0x114>
#if SD_MMC_MCI_0_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_8BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000e4be:	f0 1f 00 10 	mcall	8000e4fc <memories_initialization+0x118>
8000e4c2:	18 98       	mov	r8,r12
8000e4c4:	10 96       	mov	r6,r8
8000e4c6:	f0 1f 00 0f 	mcall	8000e500 <memories_initialization+0x11c>
8000e4ca:	18 98       	mov	r8,r12
8000e4cc:	0c 9a       	mov	r10,r6
8000e4ce:	10 9b       	mov	r11,r8
8000e4d0:	30 0c       	mov	r12,0
8000e4d2:	f0 1f 00 0d 	mcall	8000e504 <memories_initialization+0x120>
#endif
#if SD_MMC_MCI_1_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_4BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000e4d6:	f0 1f 00 0a 	mcall	8000e4fc <memories_initialization+0x118>
8000e4da:	18 98       	mov	r8,r12
8000e4dc:	10 96       	mov	r6,r8
8000e4de:	f0 1f 00 09 	mcall	8000e500 <memories_initialization+0x11c>
8000e4e2:	18 98       	mov	r8,r12
8000e4e4:	0c 9a       	mov	r10,r6
8000e4e6:	10 9b       	mov	r11,r8
8000e4e8:	30 1c       	mov	r12,1
8000e4ea:	f0 1f 00 07 	mcall	8000e504 <memories_initialization+0x120>

	// Initialize SD/MMC with SPI PB clock.
	sd_mmc_spi_init(spiOptions,sysclk_get_pba_hz());
#endif  // SD_MMC_SPI_MEM == ENABLE

}
8000e4ee:	2f ed       	sub	sp,-8
8000e4f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e4f4:	80 00       	ld.sh	r0,r0[0x0]
8000e4f6:	bf 74       	lsl	r4,0x1f
8000e4f8:	80 00       	ld.sh	r0,r0[0x0]
8000e4fa:	e3 c4 80 00 	ldm	r4++,pc
8000e4fe:	e3 94       	*unknown*
8000e500:	80 00       	ld.sh	r0,r0[0x0]
8000e502:	e3 ac 80 00 	cop	cp4,cr0,cr0,cr0,0x38
8000e506:	64 fc       	ld.w	r12,r2[0x3c]

8000e508 <__avr32_udiv64>:
8000e508:	d4 31       	pushm	r0-r7,lr
8000e50a:	1a 97       	mov	r7,sp
8000e50c:	20 2d       	sub	sp,8
8000e50e:	10 9e       	mov	lr,r8
8000e510:	12 95       	mov	r5,r9
8000e512:	14 96       	mov	r6,r10
8000e514:	58 09       	cp.w	r9,0
8000e516:	c4 91       	brne	8000e5a8 <__avr32_udiv64+0xa0>
8000e518:	16 38       	cp.w	r8,r11
8000e51a:	e0 88 00 57 	brls	8000e5c8 <__avr32_udiv64+0xc0>
8000e51e:	f0 08 12 00 	clz	r8,r8
8000e522:	c0 d0       	breq	8000e53c <__avr32_udiv64+0x34>
8000e524:	f6 08 09 4b 	lsl	r11,r11,r8
8000e528:	f0 09 11 20 	rsub	r9,r8,32
8000e52c:	fc 08 09 4e 	lsl	lr,lr,r8
8000e530:	f4 09 0a 49 	lsr	r9,r10,r9
8000e534:	f4 08 09 46 	lsl	r6,r10,r8
8000e538:	f3 eb 10 0b 	or	r11,r9,r11
8000e53c:	fc 05 16 10 	lsr	r5,lr,0x10
8000e540:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
8000e544:	f6 05 0d 0a 	divu	r10,r11,r5
8000e548:	ec 08 16 10 	lsr	r8,r6,0x10
8000e54c:	14 99       	mov	r9,r10
8000e54e:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e552:	b9 3a       	mul	r10,r12
8000e554:	10 3a       	cp.w	r10,r8
8000e556:	e0 88 00 0c 	brls	8000e56e <__avr32_udiv64+0x66>
8000e55a:	20 19       	sub	r9,1
8000e55c:	1c 08       	add	r8,lr
8000e55e:	10 3e       	cp.w	lr,r8
8000e560:	e0 8b 00 07 	brhi	8000e56e <__avr32_udiv64+0x66>
8000e564:	10 3a       	cp.w	r10,r8
8000e566:	f7 b9 0b 01 	subhi	r9,1
8000e56a:	f1 de eb 08 	addhi	r8,r8,lr
8000e56e:	f0 0a 01 0b 	sub	r11,r8,r10
8000e572:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e576:	f6 05 0d 0a 	divu	r10,r11,r5
8000e57a:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000e57e:	14 98       	mov	r8,r10
8000e580:	f4 0c 02 4c 	mul	r12,r10,r12
8000e584:	0c 3c       	cp.w	r12,r6
8000e586:	e0 88 00 0a 	brls	8000e59a <__avr32_udiv64+0x92>
8000e58a:	20 18       	sub	r8,1
8000e58c:	1c 06       	add	r6,lr
8000e58e:	0c 3e       	cp.w	lr,r6
8000e590:	e0 8b 00 05 	brhi	8000e59a <__avr32_udiv64+0x92>
8000e594:	0c 3c       	cp.w	r12,r6
8000e596:	f7 b8 0b 01 	subhi	r8,1
8000e59a:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000e59e:	30 0c       	mov	r12,0
8000e5a0:	16 9a       	mov	r10,r11
8000e5a2:	18 9b       	mov	r11,r12
8000e5a4:	2f ed       	sub	sp,-8
8000e5a6:	d8 32       	popm	r0-r7,pc
8000e5a8:	16 39       	cp.w	r9,r11
8000e5aa:	e0 8b 00 51 	brhi	8000e64c <__avr32_udiv64+0x144>
8000e5ae:	f2 0c 12 00 	clz	r12,r9
8000e5b2:	c5 31       	brne	8000e658 <__avr32_udiv64+0x150>
8000e5b4:	14 38       	cp.w	r8,r10
8000e5b6:	5f 89       	srls	r9
8000e5b8:	16 35       	cp.w	r5,r11
8000e5ba:	5f 38       	srlo	r8
8000e5bc:	10 49       	or	r9,r8
8000e5be:	f8 09 18 00 	cp.b	r9,r12
8000e5c2:	c4 50       	breq	8000e64c <__avr32_udiv64+0x144>
8000e5c4:	30 1b       	mov	r11,1
8000e5c6:	c4 58       	rjmp	8000e650 <__avr32_udiv64+0x148>
8000e5c8:	58 08       	cp.w	r8,0
8000e5ca:	c0 51       	brne	8000e5d4 <__avr32_udiv64+0xcc>
8000e5cc:	30 19       	mov	r9,1
8000e5ce:	f2 08 0d 08 	divu	r8,r9,r8
8000e5d2:	10 9e       	mov	lr,r8
8000e5d4:	fc 08 12 00 	clz	r8,lr
8000e5d8:	e0 81 00 91 	brne	8000e6fa <__avr32_udiv64+0x1f2>
8000e5dc:	1c 1b       	sub	r11,lr
8000e5de:	fc 05 16 10 	lsr	r5,lr,0x10
8000e5e2:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e5e6:	30 1c       	mov	r12,1
8000e5e8:	f6 05 0d 0a 	divu	r10,r11,r5
8000e5ec:	ec 08 16 10 	lsr	r8,r6,0x10
8000e5f0:	f4 09 02 43 	mul	r3,r10,r9
8000e5f4:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e5f8:	14 9b       	mov	r11,r10
8000e5fa:	10 33       	cp.w	r3,r8
8000e5fc:	e0 88 00 0c 	brls	8000e614 <__avr32_udiv64+0x10c>
8000e600:	20 1b       	sub	r11,1
8000e602:	1c 08       	add	r8,lr
8000e604:	10 3e       	cp.w	lr,r8
8000e606:	e0 8b 00 07 	brhi	8000e614 <__avr32_udiv64+0x10c>
8000e60a:	10 33       	cp.w	r3,r8
8000e60c:	f7 bb 0b 01 	subhi	r11,1
8000e610:	f1 de eb 08 	addhi	r8,r8,lr
8000e614:	f0 03 01 03 	sub	r3,r8,r3
8000e618:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e61c:	e6 05 0d 02 	divu	r2,r3,r5
8000e620:	ed e3 11 06 	or	r6,r6,r3<<0x10
8000e624:	04 98       	mov	r8,r2
8000e626:	e4 09 02 49 	mul	r9,r2,r9
8000e62a:	0c 39       	cp.w	r9,r6
8000e62c:	e0 88 00 0a 	brls	8000e640 <__avr32_udiv64+0x138>
8000e630:	20 18       	sub	r8,1
8000e632:	1c 06       	add	r6,lr
8000e634:	0c 3e       	cp.w	lr,r6
8000e636:	e0 8b 00 05 	brhi	8000e640 <__avr32_udiv64+0x138>
8000e63a:	0c 39       	cp.w	r9,r6
8000e63c:	f7 b8 0b 01 	subhi	r8,1
8000e640:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000e644:	16 9a       	mov	r10,r11
8000e646:	18 9b       	mov	r11,r12
8000e648:	2f ed       	sub	sp,-8
8000e64a:	d8 32       	popm	r0-r7,pc
8000e64c:	30 0b       	mov	r11,0
8000e64e:	16 9c       	mov	r12,r11
8000e650:	16 9a       	mov	r10,r11
8000e652:	18 9b       	mov	r11,r12
8000e654:	2f ed       	sub	sp,-8
8000e656:	d8 32       	popm	r0-r7,pc
8000e658:	f2 0c 09 45 	lsl	r5,r9,r12
8000e65c:	f8 0e 11 20 	rsub	lr,r12,32
8000e660:	f0 0c 09 43 	lsl	r3,r8,r12
8000e664:	f4 0e 0a 46 	lsr	r6,r10,lr
8000e668:	f0 0e 0a 48 	lsr	r8,r8,lr
8000e66c:	f6 0e 0a 4e 	lsr	lr,r11,lr
8000e670:	0a 48       	or	r8,r5
8000e672:	f0 01 16 10 	lsr	r1,r8,0x10
8000e676:	fc 01 0d 04 	divu	r4,lr,r1
8000e67a:	ee e5 ff f8 	st.d	r7[-8],r4
8000e67e:	f6 0c 09 49 	lsl	r9,r11,r12
8000e682:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000e686:	ed e9 10 09 	or	r9,r6,r9
8000e68a:	08 96       	mov	r6,r4
8000e68c:	f2 0e 16 10 	lsr	lr,r9,0x10
8000e690:	ee f4 ff f8 	ld.w	r4,r7[-8]
8000e694:	ec 05 02 4b 	mul	r11,r6,r5
8000e698:	fd e4 11 0e 	or	lr,lr,r4<<0x10
8000e69c:	1c 3b       	cp.w	r11,lr
8000e69e:	e0 88 00 07 	brls	8000e6ac <__avr32_udiv64+0x1a4>
8000e6a2:	20 16       	sub	r6,1
8000e6a4:	10 0e       	add	lr,r8
8000e6a6:	1c 38       	cp.w	r8,lr
8000e6a8:	e0 88 00 6d 	brls	8000e782 <__avr32_udiv64+0x27a>
8000e6ac:	16 1e       	sub	lr,r11
8000e6ae:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000e6b2:	fc 01 0d 00 	divu	r0,lr,r1
8000e6b6:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000e6ba:	00 9b       	mov	r11,r0
8000e6bc:	e0 05 02 4e 	mul	lr,r0,r5
8000e6c0:	12 3e       	cp.w	lr,r9
8000e6c2:	e0 88 00 07 	brls	8000e6d0 <__avr32_udiv64+0x1c8>
8000e6c6:	20 1b       	sub	r11,1
8000e6c8:	10 09       	add	r9,r8
8000e6ca:	12 38       	cp.w	r8,r9
8000e6cc:	e0 88 00 55 	brls	8000e776 <__avr32_udiv64+0x26e>
8000e6d0:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
8000e6d4:	1c 19       	sub	r9,lr
8000e6d6:	f6 03 06 42 	mulu.d	r2,r11,r3
8000e6da:	06 39       	cp.w	r9,r3
8000e6dc:	c0 93       	brcs	8000e6ee <__avr32_udiv64+0x1e6>
8000e6de:	5f 09       	sreq	r9
8000e6e0:	f4 0c 09 4c 	lsl	r12,r10,r12
8000e6e4:	04 3c       	cp.w	r12,r2
8000e6e6:	5f 38       	srlo	r8
8000e6e8:	f3 e8 00 08 	and	r8,r9,r8
8000e6ec:	c0 20       	breq	8000e6f0 <__avr32_udiv64+0x1e8>
8000e6ee:	20 1b       	sub	r11,1
8000e6f0:	30 0c       	mov	r12,0
8000e6f2:	16 9a       	mov	r10,r11
8000e6f4:	18 9b       	mov	r11,r12
8000e6f6:	2f ed       	sub	sp,-8
8000e6f8:	d8 32       	popm	r0-r7,pc
8000e6fa:	f6 08 09 49 	lsl	r9,r11,r8
8000e6fe:	fc 08 09 4e 	lsl	lr,lr,r8
8000e702:	f0 01 11 20 	rsub	r1,r8,32
8000e706:	fc 05 16 10 	lsr	r5,lr,0x10
8000e70a:	f4 01 0a 42 	lsr	r2,r10,r1
8000e70e:	f6 01 0a 41 	lsr	r1,r11,r1
8000e712:	12 42       	or	r2,r9
8000e714:	e2 05 0d 00 	divu	r0,r1,r5
8000e718:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e71c:	e4 06 16 10 	lsr	r6,r2,0x10
8000e720:	00 93       	mov	r3,r0
8000e722:	ed e1 11 06 	or	r6,r6,r1<<0x10
8000e726:	e0 09 02 4c 	mul	r12,r0,r9
8000e72a:	0c 3c       	cp.w	r12,r6
8000e72c:	e0 88 00 07 	brls	8000e73a <__avr32_udiv64+0x232>
8000e730:	20 13       	sub	r3,1
8000e732:	1c 06       	add	r6,lr
8000e734:	0c 3e       	cp.w	lr,r6
8000e736:	e0 88 00 2c 	brls	8000e78e <__avr32_udiv64+0x286>
8000e73a:	ec 0c 01 01 	sub	r1,r6,r12
8000e73e:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000e742:	e2 05 0d 00 	divu	r0,r1,r5
8000e746:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000e74a:	00 9c       	mov	r12,r0
8000e74c:	e0 09 02 41 	mul	r1,r0,r9
8000e750:	16 31       	cp.w	r1,r11
8000e752:	e0 88 00 0c 	brls	8000e76a <__avr32_udiv64+0x262>
8000e756:	20 1c       	sub	r12,1
8000e758:	1c 0b       	add	r11,lr
8000e75a:	16 3e       	cp.w	lr,r11
8000e75c:	e0 8b 00 07 	brhi	8000e76a <__avr32_udiv64+0x262>
8000e760:	16 31       	cp.w	r1,r11
8000e762:	f7 bc 0b 01 	subhi	r12,1
8000e766:	f7 de eb 0b 	addhi	r11,r11,lr
8000e76a:	f4 08 09 46 	lsl	r6,r10,r8
8000e76e:	02 1b       	sub	r11,r1
8000e770:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
8000e774:	c3 ab       	rjmp	8000e5e8 <__avr32_udiv64+0xe0>
8000e776:	12 3e       	cp.w	lr,r9
8000e778:	f3 d8 eb 09 	addhi	r9,r9,r8
8000e77c:	f7 bb 0b 01 	subhi	r11,1
8000e780:	ca 8b       	rjmp	8000e6d0 <__avr32_udiv64+0x1c8>
8000e782:	1c 3b       	cp.w	r11,lr
8000e784:	f7 b6 0b 01 	subhi	r6,1
8000e788:	fd d8 eb 0e 	addhi	lr,lr,r8
8000e78c:	c9 0b       	rjmp	8000e6ac <__avr32_udiv64+0x1a4>
8000e78e:	0c 3c       	cp.w	r12,r6
8000e790:	f7 b3 0b 01 	subhi	r3,1
8000e794:	ed de eb 06 	addhi	r6,r6,lr
8000e798:	cd 1b       	rjmp	8000e73a <__avr32_udiv64+0x232>

8000e79a <memcpy>:
8000e79a:	58 8a       	cp.w	r10,8
8000e79c:	c2 f5       	brlt	8000e7fa <memcpy+0x60>
8000e79e:	f9 eb 10 09 	or	r9,r12,r11
8000e7a2:	e2 19 00 03 	andl	r9,0x3,COH
8000e7a6:	e0 81 00 97 	brne	8000e8d4 <memcpy+0x13a>
8000e7aa:	e0 4a 00 20 	cp.w	r10,32
8000e7ae:	c3 b4       	brge	8000e824 <memcpy+0x8a>
8000e7b0:	f4 08 14 02 	asr	r8,r10,0x2
8000e7b4:	f0 09 11 08 	rsub	r9,r8,8
8000e7b8:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000e7bc:	76 69       	ld.w	r9,r11[0x18]
8000e7be:	99 69       	st.w	r12[0x18],r9
8000e7c0:	76 59       	ld.w	r9,r11[0x14]
8000e7c2:	99 59       	st.w	r12[0x14],r9
8000e7c4:	76 49       	ld.w	r9,r11[0x10]
8000e7c6:	99 49       	st.w	r12[0x10],r9
8000e7c8:	76 39       	ld.w	r9,r11[0xc]
8000e7ca:	99 39       	st.w	r12[0xc],r9
8000e7cc:	76 29       	ld.w	r9,r11[0x8]
8000e7ce:	99 29       	st.w	r12[0x8],r9
8000e7d0:	76 19       	ld.w	r9,r11[0x4]
8000e7d2:	99 19       	st.w	r12[0x4],r9
8000e7d4:	76 09       	ld.w	r9,r11[0x0]
8000e7d6:	99 09       	st.w	r12[0x0],r9
8000e7d8:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000e7dc:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000e7e0:	e0 1a 00 03 	andl	r10,0x3
8000e7e4:	f4 0a 11 04 	rsub	r10,r10,4
8000e7e8:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000e7ec:	17 a9       	ld.ub	r9,r11[0x2]
8000e7ee:	b0 a9       	st.b	r8[0x2],r9
8000e7f0:	17 99       	ld.ub	r9,r11[0x1]
8000e7f2:	b0 99       	st.b	r8[0x1],r9
8000e7f4:	17 89       	ld.ub	r9,r11[0x0]
8000e7f6:	b0 89       	st.b	r8[0x0],r9
8000e7f8:	5e fc       	retal	r12
8000e7fa:	f4 0a 11 09 	rsub	r10,r10,9
8000e7fe:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000e802:	17 f9       	ld.ub	r9,r11[0x7]
8000e804:	b8 f9       	st.b	r12[0x7],r9
8000e806:	17 e9       	ld.ub	r9,r11[0x6]
8000e808:	b8 e9       	st.b	r12[0x6],r9
8000e80a:	17 d9       	ld.ub	r9,r11[0x5]
8000e80c:	b8 d9       	st.b	r12[0x5],r9
8000e80e:	17 c9       	ld.ub	r9,r11[0x4]
8000e810:	b8 c9       	st.b	r12[0x4],r9
8000e812:	17 b9       	ld.ub	r9,r11[0x3]
8000e814:	b8 b9       	st.b	r12[0x3],r9
8000e816:	17 a9       	ld.ub	r9,r11[0x2]
8000e818:	b8 a9       	st.b	r12[0x2],r9
8000e81a:	17 99       	ld.ub	r9,r11[0x1]
8000e81c:	b8 99       	st.b	r12[0x1],r9
8000e81e:	17 89       	ld.ub	r9,r11[0x0]
8000e820:	b8 89       	st.b	r12[0x0],r9
8000e822:	5e fc       	retal	r12
8000e824:	eb cd 40 c0 	pushm	r6-r7,lr
8000e828:	18 99       	mov	r9,r12
8000e82a:	22 0a       	sub	r10,32
8000e82c:	b7 07       	ld.d	r6,r11++
8000e82e:	b3 26       	st.d	r9++,r6
8000e830:	b7 07       	ld.d	r6,r11++
8000e832:	b3 26       	st.d	r9++,r6
8000e834:	b7 07       	ld.d	r6,r11++
8000e836:	b3 26       	st.d	r9++,r6
8000e838:	b7 07       	ld.d	r6,r11++
8000e83a:	b3 26       	st.d	r9++,r6
8000e83c:	22 0a       	sub	r10,32
8000e83e:	cf 74       	brge	8000e82c <memcpy+0x92>
8000e840:	2f 0a       	sub	r10,-16
8000e842:	c0 65       	brlt	8000e84e <memcpy+0xb4>
8000e844:	b7 07       	ld.d	r6,r11++
8000e846:	b3 26       	st.d	r9++,r6
8000e848:	b7 07       	ld.d	r6,r11++
8000e84a:	b3 26       	st.d	r9++,r6
8000e84c:	21 0a       	sub	r10,16
8000e84e:	5c 3a       	neg	r10
8000e850:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000e854:	d7 03       	nop
8000e856:	d7 03       	nop
8000e858:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000e85c:	f3 66 00 0e 	st.b	r9[14],r6
8000e860:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000e864:	f3 66 00 0d 	st.b	r9[13],r6
8000e868:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000e86c:	f3 66 00 0c 	st.b	r9[12],r6
8000e870:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000e874:	f3 66 00 0b 	st.b	r9[11],r6
8000e878:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000e87c:	f3 66 00 0a 	st.b	r9[10],r6
8000e880:	f7 36 00 09 	ld.ub	r6,r11[9]
8000e884:	f3 66 00 09 	st.b	r9[9],r6
8000e888:	f7 36 00 08 	ld.ub	r6,r11[8]
8000e88c:	f3 66 00 08 	st.b	r9[8],r6
8000e890:	f7 36 00 07 	ld.ub	r6,r11[7]
8000e894:	f3 66 00 07 	st.b	r9[7],r6
8000e898:	f7 36 00 06 	ld.ub	r6,r11[6]
8000e89c:	f3 66 00 06 	st.b	r9[6],r6
8000e8a0:	f7 36 00 05 	ld.ub	r6,r11[5]
8000e8a4:	f3 66 00 05 	st.b	r9[5],r6
8000e8a8:	f7 36 00 04 	ld.ub	r6,r11[4]
8000e8ac:	f3 66 00 04 	st.b	r9[4],r6
8000e8b0:	f7 36 00 03 	ld.ub	r6,r11[3]
8000e8b4:	f3 66 00 03 	st.b	r9[3],r6
8000e8b8:	f7 36 00 02 	ld.ub	r6,r11[2]
8000e8bc:	f3 66 00 02 	st.b	r9[2],r6
8000e8c0:	f7 36 00 01 	ld.ub	r6,r11[1]
8000e8c4:	f3 66 00 01 	st.b	r9[1],r6
8000e8c8:	f7 36 00 00 	ld.ub	r6,r11[0]
8000e8cc:	f3 66 00 00 	st.b	r9[0],r6
8000e8d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e8d4:	20 1a       	sub	r10,1
8000e8d6:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000e8da:	f8 0a 0b 09 	st.b	r12[r10],r9
8000e8de:	cf b1       	brne	8000e8d4 <memcpy+0x13a>
8000e8e0:	5e fc       	retal	r12

8000e8e2 <memset>:
8000e8e2:	18 98       	mov	r8,r12
8000e8e4:	c0 38       	rjmp	8000e8ea <memset+0x8>
8000e8e6:	10 cb       	st.b	r8++,r11
8000e8e8:	20 1a       	sub	r10,1
8000e8ea:	58 0a       	cp.w	r10,0
8000e8ec:	cf d1       	brne	8000e8e6 <memset+0x4>
8000e8ee:	5e fc       	retal	r12

Disassembly of section .exception:

8000ea00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000ea00:	c0 08       	rjmp	8000ea00 <_evba>
	...

8000ea04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000ea04:	c0 08       	rjmp	8000ea04 <_handle_TLB_Multiple_Hit>
	...

8000ea08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000ea08:	c0 08       	rjmp	8000ea08 <_handle_Bus_Error_Data_Fetch>
	...

8000ea0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000ea0c:	c0 08       	rjmp	8000ea0c <_handle_Bus_Error_Instruction_Fetch>
	...

8000ea10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000ea10:	c0 08       	rjmp	8000ea10 <_handle_NMI>
	...

8000ea14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000ea14:	c0 08       	rjmp	8000ea14 <_handle_Instruction_Address>
	...

8000ea18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000ea18:	c0 08       	rjmp	8000ea18 <_handle_ITLB_Protection>
	...

8000ea1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000ea1c:	c0 08       	rjmp	8000ea1c <_handle_Breakpoint>
	...

8000ea20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000ea20:	c0 08       	rjmp	8000ea20 <_handle_Illegal_Opcode>
	...

8000ea24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000ea24:	c0 08       	rjmp	8000ea24 <_handle_Unimplemented_Instruction>
	...

8000ea28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000ea28:	c0 08       	rjmp	8000ea28 <_handle_Privilege_Violation>
	...

8000ea2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000ea2c:	c0 08       	rjmp	8000ea2c <_handle_Floating_Point>
	...

8000ea30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000ea30:	c0 08       	rjmp	8000ea30 <_handle_Coprocessor_Absent>
	...

8000ea34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000ea34:	c0 08       	rjmp	8000ea34 <_handle_Data_Address_Read>
	...

8000ea38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000ea38:	c0 08       	rjmp	8000ea38 <_handle_Data_Address_Write>
	...

8000ea3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000ea3c:	c0 08       	rjmp	8000ea3c <_handle_DTLB_Protection_Read>
	...

8000ea40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000ea40:	c0 08       	rjmp	8000ea40 <_handle_DTLB_Protection_Write>
	...

8000ea44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000ea44:	c0 08       	rjmp	8000ea44 <_handle_DTLB_Modified>
	...

8000ea50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000ea50:	c0 08       	rjmp	8000ea50 <_handle_ITLB_Miss>
	...

8000ea60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000ea60:	c0 08       	rjmp	8000ea60 <_handle_DTLB_Miss_Read>
	...

8000ea70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000ea70:	c0 08       	rjmp	8000ea70 <_handle_DTLB_Miss_Write>
	...

8000eb00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000eb00:	c0 08       	rjmp	8000eb00 <_handle_Supervisor_Call>
8000eb02:	d7 03       	nop

8000eb04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000eb04:	30 0c       	mov	r12,0
8000eb06:	fe b0 d1 ed 	rcall	80008ee0 <_get_interrupt_handler>
8000eb0a:	58 0c       	cp.w	r12,0
8000eb0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000eb10:	d6 03       	rete

8000eb12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000eb12:	30 1c       	mov	r12,1
8000eb14:	fe b0 d1 e6 	rcall	80008ee0 <_get_interrupt_handler>
8000eb18:	58 0c       	cp.w	r12,0
8000eb1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000eb1e:	d6 03       	rete

8000eb20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000eb20:	30 2c       	mov	r12,2
8000eb22:	fe b0 d1 df 	rcall	80008ee0 <_get_interrupt_handler>
8000eb26:	58 0c       	cp.w	r12,0
8000eb28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000eb2c:	d6 03       	rete

8000eb2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000eb2e:	30 3c       	mov	r12,3
8000eb30:	fe b0 d1 d8 	rcall	80008ee0 <_get_interrupt_handler>
8000eb34:	58 0c       	cp.w	r12,0
8000eb36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000eb3a:	d6 03       	rete
8000eb3c:	d7 03       	nop
8000eb3e:	d7 03       	nop
8000eb40:	d7 03       	nop
8000eb42:	d7 03       	nop
8000eb44:	d7 03       	nop
8000eb46:	d7 03       	nop
8000eb48:	d7 03       	nop
8000eb4a:	d7 03       	nop
8000eb4c:	d7 03       	nop
8000eb4e:	d7 03       	nop
8000eb50:	d7 03       	nop
8000eb52:	d7 03       	nop
8000eb54:	d7 03       	nop
8000eb56:	d7 03       	nop
8000eb58:	d7 03       	nop
8000eb5a:	d7 03       	nop
8000eb5c:	d7 03       	nop
8000eb5e:	d7 03       	nop
8000eb60:	d7 03       	nop
8000eb62:	d7 03       	nop
8000eb64:	d7 03       	nop
8000eb66:	d7 03       	nop
8000eb68:	d7 03       	nop
8000eb6a:	d7 03       	nop
8000eb6c:	d7 03       	nop
8000eb6e:	d7 03       	nop
8000eb70:	d7 03       	nop
8000eb72:	d7 03       	nop
8000eb74:	d7 03       	nop
8000eb76:	d7 03       	nop
8000eb78:	d7 03       	nop
8000eb7a:	d7 03       	nop
8000eb7c:	d7 03       	nop
8000eb7e:	d7 03       	nop
8000eb80:	d7 03       	nop
8000eb82:	d7 03       	nop
8000eb84:	d7 03       	nop
8000eb86:	d7 03       	nop
8000eb88:	d7 03       	nop
8000eb8a:	d7 03       	nop
8000eb8c:	d7 03       	nop
8000eb8e:	d7 03       	nop
8000eb90:	d7 03       	nop
8000eb92:	d7 03       	nop
8000eb94:	d7 03       	nop
8000eb96:	d7 03       	nop
8000eb98:	d7 03       	nop
8000eb9a:	d7 03       	nop
8000eb9c:	d7 03       	nop
8000eb9e:	d7 03       	nop
8000eba0:	d7 03       	nop
8000eba2:	d7 03       	nop
8000eba4:	d7 03       	nop
8000eba6:	d7 03       	nop
8000eba8:	d7 03       	nop
8000ebaa:	d7 03       	nop
8000ebac:	d7 03       	nop
8000ebae:	d7 03       	nop
8000ebb0:	d7 03       	nop
8000ebb2:	d7 03       	nop
8000ebb4:	d7 03       	nop
8000ebb6:	d7 03       	nop
8000ebb8:	d7 03       	nop
8000ebba:	d7 03       	nop
8000ebbc:	d7 03       	nop
8000ebbe:	d7 03       	nop
8000ebc0:	d7 03       	nop
8000ebc2:	d7 03       	nop
8000ebc4:	d7 03       	nop
8000ebc6:	d7 03       	nop
8000ebc8:	d7 03       	nop
8000ebca:	d7 03       	nop
8000ebcc:	d7 03       	nop
8000ebce:	d7 03       	nop
8000ebd0:	d7 03       	nop
8000ebd2:	d7 03       	nop
8000ebd4:	d7 03       	nop
8000ebd6:	d7 03       	nop
8000ebd8:	d7 03       	nop
8000ebda:	d7 03       	nop
8000ebdc:	d7 03       	nop
8000ebde:	d7 03       	nop
8000ebe0:	d7 03       	nop
8000ebe2:	d7 03       	nop
8000ebe4:	d7 03       	nop
8000ebe6:	d7 03       	nop
8000ebe8:	d7 03       	nop
8000ebea:	d7 03       	nop
8000ebec:	d7 03       	nop
8000ebee:	d7 03       	nop
8000ebf0:	d7 03       	nop
8000ebf2:	d7 03       	nop
8000ebf4:	d7 03       	nop
8000ebf6:	d7 03       	nop
8000ebf8:	d7 03       	nop
8000ebfa:	d7 03       	nop
8000ebfc:	d7 03       	nop
8000ebfe:	d7 03       	nop
