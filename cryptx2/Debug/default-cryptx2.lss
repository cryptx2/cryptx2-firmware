
default-cryptx2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b280  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000d400  8000d400  0000d800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007c8  8000d600  8000d600  0000da00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000118  00000008  8000ddc8  0000e408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ac8  00000120  00000120  00000000  2**2
                  ALLOC
  8 .heap         0000e418  00000be8  00000be8  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000e520  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001110  00000000  00000000  0000e550  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00002384  00000000  00000000  0000f660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000235d7  00000000  00000000  000119e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fc8  00000000  00000000  00034fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006b93  00000000  00000000  00037f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003430  00000000  00000000  0003eb18  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009839  00000000  00000000  00041f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000052f0  00000000  00000000  0004b781  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 19 .debug_ranges 000010f8  00000000  00000000  00050a78  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	a1 e0       	*unknown*

Disassembly of section .text:

80002008 <random_lcg>:
volatile uint32_t var_W = 0xFFFFFFFF;
volatile uint32_t var_W_ticks = 0;
volatile uint256_t var_Salt;

uint32_t random_lcg (void)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
	rseed = (rseed * 1103515245 + 12345) & RAND_MAX;
8000200e:	48 a8       	lddpc	r8,80002034 <random_lcg+0x2c>
80002010:	70 09       	ld.w	r9,r8[0x0]
80002012:	e0 68 4e 6d 	mov	r8,20077
80002016:	ea 18 41 c6 	orh	r8,0x41c6
8000201a:	f2 08 02 48 	mul	r8,r9,r8
8000201e:	f0 c8 cf c7 	sub	r8,r8,-12345
80002022:	f3 d8 c0 1f 	bfextu	r9,r8,0x0,0x1f
80002026:	48 48       	lddpc	r8,80002034 <random_lcg+0x2c>
80002028:	91 09       	st.w	r8[0x0],r9
	return rseed;
8000202a:	48 38       	lddpc	r8,80002034 <random_lcg+0x2c>
8000202c:	70 08       	ld.w	r8,r8[0x0]
}
8000202e:	10 9c       	mov	r12,r8
80002030:	e3 cd 80 80 	ldm	sp++,r7,pc
80002034:	00 00       	add	r0,r0
80002036:	01 44       	ld.w	r4,--r0

80002038 <calculate_salt>:

//void random_256 ()

void calculate_salt(void)
{
80002038:	eb cd 40 80 	pushm	r7,lr
8000203c:	1a 97       	mov	r7,sp
8000203e:	20 1d       	sub	sp,4
	uint32_t random_value = 0;
80002040:	30 08       	mov	r8,0
80002042:	ef 48 ff fc 	st.w	r7[-4],r8
	calculate_hash(pass_code, 8, var_Hkey.index); // Calculates sha256 of the keys pressed in var_W*10 msec interval and stores it in var_Hkey
80002046:	49 68       	lddpc	r8,8000209c <calculate_salt+0x64>
80002048:	10 9a       	mov	r10,r8
8000204a:	30 8b       	mov	r11,8
8000204c:	49 5c       	lddpc	r12,800020a0 <calculate_salt+0x68>
8000204e:	f0 1f 00 16 	mcall	800020a4 <calculate_salt+0x6c>
 	
	random_value = random_lcg();	
80002052:	f0 1f 00 16 	mcall	800020a8 <calculate_salt+0x70>
80002056:	18 98       	mov	r8,r12
80002058:	ef 48 ff fc 	st.w	r7[-4],r8
	
	calculate_hash(&random_value, 1, var_R.index);
8000205c:	49 49       	lddpc	r9,800020ac <calculate_salt+0x74>
8000205e:	ee c8 00 04 	sub	r8,r7,4
80002062:	12 9a       	mov	r10,r9
80002064:	30 1b       	mov	r11,1
80002066:	10 9c       	mov	r12,r8
80002068:	f0 1f 00 0f 	mcall	800020a4 <calculate_salt+0x6c>
	
	XOR_256(var_R.index, var_Hkey.index);
8000206c:	48 c9       	lddpc	r9,8000209c <calculate_salt+0x64>
8000206e:	49 08       	lddpc	r8,800020ac <calculate_salt+0x74>
80002070:	12 9b       	mov	r11,r9
80002072:	10 9c       	mov	r12,r8
80002074:	f0 1f 00 0f 	mcall	800020b0 <calculate_salt+0x78>
	
	calculate_hash(var_R.index, 8, var_T.index);
80002078:	48 f9       	lddpc	r9,800020b4 <calculate_salt+0x7c>
8000207a:	48 d8       	lddpc	r8,800020ac <calculate_salt+0x74>
8000207c:	12 9a       	mov	r10,r9
8000207e:	30 8b       	mov	r11,8
80002080:	10 9c       	mov	r12,r8
80002082:	f0 1f 00 09 	mcall	800020a4 <calculate_salt+0x6c>
 	
	XOR_256(var_Salt.index, var_T.index);
80002086:	48 c9       	lddpc	r9,800020b4 <calculate_salt+0x7c>
80002088:	48 c8       	lddpc	r8,800020b8 <calculate_salt+0x80>
8000208a:	12 9b       	mov	r11,r9
8000208c:	10 9c       	mov	r12,r8
8000208e:	f0 1f 00 09 	mcall	800020b0 <calculate_salt+0x78>
		
	Start_W_timer();
80002092:	f0 1f 00 0b 	mcall	800020bc <calculate_salt+0x84>
}
80002096:	2f fd       	sub	sp,-4
80002098:	e3 cd 80 80 	ldm	sp++,r7,pc
8000209c:	00 00       	add	r0,r0
8000209e:	07 0c       	ld.w	r12,r3++
800020a0:	00 00       	add	r0,r0
800020a2:	01 20       	ld.uh	r0,r0++
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	21 68       	sub	r8,22
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	20 08       	sub	r8,0
800020ac:	00 00       	add	r0,r0
800020ae:	07 4c       	ld.w	r12,--r3
800020b0:	80 00       	ld.sh	r0,r0[0x0]
800020b2:	20 c0       	sub	r0,12
800020b4:	00 00       	add	r0,r0
800020b6:	07 2c       	ld.uh	r12,r3++
800020b8:	00 00       	add	r0,r0
800020ba:	07 6c       	ld.uh	r12,--r3
800020bc:	80 00       	ld.sh	r0,r0[0x0]
800020be:	21 24       	sub	r4,18

800020c0 <XOR_256>:

void XOR_256(uint32_t *value1, uint32_t *value2)
{
800020c0:	eb cd 40 80 	pushm	r7,lr
800020c4:	1a 97       	mov	r7,sp
800020c6:	20 3d       	sub	sp,12
800020c8:	ef 4c ff f8 	st.w	r7[-8],r12
800020cc:	ef 4b ff f4 	st.w	r7[-12],r11
	unsigned char i = 0;
800020d0:	30 08       	mov	r8,0
800020d2:	ef 68 ff ff 	st.b	r7[-1],r8
	while (i++ < 8)
800020d6:	c1 58       	rjmp	80002100 <XOR_256+0x40>
	{
		*value1 = *value1 ^ *value2;
800020d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020dc:	70 09       	ld.w	r9,r8[0x0]
800020de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800020e2:	70 08       	ld.w	r8,r8[0x0]
800020e4:	10 59       	eor	r9,r8
800020e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020ea:	91 09       	st.w	r8[0x0],r9
		value1++;	value2++;
800020ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020f0:	2f c8       	sub	r8,-4
800020f2:	ef 48 ff f8 	st.w	r7[-8],r8
800020f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800020fa:	2f c8       	sub	r8,-4
800020fc:	ef 48 ff f4 	st.w	r7[-12],r8
}

void XOR_256(uint32_t *value1, uint32_t *value2)
{
	unsigned char i = 0;
	while (i++ < 8)
80002100:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002104:	30 78       	mov	r8,7
80002106:	f0 09 18 00 	cp.b	r9,r8
8000210a:	5f 88       	srls	r8
8000210c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002110:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002114:	2f f8       	sub	r8,-1
80002116:	ef 68 ff ff 	st.b	r7[-1],r8
8000211a:	58 09       	cp.w	r9,0
8000211c:	cd e1       	brne	800020d8 <XOR_256+0x18>
	{
		*value1 = *value1 ^ *value2;
		value1++;	value2++;
	}
}
8000211e:	2f dd       	sub	sp,-12
80002120:	e3 cd 80 80 	ldm	sp++,r7,pc

80002124 <Start_W_timer>:

void Start_W_timer(void)
{
80002124:	eb cd 40 80 	pushm	r7,lr
80002128:	1a 97       	mov	r7,sp
	var_W = random_lcg() % 500 + 50;
8000212a:	f0 1f 00 0d 	mcall	8000215c <Start_W_timer+0x38>
8000212e:	18 9a       	mov	r10,r12
80002130:	e0 68 4d d3 	mov	r8,19923
80002134:	ea 18 10 62 	orh	r8,0x1062
80002138:	f4 08 06 48 	mulu.d	r8,r10,r8
8000213c:	f2 08 16 05 	lsr	r8,r9,0x5
80002140:	e0 69 01 f4 	mov	r9,500
80002144:	b3 38       	mul	r8,r9
80002146:	f4 08 01 08 	sub	r8,r10,r8
8000214a:	f0 c9 ff ce 	sub	r9,r8,-50
8000214e:	48 58       	lddpc	r8,80002160 <Start_W_timer+0x3c>
80002150:	91 09       	st.w	r8[0x0],r9
	var_W_ticks = 0;	
80002152:	48 58       	lddpc	r8,80002164 <Start_W_timer+0x40>
80002154:	30 09       	mov	r9,0
80002156:	91 09       	st.w	r8[0x0],r9
80002158:	e3 cd 80 80 	ldm	sp++,r7,pc
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	20 08       	sub	r8,0
80002160:	00 00       	add	r0,r0
80002162:	00 08       	add	r8,r0
80002164:	00 00       	add	r0,r0
80002166:	01 48       	ld.w	r8,--r0

80002168 <calculate_hash>:
unsigned long Rotate_right (unsigned long number, int bits);



 void calculate_hash (uint32_t *input_array, uint8_t length, uint32_t *output_array)
 {
80002168:	eb cd 40 c0 	pushm	r6-r7,lr
8000216c:	1a 97       	mov	r7,sp
8000216e:	20 ed       	sub	sp,56
80002170:	ef 4c ff d0 	st.w	r7[-48],r12
80002174:	16 98       	mov	r8,r11
80002176:	ef 4a ff c8 	st.w	r7[-56],r10
8000217a:	ef 68 ff cc 	st.b	r7[-52],r8
	 int i;
	 unsigned long int S0, S1;
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
8000217e:	fe f8 03 8a 	ld.w	r8,pc[906]
80002182:	ef 48 ff e0 	st.w	r7[-32],r8
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
80002186:	fe f8 03 86 	ld.w	r8,pc[902]
8000218a:	ef 48 ff ec 	st.w	r7[-20],r8
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
8000218e:	30 08       	mov	r8,0
80002190:	ef 48 ff d4 	st.w	r7[-44],r8
80002194:	c1 68       	rjmp	800021c0 <calculate_hash+0x58>
	 {
		 Key_ptr[i] = input_array[i];
80002196:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000219a:	a3 68       	lsl	r8,0x2
8000219c:	ee f9 ff e0 	ld.w	r9,r7[-32]
800021a0:	f2 08 00 08 	add	r8,r9,r8
800021a4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800021a8:	a3 69       	lsl	r9,0x2
800021aa:	ee fa ff d0 	ld.w	r10,r7[-48]
800021ae:	f4 09 00 09 	add	r9,r10,r9
800021b2:	72 09       	ld.w	r9,r9[0x0]
800021b4:	91 09       	st.w	r8[0x0],r9
	 //bool Input_type = ARRAY;
	 unsigned long int *Key_ptr = (uint32_t *)&Padded_Message[0];
	 unsigned long int *W, *M;
	 unsigned long int *chunk_ptr = (unsigned long int *)&chunk;
	 //strcpy((char *)Padded_Message, (const char *)CipherKey256);
	 for (i = 0; i < length; i++)
800021b6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800021ba:	2f f8       	sub	r8,-1
800021bc:	ef 48 ff d4 	st.w	r7[-44],r8
800021c0:	ef 39 ff cc 	ld.ub	r9,r7[-52]
800021c4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800021c8:	10 39       	cp.w	r9,r8
800021ca:	fe 99 ff e6 	brgt	80002196 <calculate_hash+0x2e>
	 {
		 Key_ptr[i] = input_array[i];
	 }
	 
	 PadtheMessage(length << 2);
800021ce:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800021d2:	a3 68       	lsl	r8,0x2
800021d4:	5c 58       	castu.b	r8
800021d6:	10 9c       	mov	r12,r8
800021d8:	f0 1f 00 ce 	mcall	80002510 <calculate_hash+0x3a8>
	 
	 
	 W = Message_Schedule_W;
800021dc:	fe f8 03 38 	ld.w	r8,pc[824]
800021e0:	ef 48 ff e4 	st.w	r7[-28],r8
	 M = (unsigned long int *)Padded_Message;
800021e4:	fe f8 03 24 	ld.w	r8,pc[804]
800021e8:	ef 48 ff e8 	st.w	r7[-24],r8
	 for (i = 0; i < 16; i++)
800021ec:	30 08       	mov	r8,0
800021ee:	ef 48 ff d4 	st.w	r7[-44],r8
800021f2:	c1 68       	rjmp	8000221e <calculate_hash+0xb6>
	 {
		W[i] = M[i];
800021f4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800021f8:	a3 68       	lsl	r8,0x2
800021fa:	ee f9 ff e4 	ld.w	r9,r7[-28]
800021fe:	f2 08 00 08 	add	r8,r9,r8
80002202:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002206:	a3 69       	lsl	r9,0x2
80002208:	ee fa ff e8 	ld.w	r10,r7[-24]
8000220c:	f4 09 00 09 	add	r9,r10,r9
80002210:	72 09       	ld.w	r9,r9[0x0]
80002212:	91 09       	st.w	r8[0x0],r9
	 PadtheMessage(length << 2);
	 
	 
	 W = Message_Schedule_W;
	 M = (unsigned long int *)Padded_Message;
	 for (i = 0; i < 16; i++)
80002214:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002218:	2f f8       	sub	r8,-1
8000221a:	ef 48 ff d4 	st.w	r7[-44],r8
8000221e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002222:	58 f8       	cp.w	r8,15
80002224:	fe 9a ff e8 	brle	800021f4 <calculate_hash+0x8c>
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
80002228:	31 08       	mov	r8,16
8000222a:	ef 48 ff d4 	st.w	r7[-44],r8
8000222e:	c7 58       	rjmp	80002318 <calculate_hash+0x1b0>
	 {
		 S0 = Rotate_right(Message_Schedule_W[i - 15], 7) XOR Rotate_right(Message_Schedule_W[i - 15], 18) XOR (Message_Schedule_W[i - 15] >> 3);
80002230:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002234:	f0 c9 00 0f 	sub	r9,r8,15
80002238:	fe f8 02 dc 	ld.w	r8,pc[732]
8000223c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002240:	30 7b       	mov	r11,7
80002242:	10 9c       	mov	r12,r8
80002244:	f0 1f 00 b5 	mcall	80002518 <calculate_hash+0x3b0>
80002248:	18 96       	mov	r6,r12
8000224a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000224e:	f0 c9 00 0f 	sub	r9,r8,15
80002252:	fe f8 02 c2 	ld.w	r8,pc[706]
80002256:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000225a:	31 2b       	mov	r11,18
8000225c:	10 9c       	mov	r12,r8
8000225e:	f0 1f 00 af 	mcall	80002518 <calculate_hash+0x3b0>
80002262:	18 98       	mov	r8,r12
80002264:	ed e8 20 09 	eor	r9,r6,r8
80002268:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000226c:	f0 ca 00 0f 	sub	r10,r8,15
80002270:	fe f8 02 a4 	ld.w	r8,pc[676]
80002274:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002278:	a3 98       	lsr	r8,0x3
8000227a:	f3 e8 20 08 	eor	r8,r9,r8
8000227e:	ef 48 ff d8 	st.w	r7[-40],r8
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
80002282:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002286:	f0 c9 00 02 	sub	r9,r8,2
8000228a:	fe f8 02 8a 	ld.w	r8,pc[650]
8000228e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002292:	31 1b       	mov	r11,17
80002294:	10 9c       	mov	r12,r8
80002296:	f0 1f 00 a1 	mcall	80002518 <calculate_hash+0x3b0>
8000229a:	18 96       	mov	r6,r12
8000229c:	ee f8 ff d4 	ld.w	r8,r7[-44]
800022a0:	f0 c9 00 02 	sub	r9,r8,2
800022a4:	fe f8 02 70 	ld.w	r8,pc[624]
800022a8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800022ac:	31 3b       	mov	r11,19
800022ae:	10 9c       	mov	r12,r8
800022b0:	f0 1f 00 9a 	mcall	80002518 <calculate_hash+0x3b0>
800022b4:	18 98       	mov	r8,r12
800022b6:	ed e8 20 09 	eor	r9,r6,r8
800022ba:	ee f8 ff d4 	ld.w	r8,r7[-44]
800022be:	f0 ca 00 02 	sub	r10,r8,2
800022c2:	fe f8 02 52 	ld.w	r8,pc[594]
800022c6:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800022ca:	ab 88       	lsr	r8,0xa
800022cc:	f3 e8 20 08 	eor	r8,r9,r8
800022d0:	ef 48 ff dc 	st.w	r7[-36],r8
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
800022d4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800022d8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800022dc:	f0 ca 00 10 	sub	r10,r8,16
800022e0:	fe f8 02 34 	ld.w	r8,pc[564]
800022e4:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800022e8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800022ec:	10 0a       	add	r10,r8
800022ee:	ee f8 ff d4 	ld.w	r8,r7[-44]
800022f2:	f0 cb 00 07 	sub	r11,r8,7
800022f6:	fe f8 02 1e 	ld.w	r8,pc[542]
800022fa:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
800022fe:	10 0a       	add	r10,r8
80002300:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002304:	10 0a       	add	r10,r8
80002306:	fe f8 02 0e 	ld.w	r8,pc[526]
8000230a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	 {
		W[i] = M[i];
	 }
	 //strncpy((char *)Message_Schedule_W, (const char *)Padded_Message, sizeof(Padded_Message));

	 for (i = 16; i < 64; i++)
8000230e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002312:	2f f8       	sub	r8,-1
80002314:	ef 48 ff d4 	st.w	r7[-44],r8
80002318:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000231c:	e0 48 00 3f 	cp.w	r8,63
80002320:	fe 9a ff 88 	brle	80002230 <calculate_hash+0xc8>
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
80002324:	30 08       	mov	r8,0
80002326:	ef 48 ff d4 	st.w	r7[-44],r8
8000232a:	c1 38       	rjmp	80002350 <calculate_hash+0x1e8>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
8000232c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002330:	a3 68       	lsl	r8,0x2
80002332:	ee f9 ff ec 	ld.w	r9,r7[-20]
80002336:	f2 08 00 08 	add	r8,r9,r8
8000233a:	ee fa ff d4 	ld.w	r10,r7[-44]
8000233e:	4f 89       	lddpc	r9,8000251c <calculate_hash+0x3b4>
80002340:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80002344:	91 09       	st.w	r8[0x0],r9
		 S1 = Rotate_right(Message_Schedule_W[i - 2], 17) XOR Rotate_right(Message_Schedule_W[i - 2], 19) XOR (Message_Schedule_W[i - 2] >> 10);
		 Message_Schedule_W[i] = Message_Schedule_W[i - 16] + S0 + Message_Schedule_W[i - 7] + S1;
	 }
	 
	 
	 for (i = 0; i < 8; i++)
80002346:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000234a:	2f f8       	sub	r8,-1
8000234c:	ef 48 ff d4 	st.w	r7[-44],r8
80002350:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002354:	58 78       	cp.w	r8,7
80002356:	fe 9a ff eb 	brle	8000232c <calculate_hash+0x1c4>
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
8000235a:	30 08       	mov	r8,0
8000235c:	ef 48 ff d4 	st.w	r7[-44],r8
80002360:	ca 68       	rjmp	800024ac <calculate_hash+0x344>
	 {
		 unsigned long int maj, t2, ch, t1;
		 S0 = Rotate_right(chunk.a, 2) XOR Rotate_right(chunk.a, 13) XOR Rotate_right(chunk.a, 22);
80002362:	4e b8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002364:	70 08       	ld.w	r8,r8[0x0]
80002366:	30 2b       	mov	r11,2
80002368:	10 9c       	mov	r12,r8
8000236a:	f0 1f 00 6c 	mcall	80002518 <calculate_hash+0x3b0>
8000236e:	18 96       	mov	r6,r12
80002370:	4e 78       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002372:	70 08       	ld.w	r8,r8[0x0]
80002374:	30 db       	mov	r11,13
80002376:	10 9c       	mov	r12,r8
80002378:	f0 1f 00 68 	mcall	80002518 <calculate_hash+0x3b0>
8000237c:	18 98       	mov	r8,r12
8000237e:	10 56       	eor	r6,r8
80002380:	4e 38       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002382:	70 08       	ld.w	r8,r8[0x0]
80002384:	31 6b       	mov	r11,22
80002386:	10 9c       	mov	r12,r8
80002388:	f0 1f 00 64 	mcall	80002518 <calculate_hash+0x3b0>
8000238c:	18 98       	mov	r8,r12
8000238e:	ed e8 20 08 	eor	r8,r6,r8
80002392:	ef 48 ff d8 	st.w	r7[-40],r8
		 maj = (chunk.a & chunk.b) XOR (chunk.a & chunk.c) XOR (chunk.b & chunk.c);
80002396:	4d e8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002398:	70 09       	ld.w	r9,r8[0x0]
8000239a:	4d d8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
8000239c:	70 18       	ld.w	r8,r8[0x4]
8000239e:	10 69       	and	r9,r8
800023a0:	4d b8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
800023a2:	70 0a       	ld.w	r10,r8[0x0]
800023a4:	4d a8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
800023a6:	70 28       	ld.w	r8,r8[0x8]
800023a8:	f5 e8 00 08 	and	r8,r10,r8
800023ac:	10 59       	eor	r9,r8
800023ae:	4d 88       	lddpc	r8,8000250c <calculate_hash+0x3a4>
800023b0:	70 1a       	ld.w	r10,r8[0x4]
800023b2:	4d 78       	lddpc	r8,8000250c <calculate_hash+0x3a4>
800023b4:	70 28       	ld.w	r8,r8[0x8]
800023b6:	f5 e8 00 08 	and	r8,r10,r8
800023ba:	f3 e8 20 08 	eor	r8,r9,r8
800023be:	ef 48 ff f0 	st.w	r7[-16],r8
		 t2 = S0 + maj;
800023c2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800023c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800023ca:	f2 08 00 08 	add	r8,r9,r8
800023ce:	ef 48 ff f4 	st.w	r7[-12],r8
		 S1 = Rotate_right(chunk.e, 6) XOR Rotate_right(chunk.e, 11) XOR Rotate_right(chunk.e, 25);
800023d2:	4c f8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
800023d4:	70 48       	ld.w	r8,r8[0x10]
800023d6:	30 6b       	mov	r11,6
800023d8:	10 9c       	mov	r12,r8
800023da:	f0 1f 00 50 	mcall	80002518 <calculate_hash+0x3b0>
800023de:	18 96       	mov	r6,r12
800023e0:	4c b8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
800023e2:	70 48       	ld.w	r8,r8[0x10]
800023e4:	30 bb       	mov	r11,11
800023e6:	10 9c       	mov	r12,r8
800023e8:	f0 1f 00 4c 	mcall	80002518 <calculate_hash+0x3b0>
800023ec:	18 98       	mov	r8,r12
800023ee:	10 56       	eor	r6,r8
800023f0:	4c 78       	lddpc	r8,8000250c <calculate_hash+0x3a4>
800023f2:	70 48       	ld.w	r8,r8[0x10]
800023f4:	31 9b       	mov	r11,25
800023f6:	10 9c       	mov	r12,r8
800023f8:	f0 1f 00 48 	mcall	80002518 <calculate_hash+0x3b0>
800023fc:	18 98       	mov	r8,r12
800023fe:	ed e8 20 08 	eor	r8,r6,r8
80002402:	ef 48 ff dc 	st.w	r7[-36],r8
		 ch = (chunk.e & chunk.f) XOR ((~chunk.e) & chunk.g);
80002406:	4c 28       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002408:	70 49       	ld.w	r9,r8[0x10]
8000240a:	4c 18       	lddpc	r8,8000250c <calculate_hash+0x3a4>
8000240c:	70 58       	ld.w	r8,r8[0x14]
8000240e:	10 69       	and	r9,r8
80002410:	4b f8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002412:	70 48       	ld.w	r8,r8[0x10]
80002414:	f0 0a 11 ff 	rsub	r10,r8,-1
80002418:	4b d8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
8000241a:	70 68       	ld.w	r8,r8[0x18]
8000241c:	f5 e8 00 08 	and	r8,r10,r8
80002420:	f3 e8 20 08 	eor	r8,r9,r8
80002424:	ef 48 ff f8 	st.w	r7[-8],r8
		 t1 = chunk.h + S1 + ch + Hash_Constant[i] + Message_Schedule_W[i];
80002428:	4b 98       	lddpc	r8,8000250c <calculate_hash+0x3a4>
8000242a:	70 79       	ld.w	r9,r8[0x1c]
8000242c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002430:	10 09       	add	r9,r8
80002432:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002436:	10 09       	add	r9,r8
80002438:	ee fa ff d4 	ld.w	r10,r7[-44]
8000243c:	4b 98       	lddpc	r8,80002520 <calculate_hash+0x3b8>
8000243e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002442:	10 09       	add	r9,r8
80002444:	ee fa ff d4 	ld.w	r10,r7[-44]
80002448:	4b 38       	lddpc	r8,80002514 <calculate_hash+0x3ac>
8000244a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000244e:	f2 08 00 08 	add	r8,r9,r8
80002452:	ef 48 ff fc 	st.w	r7[-4],r8
		 
		 chunk.h = chunk.g;
80002456:	4a e8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002458:	70 69       	ld.w	r9,r8[0x18]
8000245a:	4a d8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
8000245c:	91 79       	st.w	r8[0x1c],r9
		 chunk.g = chunk.f;
8000245e:	4a c8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002460:	70 59       	ld.w	r9,r8[0x14]
80002462:	4a b8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002464:	91 69       	st.w	r8[0x18],r9
		 chunk.f = chunk.e;
80002466:	4a a8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002468:	70 49       	ld.w	r9,r8[0x10]
8000246a:	4a 98       	lddpc	r8,8000250c <calculate_hash+0x3a4>
8000246c:	91 59       	st.w	r8[0x14],r9
		 chunk.e = chunk.d + t1;
8000246e:	4a 88       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002470:	70 39       	ld.w	r9,r8[0xc]
80002472:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002476:	10 09       	add	r9,r8
80002478:	4a 58       	lddpc	r8,8000250c <calculate_hash+0x3a4>
8000247a:	91 49       	st.w	r8[0x10],r9
		 chunk.d = chunk.c;
8000247c:	4a 48       	lddpc	r8,8000250c <calculate_hash+0x3a4>
8000247e:	70 29       	ld.w	r9,r8[0x8]
80002480:	4a 38       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002482:	91 39       	st.w	r8[0xc],r9
		 chunk.c = chunk.b;
80002484:	4a 28       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002486:	70 19       	ld.w	r9,r8[0x4]
80002488:	4a 18       	lddpc	r8,8000250c <calculate_hash+0x3a4>
8000248a:	91 29       	st.w	r8[0x8],r9
		 chunk.b = chunk.a;
8000248c:	4a 08       	lddpc	r8,8000250c <calculate_hash+0x3a4>
8000248e:	70 09       	ld.w	r9,r8[0x0]
80002490:	49 f8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
80002492:	91 19       	st.w	r8[0x4],r9
		 chunk.a = t1 + t2;
80002494:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002498:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000249c:	10 09       	add	r9,r8
8000249e:	49 c8       	lddpc	r8,8000250c <calculate_hash+0x3a4>
800024a0:	91 09       	st.w	r8[0x0],r9
	 for (i = 0; i < 8; i++)
	 {
		 chunk_ptr[i] = Initial_Hash[i];
	 }
	 
	 for (i = 0; i < 64; i++)
800024a2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800024a6:	2f f8       	sub	r8,-1
800024a8:	ef 48 ff d4 	st.w	r7[-44],r8
800024ac:	ee f8 ff d4 	ld.w	r8,r7[-44]
800024b0:	e0 48 00 3f 	cp.w	r8,63
800024b4:	fe 9a ff 57 	brle	80002362 <calculate_hash+0x1fa>
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
800024b8:	30 08       	mov	r8,0
800024ba:	ef 48 ff d4 	st.w	r7[-44],r8
800024be:	c1 d8       	rjmp	800024f8 <calculate_hash+0x390>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
800024c0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800024c4:	a3 68       	lsl	r8,0x2
800024c6:	ee f9 ff c8 	ld.w	r9,r7[-56]
800024ca:	f2 08 00 08 	add	r8,r9,r8
800024ce:	ee fa ff d4 	ld.w	r10,r7[-44]
800024d2:	49 39       	lddpc	r9,8000251c <calculate_hash+0x3b4>
800024d4:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
800024d8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800024dc:	a3 69       	lsl	r9,0x2
800024de:	ee fb ff ec 	ld.w	r11,r7[-20]
800024e2:	f6 09 00 09 	add	r9,r11,r9
800024e6:	72 09       	ld.w	r9,r9[0x0]
800024e8:	f4 09 00 09 	add	r9,r10,r9
800024ec:	91 09       	st.w	r8[0x0],r9
		 chunk.c = chunk.b;
		 chunk.b = chunk.a;
		 chunk.a = t1 + t2;
	 }

	 for (i = 0; i < 8; i++)
800024ee:	ee f8 ff d4 	ld.w	r8,r7[-44]
800024f2:	2f f8       	sub	r8,-1
800024f4:	ef 48 ff d4 	st.w	r7[-44],r8
800024f8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800024fc:	58 78       	cp.w	r8,7
800024fe:	fe 9a ff e1 	brle	800024c0 <calculate_hash+0x358>
	 {
		 output_array[i] = Initial_Hash[i] + chunk_ptr[i];
	 }
 }
80002502:	2f 2d       	sub	sp,-56
80002504:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002508:	00 00       	add	r0,r0
8000250a:	01 4c       	ld.w	r12,--r0
8000250c:	00 00       	add	r0,r0
8000250e:	07 8c       	ld.ub	r12,r3[0x0]
80002510:	80 00       	ld.sh	r0,r0[0x0]
80002512:	25 24       	sub	r4,82
80002514:	00 00       	add	r0,r0
80002516:	01 8c       	ld.ub	r12,r0[0x0]
80002518:	80 00       	ld.sh	r0,r0[0x0]
8000251a:	25 9c       	sub	r12,89
8000251c:	80 00       	ld.sh	r0,r0[0x0]
8000251e:	d6 20       	acall	0x188
80002520:	80 00       	ld.sh	r0,r0[0x0]
80002522:	d6 40       	acall	0x190

80002524 <PadtheMessage>:


 void PadtheMessage(uint8_t message_length)
 {
80002524:	eb cd 40 80 	pushm	r7,lr
80002528:	1a 97       	mov	r7,sp
8000252a:	20 3d       	sub	sp,12
8000252c:	18 98       	mov	r8,r12
8000252e:	ef 68 ff f4 	st.b	r7[-12],r8
	 unsigned char i;
	 unsigned short int message_length_bits;
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];
80002532:	49 a8       	lddpc	r8,80002598 <PadtheMessage+0x74>
80002534:	ef 48 ff fc 	st.w	r7[-4],r8

	 message_length_bits = message_length << 3;
80002538:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000253c:	a3 78       	lsl	r8,0x3
8000253e:	ef 58 ff fa 	st.h	r7[-6],r8
	 Padded_Message[message_length++] = 0x80;
80002542:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002546:	49 5a       	lddpc	r10,80002598 <PadtheMessage+0x74>
80002548:	38 08       	mov	r8,-128
8000254a:	f4 09 0b 08 	st.b	r10[r9],r8
8000254e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002552:	2f f8       	sub	r8,-1
80002554:	ef 68 ff f4 	st.b	r7[-12],r8

	 for (i = message_length; i < 64; i++)
80002558:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000255c:	ef 68 ff f9 	st.b	r7[-7],r8
80002560:	c0 c8       	rjmp	80002578 <PadtheMessage+0x54>
	 {
		Padded_Message[i] = 0x00;
80002562:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80002566:	48 da       	lddpc	r10,80002598 <PadtheMessage+0x74>
80002568:	30 08       	mov	r8,0
8000256a:	f4 09 0b 08 	st.b	r10[r9],r8
	 unsigned long int *ptrPadded_Message = (unsigned long int *)&Padded_Message[0];

	 message_length_bits = message_length << 3;
	 Padded_Message[message_length++] = 0x80;

	 for (i = message_length; i < 64; i++)
8000256e:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80002572:	2f f8       	sub	r8,-1
80002574:	ef 68 ff f9 	st.b	r7[-7],r8
80002578:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000257c:	33 f8       	mov	r8,63
8000257e:	f0 09 18 00 	cp.b	r9,r8
80002582:	fe 98 ff f0 	brls	80002562 <PadtheMessage+0x3e>
	 {
		Padded_Message[i] = 0x00;
	 }

	 //ptrPadded_Message = (unsigned long int *)&Padded_Message[60];
	 ptrPadded_Message[15] = (unsigned long int)message_length_bits;
80002586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000258a:	2c 48       	sub	r8,-60
8000258c:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80002590:	91 09       	st.w	r8[0x0],r9
	 //Padded_Message[62] = *((unsigned char *)&message_length_bits);
	 //Padded_Message[63] = *((unsigned char *)&message_length_bits + 1);
 }
80002592:	2f dd       	sub	sp,-12
80002594:	e3 cd 80 80 	ldm	sp++,r7,pc
80002598:	00 00       	add	r0,r0
8000259a:	01 4c       	ld.w	r12,--r0

8000259c <Rotate_right>:

 unsigned long int Rotate_right (unsigned long int number, int bits)
 {
8000259c:	eb cd 40 80 	pushm	r7,lr
800025a0:	1a 97       	mov	r7,sp
800025a2:	20 3d       	sub	sp,12
800025a4:	ef 4c ff f8 	st.w	r7[-8],r12
800025a8:	ef 4b ff f4 	st.w	r7[-12],r11
	 unsigned long int bit_mask = ((unsigned long int)2 << bits) - 1;
800025ac:	30 29       	mov	r9,2
800025ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800025b2:	f2 08 09 48 	lsl	r8,r9,r8
800025b6:	20 18       	sub	r8,1
800025b8:	ef 48 ff fc 	st.w	r7[-4],r8
	 return ((number >> bits) | ((number & bit_mask) << (32 - bits)));
800025bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800025c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800025c4:	f2 08 0a 49 	lsr	r9,r9,r8
800025c8:	ee fa ff f8 	ld.w	r10,r7[-8]
800025cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025d0:	10 6a       	and	r10,r8
800025d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800025d6:	f0 08 11 20 	rsub	r8,r8,32
800025da:	f4 08 09 48 	lsl	r8,r10,r8
800025de:	f3 e8 10 08 	or	r8,r9,r8
 }
800025e2:	10 9c       	mov	r12,r8
800025e4:	2f dd       	sub	sp,-12
800025e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800025ea <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
800025ea:	eb cd 40 80 	pushm	r7,lr
800025ee:	1a 97       	mov	r7,sp
800025f0:	20 1d       	sub	sp,4
800025f2:	18 98       	mov	r8,r12
800025f4:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
800025f8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800025fc:	58 18       	cp.w	r8,1
800025fe:	c0 a0       	breq	80002612 <osc_get_rate+0x28>
80002600:	58 28       	cp.w	r8,2
80002602:	c0 d0       	breq	8000261c <osc_get_rate+0x32>
80002604:	58 08       	cp.w	r8,0
80002606:	c0 e1       	brne	80002622 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80002608:	e0 68 1b 00 	mov	r8,6912
8000260c:	ea 18 00 b7 	orh	r8,0xb7
80002610:	c0 a8       	rjmp	80002624 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
80002612:	e0 68 44 00 	mov	r8,17408
80002616:	ea 18 00 ac 	orh	r8,0xac
8000261a:	c0 58       	rjmp	80002624 <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000261c:	e0 68 80 00 	mov	r8,32768
80002620:	c0 28       	rjmp	80002624 <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
80002622:	30 08       	mov	r8,0
	}
}
80002624:	10 9c       	mov	r12,r8
80002626:	2f fd       	sub	sp,-4
80002628:	e3 cd 80 80 	ldm	sp++,r7,pc

8000262c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000262c:	eb cd 40 80 	pushm	r7,lr
80002630:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80002632:	30 0c       	mov	r12,0
80002634:	f0 1f 00 06 	mcall	8000264c <sysclk_get_main_hz+0x20>
80002638:	18 99       	mov	r9,r12
8000263a:	12 98       	mov	r8,r9
8000263c:	a3 68       	lsl	r8,0x2
8000263e:	12 08       	add	r8,r9
80002640:	a1 78       	lsl	r8,0x1
80002642:	12 08       	add	r8,r9
80002644:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80002646:	10 9c       	mov	r12,r8
80002648:	e3 cd 80 80 	ldm	sp++,r7,pc
8000264c:	80 00       	ld.sh	r0,r0[0x0]
8000264e:	25 ea       	sub	r10,94

80002650 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
80002650:	eb cd 40 80 	pushm	r7,lr
80002654:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
80002656:	f0 1f 00 04 	mcall	80002664 <sysclk_get_pba_hz+0x14>
8000265a:	18 98       	mov	r8,r12
}
8000265c:	10 9c       	mov	r12,r8
8000265e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002662:	00 00       	add	r0,r0
80002664:	80 00       	ld.sh	r0,r0[0x0]
80002666:	26 2c       	sub	r12,98

80002668 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
80002668:	eb cd 40 80 	pushm	r7,lr
8000266c:	1a 97       	mov	r7,sp
8000266e:	20 1d       	sub	sp,4
80002670:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80002674:	ee fb ff fc 	ld.w	r11,r7[-4]
80002678:	30 1c       	mov	r12,1
8000267a:	f0 1f 00 03 	mcall	80002684 <sysclk_enable_hsb_module+0x1c>
}
8000267e:	2f fd       	sub	sp,-4
80002680:	e3 cd 80 80 	ldm	sp++,r7,pc
80002684:	80 00       	ld.sh	r0,r0[0x0]
80002686:	a8 a0       	st.b	r4[0x2],r0

80002688 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80002688:	eb cd 40 80 	pushm	r7,lr
8000268c:	1a 97       	mov	r7,sp
8000268e:	20 1d       	sub	sp,4
80002690:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80002694:	ee fb ff fc 	ld.w	r11,r7[-4]
80002698:	30 2c       	mov	r12,2
8000269a:	f0 1f 00 03 	mcall	800026a4 <sysclk_enable_pba_module+0x1c>
}
8000269e:	2f fd       	sub	sp,-4
800026a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800026a4:	80 00       	ld.sh	r0,r0[0x0]
800026a6:	a8 a0       	st.b	r4[0x2],r0

800026a8 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
800026a8:	eb cd 40 80 	pushm	r7,lr
800026ac:	1a 97       	mov	r7,sp
800026ae:	20 1d       	sub	sp,4
800026b0:	ef 4c ff fc 	st.w	r7[-4],r12
	switch ((uintptr_t)module) {
800026b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026b8:	fe 58 14 00 	cp.w	r8,-60416
800026bc:	e0 80 00 a5 	breq	80002806 <sysclk_enable_peripheral_clock+0x15e>
800026c0:	e0 8b 00 40 	brhi	80002740 <sysclk_enable_peripheral_clock+0x98>
800026c4:	fe 48 24 00 	cp.w	r8,-121856
800026c8:	e0 80 00 d9 	breq	8000287a <sysclk_enable_peripheral_clock+0x1d2>
800026cc:	e0 8b 00 1e 	brhi	80002708 <sysclk_enable_peripheral_clock+0x60>
800026d0:	fe 48 10 00 	cp.w	r8,-126976
800026d4:	e0 80 00 b9 	breq	80002846 <sysclk_enable_peripheral_clock+0x19e>
800026d8:	e0 8b 00 0b 	brhi	800026ee <sysclk_enable_peripheral_clock+0x46>
800026dc:	fc 58 00 00 	cp.w	r8,-196608
800026e0:	e0 80 00 e0 	breq	800028a0 <sysclk_enable_peripheral_clock+0x1f8>
800026e4:	fe 48 00 00 	cp.w	r8,-131072
800026e8:	e0 80 00 b3 	breq	8000284e <sysclk_enable_peripheral_clock+0x1a6>
		break;
#endif

	default:
		Assert(false);
		return;
800026ec:	cd e8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800026ee:	fe 48 1c 00 	cp.w	r8,-123904
800026f2:	e0 80 00 bc 	breq	8000286a <sysclk_enable_peripheral_clock+0x1c2>
800026f6:	fe 48 20 00 	cp.w	r8,-122880
800026fa:	e0 80 00 bc 	breq	80002872 <sysclk_enable_peripheral_clock+0x1ca>
800026fe:	fe 48 14 00 	cp.w	r8,-125952
80002702:	e0 80 00 ad 	breq	8000285c <sysclk_enable_peripheral_clock+0x1b4>
		break;
#endif

	default:
		Assert(false);
		return;
80002706:	cd 18       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80002708:	fe 58 00 00 	cp.w	r8,-65536
8000270c:	c5 60       	breq	800027b8 <sysclk_enable_peripheral_clock+0x110>
8000270e:	e0 8b 00 0f 	brhi	8000272c <sysclk_enable_peripheral_clock+0x84>
80002712:	fe 48 40 00 	cp.w	r8,-114688
80002716:	e0 80 00 b6 	breq	80002882 <sysclk_enable_peripheral_clock+0x1da>
8000271a:	fe 48 80 00 	cp.w	r8,-98304
8000271e:	e0 80 00 bd 	breq	80002898 <sysclk_enable_peripheral_clock+0x1f0>
80002722:	fe 48 28 00 	cp.w	r8,-120832
80002726:	e0 80 00 b2 	breq	8000288a <sysclk_enable_peripheral_clock+0x1e2>
		break;
#endif

	default:
		Assert(false);
		return;
8000272a:	cb f8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000272c:	fe 58 0c 00 	cp.w	r8,-62464
80002730:	c4 b0       	breq	800027c6 <sysclk_enable_peripheral_clock+0x11e>
80002732:	fe 58 10 00 	cp.w	r8,-61440
80002736:	c3 d0       	breq	800027b0 <sysclk_enable_peripheral_clock+0x108>
80002738:	fe 58 08 00 	cp.w	r8,-63488
8000273c:	c3 60       	breq	800027a8 <sysclk_enable_peripheral_clock+0x100>
		break;
#endif

	default:
		Assert(false);
		return;
8000273e:	cb 58       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80002740:	fe 58 30 00 	cp.w	r8,-53248
80002744:	c5 50       	breq	800027ee <sysclk_enable_peripheral_clock+0x146>
80002746:	e0 8b 00 18 	brhi	80002776 <sysclk_enable_peripheral_clock+0xce>
8000274a:	fe 58 20 00 	cp.w	r8,-57344
8000274e:	c6 80       	breq	8000281e <sysclk_enable_peripheral_clock+0x176>
80002750:	e0 8b 00 09 	brhi	80002762 <sysclk_enable_peripheral_clock+0xba>
80002754:	fe 58 18 00 	cp.w	r8,-59392
80002758:	c5 b0       	breq	8000280e <sysclk_enable_peripheral_clock+0x166>
8000275a:	fe 58 1c 00 	cp.w	r8,-58368
8000275e:	c5 c0       	breq	80002816 <sysclk_enable_peripheral_clock+0x16e>
		break;
#endif

	default:
		Assert(false);
		return;
80002760:	ca 48       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80002762:	fe 58 28 00 	cp.w	r8,-55296
80002766:	c3 c0       	breq	800027de <sysclk_enable_peripheral_clock+0x136>
80002768:	fe 58 2c 00 	cp.w	r8,-54272
8000276c:	c3 d0       	breq	800027e6 <sysclk_enable_peripheral_clock+0x13e>
8000276e:	fe 58 24 00 	cp.w	r8,-56320
80002772:	c3 20       	breq	800027d6 <sysclk_enable_peripheral_clock+0x12e>
		break;
#endif

	default:
		Assert(false);
		return;
80002774:	c9 a8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80002776:	fe 58 40 00 	cp.w	r8,-49152
8000277a:	c6 20       	breq	8000283e <sysclk_enable_peripheral_clock+0x196>
8000277c:	e0 8b 00 0c 	brhi	80002794 <sysclk_enable_peripheral_clock+0xec>
80002780:	fe 58 38 00 	cp.w	r8,-51200
80002784:	c5 50       	breq	8000282e <sysclk_enable_peripheral_clock+0x186>
80002786:	fe 58 3c 00 	cp.w	r8,-50176
8000278a:	c2 20       	breq	800027ce <sysclk_enable_peripheral_clock+0x126>
8000278c:	fe 58 34 00 	cp.w	r8,-52224
80002790:	c4 b0       	breq	80002826 <sysclk_enable_peripheral_clock+0x17e>
		break;
#endif

	default:
		Assert(false);
		return;
80002792:	c8 b8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80002794:	fe 58 50 00 	cp.w	r8,-45056
80002798:	c2 f0       	breq	800027f6 <sysclk_enable_peripheral_clock+0x14e>
8000279a:	fe 58 54 00 	cp.w	r8,-44032
8000279e:	c3 00       	breq	800027fe <sysclk_enable_peripheral_clock+0x156>
800027a0:	fe 58 44 00 	cp.w	r8,-48128
800027a4:	c4 90       	breq	80002836 <sysclk_enable_peripheral_clock+0x18e>
		break;
#endif

	default:
		Assert(false);
		return;
800027a6:	c8 18       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
	case AVR32_INTC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_INTC);
800027a8:	30 0c       	mov	r12,0
800027aa:	f0 1f 00 42 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800027ae:	c7 d8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_GPIO_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_GPIO);
800027b0:	30 1c       	mov	r12,1
800027b2:	f0 1f 00 40 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800027b6:	c7 98       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PDCA_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
800027b8:	30 4c       	mov	r12,4
800027ba:	f0 1f 00 3f 	mcall	800028b4 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pba_module(SYSCLK_PDCA_PB);
800027be:	30 2c       	mov	r12,2
800027c0:	f0 1f 00 3c 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800027c4:	c7 28       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PM);
800027c6:	30 3c       	mov	r12,3
800027c8:	f0 1f 00 3a 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800027cc:	c6 e8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ADC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ADC);
800027ce:	30 4c       	mov	r12,4
800027d0:	f0 1f 00 38 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800027d4:	c6 a8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI0);
800027d6:	30 5c       	mov	r12,5
800027d8:	f0 1f 00 36 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800027dc:	c6 68       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
800027de:	30 6c       	mov	r12,6
800027e0:	f0 1f 00 34 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800027e4:	c6 28       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
800027e6:	30 7c       	mov	r12,7
800027e8:	f0 1f 00 32 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800027ec:	c5 e8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
800027ee:	30 8c       	mov	r12,8
800027f0:	f0 1f 00 30 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800027f4:	c5 a8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
800027f6:	30 9c       	mov	r12,9
800027f8:	f0 1f 00 2e 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
800027fc:	c5 68       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
800027fe:	30 ac       	mov	r12,10
80002800:	f0 1f 00 2c 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
80002804:	c5 28       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART0);
80002806:	30 bc       	mov	r12,11
80002808:	f0 1f 00 2a 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
8000280c:	c4 e8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART1);
8000280e:	30 cc       	mov	r12,12
80002810:	f0 1f 00 28 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
80002814:	c4 a8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART2_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
80002816:	30 dc       	mov	r12,13
80002818:	f0 1f 00 26 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
8000281c:	c4 68       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART3_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART3);
8000281e:	30 ec       	mov	r12,14
80002820:	f0 1f 00 24 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
80002824:	c4 28       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SSC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SSC);
80002826:	30 fc       	mov	r12,15
80002828:	f0 1f 00 22 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
8000282c:	c3 e8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC0);
8000282e:	31 0c       	mov	r12,16
80002830:	f0 1f 00 20 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
80002834:	c3 a8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC1);
80002836:	31 1c       	mov	r12,17
80002838:	f0 1f 00 1e 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
8000283c:	c3 68       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ABDAC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DAC);
8000283e:	31 2c       	mov	r12,18
80002840:	f0 1f 00 1c 	mcall	800028b0 <sysclk_enable_peripheral_clock+0x208>
		break;
80002844:	c3 28       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_HMATRIX_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
80002846:	30 0c       	mov	r12,0
80002848:	f0 1f 00 1c 	mcall	800028b8 <sysclk_enable_peripheral_clock+0x210>
		break;
8000284c:	c2 e8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USBB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000284e:	30 3c       	mov	r12,3
80002850:	f0 1f 00 19 	mcall	800028b4 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80002854:	30 1c       	mov	r12,1
80002856:	f0 1f 00 19 	mcall	800028b8 <sysclk_enable_peripheral_clock+0x210>
		break;
8000285a:	c2 78       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_FLASHC_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_FLASHC_DATA);
8000285c:	30 0c       	mov	r12,0
8000285e:	f0 1f 00 16 	mcall	800028b4 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_FLASHC_REGS);
80002862:	30 2c       	mov	r12,2
80002864:	f0 1f 00 15 	mcall	800028b8 <sysclk_enable_peripheral_clock+0x210>
		break;
80002868:	c2 08       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SMC_REGS);
8000286a:	30 3c       	mov	r12,3
8000286c:	f0 1f 00 13 	mcall	800028b8 <sysclk_enable_peripheral_clock+0x210>
		break;
80002870:	c1 c8       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SDRAMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SDRAMC_REGS);
80002872:	30 4c       	mov	r12,4
80002874:	f0 1f 00 11 	mcall	800028b8 <sysclk_enable_peripheral_clock+0x210>
		break;
80002878:	c1 88       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ECCHRS_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_ECC);
8000287a:	30 5c       	mov	r12,5
8000287c:	f0 1f 00 0f 	mcall	800028b8 <sysclk_enable_peripheral_clock+0x210>
		break;
80002880:	c1 48       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MCI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MCI);
80002882:	30 6c       	mov	r12,6
80002884:	f0 1f 00 0d 	mcall	800028b8 <sysclk_enable_peripheral_clock+0x210>
		break;
80002888:	c1 08       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_BUSMON_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_BUSMON_HSB);
8000288a:	30 8c       	mov	r12,8
8000288c:	f0 1f 00 0a 	mcall	800028b4 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_BUSMON);
80002890:	30 7c       	mov	r12,7
80002892:	f0 1f 00 0a 	mcall	800028b8 <sysclk_enable_peripheral_clock+0x210>
		break;
80002896:	c0 98       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MSI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MSI);
80002898:	30 8c       	mov	r12,8
8000289a:	f0 1f 00 08 	mcall	800028b8 <sysclk_enable_peripheral_clock+0x210>
		break;
8000289e:	c0 58       	rjmp	800028a8 <sysclk_enable_peripheral_clock+0x200>

#if defined(AVR32_AES_ADDRESS)
	case AVR32_AES_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_AES);
800028a0:	30 9c       	mov	r12,9
800028a2:	f0 1f 00 06 	mcall	800028b8 <sysclk_enable_peripheral_clock+0x210>
		break;
800028a6:	d7 03       	nop

	default:
		Assert(false);
		return;
	}
}
800028a8:	2f fd       	sub	sp,-4
800028aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800028ae:	00 00       	add	r0,r0
800028b0:	80 00       	ld.sh	r0,r0[0x0]
800028b2:	26 88       	sub	r8,104
800028b4:	80 00       	ld.sh	r0,r0[0x0]
800028b6:	26 68       	sub	r8,102
800028b8:	80 00       	ld.sh	r0,r0[0x0]
800028ba:	a9 14       	ld.d	r4,--r4

800028bc <tc_irq>:
 * The ISR handles RC compare interrupt and sets the update_timer flag to
 * update the timer value.
 */
__attribute__((__interrupt__))
static void tc_irq(void)
{
800028bc:	eb cd 40 80 	pushm	r7,lr
800028c0:	1a 97       	mov	r7,sp
	// Increment the ms seconds counter
	tc_tick++;
800028c2:	4a 88       	lddpc	r8,80002960 <tc_irq+0xa4>
800028c4:	70 08       	ld.w	r8,r8[0x0]
800028c6:	f0 c9 ff ff 	sub	r9,r8,-1
800028ca:	4a 68       	lddpc	r8,80002960 <tc_irq+0xa4>
800028cc:	91 09       	st.w	r8[0x0],r9
	/*
	 * TODO: Place a breakpoint here and watch the update of tc_tick variable
	 * in the Watch Window.
	 */
	if (tc_tick == 500)
800028ce:	4a 58       	lddpc	r8,80002960 <tc_irq+0xa4>
800028d0:	70 08       	ld.w	r8,r8[0x0]
800028d2:	e0 48 01 f4 	cp.w	r8,500
800028d6:	c0 51       	brne	800028e0 <tc_irq+0x24>
	{
		tc_tick = 500;
800028d8:	4a 28       	lddpc	r8,80002960 <tc_irq+0xa4>
800028da:	e0 69 01 f4 	mov	r9,500
800028de:	91 09       	st.w	r8[0x0],r9
	}
	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
800028e0:	30 0b       	mov	r11,0
800028e2:	fe 7c 38 00 	mov	r12,-51200
800028e6:	f0 1f 00 20 	mcall	80002964 <tc_irq+0xa8>

	if ((check_all_buttons_high() == true) && (button_released == false))
800028ea:	f0 1f 00 20 	mcall	80002968 <tc_irq+0xac>
800028ee:	18 98       	mov	r8,r12
800028f0:	58 08       	cp.w	r8,0
800028f2:	c0 b0       	breq	80002908 <tc_irq+0x4c>
800028f4:	49 e8       	lddpc	r8,8000296c <tc_irq+0xb0>
800028f6:	11 88       	ld.ub	r8,r8[0x0]
800028f8:	5c 58       	castu.b	r8
800028fa:	ec 18 00 01 	eorl	r8,0x1
800028fe:	5c 58       	castu.b	r8
80002900:	c0 40       	breq	80002908 <tc_irq+0x4c>
	{
		button_released = true;
80002902:	49 b9       	lddpc	r9,8000296c <tc_irq+0xb0>
80002904:	30 18       	mov	r8,1
80002906:	b2 88       	st.b	r9[0x0],r8
		//{
			//inter_key_delay = DISABLED;
			//delay_counter = 0;
		//}
	//}
	if (button_pressed() == ENTER_BUTTON)
80002908:	f0 1f 00 1a 	mcall	80002970 <tc_irq+0xb4>
8000290c:	18 98       	mov	r8,r12
8000290e:	10 99       	mov	r9,r8
80002910:	30 28       	mov	r8,2
80002912:	f0 09 18 00 	cp.b	r9,r8
80002916:	c0 61       	brne	80002922 <tc_irq+0x66>
	{
		enter_pressed = true;
80002918:	49 79       	lddpc	r9,80002974 <tc_irq+0xb8>
8000291a:	30 18       	mov	r8,1
8000291c:	b2 88       	st.b	r9[0x0],r8
		calculate_salt();
8000291e:	f0 1f 00 17 	mcall	80002978 <tc_irq+0xbc>
	}

	if (!enter_pressed)
80002922:	49 58       	lddpc	r8,80002974 <tc_irq+0xb8>
80002924:	11 88       	ld.ub	r8,r8[0x0]
80002926:	5c 58       	castu.b	r8
80002928:	ec 18 00 01 	eorl	r8,0x1
8000292c:	5c 58       	castu.b	r8
8000292e:	c1 00       	breq	8000294e <tc_irq+0x92>
	{
		if (var_W_ticks++ > var_W)
80002930:	49 38       	lddpc	r8,8000297c <tc_irq+0xc0>
80002932:	70 08       	ld.w	r8,r8[0x0]
80002934:	49 39       	lddpc	r9,80002980 <tc_irq+0xc4>
80002936:	72 09       	ld.w	r9,r9[0x0]
80002938:	12 38       	cp.w	r8,r9
8000293a:	5f b9       	srhi	r9
8000293c:	5c 59       	castu.b	r9
8000293e:	f0 ca ff ff 	sub	r10,r8,-1
80002942:	48 f8       	lddpc	r8,8000297c <tc_irq+0xc0>
80002944:	91 0a       	st.w	r8[0x0],r10
80002946:	58 09       	cp.w	r9,0
80002948:	c0 30       	breq	8000294e <tc_irq+0x92>
		{
			calculate_salt();
8000294a:	f0 1f 00 0c 	mcall	80002978 <tc_irq+0xbc>
		}		
	}

	// specify that an interrupt has been raised
	update_timer = true;
8000294e:	48 e9       	lddpc	r9,80002984 <tc_irq+0xc8>
80002950:	30 18       	mov	r8,1
80002952:	b2 88       	st.b	r9[0x0],r8
	// Toggle the GPIO line
	gpio_tgl_gpio_pin(EXAMPLE_TOGGLE_PIN);
80002954:	30 3c       	mov	r12,3
80002956:	f0 1f 00 0d 	mcall	80002988 <tc_irq+0xcc>
}
8000295a:	e3 cd 40 80 	ldm	sp++,r7,lr
8000295e:	d6 03       	rete
80002960:	00 00       	add	r0,r0
80002962:	02 8c       	andn	r12,r1
80002964:	80 00       	ld.sh	r0,r0[0x0]
80002966:	82 52       	ld.sh	r2,r1[0xa]
80002968:	80 00       	ld.sh	r0,r0[0x0]
8000296a:	2a 84       	sub	r4,-88
8000296c:	00 00       	add	r0,r0
8000296e:	00 0e       	add	lr,r0
80002970:	80 00       	ld.sh	r0,r0[0x0]
80002972:	29 8c       	sub	r12,-104
80002974:	00 00       	add	r0,r0
80002976:	00 0d       	add	sp,r0
80002978:	80 00       	ld.sh	r0,r0[0x0]
8000297a:	20 38       	sub	r8,3
8000297c:	00 00       	add	r0,r0
8000297e:	01 48       	ld.w	r8,--r0
80002980:	00 00       	add	r0,r0
80002982:	00 08       	add	r8,r0
80002984:	00 00       	add	r0,r0
80002986:	00 0c       	add	r12,r0
80002988:	80 00       	ld.sh	r0,r0[0x0]
8000298a:	78 0e       	ld.w	lr,r12[0x0]

8000298c <button_pressed>:

uint8_t button_pressed (void)
{
8000298c:	eb cd 40 80 	pushm	r7,lr
80002990:	1a 97       	mov	r7,sp
	if (!device_unlocked && button_released)
80002992:	4b 28       	lddpc	r8,80002a58 <button_pressed+0xcc>
80002994:	11 88       	ld.ub	r8,r8[0x0]
80002996:	5c 58       	castu.b	r8
80002998:	ec 18 00 01 	eorl	r8,0x1
8000299c:	5c 58       	castu.b	r8
8000299e:	c5 90       	breq	80002a50 <button_pressed+0xc4>
800029a0:	4a f8       	lddpc	r8,80002a5c <button_pressed+0xd0>
800029a2:	11 88       	ld.ub	r8,r8[0x0]
800029a4:	5c 58       	castu.b	r8
800029a6:	c5 50       	breq	80002a50 <button_pressed+0xc4>
	{		
		if (read_push_button(PB1, (uint8_t *)&PB1_Counter))
800029a8:	4a eb       	lddpc	r11,80002a60 <button_pressed+0xd4>
800029aa:	30 bc       	mov	r12,11
800029ac:	f0 1f 00 2e 	mcall	80002a64 <button_pressed+0xd8>
800029b0:	18 98       	mov	r8,r12
800029b2:	58 08       	cp.w	r8,0
800029b4:	c0 c0       	breq	800029cc <button_pressed+0x40>
		{
			LED_On(LED0);
800029b6:	30 1c       	mov	r12,1
800029b8:	f0 1f 00 2c 	mcall	80002a68 <button_pressed+0xdc>
			LED_Off(LED1 | LED2 | LED3);
800029bc:	30 ec       	mov	r12,14
800029be:	f0 1f 00 2c 	mcall	80002a6c <button_pressed+0xe0>
			store_passcode(0L);
800029c2:	30 0c       	mov	r12,0
800029c4:	f0 1f 00 2b 	mcall	80002a70 <button_pressed+0xe4>
			return PUSH_BUTTON;
800029c8:	30 18       	mov	r8,1
800029ca:	c4 48       	rjmp	80002a52 <button_pressed+0xc6>
		}
		else if (read_push_button(PB2, (uint8_t *)&PB2_Counter))
800029cc:	4a ab       	lddpc	r11,80002a74 <button_pressed+0xe8>
800029ce:	30 cc       	mov	r12,12
800029d0:	f0 1f 00 25 	mcall	80002a64 <button_pressed+0xd8>
800029d4:	18 98       	mov	r8,r12
800029d6:	58 08       	cp.w	r8,0
800029d8:	c0 c0       	breq	800029f0 <button_pressed+0x64>
		{
			LED_On(LED1);
800029da:	30 2c       	mov	r12,2
800029dc:	f0 1f 00 23 	mcall	80002a68 <button_pressed+0xdc>
			LED_Off(LED0 | LED2 | LED3);
800029e0:	30 dc       	mov	r12,13
800029e2:	f0 1f 00 23 	mcall	80002a6c <button_pressed+0xe0>
			store_passcode(1L);
800029e6:	30 1c       	mov	r12,1
800029e8:	f0 1f 00 22 	mcall	80002a70 <button_pressed+0xe4>
			return PUSH_BUTTON;
800029ec:	30 18       	mov	r8,1
800029ee:	c3 28       	rjmp	80002a52 <button_pressed+0xc6>
		}
		else if (read_push_button(PB3, (uint8_t *)&PB3_Counter))
800029f0:	4a 2b       	lddpc	r11,80002a78 <button_pressed+0xec>
800029f2:	30 dc       	mov	r12,13
800029f4:	f0 1f 00 1c 	mcall	80002a64 <button_pressed+0xd8>
800029f8:	18 98       	mov	r8,r12
800029fa:	58 08       	cp.w	r8,0
800029fc:	c0 c0       	breq	80002a14 <button_pressed+0x88>
		{
			LED_On(LED2);
800029fe:	30 4c       	mov	r12,4
80002a00:	f0 1f 00 1a 	mcall	80002a68 <button_pressed+0xdc>
			LED_Off(LED0 | LED1 | LED3);
80002a04:	30 bc       	mov	r12,11
80002a06:	f0 1f 00 1a 	mcall	80002a6c <button_pressed+0xe0>
			store_passcode(2L);
80002a0a:	30 2c       	mov	r12,2
80002a0c:	f0 1f 00 19 	mcall	80002a70 <button_pressed+0xe4>
			return PUSH_BUTTON;
80002a10:	30 18       	mov	r8,1
80002a12:	c2 08       	rjmp	80002a52 <button_pressed+0xc6>
		}
		else if (read_push_button(PB4, (uint8_t *)&PB4_Counter))
80002a14:	49 ab       	lddpc	r11,80002a7c <button_pressed+0xf0>
80002a16:	30 ac       	mov	r12,10
80002a18:	f0 1f 00 13 	mcall	80002a64 <button_pressed+0xd8>
80002a1c:	18 98       	mov	r8,r12
80002a1e:	58 08       	cp.w	r8,0
80002a20:	c0 c0       	breq	80002a38 <button_pressed+0xac>
		{
			LED_On(LED3);
80002a22:	30 8c       	mov	r12,8
80002a24:	f0 1f 00 11 	mcall	80002a68 <button_pressed+0xdc>
			LED_Off(LED0 | LED1 | LED2);
80002a28:	30 7c       	mov	r12,7
80002a2a:	f0 1f 00 11 	mcall	80002a6c <button_pressed+0xe0>
			store_passcode(3L);
80002a2e:	30 3c       	mov	r12,3
80002a30:	f0 1f 00 10 	mcall	80002a70 <button_pressed+0xe4>
			return PUSH_BUTTON;
80002a34:	30 18       	mov	r8,1
80002a36:	c0 e8       	rjmp	80002a52 <button_pressed+0xc6>
		}
		else if (read_push_button(PB_ENTER, (uint8_t *)&PB5_Counter))
80002a38:	49 2b       	lddpc	r11,80002a80 <button_pressed+0xf4>
80002a3a:	32 ac       	mov	r12,42
80002a3c:	f0 1f 00 0a 	mcall	80002a64 <button_pressed+0xd8>
80002a40:	18 98       	mov	r8,r12
80002a42:	58 08       	cp.w	r8,0
80002a44:	c0 60       	breq	80002a50 <button_pressed+0xc4>
		{
			device_unlocked = true;
80002a46:	48 59       	lddpc	r9,80002a58 <button_pressed+0xcc>
80002a48:	30 18       	mov	r8,1
80002a4a:	b2 88       	st.b	r9[0x0],r8
			return ENTER_BUTTON;
80002a4c:	30 28       	mov	r8,2
80002a4e:	c0 28       	rjmp	80002a52 <button_pressed+0xc6>
		}
	}
	return NO_BUTTON;
80002a50:	30 08       	mov	r8,0
}
80002a52:	10 9c       	mov	r12,r8
80002a54:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a58:	00 00       	add	r0,r0
80002a5a:	01 40       	ld.w	r0,--r0
80002a5c:	00 00       	add	r0,r0
80002a5e:	00 0e       	add	lr,r0
80002a60:	00 00       	add	r0,r0
80002a62:	02 b0       	st.h	r1++,r0
80002a64:	80 00       	ld.sh	r0,r0[0x0]
80002a66:	2a f8       	sub	r8,-81
80002a68:	80 00       	ld.sh	r0,r0[0x0]
80002a6a:	30 ec       	mov	r12,14
80002a6c:	80 00       	ld.sh	r0,r0[0x0]
80002a6e:	30 34       	mov	r4,3
80002a70:	80 00       	ld.sh	r0,r0[0x0]
80002a72:	2b c4       	sub	r4,-68
80002a74:	00 00       	add	r0,r0
80002a76:	02 b1       	st.h	r1++,r1
80002a78:	00 00       	add	r0,r0
80002a7a:	02 b2       	st.h	r1++,r2
80002a7c:	00 00       	add	r0,r0
80002a7e:	02 b3       	st.h	r1++,r3
80002a80:	00 00       	add	r0,r0
80002a82:	02 b4       	st.h	r1++,r4

80002a84 <check_all_buttons_high>:

bool check_all_buttons_high(void)
{
80002a84:	eb cd 40 80 	pushm	r7,lr
80002a88:	1a 97       	mov	r7,sp
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1) && (gpio_get_pin_value(PB2) == 1) && (gpio_get_pin_value(PB3) == 1) && (gpio_get_pin_value(PB4) == 1))
80002a8a:	30 bc       	mov	r12,11
80002a8c:	f0 1f 00 19 	mcall	80002af0 <check_all_buttons_high+0x6c>
80002a90:	18 98       	mov	r8,r12
80002a92:	58 18       	cp.w	r8,1
80002a94:	c2 51       	brne	80002ade <check_all_buttons_high+0x5a>
80002a96:	30 cc       	mov	r12,12
80002a98:	f0 1f 00 16 	mcall	80002af0 <check_all_buttons_high+0x6c>
80002a9c:	18 98       	mov	r8,r12
80002a9e:	58 18       	cp.w	r8,1
80002aa0:	c1 f1       	brne	80002ade <check_all_buttons_high+0x5a>
80002aa2:	30 dc       	mov	r12,13
80002aa4:	f0 1f 00 13 	mcall	80002af0 <check_all_buttons_high+0x6c>
80002aa8:	18 98       	mov	r8,r12
80002aaa:	58 18       	cp.w	r8,1
80002aac:	c1 91       	brne	80002ade <check_all_buttons_high+0x5a>
80002aae:	30 ac       	mov	r12,10
80002ab0:	f0 1f 00 10 	mcall	80002af0 <check_all_buttons_high+0x6c>
80002ab4:	18 98       	mov	r8,r12
80002ab6:	58 18       	cp.w	r8,1
80002ab8:	c1 31       	brne	80002ade <check_all_buttons_high+0x5a>
	{
		if (button_released_iteration++ > 10)
80002aba:	48 f8       	lddpc	r8,80002af4 <check_all_buttons_high+0x70>
80002abc:	11 88       	ld.ub	r8,r8[0x0]
80002abe:	30 a9       	mov	r9,10
80002ac0:	f2 08 18 00 	cp.b	r8,r9
80002ac4:	5f b9       	srhi	r9
80002ac6:	5c 59       	castu.b	r9
80002ac8:	2f f8       	sub	r8,-1
80002aca:	5c 58       	castu.b	r8
80002acc:	48 aa       	lddpc	r10,80002af4 <check_all_buttons_high+0x70>
80002ace:	b4 88       	st.b	r10[0x0],r8
80002ad0:	58 09       	cp.w	r9,0
80002ad2:	c0 a0       	breq	80002ae6 <check_all_buttons_high+0x62>
		{
			button_released_iteration = 0;
80002ad4:	48 89       	lddpc	r9,80002af4 <check_all_buttons_high+0x70>
80002ad6:	30 08       	mov	r8,0
80002ad8:	b2 88       	st.b	r9[0x0],r8
			return true;
80002ada:	30 18       	mov	r8,1
80002adc:	c0 78       	rjmp	80002aea <check_all_buttons_high+0x66>
		}
	}
	else
	{
		button_released_iteration = 0;
80002ade:	48 69       	lddpc	r9,80002af4 <check_all_buttons_high+0x70>
80002ae0:	30 08       	mov	r8,0
80002ae2:	b2 88       	st.b	r9[0x0],r8
80002ae4:	c0 28       	rjmp	80002ae8 <check_all_buttons_high+0x64>

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1) && (gpio_get_pin_value(PB2) == 1) && (gpio_get_pin_value(PB3) == 1) && (gpio_get_pin_value(PB4) == 1))
80002ae6:	d7 03       	nop
	else
	{
		button_released_iteration = 0;
	}

	return false;
80002ae8:	30 08       	mov	r8,0
}
80002aea:	10 9c       	mov	r12,r8
80002aec:	e3 cd 80 80 	ldm	sp++,r7,pc
80002af0:	80 00       	ld.sh	r0,r0[0x0]
80002af2:	77 04       	ld.w	r4,r11[0x40]
80002af4:	00 00       	add	r0,r0
80002af6:	02 b5       	st.h	r1++,r5

80002af8 <read_push_button>:

bool read_push_button(uint32_t pin, uint8_t *counter)
{
80002af8:	eb cd 40 80 	pushm	r7,lr
80002afc:	1a 97       	mov	r7,sp
80002afe:	20 3d       	sub	sp,12
80002b00:	ef 4c ff f8 	st.w	r7[-8],r12
80002b04:	ef 4b ff f4 	st.w	r7[-12],r11
	bool button_status = false;
80002b08:	30 08       	mov	r8,0
80002b0a:	ef 68 ff ff 	st.b	r7[-1],r8

	if (gpio_get_pin_value(pin) == 0)
80002b0e:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b12:	f0 1f 00 1b 	mcall	80002b7c <read_push_button+0x84>
80002b16:	18 98       	mov	r8,r12
80002b18:	58 08       	cp.w	r8,0
80002b1a:	c2 11       	brne	80002b5c <read_push_button+0x64>
	{
		(*counter)++;
80002b1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002b20:	11 88       	ld.ub	r8,r8[0x0]
80002b22:	2f f8       	sub	r8,-1
80002b24:	5c 58       	castu.b	r8
80002b26:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002b2a:	b2 88       	st.b	r9[0x0],r8
		if (*counter >= 3)
80002b2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002b30:	11 89       	ld.ub	r9,r8[0x0]
80002b32:	30 28       	mov	r8,2
80002b34:	f0 09 18 00 	cp.b	r9,r8
80002b38:	e0 88 00 1a 	brls	80002b6c <read_push_button+0x74>
		{
			button_status = true;
80002b3c:	30 18       	mov	r8,1
80002b3e:	ef 68 ff ff 	st.b	r7[-1],r8
			if (enter_pressed)
80002b42:	49 08       	lddpc	r8,80002b80 <read_push_button+0x88>
80002b44:	11 88       	ld.ub	r8,r8[0x0]
80002b46:	5c 58       	castu.b	r8
80002b48:	c0 60       	breq	80002b54 <read_push_button+0x5c>
			{
				enter_pressed = false;	
80002b4a:	48 e9       	lddpc	r9,80002b80 <read_push_button+0x88>
80002b4c:	30 08       	mov	r8,0
80002b4e:	b2 88       	st.b	r9[0x0],r8
				Start_W_timer();
80002b50:	f0 1f 00 0d 	mcall	80002b84 <read_push_button+0x8c>
			}
			
			button_released = false;
80002b54:	48 d9       	lddpc	r9,80002b88 <read_push_button+0x90>
80002b56:	30 08       	mov	r8,0
80002b58:	b2 88       	st.b	r9[0x0],r8
80002b5a:	c0 a8       	rjmp	80002b6e <read_push_button+0x76>
		}
	}
	else
	{
		button_status = false;
80002b5c:	30 08       	mov	r8,0
80002b5e:	ef 68 ff ff 	st.b	r7[-1],r8
		*counter = 0;
80002b62:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002b66:	30 08       	mov	r8,0
80002b68:	b2 88       	st.b	r9[0x0],r8
80002b6a:	c0 28       	rjmp	80002b6e <read_push_button+0x76>
			{
				enter_pressed = false;	
				Start_W_timer();
			}
			
			button_released = false;
80002b6c:	d7 03       	nop
	else
	{
		button_status = false;
		*counter = 0;
	}
	return button_status;	
80002b6e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80002b72:	10 9c       	mov	r12,r8
80002b74:	2f dd       	sub	sp,-12
80002b76:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b7a:	00 00       	add	r0,r0
80002b7c:	80 00       	ld.sh	r0,r0[0x0]
80002b7e:	77 04       	ld.w	r4,r11[0x40]
80002b80:	00 00       	add	r0,r0
80002b82:	00 0d       	add	sp,r0
80002b84:	80 00       	ld.sh	r0,r0[0x0]
80002b86:	21 24       	sub	r4,18
80002b88:	00 00       	add	r0,r0
80002b8a:	00 0e       	add	lr,r0

80002b8c <push_buttons_init>:

void push_buttons_init(void)
{
80002b8c:	eb cd 40 80 	pushm	r7,lr
80002b90:	1a 97       	mov	r7,sp
	gpio_configure_pin(PB1,GPIO_DIR_INPUT);
80002b92:	30 0b       	mov	r11,0
80002b94:	30 bc       	mov	r12,11
80002b96:	f0 1f 00 0b 	mcall	80002bc0 <push_buttons_init+0x34>
	gpio_configure_pin(PB2,GPIO_DIR_INPUT);
80002b9a:	30 0b       	mov	r11,0
80002b9c:	30 cc       	mov	r12,12
80002b9e:	f0 1f 00 09 	mcall	80002bc0 <push_buttons_init+0x34>
	gpio_configure_pin(PB3,GPIO_DIR_INPUT);
80002ba2:	30 0b       	mov	r11,0
80002ba4:	30 dc       	mov	r12,13
80002ba6:	f0 1f 00 07 	mcall	80002bc0 <push_buttons_init+0x34>
	gpio_configure_pin(PB4,GPIO_DIR_INPUT);
80002baa:	30 0b       	mov	r11,0
80002bac:	30 ac       	mov	r12,10
80002bae:	f0 1f 00 05 	mcall	80002bc0 <push_buttons_init+0x34>
	gpio_configure_pin(PB_ENTER,GPIO_DIR_INPUT);
80002bb2:	30 0b       	mov	r11,0
80002bb4:	32 ac       	mov	r12,42
80002bb6:	f0 1f 00 03 	mcall	80002bc0 <push_buttons_init+0x34>
}
80002bba:	e3 cd 80 80 	ldm	sp++,r7,pc
80002bbe:	00 00       	add	r0,r0
80002bc0:	80 00       	ld.sh	r0,r0[0x0]
80002bc2:	75 56       	ld.w	r6,r10[0x54]

80002bc4 <store_passcode>:

void store_passcode(uint32_t value)
{
80002bc4:	eb cd 40 80 	pushm	r7,lr
80002bc8:	1a 97       	mov	r7,sp
80002bca:	20 2d       	sub	sp,8
80002bcc:	ef 4c ff f8 	st.w	r7[-8],r12
	unsigned char index = 0;
80002bd0:	30 08       	mov	r8,0
80002bd2:	ef 68 ff ff 	st.b	r7[-1],r8
	index = passcode_byte_index >> 4;
80002bd6:	49 88       	lddpc	r8,80002c34 <store_passcode+0x70>
80002bd8:	11 88       	ld.ub	r8,r8[0x0]
80002bda:	5c 58       	castu.b	r8
80002bdc:	a5 88       	lsr	r8,0x4
80002bde:	ef 68 ff ff 	st.b	r7[-1],r8
	pass_code[index] = pass_code[index] | (value << ((passcode_byte_index & 0x0000000F) << 1));
80002be2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002be6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80002bea:	49 48       	lddpc	r8,80002c38 <store_passcode+0x74>
80002bec:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80002bf0:	49 18       	lddpc	r8,80002c34 <store_passcode+0x70>
80002bf2:	11 88       	ld.ub	r8,r8[0x0]
80002bf4:	5c 58       	castu.b	r8
80002bf6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002bfa:	a1 78       	lsl	r8,0x1
80002bfc:	ee fb ff f8 	ld.w	r11,r7[-8]
80002c00:	f6 08 09 48 	lsl	r8,r11,r8
80002c04:	10 4a       	or	r10,r8
80002c06:	48 d8       	lddpc	r8,80002c38 <store_passcode+0x74>
80002c08:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	if (passcode_byte_index++ > 128)
80002c0c:	48 a8       	lddpc	r8,80002c34 <store_passcode+0x70>
80002c0e:	11 88       	ld.ub	r8,r8[0x0]
80002c10:	5c 58       	castu.b	r8
80002c12:	38 09       	mov	r9,-128
80002c14:	f2 08 18 00 	cp.b	r8,r9
80002c18:	5f b9       	srhi	r9
80002c1a:	5c 59       	castu.b	r9
80002c1c:	2f f8       	sub	r8,-1
80002c1e:	5c 58       	castu.b	r8
80002c20:	48 5a       	lddpc	r10,80002c34 <store_passcode+0x70>
80002c22:	b4 88       	st.b	r10[0x0],r8
80002c24:	58 09       	cp.w	r9,0
80002c26:	c0 40       	breq	80002c2e <store_passcode+0x6a>
	{
		passcode_byte_index = 0;
80002c28:	48 39       	lddpc	r9,80002c34 <store_passcode+0x70>
80002c2a:	30 08       	mov	r8,0
80002c2c:	b2 88       	st.b	r9[0x0],r8
	}
	//inter_key_delay = ENABLED;
}
80002c2e:	2f ed       	sub	sp,-8
80002c30:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c34:	00 00       	add	r0,r0
80002c36:	01 41       	ld.w	r1,--r0
80002c38:	00 00       	add	r0,r0
80002c3a:	01 20       	ld.uh	r0,r0++

80002c3c <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
static void tc_init(volatile avr32_tc_t *tc)
{
80002c3c:	eb cd 40 80 	pushm	r7,lr
80002c40:	1a 97       	mov	r7,sp
80002c42:	20 1d       	sub	sp,4
80002c44:	ef 4c ff fc 	st.w	r7[-4],r12
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80002c48:	49 3b       	lddpc	r11,80002c94 <tc_init+0x58>
80002c4a:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c4e:	f0 1f 00 13 	mcall	80002c98 <tc_init+0x5c>
	 * Set the compare triggers.
	 * We configure it to count every 10 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 10 ms, hence RC = (fPBA / 8) / 100
	 * to get an interrupt every 10 ms.
	 */
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL, (sysclk_get_pba_hz() / 8 / 100));
80002c52:	f0 1f 00 13 	mcall	80002c9c <tc_init+0x60>
80002c56:	18 99       	mov	r9,r12
80002c58:	e0 68 85 1f 	mov	r8,34079
80002c5c:	ea 18 51 eb 	orh	r8,0x51eb
80002c60:	f2 08 06 48 	mulu.d	r8,r9,r8
80002c64:	f2 08 16 08 	lsr	r8,r9,0x8
80002c68:	5c 88       	casts.h	r8
80002c6a:	5c 78       	castu.h	r8
80002c6c:	10 9a       	mov	r10,r8
80002c6e:	30 0b       	mov	r11,0
80002c70:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c74:	f0 1f 00 0b 	mcall	80002ca0 <tc_init+0x64>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80002c78:	48 ba       	lddpc	r10,80002ca4 <tc_init+0x68>
80002c7a:	30 0b       	mov	r11,0
80002c7c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c80:	f0 1f 00 0a 	mcall	80002ca8 <tc_init+0x6c>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80002c84:	30 0b       	mov	r11,0
80002c86:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c8a:	f0 1f 00 09 	mcall	80002cac <tc_init+0x70>
}
80002c8e:	2f fd       	sub	sp,-4
80002c90:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c94:	80 00       	ld.sh	r0,r0[0x0]
80002c96:	d7 40       	acall	0x1d0
80002c98:	80 00       	ld.sh	r0,r0[0x0]
80002c9a:	80 c4       	ld.uh	r4,r0[0x8]
80002c9c:	80 00       	ld.sh	r0,r0[0x0]
80002c9e:	26 50       	sub	r0,101
80002ca0:	80 00       	ld.sh	r0,r0[0x0]
80002ca2:	82 8c       	ld.uh	r12,r1[0x0]
80002ca4:	80 00       	ld.sh	r0,r0[0x0]
80002ca6:	d7 48       	*unknown*
80002ca8:	80 00       	ld.sh	r0,r0[0x0]
80002caa:	7e dc       	ld.w	r12,pc[0x34]
80002cac:	80 00       	ld.sh	r0,r0[0x0]
80002cae:	82 18       	ld.sh	r8,r1[0x2]

80002cb0 <tc_task>:
 * - Register the TC interrupt
 * - Configure, enable the CPCS (RC compare match) interrupt,
 * - and start a TC channel in waveform mode
 */
void tc_task (void)
{
80002cb0:	eb cd 40 80 	pushm	r7,lr
80002cb4:	1a 97       	mov	r7,sp
80002cb6:	20 2d       	sub	sp,8
	volatile avr32_tc_t *tc = EXAMPLE_TC;
80002cb8:	fe 78 38 00 	mov	r8,-51200
80002cbc:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t timer = 0;
80002cc0:	30 08       	mov	r8,0
80002cc2:	ef 48 ff fc 	st.w	r7[-4],r8
	 * peripheral clocks, except for the peripheral clocks explicitly
	 * enabled in conf_clock.h.
	 */
	//sysclk_init();
	// Enable the clock to the selected example Timer/counter peripheral module.
	sysclk_enable_peripheral_clock(EXAMPLE_TC);
80002cc6:	fe 7c 38 00 	mov	r12,-51200
80002cca:	f0 1f 00 0d 	mcall	80002cfc <tc_task+0x4c>
	// Disable the interrupts
	cpu_irq_disable();
80002cce:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	//INTC_init_interrupts();
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80002cd0:	30 0a       	mov	r10,0
80002cd2:	e0 6b 01 c0 	mov	r11,448
80002cd6:	48 bc       	lddpc	r12,80002d00 <tc_task+0x50>
80002cd8:	f0 1f 00 0b 	mcall	80002d04 <tc_task+0x54>
	// Enable the interrupts
	cpu_irq_enable();
80002cdc:	d5 03       	csrf	0x10
	// Initialize the timer module
	tc_init(tc);
80002cde:	ee fc ff f8 	ld.w	r12,r7[-8]
80002ce2:	f0 1f 00 0a 	mcall	80002d08 <tc_task+0x58>
	// Initialize push buttons
	push_buttons_init();
80002ce6:	f0 1f 00 0a 	mcall	80002d0c <tc_task+0x5c>

    calculate_hash(CipherKey256, 8, CipherKey256_hash);
80002cea:	48 aa       	lddpc	r10,80002d10 <tc_task+0x60>
80002cec:	30 8b       	mov	r11,8
80002cee:	48 ac       	lddpc	r12,80002d14 <tc_task+0x64>
80002cf0:	f0 1f 00 0a 	mcall	80002d18 <tc_task+0x68>
			 //*/
			 //// Reset the timer update flag to wait till next timer interrupt
			//update_timer = false;
		//}
	//}
}
80002cf4:	2f ed       	sub	sp,-8
80002cf6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cfa:	00 00       	add	r0,r0
80002cfc:	80 00       	ld.sh	r0,r0[0x0]
80002cfe:	26 a8       	sub	r8,106
80002d00:	80 00       	ld.sh	r0,r0[0x0]
80002d02:	28 bc       	sub	r12,-117
80002d04:	80 00       	ld.sh	r0,r0[0x0]
80002d06:	79 9c       	ld.w	r12,r12[0x64]
80002d08:	80 00       	ld.sh	r0,r0[0x0]
80002d0a:	2c 3c       	sub	r12,-61
80002d0c:	80 00       	ld.sh	r0,r0[0x0]
80002d0e:	2b 8c       	sub	r12,-72
80002d10:	00 00       	add	r0,r0
80002d12:	02 90       	mov	r0,r1
80002d14:	80 00       	ld.sh	r0,r0[0x0]
80002d16:	d6 00       	acall	0x180
80002d18:	80 00       	ld.sh	r0,r0[0x0]
80002d1a:	21 68       	sub	r8,22

80002d1c <init_hmatrix>:


/*! \brief Initializes the HSB bus matrix.
 */
static void init_hmatrix(void)
{
80002d1c:	eb cd 40 80 	pushm	r7,lr
80002d20:	1a 97       	mov	r7,sp
80002d22:	20 1d       	sub	sp,4
  // Set flashc master type to last default to save one cycle for
  // each branch.
  avr32_hmatrix_scfg_t scfg;

  scfg = AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH];
80002d24:	fe 68 10 00 	mov	r8,-126976
80002d28:	71 08       	ld.w	r8,r8[0x40]
80002d2a:	ef 48 ff fc 	st.w	r7[-4],r8
  scfg.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
80002d2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002d32:	30 19       	mov	r9,1
80002d34:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
80002d38:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH] = scfg;
80002d3c:	fe 68 10 00 	mov	r8,-126976
80002d40:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d44:	f1 49 00 40 	st.w	r8[64],r9
}
80002d48:	2f fd       	sub	sp,-4
80002d4a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d4e:	d7 03       	nop

80002d50 <aes_task>:
 * 8N1.
 * Then it sets up the interrupt handler and waits for a USART interrupt to
 * trigger.
 */
void aes_task (void)
{
80002d50:	eb cd 40 80 	pushm	r7,lr
80002d54:	1a 97       	mov	r7,sp
  init_hmatrix();
80002d56:	f0 1f 00 03 	mcall	80002d60 <aes_task+0x10>
}
80002d5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d5e:	00 00       	add	r0,r0
80002d60:	80 00       	ld.sh	r0,r0[0x0]
80002d62:	2d 1c       	sub	r12,-47

80002d64 <aes_init>:
	0x5A43D875,	// AES-CTR IV (BYTE2)
	0x00000001	// COUNTER
};

void aes_init (unsigned char Processing_Mode)
{
80002d64:	eb cd 40 80 	pushm	r7,lr
80002d68:	1a 97       	mov	r7,sp
80002d6a:	20 3d       	sub	sp,12
80002d6c:	18 98       	mov	r8,r12
80002d6e:	ef 68 ff f4 	st.b	r7[-12],r8
	  aes_config_t    AesConf;        // AES config structure
	  // Configure the AES.
	  AesConf.ProcessingMode = Processing_Mode;   // Cipher
80002d72:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002d76:	ef 68 ff f8 	st.b	r7[-8],r8
	  AesConf.ProcessingDelay = 0;                // No delay: best performance
80002d7a:	30 08       	mov	r8,0
80002d7c:	ef 68 ff f9 	st.b	r7[-7],r8
	  AesConf.StartMode = AES_START_MODE_AUTO;    // Manual mode
80002d80:	30 18       	mov	r8,1
80002d82:	ef 68 ff fa 	st.b	r7[-6],r8
	  AesConf.KeySize = AES_KEY_SIZE_256;         // 256bit cryptographic key
80002d86:	30 28       	mov	r8,2
80002d88:	ef 68 ff fb 	st.b	r7[-5],r8
	  AesConf.OpMode = AES_CBC_MODE;              // CTR cipher mode
80002d8c:	30 18       	mov	r8,1
80002d8e:	ef 68 ff fc 	st.b	r7[-4],r8
	  AesConf.LodMode = 0;                        // LODMODE == 0 : the DATRDY flag
80002d92:	30 08       	mov	r8,0
80002d94:	ef 68 ff fd 	st.b	r7[-3],r8
	  // is cleared when one of the output data registers is read (because we're in
	  // manual mode).
	  AesConf.CFBSize = 0;                        // Don't-care because we're using the CTR mode.
80002d98:	30 08       	mov	r8,0
80002d9a:	ef 68 ff fe 	st.b	r7[-2],r8
	  AesConf.CounterMeasureMask = 0;             // Disable all counter measures.
80002d9e:	30 08       	mov	r8,0
80002da0:	ef 68 ff ff 	st.b	r7[-1],r8
	  aes_configure(&AVR32_AES, &AesConf);
80002da4:	ee c8 00 08 	sub	r8,r7,8
80002da8:	10 9b       	mov	r11,r8
80002daa:	fc 7c 00 00 	mov	r12,-196608
80002dae:	f0 1f 00 06 	mcall	80002dc4 <aes_init+0x60>
	  aes_set_key(&AVR32_AES, CipherKey256);
80002db2:	48 6b       	lddpc	r11,80002dc8 <aes_init+0x64>
80002db4:	fc 7c 00 00 	mov	r12,-196608
80002db8:	f0 1f 00 05 	mcall	80002dcc <aes_init+0x68>

	  //ccountt0 = Get_system_register(AVR32_COUNT);
	  // Start encryption.
	  //aes_start(&AVR32_AES);

}
80002dbc:	2f dd       	sub	sp,-12
80002dbe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dc2:	00 00       	add	r0,r0
80002dc4:	80 00       	ld.sh	r0,r0[0x0]
80002dc6:	6d 3c       	ld.w	r12,r6[0x4c]
80002dc8:	80 00       	ld.sh	r0,r0[0x0]
80002dca:	d6 00       	acall	0x180
80002dcc:	80 00       	ld.sh	r0,r0[0x0]
80002dce:	6d cc       	ld.w	r12,r6[0x70]

80002dd0 <apply_aes_encryption>:
uint32_t aes_out_data[128] = {0};

void apply_aes_encryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint32_t sector_id)
{
80002dd0:	eb cd 40 80 	pushm	r7,lr
80002dd4:	1a 97       	mov	r7,sp
80002dd6:	20 5d       	sub	sp,20
80002dd8:	ef 4c ff f4 	st.w	r7[-12],r12
80002ddc:	ef 4b ff f0 	st.w	r7[-16],r11
80002de0:	ef 4a ff ec 	st.w	r7[-20],r10
	unsigned char i = 0;
80002de4:	30 08       	mov	r8,0
80002de6:	ef 68 ff fb 	st.b	r7[-5],r8
	unsigned long int temp;
	
	temp = CipherKey256_hash[0];
80002dea:	4b 18       	lddpc	r8,80002eac <apply_aes_encryption+0xdc>
80002dec:	70 08       	ld.w	r8,r8[0x0]
80002dee:	ef 48 ff fc 	st.w	r7[-4],r8

	CipherKey256_hash[0] = CipherKey256_hash[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
80002df2:	4a f8       	lddpc	r8,80002eac <apply_aes_encryption+0xdc>
80002df4:	70 09       	ld.w	r9,r8[0x0]
80002df6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002dfa:	10 59       	eor	r9,r8
80002dfc:	4a c8       	lddpc	r8,80002eac <apply_aes_encryption+0xdc>
80002dfe:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
							 
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);	
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);	
80002e00:	4a bb       	lddpc	r11,80002eac <apply_aes_encryption+0xdc>
80002e02:	fc 7c 00 00 	mov	r12,-196608
80002e06:	f0 1f 00 2b 	mcall	80002eb0 <apply_aes_encryption+0xe0>
	
	CipherKey256_hash[0] = temp;
80002e0a:	4a 98       	lddpc	r8,80002eac <apply_aes_encryption+0xdc>
80002e0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002e10:	91 09       	st.w	r8[0x0],r9
		
	for (; i < 128; i+=4)
80002e12:	c2 78       	rjmp	80002e60 <apply_aes_encryption+0x90>
	{
		aes_init(AES_PMODE_CIPHER);
80002e14:	30 1c       	mov	r12,1
80002e16:	f0 1f 00 28 	mcall	80002eb4 <apply_aes_encryption+0xe4>
			
		aes_write_inputdata(aes, &aes_in_data_t[i]);
80002e1a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e1e:	a3 68       	lsl	r8,0x2
80002e20:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002e24:	f2 08 00 08 	add	r8,r9,r8
80002e28:	10 9b       	mov	r11,r8
80002e2a:	ee fc ff f4 	ld.w	r12,r7[-12]
80002e2e:	f0 1f 00 23 	mcall	80002eb8 <apply_aes_encryption+0xe8>

		while (!(aes->isr & 0x00000001));
80002e32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e36:	70 78       	ld.w	r8,r8[0x1c]
80002e38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002e3c:	cf b0       	breq	80002e32 <apply_aes_encryption+0x62>

		aes_read_outputdata(aes, &aes_out_data[i]);
80002e3e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e42:	f0 09 15 02 	lsl	r9,r8,0x2
80002e46:	49 e8       	lddpc	r8,80002ebc <apply_aes_encryption+0xec>
80002e48:	f2 08 00 08 	add	r8,r9,r8
80002e4c:	10 9b       	mov	r11,r8
80002e4e:	ee fc ff f4 	ld.w	r12,r7[-12]
80002e52:	f0 1f 00 1c 	mcall	80002ec0 <apply_aes_encryption+0xf0>
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);	
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);	
	
	CipherKey256_hash[0] = temp;
		
	for (; i < 128; i+=4)
80002e56:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e5a:	2f c8       	sub	r8,-4
80002e5c:	ef 68 ff fb 	st.b	r7[-5],r8
80002e60:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80002e64:	30 08       	mov	r8,0
80002e66:	f0 09 18 00 	cp.b	r9,r8
80002e6a:	cd 54       	brge	80002e14 <apply_aes_encryption+0x44>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < 128; i++)
80002e6c:	30 08       	mov	r8,0
80002e6e:	ef 68 ff fb 	st.b	r7[-5],r8
80002e72:	c1 38       	rjmp	80002e98 <apply_aes_encryption+0xc8>
	{
		aes_in_data_t[i] = aes_out_data[i];
80002e74:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e78:	a3 68       	lsl	r8,0x2
80002e7a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002e7e:	f2 08 00 08 	add	r8,r9,r8
80002e82:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80002e86:	48 e9       	lddpc	r9,80002ebc <apply_aes_encryption+0xec>
80002e88:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80002e8c:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < 128; i++)
80002e8e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e92:	2f f8       	sub	r8,-1
80002e94:	ef 68 ff fb 	st.b	r7[-5],r8
80002e98:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80002e9c:	30 08       	mov	r8,0
80002e9e:	f0 09 18 00 	cp.b	r9,r8
80002ea2:	ce 94       	brge	80002e74 <apply_aes_encryption+0xa4>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
80002ea4:	2f bd       	sub	sp,-20
80002ea6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002eaa:	00 00       	add	r0,r0
80002eac:	00 00       	add	r0,r0
80002eae:	02 90       	mov	r0,r1
80002eb0:	80 00       	ld.sh	r0,r0[0x0]
80002eb2:	6e 5a       	ld.w	r10,r7[0x14]
80002eb4:	80 00       	ld.sh	r0,r0[0x0]
80002eb6:	2d 64       	sub	r4,-42
80002eb8:	80 00       	ld.sh	r0,r0[0x0]
80002eba:	6e b6       	ld.w	r6,r7[0x2c]
80002ebc:	00 00       	add	r0,r0
80002ebe:	02 b8       	st.h	r1++,r8
80002ec0:	80 00       	ld.sh	r0,r0[0x0]
80002ec2:	6f 4e       	ld.w	lr,r7[0x50]

80002ec4 <apply_aes_decryption>:


void apply_aes_decryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint32_t sector_id)
{
80002ec4:	eb cd 40 80 	pushm	r7,lr
80002ec8:	1a 97       	mov	r7,sp
80002eca:	20 5d       	sub	sp,20
80002ecc:	ef 4c ff f4 	st.w	r7[-12],r12
80002ed0:	ef 4b ff f0 	st.w	r7[-16],r11
80002ed4:	ef 4a ff ec 	st.w	r7[-20],r10
	
	unsigned char i = 0;
80002ed8:	30 08       	mov	r8,0
80002eda:	ef 68 ff fb 	st.b	r7[-5],r8
	unsigned long int temp;

	temp = CipherKey256_hash[0];
80002ede:	4b 18       	lddpc	r8,80002fa0 <apply_aes_decryption+0xdc>
80002ee0:	70 08       	ld.w	r8,r8[0x0]
80002ee2:	ef 48 ff fc 	st.w	r7[-4],r8

	CipherKey256_hash[0] = CipherKey256_hash[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
80002ee6:	4a f8       	lddpc	r8,80002fa0 <apply_aes_decryption+0xdc>
80002ee8:	70 09       	ld.w	r9,r8[0x0]
80002eea:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002eee:	10 59       	eor	r9,r8
80002ef0:	4a c8       	lddpc	r8,80002fa0 <apply_aes_decryption+0xdc>
80002ef2:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
	
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);
80002ef4:	4a bb       	lddpc	r11,80002fa0 <apply_aes_decryption+0xdc>
80002ef6:	fc 7c 00 00 	mov	r12,-196608
80002efa:	f0 1f 00 2b 	mcall	80002fa4 <apply_aes_decryption+0xe0>
	
	CipherKey256_hash[0] = temp;
80002efe:	4a 98       	lddpc	r8,80002fa0 <apply_aes_decryption+0xdc>
80002f00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002f04:	91 09       	st.w	r8[0x0],r9

	for (; i < 128; i+=4)
80002f06:	c2 78       	rjmp	80002f54 <apply_aes_decryption+0x90>
	{
		aes_init(AES_PMODE_DECIPHER);
80002f08:	30 0c       	mov	r12,0
80002f0a:	f0 1f 00 28 	mcall	80002fa8 <apply_aes_decryption+0xe4>

		aes_write_inputdata(aes, &aes_in_data_t[i]);
80002f0e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002f12:	a3 68       	lsl	r8,0x2
80002f14:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002f18:	f2 08 00 08 	add	r8,r9,r8
80002f1c:	10 9b       	mov	r11,r8
80002f1e:	ee fc ff f4 	ld.w	r12,r7[-12]
80002f22:	f0 1f 00 23 	mcall	80002fac <apply_aes_decryption+0xe8>

		while (!(aes->isr & 0x00000001));
80002f26:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002f2a:	70 78       	ld.w	r8,r8[0x1c]
80002f2c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002f30:	cf b0       	breq	80002f26 <apply_aes_decryption+0x62>

		aes_read_outputdata(aes, &aes_out_data[i]);
80002f32:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002f36:	f0 09 15 02 	lsl	r9,r8,0x2
80002f3a:	49 e8       	lddpc	r8,80002fb0 <apply_aes_decryption+0xec>
80002f3c:	f2 08 00 08 	add	r8,r9,r8
80002f40:	10 9b       	mov	r11,r8
80002f42:	ee fc ff f4 	ld.w	r12,r7[-12]
80002f46:	f0 1f 00 1c 	mcall	80002fb4 <apply_aes_decryption+0xf0>
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);
	
	CipherKey256_hash[0] = temp;

	for (; i < 128; i+=4)
80002f4a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002f4e:	2f c8       	sub	r8,-4
80002f50:	ef 68 ff fb 	st.b	r7[-5],r8
80002f54:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80002f58:	30 08       	mov	r8,0
80002f5a:	f0 09 18 00 	cp.b	r9,r8
80002f5e:	cd 54       	brge	80002f08 <apply_aes_decryption+0x44>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < 128; i++)
80002f60:	30 08       	mov	r8,0
80002f62:	ef 68 ff fb 	st.b	r7[-5],r8
80002f66:	c1 38       	rjmp	80002f8c <apply_aes_decryption+0xc8>
	{
		aes_in_data_t[i] = aes_out_data[i];
80002f68:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002f6c:	a3 68       	lsl	r8,0x2
80002f6e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002f72:	f2 08 00 08 	add	r8,r9,r8
80002f76:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80002f7a:	48 e9       	lddpc	r9,80002fb0 <apply_aes_decryption+0xec>
80002f7c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80002f80:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < 128; i++)
80002f82:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002f86:	2f f8       	sub	r8,-1
80002f88:	ef 68 ff fb 	st.b	r7[-5],r8
80002f8c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80002f90:	30 08       	mov	r8,0
80002f92:	f0 09 18 00 	cp.b	r9,r8
80002f96:	ce 94       	brge	80002f68 <apply_aes_decryption+0xa4>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
80002f98:	2f bd       	sub	sp,-20
80002f9a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f9e:	00 00       	add	r0,r0
80002fa0:	00 00       	add	r0,r0
80002fa2:	02 90       	mov	r0,r1
80002fa4:	80 00       	ld.sh	r0,r0[0x0]
80002fa6:	6e 5a       	ld.w	r10,r7[0x14]
80002fa8:	80 00       	ld.sh	r0,r0[0x0]
80002faa:	2d 64       	sub	r4,-42
80002fac:	80 00       	ld.sh	r0,r0[0x0]
80002fae:	6e b6       	ld.w	r6,r7[0x2c]
80002fb0:	00 00       	add	r0,r0
80002fb2:	02 b8       	st.h	r1++,r8
80002fb4:	80 00       	ld.sh	r0,r0[0x0]
80002fb6:	6f 4e       	ld.w	lr,r7[0x50]

80002fb8 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
# define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80002fb8:	eb cd 40 80 	pushm	r7,lr
80002fbc:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002fbe:	30 3b       	mov	r11,3
80002fc0:	34 3c       	mov	r12,67
80002fc2:	f0 1f 00 17 	mcall	8000301c <board_init+0x64>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002fc6:	30 3b       	mov	r11,3
80002fc8:	36 5c       	mov	r12,101
80002fca:	f0 1f 00 15 	mcall	8000301c <board_init+0x64>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002fce:	30 3b       	mov	r11,3
80002fd0:	36 9c       	mov	r12,105
80002fd2:	f0 1f 00 13 	mcall	8000301c <board_init+0x64>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002fd6:	30 3b       	mov	r11,3
80002fd8:	36 6c       	mov	r12,102
80002fda:	f0 1f 00 11 	mcall	8000301c <board_init+0x64>

	gpio_configure_pin(GPIO_PUSH_BUTTON_SW2,GPIO_DIR_INPUT);
80002fde:	30 0b       	mov	r11,0
80002fe0:	32 ac       	mov	r12,42
80002fe2:	f0 1f 00 0f 	mcall	8000301c <board_init+0x64>
# define AT45DBX_ENABLE_NPCS_PIN(NPCS, unused) \
	{AT45DBX_SPI_NPCS##NPCS##_PIN, AT45DBX_SPI_NPCS##NPCS##_FUNCTION},
	MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
# undef AT45DBX_ENABLE_NPCS_PIN
	};
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
80002fe6:	30 4b       	mov	r11,4
80002fe8:	48 ec       	lddpc	r12,80003020 <board_init+0x68>
80002fea:	f0 1f 00 0f 	mcall	80003024 <board_init+0x6c>
		{SD_SLOT_4BITS_DATA1_PIN, SD_SLOT_4BITS_DATA1_FUNCTION},
		{SD_SLOT_4BITS_DATA2_PIN, SD_SLOT_4BITS_DATA2_FUNCTION},
		{SD_SLOT_4BITS_DATA3_PIN, SD_SLOT_4BITS_DATA3_FUNCTION}
	};
	// Configure Slot 0 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP,
80002fee:	30 ab       	mov	r11,10
80002ff0:	48 ec       	lddpc	r12,80003028 <board_init+0x70>
80002ff2:	f0 1f 00 0d 	mcall	80003024 <board_init+0x6c>
			sizeof(SD_MMC_MCI_GPIO_MAP) / sizeof(SD_MMC_MCI_GPIO_MAP[0]));
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_CARD_DETECT);
80002ff6:	32 bc       	mov	r12,43
80002ff8:	f0 1f 00 0d 	mcall	8000302c <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_WRITE_PROTECT);
80002ffc:	36 cc       	mov	r12,108
80002ffe:	f0 1f 00 0c 	mcall	8000302c <board_init+0x74>

	// Configure Slot 1 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP_1,
80003002:	30 6b       	mov	r11,6
80003004:	48 bc       	lddpc	r12,80003030 <board_init+0x78>
80003006:	f0 1f 00 08 	mcall	80003024 <board_init+0x6c>
	sizeof(SD_MMC_MCI_GPIO_MAP_1) / sizeof(SD_MMC_MCI_GPIO_MAP_1[0]));
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_CARD_DETECT);
8000300a:	32 8c       	mov	r12,40
8000300c:	f0 1f 00 08 	mcall	8000302c <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_WRITE_PROTECT);
80003010:	32 6c       	mov	r12,38
80003012:	f0 1f 00 07 	mcall	8000302c <board_init+0x74>
		{AVR32_USART3_TXD_0_3_PIN, AVR32_USART3_TXD_0_3_FUNCTION },
	};
	gpio_enable_module(COMPORT3_GPIO_MAP,
			sizeof(COMPORT3_GPIO_MAP) / sizeof(COMPORT3_GPIO_MAP[0]));
#endif
}
80003016:	e3 cd 80 80 	ldm	sp++,r7,pc
8000301a:	00 00       	add	r0,r0
8000301c:	80 00       	ld.sh	r0,r0[0x0]
8000301e:	75 56       	ld.w	r6,r10[0x54]
80003020:	80 00       	ld.sh	r0,r0[0x0]
80003022:	d7 4c       	*unknown*
80003024:	80 00       	ld.sh	r0,r0[0x0]
80003026:	73 48       	ld.w	r8,r9[0x50]
80003028:	80 00       	ld.sh	r0,r0[0x0]
8000302a:	d7 54       	*unknown*
8000302c:	80 00       	ld.sh	r0,r0[0x0]
8000302e:	75 1c       	ld.w	r12,r10[0x44]
80003030:	80 00       	ld.sh	r0,r0[0x0]
80003032:	d7 68       	*unknown*

80003034 <LED_Off>:
  return Tst_bits(LED_State, leds);
}


void LED_Off(U32 leds)
{
80003034:	eb cd 40 80 	pushm	r7,lr
80003038:	1a 97       	mov	r7,sp
8000303a:	20 4d       	sub	sp,16
8000303c:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80003040:	4a 98       	lddpc	r8,800030e4 <LED_Off+0xb0>
80003042:	21 08       	sub	r8,16
80003044:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80003048:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000304c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003050:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80003054:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003058:	f0 09 11 ff 	rsub	r9,r8,-1
8000305c:	4a 38       	lddpc	r8,800030e8 <LED_Off+0xb4>
8000305e:	70 08       	ld.w	r8,r8[0x0]
80003060:	10 69       	and	r9,r8
80003062:	4a 28       	lddpc	r8,800030e8 <LED_Off+0xb4>
80003064:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80003066:	c3 78       	rjmp	800030d4 <LED_Off+0xa0>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80003068:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000306c:	5c 98       	brev	r8
8000306e:	f0 08 12 00 	clz	r8,r8
80003072:	5c 58       	castu.b	r8
80003074:	2f f8       	sub	r8,-1
80003076:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8000307a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000307e:	a5 68       	lsl	r8,0x4
80003080:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003084:	f2 08 00 08 	add	r8,r9,r8
80003088:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000308c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003090:	70 08       	ld.w	r8,r8[0x0]
80003092:	a9 68       	lsl	r8,0x8
80003094:	e0 28 f0 00 	sub	r8,61440
80003098:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
8000309c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030a0:	70 19       	ld.w	r9,r8[0x4]
800030a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030a6:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800030aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030ae:	70 19       	ld.w	r9,r8[0x4]
800030b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030b4:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800030b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030bc:	70 19       	ld.w	r9,r8[0x4]
800030be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030c2:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
800030c4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800030c8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800030cc:	f2 08 0a 48 	lsr	r8,r9,r8
800030d0:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800030d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800030d8:	58 08       	cp.w	r8,0
800030da:	cc 71       	brne	80003068 <LED_Off+0x34>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800030dc:	2f cd       	sub	sp,-16
800030de:	e3 cd 80 80 	ldm	sp++,r7,pc
800030e2:	00 00       	add	r0,r0
800030e4:	80 00       	ld.sh	r0,r0[0x0]
800030e6:	d7 74       	*unknown*
800030e8:	00 00       	add	r0,r0
800030ea:	00 10       	sub	r0,r0

800030ec <LED_On>:


void LED_On(U32 leds)
{
800030ec:	eb cd 40 80 	pushm	r7,lr
800030f0:	1a 97       	mov	r7,sp
800030f2:	20 4d       	sub	sp,16
800030f4:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
800030f8:	4a 88       	lddpc	r8,80003198 <LED_On+0xac>
800030fa:	21 08       	sub	r8,16
800030fc:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80003100:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003104:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003108:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
8000310c:	4a 48       	lddpc	r8,8000319c <LED_On+0xb0>
8000310e:	70 09       	ld.w	r9,r8[0x0]
80003110:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003114:	10 49       	or	r9,r8
80003116:	4a 28       	lddpc	r8,8000319c <LED_On+0xb0>
80003118:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000311a:	c3 78       	rjmp	80003188 <LED_On+0x9c>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
8000311c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003120:	5c 98       	brev	r8
80003122:	f0 08 12 00 	clz	r8,r8
80003126:	5c 58       	castu.b	r8
80003128:	2f f8       	sub	r8,-1
8000312a:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8000312e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003132:	a5 68       	lsl	r8,0x4
80003134:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003138:	f2 08 00 08 	add	r8,r9,r8
8000313c:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80003140:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003144:	70 08       	ld.w	r8,r8[0x0]
80003146:	a9 68       	lsl	r8,0x8
80003148:	e0 28 f0 00 	sub	r8,61440
8000314c:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80003150:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003154:	70 19       	ld.w	r9,r8[0x4]
80003156:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000315a:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000315e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003162:	70 19       	ld.w	r9,r8[0x4]
80003164:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003168:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000316c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003170:	70 19       	ld.w	r9,r8[0x4]
80003172:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003176:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80003178:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000317c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003180:	f2 08 0a 48 	lsr	r8,r9,r8
80003184:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80003188:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000318c:	58 08       	cp.w	r8,0
8000318e:	cc 71       	brne	8000311c <LED_On+0x30>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
80003190:	2f cd       	sub	sp,-16
80003192:	e3 cd 80 80 	ldm	sp++,r7,pc
80003196:	00 00       	add	r0,r0
80003198:	80 00       	ld.sh	r0,r0[0x0]
8000319a:	d7 74       	*unknown*
8000319c:	00 00       	add	r0,r0
8000319e:	00 10       	sub	r0,r0

800031a0 <et024006_Init>:
 *  @param cpu_hz CPU speed in Hz. This is needed for power up timings.
 *  @param hsb_hz HSB bus speed in Hz. This parameter is needed to set up the SMC.
 *  If SPI mode is used then this parameter is ignored.
 */
void et024006_Init( unsigned long cpu_hz, unsigned long hsb_hz )
{
800031a0:	eb cd 40 80 	pushm	r7,lr
800031a4:	1a 97       	mov	r7,sp
800031a6:	20 2d       	sub	sp,8
800031a8:	ef 4c ff fc 	st.w	r7[-4],r12
800031ac:	ef 4b ff f8 	st.w	r7[-8],r11
  tft_data.cpu_hz = cpu_hz;
800031b0:	49 08       	lddpc	r8,800031f0 <et024006_Init+0x50>
800031b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800031b6:	91 09       	st.w	r8[0x0],r9
  tft_data.hsb_hz = hsb_hz;
800031b8:	48 e8       	lddpc	r8,800031f0 <et024006_Init+0x50>
800031ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800031be:	91 19       	st.w	r8[0x4],r9

#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_SPI)
  et024006_InitSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
800031c0:	48 c8       	lddpc	r8,800031f0 <et024006_Init+0x50>
800031c2:	70 18       	ld.w	r8,r8[0x4]
800031c4:	10 9c       	mov	r12,r8
800031c6:	f0 1f 00 0c 	mcall	800031f4 <et024006_Init+0x54>
#endif
  et024006_SetupInterface();
800031ca:	f0 1f 00 0c 	mcall	800031f8 <et024006_Init+0x58>
  et024006_ResetDisplay();
800031ce:	f0 1f 00 0c 	mcall	800031fc <et024006_Init+0x5c>
  et024006_AdjustGamma();
800031d2:	f0 1f 00 0c 	mcall	80003200 <et024006_Init+0x60>
  et024006_GeneralSettings();
800031d6:	f0 1f 00 0c 	mcall	80003204 <et024006_Init+0x64>
  et024006_InterfaceSettings();
800031da:	f0 1f 00 0c 	mcall	80003208 <et024006_Init+0x68>
  et024006_PowerSettings();
800031de:	f0 1f 00 0c 	mcall	8000320c <et024006_Init+0x6c>
  et024006_PowerUp();
800031e2:	f0 1f 00 0c 	mcall	80003210 <et024006_Init+0x70>
  et024006_PowerOn();
800031e6:	f0 1f 00 0c 	mcall	80003214 <et024006_Init+0x74>
}
800031ea:	2f ed       	sub	sp,-8
800031ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800031f0:	00 00       	add	r0,r0
800031f2:	04 b8       	st.h	r2++,r8
800031f4:	80 00       	ld.sh	r0,r0[0x0]
800031f6:	6f e8       	ld.w	r8,r7[0x78]
800031f8:	80 00       	ld.sh	r0,r0[0x0]
800031fa:	39 a4       	mov	r4,-102
800031fc:	80 00       	ld.sh	r0,r0[0x0]
800031fe:	39 d0       	mov	r0,-99
80003200:	80 00       	ld.sh	r0,r0[0x0]
80003202:	3c 90       	mov	r0,-55
80003204:	80 00       	ld.sh	r0,r0[0x0]
80003206:	3e 1e       	mov	lr,-31
80003208:	80 00       	ld.sh	r0,r0[0x0]
8000320a:	41 ba       	lddsp	r10,sp[0x6c]
8000320c:	80 00       	ld.sh	r0,r0[0x0]
8000320e:	40 2c       	lddsp	r12,sp[0x8]
80003210:	80 00       	ld.sh	r0,r0[0x0]
80003212:	41 e8       	lddsp	r8,sp[0x78]
80003214:	80 00       	ld.sh	r0,r0[0x0]
80003216:	49 1c       	lddpc	r12,80003258 <et024006_DrawFilledRect+0x40>

80003218 <et024006_DrawFilledRect>:
  }
}


void et024006_DrawFilledRect( uint16_t x, uint16_t y, uint16_t width, uint16_t height, et024006_color_t color )
{
80003218:	eb cd 40 80 	pushm	r7,lr
8000321c:	1a 97       	mov	r7,sp
8000321e:	20 7d       	sub	sp,28
80003220:	ef 5c ff f4 	st.h	r7[-12],r12
80003224:	ef 5b ff f0 	st.h	r7[-16],r11
80003228:	ef 5a ff ec 	st.h	r7[-20],r10
8000322c:	ef 59 ff e8 	st.h	r7[-24],r9
80003230:	ef 58 ff e4 	st.h	r7[-28],r8
  Assert( y < ET024006_HEIGHT );
  Assert( width > 0 );
  Assert( height > 0 );

  // Compute bottom right point.
  uint16_t x2 = x + width - 1;
80003234:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80003238:	ef 08 ff ec 	ld.sh	r8,r7[-20]
8000323c:	f2 08 00 08 	add	r8,r9,r8
80003240:	5c 88       	casts.h	r8
80003242:	20 18       	sub	r8,1
80003244:	ef 58 ff f8 	st.h	r7[-8],r8
  uint16_t y2 = y + height - 1;
80003248:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000324c:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80003250:	f2 08 00 08 	add	r8,r9,r8
80003254:	5c 88       	casts.h	r8
80003256:	20 18       	sub	r8,1
80003258:	ef 58 ff fa 	st.h	r7[-6],r8
  // More sanity check.
  Assert( x2 < ET024006_WIDTH );
  Assert( y2 < ET024006_HEIGHT );

  // Set up draw area and copy pixel color until area is full.
  et024006_SetLimits( x, y, x2, y2 );
8000325c:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80003260:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80003264:	ef 1b ff f0 	ld.uh	r11,r7[-16]
80003268:	ef 18 ff f4 	ld.uh	r8,r7[-12]
8000326c:	10 9c       	mov	r12,r8
8000326e:	f0 1f 00 0b 	mcall	80003298 <et024006_DrawFilledRect+0x80>
  uint32_t count = (uint32_t) width * height;
80003272:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80003276:	ef 18 ff e8 	ld.uh	r8,r7[-24]
8000327a:	f2 08 02 48 	mul	r8,r9,r8
8000327e:	ef 48 ff fc 	st.w	r7[-4],r8
  et024006_DuplicatePixel( color, count );
80003282:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80003286:	ee fb ff fc 	ld.w	r11,r7[-4]
8000328a:	10 9c       	mov	r12,r8
8000328c:	f0 1f 00 04 	mcall	8000329c <et024006_DrawFilledRect+0x84>
}
80003290:	2f 9d       	sub	sp,-28
80003292:	e3 cd 80 80 	ldm	sp++,r7,pc
80003296:	00 00       	add	r0,r0
80003298:	80 00       	ld.sh	r0,r0[0x0]
8000329a:	36 9e       	mov	lr,105
8000329c:	80 00       	ld.sh	r0,r0[0x0]
8000329e:	38 f8       	mov	r8,-113

800032a0 <et024006_PrintString>:
void et024006_PrintString(char *lcd_string, const unsigned char *font_style,
                          uint16_t x,
                          uint16_t y,
                          uint16_t fcolor,
                          int bcolor)
{
800032a0:	eb cd 40 c0 	pushm	r6-r7,lr
800032a4:	1a 97       	mov	r7,sp
800032a6:	20 9d       	sub	sp,36
800032a8:	ee c6 ff f4 	sub	r6,r7,-12
800032ac:	ef 4c ff ec 	st.w	r7[-20],r12
800032b0:	ef 4b ff e8 	st.w	r7[-24],r11
800032b4:	ef 5a ff e4 	st.h	r7[-28],r10
800032b8:	ef 59 ff e0 	st.h	r7[-32],r9
800032bc:	ef 58 ff dc 	st.h	r7[-36],r8
  uint16_t  row, col;
  unsigned char mask = 0, xfont, yfont, font_size;
800032c0:	30 08       	mov	r8,0
800032c2:	ef 68 ff f4 	st.b	r7[-12],r8
  const unsigned char *data;
  uint16_t saved_x = x;
800032c6:	ef 08 ff e4 	ld.sh	r8,r7[-28]
800032ca:	ef 58 ff fc 	st.h	r7[-4],r8

  // if string is empty there is nothing to do
  if( *lcd_string == '\0')
800032ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800032d2:	11 88       	ld.ub	r8,r8[0x0]
800032d4:	58 08       	cp.w	r8,0
800032d6:	e0 80 01 a4 	breq	8000361e <et024006_PrintString+0x37e>
    return;

  data = font_style;  // point to the start of the font table
800032da:	ee f8 ff e8 	ld.w	r8,r7[-24]
800032de:	ef 48 ff f8 	st.w	r7[-8],r8
  xfont = *data;  // get font x width
800032e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032e6:	11 88       	ld.ub	r8,r8[0x0]
800032e8:	ef 68 ff f5 	st.b	r7[-11],r8
  data++;
800032ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032f0:	2f f8       	sub	r8,-1
800032f2:	ef 48 ff f8 	st.w	r7[-8],r8
  yfont = *data;  // get font y length
800032f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032fa:	11 88       	ld.ub	r8,r8[0x0]
800032fc:	ef 68 ff f6 	st.b	r7[-10],r8
  data++;
80003300:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003304:	2f f8       	sub	r8,-1
80003306:	ef 48 ff f8 	st.w	r7[-8],r8
  font_size = *data;  // get data bytes per font
8000330a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000330e:	11 88       	ld.ub	r8,r8[0x0]
80003310:	ef 68 ff f7 	st.b	r7[-9],r8

  // If transparent mode
  if(bcolor == -1)
80003314:	6c 08       	ld.w	r8,r6[0x0]
80003316:	5b f8       	cp.w	r8,-1
80003318:	e0 81 00 c8 	brne	800034a8 <et024006_PrintString+0x208>
  {
    // set window to display size
    et024006_SetLimits( 0, 0, ET024006_WIDTH - 1, ET024006_HEIGHT - 1 );
8000331c:	e0 69 00 ef 	mov	r9,239
80003320:	e0 6a 01 3f 	mov	r10,319
80003324:	30 0b       	mov	r11,0
80003326:	30 0c       	mov	r12,0
80003328:	f0 1f 00 c0 	mcall	80003628 <et024006_PrintString+0x388>

    do
    {
      if(*lcd_string =='\n') {
8000332c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003330:	11 89       	ld.ub	r9,r8[0x0]
80003332:	30 a8       	mov	r8,10
80003334:	f0 09 18 00 	cp.b	r9,r8
80003338:	c1 31       	brne	8000335e <et024006_PrintString+0xbe>
        x = saved_x;
8000333a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000333e:	ef 58 ff e4 	st.h	r7[-28],r8
        y += yfont;
80003342:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80003346:	ef 09 ff e0 	ld.sh	r9,r7[-32]
8000334a:	f2 08 00 08 	add	r8,r9,r8
8000334e:	ef 58 ff e0 	st.h	r7[-32],r8
        lcd_string++;  // next character in string
80003352:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003356:	2f f8       	sub	r8,-1
80003358:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
8000335c:	c9 f8       	rjmp	8000349a <et024006_PrintString+0x1fa>
      } else if(*lcd_string =='\t') {
8000335e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003362:	11 89       	ld.ub	r9,r8[0x0]
80003364:	30 98       	mov	r8,9
80003366:	f0 09 18 00 	cp.b	r9,r8
8000336a:	c0 f1       	brne	80003388 <et024006_PrintString+0xe8>
        x += xfont;
8000336c:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80003370:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80003374:	f2 08 00 08 	add	r8,r9,r8
80003378:	ef 58 ff e4 	st.h	r7[-28],r8
        lcd_string++;  // next character in string
8000337c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003380:	2f f8       	sub	r8,-1
80003382:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
80003386:	c8 a8       	rjmp	8000349a <et024006_PrintString+0x1fa>
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
80003388:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000338c:	11 89       	ld.ub	r9,r8[0x0]
8000338e:	31 f8       	mov	r8,31
80003390:	f0 09 18 00 	cp.b	r9,r8
80003394:	e0 88 00 1d 	brls	800033ce <et024006_PrintString+0x12e>
80003398:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000339c:	11 88       	ld.ub	r8,r8[0x0]
8000339e:	10 99       	mov	r9,r8
800033a0:	30 08       	mov	r8,0
800033a2:	f0 09 18 00 	cp.b	r9,r8
800033a6:	c1 45       	brlt	800033ce <et024006_PrintString+0x12e>
      {
        // point to character data in font table
        data =  (font_style + font_size) +  // header offset
800033a8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
          (font_size * (int)(*lcd_string - 32)); // character select
800033ac:	ef 3a ff f7 	ld.ub	r10,r7[-9]
800033b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800033b4:	11 88       	ld.ub	r8,r8[0x0]
800033b6:	22 08       	sub	r8,32
800033b8:	f4 08 02 48 	mul	r8,r10,r8
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
      {
        // point to character data in font table
        data =  (font_style + font_size) +  // header offset
800033bc:	f2 08 00 08 	add	r8,r9,r8
800033c0:	ee f9 ff e8 	ld.w	r9,r7[-24]
800033c4:	f2 08 00 08 	add	r8,r9,r8
800033c8:	ef 48 ff f8 	st.w	r7[-8],r8
        x += xfont;
        lcd_string++;  // next character in string
        continue;
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
800033cc:	c1 28       	rjmp	800033f0 <et024006_PrintString+0x150>
        data =  (font_style + font_size) +  // header offset
          (font_size * (int)(*lcd_string - 32)); // character select
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;
800033ce:	ef 3a ff f7 	ld.ub	r10,r7[-9]
800033d2:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800033d6:	12 98       	mov	r8,r9
800033d8:	a1 78       	lsl	r8,0x1
800033da:	12 08       	add	r8,r9
800033dc:	a5 78       	lsl	r8,0x5
800033de:	12 18       	sub	r8,r9
800033e0:	f4 08 00 08 	add	r8,r10,r8
800033e4:	ee f9 ff e8 	ld.w	r9,r7[-24]
800033e8:	f2 08 00 08 	add	r8,r9,r8
800033ec:	ef 48 ff f8 	st.w	r7[-8],r8

      for (row = y; row < (y + yfont); row++)
800033f0:	ef 08 ff e0 	ld.sh	r8,r7[-32]
800033f4:	ef 58 ff f0 	st.h	r7[-16],r8
800033f8:	c3 a8       	rjmp	8000346c <et024006_PrintString+0x1cc>
      {
        mask = 0x80;
800033fa:	38 08       	mov	r8,-128
800033fc:	ef 68 ff f4 	st.b	r7[-12],r8
        for (col = x; col < (x + xfont); col++)
80003400:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80003404:	ef 58 ff f2 	st.h	r7[-14],r8
80003408:	c1 e8       	rjmp	80003444 <et024006_PrintString+0x1a4>
        {
          if (*data & mask) // if pixel data then put dot
8000340a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000340e:	11 89       	ld.ub	r9,r8[0x0]
80003410:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003414:	f3 e8 00 08 	and	r8,r9,r8
80003418:	5c 58       	castu.b	r8
8000341a:	c0 b0       	breq	80003430 <et024006_PrintString+0x190>
          {
            et024006_DrawQuickPixel( col, row, fcolor );
8000341c:	ef 1a ff dc 	ld.uh	r10,r7[-36]
80003420:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80003424:	ef 18 ff f2 	ld.uh	r8,r7[-14]
80003428:	12 9b       	mov	r11,r9
8000342a:	10 9c       	mov	r12,r8
8000342c:	f0 1f 00 80 	mcall	8000362c <et024006_PrintString+0x38c>
          }
          mask >>= 1;
80003430:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003434:	a1 98       	lsr	r8,0x1
80003436:	ef 68 ff f4 	st.b	r7[-12],r8
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
8000343a:	ef 08 ff f2 	ld.sh	r8,r7[-14]
8000343e:	2f f8       	sub	r8,-1
80003440:	ef 58 ff f2 	st.h	r7[-14],r8
80003444:	ef 19 ff f2 	ld.uh	r9,r7[-14]
80003448:	ef 1a ff e4 	ld.uh	r10,r7[-28]
8000344c:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80003450:	f4 08 00 08 	add	r8,r10,r8
80003454:	10 39       	cp.w	r9,r8
80003456:	cd a5       	brlt	8000340a <et024006_PrintString+0x16a>
            et024006_DrawQuickPixel( col, row, fcolor );
          }
          mask >>= 1;
        }
        // Next row data
        data++;
80003458:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000345c:	2f f8       	sub	r8,-1
8000345e:	ef 48 ff f8 	st.w	r7[-8],r8
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
80003462:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80003466:	2f f8       	sub	r8,-1
80003468:	ef 58 ff f0 	st.h	r7[-16],r8
8000346c:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80003470:	ef 1a ff e0 	ld.uh	r10,r7[-32]
80003474:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80003478:	f4 08 00 08 	add	r8,r10,r8
8000347c:	10 39       	cp.w	r9,r8
8000347e:	cb e5       	brlt	800033fa <et024006_PrintString+0x15a>
        }
        // Next row data
        data++;
      }
      // move to next character start pixel
      x += xfont;
80003480:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80003484:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80003488:	f2 08 00 08 	add	r8,r9,r8
8000348c:	ef 58 ff e4 	st.h	r7[-28],r8
      lcd_string++;  // next character in string
80003490:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003494:	2f f8       	sub	r8,-1
80003496:	ef 48 ff ec 	st.w	r7[-20],r8

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
8000349a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000349e:	11 88       	ld.ub	r8,r8[0x0]
800034a0:	58 08       	cp.w	r8,0
800034a2:	fe 91 ff 45 	brne	8000332c <et024006_PrintString+0x8c>
800034a6:	cb d8       	rjmp	80003620 <et024006_PrintString+0x380>
  }
  else
  {
    do
    {
      if(*lcd_string =='\n') {
800034a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800034ac:	11 89       	ld.ub	r9,r8[0x0]
800034ae:	30 a8       	mov	r8,10
800034b0:	f0 09 18 00 	cp.b	r9,r8
800034b4:	c1 31       	brne	800034da <et024006_PrintString+0x23a>
        x = saved_x;
800034b6:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800034ba:	ef 58 ff e4 	st.h	r7[-28],r8
        y += yfont;
800034be:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800034c2:	ef 09 ff e0 	ld.sh	r9,r7[-32]
800034c6:	f2 08 00 08 	add	r8,r9,r8
800034ca:	ef 58 ff e0 	st.h	r7[-32],r8
        lcd_string++;  // next character in string
800034ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800034d2:	2f f8       	sub	r8,-1
800034d4:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
800034d8:	c9 c8       	rjmp	80003610 <et024006_PrintString+0x370>
      } else if(*lcd_string =='\t') {
800034da:	ee f8 ff ec 	ld.w	r8,r7[-20]
800034de:	11 89       	ld.ub	r9,r8[0x0]
800034e0:	30 98       	mov	r8,9
800034e2:	f0 09 18 00 	cp.b	r9,r8
800034e6:	c0 f1       	brne	80003504 <et024006_PrintString+0x264>
        x += xfont;
800034e8:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800034ec:	ef 09 ff e4 	ld.sh	r9,r7[-28]
800034f0:	f2 08 00 08 	add	r8,r9,r8
800034f4:	ef 58 ff e4 	st.h	r7[-28],r8
        lcd_string++;  // next character in string
800034f8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800034fc:	2f f8       	sub	r8,-1
800034fe:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
80003502:	c8 78       	rjmp	80003610 <et024006_PrintString+0x370>
      }
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
80003504:	ef 39 ff f7 	ld.ub	r9,r7[-9]
        (font_size * (int)(*lcd_string - 32)); // character select
80003508:	ef 3a ff f7 	ld.ub	r10,r7[-9]
8000350c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003510:	11 88       	ld.ub	r8,r8[0x0]
80003512:	22 08       	sub	r8,32
80003514:	f4 08 02 48 	mul	r8,r10,r8
        x += xfont;
        lcd_string++;  // next character in string
        continue;
      }
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
80003518:	f2 08 00 08 	add	r8,r9,r8
8000351c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003520:	f2 08 00 08 	add	r8,r9,r8
80003524:	ef 48 ff f8 	st.w	r7[-8],r8
        (font_size * (int)(*lcd_string - 32)); // character select

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
80003528:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000352c:	ef 09 ff e0 	ld.sh	r9,r7[-32]
80003530:	f2 08 00 08 	add	r8,r9,r8
80003534:	5c 88       	casts.h	r8
80003536:	20 18       	sub	r8,1
80003538:	5c 88       	casts.h	r8
8000353a:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
8000353e:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80003542:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80003546:	f2 08 00 08 	add	r8,r9,r8
8000354a:	5c 88       	casts.h	r8
8000354c:	20 18       	sub	r8,1
8000354e:	5c 88       	casts.h	r8
80003550:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80003554:	ef 1b ff e0 	ld.uh	r11,r7[-32]
80003558:	ef 18 ff e4 	ld.uh	r8,r7[-28]
8000355c:	18 99       	mov	r9,r12
8000355e:	10 9c       	mov	r12,r8
80003560:	f0 1f 00 32 	mcall	80003628 <et024006_PrintString+0x388>
80003564:	32 28       	mov	r8,34
80003566:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000356a:	fc 19 c0 00 	movh	r9,0xc000
8000356e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003572:	b2 08       	st.h	r9[0x0],r8

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
80003574:	30 08       	mov	r8,0
80003576:	ef 58 ff f0 	st.h	r7[-16],r8
8000357a:	c3 78       	rjmp	800035e8 <et024006_PrintString+0x348>
      {
        mask = 0x80;
8000357c:	38 08       	mov	r8,-128
8000357e:	ef 68 ff f4 	st.b	r7[-12],r8
        for (col = 0; col < xfont; col++)
80003582:	30 08       	mov	r8,0
80003584:	ef 58 ff f2 	st.h	r7[-14],r8
80003588:	c1 f8       	rjmp	800035c6 <et024006_PrintString+0x326>
        {
          if (*data & mask) // if pixel data then put dot
8000358a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000358e:	11 89       	ld.ub	r9,r8[0x0]
80003590:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003594:	f3 e8 00 08 	and	r8,r9,r8
80003598:	5c 58       	castu.b	r8
8000359a:	c0 70       	breq	800035a8 <et024006_PrintString+0x308>
          {
            *ET024006_PARAM_ADDR = fcolor;
8000359c:	fc 19 c0 20 	movh	r9,0xc020
800035a0:	ef 08 ff dc 	ld.sh	r8,r7[-36]
800035a4:	b2 08       	st.h	r9[0x0],r8
800035a6:	c0 68       	rjmp	800035b2 <et024006_PrintString+0x312>
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
800035a8:	fc 19 c0 20 	movh	r9,0xc020
800035ac:	6c 08       	ld.w	r8,r6[0x0]
800035ae:	5c 88       	casts.h	r8
800035b0:	b2 08       	st.h	r9[0x0],r8
          }
          mask >>= 1;
800035b2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800035b6:	a1 98       	lsr	r8,0x1
800035b8:	ef 68 ff f4 	st.b	r7[-12],r8
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
800035bc:	ef 08 ff f2 	ld.sh	r8,r7[-14]
800035c0:	2f f8       	sub	r8,-1
800035c2:	ef 58 ff f2 	st.h	r7[-14],r8
800035c6:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800035ca:	ef 09 ff f2 	ld.sh	r9,r7[-14]
800035ce:	f0 09 19 00 	cp.h	r9,r8
800035d2:	cd c3       	brcs	8000358a <et024006_PrintString+0x2ea>
          }
          mask >>= 1;
        }

        // Next row data
        data++;
800035d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035d8:	2f f8       	sub	r8,-1
800035da:	ef 48 ff f8 	st.w	r7[-8],r8

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
800035de:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800035e2:	2f f8       	sub	r8,-1
800035e4:	ef 58 ff f0 	st.h	r7[-16],r8
800035e8:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800035ec:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800035f0:	f0 09 19 00 	cp.h	r9,r8
800035f4:	cc 43       	brcs	8000357c <et024006_PrintString+0x2dc>

        // Next row data
        data++;
      }
      // move to next character start pixel
      x += xfont;
800035f6:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800035fa:	ef 09 ff e4 	ld.sh	r9,r7[-28]
800035fe:	f2 08 00 08 	add	r8,r9,r8
80003602:	ef 58 ff e4 	st.h	r7[-28],r8
      lcd_string++;  // next character in string
80003606:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000360a:	2f f8       	sub	r8,-1
8000360c:	ef 48 ff ec 	st.w	r7[-20],r8

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
80003610:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003614:	11 88       	ld.ub	r8,r8[0x0]
80003616:	58 08       	cp.w	r8,0
80003618:	fe 91 ff 48 	brne	800034a8 <et024006_PrintString+0x208>
8000361c:	c0 28       	rjmp	80003620 <et024006_PrintString+0x380>
  const unsigned char *data;
  uint16_t saved_x = x;

  // if string is empty there is nothing to do
  if( *lcd_string == '\0')
    return;
8000361e:	d7 03       	nop
      x += xfont;
      lcd_string++;  // next character in string

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
  }
}
80003620:	2f 7d       	sub	sp,-36
80003622:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003626:	00 00       	add	r0,r0
80003628:	80 00       	ld.sh	r0,r0[0x0]
8000362a:	36 9e       	mov	lr,105
8000362c:	80 00       	ld.sh	r0,r0[0x0]
8000362e:	38 a8       	mov	r8,-118

80003630 <et024006_SetRegister>:
#endif

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
80003630:	eb cd 40 80 	pushm	r7,lr
80003634:	1a 97       	mov	r7,sp
80003636:	20 3d       	sub	sp,12
80003638:	18 99       	mov	r9,r12
8000363a:	16 98       	mov	r8,r11
8000363c:	ef 69 ff f8 	st.b	r7[-8],r9
80003640:	ef 68 ff f4 	st.b	r7[-12],r8
  uint8_t value = et024006_ReadRegister( address );
80003644:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003648:	ef 68 ff fd 	st.b	r7[-3],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ uint8_t et024006_ReadRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000364c:	fc 19 c0 00 	movh	r9,0xc000
80003650:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80003654:	b2 08       	st.h	r9[0x0],r8
  return *ET024006_PARAM_ADDR;
80003656:	fc 18 c0 20 	movh	r8,0xc020
8000365a:	90 08       	ld.sh	r8,r8[0x0]
8000365c:	5c 88       	casts.h	r8
8000365e:	5c 58       	castu.b	r8

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
80003660:	ef 68 ff fc 	st.b	r7[-4],r8
  value |= bitmask;
80003664:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003668:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000366c:	f3 e8 10 08 	or	r8,r9,r8
80003670:	ef 68 ff fc 	st.b	r7[-4],r8
  et024006_WriteRegister( address, value );
80003674:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003678:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000367c:	ef 69 ff ff 	st.b	r7[-1],r9
80003680:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003684:	fc 19 c0 00 	movh	r9,0xc000
80003688:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000368c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000368e:	fc 19 c0 20 	movh	r9,0xc020
80003692:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80003696:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
  value |= bitmask;
  et024006_WriteRegister( address, value );
}
80003698:	2f dd       	sub	sp,-12
8000369a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000369e <et024006_SetLimits>:
/*! \brief Sets the display limits according to the corner coordinates.
 *  Writing to the display will result in writing to the area specified through
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
8000369e:	eb cd 40 80 	pushm	r7,lr
800036a2:	1a 97       	mov	r7,sp
800036a4:	20 8d       	sub	sp,32
800036a6:	12 98       	mov	r8,r9
800036a8:	18 99       	mov	r9,r12
800036aa:	ef 59 ff ec 	st.h	r7[-20],r9
800036ae:	16 99       	mov	r9,r11
800036b0:	ef 59 ff e8 	st.h	r7[-24],r9
800036b4:	14 99       	mov	r9,r10
800036b6:	ef 59 ff e4 	st.h	r7[-28],r9
800036ba:	ef 58 ff e0 	st.h	r7[-32],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
800036be:	ef 18 ff ec 	ld.uh	r8,r7[-20]
800036c2:	a9 88       	lsr	r8,0x8
800036c4:	5c 88       	casts.h	r8
800036c6:	5c 58       	castu.b	r8
800036c8:	30 29       	mov	r9,2
800036ca:	ef 69 ff f1 	st.b	r7[-15],r9
800036ce:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800036d2:	fc 19 c0 00 	movh	r9,0xc000
800036d6:	ef 38 ff f1 	ld.ub	r8,r7[-15]
800036da:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800036dc:	fc 19 c0 20 	movh	r9,0xc020
800036e0:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800036e4:	b2 08       	st.h	r9[0x0],r8
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
800036e6:	ef 08 ff ec 	ld.sh	r8,r7[-20]
800036ea:	5c 58       	castu.b	r8
800036ec:	30 39       	mov	r9,3
800036ee:	ef 69 ff f3 	st.b	r7[-13],r9
800036f2:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800036f6:	fc 19 c0 00 	movh	r9,0xc000
800036fa:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800036fe:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003700:	fc 19 c0 20 	movh	r9,0xc020
80003704:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80003708:	b2 08       	st.h	r9[0x0],r8
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
8000370a:	ef 18 ff e4 	ld.uh	r8,r7[-28]
8000370e:	a9 88       	lsr	r8,0x8
80003710:	5c 88       	casts.h	r8
80003712:	5c 58       	castu.b	r8
80003714:	30 49       	mov	r9,4
80003716:	ef 69 ff f5 	st.b	r7[-11],r9
8000371a:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000371e:	fc 19 c0 00 	movh	r9,0xc000
80003722:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80003726:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003728:	fc 19 c0 20 	movh	r9,0xc020
8000372c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003730:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
80003732:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80003736:	5c 58       	castu.b	r8
80003738:	30 59       	mov	r9,5
8000373a:	ef 69 ff f7 	st.b	r7[-9],r9
8000373e:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003742:	fc 19 c0 00 	movh	r9,0xc000
80003746:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000374a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000374c:	fc 19 c0 20 	movh	r9,0xc020
80003750:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80003754:	b2 08       	st.h	r9[0x0],r8
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
80003756:	ef 18 ff e8 	ld.uh	r8,r7[-24]
8000375a:	a9 88       	lsr	r8,0x8
8000375c:	5c 88       	casts.h	r8
8000375e:	5c 58       	castu.b	r8
80003760:	30 69       	mov	r9,6
80003762:	ef 69 ff f9 	st.b	r7[-7],r9
80003766:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000376a:	fc 19 c0 00 	movh	r9,0xc000
8000376e:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003772:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003774:	fc 19 c0 20 	movh	r9,0xc020
80003778:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000377c:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
8000377e:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80003782:	5c 58       	castu.b	r8
80003784:	30 79       	mov	r9,7
80003786:	ef 69 ff fb 	st.b	r7[-5],r9
8000378a:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000378e:	fc 19 c0 00 	movh	r9,0xc000
80003792:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003796:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003798:	fc 19 c0 20 	movh	r9,0xc020
8000379c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800037a0:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
800037a2:	ef 18 ff e0 	ld.uh	r8,r7[-32]
800037a6:	a9 88       	lsr	r8,0x8
800037a8:	5c 88       	casts.h	r8
800037aa:	5c 58       	castu.b	r8
800037ac:	30 89       	mov	r9,8
800037ae:	ef 69 ff fd 	st.b	r7[-3],r9
800037b2:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800037b6:	fc 19 c0 00 	movh	r9,0xc000
800037ba:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800037be:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800037c0:	fc 19 c0 20 	movh	r9,0xc020
800037c4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800037c8:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
800037ca:	ef 08 ff e0 	ld.sh	r8,r7[-32]
800037ce:	5c 58       	castu.b	r8
800037d0:	30 99       	mov	r9,9
800037d2:	ef 69 ff ff 	st.b	r7[-1],r9
800037d6:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800037da:	fc 19 c0 00 	movh	r9,0xc000
800037de:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800037e2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800037e4:	fc 19 c0 20 	movh	r9,0xc020
800037e8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800037ec:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
}
800037ee:	2f 8d       	sub	sp,-32
800037f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800037f4 <et024006_SetQuickLimits>:

/*! \brief Set the starting point of the next read/write from/to RAM.
 *  This sets only the start point of the RAM window.
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
800037f4:	eb cd 40 80 	pushm	r7,lr
800037f8:	1a 97       	mov	r7,sp
800037fa:	20 4d       	sub	sp,16
800037fc:	18 99       	mov	r9,r12
800037fe:	16 98       	mov	r8,r11
80003800:	ef 59 ff f4 	st.h	r7[-12],r9
80003804:	ef 58 ff f0 	st.h	r7[-16],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
80003808:	ef 18 ff f4 	ld.uh	r8,r7[-12]
8000380c:	a9 88       	lsr	r8,0x8
8000380e:	5c 88       	casts.h	r8
80003810:	5c 58       	castu.b	r8
80003812:	30 29       	mov	r9,2
80003814:	ef 69 ff f9 	st.b	r7[-7],r9
80003818:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000381c:	fc 19 c0 00 	movh	r9,0xc000
80003820:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003824:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003826:	fc 19 c0 20 	movh	r9,0xc020
8000382a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000382e:	b2 08       	st.h	r9[0x0],r8
 *  This sets only the start point of the RAM window.
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
80003830:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80003834:	5c 58       	castu.b	r8
80003836:	30 39       	mov	r9,3
80003838:	ef 69 ff fb 	st.b	r7[-5],r9
8000383c:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003840:	fc 19 c0 00 	movh	r9,0xc000
80003844:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003848:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000384a:	fc 19 c0 20 	movh	r9,0xc020
8000384e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80003852:	b2 08       	st.h	r9[0x0],r8
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
80003854:	ef 18 ff f0 	ld.uh	r8,r7[-16]
80003858:	a9 88       	lsr	r8,0x8
8000385a:	5c 88       	casts.h	r8
8000385c:	5c 58       	castu.b	r8
8000385e:	30 69       	mov	r9,6
80003860:	ef 69 ff fd 	st.b	r7[-3],r9
80003864:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003868:	fc 19 c0 00 	movh	r9,0xc000
8000386c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80003870:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003872:	fc 19 c0 20 	movh	r9,0xc020
80003876:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000387a:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y & 0xff) );
8000387c:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80003880:	5c 58       	castu.b	r8
80003882:	30 79       	mov	r9,7
80003884:	ef 69 ff ff 	st.b	r7[-1],r9
80003888:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000388c:	fc 19 c0 00 	movh	r9,0xc000
80003890:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003894:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003896:	fc 19 c0 20 	movh	r9,0xc020
8000389a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000389e:	b2 08       	st.h	r9[0x0],r8
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y & 0xff) );
}
800038a0:	2f cd       	sub	sp,-16
800038a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800038a6:	d7 03       	nop

800038a8 <et024006_DrawQuickPixel>:


static void et024006_DrawQuickPixel( uint16_t x, uint16_t y, et024006_color_t color )
{
800038a8:	eb cd 40 80 	pushm	r7,lr
800038ac:	1a 97       	mov	r7,sp
800038ae:	20 4d       	sub	sp,16
800038b0:	16 99       	mov	r9,r11
800038b2:	14 98       	mov	r8,r10
800038b4:	18 9a       	mov	r10,r12
800038b6:	ef 5a ff f8 	st.h	r7[-8],r10
800038ba:	ef 59 ff f4 	st.h	r7[-12],r9
800038be:	ef 58 ff f0 	st.h	r7[-16],r8
  // Sanity check on parameters.
  Assert( x < ET024006_WIDTH );
  Assert( y < ET024006_HEIGHT );

  // Set up draw area and write the two bytes of pixel data.
  et024006_SetQuickLimits( x, y );
800038c2:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800038c6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800038ca:	12 9b       	mov	r11,r9
800038cc:	10 9c       	mov	r12,r8
800038ce:	f0 1f 00 0a 	mcall	800038f4 <et024006_DrawQuickPixel+0x4c>
800038d2:	32 28       	mov	r8,34
800038d4:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800038d8:	fc 19 c0 00 	movh	r9,0xc000
800038dc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800038e0:	b2 08       	st.h	r9[0x0],r8
  et024006_SendSPI( color & 0xff );
  et024006_SendSPI( color >> 8 );
  et024006_DeselectSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  *ET024006_PARAM_ADDR = color;
800038e2:	fc 19 c0 20 	movh	r9,0xc020
800038e6:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800038ea:	b2 08       	st.h	r9[0x0],r8
#endif

}
800038ec:	2f cd       	sub	sp,-16
800038ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800038f2:	00 00       	add	r0,r0
800038f4:	80 00       	ld.sh	r0,r0[0x0]
800038f6:	37 f4       	mov	r4,127

800038f8 <et024006_DuplicatePixel>:


/* --- Pixel block operations --- */

static void et024006_DuplicatePixel( et024006_color_t color, uint32_t count )
{
800038f8:	eb cd 40 80 	pushm	r7,lr
800038fc:	1a 97       	mov	r7,sp
800038fe:	20 3d       	sub	sp,12
80003900:	18 98       	mov	r8,r12
80003902:	ef 4b ff f4 	st.w	r7[-12],r11
80003906:	ef 58 ff f8 	st.h	r7[-8],r8
8000390a:	32 28       	mov	r8,34
8000390c:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003910:	fc 19 c0 00 	movh	r9,0xc000
80003914:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003918:	b2 08       	st.h	r9[0x0],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
8000391a:	c2 e8       	rjmp	80003976 <et024006_DuplicatePixel+0x7e>
    *ET024006_PARAM_ADDR = color;
8000391c:	fc 19 c0 20 	movh	r9,0xc020
80003920:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80003924:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80003926:	fc 19 c0 20 	movh	r9,0xc020
8000392a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000392e:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80003930:	fc 19 c0 20 	movh	r9,0xc020
80003934:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80003938:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
8000393a:	fc 19 c0 20 	movh	r9,0xc020
8000393e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80003942:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80003944:	fc 19 c0 20 	movh	r9,0xc020
80003948:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000394c:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
8000394e:	fc 19 c0 20 	movh	r9,0xc020
80003952:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80003956:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80003958:	fc 19 c0 20 	movh	r9,0xc020
8000395c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80003960:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80003962:	fc 19 c0 20 	movh	r9,0xc020
80003966:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000396a:	b2 08       	st.h	r9[0x0],r8
    count-=8;
8000396c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003970:	20 88       	sub	r8,8
80003972:	ef 48 ff f4 	st.w	r7[-12],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80003976:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000397a:	58 78       	cp.w	r8,7
8000397c:	fe 9b ff d0 	brhi	8000391c <et024006_DuplicatePixel+0x24>
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80003980:	c0 b8       	rjmp	80003996 <et024006_DuplicatePixel+0x9e>
    *ET024006_PARAM_ADDR = color;
80003982:	fc 19 c0 20 	movh	r9,0xc020
80003986:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000398a:	b2 08       	st.h	r9[0x0],r8
    --count;
8000398c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003990:	20 18       	sub	r8,1
80003992:	ef 48 ff f4 	st.w	r7[-12],r8
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80003996:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000399a:	58 08       	cp.w	r8,0
8000399c:	cf 31       	brne	80003982 <et024006_DuplicatePixel+0x8a>
    }
  }

  et024006_DeselectSPI();
#endif
}
8000399e:	2f dd       	sub	sp,-12
800039a0:	e3 cd 80 80 	ldm	sp++,r7,pc

800039a4 <et024006_SetupInterface>:
                SPI_MASTER_bm);          // in master mode
}
#endif

static void et024006_SetupInterface( void )
{
800039a4:	eb cd 40 80 	pushm	r7,lr
800039a8:	1a 97       	mov	r7,sp

  // et024006_TE (tearing sync) signal from display is input
  // without any pull resistors
  gpio_enable_gpio_pin(ET024006DHU_TE_PIN);
800039aa:	30 0c       	mov	r12,0
800039ac:	f0 1f 00 06 	mcall	800039c4 <et024006_SetupInterface+0x20>

  // Backlight pin (PWM) for display is output
  gpio_enable_module_pin(ET024006DHU_BL_PIN, ET024006DHU_BL_FUNCTION);
800039b0:	30 2b       	mov	r11,2
800039b2:	30 9c       	mov	r12,9
800039b4:	f0 1f 00 05 	mcall	800039c8 <et024006_SetupInterface+0x24>
  // Turns backlight ON
  /*TODO Add backlight driver */

  // Reset pin for display is output
  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
800039b8:	34 2c       	mov	r12,66
800039ba:	f0 1f 00 05 	mcall	800039cc <et024006_SetupInterface+0x28>
}
800039be:	e3 cd 80 80 	ldm	sp++,r7,pc
800039c2:	00 00       	add	r0,r0
800039c4:	80 00       	ld.sh	r0,r0[0x0]
800039c6:	74 cc       	ld.w	r12,r10[0x30]
800039c8:	80 00       	ld.sh	r0,r0[0x0]
800039ca:	73 bc       	ld.w	r12,r9[0x6c]
800039cc:	80 00       	ld.sh	r0,r0[0x0]
800039ce:	77 3e       	ld.w	lr,r11[0x4c]

800039d0 <et024006_ResetDisplay>:

/*! \brief Does a hard reset of the display.
 */
static void et024006_ResetDisplay( void )
{
800039d0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800039d4:	1a 97       	mov	r7,sp
800039d6:	21 ad       	sub	sp,104
  // clear reset line
  gpio_clr_gpio_pin(ET024006DHU_RESET_PIN);
800039d8:	34 2c       	mov	r12,66
800039da:	f0 1f 00 aa 	mcall	80003c80 <et024006_ResetDisplay+0x2b0>
  // 50us delay
  cpu_delay_us( 50, tft_data.cpu_hz );
800039de:	fe f8 02 a6 	ld.w	r8,pc[678]
800039e2:	70 08       	ld.w	r8,r8[0x0]
800039e4:	33 29       	mov	r9,50
800039e6:	ef 49 ff c4 	st.w	r7[-60],r9
800039ea:	ef 48 ff c0 	st.w	r7[-64],r8
800039ee:	ee f8 ff c4 	ld.w	r8,r7[-60]
800039f2:	ef 48 ff cc 	st.w	r7[-52],r8
800039f6:	ee f8 ff c0 	ld.w	r8,r7[-64]
800039fa:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800039fe:	ee fc ff cc 	ld.w	r12,r7[-52]
80003a02:	ef 4c ff a4 	st.w	r7[-92],r12
80003a06:	30 0b       	mov	r11,0
80003a08:	ef 4b ff a0 	st.w	r7[-96],r11
80003a0c:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003a10:	ef 49 ff 9c 	st.w	r7[-100],r9
80003a14:	30 08       	mov	r8,0
80003a16:	ef 48 ff 98 	st.w	r7[-104],r8
80003a1a:	ee fa ff a0 	ld.w	r10,r7[-96]
80003a1e:	ee fc ff 9c 	ld.w	r12,r7[-100]
80003a22:	b9 3a       	mul	r10,r12
80003a24:	ee f8 ff 98 	ld.w	r8,r7[-104]
80003a28:	ee fb ff a4 	ld.w	r11,r7[-92]
80003a2c:	b7 38       	mul	r8,r11
80003a2e:	10 0a       	add	r10,r8
80003a30:	ee fc ff a4 	ld.w	r12,r7[-92]
80003a34:	ee fb ff 9c 	ld.w	r11,r7[-100]
80003a38:	f8 0b 06 48 	mulu.d	r8,r12,r11
80003a3c:	12 0a       	add	r10,r9
80003a3e:	14 99       	mov	r9,r10
80003a40:	ee 7a 42 3f 	mov	r10,999999
80003a44:	30 0b       	mov	r11,0
80003a46:	f0 0a 00 0a 	add	r10,r8,r10
80003a4a:	f2 0b 00 4b 	adc	r11,r9,r11
80003a4e:	ee 78 42 40 	mov	r8,1000000
80003a52:	30 09       	mov	r9,0
80003a54:	f0 1f 00 8d 	mcall	80003c88 <et024006_ResetDisplay+0x2b8>
80003a58:	14 98       	mov	r8,r10
80003a5a:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80003a5c:	ef 48 ff d4 	st.w	r7[-44],r8
80003a60:	ee c8 00 58 	sub	r8,r7,88
80003a64:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003a68:	e1 b8 00 42 	mfsr	r8,0x108
80003a6c:	10 99       	mov	r9,r8
80003a6e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003a72:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003a74:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003a78:	70 09       	ld.w	r9,r8[0x0]
80003a7a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003a7e:	10 09       	add	r9,r8
80003a80:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003a84:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80003a86:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003a8a:	30 08       	mov	r8,0
80003a8c:	f3 68 00 08 	st.b	r9[8],r8
80003a90:	ee c8 00 58 	sub	r8,r7,88
80003a94:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003a98:	e1 b8 00 42 	mfsr	r8,0x108
80003a9c:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80003aa0:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003aa4:	f1 39 00 08 	ld.ub	r9,r8[8]
80003aa8:	30 28       	mov	r8,2
80003aaa:	f0 09 18 00 	cp.b	r9,r8
80003aae:	c0 31       	brne	80003ab4 <et024006_ResetDisplay+0xe4>
    return false;
80003ab0:	30 08       	mov	r8,0
80003ab2:	c4 38       	rjmp	80003b38 <et024006_ResetDisplay+0x168>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80003ab4:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003ab8:	f1 39 00 08 	ld.ub	r9,r8[8]
80003abc:	30 18       	mov	r8,1
80003abe:	f0 09 18 00 	cp.b	r9,r8
80003ac2:	c0 31       	brne	80003ac8 <et024006_ResetDisplay+0xf8>
    return true;
80003ac4:	30 18       	mov	r8,1
80003ac6:	c3 98       	rjmp	80003b38 <et024006_ResetDisplay+0x168>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003ac8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003acc:	70 09       	ld.w	r9,r8[0x0]
80003ace:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003ad2:	70 18       	ld.w	r8,r8[0x4]
80003ad4:	10 39       	cp.w	r9,r8
80003ad6:	e0 88 00 1a 	brls	80003b0a <et024006_ResetDisplay+0x13a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003ada:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003ade:	70 08       	ld.w	r8,r8[0x0]
80003ae0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003ae4:	10 39       	cp.w	r9,r8
80003ae6:	c1 02       	brcc	80003b06 <et024006_ResetDisplay+0x136>
80003ae8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003aec:	70 18       	ld.w	r8,r8[0x4]
80003aee:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003af2:	10 39       	cp.w	r9,r8
80003af4:	e0 88 00 09 	brls	80003b06 <et024006_ResetDisplay+0x136>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003af8:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003afc:	30 18       	mov	r8,1
80003afe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80003b02:	30 18       	mov	r8,1
80003b04:	c1 a8       	rjmp	80003b38 <et024006_ResetDisplay+0x168>
    }
    return false;
80003b06:	30 08       	mov	r8,0
80003b08:	c1 88       	rjmp	80003b38 <et024006_ResetDisplay+0x168>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003b0a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003b0e:	70 08       	ld.w	r8,r8[0x0]
80003b10:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003b14:	10 39       	cp.w	r9,r8
80003b16:	c0 93       	brcs	80003b28 <et024006_ResetDisplay+0x158>
80003b18:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003b1c:	70 18       	ld.w	r8,r8[0x4]
80003b1e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003b22:	10 39       	cp.w	r9,r8
80003b24:	e0 88 00 09 	brls	80003b36 <et024006_ResetDisplay+0x166>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003b28:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003b2c:	30 18       	mov	r8,1
80003b2e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80003b32:	30 18       	mov	r8,1
80003b34:	c0 28       	rjmp	80003b38 <et024006_ResetDisplay+0x168>
    }
    return false;
80003b36:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80003b38:	58 08       	cp.w	r8,0
80003b3a:	ca b0       	breq	80003a90 <et024006_ResetDisplay+0xc0>

  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80003b3c:	34 2c       	mov	r12,66
80003b3e:	f0 1f 00 54 	mcall	80003c8c <et024006_ResetDisplay+0x2bc>
  // 5ms delay
  cpu_delay_ms( 5, tft_data.cpu_hz );
80003b42:	4d 18       	lddpc	r8,80003c84 <et024006_ResetDisplay+0x2b4>
80003b44:	70 08       	ld.w	r8,r8[0x0]
80003b46:	30 59       	mov	r9,5
80003b48:	ef 49 ff e4 	st.w	r7[-28],r9
80003b4c:	ef 48 ff e0 	st.w	r7[-32],r8
80003b50:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003b54:	ef 48 ff ec 	st.w	r7[-20],r8
80003b58:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003b5c:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80003b60:	ee f0 ff ec 	ld.w	r0,r7[-20]
80003b64:	30 01       	mov	r1,0
80003b66:	ee f2 ff e8 	ld.w	r2,r7[-24]
80003b6a:	30 03       	mov	r3,0
80003b6c:	e2 02 02 4a 	mul	r10,r1,r2
80003b70:	e6 00 02 48 	mul	r8,r3,r0
80003b74:	10 0a       	add	r10,r8
80003b76:	e0 02 06 48 	mulu.d	r8,r0,r2
80003b7a:	12 0a       	add	r10,r9
80003b7c:	14 99       	mov	r9,r10
80003b7e:	e0 6a 03 e7 	mov	r10,999
80003b82:	30 0b       	mov	r11,0
80003b84:	f0 0a 00 0a 	add	r10,r8,r10
80003b88:	f2 0b 00 4b 	adc	r11,r9,r11
80003b8c:	e0 68 03 e8 	mov	r8,1000
80003b90:	30 09       	mov	r9,0
80003b92:	f0 1f 00 3e 	mcall	80003c88 <et024006_ResetDisplay+0x2b8>
80003b96:	14 98       	mov	r8,r10
80003b98:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80003b9a:	ef 48 ff f4 	st.w	r7[-12],r8
80003b9e:	ee c8 00 4c 	sub	r8,r7,76
80003ba2:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003ba6:	e1 b8 00 42 	mfsr	r8,0x108
80003baa:	10 99       	mov	r9,r8
80003bac:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003bb0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003bb2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003bb6:	70 09       	ld.w	r9,r8[0x0]
80003bb8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003bbc:	10 09       	add	r9,r8
80003bbe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003bc2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80003bc4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003bc8:	30 08       	mov	r8,0
80003bca:	f3 68 00 08 	st.b	r9[8],r8
80003bce:	ee c8 00 4c 	sub	r8,r7,76
80003bd2:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003bd6:	e1 b8 00 42 	mfsr	r8,0x108
80003bda:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80003bde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003be2:	f1 39 00 08 	ld.ub	r9,r8[8]
80003be6:	30 28       	mov	r8,2
80003be8:	f0 09 18 00 	cp.b	r9,r8
80003bec:	c0 31       	brne	80003bf2 <et024006_ResetDisplay+0x222>
    return false;
80003bee:	30 08       	mov	r8,0
80003bf0:	c4 38       	rjmp	80003c76 <et024006_ResetDisplay+0x2a6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80003bf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bf6:	f1 39 00 08 	ld.ub	r9,r8[8]
80003bfa:	30 18       	mov	r8,1
80003bfc:	f0 09 18 00 	cp.b	r9,r8
80003c00:	c0 31       	brne	80003c06 <et024006_ResetDisplay+0x236>
    return true;
80003c02:	30 18       	mov	r8,1
80003c04:	c3 98       	rjmp	80003c76 <et024006_ResetDisplay+0x2a6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003c06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c0a:	70 09       	ld.w	r9,r8[0x0]
80003c0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c10:	70 18       	ld.w	r8,r8[0x4]
80003c12:	10 39       	cp.w	r9,r8
80003c14:	e0 88 00 1a 	brls	80003c48 <et024006_ResetDisplay+0x278>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003c18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c1c:	70 08       	ld.w	r8,r8[0x0]
80003c1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003c22:	10 39       	cp.w	r9,r8
80003c24:	c1 02       	brcc	80003c44 <et024006_ResetDisplay+0x274>
80003c26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c2a:	70 18       	ld.w	r8,r8[0x4]
80003c2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003c30:	10 39       	cp.w	r9,r8
80003c32:	e0 88 00 09 	brls	80003c44 <et024006_ResetDisplay+0x274>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003c36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c3a:	30 18       	mov	r8,1
80003c3c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80003c40:	30 18       	mov	r8,1
80003c42:	c1 a8       	rjmp	80003c76 <et024006_ResetDisplay+0x2a6>
    }
    return false;
80003c44:	30 08       	mov	r8,0
80003c46:	c1 88       	rjmp	80003c76 <et024006_ResetDisplay+0x2a6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003c48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c4c:	70 08       	ld.w	r8,r8[0x0]
80003c4e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003c52:	10 39       	cp.w	r9,r8
80003c54:	c0 93       	brcs	80003c66 <et024006_ResetDisplay+0x296>
80003c56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c5a:	70 18       	ld.w	r8,r8[0x4]
80003c5c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003c60:	10 39       	cp.w	r9,r8
80003c62:	e0 88 00 09 	brls	80003c74 <et024006_ResetDisplay+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003c66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c6a:	30 18       	mov	r8,1
80003c6c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80003c70:	30 18       	mov	r8,1
80003c72:	c0 28       	rjmp	80003c76 <et024006_ResetDisplay+0x2a6>
    }
    return false;
80003c74:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80003c76:	58 08       	cp.w	r8,0
80003c78:	ca b0       	breq	80003bce <et024006_ResetDisplay+0x1fe>
}
80003c7a:	2e 6d       	sub	sp,-104
80003c7c:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80003c80:	80 00       	ld.sh	r0,r0[0x0]
80003c82:	77 a6       	ld.w	r6,r11[0x68]
80003c84:	00 00       	add	r0,r0
80003c86:	04 b8       	st.h	r2++,r8
80003c88:	80 00       	ld.sh	r0,r0[0x0]
80003c8a:	ce a0       	breq	80003c5e <et024006_ResetDisplay+0x28e>
80003c8c:	80 00       	ld.sh	r0,r0[0x0]
80003c8e:	77 3e       	ld.w	lr,r11[0x4c]

80003c90 <et024006_AdjustGamma>:
/*! \brief Display gamma setup.
 *
 * Parameters are provided by EDT for the display.
 */
static void et024006_AdjustGamma( void )
{
80003c90:	eb cd 40 80 	pushm	r7,lr
80003c94:	1a 97       	mov	r7,sp
80003c96:	20 6d       	sub	sp,24
80003c98:	34 68       	mov	r8,70
80003c9a:	ef 68 ff e9 	st.b	r7[-23],r8
80003c9e:	39 48       	mov	r8,-108
80003ca0:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003ca4:	fc 19 c0 00 	movh	r9,0xc000
80003ca8:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80003cac:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003cae:	fc 19 c0 20 	movh	r9,0xc020
80003cb2:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80003cb6:	b2 08       	st.h	r9[0x0],r8
80003cb8:	34 78       	mov	r8,71
80003cba:	ef 68 ff eb 	st.b	r7[-21],r8
80003cbe:	34 18       	mov	r8,65
80003cc0:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003cc4:	fc 19 c0 00 	movh	r9,0xc000
80003cc8:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80003ccc:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003cce:	fc 19 c0 20 	movh	r9,0xc020
80003cd2:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80003cd6:	b2 08       	st.h	r9[0x0],r8
80003cd8:	34 88       	mov	r8,72
80003cda:	ef 68 ff ed 	st.b	r7[-19],r8
80003cde:	30 08       	mov	r8,0
80003ce0:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003ce4:	fc 19 c0 00 	movh	r9,0xc000
80003ce8:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80003cec:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003cee:	fc 19 c0 20 	movh	r9,0xc020
80003cf2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003cf6:	b2 08       	st.h	r9[0x0],r8
80003cf8:	34 98       	mov	r8,73
80003cfa:	ef 68 ff ef 	st.b	r7[-17],r8
80003cfe:	33 38       	mov	r8,51
80003d00:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003d04:	fc 19 c0 00 	movh	r9,0xc000
80003d08:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80003d0c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003d0e:	fc 19 c0 20 	movh	r9,0xc020
80003d12:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80003d16:	b2 08       	st.h	r9[0x0],r8
80003d18:	34 a8       	mov	r8,74
80003d1a:	ef 68 ff f1 	st.b	r7[-15],r8
80003d1e:	32 58       	mov	r8,37
80003d20:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003d24:	fc 19 c0 00 	movh	r9,0xc000
80003d28:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80003d2c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003d2e:	fc 19 c0 20 	movh	r9,0xc020
80003d32:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003d36:	b2 08       	st.h	r9[0x0],r8
80003d38:	34 b8       	mov	r8,75
80003d3a:	ef 68 ff f3 	st.b	r7[-13],r8
80003d3e:	34 58       	mov	r8,69
80003d40:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003d44:	fc 19 c0 00 	movh	r9,0xc000
80003d48:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80003d4c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003d4e:	fc 19 c0 20 	movh	r9,0xc020
80003d52:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80003d56:	b2 08       	st.h	r9[0x0],r8
80003d58:	34 c8       	mov	r8,76
80003d5a:	ef 68 ff f5 	st.b	r7[-11],r8
80003d5e:	34 48       	mov	r8,68
80003d60:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003d64:	fc 19 c0 00 	movh	r9,0xc000
80003d68:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80003d6c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003d6e:	fc 19 c0 20 	movh	r9,0xc020
80003d72:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003d76:	b2 08       	st.h	r9[0x0],r8
80003d78:	34 d8       	mov	r8,77
80003d7a:	ef 68 ff f7 	st.b	r7[-9],r8
80003d7e:	37 78       	mov	r8,119
80003d80:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003d84:	fc 19 c0 00 	movh	r9,0xc000
80003d88:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003d8c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003d8e:	fc 19 c0 20 	movh	r9,0xc020
80003d92:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80003d96:	b2 08       	st.h	r9[0x0],r8
80003d98:	34 e8       	mov	r8,78
80003d9a:	ef 68 ff f9 	st.b	r7[-7],r8
80003d9e:	31 28       	mov	r8,18
80003da0:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003da4:	fc 19 c0 00 	movh	r9,0xc000
80003da8:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003dac:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003dae:	fc 19 c0 20 	movh	r9,0xc020
80003db2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003db6:	b2 08       	st.h	r9[0x0],r8
80003db8:	34 f8       	mov	r8,79
80003dba:	ef 68 ff fb 	st.b	r7[-5],r8
80003dbe:	3c c8       	mov	r8,-52
80003dc0:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003dc4:	fc 19 c0 00 	movh	r9,0xc000
80003dc8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003dcc:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003dce:	fc 19 c0 20 	movh	r9,0xc020
80003dd2:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80003dd6:	b2 08       	st.h	r9[0x0],r8
80003dd8:	35 08       	mov	r8,80
80003dda:	ef 68 ff fd 	st.b	r7[-3],r8
80003dde:	34 68       	mov	r8,70
80003de0:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003de4:	fc 19 c0 00 	movh	r9,0xc000
80003de8:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80003dec:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003dee:	fc 19 c0 20 	movh	r9,0xc020
80003df2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003df6:	b2 08       	st.h	r9[0x0],r8
80003df8:	35 18       	mov	r8,81
80003dfa:	ef 68 ff ff 	st.b	r7[-1],r8
80003dfe:	38 28       	mov	r8,-126
80003e00:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003e04:	fc 19 c0 00 	movh	r9,0xc000
80003e08:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003e0c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003e0e:	fc 19 c0 20 	movh	r9,0xc020
80003e12:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80003e16:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_GAMMACTRL8, 0x77 );
  et024006_WriteRegister( HIMAX_GAMMACTRL9, 0x12 );
  et024006_WriteRegister( HIMAX_GAMMACTRL10, 0xCC );
  et024006_WriteRegister( HIMAX_GAMMACTRL11, 0x46 );
  et024006_WriteRegister( HIMAX_GAMMACTRL12, 0x82 );
}
80003e18:	2f ad       	sub	sp,-24
80003e1a:	e3 cd 80 80 	ldm	sp++,r7,pc

80003e1e <et024006_GeneralSettings>:
/*! \brief General display settings.
 *
 * This are settings provided by EDT and are optimised for the display.
 */
static void et024006_GeneralSettings(void)
{
80003e1e:	eb cd 40 80 	pushm	r7,lr
80003e22:	1a 97       	mov	r7,sp
80003e24:	20 8d       	sub	sp,32
80003e26:	30 18       	mov	r8,1
80003e28:	ef 68 ff e1 	st.b	r7[-31],r8
80003e2c:	30 68       	mov	r8,6
80003e2e:	ef 68 ff e0 	st.b	r7[-32],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003e32:	fc 19 c0 00 	movh	r9,0xc000
80003e36:	ef 38 ff e1 	ld.ub	r8,r7[-31]
80003e3a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003e3c:	fc 19 c0 20 	movh	r9,0xc020
80003e40:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80003e44:	b2 08       	st.h	r9[0x0],r8
80003e46:	33 a8       	mov	r8,58
80003e48:	ef 68 ff e3 	st.b	r7[-29],r8
80003e4c:	30 18       	mov	r8,1
80003e4e:	ef 68 ff e2 	st.b	r7[-30],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003e52:	fc 19 c0 00 	movh	r9,0xc000
80003e56:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80003e5a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003e5c:	fc 19 c0 20 	movh	r9,0xc020
80003e60:	ef 38 ff e2 	ld.ub	r8,r7[-30]
80003e64:	b2 08       	st.h	r9[0x0],r8
80003e66:	33 b8       	mov	r8,59
80003e68:	ef 68 ff e5 	st.b	r7[-27],r8
80003e6c:	30 18       	mov	r8,1
80003e6e:	ef 68 ff e4 	st.b	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003e72:	fc 19 c0 00 	movh	r9,0xc000
80003e76:	ef 38 ff e5 	ld.ub	r8,r7[-27]
80003e7a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003e7c:	fc 19 c0 20 	movh	r9,0xc020
80003e80:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80003e84:	b2 08       	st.h	r9[0x0],r8
80003e86:	33 c8       	mov	r8,60
80003e88:	ef 68 ff e7 	st.b	r7[-25],r8
80003e8c:	3f 08       	mov	r8,-16
80003e8e:	ef 68 ff e6 	st.b	r7[-26],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003e92:	fc 19 c0 00 	movh	r9,0xc000
80003e96:	ef 38 ff e7 	ld.ub	r8,r7[-25]
80003e9a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003e9c:	fc 19 c0 20 	movh	r9,0xc020
80003ea0:	ef 38 ff e6 	ld.ub	r8,r7[-26]
80003ea4:	b2 08       	st.h	r9[0x0],r8
80003ea6:	33 d8       	mov	r8,61
80003ea8:	ef 68 ff e9 	st.b	r7[-23],r8
80003eac:	30 08       	mov	r8,0
80003eae:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003eb2:	fc 19 c0 00 	movh	r9,0xc000
80003eb6:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80003eba:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003ebc:	fc 19 c0 20 	movh	r9,0xc020
80003ec0:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80003ec4:	b2 08       	st.h	r9[0x0],r8
80003ec6:	33 e8       	mov	r8,62
80003ec8:	ef 68 ff eb 	st.b	r7[-21],r8
80003ecc:	33 88       	mov	r8,56
80003ece:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003ed2:	fc 19 c0 00 	movh	r9,0xc000
80003ed6:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80003eda:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003edc:	fc 19 c0 20 	movh	r9,0xc020
80003ee0:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80003ee4:	b2 08       	st.h	r9[0x0],r8
80003ee6:	34 08       	mov	r8,64
80003ee8:	ef 68 ff ed 	st.b	r7[-19],r8
80003eec:	30 f8       	mov	r8,15
80003eee:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003ef2:	fc 19 c0 00 	movh	r9,0xc000
80003ef6:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80003efa:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003efc:	fc 19 c0 20 	movh	r9,0xc020
80003f00:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003f04:	b2 08       	st.h	r9[0x0],r8
80003f06:	34 18       	mov	r8,65
80003f08:	ef 68 ff ef 	st.b	r7[-17],r8
80003f0c:	3f 08       	mov	r8,-16
80003f0e:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003f12:	fc 19 c0 00 	movh	r9,0xc000
80003f16:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80003f1a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003f1c:	fc 19 c0 20 	movh	r9,0xc020
80003f20:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80003f24:	b2 08       	st.h	r9[0x0],r8
80003f26:	32 78       	mov	r8,39
80003f28:	ef 68 ff f1 	st.b	r7[-15],r8
80003f2c:	30 28       	mov	r8,2
80003f2e:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003f32:	fc 19 c0 00 	movh	r9,0xc000
80003f36:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80003f3a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003f3c:	fc 19 c0 20 	movh	r9,0xc020
80003f40:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003f44:	b2 08       	st.h	r9[0x0],r8
80003f46:	32 88       	mov	r8,40
80003f48:	ef 68 ff f3 	st.b	r7[-13],r8
80003f4c:	30 28       	mov	r8,2
80003f4e:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003f52:	fc 19 c0 00 	movh	r9,0xc000
80003f56:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80003f5a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003f5c:	fc 19 c0 20 	movh	r9,0xc020
80003f60:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80003f64:	b2 08       	st.h	r9[0x0],r8
80003f66:	32 98       	mov	r8,41
80003f68:	ef 68 ff f5 	st.b	r7[-11],r8
80003f6c:	30 28       	mov	r8,2
80003f6e:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003f72:	fc 19 c0 00 	movh	r9,0xc000
80003f76:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80003f7a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003f7c:	fc 19 c0 20 	movh	r9,0xc020
80003f80:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003f84:	b2 08       	st.h	r9[0x0],r8
80003f86:	32 a8       	mov	r8,42
80003f88:	ef 68 ff f7 	st.b	r7[-9],r8
80003f8c:	30 28       	mov	r8,2
80003f8e:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003f92:	fc 19 c0 00 	movh	r9,0xc000
80003f96:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003f9a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003f9c:	fc 19 c0 20 	movh	r9,0xc020
80003fa0:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80003fa4:	b2 08       	st.h	r9[0x0],r8
80003fa6:	32 c8       	mov	r8,44
80003fa8:	ef 68 ff f9 	st.b	r7[-7],r8
80003fac:	30 28       	mov	r8,2
80003fae:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003fb2:	fc 19 c0 00 	movh	r9,0xc000
80003fb6:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80003fba:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003fbc:	fc 19 c0 20 	movh	r9,0xc020
80003fc0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003fc4:	b2 08       	st.h	r9[0x0],r8
80003fc6:	32 d8       	mov	r8,45
80003fc8:	ef 68 ff fb 	st.b	r7[-5],r8
80003fcc:	30 28       	mov	r8,2
80003fce:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003fd2:	fc 19 c0 00 	movh	r9,0xc000
80003fd6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003fda:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003fdc:	fc 19 c0 20 	movh	r9,0xc020
80003fe0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80003fe4:	b2 08       	st.h	r9[0x0],r8
80003fe6:	31 98       	mov	r8,25
80003fe8:	ef 68 ff fd 	st.b	r7[-3],r8
80003fec:	34 98       	mov	r8,73
80003fee:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80003ff2:	fc 19 c0 00 	movh	r9,0xc000
80003ff6:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80003ffa:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80003ffc:	fc 19 c0 20 	movh	r9,0xc020
80004000:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004004:	b2 08       	st.h	r9[0x0],r8
80004006:	39 38       	mov	r8,-109
80004008:	ef 68 ff ff 	st.b	r7[-1],r8
8000400c:	30 88       	mov	r8,8
8000400e:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004012:	fc 19 c0 00 	movh	r9,0xc000
80004016:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000401a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000401c:	fc 19 c0 20 	movh	r9,0xc020
80004020:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004024:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL6, 0x02 );
  et024006_WriteRegister( HIMAX_DISPCTRL7, 0x02 );

  et024006_WriteRegister( HIMAX_OSCCTRL1, 0x49 );
  et024006_WriteRegister( HIMAX_OSCCTRL3, 0x08 );
}
80004026:	2f 8d       	sub	sp,-32
80004028:	e3 cd 80 80 	ldm	sp++,r7,pc

8000402c <et024006_PowerSettings>:
/*! \brief Power setup.
 *
 * Sets basic DC/DC and VCOM parameters.
 */
static void et024006_PowerSettings(void)
{
8000402c:	eb cd 40 80 	pushm	r7,lr
80004030:	1a 97       	mov	r7,sp
80004032:	20 6d       	sub	sp,24
80004034:	32 38       	mov	r8,35
80004036:	ef 68 ff e9 	st.b	r7[-23],r8
8000403a:	39 58       	mov	r8,-107
8000403c:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004040:	fc 19 c0 00 	movh	r9,0xc000
80004044:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80004048:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000404a:	fc 19 c0 20 	movh	r9,0xc020
8000404e:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80004052:	b2 08       	st.h	r9[0x0],r8
80004054:	32 48       	mov	r8,36
80004056:	ef 68 ff eb 	st.b	r7[-21],r8
8000405a:	39 58       	mov	r8,-107
8000405c:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004060:	fc 19 c0 00 	movh	r9,0xc000
80004064:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80004068:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000406a:	fc 19 c0 20 	movh	r9,0xc020
8000406e:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80004072:	b2 08       	st.h	r9[0x0],r8
80004074:	32 58       	mov	r8,37
80004076:	ef 68 ff ed 	st.b	r7[-19],r8
8000407a:	3f f8       	mov	r8,-1
8000407c:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004080:	fc 19 c0 00 	movh	r9,0xc000
80004084:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004088:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000408a:	fc 19 c0 20 	movh	r9,0xc020
8000408e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80004092:	b2 08       	st.h	r9[0x0],r8
80004094:	39 08       	mov	r8,-112
80004096:	ef 68 ff ef 	st.b	r7[-17],r8
8000409a:	37 f8       	mov	r8,127
8000409c:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800040a0:	fc 19 c0 00 	movh	r9,0xc000
800040a4:	ef 38 ff ef 	ld.ub	r8,r7[-17]
800040a8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800040aa:	fc 19 c0 20 	movh	r9,0xc020
800040ae:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800040b2:	b2 08       	st.h	r9[0x0],r8
800040b4:	33 58       	mov	r8,53
800040b6:	ef 68 ff f1 	st.b	r7[-15],r8
800040ba:	33 88       	mov	r8,56
800040bc:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800040c0:	fc 19 c0 00 	movh	r9,0xc000
800040c4:	ef 38 ff f1 	ld.ub	r8,r7[-15]
800040c8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800040ca:	fc 19 c0 20 	movh	r9,0xc020
800040ce:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800040d2:	b2 08       	st.h	r9[0x0],r8
800040d4:	33 68       	mov	r8,54
800040d6:	ef 68 ff f3 	st.b	r7[-13],r8
800040da:	37 88       	mov	r8,120
800040dc:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800040e0:	fc 19 c0 00 	movh	r9,0xc000
800040e4:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800040e8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800040ea:	fc 19 c0 20 	movh	r9,0xc020
800040ee:	ef 38 ff f2 	ld.ub	r8,r7[-14]
800040f2:	b2 08       	st.h	r9[0x0],r8
800040f4:	31 d8       	mov	r8,29
800040f6:	ef 68 ff f5 	st.b	r7[-11],r8
800040fa:	30 78       	mov	r8,7
800040fc:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004100:	fc 19 c0 00 	movh	r9,0xc000
80004104:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004108:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000410a:	fc 19 c0 20 	movh	r9,0xc020
8000410e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004112:	b2 08       	st.h	r9[0x0],r8
80004114:	31 e8       	mov	r8,30
80004116:	ef 68 ff f7 	st.b	r7[-9],r8
8000411a:	30 08       	mov	r8,0
8000411c:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004120:	fc 19 c0 00 	movh	r9,0xc000
80004124:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004128:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000412a:	fc 19 c0 20 	movh	r9,0xc020
8000412e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004132:	b2 08       	st.h	r9[0x0],r8
80004134:	31 f8       	mov	r8,31
80004136:	ef 68 ff f9 	st.b	r7[-7],r8
8000413a:	30 48       	mov	r8,4
8000413c:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004140:	fc 19 c0 00 	movh	r9,0xc000
80004144:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004148:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000414a:	fc 19 c0 20 	movh	r9,0xc020
8000414e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004152:	b2 08       	st.h	r9[0x0],r8
80004154:	32 08       	mov	r8,32
80004156:	ef 68 ff fb 	st.b	r7[-5],r8
8000415a:	34 08       	mov	r8,64
8000415c:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004160:	fc 19 c0 00 	movh	r9,0xc000
80004164:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004168:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000416a:	fc 19 c0 20 	movh	r9,0xc020
8000416e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004172:	b2 08       	st.h	r9[0x0],r8
80004174:	34 48       	mov	r8,68
80004176:	ef 68 ff fd 	st.b	r7[-3],r8
8000417a:	33 88       	mov	r8,56
8000417c:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004180:	fc 19 c0 00 	movh	r9,0xc000
80004184:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004188:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000418a:	fc 19 c0 20 	movh	r9,0xc020
8000418e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004192:	b2 08       	st.h	r9[0x0],r8
80004194:	34 58       	mov	r8,69
80004196:	ef 68 ff ff 	st.b	r7[-1],r8
8000419a:	31 28       	mov	r8,18
8000419c:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800041a0:	fc 19 c0 00 	movh	r9,0xc000
800041a4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800041a8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800041aa:	fc 19 c0 20 	movh	r9,0xc020
800041ae:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800041b2:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL4, 0x00 );
  et024006_WriteRegister( HIMAX_POWERCTRL5, 0x04 );
  et024006_WriteRegister( HIMAX_POWERCTRL6, 0x40 );
  et024006_WriteRegister( HIMAX_VCOMCTRL2, 0x38 );
  et024006_WriteRegister( HIMAX_VCOMCTRL3, 0x12 );
}
800041b4:	2f ad       	sub	sp,-24
800041b6:	e3 cd 80 80 	ldm	sp++,r7,pc

800041ba <et024006_InterfaceSettings>:
/*! \brief Sets display interface.
 *
 * Configures screen orientation and color mode.
 */
static void et024006_InterfaceSettings(void)
{
800041ba:	eb cd 40 80 	pushm	r7,lr
800041be:	1a 97       	mov	r7,sp
800041c0:	20 1d       	sub	sp,4
800041c2:	31 68       	mov	r8,22
800041c4:	ef 68 ff ff 	st.b	r7[-1],r8
800041c8:	36 88       	mov	r8,104
800041ca:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800041ce:	fc 19 c0 00 	movh	r9,0xc000
800041d2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800041d6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800041d8:	fc 19 c0 20 	movh	r9,0xc020
800041dc:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800041e0:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_MEMACCESSCTRL,
    (1 << HIMAX_MX)
    | (1 << HIMAX_MV)
    | (1 << HIMAX_BGR) );

}
800041e2:	2f fd       	sub	sp,-4
800041e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800041e8 <et024006_PowerUp>:
/*! \brief Power up display.
 *
 * Turns on DC/DC converters.
 */
static void et024006_PowerUp(void)
{
800041e8:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800041ec:	1a 97       	mov	r7,sp
800041ee:	fa cd 01 24 	sub	sp,sp,292
  cpu_delay_ms( 10, tft_data.cpu_hz );
800041f2:	fe f8 07 22 	ld.w	r8,pc[1826]
800041f6:	70 09       	ld.w	r9,r8[0x0]
800041f8:	30 a8       	mov	r8,10
800041fa:	ef 48 ff 54 	st.w	r7[-172],r8
800041fe:	ef 49 ff 50 	st.w	r7[-176],r9
80004202:	ee f8 ff 54 	ld.w	r8,r7[-172]
80004206:	ef 48 ff 5c 	st.w	r7[-164],r8
8000420a:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000420e:	ef 48 ff 58 	st.w	r7[-168],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004212:	ee f2 ff 5c 	ld.w	r2,r7[-164]
80004216:	30 03       	mov	r3,0
80004218:	ee fa ff 58 	ld.w	r10,r7[-168]
8000421c:	30 0b       	mov	r11,0
8000421e:	e6 0a 02 49 	mul	r9,r3,r10
80004222:	f6 02 02 48 	mul	r8,r11,r2
80004226:	10 09       	add	r9,r8
80004228:	e4 0a 06 4a 	mulu.d	r10,r2,r10
8000422c:	16 09       	add	r9,r11
8000422e:	12 9b       	mov	r11,r9
80004230:	e0 68 03 e7 	mov	r8,999
80004234:	30 09       	mov	r9,0
80004236:	10 0a       	add	r10,r8
80004238:	f6 09 00 4b 	adc	r11,r11,r9
8000423c:	e0 68 03 e8 	mov	r8,1000
80004240:	30 09       	mov	r9,0
80004242:	f0 1f 01 b6 	mcall	80004918 <et024006_PowerUp+0x730>
80004246:	14 98       	mov	r8,r10
80004248:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000424a:	ef 48 ff 64 	st.w	r7[-156],r8
8000424e:	ee c8 00 ec 	sub	r8,r7,236
80004252:	ef 48 ff 60 	st.w	r7[-160],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004256:	e1 b8 00 42 	mfsr	r8,0x108
8000425a:	10 99       	mov	r9,r8
8000425c:	ee f8 ff 60 	ld.w	r8,r7[-160]
80004260:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004262:	ee f8 ff 60 	ld.w	r8,r7[-160]
80004266:	70 09       	ld.w	r9,r8[0x0]
80004268:	ee f8 ff 64 	ld.w	r8,r7[-156]
8000426c:	10 09       	add	r9,r8
8000426e:	ee f8 ff 60 	ld.w	r8,r7[-160]
80004272:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004274:	ee f9 ff 60 	ld.w	r9,r7[-160]
80004278:	30 08       	mov	r8,0
8000427a:	f3 68 00 08 	st.b	r9[8],r8
8000427e:	ee c8 00 ec 	sub	r8,r7,236
80004282:	ef 48 ff 68 	st.w	r7[-152],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004286:	e1 b8 00 42 	mfsr	r8,0x108
8000428a:	ef 48 ff 6c 	st.w	r7[-148],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000428e:	ee f8 ff 68 	ld.w	r8,r7[-152]
80004292:	f1 39 00 08 	ld.ub	r9,r8[8]
80004296:	30 28       	mov	r8,2
80004298:	f0 09 18 00 	cp.b	r9,r8
8000429c:	c0 31       	brne	800042a2 <et024006_PowerUp+0xba>
    return false;
8000429e:	30 08       	mov	r8,0
800042a0:	c4 38       	rjmp	80004326 <et024006_PowerUp+0x13e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800042a2:	ee f8 ff 68 	ld.w	r8,r7[-152]
800042a6:	f1 39 00 08 	ld.ub	r9,r8[8]
800042aa:	30 18       	mov	r8,1
800042ac:	f0 09 18 00 	cp.b	r9,r8
800042b0:	c0 31       	brne	800042b6 <et024006_PowerUp+0xce>
    return true;
800042b2:	30 18       	mov	r8,1
800042b4:	c3 98       	rjmp	80004326 <et024006_PowerUp+0x13e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800042b6:	ee f8 ff 68 	ld.w	r8,r7[-152]
800042ba:	70 09       	ld.w	r9,r8[0x0]
800042bc:	ee f8 ff 68 	ld.w	r8,r7[-152]
800042c0:	70 18       	ld.w	r8,r8[0x4]
800042c2:	10 39       	cp.w	r9,r8
800042c4:	e0 88 00 1a 	brls	800042f8 <et024006_PowerUp+0x110>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800042c8:	ee f8 ff 68 	ld.w	r8,r7[-152]
800042cc:	70 09       	ld.w	r9,r8[0x0]
800042ce:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800042d2:	12 38       	cp.w	r8,r9
800042d4:	c1 02       	brcc	800042f4 <et024006_PowerUp+0x10c>
800042d6:	ee f8 ff 68 	ld.w	r8,r7[-152]
800042da:	70 19       	ld.w	r9,r8[0x4]
800042dc:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800042e0:	12 38       	cp.w	r8,r9
800042e2:	e0 88 00 09 	brls	800042f4 <et024006_PowerUp+0x10c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800042e6:	ee f9 ff 68 	ld.w	r9,r7[-152]
800042ea:	30 18       	mov	r8,1
800042ec:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800042f0:	30 18       	mov	r8,1
800042f2:	c1 a8       	rjmp	80004326 <et024006_PowerUp+0x13e>
    }
    return false;
800042f4:	30 08       	mov	r8,0
800042f6:	c1 88       	rjmp	80004326 <et024006_PowerUp+0x13e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800042f8:	ee f8 ff 68 	ld.w	r8,r7[-152]
800042fc:	70 09       	ld.w	r9,r8[0x0]
800042fe:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80004302:	12 38       	cp.w	r8,r9
80004304:	c0 93       	brcs	80004316 <et024006_PowerUp+0x12e>
80004306:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000430a:	70 19       	ld.w	r9,r8[0x4]
8000430c:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80004310:	12 38       	cp.w	r8,r9
80004312:	e0 88 00 09 	brls	80004324 <et024006_PowerUp+0x13c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004316:	ee f9 ff 68 	ld.w	r9,r7[-152]
8000431a:	30 18       	mov	r8,1
8000431c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004320:	30 18       	mov	r8,1
80004322:	c0 28       	rjmp	80004326 <et024006_PowerUp+0x13e>
    }
    return false;
80004324:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004326:	58 08       	cp.w	r8,0
80004328:	ca b0       	breq	8000427e <et024006_PowerUp+0x96>
8000432a:	31 c8       	mov	r8,28
8000432c:	ef 68 ff 73 	st.b	r7[-141],r8
80004330:	30 48       	mov	r8,4
80004332:	ef 68 ff 72 	st.b	r7[-142],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004336:	fc 19 c0 00 	movh	r9,0xc000
8000433a:	ef 38 ff 73 	ld.ub	r8,r7[-141]
8000433e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004340:	fc 19 c0 20 	movh	r9,0xc020
80004344:	ef 38 ff 72 	ld.ub	r8,r7[-142]
80004348:	b2 08       	st.h	r9[0x0],r8
static void et024006_PowerUp(void)
{
  cpu_delay_ms( 10, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
8000434a:	fe f8 05 ca 	ld.w	r8,pc[1482]
8000434e:	70 09       	ld.w	r9,r8[0x0]
80004350:	31 48       	mov	r8,20
80004352:	ef 48 ff 78 	st.w	r7[-136],r8
80004356:	ef 49 ff 74 	st.w	r7[-140],r9
8000435a:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000435e:	ef 48 ff 80 	st.w	r7[-128],r8
80004362:	ee f8 ff 74 	ld.w	r8,r7[-140]
80004366:	ef 48 ff 7c 	st.w	r7[-132],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000436a:	ee fc ff 80 	ld.w	r12,r7[-128]
8000436e:	ef 4c fe e0 	st.w	r7[-288],r12
80004372:	30 0b       	mov	r11,0
80004374:	ef 4b fe dc 	st.w	r7[-292],r11
80004378:	ee f0 ff 7c 	ld.w	r0,r7[-132]
8000437c:	30 01       	mov	r1,0
8000437e:	ee f9 fe dc 	ld.w	r9,r7[-292]
80004382:	a1 39       	mul	r9,r0
80004384:	ee fa fe e0 	ld.w	r10,r7[-288]
80004388:	e2 0a 02 48 	mul	r8,r1,r10
8000438c:	10 09       	add	r9,r8
8000438e:	ee f8 fe e0 	ld.w	r8,r7[-288]
80004392:	f0 00 06 4a 	mulu.d	r10,r8,r0
80004396:	16 09       	add	r9,r11
80004398:	12 9b       	mov	r11,r9
8000439a:	e0 68 03 e7 	mov	r8,999
8000439e:	30 09       	mov	r9,0
800043a0:	10 0a       	add	r10,r8
800043a2:	f6 09 00 4b 	adc	r11,r11,r9
800043a6:	e0 68 03 e8 	mov	r8,1000
800043aa:	30 09       	mov	r9,0
800043ac:	f0 1f 01 5b 	mcall	80004918 <et024006_PowerUp+0x730>
800043b0:	14 98       	mov	r8,r10
800043b2:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800043b4:	ef 48 ff 88 	st.w	r7[-120],r8
800043b8:	ee c8 00 e0 	sub	r8,r7,224
800043bc:	ef 48 ff 84 	st.w	r7[-124],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800043c0:	e1 b8 00 42 	mfsr	r8,0x108
800043c4:	10 99       	mov	r9,r8
800043c6:	ee f8 ff 84 	ld.w	r8,r7[-124]
800043ca:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800043cc:	ee f8 ff 84 	ld.w	r8,r7[-124]
800043d0:	70 09       	ld.w	r9,r8[0x0]
800043d2:	ee f8 ff 88 	ld.w	r8,r7[-120]
800043d6:	10 09       	add	r9,r8
800043d8:	ee f8 ff 84 	ld.w	r8,r7[-124]
800043dc:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800043de:	ee f9 ff 84 	ld.w	r9,r7[-124]
800043e2:	30 08       	mov	r8,0
800043e4:	f3 68 00 08 	st.b	r9[8],r8
800043e8:	ee c8 00 e0 	sub	r8,r7,224
800043ec:	ef 48 ff 8c 	st.w	r7[-116],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800043f0:	e1 b8 00 42 	mfsr	r8,0x108
800043f4:	ef 48 ff 90 	st.w	r7[-112],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800043f8:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800043fc:	f1 39 00 08 	ld.ub	r9,r8[8]
80004400:	30 28       	mov	r8,2
80004402:	f0 09 18 00 	cp.b	r9,r8
80004406:	c0 31       	brne	8000440c <et024006_PowerUp+0x224>
    return false;
80004408:	30 08       	mov	r8,0
8000440a:	c4 38       	rjmp	80004490 <et024006_PowerUp+0x2a8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000440c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004410:	f1 39 00 08 	ld.ub	r9,r8[8]
80004414:	30 18       	mov	r8,1
80004416:	f0 09 18 00 	cp.b	r9,r8
8000441a:	c0 31       	brne	80004420 <et024006_PowerUp+0x238>
    return true;
8000441c:	30 18       	mov	r8,1
8000441e:	c3 98       	rjmp	80004490 <et024006_PowerUp+0x2a8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004420:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004424:	70 09       	ld.w	r9,r8[0x0]
80004426:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000442a:	70 18       	ld.w	r8,r8[0x4]
8000442c:	10 39       	cp.w	r9,r8
8000442e:	e0 88 00 1a 	brls	80004462 <et024006_PowerUp+0x27a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004432:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004436:	70 08       	ld.w	r8,r8[0x0]
80004438:	ee f9 ff 90 	ld.w	r9,r7[-112]
8000443c:	10 39       	cp.w	r9,r8
8000443e:	c1 02       	brcc	8000445e <et024006_PowerUp+0x276>
80004440:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004444:	70 18       	ld.w	r8,r8[0x4]
80004446:	ee f9 ff 90 	ld.w	r9,r7[-112]
8000444a:	10 39       	cp.w	r9,r8
8000444c:	e0 88 00 09 	brls	8000445e <et024006_PowerUp+0x276>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004450:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80004454:	30 18       	mov	r8,1
80004456:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000445a:	30 18       	mov	r8,1
8000445c:	c1 a8       	rjmp	80004490 <et024006_PowerUp+0x2a8>
    }
    return false;
8000445e:	30 08       	mov	r8,0
80004460:	c1 88       	rjmp	80004490 <et024006_PowerUp+0x2a8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004462:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004466:	70 08       	ld.w	r8,r8[0x0]
80004468:	ee f9 ff 90 	ld.w	r9,r7[-112]
8000446c:	10 39       	cp.w	r9,r8
8000446e:	c0 93       	brcs	80004480 <et024006_PowerUp+0x298>
80004470:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004474:	70 18       	ld.w	r8,r8[0x4]
80004476:	ee f9 ff 90 	ld.w	r9,r7[-112]
8000447a:	10 39       	cp.w	r9,r8
8000447c:	e0 88 00 09 	brls	8000448e <et024006_PowerUp+0x2a6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004480:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80004484:	30 18       	mov	r8,1
80004486:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000448a:	30 18       	mov	r8,1
8000448c:	c0 28       	rjmp	80004490 <et024006_PowerUp+0x2a8>
    }
    return false;
8000448e:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004490:	58 08       	cp.w	r8,0
80004492:	ca b0       	breq	800043e8 <et024006_PowerUp+0x200>
80004494:	34 38       	mov	r8,67
80004496:	ef 68 ff 97 	st.b	r7[-105],r8
8000449a:	38 08       	mov	r8,-128
8000449c:	ef 68 ff 96 	st.b	r7[-106],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800044a0:	fc 19 c0 00 	movh	r9,0xc000
800044a4:	ef 38 ff 97 	ld.ub	r8,r7[-105]
800044a8:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800044aa:	fc 19 c0 20 	movh	r9,0xc020
800044ae:	ef 38 ff 96 	ld.ub	r8,r7[-106]
800044b2:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
800044b4:	fe f8 04 60 	ld.w	r8,pc[1120]
800044b8:	70 08       	ld.w	r8,r8[0x0]
800044ba:	30 59       	mov	r9,5
800044bc:	ef 49 ff 9c 	st.w	r7[-100],r9
800044c0:	ef 48 ff 98 	st.w	r7[-104],r8
800044c4:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800044c8:	ef 48 ff a4 	st.w	r7[-92],r8
800044cc:	ee f8 ff 98 	ld.w	r8,r7[-104]
800044d0:	ef 48 ff a0 	st.w	r7[-96],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800044d4:	ee fc ff a4 	ld.w	r12,r7[-92]
800044d8:	ef 4c fe f0 	st.w	r7[-272],r12
800044dc:	30 0b       	mov	r11,0
800044de:	ef 4b fe ec 	st.w	r7[-276],r11
800044e2:	ee fa ff a0 	ld.w	r10,r7[-96]
800044e6:	ef 4a fe e8 	st.w	r7[-280],r10
800044ea:	30 09       	mov	r9,0
800044ec:	ef 49 fe e4 	st.w	r7[-284],r9
800044f0:	ee fa fe ec 	ld.w	r10,r7[-276]
800044f4:	ee f8 fe e8 	ld.w	r8,r7[-280]
800044f8:	b1 3a       	mul	r10,r8
800044fa:	ee f8 fe e4 	ld.w	r8,r7[-284]
800044fe:	ee fc fe f0 	ld.w	r12,r7[-272]
80004502:	b9 38       	mul	r8,r12
80004504:	10 0a       	add	r10,r8
80004506:	ee fb fe f0 	ld.w	r11,r7[-272]
8000450a:	ee fc fe e8 	ld.w	r12,r7[-280]
8000450e:	f6 0c 06 48 	mulu.d	r8,r11,r12
80004512:	12 0a       	add	r10,r9
80004514:	14 99       	mov	r9,r10
80004516:	e0 6a 03 e7 	mov	r10,999
8000451a:	30 0b       	mov	r11,0
8000451c:	f0 0a 00 0a 	add	r10,r8,r10
80004520:	f2 0b 00 4b 	adc	r11,r9,r11
80004524:	e0 68 03 e8 	mov	r8,1000
80004528:	30 09       	mov	r9,0
8000452a:	f0 1f 00 fc 	mcall	80004918 <et024006_PowerUp+0x730>
8000452e:	14 98       	mov	r8,r10
80004530:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004532:	ef 48 ff ac 	st.w	r7[-84],r8
80004536:	ee c8 00 d4 	sub	r8,r7,212
8000453a:	ef 48 ff a8 	st.w	r7[-88],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000453e:	e1 b8 00 42 	mfsr	r8,0x108
80004542:	10 99       	mov	r9,r8
80004544:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004548:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000454a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000454e:	70 09       	ld.w	r9,r8[0x0]
80004550:	ee f8 ff ac 	ld.w	r8,r7[-84]
80004554:	10 09       	add	r9,r8
80004556:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000455a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000455c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80004560:	30 08       	mov	r8,0
80004562:	f3 68 00 08 	st.b	r9[8],r8
80004566:	ee c8 00 d4 	sub	r8,r7,212
8000456a:	ef 48 ff b0 	st.w	r7[-80],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000456e:	e1 b8 00 42 	mfsr	r8,0x108
80004572:	ef 48 ff b4 	st.w	r7[-76],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004576:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000457a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000457e:	30 28       	mov	r8,2
80004580:	f0 09 18 00 	cp.b	r9,r8
80004584:	c0 31       	brne	8000458a <et024006_PowerUp+0x3a2>
    return false;
80004586:	30 08       	mov	r8,0
80004588:	c4 38       	rjmp	8000460e <et024006_PowerUp+0x426>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000458a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000458e:	f1 39 00 08 	ld.ub	r9,r8[8]
80004592:	30 18       	mov	r8,1
80004594:	f0 09 18 00 	cp.b	r9,r8
80004598:	c0 31       	brne	8000459e <et024006_PowerUp+0x3b6>
    return true;
8000459a:	30 18       	mov	r8,1
8000459c:	c3 98       	rjmp	8000460e <et024006_PowerUp+0x426>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000459e:	ee f8 ff b0 	ld.w	r8,r7[-80]
800045a2:	70 09       	ld.w	r9,r8[0x0]
800045a4:	ee f8 ff b0 	ld.w	r8,r7[-80]
800045a8:	70 18       	ld.w	r8,r8[0x4]
800045aa:	10 39       	cp.w	r9,r8
800045ac:	e0 88 00 1a 	brls	800045e0 <et024006_PowerUp+0x3f8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800045b0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800045b4:	70 08       	ld.w	r8,r8[0x0]
800045b6:	ee f9 ff b4 	ld.w	r9,r7[-76]
800045ba:	10 39       	cp.w	r9,r8
800045bc:	c1 02       	brcc	800045dc <et024006_PowerUp+0x3f4>
800045be:	ee f8 ff b0 	ld.w	r8,r7[-80]
800045c2:	70 18       	ld.w	r8,r8[0x4]
800045c4:	ee f9 ff b4 	ld.w	r9,r7[-76]
800045c8:	10 39       	cp.w	r9,r8
800045ca:	e0 88 00 09 	brls	800045dc <et024006_PowerUp+0x3f4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800045ce:	ee f9 ff b0 	ld.w	r9,r7[-80]
800045d2:	30 18       	mov	r8,1
800045d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800045d8:	30 18       	mov	r8,1
800045da:	c1 a8       	rjmp	8000460e <et024006_PowerUp+0x426>
    }
    return false;
800045dc:	30 08       	mov	r8,0
800045de:	c1 88       	rjmp	8000460e <et024006_PowerUp+0x426>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800045e0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800045e4:	70 08       	ld.w	r8,r8[0x0]
800045e6:	ee f9 ff b4 	ld.w	r9,r7[-76]
800045ea:	10 39       	cp.w	r9,r8
800045ec:	c0 93       	brcs	800045fe <et024006_PowerUp+0x416>
800045ee:	ee f8 ff b0 	ld.w	r8,r7[-80]
800045f2:	70 18       	ld.w	r8,r8[0x4]
800045f4:	ee f9 ff b4 	ld.w	r9,r7[-76]
800045f8:	10 39       	cp.w	r9,r8
800045fa:	e0 88 00 09 	brls	8000460c <et024006_PowerUp+0x424>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800045fe:	ee f9 ff b0 	ld.w	r9,r7[-80]
80004602:	30 18       	mov	r8,1
80004604:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004608:	30 18       	mov	r8,1
8000460a:	c0 28       	rjmp	8000460e <et024006_PowerUp+0x426>
    }
    return false;
8000460c:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000460e:	58 08       	cp.w	r8,0
80004610:	ca b0       	breq	80004566 <et024006_PowerUp+0x37e>
80004612:	31 b8       	mov	r8,27
80004614:	ef 68 ff bb 	st.b	r7[-69],r8
80004618:	30 88       	mov	r8,8
8000461a:	ef 68 ff ba 	st.b	r7[-70],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000461e:	fc 19 c0 00 	movh	r9,0xc000
80004622:	ef 38 ff bb 	ld.ub	r8,r7[-69]
80004626:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004628:	fc 19 c0 20 	movh	r9,0xc020
8000462c:	ef 38 ff ba 	ld.ub	r8,r7[-70]
80004630:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_DK) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
80004632:	fe f8 02 e2 	ld.w	r8,pc[738]
80004636:	70 08       	ld.w	r8,r8[0x0]
80004638:	32 89       	mov	r9,40
8000463a:	ef 49 ff c0 	st.w	r7[-64],r9
8000463e:	ef 48 ff bc 	st.w	r7[-68],r8
80004642:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004646:	ef 48 ff c8 	st.w	r7[-56],r8
8000464a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000464e:	ef 48 ff c4 	st.w	r7[-60],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004652:	ee fb ff c8 	ld.w	r11,r7[-56]
80004656:	ef 4b ff 00 	st.w	r7[-256],r11
8000465a:	30 0a       	mov	r10,0
8000465c:	ef 4a fe fc 	st.w	r7[-260],r10
80004660:	ee f9 ff c4 	ld.w	r9,r7[-60]
80004664:	ef 49 fe f8 	st.w	r7[-264],r9
80004668:	30 08       	mov	r8,0
8000466a:	ef 48 fe f4 	st.w	r7[-268],r8
8000466e:	ee fa fe fc 	ld.w	r10,r7[-260]
80004672:	ee fc fe f8 	ld.w	r12,r7[-264]
80004676:	b9 3a       	mul	r10,r12
80004678:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000467c:	ee fb ff 00 	ld.w	r11,r7[-256]
80004680:	b7 38       	mul	r8,r11
80004682:	10 0a       	add	r10,r8
80004684:	ee fc ff 00 	ld.w	r12,r7[-256]
80004688:	ee fb fe f8 	ld.w	r11,r7[-264]
8000468c:	f8 0b 06 48 	mulu.d	r8,r12,r11
80004690:	12 0a       	add	r10,r9
80004692:	14 99       	mov	r9,r10
80004694:	e0 6a 03 e7 	mov	r10,999
80004698:	30 0b       	mov	r11,0
8000469a:	f0 0a 00 0a 	add	r10,r8,r10
8000469e:	f2 0b 00 4b 	adc	r11,r9,r11
800046a2:	e0 68 03 e8 	mov	r8,1000
800046a6:	30 09       	mov	r9,0
800046a8:	f0 1f 00 9c 	mcall	80004918 <et024006_PowerUp+0x730>
800046ac:	14 98       	mov	r8,r10
800046ae:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800046b0:	ef 48 ff d0 	st.w	r7[-48],r8
800046b4:	ee c8 00 c8 	sub	r8,r7,200
800046b8:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800046bc:	e1 b8 00 42 	mfsr	r8,0x108
800046c0:	10 99       	mov	r9,r8
800046c2:	ee f8 ff cc 	ld.w	r8,r7[-52]
800046c6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800046c8:	ee f8 ff cc 	ld.w	r8,r7[-52]
800046cc:	70 09       	ld.w	r9,r8[0x0]
800046ce:	ee f8 ff d0 	ld.w	r8,r7[-48]
800046d2:	10 09       	add	r9,r8
800046d4:	ee f8 ff cc 	ld.w	r8,r7[-52]
800046d8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800046da:	ee f9 ff cc 	ld.w	r9,r7[-52]
800046de:	30 08       	mov	r8,0
800046e0:	f3 68 00 08 	st.b	r9[8],r8
800046e4:	ee c8 00 c8 	sub	r8,r7,200
800046e8:	ef 48 ff d4 	st.w	r7[-44],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800046ec:	e1 b8 00 42 	mfsr	r8,0x108
800046f0:	ef 48 ff d8 	st.w	r7[-40],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800046f4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800046f8:	f1 39 00 08 	ld.ub	r9,r8[8]
800046fc:	30 28       	mov	r8,2
800046fe:	f0 09 18 00 	cp.b	r9,r8
80004702:	c0 31       	brne	80004708 <et024006_PowerUp+0x520>
    return false;
80004704:	30 08       	mov	r8,0
80004706:	c4 38       	rjmp	8000478c <et024006_PowerUp+0x5a4>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004708:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000470c:	f1 39 00 08 	ld.ub	r9,r8[8]
80004710:	30 18       	mov	r8,1
80004712:	f0 09 18 00 	cp.b	r9,r8
80004716:	c0 31       	brne	8000471c <et024006_PowerUp+0x534>
    return true;
80004718:	30 18       	mov	r8,1
8000471a:	c3 98       	rjmp	8000478c <et024006_PowerUp+0x5a4>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000471c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004720:	70 09       	ld.w	r9,r8[0x0]
80004722:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004726:	70 18       	ld.w	r8,r8[0x4]
80004728:	10 39       	cp.w	r9,r8
8000472a:	e0 88 00 1a 	brls	8000475e <et024006_PowerUp+0x576>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000472e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004732:	70 08       	ld.w	r8,r8[0x0]
80004734:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004738:	10 39       	cp.w	r9,r8
8000473a:	c1 02       	brcc	8000475a <et024006_PowerUp+0x572>
8000473c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004740:	70 18       	ld.w	r8,r8[0x4]
80004742:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004746:	10 39       	cp.w	r9,r8
80004748:	e0 88 00 09 	brls	8000475a <et024006_PowerUp+0x572>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000474c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004750:	30 18       	mov	r8,1
80004752:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004756:	30 18       	mov	r8,1
80004758:	c1 a8       	rjmp	8000478c <et024006_PowerUp+0x5a4>
    }
    return false;
8000475a:	30 08       	mov	r8,0
8000475c:	c1 88       	rjmp	8000478c <et024006_PowerUp+0x5a4>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000475e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004762:	70 08       	ld.w	r8,r8[0x0]
80004764:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004768:	10 39       	cp.w	r9,r8
8000476a:	c0 93       	brcs	8000477c <et024006_PowerUp+0x594>
8000476c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004770:	70 18       	ld.w	r8,r8[0x4]
80004772:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004776:	10 39       	cp.w	r9,r8
80004778:	e0 88 00 09 	brls	8000478a <et024006_PowerUp+0x5a2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000477c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004780:	30 18       	mov	r8,1
80004782:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004786:	30 18       	mov	r8,1
80004788:	c0 28       	rjmp	8000478c <et024006_PowerUp+0x5a4>
    }
    return false;
8000478a:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000478c:	58 08       	cp.w	r8,0
8000478e:	ca b0       	breq	800046e4 <et024006_PowerUp+0x4fc>
80004790:	31 b8       	mov	r8,27
80004792:	ef 68 ff df 	st.b	r7[-33],r8
80004796:	31 08       	mov	r8,16
80004798:	ef 68 ff de 	st.b	r7[-34],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000479c:	fc 19 c0 00 	movh	r9,0xc000
800047a0:	ef 38 ff df 	ld.ub	r8,r7[-33]
800047a4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800047a6:	fc 19 c0 20 	movh	r9,0xc020
800047aa:	ef 38 ff de 	ld.ub	r8,r7[-34]
800047ae:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_PON) );

  // In case the et024006_DisplayOn function is called right after
  cpu_delay_ms( 40, tft_data.cpu_hz );
800047b0:	4d 98       	lddpc	r8,80004914 <et024006_PowerUp+0x72c>
800047b2:	70 08       	ld.w	r8,r8[0x0]
800047b4:	32 89       	mov	r9,40
800047b6:	ef 49 ff e4 	st.w	r7[-28],r9
800047ba:	ef 48 ff e0 	st.w	r7[-32],r8
800047be:	ee f8 ff e4 	ld.w	r8,r7[-28]
800047c2:	ef 48 ff ec 	st.w	r7[-20],r8
800047c6:	ee f8 ff e0 	ld.w	r8,r7[-32]
800047ca:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800047ce:	ee fa ff ec 	ld.w	r10,r7[-20]
800047d2:	ef 4a ff 10 	st.w	r7[-240],r10
800047d6:	30 09       	mov	r9,0
800047d8:	ef 49 ff 0c 	st.w	r7[-244],r9
800047dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800047e0:	ef 48 ff 08 	st.w	r7[-248],r8
800047e4:	30 0c       	mov	r12,0
800047e6:	ef 4c ff 04 	st.w	r7[-252],r12
800047ea:	ee fa ff 0c 	ld.w	r10,r7[-244]
800047ee:	ee fb ff 08 	ld.w	r11,r7[-248]
800047f2:	b7 3a       	mul	r10,r11
800047f4:	ee f8 ff 04 	ld.w	r8,r7[-252]
800047f8:	ee f9 ff 10 	ld.w	r9,r7[-240]
800047fc:	b3 38       	mul	r8,r9
800047fe:	10 0a       	add	r10,r8
80004800:	ee fc ff 10 	ld.w	r12,r7[-240]
80004804:	ee fb ff 08 	ld.w	r11,r7[-248]
80004808:	f8 0b 06 48 	mulu.d	r8,r12,r11
8000480c:	12 0a       	add	r10,r9
8000480e:	14 99       	mov	r9,r10
80004810:	e0 6a 03 e7 	mov	r10,999
80004814:	30 0b       	mov	r11,0
80004816:	f0 0a 00 0a 	add	r10,r8,r10
8000481a:	f2 0b 00 4b 	adc	r11,r9,r11
8000481e:	e0 68 03 e8 	mov	r8,1000
80004822:	30 09       	mov	r9,0
80004824:	f0 1f 00 3d 	mcall	80004918 <et024006_PowerUp+0x730>
80004828:	14 98       	mov	r8,r10
8000482a:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000482c:	ef 48 ff f4 	st.w	r7[-12],r8
80004830:	ee c8 00 bc 	sub	r8,r7,188
80004834:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004838:	e1 b8 00 42 	mfsr	r8,0x108
8000483c:	10 99       	mov	r9,r8
8000483e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004842:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004844:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004848:	70 09       	ld.w	r9,r8[0x0]
8000484a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000484e:	10 09       	add	r9,r8
80004850:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004854:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004856:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000485a:	30 08       	mov	r8,0
8000485c:	f3 68 00 08 	st.b	r9[8],r8
80004860:	ee c8 00 bc 	sub	r8,r7,188
80004864:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004868:	e1 b8 00 42 	mfsr	r8,0x108
8000486c:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004870:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004874:	f1 39 00 08 	ld.ub	r9,r8[8]
80004878:	30 28       	mov	r8,2
8000487a:	f0 09 18 00 	cp.b	r9,r8
8000487e:	c0 31       	brne	80004884 <et024006_PowerUp+0x69c>
    return false;
80004880:	30 08       	mov	r8,0
80004882:	c4 38       	rjmp	80004908 <et024006_PowerUp+0x720>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004884:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004888:	f1 39 00 08 	ld.ub	r9,r8[8]
8000488c:	30 18       	mov	r8,1
8000488e:	f0 09 18 00 	cp.b	r9,r8
80004892:	c0 31       	brne	80004898 <et024006_PowerUp+0x6b0>
    return true;
80004894:	30 18       	mov	r8,1
80004896:	c3 98       	rjmp	80004908 <et024006_PowerUp+0x720>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004898:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000489c:	70 09       	ld.w	r9,r8[0x0]
8000489e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048a2:	70 18       	ld.w	r8,r8[0x4]
800048a4:	10 39       	cp.w	r9,r8
800048a6:	e0 88 00 1a 	brls	800048da <et024006_PowerUp+0x6f2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800048aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ae:	70 08       	ld.w	r8,r8[0x0]
800048b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800048b4:	10 39       	cp.w	r9,r8
800048b6:	c1 02       	brcc	800048d6 <et024006_PowerUp+0x6ee>
800048b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048bc:	70 18       	ld.w	r8,r8[0x4]
800048be:	ee f9 ff fc 	ld.w	r9,r7[-4]
800048c2:	10 39       	cp.w	r9,r8
800048c4:	e0 88 00 09 	brls	800048d6 <et024006_PowerUp+0x6ee>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800048c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800048cc:	30 18       	mov	r8,1
800048ce:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800048d2:	30 18       	mov	r8,1
800048d4:	c1 a8       	rjmp	80004908 <et024006_PowerUp+0x720>
    }
    return false;
800048d6:	30 08       	mov	r8,0
800048d8:	c1 88       	rjmp	80004908 <et024006_PowerUp+0x720>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800048da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048de:	70 08       	ld.w	r8,r8[0x0]
800048e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800048e4:	10 39       	cp.w	r9,r8
800048e6:	c0 93       	brcs	800048f8 <et024006_PowerUp+0x710>
800048e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ec:	70 18       	ld.w	r8,r8[0x4]
800048ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800048f2:	10 39       	cp.w	r9,r8
800048f4:	e0 88 00 09 	brls	80004906 <et024006_PowerUp+0x71e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800048f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800048fc:	30 18       	mov	r8,1
800048fe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004902:	30 18       	mov	r8,1
80004904:	c0 28       	rjmp	80004908 <et024006_PowerUp+0x720>
    }
    return false;
80004906:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004908:	58 08       	cp.w	r8,0
8000490a:	ca b0       	breq	80004860 <et024006_PowerUp+0x678>
}
8000490c:	2b 7d       	sub	sp,-292
8000490e:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80004912:	00 00       	add	r0,r0
80004914:	00 00       	add	r0,r0
80004916:	04 b8       	st.h	r2++,r8
80004918:	80 00       	ld.sh	r0,r0[0x0]
8000491a:	ce a0       	breq	800048ee <et024006_PowerUp+0x706>

8000491c <et024006_PowerOn>:


/*! \brief Turns the display on.
 */
static void et024006_PowerOn( void )
{
8000491c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80004920:	1a 97       	mov	r7,sp
80004922:	21 9d       	sub	sp,100
80004924:	32 6c       	mov	r12,38
80004926:	ef 6c ff b7 	st.b	r7[-73],r12
8000492a:	30 4c       	mov	r12,4
8000492c:	ef 6c ff b6 	st.b	r7[-74],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004930:	fc 1e c0 00 	movh	lr,0xc000
80004934:	ef 3c ff b7 	ld.ub	r12,r7[-73]
80004938:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000493a:	fc 1e c0 20 	movh	lr,0xc020
8000493e:	ef 3c ff b6 	ld.ub	r12,r7[-74]
80004942:	bc 0c       	st.h	lr[0x0],r12
 */
static void et024006_PowerOn( void )
{
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_D0) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
80004944:	fe fc 02 e0 	ld.w	r12,pc[736]
80004948:	78 0c       	ld.w	r12,r12[0x0]
8000494a:	32 8e       	mov	lr,40
8000494c:	ef 4e ff bc 	st.w	r7[-68],lr
80004950:	ef 4c ff b8 	st.w	r7[-72],r12
80004954:	ee fc ff bc 	ld.w	r12,r7[-68]
80004958:	ef 4c ff c4 	st.w	r7[-60],r12
8000495c:	ee fc ff b8 	ld.w	r12,r7[-72]
80004960:	ef 4c ff c0 	st.w	r7[-64],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004964:	ee fa ff c4 	ld.w	r10,r7[-60]
80004968:	30 0b       	mov	r11,0
8000496a:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000496e:	30 09       	mov	r9,0
80004970:	f6 08 02 4c 	mul	r12,r11,r8
80004974:	f2 0a 02 4e 	mul	lr,r9,r10
80004978:	1c 0c       	add	r12,lr
8000497a:	f4 08 06 48 	mulu.d	r8,r10,r8
8000497e:	12 0c       	add	r12,r9
80004980:	18 99       	mov	r9,r12
80004982:	e0 6a 03 e7 	mov	r10,999
80004986:	30 0b       	mov	r11,0
80004988:	f0 0a 00 0a 	add	r10,r8,r10
8000498c:	f2 0b 00 4b 	adc	r11,r9,r11
80004990:	e0 68 03 e8 	mov	r8,1000
80004994:	30 09       	mov	r9,0
80004996:	f0 1f 00 a5 	mcall	80004c28 <et024006_PowerOn+0x30c>
8000499a:	14 98       	mov	r8,r10
8000499c:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000499e:	ef 48 ff cc 	st.w	r7[-52],r8
800049a2:	ee c8 00 64 	sub	r8,r7,100
800049a6:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800049aa:	e1 b8 00 42 	mfsr	r8,0x108
800049ae:	10 99       	mov	r9,r8
800049b0:	ee f8 ff c8 	ld.w	r8,r7[-56]
800049b4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800049b6:	ee f8 ff c8 	ld.w	r8,r7[-56]
800049ba:	70 09       	ld.w	r9,r8[0x0]
800049bc:	ee f8 ff cc 	ld.w	r8,r7[-52]
800049c0:	10 09       	add	r9,r8
800049c2:	ee f8 ff c8 	ld.w	r8,r7[-56]
800049c6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800049c8:	ee f9 ff c8 	ld.w	r9,r7[-56]
800049cc:	30 08       	mov	r8,0
800049ce:	f3 68 00 08 	st.b	r9[8],r8
800049d2:	ee c8 00 64 	sub	r8,r7,100
800049d6:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800049da:	e1 b8 00 42 	mfsr	r8,0x108
800049de:	ef 48 ff d4 	st.w	r7[-44],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800049e2:	ee f8 ff d0 	ld.w	r8,r7[-48]
800049e6:	f1 39 00 08 	ld.ub	r9,r8[8]
800049ea:	30 28       	mov	r8,2
800049ec:	f0 09 18 00 	cp.b	r9,r8
800049f0:	c0 31       	brne	800049f6 <et024006_PowerOn+0xda>
    return false;
800049f2:	30 08       	mov	r8,0
800049f4:	c4 38       	rjmp	80004a7a <et024006_PowerOn+0x15e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800049f6:	ee f8 ff d0 	ld.w	r8,r7[-48]
800049fa:	f1 39 00 08 	ld.ub	r9,r8[8]
800049fe:	30 18       	mov	r8,1
80004a00:	f0 09 18 00 	cp.b	r9,r8
80004a04:	c0 31       	brne	80004a0a <et024006_PowerOn+0xee>
    return true;
80004a06:	30 18       	mov	r8,1
80004a08:	c3 98       	rjmp	80004a7a <et024006_PowerOn+0x15e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004a0a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004a0e:	70 09       	ld.w	r9,r8[0x0]
80004a10:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004a14:	70 18       	ld.w	r8,r8[0x4]
80004a16:	10 39       	cp.w	r9,r8
80004a18:	e0 88 00 1a 	brls	80004a4c <et024006_PowerOn+0x130>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004a1c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004a20:	70 08       	ld.w	r8,r8[0x0]
80004a22:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004a26:	10 39       	cp.w	r9,r8
80004a28:	c1 02       	brcc	80004a48 <et024006_PowerOn+0x12c>
80004a2a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004a2e:	70 18       	ld.w	r8,r8[0x4]
80004a30:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004a34:	10 39       	cp.w	r9,r8
80004a36:	e0 88 00 09 	brls	80004a48 <et024006_PowerOn+0x12c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004a3a:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004a3e:	30 18       	mov	r8,1
80004a40:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004a44:	30 18       	mov	r8,1
80004a46:	c1 a8       	rjmp	80004a7a <et024006_PowerOn+0x15e>
    }
    return false;
80004a48:	30 08       	mov	r8,0
80004a4a:	c1 88       	rjmp	80004a7a <et024006_PowerOn+0x15e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004a4c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004a50:	70 08       	ld.w	r8,r8[0x0]
80004a52:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004a56:	10 39       	cp.w	r9,r8
80004a58:	c0 93       	brcs	80004a6a <et024006_PowerOn+0x14e>
80004a5a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004a5e:	70 18       	ld.w	r8,r8[0x4]
80004a60:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004a64:	10 39       	cp.w	r9,r8
80004a66:	e0 88 00 09 	brls	80004a78 <et024006_PowerOn+0x15c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004a6a:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004a6e:	30 18       	mov	r8,1
80004a70:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004a74:	30 18       	mov	r8,1
80004a76:	c0 28       	rjmp	80004a7a <et024006_PowerOn+0x15e>
    }
    return false;
80004a78:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004a7a:	58 08       	cp.w	r8,0
80004a7c:	ca b0       	breq	800049d2 <et024006_PowerOn+0xb6>
80004a7e:	32 68       	mov	r8,38
80004a80:	ef 68 ff d9 	st.b	r7[-39],r8
80004a84:	32 48       	mov	r8,36
80004a86:	ef 68 ff d8 	st.b	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a8a:	fc 19 c0 00 	movh	r9,0xc000
80004a8e:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80004a92:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004a94:	fc 19 c0 20 	movh	r9,0xc020
80004a98:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80004a9c:	b2 08       	st.h	r9[0x0],r8
80004a9e:	32 68       	mov	r8,38
80004aa0:	ef 68 ff db 	st.b	r7[-37],r8
80004aa4:	32 c8       	mov	r8,44
80004aa6:	ef 68 ff da 	st.b	r7[-38],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004aaa:	fc 19 c0 00 	movh	r9,0xc000
80004aae:	ef 38 ff db 	ld.ub	r8,r7[-37]
80004ab2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004ab4:	fc 19 c0 20 	movh	r9,0xc020
80004ab8:	ef 38 ff da 	ld.ub	r8,r7[-38]
80004abc:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D0) );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  cpu_delay_ms( 40, tft_data.cpu_hz );
80004abe:	4d a8       	lddpc	r8,80004c24 <et024006_PowerOn+0x308>
80004ac0:	70 08       	ld.w	r8,r8[0x0]
80004ac2:	32 89       	mov	r9,40
80004ac4:	ef 49 ff e0 	st.w	r7[-32],r9
80004ac8:	ef 48 ff dc 	st.w	r7[-36],r8
80004acc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004ad0:	ef 48 ff e8 	st.w	r7[-24],r8
80004ad4:	ee f8 ff dc 	ld.w	r8,r7[-36]
80004ad8:	ef 48 ff e4 	st.w	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004adc:	ee f0 ff e8 	ld.w	r0,r7[-24]
80004ae0:	30 01       	mov	r1,0
80004ae2:	ee f2 ff e4 	ld.w	r2,r7[-28]
80004ae6:	30 03       	mov	r3,0
80004ae8:	e2 02 02 4a 	mul	r10,r1,r2
80004aec:	e6 00 02 48 	mul	r8,r3,r0
80004af0:	10 0a       	add	r10,r8
80004af2:	e0 02 06 48 	mulu.d	r8,r0,r2
80004af6:	12 0a       	add	r10,r9
80004af8:	14 99       	mov	r9,r10
80004afa:	e0 6a 03 e7 	mov	r10,999
80004afe:	30 0b       	mov	r11,0
80004b00:	f0 0a 00 0a 	add	r10,r8,r10
80004b04:	f2 0b 00 4b 	adc	r11,r9,r11
80004b08:	e0 68 03 e8 	mov	r8,1000
80004b0c:	30 09       	mov	r9,0
80004b0e:	f0 1f 00 47 	mcall	80004c28 <et024006_PowerOn+0x30c>
80004b12:	14 98       	mov	r8,r10
80004b14:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004b16:	ef 48 ff f0 	st.w	r7[-16],r8
80004b1a:	ee c8 00 58 	sub	r8,r7,88
80004b1e:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004b22:	e1 b8 00 42 	mfsr	r8,0x108
80004b26:	10 99       	mov	r9,r8
80004b28:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004b2c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004b2e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004b32:	70 09       	ld.w	r9,r8[0x0]
80004b34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004b38:	10 09       	add	r9,r8
80004b3a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004b3e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004b40:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004b44:	30 08       	mov	r8,0
80004b46:	f3 68 00 08 	st.b	r9[8],r8
80004b4a:	ee c8 00 58 	sub	r8,r7,88
80004b4e:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004b52:	e1 b8 00 42 	mfsr	r8,0x108
80004b56:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004b5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b5e:	f1 39 00 08 	ld.ub	r9,r8[8]
80004b62:	30 28       	mov	r8,2
80004b64:	f0 09 18 00 	cp.b	r9,r8
80004b68:	c0 31       	brne	80004b6e <et024006_PowerOn+0x252>
    return false;
80004b6a:	30 08       	mov	r8,0
80004b6c:	c4 38       	rjmp	80004bf2 <et024006_PowerOn+0x2d6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004b6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b72:	f1 39 00 08 	ld.ub	r9,r8[8]
80004b76:	30 18       	mov	r8,1
80004b78:	f0 09 18 00 	cp.b	r9,r8
80004b7c:	c0 31       	brne	80004b82 <et024006_PowerOn+0x266>
    return true;
80004b7e:	30 18       	mov	r8,1
80004b80:	c3 98       	rjmp	80004bf2 <et024006_PowerOn+0x2d6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004b82:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b86:	70 09       	ld.w	r9,r8[0x0]
80004b88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b8c:	70 18       	ld.w	r8,r8[0x4]
80004b8e:	10 39       	cp.w	r9,r8
80004b90:	e0 88 00 1a 	brls	80004bc4 <et024006_PowerOn+0x2a8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004b94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b98:	70 08       	ld.w	r8,r8[0x0]
80004b9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004b9e:	10 39       	cp.w	r9,r8
80004ba0:	c1 02       	brcc	80004bc0 <et024006_PowerOn+0x2a4>
80004ba2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ba6:	70 18       	ld.w	r8,r8[0x4]
80004ba8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004bac:	10 39       	cp.w	r9,r8
80004bae:	e0 88 00 09 	brls	80004bc0 <et024006_PowerOn+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004bb2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004bb6:	30 18       	mov	r8,1
80004bb8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004bbc:	30 18       	mov	r8,1
80004bbe:	c1 a8       	rjmp	80004bf2 <et024006_PowerOn+0x2d6>
    }
    return false;
80004bc0:	30 08       	mov	r8,0
80004bc2:	c1 88       	rjmp	80004bf2 <et024006_PowerOn+0x2d6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004bc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bc8:	70 08       	ld.w	r8,r8[0x0]
80004bca:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004bce:	10 39       	cp.w	r9,r8
80004bd0:	c0 93       	brcs	80004be2 <et024006_PowerOn+0x2c6>
80004bd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bd6:	70 18       	ld.w	r8,r8[0x4]
80004bd8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004bdc:	10 39       	cp.w	r9,r8
80004bde:	e0 88 00 09 	brls	80004bf0 <et024006_PowerOn+0x2d4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004be2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004be6:	30 18       	mov	r8,1
80004be8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004bec:	30 18       	mov	r8,1
80004bee:	c0 28       	rjmp	80004bf2 <et024006_PowerOn+0x2d6>
    }
    return false;
80004bf0:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004bf2:	58 08       	cp.w	r8,0
80004bf4:	ca b0       	breq	80004b4a <et024006_PowerOn+0x22e>
80004bf6:	32 68       	mov	r8,38
80004bf8:	ef 68 ff ff 	st.b	r7[-1],r8
80004bfc:	33 c8       	mov	r8,60
80004bfe:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004c02:	fc 19 c0 00 	movh	r9,0xc000
80004c06:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004c0a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004c0c:	fc 19 c0 20 	movh	r9,0xc020
80004c10:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004c14:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON)| (1 << HIMAX_DTE) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  et024006_SetRegister( HIMAX_INTERNAL28, (1 << HIMAX_TEON) );
80004c16:	30 8b       	mov	r11,8
80004c18:	37 0c       	mov	r12,112
80004c1a:	f0 1f 00 05 	mcall	80004c2c <et024006_PowerOn+0x310>
}
80004c1e:	2e 7d       	sub	sp,-100
80004c20:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80004c24:	00 00       	add	r0,r0
80004c26:	04 b8       	st.h	r2++,r8
80004c28:	80 00       	ld.sh	r0,r0[0x0]
80004c2a:	ce a0       	breq	80004bfe <et024006_PowerOn+0x2e2>
80004c2c:	80 00       	ld.sh	r0,r0[0x0]
80004c2e:	36 30       	mov	r0,99
80004c30:	20 44       	sub	r4,4
80004c32:	65 63       	ld.w	r3,r2[0x58]
80004c34:	69 70       	ld.w	r0,r4[0x5c]
80004c36:	68 65       	ld.w	r5,r4[0x18]
80004c38:	72 65       	ld.w	r5,r9[0x18]
80004c3a:	64 20       	ld.w	r0,r2[0x8]
80004c3c:	00 00       	add	r0,r0
80004c3e:	00 00       	add	r0,r0
80004c40:	20 73       	sub	r3,7
80004c42:	65 63       	ld.w	r3,r2[0x58]
80004c44:	74 6f       	ld.w	pc,r10[0x18]
80004c46:	72 73       	ld.w	r3,r9[0x1c]
80004c48:	00 00       	add	r0,r0
80004c4a:	00 00       	add	r0,r0
80004c4c:	20 45       	sub	r5,4
80004c4e:	6e 63       	ld.w	r3,r7[0x18]
80004c50:	69 70       	ld.w	r0,r4[0x5c]
80004c52:	68 65       	ld.w	r5,r4[0x18]
80004c54:	72 65       	ld.w	r5,r9[0x18]
80004c56:	64 20       	ld.w	r0,r2[0x8]
80004c58:	00 00       	add	r0,r0
	...

80004c5c <is_sd_mmc_mci_card_present>:


//_____ D E F I N I T I O N S ______________________________________________

bool is_sd_mmc_mci_card_present(uint8_t slot)
{
80004c5c:	eb cd 40 80 	pushm	r7,lr
80004c60:	1a 97       	mov	r7,sp
80004c62:	20 1d       	sub	sp,4
80004c64:	18 98       	mov	r8,r12
80004c66:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80004c6a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004c6e:	30 18       	mov	r8,1
80004c70:	f0 09 18 00 	cp.b	r9,r8
80004c74:	e0 88 00 04 	brls	80004c7c <is_sd_mmc_mci_card_present+0x20>
    return false;
80004c78:	30 08       	mov	r8,0
80004c7a:	c1 88       	rjmp	80004caa <is_sd_mmc_mci_card_present+0x4e>

  switch(slot)
80004c7c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004c80:	58 08       	cp.w	r8,0
80004c82:	c0 b0       	breq	80004c98 <is_sd_mmc_mci_card_present+0x3c>
80004c84:	58 18       	cp.w	r8,1
80004c86:	c1 11       	brne	80004ca8 <is_sd_mmc_mci_card_present+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_CARD_DETECT)==SD_SLOT_4BITS_CARD_DETECT_VALUE);
80004c88:	32 8c       	mov	r12,40
80004c8a:	f0 1f 00 0b 	mcall	80004cb4 <is_sd_mmc_mci_card_present+0x58>
80004c8e:	18 98       	mov	r8,r12
80004c90:	58 08       	cp.w	r8,0
80004c92:	5f 08       	sreq	r8
80004c94:	5c 58       	castu.b	r8
80004c96:	c0 a8       	rjmp	80004caa <is_sd_mmc_mci_card_present+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_CARD_DETECT)==SD_SLOT_8BITS_CARD_DETECT_VALUE);
80004c98:	32 bc       	mov	r12,43
80004c9a:	f0 1f 00 07 	mcall	80004cb4 <is_sd_mmc_mci_card_present+0x58>
80004c9e:	18 98       	mov	r8,r12
80004ca0:	58 08       	cp.w	r8,0
80004ca2:	5f 08       	sreq	r8
80004ca4:	5c 58       	castu.b	r8
80004ca6:	c0 28       	rjmp	80004caa <is_sd_mmc_mci_card_present+0x4e>
  }

  return false;
80004ca8:	30 08       	mov	r8,0
}
80004caa:	10 9c       	mov	r12,r8
80004cac:	2f fd       	sub	sp,-4
80004cae:	e3 cd 80 80 	ldm	sp++,r7,pc
80004cb2:	00 00       	add	r0,r0
80004cb4:	80 00       	ld.sh	r0,r0[0x0]
80004cb6:	77 04       	ld.w	r4,r11[0x40]

80004cb8 <is_sd_mmc_mci_card_protected>:

bool is_sd_mmc_mci_card_protected(uint8_t slot)
{
80004cb8:	eb cd 40 80 	pushm	r7,lr
80004cbc:	1a 97       	mov	r7,sp
80004cbe:	20 1d       	sub	sp,4
80004cc0:	18 98       	mov	r8,r12
80004cc2:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80004cc6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004cca:	30 18       	mov	r8,1
80004ccc:	f0 09 18 00 	cp.b	r9,r8
80004cd0:	e0 88 00 04 	brls	80004cd8 <is_sd_mmc_mci_card_protected+0x20>
    return false;
80004cd4:	30 08       	mov	r8,0
80004cd6:	c1 88       	rjmp	80004d06 <is_sd_mmc_mci_card_protected+0x4e>

  switch(slot)
80004cd8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004cdc:	58 08       	cp.w	r8,0
80004cde:	c0 b0       	breq	80004cf4 <is_sd_mmc_mci_card_protected+0x3c>
80004ce0:	58 18       	cp.w	r8,1
80004ce2:	c1 11       	brne	80004d04 <is_sd_mmc_mci_card_protected+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_WRITE_PROTECT)==SD_SLOT_4BITS_WRITE_PROTECT_VALUE);
80004ce4:	32 6c       	mov	r12,38
80004ce6:	f0 1f 00 0b 	mcall	80004d10 <is_sd_mmc_mci_card_protected+0x58>
80004cea:	18 98       	mov	r8,r12
80004cec:	58 18       	cp.w	r8,1
80004cee:	5f 08       	sreq	r8
80004cf0:	5c 58       	castu.b	r8
80004cf2:	c0 a8       	rjmp	80004d06 <is_sd_mmc_mci_card_protected+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_WRITE_PROTECT)==SD_SLOT_8BITS_WRITE_PROTECT_VALUE);
80004cf4:	36 cc       	mov	r12,108
80004cf6:	f0 1f 00 07 	mcall	80004d10 <is_sd_mmc_mci_card_protected+0x58>
80004cfa:	18 98       	mov	r8,r12
80004cfc:	58 18       	cp.w	r8,1
80004cfe:	5f 08       	sreq	r8
80004d00:	5c 58       	castu.b	r8
80004d02:	c0 28       	rjmp	80004d06 <is_sd_mmc_mci_card_protected+0x4e>
  }

  return false;
80004d04:	30 08       	mov	r8,0
}
80004d06:	10 9c       	mov	r12,r8
80004d08:	2f fd       	sub	sp,-4
80004d0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d0e:	00 00       	add	r0,r0
80004d10:	80 00       	ld.sh	r0,r0[0x0]
80004d12:	77 04       	ld.w	r4,r11[0x40]

80004d14 <sd_mmc_mci_get_csd>:

static bool  sd_mmc_mci_get_csd(uint8_t slot)
{
80004d14:	eb cd 40 80 	pushm	r7,lr
80004d18:	1a 97       	mov	r7,sp
80004d1a:	20 fd       	sub	sp,60
80004d1c:	18 98       	mov	r8,r12
80004d1e:	ef 68 ff c4 	st.b	r7[-60],r8

  uint32_t max_Read_DataBlock_Length;
  uint32_t mult;
  uint32_t blocknr;
  uint8_t tmp;
  const uint16_t freq_unit[4] = {10, 100, 1000, 10000};
80004d22:	fe f9 02 b2 	ld.w	r9,pc[690]
80004d26:	ee c8 00 28 	sub	r8,r7,40
80004d2a:	30 8a       	mov	r10,8
80004d2c:	12 9b       	mov	r11,r9
80004d2e:	10 9c       	mov	r12,r8
80004d30:	f0 1f 00 aa 	mcall	80004fd8 <sd_mmc_mci_get_csd+0x2c4>
  const uint8_t mult_fact[16] = {0, 10, 12, 13, 15, 20, 26, 30, 35, 40, 45, 52, 55, 60, 70, 80}; // MMC tabs...
80004d34:	fe f8 02 a8 	ld.w	r8,pc[680]
80004d38:	ee ca 00 38 	sub	r10,r7,56
80004d3c:	10 9b       	mov	r11,r8
80004d3e:	f6 e8 00 00 	ld.d	r8,r11[0]
80004d42:	f4 e9 00 00 	st.d	r10[0],r8
80004d46:	f6 e8 00 08 	ld.d	r8,r11[8]
80004d4a:	f4 e9 00 08 	st.d	r10[8],r8

  if (slot > MCI_LAST_SLOTS)
80004d4e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004d52:	30 18       	mov	r8,1
80004d54:	f0 09 18 00 	cp.b	r9,r8
80004d58:	e0 88 00 04 	brls	80004d60 <sd_mmc_mci_get_csd+0x4c>
    return false;
80004d5c:	30 08       	mov	r8,0
80004d5e:	c3 69       	rjmp	80004fca <sd_mmc_mci_get_csd+0x2b6>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80004d60:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80004d64:	fe f9 02 7c 	ld.w	r9,pc[636]
80004d68:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004d6c:	10 9a       	mov	r10,r8
80004d6e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004d72:	fe f8 02 72 	ld.w	r8,pc[626]
80004d76:	70 08       	ld.w	r8,r8[0x0]
80004d78:	12 9b       	mov	r11,r9
80004d7a:	10 9c       	mov	r12,r8
80004d7c:	f0 1f 00 9b 	mcall	80004fe8 <sd_mmc_mci_get_csd+0x2d4>

  //-- (CMD9)
  if (mci_send_cmd(mci, SD_MMC_SEND_CSD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80004d80:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004d84:	fe f8 02 68 	ld.w	r8,pc[616]
80004d88:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004d8c:	fe f8 02 58 	ld.w	r8,pc[600]
80004d90:	70 08       	ld.w	r8,r8[0x0]
80004d92:	12 9a       	mov	r10,r9
80004d94:	e0 6b 10 89 	mov	r11,4233
80004d98:	10 9c       	mov	r12,r8
80004d9a:	f0 1f 00 96 	mcall	80004ff0 <sd_mmc_mci_get_csd+0x2dc>
80004d9e:	18 98       	mov	r8,r12
80004da0:	58 08       	cp.w	r8,0
80004da2:	c0 30       	breq	80004da8 <sd_mmc_mci_get_csd+0x94>
    return false;
80004da4:	30 08       	mov	r8,0
80004da6:	c1 29       	rjmp	80004fca <sd_mmc_mci_get_csd+0x2b6>


  csd.csd[0] = mci_read_response(mci);
80004da8:	fe f8 02 3c 	ld.w	r8,pc[572]
80004dac:	70 08       	ld.w	r8,r8[0x0]
80004dae:	10 9c       	mov	r12,r8
80004db0:	f0 1f 00 91 	mcall	80004ff4 <sd_mmc_mci_get_csd+0x2e0>
80004db4:	18 98       	mov	r8,r12
80004db6:	ef 48 ff e0 	st.w	r7[-32],r8
  csd.csd[1] = mci_read_response(mci);
80004dba:	fe f8 02 2a 	ld.w	r8,pc[554]
80004dbe:	70 08       	ld.w	r8,r8[0x0]
80004dc0:	10 9c       	mov	r12,r8
80004dc2:	f0 1f 00 8d 	mcall	80004ff4 <sd_mmc_mci_get_csd+0x2e0>
80004dc6:	18 98       	mov	r8,r12
80004dc8:	ef 48 ff e4 	st.w	r7[-28],r8
  csd.csd[2] = mci_read_response(mci);
80004dcc:	fe f8 02 18 	ld.w	r8,pc[536]
80004dd0:	70 08       	ld.w	r8,r8[0x0]
80004dd2:	10 9c       	mov	r12,r8
80004dd4:	f0 1f 00 88 	mcall	80004ff4 <sd_mmc_mci_get_csd+0x2e0>
80004dd8:	18 98       	mov	r8,r12
80004dda:	ef 48 ff e8 	st.w	r7[-24],r8
  csd.csd[3] = mci_read_response(mci);
80004dde:	fe f8 02 06 	ld.w	r8,pc[518]
80004de2:	70 08       	ld.w	r8,r8[0x0]
80004de4:	10 9c       	mov	r12,r8
80004de6:	f0 1f 00 84 	mcall	80004ff4 <sd_mmc_mci_get_csd+0x2e0>
80004dea:	18 98       	mov	r8,r12
80004dec:	ef 48 ff ec 	st.w	r7[-20],r8

  //-- Read "System specification version", only available on MMC card
  // field: SPEC_VERS (only on MMC)
  if (MMC_CARD & g_card_type[slot]) // TO BE ADDED
80004df0:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80004df4:	fe f9 02 04 	ld.w	r9,pc[516]
80004df8:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004dfc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004e00:	5c 58       	castu.b	r8
80004e02:	c1 40       	breq	80004e2a <sd_mmc_mci_get_csd+0x116>
  {
    if (CSD_SPEC_VER_4_0 == (MSB0(csd.csd[0]) & CSD_MSK_SPEC_VER))
80004e04:	ee c8 00 20 	sub	r8,r7,32
80004e08:	11 88       	ld.ub	r8,r8[0x0]
80004e0a:	e2 18 00 3c 	andl	r8,0x3c,COH
80004e0e:	59 08       	cp.w	r8,16
80004e10:	c0 d1       	brne	80004e2a <sd_mmc_mci_get_csd+0x116>
    {
      g_card_type[slot] |= MMC_CARD_V4;
80004e12:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004e16:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80004e1a:	4f 8a       	lddpc	r10,80004ff8 <sd_mmc_mci_get_csd+0x2e4>
80004e1c:	f4 08 07 08 	ld.ub	r8,r10[r8]
80004e20:	a3 a8       	sbr	r8,0x2
80004e22:	5c 58       	castu.b	r8
80004e24:	4f 5a       	lddpc	r10,80004ff8 <sd_mmc_mci_get_csd+0x2e4>
80004e26:	f4 09 0b 08 	st.b	r10[r9],r8
    }
  }

  //-- Compute MMC/SD speed
  // field: TRAN_SPEED (CSD V1 & V2 are the same)
  g_card_freq[slot]  = mult_fact[csd.csd_v1.tranSpeed >> 3]; // Get Multiplier factor
80004e2a:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80004e2e:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80004e32:	a3 98       	lsr	r8,0x3
80004e34:	5c 58       	castu.b	r8
80004e36:	ee 08 00 08 	add	r8,r7,r8
80004e3a:	f1 38 ff c8 	ld.ub	r8,r8[-56]
80004e3e:	4f 09       	lddpc	r9,80004ffc <sd_mmc_mci_get_csd+0x2e8>
80004e40:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  if (SD_CARD & g_card_type[slot])
80004e44:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80004e48:	4e c9       	lddpc	r9,80004ff8 <sd_mmc_mci_get_csd+0x2e4>
80004e4a:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004e4e:	e2 18 00 02 	andl	r8,0x2,COH
80004e52:	c2 00       	breq	80004e92 <sd_mmc_mci_get_csd+0x17e>
  {
    // SD card don't have same frequency that MMC card
    if( 26 == g_card_freq[slot] )
80004e54:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004e58:	4e 98       	lddpc	r8,80004ffc <sd_mmc_mci_get_csd+0x2e8>
80004e5a:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80004e5e:	31 a8       	mov	r8,26
80004e60:	f0 09 19 00 	cp.h	r9,r8
80004e64:	c0 81       	brne	80004e74 <sd_mmc_mci_get_csd+0x160>
    {
      g_card_freq[slot] = 25;
80004e66:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80004e6a:	4e 59       	lddpc	r9,80004ffc <sd_mmc_mci_get_csd+0x2e8>
80004e6c:	31 98       	mov	r8,25
80004e6e:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
80004e72:	c1 08       	rjmp	80004e92 <sd_mmc_mci_get_csd+0x17e>
    }
    else if( 52 == g_card_freq[slot] )
80004e74:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004e78:	4e 18       	lddpc	r8,80004ffc <sd_mmc_mci_get_csd+0x2e8>
80004e7a:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80004e7e:	33 48       	mov	r8,52
80004e80:	f0 09 19 00 	cp.h	r9,r8
80004e84:	c0 71       	brne	80004e92 <sd_mmc_mci_get_csd+0x17e>
    {
      g_card_freq[slot] = 50;
80004e86:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80004e8a:	4d d9       	lddpc	r9,80004ffc <sd_mmc_mci_get_csd+0x2e8>
80004e8c:	33 28       	mov	r8,50
80004e8e:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
    }
  }
  g_card_freq[slot] *= freq_unit[ csd.csd_v1.tranSpeed&0x07 ]; // Get transfer rate unit
80004e92:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80004e96:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004e9a:	4d 98       	lddpc	r8,80004ffc <sd_mmc_mci_get_csd+0x2e8>
80004e9c:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80004ea0:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80004ea4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004ea8:	a1 78       	lsl	r8,0x1
80004eaa:	ee 08 00 08 	add	r8,r7,r8
80004eae:	f1 08 ff d8 	ld.sh	r8,r8[-40]
80004eb2:	f2 08 02 48 	mul	r8,r9,r8
80004eb6:	5c 88       	casts.h	r8
80004eb8:	4d 19       	lddpc	r9,80004ffc <sd_mmc_mci_get_csd+0x2e8>
80004eba:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

  //-- Compute card size in number of block
  // field: WRITE_BL_LEN, READ_BL_LEN, C_SIZE (CSD V1 & V2 are not the same)
  if (SD_CARD_HC & g_card_type[slot])
80004ebe:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80004ec2:	4c e9       	lddpc	r9,80004ff8 <sd_mmc_mci_get_csd+0x2e4>
80004ec4:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004ec8:	e2 18 00 10 	andl	r8,0x10,COH
80004ecc:	c2 10       	breq	80004f0e <sd_mmc_mci_get_csd+0x1fa>
  {
    g_card_size[slot] = (csd.csd_v2.deviceSizeH<<16)+(csd.csd_v2.deviceSizeL&0xFFff);
80004ece:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004ed2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004ed6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80004eda:	5c 58       	castu.b	r8
80004edc:	f0 0a 15 10 	lsl	r10,r8,0x10
80004ee0:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80004ee4:	5c 78       	castu.h	r8
80004ee6:	f4 08 00 08 	add	r8,r10,r8
80004eea:	10 9a       	mov	r10,r8
80004eec:	4c 58       	lddpc	r8,80005000 <sd_mmc_mci_get_csd+0x2ec>
80004eee:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

    // memory capacity = (C_SIZE+1) * 1K sector
    g_card_size[slot] = (g_card_size[slot] + 1) << 10;  // unit 512B
80004ef2:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004ef6:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80004efa:	4c 28       	lddpc	r8,80005000 <sd_mmc_mci_get_csd+0x2ec>
80004efc:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80004f00:	2f f8       	sub	r8,-1
80004f02:	f0 0a 15 0a 	lsl	r10,r8,0xa
80004f06:	4b f8       	lddpc	r8,80005000 <sd_mmc_mci_get_csd+0x2ec>
80004f08:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004f0c:	c5 e8       	rjmp	80004fc8 <sd_mmc_mci_get_csd+0x2b4>
  }
  else
  {
    // Check block size
    tmp = csd.csd_v1.writeBlLen; // WRITE_BL_LEN
80004f0e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004f12:	f1 d8 c2 c4 	bfextu	r8,r8,0x16,0x4
80004f16:	5c 58       	castu.b	r8
80004f18:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
80004f1c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f20:	30 88       	mov	r8,8
80004f22:	f0 09 18 00 	cp.b	r9,r8
80004f26:	e0 8b 00 04 	brhi	80004f2e <sd_mmc_mci_get_csd+0x21a>
      return false;  // block size < 512B not supported by firmware
80004f2a:	30 08       	mov	r8,0
80004f2c:	c4 f8       	rjmp	80004fca <sd_mmc_mci_get_csd+0x2b6>

    tmp = csd.csd_v1.readBlLen; // READ_BL_LEN
80004f2e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004f32:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
80004f36:	5c 58       	castu.b	r8
80004f38:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
80004f3c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f40:	30 88       	mov	r8,8
80004f42:	f0 09 18 00 	cp.b	r9,r8
80004f46:	e0 8b 00 04 	brhi	80004f4e <sd_mmc_mci_get_csd+0x23a>
      return false;  // block size < 512B not supported by firmware
80004f4a:	30 08       	mov	r8,0
80004f4c:	c3 f8       	rjmp	80004fca <sd_mmc_mci_get_csd+0x2b6>

    //// Compute Memory Capacity
    // compute MULT
    mult = 1 << (csd.csd_v1.cSizeMult + 2);
80004f4e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004f52:	f1 d8 c1 e3 	bfextu	r8,r8,0xf,0x3
80004f56:	5c 58       	castu.b	r8
80004f58:	2f e8       	sub	r8,-2
80004f5a:	30 19       	mov	r9,1
80004f5c:	f2 08 09 48 	lsl	r8,r9,r8
80004f60:	ef 48 ff f4 	st.w	r7[-12],r8
    max_Read_DataBlock_Length = 1<<csd.csd_v1.readBlLen;
80004f64:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004f68:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
80004f6c:	5c 58       	castu.b	r8
80004f6e:	30 19       	mov	r9,1
80004f70:	f2 08 09 48 	lsl	r8,r9,r8
80004f74:	ef 48 ff f0 	st.w	r7[-16],r8
    // compute MSB of C_SIZE
    blocknr = csd.csd_v1.deviceSizeH << 2;
80004f78:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004f7c:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80004f80:	5c 88       	casts.h	r8
80004f82:	5c 78       	castu.h	r8
80004f84:	a3 68       	lsl	r8,0x2
80004f86:	ef 48 ff f8 	st.w	r7[-8],r8
    // compute MULT * (LSB of C-SIZE + MSB already computed + 1) = BLOCKNR
    blocknr = mult * ( blocknr + csd.csd_v1.deviceSizeL + 1 );
80004f8a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004f8e:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
80004f92:	5c 58       	castu.b	r8
80004f94:	10 99       	mov	r9,r8
80004f96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f9a:	f2 08 00 08 	add	r8,r9,r8
80004f9e:	f0 c9 ff ff 	sub	r9,r8,-1
80004fa2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004fa6:	f2 08 02 48 	mul	r8,r9,r8
80004faa:	ef 48 ff f8 	st.w	r7[-8],r8
    g_card_size[slot] = ((max_Read_DataBlock_Length * blocknr)/512);
80004fae:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80004fb2:	ee fa ff f0 	ld.w	r10,r7[-16]
80004fb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fba:	f4 08 02 48 	mul	r8,r10,r8
80004fbe:	f0 0a 16 09 	lsr	r10,r8,0x9
80004fc2:	49 08       	lddpc	r8,80005000 <sd_mmc_mci_get_csd+0x2ec>
80004fc4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  }

  return true;
80004fc8:	30 18       	mov	r8,1
}
80004fca:	10 9c       	mov	r12,r8
80004fcc:	2f 1d       	sub	sp,-60
80004fce:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fd2:	00 00       	add	r0,r0
80004fd4:	80 00       	ld.sh	r0,r0[0x0]
80004fd6:	da bc       	*unknown*
80004fd8:	80 00       	ld.sh	r0,r0[0x0]
80004fda:	d1 32       	popm	r0-r7,r11
80004fdc:	80 00       	ld.sh	r0,r0[0x0]
80004fde:	da c4       	*unknown*
80004fe0:	00 00       	add	r0,r0
80004fe2:	09 bc       	ld.ub	r12,r4[0x3]
80004fe4:	00 00       	add	r0,r0
80004fe6:	00 14       	sub	r4,r0
80004fe8:	80 00       	ld.sh	r0,r0[0x0]
80004fea:	7e 70       	ld.w	r0,pc[0x1c]
80004fec:	00 00       	add	r0,r0
80004fee:	07 ac       	ld.ub	r12,r3[0x2]
80004ff0:	80 00       	ld.sh	r0,r0[0x0]
80004ff2:	7c d8       	ld.w	r8,lr[0x34]
80004ff4:	80 00       	ld.sh	r0,r0[0x0]
80004ff6:	7e 10       	ld.w	r0,pc[0x4]
80004ff8:	00 00       	add	r0,r0
80004ffa:	0b c4       	ld.ub	r4,r5[0x4]
80004ffc:	00 00       	add	r0,r0
80004ffe:	09 be       	ld.ub	lr,r4[0x3]
80005000:	00 00       	add	r0,r0
80005002:	07 b4       	ld.ub	r4,r3[0x3]

80005004 <sd_mmc_get_ext_csd>:

static bool  sd_mmc_get_ext_csd( uint8_t slot )
{
80005004:	eb cd 40 80 	pushm	r7,lr
80005008:	1a 97       	mov	r7,sp
8000500a:	20 ad       	sub	sp,40
8000500c:	18 98       	mov	r8,r12
8000500e:	ef 68 ff d8 	st.b	r7[-40],r8
  uint8_t  i;
  uint32_t val;

  if (slot > MCI_LAST_SLOTS)
80005012:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80005016:	30 18       	mov	r8,1
80005018:	f0 09 18 00 	cp.b	r9,r8
8000501c:	e0 88 00 04 	brls	80005024 <sd_mmc_get_ext_csd+0x20>
    return false;
80005020:	30 08       	mov	r8,0
80005022:	cb e8       	rjmp	8000519e <sd_mmc_get_ext_csd+0x19a>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80005024:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80005028:	4e 09       	lddpc	r9,800051a8 <sd_mmc_get_ext_csd+0x1a4>
8000502a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000502e:	10 9a       	mov	r10,r8
80005030:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80005034:	4d e8       	lddpc	r8,800051ac <sd_mmc_get_ext_csd+0x1a8>
80005036:	70 08       	ld.w	r8,r8[0x0]
80005038:	12 9b       	mov	r11,r9
8000503a:	10 9c       	mov	r12,r8
8000503c:	f0 1f 00 5d 	mcall	800051b0 <sd_mmc_get_ext_csd+0x1ac>

  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE); // Ext CSD = 512B size
80005040:	4d b8       	lddpc	r8,800051ac <sd_mmc_get_ext_csd+0x1a8>
80005042:	70 08       	ld.w	r8,r8[0x0]
80005044:	e0 6b 02 00 	mov	r11,512
80005048:	10 9c       	mov	r12,r8
8000504a:	f0 1f 00 5b 	mcall	800051b4 <sd_mmc_get_ext_csd+0x1b0>
  mci_set_block_count(mci, 1);
8000504e:	4d 88       	lddpc	r8,800051ac <sd_mmc_get_ext_csd+0x1a8>
80005050:	70 08       	ld.w	r8,r8[0x0]
80005052:	30 1b       	mov	r11,1
80005054:	10 9c       	mov	r12,r8
80005056:	f0 1f 00 59 	mcall	800051b8 <sd_mmc_get_ext_csd+0x1b4>

  //** (CMD8)
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
8000505a:	4d 58       	lddpc	r8,800051ac <sd_mmc_get_ext_csd+0x1a8>
8000505c:	70 08       	ld.w	r8,r8[0x0]
8000505e:	30 0a       	mov	r10,0
80005060:	e4 7b 10 48 	mov	r11,331848
80005064:	10 9c       	mov	r12,r8
80005066:	f0 1f 00 56 	mcall	800051bc <sd_mmc_get_ext_csd+0x1b8>
8000506a:	18 98       	mov	r8,r12
8000506c:	58 08       	cp.w	r8,0
8000506e:	c0 30       	breq	80005074 <sd_mmc_get_ext_csd+0x70>
    return false;
80005070:	30 08       	mov	r8,0
80005072:	c9 68       	rjmp	8000519e <sd_mmc_get_ext_csd+0x19a>

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
80005074:	34 08       	mov	r8,64
80005076:	ef 68 ff e3 	st.b	r7[-29],r8
8000507a:	c8 a8       	rjmp	8000518e <sd_mmc_get_ext_csd+0x18a>
  {
    while(!(mci_rx_ready(mci)));
8000507c:	4c c8       	lddpc	r8,800051ac <sd_mmc_get_ext_csd+0x1a8>
8000507e:	70 08       	ld.w	r8,r8[0x0]
80005080:	ef 48 ff e4 	st.w	r7[-28],r8
80005084:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005088:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
8000508c:	4c d8       	lddpc	r8,800051c0 <sd_mmc_get_ext_csd+0x1bc>
8000508e:	70 08       	ld.w	r8,r8[0x0]
80005090:	10 99       	mov	r9,r8
80005092:	e6 19 01 e0 	andh	r9,0x1e0,COH
80005096:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000509a:	71 08       	ld.w	r8,r8[0x40]
8000509c:	f3 e8 10 08 	or	r8,r9,r8
800050a0:	10 99       	mov	r9,r8
800050a2:	4c 88       	lddpc	r8,800051c0 <sd_mmc_get_ext_csd+0x1bc>
800050a4:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800050a6:	4c 78       	lddpc	r8,800051c0 <sd_mmc_get_ext_csd+0x1bc>
800050a8:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
800050aa:	e2 18 00 02 	andl	r8,0x2,COH
800050ae:	5f 18       	srne	r8
800050b0:	58 08       	cp.w	r8,0
800050b2:	ce 50       	breq	8000507c <sd_mmc_get_ext_csd+0x78>
    mci_rd_data(mci);
800050b4:	4b e8       	lddpc	r8,800051ac <sd_mmc_get_ext_csd+0x1a8>
800050b6:	70 08       	ld.w	r8,r8[0x0]
800050b8:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
800050bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800050c0:	70 c8       	ld.w	r8,r8[0x30]
    while(!(mci_rx_ready(mci)));
800050c2:	4b b8       	lddpc	r8,800051ac <sd_mmc_get_ext_csd+0x1a8>
800050c4:	70 08       	ld.w	r8,r8[0x0]
800050c6:	ef 48 ff f0 	st.w	r7[-16],r8
800050ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050ce:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800050d2:	4b c8       	lddpc	r8,800051c0 <sd_mmc_get_ext_csd+0x1bc>
800050d4:	70 08       	ld.w	r8,r8[0x0]
800050d6:	10 99       	mov	r9,r8
800050d8:	e6 19 01 e0 	andh	r9,0x1e0,COH
800050dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800050e0:	71 08       	ld.w	r8,r8[0x40]
800050e2:	f3 e8 10 08 	or	r8,r9,r8
800050e6:	10 99       	mov	r9,r8
800050e8:	4b 68       	lddpc	r8,800051c0 <sd_mmc_get_ext_csd+0x1bc>
800050ea:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800050ec:	4b 58       	lddpc	r8,800051c0 <sd_mmc_get_ext_csd+0x1bc>
800050ee:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
800050f0:	e2 18 00 02 	andl	r8,0x2,COH
800050f4:	5f 18       	srne	r8
800050f6:	58 08       	cp.w	r8,0
800050f8:	ce 50       	breq	800050c2 <sd_mmc_get_ext_csd+0xbe>
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
800050fa:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800050fe:	32 68       	mov	r8,38
80005100:	f0 09 18 00 	cp.b	r9,r8
80005104:	c1 c1       	brne	8000513c <sd_mmc_get_ext_csd+0x138>
80005106:	ef 38 ff d8 	ld.ub	r8,r7[-40]
8000510a:	4a f9       	lddpc	r9,800051c4 <sd_mmc_get_ext_csd+0x1c0>
8000510c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005110:	e2 18 00 20 	andl	r8,0x20,COH
80005114:	c1 40       	breq	8000513c <sd_mmc_get_ext_csd+0x138>
    {
      // If MMC HC then read Sector Count. Byte 212 is LSB, Byte 215 is MSB.
      val = mci_rd_data(mci);
80005116:	4a 68       	lddpc	r8,800051ac <sd_mmc_get_ext_csd+0x1a8>
80005118:	70 08       	ld.w	r8,r8[0x0]
8000511a:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
8000511e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005122:	70 c8       	ld.w	r8,r8[0x30]
80005124:	ef 48 ff dc 	st.w	r7[-36],r8
      g_card_size[slot] = swap32(val);
80005128:	ef 39 ff d8 	ld.ub	r9,r7[-40]
8000512c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005130:	5c b8       	swap.b	r8
80005132:	10 9a       	mov	r10,r8
80005134:	4a 58       	lddpc	r8,800051c8 <sd_mmc_get_ext_csd+0x1c4>
80005136:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  for (i = (512L/8); i!=0; i--)
  {
    while(!(mci_rx_ready(mci)));
    mci_rd_data(mci);
    while(!(mci_rx_ready(mci)));
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
8000513a:	c2 58       	rjmp	80005184 <sd_mmc_get_ext_csd+0x180>
      val = mci_rd_data(mci);
      g_card_size[slot] = swap32(val);
    }
    else
    {
      val = mci_rd_data(mci);
8000513c:	49 c8       	lddpc	r8,800051ac <sd_mmc_get_ext_csd+0x1a8>
8000513e:	70 08       	ld.w	r8,r8[0x0]
80005140:	ef 48 ff fc 	st.w	r7[-4],r8
80005144:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005148:	70 c8       	ld.w	r8,r8[0x30]
8000514a:	ef 48 ff dc 	st.w	r7[-36],r8
      if( (64-24) == i )
8000514e:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80005152:	32 88       	mov	r8,40
80005154:	f0 09 18 00 	cp.b	r9,r8
80005158:	c1 61       	brne	80005184 <sd_mmc_get_ext_csd+0x180>
      {  // Read byte at offset 196
        if( MSB0(val) & 0x02 )
8000515a:	ee c8 00 24 	sub	r8,r7,36
8000515e:	11 88       	ld.ub	r8,r8[0x0]
80005160:	e2 18 00 02 	andl	r8,0x2,COH
80005164:	c0 90       	breq	80005176 <sd_mmc_get_ext_csd+0x172>
          g_card_freq[slot] = 52*1000;
80005166:	ef 3a ff d8 	ld.ub	r10,r7[-40]
8000516a:	49 99       	lddpc	r9,800051cc <sd_mmc_get_ext_csd+0x1c8>
8000516c:	fe 78 cb 20 	mov	r8,-13536
80005170:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
80005174:	c0 88       	rjmp	80005184 <sd_mmc_get_ext_csd+0x180>
        else
          g_card_freq[slot] = 26*1000;
80005176:	ef 3a ff d8 	ld.ub	r10,r7[-40]
8000517a:	49 59       	lddpc	r9,800051cc <sd_mmc_get_ext_csd+0x1c8>
8000517c:	e0 68 65 90 	mov	r8,26000
80005180:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
    return false;

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
80005184:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80005188:	20 18       	sub	r8,1
8000518a:	ef 68 ff e3 	st.b	r7[-29],r8
8000518e:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80005192:	30 08       	mov	r8,0
80005194:	f0 09 18 00 	cp.b	r9,r8
80005198:	fe 91 ff 72 	brne	8000507c <sd_mmc_get_ext_csd+0x78>
          g_card_freq[slot] = 26*1000;
      }
    }
  }

   return true;
8000519c:	30 18       	mov	r8,1
}
8000519e:	10 9c       	mov	r12,r8
800051a0:	2f 6d       	sub	sp,-40
800051a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800051a6:	00 00       	add	r0,r0
800051a8:	00 00       	add	r0,r0
800051aa:	09 bc       	ld.ub	r12,r4[0x3]
800051ac:	00 00       	add	r0,r0
800051ae:	00 14       	sub	r4,r0
800051b0:	80 00       	ld.sh	r0,r0[0x0]
800051b2:	7e 70       	ld.w	r0,pc[0x1c]
800051b4:	80 00       	ld.sh	r0,r0[0x0]
800051b6:	7c 58       	ld.w	r8,lr[0x14]
800051b8:	80 00       	ld.sh	r0,r0[0x0]
800051ba:	7c a2       	ld.w	r2,lr[0x28]
800051bc:	80 00       	ld.sh	r0,r0[0x0]
800051be:	7c d8       	ld.w	r8,lr[0x34]
800051c0:	00 00       	add	r0,r0
800051c2:	06 58       	eor	r8,r3
800051c4:	00 00       	add	r0,r0
800051c6:	0b c4       	ld.ub	r4,r5[0x4]
800051c8:	00 00       	add	r0,r0
800051ca:	07 b4       	ld.ub	r4,r3[0x3]
800051cc:	00 00       	add	r0,r0
800051ce:	09 be       	ld.ub	lr,r4[0x3]

800051d0 <sd_mmc_set_block_len>:

static bool  sd_mmc_set_block_len(uint8_t slot, uint16_t length )
{
800051d0:	eb cd 40 80 	pushm	r7,lr
800051d4:	1a 97       	mov	r7,sp
800051d6:	20 2d       	sub	sp,8
800051d8:	18 99       	mov	r9,r12
800051da:	16 98       	mov	r8,r11
800051dc:	ef 69 ff fc 	st.b	r7[-4],r9
800051e0:	ef 58 ff f8 	st.h	r7[-8],r8
  if (slot > MCI_LAST_SLOTS)
800051e4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800051e8:	30 18       	mov	r8,1
800051ea:	f0 09 18 00 	cp.b	r9,r8
800051ee:	e0 88 00 04 	brls	800051f6 <sd_mmc_set_block_len+0x26>
    return false;
800051f2:	30 08       	mov	r8,0
800051f4:	c3 c8       	rjmp	8000526c <sd_mmc_set_block_len+0x9c>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
800051f6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800051fa:	49 f9       	lddpc	r9,80005274 <sd_mmc_set_block_len+0xa4>
800051fc:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005200:	10 9a       	mov	r10,r8
80005202:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80005206:	49 d8       	lddpc	r8,80005278 <sd_mmc_set_block_len+0xa8>
80005208:	70 08       	ld.w	r8,r8[0x0]
8000520a:	12 9b       	mov	r11,r9
8000520c:	10 9c       	mov	r12,r8
8000520e:	f0 1f 00 1c 	mcall	8000527c <sd_mmc_set_block_len+0xac>

  if(mci_send_cmd(mci, SD_MMC_SET_BLOCKLEN_CMD, length)!=MCI_SUCCESS)
80005212:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80005216:	49 98       	lddpc	r8,80005278 <sd_mmc_set_block_len+0xa8>
80005218:	70 08       	ld.w	r8,r8[0x0]
8000521a:	12 9a       	mov	r10,r9
8000521c:	e0 6b 10 50 	mov	r11,4176
80005220:	10 9c       	mov	r12,r8
80005222:	f0 1f 00 18 	mcall	80005280 <sd_mmc_set_block_len+0xb0>
80005226:	18 98       	mov	r8,r12
80005228:	58 08       	cp.w	r8,0
8000522a:	c0 30       	breq	80005230 <sd_mmc_set_block_len+0x60>
    return false;
8000522c:	30 08       	mov	r8,0
8000522e:	c1 f8       	rjmp	8000526c <sd_mmc_set_block_len+0x9c>

  // check response, card must be in TRAN state
  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
80005230:	49 28       	lddpc	r8,80005278 <sd_mmc_set_block_len+0xa8>
80005232:	70 08       	ld.w	r8,r8[0x0]
80005234:	10 9c       	mov	r12,r8
80005236:	f0 1f 00 14 	mcall	80005284 <sd_mmc_set_block_len+0xb4>
8000523a:	18 98       	mov	r8,r12
8000523c:	e4 18 e0 02 	andh	r8,0xe002
80005240:	e0 18 0e 00 	andl	r8,0xe00
80005244:	e0 48 08 00 	cp.w	r8,2048
80005248:	c0 30       	breq	8000524e <sd_mmc_set_block_len+0x7e>
    return false;
8000524a:	30 08       	mov	r8,0
8000524c:	c1 08       	rjmp	8000526c <sd_mmc_set_block_len+0x9c>

  mci_set_block_size(mci, length);
8000524e:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80005252:	48 a8       	lddpc	r8,80005278 <sd_mmc_set_block_len+0xa8>
80005254:	70 08       	ld.w	r8,r8[0x0]
80005256:	12 9b       	mov	r11,r9
80005258:	10 9c       	mov	r12,r8
8000525a:	f0 1f 00 0c 	mcall	80005288 <sd_mmc_set_block_len+0xb8>
  mci_set_block_count(mci, 1);
8000525e:	48 78       	lddpc	r8,80005278 <sd_mmc_set_block_len+0xa8>
80005260:	70 08       	ld.w	r8,r8[0x0]
80005262:	30 1b       	mov	r11,1
80005264:	10 9c       	mov	r12,r8
80005266:	f0 1f 00 0a 	mcall	8000528c <sd_mmc_set_block_len+0xbc>
  return true;
8000526a:	30 18       	mov	r8,1
}
8000526c:	10 9c       	mov	r12,r8
8000526e:	2f ed       	sub	sp,-8
80005270:	e3 cd 80 80 	ldm	sp++,r7,pc
80005274:	00 00       	add	r0,r0
80005276:	09 bc       	ld.ub	r12,r4[0x3]
80005278:	00 00       	add	r0,r0
8000527a:	00 14       	sub	r4,r0
8000527c:	80 00       	ld.sh	r0,r0[0x0]
8000527e:	7e 70       	ld.w	r0,pc[0x1c]
80005280:	80 00       	ld.sh	r0,r0[0x0]
80005282:	7c d8       	ld.w	r8,lr[0x34]
80005284:	80 00       	ld.sh	r0,r0[0x0]
80005286:	7e 10       	ld.w	r0,pc[0x4]
80005288:	80 00       	ld.sh	r0,r0[0x0]
8000528a:	7c 58       	ld.w	r8,lr[0x14]
8000528c:	80 00       	ld.sh	r0,r0[0x0]
8000528e:	7c a2       	ld.w	r2,lr[0x28]

80005290 <sd_mmc_mci_init>:

bool sd_mmc_mci_init(unsigned char card_slot, long pbb_hz, long cpu_hz)
{
80005290:	eb cd 40 80 	pushm	r7,lr
80005294:	1a 97       	mov	r7,sp
80005296:	20 5d       	sub	sp,20
80005298:	18 98       	mov	r8,r12
8000529a:	ef 4b ff f0 	st.w	r7[-16],r11
8000529e:	ef 4a ff ec 	st.w	r7[-20],r10
800052a2:	ef 68 ff f4 	st.b	r7[-12],r8
    unsigned long                 scfg;
    avr32_hmatrix_scfg_t          SCFG;
  } u_avr32_hmatrix_scfg;

  // For the USBB DMA HMATRIX master, use infinite length burst.
  u_avr32_hmatrix_mcfg.mcfg = AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
800052a6:	fe 68 10 00 	mov	r8,-126976
800052aa:	70 68       	ld.w	r8,r8[0x18]
800052ac:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_hmatrix_mcfg.MCFG.ulbt = AVR32_HMATRIX_ULBT_INFINITE;
800052b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052b4:	30 09       	mov	r9,0
800052b6:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800052ba:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] = u_avr32_hmatrix_mcfg.mcfg;
800052be:	fe 68 10 00 	mov	r8,-126976
800052c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800052c6:	91 69       	st.w	r8[0x18],r9

  // For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
  u_avr32_hmatrix_scfg.scfg = AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
800052c8:	fe 68 10 00 	mov	r8,-126976
800052cc:	71 58       	ld.w	r8,r8[0x54]
800052ce:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.fixed_defmstr = AVR32_HMATRIX_MASTER_USBB_DMA;
800052d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052d6:	30 69       	mov	r9,6
800052d8:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
800052dc:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
800052e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052e4:	30 29       	mov	r9,2
800052e6:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
800052ea:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] = u_avr32_hmatrix_scfg.scfg;
800052ee:	fe 68 10 00 	mov	r8,-126976
800052f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800052f6:	f1 49 00 54 	st.w	r8[84],r9

  g_pbb_hz = pbb_hz;
800052fa:	ee f9 ff f0 	ld.w	r9,r7[-16]
800052fe:	49 08       	lddpc	r8,8000533c <sd_mmc_mci_init+0xac>
80005300:	91 09       	st.w	r8[0x0],r9
  g_cpu_hz = cpu_hz;
80005302:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005306:	48 f8       	lddpc	r8,80005340 <sd_mmc_mci_init+0xb0>
80005308:	91 09       	st.w	r8[0x0],r9

  // Init MCI controller
  if (mci_init(mci, card_slot, pbb_hz)!=MCI_SUCCESS)
8000530a:	ee fa ff f0 	ld.w	r10,r7[-16]
8000530e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80005312:	48 d8       	lddpc	r8,80005344 <sd_mmc_mci_init+0xb4>
80005314:	70 08       	ld.w	r8,r8[0x0]
80005316:	12 9b       	mov	r11,r9
80005318:	10 9c       	mov	r12,r8
8000531a:	f0 1f 00 0c 	mcall	80005348 <sd_mmc_mci_init+0xb8>
8000531e:	18 98       	mov	r8,r12
80005320:	58 08       	cp.w	r8,0
80005322:	c0 30       	breq	80005328 <sd_mmc_mci_init+0x98>
    return false;
80005324:	30 08       	mov	r8,0
80005326:	c0 78       	rjmp	80005334 <sd_mmc_mci_init+0xa4>

  // Default card initialization. This can be removed since the card init will
  // automatically be done when needed.
  sd_mmc_mci_card_init(card_slot);
80005328:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000532c:	10 9c       	mov	r12,r8
8000532e:	f0 1f 00 08 	mcall	8000534c <sd_mmc_mci_init+0xbc>
  return true;
80005332:	30 18       	mov	r8,1
}
80005334:	10 9c       	mov	r12,r8
80005336:	2f bd       	sub	sp,-20
80005338:	e3 cd 80 80 	ldm	sp++,r7,pc
8000533c:	00 00       	add	r0,r0
8000533e:	04 c4       	st.b	r2++,r4
80005340:	00 00       	add	r0,r0
80005342:	04 c8       	st.b	r2++,r8
80005344:	00 00       	add	r0,r0
80005346:	00 14       	sub	r4,r0
80005348:	80 00       	ld.sh	r0,r0[0x0]
8000534a:	7b a4       	ld.w	r4,sp[0x68]
8000534c:	80 00       	ld.sh	r0,r0[0x0]
8000534e:	53 50       	stdsp	sp[0xd4],r0

80005350 <sd_mmc_mci_card_init>:

bool sd_mmc_mci_card_init(unsigned char slot)
{
80005350:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
80005354:	1a 97       	mov	r7,sp
80005356:	21 7d       	sub	sp,92
80005358:	18 98       	mov	r8,r12
8000535a:	ef 68 ff a4 	st.b	r7[-92],r8
  uint32_t response;

  if (true == sd_mmc_mci_init_done[slot])
8000535e:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005362:	fe f9 08 7a 	ld.w	r9,pc[2170]
80005366:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000536a:	58 08       	cp.w	r8,0
8000536c:	c0 40       	breq	80005374 <sd_mmc_mci_card_init+0x24>
    return true;
8000536e:	30 18       	mov	r8,1
80005370:	e0 8f 04 31 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>

  // Default card is not known.
  g_card_type[slot] = UNKNOWN_CARD;
80005374:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005378:	fe fa 08 68 	ld.w	r10,pc[2152]
8000537c:	30 08       	mov	r8,0
8000537e:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default bus size is 1 bit.
  g_card_bus_width[slot] = MCI_BUS_SIZE_1_BIT;
80005382:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005386:	fe fa 08 5e 	ld.w	r10,pc[2142]
8000538a:	30 08       	mov	r8,0
8000538c:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default card speed and disable High Speed mode.
  mci_init(mci, slot, g_pbb_hz);
80005390:	fe f8 08 58 	ld.w	r8,pc[2136]
80005394:	70 0a       	ld.w	r10,r8[0x0]
80005396:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000539a:	fe f8 08 52 	ld.w	r8,pc[2130]
8000539e:	70 08       	ld.w	r8,r8[0x0]
800053a0:	12 9b       	mov	r11,r9
800053a2:	10 9c       	mov	r12,r8
800053a4:	f0 1f 02 13 	mcall	80005bf0 <sd_mmc_mci_card_init+0x8a0>

  // Wait for 1ms, then wait for 74 more clock cycles (see MMC norms)
  if (mci_send_cmd(mci, SD_MMC_INIT_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800053a8:	fe f8 08 44 	ld.w	r8,pc[2116]
800053ac:	70 08       	ld.w	r8,r8[0x0]
800053ae:	3f fa       	mov	r10,-1
800053b0:	e0 6b 01 00 	mov	r11,256
800053b4:	10 9c       	mov	r12,r8
800053b6:	f0 1f 02 10 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
800053ba:	18 98       	mov	r8,r12
800053bc:	58 08       	cp.w	r8,0
800053be:	c0 40       	breq	800053c6 <sd_mmc_mci_card_init+0x76>
    return false;
800053c0:	30 08       	mov	r8,0
800053c2:	e0 8f 04 08 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>

  //-- (CMD0)
  // Set card in idle state
  if (mci_send_cmd(mci, SD_MMC_GO_IDLE_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
800053c6:	fe f8 08 26 	ld.w	r8,pc[2086]
800053ca:	70 08       	ld.w	r8,r8[0x0]
800053cc:	3f fa       	mov	r10,-1
800053ce:	30 0b       	mov	r11,0
800053d0:	10 9c       	mov	r12,r8
800053d2:	f0 1f 02 09 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
800053d6:	18 98       	mov	r8,r12
800053d8:	58 08       	cp.w	r8,0
800053da:	c0 50       	breq	800053e4 <sd_mmc_mci_card_init+0x94>
    return false;
800053dc:	30 08       	mov	r8,0
800053de:	e0 8f 03 fa 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>
    response = mci_read_response(mci);
    if( !(response & OCR_MSK_BUSY) )
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
800053e2:	d7 03       	nop
    return false;

sd_mmc_init_step1:
  // (CMD1)
  // To send its Operating Conditions Register contents command only supported by MMC card
  if(mci_send_cmd(mci, SD_MMC_MMC_SEND_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_ALL|OCR_MSK_HC)==MCI_SUCCESS)
800053e4:	fe f8 08 08 	ld.w	r8,pc[2056]
800053e8:	70 08       	ld.w	r8,r8[0x0]
800053ea:	e0 6a 80 00 	mov	r10,32768
800053ee:	ea 1a c0 ff 	orh	r10,0xc0ff
800053f2:	e0 6b 08 41 	mov	r11,2113
800053f6:	10 9c       	mov	r12,r8
800053f8:	f0 1f 01 ff 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
800053fc:	18 98       	mov	r8,r12
800053fe:	58 08       	cp.w	r8,0
80005400:	c2 a1       	brne	80005454 <sd_mmc_mci_card_init+0x104>
  {
    // MMC cards always respond to MMC_SEND_OP_COND
    g_card_type[slot] = MMC_CARD;
80005402:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005406:	fe fa 07 da 	ld.w	r10,pc[2010]
8000540a:	30 18       	mov	r8,1
8000540c:	f4 09 0b 08 	st.b	r10[r9],r8
    response = mci_read_response(mci);
80005410:	fe f8 07 dc 	ld.w	r8,pc[2012]
80005414:	70 08       	ld.w	r8,r8[0x0]
80005416:	10 9c       	mov	r12,r8
80005418:	f0 1f 01 f8 	mcall	80005bf8 <sd_mmc_mci_card_init+0x8a8>
8000541c:	18 98       	mov	r8,r12
8000541e:	ef 48 ff c0 	st.w	r7[-64],r8
    if( !(response & OCR_MSK_BUSY) )
80005422:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005426:	58 08       	cp.w	r8,0
80005428:	cd d4       	brge	800053e2 <sd_mmc_mci_card_init+0x92>
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
8000542a:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000542e:	e6 18 40 00 	andh	r8,0x4000,COH
80005432:	e0 80 00 97 	breq	80005560 <sd_mmc_mci_card_init+0x210>
    {
      g_card_type[slot] |= MMC_CARD_HC;
80005436:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000543a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000543e:	fe fa 07 a2 	ld.w	r10,pc[1954]
80005442:	f4 08 07 08 	ld.ub	r8,r10[r8]
80005446:	a5 b8       	sbr	r8,0x5
80005448:	5c 58       	castu.b	r8
8000544a:	fe fa 07 96 	ld.w	r10,pc[1942]
8000544e:	f4 09 0b 08 	st.b	r10[r9],r8
80005452:	c8 88       	rjmp	80005562 <sd_mmc_mci_card_init+0x212>
    }
  }
  else
  {
    // SD cards do not respond to MMC_SEND_OP_COND
    g_card_type[slot] = SD_CARD;
80005454:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005458:	fe fa 07 88 	ld.w	r10,pc[1928]
8000545c:	30 28       	mov	r8,2
8000545e:	f4 09 0b 08 	st.b	r10[r9],r8

    //-- (CMD8)
    // enables to expand new functionality to some existing commands supported only by SD HC card
    if (mci_send_cmd(mci, SD_MMC_SD_SEND_IF_COND_CMD, 0x000001AA)==MCI_SUCCESS)
80005462:	fe f8 07 8a 	ld.w	r8,pc[1930]
80005466:	70 08       	ld.w	r8,r8[0x0]
80005468:	e0 6a 01 aa 	mov	r10,426
8000546c:	e0 6b 10 48 	mov	r11,4168
80005470:	10 9c       	mov	r12,r8
80005472:	f0 1f 01 e1 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
80005476:	18 98       	mov	r8,r12
80005478:	58 08       	cp.w	r8,0
8000547a:	c1 b1       	brne	800054b0 <sd_mmc_mci_card_init+0x160>
    {
      // It is a SD HC
      if( 0x000001AA == mci_read_response(mci))
8000547c:	fe f8 07 70 	ld.w	r8,pc[1904]
80005480:	70 08       	ld.w	r8,r8[0x0]
80005482:	10 9c       	mov	r12,r8
80005484:	f0 1f 01 dd 	mcall	80005bf8 <sd_mmc_mci_card_init+0x8a8>
80005488:	18 98       	mov	r8,r12
8000548a:	e0 48 01 aa 	cp.w	r8,426
8000548e:	c1 11       	brne	800054b0 <sd_mmc_mci_card_init+0x160>
      {
        g_card_type[slot] |= SD_CARD_V2;
80005490:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005494:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005498:	fe fa 07 48 	ld.w	r10,pc[1864]
8000549c:	f4 08 07 08 	ld.ub	r8,r10[r8]
800054a0:	a3 b8       	sbr	r8,0x3
800054a2:	5c 58       	castu.b	r8
800054a4:	fe fa 07 3c 	ld.w	r10,pc[1852]
800054a8:	f4 09 0b 08 	st.b	r10[r9],r8
800054ac:	c0 28       	rjmp	800054b0 <sd_mmc_mci_card_init+0x160>
    response = mci_read_response(mci);

    if( !(response & OCR_MSK_BUSY) )
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
800054ae:	d7 03       	nop

sd_mmc_init_step2:
    //-- (CMD55)
    // Indicates to the card that the next command is an application specific command rather than a standard command
    // CMD55 shall always precede ACMD41
    if (mci_send_cmd(mci, SD_MMC_APP_CMD, 0)!=MCI_SUCCESS)
800054b0:	fe f8 07 3c 	ld.w	r8,pc[1852]
800054b4:	70 08       	ld.w	r8,r8[0x0]
800054b6:	30 0a       	mov	r10,0
800054b8:	e0 6b 10 77 	mov	r11,4215
800054bc:	10 9c       	mov	r12,r8
800054be:	f0 1f 01 ce 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
800054c2:	18 98       	mov	r8,r12
800054c4:	58 08       	cp.w	r8,0
800054c6:	c0 40       	breq	800054ce <sd_mmc_mci_card_init+0x17e>
      return false;
800054c8:	30 08       	mov	r8,0
800054ca:	e0 8f 03 84 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>

    //-- (ACMD41)
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
800054ce:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800054d2:	fe f9 07 0e 	ld.w	r9,pc[1806]
800054d6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800054da:	e2 18 00 08 	andl	r8,0x8,COH
800054de:	c1 00       	breq	800054fe <sd_mmc_mci_card_init+0x1ae>
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
800054e0:	fe f8 07 0c 	ld.w	r8,pc[1804]
800054e4:	70 08       	ld.w	r8,r8[0x0]
800054e6:	fc 1a c0 10 	movh	r10,0xc010
800054ea:	36 9b       	mov	r11,105
800054ec:	10 9c       	mov	r12,r8
800054ee:	f0 1f 01 c2 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
800054f2:	18 98       	mov	r8,r12
800054f4:	58 08       	cp.w	r8,0
800054f6:	c1 30       	breq	8000551c <sd_mmc_mci_card_init+0x1cc>
        return false;
800054f8:	30 08       	mov	r8,0
800054fa:	e0 8f 03 6c 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>
    }
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
800054fe:	fe f8 06 ee 	ld.w	r8,pc[1774]
80005502:	70 08       	ld.w	r8,r8[0x0]
80005504:	fc 1a 80 10 	movh	r10,0x8010
80005508:	36 9b       	mov	r11,105
8000550a:	10 9c       	mov	r12,r8
8000550c:	f0 1f 01 ba 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
80005510:	18 98       	mov	r8,r12
80005512:	58 08       	cp.w	r8,0
80005514:	c0 50       	breq	8000551e <sd_mmc_mci_card_init+0x1ce>
        return false;
80005516:	30 08       	mov	r8,0
80005518:	e0 8f 03 5d 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
        return false;
8000551c:	d7 03       	nop
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
        return false;
    }
    response = mci_read_response(mci);
8000551e:	fe f8 06 ce 	ld.w	r8,pc[1742]
80005522:	70 08       	ld.w	r8,r8[0x0]
80005524:	10 9c       	mov	r12,r8
80005526:	f0 1f 01 b5 	mcall	80005bf8 <sd_mmc_mci_card_init+0x8a8>
8000552a:	18 98       	mov	r8,r12
8000552c:	ef 48 ff c0 	st.w	r7[-64],r8

    if( !(response & OCR_MSK_BUSY) )
80005530:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005534:	58 08       	cp.w	r8,0
80005536:	cb c4       	brge	800054ae <sd_mmc_mci_card_init+0x15e>
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
    }
    // Card read then check HC type
    if (response & OCR_MSK_HC)
80005538:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000553c:	e6 18 40 00 	andh	r8,0x4000,COH
80005540:	c1 10       	breq	80005562 <sd_mmc_mci_card_init+0x212>
    {
      g_card_type[slot] |= SD_CARD_HC;  // Card SD High Capacity
80005542:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005546:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000554a:	fe fa 06 96 	ld.w	r10,pc[1686]
8000554e:	f4 08 07 08 	ld.ub	r8,r10[r8]
80005552:	a5 a8       	sbr	r8,0x4
80005554:	5c 58       	castu.b	r8
80005556:	fe fa 06 8a 	ld.w	r10,pc[1674]
8000555a:	f4 09 0b 08 	st.b	r10[r9],r8
8000555e:	c0 28       	rjmp	80005562 <sd_mmc_mci_card_init+0x212>
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
    {
      g_card_type[slot] |= MMC_CARD_HC;
80005560:	d7 03       	nop

  // Here card ready and type (MMC <V4, MMC V4, MMC HC, SD V1, SD V2 HC) detected

  //-- (CMD2)
  // Send CID
  if (mci_send_cmd(mci, SD_MMC_ALL_SEND_CID_CMD, 0)!=MCI_SUCCESS)
80005562:	fe f8 06 8a 	ld.w	r8,pc[1674]
80005566:	70 08       	ld.w	r8,r8[0x0]
80005568:	30 0a       	mov	r10,0
8000556a:	e0 6b 00 82 	mov	r11,130
8000556e:	10 9c       	mov	r12,r8
80005570:	f0 1f 01 a1 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
80005574:	18 98       	mov	r8,r12
80005576:	58 08       	cp.w	r8,0
80005578:	c0 40       	breq	80005580 <sd_mmc_mci_card_init+0x230>
    return false;
8000557a:	30 08       	mov	r8,0
8000557c:	e0 8f 03 2b 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>

  //-- (CMD3)
  // Set relative address
  if(MMC_CARD & g_card_type[slot])
80005580:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005584:	fe f9 06 5c 	ld.w	r9,pc[1628]
80005588:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000558c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005590:	5c 58       	castu.b	r8
80005592:	c1 90       	breq	800055c4 <sd_mmc_mci_card_init+0x274>
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
80005594:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005598:	fe f8 06 64 	ld.w	r8,pc[1636]
8000559c:	e0 7a ff ff 	mov	r10,131071
800055a0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
800055a4:	fe f8 06 48 	ld.w	r8,pc[1608]
800055a8:	70 08       	ld.w	r8,r8[0x0]
800055aa:	e0 7a ff ff 	mov	r10,131071
800055ae:	e0 6b 10 43 	mov	r11,4163
800055b2:	10 9c       	mov	r12,r8
800055b4:	f0 1f 01 90 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
800055b8:	18 98       	mov	r8,r12
800055ba:	58 08       	cp.w	r8,0
800055bc:	c1 30       	breq	800055e2 <sd_mmc_mci_card_init+0x292>
      return false;
800055be:	30 08       	mov	r8,0
800055c0:	e0 8f 03 09 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>
  }
  else
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
800055c4:	fe f8 06 28 	ld.w	r8,pc[1576]
800055c8:	70 08       	ld.w	r8,r8[0x0]
800055ca:	30 0a       	mov	r10,0
800055cc:	e0 6b 10 43 	mov	r11,4163
800055d0:	10 9c       	mov	r12,r8
800055d2:	f0 1f 01 89 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
800055d6:	18 98       	mov	r8,r12
800055d8:	58 08       	cp.w	r8,0
800055da:	c0 50       	breq	800055e4 <sd_mmc_mci_card_init+0x294>
      return false;
800055dc:	30 08       	mov	r8,0
800055de:	e0 8f 02 fa 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>
  if(MMC_CARD & g_card_type[slot])
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
      return false;
800055e2:	d7 03       	nop
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
      return false;
  }
  if (SD_CARD & g_card_type[slot])
800055e4:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800055e8:	fe f9 05 f8 	ld.w	r9,pc[1528]
800055ec:	f2 08 07 08 	ld.ub	r8,r9[r8]
800055f0:	e2 18 00 02 	andl	r8,0x2,COH
800055f4:	c1 10       	breq	80005616 <sd_mmc_mci_card_init+0x2c6>
  {
    // For SD  card, you receive address of card
    g_card_rca[slot] = mci_read_response(mci) & RCA_MSK_ADR ;
800055f6:	ef 36 ff a4 	ld.ub	r6,r7[-92]
800055fa:	fe f8 05 f2 	ld.w	r8,pc[1522]
800055fe:	70 08       	ld.w	r8,r8[0x0]
80005600:	10 9c       	mov	r12,r8
80005602:	f0 1f 01 7e 	mcall	80005bf8 <sd_mmc_mci_card_init+0x8a8>
80005606:	18 98       	mov	r8,r12
80005608:	10 99       	mov	r9,r8
8000560a:	e0 19 00 00 	andl	r9,0x0
8000560e:	fe f8 05 ee 	ld.w	r8,pc[1518]
80005612:	f0 06 09 29 	st.w	r8[r6<<0x2],r9
  }


  //-- (CMD9)
  // Read & analyze CSD register
  if (sd_mmc_mci_get_csd(slot)!=true)
80005616:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000561a:	10 9c       	mov	r12,r8
8000561c:	f0 1f 01 79 	mcall	80005c00 <sd_mmc_mci_card_init+0x8b0>
80005620:	18 98       	mov	r8,r12
80005622:	ec 18 00 01 	eorl	r8,0x1
80005626:	5c 58       	castu.b	r8
80005628:	c0 40       	breq	80005630 <sd_mmc_mci_card_init+0x2e0>
    return false;
8000562a:	30 08       	mov	r8,0
8000562c:	e0 8f 02 d3 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>


  //-- (CMD7)-R1b
  // select card
  if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80005630:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005634:	fe f8 05 c8 	ld.w	r8,pc[1480]
80005638:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000563c:	fe f8 05 b0 	ld.w	r8,pc[1456]
80005640:	70 08       	ld.w	r8,r8[0x0]
80005642:	12 9a       	mov	r10,r9
80005644:	e0 6b 10 c7 	mov	r11,4295
80005648:	10 9c       	mov	r12,r8
8000564a:	f0 1f 01 6b 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
8000564e:	18 98       	mov	r8,r12
80005650:	58 08       	cp.w	r8,0
80005652:	c0 40       	breq	8000565a <sd_mmc_mci_card_init+0x30a>
    return false;
80005654:	30 08       	mov	r8,0
80005656:	e0 8f 02 be 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>

  // Wait end of busy
  mci_wait_busy_signal(mci);// read busy state on DAT0
8000565a:	fe f8 05 92 	ld.w	r8,pc[1426]
8000565e:	70 08       	ld.w	r8,r8[0x0]
80005660:	10 9c       	mov	r12,r8
80005662:	f0 1f 01 69 	mcall	80005c04 <sd_mmc_mci_card_init+0x8b4>

  // Get clock by checking the extended CSD register
  if (MMC_CARD_V4 & g_card_type[slot])
80005666:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000566a:	fe f9 05 76 	ld.w	r9,pc[1398]
8000566e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005672:	e2 18 00 04 	andl	r8,0x4,COH
80005676:	c0 e0       	breq	80005692 <sd_mmc_mci_card_init+0x342>
  {
    // Get clock (MMC V4) and size (MMC V4 HC) by checking the extended CSD register
      //-- (CMD8)
    if (sd_mmc_get_ext_csd(slot)!=true)
80005678:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000567c:	10 9c       	mov	r12,r8
8000567e:	f0 1f 01 63 	mcall	80005c08 <sd_mmc_mci_card_init+0x8b8>
80005682:	18 98       	mov	r8,r12
80005684:	ec 18 00 01 	eorl	r8,0x1
80005688:	5c 58       	castu.b	r8
8000568a:	c0 40       	breq	80005692 <sd_mmc_mci_card_init+0x342>
         return false;
8000568c:	30 08       	mov	r8,0
8000568e:	e0 8f 02 a2 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>
  }


#if (SD_4_BIT == ENABLE)
  // set bus size
  if (SD_CARD & g_card_type[slot])
80005692:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005696:	fe f9 05 4a 	ld.w	r9,pc[1354]
8000569a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000569e:	e2 18 00 02 	andl	r8,0x2,COH
800056a2:	c4 00       	breq	80005722 <sd_mmc_mci_card_init+0x3d2>
  {
    // set 4-bit bus for SD Card
    //-- (CMD55)
    if(mci_send_cmd(mci, SD_MMC_APP_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800056a4:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800056a8:	fe f8 05 54 	ld.w	r8,pc[1364]
800056ac:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800056b0:	fe f8 05 3c 	ld.w	r8,pc[1340]
800056b4:	70 08       	ld.w	r8,r8[0x0]
800056b6:	12 9a       	mov	r10,r9
800056b8:	e0 6b 10 77 	mov	r11,4215
800056bc:	10 9c       	mov	r12,r8
800056be:	f0 1f 01 4e 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
800056c2:	18 98       	mov	r8,r12
800056c4:	58 08       	cp.w	r8,0
800056c6:	c0 40       	breq	800056ce <sd_mmc_mci_card_init+0x37e>
      return false;
800056c8:	30 08       	mov	r8,0
800056ca:	e0 8f 02 84 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>

    //-- (CMD6)
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
800056ce:	fe f8 05 1e 	ld.w	r8,pc[1310]
800056d2:	70 08       	ld.w	r8,r8[0x0]
800056d4:	30 2a       	mov	r10,2
800056d6:	e0 6b 10 46 	mov	r11,4166
800056da:	10 9c       	mov	r12,r8
800056dc:	f0 1f 01 46 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
800056e0:	18 98       	mov	r8,r12
800056e2:	58 08       	cp.w	r8,0
800056e4:	c0 40       	breq	800056ec <sd_mmc_mci_card_init+0x39c>
      return false;
800056e6:	30 08       	mov	r8,0
800056e8:	e0 8f 02 75 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
800056ec:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800056f0:	fe fa 04 f4 	ld.w	r10,pc[1268]
800056f4:	30 28       	mov	r8,2
800056f6:	f4 09 0b 08 	st.b	r10[r9],r8
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
800056fa:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800056fe:	fe f9 04 e6 	ld.w	r9,pc[1254]
80005702:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005706:	10 99       	mov	r9,r8
80005708:	fe f8 04 e4 	ld.w	r8,pc[1252]
8000570c:	70 08       	ld.w	r8,r8[0x0]
8000570e:	12 9b       	mov	r11,r9
80005710:	10 9c       	mov	r12,r8
80005712:	f0 1f 01 3f 	mcall	80005c0c <sd_mmc_mci_card_init+0x8bc>
80005716:	18 98       	mov	r8,r12
80005718:	58 08       	cp.w	r8,0
8000571a:	c4 00       	breq	8000579a <sd_mmc_mci_card_init+0x44a>
      return false;
8000571c:	30 08       	mov	r8,0
8000571e:	e0 8f 02 5a 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>
  }
  else // MMC bus width management
  {
    // set 8-bit bus for MMC Card
    if (MMC_CARD_V4 & g_card_type[slot])
80005722:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005726:	fe f9 04 ba 	ld.w	r9,pc[1210]
8000572a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000572e:	e2 18 00 04 	andl	r8,0x4,COH
80005732:	c3 50       	breq	8000579c <sd_mmc_mci_card_init+0x44c>
    {
      //-- (CMD6)-R1b
      // set 8-bit bus width (appeared from V4.0 specification)
      if (mci_send_cmd( mci,
80005734:	fe f8 04 b8 	ld.w	r8,pc[1208]
80005738:	70 08       	ld.w	r8,r8[0x0]
8000573a:	e0 6a 02 03 	mov	r10,515
8000573e:	ea 1a 03 b7 	orh	r10,0x3b7
80005742:	e0 6b 10 c6 	mov	r11,4294
80005746:	10 9c       	mov	r12,r8
80005748:	f0 1f 01 2b 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
8000574c:	18 98       	mov	r8,r12
8000574e:	58 08       	cp.w	r8,0
80005750:	c0 40       	breq	80005758 <sd_mmc_mci_card_init+0x408>
                        ( (uint32_t)MMC_SWITCH_WRITE     <<24)|
                          ((uint32_t)MMC_SWITCH_BUS_WIDTH<<16)|
                          ((uint32_t)MMC_SWITCH_VAL_8BIT << 8)|
                          ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
80005752:	30 08       	mov	r8,0
80005754:	e0 8f 02 3f 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80005758:	fe f8 04 94 	ld.w	r8,pc[1172]
8000575c:	70 08       	ld.w	r8,r8[0x0]
8000575e:	10 9c       	mov	r12,r8
80005760:	f0 1f 01 29 	mcall	80005c04 <sd_mmc_mci_card_init+0x8b4>
      g_card_bus_width[slot] = MCI_BUS_SIZE_8_BIT;
80005764:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005768:	fe fa 04 7c 	ld.w	r10,pc[1148]
8000576c:	30 38       	mov	r8,3
8000576e:	f4 09 0b 08 	st.b	r10[r9],r8
      if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
80005772:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005776:	fe f9 04 6e 	ld.w	r9,pc[1134]
8000577a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000577e:	10 99       	mov	r9,r8
80005780:	fe f8 04 6c 	ld.w	r8,pc[1132]
80005784:	70 08       	ld.w	r8,r8[0x0]
80005786:	12 9b       	mov	r11,r9
80005788:	10 9c       	mov	r12,r8
8000578a:	f0 1f 01 21 	mcall	80005c0c <sd_mmc_mci_card_init+0x8bc>
8000578e:	18 98       	mov	r8,r12
80005790:	58 08       	cp.w	r8,0
80005792:	c0 50       	breq	8000579c <sd_mmc_mci_card_init+0x44c>
       return false;
80005794:	30 08       	mov	r8,0
80005796:	e0 8f 02 1e 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
      return false;

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
      return false;
8000579a:	d7 03       	nop
       return false;
    }
  }
#endif

   if (MMC_CARD_V4 & g_card_type[slot])
8000579c:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800057a0:	fe f9 04 40 	ld.w	r9,pc[1088]
800057a4:	f2 08 07 08 	ld.ub	r8,r9[r8]
800057a8:	e2 18 00 04 	andl	r8,0x4,COH
800057ac:	c1 90       	breq	800057de <sd_mmc_mci_card_init+0x48e>
   {
      //-- (CMD6)-R1b
      // set high speed interface timing
      if (mci_send_cmd( mci,
800057ae:	fe f8 04 3e 	ld.w	r8,pc[1086]
800057b2:	70 08       	ld.w	r8,r8[0x0]
800057b4:	e0 6a 01 03 	mov	r10,259
800057b8:	ea 1a 03 b9 	orh	r10,0x3b9
800057bc:	e0 6b 10 c6 	mov	r11,4294
800057c0:	10 9c       	mov	r12,r8
800057c2:	f0 1f 01 0d 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
800057c6:	18 98       	mov	r8,r12
800057c8:	58 08       	cp.w	r8,0
800057ca:	c0 40       	breq	800057d2 <sd_mmc_mci_card_init+0x482>
                        ((uint32_t)MMC_SWITCH_WRITE     <<24)|
                        ((uint32_t)MMC_SWITCH_HIGH_SPEED<<16)|
                        ((uint32_t)MMC_SWITCH_VAL_HS    << 8)|
                        ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
800057cc:	30 08       	mov	r8,0
800057ce:	e0 8f 02 02 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);
800057d2:	fe f8 04 1a 	ld.w	r8,pc[1050]
800057d6:	70 08       	ld.w	r8,r8[0x0]
800057d8:	10 9c       	mov	r12,r8
800057da:	f0 1f 01 0b 	mcall	80005c04 <sd_mmc_mci_card_init+0x8b4>
   }


   if( SD_CARD_V2 & g_card_type[slot] )
800057de:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800057e2:	fe f9 03 fe 	ld.w	r9,pc[1022]
800057e6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800057ea:	e2 18 00 08 	andl	r8,0x8,COH
800057ee:	e0 80 01 ae 	breq	80005b4a <sd_mmc_mci_card_init+0x7fa>
#define SDMMC_SWITCH_FUNC_G3_KEEP     (0xf << 8)  /**< Group 3 No influence */
#define SDMMC_SWITCH_FUNC_G4_KEEP     (0xf << 12) /**< Group 4 No influence */
#define SDMMC_SWITCH_FUNC_G5_KEEP     (0xf << 16) /**< Group 5 No influence */
#define SDMMC_SWITCH_FUNC_G6_KEEP     (0xf << 20) /**< Group 6 No influence */

      mci_set_block_size(mci, 512/8); // CMD6 512 bits status
800057f2:	fe f8 03 fa 	ld.w	r8,pc[1018]
800057f6:	70 08       	ld.w	r8,r8[0x0]
800057f8:	34 0b       	mov	r11,64
800057fa:	10 9c       	mov	r12,r8
800057fc:	f0 1f 01 05 	mcall	80005c10 <sd_mmc_mci_card_init+0x8c0>
      mci_set_block_count(mci, 1);
80005800:	fe f8 03 ec 	ld.w	r8,pc[1004]
80005804:	70 08       	ld.w	r8,r8[0x0]
80005806:	30 1b       	mov	r11,1
80005808:	10 9c       	mov	r12,r8
8000580a:	f0 1f 01 03 	mcall	80005c14 <sd_mmc_mci_card_init+0x8c4>

      //-- (CMD6)
      // Check if we can enter into the High Speed mode.
      if (mci_send_cmd( mci
8000580e:	fe f8 03 de 	ld.w	r8,pc[990]
80005812:	70 08       	ld.w	r8,r8[0x0]
80005814:	30 1a       	mov	r10,1
80005816:	e4 7b 10 46 	mov	r11,331846
8000581a:	10 9c       	mov	r12,r8
8000581c:	f0 1f 00 f6 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
80005820:	18 98       	mov	r8,r12
80005822:	58 08       	cp.w	r8,0
80005824:	c0 40       	breq	8000582c <sd_mmc_mci_card_init+0x4dc>
                      , SD_SWITCH_FUNC
                      , SDMMC_SWITCH_FUNC_MODE_CHECK | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80005826:	30 08       	mov	r8,0
80005828:	e0 8f 01 d5 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
8000582c:	fe f8 03 c0 	ld.w	r8,pc[960]
80005830:	70 08       	ld.w	r8,r8[0x0]
80005832:	10 9c       	mov	r12,r8
80005834:	f0 1f 00 f4 	mcall	80005c04 <sd_mmc_mci_card_init+0x8b4>

      bool b_hs_supported=false;
80005838:	30 08       	mov	r8,0
8000583a:	ef 68 ff c5 	st.b	r7[-59],r8
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
8000583e:	30 08       	mov	r8,0
80005840:	ef 68 ff c6 	st.b	r7[-58],r8
80005844:	c4 18       	rjmp	800058c6 <sd_mmc_mci_card_init+0x576>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80005846:	fe f8 03 a6 	ld.w	r8,pc[934]
8000584a:	70 08       	ld.w	r8,r8[0x0]
8000584c:	ef 48 ff c8 	st.w	r7[-56],r8
80005850:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005854:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80005858:	fe f8 03 c0 	ld.w	r8,pc[960]
8000585c:	70 08       	ld.w	r8,r8[0x0]
8000585e:	10 99       	mov	r9,r8
80005860:	e6 19 01 e0 	andh	r9,0x1e0,COH
80005864:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005868:	71 08       	ld.w	r8,r8[0x40]
8000586a:	f3 e8 10 08 	or	r8,r9,r8
8000586e:	10 99       	mov	r9,r8
80005870:	fe f8 03 a8 	ld.w	r8,pc[936]
80005874:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80005876:	fe f8 03 a2 	ld.w	r8,pc[930]
8000587a:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
8000587c:	e2 18 00 02 	andl	r8,0x2,COH
80005880:	5f 18       	srne	r8
80005882:	58 08       	cp.w	r8,0
80005884:	ce 10       	breq	80005846 <sd_mmc_mci_card_init+0x4f6>
          data = mci_rd_data(mci);
80005886:	fe f8 03 66 	ld.w	r8,pc[870]
8000588a:	70 08       	ld.w	r8,r8[0x0]
8000588c:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80005890:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005894:	70 c8       	ld.w	r8,r8[0x30]
80005896:	ef 48 ff ac 	st.w	r7[-84],r8
          if(i==16)
8000589a:	ef 39 ff c6 	ld.ub	r9,r7[-58]
8000589e:	31 08       	mov	r8,16
800058a0:	f0 09 18 00 	cp.b	r9,r8
800058a4:	c0 c1       	brne	800058bc <sd_mmc_mci_card_init+0x56c>
          {
            if(((data>>24)&0xf)==1)
800058a6:	ee f8 ff ac 	ld.w	r8,r7[-84]
800058aa:	b9 88       	lsr	r8,0x18
800058ac:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800058b0:	58 18       	cp.w	r8,1
800058b2:	c1 21       	brne	800058d6 <sd_mmc_mci_card_init+0x586>
              b_hs_supported = true;
800058b4:	30 18       	mov	r8,1
800058b6:	ef 68 ff c5 	st.b	r7[-59],r8
            break;
800058ba:	c0 f8       	rjmp	800058d8 <sd_mmc_mci_card_init+0x588>
      mci_wait_busy_signal(mci);// read busy state on DAT0

      bool b_hs_supported=false;
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
800058bc:	ef 38 ff c6 	ld.ub	r8,r7[-58]
800058c0:	2f c8       	sub	r8,-4
800058c2:	ef 68 ff c6 	st.b	r7[-58],r8
800058c6:	ef 39 ff c6 	ld.ub	r9,r7[-58]
800058ca:	33 f8       	mov	r8,63
800058cc:	f0 09 18 00 	cp.b	r9,r8
800058d0:	fe 98 ff bb 	brls	80005846 <sd_mmc_mci_card_init+0x4f6>
800058d4:	c0 28       	rjmp	800058d8 <sd_mmc_mci_card_init+0x588>
          data = mci_rd_data(mci);
          if(i==16)
          {
            if(((data>>24)&0xf)==1)
              b_hs_supported = true;
            break;
800058d6:	d7 03       	nop
          }
        }
      }

      if (b_hs_supported==false )
800058d8:	ef 38 ff c5 	ld.ub	r8,r7[-59]
800058dc:	ec 18 00 01 	eorl	r8,0x1
800058e0:	5c 58       	castu.b	r8
800058e2:	e0 81 01 33 	brne	80005b48 <sd_mmc_mci_card_init+0x7f8>
        goto sd_mmc_init_step3;

      if (mci_send_cmd( mci
800058e6:	fe f8 03 06 	ld.w	r8,pc[774]
800058ea:	70 08       	ld.w	r8,r8[0x0]
800058ec:	e0 6a ff f1 	mov	r10,65521
800058f0:	ea 1a 80 ff 	orh	r10,0x80ff
800058f4:	e4 7b 10 46 	mov	r11,331846
800058f8:	10 9c       	mov	r12,r8
800058fa:	f0 1f 00 bf 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
800058fe:	18 98       	mov	r8,r12
80005900:	58 08       	cp.w	r8,0
80005902:	c0 40       	breq	8000590a <sd_mmc_mci_card_init+0x5ba>
                      | SDMMC_SWITCH_FUNC_G3_KEEP
                      | SDMMC_SWITCH_FUNC_G2_KEEP
                      | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80005904:	30 08       	mov	r8,0
80005906:	e0 8f 01 66 	bral	80005bd2 <sd_mmc_mci_card_init+0x882>
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
8000590a:	30 08       	mov	r8,0
8000590c:	ef 68 ff c7 	st.b	r7[-57],r8
80005910:	c3 08       	rjmp	80005970 <sd_mmc_mci_card_init+0x620>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80005912:	fe f8 02 da 	ld.w	r8,pc[730]
80005916:	70 08       	ld.w	r8,r8[0x0]
80005918:	ef 48 ff d4 	st.w	r7[-44],r8
8000591c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005920:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80005924:	fe f8 02 f4 	ld.w	r8,pc[756]
80005928:	70 08       	ld.w	r8,r8[0x0]
8000592a:	10 99       	mov	r9,r8
8000592c:	e6 19 01 e0 	andh	r9,0x1e0,COH
80005930:	ee f8 ff d8 	ld.w	r8,r7[-40]
80005934:	71 08       	ld.w	r8,r8[0x40]
80005936:	f3 e8 10 08 	or	r8,r9,r8
8000593a:	10 99       	mov	r9,r8
8000593c:	fe f8 02 dc 	ld.w	r8,pc[732]
80005940:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80005942:	fe f8 02 d6 	ld.w	r8,pc[726]
80005946:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80005948:	e2 18 00 02 	andl	r8,0x2,COH
8000594c:	5f 18       	srne	r8
8000594e:	58 08       	cp.w	r8,0
80005950:	ce 10       	breq	80005912 <sd_mmc_mci_card_init+0x5c2>
          data = mci_rd_data(mci);
80005952:	fe f8 02 9a 	ld.w	r8,pc[666]
80005956:	70 08       	ld.w	r8,r8[0x0]
80005958:	ef 48 ff dc 	st.w	r7[-36],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
8000595c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005960:	70 c8       	ld.w	r8,r8[0x30]
80005962:	ef 48 ff a8 	st.w	r7[-88],r8
      {
        return false;
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80005966:	ef 38 ff c7 	ld.ub	r8,r7[-57]
8000596a:	2f c8       	sub	r8,-4
8000596c:	ef 68 ff c7 	st.b	r7[-57],r8
80005970:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80005974:	33 f8       	mov	r8,63
80005976:	f0 09 18 00 	cp.b	r9,r8
8000597a:	fe 98 ff cc 	brls	80005912 <sd_mmc_mci_card_init+0x5c2>

      /* A 8 cycle delay is required after switch command
       * @ 200KHz clock this should be 40 uS, but we use
       * 80 to handle imprecise clock setting.
       */
      cpu_delay_us(80, g_cpu_hz);
8000597e:	fe f8 02 9e 	ld.w	r8,pc[670]
80005982:	70 08       	ld.w	r8,r8[0x0]
80005984:	35 09       	mov	r9,80
80005986:	ef 49 ff e4 	st.w	r7[-28],r9
8000598a:	ef 48 ff e0 	st.w	r7[-32],r8
8000598e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005992:	ef 48 ff ec 	st.w	r7[-20],r8
80005996:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000599a:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000599e:	ee f0 ff ec 	ld.w	r0,r7[-20]
800059a2:	30 01       	mov	r1,0
800059a4:	ee f2 ff e8 	ld.w	r2,r7[-24]
800059a8:	30 03       	mov	r3,0
800059aa:	e2 02 02 4a 	mul	r10,r1,r2
800059ae:	e6 00 02 48 	mul	r8,r3,r0
800059b2:	10 0a       	add	r10,r8
800059b4:	e0 02 06 48 	mulu.d	r8,r0,r2
800059b8:	12 0a       	add	r10,r9
800059ba:	14 99       	mov	r9,r10
800059bc:	ee 7a 42 3f 	mov	r10,999999
800059c0:	30 0b       	mov	r11,0
800059c2:	f0 0a 00 0a 	add	r10,r8,r10
800059c6:	f2 0b 00 4b 	adc	r11,r9,r11
800059ca:	ee 78 42 40 	mov	r8,1000000
800059ce:	30 09       	mov	r9,0
800059d0:	f0 1f 00 94 	mcall	80005c20 <sd_mmc_mci_card_init+0x8d0>
800059d4:	14 98       	mov	r8,r10
800059d6:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800059d8:	ef 48 ff f4 	st.w	r7[-12],r8
800059dc:	ee c8 00 50 	sub	r8,r7,80
800059e0:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800059e4:	e1 b8 00 42 	mfsr	r8,0x108
800059e8:	10 99       	mov	r9,r8
800059ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800059ee:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800059f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800059f4:	70 09       	ld.w	r9,r8[0x0]
800059f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800059fa:	10 09       	add	r9,r8
800059fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005a00:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005a02:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005a06:	30 08       	mov	r8,0
80005a08:	f3 68 00 08 	st.b	r9[8],r8
80005a0c:	ee c8 00 50 	sub	r8,r7,80
80005a10:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005a14:	e1 b8 00 42 	mfsr	r8,0x108
80005a18:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005a1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a20:	f1 39 00 08 	ld.ub	r9,r8[8]
80005a24:	30 28       	mov	r8,2
80005a26:	f0 09 18 00 	cp.b	r9,r8
80005a2a:	c0 31       	brne	80005a30 <sd_mmc_mci_card_init+0x6e0>
    return false;
80005a2c:	30 08       	mov	r8,0
80005a2e:	c4 38       	rjmp	80005ab4 <sd_mmc_mci_card_init+0x764>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005a30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a34:	f1 39 00 08 	ld.ub	r9,r8[8]
80005a38:	30 18       	mov	r8,1
80005a3a:	f0 09 18 00 	cp.b	r9,r8
80005a3e:	c0 31       	brne	80005a44 <sd_mmc_mci_card_init+0x6f4>
    return true;
80005a40:	30 18       	mov	r8,1
80005a42:	c3 98       	rjmp	80005ab4 <sd_mmc_mci_card_init+0x764>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005a44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a48:	70 09       	ld.w	r9,r8[0x0]
80005a4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a4e:	70 18       	ld.w	r8,r8[0x4]
80005a50:	10 39       	cp.w	r9,r8
80005a52:	e0 88 00 1a 	brls	80005a86 <sd_mmc_mci_card_init+0x736>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005a56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a5a:	70 08       	ld.w	r8,r8[0x0]
80005a5c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a60:	10 39       	cp.w	r9,r8
80005a62:	c1 02       	brcc	80005a82 <sd_mmc_mci_card_init+0x732>
80005a64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a68:	70 18       	ld.w	r8,r8[0x4]
80005a6a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a6e:	10 39       	cp.w	r9,r8
80005a70:	e0 88 00 09 	brls	80005a82 <sd_mmc_mci_card_init+0x732>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005a74:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005a78:	30 18       	mov	r8,1
80005a7a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005a7e:	30 18       	mov	r8,1
80005a80:	c1 a8       	rjmp	80005ab4 <sd_mmc_mci_card_init+0x764>
    }
    return false;
80005a82:	30 08       	mov	r8,0
80005a84:	c1 88       	rjmp	80005ab4 <sd_mmc_mci_card_init+0x764>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005a86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a8a:	70 08       	ld.w	r8,r8[0x0]
80005a8c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a90:	10 39       	cp.w	r9,r8
80005a92:	c0 93       	brcs	80005aa4 <sd_mmc_mci_card_init+0x754>
80005a94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a98:	70 18       	ld.w	r8,r8[0x4]
80005a9a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a9e:	10 39       	cp.w	r9,r8
80005aa0:	e0 88 00 09 	brls	80005ab2 <sd_mmc_mci_card_init+0x762>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005aa4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005aa8:	30 18       	mov	r8,1
80005aaa:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005aae:	30 18       	mov	r8,1
80005ab0:	c0 28       	rjmp	80005ab4 <sd_mmc_mci_card_init+0x764>
    }
    return false;
80005ab2:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005ab4:	58 08       	cp.w	r8,0
80005ab6:	ca b0       	breq	80005a0c <sd_mmc_mci_card_init+0x6bc>
      union u_cfg{
        unsigned long     cfg;
        avr32_mci_cfg_t   CFG;
      };
      union u_cfg val;
      val.cfg = mci->cfg;
80005ab8:	4c d8       	lddpc	r8,80005bec <sd_mmc_mci_card_init+0x89c>
80005aba:	70 08       	ld.w	r8,r8[0x0]
80005abc:	71 58       	ld.w	r8,r8[0x54]
80005abe:	ef 48 ff bc 	st.w	r7[-68],r8
      val.CFG.hsmode = 1;
80005ac2:	ee f8 ff bc 	ld.w	r8,r7[-68]
80005ac6:	30 19       	mov	r9,1
80005ac8:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80005acc:	ef 48 ff bc 	st.w	r7[-68],r8
      mci->cfg = val.cfg;
80005ad0:	4c 78       	lddpc	r8,80005bec <sd_mmc_mci_card_init+0x89c>
80005ad2:	70 08       	ld.w	r8,r8[0x0]
80005ad4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80005ad8:	f1 49 00 54 	st.w	r8[84],r9

      // deselect card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, 0)!=MCI_SUCCESS)
80005adc:	4c 48       	lddpc	r8,80005bec <sd_mmc_mci_card_init+0x89c>
80005ade:	70 08       	ld.w	r8,r8[0x0]
80005ae0:	30 0a       	mov	r10,0
80005ae2:	e0 6b 10 c7 	mov	r11,4295
80005ae6:	10 9c       	mov	r12,r8
80005ae8:	f0 1f 00 43 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
80005aec:	18 98       	mov	r8,r12
80005aee:	58 08       	cp.w	r8,0
80005af0:	c0 30       	breq	80005af6 <sd_mmc_mci_card_init+0x7a6>
        return false;
80005af2:	30 08       	mov	r8,0
80005af4:	c6 f8       	rjmp	80005bd2 <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80005af6:	4b e8       	lddpc	r8,80005bec <sd_mmc_mci_card_init+0x89c>
80005af8:	70 08       	ld.w	r8,r8[0x0]
80005afa:	10 9c       	mov	r12,r8
80005afc:	f0 1f 00 42 	mcall	80005c04 <sd_mmc_mci_card_init+0x8b4>

      //-- (CMD9)
      // Read & analyze CSD register
      if (sd_mmc_mci_get_csd(slot)!=true)
80005b00:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005b04:	10 9c       	mov	r12,r8
80005b06:	f0 1f 00 3f 	mcall	80005c00 <sd_mmc_mci_card_init+0x8b0>
80005b0a:	18 98       	mov	r8,r12
80005b0c:	ec 18 00 01 	eorl	r8,0x1
80005b10:	5c 58       	castu.b	r8
80005b12:	c0 30       	breq	80005b18 <sd_mmc_mci_card_init+0x7c8>
        return false;
80005b14:	30 08       	mov	r8,0
80005b16:	c5 e8       	rjmp	80005bd2 <sd_mmc_mci_card_init+0x882>

      // select card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80005b18:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005b1c:	4b 88       	lddpc	r8,80005bfc <sd_mmc_mci_card_init+0x8ac>
80005b1e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005b22:	4b 38       	lddpc	r8,80005bec <sd_mmc_mci_card_init+0x89c>
80005b24:	70 08       	ld.w	r8,r8[0x0]
80005b26:	12 9a       	mov	r10,r9
80005b28:	e0 6b 10 c7 	mov	r11,4295
80005b2c:	10 9c       	mov	r12,r8
80005b2e:	f0 1f 00 32 	mcall	80005bf4 <sd_mmc_mci_card_init+0x8a4>
80005b32:	18 98       	mov	r8,r12
80005b34:	58 08       	cp.w	r8,0
80005b36:	c0 30       	breq	80005b3c <sd_mmc_mci_card_init+0x7ec>
        return false;
80005b38:	30 08       	mov	r8,0
80005b3a:	c4 c8       	rjmp	80005bd2 <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80005b3c:	4a c8       	lddpc	r8,80005bec <sd_mmc_mci_card_init+0x89c>
80005b3e:	70 08       	ld.w	r8,r8[0x0]
80005b40:	10 9c       	mov	r12,r8
80005b42:	f0 1f 00 31 	mcall	80005c04 <sd_mmc_mci_card_init+0x8b4>
80005b46:	c0 28       	rjmp	80005b4a <sd_mmc_mci_card_init+0x7fa>
          }
        }
      }

      if (b_hs_supported==false )
        goto sd_mmc_init_step3;
80005b48:	d7 03       	nop
      mci_wait_busy_signal(mci);// read busy state on DAT0
  }

sd_mmc_init_step3:
  // Set clock
  mci_set_speed(mci, g_pbb_hz, g_card_freq[slot]*1000);
80005b4a:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005b4e:	4b 68       	lddpc	r8,80005c24 <sd_mmc_mci_card_init+0x8d4>
80005b50:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80005b54:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80005b58:	e0 68 03 e8 	mov	r8,1000
80005b5c:	f2 08 02 48 	mul	r8,r9,r8
80005b60:	10 9a       	mov	r10,r8
80005b62:	4a 28       	lddpc	r8,80005be8 <sd_mmc_mci_card_init+0x898>
80005b64:	70 09       	ld.w	r9,r8[0x0]
80005b66:	4a 28       	lddpc	r8,80005bec <sd_mmc_mci_card_init+0x89c>
80005b68:	70 08       	ld.w	r8,r8[0x0]
80005b6a:	12 9b       	mov	r11,r9
80005b6c:	10 9c       	mov	r12,r8
80005b6e:	f0 1f 00 2f 	mcall	80005c28 <sd_mmc_mci_card_init+0x8d8>

  //-- (CMD13)
  // Check if card is ready, the card must be in TRAN state
  if(sd_mmc_mci_cmd_send_status(slot)!=true)
80005b72:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005b76:	10 9c       	mov	r12,r8
80005b78:	f0 1f 00 2d 	mcall	80005c2c <sd_mmc_mci_card_init+0x8dc>
80005b7c:	18 98       	mov	r8,r12
80005b7e:	ec 18 00 01 	eorl	r8,0x1
80005b82:	5c 58       	castu.b	r8
80005b84:	c0 30       	breq	80005b8a <sd_mmc_mci_card_init+0x83a>
    return false;
80005b86:	30 08       	mov	r8,0
80005b88:	c2 58       	rjmp	80005bd2 <sd_mmc_mci_card_init+0x882>

  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
80005b8a:	49 98       	lddpc	r8,80005bec <sd_mmc_mci_card_init+0x89c>
80005b8c:	70 08       	ld.w	r8,r8[0x0]
80005b8e:	10 9c       	mov	r12,r8
80005b90:	f0 1f 00 1a 	mcall	80005bf8 <sd_mmc_mci_card_init+0x8a8>
80005b94:	18 98       	mov	r8,r12
80005b96:	e4 18 e0 02 	andh	r8,0xe002
80005b9a:	e0 18 0e 00 	andl	r8,0xe00
80005b9e:	e0 48 08 00 	cp.w	r8,2048
80005ba2:	c0 30       	breq	80005ba8 <sd_mmc_mci_card_init+0x858>
    return false;
80005ba4:	30 08       	mov	r8,0
80005ba6:	c1 68       	rjmp	80005bd2 <sd_mmc_mci_card_init+0x882>

  //-- (CMD16)
  // Set the card block length to 512B
  if (sd_mmc_set_block_len (slot, SD_MMC_SECTOR_SIZE)!=true)
80005ba8:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80005bac:	e0 6b 02 00 	mov	r11,512
80005bb0:	10 9c       	mov	r12,r8
80005bb2:	f0 1f 00 20 	mcall	80005c30 <sd_mmc_mci_card_init+0x8e0>
80005bb6:	18 98       	mov	r8,r12
80005bb8:	ec 18 00 01 	eorl	r8,0x1
80005bbc:	5c 58       	castu.b	r8
80005bbe:	c0 30       	breq	80005bc4 <sd_mmc_mci_card_init+0x874>
    return false;
80005bc0:	30 08       	mov	r8,0
80005bc2:	c0 88       	rjmp	80005bd2 <sd_mmc_mci_card_init+0x882>

  // USB Test Unit Attention requires a state "busy" between "not present" and "ready" state
  // otherwise never report card change
  sd_mmc_mci_init_done[slot] = true;
80005bc4:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80005bc8:	48 5a       	lddpc	r10,80005bdc <sd_mmc_mci_card_init+0x88c>
80005bca:	30 18       	mov	r8,1
80005bcc:	f4 09 0b 08 	st.b	r10[r9],r8

  return true;
80005bd0:	30 18       	mov	r8,1
}
80005bd2:	10 9c       	mov	r12,r8
80005bd4:	2e 9d       	sub	sp,-92
80005bd6:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80005bda:	00 00       	add	r0,r0
80005bdc:	00 00       	add	r0,r0
80005bde:	04 c0       	st.b	r2++,r0
80005be0:	00 00       	add	r0,r0
80005be2:	0b c4       	ld.ub	r4,r5[0x4]
80005be4:	00 00       	add	r0,r0
80005be6:	09 bc       	ld.ub	r12,r4[0x3]
80005be8:	00 00       	add	r0,r0
80005bea:	04 c4       	st.b	r2++,r4
80005bec:	00 00       	add	r0,r0
80005bee:	00 14       	sub	r4,r0
80005bf0:	80 00       	ld.sh	r0,r0[0x0]
80005bf2:	7b a4       	ld.w	r4,sp[0x68]
80005bf4:	80 00       	ld.sh	r0,r0[0x0]
80005bf6:	7c d8       	ld.w	r8,lr[0x34]
80005bf8:	80 00       	ld.sh	r0,r0[0x0]
80005bfa:	7e 10       	ld.w	r0,pc[0x4]
80005bfc:	00 00       	add	r0,r0
80005bfe:	07 ac       	ld.ub	r12,r3[0x2]
80005c00:	80 00       	ld.sh	r0,r0[0x0]
80005c02:	4d 14       	lddpc	r4,80005d44 <sd_mmc_mci_mem_check+0x30>
80005c04:	80 00       	ld.sh	r0,r0[0x0]
80005c06:	7e 2c       	ld.w	r12,pc[0x8]
80005c08:	80 00       	ld.sh	r0,r0[0x0]
80005c0a:	50 04       	stdsp	sp[0x0],r4
80005c0c:	80 00       	ld.sh	r0,r0[0x0]
80005c0e:	7d b0       	ld.w	r0,lr[0x6c]
80005c10:	80 00       	ld.sh	r0,r0[0x0]
80005c12:	7c 58       	ld.w	r8,lr[0x14]
80005c14:	80 00       	ld.sh	r0,r0[0x0]
80005c16:	7c a2       	ld.w	r2,lr[0x28]
80005c18:	00 00       	add	r0,r0
80005c1a:	06 58       	eor	r8,r3
80005c1c:	00 00       	add	r0,r0
80005c1e:	04 c8       	st.b	r2++,r8
80005c20:	80 00       	ld.sh	r0,r0[0x0]
80005c22:	ce a0       	breq	80005bf6 <sd_mmc_mci_card_init+0x8a6>
80005c24:	00 00       	add	r0,r0
80005c26:	09 be       	ld.ub	lr,r4[0x3]
80005c28:	80 00       	ld.sh	r0,r0[0x0]
80005c2a:	7a c0       	ld.w	r0,sp[0x30]
80005c2c:	80 00       	ld.sh	r0,r0[0x0]
80005c2e:	68 78       	ld.w	r8,r4[0x1c]
80005c30:	80 00       	ld.sh	r0,r0[0x0]
80005c32:	51 d0       	stdsp	sp[0x74],r0

80005c34 <dma_mci_2_ram>:
    return true;
}
#endif

static void dma_mci_2_ram(void *ram, size_t size)
{
80005c34:	eb cd 40 80 	pushm	r7,lr
80005c38:	1a 97       	mov	r7,sp
80005c3a:	20 3d       	sub	sp,12
80005c3c:	ef 4c ff f8 	st.w	r7[-8],r12
80005c40:	ef 4b ff f4 	st.w	r7[-12],r11
  int *pRam = ram;
80005c44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005c48:	ef 48 ff fc 	st.w	r7[-4],r8

  // Src Address: the MCI registers.
  AVR32_DMACA.sar1 = (uint32_t)&AVR32_MCI.fifo;
80005c4c:	fc 18 ff 10 	movh	r8,0xff10
80005c50:	fe 69 42 00 	mov	r9,-114176
80005c54:	f1 49 00 58 	st.w	r8[88],r9

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;
80005c58:	fc 18 ff 10 	movh	r8,0xff10
80005c5c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c60:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80005c64:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
80005c68:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005c6c:	a3 89       	lsr	r9,0x2

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80005c6e:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80005c72:	fc 18 ff 10 	movh	r8,0xff10
80005c76:	e0 69 02 02 	mov	r9,514
80005c7a:	f1 49 03 a0 	st.w	r8[928],r9
}
80005c7e:	2f dd       	sub	sp,-12
80005c80:	e3 cd 80 80 	ldm	sp++,r7,pc

80005c84 <is_dma_mci_2_ram_complete>:

static bool is_dma_mci_2_ram_complete( void )
{
80005c84:	eb cd 40 80 	pushm	r7,lr
80005c88:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
80005c8a:	fc 18 ff 10 	movh	r8,0xff10
80005c8e:	f0 f8 03 a0 	ld.w	r8,r8[928]
80005c92:	e2 18 00 02 	andl	r8,0x2,COH
80005c96:	c0 30       	breq	80005c9c <is_dma_mci_2_ram_complete+0x18>
    return false;
80005c98:	30 08       	mov	r8,0
80005c9a:	c0 28       	rjmp	80005c9e <is_dma_mci_2_ram_complete+0x1a>

  return true;
80005c9c:	30 18       	mov	r8,1
}
80005c9e:	10 9c       	mov	r12,r8
80005ca0:	e3 cd 80 80 	ldm	sp++,r7,pc

80005ca4 <dma_ram_2_mci>:
    return true;
}
#endif

static void dma_ram_2_mci(const void *ram, size_t size)
{
80005ca4:	eb cd 40 80 	pushm	r7,lr
80005ca8:	1a 97       	mov	r7,sp
80005caa:	20 3d       	sub	sp,12
80005cac:	ef 4c ff f8 	st.w	r7[-8],r12
80005cb0:	ef 4b ff f4 	st.w	r7[-12],r11
  const unsigned int *pRam = ram;
80005cb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cb8:	ef 48 ff fc 	st.w	r7[-4],r8

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.sar1 = (unsigned long)pRam;
80005cbc:	fc 18 ff 10 	movh	r8,0xff10
80005cc0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005cc4:	f1 49 00 58 	st.w	r8[88],r9

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;
80005cc8:	fc 18 ff 10 	movh	r8,0xff10
80005ccc:	fe 69 42 00 	mov	r9,-114176
80005cd0:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80005cd4:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
80005cd8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005cdc:	a3 89       	lsr	r9,0x2

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80005cde:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80005ce2:	fc 18 ff 10 	movh	r8,0xff10
80005ce6:	e0 69 02 02 	mov	r9,514
80005cea:	f1 49 03 a0 	st.w	r8[928],r9
}
80005cee:	2f dd       	sub	sp,-12
80005cf0:	e3 cd 80 80 	ldm	sp++,r7,pc

80005cf4 <is_dma_ram_2_mci_complete>:

static bool is_dma_ram_2_mci_complete( void )
{
80005cf4:	eb cd 40 80 	pushm	r7,lr
80005cf8:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
80005cfa:	fc 18 ff 10 	movh	r8,0xff10
80005cfe:	f0 f8 03 a0 	ld.w	r8,r8[928]
80005d02:	e2 18 00 02 	andl	r8,0x2,COH
80005d06:	c0 30       	breq	80005d0c <is_dma_ram_2_mci_complete+0x18>
    return false;
80005d08:	30 08       	mov	r8,0
80005d0a:	c0 28       	rjmp	80005d0e <is_dma_ram_2_mci_complete+0x1a>

  return true;
80005d0c:	30 18       	mov	r8,1
}
80005d0e:	10 9c       	mov	r12,r8
80005d10:	e3 cd 80 80 	ldm	sp++,r7,pc

80005d14 <sd_mmc_mci_mem_check>:

  return true;
}

bool sd_mmc_mci_mem_check(uint8_t slot)
{
80005d14:	eb cd 40 80 	pushm	r7,lr
80005d18:	1a 97       	mov	r7,sp
80005d1a:	20 2d       	sub	sp,8
80005d1c:	18 98       	mov	r8,r12
80005d1e:	ef 68 ff f8 	st.b	r7[-8],r8
  uint8_t timeout_init = 0;
80005d22:	30 08       	mov	r8,0
80005d24:	ef 68 ff ff 	st.b	r7[-1],r8

  if (slot > MCI_LAST_SLOTS)
80005d28:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005d2c:	30 18       	mov	r8,1
80005d2e:	f0 09 18 00 	cp.b	r9,r8
80005d32:	e0 88 00 04 	brls	80005d3a <sd_mmc_mci_mem_check+0x26>
    return false;
80005d36:	30 08       	mov	r8,0
80005d38:	c4 d8       	rjmp	80005dd2 <sd_mmc_mci_mem_check+0xbe>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80005d3a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d3e:	4a 89       	lddpc	r9,80005ddc <sd_mmc_mci_mem_check+0xc8>
80005d40:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005d44:	10 9a       	mov	r10,r8
80005d46:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005d4a:	4a 68       	lddpc	r8,80005de0 <sd_mmc_mci_mem_check+0xcc>
80005d4c:	70 08       	ld.w	r8,r8[0x0]
80005d4e:	12 9b       	mov	r11,r9
80005d50:	10 9c       	mov	r12,r8
80005d52:	f0 1f 00 25 	mcall	80005de4 <sd_mmc_mci_mem_check+0xd0>

  // Check card presence
  if (is_sd_mmc_mci_card_present(slot) == false)
80005d56:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d5a:	10 9c       	mov	r12,r8
80005d5c:	f0 1f 00 23 	mcall	80005de8 <sd_mmc_mci_mem_check+0xd4>
80005d60:	18 98       	mov	r8,r12
80005d62:	ec 18 00 01 	eorl	r8,0x1
80005d66:	5c 58       	castu.b	r8
80005d68:	c0 90       	breq	80005d7a <sd_mmc_mci_mem_check+0x66>
  {
    sd_mmc_mci_init_done[slot] = false;
80005d6a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005d6e:	4a 0a       	lddpc	r10,80005dec <sd_mmc_mci_mem_check+0xd8>
80005d70:	30 08       	mov	r8,0
80005d72:	f4 09 0b 08 	st.b	r10[r9],r8
    return false;
80005d76:	30 08       	mov	r8,0
80005d78:	c2 d8       	rjmp	80005dd2 <sd_mmc_mci_mem_check+0xbe>
  }

  if (sd_mmc_mci_init_done[slot] == false)
80005d7a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d7e:	49 c9       	lddpc	r9,80005dec <sd_mmc_mci_mem_check+0xd8>
80005d80:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005d84:	ec 18 00 01 	eorl	r8,0x1
80005d88:	5c 58       	castu.b	r8
80005d8a:	c1 a0       	breq	80005dbe <sd_mmc_mci_mem_check+0xaa>
  {
    while (sd_mmc_mci_card_init(slot)!=true)
80005d8c:	c0 f8       	rjmp	80005daa <sd_mmc_mci_mem_check+0x96>
    {
      timeout_init++;
80005d8e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005d92:	2f f8       	sub	r8,-1
80005d94:	ef 68 ff ff 	st.b	r7[-1],r8
      if (timeout_init>10) return false;
80005d98:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005d9c:	30 a8       	mov	r8,10
80005d9e:	f0 09 18 00 	cp.b	r9,r8
80005da2:	e0 88 00 04 	brls	80005daa <sd_mmc_mci_mem_check+0x96>
80005da6:	30 08       	mov	r8,0
80005da8:	c1 58       	rjmp	80005dd2 <sd_mmc_mci_mem_check+0xbe>
    return false;
  }

  if (sd_mmc_mci_init_done[slot] == false)
  {
    while (sd_mmc_mci_card_init(slot)!=true)
80005daa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005dae:	10 9c       	mov	r12,r8
80005db0:	f0 1f 00 10 	mcall	80005df0 <sd_mmc_mci_mem_check+0xdc>
80005db4:	18 98       	mov	r8,r12
80005db6:	ec 18 00 01 	eorl	r8,0x1
80005dba:	5c 58       	castu.b	r8
80005dbc:	ce 91       	brne	80005d8e <sd_mmc_mci_mem_check+0x7a>
    {
      timeout_init++;
      if (timeout_init>10) return false;
    }
  }
  if (sd_mmc_mci_init_done[slot] == true)
80005dbe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005dc2:	48 b9       	lddpc	r9,80005dec <sd_mmc_mci_mem_check+0xd8>
80005dc4:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005dc8:	58 08       	cp.w	r8,0
80005dca:	c0 30       	breq	80005dd0 <sd_mmc_mci_mem_check+0xbc>
    return true;
80005dcc:	30 18       	mov	r8,1
80005dce:	c0 28       	rjmp	80005dd2 <sd_mmc_mci_mem_check+0xbe>
  else
    return false;
80005dd0:	30 08       	mov	r8,0
}
80005dd2:	10 9c       	mov	r12,r8
80005dd4:	2f ed       	sub	sp,-8
80005dd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80005dda:	00 00       	add	r0,r0
80005ddc:	00 00       	add	r0,r0
80005dde:	09 bc       	ld.ub	r12,r4[0x3]
80005de0:	00 00       	add	r0,r0
80005de2:	00 14       	sub	r4,r0
80005de4:	80 00       	ld.sh	r0,r0[0x0]
80005de6:	7e 70       	ld.w	r0,pc[0x1c]
80005de8:	80 00       	ld.sh	r0,r0[0x0]
80005dea:	4c 5c       	lddpc	r12,80005efc <sd_mmc_mci_dma_read_open+0x108>
80005dec:	00 00       	add	r0,r0
80005dee:	04 c0       	st.b	r2++,r0
80005df0:	80 00       	ld.sh	r0,r0[0x0]
80005df2:	53 50       	stdsp	sp[0xd4],r0

80005df4 <sd_mmc_mci_dma_read_open>:

  return true;
}

bool sd_mmc_mci_dma_read_open(uint8_t slot, uint32_t pos, void* ram, uint16_t nb_sector)
{
80005df4:	eb cd 40 80 	pushm	r7,lr
80005df8:	1a 97       	mov	r7,sp
80005dfa:	20 5d       	sub	sp,20
80005dfc:	ef 4b ff f4 	st.w	r7[-12],r11
80005e00:	ef 4a ff f0 	st.w	r7[-16],r10
80005e04:	12 98       	mov	r8,r9
80005e06:	18 99       	mov	r9,r12
80005e08:	ef 69 ff f8 	st.b	r7[-8],r9
80005e0c:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
80005e10:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005e14:	30 18       	mov	r8,1
80005e16:	f0 09 18 00 	cp.b	r9,r8
80005e1a:	e0 88 00 04 	brls	80005e22 <sd_mmc_mci_dma_read_open+0x2e>
    return false;
80005e1e:	30 08       	mov	r8,0
80005e20:	c9 a8       	rjmp	80005f54 <sd_mmc_mci_dma_read_open+0x160>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80005e22:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005e26:	4c e9       	lddpc	r9,80005f5c <sd_mmc_mci_dma_read_open+0x168>
80005e28:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005e2c:	10 9a       	mov	r10,r8
80005e2e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005e32:	4c c8       	lddpc	r8,80005f60 <sd_mmc_mci_dma_read_open+0x16c>
80005e34:	70 08       	ld.w	r8,r8[0x0]
80005e36:	12 9b       	mov	r11,r9
80005e38:	10 9c       	mov	r12,r8
80005e3a:	f0 1f 00 4b 	mcall	80005f64 <sd_mmc_mci_dma_read_open+0x170>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
80005e3e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005e42:	4c a8       	lddpc	r8,80005f68 <sd_mmc_mci_dma_read_open+0x174>
80005e44:	ee fa ff f4 	ld.w	r10,r7[-12]
80005e48:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
80005e4c:	4c 58       	lddpc	r8,80005f60 <sd_mmc_mci_dma_read_open+0x16c>
80005e4e:	70 08       	ld.w	r8,r8[0x0]
80005e50:	10 9c       	mov	r12,r8
80005e52:	f0 1f 00 47 	mcall	80005f6c <sd_mmc_mci_dma_read_open+0x178>

  addr =  gl_ptr_mem[slot];
80005e56:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005e5a:	4c 48       	lddpc	r8,80005f68 <sd_mmc_mci_dma_read_open+0x174>
80005e5c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80005e60:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
80005e64:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005e68:	4c 29       	lddpc	r9,80005f70 <sd_mmc_mci_dma_read_open+0x17c>
80005e6a:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005e6e:	e2 18 00 10 	andl	r8,0x10,COH
80005e72:	c0 e1       	brne	80005e8e <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
80005e74:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005e78:	4b e9       	lddpc	r9,80005f70 <sd_mmc_mci_dma_read_open+0x17c>
80005e7a:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005e7e:	e2 18 00 20 	andl	r8,0x20,COH
  // wait for MMC not busy
  mci_wait_busy_signal(mci);

  addr =  gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
80005e82:	c0 61       	brne	80005e8e <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
80005e84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e88:	a9 78       	lsl	r8,0x9
80005e8a:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  //** (CMD13)
  // Necessary to clear flag error "ADDRESS_OUT_OF_RANGE" (ID LABO = MMC15)
  if(mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80005e8e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005e92:	4b 98       	lddpc	r8,80005f74 <sd_mmc_mci_dma_read_open+0x180>
80005e94:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005e98:	4b 28       	lddpc	r8,80005f60 <sd_mmc_mci_dma_read_open+0x16c>
80005e9a:	70 08       	ld.w	r8,r8[0x0]
80005e9c:	12 9a       	mov	r10,r9
80005e9e:	e0 6b 10 4d 	mov	r11,4173
80005ea2:	10 9c       	mov	r12,r8
80005ea4:	f0 1f 00 35 	mcall	80005f78 <sd_mmc_mci_dma_read_open+0x184>
80005ea8:	18 98       	mov	r8,r12
80005eaa:	58 08       	cp.w	r8,0
80005eac:	c0 30       	breq	80005eb2 <sd_mmc_mci_dma_read_open+0xbe>
  {
    return false;
80005eae:	30 08       	mov	r8,0
80005eb0:	c5 28       	rjmp	80005f54 <sd_mmc_mci_dma_read_open+0x160>
  }

  // Request Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
80005eb2:	4a c8       	lddpc	r8,80005f60 <sd_mmc_mci_dma_read_open+0x16c>
80005eb4:	70 08       	ld.w	r8,r8[0x0]
80005eb6:	e0 6b 02 00 	mov	r11,512
80005eba:	10 9c       	mov	r12,r8
80005ebc:	f0 1f 00 30 	mcall	80005f7c <sd_mmc_mci_dma_read_open+0x188>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
80005ec0:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80005ec4:	4a 78       	lddpc	r8,80005f60 <sd_mmc_mci_dma_read_open+0x16c>
80005ec6:	70 08       	ld.w	r8,r8[0x0]
80005ec8:	12 9b       	mov	r11,r9
80005eca:	10 9c       	mov	r12,r8
80005ecc:	f0 1f 00 2d 	mcall	80005f80 <sd_mmc_mci_dma_read_open+0x18c>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
80005ed0:	fc 18 ff 10 	movh	r8,0xff10
80005ed4:	30 19       	mov	r9,1
80005ed6:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
80005eda:	fe 68 40 00 	mov	r8,-114688
80005ede:	30 09       	mov	r9,0
80005ee0:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
80005ee4:	fc 18 ff 10 	movh	r8,0xff10
80005ee8:	30 09       	mov	r9,0
80005eea:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
80005eee:	fc 18 ff 10 	movh	r8,0xff10
80005ef2:	e0 69 d8 24 	mov	r9,55332
80005ef6:	ea 19 00 a0 	orh	r9,0xa0
80005efa:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
80005efe:	fc 18 ff 10 	movh	r8,0xff10
80005f02:	30 09       	mov	r9,0
80005f04:	f1 49 00 98 	st.w	r8[152],r9
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: ignored because the dst is memory.
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: hw handshaking
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80005f08:	fc 18 ff 10 	movh	r8,0xff10
80005f0c:	e0 69 01 00 	mov	r9,256
80005f10:	f1 49 00 9c 	st.w	r8[156],r9
    (0                      << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf: ignored because the dst is memory.
    (AVR32_DMACA_CH_MMCI_RX << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf:
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
80005f14:	fe 68 40 00 	mov	r8,-114688
80005f18:	e0 69 01 30 	mov	r9,304
80005f1c:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD17)
  if(mci_send_cmd(mci, SD_MMC_READ_MULTIPLE_BLOCK_CMD, addr)!=MCI_SUCCESS)
80005f20:	49 08       	lddpc	r8,80005f60 <sd_mmc_mci_dma_read_open+0x16c>
80005f22:	70 08       	ld.w	r8,r8[0x0]
80005f24:	ee fa ff fc 	ld.w	r10,r7[-4]
80005f28:	ec 7b 10 52 	mov	r11,856146
80005f2c:	10 9c       	mov	r12,r8
80005f2e:	f0 1f 00 13 	mcall	80005f78 <sd_mmc_mci_dma_read_open+0x184>
80005f32:	18 98       	mov	r8,r12
80005f34:	58 08       	cp.w	r8,0
80005f36:	c0 30       	breq	80005f3c <sd_mmc_mci_dma_read_open+0x148>
  {
    return false;
80005f38:	30 08       	mov	r8,0
80005f3a:	c0 d8       	rjmp	80005f54 <sd_mmc_mci_dma_read_open+0x160>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
80005f3c:	48 98       	lddpc	r8,80005f60 <sd_mmc_mci_dma_read_open+0x16c>
80005f3e:	70 08       	ld.w	r8,r8[0x0]
80005f40:	10 9c       	mov	r12,r8
80005f42:	f0 1f 00 11 	mcall	80005f84 <sd_mmc_mci_dma_read_open+0x190>
80005f46:	18 98       	mov	r8,r12
80005f48:	e6 18 f0 50 	andh	r8,0xf050,COH
80005f4c:	c0 30       	breq	80005f52 <sd_mmc_mci_dma_read_open+0x15e>
  {
    return false;
80005f4e:	30 08       	mov	r8,0
80005f50:	c0 28       	rjmp	80005f54 <sd_mmc_mci_dma_read_open+0x160>
  }

  return true;
80005f52:	30 18       	mov	r8,1
}
80005f54:	10 9c       	mov	r12,r8
80005f56:	2f bd       	sub	sp,-20
80005f58:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f5c:	00 00       	add	r0,r0
80005f5e:	09 bc       	ld.ub	r12,r4[0x3]
80005f60:	00 00       	add	r0,r0
80005f62:	00 14       	sub	r4,r0
80005f64:	80 00       	ld.sh	r0,r0[0x0]
80005f66:	7e 70       	ld.w	r0,pc[0x1c]
80005f68:	00 00       	add	r0,r0
80005f6a:	04 cc       	st.b	r2++,r12
80005f6c:	80 00       	ld.sh	r0,r0[0x0]
80005f6e:	7e 2c       	ld.w	r12,pc[0x8]
80005f70:	00 00       	add	r0,r0
80005f72:	0b c4       	ld.ub	r4,r5[0x4]
80005f74:	00 00       	add	r0,r0
80005f76:	07 ac       	ld.ub	r12,r3[0x2]
80005f78:	80 00       	ld.sh	r0,r0[0x0]
80005f7a:	7c d8       	ld.w	r8,lr[0x34]
80005f7c:	80 00       	ld.sh	r0,r0[0x0]
80005f7e:	7c 58       	ld.w	r8,lr[0x14]
80005f80:	80 00       	ld.sh	r0,r0[0x0]
80005f82:	7c a2       	ld.w	r2,lr[0x28]
80005f84:	80 00       	ld.sh	r0,r0[0x0]
80005f86:	7e 10       	ld.w	r0,pc[0x4]

80005f88 <sd_mmc_mci_read_close>:

bool sd_mmc_mci_read_close (uint8_t slot)
{
80005f88:	eb cd 40 80 	pushm	r7,lr
80005f8c:	1a 97       	mov	r7,sp
80005f8e:	20 3d       	sub	sp,12
80005f90:	18 98       	mov	r8,r12
80005f92:	ef 68 ff f4 	st.b	r7[-12],r8
  if( (mci_crc_error(mci)) )
80005f96:	4a 08       	lddpc	r8,80006014 <sd_mmc_mci_read_close+0x8c>
80005f98:	70 08       	ld.w	r8,r8[0x0]
80005f9a:	ef 48 ff f8 	st.w	r7[-8],r8
80005f9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fa2:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80005fa6:	49 d8       	lddpc	r8,80006018 <sd_mmc_mci_read_close+0x90>
80005fa8:	70 08       	ld.w	r8,r8[0x0]
80005faa:	10 99       	mov	r9,r8
80005fac:	e6 19 01 e0 	andh	r9,0x1e0,COH
80005fb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fb4:	71 08       	ld.w	r8,r8[0x40]
80005fb6:	f3 e8 10 08 	or	r8,r9,r8
80005fba:	10 99       	mov	r9,r8
80005fbc:	49 78       	lddpc	r8,80006018 <sd_mmc_mci_read_close+0x90>
80005fbe:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80005fc0:	49 68       	lddpc	r8,80006018 <sd_mmc_mci_read_close+0x90>
80005fc2:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
80005fc4:	e6 18 00 20 	andh	r8,0x20,COH
80005fc8:	c0 90       	breq	80005fda <sd_mmc_mci_read_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
80005fca:	49 48       	lddpc	r8,80006018 <sd_mmc_mci_read_close+0x90>
80005fcc:	70 08       	ld.w	r8,r8[0x0]
80005fce:	10 99       	mov	r9,r8
80005fd0:	b5 d9       	cbr	r9,0x15
80005fd2:	49 28       	lddpc	r8,80006018 <sd_mmc_mci_read_close+0x90>
80005fd4:	91 09       	st.w	r8[0x0],r9
    return true;
80005fd6:	30 18       	mov	r8,1
80005fd8:	c0 28       	rjmp	80005fdc <sd_mmc_mci_read_close+0x54>
  }
  else
    return false;
80005fda:	30 08       	mov	r8,0
80005fdc:	58 08       	cp.w	r8,0
80005fde:	c0 30       	breq	80005fe4 <sd_mmc_mci_read_close+0x5c>
  {
    return false;  // An CRC error has been seen
80005fe0:	30 08       	mov	r8,0
80005fe2:	c1 48       	rjmp	8000600a <sd_mmc_mci_read_close+0x82>
  }

  mci_wait_busy_signal(mci);
80005fe4:	48 c8       	lddpc	r8,80006014 <sd_mmc_mci_read_close+0x8c>
80005fe6:	70 08       	ld.w	r8,r8[0x0]
80005fe8:	10 9c       	mov	r12,r8
80005fea:	f0 1f 00 0d 	mcall	8000601c <sd_mmc_mci_read_close+0x94>

  if( mci_send_cmd( mci, SD_MMC_STOP_READ_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
80005fee:	48 a8       	lddpc	r8,80006014 <sd_mmc_mci_read_close+0x8c>
80005ff0:	70 08       	ld.w	r8,r8[0x0]
80005ff2:	3f fa       	mov	r10,-1
80005ff4:	e2 6b 10 4c 	mov	r11,135244
80005ff8:	10 9c       	mov	r12,r8
80005ffa:	f0 1f 00 0a 	mcall	80006020 <sd_mmc_mci_read_close+0x98>
80005ffe:	18 98       	mov	r8,r12
80006000:	58 08       	cp.w	r8,0
80006002:	c0 30       	breq	80006008 <sd_mmc_mci_read_close+0x80>
    return false;
80006004:	30 08       	mov	r8,0
80006006:	c0 28       	rjmp	8000600a <sd_mmc_mci_read_close+0x82>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  return true;
80006008:	30 18       	mov	r8,1
}
8000600a:	10 9c       	mov	r12,r8
8000600c:	2f dd       	sub	sp,-12
8000600e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006012:	00 00       	add	r0,r0
80006014:	00 00       	add	r0,r0
80006016:	00 14       	sub	r4,r0
80006018:	00 00       	add	r0,r0
8000601a:	06 58       	eor	r8,r3
8000601c:	80 00       	ld.sh	r0,r0[0x0]
8000601e:	7e 2c       	ld.w	r12,pc[0x8]
80006020:	80 00       	ld.sh	r0,r0[0x0]
80006022:	7c d8       	ld.w	r8,lr[0x34]

80006024 <sd_mmc_mci_dma_write_open>:

  return true;
}

bool sd_mmc_mci_dma_write_open (uint8_t slot, uint32_t pos, const void* ram, uint16_t nb_sector)
{
80006024:	eb cd 40 80 	pushm	r7,lr
80006028:	1a 97       	mov	r7,sp
8000602a:	20 5d       	sub	sp,20
8000602c:	ef 4b ff f4 	st.w	r7[-12],r11
80006030:	ef 4a ff f0 	st.w	r7[-16],r10
80006034:	12 98       	mov	r8,r9
80006036:	18 99       	mov	r9,r12
80006038:	ef 69 ff f8 	st.b	r7[-8],r9
8000603c:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
80006040:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006044:	30 18       	mov	r8,1
80006046:	f0 09 18 00 	cp.b	r9,r8
8000604a:	e0 88 00 04 	brls	80006052 <sd_mmc_mci_dma_write_open+0x2e>
    return false;
8000604e:	30 08       	mov	r8,0
80006050:	c8 88       	rjmp	80006160 <sd_mmc_mci_dma_write_open+0x13c>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006052:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006056:	4c 59       	lddpc	r9,80006168 <sd_mmc_mci_dma_write_open+0x144>
80006058:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000605c:	10 9a       	mov	r10,r8
8000605e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006062:	4c 38       	lddpc	r8,8000616c <sd_mmc_mci_dma_write_open+0x148>
80006064:	70 08       	ld.w	r8,r8[0x0]
80006066:	12 9b       	mov	r11,r9
80006068:	10 9c       	mov	r12,r8
8000606a:	f0 1f 00 42 	mcall	80006170 <sd_mmc_mci_dma_write_open+0x14c>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
8000606e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006072:	4c 18       	lddpc	r8,80006174 <sd_mmc_mci_dma_write_open+0x150>
80006074:	ee fa ff f4 	ld.w	r10,r7[-12]
80006078:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
8000607c:	4b c8       	lddpc	r8,8000616c <sd_mmc_mci_dma_write_open+0x148>
8000607e:	70 08       	ld.w	r8,r8[0x0]
80006080:	10 9c       	mov	r12,r8
80006082:	f0 1f 00 3e 	mcall	80006178 <sd_mmc_mci_dma_write_open+0x154>
      return false;
   }
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
80006086:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000608a:	4b b8       	lddpc	r8,80006174 <sd_mmc_mci_dma_write_open+0x150>
8000608c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006090:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
80006094:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006098:	4b 99       	lddpc	r9,8000617c <sd_mmc_mci_dma_write_open+0x158>
8000609a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000609e:	e2 18 00 10 	andl	r8,0x10,COH
800060a2:	c0 e1       	brne	800060be <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
800060a4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800060a8:	4b 59       	lddpc	r9,8000617c <sd_mmc_mci_dma_write_open+0x158>
800060aa:	f2 08 07 08 	ld.ub	r8,r9[r8]
800060ae:	e2 18 00 20 	andl	r8,0x20,COH
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800060b2:	c0 61       	brne	800060be <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
800060b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060b8:	a9 78       	lsl	r8,0x9
800060ba:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  // Set Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
800060be:	4a c8       	lddpc	r8,8000616c <sd_mmc_mci_dma_write_open+0x148>
800060c0:	70 08       	ld.w	r8,r8[0x0]
800060c2:	e0 6b 02 00 	mov	r11,512
800060c6:	10 9c       	mov	r12,r8
800060c8:	f0 1f 00 2e 	mcall	80006180 <sd_mmc_mci_dma_write_open+0x15c>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
800060cc:	ef 19 ff ec 	ld.uh	r9,r7[-20]
800060d0:	4a 78       	lddpc	r8,8000616c <sd_mmc_mci_dma_write_open+0x148>
800060d2:	70 08       	ld.w	r8,r8[0x0]
800060d4:	12 9b       	mov	r11,r9
800060d6:	10 9c       	mov	r12,r8
800060d8:	f0 1f 00 2b 	mcall	80006184 <sd_mmc_mci_dma_write_open+0x160>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
800060dc:	fc 18 ff 10 	movh	r8,0xff10
800060e0:	30 19       	mov	r9,1
800060e2:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
800060e6:	fe 68 40 00 	mov	r8,-114688
800060ea:	30 09       	mov	r9,0
800060ec:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
800060f0:	fc 18 ff 10 	movh	r8,0xff10
800060f4:	30 09       	mov	r9,0
800060f6:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
800060fa:	fc 18 ff 10 	movh	r8,0xff10
800060fe:	e0 69 d8 24 	mov	r9,55332
80006102:	ea 19 02 10 	orh	r9,0x210
80006106:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
8000610a:	fc 18 ff 10 	movh	r8,0xff10
8000610e:	30 09       	mov	r9,0
80006110:	f1 49 00 98 	st.w	r8[152],r9
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: hw handshaking
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
80006114:	fc 18 ff 10 	movh	r8,0xff10
80006118:	e0 69 18 00 	mov	r9,6144
8000611c:	f1 49 00 9c 	st.w	r8[156],r9
    (AVR32_DMACA_CH_MMCI_TX << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf:
    (0                      << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
80006120:	fe 68 40 00 	mov	r8,-114688
80006124:	e0 69 01 30 	mov	r9,304
80006128:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD24)
  if(mci_send_cmd(mci, SD_MMC_WRITE_MULTIPLE_BLOCK_CMD, addr )!=MCI_SUCCESS)
8000612c:	49 08       	lddpc	r8,8000616c <sd_mmc_mci_dma_write_open+0x148>
8000612e:	70 08       	ld.w	r8,r8[0x0]
80006130:	ee fa ff fc 	ld.w	r10,r7[-4]
80006134:	e8 7b 10 59 	mov	r11,594009
80006138:	10 9c       	mov	r12,r8
8000613a:	f0 1f 00 14 	mcall	80006188 <sd_mmc_mci_dma_write_open+0x164>
8000613e:	18 98       	mov	r8,r12
80006140:	58 08       	cp.w	r8,0
80006142:	c0 30       	breq	80006148 <sd_mmc_mci_dma_write_open+0x124>
  {
    return false;
80006144:	30 08       	mov	r8,0
80006146:	c0 d8       	rjmp	80006160 <sd_mmc_mci_dma_write_open+0x13c>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
80006148:	48 98       	lddpc	r8,8000616c <sd_mmc_mci_dma_write_open+0x148>
8000614a:	70 08       	ld.w	r8,r8[0x0]
8000614c:	10 9c       	mov	r12,r8
8000614e:	f0 1f 00 10 	mcall	8000618c <sd_mmc_mci_dma_write_open+0x168>
80006152:	18 98       	mov	r8,r12
80006154:	e6 18 f0 50 	andh	r8,0xf050,COH
80006158:	c0 30       	breq	8000615e <sd_mmc_mci_dma_write_open+0x13a>
  {
    return false;
8000615a:	30 08       	mov	r8,0
8000615c:	c0 28       	rjmp	80006160 <sd_mmc_mci_dma_write_open+0x13c>
  }

  return true;
8000615e:	30 18       	mov	r8,1
}
80006160:	10 9c       	mov	r12,r8
80006162:	2f bd       	sub	sp,-20
80006164:	e3 cd 80 80 	ldm	sp++,r7,pc
80006168:	00 00       	add	r0,r0
8000616a:	09 bc       	ld.ub	r12,r4[0x3]
8000616c:	00 00       	add	r0,r0
8000616e:	00 14       	sub	r4,r0
80006170:	80 00       	ld.sh	r0,r0[0x0]
80006172:	7e 70       	ld.w	r0,pc[0x1c]
80006174:	00 00       	add	r0,r0
80006176:	04 cc       	st.b	r2++,r12
80006178:	80 00       	ld.sh	r0,r0[0x0]
8000617a:	7e 2c       	ld.w	r12,pc[0x8]
8000617c:	00 00       	add	r0,r0
8000617e:	0b c4       	ld.ub	r4,r5[0x4]
80006180:	80 00       	ld.sh	r0,r0[0x0]
80006182:	7c 58       	ld.w	r8,lr[0x14]
80006184:	80 00       	ld.sh	r0,r0[0x0]
80006186:	7c a2       	ld.w	r2,lr[0x28]
80006188:	80 00       	ld.sh	r0,r0[0x0]
8000618a:	7c d8       	ld.w	r8,lr[0x34]
8000618c:	80 00       	ld.sh	r0,r0[0x0]
8000618e:	7e 10       	ld.w	r0,pc[0x4]

80006190 <sd_mmc_mci_write_close>:

bool sd_mmc_mci_write_close (uint8_t slot)
{
80006190:	eb cd 40 80 	pushm	r7,lr
80006194:	1a 97       	mov	r7,sp
80006196:	20 5d       	sub	sp,20
80006198:	18 98       	mov	r8,r12
8000619a:	ef 68 ff ec 	st.b	r7[-20],r8
  if( (mci_crc_error(mci)) )
8000619e:	4b 58       	lddpc	r8,80006270 <sd_mmc_mci_write_close+0xe0>
800061a0:	70 08       	ld.w	r8,r8[0x0]
800061a2:	ef 48 ff f0 	st.w	r7[-16],r8
800061a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800061aa:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800061ae:	4b 28       	lddpc	r8,80006274 <sd_mmc_mci_write_close+0xe4>
800061b0:	70 08       	ld.w	r8,r8[0x0]
800061b2:	10 99       	mov	r9,r8
800061b4:	e6 19 01 e0 	andh	r9,0x1e0,COH
800061b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061bc:	71 08       	ld.w	r8,r8[0x40]
800061be:	f3 e8 10 08 	or	r8,r9,r8
800061c2:	10 99       	mov	r9,r8
800061c4:	4a c8       	lddpc	r8,80006274 <sd_mmc_mci_write_close+0xe4>
800061c6:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800061c8:	4a b8       	lddpc	r8,80006274 <sd_mmc_mci_write_close+0xe4>
800061ca:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
800061cc:	e6 18 00 20 	andh	r8,0x20,COH
800061d0:	c0 90       	breq	800061e2 <sd_mmc_mci_write_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
800061d2:	4a 98       	lddpc	r8,80006274 <sd_mmc_mci_write_close+0xe4>
800061d4:	70 08       	ld.w	r8,r8[0x0]
800061d6:	10 99       	mov	r9,r8
800061d8:	b5 d9       	cbr	r9,0x15
800061da:	4a 78       	lddpc	r8,80006274 <sd_mmc_mci_write_close+0xe4>
800061dc:	91 09       	st.w	r8[0x0],r9
    return true;
800061de:	30 18       	mov	r8,1
800061e0:	c0 28       	rjmp	800061e4 <sd_mmc_mci_write_close+0x54>
  }
  else
    return false;
800061e2:	30 08       	mov	r8,0
800061e4:	58 08       	cp.w	r8,0
800061e6:	c0 30       	breq	800061ec <sd_mmc_mci_write_close+0x5c>
  {
    return false;  // An CRC error has been seen
800061e8:	30 08       	mov	r8,0
800061ea:	c3 e8       	rjmp	80006266 <sd_mmc_mci_write_close+0xd6>
  }

  while(!(mci_data_block_ended(mci)));
800061ec:	4a 18       	lddpc	r8,80006270 <sd_mmc_mci_write_close+0xe0>
800061ee:	70 08       	ld.w	r8,r8[0x0]
800061f0:	ef 48 ff f8 	st.w	r7[-8],r8
800061f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061f8:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
800061fc:	49 e8       	lddpc	r8,80006274 <sd_mmc_mci_write_close+0xe4>
800061fe:	70 08       	ld.w	r8,r8[0x0]
80006200:	10 99       	mov	r9,r8
80006202:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006206:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000620a:	71 08       	ld.w	r8,r8[0x40]
8000620c:	f3 e8 10 08 	or	r8,r9,r8
80006210:	10 99       	mov	r9,r8
80006212:	49 98       	lddpc	r8,80006274 <sd_mmc_mci_write_close+0xe4>
80006214:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006216:	49 88       	lddpc	r8,80006274 <sd_mmc_mci_write_close+0xe4>
80006218:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_data_block_ended(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_XFRDONE_MASK) != 0;
8000621a:	e6 18 08 00 	andh	r8,0x800,COH
8000621e:	5f 18       	srne	r8
80006220:	58 08       	cp.w	r8,0
80006222:	ce 50       	breq	800061ec <sd_mmc_mci_write_close+0x5c>

  if( mci_send_cmd( mci, SD_MMC_STOP_WRITE_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
80006224:	49 38       	lddpc	r8,80006270 <sd_mmc_mci_write_close+0xe0>
80006226:	70 08       	ld.w	r8,r8[0x0]
80006228:	3f fa       	mov	r10,-1
8000622a:	e2 6b 10 cc 	mov	r11,135372
8000622e:	10 9c       	mov	r12,r8
80006230:	f0 1f 00 12 	mcall	80006278 <sd_mmc_mci_write_close+0xe8>
80006234:	18 98       	mov	r8,r12
80006236:	58 08       	cp.w	r8,0
80006238:	c0 30       	breq	8000623e <sd_mmc_mci_write_close+0xae>
  {
    return false;
8000623a:	30 08       	mov	r8,0
8000623c:	c1 58       	rjmp	80006266 <sd_mmc_mci_write_close+0xd6>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  if( slot==SD_SLOT_4BITS )
8000623e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80006242:	30 18       	mov	r8,1
80006244:	f0 09 18 00 	cp.b	r9,r8
80006248:	c0 81       	brne	80006258 <sd_mmc_mci_write_close+0xc8>
  {
    while(!(gpio_get_pin_value(SD_SLOT_4BITS_DATA0_PIN)));                             // Wait until the card is ready.
8000624a:	31 3c       	mov	r12,19
8000624c:	f0 1f 00 0c 	mcall	8000627c <sd_mmc_mci_write_close+0xec>
80006250:	18 98       	mov	r8,r12
80006252:	58 08       	cp.w	r8,0
80006254:	cf b0       	breq	8000624a <sd_mmc_mci_write_close+0xba>
80006256:	c0 78       	rjmp	80006264 <sd_mmc_mci_write_close+0xd4>
  }
  else
  {
    while(!(gpio_get_pin_value(SD_SLOT_8BITS_DATA0_PIN)));                             // Wait until the card is ready.
80006258:	31 dc       	mov	r12,29
8000625a:	f0 1f 00 09 	mcall	8000627c <sd_mmc_mci_write_close+0xec>
8000625e:	18 98       	mov	r8,r12
80006260:	58 08       	cp.w	r8,0
80006262:	cf b0       	breq	80006258 <sd_mmc_mci_write_close+0xc8>
  }
  return true;
80006264:	30 18       	mov	r8,1
}
80006266:	10 9c       	mov	r12,r8
80006268:	2f bd       	sub	sp,-20
8000626a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000626e:	00 00       	add	r0,r0
80006270:	00 00       	add	r0,r0
80006272:	00 14       	sub	r4,r0
80006274:	00 00       	add	r0,r0
80006276:	06 58       	eor	r8,r3
80006278:	80 00       	ld.sh	r0,r0[0x0]
8000627a:	7c d8       	ld.w	r8,lr[0x34]
8000627c:	80 00       	ld.sh	r0,r0[0x0]
8000627e:	77 04       	ld.w	r4,r11[0x40]

80006280 <int2alpha>:

char Statement[MSG_LENGTH] = {0};
uint16_t enciphered_blocks = 0, deciphered_blocks = 0, aes_step = 0;
//MESSAGE_STRING_t Lcd_Message;
void int2alpha (uint16_t value, char * dest)
{
80006280:	eb cd 40 80 	pushm	r7,lr
80006284:	1a 97       	mov	r7,sp
80006286:	20 5d       	sub	sp,20
80006288:	18 98       	mov	r8,r12
8000628a:	ef 4b ff ec 	st.w	r7[-20],r11
8000628e:	ef 58 ff f0 	st.h	r7[-16],r8
	uint8_t i = 0, value_len = 0, temp[10];
80006292:	30 08       	mov	r8,0
80006294:	ef 68 ff fe 	st.b	r7[-2],r8
80006298:	30 08       	mov	r8,0
8000629a:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (value == 0)
8000629e:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800062a2:	30 08       	mov	r8,0
800062a4:	f0 09 19 00 	cp.h	r9,r8
800062a8:	c2 c1       	brne	80006300 <int2alpha+0x80>
	{
		return;
800062aa:	c5 68       	rjmp	80006356 <int2alpha+0xd6>
	}
	while (value != 0)
	{
		temp[i++] = value % 10 + '0';
800062ac:	ef 3b ff fe 	ld.ub	r11,r7[-2]
800062b0:	ef 1a ff f0 	ld.uh	r10,r7[-16]
800062b4:	e0 68 cc cd 	mov	r8,52429
800062b8:	ea 18 cc cc 	orh	r8,0xcccc
800062bc:	f4 08 06 48 	mulu.d	r8,r10,r8
800062c0:	a3 99       	lsr	r9,0x3
800062c2:	12 98       	mov	r8,r9
800062c4:	a3 68       	lsl	r8,0x2
800062c6:	12 08       	add	r8,r9
800062c8:	a1 78       	lsl	r8,0x1
800062ca:	f4 08 01 08 	sub	r8,r10,r8
800062ce:	5c 88       	casts.h	r8
800062d0:	5c 58       	castu.b	r8
800062d2:	2d 08       	sub	r8,-48
800062d4:	5c 58       	castu.b	r8
800062d6:	ee 0b 00 09 	add	r9,r7,r11
800062da:	f3 68 ff f4 	st.b	r9[-12],r8
800062de:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800062e2:	2f f8       	sub	r8,-1
800062e4:	ef 68 ff fe 	st.b	r7[-2],r8
		value /= 10;
800062e8:	ef 19 ff f0 	ld.uh	r9,r7[-16]
800062ec:	e0 68 cc cd 	mov	r8,52429
800062f0:	ea 18 cc cc 	orh	r8,0xcccc
800062f4:	f2 08 06 48 	mulu.d	r8,r9,r8
800062f8:	f2 08 16 03 	lsr	r8,r9,0x3
800062fc:	ef 58 ff f0 	st.h	r7[-16],r8
	
	if (value == 0)
	{
		return;
	}
	while (value != 0)
80006300:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80006304:	30 08       	mov	r8,0
80006306:	f0 09 19 00 	cp.h	r9,r8
8000630a:	cd 11       	brne	800062ac <int2alpha+0x2c>
	{
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
8000630c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006310:	ef 68 ff ff 	st.b	r7[-1],r8
	i  = 0;
80006314:	30 08       	mov	r8,0
80006316:	ef 68 ff fe 	st.b	r7[-2],r8
	while (i < value_len)
8000631a:	c1 78       	rjmp	80006348 <int2alpha+0xc8>
	{
		dest[i] = temp[value_len - i - 1];
8000631c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006320:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006324:	10 09       	add	r9,r8
80006326:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000632a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000632e:	f4 08 01 08 	sub	r8,r10,r8
80006332:	20 18       	sub	r8,1
80006334:	ee 08 00 08 	add	r8,r7,r8
80006338:	f1 38 ff f4 	ld.ub	r8,r8[-12]
8000633c:	b2 88       	st.b	r9[0x0],r8
		i++;
8000633e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006342:	2f f8       	sub	r8,-1
80006344:	ef 68 ff fe 	st.b	r7[-2],r8
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
	i  = 0;
	while (i < value_len)
80006348:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000634c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006350:	f0 09 18 00 	cp.b	r9,r8
80006354:	ce 43       	brcs	8000631c <int2alpha+0x9c>
	{
		dest[i] = temp[value_len - i - 1];
		i++;
	}
}
80006356:	2f bd       	sub	sp,-20
80006358:	e3 cd 80 80 	ldm	sp++,r7,pc

8000635c <string_len>:

uint8_t string_len(char * source_str)
{
8000635c:	eb cd 40 80 	pushm	r7,lr
80006360:	1a 97       	mov	r7,sp
80006362:	20 2d       	sub	sp,8
80006364:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t i = 0;
80006368:	30 08       	mov	r8,0
8000636a:	ef 68 ff ff 	st.b	r7[-1],r8
	
	while (*source_str++ != '\0')
8000636e:	c0 68       	rjmp	8000637a <string_len+0x1e>
	{
		i++;
80006370:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006374:	2f f8       	sub	r8,-1
80006376:	ef 68 ff ff 	st.b	r7[-1],r8

uint8_t string_len(char * source_str)
{
	uint8_t i = 0;
	
	while (*source_str++ != '\0')
8000637a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000637e:	11 89       	ld.ub	r9,r8[0x0]
80006380:	30 08       	mov	r8,0
80006382:	f0 09 18 00 	cp.b	r9,r8
80006386:	5f 18       	srne	r8
80006388:	5c 58       	castu.b	r8
8000638a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000638e:	2f f9       	sub	r9,-1
80006390:	ef 49 ff f8 	st.w	r7[-8],r9
80006394:	58 08       	cp.w	r8,0
80006396:	ce d1       	brne	80006370 <string_len+0x14>
	{
		i++;
	}
	return i;
80006398:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000639c:	10 9c       	mov	r12,r8
8000639e:	2f ed       	sub	sp,-8
800063a0:	e3 cd 80 80 	ldm	sp++,r7,pc

800063a4 <string_cat>:

void string_cat(const char * source, char * dest)
{
800063a4:	eb cd 40 80 	pushm	r7,lr
800063a8:	1a 97       	mov	r7,sp
800063aa:	20 2d       	sub	sp,8
800063ac:	ef 4c ff fc 	st.w	r7[-4],r12
800063b0:	ef 4b ff f8 	st.w	r7[-8],r11
	while (*source != '\0')
800063b4:	c1 18       	rjmp	800063d6 <string_cat+0x32>
	{
		*dest++ = *source++;
800063b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063ba:	11 88       	ld.ub	r8,r8[0x0]
800063bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800063c0:	b2 88       	st.b	r9[0x0],r8
800063c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063c6:	2f f8       	sub	r8,-1
800063c8:	ef 48 ff f8 	st.w	r7[-8],r8
800063cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063d0:	2f f8       	sub	r8,-1
800063d2:	ef 48 ff fc 	st.w	r7[-4],r8
	return i;
}

void string_cat(const char * source, char * dest)
{
	while (*source != '\0')
800063d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063da:	11 88       	ld.ub	r8,r8[0x0]
800063dc:	58 08       	cp.w	r8,0
800063de:	ce c1       	brne	800063b6 <string_cat+0x12>
	{
		*dest++ = *source++;
	}
}
800063e0:	2f ed       	sub	sp,-8
800063e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800063e6:	d7 03       	nop

800063e8 <sd_mmc_mci_read_multiple_sector>:

bool sd_mmc_mci_read_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
800063e8:	eb cd 40 80 	pushm	r7,lr
800063ec:	1a 97       	mov	r7,sp
800063ee:	20 5d       	sub	sp,20
800063f0:	18 99       	mov	r9,r12
800063f2:	16 98       	mov	r8,r11
800063f4:	ef 4a ff ec 	st.w	r7[-20],r10
800063f8:	ef 69 ff f4 	st.b	r7[-12],r9
800063fc:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
80006400:	30 18       	mov	r8,1
80006402:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
80006406:	30 08       	mov	r8,0
80006408:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
8000640c:	30 08       	mov	r8,0
8000640e:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
80006412:	30 08       	mov	r8,0
80006414:	ef 68 ff ff 	st.b	r7[-1],r8
80006418:	c0 c8       	rjmp	80006430 <sd_mmc_mci_read_multiple_sector+0x48>
  {
	  Statement[i] = 0;
8000641a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000641e:	4f 4a       	lddpc	r10,800065ec <sd_mmc_mci_read_multiple_sector+0x204>
80006420:	30 08       	mov	r8,0
80006422:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
80006426:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000642a:	2f f8       	sub	r8,-1
8000642c:	ef 68 ff ff 	st.b	r7[-1],r8
80006430:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006434:	36 38       	mov	r8,99
80006436:	f0 09 18 00 	cp.b	r9,r8
8000643a:	fe 98 ff f0 	brls	8000641a <sd_mmc_mci_read_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
8000643e:	4e d8       	lddpc	r8,800065f0 <sd_mmc_mci_read_multiple_sector+0x208>
80006440:	90 08       	ld.sh	r8,r8[0x0]
80006442:	2f f8       	sub	r8,-1
80006444:	5c 88       	casts.h	r8
80006446:	4e b9       	lddpc	r9,800065f0 <sd_mmc_mci_read_multiple_sector+0x208>
80006448:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks = 0;
8000644a:	4e b9       	lddpc	r9,800065f4 <sd_mmc_mci_read_multiple_sector+0x20c>
8000644c:	30 08       	mov	r8,0
8000644e:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks += nb_sector;
80006450:	4e a8       	lddpc	r8,800065f8 <sd_mmc_mci_read_multiple_sector+0x210>
80006452:	90 08       	ld.sh	r8,r8[0x0]
80006454:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80006458:	f2 08 00 08 	add	r8,r9,r8
8000645c:	5c 88       	casts.h	r8
8000645e:	4e 79       	lddpc	r9,800065f8 <sd_mmc_mci_read_multiple_sector+0x210>
80006460:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
80006462:	4e 48       	lddpc	r8,800065f0 <sd_mmc_mci_read_multiple_sector+0x208>
80006464:	90 08       	ld.sh	r8,r8[0x0]
80006466:	5c 78       	castu.h	r8
80006468:	4e 1b       	lddpc	r11,800065ec <sd_mmc_mci_read_multiple_sector+0x204>
8000646a:	10 9c       	mov	r12,r8
8000646c:	f0 1f 00 64 	mcall	800065fc <sd_mmc_mci_read_multiple_sector+0x214>
  string_cat(" Deciphered ", &Statement[string_len(Statement)]);
80006470:	4d fc       	lddpc	r12,800065ec <sd_mmc_mci_read_multiple_sector+0x204>
80006472:	f0 1f 00 64 	mcall	80006600 <sd_mmc_mci_read_multiple_sector+0x218>
80006476:	18 98       	mov	r8,r12
80006478:	10 99       	mov	r9,r8
8000647a:	4d d8       	lddpc	r8,800065ec <sd_mmc_mci_read_multiple_sector+0x204>
8000647c:	f2 08 00 08 	add	r8,r9,r8
80006480:	10 9b       	mov	r11,r8
80006482:	4e 1c       	lddpc	r12,80006604 <sd_mmc_mci_read_multiple_sector+0x21c>
80006484:	f0 1f 00 61 	mcall	80006608 <sd_mmc_mci_read_multiple_sector+0x220>
  int2alpha(deciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
80006488:	4d 9c       	lddpc	r12,800065ec <sd_mmc_mci_read_multiple_sector+0x204>
8000648a:	f0 1f 00 5e 	mcall	80006600 <sd_mmc_mci_read_multiple_sector+0x218>
8000648e:	18 98       	mov	r8,r12
80006490:	10 99       	mov	r9,r8
80006492:	4d 78       	lddpc	r8,800065ec <sd_mmc_mci_read_multiple_sector+0x204>
80006494:	10 09       	add	r9,r8
80006496:	4d 98       	lddpc	r8,800065f8 <sd_mmc_mci_read_multiple_sector+0x210>
80006498:	90 08       	ld.sh	r8,r8[0x0]
8000649a:	5c 78       	castu.h	r8
8000649c:	12 9b       	mov	r11,r9
8000649e:	10 9c       	mov	r12,r8
800064a0:	f0 1f 00 57 	mcall	800065fc <sd_mmc_mci_read_multiple_sector+0x214>
  string_cat(" sectors", &Statement[string_len(Statement)]);
800064a4:	4d 2c       	lddpc	r12,800065ec <sd_mmc_mci_read_multiple_sector+0x204>
800064a6:	f0 1f 00 57 	mcall	80006600 <sd_mmc_mci_read_multiple_sector+0x218>
800064aa:	18 98       	mov	r8,r12
800064ac:	10 99       	mov	r9,r8
800064ae:	4d 08       	lddpc	r8,800065ec <sd_mmc_mci_read_multiple_sector+0x204>
800064b0:	f2 08 00 08 	add	r8,r9,r8
800064b4:	10 9b       	mov	r11,r8
800064b6:	4d 6c       	lddpc	r12,8000660c <sd_mmc_mci_read_multiple_sector+0x224>
800064b8:	f0 1f 00 54 	mcall	80006608 <sd_mmc_mci_read_multiple_sector+0x220>
  
  //et024006_DrawFilledRect(10, 3 * 10, ET024006_WIDTH, 10, WHITE);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 3 * 10, WHITE, BLACK);
800064bc:	4d 5b       	lddpc	r11,80006610 <sd_mmc_mci_read_multiple_sector+0x228>
800064be:	30 08       	mov	r8,0
800064c0:	1a d8       	st.w	--sp,r8
800064c2:	e0 68 ff ff 	mov	r8,65535
800064c6:	31 e9       	mov	r9,30
800064c8:	30 aa       	mov	r10,10
800064ca:	4c 9c       	lddpc	r12,800065ec <sd_mmc_mci_read_multiple_sector+0x204>
800064cc:	f0 1f 00 52 	mcall	80006614 <sd_mmc_mci_read_multiple_sector+0x22c>
800064d0:	2f fd       	sub	sp,-4
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
800064d2:	c5 28       	rjmp	80006576 <sd_mmc_mci_read_multiple_sector+0x18e>
  {
    // (re)load first stage.
    dma_mci_2_ram((0==(buffer_id++%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
800064d4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800064d8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800064dc:	5f 08       	sreq	r8
800064de:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800064e2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800064e6:	2f f8       	sub	r8,-1
800064e8:	ef 68 ff fb 	st.b	r7[-5],r8
800064ec:	58 09       	cp.w	r9,0
800064ee:	c0 30       	breq	800064f4 <sd_mmc_mci_read_multiple_sector+0x10c>
800064f0:	4c a8       	lddpc	r8,80006618 <sd_mmc_mci_read_multiple_sector+0x230>
800064f2:	c0 28       	rjmp	800064f6 <sd_mmc_mci_read_multiple_sector+0x10e>
800064f4:	4c a8       	lddpc	r8,8000661c <sd_mmc_mci_read_multiple_sector+0x234>
800064f6:	e0 6b 02 00 	mov	r11,512
800064fa:	10 9c       	mov	r12,r8
800064fc:	f0 1f 00 49 	mcall	80006620 <sd_mmc_mci_read_multiple_sector+0x238>

    // (re)load second stage.
    if( !b_first_step )
80006500:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80006504:	ec 18 00 01 	eorl	r8,0x1
80006508:	5c 58       	castu.b	r8
8000650a:	c2 c0       	breq	80006562 <sd_mmc_mci_read_multiple_sector+0x17a>
	{
      apply_aes_decryption(&AVR32_AES, (0==(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, addr /*+ sector_index * 512L*/);
8000650c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006510:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006514:	c0 31       	brne	8000651a <sd_mmc_mci_read_multiple_sector+0x132>
80006516:	4c 18       	lddpc	r8,80006618 <sd_mmc_mci_read_multiple_sector+0x230>
80006518:	c0 28       	rjmp	8000651c <sd_mmc_mci_read_multiple_sector+0x134>
8000651a:	4c 18       	lddpc	r8,8000661c <sd_mmc_mci_read_multiple_sector+0x234>
8000651c:	ee fa ff ec 	ld.w	r10,r7[-20]
80006520:	10 9b       	mov	r11,r8
80006522:	fc 7c 00 00 	mov	r12,-196608
80006526:	f0 1f 00 40 	mcall	80006624 <sd_mmc_mci_read_multiple_sector+0x23c>
	  addr = addr + 512L; //sector_index++;
8000652a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000652e:	f0 c8 fe 00 	sub	r8,r8,-512
80006532:	ef 48 ff ec 	st.w	r7[-20],r8
	  if (!udi_msc_trans_block(true, (0==(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
80006536:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000653a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000653e:	c0 31       	brne	80006544 <sd_mmc_mci_read_multiple_sector+0x15c>
80006540:	4b 68       	lddpc	r8,80006618 <sd_mmc_mci_read_multiple_sector+0x230>
80006542:	c0 28       	rjmp	80006546 <sd_mmc_mci_read_multiple_sector+0x15e>
80006544:	4b 68       	lddpc	r8,8000661c <sd_mmc_mci_read_multiple_sector+0x234>
80006546:	30 09       	mov	r9,0
80006548:	e0 6a 02 00 	mov	r10,512
8000654c:	10 9b       	mov	r11,r8
8000654e:	30 1c       	mov	r12,1
80006550:	f0 1f 00 36 	mcall	80006628 <sd_mmc_mci_read_multiple_sector+0x240>
80006554:	18 98       	mov	r8,r12
80006556:	ec 18 00 01 	eorl	r8,0x1
8000655a:	5c 58       	castu.b	r8
8000655c:	c0 30       	breq	80006562 <sd_mmc_mci_read_multiple_sector+0x17a>
	  {
    	    return false;
8000655e:	30 08       	mov	r8,0
80006560:	c4 28       	rjmp	800065e4 <sd_mmc_mci_read_multiple_sector+0x1fc>
      }

    }
    b_first_step = false;
80006562:	30 08       	mov	r8,0
80006564:	ef 68 ff fa 	st.b	r7[-6],r8
    // Wait completion of DMACA stage.
    while( !is_dma_mci_2_ram_complete() );
80006568:	f0 1f 00 31 	mcall	8000662c <sd_mmc_mci_read_multiple_sector+0x244>
8000656c:	18 98       	mov	r8,r12
8000656e:	ec 18 00 01 	eorl	r8,0x1
80006572:	5c 58       	castu.b	r8
80006574:	cf a1       	brne	80006568 <sd_mmc_mci_read_multiple_sector+0x180>
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
80006576:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000657a:	30 08       	mov	r8,0
8000657c:	f0 09 19 00 	cp.h	r9,r8
80006580:	5f 18       	srne	r8
80006582:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006586:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000658a:	20 18       	sub	r8,1
8000658c:	ef 58 ff f0 	st.h	r7[-16],r8
80006590:	58 09       	cp.w	r9,0
80006592:	ca 11       	brne	800064d4 <sd_mmc_mci_read_multiple_sector+0xec>
    while( !is_dma_mci_2_ram_complete() );

  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_decryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, addr /*+ sector_index * 512L*/);
80006594:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006598:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000659c:	5c 58       	castu.b	r8
8000659e:	c0 30       	breq	800065a4 <sd_mmc_mci_read_multiple_sector+0x1bc>
800065a0:	49 e8       	lddpc	r8,80006618 <sd_mmc_mci_read_multiple_sector+0x230>
800065a2:	c0 28       	rjmp	800065a6 <sd_mmc_mci_read_multiple_sector+0x1be>
800065a4:	49 e8       	lddpc	r8,8000661c <sd_mmc_mci_read_multiple_sector+0x234>
800065a6:	ee fa ff ec 	ld.w	r10,r7[-20]
800065aa:	10 9b       	mov	r11,r8
800065ac:	fc 7c 00 00 	mov	r12,-196608
800065b0:	f0 1f 00 1d 	mcall	80006624 <sd_mmc_mci_read_multiple_sector+0x23c>
  if (!udi_msc_trans_block(true, (0!=(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
800065b4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800065b8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800065bc:	5c 58       	castu.b	r8
800065be:	c0 30       	breq	800065c4 <sd_mmc_mci_read_multiple_sector+0x1dc>
800065c0:	49 68       	lddpc	r8,80006618 <sd_mmc_mci_read_multiple_sector+0x230>
800065c2:	c0 28       	rjmp	800065c6 <sd_mmc_mci_read_multiple_sector+0x1de>
800065c4:	49 68       	lddpc	r8,8000661c <sd_mmc_mci_read_multiple_sector+0x234>
800065c6:	30 09       	mov	r9,0
800065c8:	e0 6a 02 00 	mov	r10,512
800065cc:	10 9b       	mov	r11,r8
800065ce:	30 1c       	mov	r12,1
800065d0:	f0 1f 00 16 	mcall	80006628 <sd_mmc_mci_read_multiple_sector+0x240>
800065d4:	18 98       	mov	r8,r12
800065d6:	ec 18 00 01 	eorl	r8,0x1
800065da:	5c 58       	castu.b	r8
800065dc:	c0 30       	breq	800065e2 <sd_mmc_mci_read_multiple_sector+0x1fa>
    return false;
800065de:	30 08       	mov	r8,0
800065e0:	c0 28       	rjmp	800065e4 <sd_mmc_mci_read_multiple_sector+0x1fc>

  return true;
800065e2:	30 18       	mov	r8,1
}
800065e4:	10 9c       	mov	r12,r8
800065e6:	2f bd       	sub	sp,-20
800065e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800065ec:	00 00       	add	r0,r0
800065ee:	04 d4       	st.w	--r2,r4
800065f0:	00 00       	add	r0,r0
800065f2:	05 3c       	ld.ub	r12,r2++
800065f4:	00 00       	add	r0,r0
800065f6:	05 38       	ld.ub	r8,r2++
800065f8:	00 00       	add	r0,r0
800065fa:	05 3a       	ld.ub	r10,r2++
800065fc:	80 00       	ld.sh	r0,r0[0x0]
800065fe:	62 80       	ld.w	r0,r1[0x20]
80006600:	80 00       	ld.sh	r0,r0[0x0]
80006602:	63 5c       	ld.w	r12,r1[0x54]
80006604:	80 00       	ld.sh	r0,r0[0x0]
80006606:	4c 30       	lddpc	r0,80006710 <sd_mmc_mci_write_multiple_sector+0xe0>
80006608:	80 00       	ld.sh	r0,r0[0x0]
8000660a:	63 a4       	ld.w	r4,r1[0x68]
8000660c:	80 00       	ld.sh	r0,r0[0x0]
8000660e:	4c 40       	lddpc	r0,8000671c <sd_mmc_mci_write_multiple_sector+0xec>
80006610:	80 00       	ld.sh	r0,r0[0x0]
80006612:	d7 b4       	*unknown*
80006614:	80 00       	ld.sh	r0,r0[0x0]
80006616:	32 a0       	mov	r0,42
80006618:	00 00       	add	r0,r0
8000661a:	09 c4       	ld.ub	r4,r4[0x4]
8000661c:	00 00       	add	r0,r0
8000661e:	07 bc       	ld.ub	r12,r3[0x3]
80006620:	80 00       	ld.sh	r0,r0[0x0]
80006622:	5c 34       	neg	r4
80006624:	80 00       	ld.sh	r0,r0[0x0]
80006626:	2e c4       	sub	r4,-20
80006628:	80 00       	ld.sh	r0,r0[0x0]
8000662a:	b9 c8       	cbr	r8,0x18
8000662c:	80 00       	ld.sh	r0,r0[0x0]
8000662e:	5c 84       	casts.h	r4

80006630 <sd_mmc_mci_write_multiple_sector>:



bool sd_mmc_mci_write_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
80006630:	eb cd 40 80 	pushm	r7,lr
80006634:	1a 97       	mov	r7,sp
80006636:	20 5d       	sub	sp,20
80006638:	18 99       	mov	r9,r12
8000663a:	16 98       	mov	r8,r11
8000663c:	ef 4a ff ec 	st.w	r7[-20],r10
80006640:	ef 69 ff f4 	st.b	r7[-12],r9
80006644:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
80006648:	30 18       	mov	r8,1
8000664a:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
8000664e:	30 08       	mov	r8,0
80006650:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
80006654:	30 08       	mov	r8,0
80006656:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
8000665a:	30 08       	mov	r8,0
8000665c:	ef 68 ff ff 	st.b	r7[-1],r8
80006660:	c0 c8       	rjmp	80006678 <sd_mmc_mci_write_multiple_sector+0x48>
  {
	  Statement[i] = 0;
80006662:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006666:	4f 4a       	lddpc	r10,80006834 <sd_mmc_mci_write_multiple_sector+0x204>
80006668:	30 08       	mov	r8,0
8000666a:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
8000666e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006672:	2f f8       	sub	r8,-1
80006674:	ef 68 ff ff 	st.b	r7[-1],r8
80006678:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000667c:	36 38       	mov	r8,99
8000667e:	f0 09 18 00 	cp.b	r9,r8
80006682:	fe 98 ff f0 	brls	80006662 <sd_mmc_mci_write_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
80006686:	4e d8       	lddpc	r8,80006838 <sd_mmc_mci_write_multiple_sector+0x208>
80006688:	90 08       	ld.sh	r8,r8[0x0]
8000668a:	2f f8       	sub	r8,-1
8000668c:	5c 88       	casts.h	r8
8000668e:	4e b9       	lddpc	r9,80006838 <sd_mmc_mci_write_multiple_sector+0x208>
80006690:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks = 0;
80006692:	4e b9       	lddpc	r9,8000683c <sd_mmc_mci_write_multiple_sector+0x20c>
80006694:	30 08       	mov	r8,0
80006696:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks += nb_sector;
80006698:	4e a8       	lddpc	r8,80006840 <sd_mmc_mci_write_multiple_sector+0x210>
8000669a:	90 08       	ld.sh	r8,r8[0x0]
8000669c:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800066a0:	f2 08 00 08 	add	r8,r9,r8
800066a4:	5c 88       	casts.h	r8
800066a6:	4e 79       	lddpc	r9,80006840 <sd_mmc_mci_write_multiple_sector+0x210>
800066a8:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
800066aa:	4e 48       	lddpc	r8,80006838 <sd_mmc_mci_write_multiple_sector+0x208>
800066ac:	90 08       	ld.sh	r8,r8[0x0]
800066ae:	5c 78       	castu.h	r8
800066b0:	4e 1b       	lddpc	r11,80006834 <sd_mmc_mci_write_multiple_sector+0x204>
800066b2:	10 9c       	mov	r12,r8
800066b4:	f0 1f 00 64 	mcall	80006844 <sd_mmc_mci_write_multiple_sector+0x214>
  string_cat(" Enciphered ", &Statement[string_len(Statement)]);
800066b8:	4d fc       	lddpc	r12,80006834 <sd_mmc_mci_write_multiple_sector+0x204>
800066ba:	f0 1f 00 64 	mcall	80006848 <sd_mmc_mci_write_multiple_sector+0x218>
800066be:	18 98       	mov	r8,r12
800066c0:	10 99       	mov	r9,r8
800066c2:	4d d8       	lddpc	r8,80006834 <sd_mmc_mci_write_multiple_sector+0x204>
800066c4:	f2 08 00 08 	add	r8,r9,r8
800066c8:	10 9b       	mov	r11,r8
800066ca:	4e 1c       	lddpc	r12,8000684c <sd_mmc_mci_write_multiple_sector+0x21c>
800066cc:	f0 1f 00 61 	mcall	80006850 <sd_mmc_mci_write_multiple_sector+0x220>
  int2alpha(enciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
800066d0:	4d 9c       	lddpc	r12,80006834 <sd_mmc_mci_write_multiple_sector+0x204>
800066d2:	f0 1f 00 5e 	mcall	80006848 <sd_mmc_mci_write_multiple_sector+0x218>
800066d6:	18 98       	mov	r8,r12
800066d8:	10 99       	mov	r9,r8
800066da:	4d 78       	lddpc	r8,80006834 <sd_mmc_mci_write_multiple_sector+0x204>
800066dc:	10 09       	add	r9,r8
800066de:	4d 98       	lddpc	r8,80006840 <sd_mmc_mci_write_multiple_sector+0x210>
800066e0:	90 08       	ld.sh	r8,r8[0x0]
800066e2:	5c 78       	castu.h	r8
800066e4:	12 9b       	mov	r11,r9
800066e6:	10 9c       	mov	r12,r8
800066e8:	f0 1f 00 57 	mcall	80006844 <sd_mmc_mci_write_multiple_sector+0x214>
  string_cat(" sectors", &Statement[string_len(Statement)]);
800066ec:	4d 2c       	lddpc	r12,80006834 <sd_mmc_mci_write_multiple_sector+0x204>
800066ee:	f0 1f 00 57 	mcall	80006848 <sd_mmc_mci_write_multiple_sector+0x218>
800066f2:	18 98       	mov	r8,r12
800066f4:	10 99       	mov	r9,r8
800066f6:	4d 08       	lddpc	r8,80006834 <sd_mmc_mci_write_multiple_sector+0x204>
800066f8:	f2 08 00 08 	add	r8,r9,r8
800066fc:	10 9b       	mov	r11,r8
800066fe:	4d 6c       	lddpc	r12,80006854 <sd_mmc_mci_write_multiple_sector+0x224>
80006700:	f0 1f 00 54 	mcall	80006850 <sd_mmc_mci_write_multiple_sector+0x220>
  
  //et024006_DrawFilledRect(10, 5 * 10, ET024006_WIDTH, 10, BLACK);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 5 * 10, WHITE, BLACK);  //et024006_PrintConsole(Statement, BLACK, -1);
80006704:	4d 5b       	lddpc	r11,80006858 <sd_mmc_mci_write_multiple_sector+0x228>
80006706:	30 08       	mov	r8,0
80006708:	1a d8       	st.w	--sp,r8
8000670a:	e0 68 ff ff 	mov	r8,65535
8000670e:	33 29       	mov	r9,50
80006710:	30 aa       	mov	r10,10
80006712:	4c 9c       	lddpc	r12,80006834 <sd_mmc_mci_write_multiple_sector+0x204>
80006714:	f0 1f 00 52 	mcall	8000685c <sd_mmc_mci_write_multiple_sector+0x22c>
80006718:	2f fd       	sub	sp,-4
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
8000671a:	c5 38       	rjmp	800067c0 <sd_mmc_mci_write_multiple_sector+0x190>

    // (re)load second stage.
    if( !b_first_step )
8000671c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80006720:	ec 18 00 01 	eorl	r8,0x1
80006724:	5c 58       	castu.b	r8
80006726:	c2 50       	breq	80006770 <sd_mmc_mci_write_multiple_sector+0x140>
	{
	  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, addr /*+ sector_index * 512L*/);
80006728:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000672c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006730:	5c 58       	castu.b	r8
80006732:	c0 30       	breq	80006738 <sd_mmc_mci_write_multiple_sector+0x108>
80006734:	4c b8       	lddpc	r8,80006860 <sd_mmc_mci_write_multiple_sector+0x230>
80006736:	c0 28       	rjmp	8000673a <sd_mmc_mci_write_multiple_sector+0x10a>
80006738:	4c b8       	lddpc	r8,80006864 <sd_mmc_mci_write_multiple_sector+0x234>
8000673a:	ee fa ff ec 	ld.w	r10,r7[-20]
8000673e:	10 9b       	mov	r11,r8
80006740:	fc 7c 00 00 	mov	r12,-196608
80006744:	f0 1f 00 49 	mcall	80006868 <sd_mmc_mci_write_multiple_sector+0x238>
	  addr = addr + 512L; //sector_index++;
80006748:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000674c:	f0 c8 fe 00 	sub	r8,r8,-512
80006750:	ef 48 ff ec 	st.w	r7[-20],r8
      dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80006754:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006758:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000675c:	5c 58       	castu.b	r8
8000675e:	c0 30       	breq	80006764 <sd_mmc_mci_write_multiple_sector+0x134>
80006760:	4c 08       	lddpc	r8,80006860 <sd_mmc_mci_write_multiple_sector+0x230>
80006762:	c0 28       	rjmp	80006766 <sd_mmc_mci_write_multiple_sector+0x136>
80006764:	4c 08       	lddpc	r8,80006864 <sd_mmc_mci_write_multiple_sector+0x234>
80006766:	e0 6b 02 00 	mov	r11,512
8000676a:	10 9c       	mov	r12,r8
8000676c:	f0 1f 00 40 	mcall	8000686c <sd_mmc_mci_write_multiple_sector+0x23c>
    }
    udi_msc_trans_block(false, (0==(buffer_id++%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL);
80006770:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006774:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006778:	5f 08       	sreq	r8
8000677a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000677e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006782:	2f f8       	sub	r8,-1
80006784:	ef 68 ff fb 	st.b	r7[-5],r8
80006788:	58 09       	cp.w	r9,0
8000678a:	c0 30       	breq	80006790 <sd_mmc_mci_write_multiple_sector+0x160>
8000678c:	4b 58       	lddpc	r8,80006860 <sd_mmc_mci_write_multiple_sector+0x230>
8000678e:	c0 28       	rjmp	80006792 <sd_mmc_mci_write_multiple_sector+0x162>
80006790:	4b 58       	lddpc	r8,80006864 <sd_mmc_mci_write_multiple_sector+0x234>
80006792:	30 09       	mov	r9,0
80006794:	e0 6a 02 00 	mov	r10,512
80006798:	10 9b       	mov	r11,r8
8000679a:	30 0c       	mov	r12,0
8000679c:	f0 1f 00 35 	mcall	80006870 <sd_mmc_mci_write_multiple_sector+0x240>
    if( !b_first_step ) {
800067a0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800067a4:	ec 18 00 01 	eorl	r8,0x1
800067a8:	5c 58       	castu.b	r8
800067aa:	c0 80       	breq	800067ba <sd_mmc_mci_write_multiple_sector+0x18a>
      // Wait completion of DMACA stage.
      while( !is_dma_ram_2_mci_complete() );
800067ac:	f0 1f 00 32 	mcall	80006874 <sd_mmc_mci_write_multiple_sector+0x244>
800067b0:	18 98       	mov	r8,r12
800067b2:	ec 18 00 01 	eorl	r8,0x1
800067b6:	5c 58       	castu.b	r8
800067b8:	cf a1       	brne	800067ac <sd_mmc_mci_write_multiple_sector+0x17c>
    }
    b_first_step=false;
800067ba:	30 08       	mov	r8,0
800067bc:	ef 68 ff fa 	st.b	r7[-6],r8
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
800067c0:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800067c4:	30 08       	mov	r8,0
800067c6:	f0 09 19 00 	cp.h	r9,r8
800067ca:	5f 18       	srne	r8
800067cc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800067d0:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800067d4:	20 18       	sub	r8,1
800067d6:	ef 58 ff f0 	st.h	r7[-16],r8
800067da:	58 09       	cp.w	r9,0
800067dc:	ca 01       	brne	8000671c <sd_mmc_mci_write_multiple_sector+0xec>
    }
    b_first_step=false;
  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, addr /*+ sector_index * 512L*/);
800067de:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800067e2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800067e6:	5c 58       	castu.b	r8
800067e8:	c0 30       	breq	800067ee <sd_mmc_mci_write_multiple_sector+0x1be>
800067ea:	49 e8       	lddpc	r8,80006860 <sd_mmc_mci_write_multiple_sector+0x230>
800067ec:	c0 28       	rjmp	800067f0 <sd_mmc_mci_write_multiple_sector+0x1c0>
800067ee:	49 e8       	lddpc	r8,80006864 <sd_mmc_mci_write_multiple_sector+0x234>
800067f0:	ee fa ff ec 	ld.w	r10,r7[-20]
800067f4:	10 9b       	mov	r11,r8
800067f6:	fc 7c 00 00 	mov	r12,-196608
800067fa:	f0 1f 00 1c 	mcall	80006868 <sd_mmc_mci_write_multiple_sector+0x238>
  dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
800067fe:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006802:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006806:	5c 58       	castu.b	r8
80006808:	c0 30       	breq	8000680e <sd_mmc_mci_write_multiple_sector+0x1de>
8000680a:	49 68       	lddpc	r8,80006860 <sd_mmc_mci_write_multiple_sector+0x230>
8000680c:	c0 28       	rjmp	80006810 <sd_mmc_mci_write_multiple_sector+0x1e0>
8000680e:	49 68       	lddpc	r8,80006864 <sd_mmc_mci_write_multiple_sector+0x234>
80006810:	e0 6b 02 00 	mov	r11,512
80006814:	10 9c       	mov	r12,r8
80006816:	f0 1f 00 16 	mcall	8000686c <sd_mmc_mci_write_multiple_sector+0x23c>
  while( !is_dma_ram_2_mci_complete() );
8000681a:	f0 1f 00 17 	mcall	80006874 <sd_mmc_mci_write_multiple_sector+0x244>
8000681e:	18 98       	mov	r8,r12
80006820:	ec 18 00 01 	eorl	r8,0x1
80006824:	5c 58       	castu.b	r8
80006826:	cf a1       	brne	8000681a <sd_mmc_mci_write_multiple_sector+0x1ea>
  return true;
80006828:	30 18       	mov	r8,1
}
8000682a:	10 9c       	mov	r12,r8
8000682c:	2f bd       	sub	sp,-20
8000682e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006832:	00 00       	add	r0,r0
80006834:	00 00       	add	r0,r0
80006836:	04 d4       	st.w	--r2,r4
80006838:	00 00       	add	r0,r0
8000683a:	05 3c       	ld.ub	r12,r2++
8000683c:	00 00       	add	r0,r0
8000683e:	05 3a       	ld.ub	r10,r2++
80006840:	00 00       	add	r0,r0
80006842:	05 38       	ld.ub	r8,r2++
80006844:	80 00       	ld.sh	r0,r0[0x0]
80006846:	62 80       	ld.w	r0,r1[0x20]
80006848:	80 00       	ld.sh	r0,r0[0x0]
8000684a:	63 5c       	ld.w	r12,r1[0x54]
8000684c:	80 00       	ld.sh	r0,r0[0x0]
8000684e:	4c 4c       	lddpc	r12,8000695c <sd_mmc_mci_test_unit_ready+0x64>
80006850:	80 00       	ld.sh	r0,r0[0x0]
80006852:	63 a4       	ld.w	r4,r1[0x68]
80006854:	80 00       	ld.sh	r0,r0[0x0]
80006856:	4c 40       	lddpc	r0,80006964 <sd_mmc_mci_test_unit_ready+0x6c>
80006858:	80 00       	ld.sh	r0,r0[0x0]
8000685a:	d7 b4       	*unknown*
8000685c:	80 00       	ld.sh	r0,r0[0x0]
8000685e:	32 a0       	mov	r0,42
80006860:	00 00       	add	r0,r0
80006862:	09 c4       	ld.ub	r4,r4[0x4]
80006864:	00 00       	add	r0,r0
80006866:	07 bc       	ld.ub	r12,r3[0x3]
80006868:	80 00       	ld.sh	r0,r0[0x0]
8000686a:	2d d0       	sub	r0,-35
8000686c:	80 00       	ld.sh	r0,r0[0x0]
8000686e:	5c a4       	swap.h	r4
80006870:	80 00       	ld.sh	r0,r0[0x0]
80006872:	b9 c8       	cbr	r8,0x18
80006874:	80 00       	ld.sh	r0,r0[0x0]
80006876:	5c f4       	rol	r4

80006878 <sd_mmc_mci_cmd_send_status>:
   return true;
}
#endif      // end FUNC_MMC_CARD_SECU

bool  sd_mmc_mci_cmd_send_status(uint8_t slot)
{
80006878:	eb cd 40 80 	pushm	r7,lr
8000687c:	1a 97       	mov	r7,sp
8000687e:	20 1d       	sub	sp,4
80006880:	18 98       	mov	r8,r12
80006882:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80006886:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000688a:	30 18       	mov	r8,1
8000688c:	f0 09 18 00 	cp.b	r9,r8
80006890:	e0 88 00 04 	brls	80006898 <sd_mmc_mci_cmd_send_status+0x20>
    return false;
80006894:	30 08       	mov	r8,0
80006896:	c2 28       	rjmp	800068da <sd_mmc_mci_cmd_send_status+0x62>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006898:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000689c:	49 29       	lddpc	r9,800068e4 <sd_mmc_mci_cmd_send_status+0x6c>
8000689e:	f2 08 07 08 	ld.ub	r8,r9[r8]
800068a2:	10 9a       	mov	r10,r8
800068a4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800068a8:	49 08       	lddpc	r8,800068e8 <sd_mmc_mci_cmd_send_status+0x70>
800068aa:	70 08       	ld.w	r8,r8[0x0]
800068ac:	12 9b       	mov	r11,r9
800068ae:	10 9c       	mov	r12,r8
800068b0:	f0 1f 00 0f 	mcall	800068ec <sd_mmc_mci_cmd_send_status+0x74>

  if (mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800068b4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800068b8:	48 e8       	lddpc	r8,800068f0 <sd_mmc_mci_cmd_send_status+0x78>
800068ba:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800068be:	48 b8       	lddpc	r8,800068e8 <sd_mmc_mci_cmd_send_status+0x70>
800068c0:	70 08       	ld.w	r8,r8[0x0]
800068c2:	12 9a       	mov	r10,r9
800068c4:	e0 6b 10 4d 	mov	r11,4173
800068c8:	10 9c       	mov	r12,r8
800068ca:	f0 1f 00 0b 	mcall	800068f4 <sd_mmc_mci_cmd_send_status+0x7c>
800068ce:	18 98       	mov	r8,r12
800068d0:	58 08       	cp.w	r8,0
800068d2:	c0 30       	breq	800068d8 <sd_mmc_mci_cmd_send_status+0x60>
    return false;
800068d4:	30 08       	mov	r8,0
800068d6:	c0 28       	rjmp	800068da <sd_mmc_mci_cmd_send_status+0x62>

  return true;
800068d8:	30 18       	mov	r8,1
}
800068da:	10 9c       	mov	r12,r8
800068dc:	2f fd       	sub	sp,-4
800068de:	e3 cd 80 80 	ldm	sp++,r7,pc
800068e2:	00 00       	add	r0,r0
800068e4:	00 00       	add	r0,r0
800068e6:	09 bc       	ld.ub	r12,r4[0x3]
800068e8:	00 00       	add	r0,r0
800068ea:	00 14       	sub	r4,r0
800068ec:	80 00       	ld.sh	r0,r0[0x0]
800068ee:	7e 70       	ld.w	r0,pc[0x1c]
800068f0:	00 00       	add	r0,r0
800068f2:	07 ac       	ld.ub	r12,r3[0x2]
800068f4:	80 00       	ld.sh	r0,r0[0x0]
800068f6:	7c d8       	ld.w	r8,lr[0x34]

800068f8 <sd_mmc_mci_test_unit_ready>:
 */
//! @{


Ctrl_status sd_mmc_mci_test_unit_ready(uint8_t slot)
{
800068f8:	eb cd 40 80 	pushm	r7,lr
800068fc:	1a 97       	mov	r7,sp
800068fe:	20 1d       	sub	sp,4
80006900:	18 98       	mov	r8,r12
80006902:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS) return CTRL_FAIL;
80006906:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000690a:	30 18       	mov	r8,1
8000690c:	f0 09 18 00 	cp.b	r9,r8
80006910:	e0 88 00 04 	brls	80006918 <sd_mmc_mci_test_unit_ready+0x20>
80006914:	30 18       	mov	r8,1
80006916:	c4 d8       	rjmp	800069b0 <sd_mmc_mci_test_unit_ready+0xb8>

  Sd_mmc_mci_access_signal_on();
  switch (sd_mmc_mci_presence_status[slot])
80006918:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000691c:	4a 79       	lddpc	r9,800069b8 <sd_mmc_mci_test_unit_ready+0xc0>
8000691e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006922:	58 18       	cp.w	r8,1
80006924:	c1 d0       	breq	8000695e <sd_mmc_mci_test_unit_ready+0x66>
80006926:	58 28       	cp.w	r8,2
80006928:	c3 50       	breq	80006992 <sd_mmc_mci_test_unit_ready+0x9a>
8000692a:	58 08       	cp.w	r8,0
8000692c:	c3 b1       	brne	800069a2 <sd_mmc_mci_test_unit_ready+0xaa>
  {
    case SD_MMC_REMOVED:
      sd_mmc_mci_init_done[slot] = false;
8000692e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006932:	4a 3a       	lddpc	r10,800069bc <sd_mmc_mci_test_unit_ready+0xc4>
80006934:	30 08       	mov	r8,0
80006936:	f4 09 0b 08 	st.b	r10[r9],r8
      if (sd_mmc_mci_mem_check(slot))
8000693a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000693e:	10 9c       	mov	r12,r8
80006940:	f0 1f 00 20 	mcall	800069c0 <sd_mmc_mci_test_unit_ready+0xc8>
80006944:	18 98       	mov	r8,r12
80006946:	58 08       	cp.w	r8,0
80006948:	c0 90       	breq	8000695a <sd_mmc_mci_test_unit_ready+0x62>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_INSERTED;
8000694a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000694e:	49 ba       	lddpc	r10,800069b8 <sd_mmc_mci_test_unit_ready+0xc0>
80006950:	30 18       	mov	r8,1
80006952:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
80006956:	30 38       	mov	r8,3
80006958:	c2 c8       	rjmp	800069b0 <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
8000695a:	30 28       	mov	r8,2
8000695c:	c2 a8       	rjmp	800069b0 <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_INSERTED:
      if (!sd_mmc_mci_mem_check(slot))
8000695e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006962:	10 9c       	mov	r12,r8
80006964:	f0 1f 00 17 	mcall	800069c0 <sd_mmc_mci_test_unit_ready+0xc8>
80006968:	18 98       	mov	r8,r12
8000696a:	ec 18 00 01 	eorl	r8,0x1
8000696e:	5c 58       	castu.b	r8
80006970:	c0 f0       	breq	8000698e <sd_mmc_mci_test_unit_ready+0x96>
      {
        sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVING;
80006972:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006976:	49 1a       	lddpc	r10,800069b8 <sd_mmc_mci_test_unit_ready+0xc0>
80006978:	30 28       	mov	r8,2
8000697a:	f4 09 0b 08 	st.b	r10[r9],r8
        sd_mmc_mci_init_done[slot] = false;
8000697e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006982:	48 fa       	lddpc	r10,800069bc <sd_mmc_mci_test_unit_ready+0xc4>
80006984:	30 08       	mov	r8,0
80006986:	f4 09 0b 08 	st.b	r10[r9],r8
        Sd_mmc_mci_access_signal_off();
        return CTRL_BUSY;
8000698a:	30 38       	mov	r8,3
8000698c:	c1 28       	rjmp	800069b0 <sd_mmc_mci_test_unit_ready+0xb8>
      }
      Sd_mmc_mci_access_signal_off();
      return CTRL_GOOD;
8000698e:	30 08       	mov	r8,0
80006990:	c1 08       	rjmp	800069b0 <sd_mmc_mci_test_unit_ready+0xb8>

    case SD_MMC_REMOVING:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
80006992:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006996:	48 9a       	lddpc	r10,800069b8 <sd_mmc_mci_test_unit_ready+0xc0>
80006998:	30 08       	mov	r8,0
8000699a:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_NO_PRESENT;
8000699e:	30 28       	mov	r8,2
800069a0:	c0 88       	rjmp	800069b0 <sd_mmc_mci_test_unit_ready+0xb8>

    default:
      sd_mmc_mci_presence_status[slot] = SD_MMC_REMOVED;
800069a2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800069a6:	48 5a       	lddpc	r10,800069b8 <sd_mmc_mci_test_unit_ready+0xc0>
800069a8:	30 08       	mov	r8,0
800069aa:	f4 09 0b 08 	st.b	r10[r9],r8
      Sd_mmc_mci_access_signal_off();
      return CTRL_BUSY;
800069ae:	30 38       	mov	r8,3
  }
}
800069b0:	10 9c       	mov	r12,r8
800069b2:	2f fd       	sub	sp,-4
800069b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800069b8:	00 00       	add	r0,r0
800069ba:	00 18       	sub	r8,r0
800069bc:	00 00       	add	r0,r0
800069be:	04 c0       	st.b	r2++,r0
800069c0:	80 00       	ld.sh	r0,r0[0x0]
800069c2:	5d 14       	icall	r4

800069c4 <sd_mmc_mci_test_unit_ready_0>:


Ctrl_status sd_mmc_mci_test_unit_ready_0(void)
{
800069c4:	eb cd 40 80 	pushm	r7,lr
800069c8:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(0);
800069ca:	30 0c       	mov	r12,0
800069cc:	f0 1f 00 03 	mcall	800069d8 <sd_mmc_mci_test_unit_ready_0+0x14>
800069d0:	18 98       	mov	r8,r12
}
800069d2:	10 9c       	mov	r12,r8
800069d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800069d8:	80 00       	ld.sh	r0,r0[0x0]
800069da:	68 f8       	ld.w	r8,r4[0x3c]

800069dc <sd_mmc_mci_test_unit_ready_1>:


Ctrl_status sd_mmc_mci_test_unit_ready_1(void)
{
800069dc:	eb cd 40 80 	pushm	r7,lr
800069e0:	1a 97       	mov	r7,sp
   return sd_mmc_mci_test_unit_ready(1);
800069e2:	30 1c       	mov	r12,1
800069e4:	f0 1f 00 03 	mcall	800069f0 <sd_mmc_mci_test_unit_ready_1+0x14>
800069e8:	18 98       	mov	r8,r12
}
800069ea:	10 9c       	mov	r12,r8
800069ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800069f0:	80 00       	ld.sh	r0,r0[0x0]
800069f2:	68 f8       	ld.w	r8,r4[0x3c]

800069f4 <sd_mmc_mci_read_capacity>:


Ctrl_status sd_mmc_mci_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
800069f4:	eb cd 40 80 	pushm	r7,lr
800069f8:	1a 97       	mov	r7,sp
800069fa:	20 2d       	sub	sp,8
800069fc:	18 98       	mov	r8,r12
800069fe:	ef 4b ff f8 	st.w	r7[-8],r11
80006a02:	ef 68 ff fc 	st.b	r7[-4],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80006a06:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006a0a:	10 9c       	mov	r12,r8
80006a0c:	f0 1f 00 0c 	mcall	80006a3c <sd_mmc_mci_read_capacity+0x48>
80006a10:	18 98       	mov	r8,r12
80006a12:	ec 18 00 01 	eorl	r8,0x1
80006a16:	5c 58       	castu.b	r8
80006a18:	c0 30       	breq	80006a1e <sd_mmc_mci_read_capacity+0x2a>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80006a1a:	30 28       	mov	r8,2
80006a1c:	c0 c8       	rjmp	80006a34 <sd_mmc_mci_read_capacity+0x40>
   }
   *nb_sector = g_card_size[slot]-1;
80006a1e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006a22:	48 88       	lddpc	r8,80006a40 <sd_mmc_mci_read_capacity+0x4c>
80006a24:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006a28:	f0 c9 00 01 	sub	r9,r8,1
80006a2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a30:	91 09       	st.w	r8[0x0],r9
   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80006a32:	30 08       	mov	r8,0
}
80006a34:	10 9c       	mov	r12,r8
80006a36:	2f ed       	sub	sp,-8
80006a38:	e3 cd 80 80 	ldm	sp++,r7,pc
80006a3c:	80 00       	ld.sh	r0,r0[0x0]
80006a3e:	5d 14       	icall	r4
80006a40:	00 00       	add	r0,r0
80006a42:	07 b4       	ld.ub	r4,r3[0x3]

80006a44 <sd_mmc_mci_read_capacity_0>:


Ctrl_status sd_mmc_mci_read_capacity_0(uint32_t *nb_sector)
{
80006a44:	eb cd 40 80 	pushm	r7,lr
80006a48:	1a 97       	mov	r7,sp
80006a4a:	20 1d       	sub	sp,4
80006a4c:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(0, nb_sector);
80006a50:	ee fb ff fc 	ld.w	r11,r7[-4]
80006a54:	30 0c       	mov	r12,0
80006a56:	f0 1f 00 04 	mcall	80006a64 <sd_mmc_mci_read_capacity_0+0x20>
80006a5a:	18 98       	mov	r8,r12
}
80006a5c:	10 9c       	mov	r12,r8
80006a5e:	2f fd       	sub	sp,-4
80006a60:	e3 cd 80 80 	ldm	sp++,r7,pc
80006a64:	80 00       	ld.sh	r0,r0[0x0]
80006a66:	69 f4       	ld.w	r4,r4[0x7c]

80006a68 <sd_mmc_mci_read_capacity_1>:


Ctrl_status sd_mmc_mci_read_capacity_1(uint32_t *nb_sector)
{
80006a68:	eb cd 40 80 	pushm	r7,lr
80006a6c:	1a 97       	mov	r7,sp
80006a6e:	20 1d       	sub	sp,4
80006a70:	ef 4c ff fc 	st.w	r7[-4],r12
  return sd_mmc_mci_read_capacity(1, nb_sector);
80006a74:	ee fb ff fc 	ld.w	r11,r7[-4]
80006a78:	30 1c       	mov	r12,1
80006a7a:	f0 1f 00 04 	mcall	80006a88 <sd_mmc_mci_read_capacity_1+0x20>
80006a7e:	18 98       	mov	r8,r12
}
80006a80:	10 9c       	mov	r12,r8
80006a82:	2f fd       	sub	sp,-4
80006a84:	e3 cd 80 80 	ldm	sp++,r7,pc
80006a88:	80 00       	ld.sh	r0,r0[0x0]
80006a8a:	69 f4       	ld.w	r4,r4[0x7c]

80006a8c <sd_mmc_mci_wr_protect>:


bool sd_mmc_mci_wr_protect(uint8_t slot)
{
80006a8c:	eb cd 40 80 	pushm	r7,lr
80006a90:	1a 97       	mov	r7,sp
80006a92:	20 1d       	sub	sp,4
80006a94:	18 98       	mov	r8,r12
80006a96:	ef 68 ff fc 	st.b	r7[-4],r8
  return is_sd_mmc_mci_card_protected(slot);
80006a9a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006a9e:	10 9c       	mov	r12,r8
80006aa0:	f0 1f 00 04 	mcall	80006ab0 <sd_mmc_mci_wr_protect+0x24>
80006aa4:	18 98       	mov	r8,r12
}
80006aa6:	10 9c       	mov	r12,r8
80006aa8:	2f fd       	sub	sp,-4
80006aaa:	e3 cd 80 80 	ldm	sp++,r7,pc
80006aae:	00 00       	add	r0,r0
80006ab0:	80 00       	ld.sh	r0,r0[0x0]
80006ab2:	4c b8       	lddpc	r8,80006bdc <sd_mmc_mci_usb_read_10_0+0x8>

80006ab4 <sd_mmc_mci_wr_protect_0>:


bool sd_mmc_mci_wr_protect_0(void)
{
80006ab4:	eb cd 40 80 	pushm	r7,lr
80006ab8:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(0);
80006aba:	30 0c       	mov	r12,0
80006abc:	f0 1f 00 03 	mcall	80006ac8 <sd_mmc_mci_wr_protect_0+0x14>
80006ac0:	18 98       	mov	r8,r12
}
80006ac2:	10 9c       	mov	r12,r8
80006ac4:	e3 cd 80 80 	ldm	sp++,r7,pc
80006ac8:	80 00       	ld.sh	r0,r0[0x0]
80006aca:	6a 8c       	ld.w	r12,r5[0x20]

80006acc <sd_mmc_mci_wr_protect_1>:


bool sd_mmc_mci_wr_protect_1(void)
{
80006acc:	eb cd 40 80 	pushm	r7,lr
80006ad0:	1a 97       	mov	r7,sp
  return sd_mmc_mci_wr_protect(1);
80006ad2:	30 1c       	mov	r12,1
80006ad4:	f0 1f 00 03 	mcall	80006ae0 <sd_mmc_mci_wr_protect_1+0x14>
80006ad8:	18 98       	mov	r8,r12
}
80006ada:	10 9c       	mov	r12,r8
80006adc:	e3 cd 80 80 	ldm	sp++,r7,pc
80006ae0:	80 00       	ld.sh	r0,r0[0x0]
80006ae2:	6a 8c       	ld.w	r12,r5[0x20]

80006ae4 <sd_mmc_mci_removal>:


bool sd_mmc_mci_removal(uint8_t slot)
{
80006ae4:	eb cd 40 80 	pushm	r7,lr
80006ae8:	1a 97       	mov	r7,sp
80006aea:	20 1d       	sub	sp,4
80006aec:	18 98       	mov	r8,r12
80006aee:	ef 68 ff fc 	st.b	r7[-4],r8
  return false;
80006af2:	30 08       	mov	r8,0
}
80006af4:	10 9c       	mov	r12,r8
80006af6:	2f fd       	sub	sp,-4
80006af8:	e3 cd 80 80 	ldm	sp++,r7,pc

80006afc <sd_mmc_mci_removal_0>:


bool sd_mmc_mci_removal_0(void)
{
80006afc:	eb cd 40 80 	pushm	r7,lr
80006b00:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(0);
80006b02:	30 0c       	mov	r12,0
80006b04:	f0 1f 00 03 	mcall	80006b10 <sd_mmc_mci_removal_0+0x14>
80006b08:	18 98       	mov	r8,r12
}
80006b0a:	10 9c       	mov	r12,r8
80006b0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006b10:	80 00       	ld.sh	r0,r0[0x0]
80006b12:	6a e4       	ld.w	r4,r5[0x38]

80006b14 <sd_mmc_mci_removal_1>:


bool sd_mmc_mci_removal_1(void)
{
80006b14:	eb cd 40 80 	pushm	r7,lr
80006b18:	1a 97       	mov	r7,sp
  return sd_mmc_mci_removal(1);
80006b1a:	30 1c       	mov	r12,1
80006b1c:	f0 1f 00 03 	mcall	80006b28 <sd_mmc_mci_removal_1+0x14>
80006b20:	18 98       	mov	r8,r12
}
80006b22:	10 9c       	mov	r12,r8
80006b24:	e3 cd 80 80 	ldm	sp++,r7,pc
80006b28:	80 00       	ld.sh	r0,r0[0x0]
80006b2a:	6a e4       	ld.w	r4,r5[0x38]

80006b2c <sd_mmc_mci_usb_read_10>:
 */
//! @{


Ctrl_status sd_mmc_mci_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
80006b2c:	eb cd 40 80 	pushm	r7,lr
80006b30:	1a 97       	mov	r7,sp
80006b32:	20 3d       	sub	sp,12
80006b34:	18 99       	mov	r9,r12
80006b36:	ef 4b ff f8 	st.w	r7[-8],r11
80006b3a:	14 98       	mov	r8,r10
80006b3c:	ef 69 ff fc 	st.b	r7[-4],r9
80006b40:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80006b44:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006b48:	10 9c       	mov	r12,r8
80006b4a:	f0 1f 00 1f 	mcall	80006bc4 <sd_mmc_mci_usb_read_10+0x98>
80006b4e:	18 98       	mov	r8,r12
80006b50:	ec 18 00 01 	eorl	r8,0x1
80006b54:	5c 58       	castu.b	r8
80006b56:	c0 30       	breq	80006b5c <sd_mmc_mci_usb_read_10+0x30>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80006b58:	30 28       	mov	r8,2
80006b5a:	c3 08       	rjmp	80006bba <sd_mmc_mci_usb_read_10+0x8e>
   }

   if( !sd_mmc_mci_dma_read_open(slot, addr, NULL, nb_sector) )
80006b5c:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80006b60:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006b64:	30 0a       	mov	r10,0
80006b66:	ee fb ff f8 	ld.w	r11,r7[-8]
80006b6a:	10 9c       	mov	r12,r8
80006b6c:	f0 1f 00 17 	mcall	80006bc8 <sd_mmc_mci_usb_read_10+0x9c>
80006b70:	18 98       	mov	r8,r12
80006b72:	ec 18 00 01 	eorl	r8,0x1
80006b76:	5c 58       	castu.b	r8
80006b78:	c0 30       	breq	80006b7e <sd_mmc_mci_usb_read_10+0x52>
     return CTRL_FAIL;
80006b7a:	30 18       	mov	r8,1
80006b7c:	c1 f8       	rjmp	80006bba <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_multiple_sector(slot, nb_sector, addr) )
80006b7e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80006b82:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006b86:	ee fa ff f8 	ld.w	r10,r7[-8]
80006b8a:	12 9b       	mov	r11,r9
80006b8c:	10 9c       	mov	r12,r8
80006b8e:	f0 1f 00 10 	mcall	80006bcc <sd_mmc_mci_usb_read_10+0xa0>
80006b92:	18 98       	mov	r8,r12
80006b94:	ec 18 00 01 	eorl	r8,0x1
80006b98:	5c 58       	castu.b	r8
80006b9a:	c0 30       	breq	80006ba0 <sd_mmc_mci_usb_read_10+0x74>
     return CTRL_FAIL;
80006b9c:	30 18       	mov	r8,1
80006b9e:	c0 e8       	rjmp	80006bba <sd_mmc_mci_usb_read_10+0x8e>

   if( !sd_mmc_mci_read_close(slot) )
80006ba0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006ba4:	10 9c       	mov	r12,r8
80006ba6:	f0 1f 00 0b 	mcall	80006bd0 <sd_mmc_mci_usb_read_10+0xa4>
80006baa:	18 98       	mov	r8,r12
80006bac:	ec 18 00 01 	eorl	r8,0x1
80006bb0:	5c 58       	castu.b	r8
80006bb2:	c0 30       	breq	80006bb8 <sd_mmc_mci_usb_read_10+0x8c>
     return CTRL_FAIL;
80006bb4:	30 18       	mov	r8,1
80006bb6:	c0 28       	rjmp	80006bba <sd_mmc_mci_usb_read_10+0x8e>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80006bb8:	30 08       	mov	r8,0
}
80006bba:	10 9c       	mov	r12,r8
80006bbc:	2f dd       	sub	sp,-12
80006bbe:	e3 cd 80 80 	ldm	sp++,r7,pc
80006bc2:	00 00       	add	r0,r0
80006bc4:	80 00       	ld.sh	r0,r0[0x0]
80006bc6:	5d 14       	icall	r4
80006bc8:	80 00       	ld.sh	r0,r0[0x0]
80006bca:	5d f4       	*unknown*
80006bcc:	80 00       	ld.sh	r0,r0[0x0]
80006bce:	63 e8       	ld.w	r8,r1[0x78]
80006bd0:	80 00       	ld.sh	r0,r0[0x0]
80006bd2:	5f 88       	srls	r8

80006bd4 <sd_mmc_mci_usb_read_10_0>:


Ctrl_status sd_mmc_mci_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
80006bd4:	eb cd 40 80 	pushm	r7,lr
80006bd8:	1a 97       	mov	r7,sp
80006bda:	20 2d       	sub	sp,8
80006bdc:	ef 4c ff fc 	st.w	r7[-4],r12
80006be0:	16 98       	mov	r8,r11
80006be2:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(0, addr, nb_sector);
80006be6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80006bea:	10 9a       	mov	r10,r8
80006bec:	ee fb ff fc 	ld.w	r11,r7[-4]
80006bf0:	30 0c       	mov	r12,0
80006bf2:	f0 1f 00 04 	mcall	80006c00 <sd_mmc_mci_usb_read_10_0+0x2c>
80006bf6:	18 98       	mov	r8,r12
}
80006bf8:	10 9c       	mov	r12,r8
80006bfa:	2f ed       	sub	sp,-8
80006bfc:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c00:	80 00       	ld.sh	r0,r0[0x0]
80006c02:	6b 2c       	ld.w	r12,r5[0x48]

80006c04 <sd_mmc_mci_usb_read_10_1>:


Ctrl_status sd_mmc_mci_usb_read_10_1(uint32_t addr, uint16_t nb_sector)
{
80006c04:	eb cd 40 80 	pushm	r7,lr
80006c08:	1a 97       	mov	r7,sp
80006c0a:	20 2d       	sub	sp,8
80006c0c:	ef 4c ff fc 	st.w	r7[-4],r12
80006c10:	16 98       	mov	r8,r11
80006c12:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_read_10(1, addr, nb_sector);
80006c16:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80006c1a:	10 9a       	mov	r10,r8
80006c1c:	ee fb ff fc 	ld.w	r11,r7[-4]
80006c20:	30 1c       	mov	r12,1
80006c22:	f0 1f 00 04 	mcall	80006c30 <sd_mmc_mci_usb_read_10_1+0x2c>
80006c26:	18 98       	mov	r8,r12
}
80006c28:	10 9c       	mov	r12,r8
80006c2a:	2f ed       	sub	sp,-8
80006c2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c30:	80 00       	ld.sh	r0,r0[0x0]
80006c32:	6b 2c       	ld.w	r12,r5[0x48]

80006c34 <sd_mmc_mci_usb_write_10>:
#endif
}


Ctrl_status sd_mmc_mci_usb_write_10(uint8_t slot,uint32_t addr, uint16_t nb_sector)
{
80006c34:	eb cd 40 80 	pushm	r7,lr
80006c38:	1a 97       	mov	r7,sp
80006c3a:	20 3d       	sub	sp,12
80006c3c:	18 99       	mov	r9,r12
80006c3e:	ef 4b ff f8 	st.w	r7[-8],r11
80006c42:	14 98       	mov	r8,r10
80006c44:	ef 69 ff fc 	st.b	r7[-4],r9
80006c48:	ef 58 ff f4 	st.h	r7[-12],r8
   Sd_mmc_mci_access_signal_on();

   if( !sd_mmc_mci_mem_check(slot) )
80006c4c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006c50:	10 9c       	mov	r12,r8
80006c52:	f0 1f 00 1f 	mcall	80006ccc <sd_mmc_mci_usb_write_10+0x98>
80006c56:	18 98       	mov	r8,r12
80006c58:	ec 18 00 01 	eorl	r8,0x1
80006c5c:	5c 58       	castu.b	r8
80006c5e:	c0 30       	breq	80006c64 <sd_mmc_mci_usb_write_10+0x30>
   {
     Sd_mmc_mci_access_signal_off();
     return CTRL_NO_PRESENT;
80006c60:	30 28       	mov	r8,2
80006c62:	c3 08       	rjmp	80006cc2 <sd_mmc_mci_usb_write_10+0x8e>
   }

   if( !sd_mmc_mci_dma_write_open(slot, addr, NULL, nb_sector) )
80006c64:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80006c68:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006c6c:	30 0a       	mov	r10,0
80006c6e:	ee fb ff f8 	ld.w	r11,r7[-8]
80006c72:	10 9c       	mov	r12,r8
80006c74:	f0 1f 00 17 	mcall	80006cd0 <sd_mmc_mci_usb_write_10+0x9c>
80006c78:	18 98       	mov	r8,r12
80006c7a:	ec 18 00 01 	eorl	r8,0x1
80006c7e:	5c 58       	castu.b	r8
80006c80:	c0 30       	breq	80006c86 <sd_mmc_mci_usb_write_10+0x52>
     return CTRL_FAIL;
80006c82:	30 18       	mov	r8,1
80006c84:	c1 f8       	rjmp	80006cc2 <sd_mmc_mci_usb_write_10+0x8e>

   if( !sd_mmc_mci_write_multiple_sector(slot, nb_sector, addr) )
80006c86:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80006c8a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006c8e:	ee fa ff f8 	ld.w	r10,r7[-8]
80006c92:	12 9b       	mov	r11,r9
80006c94:	10 9c       	mov	r12,r8
80006c96:	f0 1f 00 10 	mcall	80006cd4 <sd_mmc_mci_usb_write_10+0xa0>
80006c9a:	18 98       	mov	r8,r12
80006c9c:	ec 18 00 01 	eorl	r8,0x1
80006ca0:	5c 58       	castu.b	r8
80006ca2:	c0 30       	breq	80006ca8 <sd_mmc_mci_usb_write_10+0x74>
     return CTRL_FAIL;
80006ca4:	30 18       	mov	r8,1
80006ca6:	c0 e8       	rjmp	80006cc2 <sd_mmc_mci_usb_write_10+0x8e>

   if( !sd_mmc_mci_write_close(slot) )
80006ca8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006cac:	10 9c       	mov	r12,r8
80006cae:	f0 1f 00 0b 	mcall	80006cd8 <sd_mmc_mci_usb_write_10+0xa4>
80006cb2:	18 98       	mov	r8,r12
80006cb4:	ec 18 00 01 	eorl	r8,0x1
80006cb8:	5c 58       	castu.b	r8
80006cba:	c0 30       	breq	80006cc0 <sd_mmc_mci_usb_write_10+0x8c>
     return CTRL_FAIL;
80006cbc:	30 18       	mov	r8,1
80006cbe:	c0 28       	rjmp	80006cc2 <sd_mmc_mci_usb_write_10+0x8e>

   Sd_mmc_mci_access_signal_off();
   return CTRL_GOOD;
80006cc0:	30 08       	mov	r8,0

}
80006cc2:	10 9c       	mov	r12,r8
80006cc4:	2f dd       	sub	sp,-12
80006cc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80006cca:	00 00       	add	r0,r0
80006ccc:	80 00       	ld.sh	r0,r0[0x0]
80006cce:	5d 14       	icall	r4
80006cd0:	80 00       	ld.sh	r0,r0[0x0]
80006cd2:	60 24       	ld.w	r4,r0[0x8]
80006cd4:	80 00       	ld.sh	r0,r0[0x0]
80006cd6:	66 30       	ld.w	r0,r3[0xc]
80006cd8:	80 00       	ld.sh	r0,r0[0x0]
80006cda:	61 90       	ld.w	r0,r0[0x64]

80006cdc <sd_mmc_mci_usb_write_10_0>:


Ctrl_status sd_mmc_mci_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
80006cdc:	eb cd 40 80 	pushm	r7,lr
80006ce0:	1a 97       	mov	r7,sp
80006ce2:	20 2d       	sub	sp,8
80006ce4:	ef 4c ff fc 	st.w	r7[-4],r12
80006ce8:	16 98       	mov	r8,r11
80006cea:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_write_10(0, addr, nb_sector);
80006cee:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80006cf2:	10 9a       	mov	r10,r8
80006cf4:	ee fb ff fc 	ld.w	r11,r7[-4]
80006cf8:	30 0c       	mov	r12,0
80006cfa:	f0 1f 00 04 	mcall	80006d08 <sd_mmc_mci_usb_write_10_0+0x2c>
80006cfe:	18 98       	mov	r8,r12
}
80006d00:	10 9c       	mov	r12,r8
80006d02:	2f ed       	sub	sp,-8
80006d04:	e3 cd 80 80 	ldm	sp++,r7,pc
80006d08:	80 00       	ld.sh	r0,r0[0x0]
80006d0a:	6c 34       	ld.w	r4,r6[0xc]

80006d0c <sd_mmc_mci_usb_write_10_1>:


Ctrl_status sd_mmc_mci_usb_write_10_1(uint32_t addr, uint16_t nb_sector)
{
80006d0c:	eb cd 40 80 	pushm	r7,lr
80006d10:	1a 97       	mov	r7,sp
80006d12:	20 2d       	sub	sp,8
80006d14:	ef 4c ff fc 	st.w	r7[-4],r12
80006d18:	16 98       	mov	r8,r11
80006d1a:	ef 58 ff f8 	st.h	r7[-8],r8
  return sd_mmc_mci_usb_write_10(1, addr, nb_sector);
80006d1e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80006d22:	10 9a       	mov	r10,r8
80006d24:	ee fb ff fc 	ld.w	r11,r7[-4]
80006d28:	30 1c       	mov	r12,1
80006d2a:	f0 1f 00 04 	mcall	80006d38 <sd_mmc_mci_usb_write_10_1+0x2c>
80006d2e:	18 98       	mov	r8,r12
}
80006d30:	10 9c       	mov	r12,r8
80006d32:	2f ed       	sub	sp,-8
80006d34:	e3 cd 80 80 	ldm	sp++,r7,pc
80006d38:	80 00       	ld.sh	r0,r0[0x0]
80006d3a:	6c 34       	ld.w	r4,r6[0xc]

80006d3c <aes_configure>:




void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
80006d3c:	eb cd 40 80 	pushm	r7,lr
80006d40:	1a 97       	mov	r7,sp
80006d42:	20 2d       	sub	sp,8
80006d44:	ef 4c ff fc 	st.w	r7[-4],r12
80006d48:	ef 4b ff f8 	st.w	r7[-8],r11
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
80006d4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d50:	11 88       	ld.ub	r8,r8[0x0]
80006d52:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
            ((pAesConfig->ProcessingDelay << AVR32_AES_MR_PROCDLY_OFFSET) & AVR32_AES_MR_PROCDLY_MASK) |
80006d56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d5a:	11 98       	ld.ub	r8,r8[0x1]
80006d5c:	a5 68       	lsl	r8,0x4
80006d5e:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80006d62:	10 49       	or	r9,r8
            ((pAesConfig->StartMode << AVR32_AES_MR_SMOD_OFFSET) & AVR32_AES_MR_SMOD_MASK) |
80006d64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d68:	11 a8       	ld.ub	r8,r8[0x2]
80006d6a:	a9 68       	lsl	r8,0x8
80006d6c:	e2 18 03 00 	andl	r8,0x300,COH
80006d70:	10 49       	or	r9,r8
            ((pAesConfig->KeySize << AVR32_AES_MR_KEYSIZE_OFFSET) & AVR32_AES_MR_KEYSIZE_MASK) |
80006d72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d76:	11 b8       	ld.ub	r8,r8[0x3]
80006d78:	ab 68       	lsl	r8,0xa
80006d7a:	e2 18 0c 00 	andl	r8,0xc00,COH
80006d7e:	10 49       	or	r9,r8
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
80006d80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d84:	11 c8       	ld.ub	r8,r8[0x4]
80006d86:	ad 68       	lsl	r8,0xc
80006d88:	e2 18 70 00 	andl	r8,0x7000,COH
80006d8c:	10 49       	or	r9,r8
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
80006d8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d92:	11 d8       	ld.ub	r8,r8[0x5]
80006d94:	af 78       	lsl	r8,0xf
80006d96:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80006d9a:	10 49       	or	r9,r8
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
80006d9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006da0:	11 e8       	ld.ub	r8,r8[0x6]
80006da2:	b1 68       	lsl	r8,0x10
80006da4:	e6 18 00 07 	andh	r8,0x7,COH
80006da8:	10 49       	or	r9,r8
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
80006daa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006dae:	11 f8       	ld.ub	r8,r8[0x7]
80006db0:	b9 68       	lsl	r8,0x18
80006db2:	e6 18 1f 00 	andh	r8,0x1f00,COH
80006db6:	f3 e8 10 08 	or	r8,r9,r8



void aes_configure( volatile avr32_aes_t *aes, const aes_config_t *pAesConfig )
{
  aes->mr = ((pAesConfig->ProcessingMode << AVR32_AES_MR_CIPHER_OFFSET) & AVR32_AES_MR_CIPHER_MASK) |
80006dba:	ea 18 00 e0 	orh	r8,0xe0
80006dbe:	10 99       	mov	r9,r8
80006dc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006dc4:	91 19       	st.w	r8[0x4],r9
            ((pAesConfig->OpMode << AVR32_AES_MR_OPMOD_OFFSET) & AVR32_AES_MR_OPMOD_MASK) |
            ((pAesConfig->LodMode << AVR32_AES_MR_LOD_OFFSET) & AVR32_AES_MR_LOD_MASK) |
            ((pAesConfig->CFBSize << AVR32_AES_MR_CFBS_OFFSET) & AVR32_AES_MR_CFBS_MASK) |
            ((pAesConfig->CounterMeasureMask << AVR32_AES_MR_CTYPE_OFFSET) & AVR32_AES_MR_CTYPE_MASK) |
            ((AES_CKEY << AVR32_AES_MR_CKEY_OFFSET) & AVR32_AES_MR_CKEY_MASK);
}
80006dc6:	2f ed       	sub	sp,-8
80006dc8:	e3 cd 80 80 	ldm	sp++,r7,pc

80006dcc <aes_set_key>:
  return(aes->isr);
}


void aes_set_key( volatile avr32_aes_t *aes, const unsigned long int *pKey)
{
80006dcc:	eb cd 40 80 	pushm	r7,lr
80006dd0:	1a 97       	mov	r7,sp
80006dd2:	20 4d       	sub	sp,16
80006dd4:	ef 4c ff f4 	st.w	r7[-12],r12
80006dd8:	ef 4b ff f0 	st.w	r7[-16],r11
  unsigned long int volatile *pTempo = &(aes->keyw1r);
80006ddc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006de0:	2e 08       	sub	r8,-32
80006de2:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char       keylen = 0;
80006de6:	30 08       	mov	r8,0
80006de8:	ef 68 ff ff 	st.b	r7[-1],r8


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
80006dec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006df0:	70 18       	ld.w	r8,r8[0x4]
80006df2:	e2 18 0c 00 	andl	r8,0xc00,COH
80006df6:	ab 88       	lsr	r8,0xa
80006df8:	58 18       	cp.w	r8,1
80006dfa:	c0 90       	breq	80006e0c <aes_set_key+0x40>
80006dfc:	c0 43       	brcs	80006e04 <aes_set_key+0x38>
80006dfe:	58 28       	cp.w	r8,2
80006e00:	c0 a0       	breq	80006e14 <aes_set_key+0x48>
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
80006e02:	c2 38       	rjmp	80006e48 <aes_set_key+0x7c>


  switch((aes->mr & AVR32_AES_MR_KEYSIZE_MASK) >> AVR32_AES_MR_KEYSIZE_OFFSET)
  {
    case 0: // 128bit cryptographic key
      keylen = 4;
80006e04:	30 48       	mov	r8,4
80006e06:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
80006e0a:	c0 98       	rjmp	80006e1c <aes_set_key+0x50>
    case 1: // 192bit cryptographic key
      keylen = 6;
80006e0c:	30 68       	mov	r8,6
80006e0e:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
80006e12:	c0 58       	rjmp	80006e1c <aes_set_key+0x50>
    case 2: // 256bit cryptographic key
      keylen = 8;
80006e14:	30 88       	mov	r8,8
80006e16:	ef 68 ff ff 	st.b	r7[-1],r8
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
80006e1a:	c1 78       	rjmp	80006e48 <aes_set_key+0x7c>
80006e1c:	c1 68       	rjmp	80006e48 <aes_set_key+0x7c>
    *pTempo++ = *pKey++;
80006e1e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e22:	70 09       	ld.w	r9,r8[0x0]
80006e24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e28:	91 09       	st.w	r8[0x0],r9
80006e2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e2e:	2f c8       	sub	r8,-4
80006e30:	ef 48 ff f8 	st.w	r7[-8],r8
80006e34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e38:	2f c8       	sub	r8,-4
80006e3a:	ef 48 ff f0 	st.w	r7[-16],r8
      keylen = 8;
      break;
    default:
      break;
  }
  for( ; keylen > 0; keylen--)
80006e3e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006e42:	20 18       	sub	r8,1
80006e44:	ef 68 ff ff 	st.b	r7[-1],r8
80006e48:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006e4c:	30 08       	mov	r8,0
80006e4e:	f0 09 18 00 	cp.b	r9,r8
80006e52:	ce 61       	brne	80006e1e <aes_set_key+0x52>
    *pTempo++ = *pKey++;
}
80006e54:	2f cd       	sub	sp,-16
80006e56:	e3 cd 80 80 	ldm	sp++,r7,pc

80006e5a <aes_set_initvector>:


void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
80006e5a:	eb cd 40 80 	pushm	r7,lr
80006e5e:	1a 97       	mov	r7,sp
80006e60:	20 4d       	sub	sp,16
80006e62:	ef 4c ff f4 	st.w	r7[-12],r12
80006e66:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->iv1r);
80006e6a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006e6e:	2a 08       	sub	r8,-96
80006e70:	ef 48 ff f8 	st.w	r7[-8],r8
  int i;

  for(i=0; i<4; i++)
80006e74:	30 08       	mov	r8,0
80006e76:	ef 48 ff fc 	st.w	r7[-4],r8
80006e7a:	c1 68       	rjmp	80006ea6 <aes_set_initvector+0x4c>
    *pTempo++ = *pVector++;
80006e7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e80:	70 09       	ld.w	r9,r8[0x0]
80006e82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e86:	91 09       	st.w	r8[0x0],r9
80006e88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e8c:	2f c8       	sub	r8,-4
80006e8e:	ef 48 ff f8 	st.w	r7[-8],r8
80006e92:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006e96:	2f c8       	sub	r8,-4
80006e98:	ef 48 ff f0 	st.w	r7[-16],r8
void aes_set_initvector( volatile avr32_aes_t *aes, const uint32_t *pVector)
{
  volatile uint32_t *pTempo = &(aes->iv1r);
  int i;

  for(i=0; i<4; i++)
80006e9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006ea0:	2f f8       	sub	r8,-1
80006ea2:	ef 48 ff fc 	st.w	r7[-4],r8
80006ea6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006eaa:	58 38       	cp.w	r8,3
80006eac:	fe 9a ff e8 	brle	80006e7c <aes_set_initvector+0x22>
    *pTempo++ = *pVector++;
}
80006eb0:	2f cd       	sub	sp,-16
80006eb2:	e3 cd 80 80 	ldm	sp++,r7,pc

80006eb6 <aes_write_inputdata>:


void aes_write_inputdata( volatile avr32_aes_t *aes, uint32_t *pIn)
{
80006eb6:	eb cd 40 80 	pushm	r7,lr
80006eba:	1a 97       	mov	r7,sp
80006ebc:	20 4d       	sub	sp,16
80006ebe:	ef 4c ff f4 	st.w	r7[-12],r12
80006ec2:	ef 4b ff f0 	st.w	r7[-16],r11
  volatile uint32_t *pTempo = &(aes->idata1r);
80006ec6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006eca:	2c 08       	sub	r8,-64
80006ecc:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char inlen = 4;
80006ed0:	30 48       	mov	r8,4
80006ed2:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
80006ed6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006eda:	70 18       	ld.w	r8,r8[0x4]
80006edc:	e2 18 70 00 	andl	r8,0x7000,COH
80006ee0:	ad 88       	lsr	r8,0xc
80006ee2:	58 38       	cp.w	r8,3
80006ee4:	c2 c1       	brne	80006f3c <aes_write_inputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
80006ee6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006eea:	70 18       	ld.w	r8,r8[0x4]
80006eec:	e6 18 00 07 	andh	r8,0x7,COH
80006ef0:	b1 88       	lsr	r8,0x10
80006ef2:	58 18       	cp.w	r8,1
80006ef4:	c0 60       	breq	80006f00 <aes_write_inputdata+0x4a>
80006ef6:	c2 33       	brcs	80006f3c <aes_write_inputdata+0x86>
80006ef8:	58 48       	cp.w	r8,4
80006efa:	e0 8b 00 21 	brhi	80006f3c <aes_write_inputdata+0x86>
80006efe:	c0 68       	rjmp	80006f0a <aes_write_inputdata+0x54>
    {
      case 1: // 64bit CFB data size
        inlen = 2;
80006f00:	30 28       	mov	r8,2
80006f02:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
80006f06:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
80006f08:	c1 a8       	rjmp	80006f3c <aes_write_inputdata+0x86>
        inlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        inlen = 1;
80006f0a:	30 18       	mov	r8,1
80006f0c:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
80006f10:	c1 68       	rjmp	80006f3c <aes_write_inputdata+0x86>
    *pTempo++ = *pIn++;
80006f12:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006f16:	70 09       	ld.w	r9,r8[0x0]
80006f18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006f1c:	91 09       	st.w	r8[0x0],r9
80006f1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006f22:	2f c8       	sub	r8,-4
80006f24:	ef 48 ff f8 	st.w	r7[-8],r8
80006f28:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006f2c:	2f c8       	sub	r8,-4
80006f2e:	ef 48 ff f0 	st.w	r7[-16],r8
        break;
      default:
        break;
    }
  }
  for(; inlen > 0; inlen--)
80006f32:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006f36:	20 18       	sub	r8,1
80006f38:	ef 68 ff ff 	st.b	r7[-1],r8
80006f3c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006f40:	30 08       	mov	r8,0
80006f42:	f0 09 18 00 	cp.b	r9,r8
80006f46:	ce 61       	brne	80006f12 <aes_write_inputdata+0x5c>
    *pTempo++ = *pIn++;
}
80006f48:	2f cd       	sub	sp,-16
80006f4a:	e3 cd 80 80 	ldm	sp++,r7,pc

80006f4e <aes_read_outputdata>:


void aes_read_outputdata( volatile avr32_aes_t *aes, uint32_t *pOut)
{
80006f4e:	eb cd 40 80 	pushm	r7,lr
80006f52:	1a 97       	mov	r7,sp
80006f54:	20 4d       	sub	sp,16
80006f56:	ef 4c ff f4 	st.w	r7[-12],r12
80006f5a:	ef 4b ff f0 	st.w	r7[-16],r11
  const volatile uint32_t *pTempo = &(aes->odata1r);
80006f5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006f62:	2b 08       	sub	r8,-80
80006f64:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned char outlen = 4;
80006f68:	30 48       	mov	r8,4
80006f6a:	ef 68 ff ff 	st.b	r7[-1],r8


  if(AES_CFB_MODE == ((aes->mr & AVR32_AES_MR_OPMOD_MASK) >> AVR32_AES_MR_OPMOD_OFFSET))
80006f6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006f72:	70 18       	ld.w	r8,r8[0x4]
80006f74:	e2 18 70 00 	andl	r8,0x7000,COH
80006f78:	ad 88       	lsr	r8,0xc
80006f7a:	58 38       	cp.w	r8,3
80006f7c:	c2 c1       	brne	80006fd4 <aes_read_outputdata+0x86>
  {
    switch((aes->mr & AVR32_AES_MR_CFBS_MASK) >> AVR32_AES_MR_CFBS_OFFSET)
80006f7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006f82:	70 18       	ld.w	r8,r8[0x4]
80006f84:	e6 18 00 07 	andh	r8,0x7,COH
80006f88:	b1 88       	lsr	r8,0x10
80006f8a:	58 18       	cp.w	r8,1
80006f8c:	c0 60       	breq	80006f98 <aes_read_outputdata+0x4a>
80006f8e:	c2 33       	brcs	80006fd4 <aes_read_outputdata+0x86>
80006f90:	58 48       	cp.w	r8,4
80006f92:	e0 8b 00 21 	brhi	80006fd4 <aes_read_outputdata+0x86>
80006f96:	c0 68       	rjmp	80006fa2 <aes_read_outputdata+0x54>
    {
      case 1: // 64bit CFB data size
        outlen = 2;
80006f98:	30 28       	mov	r8,2
80006f9a:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
80006f9e:	d7 03       	nop
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80006fa0:	c1 a8       	rjmp	80006fd4 <aes_read_outputdata+0x86>
        outlen = 2;
        break;
      case 2: // 32bit CFB data size
      case 3: // 16bit CFB data size
      case 4: // 8bit CFB data size
        outlen = 1;
80006fa2:	30 18       	mov	r8,1
80006fa4:	ef 68 ff ff 	st.b	r7[-1],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80006fa8:	c1 68       	rjmp	80006fd4 <aes_read_outputdata+0x86>
    *pOut++ = *pTempo++;
80006faa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006fae:	70 09       	ld.w	r9,r8[0x0]
80006fb0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006fb4:	91 09       	st.w	r8[0x0],r9
80006fb6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006fba:	2f c8       	sub	r8,-4
80006fbc:	ef 48 ff f0 	st.w	r7[-16],r8
80006fc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006fc4:	2f c8       	sub	r8,-4
80006fc6:	ef 48 ff f8 	st.w	r7[-8],r8
        break;
      default:
        break;
    }
  }
  for(; outlen > 0; outlen--)
80006fca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006fce:	20 18       	sub	r8,1
80006fd0:	ef 68 ff ff 	st.b	r7[-1],r8
80006fd4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006fd8:	30 08       	mov	r8,0
80006fda:	f0 09 18 00 	cp.b	r9,r8
80006fde:	ce 61       	brne	80006faa <aes_read_outputdata+0x5c>
    *pOut++ = *pTempo++;
}
80006fe0:	2f cd       	sub	sp,-16
80006fe2:	e3 cd 80 80 	ldm	sp++,r7,pc
80006fe6:	d7 03       	nop

80006fe8 <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
80006fe8:	eb cd 40 80 	pushm	r7,lr
80006fec:	1a 97       	mov	r7,sp
80006fee:	20 cd       	sub	sp,48
80006ff0:	ef 4c ff d0 	st.w	r7[-48],r12
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80006ff4:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006ff8:	ee 7a 42 3f 	mov	r10,999999
80006ffc:	f0 0a 00 09 	add	r9,r8,r10
80007000:	e0 68 de 83 	mov	r8,56963
80007004:	ea 18 43 1b 	orh	r8,0x431b
80007008:	f2 08 06 48 	mulu.d	r8,r9,r8
8000700c:	f2 08 16 12 	lsr	r8,r9,0x12
80007010:	ef 48 ff d4 	st.w	r7[-44],r8
//! Whether to use the NCS0 pin
#ifdef SMC_USE_NCS0
  #include SMC_COMPONENT_CS0

  // Setup SMC for NCS0
  SMC_CS_SETUP(0)
80007014:	ee f9 ff d4 	ld.w	r9,r7[-44]
80007018:	12 98       	mov	r8,r9
8000701a:	a3 68       	lsl	r8,0x2
8000701c:	12 08       	add	r8,r9
8000701e:	a3 68       	lsl	r8,0x2
80007020:	f0 c9 fc 19 	sub	r9,r8,-999
80007024:	e0 68 4d d3 	mov	r8,19923
80007028:	ea 18 10 62 	orh	r8,0x1062
8000702c:	f2 08 06 48 	mulu.d	r8,r9,r8
80007030:	f2 08 16 06 	lsr	r8,r9,0x6
80007034:	ef 48 ff d8 	st.w	r7[-40],r8
80007038:	30 08       	mov	r8,0
8000703a:	ef 48 ff dc 	st.w	r7[-36],r8
8000703e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80007042:	12 98       	mov	r8,r9
80007044:	a5 68       	lsl	r8,0x4
80007046:	12 18       	sub	r8,r9
80007048:	a1 78       	lsl	r8,0x1
8000704a:	f0 c9 fc 19 	sub	r9,r8,-999
8000704e:	e0 68 4d d3 	mov	r8,19923
80007052:	ea 18 10 62 	orh	r8,0x1062
80007056:	f2 08 06 48 	mulu.d	r8,r9,r8
8000705a:	f2 08 16 06 	lsr	r8,r9,0x6
8000705e:	ef 48 ff e0 	st.w	r7[-32],r8
80007062:	30 08       	mov	r8,0
80007064:	ef 48 ff e4 	st.w	r7[-28],r8
80007068:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000706c:	12 98       	mov	r8,r9
8000706e:	a5 68       	lsl	r8,0x4
80007070:	12 18       	sub	r8,r9
80007072:	a3 68       	lsl	r8,0x2
80007074:	f0 c9 fc 19 	sub	r9,r8,-999
80007078:	e0 68 4d d3 	mov	r8,19923
8000707c:	ea 18 10 62 	orh	r8,0x1062
80007080:	f2 08 06 48 	mulu.d	r8,r9,r8
80007084:	f2 08 16 06 	lsr	r8,r9,0x6
80007088:	ef 48 ff e8 	st.w	r7[-24],r8
8000708c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80007090:	f0 08 10 5a 	mul	r8,r8,90
80007094:	f0 c9 fc 19 	sub	r9,r8,-999
80007098:	e0 68 4d d3 	mov	r8,19923
8000709c:	ea 18 10 62 	orh	r8,0x1062
800070a0:	f2 08 06 48 	mulu.d	r8,r9,r8
800070a4:	f2 08 16 06 	lsr	r8,r9,0x6
800070a8:	ef 48 ff ec 	st.w	r7[-20],r8
800070ac:	ee f9 ff d4 	ld.w	r9,r7[-44]
800070b0:	e0 68 00 d2 	mov	r8,210
800070b4:	f2 08 02 48 	mul	r8,r9,r8
800070b8:	f0 c9 fc 19 	sub	r9,r8,-999
800070bc:	e0 68 4d d3 	mov	r8,19923
800070c0:	ea 18 10 62 	orh	r8,0x1062
800070c4:	f2 08 06 48 	mulu.d	r8,r9,r8
800070c8:	f2 08 16 06 	lsr	r8,r9,0x6
800070cc:	ef 48 ff f0 	st.w	r7[-16],r8
800070d0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800070d4:	12 98       	mov	r8,r9
800070d6:	a5 68       	lsl	r8,0x4
800070d8:	12 18       	sub	r8,r9
800070da:	a5 68       	lsl	r8,0x4
800070dc:	f0 c9 fc 19 	sub	r9,r8,-999
800070e0:	e0 68 4d d3 	mov	r8,19923
800070e4:	ea 18 10 62 	orh	r8,0x1062
800070e8:	f2 08 06 48 	mulu.d	r8,r9,r8
800070ec:	f2 08 16 06 	lsr	r8,r9,0x6
800070f0:	ef 48 ff f4 	st.w	r7[-12],r8
800070f4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800070f8:	f0 08 10 64 	mul	r8,r8,100
800070fc:	f0 c9 fc 19 	sub	r9,r8,-999
80007100:	e0 68 4d d3 	mov	r8,19923
80007104:	ea 18 10 62 	orh	r8,0x1062
80007108:	f2 08 06 48 	mulu.d	r8,r9,r8
8000710c:	f2 08 16 06 	lsr	r8,r9,0x6
80007110:	ef 48 ff f8 	st.w	r7[-8],r8
80007114:	ee f9 ff d4 	ld.w	r9,r7[-44]
80007118:	e0 68 01 0e 	mov	r8,270
8000711c:	f2 08 02 48 	mul	r8,r9,r8
80007120:	f0 c9 fc 19 	sub	r9,r8,-999
80007124:	e0 68 4d d3 	mov	r8,19923
80007128:	ea 18 10 62 	orh	r8,0x1062
8000712c:	f2 08 06 48 	mulu.d	r8,r9,r8
80007130:	f2 08 16 06 	lsr	r8,r9,0x6
80007134:	ef 48 ff fc 	st.w	r7[-4],r8
80007138:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000713c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007140:	10 09       	add	r9,r8
80007142:	ee fa ff e0 	ld.w	r10,r7[-32]
80007146:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000714a:	f4 08 00 08 	add	r8,r10,r8
8000714e:	10 39       	cp.w	r9,r8
80007150:	c0 c2       	brcc	80007168 <smc_init+0x180>
80007152:	ee f9 ff e0 	ld.w	r9,r7[-32]
80007156:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000715a:	10 09       	add	r9,r8
8000715c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007160:	f2 08 01 08 	sub	r8,r9,r8
80007164:	ef 48 ff f4 	st.w	r7[-12],r8
80007168:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000716c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007170:	10 09       	add	r9,r8
80007172:	ee fa ff d8 	ld.w	r10,r7[-40]
80007176:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000717a:	f4 08 00 08 	add	r8,r10,r8
8000717e:	10 39       	cp.w	r9,r8
80007180:	c0 c2       	brcc	80007198 <smc_init+0x1b0>
80007182:	ee f9 ff d8 	ld.w	r9,r7[-40]
80007186:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000718a:	10 09       	add	r9,r8
8000718c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80007190:	f2 08 01 08 	sub	r8,r9,r8
80007194:	ef 48 ff ec 	st.w	r7[-20],r8
80007198:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000719c:	ee f8 ff ec 	ld.w	r8,r7[-20]
800071a0:	10 09       	add	r9,r8
800071a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800071a6:	10 39       	cp.w	r9,r8
800071a8:	e0 88 00 0a 	brls	800071bc <smc_init+0x1d4>
800071ac:	ee f9 ff dc 	ld.w	r9,r7[-36]
800071b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800071b4:	f2 08 00 08 	add	r8,r9,r8
800071b8:	ef 48 ff f8 	st.w	r7[-8],r8
800071bc:	ee f9 ff d8 	ld.w	r9,r7[-40]
800071c0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800071c4:	10 09       	add	r9,r8
800071c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800071ca:	10 39       	cp.w	r9,r8
800071cc:	e0 88 00 0a 	brls	800071e0 <smc_init+0x1f8>
800071d0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800071d4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800071d8:	f2 08 00 08 	add	r8,r9,r8
800071dc:	ef 48 ff f8 	st.w	r7[-8],r8
800071e0:	ee f9 ff e4 	ld.w	r9,r7[-28]
800071e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800071e8:	10 09       	add	r9,r8
800071ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800071ee:	10 39       	cp.w	r9,r8
800071f0:	e0 88 00 0a 	brls	80007204 <smc_init+0x21c>
800071f4:	ee f9 ff e4 	ld.w	r9,r7[-28]
800071f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800071fc:	f2 08 00 08 	add	r8,r9,r8
80007200:	ef 48 ff fc 	st.w	r7[-4],r8
80007204:	ee f9 ff e0 	ld.w	r9,r7[-32]
80007208:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000720c:	10 09       	add	r9,r8
8000720e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007212:	10 39       	cp.w	r9,r8
80007214:	e0 88 00 0a 	brls	80007228 <smc_init+0x240>
80007218:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000721c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007220:	f2 08 00 08 	add	r8,r9,r8
80007224:	ef 48 ff fc 	st.w	r7[-4],r8
80007228:	fe 68 1c 00 	mov	r8,-123904
8000722c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007230:	f2 0a 15 08 	lsl	r10,r9,0x8
80007234:	ee f9 ff d8 	ld.w	r9,r7[-40]
80007238:	12 4a       	or	r10,r9
8000723a:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000723e:	b1 69       	lsl	r9,0x10
80007240:	12 4a       	or	r10,r9
80007242:	ee f9 ff e4 	ld.w	r9,r7[-28]
80007246:	b9 69       	lsl	r9,0x18
80007248:	f5 e9 10 09 	or	r9,r10,r9
8000724c:	91 09       	st.w	r8[0x0],r9
8000724e:	fe 68 1c 00 	mov	r8,-123904
80007252:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007256:	f2 0a 15 08 	lsl	r10,r9,0x8
8000725a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000725e:	12 4a       	or	r10,r9
80007260:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007264:	b1 69       	lsl	r9,0x10
80007266:	12 4a       	or	r10,r9
80007268:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000726c:	b9 69       	lsl	r9,0x18
8000726e:	f5 e9 10 09 	or	r9,r10,r9
80007272:	91 19       	st.w	r8[0x4],r9
80007274:	fe 68 1c 00 	mov	r8,-123904
80007278:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000727c:	f2 0a 15 10 	lsl	r10,r9,0x10
80007280:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007284:	f5 e9 10 09 	or	r9,r10,r9
80007288:	91 29       	st.w	r8[0x8],r9
8000728a:	fe 68 1c 00 	mov	r8,-123904
8000728e:	e0 69 10 03 	mov	r9,4099
80007292:	91 39       	st.w	r8[0xc],r9
80007294:	48 49       	lddpc	r9,800072a4 <smc_init+0x2bc>
80007296:	30 18       	mov	r8,1
80007298:	b2 88       	st.b	r9[0x0],r8
  #undef NCS_CONTROLLED_READ
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
8000729a:	f0 1f 00 04 	mcall	800072a8 <smc_init+0x2c0>
}
8000729e:	2f 4d       	sub	sp,-48
800072a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800072a4:	00 00       	add	r0,r0
800072a6:	05 40       	ld.w	r0,--r2
800072a8:	80 00       	ld.sh	r0,r0[0x0]
800072aa:	72 ac       	ld.w	r12,r9[0x28]

800072ac <smc_enable_muxed_pins>:

/*! \brief Puts the multiplexed MCU pins used for the SMC
 *
 */
static void smc_enable_muxed_pins(void)
{
800072ac:	eb cd 40 80 	pushm	r7,lr
800072b0:	1a 97       	mov	r7,sp
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
800072b2:	31 4b       	mov	r11,20
800072b4:	48 3c       	lddpc	r12,800072c0 <smc_enable_muxed_pins+0x14>
800072b6:	f0 1f 00 04 	mcall	800072c4 <smc_enable_muxed_pins+0x18>
}
800072ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800072be:	00 00       	add	r0,r0
800072c0:	80 00       	ld.sh	r0,r0[0x0]
800072c2:	da d4       	*unknown*
800072c4:	80 00       	ld.sh	r0,r0[0x0]
800072c6:	73 48       	ld.w	r8,r9[0x50]

800072c8 <flashc_set_wait_state>:
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
800072c8:	eb cd 40 80 	pushm	r7,lr
800072cc:	1a 97       	mov	r7,sp
800072ce:	20 2d       	sub	sp,8
800072d0:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800072d4:	fe 68 14 00 	mov	r8,-125952
800072d8:	70 08       	ld.w	r8,r8[0x0]
800072da:	30 09       	mov	r9,0
800072dc:	ef 49 ff fc 	st.w	r7[-4],r9
800072e0:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800072e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800072e8:	5c 58       	castu.b	r8
800072ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800072ee:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800072f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800072f6:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
800072fa:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800072fe:	fe 68 14 00 	mov	r8,-125952
80007302:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007306:	91 09       	st.w	r8[0x0],r9
}
80007308:	2f ed       	sub	sp,-8
8000730a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000730e:	d7 03       	nop

80007310 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80007310:	eb cd 40 80 	pushm	r7,lr
80007314:	1a 97       	mov	r7,sp
80007316:	20 1d       	sub	sp,4
80007318:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
8000731c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007320:	e0 69 50 ff 	mov	r9,20735
80007324:	ea 19 02 25 	orh	r9,0x225
80007328:	12 38       	cp.w	r8,r9
8000732a:	e0 88 00 06 	brls	80007336 <flashc_set_bus_freq+0x26>
		// Set 1 WS.
		flashc_set_wait_state(1);
8000732e:	30 1c       	mov	r12,1
80007330:	f0 1f 00 05 	mcall	80007344 <flashc_set_bus_freq+0x34>
80007334:	c0 48       	rjmp	8000733c <flashc_set_bus_freq+0x2c>
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80007336:	30 0c       	mov	r12,0
80007338:	f0 1f 00 03 	mcall	80007344 <flashc_set_bus_freq+0x34>
	}
}
8000733c:	2f fd       	sub	sp,-4
8000733e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007342:	00 00       	add	r0,r0
80007344:	80 00       	ld.sh	r0,r0[0x0]
80007346:	72 c8       	ld.w	r8,r9[0x30]

80007348 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80007348:	eb cd 40 80 	pushm	r7,lr
8000734c:	1a 97       	mov	r7,sp
8000734e:	20 4d       	sub	sp,16
80007350:	ef 4c ff f4 	st.w	r7[-12],r12
80007354:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
80007358:	30 08       	mov	r8,0
8000735a:	ef 48 ff f8 	st.w	r7[-8],r8
  uint32_t i;

  for (i = 0; i < size; i++)
8000735e:	30 08       	mov	r8,0
80007360:	ef 48 ff fc 	st.w	r7[-4],r8
80007364:	c1 d8       	rjmp	8000739e <gpio_enable_module+0x56>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80007366:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000736a:	11 98       	ld.ub	r8,r8[0x1]
8000736c:	10 99       	mov	r9,r8
8000736e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007372:	11 88       	ld.ub	r8,r8[0x0]
80007374:	12 9b       	mov	r11,r9
80007376:	10 9c       	mov	r12,r8
80007378:	f0 1f 00 10 	mcall	800073b8 <gpio_enable_module+0x70>
8000737c:	18 98       	mov	r8,r12
8000737e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007382:	f3 e8 10 08 	or	r8,r9,r8
80007386:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
8000738a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000738e:	2f e8       	sub	r8,-2
80007390:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80007394:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007398:	2f f8       	sub	r8,-1
8000739a:	ef 48 ff fc 	st.w	r7[-4],r8
8000739e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800073a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800073a6:	10 39       	cp.w	r9,r8
800073a8:	cd f3       	brcs	80007366 <gpio_enable_module+0x1e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
800073aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800073ae:	10 9c       	mov	r12,r8
800073b0:	2f cd       	sub	sp,-16
800073b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800073b6:	00 00       	add	r0,r0
800073b8:	80 00       	ld.sh	r0,r0[0x0]
800073ba:	73 bc       	ld.w	r12,r9[0x6c]

800073bc <gpio_enable_module_pin>:


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800073bc:	eb cd 40 80 	pushm	r7,lr
800073c0:	1a 97       	mov	r7,sp
800073c2:	20 3d       	sub	sp,12
800073c4:	ef 4c ff f8 	st.w	r7[-8],r12
800073c8:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800073cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800073d0:	a5 98       	lsr	r8,0x5
800073d2:	a9 68       	lsl	r8,0x8
800073d4:	e0 28 f0 00 	sub	r8,61440
800073d8:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
800073dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800073e0:	58 18       	cp.w	r8,1
800073e2:	c1 e0       	breq	8000741e <gpio_enable_module_pin+0x62>
800073e4:	c0 63       	brcs	800073f0 <gpio_enable_module_pin+0x34>
800073e6:	58 28       	cp.w	r8,2
800073e8:	c3 20       	breq	8000744c <gpio_enable_module_pin+0x90>
800073ea:	58 38       	cp.w	r8,3
800073ec:	c4 70       	breq	8000747a <gpio_enable_module_pin+0xbe>
800073ee:	c5 d8       	rjmp	800074a8 <gpio_enable_module_pin+0xec>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800073f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800073f4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800073f8:	30 19       	mov	r9,1
800073fa:	f2 08 09 48 	lsl	r8,r9,r8
800073fe:	10 99       	mov	r9,r8
80007400:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007404:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80007406:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000740a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000740e:	30 19       	mov	r9,1
80007410:	f2 08 09 48 	lsl	r8,r9,r8
80007414:	10 99       	mov	r9,r8
80007416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000741a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
8000741c:	c4 88       	rjmp	800074ac <gpio_enable_module_pin+0xf0>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000741e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007422:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007426:	30 19       	mov	r9,1
80007428:	f2 08 09 48 	lsl	r8,r9,r8
8000742c:	10 99       	mov	r9,r8
8000742e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007432:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80007434:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007438:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000743c:	30 19       	mov	r9,1
8000743e:	f2 08 09 48 	lsl	r8,r9,r8
80007442:	10 99       	mov	r9,r8
80007444:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007448:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
8000744a:	c3 18       	rjmp	800074ac <gpio_enable_module_pin+0xf0>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000744c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007450:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007454:	30 19       	mov	r9,1
80007456:	f2 08 09 48 	lsl	r8,r9,r8
8000745a:	10 99       	mov	r9,r8
8000745c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007460:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80007462:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007466:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000746a:	30 19       	mov	r9,1
8000746c:	f2 08 09 48 	lsl	r8,r9,r8
80007470:	10 99       	mov	r9,r8
80007472:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007476:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80007478:	c1 a8       	rjmp	800074ac <gpio_enable_module_pin+0xf0>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000747a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000747e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007482:	30 19       	mov	r9,1
80007484:	f2 08 09 48 	lsl	r8,r9,r8
80007488:	10 99       	mov	r9,r8
8000748a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000748e:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80007490:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007494:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007498:	30 19       	mov	r9,1
8000749a:	f2 08 09 48 	lsl	r8,r9,r8
8000749e:	10 99       	mov	r9,r8
800074a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800074a4:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
800074a6:	c0 38       	rjmp	800074ac <gpio_enable_module_pin+0xf0>
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
800074a8:	30 18       	mov	r8,1
800074aa:	c0 d8       	rjmp	800074c4 <gpio_enable_module_pin+0x108>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800074ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800074b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800074b4:	30 19       	mov	r9,1
800074b6:	f2 08 09 48 	lsl	r8,r9,r8
800074ba:	10 99       	mov	r9,r8
800074bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800074c0:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
800074c2:	30 08       	mov	r8,0
}
800074c4:	10 9c       	mov	r12,r8
800074c6:	2f dd       	sub	sp,-12
800074c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800074cc <gpio_enable_gpio_pin>:
  }
}


void gpio_enable_gpio_pin(uint32_t pin)
{
800074cc:	eb cd 40 80 	pushm	r7,lr
800074d0:	1a 97       	mov	r7,sp
800074d2:	20 2d       	sub	sp,8
800074d4:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800074d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800074dc:	a5 98       	lsr	r8,0x5
800074de:	a9 68       	lsl	r8,0x8
800074e0:	e0 28 f0 00 	sub	r8,61440
800074e4:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
800074e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800074ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800074f0:	30 19       	mov	r9,1
800074f2:	f2 08 09 48 	lsl	r8,r9,r8
800074f6:	10 99       	mov	r9,r8
800074f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800074fc:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
80007500:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007504:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007508:	30 19       	mov	r9,1
8000750a:	f2 08 09 48 	lsl	r8,r9,r8
8000750e:	10 99       	mov	r9,r8
80007510:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007514:	91 19       	st.w	r8[0x4],r9
}
80007516:	2f ed       	sub	sp,-8
80007518:	e3 cd 80 80 	ldm	sp++,r7,pc

8000751c <gpio_enable_pin_pull_up>:

#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
8000751c:	eb cd 40 80 	pushm	r7,lr
80007520:	1a 97       	mov	r7,sp
80007522:	20 2d       	sub	sp,8
80007524:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80007528:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000752c:	a5 98       	lsr	r8,0x5
8000752e:	a9 68       	lsl	r8,0x8
80007530:	e0 28 f0 00 	sub	r8,61440
80007534:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80007538:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000753c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007540:	30 19       	mov	r9,1
80007542:	f2 08 09 48 	lsl	r8,r9,r8
80007546:	10 99       	mov	r9,r8
80007548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000754c:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80007550:	2f ed       	sub	sp,-8
80007552:	e3 cd 80 80 	ldm	sp++,r7,pc

80007556 <gpio_configure_pin>:
}

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80007556:	eb cd 40 80 	pushm	r7,lr
8000755a:	1a 97       	mov	r7,sp
8000755c:	20 3d       	sub	sp,12
8000755e:	ef 4c ff f8 	st.w	r7[-8],r12
80007562:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80007566:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000756a:	a5 98       	lsr	r8,0x5
8000756c:	a9 68       	lsl	r8,0x8
8000756e:	e0 28 f0 00 	sub	r8,61440
80007572:	ef 48 ff fc 	st.w	r7[-4],r8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
80007576:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000757a:	e2 18 00 04 	andl	r8,0x4,COH
8000757e:	c0 e0       	breq	8000759a <gpio_configure_pin+0x44>
            gpio_port->puers = 1 << (pin & 0x1F);
80007580:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007584:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007588:	30 19       	mov	r9,1
8000758a:	f2 08 09 48 	lsl	r8,r9,r8
8000758e:	10 99       	mov	r9,r8
80007590:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007594:	f1 49 00 74 	st.w	r8[116],r9
80007598:	c0 d8       	rjmp	800075b2 <gpio_configure_pin+0x5c>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
8000759a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000759e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800075a2:	30 19       	mov	r9,1
800075a4:	f2 08 09 48 	lsl	r8,r9,r8
800075a8:	10 99       	mov	r9,r8
800075aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800075ae:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
800075b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800075b6:	e2 18 00 80 	andl	r8,0x80,COH
800075ba:	c5 a0       	breq	8000766e <gpio_configure_pin+0x118>
            if (flags & GPIO_BOTHEDGES)
800075bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800075c0:	e2 18 01 80 	andl	r8,0x180,COH
800075c4:	c1 a0       	breq	800075f8 <gpio_configure_pin+0xa2>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800075c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800075ca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800075ce:	30 19       	mov	r9,1
800075d0:	f2 08 09 48 	lsl	r8,r9,r8
800075d4:	10 99       	mov	r9,r8
800075d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800075da:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800075de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800075e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800075e6:	30 19       	mov	r9,1
800075e8:	f2 08 09 48 	lsl	r8,r9,r8
800075ec:	10 99       	mov	r9,r8
800075ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800075f2:	f1 49 00 b8 	st.w	r8[184],r9
800075f6:	c3 c8       	rjmp	8000766e <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_RISING)
800075f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800075fc:	e2 18 02 80 	andl	r8,0x280,COH
80007600:	c1 a0       	breq	80007634 <gpio_configure_pin+0xde>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80007602:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007606:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000760a:	30 19       	mov	r9,1
8000760c:	f2 08 09 48 	lsl	r8,r9,r8
80007610:	10 99       	mov	r9,r8
80007612:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007616:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000761a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000761e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007622:	30 19       	mov	r9,1
80007624:	f2 08 09 48 	lsl	r8,r9,r8
80007628:	10 99       	mov	r9,r8
8000762a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000762e:	f1 49 00 b8 	st.w	r8[184],r9
80007632:	c1 e8       	rjmp	8000766e <gpio_configure_pin+0x118>
            }
            else if (flags & GPIO_FALLING)
80007634:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007638:	e2 18 03 80 	andl	r8,0x380,COH
8000763c:	c1 90       	breq	8000766e <gpio_configure_pin+0x118>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
8000763e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007642:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007646:	30 19       	mov	r9,1
80007648:	f2 08 09 48 	lsl	r8,r9,r8
8000764c:	10 99       	mov	r9,r8
8000764e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007652:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80007656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000765a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000765e:	30 19       	mov	r9,1
80007660:	f2 08 09 48 	lsl	r8,r9,r8
80007664:	10 99       	mov	r9,r8
80007666:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000766a:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
8000766e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007672:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007676:	5c 58       	castu.b	r8
80007678:	c2 c0       	breq	800076d0 <gpio_configure_pin+0x17a>
            if (flags & GPIO_INIT_HIGH)
8000767a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000767e:	e2 18 00 02 	andl	r8,0x2,COH
80007682:	c0 e0       	breq	8000769e <gpio_configure_pin+0x148>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80007684:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007688:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000768c:	30 19       	mov	r9,1
8000768e:	f2 08 09 48 	lsl	r8,r9,r8
80007692:	10 99       	mov	r9,r8
80007694:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007698:	f1 49 00 54 	st.w	r8[84],r9
8000769c:	c0 d8       	rjmp	800076b6 <gpio_configure_pin+0x160>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
8000769e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800076a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800076a6:	30 19       	mov	r9,1
800076a8:	f2 08 09 48 	lsl	r8,r9,r8
800076ac:	10 99       	mov	r9,r8
800076ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800076b2:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800076b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800076ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800076be:	30 19       	mov	r9,1
800076c0:	f2 08 09 48 	lsl	r8,r9,r8
800076c4:	10 99       	mov	r9,r8
800076c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800076ca:	f1 49 00 44 	st.w	r8[68],r9
800076ce:	c0 d8       	rjmp	800076e8 <gpio_configure_pin+0x192>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800076d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800076d4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800076d8:	30 19       	mov	r9,1
800076da:	f2 08 09 48 	lsl	r8,r9,r8
800076de:	10 99       	mov	r9,r8
800076e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800076e4:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800076e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800076ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800076f0:	30 19       	mov	r9,1
800076f2:	f2 08 09 48 	lsl	r8,r9,r8
800076f6:	10 99       	mov	r9,r8
800076f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800076fc:	91 19       	st.w	r8[0x4],r9
}
800076fe:	2f dd       	sub	sp,-12
80007700:	e3 cd 80 80 	ldm	sp++,r7,pc

80007704 <gpio_get_pin_value>:
    /* Enable GPIO */
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
80007704:	eb cd 40 80 	pushm	r7,lr
80007708:	1a 97       	mov	r7,sp
8000770a:	20 2d       	sub	sp,8
8000770c:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80007710:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007714:	a5 98       	lsr	r8,0x5
80007716:	a9 68       	lsl	r8,0x8
80007718:	e0 28 f0 00 	sub	r8,61440
8000771c:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80007720:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007724:	71 89       	ld.w	r9,r8[0x60]
80007726:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000772a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000772e:	f2 08 0a 48 	lsr	r8,r9,r8
80007732:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80007736:	10 9c       	mov	r12,r8
80007738:	2f ed       	sub	sp,-8
8000773a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000773e <gpio_set_gpio_pin>:
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
}


void gpio_set_gpio_pin(uint32_t pin)
{
8000773e:	eb cd 40 80 	pushm	r7,lr
80007742:	1a 97       	mov	r7,sp
80007744:	20 2d       	sub	sp,8
80007746:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000774a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000774e:	a5 98       	lsr	r8,0x5
80007750:	a9 68       	lsl	r8,0x8
80007752:	e0 28 f0 00 	sub	r8,61440
80007756:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8000775a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000775e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007762:	30 19       	mov	r9,1
80007764:	f2 08 09 48 	lsl	r8,r9,r8
80007768:	10 99       	mov	r9,r8
8000776a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000776e:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80007772:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007776:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000777a:	30 19       	mov	r9,1
8000777c:	f2 08 09 48 	lsl	r8,r9,r8
80007780:	10 99       	mov	r9,r8
80007782:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007786:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8000778a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000778e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007792:	30 19       	mov	r9,1
80007794:	f2 08 09 48 	lsl	r8,r9,r8
80007798:	10 99       	mov	r9,r8
8000779a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000779e:	91 19       	st.w	r8[0x4],r9
}
800077a0:	2f ed       	sub	sp,-8
800077a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800077a6 <gpio_clr_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
800077a6:	eb cd 40 80 	pushm	r7,lr
800077aa:	1a 97       	mov	r7,sp
800077ac:	20 2d       	sub	sp,8
800077ae:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800077b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800077b6:	a5 98       	lsr	r8,0x5
800077b8:	a9 68       	lsl	r8,0x8
800077ba:	e0 28 f0 00 	sub	r8,61440
800077be:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
800077c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800077c6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800077ca:	30 19       	mov	r9,1
800077cc:	f2 08 09 48 	lsl	r8,r9,r8
800077d0:	10 99       	mov	r9,r8
800077d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800077d6:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800077da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800077de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800077e2:	30 19       	mov	r9,1
800077e4:	f2 08 09 48 	lsl	r8,r9,r8
800077e8:	10 99       	mov	r9,r8
800077ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800077ee:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800077f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800077f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800077fa:	30 19       	mov	r9,1
800077fc:	f2 08 09 48 	lsl	r8,r9,r8
80007800:	10 99       	mov	r9,r8
80007802:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007806:	91 19       	st.w	r8[0x4],r9
}
80007808:	2f ed       	sub	sp,-8
8000780a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000780e <gpio_tgl_gpio_pin>:
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
8000780e:	eb cd 40 80 	pushm	r7,lr
80007812:	1a 97       	mov	r7,sp
80007814:	20 2d       	sub	sp,8
80007816:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000781a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000781e:	a5 98       	lsr	r8,0x5
80007820:	a9 68       	lsl	r8,0x8
80007822:	e0 28 f0 00 	sub	r8,61440
80007826:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8000782a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000782e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007832:	30 19       	mov	r9,1
80007834:	f2 08 09 48 	lsl	r8,r9,r8
80007838:	10 99       	mov	r9,r8
8000783a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000783e:	f1 49 00 5c 	st.w	r8[92],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80007842:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007846:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000784a:	30 19       	mov	r9,1
8000784c:	f2 08 09 48 	lsl	r8,r9,r8
80007850:	10 99       	mov	r9,r8
80007852:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007856:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8000785a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000785e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007862:	30 19       	mov	r9,1
80007864:	f2 08 09 48 	lsl	r8,r9,r8
80007868:	10 99       	mov	r9,r8
8000786a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000786e:	91 19       	st.w	r8[0x4],r9
}
80007870:	2f ed       	sub	sp,-8
80007872:	e3 cd 80 80 	ldm	sp++,r7,pc

80007876 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80007876:	eb cd 40 80 	pushm	r7,lr
8000787a:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
8000787c:	c0 08       	rjmp	8000787c <_unhandled_interrupt+0x6>
8000787e:	d7 03       	nop

80007880 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80007880:	eb cd 40 80 	pushm	r7,lr
80007884:	1a 97       	mov	r7,sp
80007886:	20 3d       	sub	sp,12
80007888:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000788c:	fe 78 08 00 	mov	r8,-63488
80007890:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007894:	f2 09 11 03 	rsub	r9,r9,3
80007898:	28 09       	sub	r9,-128
8000789a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000789e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800078a2:	fe 78 08 00 	mov	r8,-63488
800078a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800078aa:	2c 09       	sub	r9,-64
800078ac:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800078b0:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800078b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800078b8:	58 08       	cp.w	r8,0
800078ba:	c1 30       	breq	800078e0 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
800078bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800078c0:	48 b8       	lddpc	r8,800078ec <_get_interrupt_handler+0x6c>
800078c2:	a1 79       	lsl	r9,0x1
800078c4:	2f f9       	sub	r9,-1
800078c6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800078ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800078ce:	f0 08 12 00 	clz	r8,r8
800078d2:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
800078d6:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
800078d8:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800078dc:	70 08       	ld.w	r8,r8[0x0]
800078de:	c0 28       	rjmp	800078e2 <_get_interrupt_handler+0x62>
800078e0:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800078e2:	10 9c       	mov	r12,r8
800078e4:	2f dd       	sub	sp,-12
800078e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800078ea:	00 00       	add	r0,r0
800078ec:	80 00       	ld.sh	r0,r0[0x0]
800078ee:	da fc       	*unknown*

800078f0 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
800078f0:	eb cd 40 80 	pushm	r7,lr
800078f4:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800078f6:	48 38       	lddpc	r8,80007900 <INTC_init_evba+0x10>
800078f8:	e3 b8 00 01 	mtsr	0x4,r8
}
800078fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007900:	80 00       	ld.sh	r0,r0[0x0]
80007902:	d4 00       	acall	0x100

80007904 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80007904:	eb cd 40 80 	pushm	r7,lr
80007908:	1a 97       	mov	r7,sp
8000790a:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
8000790c:	f0 1f 00 1f 	mcall	80007988 <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80007910:	30 08       	mov	r8,0
80007912:	ef 48 ff f8 	st.w	r7[-8],r8
80007916:	c3 18       	rjmp	80007978 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80007918:	30 08       	mov	r8,0
8000791a:	ef 48 ff fc 	st.w	r7[-4],r8
8000791e:	c1 48       	rjmp	80007946 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80007920:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007924:	49 a8       	lddpc	r8,8000798c <INTC_init_interrupts+0x88>
80007926:	a1 79       	lsl	r9,0x1
80007928:	2f f9       	sub	r9,-1
8000792a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000792e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007932:	a3 68       	lsl	r8,0x2
80007934:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80007938:	49 69       	lddpc	r9,80007990 <INTC_init_interrupts+0x8c>
8000793a:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000793c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007940:	2f f8       	sub	r8,-1
80007942:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80007946:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000794a:	49 18       	lddpc	r8,8000798c <INTC_init_interrupts+0x88>
8000794c:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80007950:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007954:	10 39       	cp.w	r9,r8
80007956:	fe 9b ff e5 	brhi	80007920 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000795a:	fe 78 08 00 	mov	r8,-63488
8000795e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007962:	48 db       	lddpc	r11,80007994 <INTC_init_interrupts+0x90>
80007964:	48 da       	lddpc	r10,80007998 <INTC_init_interrupts+0x94>
80007966:	f6 0a 01 0a 	sub	r10,r11,r10
8000796a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000796e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007972:	2f f8       	sub	r8,-1
80007974:	ef 48 ff f8 	st.w	r7[-8],r8
80007978:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000797c:	59 d8       	cp.w	r8,29
8000797e:	fe 98 ff cd 	brls	80007918 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80007982:	2f ed       	sub	sp,-8
80007984:	e3 cd 80 80 	ldm	sp++,r7,pc
80007988:	80 00       	ld.sh	r0,r0[0x0]
8000798a:	78 f0       	ld.w	r0,r12[0x3c]
8000798c:	80 00       	ld.sh	r0,r0[0x0]
8000798e:	da fc       	*unknown*
80007990:	80 00       	ld.sh	r0,r0[0x0]
80007992:	78 76       	ld.w	r6,r12[0x1c]
80007994:	80 00       	ld.sh	r0,r0[0x0]
80007996:	d5 04       	*unknown*
80007998:	80 00       	ld.sh	r0,r0[0x0]
8000799a:	d4 00       	acall	0x100

8000799c <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
8000799c:	eb cd 40 80 	pushm	r7,lr
800079a0:	1a 97       	mov	r7,sp
800079a2:	20 4d       	sub	sp,16
800079a4:	ef 4c ff f8 	st.w	r7[-8],r12
800079a8:	ef 4b ff f4 	st.w	r7[-12],r11
800079ac:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800079b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800079b4:	a5 98       	lsr	r8,0x5
800079b6:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800079ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800079be:	4a 78       	lddpc	r8,80007a58 <INTC_register_interrupt+0xbc>
800079c0:	a1 79       	lsl	r9,0x1
800079c2:	2f f9       	sub	r9,-1
800079c4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800079c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800079cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800079d0:	a3 68       	lsl	r8,0x2
800079d2:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800079d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800079da:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800079dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800079e0:	58 08       	cp.w	r8,0
800079e2:	c0 c1       	brne	800079fa <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800079e4:	fe 78 08 00 	mov	r8,-63488
800079e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800079ec:	49 cb       	lddpc	r11,80007a5c <INTC_register_interrupt+0xc0>
800079ee:	49 da       	lddpc	r10,80007a60 <INTC_register_interrupt+0xc4>
800079f0:	f6 0a 01 0a 	sub	r10,r11,r10
800079f4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800079f8:	c2 d8       	rjmp	80007a52 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
800079fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800079fe:	58 18       	cp.w	r8,1
80007a00:	c0 d1       	brne	80007a1a <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80007a02:	fe 78 08 00 	mov	r8,-63488
80007a06:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007a0a:	49 7b       	lddpc	r11,80007a64 <INTC_register_interrupt+0xc8>
80007a0c:	49 5a       	lddpc	r10,80007a60 <INTC_register_interrupt+0xc4>
80007a0e:	f6 0a 01 0a 	sub	r10,r11,r10
80007a12:	bf aa       	sbr	r10,0x1e
80007a14:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80007a18:	c1 d8       	rjmp	80007a52 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80007a1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007a1e:	58 28       	cp.w	r8,2
80007a20:	c0 d1       	brne	80007a3a <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80007a22:	fe 78 08 00 	mov	r8,-63488
80007a26:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007a2a:	49 0b       	lddpc	r11,80007a68 <INTC_register_interrupt+0xcc>
80007a2c:	48 da       	lddpc	r10,80007a60 <INTC_register_interrupt+0xc4>
80007a2e:	f6 0a 01 0a 	sub	r10,r11,r10
80007a32:	bf ba       	sbr	r10,0x1f
80007a34:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80007a38:	c0 d8       	rjmp	80007a52 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80007a3a:	fe 78 08 00 	mov	r8,-63488
80007a3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007a42:	48 bb       	lddpc	r11,80007a6c <INTC_register_interrupt+0xd0>
80007a44:	48 7a       	lddpc	r10,80007a60 <INTC_register_interrupt+0xc4>
80007a46:	f6 0a 01 0a 	sub	r10,r11,r10
80007a4a:	ea 1a c0 00 	orh	r10,0xc000
80007a4e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80007a52:	2f cd       	sub	sp,-16
80007a54:	e3 cd 80 80 	ldm	sp++,r7,pc
80007a58:	80 00       	ld.sh	r0,r0[0x0]
80007a5a:	da fc       	*unknown*
80007a5c:	80 00       	ld.sh	r0,r0[0x0]
80007a5e:	d5 04       	*unknown*
80007a60:	80 00       	ld.sh	r0,r0[0x0]
80007a62:	d4 00       	acall	0x100
80007a64:	80 00       	ld.sh	r0,r0[0x0]
80007a66:	d5 12       	popm	r0-r3,r11,lr
80007a68:	80 00       	ld.sh	r0,r0[0x0]
80007a6a:	d5 20       	acall	0x148
80007a6c:	80 00       	ld.sh	r0,r0[0x0]
80007a6e:	d5 2e       	*unknown*

80007a70 <mci_reset>:


int shadow_sr=0;

void mci_reset(volatile avr32_mci_t *mci)
{
80007a70:	eb cd 40 80 	pushm	r7,lr
80007a74:	1a 97       	mov	r7,sp
80007a76:	20 1d       	sub	sp,4
80007a78:	ef 4c ff fc 	st.w	r7[-4],r12
  mci->cr = (1<<AVR32_MCI_CR_SWRST);
80007a7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007a80:	e0 69 00 80 	mov	r9,128
80007a84:	91 09       	st.w	r8[0x0],r9
}
80007a86:	2f fd       	sub	sp,-4
80007a88:	e3 cd 80 80 	ldm	sp++,r7,pc

80007a8c <mci_disable>:

void mci_disable(volatile avr32_mci_t *mci)
{
80007a8c:	eb cd 40 80 	pushm	r7,lr
80007a90:	1a 97       	mov	r7,sp
80007a92:	20 1d       	sub	sp,4
80007a94:	ef 4c ff fc 	st.w	r7[-4],r12
  // Disable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIDIS) | (1<<AVR32_MCI_CR_PWSDIS);
80007a98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007a9c:	30 a9       	mov	r9,10
80007a9e:	91 09       	st.w	r8[0x0],r9
}
80007aa0:	2f fd       	sub	sp,-4
80007aa2:	e3 cd 80 80 	ldm	sp++,r7,pc

80007aa6 <mci_enable>:

void mci_enable(volatile avr32_mci_t *mci)
{
80007aa6:	eb cd 40 80 	pushm	r7,lr
80007aaa:	1a 97       	mov	r7,sp
80007aac:	20 1d       	sub	sp,4
80007aae:	ef 4c ff fc 	st.w	r7[-4],r12
  // Enable the MCI
  mci->cr = (1<<AVR32_MCI_CR_MCIEN) | (1<<AVR32_MCI_CR_PWSEN);
80007ab2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007ab6:	30 59       	mov	r9,5
80007ab8:	91 09       	st.w	r8[0x0],r9
}
80007aba:	2f fd       	sub	sp,-4
80007abc:	e3 cd 80 80 	ldm	sp++,r7,pc

80007ac0 <mci_set_speed>:
}

void mci_set_speed(volatile avr32_mci_t *mci,
                   uint32_t pbb_hz,
                   uint32_t card_speed)
{
80007ac0:	eb cd 40 80 	pushm	r7,lr
80007ac4:	1a 97       	mov	r7,sp
80007ac6:	20 7d       	sub	sp,28
80007ac8:	ef 4c ff ec 	st.w	r7[-20],r12
80007acc:	ef 4b ff e8 	st.w	r7[-24],r11
80007ad0:	ef 4a ff e4 	st.w	r7[-28],r10
    avr32_mci_cfg_t   CFG;
  };
  union u_cfg val;

  // Get the Mode Register
  mci_mode_register = mci->mr;
80007ad4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007ad8:	70 18       	ld.w	r8,r8[0x4]
80007ada:	ef 48 ff f4 	st.w	r7[-12],r8

  if (card_speed > AVR32_MCI_HSDIS_MAX_FREQ)
80007ade:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007ae2:	e0 69 78 40 	mov	r9,30784
80007ae6:	ea 19 01 7d 	orh	r9,0x17d
80007aea:	12 38       	cp.w	r8,r9
80007aec:	e0 88 00 14 	brls	80007b14 <mci_set_speed+0x54>
  { // Use of the High Speed mode of the MCI macro.
    val.cfg = mci->cfg;
80007af0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007af4:	71 58       	ld.w	r8,r8[0x54]
80007af6:	ef 48 ff f0 	st.w	r7[-16],r8
    val.CFG.hsmode = 1;
80007afa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007afe:	30 19       	mov	r9,1
80007b00:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80007b04:	ef 48 ff f0 	st.w	r7[-16],r8
    mci->cfg = val.cfg;
80007b08:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007b0c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007b10:	f1 49 00 54 	st.w	r8[84],r9
  }

  // Multimedia Card Interface clock (MCCK or MCI_CK) is Master Clock (MCK)
  // divided by (2*(CLKDIV+1))
  if (card_speed > 0)
80007b14:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007b18:	58 08       	cp.w	r8,0
80007b1a:	c2 90       	breq	80007b6c <mci_set_speed+0xac>
  {
    clkdiv = pbb_hz / (card_speed * 2);
80007b1c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007b20:	f0 09 15 01 	lsl	r9,r8,0x1
80007b24:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007b28:	f0 09 0d 08 	divu	r8,r8,r9
80007b2c:	ef 48 ff f8 	st.w	r7[-8],r8
    rest   = pbb_hz % (card_speed * 2);
80007b30:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007b34:	f0 09 15 01 	lsl	r9,r8,0x1
80007b38:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007b3c:	f0 09 0d 08 	divu	r8,r8,r9
80007b40:	12 98       	mov	r8,r9
80007b42:	ef 48 ff fc 	st.w	r7[-4],r8
    if (rest)
80007b46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007b4a:	58 08       	cp.w	r8,0
80007b4c:	c0 60       	breq	80007b58 <mci_set_speed+0x98>
    { // Ensure that the card_speed can not be higher than expected.
      clkdiv += 1;
80007b4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b52:	2f f8       	sub	r8,-1
80007b54:	ef 48 ff f8 	st.w	r7[-8],r8
    }

    if (clkdiv > 0)
80007b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b5c:	58 08       	cp.w	r8,0
80007b5e:	c0 b0       	breq	80007b74 <mci_set_speed+0xb4>
    {
      clkdiv -= 1;
80007b60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b64:	20 18       	sub	r8,1
80007b66:	ef 48 ff f8 	st.w	r7[-8],r8
80007b6a:	c0 68       	rjmp	80007b76 <mci_set_speed+0xb6>
    }
  }
  else
  {
    clkdiv = 0;
80007b6c:	30 08       	mov	r8,0
80007b6e:	ef 48 ff f8 	st.w	r7[-8],r8
80007b72:	c0 28       	rjmp	80007b76 <mci_set_speed+0xb6>
      clkdiv += 1;
    }

    if (clkdiv > 0)
    {
      clkdiv -= 1;
80007b74:	d7 03       	nop
  {
    clkdiv = 0;
  }

  // Write new configuration
  mci_mode_register &= ~AVR32_MCI_MR_CLKDIV_MASK; // Clear previous value
80007b76:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007b7a:	e0 18 ff 00 	andl	r8,0xff00
80007b7e:	ef 48 ff f4 	st.w	r7[-12],r8
  mci_mode_register |= clkdiv; // Set the new one
80007b82:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007b86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b8a:	f3 e8 10 08 	or	r8,r9,r8
80007b8e:	ef 48 ff f4 	st.w	r7[-12],r8
  mci->mr = mci_mode_register;
80007b92:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007b96:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007b9a:	91 19       	st.w	r8[0x4],r9
}
80007b9c:	2f 9d       	sub	sp,-28
80007b9e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ba2:	d7 03       	nop

80007ba4 <mci_init>:

int mci_init(volatile avr32_mci_t *mci,
              uint8_t card_slot,
              uint32_t pbb_hz)
{
80007ba4:	eb cd 40 80 	pushm	r7,lr
80007ba8:	1a 97       	mov	r7,sp
80007baa:	20 3d       	sub	sp,12
80007bac:	ef 4c ff fc 	st.w	r7[-4],r12
80007bb0:	16 98       	mov	r8,r11
80007bb2:	ef 4a ff f4 	st.w	r7[-12],r10
80007bb6:	ef 68 ff f8 	st.b	r7[-8],r8
  if (card_slot>MCI_LAST_SLOTS)
80007bba:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007bbe:	30 18       	mov	r8,1
80007bc0:	f0 09 18 00 	cp.b	r9,r8
80007bc4:	e0 88 00 04 	brls	80007bcc <mci_init+0x28>
    return MCI_INVALID_INPUT;
80007bc8:	30 18       	mov	r8,1
80007bca:	c3 98       	rjmp	80007c3c <mci_init+0x98>

  // Initialize all bits of the shadow status register.
  shadow_sr=0;
80007bcc:	49 e8       	lddpc	r8,80007c44 <mci_init+0xa0>
80007bce:	30 09       	mov	r9,0
80007bd0:	91 09       	st.w	r8[0x0],r9

  // Reset the MCI
  mci_reset(mci);
80007bd2:	ee fc ff fc 	ld.w	r12,r7[-4]
80007bd6:	f0 1f 00 1d 	mcall	80007c48 <mci_init+0xa4>

  // Disable the MCI
  mci_disable(mci);
80007bda:	ee fc ff fc 	ld.w	r12,r7[-4]
80007bde:	f0 1f 00 1c 	mcall	80007c4c <mci_init+0xa8>

  // Disable all the interrupts
  mci->idr = 0xffffffff;
80007be2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007be6:	3f f9       	mov	r9,-1
80007be8:	f1 49 00 48 	st.w	r8[72],r9

  // Setup configuration register
  mci->cfg = 0;
80007bec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bf0:	30 09       	mov	r9,0
80007bf2:	f1 49 00 54 	st.w	r8[84],r9

  // Clear Mode register
  mci->mr = 0;
80007bf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bfa:	30 09       	mov	r9,0
80007bfc:	91 19       	st.w	r8[0x4],r9

  // Set the Data Timeout Register to 1 Mega Cycles
  mci->dtor = (MCI_DEFAULT_DTOREG);
80007bfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c02:	37 29       	mov	r9,114
80007c04:	91 29       	st.w	r8[0x8],r9

  // Set the Mode Register
  mci_set_speed(mci, pbb_hz, MCI_DEFAULT_SPEED_HZ);
80007c06:	e2 7a 0d 40 	mov	r10,200000
80007c0a:	ee fb ff f4 	ld.w	r11,r7[-12]
80007c0e:	ee fc ff fc 	ld.w	r12,r7[-4]
80007c12:	f0 1f 00 10 	mcall	80007c50 <mci_init+0xac>
  mci->mr |= ((MCI_DEFAULT_PWSDIV<<AVR32_MCI_MR_PWSDIV) | AVR32_MCI_MR_RDPROOF_MASK | AVR32_MCI_MR_WRPROOF_MASK);
80007c16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c1a:	70 18       	ld.w	r8,r8[0x4]
80007c1c:	10 99       	mov	r9,r8
80007c1e:	e8 19 1f 00 	orl	r9,0x1f00
80007c22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c26:	91 19       	st.w	r8[0x4],r9

  // Set the SD/MMC Card Register
  mci->sdcr = (MCI_BUS_SIZE_1_BIT>>AVR32_MCI_SDCR_SDCBUS_OFFSET)|(card_slot>>AVR32_MCI_SDCR_SDCSEL_OFFSET);
80007c28:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007c2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c30:	91 39       	st.w	r8[0xc],r9

  // Enable the MCI and the Power Saving
  mci_enable(mci);
80007c32:	ee fc ff fc 	ld.w	r12,r7[-4]
80007c36:	f0 1f 00 08 	mcall	80007c54 <mci_init+0xb0>

  return MCI_SUCCESS;
80007c3a:	30 08       	mov	r8,0
}
80007c3c:	10 9c       	mov	r12,r8
80007c3e:	2f dd       	sub	sp,-12
80007c40:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c44:	00 00       	add	r0,r0
80007c46:	06 58       	eor	r8,r3
80007c48:	80 00       	ld.sh	r0,r0[0x0]
80007c4a:	7a 70       	ld.w	r0,sp[0x1c]
80007c4c:	80 00       	ld.sh	r0,r0[0x0]
80007c4e:	7a 8c       	ld.w	r12,sp[0x20]
80007c50:	80 00       	ld.sh	r0,r0[0x0]
80007c52:	7a c0       	ld.w	r0,sp[0x30]
80007c54:	80 00       	ld.sh	r0,r0[0x0]
80007c56:	7a a6       	ld.w	r6,sp[0x28]

80007c58 <mci_set_block_size>:

void mci_set_block_size(volatile avr32_mci_t *mci,
                        uint16_t length)
{
80007c58:	eb cd 40 80 	pushm	r7,lr
80007c5c:	1a 97       	mov	r7,sp
80007c5e:	20 3d       	sub	sp,12
80007c60:	ef 4c ff f8 	st.w	r7[-8],r12
80007c64:	16 98       	mov	r8,r11
80007c66:	ef 58 ff f4 	st.h	r7[-12],r8
  uint32_t mci_mode_register;

  mci_mode_register = mci->mr;
80007c6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007c6e:	70 18       	ld.w	r8,r8[0x4]
80007c70:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register &= ~AVR32_MCI_MR_BLKLEN_MASK; // Clear previous BLKLEN
80007c74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c78:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80007c7c:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_mode_register |= (length<<AVR32_MCI_MR_BLKLEN_OFFSET); // Set the new value
80007c80:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80007c84:	b1 68       	lsl	r8,0x10
80007c86:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007c8a:	f3 e8 10 08 	or	r8,r9,r8
80007c8e:	ef 48 ff fc 	st.w	r7[-4],r8

  mci->mr = mci_mode_register;
80007c92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007c96:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007c9a:	91 19       	st.w	r8[0x4],r9
}
80007c9c:	2f dd       	sub	sp,-12
80007c9e:	e3 cd 80 80 	ldm	sp++,r7,pc

80007ca2 <mci_set_block_count>:

void mci_set_block_count(volatile avr32_mci_t *mci,
                         uint16_t cnt)
{
80007ca2:	eb cd 40 80 	pushm	r7,lr
80007ca6:	1a 97       	mov	r7,sp
80007ca8:	20 3d       	sub	sp,12
80007caa:	ef 4c ff f8 	st.w	r7[-8],r12
80007cae:	16 98       	mov	r8,r11
80007cb0:	ef 58 ff f4 	st.h	r7[-12],r8
    uint32_t          blkr;
    avr32_mci_blkr_t  BLKR;
  };
  union u_blkr val;

  val.blkr = mci->blkr;
80007cb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007cb8:	70 68       	ld.w	r8,r8[0x18]
80007cba:	ef 48 ff fc 	st.w	r7[-4],r8
  val.BLKR.bcnt = cnt;
80007cbe:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80007cc2:	ef 58 ff fe 	st.h	r7[-2],r8
  mci->blkr = val.blkr;
80007cc6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007cca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007cce:	91 69       	st.w	r8[0x18],r9
}
80007cd0:	2f dd       	sub	sp,-12
80007cd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80007cd6:	d7 03       	nop

80007cd8 <mci_send_cmd>:

int mci_send_cmd(volatile avr32_mci_t *mci,
                 unsigned int cmd,
                 unsigned int arg)
{
80007cd8:	eb cd 40 80 	pushm	r7,lr
80007cdc:	1a 97       	mov	r7,sp
80007cde:	20 7d       	sub	sp,28
80007ce0:	ef 4c ff ec 	st.w	r7[-20],r12
80007ce4:	ef 4b ff e8 	st.w	r7[-24],r11
80007ce8:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int	error;

  // Send the command
  mci->argr = arg;
80007cec:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007cf0:	ee f9 ff e4 	ld.w	r9,r7[-28]
80007cf4:	91 49       	st.w	r8[0x10],r9
  mci->cmdr = cmd;
80007cf6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007cfa:	ee f9 ff e8 	ld.w	r9,r7[-24]
80007cfe:	91 59       	st.w	r8[0x14],r9
80007d00:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007d04:	ef 48 ff f4 	st.w	r7[-12],r8
80007d08:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007d0c:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80007d10:	4a 78       	lddpc	r8,80007dac <mci_send_cmd+0xd4>
80007d12:	70 08       	ld.w	r8,r8[0x0]
80007d14:	10 99       	mov	r9,r8
80007d16:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007d1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007d1e:	71 08       	ld.w	r8,r8[0x40]
80007d20:	f3 e8 10 08 	or	r8,r9,r8
80007d24:	10 99       	mov	r9,r8
80007d26:	4a 28       	lddpc	r8,80007dac <mci_send_cmd+0xd4>
80007d28:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007d2a:	4a 18       	lddpc	r8,80007dac <mci_send_cmd+0xd4>
80007d2c:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_cmd_ready(volatile avr32_mci_t *mci)
{
  return ((mci_get_sr(mci)&AVR32_MCI_SR_CMDRDY_MASK) != 0);
80007d2e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // wait for CMDRDY Status flag to read the response
  while( !(mci_cmd_ready(mci)) );
80007d32:	ce 70       	breq	80007d00 <mci_send_cmd+0x28>
80007d34:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007d38:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80007d3c:	49 c8       	lddpc	r8,80007dac <mci_send_cmd+0xd4>
80007d3e:	70 08       	ld.w	r8,r8[0x0]
80007d40:	10 99       	mov	r9,r8
80007d42:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007d46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007d4a:	71 08       	ld.w	r8,r8[0x40]
80007d4c:	f3 e8 10 08 	or	r8,r9,r8
80007d50:	10 99       	mov	r9,r8
80007d52:	49 78       	lddpc	r8,80007dac <mci_send_cmd+0xd4>
80007d54:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007d56:	49 68       	lddpc	r8,80007dac <mci_send_cmd+0xd4>
80007d58:	70 08       	ld.w	r8,r8[0x0]

  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
80007d5a:	e6 18 c0 7f 	andh	r8,0xc07f,COH
80007d5e:	ef 48 ff f0 	st.w	r7[-16],r8
  if(error != 0 )
80007d62:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007d66:	58 08       	cp.w	r8,0
80007d68:	c1 d0       	breq	80007da2 <mci_send_cmd+0xca>
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
80007d6a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007d6e:	e0 48 00 69 	cp.w	r8,105
80007d72:	c0 f0       	breq	80007d90 <mci_send_cmd+0xb8>
80007d74:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007d78:	e0 48 08 41 	cp.w	r8,2113
80007d7c:	c0 a0       	breq	80007d90 <mci_send_cmd+0xb8>
    {
      if( error != AVR32_MCI_SR_RTOE_MASK )
80007d7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007d82:	fc 19 00 10 	movh	r9,0x10
80007d86:	12 38       	cp.w	r8,r9
80007d88:	c0 c0       	breq	80007da0 <mci_send_cmd+0xc8>
        // filter RTOE error which happens when using the HS mode
        return error;
80007d8a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007d8e:	c0 b8       	rjmp	80007da4 <mci_send_cmd+0xcc>
    }
    else
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
80007d90:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007d94:	e4 48 00 00 	cp.w	r8,262144
80007d98:	c0 50       	breq	80007da2 <mci_send_cmd+0xca>
        return error;
80007d9a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007d9e:	c0 38       	rjmp	80007da4 <mci_send_cmd+0xcc>
  // Test error  ==> if crc error and response R3 ==> don't check error
  error = mci_get_sr(mci) & MCI_SR_ERROR;
  if(error != 0 )
  {
    // if the command is SEND_OP_COND the CRC error flag is always present (cf : R3 response)
    if ( (cmd != SD_MMC_SDCARD_APP_OP_COND_CMD) && (cmd != SD_MMC_MMC_SEND_OP_COND_CMD))
80007da0:	d7 03       	nop
    {
      if (error != AVR32_MCI_SR_RCRCE_MASK)
        return error;
    }
  }
  return MCI_SUCCESS;
80007da2:	30 08       	mov	r8,0

}
80007da4:	10 9c       	mov	r12,r8
80007da6:	2f 9d       	sub	sp,-28
80007da8:	e3 cd 80 80 	ldm	sp++,r7,pc
80007dac:	00 00       	add	r0,r0
80007dae:	06 58       	eor	r8,r3

80007db0 <mci_set_bus_size>:

int mci_set_bus_size(volatile avr32_mci_t *mci,
                     uint8_t busWidth)
{
80007db0:	eb cd 40 80 	pushm	r7,lr
80007db4:	1a 97       	mov	r7,sp
80007db6:	20 3d       	sub	sp,12
80007db8:	ef 4c ff f8 	st.w	r7[-8],r12
80007dbc:	16 98       	mov	r8,r11
80007dbe:	ef 68 ff f4 	st.b	r7[-12],r8
  uint32_t mci_sdcr_register;

  if (busWidth > MCI_BUS_SIZE_8_BIT)
80007dc2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80007dc6:	30 38       	mov	r8,3
80007dc8:	f0 09 18 00 	cp.b	r9,r8
80007dcc:	e0 88 00 04 	brls	80007dd4 <mci_set_bus_size+0x24>
    return MCI_INVALID_INPUT;
80007dd0:	30 18       	mov	r8,1
80007dd2:	c1 b8       	rjmp	80007e08 <mci_set_bus_size+0x58>

  mci_sdcr_register = mci->sdcr;
80007dd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007dd8:	70 38       	ld.w	r8,r8[0xc]
80007dda:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register &= ~AVR32_MCI_SDCR_SDCBUS_MASK; // Clear previous buswidth
80007dde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007de2:	e0 18 ff 3f 	andl	r8,0xff3f
80007de6:	ef 48 ff fc 	st.w	r7[-4],r8
  mci_sdcr_register |= (busWidth<<AVR32_MCI_SDCR_SDCBUS_OFFSET);
80007dea:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007dee:	a7 68       	lsl	r8,0x6
80007df0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007df4:	f3 e8 10 08 	or	r8,r9,r8
80007df8:	ef 48 ff fc 	st.w	r7[-4],r8
  mci->sdcr = mci_sdcr_register;
80007dfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007e04:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
80007e06:	30 08       	mov	r8,0
}
80007e08:	10 9c       	mov	r12,r8
80007e0a:	2f dd       	sub	sp,-12
80007e0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80007e10 <mci_read_response>:


unsigned int mci_read_response(volatile avr32_mci_t *mci)
{
80007e10:	eb cd 40 80 	pushm	r7,lr
80007e14:	1a 97       	mov	r7,sp
80007e16:	20 1d       	sub	sp,4
80007e18:	ef 4c ff fc 	st.w	r7[-4],r12
  return mci->rspr0;
80007e1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007e20:	70 88       	ld.w	r8,r8[0x20]
}
80007e22:	10 9c       	mov	r12,r8
80007e24:	2f fd       	sub	sp,-4
80007e26:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e2a:	d7 03       	nop

80007e2c <mci_wait_busy_signal>:

void mci_wait_busy_signal(volatile avr32_mci_t *mci)
{
80007e2c:	eb cd 40 80 	pushm	r7,lr
80007e30:	1a 97       	mov	r7,sp
80007e32:	20 2d       	sub	sp,8
80007e34:	ef 4c ff f8 	st.w	r7[-8],r12
80007e38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e3c:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80007e40:	48 b8       	lddpc	r8,80007e6c <mci_wait_busy_signal+0x40>
80007e42:	70 08       	ld.w	r8,r8[0x0]
80007e44:	10 99       	mov	r9,r8
80007e46:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007e4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007e4e:	71 08       	ld.w	r8,r8[0x40]
80007e50:	f3 e8 10 08 	or	r8,r9,r8
80007e54:	10 99       	mov	r9,r8
80007e56:	48 68       	lddpc	r8,80007e6c <mci_wait_busy_signal+0x40>
80007e58:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007e5a:	48 58       	lddpc	r8,80007e6c <mci_wait_busy_signal+0x40>
80007e5c:	70 08       	ld.w	r8,r8[0x0]
  while(!(mci_get_sr(mci)&AVR32_MCI_SR_NOTBUSY_MASK));
80007e5e:	e2 18 00 20 	andl	r8,0x20,COH
80007e62:	ce b0       	breq	80007e38 <mci_wait_busy_signal+0xc>
}
80007e64:	2f ed       	sub	sp,-8
80007e66:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e6a:	00 00       	add	r0,r0
80007e6c:	00 00       	add	r0,r0
80007e6e:	06 58       	eor	r8,r3

80007e70 <mci_select_card>:

int mci_select_card(volatile avr32_mci_t *mci,
                    uint8_t card_slot,
                    uint8_t bus_width)
{
80007e70:	eb cd 40 80 	pushm	r7,lr
80007e74:	1a 97       	mov	r7,sp
80007e76:	20 3d       	sub	sp,12
80007e78:	ef 4c ff fc 	st.w	r7[-4],r12
80007e7c:	16 99       	mov	r9,r11
80007e7e:	14 98       	mov	r8,r10
80007e80:	ef 69 ff f8 	st.b	r7[-8],r9
80007e84:	ef 68 ff f4 	st.b	r7[-12],r8
  if (card_slot > MCI_LAST_SLOTS)
80007e88:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007e8c:	30 18       	mov	r8,1
80007e8e:	f0 09 18 00 	cp.b	r9,r8
80007e92:	e0 88 00 04 	brls	80007e9a <mci_select_card+0x2a>
    return MCI_INVALID_INPUT;
80007e96:	30 18       	mov	r8,1
80007e98:	c0 e8       	rjmp	80007eb4 <mci_select_card+0x44>

  // Select the card slot and bus width
  mci->sdcr = (bus_width<<AVR32_MCI_SDCR_SDCBUS_OFFSET) | (card_slot<<AVR32_MCI_SDCR_SDCSEL_OFFSET);
80007e9a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007e9e:	f0 09 15 06 	lsl	r9,r8,0x6
80007ea2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007ea6:	f3 e8 10 08 	or	r8,r9,r8
80007eaa:	10 99       	mov	r9,r8
80007eac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007eb0:	91 39       	st.w	r8[0xc],r9

  return MCI_SUCCESS;
80007eb2:	30 08       	mov	r8,0
}
80007eb4:	10 9c       	mov	r12,r8
80007eb6:	2f dd       	sub	sp,-12
80007eb8:	e3 cd 80 80 	ldm	sp++,r7,pc

80007ebc <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80007ebc:	eb cd 40 80 	pushm	r7,lr
80007ec0:	1a 97       	mov	r7,sp
80007ec2:	20 1d       	sub	sp,4
80007ec4:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80007ec8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007ecc:	e6 18 00 01 	andh	r8,0x1,COH
80007ed0:	5f 08       	sreq	r8
80007ed2:	5c 58       	castu.b	r8
}
80007ed4:	10 9c       	mov	r12,r8
80007ed6:	2f fd       	sub	sp,-4
80007ed8:	e3 cd 80 80 	ldm	sp++,r7,pc

80007edc <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80007edc:	eb cd 40 80 	pushm	r7,lr
80007ee0:	1a 97       	mov	r7,sp
80007ee2:	20 4d       	sub	sp,16
80007ee4:	ef 4c ff f8 	st.w	r7[-8],r12
80007ee8:	ef 4b ff f4 	st.w	r7[-12],r11
80007eec:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80007ef0:	e1 b8 00 00 	mfsr	r8,0x0
80007ef4:	10 9c       	mov	r12,r8
80007ef6:	f0 1f 00 73 	mcall	800080c0 <tc_configure_interrupts+0x1e4>
80007efa:	18 98       	mov	r8,r12
80007efc:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80007f00:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007f04:	58 28       	cp.w	r8,2
80007f06:	e0 88 00 04 	brls	80007f0e <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
80007f0a:	3f f8       	mov	r8,-1
80007f0c:	cd 68       	rjmp	800080b8 <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80007f0e:	ee fb ff f4 	ld.w	r11,r7[-12]
80007f12:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f16:	70 08       	ld.w	r8,r8[0x0]
80007f18:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80007f1c:	5c 58       	castu.b	r8
80007f1e:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
80007f22:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f26:	70 08       	ld.w	r8,r8[0x0]
80007f28:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80007f2c:	5c 58       	castu.b	r8
80007f2e:	a7 68       	lsl	r8,0x6
80007f30:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
80007f32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f36:	70 08       	ld.w	r8,r8[0x0]
80007f38:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80007f3c:	5c 58       	castu.b	r8
80007f3e:	a5 78       	lsl	r8,0x5
80007f40:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
80007f42:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f46:	70 08       	ld.w	r8,r8[0x0]
80007f48:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80007f4c:	5c 58       	castu.b	r8
80007f4e:	a5 68       	lsl	r8,0x4
80007f50:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
80007f52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f56:	70 08       	ld.w	r8,r8[0x0]
80007f58:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80007f5c:	5c 58       	castu.b	r8
80007f5e:	a3 78       	lsl	r8,0x3
80007f60:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
80007f62:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f66:	70 08       	ld.w	r8,r8[0x0]
80007f68:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80007f6c:	5c 58       	castu.b	r8
80007f6e:	a3 68       	lsl	r8,0x2
80007f70:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
80007f72:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f76:	70 08       	ld.w	r8,r8[0x0]
80007f78:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80007f7c:	5c 58       	castu.b	r8
80007f7e:	a1 78       	lsl	r8,0x1
80007f80:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
80007f82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f86:	70 08       	ld.w	r8,r8[0x0]
80007f88:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007f8c:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80007f8e:	f3 e8 10 08 	or	r8,r9,r8
80007f92:	10 99       	mov	r9,r8
80007f94:	ee fa ff f8 	ld.w	r10,r7[-8]
80007f98:	f6 08 15 06 	lsl	r8,r11,0x6
80007f9c:	f4 08 00 08 	add	r8,r10,r8
80007fa0:	2d c8       	sub	r8,-36
80007fa2:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80007fa4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007fa8:	30 08       	mov	r8,0
80007faa:	f0 09 18 00 	cp.b	r9,r8
80007fae:	c0 20       	breq	80007fb2 <tc_configure_interrupts+0xd6>
80007fb0:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80007fb2:	ee fb ff f4 	ld.w	r11,r7[-12]
80007fb6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007fba:	70 08       	ld.w	r8,r8[0x0]
80007fbc:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80007fc0:	5c 58       	castu.b	r8
80007fc2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007fc6:	c0 41       	brne	80007fce <tc_configure_interrupts+0xf2>
80007fc8:	e0 69 00 80 	mov	r9,128
80007fcc:	c0 28       	rjmp	80007fd0 <tc_configure_interrupts+0xf4>
80007fce:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80007fd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007fd4:	70 08       	ld.w	r8,r8[0x0]
80007fd6:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80007fda:	5c 58       	castu.b	r8
80007fdc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007fe0:	c0 31       	brne	80007fe6 <tc_configure_interrupts+0x10a>
80007fe2:	34 08       	mov	r8,64
80007fe4:	c0 28       	rjmp	80007fe8 <tc_configure_interrupts+0x10c>
80007fe6:	30 08       	mov	r8,0
80007fe8:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80007fea:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007fee:	70 08       	ld.w	r8,r8[0x0]
80007ff0:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80007ff4:	5c 58       	castu.b	r8
80007ff6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007ffa:	c0 31       	brne	80008000 <tc_configure_interrupts+0x124>
80007ffc:	32 08       	mov	r8,32
80007ffe:	c0 28       	rjmp	80008002 <tc_configure_interrupts+0x126>
80008000:	30 08       	mov	r8,0
80008002:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80008004:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008008:	70 08       	ld.w	r8,r8[0x0]
8000800a:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
8000800e:	5c 58       	castu.b	r8
80008010:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008014:	c0 31       	brne	8000801a <tc_configure_interrupts+0x13e>
80008016:	31 08       	mov	r8,16
80008018:	c0 28       	rjmp	8000801c <tc_configure_interrupts+0x140>
8000801a:	30 08       	mov	r8,0
8000801c:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
8000801e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008022:	70 08       	ld.w	r8,r8[0x0]
80008024:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80008028:	5c 58       	castu.b	r8
8000802a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000802e:	c0 31       	brne	80008034 <tc_configure_interrupts+0x158>
80008030:	30 88       	mov	r8,8
80008032:	c0 28       	rjmp	80008036 <tc_configure_interrupts+0x15a>
80008034:	30 08       	mov	r8,0
80008036:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80008038:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000803c:	70 08       	ld.w	r8,r8[0x0]
8000803e:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80008042:	5c 58       	castu.b	r8
80008044:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008048:	c0 31       	brne	8000804e <tc_configure_interrupts+0x172>
8000804a:	30 48       	mov	r8,4
8000804c:	c0 28       	rjmp	80008050 <tc_configure_interrupts+0x174>
8000804e:	30 08       	mov	r8,0
80008050:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80008052:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008056:	70 08       	ld.w	r8,r8[0x0]
80008058:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
8000805c:	5c 58       	castu.b	r8
8000805e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008062:	c0 31       	brne	80008068 <tc_configure_interrupts+0x18c>
80008064:	30 28       	mov	r8,2
80008066:	c0 28       	rjmp	8000806a <tc_configure_interrupts+0x18e>
80008068:	30 08       	mov	r8,0
8000806a:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
8000806c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008070:	70 08       	ld.w	r8,r8[0x0]
80008072:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008076:	5c 58       	castu.b	r8
80008078:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000807c:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000807e:	f3 e8 10 08 	or	r8,r9,r8
80008082:	10 99       	mov	r9,r8
80008084:	ee fa ff f8 	ld.w	r10,r7[-8]
80008088:	f6 08 15 06 	lsl	r8,r11,0x6
8000808c:	f4 08 00 08 	add	r8,r10,r8
80008090:	2d 88       	sub	r8,-40
80008092:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80008094:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008098:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000809c:	a1 78       	lsl	r8,0x1
8000809e:	2f f8       	sub	r8,-1
800080a0:	a5 78       	lsl	r8,0x5
800080a2:	f2 08 00 08 	add	r8,r9,r8
800080a6:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800080a8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800080ac:	30 08       	mov	r8,0
800080ae:	f0 09 18 00 	cp.b	r9,r8
800080b2:	c0 20       	breq	800080b6 <tc_configure_interrupts+0x1da>
800080b4:	d5 03       	csrf	0x10

  return 0;
800080b6:	30 08       	mov	r8,0
}
800080b8:	10 9c       	mov	r12,r8
800080ba:	2f cd       	sub	sp,-16
800080bc:	e3 cd 80 80 	ldm	sp++,r7,pc
800080c0:	80 00       	ld.sh	r0,r0[0x0]
800080c2:	7e bc       	ld.w	r12,pc[0x2c]

800080c4 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
800080c4:	eb cd 40 80 	pushm	r7,lr
800080c8:	1a 97       	mov	r7,sp
800080ca:	20 2d       	sub	sp,8
800080cc:	ef 4c ff fc 	st.w	r7[-4],r12
800080d0:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800080d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080d8:	70 08       	ld.w	r8,r8[0x0]
800080da:	58 28       	cp.w	r8,2
800080dc:	e0 88 00 04 	brls	800080e4 <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
800080e0:	3f f8       	mov	r8,-1
800080e2:	c9 78       	rjmp	80008210 <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800080e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080e8:	70 09       	ld.w	r9,r8[0x0]
800080ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080ee:	70 18       	ld.w	r8,r8[0x4]
800080f0:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
800080f4:	5c 58       	castu.b	r8
800080f6:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
800080fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080fe:	70 18       	ld.w	r8,r8[0x4]
80008100:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
80008104:	5c 58       	castu.b	r8
80008106:	bd 68       	lsl	r8,0x1c
80008108:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
8000810a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000810e:	70 18       	ld.w	r8,r8[0x4]
80008110:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
80008114:	5c 58       	castu.b	r8
80008116:	bb 68       	lsl	r8,0x1a
80008118:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
8000811a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000811e:	70 18       	ld.w	r8,r8[0x4]
80008120:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
80008124:	5c 58       	castu.b	r8
80008126:	b9 68       	lsl	r8,0x18
80008128:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
8000812a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000812e:	70 18       	ld.w	r8,r8[0x4]
80008130:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
80008134:	5c 58       	castu.b	r8
80008136:	b7 68       	lsl	r8,0x16
80008138:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
8000813a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000813e:	70 18       	ld.w	r8,r8[0x4]
80008140:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
80008144:	5c 58       	castu.b	r8
80008146:	b5 68       	lsl	r8,0x14
80008148:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
8000814a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000814e:	70 18       	ld.w	r8,r8[0x4]
80008150:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
80008154:	5c 58       	castu.b	r8
80008156:	b3 68       	lsl	r8,0x12
80008158:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
8000815a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000815e:	70 18       	ld.w	r8,r8[0x4]
80008160:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80008164:	5c 58       	castu.b	r8
80008166:	b1 68       	lsl	r8,0x10
80008168:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
8000816c:	10 9a       	mov	r10,r8
8000816e:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
80008170:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008174:	70 18       	ld.w	r8,r8[0x4]
80008176:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
8000817a:	5c 58       	castu.b	r8
8000817c:	ad 78       	lsl	r8,0xd
8000817e:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
80008180:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008184:	70 18       	ld.w	r8,r8[0x4]
80008186:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
8000818a:	5c 58       	castu.b	r8
8000818c:	ad 68       	lsl	r8,0xc
8000818e:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
80008190:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008194:	70 18       	ld.w	r8,r8[0x4]
80008196:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
8000819a:	5c 58       	castu.b	r8
8000819c:	ab 68       	lsl	r8,0xa
8000819e:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
800081a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081a4:	70 18       	ld.w	r8,r8[0x4]
800081a6:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
800081aa:	5c 58       	castu.b	r8
800081ac:	a9 68       	lsl	r8,0x8
800081ae:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
800081b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081b4:	70 18       	ld.w	r8,r8[0x4]
800081b6:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800081ba:	5c 58       	castu.b	r8
800081bc:	a7 78       	lsl	r8,0x7
800081be:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
800081c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081c4:	70 18       	ld.w	r8,r8[0x4]
800081c6:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800081ca:	5c 58       	castu.b	r8
800081cc:	a7 68       	lsl	r8,0x6
800081ce:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
800081d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081d4:	70 18       	ld.w	r8,r8[0x4]
800081d6:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
800081da:	5c 58       	castu.b	r8
800081dc:	a5 68       	lsl	r8,0x4
800081de:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
800081e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081e4:	70 18       	ld.w	r8,r8[0x4]
800081e6:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800081ea:	5c 58       	castu.b	r8
800081ec:	a3 78       	lsl	r8,0x3
800081ee:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
800081f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081f4:	70 18       	ld.w	r8,r8[0x4]
800081f6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800081fa:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800081fc:	f5 e8 10 08 	or	r8,r10,r8
80008200:	10 9a       	mov	r10,r8
80008202:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008206:	a5 69       	lsl	r9,0x4
80008208:	2f f9       	sub	r9,-1
8000820a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
8000820e:	30 08       	mov	r8,0
}
80008210:	10 9c       	mov	r12,r8
80008212:	2f ed       	sub	sp,-8
80008214:	e3 cd 80 80 	ldm	sp++,r7,pc

80008218 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80008218:	eb cd 40 80 	pushm	r7,lr
8000821c:	1a 97       	mov	r7,sp
8000821e:	20 2d       	sub	sp,8
80008220:	ef 4c ff fc 	st.w	r7[-4],r12
80008224:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80008228:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000822c:	58 28       	cp.w	r8,2
8000822e:	e0 88 00 04 	brls	80008236 <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
80008232:	3f f8       	mov	r8,-1
80008234:	c0 b8       	rjmp	8000824a <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80008236:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000823a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000823e:	a7 68       	lsl	r8,0x6
80008240:	f2 08 00 08 	add	r8,r9,r8
80008244:	30 59       	mov	r9,5
80008246:	91 09       	st.w	r8[0x0],r9

  return 0;
80008248:	30 08       	mov	r8,0
}
8000824a:	10 9c       	mov	r12,r8
8000824c:	2f ed       	sub	sp,-8
8000824e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008252 <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
80008252:	eb cd 40 80 	pushm	r7,lr
80008256:	1a 97       	mov	r7,sp
80008258:	20 2d       	sub	sp,8
8000825a:	ef 4c ff fc 	st.w	r7[-4],r12
8000825e:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80008262:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008266:	58 28       	cp.w	r8,2
80008268:	e0 88 00 04 	brls	80008270 <tc_read_sr+0x1e>
    return TC_INVALID_ARGUMENT;
8000826c:	3f f8       	mov	r8,-1
8000826e:	c0 b8       	rjmp	80008284 <tc_read_sr+0x32>

  return tc->channel[channel].sr;
80008270:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008274:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008278:	a1 78       	lsl	r8,0x1
8000827a:	2f f8       	sub	r8,-1
8000827c:	a5 78       	lsl	r8,0x5
8000827e:	f2 08 00 08 	add	r8,r9,r8
80008282:	70 08       	ld.w	r8,r8[0x0]
}
80008284:	10 9c       	mov	r12,r8
80008286:	2f ed       	sub	sp,-8
80008288:	e3 cd 80 80 	ldm	sp++,r7,pc

8000828c <tc_write_rc>:
  return value;
}


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
8000828c:	eb cd 40 80 	pushm	r7,lr
80008290:	1a 97       	mov	r7,sp
80008292:	20 3d       	sub	sp,12
80008294:	ef 4c ff fc 	st.w	r7[-4],r12
80008298:	ef 4b ff f8 	st.w	r7[-8],r11
8000829c:	14 98       	mov	r8,r10
8000829e:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800082a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082a6:	58 28       	cp.w	r8,2
800082a8:	e0 88 00 04 	brls	800082b0 <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
800082ac:	3f f8       	mov	r8,-1
800082ae:	c2 78       	rjmp	800082fc <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800082b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800082b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800082b8:	a5 69       	lsl	r9,0x4
800082ba:	2f f9       	sub	r9,-1
800082bc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800082c0:	e2 18 80 00 	andl	r8,0x8000,COH
800082c4:	c1 a0       	breq	800082f8 <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
800082c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800082ce:	ee fa ff fc 	ld.w	r10,r7[-4]
800082d2:	a7 69       	lsl	r9,0x6
800082d4:	f4 09 00 09 	add	r9,r10,r9
800082d8:	2e 49       	sub	r9,-28
800082da:	72 09       	ld.w	r9,r9[0x0]
800082dc:	12 9a       	mov	r10,r9
800082de:	e0 1a 00 00 	andl	r10,0x0
800082e2:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800082e6:	f5 e9 10 09 	or	r9,r10,r9
800082ea:	ee fa ff fc 	ld.w	r10,r7[-4]
800082ee:	a7 68       	lsl	r8,0x6
800082f0:	f4 08 00 08 	add	r8,r10,r8
800082f4:	2e 48       	sub	r8,-28
800082f6:	91 09       	st.w	r8[0x0],r9

  return value;
800082f8:	ef 18 ff f4 	ld.uh	r8,r7[-12]
}
800082fc:	10 9c       	mov	r12,r8
800082fe:	2f dd       	sub	sp,-12
80008300:	e3 cd 80 80 	ldm	sp++,r7,pc

80008304 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80008304:	eb cd 40 80 	pushm	r7,lr
80008308:	1a 97       	mov	r7,sp
8000830a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000830c:	e1 b8 00 00 	mfsr	r8,0x0
80008310:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80008314:	d3 03       	ssrf	0x10

	return flags;
80008316:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000831a:	10 9c       	mov	r12,r8
8000831c:	2f fd       	sub	sp,-4
8000831e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008322 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
80008322:	eb cd 40 80 	pushm	r7,lr
80008326:	1a 97       	mov	r7,sp
80008328:	20 1d       	sub	sp,4
8000832a:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000832e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008332:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80008336:	2f fd       	sub	sp,-4
80008338:	e3 cd 80 80 	ldm	sp++,r7,pc

8000833c <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
8000833c:	eb cd 40 80 	pushm	r7,lr
80008340:	1a 97       	mov	r7,sp
80008342:	20 2d       	sub	sp,8
80008344:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
80008348:	f0 1f 00 0b 	mcall	80008374 <sleepmgr_lock_mode+0x38>
8000834c:	18 98       	mov	r8,r12
8000834e:	ef 48 ff fc 	st.w	r7[-4],r8

	++sleepmgr_locks[mode];
80008352:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008356:	48 99       	lddpc	r9,80008378 <sleepmgr_lock_mode+0x3c>
80008358:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000835c:	2f f9       	sub	r9,-1
8000835e:	5c 59       	castu.b	r9
80008360:	48 6a       	lddpc	r10,80008378 <sleepmgr_lock_mode+0x3c>
80008362:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
80008366:	ee fc ff fc 	ld.w	r12,r7[-4]
8000836a:	f0 1f 00 05 	mcall	8000837c <sleepmgr_lock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000836e:	2f ed       	sub	sp,-8
80008370:	e3 cd 80 80 	ldm	sp++,r7,pc
80008374:	80 00       	ld.sh	r0,r0[0x0]
80008376:	83 04       	st.w	r1[0x0],r4
80008378:	00 00       	add	r0,r0
8000837a:	0b e0       	ld.ub	r0,r5[0x6]
8000837c:	80 00       	ld.sh	r0,r0[0x0]
8000837e:	83 22       	st.w	r1[0x8],r2

80008380 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
80008380:	eb cd 40 80 	pushm	r7,lr
80008384:	1a 97       	mov	r7,sp
80008386:	20 2d       	sub	sp,8
80008388:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();
8000838c:	f0 1f 00 0b 	mcall	800083b8 <sleepmgr_unlock_mode+0x38>
80008390:	18 98       	mov	r8,r12
80008392:	ef 48 ff fc 	st.w	r7[-4],r8

	--sleepmgr_locks[mode];
80008396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000839a:	48 99       	lddpc	r9,800083bc <sleepmgr_unlock_mode+0x3c>
8000839c:	f2 08 07 09 	ld.ub	r9,r9[r8]
800083a0:	20 19       	sub	r9,1
800083a2:	5c 59       	castu.b	r9
800083a4:	48 6a       	lddpc	r10,800083bc <sleepmgr_unlock_mode+0x3c>
800083a6:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
800083aa:	ee fc ff fc 	ld.w	r12,r7[-4]
800083ae:	f0 1f 00 05 	mcall	800083c0 <sleepmgr_unlock_mode+0x40>
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
800083b2:	2f ed       	sub	sp,-8
800083b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800083b8:	80 00       	ld.sh	r0,r0[0x0]
800083ba:	83 04       	st.w	r1[0x0],r4
800083bc:	00 00       	add	r0,r0
800083be:	0b e0       	ld.ub	r0,r5[0x6]
800083c0:	80 00       	ld.sh	r0,r0[0x0]
800083c2:	83 22       	st.w	r1[0x8],r2

800083c4 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
800083c4:	eb cd 40 80 	pushm	r7,lr
800083c8:	1a 97       	mov	r7,sp
800083ca:	20 1d       	sub	sp,4
800083cc:	18 98       	mov	r8,r12
800083ce:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!b_idle && udd_b_idle) {
800083d2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800083d6:	ec 18 00 01 	eorl	r8,0x1
800083da:	5c 58       	castu.b	r8
800083dc:	c0 80       	breq	800083ec <udd_sleep_mode+0x28>
800083de:	48 f8       	lddpc	r8,80008418 <udd_sleep_mode+0x54>
800083e0:	11 88       	ld.ub	r8,r8[0x0]
800083e2:	58 08       	cp.w	r8,0
800083e4:	c0 40       	breq	800083ec <udd_sleep_mode+0x28>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
800083e6:	30 1c       	mov	r12,1
800083e8:	f0 1f 00 0d 	mcall	8000841c <udd_sleep_mode+0x58>
	}
	if (b_idle && !udd_b_idle) {
800083ec:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800083f0:	30 08       	mov	r8,0
800083f2:	f0 09 18 00 	cp.b	r9,r8
800083f6:	c0 a0       	breq	8000840a <udd_sleep_mode+0x46>
800083f8:	48 88       	lddpc	r8,80008418 <udd_sleep_mode+0x54>
800083fa:	11 88       	ld.ub	r8,r8[0x0]
800083fc:	ec 18 00 01 	eorl	r8,0x1
80008400:	5c 58       	castu.b	r8
80008402:	c0 40       	breq	8000840a <udd_sleep_mode+0x46>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
80008404:	30 1c       	mov	r12,1
80008406:	f0 1f 00 07 	mcall	80008420 <udd_sleep_mode+0x5c>
	}
	udd_b_idle = b_idle;
8000840a:	48 49       	lddpc	r9,80008418 <udd_sleep_mode+0x54>
8000840c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008410:	b2 88       	st.b	r9[0x0],r8
}
80008412:	2f fd       	sub	sp,-4
80008414:	e3 cd 80 80 	ldm	sp++,r7,pc
80008418:	00 00       	add	r0,r0
8000841a:	06 5c       	eor	r12,r3
8000841c:	80 00       	ld.sh	r0,r0[0x0]
8000841e:	83 80       	st.w	r1[0x20],r0
80008420:	80 00       	ld.sh	r0,r0[0x0]
80008422:	83 3c       	st.w	r1[0xc],r12

80008424 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
80008424:	eb cd 40 80 	pushm	r7,lr
80008428:	1a 97       	mov	r7,sp
	if (Is_udd_sof()) {
8000842a:	fe 68 00 04 	mov	r8,-131068
8000842e:	70 08       	ld.w	r8,r8[0x0]
80008430:	e2 18 00 04 	andl	r8,0x4,COH
80008434:	c1 10       	breq	80008456 <udd_interrupt+0x32>
		udd_ack_sof();
80008436:	fe 68 00 08 	mov	r8,-131064
8000843a:	30 49       	mov	r9,4
8000843c:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
8000843e:	fe 68 08 04 	mov	r8,-129020
80008442:	70 08       	ld.w	r8,r8[0x0]
80008444:	e2 18 30 00 	andl	r8,0x3000,COH
80008448:	ad 88       	lsr	r8,0xc
8000844a:	c0 31       	brne	80008450 <udd_interrupt+0x2c>
			udc_sof_notify();
8000844c:	f0 1f 00 54 	mcall	8000859c <udd_interrupt+0x178>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
80008450:	f0 1f 00 54 	mcall	800085a0 <udd_interrupt+0x17c>
#endif
		goto udd_interrupt_end;
80008454:	c9 d8       	rjmp	8000858e <udd_interrupt+0x16a>
	}
	if (Is_udd_msof()) {
80008456:	fe 68 00 04 	mov	r8,-131068
8000845a:	70 08       	ld.w	r8,r8[0x0]
8000845c:	e2 18 00 02 	andl	r8,0x2,COH
80008460:	c0 80       	breq	80008470 <udd_interrupt+0x4c>
		udd_ack_msof();
80008462:	fe 68 00 08 	mov	r8,-131064
80008466:	30 29       	mov	r9,2
80008468:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
8000846a:	f0 1f 00 4d 	mcall	8000859c <udd_interrupt+0x178>
		goto udd_interrupt_end;
8000846e:	c9 08       	rjmp	8000858e <udd_interrupt+0x16a>
	}

	if (udd_ctrl_interrupt())
80008470:	f0 1f 00 4d 	mcall	800085a4 <udd_interrupt+0x180>
80008474:	18 98       	mov	r8,r12
80008476:	58 08       	cp.w	r8,0
80008478:	e0 81 00 88 	brne	80008588 <udd_interrupt+0x164>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
8000847c:	f0 1f 00 4b 	mcall	800085a8 <udd_interrupt+0x184>
80008480:	18 98       	mov	r8,r12
80008482:	58 08       	cp.w	r8,0
80008484:	e0 81 00 84 	brne	8000858c <udd_interrupt+0x168>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80008488:	fe 68 00 04 	mov	r8,-131068
8000848c:	70 08       	ld.w	r8,r8[0x0]
8000848e:	e2 18 00 08 	andl	r8,0x8,COH
80008492:	c0 e0       	breq	800084ae <udd_interrupt+0x8a>
		udd_ack_reset();
80008494:	fe 68 00 08 	mov	r8,-131064
80008498:	30 89       	mov	r9,8
8000849a:	91 09       	st.w	r8[0x0],r9
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
8000849c:	f0 1f 00 44 	mcall	800085ac <udd_interrupt+0x188>
#endif
		// Reset USB Device Stack Core
		udc_reset();
800084a0:	f0 1f 00 44 	mcall	800085b0 <udd_interrupt+0x18c>
		// Reset endpoint control
		udd_reset_ep_ctrl();
800084a4:	f0 1f 00 44 	mcall	800085b4 <udd_interrupt+0x190>
		// Reset endpoint control management
		udd_ctrl_init();
800084a8:	f0 1f 00 44 	mcall	800085b8 <udd_interrupt+0x194>
		goto udd_interrupt_end;
800084ac:	c7 18       	rjmp	8000858e <udd_interrupt+0x16a>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
800084ae:	fe 68 00 10 	mov	r8,-131056
800084b2:	70 08       	ld.w	r8,r8[0x0]
800084b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800084b8:	5c 58       	castu.b	r8
800084ba:	c2 40       	breq	80008502 <udd_interrupt+0xde>
800084bc:	fe 68 00 04 	mov	r8,-131068
800084c0:	70 08       	ld.w	r8,r8[0x0]
800084c2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800084c6:	5c 58       	castu.b	r8
800084c8:	c1 d0       	breq	80008502 <udd_interrupt+0xde>
		otg_unfreeze_clock();
800084ca:	fe 68 08 00 	mov	r8,-129024
800084ce:	fe 69 08 00 	mov	r9,-129024
800084d2:	72 09       	ld.w	r9,r9[0x0]
800084d4:	af c9       	cbr	r9,0xe
800084d6:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
800084d8:	fe 68 00 14 	mov	r8,-131052
800084dc:	30 19       	mov	r9,1
800084de:	91 09       	st.w	r8[0x0],r9
		udd_enable_wake_up_interrupt();
800084e0:	fe 68 00 18 	mov	r8,-131048
800084e4:	31 09       	mov	r9,16
800084e6:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
800084e8:	fe 68 08 00 	mov	r8,-129024
800084ec:	fe 69 08 00 	mov	r9,-129024
800084f0:	72 09       	ld.w	r9,r9[0x0]
800084f2:	af a9       	sbr	r9,0xe
800084f4:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
800084f6:	30 0c       	mov	r12,0
800084f8:	f0 1f 00 31 	mcall	800085bc <udd_interrupt+0x198>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
800084fc:	f0 1f 00 31 	mcall	800085c0 <udd_interrupt+0x19c>
#endif
		goto udd_interrupt_end;
80008500:	c4 78       	rjmp	8000858e <udd_interrupt+0x16a>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80008502:	fe 68 00 10 	mov	r8,-131056
80008506:	70 08       	ld.w	r8,r8[0x0]
80008508:	e2 18 00 10 	andl	r8,0x10,COH
8000850c:	c1 c0       	breq	80008544 <udd_interrupt+0x120>
8000850e:	fe 68 00 04 	mov	r8,-131068
80008512:	70 08       	ld.w	r8,r8[0x0]
80008514:	e2 18 00 10 	andl	r8,0x10,COH
80008518:	c1 60       	breq	80008544 <udd_interrupt+0x120>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
8000851a:	fe 68 08 00 	mov	r8,-129024
8000851e:	fe 69 08 00 	mov	r9,-129024
80008522:	72 09       	ld.w	r9,r9[0x0]
80008524:	af c9       	cbr	r9,0xe
80008526:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80008528:	fe 68 00 14 	mov	r8,-131052
8000852c:	31 09       	mov	r9,16
8000852e:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
80008530:	fe 68 00 18 	mov	r8,-131048
80008534:	30 19       	mov	r9,1
80008536:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(true); // Enter in IDLE mode
80008538:	30 1c       	mov	r12,1
8000853a:	f0 1f 00 21 	mcall	800085bc <udd_interrupt+0x198>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
8000853e:	f0 1f 00 22 	mcall	800085c4 <udd_interrupt+0x1a0>
#endif
		goto udd_interrupt_end;
80008542:	c2 68       	rjmp	8000858e <udd_interrupt+0x16a>
	}

	if (Is_otg_vbus_transition()) {
80008544:	fe 68 08 04 	mov	r8,-129020
80008548:	70 08       	ld.w	r8,r8[0x0]
8000854a:	e2 18 00 02 	andl	r8,0x2,COH
8000854e:	c2 00       	breq	8000858e <udd_interrupt+0x16a>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
80008550:	fe 68 08 00 	mov	r8,-129024
80008554:	fe 69 08 00 	mov	r9,-129024
80008558:	72 09       	ld.w	r9,r9[0x0]
8000855a:	af c9       	cbr	r9,0xe
8000855c:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
8000855e:	fe 68 08 08 	mov	r8,-129016
80008562:	30 29       	mov	r9,2
80008564:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock();
80008566:	fe 68 08 00 	mov	r8,-129024
8000856a:	fe 69 08 00 	mov	r9,-129024
8000856e:	72 09       	ld.w	r9,r9[0x0]
80008570:	af a9       	sbr	r9,0xe
80008572:	91 09       	st.w	r8[0x0],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
80008574:	fe 68 08 04 	mov	r8,-129020
80008578:	70 08       	ld.w	r8,r8[0x0]
8000857a:	e2 18 08 00 	andl	r8,0x800,COH
8000857e:	5f 18       	srne	r8
80008580:	10 9c       	mov	r12,r8
80008582:	f0 1f 00 12 	mcall	800085c8 <udd_interrupt+0x1a4>
80008586:	c0 48       	rjmp	8000858e <udd_interrupt+0x16a>
		udc_sof_notify();
		goto udd_interrupt_end;
	}

	if (udd_ctrl_interrupt())
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
80008588:	d7 03       	nop
8000858a:	c0 28       	rjmp	8000858e <udd_interrupt+0x16a>

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
8000858c:	d7 03       	nop
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
8000858e:	fe 68 00 00 	mov	r8,-131072
80008592:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80008596:	e3 cd 40 80 	ldm	sp++,r7,lr
8000859a:	d6 03       	rete
8000859c:	80 00       	ld.sh	r0,r0[0x0]
8000859e:	be 40       	st.h	pc[0x8],r0
800085a0:	80 00       	ld.sh	r0,r0[0x0]
800085a2:	cc 60       	breq	8000852e <udd_interrupt+0x10a>
800085a4:	80 00       	ld.sh	r0,r0[0x0]
800085a6:	9b 18       	st.w	sp[0x4],r8
800085a8:	80 00       	ld.sh	r0,r0[0x0]
800085aa:	9f cc       	st.w	pc[0x30],r12
800085ac:	80 00       	ld.sh	r0,r0[0x0]
800085ae:	9c 4c       	ld.sh	r12,lr[0x8]
800085b0:	80 00       	ld.sh	r0,r0[0x0]
800085b2:	bd dc       	cbr	r12,0x1d
800085b4:	80 00       	ld.sh	r0,r0[0x0]
800085b6:	93 98       	st.w	r9[0x24],r8
800085b8:	80 00       	ld.sh	r0,r0[0x0]
800085ba:	94 7c       	ld.sh	r12,r10[0xe]
800085bc:	80 00       	ld.sh	r0,r0[0x0]
800085be:	83 c4       	st.w	r1[0x30],r4
800085c0:	80 00       	ld.sh	r0,r0[0x0]
800085c2:	cc 38       	rjmp	80008748 <udd_attach+0x4c>
800085c4:	80 00       	ld.sh	r0,r0[0x0]
800085c6:	cc 4c       	rcall	8000874e <udd_attach+0x52>
800085c8:	80 00       	ld.sh	r0,r0[0x0]
800085ca:	cc 04       	brge	8000854a <udd_interrupt+0x126>

800085cc <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
800085cc:	eb cd 40 80 	pushm	r7,lr
800085d0:	1a 97       	mov	r7,sp
	return true;
800085d2:	30 18       	mov	r8,1
}
800085d4:	10 9c       	mov	r12,r8
800085d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800085da:	d7 03       	nop

800085dc <udd_enable>:


void udd_enable(void)
{
800085dc:	eb cd 40 80 	pushm	r7,lr
800085e0:	1a 97       	mov	r7,sp
800085e2:	20 2d       	sub	sp,8
	irqflags_t flags;

	flags = cpu_irq_save();
800085e4:	f0 1f 00 3e 	mcall	800086dc <udd_enable+0x100>
800085e8:	18 98       	mov	r8,r12
800085ea:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
800085ee:	f0 1f 00 3d 	mcall	800086e0 <udd_enable+0x104>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
800085f2:	30 0a       	mov	r10,0
800085f4:	e0 6b 02 20 	mov	r11,544
800085f8:	4b bc       	lddpc	r12,800086e4 <udd_enable+0x108>
800085fa:	f0 1f 00 3c 	mcall	800086e8 <udd_enable+0x10c>
800085fe:	30 18       	mov	r8,1
80008600:	ef 48 ff fc 	st.w	r7[-4],r8
#if defined (__GNUC__)
__attribute__((__always_inline__))
#endif
static inline void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80008604:	fe 78 0c 00 	mov	r8,-62464
80008608:	fe 79 0c 00 	mov	r9,-62464
8000860c:	f2 fa 01 44 	ld.w	r10,r9[324]
80008610:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008614:	f5 e9 10 09 	or	r9,r10,r9
80008618:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
8000861c:	fe 68 08 00 	mov	r8,-129024
80008620:	fe 69 08 00 	mov	r9,-129024
80008624:	72 09       	ld.w	r9,r9[0x0]
80008626:	b9 c9       	cbr	r9,0x18
80008628:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
8000862a:	fe 68 08 00 	mov	r8,-129024
8000862e:	fe 69 08 00 	mov	r9,-129024
80008632:	72 09       	ld.w	r9,r9[0x0]
80008634:	b9 b9       	sbr	r9,0x19
80008636:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80008638:	fe 68 08 00 	mov	r8,-129024
8000863c:	fe 69 08 00 	mov	r9,-129024
80008640:	72 09       	ld.w	r9,r9[0x0]
80008642:	ad a9       	sbr	r9,0xc
80008644:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80008646:	fe 68 08 00 	mov	r8,-129024
8000864a:	fe 69 08 00 	mov	r9,-129024
8000864e:	72 09       	ld.w	r9,r9[0x0]
80008650:	af b9       	sbr	r9,0xf
80008652:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80008654:	fe 68 08 00 	mov	r8,-129024
80008658:	fe 69 08 00 	mov	r9,-129024
8000865c:	72 09       	ld.w	r9,r9[0x0]
8000865e:	af c9       	cbr	r9,0xe
80008660:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
80008662:	fe 68 08 00 	mov	r8,-129024
80008666:	70 08       	ld.w	r8,r8[0x0]

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
80008668:	f0 1f 00 21 	mcall	800086ec <udd_enable+0x110>

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
8000866c:	fe 68 00 00 	mov	r8,-131072
80008670:	fe 69 00 00 	mov	r9,-131072
80008674:	72 09       	ld.w	r9,r9[0x0]
80008676:	ad c9       	cbr	r9,0xc
80008678:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
8000867a:	fe 68 00 00 	mov	r8,-131072
8000867e:	fe 69 00 00 	mov	r9,-131072
80008682:	72 09       	ld.w	r9,r9[0x0]
80008684:	e0 19 f3 ff 	andl	r9,0xf3ff
80008688:	91 09       	st.w	r8[0x0],r9
#  else
	udd_high_speed_disable();
#  endif
#endif
	otg_ack_vbus_transition();
8000868a:	fe 68 08 08 	mov	r8,-129016
8000868e:	30 29       	mov	r9,2
80008690:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80008692:	fe 68 08 04 	mov	r8,-129020
80008696:	70 08       	ld.w	r8,r8[0x0]
80008698:	e2 18 08 00 	andl	r8,0x800,COH
8000869c:	c0 50       	breq	800086a6 <udd_enable+0xca>
		otg_raise_vbus_transition();
8000869e:	fe 68 08 0c 	mov	r8,-129012
800086a2:	30 29       	mov	r9,2
800086a4:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
800086a6:	fe 68 08 00 	mov	r8,-129024
800086aa:	fe 69 08 00 	mov	r9,-129024
800086ae:	72 09       	ld.w	r9,r9[0x0]
800086b0:	a1 b9       	sbr	r9,0x1
800086b2:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
800086b4:	fe 68 08 00 	mov	r8,-129024
800086b8:	fe 69 08 00 	mov	r9,-129024
800086bc:	72 09       	ld.w	r9,r9[0x0]
800086be:	af a9       	sbr	r9,0xe
800086c0:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
800086c2:	48 c9       	lddpc	r9,800086f0 <udd_enable+0x114>
800086c4:	30 08       	mov	r8,0
800086c6:	b2 88       	st.b	r9[0x0],r8
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
800086c8:	30 3c       	mov	r12,3
800086ca:	f0 1f 00 0b 	mcall	800086f4 <udd_enable+0x118>
#endif

	cpu_irq_restore(flags);
800086ce:	ee fc ff f8 	ld.w	r12,r7[-8]
800086d2:	f0 1f 00 0a 	mcall	800086f8 <udd_enable+0x11c>
}
800086d6:	2f ed       	sub	sp,-8
800086d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800086dc:	80 00       	ld.sh	r0,r0[0x0]
800086de:	83 04       	st.w	r1[0x0],r4
800086e0:	80 00       	ld.sh	r0,r0[0x0]
800086e2:	a9 9c       	lsr	r12,0x9
800086e4:	80 00       	ld.sh	r0,r0[0x0]
800086e6:	84 24       	ld.sh	r4,r2[0x4]
800086e8:	80 00       	ld.sh	r0,r0[0x0]
800086ea:	79 9c       	ld.w	r12,r12[0x64]
800086ec:	80 00       	ld.sh	r0,r0[0x0]
800086ee:	9b e0       	st.w	sp[0x38],r0
800086f0:	00 00       	add	r0,r0
800086f2:	06 5c       	eor	r12,r3
800086f4:	80 00       	ld.sh	r0,r0[0x0]
800086f6:	83 3c       	st.w	r1[0xc],r12
800086f8:	80 00       	ld.sh	r0,r0[0x0]
800086fa:	83 22       	st.w	r1[0x8],r2

800086fc <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
800086fc:	eb cd 40 80 	pushm	r7,lr
80008700:	1a 97       	mov	r7,sp
80008702:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
80008704:	f0 1f 00 26 	mcall	8000879c <udd_attach+0xa0>
80008708:	18 98       	mov	r8,r12
8000870a:	ef 48 ff fc 	st.w	r7[-4],r8

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
8000870e:	30 1c       	mov	r12,1
80008710:	f0 1f 00 24 	mcall	800087a0 <udd_attach+0xa4>
	otg_unfreeze_clock();
80008714:	fe 68 08 00 	mov	r8,-129024
80008718:	fe 69 08 00 	mov	r9,-129024
8000871c:	72 09       	ld.w	r9,r9[0x0]
8000871e:	af c9       	cbr	r9,0xe
80008720:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );

	// Authorize attach if Vbus is present
	udd_attach_device();
80008722:	fe 68 00 00 	mov	r8,-131072
80008726:	fe 69 00 00 	mov	r9,-131072
8000872a:	72 09       	ld.w	r9,r9[0x0]
8000872c:	a9 c9       	cbr	r9,0x8
8000872e:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
80008730:	fe 68 00 18 	mov	r8,-131048
80008734:	30 89       	mov	r9,8
80008736:	91 09       	st.w	r8[0x0],r9
	udd_enable_suspend_interrupt();
80008738:	fe 68 00 18 	mov	r8,-131048
8000873c:	30 19       	mov	r9,1
8000873e:	91 09       	st.w	r8[0x0],r9
	udd_enable_wake_up_interrupt();
80008740:	fe 68 00 18 	mov	r8,-131048
80008744:	31 09       	mov	r9,16
80008746:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80008748:	fe 68 00 18 	mov	r8,-131048
8000874c:	30 49       	mov	r9,4
8000874e:	91 09       	st.w	r8[0x0],r9
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
80008750:	fe 68 00 18 	mov	r8,-131048
80008754:	30 29       	mov	r9,2
80008756:	91 09       	st.w	r8[0x0],r9
#endif
	// Reset following interrupts flag
	udd_ack_reset();
80008758:	fe 68 00 08 	mov	r8,-131064
8000875c:	30 89       	mov	r9,8
8000875e:	91 09       	st.w	r8[0x0],r9
	udd_ack_sof();
80008760:	fe 68 00 08 	mov	r8,-131064
80008764:	30 49       	mov	r9,4
80008766:	91 09       	st.w	r8[0x0],r9
	udd_ack_msof();
80008768:	fe 68 00 08 	mov	r8,-131064
8000876c:	30 29       	mov	r9,2
8000876e:	91 09       	st.w	r8[0x0],r9

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80008770:	fe 68 00 08 	mov	r8,-131064
80008774:	30 19       	mov	r9,1
80008776:	91 09       	st.w	r8[0x0],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80008778:	fe 68 00 08 	mov	r8,-131064
8000877c:	31 09       	mov	r9,16
8000877e:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80008780:	fe 68 08 00 	mov	r8,-129024
80008784:	fe 69 08 00 	mov	r9,-129024
80008788:	72 09       	ld.w	r9,r9[0x0]
8000878a:	af a9       	sbr	r9,0xe
8000878c:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000878e:	ee fc ff fc 	ld.w	r12,r7[-4]
80008792:	f0 1f 00 05 	mcall	800087a4 <udd_attach+0xa8>
}
80008796:	2f fd       	sub	sp,-4
80008798:	e3 cd 80 80 	ldm	sp++,r7,pc
8000879c:	80 00       	ld.sh	r0,r0[0x0]
8000879e:	83 04       	st.w	r1[0x0],r4
800087a0:	80 00       	ld.sh	r0,r0[0x0]
800087a2:	83 c4       	st.w	r1[0x30],r4
800087a4:	80 00       	ld.sh	r0,r0[0x0]
800087a6:	83 22       	st.w	r1[0x8],r2

800087a8 <udd_detach>:


void udd_detach(void)
{
800087a8:	eb cd 40 80 	pushm	r7,lr
800087ac:	1a 97       	mov	r7,sp
	otg_unfreeze_clock();
800087ae:	fe 68 08 00 	mov	r8,-129024
800087b2:	fe 69 08 00 	mov	r9,-129024
800087b6:	72 09       	ld.w	r9,r9[0x0]
800087b8:	af c9       	cbr	r9,0xe
800087ba:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
800087bc:	fe 68 00 00 	mov	r8,-131072
800087c0:	fe 69 00 00 	mov	r9,-131072
800087c4:	72 09       	ld.w	r9,r9[0x0]
800087c6:	a9 a9       	sbr	r9,0x8
800087c8:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
800087ca:	fe 68 08 00 	mov	r8,-129024
800087ce:	fe 69 08 00 	mov	r9,-129024
800087d2:	72 09       	ld.w	r9,r9[0x0]
800087d4:	af a9       	sbr	r9,0xe
800087d6:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
800087d8:	30 0c       	mov	r12,0
800087da:	f0 1f 00 03 	mcall	800087e4 <udd_detach+0x3c>
}
800087de:	e3 cd 80 80 	ldm	sp++,r7,pc
800087e2:	00 00       	add	r0,r0
800087e4:	80 00       	ld.sh	r0,r0[0x0]
800087e6:	83 c4       	st.w	r1[0x30],r4

800087e8 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
800087e8:	eb cd 40 80 	pushm	r7,lr
800087ec:	1a 97       	mov	r7,sp
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
800087ee:	fe 68 08 04 	mov	r8,-129020
800087f2:	70 08       	ld.w	r8,r8[0x0]
800087f4:	e2 18 30 00 	andl	r8,0x3000,COH
800087f8:	ad 88       	lsr	r8,0xc
800087fa:	5f 18       	srne	r8
800087fc:	5c 58       	castu.b	r8
#else
	return false;
#endif
}
800087fe:	10 9c       	mov	r12,r8
80008800:	e3 cd 80 80 	ldm	sp++,r7,pc

80008804 <udd_set_address>:


void udd_set_address(uint8_t address)
{
80008804:	eb cd 40 80 	pushm	r7,lr
80008808:	1a 97       	mov	r7,sp
8000880a:	20 1d       	sub	sp,4
8000880c:	18 98       	mov	r8,r12
8000880e:	ef 68 ff fc 	st.b	r7[-4],r8
	udd_disable_address();
80008812:	fe 68 00 00 	mov	r8,-131072
80008816:	fe 69 00 00 	mov	r9,-131072
8000881a:	72 09       	ld.w	r9,r9[0x0]
8000881c:	a7 d9       	cbr	r9,0x7
8000881e:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80008820:	fe 68 00 00 	mov	r8,-131072
80008824:	fe 69 00 00 	mov	r9,-131072
80008828:	72 09       	ld.w	r9,r9[0x0]
8000882a:	12 9a       	mov	r10,r9
8000882c:	e0 1a ff 80 	andl	r10,0xff80
80008830:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80008834:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
80008838:	f5 e9 10 09 	or	r9,r10,r9
8000883c:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000883e:	fe 68 00 00 	mov	r8,-131072
80008842:	fe 69 00 00 	mov	r9,-131072
80008846:	72 09       	ld.w	r9,r9[0x0]
80008848:	a7 b9       	sbr	r9,0x7
8000884a:	91 09       	st.w	r8[0x0],r9
}
8000884c:	2f fd       	sub	sp,-4
8000884e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008852 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
80008852:	eb cd 40 80 	pushm	r7,lr
80008856:	1a 97       	mov	r7,sp
	return udd_get_configured_address();
80008858:	fe 68 00 00 	mov	r8,-131072
8000885c:	70 08       	ld.w	r8,r8[0x0]
8000885e:	5c 58       	castu.b	r8
80008860:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
}
80008864:	10 9c       	mov	r12,r8
80008866:	e3 cd 80 80 	ldm	sp++,r7,pc

8000886a <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
8000886a:	eb cd 40 80 	pushm	r7,lr
8000886e:	1a 97       	mov	r7,sp
	return udd_frame_number();
80008870:	fe 68 00 20 	mov	r8,-131040
80008874:	70 08       	ld.w	r8,r8[0x0]
80008876:	e2 18 3f f8 	andl	r8,0x3ff8,COH
8000887a:	a3 98       	lsr	r8,0x3
8000887c:	5c 88       	casts.h	r8
}
8000887e:	10 9c       	mov	r12,r8
80008880:	e3 cd 80 80 	ldm	sp++,r7,pc

80008884 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
80008884:	eb cd 40 80 	pushm	r7,lr
80008888:	1a 97       	mov	r7,sp
8000888a:	20 2d       	sub	sp,8
8000888c:	ef 4c ff fc 	st.w	r7[-4],r12
80008890:	16 98       	mov	r8,r11
80008892:	ef 58 ff f8 	st.h	r7[-8],r8
	udd_g_ctrlreq.payload = payload;
80008896:	48 68       	lddpc	r8,800088ac <udd_set_setup_payload+0x28>
80008898:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000889c:	91 29       	st.w	r8[0x8],r9
	udd_g_ctrlreq.payload_size = payload_size;
8000889e:	48 49       	lddpc	r9,800088ac <udd_set_setup_payload+0x28>
800088a0:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800088a4:	b2 68       	st.h	r9[0xc],r8
}
800088a6:	2f ed       	sub	sp,-8
800088a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800088ac:	00 00       	add	r0,r0
800088ae:	0b c8       	ld.ub	r8,r5[0x4]

800088b0 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
800088b0:	eb cd 40 80 	pushm	r7,lr
800088b4:	1a 97       	mov	r7,sp
800088b6:	20 dd       	sub	sp,52
800088b8:	16 99       	mov	r9,r11
800088ba:	14 98       	mov	r8,r10
800088bc:	18 9a       	mov	r10,r12
800088be:	ef 6a ff d4 	st.b	r7[-44],r10
800088c2:	ef 69 ff d0 	st.b	r7[-48],r9
800088c6:	ef 58 ff cc 	st.h	r7[-52],r8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
800088ca:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800088ce:	a7 98       	lsr	r8,0x7
800088d0:	ef 68 ff db 	st.b	r7[-37],r8
	ep = ep & USB_EP_ADDR_MASK;
800088d4:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800088d8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800088dc:	ef 68 ff d4 	st.b	r7[-44],r8

	if (ep > USB_DEVICE_MAX_EP) {
800088e0:	ef 39 ff d4 	ld.ub	r9,r7[-44]
800088e4:	30 28       	mov	r8,2
800088e6:	f0 09 18 00 	cp.b	r9,r8
800088ea:	e0 88 00 04 	brls	800088f2 <udd_ep_alloc+0x42>
		return false;
800088ee:	30 08       	mov	r8,0
800088f0:	c7 f9       	rjmp	80008bee <udd_ep_alloc+0x33e>
	}
	if (Is_udd_endpoint_enabled(ep)) {
800088f2:	fe 68 00 00 	mov	r8,-131072
800088f6:	70 79       	ld.w	r9,r8[0x1c]
800088f8:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800088fc:	30 1a       	mov	r10,1
800088fe:	f4 08 09 48 	lsl	r8,r10,r8
80008902:	f3 e8 00 08 	and	r8,r9,r8
80008906:	c0 30       	breq	8000890c <udd_ep_alloc+0x5c>
		return false;
80008908:	30 08       	mov	r8,0
8000890a:	c7 29       	rjmp	80008bee <udd_ep_alloc+0x33e>
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
8000890c:	ef 38 ff d0 	ld.ub	r8,r7[-48]
80008910:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80008914:	58 28       	cp.w	r8,2
80008916:	c0 d0       	breq	80008930 <udd_ep_alloc+0x80>
80008918:	58 38       	cp.w	r8,3
8000891a:	c0 70       	breq	80008928 <udd_ep_alloc+0x78>
8000891c:	58 18       	cp.w	r8,1
8000891e:	c0 d1       	brne	80008938 <udd_ep_alloc+0x88>
	case USB_EP_TYPE_ISOCHRONOUS:
		bank = UDD_ISOCHRONOUS_NB_BANK(ep);
80008920:	30 28       	mov	r8,2
80008922:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80008926:	c0 b8       	rjmp	8000893c <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_INTERRUPT:
		bank = UDD_INTERRUPT_NB_BANK(ep);
80008928:	30 18       	mov	r8,1
8000892a:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000892e:	c0 78       	rjmp	8000893c <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_BULK:
		bank = UDD_BULK_NB_BANK(ep);
80008930:	30 28       	mov	r8,2
80008932:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80008936:	c0 38       	rjmp	8000893c <udd_ep_alloc+0x8c>
	default:
		Assert(false);
		return false;
80008938:	30 08       	mov	r8,0
8000893a:	c5 a9       	rjmp	80008bee <udd_ep_alloc+0x33e>
	}
	switch(bank) {
8000893c:	ef 38 ff de 	ld.ub	r8,r7[-34]
80008940:	58 28       	cp.w	r8,2
80008942:	c0 90       	breq	80008954 <udd_ep_alloc+0xa4>
80008944:	58 38       	cp.w	r8,3
80008946:	c0 b0       	breq	8000895c <udd_ep_alloc+0xac>
80008948:	58 18       	cp.w	r8,1
8000894a:	c0 d1       	brne	80008964 <udd_ep_alloc+0xb4>
	case 1:
		bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
8000894c:	30 08       	mov	r8,0
8000894e:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80008952:	c0 b8       	rjmp	80008968 <udd_ep_alloc+0xb8>
	case 2:
		bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
80008954:	30 18       	mov	r8,1
80008956:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000895a:	c0 78       	rjmp	80008968 <udd_ep_alloc+0xb8>
	case 3:
		bank = AVR32_USBB_UECFG0_EPBK_TRIPLE;
8000895c:	30 28       	mov	r8,2
8000895e:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80008962:	c0 38       	rjmp	80008968 <udd_ep_alloc+0xb8>
	default:
		Assert(false);
		return false;
80008964:	30 08       	mov	r8,0
80008966:	c4 49       	rjmp	80008bee <udd_ep_alloc+0x33e>
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80008968:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000896c:	a3 68       	lsl	r8,0x2
8000896e:	e0 38 ff 00 	sub	r8,130816
80008972:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80008976:	a3 69       	lsl	r9,0x2
80008978:	e0 39 ff 00 	sub	r9,130816
8000897c:	72 09       	ld.w	r9,r9[0x0]
8000897e:	12 9a       	mov	r10,r9
80008980:	e0 1a e6 83 	andl	r10,0xe683
80008984:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80008988:	ab 79       	lsl	r9,0xb
8000898a:	12 9b       	mov	r11,r9
8000898c:	e2 1b 18 00 	andl	r11,0x1800,COH
80008990:	ef 39 ff db 	ld.ub	r9,r7[-37]
80008994:	a9 69       	lsl	r9,0x8
80008996:	e2 19 01 00 	andl	r9,0x100,COH
8000899a:	12 4b       	or	r11,r9
8000899c:	ef 19 ff cc 	ld.uh	r9,r7[-52]
800089a0:	ef 49 ff f0 	st.w	r7[-16],r9
800089a4:	30 89       	mov	r9,8
800089a6:	ef 49 ff f4 	st.w	r7[-12],r9
800089aa:	ee f9 ff f0 	ld.w	r9,r7[-16]
800089ae:	ee fc ff f4 	ld.w	r12,r7[-12]
800089b2:	f2 0c 0c 49 	max	r9,r9,r12
800089b6:	ef 49 ff ec 	st.w	r7[-20],r9
800089ba:	ee f9 ff ec 	ld.w	r9,r7[-20]
800089be:	ef 49 ff e4 	st.w	r7[-28],r9
800089c2:	e0 69 04 00 	mov	r9,1024
800089c6:	ef 49 ff e8 	st.w	r7[-24],r9
800089ca:	ee f9 ff e4 	ld.w	r9,r7[-28]
800089ce:	ee fc ff e8 	ld.w	r12,r7[-24]
800089d2:	f2 0c 0d 49 	min	r9,r9,r12
800089d6:	ef 49 ff e0 	st.w	r7[-32],r9
800089da:	ee f9 ff e0 	ld.w	r9,r7[-32]
800089de:	a1 79       	lsl	r9,0x1
800089e0:	20 19       	sub	r9,1
800089e2:	f2 09 12 00 	clz	r9,r9
800089e6:	f2 09 11 1c 	rsub	r9,r9,28
800089ea:	a5 69       	lsl	r9,0x4
800089ec:	12 4b       	or	r11,r9
800089ee:	ef 39 ff de 	ld.ub	r9,r7[-34]
800089f2:	a3 69       	lsl	r9,0x2
800089f4:	e2 19 00 0c 	andl	r9,0xc,COH
800089f8:	f7 e9 10 09 	or	r9,r11,r9
800089fc:	e2 19 19 7c 	andl	r9,0x197c,COH
80008a00:	f5 e9 10 09 	or	r9,r10,r9
80008a04:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80008a06:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008a0a:	30 19       	mov	r9,1
80008a0c:	f2 08 09 48 	lsl	r8,r9,r8
80008a10:	ef 58 ff dc 	st.h	r7[-36],r8

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80008a14:	30 28       	mov	r8,2
80008a16:	ef 68 ff df 	st.b	r7[-33],r8
80008a1a:	c3 a8       	rjmp	80008a8e <udd_ep_alloc+0x1de>
		if (Is_udd_endpoint_enabled(i)) {
80008a1c:	fe 68 00 00 	mov	r8,-131072
80008a20:	70 79       	ld.w	r9,r8[0x1c]
80008a22:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008a26:	30 1a       	mov	r10,1
80008a28:	f4 08 09 48 	lsl	r8,r10,r8
80008a2c:	f3 e8 00 08 	and	r8,r9,r8
80008a30:	c2 a0       	breq	80008a84 <udd_ep_alloc+0x1d4>
			ep_allocated |= 1 << i;
80008a32:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008a36:	30 19       	mov	r9,1
80008a38:	f2 08 09 48 	lsl	r8,r9,r8
80008a3c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80008a40:	ef 08 ff dc 	ld.sh	r8,r7[-36]
80008a44:	f3 e8 10 08 	or	r8,r9,r8
80008a48:	5c 88       	casts.h	r8
80008a4a:	ef 58 ff dc 	st.h	r7[-36],r8
			udd_disable_endpoint(i);
80008a4e:	fe 68 00 00 	mov	r8,-131072
80008a52:	fe 69 00 00 	mov	r9,-131072
80008a56:	72 7a       	ld.w	r10,r9[0x1c]
80008a58:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008a5c:	30 1b       	mov	r11,1
80008a5e:	f6 09 09 49 	lsl	r9,r11,r9
80008a62:	5c d9       	com	r9
80008a64:	f5 e9 00 09 	and	r9,r10,r9
80008a68:	91 79       	st.w	r8[0x1c],r9
			udd_unallocate_memory(i);
80008a6a:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008a6e:	a3 68       	lsl	r8,0x2
80008a70:	e0 38 ff 00 	sub	r8,130816
80008a74:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008a78:	a3 69       	lsl	r9,0x2
80008a7a:	e0 39 ff 00 	sub	r9,130816
80008a7e:	72 09       	ld.w	r9,r9[0x0]
80008a80:	a1 d9       	cbr	r9,0x1
80008a82:	91 09       	st.w	r8[0x0],r9
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80008a84:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008a88:	20 18       	sub	r8,1
80008a8a:	ef 68 ff df 	st.b	r7[-33],r8
80008a8e:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008a92:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008a96:	f0 09 18 00 	cp.b	r9,r8
80008a9a:	fe 9b ff c1 	brhi	80008a1c <udd_ep_alloc+0x16c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80008a9e:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008aa2:	ef 68 ff df 	st.b	r7[-33],r8
80008aa6:	c9 c8       	rjmp	80008bde <udd_ep_alloc+0x32e>
		if (ep_allocated & (1 << i)) {
80008aa8:	ef 19 ff dc 	ld.uh	r9,r7[-36]
80008aac:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008ab0:	f2 08 08 48 	asr	r8,r9,r8
80008ab4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008ab8:	5c 58       	castu.b	r8
80008aba:	e0 80 00 8d 	breq	80008bd4 <udd_ep_alloc+0x324>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
80008abe:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008ac2:	f0 c9 00 01 	sub	r9,r8,1
80008ac6:	12 98       	mov	r8,r9
80008ac8:	a3 68       	lsl	r8,0x2
80008aca:	12 08       	add	r8,r9
80008acc:	a3 68       	lsl	r8,0x2
80008ace:	10 99       	mov	r9,r8
80008ad0:	4c a8       	lddpc	r8,80008bf8 <udd_ep_alloc+0x348>
80008ad2:	f2 08 00 08 	add	r8,r9,r8
80008ad6:	ef 48 ff f8 	st.w	r7[-8],r8
			bool b_restart = ptr_job->busy;
80008ada:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ade:	70 08       	ld.w	r8,r8[0x0]
80008ae0:	e6 18 80 00 	andh	r8,0x8000,COH
80008ae4:	5f 18       	srne	r8
80008ae6:	ef 68 ff ff 	st.b	r7[-1],r8
			ptr_job->busy = false;
80008aea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008aee:	72 08       	ld.w	r8,r9[0x0]
80008af0:	30 0a       	mov	r10,0
80008af2:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80008af6:	93 08       	st.w	r9[0x0],r8

			udd_allocate_memory(i);
80008af8:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008afc:	a3 68       	lsl	r8,0x2
80008afe:	e0 38 ff 00 	sub	r8,130816
80008b02:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008b06:	a3 69       	lsl	r9,0x2
80008b08:	e0 39 ff 00 	sub	r9,130816
80008b0c:	72 09       	ld.w	r9,r9[0x0]
80008b0e:	a1 b9       	sbr	r9,0x1
80008b10:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint(i);
80008b12:	fe 68 00 00 	mov	r8,-131072
80008b16:	fe 69 00 00 	mov	r9,-131072
80008b1a:	72 7a       	ld.w	r10,r9[0x1c]
80008b1c:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008b20:	30 1b       	mov	r11,1
80008b22:	f6 09 09 49 	lsl	r9,r11,r9
80008b26:	f5 e9 10 09 	or	r9,r10,r9
80008b2a:	91 79       	st.w	r8[0x1c],r9
			if (!Is_udd_endpoint_configured(i)) {
80008b2c:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008b30:	a3 68       	lsl	r8,0x2
80008b32:	e0 38 fe d0 	sub	r8,130768
80008b36:	70 08       	ld.w	r8,r8[0x0]
80008b38:	e6 18 00 04 	andh	r8,0x4,COH
80008b3c:	c2 61       	brne	80008b88 <udd_ep_alloc+0x2d8>
				if (NULL == ptr_job->call_trans) {
80008b3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b42:	70 48       	ld.w	r8,r8[0x10]
80008b44:	58 08       	cp.w	r8,0
80008b46:	c0 31       	brne	80008b4c <udd_ep_alloc+0x29c>
					return false;
80008b48:	30 08       	mov	r8,0
80008b4a:	c5 28       	rjmp	80008bee <udd_ep_alloc+0x33e>
				}
				if (Is_udd_endpoint_in(i)) {
80008b4c:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008b50:	a3 68       	lsl	r8,0x2
80008b52:	e0 38 ff 00 	sub	r8,130816
80008b56:	70 08       	ld.w	r8,r8[0x0]
80008b58:	e2 18 01 00 	andl	r8,0x100,COH
80008b5c:	c0 90       	breq	80008b6e <udd_ep_alloc+0x2be>
					i |= USB_EP_DIR_IN;
80008b5e:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008b62:	ea 18 ff ff 	orh	r8,0xffff
80008b66:	e8 18 ff 80 	orl	r8,0xff80
80008b6a:	ef 68 ff df 	st.b	r7[-33],r8
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
80008b6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b72:	70 48       	ld.w	r8,r8[0x10]
80008b74:	ef 3a ff df 	ld.ub	r10,r7[-33]
80008b78:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008b7c:	72 29       	ld.w	r9,r9[0x8]
80008b7e:	12 9b       	mov	r11,r9
80008b80:	30 1c       	mov	r12,1
80008b82:	5d 18       	icall	r8
						ptr_job->buf_size, i);
				return false;
80008b84:	30 08       	mov	r8,0
80008b86:	c3 48       	rjmp	80008bee <udd_ep_alloc+0x33e>
			}
			udd_enable_endpoint_bank_autoswitch(i);
80008b88:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008b8c:	a3 68       	lsl	r8,0x2
80008b8e:	e0 38 ff 00 	sub	r8,130816
80008b92:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008b96:	a3 69       	lsl	r9,0x2
80008b98:	e0 39 ff 00 	sub	r9,130816
80008b9c:	72 09       	ld.w	r9,r9[0x0]
80008b9e:	a9 b9       	sbr	r9,0x9
80008ba0:	91 09       	st.w	r8[0x0],r9
			if (b_restart) {
80008ba2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008ba6:	30 08       	mov	r8,0
80008ba8:	f0 09 18 00 	cp.b	r9,r8
80008bac:	c1 40       	breq	80008bd4 <udd_ep_alloc+0x324>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
80008bae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bb2:	70 48       	ld.w	r8,r8[0x10]
80008bb4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008bb8:	72 29       	ld.w	r9,r9[0x8]
80008bba:	ee fa ff f8 	ld.w	r10,r7[-8]
80008bbe:	74 1a       	ld.w	r10,r10[0x4]
80008bc0:	ee fb ff f8 	ld.w	r11,r7[-8]
80008bc4:	76 0b       	ld.w	r11,r11[0x0]
80008bc6:	e6 1b 40 00 	andh	r11,0x4000,COH
80008bca:	5f 1b       	srne	r11
80008bcc:	ef 3c ff df 	ld.ub	r12,r7[-33]
80008bd0:	f0 1f 00 0b 	mcall	80008bfc <udd_ep_alloc+0x34c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80008bd4:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008bd8:	2f f8       	sub	r8,-1
80008bda:	ef 68 ff df 	st.b	r7[-33],r8
80008bde:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008be2:	30 28       	mov	r8,2
80008be4:	f0 09 18 00 	cp.b	r9,r8
80008be8:	fe 98 ff 60 	brls	80008aa8 <udd_ep_alloc+0x1f8>
						ptr_job->buf_size,
						ptr_job->call_trans);
			}
		}
	}
	return true;
80008bec:	30 18       	mov	r8,1
}
80008bee:	10 9c       	mov	r12,r8
80008bf0:	2f 3d       	sub	sp,-52
80008bf2:	e3 cd 80 80 	ldm	sp++,r7,pc
80008bf6:	00 00       	add	r0,r0
80008bf8:	00 00       	add	r0,r0
80008bfa:	06 68       	and	r8,r3
80008bfc:	80 00       	ld.sh	r0,r0[0x0]
80008bfe:	8f 20       	st.w	r7[0x8],r0

80008c00 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
80008c00:	eb cd 40 80 	pushm	r7,lr
80008c04:	1a 97       	mov	r7,sp
80008c06:	20 2d       	sub	sp,8
80008c08:	18 98       	mov	r8,r12
80008c0a:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
80008c0e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80008c12:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008c16:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
80008c1a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008c1e:	30 28       	mov	r8,2
80008c20:	f0 09 18 00 	cp.b	r9,r8
80008c24:	e0 8b 00 33 	brhi	80008c8a <udd_ep_free+0x8a>
		return;
	}
	udd_disable_endpoint(index);
80008c28:	fe 68 00 00 	mov	r8,-131072
80008c2c:	fe 69 00 00 	mov	r9,-131072
80008c30:	72 7a       	ld.w	r10,r9[0x1c]
80008c32:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008c36:	30 1b       	mov	r11,1
80008c38:	f6 09 09 49 	lsl	r9,r11,r9
80008c3c:	5c d9       	com	r9
80008c3e:	f5 e9 00 09 	and	r9,r10,r9
80008c42:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
80008c44:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008c48:	a3 68       	lsl	r8,0x2
80008c4a:	e0 38 ff 00 	sub	r8,130816
80008c4e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008c52:	a3 69       	lsl	r9,0x2
80008c54:	e0 39 ff 00 	sub	r9,130816
80008c58:	72 09       	ld.w	r9,r9[0x0]
80008c5a:	a1 d9       	cbr	r9,0x1
80008c5c:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80008c5e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80008c62:	10 9c       	mov	r12,r8
80008c64:	f0 1f 00 0c 	mcall	80008c94 <udd_ep_free+0x94>
	udd_ep_job[index - 1].stall_requested = false;
80008c68:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008c6c:	f0 c9 00 01 	sub	r9,r8,1
80008c70:	48 aa       	lddpc	r10,80008c98 <udd_ep_free+0x98>
80008c72:	12 98       	mov	r8,r9
80008c74:	a3 68       	lsl	r8,0x2
80008c76:	12 08       	add	r8,r9
80008c78:	a3 68       	lsl	r8,0x2
80008c7a:	f4 08 00 09 	add	r9,r10,r8
80008c7e:	72 08       	ld.w	r8,r9[0x0]
80008c80:	30 0a       	mov	r10,0
80008c82:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80008c86:	93 08       	st.w	r9[0x0],r8
80008c88:	c0 28       	rjmp	80008c8c <udd_ep_free+0x8c>
void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index) {
		return;
80008c8a:	d7 03       	nop
	}
	udd_disable_endpoint(index);
	udd_unallocate_memory(index);
	udd_ep_abort_job(ep);
	udd_ep_job[index - 1].stall_requested = false;
}
80008c8c:	2f ed       	sub	sp,-8
80008c8e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008c92:	00 00       	add	r0,r0
80008c94:	80 00       	ld.sh	r0,r0[0x0]
80008c96:	9c a8       	ld.uh	r8,lr[0x4]
80008c98:	00 00       	add	r0,r0
80008c9a:	06 68       	and	r8,r3

80008c9c <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
80008c9c:	eb cd 40 80 	pushm	r7,lr
80008ca0:	1a 97       	mov	r7,sp
80008ca2:	20 1d       	sub	sp,4
80008ca4:	18 98       	mov	r8,r12
80008ca6:	ef 68 ff fc 	st.b	r7[-4],r8
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80008caa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008cae:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008cb2:	a3 68       	lsl	r8,0x2
80008cb4:	e0 38 fe 40 	sub	r8,130624
80008cb8:	70 08       	ld.w	r8,r8[0x0]
80008cba:	e6 18 00 08 	andh	r8,0x8,COH
80008cbe:	5f 18       	srne	r8
80008cc0:	5c 58       	castu.b	r8
}
80008cc2:	10 9c       	mov	r12,r8
80008cc4:	2f fd       	sub	sp,-4
80008cc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80008cca:	d7 03       	nop

80008ccc <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
80008ccc:	eb cd 40 80 	pushm	r7,lr
80008cd0:	1a 97       	mov	r7,sp
80008cd2:	20 3d       	sub	sp,12
80008cd4:	18 98       	mov	r8,r12
80008cd6:	ef 68 ff f4 	st.b	r7[-12],r8
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80008cda:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008cde:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008ce2:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
80008ce6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008cea:	30 28       	mov	r8,2
80008cec:	f0 09 18 00 	cp.b	r9,r8
80008cf0:	e0 88 00 04 	brls	80008cf8 <udd_ep_set_halt+0x2c>
		return false;
80008cf4:	30 08       	mov	r8,0
80008cf6:	c6 f8       	rjmp	80008dd4 <udd_ep_set_halt+0x108>
	}

	ptr_job = &udd_ep_job[index - 1];
80008cf8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008cfc:	f0 c9 00 01 	sub	r9,r8,1
80008d00:	12 98       	mov	r8,r9
80008d02:	a3 68       	lsl	r8,0x2
80008d04:	12 08       	add	r8,r9
80008d06:	a3 68       	lsl	r8,0x2
80008d08:	10 99       	mov	r9,r8
80008d0a:	4b 58       	lddpc	r8,80008ddc <udd_ep_set_halt+0x110>
80008d0c:	f2 08 00 08 	add	r8,r9,r8
80008d10:	ef 48 ff f8 	st.w	r7[-8],r8

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80008d14:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008d18:	a3 68       	lsl	r8,0x2
80008d1a:	e0 38 fe 40 	sub	r8,130624
80008d1e:	70 08       	ld.w	r8,r8[0x0]
80008d20:	e6 18 00 08 	andh	r8,0x8,COH
80008d24:	c0 71       	brne	80008d32 <udd_ep_set_halt+0x66>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
80008d26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d2a:	70 08       	ld.w	r8,r8[0x0]
80008d2c:	e6 18 20 00 	andh	r8,0x2000,COH
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80008d30:	c0 30       	breq	80008d36 <udd_ep_set_halt+0x6a>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
80008d32:	30 18       	mov	r8,1
80008d34:	c5 08       	rjmp	80008dd4 <udd_ep_set_halt+0x108>
	}

	if (ptr_job->busy == true) {
80008d36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d3a:	70 08       	ld.w	r8,r8[0x0]
80008d3c:	e6 18 80 00 	andh	r8,0x8000,COH
80008d40:	c0 30       	breq	80008d46 <udd_ep_set_halt+0x7a>
		return false; // Job on going, stall impossible
80008d42:	30 08       	mov	r8,0
80008d44:	c4 88       	rjmp	80008dd4 <udd_ep_set_halt+0x108>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
80008d46:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008d4a:	30 08       	mov	r8,0
80008d4c:	f0 09 18 00 	cp.b	r9,r8
80008d50:	c2 54       	brge	80008d9a <udd_ep_set_halt+0xce>
80008d52:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008d56:	a3 68       	lsl	r8,0x2
80008d58:	e0 38 fe d0 	sub	r8,130768
80008d5c:	70 08       	ld.w	r8,r8[0x0]
80008d5e:	e2 18 30 00 	andl	r8,0x3000,COH
80008d62:	ad 88       	lsr	r8,0xc
80008d64:	c1 b0       	breq	80008d9a <udd_ep_set_halt+0xce>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
80008d66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008d6a:	72 08       	ld.w	r8,r9[0x0]
80008d6c:	30 1a       	mov	r10,1
80008d6e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80008d72:	93 08       	st.w	r9[0x0],r8
			udd_enable_bank_interrupt(index);
80008d74:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008d78:	a3 68       	lsl	r8,0x2
80008d7a:	e0 38 fe 10 	sub	r8,130576
80008d7e:	e0 69 10 00 	mov	r9,4096
80008d82:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(index);
80008d84:	fe 68 00 00 	mov	r8,-131072
80008d88:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008d8c:	e0 6a 10 00 	mov	r10,4096
80008d90:	f4 09 09 49 	lsl	r9,r10,r9
80008d94:	91 69       	st.w	r8[0x18],r9
			return true;
80008d96:	30 18       	mov	r8,1
80008d98:	c1 e8       	rjmp	80008dd4 <udd_ep_set_halt+0x108>
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
80008d9a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008d9e:	a3 68       	lsl	r8,0x2
80008da0:	e0 38 ff 00 	sub	r8,130816
80008da4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008da8:	a3 69       	lsl	r9,0x2
80008daa:	e0 39 ff 00 	sub	r9,130816
80008dae:	72 09       	ld.w	r9,r9[0x0]
80008db0:	a9 d9       	cbr	r9,0x9
80008db2:	91 09       	st.w	r8[0x0],r9
	udd_ack_stall(index);
80008db4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008db8:	a3 68       	lsl	r8,0x2
80008dba:	e0 38 fe a0 	sub	r8,130720
80008dbe:	34 09       	mov	r9,64
80008dc0:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(index);
80008dc2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008dc6:	a3 68       	lsl	r8,0x2
80008dc8:	e0 38 fe 10 	sub	r8,130576
80008dcc:	e8 69 00 00 	mov	r9,524288
80008dd0:	91 09       	st.w	r8[0x0],r9
	return true;
80008dd2:	30 18       	mov	r8,1
}
80008dd4:	10 9c       	mov	r12,r8
80008dd6:	2f dd       	sub	sp,-12
80008dd8:	e3 cd 80 80 	ldm	sp++,r7,pc
80008ddc:	00 00       	add	r0,r0
80008dde:	06 68       	and	r8,r3

80008de0 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80008de0:	eb cd 40 80 	pushm	r7,lr
80008de4:	1a 97       	mov	r7,sp
80008de6:	20 3d       	sub	sp,12
80008de8:	18 98       	mov	r8,r12
80008dea:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_stall_cleared = false;
80008dee:	30 08       	mov	r8,0
80008df0:	ef 68 ff fb 	st.b	r7[-5],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80008df4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008df8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008dfc:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep)
80008e00:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008e04:	30 28       	mov	r8,2
80008e06:	f0 09 18 00 	cp.b	r9,r8
80008e0a:	e0 88 00 04 	brls	80008e12 <udd_ep_clear_halt+0x32>
		return false;
80008e0e:	30 08       	mov	r8,0
80008e10:	c8 18       	rjmp	80008f12 <udd_ep_clear_halt+0x132>
	ptr_job = &udd_ep_job[ep - 1];
80008e12:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008e16:	f0 c9 00 01 	sub	r9,r8,1
80008e1a:	12 98       	mov	r8,r9
80008e1c:	a3 68       	lsl	r8,0x2
80008e1e:	12 08       	add	r8,r9
80008e20:	a3 68       	lsl	r8,0x2
80008e22:	10 99       	mov	r9,r8
80008e24:	4b e8       	lddpc	r8,80008f1c <udd_ep_clear_halt+0x13c>
80008e26:	f2 08 00 08 	add	r8,r9,r8
80008e2a:	ef 48 ff fc 	st.w	r7[-4],r8

	if (ptr_job->stall_requested) {
80008e2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e32:	70 08       	ld.w	r8,r8[0x0]
80008e34:	e6 18 20 00 	andh	r8,0x2000,COH
80008e38:	c1 c0       	breq	80008e70 <udd_ep_clear_halt+0x90>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
80008e3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008e3e:	72 08       	ld.w	r8,r9[0x0]
80008e40:	30 0a       	mov	r10,0
80008e42:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80008e46:	93 08       	st.w	r9[0x0],r8
		udd_disable_bank_interrupt(ep);
80008e48:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008e4c:	a3 68       	lsl	r8,0x2
80008e4e:	e0 38 fd e0 	sub	r8,130528
80008e52:	e0 69 10 00 	mov	r9,4096
80008e56:	91 09       	st.w	r8[0x0],r9
		udd_disable_endpoint_interrupt(ep);
80008e58:	fe 68 00 00 	mov	r8,-131072
80008e5c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008e60:	e0 6a 10 00 	mov	r10,4096
80008e64:	f4 09 09 49 	lsl	r9,r10,r9
80008e68:	91 59       	st.w	r8[0x14],r9
		b_stall_cleared = true;
80008e6a:	30 18       	mov	r8,1
80008e6c:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
80008e70:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008e74:	a3 68       	lsl	r8,0x2
80008e76:	e0 38 fe 40 	sub	r8,130624
80008e7a:	70 08       	ld.w	r8,r8[0x0]
80008e7c:	e6 18 00 08 	andh	r8,0x8,COH
80008e80:	c3 10       	breq	80008ee2 <udd_ep_clear_halt+0x102>
		if (Is_udd_stall(ep)) {
80008e82:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008e86:	a3 68       	lsl	r8,0x2
80008e88:	e0 38 fe d0 	sub	r8,130768
80008e8c:	70 08       	ld.w	r8,r8[0x0]
80008e8e:	e2 18 00 40 	andl	r8,0x40,COH
80008e92:	c1 00       	breq	80008eb2 <udd_ep_clear_halt+0xd2>
			udd_ack_stall(ep);
80008e94:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008e98:	a3 68       	lsl	r8,0x2
80008e9a:	e0 38 fe a0 	sub	r8,130720
80008e9e:	34 09       	mov	r9,64
80008ea0:	91 09       	st.w	r8[0x0],r9
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
80008ea2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008ea6:	a3 68       	lsl	r8,0x2
80008ea8:	e0 38 fe 10 	sub	r8,130576
80008eac:	e4 69 00 00 	mov	r9,262144
80008eb0:	91 09       	st.w	r8[0x0],r9
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
80008eb2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008eb6:	a3 68       	lsl	r8,0x2
80008eb8:	e0 38 fd e0 	sub	r8,130528
80008ebc:	e8 69 00 00 	mov	r9,524288
80008ec0:	91 09       	st.w	r8[0x0],r9
		udd_enable_endpoint_bank_autoswitch(ep);
80008ec2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008ec6:	a3 68       	lsl	r8,0x2
80008ec8:	e0 38 ff 00 	sub	r8,130816
80008ecc:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008ed0:	a3 69       	lsl	r9,0x2
80008ed2:	e0 39 ff 00 	sub	r9,130816
80008ed6:	72 09       	ld.w	r9,r9[0x0]
80008ed8:	a9 b9       	sbr	r9,0x9
80008eda:	91 09       	st.w	r8[0x0],r9
		b_stall_cleared = true;
80008edc:	30 18       	mov	r8,1
80008ede:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (b_stall_cleared) {
80008ee2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80008ee6:	30 08       	mov	r8,0
80008ee8:	f0 09 18 00 	cp.b	r9,r8
80008eec:	c1 20       	breq	80008f10 <udd_ep_clear_halt+0x130>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80008eee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ef2:	70 08       	ld.w	r8,r8[0x0]
80008ef4:	e6 18 80 00 	andh	r8,0x8000,COH
80008ef8:	c0 c0       	breq	80008f10 <udd_ep_clear_halt+0x130>
			ptr_job->busy = false;
80008efa:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008efe:	72 08       	ld.w	r8,r9[0x0]
80008f00:	30 0a       	mov	r10,0
80008f02:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80008f06:	93 08       	st.w	r9[0x0],r8
			ptr_job->call_nohalt();
80008f08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f0c:	70 48       	ld.w	r8,r8[0x10]
80008f0e:	5d 18       	icall	r8
		}
	}
	return true;
80008f10:	30 18       	mov	r8,1
}
80008f12:	10 9c       	mov	r12,r8
80008f14:	2f dd       	sub	sp,-12
80008f16:	e3 cd 80 80 	ldm	sp++,r7,pc
80008f1a:	00 00       	add	r0,r0
80008f1c:	00 00       	add	r0,r0
80008f1e:	06 68       	and	r8,r3

80008f20 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80008f20:	eb cd 40 80 	pushm	r7,lr
80008f24:	1a 97       	mov	r7,sp
80008f26:	20 7d       	sub	sp,28
80008f28:	ef 4a ff ec 	st.w	r7[-20],r10
80008f2c:	ef 49 ff e8 	st.w	r7[-24],r9
80008f30:	ef 48 ff e4 	st.w	r7[-28],r8
80008f34:	18 98       	mov	r8,r12
80008f36:	ef 68 ff f4 	st.b	r7[-12],r8
80008f3a:	16 98       	mov	r8,r11
80008f3c:	ef 68 ff f0 	st.b	r7[-16],r8
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
80008f40:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008f44:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008f48:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep) {
80008f4c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008f50:	30 28       	mov	r8,2
80008f52:	f0 09 18 00 	cp.b	r9,r8
80008f56:	e0 88 00 04 	brls	80008f5e <udd_ep_run+0x3e>
		return false;
80008f5a:	30 08       	mov	r8,0
80008f5c:	c6 88       	rjmp	8000902c <udd_ep_run+0x10c>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
80008f5e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008f62:	f0 c9 00 01 	sub	r9,r8,1
80008f66:	12 98       	mov	r8,r9
80008f68:	a3 68       	lsl	r8,0x2
80008f6a:	12 08       	add	r8,r9
80008f6c:	a3 68       	lsl	r8,0x2
80008f6e:	10 99       	mov	r9,r8
80008f70:	4b 18       	lddpc	r8,80009034 <udd_ep_run+0x114>
80008f72:	f2 08 00 08 	add	r8,r9,r8
80008f76:	ef 48 ff f8 	st.w	r7[-8],r8

	if ((!Is_udd_endpoint_enabled(ep))
80008f7a:	fe 68 00 00 	mov	r8,-131072
80008f7e:	70 79       	ld.w	r9,r8[0x1c]
80008f80:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008f84:	30 1a       	mov	r10,1
80008f86:	f4 08 09 48 	lsl	r8,r10,r8
80008f8a:	f3 e8 00 08 	and	r8,r9,r8
80008f8e:	c1 00       	breq	80008fae <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
80008f90:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008f94:	a3 68       	lsl	r8,0x2
80008f96:	e0 38 fe 40 	sub	r8,130624
80008f9a:	70 08       	ld.w	r8,r8[0x0]
80008f9c:	e6 18 00 08 	andh	r8,0x8,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80008fa0:	c0 71       	brne	80008fae <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
80008fa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fa6:	70 08       	ld.w	r8,r8[0x0]
80008fa8:	e6 18 20 00 	andh	r8,0x2000,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80008fac:	c0 30       	breq	80008fb2 <udd_ep_run+0x92>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
80008fae:	30 08       	mov	r8,0
80008fb0:	c3 e8       	rjmp	8000902c <udd_ep_run+0x10c>
	}

	flags = cpu_irq_save();
80008fb2:	f0 1f 00 22 	mcall	80009038 <udd_ep_run+0x118>
80008fb6:	18 98       	mov	r8,r12
80008fb8:	ef 48 ff fc 	st.w	r7[-4],r8
	if (ptr_job->busy == true) {
80008fbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fc0:	70 08       	ld.w	r8,r8[0x0]
80008fc2:	e6 18 80 00 	andh	r8,0x8000,COH
80008fc6:	c0 70       	breq	80008fd4 <udd_ep_run+0xb4>
		cpu_irq_restore(flags);
80008fc8:	ee fc ff fc 	ld.w	r12,r7[-4]
80008fcc:	f0 1f 00 1c 	mcall	8000903c <udd_ep_run+0x11c>
		return false; // Job already on going
80008fd0:	30 08       	mov	r8,0
80008fd2:	c2 d8       	rjmp	8000902c <udd_ep_run+0x10c>
	}
	ptr_job->busy = true;
80008fd4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008fd8:	72 08       	ld.w	r8,r9[0x0]
80008fda:	30 1a       	mov	r10,1
80008fdc:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80008fe0:	93 08       	st.w	r9[0x0],r8
	cpu_irq_restore(flags);
80008fe2:	ee fc ff fc 	ld.w	r12,r7[-4]
80008fe6:	f0 1f 00 16 	mcall	8000903c <udd_ep_run+0x11c>

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
80008fea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fee:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008ff2:	91 19       	st.w	r8[0x4],r9
	ptr_job->buf_size = buf_size;
80008ff4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ff8:	ee f9 ff e8 	ld.w	r9,r7[-24]
80008ffc:	91 29       	st.w	r8[0x8],r9
	ptr_job->nb_trans = 0;
80008ffe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009002:	30 09       	mov	r9,0
80009004:	91 39       	st.w	r8[0xc],r9
	ptr_job->call_trans = callback;
80009006:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000900a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000900e:	91 49       	st.w	r8[0x10],r9
	ptr_job->b_shortpacket = b_shortpacket;
80009010:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009014:	72 08       	ld.w	r8,r9[0x0]
80009016:	ef 3a ff f0 	ld.ub	r10,r7[-16]
8000901a:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000901e:	93 08       	st.w	r9[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
80009020:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009024:	10 9c       	mov	r12,r8
80009026:	f0 1f 00 07 	mcall	80009040 <udd_ep_run+0x120>
	return true;
8000902a:	30 18       	mov	r8,1
}
8000902c:	10 9c       	mov	r12,r8
8000902e:	2f 9d       	sub	sp,-28
80009030:	e3 cd 80 80 	ldm	sp++,r7,pc
80009034:	00 00       	add	r0,r0
80009036:	06 68       	and	r8,r3
80009038:	80 00       	ld.sh	r0,r0[0x0]
8000903a:	83 04       	st.w	r1[0x0],r4
8000903c:	80 00       	ld.sh	r0,r0[0x0]
8000903e:	83 22       	st.w	r1[0x8],r2
80009040:	80 00       	ld.sh	r0,r0[0x0]
80009042:	9d 78       	st.w	lr[0x1c],r8

80009044 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
80009044:	eb cd 40 80 	pushm	r7,lr
80009048:	1a 97       	mov	r7,sp
8000904a:	20 2d       	sub	sp,8
8000904c:	18 98       	mov	r8,r12
8000904e:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
80009052:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009056:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000905a:	ef 68 ff ff 	st.b	r7[-1],r8

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
8000905e:	fe 68 00 00 	mov	r8,-131072
80009062:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009066:	20 19       	sub	r9,1
80009068:	fc 1a 02 00 	movh	r10,0x200
8000906c:	f4 09 09 49 	lsl	r9,r10,r9
80009070:	91 59       	st.w	r8[0x14],r9
	udd_endpoint_dma_set_control(index, 0);
80009072:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009076:	a5 68       	lsl	r8,0x4
80009078:	e0 38 fd 00 	sub	r8,130304
8000907c:	30 09       	mov	r9,0
8000907e:	91 29       	st.w	r8[0x8],r9
	// Kill banks
	udd_disable_endpoint_interrupt(index);
80009080:	fe 68 00 00 	mov	r8,-131072
80009084:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009088:	e0 6a 10 00 	mov	r10,4096
8000908c:	f4 09 09 49 	lsl	r9,r10,r9
80009090:	91 59       	st.w	r8[0x14],r9
	while (udd_nb_busy_bank(index)) {
80009092:	c1 28       	rjmp	800090b6 <udd_ep_abort+0x72>
		udd_kill_last_in_bank(index);
80009094:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009098:	a3 68       	lsl	r8,0x2
8000909a:	e0 38 fe 10 	sub	r8,130576
8000909e:	e0 69 20 00 	mov	r9,8192
800090a2:	91 09       	st.w	r8[0x0],r9
		while(Is_udd_killing_last_in_bank(index));
800090a4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800090a8:	a3 68       	lsl	r8,0x2
800090aa:	e0 38 fe 40 	sub	r8,130624
800090ae:	70 08       	ld.w	r8,r8[0x0]
800090b0:	e2 18 20 00 	andl	r8,0x2000,COH
800090b4:	cf 81       	brne	800090a4 <udd_ep_abort+0x60>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
800090b6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800090ba:	a3 68       	lsl	r8,0x2
800090bc:	e0 38 fe d0 	sub	r8,130768
800090c0:	70 08       	ld.w	r8,r8[0x0]
800090c2:	e2 18 30 00 	andl	r8,0x3000,COH
800090c6:	ad 88       	lsr	r8,0xc
800090c8:	ce 61       	brne	80009094 <udd_ep_abort+0x50>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
800090ca:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800090ce:	10 9c       	mov	r12,r8
800090d0:	f0 1f 00 03 	mcall	800090dc <udd_ep_abort+0x98>
}
800090d4:	2f ed       	sub	sp,-8
800090d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800090da:	00 00       	add	r0,r0
800090dc:	80 00       	ld.sh	r0,r0[0x0]
800090de:	9c a8       	ld.uh	r8,lr[0x4]

800090e0 <udd_ep_wait_stall_clear>:


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
800090e0:	eb cd 40 80 	pushm	r7,lr
800090e4:	1a 97       	mov	r7,sp
800090e6:	20 3d       	sub	sp,12
800090e8:	18 98       	mov	r8,r12
800090ea:	ef 4b ff f4 	st.w	r7[-12],r11
800090ee:	ef 68 ff f8 	st.b	r7[-8],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
800090f2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800090f6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800090fa:	ef 68 ff f8 	st.b	r7[-8],r8
	if (USB_DEVICE_MAX_EP < ep) {
800090fe:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009102:	30 28       	mov	r8,2
80009104:	f0 09 18 00 	cp.b	r9,r8
80009108:	e0 88 00 04 	brls	80009110 <udd_ep_wait_stall_clear+0x30>
		return false;
8000910c:	30 08       	mov	r8,0
8000910e:	c4 48       	rjmp	80009196 <udd_ep_wait_stall_clear+0xb6>
	}

	ptr_job = &udd_ep_job[ep - 1];
80009110:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009114:	f0 c9 00 01 	sub	r9,r8,1
80009118:	12 98       	mov	r8,r9
8000911a:	a3 68       	lsl	r8,0x2
8000911c:	12 08       	add	r8,r9
8000911e:	a3 68       	lsl	r8,0x2
80009120:	10 99       	mov	r9,r8
80009122:	4a 08       	lddpc	r8,800091a0 <udd_ep_wait_stall_clear+0xc0>
80009124:	f2 08 00 08 	add	r8,r9,r8
80009128:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!Is_udd_endpoint_enabled(ep)) {
8000912c:	fe 68 00 00 	mov	r8,-131072
80009130:	70 79       	ld.w	r9,r8[0x1c]
80009132:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009136:	30 1a       	mov	r10,1
80009138:	f4 08 09 48 	lsl	r8,r10,r8
8000913c:	f3 e8 00 08 	and	r8,r9,r8
80009140:	c0 31       	brne	80009146 <udd_ep_wait_stall_clear+0x66>
		return false; // Endpoint not enabled
80009142:	30 08       	mov	r8,0
80009144:	c2 98       	rjmp	80009196 <udd_ep_wait_stall_clear+0xb6>
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
80009146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000914a:	70 08       	ld.w	r8,r8[0x0]
8000914c:	e6 18 80 00 	andh	r8,0x8000,COH
80009150:	c0 30       	breq	80009156 <udd_ep_wait_stall_clear+0x76>
		return false; // Job already on going
80009152:	30 08       	mov	r8,0
80009154:	c2 18       	rjmp	80009196 <udd_ep_wait_stall_clear+0xb6>
	}

	if (Is_udd_endpoint_stall_requested(ep)
80009156:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000915a:	a3 68       	lsl	r8,0x2
8000915c:	e0 38 fe 40 	sub	r8,130624
80009160:	70 08       	ld.w	r8,r8[0x0]
80009162:	e6 18 00 08 	andh	r8,0x8,COH
80009166:	c0 71       	brne	80009174 <udd_ep_wait_stall_clear+0x94>
			|| ptr_job->stall_requested) {
80009168:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000916c:	70 08       	ld.w	r8,r8[0x0]
8000916e:	e6 18 20 00 	andh	r8,0x2000,COH
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
80009172:	c0 e0       	breq	8000918e <udd_ep_wait_stall_clear+0xae>
			|| ptr_job->stall_requested) {
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
80009174:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009178:	72 08       	ld.w	r8,r9[0x0]
8000917a:	30 1a       	mov	r10,1
8000917c:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80009180:	93 08       	st.w	r9[0x0],r8
		ptr_job->call_nohalt = callback;
80009182:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009186:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000918a:	91 49       	st.w	r8[0x10],r9
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
8000918c:	c0 48       	rjmp	80009194 <udd_ep_wait_stall_clear+0xb4>
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
8000918e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009192:	5d 18       	icall	r8
	}
	return true;
80009194:	30 18       	mov	r8,1
}
80009196:	10 9c       	mov	r12,r8
80009198:	2f dd       	sub	sp,-12
8000919a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000919e:	00 00       	add	r0,r0
800091a0:	00 00       	add	r0,r0
800091a2:	06 68       	and	r8,r3

800091a4 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
800091a4:	eb cd 40 80 	pushm	r7,lr
800091a8:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
800091aa:	fe 68 00 00 	mov	r8,-131072
800091ae:	fe 69 00 00 	mov	r9,-131072
800091b2:	72 09       	ld.w	r9,r9[0x0]
800091b4:	e0 19 f3 ff 	andl	r9,0xf3ff
800091b8:	ab b9       	sbr	r9,0xb
800091ba:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_j();
800091bc:	fe 68 00 00 	mov	r8,-131072
800091c0:	fe 69 00 00 	mov	r9,-131072
800091c4:	72 09       	ld.w	r9,r9[0x0]
800091c6:	ad b9       	sbr	r9,0xd
800091c8:	91 09       	st.w	r8[0x0],r9
}
800091ca:	e3 cd 80 80 	ldm	sp++,r7,pc

800091ce <udd_test_mode_k>:


void udd_test_mode_k(void)
{
800091ce:	eb cd 40 80 	pushm	r7,lr
800091d2:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
800091d4:	fe 68 00 00 	mov	r8,-131072
800091d8:	fe 69 00 00 	mov	r9,-131072
800091dc:	72 09       	ld.w	r9,r9[0x0]
800091de:	e0 19 f3 ff 	andl	r9,0xf3ff
800091e2:	ab b9       	sbr	r9,0xb
800091e4:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_k();
800091e6:	fe 68 00 00 	mov	r8,-131072
800091ea:	fe 69 00 00 	mov	r9,-131072
800091ee:	72 09       	ld.w	r9,r9[0x0]
800091f0:	af a9       	sbr	r9,0xe
800091f2:	91 09       	st.w	r8[0x0],r9
}
800091f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800091f8 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
800091f8:	eb cd 40 80 	pushm	r7,lr
800091fc:	1a 97       	mov	r7,sp
	udd_enable_hs_test_mode();
800091fe:	fe 68 00 00 	mov	r8,-131072
80009202:	fe 69 00 00 	mov	r9,-131072
80009206:	72 09       	ld.w	r9,r9[0x0]
80009208:	e0 19 f3 ff 	andl	r9,0xf3ff
8000920c:	ab b9       	sbr	r9,0xb
8000920e:	91 09       	st.w	r8[0x0],r9
}
80009210:	e3 cd 80 80 	ldm	sp++,r7,pc

80009214 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
80009214:	eb cd 40 80 	pushm	r7,lr
80009218:	1a 97       	mov	r7,sp
8000921a:	21 7d       	sub	sp,92
				0xFF, 0xFF,
		// S, 111111S, {0111111S * 7}
		0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD,
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};
8000921c:	4d c9       	lddpc	r9,8000938c <udd_test_mode_packet+0x178>
8000921e:	ee c8 00 5c 	sub	r8,r7,92
80009222:	f2 ea 00 00 	ld.d	r10,r9[0]
80009226:	f0 eb 00 00 	st.d	r8[0],r10
8000922a:	f2 ea 00 08 	ld.d	r10,r9[8]
8000922e:	f0 eb 00 08 	st.d	r8[8],r10
80009232:	f2 ea 00 10 	ld.d	r10,r9[16]
80009236:	f0 eb 00 10 	st.d	r8[16],r10
8000923a:	f2 ea 00 18 	ld.d	r10,r9[24]
8000923e:	f0 eb 00 18 	st.d	r8[24],r10
80009242:	f2 ea 00 20 	ld.d	r10,r9[32]
80009246:	f0 eb 00 20 	st.d	r8[32],r10
8000924a:	f2 ea 00 28 	ld.d	r10,r9[40]
8000924e:	f0 eb 00 28 	st.d	r8[40],r10
80009252:	72 ca       	ld.w	r10,r9[0x30]
80009254:	91 ca       	st.w	r8[0x30],r10
80009256:	f3 39 00 34 	ld.ub	r9,r9[52]
8000925a:	f1 69 00 34 	st.b	r8[52],r9

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
8000925e:	fe 68 00 00 	mov	r8,-131072
80009262:	fe 69 00 00 	mov	r9,-131072
80009266:	72 79       	ld.w	r9,r9[0x1c]
80009268:	a1 c9       	cbr	r9,0x0
8000926a:	91 79       	st.w	r8[0x1c],r9
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
8000926c:	fe 68 01 00 	mov	r8,-130816
80009270:	fe 69 01 00 	mov	r9,-130816
80009274:	72 09       	ld.w	r9,r9[0x0]
80009276:	12 9a       	mov	r10,r9
80009278:	e0 1a e6 83 	andl	r10,0xe683
8000927c:	34 09       	mov	r9,64
8000927e:	ef 49 ff f8 	st.w	r7[-8],r9
80009282:	30 89       	mov	r9,8
80009284:	ef 49 ff fc 	st.w	r7[-4],r9
80009288:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000928c:	ee fb ff fc 	ld.w	r11,r7[-4]
80009290:	f2 0b 0c 49 	max	r9,r9,r11
80009294:	ef 49 ff f4 	st.w	r7[-12],r9
80009298:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000929c:	ef 49 ff ec 	st.w	r7[-20],r9
800092a0:	e0 69 04 00 	mov	r9,1024
800092a4:	ef 49 ff f0 	st.w	r7[-16],r9
800092a8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800092ac:	ee fb ff f0 	ld.w	r11,r7[-16]
800092b0:	f2 0b 0d 49 	min	r9,r9,r11
800092b4:	ef 49 ff e8 	st.w	r7[-24],r9
800092b8:	ee f9 ff e8 	ld.w	r9,r7[-24]
800092bc:	a1 79       	lsl	r9,0x1
800092be:	20 19       	sub	r9,1
800092c0:	f2 09 12 00 	clz	r9,r9
800092c4:	f2 09 11 1c 	rsub	r9,r9,28
800092c8:	a5 69       	lsl	r9,0x4
800092ca:	e2 19 08 7c 	andl	r9,0x87c,COH
800092ce:	f5 e9 10 09 	or	r9,r10,r9
800092d2:	e8 19 11 00 	orl	r9,0x1100
800092d6:	91 09       	st.w	r8[0x0],r9
			64, AVR32_USBB_UECFG0_EPBK_SINGLE);
	udd_allocate_memory(0);
800092d8:	fe 68 01 00 	mov	r8,-130816
800092dc:	fe 69 01 00 	mov	r9,-130816
800092e0:	72 09       	ld.w	r9,r9[0x0]
800092e2:	a1 b9       	sbr	r9,0x1
800092e4:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
800092e6:	fe 68 00 00 	mov	r8,-131072
800092ea:	fe 69 00 00 	mov	r9,-131072
800092ee:	72 79       	ld.w	r9,r9[0x1c]
800092f0:	a1 a9       	sbr	r9,0x0
800092f2:	91 79       	st.w	r8[0x1c],r9

	udd_enable_hs_test_mode();
800092f4:	fe 68 00 00 	mov	r8,-131072
800092f8:	fe 69 00 00 	mov	r9,-131072
800092fc:	72 09       	ld.w	r9,r9[0x0]
800092fe:	e0 19 f3 ff 	andl	r9,0xf3ff
80009302:	ab b9       	sbr	r9,0xb
80009304:	91 09       	st.w	r8[0x0],r9
	udd_enable_hs_test_mode_packet();
80009306:	fe 68 00 00 	mov	r8,-131072
8000930a:	fe 69 00 00 	mov	r9,-131072
8000930e:	72 09       	ld.w	r9,r9[0x0]
80009310:	af b9       	sbr	r9,0xf
80009312:	91 09       	st.w	r8[0x0],r9

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
80009314:	fc 18 e0 00 	movh	r8,0xe000
80009318:	ef 48 ff dc 	st.w	r7[-36],r8
	ptr_src = test_packet;
8000931c:	ee c8 00 5c 	sub	r8,r7,92
80009320:	ef 48 ff e0 	st.w	r7[-32],r8

	for (i = 0; i < sizeof(test_packet); i++) {
80009324:	30 08       	mov	r8,0
80009326:	ef 68 ff db 	st.b	r7[-37],r8
8000932a:	c1 68       	rjmp	80009356 <udd_test_mode_packet+0x142>
		*ptr_dest++ = *ptr_src++;
8000932c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009330:	11 88       	ld.ub	r8,r8[0x0]
80009332:	ee f9 ff dc 	ld.w	r9,r7[-36]
80009336:	b2 88       	st.b	r9[0x0],r8
80009338:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000933c:	2f f8       	sub	r8,-1
8000933e:	ef 48 ff dc 	st.w	r7[-36],r8
80009342:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009346:	2f f8       	sub	r8,-1
80009348:	ef 48 ff e0 	st.w	r7[-32],r8

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
8000934c:	ef 38 ff db 	ld.ub	r8,r7[-37]
80009350:	2f f8       	sub	r8,-1
80009352:	ef 68 ff db 	st.b	r7[-37],r8
80009356:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000935a:	33 48       	mov	r8,52
8000935c:	f0 09 18 00 	cp.b	r9,r8
80009360:	fe 98 ff e6 	brls	8000932c <udd_test_mode_packet+0x118>
		*ptr_dest++ = *ptr_src++;
	}
	flags = cpu_irq_save();
80009364:	f0 1f 00 0b 	mcall	80009390 <udd_test_mode_packet+0x17c>
80009368:	18 98       	mov	r8,r12
8000936a:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_in_send_interrupt(0);
8000936e:	fe 68 01 f0 	mov	r8,-130576
80009372:	30 19       	mov	r9,1
80009374:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009376:	ee fc ff e4 	ld.w	r12,r7[-28]
8000937a:	f0 1f 00 07 	mcall	80009394 <udd_test_mode_packet+0x180>

	udd_ack_in_send(0);
8000937e:	fe 68 01 60 	mov	r8,-130720
80009382:	30 19       	mov	r9,1
80009384:	91 09       	st.w	r8[0x0],r9
}
80009386:	2e 9d       	sub	sp,-92
80009388:	e3 cd 80 80 	ldm	sp++,r7,pc
8000938c:	80 00       	ld.sh	r0,r0[0x0]
8000938e:	db ec       	*unknown*
80009390:	80 00       	ld.sh	r0,r0[0x0]
80009392:	83 04       	st.w	r1[0x0],r4
80009394:	80 00       	ld.sh	r0,r0[0x0]
80009396:	83 22       	st.w	r1[0x8],r2

80009398 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
80009398:	eb cd 40 80 	pushm	r7,lr
8000939c:	1a 97       	mov	r7,sp
8000939e:	20 7d       	sub	sp,28
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
800093a0:	fe 68 00 00 	mov	r8,-131072
800093a4:	fe 69 00 00 	mov	r9,-131072
800093a8:	72 09       	ld.w	r9,r9[0x0]
800093aa:	e0 19 ff 80 	andl	r9,0xff80
800093ae:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800093b0:	fe 68 00 00 	mov	r8,-131072
800093b4:	fe 69 00 00 	mov	r9,-131072
800093b8:	72 09       	ld.w	r9,r9[0x0]
800093ba:	a7 b9       	sbr	r9,0x7
800093bc:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
800093be:	fe 68 01 00 	mov	r8,-130816
800093c2:	fe 69 01 00 	mov	r9,-130816
800093c6:	72 09       	ld.w	r9,r9[0x0]
800093c8:	12 9a       	mov	r10,r9
800093ca:	e0 1a e6 83 	andl	r10,0xe683
800093ce:	34 09       	mov	r9,64
800093d0:	ef 49 ff f8 	st.w	r7[-8],r9
800093d4:	30 89       	mov	r9,8
800093d6:	ef 49 ff fc 	st.w	r7[-4],r9
800093da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800093de:	ee fb ff fc 	ld.w	r11,r7[-4]
800093e2:	f2 0b 0c 49 	max	r9,r9,r11
800093e6:	ef 49 ff f4 	st.w	r7[-12],r9
800093ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800093ee:	ef 49 ff ec 	st.w	r7[-20],r9
800093f2:	e0 69 04 00 	mov	r9,1024
800093f6:	ef 49 ff f0 	st.w	r7[-16],r9
800093fa:	ee f9 ff ec 	ld.w	r9,r7[-20]
800093fe:	ee fb ff f0 	ld.w	r11,r7[-16]
80009402:	f2 0b 0d 49 	min	r9,r9,r11
80009406:	ef 49 ff e8 	st.w	r7[-24],r9
8000940a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000940e:	a1 79       	lsl	r9,0x1
80009410:	20 19       	sub	r9,1
80009412:	f2 09 12 00 	clz	r9,r9
80009416:	f2 09 11 1c 	rsub	r9,r9,28
8000941a:	a5 69       	lsl	r9,0x4
8000941c:	e2 19 19 7c 	andl	r9,0x197c,COH
80009420:	f5 e9 10 09 	or	r9,r10,r9
80009424:	91 09       	st.w	r8[0x0],r9
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80009426:	fe 68 01 00 	mov	r8,-130816
8000942a:	fe 69 01 00 	mov	r9,-130816
8000942e:	72 09       	ld.w	r9,r9[0x0]
80009430:	a1 b9       	sbr	r9,0x1
80009432:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
80009434:	fe 68 00 00 	mov	r8,-131072
80009438:	fe 69 00 00 	mov	r9,-131072
8000943c:	72 79       	ld.w	r9,r9[0x1c]
8000943e:	a1 a9       	sbr	r9,0x0
80009440:	91 79       	st.w	r8[0x1c],r9
	flags = cpu_irq_save();
80009442:	f0 1f 00 0d 	mcall	80009474 <udd_reset_ep_ctrl+0xdc>
80009446:	18 98       	mov	r8,r12
80009448:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_setup_received_interrupt(0);
8000944c:	fe 68 01 f0 	mov	r8,-130576
80009450:	30 49       	mov	r9,4
80009452:	91 09       	st.w	r8[0x0],r9
	udd_enable_out_received_interrupt(0);
80009454:	fe 68 01 f0 	mov	r8,-130576
80009458:	30 29       	mov	r9,2
8000945a:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint_interrupt(0);
8000945c:	fe 68 00 00 	mov	r8,-131072
80009460:	e0 69 10 00 	mov	r9,4096
80009464:	91 69       	st.w	r8[0x18],r9
	cpu_irq_restore(flags);
80009466:	ee fc ff e4 	ld.w	r12,r7[-28]
8000946a:	f0 1f 00 04 	mcall	80009478 <udd_reset_ep_ctrl+0xe0>
}
8000946e:	2f 9d       	sub	sp,-28
80009470:	e3 cd 80 80 	ldm	sp++,r7,pc
80009474:	80 00       	ld.sh	r0,r0[0x0]
80009476:	83 04       	st.w	r1[0x0],r4
80009478:	80 00       	ld.sh	r0,r0[0x0]
8000947a:	83 22       	st.w	r1[0x8],r2

8000947c <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
8000947c:	eb cd 40 80 	pushm	r7,lr
80009480:	1a 97       	mov	r7,sp
80009482:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
80009484:	f0 1f 00 10 	mcall	800094c4 <udd_ctrl_init+0x48>
80009488:	18 98       	mov	r8,r12
8000948a:	ef 48 ff fc 	st.w	r7[-4],r8
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
8000948e:	fe 68 02 20 	mov	r8,-130528
80009492:	30 19       	mov	r9,1
80009494:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009496:	ee fc ff fc 	ld.w	r12,r7[-4]
8000949a:	f0 1f 00 0c 	mcall	800094c8 <udd_ctrl_init+0x4c>

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
8000949e:	fe 68 01 60 	mov	r8,-130720
800094a2:	30 29       	mov	r9,2
800094a4:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
800094a6:	48 a8       	lddpc	r8,800094cc <udd_ctrl_init+0x50>
800094a8:	30 09       	mov	r9,0
800094aa:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
800094ac:	48 88       	lddpc	r8,800094cc <udd_ctrl_init+0x50>
800094ae:	30 09       	mov	r9,0
800094b0:	91 59       	st.w	r8[0x14],r9
	udd_g_ctrlreq.payload_size = 0;
800094b2:	48 79       	lddpc	r9,800094cc <udd_ctrl_init+0x50>
800094b4:	30 08       	mov	r8,0
800094b6:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
800094b8:	48 68       	lddpc	r8,800094d0 <udd_ctrl_init+0x54>
800094ba:	30 09       	mov	r9,0
800094bc:	91 09       	st.w	r8[0x0],r9
}
800094be:	2f fd       	sub	sp,-4
800094c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800094c4:	80 00       	ld.sh	r0,r0[0x0]
800094c6:	83 04       	st.w	r1[0x0],r4
800094c8:	80 00       	ld.sh	r0,r0[0x0]
800094ca:	83 22       	st.w	r1[0x8],r2
800094cc:	00 00       	add	r0,r0
800094ce:	0b c8       	ld.ub	r8,r5[0x4]
800094d0:	00 00       	add	r0,r0
800094d2:	06 60       	and	r0,r3

800094d4 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
800094d4:	eb cd 40 80 	pushm	r7,lr
800094d8:	1a 97       	mov	r7,sp
800094da:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
800094dc:	4c b8       	lddpc	r8,80009608 <udd_ctrl_setup_received+0x134>
800094de:	70 08       	ld.w	r8,r8[0x0]
800094e0:	58 08       	cp.w	r8,0
800094e2:	c0 50       	breq	800094ec <udd_ctrl_setup_received+0x18>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
800094e4:	f0 1f 00 4a 	mcall	8000960c <udd_ctrl_setup_received+0x138>

		// Reinitializes control endpoint management
		udd_ctrl_init();
800094e8:	f0 1f 00 4a 	mcall	80009610 <udd_ctrl_setup_received+0x13c>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
800094ec:	fe 68 01 30 	mov	r8,-130768
800094f0:	70 08       	ld.w	r8,r8[0x0]
800094f2:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800094f6:	b5 88       	lsr	r8,0x14
800094f8:	58 88       	cp.w	r8,8
800094fa:	c0 80       	breq	8000950a <udd_ctrl_setup_received+0x36>
		udd_ctrl_stall_data();
800094fc:	f0 1f 00 46 	mcall	80009614 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
80009500:	fe 68 01 60 	mov	r8,-130720
80009504:	30 49       	mov	r9,4
80009506:	91 09       	st.w	r8[0x0],r9
		return; // Error data number doesn't correspond to SETUP packet
80009508:	c7 d8       	rjmp	80009602 <udd_ctrl_setup_received+0x12e>
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
8000950a:	fc 18 e0 00 	movh	r8,0xe000
8000950e:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < 8; i++) {
80009512:	30 08       	mov	r8,0
80009514:	ef 68 ff fb 	st.b	r7[-5],r8
80009518:	c1 38       	rjmp	8000953e <udd_ctrl_setup_received+0x6a>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
8000951a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000951e:	4b f8       	lddpc	r8,80009618 <udd_ctrl_setup_received+0x144>
80009520:	10 09       	add	r9,r8
80009522:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009526:	11 88       	ld.ub	r8,r8[0x0]
80009528:	b2 88       	st.b	r9[0x0],r8
8000952a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000952e:	2f f8       	sub	r8,-1
80009530:	ef 48 ff fc 	st.w	r7[-4],r8
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80009534:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80009538:	2f f8       	sub	r8,-1
8000953a:	ef 68 ff fb 	st.b	r7[-5],r8
8000953e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80009542:	30 78       	mov	r8,7
80009544:	f0 09 18 00 	cp.b	r9,r8
80009548:	fe 98 ff e9 	brls	8000951a <udd_ctrl_setup_received+0x46>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
8000954c:	4b 38       	lddpc	r8,80009618 <udd_ctrl_setup_received+0x144>
8000954e:	90 18       	ld.sh	r8,r8[0x2]
80009550:	5c 88       	casts.h	r8
80009552:	5c c8       	swap.bh	r8
80009554:	5c 88       	casts.h	r8
80009556:	4b 19       	lddpc	r9,80009618 <udd_ctrl_setup_received+0x144>
80009558:	b2 18       	st.h	r9[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
8000955a:	4b 08       	lddpc	r8,80009618 <udd_ctrl_setup_received+0x144>
8000955c:	90 28       	ld.sh	r8,r8[0x4]
8000955e:	5c 88       	casts.h	r8
80009560:	5c c8       	swap.bh	r8
80009562:	5c 88       	casts.h	r8
80009564:	4a d9       	lddpc	r9,80009618 <udd_ctrl_setup_received+0x144>
80009566:	b2 28       	st.h	r9[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80009568:	4a c8       	lddpc	r8,80009618 <udd_ctrl_setup_received+0x144>
8000956a:	90 38       	ld.sh	r8,r8[0x6]
8000956c:	5c 88       	casts.h	r8
8000956e:	5c c8       	swap.bh	r8
80009570:	5c 88       	casts.h	r8
80009572:	4a a9       	lddpc	r9,80009618 <udd_ctrl_setup_received+0x144>
80009574:	b2 38       	st.h	r9[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
80009576:	f0 1f 00 2a 	mcall	8000961c <udd_ctrl_setup_received+0x148>
8000957a:	18 98       	mov	r8,r12
8000957c:	ec 18 00 01 	eorl	r8,0x1
80009580:	5c 58       	castu.b	r8
80009582:	c0 80       	breq	80009592 <udd_ctrl_setup_received+0xbe>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
80009584:	f0 1f 00 24 	mcall	80009614 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
80009588:	fe 68 01 60 	mov	r8,-130720
8000958c:	30 49       	mov	r9,4
8000958e:	91 09       	st.w	r8[0x0],r9
		return;
80009590:	c3 98       	rjmp	80009602 <udd_ctrl_setup_received+0x12e>
	}
	udd_ack_setup_received(0);
80009592:	fe 68 01 60 	mov	r8,-130720
80009596:	30 49       	mov	r9,4
80009598:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
8000959a:	4a 08       	lddpc	r8,80009618 <udd_ctrl_setup_received+0x144>
8000959c:	11 88       	ld.ub	r8,r8[0x0]
8000959e:	10 99       	mov	r9,r8
800095a0:	30 08       	mov	r8,0
800095a2:	f0 09 18 00 	cp.b	r9,r8
800095a6:	c0 d4       	brge	800095c0 <udd_ctrl_setup_received+0xec>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800095a8:	49 e9       	lddpc	r9,80009620 <udd_ctrl_setup_received+0x14c>
800095aa:	30 08       	mov	r8,0
800095ac:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
800095ae:	49 e9       	lddpc	r9,80009624 <udd_ctrl_setup_received+0x150>
800095b0:	30 08       	mov	r8,0
800095b2:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
800095b4:	49 58       	lddpc	r8,80009608 <udd_ctrl_setup_received+0x134>
800095b6:	30 29       	mov	r9,2
800095b8:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
800095ba:	f0 1f 00 1c 	mcall	80009628 <udd_ctrl_setup_received+0x154>
800095be:	c2 28       	rjmp	80009602 <udd_ctrl_setup_received+0x12e>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
800095c0:	49 68       	lddpc	r8,80009618 <udd_ctrl_setup_received+0x144>
800095c2:	90 38       	ld.sh	r8,r8[0x6]
800095c4:	58 08       	cp.w	r8,0
800095c6:	c0 41       	brne	800095ce <udd_ctrl_setup_received+0xfa>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
800095c8:	f0 1f 00 19 	mcall	8000962c <udd_ctrl_setup_received+0x158>
			return;
800095cc:	c1 b8       	rjmp	80009602 <udd_ctrl_setup_received+0x12e>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800095ce:	49 59       	lddpc	r9,80009620 <udd_ctrl_setup_received+0x14c>
800095d0:	30 08       	mov	r8,0
800095d2:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
800095d4:	49 49       	lddpc	r9,80009624 <udd_ctrl_setup_received+0x150>
800095d6:	30 08       	mov	r8,0
800095d8:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
800095da:	48 c8       	lddpc	r8,80009608 <udd_ctrl_setup_received+0x134>
800095dc:	30 19       	mov	r9,1
800095de:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
800095e0:	fe 68 01 60 	mov	r8,-130720
800095e4:	31 09       	mov	r9,16
800095e6:	91 09       	st.w	r8[0x0],r9
		flags = cpu_irq_save();
800095e8:	f0 1f 00 12 	mcall	80009630 <udd_ctrl_setup_received+0x15c>
800095ec:	18 98       	mov	r8,r12
800095ee:	ef 48 ff f4 	st.w	r7[-12],r8
		udd_enable_nak_in_interrupt(0);
800095f2:	fe 68 01 f0 	mov	r8,-130576
800095f6:	31 09       	mov	r9,16
800095f8:	91 09       	st.w	r8[0x0],r9
		cpu_irq_restore(flags);
800095fa:	ee fc ff f4 	ld.w	r12,r7[-12]
800095fe:	f0 1f 00 0e 	mcall	80009634 <udd_ctrl_setup_received+0x160>
	}
}
80009602:	2f dd       	sub	sp,-12
80009604:	e3 cd 80 80 	ldm	sp++,r7,pc
80009608:	00 00       	add	r0,r0
8000960a:	06 60       	and	r0,r3
8000960c:	80 00       	ld.sh	r0,r0[0x0]
8000960e:	9a fc       	ld.uh	r12,sp[0xe]
80009610:	80 00       	ld.sh	r0,r0[0x0]
80009612:	94 7c       	ld.sh	r12,r10[0xe]
80009614:	80 00       	ld.sh	r0,r0[0x0]
80009616:	9a 44       	ld.sh	r4,sp[0x8]
80009618:	00 00       	add	r0,r0
8000961a:	0b c8       	ld.ub	r8,r5[0x4]
8000961c:	80 00       	ld.sh	r0,r0[0x0]
8000961e:	c8 d4       	brge	80009538 <udd_ctrl_setup_received+0x64>
80009620:	00 00       	add	r0,r0
80009622:	06 64       	and	r4,r3
80009624:	00 00       	add	r0,r0
80009626:	06 66       	and	r6,r3
80009628:	80 00       	ld.sh	r0,r0[0x0]
8000962a:	96 38       	ld.sh	r8,r11[0x6]
8000962c:	80 00       	ld.sh	r0,r0[0x0]
8000962e:	9a 64       	ld.sh	r4,sp[0xc]
80009630:	80 00       	ld.sh	r0,r0[0x0]
80009632:	83 04       	st.w	r1[0x0],r4
80009634:	80 00       	ld.sh	r0,r0[0x0]
80009636:	83 22       	st.w	r1[0x8],r2

80009638 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
80009638:	eb cd 40 80 	pushm	r7,lr
8000963c:	1a 97       	mov	r7,sp
8000963e:	20 4d       	sub	sp,16
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
80009640:	f0 1f 00 5c 	mcall	800097b0 <udd_ctrl_in_sent+0x178>
80009644:	18 98       	mov	r8,r12
80009646:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_disable_in_send_interrupt(0);
8000964a:	fe 68 02 20 	mov	r8,-130528
8000964e:	30 19       	mov	r9,1
80009650:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009652:	ee fc ff fc 	ld.w	r12,r7[-4]
80009656:	f0 1f 00 58 	mcall	800097b4 <udd_ctrl_in_sent+0x17c>

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000965a:	4d 88       	lddpc	r8,800097b8 <udd_ctrl_in_sent+0x180>
8000965c:	70 08       	ld.w	r8,r8[0x0]
8000965e:	58 38       	cp.w	r8,3
80009660:	c0 61       	brne	8000966c <udd_ctrl_in_sent+0x34>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80009662:	f0 1f 00 57 	mcall	800097bc <udd_ctrl_in_sent+0x184>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80009666:	f0 1f 00 57 	mcall	800097c0 <udd_ctrl_in_sent+0x188>
		return;
8000966a:	c9 f8       	rjmp	800097a8 <udd_ctrl_in_sent+0x170>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000966c:	4d 68       	lddpc	r8,800097c4 <udd_ctrl_in_sent+0x18c>
8000966e:	90 69       	ld.sh	r9,r8[0xc]
80009670:	4d 68       	lddpc	r8,800097c8 <udd_ctrl_in_sent+0x190>
80009672:	90 08       	ld.sh	r8,r8[0x0]
80009674:	10 19       	sub	r9,r8
80009676:	ef 59 ff f0 	st.h	r7[-16],r9
	if (0 == nb_remain) {
8000967a:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000967e:	30 08       	mov	r8,0
80009680:	f0 09 19 00 	cp.h	r9,r8
80009684:	c2 b1       	brne	800096da <udd_ctrl_in_sent+0xa2>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80009686:	4d 28       	lddpc	r8,800097cc <udd_ctrl_in_sent+0x194>
80009688:	90 09       	ld.sh	r9,r8[0x0]
8000968a:	4d 08       	lddpc	r8,800097c8 <udd_ctrl_in_sent+0x190>
8000968c:	90 08       	ld.sh	r8,r8[0x0]
8000968e:	f2 08 00 08 	add	r8,r9,r8
80009692:	5c 88       	casts.h	r8
80009694:	4c e9       	lddpc	r9,800097cc <udd_ctrl_in_sent+0x194>
80009696:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
80009698:	4c b8       	lddpc	r8,800097c4 <udd_ctrl_in_sent+0x18c>
8000969a:	90 39       	ld.sh	r9,r8[0x6]
8000969c:	4c c8       	lddpc	r8,800097cc <udd_ctrl_in_sent+0x194>
8000969e:	90 08       	ld.sh	r8,r8[0x0]
800096a0:	f0 09 19 00 	cp.h	r9,r8
800096a4:	c0 50       	breq	800096ae <udd_ctrl_in_sent+0x76>
800096a6:	4c b8       	lddpc	r8,800097d0 <udd_ctrl_in_sent+0x198>
800096a8:	11 88       	ld.ub	r8,r8[0x0]
800096aa:	58 08       	cp.w	r8,0
800096ac:	c0 40       	breq	800096b4 <udd_ctrl_in_sent+0x7c>
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
800096ae:	f0 1f 00 4a 	mcall	800097d4 <udd_ctrl_in_sent+0x19c>
			return;
800096b2:	c7 b8       	rjmp	800097a8 <udd_ctrl_in_sent+0x170>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
800096b4:	4c 48       	lddpc	r8,800097c4 <udd_ctrl_in_sent+0x18c>
800096b6:	70 58       	ld.w	r8,r8[0x14]
800096b8:	58 08       	cp.w	r8,0
800096ba:	c1 00       	breq	800096da <udd_ctrl_in_sent+0xa2>
800096bc:	4c 28       	lddpc	r8,800097c4 <udd_ctrl_in_sent+0x18c>
800096be:	70 58       	ld.w	r8,r8[0x14]
800096c0:	5d 18       	icall	r8
800096c2:	18 98       	mov	r8,r12
800096c4:	ec 18 00 01 	eorl	r8,0x1
800096c8:	5c 58       	castu.b	r8
800096ca:	c0 81       	brne	800096da <udd_ctrl_in_sent+0xa2>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
800096cc:	4b f9       	lddpc	r9,800097c8 <udd_ctrl_in_sent+0x190>
800096ce:	30 08       	mov	r8,0
800096d0:	b2 08       	st.h	r9[0x0],r8
			nb_remain = udd_g_ctrlreq.payload_size;
800096d2:	4b d8       	lddpc	r8,800097c4 <udd_ctrl_in_sent+0x18c>
800096d4:	90 68       	ld.sh	r8,r8[0xc]
800096d6:	ef 58 ff f0 	st.h	r7[-16],r8
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
800096da:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800096de:	33 f8       	mov	r8,63
800096e0:	f0 09 19 00 	cp.h	r9,r8
800096e4:	e0 88 00 09 	brls	800096f6 <udd_ctrl_in_sent+0xbe>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
800096e8:	34 08       	mov	r8,64
800096ea:	ef 58 ff f0 	st.h	r7[-16],r8
		b_shortpacket = false;
800096ee:	4b 99       	lddpc	r9,800097d0 <udd_ctrl_in_sent+0x198>
800096f0:	30 08       	mov	r8,0
800096f2:	b2 88       	st.b	r9[0x0],r8
800096f4:	c0 48       	rjmp	800096fc <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
800096f6:	4b 79       	lddpc	r9,800097d0 <udd_ctrl_in_sent+0x198>
800096f8:	30 18       	mov	r8,1
800096fa:	b2 88       	st.b	r9[0x0],r8
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
800096fc:	fc 18 e0 00 	movh	r8,0xe000
80009700:	ef 48 ff f4 	st.w	r7[-12],r8
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80009704:	4b 08       	lddpc	r8,800097c4 <udd_ctrl_in_sent+0x18c>
80009706:	70 29       	ld.w	r9,r8[0x8]
80009708:	4b 08       	lddpc	r8,800097c8 <udd_ctrl_in_sent+0x190>
8000970a:	90 08       	ld.sh	r8,r8[0x0]
8000970c:	5c 78       	castu.h	r8
8000970e:	f2 08 00 08 	add	r8,r9,r8
80009712:	ef 48 ff f8 	st.w	r7[-8],r8
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
80009716:	f0 1f 00 27 	mcall	800097b0 <udd_ctrl_in_sent+0x178>
8000971a:	18 98       	mov	r8,r12
8000971c:	ef 48 ff fc 	st.w	r7[-4],r8
	if (Is_udd_out_received(0)) {
80009720:	fe 68 01 30 	mov	r8,-130768
80009724:	70 08       	ld.w	r8,r8[0x0]
80009726:	e2 18 00 02 	andl	r8,0x2,COH
8000972a:	c0 90       	breq	8000973c <udd_ctrl_in_sent+0x104>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
8000972c:	ee fc ff fc 	ld.w	r12,r7[-4]
80009730:	f0 1f 00 21 	mcall	800097b4 <udd_ctrl_in_sent+0x17c>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80009734:	4a 18       	lddpc	r8,800097b8 <udd_ctrl_in_sent+0x180>
80009736:	30 49       	mov	r9,4
80009738:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
8000973a:	c3 78       	rjmp	800097a8 <udd_ctrl_in_sent+0x170>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000973c:	30 08       	mov	r8,0
8000973e:	ef 68 ff f3 	st.b	r7[-13],r8
80009742:	c1 68       	rjmp	8000976e <udd_ctrl_in_sent+0x136>
		*ptr_dest++ = *ptr_src++;
80009744:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009748:	11 88       	ld.ub	r8,r8[0x0]
8000974a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000974e:	b2 88       	st.b	r9[0x0],r8
80009750:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009754:	2f f8       	sub	r8,-1
80009756:	ef 48 ff f4 	st.w	r7[-12],r8
8000975a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000975e:	2f f8       	sub	r8,-1
80009760:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80009764:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80009768:	2f f8       	sub	r8,-1
8000976a:	ef 68 ff f3 	st.b	r7[-13],r8
8000976e:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80009772:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80009776:	f0 09 19 00 	cp.h	r9,r8
8000977a:	fe 9b ff e5 	brhi	80009744 <udd_ctrl_in_sent+0x10c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
8000977e:	49 38       	lddpc	r8,800097c8 <udd_ctrl_in_sent+0x190>
80009780:	90 08       	ld.sh	r8,r8[0x0]
80009782:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80009786:	f2 08 00 08 	add	r8,r9,r8
8000978a:	5c 88       	casts.h	r8
8000978c:	48 f9       	lddpc	r9,800097c8 <udd_ctrl_in_sent+0x190>
8000978e:	b2 08       	st.h	r9[0x0],r8

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
80009790:	fe 68 01 60 	mov	r8,-130720
80009794:	30 19       	mov	r9,1
80009796:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
80009798:	fe 68 01 f0 	mov	r8,-130576
8000979c:	30 19       	mov	r9,1
8000979e:	91 09       	st.w	r8[0x0],r9
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
800097a0:	ee fc ff fc 	ld.w	r12,r7[-4]
800097a4:	f0 1f 00 04 	mcall	800097b4 <udd_ctrl_in_sent+0x17c>
}
800097a8:	2f cd       	sub	sp,-16
800097aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800097ae:	00 00       	add	r0,r0
800097b0:	80 00       	ld.sh	r0,r0[0x0]
800097b2:	83 04       	st.w	r1[0x0],r4
800097b4:	80 00       	ld.sh	r0,r0[0x0]
800097b6:	83 22       	st.w	r1[0x8],r2
800097b8:	00 00       	add	r0,r0
800097ba:	06 60       	and	r0,r3
800097bc:	80 00       	ld.sh	r0,r0[0x0]
800097be:	9a fc       	ld.uh	r12,sp[0xe]
800097c0:	80 00       	ld.sh	r0,r0[0x0]
800097c2:	94 7c       	ld.sh	r12,r10[0xe]
800097c4:	00 00       	add	r0,r0
800097c6:	0b c8       	ld.ub	r8,r5[0x4]
800097c8:	00 00       	add	r0,r0
800097ca:	06 66       	and	r6,r3
800097cc:	00 00       	add	r0,r0
800097ce:	06 64       	and	r4,r3
800097d0:	00 00       	add	r0,r0
800097d2:	06 90       	mov	r0,r3
800097d4:	80 00       	ld.sh	r0,r0[0x0]
800097d6:	9a b8       	ld.uh	r8,sp[0x6]

800097d8 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
800097d8:	eb cd 40 80 	pushm	r7,lr
800097dc:	1a 97       	mov	r7,sp
800097de:	20 4d       	sub	sp,16
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
800097e0:	4f 18       	lddpc	r8,800099a4 <udd_ctrl_out_received+0x1cc>
800097e2:	70 08       	ld.w	r8,r8[0x0]
800097e4:	58 18       	cp.w	r8,1
800097e6:	c1 10       	breq	80009808 <udd_ctrl_out_received+0x30>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
800097e8:	4e f8       	lddpc	r8,800099a4 <udd_ctrl_out_received+0x1cc>
800097ea:	70 08       	ld.w	r8,r8[0x0]
800097ec:	58 28       	cp.w	r8,2
800097ee:	c0 50       	breq	800097f8 <udd_ctrl_out_received+0x20>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
800097f0:	4e d8       	lddpc	r8,800099a4 <udd_ctrl_out_received+0x1cc>
800097f2:	70 08       	ld.w	r8,r8[0x0]
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
800097f4:	58 48       	cp.w	r8,4
800097f6:	c0 41       	brne	800097fe <udd_ctrl_out_received+0x26>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
800097f8:	f0 1f 00 6c 	mcall	800099a8 <udd_ctrl_out_received+0x1d0>
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
800097fc:	c0 38       	rjmp	80009802 <udd_ctrl_out_received+0x2a>
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
800097fe:	f0 1f 00 6c 	mcall	800099ac <udd_ctrl_out_received+0x1d4>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80009802:	f0 1f 00 6c 	mcall	800099b0 <udd_ctrl_out_received+0x1d8>
		return;
80009806:	cc b8       	rjmp	8000999c <udd_ctrl_out_received+0x1c4>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80009808:	fe 68 01 30 	mov	r8,-130768
8000980c:	70 08       	ld.w	r8,r8[0x0]
8000980e:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80009812:	b5 88       	lsr	r8,0x14
80009814:	ef 58 ff f6 	st.h	r7[-10],r8
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80009818:	4e 78       	lddpc	r8,800099b4 <udd_ctrl_out_received+0x1dc>
8000981a:	90 68       	ld.sh	r8,r8[0xc]
8000981c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80009820:	4e 68       	lddpc	r8,800099b8 <udd_ctrl_out_received+0x1e0>
80009822:	90 08       	ld.sh	r8,r8[0x0]
80009824:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80009828:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000982c:	f4 08 00 08 	add	r8,r10,r8
80009830:	10 39       	cp.w	r9,r8
80009832:	c0 84       	brge	80009842 <udd_ctrl_out_received+0x6a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80009834:	4e 08       	lddpc	r8,800099b4 <udd_ctrl_out_received+0x1dc>
80009836:	90 69       	ld.sh	r9,r8[0xc]
80009838:	4e 08       	lddpc	r8,800099b8 <udd_ctrl_out_received+0x1e0>
8000983a:	90 08       	ld.sh	r8,r8[0x0]
8000983c:	10 19       	sub	r9,r8
8000983e:	ef 59 ff f6 	st.h	r7[-10],r9
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
80009842:	fc 18 e0 00 	movh	r8,0xe000
80009846:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000984a:	4d b8       	lddpc	r8,800099b4 <udd_ctrl_out_received+0x1dc>
8000984c:	70 29       	ld.w	r9,r8[0x8]
8000984e:	4d b8       	lddpc	r8,800099b8 <udd_ctrl_out_received+0x1e0>
80009850:	90 08       	ld.sh	r8,r8[0x0]
80009852:	5c 78       	castu.h	r8
80009854:	f2 08 00 08 	add	r8,r9,r8
80009858:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < nb_data; i++) {
8000985c:	30 08       	mov	r8,0
8000985e:	ef 68 ff f5 	st.b	r7[-11],r8
80009862:	c1 68       	rjmp	8000988e <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = *ptr_src++;
80009864:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009868:	11 88       	ld.ub	r8,r8[0x0]
8000986a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000986e:	b2 88       	st.b	r9[0x0],r8
80009870:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009874:	2f f8       	sub	r8,-1
80009876:	ef 48 ff fc 	st.w	r7[-4],r8
8000987a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000987e:	2f f8       	sub	r8,-1
80009880:	ef 48 ff f8 	st.w	r7[-8],r8
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80009884:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80009888:	2f f8       	sub	r8,-1
8000988a:	ef 68 ff f5 	st.b	r7[-11],r8
8000988e:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80009892:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80009896:	f0 09 19 00 	cp.h	r9,r8
8000989a:	fe 9b ff e5 	brhi	80009864 <udd_ctrl_out_received+0x8c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
8000989e:	4c 78       	lddpc	r8,800099b8 <udd_ctrl_out_received+0x1e0>
800098a0:	90 08       	ld.sh	r8,r8[0x0]
800098a2:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800098a6:	f2 08 00 08 	add	r8,r9,r8
800098aa:	5c 88       	casts.h	r8
800098ac:	4c 39       	lddpc	r9,800099b8 <udd_ctrl_out_received+0x1e0>
800098ae:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
800098b0:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800098b4:	34 08       	mov	r8,64
800098b6:	f0 09 19 00 	cp.h	r9,r8
800098ba:	c1 11       	brne	800098dc <udd_ctrl_out_received+0x104>
			|| (udd_g_ctrlreq.req.wLength <=
800098bc:	4b e8       	lddpc	r8,800099b4 <udd_ctrl_out_received+0x1dc>
800098be:	90 38       	ld.sh	r8,r8[0x6]
800098c0:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
					(udd_ctrl_prev_payload_nb_trans +
800098c4:	4b e8       	lddpc	r8,800099bc <udd_ctrl_out_received+0x1e4>
800098c6:	90 08       	ld.sh	r8,r8[0x0]
800098c8:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800098cc:	4b b8       	lddpc	r8,800099b8 <udd_ctrl_out_received+0x1e0>
800098ce:	90 08       	ld.sh	r8,r8[0x0]
800098d0:	5c 78       	castu.h	r8
800098d2:	f4 08 00 08 	add	r8,r10,r8
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
800098d6:	10 39       	cp.w	r9,r8
800098d8:	e0 89 00 20 	brgt	80009918 <udd_ctrl_out_received+0x140>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
800098dc:	4b 78       	lddpc	r8,800099b8 <udd_ctrl_out_received+0x1e0>
800098de:	90 08       	ld.sh	r8,r8[0x0]
800098e0:	4b 59       	lddpc	r9,800099b4 <udd_ctrl_out_received+0x1dc>
800098e2:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
800098e4:	4b 48       	lddpc	r8,800099b4 <udd_ctrl_out_received+0x1dc>
800098e6:	70 58       	ld.w	r8,r8[0x14]
800098e8:	58 08       	cp.w	r8,0
800098ea:	c1 00       	breq	8000990a <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
800098ec:	4b 28       	lddpc	r8,800099b4 <udd_ctrl_out_received+0x1dc>
800098ee:	70 58       	ld.w	r8,r8[0x14]
800098f0:	5d 18       	icall	r8
800098f2:	18 98       	mov	r8,r12
800098f4:	ec 18 00 01 	eorl	r8,0x1
800098f8:	5c 58       	castu.b	r8
800098fa:	c0 80       	breq	8000990a <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
800098fc:	f0 1f 00 2c 	mcall	800099ac <udd_ctrl_out_received+0x1d4>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80009900:	fe 68 01 60 	mov	r8,-130720
80009904:	30 29       	mov	r9,2
80009906:	91 09       	st.w	r8[0x0],r9
				return;
80009908:	c4 a8       	rjmp	8000999c <udd_ctrl_out_received+0x1c4>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
8000990a:	fe 68 01 60 	mov	r8,-130720
8000990e:	30 29       	mov	r9,2
80009910:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80009912:	f0 1f 00 2c 	mcall	800099c0 <udd_ctrl_out_received+0x1e8>
		return;
80009916:	c4 38       	rjmp	8000999c <udd_ctrl_out_received+0x1c4>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80009918:	4a 78       	lddpc	r8,800099b4 <udd_ctrl_out_received+0x1dc>
8000991a:	90 69       	ld.sh	r9,r8[0xc]
8000991c:	4a 78       	lddpc	r8,800099b8 <udd_ctrl_out_received+0x1e0>
8000991e:	90 08       	ld.sh	r8,r8[0x0]
80009920:	f0 09 19 00 	cp.h	r9,r8
80009924:	c2 71       	brne	80009972 <udd_ctrl_out_received+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80009926:	4a 48       	lddpc	r8,800099b4 <udd_ctrl_out_received+0x1dc>
80009928:	70 58       	ld.w	r8,r8[0x14]
8000992a:	58 08       	cp.w	r8,0
8000992c:	c0 81       	brne	8000993c <udd_ctrl_out_received+0x164>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
8000992e:	f0 1f 00 20 	mcall	800099ac <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80009932:	fe 68 01 60 	mov	r8,-130720
80009936:	30 29       	mov	r9,2
80009938:	91 09       	st.w	r8[0x0],r9
			return;
8000993a:	c3 18       	rjmp	8000999c <udd_ctrl_out_received+0x1c4>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
8000993c:	49 e8       	lddpc	r8,800099b4 <udd_ctrl_out_received+0x1dc>
8000993e:	70 58       	ld.w	r8,r8[0x14]
80009940:	5d 18       	icall	r8
80009942:	18 98       	mov	r8,r12
80009944:	ec 18 00 01 	eorl	r8,0x1
80009948:	5c 58       	castu.b	r8
8000994a:	c0 80       	breq	8000995a <udd_ctrl_out_received+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
8000994c:	f0 1f 00 18 	mcall	800099ac <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80009950:	fe 68 01 60 	mov	r8,-130720
80009954:	30 29       	mov	r9,2
80009956:	91 09       	st.w	r8[0x0],r9
			return;
80009958:	c2 28       	rjmp	8000999c <udd_ctrl_out_received+0x1c4>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000995a:	49 98       	lddpc	r8,800099bc <udd_ctrl_out_received+0x1e4>
8000995c:	90 09       	ld.sh	r9,r8[0x0]
8000995e:	49 78       	lddpc	r8,800099b8 <udd_ctrl_out_received+0x1e0>
80009960:	90 08       	ld.sh	r8,r8[0x0]
80009962:	f2 08 00 08 	add	r8,r9,r8
80009966:	5c 88       	casts.h	r8
80009968:	49 59       	lddpc	r9,800099bc <udd_ctrl_out_received+0x1e4>
8000996a:	b2 08       	st.h	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
8000996c:	49 39       	lddpc	r9,800099b8 <udd_ctrl_out_received+0x1e0>
8000996e:	30 08       	mov	r8,0
80009970:	b2 08       	st.h	r9[0x0],r8
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80009972:	fe 68 01 60 	mov	r8,-130720
80009976:	30 29       	mov	r9,2
80009978:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
8000997a:	fe 68 01 60 	mov	r8,-130720
8000997e:	31 09       	mov	r9,16
80009980:	91 09       	st.w	r8[0x0],r9
	flags = cpu_irq_save();
80009982:	f0 1f 00 11 	mcall	800099c4 <udd_ctrl_out_received+0x1ec>
80009986:	18 98       	mov	r8,r12
80009988:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_enable_nak_in_interrupt(0);
8000998c:	fe 68 01 f0 	mov	r8,-130576
80009990:	31 09       	mov	r9,16
80009992:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009994:	ee fc ff f0 	ld.w	r12,r7[-16]
80009998:	f0 1f 00 0c 	mcall	800099c8 <udd_ctrl_out_received+0x1f0>
}
8000999c:	2f cd       	sub	sp,-16
8000999e:	e3 cd 80 80 	ldm	sp++,r7,pc
800099a2:	00 00       	add	r0,r0
800099a4:	00 00       	add	r0,r0
800099a6:	06 60       	and	r0,r3
800099a8:	80 00       	ld.sh	r0,r0[0x0]
800099aa:	9a fc       	ld.uh	r12,sp[0xe]
800099ac:	80 00       	ld.sh	r0,r0[0x0]
800099ae:	9a 44       	ld.sh	r4,sp[0x8]
800099b0:	80 00       	ld.sh	r0,r0[0x0]
800099b2:	94 7c       	ld.sh	r12,r10[0xe]
800099b4:	00 00       	add	r0,r0
800099b6:	0b c8       	ld.ub	r8,r5[0x4]
800099b8:	00 00       	add	r0,r0
800099ba:	06 66       	and	r6,r3
800099bc:	00 00       	add	r0,r0
800099be:	06 64       	and	r4,r3
800099c0:	80 00       	ld.sh	r0,r0[0x0]
800099c2:	9a 64       	ld.sh	r4,sp[0xc]
800099c4:	80 00       	ld.sh	r0,r0[0x0]
800099c6:	83 04       	st.w	r1[0x0],r4
800099c8:	80 00       	ld.sh	r0,r0[0x0]
800099ca:	83 22       	st.w	r1[0x8],r2

800099cc <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
800099cc:	eb cd 40 80 	pushm	r7,lr
800099d0:	1a 97       	mov	r7,sp
	if (Is_udd_out_received(0))
800099d2:	fe 68 01 30 	mov	r8,-130768
800099d6:	70 08       	ld.w	r8,r8[0x0]
800099d8:	e2 18 00 02 	andl	r8,0x2,COH
800099dc:	c1 21       	brne	80009a00 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
800099de:	48 b8       	lddpc	r8,80009a08 <udd_ctrl_underflow+0x3c>
800099e0:	70 08       	ld.w	r8,r8[0x0]
800099e2:	58 18       	cp.w	r8,1
800099e4:	c0 41       	brne	800099ec <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
800099e6:	f0 1f 00 0a 	mcall	80009a0c <udd_ctrl_underflow+0x40>
800099ea:	c0 c8       	rjmp	80009a02 <udd_ctrl_underflow+0x36>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
800099ec:	48 78       	lddpc	r8,80009a08 <udd_ctrl_underflow+0x3c>
800099ee:	70 08       	ld.w	r8,r8[0x0]
800099f0:	58 48       	cp.w	r8,4
800099f2:	c0 81       	brne	80009a02 <udd_ctrl_underflow+0x36>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
800099f4:	fe 68 01 f0 	mov	r8,-130576
800099f8:	e8 69 00 00 	mov	r9,524288
800099fc:	91 09       	st.w	r8[0x0],r9
800099fe:	c0 28       	rjmp	80009a02 <udd_ctrl_underflow+0x36>


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
		return; // underflow ignored if OUT data is received
80009a00:	d7 03       	nop
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
	}
}
80009a02:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a06:	00 00       	add	r0,r0
80009a08:	00 00       	add	r0,r0
80009a0a:	06 60       	and	r0,r3
80009a0c:	80 00       	ld.sh	r0,r0[0x0]
80009a0e:	9a 64       	ld.sh	r4,sp[0xc]

80009a10 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
80009a10:	eb cd 40 80 	pushm	r7,lr
80009a14:	1a 97       	mov	r7,sp
	if (Is_udd_in_send(0))
80009a16:	fe 68 01 30 	mov	r8,-130768
80009a1a:	70 08       	ld.w	r8,r8[0x0]
80009a1c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009a20:	5c 58       	castu.b	r8
80009a22:	c0 b1       	brne	80009a38 <udd_ctrl_overflow+0x28>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80009a24:	48 78       	lddpc	r8,80009a40 <udd_ctrl_overflow+0x30>
80009a26:	70 08       	ld.w	r8,r8[0x0]
80009a28:	58 38       	cp.w	r8,3
80009a2a:	c0 81       	brne	80009a3a <udd_ctrl_overflow+0x2a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80009a2c:	fe 68 01 f0 	mov	r8,-130576
80009a30:	e8 69 00 00 	mov	r9,524288
80009a34:	91 09       	st.w	r8[0x0],r9
80009a36:	c0 28       	rjmp	80009a3a <udd_ctrl_overflow+0x2a>


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
		return; // overflow ignored if IN data is received
80009a38:	d7 03       	nop
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
80009a3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a3e:	00 00       	add	r0,r0
80009a40:	00 00       	add	r0,r0
80009a42:	06 60       	and	r0,r3

80009a44 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
80009a44:	eb cd 40 80 	pushm	r7,lr
80009a48:	1a 97       	mov	r7,sp
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80009a4a:	48 68       	lddpc	r8,80009a60 <udd_ctrl_stall_data+0x1c>
80009a4c:	30 59       	mov	r9,5
80009a4e:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80009a50:	fe 68 01 f0 	mov	r8,-130576
80009a54:	e8 69 00 00 	mov	r9,524288
80009a58:	91 09       	st.w	r8[0x0],r9
}
80009a5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a5e:	00 00       	add	r0,r0
80009a60:	00 00       	add	r0,r0
80009a62:	06 60       	and	r0,r3

80009a64 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
80009a64:	eb cd 40 80 	pushm	r7,lr
80009a68:	1a 97       	mov	r7,sp
80009a6a:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80009a6c:	49 08       	lddpc	r8,80009aac <udd_ctrl_send_zlp_in+0x48>
80009a6e:	30 39       	mov	r9,3
80009a70:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
80009a72:	f0 1f 00 10 	mcall	80009ab0 <udd_ctrl_send_zlp_in+0x4c>
80009a76:	18 98       	mov	r8,r12
80009a78:	ef 48 ff fc 	st.w	r7[-4],r8
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80009a7c:	fe 68 01 60 	mov	r8,-130720
80009a80:	30 19       	mov	r9,1
80009a82:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
80009a84:	fe 68 01 f0 	mov	r8,-130576
80009a88:	30 19       	mov	r9,1
80009a8a:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80009a8c:	fe 68 01 60 	mov	r8,-130720
80009a90:	30 89       	mov	r9,8
80009a92:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_out_interrupt(0);
80009a94:	fe 68 01 f0 	mov	r8,-130576
80009a98:	30 89       	mov	r9,8
80009a9a:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009a9c:	ee fc ff fc 	ld.w	r12,r7[-4]
80009aa0:	f0 1f 00 05 	mcall	80009ab4 <udd_ctrl_send_zlp_in+0x50>
}
80009aa4:	2f fd       	sub	sp,-4
80009aa6:	e3 cd 80 80 	ldm	sp++,r7,pc
80009aaa:	00 00       	add	r0,r0
80009aac:	00 00       	add	r0,r0
80009aae:	06 60       	and	r0,r3
80009ab0:	80 00       	ld.sh	r0,r0[0x0]
80009ab2:	83 04       	st.w	r1[0x0],r4
80009ab4:	80 00       	ld.sh	r0,r0[0x0]
80009ab6:	83 22       	st.w	r1[0x8],r2

80009ab8 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
80009ab8:	eb cd 40 80 	pushm	r7,lr
80009abc:	1a 97       	mov	r7,sp
80009abe:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80009ac0:	48 c8       	lddpc	r8,80009af0 <udd_ctrl_send_zlp_out+0x38>
80009ac2:	30 49       	mov	r9,4
80009ac4:	91 09       	st.w	r8[0x0],r9
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
80009ac6:	f0 1f 00 0c 	mcall	80009af4 <udd_ctrl_send_zlp_out+0x3c>
80009aca:	18 98       	mov	r8,r12
80009acc:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_ack_nak_in(0);
80009ad0:	fe 68 01 60 	mov	r8,-130720
80009ad4:	31 09       	mov	r9,16
80009ad6:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_in_interrupt(0);
80009ad8:	fe 68 01 f0 	mov	r8,-130576
80009adc:	31 09       	mov	r9,16
80009ade:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009ae0:	ee fc ff fc 	ld.w	r12,r7[-4]
80009ae4:	f0 1f 00 05 	mcall	80009af8 <udd_ctrl_send_zlp_out+0x40>
}
80009ae8:	2f fd       	sub	sp,-4
80009aea:	e3 cd 80 80 	ldm	sp++,r7,pc
80009aee:	00 00       	add	r0,r0
80009af0:	00 00       	add	r0,r0
80009af2:	06 60       	and	r0,r3
80009af4:	80 00       	ld.sh	r0,r0[0x0]
80009af6:	83 04       	st.w	r1[0x0],r4
80009af8:	80 00       	ld.sh	r0,r0[0x0]
80009afa:	83 22       	st.w	r1[0x8],r2

80009afc <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
80009afc:	eb cd 40 80 	pushm	r7,lr
80009b00:	1a 97       	mov	r7,sp
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80009b02:	48 58       	lddpc	r8,80009b14 <udd_ctrl_endofrequest+0x18>
80009b04:	70 48       	ld.w	r8,r8[0x10]
80009b06:	58 08       	cp.w	r8,0
80009b08:	c0 40       	breq	80009b10 <udd_ctrl_endofrequest+0x14>
		udd_g_ctrlreq.callback();
80009b0a:	48 38       	lddpc	r8,80009b14 <udd_ctrl_endofrequest+0x18>
80009b0c:	70 48       	ld.w	r8,r8[0x10]
80009b0e:	5d 18       	icall	r8
	}
}
80009b10:	e3 cd 80 80 	ldm	sp++,r7,pc
80009b14:	00 00       	add	r0,r0
80009b16:	0b c8       	ld.ub	r8,r5[0x4]

80009b18 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
80009b18:	eb cd 40 80 	pushm	r7,lr
80009b1c:	1a 97       	mov	r7,sp

	if (!Is_udd_endpoint_interrupt(0))
80009b1e:	fe 68 00 00 	mov	r8,-131072
80009b22:	70 18       	ld.w	r8,r8[0x4]
80009b24:	e2 18 10 00 	andl	r8,0x1000,COH
80009b28:	c0 31       	brne	80009b2e <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
80009b2a:	30 08       	mov	r8,0
80009b2c:	c4 c8       	rjmp	80009bc4 <udd_ctrl_interrupt+0xac>

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80009b2e:	fe 68 02 20 	mov	r8,-130528
80009b32:	31 09       	mov	r9,16
80009b34:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80009b36:	fe 68 02 20 	mov	r8,-130528
80009b3a:	30 89       	mov	r9,8
80009b3c:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80009b3e:	fe 68 01 30 	mov	r8,-130768
80009b42:	70 08       	ld.w	r8,r8[0x0]
80009b44:	e2 18 00 04 	andl	r8,0x4,COH
80009b48:	c0 50       	breq	80009b52 <udd_ctrl_interrupt+0x3a>
		// SETUP packet received
		udd_ctrl_setup_received();
80009b4a:	f0 1f 00 21 	mcall	80009bcc <udd_ctrl_interrupt+0xb4>
		return true;
80009b4e:	30 18       	mov	r8,1
80009b50:	c3 a8       	rjmp	80009bc4 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80009b52:	fe 68 01 30 	mov	r8,-130768
80009b56:	70 08       	ld.w	r8,r8[0x0]
80009b58:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009b5c:	5c 58       	castu.b	r8
80009b5e:	c0 c0       	breq	80009b76 <udd_ctrl_interrupt+0x5e>
80009b60:	fe 68 01 c0 	mov	r8,-130624
80009b64:	70 08       	ld.w	r8,r8[0x0]
80009b66:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009b6a:	5c 58       	castu.b	r8
80009b6c:	c0 50       	breq	80009b76 <udd_ctrl_interrupt+0x5e>
		// IN packet sent
		udd_ctrl_in_sent();
80009b6e:	f0 1f 00 19 	mcall	80009bd0 <udd_ctrl_interrupt+0xb8>
		return true;
80009b72:	30 18       	mov	r8,1
80009b74:	c2 88       	rjmp	80009bc4 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_out_received(0)) {
80009b76:	fe 68 01 30 	mov	r8,-130768
80009b7a:	70 08       	ld.w	r8,r8[0x0]
80009b7c:	e2 18 00 02 	andl	r8,0x2,COH
80009b80:	c0 50       	breq	80009b8a <udd_ctrl_interrupt+0x72>
		// OUT packet received
		udd_ctrl_out_received();
80009b82:	f0 1f 00 15 	mcall	80009bd4 <udd_ctrl_interrupt+0xbc>
		return true;
80009b86:	30 18       	mov	r8,1
80009b88:	c1 e8       	rjmp	80009bc4 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_out(0)) {
80009b8a:	fe 68 01 30 	mov	r8,-130768
80009b8e:	70 08       	ld.w	r8,r8[0x0]
80009b90:	e2 18 00 08 	andl	r8,0x8,COH
80009b94:	c0 90       	breq	80009ba6 <udd_ctrl_interrupt+0x8e>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80009b96:	fe 68 01 60 	mov	r8,-130720
80009b9a:	30 89       	mov	r9,8
80009b9c:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_overflow();
80009b9e:	f0 1f 00 0f 	mcall	80009bd8 <udd_ctrl_interrupt+0xc0>
		return true;
80009ba2:	30 18       	mov	r8,1
80009ba4:	c1 08       	rjmp	80009bc4 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_in(0)) {
80009ba6:	fe 68 01 30 	mov	r8,-130768
80009baa:	70 08       	ld.w	r8,r8[0x0]
80009bac:	e2 18 00 10 	andl	r8,0x10,COH
80009bb0:	c0 90       	breq	80009bc2 <udd_ctrl_interrupt+0xaa>
		// Underflow on IN packet
		udd_ack_nak_in(0);
80009bb2:	fe 68 01 60 	mov	r8,-130720
80009bb6:	31 09       	mov	r9,16
80009bb8:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_underflow();
80009bba:	f0 1f 00 09 	mcall	80009bdc <udd_ctrl_interrupt+0xc4>
		return true;
80009bbe:	30 18       	mov	r8,1
80009bc0:	c0 28       	rjmp	80009bc4 <udd_ctrl_interrupt+0xac>
	}
	return false;
80009bc2:	30 08       	mov	r8,0
}
80009bc4:	10 9c       	mov	r12,r8
80009bc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80009bca:	00 00       	add	r0,r0
80009bcc:	80 00       	ld.sh	r0,r0[0x0]
80009bce:	94 d4       	ld.uh	r4,r10[0xa]
80009bd0:	80 00       	ld.sh	r0,r0[0x0]
80009bd2:	96 38       	ld.sh	r8,r11[0x6]
80009bd4:	80 00       	ld.sh	r0,r0[0x0]
80009bd6:	97 d8       	st.w	r11[0x34],r8
80009bd8:	80 00       	ld.sh	r0,r0[0x0]
80009bda:	9a 10       	ld.sh	r0,sp[0x2]
80009bdc:	80 00       	ld.sh	r0,r0[0x0]
80009bde:	99 cc       	st.w	r12[0x30],r12

80009be0 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
80009be0:	eb cd 40 80 	pushm	r7,lr
80009be4:	1a 97       	mov	r7,sp
80009be6:	20 1d       	sub	sp,4
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80009be8:	30 08       	mov	r8,0
80009bea:	ef 68 ff ff 	st.b	r7[-1],r8
80009bee:	c2 28       	rjmp	80009c32 <udd_ep_job_table_reset+0x52>
		udd_ep_job[i].busy = false;
80009bf0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009bf4:	49 5a       	lddpc	r10,80009c48 <udd_ep_job_table_reset+0x68>
80009bf6:	12 98       	mov	r8,r9
80009bf8:	a3 68       	lsl	r8,0x2
80009bfa:	12 08       	add	r8,r9
80009bfc:	a3 68       	lsl	r8,0x2
80009bfe:	f4 08 00 09 	add	r9,r10,r8
80009c02:	72 08       	ld.w	r8,r9[0x0]
80009c04:	30 0a       	mov	r10,0
80009c06:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80009c0a:	93 08       	st.w	r9[0x0],r8
		udd_ep_job[i].stall_requested = false;
80009c0c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c10:	48 ea       	lddpc	r10,80009c48 <udd_ep_job_table_reset+0x68>
80009c12:	12 98       	mov	r8,r9
80009c14:	a3 68       	lsl	r8,0x2
80009c16:	12 08       	add	r8,r9
80009c18:	a3 68       	lsl	r8,0x2
80009c1a:	f4 08 00 09 	add	r9,r10,r8
80009c1e:	72 08       	ld.w	r8,r9[0x0]
80009c20:	30 0a       	mov	r10,0
80009c22:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80009c26:	93 08       	st.w	r9[0x0],r8
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80009c28:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009c2c:	2f f8       	sub	r8,-1
80009c2e:	ef 68 ff ff 	st.b	r7[-1],r8
80009c32:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c36:	30 18       	mov	r8,1
80009c38:	f0 09 18 00 	cp.b	r9,r8
80009c3c:	fe 98 ff da 	brls	80009bf0 <udd_ep_job_table_reset+0x10>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].stall_requested = false;
	}
}
80009c40:	2f fd       	sub	sp,-4
80009c42:	e3 cd 80 80 	ldm	sp++,r7,pc
80009c46:	00 00       	add	r0,r0
80009c48:	00 00       	add	r0,r0
80009c4a:	06 68       	and	r8,r3

80009c4c <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
80009c4c:	eb cd 40 80 	pushm	r7,lr
80009c50:	1a 97       	mov	r7,sp
80009c52:	20 1d       	sub	sp,4
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80009c54:	30 08       	mov	r8,0
80009c56:	ef 68 ff ff 	st.b	r7[-1],r8
80009c5a:	c1 98       	rjmp	80009c8c <udd_ep_job_table_kill+0x40>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
80009c5c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009c60:	2f f8       	sub	r8,-1
80009c62:	5c 58       	castu.b	r8
80009c64:	10 9a       	mov	r10,r8
80009c66:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c6a:	12 98       	mov	r8,r9
80009c6c:	a3 68       	lsl	r8,0x2
80009c6e:	12 08       	add	r8,r9
80009c70:	a3 68       	lsl	r8,0x2
80009c72:	10 99       	mov	r9,r8
80009c74:	48 b8       	lddpc	r8,80009ca0 <udd_ep_job_table_kill+0x54>
80009c76:	f2 08 00 08 	add	r8,r9,r8
80009c7a:	30 1b       	mov	r11,1
80009c7c:	10 9c       	mov	r12,r8
80009c7e:	f0 1f 00 0a 	mcall	80009ca4 <udd_ep_job_table_kill+0x58>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80009c82:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009c86:	2f f8       	sub	r8,-1
80009c88:	ef 68 ff ff 	st.b	r7[-1],r8
80009c8c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c90:	30 18       	mov	r8,1
80009c92:	f0 09 18 00 	cp.b	r9,r8
80009c96:	fe 98 ff e3 	brls	80009c5c <udd_ep_job_table_kill+0x10>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
	}
}
80009c9a:	2f fd       	sub	sp,-4
80009c9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009ca0:	00 00       	add	r0,r0
80009ca2:	06 68       	and	r8,r3
80009ca4:	80 00       	ld.sh	r0,r0[0x0]
80009ca6:	9c f4       	ld.uh	r4,lr[0xe]

80009ca8 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80009ca8:	eb cd 40 80 	pushm	r7,lr
80009cac:	1a 97       	mov	r7,sp
80009cae:	20 1d       	sub	sp,4
80009cb0:	18 98       	mov	r8,r12
80009cb2:	ef 68 ff fc 	st.b	r7[-4],r8
	ep &= USB_EP_ADDR_MASK;
80009cb6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009cba:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009cbe:	ef 68 ff fc 	st.b	r7[-4],r8

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
80009cc2:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80009cc6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009cca:	f0 c9 00 01 	sub	r9,r8,1
80009cce:	12 98       	mov	r8,r9
80009cd0:	a3 68       	lsl	r8,0x2
80009cd2:	12 08       	add	r8,r9
80009cd4:	a3 68       	lsl	r8,0x2
80009cd6:	10 99       	mov	r9,r8
80009cd8:	48 58       	lddpc	r8,80009cec <udd_ep_abort_job+0x44>
80009cda:	f2 08 00 08 	add	r8,r9,r8
80009cde:	30 1b       	mov	r11,1
80009ce0:	10 9c       	mov	r12,r8
80009ce2:	f0 1f 00 04 	mcall	80009cf0 <udd_ep_abort_job+0x48>
}
80009ce6:	2f fd       	sub	sp,-4
80009ce8:	e3 cd 80 80 	ldm	sp++,r7,pc
80009cec:	00 00       	add	r0,r0
80009cee:	06 68       	and	r8,r3
80009cf0:	80 00       	ld.sh	r0,r0[0x0]
80009cf2:	9c f4       	ld.uh	r4,lr[0xe]

80009cf4 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
80009cf4:	eb cd 40 80 	pushm	r7,lr
80009cf8:	1a 97       	mov	r7,sp
80009cfa:	20 3d       	sub	sp,12
80009cfc:	ef 4c ff fc 	st.w	r7[-4],r12
80009d00:	16 99       	mov	r9,r11
80009d02:	14 98       	mov	r8,r10
80009d04:	ef 69 ff f8 	st.b	r7[-8],r9
80009d08:	ef 68 ff f4 	st.b	r7[-12],r8
	if (ptr_job->busy == false) {
80009d0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009d10:	70 08       	ld.w	r8,r8[0x0]
80009d12:	e6 18 80 00 	andh	r8,0x8000,COH
80009d16:	c2 b0       	breq	80009d6c <udd_ep_finish_job+0x78>
		return; // No on-going job
	}
	ptr_job->busy = false;
80009d18:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009d1c:	72 08       	ld.w	r8,r9[0x0]
80009d1e:	30 0a       	mov	r10,0
80009d20:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80009d24:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans) {
80009d26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009d2a:	70 48       	ld.w	r8,r8[0x10]
80009d2c:	58 08       	cp.w	r8,0
80009d2e:	c2 10       	breq	80009d70 <udd_ep_finish_job+0x7c>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
80009d30:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009d34:	a3 68       	lsl	r8,0x2
80009d36:	e0 38 ff 00 	sub	r8,130816
80009d3a:	70 08       	ld.w	r8,r8[0x0]
80009d3c:	e2 18 01 00 	andl	r8,0x100,COH
80009d40:	c0 90       	breq	80009d52 <udd_ep_finish_job+0x5e>
		ep_num |= USB_EP_DIR_IN;
80009d42:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009d46:	ea 18 ff ff 	orh	r8,0xffff
80009d4a:	e8 18 ff 80 	orl	r8,0xff80
80009d4e:	ef 68 ff f4 	st.b	r7[-12],r8
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80009d52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009d56:	70 48       	ld.w	r8,r8[0x10]
80009d58:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80009d5c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009d60:	72 2b       	ld.w	r11,r9[0x8]
80009d62:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009d66:	12 9c       	mov	r12,r9
80009d68:	5d 18       	icall	r8
80009d6a:	c0 48       	rjmp	80009d72 <udd_ep_finish_job+0x7e>


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
		return; // No on-going job
80009d6c:	d7 03       	nop
80009d6e:	c0 28       	rjmp	80009d72 <udd_ep_finish_job+0x7e>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
		return; // No callback linked to job
80009d70:	d7 03       	nop
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
80009d72:	2f dd       	sub	sp,-12
80009d74:	e3 cd 80 80 	ldm	sp++,r7,pc

80009d78 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
80009d78:	eb cd 40 80 	pushm	r7,lr
80009d7c:	1a 97       	mov	r7,sp
80009d7e:	20 5d       	sub	sp,20
80009d80:	18 98       	mov	r8,r12
80009d82:	ef 68 ff ec 	st.b	r7[-20],r8
	uint32_t udd_dma_ctrl = 0;
80009d86:	30 08       	mov	r8,0
80009d88:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
80009d8c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009d90:	f0 c9 00 01 	sub	r9,r8,1
80009d94:	12 98       	mov	r8,r9
80009d96:	a3 68       	lsl	r8,0x2
80009d98:	12 08       	add	r8,r9
80009d9a:	a3 68       	lsl	r8,0x2
80009d9c:	10 99       	mov	r9,r8
80009d9e:	fe f8 02 1e 	ld.w	r8,pc[542]
80009da2:	f2 08 00 08 	add	r8,r9,r8
80009da6:	ef 48 ff f4 	st.w	r7[-12],r8

	if (!ptr_job->busy) {
80009daa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009dae:	70 08       	ld.w	r8,r8[0x0]
80009db0:	e6 18 80 00 	andh	r8,0x8000,COH
80009db4:	e0 80 01 00 	breq	80009fb4 <udd_ep_trans_done+0x23c>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80009db8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009dbc:	70 39       	ld.w	r9,r8[0xc]
80009dbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009dc2:	70 28       	ld.w	r8,r8[0x8]
80009dc4:	10 39       	cp.w	r9,r8
80009dc6:	e0 80 00 b7 	breq	80009f34 <udd_ep_trans_done+0x1bc>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80009dca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009dce:	70 29       	ld.w	r9,r8[0x8]
80009dd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009dd4:	70 38       	ld.w	r8,r8[0xc]
80009dd6:	10 19       	sub	r9,r8
80009dd8:	ef 49 ff f8 	st.w	r7[-8],r9

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80009ddc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009de0:	e0 58 00 00 	cp.w	r8,65536
80009de4:	e0 88 00 0a 	brls	80009df8 <udd_ep_trans_done+0x80>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
80009de8:	e0 78 00 00 	mov	r8,65536
80009dec:	ef 48 ff f8 	st.w	r7[-8],r8

			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
80009df0:	30 08       	mov	r8,0
80009df2:	ef 48 ff f0 	st.w	r7[-16],r8
80009df6:	c0 68       	rjmp	80009e02 <udd_ep_trans_done+0x8a>
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
80009df8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009dfc:	b1 68       	lsl	r8,0x10
80009dfe:	ef 48 ff f0 	st.w	r7[-16],r8
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
80009e02:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009e06:	a3 68       	lsl	r8,0x2
80009e08:	e0 38 ff 00 	sub	r8,130816
80009e0c:	70 08       	ld.w	r8,r8[0x0]
80009e0e:	e2 18 01 00 	andl	r8,0x100,COH
80009e12:	c2 10       	breq	80009e54 <udd_ep_trans_done+0xdc>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
80009e14:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009e18:	a3 68       	lsl	r8,0x2
80009e1a:	e0 38 ff 00 	sub	r8,130816
80009e1e:	70 08       	ld.w	r8,r8[0x0]
80009e20:	e2 18 00 70 	andl	r8,0x70,COH
80009e24:	a5 88       	lsr	r8,0x4
80009e26:	30 89       	mov	r9,8
80009e28:	f2 08 09 48 	lsl	r8,r9,r8
80009e2c:	20 18       	sub	r8,1
80009e2e:	10 99       	mov	r9,r8
80009e30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009e34:	f3 e8 00 08 	and	r8,r9,r8
80009e38:	c3 10       	breq	80009e9a <udd_ep_trans_done+0x122>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
80009e3a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009e3e:	a3 b8       	sbr	r8,0x3
80009e40:	ef 48 ff f0 	st.w	r7[-16],r8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80009e44:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009e48:	72 08       	ld.w	r8,r9[0x0]
80009e4a:	30 0a       	mov	r10,0
80009e4c:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80009e50:	93 08       	st.w	r9[0x0],r8
80009e52:	c2 58       	rjmp	80009e9c <udd_ep_trans_done+0x124>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80009e54:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009e58:	a3 68       	lsl	r8,0x2
80009e5a:	e0 38 ff 00 	sub	r8,130816
80009e5e:	70 08       	ld.w	r8,r8[0x0]
80009e60:	e2 18 18 00 	andl	r8,0x1800,COH
80009e64:	ab 98       	lsr	r8,0xb
80009e66:	58 18       	cp.w	r8,1
80009e68:	c1 21       	brne	80009e8c <udd_ep_trans_done+0x114>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
80009e6a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009e6e:	a3 68       	lsl	r8,0x2
80009e70:	e0 38 ff 00 	sub	r8,130816
80009e74:	70 08       	ld.w	r8,r8[0x0]
80009e76:	e2 18 00 70 	andl	r8,0x70,COH
80009e7a:	a5 88       	lsr	r8,0x4
80009e7c:	30 89       	mov	r9,8
80009e7e:	f2 08 09 48 	lsl	r8,r9,r8
80009e82:	10 99       	mov	r9,r8
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80009e84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009e88:	10 39       	cp.w	r9,r8
80009e8a:	c0 93       	brcs	80009e9c <udd_ep_trans_done+0x124>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
80009e8c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009e90:	e8 18 00 14 	orl	r8,0x14
80009e94:	ef 48 ff f0 	st.w	r7[-16],r8
80009e98:	c0 28       	rjmp	80009e9c <udd_ep_trans_done+0x124>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80009e9a:	d7 03       	nop
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80009e9c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009ea0:	a5 68       	lsl	r8,0x4
80009ea2:	e0 38 fd 00 	sub	r8,130304
80009ea6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009eaa:	72 1a       	ld.w	r10,r9[0x4]
80009eac:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009eb0:	72 39       	ld.w	r9,r9[0xc]
80009eb2:	f4 09 00 09 	add	r9,r10,r9
80009eb6:	91 19       	st.w	r8[0x4],r9
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80009eb8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009ebc:	e8 18 00 21 	orl	r8,0x21
80009ec0:	ef 48 ff f0 	st.w	r7[-16],r8
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
80009ec4:	f0 1f 00 3f 	mcall	80009fc0 <udd_ep_trans_done+0x248>
80009ec8:	18 98       	mov	r8,r12
80009eca:	ef 48 ff fc 	st.w	r7[-4],r8
		if ( !(udd_endpoint_dma_get_status(ep)
80009ece:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009ed2:	a5 68       	lsl	r8,0x4
80009ed4:	e0 38 fd 00 	sub	r8,130304
80009ed8:	70 38       	ld.w	r8,r8[0xc]
80009eda:	e2 18 00 10 	andl	r8,0x10,COH
80009ede:	c2 11       	brne	80009f20 <udd_ep_trans_done+0x1a8>
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
80009ee0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009ee4:	a5 68       	lsl	r8,0x4
80009ee6:	e0 38 fd 00 	sub	r8,130304
80009eea:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009eee:	91 29       	st.w	r8[0x8],r9
			ptr_job->nb_trans += next_trans;
80009ef0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009ef4:	70 39       	ld.w	r9,r8[0xc]
80009ef6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009efa:	10 09       	add	r9,r8
80009efc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009f00:	91 39       	st.w	r8[0xc],r9
			udd_enable_endpoint_dma_interrupt(ep);
80009f02:	fe 68 00 00 	mov	r8,-131072
80009f06:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80009f0a:	20 19       	sub	r9,1
80009f0c:	fc 1a 02 00 	movh	r10,0x200
80009f10:	f4 09 09 49 	lsl	r9,r10,r9
80009f14:	91 69       	st.w	r8[0x18],r9
			cpu_irq_restore(flags);
80009f16:	ee fc ff fc 	ld.w	r12,r7[-4]
80009f1a:	f0 1f 00 2b 	mcall	80009fc4 <udd_ep_trans_done+0x24c>
			return;
80009f1e:	c4 c8       	rjmp	80009fb6 <udd_ep_trans_done+0x23e>
		}
		cpu_irq_restore(flags);
80009f20:	ee fc ff fc 	ld.w	r12,r7[-4]
80009f24:	f0 1f 00 28 	mcall	80009fc4 <udd_ep_trans_done+0x24c>

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80009f28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009f2c:	70 39       	ld.w	r9,r8[0xc]
80009f2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009f32:	91 29       	st.w	r8[0x8],r9
	}
	if (Is_udd_endpoint_in(ep)) {
80009f34:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f38:	a3 68       	lsl	r8,0x2
80009f3a:	e0 38 ff 00 	sub	r8,130816
80009f3e:	70 08       	ld.w	r8,r8[0x0]
80009f40:	e2 18 01 00 	andl	r8,0x100,COH
80009f44:	c2 f0       	breq	80009fa2 <udd_ep_trans_done+0x22a>
		if (ptr_job->b_shortpacket) {
80009f46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009f4a:	70 08       	ld.w	r8,r8[0x0]
80009f4c:	e6 18 40 00 	andh	r8,0x4000,COH
80009f50:	c2 90       	breq	80009fa2 <udd_ep_trans_done+0x22a>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
80009f52:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f56:	a3 68       	lsl	r8,0x2
80009f58:	e0 38 fe a0 	sub	r8,130720
80009f5c:	30 19       	mov	r9,1
80009f5e:	91 09       	st.w	r8[0x0],r9
			if (Is_udd_write_enabled(ep)) {
80009f60:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f64:	a3 68       	lsl	r8,0x2
80009f66:	e0 38 fe d0 	sub	r8,130768
80009f6a:	70 08       	ld.w	r8,r8[0x0]
80009f6c:	e6 18 00 01 	andh	r8,0x1,COH
80009f70:	c0 80       	breq	80009f80 <udd_ep_trans_done+0x208>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
80009f72:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f76:	a3 68       	lsl	r8,0x2
80009f78:	e0 38 fe 70 	sub	r8,130672
80009f7c:	30 19       	mov	r9,1
80009f7e:	91 09       	st.w	r8[0x0],r9
			}
			udd_enable_in_send_interrupt(ep);
80009f80:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f84:	a3 68       	lsl	r8,0x2
80009f86:	e0 38 fe 10 	sub	r8,130576
80009f8a:	30 19       	mov	r9,1
80009f8c:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(ep);
80009f8e:	fe 68 00 00 	mov	r8,-131072
80009f92:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80009f96:	e0 6a 10 00 	mov	r10,4096
80009f9a:	f4 09 09 49 	lsl	r9,r10,r9
80009f9e:	91 69       	st.w	r8[0x18],r9
			return;
80009fa0:	c0 b8       	rjmp	80009fb6 <udd_ep_trans_done+0x23e>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
80009fa2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009fa6:	10 9a       	mov	r10,r8
80009fa8:	30 0b       	mov	r11,0
80009faa:	ee fc ff f4 	ld.w	r12,r7[-12]
80009fae:	f0 1f 00 07 	mcall	80009fc8 <udd_ep_trans_done+0x250>
80009fb2:	c0 28       	rjmp	80009fb6 <udd_ep_trans_done+0x23e>

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
80009fb4:	d7 03       	nop
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
80009fb6:	2f bd       	sub	sp,-20
80009fb8:	e3 cd 80 80 	ldm	sp++,r7,pc
80009fbc:	00 00       	add	r0,r0
80009fbe:	06 68       	and	r8,r3
80009fc0:	80 00       	ld.sh	r0,r0[0x0]
80009fc2:	83 04       	st.w	r1[0x0],r4
80009fc4:	80 00       	ld.sh	r0,r0[0x0]
80009fc6:	83 22       	st.w	r1[0x8],r2
80009fc8:	80 00       	ld.sh	r0,r0[0x0]
80009fca:	9c f4       	ld.uh	r4,lr[0xe]

80009fcc <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
80009fcc:	eb cd 40 80 	pushm	r7,lr
80009fd0:	1a 97       	mov	r7,sp
80009fd2:	20 3d       	sub	sp,12
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80009fd4:	30 18       	mov	r8,1
80009fd6:	ef 68 ff f7 	st.b	r7[-9],r8
80009fda:	cf 18       	rjmp	8000a1bc <udd_ep_interrupt+0x1f0>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
80009fdc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80009fe0:	f0 c9 00 01 	sub	r9,r8,1
80009fe4:	12 98       	mov	r8,r9
80009fe6:	a3 68       	lsl	r8,0x2
80009fe8:	12 08       	add	r8,r9
80009fea:	a3 68       	lsl	r8,0x2
80009fec:	10 99       	mov	r9,r8
80009fee:	4f a8       	lddpc	r8,8000a1d4 <udd_ep_interrupt+0x208>
80009ff0:	f2 08 00 08 	add	r8,r9,r8
80009ff4:	ef 48 ff f8 	st.w	r7[-8],r8

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80009ff8:	fe 68 00 00 	mov	r8,-131072
80009ffc:	70 49       	ld.w	r9,r8[0x10]
80009ffe:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a002:	20 18       	sub	r8,1
8000a004:	fc 1a 02 00 	movh	r10,0x200
8000a008:	f4 08 09 48 	lsl	r8,r10,r8
8000a00c:	f3 e8 00 08 	and	r8,r9,r8
8000a010:	c4 70       	breq	8000a09e <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
8000a012:	fe 68 00 00 	mov	r8,-131072
8000a016:	70 19       	ld.w	r9,r8[0x4]
8000a018:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a01c:	20 18       	sub	r8,1
8000a01e:	fc 1a 02 00 	movh	r10,0x200
8000a022:	f4 08 09 48 	lsl	r8,r10,r8
8000a026:	f3 e8 00 08 	and	r8,r9,r8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000a02a:	c3 a0       	breq	8000a09e <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
8000a02c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a030:	a5 68       	lsl	r8,0x4
8000a032:	e0 38 fd 00 	sub	r8,130304
8000a036:	70 38       	ld.w	r8,r8[0xc]
8000a038:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a03c:	5c 58       	castu.b	r8
8000a03e:	c0 30       	breq	8000a044 <udd_ep_interrupt+0x78>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
8000a040:	30 18       	mov	r8,1
8000a042:	cc 58       	rjmp	8000a1cc <udd_ep_interrupt+0x200>
			}
			udd_disable_endpoint_dma_interrupt(ep);
8000a044:	fe 68 00 00 	mov	r8,-131072
8000a048:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a04c:	20 19       	sub	r9,1
8000a04e:	fc 1a 02 00 	movh	r10,0x200
8000a052:	f4 09 09 49 	lsl	r9,r10,r9
8000a056:	91 59       	st.w	r8[0x14],r9
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
8000a058:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a05c:	a5 68       	lsl	r8,0x4
8000a05e:	e0 38 fd 00 	sub	r8,130304
8000a062:	70 38       	ld.w	r8,r8[0xc]
8000a064:	b1 88       	lsr	r8,0x10
8000a066:	ef 48 ff fc 	st.w	r7[-4],r8
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
8000a06a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a06e:	58 08       	cp.w	r8,0
8000a070:	c1 00       	breq	8000a090 <udd_ep_interrupt+0xc4>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
8000a072:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a076:	70 39       	ld.w	r9,r8[0xc]
8000a078:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a07c:	10 19       	sub	r9,r8
8000a07e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a082:	91 39       	st.w	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
8000a084:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a088:	70 39       	ld.w	r9,r8[0xc]
8000a08a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a08e:	91 29       	st.w	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
8000a090:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a094:	10 9c       	mov	r12,r8
8000a096:	f0 1f 00 51 	mcall	8000a1d8 <udd_ep_interrupt+0x20c>
			return true;
8000a09a:	30 18       	mov	r8,1
8000a09c:	c9 88       	rjmp	8000a1cc <udd_ep_interrupt+0x200>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
8000a09e:	fe 68 00 00 	mov	r8,-131072
8000a0a2:	70 49       	ld.w	r9,r8[0x10]
8000a0a4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0a8:	e0 6a 10 00 	mov	r10,4096
8000a0ac:	f4 08 09 48 	lsl	r8,r10,r8
8000a0b0:	f3 e8 00 08 	and	r8,r9,r8
8000a0b4:	c7 f0       	breq	8000a1b2 <udd_ep_interrupt+0x1e6>
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
8000a0b6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0ba:	a3 68       	lsl	r8,0x2
8000a0bc:	e0 38 fe 40 	sub	r8,130624
8000a0c0:	70 08       	ld.w	r8,r8[0x0]
8000a0c2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a0c6:	5c 58       	castu.b	r8
8000a0c8:	c2 b0       	breq	8000a11e <udd_ep_interrupt+0x152>
8000a0ca:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0ce:	a3 68       	lsl	r8,0x2
8000a0d0:	e0 38 fe d0 	sub	r8,130768
8000a0d4:	70 08       	ld.w	r8,r8[0x0]
8000a0d6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a0da:	5c 58       	castu.b	r8
8000a0dc:	c2 10       	breq	8000a11e <udd_ep_interrupt+0x152>
				udd_disable_in_send_interrupt(ep);
8000a0de:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0e2:	a3 68       	lsl	r8,0x2
8000a0e4:	e0 38 fd e0 	sub	r8,130528
8000a0e8:	30 19       	mov	r9,1
8000a0ea:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000a0ec:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0f0:	a3 68       	lsl	r8,0x2
8000a0f2:	e0 38 fe a0 	sub	r8,130720
8000a0f6:	30 19       	mov	r9,1
8000a0f8:	91 09       	st.w	r8[0x0],r9
				udd_ack_fifocon(ep);
8000a0fa:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0fe:	a3 68       	lsl	r8,0x2
8000a100:	e0 38 fd e0 	sub	r8,130528
8000a104:	e0 69 40 00 	mov	r9,16384
8000a108:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false, ep);
8000a10a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a10e:	10 9a       	mov	r10,r8
8000a110:	30 0b       	mov	r11,0
8000a112:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a116:	f0 1f 00 32 	mcall	8000a1dc <udd_ep_interrupt+0x210>
				return true;
8000a11a:	30 18       	mov	r8,1
8000a11c:	c5 88       	rjmp	8000a1cc <udd_ep_interrupt+0x200>
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
8000a11e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a122:	a3 68       	lsl	r8,0x2
8000a124:	e0 38 fe 40 	sub	r8,130624
8000a128:	70 08       	ld.w	r8,r8[0x0]
8000a12a:	e2 18 10 00 	andl	r8,0x1000,COH
8000a12e:	c4 20       	breq	8000a1b2 <udd_ep_interrupt+0x1e6>
8000a130:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a134:	a3 68       	lsl	r8,0x2
8000a136:	e0 38 fe d0 	sub	r8,130768
8000a13a:	70 08       	ld.w	r8,r8[0x0]
8000a13c:	e2 18 30 00 	andl	r8,0x3000,COH
8000a140:	ad 88       	lsr	r8,0xc
8000a142:	c3 81       	brne	8000a1b2 <udd_ep_interrupt+0x1e6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
8000a144:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a148:	a3 68       	lsl	r8,0x2
8000a14a:	e0 38 fd e0 	sub	r8,130528
8000a14e:	e0 69 10 00 	mov	r9,4096
8000a152:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
8000a154:	fe 68 00 00 	mov	r8,-131072
8000a158:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a15c:	e0 6a 10 00 	mov	r10,4096
8000a160:	f4 09 09 49 	lsl	r9,r10,r9
8000a164:	91 59       	st.w	r8[0x14],r9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
8000a166:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a16a:	72 08       	ld.w	r8,r9[0x0]
8000a16c:	30 0a       	mov	r10,0
8000a16e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a172:	93 08       	st.w	r9[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
8000a174:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a178:	a3 68       	lsl	r8,0x2
8000a17a:	e0 38 ff 00 	sub	r8,130816
8000a17e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a182:	a3 69       	lsl	r9,0x2
8000a184:	e0 39 ff 00 	sub	r9,130816
8000a188:	72 09       	ld.w	r9,r9[0x0]
8000a18a:	a9 d9       	cbr	r9,0x9
8000a18c:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
8000a18e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a192:	a3 68       	lsl	r8,0x2
8000a194:	e0 38 fe 10 	sub	r8,130576
8000a198:	e8 69 00 00 	mov	r9,524288
8000a19c:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
8000a19e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a1a2:	a3 68       	lsl	r8,0x2
8000a1a4:	e0 38 fe 10 	sub	r8,130576
8000a1a8:	e4 69 00 00 	mov	r9,262144
8000a1ac:	91 09       	st.w	r8[0x0],r9
				return true;
8000a1ae:	30 18       	mov	r8,1
8000a1b0:	c0 e8       	rjmp	8000a1cc <udd_ep_interrupt+0x200>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000a1b2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a1b6:	2f f8       	sub	r8,-1
8000a1b8:	ef 68 ff f7 	st.b	r7[-9],r8
8000a1bc:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a1c0:	30 28       	mov	r8,2
8000a1c2:	f0 09 18 00 	cp.b	r9,r8
8000a1c6:	fe 98 ff 0b 	brls	80009fdc <udd_ep_interrupt+0x10>
				udd_reset_data_toggle(ep);
				return true;
			}
		}
	}
	return false;
8000a1ca:	30 08       	mov	r8,0
}
8000a1cc:	10 9c       	mov	r12,r8
8000a1ce:	2f dd       	sub	sp,-12
8000a1d0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a1d4:	00 00       	add	r0,r0
8000a1d6:	06 68       	and	r8,r3
8000a1d8:	80 00       	ld.sh	r0,r0[0x0]
8000a1da:	9d 78       	st.w	lr[0x1c],r8
8000a1dc:	80 00       	ld.sh	r0,r0[0x0]
8000a1de:	9c f4       	ld.uh	r4,lr[0xe]

8000a1e0 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000a1e0:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000a1e4:	fe c0 cd e4 	sub	r0,pc,-12828

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
8000a1e8:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000a1ec:	d5 53       	csrf	0x15
  cp      r0, r1
8000a1ee:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
8000a1f0:	e0 61 01 20 	mov	r1,288
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
8000a1f4:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000a1f6:	c0 72       	brcc	8000a204 <idata_load_loop_end>
  cp      r0, r1
8000a1f8:	fe c2 c4 30 	sub	r2,pc,-15312

8000a1fc <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000a1fc:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
8000a1fe:	a1 24       	st.d	r0++,r4
  cp      r0, r1
8000a200:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000a202:	cf d3       	brcs	8000a1fc <idata_load_loop>

8000a204 <idata_load_loop_end>:
  mov     r2, 0
8000a204:	e0 60 01 20 	mov	r0,288
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000a208:	e0 61 0b e8 	mov	r1,3048
  cp      r0, r1
  brlo    udata_clear_loop
8000a20c:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000a20e:	c0 62       	brcc	8000a21a <udata_clear_loop_end>
8000a210:	30 02       	mov	r2,0
8000a212:	30 03       	mov	r3,0

8000a214 <udata_clear_loop>:
8000a214:	a1 22       	st.d	r0++,r2
8000a216:	02 30       	cp.w	r0,r1
8000a218:	cf e3       	brcs	8000a214 <udata_clear_loop>

8000a21a <udata_clear_loop_end>:
8000a21a:	fe cf d6 fe 	sub	pc,pc,-10498
8000a21e:	d7 03       	nop

8000a220 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8000a220:	eb cd 40 80 	pushm	r7,lr
8000a224:	1a 97       	mov	r7,sp
8000a226:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000a228:	e1 b8 00 00 	mfsr	r8,0x0
8000a22c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8000a230:	d3 03       	ssrf	0x10

	return flags;
8000a232:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000a236:	10 9c       	mov	r12,r8
8000a238:	2f fd       	sub	sp,-4
8000a23a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a23e <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8000a23e:	eb cd 40 80 	pushm	r7,lr
8000a242:	1a 97       	mov	r7,sp
8000a244:	20 1d       	sub	sp,4
8000a246:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000a24a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a24e:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8000a252:	2f fd       	sub	sp,-4
8000a254:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a258 <osc_enable>:
#include <stdbool.h>
#include <stdint.h>
#include <avr32/io.h>

static inline void osc_enable(uint8_t id)
{
8000a258:	eb cd 40 80 	pushm	r7,lr
8000a25c:	1a 97       	mov	r7,sp
8000a25e:	20 3d       	sub	sp,12
8000a260:	18 98       	mov	r8,r12
8000a262:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();
8000a266:	f0 1f 00 2b 	mcall	8000a310 <osc_enable+0xb8>
8000a26a:	18 98       	mov	r8,r12
8000a26c:	ef 48 ff f8 	st.w	r7[-8],r8

	switch (id) {
8000a270:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a274:	58 18       	cp.w	r8,1
8000a276:	c1 c0       	breq	8000a2ae <osc_enable+0x56>
8000a278:	58 28       	cp.w	r8,2
8000a27a:	c3 10       	breq	8000a2dc <osc_enable+0x84>
8000a27c:	58 08       	cp.w	r8,0
8000a27e:	c4 21       	brne	8000a302 <osc_enable+0xaa>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
8000a280:	e0 68 03 00 	mov	r8,768
8000a284:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
8000a288:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a28c:	e8 18 00 07 	orl	r8,0x7
8000a290:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl0 = oscctrl;
8000a294:	fe 78 0c 00 	mov	r8,-62464
8000a298:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a29c:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
8000a29e:	fe 78 0c 00 	mov	r8,-62464
8000a2a2:	fe 79 0c 00 	mov	r9,-62464
8000a2a6:	72 09       	ld.w	r9,r9[0x0]
8000a2a8:	a3 a9       	sbr	r9,0x2
8000a2aa:	91 09       	st.w	r8[0x0],r9
		break;
8000a2ac:	c2 b8       	rjmp	8000a302 <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		oscctrl = OSC1_STARTUP_VALUE <<
8000a2ae:	e0 68 03 00 	mov	r8,768
8000a2b2:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL1_STARTUP_OFFSET;
		oscctrl |= OSC1_MODE_VALUE << AVR32_PM_OSCCTRL1_MODE_OFFSET;
8000a2b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a2ba:	e8 18 00 07 	orl	r8,0x7
8000a2be:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl1 = oscctrl;
8000a2c2:	fe 78 0c 00 	mov	r8,-62464
8000a2c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a2ca:	91 b9       	st.w	r8[0x2c],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC1EN;
8000a2cc:	fe 78 0c 00 	mov	r8,-62464
8000a2d0:	fe 79 0c 00 	mov	r9,-62464
8000a2d4:	72 09       	ld.w	r9,r9[0x0]
8000a2d6:	a3 b9       	sbr	r9,0x3
8000a2d8:	91 09       	st.w	r8[0x0],r9
		break;
8000a2da:	c1 48       	rjmp	8000a302 <osc_enable+0xaa>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
8000a2dc:	e2 68 00 00 	mov	r8,131072
8000a2e0:	ef 48 ff fc 	st.w	r7[-4],r8
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
8000a2e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a2e8:	a9 a8       	sbr	r8,0x8
8000a2ea:	ef 48 ff fc 	st.w	r7[-4],r8
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
8000a2ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a2f2:	a1 a8       	sbr	r8,0x0
8000a2f4:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl32 = oscctrl;
8000a2f8:	fe 78 0c 00 	mov	r8,-62464
8000a2fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a300:	91 c9       	st.w	r8[0x30],r9
	default:
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
8000a302:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a306:	f0 1f 00 04 	mcall	8000a314 <osc_enable+0xbc>
}
8000a30a:	2f dd       	sub	sp,-12
8000a30c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a310:	80 00       	ld.sh	r0,r0[0x0]
8000a312:	a2 20       	st.h	r1[0x4],r0
8000a314:	80 00       	ld.sh	r0,r0[0x0]
8000a316:	a2 3e       	st.h	r1[0x6],lr

8000a318 <osc_is_ready>:
	}
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
8000a318:	eb cd 40 80 	pushm	r7,lr
8000a31c:	1a 97       	mov	r7,sp
8000a31e:	20 1d       	sub	sp,4
8000a320:	18 98       	mov	r8,r12
8000a322:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000a326:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a32a:	58 18       	cp.w	r8,1
8000a32c:	c0 d0       	breq	8000a346 <osc_is_ready+0x2e>
8000a32e:	58 28       	cp.w	r8,2
8000a330:	c1 30       	breq	8000a356 <osc_is_ready+0x3e>
8000a332:	58 08       	cp.w	r8,0
8000a334:	c1 91       	brne	8000a366 <osc_is_ready+0x4e>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
8000a336:	fe 78 0c 00 	mov	r8,-62464
8000a33a:	71 58       	ld.w	r8,r8[0x54]
8000a33c:	e2 18 00 80 	andl	r8,0x80,COH
8000a340:	5f 18       	srne	r8
8000a342:	5c 58       	castu.b	r8
8000a344:	c1 28       	rjmp	8000a368 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC1RDY));
8000a346:	fe 78 0c 00 	mov	r8,-62464
8000a34a:	71 58       	ld.w	r8,r8[0x54]
8000a34c:	e2 18 01 00 	andl	r8,0x100,COH
8000a350:	5f 18       	srne	r8
8000a352:	5c 58       	castu.b	r8
8000a354:	c0 a8       	rjmp	8000a368 <osc_is_ready+0x50>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC32RDY));
8000a356:	fe 78 0c 00 	mov	r8,-62464
8000a35a:	71 58       	ld.w	r8,r8[0x54]
8000a35c:	e2 18 02 00 	andl	r8,0x200,COH
8000a360:	5f 18       	srne	r8
8000a362:	5c 58       	castu.b	r8
8000a364:	c0 28       	rjmp	8000a368 <osc_is_ready+0x50>
#endif

	default:
		/* unhandled_case(id); */
		return false;
8000a366:	30 08       	mov	r8,0
	}
}
8000a368:	10 9c       	mov	r12,r8
8000a36a:	2f fd       	sub	sp,-4
8000a36c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a370 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
8000a370:	eb cd 40 80 	pushm	r7,lr
8000a374:	1a 97       	mov	r7,sp
8000a376:	20 1d       	sub	sp,4
8000a378:	18 98       	mov	r8,r12
8000a37a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000a37e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a382:	58 18       	cp.w	r8,1
8000a384:	c0 a0       	breq	8000a398 <osc_get_rate+0x28>
8000a386:	58 28       	cp.w	r8,2
8000a388:	c0 d0       	breq	8000a3a2 <osc_get_rate+0x32>
8000a38a:	58 08       	cp.w	r8,0
8000a38c:	c0 e1       	brne	8000a3a8 <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000a38e:	e0 68 1b 00 	mov	r8,6912
8000a392:	ea 18 00 b7 	orh	r8,0xb7
8000a396:	c0 a8       	rjmp	8000a3aa <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000a398:	e0 68 44 00 	mov	r8,17408
8000a39c:	ea 18 00 ac 	orh	r8,0xac
8000a3a0:	c0 58       	rjmp	8000a3aa <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000a3a2:	e0 68 80 00 	mov	r8,32768
8000a3a6:	c0 28       	rjmp	8000a3aa <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000a3a8:	30 08       	mov	r8,0
	}
}
8000a3aa:	10 9c       	mov	r12,r8
8000a3ac:	2f fd       	sub	sp,-4
8000a3ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a3b2:	d7 03       	nop

8000a3b4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8000a3b4:	eb cd 40 80 	pushm	r7,lr
8000a3b8:	1a 97       	mov	r7,sp
8000a3ba:	20 1d       	sub	sp,4
8000a3bc:	18 98       	mov	r8,r12
8000a3be:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8000a3c2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a3c6:	10 9c       	mov	r12,r8
8000a3c8:	f0 1f 00 05 	mcall	8000a3dc <osc_wait_ready+0x28>
8000a3cc:	18 98       	mov	r8,r12
8000a3ce:	ec 18 00 01 	eorl	r8,0x1
8000a3d2:	5c 58       	castu.b	r8
8000a3d4:	cf 71       	brne	8000a3c2 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
8000a3d6:	2f fd       	sub	sp,-4
8000a3d8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a3dc:	80 00       	ld.sh	r0,r0[0x0]
8000a3de:	a3 18       	ld.d	r8,--r1

8000a3e0 <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8000a3e0:	eb cd 40 80 	pushm	r7,lr
8000a3e4:	1a 97       	mov	r7,sp
8000a3e6:	20 2d       	sub	sp,8
8000a3e8:	ef 4c ff fc 	st.w	r7[-4],r12
8000a3ec:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
8000a3f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3f4:	70 09       	ld.w	r9,r8[0x0]
8000a3f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a3fa:	2f e8       	sub	r8,-2
8000a3fc:	30 1a       	mov	r10,1
8000a3fe:	f4 08 09 48 	lsl	r8,r10,r8
8000a402:	10 49       	or	r9,r8
8000a404:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a408:	91 09       	st.w	r8[0x0],r9
}
8000a40a:	2f ed       	sub	sp,-8
8000a40c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a410 <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8000a410:	eb cd 40 80 	pushm	r7,lr
8000a414:	1a 97       	mov	r7,sp
8000a416:	20 5d       	sub	sp,20
8000a418:	ef 4c ff f8 	st.w	r7[-8],r12
8000a41c:	ef 4b ff f4 	st.w	r7[-12],r11
8000a420:	ef 4a ff f0 	st.w	r7[-16],r10
8000a424:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8000a428:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a42c:	5c 58       	castu.b	r8
8000a42e:	10 9c       	mov	r12,r8
8000a430:	f0 1f 00 2e 	mcall	8000a4e8 <pll_config_init+0xd8>
8000a434:	18 99       	mov	r9,r12
8000a436:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a43a:	f2 08 02 48 	mul	r8,r9,r8
8000a43e:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8000a442:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a446:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a44a:	f0 09 0d 08 	divu	r8,r8,r9
8000a44e:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8000a452:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a456:	30 09       	mov	r9,0
8000a458:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8000a45a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a45e:	e0 69 b3 ff 	mov	r9,46079
8000a462:	ea 19 04 c4 	orh	r9,0x4c4
8000a466:	12 38       	cp.w	r8,r9
8000a468:	e0 8b 00 16 	brhi	8000a494 <pll_config_init+0x84>
8000a46c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a470:	58 88       	cp.w	r8,8
8000a472:	e0 8b 00 11 	brhi	8000a494 <pll_config_init+0x84>
		mul *= 2;
8000a476:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a47a:	a1 78       	lsl	r8,0x1
8000a47c:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8000a480:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a484:	a1 78       	lsl	r8,0x1
8000a486:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8000a48a:	30 1b       	mov	r11,1
8000a48c:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a490:	f0 1f 00 17 	mcall	8000a4ec <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8000a494:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a498:	e0 69 fe 7f 	mov	r9,65151
8000a49c:	ea 19 0a 21 	orh	r9,0xa21
8000a4a0:	12 38       	cp.w	r8,r9
8000a4a2:	e0 8b 00 07 	brhi	8000a4b0 <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8000a4a6:	30 0b       	mov	r11,0
8000a4a8:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a4ac:	f0 1f 00 10 	mcall	8000a4ec <pll_config_init+0xdc>

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000a4b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4b4:	70 09       	ld.w	r9,r8[0x0]
8000a4b6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a4ba:	20 18       	sub	r8,1
8000a4bc:	f0 0a 15 10 	lsl	r10,r8,0x10
			| (div << AVR32_PM_PLL0_PLLDIV)
8000a4c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a4c4:	a9 68       	lsl	r8,0x8
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
8000a4c6:	10 4a       	or	r10,r8
			| (src << AVR32_PM_PLL0_PLLOSC);
8000a4c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a4cc:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000a4ce:	f5 e8 10 08 	or	r8,r10,r8
8000a4d2:	f3 e8 10 08 	or	r8,r9,r8
8000a4d6:	10 99       	mov	r9,r8
8000a4d8:	ea 19 3f 00 	orh	r9,0x3f00
8000a4dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4e0:	91 09       	st.w	r8[0x0],r9
			| (div << AVR32_PM_PLL0_PLLDIV)
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
			| (src << AVR32_PM_PLL0_PLLOSC);
}
8000a4e2:	2f bd       	sub	sp,-20
8000a4e4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a4e8:	80 00       	ld.sh	r0,r0[0x0]
8000a4ea:	a3 70       	lsl	r0,0x3
8000a4ec:	80 00       	ld.sh	r0,r0[0x0]
8000a4ee:	a3 e0       	*unknown*

8000a4f0 <pll_enable>:
	AVR32_PM.pll[pll_id] = cfg->ctrl;
}

static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
8000a4f0:	eb cd 40 80 	pushm	r7,lr
8000a4f4:	1a 97       	mov	r7,sp
8000a4f6:	20 2d       	sub	sp,8
8000a4f8:	ef 4c ff fc 	st.w	r7[-4],r12
8000a4fc:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
8000a500:	fe 78 0c 00 	mov	r8,-62464
8000a504:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a508:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a50c:	74 0a       	ld.w	r10,r10[0x0]
8000a50e:	a1 aa       	sbr	r10,0x0
8000a510:	2f 89       	sub	r9,-8
8000a512:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000a516:	2f ed       	sub	sp,-8
8000a518:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a51c <pll_is_locked>:

	AVR32_PM.pll[pll_id] = 0;
}

static inline bool pll_is_locked(unsigned int pll_id)
{
8000a51c:	eb cd 40 80 	pushm	r7,lr
8000a520:	1a 97       	mov	r7,sp
8000a522:	20 1d       	sub	sp,4
8000a524:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
8000a528:	fe 78 0c 00 	mov	r8,-62464
8000a52c:	71 59       	ld.w	r9,r8[0x54]
8000a52e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a532:	30 1a       	mov	r10,1
8000a534:	f4 08 09 48 	lsl	r8,r10,r8
8000a538:	f3 e8 00 08 	and	r8,r9,r8
8000a53c:	5f 18       	srne	r8
8000a53e:	5c 58       	castu.b	r8
}
8000a540:	10 9c       	mov	r12,r8
8000a542:	2f fd       	sub	sp,-4
8000a544:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a548 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
8000a548:	eb cd 40 80 	pushm	r7,lr
8000a54c:	1a 97       	mov	r7,sp
8000a54e:	20 1d       	sub	sp,4
8000a550:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000a554:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a558:	58 08       	cp.w	r8,0
8000a55a:	c0 40       	breq	8000a562 <pll_enable_source+0x1a>
8000a55c:	58 18       	cp.w	r8,1
8000a55e:	c1 10       	breq	8000a580 <pll_enable_source+0x38>
8000a560:	c2 08       	rjmp	8000a5a0 <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000a562:	30 0c       	mov	r12,0
8000a564:	f0 1f 00 11 	mcall	8000a5a8 <pll_enable_source+0x60>
8000a568:	18 98       	mov	r8,r12
8000a56a:	ec 18 00 01 	eorl	r8,0x1
8000a56e:	5c 58       	castu.b	r8
8000a570:	c1 70       	breq	8000a59e <pll_enable_source+0x56>
			osc_enable(OSC_ID_OSC0);
8000a572:	30 0c       	mov	r12,0
8000a574:	f0 1f 00 0e 	mcall	8000a5ac <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC0);
8000a578:	30 0c       	mov	r12,0
8000a57a:	f0 1f 00 0e 	mcall	8000a5b0 <pll_enable_source+0x68>
		}
		break;
8000a57e:	c1 18       	rjmp	8000a5a0 <pll_enable_source+0x58>

	case PLL_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000a580:	30 1c       	mov	r12,1
8000a582:	f0 1f 00 0a 	mcall	8000a5a8 <pll_enable_source+0x60>
8000a586:	18 98       	mov	r8,r12
8000a588:	ec 18 00 01 	eorl	r8,0x1
8000a58c:	5c 58       	castu.b	r8
8000a58e:	c0 90       	breq	8000a5a0 <pll_enable_source+0x58>
			osc_enable(OSC_ID_OSC1);
8000a590:	30 1c       	mov	r12,1
8000a592:	f0 1f 00 07 	mcall	8000a5ac <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC1);
8000a596:	30 1c       	mov	r12,1
8000a598:	f0 1f 00 06 	mcall	8000a5b0 <pll_enable_source+0x68>
8000a59c:	c0 28       	rjmp	8000a5a0 <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000a59e:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000a5a0:	2f fd       	sub	sp,-4
8000a5a2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a5a6:	00 00       	add	r0,r0
8000a5a8:	80 00       	ld.sh	r0,r0[0x0]
8000a5aa:	a3 18       	ld.d	r8,--r1
8000a5ac:	80 00       	ld.sh	r0,r0[0x0]
8000a5ae:	a2 58       	st.h	r1[0xa],r8
8000a5b0:	80 00       	ld.sh	r0,r0[0x0]
8000a5b2:	a3 b4       	sbr	r4,0x3

8000a5b4 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
8000a5b4:	eb cd 40 80 	pushm	r7,lr
8000a5b8:	1a 97       	mov	r7,sp
8000a5ba:	20 2d       	sub	sp,8
8000a5bc:	ef 4c ff f8 	st.w	r7[-8],r12
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
8000a5c0:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a5c4:	f0 1f 00 15 	mcall	8000a618 <pll_enable_config_defaults+0x64>
8000a5c8:	18 98       	mov	r8,r12
8000a5ca:	58 08       	cp.w	r8,0
8000a5cc:	c2 11       	brne	8000a60e <pll_enable_config_defaults+0x5a>
		return; // Pll already running
	}
	switch (pll_id) {
8000a5ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a5d2:	58 08       	cp.w	r8,0
8000a5d4:	c0 c1       	brne	8000a5ec <pll_enable_config_defaults+0x38>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
8000a5d6:	30 0c       	mov	r12,0
8000a5d8:	f0 1f 00 11 	mcall	8000a61c <pll_enable_config_defaults+0x68>
		pll_config_init(&pllcfg,
8000a5dc:	ee c8 00 04 	sub	r8,r7,4
8000a5e0:	30 b9       	mov	r9,11
8000a5e2:	30 2a       	mov	r10,2
8000a5e4:	30 0b       	mov	r11,0
8000a5e6:	10 9c       	mov	r12,r8
8000a5e8:	f0 1f 00 0e 	mcall	8000a620 <pll_enable_config_defaults+0x6c>
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
8000a5ec:	ee c8 00 04 	sub	r8,r7,4
8000a5f0:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a5f4:	10 9c       	mov	r12,r8
8000a5f6:	f0 1f 00 0c 	mcall	8000a624 <pll_enable_config_defaults+0x70>
	while (!pll_is_locked(pll_id));
8000a5fa:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a5fe:	f0 1f 00 07 	mcall	8000a618 <pll_enable_config_defaults+0x64>
8000a602:	18 98       	mov	r8,r12
8000a604:	ec 18 00 01 	eorl	r8,0x1
8000a608:	5c 58       	castu.b	r8
8000a60a:	cf 81       	brne	8000a5fa <pll_enable_config_defaults+0x46>
8000a60c:	c0 28       	rjmp	8000a610 <pll_enable_config_defaults+0x5c>
static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
		return; // Pll already running
8000a60e:	d7 03       	nop
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
}
8000a610:	2f ed       	sub	sp,-8
8000a612:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a616:	00 00       	add	r0,r0
8000a618:	80 00       	ld.sh	r0,r0[0x0]
8000a61a:	a5 1c       	ld.d	r12,--r2
8000a61c:	80 00       	ld.sh	r0,r0[0x0]
8000a61e:	a5 48       	asr	r8,0x4
8000a620:	80 00       	ld.sh	r0,r0[0x0]
8000a622:	a4 10       	st.h	r2[0x2],r0
8000a624:	80 00       	ld.sh	r0,r0[0x0]
8000a626:	a4 f0       	st.b	r2[0x7],r0

8000a628 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8000a628:	eb cd 40 80 	pushm	r7,lr
8000a62c:	1a 97       	mov	r7,sp
8000a62e:	20 2d       	sub	sp,8
8000a630:	ef 4c ff fc 	st.w	r7[-4],r12
8000a634:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8000a638:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a63c:	30 09       	mov	r9,0
8000a63e:	91 09       	st.w	r8[0x0],r9
}
8000a640:	2f ed       	sub	sp,-8
8000a642:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a646 <genclk_config_set_source>:
	AVR32_PM.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8000a646:	eb cd 40 80 	pushm	r7,lr
8000a64a:	1a 97       	mov	r7,sp
8000a64c:	20 3d       	sub	sp,12
8000a64e:	ef 4c ff f8 	st.w	r7[-8],r12
8000a652:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t mask;

	mask = AVR32_PM_GCCTRL_OSCSEL_MASK | AVR32_PM_GCCTRL_PLLSEL_MASK;
8000a656:	30 38       	mov	r8,3
8000a658:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(!(src & ~mask));

	cfg->ctrl = (cfg->ctrl & ~mask) | (src << AVR32_PM_GCCTRL_OSCSEL);
8000a65c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a660:	70 09       	ld.w	r9,r8[0x0]
8000a662:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a666:	5c d8       	com	r8
8000a668:	10 69       	and	r9,r8
8000a66a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a66e:	10 49       	or	r9,r8
8000a670:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a674:	91 09       	st.w	r8[0x0],r9
}
8000a676:	2f dd       	sub	sp,-12
8000a678:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a67c <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8000a67c:	eb cd 40 80 	pushm	r7,lr
8000a680:	1a 97       	mov	r7,sp
8000a682:	20 2d       	sub	sp,8
8000a684:	ef 4c ff fc 	st.w	r7[-4],r12
8000a688:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert((divider > 0) && (divider <= GENCLK_DIV_MAX));

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_PM_GCCTRL_DIVEN_MASK | AVR32_PM_GCCTRL_DIV_MASK);
8000a68c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a690:	70 08       	ld.w	r8,r8[0x0]
8000a692:	10 99       	mov	r9,r8
8000a694:	e0 19 00 ef 	andl	r9,0xef
8000a698:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a69c:	91 09       	st.w	r8[0x0],r9

	if (divider > 1) {
8000a69e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a6a2:	58 18       	cp.w	r8,1
8000a6a4:	e0 88 00 17 	brls	8000a6d2 <genclk_config_set_divider+0x56>
		cfg->ctrl |= 1U << AVR32_PM_GCCTRL_DIVEN;
8000a6a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6ac:	70 08       	ld.w	r8,r8[0x0]
8000a6ae:	10 99       	mov	r9,r8
8000a6b0:	a5 a9       	sbr	r9,0x4
8000a6b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6b6:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_PM_GCCTRL_DIV;
8000a6b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6bc:	70 09       	ld.w	r9,r8[0x0]
8000a6be:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a6c2:	2f f8       	sub	r8,-1
8000a6c4:	a1 98       	lsr	r8,0x1
8000a6c6:	20 18       	sub	r8,1
8000a6c8:	a9 68       	lsl	r8,0x8
8000a6ca:	10 49       	or	r9,r8
8000a6cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6d0:	91 09       	st.w	r8[0x0],r9
	}
}
8000a6d2:	2f ed       	sub	sp,-8
8000a6d4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a6d8 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8000a6d8:	eb cd 40 80 	pushm	r7,lr
8000a6dc:	1a 97       	mov	r7,sp
8000a6de:	20 2d       	sub	sp,8
8000a6e0:	ef 4c ff fc 	st.w	r7[-4],r12
8000a6e4:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
8000a6e8:	fe 78 0c 00 	mov	r8,-62464
8000a6ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a6f0:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a6f4:	74 0a       	ld.w	r10,r10[0x0]
8000a6f6:	a3 aa       	sbr	r10,0x2
8000a6f8:	2e 89       	sub	r9,-24
8000a6fa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000a6fe:	2f ed       	sub	sp,-8
8000a700:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a704 <genclk_enable_source>:
{
	AVR32_PM.gcctrl[id] = 0;
}

static inline void genclk_enable_source(enum genclk_source src)
{
8000a704:	eb cd 40 80 	pushm	r7,lr
8000a708:	1a 97       	mov	r7,sp
8000a70a:	20 1d       	sub	sp,4
8000a70c:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000a710:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a714:	58 18       	cp.w	r8,1
8000a716:	c1 40       	breq	8000a73e <genclk_enable_source+0x3a>
8000a718:	c0 43       	brcs	8000a720 <genclk_enable_source+0x1c>
8000a71a:	58 28       	cp.w	r8,2
8000a71c:	c2 00       	breq	8000a75c <genclk_enable_source+0x58>
8000a71e:	c2 68       	rjmp	8000a76a <genclk_enable_source+0x66>
#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000a720:	30 0c       	mov	r12,0
8000a722:	f0 1f 00 14 	mcall	8000a770 <genclk_enable_source+0x6c>
8000a726:	18 98       	mov	r8,r12
8000a728:	ec 18 00 01 	eorl	r8,0x1
8000a72c:	5c 58       	castu.b	r8
8000a72e:	c1 b0       	breq	8000a764 <genclk_enable_source+0x60>
			osc_enable(OSC_ID_OSC0);
8000a730:	30 0c       	mov	r12,0
8000a732:	f0 1f 00 11 	mcall	8000a774 <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC0);
8000a736:	30 0c       	mov	r12,0
8000a738:	f0 1f 00 10 	mcall	8000a778 <genclk_enable_source+0x74>
		}
		break;
8000a73c:	c1 78       	rjmp	8000a76a <genclk_enable_source+0x66>
#endif

#ifdef BOARD_OSC1_HZ
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000a73e:	30 1c       	mov	r12,1
8000a740:	f0 1f 00 0c 	mcall	8000a770 <genclk_enable_source+0x6c>
8000a744:	18 98       	mov	r8,r12
8000a746:	ec 18 00 01 	eorl	r8,0x1
8000a74a:	5c 58       	castu.b	r8
8000a74c:	c0 e0       	breq	8000a768 <genclk_enable_source+0x64>
			osc_enable(OSC_ID_OSC1);
8000a74e:	30 1c       	mov	r12,1
8000a750:	f0 1f 00 09 	mcall	8000a774 <genclk_enable_source+0x70>
			osc_wait_ready(OSC_ID_OSC1);
8000a754:	30 1c       	mov	r12,1
8000a756:	f0 1f 00 09 	mcall	8000a778 <genclk_enable_source+0x74>
		}
		break;
8000a75a:	c0 88       	rjmp	8000a76a <genclk_enable_source+0x66>
#endif

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000a75c:	30 0c       	mov	r12,0
8000a75e:	f0 1f 00 08 	mcall	8000a77c <genclk_enable_source+0x78>
8000a762:	c0 48       	rjmp	8000a76a <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000a764:	d7 03       	nop
8000a766:	c0 28       	rjmp	8000a76a <genclk_enable_source+0x66>
	case GENCLK_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
			osc_enable(OSC_ID_OSC1);
			osc_wait_ready(OSC_ID_OSC1);
		}
		break;
8000a768:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000a76a:	2f fd       	sub	sp,-4
8000a76c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a770:	80 00       	ld.sh	r0,r0[0x0]
8000a772:	a3 18       	ld.d	r8,--r1
8000a774:	80 00       	ld.sh	r0,r0[0x0]
8000a776:	a2 58       	st.h	r1[0xa],r8
8000a778:	80 00       	ld.sh	r0,r0[0x0]
8000a77a:	a3 b4       	sbr	r4,0x3
8000a77c:	80 00       	ld.sh	r0,r0[0x0]
8000a77e:	a5 b4       	sbr	r4,0x5

8000a780 <genclk_enable_config>:
 * \param id      The ID of the generic clock.
 * \param src     The source clock of the generic clock.
 * \param divider The divider used to generate the generic clock.
 */
static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
8000a780:	eb cd 40 80 	pushm	r7,lr
8000a784:	1a 97       	mov	r7,sp
8000a786:	20 4d       	sub	sp,16
8000a788:	ef 4c ff f8 	st.w	r7[-8],r12
8000a78c:	ef 4b ff f4 	st.w	r7[-12],r11
8000a790:	ef 4a ff f0 	st.w	r7[-16],r10
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, id);
8000a794:	ee c8 00 04 	sub	r8,r7,4
8000a798:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a79c:	10 9c       	mov	r12,r8
8000a79e:	f0 1f 00 10 	mcall	8000a7dc <genclk_enable_config+0x5c>
	genclk_enable_source(src);
8000a7a2:	ee fc ff f4 	ld.w	r12,r7[-12]
8000a7a6:	f0 1f 00 0f 	mcall	8000a7e0 <genclk_enable_config+0x60>
	genclk_config_set_source(&gcfg, src);
8000a7aa:	ee c8 00 04 	sub	r8,r7,4
8000a7ae:	ee fb ff f4 	ld.w	r11,r7[-12]
8000a7b2:	10 9c       	mov	r12,r8
8000a7b4:	f0 1f 00 0c 	mcall	8000a7e4 <genclk_enable_config+0x64>
	genclk_config_set_divider(&gcfg, divider);
8000a7b8:	ee c8 00 04 	sub	r8,r7,4
8000a7bc:	ee fb ff f0 	ld.w	r11,r7[-16]
8000a7c0:	10 9c       	mov	r12,r8
8000a7c2:	f0 1f 00 0a 	mcall	8000a7e8 <genclk_enable_config+0x68>
	genclk_enable(&gcfg, id);
8000a7c6:	ee c8 00 04 	sub	r8,r7,4
8000a7ca:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a7ce:	10 9c       	mov	r12,r8
8000a7d0:	f0 1f 00 07 	mcall	8000a7ec <genclk_enable_config+0x6c>
}
8000a7d4:	2f cd       	sub	sp,-16
8000a7d6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a7da:	00 00       	add	r0,r0
8000a7dc:	80 00       	ld.sh	r0,r0[0x0]
8000a7de:	a6 28       	st.h	r3[0x4],r8
8000a7e0:	80 00       	ld.sh	r0,r0[0x0]
8000a7e2:	a7 04       	ld.d	r4,r3
8000a7e4:	80 00       	ld.sh	r0,r0[0x0]
8000a7e6:	a6 46       	st.h	r3[0x8],r6
8000a7e8:	80 00       	ld.sh	r0,r0[0x0]
8000a7ea:	a6 7c       	st.h	r3[0xe],r12
8000a7ec:	80 00       	ld.sh	r0,r0[0x0]
8000a7ee:	a6 d8       	st.b	r3[0x5],r8

8000a7f0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000a7f0:	eb cd 40 80 	pushm	r7,lr
8000a7f4:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000a7f6:	30 0c       	mov	r12,0
8000a7f8:	f0 1f 00 06 	mcall	8000a810 <sysclk_get_main_hz+0x20>
8000a7fc:	18 99       	mov	r9,r12
8000a7fe:	12 98       	mov	r8,r9
8000a800:	a3 68       	lsl	r8,0x2
8000a802:	12 08       	add	r8,r9
8000a804:	a1 78       	lsl	r8,0x1
8000a806:	12 08       	add	r8,r9
8000a808:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000a80a:	10 9c       	mov	r12,r8
8000a80c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a810:	80 00       	ld.sh	r0,r0[0x0]
8000a812:	a3 70       	lsl	r0,0x3

8000a814 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000a814:	eb cd 40 80 	pushm	r7,lr
8000a818:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000a81a:	f0 1f 00 04 	mcall	8000a828 <sysclk_get_cpu_hz+0x14>
8000a81e:	18 98       	mov	r8,r12
}
8000a820:	10 9c       	mov	r12,r8
8000a822:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a826:	00 00       	add	r0,r0
8000a828:	80 00       	ld.sh	r0,r0[0x0]
8000a82a:	a7 f0       	*unknown*

8000a82c <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000a82c:	eb cd 40 80 	pushm	r7,lr
8000a830:	1a 97       	mov	r7,sp
8000a832:	20 1d       	sub	sp,4
8000a834:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000a838:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a83c:	30 1c       	mov	r12,1
8000a83e:	f0 1f 00 03 	mcall	8000a848 <sysclk_enable_hsb_module+0x1c>
}
8000a842:	2f fd       	sub	sp,-4
8000a844:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a848:	80 00       	ld.sh	r0,r0[0x0]
8000a84a:	a8 a0       	st.b	r4[0x2],r0

8000a84c <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint_fast8_t src)
{
8000a84c:	eb cd 40 80 	pushm	r7,lr
8000a850:	1a 97       	mov	r7,sp
8000a852:	20 3d       	sub	sp,12
8000a854:	ef 4c ff f4 	st.w	r7[-12],r12
	irqflags_t flags;
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
8000a858:	f0 1f 00 10 	mcall	8000a898 <sysclk_set_source+0x4c>
8000a85c:	18 98       	mov	r8,r12
8000a85e:	ef 48 ff f8 	st.w	r7[-8],r8
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
8000a862:	fe 78 0c 00 	mov	r8,-62464
8000a866:	70 08       	ld.w	r8,r8[0x0]
8000a868:	e0 18 ff fc 	andl	r8,0xfffc
8000a86c:	ef 48 ff fc 	st.w	r7[-4],r8
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
8000a870:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a874:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a878:	f3 e8 10 08 	or	r8,r9,r8
8000a87c:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.mcctrl = mcctrl;
8000a880:	fe 78 0c 00 	mov	r8,-62464
8000a884:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a888:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000a88a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a88e:	f0 1f 00 04 	mcall	8000a89c <sysclk_set_source+0x50>
}
8000a892:	2f dd       	sub	sp,-12
8000a894:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a898:	80 00       	ld.sh	r0,r0[0x0]
8000a89a:	a2 20       	st.h	r1[0x4],r0
8000a89c:	80 00       	ld.sh	r0,r0[0x0]
8000a89e:	a2 3e       	st.h	r1[0x6],lr

8000a8a0 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8000a8a0:	eb cd 40 80 	pushm	r7,lr
8000a8a4:	1a 97       	mov	r7,sp
8000a8a6:	20 4d       	sub	sp,16
8000a8a8:	ef 4c ff f4 	st.w	r7[-12],r12
8000a8ac:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8000a8b0:	f0 1f 00 17 	mcall	8000a90c <sysclk_priv_enable_module+0x6c>
8000a8b4:	18 98       	mov	r8,r12
8000a8b6:	ef 48 ff f8 	st.w	r7[-8],r8

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000a8ba:	fe 78 0c 00 	mov	r8,-62464
8000a8be:	71 58       	ld.w	r8,r8[0x54]
8000a8c0:	e2 18 00 40 	andl	r8,0x40,COH
8000a8c4:	cf b0       	breq	8000a8ba <sysclk_priv_enable_module+0x1a>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000a8c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a8ca:	a3 68       	lsl	r8,0x2
8000a8cc:	e0 28 f3 f8 	sub	r8,62456
8000a8d0:	70 08       	ld.w	r8,r8[0x0]
8000a8d2:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8000a8d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a8da:	30 19       	mov	r9,1
8000a8dc:	f2 08 09 48 	lsl	r8,r9,r8
8000a8e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a8e4:	f3 e8 10 08 	or	r8,r9,r8
8000a8e8:	ef 48 ff fc 	st.w	r7[-4],r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000a8ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a8f0:	a3 68       	lsl	r8,0x2
8000a8f2:	e0 28 f3 f8 	sub	r8,62456
8000a8f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a8fa:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8000a8fc:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a900:	f0 1f 00 04 	mcall	8000a910 <sysclk_priv_enable_module+0x70>
}
8000a904:	2f cd       	sub	sp,-16
8000a906:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a90a:	00 00       	add	r0,r0
8000a90c:	80 00       	ld.sh	r0,r0[0x0]
8000a90e:	a2 20       	st.h	r1[0x4],r0
8000a910:	80 00       	ld.sh	r0,r0[0x0]
8000a912:	a2 3e       	st.h	r1[0x6],lr

8000a914 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
8000a914:	eb cd 40 80 	pushm	r7,lr
8000a918:	1a 97       	mov	r7,sp
8000a91a:	20 3d       	sub	sp,12
8000a91c:	ef 4c ff f4 	st.w	r7[-12],r12
	unsigned int pbus_id = 0;
8000a920:	30 08       	mov	r8,0
8000a922:	ef 48 ff f8 	st.w	r7[-8],r8
	irqflags_t   flags;

	/* The AES module is on PBC, others are on PBB */
	if (index == SYSCLK_AES)
8000a926:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a92a:	58 98       	cp.w	r8,9
8000a92c:	c0 41       	brne	8000a934 <sysclk_enable_pbb_module+0x20>
		pbus_id = 1;
8000a92e:	30 18       	mov	r8,1
8000a930:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
8000a934:	f0 1f 00 15 	mcall	8000a988 <sysclk_enable_pbb_module+0x74>
8000a938:	18 98       	mov	r8,r12
8000a93a:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!sysclk_bus_refcount[pbus_id])
8000a93e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a942:	49 39       	lddpc	r9,8000a98c <sysclk_enable_pbb_module+0x78>
8000a944:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000a948:	58 08       	cp.w	r8,0
8000a94a:	c0 91       	brne	8000a95c <sysclk_enable_pbb_module+0x48>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
8000a94c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a950:	a1 78       	lsl	r8,0x1
8000a952:	2f f8       	sub	r8,-1
8000a954:	a1 78       	lsl	r8,0x1
8000a956:	10 9c       	mov	r12,r8
8000a958:	f0 1f 00 0e 	mcall	8000a990 <sysclk_enable_pbb_module+0x7c>
	sysclk_bus_refcount[pbus_id]++;
8000a95c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a960:	48 b9       	lddpc	r9,8000a98c <sysclk_enable_pbb_module+0x78>
8000a962:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000a966:	2f f9       	sub	r9,-1
8000a968:	5c 59       	castu.b	r9
8000a96a:	48 9a       	lddpc	r10,8000a98c <sysclk_enable_pbb_module+0x78>
8000a96c:	f4 08 0b 09 	st.b	r10[r8],r9

	cpu_irq_restore(flags);
8000a970:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a974:	f0 1f 00 08 	mcall	8000a994 <sysclk_enable_pbb_module+0x80>

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
8000a978:	ee fb ff f4 	ld.w	r11,r7[-12]
8000a97c:	30 3c       	mov	r12,3
8000a97e:	f0 1f 00 07 	mcall	8000a998 <sysclk_enable_pbb_module+0x84>
}
8000a982:	2f dd       	sub	sp,-12
8000a984:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a988:	80 00       	ld.sh	r0,r0[0x0]
8000a98a:	a2 20       	st.h	r1[0x4],r0
8000a98c:	00 00       	add	r0,r0
8000a98e:	06 94       	mov	r4,r3
8000a990:	80 00       	ld.sh	r0,r0[0x0]
8000a992:	a8 2c       	st.h	r4[0x4],r12
8000a994:	80 00       	ld.sh	r0,r0[0x0]
8000a996:	a2 3e       	st.h	r1[0x6],lr
8000a998:	80 00       	ld.sh	r0,r0[0x0]
8000a99a:	a8 a0       	st.b	r4[0x2],r0

8000a99c <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8000a99c:	eb cd 40 80 	pushm	r7,lr
8000a9a0:	1a 97       	mov	r7,sp
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
8000a9a2:	30 1c       	mov	r12,1
8000a9a4:	f0 1f 00 06 	mcall	8000a9bc <sysclk_enable_usb+0x20>
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000a9a8:	30 3c       	mov	r12,3
8000a9aa:	f0 1f 00 06 	mcall	8000a9c0 <sysclk_enable_usb+0x24>
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
8000a9ae:	30 1a       	mov	r10,1
8000a9b0:	30 0b       	mov	r11,0
8000a9b2:	30 4c       	mov	r12,4
8000a9b4:	f0 1f 00 04 	mcall	8000a9c4 <sysclk_enable_usb+0x28>
}
8000a9b8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9bc:	80 00       	ld.sh	r0,r0[0x0]
8000a9be:	a9 14       	ld.d	r4,--r4
8000a9c0:	80 00       	ld.sh	r0,r0[0x0]
8000a9c2:	a8 2c       	st.h	r4[0x4],r12
8000a9c4:	80 00       	ld.sh	r0,r0[0x0]
8000a9c6:	a7 80       	lsr	r0,0x6

8000a9c8 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8000a9c8:	eb cd 40 80 	pushm	r7,lr
8000a9cc:	1a 97       	mov	r7,sp
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000a9ce:	30 0c       	mov	r12,0
8000a9d0:	f0 1f 00 07 	mcall	8000a9ec <sysclk_init+0x24>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
8000a9d4:	f0 1f 00 07 	mcall	8000a9f0 <sysclk_init+0x28>
8000a9d8:	18 98       	mov	r8,r12
8000a9da:	10 9c       	mov	r12,r8
8000a9dc:	f0 1f 00 06 	mcall	8000a9f4 <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_PLL0);
8000a9e0:	30 2c       	mov	r12,2
8000a9e2:	f0 1f 00 06 	mcall	8000a9f8 <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000a9e6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9ea:	00 00       	add	r0,r0
8000a9ec:	80 00       	ld.sh	r0,r0[0x0]
8000a9ee:	a5 b4       	sbr	r4,0x5
8000a9f0:	80 00       	ld.sh	r0,r0[0x0]
8000a9f2:	a8 14       	st.h	r4[0x2],r4
8000a9f4:	80 00       	ld.sh	r0,r0[0x0]
8000a9f6:	73 10       	ld.w	r0,r9[0x44]
8000a9f8:	80 00       	ld.sh	r0,r0[0x0]
8000a9fa:	a8 4c       	st.h	r4[0x8],r12
8000a9fc:	22 53       	sub	r3,37
8000a9fe:	44 20       	lddsp	r0,sp[0x108]
8000aa00:	43 61       	lddsp	r1,sp[0xd8]
8000aa02:	72 64       	ld.w	r4,r9[0x18]
8000aa04:	20 53       	sub	r3,5
8000aa06:	6c 6f       	ld.w	pc,r6[0x18]
8000aa08:	74 20       	ld.w	r0,r10[0x8]
8000aa0a:	30 22       	mov	r2,2
8000aa0c:	00 00       	add	r0,r0
8000aa0e:	00 00       	add	r0,r0
8000aa10:	22 53       	sub	r3,37
8000aa12:	44 20       	lddsp	r0,sp[0x108]
8000aa14:	43 61       	lddsp	r1,sp[0xd8]
8000aa16:	72 64       	ld.w	r4,r9[0x18]
8000aa18:	20 53       	sub	r3,5
8000aa1a:	6c 6f       	ld.w	pc,r6[0x18]
8000aa1c:	74 20       	ld.w	r0,r10[0x8]
8000aa1e:	31 22       	mov	r2,18
8000aa20:	00 00       	add	r0,r0
	...

8000aa24 <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
8000aa24:	eb cd 40 80 	pushm	r7,lr
8000aa28:	1a 97       	mov	r7,sp

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
8000aa2a:	30 28       	mov	r8,2
#endif
}
8000aa2c:	10 9c       	mov	r12,r8
8000aa2e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa32:	d7 03       	nop

8000aa34 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
8000aa34:	eb cd 40 80 	pushm	r7,lr
8000aa38:	1a 97       	mov	r7,sp
8000aa3a:	20 2d       	sub	sp,8
8000aa3c:	18 98       	mov	r8,r12
8000aa3e:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000aa42:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aa46:	30 18       	mov	r8,1
8000aa48:	f0 09 18 00 	cp.b	r9,r8
8000aa4c:	e0 8b 00 0f 	brhi	8000aa6a <mem_test_unit_ready+0x36>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
8000aa50:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aa54:	48 aa       	lddpc	r10,8000aa7c <mem_test_unit_ready+0x48>
8000aa56:	12 98       	mov	r8,r9
8000aa58:	a3 78       	lsl	r8,0x3
8000aa5a:	12 18       	sub	r8,r9
8000aa5c:	a3 68       	lsl	r8,0x2
8000aa5e:	f4 08 00 08 	add	r8,r10,r8
8000aa62:	70 08       	ld.w	r8,r8[0x0]
8000aa64:	5d 18       	icall	r8
8000aa66:	18 98       	mov	r8,r12
8000aa68:	c0 28       	rjmp	8000aa6c <mem_test_unit_ready+0x38>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000aa6a:	30 18       	mov	r8,1
8000aa6c:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000aa70:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000aa74:	10 9c       	mov	r12,r8
8000aa76:	2f ed       	sub	sp,-8
8000aa78:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa7c:	80 00       	ld.sh	r0,r0[0x0]
8000aa7e:	dc 24       	*unknown*

8000aa80 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
8000aa80:	eb cd 40 80 	pushm	r7,lr
8000aa84:	1a 97       	mov	r7,sp
8000aa86:	20 3d       	sub	sp,12
8000aa88:	18 98       	mov	r8,r12
8000aa8a:	ef 4b ff f4 	st.w	r7[-12],r11
8000aa8e:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000aa92:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aa96:	30 18       	mov	r8,1
8000aa98:	f0 09 18 00 	cp.b	r9,r8
8000aa9c:	e0 8b 00 10 	brhi	8000aabc <mem_read_capacity+0x3c>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
8000aaa0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aaa4:	48 ba       	lddpc	r10,8000aad0 <mem_read_capacity+0x50>
8000aaa6:	12 98       	mov	r8,r9
8000aaa8:	a3 78       	lsl	r8,0x3
8000aaaa:	12 18       	sub	r8,r9
8000aaac:	2f f8       	sub	r8,-1
8000aaae:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
8000aab2:	ee fc ff f4 	ld.w	r12,r7[-12]
8000aab6:	5d 18       	icall	r8
8000aab8:	18 98       	mov	r8,r12
8000aaba:	c0 28       	rjmp	8000aabe <mem_read_capacity+0x3e>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000aabc:	30 18       	mov	r8,1
8000aabe:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000aac2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000aac6:	10 9c       	mov	r12,r8
8000aac8:	2f dd       	sub	sp,-12
8000aaca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aace:	00 00       	add	r0,r0
8000aad0:	80 00       	ld.sh	r0,r0[0x0]
8000aad2:	dc 24       	*unknown*

8000aad4 <mem_wr_protect>:
  return sector_size;
}


bool mem_wr_protect(U8 lun)
{
8000aad4:	eb cd 40 80 	pushm	r7,lr
8000aad8:	1a 97       	mov	r7,sp
8000aada:	20 2d       	sub	sp,8
8000aadc:	18 98       	mov	r8,r12
8000aade:	ef 68 ff f8 	st.b	r7[-8],r8
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000aae2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aae6:	30 18       	mov	r8,1
8000aae8:	f0 09 18 00 	cp.b	r9,r8
8000aaec:	e0 8b 00 10 	brhi	8000ab0c <mem_wr_protect+0x38>
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
8000aaf0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aaf4:	48 ba       	lddpc	r10,8000ab20 <mem_wr_protect+0x4c>
8000aaf6:	12 98       	mov	r8,r9
8000aaf8:	a3 78       	lsl	r8,0x3
8000aafa:	12 18       	sub	r8,r9
8000aafc:	a3 68       	lsl	r8,0x2
8000aafe:	f4 08 00 08 	add	r8,r10,r8
8000ab02:	2f 88       	sub	r8,-8
8000ab04:	70 08       	ld.w	r8,r8[0x0]
8000ab06:	5d 18       	icall	r8
8000ab08:	18 98       	mov	r8,r12
8000ab0a:	c0 28       	rjmp	8000ab0e <mem_wr_protect+0x3a>
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000ab0c:	30 18       	mov	r8,1
8000ab0e:	ef 68 ff ff 	st.b	r7[-1],r8
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
8000ab12:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000ab16:	10 9c       	mov	r12,r8
8000ab18:	2f ed       	sub	sp,-8
8000ab1a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab1e:	00 00       	add	r0,r0
8000ab20:	80 00       	ld.sh	r0,r0[0x0]
8000ab22:	dc 24       	*unknown*

8000ab24 <mem_name>:
  return removal;
}


const char *mem_name(U8 lun)
{
8000ab24:	eb cd 40 80 	pushm	r7,lr
8000ab28:	1a 97       	mov	r7,sp
8000ab2a:	20 1d       	sub	sp,4
8000ab2c:	18 98       	mov	r8,r12
8000ab2e:	ef 68 ff fc 	st.b	r7[-4],r8
  return
8000ab32:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000ab36:	30 18       	mov	r8,1
8000ab38:	f0 09 18 00 	cp.b	r9,r8
8000ab3c:	e0 8b 00 0e 	brhi	8000ab58 <mem_name+0x34>
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
8000ab40:	ef 39 ff fc 	ld.ub	r9,r7[-4]
}


const char *mem_name(U8 lun)
{
  return
8000ab44:	48 8a       	lddpc	r10,8000ab64 <mem_name+0x40>
8000ab46:	12 98       	mov	r8,r9
8000ab48:	a3 78       	lsl	r8,0x3
8000ab4a:	12 18       	sub	r8,r9
8000ab4c:	a3 68       	lsl	r8,0x2
8000ab4e:	f4 08 00 08 	add	r8,r10,r8
8000ab52:	2e 88       	sub	r8,-24
8000ab54:	70 08       	ld.w	r8,r8[0x0]
8000ab56:	c0 28       	rjmp	8000ab5a <mem_name+0x36>
8000ab58:	30 08       	mov	r8,0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
8000ab5a:	10 9c       	mov	r12,r8
8000ab5c:	2f fd       	sub	sp,-4
8000ab5e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab62:	00 00       	add	r0,r0
8000ab64:	80 00       	ld.sh	r0,r0[0x0]
8000ab66:	dc 24       	*unknown*

8000ab68 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
8000ab68:	eb cd 40 80 	pushm	r7,lr
8000ab6c:	1a 97       	mov	r7,sp
8000ab6e:	20 4d       	sub	sp,16
8000ab70:	18 99       	mov	r9,r12
8000ab72:	ef 4b ff f4 	st.w	r7[-12],r11
8000ab76:	14 98       	mov	r8,r10
8000ab78:	ef 69 ff f8 	st.b	r7[-8],r9
8000ab7c:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
8000ab80:	f0 1f 00 14 	mcall	8000abd0 <memory_2_usb+0x68>
  status =
8000ab84:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ab88:	30 18       	mov	r8,1
8000ab8a:	f0 09 18 00 	cp.b	r9,r8
8000ab8e:	e0 8b 00 15 	brhi	8000abb8 <memory_2_usb+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
8000ab92:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ab96:	49 0a       	lddpc	r10,8000abd4 <memory_2_usb+0x6c>
8000ab98:	12 98       	mov	r8,r9
8000ab9a:	a3 78       	lsl	r8,0x3
8000ab9c:	12 18       	sub	r8,r9
8000ab9e:	a3 68       	lsl	r8,0x2
8000aba0:	f4 08 00 08 	add	r8,r10,r8
8000aba4:	2f 08       	sub	r8,-16
8000aba6:	70 08       	ld.w	r8,r8[0x0]
8000aba8:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000abac:	12 9b       	mov	r11,r9
8000abae:	ee fc ff f4 	ld.w	r12,r7[-12]
8000abb2:	5d 18       	icall	r8
8000abb4:	18 98       	mov	r8,r12
8000abb6:	c0 28       	rjmp	8000abba <memory_2_usb+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
8000abb8:	30 18       	mov	r8,1
8000abba:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
8000abbe:	f0 1f 00 07 	mcall	8000abd8 <memory_2_usb+0x70>

  Ctrl_access_unlock();

  return status;
8000abc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000abc6:	10 9c       	mov	r12,r8
8000abc8:	2f cd       	sub	sp,-16
8000abca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000abce:	00 00       	add	r0,r0
8000abd0:	80 00       	ld.sh	r0,r0[0x0]
8000abd2:	ac a0       	st.b	r6[0x2],r0
8000abd4:	80 00       	ld.sh	r0,r0[0x0]
8000abd6:	dc 24       	*unknown*
8000abd8:	80 00       	ld.sh	r0,r0[0x0]
8000abda:	ac b4       	st.b	r6[0x3],r4

8000abdc <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
8000abdc:	eb cd 40 80 	pushm	r7,lr
8000abe0:	1a 97       	mov	r7,sp
8000abe2:	20 4d       	sub	sp,16
8000abe4:	18 99       	mov	r9,r12
8000abe6:	ef 4b ff f4 	st.w	r7[-12],r11
8000abea:	14 98       	mov	r8,r10
8000abec:	ef 69 ff f8 	st.b	r7[-8],r9
8000abf0:	ef 58 ff f0 	st.h	r7[-16],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
8000abf4:	f0 1f 00 14 	mcall	8000ac44 <usb_2_memory+0x68>
  status =
8000abf8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000abfc:	30 18       	mov	r8,1
8000abfe:	f0 09 18 00 	cp.b	r9,r8
8000ac02:	e0 8b 00 15 	brhi	8000ac2c <usb_2_memory+0x50>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
8000ac06:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ac0a:	49 0a       	lddpc	r10,8000ac48 <usb_2_memory+0x6c>
8000ac0c:	12 98       	mov	r8,r9
8000ac0e:	a3 78       	lsl	r8,0x3
8000ac10:	12 18       	sub	r8,r9
8000ac12:	a3 68       	lsl	r8,0x2
8000ac14:	f4 08 00 08 	add	r8,r10,r8
8000ac18:	2e c8       	sub	r8,-20
8000ac1a:	70 08       	ld.w	r8,r8[0x0]
8000ac1c:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000ac20:	12 9b       	mov	r11,r9
8000ac22:	ee fc ff f4 	ld.w	r12,r7[-12]
8000ac26:	5d 18       	icall	r8
8000ac28:	18 98       	mov	r8,r12
8000ac2a:	c0 28       	rjmp	8000ac2e <usb_2_memory+0x52>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
8000ac2c:	30 18       	mov	r8,1
8000ac2e:	ef 48 ff fc 	st.w	r7[-4],r8
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
8000ac32:	f0 1f 00 07 	mcall	8000ac4c <usb_2_memory+0x70>

  Ctrl_access_unlock();

  return status;
8000ac36:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000ac3a:	10 9c       	mov	r12,r8
8000ac3c:	2f cd       	sub	sp,-16
8000ac3e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac42:	00 00       	add	r0,r0
8000ac44:	80 00       	ld.sh	r0,r0[0x0]
8000ac46:	ac c8       	st.b	r6[0x4],r8
8000ac48:	80 00       	ld.sh	r0,r0[0x0]
8000ac4a:	dc 24       	*unknown*
8000ac4c:	80 00       	ld.sh	r0,r0[0x0]
8000ac4e:	ac dc       	st.b	r6[0x5],r12

8000ac50 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
8000ac50:	eb cd 40 80 	pushm	r7,lr
8000ac54:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000ac56:	30 1c       	mov	r12,1
8000ac58:	f0 1f 00 04 	mcall	8000ac68 <ui_init+0x18>
	LED_Off(LED1);
8000ac5c:	30 2c       	mov	r12,2
8000ac5e:	f0 1f 00 04 	mcall	8000ac6c <ui_init+0x1c>
}
8000ac62:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac66:	00 00       	add	r0,r0
8000ac68:	80 00       	ld.sh	r0,r0[0x0]
8000ac6a:	30 ec       	mov	r12,14
8000ac6c:	80 00       	ld.sh	r0,r0[0x0]
8000ac6e:	30 34       	mov	r4,3

8000ac70 <ui_powerdown>:

void ui_powerdown(void)
{
8000ac70:	eb cd 40 80 	pushm	r7,lr
8000ac74:	1a 97       	mov	r7,sp
	LED_Off(LED0);
8000ac76:	30 1c       	mov	r12,1
8000ac78:	f0 1f 00 04 	mcall	8000ac88 <ui_powerdown+0x18>
	LED_Off(LED1);
8000ac7c:	30 2c       	mov	r12,2
8000ac7e:	f0 1f 00 03 	mcall	8000ac88 <ui_powerdown+0x18>
}
8000ac82:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac86:	00 00       	add	r0,r0
8000ac88:	80 00       	ld.sh	r0,r0[0x0]
8000ac8a:	30 34       	mov	r4,3

8000ac8c <ui_wakeup>:

void ui_wakeup(void)
{
8000ac8c:	eb cd 40 80 	pushm	r7,lr
8000ac90:	1a 97       	mov	r7,sp
	LED_On(LED0);
8000ac92:	30 1c       	mov	r12,1
8000ac94:	f0 1f 00 02 	mcall	8000ac9c <ui_wakeup+0x10>
}
8000ac98:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac9c:	80 00       	ld.sh	r0,r0[0x0]
8000ac9e:	30 ec       	mov	r12,14

8000aca0 <ui_start_read>:

void ui_start_read(void)
{
8000aca0:	eb cd 40 80 	pushm	r7,lr
8000aca4:	1a 97       	mov	r7,sp
	LED_On(LED2);
8000aca6:	30 4c       	mov	r12,4
8000aca8:	f0 1f 00 02 	mcall	8000acb0 <ui_start_read+0x10>
}
8000acac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000acb0:	80 00       	ld.sh	r0,r0[0x0]
8000acb2:	30 ec       	mov	r12,14

8000acb4 <ui_stop_read>:

void ui_stop_read(void)
{
8000acb4:	eb cd 40 80 	pushm	r7,lr
8000acb8:	1a 97       	mov	r7,sp
	LED_Off(LED2);
8000acba:	30 4c       	mov	r12,4
8000acbc:	f0 1f 00 02 	mcall	8000acc4 <ui_stop_read+0x10>
}
8000acc0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000acc4:	80 00       	ld.sh	r0,r0[0x0]
8000acc6:	30 34       	mov	r4,3

8000acc8 <ui_start_write>:

void ui_start_write(void)
{
8000acc8:	eb cd 40 80 	pushm	r7,lr
8000accc:	1a 97       	mov	r7,sp
	LED_On(LED3);
8000acce:	30 8c       	mov	r12,8
8000acd0:	f0 1f 00 02 	mcall	8000acd8 <ui_start_write+0x10>
}
8000acd4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000acd8:	80 00       	ld.sh	r0,r0[0x0]
8000acda:	30 ec       	mov	r12,14

8000acdc <ui_stop_write>:

void ui_stop_write(void)
{
8000acdc:	eb cd 40 80 	pushm	r7,lr
8000ace0:	1a 97       	mov	r7,sp
	LED_Off(LED3);
8000ace2:	30 8c       	mov	r12,8
8000ace4:	f0 1f 00 02 	mcall	8000acec <ui_stop_write+0x10>
}
8000ace8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000acec:	80 00       	ld.sh	r0,r0[0x0]
8000acee:	30 34       	mov	r4,3

8000acf0 <ui_process>:

void ui_process(uint16_t framenumber)
{
8000acf0:	eb cd 40 80 	pushm	r7,lr
8000acf4:	1a 97       	mov	r7,sp
8000acf6:	20 1d       	sub	sp,4
8000acf8:	18 98       	mov	r8,r12
8000acfa:	ef 58 ff fc 	st.h	r7[-4],r8
	if ((framenumber % 1000) == 0) {
8000acfe:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000ad02:	e0 68 4d d3 	mov	r8,19923
8000ad06:	ea 18 10 62 	orh	r8,0x1062
8000ad0a:	f4 08 06 48 	mulu.d	r8,r10,r8
8000ad0e:	a7 89       	lsr	r9,0x6
8000ad10:	e0 68 03 e8 	mov	r8,1000
8000ad14:	f2 08 02 48 	mul	r8,r9,r8
8000ad18:	f4 08 01 08 	sub	r8,r10,r8
8000ad1c:	5c 88       	casts.h	r8
8000ad1e:	c0 41       	brne	8000ad26 <ui_process+0x36>
		LED_On(LED1);
8000ad20:	30 2c       	mov	r12,2
8000ad22:	f0 1f 00 10 	mcall	8000ad60 <ui_process+0x70>
	}
	if ((framenumber % 1000) == 500) {
8000ad26:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000ad2a:	e0 68 4d d3 	mov	r8,19923
8000ad2e:	ea 18 10 62 	orh	r8,0x1062
8000ad32:	f4 08 06 48 	mulu.d	r8,r10,r8
8000ad36:	a7 89       	lsr	r9,0x6
8000ad38:	e0 68 03 e8 	mov	r8,1000
8000ad3c:	f2 08 02 48 	mul	r8,r9,r8
8000ad40:	f4 08 01 08 	sub	r8,r10,r8
8000ad44:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000ad48:	e0 68 01 f4 	mov	r8,500
8000ad4c:	f0 09 19 00 	cp.h	r9,r8
8000ad50:	c0 41       	brne	8000ad58 <ui_process+0x68>
		LED_Off(LED1);
8000ad52:	30 2c       	mov	r12,2
8000ad54:	f0 1f 00 04 	mcall	8000ad64 <ui_process+0x74>
	}
}
8000ad58:	2f fd       	sub	sp,-4
8000ad5a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ad5e:	00 00       	add	r0,r0
8000ad60:	80 00       	ld.sh	r0,r0[0x0]
8000ad62:	30 ec       	mov	r12,14
8000ad64:	80 00       	ld.sh	r0,r0[0x0]
8000ad66:	30 34       	mov	r4,3

8000ad68 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
8000ad68:	eb cd 40 80 	pushm	r7,lr
8000ad6c:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000ad6e:	49 49       	lddpc	r9,8000adbc <udi_msc_enable+0x54>
8000ad70:	30 08       	mov	r8,0
8000ad72:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_cbw_invalid = false;
8000ad74:	49 39       	lddpc	r9,8000adc0 <udi_msc_enable+0x58>
8000ad76:	30 08       	mov	r8,0
8000ad78:	b2 88       	st.b	r9[0x0],r8
	udi_msc_nb_lun = get_nb_lun();
8000ad7a:	f0 1f 00 13 	mcall	8000adc4 <udi_msc_enable+0x5c>
8000ad7e:	18 98       	mov	r8,r12
8000ad80:	49 29       	lddpc	r9,8000adc8 <udi_msc_enable+0x60>
8000ad82:	b2 88       	st.b	r9[0x0],r8
	if (0 == udi_msc_nb_lun)
8000ad84:	49 18       	lddpc	r8,8000adc8 <udi_msc_enable+0x60>
8000ad86:	11 88       	ld.ub	r8,r8[0x0]
8000ad88:	58 08       	cp.w	r8,0
8000ad8a:	c0 31       	brne	8000ad90 <udi_msc_enable+0x28>
		return false;	// No lun available, then not authorize to enable interface
8000ad8c:	30 08       	mov	r8,0
8000ad8e:	c1 38       	rjmp	8000adb4 <udi_msc_enable+0x4c>
	udi_msc_nb_lun--;
8000ad90:	48 e8       	lddpc	r8,8000adc8 <udi_msc_enable+0x60>
8000ad92:	11 88       	ld.ub	r8,r8[0x0]
8000ad94:	20 18       	sub	r8,1
8000ad96:	5c 58       	castu.b	r8
8000ad98:	48 c9       	lddpc	r9,8000adc8 <udi_msc_enable+0x60>
8000ad9a:	b2 88       	st.b	r9[0x0],r8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
8000ad9c:	f0 1f 00 0c 	mcall	8000adcc <udi_msc_enable+0x64>
8000ada0:	18 98       	mov	r8,r12
8000ada2:	ec 18 00 01 	eorl	r8,0x1
8000ada6:	5c 58       	castu.b	r8
8000ada8:	c0 30       	breq	8000adae <udi_msc_enable+0x46>
		return false;
8000adaa:	30 08       	mov	r8,0
8000adac:	c0 48       	rjmp	8000adb4 <udi_msc_enable+0x4c>
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
8000adae:	f0 1f 00 09 	mcall	8000add0 <udi_msc_enable+0x68>
	return true;
8000adb2:	30 18       	mov	r8,1
}
8000adb4:	10 9c       	mov	r12,r8
8000adb6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000adba:	00 00       	add	r0,r0
8000adbc:	00 00       	add	r0,r0
8000adbe:	06 d1       	st.w	--r3,r1
8000adc0:	00 00       	add	r0,r0
8000adc2:	06 d0       	st.w	--r3,r0
8000adc4:	80 00       	ld.sh	r0,r0[0x0]
8000adc6:	aa 24       	st.h	r5[0x4],r4
8000adc8:	00 00       	add	r0,r0
8000adca:	06 b8       	st.h	r3++,r8
8000adcc:	80 00       	ld.sh	r0,r0[0x0]
8000adce:	cc 98       	rjmp	8000af60 <udi_msc_cbw_wait+0x14>
8000add0:	80 00       	ld.sh	r0,r0[0x0]
8000add2:	af 4c       	asr	r12,0xe

8000add4 <udi_msc_disable>:


void udi_msc_disable(void)
{
8000add4:	eb cd 40 80 	pushm	r7,lr
8000add8:	1a 97       	mov	r7,sp
	udi_msc_b_trans_req = false;
8000adda:	48 49       	lddpc	r9,8000ade8 <udi_msc_disable+0x14>
8000addc:	30 08       	mov	r8,0
8000adde:	b2 88       	st.b	r9[0x0],r8
	UDI_MSC_DISABLE_EXT();
8000ade0:	f0 1f 00 03 	mcall	8000adec <udi_msc_disable+0x18>
}
8000ade4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ade8:	00 00       	add	r0,r0
8000adea:	06 d1       	st.w	--r3,r1
8000adec:	80 00       	ld.sh	r0,r0[0x0]
8000adee:	cc b0       	breq	8000ad84 <udi_msc_enable+0x1c>

8000adf0 <udi_msc_setup>:


bool udi_msc_setup(void)
{
8000adf0:	eb cd 40 80 	pushm	r7,lr
8000adf4:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000adf6:	4a f8       	lddpc	r8,8000aeb0 <udi_msc_setup+0xc0>
8000adf8:	11 88       	ld.ub	r8,r8[0x0]
8000adfa:	10 99       	mov	r9,r8
8000adfc:	30 08       	mov	r8,0
8000adfe:	f0 09 18 00 	cp.b	r9,r8
8000ae02:	c2 34       	brge	8000ae48 <udi_msc_setup+0x58>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000ae04:	4a b8       	lddpc	r8,8000aeb0 <udi_msc_setup+0xc0>
8000ae06:	11 88       	ld.ub	r8,r8[0x0]
8000ae08:	e2 18 00 60 	andl	r8,0x60,COH
8000ae0c:	e0 48 00 20 	cp.w	r8,32
8000ae10:	c1 c1       	brne	8000ae48 <udi_msc_setup+0x58>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000ae12:	4a 88       	lddpc	r8,8000aeb0 <udi_msc_setup+0xc0>
8000ae14:	11 98       	ld.ub	r8,r8[0x1]
8000ae16:	e0 48 00 fe 	cp.w	r8,254
8000ae1a:	c1 71       	brne	8000ae48 <udi_msc_setup+0x58>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
8000ae1c:	4a 58       	lddpc	r8,8000aeb0 <udi_msc_setup+0xc0>
8000ae1e:	90 39       	ld.sh	r9,r8[0x6]
8000ae20:	30 18       	mov	r8,1
8000ae22:	f0 09 19 00 	cp.h	r9,r8
8000ae26:	c0 30       	breq	8000ae2c <udi_msc_setup+0x3c>
					return false;	// Error for USB host
8000ae28:	30 08       	mov	r8,0
8000ae2a:	c4 08       	rjmp	8000aeaa <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000ae2c:	4a 18       	lddpc	r8,8000aeb0 <udi_msc_setup+0xc0>
8000ae2e:	90 18       	ld.sh	r8,r8[0x2]
8000ae30:	58 08       	cp.w	r8,0
8000ae32:	c0 30       	breq	8000ae38 <udi_msc_setup+0x48>
					return false;
8000ae34:	30 08       	mov	r8,0
8000ae36:	c3 a8       	rjmp	8000aeaa <udi_msc_setup+0xba>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
8000ae38:	49 e8       	lddpc	r8,8000aeb0 <udi_msc_setup+0xc0>
8000ae3a:	49 f9       	lddpc	r9,8000aeb4 <udi_msc_setup+0xc4>
8000ae3c:	91 29       	st.w	r8[0x8],r9
				udd_g_ctrlreq.payload_size = 1;
8000ae3e:	49 d9       	lddpc	r9,8000aeb0 <udi_msc_setup+0xc0>
8000ae40:	30 18       	mov	r8,1
8000ae42:	b2 68       	st.h	r9[0xc],r8
				return true;
8000ae44:	30 18       	mov	r8,1
8000ae46:	c3 28       	rjmp	8000aeaa <udi_msc_setup+0xba>
			}
		}
	}
	if (Udd_setup_is_out()) {
8000ae48:	49 a8       	lddpc	r8,8000aeb0 <udi_msc_setup+0xc0>
8000ae4a:	11 88       	ld.ub	r8,r8[0x0]
8000ae4c:	10 99       	mov	r9,r8
8000ae4e:	30 08       	mov	r8,0
8000ae50:	f0 09 18 00 	cp.b	r9,r8
8000ae54:	c2 a5       	brlt	8000aea8 <udi_msc_setup+0xb8>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000ae56:	49 78       	lddpc	r8,8000aeb0 <udi_msc_setup+0xc0>
8000ae58:	11 88       	ld.ub	r8,r8[0x0]
8000ae5a:	e2 18 00 60 	andl	r8,0x60,COH
8000ae5e:	e0 48 00 20 	cp.w	r8,32
8000ae62:	c2 31       	brne	8000aea8 <udi_msc_setup+0xb8>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000ae64:	49 38       	lddpc	r8,8000aeb0 <udi_msc_setup+0xc0>
8000ae66:	11 98       	ld.ub	r8,r8[0x1]
8000ae68:	e0 48 00 ff 	cp.w	r8,255
8000ae6c:	c1 e1       	brne	8000aea8 <udi_msc_setup+0xb8>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
8000ae6e:	49 18       	lddpc	r8,8000aeb0 <udi_msc_setup+0xc0>
8000ae70:	90 38       	ld.sh	r8,r8[0x6]
8000ae72:	58 08       	cp.w	r8,0
8000ae74:	c0 30       	breq	8000ae7a <udi_msc_setup+0x8a>
					return false;
8000ae76:	30 08       	mov	r8,0
8000ae78:	c1 98       	rjmp	8000aeaa <udi_msc_setup+0xba>
				if (0 != udd_g_ctrlreq.req.wValue)
8000ae7a:	48 e8       	lddpc	r8,8000aeb0 <udi_msc_setup+0xc0>
8000ae7c:	90 18       	ld.sh	r8,r8[0x2]
8000ae7e:	58 08       	cp.w	r8,0
8000ae80:	c0 30       	breq	8000ae86 <udi_msc_setup+0x96>
					return false;
8000ae82:	30 08       	mov	r8,0
8000ae84:	c1 38       	rjmp	8000aeaa <udi_msc_setup+0xba>
				udi_msc_b_cbw_invalid = false;
8000ae86:	48 d9       	lddpc	r9,8000aeb8 <udi_msc_setup+0xc8>
8000ae88:	30 08       	mov	r8,0
8000ae8a:	b2 88       	st.b	r9[0x0],r8
				udi_msc_b_trans_req = false;
8000ae8c:	48 c9       	lddpc	r9,8000aebc <udi_msc_setup+0xcc>
8000ae8e:	30 08       	mov	r8,0
8000ae90:	b2 88       	st.b	r9[0x0],r8
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
8000ae92:	30 2c       	mov	r12,2
8000ae94:	f0 1f 00 0b 	mcall	8000aec0 <udi_msc_setup+0xd0>
				udd_ep_abort(UDI_MSC_EP_IN);
8000ae98:	e0 6c 00 81 	mov	r12,129
8000ae9c:	f0 1f 00 09 	mcall	8000aec0 <udi_msc_setup+0xd0>
				// Restart by CBW wait
				udi_msc_cbw_wait();
8000aea0:	f0 1f 00 09 	mcall	8000aec4 <udi_msc_setup+0xd4>
				return true;
8000aea4:	30 18       	mov	r8,1
8000aea6:	c0 28       	rjmp	8000aeaa <udi_msc_setup+0xba>
			}
		}
	}
	return false;	// Not supported request
8000aea8:	30 08       	mov	r8,0
}
8000aeaa:	10 9c       	mov	r12,r8
8000aeac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aeb0:	00 00       	add	r0,r0
8000aeb2:	0b c8       	ld.ub	r8,r5[0x4]
8000aeb4:	00 00       	add	r0,r0
8000aeb6:	06 b8       	st.h	r3++,r8
8000aeb8:	00 00       	add	r0,r0
8000aeba:	06 d0       	st.w	--r3,r0
8000aebc:	00 00       	add	r0,r0
8000aebe:	06 d1       	st.w	--r3,r1
8000aec0:	80 00       	ld.sh	r0,r0[0x0]
8000aec2:	90 44       	ld.sh	r4,r8[0x8]
8000aec4:	80 00       	ld.sh	r0,r0[0x0]
8000aec6:	af 4c       	asr	r12,0xe

8000aec8 <udi_msc_getsetting>:

uint8_t udi_msc_getsetting(void)
{
8000aec8:	eb cd 40 80 	pushm	r7,lr
8000aecc:	1a 97       	mov	r7,sp
	return 0;	// MSC don't have multiple alternate setting
8000aece:	30 08       	mov	r8,0
}
8000aed0:	10 9c       	mov	r12,r8
8000aed2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aed6:	d7 03       	nop

8000aed8 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
8000aed8:	eb cd 40 80 	pushm	r7,lr
8000aedc:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000aede:	48 a8       	lddpc	r8,8000af04 <udi_msc_cbw_invalid+0x2c>
8000aee0:	11 88       	ld.ub	r8,r8[0x0]
8000aee2:	ec 18 00 01 	eorl	r8,0x1
8000aee6:	5c 58       	castu.b	r8
8000aee8:	c0 a1       	brne	8000aefc <udi_msc_cbw_invalid+0x24>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
8000aeea:	30 2c       	mov	r12,2
8000aeec:	f0 1f 00 07 	mcall	8000af08 <udi_msc_cbw_invalid+0x30>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
8000aef0:	fe cb 00 18 	sub	r11,pc,24
8000aef4:	30 2c       	mov	r12,2
8000aef6:	f0 1f 00 06 	mcall	8000af0c <udi_msc_cbw_invalid+0x34>
8000aefa:	c0 28       	rjmp	8000aefe <udi_msc_cbw_invalid+0x26>
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000aefc:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_OUT);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
}
8000aefe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af02:	00 00       	add	r0,r0
8000af04:	00 00       	add	r0,r0
8000af06:	06 d0       	st.w	--r3,r0
8000af08:	80 00       	ld.sh	r0,r0[0x0]
8000af0a:	8c cc       	ld.uh	r12,r6[0x8]
8000af0c:	80 00       	ld.sh	r0,r0[0x0]
8000af0e:	90 e0       	ld.uh	r0,r8[0xc]

8000af10 <udi_msc_csw_invalid>:

static void udi_msc_csw_invalid(void)
{
8000af10:	eb cd 40 80 	pushm	r7,lr
8000af14:	1a 97       	mov	r7,sp
	if (!udi_msc_b_cbw_invalid)
8000af16:	48 b8       	lddpc	r8,8000af40 <udi_msc_csw_invalid+0x30>
8000af18:	11 88       	ld.ub	r8,r8[0x0]
8000af1a:	ec 18 00 01 	eorl	r8,0x1
8000af1e:	5c 58       	castu.b	r8
8000af20:	c0 c1       	brne	8000af38 <udi_msc_csw_invalid+0x28>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
8000af22:	e0 6c 00 81 	mov	r12,129
8000af26:	f0 1f 00 08 	mcall	8000af44 <udi_msc_csw_invalid+0x34>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
8000af2a:	fe cb 00 1a 	sub	r11,pc,26
8000af2e:	e0 6c 00 81 	mov	r12,129
8000af32:	f0 1f 00 06 	mcall	8000af48 <udi_msc_csw_invalid+0x38>
8000af36:	c0 28       	rjmp	8000af3a <udi_msc_csw_invalid+0x2a>
}

static void udi_msc_csw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
		return;	// Don't re-stall endpoint if error reseted by setup
8000af38:	d7 03       	nop
	udd_ep_set_halt(UDI_MSC_EP_IN);
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}
8000af3a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af3e:	00 00       	add	r0,r0
8000af40:	00 00       	add	r0,r0
8000af42:	06 d0       	st.w	--r3,r0
8000af44:	80 00       	ld.sh	r0,r0[0x0]
8000af46:	8c cc       	ld.uh	r12,r6[0x8]
8000af48:	80 00       	ld.sh	r0,r0[0x0]
8000af4a:	90 e0       	ld.uh	r0,r8[0xc]

8000af4c <udi_msc_cbw_wait>:

static void udi_msc_cbw_wait(void)
{
8000af4c:	eb cd 40 80 	pushm	r7,lr
8000af50:	1a 97       	mov	r7,sp
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
8000af52:	48 aa       	lddpc	r10,8000af78 <udi_msc_cbw_wait+0x2c>
8000af54:	48 a8       	lddpc	r8,8000af7c <udi_msc_cbw_wait+0x30>
8000af56:	31 f9       	mov	r9,31
8000af58:	30 1b       	mov	r11,1
8000af5a:	30 2c       	mov	r12,2
8000af5c:	f0 1f 00 09 	mcall	8000af80 <udi_msc_cbw_wait+0x34>
8000af60:	18 98       	mov	r8,r12
8000af62:	ec 18 00 01 	eorl	r8,0x1
8000af66:	5c 58       	castu.b	r8
8000af68:	c0 60       	breq	8000af74 <udi_msc_cbw_wait+0x28>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
8000af6a:	fe cb 00 1e 	sub	r11,pc,30
8000af6e:	30 2c       	mov	r12,2
8000af70:	f0 1f 00 05 	mcall	8000af84 <udi_msc_cbw_wait+0x38>
	}
}
8000af74:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af78:	00 00       	add	r0,r0
8000af7a:	06 98       	mov	r8,r3
8000af7c:	80 00       	ld.sh	r0,r0[0x0]
8000af7e:	af 88       	lsr	r8,0xe
8000af80:	80 00       	ld.sh	r0,r0[0x0]
8000af82:	8f 20       	st.w	r7[0x8],r0
8000af84:	80 00       	ld.sh	r0,r0[0x0]
8000af86:	90 e0       	ld.uh	r0,r8[0xc]

8000af88 <udi_msc_cbw_received>:


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
8000af88:	eb cd 40 80 	pushm	r7,lr
8000af8c:	1a 97       	mov	r7,sp
8000af8e:	20 3d       	sub	sp,12
8000af90:	ef 4c ff fc 	st.w	r7[-4],r12
8000af94:	ef 4b ff f8 	st.w	r7[-8],r11
8000af98:	14 98       	mov	r8,r10
8000af9a:	ef 68 ff f4 	st.b	r7[-12],r8
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
8000af9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000afa2:	58 08       	cp.w	r8,0
8000afa4:	c6 11       	brne	8000b066 <udi_msc_cbw_received+0xde>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000afa6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000afaa:	59 f8       	cp.w	r8,31
8000afac:	c0 91       	brne	8000afbe <udi_msc_cbw_received+0x36>
			|| (udi_msc_cbw.dCBWSignature !=
8000afae:	4b 18       	lddpc	r8,8000b070 <udi_msc_cbw_received+0xe8>
8000afb0:	70 08       	ld.w	r8,r8[0x0]
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
8000afb2:	e0 69 42 43 	mov	r9,16963
8000afb6:	ea 19 55 53 	orh	r9,0x5553
8000afba:	12 38       	cp.w	r8,r9
8000afbc:	c0 90       	breq	8000afce <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
8000afbe:	4a e9       	lddpc	r9,8000b074 <udi_msc_cbw_received+0xec>
8000afc0:	30 18       	mov	r8,1
8000afc2:	b2 88       	st.b	r9[0x0],r8
		udi_msc_cbw_invalid();
8000afc4:	f0 1f 00 2d 	mcall	8000b078 <udi_msc_cbw_received+0xf0>
		udi_msc_csw_invalid();
8000afc8:	f0 1f 00 2d 	mcall	8000b07c <udi_msc_cbw_received+0xf4>
		return;
8000afcc:	c4 e8       	rjmp	8000b068 <udi_msc_cbw_received+0xe0>
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
8000afce:	4a 98       	lddpc	r8,8000b070 <udi_msc_cbw_received+0xe8>
8000afd0:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000afd4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000afd8:	4a 69       	lddpc	r9,8000b070 <udi_msc_cbw_received+0xe8>
8000afda:	f3 68 00 0d 	st.b	r9[13],r8
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
8000afde:	4a 58       	lddpc	r8,8000b070 <udi_msc_cbw_received+0xe8>
8000afe0:	f1 39 00 0d 	ld.ub	r9,r8[13]
8000afe4:	4a 78       	lddpc	r8,8000b080 <udi_msc_cbw_received+0xf8>
8000afe6:	11 88       	ld.ub	r8,r8[0x0]
8000afe8:	f0 09 18 00 	cp.b	r9,r8
8000afec:	e0 88 00 07 	brls	8000affa <udi_msc_cbw_received+0x72>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
8000aff0:	f0 1f 00 25 	mcall	8000b084 <udi_msc_cbw_received+0xfc>
		udi_msc_csw_process();
8000aff4:	f0 1f 00 25 	mcall	8000b088 <udi_msc_cbw_received+0x100>
		return;
8000aff8:	c3 88       	rjmp	8000b068 <udi_msc_cbw_received+0xe0>
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
8000affa:	49 e8       	lddpc	r8,8000b070 <udi_msc_cbw_received+0xe8>
8000affc:	70 28       	ld.w	r8,r8[0x8]
8000affe:	5c b8       	swap.b	r8
8000b000:	10 99       	mov	r9,r8
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
8000b002:	4a 38       	lddpc	r8,8000b08c <udi_msc_cbw_received+0x104>
8000b004:	91 29       	st.w	r8[0x8],r9
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
8000b006:	49 b8       	lddpc	r8,8000b070 <udi_msc_cbw_received+0xe8>
8000b008:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000b00c:	e0 48 00 5a 	cp.w	r8,90
8000b010:	e0 8b 00 26 	brhi	8000b05c <udi_msc_cbw_received+0xd4>
8000b014:	49 f9       	lddpc	r9,8000b090 <udi_msc_cbw_received+0x108>
8000b016:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case SPC_REQUEST_SENSE:
		udi_msc_spc_requestsense();
8000b01a:	f0 1f 00 1f 	mcall	8000b094 <udi_msc_cbw_received+0x10c>
		break;
8000b01e:	c2 58       	rjmp	8000b068 <udi_msc_cbw_received+0xe0>

	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
8000b020:	f0 1f 00 1e 	mcall	8000b098 <udi_msc_cbw_received+0x110>
		break;
8000b024:	c2 28       	rjmp	8000b068 <udi_msc_cbw_received+0xe0>

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
8000b026:	30 0c       	mov	r12,0
8000b028:	f0 1f 00 1d 	mcall	8000b09c <udi_msc_cbw_received+0x114>
		break;
8000b02c:	c1 e8       	rjmp	8000b068 <udi_msc_cbw_received+0xe0>
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
8000b02e:	30 1c       	mov	r12,1
8000b030:	f0 1f 00 1b 	mcall	8000b09c <udi_msc_cbw_received+0x114>
		break;
8000b034:	c1 a8       	rjmp	8000b068 <udi_msc_cbw_received+0xe0>

	case SPC_TEST_UNIT_READY:
		udi_msc_spc_testunitready();
8000b036:	f0 1f 00 1b 	mcall	8000b0a0 <udi_msc_cbw_received+0x118>
		break;
8000b03a:	c1 78       	rjmp	8000b068 <udi_msc_cbw_received+0xe0>

	case SBC_READ_CAPACITY10:
		udi_msc_sbc_read_capacity();
8000b03c:	f0 1f 00 1a 	mcall	8000b0a4 <udi_msc_cbw_received+0x11c>
		break;
8000b040:	c1 48       	rjmp	8000b068 <udi_msc_cbw_received+0xe0>
	case SBC_START_STOP_UNIT:
		// Accepts request to support plug/plug in case of card reader
	case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
8000b042:	f0 1f 00 1a 	mcall	8000b0a8 <udi_msc_cbw_received+0x120>
		udi_msc_csw_process();
8000b046:	f0 1f 00 11 	mcall	8000b088 <udi_msc_cbw_received+0x100>
		break;
8000b04a:	c0 f8       	rjmp	8000b068 <udi_msc_cbw_received+0xe0>

	case SBC_READ10:
		udi_msc_sbc_trans(true);
8000b04c:	30 1c       	mov	r12,1
8000b04e:	f0 1f 00 18 	mcall	8000b0ac <udi_msc_cbw_received+0x124>
		break;
8000b052:	c0 b8       	rjmp	8000b068 <udi_msc_cbw_received+0xe0>

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
8000b054:	30 0c       	mov	r12,0
8000b056:	f0 1f 00 16 	mcall	8000b0ac <udi_msc_cbw_received+0x124>
		break;
8000b05a:	c0 78       	rjmp	8000b068 <udi_msc_cbw_received+0xe0>

	default:
		udi_msc_sense_command_invalid();
8000b05c:	f0 1f 00 15 	mcall	8000b0b0 <udi_msc_cbw_received+0x128>
		udi_msc_csw_process();
8000b060:	f0 1f 00 0a 	mcall	8000b088 <udi_msc_cbw_received+0x100>
8000b064:	c0 28       	rjmp	8000b068 <udi_msc_cbw_received+0xe0>
{
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
		// Transfer aborted
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000b066:	d7 03       	nop
	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
		break;
	}
}
8000b068:	2f dd       	sub	sp,-12
8000b06a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b06e:	00 00       	add	r0,r0
8000b070:	00 00       	add	r0,r0
8000b072:	06 98       	mov	r8,r3
8000b074:	00 00       	add	r0,r0
8000b076:	06 d0       	st.w	--r3,r0
8000b078:	80 00       	ld.sh	r0,r0[0x0]
8000b07a:	ae d8       	st.b	r7[0x5],r8
8000b07c:	80 00       	ld.sh	r0,r0[0x0]
8000b07e:	af 10       	ld.d	r0,--r7
8000b080:	00 00       	add	r0,r0
8000b082:	06 b8       	st.h	r3++,r8
8000b084:	80 00       	ld.sh	r0,r0[0x0]
8000b086:	b3 b0       	sbr	r0,0x13
8000b088:	80 00       	ld.sh	r0,r0[0x0]
8000b08a:	b1 b0       	sbr	r0,0x11
8000b08c:	00 00       	add	r0,r0
8000b08e:	00 30       	cp.w	r0,r0
8000b090:	80 00       	ld.sh	r0,r0[0x0]
8000b092:	dc 5c       	*unknown*
8000b094:	80 00       	ld.sh	r0,r0[0x0]
8000b096:	b3 e8       	*unknown*
8000b098:	80 00       	ld.sh	r0,r0[0x0]
8000b09a:	b4 4c       	st.h	r10[0x8],r12
8000b09c:	80 00       	ld.sh	r0,r0[0x0]
8000b09e:	b5 e4       	*unknown*
8000b0a0:	80 00       	ld.sh	r0,r0[0x0]
8000b0a2:	b5 bc       	sbr	r12,0x15
8000b0a4:	80 00       	ld.sh	r0,r0[0x0]
8000b0a6:	b7 34       	mul	r4,r11
8000b0a8:	80 00       	ld.sh	r0,r0[0x0]
8000b0aa:	b3 24       	st.d	r9++,r4
8000b0ac:	80 00       	ld.sh	r0,r0[0x0]
8000b0ae:	b7 d0       	cbr	r0,0x17
8000b0b0:	80 00       	ld.sh	r0,r0[0x0]
8000b0b2:	b3 cc       	cbr	r12,0x12

8000b0b4 <udi_msc_cbw_validate>:


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
8000b0b4:	eb cd 40 80 	pushm	r7,lr
8000b0b8:	1a 97       	mov	r7,sp
8000b0ba:	20 2d       	sub	sp,8
8000b0bc:	ef 4c ff fc 	st.w	r7[-4],r12
8000b0c0:	16 98       	mov	r8,r11
8000b0c2:	ef 68 ff f8 	st.b	r7[-8],r8
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000b0c6:	49 08       	lddpc	r8,8000b104 <udi_msc_cbw_validate+0x50>
8000b0c8:	f1 39 00 0c 	ld.ub	r9,r8[12]
8000b0cc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b0d0:	f3 e8 20 08 	eor	r8,r9,r8
8000b0d4:	5c 58       	castu.b	r8
8000b0d6:	10 99       	mov	r9,r8
8000b0d8:	30 08       	mov	r8,0
8000b0da:	f0 09 18 00 	cp.b	r9,r8
8000b0de:	c0 75       	brlt	8000b0ec <udi_msc_cbw_validate+0x38>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
8000b0e0:	48 a8       	lddpc	r8,8000b108 <udi_msc_cbw_validate+0x54>
8000b0e2:	70 29       	ld.w	r9,r8[0x8]
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
8000b0e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b0e8:	10 39       	cp.w	r9,r8
8000b0ea:	c0 72       	brcc	8000b0f8 <udi_msc_cbw_validate+0x44>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
		udi_msc_sense_fail_cdb_invalid();
8000b0ec:	f0 1f 00 08 	mcall	8000b10c <udi_msc_cbw_validate+0x58>
		udi_msc_csw_process();
8000b0f0:	f0 1f 00 08 	mcall	8000b110 <udi_msc_cbw_validate+0x5c>
		return false;
8000b0f4:	30 08       	mov	r8,0
8000b0f6:	c0 28       	rjmp	8000b0fa <udi_msc_cbw_validate+0x46>
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
8000b0f8:	30 18       	mov	r8,1
}
8000b0fa:	10 9c       	mov	r12,r8
8000b0fc:	2f ed       	sub	sp,-8
8000b0fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b102:	00 00       	add	r0,r0
8000b104:	00 00       	add	r0,r0
8000b106:	06 98       	mov	r8,r3
8000b108:	00 00       	add	r0,r0
8000b10a:	00 30       	cp.w	r0,r0
8000b10c:	80 00       	ld.sh	r0,r0[0x0]
8000b10e:	b3 b0       	sbr	r0,0x13
8000b110:	80 00       	ld.sh	r0,r0[0x0]
8000b112:	b1 b0       	sbr	r0,0x11

8000b114 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
8000b114:	eb cd 40 80 	pushm	r7,lr
8000b118:	1a 97       	mov	r7,sp
8000b11a:	20 2d       	sub	sp,8
8000b11c:	ef 4c ff fc 	st.w	r7[-4],r12
8000b120:	16 98       	mov	r8,r11
8000b122:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
8000b126:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000b12a:	48 b8       	lddpc	r8,8000b154 <udi_msc_data_send+0x40>
8000b12c:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b130:	30 1b       	mov	r11,1
8000b132:	e0 6c 00 81 	mov	r12,129
8000b136:	f0 1f 00 09 	mcall	8000b158 <udi_msc_data_send+0x44>
8000b13a:	18 98       	mov	r8,r12
8000b13c:	ec 18 00 01 	eorl	r8,0x1
8000b140:	5c 58       	castu.b	r8
8000b142:	c0 50       	breq	8000b14c <udi_msc_data_send+0x38>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
8000b144:	f0 1f 00 06 	mcall	8000b15c <udi_msc_data_send+0x48>
		udi_msc_csw_process();
8000b148:	f0 1f 00 06 	mcall	8000b160 <udi_msc_data_send+0x4c>
	}
}
8000b14c:	2f ed       	sub	sp,-8
8000b14e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b152:	00 00       	add	r0,r0
8000b154:	80 00       	ld.sh	r0,r0[0x0]
8000b156:	b1 64       	lsl	r4,0x10
8000b158:	80 00       	ld.sh	r0,r0[0x0]
8000b15a:	8f 20       	st.w	r7[0x8],r0
8000b15c:	80 00       	ld.sh	r0,r0[0x0]
8000b15e:	b3 7c       	lsl	r12,0x13
8000b160:	80 00       	ld.sh	r0,r0[0x0]
8000b162:	b1 b0       	sbr	r0,0x11

8000b164 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000b164:	eb cd 40 80 	pushm	r7,lr
8000b168:	1a 97       	mov	r7,sp
8000b16a:	20 3d       	sub	sp,12
8000b16c:	ef 4c ff fc 	st.w	r7[-4],r12
8000b170:	ef 4b ff f8 	st.w	r7[-8],r11
8000b174:	14 98       	mov	r8,r10
8000b176:	ef 68 ff f4 	st.b	r7[-12],r8
	if (UDD_EP_TRANSFER_OK != status) {
8000b17a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b17e:	58 08       	cp.w	r8,0
8000b180:	c0 d1       	brne	8000b19a <udi_msc_data_sent+0x36>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
8000b182:	f0 1f 00 09 	mcall	8000b1a4 <udi_msc_data_sent+0x40>
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
8000b186:	48 98       	lddpc	r8,8000b1a8 <udi_msc_data_sent+0x44>
8000b188:	70 29       	ld.w	r9,r8[0x8]
8000b18a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b18e:	10 19       	sub	r9,r8
8000b190:	48 68       	lddpc	r8,8000b1a8 <udi_msc_data_sent+0x44>
8000b192:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_process();
8000b194:	f0 1f 00 06 	mcall	8000b1ac <udi_msc_data_sent+0x48>
8000b198:	c0 28       	rjmp	8000b19c <udi_msc_data_sent+0x38>
		udd_ep_id_t ep)
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
8000b19a:	d7 03       	nop
	// Update sense data
	udi_msc_sense_pass();
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
	udi_msc_csw_process();
}
8000b19c:	2f dd       	sub	sp,-12
8000b19e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b1a2:	00 00       	add	r0,r0
8000b1a4:	80 00       	ld.sh	r0,r0[0x0]
8000b1a6:	b3 24       	st.d	r9++,r4
8000b1a8:	00 00       	add	r0,r0
8000b1aa:	00 30       	cp.w	r0,r0
8000b1ac:	80 00       	ld.sh	r0,r0[0x0]
8000b1ae:	b1 b0       	sbr	r0,0x11

8000b1b0 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
8000b1b0:	eb cd 40 80 	pushm	r7,lr
8000b1b4:	1a 97       	mov	r7,sp
	if (0 != udi_msc_csw.dCSWDataResidue) {
8000b1b6:	49 28       	lddpc	r8,8000b1fc <udi_msc_csw_process+0x4c>
8000b1b8:	70 28       	ld.w	r8,r8[0x8]
8000b1ba:	58 08       	cp.w	r8,0
8000b1bc:	c1 10       	breq	8000b1de <udi_msc_csw_process+0x2e>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
8000b1be:	49 18       	lddpc	r8,8000b200 <udi_msc_csw_process+0x50>
8000b1c0:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000b1c4:	10 99       	mov	r9,r8
8000b1c6:	30 08       	mov	r8,0
8000b1c8:	f0 09 18 00 	cp.b	r9,r8
8000b1cc:	c0 64       	brge	8000b1d8 <udi_msc_csw_process+0x28>
			udd_ep_set_halt(UDI_MSC_EP_IN);
8000b1ce:	e0 6c 00 81 	mov	r12,129
8000b1d2:	f0 1f 00 0d 	mcall	8000b204 <udi_msc_csw_process+0x54>
8000b1d6:	c0 48       	rjmp	8000b1de <udi_msc_csw_process+0x2e>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
8000b1d8:	30 2c       	mov	r12,2
8000b1da:	f0 1f 00 0b 	mcall	8000b204 <udi_msc_csw_process+0x54>
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
8000b1de:	48 98       	lddpc	r8,8000b200 <udi_msc_csw_process+0x50>
8000b1e0:	70 19       	ld.w	r9,r8[0x4]
8000b1e2:	48 78       	lddpc	r8,8000b1fc <udi_msc_csw_process+0x4c>
8000b1e4:	91 19       	st.w	r8[0x4],r9
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
8000b1e6:	48 68       	lddpc	r8,8000b1fc <udi_msc_csw_process+0x4c>
8000b1e8:	70 28       	ld.w	r8,r8[0x8]
8000b1ea:	5c b8       	swap.b	r8
8000b1ec:	10 99       	mov	r9,r8
8000b1ee:	48 48       	lddpc	r8,8000b1fc <udi_msc_csw_process+0x4c>
8000b1f0:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_send();
8000b1f2:	f0 1f 00 06 	mcall	8000b208 <udi_msc_csw_process+0x58>
}
8000b1f6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b1fa:	00 00       	add	r0,r0
8000b1fc:	00 00       	add	r0,r0
8000b1fe:	00 30       	cp.w	r0,r0
8000b200:	00 00       	add	r0,r0
8000b202:	06 98       	mov	r8,r3
8000b204:	80 00       	ld.sh	r0,r0[0x0]
8000b206:	8c cc       	ld.uh	r12,r6[0x8]
8000b208:	80 00       	ld.sh	r0,r0[0x0]
8000b20a:	b2 0c       	st.h	r9[0x0],r12

8000b20c <udi_msc_csw_send>:


void udi_msc_csw_send(void)
{
8000b20c:	eb cd 40 80 	pushm	r7,lr
8000b210:	1a 97       	mov	r7,sp
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
8000b212:	48 ba       	lddpc	r10,8000b23c <udi_msc_csw_send+0x30>
8000b214:	48 b8       	lddpc	r8,8000b240 <udi_msc_csw_send+0x34>
8000b216:	30 d9       	mov	r9,13
8000b218:	30 0b       	mov	r11,0
8000b21a:	e0 6c 00 81 	mov	r12,129
8000b21e:	f0 1f 00 0a 	mcall	8000b244 <udi_msc_csw_send+0x38>
8000b222:	18 98       	mov	r8,r12
8000b224:	ec 18 00 01 	eorl	r8,0x1
8000b228:	5c 58       	castu.b	r8
8000b22a:	c0 60       	breq	8000b236 <udi_msc_csw_send+0x2a>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
8000b22c:	48 7b       	lddpc	r11,8000b248 <udi_msc_csw_send+0x3c>
8000b22e:	e0 6c 00 81 	mov	r12,129
8000b232:	f0 1f 00 07 	mcall	8000b24c <udi_msc_csw_send+0x40>
	}
}
8000b236:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b23a:	00 00       	add	r0,r0
8000b23c:	00 00       	add	r0,r0
8000b23e:	00 30       	cp.w	r0,r0
8000b240:	80 00       	ld.sh	r0,r0[0x0]
8000b242:	b2 50       	st.h	r9[0xa],r0
8000b244:	80 00       	ld.sh	r0,r0[0x0]
8000b246:	8f 20       	st.w	r7[0x8],r0
8000b248:	80 00       	ld.sh	r0,r0[0x0]
8000b24a:	b2 0c       	st.h	r9[0x0],r12
8000b24c:	80 00       	ld.sh	r0,r0[0x0]
8000b24e:	90 e0       	ld.uh	r0,r8[0xc]

8000b250 <udi_msc_csw_sent>:


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
8000b250:	eb cd 40 80 	pushm	r7,lr
8000b254:	1a 97       	mov	r7,sp
8000b256:	20 3d       	sub	sp,12
8000b258:	ef 4c ff fc 	st.w	r7[-4],r12
8000b25c:	ef 4b ff f8 	st.w	r7[-8],r11
8000b260:	14 98       	mov	r8,r10
8000b262:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
8000b266:	f0 1f 00 03 	mcall	8000b270 <udi_msc_csw_sent+0x20>
}
8000b26a:	2f dd       	sub	sp,-12
8000b26c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b270:	80 00       	ld.sh	r0,r0[0x0]
8000b272:	af 4c       	asr	r12,0xe

8000b274 <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
8000b274:	eb cd 40 80 	pushm	r7,lr
8000b278:	1a 97       	mov	r7,sp
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
8000b27a:	31 2a       	mov	r10,18
8000b27c:	30 0b       	mov	r11,0
8000b27e:	48 6c       	lddpc	r12,8000b294 <udi_msc_clear_sense+0x20>
8000b280:	f0 1f 00 06 	mcall	8000b298 <udi_msc_clear_sense+0x24>
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
8000b284:	48 49       	lddpc	r9,8000b294 <udi_msc_clear_sense+0x20>
8000b286:	3f 08       	mov	r8,-16
8000b288:	b2 88       	st.b	r9[0x0],r8
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
8000b28a:	48 39       	lddpc	r9,8000b294 <udi_msc_clear_sense+0x20>
8000b28c:	30 a8       	mov	r8,10
8000b28e:	b2 f8       	st.b	r9[0x7],r8
}
8000b290:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b294:	00 00       	add	r0,r0
8000b296:	06 bc       	st.h	r3++,r12
8000b298:	80 00       	ld.sh	r0,r0[0x0]
8000b29a:	d2 7a       	popm	r0-r9,r12

8000b29c <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
8000b29c:	eb cd 40 80 	pushm	r7,lr
8000b2a0:	1a 97       	mov	r7,sp
8000b2a2:	20 3d       	sub	sp,12
8000b2a4:	18 99       	mov	r9,r12
8000b2a6:	16 98       	mov	r8,r11
8000b2a8:	ef 4a ff f4 	st.w	r7[-12],r10
8000b2ac:	ef 69 ff fc 	st.b	r7[-4],r9
8000b2b0:	ef 58 ff f8 	st.h	r7[-8],r8
	udi_msc_clear_sense();
8000b2b4:	f0 1f 00 19 	mcall	8000b318 <udi_msc_sense_fail+0x7c>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
8000b2b8:	49 99       	lddpc	r9,8000b31c <udi_msc_sense_fail+0x80>
8000b2ba:	30 18       	mov	r8,1
8000b2bc:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.sense_flag_key = sense_key;
8000b2c0:	49 89       	lddpc	r9,8000b320 <udi_msc_sense_fail+0x84>
8000b2c2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b2c6:	b2 a8       	st.b	r9[0x2],r8
	udi_msc_sense.information[0] = lba >> 24;
8000b2c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2cc:	b9 88       	lsr	r8,0x18
8000b2ce:	5c 58       	castu.b	r8
8000b2d0:	49 49       	lddpc	r9,8000b320 <udi_msc_sense_fail+0x84>
8000b2d2:	b2 b8       	st.b	r9[0x3],r8
	udi_msc_sense.information[1] = lba >> 16;
8000b2d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2d8:	b1 88       	lsr	r8,0x10
8000b2da:	5c 58       	castu.b	r8
8000b2dc:	49 19       	lddpc	r9,8000b320 <udi_msc_sense_fail+0x84>
8000b2de:	b2 c8       	st.b	r9[0x4],r8
	udi_msc_sense.information[2] = lba >> 8;
8000b2e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2e4:	a9 88       	lsr	r8,0x8
8000b2e6:	5c 58       	castu.b	r8
8000b2e8:	48 e9       	lddpc	r9,8000b320 <udi_msc_sense_fail+0x84>
8000b2ea:	b2 d8       	st.b	r9[0x5],r8
	udi_msc_sense.information[3] = lba;
8000b2ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b2f0:	5c 58       	castu.b	r8
8000b2f2:	48 c9       	lddpc	r9,8000b320 <udi_msc_sense_fail+0x84>
8000b2f4:	b2 e8       	st.b	r9[0x6],r8
	udi_msc_sense.AddSenseCode = add_sense >> 8;
8000b2f6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000b2fa:	a9 88       	lsr	r8,0x8
8000b2fc:	5c 88       	casts.h	r8
8000b2fe:	5c 58       	castu.b	r8
8000b300:	48 89       	lddpc	r9,8000b320 <udi_msc_sense_fail+0x84>
8000b302:	f3 68 00 0c 	st.b	r9[12],r8
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
8000b306:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000b30a:	5c 58       	castu.b	r8
8000b30c:	48 59       	lddpc	r9,8000b320 <udi_msc_sense_fail+0x84>
8000b30e:	f3 68 00 0d 	st.b	r9[13],r8
}
8000b312:	2f dd       	sub	sp,-12
8000b314:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b318:	80 00       	ld.sh	r0,r0[0x0]
8000b31a:	b2 74       	st.h	r9[0xe],r4
8000b31c:	00 00       	add	r0,r0
8000b31e:	00 30       	cp.w	r0,r0
8000b320:	00 00       	add	r0,r0
8000b322:	06 bc       	st.h	r3++,r12

8000b324 <udi_msc_sense_pass>:

static void udi_msc_sense_pass(void)
{
8000b324:	eb cd 40 80 	pushm	r7,lr
8000b328:	1a 97       	mov	r7,sp
	udi_msc_clear_sense();
8000b32a:	f0 1f 00 05 	mcall	8000b33c <udi_msc_sense_pass+0x18>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
8000b32e:	48 59       	lddpc	r9,8000b340 <udi_msc_sense_pass+0x1c>
8000b330:	30 08       	mov	r8,0
8000b332:	f3 68 00 0c 	st.b	r9[12],r8
}
8000b336:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b33a:	00 00       	add	r0,r0
8000b33c:	80 00       	ld.sh	r0,r0[0x0]
8000b33e:	b2 74       	st.h	r9[0xe],r4
8000b340:	00 00       	add	r0,r0
8000b342:	00 30       	cp.w	r0,r0

8000b344 <udi_msc_sense_fail_not_present>:


static void udi_msc_sense_fail_not_present(void)
{
8000b344:	eb cd 40 80 	pushm	r7,lr
8000b348:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
8000b34a:	30 0a       	mov	r10,0
8000b34c:	e0 6b 3a 00 	mov	r11,14848
8000b350:	30 2c       	mov	r12,2
8000b352:	f0 1f 00 03 	mcall	8000b35c <udi_msc_sense_fail_not_present+0x18>
}
8000b356:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b35a:	00 00       	add	r0,r0
8000b35c:	80 00       	ld.sh	r0,r0[0x0]
8000b35e:	b2 9c       	st.b	r9[0x1],r12

8000b360 <udi_msc_sense_fail_busy_or_change>:

static void udi_msc_sense_fail_busy_or_change(void)
{
8000b360:	eb cd 40 80 	pushm	r7,lr
8000b364:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
8000b366:	30 0a       	mov	r10,0
8000b368:	e0 6b 28 00 	mov	r11,10240
8000b36c:	30 6c       	mov	r12,6
8000b36e:	f0 1f 00 03 	mcall	8000b378 <udi_msc_sense_fail_busy_or_change+0x18>
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}
8000b372:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b376:	00 00       	add	r0,r0
8000b378:	80 00       	ld.sh	r0,r0[0x0]
8000b37a:	b2 9c       	st.b	r9[0x1],r12

8000b37c <udi_msc_sense_fail_hardware>:

static void udi_msc_sense_fail_hardware(void)
{
8000b37c:	eb cd 40 80 	pushm	r7,lr
8000b380:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
8000b382:	30 0a       	mov	r10,0
8000b384:	30 0b       	mov	r11,0
8000b386:	30 4c       	mov	r12,4
8000b388:	f0 1f 00 02 	mcall	8000b390 <udi_msc_sense_fail_hardware+0x14>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}
8000b38c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b390:	80 00       	ld.sh	r0,r0[0x0]
8000b392:	b2 9c       	st.b	r9[0x1],r12

8000b394 <udi_msc_sense_fail_protected>:

static void udi_msc_sense_fail_protected(void)
{
8000b394:	eb cd 40 80 	pushm	r7,lr
8000b398:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
8000b39a:	30 0a       	mov	r10,0
8000b39c:	e0 6b 27 00 	mov	r11,9984
8000b3a0:	30 7c       	mov	r12,7
8000b3a2:	f0 1f 00 03 	mcall	8000b3ac <udi_msc_sense_fail_protected+0x18>
}
8000b3a6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b3aa:	00 00       	add	r0,r0
8000b3ac:	80 00       	ld.sh	r0,r0[0x0]
8000b3ae:	b2 9c       	st.b	r9[0x1],r12

8000b3b0 <udi_msc_sense_fail_cdb_invalid>:

static void udi_msc_sense_fail_cdb_invalid(void)
{
8000b3b0:	eb cd 40 80 	pushm	r7,lr
8000b3b4:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000b3b6:	30 0a       	mov	r10,0
8000b3b8:	e0 6b 24 00 	mov	r11,9216
8000b3bc:	30 5c       	mov	r12,5
8000b3be:	f0 1f 00 03 	mcall	8000b3c8 <udi_msc_sense_fail_cdb_invalid+0x18>
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
8000b3c2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b3c6:	00 00       	add	r0,r0
8000b3c8:	80 00       	ld.sh	r0,r0[0x0]
8000b3ca:	b2 9c       	st.b	r9[0x1],r12

8000b3cc <udi_msc_sense_command_invalid>:

static void udi_msc_sense_command_invalid(void)
{
8000b3cc:	eb cd 40 80 	pushm	r7,lr
8000b3d0:	1a 97       	mov	r7,sp
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
8000b3d2:	30 0a       	mov	r10,0
8000b3d4:	e0 6b 20 00 	mov	r11,8192
8000b3d8:	30 5c       	mov	r12,5
8000b3da:	f0 1f 00 03 	mcall	8000b3e4 <udi_msc_sense_command_invalid+0x18>
			SCSI_ASC_INVALID_COMMAND_OPERATION_CODE, 0);
}
8000b3de:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b3e2:	00 00       	add	r0,r0
8000b3e4:	80 00       	ld.sh	r0,r0[0x0]
8000b3e6:	b2 9c       	st.b	r9[0x1],r12

8000b3e8 <udi_msc_spc_requestsense>:

//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
8000b3e8:	eb cd 40 80 	pushm	r7,lr
8000b3ec:	1a 97       	mov	r7,sp
8000b3ee:	20 1d       	sub	sp,4
	uint8_t length = udi_msc_cbw.CDB[4];
8000b3f0:	49 38       	lddpc	r8,8000b43c <udi_msc_spc_requestsense+0x54>
8000b3f2:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b3f6:	ef 68 ff ff 	st.b	r7[-1],r8

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
8000b3fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b3fe:	31 28       	mov	r8,18
8000b400:	f0 09 18 00 	cp.b	r9,r8
8000b404:	e0 88 00 05 	brls	8000b40e <udi_msc_spc_requestsense+0x26>
		length = sizeof(udi_msc_sense);
8000b408:	31 28       	mov	r8,18
8000b40a:	ef 68 ff ff 	st.b	r7[-1],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000b40e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b412:	e0 6b 00 80 	mov	r11,128
8000b416:	10 9c       	mov	r12,r8
8000b418:	f0 1f 00 0a 	mcall	8000b440 <udi_msc_spc_requestsense+0x58>
8000b41c:	18 98       	mov	r8,r12
8000b41e:	ec 18 00 01 	eorl	r8,0x1
8000b422:	5c 58       	castu.b	r8
8000b424:	c0 81       	brne	8000b434 <udi_msc_spc_requestsense+0x4c>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
8000b426:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b42a:	10 9b       	mov	r11,r8
8000b42c:	48 6c       	lddpc	r12,8000b444 <udi_msc_spc_requestsense+0x5c>
8000b42e:	f0 1f 00 07 	mcall	8000b448 <udi_msc_spc_requestsense+0x60>
8000b432:	c0 28       	rjmp	8000b436 <udi_msc_spc_requestsense+0x4e>
	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000b434:	d7 03       	nop
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
}
8000b436:	2f fd       	sub	sp,-4
8000b438:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b43c:	00 00       	add	r0,r0
8000b43e:	06 98       	mov	r8,r3
8000b440:	80 00       	ld.sh	r0,r0[0x0]
8000b442:	b0 b4       	st.b	r8[0x3],r4
8000b444:	00 00       	add	r0,r0
8000b446:	06 bc       	st.h	r3++,r12
8000b448:	80 00       	ld.sh	r0,r0[0x0]
8000b44a:	b1 14       	ld.d	r4,--r8

8000b44c <udi_msc_spc_inquiry>:


static void udi_msc_spc_inquiry(void)
{
8000b44c:	eb cd 40 80 	pushm	r7,lr
8000b450:	1a 97       	mov	r7,sp
8000b452:	20 1d       	sub	sp,4
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
8000b454:	4b e8       	lddpc	r8,8000b54c <udi_msc_spc_inquiry+0x100>
8000b456:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b45a:	ef 68 ff fe 	st.b	r7[-2],r8

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
8000b45e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b462:	32 48       	mov	r8,36
8000b464:	f0 09 18 00 	cp.b	r9,r8
8000b468:	e0 88 00 05 	brls	8000b472 <udi_msc_spc_inquiry+0x26>
		length = sizeof(udi_msc_inquiry_data);
8000b46c:	32 48       	mov	r8,36
8000b46e:	ef 68 ff fe 	st.b	r7[-2],r8

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
8000b472:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b476:	e0 6b 00 80 	mov	r11,128
8000b47a:	10 9c       	mov	r12,r8
8000b47c:	f0 1f 00 35 	mcall	8000b550 <udi_msc_spc_inquiry+0x104>
8000b480:	18 98       	mov	r8,r12
8000b482:	ec 18 00 01 	eorl	r8,0x1
8000b486:	5c 58       	castu.b	r8
8000b488:	c5 e1       	brne	8000b544 <udi_msc_spc_inquiry+0xf8>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000b48a:	4b 18       	lddpc	r8,8000b54c <udi_msc_spc_inquiry+0x100>
8000b48c:	f1 38 00 10 	ld.ub	r8,r8[16]
8000b490:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000b494:	c0 61       	brne	8000b4a0 <udi_msc_spc_inquiry+0x54>
			|| (0 != udi_msc_cbw.CDB[2])) {
8000b496:	4a e8       	lddpc	r8,8000b54c <udi_msc_spc_inquiry+0x100>
8000b498:	f1 38 00 11 	ld.ub	r8,r8[17]
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
8000b49c:	58 08       	cp.w	r8,0
8000b49e:	c0 60       	breq	8000b4aa <udi_msc_spc_inquiry+0x5e>
			|| (0 != udi_msc_cbw.CDB[2])) {
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
8000b4a0:	f0 1f 00 2d 	mcall	8000b554 <udi_msc_spc_inquiry+0x108>
		udi_msc_csw_process();
8000b4a4:	f0 1f 00 2d 	mcall	8000b558 <udi_msc_spc_inquiry+0x10c>
		return;
8000b4a8:	c4 f8       	rjmp	8000b546 <udi_msc_spc_inquiry+0xfa>
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
8000b4aa:	4a 98       	lddpc	r8,8000b54c <udi_msc_spc_inquiry+0x100>
8000b4ac:	f1 38 00 0d 	ld.ub	r8,r8[13]
		return;
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
8000b4b0:	10 9c       	mov	r12,r8
8000b4b2:	f0 1f 00 2b 	mcall	8000b55c <udi_msc_spc_inquiry+0x110>
8000b4b6:	18 98       	mov	r8,r12
8000b4b8:	f0 c9 ff ff 	sub	r9,r8,-1
8000b4bc:	4a 98       	lddpc	r8,8000b560 <udi_msc_spc_inquiry+0x114>
8000b4be:	2f 08       	sub	r8,-16
8000b4c0:	31 0a       	mov	r10,16
8000b4c2:	12 9b       	mov	r11,r9
8000b4c4:	10 9c       	mov	r12,r8
8000b4c6:	f0 1f 00 28 	mcall	8000b564 <udi_msc_spc_inquiry+0x118>
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
8000b4ca:	30 08       	mov	r8,0
8000b4cc:	ef 68 ff ff 	st.b	r7[-1],r8
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000b4d0:	c1 a8       	rjmp	8000b504 <udi_msc_spc_inquiry+0xb8>
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000b4d2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b4d6:	4a 39       	lddpc	r9,8000b560 <udi_msc_spc_inquiry+0x114>
8000b4d8:	f2 08 00 08 	add	r8,r9,r8
8000b4dc:	f1 38 00 10 	ld.ub	r8,r8[16]
8000b4e0:	58 08       	cp.w	r8,0
8000b4e2:	c2 40       	breq	8000b52a <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
8000b4e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b4e8:	49 e9       	lddpc	r9,8000b560 <udi_msc_spc_inquiry+0x114>
8000b4ea:	f2 08 00 08 	add	r8,r9,r8
8000b4ee:	f1 39 00 10 	ld.ub	r9,r8[16]
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000b4f2:	32 28       	mov	r8,34
8000b4f4:	f0 09 18 00 	cp.b	r9,r8
8000b4f8:	c1 90       	breq	8000b52a <udi_msc_spc_inquiry+0xde>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
8000b4fa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b4fe:	2f f8       	sub	r8,-1
8000b500:	ef 68 ff ff 	st.b	r7[-1],r8
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000b504:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b508:	31 08       	mov	r8,16
8000b50a:	f0 09 18 00 	cp.b	r9,r8
8000b50e:	ce 21       	brne	8000b4d2 <udi_msc_spc_inquiry+0x86>
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000b510:	c0 d8       	rjmp	8000b52a <udi_msc_spc_inquiry+0xde>
		udi_msc_inquiry_data.product_id[i] = ' ';
8000b512:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b516:	49 39       	lddpc	r9,8000b560 <udi_msc_spc_inquiry+0x114>
8000b518:	10 09       	add	r9,r8
8000b51a:	32 08       	mov	r8,32
8000b51c:	f3 68 00 10 	st.b	r9[16],r8
		i++;
8000b520:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b524:	2f f8       	sub	r8,-1
8000b526:	ef 68 ff ff 	st.b	r7[-1],r8
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000b52a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b52e:	31 08       	mov	r8,16
8000b530:	f0 09 18 00 	cp.b	r9,r8
8000b534:	ce f1       	brne	8000b512 <udi_msc_spc_inquiry+0xc6>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
8000b536:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b53a:	10 9b       	mov	r11,r8
8000b53c:	48 9c       	lddpc	r12,8000b560 <udi_msc_spc_inquiry+0x114>
8000b53e:	f0 1f 00 0b 	mcall	8000b568 <udi_msc_spc_inquiry+0x11c>
8000b542:	c0 28       	rjmp	8000b546 <udi_msc_spc_inquiry+0xfa>
	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
		return;
8000b544:	d7 03       	nop
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
}
8000b546:	2f fd       	sub	sp,-4
8000b548:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b54c:	00 00       	add	r0,r0
8000b54e:	06 98       	mov	r8,r3
8000b550:	80 00       	ld.sh	r0,r0[0x0]
8000b552:	b0 b4       	st.b	r8[0x3],r4
8000b554:	80 00       	ld.sh	r0,r0[0x0]
8000b556:	b3 b0       	sbr	r0,0x13
8000b558:	80 00       	ld.sh	r0,r0[0x0]
8000b55a:	b1 b0       	sbr	r0,0x11
8000b55c:	80 00       	ld.sh	r0,r0[0x0]
8000b55e:	ab 24       	st.d	r5++,r4
8000b560:	00 00       	add	r0,r0
8000b562:	00 44       	or	r4,r0
8000b564:	80 00       	ld.sh	r0,r0[0x0]
8000b566:	d1 32       	popm	r0-r7,r11
8000b568:	80 00       	ld.sh	r0,r0[0x0]
8000b56a:	b1 14       	ld.d	r4,--r8

8000b56c <udi_msc_spc_testunitready_global>:


static bool udi_msc_spc_testunitready_global(void)
{
8000b56c:	eb cd 40 80 	pushm	r7,lr
8000b570:	1a 97       	mov	r7,sp
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
8000b572:	48 e8       	lddpc	r8,8000b5a8 <udi_msc_spc_testunitready_global+0x3c>
8000b574:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b578:	10 9c       	mov	r12,r8
8000b57a:	f0 1f 00 0d 	mcall	8000b5ac <udi_msc_spc_testunitready_global+0x40>
8000b57e:	18 98       	mov	r8,r12
8000b580:	58 28       	cp.w	r8,2
8000b582:	c0 a0       	breq	8000b596 <udi_msc_spc_testunitready_global+0x2a>
8000b584:	58 38       	cp.w	r8,3
8000b586:	c0 50       	breq	8000b590 <udi_msc_spc_testunitready_global+0x24>
8000b588:	58 08       	cp.w	r8,0
8000b58a:	c0 91       	brne	8000b59c <udi_msc_spc_testunitready_global+0x30>
	case CTRL_GOOD:
		return true;	// Don't change sense data
8000b58c:	30 18       	mov	r8,1
8000b58e:	c0 a8       	rjmp	8000b5a2 <udi_msc_spc_testunitready_global+0x36>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000b590:	f0 1f 00 08 	mcall	8000b5b0 <udi_msc_spc_testunitready_global+0x44>
		break;
8000b594:	c0 68       	rjmp	8000b5a0 <udi_msc_spc_testunitready_global+0x34>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000b596:	f0 1f 00 08 	mcall	8000b5b4 <udi_msc_spc_testunitready_global+0x48>
		break;
8000b59a:	c0 38       	rjmp	8000b5a0 <udi_msc_spc_testunitready_global+0x34>
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
8000b59c:	f0 1f 00 07 	mcall	8000b5b8 <udi_msc_spc_testunitready_global+0x4c>
		break;
	}
	return false;
8000b5a0:	30 08       	mov	r8,0
}
8000b5a2:	10 9c       	mov	r12,r8
8000b5a4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b5a8:	00 00       	add	r0,r0
8000b5aa:	06 98       	mov	r8,r3
8000b5ac:	80 00       	ld.sh	r0,r0[0x0]
8000b5ae:	aa 34       	st.h	r5[0x6],r4
8000b5b0:	80 00       	ld.sh	r0,r0[0x0]
8000b5b2:	b3 60       	lsl	r0,0x12
8000b5b4:	80 00       	ld.sh	r0,r0[0x0]
8000b5b6:	b3 44       	asr	r4,0x12
8000b5b8:	80 00       	ld.sh	r0,r0[0x0]
8000b5ba:	b3 7c       	lsl	r12,0x13

8000b5bc <udi_msc_spc_testunitready>:


static void udi_msc_spc_testunitready(void)
{
8000b5bc:	eb cd 40 80 	pushm	r7,lr
8000b5c0:	1a 97       	mov	r7,sp
	if (udi_msc_spc_testunitready_global()) {
8000b5c2:	f0 1f 00 06 	mcall	8000b5d8 <udi_msc_spc_testunitready+0x1c>
8000b5c6:	18 98       	mov	r8,r12
8000b5c8:	58 08       	cp.w	r8,0
8000b5ca:	c0 30       	breq	8000b5d0 <udi_msc_spc_testunitready+0x14>
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
8000b5cc:	f0 1f 00 04 	mcall	8000b5dc <udi_msc_spc_testunitready+0x20>
	}
	// Send status in CSW packet
	udi_msc_csw_process();
8000b5d0:	f0 1f 00 04 	mcall	8000b5e0 <udi_msc_spc_testunitready+0x24>
}
8000b5d4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b5d8:	80 00       	ld.sh	r0,r0[0x0]
8000b5da:	b5 6c       	lsl	r12,0x14
8000b5dc:	80 00       	ld.sh	r0,r0[0x0]
8000b5de:	b3 24       	st.d	r9++,r4
8000b5e0:	80 00       	ld.sh	r0,r0[0x0]
8000b5e2:	b1 b0       	sbr	r0,0x11

8000b5e4 <udi_msc_spc_mode_sense>:


static void udi_msc_spc_mode_sense(bool b_sense10)
{
8000b5e4:	eb cd 40 80 	pushm	r7,lr
8000b5e8:	1a 97       	mov	r7,sp
8000b5ea:	20 3d       	sub	sp,12
8000b5ec:	18 98       	mov	r8,r12
8000b5ee:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
8000b5f2:	31 4a       	mov	r10,20
8000b5f4:	30 0b       	mov	r11,0
8000b5f6:	4c ac       	lddpc	r12,8000b71c <udi_msc_spc_mode_sense+0x138>
8000b5f8:	f0 1f 00 4a 	mcall	8000b720 <udi_msc_spc_mode_sense+0x13c>

	// Initialize process
	if (b_sense10) {
8000b5fc:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000b600:	30 08       	mov	r8,0
8000b602:	f0 09 18 00 	cp.b	r9,r8
8000b606:	c0 e0       	breq	8000b622 <udi_msc_spc_mode_sense+0x3e>
		request_lgt = udi_msc_cbw.CDB[8];
8000b608:	4c 78       	lddpc	r8,8000b724 <udi_msc_spc_mode_sense+0x140>
8000b60a:	f1 38 00 17 	ld.ub	r8,r8[23]
8000b60e:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s10.sense_data;
8000b612:	4c 38       	lddpc	r8,8000b71c <udi_msc_spc_mode_sense+0x138>
8000b614:	2f 88       	sub	r8,-8
8000b616:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
8000b61a:	30 88       	mov	r8,8
8000b61c:	ef 68 ff f8 	st.b	r7[-8],r8
8000b620:	c0 d8       	rjmp	8000b63a <udi_msc_spc_mode_sense+0x56>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
8000b622:	4c 18       	lddpc	r8,8000b724 <udi_msc_spc_mode_sense+0x140>
8000b624:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b628:	ef 68 ff fa 	st.b	r7[-6],r8
		ptr_mode = &sense.s6.sense_data;
8000b62c:	4b c8       	lddpc	r8,8000b71c <udi_msc_spc_mode_sense+0x138>
8000b62e:	2f c8       	sub	r8,-4
8000b630:	ef 48 ff fc 	st.w	r7[-4],r8
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
8000b634:	30 48       	mov	r8,4
8000b636:	ef 68 ff f8 	st.b	r7[-8],r8
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
8000b63a:	4b b8       	lddpc	r8,8000b724 <udi_msc_spc_mode_sense+0x140>
8000b63c:	f1 38 00 11 	ld.ub	r8,r8[17]
8000b640:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000b644:	ef 68 ff f9 	st.b	r7[-7],r8
	if ((SCSI_MS_MODE_INFEXP == mode)
8000b648:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000b64c:	31 c8       	mov	r8,28
8000b64e:	f0 09 18 00 	cp.b	r9,r8
8000b652:	c0 70       	breq	8000b660 <udi_msc_spc_mode_sense+0x7c>
8000b654:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000b658:	33 f8       	mov	r8,63
8000b65a:	f0 09 18 00 	cp.b	r9,r8
8000b65e:	c1 21       	brne	8000b682 <udi_msc_spc_mode_sense+0x9e>
			|| (SCSI_MS_MODE_ALL == mode)) {
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
8000b660:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b664:	31 c8       	mov	r8,28
8000b666:	b2 88       	st.b	r9[0x0],r8
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
8000b668:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b66c:	30 a8       	mov	r8,10
8000b66e:	b2 98       	st.b	r9[0x1],r8
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
8000b670:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b674:	30 58       	mov	r8,5
8000b676:	b2 b8       	st.b	r9[0x3],r8
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
8000b678:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b67c:	2f 48       	sub	r8,-12
8000b67e:	ef 68 ff f8 	st.b	r7[-8],r8
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
8000b682:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000b686:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b68a:	f0 09 18 00 	cp.b	r9,r8
8000b68e:	e0 88 00 06 	brls	8000b69a <udi_msc_spc_mode_sense+0xb6>
		request_lgt = data_sense_lgt;
8000b692:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b696:	ef 68 ff fa 	st.b	r7[-6],r8
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
8000b69a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000b69e:	e0 6b 00 80 	mov	r11,128
8000b6a2:	10 9c       	mov	r12,r8
8000b6a4:	f0 1f 00 21 	mcall	8000b728 <udi_msc_spc_mode_sense+0x144>
8000b6a8:	18 98       	mov	r8,r12
8000b6aa:	ec 18 00 01 	eorl	r8,0x1
8000b6ae:	5c 58       	castu.b	r8
8000b6b0:	c3 21       	brne	8000b714 <udi_msc_spc_mode_sense+0x130>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
8000b6b2:	49 d8       	lddpc	r8,8000b724 <udi_msc_spc_mode_sense+0x140>
8000b6b4:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b6b8:	10 9c       	mov	r12,r8
8000b6ba:	f0 1f 00 1d 	mcall	8000b72c <udi_msc_spc_mode_sense+0x148>
8000b6be:	18 98       	mov	r8,r12
8000b6c0:	58 08       	cp.w	r8,0
8000b6c2:	c0 40       	breq	8000b6ca <udi_msc_spc_mode_sense+0xe6>
8000b6c4:	e0 68 00 80 	mov	r8,128
8000b6c8:	c0 28       	rjmp	8000b6cc <udi_msc_spc_mode_sense+0xe8>
8000b6ca:	30 08       	mov	r8,0
8000b6cc:	ef 68 ff fb 	st.b	r7[-5],r8

	if (b_sense10) {
8000b6d0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000b6d4:	30 08       	mov	r8,0
8000b6d6:	f0 09 18 00 	cp.b	r9,r8
8000b6da:	c0 c0       	breq	8000b6f2 <udi_msc_spc_mode_sense+0x10e>
		sense.s10.header.mode_data_length =
8000b6dc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b6e0:	20 28       	sub	r8,2
8000b6e2:	5c 88       	casts.h	r8
8000b6e4:	48 e9       	lddpc	r9,8000b71c <udi_msc_spc_mode_sense+0x138>
8000b6e6:	b2 08       	st.h	r9[0x0],r8
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
8000b6e8:	48 d9       	lddpc	r9,8000b71c <udi_msc_spc_mode_sense+0x138>
8000b6ea:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000b6ee:	b2 b8       	st.b	r9[0x3],r8
8000b6f0:	c0 b8       	rjmp	8000b706 <udi_msc_spc_mode_sense+0x122>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
8000b6f2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b6f6:	20 18       	sub	r8,1
8000b6f8:	5c 58       	castu.b	r8
8000b6fa:	48 99       	lddpc	r9,8000b71c <udi_msc_spc_mode_sense+0x138>
8000b6fc:	b2 88       	st.b	r9[0x0],r8
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
8000b6fe:	48 89       	lddpc	r9,8000b71c <udi_msc_spc_mode_sense+0x138>
8000b700:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000b704:	b2 a8       	st.b	r9[0x2],r8
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
8000b706:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000b70a:	10 9b       	mov	r11,r8
8000b70c:	48 4c       	lddpc	r12,8000b71c <udi_msc_spc_mode_sense+0x138>
8000b70e:	f0 1f 00 09 	mcall	8000b730 <udi_msc_spc_mode_sense+0x14c>
8000b712:	c0 28       	rjmp	8000b716 <udi_msc_spc_mode_sense+0x132>
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
		return;
8000b714:	d7 03       	nop
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
}
8000b716:	2f dd       	sub	sp,-12
8000b718:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b71c:	00 00       	add	r0,r0
8000b71e:	06 e4       	st.h	--r3,r4
8000b720:	80 00       	ld.sh	r0,r0[0x0]
8000b722:	d2 7a       	popm	r0-r9,r12
8000b724:	00 00       	add	r0,r0
8000b726:	06 98       	mov	r8,r3
8000b728:	80 00       	ld.sh	r0,r0[0x0]
8000b72a:	b0 b4       	st.b	r8[0x3],r4
8000b72c:	80 00       	ld.sh	r0,r0[0x0]
8000b72e:	aa d4       	st.b	r5[0x5],r4
8000b730:	80 00       	ld.sh	r0,r0[0x0]
8000b732:	b1 14       	ld.d	r4,--r8

8000b734 <udi_msc_sbc_read_capacity>:


static void udi_msc_sbc_read_capacity(void)
{
8000b734:	eb cd 40 80 	pushm	r7,lr
8000b738:	1a 97       	mov	r7,sp
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
8000b73a:	e0 6b 00 80 	mov	r11,128
8000b73e:	30 8c       	mov	r12,8
8000b740:	f0 1f 00 1b 	mcall	8000b7ac <udi_msc_sbc_read_capacity+0x78>
8000b744:	18 98       	mov	r8,r12
8000b746:	ec 18 00 01 	eorl	r8,0x1
8000b74a:	5c 58       	castu.b	r8
8000b74c:	c2 d1       	brne	8000b7a6 <udi_msc_sbc_read_capacity+0x72>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
8000b74e:	49 98       	lddpc	r8,8000b7b0 <udi_msc_sbc_read_capacity+0x7c>
8000b750:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b754:	49 8b       	lddpc	r11,8000b7b4 <udi_msc_sbc_read_capacity+0x80>
8000b756:	10 9c       	mov	r12,r8
8000b758:	f0 1f 00 18 	mcall	8000b7b8 <udi_msc_sbc_read_capacity+0x84>
8000b75c:	18 98       	mov	r8,r12
					&udi_msc_capacity.max_lba)) {
8000b75e:	58 28       	cp.w	r8,2
8000b760:	c1 80       	breq	8000b790 <udi_msc_sbc_read_capacity+0x5c>
8000b762:	58 38       	cp.w	r8,3
8000b764:	c1 10       	breq	8000b786 <udi_msc_sbc_read_capacity+0x52>
8000b766:	58 08       	cp.w	r8,0
8000b768:	c1 91       	brne	8000b79a <udi_msc_sbc_read_capacity+0x66>
		udi_msc_csw_process();
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
8000b76a:	49 38       	lddpc	r8,8000b7b4 <udi_msc_sbc_read_capacity+0x80>
8000b76c:	e0 69 02 00 	mov	r9,512
8000b770:	91 19       	st.w	r8[0x4],r9
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
8000b772:	49 18       	lddpc	r8,8000b7b4 <udi_msc_sbc_read_capacity+0x80>
8000b774:	70 09       	ld.w	r9,r8[0x0]
8000b776:	49 08       	lddpc	r8,8000b7b4 <udi_msc_sbc_read_capacity+0x80>
8000b778:	91 09       	st.w	r8[0x0],r9
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
8000b77a:	48 f8       	lddpc	r8,8000b7b4 <udi_msc_sbc_read_capacity+0x80>
8000b77c:	30 8b       	mov	r11,8
8000b77e:	10 9c       	mov	r12,r8
8000b780:	f0 1f 00 0f 	mcall	8000b7bc <udi_msc_sbc_read_capacity+0x88>
8000b784:	c1 28       	rjmp	8000b7a8 <udi_msc_sbc_read_capacity+0x74>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000b786:	f0 1f 00 0f 	mcall	8000b7c0 <udi_msc_sbc_read_capacity+0x8c>
		udi_msc_csw_process();
8000b78a:	f0 1f 00 0f 	mcall	8000b7c4 <udi_msc_sbc_read_capacity+0x90>
		return;
8000b78e:	c0 d8       	rjmp	8000b7a8 <udi_msc_sbc_read_capacity+0x74>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000b790:	f0 1f 00 0e 	mcall	8000b7c8 <udi_msc_sbc_read_capacity+0x94>
		udi_msc_csw_process();
8000b794:	f0 1f 00 0c 	mcall	8000b7c4 <udi_msc_sbc_read_capacity+0x90>
		return;
8000b798:	c0 88       	rjmp	8000b7a8 <udi_msc_sbc_read_capacity+0x74>
	default:
		udi_msc_sense_fail_hardware();
8000b79a:	f0 1f 00 0d 	mcall	8000b7cc <udi_msc_sbc_read_capacity+0x98>
		udi_msc_csw_process();
8000b79e:	f0 1f 00 0a 	mcall	8000b7c4 <udi_msc_sbc_read_capacity+0x90>
		return;
8000b7a2:	d7 03       	nop
8000b7a4:	c0 28       	rjmp	8000b7a8 <udi_msc_sbc_read_capacity+0x74>
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
					USB_CBW_DIRECTION_IN))
		return;
8000b7a6:	d7 03       	nop
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
			sizeof(udi_msc_capacity));
}
8000b7a8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b7ac:	80 00       	ld.sh	r0,r0[0x0]
8000b7ae:	b0 b4       	st.b	r8[0x3],r4
8000b7b0:	00 00       	add	r0,r0
8000b7b2:	06 98       	mov	r8,r3
8000b7b4:	00 00       	add	r0,r0
8000b7b6:	06 dc       	st.w	--r3,r12
8000b7b8:	80 00       	ld.sh	r0,r0[0x0]
8000b7ba:	aa 80       	st.b	r5[0x0],r0
8000b7bc:	80 00       	ld.sh	r0,r0[0x0]
8000b7be:	b1 14       	ld.d	r4,--r8
8000b7c0:	80 00       	ld.sh	r0,r0[0x0]
8000b7c2:	b3 60       	lsl	r0,0x12
8000b7c4:	80 00       	ld.sh	r0,r0[0x0]
8000b7c6:	b1 b0       	sbr	r0,0x11
8000b7c8:	80 00       	ld.sh	r0,r0[0x0]
8000b7ca:	b3 44       	asr	r4,0x12
8000b7cc:	80 00       	ld.sh	r0,r0[0x0]
8000b7ce:	b3 7c       	lsl	r12,0x13

8000b7d0 <udi_msc_sbc_trans>:


static void udi_msc_sbc_trans(bool b_read)
{
8000b7d0:	eb cd 40 80 	pushm	r7,lr
8000b7d4:	1a 97       	mov	r7,sp
8000b7d6:	20 2d       	sub	sp,8
8000b7d8:	18 98       	mov	r8,r12
8000b7da:	ef 68 ff f8 	st.b	r7[-8],r8
	uint32_t trans_size;

	if (!b_read) {
8000b7de:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b7e2:	ec 18 00 01 	eorl	r8,0x1
8000b7e6:	5c 58       	castu.b	r8
8000b7e8:	c0 f0       	breq	8000b806 <udi_msc_sbc_trans+0x36>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
8000b7ea:	4a e8       	lddpc	r8,8000b8a0 <udi_msc_sbc_trans+0xd0>
8000b7ec:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b7f0:	10 9c       	mov	r12,r8
8000b7f2:	f0 1f 00 2d 	mcall	8000b8a4 <udi_msc_sbc_trans+0xd4>
8000b7f6:	18 98       	mov	r8,r12
8000b7f8:	58 08       	cp.w	r8,0
8000b7fa:	c0 60       	breq	8000b806 <udi_msc_sbc_trans+0x36>
			// Write not authorized
			udi_msc_sense_fail_protected();
8000b7fc:	f0 1f 00 2b 	mcall	8000b8a8 <udi_msc_sbc_trans+0xd8>
			udi_msc_csw_process();
8000b800:	f0 1f 00 2b 	mcall	8000b8ac <udi_msc_sbc_trans+0xdc>
			return;
8000b804:	c4 a8       	rjmp	8000b898 <udi_msc_sbc_trans+0xc8>
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
8000b806:	4a b9       	lddpc	r9,8000b8b0 <udi_msc_sbc_trans+0xe0>
8000b808:	4a 68       	lddpc	r8,8000b8a0 <udi_msc_sbc_trans+0xd0>
8000b80a:	f1 38 00 11 	ld.ub	r8,r8[17]
8000b80e:	b2 88       	st.b	r9[0x0],r8
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
8000b810:	4a 88       	lddpc	r8,8000b8b0 <udi_msc_sbc_trans+0xe0>
8000b812:	f0 c9 ff ff 	sub	r9,r8,-1
8000b816:	4a 38       	lddpc	r8,8000b8a0 <udi_msc_sbc_trans+0xd0>
8000b818:	f1 38 00 12 	ld.ub	r8,r8[18]
8000b81c:	b2 88       	st.b	r9[0x0],r8
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
8000b81e:	4a 58       	lddpc	r8,8000b8b0 <udi_msc_sbc_trans+0xe0>
8000b820:	f0 c9 ff fe 	sub	r9,r8,-2
8000b824:	49 f8       	lddpc	r8,8000b8a0 <udi_msc_sbc_trans+0xd0>
8000b826:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b82a:	b2 88       	st.b	r9[0x0],r8
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
8000b82c:	4a 18       	lddpc	r8,8000b8b0 <udi_msc_sbc_trans+0xe0>
8000b82e:	f0 c9 ff fd 	sub	r9,r8,-3
8000b832:	49 c8       	lddpc	r8,8000b8a0 <udi_msc_sbc_trans+0xd0>
8000b834:	f1 38 00 14 	ld.ub	r8,r8[20]
8000b838:	b2 88       	st.b	r9[0x0],r8
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
8000b83a:	49 f9       	lddpc	r9,8000b8b4 <udi_msc_sbc_trans+0xe4>
8000b83c:	49 98       	lddpc	r8,8000b8a0 <udi_msc_sbc_trans+0xd0>
8000b83e:	f1 38 00 16 	ld.ub	r8,r8[22]
8000b842:	b2 88       	st.b	r9[0x0],r8
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
8000b844:	49 c8       	lddpc	r8,8000b8b4 <udi_msc_sbc_trans+0xe4>
8000b846:	f0 c9 ff ff 	sub	r9,r8,-1
8000b84a:	49 68       	lddpc	r8,8000b8a0 <udi_msc_sbc_trans+0xd0>
8000b84c:	f1 38 00 17 	ld.ub	r8,r8[23]
8000b850:	b2 88       	st.b	r9[0x0],r8

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
8000b852:	49 98       	lddpc	r8,8000b8b4 <udi_msc_sbc_trans+0xe4>
8000b854:	90 08       	ld.sh	r8,r8[0x0]
8000b856:	5c 78       	castu.h	r8
8000b858:	a9 78       	lsl	r8,0x9
8000b85a:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udi_msc_cbw_validate(trans_size,
8000b85e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000b862:	30 08       	mov	r8,0
8000b864:	f0 09 18 00 	cp.b	r9,r8
8000b868:	c0 40       	breq	8000b870 <udi_msc_sbc_trans+0xa0>
8000b86a:	e0 68 00 80 	mov	r8,128
8000b86e:	c0 28       	rjmp	8000b872 <udi_msc_sbc_trans+0xa2>
8000b870:	30 08       	mov	r8,0
8000b872:	10 9b       	mov	r11,r8
8000b874:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b878:	f0 1f 00 10 	mcall	8000b8b8 <udi_msc_sbc_trans+0xe8>
8000b87c:	18 98       	mov	r8,r12
8000b87e:	ec 18 00 01 	eorl	r8,0x1
8000b882:	5c 58       	castu.b	r8
8000b884:	c0 91       	brne	8000b896 <udi_msc_sbc_trans+0xc6>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
8000b886:	48 e9       	lddpc	r9,8000b8bc <udi_msc_sbc_trans+0xec>
8000b888:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000b88c:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_trans_req = true;
8000b88e:	48 d9       	lddpc	r9,8000b8c0 <udi_msc_sbc_trans+0xf0>
8000b890:	30 18       	mov	r8,1
8000b892:	b2 88       	st.b	r9[0x0],r8
8000b894:	c0 28       	rjmp	8000b898 <udi_msc_sbc_trans+0xc8>
	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
	if (!udi_msc_cbw_validate(trans_size,
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;
8000b896:	d7 03       	nop

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
	udi_msc_b_trans_req = true;
	UDI_MSC_NOTIFY_TRANS_EXT();
}
8000b898:	2f ed       	sub	sp,-8
8000b89a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b89e:	00 00       	add	r0,r0
8000b8a0:	00 00       	add	r0,r0
8000b8a2:	06 98       	mov	r8,r3
8000b8a4:	80 00       	ld.sh	r0,r0[0x0]
8000b8a6:	aa d4       	st.b	r5[0x5],r4
8000b8a8:	80 00       	ld.sh	r0,r0[0x0]
8000b8aa:	b3 94       	lsr	r4,0x13
8000b8ac:	80 00       	ld.sh	r0,r0[0x0]
8000b8ae:	b1 b0       	sbr	r0,0x11
8000b8b0:	00 00       	add	r0,r0
8000b8b2:	06 d4       	st.w	--r3,r4
8000b8b4:	00 00       	add	r0,r0
8000b8b6:	06 d8       	st.w	--r3,r8
8000b8b8:	80 00       	ld.sh	r0,r0[0x0]
8000b8ba:	b0 b4       	st.b	r8[0x3],r4
8000b8bc:	00 00       	add	r0,r0
8000b8be:	06 d2       	st.w	--r3,r2
8000b8c0:	00 00       	add	r0,r0
8000b8c2:	06 d1       	st.w	--r3,r1

8000b8c4 <udi_msc_process_trans>:


bool udi_msc_process_trans(void)
{
8000b8c4:	eb cd 40 80 	pushm	r7,lr
8000b8c8:	1a 97       	mov	r7,sp
8000b8ca:	20 1d       	sub	sp,4
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
8000b8cc:	4a 58       	lddpc	r8,8000b960 <udi_msc_process_trans+0x9c>
8000b8ce:	11 88       	ld.ub	r8,r8[0x0]
8000b8d0:	ec 18 00 01 	eorl	r8,0x1
8000b8d4:	5c 58       	castu.b	r8
8000b8d6:	c0 30       	breq	8000b8dc <udi_msc_process_trans+0x18>
		return false;	// No Transfer request to do
8000b8d8:	30 08       	mov	r8,0
8000b8da:	c3 f8       	rjmp	8000b958 <udi_msc_process_trans+0x94>
	udi_msc_b_trans_req = false;
8000b8dc:	4a 19       	lddpc	r9,8000b960 <udi_msc_process_trans+0x9c>
8000b8de:	30 08       	mov	r8,0
8000b8e0:	b2 88       	st.b	r9[0x0],r8

	// Start transfer
	if (udi_msc_b_read) {
8000b8e2:	4a 18       	lddpc	r8,8000b964 <udi_msc_process_trans+0xa0>
8000b8e4:	11 88       	ld.ub	r8,r8[0x0]
8000b8e6:	58 08       	cp.w	r8,0
8000b8e8:	c1 20       	breq	8000b90c <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000b8ea:	4a 08       	lddpc	r8,8000b968 <udi_msc_process_trans+0xa4>
8000b8ec:	90 08       	ld.sh	r8,r8[0x0]
8000b8ee:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b8f2:	49 f8       	lddpc	r8,8000b96c <udi_msc_process_trans+0xa8>
8000b8f4:	70 09       	ld.w	r9,r8[0x0]
8000b8f6:	49 f8       	lddpc	r8,8000b970 <udi_msc_process_trans+0xac>
8000b8f8:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b8fc:	12 9b       	mov	r11,r9
8000b8fe:	10 9c       	mov	r12,r8
8000b900:	f0 1f 00 1d 	mcall	8000b974 <udi_msc_process_trans+0xb0>
8000b904:	18 98       	mov	r8,r12
8000b906:	ef 48 ff fc 	st.w	r7[-4],r8
8000b90a:	c1 18       	rjmp	8000b92c <udi_msc_process_trans+0x68>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
8000b90c:	49 78       	lddpc	r8,8000b968 <udi_msc_process_trans+0xa4>
8000b90e:	90 08       	ld.sh	r8,r8[0x0]
8000b910:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b914:	49 68       	lddpc	r8,8000b96c <udi_msc_process_trans+0xa8>
8000b916:	70 09       	ld.w	r9,r8[0x0]
8000b918:	49 68       	lddpc	r8,8000b970 <udi_msc_process_trans+0xac>
8000b91a:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b91e:	12 9b       	mov	r11,r9
8000b920:	10 9c       	mov	r12,r8
8000b922:	f0 1f 00 16 	mcall	8000b978 <udi_msc_process_trans+0xb4>
8000b926:	18 98       	mov	r8,r12
8000b928:	ef 48 ff fc 	st.w	r7[-4],r8
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
8000b92c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b930:	58 28       	cp.w	r8,2
8000b932:	c0 b0       	breq	8000b948 <udi_msc_process_trans+0x84>
8000b934:	58 38       	cp.w	r8,3
8000b936:	c0 60       	breq	8000b942 <udi_msc_process_trans+0x7e>
8000b938:	58 08       	cp.w	r8,0
8000b93a:	c0 a1       	brne	8000b94e <udi_msc_process_trans+0x8a>
	case CTRL_GOOD:
		udi_msc_sense_pass();
8000b93c:	f0 1f 00 10 	mcall	8000b97c <udi_msc_process_trans+0xb8>
		break;
8000b940:	c0 98       	rjmp	8000b952 <udi_msc_process_trans+0x8e>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
8000b942:	f0 1f 00 10 	mcall	8000b980 <udi_msc_process_trans+0xbc>
		break;
8000b946:	c0 68       	rjmp	8000b952 <udi_msc_process_trans+0x8e>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000b948:	f0 1f 00 0f 	mcall	8000b984 <udi_msc_process_trans+0xc0>
		break;
8000b94c:	c0 38       	rjmp	8000b952 <udi_msc_process_trans+0x8e>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
8000b94e:	f0 1f 00 0f 	mcall	8000b988 <udi_msc_process_trans+0xc4>
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
8000b952:	f0 1f 00 0f 	mcall	8000b98c <udi_msc_process_trans+0xc8>
	return true;
8000b956:	30 18       	mov	r8,1
}
8000b958:	10 9c       	mov	r12,r8
8000b95a:	2f fd       	sub	sp,-4
8000b95c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b960:	00 00       	add	r0,r0
8000b962:	06 d1       	st.w	--r3,r1
8000b964:	00 00       	add	r0,r0
8000b966:	06 d2       	st.w	--r3,r2
8000b968:	00 00       	add	r0,r0
8000b96a:	06 d8       	st.w	--r3,r8
8000b96c:	00 00       	add	r0,r0
8000b96e:	06 d4       	st.w	--r3,r4
8000b970:	00 00       	add	r0,r0
8000b972:	06 98       	mov	r8,r3
8000b974:	80 00       	ld.sh	r0,r0[0x0]
8000b976:	ab 68       	lsl	r8,0xa
8000b978:	80 00       	ld.sh	r0,r0[0x0]
8000b97a:	ab dc       	cbr	r12,0xb
8000b97c:	80 00       	ld.sh	r0,r0[0x0]
8000b97e:	b3 24       	st.d	r9++,r4
8000b980:	80 00       	ld.sh	r0,r0[0x0]
8000b982:	b3 60       	lsl	r0,0x12
8000b984:	80 00       	ld.sh	r0,r0[0x0]
8000b986:	b3 44       	asr	r4,0x12
8000b988:	80 00       	ld.sh	r0,r0[0x0]
8000b98a:	b3 7c       	lsl	r12,0x13
8000b98c:	80 00       	ld.sh	r0,r0[0x0]
8000b98e:	b1 b0       	sbr	r0,0x11

8000b990 <udi_msc_trans_ack>:


static void udi_msc_trans_ack(udd_ep_status_t status, iram_size_t n,
		udd_ep_id_t ep)
{
8000b990:	eb cd 40 80 	pushm	r7,lr
8000b994:	1a 97       	mov	r7,sp
8000b996:	20 3d       	sub	sp,12
8000b998:	ef 4c ff fc 	st.w	r7[-4],r12
8000b99c:	ef 4b ff f8 	st.w	r7[-8],r11
8000b9a0:	14 98       	mov	r8,r10
8000b9a2:	ef 68 ff f4 	st.b	r7[-12],r8
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
8000b9a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b9aa:	58 08       	cp.w	r8,0
8000b9ac:	5f 18       	srne	r8
8000b9ae:	5c 58       	castu.b	r8
8000b9b0:	48 49       	lddpc	r9,8000b9c0 <udi_msc_trans_ack+0x30>
8000b9b2:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_ack_trans = true;
8000b9b4:	48 49       	lddpc	r9,8000b9c4 <udi_msc_trans_ack+0x34>
8000b9b6:	30 18       	mov	r8,1
8000b9b8:	b2 88       	st.b	r9[0x0],r8
}
8000b9ba:	2f dd       	sub	sp,-12
8000b9bc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b9c0:	00 00       	add	r0,r0
8000b9c2:	0b e7       	ld.ub	r7,r5[0x6]
8000b9c4:	00 00       	add	r0,r0
8000b9c6:	00 40       	or	r0,r0

8000b9c8 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
8000b9c8:	eb cd 40 80 	pushm	r7,lr
8000b9cc:	1a 97       	mov	r7,sp
8000b9ce:	20 4d       	sub	sp,16
8000b9d0:	18 98       	mov	r8,r12
8000b9d2:	ef 4b ff f8 	st.w	r7[-8],r11
8000b9d6:	ef 4a ff f4 	st.w	r7[-12],r10
8000b9da:	ef 49 ff f0 	st.w	r7[-16],r9
8000b9de:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!udi_msc_b_ack_trans)
8000b9e2:	4a e8       	lddpc	r8,8000ba98 <udi_msc_trans_block+0xd0>
8000b9e4:	11 88       	ld.ub	r8,r8[0x0]
8000b9e6:	5c 58       	castu.b	r8
8000b9e8:	ec 18 00 01 	eorl	r8,0x1
8000b9ec:	5c 58       	castu.b	r8
8000b9ee:	c0 30       	breq	8000b9f4 <udi_msc_trans_block+0x2c>
		return false;	// No possible, transfer on going
8000b9f0:	30 08       	mov	r8,0
8000b9f2:	c4 f8       	rjmp	8000ba90 <udi_msc_trans_block+0xc8>

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
8000b9f4:	4a 99       	lddpc	r9,8000ba98 <udi_msc_trans_block+0xd0>
8000b9f6:	30 08       	mov	r8,0
8000b9f8:	b2 88       	st.b	r9[0x0],r8
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
8000b9fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b9fe:	58 08       	cp.w	r8,0
8000ba00:	c0 40       	breq	8000ba08 <udi_msc_trans_block+0x40>
8000ba02:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ba06:	c0 28       	rjmp	8000ba0a <udi_msc_trans_block+0x42>
8000ba08:	4a 58       	lddpc	r8,8000ba9c <udi_msc_trans_block+0xd4>
8000ba0a:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000ba0e:	30 09       	mov	r9,0
8000ba10:	f2 0a 18 00 	cp.b	r10,r9
8000ba14:	c0 40       	breq	8000ba1c <udi_msc_trans_block+0x54>
8000ba16:	e0 6c 00 81 	mov	r12,129
8000ba1a:	c0 28       	rjmp	8000ba1e <udi_msc_trans_block+0x56>
8000ba1c:	30 2c       	mov	r12,2
8000ba1e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ba22:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ba26:	30 0b       	mov	r11,0
8000ba28:	f0 1f 00 1e 	mcall	8000baa0 <udi_msc_trans_block+0xd8>
8000ba2c:	18 98       	mov	r8,r12
8000ba2e:	ec 18 00 01 	eorl	r8,0x1
8000ba32:	5c 58       	castu.b	r8
8000ba34:	c0 60       	breq	8000ba40 <udi_msc_trans_block+0x78>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
8000ba36:	49 99       	lddpc	r9,8000ba98 <udi_msc_trans_block+0xd0>
8000ba38:	30 18       	mov	r8,1
8000ba3a:	b2 88       	st.b	r9[0x0],r8
		return false;
8000ba3c:	30 08       	mov	r8,0
8000ba3e:	c2 98       	rjmp	8000ba90 <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
8000ba40:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ba44:	58 08       	cp.w	r8,0
8000ba46:	c1 d1       	brne	8000ba80 <udi_msc_trans_block+0xb8>
		while (!udi_msc_b_ack_trans);
8000ba48:	49 48       	lddpc	r8,8000ba98 <udi_msc_trans_block+0xd0>
8000ba4a:	11 88       	ld.ub	r8,r8[0x0]
8000ba4c:	5c 58       	castu.b	r8
8000ba4e:	ec 18 00 01 	eorl	r8,0x1
8000ba52:	5c 58       	castu.b	r8
8000ba54:	cf a1       	brne	8000ba48 <udi_msc_trans_block+0x80>
		if (udi_msc_b_abort_trans) {
8000ba56:	49 48       	lddpc	r8,8000baa4 <udi_msc_trans_block+0xdc>
8000ba58:	11 88       	ld.ub	r8,r8[0x0]
8000ba5a:	5c 58       	castu.b	r8
8000ba5c:	c0 30       	breq	8000ba62 <udi_msc_trans_block+0x9a>
			return false;
8000ba5e:	30 08       	mov	r8,0
8000ba60:	c1 88       	rjmp	8000ba90 <udi_msc_trans_block+0xc8>
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
8000ba62:	49 28       	lddpc	r8,8000baa8 <udi_msc_trans_block+0xe0>
8000ba64:	70 29       	ld.w	r9,r8[0x8]
8000ba66:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ba6a:	10 19       	sub	r9,r8
8000ba6c:	48 f8       	lddpc	r8,8000baa8 <udi_msc_trans_block+0xe0>
8000ba6e:	91 29       	st.w	r8[0x8],r9
		return (!udi_msc_b_abort_trans);
8000ba70:	48 d8       	lddpc	r8,8000baa4 <udi_msc_trans_block+0xdc>
8000ba72:	11 88       	ld.ub	r8,r8[0x0]
8000ba74:	5c 58       	castu.b	r8
8000ba76:	ec 18 00 01 	eorl	r8,0x1
8000ba7a:	5c 58       	castu.b	r8
8000ba7c:	5c 58       	castu.b	r8
8000ba7e:	c0 98       	rjmp	8000ba90 <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
8000ba80:	48 a8       	lddpc	r8,8000baa8 <udi_msc_trans_block+0xe0>
8000ba82:	70 29       	ld.w	r9,r8[0x8]
8000ba84:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ba88:	10 19       	sub	r9,r8
8000ba8a:	48 88       	lddpc	r8,8000baa8 <udi_msc_trans_block+0xe0>
8000ba8c:	91 29       	st.w	r8[0x8],r9
	return true;
8000ba8e:	30 18       	mov	r8,1
}
8000ba90:	10 9c       	mov	r12,r8
8000ba92:	2f cd       	sub	sp,-16
8000ba94:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ba98:	00 00       	add	r0,r0
8000ba9a:	00 40       	or	r0,r0
8000ba9c:	80 00       	ld.sh	r0,r0[0x0]
8000ba9e:	b9 90       	lsr	r0,0x19
8000baa0:	80 00       	ld.sh	r0,r0[0x0]
8000baa2:	8f 20       	st.w	r7[0x8],r0
8000baa4:	00 00       	add	r0,r0
8000baa6:	0b e7       	ld.ub	r7,r5[0x6]
8000baa8:	00 00       	add	r0,r0
8000baaa:	00 30       	cp.w	r0,r0
8000baac:	36 39       	mov	r9,99
8000baae:	36 39       	mov	r9,99
8000bab0:	36 39       	mov	r9,99
8000bab2:	36 39       	mov	r9,99
8000bab4:	36 39       	mov	r9,99
8000bab6:	36 39       	mov	r9,99
8000bab8:	00 00       	add	r0,r0
	...

8000babc <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
8000babc:	eb cd 40 80 	pushm	r7,lr
8000bac0:	1a 97       	mov	r7,sp
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
8000bac2:	48 38       	lddpc	r8,8000bacc <udc_get_string_serial_name+0x10>
	}
8000bac4:	10 9c       	mov	r12,r8
8000bac6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000baca:	00 00       	add	r0,r0
8000bacc:	80 00       	ld.sh	r0,r0[0x0]
8000bace:	ba ac       	st.b	sp[0x2],r12

8000bad0 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
8000bad0:	eb cd 40 80 	pushm	r7,lr
8000bad4:	1a 97       	mov	r7,sp
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
8000bad6:	48 b8       	lddpc	r8,8000bb00 <udc_get_eof_conf+0x30>
8000bad8:	70 08       	ld.w	r8,r8[0x0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000bada:	70 09       	ld.w	r9,r8[0x0]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000badc:	48 98       	lddpc	r8,8000bb00 <udc_get_eof_conf+0x30>
8000bade:	70 08       	ld.w	r8,r8[0x0]
8000bae0:	70 08       	ld.w	r8,r8[0x0]
8000bae2:	11 aa       	ld.ub	r10,r8[0x2]
8000bae4:	a9 6a       	lsl	r10,0x8
8000bae6:	11 b8       	ld.ub	r8,r8[0x3]
8000bae8:	14 48       	or	r8,r10
8000baea:	5c 88       	casts.h	r8
8000baec:	5c 88       	casts.h	r8
8000baee:	5c c8       	swap.bh	r8
8000baf0:	5c 88       	casts.h	r8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000baf2:	5c 78       	castu.h	r8
8000baf4:	f2 08 00 08 	add	r8,r9,r8
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
8000baf8:	10 9c       	mov	r12,r8
8000bafa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bafe:	00 00       	add	r0,r0
8000bb00:	00 00       	add	r0,r0
8000bb02:	06 fc       	st.b	--r3,r12

8000bb04 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
8000bb04:	eb cd 40 80 	pushm	r7,lr
8000bb08:	1a 97       	mov	r7,sp
8000bb0a:	20 3d       	sub	sp,12
8000bb0c:	ef 4c ff f8 	st.w	r7[-8],r12
8000bb10:	16 98       	mov	r8,r11
8000bb12:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
8000bb16:	f0 1f 00 1d 	mcall	8000bb88 <udc_next_desc_in_iface+0x84>
8000bb1a:	18 98       	mov	r8,r12
8000bb1c:	ef 48 ff fc 	st.w	r7[-4],r8
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000bb20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb24:	11 88       	ld.ub	r8,r8[0x0]
8000bb26:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bb2a:	f2 08 00 08 	add	r8,r9,r8
8000bb2e:	ef 48 ff f8 	st.w	r7[-8],r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000bb32:	c1 c8       	rjmp	8000bb6a <udc_next_desc_in_iface+0x66>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
8000bb34:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb38:	11 99       	ld.ub	r9,r8[0x1]
8000bb3a:	30 48       	mov	r8,4
8000bb3c:	f0 09 18 00 	cp.b	r9,r8
8000bb40:	c1 d0       	breq	8000bb7a <udc_next_desc_in_iface+0x76>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
8000bb42:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb46:	11 98       	ld.ub	r8,r8[0x1]
8000bb48:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000bb4c:	f0 09 18 00 	cp.b	r9,r8
8000bb50:	c0 41       	brne	8000bb58 <udc_next_desc_in_iface+0x54>
			return desc; // Specific descriptor found
8000bb52:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb56:	c1 48       	rjmp	8000bb7e <udc_next_desc_in_iface+0x7a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000bb58:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb5c:	11 88       	ld.ub	r8,r8[0x0]
8000bb5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bb62:	f2 08 00 08 	add	r8,r9,r8
8000bb66:	ef 48 ff f8 	st.w	r7[-8],r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000bb6a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bb6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb72:	10 39       	cp.w	r9,r8
8000bb74:	fe 9b ff e0 	brhi	8000bb34 <udc_next_desc_in_iface+0x30>
8000bb78:	c0 28       	rjmp	8000bb7c <udc_next_desc_in_iface+0x78>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
8000bb7a:	d7 03       	nop
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
8000bb7c:	30 08       	mov	r8,0
}
8000bb7e:	10 9c       	mov	r12,r8
8000bb80:	2f dd       	sub	sp,-12
8000bb82:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb86:	00 00       	add	r0,r0
8000bb88:	80 00       	ld.sh	r0,r0[0x0]
8000bb8a:	ba d0       	st.b	sp[0x5],r0

8000bb8c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
8000bb8c:	eb cd 40 80 	pushm	r7,lr
8000bb90:	1a 97       	mov	r7,sp
8000bb92:	20 3d       	sub	sp,12
8000bb94:	18 99       	mov	r9,r12
8000bb96:	16 98       	mov	r8,r11
8000bb98:	ef 69 ff f8 	st.b	r7[-8],r9
8000bb9c:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
8000bba0:	4a 58       	lddpc	r8,8000bc34 <udc_update_iface_desc+0xa8>
8000bba2:	11 88       	ld.ub	r8,r8[0x0]
8000bba4:	58 08       	cp.w	r8,0
8000bba6:	c0 31       	brne	8000bbac <udc_update_iface_desc+0x20>
		return false;
8000bba8:	30 08       	mov	r8,0
8000bbaa:	c4 18       	rjmp	8000bc2c <udc_update_iface_desc+0xa0>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000bbac:	4a 38       	lddpc	r8,8000bc38 <udc_update_iface_desc+0xac>
8000bbae:	70 08       	ld.w	r8,r8[0x0]
8000bbb0:	70 08       	ld.w	r8,r8[0x0]
8000bbb2:	11 c8       	ld.ub	r8,r8[0x4]
8000bbb4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bbb8:	f0 09 18 00 	cp.b	r9,r8
8000bbbc:	c0 33       	brcs	8000bbc2 <udc_update_iface_desc+0x36>
		return false;
8000bbbe:	30 08       	mov	r8,0
8000bbc0:	c3 68       	rjmp	8000bc2c <udc_update_iface_desc+0xa0>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
8000bbc2:	49 e8       	lddpc	r8,8000bc38 <udc_update_iface_desc+0xac>
8000bbc4:	70 08       	ld.w	r8,r8[0x0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000bbc6:	70 08       	ld.w	r8,r8[0x0]
8000bbc8:	10 99       	mov	r9,r8
8000bbca:	49 d8       	lddpc	r8,8000bc3c <udc_update_iface_desc+0xb0>
8000bbcc:	91 09       	st.w	r8[0x0],r9
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000bbce:	f0 1f 00 1d 	mcall	8000bc40 <udc_update_iface_desc+0xb4>
8000bbd2:	18 98       	mov	r8,r12
8000bbd4:	ef 48 ff fc 	st.w	r7[-4],r8
	while (ptr_end_desc >
8000bbd8:	c2 28       	rjmp	8000bc1c <udc_update_iface_desc+0x90>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000bbda:	49 98       	lddpc	r8,8000bc3c <udc_update_iface_desc+0xb0>
8000bbdc:	70 08       	ld.w	r8,r8[0x0]
8000bbde:	11 99       	ld.ub	r9,r8[0x1]
8000bbe0:	30 48       	mov	r8,4
8000bbe2:	f0 09 18 00 	cp.b	r9,r8
8000bbe6:	c1 31       	brne	8000bc0c <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000bbe8:	49 58       	lddpc	r8,8000bc3c <udc_update_iface_desc+0xb0>
8000bbea:	70 08       	ld.w	r8,r8[0x0]
8000bbec:	11 a8       	ld.ub	r8,r8[0x2]
8000bbee:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bbf2:	f0 09 18 00 	cp.b	r9,r8
8000bbf6:	c0 b1       	brne	8000bc0c <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
8000bbf8:	49 18       	lddpc	r8,8000bc3c <udc_update_iface_desc+0xb0>
8000bbfa:	70 08       	ld.w	r8,r8[0x0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
					(setting_num ==
8000bbfc:	11 b8       	ld.ub	r8,r8[0x3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000bbfe:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000bc02:	f0 09 18 00 	cp.b	r9,r8
8000bc06:	c0 31       	brne	8000bc0c <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
8000bc08:	30 18       	mov	r8,1
8000bc0a:	c1 18       	rjmp	8000bc2c <udc_update_iface_desc+0xa0>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000bc0c:	48 c8       	lddpc	r8,8000bc3c <udc_update_iface_desc+0xb0>
8000bc0e:	70 09       	ld.w	r9,r8[0x0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
8000bc10:	48 b8       	lddpc	r8,8000bc3c <udc_update_iface_desc+0xb0>
8000bc12:	70 08       	ld.w	r8,r8[0x0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000bc14:	11 88       	ld.ub	r8,r8[0x0]
8000bc16:	10 09       	add	r9,r8
8000bc18:	48 98       	lddpc	r8,8000bc3c <udc_update_iface_desc+0xb0>
8000bc1a:	91 09       	st.w	r8[0x0],r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000bc1c:	48 88       	lddpc	r8,8000bc3c <udc_update_iface_desc+0xb0>
8000bc1e:	70 08       	ld.w	r8,r8[0x0]
8000bc20:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bc24:	10 39       	cp.w	r9,r8
8000bc26:	fe 9b ff da 	brhi	8000bbda <udc_update_iface_desc+0x4e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
8000bc2a:	30 08       	mov	r8,0
}
8000bc2c:	10 9c       	mov	r12,r8
8000bc2e:	2f dd       	sub	sp,-12
8000bc30:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc34:	00 00       	add	r0,r0
8000bc36:	06 fa       	st.b	--r3,r10
8000bc38:	00 00       	add	r0,r0
8000bc3a:	06 fc       	st.b	--r3,r12
8000bc3c:	00 00       	add	r0,r0
8000bc3e:	07 00       	ld.w	r0,r3++
8000bc40:	80 00       	ld.sh	r0,r0[0x0]
8000bc42:	ba d0       	st.b	sp[0x5],r0

8000bc44 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
8000bc44:	eb cd 40 80 	pushm	r7,lr
8000bc48:	1a 97       	mov	r7,sp
8000bc4a:	20 3d       	sub	sp,12
8000bc4c:	18 98       	mov	r8,r12
8000bc4e:	ef 68 ff f4 	st.b	r7[-12],r8
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000bc52:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000bc56:	30 0b       	mov	r11,0
8000bc58:	10 9c       	mov	r12,r8
8000bc5a:	f0 1f 00 25 	mcall	8000bcec <udc_iface_disable+0xa8>
8000bc5e:	18 98       	mov	r8,r12
8000bc60:	ec 18 00 01 	eorl	r8,0x1
8000bc64:	5c 58       	castu.b	r8
8000bc66:	c0 30       	breq	8000bc6c <udc_iface_disable+0x28>
		return false;
8000bc68:	30 08       	mov	r8,0
8000bc6a:	c3 d8       	rjmp	8000bce4 <udc_iface_disable+0xa0>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000bc6c:	4a 18       	lddpc	r8,8000bcf0 <udc_iface_disable+0xac>
8000bc6e:	70 08       	ld.w	r8,r8[0x0]
8000bc70:	70 19       	ld.w	r9,r8[0x4]
8000bc72:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000bc76:	a3 68       	lsl	r8,0x2
8000bc78:	f2 08 00 08 	add	r8,r9,r8
8000bc7c:	70 08       	ld.w	r8,r8[0x0]
8000bc7e:	ef 48 ff f8 	st.w	r7[-8],r8

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000bc82:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bc86:	70 38       	ld.w	r8,r8[0xc]
8000bc88:	5d 18       	icall	r8
8000bc8a:	18 98       	mov	r8,r12
8000bc8c:	10 99       	mov	r9,r8
8000bc8e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000bc92:	12 9b       	mov	r11,r9
8000bc94:	10 9c       	mov	r12,r8
8000bc96:	f0 1f 00 16 	mcall	8000bcec <udc_iface_disable+0xa8>
8000bc9a:	18 98       	mov	r8,r12
8000bc9c:	ec 18 00 01 	eorl	r8,0x1
8000bca0:	5c 58       	castu.b	r8
8000bca2:	c0 30       	breq	8000bca8 <udc_iface_disable+0x64>
		return false;
8000bca4:	30 08       	mov	r8,0
8000bca6:	c1 f8       	rjmp	8000bce4 <udc_iface_disable+0xa0>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000bca8:	49 38       	lddpc	r8,8000bcf4 <udc_iface_disable+0xb0>
8000bcaa:	70 08       	ld.w	r8,r8[0x0]
8000bcac:	ef 48 ff fc 	st.w	r7[-4],r8
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000bcb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcb4:	30 5b       	mov	r11,5
8000bcb6:	10 9c       	mov	r12,r8
8000bcb8:	f0 1f 00 10 	mcall	8000bcf8 <udc_iface_disable+0xb4>
8000bcbc:	18 98       	mov	r8,r12
8000bcbe:	ef 48 ff fc 	st.w	r7[-4],r8
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
8000bcc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcc6:	58 08       	cp.w	r8,0
8000bcc8:	c0 71       	brne	8000bcd6 <udc_iface_disable+0x92>
		}
	}
#endif

	// Disable interface
	udi_api->disable();
8000bcca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bcce:	70 18       	ld.w	r8,r8[0x4]
8000bcd0:	5d 18       	icall	r8
	return true;
8000bcd2:	30 18       	mov	r8,1
8000bcd4:	c0 88       	rjmp	8000bce4 <udc_iface_disable+0xa0>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000bcd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcda:	11 a8       	ld.ub	r8,r8[0x2]
8000bcdc:	10 9c       	mov	r12,r8
8000bcde:	f0 1f 00 08 	mcall	8000bcfc <udc_iface_disable+0xb8>
		}
8000bce2:	ce 7b       	rjmp	8000bcb0 <udc_iface_disable+0x6c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
8000bce4:	10 9c       	mov	r12,r8
8000bce6:	2f dd       	sub	sp,-12
8000bce8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bcec:	80 00       	ld.sh	r0,r0[0x0]
8000bcee:	bb 8c       	lsr	r12,0x1a
8000bcf0:	00 00       	add	r0,r0
8000bcf2:	06 fc       	st.b	--r3,r12
8000bcf4:	00 00       	add	r0,r0
8000bcf6:	07 00       	ld.w	r0,r3++
8000bcf8:	80 00       	ld.sh	r0,r0[0x0]
8000bcfa:	bb 04       	ld.d	r4,sp
8000bcfc:	80 00       	ld.sh	r0,r0[0x0]
8000bcfe:	8c 00       	ld.sh	r0,r6[0x0]

8000bd00 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
8000bd00:	eb cd 40 80 	pushm	r7,lr
8000bd04:	1a 97       	mov	r7,sp
8000bd06:	20 3d       	sub	sp,12
8000bd08:	18 99       	mov	r9,r12
8000bd0a:	16 98       	mov	r8,r11
8000bd0c:	ef 69 ff f8 	st.b	r7[-8],r9
8000bd10:	ef 68 ff f4 	st.b	r7[-12],r8
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
8000bd14:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000bd18:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000bd1c:	12 9b       	mov	r11,r9
8000bd1e:	10 9c       	mov	r12,r8
8000bd20:	f0 1f 00 25 	mcall	8000bdb4 <udc_iface_enable+0xb4>
8000bd24:	18 98       	mov	r8,r12
8000bd26:	ec 18 00 01 	eorl	r8,0x1
8000bd2a:	5c 58       	castu.b	r8
8000bd2c:	c0 30       	breq	8000bd32 <udc_iface_enable+0x32>
		return false;
8000bd2e:	30 08       	mov	r8,0
8000bd30:	c3 e8       	rjmp	8000bdac <udc_iface_enable+0xac>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000bd32:	4a 28       	lddpc	r8,8000bdb8 <udc_iface_enable+0xb8>
8000bd34:	70 08       	ld.w	r8,r8[0x0]
8000bd36:	ef 48 ff fc 	st.w	r7[-4],r8
8000bd3a:	c0 28       	rjmp	8000bd3e <udc_iface_enable+0x3e>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
		}
	}
8000bd3c:	d7 03       	nop

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000bd3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd42:	30 5b       	mov	r11,5
8000bd44:	10 9c       	mov	r12,r8
8000bd46:	f0 1f 00 1e 	mcall	8000bdbc <udc_iface_enable+0xbc>
8000bd4a:	18 98       	mov	r8,r12
8000bd4c:	ef 48 ff fc 	st.w	r7[-4],r8
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
8000bd50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd54:	58 08       	cp.w	r8,0
8000bd56:	c0 e1       	brne	8000bd72 <udc_iface_enable+0x72>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000bd58:	49 a8       	lddpc	r8,8000bdc0 <udc_iface_enable+0xc0>
8000bd5a:	70 08       	ld.w	r8,r8[0x0]
8000bd5c:	70 19       	ld.w	r9,r8[0x4]
8000bd5e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000bd62:	a3 68       	lsl	r8,0x2
8000bd64:	f2 08 00 08 	add	r8,r9,r8
8000bd68:	70 08       	ld.w	r8,r8[0x0]
8000bd6a:	70 08       	ld.w	r8,r8[0x0]
8000bd6c:	5d 18       	icall	r8
8000bd6e:	18 98       	mov	r8,r12
8000bd70:	c1 e8       	rjmp	8000bdac <udc_iface_enable+0xac>
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
8000bd72:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd76:	11 c9       	ld.ub	r9,r8[0x4]
8000bd78:	a9 69       	lsl	r9,0x8
8000bd7a:	11 d8       	ld.ub	r8,r8[0x5]
8000bd7c:	12 48       	or	r8,r9
8000bd7e:	5c 88       	casts.h	r8
8000bd80:	5c 88       	casts.h	r8
8000bd82:	5c c8       	swap.bh	r8
8000bd84:	5c 88       	casts.h	r8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000bd86:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
				ep_desc->bmAttributes,
8000bd8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd8e:	11 b8       	ld.ub	r8,r8[0x3]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000bd90:	10 99       	mov	r9,r8
8000bd92:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd96:	11 a8       	ld.ub	r8,r8[0x2]
8000bd98:	12 9b       	mov	r11,r9
8000bd9a:	10 9c       	mov	r12,r8
8000bd9c:	f0 1f 00 0a 	mcall	8000bdc4 <udc_iface_enable+0xc4>
8000bda0:	18 98       	mov	r8,r12
8000bda2:	ec 18 00 01 	eorl	r8,0x1
8000bda6:	5c 58       	castu.b	r8
8000bda8:	cc a0       	breq	8000bd3c <udc_iface_enable+0x3c>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
8000bdaa:	30 08       	mov	r8,0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
8000bdac:	10 9c       	mov	r12,r8
8000bdae:	2f dd       	sub	sp,-12
8000bdb0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bdb4:	80 00       	ld.sh	r0,r0[0x0]
8000bdb6:	bb 8c       	lsr	r12,0x1a
8000bdb8:	00 00       	add	r0,r0
8000bdba:	07 00       	ld.w	r0,r3++
8000bdbc:	80 00       	ld.sh	r0,r0[0x0]
8000bdbe:	bb 04       	ld.d	r4,sp
8000bdc0:	00 00       	add	r0,r0
8000bdc2:	06 fc       	st.b	--r3,r12
8000bdc4:	80 00       	ld.sh	r0,r0[0x0]
8000bdc6:	88 b0       	ld.uh	r0,r4[0x6]

8000bdc8 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
8000bdc8:	eb cd 40 80 	pushm	r7,lr
8000bdcc:	1a 97       	mov	r7,sp
	udd_enable();
8000bdce:	f0 1f 00 03 	mcall	8000bdd8 <udc_start+0x10>
}
8000bdd2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bdd6:	00 00       	add	r0,r0
8000bdd8:	80 00       	ld.sh	r0,r0[0x0]
8000bdda:	85 dc       	st.w	r2[0x34],r12

8000bddc <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
8000bddc:	eb cd 40 80 	pushm	r7,lr
8000bde0:	1a 97       	mov	r7,sp
8000bde2:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000bde4:	49 38       	lddpc	r8,8000be30 <udc_reset+0x54>
8000bde6:	11 88       	ld.ub	r8,r8[0x0]
8000bde8:	58 08       	cp.w	r8,0
8000bdea:	c1 80       	breq	8000be1a <udc_reset+0x3e>
		for (iface_num = 0;
8000bdec:	30 08       	mov	r8,0
8000bdee:	ef 68 ff ff 	st.b	r7[-1],r8
8000bdf2:	c0 b8       	rjmp	8000be08 <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
8000bdf4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bdf8:	10 9c       	mov	r12,r8
8000bdfa:	f0 1f 00 0f 	mcall	8000be34 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000bdfe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be02:	2f f8       	sub	r8,-1
8000be04:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000be08:	48 c8       	lddpc	r8,8000be38 <udc_reset+0x5c>
8000be0a:	70 08       	ld.w	r8,r8[0x0]
8000be0c:	70 08       	ld.w	r8,r8[0x0]
8000be0e:	11 c8       	ld.ub	r8,r8[0x4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000be10:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000be14:	f0 09 18 00 	cp.b	r9,r8
8000be18:	ce e3       	brcs	8000bdf4 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
8000be1a:	48 69       	lddpc	r9,8000be30 <udc_reset+0x54>
8000be1c:	30 08       	mov	r8,0
8000be1e:	b2 88       	st.b	r9[0x0],r8
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
8000be20:	48 79       	lddpc	r9,8000be3c <udc_reset+0x60>
8000be22:	e0 68 01 00 	mov	r8,256
8000be26:	b2 08       	st.h	r9[0x0],r8
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
8000be28:	2f fd       	sub	sp,-4
8000be2a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be2e:	00 00       	add	r0,r0
8000be30:	00 00       	add	r0,r0
8000be32:	06 fa       	st.b	--r3,r10
8000be34:	80 00       	ld.sh	r0,r0[0x0]
8000be36:	bc 44       	st.h	lr[0x8],r4
8000be38:	00 00       	add	r0,r0
8000be3a:	06 fc       	st.b	--r3,r12
8000be3c:	00 00       	add	r0,r0
8000be3e:	06 f8       	st.b	--r3,r8

8000be40 <udc_sof_notify>:

void udc_sof_notify(void)
{
8000be40:	eb cd 40 80 	pushm	r7,lr
8000be44:	1a 97       	mov	r7,sp
8000be46:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000be48:	49 88       	lddpc	r8,8000bea8 <udc_sof_notify+0x68>
8000be4a:	11 88       	ld.ub	r8,r8[0x0]
8000be4c:	58 08       	cp.w	r8,0
8000be4e:	c2 a0       	breq	8000bea2 <udc_sof_notify+0x62>
		for (iface_num = 0;
8000be50:	30 08       	mov	r8,0
8000be52:	ef 68 ff ff 	st.b	r7[-1],r8
8000be56:	c1 d8       	rjmp	8000be90 <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
8000be58:	49 58       	lddpc	r8,8000beac <udc_sof_notify+0x6c>
8000be5a:	70 08       	ld.w	r8,r8[0x0]
8000be5c:	70 19       	ld.w	r9,r8[0x4]
8000be5e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be62:	a3 68       	lsl	r8,0x2
8000be64:	f2 08 00 08 	add	r8,r9,r8
8000be68:	70 08       	ld.w	r8,r8[0x0]
8000be6a:	70 48       	ld.w	r8,r8[0x10]
8000be6c:	58 08       	cp.w	r8,0
8000be6e:	c0 c0       	breq	8000be86 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
8000be70:	48 f8       	lddpc	r8,8000beac <udc_sof_notify+0x6c>
8000be72:	70 08       	ld.w	r8,r8[0x0]
8000be74:	70 19       	ld.w	r9,r8[0x4]
8000be76:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be7a:	a3 68       	lsl	r8,0x2
8000be7c:	f2 08 00 08 	add	r8,r9,r8
8000be80:	70 08       	ld.w	r8,r8[0x0]
8000be82:	70 48       	ld.w	r8,r8[0x10]
8000be84:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000be86:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be8a:	2f f8       	sub	r8,-1
8000be8c:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000be90:	48 78       	lddpc	r8,8000beac <udc_sof_notify+0x6c>
8000be92:	70 08       	ld.w	r8,r8[0x0]
8000be94:	70 08       	ld.w	r8,r8[0x0]
8000be96:	11 c8       	ld.ub	r8,r8[0x4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000be98:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000be9c:	f0 09 18 00 	cp.b	r9,r8
8000bea0:	cd c3       	brcs	8000be58 <udc_sof_notify+0x18>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
8000bea2:	2f fd       	sub	sp,-4
8000bea4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bea8:	00 00       	add	r0,r0
8000beaa:	06 fa       	st.b	--r3,r10
8000beac:	00 00       	add	r0,r0
8000beae:	06 fc       	st.b	--r3,r12

8000beb0 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
8000beb0:	eb cd 40 80 	pushm	r7,lr
8000beb4:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
8000beb6:	48 98       	lddpc	r8,8000bed8 <udc_req_std_dev_get_status+0x28>
8000beb8:	90 39       	ld.sh	r9,r8[0x6]
8000beba:	30 28       	mov	r8,2
8000bebc:	f0 09 19 00 	cp.h	r9,r8
8000bec0:	c0 30       	breq	8000bec6 <udc_req_std_dev_get_status+0x16>
		return false;
8000bec2:	30 08       	mov	r8,0
8000bec4:	c0 78       	rjmp	8000bed2 <udc_req_std_dev_get_status+0x22>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
8000bec6:	48 68       	lddpc	r8,8000bedc <udc_req_std_dev_get_status+0x2c>
8000bec8:	30 2b       	mov	r11,2
8000beca:	10 9c       	mov	r12,r8
8000becc:	f0 1f 00 05 	mcall	8000bee0 <udc_req_std_dev_get_status+0x30>
			sizeof(udc_device_status));
	return true;
8000bed0:	30 18       	mov	r8,1
}
8000bed2:	10 9c       	mov	r12,r8
8000bed4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bed8:	00 00       	add	r0,r0
8000beda:	0b c8       	ld.ub	r8,r5[0x4]
8000bedc:	00 00       	add	r0,r0
8000bede:	06 f8       	st.b	--r3,r8
8000bee0:	80 00       	ld.sh	r0,r0[0x0]
8000bee2:	88 84       	ld.uh	r4,r4[0x0]

8000bee4 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
8000bee4:	eb cd 40 80 	pushm	r7,lr
8000bee8:	1a 97       	mov	r7,sp
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
8000beea:	49 18       	lddpc	r8,8000bf2c <udc_req_std_ep_get_status+0x48>
8000beec:	90 39       	ld.sh	r9,r8[0x6]
8000beee:	30 28       	mov	r8,2
8000bef0:	f0 09 19 00 	cp.h	r9,r8
8000bef4:	c0 30       	breq	8000befa <udc_req_std_ep_get_status+0x16>
		return false;
8000bef6:	30 08       	mov	r8,0
8000bef8:	c1 68       	rjmp	8000bf24 <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000befa:	48 d8       	lddpc	r8,8000bf2c <udc_req_std_ep_get_status+0x48>
8000befc:	90 28       	ld.sh	r8,r8[0x4]
8000befe:	5c 58       	castu.b	r8
8000bf00:	10 9c       	mov	r12,r8
8000bf02:	f0 1f 00 0c 	mcall	8000bf30 <udc_req_std_ep_get_status+0x4c>
8000bf06:	18 98       	mov	r8,r12
8000bf08:	58 08       	cp.w	r8,0
8000bf0a:	c0 40       	breq	8000bf12 <udc_req_std_ep_get_status+0x2e>
8000bf0c:	e0 68 01 00 	mov	r8,256
8000bf10:	c0 28       	rjmp	8000bf14 <udc_req_std_ep_get_status+0x30>
8000bf12:	30 08       	mov	r8,0
8000bf14:	48 89       	lddpc	r9,8000bf34 <udc_req_std_ep_get_status+0x50>
8000bf16:	b2 08       	st.h	r9[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
8000bf18:	48 78       	lddpc	r8,8000bf34 <udc_req_std_ep_get_status+0x50>
8000bf1a:	30 2b       	mov	r11,2
8000bf1c:	10 9c       	mov	r12,r8
8000bf1e:	f0 1f 00 07 	mcall	8000bf38 <udc_req_std_ep_get_status+0x54>
			sizeof(udc_ep_status));
	return true;
8000bf22:	30 18       	mov	r8,1
}
8000bf24:	10 9c       	mov	r12,r8
8000bf26:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf2a:	00 00       	add	r0,r0
8000bf2c:	00 00       	add	r0,r0
8000bf2e:	0b c8       	ld.ub	r8,r5[0x4]
8000bf30:	80 00       	ld.sh	r0,r0[0x0]
8000bf32:	8c 9c       	ld.uh	r12,r6[0x2]
8000bf34:	00 00       	add	r0,r0
8000bf36:	07 06       	ld.w	r6,r3++
8000bf38:	80 00       	ld.sh	r0,r0[0x0]
8000bf3a:	88 84       	ld.uh	r4,r4[0x0]

8000bf3c <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
8000bf3c:	eb cd 40 80 	pushm	r7,lr
8000bf40:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000bf42:	48 d8       	lddpc	r8,8000bf74 <udc_req_std_dev_clear_feature+0x38>
8000bf44:	90 38       	ld.sh	r8,r8[0x6]
8000bf46:	58 08       	cp.w	r8,0
8000bf48:	c0 30       	breq	8000bf4e <udc_req_std_dev_clear_feature+0x12>
		return false;
8000bf4a:	30 08       	mov	r8,0
8000bf4c:	c1 08       	rjmp	8000bf6c <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000bf4e:	48 a8       	lddpc	r8,8000bf74 <udc_req_std_dev_clear_feature+0x38>
8000bf50:	90 19       	ld.sh	r9,r8[0x2]
8000bf52:	30 18       	mov	r8,1
8000bf54:	f0 09 19 00 	cp.h	r9,r8
8000bf58:	c0 91       	brne	8000bf6a <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
8000bf5a:	48 88       	lddpc	r8,8000bf78 <udc_req_std_dev_clear_feature+0x3c>
8000bf5c:	90 08       	ld.sh	r8,r8[0x0]
8000bf5e:	a9 d8       	cbr	r8,0x9
8000bf60:	5c 88       	casts.h	r8
8000bf62:	48 69       	lddpc	r9,8000bf78 <udc_req_std_dev_clear_feature+0x3c>
8000bf64:	b2 08       	st.h	r9[0x0],r8
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
8000bf66:	30 18       	mov	r8,1
8000bf68:	c0 28       	rjmp	8000bf6c <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
8000bf6a:	30 08       	mov	r8,0
}
8000bf6c:	10 9c       	mov	r12,r8
8000bf6e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf72:	00 00       	add	r0,r0
8000bf74:	00 00       	add	r0,r0
8000bf76:	0b c8       	ld.ub	r8,r5[0x4]
8000bf78:	00 00       	add	r0,r0
8000bf7a:	06 f8       	st.b	--r3,r8

8000bf7c <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
8000bf7c:	eb cd 40 80 	pushm	r7,lr
8000bf80:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000bf82:	48 c8       	lddpc	r8,8000bfb0 <udc_req_std_ep_clear_feature+0x34>
8000bf84:	90 38       	ld.sh	r8,r8[0x6]
8000bf86:	58 08       	cp.w	r8,0
8000bf88:	c0 30       	breq	8000bf8e <udc_req_std_ep_clear_feature+0x12>
		return false;
8000bf8a:	30 08       	mov	r8,0
8000bf8c:	c0 e8       	rjmp	8000bfa8 <udc_req_std_ep_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000bf8e:	48 98       	lddpc	r8,8000bfb0 <udc_req_std_ep_clear_feature+0x34>
8000bf90:	90 18       	ld.sh	r8,r8[0x2]
8000bf92:	58 08       	cp.w	r8,0
8000bf94:	c0 91       	brne	8000bfa6 <udc_req_std_ep_clear_feature+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000bf96:	48 78       	lddpc	r8,8000bfb0 <udc_req_std_ep_clear_feature+0x34>
8000bf98:	90 28       	ld.sh	r8,r8[0x4]
8000bf9a:	5c 58       	castu.b	r8
8000bf9c:	10 9c       	mov	r12,r8
8000bf9e:	f0 1f 00 06 	mcall	8000bfb4 <udc_req_std_ep_clear_feature+0x38>
8000bfa2:	18 98       	mov	r8,r12
8000bfa4:	c0 28       	rjmp	8000bfa8 <udc_req_std_ep_clear_feature+0x2c>
	}
	return false;
8000bfa6:	30 08       	mov	r8,0
}
8000bfa8:	10 9c       	mov	r12,r8
8000bfaa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bfae:	00 00       	add	r0,r0
8000bfb0:	00 00       	add	r0,r0
8000bfb2:	0b c8       	ld.ub	r8,r5[0x4]
8000bfb4:	80 00       	ld.sh	r0,r0[0x0]
8000bfb6:	8d e0       	st.w	r6[0x38],r0

8000bfb8 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
8000bfb8:	eb cd 40 80 	pushm	r7,lr
8000bfbc:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000bfbe:	4a 78       	lddpc	r8,8000c058 <udc_req_std_dev_set_feature+0xa0>
8000bfc0:	90 38       	ld.sh	r8,r8[0x6]
8000bfc2:	58 08       	cp.w	r8,0
8000bfc4:	c0 30       	breq	8000bfca <udc_req_std_dev_set_feature+0x12>
		return false;
8000bfc6:	30 08       	mov	r8,0
8000bfc8:	c4 48       	rjmp	8000c050 <udc_req_std_dev_set_feature+0x98>
	}

	switch (udd_g_ctrlreq.req.wValue) {
8000bfca:	4a 48       	lddpc	r8,8000c058 <udc_req_std_dev_set_feature+0xa0>
8000bfcc:	90 18       	ld.sh	r8,r8[0x2]
8000bfce:	5c 78       	castu.h	r8
8000bfd0:	58 18       	cp.w	r8,1
8000bfd2:	c0 40       	breq	8000bfda <udc_req_std_dev_set_feature+0x22>
8000bfd4:	58 28       	cp.w	r8,2
8000bfd6:	c0 40       	breq	8000bfde <udc_req_std_dev_set_feature+0x26>
8000bfd8:	c3 b8       	rjmp	8000c04e <udc_req_std_dev_set_feature+0x96>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
8000bfda:	30 08       	mov	r8,0
8000bfdc:	c3 a8       	rjmp	8000c050 <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
8000bfde:	f0 1f 00 20 	mcall	8000c05c <udc_req_std_dev_set_feature+0xa4>
8000bfe2:	18 98       	mov	r8,r12
8000bfe4:	ec 18 00 01 	eorl	r8,0x1
8000bfe8:	5c 58       	castu.b	r8
8000bfea:	c2 f1       	brne	8000c048 <udc_req_std_dev_set_feature+0x90>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
8000bfec:	49 b8       	lddpc	r8,8000c058 <udc_req_std_dev_set_feature+0xa0>
8000bfee:	90 28       	ld.sh	r8,r8[0x4]
8000bff0:	5c 78       	castu.h	r8
8000bff2:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000bff6:	c2 b1       	brne	8000c04c <udc_req_std_dev_set_feature+0x94>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
8000bff8:	f0 1f 00 1a 	mcall	8000c060 <udc_req_std_dev_set_feature+0xa8>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
8000bffc:	49 78       	lddpc	r8,8000c058 <udc_req_std_dev_set_feature+0xa0>
8000bffe:	90 28       	ld.sh	r8,r8[0x4]
8000c000:	5c 78       	castu.h	r8
8000c002:	a9 88       	lsr	r8,0x8
8000c004:	5c 88       	casts.h	r8
8000c006:	5c 78       	castu.h	r8
8000c008:	58 28       	cp.w	r8,2
8000c00a:	c1 00       	breq	8000c02a <udc_req_std_dev_set_feature+0x72>
8000c00c:	e0 89 00 05 	brgt	8000c016 <udc_req_std_dev_set_feature+0x5e>
8000c010:	58 18       	cp.w	r8,1
8000c012:	c0 70       	breq	8000c020 <udc_req_std_dev_set_feature+0x68>
8000c014:	c1 d8       	rjmp	8000c04e <udc_req_std_dev_set_feature+0x96>
8000c016:	58 38       	cp.w	r8,3
8000c018:	c0 e0       	breq	8000c034 <udc_req_std_dev_set_feature+0x7c>
8000c01a:	58 48       	cp.w	r8,4
8000c01c:	c1 10       	breq	8000c03e <udc_req_std_dev_set_feature+0x86>
8000c01e:	c1 88       	rjmp	8000c04e <udc_req_std_dev_set_feature+0x96>
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
8000c020:	48 e8       	lddpc	r8,8000c058 <udc_req_std_dev_set_feature+0xa0>
8000c022:	49 19       	lddpc	r9,8000c064 <udc_req_std_dev_set_feature+0xac>
8000c024:	91 49       	st.w	r8[0x10],r9
			return true;
8000c026:	30 18       	mov	r8,1
8000c028:	c1 48       	rjmp	8000c050 <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
8000c02a:	48 c8       	lddpc	r8,8000c058 <udc_req_std_dev_set_feature+0xa0>
8000c02c:	48 f9       	lddpc	r9,8000c068 <udc_req_std_dev_set_feature+0xb0>
8000c02e:	91 49       	st.w	r8[0x10],r9
			return true;
8000c030:	30 18       	mov	r8,1
8000c032:	c0 f8       	rjmp	8000c050 <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
8000c034:	48 98       	lddpc	r8,8000c058 <udc_req_std_dev_set_feature+0xa0>
8000c036:	48 e9       	lddpc	r9,8000c06c <udc_req_std_dev_set_feature+0xb4>
8000c038:	91 49       	st.w	r8[0x10],r9
			return true;
8000c03a:	30 18       	mov	r8,1
8000c03c:	c0 a8       	rjmp	8000c050 <udc_req_std_dev_set_feature+0x98>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
8000c03e:	48 78       	lddpc	r8,8000c058 <udc_req_std_dev_set_feature+0xa0>
8000c040:	48 c9       	lddpc	r9,8000c070 <udc_req_std_dev_set_feature+0xb8>
8000c042:	91 49       	st.w	r8[0x10],r9
			return true;
8000c044:	30 18       	mov	r8,1
8000c046:	c0 58       	rjmp	8000c050 <udc_req_std_dev_set_feature+0x98>
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
			break;
8000c048:	d7 03       	nop
8000c04a:	c0 28       	rjmp	8000c04e <udc_req_std_dev_set_feature+0x96>
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
			break;
8000c04c:	d7 03       	nop
		break;
#endif
	default:
		break;
	}
	return false;
8000c04e:	30 08       	mov	r8,0
}
8000c050:	10 9c       	mov	r12,r8
8000c052:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c056:	00 00       	add	r0,r0
8000c058:	00 00       	add	r0,r0
8000c05a:	0b c8       	ld.ub	r8,r5[0x4]
8000c05c:	80 00       	ld.sh	r0,r0[0x0]
8000c05e:	87 e8       	st.w	r3[0x38],r8
8000c060:	80 00       	ld.sh	r0,r0[0x0]
8000c062:	bd dc       	cbr	r12,0x1d
8000c064:	80 00       	ld.sh	r0,r0[0x0]
8000c066:	91 a4       	st.w	r8[0x28],r4
8000c068:	80 00       	ld.sh	r0,r0[0x0]
8000c06a:	91 ce       	st.w	r8[0x30],lr
8000c06c:	80 00       	ld.sh	r0,r0[0x0]
8000c06e:	91 f8       	st.w	r8[0x3c],r8
8000c070:	80 00       	ld.sh	r0,r0[0x0]
8000c072:	92 14       	ld.sh	r4,r9[0x2]

8000c074 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
8000c074:	eb cd 40 80 	pushm	r7,lr
8000c078:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000c07a:	48 f8       	lddpc	r8,8000c0b4 <udc_req_std_ep_set_feature+0x40>
8000c07c:	90 38       	ld.sh	r8,r8[0x6]
8000c07e:	58 08       	cp.w	r8,0
8000c080:	c0 30       	breq	8000c086 <udc_req_std_ep_set_feature+0x12>
		return false;
8000c082:	30 08       	mov	r8,0
8000c084:	c1 48       	rjmp	8000c0ac <udc_req_std_ep_set_feature+0x38>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000c086:	48 c8       	lddpc	r8,8000c0b4 <udc_req_std_ep_set_feature+0x40>
8000c088:	90 18       	ld.sh	r8,r8[0x2]
8000c08a:	58 08       	cp.w	r8,0
8000c08c:	c0 f1       	brne	8000c0aa <udc_req_std_ep_set_feature+0x36>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
8000c08e:	48 a8       	lddpc	r8,8000c0b4 <udc_req_std_ep_set_feature+0x40>
8000c090:	90 28       	ld.sh	r8,r8[0x4]
8000c092:	5c 58       	castu.b	r8
8000c094:	10 9c       	mov	r12,r8
8000c096:	f0 1f 00 09 	mcall	8000c0b8 <udc_req_std_ep_set_feature+0x44>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000c09a:	48 78       	lddpc	r8,8000c0b4 <udc_req_std_ep_set_feature+0x40>
8000c09c:	90 28       	ld.sh	r8,r8[0x4]
8000c09e:	5c 58       	castu.b	r8
8000c0a0:	10 9c       	mov	r12,r8
8000c0a2:	f0 1f 00 07 	mcall	8000c0bc <udc_req_std_ep_set_feature+0x48>
8000c0a6:	18 98       	mov	r8,r12
8000c0a8:	c0 28       	rjmp	8000c0ac <udc_req_std_ep_set_feature+0x38>
	}
	return false;
8000c0aa:	30 08       	mov	r8,0
}
8000c0ac:	10 9c       	mov	r12,r8
8000c0ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0b2:	00 00       	add	r0,r0
8000c0b4:	00 00       	add	r0,r0
8000c0b6:	0b c8       	ld.ub	r8,r5[0x4]
8000c0b8:	80 00       	ld.sh	r0,r0[0x0]
8000c0ba:	90 44       	ld.sh	r4,r8[0x8]
8000c0bc:	80 00       	ld.sh	r0,r0[0x0]
8000c0be:	8c cc       	ld.uh	r12,r6[0x8]

8000c0c0 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
8000c0c0:	eb cd 40 80 	pushm	r7,lr
8000c0c4:	1a 97       	mov	r7,sp
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
8000c0c6:	48 68       	lddpc	r8,8000c0dc <udc_valid_address+0x1c>
8000c0c8:	90 18       	ld.sh	r8,r8[0x2]
8000c0ca:	5c 58       	castu.b	r8
8000c0cc:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000c0d0:	10 9c       	mov	r12,r8
8000c0d2:	f0 1f 00 04 	mcall	8000c0e0 <udc_valid_address+0x20>
}
8000c0d6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0da:	00 00       	add	r0,r0
8000c0dc:	00 00       	add	r0,r0
8000c0de:	0b c8       	ld.ub	r8,r5[0x4]
8000c0e0:	80 00       	ld.sh	r0,r0[0x0]
8000c0e2:	88 04       	ld.sh	r4,r4[0x0]

8000c0e4 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
8000c0e4:	eb cd 40 80 	pushm	r7,lr
8000c0e8:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000c0ea:	48 78       	lddpc	r8,8000c104 <udc_req_std_dev_set_address+0x20>
8000c0ec:	90 38       	ld.sh	r8,r8[0x6]
8000c0ee:	58 08       	cp.w	r8,0
8000c0f0:	c0 30       	breq	8000c0f6 <udc_req_std_dev_set_address+0x12>
		return false;
8000c0f2:	30 08       	mov	r8,0
8000c0f4:	c0 58       	rjmp	8000c0fe <udc_req_std_dev_set_address+0x1a>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000c0f6:	48 48       	lddpc	r8,8000c104 <udc_req_std_dev_set_address+0x20>
8000c0f8:	48 49       	lddpc	r9,8000c108 <udc_req_std_dev_set_address+0x24>
8000c0fa:	91 49       	st.w	r8[0x10],r9
	return true;
8000c0fc:	30 18       	mov	r8,1
}
8000c0fe:	10 9c       	mov	r12,r8
8000c100:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c104:	00 00       	add	r0,r0
8000c106:	0b c8       	ld.ub	r8,r5[0x4]
8000c108:	80 00       	ld.sh	r0,r0[0x0]
8000c10a:	c0 c0       	breq	8000c122 <udc_req_std_dev_get_str_desc+0x16>

8000c10c <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
8000c10c:	eb cd 40 80 	pushm	r7,lr
8000c110:	1a 97       	mov	r7,sp
8000c112:	20 3d       	sub	sp,12
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
8000c114:	30 08       	mov	r8,0
8000c116:	ef 68 ff ff 	st.b	r7[-1],r8

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
8000c11a:	4b 68       	lddpc	r8,8000c1f0 <udc_req_std_dev_get_str_desc+0xe4>
8000c11c:	90 18       	ld.sh	r8,r8[0x2]
8000c11e:	5c 78       	castu.h	r8
8000c120:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000c124:	58 18       	cp.w	r8,1
8000c126:	c1 00       	breq	8000c146 <udc_req_std_dev_get_str_desc+0x3a>
8000c128:	e0 89 00 05 	brgt	8000c132 <udc_req_std_dev_get_str_desc+0x26>
8000c12c:	58 08       	cp.w	r8,0
8000c12e:	c0 70       	breq	8000c13c <udc_req_std_dev_get_str_desc+0x30>
8000c130:	c2 28       	rjmp	8000c174 <udc_req_std_dev_get_str_desc+0x68>
8000c132:	58 28       	cp.w	r8,2
8000c134:	c1 00       	breq	8000c154 <udc_req_std_dev_get_str_desc+0x48>
8000c136:	58 38       	cp.w	r8,3
8000c138:	c1 50       	breq	8000c162 <udc_req_std_dev_get_str_desc+0x56>
8000c13a:	c1 d8       	rjmp	8000c174 <udc_req_std_dev_get_str_desc+0x68>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
8000c13c:	30 4b       	mov	r11,4
8000c13e:	4a ec       	lddpc	r12,8000c1f4 <udc_req_std_dev_get_str_desc+0xe8>
8000c140:	f0 1f 00 2e 	mcall	8000c1f8 <udc_req_std_dev_get_str_desc+0xec>
				sizeof(udc_string_desc_languageid));
		break;
8000c144:	c1 a8       	rjmp	8000c178 <udc_req_std_dev_get_str_desc+0x6c>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
8000c146:	30 78       	mov	r8,7
8000c148:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_manufacturer_name;
8000c14c:	4a c8       	lddpc	r8,8000c1fc <udc_req_std_dev_get_str_desc+0xf0>
8000c14e:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000c152:	c1 38       	rjmp	8000c178 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
8000c154:	30 78       	mov	r8,7
8000c156:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_product_name;
8000c15a:	4a a8       	lddpc	r8,8000c200 <udc_req_std_dev_get_str_desc+0xf4>
8000c15c:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000c160:	c0 c8       	rjmp	8000c178 <udc_req_std_dev_get_str_desc+0x6c>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
8000c162:	30 c8       	mov	r8,12
8000c164:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_get_string_serial_name();
8000c168:	f0 1f 00 27 	mcall	8000c204 <udc_req_std_dev_get_str_desc+0xf8>
8000c16c:	18 98       	mov	r8,r12
8000c16e:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000c172:	c0 38       	rjmp	8000c178 <udc_req_std_dev_get_str_desc+0x6c>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
8000c174:	30 08       	mov	r8,0
8000c176:	c3 88       	rjmp	8000c1e6 <udc_req_std_dev_get_str_desc+0xda>
	}

	if (str_length) {
8000c178:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c17c:	30 08       	mov	r8,0
8000c17e:	f0 09 18 00 	cp.b	r9,r8
8000c182:	c3 10       	breq	8000c1e4 <udc_req_std_dev_get_str_desc+0xd8>
		for(i = 0; i < str_length; i++) {
8000c184:	30 08       	mov	r8,0
8000c186:	ef 68 ff f7 	st.b	r7[-9],r8
8000c18a:	c1 88       	rjmp	8000c1ba <udc_req_std_dev_get_str_desc+0xae>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
8000c18c:	ef 3b ff f7 	ld.ub	r11,r7[-9]
8000c190:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000c194:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000c198:	f2 08 00 08 	add	r8,r9,r8
8000c19c:	11 88       	ld.ub	r8,r8[0x0]
8000c19e:	5c c8       	swap.bh	r8
8000c1a0:	5c 88       	casts.h	r8
8000c1a2:	10 99       	mov	r9,r8
8000c1a4:	49 9a       	lddpc	r10,8000c208 <udc_req_std_dev_get_str_desc+0xfc>
8000c1a6:	f6 08 15 01 	lsl	r8,r11,0x1
8000c1aa:	f4 08 00 08 	add	r8,r10,r8
8000c1ae:	b0 19       	st.h	r8[0x2],r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
8000c1b0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000c1b4:	2f f8       	sub	r8,-1
8000c1b6:	ef 68 ff f7 	st.b	r7[-9],r8
8000c1ba:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000c1be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c1c2:	f0 09 18 00 	cp.b	r9,r8
8000c1c6:	ce 33       	brcs	8000c18c <udc_req_std_dev_get_str_desc+0x80>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
8000c1c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c1cc:	2f f8       	sub	r8,-1
8000c1ce:	5c 58       	castu.b	r8
8000c1d0:	a1 78       	lsl	r8,0x1
8000c1d2:	5c 58       	castu.b	r8
8000c1d4:	48 d9       	lddpc	r9,8000c208 <udc_req_std_dev_get_str_desc+0xfc>
8000c1d6:	b2 88       	st.b	r9[0x0],r8
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
8000c1d8:	48 c8       	lddpc	r8,8000c208 <udc_req_std_dev_get_str_desc+0xfc>
8000c1da:	11 88       	ld.ub	r8,r8[0x0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
8000c1dc:	10 9b       	mov	r11,r8
8000c1de:	48 bc       	lddpc	r12,8000c208 <udc_req_std_dev_get_str_desc+0xfc>
8000c1e0:	f0 1f 00 06 	mcall	8000c1f8 <udc_req_std_dev_get_str_desc+0xec>
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
8000c1e4:	30 18       	mov	r8,1
}
8000c1e6:	10 9c       	mov	r12,r8
8000c1e8:	2f dd       	sub	sp,-12
8000c1ea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1ee:	00 00       	add	r0,r0
8000c1f0:	00 00       	add	r0,r0
8000c1f2:	0b c8       	ld.ub	r8,r5[0x4]
8000c1f4:	00 00       	add	r0,r0
8000c1f6:	00 f0       	st.b	--r0,r0
8000c1f8:	80 00       	ld.sh	r0,r0[0x0]
8000c1fa:	88 84       	ld.uh	r4,r4[0x0]
8000c1fc:	00 00       	add	r0,r0
8000c1fe:	00 f4       	st.b	--r0,r4
8000c200:	00 00       	add	r0,r0
8000c202:	00 fc       	st.b	--r0,r12
8000c204:	80 00       	ld.sh	r0,r0[0x0]
8000c206:	ba bc       	st.b	sp[0x3],r12
8000c208:	00 00       	add	r0,r0
8000c20a:	01 04       	ld.w	r4,r0++

8000c20c <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
8000c20c:	eb cd 40 80 	pushm	r7,lr
8000c210:	1a 97       	mov	r7,sp
8000c212:	20 1d       	sub	sp,4
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000c214:	fe f8 02 40 	ld.w	r8,pc[576]
8000c218:	90 18       	ld.sh	r8,r8[0x2]
8000c21a:	ef 68 ff ff 	st.b	r7[-1],r8

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
8000c21e:	fe f8 02 36 	ld.w	r8,pc[566]
8000c222:	90 18       	ld.sh	r8,r8[0x2]
8000c224:	5c 78       	castu.h	r8
8000c226:	a9 88       	lsr	r8,0x8
8000c228:	5c 88       	casts.h	r8
8000c22a:	5c 58       	castu.b	r8
8000c22c:	58 38       	cp.w	r8,3
8000c22e:	e0 80 00 f7 	breq	8000c41c <udc_req_std_dev_get_descriptor+0x210>
8000c232:	e0 89 00 07 	brgt	8000c240 <udc_req_std_dev_get_descriptor+0x34>
8000c236:	58 18       	cp.w	r8,1
8000c238:	c0 b0       	breq	8000c24e <udc_req_std_dev_get_descriptor+0x42>
8000c23a:	58 28       	cp.w	r8,2
8000c23c:	c2 70       	breq	8000c28a <udc_req_std_dev_get_descriptor+0x7e>
8000c23e:	cf 88       	rjmp	8000c42e <udc_req_std_dev_get_descriptor+0x222>
8000c240:	58 68       	cp.w	r8,6
8000c242:	e0 80 00 82 	breq	8000c346 <udc_req_std_dev_get_descriptor+0x13a>
8000c246:	58 78       	cp.w	r8,7
8000c248:	e0 80 00 8a 	breq	8000c35c <udc_req_std_dev_get_descriptor+0x150>
8000c24c:	cf 18       	rjmp	8000c42e <udc_req_std_dev_get_descriptor+0x222>
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
8000c24e:	f0 1f 00 83 	mcall	8000c458 <udc_req_std_dev_get_descriptor+0x24c>
8000c252:	18 98       	mov	r8,r12
8000c254:	ec 18 00 01 	eorl	r8,0x1
8000c258:	5c 58       	castu.b	r8
8000c25a:	c0 d0       	breq	8000c274 <udc_req_std_dev_get_descriptor+0x68>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
8000c25c:	fe f8 02 00 	ld.w	r8,pc[512]
8000c260:	70 28       	ld.w	r8,r8[0x8]
8000c262:	11 88       	ld.ub	r8,r8[0x0]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
8000c264:	10 99       	mov	r9,r8
8000c266:	4f e8       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c268:	70 28       	ld.w	r8,r8[0x8]
8000c26a:	12 9b       	mov	r11,r9
8000c26c:	10 9c       	mov	r12,r8
8000c26e:	f0 1f 00 7d 	mcall	8000c460 <udc_req_std_dev_get_descriptor+0x254>
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000c272:	ce 18       	rjmp	8000c434 <udc_req_std_dev_get_descriptor+0x228>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
8000c274:	4f a8       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c276:	70 08       	ld.w	r8,r8[0x0]
8000c278:	11 88       	ld.ub	r8,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
8000c27a:	10 99       	mov	r9,r8
8000c27c:	4f 88       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c27e:	70 08       	ld.w	r8,r8[0x0]
8000c280:	12 9b       	mov	r11,r9
8000c282:	10 9c       	mov	r12,r8
8000c284:	f0 1f 00 77 	mcall	8000c460 <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000c288:	cd 68       	rjmp	8000c434 <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
8000c28a:	f0 1f 00 74 	mcall	8000c458 <udc_req_std_dev_get_descriptor+0x24c>
8000c28e:	18 98       	mov	r8,r12
8000c290:	58 08       	cp.w	r8,0
8000c292:	c2 b0       	breq	8000c2e8 <udc_req_std_dev_get_descriptor+0xdc>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000c294:	4f 28       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c296:	70 28       	ld.w	r8,r8[0x8]
8000c298:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c29c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c2a0:	f0 09 18 00 	cp.b	r9,r8
8000c2a4:	c0 33       	brcs	8000c2aa <udc_req_std_dev_get_descriptor+0x9e>
					bNumConfigurations) {
				return false;
8000c2a6:	30 08       	mov	r8,0
8000c2a8:	cd 28       	rjmp	8000c44c <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000c2aa:	4e d8       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c2ac:	70 49       	ld.w	r9,r8[0x10]
8000c2ae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c2b2:	a3 78       	lsl	r8,0x3
8000c2b4:	f2 08 00 08 	add	r8,r9,r8
8000c2b8:	70 08       	ld.w	r8,r8[0x0]
8000c2ba:	11 a9       	ld.ub	r9,r8[0x2]
8000c2bc:	a9 69       	lsl	r9,0x8
8000c2be:	11 b8       	ld.ub	r8,r8[0x3]
8000c2c0:	12 48       	or	r8,r9
8000c2c2:	5c 88       	casts.h	r8
8000c2c4:	5c 88       	casts.h	r8
8000c2c6:	5c c8       	swap.bh	r8
8000c2c8:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c2ca:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000c2ce:	4e 48       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c2d0:	70 4a       	ld.w	r10,r8[0x10]
8000c2d2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c2d6:	a3 78       	lsl	r8,0x3
8000c2d8:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c2dc:	70 08       	ld.w	r8,r8[0x0]
8000c2de:	12 9b       	mov	r11,r9
8000c2e0:	10 9c       	mov	r12,r8
8000c2e2:	f0 1f 00 60 	mcall	8000c460 <udc_req_std_dev_get_descriptor+0x254>
8000c2e6:	c2 a8       	rjmp	8000c33a <udc_req_std_dev_get_descriptor+0x12e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000c2e8:	4d d8       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c2ea:	70 08       	ld.w	r8,r8[0x0]
8000c2ec:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c2f0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c2f4:	f0 09 18 00 	cp.b	r9,r8
8000c2f8:	c0 33       	brcs	8000c2fe <udc_req_std_dev_get_descriptor+0xf2>
					bNumConfigurations) {
				return false;
8000c2fa:	30 08       	mov	r8,0
8000c2fc:	ca 88       	rjmp	8000c44c <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000c2fe:	4d 88       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c300:	70 19       	ld.w	r9,r8[0x4]
8000c302:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c306:	a3 78       	lsl	r8,0x3
8000c308:	f2 08 00 08 	add	r8,r9,r8
8000c30c:	70 08       	ld.w	r8,r8[0x0]
8000c30e:	11 a9       	ld.ub	r9,r8[0x2]
8000c310:	a9 69       	lsl	r9,0x8
8000c312:	11 b8       	ld.ub	r8,r8[0x3]
8000c314:	12 48       	or	r8,r9
8000c316:	5c 88       	casts.h	r8
8000c318:	5c 88       	casts.h	r8
8000c31a:	5c c8       	swap.bh	r8
8000c31c:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c31e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000c322:	4c f8       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c324:	70 1a       	ld.w	r10,r8[0x4]
8000c326:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c32a:	a3 78       	lsl	r8,0x3
8000c32c:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c330:	70 08       	ld.w	r8,r8[0x0]
8000c332:	12 9b       	mov	r11,r9
8000c334:	10 9c       	mov	r12,r8
8000c336:	f0 1f 00 4b 	mcall	8000c460 <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000c33a:	4c 78       	lddpc	r8,8000c454 <udc_req_std_dev_get_descriptor+0x248>
8000c33c:	70 28       	ld.w	r8,r8[0x8]
8000c33e:	10 99       	mov	r9,r8
8000c340:	30 28       	mov	r8,2
8000c342:	b2 98       	st.b	r9[0x1],r8
				USB_DT_CONFIGURATION;
		break;
8000c344:	c7 88       	rjmp	8000c434 <udc_req_std_dev_get_descriptor+0x228>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
8000c346:	4c 68       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c348:	70 38       	ld.w	r8,r8[0xc]
8000c34a:	11 88       	ld.ub	r8,r8[0x0]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
8000c34c:	10 99       	mov	r9,r8
8000c34e:	4c 48       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c350:	70 38       	ld.w	r8,r8[0xc]
8000c352:	12 9b       	mov	r11,r9
8000c354:	10 9c       	mov	r12,r8
8000c356:	f0 1f 00 43 	mcall	8000c460 <udc_req_std_dev_get_descriptor+0x254>
				udc_config.qualifier->bLength);
		break;
8000c35a:	c6 d8       	rjmp	8000c434 <udc_req_std_dev_get_descriptor+0x228>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
8000c35c:	f0 1f 00 3f 	mcall	8000c458 <udc_req_std_dev_get_descriptor+0x24c>
8000c360:	18 98       	mov	r8,r12
8000c362:	ec 18 00 01 	eorl	r8,0x1
8000c366:	5c 58       	castu.b	r8
8000c368:	c2 b0       	breq	8000c3be <udc_req_std_dev_get_descriptor+0x1b2>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
8000c36a:	4b d8       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c36c:	70 28       	ld.w	r8,r8[0x8]
8000c36e:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c372:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c376:	f0 09 18 00 	cp.b	r9,r8
8000c37a:	c0 33       	brcs	8000c380 <udc_req_std_dev_get_descriptor+0x174>
					bNumConfigurations) {
				return false;
8000c37c:	30 08       	mov	r8,0
8000c37e:	c6 78       	rjmp	8000c44c <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
8000c380:	4b 78       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c382:	70 49       	ld.w	r9,r8[0x10]
8000c384:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c388:	a3 78       	lsl	r8,0x3
8000c38a:	f2 08 00 08 	add	r8,r9,r8
8000c38e:	70 08       	ld.w	r8,r8[0x0]
8000c390:	11 a9       	ld.ub	r9,r8[0x2]
8000c392:	a9 69       	lsl	r9,0x8
8000c394:	11 b8       	ld.ub	r8,r8[0x3]
8000c396:	12 48       	or	r8,r9
8000c398:	5c 88       	casts.h	r8
8000c39a:	5c 88       	casts.h	r8
8000c39c:	5c c8       	swap.bh	r8
8000c39e:	5c 88       	casts.h	r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c3a0:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
8000c3a4:	4a e8       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c3a6:	70 4a       	ld.w	r10,r8[0x10]
8000c3a8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c3ac:	a3 78       	lsl	r8,0x3
8000c3ae:	f4 08 00 08 	add	r8,r10,r8
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c3b2:	70 08       	ld.w	r8,r8[0x0]
8000c3b4:	12 9b       	mov	r11,r9
8000c3b6:	10 9c       	mov	r12,r8
8000c3b8:	f0 1f 00 2a 	mcall	8000c460 <udc_req_std_dev_get_descriptor+0x254>
8000c3bc:	c2 a8       	rjmp	8000c410 <udc_req_std_dev_get_descriptor+0x204>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000c3be:	4a 88       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c3c0:	70 08       	ld.w	r8,r8[0x0]
8000c3c2:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c3c6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c3ca:	f0 09 18 00 	cp.b	r9,r8
8000c3ce:	c0 33       	brcs	8000c3d4 <udc_req_std_dev_get_descriptor+0x1c8>
					bNumConfigurations) {
				return false;
8000c3d0:	30 08       	mov	r8,0
8000c3d2:	c3 d8       	rjmp	8000c44c <udc_req_std_dev_get_descriptor+0x240>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000c3d4:	4a 28       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c3d6:	70 19       	ld.w	r9,r8[0x4]
8000c3d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c3dc:	a3 78       	lsl	r8,0x3
8000c3de:	f2 08 00 08 	add	r8,r9,r8
8000c3e2:	70 08       	ld.w	r8,r8[0x0]
8000c3e4:	11 a9       	ld.ub	r9,r8[0x2]
8000c3e6:	a9 69       	lsl	r9,0x8
8000c3e8:	11 b8       	ld.ub	r8,r8[0x3]
8000c3ea:	12 48       	or	r8,r9
8000c3ec:	5c 88       	casts.h	r8
8000c3ee:	5c 88       	casts.h	r8
8000c3f0:	5c c8       	swap.bh	r8
8000c3f2:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c3f4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000c3f8:	49 98       	lddpc	r8,8000c45c <udc_req_std_dev_get_descriptor+0x250>
8000c3fa:	70 1a       	ld.w	r10,r8[0x4]
8000c3fc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c400:	a3 78       	lsl	r8,0x3
8000c402:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c406:	70 08       	ld.w	r8,r8[0x0]
8000c408:	12 9b       	mov	r11,r9
8000c40a:	10 9c       	mov	r12,r8
8000c40c:	f0 1f 00 15 	mcall	8000c460 <udc_req_std_dev_get_descriptor+0x254>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000c410:	49 18       	lddpc	r8,8000c454 <udc_req_std_dev_get_descriptor+0x248>
8000c412:	70 28       	ld.w	r8,r8[0x8]
8000c414:	10 99       	mov	r9,r8
8000c416:	30 78       	mov	r8,7
8000c418:	b2 98       	st.b	r9[0x1],r8
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
8000c41a:	c0 d8       	rjmp	8000c434 <udc_req_std_dev_get_descriptor+0x228>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
8000c41c:	f0 1f 00 12 	mcall	8000c464 <udc_req_std_dev_get_descriptor+0x258>
8000c420:	18 98       	mov	r8,r12
8000c422:	ec 18 00 01 	eorl	r8,0x1
8000c426:	5c 58       	castu.b	r8
8000c428:	c0 50       	breq	8000c432 <udc_req_std_dev_get_descriptor+0x226>
			return false;
8000c42a:	30 08       	mov	r8,0
8000c42c:	c1 08       	rjmp	8000c44c <udc_req_std_dev_get_descriptor+0x240>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
8000c42e:	30 08       	mov	r8,0
8000c430:	c0 e8       	rjmp	8000c44c <udc_req_std_dev_get_descriptor+0x240>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
8000c432:	d7 03       	nop
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
8000c434:	48 88       	lddpc	r8,8000c454 <udc_req_std_dev_get_descriptor+0x248>
8000c436:	90 39       	ld.sh	r9,r8[0x6]
8000c438:	48 78       	lddpc	r8,8000c454 <udc_req_std_dev_get_descriptor+0x248>
8000c43a:	90 68       	ld.sh	r8,r8[0xc]
8000c43c:	f0 09 19 00 	cp.h	r9,r8
8000c440:	c0 52       	brcc	8000c44a <udc_req_std_dev_get_descriptor+0x23e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000c442:	48 58       	lddpc	r8,8000c454 <udc_req_std_dev_get_descriptor+0x248>
8000c444:	90 38       	ld.sh	r8,r8[0x6]
8000c446:	48 49       	lddpc	r9,8000c454 <udc_req_std_dev_get_descriptor+0x248>
8000c448:	b2 68       	st.h	r9[0xc],r8
	}
	return true;
8000c44a:	30 18       	mov	r8,1
}
8000c44c:	10 9c       	mov	r12,r8
8000c44e:	2f fd       	sub	sp,-4
8000c450:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c454:	00 00       	add	r0,r0
8000c456:	0b c8       	ld.ub	r8,r5[0x4]
8000c458:	80 00       	ld.sh	r0,r0[0x0]
8000c45a:	87 e8       	st.w	r3[0x38],r8
8000c45c:	00 00       	add	r0,r0
8000c45e:	00 dc       	st.w	--r0,r12
8000c460:	80 00       	ld.sh	r0,r0[0x0]
8000c462:	88 84       	ld.uh	r4,r4[0x0]
8000c464:	80 00       	ld.sh	r0,r0[0x0]
8000c466:	c1 0c       	rcall	8000c486 <udc_req_std_dev_get_configuration+0x1e>

8000c468 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
8000c468:	eb cd 40 80 	pushm	r7,lr
8000c46c:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != 1) {
8000c46e:	48 98       	lddpc	r8,8000c490 <udc_req_std_dev_get_configuration+0x28>
8000c470:	90 39       	ld.sh	r9,r8[0x6]
8000c472:	30 18       	mov	r8,1
8000c474:	f0 09 19 00 	cp.h	r9,r8
8000c478:	c0 30       	breq	8000c47e <udc_req_std_dev_get_configuration+0x16>
		return false;
8000c47a:	30 08       	mov	r8,0
8000c47c:	c0 68       	rjmp	8000c488 <udc_req_std_dev_get_configuration+0x20>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
8000c47e:	30 1b       	mov	r11,1
8000c480:	48 5c       	lddpc	r12,8000c494 <udc_req_std_dev_get_configuration+0x2c>
8000c482:	f0 1f 00 06 	mcall	8000c498 <udc_req_std_dev_get_configuration+0x30>
	return true;
8000c486:	30 18       	mov	r8,1
}
8000c488:	10 9c       	mov	r12,r8
8000c48a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c48e:	00 00       	add	r0,r0
8000c490:	00 00       	add	r0,r0
8000c492:	0b c8       	ld.ub	r8,r5[0x4]
8000c494:	00 00       	add	r0,r0
8000c496:	06 fa       	st.b	--r3,r10
8000c498:	80 00       	ld.sh	r0,r0[0x0]
8000c49a:	88 84       	ld.uh	r4,r4[0x0]

8000c49c <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
8000c49c:	eb cd 40 80 	pushm	r7,lr
8000c4a0:	1a 97       	mov	r7,sp
8000c4a2:	20 1d       	sub	sp,4
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
8000c4a4:	4b c8       	lddpc	r8,8000c594 <udc_req_std_dev_set_configuration+0xf8>
8000c4a6:	90 38       	ld.sh	r8,r8[0x6]
8000c4a8:	58 08       	cp.w	r8,0
8000c4aa:	c0 30       	breq	8000c4b0 <udc_req_std_dev_set_configuration+0x14>
		return false;
8000c4ac:	30 08       	mov	r8,0
8000c4ae:	c6 f8       	rjmp	8000c58c <udc_req_std_dev_set_configuration+0xf0>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
8000c4b0:	f0 1f 00 3a 	mcall	8000c598 <udc_req_std_dev_set_configuration+0xfc>
8000c4b4:	18 98       	mov	r8,r12
8000c4b6:	58 08       	cp.w	r8,0
8000c4b8:	c0 31       	brne	8000c4be <udc_req_std_dev_set_configuration+0x22>
		return false;
8000c4ba:	30 08       	mov	r8,0
8000c4bc:	c6 88       	rjmp	8000c58c <udc_req_std_dev_set_configuration+0xf0>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000c4be:	f0 1f 00 38 	mcall	8000c59c <udc_req_std_dev_set_configuration+0x100>
8000c4c2:	18 98       	mov	r8,r12
8000c4c4:	58 08       	cp.w	r8,0
8000c4c6:	c0 f0       	breq	8000c4e4 <udc_req_std_dev_set_configuration+0x48>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000c4c8:	4b 38       	lddpc	r8,8000c594 <udc_req_std_dev_set_configuration+0xf8>
8000c4ca:	90 18       	ld.sh	r8,r8[0x2]
8000c4cc:	5c 78       	castu.h	r8
8000c4ce:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_hs->bNumConfigurations) {
8000c4d2:	4b 48       	lddpc	r8,8000c5a0 <udc_req_std_dev_set_configuration+0x104>
8000c4d4:	70 28       	ld.w	r8,r8[0x8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000c4d6:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c4da:	10 39       	cp.w	r9,r8
8000c4dc:	e0 8a 00 12 	brle	8000c500 <udc_req_std_dev_set_configuration+0x64>
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000c4e0:	30 08       	mov	r8,0
8000c4e2:	c5 58       	rjmp	8000c58c <udc_req_std_dev_set_configuration+0xf0>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000c4e4:	4a c8       	lddpc	r8,8000c594 <udc_req_std_dev_set_configuration+0xf8>
8000c4e6:	90 18       	ld.sh	r8,r8[0x2]
8000c4e8:	5c 78       	castu.h	r8
8000c4ea:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_lsfs->bNumConfigurations) {
8000c4ee:	4a d8       	lddpc	r8,8000c5a0 <udc_req_std_dev_set_configuration+0x104>
8000c4f0:	70 08       	ld.w	r8,r8[0x0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000c4f2:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c4f6:	10 39       	cp.w	r9,r8
8000c4f8:	e0 8a 00 05 	brle	8000c502 <udc_req_std_dev_set_configuration+0x66>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
8000c4fc:	30 08       	mov	r8,0
8000c4fe:	c4 78       	rjmp	8000c58c <udc_req_std_dev_set_configuration+0xf0>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
8000c500:	d7 03       	nop
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
8000c502:	f0 1f 00 29 	mcall	8000c5a4 <udc_req_std_dev_set_configuration+0x108>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
8000c506:	4a 48       	lddpc	r8,8000c594 <udc_req_std_dev_set_configuration+0xf8>
8000c508:	90 18       	ld.sh	r8,r8[0x2]
8000c50a:	5c 58       	castu.b	r8
8000c50c:	4a 79       	lddpc	r9,8000c5a8 <udc_req_std_dev_set_configuration+0x10c>
8000c50e:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
8000c510:	4a 68       	lddpc	r8,8000c5a8 <udc_req_std_dev_set_configuration+0x10c>
8000c512:	11 88       	ld.ub	r8,r8[0x0]
8000c514:	58 08       	cp.w	r8,0
8000c516:	c0 31       	brne	8000c51c <udc_req_std_dev_set_configuration+0x80>
		return true; // Default empty configuration requested
8000c518:	30 18       	mov	r8,1
8000c51a:	c3 98       	rjmp	8000c58c <udc_req_std_dev_set_configuration+0xf0>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
8000c51c:	f0 1f 00 20 	mcall	8000c59c <udc_req_std_dev_set_configuration+0x100>
8000c520:	18 98       	mov	r8,r12
8000c522:	58 08       	cp.w	r8,0
8000c524:	c0 b0       	breq	8000c53a <udc_req_std_dev_set_configuration+0x9e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
8000c526:	49 f8       	lddpc	r8,8000c5a0 <udc_req_std_dev_set_configuration+0x104>
8000c528:	70 49       	ld.w	r9,r8[0x10]
8000c52a:	4a 08       	lddpc	r8,8000c5a8 <udc_req_std_dev_set_configuration+0x10c>
8000c52c:	11 88       	ld.ub	r8,r8[0x0]
8000c52e:	20 18       	sub	r8,1
8000c530:	a3 78       	lsl	r8,0x3
8000c532:	10 09       	add	r9,r8
8000c534:	49 e8       	lddpc	r8,8000c5ac <udc_req_std_dev_set_configuration+0x110>
8000c536:	91 09       	st.w	r8[0x0],r9
8000c538:	c0 a8       	rjmp	8000c54c <udc_req_std_dev_set_configuration+0xb0>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
8000c53a:	49 a8       	lddpc	r8,8000c5a0 <udc_req_std_dev_set_configuration+0x104>
8000c53c:	70 19       	ld.w	r9,r8[0x4]
8000c53e:	49 b8       	lddpc	r8,8000c5a8 <udc_req_std_dev_set_configuration+0x10c>
8000c540:	11 88       	ld.ub	r8,r8[0x0]
8000c542:	20 18       	sub	r8,1
8000c544:	a3 78       	lsl	r8,0x3
8000c546:	10 09       	add	r9,r8
8000c548:	49 98       	lddpc	r8,8000c5ac <udc_req_std_dev_set_configuration+0x110>
8000c54a:	91 09       	st.w	r8[0x0],r9
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000c54c:	30 08       	mov	r8,0
8000c54e:	ef 68 ff ff 	st.b	r7[-1],r8
8000c552:	c1 38       	rjmp	8000c578 <udc_req_std_dev_set_configuration+0xdc>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
8000c554:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c558:	30 0b       	mov	r11,0
8000c55a:	10 9c       	mov	r12,r8
8000c55c:	f0 1f 00 15 	mcall	8000c5b0 <udc_req_std_dev_set_configuration+0x114>
8000c560:	18 98       	mov	r8,r12
8000c562:	ec 18 00 01 	eorl	r8,0x1
8000c566:	5c 58       	castu.b	r8
8000c568:	c0 30       	breq	8000c56e <udc_req_std_dev_set_configuration+0xd2>
			return false;
8000c56a:	30 08       	mov	r8,0
8000c56c:	c1 08       	rjmp	8000c58c <udc_req_std_dev_set_configuration+0xf0>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000c56e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c572:	2f f8       	sub	r8,-1
8000c574:	ef 68 ff ff 	st.b	r7[-1],r8
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000c578:	48 d8       	lddpc	r8,8000c5ac <udc_req_std_dev_set_configuration+0x110>
8000c57a:	70 08       	ld.w	r8,r8[0x0]
8000c57c:	70 08       	ld.w	r8,r8[0x0]
8000c57e:	11 c8       	ld.ub	r8,r8[0x4]
8000c580:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c584:	f0 09 18 00 	cp.b	r9,r8
8000c588:	ce 63       	brcs	8000c554 <udc_req_std_dev_set_configuration+0xb8>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
8000c58a:	30 18       	mov	r8,1
}
8000c58c:	10 9c       	mov	r12,r8
8000c58e:	2f fd       	sub	sp,-4
8000c590:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c594:	00 00       	add	r0,r0
8000c596:	0b c8       	ld.ub	r8,r5[0x4]
8000c598:	80 00       	ld.sh	r0,r0[0x0]
8000c59a:	88 52       	ld.sh	r2,r4[0xa]
8000c59c:	80 00       	ld.sh	r0,r0[0x0]
8000c59e:	87 e8       	st.w	r3[0x38],r8
8000c5a0:	00 00       	add	r0,r0
8000c5a2:	00 dc       	st.w	--r0,r12
8000c5a4:	80 00       	ld.sh	r0,r0[0x0]
8000c5a6:	bd dc       	cbr	r12,0x1d
8000c5a8:	00 00       	add	r0,r0
8000c5aa:	06 fa       	st.b	--r3,r10
8000c5ac:	00 00       	add	r0,r0
8000c5ae:	06 fc       	st.b	--r3,r12
8000c5b0:	80 00       	ld.sh	r0,r0[0x0]
8000c5b2:	bd 00       	ld.d	r0,lr

8000c5b4 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
8000c5b4:	eb cd 40 80 	pushm	r7,lr
8000c5b8:	1a 97       	mov	r7,sp
8000c5ba:	20 2d       	sub	sp,8
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
8000c5bc:	4a 38       	lddpc	r8,8000c648 <udc_req_std_iface_get_setting+0x94>
8000c5be:	90 39       	ld.sh	r9,r8[0x6]
8000c5c0:	30 18       	mov	r8,1
8000c5c2:	f0 09 19 00 	cp.h	r9,r8
8000c5c6:	c0 30       	breq	8000c5cc <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
8000c5c8:	30 08       	mov	r8,0
8000c5ca:	c3 a8       	rjmp	8000c63e <udc_req_std_iface_get_setting+0x8a>
	}
	if (!udc_num_configuration) {
8000c5cc:	4a 08       	lddpc	r8,8000c64c <udc_req_std_iface_get_setting+0x98>
8000c5ce:	11 88       	ld.ub	r8,r8[0x0]
8000c5d0:	58 08       	cp.w	r8,0
8000c5d2:	c0 31       	brne	8000c5d8 <udc_req_std_iface_get_setting+0x24>
		return false; // The device is not is configured state yet
8000c5d4:	30 08       	mov	r8,0
8000c5d6:	c3 48       	rjmp	8000c63e <udc_req_std_iface_get_setting+0x8a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000c5d8:	49 c8       	lddpc	r8,8000c648 <udc_req_std_iface_get_setting+0x94>
8000c5da:	90 28       	ld.sh	r8,r8[0x4]
8000c5dc:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000c5e0:	49 c8       	lddpc	r8,8000c650 <udc_req_std_iface_get_setting+0x9c>
8000c5e2:	70 08       	ld.w	r8,r8[0x0]
8000c5e4:	70 08       	ld.w	r8,r8[0x0]
8000c5e6:	11 c8       	ld.ub	r8,r8[0x4]
8000c5e8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c5ec:	f0 09 18 00 	cp.b	r9,r8
8000c5f0:	c0 33       	brcs	8000c5f6 <udc_req_std_iface_get_setting+0x42>
		return false;
8000c5f2:	30 08       	mov	r8,0
8000c5f4:	c2 58       	rjmp	8000c63e <udc_req_std_iface_get_setting+0x8a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000c5f6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c5fa:	30 0b       	mov	r11,0
8000c5fc:	10 9c       	mov	r12,r8
8000c5fe:	f0 1f 00 16 	mcall	8000c654 <udc_req_std_iface_get_setting+0xa0>
8000c602:	18 98       	mov	r8,r12
8000c604:	ec 18 00 01 	eorl	r8,0x1
8000c608:	5c 58       	castu.b	r8
8000c60a:	c0 30       	breq	8000c610 <udc_req_std_iface_get_setting+0x5c>
		return false;
8000c60c:	30 08       	mov	r8,0
8000c60e:	c1 88       	rjmp	8000c63e <udc_req_std_iface_get_setting+0x8a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000c610:	49 08       	lddpc	r8,8000c650 <udc_req_std_iface_get_setting+0x9c>
8000c612:	70 08       	ld.w	r8,r8[0x0]
8000c614:	70 19       	ld.w	r9,r8[0x4]
8000c616:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c61a:	a3 68       	lsl	r8,0x2
8000c61c:	f2 08 00 08 	add	r8,r9,r8
8000c620:	70 08       	ld.w	r8,r8[0x0]
8000c622:	ef 48 ff fc 	st.w	r7[-4],r8
	udc_iface_setting = udi_api->getsetting();
8000c626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c62a:	70 38       	ld.w	r8,r8[0xc]
8000c62c:	5d 18       	icall	r8
8000c62e:	18 98       	mov	r8,r12
8000c630:	48 a9       	lddpc	r9,8000c658 <udc_req_std_iface_get_setting+0xa4>
8000c632:	b2 88       	st.b	r9[0x0],r8

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
8000c634:	30 1b       	mov	r11,1
8000c636:	48 9c       	lddpc	r12,8000c658 <udc_req_std_iface_get_setting+0xa4>
8000c638:	f0 1f 00 09 	mcall	8000c65c <udc_req_std_iface_get_setting+0xa8>
	return true;
8000c63c:	30 18       	mov	r8,1
}
8000c63e:	10 9c       	mov	r12,r8
8000c640:	2f ed       	sub	sp,-8
8000c642:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c646:	00 00       	add	r0,r0
8000c648:	00 00       	add	r0,r0
8000c64a:	0b c8       	ld.ub	r8,r5[0x4]
8000c64c:	00 00       	add	r0,r0
8000c64e:	06 fa       	st.b	--r3,r10
8000c650:	00 00       	add	r0,r0
8000c652:	06 fc       	st.b	--r3,r12
8000c654:	80 00       	ld.sh	r0,r0[0x0]
8000c656:	bb 8c       	lsr	r12,0x1a
8000c658:	00 00       	add	r0,r0
8000c65a:	07 04       	ld.w	r4,r3++
8000c65c:	80 00       	ld.sh	r0,r0[0x0]
8000c65e:	88 84       	ld.uh	r4,r4[0x0]

8000c660 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
8000c660:	eb cd 40 80 	pushm	r7,lr
8000c664:	1a 97       	mov	r7,sp
8000c666:	20 1d       	sub	sp,4
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
8000c668:	49 78       	lddpc	r8,8000c6c4 <udc_req_std_iface_set_setting+0x64>
8000c66a:	90 38       	ld.sh	r8,r8[0x6]
8000c66c:	58 08       	cp.w	r8,0
8000c66e:	c0 30       	breq	8000c674 <udc_req_std_iface_set_setting+0x14>
		return false; // Error in request
8000c670:	30 08       	mov	r8,0
8000c672:	c2 48       	rjmp	8000c6ba <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
8000c674:	49 58       	lddpc	r8,8000c6c8 <udc_req_std_iface_set_setting+0x68>
8000c676:	11 88       	ld.ub	r8,r8[0x0]
8000c678:	58 08       	cp.w	r8,0
8000c67a:	c0 31       	brne	8000c680 <udc_req_std_iface_set_setting+0x20>
		return false; // The device is not is configured state yet
8000c67c:	30 08       	mov	r8,0
8000c67e:	c1 e8       	rjmp	8000c6ba <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000c680:	49 18       	lddpc	r8,8000c6c4 <udc_req_std_iface_set_setting+0x64>
8000c682:	90 28       	ld.sh	r8,r8[0x4]
8000c684:	ef 68 ff fe 	st.b	r7[-2],r8
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
8000c688:	48 f8       	lddpc	r8,8000c6c4 <udc_req_std_iface_set_setting+0x64>
8000c68a:	90 18       	ld.sh	r8,r8[0x2]
8000c68c:	ef 68 ff ff 	st.b	r7[-1],r8

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
8000c690:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c694:	10 9c       	mov	r12,r8
8000c696:	f0 1f 00 0e 	mcall	8000c6cc <udc_req_std_iface_set_setting+0x6c>
8000c69a:	18 98       	mov	r8,r12
8000c69c:	ec 18 00 01 	eorl	r8,0x1
8000c6a0:	5c 58       	castu.b	r8
8000c6a2:	c0 30       	breq	8000c6a8 <udc_req_std_iface_set_setting+0x48>
		return false;
8000c6a4:	30 08       	mov	r8,0
8000c6a6:	c0 a8       	rjmp	8000c6ba <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
8000c6a8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c6ac:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c6b0:	12 9b       	mov	r11,r9
8000c6b2:	10 9c       	mov	r12,r8
8000c6b4:	f0 1f 00 07 	mcall	8000c6d0 <udc_req_std_iface_set_setting+0x70>
8000c6b8:	18 98       	mov	r8,r12
}
8000c6ba:	10 9c       	mov	r12,r8
8000c6bc:	2f fd       	sub	sp,-4
8000c6be:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c6c2:	00 00       	add	r0,r0
8000c6c4:	00 00       	add	r0,r0
8000c6c6:	0b c8       	ld.ub	r8,r5[0x4]
8000c6c8:	00 00       	add	r0,r0
8000c6ca:	06 fa       	st.b	--r3,r10
8000c6cc:	80 00       	ld.sh	r0,r0[0x0]
8000c6ce:	bc 44       	st.h	lr[0x8],r4
8000c6d0:	80 00       	ld.sh	r0,r0[0x0]
8000c6d2:	bd 00       	ld.d	r0,lr

8000c6d4 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
8000c6d4:	eb cd 40 80 	pushm	r7,lr
8000c6d8:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000c6da:	4c 78       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c6dc:	11 88       	ld.ub	r8,r8[0x0]
8000c6de:	10 99       	mov	r9,r8
8000c6e0:	30 08       	mov	r8,0
8000c6e2:	f0 09 18 00 	cp.b	r9,r8
8000c6e6:	c3 c4       	brge	8000c75e <udc_reqstd+0x8a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
8000c6e8:	4c 38       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c6ea:	90 38       	ld.sh	r8,r8[0x6]
8000c6ec:	58 08       	cp.w	r8,0
8000c6ee:	c0 31       	brne	8000c6f4 <udc_reqstd+0x20>
			return false; // Error for USB host
8000c6f0:	30 08       	mov	r8,0
8000c6f2:	c7 e8       	rjmp	8000c7ee <udc_reqstd+0x11a>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000c6f4:	4c 08       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c6f6:	11 88       	ld.ub	r8,r8[0x0]
8000c6f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c6fc:	c1 51       	brne	8000c726 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c6fe:	4b e8       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c700:	11 98       	ld.ub	r8,r8[0x1]
8000c702:	58 68       	cp.w	r8,6
8000c704:	c0 90       	breq	8000c716 <udc_reqstd+0x42>
8000c706:	58 88       	cp.w	r8,8
8000c708:	c0 b0       	breq	8000c71e <udc_reqstd+0x4a>
8000c70a:	58 08       	cp.w	r8,0
8000c70c:	c0 d1       	brne	8000c726 <udc_reqstd+0x52>
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
8000c70e:	f0 1f 00 3b 	mcall	8000c7f8 <udc_reqstd+0x124>
8000c712:	18 98       	mov	r8,r12
8000c714:	c6 d8       	rjmp	8000c7ee <udc_reqstd+0x11a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
8000c716:	f0 1f 00 3a 	mcall	8000c7fc <udc_reqstd+0x128>
8000c71a:	18 98       	mov	r8,r12
8000c71c:	c6 98       	rjmp	8000c7ee <udc_reqstd+0x11a>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
8000c71e:	f0 1f 00 39 	mcall	8000c800 <udc_reqstd+0x12c>
8000c722:	18 98       	mov	r8,r12
8000c724:	c6 58       	rjmp	8000c7ee <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000c726:	4b 48       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c728:	11 88       	ld.ub	r8,r8[0x0]
8000c72a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c72e:	58 18       	cp.w	r8,1
8000c730:	c0 91       	brne	8000c742 <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c732:	4b 18       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c734:	11 98       	ld.ub	r8,r8[0x1]
8000c736:	58 a8       	cp.w	r8,10
8000c738:	c0 51       	brne	8000c742 <udc_reqstd+0x6e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
8000c73a:	f0 1f 00 33 	mcall	8000c804 <udc_reqstd+0x130>
8000c73e:	18 98       	mov	r8,r12
8000c740:	c5 78       	rjmp	8000c7ee <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000c742:	4a d8       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c744:	11 88       	ld.ub	r8,r8[0x0]
8000c746:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c74a:	58 28       	cp.w	r8,2
8000c74c:	c4 f1       	brne	8000c7ea <udc_reqstd+0x116>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c74e:	4a a8       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c750:	11 98       	ld.ub	r8,r8[0x1]
8000c752:	58 08       	cp.w	r8,0
8000c754:	c4 c1       	brne	8000c7ec <udc_reqstd+0x118>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000c756:	f0 1f 00 2d 	mcall	8000c808 <udc_reqstd+0x134>
8000c75a:	18 98       	mov	r8,r12
8000c75c:	c4 98       	rjmp	8000c7ee <udc_reqstd+0x11a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000c75e:	4a 68       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c760:	11 88       	ld.ub	r8,r8[0x0]
8000c762:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c766:	c1 f1       	brne	8000c7a4 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c768:	4a 38       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c76a:	11 98       	ld.ub	r8,r8[0x1]
8000c76c:	58 38       	cp.w	r8,3
8000c76e:	c1 30       	breq	8000c794 <udc_reqstd+0xc0>
8000c770:	e0 89 00 05 	brgt	8000c77a <udc_reqstd+0xa6>
8000c774:	58 18       	cp.w	r8,1
8000c776:	c0 b0       	breq	8000c78c <udc_reqstd+0xb8>
8000c778:	c1 68       	rjmp	8000c7a4 <udc_reqstd+0xd0>
8000c77a:	58 58       	cp.w	r8,5
8000c77c:	c0 40       	breq	8000c784 <udc_reqstd+0xb0>
8000c77e:	58 98       	cp.w	r8,9
8000c780:	c0 e0       	breq	8000c79c <udc_reqstd+0xc8>
8000c782:	c1 18       	rjmp	8000c7a4 <udc_reqstd+0xd0>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
8000c784:	f0 1f 00 22 	mcall	8000c80c <udc_reqstd+0x138>
8000c788:	18 98       	mov	r8,r12
8000c78a:	c3 28       	rjmp	8000c7ee <udc_reqstd+0x11a>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
8000c78c:	f0 1f 00 21 	mcall	8000c810 <udc_reqstd+0x13c>
8000c790:	18 98       	mov	r8,r12
8000c792:	c2 e8       	rjmp	8000c7ee <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
8000c794:	f0 1f 00 20 	mcall	8000c814 <udc_reqstd+0x140>
8000c798:	18 98       	mov	r8,r12
8000c79a:	c2 a8       	rjmp	8000c7ee <udc_reqstd+0x11a>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
8000c79c:	f0 1f 00 1f 	mcall	8000c818 <udc_reqstd+0x144>
8000c7a0:	18 98       	mov	r8,r12
8000c7a2:	c2 68       	rjmp	8000c7ee <udc_reqstd+0x11a>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000c7a4:	49 48       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c7a6:	11 88       	ld.ub	r8,r8[0x0]
8000c7a8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c7ac:	58 18       	cp.w	r8,1
8000c7ae:	c0 91       	brne	8000c7c0 <udc_reqstd+0xec>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c7b0:	49 18       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c7b2:	11 98       	ld.ub	r8,r8[0x1]
8000c7b4:	58 b8       	cp.w	r8,11
8000c7b6:	c0 51       	brne	8000c7c0 <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
8000c7b8:	f0 1f 00 19 	mcall	8000c81c <udc_reqstd+0x148>
8000c7bc:	18 98       	mov	r8,r12
8000c7be:	c1 88       	rjmp	8000c7ee <udc_reqstd+0x11a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000c7c0:	48 d8       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c7c2:	11 88       	ld.ub	r8,r8[0x0]
8000c7c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c7c8:	58 28       	cp.w	r8,2
8000c7ca:	c1 11       	brne	8000c7ec <udc_reqstd+0x118>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c7cc:	48 a8       	lddpc	r8,8000c7f4 <udc_reqstd+0x120>
8000c7ce:	11 98       	ld.ub	r8,r8[0x1]
8000c7d0:	58 18       	cp.w	r8,1
8000c7d2:	c0 40       	breq	8000c7da <udc_reqstd+0x106>
8000c7d4:	58 38       	cp.w	r8,3
8000c7d6:	c0 60       	breq	8000c7e2 <udc_reqstd+0x10e>
8000c7d8:	c0 a8       	rjmp	8000c7ec <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
8000c7da:	f0 1f 00 12 	mcall	8000c820 <udc_reqstd+0x14c>
8000c7de:	18 98       	mov	r8,r12
8000c7e0:	c0 78       	rjmp	8000c7ee <udc_reqstd+0x11a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
8000c7e2:	f0 1f 00 11 	mcall	8000c824 <udc_reqstd+0x150>
8000c7e6:	18 98       	mov	r8,r12
8000c7e8:	c0 38       	rjmp	8000c7ee <udc_reqstd+0x11a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000c7ea:	d7 03       	nop
				break;
			}
		}
#endif
	}
	return false;
8000c7ec:	30 08       	mov	r8,0
}
8000c7ee:	10 9c       	mov	r12,r8
8000c7f0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c7f4:	00 00       	add	r0,r0
8000c7f6:	0b c8       	ld.ub	r8,r5[0x4]
8000c7f8:	80 00       	ld.sh	r0,r0[0x0]
8000c7fa:	be b0       	st.b	pc[0x3],r0
8000c7fc:	80 00       	ld.sh	r0,r0[0x0]
8000c7fe:	c2 0c       	rcall	8000c83e <udc_req_iface+0x16>
8000c800:	80 00       	ld.sh	r0,r0[0x0]
8000c802:	c4 68       	rjmp	8000c88e <udc_req_iface+0x66>
8000c804:	80 00       	ld.sh	r0,r0[0x0]
8000c806:	c5 b4       	brge	8000c8bc <udc_req_iface+0x94>
8000c808:	80 00       	ld.sh	r0,r0[0x0]
8000c80a:	be e4       	st.b	pc[0x6],r4
8000c80c:	80 00       	ld.sh	r0,r0[0x0]
8000c80e:	c0 e4       	brge	8000c82a <udc_req_iface+0x2>
8000c810:	80 00       	ld.sh	r0,r0[0x0]
8000c812:	bf 3c       	mul	r12,pc
8000c814:	80 00       	ld.sh	r0,r0[0x0]
8000c816:	bf b8       	sbr	r8,0x1f
8000c818:	80 00       	ld.sh	r0,r0[0x0]
8000c81a:	c4 9c       	rcall	8000c8ac <udc_req_iface+0x84>
8000c81c:	80 00       	ld.sh	r0,r0[0x0]
8000c81e:	c6 60       	breq	8000c8ea <udc_process_setup+0x16>
8000c820:	80 00       	ld.sh	r0,r0[0x0]
8000c822:	bf 7c       	lsl	r12,0x1f
8000c824:	80 00       	ld.sh	r0,r0[0x0]
8000c826:	c0 74       	brge	8000c834 <udc_req_iface+0xc>

8000c828 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
8000c828:	eb cd 40 80 	pushm	r7,lr
8000c82c:	1a 97       	mov	r7,sp
8000c82e:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000c830:	4a 58       	lddpc	r8,8000c8c4 <udc_req_iface+0x9c>
8000c832:	11 88       	ld.ub	r8,r8[0x0]
8000c834:	58 08       	cp.w	r8,0
8000c836:	c0 31       	brne	8000c83c <udc_req_iface+0x14>
		return false; // The device is not is configured state yet
8000c838:	30 08       	mov	r8,0
8000c83a:	c4 08       	rjmp	8000c8ba <udc_req_iface+0x92>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000c83c:	4a 38       	lddpc	r8,8000c8c8 <udc_req_iface+0xa0>
8000c83e:	90 28       	ld.sh	r8,r8[0x4]
8000c840:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000c844:	4a 28       	lddpc	r8,8000c8cc <udc_req_iface+0xa4>
8000c846:	70 08       	ld.w	r8,r8[0x0]
8000c848:	70 08       	ld.w	r8,r8[0x0]
8000c84a:	11 c8       	ld.ub	r8,r8[0x4]
8000c84c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c850:	f0 09 18 00 	cp.b	r9,r8
8000c854:	c0 33       	brcs	8000c85a <udc_req_iface+0x32>
		return false;
8000c856:	30 08       	mov	r8,0
8000c858:	c3 18       	rjmp	8000c8ba <udc_req_iface+0x92>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000c85a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c85e:	30 0b       	mov	r11,0
8000c860:	10 9c       	mov	r12,r8
8000c862:	f0 1f 00 1c 	mcall	8000c8d0 <udc_req_iface+0xa8>
8000c866:	18 98       	mov	r8,r12
8000c868:	ec 18 00 01 	eorl	r8,0x1
8000c86c:	5c 58       	castu.b	r8
8000c86e:	c0 30       	breq	8000c874 <udc_req_iface+0x4c>
		return false;
8000c870:	30 08       	mov	r8,0
8000c872:	c2 48       	rjmp	8000c8ba <udc_req_iface+0x92>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000c874:	49 68       	lddpc	r8,8000c8cc <udc_req_iface+0xa4>
8000c876:	70 08       	ld.w	r8,r8[0x0]
8000c878:	70 19       	ld.w	r9,r8[0x4]
8000c87a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c87e:	a3 68       	lsl	r8,0x2
8000c880:	f2 08 00 08 	add	r8,r9,r8
8000c884:	70 08       	ld.w	r8,r8[0x0]
8000c886:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000c88a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c88e:	70 38       	ld.w	r8,r8[0xc]
8000c890:	5d 18       	icall	r8
8000c892:	18 98       	mov	r8,r12
8000c894:	10 99       	mov	r9,r8
8000c896:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c89a:	12 9b       	mov	r11,r9
8000c89c:	10 9c       	mov	r12,r8
8000c89e:	f0 1f 00 0d 	mcall	8000c8d0 <udc_req_iface+0xa8>
8000c8a2:	18 98       	mov	r8,r12
8000c8a4:	ec 18 00 01 	eorl	r8,0x1
8000c8a8:	5c 58       	castu.b	r8
8000c8aa:	c0 30       	breq	8000c8b0 <udc_req_iface+0x88>
		return false;
8000c8ac:	30 08       	mov	r8,0
8000c8ae:	c0 68       	rjmp	8000c8ba <udc_req_iface+0x92>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
8000c8b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c8b4:	70 28       	ld.w	r8,r8[0x8]
8000c8b6:	5d 18       	icall	r8
8000c8b8:	18 98       	mov	r8,r12
}
8000c8ba:	10 9c       	mov	r12,r8
8000c8bc:	2f ed       	sub	sp,-8
8000c8be:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8c2:	00 00       	add	r0,r0
8000c8c4:	00 00       	add	r0,r0
8000c8c6:	06 fa       	st.b	--r3,r10
8000c8c8:	00 00       	add	r0,r0
8000c8ca:	0b c8       	ld.ub	r8,r5[0x4]
8000c8cc:	00 00       	add	r0,r0
8000c8ce:	06 fc       	st.b	--r3,r12
8000c8d0:	80 00       	ld.sh	r0,r0[0x0]
8000c8d2:	bb 8c       	lsr	r12,0x1a

8000c8d4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
8000c8d4:	eb cd 40 80 	pushm	r7,lr
8000c8d8:	1a 97       	mov	r7,sp
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
8000c8da:	49 a9       	lddpc	r9,8000c940 <udc_process_setup+0x6c>
8000c8dc:	30 08       	mov	r8,0
8000c8de:	b2 68       	st.h	r9[0xc],r8
	udd_g_ctrlreq.callback = NULL;
8000c8e0:	49 88       	lddpc	r8,8000c940 <udc_process_setup+0x6c>
8000c8e2:	30 09       	mov	r9,0
8000c8e4:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000c8e6:	49 78       	lddpc	r8,8000c940 <udc_process_setup+0x6c>
8000c8e8:	30 09       	mov	r9,0
8000c8ea:	91 59       	st.w	r8[0x14],r9

	if (Udd_setup_is_in()) {
8000c8ec:	49 58       	lddpc	r8,8000c940 <udc_process_setup+0x6c>
8000c8ee:	11 88       	ld.ub	r8,r8[0x0]
8000c8f0:	10 99       	mov	r9,r8
8000c8f2:	30 08       	mov	r8,0
8000c8f4:	f0 09 18 00 	cp.b	r9,r8
8000c8f8:	c0 74       	brge	8000c906 <udc_process_setup+0x32>
		if (udd_g_ctrlreq.req.wLength == 0) {
8000c8fa:	49 28       	lddpc	r8,8000c940 <udc_process_setup+0x6c>
8000c8fc:	90 38       	ld.sh	r8,r8[0x6]
8000c8fe:	58 08       	cp.w	r8,0
8000c900:	c0 31       	brne	8000c906 <udc_process_setup+0x32>
			return false; // Error from USB host
8000c902:	30 08       	mov	r8,0
8000c904:	c1 b8       	rjmp	8000c93a <udc_process_setup+0x66>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
8000c906:	48 f8       	lddpc	r8,8000c940 <udc_process_setup+0x6c>
8000c908:	11 88       	ld.ub	r8,r8[0x0]
8000c90a:	e2 18 00 60 	andl	r8,0x60,COH
8000c90e:	c0 81       	brne	8000c91e <udc_process_setup+0x4a>
		if (udc_reqstd()) {
8000c910:	f0 1f 00 0d 	mcall	8000c944 <udc_process_setup+0x70>
8000c914:	18 98       	mov	r8,r12
8000c916:	58 08       	cp.w	r8,0
8000c918:	c0 30       	breq	8000c91e <udc_process_setup+0x4a>
			return true;
8000c91a:	30 18       	mov	r8,1
8000c91c:	c0 f8       	rjmp	8000c93a <udc_process_setup+0x66>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
8000c91e:	48 98       	lddpc	r8,8000c940 <udc_process_setup+0x6c>
8000c920:	11 88       	ld.ub	r8,r8[0x0]
8000c922:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c926:	58 18       	cp.w	r8,1
8000c928:	c0 81       	brne	8000c938 <udc_process_setup+0x64>
		if (udc_req_iface()) {
8000c92a:	f0 1f 00 08 	mcall	8000c948 <udc_process_setup+0x74>
8000c92e:	18 98       	mov	r8,r12
8000c930:	58 08       	cp.w	r8,0
8000c932:	c0 30       	breq	8000c938 <udc_process_setup+0x64>
			return true;
8000c934:	30 18       	mov	r8,1
8000c936:	c0 28       	rjmp	8000c93a <udc_process_setup+0x66>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
8000c938:	30 08       	mov	r8,0
#endif
}
8000c93a:	10 9c       	mov	r12,r8
8000c93c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c940:	00 00       	add	r0,r0
8000c942:	0b c8       	ld.ub	r8,r5[0x4]
8000c944:	80 00       	ld.sh	r0,r0[0x0]
8000c946:	c6 d4       	brge	8000ca20 <sleepmgr_init+0x4>
8000c948:	80 00       	ld.sh	r0,r0[0x0]
8000c94a:	c8 28       	rjmp	8000ca4e <sleepmgr_init+0x32>

8000c94c <pm_sleep>:
#else
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
8000c94c:	eb cd 40 80 	pushm	r7,lr
8000c950:	1a 97       	mov	r7,sp
8000c952:	20 1d       	sub	sp,4
8000c954:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (sleep_mode) {
8000c958:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c95c:	58 58       	cp.w	r8,5
8000c95e:	c4 30       	breq	8000c9e4 <pm_sleep+0x98>
8000c960:	e0 89 00 10 	brgt	8000c980 <pm_sleep+0x34>
8000c964:	58 28       	cp.w	r8,2
8000c966:	c2 d0       	breq	8000c9c0 <pm_sleep+0x74>
8000c968:	e0 89 00 07 	brgt	8000c976 <pm_sleep+0x2a>
8000c96c:	58 08       	cp.w	r8,0
8000c96e:	c1 d0       	breq	8000c9a8 <pm_sleep+0x5c>
8000c970:	58 18       	cp.w	r8,1
8000c972:	c2 10       	breq	8000c9b4 <pm_sleep+0x68>
8000c974:	c3 d8       	rjmp	8000c9ee <pm_sleep+0xa2>
8000c976:	58 38       	cp.w	r8,3
8000c978:	c2 a0       	breq	8000c9cc <pm_sleep+0x80>
8000c97a:	58 48       	cp.w	r8,4
8000c97c:	c2 e0       	breq	8000c9d8 <pm_sleep+0x8c>
8000c97e:	c3 88       	rjmp	8000c9ee <pm_sleep+0xa2>
8000c980:	e0 48 00 82 	cp.w	r8,130
8000c984:	c2 10       	breq	8000c9c6 <pm_sleep+0x7a>
8000c986:	e0 89 00 09 	brgt	8000c998 <pm_sleep+0x4c>
8000c98a:	e0 48 00 80 	cp.w	r8,128
8000c98e:	c1 00       	breq	8000c9ae <pm_sleep+0x62>
8000c990:	e0 48 00 81 	cp.w	r8,129
8000c994:	c1 30       	breq	8000c9ba <pm_sleep+0x6e>
8000c996:	c2 c8       	rjmp	8000c9ee <pm_sleep+0xa2>
8000c998:	e0 48 00 84 	cp.w	r8,132
8000c99c:	c2 10       	breq	8000c9de <pm_sleep+0x92>
8000c99e:	c1 a5       	brlt	8000c9d2 <pm_sleep+0x86>
8000c9a0:	e0 48 00 85 	cp.w	r8,133
8000c9a4:	c2 30       	breq	8000c9ea <pm_sleep+0x9e>
8000c9a6:	c2 48       	rjmp	8000c9ee <pm_sleep+0xa2>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
8000c9a8:	e9 b0 00 00 	sleep	0x0
		break;
8000c9ac:	c2 18       	rjmp	8000c9ee <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
8000c9ae:	e9 b0 00 80 	sleep	0x80
		break;
8000c9b2:	c1 e8       	rjmp	8000c9ee <pm_sleep+0xa2>
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
8000c9b4:	e9 b0 00 01 	sleep	0x1
		break;
8000c9b8:	c1 b8       	rjmp	8000c9ee <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
8000c9ba:	e9 b0 00 81 	sleep	0x81
		break;
8000c9be:	c1 88       	rjmp	8000c9ee <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
8000c9c0:	e9 b0 00 02 	sleep	0x2
		break;
8000c9c4:	c1 58       	rjmp	8000c9ee <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
8000c9c6:	e9 b0 00 82 	sleep	0x82
		break;
8000c9ca:	c1 28       	rjmp	8000c9ee <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
8000c9cc:	e9 b0 00 03 	sleep	0x3
		break;
8000c9d0:	c0 f8       	rjmp	8000c9ee <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
8000c9d2:	e9 b0 00 83 	sleep	0x83
		break;
8000c9d6:	c0 c8       	rjmp	8000c9ee <pm_sleep+0xa2>
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
8000c9d8:	e9 b0 00 04 	sleep	0x4
		break;
8000c9dc:	c0 98       	rjmp	8000c9ee <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000c9de:	e9 b0 00 84 	sleep	0x84
		break;
8000c9e2:	c0 68       	rjmp	8000c9ee <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
8000c9e4:	e9 b0 00 05 	sleep	0x5
		break;
8000c9e8:	c0 38       	rjmp	8000c9ee <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
8000c9ea:	e9 b0 00 85 	sleep	0x85
		break;
#endif
	default:
		break;
	}
}
8000c9ee:	2f fd       	sub	sp,-4
8000c9f0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000c9f4 <sleepmgr_sleep>:
//! @}



static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
8000c9f4:	eb cd 40 80 	pushm	r7,lr
8000c9f8:	1a 97       	mov	r7,sp
8000c9fa:	20 1d       	sub	sp,4
8000c9fc:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
8000ca00:	d3 03       	ssrf	0x10

	// Atomically enable the global interrupts and enter the sleep mode.
	pm_sleep(AVR32_PM_SMODE_GMCLEAR_MASK | (sleep_mode-1));
8000ca02:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ca06:	20 18       	sub	r8,1
8000ca08:	a7 b8       	sbr	r8,0x7
8000ca0a:	10 9c       	mov	r12,r8
8000ca0c:	f0 1f 00 03 	mcall	8000ca18 <sleepmgr_sleep+0x24>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
8000ca10:	2f fd       	sub	sp,-4
8000ca12:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca16:	00 00       	add	r0,r0
8000ca18:	80 00       	ld.sh	r0,r0[0x0]
8000ca1a:	c9 4c       	rcall	8000cb42 <main+0x26>

8000ca1c <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8000ca1c:	eb cd 40 80 	pushm	r7,lr
8000ca20:	1a 97       	mov	r7,sp
8000ca22:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000ca24:	30 08       	mov	r8,0
8000ca26:	ef 68 ff ff 	st.b	r7[-1],r8
8000ca2a:	c0 c8       	rjmp	8000ca42 <sleepmgr_init+0x26>
		sleepmgr_locks[i] = 0;
8000ca2c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ca30:	48 ba       	lddpc	r10,8000ca5c <sleepmgr_init+0x40>
8000ca32:	30 08       	mov	r8,0
8000ca34:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000ca38:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ca3c:	2f f8       	sub	r8,-1
8000ca3e:	ef 68 ff ff 	st.b	r7[-1],r8
8000ca42:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ca46:	30 58       	mov	r8,5
8000ca48:	f0 09 18 00 	cp.b	r9,r8
8000ca4c:	fe 98 ff f0 	brls	8000ca2c <sleepmgr_init+0x10>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8000ca50:	48 39       	lddpc	r9,8000ca5c <sleepmgr_init+0x40>
8000ca52:	30 18       	mov	r8,1
8000ca54:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000ca56:	2f fd       	sub	sp,-4
8000ca58:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca5c:	00 00       	add	r0,r0
8000ca5e:	0b e0       	ld.ub	r0,r5[0x6]

8000ca60 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
8000ca60:	eb cd 40 80 	pushm	r7,lr
8000ca64:	1a 97       	mov	r7,sp
8000ca66:	20 2d       	sub	sp,8
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
8000ca68:	30 08       	mov	r8,0
8000ca6a:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
8000ca6e:	48 d8       	lddpc	r8,8000caa0 <sleepmgr_get_sleep_mode+0x40>
8000ca70:	ef 48 ff fc 	st.w	r7[-4],r8

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000ca74:	c0 b8       	rjmp	8000ca8a <sleepmgr_get_sleep_mode+0x2a>
		lock_ptr++;
8000ca76:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ca7a:	2f f8       	sub	r8,-1
8000ca7c:	ef 48 ff fc 	st.w	r7[-4],r8
		sleep_mode++;
8000ca80:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ca84:	2f f8       	sub	r8,-1
8000ca86:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000ca8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ca8e:	11 88       	ld.ub	r8,r8[0x0]
8000ca90:	58 08       	cp.w	r8,0
8000ca92:	cf 20       	breq	8000ca76 <sleepmgr_get_sleep_mode+0x16>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
8000ca94:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000ca98:	10 9c       	mov	r12,r8
8000ca9a:	2f ed       	sub	sp,-8
8000ca9c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000caa0:	00 00       	add	r0,r0
8000caa2:	0b e0       	ld.ub	r0,r5[0x6]

8000caa4 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
8000caa4:	eb cd 40 80 	pushm	r7,lr
8000caa8:	1a 97       	mov	r7,sp
8000caaa:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
8000caac:	d3 03       	ssrf	0x10

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
8000caae:	f0 1f 00 0a 	mcall	8000cad4 <sleepmgr_enter_sleep+0x30>
8000cab2:	18 98       	mov	r8,r12
8000cab4:	ef 48 ff fc 	st.w	r7[-4],r8
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
8000cab8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cabc:	58 08       	cp.w	r8,0
8000cabe:	c0 31       	brne	8000cac4 <sleepmgr_enter_sleep+0x20>
		cpu_irq_enable();
8000cac0:	d5 03       	csrf	0x10
		return;
8000cac2:	c0 58       	rjmp	8000cacc <sleepmgr_enter_sleep+0x28>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
8000cac4:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cac8:	f0 1f 00 04 	mcall	8000cad8 <sleepmgr_enter_sleep+0x34>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000cacc:	2f fd       	sub	sp,-4
8000cace:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cad2:	00 00       	add	r0,r0
8000cad4:	80 00       	ld.sh	r0,r0[0x0]
8000cad6:	ca 60       	breq	8000ca22 <sleepmgr_init+0x6>
8000cad8:	80 00       	ld.sh	r0,r0[0x0]
8000cada:	c9 f4       	brge	8000ca18 <sleepmgr_sleep+0x24>

8000cadc <udc_include_vbus_monitoring>:
 *        // Start USB \n
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
8000cadc:	eb cd 40 80 	pushm	r7,lr
8000cae0:	1a 97       	mov	r7,sp
	return udd_include_vbus_monitoring();
8000cae2:	f0 1f 00 04 	mcall	8000caf0 <udc_include_vbus_monitoring+0x14>
8000cae6:	18 98       	mov	r8,r12
}
8000cae8:	10 9c       	mov	r12,r8
8000caea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000caee:	00 00       	add	r0,r0
8000caf0:	80 00       	ld.sh	r0,r0[0x0]
8000caf2:	85 cc       	st.w	r2[0x30],r12

8000caf4 <udc_attach>:
 * \warning If a VBus control is included in driver,
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
8000caf4:	eb cd 40 80 	pushm	r7,lr
8000caf8:	1a 97       	mov	r7,sp
	udd_attach();
8000cafa:	f0 1f 00 03 	mcall	8000cb04 <udc_attach+0x10>
}
8000cafe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb02:	00 00       	add	r0,r0
8000cb04:	80 00       	ld.sh	r0,r0[0x0]
8000cb06:	86 fc       	ld.uh	r12,r3[0xe]

8000cb08 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
8000cb08:	eb cd 40 80 	pushm	r7,lr
8000cb0c:	1a 97       	mov	r7,sp
	udd_detach();
8000cb0e:	f0 1f 00 03 	mcall	8000cb18 <udc_detach+0x10>
}
8000cb12:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb16:	00 00       	add	r0,r0
8000cb18:	80 00       	ld.sh	r0,r0[0x0]
8000cb1a:	87 a8       	st.w	r3[0x28],r8

8000cb1c <main>:
static bool main_b_msc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
8000cb1c:	eb cd 40 80 	pushm	r7,lr
8000cb20:	1a 97       	mov	r7,sp
8000cb22:	20 1d       	sub	sp,4
	uint8_t i = 0;
8000cb24:	30 08       	mov	r8,0
8000cb26:	ef 68 ff ff 	st.b	r7[-1],r8
	irq_initialize_vectors();
8000cb2a:	f0 1f 00 25 	mcall	8000cbbc <main+0xa0>
	cpu_irq_enable();
8000cb2e:	d5 03       	csrf	0x10

	// Initialize the sleep manager
	sleepmgr_init();
8000cb30:	f0 1f 00 24 	mcall	8000cbc0 <main+0xa4>

	sysclk_init();
8000cb34:	f0 1f 00 24 	mcall	8000cbc4 <main+0xa8>
	board_init();
8000cb38:	f0 1f 00 24 	mcall	8000cbc8 <main+0xac>

	ui_init();
8000cb3c:	f0 1f 00 24 	mcall	8000cbcc <main+0xb0>
	ui_powerdown();
8000cb40:	f0 1f 00 24 	mcall	8000cbd0 <main+0xb4>

	memories_initialization();
8000cb44:	f0 1f 00 24 	mcall	8000cbd4 <main+0xb8>

	// Initialize LCD
	et024006_Init( FOSC0, FOSC0 );
8000cb48:	e0 6b 1b 00 	mov	r11,6912
8000cb4c:	ea 1b 00 b7 	orh	r11,0xb7
8000cb50:	e0 6c 1b 00 	mov	r12,6912
8000cb54:	ea 1c 00 b7 	orh	r12,0xb7
8000cb58:	f0 1f 00 20 	mcall	8000cbd8 <main+0xbc>
	gpio_set_gpio_pin(ET024006DHU_BL_PIN);
8000cb5c:	30 9c       	mov	r12,9
8000cb5e:	f0 1f 00 20 	mcall	8000cbdc <main+0xc0>
	
	//et024006_PrintConsole("Welcome Eric", BLACK, -1);
	//clear_lcd
	et024006_DrawFilledRect(1, 1, ET024006_WIDTH, ET024006_HEIGHT, BLACK);
8000cb62:	30 08       	mov	r8,0
8000cb64:	e0 69 00 f0 	mov	r9,240
8000cb68:	e0 6a 01 40 	mov	r10,320
8000cb6c:	30 1b       	mov	r11,1
8000cb6e:	30 1c       	mov	r12,1
8000cb70:	f0 1f 00 1c 	mcall	8000cbe0 <main+0xc4>
	
	// Initialize AES module
	aes_task();
8000cb74:	f0 1f 00 1c 	mcall	8000cbe4 <main+0xc8>

	// Start TC
	tc_task();
8000cb78:	f0 1f 00 1c 	mcall	8000cbe8 <main+0xcc>

	// Start USB stack to authorize VBus monitoring
	udc_start();
8000cb7c:	f0 1f 00 1c 	mcall	8000cbec <main+0xd0>

	if (!udc_include_vbus_monitoring()) {
8000cb80:	f0 1f 00 1c 	mcall	8000cbf0 <main+0xd4>
8000cb84:	18 98       	mov	r8,r12
8000cb86:	ec 18 00 01 	eorl	r8,0x1
8000cb8a:	5c 58       	castu.b	r8
8000cb8c:	c0 60       	breq	8000cb98 <main+0x7c>
		// VBUS monitoring is not available on this product
		// thereby VBUS has to be considered as present
		main_vbus_action(true);
8000cb8e:	30 1c       	mov	r12,1
8000cb90:	f0 1f 00 19 	mcall	8000cbf4 <main+0xd8>
8000cb94:	c0 28       	rjmp	8000cb98 <main+0x7c>
				sleepmgr_enter_sleep();
			}
		}else{
			sleepmgr_enter_sleep();
		}
	}
8000cb96:	d7 03       	nop

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {

		if (main_b_msc_enable) {
8000cb98:	49 88       	lddpc	r8,8000cbf8 <main+0xdc>
8000cb9a:	11 88       	ld.ub	r8,r8[0x0]
8000cb9c:	58 08       	cp.w	r8,0
8000cb9e:	c0 b0       	breq	8000cbb4 <main+0x98>
			if (!udi_msc_process_trans()) {
8000cba0:	f0 1f 00 17 	mcall	8000cbfc <main+0xe0>
8000cba4:	18 98       	mov	r8,r12
8000cba6:	ec 18 00 01 	eorl	r8,0x1
8000cbaa:	5c 58       	castu.b	r8
8000cbac:	cf 50       	breq	8000cb96 <main+0x7a>
				sleepmgr_enter_sleep();
8000cbae:	f0 1f 00 15 	mcall	8000cc00 <main+0xe4>
			}
		}else{
			sleepmgr_enter_sleep();
		}
	}
8000cbb2:	cf 3b       	rjmp	8000cb98 <main+0x7c>
		if (main_b_msc_enable) {
			if (!udi_msc_process_trans()) {
				sleepmgr_enter_sleep();
			}
		}else{
			sleepmgr_enter_sleep();
8000cbb4:	f0 1f 00 13 	mcall	8000cc00 <main+0xe4>
		}
	}
8000cbb8:	cf 0b       	rjmp	8000cb98 <main+0x7c>
8000cbba:	00 00       	add	r0,r0
8000cbbc:	80 00       	ld.sh	r0,r0[0x0]
8000cbbe:	79 04       	ld.w	r4,r12[0x40]
8000cbc0:	80 00       	ld.sh	r0,r0[0x0]
8000cbc2:	ca 1c       	rcall	8000cd04 <osc_get_rate+0x40>
8000cbc4:	80 00       	ld.sh	r0,r0[0x0]
8000cbc6:	a9 c8       	cbr	r8,0x8
8000cbc8:	80 00       	ld.sh	r0,r0[0x0]
8000cbca:	2f b8       	sub	r8,-5
8000cbcc:	80 00       	ld.sh	r0,r0[0x0]
8000cbce:	ac 50       	st.h	r6[0xa],r0
8000cbd0:	80 00       	ld.sh	r0,r0[0x0]
8000cbd2:	ac 70       	st.h	r6[0xe],r0
8000cbd4:	80 00       	ld.sh	r0,r0[0x0]
8000cbd6:	cd 7c       	rcall	8000cd84 <memories_initialization+0x8>
8000cbd8:	80 00       	ld.sh	r0,r0[0x0]
8000cbda:	31 a0       	mov	r0,26
8000cbdc:	80 00       	ld.sh	r0,r0[0x0]
8000cbde:	77 3e       	ld.w	lr,r11[0x4c]
8000cbe0:	80 00       	ld.sh	r0,r0[0x0]
8000cbe2:	32 18       	mov	r8,33
8000cbe4:	80 00       	ld.sh	r0,r0[0x0]
8000cbe6:	2d 50       	sub	r0,-43
8000cbe8:	80 00       	ld.sh	r0,r0[0x0]
8000cbea:	2c b0       	sub	r0,-53
8000cbec:	80 00       	ld.sh	r0,r0[0x0]
8000cbee:	bd c8       	cbr	r8,0x1c
8000cbf0:	80 00       	ld.sh	r0,r0[0x0]
8000cbf2:	ca dc       	rcall	8000cd4c <sysclk_get_pbb_hz+0x8>
8000cbf4:	80 00       	ld.sh	r0,r0[0x0]
8000cbf6:	cc 04       	brge	8000cb76 <main+0x5a>
8000cbf8:	00 00       	add	r0,r0
8000cbfa:	07 08       	ld.w	r8,r3++
8000cbfc:	80 00       	ld.sh	r0,r0[0x0]
8000cbfe:	b8 c4       	st.b	r12[0x4],r4
8000cc00:	80 00       	ld.sh	r0,r0[0x0]
8000cc02:	ca a4       	brge	8000cb56 <main+0x3a>

8000cc04 <main_vbus_action>:
}

void main_vbus_action(bool b_high)
{
8000cc04:	eb cd 40 80 	pushm	r7,lr
8000cc08:	1a 97       	mov	r7,sp
8000cc0a:	20 1d       	sub	sp,4
8000cc0c:	18 98       	mov	r8,r12
8000cc0e:	ef 68 ff fc 	st.b	r7[-4],r8
	if (b_high) {
8000cc12:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000cc16:	30 08       	mov	r8,0
8000cc18:	f0 09 18 00 	cp.b	r9,r8
8000cc1c:	c0 40       	breq	8000cc24 <main_vbus_action+0x20>
		// Attach USB Device
		udc_attach();
8000cc1e:	f0 1f 00 05 	mcall	8000cc30 <main_vbus_action+0x2c>
8000cc22:	c0 38       	rjmp	8000cc28 <main_vbus_action+0x24>
	} else {
		// VBUS not present
		udc_detach();
8000cc24:	f0 1f 00 04 	mcall	8000cc34 <main_vbus_action+0x30>
	}
}
8000cc28:	2f fd       	sub	sp,-4
8000cc2a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc2e:	00 00       	add	r0,r0
8000cc30:	80 00       	ld.sh	r0,r0[0x0]
8000cc32:	ca f4       	brge	8000cb90 <main+0x74>
8000cc34:	80 00       	ld.sh	r0,r0[0x0]
8000cc36:	cb 08       	rjmp	8000cd96 <memories_initialization+0x1a>

8000cc38 <main_suspend_action>:

void main_suspend_action(void)
{
8000cc38:	eb cd 40 80 	pushm	r7,lr
8000cc3c:	1a 97       	mov	r7,sp
	ui_powerdown();
8000cc3e:	f0 1f 00 03 	mcall	8000cc48 <main_suspend_action+0x10>
}
8000cc42:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc46:	00 00       	add	r0,r0
8000cc48:	80 00       	ld.sh	r0,r0[0x0]
8000cc4a:	ac 70       	st.h	r6[0xe],r0

8000cc4c <main_resume_action>:

void main_resume_action(void)
{
8000cc4c:	eb cd 40 80 	pushm	r7,lr
8000cc50:	1a 97       	mov	r7,sp
	ui_wakeup();
8000cc52:	f0 1f 00 03 	mcall	8000cc5c <main_resume_action+0x10>
}
8000cc56:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc5a:	00 00       	add	r0,r0
8000cc5c:	80 00       	ld.sh	r0,r0[0x0]
8000cc5e:	ac 8c       	st.b	r6[0x0],r12

8000cc60 <main_sof_action>:

void main_sof_action(void)
{
8000cc60:	eb cd 40 80 	pushm	r7,lr
8000cc64:	1a 97       	mov	r7,sp
	if (!main_b_msc_enable)
8000cc66:	48 a8       	lddpc	r8,8000cc8c <main_sof_action+0x2c>
8000cc68:	11 88       	ld.ub	r8,r8[0x0]
8000cc6a:	ec 18 00 01 	eorl	r8,0x1
8000cc6e:	5c 58       	castu.b	r8
8000cc70:	c0 a1       	brne	8000cc84 <main_sof_action+0x24>
		return;
	ui_process(udd_get_frame_number());
8000cc72:	f0 1f 00 08 	mcall	8000cc90 <main_sof_action+0x30>
8000cc76:	18 98       	mov	r8,r12
8000cc78:	5c 88       	casts.h	r8
8000cc7a:	5c 78       	castu.h	r8
8000cc7c:	10 9c       	mov	r12,r8
8000cc7e:	f0 1f 00 06 	mcall	8000cc94 <main_sof_action+0x34>
8000cc82:	c0 28       	rjmp	8000cc86 <main_sof_action+0x26>
}

void main_sof_action(void)
{
	if (!main_b_msc_enable)
		return;
8000cc84:	d7 03       	nop
	ui_process(udd_get_frame_number());
}
8000cc86:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc8a:	00 00       	add	r0,r0
8000cc8c:	00 00       	add	r0,r0
8000cc8e:	07 08       	ld.w	r8,r3++
8000cc90:	80 00       	ld.sh	r0,r0[0x0]
8000cc92:	88 6a       	ld.sh	r10,r4[0xc]
8000cc94:	80 00       	ld.sh	r0,r0[0x0]
8000cc96:	ac f0       	st.b	r6[0x7],r0

8000cc98 <main_msc_enable>:

bool main_msc_enable(void)
{
8000cc98:	eb cd 40 80 	pushm	r7,lr
8000cc9c:	1a 97       	mov	r7,sp
	main_b_msc_enable = true;
8000cc9e:	48 49       	lddpc	r9,8000ccac <main_msc_enable+0x14>
8000cca0:	30 18       	mov	r8,1
8000cca2:	b2 88       	st.b	r9[0x0],r8
	return true;
8000cca4:	30 18       	mov	r8,1
}
8000cca6:	10 9c       	mov	r12,r8
8000cca8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccac:	00 00       	add	r0,r0
8000ccae:	07 08       	ld.w	r8,r3++

8000ccb0 <main_msc_disable>:

void main_msc_disable(void)
{
8000ccb0:	eb cd 40 80 	pushm	r7,lr
8000ccb4:	1a 97       	mov	r7,sp
	main_b_msc_enable = false;
8000ccb6:	48 39       	lddpc	r9,8000ccc0 <main_msc_disable+0x10>
8000ccb8:	30 08       	mov	r8,0
8000ccba:	b2 88       	st.b	r9[0x0],r8
}
8000ccbc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccc0:	00 00       	add	r0,r0
8000ccc2:	07 08       	ld.w	r8,r3++

8000ccc4 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
8000ccc4:	eb cd 40 80 	pushm	r7,lr
8000ccc8:	1a 97       	mov	r7,sp
8000ccca:	20 1d       	sub	sp,4
8000cccc:	18 98       	mov	r8,r12
8000ccce:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000ccd2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ccd6:	58 18       	cp.w	r8,1
8000ccd8:	c0 a0       	breq	8000ccec <osc_get_rate+0x28>
8000ccda:	58 28       	cp.w	r8,2
8000ccdc:	c0 d0       	breq	8000ccf6 <osc_get_rate+0x32>
8000ccde:	58 08       	cp.w	r8,0
8000cce0:	c0 e1       	brne	8000ccfc <osc_get_rate+0x38>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000cce2:	e0 68 1b 00 	mov	r8,6912
8000cce6:	ea 18 00 b7 	orh	r8,0xb7
8000ccea:	c0 a8       	rjmp	8000ccfe <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC1_HZ
	case OSC_ID_OSC1:
		return BOARD_OSC1_HZ;
8000ccec:	e0 68 44 00 	mov	r8,17408
8000ccf0:	ea 18 00 ac 	orh	r8,0xac
8000ccf4:	c0 58       	rjmp	8000ccfe <osc_get_rate+0x3a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000ccf6:	e0 68 80 00 	mov	r8,32768
8000ccfa:	c0 28       	rjmp	8000ccfe <osc_get_rate+0x3a>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000ccfc:	30 08       	mov	r8,0
	}
}
8000ccfe:	10 9c       	mov	r12,r8
8000cd00:	2f fd       	sub	sp,-4
8000cd02:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd06:	d7 03       	nop

8000cd08 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000cd08:	eb cd 40 80 	pushm	r7,lr
8000cd0c:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000cd0e:	30 0c       	mov	r12,0
8000cd10:	f0 1f 00 06 	mcall	8000cd28 <sysclk_get_main_hz+0x20>
8000cd14:	18 99       	mov	r9,r12
8000cd16:	12 98       	mov	r8,r9
8000cd18:	a3 68       	lsl	r8,0x2
8000cd1a:	12 08       	add	r8,r9
8000cd1c:	a1 78       	lsl	r8,0x1
8000cd1e:	12 08       	add	r8,r9
8000cd20:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000cd22:	10 9c       	mov	r12,r8
8000cd24:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd28:	80 00       	ld.sh	r0,r0[0x0]
8000cd2a:	cc c4       	brge	8000ccc2 <main_msc_disable+0x12>

8000cd2c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000cd2c:	eb cd 40 80 	pushm	r7,lr
8000cd30:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000cd32:	f0 1f 00 04 	mcall	8000cd40 <sysclk_get_cpu_hz+0x14>
8000cd36:	18 98       	mov	r8,r12
}
8000cd38:	10 9c       	mov	r12,r8
8000cd3a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd3e:	00 00       	add	r0,r0
8000cd40:	80 00       	ld.sh	r0,r0[0x0]
8000cd42:	cd 08       	rjmp	8000cee2 <__avr32_udiv64+0x42>

8000cd44 <sysclk_get_pbb_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus B clock
 *
 * \return Frequency of the Peripheral Bus B clock, in Hz.
 */
static inline uint32_t sysclk_get_pbb_hz(void)
{
8000cd44:	eb cd 40 80 	pushm	r7,lr
8000cd48:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBB_DIV;
8000cd4a:	f0 1f 00 04 	mcall	8000cd58 <sysclk_get_pbb_hz+0x14>
8000cd4e:	18 98       	mov	r8,r12
}
8000cd50:	10 9c       	mov	r12,r8
8000cd52:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd56:	00 00       	add	r0,r0
8000cd58:	80 00       	ld.sh	r0,r0[0x0]
8000cd5a:	cd 08       	rjmp	8000cefa <__avr32_udiv64+0x5a>

8000cd5c <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000cd5c:	eb cd 40 80 	pushm	r7,lr
8000cd60:	1a 97       	mov	r7,sp
8000cd62:	20 1d       	sub	sp,4
8000cd64:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000cd68:	ee fb ff fc 	ld.w	r11,r7[-4]
8000cd6c:	30 1c       	mov	r12,1
8000cd6e:	f0 1f 00 03 	mcall	8000cd78 <sysclk_enable_hsb_module+0x1c>
}
8000cd72:	2f fd       	sub	sp,-4
8000cd74:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd78:	80 00       	ld.sh	r0,r0[0x0]
8000cd7a:	a8 a0       	st.b	r4[0x2],r0

8000cd7c <memories_initialization>:
# include "spi.h"
# include "conf_sd_mmc_spi.h"
#endif

void memories_initialization(void)
{
8000cd7c:	eb cd 40 c0 	pushm	r6-r7,lr
8000cd80:	1a 97       	mov	r7,sp
8000cd82:	20 2d       	sub	sp,8
	union {
		unsigned long scfg;
		avr32_hmatrix_scfg_t SCFG;
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);
8000cd84:	30 0c       	mov	r12,0
8000cd86:	f0 1f 00 42 	mcall	8000ce8c <memories_initialization+0x110>

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
8000cd8a:	fe 68 10 00 	mov	r8,-126976
8000cd8e:	71 08       	ld.w	r8,r8[0x40]
	} u_avr32_hmatrix_scfg;

	sysclk_enable_pbb_module(SYSCLK_HMATRIX);

	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000cd90:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000cd94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cd98:	30 19       	mov	r9,1
8000cd9a:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000cd9e:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000cda2:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000cda6:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-flash HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
8000cdaa:	f1 49 00 40 	st.w	r8[64],r9
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
8000cdae:	fe 68 10 00 	mov	r8,-126976
8000cdb2:	71 48       	ld.w	r8,r8[0x50]
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] =
			u_avr32_hmatrix_scfg.scfg;
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000cdb4:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000cdb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cdbc:	30 19       	mov	r9,1
8000cdbe:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000cdc2:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000cdc6:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000cdca:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the internal-SRAM HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
8000cdce:	f1 49 00 50 	st.w	r8[80],r9
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
8000cdd2:	fe 68 10 00 	mov	r8,-126976
8000cdd6:	71 68       	ld.w	r8,r8[0x58]
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_SRAM] =
			u_avr32_hmatrix_scfg.scfg;
# ifdef AVR32_HMATRIX_SLAVE_EBI
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
8000cdd8:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000cddc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cde0:	30 19       	mov	r9,1
8000cde2:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000cde6:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000cdea:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000cdee:	ee f9 ff fc 	ld.w	r9,r7[-4]
	// For the EBI HMATRIX slave, use last master as default.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI];
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_EBI] =
8000cdf2:	f1 49 00 58 	st.w	r8[88],r9
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
8000cdf6:	fe 68 10 00 	mov	r8,-126976
8000cdfa:	70 68       	ld.w	r8,r8[0x18]
		unsigned long                 mcfg;
		avr32_hmatrix_mcfg_t          MCFG;
	} u_avr32_hmatrix_mcfg;
 
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
8000cdfc:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
8000ce00:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ce04:	30 09       	mov	r9,0
8000ce06:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000ce0a:	ef 48 ff f8 	st.w	r7[-8],r8
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000ce0e:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_mcfg.mcfg;
8000ce12:	ee f9 ff f8 	ld.w	r9,r7[-8]
	// For the USBB DMA HMATRIX master, use infinite length burst.
	u_avr32_hmatrix_mcfg.mcfg =
			AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
	u_avr32_hmatrix_mcfg.MCFG.ulbt =
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
8000ce16:	91 69       	st.w	r8[0x18],r9
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
8000ce18:	fe 68 10 00 	mov	r8,-126976
8000ce1c:	71 58       	ld.w	r8,r8[0x54]
			AVR32_HMATRIX_ULBT_INFINITE;
	AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] =
			u_avr32_hmatrix_mcfg.mcfg;
	
	// For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
	u_avr32_hmatrix_scfg.scfg =
8000ce1e:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
8000ce22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ce26:	30 69       	mov	r9,6
8000ce28:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
8000ce2c:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
8000ce30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ce34:	30 29       	mov	r9,2
8000ce36:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000ce3a:	ef 48 ff fc 	st.w	r7[-4],r8
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000ce3e:	fe 68 10 00 	mov	r8,-126976
			u_avr32_hmatrix_scfg.scfg;
8000ce42:	ee f9 ff fc 	ld.w	r9,r7[-4]
			AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
	u_avr32_hmatrix_scfg.SCFG.fixed_defmstr =
			AVR32_HMATRIX_MASTER_USBB_DMA;
	u_avr32_hmatrix_scfg.SCFG.defmstr_type =
			AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
	AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] =
8000ce46:	f1 49 00 54 	st.w	r8[84],r9
#endif

//#if ((defined SD_MMC_MCI_0_MEM) && (SD_MMC_MCI_0_MEM == ENABLE)) \
	//|| ((defined SD_MMC_MCI_1_MEM) && (SD_MMC_MCI_1_MEM == ENABLE))
#if ((defined (SD_MMC_MCI_0_MEM) || defined(SD_MMC_MCI_1_MEM) ) && (SD_MMC_MCI_0_MEM == ENABLE || SD_MMC_MCI_1_MEM == ENABLE))	
	sysclk_enable_pbb_module(SYSCLK_MCI);
8000ce4a:	30 6c       	mov	r12,6
8000ce4c:	f0 1f 00 10 	mcall	8000ce8c <memories_initialization+0x110>
	sysclk_enable_hsb_module(SYSCLK_DMACA);
8000ce50:	30 7c       	mov	r12,7
8000ce52:	f0 1f 00 10 	mcall	8000ce90 <memories_initialization+0x114>
#if SD_MMC_MCI_0_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_8BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000ce56:	f0 1f 00 10 	mcall	8000ce94 <memories_initialization+0x118>
8000ce5a:	18 98       	mov	r8,r12
8000ce5c:	10 96       	mov	r6,r8
8000ce5e:	f0 1f 00 0f 	mcall	8000ce98 <memories_initialization+0x11c>
8000ce62:	18 98       	mov	r8,r12
8000ce64:	0c 9a       	mov	r10,r6
8000ce66:	10 9b       	mov	r11,r8
8000ce68:	30 0c       	mov	r12,0
8000ce6a:	f0 1f 00 0d 	mcall	8000ce9c <memories_initialization+0x120>
#endif
#if SD_MMC_MCI_1_MEM == ENABLE
	sd_mmc_mci_init(SD_SLOT_4BITS, sysclk_get_pbb_hz(), sysclk_get_cpu_hz());
8000ce6e:	f0 1f 00 0a 	mcall	8000ce94 <memories_initialization+0x118>
8000ce72:	18 98       	mov	r8,r12
8000ce74:	10 96       	mov	r6,r8
8000ce76:	f0 1f 00 09 	mcall	8000ce98 <memories_initialization+0x11c>
8000ce7a:	18 98       	mov	r8,r12
8000ce7c:	0c 9a       	mov	r10,r6
8000ce7e:	10 9b       	mov	r11,r8
8000ce80:	30 1c       	mov	r12,1
8000ce82:	f0 1f 00 07 	mcall	8000ce9c <memories_initialization+0x120>

	// Initialize SD/MMC with SPI PB clock.
	sd_mmc_spi_init(spiOptions,sysclk_get_pba_hz());
#endif  // SD_MMC_SPI_MEM == ENABLE

}
8000ce86:	2f ed       	sub	sp,-8
8000ce88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ce8c:	80 00       	ld.sh	r0,r0[0x0]
8000ce8e:	a9 14       	ld.d	r4,--r4
8000ce90:	80 00       	ld.sh	r0,r0[0x0]
8000ce92:	cd 5c       	rcall	8000d03c <__avr32_udiv64+0x19c>
8000ce94:	80 00       	ld.sh	r0,r0[0x0]
8000ce96:	cd 2c       	rcall	8000d03a <__avr32_udiv64+0x19a>
8000ce98:	80 00       	ld.sh	r0,r0[0x0]
8000ce9a:	cd 44       	brge	8000ce42 <memories_initialization+0xc6>
8000ce9c:	80 00       	ld.sh	r0,r0[0x0]
8000ce9e:	52 90       	stdsp	sp[0xa4],r0

8000cea0 <__avr32_udiv64>:
8000cea0:	d4 31       	pushm	r0-r7,lr
8000cea2:	1a 97       	mov	r7,sp
8000cea4:	20 2d       	sub	sp,8
8000cea6:	10 9e       	mov	lr,r8
8000cea8:	12 95       	mov	r5,r9
8000ceaa:	14 96       	mov	r6,r10
8000ceac:	58 09       	cp.w	r9,0
8000ceae:	c4 91       	brne	8000cf40 <__avr32_udiv64+0xa0>
8000ceb0:	16 38       	cp.w	r8,r11
8000ceb2:	e0 88 00 57 	brls	8000cf60 <__avr32_udiv64+0xc0>
8000ceb6:	f0 08 12 00 	clz	r8,r8
8000ceba:	c0 d0       	breq	8000ced4 <__avr32_udiv64+0x34>
8000cebc:	f6 08 09 4b 	lsl	r11,r11,r8
8000cec0:	f0 09 11 20 	rsub	r9,r8,32
8000cec4:	fc 08 09 4e 	lsl	lr,lr,r8
8000cec8:	f4 09 0a 49 	lsr	r9,r10,r9
8000cecc:	f4 08 09 46 	lsl	r6,r10,r8
8000ced0:	f3 eb 10 0b 	or	r11,r9,r11
8000ced4:	fc 05 16 10 	lsr	r5,lr,0x10
8000ced8:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
8000cedc:	f6 05 0d 0a 	divu	r10,r11,r5
8000cee0:	ec 08 16 10 	lsr	r8,r6,0x10
8000cee4:	14 99       	mov	r9,r10
8000cee6:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000ceea:	b9 3a       	mul	r10,r12
8000ceec:	10 3a       	cp.w	r10,r8
8000ceee:	e0 88 00 0c 	brls	8000cf06 <__avr32_udiv64+0x66>
8000cef2:	20 19       	sub	r9,1
8000cef4:	1c 08       	add	r8,lr
8000cef6:	10 3e       	cp.w	lr,r8
8000cef8:	e0 8b 00 07 	brhi	8000cf06 <__avr32_udiv64+0x66>
8000cefc:	10 3a       	cp.w	r10,r8
8000cefe:	f7 b9 0b 01 	subhi	r9,1
8000cf02:	f1 de eb 08 	addhi	r8,r8,lr
8000cf06:	f0 0a 01 0b 	sub	r11,r8,r10
8000cf0a:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000cf0e:	f6 05 0d 0a 	divu	r10,r11,r5
8000cf12:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000cf16:	14 98       	mov	r8,r10
8000cf18:	f4 0c 02 4c 	mul	r12,r10,r12
8000cf1c:	0c 3c       	cp.w	r12,r6
8000cf1e:	e0 88 00 0a 	brls	8000cf32 <__avr32_udiv64+0x92>
8000cf22:	20 18       	sub	r8,1
8000cf24:	1c 06       	add	r6,lr
8000cf26:	0c 3e       	cp.w	lr,r6
8000cf28:	e0 8b 00 05 	brhi	8000cf32 <__avr32_udiv64+0x92>
8000cf2c:	0c 3c       	cp.w	r12,r6
8000cf2e:	f7 b8 0b 01 	subhi	r8,1
8000cf32:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000cf36:	30 0c       	mov	r12,0
8000cf38:	16 9a       	mov	r10,r11
8000cf3a:	18 9b       	mov	r11,r12
8000cf3c:	2f ed       	sub	sp,-8
8000cf3e:	d8 32       	popm	r0-r7,pc
8000cf40:	16 39       	cp.w	r9,r11
8000cf42:	e0 8b 00 51 	brhi	8000cfe4 <__avr32_udiv64+0x144>
8000cf46:	f2 0c 12 00 	clz	r12,r9
8000cf4a:	c5 31       	brne	8000cff0 <__avr32_udiv64+0x150>
8000cf4c:	14 38       	cp.w	r8,r10
8000cf4e:	5f 89       	srls	r9
8000cf50:	16 35       	cp.w	r5,r11
8000cf52:	5f 38       	srlo	r8
8000cf54:	10 49       	or	r9,r8
8000cf56:	f8 09 18 00 	cp.b	r9,r12
8000cf5a:	c4 50       	breq	8000cfe4 <__avr32_udiv64+0x144>
8000cf5c:	30 1b       	mov	r11,1
8000cf5e:	c4 58       	rjmp	8000cfe8 <__avr32_udiv64+0x148>
8000cf60:	58 08       	cp.w	r8,0
8000cf62:	c0 51       	brne	8000cf6c <__avr32_udiv64+0xcc>
8000cf64:	30 19       	mov	r9,1
8000cf66:	f2 08 0d 08 	divu	r8,r9,r8
8000cf6a:	10 9e       	mov	lr,r8
8000cf6c:	fc 08 12 00 	clz	r8,lr
8000cf70:	e0 81 00 91 	brne	8000d092 <__avr32_udiv64+0x1f2>
8000cf74:	1c 1b       	sub	r11,lr
8000cf76:	fc 05 16 10 	lsr	r5,lr,0x10
8000cf7a:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000cf7e:	30 1c       	mov	r12,1
8000cf80:	f6 05 0d 0a 	divu	r10,r11,r5
8000cf84:	ec 08 16 10 	lsr	r8,r6,0x10
8000cf88:	f4 09 02 43 	mul	r3,r10,r9
8000cf8c:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000cf90:	14 9b       	mov	r11,r10
8000cf92:	10 33       	cp.w	r3,r8
8000cf94:	e0 88 00 0c 	brls	8000cfac <__avr32_udiv64+0x10c>
8000cf98:	20 1b       	sub	r11,1
8000cf9a:	1c 08       	add	r8,lr
8000cf9c:	10 3e       	cp.w	lr,r8
8000cf9e:	e0 8b 00 07 	brhi	8000cfac <__avr32_udiv64+0x10c>
8000cfa2:	10 33       	cp.w	r3,r8
8000cfa4:	f7 bb 0b 01 	subhi	r11,1
8000cfa8:	f1 de eb 08 	addhi	r8,r8,lr
8000cfac:	f0 03 01 03 	sub	r3,r8,r3
8000cfb0:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000cfb4:	e6 05 0d 02 	divu	r2,r3,r5
8000cfb8:	ed e3 11 06 	or	r6,r6,r3<<0x10
8000cfbc:	04 98       	mov	r8,r2
8000cfbe:	e4 09 02 49 	mul	r9,r2,r9
8000cfc2:	0c 39       	cp.w	r9,r6
8000cfc4:	e0 88 00 0a 	brls	8000cfd8 <__avr32_udiv64+0x138>
8000cfc8:	20 18       	sub	r8,1
8000cfca:	1c 06       	add	r6,lr
8000cfcc:	0c 3e       	cp.w	lr,r6
8000cfce:	e0 8b 00 05 	brhi	8000cfd8 <__avr32_udiv64+0x138>
8000cfd2:	0c 39       	cp.w	r9,r6
8000cfd4:	f7 b8 0b 01 	subhi	r8,1
8000cfd8:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000cfdc:	16 9a       	mov	r10,r11
8000cfde:	18 9b       	mov	r11,r12
8000cfe0:	2f ed       	sub	sp,-8
8000cfe2:	d8 32       	popm	r0-r7,pc
8000cfe4:	30 0b       	mov	r11,0
8000cfe6:	16 9c       	mov	r12,r11
8000cfe8:	16 9a       	mov	r10,r11
8000cfea:	18 9b       	mov	r11,r12
8000cfec:	2f ed       	sub	sp,-8
8000cfee:	d8 32       	popm	r0-r7,pc
8000cff0:	f2 0c 09 45 	lsl	r5,r9,r12
8000cff4:	f8 0e 11 20 	rsub	lr,r12,32
8000cff8:	f0 0c 09 43 	lsl	r3,r8,r12
8000cffc:	f4 0e 0a 46 	lsr	r6,r10,lr
8000d000:	f0 0e 0a 48 	lsr	r8,r8,lr
8000d004:	f6 0e 0a 4e 	lsr	lr,r11,lr
8000d008:	0a 48       	or	r8,r5
8000d00a:	f0 01 16 10 	lsr	r1,r8,0x10
8000d00e:	fc 01 0d 04 	divu	r4,lr,r1
8000d012:	ee e5 ff f8 	st.d	r7[-8],r4
8000d016:	f6 0c 09 49 	lsl	r9,r11,r12
8000d01a:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000d01e:	ed e9 10 09 	or	r9,r6,r9
8000d022:	08 96       	mov	r6,r4
8000d024:	f2 0e 16 10 	lsr	lr,r9,0x10
8000d028:	ee f4 ff f8 	ld.w	r4,r7[-8]
8000d02c:	ec 05 02 4b 	mul	r11,r6,r5
8000d030:	fd e4 11 0e 	or	lr,lr,r4<<0x10
8000d034:	1c 3b       	cp.w	r11,lr
8000d036:	e0 88 00 07 	brls	8000d044 <__avr32_udiv64+0x1a4>
8000d03a:	20 16       	sub	r6,1
8000d03c:	10 0e       	add	lr,r8
8000d03e:	1c 38       	cp.w	r8,lr
8000d040:	e0 88 00 6d 	brls	8000d11a <__avr32_udiv64+0x27a>
8000d044:	16 1e       	sub	lr,r11
8000d046:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000d04a:	fc 01 0d 00 	divu	r0,lr,r1
8000d04e:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000d052:	00 9b       	mov	r11,r0
8000d054:	e0 05 02 4e 	mul	lr,r0,r5
8000d058:	12 3e       	cp.w	lr,r9
8000d05a:	e0 88 00 07 	brls	8000d068 <__avr32_udiv64+0x1c8>
8000d05e:	20 1b       	sub	r11,1
8000d060:	10 09       	add	r9,r8
8000d062:	12 38       	cp.w	r8,r9
8000d064:	e0 88 00 55 	brls	8000d10e <__avr32_udiv64+0x26e>
8000d068:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
8000d06c:	1c 19       	sub	r9,lr
8000d06e:	f6 03 06 42 	mulu.d	r2,r11,r3
8000d072:	06 39       	cp.w	r9,r3
8000d074:	c0 93       	brcs	8000d086 <__avr32_udiv64+0x1e6>
8000d076:	5f 09       	sreq	r9
8000d078:	f4 0c 09 4c 	lsl	r12,r10,r12
8000d07c:	04 3c       	cp.w	r12,r2
8000d07e:	5f 38       	srlo	r8
8000d080:	f3 e8 00 08 	and	r8,r9,r8
8000d084:	c0 20       	breq	8000d088 <__avr32_udiv64+0x1e8>
8000d086:	20 1b       	sub	r11,1
8000d088:	30 0c       	mov	r12,0
8000d08a:	16 9a       	mov	r10,r11
8000d08c:	18 9b       	mov	r11,r12
8000d08e:	2f ed       	sub	sp,-8
8000d090:	d8 32       	popm	r0-r7,pc
8000d092:	f6 08 09 49 	lsl	r9,r11,r8
8000d096:	fc 08 09 4e 	lsl	lr,lr,r8
8000d09a:	f0 01 11 20 	rsub	r1,r8,32
8000d09e:	fc 05 16 10 	lsr	r5,lr,0x10
8000d0a2:	f4 01 0a 42 	lsr	r2,r10,r1
8000d0a6:	f6 01 0a 41 	lsr	r1,r11,r1
8000d0aa:	12 42       	or	r2,r9
8000d0ac:	e2 05 0d 00 	divu	r0,r1,r5
8000d0b0:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000d0b4:	e4 06 16 10 	lsr	r6,r2,0x10
8000d0b8:	00 93       	mov	r3,r0
8000d0ba:	ed e1 11 06 	or	r6,r6,r1<<0x10
8000d0be:	e0 09 02 4c 	mul	r12,r0,r9
8000d0c2:	0c 3c       	cp.w	r12,r6
8000d0c4:	e0 88 00 07 	brls	8000d0d2 <__avr32_udiv64+0x232>
8000d0c8:	20 13       	sub	r3,1
8000d0ca:	1c 06       	add	r6,lr
8000d0cc:	0c 3e       	cp.w	lr,r6
8000d0ce:	e0 88 00 2c 	brls	8000d126 <__avr32_udiv64+0x286>
8000d0d2:	ec 0c 01 01 	sub	r1,r6,r12
8000d0d6:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000d0da:	e2 05 0d 00 	divu	r0,r1,r5
8000d0de:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000d0e2:	00 9c       	mov	r12,r0
8000d0e4:	e0 09 02 41 	mul	r1,r0,r9
8000d0e8:	16 31       	cp.w	r1,r11
8000d0ea:	e0 88 00 0c 	brls	8000d102 <__avr32_udiv64+0x262>
8000d0ee:	20 1c       	sub	r12,1
8000d0f0:	1c 0b       	add	r11,lr
8000d0f2:	16 3e       	cp.w	lr,r11
8000d0f4:	e0 8b 00 07 	brhi	8000d102 <__avr32_udiv64+0x262>
8000d0f8:	16 31       	cp.w	r1,r11
8000d0fa:	f7 bc 0b 01 	subhi	r12,1
8000d0fe:	f7 de eb 0b 	addhi	r11,r11,lr
8000d102:	f4 08 09 46 	lsl	r6,r10,r8
8000d106:	02 1b       	sub	r11,r1
8000d108:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
8000d10c:	c3 ab       	rjmp	8000cf80 <__avr32_udiv64+0xe0>
8000d10e:	12 3e       	cp.w	lr,r9
8000d110:	f3 d8 eb 09 	addhi	r9,r9,r8
8000d114:	f7 bb 0b 01 	subhi	r11,1
8000d118:	ca 8b       	rjmp	8000d068 <__avr32_udiv64+0x1c8>
8000d11a:	1c 3b       	cp.w	r11,lr
8000d11c:	f7 b6 0b 01 	subhi	r6,1
8000d120:	fd d8 eb 0e 	addhi	lr,lr,r8
8000d124:	c9 0b       	rjmp	8000d044 <__avr32_udiv64+0x1a4>
8000d126:	0c 3c       	cp.w	r12,r6
8000d128:	f7 b3 0b 01 	subhi	r3,1
8000d12c:	ed de eb 06 	addhi	r6,r6,lr
8000d130:	cd 1b       	rjmp	8000d0d2 <__avr32_udiv64+0x232>

8000d132 <memcpy>:
8000d132:	58 8a       	cp.w	r10,8
8000d134:	c2 f5       	brlt	8000d192 <memcpy+0x60>
8000d136:	f9 eb 10 09 	or	r9,r12,r11
8000d13a:	e2 19 00 03 	andl	r9,0x3,COH
8000d13e:	e0 81 00 97 	brne	8000d26c <memcpy+0x13a>
8000d142:	e0 4a 00 20 	cp.w	r10,32
8000d146:	c3 b4       	brge	8000d1bc <memcpy+0x8a>
8000d148:	f4 08 14 02 	asr	r8,r10,0x2
8000d14c:	f0 09 11 08 	rsub	r9,r8,8
8000d150:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000d154:	76 69       	ld.w	r9,r11[0x18]
8000d156:	99 69       	st.w	r12[0x18],r9
8000d158:	76 59       	ld.w	r9,r11[0x14]
8000d15a:	99 59       	st.w	r12[0x14],r9
8000d15c:	76 49       	ld.w	r9,r11[0x10]
8000d15e:	99 49       	st.w	r12[0x10],r9
8000d160:	76 39       	ld.w	r9,r11[0xc]
8000d162:	99 39       	st.w	r12[0xc],r9
8000d164:	76 29       	ld.w	r9,r11[0x8]
8000d166:	99 29       	st.w	r12[0x8],r9
8000d168:	76 19       	ld.w	r9,r11[0x4]
8000d16a:	99 19       	st.w	r12[0x4],r9
8000d16c:	76 09       	ld.w	r9,r11[0x0]
8000d16e:	99 09       	st.w	r12[0x0],r9
8000d170:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000d174:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000d178:	e0 1a 00 03 	andl	r10,0x3
8000d17c:	f4 0a 11 04 	rsub	r10,r10,4
8000d180:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000d184:	17 a9       	ld.ub	r9,r11[0x2]
8000d186:	b0 a9       	st.b	r8[0x2],r9
8000d188:	17 99       	ld.ub	r9,r11[0x1]
8000d18a:	b0 99       	st.b	r8[0x1],r9
8000d18c:	17 89       	ld.ub	r9,r11[0x0]
8000d18e:	b0 89       	st.b	r8[0x0],r9
8000d190:	5e fc       	retal	r12
8000d192:	f4 0a 11 09 	rsub	r10,r10,9
8000d196:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000d19a:	17 f9       	ld.ub	r9,r11[0x7]
8000d19c:	b8 f9       	st.b	r12[0x7],r9
8000d19e:	17 e9       	ld.ub	r9,r11[0x6]
8000d1a0:	b8 e9       	st.b	r12[0x6],r9
8000d1a2:	17 d9       	ld.ub	r9,r11[0x5]
8000d1a4:	b8 d9       	st.b	r12[0x5],r9
8000d1a6:	17 c9       	ld.ub	r9,r11[0x4]
8000d1a8:	b8 c9       	st.b	r12[0x4],r9
8000d1aa:	17 b9       	ld.ub	r9,r11[0x3]
8000d1ac:	b8 b9       	st.b	r12[0x3],r9
8000d1ae:	17 a9       	ld.ub	r9,r11[0x2]
8000d1b0:	b8 a9       	st.b	r12[0x2],r9
8000d1b2:	17 99       	ld.ub	r9,r11[0x1]
8000d1b4:	b8 99       	st.b	r12[0x1],r9
8000d1b6:	17 89       	ld.ub	r9,r11[0x0]
8000d1b8:	b8 89       	st.b	r12[0x0],r9
8000d1ba:	5e fc       	retal	r12
8000d1bc:	eb cd 40 c0 	pushm	r6-r7,lr
8000d1c0:	18 99       	mov	r9,r12
8000d1c2:	22 0a       	sub	r10,32
8000d1c4:	b7 07       	ld.d	r6,r11++
8000d1c6:	b3 26       	st.d	r9++,r6
8000d1c8:	b7 07       	ld.d	r6,r11++
8000d1ca:	b3 26       	st.d	r9++,r6
8000d1cc:	b7 07       	ld.d	r6,r11++
8000d1ce:	b3 26       	st.d	r9++,r6
8000d1d0:	b7 07       	ld.d	r6,r11++
8000d1d2:	b3 26       	st.d	r9++,r6
8000d1d4:	22 0a       	sub	r10,32
8000d1d6:	cf 74       	brge	8000d1c4 <memcpy+0x92>
8000d1d8:	2f 0a       	sub	r10,-16
8000d1da:	c0 65       	brlt	8000d1e6 <memcpy+0xb4>
8000d1dc:	b7 07       	ld.d	r6,r11++
8000d1de:	b3 26       	st.d	r9++,r6
8000d1e0:	b7 07       	ld.d	r6,r11++
8000d1e2:	b3 26       	st.d	r9++,r6
8000d1e4:	21 0a       	sub	r10,16
8000d1e6:	5c 3a       	neg	r10
8000d1e8:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000d1ec:	d7 03       	nop
8000d1ee:	d7 03       	nop
8000d1f0:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000d1f4:	f3 66 00 0e 	st.b	r9[14],r6
8000d1f8:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000d1fc:	f3 66 00 0d 	st.b	r9[13],r6
8000d200:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000d204:	f3 66 00 0c 	st.b	r9[12],r6
8000d208:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000d20c:	f3 66 00 0b 	st.b	r9[11],r6
8000d210:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000d214:	f3 66 00 0a 	st.b	r9[10],r6
8000d218:	f7 36 00 09 	ld.ub	r6,r11[9]
8000d21c:	f3 66 00 09 	st.b	r9[9],r6
8000d220:	f7 36 00 08 	ld.ub	r6,r11[8]
8000d224:	f3 66 00 08 	st.b	r9[8],r6
8000d228:	f7 36 00 07 	ld.ub	r6,r11[7]
8000d22c:	f3 66 00 07 	st.b	r9[7],r6
8000d230:	f7 36 00 06 	ld.ub	r6,r11[6]
8000d234:	f3 66 00 06 	st.b	r9[6],r6
8000d238:	f7 36 00 05 	ld.ub	r6,r11[5]
8000d23c:	f3 66 00 05 	st.b	r9[5],r6
8000d240:	f7 36 00 04 	ld.ub	r6,r11[4]
8000d244:	f3 66 00 04 	st.b	r9[4],r6
8000d248:	f7 36 00 03 	ld.ub	r6,r11[3]
8000d24c:	f3 66 00 03 	st.b	r9[3],r6
8000d250:	f7 36 00 02 	ld.ub	r6,r11[2]
8000d254:	f3 66 00 02 	st.b	r9[2],r6
8000d258:	f7 36 00 01 	ld.ub	r6,r11[1]
8000d25c:	f3 66 00 01 	st.b	r9[1],r6
8000d260:	f7 36 00 00 	ld.ub	r6,r11[0]
8000d264:	f3 66 00 00 	st.b	r9[0],r6
8000d268:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d26c:	20 1a       	sub	r10,1
8000d26e:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000d272:	f8 0a 0b 09 	st.b	r12[r10],r9
8000d276:	cf b1       	brne	8000d26c <memcpy+0x13a>
8000d278:	5e fc       	retal	r12

8000d27a <memset>:
8000d27a:	18 98       	mov	r8,r12
8000d27c:	c0 38       	rjmp	8000d282 <memset+0x8>
8000d27e:	10 cb       	st.b	r8++,r11
8000d280:	20 1a       	sub	r10,1
8000d282:	58 0a       	cp.w	r10,0
8000d284:	cf d1       	brne	8000d27e <memset+0x4>
8000d286:	5e fc       	retal	r12

Disassembly of section .exception:

8000d400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000d400:	c0 08       	rjmp	8000d400 <_evba>
	...

8000d404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000d404:	c0 08       	rjmp	8000d404 <_handle_TLB_Multiple_Hit>
	...

8000d408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000d408:	c0 08       	rjmp	8000d408 <_handle_Bus_Error_Data_Fetch>
	...

8000d40c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000d40c:	c0 08       	rjmp	8000d40c <_handle_Bus_Error_Instruction_Fetch>
	...

8000d410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000d410:	c0 08       	rjmp	8000d410 <_handle_NMI>
	...

8000d414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000d414:	c0 08       	rjmp	8000d414 <_handle_Instruction_Address>
	...

8000d418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000d418:	c0 08       	rjmp	8000d418 <_handle_ITLB_Protection>
	...

8000d41c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000d41c:	c0 08       	rjmp	8000d41c <_handle_Breakpoint>
	...

8000d420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000d420:	c0 08       	rjmp	8000d420 <_handle_Illegal_Opcode>
	...

8000d424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000d424:	c0 08       	rjmp	8000d424 <_handle_Unimplemented_Instruction>
	...

8000d428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000d428:	c0 08       	rjmp	8000d428 <_handle_Privilege_Violation>
	...

8000d42c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000d42c:	c0 08       	rjmp	8000d42c <_handle_Floating_Point>
	...

8000d430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000d430:	c0 08       	rjmp	8000d430 <_handle_Coprocessor_Absent>
	...

8000d434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000d434:	c0 08       	rjmp	8000d434 <_handle_Data_Address_Read>
	...

8000d438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000d438:	c0 08       	rjmp	8000d438 <_handle_Data_Address_Write>
	...

8000d43c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000d43c:	c0 08       	rjmp	8000d43c <_handle_DTLB_Protection_Read>
	...

8000d440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000d440:	c0 08       	rjmp	8000d440 <_handle_DTLB_Protection_Write>
	...

8000d444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000d444:	c0 08       	rjmp	8000d444 <_handle_DTLB_Modified>
	...

8000d450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000d450:	c0 08       	rjmp	8000d450 <_handle_ITLB_Miss>
	...

8000d460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000d460:	c0 08       	rjmp	8000d460 <_handle_DTLB_Miss_Read>
	...

8000d470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000d470:	c0 08       	rjmp	8000d470 <_handle_DTLB_Miss_Write>
	...

8000d500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000d500:	c0 08       	rjmp	8000d500 <_handle_Supervisor_Call>
8000d502:	d7 03       	nop

8000d504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d504:	30 0c       	mov	r12,0
8000d506:	fe b0 d1 bd 	rcall	80007880 <_get_interrupt_handler>
8000d50a:	58 0c       	cp.w	r12,0
8000d50c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d510:	d6 03       	rete

8000d512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d512:	30 1c       	mov	r12,1
8000d514:	fe b0 d1 b6 	rcall	80007880 <_get_interrupt_handler>
8000d518:	58 0c       	cp.w	r12,0
8000d51a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d51e:	d6 03       	rete

8000d520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d520:	30 2c       	mov	r12,2
8000d522:	fe b0 d1 af 	rcall	80007880 <_get_interrupt_handler>
8000d526:	58 0c       	cp.w	r12,0
8000d528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d52c:	d6 03       	rete

8000d52e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d52e:	30 3c       	mov	r12,3
8000d530:	fe b0 d1 a8 	rcall	80007880 <_get_interrupt_handler>
8000d534:	58 0c       	cp.w	r12,0
8000d536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d53a:	d6 03       	rete
8000d53c:	d7 03       	nop
8000d53e:	d7 03       	nop
8000d540:	d7 03       	nop
8000d542:	d7 03       	nop
8000d544:	d7 03       	nop
8000d546:	d7 03       	nop
8000d548:	d7 03       	nop
8000d54a:	d7 03       	nop
8000d54c:	d7 03       	nop
8000d54e:	d7 03       	nop
8000d550:	d7 03       	nop
8000d552:	d7 03       	nop
8000d554:	d7 03       	nop
8000d556:	d7 03       	nop
8000d558:	d7 03       	nop
8000d55a:	d7 03       	nop
8000d55c:	d7 03       	nop
8000d55e:	d7 03       	nop
8000d560:	d7 03       	nop
8000d562:	d7 03       	nop
8000d564:	d7 03       	nop
8000d566:	d7 03       	nop
8000d568:	d7 03       	nop
8000d56a:	d7 03       	nop
8000d56c:	d7 03       	nop
8000d56e:	d7 03       	nop
8000d570:	d7 03       	nop
8000d572:	d7 03       	nop
8000d574:	d7 03       	nop
8000d576:	d7 03       	nop
8000d578:	d7 03       	nop
8000d57a:	d7 03       	nop
8000d57c:	d7 03       	nop
8000d57e:	d7 03       	nop
8000d580:	d7 03       	nop
8000d582:	d7 03       	nop
8000d584:	d7 03       	nop
8000d586:	d7 03       	nop
8000d588:	d7 03       	nop
8000d58a:	d7 03       	nop
8000d58c:	d7 03       	nop
8000d58e:	d7 03       	nop
8000d590:	d7 03       	nop
8000d592:	d7 03       	nop
8000d594:	d7 03       	nop
8000d596:	d7 03       	nop
8000d598:	d7 03       	nop
8000d59a:	d7 03       	nop
8000d59c:	d7 03       	nop
8000d59e:	d7 03       	nop
8000d5a0:	d7 03       	nop
8000d5a2:	d7 03       	nop
8000d5a4:	d7 03       	nop
8000d5a6:	d7 03       	nop
8000d5a8:	d7 03       	nop
8000d5aa:	d7 03       	nop
8000d5ac:	d7 03       	nop
8000d5ae:	d7 03       	nop
8000d5b0:	d7 03       	nop
8000d5b2:	d7 03       	nop
8000d5b4:	d7 03       	nop
8000d5b6:	d7 03       	nop
8000d5b8:	d7 03       	nop
8000d5ba:	d7 03       	nop
8000d5bc:	d7 03       	nop
8000d5be:	d7 03       	nop
8000d5c0:	d7 03       	nop
8000d5c2:	d7 03       	nop
8000d5c4:	d7 03       	nop
8000d5c6:	d7 03       	nop
8000d5c8:	d7 03       	nop
8000d5ca:	d7 03       	nop
8000d5cc:	d7 03       	nop
8000d5ce:	d7 03       	nop
8000d5d0:	d7 03       	nop
8000d5d2:	d7 03       	nop
8000d5d4:	d7 03       	nop
8000d5d6:	d7 03       	nop
8000d5d8:	d7 03       	nop
8000d5da:	d7 03       	nop
8000d5dc:	d7 03       	nop
8000d5de:	d7 03       	nop
8000d5e0:	d7 03       	nop
8000d5e2:	d7 03       	nop
8000d5e4:	d7 03       	nop
8000d5e6:	d7 03       	nop
8000d5e8:	d7 03       	nop
8000d5ea:	d7 03       	nop
8000d5ec:	d7 03       	nop
8000d5ee:	d7 03       	nop
8000d5f0:	d7 03       	nop
8000d5f2:	d7 03       	nop
8000d5f4:	d7 03       	nop
8000d5f6:	d7 03       	nop
8000d5f8:	d7 03       	nop
8000d5fa:	d7 03       	nop
8000d5fc:	d7 03       	nop
8000d5fe:	d7 03       	nop
